Title: Apache APISIX: How to implement plugin orchestration in API GatewayEdit proposal
Publication date: 2020-10-16
Playlist: ApacheCon @Home 2020: Incubator
Description: 
	Apache APISIX: How to implement plugin orchestration in API GatewayEdit proposal
Ming Wen

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Apache APISIX is a cloud-native API gateway that provides the same plugin mechanism as other gateways. However, in Apache APISIX, plugin orchestration is also provided that allows users to control the conditions and order for running plugins. Apache APISIX uses DAG(Directed Acyclic Graph) to implement this feature. In this share, we'll introduce Apache APISIX, and use a few examples to explain the advantages of plugin orchestration, and the specific implementation.

PPMC member of Apache APISIX CEO of ZhiLiu Technology Co., Ltd, China Speaker of ApcheCon EU 2016
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,000 --> 00:00:28,720
everyone

00:00:24,800 --> 00:00:29,279
my name is umi and i'm very happy to be

00:00:28,720 --> 00:00:31,119
here

00:00:29,279 --> 00:00:32,800
to have the opportunity to share

00:00:31,119 --> 00:00:35,920
technology with you

00:00:32,800 --> 00:00:38,719
and the apache conference today

00:00:35,920 --> 00:00:39,440
i want to share about uh share with you

00:00:38,719 --> 00:00:42,800
how to

00:00:39,440 --> 00:00:47,920
implement a plug in organization

00:00:42,800 --> 00:00:52,239
in the api gateway of apache api 6.

00:00:47,920 --> 00:00:55,199
first let me introduce myself

00:00:52,239 --> 00:00:56,480
i come from china i'm the co-founder of

00:00:55,199 --> 00:01:01,280
api 7.

00:00:56,480 --> 00:01:04,799
api 7 is a chinese startup company

00:01:01,280 --> 00:01:08,640
and i'm the vp and the pmc member of the

00:01:04,799 --> 00:01:11,439
open source project apache ps6

00:01:08,640 --> 00:01:12,720
i'm also the committee of apache

00:01:11,439 --> 00:01:15,520
skywalking

00:01:12,720 --> 00:01:17,280
in addition i'm the founder of the

00:01:15,520 --> 00:01:21,119
chihuahua 360

00:01:17,280 --> 00:01:25,360
open source committee tencent cloud tvp

00:01:21,119 --> 00:01:30,720
and a toc member of the task foundation

00:01:25,360 --> 00:01:30,720
i have more than 40 creative patterns

00:01:31,119 --> 00:01:38,079
okay in today's topic i will

00:01:34,159 --> 00:01:38,840
introduce four parts first it will be a

00:01:38,079 --> 00:01:42,000
brief

00:01:38,840 --> 00:01:45,040
introduction of apache ps6

00:01:42,000 --> 00:01:49,280
what is apache ps6 and

00:01:45,040 --> 00:01:51,520
what can apache ps6 help us to deal with

00:01:49,280 --> 00:01:52,640
the second part is the customer

00:01:51,520 --> 00:01:56,079
development

00:01:52,640 --> 00:01:59,200
in the api gateway and the third part

00:01:56,079 --> 00:02:02,320
is the plug-in in apa gpi6

00:01:59,200 --> 00:02:05,600
how can we economically generate the

00:02:02,320 --> 00:02:09,119
plug-in apache ps6 and the last

00:02:05,600 --> 00:02:13,120
part is some thoughts on the

00:02:09,119 --> 00:02:13,120
future of api gateway

00:02:14,319 --> 00:02:18,879
and first of all let me briefly

00:02:17,760 --> 00:02:22,080
introduce

00:02:18,879 --> 00:02:25,360
of apache ps6

00:02:22,080 --> 00:02:26,560
nema sentence is a close native api

00:02:25,360 --> 00:02:29,599
gateway

00:02:26,560 --> 00:02:32,800
here is a repo address of api 6

00:02:29,599 --> 00:02:36,080
on github api 6 is a

00:02:32,800 --> 00:02:39,360
very young project it was open sourced

00:02:36,080 --> 00:02:41,760
in june last year and donated to apache

00:02:39,360 --> 00:02:44,879
incubator in october

00:02:41,760 --> 00:02:48,080
in july this year episodes

00:02:44,879 --> 00:02:51,760
granted it from apache incubator and

00:02:48,080 --> 00:02:55,920
became a top level project

00:02:51,760 --> 00:02:59,840
api 6 is a fast growing community

00:02:55,920 --> 00:02:59,840
it only took 9 months

00:03:00,800 --> 00:03:05,840
for developers who are not familiar with

00:03:03,840 --> 00:03:08,879
apache plastics

00:03:05,840 --> 00:03:12,879
you can simply think api 6

00:03:08,879 --> 00:03:16,480
is an enhanced version of index

00:03:12,879 --> 00:03:20,319
which covers all features of ndx

00:03:16,480 --> 00:03:20,879
while using lula lula bring more dynamic

00:03:20,319 --> 00:03:24,879
features

00:03:20,879 --> 00:03:27,920
to index it brings engines

00:03:24,879 --> 00:03:28,480
into a very powerful api gateway the

00:03:27,920 --> 00:03:31,760
biggest

00:03:28,480 --> 00:03:35,200
feature of api 6 is

00:03:31,760 --> 00:03:38,959
api 6 is for dynamic including

00:03:35,200 --> 00:03:42,239
routing ssl search plugin

00:03:38,959 --> 00:03:45,440
in api 6 all features are dynamically

00:03:42,239 --> 00:03:48,720
configured through the admin api

00:03:45,440 --> 00:03:52,080
without restart the service and all

00:03:48,720 --> 00:03:54,640
in api 6 users business needs

00:03:52,080 --> 00:03:55,200
are all realized by using doula to

00:03:54,640 --> 00:03:58,720
develop

00:03:55,200 --> 00:03:59,840
plugins eps 6 has more than 40 built-in

00:03:58,720 --> 00:04:02,959
plugins

00:03:59,840 --> 00:04:07,040
including other limited rate

00:04:02,959 --> 00:04:09,840
limit request security log of adversity

00:04:07,040 --> 00:04:10,799
which basically covers all the features

00:04:09,840 --> 00:04:15,200
that users

00:04:10,799 --> 00:04:18,560
may use in the enterprise

00:04:15,200 --> 00:04:22,880
so let's take a look and what can

00:04:18,560 --> 00:04:25,919
api 6 do for you api 6 can handle

00:04:22,880 --> 00:04:30,240
l4 and l7 traffic

00:04:25,919 --> 00:04:33,759
include http https

00:04:30,240 --> 00:04:37,199
tcp udp mqtt

00:04:33,759 --> 00:04:40,720
and some other pro codes

00:04:37,199 --> 00:04:44,720
because api 6 is based on engix so

00:04:40,720 --> 00:04:48,240
you can use it api 6 instead of

00:04:44,720 --> 00:04:51,360
index to handle the noise source traffic

00:04:48,240 --> 00:04:52,479
at the same time api 6 can also handle

00:04:51,360 --> 00:04:55,040
the traffic

00:04:52,479 --> 00:04:56,720
between microservices well so you can

00:04:55,040 --> 00:04:59,759
use it to

00:04:56,720 --> 00:05:02,880
use it to replace envoy

00:04:59,759 --> 00:05:06,240
we also have some users who use epi 6

00:05:02,880 --> 00:05:10,160
as a kubernetes ingress controller

00:05:06,240 --> 00:05:13,199
at the same time with the help of epi 6

00:05:10,160 --> 00:05:16,320
mqtt plugin we can also use

00:05:13,199 --> 00:05:19,600
epi 6 as an iot gateway

00:05:16,320 --> 00:05:23,360
i'll use the idp plugin to turn

00:05:19,600 --> 00:05:27,120
api 6 into a 0 trust gateway

00:05:23,360 --> 00:05:30,560
so api 6 is more concerned about

00:05:27,120 --> 00:05:34,160
the power of the gateway itself

00:05:30,560 --> 00:05:37,600
through plugin user can turn api 6

00:05:34,160 --> 00:05:41,840
into variables

00:05:37,600 --> 00:05:41,840
gateways required by their business

00:05:44,160 --> 00:05:48,560
and this technology architecture of api

00:05:47,759 --> 00:05:51,520
6.

00:05:48,560 --> 00:05:51,919
from this picture we can say that api

00:05:51,520 --> 00:05:55,199
six

00:05:51,919 --> 00:05:58,240
has two parts the left one

00:05:55,199 --> 00:06:00,880
is the data blind and the right one is

00:05:58,240 --> 00:06:00,880
control ply

00:06:01,280 --> 00:06:07,199
first let's take a look at the data line

00:06:04,400 --> 00:06:07,520
after the user request is proceed

00:06:07,199 --> 00:06:11,120
through

00:06:07,520 --> 00:06:14,800
api 6 it can be posited to the

00:06:11,120 --> 00:06:17,039
private api public api or the painters

00:06:14,800 --> 00:06:20,720
api

00:06:17,039 --> 00:06:24,240
inside api 6 are built in

00:06:20,720 --> 00:06:28,160
with a way similar to the logo bricks

00:06:24,240 --> 00:06:31,440
you can easily remove or aid a plug-in

00:06:28,160 --> 00:06:33,440
without restart the service

00:06:31,440 --> 00:06:35,520
then let's take a look at the control

00:06:33,440 --> 00:06:38,319
plan in the control plan

00:06:35,520 --> 00:06:41,360
the domain is twitter can write the

00:06:38,319 --> 00:06:44,960
configurations to the etcd cluster

00:06:41,360 --> 00:06:46,160
through the the me api then the admin

00:06:44,960 --> 00:06:50,080
api dataply

00:06:46,160 --> 00:06:53,840
will work etcd so the configurations

00:06:50,080 --> 00:06:57,919
can reach our data plans without within

00:06:53,840 --> 00:07:01,280
1 milliseconds after the node of the

00:06:57,919 --> 00:07:04,080
data plan proceeds the data

00:07:01,280 --> 00:07:04,960
there is a report some metrics and log

00:07:04,080 --> 00:07:08,240
data

00:07:04,960 --> 00:07:11,840
to compose some like

00:07:08,240 --> 00:07:17,120
such as scale working blue missions

00:07:11,840 --> 00:07:18,479
extra from this picture we can also see

00:07:17,120 --> 00:07:21,919
that api 6

00:07:18,479 --> 00:07:24,960
only released on etcd yes

00:07:21,919 --> 00:07:29,280
only dtcd and doesn't

00:07:24,960 --> 00:07:32,720
have any ideas like my cycle

00:07:29,280 --> 00:07:37,199
or poster grace therefore api 6

00:07:32,720 --> 00:07:41,599
is better designed for high availability

00:07:37,199 --> 00:07:45,360
at the same time api 6's

00:07:41,599 --> 00:07:49,199
added capture will be simple convenient

00:07:45,360 --> 00:07:49,199
for deploy and ops

00:07:51,360 --> 00:07:56,400
this picture is the landscape of apache

00:07:54,639 --> 00:07:59,840
api 6.

00:07:56,400 --> 00:08:04,160
looking at it from the left api 6

00:07:59,840 --> 00:08:06,960
supports many l4 and l7 protocols

00:08:04,160 --> 00:08:08,160
it's not only support traffic from the

00:08:06,960 --> 00:08:11,360
browsers

00:08:08,160 --> 00:08:14,400
and the mobile apps but

00:08:11,360 --> 00:08:17,919
it also supports iot drivers

00:08:14,400 --> 00:08:21,199
to report traffic to episodes

00:08:17,919 --> 00:08:23,039
api 6 also supports many service

00:08:21,199 --> 00:08:26,720
discovery centers

00:08:23,039 --> 00:08:30,560
for example the etcd

00:08:26,720 --> 00:08:34,719
console nicos

00:08:30,560 --> 00:08:38,159
as a very important infrastructure

00:08:34,719 --> 00:08:38,479
software api gateway is generally placed

00:08:38,159 --> 00:08:42,159
and

00:08:38,479 --> 00:08:45,360
the entrance of the traffic therefore

00:08:42,159 --> 00:08:46,000
it's not only needs to proceed our

00:08:45,360 --> 00:08:49,760
request

00:08:46,000 --> 00:08:52,800
from client but it also needs to connect

00:08:49,760 --> 00:08:55,680
to some backend services

00:08:52,800 --> 00:08:57,360
for example the skywalking data dog

00:08:55,680 --> 00:09:00,880
kafka

00:08:57,360 --> 00:09:03,040
and the bottom of the picture api 6 not

00:09:00,880 --> 00:09:07,040
only supports running on

00:09:03,040 --> 00:09:08,320
bare miter but also on services in

00:09:07,040 --> 00:09:12,240
various public

00:09:08,320 --> 00:09:15,120
cloud for example the google aws

00:09:12,240 --> 00:09:17,760
we also support running on the arm

00:09:15,120 --> 00:09:21,360
platform

00:09:17,760 --> 00:09:24,560
okay the part one is a brief

00:09:21,360 --> 00:09:25,519
introduction to api six and then in the

00:09:24,560 --> 00:09:28,640
part two

00:09:25,519 --> 00:09:37,839
i will introduce the development

00:09:28,640 --> 00:09:37,839
of customer plugins in api gateway

00:09:38,240 --> 00:09:41,920
customer development is a very important

00:09:41,120 --> 00:09:45,519
point

00:09:41,920 --> 00:09:49,440
when we use open source api gateways and

00:09:45,519 --> 00:09:52,480
it has a high bar the gateway is not

00:09:49,440 --> 00:09:53,680
a software that can be used out of the

00:09:52,480 --> 00:09:56,720
box

00:09:53,680 --> 00:09:58,000
this is different from database and the

00:09:56,720 --> 00:10:01,600
message queen

00:09:58,000 --> 00:10:02,480
mq and the database can be used directly

00:10:01,600 --> 00:10:05,519
after

00:10:02,480 --> 00:10:09,040
we them on our machine

00:10:05,519 --> 00:10:11,680
but the api gateway is not

00:10:09,040 --> 00:10:13,040
this is because the gateway more or less

00:10:11,680 --> 00:10:16,160
customer development

00:10:13,040 --> 00:10:19,360
is required for example

00:10:16,160 --> 00:10:20,720
if your company have some old systems or

00:10:19,360 --> 00:10:23,839
some special

00:10:20,720 --> 00:10:26,240
protocols such as some protocols

00:10:23,839 --> 00:10:27,279
in the financing of the security

00:10:26,240 --> 00:10:30,160
industry

00:10:27,279 --> 00:10:33,120
you need to do some transcode and the

00:10:30,160 --> 00:10:36,560
gateway level

00:10:33,120 --> 00:10:40,079
on the other hand also if your gateway

00:10:36,560 --> 00:10:42,320
provides more than 40 plugins it is

00:10:40,079 --> 00:10:45,200
definitely unable to meet

00:10:42,320 --> 00:10:46,079
all the needs from the enterprise

00:10:45,200 --> 00:10:49,600
because

00:10:46,079 --> 00:10:52,959
each company has his own unique needs

00:10:49,600 --> 00:10:53,920
so we often need to do some customer

00:10:52,959 --> 00:10:56,880
development

00:10:53,920 --> 00:10:58,320
of the existing plugins to meet our

00:10:56,880 --> 00:11:01,440
needs

00:10:58,320 --> 00:11:04,079
this is actually a big problem because

00:11:01,440 --> 00:11:06,240
plug-in development still requires more

00:11:04,079 --> 00:11:10,160
skills

00:11:06,240 --> 00:11:13,440
and at least a new need a programmer

00:11:10,160 --> 00:11:14,720
for plug-in development different open

00:11:13,440 --> 00:11:18,240
source projects

00:11:14,720 --> 00:11:18,240
have the different solutions

00:11:20,720 --> 00:11:25,040
let's take a look and count first calm

00:11:23,920 --> 00:11:29,920
is a well-known

00:11:25,040 --> 00:11:32,959
api gateway project it's 5 years old

00:11:29,920 --> 00:11:33,600
khan's technology stack is basically the

00:11:32,959 --> 00:11:37,200
same as

00:11:33,600 --> 00:11:38,480
api 6 and both of them are implemented

00:11:37,200 --> 00:11:42,240
based on engix and

00:11:38,480 --> 00:11:45,519
lula but the technology architecture of

00:11:42,240 --> 00:11:48,720
kong is not the same as api 6.

00:11:45,519 --> 00:11:49,200
kang is based on rds such as poster

00:11:48,720 --> 00:11:52,880
green

00:11:49,200 --> 00:11:56,160
and cassandra and api 6 your

00:11:52,880 --> 00:11:58,720
etcd api 6 solution is

00:11:56,160 --> 00:12:01,120
closer to kubernetes and the cloud

00:11:58,720 --> 00:12:01,120
native

00:12:01,360 --> 00:12:04,800
the common point of current api 6 is

00:12:03,920 --> 00:12:07,440
that

00:12:04,800 --> 00:12:08,399
developers need to use lula to develop

00:12:07,440 --> 00:12:10,720
plugins

00:12:08,399 --> 00:12:11,680
lula is not a popular programming

00:12:10,720 --> 00:12:14,480
language

00:12:11,680 --> 00:12:15,839
and many developers are not familiar

00:12:14,480 --> 00:12:18,959
with lula

00:12:15,839 --> 00:12:21,680
also lula itself is very simple

00:12:18,959 --> 00:12:25,839
so besides making the plugin simple

00:12:21,680 --> 00:12:29,200
what's better solution easier

00:12:25,839 --> 00:12:31,279
code solution is to support golang to

00:12:29,200 --> 00:12:34,880
write plugins

00:12:31,279 --> 00:12:37,920
this approach ways attracts more

00:12:34,880 --> 00:12:39,839
gold developers to write plugins to meet

00:12:37,920 --> 00:12:43,440
the customer needs

00:12:39,839 --> 00:12:47,040
of his own company this is a good idea

00:12:43,440 --> 00:12:48,320
but on the other hand kang is natively

00:12:47,040 --> 00:12:52,160
primitive based

00:12:48,320 --> 00:12:56,160
on index and lula and the plugins

00:12:52,160 --> 00:12:58,079
write writing in golang actually need to

00:12:56,160 --> 00:13:01,279
call another process

00:12:58,079 --> 00:13:04,839
which will have a course process

00:13:01,279 --> 00:13:07,839
communication which have the performance

00:13:04,839 --> 00:13:07,839
issue

00:13:08,320 --> 00:13:11,839
let's take a look then and the second

00:13:10,800 --> 00:13:14,800
one

00:13:11,839 --> 00:13:15,680
which is also available a very

00:13:14,800 --> 00:13:19,279
well-known

00:13:15,680 --> 00:13:20,959
open source project focus on the data

00:13:19,279 --> 00:13:24,079
plan project

00:13:20,959 --> 00:13:24,560
it enrolled and more it can process the

00:13:24,079 --> 00:13:28,000
east

00:13:24,560 --> 00:13:31,519
and less traffic which is written in c

00:13:28,000 --> 00:13:34,560
plus plus so unvoiced plug-in

00:13:31,519 --> 00:13:39,519
isn't actually implanted in supply class

00:13:34,560 --> 00:13:39,519
too so it's not easy to get started

00:13:39,680 --> 00:13:46,480
evoli also supports other languages

00:13:43,199 --> 00:13:48,240
for development for example unvoiced

00:13:46,480 --> 00:13:51,760
post lula filter

00:13:48,240 --> 00:13:55,120
and the lula filter has the

00:13:51,760 --> 00:13:58,720
same problem as com that is there are

00:13:55,120 --> 00:14:02,480
few developers familiar with lula

00:13:58,720 --> 00:14:05,519
so envoy also support wasm

00:14:02,480 --> 00:14:06,480
which can attract more other language

00:14:05,519 --> 00:14:09,839
developers

00:14:06,480 --> 00:14:11,360
to write plugins this solution is not

00:14:09,839 --> 00:14:14,639
perfect

00:14:11,360 --> 00:14:20,079
and the stability and the performance

00:14:14,639 --> 00:14:20,079
of wasm still need more time to improve

00:14:20,560 --> 00:14:27,040
the solution of calm

00:14:23,760 --> 00:14:30,959
and envoy are the same

00:14:27,040 --> 00:14:34,800
they hope to attract more developers

00:14:30,959 --> 00:14:39,040
to have the ability to developer plugins

00:14:34,800 --> 00:14:42,079
whether they use golang lula or wsm

00:14:39,040 --> 00:14:45,440
so back to epi 6

00:14:42,079 --> 00:14:47,839
we hope to find a sliver

00:14:45,440 --> 00:14:47,839
bullet

00:14:48,720 --> 00:14:55,519
so what does this

00:14:51,839 --> 00:14:58,320
level bullet looks like we think that

00:14:55,519 --> 00:14:59,600
under the gateway level the following

00:14:58,320 --> 00:15:03,440
two problems must

00:14:59,600 --> 00:15:06,880
be solved first to resolve the problem

00:15:03,440 --> 00:15:11,600
of the customer development first

00:15:06,880 --> 00:15:14,079
the first one is that many plugins

00:15:11,600 --> 00:15:15,040
need to be development are actually

00:15:14,079 --> 00:15:18,480
simple

00:15:15,040 --> 00:15:22,800
yes really simple how to reuse

00:15:18,480 --> 00:15:26,240
the exist 14 open source plugin

00:15:22,800 --> 00:15:29,680
and the second one is

00:15:26,240 --> 00:15:32,720
to allow the demand side of the gateway

00:15:29,680 --> 00:15:35,759
in the enterprise such as product

00:15:32,720 --> 00:15:38,959
managers ops and the

00:15:35,759 --> 00:15:42,160
security team to imply them

00:15:38,959 --> 00:15:43,120
to employment their own needs on the

00:15:42,160 --> 00:15:46,560
gateway

00:15:43,120 --> 00:15:49,759
with as little cost as possible

00:15:46,560 --> 00:15:51,680
it will be best if no need to write any

00:15:49,759 --> 00:15:54,959
code

00:15:51,680 --> 00:15:57,680
so if we can solve their probe

00:15:54,959 --> 00:15:58,560
there are two problems then we have

00:15:57,680 --> 00:16:01,600
opportunity

00:15:58,560 --> 00:16:05,519
to like more people not just

00:16:01,600 --> 00:16:10,320
developers be able to develop the

00:16:05,519 --> 00:16:10,320
new plugin the api gateway

00:16:11,839 --> 00:16:18,639
first let's look at the first problem

00:16:15,440 --> 00:16:21,880
is how to solve the reuse

00:16:18,639 --> 00:16:25,040
of exist plug-ins

00:16:21,880 --> 00:16:26,160
microservices are already a very popular

00:16:25,040 --> 00:16:29,440
technology

00:16:26,160 --> 00:16:33,440
so can we introduce this concept

00:16:29,440 --> 00:16:36,560
into api gateway plugins we can make

00:16:33,440 --> 00:16:40,000
each plugin only to one feature

00:16:36,560 --> 00:16:43,279
just like a microservice which is

00:16:40,000 --> 00:16:46,320
also the same the design of the

00:16:43,279 --> 00:16:50,240
process in linux therefore

00:16:46,320 --> 00:16:53,920
we have a proposal a concept

00:16:50,240 --> 00:16:57,680
called microplug-in

00:16:53,920 --> 00:17:01,759
each of plug-ins only do an independent

00:16:57,680 --> 00:17:04,880
feature then we need to design similar

00:17:01,759 --> 00:17:08,079
to linux type to connect your

00:17:04,880 --> 00:17:11,120
maco plugins

00:17:08,079 --> 00:17:14,240
for example unfortunate

00:17:11,120 --> 00:17:16,959
ui blog plugin

00:17:14,240 --> 00:17:17,520
after this call is finished i will judge

00:17:16,959 --> 00:17:20,720
whether

00:17:17,520 --> 00:17:21,760
the uri is usually blocked if it is

00:17:20,720 --> 00:17:24,400
blocked

00:17:21,760 --> 00:17:26,799
then continue to call another kafka

00:17:24,400 --> 00:17:30,320
plugin

00:17:26,799 --> 00:17:33,840
uses typo method

00:17:30,320 --> 00:17:37,919
these plugins can be connected apache

00:17:33,840 --> 00:17:41,760
ps6 now has more than 40 plugins

00:17:37,919 --> 00:17:44,840
the permutation of more than 40 plugins

00:17:41,760 --> 00:17:49,679
have unlimited

00:17:44,840 --> 00:17:53,039
possibilities enough to meet users need

00:17:49,679 --> 00:17:56,640
but the problem now is that all

00:17:53,039 --> 00:18:00,000
api gateways that have been open sourced

00:17:56,640 --> 00:18:03,200
the plugin does not share contact

00:18:00,000 --> 00:18:05,440
and cannot cooperate with each other

00:18:03,200 --> 00:18:06,880
so we need to connect their plugin

00:18:05,440 --> 00:18:09,679
together

00:18:06,880 --> 00:18:10,480
only by doing this we can solve the

00:18:09,679 --> 00:18:16,080
problems

00:18:10,480 --> 00:18:16,080
of plug-in reuse with micro plugin

00:18:17,600 --> 00:18:22,880
okay next the second problem is after we

00:18:20,880 --> 00:18:26,240
have the macro plug-in

00:18:22,880 --> 00:18:29,520
how can we reduce the development

00:18:26,240 --> 00:18:34,000
cost of a target ways you plug in to

00:18:29,520 --> 00:18:37,760
zero as soon as much as possible

00:18:34,000 --> 00:18:40,960
we hope that for non-developers

00:18:37,760 --> 00:18:44,559
that is the pm security

00:18:40,960 --> 00:18:47,679
who have no technology backend

00:18:44,559 --> 00:18:49,919
and do not how to program

00:18:47,679 --> 00:18:50,880
they can realize their needs without

00:18:49,919 --> 00:18:56,000
development

00:18:50,880 --> 00:18:59,039
because they understand our needs best

00:18:56,000 --> 00:19:00,960
receive time they will lower the bar for

00:18:59,039 --> 00:19:03,840
api gateway development

00:19:00,960 --> 00:19:05,120
alone more and more people contribute to

00:19:03,840 --> 00:19:08,480
a package way

00:19:05,120 --> 00:19:13,280
if we use a slogo that will be

00:19:08,480 --> 00:19:16,720
from creativity to creation

00:19:13,280 --> 00:19:19,600
we cannot only write our own ideas

00:19:16,720 --> 00:19:20,400
into documentation for developers but

00:19:19,600 --> 00:19:25,360
also

00:19:20,400 --> 00:19:27,919
directly to create a new plugin

00:19:25,360 --> 00:19:29,280
that sounds look this sounds like a good

00:19:27,919 --> 00:19:32,799
idea

00:19:29,280 --> 00:19:36,160
but can we really

00:19:32,799 --> 00:19:39,440
realize it in fact we can jump out

00:19:36,160 --> 00:19:43,120
the technology thinking and to say

00:19:39,440 --> 00:19:44,400
how other interactions are solved this

00:19:43,120 --> 00:19:48,000
problem

00:19:44,400 --> 00:19:50,799
for example in the process

00:19:48,000 --> 00:19:51,679
engine of the medical industry they are

00:19:50,799 --> 00:19:54,880
built

00:19:51,679 --> 00:19:58,240
in in uh in the gui way

00:19:54,880 --> 00:20:02,720
because the users in the medical

00:19:58,240 --> 00:20:06,080
are doctors then the goal for children

00:20:02,720 --> 00:20:06,720
is a same you can use a limited number

00:20:06,080 --> 00:20:10,159
of the

00:20:06,720 --> 00:20:14,240
building blockers to build an immediate

00:20:10,159 --> 00:20:17,520
number of the possible ships

00:20:14,240 --> 00:20:20,880
so let me put the gui and

00:20:17,520 --> 00:20:23,840
the lookout ideas together

00:20:20,880 --> 00:20:25,120
then we can see that it's actually

00:20:23,840 --> 00:20:27,280
scratch

00:20:25,120 --> 00:20:28,320
which is the children learn the

00:20:27,280 --> 00:20:32,559
programming

00:20:28,320 --> 00:20:35,679
so the bar will be very low

00:20:32,559 --> 00:20:36,720
based on the previously two problems we

00:20:35,679 --> 00:20:42,240
solved

00:20:36,720 --> 00:20:45,760
api 6 uniquely proposaled a new concept

00:20:42,240 --> 00:20:45,760
plug-in orchestration

00:20:46,720 --> 00:20:52,480
planning illustration here is a

00:20:49,919 --> 00:20:53,280
demo of the plugin illustration we can

00:20:52,480 --> 00:20:56,720
take a look at

00:20:53,280 --> 00:20:56,720
this short video first

00:20:59,679 --> 00:21:04,559
in this video we first create a ui

00:21:02,880 --> 00:21:08,080
blocker plug-in

00:21:04,559 --> 00:21:10,960
and then we create a convection judgment

00:21:08,080 --> 00:21:13,280
in the ui if the ui block is true then

00:21:10,960 --> 00:21:17,280
we will aid to the

00:21:13,280 --> 00:21:18,880
to photo inject plug-in if the result of

00:21:17,280 --> 00:21:21,280
the ui block is false

00:21:18,880 --> 00:21:23,280
we will pass it to the kafka plugin to

00:21:21,280 --> 00:21:26,480
record the logs

00:21:23,280 --> 00:21:29,600
then we can configure each plug-in

00:21:26,480 --> 00:21:32,640
and the judgment condition finally we

00:21:29,600 --> 00:21:35,840
can use the crl to verify

00:21:32,640 --> 00:21:36,480
to check if the new plugin is really

00:21:35,840 --> 00:21:45,840
work

00:21:36,480 --> 00:21:45,840
on the node of the gateway

00:22:00,559 --> 00:22:03,600
yes it works

00:22:04,080 --> 00:22:07,919
next i will explain to you how this

00:22:06,880 --> 00:22:11,039
plug-in

00:22:07,919 --> 00:22:13,039
oxidation is implemented it may also be

00:22:11,039 --> 00:22:15,840
a technology issue that everyone is

00:22:13,039 --> 00:22:15,840
concerned about

00:22:16,799 --> 00:22:23,280
uh to implementate the plug-in

00:22:20,240 --> 00:22:24,840
on orchestration we need to take three

00:22:23,280 --> 00:22:29,039
steps

00:22:24,840 --> 00:22:32,559
first first we need to use the dag

00:22:29,039 --> 00:22:33,520
to describe the new plugin we can see

00:22:32,559 --> 00:22:36,640
that

00:22:33,520 --> 00:22:40,400
the picture with the arrow

00:22:36,640 --> 00:22:43,039
on the left is actually a dag which is

00:22:40,400 --> 00:22:43,600
the same as the code described in the

00:22:43,039 --> 00:22:46,080
previous

00:22:43,600 --> 00:22:49,039
video then this is the description

00:22:46,080 --> 00:22:52,559
method that is friendly to humans

00:22:49,039 --> 00:22:55,679
but for the computer we have to turn it

00:22:52,559 --> 00:22:58,480
into a description language has a

00:22:55,679 --> 00:22:59,760
data structure on the on the right of

00:22:58,480 --> 00:23:02,559
this picture

00:22:59,760 --> 00:23:03,039
for example the number one node followed

00:23:02,559 --> 00:23:06,720
by

00:23:03,039 --> 00:23:09,600
2 4 6 mean node 1

00:23:06,720 --> 00:23:09,919
which point to the second and the fourth

00:23:09,600 --> 00:23:13,840
and

00:23:09,919 --> 00:23:16,640
the sixth node and

00:23:13,840 --> 00:23:17,600
and the value of the number three node

00:23:16,640 --> 00:23:20,159
is new

00:23:17,600 --> 00:23:22,320
means that there is no other nodes

00:23:20,159 --> 00:23:24,720
behind the number three node

00:23:22,320 --> 00:23:25,360
and the others are the similar in this

00:23:24,720 --> 00:23:28,960
way

00:23:25,360 --> 00:23:30,799
we convert a dig into a data structure

00:23:28,960 --> 00:23:34,080
description

00:23:30,799 --> 00:23:34,559
after have this data structure then we

00:23:34,080 --> 00:23:37,919
can

00:23:34,559 --> 00:23:41,440
convert this data structure into a

00:23:37,919 --> 00:23:42,559
json screen and we can pass the

00:23:41,440 --> 00:23:46,000
suggestion string

00:23:42,559 --> 00:23:49,120
to the server the js3 on the

00:23:46,000 --> 00:23:52,320
right is converted from the plugin

00:23:49,120 --> 00:23:52,320
we saw in the video

00:23:53,679 --> 00:23:59,440
after the step 1 we already have a

00:23:57,120 --> 00:24:03,360
string described by json

00:23:59,440 --> 00:24:06,640
but how do we convert this json string

00:24:03,360 --> 00:24:09,919
into lula code which can

00:24:06,640 --> 00:24:12,880
run by api six we know that in

00:24:09,919 --> 00:24:13,840
pi6 we are running lower code not the

00:24:12,880 --> 00:24:16,960
json string

00:24:13,840 --> 00:24:20,000
so we need a compiler yes to password

00:24:16,960 --> 00:24:22,880
the json into a est

00:24:20,000 --> 00:24:24,080
and finally generate the ruan code at

00:24:22,880 --> 00:24:28,480
the same time

00:24:24,080 --> 00:24:33,840
we use the json schema to do this job

00:24:28,480 --> 00:24:33,840
below is the open source ripple

00:24:34,559 --> 00:24:38,720
after generates the lula code we use the

00:24:36,960 --> 00:24:41,840
api 6 control plot

00:24:38,720 --> 00:24:45,679
to write the lula code into etcd through

00:24:41,840 --> 00:24:48,799
the main api and then the api 6 is

00:24:45,679 --> 00:24:51,919
node of data ply can get the lula code

00:24:48,799 --> 00:24:54,880
through watch etcd api 6

00:24:51,919 --> 00:24:56,080
have the ability to dynamic run the

00:24:54,880 --> 00:25:01,840
ruler code

00:24:56,080 --> 00:25:01,840
just like sterilized plug-in epi 6.

00:25:02,240 --> 00:25:06,720
so the new plugin generated by plug-in

00:25:05,760 --> 00:25:10,080
orchestration

00:25:06,720 --> 00:25:11,840
from dag to the actually running on the

00:25:10,080 --> 00:25:15,440
data plan

00:25:11,840 --> 00:25:17,760
all the process are dynamic

00:25:15,440 --> 00:25:20,159
which is very important feature of api

00:25:17,760 --> 00:25:20,159
6.

00:25:20,640 --> 00:25:24,080
if you see this do you have a question

00:25:22,960 --> 00:25:25,760
where can i try it

00:25:24,080 --> 00:25:27,200
don't worry there's your open source

00:25:25,760 --> 00:25:30,240
project here and

00:25:27,200 --> 00:25:32,559
we are also have online demo welcome to

00:25:30,240 --> 00:25:32,559
try

00:25:33,039 --> 00:25:36,880
and in the last part i want to talk

00:25:36,400 --> 00:25:41,039
about

00:25:36,880 --> 00:25:44,559
our thoughts about the future of api 6

00:25:41,039 --> 00:25:45,200
and the api gateway the api gateway has

00:25:44,559 --> 00:25:48,240
exist

00:25:45,200 --> 00:25:51,200
for long time there have been

00:25:48,240 --> 00:25:52,880
many companies and open source projects

00:25:51,200 --> 00:25:55,919
doing api gateway

00:25:52,880 --> 00:25:58,720
more than 20 years ago then

00:25:55,919 --> 00:26:00,080
in the club native time api gateway is

00:25:58,720 --> 00:26:03,360
facing changes

00:26:00,080 --> 00:26:06,720
and the challenges in from the

00:26:03,360 --> 00:26:10,159
companies users need

00:26:06,720 --> 00:26:12,720
high requirements and put words for api

00:26:10,159 --> 00:26:12,720
gateways

00:26:16,559 --> 00:26:20,159
the first one turned is that the

00:26:19,120 --> 00:26:23,279
traditional

00:26:20,159 --> 00:26:26,400
knowledge source uh

00:26:23,279 --> 00:26:28,720
api gateways begin to process the east

00:26:26,400 --> 00:26:31,520
and the west microservice traffic

00:26:28,720 --> 00:26:32,640
for example engix has launched engix

00:26:31,520 --> 00:26:36,559
control

00:26:32,640 --> 00:26:40,240
and the engine's unit calm and epi 6

00:26:36,559 --> 00:26:42,720
also act as microservice api gateway

00:26:40,240 --> 00:26:44,400
at the same time there is the last

00:26:42,720 --> 00:26:47,679
service match projects

00:26:44,400 --> 00:26:51,440
also trying to act as the

00:26:47,679 --> 00:26:54,400
north source access api gateway

00:26:51,440 --> 00:26:54,799
so for the open source projects all of

00:26:54,400 --> 00:26:59,039
them

00:26:54,799 --> 00:26:59,039
want to process for traffic

00:26:59,120 --> 00:27:02,559
open source projects about process

00:27:01,679 --> 00:27:06,720
traffic

00:27:02,559 --> 00:27:10,000
are blaming now we can say by those

00:27:06,720 --> 00:27:13,919
bfe and alibaba's motion

00:27:10,000 --> 00:27:13,919
they are all focused on the traffic

00:27:15,200 --> 00:27:22,240
and the second is the low code

00:27:19,200 --> 00:27:25,440
the best solution for apis

00:27:22,240 --> 00:27:28,559
for api gateway is that pm

00:27:25,440 --> 00:27:31,520
and the security team can directly

00:27:28,559 --> 00:27:32,880
implement the features by plug-in

00:27:31,520 --> 00:27:35,120
orchestration

00:27:32,880 --> 00:27:35,919
so that the developers pay more

00:27:35,120 --> 00:27:39,600
attention

00:27:35,919 --> 00:27:42,640
to the api gateway itself in this way

00:27:39,600 --> 00:27:46,880
the business and the core of api's

00:27:42,640 --> 00:27:49,279
api gateway are decoded

00:27:46,880 --> 00:27:50,320
you can like people who don't understand

00:27:49,279 --> 00:27:52,880
the technology

00:27:50,320 --> 00:27:54,240
and the plugin development to continue

00:27:52,880 --> 00:27:57,120
to contribute

00:27:54,240 --> 00:27:59,840
plugins to open source project that's

00:27:57,120 --> 00:27:59,840
very important

00:28:01,039 --> 00:28:09,279
and the third point is real time

00:28:05,039 --> 00:28:11,840
with the population of 5g and iot

00:28:09,279 --> 00:28:13,120
and the landing of kubernetes in the

00:28:11,840 --> 00:28:15,440
enterprise

00:28:13,120 --> 00:28:16,480
it has put forward very high

00:28:15,440 --> 00:28:19,120
requirements

00:28:16,480 --> 00:28:20,880
for the real-time effort of

00:28:19,120 --> 00:28:24,000
configurations

00:28:20,880 --> 00:28:27,279
the process of requirements

00:28:24,000 --> 00:28:30,799
request and the real-time data

00:28:27,279 --> 00:28:33,919
and austria for the gateway

00:28:30,799 --> 00:28:34,799
if you cannot real-time and a very high

00:28:33,919 --> 00:28:38,240
performance

00:28:34,799 --> 00:28:40,880
and a very low latency then this

00:28:38,240 --> 00:28:45,840
project will be done in the next three

00:28:40,880 --> 00:28:45,840
or five years

00:28:45,919 --> 00:28:52,159
and then the last but not least

00:28:49,200 --> 00:28:53,440
is open source we can say software is

00:28:52,159 --> 00:28:56,159
eating hardware

00:28:53,440 --> 00:28:57,360
and the open source software is eating

00:28:56,159 --> 00:29:00,080
the world

00:28:57,360 --> 00:29:00,880
in the end all the infrastructure

00:29:00,080 --> 00:29:04,399
softwares

00:29:00,880 --> 00:29:06,320
are open source the same situation is

00:29:04,399 --> 00:29:09,919
true for the api 6.

00:29:06,320 --> 00:29:13,120
open source allows companies to use it

00:29:09,919 --> 00:29:16,240
at a low cost without worrying about

00:29:13,120 --> 00:29:19,039
vendor lock-in moreover

00:29:16,240 --> 00:29:19,600
the commercial opportunities for open

00:29:19,039 --> 00:29:22,640
source

00:29:19,600 --> 00:29:26,000
will also bring more to open source

00:29:22,640 --> 00:29:29,200
developers this is a good model for a

00:29:26,000 --> 00:29:29,200
win-win situation

00:29:30,480 --> 00:29:35,200
and finally i hope everyone will pay

00:29:33,279 --> 00:29:38,640
attention to api 6.

00:29:35,200 --> 00:29:41,840
api 6 is a clone native api gateway

00:29:38,640 --> 00:29:41,840
thank you all

00:30:25,039 --> 00:30:31,279
uh yes uh hsx

00:30:28,159 --> 00:30:34,640
uh api six is a open source project

00:30:31,279 --> 00:30:35,039
and the aws api gateway is not open

00:30:34,640 --> 00:30:38,080
source

00:30:35,039 --> 00:30:39,039
it's the first different and the second

00:30:38,080 --> 00:30:42,240
is that

00:30:39,039 --> 00:30:45,600
uh api six is kind of deployment

00:30:42,240 --> 00:30:50,399
in uh the

00:30:45,600 --> 00:30:51,279
private cloud but the aws is a api

00:30:50,399 --> 00:30:54,399
gateway is

00:30:51,279 --> 00:30:56,640
only in the public cloud and

00:30:54,399 --> 00:30:57,440
if you use api six you don't need to

00:30:56,640 --> 00:31:01,120
worry about

00:30:57,440 --> 00:31:05,440
the vendor log in but if you use aws

00:31:01,120 --> 00:31:08,799
you only can use his api gateway in

00:31:05,440 --> 00:31:12,399
aws cloud you cannot use

00:31:08,799 --> 00:31:15,760
it in the google

00:31:12,399 --> 00:31:19,039
microservice it's a good way microsoft

00:31:15,760 --> 00:31:22,640
such gateway

00:31:19,039 --> 00:31:25,360
yes it's also the question

00:31:22,640 --> 00:31:27,200
between the open source project and the

00:31:25,360 --> 00:31:33,039
public

00:31:27,200 --> 00:31:47,840
clouds project

00:31:33,039 --> 00:31:47,840
yeah welcome

00:33:32,080 --> 00:33:34,159

YouTube URL: https://www.youtube.com/watch?v=iEegNXOtEhQ


