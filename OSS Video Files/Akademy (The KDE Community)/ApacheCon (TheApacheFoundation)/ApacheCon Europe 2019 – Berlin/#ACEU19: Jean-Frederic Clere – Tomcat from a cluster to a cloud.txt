Title: #ACEU19: Jean-Frederic Clere – Tomcat from a cluster to a cloud
Publication date: 2019-10-31
Playlist: ApacheCon Europe 2019 – Berlin
Description: 
	More: https://aceu19.apachecon.com/session/tomcat-cluster-cloud

Using Tomcat in a cluster and in a cloud. We start by looking how to configure tomcat to get a cluster and then explore the problems and solutions to have distributed applications running in a cloud. Most cloud providers now have a Kubernetes API. We will look to what we have to add to Tomcat to have a decent cloud support for monitoring, tracing and operating on the cloud.
We will show how to use all the pieces. A demo of a cluster will be prepared and run during the presentation and the corresponding application will be moved to a Kubernetes cloud.
Captions: 
	00:00:05,170 --> 00:00:09,820
so basically I'm going to speak about

00:00:07,930 --> 00:00:12,550
the humanities they thought we have been

00:00:09,820 --> 00:00:13,990
doing Cuban teas and open what we

00:00:12,550 --> 00:00:18,369
have been doing to get Tomcat running

00:00:13,990 --> 00:00:23,020
that basically what were the problem and

00:00:18,369 --> 00:00:25,329
all we solve them and if if my demo is

00:00:23,020 --> 00:00:28,059
working which does not seem to be the

00:00:25,329 --> 00:00:31,899
case at that point one of the rest

00:00:28,059 --> 00:00:33,820
wasting news check this forever so well

00:00:31,899 --> 00:00:36,070
basically I will jump over the Who I am

00:00:33,820 --> 00:00:42,310
because I was there before so yes you

00:00:36,070 --> 00:00:43,990
know so a cluster what what do we have

00:00:42,310 --> 00:00:46,450
why do we have a cluster we have a

00:00:43,990 --> 00:00:50,440
cluster for a life ability and basically

00:00:46,450 --> 00:00:54,940
a four session replication of the

00:00:50,440 --> 00:00:59,200
session of the application the cloud

00:00:54,940 --> 00:01:02,260
well the cloud was the first time I was

00:00:59,200 --> 00:01:04,780
doing this talk there were a lot of

00:01:02,260 --> 00:01:07,119
different way of doing things in the

00:01:04,780 --> 00:01:09,580
cloud more and more everyone is doing

00:01:07,119 --> 00:01:14,140
kubernetes so Morel know it's it's

00:01:09,580 --> 00:01:16,510
getting easy in a case we have chosen to

00:01:14,140 --> 00:01:21,310
use communities and we have two

00:01:16,510 --> 00:01:23,530
different way of using kubernetes we try

00:01:21,310 --> 00:01:25,960
to build a cluster of tomcat inside

00:01:23,530 --> 00:01:29,110
kubernetes we have cue beeping and DNS

00:01:25,960 --> 00:01:31,420
ping I will explain in detail we had to

00:01:29,110 --> 00:01:37,570
modify the Tomcat cluster to a lower

00:01:31,420 --> 00:01:41,740
dynamic list of nodes and we have to use

00:01:37,570 --> 00:01:45,690
only tcp/ip because you don't have UDP

00:01:41,740 --> 00:01:49,960
on the cloud and you have some

00:01:45,690 --> 00:01:54,400
configuration things we have things

00:01:49,960 --> 00:01:58,180
which are in the pipe we have a small

00:01:54,400 --> 00:02:00,280
operator and s2i image as to why image

00:01:58,180 --> 00:02:01,630
is something which allow you to write

00:02:00,280 --> 00:02:04,150
your web app change something in your

00:02:01,630 --> 00:02:06,280
web app committing you get repo and then

00:02:04,150 --> 00:02:08,530
it going to be deployed automatically in

00:02:06,280 --> 00:02:10,750
the cloud we still need to work a little

00:02:08,530 --> 00:02:13,090
on it but we have all the pieces and I

00:02:10,750 --> 00:02:15,069
will probably be able to demo that in

00:02:13,090 --> 00:02:21,670
New Orlean

00:02:15,069 --> 00:02:23,200
on on a real cloud I have some demo that

00:02:21,670 --> 00:02:25,120
I will try to put at the end to make

00:02:23,200 --> 00:02:29,379
sure that everyone have time for

00:02:25,120 --> 00:02:32,650
question and that's it and I'm also open

00:02:29,379 --> 00:02:34,810
to some discretion as basically it's

00:02:32,650 --> 00:02:47,370
something we are developing and it's

00:02:34,810 --> 00:02:50,230
nice to know what sorry I'm moving so

00:02:47,370 --> 00:02:52,000
why do we do a session replication well

00:02:50,230 --> 00:02:54,849
basically session replication is a

00:02:52,000 --> 00:02:59,889
problem we have had since the WEP is

00:02:54,849 --> 00:03:02,950
existing the protocol of no transaction

00:02:59,889 --> 00:03:05,500
II had no path persistent connection so

00:03:02,950 --> 00:03:09,609
we have to add to add stuff in order to

00:03:05,500 --> 00:03:12,810
be able to track as a to create

00:03:09,609 --> 00:03:15,970
transaction or either to have a kind of

00:03:12,810 --> 00:03:21,220
an information that will allow to keep

00:03:15,970 --> 00:03:24,069
the typically in a web app we are going

00:03:21,220 --> 00:03:27,250
to use a cookie to carry a session ID

00:03:24,069 --> 00:03:31,359
and we own the session ID we will

00:03:27,250 --> 00:03:33,099
associate it will be associated to a

00:03:31,359 --> 00:03:37,659
session and on this session you can

00:03:33,099 --> 00:03:49,150
store the information you need from you

00:03:37,659 --> 00:03:55,180
user typically one one thing interesting

00:03:49,150 --> 00:03:56,799
is like a cluster is multi node the

00:03:55,180 --> 00:03:59,530
cluster to be dynamic if you increase

00:03:56,799 --> 00:04:02,859
the load that you can increase the

00:03:59,530 --> 00:04:05,590
number of nodes that are running I am

00:04:02,859 --> 00:04:10,419
NOT going to speak about how you start

00:04:05,590 --> 00:04:12,099
another a element of another Tomcat if

00:04:10,419 --> 00:04:15,370
you want if you load is increasing

00:04:12,099 --> 00:04:16,840
that's a completely another topic it's

00:04:15,370 --> 00:04:20,829
monitoring and things like that which

00:04:16,840 --> 00:04:23,500
have absolutely no idea what do we do is

00:04:20,829 --> 00:04:27,040
like basically a manual cluster you're

00:04:23,500 --> 00:04:29,080
going to try to route

00:04:27,040 --> 00:04:32,140
the request to the right note when

00:04:29,080 --> 00:04:36,130
Minnie you start to first get requests

00:04:32,140 --> 00:04:39,220
you don't have a session ID the Tomcat

00:04:36,130 --> 00:04:40,840
is going to create a session ID and the

00:04:39,220 --> 00:04:43,480
browser is going to send the cookie

00:04:40,840 --> 00:04:45,700
again with the session ID and of course

00:04:43,480 --> 00:04:48,070
you even if you are the cluster you

00:04:45,700 --> 00:04:51,490
don't want that the data is always

00:04:48,070 --> 00:04:53,440
moving from a one node to the other one

00:04:51,490 --> 00:04:56,040
you might but I think that's not the

00:04:53,440 --> 00:04:59,280
best usually we try to have the things

00:04:56,040 --> 00:05:07,840
routed to the to the right node it's the

00:04:59,280 --> 00:05:11,500
name of sticky session and you replicate

00:05:07,840 --> 00:05:13,120
the information because basically if for

00:05:11,500 --> 00:05:14,710
some reason it's not going to the right

00:05:13,120 --> 00:05:16,690
node you want to have the information

00:05:14,710 --> 00:05:18,790
and the good thing is right basically by

00:05:16,690 --> 00:05:22,840
replicating the information if one of

00:05:18,790 --> 00:05:25,990
you Tomcat is dying the information like

00:05:22,840 --> 00:05:33,610
the shopping cart of your customer is

00:05:25,990 --> 00:05:35,830
going to be present so if you look to a

00:05:33,610 --> 00:05:43,240
cluster basically how we do a cluster

00:05:35,830 --> 00:05:45,160
well we have some other firewall on top

00:05:43,240 --> 00:05:48,370
view of the internet this is going to

00:05:45,160 --> 00:05:51,280
kind of protect at the httpd the at GPD

00:05:48,370 --> 00:05:54,990
is going to act as a mode balancer is

00:05:51,280 --> 00:05:57,880
add the information about all the tomcat

00:05:54,990 --> 00:06:00,700
basically you I tell you something you

00:05:57,880 --> 00:06:03,520
use muster so that the tomcat can send

00:06:00,700 --> 00:06:07,390
the information to more httpd or you

00:06:03,520 --> 00:06:10,630
configure it in httpd so the Greenline

00:06:07,390 --> 00:06:13,750
are basically the HTTP 1.1 request would

00:06:10,630 --> 00:06:16,750
be the h2 to and the blue line is

00:06:13,750 --> 00:06:19,090
basically the communication between the

00:06:16,750 --> 00:06:22,870
tomcat the tomcat are going to

00:06:19,090 --> 00:06:26,200
communicate one with which is other in

00:06:22,870 --> 00:06:31,350
order to send the information related to

00:06:26,200 --> 00:06:36,540
the session so are you replicate session

00:06:31,350 --> 00:06:39,320
well you have to do some very few thing

00:06:36,540 --> 00:06:41,850
to have

00:06:39,320 --> 00:06:46,560
but first you need to start to Tomcat in

00:06:41,850 --> 00:06:50,340
case it's not obvious you have to have

00:06:46,560 --> 00:06:52,800
your web app distributable

00:06:50,340 --> 00:06:57,720
it to just put distributable in the web

00:06:52,800 --> 00:07:00,180
dot xml and you have to start the

00:06:57,720 --> 00:07:03,360
cluster and basically the most simple

00:07:00,180 --> 00:07:07,880
thing is basically this line is cluster

00:07:03,360 --> 00:07:07,880
class name and the sample basically

00:07:08,540 --> 00:07:15,210
cluster the sample TCP cluster basically

00:07:11,760 --> 00:07:17,160
it's going to use UDP port in and like

00:07:15,210 --> 00:07:20,130
if you run your tomcat on your

00:07:17,160 --> 00:07:22,170
infrastructure or in your own node is

00:07:20,130 --> 00:07:24,030
going to be use UDP basically to

00:07:22,170 --> 00:07:26,700
exchange information to know which node

00:07:24,030 --> 00:07:28,530
are in the things and then is going to

00:07:26,700 --> 00:07:36,810
use a TCP range to exchange the

00:07:28,530 --> 00:07:40,460
information about the session so I will

00:07:36,810 --> 00:07:44,760
go very quickly kubernetes is apparently

00:07:40,460 --> 00:07:46,140
we have we had a lot of way of there

00:07:44,760 --> 00:07:50,790
were a lot of different projects

00:07:46,140 --> 00:07:54,180
starting to to manage the cloud mezzos

00:07:50,790 --> 00:07:55,800
and a lot of others and kubernetes and

00:07:54,180 --> 00:08:01,170
it seems now we are doing kubernetes

00:07:55,800 --> 00:08:07,770
everywhere so basically if you looked at

00:08:01,170 --> 00:08:09,600
the different cloud cloud provider you

00:08:07,770 --> 00:08:11,760
have Amazon a lot of people are using

00:08:09,600 --> 00:08:14,730
Amazon it's kind of one of the big

00:08:11,760 --> 00:08:18,120
business nowadays you have the cloud

00:08:14,730 --> 00:08:21,000
Google platform you have IBM which is

00:08:18,120 --> 00:08:27,270
offering a cloud and you have asure

00:08:21,000 --> 00:08:30,720
which is the windows one so if you look

00:08:27,270 --> 00:08:33,840
to those I was speaking about kubernetes

00:08:30,720 --> 00:08:37,950
and we do things for kubernetes the cool

00:08:33,840 --> 00:08:41,940
thing is like well Amazon no problem

00:08:37,950 --> 00:08:44,310
they do kubernetes IBM since they have

00:08:41,940 --> 00:08:46,500
but--right at I'm right at they're going

00:08:44,310 --> 00:08:50,820
to use openshift which is also

00:08:46,500 --> 00:08:51,850
kubernetes so we got of course Google

00:08:50,820 --> 00:08:53,740
the

00:08:51,850 --> 00:08:58,600
been promoting kubernetes in the start

00:08:53,740 --> 00:09:01,050
so they go into there using kubernetes

00:08:58,600 --> 00:09:11,199
and if you look to a zoo they are also

00:09:01,050 --> 00:09:12,970
using kubernetes so I must slide are not

00:09:11,199 --> 00:09:14,380
very well ordered but I'm going also to

00:09:12,970 --> 00:09:17,980
say how it works

00:09:14,380 --> 00:09:20,139
oh so this is this is a bit this is how

00:09:17,980 --> 00:09:24,160
the kubernetes turf is working

00:09:20,139 --> 00:09:25,990
basically what what you do the first

00:09:24,160 --> 00:09:28,569
thing is basic for the moment all those

00:09:25,990 --> 00:09:31,360
things are using docker so you're going

00:09:28,569 --> 00:09:35,560
to build an image of Tonka you can build

00:09:31,360 --> 00:09:37,720
an image usually building a docker image

00:09:35,560 --> 00:09:41,319
is like you take an image which is

00:09:37,720 --> 00:09:44,889
already existing like an OS I do Java

00:09:41,319 --> 00:09:47,829
Virtual Machine or get something which

00:09:44,889 --> 00:09:50,980
is like Remy was explaining you have the

00:09:47,829 --> 00:09:54,459
operating system under Java Virtual

00:09:50,980 --> 00:09:55,959
Machine or already in a in an image and

00:09:54,459 --> 00:09:57,970
then you're going to add stuff to this

00:09:55,959 --> 00:10:01,930
image so basically what we do is just

00:09:57,970 --> 00:10:04,209
add the Tomcat to this image then we we

00:10:01,930 --> 00:10:07,720
build it locally we push it to a

00:10:04,209 --> 00:10:09,100
registry you can you can push it to

00:10:07,720 --> 00:10:12,819
docker but you can have your own

00:10:09,100 --> 00:10:14,829
instance to push the information then

00:10:12,819 --> 00:10:15,250
you run the docker container it could be

00:10:14,829 --> 00:10:17,949
docker

00:10:15,250 --> 00:10:21,220
on your on your laptop and you can say

00:10:17,949 --> 00:10:22,810
docker start and either the docker

00:10:21,220 --> 00:10:25,360
registry image is going to fetch the

00:10:22,810 --> 00:10:26,829
image either the tag of you image which

00:10:25,360 --> 00:10:31,120
is going to pick the one that you are

00:10:26,829 --> 00:10:34,120
already looking and then this is going

00:10:31,120 --> 00:10:37,180
to run the Tomcat and then what we want

00:10:34,120 --> 00:10:40,600
is what we want to expose it so that we

00:10:37,180 --> 00:10:43,360
can use it easily you can actually you

00:10:40,600 --> 00:10:45,550
try to expose it on port 80 so basically

00:10:43,360 --> 00:10:49,149
this is this is going to be somewhere in

00:10:45,550 --> 00:10:51,720
the cloud it gives you a unique unique

00:10:49,149 --> 00:10:55,389
address or a unique name so that you can

00:10:51,720 --> 00:10:58,380
access to your Tomcat running in a kind

00:10:55,389 --> 00:10:58,380
of a docker container

00:11:01,350 --> 00:11:08,320
so if you look to the automation

00:11:04,060 --> 00:11:12,580
basically all those steps are done in

00:11:08,320 --> 00:11:17,320
indicate in the case of of Amazon you

00:11:12,580 --> 00:11:20,260
have a special CLI and the console but

00:11:17,320 --> 00:11:22,090
then after everything is it use docker

00:11:20,260 --> 00:11:24,010
and then everything is controlled by

00:11:22,090 --> 00:11:27,040
humanities basically you build your

00:11:24,010 --> 00:11:32,050
cluster and then you have it with you

00:11:27,040 --> 00:11:36,030
have also association turf a switch all

00:11:32,050 --> 00:11:39,820
the other console which allows you to

00:11:36,030 --> 00:11:41,560
basically configure your account and how

00:11:39,820 --> 00:11:46,990
many note you want to run and sync like

00:11:41,560 --> 00:11:51,400
that then then it's also use kubernetes

00:11:46,990 --> 00:11:55,300
and googly they have a denies Edeka as

00:11:51,400 --> 00:11:57,370
the car or the console the console is on

00:11:55,300 --> 00:12:02,380
you account it use docker and use cubist

00:11:57,370 --> 00:12:05,650
vanities kubernetes open ships now since

00:12:02,380 --> 00:12:07,510
they move to IBM's it they move to

00:12:05,650 --> 00:12:09,730
OpenShift it's it's a lot more easy they

00:12:07,510 --> 00:12:11,800
had something which was a bit complex to

00:12:09,730 --> 00:12:14,140
use so now with open shift is like

00:12:11,800 --> 00:12:18,910
basically table they are doing the same

00:12:14,140 --> 00:12:23,460
like reddit is doing open shift it also

00:12:18,910 --> 00:12:27,600
a console and the client and it can use

00:12:23,460 --> 00:12:29,950
kubernetes or some openshift client

00:12:27,600 --> 00:12:32,860
already prepared command

00:12:29,950 --> 00:12:35,380
the thing is like openshift they are

00:12:32,860 --> 00:12:41,080
trying to kind of simplify some of the

00:12:35,380 --> 00:12:45,430
steps basically does small things that

00:12:41,080 --> 00:12:49,000
you can miss in when you're using QB CTL

00:12:45,430 --> 00:12:51,040
and they have try to kind of make it

00:12:49,000 --> 00:12:54,010
more user friendly which in some cases

00:12:51,040 --> 00:12:56,380
is good in some cases is annoying me a

00:12:54,010 --> 00:12:59,010
little but I think for the end user it's

00:12:56,380 --> 00:13:02,590
probably good

00:12:59,010 --> 00:13:07,060
so OpenShift OpenShift is a radar

00:13:02,590 --> 00:13:09,550
project if you if you are if you were

00:13:07,060 --> 00:13:11,570
looking to move to the radar and then

00:13:09,550 --> 00:13:14,670
try to get

00:13:11,570 --> 00:13:16,740
like you you can get a free instance to

00:13:14,670 --> 00:13:22,800
make some tests some OpenShift tests

00:13:16,740 --> 00:13:24,600
it's going to use Amazon Cloud if you

00:13:22,800 --> 00:13:27,720
access to the public openshift image

00:13:24,600 --> 00:13:30,060
OpenShift online but you can also

00:13:27,720 --> 00:13:33,630
install install it on a on a private

00:13:30,060 --> 00:13:35,250
cloud quite easily you can also install

00:13:33,630 --> 00:13:38,430
a Cuban it is directly on a private

00:13:35,250 --> 00:13:45,450
cloud so it's basically a layer on top

00:13:38,430 --> 00:13:49,440
of kubernetes - so what do if we look to

00:13:45,450 --> 00:13:53,790
the so this is this is this is a kind of

00:13:49,440 --> 00:13:58,050
a picture of the of the cloud so

00:13:53,790 --> 00:13:59,790
basically at some point you need you

00:13:58,050 --> 00:14:02,820
always have a master node which is going

00:13:59,790 --> 00:14:06,030
to take care of starting the pod and and

00:14:02,820 --> 00:14:07,500
controlling and it a lot of things and

00:14:06,030 --> 00:14:09,200
I'm not especially so I'm not going to

00:14:07,500 --> 00:14:13,080
enter in the small details

00:14:09,200 --> 00:14:16,350
it-it-it a node I know this kind of

00:14:13,080 --> 00:14:19,980
Locker it could be a virtual machine it

00:14:16,350 --> 00:14:22,760
could be a physical box in case of

00:14:19,980 --> 00:14:25,470
kubernetes it's mostly a physical box

00:14:22,760 --> 00:14:28,830
and in this physical box you can run

00:14:25,470 --> 00:14:31,290
several pod which basically several

00:14:28,830 --> 00:14:31,800
docker image that will run it could run

00:14:31,290 --> 00:14:33,690
either

00:14:31,800 --> 00:14:40,680
Yotam cat eyes of an application written

00:14:33,690 --> 00:14:43,589
in c or no g and you can have so you can

00:14:40,680 --> 00:14:46,050
have several boxes they are all

00:14:43,589 --> 00:14:49,200
connected to the master and in all those

00:14:46,050 --> 00:14:52,470
boxes you can run several pod and it can

00:14:49,200 --> 00:14:54,930
be resilient case it's a real machine it

00:14:52,470 --> 00:14:57,390
is a physical machine it could be a

00:14:54,930 --> 00:14:59,670
virtualized machine or it could be in a

00:14:57,390 --> 00:15:04,070
private or public cloud but it's it's

00:14:59,670 --> 00:15:04,070
all the same kind of construction

00:15:05,730 --> 00:15:11,860
so when you are using a when you're

00:15:09,040 --> 00:15:15,970
using OpenShift you your going to have

00:15:11,860 --> 00:15:19,900
your console you create your your

00:15:15,970 --> 00:15:23,610
application and then basically at some

00:15:19,900 --> 00:15:26,080
point you send it to comment like deploy

00:15:23,610 --> 00:15:28,270
Tomcat in the cloud which is the

00:15:26,080 --> 00:15:29,710
application you have prepared it's going

00:15:28,270 --> 00:15:34,330
to take the image and it is going to

00:15:29,710 --> 00:15:37,090
start a pod and this is valid on hold on

00:15:34,330 --> 00:15:43,180
all the that's working the same way

00:15:37,090 --> 00:15:46,900
everywhere if you want to make a try on

00:15:43,180 --> 00:15:49,060
yourself you have mini shifts and you

00:15:46,900 --> 00:15:50,620
have also in if you're running Fedora

00:15:49,060 --> 00:15:53,050
you have also open shift that you can

00:15:50,620 --> 00:15:57,010
run directly on your own machine

00:15:53,050 --> 00:15:58,330
basically it's going to do it's going to

00:15:57,010 --> 00:16:00,760
install the things for you and it's

00:15:58,330 --> 00:16:03,700
going to run everything in your own

00:16:00,760 --> 00:16:07,690
laptop you need an internet connection

00:16:03,700 --> 00:16:09,910
because you're going to basically need

00:16:07,690 --> 00:16:13,930
to access to the docker image which are

00:16:09,910 --> 00:16:17,050
definitely staying in the docker

00:16:13,930 --> 00:16:18,550
repository doctor I also therefore

00:16:17,050 --> 00:16:24,340
without the connection these things are

00:16:18,550 --> 00:16:30,940
a bit difficult to demo if you want to

00:16:24,340 --> 00:16:33,790
do this the some things online I have a

00:16:30,940 --> 00:16:37,270
wiki that explained how to do it I have

00:16:33,790 --> 00:16:40,480
put in under katakana a bunch of demo

00:16:37,270 --> 00:16:44,290
and classes where you can you can do

00:16:40,480 --> 00:16:49,150
things step by step I will try to run

00:16:44,290 --> 00:16:51,430
one to show you how it is katakana is

00:16:49,150 --> 00:16:53,460
supposed to be a tutorial but it's very

00:16:51,430 --> 00:16:55,750
good for making demos because basically

00:16:53,460 --> 00:16:58,720
you can script your things you don't

00:16:55,750 --> 00:17:06,610
make typos the cloud is not your cloud

00:16:58,720 --> 00:17:09,370
so it tend to work and so if you want to

00:17:06,610 --> 00:17:12,150
install it in the case you want to

00:17:09,370 --> 00:17:18,040
install openshift

00:17:12,150 --> 00:17:18,880
you are on a bunch of laptop basically

00:17:18,040 --> 00:17:21,549
you have

00:17:18,880 --> 00:17:25,360
bunch of notes basically you you'll have

00:17:21,549 --> 00:17:27,549
to to install the plug those machine to

00:17:25,360 --> 00:17:31,390
the network you have to win to install

00:17:27,549 --> 00:17:32,049
SSH key on them and then you can use

00:17:31,390 --> 00:17:35,440
ansible

00:17:32,049 --> 00:17:37,059
to install OpenShift recipiency will is

00:17:35,440 --> 00:17:39,640
going to install all the packet attorney

00:17:37,059 --> 00:17:41,500
that is going to to download all the

00:17:39,640 --> 00:17:44,530
images you need is going to put all the

00:17:41,500 --> 00:17:46,059
configuration for you and at the end you

00:17:44,530 --> 00:17:49,510
have to have a file that contains the

00:17:46,059 --> 00:17:51,130
description of what is that you're going

00:17:49,510 --> 00:17:54,760
to describe that you have one master or

00:17:51,130 --> 00:17:57,190
to master a bunch of nodes something to

00:17:54,760 --> 00:18:00,190
store the configuration and things like

00:17:57,190 --> 00:18:02,590
that and then you just run it wait take

00:18:00,190 --> 00:18:08,650
some time and then at the end your cloud

00:18:02,590 --> 00:18:12,010
is there running what is advice for

00:18:08,650 --> 00:18:14,710
OpenShift is to have two node for the

00:18:12,010 --> 00:18:17,950
things you're going to run and one

00:18:14,710 --> 00:18:22,600
master and one infra the infra is kind

00:18:17,950 --> 00:18:26,320
of everything but master is not doing

00:18:22,600 --> 00:18:28,179
that it promised lucky it seems that if

00:18:26,320 --> 00:18:31,570
you if you overload master you are in

00:18:28,179 --> 00:18:34,210
trouble so you should not run your

00:18:31,570 --> 00:18:37,090
tomcat on master because you would

00:18:34,210 --> 00:18:39,909
definitely be other risk cleaning it and

00:18:37,090 --> 00:18:42,100
on in the actual version of openshift

00:18:39,909 --> 00:18:44,880
you can't run a pod

00:18:42,100 --> 00:18:47,320
other than the specialized pod on master

00:18:44,880 --> 00:18:51,549
so basically you can't run your tomcat

00:18:47,320 --> 00:18:53,530
on master so you need except you using

00:18:51,549 --> 00:18:57,970
the standalone version which is for

00:18:53,530 --> 00:19:01,750
demos all the demo I have is a small

00:18:57,970 --> 00:19:04,600
tomcat web app with the rest counter

00:19:01,750 --> 00:19:08,080
there and basically all the all those

00:19:04,600 --> 00:19:10,630
demo are basically showing that it it's

00:19:08,080 --> 00:19:15,360
keeping there's a small counter and then

00:19:10,630 --> 00:19:15,360
you make refresh it's going to increase

00:19:18,890 --> 00:19:35,309
so I guess I can I can so as we are

00:19:30,990 --> 00:19:37,170
basically seen when we move from a

00:19:35,309 --> 00:19:39,929
cluster like basically you have your

00:19:37,170 --> 00:19:43,799
physical machine connected to the to the

00:19:39,929 --> 00:19:46,650
network where you can do tcp/ip and UDP

00:19:43,799 --> 00:19:48,630
and everything if you move to the cloud

00:19:46,650 --> 00:19:51,660
it's going to be you have to do some

00:19:48,630 --> 00:19:54,270
something your different way either you

00:19:51,660 --> 00:19:57,690
use salts some tool that is already

00:19:54,270 --> 00:19:59,460
doing the cloud logic you use for

00:19:57,690 --> 00:20:02,490
example an embedded Tomcat with spring

00:19:59,460 --> 00:20:08,390
boot you create you own a docker image

00:20:02,490 --> 00:20:13,260
which is more or less but you can extend

00:20:08,390 --> 00:20:16,590
an existing document you can use a

00:20:13,260 --> 00:20:18,870
fabricate or s to image these things is

00:20:16,590 --> 00:20:21,210
basically fabricate is going to to build

00:20:18,870 --> 00:20:25,140
the things for you basically it's going

00:20:21,210 --> 00:20:26,700
to be a huge star put this jar in a you

00:20:25,140 --> 00:20:29,549
know docker image and then send this

00:20:26,700 --> 00:20:33,000
image to docker and then deploy it on

00:20:29,549 --> 00:20:34,710
your on your cloud the s2 image is

00:20:33,000 --> 00:20:37,290
basically going to do the same kind of

00:20:34,710 --> 00:20:39,780
things basically it's going to allow you

00:20:37,290 --> 00:20:41,730
to have a kind of operator which is

00:20:39,780 --> 00:20:44,100
going to compile you image when

00:20:41,730 --> 00:20:47,400
something is changed deploy it is in the

00:20:44,100 --> 00:20:49,890
cloud and if if the deployment fell it

00:20:47,400 --> 00:20:51,390
it will go back if it the deployment is

00:20:49,890 --> 00:20:55,950
successful it will deploy the

00:20:51,390 --> 00:20:58,860
application on all the pod what problem

00:20:55,950 --> 00:21:00,540
we have well we don't have multicast on

00:20:58,860 --> 00:21:03,570
the cloud so we had to look to two

00:21:00,540 --> 00:21:06,540
different way to find the other node so

00:21:03,570 --> 00:21:08,030
we have to we have implemented two

00:21:06,540 --> 00:21:11,940
different thing

00:21:08,030 --> 00:21:17,270
one is a QB ping and one is a DNS ping

00:21:11,940 --> 00:21:20,059
the QEP need basically to view the node

00:21:17,270 --> 00:21:22,350
it was basically one not have to have

00:21:20,059 --> 00:21:24,919
possibility to videos on all in order to

00:21:22,350 --> 00:21:27,610
know why it need to connect to find

00:21:24,919 --> 00:21:30,250
basically to send a session information

00:21:27,610 --> 00:21:38,080
in the case of a DNS pinion we use the

00:21:30,250 --> 00:21:41,560
DNS service in kubernetes so so this is

00:21:38,080 --> 00:21:43,660
the normal cluster anyone has been using

00:21:41,560 --> 00:21:45,940
in the past is basically you have your

00:21:43,660 --> 00:21:48,430
session data you have the multicast that

00:21:45,940 --> 00:21:49,030
allows the different Tom can to discover

00:21:48,430 --> 00:21:51,400
each other

00:21:49,030 --> 00:21:54,040
and you have a tcp/ip connection which

00:21:51,400 --> 00:21:57,090
is going to send the session information

00:21:54,040 --> 00:22:00,100
because basically we don't use we use

00:21:57,090 --> 00:22:02,590
lit very little in the multicast when

00:22:00,100 --> 00:22:06,760
you move to the to the cloud in the case

00:22:02,590 --> 00:22:08,920
of the cube a ping we're going to use

00:22:06,760 --> 00:22:10,690
the kubernetes api to discover the other

00:22:08,920 --> 00:22:13,390
node which is going to do basically to

00:22:10,690 --> 00:22:14,890
get the IP address of this one and you

00:22:13,390 --> 00:22:17,470
get the IP address of this one and get

00:22:14,890 --> 00:22:19,480
the IP address of this one this one is

00:22:17,470 --> 00:22:21,400
also is opening the pot and then we are

00:22:19,480 --> 00:22:23,740
back to these things basically we can

00:22:21,400 --> 00:22:26,460
exchange the c decision information

00:22:23,740 --> 00:22:26,460
without problems

00:22:28,570 --> 00:22:40,240
and so so this is a little some how its

00:22:36,190 --> 00:22:47,620
works inside is basically an cuban it is

00:22:40,240 --> 00:22:53,429
as a an interface basically you make a

00:22:47,620 --> 00:22:58,210
tell s get on you tell the net in the

00:22:53,429 --> 00:23:00,220
using the IP i the version you want to

00:22:58,210 --> 00:23:01,690
look to the name space the name spaces

00:23:00,220 --> 00:23:05,679
stone cut and you want to look to the

00:23:01,690 --> 00:23:08,830
pod this is returning as adjacent this

00:23:05,679 --> 00:23:11,500
one is pastored with the information

00:23:08,830 --> 00:23:12,309
what we have something interesting we

00:23:11,500 --> 00:23:15,399
have the net

00:23:12,309 --> 00:23:19,299
the first one is the name the name of

00:23:15,399 --> 00:23:21,519
the pod the creation time which could be

00:23:19,299 --> 00:23:24,250
interesting you have the status that it

00:23:21,519 --> 00:23:26,730
is running and this is what is very

00:23:24,250 --> 00:23:26,730
interesting

00:24:23,710 --> 00:24:37,940
okay so as I was telling like what we

00:24:33,559 --> 00:24:40,009
are interested in is the poor IP which

00:24:37,940 --> 00:24:48,919
is basically the address inside the

00:24:40,009 --> 00:24:51,440
kubernetes so basically those are the

00:24:48,919 --> 00:24:56,019
classes in those are the classes in in

00:24:51,440 --> 00:24:59,509
Tomcat you basically you have a

00:24:56,019 --> 00:25:02,509
membership service it had a refresh

00:24:59,509 --> 00:25:05,090
thread which is going to to get the the

00:25:02,509 --> 00:25:07,340
member regularly to make to update the

00:25:05,090 --> 00:25:10,220
list you need some init singie

00:25:07,340 --> 00:25:12,980
and then you have all the information

00:25:10,220 --> 00:25:15,169
that this is exactly this is discoveries

00:25:12,980 --> 00:25:20,950
in the Tomcat so if you want to look for

00:25:15,169 --> 00:25:20,950
the details and the name of the classes

00:25:21,940 --> 00:25:29,360
so if you look to the DNS ping we

00:25:26,600 --> 00:25:31,639
replace but it's it's quite easy because

00:25:29,360 --> 00:25:35,720
basically a kubernetes is offering us

00:25:31,639 --> 00:25:38,269
the DNS so basically you get a humid

00:25:35,720 --> 00:25:42,490
getting it all by name and give the

00:25:38,269 --> 00:25:45,440
namespace with stone cut in the cloud

00:25:42,490 --> 00:25:49,309
demo and basically it's going to return

00:25:45,440 --> 00:25:52,700
the address of all the pots already so

00:25:49,309 --> 00:25:57,169
it's it's a perfectly way for us to get

00:25:52,700 --> 00:25:59,799
the this thing it's it's a bit tricky if

00:25:57,169 --> 00:26:02,929
you don't configure the Tomcat correctly

00:25:59,799 --> 00:26:05,440
because it needs I'll check to report

00:26:02,929 --> 00:26:08,149
that the address of a pod that is up

00:26:05,440 --> 00:26:10,429
because otherwise you're going to get

00:26:08,149 --> 00:26:12,350
poor that are dead which is not very

00:26:10,429 --> 00:26:15,259
good so you need to have a check this is

00:26:12,350 --> 00:26:20,419
we have a filter or valve in tanka that

00:26:15,259 --> 00:26:23,269
does that for those data file for us so

00:26:20,419 --> 00:26:27,190
basically this is an example this is a

00:26:23,269 --> 00:26:30,619
screenshot offer of a small running it's

00:26:27,190 --> 00:26:33,909
in in this case it's it's open ship but

00:26:30,619 --> 00:26:33,909
it's exactly the same for

00:26:34,210 --> 00:26:42,260
kubernetes so this is basically I I'm

00:26:39,380 --> 00:26:44,179
connecting to an was checking my pods

00:26:42,260 --> 00:26:47,750
I'm connecting to the pod and then I

00:26:44,179 --> 00:26:50,840
make a nslookup Tomcat demo which is as

00:26:47,750 --> 00:26:53,049
you can see the name of my pod but also

00:26:50,840 --> 00:26:57,710
the name of my name space and then is

00:26:53,049 --> 00:26:59,270
returning me that here you have to you

00:26:57,710 --> 00:27:00,830
can see you have to pot and then I have

00:26:59,270 --> 00:27:03,950
the address of the to port so it's very

00:27:00,830 --> 00:27:08,419
easy to put those two pod in my list and

00:27:03,950 --> 00:27:10,789
then open it a TCP connection and use

00:27:08,419 --> 00:27:15,320
the normal logic of the Tomcat

00:27:10,789 --> 00:27:24,020
clustering to send the information about

00:27:15,320 --> 00:27:29,780
the sessions so what I've done is like

00:27:24,020 --> 00:27:32,659
what we have done well we have a we have

00:27:29,780 --> 00:27:39,020
a bunch of demo already in katakana that

00:27:32,659 --> 00:27:43,880
you can play with them we have in Tomcat

00:27:39,020 --> 00:27:48,260
maven in the repository of Tomcat we

00:27:43,880 --> 00:27:51,950
have the logic the the DNS and the cue

00:27:48,260 --> 00:27:57,110
beeping cluster code is in Tomcat so

00:27:51,950 --> 00:28:00,230
it's ready to be used we we started to

00:27:57,110 --> 00:28:03,260
prepare as to image that's the URL you

00:28:00,230 --> 00:28:06,400
can have to look to it and we started to

00:28:03,260 --> 00:28:10,940
develop a small operator in Co the

00:28:06,400 --> 00:28:14,539
operator is kind of admin tool for

00:28:10,940 --> 00:28:18,380
kubernetes returning go which allows you

00:28:14,539 --> 00:28:20,150
to basically you define your stuff you

00:28:18,380 --> 00:28:22,549
start the operator and the operator will

00:28:20,150 --> 00:28:24,799
take care of all those things you have a

00:28:22,549 --> 00:28:26,720
configuration file and and I you tell

00:28:24,799 --> 00:28:28,429
the number of replicas you change this

00:28:26,720 --> 00:28:30,470
value say apply this violin and it's

00:28:28,429 --> 00:28:32,360
going to do it for you but it can also

00:28:30,470 --> 00:28:35,200
read apply the application or deploy

00:28:32,360 --> 00:28:35,200
another application

00:28:36,770 --> 00:28:45,050
so I'm going

00:28:46,480 --> 00:28:57,940
and 20 minute now okay so I will try to

00:28:50,289 --> 00:29:04,029
make a demo so so here you have the

00:28:57,940 --> 00:29:10,440
sources we can go to I should be able to

00:29:04,029 --> 00:29:10,440
click on the demo so this is a small

00:29:12,290 --> 00:29:21,100
so so as you can see a categorize is a

00:29:16,900 --> 00:29:23,450
exactly doing what cuban et would do I

00:29:21,100 --> 00:29:26,240
can do the same on this if they have

00:29:23,450 --> 00:29:27,830
started but I'm more or less sure that

00:29:26,240 --> 00:29:35,780
this is going to work and I can't make

00:29:27,830 --> 00:29:37,580
any because the so at some point is is

00:29:35,780 --> 00:29:42,440
starting the different element at some

00:29:37,580 --> 00:29:45,200
point I should have the prompt back so

00:29:42,440 --> 00:29:47,930
so it's doing one thing is starting a

00:29:45,200 --> 00:29:56,780
master then basically this is building

00:29:47,930 --> 00:30:02,210
at a master plus two node cluster in the

00:29:56,780 --> 00:30:04,670
cloud so starting a master the master is

00:30:02,210 --> 00:30:08,420
configuring him itself then the master

00:30:04,670 --> 00:30:13,690
is removed SSH to work the two nodes and

00:30:08,420 --> 00:30:13,690
starting kubernetes on the two nodes and

00:30:14,590 --> 00:30:18,640
that's going to take some time

00:30:20,350 --> 00:30:26,789
in the meantime I'm going to look if my

00:30:23,169 --> 00:30:26,789
node which was not working is working

00:32:12,500 --> 00:32:21,740
sorry yeah I don't forget that okay

00:32:26,860 --> 00:32:34,870
tell my master I stood broken oh it does

00:32:29,500 --> 00:32:38,970
not work well seems the demo is a bit

00:32:34,870 --> 00:32:41,250
broken Oh katakana is a bit broken no

00:32:38,970 --> 00:32:45,390
it's coming

00:32:41,250 --> 00:32:45,390
so master started

00:32:48,850 --> 00:32:54,870
you need to install a package is it

00:32:51,640 --> 00:32:54,870
missing it otherwise

00:32:56,040 --> 00:33:04,670
and it's not the network yeah that is

00:33:00,750 --> 00:33:04,670
though its category

00:33:07,370 --> 00:33:13,480
so that's good so I'm doing to clean my

00:33:12,470 --> 00:33:20,080
demo

00:33:13,480 --> 00:33:20,080
change the directory to to demo build it

00:33:21,670 --> 00:33:28,910
it's mavin it's going to take a while

00:33:25,540 --> 00:33:37,540
oops maybe there's some Marvin commit

00:33:28,910 --> 00:33:41,450
and room Marvin is a nice tool but it's

00:33:37,540 --> 00:33:44,000
it's always starting to download a lot

00:33:41,450 --> 00:33:46,190
of stuff that you're really wondering

00:33:44,000 --> 00:33:48,920
why dl i have put so many dependency on

00:33:46,190 --> 00:33:53,200
my application and this is really the

00:33:48,920 --> 00:33:57,080
the most simple application you can have

00:33:53,200 --> 00:33:59,630
it it's returning a rest things but it's

00:33:57,080 --> 00:34:03,890
coded by end you know me i can do that

00:33:59,630 --> 00:34:05,810
things you can use nice tool to make

00:34:03,890 --> 00:34:09,280
rest but you can also do it by hand and

00:34:05,810 --> 00:34:09,280
it's supposed to be faster it

00:34:19,659 --> 00:34:25,200
and we're going to be patient sorry

00:34:34,830 --> 00:34:42,000
okay so it's ad build the application I

00:34:38,970 --> 00:34:50,700
can jump on summers of the steps because

00:34:42,000 --> 00:34:52,040
normally so once this is done I would do

00:34:50,700 --> 00:34:57,870
this

00:34:52,040 --> 00:35:00,450
Cora could be my small application then

00:34:57,870 --> 00:35:02,580
I will do Marvin installed again that

00:35:00,450 --> 00:35:06,300
will build up the bigger the big docker

00:35:02,580 --> 00:35:12,240
image that we build a big jar then I

00:35:06,300 --> 00:35:14,370
would build the docker image and then I

00:35:12,240 --> 00:35:16,560
will send this document by this common

00:35:14,370 --> 00:35:18,210
which is pushing it and in fact I

00:35:16,560 --> 00:35:20,330
already pushed it so I don't need to do

00:35:18,210 --> 00:35:20,330
it

00:35:26,240 --> 00:35:36,539
so I so this is another part of this is

00:35:32,400 --> 00:35:38,789
the this is basically the kubernetes

00:35:36,539 --> 00:35:44,329
part of the demo which I'm going to use

00:35:38,789 --> 00:35:44,329
the TNS being I'm creating the namespace

00:35:47,440 --> 00:35:55,000
and then creating the deployment so

00:35:52,359 --> 00:35:58,269
basically this should have created the

00:35:55,000 --> 00:36:03,000
pods I can yep I don't know why I

00:35:58,269 --> 00:36:03,000
clicked somewhere else

00:36:05,039 --> 00:36:15,250
create the service go to the next step

00:36:09,930 --> 00:36:18,640
get the soda running look to the pod so

00:36:15,250 --> 00:36:21,450
we have a tomcat we have a couple that

00:36:18,640 --> 00:36:21,450
have been started

00:36:22,190 --> 00:36:25,660
so we're going to scale it

00:36:25,800 --> 00:36:36,900
and then and if we look again to the

00:36:29,850 --> 00:36:39,810
port to port we can we have a comment to

00:36:36,900 --> 00:36:43,800
log to look to the log file the thing is

00:36:39,810 --> 00:36:49,920
making can't copy past that stuff no

00:36:43,800 --> 00:36:51,650
okay so basically you can if if I would

00:36:49,920 --> 00:36:57,360
be good enough to type this big number

00:36:51,650 --> 00:37:00,720
I'm not you you can you can read the

00:36:57,360 --> 00:37:04,860
Catalina dot out which is sent to the to

00:37:00,720 --> 00:37:08,490
the log of the pod you can run a small

00:37:04,860 --> 00:37:12,350
program on it identically you can look

00:37:08,490 --> 00:37:17,100
to the you can show the DNS that I was

00:37:12,350 --> 00:37:22,470
you can nslookup which I was showing the

00:37:17,100 --> 00:37:24,990
result then now we have two so now we

00:37:22,470 --> 00:37:28,550
have the Tomcat running actually the

00:37:24,990 --> 00:37:31,820
status is pending so I need what little

00:37:28,550 --> 00:37:31,820
still pending

00:37:34,849 --> 00:37:40,089
oh it's slow I think I can deploy

00:37:38,299 --> 00:37:44,989
depending singing and so in the meantime

00:37:40,089 --> 00:37:48,849
that's going to work so now so so

00:37:44,989 --> 00:37:51,729
basically I'm addicts I've exposed the

00:37:48,849 --> 00:37:57,349
the tongue the Tomcat application that

00:37:51,729 --> 00:38:01,939
is running on two pots and I have now

00:37:57,349 --> 00:38:04,779
and I have no the things running on the

00:38:01,939 --> 00:38:11,079
katakana and I should be able to access

00:38:04,779 --> 00:38:11,079
to my Tomcat application using this port

00:38:18,189 --> 00:38:21,969
it was 31

00:38:22,140 --> 00:38:33,420
thirty one two one seven

00:38:25,579 --> 00:38:39,470
it's that's okay let's try again

00:38:33,420 --> 00:38:39,470
oh this is my dongle that I have touched

00:38:41,260 --> 00:38:44,850
it's a little too much

00:38:48,550 --> 00:38:57,990
yeah it's one time password it's not yet

00:38:55,780 --> 00:38:57,990
up

00:39:01,970 --> 00:39:15,140
it was Italy TT no no I'm sure it isn't

00:39:08,810 --> 00:39:15,140
no no I just hope that it doesn't

00:39:16,650 --> 00:39:20,060
it needs some time

00:39:21,780 --> 00:39:30,590
that seems categorize overloaded usually

00:39:26,580 --> 00:39:30,590
that's work

00:39:31,810 --> 00:39:40,030
now seems okay my man lucky you know

00:39:34,390 --> 00:39:43,050
they move demo is risky so it's not so

00:39:40,030 --> 00:39:46,590
this does not want to work for a

00:39:43,050 --> 00:39:46,590
Prentice on network

00:39:55,470 --> 00:40:03,350
so okay that's that's the idea you can

00:39:58,380 --> 00:40:09,140
try the you can try to do things later

00:40:03,350 --> 00:40:11,370
the day going definitively to stop

00:40:09,140 --> 00:40:19,200
category is very easy you just leave the

00:40:11,370 --> 00:40:23,430
page and that's done this is going to

00:40:19,200 --> 00:40:27,000
stop the stuff so uh so I have a small

00:40:23,430 --> 00:40:31,530
introduction I have the ping demo and I

00:40:27,000 --> 00:40:35,060
have as another operator demo I'm not

00:40:31,530 --> 00:40:35,060
sure I'm not sure we're going to have a

00:40:38,510 --> 00:40:48,900
there running these just the issue that

00:40:40,800 --> 00:40:51,360
cat I could very slow and you don't know

00:40:48,900 --> 00:40:55,130
it it seemed to have a bunch of of note

00:40:51,360 --> 00:40:55,130
so I'm just trying maybe if I'm lucky

00:40:56,630 --> 00:41:08,760
any question in the meantime sure you've

00:41:06,480 --> 00:41:11,730
been talking about the session replica

00:41:08,760 --> 00:41:12,890
yeah which is something very very

00:41:11,730 --> 00:41:15,810
interesting

00:41:12,890 --> 00:41:20,310
what about the decision affinity I mean

00:41:15,810 --> 00:41:23,700
is it 100% the session affinity in open

00:41:20,310 --> 00:41:27,150
ship or in kubernetes I mean the ingress

00:41:23,700 --> 00:41:29,100
connection or the routes or because in

00:41:27,150 --> 00:41:31,530
the past there was also had a

00:41:29,100 --> 00:41:37,460
conversation between the web server and

00:41:31,530 --> 00:41:39,990
that the tone cuts itself yes actually

00:41:37,460 --> 00:41:42,920
it's quite difficult to make a fell over

00:41:39,990 --> 00:41:48,210
and in these things because basically a

00:41:42,920 --> 00:41:52,170
kubernetes or openshift both of them are

00:41:48,210 --> 00:41:54,930
using sticky session and you can

00:41:52,170 --> 00:41:57,390
configure it not to use a sticky session

00:41:54,930 --> 00:41:59,970
but it's going to be sticky at the

00:41:57,390 --> 00:42:02,520
connection level so you have to if you

00:41:59,970 --> 00:42:06,140
want to to demonstrate a failover you

00:42:02,520 --> 00:42:08,500
have to wait until something like a

00:42:06,140 --> 00:42:11,680
ten-second time out that the

00:42:08,500 --> 00:42:15,420
that the the connection is closed and

00:42:11,680 --> 00:42:15,420
then you might arrive to another node

00:42:15,840 --> 00:42:18,840
yes

00:42:52,210 --> 00:42:58,069
okay but in case it's Tomcat so with

00:42:55,690 --> 00:43:00,020
okay no it does not add another session

00:42:58,069 --> 00:43:02,599
affinity to add the connection affinity

00:43:00,020 --> 00:43:06,170
which basically you reuse the same

00:43:02,599 --> 00:43:07,700
connection and he's passing the she's

00:43:06,170 --> 00:43:10,010
session ID knows about it and he's

00:43:07,700 --> 00:43:12,289
maintaining the session I is maintaining

00:43:10,010 --> 00:43:25,280
the the sticky session the same way we

00:43:12,289 --> 00:43:28,579
would with pietistic PD you can do it

00:43:25,280 --> 00:43:30,740
that way but it's it's not it's not it's

00:43:28,579 --> 00:43:33,020
not in this case but you don't need it

00:43:30,740 --> 00:43:35,390
in fact it because the Tomcat will do it

00:43:33,020 --> 00:43:39,890
for you because it was decision ID and

00:43:35,390 --> 00:43:41,750
then the the rotor will know that as you

00:43:39,890 --> 00:43:44,450
know that it's a session ID so he knows

00:43:41,750 --> 00:43:47,510
that he need to with it to do something

00:43:44,450 --> 00:43:50,210
he's keeping some table inside and do it

00:43:47,510 --> 00:43:54,700
for us I don't know the detail how it

00:43:50,210 --> 00:44:03,980
does it but I know it does it yeah yeah

00:43:54,700 --> 00:44:06,710
it was a question yeah so you mentioned

00:44:03,980 --> 00:44:10,099
that Tomcat nodes communicate between

00:44:06,710 --> 00:44:12,559
them in discover each other and they

00:44:10,099 --> 00:44:15,230
communicate I'm curious what type of

00:44:12,559 --> 00:44:20,029
information they pass what they

00:44:15,230 --> 00:44:22,910
communicate and what what and if the web

00:44:20,029 --> 00:44:24,920
app running in your Tomcat has to do to

00:44:22,910 --> 00:44:26,869
run in the cluster mode if it needs to

00:44:24,920 --> 00:44:29,240
be aware it's in cluster mode or if it's

00:44:26,869 --> 00:44:31,849
if it scales on that automatically with

00:44:29,240 --> 00:44:36,319
your if you decide to put it in cluster

00:44:31,849 --> 00:44:39,289
or not so in your web app you don't need

00:44:36,319 --> 00:44:43,059
to know anything you just need to tell

00:44:39,289 --> 00:44:46,220
that it is District of distributable the

00:44:43,059 --> 00:44:47,930
the cluster is installing a valve that

00:44:46,220 --> 00:44:48,890
make make sure that the information is

00:44:47,930 --> 00:44:51,140
transferred

00:44:48,890 --> 00:44:53,569
from one station to the other and what

00:44:51,140 --> 00:44:56,329
we transfer are the deltas and what we

00:44:53,569 --> 00:44:58,220
what is transfer is exactly the same and

00:44:56,329 --> 00:44:59,839
that in a normal cluster and if you want

00:44:58,220 --> 00:45:01,369
to debug it in a normal cluster its lot

00:44:59,839 --> 00:45:03,289
more easy than in the cloud basically

00:45:01,369 --> 00:45:05,529
you're going to do you put to start to

00:45:03,289 --> 00:45:08,450
Tomcat on two different local host

00:45:05,529 --> 00:45:10,789
address build a cluster and then you can

00:45:08,450 --> 00:45:13,250
use Wireshark to see what is exchanged

00:45:10,789 --> 00:45:14,900
there I basically she is exchanging that

00:45:13,250 --> 00:45:16,819
the Delta of the attribute of the

00:45:14,900 --> 00:45:19,059
session he knows what was they know what

00:45:16,819 --> 00:45:23,359
was changing and is changing the Delta

00:45:19,059 --> 00:45:27,349
and I'm not the best specialist of the

00:45:23,359 --> 00:45:29,240
of the Tomcat cluster I another

00:45:27,349 --> 00:45:32,539
committer have been rearranging and

00:45:29,240 --> 00:45:35,329
rewriting that code so and it's not in

00:45:32,539 --> 00:45:37,099
the room so you can ask it on the death

00:45:35,329 --> 00:45:42,890
list if you want the details of how this

00:45:37,099 --> 00:45:45,349
is done so forth no no it's the first

00:45:42,890 --> 00:45:48,140
thing data that gets replicated must be

00:45:45,349 --> 00:45:49,819
serializable so if it's not serializable

00:45:48,140 --> 00:45:51,380
you've got a problem and the second

00:45:49,819 --> 00:45:52,339
thing when you said deltas in the

00:45:51,380 --> 00:45:56,510
session

00:45:52,339 --> 00:45:59,599
it relies on set attribute being called

00:45:56,510 --> 00:46:02,270
on session attributes that have changed

00:45:59,599 --> 00:46:05,150
of course you can do another pattern you

00:46:02,270 --> 00:46:08,539
can call get attribute and then call a

00:46:05,150 --> 00:46:10,880
setter on your object tomcat will not be

00:46:08,539 --> 00:46:12,799
aware of death you have to call set

00:46:10,880 --> 00:46:14,450
attribute and put it back into the

00:46:12,799 --> 00:46:17,059
session all right although it's already

00:46:14,450 --> 00:46:19,010
there so that Tomcat is aware that you

00:46:17,059 --> 00:46:25,099
have written to the session but that's

00:46:19,010 --> 00:46:27,980
that's all but if if you basically if

00:46:25,099 --> 00:46:29,990
your if your application is working on a

00:46:27,980 --> 00:46:31,160
normal cluster it will work the same way

00:46:29,990 --> 00:46:33,319
here

00:46:31,160 --> 00:46:36,680
definitely if if it's not working then

00:46:33,319 --> 00:46:39,069
we are here to help to fix the different

00:46:36,680 --> 00:46:39,069
glitches

00:46:41,660 --> 00:46:51,099
any more question I'm not sure but I

00:46:45,470 --> 00:46:54,529
thought that JVM cashes DNS results

00:46:51,099 --> 00:46:56,390
cache is the DNS result so if you do

00:46:54,529 --> 00:46:58,430
nslookup you're doing it in the OS and

00:46:56,390 --> 00:47:04,720
you're doing a real request every time

00:46:58,430 --> 00:47:07,609
but if the the JVM does the DNS request

00:47:04,720 --> 00:47:11,859
wouldn't it cache the result so that you

00:47:07,609 --> 00:47:14,269
do not get the updates from the server

00:47:11,859 --> 00:47:16,460
and I'm not sure I think there is a

00:47:14,269 --> 00:47:20,380
switch where you can turn off the

00:47:16,460 --> 00:47:20,380
caching but by default I think it caches

00:47:25,059 --> 00:47:31,789
so I might have that might explain some

00:47:29,210 --> 00:47:37,730
of my glitches when I'm testing the

00:47:31,789 --> 00:47:39,529
stuff thank you but yeah that's that's

00:47:37,730 --> 00:47:41,210
why we do Apache concert the people can

00:47:39,529 --> 00:47:41,750
comment and say they say yeah you're

00:47:41,210 --> 00:47:44,299
right I do

00:47:41,750 --> 00:47:46,220
I've never care about these things I was

00:47:44,299 --> 00:47:52,130
always expecting that it worked by

00:47:46,220 --> 00:47:59,029
default so you can have a switch that

00:47:52,130 --> 00:48:01,190
make it that it is not cache and it's

00:47:59,029 --> 00:48:05,299
going to be solved very quickly because

00:48:01,190 --> 00:48:08,690
the the DNS is a local pot running on

00:48:05,299 --> 00:48:12,069
each node so we don't have to wait for

00:48:08,690 --> 00:48:19,579
it and we look we are solving a local

00:48:12,069 --> 00:48:21,740
address yeah because in the end

00:48:19,579 --> 00:48:25,240
kubernetes has a lot of tricks around

00:48:21,740 --> 00:48:25,240
the name services yeah

00:48:32,640 --> 00:48:40,590
okay any more question I can try to see

00:48:38,010 --> 00:48:44,190
if it started and I may be rendered a

00:48:40,590 --> 00:48:48,470
move otherwise you should try it at home

00:48:44,190 --> 00:48:50,760
or in the hotel later not all at this

00:48:48,470 --> 00:48:53,060
during the night when there is no one in

00:48:50,760 --> 00:48:55,500
UK are playing with that stuff

00:48:53,060 --> 00:48:57,270
trust me it works a lot better in the

00:48:55,500 --> 00:49:00,510
u.s. than here it's just because the

00:48:57,270 --> 00:49:03,180
servers are located in in UK and then I

00:49:00,510 --> 00:49:12,870
guess it's it's a bad time next time I

00:49:03,180 --> 00:49:14,640
ask for slots early in the morning so

00:49:12,870 --> 00:49:19,740
it's it's the same thing it had started

00:49:14,640 --> 00:49:25,260
I can jump a bit fast if I want to save

00:49:19,740 --> 00:49:31,350
some because I have already the image so

00:49:25,260 --> 00:49:34,670
I can continue I can skip that thing

00:49:31,350 --> 00:49:34,670
because I already have the image

00:49:37,650 --> 00:49:42,859
I need to check out something which I

00:49:39,660 --> 00:49:42,859
need to remember which piece

00:49:49,070 --> 00:49:54,320
so this is how to build a operator

00:49:51,250 --> 00:49:54,320
[Music]

00:50:03,670 --> 00:50:11,470
I'm trying to make the demo as short as

00:50:06,130 --> 00:50:15,100
I can because I'm quite afraid it will

00:50:11,470 --> 00:50:18,250
fail miserably I need to set the goal

00:50:15,100 --> 00:50:24,820
but I guess I didn't even complain

00:50:18,250 --> 00:50:31,930
I'm not going to compile it anyway I'm

00:50:24,820 --> 00:50:35,050
not going to use I are just going to run

00:50:31,930 --> 00:50:38,490
this which is going to create all the

00:50:35,050 --> 00:50:38,490
service I need for my operator

00:50:43,970 --> 00:50:52,760
and I've forgotten to check out the demo

00:50:49,130 --> 00:50:56,210
right what isn't going to be in my repo

00:50:52,760 --> 00:50:58,420
is a little bit crazy but it's not a big

00:50:56,210 --> 00:50:58,420
problem

00:51:00,960 --> 00:51:11,119
so while goddamn yeah I have a small

00:51:05,550 --> 00:51:11,119
resource file file

00:51:14,349 --> 00:51:20,579
which is basically I'm going to tell it

00:51:16,269 --> 00:51:20,579
that I want to start a three Tomcat

00:51:30,720 --> 00:51:36,740
to be sit here get food

00:51:38,260 --> 00:51:43,270
so you see that started the pod which is

00:51:40,660 --> 00:51:47,140
the operator and then basically I can

00:51:43,270 --> 00:51:49,420
just apply my modification and in this

00:51:47,140 --> 00:51:51,550
case the modification is to start more I

00:51:49,420 --> 00:51:56,530
see narrow so it's not going to work I

00:51:51,550 --> 00:52:05,580
don't know what it's so if I could get

00:51:56,530 --> 00:52:10,050
bodied that's we are know what's wrong

00:52:05,580 --> 00:52:16,750
that's the image for the raspberry and

00:52:10,050 --> 00:52:18,550
they are running on on an Intel box so

00:52:16,750 --> 00:52:26,109
if you run the only movie use your own

00:52:18,550 --> 00:52:28,740
docker you won't have the problem I need

00:52:26,109 --> 00:52:33,760
five minutes so it's not going to be

00:52:28,740 --> 00:52:37,150
possible disarray so yeah there's yeah

00:52:33,760 --> 00:52:39,430
so basically the idea is like the the

00:52:37,150 --> 00:52:41,770
operator will create the service and you

00:52:39,430 --> 00:52:43,300
just need to eat with create all you

00:52:41,770 --> 00:52:48,190
need and then you just need to expose

00:52:43,300 --> 00:52:50,340
and then look to these things and this

00:52:48,190 --> 00:52:50,340
is

00:52:52,630 --> 00:52:55,530
I'm sorry

00:52:56,430 --> 00:53:01,470
any any question or I can free you

00:52:59,880 --> 00:53:03,619
something like three minutes before the

00:53:01,470 --> 00:53:03,619
end

00:53:10,640 --> 00:53:16,230

YouTube URL: https://www.youtube.com/watch?v=ujOmPmXXgvg


