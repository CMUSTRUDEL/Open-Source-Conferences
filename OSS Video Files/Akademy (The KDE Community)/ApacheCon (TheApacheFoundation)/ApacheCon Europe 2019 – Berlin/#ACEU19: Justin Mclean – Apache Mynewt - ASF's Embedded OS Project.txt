Title: #ACEU19: Justin Mclean – Apache Mynewt - ASF's Embedded OS Project
Publication date: 2019-10-31
Playlist: ApacheCon Europe 2019 – Berlin
Description: 
	More: https://aceu19.apachecon.com/session/apache-mynewt-asfs-embedded-os-project

Apache Mynewt is an operating system for low powered embedded systems based on 32-bit microcontrollers. At the core, it is a small pre-emptive RTOS and an extensive set of modules for connectivity, file systems, power and performance management options and lots more. It is a highly flexible, responsive, general purpose OS for constrained devices, think of it as embedded Linux for devices that can’t run Linux. Features include a secure bootloader, image management, hardware abstraction, instrumentation for stats and logs. This makes it easy to go from prototype to production when using Apache Mynewt without having to reinvent the wheel.
Captions: 
	00:00:04,410 --> 00:00:11,280
I hope you having a good second day of

00:00:07,500 --> 00:00:12,450
the conference and yeah we can make this

00:00:11,280 --> 00:00:14,190
a little more interactive if you've got

00:00:12,450 --> 00:00:15,590
any questions that you want at any time

00:00:14,190 --> 00:00:17,640
just stick your hand up and ask them

00:00:15,590 --> 00:00:21,329
doesn't just have to be me standing at

00:00:17,640 --> 00:00:24,270
the front reading my slide sir I'm just

00:00:21,329 --> 00:00:25,849
a little bit about Who I am as I was

00:00:24,270 --> 00:00:28,529
introduced on my name is Justin mcclain

00:00:25,849 --> 00:00:32,700
as you can probably tell from my accent

00:00:28,529 --> 00:00:34,230
I'm from Sydney Australia and I've been

00:00:32,700 --> 00:00:36,960
involved in the ASF for about eight

00:00:34,230 --> 00:00:40,410
years in a number of roles I'm

00:00:36,960 --> 00:00:42,960
interested in IOT and that sort of space

00:00:40,410 --> 00:00:44,130
and I actually started the i/o to meet

00:00:42,960 --> 00:00:48,450
up in Sydney Australia which I've been

00:00:44,130 --> 00:00:50,940
running for six years now I'm at Apache

00:00:48,450 --> 00:00:53,580
I'm currently the VP of the Apache

00:00:50,940 --> 00:00:56,370
Incubator so if you are on an incubating

00:00:53,580 --> 00:00:59,400
project does anyone here hey have I

00:00:56,370 --> 00:01:02,280
voted on one of your releases yeah I

00:00:59,400 --> 00:01:07,740
probably have and that made me the minus

00:01:02,280 --> 00:01:09,179
1/2 man not a little bit anyway so yeah

00:01:07,740 --> 00:01:11,069
so through the Apache Incubator I've

00:01:09,179 --> 00:01:15,299
helped mentor a whole lot of projects

00:01:11,069 --> 00:01:18,420
and we have some more people arriving

00:01:15,299 --> 00:01:19,200
which is good hi welcome come down the

00:01:18,420 --> 00:01:25,799
front grab a seat

00:01:19,200 --> 00:01:27,780
we've only just started so yeah and I'm

00:01:25,799 --> 00:01:30,119
into a whole lot of the projects and I'm

00:01:27,780 --> 00:01:31,530
not actually I'm self-employed I work

00:01:30,119 --> 00:01:34,139
for myself and I've had done so for

00:01:31,530 --> 00:01:35,429
about 25 years so I don't work for any

00:01:34,139 --> 00:01:38,069
big companies or anything like that

00:01:35,429 --> 00:01:42,030
but that gives me the chance to work on

00:01:38,069 --> 00:01:43,709
a lot of many and very things so anyway

00:01:42,030 --> 00:01:47,520
Apache minut is what we're talking about

00:01:43,709 --> 00:01:51,299
today that's decided not to work that's

00:01:47,520 --> 00:01:51,689
fine so minut is a bit of a play on

00:01:51,299 --> 00:01:54,509
words

00:01:51,689 --> 00:01:56,999
my new - means small and there's also

00:01:54,509 --> 00:02:00,349
has the salamander the newt lizard

00:01:56,999 --> 00:02:02,639
that's that's there as part of its logo

00:02:00,349 --> 00:02:10,349
got more people arriving if they found

00:02:02,639 --> 00:02:12,810
where it is welcome so just an overview

00:02:10,349 --> 00:02:14,400
of what minut actually is so it's a

00:02:12,810 --> 00:02:16,170
real-time operating system and I assume

00:02:14,400 --> 00:02:17,580
everyone here knows what they are that's

00:02:16,170 --> 00:02:18,150
you probably wouldn't be at this talk if

00:02:17,580 --> 00:02:20,730
you

00:02:18,150 --> 00:02:22,860
if you didn't um and it's for low

00:02:20,730 --> 00:02:27,780
powered constrained devices

00:02:22,860 --> 00:02:37,590
so generally 32-bit chips think of it as

00:02:27,780 --> 00:02:40,799
Linux oh okay you went to the robot um

00:02:37,590 --> 00:02:43,409
so you can think of it as a framework

00:02:40,799 --> 00:02:46,579
that gives you Linux like features on

00:02:43,409 --> 00:02:50,160
devices that can't actually run Linux

00:02:46,579 --> 00:02:52,379
and in the sort of embedded space that

00:02:50,160 --> 00:02:54,569
there's sort of two classes of devices

00:02:52,379 --> 00:02:57,000
there's ones which you have plugged into

00:02:54,569 --> 00:03:00,030
the power all the time well have you

00:02:57,000 --> 00:03:01,620
know decent batteries so you know they

00:03:00,030 --> 00:03:03,409
don't have to and then these these other

00:03:01,620 --> 00:03:06,780
ones that are usually the sort of the

00:03:03,409 --> 00:03:09,269
more I guess dumb sensor types that you

00:03:06,780 --> 00:03:12,810
live out in the field for six months and

00:03:09,269 --> 00:03:14,459
with those the the battery life is a

00:03:12,810 --> 00:03:16,620
very big consecutive consideration

00:03:14,459 --> 00:03:18,060
because you often don't have means to

00:03:16,620 --> 00:03:21,150
recharge the battery will replace the

00:03:18,060 --> 00:03:22,440
battery whatever enough you know so it

00:03:21,150 --> 00:03:25,380
can't just run for a couple of hours and

00:03:22,440 --> 00:03:28,290
then be flat um so mine you just sort of

00:03:25,380 --> 00:03:29,760
aimed more at that space and we'll get

00:03:28,290 --> 00:03:32,639
into some of the reasons why and the

00:03:29,760 --> 00:03:36,150
details there um it is a permissive open

00:03:32,639 --> 00:03:38,010
source license and at the time when the

00:03:36,150 --> 00:03:39,720
project came to Apache that was quite

00:03:38,010 --> 00:03:41,910
new there were there are other real-time

00:03:39,720 --> 00:03:44,280
operating systems around but that would

00:03:41,910 --> 00:03:45,930
generally under the license of here's

00:03:44,280 --> 00:03:48,480
one you can use for non-commercial

00:03:45,930 --> 00:03:49,739
projects and that's free and if you want

00:03:48,480 --> 00:03:52,980
to use it for a commercial project then

00:03:49,739 --> 00:03:54,329
you got to pay for it and so so this is

00:03:52,980 --> 00:03:57,299
one of the reasons why this program

00:03:54,329 --> 00:04:01,169
exists it's also been designed from the

00:03:57,299 --> 00:04:03,629
ground up to be cross-platform some of

00:04:01,169 --> 00:04:05,609
the other artists have evolved over

00:04:03,629 --> 00:04:08,549
years and they've sort of built layers

00:04:05,609 --> 00:04:10,379
upon layers upon layers and done other

00:04:08,549 --> 00:04:12,299
different things to make them work on

00:04:10,379 --> 00:04:16,260
different platforms if they do some of

00:04:12,299 --> 00:04:17,609
them don't and it it's been built in

00:04:16,260 --> 00:04:19,530
from the scratch and they've put a lot

00:04:17,609 --> 00:04:21,389
of thought into there and the other

00:04:19,530 --> 00:04:23,490
thing is that security is not an

00:04:21,389 --> 00:04:26,430
afterthought it's been built in from

00:04:23,490 --> 00:04:28,050
from the start as well unlike some of

00:04:26,430 --> 00:04:30,570
the other artists is that security has

00:04:28,050 --> 00:04:32,070
been editor afterwards um sometimes to

00:04:30,570 --> 00:04:34,560
good effect and sometimes

00:04:32,070 --> 00:04:37,890
or not and it's got a quite a simple

00:04:34,560 --> 00:04:43,080
programming model it's not horribly

00:04:37,890 --> 00:04:44,280
abstract so people who you can get used

00:04:43,080 --> 00:04:45,510
to a straight away and get things

00:04:44,280 --> 00:04:48,260
happening and I'll show you some code

00:04:45,510 --> 00:04:54,360
examples so you can see what's going on

00:04:48,260 --> 00:04:57,390
now when minut came to apache they had a

00:04:54,360 --> 00:05:00,270
large number of third-party dependencies

00:04:57,390 --> 00:05:02,160
and a large number of pieces of

00:05:00,270 --> 00:05:04,140
third-party code in in their software

00:05:02,160 --> 00:05:05,940
and they were all under different

00:05:04,140 --> 00:05:07,320
licenses though there's a lot of

00:05:05,940 --> 00:05:10,350
licenses which are compatible with the

00:05:07,320 --> 00:05:13,860
apache license like MIT and bsd for

00:05:10,350 --> 00:05:16,230
example it to two good ones but not all

00:05:13,860 --> 00:05:19,620
of them were there and one of the things

00:05:16,230 --> 00:05:21,420
the project did really well was speaking

00:05:19,620 --> 00:05:23,160
to vendors and asking them to relicense

00:05:21,420 --> 00:05:26,580
their software under a license that was

00:05:23,160 --> 00:05:27,930
more permissive with apache and that

00:05:26,580 --> 00:05:29,310
means they could they could go up and

00:05:27,930 --> 00:05:32,100
use these existing software that was

00:05:29,310 --> 00:05:33,750
already there but it didn't have a

00:05:32,100 --> 00:05:36,390
compatible license until they asked for

00:05:33,750 --> 00:05:38,640
it to get changed so it everything is

00:05:36,390 --> 00:05:40,590
now apache licensed and it's free to use

00:05:38,640 --> 00:05:41,610
and the you know just about you can use

00:05:40,590 --> 00:05:43,380
it for just about anything you want to

00:05:41,610 --> 00:05:44,700
use in a commercial project you can if

00:05:43,380 --> 00:05:47,010
you want to use it for your own things

00:05:44,700 --> 00:05:48,360
you can you've just got to say that it's

00:05:47,010 --> 00:05:53,760
under the way apache license and that's

00:05:48,360 --> 00:05:55,200
that's so they had a choice of a couple

00:05:53,760 --> 00:05:58,170
of foundations so they thought they

00:05:55,200 --> 00:06:00,060
might go to um at this point the apache

00:05:58,170 --> 00:06:02,970
software foundation didn't really have

00:06:00,060 --> 00:06:04,470
any ayat east oil projects warren

00:06:02,970 --> 00:06:07,620
definitely didn't have any embedded

00:06:04,470 --> 00:06:09,030
projects either and there was a number

00:06:07,620 --> 00:06:10,920
of reasons that they decided to come to

00:06:09,030 --> 00:06:12,540
the ASF and the first thing was the

00:06:10,920 --> 00:06:16,500
apache license and that it is permissive

00:06:12,540 --> 00:06:22,710
um it was also the way that we look at

00:06:16,500 --> 00:06:24,330
software and IP policy we will make go

00:06:22,710 --> 00:06:26,490
through and look at every single line of

00:06:24,330 --> 00:06:30,680
code and make sure we know where that

00:06:26,490 --> 00:06:34,080
came from so they also like that they do

00:06:30,680 --> 00:06:36,900
not you're not a company that joins the

00:06:34,080 --> 00:06:39,290
ISF you join as individuals and anyone

00:06:36,900 --> 00:06:41,820
can contribute and free to contribute

00:06:39,290 --> 00:06:43,260
which is the model that they wanted

00:06:41,820 --> 00:06:45,480
because they didn't want to end up this

00:06:43,260 --> 00:06:47,430
there was a one

00:06:45,480 --> 00:06:49,710
a company that donated the codebase they

00:06:47,430 --> 00:06:52,140
didn't want to be the sole owners of the

00:06:49,710 --> 00:06:56,220
code and they also liked the fact that

00:06:52,140 --> 00:06:58,200
the ASF had a very successful run of

00:06:56,220 --> 00:07:02,010
projects we'd been around for almost 20

00:06:58,200 --> 00:07:03,870
years and there were you know 50

00:07:02,010 --> 00:07:05,430
products in the incubator at any one

00:07:03,870 --> 00:07:09,650
point and most of those make it to

00:07:05,430 --> 00:07:12,780
graduate um they also like that

00:07:09,650 --> 00:07:15,060
companies can't buy board seats that the

00:07:12,780 --> 00:07:18,120
board members are actually elected by

00:07:15,060 --> 00:07:19,710
the ASF members at large and so that

00:07:18,120 --> 00:07:22,080
everyone you know gets a fair and even

00:07:19,710 --> 00:07:23,520
say say and most of all they like the

00:07:22,080 --> 00:07:24,840
fact that it was for the public good and

00:07:23,520 --> 00:07:27,990
that's what they want to do they want to

00:07:24,840 --> 00:07:31,020
do actually they've already created this

00:07:27,990 --> 00:07:32,490
software a code base and they had used

00:07:31,020 --> 00:07:34,560
it in some commercial project projects

00:07:32,490 --> 00:07:36,030
and they've made money out of it but

00:07:34,560 --> 00:07:37,560
they thought well maybe it's we should

00:07:36,030 --> 00:07:39,270
actually you know give it back and then

00:07:37,560 --> 00:07:45,140
see what other people can do with it and

00:07:39,270 --> 00:07:48,330
see what they can use so the project

00:07:45,140 --> 00:07:50,940
went through an incubation process and

00:07:48,330 --> 00:07:53,610
that's what almost all projects to at

00:07:50,940 --> 00:07:55,290
the Apache Software Foundation and

00:07:53,610 --> 00:07:57,990
basically that we go through the process

00:07:55,290 --> 00:07:59,730
to make sure that everything's

00:07:57,990 --> 00:08:03,180
compatible with the Apache License and

00:07:59,730 --> 00:08:04,170
the project operates how Apache projects

00:08:03,180 --> 00:08:06,600
should operate there's this thing called

00:08:04,170 --> 00:08:07,800
the Apache way and that's what they need

00:08:06,600 --> 00:08:09,750
to follow and sometimes it takes a

00:08:07,800 --> 00:08:11,670
little while to work that out each

00:08:09,750 --> 00:08:15,390
project is different and they have

00:08:11,670 --> 00:08:18,420
different challenges that they may faced

00:08:15,390 --> 00:08:24,240
and there's not always one right answer

00:08:18,420 --> 00:08:26,670
to a problem so so basically we want to

00:08:24,240 --> 00:08:30,060
make sure that people who contribute are

00:08:26,670 --> 00:08:32,070
recognized to in the project and that

00:08:30,060 --> 00:08:34,440
all the decision-making is done in the

00:08:32,070 --> 00:08:37,290
open and we want people to act as

00:08:34,440 --> 00:08:39,720
individuals but not as companies there's

00:08:37,290 --> 00:08:41,070
a couple more Apache way talks at this

00:08:39,720 --> 00:08:42,780
conference you should go along to one of

00:08:41,070 --> 00:08:47,070
those if you're more interested in it

00:08:42,780 --> 00:08:48,540
and if you issues in the the incubator

00:08:47,070 --> 00:08:52,950
I'm also giving another talk tomorrow on

00:08:48,540 --> 00:08:54,690
the incubator so a brief history of the

00:08:52,950 --> 00:08:56,400
project it got donated proposed by a

00:08:54,690 --> 00:08:59,150
company called run time it entered

00:08:56,400 --> 00:09:01,700
incubation in November 2015

00:08:59,150 --> 00:09:03,440
and it was there for about a year and a

00:09:01,700 --> 00:09:07,670
half and got voted in as a top level

00:09:03,440 --> 00:09:09,380
project in June 2017 it made several

00:09:07,670 --> 00:09:14,360
releases where it was any incubation

00:09:09,380 --> 00:09:18,950
that's 1.1 1.2 1.3 1.4 1.5 and they've

00:09:14,360 --> 00:09:21,380
just recently made a new 1.7 release and

00:09:18,950 --> 00:09:23,029
they've actually split the main project

00:09:21,380 --> 00:09:25,820
into two projects and I'll go a little

00:09:23,029 --> 00:09:28,490
bit into that you know in a minute

00:09:25,820 --> 00:09:30,200
this is the the main repo here and shows

00:09:28,490 --> 00:09:31,339
the project stats over time so you can

00:09:30,200 --> 00:09:34,520
see that it's quite an active project

00:09:31,339 --> 00:09:36,980
it's probably not as busy as say spark

00:09:34,520 --> 00:09:39,710
or Hadoop or one of those projects but

00:09:36,980 --> 00:09:41,480
it's got you know a lot of contributions

00:09:39,710 --> 00:09:43,430
over time from lots of different people

00:09:41,480 --> 00:09:45,380
and it's constantly being worked on and

00:09:43,430 --> 00:09:55,660
updated and new features are being added

00:09:45,380 --> 00:09:57,980
as well sorry I I would say number of

00:09:55,660 --> 00:09:59,300
contributions a week number pull request

00:09:57,980 --> 00:10:00,680
something like that at a guess I don't

00:09:59,300 --> 00:10:03,490
know I just copied it off github and I

00:10:00,680 --> 00:10:09,709
can't remember what what the y-axis was

00:10:03,490 --> 00:10:12,550
so it's a pretty graph yes sorry I'll

00:10:09,709 --> 00:10:15,950
make sure I'll put some labels on those

00:10:12,550 --> 00:10:18,020
so what is ma nood and what does it do

00:10:15,950 --> 00:10:20,120
so it's a real-time operating system and

00:10:18,020 --> 00:10:22,400
it's got a number of features built into

00:10:20,120 --> 00:10:24,500
it so it has very good power management

00:10:22,400 --> 00:10:27,589
I'll talk a little bit about that later

00:10:24,500 --> 00:10:31,550
it has watchdog features so this means

00:10:27,589 --> 00:10:33,110
that if the if you you write your code

00:10:31,550 --> 00:10:35,330
and it doesn't do the right thing and

00:10:33,110 --> 00:10:37,670
the device ends up you know dying or

00:10:35,330 --> 00:10:39,260
turning into a brick the watchdog will

00:10:37,670 --> 00:10:42,320
reboot it and start it up again and

00:10:39,260 --> 00:10:45,110
hopefully that won't happen again you

00:10:42,320 --> 00:10:47,600
know it's it's it's just this little

00:10:45,110 --> 00:10:49,910
extra safety thing um it takes security

00:10:47,600 --> 00:10:52,160
very seriously and it has a secure boot

00:10:49,910 --> 00:10:54,950
loader and a secure way of updating

00:10:52,160 --> 00:10:56,870
images as well and it's got several

00:10:54,950 --> 00:10:57,980
different mechanisms that you can use

00:10:56,870 --> 00:11:00,500
for that and I'll go into those in a

00:10:57,980 --> 00:11:02,750
little bit detail um it's actually quite

00:11:00,500 --> 00:11:06,650
programmer friendly in that it's very

00:11:02,750 --> 00:11:09,260
easy to bug and build and it gives you a

00:11:06,650 --> 00:11:11,540
lot of stats and statistics and logging

00:11:09,260 --> 00:11:12,950
details about what's going on and you

00:11:11,540 --> 00:11:14,270
can filter these down and

00:11:12,950 --> 00:11:17,480
focus on just you know the things that

00:11:14,270 --> 00:11:20,750
you're interested in but that will it

00:11:17,480 --> 00:11:22,910
makes programming it quite easy compared

00:11:20,750 --> 00:11:26,590
to some other systems and also has a

00:11:22,910 --> 00:11:28,910
flash file system as well so you can

00:11:26,590 --> 00:11:29,900
write files out will read files in and

00:11:28,910 --> 00:11:31,910
do all that

00:11:29,900 --> 00:11:33,470
whatever you need there and there's a

00:11:31,910 --> 00:11:36,050
there's a couple of those that they've

00:11:33,470 --> 00:11:39,560
implemented so what does the code look

00:11:36,050 --> 00:11:41,600
like so this is a most simple this is

00:11:39,560 --> 00:11:45,740
sort of the IOT hello world which is

00:11:41,600 --> 00:11:47,570
make a LED blink so you can see there's

00:11:45,740 --> 00:11:49,100
just a main program you can see that

00:11:47,570 --> 00:11:51,410
it's C so that's probably the first

00:11:49,100 --> 00:11:53,780
thing and then we've got a system in it

00:11:51,410 --> 00:11:56,410
at the top to initialize everything we

00:11:53,780 --> 00:11:59,150
then have a general purpose i/o pin

00:11:56,410 --> 00:12:02,240
which is in this case a LED pin and then

00:11:59,150 --> 00:12:03,800
we just wait for some amount of time and

00:12:02,240 --> 00:12:06,200
then we just toggle that pin and just

00:12:03,800 --> 00:12:07,610
loop forever doing that so that just

00:12:06,200 --> 00:12:10,640
links so that sort of shows you how

00:12:07,610 --> 00:12:13,520
simple the programming model is and like

00:12:10,640 --> 00:12:15,710
it's not very exciting program just

00:12:13,520 --> 00:12:20,780
linking a lid on over off but you gotta

00:12:15,710 --> 00:12:23,960
start somewhere so um it has

00:12:20,780 --> 00:12:26,060
multitasking built in from start has

00:12:23,960 --> 00:12:30,110
anyone here used to program back in

00:12:26,060 --> 00:12:33,800
Windows 95 days no do you remember the

00:12:30,110 --> 00:12:35,840
non pre-emptive multitasking yeah yes a

00:12:33,800 --> 00:12:39,050
couple of nods yeah okay so basically

00:12:35,840 --> 00:12:41,810
the this programming style is that once

00:12:39,050 --> 00:12:43,700
you're once a thread has control it can

00:12:41,810 --> 00:12:46,270
do anything it wants and nothing else

00:12:43,700 --> 00:12:49,130
gets a look in until it gives up control

00:12:46,270 --> 00:12:50,870
so you've got to be a little bit careful

00:12:49,130 --> 00:12:52,070
in programming this way because if you

00:12:50,870 --> 00:12:54,760
managed to put something in an endless

00:12:52,070 --> 00:12:57,950
loop then nothing else is going to run

00:12:54,760 --> 00:12:59,930
but it does mean that you don't have to

00:12:57,950 --> 00:13:03,050
worry about a whole lot of problems that

00:12:59,930 --> 00:13:04,490
come with multitasking it means that you

00:13:03,050 --> 00:13:06,880
you know while this bit of code is

00:13:04,490 --> 00:13:09,500
running no other code is running so

00:13:06,880 --> 00:13:11,870
that's actually it particularly in small

00:13:09,500 --> 00:13:15,020
constrained systems that simplifies your

00:13:11,870 --> 00:13:18,500
architecture considerably and it makes

00:13:15,020 --> 00:13:20,060
it quite easy so we have basic a whole

00:13:18,500 --> 00:13:23,300
lot of tasks and they're priority based

00:13:20,060 --> 00:13:25,130
so there's 250 levels and basically the

00:13:23,300 --> 00:13:26,550
highest one runs and it will keep

00:13:25,130 --> 00:13:28,350
running until it stops

00:13:26,550 --> 00:13:31,350
running and you'd say you put it to

00:13:28,350 --> 00:13:34,010
sleep and then it looks at the next one

00:13:31,350 --> 00:13:39,089
and then that will run and and so forth

00:13:34,010 --> 00:13:42,959
um the task can be triggered to run in

00:13:39,089 --> 00:13:45,630
certain ways you can make them so that

00:13:42,959 --> 00:13:47,700
they ran say yeah run this every minute

00:13:45,630 --> 00:13:51,180
we'll run this every ten minutes but you

00:13:47,700 --> 00:13:55,820
can also say when something happens like

00:13:51,180 --> 00:13:59,130
this pin changes value run this task or

00:13:55,820 --> 00:14:02,250
when we get some network traffic run

00:13:59,130 --> 00:14:03,899
this task and and things like that the

00:14:02,250 --> 00:14:05,459
tasks can also communicate between each

00:14:03,899 --> 00:14:08,490
other with the messaging so you can have

00:14:05,459 --> 00:14:11,279
other tasks wake up another another task

00:14:08,490 --> 00:14:13,230
and make it run as well and there's also

00:14:11,279 --> 00:14:15,120
a special watchdog task as well so that

00:14:13,230 --> 00:14:18,870
can can run when the watchdog gets

00:14:15,120 --> 00:14:21,990
triggered all of these tasks have quite

00:14:18,870 --> 00:14:24,810
extensive debug information and you can

00:14:21,990 --> 00:14:26,790
set the stack of each one and you can

00:14:24,810 --> 00:14:28,019
see how much memory each task is

00:14:26,790 --> 00:14:30,240
consuming as well from the debug

00:14:28,019 --> 00:14:33,480
information which is really really handy

00:14:30,240 --> 00:14:37,680
it also has stack overflow protection as

00:14:33,480 --> 00:14:38,970
well for each of the tasks it won't save

00:14:37,680 --> 00:14:40,890
you if you do something really really

00:14:38,970 --> 00:14:42,660
bad but if it's just something goes

00:14:40,890 --> 00:14:44,070
slightly wrong then the device will keep

00:14:42,660 --> 00:14:45,510
running and keep working even though

00:14:44,070 --> 00:14:52,440
you've managed to go off the end of the

00:14:45,510 --> 00:14:54,529
stack so this is the code to create a

00:14:52,440 --> 00:14:57,540
little task and again we've just got

00:14:54,529 --> 00:15:03,079
this is just setting up the task here so

00:14:57,540 --> 00:15:06,420
we have here a stack you give it a size

00:15:03,079 --> 00:15:10,079
we've initialized the GPO general

00:15:06,420 --> 00:15:11,910
purpose i/o pin again and then we

00:15:10,079 --> 00:15:14,820
basically do exactly the same thing and

00:15:11,910 --> 00:15:17,010
you can just see that it's it's just

00:15:14,820 --> 00:15:18,930
called my task function so you just

00:15:17,010 --> 00:15:20,699
create a function and that can turns it

00:15:18,930 --> 00:15:23,399
into a task and then to set it up

00:15:20,699 --> 00:15:25,199
there's a oh s task in it which you call

00:15:23,399 --> 00:15:26,540
I need just got to pass some some

00:15:25,199 --> 00:15:29,910
parameters there including the

00:15:26,540 --> 00:15:32,310
structured that you've made for the task

00:15:29,910 --> 00:15:35,130
and the stack and the the function that

00:15:32,310 --> 00:15:37,470
you want to call and that's basically it

00:15:35,130 --> 00:15:39,690
so in this case we're saying well we're

00:15:37,470 --> 00:15:40,380
just going to wait have it wait forever

00:15:39,690 --> 00:15:43,410
so it

00:15:40,380 --> 00:15:45,540
we be around forever so again this is

00:15:43,410 --> 00:15:48,510
this very simple programming model that

00:15:45,540 --> 00:15:51,090
it's it's very easy to get into and not

00:15:48,510 --> 00:15:53,130
complex and you can quite easily put a

00:15:51,090 --> 00:15:56,130
whole lot of tasks together to you know

00:15:53,130 --> 00:16:01,800
do what you you need to do have any

00:15:56,130 --> 00:16:04,830
questions so I said before that it works

00:16:01,800 --> 00:16:06,450
on a large number of devices so there's

00:16:04,830 --> 00:16:08,670
a hardware abstraction layer that

00:16:06,450 --> 00:16:10,980
they've built in and that's implemented

00:16:08,670 --> 00:16:15,750
implemented for every single major

00:16:10,980 --> 00:16:18,210
chipset that it's on and it's a standard

00:16:15,750 --> 00:16:20,160
API so you've got just to implement the

00:16:18,210 --> 00:16:22,200
other the low-level bits underneath that

00:16:20,160 --> 00:16:23,280
to get it working on a new chip so it

00:16:22,200 --> 00:16:25,830
means that you've already gathered on

00:16:23,280 --> 00:16:26,850
one family of chips and if you want to

00:16:25,830 --> 00:16:29,550
port it to something that's similar

00:16:26,850 --> 00:16:33,180
there's not a lot of work required and

00:16:29,550 --> 00:16:34,890
it also means that if you are running on

00:16:33,180 --> 00:16:36,630
one plan for them and decide that for

00:16:34,890 --> 00:16:38,520
whatever reason that's not the hardware

00:16:36,630 --> 00:16:39,990
platform for you you can very easily

00:16:38,520 --> 00:16:42,210
move to another one and none of your

00:16:39,990 --> 00:16:45,240
code changes the code is all identical

00:16:42,210 --> 00:16:47,040
on on the both platforms you know you

00:16:45,240 --> 00:16:49,860
may have to change a few things because

00:16:47,040 --> 00:16:52,020
the hardware is is different well has

00:16:49,860 --> 00:16:54,270
different features or different pins or

00:16:52,020 --> 00:16:57,660
whatever you know but it's it's minimal

00:16:54,270 --> 00:16:58,980
work to do that so I'm top of the

00:16:57,660 --> 00:17:02,010
hardware abstraction layer there's

00:16:58,980 --> 00:17:04,860
actually drivers and the drivers are

00:17:02,010 --> 00:17:06,240
there so that they can support a couple

00:17:04,860 --> 00:17:09,270
of features including the power

00:17:06,240 --> 00:17:11,370
management so it means that every time

00:17:09,270 --> 00:17:12,689
you talk to the hardware it's aware of

00:17:11,370 --> 00:17:15,120
all the pennies power management

00:17:12,689 --> 00:17:16,860
features and that can you know turn

00:17:15,120 --> 00:17:18,300
things on when they are off when they're

00:17:16,860 --> 00:17:21,329
not required will put things to sleep

00:17:18,300 --> 00:17:23,930
when they're not needed and then on top

00:17:21,329 --> 00:17:26,640
of those drivers is a sensor framework

00:17:23,930 --> 00:17:28,860
so it's nice and hierarchical that's

00:17:26,640 --> 00:17:31,650
fairly simple it's not horribly abstract

00:17:28,860 --> 00:17:36,060
as I said like some other real-time who

00:17:31,650 --> 00:17:41,670
here has used say ti artists anyone do

00:17:36,060 --> 00:17:47,720
you like it yes that's my feeling - yeah

00:17:41,670 --> 00:17:50,150
it's really overly complex and abstract

00:17:47,720 --> 00:17:53,160
yeah

00:17:50,150 --> 00:17:54,960
now I it works very well with the

00:17:53,160 --> 00:17:56,280
hardware that I mean it's a single

00:17:54,960 --> 00:17:58,560
vendor who makes the hardware and makes

00:17:56,280 --> 00:18:01,170
the art also they do work pretty well

00:17:58,560 --> 00:18:06,090
together but yeah trying to get your

00:18:01,170 --> 00:18:09,840
head around some of it is yeah I'll talk

00:18:06,090 --> 00:18:11,100
to you afterwards about it so so yeah so

00:18:09,840 --> 00:18:13,650
what boards does it support

00:18:11,100 --> 00:18:15,210
well I currently supports a quite a

00:18:13,650 --> 00:18:18,690
number of boards but these are the main

00:18:15,210 --> 00:18:20,790
ones so it supports the cortex m0 to m4

00:18:18,690 --> 00:18:22,740
and m7 microcontrollers are people

00:18:20,790 --> 00:18:24,630
familiar with us we've heard of those

00:18:22,740 --> 00:18:26,940
few nods maybe not

00:18:24,630 --> 00:18:35,460
they have general-purpose low-power

00:18:26,940 --> 00:18:36,780
devices there is the most most embedded

00:18:35,460 --> 00:18:40,650
electronics these days would use of

00:18:36,780 --> 00:18:42,930
cortex-m X of something it's the they

00:18:40,650 --> 00:18:47,820
ship billions of them a year um it also

00:18:42,930 --> 00:18:49,560
run on MIPS and risk v as well so um but

00:18:47,820 --> 00:18:52,830
there's other stuff it runs on it'll run

00:18:49,560 --> 00:18:54,270
on STM boards the an STM chips there's a

00:18:52,830 --> 00:18:57,180
new kilo chips

00:18:54,270 --> 00:18:59,490
do you know Adafruit for the environment

00:18:57,180 --> 00:19:00,840
it'll run on those as well runs at a

00:18:59,490 --> 00:19:04,710
whole lot of Nordic semiconductor

00:19:00,840 --> 00:19:06,570
there's a Bluetooth device called the

00:19:04,710 --> 00:19:07,830
ruvi which is a quite quite an

00:19:06,570 --> 00:19:10,650
interesting device it will run on that

00:19:07,830 --> 00:19:13,770
as well it will run on some high ended

00:19:10,650 --> 00:19:15,870
Reno's and raspberry PI's and mock

00:19:13,770 --> 00:19:17,070
rabbits as well so if you've got a

00:19:15,870 --> 00:19:19,890
couple of those devices lying around

00:19:17,070 --> 00:19:21,930
there's most hobbyists to then you can

00:19:19,890 --> 00:19:23,580
go ahead and start playing with my new

00:19:21,930 --> 00:19:27,960
and not having to buy a new hardware

00:19:23,580 --> 00:19:30,780
platform um the main area of

00:19:27,960 --> 00:19:32,840
functionality is around Bluetooth and

00:19:30,780 --> 00:19:37,350
it's got comprehensive Bluetooth support

00:19:32,840 --> 00:19:40,020
it supports Bluetooth 4.2 and five and

00:19:37,350 --> 00:19:43,140
it supports all of those features that

00:19:40,020 --> 00:19:44,580
are there so you can have the entire

00:19:43,140 --> 00:19:46,800
Bluetooth stack and do absolutely

00:19:44,580 --> 00:19:48,900
everything which is a huge amount of a

00:19:46,800 --> 00:19:52,430
knife anyway looked into the full

00:19:48,900 --> 00:19:56,040
features head of Bluetooth it does lots

00:19:52,430 --> 00:19:58,530
yeah so but you can just make it as a

00:19:56,040 --> 00:20:01,290
host or a controller it will support up

00:19:58,530 --> 00:20:02,560
to 32 connections 2 megabits per second

00:20:01,290 --> 00:20:05,170
throughput

00:20:02,560 --> 00:20:07,360
it's pretty good and it's totally

00:20:05,170 --> 00:20:09,790
tunable so if there are features that

00:20:07,360 --> 00:20:12,610
you don't want you just don't use them

00:20:09,790 --> 00:20:14,890
and they're not included in the code and

00:20:12,610 --> 00:20:17,290
it's also portable in that you can be

00:20:14,890 --> 00:20:19,120
using say Nordics Bluetooth chip one

00:20:17,290 --> 00:20:21,100
week and another one the next week and

00:20:19,120 --> 00:20:23,770
the code exactly the same it all still

00:20:21,100 --> 00:20:27,250
works so I'll just show you a little bit

00:20:23,770 --> 00:20:29,590
example of here this is this is probably

00:20:27,250 --> 00:20:32,170
the base most simplest bluetooth for the

00:20:29,590 --> 00:20:34,570
code you can get it can be a lot more

00:20:32,170 --> 00:20:38,350
complex than than this

00:20:34,570 --> 00:20:40,930
basically this is just broadcasting a

00:20:38,350 --> 00:20:42,220
number on bluetooth and then if you put

00:20:40,930 --> 00:20:44,320
your phone near it it would pick up what

00:20:42,220 --> 00:20:50,260
the number was that's and the number is

00:20:44,320 --> 00:20:57,490
just random basically there so and if we

00:20:50,260 --> 00:20:59,500
just go to the next page here we go

00:20:57,490 --> 00:21:02,680
alright so here we've got here is that

00:20:59,500 --> 00:21:04,390
we've we're basically creating a UUID so

00:21:02,680 --> 00:21:10,060
that's just a random string we're just

00:21:04,390 --> 00:21:12,040
filling it full here of 11 which is well

00:21:10,060 --> 00:21:14,980
we're just fooling a full of a single

00:21:12,040 --> 00:21:17,500
value and then we're setting it up as a

00:21:14,980 --> 00:21:20,350
Bluetooth beacon and then we're just

00:21:17,500 --> 00:21:24,130
advertising that and that's yeah it's a

00:21:20,350 --> 00:21:27,070
few lines of code to do that and you can

00:21:24,130 --> 00:21:28,180
do more than that but that's that's sort

00:21:27,070 --> 00:21:29,410
of the start of it and again to just

00:21:28,180 --> 00:21:34,830
show you how simple the programming

00:21:29,410 --> 00:21:37,750
model is there is also support for Wi-Fi

00:21:34,830 --> 00:21:40,270
it doesn't support high speed Wi-Fi

00:21:37,750 --> 00:21:43,600
currently but it does have native

00:21:40,270 --> 00:21:46,990
support for tcp/ip and UDP built in to

00:21:43,600 --> 00:21:48,430
it and it supports some of the IOT type

00:21:46,990 --> 00:21:52,120
protocols that are built on top of this

00:21:48,430 --> 00:21:57,010
as well so ok app for example is is one

00:21:52,120 --> 00:21:59,380
of them there's a couple of files file

00:21:57,010 --> 00:22:03,070
systems there's a thing called a neutron

00:21:59,380 --> 00:22:07,600
file flash system and it's designed to

00:22:03,070 --> 00:22:10,570
be like the standard sort of I think

00:22:07,600 --> 00:22:13,090
think fat32 type file system but it's

00:22:10,570 --> 00:22:16,870
optimized so that it uses minimal amount

00:22:13,090 --> 00:22:18,430
of RAM and it it doesn't do it minimizes

00:22:16,870 --> 00:22:19,960
disk use as well because you're not

00:22:18,430 --> 00:22:21,190
actually writing to a physical hard disk

00:22:19,960 --> 00:22:23,410
here you're actually writing to a bit of

00:22:21,190 --> 00:22:26,080
memory and most of the this flash memory

00:22:23,410 --> 00:22:27,460
can only be written to a certain number

00:22:26,080 --> 00:22:28,750
of times before it stops working there

00:22:27,460 --> 00:22:30,490
hundreds of thousands of times more

00:22:28,750 --> 00:22:32,860
millions of times but eventually it's

00:22:30,490 --> 00:22:34,270
gonna stop working so you want to make

00:22:32,860 --> 00:22:36,100
sure that you don't do that

00:22:34,270 --> 00:22:38,260
um they're still doing work on

00:22:36,100 --> 00:22:39,430
encryption and compression in there but

00:22:38,260 --> 00:22:43,570
there's been some work that's been done

00:22:39,430 --> 00:22:45,880
on that I mentioned before that there's

00:22:43,570 --> 00:22:49,150
a sensor framework that sits on top of

00:22:45,880 --> 00:22:51,010
the driver and the hell and that just

00:22:49,150 --> 00:22:53,110
makes things easy for sensors to work

00:22:51,010 --> 00:22:57,010
with and we're getting people who are

00:22:53,110 --> 00:22:58,270
donating more sensors you know every few

00:22:57,010 --> 00:22:59,740
weeks there's someone else who comes up

00:22:58,270 --> 00:23:01,929
and says oh I've got this this Center to

00:22:59,740 --> 00:23:03,280
work now so that makes it easy so

00:23:01,929 --> 00:23:06,340
there's a lot of common sensors that

00:23:03,280 --> 00:23:08,140
have already been been implemented so

00:23:06,340 --> 00:23:09,400
chances are as if you you know you're

00:23:08,140 --> 00:23:10,780
working with an accelerometer where

00:23:09,400 --> 00:23:13,120
you're working with you know say a

00:23:10,780 --> 00:23:14,530
temperature or a pressure sensor that

00:23:13,120 --> 00:23:18,460
someone's already written that code for

00:23:14,530 --> 00:23:20,530
you and you go ahead and use it so I'll

00:23:18,460 --> 00:23:25,240
just show you what the sensor code looks

00:23:20,530 --> 00:23:26,980
like so basically you set which sensors

00:23:25,240 --> 00:23:29,410
that you're interested in in this case

00:23:26,980 --> 00:23:30,790
this is an accelerometer and that you're

00:23:29,410 --> 00:23:33,850
just saying well these are the types of

00:23:30,790 --> 00:23:36,100
things that I'm interested in and then

00:23:33,850 --> 00:23:37,540
you register with that sensor and then

00:23:36,100 --> 00:23:40,570
basically you're going to get

00:23:37,540 --> 00:23:43,929
information about it and that's it again

00:23:40,570 --> 00:23:46,809
very simple programming model if anyone

00:23:43,929 --> 00:23:49,960
has done an Android programming it works

00:23:46,809 --> 00:23:52,360
a little bit like the sensors in that so

00:23:49,960 --> 00:23:55,050
and they have thought of actually

00:23:52,360 --> 00:23:59,590
extending this a little further and

00:23:55,050 --> 00:24:01,240
making it so that the you're not making

00:23:59,590 --> 00:24:03,220
it a little more abstract again like

00:24:01,240 --> 00:24:05,290
Android does like it has an interface

00:24:03,220 --> 00:24:07,210
that says am i walking or running that

00:24:05,290 --> 00:24:09,100
sort of thing rather than let's talk to

00:24:07,210 --> 00:24:10,240
the accelerometer and get values and

00:24:09,100 --> 00:24:13,870
then you have to do lots of math to work

00:24:10,240 --> 00:24:16,390
out what's going on one of the other

00:24:13,870 --> 00:24:20,290
interesting things around minut is the

00:24:16,390 --> 00:24:23,380
packaging system um it actually is set

00:24:20,290 --> 00:24:25,450
up so that when you build something you

00:24:23,380 --> 00:24:26,890
know exactly what goes into it you know

00:24:25,450 --> 00:24:29,050
what all the versions are that have gone

00:24:26,890 --> 00:24:30,220
into it and you can make reproducible

00:24:29,050 --> 00:24:33,100
builds

00:24:30,220 --> 00:24:35,740
I don't know if anyone's had a lot of

00:24:33,100 --> 00:24:38,470
experience in this space in IOT but

00:24:35,740 --> 00:24:39,910
often if you've got a device with some

00:24:38,470 --> 00:24:42,160
software on it knowing exactly what that

00:24:39,910 --> 00:24:44,830
software is is sometimes hard in fact

00:24:42,160 --> 00:24:47,260
sometimes it's impossible to know

00:24:44,830 --> 00:24:49,270
and that makes testing really difficult

00:24:47,260 --> 00:24:50,710
and it also makes diagnosing of issues

00:24:49,270 --> 00:24:52,270
and bugs really difficult if you get a

00:24:50,710 --> 00:24:54,340
faulty device sent back to you and it's

00:24:52,270 --> 00:24:57,490
like I don't know what was on that it's

00:24:54,340 --> 00:24:58,870
almost impossible to to do that so what

00:24:57,490 --> 00:25:01,570
they've done is they they they have a

00:24:58,870 --> 00:25:03,190
concept of projects and packages so a

00:25:01,570 --> 00:25:05,590
project is a collection of packages and

00:25:03,190 --> 00:25:07,330
all of these projects are released and

00:25:05,590 --> 00:25:08,770
version in repositories so you can just

00:25:07,330 --> 00:25:10,030
store them and get help and they can be

00:25:08,770 --> 00:25:11,650
put anywhere in github they don't have

00:25:10,030 --> 00:25:14,740
to be an Apache github they can they can

00:25:11,650 --> 00:25:16,780
be elsewhere as well and you just had

00:25:14,740 --> 00:25:18,340
this the little text file which

00:25:16,780 --> 00:25:20,500
describes which packages you're using

00:25:18,340 --> 00:25:23,590
and the version number so it's sort of

00:25:20,500 --> 00:25:27,130
like a simplified version of maven I

00:25:23,590 --> 00:25:32,290
guess is probably the easiest concept to

00:25:27,130 --> 00:25:33,850
do so it means you can take a package

00:25:32,290 --> 00:25:36,070
and reuse it across multiple projects

00:25:33,850 --> 00:25:37,540
which is really nice it means that you

00:25:36,070 --> 00:25:40,300
can pick and choose which packages that

00:25:37,540 --> 00:25:43,780
you want for a certain project it also

00:25:40,300 --> 00:25:48,070
means that you can have different debug

00:25:43,780 --> 00:25:50,020
and release packages and keep them

00:25:48,070 --> 00:25:55,390
clearly defined so you know exactly what

00:25:50,020 --> 00:25:57,400
goes in which and yeah so they've

00:25:55,390 --> 00:25:59,560
they're not using make which is the

00:25:57,400 --> 00:26:02,260
standard sort of C way of compiling

00:25:59,560 --> 00:26:03,910
projects they have their own system

00:26:02,260 --> 00:26:05,590
built in there but it's pretty easy to

00:26:03,910 --> 00:26:08,890
get used to and quite simple and

00:26:05,590 --> 00:26:11,830
straightforward it's sort of an example

00:26:08,890 --> 00:26:13,990
here so this is a this is the mod you

00:26:11,830 --> 00:26:16,540
core this is saying that it's on github

00:26:13,990 --> 00:26:19,540
we want to use one point whatever the

00:26:16,540 --> 00:26:22,300
latest is and this is the repo to go

00:26:19,540 --> 00:26:23,910
have a look at there and that's it so

00:26:22,300 --> 00:26:26,410
that we'll know to go and get the code

00:26:23,910 --> 00:26:31,440
and it'll get them whatever the latest

00:26:26,410 --> 00:26:34,000
released version is one point whatever

00:26:31,440 --> 00:26:35,800
but you can change that to say you know

00:26:34,000 --> 00:26:37,300
just give me the lighter skinned

00:26:35,800 --> 00:26:40,450
development if you you know feeling

00:26:37,300 --> 00:26:42,340
risky or you can say oh no we're just

00:26:40,450 --> 00:26:43,929
aiming at one point one we're not going

00:26:42,340 --> 00:26:45,580
to worry about this new at one point two

00:26:43,929 --> 00:26:47,769
that got released while the 1.7 or

00:26:45,580 --> 00:26:50,379
whatever because you know you've tested

00:26:47,769 --> 00:26:53,619
against there so it's sort of a nice a

00:26:50,379 --> 00:26:55,749
nice feature and this is showing a

00:26:53,619 --> 00:26:59,289
package configuration and how this is

00:26:55,749 --> 00:27:00,549
for a blinky app and you can see that

00:26:59,289 --> 00:27:02,980
it's got some metadata there that

00:27:00,549 --> 00:27:06,309
describes the package the author where

00:27:02,980 --> 00:27:07,119
it exists and then the dependencies that

00:27:06,309 --> 00:27:09,460
that it

00:27:07,119 --> 00:27:11,049
it relies on so if you include this

00:27:09,460 --> 00:27:12,850
package you're automatically going to

00:27:11,049 --> 00:27:16,360
get those other the other packages there

00:27:12,850 --> 00:27:18,610
as well so they're all core packages

00:27:16,360 --> 00:27:20,259
there there's just the the core OS the

00:27:18,610 --> 00:27:21,850
hardware abstraction and it also has a

00:27:20,259 --> 00:27:24,039
console console is really good for

00:27:21,850 --> 00:27:26,950
debugging means you can tell that into

00:27:24,039 --> 00:27:28,809
the device and you know to do various

00:27:26,950 --> 00:27:30,610
things in the home home okay

00:27:28,809 --> 00:27:33,759
look at error messages and stuff like

00:27:30,610 --> 00:27:35,950
that so one of the reasons why they did

00:27:33,759 --> 00:27:37,539
this is that not all the packages have

00:27:35,950 --> 00:27:39,850
compatible life and licensing with the

00:27:37,539 --> 00:27:41,619
apache license while they talked a whole

00:27:39,850 --> 00:27:44,619
lot of vendors and tried to get the

00:27:41,619 --> 00:27:46,210
license changed some of them said no so

00:27:44,619 --> 00:27:48,369
they said oh well how do we solve that

00:27:46,210 --> 00:27:51,490
well it's an optional dependency we'll

00:27:48,369 --> 00:27:53,320
put it in a github repo over here and

00:27:51,490 --> 00:27:55,059
you know if people want to use it they

00:27:53,320 --> 00:28:00,070
can use it but it's not something that's

00:27:55,059 --> 00:28:01,869
core to the project so the company

00:28:00,070 --> 00:28:04,600
runtime itself has several github

00:28:01,869 --> 00:28:05,799
packages for all things that are not

00:28:04,600 --> 00:28:11,759
compatible and most of these are around

00:28:05,799 --> 00:28:14,289
the Nordic chipsets and there's also the

00:28:11,759 --> 00:28:18,730
the Adreno a couple of is very no boards

00:28:14,289 --> 00:28:21,580
modern Arduino boards as well so I'll

00:28:18,730 --> 00:28:23,470
talk about the how this actually starts

00:28:21,580 --> 00:28:25,389
up and what goes in under the hood and

00:28:23,470 --> 00:28:27,460
this is one of the more important things

00:28:25,389 --> 00:28:29,830
is that there's a little tiny bootloader

00:28:27,460 --> 00:28:32,679
and the bootloader you can choose where

00:28:29,830 --> 00:28:34,659
it would exist it can't exist in ROM

00:28:32,679 --> 00:28:38,259
read-only memory or it can exist on

00:28:34,659 --> 00:28:39,610
flash and generally what it does there's

00:28:38,259 --> 00:28:43,600
there's several different modes but the

00:28:39,610 --> 00:28:47,230
most common mode is that it boots up it

00:28:43,600 --> 00:28:48,610
does a checksum of the the image to

00:28:47,230 --> 00:28:52,570
check that it's all right and if it's

00:28:48,610 --> 00:28:54,009
all right then it starts and the

00:28:52,570 --> 00:28:56,499
checksum can either be just a simple

00:28:54,009 --> 00:28:57,850
char 256 or it can actually be full

00:28:56,499 --> 00:28:59,620
digital signal signature

00:28:57,850 --> 00:29:01,180
and all the rest so you've got a choice

00:28:59,620 --> 00:29:03,760
there which which path you want to go

00:29:01,180 --> 00:29:05,830
some constrained devices are not gonna

00:29:03,760 --> 00:29:10,660
be able to support the RSA side of

00:29:05,830 --> 00:29:15,010
things so that's it um so what you

00:29:10,660 --> 00:29:17,200
wanted to do when you're uploading this

00:29:15,010 --> 00:29:20,320
this is but this is the most common way

00:29:17,200 --> 00:29:24,070
of doing it is that you you create a new

00:29:20,320 --> 00:29:27,250
boot image and that image gets signed

00:29:24,070 --> 00:29:29,170
and then you've got some way of

00:29:27,250 --> 00:29:30,250
uploading it to the device and it

00:29:29,170 --> 00:29:32,800
supports a whole lot of different

00:29:30,250 --> 00:29:34,810
methods that are actually built in to ma

00:29:32,800 --> 00:29:36,970
nood and that can be update over

00:29:34,810 --> 00:29:41,080
bluetooth update over Wi-Fi or update

00:29:36,970 --> 00:29:42,910
over a serial port and what will do is

00:29:41,080 --> 00:29:46,360
that the most common way of doing it is

00:29:42,910 --> 00:29:50,140
that you have an A and B partition in

00:29:46,360 --> 00:29:52,710
your memory you'll get the new image and

00:29:50,140 --> 00:29:55,870
load it to be it's currently running a

00:29:52,710 --> 00:29:58,120
it'll do the checksum 1b it will then

00:29:55,870 --> 00:29:58,930
reboot and swap those images what just

00:29:58,120 --> 00:30:02,200
what's the point oh really

00:29:58,930 --> 00:30:03,820
and then runs up with B if that works

00:30:02,200 --> 00:30:06,280
and it's fine it keeps running of it if

00:30:03,820 --> 00:30:07,780
that fails then it goes back to the old

00:30:06,280 --> 00:30:09,580
one so it means that you don't actually

00:30:07,780 --> 00:30:11,290
brick a device and if you're just

00:30:09,580 --> 00:30:18,670
sitting there with something useless

00:30:11,290 --> 00:30:22,000
which is a really good idea so just a

00:30:18,670 --> 00:30:24,100
little bit on power management um it has

00:30:22,000 --> 00:30:26,050
supports very deep sleep modes you can

00:30:24,100 --> 00:30:30,040
some of these devices you can put into

00:30:26,050 --> 00:30:33,160
basically a mode that consumes micro

00:30:30,040 --> 00:30:35,530
watts of power and you can get it to

00:30:33,160 --> 00:30:38,380
wake up at certain intervals that wake

00:30:35,530 --> 00:30:40,030
up task is ticklish so it doesn't

00:30:38,380 --> 00:30:42,220
actually consume any power when it's

00:30:40,030 --> 00:30:45,280
running it's actually quite quite a

00:30:42,220 --> 00:30:47,230
clever little thing and there's also

00:30:45,280 --> 00:30:49,210
networking sleep management too so you

00:30:47,230 --> 00:30:52,930
can just basically say wake up when

00:30:49,210 --> 00:30:55,450
there's any traffic internet traffic on

00:30:52,930 --> 00:30:56,770
my port and you go and do what I need

00:30:55,450 --> 00:30:59,620
and when there's nothing then go back to

00:30:56,770 --> 00:31:03,250
sleep and it can very quickly turn that

00:30:59,620 --> 00:31:04,870
on and off so I mentioned before about

00:31:03,250 --> 00:31:06,460
debugging and the fact that there's a

00:31:04,870 --> 00:31:08,740
whole lot of logging and statistics that

00:31:06,460 --> 00:31:10,630
are in there that are a great help that

00:31:08,740 --> 00:31:11,779
when you're writing these so that

00:31:10,630 --> 00:31:14,179
logging statistics and

00:31:11,779 --> 00:31:17,059
we'll be written to ram or flash and it

00:31:14,179 --> 00:31:17,960
has this supports circular buffers so it

00:31:17,059 --> 00:31:19,219
means you're never gonna run out of

00:31:17,960 --> 00:31:20,899
memory it doesn't mean that sometimes

00:31:19,219 --> 00:31:22,729
the interesting thing that you're trying

00:31:20,899 --> 00:31:24,559
to find happen ten minutes ago and

00:31:22,729 --> 00:31:25,879
that's been overwritten but you know

00:31:24,559 --> 00:31:27,399
that's better than the device falling

00:31:25,879 --> 00:31:30,889
over and not working at all

00:31:27,399 --> 00:31:32,749
it can also write core dumps out so if

00:31:30,889 --> 00:31:34,340
there is a catastrophic failure and you

00:31:32,749 --> 00:31:36,529
do get a core dump it can actually write

00:31:34,340 --> 00:31:39,320
that out to say the extra boot partition

00:31:36,529 --> 00:31:41,149
that you're not using and then you can

00:31:39,320 --> 00:31:42,469
go download that and have a look at it

00:31:41,149 --> 00:31:45,200
and see what's gone wrong with the

00:31:42,469 --> 00:31:46,849
device I don't know what people's

00:31:45,200 --> 00:31:48,649
experiences are here but often if you've

00:31:46,849 --> 00:31:50,149
got a you know a device you can't see

00:31:48,649 --> 00:31:51,769
what set the software is actually doing

00:31:50,149 --> 00:31:53,929
on there it's quite actually can be

00:31:51,769 --> 00:31:56,539
quite difficult to do that and if it

00:31:53,929 --> 00:31:58,519
falls over or dies in some way it's it's

00:31:56,539 --> 00:32:00,799
really hard to diagnose unless you've

00:31:58,519 --> 00:32:04,070
got some form of logging or some some

00:32:00,799 --> 00:32:07,279
way of you know getting back from that

00:32:04,070 --> 00:32:08,509
um it also has stack guards as I was

00:32:07,279 --> 00:32:11,899
mentioning before that will protect you

00:32:08,509 --> 00:32:13,940
to some common stack overflow issues and

00:32:11,899 --> 00:32:15,799
it also tracks memory over time as well

00:32:13,940 --> 00:32:19,339
so you know how much stack that you've

00:32:15,799 --> 00:32:21,289
used up so you can actually fine-tune it

00:32:19,339 --> 00:32:23,869
a little a little bit does anyone

00:32:21,289 --> 00:32:24,889
remember the the incident with trio so a

00:32:23,869 --> 00:32:27,080
few years back where they had

00:32:24,889 --> 00:32:28,909
uncontrolled acceleration on cars and

00:32:27,080 --> 00:32:32,119
caused a couple of crashes and I think a

00:32:28,909 --> 00:32:33,349
couple fatalities yeah that was

00:32:32,119 --> 00:32:35,809
basically if they were using mine you

00:32:33,349 --> 00:32:38,409
that wouldn't happen right they had they

00:32:35,809 --> 00:32:40,820
had a couple of serious issues one was

00:32:38,409 --> 00:32:42,919
well how I remember it anyway was that

00:32:40,820 --> 00:32:44,779
there was storing the bit that says the

00:32:42,919 --> 00:32:47,779
brake pedal was down was in volatile

00:32:44,779 --> 00:32:51,229
memory they weren't looking after their

00:32:47,779 --> 00:32:53,599
stack space stack got too big things got

00:32:51,229 --> 00:32:54,889
overwritten watchdog would reboot it it

00:32:53,599 --> 00:32:56,059
would reboot it and then it wouldn't

00:32:54,889 --> 00:32:57,589
know where the brake pedal is down or

00:32:56,059 --> 00:32:59,929
not because that was Impala toll memory

00:32:57,589 --> 00:33:05,029
it changed that's like that's not a good

00:32:59,929 --> 00:33:07,070
thing so there's also a unit testing

00:33:05,029 --> 00:33:08,989
framework and you can actually run all

00:33:07,070 --> 00:33:10,249
the unit tests on your local machine you

00:33:08,989 --> 00:33:12,379
don't actually have to run them on the

00:33:10,249 --> 00:33:13,849
device itself well you can run them on

00:33:12,379 --> 00:33:17,299
the device as well you've got a choice

00:33:13,849 --> 00:33:20,809
so it's got that flexibility to you you

00:33:17,299 --> 00:33:22,999
can test quickly and on your own

00:33:20,809 --> 00:33:24,259
computer and then you can actually test

00:33:22,999 --> 00:33:24,999
it on the hardware itself to make sure

00:33:24,259 --> 00:33:28,389
that

00:33:24,999 --> 00:33:29,919
works there's also a simulator as well

00:33:28,389 --> 00:33:33,339
so you don't even need the hardware

00:33:29,919 --> 00:33:36,969
itself you can actually run on Mac and

00:33:33,339 --> 00:33:38,259
Linux and develop completely off it and

00:33:36,969 --> 00:33:40,299
you can all the unit tests to run on

00:33:38,259 --> 00:33:43,749
that as well so again this just speeds

00:33:40,299 --> 00:33:47,199
up delivery and and you know development

00:33:43,749 --> 00:33:48,789
time um and this is a bit but I think

00:33:47,199 --> 00:33:49,899
getting to is how big is it

00:33:48,789 --> 00:33:52,419
I thought someone would have asked this

00:33:49,899 --> 00:33:53,709
by now because that's usually the thing

00:33:52,419 --> 00:33:54,909
it's like oh it's a real-time operating

00:33:53,709 --> 00:33:59,139
system but yeah it's gonna double my

00:33:54,909 --> 00:34:02,589
memory the core of it is 1k ram 6k flash

00:33:59,139 --> 00:34:04,959
and that's it now that's the absolutely

00:34:02,589 --> 00:34:07,239
basic bits of it and and the more you

00:34:04,959 --> 00:34:08,799
use the more that creeps up so if you

00:34:07,239 --> 00:34:11,679
add the Bluetooth stack a minimal

00:34:08,799 --> 00:34:14,859
Bluetooth stack is about 15 K RAM all of

00:34:11,679 --> 00:34:16,899
it is about a hundred K code so it you

00:34:14,859 --> 00:34:18,849
know that adds i/o that's other adds a

00:34:16,899 --> 00:34:21,339
little bit but that's typical with other

00:34:18,849 --> 00:34:24,669
Bluetooth stacks that are out there it's

00:34:21,339 --> 00:34:26,109
not it's not exactly you know it's not

00:34:24,669 --> 00:34:27,309
twice as large or anything like that and

00:34:26,109 --> 00:34:28,619
for the matter the number of features

00:34:27,309 --> 00:34:32,460
that they've got in that Bluetooth stack

00:34:28,619 --> 00:34:36,389
that's actually quite quite a good size

00:34:32,460 --> 00:34:39,700
um security is taken very seriously

00:34:36,389 --> 00:34:44,200
there's a unique device identification

00:34:39,700 --> 00:34:45,789
API so you can actually individually

00:34:44,200 --> 00:34:47,730
identify devices and what they're

00:34:45,789 --> 00:34:49,869
running and what's going on with them I

00:34:47,730 --> 00:34:51,970
mentioned that the you can although

00:34:49,869 --> 00:34:53,980
images are signed there's a secure boot

00:34:51,970 --> 00:34:57,250
loader

00:34:53,980 --> 00:34:59,529
it supports TLS as well so you can

00:34:57,250 --> 00:35:01,299
actually communicate securely and there

00:34:59,529 --> 00:35:03,730
and it also supports a number of

00:35:01,299 --> 00:35:08,559
mechanisms of Bluetooth security I'm not

00:35:03,730 --> 00:35:12,460
gonna go into a lot of detail on that so

00:35:08,559 --> 00:35:14,650
what's new Bluetooth five support and

00:35:12,460 --> 00:35:16,359
Bluetooth mesh support so they've been

00:35:14,650 --> 00:35:18,220
added in the in the last year a

00:35:16,359 --> 00:35:19,930
bluetooth mesh stuff is particularly

00:35:18,220 --> 00:35:22,690
interesting

00:35:19,930 --> 00:35:24,789
it also supports Laura and Laura when is

00:35:22,690 --> 00:35:28,029
people familiar with it yeah it's one

00:35:24,789 --> 00:35:31,390
hand at least so these are low-power

00:35:28,029 --> 00:35:33,670
wide area long range networks they're

00:35:31,390 --> 00:35:35,680
perfect for IOT type stuff you've

00:35:33,670 --> 00:35:37,989
generally got a small base station which

00:35:35,680 --> 00:35:38,829
costs a couple thousand dollars and then

00:35:37,989 --> 00:35:40,269
that can court two

00:35:38,829 --> 00:35:43,119
- twenty or forty thousand devices

00:35:40,269 --> 00:35:44,559
within a couple of kilometer range so

00:35:43,119 --> 00:35:46,239
that's you know that's the the the

00:35:44,559 --> 00:35:47,259
perfect solution for this sort of things

00:35:46,239 --> 00:35:48,759
um

00:35:47,259 --> 00:35:52,059
the sense of framework has got a lot of

00:35:48,759 --> 00:35:54,459
work in and there's there's more support

00:35:52,059 --> 00:35:56,920
recently for cortex aim seven so that's

00:35:54,459 --> 00:36:00,249
the more powerful cortex chips and a

00:35:56,920 --> 00:36:02,069
whole other board support they've added

00:36:00,249 --> 00:36:04,420
encrypted flash so that you can actually

00:36:02,069 --> 00:36:06,400
encrypt all the information in the flash

00:36:04,420 --> 00:36:09,190
drive there they've added a battery

00:36:06,400 --> 00:36:15,299
sensor we've added a true random number

00:36:09,190 --> 00:36:19,390
generator and more boards they're

00:36:15,299 --> 00:36:20,589
changing a little thing around the tasks

00:36:19,390 --> 00:36:23,920
system which is which is interesting

00:36:20,589 --> 00:36:25,989
they have this concept of task pools so

00:36:23,920 --> 00:36:28,690
rather than having a large number of

00:36:25,989 --> 00:36:32,049
tasks that each wake up you can actually

00:36:28,690 --> 00:36:33,700
create a pool of tasks and it means that

00:36:32,049 --> 00:36:38,109
you can optimize the memory that's used

00:36:33,700 --> 00:36:41,519
there so that it can you can have

00:36:38,109 --> 00:36:44,920
multiple tasks that share a same pool

00:36:41,519 --> 00:36:47,469
and it's it's a nice idea um they've got

00:36:44,920 --> 00:36:49,449
Bluetooth 5 certification as well which

00:36:47,469 --> 00:36:51,930
is which is good and there's a few other

00:36:49,449 --> 00:36:54,269
features that they've added they're like

00:36:51,930 --> 00:36:57,459
more work on the crypto framework

00:36:54,269 --> 00:37:05,609
generic bus driver which is great yeah

00:36:57,459 --> 00:37:09,549
got a question over there not directly

00:37:05,609 --> 00:37:12,940
but but it will they they can support

00:37:09,549 --> 00:37:15,009
them because these days the sort of the

00:37:12,940 --> 00:37:18,369
API that you talk to the cellular

00:37:15,009 --> 00:37:21,190
network chips it's just it's a simple

00:37:18,369 --> 00:37:23,890
empty interface it's generally just a

00:37:21,190 --> 00:37:25,209
serial interface and you've put 80

00:37:23,890 --> 00:37:27,449
commands if you remember those you

00:37:25,209 --> 00:37:30,519
remember talking eighty plus five plus

00:37:27,449 --> 00:37:32,619
so back it back when you had modems like

00:37:30,519 --> 00:37:34,269
they used to type all the commands to

00:37:32,619 --> 00:37:35,859
configure it and to dial it and so forth

00:37:34,269 --> 00:37:38,589
that's basically what these things do at

00:37:35,859 --> 00:37:39,789
this level so it's just like a it's just

00:37:38,589 --> 00:37:41,739
like you're at a console and you just

00:37:39,789 --> 00:37:44,440
send commands to it to make it do stuff

00:37:41,739 --> 00:37:46,029
it's it's pretty straightforward so you

00:37:44,440 --> 00:37:48,249
see a lot of this electronic components

00:37:46,029 --> 00:37:49,509
has become more like Lego and more like

00:37:48,249 --> 00:37:51,009
bricks that you plug together and they

00:37:49,509 --> 00:37:52,720
have standard interfaces between them

00:37:51,009 --> 00:37:55,540
and those interfaces may be

00:37:52,720 --> 00:37:57,940
low lowest level ones like you know SPI

00:37:55,540 --> 00:37:59,140
where I squared C well they can be

00:37:57,940 --> 00:38:00,760
slightly higher level ones like

00:37:59,140 --> 00:38:02,770
basically a terminal interface or a

00:38:00,760 --> 00:38:06,070
console where you just type commands and

00:38:02,770 --> 00:38:07,180
make it do stuff so I can show you some

00:38:06,070 --> 00:38:10,300
examples other words you want to come in

00:38:07,180 --> 00:38:15,599
they checked me yeah so it is possible

00:38:10,300 --> 00:38:17,740
to put 3G 4G 4G whatever chips in there

00:38:15,599 --> 00:38:20,440
yeah I've got one more bag actually

00:38:17,740 --> 00:38:21,910
nothing so I can show you anyway

00:38:20,440 --> 00:38:23,890
so that's sort of what they've been

00:38:21,910 --> 00:38:26,859
working on at the moment and work on the

00:38:23,890 --> 00:38:29,130
project is is still going on um so if

00:38:26,859 --> 00:38:33,010
you want more information about it

00:38:29,130 --> 00:38:35,770
there's a whole lot of links there will

00:38:33,010 --> 00:38:38,170
you'll be able to get these slides from

00:38:35,770 --> 00:38:40,150
the conference website and I also

00:38:38,170 --> 00:38:42,970
actually have the slides as part of the

00:38:40,150 --> 00:38:44,050
Apache training project I don't know if

00:38:42,970 --> 00:38:47,680
you know about the Apache training

00:38:44,050 --> 00:38:49,390
project No okay um that's we've got a

00:38:47,680 --> 00:38:51,849
couple of minutes I might just are there

00:38:49,390 --> 00:38:52,690
any questions first on any effect on

00:38:51,849 --> 00:38:53,950
minut

00:38:52,690 --> 00:38:55,690
do you think it sounds like an

00:38:53,950 --> 00:39:02,700
interesting real-time operating system

00:38:55,690 --> 00:39:02,700
yeah yeah yeah

00:39:12,280 --> 00:39:18,619
there has been some conversation on the

00:39:14,569 --> 00:39:21,950
mailing list using ZigBee I quite like

00:39:18,619 --> 00:39:25,430
ZigBee favor there are interesting

00:39:21,950 --> 00:39:26,780
they've sort of been there's more

00:39:25,430 --> 00:39:28,630
interest these days in the lore and

00:39:26,780 --> 00:39:31,309
stuff than there is in the ZigBee stuff

00:39:28,630 --> 00:39:33,800
that's sort of what's replaced it I

00:39:31,309 --> 00:39:42,730
guess but it still has its place that's

00:39:33,800 --> 00:39:44,900
not yeah I mean ZigBee was additionally

00:39:42,730 --> 00:39:47,690
originally very industrial that you know

00:39:44,900 --> 00:39:50,450
it's used in oil refineries and things

00:39:47,690 --> 00:39:51,410
like that yeah some years back I was

00:39:50,450 --> 00:39:53,720
playing around with some ZigBee devices

00:39:51,410 --> 00:39:55,309
and I'm I accidentally discovered that

00:39:53,720 --> 00:39:56,990
if you don't set the addresses on them

00:39:55,309 --> 00:39:58,099
properly and you try to upload some

00:39:56,990 --> 00:39:59,839
software you will actually do a

00:39:58,099 --> 00:40:18,559
broadcast and upload all of them at once

00:39:59,839 --> 00:40:20,540
yes it was sort of funny mm-hmm yeah

00:40:18,559 --> 00:40:22,460
they're out there have one of the first

00:40:20,540 --> 00:40:24,740
applications that my new got used into

00:40:22,460 --> 00:40:27,680
was were smart electricity make meters

00:40:24,740 --> 00:40:32,359
and I believe they used one of those too

00:40:27,680 --> 00:40:35,990
I can't remember exactly which hmm any

00:40:32,359 --> 00:40:37,490
other questions no okay well thank you

00:40:35,990 --> 00:40:39,589
very much for coming on to my talk and

00:40:37,490 --> 00:40:41,059
listening to me I'm here for the rest of

00:40:39,589 --> 00:40:43,869
the conference so if you want to talk

00:40:41,059 --> 00:40:45,710
about Apache minut for the incubator or

00:40:43,869 --> 00:40:49,510
anything in particular

00:40:45,710 --> 00:40:49,510
yeah come see me

00:40:50,040 --> 00:40:53,159

YouTube URL: https://www.youtube.com/watch?v=uLGcZHgdTi0


