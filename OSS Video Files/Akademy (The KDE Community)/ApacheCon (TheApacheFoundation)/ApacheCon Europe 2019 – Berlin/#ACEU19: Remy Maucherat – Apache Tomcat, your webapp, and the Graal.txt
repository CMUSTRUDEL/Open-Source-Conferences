Title: #ACEU19: Remy Maucherat – Apache Tomcat, your webapp, and the Graal
Publication date: 2019-10-31
Playlist: ApacheCon Europe 2019 – Berlin
Description: 
	More: https://aceu19.apachecon.com/session/apache-tomcat-your-webapp-and-graal

Graal's native image generation has been the focus of a lot of attention recently, despite being in the very early stages. This session will look at the Tomcat embedded packaging, how to handle your webapp, and will demo use of Graal and Tomcat in a container environment. The session will mostly be tutorial/demo oriented, after a brief overview of the concept and tools used.
Captions: 
	00:00:05,200 --> 00:00:12,559
all right so I still been contributing

00:00:10,400 --> 00:00:13,610
to Tomcat for a while you heard about

00:00:12,559 --> 00:00:15,680
that this morning

00:00:13,610 --> 00:00:18,140
all right so first we'll go with the

00:00:15,680 --> 00:00:21,200
general view of what goal is and why

00:00:18,140 --> 00:00:25,730
it's a problem to use with web apps or

00:00:21,200 --> 00:00:27,980
general EEE stuff so the group project

00:00:25,730 --> 00:00:30,350
it's developed by records a multi

00:00:27,980 --> 00:00:35,149
language JVM and most importantly it

00:00:30,350 --> 00:00:38,210
allows compiling Java executable to

00:00:35,149 --> 00:00:39,920
self-contained native executables so the

00:00:38,210 --> 00:00:42,680
you are or the project and you have a

00:00:39,920 --> 00:00:46,040
fancy picture of the grou not the actual

00:00:42,680 --> 00:00:50,989
role Kranti a learnt about that and

00:00:46,040 --> 00:00:54,739
watching movies so how do you fit Tomcat

00:00:50,989 --> 00:00:56,270
inside a native image so first you have

00:00:54,739 --> 00:00:58,850
some Caston row which is made of

00:00:56,270 --> 00:01:02,600
multiple gels it would be difficult to

00:00:58,850 --> 00:01:06,020
compile to a single native executable so

00:01:02,600 --> 00:01:08,060
that's not a very good fit overall so as

00:01:06,020 --> 00:01:10,909
you can easily understand when you think

00:01:08,060 --> 00:01:13,729
about it a little that web apps conclude

00:01:10,909 --> 00:01:17,509
there are traces from normal web in flip

00:01:13,729 --> 00:01:21,459
of or web in classes since well the Java

00:01:17,509 --> 00:01:23,929
code compiled into your web apps is like

00:01:21,459 --> 00:01:26,029
executable code it will also have to be

00:01:23,929 --> 00:01:29,359
compiled in the native image just like

00:01:26,029 --> 00:01:31,459
the rest of Tomcat so there's no problem

00:01:29,359 --> 00:01:35,509
conceptually for configuration file

00:01:31,459 --> 00:01:37,759
access reading passing logging reading

00:01:35,509 --> 00:01:40,609
static files of web apps no problem with

00:01:37,759 --> 00:01:44,810
that same for configuration of multiple

00:01:40,609 --> 00:01:49,279
web apps virtual hosts Tarascon configs

00:01:44,810 --> 00:01:52,039
are possible so no problem so for the

00:01:49,279 --> 00:01:55,969
packaging I talked about it this morning

00:01:52,039 --> 00:01:59,209
but we have that Tomcat maven fat were

00:01:55,969 --> 00:02:01,069
fat joe packaging which is a kind of a

00:01:59,209 --> 00:02:04,029
good field because it will produce a

00:02:01,069 --> 00:02:06,739
single big jar with everything and that

00:02:04,029 --> 00:02:09,259
single Big Joe is everything you can

00:02:06,739 --> 00:02:10,540
compile to a native image to a single

00:02:09,259 --> 00:02:17,180
basically big

00:02:10,540 --> 00:02:18,080
native binary with everything so in your

00:02:17,180 --> 00:02:20,570
web apps

00:02:18,080 --> 00:02:23,630
of unwanted things that need to go or at

00:02:20,570 --> 00:02:26,690
least pre-processed to work in grow so

00:02:23,630 --> 00:02:29,270
first of all I'm going to talk about GSP

00:02:26,690 --> 00:02:31,940
since it's including based on cat but

00:02:29,270 --> 00:02:34,040
the things that any dynamically compiled

00:02:31,940 --> 00:02:36,980
technology like Jays piece would be the

00:02:34,040 --> 00:02:38,090
same so first step is to pre comp ideas

00:02:36,980 --> 00:02:40,760
piece to servlets

00:02:38,090 --> 00:02:43,730
because servlets was our compiled codes

00:02:40,760 --> 00:02:47,000
and and that grow we'll be able to

00:02:43,730 --> 00:02:49,700
compile you can't dynamically compile

00:02:47,000 --> 00:02:52,130
address P or you can compile you GSP to

00:02:49,700 --> 00:02:55,070
a classified but you'll never be able to

00:02:52,130 --> 00:03:00,080
compile the class binarism to run the

00:02:55,070 --> 00:03:03,020
class binary yeah so then once you

00:03:00,080 --> 00:03:06,140
compile the GS peels you have to add web

00:03:03,020 --> 00:03:09,050
the declarations of the servlet to web

00:03:06,140 --> 00:03:11,870
dot XML so for that I propose adding

00:03:09,050 --> 00:03:14,360
Tomcat using Tomcat web dot XML because

00:03:11,870 --> 00:03:16,340
it's a separate file so basically all

00:03:14,360 --> 00:03:21,590
your pro compiled jsps will go to that

00:03:16,340 --> 00:03:24,769
separate fly file then also let sources

00:03:21,590 --> 00:03:27,890
and properties files will be will be

00:03:24,769 --> 00:03:31,730
copied to the main folder of formed for

00:03:27,890 --> 00:03:34,459
mavin all the dependencies of the web

00:03:31,730 --> 00:03:36,140
apps will be added to the mavin file and

00:03:34,459 --> 00:03:37,790
then you'll use mavin

00:03:36,140 --> 00:03:41,570
to package everything so that will

00:03:37,790 --> 00:03:43,459
include the JSP is that servlet the

00:03:41,570 --> 00:03:45,410
servlet tessie's and all the

00:03:43,459 --> 00:03:49,550
dependencies of your web apps they'd all

00:03:45,410 --> 00:03:51,890
be companion to the fetcher so the

00:03:49,550 --> 00:03:54,170
process how will it work

00:03:51,890 --> 00:03:56,150
we'll do a demo and we are going to base

00:03:54,170 --> 00:03:57,980
it off so Tomcat examples web app

00:03:56,150 --> 00:04:00,380
basically why because it has a bit of

00:03:57,980 --> 00:04:03,350
everything that's off let's just please

00:04:00,380 --> 00:04:05,840
expression language use web sockets and

00:04:03,350 --> 00:04:08,420
we're going to use some cat native open

00:04:05,840 --> 00:04:10,970
SSL as well we're also going to use GS

00:04:08,420 --> 00:04:14,540
SC to see what works and what doesn't

00:04:10,970 --> 00:04:17,450
basically so this is a step-by-step demo

00:04:14,540 --> 00:04:21,440
and that's young we're supposed to have

00:04:17,450 --> 00:04:23,690
a native image a big binary with the

00:04:21,440 --> 00:04:27,440
examples web app and Tomcat obviously to

00:04:23,690 --> 00:04:29,810
run the examples web app so Tomcat

00:04:27,440 --> 00:04:31,490
documentation page and girls support

00:04:29,810 --> 00:04:34,699
with the instructions

00:04:31,490 --> 00:04:36,880
they're also really paid resting okay so

00:04:34,699 --> 00:04:40,970
first we're going to use them cat laven

00:04:36,880 --> 00:04:43,550
so what do we have in Tomcat maven so we

00:04:40,970 --> 00:04:46,130
have some dock your file packaging for

00:04:43,550 --> 00:04:49,280
container packaging of the of the

00:04:46,130 --> 00:04:52,280
resulting big big fat war and native

00:04:49,280 --> 00:04:54,349
image we have that and script for the

00:04:52,280 --> 00:04:57,860
web app packaging basically the web app

00:04:54,349 --> 00:05:00,650
and JSP precompilation mostly so the

00:04:57,860 --> 00:05:02,509
pundit XML it uses the maven shade

00:05:00,650 --> 00:05:04,340
plug-in to package some cards whether

00:05:02,509 --> 00:05:07,940
classes and the dependencies into the

00:05:04,340 --> 00:05:11,810
big fat jar I have a you know file also

00:05:07,940 --> 00:05:14,000
for the container deployment plan it

00:05:11,810 --> 00:05:15,860
could be useful at the end I'm going to

00:05:14,000 --> 00:05:18,889
do a demo with could be on it's easy

00:05:15,860 --> 00:05:21,500
hopefully if I have time and you also

00:05:18,889 --> 00:05:24,229
have a weird JSON files in the Tomcat

00:05:21,500 --> 00:05:28,069
native stuff which is basically some

00:05:24,229 --> 00:05:30,830
base descriptors for groan descriptors

00:05:28,069 --> 00:05:32,509
contain reflection information and all

00:05:30,830 --> 00:05:34,729
sorts of things which I'll talk about

00:05:32,509 --> 00:05:39,349
right after all so don't get maven which

00:05:34,729 --> 00:05:41,930
you'll get in the in the maven and in

00:05:39,349 --> 00:05:44,870
the Tomcat sauce tree it's in rising

00:05:41,930 --> 00:05:46,610
raise don't get me even basically and so

00:05:44,870 --> 00:05:49,400
it contains these files so I'm going to

00:05:46,610 --> 00:05:53,120
take these files and put them in my main

00:05:49,400 --> 00:05:58,550
team or folder which will be my main

00:05:53,120 --> 00:06:00,710
work directory from now on alright so

00:05:58,550 --> 00:06:04,000
I've copied all Tomcat maven for stuff

00:06:00,710 --> 00:06:09,199
and to my demo folder on now

00:06:04,000 --> 00:06:11,000
alright next so the thing is that the

00:06:09,199 --> 00:06:13,430
packaging is actually very similar to

00:06:11,000 --> 00:06:15,860
Tomcat standalone you'll be able to use

00:06:13,430 --> 00:06:17,659
a bin folder which is the default mcat

00:06:15,860 --> 00:06:19,819
native location I'm going to take

00:06:17,659 --> 00:06:22,849
advantage of that you have you can use

00:06:19,819 --> 00:06:25,039
the cons folder basically you can put

00:06:22,849 --> 00:06:27,110
there all your Tomcat configuration

00:06:25,039 --> 00:06:29,270
files that you would always use like

00:06:27,110 --> 00:06:32,449
some of the text and now at the Texan L

00:06:29,270 --> 00:06:35,690
I put in certificates which will

00:06:32,449 --> 00:06:39,589
actually use a key store here and login

00:06:35,690 --> 00:06:43,580
config as well the usual stuff so source

00:06:39,589 --> 00:06:44,849
mail it's all Java sources that you

00:06:43,580 --> 00:06:47,490
would want to

00:06:44,849 --> 00:06:49,319
compiled into the Fed jar you can add

00:06:47,490 --> 00:06:50,009
your stuff at this point you're no

00:06:49,319 --> 00:06:52,529
problem

00:06:50,009 --> 00:06:55,349
Web Apps well it's just like regular on

00:06:52,529 --> 00:06:58,589
cat that's the default app base for the

00:06:55,349 --> 00:07:01,770
default host so Web Apps your web apps

00:06:58,589 --> 00:07:06,149
can go there and work you have the

00:07:01,770 --> 00:07:11,759
default term cat work folder all right

00:07:06,149 --> 00:07:16,199
so so what we'll do then I have prepared

00:07:11,759 --> 00:07:17,639
some configuration of that thing so I

00:07:16,199 --> 00:07:20,309
have my bin folder

00:07:17,639 --> 00:07:22,949
it has don't get native because that's

00:07:20,309 --> 00:07:26,519
handy my current folder that's the usual

00:07:22,949 --> 00:07:29,069
configuration files so login property

00:07:26,519 --> 00:07:31,740
some other text ml several XML is almost

00:07:29,069 --> 00:07:34,649
the same so what I'm going to do

00:07:31,740 --> 00:07:38,189
basically disabled some problematic and

00:07:34,649 --> 00:07:39,889
is no Co like the memory leak prevention

00:07:38,189 --> 00:07:43,740
listeners and all that sort of stuff

00:07:39,889 --> 00:07:45,599
that's it uses reflection and you won't

00:07:43,740 --> 00:07:48,119
run withdraw because it was Java

00:07:45,599 --> 00:07:50,219
internals and the same issues won't

00:07:48,119 --> 00:07:52,829
apply to grow anyway so you don't need

00:07:50,219 --> 00:07:54,779
this so I remove them if you noticed you

00:07:52,829 --> 00:07:57,050
have the usual user database which

00:07:54,779 --> 00:07:59,909
Tomcat users detects and now as usual

00:07:57,050 --> 00:08:03,329
it's almost the same as a default config

00:07:59,909 --> 00:08:06,509
except that I added two SSL connectors I

00:08:03,329 --> 00:08:08,909
have one with open SSL and I have

00:08:06,509 --> 00:08:11,490
another one with jss both use the same

00:08:08,909 --> 00:08:17,219
key store chooses all right and there is

00:08:11,490 --> 00:08:19,439
a key and in both I enable HTTP two on

00:08:17,219 --> 00:08:20,719
one of the connectors HTTP 2 will not

00:08:19,439 --> 00:08:25,019
work we'll see why

00:08:20,719 --> 00:08:27,349
so I also added was the default engine

00:08:25,019 --> 00:08:29,779
no problem I added a clustered

00:08:27,349 --> 00:08:31,919
configuration based on kubernetes

00:08:29,779 --> 00:08:36,599
basically to the cloud membership

00:08:31,919 --> 00:08:39,000
service with queue bilities rest api so

00:08:36,599 --> 00:08:44,430
that's that is the default database

00:08:39,000 --> 00:08:46,019
realm I put in a health check valve it's

00:08:44,430 --> 00:08:48,709
not really needed I haven't configured

00:08:46,019 --> 00:08:52,259
in as a health check in the yellow but

00:08:48,709 --> 00:08:56,149
well just to show it works and the other

00:08:52,259 --> 00:08:58,590
the usual access log so nothing special

00:08:56,149 --> 00:09:05,610
alright so I'm going to copy now

00:08:58,590 --> 00:09:07,280
these files except that listener alright

00:09:05,610 --> 00:09:10,500
so I'm cooking here

00:09:07,280 --> 00:09:14,750
alright so extra stuff I have I have

00:09:10,500 --> 00:09:17,670
sunny see it's a shell library from grow

00:09:14,750 --> 00:09:19,890
it's meant to implement elliptic curve

00:09:17,670 --> 00:09:23,640
I'll talk about that later again but

00:09:19,890 --> 00:09:27,390
well it's the it's needed basically so

00:09:23,640 --> 00:09:29,250
in web apps I have the actual know the

00:09:27,390 --> 00:09:31,590
default tomcat web apps no surprise

00:09:29,250 --> 00:09:40,740
that's the example Web Apps I'm going to

00:09:31,590 --> 00:09:43,680
run alright so packaging alright so we

00:09:40,740 --> 00:09:55,530
need to process examples web app now so

00:09:43,680 --> 00:10:04,560
let's toss the process need to switch to

00:09:55,530 --> 00:10:07,890
my demo folder first okay so next I'm

00:10:04,560 --> 00:10:14,340
going to compile the main Tomcat fat fat

00:10:07,890 --> 00:10:18,780
jar okay so it's built with Tomcat nanos

00:10:14,340 --> 00:10:20,340
nano 27 which is the latest I preferred

00:10:18,780 --> 00:10:22,050
using the latest with that because

00:10:20,340 --> 00:10:24,690
there's always last-minute fixes you

00:10:22,050 --> 00:10:28,140
know so then I'm going to actually

00:10:24,690 --> 00:10:31,890
pre-compile the web apps with is the

00:10:28,140 --> 00:10:35,570
screw is the packaging script so it's

00:10:31,890 --> 00:10:38,580
pretty simple that compels deferred

00:10:35,570 --> 00:10:41,820
examples web app yes that was the

00:10:38,580 --> 00:10:44,400
examples web app for ease of use I'm

00:10:41,820 --> 00:10:46,140
going to come through package oh it's a

00:10:44,400 --> 00:10:48,480
justice script which free compiles but

00:10:46,140 --> 00:10:54,090
it runs fast yeah I'm going to compare

00:10:48,480 --> 00:10:56,160
the route web that also and then the

00:10:54,090 --> 00:10:59,490
manager web app you know just in case we

00:10:56,160 --> 00:11:01,350
want to show that it's working all right

00:10:59,490 --> 00:11:03,300
because those chess pieces the manager

00:11:01,350 --> 00:11:07,590
web app like to show the sessions and

00:11:03,300 --> 00:11:09,480
things like that so so dependencies so I

00:11:07,590 --> 00:11:11,880
need to add the dependencies of my web

00:11:09,480 --> 00:11:14,519
app to the main form

00:11:11,880 --> 00:11:16,019
if you know Tomcat and the example swept

00:11:14,519 --> 00:11:18,899
up you know they'll just yell

00:11:16,019 --> 00:11:20,550
dependencies for that way bad so

00:11:18,899 --> 00:11:25,740
basically you need to add that

00:11:20,550 --> 00:11:33,750
dependencies to the pond so let's do

00:11:25,740 --> 00:11:39,649
that so pundit XML yes I'm going to add

00:11:33,750 --> 00:11:42,690
that dependency yeah all right okay all

00:11:39,649 --> 00:11:45,089
right so I did my dependencies of the

00:11:42,690 --> 00:11:48,810
Webber basically you see because you go

00:11:45,089 --> 00:11:52,350
to web app examples where Dean Lib you

00:11:48,810 --> 00:11:54,870
have this this jars so since the since

00:11:52,350 --> 00:11:59,009
grow will be won't be able to use or

00:11:54,870 --> 00:12:04,680
compile distances ja you have to give it

00:11:59,009 --> 00:12:09,180
to him another way basically alright

00:12:04,680 --> 00:12:15,149
next okay

00:12:09,180 --> 00:12:20,160
I have I have a little extra this neuron

00:12:15,149 --> 00:12:22,110
going to add going to explain why so

00:12:20,160 --> 00:12:24,050
next we'll do we are going to do the

00:12:22,110 --> 00:12:27,329
growl reflection setup because basically

00:12:24,050 --> 00:12:30,600
any class you load dynamically in in

00:12:27,329 --> 00:12:33,000
grow like you do class for name needs to

00:12:30,600 --> 00:12:36,029
be declared beforehand so crawl knows

00:12:33,000 --> 00:12:39,899
how to compile this thing and why you're

00:12:36,029 --> 00:12:41,970
up to the color class basically so you

00:12:39,899 --> 00:12:43,529
need to fight up all this JSON the

00:12:41,970 --> 00:12:47,310
script or you don't want to do it by

00:12:43,529 --> 00:12:49,589
hand so you are going to use a tool so

00:12:47,310 --> 00:12:51,779
for that we are going to start the

00:12:49,589 --> 00:12:54,569
substrate JVM which is basically the

00:12:51,779 --> 00:12:57,000
default mode for growl with the tracing

00:12:54,569 --> 00:13:00,389
agent which is willful face all this

00:12:57,000 --> 00:13:02,939
reflection and dynamic class loading so

00:13:00,389 --> 00:13:05,370
basically either we can access than all

00:13:02,939 --> 00:13:08,339
the classes which need to be dynamically

00:13:05,370 --> 00:13:11,519
loaded like well legs off let's just

00:13:08,339 --> 00:13:14,100
please WebSockets or we can just load on

00:13:11,519 --> 00:13:16,560
start up because if you load on startup

00:13:14,100 --> 00:13:19,199
sublets mgsv will get loaded on startup

00:13:16,560 --> 00:13:21,480
so growers will trust everything

00:13:19,199 --> 00:13:23,309
note that it will work for servlet and

00:13:21,480 --> 00:13:25,379
JSP but it won't work with for

00:13:23,309 --> 00:13:28,410
WebSockets so basically as

00:13:25,379 --> 00:13:30,209
turn into a manually access WebSocket

00:13:28,410 --> 00:13:34,049
endpoints to make sure they are loaded

00:13:30,209 --> 00:13:36,979
and self seen by the agent when that's

00:13:34,049 --> 00:13:39,109
done you need to add resource bundles

00:13:36,979 --> 00:13:41,989
like basically it's your

00:13:39,109 --> 00:13:43,919
internationalization it's not automatic

00:13:41,989 --> 00:13:47,369
unfortunately I don't know why it's not

00:13:43,919 --> 00:13:49,619
automatic some interfaces don't trust

00:13:47,369 --> 00:13:51,959
properly for some reason so you have to

00:13:49,619 --> 00:13:53,849
add them manually and generally you need

00:13:51,959 --> 00:13:56,789
to add anything that will get picked up

00:13:53,849 --> 00:13:59,309
you'll noticed later when you get on the

00:13:56,789 --> 00:14:02,399
raw essentially and then you know how to

00:13:59,309 --> 00:14:05,189
when to go back so let's start the first

00:14:02,399 --> 00:14:07,109
let's restore the process so at this

00:14:05,189 --> 00:14:10,079
point I'm going to add a load on startup

00:14:07,109 --> 00:14:13,109
listener I'm going to show the code it's

00:14:10,079 --> 00:14:15,679
very simple let's see yeah that's this

00:14:13,109 --> 00:14:18,389
listener also what it does basically

00:14:15,679 --> 00:14:21,479
it's like it's a Katarina lifecycle

00:14:18,389 --> 00:14:24,119
listener and it says load on startup -

00:14:21,479 --> 00:14:32,279
ever - every so of let that make sure

00:14:24,119 --> 00:14:38,839
they're all loaded on startup ok so I'm

00:14:32,279 --> 00:14:38,839
going to add that in source main beauty

00:14:38,959 --> 00:14:47,779
alright so these other classes are all

00:14:43,979 --> 00:14:51,149
stuff from the example web app or

00:14:47,779 --> 00:14:53,429
pre-compiled pre-compile JSP so you have

00:14:51,149 --> 00:14:55,470
a lot of stuff in there so at this point

00:14:53,429 --> 00:14:57,119
we are going to build the whole thing we

00:14:55,470 --> 00:15:00,600
are going to do method and package again

00:14:57,119 --> 00:15:06,449
in this time it will have a routine so

00:15:00,600 --> 00:15:08,999
mavin package alright so it contains all

00:15:06,449 --> 00:15:11,519
the free compiled recipes and everything

00:15:08,999 --> 00:15:15,689
so it went fast alright it didn't crash

00:15:11,519 --> 00:15:19,259
that's good alright so you see you have

00:15:15,689 --> 00:15:21,299
a rather big time get maven the jaw you

00:15:19,259 --> 00:15:25,799
know with everything going to show you

00:15:21,299 --> 00:15:29,399
what it has exactly so if you open it

00:15:25,799 --> 00:15:33,029
now you have you see all these classes

00:15:29,399 --> 00:15:35,159
from from the examples here in the

00:15:33,029 --> 00:15:39,079
examples or gap at you just feel like

00:15:35,159 --> 00:15:39,079
you have also to compile jsps

00:15:40,400 --> 00:15:46,320
and besides that you have alton cat

00:15:44,520 --> 00:15:48,690
that's all catalina

00:15:46,320 --> 00:15:53,130
so everything's compiled into sets and

00:15:48,690 --> 00:15:57,390
john now so as i need to add a few extra

00:15:53,130 --> 00:15:59,610
thing oh no i'll stressed out alright so

00:15:57,390 --> 00:16:05,400
now i'm going to run the girls at stride

00:15:59,610 --> 00:16:10,800
um that's my ground station path lies

00:16:05,400 --> 00:16:13,020
the word rest the vm used here and at

00:16:10,800 --> 00:16:16,370
this point you see your own just using a

00:16:13,020 --> 00:16:19,920
regular command line photon cat except

00:16:16,370 --> 00:16:24,030
it has a tracing agent like native image

00:16:19,920 --> 00:16:26,880
image agent and it will set the output

00:16:24,030 --> 00:16:35,040
for its trace file into that trace v dot

00:16:26,880 --> 00:16:37,620
Jason so we run that takes a while to

00:16:35,040 --> 00:16:41,460
start in Java so it takes a while to

00:16:37,620 --> 00:16:44,460
stop I have an exception why because

00:16:41,460 --> 00:16:47,190
that's my QB ologies thing it's not

00:16:44,460 --> 00:16:50,690
finding its service account token so

00:16:47,190 --> 00:16:53,130
it's okay alright it's normally or here

00:16:50,690 --> 00:16:57,290
so everything all the way starts depth

00:16:53,130 --> 00:16:57,290
so to connect to us everything's good

00:16:58,340 --> 00:17:11,040
let's access stuff alright so that the

00:17:06,660 --> 00:17:16,380
default welcome no surprise so then I'm

00:17:11,040 --> 00:17:20,180
going to access the same thing to HTTP

00:17:16,380 --> 00:17:23,490
it will use HTTP to at this point I

00:17:20,180 --> 00:17:25,200
didn't get the certificate warning

00:17:23,490 --> 00:17:30,390
because I did it before

00:17:25,200 --> 00:17:32,820
basically so siege I put in debug.trace

00:17:30,390 --> 00:17:36,930
for HTTP to so yes that you can see it's

00:17:32,820 --> 00:17:39,210
actually using HTTP two but the uncool

00:17:36,930 --> 00:17:42,270
thing is that if you're using the JSC

00:17:39,210 --> 00:17:44,580
connector on the other port see I get

00:17:42,270 --> 00:17:47,630
the certificate warning here okay I

00:17:44,580 --> 00:17:55,890
accept the risk a sign it myself

00:17:47,630 --> 00:17:57,990
it's not using HP to as well alright no

00:17:55,890 --> 00:18:00,510
it's not using HTTP to that's normal

00:17:57,990 --> 00:18:02,610
alright so as you can see the other

00:18:00,510 --> 00:18:06,120
connector isn't using HTTP too well

00:18:02,610 --> 00:18:08,700
because I'm growing it does Java 8 so it

00:18:06,120 --> 00:18:11,280
doesn't use a it does not have a LT and

00:18:08,700 --> 00:18:16,190
support so no HTTP to basically that's a

00:18:11,280 --> 00:18:19,200
major problem for grow at this time so

00:18:16,190 --> 00:18:21,300
we have traced some eight times four so

00:18:19,200 --> 00:18:22,640
I need to trace a few more things

00:18:21,300 --> 00:18:24,540
because I wanted to demonstrate

00:18:22,640 --> 00:18:26,940
WebSocket so I'm going to go to

00:18:24,540 --> 00:18:29,580
WebSockets to see the multiplayer your

00:18:26,940 --> 00:18:31,530
snake alright so that uses a WebSocket

00:18:29,580 --> 00:18:39,300
endpoint we do stuff all right

00:18:31,530 --> 00:18:41,429
so okay so I turn it alright so when

00:18:39,300 --> 00:18:50,280
you're done exercising your web app you

00:18:41,429 --> 00:18:51,840
can kill you or your JVM and move on ok

00:18:50,280 --> 00:18:55,170
so I'm going to generate the config

00:18:51,840 --> 00:18:57,390
files from the trace basically what it

00:18:55,170 --> 00:19:00,660
will do at this point that it will take

00:18:57,390 --> 00:19:03,600
the trace the trace fight that JSON and

00:19:00,660 --> 00:19:06,510
generate multiple individual jason for

00:19:03,600 --> 00:19:11,780
each each sort of item like those one

00:19:06,510 --> 00:19:11,780
fight for reflection when fight for gni

00:19:11,990 --> 00:19:18,059
and at this point i'm going to add the

00:19:15,990 --> 00:19:20,850
resource bundles for the example web app

00:19:18,059 --> 00:19:24,270
to target resource config dot JSON which

00:19:20,850 --> 00:19:28,880
was just generated right now so it's

00:19:24,270 --> 00:19:34,320
here I'm going to add it here all right

00:19:28,880 --> 00:19:36,990
so while because it's unfortunately it's

00:19:34,320 --> 00:19:40,160
not traced by the agent so if I don't do

00:19:36,990 --> 00:19:41,970
that I'd get errors reading my

00:19:40,160 --> 00:19:43,830
internationalization resource bundles

00:19:41,970 --> 00:19:50,670
which would be a shame because it's just

00:19:43,830 --> 00:19:52,200
stupid or obviously at this point so at

00:19:50,670 --> 00:19:55,620
this point you're all set you can run

00:19:52,200 --> 00:19:58,470
native image so well obviously it's not

00:19:55,620 --> 00:20:01,320
going to failure but for you and your

00:19:58,470 --> 00:20:06,600
own web app minerals can occur

00:20:01,320 --> 00:20:08,580
like grow won't find some resource some

00:20:06,600 --> 00:20:10,110
class loaded dynamically he won't like

00:20:08,580 --> 00:20:12,419
what you're doing something is missing

00:20:10,110 --> 00:20:14,730
some incompatible libraries messing

00:20:12,419 --> 00:20:16,740
things up because well he's doing things

00:20:14,730 --> 00:20:18,870
like that growl doesn't like that I

00:20:16,740 --> 00:20:21,630
don't know started thread in a static

00:20:18,870 --> 00:20:23,909
initializer just giving an example using

00:20:21,630 --> 00:20:26,789
genetics whatever anything can happen

00:20:23,909 --> 00:20:29,490
really so code MIDI may need to be fixed

00:20:26,789 --> 00:20:33,200
right and if it fails you need to go

00:20:29,490 --> 00:20:37,289
back a few steps back on like usually

00:20:33,200 --> 00:20:39,029
reduce some descriptors and all sort of

00:20:37,289 --> 00:20:41,690
things so we are going to run the native

00:20:39,029 --> 00:20:46,889
image now that's a big thing basically

00:20:41,690 --> 00:20:48,990
that's a big item alright so that this

00:20:46,889 --> 00:20:52,830
configures at this command line alright

00:20:48,990 --> 00:20:55,230
so what does it do it's not that complex

00:20:52,830 --> 00:20:57,990
actually it has a few things that cause

00:20:55,230 --> 00:20:58,980
problems that we static initializer or

00:20:57,990 --> 00:21:03,419
in tomcat

00:20:58,980 --> 00:21:05,429
it has protocols used item cat H CPH CPS

00:21:03,419 --> 00:21:08,779
JA that's not by default so you need to

00:21:05,429 --> 00:21:11,009
specify it no server it's too low

00:21:08,779 --> 00:21:17,580
compiling multiple times without

00:21:11,009 --> 00:21:19,830
crashing HCPs you need it for TRS that's

00:21:17,580 --> 00:21:22,860
for the configuration descriptors you've

00:21:19,830 --> 00:21:25,110
just generated and the rest on the next

00:21:22,860 --> 00:21:27,809
our Metro is the Tomcat maven jaws it's

00:21:25,110 --> 00:21:29,639
a big fat jar with all the classes so

00:21:27,809 --> 00:21:36,960
let's do it it's going to take one

00:21:29,639 --> 00:21:40,850
minute approximately so at this point

00:21:36,960 --> 00:21:40,850
you have a question we have one minute

00:21:48,529 --> 00:21:55,139
now he said itself yeah JDK 11 support

00:21:52,709 --> 00:21:57,899
in grow it's a top priority item for

00:21:55,139 --> 00:22:01,440
Oracle but they'll still be working on

00:21:57,899 --> 00:22:03,149
it that don't give any dates for grow

00:22:01,440 --> 00:22:05,879
except they have a really strained

00:22:03,149 --> 00:22:09,659
basically so every three months you get

00:22:05,879 --> 00:22:12,779
a major role and go release now so right

00:22:09,659 --> 00:22:18,799
now it's nineteen for 2019

00:22:12,779 --> 00:22:18,799
- I think and you'll get three and well

00:22:19,249 --> 00:22:24,299
it will go on from there and you get no

00:22:22,649 --> 00:22:25,679
support unless you get you by the

00:22:24,299 --> 00:22:31,139
eruption

00:22:25,679 --> 00:22:33,479
oh yeah basically there's a community

00:22:31,139 --> 00:22:35,369
edition of grow that you can download

00:22:33,479 --> 00:22:38,669
freely and then there's an Enterprise

00:22:35,369 --> 00:22:41,039
Edition which is a commercial community

00:22:38,669 --> 00:22:44,519
edition works very well it's just a

00:22:41,039 --> 00:22:47,519
little bit slower like the addition I've

00:22:44,519 --> 00:22:51,149
noticed like it's 10% slower faster on

00:22:47,519 --> 00:22:53,820
native on off like five five to ten

00:22:51,149 --> 00:22:55,950
let's say so it's nice but it's not the

00:22:53,820 --> 00:22:57,869
end of the world I guess they do know

00:22:55,950 --> 00:23:00,209
inlining and more stuff because the

00:22:57,869 --> 00:23:04,019
binary generated by the addition was

00:23:00,209 --> 00:23:06,029
bigger so even more enlightening so I

00:23:04,019 --> 00:23:09,869
see even more because the binary is

00:23:06,029 --> 00:23:14,609
already pretty possible so it's pretty

00:23:09,869 --> 00:23:17,609
well it's beginner for ideas on alright

00:23:14,609 --> 00:23:20,759
it's done so what happened I have made

00:23:17,609 --> 00:23:23,729
them cat maven executed well see it's

00:23:20,759 --> 00:23:26,639
only five fifty five megabytes about

00:23:23,729 --> 00:23:31,229
yeah fifty for something so it's pretty

00:23:26,639 --> 00:23:34,339
big but it has Auto so everything from

00:23:31,229 --> 00:23:37,789
Tomcat and everything from the examples

00:23:34,339 --> 00:23:42,539
so I can do a quick example and run it

00:23:37,789 --> 00:23:43,889
alright so the arguments the same as a

00:23:42,539 --> 00:23:46,619
regular Tomcat

00:23:43,889 --> 00:23:48,659
I have my login config file if you

00:23:46,619 --> 00:23:50,070
notice there's one thing missing it's

00:23:48,659 --> 00:23:52,889
the log manager because it's

00:23:50,070 --> 00:23:55,440
incompatible with grow so no Julie log

00:23:52,889 --> 00:23:57,649
manager or you have to use the food Java

00:23:55,440 --> 00:23:59,669
util logging log manager or be with grow

00:23:57,649 --> 00:24:01,860
otherwise you get the cattle in their

00:23:59,669 --> 00:24:04,710
base and well you just

00:24:01,860 --> 00:24:09,720
it like you would for a normal executive

00:24:04,710 --> 00:24:14,190
ball so boom started you didn't wait you

00:24:09,720 --> 00:24:19,080
didn't do anything so basically what do

00:24:14,190 --> 00:24:21,150
I have see that web app like the dogs in

00:24:19,080 --> 00:24:22,770
three milliseconds but I wanted the

00:24:21,150 --> 00:24:24,990
examples oh yeah

00:24:22,770 --> 00:24:28,980
so the examples web app which is pretty

00:24:24,990 --> 00:24:34,530
big with also let's take spam and no 48

00:24:28,980 --> 00:24:36,660
milliseconds if I try the like the other

00:24:34,530 --> 00:24:41,190
one with which was with the native image

00:24:36,660 --> 00:24:44,090
agent like it was more so that's the

00:24:41,190 --> 00:24:52,309
difference so yeah it was 700

00:24:44,090 --> 00:24:52,309
millisecond so

00:24:57,279 --> 00:25:03,650
so all right so next we are going to for

00:25:01,909 --> 00:25:05,929
a good comparison we are going to put

00:25:03,650 --> 00:25:07,460
that in in a container and run it

00:25:05,929 --> 00:25:10,460
through the core because we'll be able

00:25:07,460 --> 00:25:16,870
to really compare the two of them very

00:25:10,460 --> 00:25:16,870
easy so let's go to the car now right

00:25:22,560 --> 00:25:27,690
so I did the testing I'm going to pass

00:25:24,720 --> 00:25:29,280
my state okay so you in a container now

00:25:27,690 --> 00:25:32,730
so you're going to build the container

00:25:29,280 --> 00:25:34,620
image all right so I've need not just

00:25:32,730 --> 00:25:37,260
you get an executable so you don't need

00:25:34,620 --> 00:25:40,680
Java Java so basically you can based off

00:25:37,260 --> 00:25:43,590
a native you can base of a container

00:25:40,680 --> 00:25:47,070
image which doesn't have Java so you can

00:25:43,590 --> 00:25:49,140
use busybox for example and you need

00:25:47,070 --> 00:25:50,940
some adjustments but you get the docker

00:25:49,140 --> 00:25:53,430
file basically instead of the shade

00:25:50,940 --> 00:25:56,330
shade adjoined to pick up your executive

00:25:53,430 --> 00:25:58,770
all pretty basic packaging and

00:25:56,330 --> 00:26:00,660
unfortunately you can't use giorgia or

00:25:58,770 --> 00:26:05,820
primitives for monitoring so you don't

00:26:00,660 --> 00:26:08,720
get any Gen X so the problems we you are

00:26:05,820 --> 00:26:11,760
going to run into is Terrace support

00:26:08,720 --> 00:26:14,880
basically you need that CSUN ec library

00:26:11,760 --> 00:26:17,520
and fortunately it's a new dynamic labor

00:26:14,880 --> 00:26:19,640
it can be compiled as a static thing so

00:26:17,520 --> 00:26:22,320
you need it

00:26:19,640 --> 00:26:24,600
also you have to get native which has

00:26:22,320 --> 00:26:26,670
plenty of dependencies which running and

00:26:24,600 --> 00:26:29,010
the thing is that there's an option for

00:26:26,670 --> 00:26:31,860
static linking for grout to generate a

00:26:29,010 --> 00:26:34,080
native image so you compile when that's

00:26:31,860 --> 00:26:38,340
enable it will compile the standard

00:26:34,080 --> 00:26:41,310
library and the Lib static libraries but

00:26:38,340 --> 00:26:43,980
unfortunately it will only compile that

00:26:41,310 --> 00:26:47,130
static it won't compile Tomcat native or

00:26:43,980 --> 00:26:51,050
sanity problems that are always going to

00:26:47,130 --> 00:26:51,050
be missing if we're going to use TLS

00:26:52,580 --> 00:27:00,030
so that's issue in grow for the

00:26:58,050 --> 00:27:02,280
incompatible incomplete static linking

00:27:00,030 --> 00:27:05,070
capability basically we need to be able

00:27:02,280 --> 00:27:06,330
to configure additional libraries to be

00:27:05,070 --> 00:27:11,640
compiled statically

00:27:06,330 --> 00:27:14,010
as a result the host platform is the

00:27:11,640 --> 00:27:17,640
same as your target platform you can't

00:27:14,010 --> 00:27:20,430
cross compile I mean to some extent for

00:27:17,640 --> 00:27:22,970
example I can't build a static image a

00:27:20,430 --> 00:27:25,800
static native image that we run on

00:27:22,970 --> 00:27:28,410
busybox with TLS support because of

00:27:25,800 --> 00:27:31,230
missing senousy and tomcat native i

00:27:28,410 --> 00:27:33,779
tried it's not possible

00:27:31,230 --> 00:27:36,630
so you need to either run the container

00:27:33,779 --> 00:27:41,580
that is based on Fedora like my desk

00:27:36,630 --> 00:27:46,320
like my laptop or forget about us so

00:27:41,580 --> 00:27:48,330
that's not cool so the packaging what I

00:27:46,320 --> 00:27:51,600
recommend at this point is use the same

00:27:48,330 --> 00:27:55,080
base image and as the host OS so this

00:27:51,600 --> 00:27:58,169
way you'll be able to use TLS then you

00:27:55,080 --> 00:28:00,299
had open SSL APR sunny sea and top cat

00:27:58,169 --> 00:28:03,000
native libraries to the container image

00:28:00,299 --> 00:28:04,919
as needed like your base image like for

00:28:03,000 --> 00:28:06,960
example you're going to use fedora it

00:28:04,919 --> 00:28:09,690
has open SSL so it doesn't divide it I

00:28:06,960 --> 00:28:13,019
still need to add a PR and I'll add

00:28:09,690 --> 00:28:15,990
sunny sea and Tomcat native so then I

00:28:13,019 --> 00:28:18,330
used my example docker file to be

00:28:15,990 --> 00:28:22,169
package everything into my container

00:28:18,330 --> 00:28:24,570
image so it's a good idea to test using

00:28:22,169 --> 00:28:29,070
docker first before compiling before

00:28:24,570 --> 00:28:30,870
deploying to clouds or everything that's

00:28:29,070 --> 00:28:35,840
the next step right so I'm going to

00:28:30,870 --> 00:28:40,340
build now later cool stuff

00:28:35,840 --> 00:28:40,340
all right so that's a regular image

00:28:46,440 --> 00:28:56,910
oh I'm noting the right folder city

00:28:53,330 --> 00:29:00,360
alright I switched to a I switched too

00:28:56,910 --> 00:29:13,230
soon to the root to the root folder what

00:29:00,360 --> 00:29:16,380
was it let's try again so that's a

00:29:13,230 --> 00:29:19,460
regular container image from the fat ja

00:29:16,380 --> 00:29:24,720
so since it's a drag Rajah I am using

00:29:19,460 --> 00:29:27,390
geo alt Alpine with from openjdk it's a

00:29:24,720 --> 00:29:31,250
small container image with just open JDK

00:29:27,390 --> 00:29:34,110
and Alpine now it's the most efficient

00:29:31,250 --> 00:29:38,130
java image you can email you can get I

00:29:34,110 --> 00:29:42,120
think I try to find better ones but it's

00:29:38,130 --> 00:29:47,990
always supports its own so I've built my

00:29:42,120 --> 00:29:51,690
first container image we can see it here

00:29:47,990 --> 00:29:59,160
in my dacha containers 0 that's when I

00:29:51,690 --> 00:30:02,130
just I just built alright so next I'm

00:29:59,160 --> 00:30:03,990
going to build the same but with the

00:30:02,130 --> 00:30:06,360
grow executive ball so you see the

00:30:03,990 --> 00:30:08,400
process it's going to take a bit more

00:30:06,360 --> 00:30:14,670
because it's going to pull stuff up from

00:30:08,400 --> 00:30:17,280
the internet hope it works so I'm adding

00:30:14,670 --> 00:30:20,840
sunny see here which is a shared library

00:30:17,280 --> 00:30:25,100
for elliptic curve and I'm installing

00:30:20,840 --> 00:30:28,080
APR from are using gnf so it's going to

00:30:25,100 --> 00:30:34,670
wait for a while for until it downloads

00:30:28,080 --> 00:30:37,890
the dependency hopefully not too long I

00:30:34,670 --> 00:30:49,580
can take questions in the meantime if

00:30:37,890 --> 00:30:49,580
you have any let's wait

00:30:55,460 --> 00:31:01,489
elliptic curve well otherwise I won't be

00:30:58,789 --> 00:31:04,789
able to use advanced cipher us for TLS

00:31:01,489 --> 00:31:06,679
and basically you'll get Jason to

00:31:04,789 --> 00:31:08,389
support no problem that you won't be

00:31:06,679 --> 00:31:10,700
able to connect to anything without

00:31:08,389 --> 00:31:12,739
elliptic curve because all the ciphers

00:31:10,700 --> 00:31:17,799
will be disabled I mean also usable

00:31:12,739 --> 00:31:17,799
ciphers will be disabled so you need

00:31:20,859 --> 00:31:29,059
yeah oh yeah you won't be able to do

00:31:26,839 --> 00:31:30,649
handshake without that oh it's pretty

00:31:29,059 --> 00:31:32,509
obvious I mean you get on their own

00:31:30,649 --> 00:31:34,159
startup that it doesn't have sannyasis

00:31:32,509 --> 00:31:37,369
or disabled stuff

00:31:34,159 --> 00:31:39,259
and then it doesn't work so it was

00:31:37,369 --> 00:31:42,499
already pretty limited because it's Java

00:31:39,259 --> 00:31:43,669
it is a bit limited and that basically

00:31:42,499 --> 00:31:52,399
cuts off the rest

00:31:43,669 --> 00:31:55,460
so it's installing APL so that's one and

00:31:52,399 --> 00:32:01,779
then it's going to add my binary for

00:31:55,460 --> 00:32:04,969
Tomcat native okay that's a fat binary

00:32:01,779 --> 00:32:09,559
that's configuration files that the web

00:32:04,969 --> 00:32:11,749
apps let's just set the world do

00:32:09,559 --> 00:32:16,999
whatever okay it sets a community's

00:32:11,749 --> 00:32:20,659
environment okay all right okay so I

00:32:16,999 --> 00:32:22,849
have my second so as you can see it's a

00:32:20,659 --> 00:32:24,830
lot bigger odds 500 megabytes because

00:32:22,849 --> 00:32:28,879
it's based on stead of our table see I

00:32:24,830 --> 00:32:30,440
had to use my my host image basically so

00:32:28,879 --> 00:32:32,469
I'm going to run this and see how it

00:32:30,440 --> 00:32:32,469
goes

00:32:35,529 --> 00:32:39,999
so it's starting all right

00:32:50,190 --> 00:32:56,160
and while it's going on I'm going to

00:32:53,150 --> 00:32:59,880
just try to start my open shift because

00:32:56,160 --> 00:33:03,140
it it works alright we'll take your

00:32:59,880 --> 00:33:03,140
words I'm doing it in the background

00:33:03,830 --> 00:33:09,510
alright so but we're Tomcat container

00:33:06,750 --> 00:33:13,710
seems to be what container seems to be

00:33:09,510 --> 00:33:16,050
started oh no it's not that horrible

00:33:13,710 --> 00:33:19,560
okay so basically what you can see that

00:33:16,050 --> 00:33:23,160
you have your docker container here

00:33:19,560 --> 00:33:30,960
that's for the native one takes 35

00:33:23,160 --> 00:33:33,480
megabytes of RAM if you go back the

00:33:30,960 --> 00:33:37,320
regular one takes 400 megabytes

00:33:33,480 --> 00:33:40,110
that's the Java one so that's a pretty

00:33:37,320 --> 00:33:43,170
big difference already so you can then

00:33:40,110 --> 00:33:46,560
access your container the container and

00:33:43,170 --> 00:33:49,490
see how it runs so where do I have the

00:33:46,560 --> 00:33:49,490
continuously

00:34:00,700 --> 00:34:09,129
so that's righti for my container I

00:34:03,489 --> 00:34:11,409
think I copied it yeah so I can

00:34:09,129 --> 00:34:14,980
I had can access it at the Grove the

00:34:11,409 --> 00:34:17,500
option so it runs just as normal so I'm

00:34:14,980 --> 00:34:21,040
going to run the WebSocket example maybe

00:34:17,500 --> 00:34:24,429
I can run some JSP so I have four

00:34:21,040 --> 00:34:28,450
examples you yell example we trance

00:34:24,429 --> 00:34:32,500
dressed as usual so I'm going to run the

00:34:28,450 --> 00:34:34,809
WebSocket snake which I just loaded and

00:34:32,500 --> 00:34:38,049
so that I have demonstrated WebSocket

00:34:34,809 --> 00:34:43,480
functionalities SPL and abuse is off

00:34:38,049 --> 00:34:45,549
let's just write the earth so I can see

00:34:43,480 --> 00:34:51,030
the several stages oh no I have access

00:34:45,549 --> 00:34:51,030
denied I need to configure the usuals

00:34:51,899 --> 00:35:09,339
instead that will access now I will

00:35:03,339 --> 00:35:15,150
access HTTP okay so it runs on just as

00:35:09,339 --> 00:35:21,099
usual and I'm going to verify its used

00:35:15,150 --> 00:35:23,980
yeah see it actually used HTTP to

00:35:21,099 --> 00:35:27,940
properly so everything is functional

00:35:23,980 --> 00:35:30,309
Tomcat native works JSC works but it

00:35:27,940 --> 00:35:32,380
won't use a tomcat it won't use HTTP -

00:35:30,309 --> 00:35:35,020
in that case we'll just connect using

00:35:32,380 --> 00:35:36,970
HTTP 1 1 so basically everything is

00:35:35,020 --> 00:35:41,980
functional the chairs configuration with

00:35:36,970 --> 00:35:46,559
your with your historic CP - WebSockets

00:35:41,980 --> 00:35:49,960
and SPL you know everything works fine

00:35:46,559 --> 00:35:54,040
but uses a lot less memory so I'm going

00:35:49,960 --> 00:35:58,230
to stop these containers now and try to

00:35:54,040 --> 00:35:58,230
do the same with openshift stop

00:36:08,680 --> 00:36:15,620
all right so where's my open ship going

00:36:13,340 --> 00:36:21,080
oh it's going it's going okay

00:36:15,620 --> 00:36:25,250
starting up so now deploying to cloud

00:36:21,080 --> 00:36:27,380
the defense most fun thought so we can

00:36:25,250 --> 00:36:29,660
start a local open chief just like i did

00:36:27,380 --> 00:36:34,250
i'm using the federal open ship packages

00:36:29,660 --> 00:36:36,080
so it's it's open shift for 11 and then

00:36:34,250 --> 00:36:39,530
i'm deploying to use the image to the

00:36:36,080 --> 00:36:42,650
local cluster to the local crowd I'm

00:36:39,530 --> 00:36:50,150
using the yellow I showed I showed and

00:36:42,650 --> 00:36:58,070
then I'll test again okay that will be

00:36:50,150 --> 00:37:03,560
the and surprise basically alright so we

00:36:58,070 --> 00:37:08,410
do I have so did open ship start yes

00:37:03,560 --> 00:37:11,420
open she starts it so that's good and

00:37:08,410 --> 00:37:13,430
then I'm going to deploy with that you

00:37:11,420 --> 00:37:17,360
know which was basically saying to

00:37:13,430 --> 00:37:23,480
deploys that container which is a grown

00:37:17,360 --> 00:37:26,230
one okay so it's open my open she's

00:37:23,480 --> 00:37:26,230
console now

00:37:35,560 --> 00:37:40,540
in case I'm going to import the yellow

00:37:37,720 --> 00:37:52,810
with my super brother and my super the

00:37:40,540 --> 00:37:57,400
container right create okay so I'm going

00:37:52,810 --> 00:38:07,780
to create if cost God which is not

00:37:57,400 --> 00:38:09,280
starting now it's running I don't know

00:38:07,780 --> 00:38:18,330
where it showed up at not running

00:38:09,280 --> 00:38:20,830
initially its own alright it's fine good

00:38:18,330 --> 00:38:22,930
alright so can you can you can look at

00:38:20,830 --> 00:38:26,770
the startup vlogs and here you won't get

00:38:22,930 --> 00:38:30,580
the error about the cube unities cluster

00:38:26,770 --> 00:38:34,000
because it's enabled like you see the a

00:38:30,580 --> 00:38:38,110
checklist catalina klooster is started

00:38:34,000 --> 00:38:40,630
tribe support tribes is there and you

00:38:38,110 --> 00:38:44,050
also get like a don't know where but

00:38:40,630 --> 00:38:47,700
you're going to get you're going to get

00:38:44,050 --> 00:38:49,690
like the members being added as well

00:38:47,700 --> 00:38:51,730
normally you're supposed to get the

00:38:49,690 --> 00:38:56,260
first number but the prompt it's not

00:38:51,730 --> 00:39:00,580
zero yeah you see them when you add some

00:38:56,260 --> 00:39:06,040
more pods which i'll do it will fail but

00:39:00,580 --> 00:39:11,500
I'll do it anyway so let's see so I'm

00:39:06,040 --> 00:39:14,470
going to access my container again so

00:39:11,500 --> 00:39:16,660
it's still working just fine so I don't

00:39:14,470 --> 00:39:20,340
know it does that I think I forgot to

00:39:16,660 --> 00:39:20,340
configure my user here

00:39:32,290 --> 00:39:35,290
okay

00:39:41,930 --> 00:39:52,350
okay and the last thing I'll do now is

00:39:46,730 --> 00:39:54,060
that access the cookies example just

00:39:52,350 --> 00:39:58,290
another thing that's working so

00:39:54,060 --> 00:40:00,900
basically that creates a session and it

00:39:58,290 --> 00:40:04,050
sets like cooky in the browser or in the

00:40:00,900 --> 00:40:06,510
session so the things that I'm going to

00:40:04,050 --> 00:40:09,630
add parts and I'm going to show that the

00:40:06,510 --> 00:40:13,380
cluster is working unfortunately as you

00:40:09,630 --> 00:40:15,360
can see session replication is not

00:40:13,380 --> 00:40:17,490
working because of missing Java

00:40:15,360 --> 00:40:20,910
summarization is not implemented in grow

00:40:17,490 --> 00:40:22,740
that this issue and so it's going to

00:40:20,910 --> 00:40:26,340
fail to allocate the session but at

00:40:22,740 --> 00:40:43,260
least is going to discover also of the

00:40:26,340 --> 00:40:44,970
nodes and otherwise seems to work and so

00:40:43,260 --> 00:40:47,609
I'm going to add more but the things

00:40:44,970 --> 00:40:50,100
that you'll see how quickly it scales to

00:40:47,609 --> 00:40:52,050
four basically they are it deploys the

00:40:50,100 --> 00:40:54,270
parts and then it will start them and

00:40:52,050 --> 00:40:57,540
it's very quick actually if you try that

00:40:54,270 --> 00:41:01,859
with with a java stuff will take forever

00:40:57,540 --> 00:41:05,910
now it takes forever oh no it's probably

00:41:01,859 --> 00:41:08,100
my laptop anyway - it's fast - it's fast

00:41:05,910 --> 00:41:10,260
on my desktop but anywhere morning

00:41:08,100 --> 00:41:14,040
photon cats in toil is the same thing

00:41:10,260 --> 00:41:19,320
now so we are going to show what

00:41:14,040 --> 00:41:22,320
happened basically in the logs so it

00:41:19,320 --> 00:41:27,390
still starts pretty fast in matter of

00:41:22,320 --> 00:41:32,160
milliseconds and it detected the other

00:41:27,390 --> 00:41:33,810
members of the cluster so that's all we

00:41:32,160 --> 00:41:40,380
are going to get at this point because

00:41:33,810 --> 00:41:43,790
in fine try to refresh here see works

00:41:40,380 --> 00:41:51,330
but it will fail to replicate the cookie

00:41:43,790 --> 00:41:53,340
it's working but I don't see I don't

00:41:51,330 --> 00:41:55,869
remember where I can see the failure but

00:41:53,340 --> 00:41:58,720
I saw it basically it will fail

00:41:55,869 --> 00:42:04,210
- with a clear with nothing not

00:41:58,720 --> 00:42:09,549
implemented exception yeah maybe yeah

00:42:04,210 --> 00:42:12,819
that's a good idea but I'll try to

00:42:09,549 --> 00:42:19,869
access another host

00:42:12,819 --> 00:42:21,789
I think tree is going to work yeah now I

00:42:19,869 --> 00:42:24,069
see that it didn't replicate the

00:42:21,789 --> 00:42:27,539
sessions here and they think the arrow

00:42:24,069 --> 00:42:35,349
is going to be in the log

00:42:27,539 --> 00:42:37,680
no it's not in that one kibbutz it's May

00:42:35,349 --> 00:42:37,680
logs

00:42:44,059 --> 00:42:49,979
it's actually pretty good well anyway

00:42:47,910 --> 00:42:51,539
don't replicate the session that tells

00:42:49,979 --> 00:42:53,519
that's where it is that way it didn't

00:42:51,539 --> 00:42:55,979
replicate the thing I don't remember

00:42:53,519 --> 00:42:58,739
which path shows the session problem but

00:42:55,979 --> 00:43:00,569
it doesn't work alright so I'm done I

00:42:58,739 --> 00:43:03,719
demonstrated everything including

00:43:00,569 --> 00:43:05,400
cluster functionality on grow so as far

00:43:03,719 --> 00:43:09,479
as I know everything is more or less

00:43:05,400 --> 00:43:12,029
functional grow except for the

00:43:09,479 --> 00:43:16,319
documented problems which are mainly TLS

00:43:12,029 --> 00:43:18,660
which is sketchy and sterilization which

00:43:16,319 --> 00:43:21,630
is not implemented so the benefits as

00:43:18,660 --> 00:43:25,229
you could see the startup time is more

00:43:21,630 --> 00:43:28,829
than 10 times faster memory use is very

00:43:25,229 --> 00:43:31,979
low at least initially and it means that

00:43:28,829 --> 00:43:35,150
in some in most cases I mean unless the

00:43:31,979 --> 00:43:38,039
web start time is really long but I

00:43:35,150 --> 00:43:40,109
think in most cases on-demand services

00:43:38,039 --> 00:43:42,390
are possible if you're allowed to

00:43:40,109 --> 00:43:46,049
sacrifice 50 milliseconds for first

00:43:42,390 --> 00:43:49,829
request basically it works very well as

00:43:46,049 --> 00:43:53,160
a small container image if you don't

00:43:49,829 --> 00:43:56,309
need TLS mostly at this point I really

00:43:53,160 --> 00:43:58,859
hope all this these two major issues in

00:43:56,309 --> 00:44:02,429
grower resolved sooner rather than later

00:43:58,859 --> 00:44:04,259
you know and it still looks like a

00:44:02,429 --> 00:44:06,329
normal ton cat like you get your

00:44:04,259 --> 00:44:08,749
folder or the web apps are the same

00:44:06,329 --> 00:44:13,679
basically I made no modification to the

00:44:08,749 --> 00:44:15,749
to the web apps except packaging so

00:44:13,679 --> 00:44:20,009
however as you could see you need a lot

00:44:15,749 --> 00:44:23,509
of work to to test and setup the tracing

00:44:20,009 --> 00:44:26,579
agent isn't very user friendly you

00:44:23,509 --> 00:44:28,799
couldn't use Java libraries which are

00:44:26,579 --> 00:44:30,839
all compatible you could ask the grown

00:44:28,799 --> 00:44:35,670
so the libraries developer to know about

00:44:30,839 --> 00:44:38,670
that so in addition to some realization

00:44:35,670 --> 00:44:40,679
and TLS which is limited you have no jmx

00:44:38,670 --> 00:44:44,789
all right don't like that because I like

00:44:40,679 --> 00:44:47,369
gem x4 monitoring so and it may not

00:44:44,789 --> 00:44:49,739
decide beneficial if you have loud high

00:44:47,369 --> 00:44:54,509
loads over like if you have a high load

00:44:49,739 --> 00:44:56,519
server with 100 web apps I don't think

00:44:54,509 --> 00:44:57,090
you want to go to for that process and

00:44:56,519 --> 00:44:59,730
also

00:44:57,090 --> 00:45:02,580
the startup time benefit will still be

00:44:59,730 --> 00:45:06,150
there but the memory use you'll see if

00:45:02,580 --> 00:45:08,970
you actually benched the grow native

00:45:06,150 --> 00:45:12,800
image the memory use will swell and will

00:45:08,970 --> 00:45:15,720
be just as big eventually as hotspot 1

00:45:12,800 --> 00:45:19,200
so you won't get any memory benefit on

00:45:15,720 --> 00:45:26,910
the long run and then don't

00:45:19,200 --> 00:45:31,010
so any questions you're all good already

00:45:26,910 --> 00:45:31,010
- right right now

00:45:33,650 --> 00:45:40,740
we'll drive out what trend IRMS ah I

00:45:38,790 --> 00:45:47,730
haven't tried actually that's a good

00:45:40,740 --> 00:45:49,770
question I don't know I'll have to try

00:45:47,730 --> 00:45:52,140
actually I didn't generate it I don't

00:45:49,770 --> 00:45:55,530
try it because usually I do it with J

00:45:52,140 --> 00:45:59,150
console and I think yeah this is an open

00:45:55,530 --> 00:46:02,580
door a special J console the ocean with

00:45:59,150 --> 00:46:05,060
sorry with grow and I think you can try

00:46:02,580 --> 00:46:05,060
that one

00:46:16,990 --> 00:46:44,240
now I don't know if I if I can type a

00:46:20,180 --> 00:46:51,549
signal in zero it's limited yeah you

00:46:44,240 --> 00:46:51,549
need to add packages basically yeah oh

00:46:55,900 --> 00:47:21,319
yes a skill yes feel better know which

00:47:14,030 --> 00:47:26,359
one isn't ones 107 maybe one ready now I

00:47:21,319 --> 00:47:34,930
think it would be 107 my own oh yeah

00:47:26,359 --> 00:47:34,930
okay so it's kill what - what - one okay

00:47:36,880 --> 00:47:49,430
let's see what it did and I did nothing

00:47:42,920 --> 00:47:51,890
yeah nah yeah yeah it's the same I

00:47:49,430 --> 00:47:53,809
clicked on the same yeah so I don't know

00:47:51,890 --> 00:47:59,170
you'll have to check I'll check it

00:47:53,809 --> 00:48:01,940
anyway zone that was a good question

00:47:59,170 --> 00:48:03,619
yeah I didn't try

00:48:01,940 --> 00:48:06,440
well it's not jaqen so you know it's

00:48:03,619 --> 00:48:13,099
virtual via many things at the bundle I

00:48:06,440 --> 00:48:15,410
haven't tried it yet so no no it doesn't

00:48:13,099 --> 00:48:17,930
use JMX it's a special one which doesn't

00:48:15,410 --> 00:48:20,140
use damage there's no jam X at all no

00:48:17,930 --> 00:48:20,140
nothing

00:48:22,930 --> 00:48:36,590
yes yes yes they secure with using the

00:48:34,160 --> 00:48:41,080
console and ambience to Ingenix to get

00:48:36,590 --> 00:48:44,270
might read them so oh well

00:48:41,080 --> 00:48:45,980
any other question yeah zero I'm not

00:48:44,270 --> 00:49:01,490
going to hear you without the metal

00:48:45,980 --> 00:49:04,940
thing oh I don't know how the garbage

00:49:01,490 --> 00:49:07,040
collection works I've noticed it worked

00:49:04,940 --> 00:49:08,420
based on memory but I don't know how the

00:49:07,040 --> 00:49:12,170
implemented is that I'm not a girl

00:49:08,420 --> 00:49:13,670
developer oh so you have to fall out

00:49:12,170 --> 00:49:16,190
that the our mailing list

00:49:13,670 --> 00:49:17,900
maybe because well I haven't looked at

00:49:16,190 --> 00:49:20,780
the implementation details of Gras at

00:49:17,900 --> 00:49:22,940
this point except some bugs that I was

00:49:20,780 --> 00:49:25,070
interested in because they have run into

00:49:22,940 --> 00:49:27,550
bugs at some point I try to build it's

00:49:25,070 --> 00:49:30,620
pretty difficult to build already so

00:49:27,550 --> 00:49:33,680
it's not a very welcoming open source

00:49:30,620 --> 00:49:35,870
project it's my open source basically if

00:49:33,680 --> 00:49:41,170
you're interested in since github it's

00:49:35,870 --> 00:49:41,170
rock or growl going to show the path

00:49:42,670 --> 00:49:47,770
yeah there it is

00:49:48,430 --> 00:49:56,870
so that and to build it you have to use

00:49:52,610 --> 00:49:58,940
a JVM zi8 JVM that's a special JVM

00:49:56,870 --> 00:50:02,360
implementing some what is going to

00:49:58,940 --> 00:50:04,310
compare your interface or whatever some

00:50:02,360 --> 00:50:07,220
weird stuff and then you have to build

00:50:04,310 --> 00:50:09,050
some to also and then you'll be able to

00:50:07,220 --> 00:50:12,650
build the substrate VM which is the

00:50:09,050 --> 00:50:15,620
interesting part and then you'll be able

00:50:12,650 --> 00:50:18,680
to use your native image once you build

00:50:15,620 --> 00:50:21,650
it so it's pretty difficult to build

00:50:18,680 --> 00:50:23,630
yourself but in Las Vegas actually I did

00:50:21,650 --> 00:50:27,160
this presentation and I built various

00:50:23,630 --> 00:50:29,780
and growled myself I think I'm done so

00:50:27,160 --> 00:50:32,470
you have a nose or a quick question of

00:50:29,780 --> 00:50:32,470
the ways we are doing

00:50:33,660 --> 00:50:43,800
No all right thank you

00:50:36,480 --> 00:50:43,800

YouTube URL: https://www.youtube.com/watch?v=HvNlaPBNRqE


