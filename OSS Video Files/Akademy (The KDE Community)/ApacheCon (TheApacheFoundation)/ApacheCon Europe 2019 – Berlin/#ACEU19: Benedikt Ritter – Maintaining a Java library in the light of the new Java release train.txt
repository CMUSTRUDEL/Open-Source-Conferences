Title: #ACEU19: Benedikt Ritter – Maintaining a Java library in the light of the new Java release train
Publication date: 2019-10-29
Playlist: ApacheCon Europe 2019 – Berlin
Description: 
	More: https://aceu19.apachecon.com/session/maintaining-java-library-light-new-java-release-train

Oracle has introduced a new release train for the Java platform. Instead of having relatively long lived major releases with no breaking changes, new major releases will now be published every six months. Furthermore Oracle announced that binary compatibility may be broken between major releases. The new model of releasing Java versions together with Java's module system poses new challenges on library authors. This talk explores what this means for the Apache Commons project - a project providing some of the most used libraries in the Java ecosystem.
Captions: 
	00:00:05,900 --> 00:00:12,800
I'm going to talk about the new Java

00:00:08,750 --> 00:00:15,950
release train as you might know things

00:00:12,800 --> 00:00:18,230
have changed there in the past it has

00:00:15,950 --> 00:00:20,540
been like one release came out and then

00:00:18,230 --> 00:00:22,730
you have had like five or ten years to

00:00:20,540 --> 00:00:25,579
migrate to the next Java major release

00:00:22,730 --> 00:00:29,599
and there has been a significant change

00:00:25,579 --> 00:00:31,579
in this and this towards tries to look

00:00:29,599 --> 00:00:36,440
at what are the challenges that are

00:00:31,579 --> 00:00:39,379
arising from this change and my name is

00:00:36,440 --> 00:00:41,449
Benedict Ritter I'm a senior software

00:00:39,379 --> 00:00:45,370
engineer at Gradle the company that

00:00:41,449 --> 00:00:47,929
builds the tool that you might know and

00:00:45,370 --> 00:00:52,670
I've been working on the Apache Commons

00:00:47,929 --> 00:00:55,070
project for a long time and so when

00:00:52,670 --> 00:00:57,530
you've been at the keynote last set that

00:00:55,070 --> 00:00:59,780
the Jakarta project was actually one of

00:00:57,530 --> 00:01:02,269
the first top-level projects and Apache

00:00:59,780 --> 00:01:04,580
Commons was formed inside Jakarta so

00:01:02,269 --> 00:01:07,370
it's a really old project or one of the

00:01:04,580 --> 00:01:10,610
oldest project and it's a project that's

00:01:07,370 --> 00:01:15,410
about maintaining a set of reusable java

00:01:10,610 --> 00:01:17,750
libraries so we have to deal with all

00:01:15,410 --> 00:01:20,360
these challenges like maintaining

00:01:17,750 --> 00:01:23,870
backwards compatibility and stuff like

00:01:20,360 --> 00:01:28,340
this and so we were impacted by the

00:01:23,870 --> 00:01:31,370
changes to the release model of Java and

00:01:28,340 --> 00:01:33,170
I mean I haven't been around when it

00:01:31,370 --> 00:01:35,840
started in 1999 I was in elementary

00:01:33,170 --> 00:01:38,750
school back then but I've been working

00:01:35,840 --> 00:01:42,230
on the Apache Commons for I think seven

00:01:38,750 --> 00:01:44,660
or eight years now so some some more

00:01:42,230 --> 00:01:47,480
about me I do a little podcast it's

00:01:44,660 --> 00:01:49,910
actually a German podcast about MIT so

00:01:47,480 --> 00:01:53,810
if you if you speak German and you're

00:01:49,910 --> 00:01:57,580
interested in podcasts then just give it

00:01:53,810 --> 00:01:59,750
a try it's like the conversion or

00:01:57,580 --> 00:02:01,100
conversational thing between me and a

00:01:59,750 --> 00:02:03,740
colleague and we're discussing various

00:02:01,100 --> 00:02:05,180
topics so yeah and of course you can

00:02:03,740 --> 00:02:08,030
follow me on Twitter I usually only

00:02:05,180 --> 00:02:11,209
tweet about tech related stuff so no cat

00:02:08,030 --> 00:02:13,340
pictures or anything just what I find

00:02:11,209 --> 00:02:18,650
interesting during my journey through

00:02:13,340 --> 00:02:21,440
the IT world okay so with that let's

00:02:18,650 --> 00:02:25,569
have a look at the agenda so I would

00:02:21,440 --> 00:02:28,310
like to to give you an overview over the

00:02:25,569 --> 00:02:31,430
past and the current Java release

00:02:28,310 --> 00:02:33,549
strategy and the roadmap and how they

00:02:31,430 --> 00:02:36,829
are dealing with things at the moment

00:02:33,549 --> 00:02:40,459
then I'd like to talk a little bit more

00:02:36,829 --> 00:02:42,769
in detail about Java 9 because that was

00:02:40,459 --> 00:02:45,680
like a major ripple through the old

00:02:42,769 --> 00:02:47,540
ecosystem because of some some new

00:02:45,680 --> 00:02:51,829
features depth were introduced there and

00:02:47,540 --> 00:02:55,430
I'm going to talk about what that meant

00:02:51,829 --> 00:02:59,000
for for libraries like uncommon slang

00:02:55,430 --> 00:03:02,989
for example and then I have a few slides

00:02:59,000 --> 00:03:05,720
summing that up and going into the

00:03:02,989 --> 00:03:08,209
challenges that I see there and yeah

00:03:05,720 --> 00:03:15,560
then we can discuss how we want to deal

00:03:08,209 --> 00:03:18,409
with that ok so let's have a look at the

00:03:15,560 --> 00:03:22,519
Java release policy how it has been and

00:03:18,409 --> 00:03:26,959
how it's now so this is actually a list

00:03:22,519 --> 00:03:30,079
from Wikipedia that lists all the major

00:03:26,959 --> 00:03:33,400
Java releases on this page up on to Java

00:03:30,079 --> 00:03:37,730
8 and the next slide will will have

00:03:33,400 --> 00:03:41,590
where we are now and if you look at the

00:03:37,730 --> 00:03:45,139
release dates and end of public updates

00:03:41,590 --> 00:03:46,970
dates there are in the beginning that it

00:03:45,139 --> 00:03:48,560
was like ok every year there was a new

00:03:46,970 --> 00:03:50,720
release I mean they were pushing this

00:03:48,560 --> 00:03:53,389
platform so they had to do a lot of

00:03:50,720 --> 00:03:58,629
releases but then it got slower and

00:03:53,389 --> 00:04:05,120
slower so for example from Java 1.4 and

00:03:58,629 --> 00:04:07,430
Java 5.0 it was 2 years then and then up

00:04:05,120 --> 00:04:10,190
to Java 6 it was again two years and

00:04:07,430 --> 00:04:13,549
then I see F I'm missing the year

00:04:10,190 --> 00:04:17,539
actually Java 7 was that I can't

00:04:13,549 --> 00:04:21,349
remember sorry 2010 ok thank you for

00:04:17,539 --> 00:04:24,820
that and and as you can see there was

00:04:21,349 --> 00:04:27,919
always an overlap between the release

00:04:24,820 --> 00:04:29,630
the end of public updates and the next

00:04:27,919 --> 00:04:30,479
release so you could stay on the last

00:04:29,630 --> 00:04:32,729
version

00:04:30,479 --> 00:04:36,449
and still get updates and then have a

00:04:32,729 --> 00:04:38,219
look into the next version and think

00:04:36,449 --> 00:04:42,779
about whether it makes sense for you to

00:04:38,219 --> 00:04:46,289
adopt it or come up with a strategy find

00:04:42,779 --> 00:04:47,969
out what you have to change in order to

00:04:46,289 --> 00:04:52,559
get your application running on the next

00:04:47,969 --> 00:04:55,860
release and actually up until Java 8

00:04:52,559 --> 00:04:58,830
there was most of the time there was not

00:04:55,860 --> 00:05:01,740
a lot to do for you because Java was

00:04:58,830 --> 00:05:04,770
developed in a backwards compatible way

00:05:01,740 --> 00:05:06,930
so they only added new api's and new

00:05:04,770 --> 00:05:09,749
features they never removed something so

00:05:06,930 --> 00:05:12,539
when you wrote something for let's say

00:05:09,749 --> 00:05:14,999
Java 1.2 you could be sure that it would

00:05:12,539 --> 00:05:17,789
be running on Java 6 probably if you not

00:05:14,999 --> 00:05:22,770
if you not used internal API s-- and

00:05:17,789 --> 00:05:26,039
stuff like that so Java 8 is oh sorry

00:05:22,770 --> 00:05:27,810
Java 8 is one of the current LTS

00:05:26,039 --> 00:05:30,029
releases that's why it's marked in

00:05:27,810 --> 00:05:34,159
yellow or the red stuff is or already

00:05:30,029 --> 00:05:39,149
out of out of support so Java 8

00:05:34,159 --> 00:05:43,529
currently LTS release and the end of

00:05:39,149 --> 00:05:47,819
public updates was in January 2019

00:05:43,529 --> 00:05:53,930
although there are new JT cables now

00:05:47,819 --> 00:05:58,080
rising like careto from Amazon or and

00:05:53,930 --> 00:06:00,419
depending on which which JDK build you

00:05:58,080 --> 00:06:02,060
use you might get more free updates or

00:06:00,419 --> 00:06:05,159
of course you can always buy the

00:06:02,060 --> 00:06:08,279
commercial update support and then get

00:06:05,159 --> 00:06:11,099
an extended period of updates so this

00:06:08,279 --> 00:06:14,370
was this is what it was in the past we

00:06:11,099 --> 00:06:16,199
had this Java major version that brought

00:06:14,370 --> 00:06:19,860
some cool new features that we could use

00:06:16,199 --> 00:06:21,479
for example Java 5 was very famous

00:06:19,860 --> 00:06:24,270
because it brought generics which was

00:06:21,479 --> 00:06:26,099
like a huge thing but it was easy to

00:06:24,270 --> 00:06:29,639
adapt you didn't have to change the code

00:06:26,099 --> 00:06:32,430
you could if you wanted and now let's

00:06:29,639 --> 00:06:36,539
have a look at how this release train

00:06:32,430 --> 00:06:39,329
has changed in the future so there are

00:06:36,539 --> 00:06:43,320
new some some more colors now so red is

00:06:39,329 --> 00:06:47,730
still the releases that are out of

00:06:43,320 --> 00:06:49,980
out of support basically yellow is again

00:06:47,730 --> 00:06:54,240
the current LTS release that is

00:06:49,980 --> 00:06:56,520
supported green is the current sort of

00:06:54,240 --> 00:06:59,310
the most current major version so the

00:06:56,520 --> 00:07:02,430
last release that still that's like

00:06:59,310 --> 00:07:05,550
active and orange is what's currently

00:07:02,430 --> 00:07:09,530
early access so Java 14 is early access

00:07:05,550 --> 00:07:13,470
and blue the feature the future releases

00:07:09,530 --> 00:07:16,790
so if you take a look at this slide you

00:07:13,470 --> 00:07:20,580
can see that something very significant

00:07:16,790 --> 00:07:23,730
changed here and this is if you look at

00:07:20,580 --> 00:07:27,540
the release dates and the end of free

00:07:23,730 --> 00:07:32,940
public update update States and compare

00:07:27,540 --> 00:07:35,820
that to the next line so the the model

00:07:32,940 --> 00:07:39,750
now is you have if you have some release

00:07:35,820 --> 00:07:41,430
that's not an LTS release then you you

00:07:39,750 --> 00:07:45,990
get the release for example for Java 9

00:07:41,430 --> 00:07:49,410
in September 17 and the end of public

00:07:45,990 --> 00:07:52,080
updates is March 2018 and that's also

00:07:49,410 --> 00:07:56,280
the date when Java 10 is released so

00:07:52,080 --> 00:07:59,250
there's no overlap okay so in the past

00:07:56,280 --> 00:08:02,100
we had this like four years of time to

00:07:59,250 --> 00:08:04,380
migrate and now there is for those

00:08:02,100 --> 00:08:08,520
releases that are not LTS releases

00:08:04,380 --> 00:08:11,730
there's no overlap anymore and that will

00:08:08,520 --> 00:08:14,370
be becoming interesting when I when I go

00:08:11,730 --> 00:08:20,340
go about how they they are changing the

00:08:14,370 --> 00:08:22,560
api's now yeah so we still have this LTS

00:08:20,340 --> 00:08:24,270
releases that are supported a little

00:08:22,560 --> 00:08:29,310
longer for example if you look at Java

00:08:24,270 --> 00:08:34,200
11 the end of public updates is in 2022

00:08:29,310 --> 00:08:38,280
and the next LTS release to come is Java

00:08:34,200 --> 00:08:41,010
17 and that is planned to be released on

00:08:38,280 --> 00:08:44,700
September 20 21 so there is like one

00:08:41,010 --> 00:08:47,130
year overlap if you say okay I use this

00:08:44,700 --> 00:08:49,260
LTS release and then I'm just waiting

00:08:47,130 --> 00:08:51,660
for the next 80s three so that I have

00:08:49,260 --> 00:08:54,810
like this this little overlapping time

00:08:51,660 --> 00:08:59,000
where I can migrate things so this might

00:08:54,810 --> 00:08:59,000
be like a good strategy I guess

00:08:59,310 --> 00:09:08,650
sorry so but something has changed there

00:09:05,740 --> 00:09:11,590
with Java 9 and that is how they handle

00:09:08,650 --> 00:09:12,880
breaking changes at us as I said on the

00:09:11,590 --> 00:09:15,970
first slide

00:09:12,880 --> 00:09:20,410
they never introduced breaking changes

00:09:15,970 --> 00:09:23,290
between JDK 1.0 and Java 8 at least as

00:09:20,410 --> 00:09:27,400
far as I know not in the public API is

00:09:23,290 --> 00:09:31,110
maybe in some some Sun internal whatever

00:09:27,400 --> 00:09:34,890
API is but not in anything in the

00:09:31,110 --> 00:09:38,170
namespace so now they have a new policy

00:09:34,890 --> 00:09:41,560
because they want to move faster and get

00:09:38,170 --> 00:09:45,670
rid of old stuff so they say ok we can

00:09:41,560 --> 00:09:48,990
we can we will mark things that we want

00:09:45,670 --> 00:09:51,040
to get rid of with deprecated so a new

00:09:48,990 --> 00:09:53,950
deprecated annotation has been

00:09:51,040 --> 00:09:55,930
introduced that has some that has some

00:09:53,950 --> 00:09:58,570
some more features for example you can

00:09:55,930 --> 00:10:00,340
say okay it is deprecated and marked for

00:09:58,570 --> 00:10:02,650
removal then we have a boolean value and

00:10:00,340 --> 00:10:04,900
can say ok mark for removal true so that

00:10:02,650 --> 00:10:07,780
people looking at that API know ok this

00:10:04,900 --> 00:10:11,589
is going to be removed eventually and

00:10:07,780 --> 00:10:14,650
the the policy is that if they

00:10:11,589 --> 00:10:18,670
deprecated a feature in one major

00:10:14,650 --> 00:10:21,880
release then they might remove it in the

00:10:18,670 --> 00:10:23,080
next major release so let's think about

00:10:21,880 --> 00:10:26,589
that some more

00:10:23,080 --> 00:10:30,940
so this basically means just an extreme

00:10:26,589 --> 00:10:32,500
example you are on Java 11 because it's

00:10:30,940 --> 00:10:37,060
an LTS release and you are not an insane

00:10:32,500 --> 00:10:39,400
person trying to update your Java

00:10:37,060 --> 00:10:42,970
Runtime every half year because that's a

00:10:39,400 --> 00:10:47,200
huge amount of work and testing and then

00:10:42,970 --> 00:10:48,910
they say ok string this class it's not

00:10:47,200 --> 00:10:50,740
working anymore let's deprecated it and

00:10:48,910 --> 00:10:53,920
replace it with something much better

00:10:50,740 --> 00:10:56,230
and they do this in Java 12 and remember

00:10:53,920 --> 00:10:57,310
you're still on Java 11 and then they

00:10:56,230 --> 00:10:59,800
say ok

00:10:57,310 --> 00:11:01,420
I mean remarked it everybody knows about

00:10:59,800 --> 00:11:04,930
it that it's deprecated so let's remove

00:11:01,420 --> 00:11:08,380
it in Java 13 and then you upgrade to

00:11:04,930 --> 00:11:10,840
the next LTS release which is Java 17

00:11:08,380 --> 00:11:15,550
and then BOOM

00:11:10,840 --> 00:11:17,410
so you don't know it you have never seen

00:11:15,550 --> 00:11:19,510
that deprecation you just go from the

00:11:17,410 --> 00:11:22,330
one LTS release to the next LTS release

00:11:19,510 --> 00:11:27,130
and stuff doesn't compile anymore

00:11:22,330 --> 00:11:29,410
so that's kind of a shift in the policy

00:11:27,130 --> 00:11:32,170
I'd not say it's like the biggest

00:11:29,410 --> 00:11:34,470
problem ever but as a Java developer you

00:11:32,170 --> 00:11:37,990
have to get used to this I guess and

00:11:34,470 --> 00:11:41,580
don't you dare use Java EE because

00:11:37,990 --> 00:11:45,430
that's a whole nother mess to be honest

00:11:41,580 --> 00:11:47,830
because Java EE has been so Java EE is

00:11:45,430 --> 00:11:51,610
like the Enterprise Edition with which

00:11:47,830 --> 00:11:54,130
lives in the Java X namespace and this

00:11:51,610 --> 00:11:55,930
has been recently contributed to eclipse

00:11:54,130 --> 00:11:59,730
foundation I don't know exactly when it

00:11:55,930 --> 00:12:03,610
was but it's not too long ago and they

00:11:59,730 --> 00:12:06,730
negotiated how they can develop Java EE

00:12:03,610 --> 00:12:11,170
in under the umbrella of the Eclipse

00:12:06,730 --> 00:12:13,270
Foundation and the result was yeah you

00:12:11,170 --> 00:12:15,880
can have this but you must not use the

00:12:13,270 --> 00:12:18,820
Java X namespace so basically all those

00:12:15,880 --> 00:12:21,370
api's you know from the Java X namespace

00:12:18,820 --> 00:12:24,339
they are now migrated to the new Jakarta

00:12:21,370 --> 00:12:26,170
namespace so that also doesn't compile

00:12:24,339 --> 00:12:29,680
anymore and of course doesn't run

00:12:26,170 --> 00:12:32,290
anymore so if you are using that you

00:12:29,680 --> 00:12:35,440
will have some work I guess to stay

00:12:32,290 --> 00:12:38,770
compatible with the next Jakarta he

00:12:35,440 --> 00:12:45,280
releases actually Jakarta is the name

00:12:38,770 --> 00:12:48,220
now of that okay so if you're interested

00:12:45,280 --> 00:12:50,800
in just the deprecations that they

00:12:48,220 --> 00:12:53,410
introduced in Java 9 because I was

00:12:50,800 --> 00:12:55,750
thinking can't be too much maybe like

00:12:53,410 --> 00:12:58,300
two or three things that they deprecated

00:12:55,750 --> 00:13:00,100
I've inserted a link here it's a long

00:12:58,300 --> 00:13:03,670
list of things that they deprecated only

00:13:00,100 --> 00:13:07,420
in Java 9 so I don't know how much of

00:13:03,670 --> 00:13:10,630
that is marked for removal but I think

00:13:07,420 --> 00:13:12,339
it's good to follow this no matter what

00:13:10,630 --> 00:13:14,560
your strategy is if you are if you're

00:13:12,339 --> 00:13:21,720
saying ok I go with the go with the flow

00:13:14,560 --> 00:13:21,720
and sorry yeah ok you

00:13:26,680 --> 00:13:32,240
okay yeah we get to that in just a

00:13:30,050 --> 00:13:38,210
minute to do the fun of the module

00:13:32,240 --> 00:13:41,210
system okay so when I prepared that I I

00:13:38,210 --> 00:13:43,190
was thinking okay what the hell happened

00:13:41,210 --> 00:13:45,800
there why did they do that and then I

00:13:43,190 --> 00:13:52,990
was looking some stuff at Wikipedia and

00:13:45,800 --> 00:13:55,400
then I saw 2017 Oracle bought Sun hmm

00:13:52,990 --> 00:14:00,710
might have something to do with that I

00:13:55,400 --> 00:14:02,720
guess so I think that they basically saw

00:14:00,710 --> 00:14:05,360
Oracle basically I think they had a

00:14:02,720 --> 00:14:08,510
different strategy for what I want to do

00:14:05,360 --> 00:14:10,340
with Java and that meant that I had to

00:14:08,510 --> 00:14:11,990
change the way Java was released in the

00:14:10,340 --> 00:14:14,390
past so I mean it's that good right

00:14:11,990 --> 00:14:16,880
because they bought Java so they can do

00:14:14,390 --> 00:14:19,400
whatever they want but it has an impact

00:14:16,880 --> 00:14:21,950
on all the users and that's why we were

00:14:19,400 --> 00:14:27,590
sitting here together and discussing

00:14:21,950 --> 00:14:31,040
this okay so let's have a look at Java 9

00:14:27,590 --> 00:14:33,590
which I called dawn of a new age because

00:14:31,040 --> 00:14:37,070
it was really like a ripple through the

00:14:33,590 --> 00:14:40,570
whole ecosystem and my tech line is how

00:14:37,070 --> 00:14:44,720
one release broken ecosystem actually

00:14:40,570 --> 00:14:48,500
but I get get to that so what I think

00:14:44,720 --> 00:14:50,690
the idea was behind Java 9 and just it's

00:14:48,500 --> 00:14:52,190
not like documented somewhere it's just

00:14:50,690 --> 00:14:55,520
what I think why they did it this way

00:14:52,190 --> 00:14:58,370
they had the idea okay so we have to

00:14:55,520 --> 00:15:01,430
make Java cloud ready because we have

00:14:58,370 --> 00:15:04,490
all this this cool shiny new cloud stuff

00:15:01,430 --> 00:15:06,590
and people are complaining about Java so

00:15:04,490 --> 00:15:08,780
this is why I put in Apache colored

00:15:06,590 --> 00:15:13,220
cloud there so we know okay we're

00:15:08,780 --> 00:15:15,500
talking about cloud now and they say it

00:15:13,220 --> 00:15:19,580
okay what's the problem with Java or why

00:15:15,500 --> 00:15:23,450
why is it not performing as good in in

00:15:19,580 --> 00:15:26,540
cloud environments as other platforms

00:15:23,450 --> 00:15:28,730
and I I think they came up with okay we

00:15:26,540 --> 00:15:30,530
have this monolithic runtime that is

00:15:28,730 --> 00:15:34,610
kind of a problem because it's fairly

00:15:30,530 --> 00:15:40,730
big so if you write a server application

00:15:34,610 --> 00:15:42,800
and you you put the the JRE under it

00:15:40,730 --> 00:15:46,550
basically it will ship with all the

00:15:42,800 --> 00:15:48,200
desktop code so we will have a WT deploy

00:15:46,550 --> 00:15:50,149
to your server although you're building

00:15:48,200 --> 00:15:52,190
a server application with which doesn't

00:15:50,149 --> 00:15:53,750
make a lot of sense because you don't

00:15:52,190 --> 00:15:58,130
need that code but it's deployed

00:15:53,750 --> 00:16:01,220
nevertheless and this monolithic runtime

00:15:58,130 --> 00:16:04,420
it leads to high memory requirements for

00:16:01,220 --> 00:16:08,660
Java applications compared to two other

00:16:04,420 --> 00:16:11,540
runtimes and considerable startup times

00:16:08,660 --> 00:16:12,740
compared to go for example just just an

00:16:11,540 --> 00:16:14,000
exam because that's what people

00:16:12,740 --> 00:16:15,769
obviously okay go it's so much faster

00:16:14,000 --> 00:16:18,620
and it's so much easier to write

00:16:15,769 --> 00:16:20,420
applications and yeah and then you say

00:16:18,620 --> 00:16:22,670
to them okay how do we connect to our

00:16:20,420 --> 00:16:24,140
add up service and they say oh I guess

00:16:22,670 --> 00:16:26,779
we have to implement it ourselves

00:16:24,140 --> 00:16:30,290
because there's no library for it so but

00:16:26,779 --> 00:16:32,320
nevertheless I think that is what they

00:16:30,290 --> 00:16:35,600
had in mind and then they said okay so

00:16:32,320 --> 00:16:38,029
here's an idea let's split up this

00:16:35,600 --> 00:16:40,600
runtime so we can make we can make it

00:16:38,029 --> 00:16:43,339
smaller for cloud applications and

00:16:40,600 --> 00:16:48,170
therefore we really need to modernize

00:16:43,339 --> 00:16:50,420
our runtime so people can select which

00:16:48,170 --> 00:16:53,329
kinds of the which part of the runtime

00:16:50,420 --> 00:16:56,570
they need and therefore we need to add

00:16:53,329 --> 00:16:59,890
support for software modules so we have

00:16:56,570 --> 00:17:03,020
this we have this clearly modeled and

00:16:59,890 --> 00:17:05,740
therefore we need to define a way for

00:17:03,020 --> 00:17:08,929
application developers so they can say

00:17:05,740 --> 00:17:10,640
which model modules they actually need

00:17:08,929 --> 00:17:12,740
so because if you write a server

00:17:10,640 --> 00:17:18,110
application and you want to have like

00:17:12,740 --> 00:17:20,600
this minimal runtime thing you need to

00:17:18,110 --> 00:17:23,089
tell it somehow or you need to define

00:17:20,600 --> 00:17:26,870
somehow which parts you need to for run

00:17:23,089 --> 00:17:29,030
in your server so like jdk base and i

00:17:26,870 --> 00:17:31,640
don't know how all the models what the

00:17:29,030 --> 00:17:33,380
names of all the modules are but i think

00:17:31,640 --> 00:17:37,130
this was basically the idea so provide

00:17:33,380 --> 00:17:39,169
some support for letting applications

00:17:37,130 --> 00:17:40,910
define which parts of the runtime they

00:17:39,169 --> 00:17:43,370
need so they can strip down the runtime

00:17:40,910 --> 00:17:44,570
so it's smaller it needs less memory and

00:17:43,370 --> 00:17:48,140
it starts out faster

00:17:44,570 --> 00:17:52,429
sounds like a good idea I guess

00:17:48,140 --> 00:17:54,769
and they said tada here's module info so

00:17:52,429 --> 00:17:56,659
if you want to go that direction and you

00:17:54,769 --> 00:17:58,039
want to want to work with the module

00:17:56,659 --> 00:18:00,320
system when you materialize your

00:17:58,039 --> 00:18:03,409
application you will need to have to

00:18:00,320 --> 00:18:05,899
introduce this module info file and

00:18:03,409 --> 00:18:08,330
that's basically for the compiler to

00:18:05,899 --> 00:18:11,120
understand what's the name of this

00:18:08,330 --> 00:18:15,529
module which other modules does it

00:18:11,120 --> 00:18:21,529
require and which packages does it

00:18:15,529 --> 00:18:23,720
export yeah and you just put it inside

00:18:21,529 --> 00:18:26,720
your your project and the compiler will

00:18:23,720 --> 00:18:28,820
help you to figure out how it works and

00:18:26,720 --> 00:18:31,490
there's there's another very important

00:18:28,820 --> 00:18:33,919
change so if you go down that road you

00:18:31,490 --> 00:18:35,809
no longer work with a class path that

00:18:33,919 --> 00:18:37,940
you know from from Java

00:18:35,809 --> 00:18:39,230
- CP and then you can pass all the jobs

00:18:37,940 --> 00:18:42,169
you want to have on your class path to

00:18:39,230 --> 00:18:45,760
run your application there's a new

00:18:42,169 --> 00:18:49,120
concept that's called the module path

00:18:45,760 --> 00:18:54,889
that is used for modulized applications

00:18:49,120 --> 00:18:57,049
but of course if you want to build a

00:18:54,889 --> 00:18:59,000
modularized application everything you

00:18:57,049 --> 00:19:02,330
want to use you're not only using like

00:18:59,000 --> 00:19:04,519
the the runtime or the JDK you you're

00:19:02,330 --> 00:19:07,039
using all sorts of libraries and

00:19:04,519 --> 00:19:10,010
frameworks and I don't know

00:19:07,039 --> 00:19:12,649
persistence mapping mappers and whatnot

00:19:10,010 --> 00:19:15,130
they all need to be valid software

00:19:12,649 --> 00:19:21,529
modules so you can deploy them into

00:19:15,130 --> 00:19:26,269
modulized application and that led to

00:19:21,529 --> 00:19:28,789
another problem because Java 9 is is all

00:19:26,269 --> 00:19:32,450
or nothing you know if not Java 9 but

00:19:28,789 --> 00:19:35,269
the whole module system thing so as I

00:19:32,450 --> 00:19:37,940
said previously you got a new release

00:19:35,269 --> 00:19:40,580
like Java 5 or Java 8 and it brought

00:19:37,940 --> 00:19:42,470
some cool new api's and you were free to

00:19:40,580 --> 00:19:44,779
try them out you could adopt them slowly

00:19:42,470 --> 00:19:46,700
maybe talk to your colleague and say hey

00:19:44,779 --> 00:19:49,850
how about we will place this for loop

00:19:46,700 --> 00:19:51,679
with a nice little stream and then you

00:19:49,850 --> 00:19:53,899
gave it a try and then it decided ok

00:19:51,679 --> 00:19:55,909
it's cool we want to do this or you said

00:19:53,899 --> 00:19:58,130
ok it's not for us let's just stay with

00:19:55,909 --> 00:20:01,549
with the loops it's it's clear for us or

00:19:58,130 --> 00:20:04,960
whatever so it was like opt-in

00:20:01,549 --> 00:20:07,549
were free to do it or not but with the

00:20:04,960 --> 00:20:09,019
module system as I said you have to

00:20:07,549 --> 00:20:11,509
modulus your whole application you

00:20:09,019 --> 00:20:13,249
cannot say okay let's just make this one

00:20:11,509 --> 00:20:15,739
thing like the coughing is the module

00:20:13,249 --> 00:20:18,559
and the rest is just like we did it

00:20:15,739 --> 00:20:21,019
before like on the class path because

00:20:18,559 --> 00:20:26,419
everything has to run on on the module

00:20:21,019 --> 00:20:28,820
path then and here's a famous quote of

00:20:26,419 --> 00:20:30,860
of a colleague of mine mark Philip who's

00:20:28,820 --> 00:20:32,090
the J unit 5 project leader and he said

00:20:30,860 --> 00:20:33,320
so the module system is maybe

00:20:32,090 --> 00:20:35,989
interesting for people writing books

00:20:33,320 --> 00:20:38,779
about the module system because if you

00:20:35,989 --> 00:20:41,749
think about it what were Java developers

00:20:38,779 --> 00:20:44,720
asking for before Java 9 I can think of

00:20:41,749 --> 00:20:46,580
multi-line strings or value types or

00:20:44,720 --> 00:20:48,200
stuff like that I can't remember a

00:20:46,580 --> 00:20:50,090
conversation well somebody said to me

00:20:48,200 --> 00:20:52,730
you know what would be really cool if we

00:20:50,090 --> 00:20:54,590
had a module system in Java that's

00:20:52,730 --> 00:20:57,980
really missing here I mean we already

00:20:54,590 --> 00:21:02,450
had our steai that was I mean you could

00:20:57,980 --> 00:21:04,429
use it but if you like I actually had to

00:21:02,450 --> 00:21:07,820
do it at my first company where we

00:21:04,429 --> 00:21:10,070
building Eclipse applications and osg is

00:21:07,820 --> 00:21:12,950
underneath of it and I think Austria is

00:21:10,070 --> 00:21:15,730
it has it has it's it's areas where

00:21:12,950 --> 00:21:19,309
science and although I don't know them

00:21:15,730 --> 00:21:23,359
but there was a module system already ok

00:21:19,309 --> 00:21:28,570
so the question is who why should we do

00:21:23,359 --> 00:21:30,980
it and this is actually the JetBrains

00:21:28,570 --> 00:21:33,470
part of the jet jet brain service so

00:21:30,980 --> 00:21:35,389
they're doing the surveys I think every

00:21:33,470 --> 00:21:38,119
year or every half year I don't know and

00:21:35,389 --> 00:21:40,820
they're asking various questions and one

00:21:38,119 --> 00:21:43,090
question is which java version you are

00:21:40,820 --> 00:21:45,320
using currently i mean it's not like

00:21:43,090 --> 00:21:48,889
representative for the old eco system

00:21:45,320 --> 00:21:51,739
it's just one survey but I have seen

00:21:48,889 --> 00:21:53,419
other other surveys that have kind of

00:21:51,739 --> 00:21:56,509
numbers that are going in the same

00:21:53,419 --> 00:21:59,389
direction so people basically stayed on

00:21:56,509 --> 00:22:04,639
Java 8 because they don't know how to to

00:21:59,389 --> 00:22:07,220
deal with this whole mess and as you can

00:22:04,639 --> 00:22:11,330
see Java 10 and 11 are becoming more

00:22:07,220 --> 00:22:13,549
popular but Java 8 is still the thing so

00:22:11,330 --> 00:22:16,119
let me just ask who a few of you is

00:22:13,549 --> 00:22:16,119
still in Java right

00:22:16,120 --> 00:22:23,409
okay so who is not on job ID sir

00:22:19,039 --> 00:22:27,649
okay you're on Java eleven okay eleven

00:22:23,409 --> 00:22:31,389
okay so okay who is who is on Java

00:22:27,649 --> 00:22:39,769
eleven and is using the module system

00:22:31,389 --> 00:22:46,759
okay okay so Java nine adoption numbers

00:22:39,769 --> 00:22:48,619
I guess we see it here okay so um now I

00:22:46,759 --> 00:22:52,340
talked about the problems that I see

00:22:48,619 --> 00:22:54,799
kind of let's discuss the challenges and

00:22:52,340 --> 00:22:57,559
I have some some some voices from the

00:22:54,799 --> 00:23:00,049
community just some things that are that

00:22:57,559 --> 00:23:04,070
I saw on Twitter for example this email

00:23:00,049 --> 00:23:06,649
by Paul Benedict who is a committer of

00:23:04,070 --> 00:23:08,419
the groovy project you don't have to

00:23:06,649 --> 00:23:10,879
read the text but it's basically about

00:23:08,419 --> 00:23:13,970
hey guys so he wrote to the comments

00:23:10,879 --> 00:23:14,779
list and he said hey guys you are using

00:23:13,970 --> 00:23:17,539
this pattern of

00:23:14,779 --> 00:23:19,309
one point X for the Java version for

00:23:17,539 --> 00:23:21,679
example in common slang there is a class

00:23:19,309 --> 00:23:24,559
that can pass this all for you and then

00:23:21,679 --> 00:23:27,559
you have an API to ask it which version

00:23:24,559 --> 00:23:29,869
am i running on and he says guys do you

00:23:27,559 --> 00:23:33,139
know that they changed this so it's now

00:23:29,869 --> 00:23:36,110
like nine point zero point zero and not

00:23:33,139 --> 00:23:41,179
the one point X anymore

00:23:36,110 --> 00:23:45,139
and I mean this email kind of shows that

00:23:41,179 --> 00:23:48,019
when you're providing API or frameworks

00:23:45,139 --> 00:23:51,169
or libraries everything becomes an API

00:23:48,019 --> 00:23:54,289
even this one method that returns just

00:23:51,169 --> 00:23:56,299
the string saying this is my version

00:23:54,289 --> 00:23:58,490
becomes an API because if you change

00:23:56,299 --> 00:24:01,490
that they changed it stuff will break

00:23:58,490 --> 00:24:05,110
because people expect it to return this

00:24:01,490 --> 00:24:09,440
version number in a certain format and

00:24:05,110 --> 00:24:11,809
actually there were a few few Apache

00:24:09,440 --> 00:24:15,860
projects affected by that for example

00:24:11,809 --> 00:24:17,629
Hadoop couldn't be run on Java 9 in the

00:24:15,860 --> 00:24:20,210
beginning because they were using this

00:24:17,629 --> 00:24:22,639
facility from common slang that wasn't

00:24:20,210 --> 00:24:24,980
able of handling it so we have to make

00:24:22,639 --> 00:24:28,460
another release to push this and I think

00:24:24,980 --> 00:24:30,350
what's interesting here is I set

00:24:28,460 --> 00:24:32,930
in the beginning that they never broke

00:24:30,350 --> 00:24:34,640
never did a breaking change although

00:24:32,930 --> 00:24:36,620
they had this marketing release numbers

00:24:34,640 --> 00:24:39,290
we all said okay this is Java 6 and this

00:24:36,620 --> 00:24:41,420
is Java 5 it will still report as a

00:24:39,290 --> 00:24:45,440
minor release it will still report

00:24:41,420 --> 00:24:50,870
I'm Java 1.6 and I am Java 1.7 and I'm

00:24:45,440 --> 00:24:52,850
Java 1.8 but now it's Java 9 and Java 10

00:24:50,870 --> 00:24:56,720
so that they really reflect here this is

00:24:52,850 --> 00:25:01,730
a major release and we break stuff

00:24:56,720 --> 00:25:03,950
between major releases okay so another

00:25:01,730 --> 00:25:07,700
voice from the community is something I

00:25:03,950 --> 00:25:10,250
saw a few weeks ago somebody developing

00:25:07,700 --> 00:25:12,140
in the equals verifier which is a

00:25:10,250 --> 00:25:13,910
library to make sure your equals

00:25:12,140 --> 00:25:17,540
implementations work and he's

00:25:13,910 --> 00:25:21,410
complaining about Travis CI because it's

00:25:17,540 --> 00:25:24,470
hard to get builds passing there because

00:25:21,410 --> 00:25:27,020
of the way they handle JDK and Travis CI

00:25:24,470 --> 00:25:31,610
for you who don't know is like a CI

00:25:27,020 --> 00:25:33,290
server as a service and of course if

00:25:31,610 --> 00:25:36,880
they want to support Java builds they

00:25:33,290 --> 00:25:39,080
have to have some facilities to define

00:25:36,880 --> 00:25:41,600
which Java version you want to test

00:25:39,080 --> 00:25:43,820
against and there are all sorts of

00:25:41,600 --> 00:25:47,059
problems for example you you cannot you

00:25:43,820 --> 00:25:50,630
cannot forever download old or Java

00:25:47,059 --> 00:25:52,730
versions so sometimes on the Oracle web

00:25:50,630 --> 00:25:55,010
page for example the download links they

00:25:52,730 --> 00:25:57,050
just work don't work anymore and I mean

00:25:55,010 --> 00:25:58,520
do we have to accept these licenses and

00:25:57,050 --> 00:26:00,500
then you have to do hacks where you do a

00:25:58,520 --> 00:26:02,360
curl and test some headers they'd say

00:26:00,500 --> 00:26:06,290
okay I'm really accepting this I'm not a

00:26:02,360 --> 00:26:13,130
robot and yeah so he's complaining about

00:26:06,290 --> 00:26:17,000
that and say I gay who is I think now

00:26:13,130 --> 00:26:18,590
working at pivotal on this project I'm

00:26:17,000 --> 00:26:21,260
not sure but I think so

00:26:18,590 --> 00:26:22,910
but he's famous for his well known for

00:26:21,260 --> 00:26:26,420
his work on the chest containers project

00:26:22,910 --> 00:26:28,910
and he's talking about Gradle and saying

00:26:26,420 --> 00:26:33,880
okay greater doesn't work on jdk 13 why

00:26:28,910 --> 00:26:37,670
is that and it seems to be that there is

00:26:33,880 --> 00:26:40,820
there's as M inside of Gradle and with

00:26:37,670 --> 00:26:41,990
as M as M is a bytecode generating

00:26:40,820 --> 00:26:44,240
language so you can

00:26:41,990 --> 00:26:47,480
rate bytecode directly without having a

00:26:44,240 --> 00:26:53,179
source file and then compiling it for

00:26:47,480 --> 00:26:56,390
ASM the the class class version class

00:26:53,179 --> 00:27:00,980
number version no so there's basically

00:26:56,390 --> 00:27:03,110
an identifier in each class file that

00:27:00,980 --> 00:27:06,050
identifies the version of the

00:27:03,110 --> 00:27:09,740
compatibility of the class so for which

00:27:06,050 --> 00:27:13,910
Java version s compares been compiled so

00:27:09,740 --> 00:27:17,990
if you compile something on say Java 11

00:27:13,910 --> 00:27:19,340
and you try to run it on Java 8 the Java

00:27:17,990 --> 00:27:24,020
8 will complain that it doesn't know

00:27:19,340 --> 00:27:27,320
this dispersion so it's like I think 52

00:27:24,020 --> 00:27:29,570
or something and of course if you are a

00:27:27,320 --> 00:27:37,760
library like ASM this also becomes your

00:27:29,570 --> 00:27:41,630
API so really messy stuff ok so people

00:27:37,760 --> 00:27:45,050
in the community like myself are seeing

00:27:41,630 --> 00:27:46,970
some problems with this and I just

00:27:45,050 --> 00:27:50,030
listed it here for you again so it's

00:27:46,970 --> 00:27:54,010
it's hard to stay compatible with

00:27:50,030 --> 00:27:57,710
different Java versions because I mean

00:27:54,010 --> 00:27:59,809
with a patchy commons project we create

00:27:57,710 --> 00:28:02,059
libraries that are really widely used

00:27:59,809 --> 00:28:06,679
everywhere around the place and the last

00:28:02,059 --> 00:28:09,290
numbers I saw on on maven central were

00:28:06,679 --> 00:28:11,450
that like the only project that is used

00:28:09,290 --> 00:28:14,059
more widely is the J unit project

00:28:11,450 --> 00:28:15,559
because you know everybody tests but not

00:28:14,059 --> 00:28:17,929
everybody uses Apache Commons

00:28:15,559 --> 00:28:21,260
some people use guava or both or

00:28:17,929 --> 00:28:23,059
whatever so we want to support all those

00:28:21,260 --> 00:28:24,190
users and they are running on all the

00:28:23,059 --> 00:28:28,460
different

00:28:24,190 --> 00:28:30,440
Java versions it's really really hard to

00:28:28,460 --> 00:28:34,190
test against ojd case for example

00:28:30,440 --> 00:28:36,290
comments logging is released targeting

00:28:34,190 --> 00:28:38,809
Jabbar 1.2 I mean I don't even have a

00:28:36,290 --> 00:28:41,390
Java 1.2 compile on my machine the the

00:28:38,809 --> 00:28:44,150
oldest thing I have on my Mac is Java

00:28:41,390 --> 00:28:46,850
1.6 and I'm not even sure you can get a

00:28:44,150 --> 00:28:48,800
job at 1.2 compiler for Mac OS somewhere

00:28:46,850 --> 00:28:52,210
you know does anybody know does anybody

00:28:48,800 --> 00:28:52,210
have such an empire

00:28:53,899 --> 00:29:04,460
sorry yeah so I mean that's not that's

00:29:01,139 --> 00:29:07,799
not not their fault maybe yeah I mean

00:29:04,460 --> 00:29:10,980
yeah whatever so anyway comment comments

00:29:07,799 --> 00:29:14,880
logging is really like supporting really

00:29:10,980 --> 00:29:19,200
really really really old versions and as

00:29:14,880 --> 00:29:22,769
you as you saw today in in the panel if

00:29:19,200 --> 00:29:25,409
there is a security issue in comes

00:29:22,769 --> 00:29:27,059
logging we need to fix that so we

00:29:25,409 --> 00:29:30,690
basically have to find out if it works

00:29:27,059 --> 00:29:34,019
on those old JD case because there might

00:29:30,690 --> 00:29:40,500
be some mainframe running somewhere with

00:29:34,019 --> 00:29:43,440
Java from 1999 you don't know so and

00:29:40,500 --> 00:29:45,480
it's a quad ivory like comment slang for

00:29:43,440 --> 00:29:48,659
example you can't can't move fast and

00:29:45,480 --> 00:29:51,149
break things because if you remove a

00:29:48,659 --> 00:29:54,029
method and people build the applications

00:29:51,149 --> 00:29:57,000
and they they say okay I need Apache

00:29:54,029 --> 00:29:59,370
comments Lang three point five because I

00:29:57,000 --> 00:30:01,289
want to use that method and then they

00:29:59,370 --> 00:30:03,960
have a transitive dependency dependency

00:30:01,289 --> 00:30:08,580
to Apache Commons Lang in another

00:30:03,960 --> 00:30:10,590
version and their dependency thought the

00:30:08,580 --> 00:30:12,690
transitive dependency uses a method

00:30:10,590 --> 00:30:14,909
that's not not there anymore and the

00:30:12,690 --> 00:30:17,250
newer release it doesn't work you that's

00:30:14,909 --> 00:30:20,070
it's impossible to get it working so

00:30:17,250 --> 00:30:26,190
this is why the comments project is very

00:30:20,070 --> 00:30:29,760
very conservative when when in

00:30:26,190 --> 00:30:32,269
developing or extending ap is I think I

00:30:29,760 --> 00:30:36,149
have this this year a little bit more so

00:30:32,269 --> 00:30:39,929
what we usually do is if we just ever

00:30:36,149 --> 00:30:43,080
decide to break our api's and we don't

00:30:39,929 --> 00:30:45,389
do that a lot then we make sure that you

00:30:43,080 --> 00:30:47,760
can have the old version and a new

00:30:45,389 --> 00:30:50,940
version together on the flat class path

00:30:47,760 --> 00:30:53,580
so what we will do is we will change the

00:30:50,940 --> 00:30:55,710
Maven coordinates so because in maven

00:30:53,580 --> 00:31:00,120
you can't have like the same course two

00:30:55,710 --> 00:31:01,679
versions with the with the with the same

00:31:00,120 --> 00:31:04,799
coordinates you can you cannot say I

00:31:01,679 --> 00:31:06,169
want to have full version one and full

00:31:04,799 --> 00:31:07,879
version two it

00:31:06,169 --> 00:31:11,330
to have another artifact ID so you can

00:31:07,879 --> 00:31:13,100
declare it both in the same form so we

00:31:11,330 --> 00:31:15,320
changed that but that's not enough

00:31:13,100 --> 00:31:18,950
because even if you could pull it in

00:31:15,320 --> 00:31:21,559
with maven with different artifact IDs

00:31:18,950 --> 00:31:23,600
and and inversions you would still have

00:31:21,559 --> 00:31:26,029
this clash on the classpath if there are

00:31:23,600 --> 00:31:27,559
if these classes there are two times you

00:31:26,029 --> 00:31:29,539
don't know which one will win the newer

00:31:27,559 --> 00:31:32,509
version of the order version so we also

00:31:29,539 --> 00:31:35,330
moved the whole the whole package to a

00:31:32,509 --> 00:31:37,519
new package name and this is why most of

00:31:35,330 --> 00:31:39,559
you probably have or got HD comments

00:31:37,519 --> 00:31:41,570
lang string noodles and organ Petri

00:31:39,559 --> 00:31:43,009
comments length three string muted so

00:31:41,570 --> 00:31:46,609
you always have like these two versions

00:31:43,009 --> 00:31:50,149
because the first is from from the last

00:31:46,609 --> 00:31:53,899
release the last release 9 the 2-point

00:31:50,149 --> 00:31:58,669
x9 and the later is from the 3-point X

00:31:53,899 --> 00:32:01,519
line which is the the current line so

00:31:58,669 --> 00:32:04,730
let me just reiterate breaking changes

00:32:01,519 --> 00:32:06,080
they have never happened before so I

00:32:04,730 --> 00:32:09,190
mean you could have you could use

00:32:06,080 --> 00:32:12,379
libraries like guava where they had more

00:32:09,190 --> 00:32:14,299
more how you say where they had a policy

00:32:12,379 --> 00:32:16,220
to break things sometimes and that led

00:32:14,299 --> 00:32:18,499
to problems and eventually they decided

00:32:16,220 --> 00:32:20,570
not to break things anymore but you

00:32:18,499 --> 00:32:22,249
could trust your ear on time you knew ok

00:32:20,570 --> 00:32:25,700
this run time is rock-solid there will

00:32:22,249 --> 00:32:28,669
never be a change but this is changed

00:32:25,700 --> 00:32:34,399
now so you cannot cannot expect it

00:32:28,669 --> 00:32:37,249
anymore so looking from a library also

00:32:34,399 --> 00:32:40,269
perspective let's say we have this this

00:32:37,249 --> 00:32:43,249
breaking change that I described before

00:32:40,269 --> 00:32:47,239
if I'm writing a library and only my

00:32:43,249 --> 00:32:48,470
internals are affected so they remove

00:32:47,239 --> 00:32:52,070
the method that I'm only using

00:32:48,470 --> 00:32:57,289
internally I'm good I can try to elevate

00:32:52,070 --> 00:33:00,350
that somehow maybe by I don't know maybe

00:32:57,289 --> 00:33:03,169
by writing it's some other way or but

00:33:00,350 --> 00:33:05,629
I'm able to fix it but if it if affects

00:33:03,169 --> 00:33:08,960
my pep a public API for example because

00:33:05,629 --> 00:33:09,529
a class is removed like date is a good

00:33:08,960 --> 00:33:13,190
candidate

00:33:09,529 --> 00:33:15,409
I think date it has 20 methods and 19

00:33:13,190 --> 00:33:18,889
methods are deprecated because people

00:33:15,409 --> 00:33:20,090
realize it doesn't really work so if

00:33:18,889 --> 00:33:23,210
that would be removed

00:33:20,090 --> 00:33:25,340
it would be like it's a problem because

00:33:23,210 --> 00:33:26,720
as I said break in a breaking change in

00:33:25,340 --> 00:33:29,660
elaborate like comments it's a major

00:33:26,720 --> 00:33:31,390
major undertaking it's it's really a lot

00:33:29,660 --> 00:33:34,250
of work so we don't do that often

00:33:31,390 --> 00:33:36,140
actually I think we haven't done that

00:33:34,250 --> 00:33:38,360
for the whole time that I have been

00:33:36,140 --> 00:33:42,740
there I have been a joint the project I

00:33:38,360 --> 00:33:44,300
think in 2011 something and that was by

00:33:42,740 --> 00:33:48,650
the time when we had Apache Commons

00:33:44,300 --> 00:33:54,380
Lange 3.1 I can't remember being part of

00:33:48,650 --> 00:33:58,430
such an such a change so yeah module

00:33:54,380 --> 00:34:00,500
system it seems to be hard maybe even

00:33:58,430 --> 00:34:02,360
impossible to cross compile because

00:34:00,500 --> 00:34:04,370
let's say I have a patchy common slang

00:34:02,360 --> 00:34:07,130
and I want to be compatible with Java 8

00:34:04,370 --> 00:34:09,230
but I also want to have a well-defined

00:34:07,130 --> 00:34:12,590
module for people running on Java 9 in

00:34:09,230 --> 00:34:15,500
the in a module system so I I would have

00:34:12,590 --> 00:34:18,050
to sneak this module info class into my

00:34:15,500 --> 00:34:20,660
job because I can't have like more than

00:34:18,050 --> 00:34:23,080
one Jean maven central you know and I'm

00:34:20,660 --> 00:34:25,610
not even sure if that we work so if this

00:34:23,080 --> 00:34:27,920
module info class isn't there where Java

00:34:25,610 --> 00:34:29,780
8 loaded or will it say ok but what the

00:34:27,920 --> 00:34:31,160
 is this this is completely invalid

00:34:29,780 --> 00:34:34,090
I don't know what to do with it

00:34:31,160 --> 00:34:38,030
has somebody tried that actually already

00:34:34,090 --> 00:34:40,580
trying to get a module info into a

00:34:38,030 --> 00:34:44,590
library that is supposed to run on Java

00:34:40,580 --> 00:34:44,590
8 is that possible I don't know

00:34:52,919 --> 00:34:55,919
okay

00:34:58,600 --> 00:35:30,820
yeah okay yeah yeah okay okay okay

00:36:17,299 --> 00:36:22,409
okay so let me cross the impossible it

00:36:20,400 --> 00:36:23,849
seems to be possible somehow but you

00:36:22,409 --> 00:36:25,499
need to talk to the people in the last

00:36:23,849 --> 00:36:28,439
row because there are the majestic

00:36:25,499 --> 00:36:31,829
magicians that know how to do it

00:36:28,439 --> 00:36:34,529
so one fix you can do is introduce the

00:36:31,829 --> 00:36:37,140
automatic module name manifest header

00:36:34,529 --> 00:36:40,259
and that basically generates like an

00:36:37,140 --> 00:36:41,789
artificial software module and says okay

00:36:40,259 --> 00:36:44,759
this is the module with this name and

00:36:41,789 --> 00:36:46,380
everything is exposed I mean one of the

00:36:44,759 --> 00:36:48,900
benefits of the module system is that

00:36:46,380 --> 00:36:51,269
you can hide internal packages and

00:36:48,900 --> 00:36:54,659
internal api's so you couldn't use that

00:36:51,269 --> 00:36:57,509
with the solution and actually in common

00:36:54,659 --> 00:36:59,130
slang we cannot really I mean we we are

00:36:57,509 --> 00:37:01,769
using it we have the automatic module

00:36:59,130 --> 00:37:04,259
name but we have one method that kind of

00:37:01,769 --> 00:37:06,929
close to Java 9 door for us and this is

00:37:04,259 --> 00:37:08,880
it's this method in abstract circuit

00:37:06,929 --> 00:37:12,059
breaker I mean we could ask ourselves

00:37:08,880 --> 00:37:13,559
why does does a library like comments

00:37:12,059 --> 00:37:15,929
Lang need a circuit breaker but ok

00:37:13,559 --> 00:37:19,409
that's a different discussion and as you

00:37:15,929 --> 00:37:21,150
can see this is public API and it gets a

00:37:19,409 --> 00:37:23,069
parameter and it's a property change

00:37:21,150 --> 00:37:25,979
listener and an unfortunate thing about

00:37:23,069 --> 00:37:29,669
this is property change listener is in

00:37:25,979 --> 00:37:34,229
the package javabeans and this is part

00:37:29,669 --> 00:37:38,009
of the Java desktop module so what we

00:37:34,229 --> 00:37:42,449
were trying to fix was not having the

00:37:38,009 --> 00:37:45,269
desktop stuff in our server applications

00:37:42,449 --> 00:37:47,669
but because we introduced this before

00:37:45,269 --> 00:37:51,150
the whole Java module system thing we we

00:37:47,669 --> 00:37:53,369
couldn't we couldn't know that that this

00:37:51,150 --> 00:37:56,099
would be coming or will become a problem

00:37:53,369 --> 00:37:57,900
so the idea basically is that you have

00:37:56,099 --> 00:37:59,999
the circuit breaker and you wanna wanna

00:37:57,900 --> 00:38:01,679
observe the state and one of maybe

00:37:59,999 --> 00:38:03,659
gather statistics or something and for

00:38:01,679 --> 00:38:06,179
that you can reduce the property change

00:38:03,659 --> 00:38:07,679
listener and now it's part of our public

00:38:06,179 --> 00:38:10,019
API so we can't remove it anymore

00:38:07,679 --> 00:38:13,979
because there might be somebody using it

00:38:10,019 --> 00:38:19,199
so if we define a module it will always

00:38:13,979 --> 00:38:21,809
be a module that has the desktop module

00:38:19,199 --> 00:38:24,180
as a dependency so we're back to the

00:38:21,809 --> 00:38:26,950
beginning again

00:38:24,180 --> 00:38:32,470
so what now how do we deal with this

00:38:26,950 --> 00:38:38,920
mask options for library authors that I

00:38:32,470 --> 00:38:40,809
see you can stay with Java 8 because if

00:38:38,920 --> 00:38:43,529
you define the automatic module header

00:38:40,809 --> 00:38:46,750
it will work on the module path and I

00:38:43,529 --> 00:38:48,460
mean your library might work on your

00:38:46,750 --> 00:38:50,200
Java versions but you will run into this

00:38:48,460 --> 00:38:52,809
probably with the breaking changes in

00:38:50,200 --> 00:38:55,539
the runtime that you need to handle

00:38:52,809 --> 00:38:57,760
somehow and the problem with this

00:38:55,539 --> 00:39:00,670
approach is if you're not keeping pace

00:38:57,760 --> 00:39:02,980
you will eventually become irrelevant

00:39:00,670 --> 00:39:08,309
because people say ok I mean this is

00:39:02,980 --> 00:39:10,599
this old stuff from you know 2010 but

00:39:08,309 --> 00:39:13,750
currently that's kind of the style that

00:39:10,599 --> 00:39:16,720
we are doing it at Apache Commons so we

00:39:13,750 --> 00:39:20,130
are staying mostly on Java 8 or you

00:39:16,720 --> 00:39:22,630
can't you can try to go with the flow

00:39:20,130 --> 00:39:25,319
but I think a lot of organizations are

00:39:22,630 --> 00:39:30,039
not ready for this for this Fastpass

00:39:25,319 --> 00:39:32,410
pace of Java releases and as we could

00:39:30,039 --> 00:39:35,079
see the Java user base still seems to be

00:39:32,410 --> 00:39:38,529
on Java 8 so it makes sense to target

00:39:35,079 --> 00:39:41,440
Java 8 and if you go with the flow and

00:39:38,529 --> 00:39:44,289
with the releases and do that you that

00:39:41,440 --> 00:39:46,329
will might require to introduce breaking

00:39:44,289 --> 00:39:49,180
changes into your library which you

00:39:46,329 --> 00:39:52,059
don't really want and getting ready for

00:39:49,180 --> 00:39:53,440
the module system with the library that

00:39:52,059 --> 00:39:55,779
was there before the modulation is

00:39:53,440 --> 00:39:58,599
really hard and I call this J unit 5

00:39:55,779 --> 00:39:59,920
style because they they really do a lot

00:39:58,599 --> 00:40:02,319
in that direction and try out new

00:39:59,920 --> 00:40:04,420
features and they have well-defined

00:40:02,319 --> 00:40:06,880
modules and they test against different

00:40:04,420 --> 00:40:12,279
compiler versions and so it's a little

00:40:06,880 --> 00:40:15,630
bit more fast-paced so I honestly don't

00:40:12,279 --> 00:40:17,769
know I don't know what to do with this

00:40:15,630 --> 00:40:19,299
I've been thinking about this a long

00:40:17,769 --> 00:40:21,640
time and I think it's a problem that you

00:40:19,299 --> 00:40:24,250
can't solve you can't stay compared to a

00:40:21,640 --> 00:40:26,500
compatibility with the old stuff if they

00:40:24,250 --> 00:40:31,869
say we might break the old stuff so it's

00:40:26,500 --> 00:40:34,569
impossible basically so with that to be

00:40:31,869 --> 00:40:36,009
honest I have to to open up the

00:40:34,569 --> 00:40:37,850
discussions because maybe you have a

00:40:36,009 --> 00:40:40,350
good idea so

00:40:37,850 --> 00:40:44,070
but I don't have a solution today I just

00:40:40,350 --> 00:40:45,750
can can show you the challenges and the

00:40:44,070 --> 00:40:47,340
options that you have but I don't have

00:40:45,750 --> 00:40:48,930
like this one answer okay do it like

00:40:47,340 --> 00:40:51,510
this way and you will never run into

00:40:48,930 --> 00:40:57,740
problems because there is no easy answer

00:40:51,510 --> 00:40:57,740
to this yeah and that's it thank you

00:41:01,100 --> 00:41:13,860
it's chance I have to mention there's

00:41:12,570 --> 00:41:16,230
another problem if you maintain a

00:41:13,860 --> 00:41:17,910
library that is based on reflection so

00:41:16,230 --> 00:41:19,980
you have currently the problem if your

00:41:17,910 --> 00:41:24,150
application of your library is running

00:41:19,980 --> 00:41:27,240
in the automatic module or is a real

00:41:24,150 --> 00:41:29,460
module which means the complete

00:41:27,240 --> 00:41:31,560
reflection code behaves differently so

00:41:29,460 --> 00:41:33,960
you have the problem you should test

00:41:31,560 --> 00:41:35,610
your library in both situations and

00:41:33,960 --> 00:41:37,830
that's also a challenge I don't know how

00:41:35,610 --> 00:41:39,030
to do this really automate today even

00:41:37,830 --> 00:41:41,910
with maven tools or something like that

00:41:39,030 --> 00:41:45,470
there's no real support for this it's

00:41:41,910 --> 00:41:49,610
another problem that we have from this

00:41:45,470 --> 00:41:49,610
module yeah stuff

00:41:54,560 --> 00:42:09,020
all right so here's a party community

00:42:06,140 --> 00:42:10,910
can also talk to Java community or work

00:42:09,020 --> 00:42:14,150
more closely with Java community and

00:42:10,910 --> 00:42:16,510
convinced that this way is not so

00:42:14,150 --> 00:42:18,950
optimal for the for the people and

00:42:16,510 --> 00:42:21,920
regarding the model system else works a

00:42:18,950 --> 00:42:29,300
lot of his oil shine in the past was

00:42:21,920 --> 00:42:29,720
strong believer in oh I so no not

00:42:29,300 --> 00:42:32,660
anymore

00:42:29,720 --> 00:42:35,210
but I see if in some in some projects

00:42:32,660 --> 00:42:38,990
and some models say were useful is a

00:42:35,210 --> 00:42:41,240
very very successful and there's the

00:42:38,990 --> 00:42:43,160
people who want to have modernization

00:42:41,240 --> 00:42:47,720
can have something more compatible with

00:42:43,160 --> 00:42:50,930
oh joy yeah but it's not for for the 99%

00:42:47,720 --> 00:42:54,530
of the Java community yeah yeah with

00:42:50,930 --> 00:42:56,990
regards to I'm talking to the Java

00:42:54,530 --> 00:42:59,060
community process or things like that I

00:42:56,990 --> 00:43:00,560
hope that they eventually realize what

00:42:59,060 --> 00:43:04,070
they did when they saw and when I look

00:43:00,560 --> 00:43:08,140
at the numbers because I mean 83% still

00:43:04,070 --> 00:43:08,140
on Java hate that should send a signal

00:43:11,050 --> 00:43:15,700
okay then our that's another question

00:43:23,680 --> 00:43:31,370
yeah this this old code is definitely

00:43:29,600 --> 00:43:34,430
not ready for module system there are

00:43:31,370 --> 00:43:36,860
there are sometimes jar files which with

00:43:34,430 --> 00:43:40,220
shared packages or something like that

00:43:36,860 --> 00:43:43,780
the point is it is a major effort to

00:43:40,220 --> 00:43:46,970
clean this up a major effort that is not

00:43:43,780 --> 00:43:48,230
in any way funded by customers or

00:43:46,970 --> 00:43:52,160
something like that they just see the

00:43:48,230 --> 00:43:55,100
product they see the product should run

00:43:52,160 --> 00:43:57,880
on annual Java versions but the effort

00:43:55,100 --> 00:44:00,710
that is necessary to bring it to this

00:43:57,880 --> 00:44:03,710
you don't you don't get the money just

00:44:00,710 --> 00:44:05,510
out of your normal business and I don't

00:44:03,710 --> 00:44:08,030
have a solution for that because we've

00:44:05,510 --> 00:44:12,440
like if I go to my to my chef and say

00:44:08,030 --> 00:44:15,500
okay we need a immense year of effort to

00:44:12,440 --> 00:44:18,050
to bring our product to the new Java

00:44:15,500 --> 00:44:19,250
version and I know what happens you say

00:44:18,050 --> 00:44:22,190
no it's not possible

00:44:19,250 --> 00:44:31,430
yeah so I wonder what what to do with

00:44:22,190 --> 00:44:33,650
this I have no idea about that I'm not

00:44:31,430 --> 00:44:36,100
sure that Oracle of being that much

00:44:33,650 --> 00:44:39,500
worse than Sun on this so I remember

00:44:36,100 --> 00:44:42,230
Apache boy back in the day when Java 5

00:44:39,500 --> 00:44:43,310
came out with the for each loop and one

00:44:42,230 --> 00:44:44,720
of the things that Apache por you want

00:44:43,310 --> 00:44:47,180
to loop over your spreadsheet so we

00:44:44,720 --> 00:44:49,760
wanted to be able to implement and the

00:44:47,180 --> 00:44:52,010
for each leaf rosen cells but we were

00:44:49,760 --> 00:44:54,050
still compiling against Java 1.4 because

00:44:52,010 --> 00:44:56,570
that was the most popular JVM at the

00:44:54,050 --> 00:44:59,240
time and when they brought in this new

00:44:56,570 --> 00:45:01,310
thing it was iterable so there was

00:44:59,240 --> 00:45:03,320
already the iterator Java util iterator

00:45:01,310 --> 00:45:05,690
they brought in new on iterable it

00:45:03,320 --> 00:45:08,420
wasn't possible to have it still compile

00:45:05,690 --> 00:45:10,760
against Java 1.4 and also exposed this

00:45:08,420 --> 00:45:11,900
new feature and so we ended up with a

00:45:10,760 --> 00:45:13,670
long time with everyone complaining

00:45:11,900 --> 00:45:15,650
because we hadn't upgraded and then we

00:45:13,670 --> 00:45:16,550
did upgrade to Java 1/5 and then

00:45:15,650 --> 00:45:17,720
everyone complained because they

00:45:16,550 --> 00:45:19,580
couldn't run it anymore because it was

00:45:17,720 --> 00:45:22,100
still on 1/4 and that was back in the

00:45:19,580 --> 00:45:23,780
Sundays and we chatted at them a bit and

00:45:22,100 --> 00:45:24,680
they sort of shrugged and said well you

00:45:23,780 --> 00:45:27,530
know why don't you just on the new

00:45:24,680 --> 00:45:28,250
version what you going on about and they

00:45:27,530 --> 00:45:29,870
were just thinking about the

00:45:28,250 --> 00:45:31,440
applications not the library so I don't

00:45:29,870 --> 00:45:33,420
think it's much worse

00:45:31,440 --> 00:45:36,900
it's just still as terrible as it always

00:45:33,420 --> 00:45:40,860
has been for whatever is 15 years okay

00:45:36,900 --> 00:45:42,750
thank you we also have that question

00:45:40,860 --> 00:45:45,030
also in other libraries with module

00:45:42,750 --> 00:45:48,090
system always coming so people starting

00:45:45,030 --> 00:45:49,890
to complain so for example Apache Lucine

00:45:48,090 --> 00:45:52,290
is also having the problem of the shared

00:45:49,890 --> 00:45:54,030
packages so you may have moved share

00:45:52,290 --> 00:45:56,670
files with exactly the same package

00:45:54,030 --> 00:45:58,890
caused by some package private access

00:45:56,670 --> 00:46:00,870
and whatever so you cannot easily detect

00:45:58,890 --> 00:46:04,590
that and then the people are complaining

00:46:00,870 --> 00:46:07,860
and our answer to that is in most cases

00:46:04,590 --> 00:46:10,440
if you want to use Lucene just use our

00:46:07,860 --> 00:46:13,890
char files and before deploying your

00:46:10,440 --> 00:46:15,450
application in your module system bundle

00:46:13,890 --> 00:46:19,770
everything together and declare it as

00:46:15,450 --> 00:46:23,040
one module in in in that or maybe so you

00:46:19,770 --> 00:46:26,760
can still use a module system in in Java

00:46:23,040 --> 00:46:28,650
11 you can use it but you declare your

00:46:26,760 --> 00:46:33,060
whole application just as one module

00:46:28,650 --> 00:46:36,090
which requires which requires you have a

00:46:33,060 --> 00:46:39,090
base and some other stuff so that's only

00:46:36,090 --> 00:46:45,720
a workaround but that's also always a

00:46:39,090 --> 00:46:48,870
problem how to explain it to people yes

00:46:45,720 --> 00:46:50,940
so in my opinion the only sense behind

00:46:48,870 --> 00:46:54,690
the modernization is that you can tell

00:46:50,940 --> 00:46:56,520
it I want to have a smaller JDK that you

00:46:54,690 --> 00:46:59,190
ship with my application and I only want

00:46:56,520 --> 00:47:01,950
to have that modules and not the desktop

00:46:59,190 --> 00:47:04,680
environment that's the only way that you

00:47:01,950 --> 00:47:06,960
can currently use it until everything in

00:47:04,680 --> 00:47:13,740
maven central is somehow working with

00:47:06,960 --> 00:47:17,730
that which is impossible yeah in my

00:47:13,740 --> 00:47:20,550
opinion does have a real value in

00:47:17,730 --> 00:47:23,790
upgrading to latest Java version because

00:47:20,550 --> 00:47:27,540
you get performance better performance

00:47:23,790 --> 00:47:30,870
and security fixes but a trade-off could

00:47:27,540 --> 00:47:36,030
beat we stay at most comparable with

00:47:30,870 --> 00:47:41,340
Java 8 tests against Java 11 be sure

00:47:36,030 --> 00:47:43,950
that your code can run on Java 11 mmm 12

00:47:41,340 --> 00:47:49,330
whatever

00:47:43,950 --> 00:47:52,810
and be prepared and follow of the flow

00:47:49,330 --> 00:47:56,380
of duplication this is a trade off you

00:47:52,810 --> 00:48:00,970
get the best and performance you know

00:47:56,380 --> 00:48:08,050
all spots is really changing the

00:48:00,970 --> 00:48:11,890
internal the implementation okay but but

00:48:08,050 --> 00:48:17,910
okay you can't use the quest features

00:48:11,890 --> 00:48:17,910
because you you can run them on JDK

00:48:26,660 --> 00:48:32,679

YouTube URL: https://www.youtube.com/watch?v=Ipe-2h1MKKs


