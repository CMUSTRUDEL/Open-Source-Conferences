Title: Unikernel apps - Luis Javier Arizmendi Alonso - DevConf.CZ 2021
Publication date: 2021-02-13
Playlist: DevConfCZ 2021 Lighting talks
Description: 
	
Captions: 
	00:00:00,080 --> 00:00:03,679
welcome to edge loves unicarnals what do

00:00:02,480 --> 00:00:05,600
i want from this talk

00:00:03,679 --> 00:00:06,879
i want to motivate you to start using

00:00:05,600 --> 00:00:08,720
unicorn labs

00:00:06,879 --> 00:00:10,480
unicorn applications have been there for

00:00:08,720 --> 00:00:11,840
a while but probably the right time for

00:00:10,480 --> 00:00:14,480
them is approaching

00:00:11,840 --> 00:00:15,120
i will show the value of an unicorn lab

00:00:14,480 --> 00:00:18,240
by

00:00:15,120 --> 00:00:19,840
covering an example use case dx and when

00:00:18,240 --> 00:00:22,080
i refer to the edge

00:00:19,840 --> 00:00:23,199
i mean the distributed architecture

00:00:22,080 --> 00:00:24,800
where you have

00:00:23,199 --> 00:00:27,599
the compute and storage close to the

00:00:24,800 --> 00:00:29,519
location where it will be consumed

00:00:27,599 --> 00:00:31,199
what is a unicorn there is a formal

00:00:29,519 --> 00:00:34,239
definition that i will escape

00:00:31,199 --> 00:00:37,040
and i will get the simplified one

00:00:34,239 --> 00:00:39,200
where we can say that a unikernel is the

00:00:37,040 --> 00:00:40,640
minimum operating system that combine

00:00:39,200 --> 00:00:43,280
along with your code

00:00:40,640 --> 00:00:44,000
makes possible to run your application

00:00:43,280 --> 00:00:46,719
let's go back to

00:00:44,000 --> 00:00:48,399
our use case in order to build an

00:00:46,719 --> 00:00:50,399
application for the edge you

00:00:48,399 --> 00:00:51,600
me you need to bear in mind these four

00:00:50,399 --> 00:00:53,360
key elements

00:00:51,600 --> 00:00:55,600
first our edge application must be

00:00:53,360 --> 00:00:56,079
lightweight it must consume few memory

00:00:55,600 --> 00:00:58,480
and

00:00:56,079 --> 00:01:00,079
cpu since edge locations are constrained

00:00:58,480 --> 00:01:02,559
in compute power

00:01:00,079 --> 00:01:03,199
our edge application must be secure

00:01:02,559 --> 00:01:05,280
because

00:01:03,199 --> 00:01:06,960
at the edge we have new consecutive

00:01:05,280 --> 00:01:08,880
concerns it's more difficult to maintain

00:01:06,960 --> 00:01:10,720
the control on the environment

00:01:08,880 --> 00:01:12,320
and finally our edge application must

00:01:10,720 --> 00:01:14,640
provide a good performance

00:01:12,320 --> 00:01:16,320
and probably in many cases our

00:01:14,640 --> 00:01:18,720
application needs to be as much as

00:01:16,320 --> 00:01:20,560
deterministic as possible because the

00:01:18,720 --> 00:01:21,200
real-time use cases are really close to

00:01:20,560 --> 00:01:25,680
the

00:01:21,200 --> 00:01:28,560
edge locations why unicorns fit in this

00:01:25,680 --> 00:01:30,240
use case let's think about the the

00:01:28,560 --> 00:01:33,360
unicorn qualities

00:01:30,240 --> 00:01:35,520
an application compiled into a unicorn

00:01:33,360 --> 00:01:37,119
only has the required functionality of

00:01:35,520 --> 00:01:39,119
the kernel nothing else

00:01:37,119 --> 00:01:40,320
which give us a lightweight size and

00:01:39,119 --> 00:01:41,840
memory footprint

00:01:40,320 --> 00:01:44,560
along with the security benefits of

00:01:41,840 --> 00:01:46,399
having a reduced attack surface in our

00:01:44,560 --> 00:01:48,000
in our application and also better

00:01:46,399 --> 00:01:50,399
performance

00:01:48,000 --> 00:01:51,200
also the unique kernels don't have to

00:01:50,399 --> 00:01:53,119
initialize

00:01:51,200 --> 00:01:55,520
devices or services that are not needed

00:01:53,119 --> 00:01:57,680
improving security and performance

00:01:55,520 --> 00:01:59,439
giving us a really fast boot times of

00:01:57,680 --> 00:02:02,799
the application

00:01:59,439 --> 00:02:04,560
and third unicorns run a single process

00:02:02,799 --> 00:02:05,920
they don't have to change between dreams

00:02:04,560 --> 00:02:06,719
or take into account the channel

00:02:05,920 --> 00:02:08,879
scheduling

00:02:06,719 --> 00:02:09,840
interrupts so if you remove interrupts

00:02:08,879 --> 00:02:13,840
you are getting

00:02:09,840 --> 00:02:15,840
a more deterministic application

00:02:13,840 --> 00:02:18,319
but what about the containers here well

00:02:15,840 --> 00:02:21,200
there are some key differentiators here

00:02:18,319 --> 00:02:22,080
between containers and unicarnals first

00:02:21,200 --> 00:02:25,200
unicorn

00:02:22,080 --> 00:02:28,000
containers uh bring isolation

00:02:25,200 --> 00:02:29,680
through cigarettes but they have to uh

00:02:28,000 --> 00:02:31,040
serve a common piece of the system that

00:02:29,680 --> 00:02:33,040
is the kernel

00:02:31,040 --> 00:02:34,800
that means that if we have a security

00:02:33,040 --> 00:02:36,959
bridge or the kernel

00:02:34,800 --> 00:02:38,640
has some interrupts will affect all

00:02:36,959 --> 00:02:41,760
containers in the system

00:02:38,640 --> 00:02:42,720
in contrast with unicannel apps they

00:02:41,760 --> 00:02:46,160
have their own

00:02:42,720 --> 00:02:49,680
kernel they have more isolation

00:02:46,160 --> 00:02:52,319
here and they don't have to bear in mind

00:02:49,680 --> 00:02:53,120
the interrupts of the other components

00:02:52,319 --> 00:02:56,239
the other

00:02:53,120 --> 00:02:57,599
containers two with containers we don't

00:02:56,239 --> 00:03:00,159
have the control of the kernel

00:02:57,599 --> 00:03:01,920
in which our application will be running

00:03:00,159 --> 00:03:04,400
on because it's part of the system but

00:03:01,920 --> 00:03:07,200
with unicorns we can take some decisions

00:03:04,400 --> 00:03:08,159
and pick the the components the kernel

00:03:07,200 --> 00:03:11,440
components that we

00:03:08,159 --> 00:03:13,519
want and we will be sure that our

00:03:11,440 --> 00:03:15,280
application will be consistent

00:03:13,519 --> 00:03:15,760
independently in which system is running

00:03:15,280 --> 00:03:18,319
on

00:03:15,760 --> 00:03:19,360
and that will be more performance and

00:03:18,319 --> 00:03:22,080
lightweight

00:03:19,360 --> 00:03:22,720
and third there is another difference is

00:03:22,080 --> 00:03:24,879
that

00:03:22,720 --> 00:03:25,760
in a container we should as a best

00:03:24,879 --> 00:03:29,040
practice

00:03:25,760 --> 00:03:32,159
use a single process per container

00:03:29,040 --> 00:03:32,879
we should but we are forced to use a

00:03:32,159 --> 00:03:35,200
single

00:03:32,879 --> 00:03:36,159
process with unicorn so we are forced to

00:03:35,200 --> 00:03:38,480
follow this

00:03:36,159 --> 00:03:39,200
this best practice why there are not

00:03:38,480 --> 00:03:41,040
that many

00:03:39,200 --> 00:03:42,640
unicorns out there well the problem is

00:03:41,040 --> 00:03:45,760
that we lack a broader con

00:03:42,640 --> 00:03:46,000
brother community and that give us that

00:03:45,760 --> 00:03:48,480
we

00:03:46,000 --> 00:03:50,319
don't have clear standards because we

00:03:48,480 --> 00:03:52,400
lack of this community

00:03:50,319 --> 00:03:54,799
also we don't have the right tools

00:03:52,400 --> 00:03:58,560
because there are not that many people

00:03:54,799 --> 00:03:59,920
development then and finally the final

00:03:58,560 --> 00:04:02,239
reason is that because the your

00:03:59,920 --> 00:04:05,439
application must be modified

00:04:02,239 --> 00:04:06,080
in order to run as a unicorn so what i

00:04:05,439 --> 00:04:07,920
would

00:04:06,080 --> 00:04:10,400
what i want from this talk well i want

00:04:07,920 --> 00:04:12,799
to change this i want to create a

00:04:10,400 --> 00:04:14,239
community i want to you to start playing

00:04:12,799 --> 00:04:16,079
with unicorns and

00:04:14,239 --> 00:04:17,919
give feedback to the tools that you are

00:04:16,079 --> 00:04:19,840
using helping to consolidate

00:04:17,919 --> 00:04:21,199
a community around unicamerals and if

00:04:19,840 --> 00:04:24,320
you can help with others

00:04:21,199 --> 00:04:26,000
that would be great how can you start

00:04:24,320 --> 00:04:28,160
well you can start playing with

00:04:26,000 --> 00:04:30,320
any of the multiple library operating

00:04:28,160 --> 00:04:32,160
system systems that are out there

00:04:30,320 --> 00:04:33,440
i would recommend you to start with the

00:04:32,160 --> 00:04:35,600
unicorn linux

00:04:33,440 --> 00:04:37,840
that is just four commands if you have a

00:04:35,600 --> 00:04:43,840
fedora so i start exploring

00:04:37,840 --> 00:04:43,840

YouTube URL: https://www.youtube.com/watch?v=4UyPkszixCs


