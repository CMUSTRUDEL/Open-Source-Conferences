Title: Containerizing the distribution - Colin Walters
Publication date: 2016-02-11
Playlist: DevConf.cz 2016
Description: 
	This talk will focus on a roadmap for longer-term (1-2 years) changes to make to drive container awareness deeper into the traditional package distribution model. For example:

- Support for non-root containers using RPMs
- The role of systemd on the host and inside containers, particularly "microservices" vs systemd-in-container
- The role of SELinux policy
- How to maintain the advantages of packaging, such as system/cluster wide updates
Captions: 
	00:00:00,000 --> 00:00:02,269
see

00:00:39,970 --> 00:00:45,100
first I've heard that you guys have a

00:00:42,020 --> 00:00:45,100
memory in the slideshow

00:00:46,440 --> 00:00:49,440
rostra

00:01:10,670 --> 00:01:18,460
hello everyone so the next session is

00:01:13,880 --> 00:01:18,460
starting please welcome calling Walters

00:01:24,729 --> 00:01:31,220
testing yeah alright so yeah my name is

00:01:28,820 --> 00:01:32,840
Paul Walters I work in the platform

00:01:31,220 --> 00:01:34,130
engineering group i work with dan and a

00:01:32,840 --> 00:01:36,649
bunch of other people on our our

00:01:34,130 --> 00:01:39,380
container efforts the community side is

00:01:36,649 --> 00:01:41,149
called Project atomic and we ship a lot

00:01:39,380 --> 00:01:42,500
of this software in a support enterprise

00:01:41,149 --> 00:01:45,800
series release and red hat enterprise

00:01:42,500 --> 00:01:47,690
linux my sense of identity is

00:01:45,800 --> 00:01:49,880
inextricably linked with two large prime

00:01:47,690 --> 00:01:53,299
numbers that's the first link and then I

00:01:49,880 --> 00:01:54,740
have email addresses and honestly if you

00:01:53,299 --> 00:01:57,080
guys have random questions that you

00:01:54,740 --> 00:01:59,000
think of after don't hesitate to email

00:01:57,080 --> 00:02:00,890
me you know I think email is one of

00:01:59,000 --> 00:02:02,929
those things that we just don't quite

00:02:00,890 --> 00:02:04,340
use enough sometimes like me obviously

00:02:02,929 --> 00:02:06,619
there's a bunch of public forums or

00:02:04,340 --> 00:02:09,830
questions but I don't mind personal

00:02:06,619 --> 00:02:11,630
email um so one thing I like to start

00:02:09,830 --> 00:02:13,220
out my talks with here I'm here because

00:02:11,630 --> 00:02:15,019
I like to work on free and open source

00:02:13,220 --> 00:02:17,299
software I love working in an

00:02:15,019 --> 00:02:18,620
international community of really

00:02:17,299 --> 00:02:21,250
intelligent people all around the world

00:02:18,620 --> 00:02:23,720
on free and open source software and

00:02:21,250 --> 00:02:26,000
let's let's not take it for granted you

00:02:23,720 --> 00:02:27,560
know all the all the software that we

00:02:26,000 --> 00:02:30,320
build and we're talking about here is

00:02:27,560 --> 00:02:32,359
free and open source and you know let's

00:02:30,320 --> 00:02:35,090
let's do what we can to support it I

00:02:32,359 --> 00:02:38,660
think it's yeah really important just a

00:02:35,090 --> 00:02:40,579
quick note so the the talks before were

00:02:38,660 --> 00:02:42,890
really great actually and I we didn't

00:02:40,579 --> 00:02:43,970
coordinate a lot but there they should

00:02:42,890 --> 00:02:46,220
really set the stage for this one

00:02:43,970 --> 00:02:47,480
because in this talk it's going to be

00:02:46,220 --> 00:02:49,459
fairly advanced in that I'm going to

00:02:47,480 --> 00:02:50,900
assume you know about pretty much

00:02:49,459 --> 00:02:53,239
everything that's been talked about

00:02:50,900 --> 00:02:54,260
before particularly the high level you

00:02:53,239 --> 00:02:56,090
know I'm not going to talk about what

00:02:54,260 --> 00:02:59,390
Cooper Nettie's is so if you didn't see

00:02:56,090 --> 00:03:01,069
Adam Miller's talk before well hopefully

00:02:59,390 --> 00:03:04,340
at least no akuma raises and those sort

00:03:01,069 --> 00:03:06,530
of things so project atomic is is a code

00:03:04,340 --> 00:03:09,049
name for all of our a lot of our

00:03:06,530 --> 00:03:10,400
container efforts at Red Hat and there's

00:03:09,049 --> 00:03:11,959
a lot of things that are now under the

00:03:10,400 --> 00:03:13,819
project atomic banner I'm just going to

00:03:11,959 --> 00:03:15,620
summarize this really quickly you know

00:03:13,819 --> 00:03:18,530
obviously it kind of started with atomic

00:03:15,620 --> 00:03:20,690
host you know in our docker efforts we

00:03:18,530 --> 00:03:21,650
brought in Coober Nettie's there's also

00:03:20,690 --> 00:03:23,810
a new

00:03:21,650 --> 00:03:29,030
Tomic app effort which allows you to

00:03:23,810 --> 00:03:32,120
more easily provision container images

00:03:29,030 --> 00:03:34,670
with answer files of we have a really

00:03:32,120 --> 00:03:36,530
slick new vagrant box where you

00:03:34,670 --> 00:03:38,359
basically you boot up the vagrant box

00:03:36,530 --> 00:03:40,640
and you get open shift and you get all

00:03:38,359 --> 00:03:42,920
this stuff together it's the new version

00:03:40,640 --> 00:03:45,230
is is really nice it's definitely worth

00:03:42,920 --> 00:03:46,549
trying so anyways there's there's a

00:03:45,230 --> 00:03:48,379
bunch of stuff there and I'm you know

00:03:46,549 --> 00:03:50,439
I'm really happy with with all the

00:03:48,379 --> 00:03:53,180
things that's going on under the banner

00:03:50,439 --> 00:03:56,209
and of course we're closely tied to our

00:03:53,180 --> 00:03:59,900
sister project openshift version 3 which

00:03:56,209 --> 00:04:03,829
is also based on top of all the project

00:03:59,900 --> 00:04:05,269
atomic technologies and and for those of

00:04:03,829 --> 00:04:06,709
you who don't know one thing that's

00:04:05,269 --> 00:04:08,720
actually interesting and it's going to

00:04:06,709 --> 00:04:11,090
cross some of the threads that we're

00:04:08,720 --> 00:04:14,420
talking about here openshift v2 and v3

00:04:11,090 --> 00:04:16,880
are radically different we basically for

00:04:14,420 --> 00:04:19,220
openshift v3 it doesn't really use any

00:04:16,880 --> 00:04:21,590
of the same technologies except the

00:04:19,220 --> 00:04:23,210
colonel but the advantage of this and

00:04:21,590 --> 00:04:24,470
there are some trade-offs with this for

00:04:23,210 --> 00:04:26,389
example you know people ask well how do

00:04:24,470 --> 00:04:27,710
i port my cartridges you know there's

00:04:26,389 --> 00:04:30,530
going to be some work on that the

00:04:27,710 --> 00:04:32,210
benefit though of rebasing openshift v3

00:04:30,530 --> 00:04:34,070
is that it's a lot more general

00:04:32,210 --> 00:04:36,020
container technologies have matured

00:04:34,070 --> 00:04:38,360
enough now to where you can run

00:04:36,020 --> 00:04:40,490
general-purpose workloads in our

00:04:38,360 --> 00:04:42,050
container environments in docker and

00:04:40,490 --> 00:04:44,300
kuba Nettie's whereas before i think

00:04:42,050 --> 00:04:48,199
there was this perception valid or not

00:04:44,300 --> 00:04:51,199
that openshift v2 was more of a web app

00:04:48,199 --> 00:04:53,960
as you know would you run your postgres

00:04:51,199 --> 00:04:56,030
instance in me you could actually but

00:04:53,960 --> 00:04:57,110
now container technology has evolved a

00:04:56,030 --> 00:05:02,270
lot more to point where it's a lot more

00:04:57,110 --> 00:05:03,380
general and we show that so specifically

00:05:02,270 --> 00:05:05,570
one of the things I'm really interested

00:05:03,380 --> 00:05:08,210
in is the concept of the traditional

00:05:05,570 --> 00:05:11,840
Linux distribution and how that changes

00:05:08,210 --> 00:05:13,159
as we moved in this container world I've

00:05:11,840 --> 00:05:15,380
been in the distribution space for a

00:05:13,159 --> 00:05:17,330
long time I used to a long time ago in a

00:05:15,380 --> 00:05:19,820
past life maintained build-essential in

00:05:17,330 --> 00:05:22,550
debian before i joined Red Hat done a

00:05:19,820 --> 00:05:23,960
lot of this stuff for a long time and I

00:05:22,550 --> 00:05:29,539
want to highlight there's a lot of

00:05:23,960 --> 00:05:31,250
advantages to the way the distributions

00:05:29,539 --> 00:05:34,200
are structured there's a lot of reasons

00:05:31,250 --> 00:05:37,860
why debian

00:05:34,200 --> 00:05:39,300
and you know fedora the original red hat

00:05:37,860 --> 00:05:42,020
linux went into fedora men are bears

00:05:39,300 --> 00:05:44,760
linux there's a lot of reasons why

00:05:42,020 --> 00:05:49,050
they've sir why the model has survived

00:05:44,760 --> 00:05:51,180
and thrived so long and obviously one of

00:05:49,050 --> 00:05:55,800
the biggest ones is it's very easy to

00:05:51,180 --> 00:05:58,080
create something it's a lot harder most

00:05:55,800 --> 00:06:00,300
commonly to maintain it over time you

00:05:58,080 --> 00:06:02,280
know I've certainly learned that you

00:06:00,300 --> 00:06:03,720
know it's and actually in the demo I'm

00:06:02,280 --> 00:06:05,730
going to do later you know they're

00:06:03,720 --> 00:06:07,320
honestly some hacks and it's just the

00:06:05,730 --> 00:06:08,490
start of something and I know if I

00:06:07,320 --> 00:06:10,740
really want to make it work it's going

00:06:08,490 --> 00:06:12,660
to take a lot of maintenance and the

00:06:10,740 --> 00:06:14,490
same is true with a lot of the way we're

00:06:12,660 --> 00:06:17,190
building applications few people want to

00:06:14,490 --> 00:06:21,630
maintain open SSL in their application

00:06:17,190 --> 00:06:23,280
right if you have there's a lot of stuff

00:06:21,630 --> 00:06:25,320
that you you don't want to maintain as

00:06:23,280 --> 00:06:28,170
an application author so a lot of this

00:06:25,320 --> 00:06:30,090
model still applies and beyond just the

00:06:28,170 --> 00:06:31,770
common maintenance there's a lot of

00:06:30,090 --> 00:06:33,120
interesting things that have happened in

00:06:31,770 --> 00:06:36,210
the distribution model one things I

00:06:33,120 --> 00:06:38,040
think is a good example is in fedora

00:06:36,210 --> 00:06:43,080
there is a drive to have a crypto policy

00:06:38,040 --> 00:06:44,640
which was a standard configuration model

00:06:43,080 --> 00:06:46,980
for the different crypto libraries so

00:06:44,640 --> 00:06:49,560
you could for example say that you know

00:06:46,980 --> 00:06:52,320
I don't want to speak TLS one point you

00:06:49,560 --> 00:06:54,600
know all any use of HTTPS should always

00:06:52,320 --> 00:06:56,100
be TLS 1.2 or greater because there have

00:06:54,600 --> 00:06:57,780
been a lot of vulnerabilities and older

00:06:56,100 --> 00:07:00,330
protocols and this kind of required

00:06:57,780 --> 00:07:02,160
driving a common change across a couple

00:07:00,330 --> 00:07:03,990
different crypto libraries across NSS

00:07:02,160 --> 00:07:07,230
and open SSL and things like that so I

00:07:03,990 --> 00:07:08,880
think this concept of shared maintenance

00:07:07,230 --> 00:07:11,490
of a core is still very valid and

00:07:08,880 --> 00:07:12,600
there's a lot of reasons to have it ya

00:07:11,490 --> 00:07:16,530
know there's like license verification

00:07:12,600 --> 00:07:19,530
and things like that so one of the

00:07:16,530 --> 00:07:21,120
things that's this really it wasn't

00:07:19,530 --> 00:07:23,310
initially clear to meet for a long time

00:07:21,120 --> 00:07:26,400
is that the problem domains of how you

00:07:23,310 --> 00:07:29,730
build something is intimately tied to

00:07:26,400 --> 00:07:31,350
how you deliver it I mean you can always

00:07:29,730 --> 00:07:32,850
do people talk about continuous

00:07:31,350 --> 00:07:35,430
integration right and it's very easy to

00:07:32,850 --> 00:07:36,360
stand up you know Travis or something

00:07:35,430 --> 00:07:38,220
like that which is just basically

00:07:36,360 --> 00:07:39,480
outputting a web page that says with

00:07:38,220 --> 00:07:41,070
everything built or not that's not

00:07:39,480 --> 00:07:43,470
delivery right that's just giving you

00:07:41,070 --> 00:07:45,390
HTML and that doesn't really i mean it's

00:07:43,470 --> 00:07:47,430
useful but it doesn't really matter but

00:07:45,390 --> 00:07:48,200
when you start to deliver something all

00:07:47,430 --> 00:07:50,090
of a sudden

00:07:48,200 --> 00:07:51,470
how you build it becomes very closely

00:07:50,090 --> 00:07:54,260
tied to it you know if you're releasing

00:07:51,470 --> 00:07:56,270
rpms you need to know a lot about well

00:07:54,260 --> 00:07:58,160
how is that consumed you know how does

00:07:56,270 --> 00:07:59,570
the RPM version numbering work and all

00:07:58,160 --> 00:08:01,400
that stuff there's all these details

00:07:59,570 --> 00:08:03,590
that become very critically important

00:08:01,400 --> 00:08:06,080
and once you've delivered something it

00:08:03,590 --> 00:08:08,060
becomes very important how do you manage

00:08:06,080 --> 00:08:10,130
it right and this is a thread that

00:08:08,060 --> 00:08:11,990
crosses a lot of different things so

00:08:10,130 --> 00:08:13,310
once you built that RPM well there's a

00:08:11,990 --> 00:08:16,880
bunch of stuff that knows how to consume

00:08:13,310 --> 00:08:19,160
rpms like ansible I mean just and the

00:08:16,880 --> 00:08:20,780
semantics of where the config files live

00:08:19,160 --> 00:08:22,940
you know the fact that config files live

00:08:20,780 --> 00:08:25,400
in etsy a lot of this stuff gets built

00:08:22,940 --> 00:08:26,750
on and an accreted and so these problem

00:08:25,400 --> 00:08:29,450
domains are really tied together so it's

00:08:26,750 --> 00:08:30,920
a challenge when we change any of these

00:08:29,450 --> 00:08:32,300
earlier layers you have to think about

00:08:30,920 --> 00:08:35,210
okay well how do I manage that right

00:08:32,300 --> 00:08:36,560
this is very true of docker today you

00:08:35,210 --> 00:08:38,720
know as we've introduced a new way to

00:08:36,560 --> 00:08:40,280
deliver software there's whole new ways

00:08:38,720 --> 00:08:42,830
to think about how you manage things so

00:08:40,280 --> 00:08:44,480
for example if you have secrets Keys you

00:08:42,830 --> 00:08:47,090
know in Coober Nettie's now we provide a

00:08:44,480 --> 00:08:49,490
secret store and you know there's

00:08:47,090 --> 00:08:51,440
certainly a I asked Adam Miller question

00:08:49,490 --> 00:08:53,330
about config management you know what's

00:08:51,440 --> 00:08:55,040
the role can Figment classical config

00:08:53,330 --> 00:08:56,960
management in this new world of

00:08:55,040 --> 00:08:59,390
containers right and obviously you can

00:08:56,960 --> 00:09:00,710
you can still write to the exe directory

00:08:59,390 --> 00:09:03,140
in containers you know if you have some

00:09:00,710 --> 00:09:04,400
private CA certificates or something you

00:09:03,140 --> 00:09:06,200
can still drop those in your container

00:09:04,400 --> 00:09:07,490
bill but but these things change and

00:09:06,200 --> 00:09:09,650
whenever you're thinking about a new way

00:09:07,490 --> 00:09:11,360
to build something if your think about a

00:09:09,650 --> 00:09:12,860
new delivery format you need to be

00:09:11,360 --> 00:09:14,480
thinking about how does someone

00:09:12,860 --> 00:09:15,950
management how do the how do these

00:09:14,480 --> 00:09:18,350
management tools affect it because

00:09:15,950 --> 00:09:22,580
that's that's something that matters

00:09:18,350 --> 00:09:23,570
over time and so with virtualization for

00:09:22,580 --> 00:09:25,250
the most part I mean there there are

00:09:23,570 --> 00:09:27,080
unit kernels and all these other new

00:09:25,250 --> 00:09:28,850
ways to use virtualization but for the

00:09:27,080 --> 00:09:30,440
most part the model as far as i can tell

00:09:28,850 --> 00:09:31,820
that really one with virtualization was

00:09:30,440 --> 00:09:33,980
just took what you did in a physical box

00:09:31,820 --> 00:09:37,070
and we put in a virtual box for the most

00:09:33,980 --> 00:09:39,950
part right so classically you run yum or

00:09:37,070 --> 00:09:41,690
apt-get or whatever inside your verte

00:09:39,950 --> 00:09:44,480
box the same way you do on a physical

00:09:41,690 --> 00:09:46,190
box we didn't change how we manage

00:09:44,480 --> 00:09:47,750
software when you move to a virtual

00:09:46,190 --> 00:09:49,520
environment for the most part that has

00:09:47,750 --> 00:09:52,430
advantages because all that stuff

00:09:49,520 --> 00:09:53,780
transitions it also has disadvantages in

00:09:52,430 --> 00:09:56,120
inefficiency and things like that and

00:09:53,780 --> 00:09:58,730
that's this one we talked about so where

00:09:56,120 --> 00:10:01,200
we are a docker today is yeah Dockers

00:09:58,730 --> 00:10:03,500
got wild levels of adoption

00:10:01,200 --> 00:10:06,030
and you know what the interesting things

00:10:03,500 --> 00:10:08,790
one of the reasons I think this is is

00:10:06,030 --> 00:10:10,920
because we are actually a lot of cases

00:10:08,790 --> 00:10:13,410
just doing what we did before a lot of

00:10:10,920 --> 00:10:14,790
cases we're treating docker like we're

00:10:13,410 --> 00:10:17,550
kind of treating virtualization in other

00:10:14,790 --> 00:10:21,120
words you still have young or whatever

00:10:17,550 --> 00:10:22,290
inside that base image and just like

00:10:21,120 --> 00:10:23,880
with verte there are people who are

00:10:22,290 --> 00:10:25,020
doing different models you know there's

00:10:23,880 --> 00:10:28,230
been a lot of prototype work on

00:10:25,020 --> 00:10:31,200
producing basically application specific

00:10:28,230 --> 00:10:33,510
images and things like that all this

00:10:31,200 --> 00:10:35,100
stuff exists but what I'm saying is with

00:10:33,510 --> 00:10:37,830
projects on we kind of for the most part

00:10:35,100 --> 00:10:39,630
just put what we did in a box before and

00:10:37,830 --> 00:10:41,670
you know this has resulted in a lot of

00:10:39,630 --> 00:10:43,200
interesting tensions you know so Dan

00:10:41,670 --> 00:10:46,200
Walsh did a really good presentation on

00:10:43,200 --> 00:10:47,850
docker vs system d and this is actually

00:10:46,200 --> 00:10:49,470
a kind of consequence of the fact that

00:10:47,850 --> 00:10:52,170
we're not we haven't changed how we

00:10:49,470 --> 00:10:57,570
built software right we're still putting

00:10:52,170 --> 00:10:59,400
rpms inside our base images so yeah and

00:10:57,570 --> 00:11:02,490
there's a great example if you look at

00:10:59,400 --> 00:11:04,290
the Fedora Apache docker file yeah it's

00:11:02,490 --> 00:11:07,580
basically just yum dash why install

00:11:04,290 --> 00:11:09,660
httpd and they change some config files

00:11:07,580 --> 00:11:12,270
they basically just have a new shell

00:11:09,660 --> 00:11:14,040
script to start apache so it's all

00:11:12,270 --> 00:11:15,660
pretty simple one of the things that i

00:11:14,040 --> 00:11:18,060
will call here though there's a talk on

00:11:15,660 --> 00:11:20,880
this later today in openshift v3 there's

00:11:18,060 --> 00:11:23,220
also a different type of docker build

00:11:20,880 --> 00:11:24,600
system called source to image and it has

00:11:23,220 --> 00:11:26,640
a lot of knee advantages one of them is

00:11:24,600 --> 00:11:28,500
that it runs as non-root and that's

00:11:26,640 --> 00:11:33,000
primarily what am I talking about today

00:11:28,500 --> 00:11:37,350
is this role of RPM and root versus

00:11:33,000 --> 00:11:40,860
building so yeah dan did a really

00:11:37,350 --> 00:11:42,120
intense presentation on on systemd one

00:11:40,860 --> 00:11:45,390
of the things that came up at the end

00:11:42,120 --> 00:11:49,320
was are you running as root or not and

00:11:45,390 --> 00:11:51,810
user name spaces so I want to make an

00:11:49,320 --> 00:11:54,000
assertion hear that again we've mostly

00:11:51,810 --> 00:11:55,800
up until now been doing what we did

00:11:54,000 --> 00:11:58,350
before just putting in a new kind of box

00:11:55,800 --> 00:12:02,040
what I want to argue is that containers

00:11:58,350 --> 00:12:04,710
are the right time to move to doing rpm

00:12:02,040 --> 00:12:08,880
as non-root and people have done this

00:12:04,710 --> 00:12:11,490
before but once you take this out a lot

00:12:08,880 --> 00:12:14,610
of the other technical parts become a

00:12:11,490 --> 00:12:15,240
lot more clear I think and there are a

00:12:14,610 --> 00:12:17,130
lot of

00:12:15,240 --> 00:12:19,620
good raise to do this a lot of good

00:12:17,130 --> 00:12:20,790
reasons to support this to support our

00:12:19,620 --> 00:12:23,130
pianist on route I'm going to talk about

00:12:20,790 --> 00:12:26,160
that the next slide so the other thing I

00:12:23,130 --> 00:12:28,770
want to talk about is right now we have

00:12:26,160 --> 00:12:31,560
yaman are in our base image or dnf or

00:12:28,770 --> 00:12:33,870
whatever is in there but a lot of cases

00:12:31,560 --> 00:12:36,450
as as Adam motors talking about when you

00:12:33,870 --> 00:12:38,790
get to immutable infrastructure you want

00:12:36,450 --> 00:12:41,100
to have you want to use a supported

00:12:38,790 --> 00:12:43,170
common maintain base set of software

00:12:41,100 --> 00:12:44,940
when you're building something but you

00:12:43,170 --> 00:12:46,620
don't want to go in and run yum update

00:12:44,940 --> 00:12:48,540
inside each one of your containers right

00:12:46,620 --> 00:12:50,880
you actually want to just use it on the

00:12:48,540 --> 00:12:53,250
build side and then have thin images on

00:12:50,880 --> 00:12:55,260
the output and that's actually a real

00:12:53,250 --> 00:12:58,589
challenge today with the doctor layering

00:12:55,260 --> 00:13:01,649
model so I'm not the first one to do any

00:12:58,589 --> 00:13:03,360
stuff in this area in fact Adam also a

00:13:01,649 --> 00:13:04,770
minute mentioned Linux vserver which

00:13:03,360 --> 00:13:08,580
which i'm gonna link to as well and

00:13:04,770 --> 00:13:09,810
that's ancient now and some ways we fail

00:13:08,580 --> 00:13:11,910
to learn from some of the things they

00:13:09,810 --> 00:13:13,410
did but a good example of a great

00:13:11,910 --> 00:13:15,779
project in this area is Richard Jones as

00:13:13,410 --> 00:13:17,310
a tool called super min which also runs

00:13:15,779 --> 00:13:19,620
as non-root and it wasn't designed to

00:13:17,310 --> 00:13:21,630
build containers it was designed to

00:13:19,620 --> 00:13:23,760
generate virtual machine images because

00:13:21,630 --> 00:13:24,570
you can run VMs as non-root and this is

00:13:23,760 --> 00:13:27,600
one of the neat things about

00:13:24,570 --> 00:13:29,550
virtualization so you know he basically

00:13:27,600 --> 00:13:33,450
wrote a tool that just unpacked packages

00:13:29,550 --> 00:13:35,630
and makes VM images and it has some

00:13:33,450 --> 00:13:38,820
hacks that are kind of similar to mine

00:13:35,630 --> 00:13:42,600
so let me talk more about non-root the

00:13:38,820 --> 00:13:44,310
original unix was a time-sharing system

00:13:42,600 --> 00:13:47,550
you had this box and one things I find

00:13:44,310 --> 00:13:50,579
hilarious is there still exists like

00:13:47,550 --> 00:13:51,720
multi-user environments of like small

00:13:50,579 --> 00:13:53,279
groups of people on the internet you can

00:13:51,720 --> 00:13:55,470
you know give me you can ask for a shell

00:13:53,279 --> 00:13:58,529
account in a particular area I find this

00:13:55,470 --> 00:14:00,209
hilarious in the world of you know

00:13:58,529 --> 00:14:01,890
amazon web services and these other

00:14:00,209 --> 00:14:04,470
gigantic public clouds or you can get a

00:14:01,890 --> 00:14:07,050
slice of a vm for a small amount of time

00:14:04,470 --> 00:14:08,880
but it's kind of cute you can log in and

00:14:07,050 --> 00:14:11,430
type who and see the other people logged

00:14:08,880 --> 00:14:13,920
in anyways but the point was the

00:14:11,430 --> 00:14:16,860
original unix was was time Sharon you

00:14:13,920 --> 00:14:18,720
could log in as non-root and you know if

00:14:16,860 --> 00:14:24,089
I'm a scientific researcher I could run

00:14:18,720 --> 00:14:26,279
my you know some sort of cluster math in

00:14:24,089 --> 00:14:27,930
one process group and then you know

00:14:26,279 --> 00:14:28,499
another researcher could do something

00:14:27,930 --> 00:14:32,429
else

00:14:28,499 --> 00:14:34,919
on the same machine the same kernel so

00:14:32,429 --> 00:14:39,089
since then we've kind of reverted in

00:14:34,919 --> 00:14:42,929
some ways by having a lot of software

00:14:39,089 --> 00:14:46,019
require root privileges to run there are

00:14:42,929 --> 00:14:48,029
reasons why and this gets into sort of

00:14:46,019 --> 00:14:50,399
the centralized software management

00:14:48,029 --> 00:14:53,609
versus per user and the different ways

00:14:50,399 --> 00:14:56,039
we control that but what I want to talk

00:14:53,609 --> 00:14:58,889
about here specifically argue as the

00:14:56,039 --> 00:15:01,049
security target is in a atomic

00:14:58,889 --> 00:15:02,339
enterprise and openshift v3 and this is

00:15:01,049 --> 00:15:04,679
trickling down into Cooper Nettie's

00:15:02,339 --> 00:15:06,629
there's this concept of docker

00:15:04,679 --> 00:15:10,109
containers that are under a security

00:15:06,629 --> 00:15:12,179
constraint security constraint must run

00:15:10,109 --> 00:15:15,119
as range and what this does is actually

00:15:12,179 --> 00:15:17,519
pretty interesting so you take your

00:15:15,119 --> 00:15:19,739
docker image and then the system picks a

00:15:17,519 --> 00:15:21,089
user to run as this is actually kind of

00:15:19,739 --> 00:15:23,189
technologically similar to the way

00:15:21,089 --> 00:15:24,809
Android works when you download an

00:15:23,189 --> 00:15:26,309
application to your phone it obviously

00:15:24,809 --> 00:15:29,669
doesn't run as root because that would

00:15:26,309 --> 00:15:32,939
be crazy so it allocates a user ID ID

00:15:29,669 --> 00:15:34,979
for that application dynamically and in

00:15:32,939 --> 00:15:37,769
a clustered environment this is this is

00:15:34,979 --> 00:15:41,220
a more general it's a powerful way to do

00:15:37,769 --> 00:15:43,319
things because it ensures that you can

00:15:41,220 --> 00:15:46,049
isolate applications from each other

00:15:43,319 --> 00:15:51,179
using that same classic user ID

00:15:46,049 --> 00:15:54,149
isolation mechanism no there's also a

00:15:51,179 --> 00:15:56,459
reason that the public cloud model has

00:15:54,149 --> 00:15:58,859
been built on virtualization because

00:15:56,459 --> 00:16:00,929
virtualization is more secure than a

00:15:58,859 --> 00:16:03,149
shared colonel it probably always will

00:16:00,929 --> 00:16:05,249
be and this is certainly there have been

00:16:03,149 --> 00:16:10,289
flaws in virtualization there was at

00:16:05,249 --> 00:16:12,899
least one local exploit for qmu but the

00:16:10,289 --> 00:16:15,059
CVI linked here too was a local root

00:16:12,899 --> 00:16:17,369
exploit for that just any unprivileged

00:16:15,059 --> 00:16:20,009
user could access it's unfortunate it

00:16:17,369 --> 00:16:22,259
will probably always be the case but we

00:16:20,009 --> 00:16:27,169
try and fix them and it's not a reason

00:16:22,259 --> 00:16:29,399
of course not to do multi-tenant systems

00:16:27,169 --> 00:16:32,459
okay so the other thing I'm going to

00:16:29,399 --> 00:16:35,389
demo a little bit is in a in the docker

00:16:32,459 --> 00:16:38,309
image model you have a set of layers

00:16:35,389 --> 00:16:41,220
where's the way OS tree so I guess I

00:16:38,309 --> 00:16:43,740
should back up before docker existed

00:16:41,220 --> 00:16:47,220
I was writing this program history which

00:16:43,740 --> 00:16:49,769
is what's used for the atomic host

00:16:47,220 --> 00:16:51,689
update side and there's technical

00:16:49,769 --> 00:16:53,879
reasons why we have two different

00:16:51,689 --> 00:16:55,920
formats and I'm going to get into they

00:16:53,879 --> 00:16:58,290
have different advantages and I want to

00:16:55,920 --> 00:17:03,289
talk about some of the advantages of the

00:16:58,290 --> 00:17:06,480
OS tree format so one is that basically

00:17:03,289 --> 00:17:09,360
what o street does is just check Psalms

00:17:06,480 --> 00:17:11,699
each file a lot like it does I mean it's

00:17:09,360 --> 00:17:13,439
very much like get except it's designed

00:17:11,699 --> 00:17:16,110
to ship around binaries and not source

00:17:13,439 --> 00:17:19,049
code and along with that it comes it has

00:17:16,110 --> 00:17:21,270
some data format changes so for example

00:17:19,049 --> 00:17:23,730
it stores extended attributes and UID

00:17:21,270 --> 00:17:25,860
and GID things that get does not so that

00:17:23,730 --> 00:17:29,340
was why i created a new format it also

00:17:25,860 --> 00:17:33,030
uses sha256 instead of Shah one which

00:17:29,340 --> 00:17:36,539
yeah i think is the right choice and and

00:17:33,030 --> 00:17:39,090
some other details but the thing it the

00:17:36,539 --> 00:17:42,299
what I'm going to demo later is how if

00:17:39,090 --> 00:17:44,669
you have this model of checksum subtrees

00:17:42,299 --> 00:17:48,570
it's it's more powerful in general than

00:17:44,669 --> 00:17:52,370
layering but so if we want to go this

00:17:48,570 --> 00:17:54,840
route and I think we do because I don't

00:17:52,370 --> 00:17:56,669
username faces are probably going to you

00:17:54,840 --> 00:17:58,200
know we're probably going to invest in

00:17:56,669 --> 00:18:00,030
them more because the thing is you can

00:17:58,200 --> 00:18:01,650
just run yum or again app kid or

00:18:00,030 --> 00:18:03,870
whatever unmodified the problem with

00:18:01,650 --> 00:18:06,000
user name spaces they add a whole new

00:18:03,870 --> 00:18:08,309
attack surface to the colonel and what

00:18:06,000 --> 00:18:10,830
I'm trying to push for is if again the

00:18:08,309 --> 00:18:13,799
thesis here is if we change how we build

00:18:10,830 --> 00:18:18,299
and install rpms to run as non-root we a

00:18:13,799 --> 00:18:21,929
lot of complexity just drops away okay

00:18:18,299 --> 00:18:24,780
so one but if we want to do this though

00:18:21,929 --> 00:18:27,240
we need also a container runtime that's

00:18:24,780 --> 00:18:30,659
ready to run as a non-privileged juicer

00:18:27,240 --> 00:18:33,929
so again before docker I wrote one of

00:18:30,659 --> 00:18:35,940
these called linux user truite there

00:18:33,929 --> 00:18:38,940
couple is actually laying about 500

00:18:35,940 --> 00:18:42,900
lines of c code but there are a lot of

00:18:38,940 --> 00:18:44,250
other container run times too so one of

00:18:42,900 --> 00:18:47,669
the approaches that we could take is we

00:18:44,250 --> 00:18:49,740
could filter access to docker or system

00:18:47,669 --> 00:18:52,250
d and spawn or runs he or whatever one

00:18:49,740 --> 00:18:54,440
of these other container runtimes is

00:18:52,250 --> 00:18:55,789
it's a challenge

00:18:54,440 --> 00:18:58,070
benetti's is kind of doing this by

00:18:55,789 --> 00:18:59,929
default now so this one thing to look at

00:18:58,070 --> 00:19:01,669
and there are others actually G happen

00:18:59,929 --> 00:19:04,669
actually 0 install has some pretty neat

00:19:01,669 --> 00:19:09,889
ideas too that would be useful to look

00:19:04,669 --> 00:19:11,720
at ok so installing rpms is not rude so

00:19:09,889 --> 00:19:14,029
what I'm going to demo here is actually

00:19:11,720 --> 00:19:15,590
in some way is really similar to an

00:19:14,029 --> 00:19:18,649
improved version of what the Linux

00:19:15,590 --> 00:19:23,149
vserver people were doing you know 12

00:19:18,649 --> 00:19:26,450
years ago or more a long time ago if you

00:19:23,149 --> 00:19:28,639
click a link to this wiki page basically

00:19:26,450 --> 00:19:30,200
what they do is you know they just it's

00:19:28,639 --> 00:19:32,690
like the equivalent of yum install rude

00:19:30,200 --> 00:19:34,039
or I think the w1 is d bootstrap or

00:19:32,690 --> 00:19:35,389
something like that or basically you

00:19:34,039 --> 00:19:37,519
just run the packages you unpack them

00:19:35,389 --> 00:19:40,490
into root and the problem is these don't

00:19:37,519 --> 00:19:41,840
share storage right and this is one of

00:19:40,490 --> 00:19:43,610
the things that docker change with this

00:19:41,840 --> 00:19:46,429
concept of a base image that you branch

00:19:43,610 --> 00:19:48,110
off of but what they did is they wrote

00:19:46,429 --> 00:19:50,179
this tool V hash ified that just scans

00:19:48,110 --> 00:19:51,769
all your files and check sums them and

00:19:50,179 --> 00:19:53,690
if they're identical makes them into

00:19:51,769 --> 00:19:56,059
hard links and os tree is like a really

00:19:53,690 --> 00:19:58,190
overgrown version of this oh man

00:19:56,059 --> 00:19:59,929
actually today for a long time in fedora

00:19:58,190 --> 00:20:02,120
there's this tool called hard lake that

00:19:59,929 --> 00:20:03,799
if you just run regular you know fedora

00:20:02,120 --> 00:20:06,289
with yum whenever you have multiple

00:20:03,799 --> 00:20:08,210
kernels installs it checks sums on them

00:20:06,289 --> 00:20:10,429
and deduced them again OS tree is just

00:20:08,210 --> 00:20:12,919
an overgrown very polished version of

00:20:10,429 --> 00:20:14,299
this it's certainly not going to claim

00:20:12,919 --> 00:20:19,129
its innovative just that it's a pretty

00:20:14,299 --> 00:20:21,289
good implementation of it okay so what I

00:20:19,129 --> 00:20:23,720
want to actually demo something I gave a

00:20:21,289 --> 00:20:24,799
similar talk to this a container con but

00:20:23,720 --> 00:20:27,110
the time I was just saying hey we should

00:20:24,799 --> 00:20:33,769
do this and you know I realize I

00:20:27,110 --> 00:20:38,840
basically need to do it um so okay you

00:20:33,769 --> 00:20:43,340
go here so yeah running as non-root

00:20:38,840 --> 00:20:48,500
right so what I'm going to do here what

00:20:43,340 --> 00:20:50,690
I have is a local mirror of CentOS 7

00:20:48,500 --> 00:20:52,309
because I didn't trust the Wi-Fi to stay

00:20:50,690 --> 00:20:57,019
up here while I was doing my demo so

00:20:52,309 --> 00:20:58,759
yeah I just have a local mirror so so

00:20:57,019 --> 00:21:01,730
what um what this command I'd and

00:20:58,759 --> 00:21:03,769
there's no there's no container runtime

00:21:01,730 --> 00:21:06,379
here all I'm doing is managing hard

00:21:03,769 --> 00:21:07,690
lengths of directories Elena like Linux

00:21:06,379 --> 00:21:09,669
fees server was doing

00:21:07,690 --> 00:21:11,409
again just a little bit better so

00:21:09,669 --> 00:21:12,669
there's a couple component there's a

00:21:11,409 --> 00:21:18,370
number of directories that get created

00:21:12,669 --> 00:21:21,549
here one is there's a nostri repository

00:21:18,370 --> 00:21:23,649
which again runs as non-root and it's in

00:21:21,549 --> 00:21:25,870
a what we call bear user mode where the

00:21:23,649 --> 00:21:27,159
files are unpacked and i'll show how

00:21:25,870 --> 00:21:31,210
that works in a little minute in a

00:21:27,159 --> 00:21:33,909
minute there's a this directory RPM mt

00:21:31,210 --> 00:21:35,669
repose d is like yum repo study if you

00:21:33,909 --> 00:21:39,039
put repo files in there they get parsed

00:21:35,669 --> 00:21:44,710
and then finally there is a roots

00:21:39,039 --> 00:21:53,679
directory so what am I do now is make a

00:21:44,710 --> 00:21:56,019
container oops i just tested this okay

00:21:53,679 --> 00:21:59,139
rather than debug that i'm going to go

00:21:56,019 --> 00:22:03,190
over here and clean this up I made a

00:21:59,139 --> 00:22:09,190
docker container of this whole not a sec

00:22:03,190 --> 00:22:11,259
oh sorry otherwise it's not working just

00:22:09,190 --> 00:22:12,879
give me a second because my centos

00:22:11,259 --> 00:22:20,500
mirror is actually on this external hard

00:22:12,879 --> 00:22:22,990
drive which I forgot to figure okay just

00:22:20,500 --> 00:22:28,450
give it a second sorry I forgot to plug

00:22:22,990 --> 00:22:30,690
in okay and now i need to system control

00:22:28,450 --> 00:22:36,580
reload because of a system debug and

00:22:30,690 --> 00:22:39,009
okay cool have my cash again and all

00:22:36,580 --> 00:22:40,029
right let me get back in my lot of

00:22:39,009 --> 00:22:41,379
things I was going to show laterz this

00:22:40,029 --> 00:22:43,360
is actually inside a docker container

00:22:41,379 --> 00:22:49,870
just to make everything a little bit

00:22:43,360 --> 00:22:51,309
more metal all right and then oh yeah

00:22:49,870 --> 00:22:57,820
and something I probably forgot to do so

00:22:51,309 --> 00:22:59,919
I'm enabling this Centauri foe hopefully

00:22:57,820 --> 00:23:02,379
this will work so I actually left this

00:22:59,919 --> 00:23:04,659
warning in because it's useful to

00:23:02,379 --> 00:23:07,330
explain why it happens so actually built

00:23:04,659 --> 00:23:09,279
this docker container using the tools

00:23:07,330 --> 00:23:11,220
that are demoing right now and there's

00:23:09,279 --> 00:23:13,120
no etsy password inside the container

00:23:11,220 --> 00:23:16,419
assigned to that you ID because

00:23:13,120 --> 00:23:18,039
something has to do that okay so you can

00:23:16,419 --> 00:23:20,620
see that was actually that was pretty

00:23:18,039 --> 00:23:22,900
fast so what happened

00:23:20,620 --> 00:23:25,630
so again we needed a depth solve on bash

00:23:22,900 --> 00:23:28,330
you know the same way yum or any package

00:23:25,630 --> 00:23:29,680
manager will do but worth and you know

00:23:28,330 --> 00:23:31,240
we download them where things can

00:23:29,680 --> 00:23:34,270
actually start to get different is that

00:23:31,240 --> 00:23:37,660
rather than unpacking you rpms using RPM

00:23:34,270 --> 00:23:40,180
itself allestree takes over and parses

00:23:37,660 --> 00:23:42,610
them in and imports them into an OS tree

00:23:40,180 --> 00:23:45,010
repository so this is where you know

00:23:42,610 --> 00:23:48,640
each file in the RPM is getting shot 2

00:23:45,010 --> 00:23:53,230
326 checks on and that sort of thing so

00:23:48,640 --> 00:23:55,270
if we actually look at what's if i look

00:23:53,230 --> 00:23:57,640
at the branches and the OST repository

00:23:55,270 --> 00:24:00,250
you can see i have a separate branch for

00:23:57,640 --> 00:24:03,910
each RPM that was used as input to the

00:24:00,250 --> 00:24:05,950
system so this again is kind of like

00:24:03,910 --> 00:24:09,010
imagine you just did a get in it and

00:24:05,950 --> 00:24:10,450
then unpack teach RPM and did a you know

00:24:09,010 --> 00:24:14,679
get branch and get committed it's kind

00:24:10,450 --> 00:24:18,390
of like that except that unlike get this

00:24:14,679 --> 00:24:24,550
mode stores the files uncompressed so

00:24:18,390 --> 00:24:26,650
you know if i look at this one red and

00:24:24,550 --> 00:24:27,790
all filing in this docker image way so

00:24:26,650 --> 00:24:30,309
the point is just a regular file

00:24:27,790 --> 00:24:33,670
hopefully it's txt if I cat it will work

00:24:30,309 --> 00:24:35,230
yeah it's just a fun anyways so and then

00:24:33,670 --> 00:24:37,570
so the oldest tree repository stores

00:24:35,230 --> 00:24:40,990
these hard links and then inside this

00:24:37,570 --> 00:24:45,309
directory you can see I have a bash

00:24:40,990 --> 00:24:47,500
route so what this tool is doing is like

00:24:45,309 --> 00:24:50,350
what the OS tree or rpm o Street for the

00:24:47,500 --> 00:24:52,510
system does it basically uses sim links

00:24:50,350 --> 00:24:53,650
to point to different routes on the

00:24:52,510 --> 00:24:54,820
system that's that's how the route

00:24:53,650 --> 00:24:58,840
updates and I'm just doing the same

00:24:54,820 --> 00:25:01,660
thing for these root directories so if I

00:24:58,840 --> 00:25:03,640
am so up till now all again I've been

00:25:01,660 --> 00:25:05,590
doing is unpacking rpms a standard and

00:25:03,640 --> 00:25:10,390
there's there's been stuff around this

00:25:05,590 --> 00:25:13,000
before so what we actually need to do

00:25:10,390 --> 00:25:15,280
now is pick a container runtime now

00:25:13,000 --> 00:25:17,679
again I could use run see I could use

00:25:15,280 --> 00:25:19,059
system d and spawn I could use any of

00:25:17,679 --> 00:25:22,750
those tools for this those tools all

00:25:19,059 --> 00:25:26,380
require root privilege whereas this tool

00:25:22,750 --> 00:25:28,630
does not and I claim it's secure in the

00:25:26,380 --> 00:25:30,550
sense that you couldn't affect the

00:25:28,630 --> 00:25:32,590
system integrity with it there there are

00:25:30,550 --> 00:25:34,450
a lot of challenges to

00:25:32,590 --> 00:25:35,590
root containers around resource controls

00:25:34,450 --> 00:25:39,279
and things like that I'm not solving

00:25:35,590 --> 00:25:41,440
those just arguing the that once we get

00:25:39,279 --> 00:25:44,380
to the point of doing rpms non-root then

00:25:41,440 --> 00:25:47,710
the need for a non rule secure container

00:25:44,380 --> 00:25:51,400
runtime becomes more important too so

00:25:47,710 --> 00:25:52,690
now I can go in here so ladies retreat

00:25:51,400 --> 00:25:54,250
is actually kind of awkward and

00:25:52,690 --> 00:26:15,760
unfriendly to use because it's a little

00:25:54,250 --> 00:26:17,529
bit more of an API whoops yeah okay so

00:26:15,760 --> 00:26:19,899
now what happened is I just entered the

00:26:17,529 --> 00:26:21,190
container and I don't even have LS

00:26:19,899 --> 00:26:23,649
anymore because the container just has

00:26:21,190 --> 00:26:26,740
bash like it's really tiny but that's

00:26:23,649 --> 00:26:29,350
not that interesting right so let's um

00:26:26,740 --> 00:26:31,659
let's do something a little bit more

00:26:29,350 --> 00:26:36,730
interesting so if i do our PMO's tree

00:26:31,659 --> 00:26:38,049
container assemble htp d so what's a

00:26:36,730 --> 00:26:39,399
couple details here become pretty

00:26:38,049 --> 00:26:40,960
important you can see that I have a

00:26:39,399 --> 00:26:42,669
hundred and eleven packages I'm going to

00:26:40,960 --> 00:26:45,309
put in this true but I'm only

00:26:42,669 --> 00:26:48,039
downloading 94 why is that well that's

00:26:45,309 --> 00:26:50,860
because we have this concept of a shared

00:26:48,039 --> 00:26:53,649
store for each for all the exploded

00:26:50,860 --> 00:26:55,360
packages right so i don't have to

00:26:53,649 --> 00:26:57,669
download those or read checks on them

00:26:55,360 --> 00:27:00,850
it's using the fact that OS tree has a

00:26:57,669 --> 00:27:02,740
get like branching model for it's kind

00:27:00,850 --> 00:27:04,480
of like if you took yum or app Gator

00:27:02,740 --> 00:27:05,799
when those other things and you just cut

00:27:04,480 --> 00:27:07,899
off the bottom half that right to the

00:27:05,799 --> 00:27:13,029
file system that's basically what I've

00:27:07,899 --> 00:27:16,720
done and take it over so yeah okay so

00:27:13,029 --> 00:27:19,380
now we have an Apache route now if I go

00:27:16,720 --> 00:27:19,380
in here

00:27:23,450 --> 00:27:28,520
so I'm going to do fashion side here

00:27:29,090 --> 00:27:34,230
okay so one of the things that i'm doing

00:27:32,070 --> 00:27:36,750
here is i'm moving all the config files

00:27:34,230 --> 00:27:41,250
to user etsy because the idea is that

00:27:36,750 --> 00:27:42,990
you want to mount things i omitted here

00:27:41,250 --> 00:27:46,830
is you actually want to mount user read

00:27:42,990 --> 00:27:48,090
only and that actually works as non-root

00:27:46,830 --> 00:27:49,800
too because we want our containers to be

00:27:48,090 --> 00:27:51,750
immutable even though on so i'm still

00:27:49,800 --> 00:27:55,470
using the linux kernel container

00:27:51,750 --> 00:27:59,880
features as as Maori here but so what i

00:27:55,470 --> 00:28:02,130
do that's age so I want to make a copy

00:27:59,880 --> 00:28:04,260
of those apache config files and this is

00:28:02,130 --> 00:28:06,120
actually the same thing that OS tree on

00:28:04,260 --> 00:28:08,940
the system is doing we're just cop

00:28:06,120 --> 00:28:16,890
making a copy of Etsy which again just

00:28:08,940 --> 00:28:18,630
all works as non-root oops so ha okay so

00:28:16,890 --> 00:28:20,490
we have the next failure and this is

00:28:18,630 --> 00:28:23,130
actually an interesting topic right the

00:28:20,490 --> 00:28:24,750
RPM package of Apache comes hard coded

00:28:23,130 --> 00:28:30,150
to expect there's a user named Apache

00:28:24,750 --> 00:28:32,640
but if we're in a communities must run

00:28:30,150 --> 00:28:34,980
as range model where the system picks

00:28:32,640 --> 00:28:36,929
the UID or like Android wear the system

00:28:34,980 --> 00:28:38,760
picks the UID what I'm going to argue is

00:28:36,929 --> 00:28:41,040
that we should build on top of this and

00:28:38,760 --> 00:28:43,500
make this whole thing a lot more dynamic

00:28:41,040 --> 00:28:45,870
so you don't have the RPM post running

00:28:43,500 --> 00:28:47,910
user out you don't need that stuff that

00:28:45,870 --> 00:28:57,210
stuff should come from the system

00:28:47,910 --> 00:29:02,130
injecting it so let me actually yeah

00:28:57,210 --> 00:29:05,510
this is a pretty I did actually add them

00:29:02,130 --> 00:29:11,390
to my demo container but looks like

00:29:05,510 --> 00:29:11,390
wearing a different one oops

00:29:14,070 --> 00:29:24,869
just gonna hack this up let's try this I

00:29:26,820 --> 00:29:30,999
so honestly I actually switched from

00:29:29,049 --> 00:29:33,220
engine X just before this conference

00:29:30,999 --> 00:29:34,960
because I didn't trust the Wi-Fi and so

00:29:33,220 --> 00:29:36,609
I did a mirror of Santos but then I

00:29:34,960 --> 00:29:38,919
forgot that Santos Corps doesn't have

00:29:36,609 --> 00:29:42,249
engine X so I didn't fully trust running

00:29:38,919 --> 00:29:44,139
Apache but honestly yeah I could make

00:29:42,249 --> 00:29:47,109
this work but the point is yeah Apache

00:29:44,139 --> 00:29:48,489
will run happily as non-root we just

00:29:47,109 --> 00:29:51,369
have to change some things like we also

00:29:48,489 --> 00:29:52,570
have to change the port configuration so

00:29:51,369 --> 00:29:55,509
I'm not creating a new network username

00:29:52,570 --> 00:29:57,700
space here so I need it to bind on port

00:29:55,509 --> 00:30:01,989
8080 or something like that because I'm

00:29:57,700 --> 00:30:03,340
not yes so one important things is a lot

00:30:01,989 --> 00:30:05,440
of the container runtimes do network

00:30:03,340 --> 00:30:07,330
control so in the coup Brandis

00:30:05,440 --> 00:30:10,239
environment the system actually

00:30:07,330 --> 00:30:12,940
allocates a separate IP per pod and make

00:30:10,239 --> 00:30:15,279
sure it with there's some really fancy

00:30:12,940 --> 00:30:17,289
networking stuff you can do to make sure

00:30:15,279 --> 00:30:19,509
that the tent different tenants between

00:30:17,289 --> 00:30:21,669
Apache between your containers are

00:30:19,509 --> 00:30:23,019
isolated and that's all stuff that linux

00:30:21,669 --> 00:30:25,029
user it is never going to do because

00:30:23,019 --> 00:30:27,639
it's not going to give you any more

00:30:25,029 --> 00:30:29,710
privileges than a classic unix system

00:30:27,639 --> 00:30:31,239
had so in a classic unix system you

00:30:29,710 --> 00:30:33,369
can't just SSH in and create network

00:30:31,239 --> 00:30:34,899
interfaces right so so that's again

00:30:33,369 --> 00:30:38,200
something that's a problem not solving

00:30:34,899 --> 00:30:41,320
but i think the higher-level container

00:30:38,200 --> 00:30:43,389
on time should handle alright so i could

00:30:41,320 --> 00:30:47,559
get apache to run but let's let's take

00:30:43,389 --> 00:30:49,509
this one more and so when I assemble a

00:30:47,559 --> 00:30:51,099
postgres container you can see I'm only

00:30:49,509 --> 00:30:53,109
downloading two packages because it

00:30:51,099 --> 00:30:55,210
shares almost everything else with that

00:30:53,109 --> 00:30:57,849
Apache container except just postgres

00:30:55,210 --> 00:31:01,269
right but unlike in a docker layering

00:30:57,849 --> 00:31:03,429
model each of these file system trees is

00:31:01,269 --> 00:31:05,349
as minimal as the RPMs will let them to

00:31:03,429 --> 00:31:08,649
go now there's a lot of other stuff that

00:31:05,349 --> 00:31:11,229
we can do to make the RPMs more minimal

00:31:08,649 --> 00:31:14,200
so for example the RPM is actually right

00:31:11,229 --> 00:31:17,619
now requires systemd now if we take this

00:31:14,200 --> 00:31:19,059
a next step this gets get complicated

00:31:17,619 --> 00:31:21,340
because this MD has a lot of useful

00:31:19,059 --> 00:31:25,480
features but what I want to assert here

00:31:21,340 --> 00:31:28,750
is that in a multi-tenant environment

00:31:25,480 --> 00:31:32,110
we don't want users uploading systemd

00:31:28,750 --> 00:31:34,120
unit files systemd is so we don't want

00:31:32,110 --> 00:31:36,669
them to allow allow users to control the

00:31:34,120 --> 00:31:38,559
system boot process so by moving to a

00:31:36,669 --> 00:31:40,480
forced non-root model I'm kind of

00:31:38,559 --> 00:31:42,370
solving that because the those users

00:31:40,480 --> 00:31:44,650
can't affect the boot of the system and

00:31:42,370 --> 00:31:46,960
that affects how systemd works anyways a

00:31:44,650 --> 00:31:51,820
lot of different details um that's the

00:31:46,960 --> 00:31:54,490
core the demo so each of these routes I

00:31:51,820 --> 00:31:57,040
got to emphasize is just hard link trees

00:31:54,490 --> 00:31:58,150
and that means they all share memory so

00:31:57,040 --> 00:31:59,320
one of the problems with the dock or

00:31:58,150 --> 00:32:02,200
layering model is if you have multiple

00:31:59,320 --> 00:32:03,370
base images they don't share memory and

00:32:02,200 --> 00:32:05,350
that sort of thing because it just

00:32:03,370 --> 00:32:08,020
doesn't know whereas if we use OS tree

00:32:05,350 --> 00:32:12,760
we can make that work so I gotta fly

00:32:08,020 --> 00:32:15,490
through the rest of this stuff demo yeah

00:32:12,760 --> 00:32:17,679
so dealing with post means we'll need

00:32:15,490 --> 00:32:18,850
some sort of run time so one of the

00:32:17,679 --> 00:32:21,549
things i want to do with this technology

00:32:18,850 --> 00:32:23,380
is actually just go in and replace the

00:32:21,549 --> 00:32:25,720
whole guts of the mock RPM build tool

00:32:23,380 --> 00:32:28,270
because that's not competing with

00:32:25,720 --> 00:32:29,980
anything else and right now mock is

00:32:28,270 --> 00:32:31,360
actually not secure in that if you're in

00:32:29,980 --> 00:32:33,040
the mock group it's basically just a

00:32:31,360 --> 00:32:35,650
glorified root shell because it's

00:32:33,040 --> 00:32:37,870
actually really hard to write container

00:32:35,650 --> 00:32:39,280
tools that are accessible to route to

00:32:37,870 --> 00:32:43,390
non privileged users by default and be

00:32:39,280 --> 00:32:47,290
secure anyways and also the fact that

00:32:43,390 --> 00:32:49,360
uses OS tree hard linking will be it

00:32:47,290 --> 00:32:51,280
should make take it should change

00:32:49,360 --> 00:32:53,890
installing a build route from something

00:32:51,280 --> 00:32:57,580
like you know minutes to ten seconds or

00:32:53,890 --> 00:33:00,250
less it's really fast so another thing i

00:32:57,580 --> 00:33:02,620
want to do with this is you still use

00:33:00,250 --> 00:33:03,970
docker but this is a container that

00:33:02,620 --> 00:33:05,830
you're running your infrastructure and

00:33:03,970 --> 00:33:08,110
you give it inputs you say i want you

00:33:05,830 --> 00:33:11,169
know containers with these rpms and it

00:33:08,110 --> 00:33:12,880
knows when to rebuild them oh and

00:33:11,169 --> 00:33:13,990
actually that was sorry that was

00:33:12,880 --> 00:33:22,540
actually important part of the demo that

00:33:13,990 --> 00:33:25,059
i skipped um let me just jump back right

00:33:22,540 --> 00:33:26,830
so again going back that first point

00:33:25,059 --> 00:33:29,080
making things is easy how do you

00:33:26,830 --> 00:33:30,130
maintain them over time sorry I skipped

00:33:29,080 --> 00:33:34,150
this apart a tunnel because I think it's

00:33:30,130 --> 00:33:36,190
cool so I have another repo here a demo

00:33:34,150 --> 00:33:38,000
update repo and this basically just has

00:33:36,190 --> 00:33:39,350
a new version of openssl right

00:33:38,000 --> 00:33:41,870
so the next heartbleed comes out or

00:33:39,350 --> 00:33:43,850
whatever right in what we have right now

00:33:41,870 --> 00:33:45,710
anatomic enterprise an open shift v3 is

00:33:43,850 --> 00:33:47,690
this concept of an image stream where

00:33:45,710 --> 00:33:49,430
when a new base image comes in it'll

00:33:47,690 --> 00:33:51,350
it'll rebuild all of your apps and

00:33:49,430 --> 00:33:59,270
things like that I can actually do that

00:33:51,350 --> 00:34:02,660
a lot it's faster oh wait how long so

00:33:59,270 --> 00:34:04,580
now when I rerun the upgrade it's a only

00:34:02,660 --> 00:34:06,260
one new package this machine whole

00:34:04,580 --> 00:34:08,990
machine only needs to download one new

00:34:06,260 --> 00:34:11,360
version of open SSL and it knows when to

00:34:08,990 --> 00:34:13,389
upgrade my container it made a new

00:34:11,360 --> 00:34:16,220
truite it's all hard linked and clean

00:34:13,389 --> 00:34:19,070
and again if i type upgrade again it's

00:34:16,220 --> 00:34:25,129
like you're done you are secure so in it

00:34:19,070 --> 00:34:26,690
that way it was that fast okay so yeah

00:34:25,129 --> 00:34:29,629
so that's one of the things that I want

00:34:26,690 --> 00:34:31,250
to do is you know have an infrastructure

00:34:29,629 --> 00:34:33,350
container that can basically just

00:34:31,250 --> 00:34:35,960
generate your doctor images assuming

00:34:33,350 --> 00:34:37,429
you're using rpms only and then finally

00:34:35,960 --> 00:34:39,110
the other thing I'd really like to do

00:34:37,429 --> 00:34:41,120
with this is basically have a

00:34:39,110 --> 00:34:42,950
centralized server and this goes all the

00:34:41,120 --> 00:34:44,780
way back to NFS roots you know why

00:34:42,950 --> 00:34:46,790
unpack all the software into each

00:34:44,780 --> 00:34:49,460
machine you can just have a centralized

00:34:46,790 --> 00:34:51,050
server and and mount it read only so in

00:34:49,460 --> 00:34:54,830
that and that meshes well with all this

00:34:51,050 --> 00:34:56,179
model so I'm pretty much yeah okay that

00:34:54,830 --> 00:35:00,550
was the end of my slide and I don't have

00:34:56,179 --> 00:35:00,550
five minutes for questions so questions

00:35:04,609 --> 00:35:08,579
so the question was where am i finding

00:35:06,809 --> 00:35:10,230
this being used or most applicable right

00:35:08,579 --> 00:35:11,250
now so yeah as try to answer that with

00:35:10,230 --> 00:35:12,930
the last couple slides that's basically

00:35:11,250 --> 00:35:15,270
I want to replace mock the guts amok

00:35:12,930 --> 00:35:18,270
because it's faster and it's and it's

00:35:15,270 --> 00:35:21,030
actually secure I believe anyways and

00:35:18,270 --> 00:35:23,549
again or build docker containers so I

00:35:21,030 --> 00:35:27,599
mentioned that this this tool actually

00:35:23,549 --> 00:35:31,079
was built using it's the container was

00:35:27,599 --> 00:35:32,839
built using itself so I used our

00:35:31,079 --> 00:35:35,309
chemistry container assembled to make a

00:35:32,839 --> 00:35:37,799
file system that just had our pmos tree

00:35:35,309 --> 00:35:39,869
and linux users root and then i exported

00:35:37,799 --> 00:35:41,609
it into a tarball that I dock or import

00:35:39,869 --> 00:35:43,470
so that's part of how this

00:35:41,609 --> 00:35:45,420
infrastructure at work is like you have

00:35:43,470 --> 00:35:46,740
the shared storage on the centralized

00:35:45,420 --> 00:35:48,900
server and then you export it to docker

00:35:46,740 --> 00:35:52,369
or you just mount it from docker so the

00:35:48,900 --> 00:35:52,369
doc or demon could learn how to mount it

00:36:04,790 --> 00:36:08,790
I'm not sure I how's it how's it

00:36:07,230 --> 00:36:11,280
compared against what

00:36:08,790 --> 00:36:13,320
Oh Nick so it's um yeah there's a

00:36:11,280 --> 00:36:14,970
comparison there so the executive

00:36:13,320 --> 00:36:18,060
summary of history vs knicks OS is

00:36:14,970 --> 00:36:20,100
nicholas is also a build system and they

00:36:18,060 --> 00:36:22,470
have this fairly rigorous process where

00:36:20,100 --> 00:36:23,880
they check some all the inputs and if

00:36:22,470 --> 00:36:25,620
any of the inputs change rebuild

00:36:23,880 --> 00:36:27,300
everything and I basically don't think

00:36:25,620 --> 00:36:28,740
it's practical to rebuild your entire

00:36:27,300 --> 00:36:32,160
infrastructure for the next G Lib C

00:36:28,740 --> 00:36:36,630
security update otherwise they share a

00:36:32,160 --> 00:36:38,010
lot of ideas you know they have their

00:36:36,630 --> 00:36:39,960
own binary format they could probably

00:36:38,010 --> 00:36:43,650
just use those tree but oh it's trees

00:36:39,960 --> 00:36:45,480
not attempting to solve Oh streety kind

00:36:43,650 --> 00:36:48,300
of replaces the bad parts of our p.m.

00:36:45,480 --> 00:36:49,530
only and that's intentional right like

00:36:48,300 --> 00:36:53,430
I'm not trying to make a new package

00:36:49,530 --> 00:36:55,200
manager because that has all sorts of

00:36:53,430 --> 00:36:57,840
ramifications I'm just changing how we

00:36:55,200 --> 00:37:00,630
write to the file system that's all they

00:36:57,840 --> 00:37:01,710
have some good ideas too but yeah but

00:37:00,630 --> 00:37:11,400
it's the rebuild thing that I think

00:37:01,710 --> 00:37:13,320
makes it very impractical yeah okay yeah

00:37:11,400 --> 00:37:15,290
so the question was can a user provide

00:37:13,320 --> 00:37:17,580
kenna like an a system administrator

00:37:15,290 --> 00:37:20,730
administrator provide their base tree

00:37:17,580 --> 00:37:23,400
and then users add stuff on top um yes

00:37:20,730 --> 00:37:24,960
so that gets to the point of like if you

00:37:23,400 --> 00:37:26,370
have these really big apps you probably

00:37:24,960 --> 00:37:29,580
actually want some notion of layering

00:37:26,370 --> 00:37:31,980
it's interesting but remember even

00:37:29,580 --> 00:37:34,110
though there's no layers in actuality in

00:37:31,980 --> 00:37:35,850
practice they all share storage so and

00:37:34,110 --> 00:37:37,890
it's all pretty fast to assemble each

00:37:35,850 --> 00:37:40,920
route so if you have a user that wants a

00:37:37,890 --> 00:37:43,230
different version of apache that route

00:37:40,920 --> 00:37:44,580
shares all the same storage with the

00:37:43,230 --> 00:37:47,310
rest of the stuff transparently and

00:37:44,580 --> 00:37:48,780
automatically so but yes probably

00:37:47,310 --> 00:37:50,010
investigate something like that and this

00:37:48,780 --> 00:37:54,710
will also help you our PMO Street

00:37:50,010 --> 00:37:54,710
package layering yep so I

00:38:01,000 --> 00:38:04,819
okay it's a great question so the

00:38:03,530 --> 00:38:06,230
question was if you're using this tool

00:38:04,819 --> 00:38:07,849
how do you add stuff that's not packages

00:38:06,230 --> 00:38:09,530
I would definitely insert that's one of

00:38:07,849 --> 00:38:11,270
the number one most popular things about

00:38:09,530 --> 00:38:13,400
docker is you can basically you know

00:38:11,270 --> 00:38:15,440
your app get some stuff and then you can

00:38:13,400 --> 00:38:17,990
pip install and then maybe i'm going to

00:38:15,440 --> 00:38:21,500
use cargo or go or something else to add

00:38:17,990 --> 00:38:22,700
more stuff and glom it together the

00:38:21,500 --> 00:38:25,130
problem when you want to do all this

00:38:22,700 --> 00:38:28,599
stuff is around the updates like this is

00:38:25,130 --> 00:38:30,710
how do you know when to update it and so

00:38:28,599 --> 00:38:33,349
there's a couple answers that one is you

00:38:30,710 --> 00:38:34,790
auto generate rpms the second is someone

00:38:33,349 --> 00:38:37,339
else could write a tool like this using

00:38:34,790 --> 00:38:39,589
austria that understands like the

00:38:37,339 --> 00:38:41,119
problem is you have to port the tool

00:38:39,589 --> 00:38:43,010
that generates the artifacts to know a

00:38:41,119 --> 00:38:46,430
little bit about how Louis tree works so

00:38:43,010 --> 00:38:48,740
lowest raise an API not a demon so but I

00:38:46,430 --> 00:38:51,829
guess autogenic rpms is probably the

00:38:48,740 --> 00:38:53,390
simplest to start well yeah I mean

00:38:51,829 --> 00:38:56,900
handed you could certainly do other

00:38:53,390 --> 00:39:02,319
things but my seller question over here

00:38:56,900 --> 00:39:02,319
but you're not Oh in the back yeah

00:39:11,880 --> 00:39:15,280
okay so the question was how do I make

00:39:13,930 --> 00:39:17,290
this friendly and usable with rocket

00:39:15,280 --> 00:39:19,720
system DN spawn you could it would

00:39:17,290 --> 00:39:21,339
probably be a two line I mean it's very

00:39:19,720 --> 00:39:26,080
easy all this does is generate the roots

00:39:21,339 --> 00:39:27,580
so I mean you you do need some sort of

00:39:26,080 --> 00:39:29,380
management layer on top and this is

00:39:27,580 --> 00:39:31,780
where docker is actually pretty good as

00:39:29,380 --> 00:39:33,490
far as the demon in providing an API and

00:39:31,780 --> 00:39:34,630
things like that so there have to be

00:39:33,490 --> 00:39:36,160
some sort of management layer and

00:39:34,630 --> 00:39:39,070
whether that's docker or at the Cougar

00:39:36,160 --> 00:39:42,490
Nettie's level but i don't i'm not

00:39:39,070 --> 00:39:44,380
trying to like do that yet because

00:39:42,490 --> 00:39:47,589
that's that's that has huge

00:39:44,380 --> 00:39:48,700
ramifications but yeah if someone was

00:39:47,589 --> 00:39:50,530
going to do that would probably be at

00:39:48,700 --> 00:39:52,720
the Cougar navy's level or something

00:39:50,530 --> 00:39:54,099
like that but otherwise you basically

00:39:52,720 --> 00:39:55,180
just point system DN spawned one of

00:39:54,099 --> 00:39:56,950
these directors it just works the same

00:39:55,180 --> 00:39:58,630
way if you use yum install route it's

00:39:56,950 --> 00:40:00,190
just that it's a better way yeah it's

00:39:58,630 --> 00:40:03,490
just a better way to do yum install room

00:40:00,190 --> 00:40:10,080
as non-root that's all it is so the same

00:40:03,490 --> 00:40:10,080
way you do that okay

00:40:20,770 --> 00:40:29,180
right so the question was what can RPM

00:40:25,220 --> 00:40:31,090
do to make this better okay um yeah so

00:40:29,180 --> 00:40:33,650
definitely gets around the scriptlets

00:40:31,090 --> 00:40:35,420
but it's not actually necessarily rpm

00:40:33,650 --> 00:40:37,610
level for the most part all we need to

00:40:35,420 --> 00:40:40,100
do especially if you take out stuff like

00:40:37,610 --> 00:40:42,170
user add then you just make your route

00:40:40,100 --> 00:40:44,630
and then run all the post ends and so

00:40:42,170 --> 00:40:46,730
you just we need to move to that post

00:40:44,630 --> 00:40:48,800
post trans model for pretty much all the

00:40:46,730 --> 00:40:50,570
packages like for things like LD config

00:40:48,800 --> 00:40:51,890
and stuff like that um and there's

00:40:50,570 --> 00:40:54,160
actually other stuff like making our

00:40:51,890 --> 00:40:56,720
PMDB show you better i'm at a time um

00:40:54,160 --> 00:40:58,430
yeah like I said don't hesitate to email

00:40:56,720 --> 00:41:01,990
me if you have random other follow-up

00:40:58,430 --> 00:41:01,990
questions thanks

00:42:53,890 --> 00:42:55,890
Oh

00:43:25,619 --> 00:43:32,650
yeah okay thank you very much hold 2016

00:43:29,500 --> 00:43:36,329
dead calm all right awesome yours

00:43:32,650 --> 00:43:36,329
sticker yeah

00:43:46,669 --> 00:43:56,660
my opinions cuz i incorporated parameter

00:43:53,549 --> 00:43:56,660
twitter post

00:44:26,279 --> 00:44:29,730
where is toto

00:44:30,580 --> 00:44:45,910
you're one of the Lima hey what is

00:44:43,480 --> 00:44:48,130
running this because we run the Sean

00:44:45,910 --> 00:44:51,190
year I mean there was a call for

00:44:48,130 --> 00:44:53,920
volunteers yeah so everybody wanted to

00:44:51,190 --> 00:44:56,980
just sign up and be a session or just

00:44:53,920 --> 00:44:58,810
you know healthway stuff yeah so we was

00:44:56,980 --> 00:45:06,220
for everyone redhead but you know we are

00:44:58,810 --> 00:45:08,610
the most social one this car I think I

00:45:06,220 --> 00:45:08,610

YouTube URL: https://www.youtube.com/watch?v=VROGQyNgYZ0


