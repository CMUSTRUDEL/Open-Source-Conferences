Title: Docker for Developers - Michael Hrivnak
Publication date: 2016-02-11
Playlist: DevConf.cz 2016
Description: 
	Docker is not just for deployment. As a developer, there are many ways Docker can make you more productive, regardless of how your app gets deployed.

In this session, you will learn practical strategies for using Docker, including how to:

- Run unit tests locally in multiple environments with almost no overhead.
- Make your integration tests easy for anyone to run by distributing them in a Docker image.
- Simulate advanced network topologies, especially for a service-oriented architecture.
- Make a Docker image in 5 minutes or less that produces builds from a consistent environment.
- Isolate database state changes in your test suite by using a pool of disposable containers.

Presentation: http://bit.ly/1KKSoff
Captions: 
	00:00:00,000 --> 00:00:06,990
hear me in the back awesome Thank You

00:00:01,740 --> 00:00:09,300
Jay so my name is Michael rhythmic I

00:00:06,990 --> 00:00:11,460
work for red hat I've been there for

00:00:09,300 --> 00:00:16,020
three and a half closing it on for years

00:00:11,460 --> 00:00:17,850
now I work on a project called pulp give

00:00:16,020 --> 00:00:20,880
you a context for that so you understand

00:00:17,850 --> 00:00:22,199
where this talk came from and where

00:00:20,880 --> 00:00:26,130
these ideas came from how they've been

00:00:22,199 --> 00:00:28,619
valuable to me pulp is a big web

00:00:26,130 --> 00:00:31,640
application written in Python it has a

00:00:28,619 --> 00:00:33,989
lot of moving parts somewhat complex

00:00:31,640 --> 00:00:37,110
long-running asynchronous jobs in

00:00:33,989 --> 00:00:38,399
addition to rest api web handlers we

00:00:37,110 --> 00:00:41,280
have to integrate with a lot of other

00:00:38,399 --> 00:00:45,120
kinds of services such a kind of work

00:00:41,280 --> 00:00:47,879
that I do every day I've found docker to

00:00:45,120 --> 00:00:49,350
be just useful to me just as a developer

00:00:47,879 --> 00:00:51,180
not even necessarily to the rest of my

00:00:49,350 --> 00:00:55,920
team so I'm going to share with you some

00:00:51,180 --> 00:00:58,440
ways that it has been useful so doctor

00:00:55,920 --> 00:01:00,899
is very popular right I I look to the

00:00:58,440 --> 00:01:03,539
schedule for today and there are 15

00:01:00,899 --> 00:01:06,060
talks about containers just in this

00:01:03,539 --> 00:01:07,049
conference just today this is just the

00:01:06,060 --> 00:01:09,180
first day and that's pretty incredible

00:01:07,049 --> 00:01:11,580
entire new conferences have come into

00:01:09,180 --> 00:01:14,280
existence new companies are in existence

00:01:11,580 --> 00:01:15,900
Dockers obviously one of them containers

00:01:14,280 --> 00:01:19,670
are just really hot but there's a real

00:01:15,900 --> 00:01:22,909
trend to the discussion that is that

00:01:19,670 --> 00:01:25,979
it's mostly focused on deployment I

00:01:22,909 --> 00:01:27,540
looked at the again the schedule for

00:01:25,979 --> 00:01:30,479
today and you look you see like these

00:01:27,540 --> 00:01:31,860
fantastic brilliant technologies Cooper

00:01:30,479 --> 00:01:34,619
Nettie's an open shift or the ones i'm

00:01:31,860 --> 00:01:37,380
most familiar with all these different

00:01:34,619 --> 00:01:39,240
ways of deploying applications in new

00:01:37,380 --> 00:01:43,229
paradigms you know it's wonderful to

00:01:39,240 --> 00:01:45,420
think about and talk about but there's a

00:01:43,229 --> 00:01:48,000
problem with it and that's that not

00:01:45,420 --> 00:01:51,509
everybody can do it yet actually very

00:01:48,000 --> 00:01:54,420
few of us have the freedom to take apps

00:01:51,509 --> 00:01:57,000
that pre-exists and were designed in

00:01:54,420 --> 00:02:00,180
some a different mode and and use

00:01:57,000 --> 00:02:01,259
containers to deploy them so we're going

00:02:00,180 --> 00:02:04,829
to talk about something very different

00:02:01,259 --> 00:02:06,750
today besides that we're talking about

00:02:04,829 --> 00:02:08,369
what can one developer just use this is

00:02:06,750 --> 00:02:11,009
a developer conference so what can you

00:02:08,369 --> 00:02:11,990
guys do just by yourself with just your

00:02:11,009 --> 00:02:14,030
laptop

00:02:11,990 --> 00:02:16,040
can you take advantage of what docker

00:02:14,030 --> 00:02:20,060
has to offer just to make your life

00:02:16,040 --> 00:02:22,400
easier so to get started with three

00:02:20,060 --> 00:02:25,280
skills to look at and one piece of

00:02:22,400 --> 00:02:29,480
knowledge piece of knowledge just fairly

00:02:25,280 --> 00:02:33,200
basic but I like the basics here I've

00:02:29,480 --> 00:02:34,280
run a docker command twice we're going

00:02:33,200 --> 00:02:35,840
to parse through this because you're

00:02:34,280 --> 00:02:37,700
going to see a variation on this command

00:02:35,840 --> 00:02:40,490
throughout this talk so we're running

00:02:37,700 --> 00:02:42,800
docker I want to run a container the I

00:02:40,490 --> 00:02:46,910
means make it interactive the t means

00:02:42,800 --> 00:02:48,590
allocated TTYL dash dash RM means as

00:02:46,910 --> 00:02:50,690
soon as this container is done running

00:02:48,590 --> 00:02:52,520
just delete it I don't want to keep the

00:02:50,690 --> 00:02:54,980
history I don't want to keep the logs I

00:02:52,520 --> 00:02:57,290
don't want to keep the history of the

00:02:54,980 --> 00:02:59,960
file system changes just delete it as

00:02:57,290 --> 00:03:03,680
soon as it exits centos is a repository

00:02:59,960 --> 00:03:06,680
and since I 7 is a label within that and

00:03:03,680 --> 00:03:10,070
of course true is a process what's this

00:03:06,680 --> 00:03:13,190
true return in bash 0 of course and

00:03:10,070 --> 00:03:14,930
false we see returns 1 so this is just

00:03:13,190 --> 00:03:17,240
to illustrate in the most basic sense

00:03:14,930 --> 00:03:19,910
many things that we've been doing in

00:03:17,240 --> 00:03:22,640
bash we can continue to do in very

00:03:19,910 --> 00:03:25,550
similar ways but just wrap this

00:03:22,640 --> 00:03:26,990
containment idea around them and we can

00:03:25,550 --> 00:03:31,610
really get some extra benefit out of

00:03:26,990 --> 00:03:35,620
that some extra value skill number one

00:03:31,610 --> 00:03:38,690
is bind mounts how do you get data into

00:03:35,620 --> 00:03:41,150
your running container here I've made a

00:03:38,690 --> 00:03:45,350
directory and I've created a file and

00:03:41,150 --> 00:03:47,360
given it a little bit of content now we

00:03:45,350 --> 00:03:49,040
have a very similar docker run command

00:03:47,360 --> 00:03:52,070
but you see in green I've added this

00:03:49,040 --> 00:03:54,530
dash V option this is to bind mount so

00:03:52,070 --> 00:03:57,560
I've given a path on my local laptop

00:03:54,530 --> 00:03:59,060
here my home directory and on the right

00:03:57,560 --> 00:04:01,520
side of that colon is a directory inside

00:03:59,060 --> 00:04:03,550
the container this directory doesn't

00:04:01,520 --> 00:04:05,600
have to exist it'll be created and

00:04:03,550 --> 00:04:07,910
whatever's on your host will be bind

00:04:05,600 --> 00:04:09,830
mounted right in and you can see here

00:04:07,910 --> 00:04:11,660
that I can read from that file and of

00:04:09,830 --> 00:04:14,270
course right to it this is a great way

00:04:11,660 --> 00:04:17,000
for example to get your source code that

00:04:14,270 --> 00:04:19,010
you've been hacking on bind mounted into

00:04:17,000 --> 00:04:22,460
your container to to do something with

00:04:19,010 --> 00:04:25,550
it well look at some examples and the

00:04:22,460 --> 00:04:28,430
next skill is links one container by

00:04:25,550 --> 00:04:30,530
self sometimes isn't enough sometimes

00:04:28,430 --> 00:04:33,259
this isn't very interesting so here I've

00:04:30,530 --> 00:04:35,720
run a service this is an application

00:04:33,259 --> 00:04:37,430
called crane it's part of the pulp

00:04:35,720 --> 00:04:39,199
project I work on what it does isn't

00:04:37,430 --> 00:04:42,050
very important except just to know that

00:04:39,199 --> 00:04:45,289
it's a web service that exposes a single

00:04:42,050 --> 00:04:46,729
port port 80 what's different about this

00:04:45,289 --> 00:04:50,300
doctor run command you can see I've

00:04:46,729 --> 00:04:52,639
given it a name crane with the dash dash

00:04:50,300 --> 00:04:54,169
name you put anything everybody wasn't

00:04:52,639 --> 00:04:56,509
feeling especially creative apparently

00:04:54,169 --> 00:04:58,969
so I named a crane and then we can see

00:04:56,509 --> 00:05:00,259
in the output of docker PS and for those

00:04:58,969 --> 00:05:02,530
of you who are especially observant

00:05:00,259 --> 00:05:04,909
you've perhaps notice that I have

00:05:02,530 --> 00:05:07,219
truncated the output i removed some

00:05:04,909 --> 00:05:08,750
columns that were not valuable but we're

00:05:07,219 --> 00:05:10,969
definitely causing a horrible line

00:05:08,750 --> 00:05:11,990
wrapping problem for me so I promise

00:05:10,969 --> 00:05:14,409
there wasn't anything interesting there

00:05:11,990 --> 00:05:17,349
you can see that we have this running

00:05:14,409 --> 00:05:22,969
container now that it is exposing

00:05:17,349 --> 00:05:25,069
something on TCP port 80 back to our

00:05:22,969 --> 00:05:27,349
doctor run command you can see in green

00:05:25,069 --> 00:05:29,599
I've used the dash dash link option and

00:05:27,349 --> 00:05:32,240
all I've done is referenced that name

00:05:29,599 --> 00:05:36,560
that I gave to the first container that

00:05:32,240 --> 00:05:39,259
I run I ran and now in my bash shell

00:05:36,560 --> 00:05:41,449
inside the container I run a curl

00:05:39,259 --> 00:05:44,300
command and I'm just referencing crane

00:05:41,449 --> 00:05:46,819
by name as a host name this is brilliant

00:05:44,300 --> 00:05:49,759
when I discovered the doctor could do

00:05:46,819 --> 00:05:51,229
this the documentation actually leads

00:05:49,759 --> 00:05:53,360
you a little bit down a different path

00:05:51,229 --> 00:05:54,770
to say when you linked together two

00:05:53,360 --> 00:05:56,650
containers look at the environment

00:05:54,770 --> 00:05:59,629
variables as all these helpful

00:05:56,650 --> 00:06:02,330
permutations of including the IP address

00:05:59,629 --> 00:06:05,210
and the port what protocols and these

00:06:02,330 --> 00:06:07,909
kinds of things when I saw that you

00:06:05,210 --> 00:06:10,430
could just reference it by name with the

00:06:07,909 --> 00:06:12,199
link and then it resolves using normal

00:06:10,430 --> 00:06:14,539
DNS mechanisms we're all familiar with

00:06:12,199 --> 00:06:17,750
is really just brilliant nothing could

00:06:14,539 --> 00:06:21,199
be simpler so it's very easy and then we

00:06:17,750 --> 00:06:23,449
can see I got some expected output for

00:06:21,199 --> 00:06:29,389
bonus points anybody recognize this API

00:06:23,449 --> 00:06:33,110
endpoint nobody i'm just being shy this

00:06:29,389 --> 00:06:36,800
is the docker v1 registry that we had to

00:06:33,110 --> 00:06:39,409
reimplement in python and last

00:06:36,800 --> 00:06:40,999
environment variables you can inject

00:06:39,409 --> 00:06:43,519
environment variables into a running

00:06:40,999 --> 00:06:46,129
container at runtime so you see here in

00:06:43,519 --> 00:06:48,009
green I've used the dashed lowercase e

00:06:46,129 --> 00:06:53,119
and I can set an environment variable

00:06:48,009 --> 00:06:54,919
food to a value of hello in inside my

00:06:53,119 --> 00:06:56,899
back session I can see that so it's a

00:06:54,919 --> 00:07:01,399
great way to inject just a little bit of

00:06:56,899 --> 00:07:03,379
information at runtime such as I don't

00:07:01,399 --> 00:07:06,050
know the maybe the name of some network

00:07:03,379 --> 00:07:09,800
service that's not managed by docker but

00:07:06,050 --> 00:07:12,199
you want to interact with so these are

00:07:09,800 --> 00:07:14,389
the three basic skills with these these

00:07:12,199 --> 00:07:16,550
skills are very simple we're going to

00:07:14,389 --> 00:07:18,979
look at simple examples now docker is

00:07:16,550 --> 00:07:21,019
full of functionality and full of lots

00:07:18,979 --> 00:07:23,899
of more advanced options you can do

00:07:21,019 --> 00:07:25,189
things that are better and more robust

00:07:23,899 --> 00:07:27,800
than what we're going to look at right

00:07:25,189 --> 00:07:31,789
now but the goal here is to see some

00:07:27,800 --> 00:07:33,529
real simple easy like lazy code or kind

00:07:31,789 --> 00:07:35,389
of examples of how docker can be

00:07:33,529 --> 00:07:38,239
valuable to you just using these three

00:07:35,389 --> 00:07:40,519
skills so unit tests this is a

00:07:38,239 --> 00:07:42,550
development conference we all like unit

00:07:40,519 --> 00:07:45,800
tests probably most of us at least

00:07:42,550 --> 00:07:47,509
here's an obvious an obvious statement

00:07:45,800 --> 00:07:50,889
they're only valuable when you actually

00:07:47,509 --> 00:07:54,139
run them it sounds silly but it's true

00:07:50,889 --> 00:07:56,959
here's a problem statement we have a

00:07:54,139 --> 00:08:00,469
large test matrix so this project i work

00:07:56,959 --> 00:08:04,189
on pulp we have to run in at least two

00:08:00,469 --> 00:08:06,019
different versions of Python 26 and 27 a

00:08:04,189 --> 00:08:08,839
little bit of our code has to run into

00:08:06,019 --> 00:08:12,169
that for that's pretty painful but we're

00:08:08,839 --> 00:08:13,879
working on it we have a variety of

00:08:12,169 --> 00:08:16,789
different versions of libraries we work

00:08:13,879 --> 00:08:20,119
with we work with at least two different

00:08:16,789 --> 00:08:22,099
message broker technologies the

00:08:20,119 --> 00:08:25,219
combinations really get rather explosive

00:08:22,099 --> 00:08:28,699
and it's difficult to be able to to test

00:08:25,219 --> 00:08:30,949
all that on your own just on your own

00:08:28,699 --> 00:08:33,130
laptop as a developer what we often end

00:08:30,949 --> 00:08:36,110
up depending on is something like

00:08:33,130 --> 00:08:38,959
continuous integration Travis or Jenkins

00:08:36,110 --> 00:08:41,419
or some other custom thing to run then

00:08:38,959 --> 00:08:42,829
your entire test matrix after you have

00:08:41,419 --> 00:08:44,990
for example submitted a pull request

00:08:42,829 --> 00:08:47,959
what if you could do all that just on

00:08:44,990 --> 00:08:49,790
your local laptop very conveniently the

00:08:47,959 --> 00:08:52,310
answer is of course can make a docker

00:08:49,790 --> 00:08:54,110
image for each combination

00:08:52,310 --> 00:08:56,960
actually very simple just look at a

00:08:54,110 --> 00:08:58,610
docker file I think this is the only

00:08:56,960 --> 00:09:01,130
docker file I'm going to subject you to

00:08:58,610 --> 00:09:04,940
today so we'll just get through it in

00:09:01,130 --> 00:09:07,310
four easy steps so step one I'm starting

00:09:04,940 --> 00:09:10,120
from a sent off seven container and i've

00:09:07,310 --> 00:09:12,580
added information about who created this

00:09:10,120 --> 00:09:15,620
now we just install some dependencies

00:09:12,580 --> 00:09:16,610
don't worry about the details what's in

00:09:15,620 --> 00:09:21,320
there such a bunch of Python

00:09:16,610 --> 00:09:23,150
dependencies that we happen to need do

00:09:21,320 --> 00:09:25,790
whatever setup is necessary at this

00:09:23,150 --> 00:09:28,160
point maybe you would compile your

00:09:25,790 --> 00:09:29,620
source or something I don't know in my

00:09:28,160 --> 00:09:32,300
case I'd to create this directory and

00:09:29,620 --> 00:09:34,210
incidentally this was a bug i discovered

00:09:32,300 --> 00:09:38,000
just by going through the exercise of

00:09:34,210 --> 00:09:39,830
containing this particular application i

00:09:38,000 --> 00:09:41,270
did not realize that it was depending on

00:09:39,830 --> 00:09:43,850
the existence of this directory at

00:09:41,270 --> 00:09:45,620
runtime and it should not so I think

00:09:43,850 --> 00:09:48,560
we've fixed that by now but it was a

00:09:45,620 --> 00:09:50,480
beautiful discovery to find that by

00:09:48,560 --> 00:09:53,420
going through the exercise of containing

00:09:50,480 --> 00:09:56,120
it in a minimal environment and then

00:09:53,420 --> 00:09:58,370
last step for is you do whatever is

00:09:56,120 --> 00:10:01,900
necessary to actually run your test so

00:09:58,370 --> 00:10:04,010
it's really very simple any questions

00:10:01,900 --> 00:10:05,720
very informal so just raise your hand

00:10:04,010 --> 00:10:08,800
yell at me if you have any questions

00:10:05,720 --> 00:10:08,800
along the way yes please

00:10:16,579 --> 00:10:21,360
great question question is his doctor

00:10:19,680 --> 00:10:23,959
going to run this script every time I

00:10:21,360 --> 00:10:27,000
run my docker container the answer is no

00:10:23,959 --> 00:10:30,089
the answer is this docker files will use

00:10:27,000 --> 00:10:32,430
to build a docker image and now I have

00:10:30,089 --> 00:10:34,500
that image ah and this leads to an

00:10:32,430 --> 00:10:38,100
excellent my last point on this slide is

00:10:34,500 --> 00:10:40,769
you may ask where did my actual code get

00:10:38,100 --> 00:10:44,459
in there I didn't install my actual code

00:10:40,769 --> 00:10:46,260
I was hacking on with yum on and the

00:10:44,459 --> 00:10:49,170
answer that is you bind mount your code

00:10:46,260 --> 00:10:51,170
into the running image so you have an

00:10:49,170 --> 00:10:54,420
existing image it's been built up front

00:10:51,170 --> 00:10:57,560
you docker run whatever I named this

00:10:54,420 --> 00:10:59,940
thing bind mount my source into it and

00:10:57,560 --> 00:11:02,850
then we're off to the races so you can

00:10:59,940 --> 00:11:06,529
very easily expand your matrix then and

00:11:02,850 --> 00:11:09,180
go for centos 6 maybe someday centos 8

00:11:06,529 --> 00:11:11,339
in different versions of libraries

00:11:09,180 --> 00:11:13,050
potential if you want maybe different

00:11:11,339 --> 00:11:17,430
architectures if dr. sports that in the

00:11:13,050 --> 00:11:20,010
future and be able to lead with one bash

00:11:17,430 --> 00:11:21,990
or you know 14 would run four or six or

00:11:20,010 --> 00:11:23,610
eight different combinations in that

00:11:21,990 --> 00:11:26,730
many different containers just all at

00:11:23,610 --> 00:11:32,269
once very fast the question is probably

00:11:26,730 --> 00:11:34,800
go on this is another fun example

00:11:32,269 --> 00:11:37,649
complex network topologies so we had a

00:11:34,800 --> 00:11:43,290
problem that we needed to solve with a

00:11:37,649 --> 00:11:45,680
new messaging project may be familiar

00:11:43,290 --> 00:11:47,760
with amqp probably many of you are not

00:11:45,680 --> 00:11:51,149
so we have this message broker in the

00:11:47,760 --> 00:11:53,970
middle we use a message broker is

00:11:51,149 --> 00:11:56,850
essentially a network-based persistent q

00:11:53,970 --> 00:11:59,370
so a FIFO queue in this point in this

00:11:56,850 --> 00:12:01,800
example and we use it to keep track of

00:11:59,370 --> 00:12:03,570
jobs for example we have workers that

00:12:01,800 --> 00:12:05,519
sit around watching these queues waiting

00:12:03,570 --> 00:12:07,529
for work to do put a message on the

00:12:05,519 --> 00:12:11,250
queue a worker gets the message and says

00:12:07,529 --> 00:12:12,420
ah fine for me to get to work we also we

00:12:11,250 --> 00:12:13,769
do some other communication it's not

00:12:12,420 --> 00:12:17,579
important to get into the details of

00:12:13,769 --> 00:12:19,529
suffice it to say in this graph we have

00:12:17,579 --> 00:12:21,899
these clients on two different sides and

00:12:19,529 --> 00:12:23,730
we have this broker in the middle what

00:12:21,899 --> 00:12:25,400
we needed to be able to do was have

00:12:23,730 --> 00:12:27,470
these clients in remote

00:12:25,400 --> 00:12:30,290
locations may be physically remote

00:12:27,470 --> 00:12:33,830
locations and maybe thousands of clients

00:12:30,290 --> 00:12:39,350
in aggregate their traffic back to the

00:12:33,830 --> 00:12:42,190
amqp broker service on one link and be

00:12:39,350 --> 00:12:47,480
able to potentially have that link be

00:12:42,190 --> 00:12:48,650
redundant highly available so some folks

00:12:47,480 --> 00:12:51,680
that our company came up with this

00:12:48,650 --> 00:12:53,060
dispatch router solution for us and what

00:12:51,680 --> 00:12:55,160
we needed to be able to do now is test

00:12:53,060 --> 00:12:57,680
it how can we simulate this kind of a

00:12:55,160 --> 00:13:00,080
complex topology without standing up a

00:12:57,680 --> 00:13:01,760
bunch of virtual machines or a bunch of

00:13:00,080 --> 00:13:03,500
physical hardware actually and setting

00:13:01,760 --> 00:13:06,410
up virtual networks a bunch of advanced

00:13:03,500 --> 00:13:08,450
routing and this night we did instead

00:13:06,410 --> 00:13:10,610
was we just put we already had the

00:13:08,450 --> 00:13:12,050
broker and a doctor containers pretty

00:13:10,610 --> 00:13:15,790
easy I'm pretty sure others have already

00:13:12,050 --> 00:13:18,500
done that too and we just put this new

00:13:15,790 --> 00:13:20,690
dispatch router is what it's called into

00:13:18,500 --> 00:13:24,140
its own container and use the link

00:13:20,690 --> 00:13:27,650
option to specify just endpoints so each

00:13:24,140 --> 00:13:29,870
of these blue router graphics use these

00:13:27,650 --> 00:13:32,810
cylinders you see up there is just where

00:13:29,870 --> 00:13:35,210
we've run that image dr. run this link

00:13:32,810 --> 00:13:38,120
it to this broker and this client that

00:13:35,210 --> 00:13:40,100
kind of an idea and just real real fast

00:13:38,120 --> 00:13:41,960
you can put put this stuff together test

00:13:40,100 --> 00:13:43,460
it and then we're putting messages in

00:13:41,960 --> 00:13:46,550
one side Washington will come out the

00:13:43,460 --> 00:13:50,630
other side it was great this is really

00:13:46,550 --> 00:13:51,770
handy and really is very very simple it

00:13:50,630 --> 00:13:55,550
just couldn't have been easier almost

00:13:51,770 --> 00:13:57,950
with that link option so build an

00:13:55,550 --> 00:13:59,150
environment this is something that I've

00:13:57,950 --> 00:14:02,540
come across at least couple times

00:13:59,150 --> 00:14:04,910
personally certainly it's better to have

00:14:02,540 --> 00:14:07,670
a formal built environment and build

00:14:04,910 --> 00:14:09,950
infrastructure we use things like Cody

00:14:07,670 --> 00:14:13,400
at work you I'm sure you use similar or

00:14:09,950 --> 00:14:14,630
other things but there are occasions

00:14:13,400 --> 00:14:15,890
when you just need something real fast

00:14:14,630 --> 00:14:18,320
or you just need something real simple

00:14:15,890 --> 00:14:21,170
where you don't have access to your your

00:14:18,320 --> 00:14:24,350
company's Cody and you're waiting or

00:14:21,170 --> 00:14:25,730
again you want to be able to locally on

00:14:24,350 --> 00:14:27,230
your laptop maybe when you're on an

00:14:25,730 --> 00:14:30,590
airplane flying over the Atlantic on

00:14:27,230 --> 00:14:32,630
your way to a conference be able to try

00:14:30,590 --> 00:14:34,820
building an RPM or building some other

00:14:32,630 --> 00:14:36,650
kind of package in a variety of

00:14:34,820 --> 00:14:37,660
different environments all just on your

00:14:36,650 --> 00:14:39,130
laptop and you

00:14:37,660 --> 00:14:40,690
don't want to have to run a virtual

00:14:39,130 --> 00:14:47,770
machine for every single one of those

00:14:40,690 --> 00:14:52,240
environments solution is to create a

00:14:47,770 --> 00:14:54,610
docker image it's a proven real real

00:14:52,240 --> 00:14:56,500
valuable to me as a packager trying to

00:14:54,610 --> 00:15:01,240
package things for fedora and epple for

00:14:56,500 --> 00:15:03,280
example on trying to reconcile one RPM

00:15:01,240 --> 00:15:05,950
spec file that can work across multiple

00:15:03,280 --> 00:15:08,410
different different versions of the

00:15:05,950 --> 00:15:10,450
operating system having a docker image

00:15:08,410 --> 00:15:13,090
for each one that I never even plan to

00:15:10,450 --> 00:15:15,430
share with anybody else I just used it

00:15:13,090 --> 00:15:17,920
myself on my laptop to be able to run it

00:15:15,430 --> 00:15:19,570
through five or six different kinds of

00:15:17,920 --> 00:15:21,460
build environments just all at once and

00:15:19,570 --> 00:15:25,200
see what happens which is really really

00:15:21,460 --> 00:15:25,200
incredibly helpful save me a ton of time

00:15:25,680 --> 00:15:31,930
simulating load is a common problem a

00:15:28,660 --> 00:15:34,390
lot of us face have you ever done

00:15:31,930 --> 00:15:36,460
something like run you're working on

00:15:34,390 --> 00:15:38,260
your web service you have a rest api

00:15:36,460 --> 00:15:40,480
something like that and you want to find

00:15:38,260 --> 00:15:41,920
out what happens when you have a hundred

00:15:40,480 --> 00:15:45,820
clients connecting to it instead of just

00:15:41,920 --> 00:15:48,370
your one manual 1 i've run curl with x

00:15:45,820 --> 00:15:50,440
arge before it's a nice way in some kind

00:15:48,370 --> 00:15:52,720
of a loop to see what happens when you

00:15:50,440 --> 00:15:54,960
get 100 processes it's a real cheap way

00:15:52,720 --> 00:15:56,880
to get a lot of requests going at once

00:15:54,960 --> 00:15:58,870
sometimes that's not good enough

00:15:56,880 --> 00:16:01,360
sometimes it you just need all more

00:15:58,870 --> 00:16:04,870
flexibility or power example we had in

00:16:01,360 --> 00:16:08,470
my project is we have an agent that runs

00:16:04,870 --> 00:16:09,940
on client machines and manages them you

00:16:08,470 --> 00:16:13,480
think of it like puppet agent or

00:16:09,940 --> 00:16:16,660
something like this they don't like each

00:16:13,480 --> 00:16:18,970
other they don't like being on the same

00:16:16,660 --> 00:16:20,650
machine with multiple instances they

00:16:18,970 --> 00:16:23,590
want to really stretch out and own the

00:16:20,650 --> 00:16:26,370
entire machine on its own so putting

00:16:23,590 --> 00:16:29,680
them in containers is a natural way to

00:16:26,370 --> 00:16:31,090
to run a lot of them on one machine very

00:16:29,680 --> 00:16:33,610
cheaply without having to go through

00:16:31,090 --> 00:16:36,760
again the expense of virtual machines

00:16:33,610 --> 00:16:38,950
that take up a lot more memory or disk

00:16:36,760 --> 00:16:41,800
space they need maintenance you have to

00:16:38,950 --> 00:16:43,720
boot them all these kinds of things it's

00:16:41,800 --> 00:16:47,230
just so easy to make one docker image

00:16:43,720 --> 00:16:49,810
and run it a hundred times and see what

00:16:47,230 --> 00:16:53,130
happens you can do really whatever you

00:16:49,810 --> 00:16:53,130
want he has very very simple

00:16:57,930 --> 00:17:04,030
state reset is one of the most valuable

00:17:00,370 --> 00:17:05,920
things I think of docker the ability

00:17:04,030 --> 00:17:09,670
that the idea that you can run a

00:17:05,920 --> 00:17:11,320
container from an image and do whatever

00:17:09,670 --> 00:17:14,140
you want to that container and then blow

00:17:11,320 --> 00:17:15,339
it away and and run it again and be

00:17:14,140 --> 00:17:18,280
right back to your original pristine

00:17:15,339 --> 00:17:21,850
state is so powerful and this is what

00:17:18,280 --> 00:17:23,050
what that example is all about so

00:17:21,850 --> 00:17:25,990
problem is that you need to quickly

00:17:23,050 --> 00:17:30,400
reset some database state for example so

00:17:25,990 --> 00:17:33,120
perhaps it's running integration test

00:17:30,400 --> 00:17:37,150
Suites something I've done in the past

00:17:33,120 --> 00:17:39,700
in Python the Django framework helps you

00:17:37,150 --> 00:17:41,800
out with this you can run tests in a

00:17:39,700 --> 00:17:44,800
transaction so you would open a

00:17:41,800 --> 00:17:46,870
transaction make a bunch of changes to

00:17:44,800 --> 00:17:47,920
your database through whatever your test

00:17:46,870 --> 00:17:50,050
of doing and no matter what happens

00:17:47,920 --> 00:17:52,450
whether things go good or things go bad

00:17:50,050 --> 00:17:54,070
at the end of your test roll back the

00:17:52,450 --> 00:17:56,980
transaction in your database is ready

00:17:54,070 --> 00:17:59,440
for the next test sometimes that's not

00:17:56,980 --> 00:18:02,050
viable right now the project i work on

00:17:59,440 --> 00:18:04,840
uses MongoDB we don't have transactions

00:18:02,050 --> 00:18:07,150
so docker gives us a fantastic way to

00:18:04,840 --> 00:18:10,050
have a pre-baked image with your

00:18:07,150 --> 00:18:13,630
database ready to go maybe you even

00:18:10,050 --> 00:18:16,090
pre-baked your data into that image and

00:18:13,630 --> 00:18:17,710
then you can after every single test

00:18:16,090 --> 00:18:19,780
throw it away start another throw it

00:18:17,710 --> 00:18:22,690
away start a new one I've even read

00:18:19,780 --> 00:18:25,510
about not actually done this myself but

00:18:22,690 --> 00:18:28,900
others have created essentially a pool

00:18:25,510 --> 00:18:31,450
of available database instances ready to

00:18:28,900 --> 00:18:35,020
go you could keep a buffer of maybe you

00:18:31,450 --> 00:18:37,120
know 10 or so available so as your tests

00:18:35,020 --> 00:18:39,970
are finishing they just grab one that's

00:18:37,120 --> 00:18:44,020
already available and running and throw

00:18:39,970 --> 00:18:45,370
the old one out in the garbage no it's

00:18:44,020 --> 00:18:46,780
really just a fantastic way to take

00:18:45,370 --> 00:18:52,480
advantage of doctors ability to quickly

00:18:46,780 --> 00:18:55,660
reset your state a demo of your

00:18:52,480 --> 00:18:57,190
application so something about pulp it

00:18:55,660 --> 00:18:59,950
has all these pieces and it's fairly

00:18:57,190 --> 00:19:01,690
complex architectural a in in terms of

00:18:59,950 --> 00:19:03,430
all the different kinds of services it

00:19:01,690 --> 00:19:04,710
has to interact with and thus the

00:19:03,430 --> 00:19:06,510
different libraries has to

00:19:04,710 --> 00:19:09,659
and so on it's actually fairly

00:19:06,510 --> 00:19:12,960
challenging to think about how we would

00:19:09,659 --> 00:19:14,100
deploy pulp as it is in containers like

00:19:12,960 --> 00:19:16,620
using something like uber Nettie's

00:19:14,100 --> 00:19:18,029
should be doable but probably we want to

00:19:16,620 --> 00:19:19,830
change the way through some things or

00:19:18,029 --> 00:19:23,730
design change some architectural

00:19:19,830 --> 00:19:25,919
decisions you have specific challenges

00:19:23,730 --> 00:19:28,020
like shared storage that's very

00:19:25,919 --> 00:19:30,149
important to us shared configuration

00:19:28,020 --> 00:19:32,309
across all these different components

00:19:30,149 --> 00:19:34,620
how do you get secrets from one place to

00:19:32,309 --> 00:19:36,600
another another lots of new tools that

00:19:34,620 --> 00:19:40,020
are showing up to help with that but

00:19:36,600 --> 00:19:41,789
still it's a challenge some people are

00:19:40,020 --> 00:19:43,799
averse to running certain services in

00:19:41,789 --> 00:19:46,529
containers at all like like databases

00:19:43,799 --> 00:19:49,500
for example although that's that's

00:19:46,529 --> 00:19:51,630
gotten easier as of late as well and

00:19:49,500 --> 00:19:53,460
then of course updating all these parts

00:19:51,630 --> 00:19:57,029
as a challenge do you have a base image

00:19:53,460 --> 00:19:58,620
that you update and rebuild the other

00:19:57,029 --> 00:20:01,080
pieces on top like there's all these

00:19:58,620 --> 00:20:03,870
challenges to actually do it right so

00:20:01,080 --> 00:20:05,970
what happens if you want to contain rise

00:20:03,870 --> 00:20:07,770
your app but you find also this

00:20:05,970 --> 00:20:11,700
challenge of man it's just a lot of work

00:20:07,770 --> 00:20:15,750
to do it right just just do it wrong

00:20:11,700 --> 00:20:18,120
this is this is my solution we have a

00:20:15,750 --> 00:20:20,190
demo available of our application that

00:20:18,120 --> 00:20:21,840
you can run and as red flag warnings all

00:20:20,190 --> 00:20:23,760
over it don't do anything important with

00:20:21,840 --> 00:20:26,880
this don't use this for real don't give

00:20:23,760 --> 00:20:29,760
it real data but you can find a bash

00:20:26,880 --> 00:20:32,340
script on our website and run it and

00:20:29,760 --> 00:20:33,840
it'll fetch the docker images it'll

00:20:32,340 --> 00:20:35,640
start them up and you'll have an entire

00:20:33,840 --> 00:20:37,980
running pulp with like eight different

00:20:35,640 --> 00:20:40,980
containers all working together using

00:20:37,980 --> 00:20:43,260
the bind mount for shared storage using

00:20:40,980 --> 00:20:45,539
linking to let the services talk to each

00:20:43,260 --> 00:20:47,970
other as appropriate I think it even

00:20:45,539 --> 00:20:49,649
does use environment variables to inject

00:20:47,970 --> 00:20:51,270
a little bit of runtime state in there

00:20:49,649 --> 00:20:53,279
and then you can try and use it and

00:20:51,270 --> 00:20:56,880
throw it away when you're done with it I

00:20:53,279 --> 00:20:58,890
like to use it to reproduce bugs or do

00:20:56,880 --> 00:21:02,669
demos of pulp or all kinds of things

00:20:58,890 --> 00:21:04,679
because again it's so easy to that one

00:21:02,669 --> 00:21:06,419
it may take several seconds for it to

00:21:04,679 --> 00:21:08,490
start we have a database as to start and

00:21:06,419 --> 00:21:11,250
this kind of thing even the idea that in

00:21:08,490 --> 00:21:13,500
a few seconds I can throw away an entire

00:21:11,250 --> 00:21:16,139
deployment of my application and have a

00:21:13,500 --> 00:21:18,950
new fresh one back where I started is

00:21:16,139 --> 00:21:18,950
just incredible

00:21:19,190 --> 00:21:25,200
there are some tools it that you can

00:21:21,600 --> 00:21:26,790
make that we can make maybe i'll make

00:21:25,200 --> 00:21:31,590
some of them actually i have make one of

00:21:26,790 --> 00:21:34,220
these one is an MTA mail transfer agent

00:21:31,590 --> 00:21:36,030
thing is what the T stands for rent um

00:21:34,220 --> 00:21:39,690
have you ever worked on an application

00:21:36,030 --> 00:21:41,370
to send email and if you have I probably

00:21:39,690 --> 00:21:43,980
a lot of us have I know I have have you

00:21:41,370 --> 00:21:46,110
ever done what I did and actually okay

00:21:43,980 --> 00:21:48,240
you're hacking on the email feature you

00:21:46,110 --> 00:21:50,550
want to see if it works have you punched

00:21:48,240 --> 00:21:52,890
in your real email address into your app

00:21:50,550 --> 00:21:54,210
create a user real email address do

00:21:52,890 --> 00:21:56,520
whatever the thing is it triggers the

00:21:54,210 --> 00:21:58,590
email and then go check your gmail

00:21:56,520 --> 00:21:59,760
account or your whatever and see what

00:21:58,590 --> 00:22:02,970
happened to see what it looks like right

00:21:59,760 --> 00:22:06,600
I've totally done that so funny story I

00:22:02,970 --> 00:22:09,990
have a colleague we did exactly this he

00:22:06,600 --> 00:22:13,470
was working on a different job on a big

00:22:09,990 --> 00:22:15,540
Django application and not only did he

00:22:13,470 --> 00:22:17,000
punch in his own email address he

00:22:15,540 --> 00:22:19,380
volunteered a couple of his colleagues

00:22:17,000 --> 00:22:22,440
and punched in their email addresses to

00:22:19,380 --> 00:22:24,840
another developers on his team something

00:22:22,440 --> 00:22:26,820
he had done went wrong and he I think

00:22:24,840 --> 00:22:28,860
ended up sending like a quarter million

00:22:26,820 --> 00:22:31,140
messages to each of them or something

00:22:28,860 --> 00:22:33,960
like this and this company was using

00:22:31,140 --> 00:22:35,760
exchange server at the time too so that

00:22:33,960 --> 00:22:38,730
poor thing basically just melted and it

00:22:35,760 --> 00:22:41,370
was it was at least a day or more to

00:22:38,730 --> 00:22:42,900
recover this entire company's email

00:22:41,370 --> 00:22:46,350
infrastructure because he made this

00:22:42,900 --> 00:22:51,630
mistake so what could you do with docker

00:22:46,350 --> 00:22:53,550
instead of that we could have this gets

00:22:51,630 --> 00:22:55,410
back to this general concept of it's so

00:22:53,550 --> 00:22:57,660
cheap to have a docker image sitting

00:22:55,410 --> 00:23:00,030
there you may be a few hundred megabytes

00:22:57,660 --> 00:23:01,830
of storage to keep one around that's it

00:23:00,030 --> 00:23:03,900
unlike a virtual machine or you need

00:23:01,830 --> 00:23:05,460
gigabytes of storage probably and you

00:23:03,900 --> 00:23:08,730
have to boot it to use it you have to

00:23:05,460 --> 00:23:10,410
maintain it what if what if it breaks or

00:23:08,730 --> 00:23:14,270
you screw something up now you have to

00:23:10,410 --> 00:23:16,020
actually fix it unless you did

00:23:14,270 --> 00:23:17,820
configuration management type things

00:23:16,020 --> 00:23:20,580
made it easily reproducible then you

00:23:17,820 --> 00:23:22,770
need to reproduce a whole vm we can have

00:23:20,580 --> 00:23:25,470
this tool bag of images sitting around

00:23:22,770 --> 00:23:28,320
and this is this is one of them you

00:23:25,470 --> 00:23:30,030
could make a docker image it has

00:23:28,320 --> 00:23:30,520
something like postfix or send mail in

00:23:30,030 --> 00:23:32,440
it

00:23:30,520 --> 00:23:34,060
and receives this mail and does

00:23:32,440 --> 00:23:37,870
something useful with it like write it

00:23:34,060 --> 00:23:39,100
out to a file or just you know throw in

00:23:37,870 --> 00:23:41,680
a database that you're going to look at

00:23:39,100 --> 00:23:44,680
or make it available by I'm app so you

00:23:41,680 --> 00:23:46,840
can actually go browse them and look at

00:23:44,680 --> 00:23:48,220
it and see see what's there now be just

00:23:46,840 --> 00:23:50,770
the most useful thing you could fire up

00:23:48,220 --> 00:23:53,710
anytime you need to test the email

00:23:50,770 --> 00:23:58,360
feature of your application now there's

00:23:53,710 --> 00:24:01,030
proxies so we sell a product to

00:23:58,360 --> 00:24:03,160
customers they deploy it in their

00:24:01,030 --> 00:24:04,930
infrastructure and they use a variety of

00:24:03,160 --> 00:24:08,050
proxies it turns out it's not all just

00:24:04,930 --> 00:24:11,020
squid so we have to ensure that what we

00:24:08,050 --> 00:24:14,410
do can operate both behind their proxies

00:24:11,020 --> 00:24:17,730
and our access out to the world or or

00:24:14,410 --> 00:24:20,770
even within works through their proxies

00:24:17,730 --> 00:24:23,260
and that can mean a lot a lot of variety

00:24:20,770 --> 00:24:24,850
so do you want to have a virtual machine

00:24:23,260 --> 00:24:26,740
and sitting around for squid and another

00:24:24,850 --> 00:24:29,590
one for something else is another one

00:24:26,740 --> 00:24:31,630
for blue coat and this do you want to be

00:24:29,590 --> 00:24:34,240
an expert in how to deploy these things

00:24:31,630 --> 00:24:36,340
in a reasonable way or configure them in

00:24:34,240 --> 00:24:40,090
the way that your customers normally do

00:24:36,340 --> 00:24:43,180
probably not so one solution is you or

00:24:40,090 --> 00:24:46,060
your team could have a pre big docker

00:24:43,180 --> 00:24:47,710
image that has you know one image for

00:24:46,060 --> 00:24:50,950
each of these different kinds of proxy

00:24:47,710 --> 00:24:53,260
technologies and be able pre-configured

00:24:50,950 --> 00:24:55,780
it's ready to go everybody understands

00:24:53,260 --> 00:24:57,640
how to use it but nobody well somebody

00:24:55,780 --> 00:25:01,870
but not everybody has to understand how

00:24:57,640 --> 00:25:05,700
it was made you just run it use it throw

00:25:01,870 --> 00:25:09,970
it away when you're done just super-easy

00:25:05,700 --> 00:25:12,820
fake be honest is a nice easy one if you

00:25:09,970 --> 00:25:14,860
want to if you integrate with something

00:25:12,820 --> 00:25:16,450
like github the API or something we

00:25:14,860 --> 00:25:20,140
integrate with things like the docker

00:25:16,450 --> 00:25:22,990
API as you saw the puppet forage API and

00:25:20,140 --> 00:25:25,500
the Python package index API and these

00:25:22,990 --> 00:25:28,420
kinds of things so if we were going to

00:25:25,500 --> 00:25:31,390
write some tests and perhaps integration

00:25:28,420 --> 00:25:33,160
tests but didn't want to depend on the

00:25:31,390 --> 00:25:35,890
internet and all the things that come

00:25:33,160 --> 00:25:39,640
with that docker image is a perfect

00:25:35,890 --> 00:25:42,430
place to run a very simple fake API have

00:25:39,640 --> 00:25:44,590
it available very quickly run it you can

00:25:42,430 --> 00:25:46,330
use that link feature to link your

00:25:44,590 --> 00:25:47,919
and it's maybe another image with your

00:25:46,330 --> 00:25:51,250
actual integration tests link them

00:25:47,919 --> 00:25:54,070
together really really simple stuff it's

00:25:51,250 --> 00:25:55,990
really powerful this is the the most

00:25:54,070 --> 00:25:57,730
recent one that I've been working on so

00:25:55,990 --> 00:25:59,620
in my application we've we've made some

00:25:57,730 --> 00:26:02,200
changes to the way we interact with the

00:25:59,620 --> 00:26:04,270
database and the way we've defined the

00:26:02,200 --> 00:26:05,919
schema and we recognize that this is a

00:26:04,270 --> 00:26:09,610
little bit risky we have to be very

00:26:05,919 --> 00:26:11,650
careful that we don't screw it up and in

00:26:09,610 --> 00:26:13,570
order to do that we want our users to

00:26:11,650 --> 00:26:16,750
help us with their actual real data

00:26:13,570 --> 00:26:19,659
let's see so on our development team we

00:26:16,750 --> 00:26:23,679
don't have a version of Pulp that's been

00:26:19,659 --> 00:26:27,279
upgraded eight times from pulp 20 to see

00:26:23,679 --> 00:26:30,850
what that data looks like but we we have

00:26:27,279 --> 00:26:34,149
users who have so we've made a little

00:26:30,850 --> 00:26:36,039
script that interacts with data pull

00:26:34,149 --> 00:26:38,110
some data out of MongoDB ensures it can

00:26:36,039 --> 00:26:41,260
use it and read it sanely and write it

00:26:38,110 --> 00:26:44,200
back and now we're creating a docker

00:26:41,260 --> 00:26:46,840
image to run that in and a separate

00:26:44,200 --> 00:26:49,510
docker image to run MongoDB in so we're

00:26:46,840 --> 00:26:52,630
going to hand our users a very simple

00:26:49,510 --> 00:26:55,270
little script that will help them dump

00:26:52,630 --> 00:26:57,789
out their database they're real live

00:26:55,270 --> 00:27:00,490
production database dump it out load it

00:26:57,789 --> 00:27:02,710
into this MongoDB running in a docker

00:27:00,490 --> 00:27:07,779
image and then fire up this little

00:27:02,710 --> 00:27:08,980
upgrade test script and try to read all

00:27:07,779 --> 00:27:10,929
that data and see what happens and

00:27:08,980 --> 00:27:13,779
that's going to give us tremendously

00:27:10,929 --> 00:27:14,980
higher confidence that that what we're

00:27:13,779 --> 00:27:17,380
doing is going to work for all of our

00:27:14,980 --> 00:27:19,720
users and it's it's super simple for

00:27:17,380 --> 00:27:21,490
them they everything is contained

00:27:19,720 --> 00:27:23,320
thinking of dr. is this kind of

00:27:21,490 --> 00:27:24,580
packaging technology if you can shift

00:27:23,320 --> 00:27:28,059
stuff around and hand it to somebody

00:27:24,580 --> 00:27:30,940
it's real easy to run is one of the

00:27:28,059 --> 00:27:36,909
really most pop a powerful aspects of

00:27:30,940 --> 00:27:38,980
dr. so there's all the ideas i'm going

00:27:36,909 --> 00:27:40,620
to share right now there's some next

00:27:38,980 --> 00:27:43,270
steps there's a lot of great information

00:27:40,620 --> 00:27:44,950
there's already been a docker 101 today

00:27:43,270 --> 00:27:47,919
all the way through very very advanced

00:27:44,950 --> 00:27:49,870
docker things for more information you

00:27:47,919 --> 00:27:52,809
know right on docker hub there's great

00:27:49,870 --> 00:27:55,299
great tutorials and documentation if you

00:27:52,809 --> 00:27:57,140
want to get started there the Red Hat

00:27:55,299 --> 00:27:59,240
registry we have our own registry

00:27:57,140 --> 00:28:01,670
we have our docker image if you're into

00:27:59,240 --> 00:28:05,360
using our stuff you can use our our

00:28:01,670 --> 00:28:06,670
docker images as well and then a lot of

00:28:05,360 --> 00:28:10,010
different distributions have a lot of

00:28:06,670 --> 00:28:11,930
pre-baked image is ready to go fedoras

00:28:10,010 --> 00:28:15,560
when I'm most familiar with on a daily

00:28:11,930 --> 00:28:19,370
basis but things like my sequel and

00:28:15,560 --> 00:28:21,170
postgres and mongodb and message brokers

00:28:19,370 --> 00:28:23,120
and apache web server and engine X and

00:28:21,170 --> 00:28:24,740
development environments for Python and

00:28:23,120 --> 00:28:27,500
Ruby all have been pre-baked are

00:28:24,740 --> 00:28:30,080
available for you to just go run them in

00:28:27,500 --> 00:28:32,360
and play with them and make these make

00:28:30,080 --> 00:28:36,860
your own tool bag of little things that

00:28:32,360 --> 00:28:38,750
you can use in your everyday life so

00:28:36,860 --> 00:28:40,640
with that that's all I have I'll take

00:28:38,750 --> 00:28:43,190
questions now and also if you guys have

00:28:40,640 --> 00:28:44,180
likewise any similar ideas to this or an

00:28:43,190 --> 00:28:46,280
example something that would be useful

00:28:44,180 --> 00:28:49,220
to you you could tell us about it we

00:28:46,280 --> 00:29:00,410
talk through how it might work so what

00:28:49,220 --> 00:29:07,150
do you have yes I missed a couple words

00:29:00,410 --> 00:29:07,150
could you just repeat one more time yep

00:29:14,650 --> 00:29:20,060
okay so the question is if you have one

00:29:17,480 --> 00:29:23,980
machine have I tried to run containers

00:29:20,060 --> 00:29:23,980
on that one machine with my colleagues

00:29:25,720 --> 00:29:33,140
nah no I've not tried that is the boring

00:29:31,100 --> 00:29:36,290
answer and I basically just do all this

00:29:33,140 --> 00:29:39,440
on my laptop it doesn't take much you

00:29:36,290 --> 00:29:41,000
know a container is really just yours

00:29:39,440 --> 00:29:42,890
running another process just like you

00:29:41,000 --> 00:29:44,690
would but wrapping with some extra stuff

00:29:42,890 --> 00:29:47,950
so we've never really had a shared

00:29:44,690 --> 00:29:47,950
scenario like that

00:30:02,580 --> 00:30:09,240
I see so yes and he's saying he has one

00:30:07,799 --> 00:30:12,480
powerful piece of hardware that you'd

00:30:09,240 --> 00:30:17,279
like to share among them docker runs

00:30:12,480 --> 00:30:18,809
great inside virtual machines or yeah

00:30:17,279 --> 00:30:27,140
install open shift on that sucker and

00:30:18,809 --> 00:30:27,140
he's that yeah what else

00:30:49,840 --> 00:30:57,039
right sure so the question is

00:30:53,620 --> 00:31:00,010
essentially on my team who's responsible

00:30:57,039 --> 00:31:04,779
and how for creating things like docker

00:31:00,010 --> 00:31:06,789
images out of our application the answer

00:31:04,779 --> 00:31:11,260
is it's a shared responsibility of the

00:31:06,789 --> 00:31:14,409
team and it's not very important like

00:31:11,260 --> 00:31:16,900
our users except for this this last

00:31:14,409 --> 00:31:18,789
example I gave of this upgrade script we

00:31:16,900 --> 00:31:21,580
don't expect any of our users to deploy

00:31:18,789 --> 00:31:23,110
pulp ian docker containers if any of

00:31:21,580 --> 00:31:24,940
them are I'd love to talk to them and

00:31:23,110 --> 00:31:27,010
find out what they did it's actually

00:31:24,940 --> 00:31:29,590
pretty challenging so as we find it

00:31:27,010 --> 00:31:33,000
useful to do so we can create little

00:31:29,590 --> 00:31:35,770
tools like this and do that but

00:31:33,000 --> 00:31:38,350
otherwise it's it's essentially a task

00:31:35,770 --> 00:31:39,880
like any other on our team we put it in

00:31:38,350 --> 00:31:41,740
an issue tracker and somebody picks it

00:31:39,880 --> 00:31:58,149
up as qualified does that answer your

00:31:41,740 --> 00:32:03,490
question could I tell you more yep yeah

00:31:58,149 --> 00:32:05,020
i agree hundred fit he's observing that

00:32:03,490 --> 00:32:06,850
there's a lot of ambiguity now and

00:32:05,020 --> 00:32:08,740
uncertainty in the development cycle of

00:32:06,850 --> 00:32:10,000
who's responsible for what I agree

00:32:08,740 --> 00:32:12,970
there's actually a lot of risk something

00:32:10,000 --> 00:32:16,179
I worry about is going all off topic but

00:32:12,970 --> 00:32:18,730
that's okay at the end of the day for

00:32:16,179 --> 00:32:20,409
example the exercise of going through

00:32:18,730 --> 00:32:22,539
traditional packaging like rpms or

00:32:20,409 --> 00:32:25,990
Debian packages gives us a really nice

00:32:22,539 --> 00:32:27,820
formal checkpoint for things like the

00:32:25,990 --> 00:32:29,740
filesystem hierarchy and just other

00:32:27,820 --> 00:32:31,750
general best practices of deploying wrap

00:32:29,740 --> 00:32:33,039
have you done reasonable things and if

00:32:31,750 --> 00:32:35,350
no somebody's going to review it and

00:32:33,039 --> 00:32:37,720
slap your hand and say don't do that so

00:32:35,350 --> 00:32:39,880
the idea that your development team I

00:32:37,720 --> 00:32:41,669
know developers they're not always the

00:32:39,880 --> 00:32:43,690
most responsible deployers of things

00:32:41,669 --> 00:32:45,640
that your development team can just

00:32:43,690 --> 00:32:47,110
shove their app into a container however

00:32:45,640 --> 00:32:49,539
they feel like it and hand it to the ops

00:32:47,110 --> 00:32:54,820
team and say here run this it's kind of

00:32:49,539 --> 00:32:56,470
scary I mean it seems like the future in

00:32:54,820 --> 00:32:59,580
the future is now like that's happening

00:32:56,470 --> 00:33:03,200
and it was working for people but people

00:32:59,580 --> 00:33:05,929
are acquiring a bigger skill set in some

00:33:03,200 --> 00:33:08,269
some extent a unique aspect of rye work

00:33:05,929 --> 00:33:10,940
is because we're we write software for

00:33:08,269 --> 00:33:12,350
systems engineers that our software

00:33:10,940 --> 00:33:15,110
engineers tend to have higher than

00:33:12,350 --> 00:33:17,240
average systems engineering at least

00:33:15,110 --> 00:33:23,260
awareness if not outright skills and

00:33:17,240 --> 00:33:23,260
experience what else back on topic yes

00:33:39,399 --> 00:33:48,860
mm-hmm this is this is the million the

00:33:43,750 --> 00:33:54,230
million crown question like what country

00:33:48,860 --> 00:33:56,929
line today yes check on the the answer

00:33:54,230 --> 00:33:59,690
is um it's very difficult to answer the

00:33:56,929 --> 00:34:02,330
question is where can you get trusted

00:33:59,690 --> 00:34:04,539
docker images how can you trust what is

00:34:02,330 --> 00:34:07,820
in your docker image if you're just

00:34:04,539 --> 00:34:09,679
downloading it from somewhere even if

00:34:07,820 --> 00:34:11,329
that somewhere is the docker hub even if

00:34:09,679 --> 00:34:13,669
you think very highly of docker as a

00:34:11,329 --> 00:34:15,710
company is an open source project how

00:34:13,669 --> 00:34:18,379
much trust you have in their

00:34:15,710 --> 00:34:20,060
infrastructure and in the just any user

00:34:18,379 --> 00:34:23,240
anybody in this room can put an image on

00:34:20,060 --> 00:34:28,159
docker hub and grab claim any name that

00:34:23,240 --> 00:34:29,599
is available as a user name so if my

00:34:28,159 --> 00:34:31,579
name you know if I hadn't already signed

00:34:29,599 --> 00:34:33,889
up you could both of me and start

00:34:31,579 --> 00:34:35,540
posting docker images so what I would

00:34:33,889 --> 00:34:39,770
suggest to you is don't do anything

00:34:35,540 --> 00:34:41,659
important with images you get from some

00:34:39,770 --> 00:34:43,450
strange place on the internet or even

00:34:41,659 --> 00:34:46,909
some very normal place on the Internet

00:34:43,450 --> 00:34:50,359
what I know I as an employee of red hat

00:34:46,909 --> 00:34:52,220
is we that's part of value we offer to

00:34:50,359 --> 00:34:54,500
our customers that we have our docker

00:34:52,220 --> 00:34:59,569
image that is trusted and designed to be

00:34:54,500 --> 00:35:02,180
that it yes in fact it is yeah mentioned

00:34:59,569 --> 00:35:03,770
right there so we offer that we may not

00:35:02,180 --> 00:35:06,319
be the only people offering that but I'm

00:35:03,770 --> 00:35:08,290
that's what I know and I'm aware of so I

00:35:06,319 --> 00:35:11,119
would look for something like that or

00:35:08,290 --> 00:35:14,119
roll your own you can you know you can

00:35:11,119 --> 00:35:15,650
make your own but it's a very important

00:35:14,119 --> 00:35:16,670
important point and part of the reason

00:35:15,650 --> 00:35:18,440
why you know every

00:35:16,670 --> 00:35:20,780
I'm gone through today is simple and

00:35:18,440 --> 00:35:22,369
easy and don't not mission-critical like

00:35:20,780 --> 00:35:23,720
if you screw it all up or it tries to do

00:35:22,369 --> 00:35:25,730
something bad hopefully it's not the end

00:35:23,720 --> 00:35:30,200
of the world I development in a vagrant

00:35:25,730 --> 00:35:33,260
vm you know so all of this is meant to

00:35:30,200 --> 00:35:34,819
be disposable and doing more important

00:35:33,260 --> 00:35:37,880
things that brings up those kind of

00:35:34,819 --> 00:35:52,460
questions speak of questions I yeah I've

00:35:37,880 --> 00:35:55,369
got a few more minutes oh yeah yes yes

00:35:52,460 --> 00:35:57,290
the question is you'd like me to repeat

00:35:55,369 --> 00:35:59,270
and perhaps elaborate slightly re

00:35:57,290 --> 00:36:02,059
explain this idea that for testing

00:35:59,270 --> 00:36:04,579
purposes for integration tests where you

00:36:02,059 --> 00:36:06,799
need a live database you might have a

00:36:04,579 --> 00:36:09,200
pool of available running docker

00:36:06,799 --> 00:36:13,040
containers running that database that

00:36:09,200 --> 00:36:18,109
you could pull from so the idea starts

00:36:13,040 --> 00:36:21,530
from the simple case of I have a MongoDB

00:36:18,109 --> 00:36:25,490
docker image and for every test that i

00:36:21,530 --> 00:36:29,030
run i run that in I run a container from

00:36:25,490 --> 00:36:30,049
that image and I write some data and

00:36:29,030 --> 00:36:32,089
reads them day in and do whatever the

00:36:30,049 --> 00:36:34,130
test does and when the test is over I

00:36:32,089 --> 00:36:37,690
stop that and throw away that container

00:36:34,130 --> 00:36:40,569
next test start anew in and and repeat

00:36:37,690 --> 00:36:43,190
that introduces a little bit of latency

00:36:40,569 --> 00:36:45,349
you know hundreds of milliseconds i

00:36:43,190 --> 00:36:48,730
think is probably approximately right

00:36:45,349 --> 00:36:50,690
for what it is to start a container and

00:36:48,730 --> 00:36:52,970
throwing them away probably has some

00:36:50,690 --> 00:36:54,230
small expense as well so if you're

00:36:52,970 --> 00:36:56,750
worried about that sort of thing if you

00:36:54,230 --> 00:36:58,069
have very small compact integration

00:36:56,750 --> 00:37:01,309
tests run quickly maybe this would be

00:36:58,069 --> 00:37:03,740
valuable to then keep a pool of maybe 10

00:37:01,309 --> 00:37:06,740
so this this double involve you writing

00:37:03,740 --> 00:37:08,900
a small tool to do this it could be as

00:37:06,740 --> 00:37:11,960
simple as a little Python herb a script

00:37:08,900 --> 00:37:15,260
to just manage this for you and keep a

00:37:11,960 --> 00:37:17,540
few of these running and you essentially

00:37:15,260 --> 00:37:20,720
need something to start a bunch and then

00:37:17,540 --> 00:37:22,910
something else that gets one and looks

00:37:20,720 --> 00:37:24,710
for the name you remember that I named

00:37:22,910 --> 00:37:26,809
when I was doing the linking I gave it a

00:37:24,710 --> 00:37:29,570
name then referenced it you can let doc

00:37:26,809 --> 00:37:32,390
dr. will assign randomly generated names

00:37:29,570 --> 00:37:34,580
is if you let it so you could just look

00:37:32,390 --> 00:37:35,660
for an available name I have something

00:37:34,580 --> 00:37:37,910
that looks for an available name and

00:37:35,660 --> 00:37:39,770
hands it to the test and then at the end

00:37:37,910 --> 00:37:41,780
deletes it then looks for another

00:37:39,770 --> 00:37:44,870
available name handed the test and then

00:37:41,780 --> 00:37:48,050
deletes it and maybe starts new ones off

00:37:44,870 --> 00:37:54,470
on the side something like that so good

00:37:48,050 --> 00:37:57,650
okay we're probably done two minutes a

00:37:54,470 --> 00:38:04,850
couple questions we're going to go get

00:37:57,650 --> 00:38:08,020
dinner going once going twice one yes

00:38:04,850 --> 00:38:08,020
right here sold

00:38:32,180 --> 00:38:51,619
which component are you talking about oh

00:38:35,119 --> 00:38:54,210
yes I dated this okay um sure yeah so um

00:38:51,619 --> 00:38:56,040
so the question is would you for

00:38:54,210 --> 00:38:58,650
something that you do want to run on

00:38:56,040 --> 00:39:02,069
bare metal or well that you want to run

00:38:58,650 --> 00:39:03,630
uncontained not in any kind of docker

00:39:02,069 --> 00:39:05,640
container would you use some

00:39:03,630 --> 00:39:08,460
configuration management to integrate

00:39:05,640 --> 00:39:10,920
with these other ideas of spinning up

00:39:08,460 --> 00:39:16,790
integration tests use something like

00:39:10,920 --> 00:39:16,790
ansible or otherwise or vagrant yes

00:39:16,849 --> 00:39:21,900
partially we run our whole app our

00:39:20,250 --> 00:39:24,630
development environment most of us on

00:39:21,900 --> 00:39:26,609
the team at least in a vagrant virtual

00:39:24,630 --> 00:39:30,510
machine that's easy to destroy and

00:39:26,609 --> 00:39:32,430
recreate I don't we don't tie that

00:39:30,510 --> 00:39:34,589
process necessarily to anything except

00:39:32,430 --> 00:39:35,819
crap I broke it and it's not worth

00:39:34,589 --> 00:39:39,510
fixing so let's just throw it away and

00:39:35,819 --> 00:39:43,160
rebuild it yeah we should probably quit

00:39:39,510 --> 00:39:43,160
right a time to thank you very much

00:39:46,830 --> 00:39:54,900
oh please fill out the survey if you

00:39:52,680 --> 00:39:56,220
guys enjoyed this especially give me

00:39:54,900 --> 00:40:04,620
some feedback I can share with my boss

00:39:56,220 --> 00:40:07,860
Thanks oh I did forget to have swag huh

00:40:04,620 --> 00:40:10,250
let's see this guy over here till they

00:40:07,860 --> 00:40:10,250
asked some good questions

00:40:26,550 --> 00:40:32,830
remember girls ask questions

00:40:29,780 --> 00:40:32,830
yes question

00:41:39,290 --> 00:41:42,470
see the thing

00:41:43,490 --> 00:41:46,490
what

00:41:54,590 --> 00:42:01,050
sure ok guys so we'll be starting the

00:41:58,260 --> 00:42:02,640
lightning talks in like 10 minutes so we

00:42:01,050 --> 00:42:04,800
will not have enough time to test with

00:42:02,640 --> 00:42:08,330
somebody 12 has slides for the talks

00:42:04,800 --> 00:42:10,859
come by and test the projector works

00:42:08,330 --> 00:42:13,700
otherwise this will be taking out of

00:42:10,859 --> 00:42:13,700

YouTube URL: https://www.youtube.com/watch?v=51b0PywGdsQ


