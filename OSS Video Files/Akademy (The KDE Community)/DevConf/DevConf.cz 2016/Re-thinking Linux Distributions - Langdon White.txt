Title: Re-thinking Linux Distributions - Langdon White
Publication date: 2016-02-11
Playlist: DevConf.cz 2016
Description: 
	As the power pendulum swings towards developers and open source, from sys-admins and proprietary software, respectively, Linux Distributions are faced with a challenge. How do they get more relevant to the new power brokers?

Over the years, application and web developers have made it clear they are uninterested in packaging their applications if it requires them to do things beyond their normal languages and tool-chains. They are also not particularly interested in consuming their dependencies via distribution packaging tools if it requires a lag in availability, the developers packaging the libraries, and/or learning the packaging software tools beyond the most rudimentary level. Developers have also made it clear that the way software is packaged, normally targeted at production installations, is very cumbersome when using it for development (e.g. the perennial 'setenforce 0').

Many people interpret the above as "developers don't care about security or the trustworthiness of their dependencies." However, this is a mistake. Developers do not ever want to be the person listed as the problem when a major breach occurs. On the flip side, their "bosses" (actual bosses, software communities, professors, etc) set and enforce deadlines that do not allow for the time to muck about with things not directly related to their application development. 

What can distributions do? Well, how about they stop providing a distribution. Instead, they can provide an operating system and a set of content. Where the "things" found in the operating system part are packaged in the traditional manner and provide all the traditional guarantees. However, the "content" is provided in the native formats developers are used to and the guarantees, where possible, are provided through other mechanisms.

This talk will discuss the work taking place in the Fedora, CentOS, and Red Hat EL communities to address these challenges.

Presentation: http://bit.ly/1TgwQd2
Captions: 
	00:01:50,070 --> 00:02:01,860
oh please welcome our next speaker

00:01:59,490 --> 00:02:03,720
Langdon white from redhead we'll be

00:02:01,860 --> 00:02:06,290
talking about trafficking linux

00:02:03,720 --> 00:02:06,290
distributions

00:02:10,200 --> 00:02:16,620
hi I'm Langdon case you couldn't figure

00:02:13,770 --> 00:02:20,640
out who was speaking it if I can

00:02:16,620 --> 00:02:24,959
actually change slides so I'm like oh

00:02:20,640 --> 00:02:28,500
gonna stock up I'm Langdon I was an

00:02:24,959 --> 00:02:32,250
evangelist for rel and although we call

00:02:28,500 --> 00:02:33,239
them advocates now so but now I'm

00:02:32,250 --> 00:02:36,690
platform architect and developer

00:02:33,239 --> 00:02:38,400
experience my running joke is that they

00:02:36,690 --> 00:02:39,780
got tired me complaining so they said

00:02:38,400 --> 00:02:42,030
okay now you have to go to engineering

00:02:39,780 --> 00:02:45,090
and fix stuff I think they're still

00:02:42,030 --> 00:02:46,980
waiting for that and I've been working

00:02:45,090 --> 00:02:50,340
on fedora modularity which is kind of

00:02:46,980 --> 00:02:54,079
loosely related to the Rings stuff as

00:02:50,340 --> 00:02:57,620
well this is Thomas he plays a lot of

00:02:54,079 --> 00:03:00,750
football I think you call it here and

00:02:57,620 --> 00:03:03,750
basketball does lots of homework and as

00:03:00,750 --> 00:03:06,180
my joking tweet said earlier he uses

00:03:03,750 --> 00:03:08,069
Instagram to talk to his friends they

00:03:06,180 --> 00:03:09,750
post a picture on Instagram and then

00:03:08,069 --> 00:03:10,920
they use the comments to chat the

00:03:09,750 --> 00:03:13,620
picture has nothing to do with the

00:03:10,920 --> 00:03:15,380
conversation and apparently it is a

00:03:13,620 --> 00:03:17,730
mechanism by which they can avoid

00:03:15,380 --> 00:03:22,650
parents monitoring what they're talking

00:03:17,730 --> 00:03:24,780
about which I always fascinated and you

00:03:22,650 --> 00:03:26,220
know between that and snapchat I'm like

00:03:24,780 --> 00:03:30,299
you know I'm gonna stick with Twitter I

00:03:26,220 --> 00:03:33,269
know I'm old but you know come on so

00:03:30,299 --> 00:03:37,109
starting off distributions are awesome

00:03:33,269 --> 00:03:41,430
you know just like that dinosaur they're

00:03:37,109 --> 00:03:43,019
always awesome so but kind of the point

00:03:41,430 --> 00:03:44,760
of why is it a lego dinosaur well

00:03:43,019 --> 00:03:47,340
because it's actually you know a whole

00:03:44,760 --> 00:03:52,350
bunch of pieces right fit together to

00:03:47,340 --> 00:03:54,810
create something right and the thing

00:03:52,350 --> 00:03:57,540
they create is really really cool

00:03:54,810 --> 00:03:59,160
however that whole thing has to move

00:03:57,540 --> 00:04:01,470
together all the time right otherwise it

00:03:59,160 --> 00:04:04,920
all falls apart and that's not so good

00:04:01,470 --> 00:04:08,010
right and I will say it was not my idea

00:04:04,920 --> 00:04:11,400
to include the dinosaur originally I

00:04:08,010 --> 00:04:14,400
just thought it was hilarious all right

00:04:11,400 --> 00:04:15,989
so what we're doing here today is we're

00:04:14,400 --> 00:04:18,810
going to talk basically about some of

00:04:15,989 --> 00:04:19,919
the motivations around like kind of

00:04:18,810 --> 00:04:23,490
what's been going on in the software

00:04:19,919 --> 00:04:26,039
industry and why maybe you win XP

00:04:23,490 --> 00:04:28,139
aren't the right answer for all the

00:04:26,039 --> 00:04:31,080
world's problems anymore at least the

00:04:28,139 --> 00:04:34,020
way they're constructed today and so to

00:04:31,080 --> 00:04:35,669
start off with the biggest the single

00:04:34,020 --> 00:04:38,190
biggest thing i think that's the driver

00:04:35,669 --> 00:04:40,039
here is that we've really really started

00:04:38,190 --> 00:04:42,509
to recognize that operating systems

00:04:40,039 --> 00:04:43,979
application frameworks and applications

00:04:42,509 --> 00:04:46,639
themselves have different life cycles

00:04:43,979 --> 00:04:50,580
and distributions almost by definition

00:04:46,639 --> 00:04:52,650
disallow that disconnection right and in

00:04:50,580 --> 00:04:54,599
a sense that's actually what's good

00:04:52,650 --> 00:04:57,569
about them right is that you could

00:04:54,599 --> 00:05:02,250
always update any application as a

00:04:57,569 --> 00:05:04,650
sysadmin anytime you wanted because if

00:05:02,250 --> 00:05:06,630
there was a critical CVE or whatever you

00:05:04,650 --> 00:05:08,099
didn't have to worry about the vendor

00:05:06,630 --> 00:05:11,099
right you didn't have to rely on the

00:05:08,099 --> 00:05:12,810
vendor to ship the appropriate patch at

00:05:11,099 --> 00:05:16,949
the appropriate time and as a sysadmin

00:05:12,810 --> 00:05:18,530
you could update it underneath them so

00:05:16,949 --> 00:05:21,210
that's the first step or the first thing

00:05:18,530 --> 00:05:23,460
the next thing is you know how we do

00:05:21,210 --> 00:05:25,860
software has also changed a lot in the

00:05:23,460 --> 00:05:27,150
last 20 years right you know roughly

00:05:25,860 --> 00:05:29,039
speaking that's about how the long

00:05:27,150 --> 00:05:30,270
distributions have been around or

00:05:29,039 --> 00:05:34,590
certainly at least if they've gotten

00:05:30,270 --> 00:05:36,810
popular and so we do things like agile

00:05:34,590 --> 00:05:39,300
right so and actually this is my my

00:05:36,810 --> 00:05:43,259
example around agile and DevOps I think

00:05:39,300 --> 00:05:45,270
are interesting in the mid-90s when you

00:05:43,259 --> 00:05:47,250
were a developer that meant you also

00:05:45,270 --> 00:05:49,680
could replace a hard drive it bet you

00:05:47,250 --> 00:05:51,630
could also fix a server right because

00:05:49,680 --> 00:05:53,280
developers were basically all there was

00:05:51,630 --> 00:05:56,370
we didn't really have the striation we

00:05:53,280 --> 00:05:58,770
have now of all these different types of

00:05:56,370 --> 00:06:00,479
developers right or sis admins or UX

00:05:58,770 --> 00:06:02,819
designers or any of that stuff it was

00:06:00,479 --> 00:06:07,860
just all the same people and all the

00:06:02,819 --> 00:06:09,360
user experience stuff showed it so what

00:06:07,860 --> 00:06:10,740
happened in kind of late 90s everybody

00:06:09,360 --> 00:06:13,530
started to separate that stuff out and

00:06:10,740 --> 00:06:16,469
we started have specialists right and as

00:06:13,530 --> 00:06:17,849
one CFO actually I worked for once used

00:06:16,469 --> 00:06:20,880
to say it's like we took the entire

00:06:17,849 --> 00:06:24,030
steel industry over 200 years and decide

00:06:20,880 --> 00:06:26,130
to do the same exact thing except in 40

00:06:24,030 --> 00:06:28,229
right so we're basically going through

00:06:26,130 --> 00:06:29,789
all these maturation processes that

00:06:28,229 --> 00:06:31,740
every other industry has gone through

00:06:29,789 --> 00:06:34,440
except like with medicine which took

00:06:31,740 --> 00:06:36,169
several thousand years we decided to do

00:06:34,440 --> 00:06:38,360
it since the 60s right

00:06:36,169 --> 00:06:42,139
and so we separated all these people out

00:06:38,360 --> 00:06:43,849
and then we said oh hi right we just

00:06:42,139 --> 00:06:47,300
found out that when it's not all in one

00:06:43,849 --> 00:06:48,919
person's head it doesn't work so well so

00:06:47,300 --> 00:06:49,969
what we did was we said hey maybe we

00:06:48,919 --> 00:06:51,650
could actually get the guys to view the

00:06:49,969 --> 00:06:53,479
requirements to come and talk to us

00:06:51,650 --> 00:06:55,099
instead of it just being something that

00:06:53,479 --> 00:06:57,979
they ship over a wall and we call that

00:06:55,099 --> 00:06:59,900
agile right then a little bit later on

00:06:57,979 --> 00:07:01,939
we said oh you know there's these people

00:06:59,900 --> 00:07:05,270
who operate the actual applications we

00:07:01,939 --> 00:07:08,599
run why don't we invite them to and we

00:07:05,270 --> 00:07:10,699
could call that DevOps right then the

00:07:08,599 --> 00:07:14,060
other thing that's been crazy right is

00:07:10,699 --> 00:07:15,439
the amount of day to build up I used to

00:07:14,060 --> 00:07:18,889
know the state'll top my head but it's

00:07:15,439 --> 00:07:21,439
like it's like petabytes every year or

00:07:18,889 --> 00:07:23,389
something it's just insane and so now we

00:07:21,439 --> 00:07:25,849
have an entire subject feel right around

00:07:23,389 --> 00:07:27,800
data analysis right another whole new

00:07:25,849 --> 00:07:28,909
thing you've got all these you know

00:07:27,800 --> 00:07:31,249
these software systems that use

00:07:28,909 --> 00:07:33,259
streaming data as a way to trigger

00:07:31,249 --> 00:07:35,210
events I mean it's just everything about

00:07:33,259 --> 00:07:38,960
software is so different now than it was

00:07:35,210 --> 00:07:41,449
20 years ago in my favorite part right

00:07:38,960 --> 00:07:44,810
is the pendulum has swung back towards

00:07:41,449 --> 00:07:47,089
the developers so now the developers are

00:07:44,810 --> 00:07:49,909
in charge and as a developer that's

00:07:47,089 --> 00:07:54,110
awesome as a sysadmin that is terrible

00:07:49,909 --> 00:07:57,379
okay so what what basically what's been

00:07:54,110 --> 00:07:58,669
going on is we kind of like everything

00:07:57,379 --> 00:08:00,229
else right everything is always on a

00:07:58,669 --> 00:08:01,520
spectrum and there's a pendulum that

00:08:00,229 --> 00:08:04,789
goes back and forth about kind of who's

00:08:01,520 --> 00:08:06,680
in control and so in again kind of a

00:08:04,789 --> 00:08:09,020
late 90s mostly it was developers who

00:08:06,680 --> 00:08:10,460
are in control as a result it was very

00:08:09,020 --> 00:08:11,870
difficult to manage systems it was very

00:08:10,460 --> 00:08:14,270
difficult to manage applications etc

00:08:11,870 --> 00:08:15,800
then kind of in the early 2000s the

00:08:14,270 --> 00:08:18,620
sysadmin kind of took over the control

00:08:15,800 --> 00:08:20,479
the pendulum swung back towards that and

00:08:18,620 --> 00:08:22,580
everyone became very concerned about

00:08:20,479 --> 00:08:24,860
update ability of systems about the

00:08:22,580 --> 00:08:26,689
resilience and reliability of systems

00:08:24,860 --> 00:08:30,680
way more so than the applications

00:08:26,689 --> 00:08:31,729
themselves okay so but then that's kind

00:08:30,680 --> 00:08:34,399
of started to swing back the other way

00:08:31,729 --> 00:08:36,319
and my goal with some of this talk and

00:08:34,399 --> 00:08:39,139
the work I've been doing is to not let

00:08:36,319 --> 00:08:41,599
it swing all the way back right is why

00:08:39,139 --> 00:08:44,690
don't we actually help developers not be

00:08:41,599 --> 00:08:46,399
idiots okay because I know I'm an idiot

00:08:44,690 --> 00:08:48,230
I don't really understand the concept of

00:08:46,399 --> 00:08:49,550
DevOps like why in god's name would I

00:08:48,230 --> 00:08:50,870
want to just throw my application over

00:08:49,550 --> 00:08:53,930
the wall let somebody else get woken up

00:08:50,870 --> 00:08:55,940
at two in the morning but I understand

00:08:53,930 --> 00:08:57,920
from a quality and a use perspective

00:08:55,940 --> 00:09:00,080
yeah DevOps is probably a better choice

00:08:57,920 --> 00:09:02,090
but so this is a great book if you

00:09:00,080 --> 00:09:04,130
haven't read it by Steve O'Grady works

00:09:02,090 --> 00:09:07,850
for a an analyst firm that actually

00:09:04,130 --> 00:09:09,290
specifically focuses on developers then

00:09:07,850 --> 00:09:11,930
the next thing we've also started to

00:09:09,290 --> 00:09:14,480
realize is that different user scenarios

00:09:11,930 --> 00:09:16,760
have different risks by the way if you

00:09:14,480 --> 00:09:18,860
couldn't tell from my personality feel

00:09:16,760 --> 00:09:20,480
free to you know shout out questions

00:09:18,860 --> 00:09:22,640
raise your hand would probably be

00:09:20,480 --> 00:09:26,450
slightly more polite but don't wait till

00:09:22,640 --> 00:09:28,310
the end so different user scenarios have

00:09:26,450 --> 00:09:30,710
different risks so in other words when

00:09:28,310 --> 00:09:32,600
I'm deploying an ERP right that runs my

00:09:30,710 --> 00:09:34,490
entire business it cost me millions of

00:09:32,600 --> 00:09:36,830
dollars to implement you know what I

00:09:34,490 --> 00:09:38,990
would like to do never ever touch it

00:09:36,830 --> 00:09:41,030
again right now the flip side you take

00:09:38,990 --> 00:09:42,590
something like a movie you know a movie

00:09:41,030 --> 00:09:44,270
website right so movies about to come

00:09:42,590 --> 00:09:47,380
out and they put up a marketing website

00:09:44,270 --> 00:09:51,530
and it's going to go away very quickly

00:09:47,380 --> 00:09:54,080
right it's probably very static there's

00:09:51,530 --> 00:09:56,120
just not that much risk involved if it

00:09:54,080 --> 00:09:58,040
gets destroyed right you can replace it

00:09:56,120 --> 00:09:59,180
pretty easily and it doesn't really

00:09:58,040 --> 00:10:01,400
matter that much it doesn't have that

00:09:59,180 --> 00:10:02,540
much lifespan why do we want to keep

00:10:01,400 --> 00:10:04,490
those things at the same level of

00:10:02,540 --> 00:10:06,230
quality okay there may be a particular

00:10:04,490 --> 00:10:08,450
argument for my particular example but

00:10:06,230 --> 00:10:09,770
the point being different applications

00:10:08,450 --> 00:10:11,600
can have different levels of quality

00:10:09,770 --> 00:10:14,960
that's required different levels of

00:10:11,600 --> 00:10:17,090
reliability actually worked at worked at

00:10:14,960 --> 00:10:18,500
a big financial firm a long time ago and

00:10:17,090 --> 00:10:21,370
one of the best things they did is they

00:10:18,500 --> 00:10:23,270
had this grid right that said you know

00:10:21,370 --> 00:10:25,610
reliability kind of along this way you

00:10:23,270 --> 00:10:27,290
know and you know uptime kind of this

00:10:25,610 --> 00:10:29,120
way i can remember with the x and y axis

00:10:27,290 --> 00:10:32,210
where exactly but basically if you were

00:10:29,120 --> 00:10:33,710
out here it was like you know 37 nines

00:10:32,210 --> 00:10:35,510
of uptime right and if you were down

00:10:33,710 --> 00:10:37,970
here it was like you're lucky it was up

00:10:35,510 --> 00:10:40,850
right and what they actually did was

00:10:37,970 --> 00:10:43,490
charged the business to be over here and

00:10:40,850 --> 00:10:45,380
so the business had to actually make a

00:10:43,490 --> 00:10:47,090
determination that said where they were

00:10:45,380 --> 00:10:49,280
on that spectrum and if they were over

00:10:47,090 --> 00:10:50,900
here it was like well you know what your

00:10:49,280 --> 00:10:53,750
budget is you know a million dollars a

00:10:50,900 --> 00:10:56,330
year right now you need 10 just to run

00:10:53,750 --> 00:10:58,160
this app right so if they would drive

00:10:56,330 --> 00:11:00,170
them back into the realm of sanity

00:10:58,160 --> 00:11:01,790
without actually having to explain what

00:11:00,170 --> 00:11:08,120
you know 37 9

00:11:01,790 --> 00:11:09,440
time means to somebody all right so one

00:11:08,120 --> 00:11:12,260
of the things that is of particular

00:11:09,440 --> 00:11:15,230
annoyance to developers usually is that

00:11:12,260 --> 00:11:17,690
sysadmin to update their applications in

00:11:15,230 --> 00:11:20,720
production why is this a problem well

00:11:17,690 --> 00:11:22,310
this is a problem because and this is

00:11:20,720 --> 00:11:25,370
also kind of the point they do not have

00:11:22,310 --> 00:11:28,010
bug for bug compatibility okay because

00:11:25,370 --> 00:11:29,750
you're putting in a CBE fix that doesn't

00:11:28,010 --> 00:11:32,210
mean I didn't notice that there was a

00:11:29,750 --> 00:11:33,620
bug that had a security flaw that I

00:11:32,210 --> 00:11:36,680
might have written to work around four

00:11:33,620 --> 00:11:39,170
so this is adnan who introduces that new

00:11:36,680 --> 00:11:42,290
patch might actually be introducing a

00:11:39,170 --> 00:11:45,020
security bug right so you have this we

00:11:42,290 --> 00:11:47,060
have this entire fragile set of things

00:11:45,020 --> 00:11:49,640
right fragile in the sense that things

00:11:47,060 --> 00:11:51,140
are very you know well stacked up and

00:11:49,640 --> 00:11:53,870
actually it's what the picture is over

00:11:51,140 --> 00:11:56,240
here right is this is a particular kind

00:11:53,870 --> 00:11:58,100
of rock that actually like it gets

00:11:56,240 --> 00:12:01,010
cracked in the entire basically surface

00:11:58,100 --> 00:12:02,990
falls down but the point being is that

00:12:01,010 --> 00:12:05,090
you know we talked about standing on the

00:12:02,990 --> 00:12:06,650
shoulders of giants right like as a

00:12:05,090 --> 00:12:08,960
software developer now we're standing on

00:12:06,650 --> 00:12:11,000
a soldier of skyscrapers okay I mean

00:12:08,960 --> 00:12:13,850
it's just the millions of lines of code

00:12:11,000 --> 00:12:16,310
underneath your application the last

00:12:13,850 --> 00:12:18,170
thing you want to do is touch anything

00:12:16,310 --> 00:12:20,480
in there without actually essentially

00:12:18,170 --> 00:12:22,100
running all your tests again right so

00:12:20,480 --> 00:12:25,220
this is some of the popularity around

00:12:22,100 --> 00:12:27,980
containers because it's so easy to as a

00:12:25,220 --> 00:12:30,920
developer to defend my application from

00:12:27,980 --> 00:12:32,930
the updates coming in from you know the

00:12:30,920 --> 00:12:35,720
sysadmin side right now on the flip side

00:12:32,930 --> 00:12:38,780
they also do a nice thing of container

00:12:35,720 --> 00:12:40,700
izing but container izing what is

00:12:38,780 --> 00:12:43,130
exposed right so you can still do a

00:12:40,700 --> 00:12:45,560
firewall update assuming you know my app

00:12:43,130 --> 00:12:47,750
doesn't touch firewalls and it doesn't

00:12:45,560 --> 00:12:49,820
actually have any chance of affecting my

00:12:47,750 --> 00:12:53,150
application even if they both use the

00:12:49,820 --> 00:12:56,620
same SSL library right well it's not a

00:12:53,150 --> 00:12:59,510
great example but you get the idea so

00:12:56,620 --> 00:13:02,830
that's the last kind of problem i was

00:12:59,510 --> 00:13:05,100
talking about so then a few years ago

00:13:02,830 --> 00:13:08,610
checking how i'm doing on time here

00:13:05,100 --> 00:13:11,280
a few years ago matthew Miller through

00:13:08,610 --> 00:13:13,500
you know mostly him as a presenter and

00:13:11,280 --> 00:13:15,390
he he claims that there were a lot of

00:13:13,500 --> 00:13:17,900
people involved in the concept I think

00:13:15,390 --> 00:13:21,060
that was mostly to avoid getting hurt

00:13:17,900 --> 00:13:23,580
but proposed this kind of ratings

00:13:21,060 --> 00:13:26,340
contact so what is the range concept do

00:13:23,580 --> 00:13:28,260
well it says okay why don't we start to

00:13:26,340 --> 00:13:30,630
think about how do we separate the

00:13:28,260 --> 00:13:33,090
applications from the frameworks from

00:13:30,630 --> 00:13:35,340
the actual core of the OS right so

00:13:33,090 --> 00:13:36,810
instead of being a distribution where we

00:13:35,340 --> 00:13:38,040
actually have an operating system and

00:13:36,810 --> 00:13:40,050
then we have applications that run on

00:13:38,040 --> 00:13:41,790
top of it and then where we can we share

00:13:40,050 --> 00:13:45,540
pieces between applications and that's

00:13:41,790 --> 00:13:47,130
what we call frameworks right so the

00:13:45,540 --> 00:13:50,490
next thing we did was we release the

00:13:47,130 --> 00:13:52,710
Fedora editions okay and this was kind

00:13:50,490 --> 00:13:55,380
of the first step towards this path so

00:13:52,710 --> 00:13:58,050
there's a shared library of rpms

00:13:55,380 --> 00:14:00,300
essentially that you can choose to use

00:13:58,050 --> 00:14:03,000
in any of the additions so we have you

00:14:00,300 --> 00:14:06,030
know three different editions and with

00:14:03,000 --> 00:14:08,190
different use cases which means you know

00:14:06,030 --> 00:14:11,040
to some extent that on the workstation

00:14:08,190 --> 00:14:13,140
one for example we have the shorter life

00:14:11,040 --> 00:14:15,420
cycle components right because as a

00:14:13,140 --> 00:14:17,130
desktop user it's much better to be

00:14:15,420 --> 00:14:20,580
using kind of much more current things

00:14:17,130 --> 00:14:22,920
and updating it regularly the system

00:14:20,580 --> 00:14:24,210
itself is usually less at risk you know

00:14:22,920 --> 00:14:26,610
except for things like conferences and

00:14:24,210 --> 00:14:28,260
stuff whatever you know I don't

00:14:26,610 --> 00:14:32,190
recommend going to defcon with your own

00:14:28,260 --> 00:14:34,860
phone the server you want to solidify

00:14:32,190 --> 00:14:37,200
right you want it to like be able to age

00:14:34,860 --> 00:14:39,360
over time so you want to choose kind of

00:14:37,200 --> 00:14:41,520
a little more carefully that you want to

00:14:39,360 --> 00:14:43,250
use a you know an older set of packages

00:14:41,520 --> 00:14:47,070
perhaps right and you want to make

00:14:43,250 --> 00:14:48,870
choices that are less risky cloud is

00:14:47,070 --> 00:14:51,750
actually really interesting because it's

00:14:48,870 --> 00:14:53,430
kind of both but at the same time you

00:14:51,750 --> 00:14:55,380
want to be able to choose for that use

00:14:53,430 --> 00:14:57,570
case the individual applications you

00:14:55,380 --> 00:14:59,550
want to do for example you know like

00:14:57,570 --> 00:15:01,800
cloud doesn't have a firewall right

00:14:59,550 --> 00:15:03,960
which seems really really odd on any

00:15:01,800 --> 00:15:05,970
other kind of server because you don't

00:15:03,960 --> 00:15:07,770
need a firewall when you're deployed in

00:15:05,970 --> 00:15:09,390
something like ec2 because you have

00:15:07,770 --> 00:15:12,980
firewalls service coming from somewhere

00:15:09,390 --> 00:15:12,980
else in theory

00:15:14,930 --> 00:15:21,330
alright so then what we kind of decided

00:15:19,200 --> 00:15:23,730
to do was kind of okay so we've

00:15:21,330 --> 00:15:27,210
established essentially kind of the

00:15:23,730 --> 00:15:29,040
first idea of ring separation by doing

00:15:27,210 --> 00:15:31,080
the additions so then we kind of jumped

00:15:29,040 --> 00:15:33,330
to the next easiest thing which is let's

00:15:31,080 --> 00:15:36,300
take a look at the outermost ring okay

00:15:33,330 --> 00:15:38,339
so applications that are of dubious

00:15:36,300 --> 00:15:39,510
quality and by dubious I don't

00:15:38,339 --> 00:15:41,640
necessarily mean it with the normal

00:15:39,510 --> 00:15:43,560
interpretation of negative but dubious

00:15:41,640 --> 00:15:45,510
in the sense that we really have no idea

00:15:43,560 --> 00:15:47,670
what kind of quality they are they may

00:15:45,510 --> 00:15:49,410
be awesome but they're not we don't know

00:15:47,670 --> 00:15:51,870
and we don't have the time or the energy

00:15:49,410 --> 00:15:54,450
to review them quickly enough for people

00:15:51,870 --> 00:15:55,950
to want them to be available so that's

00:15:54,450 --> 00:15:57,810
when we introduced this copper thing

00:15:55,950 --> 00:16:01,020
which is apparently proven to be very

00:15:57,810 --> 00:16:03,149
popular amongst most people and it does

00:16:01,020 --> 00:16:05,550
a couple of nice things right so this is

00:16:03,149 --> 00:16:07,920
how i got libre office five for example

00:16:05,550 --> 00:16:11,190
on fedora 22 because it wasn't available

00:16:07,920 --> 00:16:12,990
yet for fedora so that kind of gives me

00:16:11,190 --> 00:16:14,880
the cutting edge stuff but then on the

00:16:12,990 --> 00:16:17,459
flip side for a long time i was using

00:16:14,880 --> 00:16:19,560
system config LVN when they took it away

00:16:17,459 --> 00:16:22,020
from fedora because i can't figure out

00:16:19,560 --> 00:16:24,300
lvm so I i like the little graphical

00:16:22,020 --> 00:16:27,120
interface and so i would just pull s

00:16:24,300 --> 00:16:29,160
rpms out of Koji and just rebuild it for

00:16:27,120 --> 00:16:30,570
whatever version of fedora I was on so

00:16:29,160 --> 00:16:33,150
it kind of lets you do both things right

00:16:30,570 --> 00:16:35,010
so I can do a net new application that

00:16:33,150 --> 00:16:36,990
we don't know if it's good yet or not or

00:16:35,010 --> 00:16:39,540
I can do an older applications probably

00:16:36,990 --> 00:16:41,070
riddled with security holes but I can

00:16:39,540 --> 00:16:44,190
choose to run it right it's my choice

00:16:41,070 --> 00:16:47,610
it's my application it's my risk right

00:16:44,190 --> 00:16:49,380
and because it's my laptop I know you

00:16:47,610 --> 00:16:51,540
know I know enough about my laptop to

00:16:49,380 --> 00:16:54,420
know whether it's a I can quantify that

00:16:51,540 --> 00:16:57,180
risk right so that's one of the nice

00:16:54,420 --> 00:16:58,829
things about copper one of the things

00:16:57,180 --> 00:17:01,440
that was proposed but never actually got

00:16:58,829 --> 00:17:03,450
past at least not yet was to try to

00:17:01,440 --> 00:17:05,490
start to think about the next ring in

00:17:03,450 --> 00:17:07,890
from the outermost again being kind of

00:17:05,490 --> 00:17:09,510
the simplest thing to do which was the

00:17:07,890 --> 00:17:13,530
playground proposal which is the idea

00:17:09,510 --> 00:17:15,959
that some set of the copper repos will

00:17:13,530 --> 00:17:17,970
be of high enough quality that we want

00:17:15,959 --> 00:17:20,429
to give some sort of attribution for it

00:17:17,970 --> 00:17:22,589
right so you know a test to it as Fedora

00:17:20,429 --> 00:17:24,419
that needed is at some level of quality

00:17:22,589 --> 00:17:25,660
it's not as good quality as all the

00:17:24,419 --> 00:17:28,660
stuff that's in the main

00:17:25,660 --> 00:17:31,000
but it's definitely been somebody's

00:17:28,660 --> 00:17:35,710
taking a look at it okay and so that was

00:17:31,000 --> 00:17:38,140
kind of the next idea there then we also

00:17:35,710 --> 00:17:40,620
had a proposal called the a lift

00:17:38,140 --> 00:17:44,710
proposal which actually tried to define

00:17:40,620 --> 00:17:47,200
five rings okay and basically with ALS 0

00:17:44,710 --> 00:17:49,900
if you guys are familiar with a lift it

00:17:47,200 --> 00:17:54,010
means it comes from math and so the set

00:17:49,900 --> 00:17:55,930
of the set of integers is a lift zero

00:17:54,010 --> 00:17:58,150
and like the set of ordinal numbers is a

00:17:55,930 --> 00:18:01,060
lift one and so it's basically it's

00:17:58,150 --> 00:18:03,520
different sets of numbers so the same

00:18:01,060 --> 00:18:07,180
kind of idea here right the set of rpms

00:18:03,520 --> 00:18:09,340
that is the most core is a lift 0 and

00:18:07,180 --> 00:18:11,490
then essentially LF five is kind of all

00:18:09,340 --> 00:18:14,470
the way out in that that outermost ring

00:18:11,490 --> 00:18:18,660
that was kind of the next idea also

00:18:14,470 --> 00:18:18,660
didn't get past but it it was closed

00:18:19,050 --> 00:18:27,520
yeah and then basically a lot of things

00:18:23,680 --> 00:18:28,930
got stuck and my interpretation of the

00:18:27,520 --> 00:18:31,660
big reason why a lot of those things got

00:18:28,930 --> 00:18:34,930
stuff is because of the Rings proposal

00:18:31,660 --> 00:18:37,060
is that the metaphor falls apart because

00:18:34,930 --> 00:18:41,770
we have lots and lots of orthogonal

00:18:37,060 --> 00:18:43,840
concerns around the quality of patch ok

00:18:41,770 --> 00:18:45,790
so at first with the Rings proposal

00:18:43,840 --> 00:18:47,320
right everything fits neatly in a ring

00:18:45,790 --> 00:18:51,010
and it looks pretty and it's really easy

00:18:47,320 --> 00:18:53,800
to understand however let's take for

00:18:51,010 --> 00:18:57,460
example build dependencies ok so if you

00:18:53,800 --> 00:19:00,310
want to build something you need to have

00:18:57,460 --> 00:19:02,080
the build dependencies does do the build

00:19:00,310 --> 00:19:04,420
dependencies belong in the same ring as

00:19:02,080 --> 00:19:05,890
the application that they built do they

00:19:04,420 --> 00:19:08,310
need to be maintained at the same level

00:19:05,890 --> 00:19:11,380
of quality as the things that they build

00:19:08,310 --> 00:19:14,020
not necessarily as long as they do their

00:19:11,380 --> 00:19:16,390
job correctly that's fine they could be

00:19:14,020 --> 00:19:18,160
packaged terribly right because they

00:19:16,390 --> 00:19:20,020
don't have to be the same they don't

00:19:18,160 --> 00:19:22,720
have to be the same quality ok so what

00:19:20,020 --> 00:19:24,490
do you do with that well so does it go

00:19:22,720 --> 00:19:26,290
in the ring but it's somehow marked is

00:19:24,490 --> 00:19:29,740
yucky you know we don't we don't really

00:19:26,290 --> 00:19:32,470
want that so I did all kinds of cool

00:19:29,740 --> 00:19:35,230
diagrams it all worked out terribly with

00:19:32,470 --> 00:19:35,950
bubbles and Venn diagrams and a bunch of

00:19:35,230 --> 00:19:38,049
other things

00:19:35,950 --> 00:19:41,230
got worse and worse if you at one of the

00:19:38,049 --> 00:19:43,450
talks earlier today they should another

00:19:41,230 --> 00:19:44,980
of matt miller's pictures which was the

00:19:43,450 --> 00:19:49,419
Rings but then with like a bunch of

00:19:44,980 --> 00:19:51,220
drugs in it and you know so it just it

00:19:49,419 --> 00:19:53,169
really really falls apart and the

00:19:51,220 --> 00:19:55,090
orthogonal concerns right so the metrics

00:19:53,169 --> 00:19:59,950
by which you want to rate the quality of

00:19:55,090 --> 00:20:01,600
something R wide-reaching as we know

00:19:59,950 --> 00:20:03,220
already and then on top of that we don't

00:20:01,600 --> 00:20:26,320
even know what we don't know yet sorry

00:20:03,220 --> 00:20:29,289
so a question what is right I don't know

00:20:26,320 --> 00:20:33,100
and the point I kind of trying to make

00:20:29,289 --> 00:20:35,380
here is that we want flexibility in the

00:20:33,100 --> 00:20:36,789
decision around kind of I hate to say

00:20:35,380 --> 00:20:38,380
every given package but every given

00:20:36,789 --> 00:20:40,450
package right we want to be able to have

00:20:38,380 --> 00:20:43,419
a flexibility that there's a use case

00:20:40,450 --> 00:20:46,210
for something to fall in or out of a

00:20:43,419 --> 00:20:48,490
ring or whatever or being varying levels

00:20:46,210 --> 00:20:50,919
of quality that the system we're

00:20:48,490 --> 00:20:53,769
designing supports them and then so that

00:20:50,919 --> 00:20:56,889
was the that was the first problem the

00:20:53,769 --> 00:20:59,289
other problem is developer still won't

00:20:56,889 --> 00:21:01,570
do it because it has the word rpm right

00:20:59,289 --> 00:21:03,700
so pretty much by definition they won't

00:21:01,570 --> 00:21:06,279
do it so there's lots of reasons why

00:21:03,700 --> 00:21:08,710
developers don't really like rpms but I

00:21:06,279 --> 00:21:12,130
would argue that whether RPM is the best

00:21:08,710 --> 00:21:14,200
way to package things or not the fact

00:21:12,130 --> 00:21:17,200
that as a developer who does Python or

00:21:14,200 --> 00:21:19,240
Ruby or Java or whatever every six

00:21:17,200 --> 00:21:20,529
months when I want to do a release every

00:21:19,240 --> 00:21:24,010
three months when I want to do a release

00:21:20,529 --> 00:21:26,679
I need to relearn this esoteric language

00:21:24,010 --> 00:21:29,110
that I don't use for anything else right

00:21:26,679 --> 00:21:31,240
this is the same reason I heat the httpd

00:21:29,110 --> 00:21:32,679
virtual hosts right it's like every time

00:21:31,240 --> 00:21:34,179
I want to start a new web development

00:21:32,679 --> 00:21:37,090
project I have to go figure out Apache

00:21:34,179 --> 00:21:39,850
again right I don't do it often enough

00:21:37,090 --> 00:21:41,350
to actually learn it right I just learn

00:21:39,850 --> 00:21:43,510
it well enough to accomplish that one

00:21:41,350 --> 00:21:45,279
goal and then I run away and go back to

00:21:43,510 --> 00:21:47,769
the stuff I do every day and then I come

00:21:45,279 --> 00:21:48,720
back three or six months later and oh my

00:21:47,769 --> 00:21:51,960
god I have to learn

00:21:48,720 --> 00:21:53,909
again right so even if it was easier to

00:21:51,960 --> 00:21:55,380
learn it doesn't really help that much

00:21:53,909 --> 00:21:57,990
right because you have to jump out and

00:21:55,380 --> 00:22:00,059
come back all the time and so my little

00:21:57,990 --> 00:22:02,190
picture here is you know we want to do

00:22:00,059 --> 00:22:03,809
simple packaging right we don't want

00:22:02,190 --> 00:22:06,809
them to have to go in custom touch

00:22:03,809 --> 00:22:08,010
everything make nice boxes and the

00:22:06,809 --> 00:22:09,299
example here was actually from an

00:22:08,010 --> 00:22:11,820
article which is kind of interesting

00:22:09,299 --> 00:22:16,710
that that kind of packaging is like 15

00:22:11,820 --> 00:22:19,980
euro per box versus kind of the more

00:22:16,710 --> 00:22:21,600
generic boxes you get which is like like

00:22:19,980 --> 00:22:28,770
50 Cent's right so like half a euro

00:22:21,600 --> 00:22:30,330
right well we're done all right that's

00:22:28,770 --> 00:22:36,990
all you guys came for it was just yeah

00:22:30,330 --> 00:22:39,780
we're so modularity so the idea here is

00:22:36,990 --> 00:22:42,169
that what we want to start to do is

00:22:39,780 --> 00:22:45,690
think about these things in terms of

00:22:42,169 --> 00:22:47,400
larger blobs right and by blob I don't

00:22:45,690 --> 00:22:48,990
necessarily mean anything negative again

00:22:47,400 --> 00:22:50,460
you know if this isn't necessarily bout

00:22:48,990 --> 00:22:52,080
bundling or not bundling or any of that

00:22:50,460 --> 00:22:54,210
kind of thing as much as that we want to

00:22:52,080 --> 00:22:57,000
start to think about applications as

00:22:54,210 --> 00:22:59,400
applications okay rather than as a set

00:22:57,000 --> 00:23:00,900
of packages and the reason we want to do

00:22:59,400 --> 00:23:04,559
that is because we want them to be

00:23:00,900 --> 00:23:08,220
defended from other applications okay so

00:23:04,559 --> 00:23:10,919
the advantage of shared rpms between

00:23:08,220 --> 00:23:12,210
different applications you know there's

00:23:10,919 --> 00:23:13,980
some advantages in disk space right

00:23:12,210 --> 00:23:15,809
there's some advantaging knowing where

00:23:13,980 --> 00:23:17,789
one thing is and updating just that one

00:23:15,809 --> 00:23:19,049
thing however the disadvantage is

00:23:17,789 --> 00:23:22,169
basically all the stuff I just went

00:23:19,049 --> 00:23:26,070
through right so how can we figure out a

00:23:22,169 --> 00:23:29,190
way to actually guarantee an application

00:23:26,070 --> 00:23:31,049
its own defense ability and the

00:23:29,190 --> 00:23:33,299
application can have some level of

00:23:31,049 --> 00:23:35,130
expectation around when it decides

00:23:33,299 --> 00:23:37,740
whether it wants to share or not share

00:23:35,130 --> 00:23:39,390
okay so that's kind of one aspect what I

00:23:37,740 --> 00:23:41,580
really like to see and this may or may

00:23:39,390 --> 00:23:44,280
not be something we can pull off is I

00:23:41,580 --> 00:23:47,250
would actually like the ls to be able to

00:23:44,280 --> 00:23:49,200
decide whether or not it gets a new copy

00:23:47,250 --> 00:23:51,900
of something or if it gets one that

00:23:49,200 --> 00:23:54,809
already exists because when you ask for

00:23:51,900 --> 00:23:56,610
a library there is somebody who knows

00:23:54,809 --> 00:23:59,370
whether or not it's already there and

00:23:56,610 --> 00:24:02,540
that's the OS itself why we rely on

00:23:59,370 --> 00:24:03,830
human packagers to figure out whether

00:24:02,540 --> 00:24:06,500
or not something is there or whether

00:24:03,830 --> 00:24:08,240
it's built or whatever when we could

00:24:06,500 --> 00:24:10,520
just have the application when it's

00:24:08,240 --> 00:24:14,440
talking to the OS to get those libraries

00:24:10,520 --> 00:24:20,510
it could just go get them itself right

00:24:14,440 --> 00:24:23,090
I'm crazy just the other part is and

00:24:20,510 --> 00:24:25,340
then there's a project going on with

00:24:23,090 --> 00:24:27,590
fedora minimization right a lot of

00:24:25,340 --> 00:24:29,900
people look at that as there is some

00:24:27,590 --> 00:24:33,380
sort of intrinsic value into small disk

00:24:29,900 --> 00:24:36,080
size I don't care I don't understand why

00:24:33,380 --> 00:24:39,020
anybody cares okay as far as I'm

00:24:36,080 --> 00:24:41,750
concerned you know half a gig or a gig

00:24:39,020 --> 00:24:44,180
of you know whatever for a server is

00:24:41,750 --> 00:24:46,250
irrelevant okay I don't even I don't

00:24:44,180 --> 00:24:48,440
even know of a server right that

00:24:46,250 --> 00:24:50,290
actually is that small so it just

00:24:48,440 --> 00:24:54,980
doesn't matter the reason it matters

00:24:50,290 --> 00:24:57,320
okay is for attack surface area okay

00:24:54,980 --> 00:24:59,990
however one of the interesting things

00:24:57,320 --> 00:25:01,340
it's a byproduct and I think Stephen

00:24:59,990 --> 00:25:03,200
tweet you brought this up in a meeting I

00:25:01,340 --> 00:25:04,640
was in the other day it's like all the

00:25:03,200 --> 00:25:06,200
localization libraries are one of the

00:25:04,640 --> 00:25:08,350
things we keep trying to remove in kind

00:25:06,200 --> 00:25:10,850
of concepts like fedora minimization

00:25:08,350 --> 00:25:12,680
localization library or local sorry

00:25:10,850 --> 00:25:14,270
translations actually not libraries but

00:25:12,680 --> 00:25:16,310
like the actual translations themselves

00:25:14,270 --> 00:25:18,170
they're not providing an attack surface

00:25:16,310 --> 00:25:22,490
guys they don't execute right it doesn't

00:25:18,170 --> 00:25:23,540
you know sort of but but people want to

00:25:22,490 --> 00:25:26,090
take it out anyway right because they

00:25:23,540 --> 00:25:27,530
want to get it as small as possible but

00:25:26,090 --> 00:25:29,780
so there's the attack surface argument

00:25:27,530 --> 00:25:31,310
which does make sense okay but it still

00:25:29,780 --> 00:25:33,700
doesn't really drive the minimization

00:25:31,310 --> 00:25:36,590
down as much as I as I think we need

00:25:33,700 --> 00:25:38,630
what does drive immunization down is to

00:25:36,590 --> 00:25:41,330
minimize the amount of overlap between

00:25:38,630 --> 00:25:43,310
dependencies between different things so

00:25:41,330 --> 00:25:45,470
we need not only a minimization around

00:25:43,310 --> 00:25:47,510
core which is kind of the obvious one

00:25:45,470 --> 00:25:49,760
that people are focused on for you know

00:25:47,510 --> 00:25:51,530
like container base images you know or a

00:25:49,760 --> 00:25:53,150
minimal install or those kinds of things

00:25:51,530 --> 00:25:55,220
but we also need to do it around

00:25:53,150 --> 00:25:57,380
applications right so when we start to

00:25:55,220 --> 00:25:59,480
talk about modules and applications then

00:25:57,380 --> 00:26:01,370
we need a way to minimize their

00:25:59,480 --> 00:26:04,160
dependencies on all other applications

00:26:01,370 --> 00:26:07,670
and in the sense of minimize its its

00:26:04,160 --> 00:26:09,290
dependency on the OS itself right so the

00:26:07,670 --> 00:26:11,690
the number of libraries that are

00:26:09,290 --> 00:26:14,540
considered part of the application is

00:26:11,690 --> 00:26:16,190
the higher number that is is better that

00:26:14,540 --> 00:26:19,159
doesn't necessarily mean

00:26:16,190 --> 00:26:21,200
that the it doesn't share components

00:26:19,159 --> 00:26:23,600
when it's actually like on disk but it

00:26:21,200 --> 00:26:25,580
does mean that conceptually the

00:26:23,600 --> 00:26:29,029
operating system can complete continue

00:26:25,580 --> 00:26:32,120
to change as much as it wants as the

00:26:29,029 --> 00:26:33,799
application stays the same right so the

00:26:32,120 --> 00:26:36,230
more libraries we push up into the

00:26:33,799 --> 00:26:39,200
application itself the more flexibility

00:26:36,230 --> 00:26:40,460
we have in the US right so you know one

00:26:39,200 --> 00:26:43,370
of the classic problems right there's

00:26:40,460 --> 00:26:44,840
fedora 14 right you know everybody in

00:26:43,370 --> 00:26:48,190
their brother was still running fedora

00:26:44,840 --> 00:26:50,629
14 for a really long time until fedora

00:26:48,190 --> 00:26:51,950
21 came out I don't know Matt's got all

00:26:50,629 --> 00:26:54,320
these in his slides but I can ever

00:26:51,950 --> 00:26:56,779
remember so but point being is that why

00:26:54,320 --> 00:26:58,460
did they stay there right is because

00:26:56,779 --> 00:27:01,429
they thought everything about fedora 14

00:26:58,460 --> 00:27:03,639
was awesome and that there was no need

00:27:01,429 --> 00:27:07,039
for any advancement in computers again

00:27:03,639 --> 00:27:09,740
I'm guessing none right my guess is that

00:27:07,039 --> 00:27:12,590
the applications that they used on that

00:27:09,740 --> 00:27:15,049
OS where what they liked and they wanted

00:27:12,590 --> 00:27:18,049
those versions right for whatever reason

00:27:15,049 --> 00:27:19,340
so as a result they had to stay with

00:27:18,049 --> 00:27:21,409
that version of the operating system

00:27:19,340 --> 00:27:25,190
right we don't need that we don't need

00:27:21,409 --> 00:27:28,159
to keep them so tightly connected all

00:27:25,190 --> 00:27:31,820
right and then the last thing is that we

00:27:28,159 --> 00:27:34,370
need a way to provide application

00:27:31,820 --> 00:27:36,649
developers a way to ship their

00:27:34,370 --> 00:27:37,909
applications right so my little bag here

00:27:36,649 --> 00:27:39,590
right so we want to give them a bag that

00:27:37,909 --> 00:27:41,659
they can shove all their stuff in and

00:27:39,590 --> 00:27:46,309
then ship it to their customers and

00:27:41,659 --> 00:27:48,830
customers users right whatever and we

00:27:46,309 --> 00:27:51,559
want that bag to look a lot like the bag

00:27:48,830 --> 00:27:54,919
are already using ok if not exactly the

00:27:51,559 --> 00:27:56,809
same and what that means though is that

00:27:54,919 --> 00:27:59,629
we lose one of the major advantages that

00:27:56,809 --> 00:28:00,980
we have with our p.m. and you know I

00:27:59,629 --> 00:28:04,460
don't know I'm old right so that's a

00:28:00,980 --> 00:28:07,700
card catalog it's called and it's a way

00:28:04,460 --> 00:28:10,730
you find books in libraries you know 20

00:28:07,700 --> 00:28:12,889
years ago so but the idea of being

00:28:10,730 --> 00:28:14,809
there's all this metadata we still need

00:28:12,889 --> 00:28:17,029
to ship to the users right we need to be

00:28:14,809 --> 00:28:19,190
able to tell them all these quality

00:28:17,029 --> 00:28:21,259
metrics about the application they want

00:28:19,190 --> 00:28:23,990
to use but we need to give them a

00:28:21,259 --> 00:28:26,000
separate channel for that content for

00:28:23,990 --> 00:28:28,519
the metadata content that's distinct

00:28:26,000 --> 00:28:29,900
from the application itself but we also

00:28:28,519 --> 00:28:32,540
need to be able to say

00:28:29,900 --> 00:28:35,570
this metadata element is attached to

00:28:32,540 --> 00:28:37,760
this particular binary right so that's

00:28:35,570 --> 00:28:39,350
not any fun that's why RPM was invented

00:28:37,760 --> 00:28:40,670
so let's break that and do something

00:28:39,350 --> 00:28:44,450
completely different just to make things

00:28:40,670 --> 00:28:47,210
more fun so basically the combination of

00:28:44,450 --> 00:28:49,700
these kind of three concepts is really

00:28:47,210 --> 00:28:53,270
what we're trying to do with kind of

00:28:49,700 --> 00:28:55,940
modularization or you know with like

00:28:53,270 --> 00:28:58,400
fedora next or rings two or whatever you

00:28:55,940 --> 00:28:59,960
want to call it but basically this is

00:28:58,400 --> 00:29:02,420
what we're trying to do right we're

00:28:59,960 --> 00:29:05,350
trying to meet the problems from the

00:29:02,420 --> 00:29:08,990
beginning in a way that will not only

00:29:05,350 --> 00:29:10,640
protect the sysadmin s'right but also

00:29:08,990 --> 00:29:16,400
help the developers to be able to ship

00:29:10,640 --> 00:29:20,240
their applications more easily so where

00:29:16,400 --> 00:29:22,430
are we now so these are some examples of

00:29:20,240 --> 00:29:24,590
applications that are starting to go

00:29:22,430 --> 00:29:27,920
down this route okay or application

00:29:24,590 --> 00:29:31,220
concepts or whatever initiatives let's

00:29:27,920 --> 00:29:34,310
say so roll kit for example is this idea

00:29:31,220 --> 00:29:36,350
of we need a way to provide an

00:29:34,310 --> 00:29:39,530
application and a way to install it that

00:29:36,350 --> 00:29:44,030
is generic so that a consumer can know

00:29:39,530 --> 00:29:46,570
how to install what rolls right and not

00:29:44,030 --> 00:29:48,470
have to know the intricate you know

00:29:46,570 --> 00:29:50,870
concepts that are going on with

00:29:48,470 --> 00:29:52,700
something like an RPM install so in

00:29:50,870 --> 00:29:55,370
other words when you are p.m. install

00:29:52,700 --> 00:29:58,670
something there's only one way it can be

00:29:55,370 --> 00:30:01,520
installed right generally speaking in

00:29:58,670 --> 00:30:03,200
the RPM world what this tries to do is

00:30:01,520 --> 00:30:04,460
say you know what when you're initially

00:30:03,200 --> 00:30:07,130
installing certain kinds of applications

00:30:04,460 --> 00:30:10,880
you want a level of interaction that you

00:30:07,130 --> 00:30:12,020
can engage with and but not all the time

00:30:10,880 --> 00:30:13,670
right you don't always want to be able

00:30:12,020 --> 00:30:15,200
to update it you may have a golden

00:30:13,670 --> 00:30:17,180
version that then you don't want to have

00:30:15,200 --> 00:30:18,740
to kind of manually install every time

00:30:17,180 --> 00:30:20,660
so it's trying to take kind of a balance

00:30:18,740 --> 00:30:23,540
between those two things then you have

00:30:20,660 --> 00:30:25,640
xdg app xeg app is containerization

00:30:23,540 --> 00:30:28,100
technology but what it's trying to do

00:30:25,640 --> 00:30:31,840
which I think they don't focus on enough

00:30:28,100 --> 00:30:34,370
is that they're providing essentially a

00:30:31,840 --> 00:30:36,350
platform that you can write your

00:30:34,370 --> 00:30:39,440
application against that is separate and

00:30:36,350 --> 00:30:41,420
distinct from the OS so xdg app will say

00:30:39,440 --> 00:30:43,340
and it's mostly focused on desktop

00:30:41,420 --> 00:30:47,220
applications for for going

00:30:43,340 --> 00:30:50,789
but it'll say you have your container

00:30:47,220 --> 00:30:52,620
right but then you have gtk3 and I you

00:30:50,789 --> 00:30:54,450
know of some version right some even

00:30:52,620 --> 00:30:57,629
potentially even down to the Z version

00:30:54,450 --> 00:30:59,909
so as an application author I can target

00:30:57,629 --> 00:31:02,940
that particular version and when I'm

00:30:59,909 --> 00:31:05,610
ready I can upgrade to the latest

00:31:02,940 --> 00:31:06,929
version as an application developer so

00:31:05,610 --> 00:31:09,379
they're providing an application

00:31:06,929 --> 00:31:11,730
platform layer that is completely

00:31:09,379 --> 00:31:14,370
independent from what's running on the

00:31:11,730 --> 00:31:15,629
rest of the machine okay so that the

00:31:14,370 --> 00:31:18,450
application can have a different life

00:31:15,629 --> 00:31:21,539
cycle in this case from Nome sort of but

00:31:18,450 --> 00:31:23,580
also from the OS itself however it's

00:31:21,539 --> 00:31:25,799
actually not limited to gtk like you

00:31:23,580 --> 00:31:27,929
could put other application frameworks

00:31:25,799 --> 00:31:31,220
in there they just happen to be biased

00:31:27,929 --> 00:31:33,450
towards that because they're don't guys

00:31:31,220 --> 00:31:36,240
atomic workstation is kind of the

00:31:33,450 --> 00:31:38,159
underpinnings of that same concept so if

00:31:36,240 --> 00:31:40,529
you have all of your applications to

00:31:38,159 --> 00:31:45,869
deliver this these containers then you

00:31:40,529 --> 00:31:47,700
can have an actual like then near or

00:31:45,869 --> 00:31:51,450
less can maybe operate completely

00:31:47,700 --> 00:31:53,220
differently than the applications

00:31:51,450 --> 00:31:56,070
themselves and so the idea is that the

00:31:53,220 --> 00:31:58,320
immutable operating system that then you

00:31:56,070 --> 00:32:00,240
can put applications on top of how could

00:31:58,320 --> 00:32:02,369
you you couldn't really do that with RPM

00:32:00,240 --> 00:32:03,419
the way it works today so that's kind of

00:32:02,369 --> 00:32:05,369
why they're talking about the

00:32:03,419 --> 00:32:07,740
containerization side of it Nuala q1

00:32:05,369 --> 00:32:11,309
atomic app are an attempt to say hey you

00:32:07,740 --> 00:32:14,669
know what most applications do not just

00:32:11,309 --> 00:32:16,830
have one container specifically but

00:32:14,669 --> 00:32:18,659
they're not just one app most of the

00:32:16,830 --> 00:32:20,730
time right if you want to do a website

00:32:18,659 --> 00:32:22,799
right you need at a minimum you need a

00:32:20,730 --> 00:32:25,440
web server in a database almost always

00:32:22,799 --> 00:32:27,299
right so how do you coordinate those two

00:32:25,440 --> 00:32:28,200
things together right so most

00:32:27,299 --> 00:32:29,879
applications are actually

00:32:28,200 --> 00:32:31,769
multi-component so we need a way to

00:32:29,879 --> 00:32:33,809
describe them and we need a way to

00:32:31,769 --> 00:32:35,970
create them and we need a way to deploy

00:32:33,809 --> 00:32:38,460
them where we treat them as if they're

00:32:35,970 --> 00:32:39,539
an autonomous unit right sounds kind of

00:32:38,460 --> 00:32:41,809
like the modulus thing as I was like

00:32:39,539 --> 00:32:41,809
with them

00:32:42,299 --> 00:32:48,070
the base working group was working on or

00:32:45,220 --> 00:32:50,830
is working on how to identify that

00:32:48,070 --> 00:32:52,629
center ring which i think is kind of a

00:32:50,830 --> 00:32:55,509
very very difficult thing to actually

00:32:52,629 --> 00:32:57,490
get anyone to ever agree on so I kind of

00:32:55,509 --> 00:32:58,809
tend to like the idea better of why

00:32:57,490 --> 00:33:01,210
don't we just start pulling all the

00:32:58,809 --> 00:33:03,100
applications out and then whatever we

00:33:01,210 --> 00:33:05,080
end up with at the end is the grain

00:33:03,100 --> 00:33:06,840
right that's the center rather than

00:33:05,080 --> 00:33:08,649
trying to figure out the center first

00:33:06,840 --> 00:33:12,519
because everyone will have their own

00:33:08,649 --> 00:33:15,730
opinions another change this coming is

00:33:12,519 --> 00:33:18,009
weak dependencies and so this allows us

00:33:15,730 --> 00:33:20,559
even with our p.m. to start to

00:33:18,009 --> 00:33:22,570
modularize things right it starts to say

00:33:20,559 --> 00:33:26,259
you know what you don't have to provide

00:33:22,570 --> 00:33:27,399
this particular dependency and then the

00:33:26,259 --> 00:33:30,070
environments at saks working group

00:33:27,399 --> 00:33:32,350
they're the ones who produce the kind of

00:33:30,070 --> 00:33:34,419
guidelines and stuff for copper as well

00:33:32,350 --> 00:33:37,240
as the proposal for playground and their

00:33:34,419 --> 00:33:39,159
proposal for a lift so in the ens

00:33:37,240 --> 00:33:40,690
working group is where a lot of this

00:33:39,159 --> 00:33:42,820
stuff should be taking place and where

00:33:40,690 --> 00:33:46,269
that kind of definitions should be

00:33:42,820 --> 00:33:50,429
taking place even if the implementations

00:33:46,269 --> 00:33:50,429
are taking place in individual projects

00:33:51,360 --> 00:33:57,669
so there's still lots more to do oh wait

00:33:55,029 --> 00:34:00,610
I needed update more of my slides that I

00:33:57,669 --> 00:34:03,639
realized I gave a very similar talk at

00:34:00,610 --> 00:34:05,200
paws down last week so but I did plug

00:34:03,639 --> 00:34:10,000
dev com so everybody should be happy

00:34:05,200 --> 00:34:12,129
about that and there's also you know

00:34:10,000 --> 00:34:13,899
we're starting to see we certainly have

00:34:12,129 --> 00:34:16,149
this developer at fedora project org

00:34:13,899 --> 00:34:18,220
right which is targeted at application

00:34:16,149 --> 00:34:19,960
developers right the people we want to

00:34:18,220 --> 00:34:22,109
attract a fedora right we want to

00:34:19,960 --> 00:34:25,149
attract more application developers as

00:34:22,109 --> 00:34:27,970
users and contributors to fedora because

00:34:25,149 --> 00:34:29,500
as that pendulum swings over we want

00:34:27,970 --> 00:34:31,869
more and more of them to come start

00:34:29,500 --> 00:34:34,359
participating especially as we start to

00:34:31,869 --> 00:34:37,240
see things like DevOps where there are

00:34:34,359 --> 00:34:40,329
fewer and fewer sis admins in the

00:34:37,240 --> 00:34:41,589
traditional sense right very soon this

00:34:40,329 --> 00:34:43,569
admins will be man if they're not

00:34:41,589 --> 00:34:46,869
already managing thousands of machines

00:34:43,569 --> 00:34:48,849
right ton tons and tons and tons of

00:34:46,869 --> 00:34:51,419
machines where you know it used to be

00:34:48,849 --> 00:34:54,510
you know one guy managed maybe a hundred

00:34:51,419 --> 00:34:57,270
I side you can't do that anymore you're

00:34:54,510 --> 00:34:59,160
now managing hundreds if not thousands

00:34:57,270 --> 00:35:01,500
of machines we need better tools to

00:34:59,160 --> 00:35:03,829
enable them to do that but more

00:35:01,500 --> 00:35:06,390
interestingly the future of

00:35:03,829 --> 00:35:08,520
distributions it's really important we

00:35:06,390 --> 00:35:10,109
need to attract the people who are

00:35:08,520 --> 00:35:13,079
actually going to be doing software

00:35:10,109 --> 00:35:15,960
stuff much more than we are today

00:35:13,079 --> 00:35:19,619
because in the in this future space

00:35:15,960 --> 00:35:22,109
right we won't need to support operating

00:35:19,619 --> 00:35:24,599
systems directly per se right I mean

00:35:22,109 --> 00:35:26,460
it'll be much more managed and it'll be

00:35:24,599 --> 00:35:28,680
about the applications and the OS will

00:35:26,460 --> 00:35:30,510
be a providing just providing enough

00:35:28,680 --> 00:35:36,030
information to make those applications

00:35:30,510 --> 00:35:37,440
around and then let's see we'd love you

00:35:36,030 --> 00:35:39,599
to come and participate in the

00:35:37,440 --> 00:35:41,400
environments of stacks working group you

00:35:39,599 --> 00:35:44,130
know in any of the apps i mentioned

00:35:41,400 --> 00:35:46,170
there's more of those coming along more

00:35:44,130 --> 00:35:49,710
documentation about how to kind of get

00:35:46,170 --> 00:35:52,770
plugged into this is starting and we'd

00:35:49,710 --> 00:35:54,960
like to see you there and i'm giving

00:35:52,770 --> 00:35:58,890
myself a deadline for an update on all

00:35:54,960 --> 00:36:01,470
this at flock in august and so i hope

00:35:58,890 --> 00:36:03,000
they'll see you all there or at least

00:36:01,470 --> 00:36:05,220
you can watch the talk over streaming

00:36:03,000 --> 00:36:11,579
video that's pretty much all I've got

00:36:05,220 --> 00:36:13,859
are there questions oh and sorry and if

00:36:11,579 --> 00:36:15,240
once the slides are up those links to

00:36:13,859 --> 00:36:18,380
basically everything I mentioned evening

00:36:15,240 --> 00:36:18,380
so sorry good

00:36:35,140 --> 00:36:42,050
I think something wrong yeah it was like

00:36:38,240 --> 00:36:43,640
okay if there are apps in a system but

00:36:42,050 --> 00:36:45,800
to depend on the same library but

00:36:43,640 --> 00:36:47,690
another version of it isn't going to

00:36:45,800 --> 00:36:54,680
create a huge mess it is how I

00:36:47,690 --> 00:36:58,070
understand it so can you define math 10

00:36:54,680 --> 00:36:59,720
versions of the same library no 10

00:36:58,070 --> 00:37:01,970
different versions of the same library

00:36:59,720 --> 00:37:04,730
on the same system right what's wrong

00:37:01,970 --> 00:37:08,210
with that well configuration file

00:37:04,730 --> 00:37:11,240
formats may change and maybe let's just

00:37:08,210 --> 00:37:14,720
look at Oh gtk themes they break from

00:37:11,240 --> 00:37:16,490
one immersion to another so okay so this

00:37:14,720 --> 00:37:23,240
is an argument i get a lot so that's why

00:37:16,490 --> 00:37:26,150
i'm trolling you but yeah so as as

00:37:23,240 --> 00:37:29,360
people who use computers every day right

00:37:26,150 --> 00:37:31,940
we have certain expectations around how

00:37:29,360 --> 00:37:34,940
they operate so that our muscle memory

00:37:31,940 --> 00:37:37,400
works correctly right a whole bunch of

00:37:34,940 --> 00:37:38,780
why people hated gnome 3 is because

00:37:37,400 --> 00:37:40,970
their muscle memory stopped working

00:37:38,780 --> 00:37:44,330
right there may be lots of other reasons

00:37:40,970 --> 00:37:45,920
but that's definitely one of them if the

00:37:44,330 --> 00:37:47,090
exact same thing happened with microsoft

00:37:45,920 --> 00:37:48,980
office right when they move to the

00:37:47,090 --> 00:37:50,330
ribbon model right was it's it's not so

00:37:48,980 --> 00:37:52,310
much that the ribbon thing was a bad

00:37:50,330 --> 00:37:54,080
idea as much as their people's muscle

00:37:52,310 --> 00:37:57,590
memory stopped working a great example

00:37:54,080 --> 00:37:59,750
that too I worked with a woman who who

00:37:57,590 --> 00:38:02,260
worked on a project that the cost of

00:37:59,750 --> 00:38:05,300
like a million-dollar skipper take and

00:38:02,260 --> 00:38:07,430
to replace an old terminals just sorry

00:38:05,300 --> 00:38:11,270
like a mainframe system with a web app

00:38:07,430 --> 00:38:13,700
right and their users hated it hated it

00:38:11,270 --> 00:38:15,020
because all those super fast things that

00:38:13,700 --> 00:38:15,980
they had memorized over the last 20

00:38:15,020 --> 00:38:18,380
years that they could do on a mainframe

00:38:15,980 --> 00:38:22,040
in seconds now they had to click around

00:38:18,380 --> 00:38:24,680
on the website talk about actually maybe

00:38:22,040 --> 00:38:26,810
talking to users first right so one of

00:38:24,680 --> 00:38:30,170
the expectations we have particularly

00:38:26,810 --> 00:38:32,900
sis admins is that I know in my head

00:38:30,170 --> 00:38:34,460
where certain kinds of files are that's

00:38:32,900 --> 00:38:36,500
one of the arguments about the mess

00:38:34,460 --> 00:38:37,970
right so if the files are littered all

00:38:36,500 --> 00:38:41,150
over the place how will I ever find them

00:38:37,970 --> 00:38:42,920
right that's one another example is as

00:38:41,150 --> 00:38:43,510
you said like configuration right for

00:38:42,920 --> 00:38:45,370
that particular

00:38:43,510 --> 00:38:46,930
maybe that changes over time so they

00:38:45,370 --> 00:38:48,580
actually have to have different configs

00:38:46,930 --> 00:38:50,110
to go with different libraries and who

00:38:48,580 --> 00:38:51,840
knows maybe it's a whole stack of things

00:38:50,110 --> 00:38:55,030
that have to have to be different I

00:38:51,840 --> 00:38:56,230
argue number one because I really don't

00:38:55,030 --> 00:38:58,480
understand the fascination with disk

00:38:56,230 --> 00:39:02,110
space that to some extent as far as this

00:38:58,480 --> 00:39:03,760
space is concerned who cares but number

00:39:02,110 --> 00:39:05,770
two one argument you can definitely see

00:39:03,760 --> 00:39:07,180
is what about ran right okay well that

00:39:05,770 --> 00:39:10,420
starts to be a better argument in my

00:39:07,180 --> 00:39:12,220
mind but you know the last part about

00:39:10,420 --> 00:39:15,730
the your muscle memory remembers where

00:39:12,220 --> 00:39:17,550
it is you know we have a computer it's

00:39:15,730 --> 00:39:20,080
really good at keeping track of stuff

00:39:17,550 --> 00:39:21,940
how about we just make it so that the

00:39:20,080 --> 00:39:24,580
computer presents the user where they

00:39:21,940 --> 00:39:26,890
expect it to be rather than making the

00:39:24,580 --> 00:39:29,710
user remember because that's what

00:39:26,890 --> 00:39:31,570
computers do right so can we change how

00:39:29,710 --> 00:39:33,280
some of the operating system works or

00:39:31,570 --> 00:39:36,160
the file systems work or how they look

00:39:33,280 --> 00:39:39,070
at least to the user so that all that

00:39:36,160 --> 00:39:42,040
muscle memory still works but it's a lie

00:39:39,070 --> 00:39:44,130
and you know what file systems for a

00:39:42,040 --> 00:39:46,840
long time now have been lying like crazy

00:39:44,130 --> 00:39:48,580
right like if you know anything about

00:39:46,840 --> 00:39:50,620
what's actually going on in a hard disk

00:39:48,580 --> 00:39:52,410
when you try to write a file you will

00:39:50,620 --> 00:39:55,630
keep all of your notes under your pillow

00:39:52,410 --> 00:39:57,100
okay handwritten in multiple copies

00:39:55,630 --> 00:39:59,770
right very much like if you've ever

00:39:57,100 --> 00:40:01,780
worked at a bank you really really have

00:39:59,770 --> 00:40:11,680
to convince yourself to put money back

00:40:01,780 --> 00:40:16,150
in there right go ahead but he started

00:40:11,680 --> 00:40:18,130
applications so so two things one and I

00:40:16,150 --> 00:40:19,960
didn't really mention this earlier but

00:40:18,130 --> 00:40:22,140
one thing that is significantly more

00:40:19,960 --> 00:40:25,270
true today than it was 20 years ago is

00:40:22,140 --> 00:40:27,970
you can much more regularly trust your

00:40:25,270 --> 00:40:31,120
vendors okay Matt would disagree he

00:40:27,970 --> 00:40:33,040
hates all vendors but you can much more

00:40:31,120 --> 00:40:34,540
regularly trust your vendors a lot of

00:40:33,040 --> 00:40:40,780
the vendors right our open source

00:40:34,540 --> 00:40:41,950
projects what right right so you can

00:40:40,780 --> 00:40:43,480
trust your distribution right part of

00:40:41,950 --> 00:40:45,370
the reason distributions are there it's

00:40:43,480 --> 00:40:47,530
because you couldn't trust vendors right

00:40:45,370 --> 00:40:50,380
is that you want an independent way to

00:40:47,530 --> 00:40:51,880
get those security patches down so this

00:40:50,380 --> 00:40:53,530
is where I'm saying is like let's keep

00:40:51,880 --> 00:40:54,320
the pendulum from going the whole other

00:40:53,530 --> 00:40:56,660
way

00:40:54,320 --> 00:41:00,590
ok so if Pierce straight-up

00:40:56,660 --> 00:41:02,750
containerization continues it doesn't

00:41:00,590 --> 00:41:05,120
matter what you want as a sysadmin you

00:41:02,750 --> 00:41:08,600
will not be able to patch it right so

00:41:05,120 --> 00:41:09,770
what I would argue is that instead if we

00:41:08,600 --> 00:41:10,850
can allow an application to have

00:41:09,770 --> 00:41:12,830
different versions of different

00:41:10,850 --> 00:41:13,820
libraries you know yeah borrowing some

00:41:12,830 --> 00:41:15,590
of the other problems that we have with

00:41:13,820 --> 00:41:20,840
it as far as like security is concerned

00:41:15,590 --> 00:41:23,150
well you can actually decide to take the

00:41:20,840 --> 00:41:25,010
the module right take the application as

00:41:23,150 --> 00:41:26,780
it gets updated the other thing is that

00:41:25,010 --> 00:41:28,640
if we have a knowledge of those modules

00:41:26,780 --> 00:41:31,010
or those applications kind of in the

00:41:28,640 --> 00:41:33,050
Fedora infrastructure the second CVE

00:41:31,010 --> 00:41:34,880
comes out right it starts the testing

00:41:33,050 --> 00:41:39,860
and the trigger a build and everything

00:41:34,880 --> 00:41:41,990
else it's not like it's not like it was

00:41:39,860 --> 00:41:43,250
again like 20 years ago where you

00:41:41,990 --> 00:41:45,620
basically have to wait for them to ship

00:41:43,250 --> 00:41:47,180
you a CD or something right we can

00:41:45,620 --> 00:41:48,410
actually know about those applications

00:41:47,180 --> 00:41:51,350
particularly with the open source world

00:41:48,410 --> 00:41:53,300
in the actual fedora infrastructure so

00:41:51,350 --> 00:41:55,460
just because there was a cv that came

00:41:53,300 --> 00:41:57,800
out against a particular patch against a

00:41:55,460 --> 00:42:01,010
particular library doesn't mean we can't

00:41:57,800 --> 00:42:03,140
just as quickly get the resolution for

00:42:01,010 --> 00:42:04,730
all the individual applications oh and

00:42:03,140 --> 00:42:07,820
by the way they'll actually have been

00:42:04,730 --> 00:42:10,310
tested to write verses just blindly

00:42:07,820 --> 00:42:12,170
updating the library that makes sense I

00:42:10,310 --> 00:42:13,820
didn't explain that terribly well but

00:42:12,170 --> 00:42:16,670
I'm stressing out because he's yelling

00:42:13,820 --> 00:42:19,610
at me out of time there any is there

00:42:16,670 --> 00:42:22,430
anything else or do we have one more or

00:42:19,610 --> 00:42:25,060
not I don't know what time it is okay

00:42:22,430 --> 00:42:25,060
yeah god shoot

00:42:27,420 --> 00:42:31,270
do you know about original design

00:42:30,040 --> 00:42:35,520
business if they are trying to solve

00:42:31,270 --> 00:42:35,520
similar purpose with majority and so on

00:42:36,450 --> 00:42:41,410
sort of I don't know any other

00:42:39,760 --> 00:42:44,920
distributions that are trying to solve

00:42:41,410 --> 00:42:48,730
the problem from the perspective that

00:42:44,920 --> 00:42:50,590
I'm taking with it I think all of the

00:42:48,730 --> 00:42:52,870
distributions have this problem and do

00:42:50,590 --> 00:42:55,330
various things to try to solve it but

00:42:52,870 --> 00:42:57,610
kind of four different means or with or

00:42:55,330 --> 00:42:59,080
with different goals right so Nick's i

00:42:57,610 --> 00:43:02,380
think is a great example right or

00:42:59,080 --> 00:43:05,860
packager right really but i'm not sure

00:43:02,380 --> 00:43:07,530
the motivations are the same so they may

00:43:05,860 --> 00:43:10,660
not end up with a result we could use

00:43:07,530 --> 00:43:12,460
but I hope like I mean I think this is

00:43:10,660 --> 00:43:13,540
the future right you know the the

00:43:12,460 --> 00:43:15,760
popularity of things like

00:43:13,540 --> 00:43:18,310
containerization you know how the things

00:43:15,760 --> 00:43:21,460
actually get run in the real world one

00:43:18,310 --> 00:43:22,870
vm per application every single RPM in

00:43:21,460 --> 00:43:24,790
the stack for that application is

00:43:22,870 --> 00:43:26,860
rebuilt by the vent by the person who's

00:43:24,790 --> 00:43:29,320
running it why because they don't want

00:43:26,860 --> 00:43:30,940
any updates right they don't want to

00:43:29,320 --> 00:43:33,070
affect that application without it being

00:43:30,940 --> 00:43:34,990
under control why does the sysadmin sit

00:43:33,070 --> 00:43:37,150
down and look at the 20 SI VES that came

00:43:34,990 --> 00:43:39,970
out last night because he only wants to

00:43:37,150 --> 00:43:42,100
pick the ones that he thinks applies but

00:43:39,970 --> 00:43:44,830
how does he know shouldn't you be able

00:43:42,100 --> 00:43:46,780
to just blindly say yum update and magic

00:43:44,830 --> 00:43:49,510
happens right this is kind of the point

00:43:46,780 --> 00:43:53,320
we do all of these workarounds in the

00:43:49,510 --> 00:43:58,620
real world to avoid the fact that we're

00:43:53,320 --> 00:43:58,620
using a distribution so that's my

00:44:07,100 --> 00:44:10,550

YouTube URL: https://www.youtube.com/watch?v=v8H3I3-B7so


