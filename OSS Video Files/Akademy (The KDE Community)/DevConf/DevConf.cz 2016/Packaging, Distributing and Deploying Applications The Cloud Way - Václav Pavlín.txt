Title: Packaging, Distributing and Deploying Applications The Cloud Way - Václav Pavlín
Publication date: 2016-02-11
Playlist: DevConf.cz 2016
Description: 
	Let's talk about containers. Then about multi-container application. Then about orchestration and then wrap it up with how Project Atomic's Nulecule tackles problems stated in the talk.

Presentation: http://bit.ly/20Zyjpu
Captions: 
	00:00:00,000 --> 00:00:05,040
hold for volunteers yeah so everybody

00:00:02,669 --> 00:00:09,059
wanted to just sign up and be a session

00:00:05,040 --> 00:00:10,530
or just you know help with stuff yeah so

00:00:09,059 --> 00:00:17,820
it was for everyone redhead but you know

00:00:10,530 --> 00:00:20,960
we are the most sociable one this car I

00:00:17,820 --> 00:00:20,960
think I can help

00:00:31,099 --> 00:00:43,350
thank you guys a few announcements

00:00:40,820 --> 00:00:46,769
please don't forget to close the door

00:00:43,350 --> 00:00:50,760
gently when you act the room it really

00:00:46,769 --> 00:00:54,989
disturbs the speakers and this room is

00:00:50,760 --> 00:00:57,360
packed for every talk so please shift if

00:00:54,989 --> 00:00:59,760
you have any space to the left or to the

00:00:57,360 --> 00:01:01,530
right please shift and make space so

00:00:59,760 --> 00:01:05,190
it's easier for other people to find

00:01:01,530 --> 00:01:09,840
seeds all right and feel free to tweet

00:01:05,190 --> 00:01:12,420
and blog about this event you can also

00:01:09,840 --> 00:01:16,160
leave feedback for every session on our

00:01:12,420 --> 00:01:16,160
official website thank you very much

00:01:25,450 --> 00:01:29,890
actor Dean a hamachi flesh Oh Anakin

00:01:28,119 --> 00:01:39,689
semester econ process Petero an

00:01:29,890 --> 00:01:42,689
interpolation Marcia share volusia

00:01:39,689 --> 00:01:42,689
freedom

00:02:05,369 --> 00:02:09,899
you're not a course in a Magister

00:03:28,610 --> 00:03:33,950
it still pays more than another tattoo

00:03:31,140 --> 00:03:33,950
your boy

00:03:43,790 --> 00:03:45,849
you

00:05:28,060 --> 00:05:31,360
mrs. Ramos

00:06:24,160 --> 00:06:29,979
some chocolate garnish today launched

00:06:26,840 --> 00:06:29,979
our own initiative Olin

00:06:56,660 --> 00:07:10,800
okay so please sit down and the next

00:07:02,520 --> 00:07:12,750
speaker is watching Pauline good

00:07:10,800 --> 00:07:17,210
afternoon everybody already afternoon it

00:07:12,750 --> 00:07:20,690
seems sorry for getting you out of lunch

00:07:17,210 --> 00:07:23,850
you can go after this talk obviously so

00:07:20,690 --> 00:07:28,080
ugly speaking of vehicle you have heard

00:07:23,850 --> 00:07:30,060
about atomic a political ad be in

00:07:28,080 --> 00:07:33,330
previous presentations it's all about

00:07:30,060 --> 00:07:35,550
containers right so my name is Basha

00:07:33,330 --> 00:07:37,440
Pauline I work for red hat as a platform

00:07:35,550 --> 00:07:39,090
architect and i'm playing with

00:07:37,440 --> 00:07:42,240
containers for more than two years now

00:07:39,090 --> 00:07:45,680
and it's still fun because there is

00:07:42,240 --> 00:07:49,740
still some change that i can investigate

00:07:45,680 --> 00:07:50,910
so I don't go into details about how

00:07:49,740 --> 00:07:53,910
containers work because you already

00:07:50,910 --> 00:07:58,410
heard it a lot so let's take a look at

00:07:53,910 --> 00:08:00,410
container packaging so as I said no we

00:07:58,410 --> 00:08:03,630
are not going to explain doctor again

00:08:00,410 --> 00:08:06,030
and I guess that you all tried to run

00:08:03,630 --> 00:08:09,360
some containers whatever if it was dr.

00:08:06,030 --> 00:08:12,750
or it was Alex C or whatever so I guess

00:08:09,360 --> 00:08:15,150
you have the basic information what was

00:08:12,750 --> 00:08:17,820
what is great about containers is the

00:08:15,150 --> 00:08:20,610
portability you will just pull some

00:08:17,820 --> 00:08:23,010
image to your fedora box and it will be

00:08:20,610 --> 00:08:25,290
Central's image so we'll run it it's

00:08:23,010 --> 00:08:28,560
awesome like you can build on top of any

00:08:25,290 --> 00:08:32,789
basically any system and run it on any

00:08:28,560 --> 00:08:35,280
system an olympic system the image

00:08:32,789 --> 00:08:37,169
itself is pretty simple because it's

00:08:35,280 --> 00:08:43,289
just a root file system and some

00:08:37,169 --> 00:08:46,980
metadata in case of docker it's the

00:08:43,289 --> 00:08:49,350
tarball and some Jason which tells you

00:08:46,980 --> 00:08:53,250
what is the container what is his name

00:08:49,350 --> 00:08:57,120
what is it hash and and what user should

00:08:53,250 --> 00:08:59,520
it run and stuff like that the problem

00:08:57,120 --> 00:09:02,760
if you look at the traditional packaging

00:08:59,520 --> 00:09:05,070
it's all our dependencies right but

00:09:02,760 --> 00:09:06,750
containers have a great packaging you

00:09:05,070 --> 00:09:09,180
can put all the metadata in it but there

00:09:06,750 --> 00:09:11,040
is no dependencies like oh

00:09:09,180 --> 00:09:12,600
there is a standalone unit every image

00:09:11,040 --> 00:09:14,700
is a standalone unit you cannot link

00:09:12,600 --> 00:09:16,260
them together the image you cannot link

00:09:14,700 --> 00:09:19,710
images together you can link containers

00:09:16,260 --> 00:09:21,570
with docker somehow connect them do some

00:09:19,710 --> 00:09:23,550
routes but generally you cannot link

00:09:21,570 --> 00:09:25,410
images together so we could put

00:09:23,550 --> 00:09:28,470
something like this into labels and say

00:09:25,410 --> 00:09:31,320
hey this WordPress image requires Mary

00:09:28,470 --> 00:09:34,790
DB image but which maria DB image how to

00:09:31,320 --> 00:09:38,520
run that image so it's not that easy

00:09:34,790 --> 00:09:41,370
that problem of containers and images of

00:09:38,520 --> 00:09:43,320
docker images is that everybody

00:09:41,370 --> 00:09:47,640
repackages so this is this is a

00:09:43,320 --> 00:09:51,960
screenshot from October last year and it

00:09:47,640 --> 00:09:54,780
was 454 images a docker hub of Maria DB

00:09:51,960 --> 00:09:57,000
if you put Maria DB in a search it gave

00:09:54,780 --> 00:10:01,770
you number like this and this is from

00:09:57,000 --> 00:10:07,560
today the number it's 589 in few months

00:10:01,770 --> 00:10:09,840
we added like 130 images with Mary be

00:10:07,560 --> 00:10:11,850
how is it possible that everybody needs

00:10:09,840 --> 00:10:13,440
a different image for Mary DB it's still

00:10:11,850 --> 00:10:15,540
the same database maybe some versions

00:10:13,440 --> 00:10:18,360
right but maybe some configuration but

00:10:15,540 --> 00:10:20,310
it's a runtime thing so how can we need

00:10:18,360 --> 00:10:21,920
so many images because it's fun to start

00:10:20,310 --> 00:10:25,560
from scratch and learn something and

00:10:21,920 --> 00:10:27,450
there is no documentation so you have no

00:10:25,560 --> 00:10:30,210
idea how to run the thing and if there

00:10:27,450 --> 00:10:32,610
is documentation its its pretty long and

00:10:30,210 --> 00:10:36,630
it's hard to read it and you don't want

00:10:32,610 --> 00:10:38,280
to read it right so these are images and

00:10:36,630 --> 00:10:40,530
containers but then there are small tea

00:10:38,280 --> 00:10:42,570
container applications like you can see

00:10:40,530 --> 00:10:45,390
that there is some nice application and

00:10:42,570 --> 00:10:47,250
if you need more power you were just few

00:10:45,390 --> 00:10:50,280
containers to your engine space right

00:10:47,250 --> 00:10:52,770
and we'll just go faster let's say the

00:10:50,280 --> 00:10:55,320
multi contain applications are two plus

00:10:52,770 --> 00:10:57,240
containers and what you want from that

00:10:55,320 --> 00:10:59,130
is you want to operate them as a single

00:10:57,240 --> 00:11:02,400
unit you don't want to run every single

00:10:59,130 --> 00:11:04,350
container and check if its life if it's

00:11:02,400 --> 00:11:06,750
healthy you want to operate it as a

00:11:04,350 --> 00:11:08,280
single unit and you want to reuse

00:11:06,750 --> 00:11:11,220
existing components because you don't

00:11:08,280 --> 00:11:14,810
want to be here and you want to you

00:11:11,220 --> 00:11:18,630
don't want to repackage everything again

00:11:14,810 --> 00:11:21,960
so how does it work with what does it

00:11:18,630 --> 00:11:22,680
mean operate an application as a single

00:11:21,960 --> 00:11:24,660
unit

00:11:22,680 --> 00:11:28,520
so let's say I want to deploy my get lab

00:11:24,660 --> 00:11:32,820
somewhere so with containers it's like

00:11:28,520 --> 00:11:35,070
get lab container postgresql and Redis

00:11:32,820 --> 00:11:37,020
which will have Freddie's master and

00:11:35,070 --> 00:11:39,330
very slave which is which can be and

00:11:37,020 --> 00:11:42,330
mostly is the same image but have

00:11:39,330 --> 00:11:44,010
different runtime parameters so this is

00:11:42,330 --> 00:11:46,620
the graph that will basically appear

00:11:44,010 --> 00:11:49,529
when you try to run it for example in

00:11:46,620 --> 00:11:52,200
cooper at ease and i want to do this i

00:11:49,529 --> 00:11:54,300
want to do atomic run for example good

00:11:52,200 --> 00:11:58,520
lap and i want to then do atomic stop

00:11:54,300 --> 00:12:02,130
get lab or a restart or whatever and

00:11:58,520 --> 00:12:04,050
reusability so as i said there is a lot

00:12:02,130 --> 00:12:06,000
of content a lot of images that serve

00:12:04,050 --> 00:12:08,970
the same purpose they are a bit

00:12:06,000 --> 00:12:10,560
different but if i were if i'm creating

00:12:08,970 --> 00:12:13,290
an application but i want to do is to

00:12:10,560 --> 00:12:15,660
say hey here is my directory with my

00:12:13,290 --> 00:12:17,190
application with my doctor images from

00:12:15,660 --> 00:12:19,100
application and i want to add new

00:12:17,190 --> 00:12:22,110
dependency and the dependency will be

00:12:19,100 --> 00:12:25,170
postgresql server and readys like in

00:12:22,110 --> 00:12:26,970
good luck example and then in the

00:12:25,170 --> 00:12:29,430
directory for example or somewhere else

00:12:26,970 --> 00:12:31,830
i want to just do atomic run my eye and

00:12:29,430 --> 00:12:34,830
it will start all the all dependencies

00:12:31,830 --> 00:12:36,540
all the containers and I want to have a

00:12:34,830 --> 00:12:38,820
library of these so that I don't have to

00:12:36,540 --> 00:12:40,920
search them somehow weirdly I just want

00:12:38,820 --> 00:12:42,839
to know here's the place that I can use

00:12:40,920 --> 00:12:45,209
all the images and I will know that they

00:12:42,839 --> 00:12:51,450
are maintained and they are well they

00:12:45,209 --> 00:12:53,220
will behave well so this is multi

00:12:51,450 --> 00:12:55,520
container application and then you go

00:12:53,220 --> 00:13:00,330
where to deploy it so you have

00:12:55,520 --> 00:13:02,310
orchestrations right now the

00:13:00,330 --> 00:13:05,220
orchestrations you have a lot of choices

00:13:02,310 --> 00:13:07,579
if openshift is built it's built on the

00:13:05,220 --> 00:13:12,140
varieties but you can use cover IDs

00:13:07,579 --> 00:13:15,870
directly there is terraform mrs. compose

00:13:12,140 --> 00:13:18,870
many many there is no winner yet we add

00:13:15,870 --> 00:13:21,540
redhead like coronaries that's why open

00:13:18,870 --> 00:13:23,730
she chooses them so we hope that will be

00:13:21,540 --> 00:13:26,100
the winner but generally there is no

00:13:23,730 --> 00:13:27,959
winner yet and still everyone tries to

00:13:26,100 --> 00:13:32,010
figure out the best format how to deploy

00:13:27,959 --> 00:13:33,720
the application and if you want to

00:13:32,010 --> 00:13:35,640
deploy the application right now the

00:13:33,720 --> 00:13:36,480
best user experience you can get it's a

00:13:35,640 --> 00:13:40,139
very very long

00:13:36,480 --> 00:13:42,480
me and that read me will tell you do

00:13:40,139 --> 00:13:45,420
this and then start this container then

00:13:42,480 --> 00:13:48,480
change this configuration and then do

00:13:45,420 --> 00:13:52,620
something else and if you go through all

00:13:48,480 --> 00:13:58,350
these 20 25 steps and all goes well your

00:13:52,620 --> 00:14:00,540
application is running but every single

00:13:58,350 --> 00:14:02,490
organization has its own format for for

00:14:00,540 --> 00:14:05,519
metadata and this are separated from the

00:14:02,490 --> 00:14:08,940
images from the actual applications so

00:14:05,519 --> 00:14:14,070
how do you distribute them so probably

00:14:08,940 --> 00:14:17,160
do curl some file samyama file and you

00:14:14,070 --> 00:14:19,470
will keep control that file and it will

00:14:17,160 --> 00:14:20,820
start up some containers but you have an

00:14:19,470 --> 00:14:23,100
idea what is in that you have to

00:14:20,820 --> 00:14:26,730
investigate more you have to read it you

00:14:23,100 --> 00:14:28,680
have to change some values and then you

00:14:26,730 --> 00:14:30,930
maybe have a have an application the

00:14:28,680 --> 00:14:33,149
problem is that how do you distribute it

00:14:30,930 --> 00:14:35,279
another way it's a plain text so how do

00:14:33,149 --> 00:14:37,019
you distribute it you will have a good

00:14:35,279 --> 00:14:39,959
repo you will send it through mail

00:14:37,019 --> 00:14:42,750
that's not very useful that's why

00:14:39,959 --> 00:14:46,380
containers are now popular because dr.

00:14:42,750 --> 00:14:51,149
created a good distribution method for

00:14:46,380 --> 00:14:53,610
containers and another problem or

00:14:51,149 --> 00:14:55,649
another scope of containers is that

00:14:53,610 --> 00:14:58,319
there are multiple environments that you

00:14:55,649 --> 00:15:00,300
want to deploy to so you can have very

00:14:58,319 --> 00:15:03,089
enterprising environment where

00:15:00,300 --> 00:15:04,500
everything fits together and then you

00:15:03,089 --> 00:15:05,970
can have something like this which is my

00:15:04,500 --> 00:15:09,899
development machine everything is messed

00:15:05,970 --> 00:15:13,260
up everything is like haffley halfway

00:15:09,899 --> 00:15:15,240
done maybe it works sometimes it doesn't

00:15:13,260 --> 00:15:18,480
even there is no reason why it shouldn't

00:15:15,240 --> 00:15:19,949
work but generally you have many

00:15:18,480 --> 00:15:21,990
different environments where you want to

00:15:19,949 --> 00:15:24,029
deploy and you can have various

00:15:21,990 --> 00:15:27,180
workflows like here where you have

00:15:24,029 --> 00:15:30,660
development to test to staging to better

00:15:27,180 --> 00:15:31,860
to production and then you might have

00:15:30,660 --> 00:15:33,600
something like this where you skip

00:15:31,860 --> 00:15:35,190
staging and better how do you how do you

00:15:33,600 --> 00:15:38,910
describe the application that needs to

00:15:35,190 --> 00:15:40,740
go through all these stages and and how

00:15:38,910 --> 00:15:43,470
to how do you change parameters because

00:15:40,740 --> 00:15:45,209
you have to change parameters like here

00:15:43,470 --> 00:15:47,939
from the fabricator coup bernardi's

00:15:45,209 --> 00:15:48,499
example where they say hey he's some

00:15:47,939 --> 00:15:50,479
brand

00:15:48,499 --> 00:15:55,129
value and you need to change it to make

00:15:50,479 --> 00:15:57,409
your application work which if you have

00:15:55,129 --> 00:15:59,599
the 20 pages of read me and then it

00:15:57,409 --> 00:16:01,309
contains things like this you probably

00:15:59,599 --> 00:16:02,269
screw something up and your application

00:16:01,309 --> 00:16:03,799
will not start and you will be

00:16:02,269 --> 00:16:08,749
completely pissed off with containers

00:16:03,799 --> 00:16:11,509
and then new liquid comes so what is new

00:16:08,749 --> 00:16:14,979
Michael it's just a specification it's

00:16:11,509 --> 00:16:17,839
just a document so why do I need new

00:16:14,979 --> 00:16:21,289
specification for this if all various

00:16:17,839 --> 00:16:25,849
orchestrations already specify something

00:16:21,289 --> 00:16:28,789
I will get to that its independent on

00:16:25,849 --> 00:16:30,499
container engine so it doesn't tell you

00:16:28,789 --> 00:16:32,719
that you have to use docker or n spawn

00:16:30,499 --> 00:16:35,239
or LXE it just describes your

00:16:32,719 --> 00:16:37,279
application it describes graph for

00:16:35,239 --> 00:16:39,709
application so as i showed the graph for

00:16:37,279 --> 00:16:41,239
a get lab you can describe that you have

00:16:39,709 --> 00:16:44,689
a good love application and it depends

00:16:41,239 --> 00:16:47,479
on postgres and then depends on redace

00:16:44,689 --> 00:16:49,819
and the reddest component then contains

00:16:47,479 --> 00:16:51,259
two other applications basically two

00:16:49,819 --> 00:16:56,269
other components that is master and

00:16:51,259 --> 00:16:58,579
slave and you can parameterize so here

00:16:56,269 --> 00:17:02,539
is the snippet from from some Malakal

00:16:58,579 --> 00:17:06,289
file and it says that there are two

00:17:02,539 --> 00:17:08,929
parameters image and host port it has

00:17:06,289 --> 00:17:11,750
some description and it can it can have

00:17:08,929 --> 00:17:13,309
some default values so if you want to

00:17:11,750 --> 00:17:15,049
just try it you just deploy the

00:17:13,309 --> 00:17:17,389
application and it will use the default

00:17:15,049 --> 00:17:18,649
values if you want to change it you can

00:17:17,389 --> 00:17:20,779
and you can restrict the parameters

00:17:18,649 --> 00:17:24,529
because you want to be sure that the

00:17:20,779 --> 00:17:29,179
porous number for example and they are

00:17:24,529 --> 00:17:31,429
then basically substituted in the

00:17:29,179 --> 00:17:35,299
artifacts like llaman files for Cooper

00:17:31,429 --> 00:17:39,169
Nerys with a simple variables doors

00:17:35,299 --> 00:17:41,750
unbearable replacement and then there

00:17:39,169 --> 00:17:45,830
are answer files so you have these yama

00:17:41,750 --> 00:17:48,619
files that are marked with with the

00:17:45,830 --> 00:17:51,470
variables and you want to provide values

00:17:48,619 --> 00:17:53,830
to the application so this is the answer

00:17:51,470 --> 00:17:56,389
file for application that i showed and

00:17:53,830 --> 00:17:59,539
here is the image that uses sensors

00:17:56,389 --> 00:18:00,909
httpd for some reason for your new

00:17:59,539 --> 00:18:02,330
version of publication you want to use

00:18:00,909 --> 00:18:03,830
fedora

00:18:02,330 --> 00:18:05,779
and you want to change port so we will

00:18:03,830 --> 00:18:07,610
just change it and when you deploy this

00:18:05,779 --> 00:18:09,380
application will be taken in account and

00:18:07,610 --> 00:18:11,809
it will be used and the parameters will

00:18:09,380 --> 00:18:16,010
be changed according to this mmm this

00:18:11,809 --> 00:18:18,140
file and another thing is that as I said

00:18:16,010 --> 00:18:20,809
there is many orchestrators we call them

00:18:18,140 --> 00:18:23,690
providers in your cool and these

00:18:20,809 --> 00:18:25,850
basically are if you implement the

00:18:23,690 --> 00:18:27,590
specification these are the plugins that

00:18:25,850 --> 00:18:30,350
will then deploy your application to a

00:18:27,590 --> 00:18:33,440
specific orchestration so right now

00:18:30,350 --> 00:18:34,940
there is an implementation atomic app I

00:18:33,440 --> 00:18:39,970
will get to that and it supports Cabrera

00:18:34,940 --> 00:18:43,820
DS docker openshift and mrs watson yeah

00:18:39,970 --> 00:18:46,070
so you can specify basically as many as

00:18:43,820 --> 00:18:47,210
many orchestrations se1 you will provide

00:18:46,070 --> 00:18:50,559
the configuration for a specific

00:18:47,210 --> 00:18:53,539
orchestration you can make them inherit

00:18:50,559 --> 00:18:56,240
the configuration if it's if it's common

00:18:53,539 --> 00:18:58,730
for multiple for multiple orchestrations

00:18:56,240 --> 00:19:03,169
and these will be used and parameterize

00:18:58,730 --> 00:19:08,029
to deploy your application and already

00:19:03,169 --> 00:19:10,940
explained this the specification is

00:19:08,029 --> 00:19:12,679
basically if you want to create your

00:19:10,940 --> 00:19:15,649
application you just write am of another

00:19:12,679 --> 00:19:18,320
llaman file and this symbol file is very

00:19:15,649 --> 00:19:20,870
open so you can add more information and

00:19:18,320 --> 00:19:23,960
you can probably create some other use

00:19:20,870 --> 00:19:26,000
cases out of it so you can add metadata

00:19:23,960 --> 00:19:28,370
you can add some other pieces like how

00:19:26,000 --> 00:19:32,120
to build the images and stuff like that

00:19:28,370 --> 00:19:34,250
so it's easy to extend and your your

00:19:32,120 --> 00:19:37,580
tooling can use it for various different

00:19:34,250 --> 00:19:39,649
things and this is how to contribute to

00:19:37,580 --> 00:19:42,380
the specification it's on github there

00:19:39,649 --> 00:19:45,799
is an IRC channel and there is a mailing

00:19:42,380 --> 00:19:49,309
list so if you want to contribute you

00:19:45,799 --> 00:19:51,019
can quite easily and then there is

00:19:49,309 --> 00:19:53,360
implementation of the specification

00:19:51,019 --> 00:19:55,070
because if you have just a mo file and

00:19:53,360 --> 00:19:57,559
you know you don't have anything that

00:19:55,070 --> 00:20:01,220
can work with it you are kind of screwed

00:19:57,559 --> 00:20:04,570
so you need some tool that will take the

00:20:01,220 --> 00:20:07,880
take the application definition and

00:20:04,570 --> 00:20:11,510
deploy it and run it so it's basically

00:20:07,880 --> 00:20:15,230
atomic app is miracle app installer it

00:20:11,510 --> 00:20:16,120
runs in container and it has provided

00:20:15,230 --> 00:20:17,800
plugins as I

00:20:16,120 --> 00:20:20,740
said you can deploy to various

00:20:17,800 --> 00:20:22,470
orchestration orchestrations and there

00:20:20,740 --> 00:20:25,330
is a single command as I showed before

00:20:22,470 --> 00:20:28,480
atomic runs something will let you to

00:20:25,330 --> 00:20:32,200
run the application basically with

00:20:28,480 --> 00:20:34,990
single command it's based on docker so

00:20:32,200 --> 00:20:38,470
we use docker as a packaging format

00:20:34,990 --> 00:20:41,830
basically and as a runtime for the

00:20:38,470 --> 00:20:44,500
atomic app so it's not it's not the only

00:20:41,830 --> 00:20:48,160
way how to do it but it's the easiest

00:20:44,500 --> 00:20:49,510
right now it resolves dependencies as I

00:20:48,160 --> 00:20:51,070
said the problem of containers is that

00:20:49,510 --> 00:20:53,740
you cannot resolve dependencies easily

00:20:51,070 --> 00:20:55,540
so it basically takes takes the

00:20:53,740 --> 00:20:57,730
numerical specification goes through the

00:20:55,540 --> 00:20:59,410
graph pulls all the needed components

00:20:57,730 --> 00:21:01,810
which the component is basically another

00:20:59,410 --> 00:21:04,240
new metal application puts it all

00:21:01,810 --> 00:21:08,890
together and deploys it to an

00:21:04,240 --> 00:21:11,440
Orchestrator it's there's few steps like

00:21:08,890 --> 00:21:13,770
fetch it will download all the things

00:21:11,440 --> 00:21:18,300
then you can install which will

00:21:13,770 --> 00:21:22,330
construct them and prime provider

00:21:18,300 --> 00:21:25,870
plugins initially they used just the

00:21:22,330 --> 00:21:28,810
shell out to shout out to commands that

00:21:25,870 --> 00:21:32,380
you would be using if you want to deploy

00:21:28,810 --> 00:21:34,720
docker containers or uber ad spots right

00:21:32,380 --> 00:21:37,090
now it has been already implemented so

00:21:34,720 --> 00:21:38,350
we'd use it api directly which is much

00:21:37,090 --> 00:21:41,110
better because you don't have the

00:21:38,350 --> 00:21:44,280
version clashes of dr client in an image

00:21:41,110 --> 00:21:48,090
and server on the on the host and

00:21:44,280 --> 00:21:50,470
various crazy things that can happen and

00:21:48,090 --> 00:21:52,410
as I said it's it's packaged in a

00:21:50,470 --> 00:21:54,280
container so you basically deploy your

00:21:52,410 --> 00:21:58,480
containerized application from a

00:21:54,280 --> 00:22:02,260
container so we need more layers right

00:21:58,480 --> 00:22:04,720
like on N or shrek or something there

00:22:02,260 --> 00:22:09,090
are bunch of the crew files which bases

00:22:04,720 --> 00:22:15,340
the atomic a pond on various Oasis or

00:22:09,090 --> 00:22:18,670
distributions and as I said it's it's a

00:22:15,340 --> 00:22:21,730
self execution container so if you if

00:22:18,670 --> 00:22:24,040
you want to run an application first you

00:22:21,730 --> 00:22:26,200
can just use atomic app to see what what

00:22:24,040 --> 00:22:29,110
it does by looking at help just by

00:22:26,200 --> 00:22:30,660
running this image then if you built on

00:22:29,110 --> 00:22:33,880
top of it

00:22:30,660 --> 00:22:36,900
you will just use it as a base image for

00:22:33,880 --> 00:22:39,010
your application which contains the

00:22:36,900 --> 00:22:42,090
artifacts the Yama files for

00:22:39,010 --> 00:22:44,920
orchestrators and the new local file and

00:22:42,090 --> 00:22:49,260
if you then run it it will automatically

00:22:44,920 --> 00:22:49,260
find the content and and deploy it

00:22:49,830 --> 00:22:56,140
basically like this with atomic you can

00:22:53,080 --> 00:22:59,860
use labels so this is the run label I

00:22:56,140 --> 00:23:02,440
think it has changed since I created

00:22:59,860 --> 00:23:04,510
this slide but it will be very similar

00:23:02,440 --> 00:23:07,090
so you basically run the container it

00:23:04,510 --> 00:23:09,790
knows that there is a directory / atomic

00:23:07,090 --> 00:23:13,120
app and it will look at the directory

00:23:09,790 --> 00:23:16,690
and will start start the deployment so

00:23:13,120 --> 00:23:18,850
instead of you having to come up with

00:23:16,690 --> 00:23:20,890
some way or installing some to link you

00:23:18,850 --> 00:23:24,460
will just pull the container and do it

00:23:20,890 --> 00:23:28,330
to make run and again it's same as

00:23:24,460 --> 00:23:31,210
formula cool it's it's and it's it's on

00:23:28,330 --> 00:23:33,250
github it's a it has a mailing list

00:23:31,210 --> 00:23:37,300
container tools which is a team that is

00:23:33,250 --> 00:23:40,060
working on that and it has an IRC

00:23:37,300 --> 00:23:42,370
channel or it shares in IRC channel with

00:23:40,060 --> 00:23:46,210
Nicole and there is another thing that's

00:23:42,370 --> 00:23:49,210
called a DB atomic developer bundle

00:23:46,210 --> 00:23:51,040
development bundle sure and it's

00:23:49,210 --> 00:23:54,910
basically toolbox you have heard about

00:23:51,040 --> 00:23:56,500
it from colon earlier and it's a it's a

00:23:54,910 --> 00:23:58,060
great thing because if you want to

00:23:56,500 --> 00:24:00,550
develop containerized application the

00:23:58,060 --> 00:24:03,160
biggest problem i have always when I

00:24:00,550 --> 00:24:05,080
star is that I need to deploy coburn

00:24:03,160 --> 00:24:07,180
ADIZ or open shift or something

00:24:05,080 --> 00:24:10,720
somewhere that so that I can test my

00:24:07,180 --> 00:24:12,780
application so this tool or this this

00:24:10,720 --> 00:24:14,800
project allows you to run these

00:24:12,780 --> 00:24:19,660
orchestrations various orchestrations

00:24:14,800 --> 00:24:21,640
easily in vagrant box so what you can do

00:24:19,660 --> 00:24:25,030
is just download vagrant file or git

00:24:21,640 --> 00:24:27,160
clone the repository do vagrant up ssh

00:24:25,030 --> 00:24:29,850
in and you have running coburn ADIZ you

00:24:27,160 --> 00:24:32,860
can download different variant file a

00:24:29,850 --> 00:24:36,070
stationary of running open shift be free

00:24:32,860 --> 00:24:41,560
origin and it works I've tested it last

00:24:36,070 --> 00:24:43,250
week it's absolutely perfect there is a

00:24:41,560 --> 00:24:45,710
lot of documentation they

00:24:43,250 --> 00:24:47,810
adb it suggests how to use it how to

00:24:45,710 --> 00:24:52,010
create applications the containerized

00:24:47,810 --> 00:24:54,290
applications and allows you to easily

00:24:52,010 --> 00:24:56,600
use the vagrant files because there is

00:24:54,290 --> 00:25:01,510
how to install vagrant and all these all

00:24:56,600 --> 00:25:03,770
these things that you need to start so

00:25:01,510 --> 00:25:05,840
basically what was the what was the

00:25:03,770 --> 00:25:10,250
purpose of this talk to summarize it

00:25:05,840 --> 00:25:12,200
I've wrote it down on my blog for things

00:25:10,250 --> 00:25:14,480
that no a code tries to solve is the

00:25:12,200 --> 00:25:15,770
parameterization so if you need to take

00:25:14,480 --> 00:25:17,060
your replication and move it somewhere

00:25:15,770 --> 00:25:20,660
else he will have to change some

00:25:17,060 --> 00:25:23,360
parameters some environment variables in

00:25:20,660 --> 00:25:25,220
containers and and all these things so

00:25:23,360 --> 00:25:26,420
this is what molecules will help you if

00:25:25,220 --> 00:25:27,590
you can define the parameters for

00:25:26,420 --> 00:25:29,030
application and the user of the

00:25:27,590 --> 00:25:31,850
application will be able to easily

00:25:29,030 --> 00:25:36,770
change these parameters reusability if

00:25:31,850 --> 00:25:38,390
you take a bunch of containers and you

00:25:36,770 --> 00:25:41,570
don't know what they are and how to use

00:25:38,390 --> 00:25:43,880
them you cannot use them basically so

00:25:41,570 --> 00:25:47,150
you likkle adds layer on top of those

00:25:43,880 --> 00:25:49,810
and lets you to define how to use the

00:25:47,150 --> 00:25:52,370
container easily and then and then

00:25:49,810 --> 00:25:56,330
basically create a library or something

00:25:52,370 --> 00:25:57,740
that will that will serve you as the

00:25:56,330 --> 00:26:00,800
components of foreign for new

00:25:57,740 --> 00:26:03,710
applications it lets you to take care of

00:26:00,800 --> 00:26:07,070
multiple orchestrations at once so you

00:26:03,710 --> 00:26:09,680
don't have to you don't have to have a

00:26:07,070 --> 00:26:11,540
various git repos for Coburn ADIZ and

00:26:09,680 --> 00:26:13,400
open shift and marathon you can all

00:26:11,540 --> 00:26:16,790
packaged it into a single image that

00:26:13,400 --> 00:26:19,850
will run when you run it it will deploy

00:26:16,790 --> 00:26:21,550
to a given provider and it solves the

00:26:19,850 --> 00:26:24,440
distribution of these artifacts so if

00:26:21,550 --> 00:26:27,470
you want to distribute the AMA files you

00:26:24,440 --> 00:26:30,410
can do that its gate but it's not always

00:26:27,470 --> 00:26:32,840
convenient you want to do it in a single

00:26:30,410 --> 00:26:34,370
way so if you dip if you distribute your

00:26:32,840 --> 00:26:36,830
applications docker containers you want

00:26:34,370 --> 00:26:40,190
to probably distribute your

00:26:36,830 --> 00:26:45,290
configuration for for orchestrations as

00:26:40,190 --> 00:26:48,260
a docker container too so what you

00:26:45,290 --> 00:26:50,720
should do now you should probably read

00:26:48,260 --> 00:26:52,910
about it more other it's it's all under

00:26:50,720 --> 00:26:55,070
project atomic so if you go to project

00:26:52,910 --> 00:26:56,930
atomic that I oh you will see a lot of

00:26:55,070 --> 00:26:59,510
fancy demos there

00:26:56,930 --> 00:27:03,110
blog posts and things like that you

00:26:59,510 --> 00:27:05,480
should play that so you just do vagrant

00:27:03,110 --> 00:27:09,110
up with the vagrant file that i have a

00:27:05,480 --> 00:27:11,150
link in my slides too and you can try it

00:27:09,110 --> 00:27:13,280
and you probably should contribute

00:27:11,150 --> 00:27:15,230
because you have the experience with

00:27:13,280 --> 00:27:17,900
deploying and developing the container

00:27:15,230 --> 00:27:20,920
application so you might have a have a

00:27:17,900 --> 00:27:24,050
word in how it should be done here and

00:27:20,920 --> 00:27:28,220
what you do what you should do not right

00:27:24,050 --> 00:27:30,640
now but just after basically after not

00:27:28,220 --> 00:27:34,550
after at all but this afternoon sorry

00:27:30,640 --> 00:27:36,200
Tomaj growl is having a workshop how to

00:27:34,550 --> 00:27:38,090
using like a drama kept and he will tell

00:27:36,200 --> 00:27:40,280
you how to package all the stuff into

00:27:38,090 --> 00:27:42,920
new like holes and how to use that and

00:27:40,280 --> 00:27:45,890
how it all works I want you to show your

00:27:42,920 --> 00:27:47,750
demo but my vagrant works failed and I

00:27:45,890 --> 00:27:50,540
was not able to download all the images

00:27:47,750 --> 00:27:52,790
again on this on the connection here so

00:27:50,540 --> 00:27:56,060
I'm sorry I cannot give you a demo of

00:27:52,790 --> 00:27:59,030
atomic app and you at all and that's it

00:27:56,060 --> 00:28:04,490
only thing that I can I can demo is

00:27:59,030 --> 00:28:10,820
basically the is basically the vagrant

00:28:04,490 --> 00:28:13,460
box so i have a vagrant file here that

00:28:10,820 --> 00:28:14,990
is downloaded from the adb github

00:28:13,460 --> 00:28:17,780
repository and you can see that there is

00:28:14,990 --> 00:28:20,770
some shell script that what it does is

00:28:17,780 --> 00:28:25,130
that it starts and setups the cooper IDs

00:28:20,770 --> 00:28:31,550
it's not very hard to do so we can try

00:28:25,130 --> 00:28:34,850
to start it and see if it all works and

00:28:31,550 --> 00:28:36,710
i wanted to show that cabrera DS is one

00:28:34,850 --> 00:28:38,330
thing but then there is open shift and

00:28:36,710 --> 00:28:41,090
to start opening shift it's not that

00:28:38,330 --> 00:28:44,660
easy like to start it it's very easy but

00:28:41,090 --> 00:28:47,990
to set up it properly is it's not that

00:28:44,660 --> 00:28:50,690
easy but these guys the container tools

00:28:47,990 --> 00:28:52,820
team make it very easy for you so with a

00:28:50,690 --> 00:28:55,970
single command you can run open shift

00:28:52,820 --> 00:28:58,790
and deploy s2i images and all all the

00:28:55,970 --> 00:29:01,610
things and there is also a marathon

00:28:58,790 --> 00:29:04,250
which is the play deployed through

00:29:01,610 --> 00:29:07,480
uncibal in the vagrant box so i think

00:29:04,250 --> 00:29:07,480
this is that that's pretty cool

00:29:07,620 --> 00:29:20,380
here we go it started so if I just

00:29:13,750 --> 00:29:22,780
looking in Utila it notes so i will see

00:29:20,380 --> 00:29:26,260
that my local hospital kookaburra DS

00:29:22,780 --> 00:29:30,250
node is running and i can see that i

00:29:26,260 --> 00:29:32,800
actually tried to start it but it failed

00:29:30,250 --> 00:29:35,980
because it couldn't it couldn't download

00:29:32,800 --> 00:29:40,750
images so maybe maybe you will see that

00:29:35,980 --> 00:29:43,120
at at tomorrow's presentation workshop

00:29:40,750 --> 00:29:47,970
it will probably work for him better and

00:29:43,120 --> 00:29:53,610
for me ok so if there are any questions

00:29:47,970 --> 00:29:53,610
I'd be happy to answer them it's going

00:30:09,900 --> 00:30:13,960
yeah that's that's a good question so

00:30:12,070 --> 00:30:16,780
what is the status of other providers

00:30:13,960 --> 00:30:20,380
and if there are any feedback on using

00:30:16,780 --> 00:30:22,080
other providers I am NOT I'm not

00:30:20,380 --> 00:30:26,470
interested because I wasn't following

00:30:22,080 --> 00:30:29,730
the issues lately so the status is that

00:30:26,470 --> 00:30:32,920
it should all work and it was basically

00:30:29,730 --> 00:30:34,990
the open shift is very good example like

00:30:32,920 --> 00:30:37,390
you can deploy to cover Eddie's you can

00:30:34,990 --> 00:30:39,940
deploy it to open shift at the same time

00:30:37,390 --> 00:30:41,710
but if you want to add more to it you

00:30:39,940 --> 00:30:43,240
need some other files that would be

00:30:41,710 --> 00:30:45,580
wouldn't be used for Cabrera nice that's

00:30:43,240 --> 00:30:47,560
why you right at the statute moment you

00:30:45,580 --> 00:30:50,860
need two different ways how to deploy

00:30:47,560 --> 00:30:52,960
things then there is dr. provider which

00:30:50,860 --> 00:30:55,150
is basically for testing because if you

00:30:52,960 --> 00:30:57,280
don't have your EML files for Cooper

00:30:55,150 --> 00:30:59,560
knees yet you want to try it with docker

00:30:57,280 --> 00:31:01,570
if your application will go up and if

00:30:59,560 --> 00:31:04,150
you link it together if it work if it

00:31:01,570 --> 00:31:07,120
works and there's a mrs. provider that

00:31:04,150 --> 00:31:10,150
tomorrow I haven't tried that I have no

00:31:07,120 --> 00:31:12,310
idea I haven't tried missiles at all so

00:31:10,150 --> 00:31:14,710
I don't know but I guess it works I know

00:31:12,310 --> 00:31:17,850
if you have any any feedback for for

00:31:14,710 --> 00:31:17,850
these providers

00:31:19,650 --> 00:31:25,090
yeah so karate is an open shift are the

00:31:22,210 --> 00:31:26,380
most used providers and I know that

00:31:25,090 --> 00:31:28,480
there is integration with open shift

00:31:26,380 --> 00:31:31,680
already so if you do OC new app and

00:31:28,480 --> 00:31:34,600
provide a new local to it it will start

00:31:31,680 --> 00:31:36,700
the you don't have to use the atomic app

00:31:34,600 --> 00:31:39,160
you can use OC command open shift

00:31:36,700 --> 00:31:42,190
command to start the application to

00:31:39,160 --> 00:31:45,190
create application inside inside open

00:31:42,190 --> 00:31:47,050
 directly so there is there is work

00:31:45,190 --> 00:31:51,570
in progress on this integration but I

00:31:47,050 --> 00:31:51,570
think it works right now pretty well

00:32:10,560 --> 00:32:17,500
yeah so basically basically the question

00:32:15,250 --> 00:32:20,920
is if we can use miracle to modularize

00:32:17,500 --> 00:32:22,660
fedora basically using containers to

00:32:20,920 --> 00:32:25,330
modularize for ice one of the approaches

00:32:22,660 --> 00:32:27,940
that people are looking at looking at so

00:32:25,330 --> 00:32:30,910
creating these containers in a way that

00:32:27,940 --> 00:32:34,360
they can be reused is goal for that so

00:32:30,910 --> 00:32:36,660
you cannot just ask every user to build

00:32:34,360 --> 00:32:39,430
their own containers and create them so

00:32:36,660 --> 00:32:40,900
you would need some way how to describe

00:32:39,430 --> 00:32:43,570
the container so that it can burns

00:32:40,900 --> 00:32:46,120
easily on fedora I know there was some

00:32:43,570 --> 00:32:48,310
work on the role kit if you heard about

00:32:46,120 --> 00:32:51,580
this project basically lets you create

00:32:48,310 --> 00:32:54,070
set set your machine to some role so for

00:32:51,580 --> 00:32:59,490
example domain name server node minister

00:32:54,070 --> 00:33:02,830
ik server the web server various roles

00:32:59,490 --> 00:33:05,440
and it there was some work going on to

00:33:02,830 --> 00:33:08,290
integrate new local in it so that you

00:33:05,440 --> 00:33:10,690
can either deploy natively as rpm

00:33:08,290 --> 00:33:14,410
packages and some set up or you can

00:33:10,690 --> 00:33:16,750
deploy in containers vehicle so this is

00:33:14,410 --> 00:33:20,590
one thing that that we are looking into

00:33:16,750 --> 00:33:22,300
and it might be a good case how to how

00:33:20,590 --> 00:33:25,500
to contain their eyes furthermore and

00:33:22,300 --> 00:33:25,500
how to make varsity ball

00:33:29,850 --> 00:33:37,770
I don't want to it's it's new Michael if

00:33:35,140 --> 00:33:43,120
you want I can I can probably go back to

00:33:37,770 --> 00:33:46,630
the first slide so that you can see see

00:33:43,120 --> 00:33:50,650
it written it's it's taken from simpsons

00:33:46,630 --> 00:33:52,720
and it's when the new like a leaf it's

00:33:50,650 --> 00:34:03,120
nice that's where it all starts for

00:33:52,720 --> 00:34:03,120
items and things like that about what

00:34:03,390 --> 00:34:16,090
aha okay okay yes so it uses the crew

00:34:13,929 --> 00:34:17,649
containers so na dr. registry is

00:34:16,090 --> 00:34:20,020
basically registry for new Michaels the

00:34:17,649 --> 00:34:22,600
only thing that is missing is some kind

00:34:20,020 --> 00:34:24,820
of meta data servers for registry that

00:34:22,600 --> 00:34:27,760
will let you to search through these

00:34:24,820 --> 00:34:30,129
without having to specify a specific tag

00:34:27,760 --> 00:34:33,280
so right now you have to tag your image

00:34:30,129 --> 00:34:35,530
and that's only way how to search in dr.

00:34:33,280 --> 00:34:36,879
registries so if you want to use more

00:34:35,530 --> 00:34:39,370
metadata I will have to have some

00:34:36,879 --> 00:34:42,000
metadata service I did some proof of

00:34:39,370 --> 00:34:44,919
concept that basically lets you to list

00:34:42,000 --> 00:34:48,639
list all the new locals in some library

00:34:44,919 --> 00:34:50,830
it was based on gate and registry there

00:34:48,639 --> 00:34:53,639
are plans for that for for some for some

00:34:50,830 --> 00:34:58,180
kind of index and new local registry

00:34:53,639 --> 00:35:01,090
incentives as far as I know and it is

00:34:58,180 --> 00:35:03,340
possible though I don't think that

00:35:01,090 --> 00:35:06,670
anybody put a lot of effort in that

00:35:03,340 --> 00:35:09,010
right now so the distribution part uses

00:35:06,670 --> 00:35:11,470
normal doc registry if you want to list

00:35:09,010 --> 00:35:13,270
it and go through it and see some

00:35:11,470 --> 00:35:14,710
details you would have to implement

00:35:13,270 --> 00:35:17,200
something on top of that will analyze

00:35:14,710 --> 00:35:27,870
the files and put them in some database

00:35:17,200 --> 00:35:27,870
or something okay anything else yes

00:35:29,790 --> 00:35:39,910
about what security patching so I don't

00:35:36,880 --> 00:35:42,460
think that this is it's the question is

00:35:39,910 --> 00:35:46,990
sorry the question is what I think about

00:35:42,460 --> 00:35:48,670
security patching of containers I think

00:35:46,990 --> 00:35:50,710
it's needed though i don't think that

00:35:48,670 --> 00:35:53,380
miracle will basically help you with

00:35:50,710 --> 00:35:55,660
that because you would have to what you

00:35:53,380 --> 00:35:57,430
want to probably do is to take a look at

00:35:55,660 --> 00:35:59,800
the host see what containers are there

00:35:57,430 --> 00:36:04,600
and see if those are the latest version

00:35:59,800 --> 00:36:06,220
that you need to use to be secure so if

00:36:04,600 --> 00:36:07,450
you already deployed your application

00:36:06,220 --> 00:36:09,400
you can get some kind of notification

00:36:07,450 --> 00:36:11,700
that there is outdated containers I

00:36:09,400 --> 00:36:14,380
think there are some work going on

00:36:11,700 --> 00:36:17,320
around this in project atomic as well so

00:36:14,380 --> 00:36:21,910
atomic status or something will give you

00:36:17,320 --> 00:36:24,190
the idea and but but I don't think that

00:36:21,910 --> 00:36:26,710
we can somehow help it here like you can

00:36:24,190 --> 00:36:29,260
sit you can say we can we can add some

00:36:26,710 --> 00:36:31,630
versioning or more more specific

00:36:29,260 --> 00:36:34,780
versioning to the Yama files through new

00:36:31,630 --> 00:36:37,330
local files but it would require other

00:36:34,780 --> 00:36:41,700
tooling to to basically restart

00:36:37,330 --> 00:36:45,480
containers and redeployed application

00:36:41,700 --> 00:36:45,480
with the latest containers

00:36:58,870 --> 00:37:06,680
right so if the question is whether we

00:37:02,990 --> 00:37:09,500
only use a tag for dependencies or if we

00:37:06,680 --> 00:37:11,810
can use something like I require

00:37:09,500 --> 00:37:15,310
database and I don't care which one it

00:37:11,810 --> 00:37:19,070
is that's a good question we right now

00:37:15,310 --> 00:37:21,890
the dependencies can be only specified

00:37:19,070 --> 00:37:25,040
by the tag by the by basically by link

00:37:21,890 --> 00:37:26,930
to another local component but I think

00:37:25,040 --> 00:37:29,000
we already taught about it how we could

00:37:26,930 --> 00:37:31,190
how we could do that but that thing

00:37:29,000 --> 00:37:33,980
would require the meta later service

00:37:31,190 --> 00:37:36,620
that there was the question before if we

00:37:33,980 --> 00:37:40,910
can have some registry for miracles

00:37:36,620 --> 00:37:43,880
because if you cannot investigate the

00:37:40,910 --> 00:37:45,670
the metadata of the application you

00:37:43,880 --> 00:37:48,500
cannot then say okay this provides

00:37:45,670 --> 00:37:51,590
database so first thing we would have to

00:37:48,500 --> 00:37:53,120
have the library the real library and

00:37:51,590 --> 00:37:55,610
metadata server that would provide this

00:37:53,120 --> 00:37:57,050
information and then we can then we can

00:37:55,610 --> 00:38:01,750
do something like this but it's a it

00:37:57,050 --> 00:38:01,750
would be a great use case to have this

00:38:03,880 --> 00:38:11,690
okay I don't think there are any more

00:38:07,670 --> 00:38:14,080
questions so thank you a lot sorry for a

00:38:11,690 --> 00:38:14,080
short call

00:39:59,160 --> 00:40:08,880
for us house what about what I want

00:40:18,180 --> 00:40:20,750

YouTube URL: https://www.youtube.com/watch?v=9-XWtDR7irw


