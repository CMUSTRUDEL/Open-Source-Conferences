Title: Developers, QEs of themselves - Jaroslav Mracek, Jan Å ilhan
Publication date: 2016-02-11
Playlist: DevConf.cz 2016
Description: 
	The talk will be about test work flow used for DNF project. The presentation should inspire developers to have checked pull requests and upstream branches of open source projects by successful package built, unit tests, functional tests and linters. The talk will cover technologies like Jenkins, docker, python-behave, flake8-diff and COPR.

Presentation: http://bit.ly/1mx7hGA
Captions: 
	00:03:48,390 --> 00:03:54,670
thank you for introduction I hope you

00:03:51,730 --> 00:03:57,700
hear me welcome to the presentation

00:03:54,670 --> 00:04:00,790
developers to use of themselves will be

00:03:57,700 --> 00:04:03,040
mainly targeted for upstream developers

00:04:00,790 --> 00:04:05,650
who don't have any queries and would

00:04:03,040 --> 00:04:10,090
like to deliver stable releases with

00:04:05,650 --> 00:04:13,660
minimal effort we will explain how the

00:04:10,090 --> 00:04:17,400
continuous integration look like for dnf

00:04:13,660 --> 00:04:22,450
package manager during the presentation

00:04:17,400 --> 00:04:24,820
do not hesitate to ask abou anything if

00:04:22,450 --> 00:04:30,810
you have any questions please just raise

00:04:24,820 --> 00:04:30,810
your hand or if you are shy you can ask

00:04:31,080 --> 00:04:40,710
something afterwards to DNF team there's

00:04:35,710 --> 00:04:40,710
a demurrer check and we have shown

00:04:42,460 --> 00:04:48,530
this dog will be split into two parts

00:04:45,350 --> 00:04:52,580
the first part will be colored by me and

00:04:48,530 --> 00:04:55,910
is about how the whole process of the

00:04:52,580 --> 00:04:59,810
testing workflow looks like and which

00:04:55,910 --> 00:05:02,270
technologies we have used and why the

00:04:59,810 --> 00:05:04,610
last part will be about integration

00:05:02,270 --> 00:05:10,340
testing which is the sub part of the

00:05:04,610 --> 00:05:14,150
whole process at first I would like to

00:05:10,340 --> 00:05:17,480
ask you or do some research please raise

00:05:14,150 --> 00:05:21,320
your hand everybody who is developing

00:05:17,480 --> 00:05:24,290
some app screen project perfect it's

00:05:21,320 --> 00:05:27,590
about health of the people so I'm right

00:05:24,290 --> 00:05:29,990
at a developer conference and the next

00:05:27,590 --> 00:05:32,840
question who of you who are developers

00:05:29,990 --> 00:05:37,580
have continuous integration to integrate

00:05:32,840 --> 00:05:41,330
it to your project that's about

00:05:37,580 --> 00:05:44,780
one-third of the developers so that's

00:05:41,330 --> 00:05:48,670
enough so deuce of you who already have

00:05:44,780 --> 00:05:52,880
some continuous integration tool you can

00:05:48,670 --> 00:05:57,290
learn about new concepts and tools which

00:05:52,880 --> 00:05:59,180
we use and deuce of you who don't have

00:05:57,290 --> 00:06:03,440
continuous integration already you can

00:05:59,180 --> 00:06:08,000
adapt our tool ok and the last question

00:06:03,440 --> 00:06:13,190
who ever released the broken application

00:06:08,000 --> 00:06:14,840
to the customers yeah it's about the

00:06:13,190 --> 00:06:17,300
same amal did have continuous

00:06:14,840 --> 00:06:21,140
integration tool I don't think that's a

00:06:17,300 --> 00:06:23,180
coincidence we already did that and it's

00:06:21,140 --> 00:06:25,460
kind of said that it happens to package

00:06:23,180 --> 00:06:27,890
manager they should update your system

00:06:25,460 --> 00:06:30,110
how can you upgrade the package manager

00:06:27,890 --> 00:06:33,020
to the new release if you can upgrade at

00:06:30,110 --> 00:06:36,440
all so there's the motivation to prevent

00:06:33,020 --> 00:06:40,220
broken releases when you have more

00:06:36,440 --> 00:06:45,080
contributors to your project you spend

00:06:40,220 --> 00:06:46,880
more time to testing these requests but

00:06:45,080 --> 00:06:48,650
you can rather spend the time on

00:06:46,880 --> 00:06:50,860
developing cool features of your

00:06:48,650 --> 00:06:56,560
application itself

00:06:50,860 --> 00:06:59,789
so invest on automated tasks at this

00:06:56,560 --> 00:07:03,340
slide we can see the whole process

00:06:59,789 --> 00:07:07,379
everything begins when someone some

00:07:03,340 --> 00:07:10,419
contribute to do requests at github or

00:07:07,379 --> 00:07:13,270
anybody much is a new comment to the

00:07:10,419 --> 00:07:17,560
upstream there the package build is

00:07:13,270 --> 00:07:19,719
triggered while we are building RPM

00:07:17,560 --> 00:07:24,639
package inside our continuous

00:07:19,719 --> 00:07:27,550
integration is the reason is that then

00:07:24,639 --> 00:07:31,389
we are sure that we can do another

00:07:27,550 --> 00:07:33,669
release immediately and that the package

00:07:31,389 --> 00:07:37,800
build pass as a side product of this

00:07:33,669 --> 00:07:41,379
build we get the unit test checked and

00:07:37,800 --> 00:07:46,000
once we have the RPM packages we can put

00:07:41,379 --> 00:07:48,580
it into our integration test system this

00:07:46,000 --> 00:07:52,360
is this examine eight by black box

00:07:48,580 --> 00:07:56,650
testing the whole application the last

00:07:52,360 --> 00:08:01,120
of the test is static occur that checks

00:07:56,650 --> 00:08:03,400
for some redundancies or some violations

00:08:01,120 --> 00:08:07,060
of the code so you can purchase the

00:08:03,400 --> 00:08:10,300
maintainable code if this process

00:08:07,060 --> 00:08:13,960
happened by pushing some new page to the

00:08:10,300 --> 00:08:16,539
upstream we also stored at rpm packages

00:08:13,960 --> 00:08:22,839
and serve them to the users as night

00:08:16,539 --> 00:08:28,539
levels in this slide there's described

00:08:22,839 --> 00:08:33,370
the whole technologies we use the Corp

00:08:28,539 --> 00:08:37,060
on the core component is Jenkins that

00:08:33,370 --> 00:08:42,810
actually is continuous integration tool

00:08:37,060 --> 00:08:45,279
that automates the task we have our

00:08:42,810 --> 00:08:48,640
projects from the NF echo system on

00:08:45,279 --> 00:08:51,940
github and five of them are integrated

00:08:48,640 --> 00:08:55,140
into continuous integration tool so

00:08:51,940 --> 00:08:58,560
everything is new

00:08:55,140 --> 00:09:01,110
Boruc that's triggered it runs the

00:08:58,560 --> 00:09:07,410
Jenkins job and records a very reclusive

00:09:01,110 --> 00:09:10,160
Lee rebuilds the other packages with

00:09:07,410 --> 00:09:13,050
regard to package build we are using

00:09:10,160 --> 00:09:17,070
dito definition there's a tool that

00:09:13,050 --> 00:09:20,550
automates the releases with that you can

00:09:17,070 --> 00:09:23,580
buy one single same command line build

00:09:20,550 --> 00:09:26,460
the RPM packages of any of these

00:09:23,580 --> 00:09:30,560
projects you have to just have one

00:09:26,460 --> 00:09:34,200
folder inside each of the project I

00:09:30,560 --> 00:09:37,250
forget to mention that we use a Jenkins

00:09:34,200 --> 00:09:40,770
github pull request builder plug-in

00:09:37,250 --> 00:09:43,680
you'll need to have this to have your

00:09:40,770 --> 00:09:46,890
pull request checked Jenkins has many of

00:09:43,680 --> 00:09:51,800
these plugins and unlike for example

00:09:46,890 --> 00:09:54,390
Travis CI Jenkins is not a service you

00:09:51,800 --> 00:09:58,530
need to host its under on some server

00:09:54,390 --> 00:10:01,410
and we use OpenStack for them okay let's

00:09:58,530 --> 00:10:04,050
move to the lower part which is

00:10:01,410 --> 00:10:06,660
dedicated to the testing be around viton

00:10:04,050 --> 00:10:08,850
unit tests with some looking but we

00:10:06,660 --> 00:10:12,300
realized we need also some integration

00:10:08,850 --> 00:10:15,050
tests and for that we are using the

00:10:12,300 --> 00:10:19,650
technology do have is a level

00:10:15,050 --> 00:10:22,140
reproducible environment for static code

00:10:19,650 --> 00:10:26,640
analysis we are using web eight and by

00:10:22,140 --> 00:10:30,240
flags which it can find any violations

00:10:26,640 --> 00:10:33,900
against webpage tanta standard in iton

00:10:30,240 --> 00:10:37,440
and by flakes can find some redundancies

00:10:33,900 --> 00:10:42,540
of the code or some coding that leads to

00:10:37,440 --> 00:10:46,290
error-prone code base so that's for the

00:10:42,540 --> 00:10:49,740
technologies we have used i would like

00:10:46,290 --> 00:10:52,530
you to take two ideas from this

00:10:49,740 --> 00:10:57,210
presentation do not think like testing

00:10:52,530 --> 00:11:00,630
and invest your time in manually task

00:10:57,210 --> 00:11:02,910
that you do repeatedly and we invest

00:11:00,630 --> 00:11:05,069
time to automate this task it will pay

00:11:02,910 --> 00:11:10,480
off in the feature

00:11:05,069 --> 00:11:14,050
you can reuse our whole dnf testing

00:11:10,480 --> 00:11:16,680
framework for your own project there

00:11:14,050 --> 00:11:20,709
will be laying at the end of the slides

00:11:16,680 --> 00:11:23,709
now I would like to invite jaroslava

00:11:20,709 --> 00:11:26,850
check with the creator of tnf

00:11:23,709 --> 00:11:26,850
integration test

00:11:58,499 --> 00:12:05,619
okay hi everyone Thank You ones are for

00:12:01,540 --> 00:12:07,749
interaction me and I would like to I

00:12:05,619 --> 00:12:12,189
have a great pleasure to present hear

00:12:07,749 --> 00:12:15,569
something about functional testing well

00:12:12,189 --> 00:12:18,490
in general just if you think about the

00:12:15,569 --> 00:12:20,259
testing of your project I think you

00:12:18,490 --> 00:12:23,529
start to think about you know to test

00:12:20,259 --> 00:12:28,209
each commit separately after when you

00:12:23,529 --> 00:12:31,569
marriage it try to test each nightly

00:12:28,209 --> 00:12:35,439
build or to make a test before you make

00:12:31,569 --> 00:12:38,850
a release I just think about is this

00:12:35,439 --> 00:12:43,110
really do all what you want to do

00:12:38,850 --> 00:12:47,679
probably you can just have a dream that

00:12:43,110 --> 00:12:51,759
you can ask contributors you know to

00:12:47,679 --> 00:12:53,889
pass all the tests before they make a

00:12:51,759 --> 00:12:58,089
pull request that will be really dream

00:12:53,889 --> 00:13:00,339
but we can dream all about but if you

00:12:58,089 --> 00:13:02,920
want to wish to have a dream that will

00:13:00,339 --> 00:13:05,679
become true somehow we have to pay for

00:13:02,920 --> 00:13:08,620
it you have to offer them you have to

00:13:05,679 --> 00:13:11,620
offer them something what they will say

00:13:08,620 --> 00:13:14,649
okay I mean did not offer like that they

00:13:11,620 --> 00:13:16,899
cannot refuse but the offer that they

00:13:14,649 --> 00:13:18,759
will accept because they want yeah

00:13:16,899 --> 00:13:21,550
therefore you have to start to think

00:13:18,759 --> 00:13:25,540
what they would like you like that they

00:13:21,550 --> 00:13:28,839
will make a locally test okay okay they

00:13:25,540 --> 00:13:32,860
probably like that they will have local

00:13:28,839 --> 00:13:36,670
builds well automatic local builds but

00:13:32,860 --> 00:13:39,069
at a certain time yeah you think okay

00:13:36,670 --> 00:13:41,410
probably they will like to have a

00:13:39,069 --> 00:13:44,819
testing environment they do not

00:13:41,410 --> 00:13:50,319
interfere with the own system well I

00:13:44,819 --> 00:13:53,079
will try to cover in my talk both the

00:13:50,319 --> 00:13:55,240
first I will just repeat was going now

00:13:53,079 --> 00:13:57,429
workflow by little bit different way

00:13:55,240 --> 00:13:59,680
okay when the bull request appear on

00:13:57,429 --> 00:14:02,800
ourselves our server very

00:13:59,680 --> 00:14:07,510
jenkins it start it triggered the job

00:14:02,800 --> 00:14:10,960
early downloads Peggy cheese after it

00:14:07,510 --> 00:14:14,589
makes a source rpm built it sends to the

00:14:10,960 --> 00:14:18,370
copper copper round the Old Testament

00:14:14,589 --> 00:14:20,709
after that you have rpms and after when

00:14:18,370 --> 00:14:25,800
the rpms are ready on the copper server

00:14:20,709 --> 00:14:29,920
okay the owl functional tests start and

00:14:25,800 --> 00:14:31,959
then in the reports back to the to the

00:14:29,920 --> 00:14:37,630
Jenkins and the jackets to the to the

00:14:31,959 --> 00:14:41,860
github yeah that's the whole magic well

00:14:37,630 --> 00:14:44,560
our functional tests are based on the

00:14:41,860 --> 00:14:48,339
three let's say technologies doctor we

00:14:44,560 --> 00:14:50,920
use as a testing environment I think you

00:14:48,339 --> 00:14:54,399
heard quite a lot during this conference

00:14:50,920 --> 00:14:59,790
about the docker we try to describe out

00:14:54,399 --> 00:15:04,770
testing behave and also we use the epic

00:14:59,790 --> 00:15:08,170
HTTP server to emulate the web

00:15:04,770 --> 00:15:13,000
repository inside the docker image you

00:15:08,170 --> 00:15:17,350
know we try to do as much as possible to

00:15:13,000 --> 00:15:25,180
just emulate the normal environment in

00:15:17,350 --> 00:15:27,760
our testing procedure well how DDT test

00:15:25,180 --> 00:15:30,580
I found that though well it's become

00:15:27,760 --> 00:15:35,760
pretty famous yeah the in the newspaper

00:15:30,580 --> 00:15:39,250
i found that okay they found the DDT

00:15:35,760 --> 00:15:44,980
already at the antarctic coast yeah

00:15:39,250 --> 00:15:49,209
that's amazing i think if you start to

00:15:44,980 --> 00:15:54,130
think about the doc row yeah mostly the

00:15:49,209 --> 00:15:56,770
you heard the the motto which is built

00:15:54,130 --> 00:15:59,260
ship and run any application anywhere

00:15:56,770 --> 00:16:02,500
that means that okay you built some

00:15:59,260 --> 00:16:06,010
working application you distribute it

00:16:02,500 --> 00:16:09,430
and the job our approach with rocco is

00:16:06,010 --> 00:16:12,150
little bit different we try to do sorry

00:16:09,430 --> 00:16:15,810
we try to build

00:16:12,150 --> 00:16:25,970
look at beach every time when the task

00:16:15,810 --> 00:16:28,740
is triggered I don't always happen sorry

00:16:25,970 --> 00:16:30,390
well that's a little bit different

00:16:28,740 --> 00:16:35,250
approach how to how to handle the door

00:16:30,390 --> 00:16:38,250
to the curb most of you are some of you

00:16:35,250 --> 00:16:42,140
already heard about the behave again we

00:16:38,250 --> 00:16:45,150
choose it to be choose to describe the

00:16:42,140 --> 00:16:48,660
testing environment yeah because the

00:16:45,150 --> 00:16:53,250
behave use something like they say that

00:16:48,660 --> 00:16:57,300
it use test written in the nature

00:16:53,250 --> 00:16:59,670
language style bakit by Python code it

00:16:57,300 --> 00:17:02,370
has an advantage that not only

00:16:59,670 --> 00:17:06,660
developers will understand the test

00:17:02,370 --> 00:17:08,160
procedure like yeah when it when we read

00:17:06,660 --> 00:17:10,709
through this is the part of our test

00:17:08,160 --> 00:17:16,260
yeah where is written when I execute

00:17:10,709 --> 00:17:19,050
bash command dnf minus y install test a

00:17:16,260 --> 00:17:20,910
with the success then the package test

00:17:19,050 --> 00:17:24,089
eight SB should be installed and the

00:17:20,910 --> 00:17:27,540
package the sea should be upset I think

00:17:24,089 --> 00:17:30,920
it's quite understood yeah it doesn't

00:17:27,540 --> 00:17:35,820
make a match it recognized what to do

00:17:30,920 --> 00:17:39,750
which variable has to be used and that's

00:17:35,820 --> 00:17:45,500
just its exact good it and you will then

00:17:39,750 --> 00:17:49,980
see the result if we come to the our

00:17:45,500 --> 00:17:53,820
functional test what it does yeah the

00:17:49,980 --> 00:17:56,280
dnf you know it's from the command line

00:17:53,820 --> 00:17:59,040
it's used by the user from command line

00:17:56,280 --> 00:18:02,640
interface therefore out test procedure

00:17:59,040 --> 00:18:04,710
is also used the same way therefore it

00:18:02,640 --> 00:18:09,320
should the command to the command line

00:18:04,710 --> 00:18:12,510
and we try to analyze what happened then

00:18:09,320 --> 00:18:14,630
the test is run with cancer in the three

00:18:12,510 --> 00:18:16,940
parts the first part it's the

00:18:14,630 --> 00:18:19,770
preparation that mostly mean the

00:18:16,940 --> 00:18:22,980
building of the build of the docker

00:18:19,770 --> 00:18:25,720
image that means installed or requires

00:18:22,980 --> 00:18:29,890
component upgrade component

00:18:25,720 --> 00:18:34,990
and of course install the tested version

00:18:29,890 --> 00:18:37,840
of of the component which we run the

00:18:34,990 --> 00:18:42,550
test and all of this test has to be

00:18:37,840 --> 00:18:46,270
ensure it's done properly for further

00:18:42,550 --> 00:18:50,170
building for the built doc you use the

00:18:46,270 --> 00:18:52,900
something which gold ochre file just it

00:18:50,170 --> 00:18:56,230
starts that okay it tells you from which

00:18:52,900 --> 00:18:58,570
image to start what to run you can copy

00:18:56,230 --> 00:19:01,630
it inside the directory or to add some

00:18:58,570 --> 00:19:04,540
file and you can describe what to do

00:19:01,630 --> 00:19:07,690
when you enter the container this is not

00:19:04,540 --> 00:19:11,260
only way how to build a image yeah you

00:19:07,690 --> 00:19:14,200
can also come into a container as an

00:19:11,260 --> 00:19:17,620
image and later later on use it by this

00:19:14,200 --> 00:19:23,400
yeah sometimes it is necessary because

00:19:17,620 --> 00:19:23,400
not all steps can be done doing the

00:19:23,430 --> 00:19:33,730
docker image built yeah for example our

00:19:27,210 --> 00:19:37,210
unit tests require TTYL and well doing

00:19:33,730 --> 00:19:39,400
the docker built you cannot use it but

00:19:37,210 --> 00:19:41,220
you can use it go into the Quran there

00:19:39,400 --> 00:19:44,290
for you make a doctrine of your

00:19:41,220 --> 00:19:47,320
unfinished built of the image and after

00:19:44,290 --> 00:19:52,540
minutes correctly finished you just

00:19:47,320 --> 00:19:57,780
commit as a as a new image in the second

00:19:52,540 --> 00:20:01,240
part is take place the the run of our

00:19:57,780 --> 00:20:04,780
tests therefore the old test description

00:20:01,240 --> 00:20:08,110
are inside inside the container and we

00:20:04,780 --> 00:20:11,950
just say okay run this test with the

00:20:08,110 --> 00:20:16,120
Python 2 or pythons 3d narration yeah

00:20:11,950 --> 00:20:21,430
well after when the oldest pass we came

00:20:16,120 --> 00:20:23,770
to the third part where okay you want to

00:20:21,430 --> 00:20:27,160
have a whole summary of the old test but

00:20:23,770 --> 00:20:29,980
what was ok what was wrong and of course

00:20:27,160 --> 00:20:33,760
this is quite important part here you

00:20:29,980 --> 00:20:36,250
have to clean or images or computers

00:20:33,760 --> 00:20:38,330
because you can be quite surprised how

00:20:36,250 --> 00:20:41,659
easily your

00:20:38,330 --> 00:20:47,120
disk system discs will be depleted by

00:20:41,659 --> 00:20:51,110
the running of such a tests now we come

00:20:47,120 --> 00:20:54,350
to the second part how to use our tool

00:20:51,110 --> 00:20:58,190
as for the local built okay you want to

00:20:54,350 --> 00:21:02,380
run locally therefore okay well don't

00:20:58,190 --> 00:21:06,200
use a copper therefore we just make a

00:21:02,380 --> 00:21:08,480
directly built of RPM we did it into

00:21:06,200 --> 00:21:11,320
container therefore inside this

00:21:08,480 --> 00:21:16,970
container is insulted all requirements

00:21:11,320 --> 00:21:22,370
and when this is finished we can start

00:21:16,970 --> 00:21:26,149
with functional tests this procedure has

00:21:22,370 --> 00:21:27,679
some advantages for example what will be

00:21:26,149 --> 00:21:30,019
on the server side little bit more

00:21:27,679 --> 00:21:33,519
difficult for the Jenkins yeah it could

00:21:30,019 --> 00:21:37,370
be done easily and locally like you have

00:21:33,519 --> 00:21:39,529
two components like in our case we have

00:21:37,370 --> 00:21:42,620
a plugin score and dnf and you make it

00:21:39,529 --> 00:21:45,470
changes in both projects and they are

00:21:42,620 --> 00:21:49,940
tied together therefore you want to make

00:21:45,470 --> 00:21:52,850
a test of both project in one container

00:21:49,940 --> 00:21:57,080
and this can be done locally there for

00:21:52,850 --> 00:22:00,529
you first built inside the first project

00:21:57,080 --> 00:22:03,289
in style and the second project which

00:22:00,529 --> 00:22:08,630
requires the first one therefore you

00:22:03,289 --> 00:22:11,450
have opted the test which can really

00:22:08,630 --> 00:22:15,889
could work with the several several

00:22:11,450 --> 00:22:18,710
project as a long time and there is

00:22:15,889 --> 00:22:21,289
another option that you can keep the

00:22:18,710 --> 00:22:26,000
image at the end therefore you can

00:22:21,289 --> 00:22:30,289
easily enter this docker image or random

00:22:26,000 --> 00:22:33,110
container as a testing environment you

00:22:30,289 --> 00:22:36,289
can see how if your changes really does

00:22:33,110 --> 00:22:38,630
what you want to do and doesn't make any

00:22:36,289 --> 00:22:41,899
mess yeah and that's what we can offer

00:22:38,630 --> 00:22:44,960
our contributors yeah the testing

00:22:41,899 --> 00:22:47,630
environment inside the rocker if some

00:22:44,960 --> 00:22:50,450
mess happen yeah it doesn't interact

00:22:47,630 --> 00:22:52,460
with your host machine yeah it's inside

00:22:50,450 --> 00:22:54,710
the rocker if you do

00:22:52,460 --> 00:22:57,650
anything wrong you just delete a

00:22:54,710 --> 00:23:01,640
container and that's all yeah you have

00:22:57,650 --> 00:23:04,550
you can forget about cleaning and

00:23:01,640 --> 00:23:11,540
maintaining the the container yeah you

00:23:04,550 --> 00:23:16,070
just delete it yeah that's all at this

00:23:11,540 --> 00:23:17,900
place yeah you can power our project

00:23:16,070 --> 00:23:22,850
which we use for the continuing

00:23:17,900 --> 00:23:26,180
education test and while we came to the

00:23:22,850 --> 00:23:30,170
to the end of my talk and I just want to

00:23:26,180 --> 00:23:31,790
ask you yeah please think about our

00:23:30,170 --> 00:23:34,310
fathers of it follows a few of the

00:23:31,790 --> 00:23:39,770
testing yeah please think about

00:23:34,310 --> 00:23:43,000
functional tests please use our work use

00:23:39,770 --> 00:23:48,730
our code because you know believe in

00:23:43,000 --> 00:23:48,730
open source verte thank you very much

00:23:53,680 --> 00:23:59,110
okay if there's some question bonza ah

00:24:00,520 --> 00:24:19,550
yes yes yeah well oh yeah that's fun no

00:24:16,960 --> 00:24:27,820
no tighter is installed inside the

00:24:19,550 --> 00:24:27,820
docker it is to be by this yes

00:24:29,669 --> 00:24:45,429
yes well on the server side there's the

00:24:41,620 --> 00:24:52,330
one part well you send it to the copper

00:24:45,429 --> 00:24:54,639
yeah that's yes what well it could take

00:24:52,330 --> 00:24:59,559
five minutes it could take hours that's

00:24:54,639 --> 00:25:04,799
depend on how it's you know oh well

00:24:59,559 --> 00:25:04,799
together to take 15 minutes oh no oh

00:25:10,950 --> 00:25:19,720
well you know this is several somewhere

00:25:13,929 --> 00:25:22,809
else and no no no the copper is the exit

00:25:19,720 --> 00:25:27,549
this is the service which would you call

00:25:22,809 --> 00:25:32,590
outside and okay they have different

00:25:27,549 --> 00:25:37,330
let's say yes sometimes the build its

00:25:32,590 --> 00:25:41,320
shorter sometimes it's the longer no no

00:25:37,330 --> 00:25:44,289
you don't control it but okay if you

00:25:41,320 --> 00:25:46,059
start to think about the local build you

00:25:44,289 --> 00:25:50,019
can switch if you don't like the copper

00:25:46,059 --> 00:25:53,549
to the build always inside your your

00:25:50,019 --> 00:25:53,549
drainage yeah

00:25:55,180 --> 00:26:02,020
dementia or explain inside to cover you

00:25:59,230 --> 00:26:05,080
put just source package and it would

00:26:02,020 --> 00:26:08,290
build the binary packages for some

00:26:05,080 --> 00:26:14,700
federal institutions architecture all

00:26:08,290 --> 00:26:21,300
right yes yeah insider spec file there

00:26:14,700 --> 00:26:24,510
yes the script which is rather actually

00:26:21,300 --> 00:26:24,510
really simple

00:26:51,020 --> 00:26:57,000
planeta would actually be costly one the

00:26:55,020 --> 00:27:00,870
reason for that so developer crazy are

00:26:57,000 --> 00:27:05,370
then reviewer as you need to you need

00:27:00,870 --> 00:27:07,620
the past who plays a webinar each other

00:27:05,370 --> 00:27:11,130
example then we'll fix it up in google

00:27:07,620 --> 00:27:16,610
assets like a mediator between hiccup

00:27:11,130 --> 00:27:19,620
server and a changing and you will need

00:27:16,610 --> 00:27:21,390
more than surrender is of German season

00:27:19,620 --> 00:27:23,370
orchestrated jobs and the reason

00:27:21,390 --> 00:27:26,850
processor is do the cop is still not

00:27:23,370 --> 00:27:29,450
merge in well fought with death running

00:27:26,850 --> 00:27:32,460
and then assuming that ring

00:27:29,450 --> 00:27:35,220
automatically to roll and branch so it

00:27:32,460 --> 00:27:41,240
works really for this like fish project

00:27:35,220 --> 00:27:41,240
well because parallel like this the

00:27:44,860 --> 00:27:46,890
Oh

00:27:58,330 --> 00:28:08,690
sure I think that's the the normal

00:28:01,310 --> 00:28:11,030
procedure that ok if you yes for example

00:28:08,690 --> 00:28:13,820
now I prepared the test for Institute at

00:28:11,030 --> 00:28:16,760
least the the behavior instance in star

00:28:13,820 --> 00:28:20,540
was changed therefore I try to you know

00:28:16,760 --> 00:28:22,850
to disco or to check or it's checked

00:28:20,540 --> 00:28:54,200
yeah but to describe the test that we do

00:28:22,850 --> 00:29:00,560
it its next time out it's called Q by

00:28:54,200 --> 00:29:04,310
themself ever I think you doesn't need

00:29:00,560 --> 00:29:07,160
to cover by the test though all of the

00:29:04,310 --> 00:29:10,720
box and so on yeah i think the domain

00:29:07,160 --> 00:29:12,740
are you doesn't need to test all

00:29:10,720 --> 00:29:16,250
possibilities combination of the

00:29:12,740 --> 00:29:18,560
commands options and so on yeah it will

00:29:16,250 --> 00:29:22,520
be fine but it's not registering it's

00:29:18,560 --> 00:29:25,190
good if you cover the the most use it

00:29:22,520 --> 00:29:29,720
user cases the first option the second

00:29:25,190 --> 00:29:33,800
one the combination of the option option

00:29:29,720 --> 00:29:37,940
sir like that they are in general handle

00:29:33,800 --> 00:29:39,980
it correctly yeah i think this is there

00:29:37,940 --> 00:29:44,060
isn't nearly no tests that will really

00:29:39,980 --> 00:29:46,040
test all of the feature yeah but of

00:29:44,060 --> 00:29:50,900
course that I think the future will be

00:29:46,040 --> 00:29:53,780
that you you could create by the pool

00:29:50,900 --> 00:29:56,750
records or also the test procedures that

00:29:53,780 --> 00:29:59,960
will that will lay on or that will

00:29:56,750 --> 00:30:04,440
describe nor not describe the server

00:29:59,960 --> 00:30:13,320
your your comment do what do you really

00:30:04,440 --> 00:30:25,590
want to do I think that would be nice

00:30:13,320 --> 00:30:31,049
but we will see what no especially from

00:30:25,590 --> 00:30:50,159
you hahahahaha there are certain

00:30:31,049 --> 00:31:19,639
chirping okay let's distribute okay

00:30:50,159 --> 00:31:19,639
thank you very much mr. gonzo

00:34:36,159 --> 00:35:01,339
my my don't sometimes I got a fish we

00:34:51,560 --> 00:35:04,030
should we chance at 1400 movie not after

00:35:01,339 --> 00:35:04,030
I own your dad

00:35:12,849 --> 00:35:16,359
natasi all that scene

00:35:33,870 --> 00:35:36,870
yah

00:39:53,069 --> 00:39:56,069
you

00:43:17,560 --> 00:43:20,700

YouTube URL: https://www.youtube.com/watch?v=RVHba_8-p_0


