Title: Test Automation and CI using DiSTAF - Vishwanath Bhat
Publication date: 2016-02-11
Playlist: DevConf.cz 2016
Description: 
	DiSTAF stands for Distributed Systems Test Automation Framework. It provides powerful APIs which enables the user to automate the tests fast and efficiently. It is very modular and written with simplicity in mind. Although it is written to solve the automation problems of glusterfs, it can be used to automate many distributed systems. More information is available at https://github.com/gluster/distaf. 

In the presentation I will cover the advantages it has over the other test automation frameworks and about architecture and APIs. I will also cover how the upstream CI has been structured using the distaf and containers.

I will be giving a live demo if the time permits.

Presentation: http://bit.ly/1SmaAhZ
Captions: 
	00:00:44,390 --> 00:00:52,570
right tink check check

00:01:09,080 --> 00:01:19,720
I wish your tech wish bro check test I

00:01:17,270 --> 00:01:19,720
will show

00:01:39,930 --> 00:01:43,070
i lecture labels

00:01:46,690 --> 00:01:50,940
oh you can see

00:01:53,130 --> 00:02:01,890
we should wanna wish one of us

00:01:56,350 --> 00:02:01,890
so we should run off but which one about

00:02:03,790 --> 00:02:13,230
sorry for red because we wanna but which

00:02:10,030 --> 00:02:18,720
one about L distillation

00:02:13,230 --> 00:02:18,720
okay great 40 okay everyone gets down

00:02:57,390 --> 00:03:09,250
well hello everyone in last presentation

00:03:00,069 --> 00:03:13,599
today in this room here's the free

00:03:09,250 --> 00:03:17,640
poster do one of that you want to add

00:03:13,599 --> 00:03:24,010
somebody and here's some sticker sticker

00:03:17,640 --> 00:03:28,480
no way don't forget after this

00:03:24,010 --> 00:03:32,410
presentation will be a other

00:03:28,480 --> 00:03:37,560
presentation in the 105 and you can win

00:03:32,410 --> 00:03:41,200
something there and now please welcome

00:03:37,560 --> 00:03:49,239
wish were not but and his test

00:03:41,200 --> 00:03:52,150
augmentation using this stuff hi hi I

00:03:49,239 --> 00:03:54,489
hope this is the last session so I'm not

00:03:52,150 --> 00:03:58,060
going to take long probably all

00:03:54,489 --> 00:04:00,190
completed it within 20 minutes yeah my

00:03:58,060 --> 00:04:03,670
name is fish on earth but I work in red

00:04:00,190 --> 00:04:06,880
as a quality engineer in glass of

00:04:03,670 --> 00:04:11,260
storage team and my responsibilities

00:04:06,880 --> 00:04:13,510
smoothly on automation side so i will be

00:04:11,260 --> 00:04:16,510
talking about this stuff this is my

00:04:13,510 --> 00:04:19,479
agenda i will be going through overview

00:04:16,510 --> 00:04:24,780
and then what actually led us to come up

00:04:19,479 --> 00:04:27,610
with the framework and the solution and

00:04:24,780 --> 00:04:30,810
writing tests and then how we did see I

00:04:27,610 --> 00:04:34,600
with it and what's in the pipeline next

00:04:30,810 --> 00:04:39,760
ok so this staff stands for distributed

00:04:34,600 --> 00:04:42,310
systems test automation framework but

00:04:39,760 --> 00:04:45,729
actually this stuff at the double F in

00:04:42,310 --> 00:04:48,190
English also means some tool that's used

00:04:45,729 --> 00:04:52,620
for spinning cloths it actually makes

00:04:48,190 --> 00:04:54,700
your work very easier so but that's not

00:04:52,620 --> 00:04:56,200
what we came up with but then that's

00:04:54,700 --> 00:04:59,169
also one of the things we named it the

00:04:56,200 --> 00:05:01,240
staff so it's a it's a lightweight test

00:04:59,169 --> 00:05:06,849
framework written in Python it's very

00:05:01,240 --> 00:05:08,620
so we actually rewrote a couple of parts

00:05:06,849 --> 00:05:11,889
without actually changing the test cases

00:05:08,620 --> 00:05:13,930
or anything so it's very modular and we

00:05:11,889 --> 00:05:18,009
use all the existing frameworks like

00:05:13,930 --> 00:05:20,590
unit tests or and pies are pricey and we

00:05:18,009 --> 00:05:22,750
mean it's not we didn't write anything

00:05:20,590 --> 00:05:25,900
new from the scratch we made use of all

00:05:22,750 --> 00:05:30,819
the existing python modules to write

00:05:25,900 --> 00:05:32,860
this so and we were using be Kirby

00:05:30,819 --> 00:05:36,580
framework for a test test automation in

00:05:32,860 --> 00:05:38,349
cluster so we and one of the reason we

00:05:36,580 --> 00:05:45,250
had to write this was our frustration

00:05:38,349 --> 00:05:47,110
with that framework picker be so and as

00:05:45,250 --> 00:05:50,169
I said we were using be Kirby framework

00:05:47,110 --> 00:05:52,990
before so it was really very hard for

00:05:50,169 --> 00:05:54,909
people to is bigger because I if I doubt

00:05:52,990 --> 00:05:59,110
a project is open source Fedora project

00:05:54,909 --> 00:06:00,970
so that's what we were using so it the

00:05:59,110 --> 00:06:03,639
programming paradigm there is it was

00:06:00,970 --> 00:06:05,889
very hard so we had especially when

00:06:03,639 --> 00:06:07,810
using a distributed system some it's

00:06:05,889 --> 00:06:11,289
it's pretty straightforward if you are

00:06:07,810 --> 00:06:13,990
if you have a single system project but

00:06:11,289 --> 00:06:19,620
gosh orifice being a distributed system

00:06:13,990 --> 00:06:22,210
it was really hard and we had varied

00:06:19,620 --> 00:06:26,680
difficulty in getting people on board I

00:06:22,210 --> 00:06:29,860
mean most qu folks if they are not

00:06:26,680 --> 00:06:31,330
really a very much into programming then

00:06:29,860 --> 00:06:35,500
it is very hard for them to getting on

00:06:31,330 --> 00:06:38,680
board with bigger because it's not why

00:06:35,500 --> 00:06:41,560
provided i mean you write the in beaker

00:06:38,680 --> 00:06:43,240
be like things right I mean things get

00:06:41,560 --> 00:06:44,949
executed in parallel multiple machines

00:06:43,240 --> 00:06:46,599
and there is no very straightforward

00:06:44,949 --> 00:06:50,050
connection you have to do sing sad and

00:06:46,599 --> 00:06:51,969
lot of issues with that so people were

00:06:50,050 --> 00:06:54,039
taking with a long time to learn and

00:06:51,969 --> 00:06:56,380
then writing and debugging test cases

00:06:54,039 --> 00:07:00,520
was very very difficult it was really

00:06:56,380 --> 00:07:04,000
painful and there was a couple of issues

00:07:00,520 --> 00:07:06,130
such as you know there is no very simple

00:07:04,000 --> 00:07:08,229
way of communicating with other machines

00:07:06,130 --> 00:07:10,120
we have to do SSH and then write to some

00:07:08,229 --> 00:07:12,500
file and then other node should arrange

00:07:10,120 --> 00:07:17,270
some while it was painful again

00:07:12,500 --> 00:07:20,090
and that framework was very much tied to

00:07:17,270 --> 00:07:22,670
anything with rpms so we couldn't use it

00:07:20,090 --> 00:07:25,820
with debian ubuntu i mean in up straight

00:07:22,670 --> 00:07:28,100
I mean we had a lot of extreme customers

00:07:25,820 --> 00:07:30,680
using Ubuntu and Debbie and so we wanted

00:07:28,100 --> 00:07:34,400
a uniform test framework for upstream

00:07:30,680 --> 00:07:39,170
and downstream as well so we came up

00:07:34,400 --> 00:07:41,690
with distaff so it solves most of the

00:07:39,170 --> 00:07:46,640
most of the issues that if not all most

00:07:41,690 --> 00:07:51,470
of the issues that beaker used to have

00:07:46,640 --> 00:07:52,760
and so in here we have kept the

00:07:51,470 --> 00:07:55,730
framework and the infrastructure

00:07:52,760 --> 00:07:58,820
management as separate you can use I

00:07:55,730 --> 00:08:00,410
mean to provision machines you can use

00:07:58,820 --> 00:08:02,180
anything you can use opens an open

00:08:00,410 --> 00:08:06,820
standard car rack space or your own

00:08:02,180 --> 00:08:09,440
vagrant or even beaker itself but the

00:08:06,820 --> 00:08:12,650
test framework once the machines are you

00:08:09,440 --> 00:08:16,550
test machines are provisions so we can

00:08:12,650 --> 00:08:18,470
use this stuff for that and disturbed by

00:08:16,550 --> 00:08:21,470
itself does not do anything much so it

00:08:18,470 --> 00:08:24,050
just gives you a small test test runner

00:08:21,470 --> 00:08:26,030
and then provides couple of AP is for

00:08:24,050 --> 00:08:28,130
you to run the tests or orchid

00:08:26,030 --> 00:08:30,410
orchestrate however tests should go in

00:08:28,130 --> 00:08:33,260
the remote machines I think that will be

00:08:30,410 --> 00:08:39,260
clear when I go to the architecture

00:08:33,260 --> 00:08:44,300
diagram so the dotted line the dotted

00:08:39,260 --> 00:08:46,550
box here that's the distaff so it can a

00:08:44,300 --> 00:08:50,420
distaff this all of that thing runs on a

00:08:46,550 --> 00:08:53,690
single machine so so we're just trying

00:08:50,420 --> 00:08:54,950
to we are not solving the problem of

00:08:53,690 --> 00:08:57,790
distributed system here so we just

00:08:54,950 --> 00:08:59,720
trying to solve the problem of testing

00:08:57,790 --> 00:09:03,440
distributed system so it's okay to have

00:08:59,720 --> 00:09:05,000
a single management node so this is our

00:09:03,440 --> 00:09:08,300
management node where it disturbs runs

00:09:05,000 --> 00:09:12,080
and the Machine 12 machine and that's

00:09:08,300 --> 00:09:14,810
our test machine and they can be a

00:09:12,080 --> 00:09:18,560
physical machines or VMs or even a

00:09:14,810 --> 00:09:21,440
container all all that nice aids sshd

00:09:18,560 --> 00:09:23,270
should be running in all those we all

00:09:21,440 --> 00:09:24,740
those machines and there should be a

00:09:23,270 --> 00:09:27,230
password less SS

00:09:24,740 --> 00:09:32,330
set up between the management note and

00:09:27,230 --> 00:09:35,950
your cash machine and it's a it's a

00:09:32,330 --> 00:09:38,330
logical nodes I mean this stuff can also

00:09:35,950 --> 00:09:43,370
management node can also present in one

00:09:38,330 --> 00:09:45,589
of those test machines as well so this

00:09:43,370 --> 00:09:48,050
is how the flow wat so you have a config

00:09:45,589 --> 00:09:49,850
file where you specify this is my server

00:09:48,050 --> 00:09:52,160
configuration and this is my servers and

00:09:49,850 --> 00:09:54,470
these are my clients and the config

00:09:52,160 --> 00:09:56,270
parser reads it when the when you start

00:09:54,470 --> 00:09:58,940
disturb the config purser reads the

00:09:56,270 --> 00:10:02,990
config file and connection manager

00:09:58,940 --> 00:10:06,760
establishes a connection to all those it

00:10:02,990 --> 00:10:09,410
basically uses ssh tunneling inside so

00:10:06,760 --> 00:10:11,950
so we establish a connection to all

00:10:09,410 --> 00:10:15,080
those remote machines and then manage it

00:10:11,950 --> 00:10:17,300
connection is made only once and all the

00:10:15,080 --> 00:10:19,070
tests are on all commands remote

00:10:17,300 --> 00:10:21,080
commands are run through that connection

00:10:19,070 --> 00:10:25,370
and then it's the condition is taken

00:10:21,080 --> 00:10:27,260
down at the end of the test run so once

00:10:25,370 --> 00:10:29,360
the connection manager condition is

00:10:27,260 --> 00:10:32,000
establishes connection is established

00:10:29,360 --> 00:10:34,850
all your test cases and you're all your

00:10:32,000 --> 00:10:38,779
libraries should talk to remote machines

00:10:34,850 --> 00:10:41,209
through one of those api's provided by

00:10:38,779 --> 00:10:45,170
the connection manager and we have a way

00:10:41,209 --> 00:10:54,100
to discover testdisk of test discovery

00:10:45,170 --> 00:11:00,230
so I will come to that bit later okay so

00:10:54,100 --> 00:11:03,320
writing test cases is writing test cases

00:11:00,230 --> 00:11:06,920
is very easy I mean what what we had in

00:11:03,320 --> 00:11:09,589
mind was making automation right test

00:11:06,920 --> 00:11:14,709
case automation very simpler so so

00:11:09,589 --> 00:11:17,180
eventually what we came up with is like

00:11:14,709 --> 00:11:20,089
test cases are written in steps like

00:11:17,180 --> 00:11:22,730
steps I mean step 1 do this in this

00:11:20,089 --> 00:11:25,130
machine do this in this machine so so

00:11:22,730 --> 00:11:27,200
with this stuff you can just write

00:11:25,130 --> 00:11:29,240
whatever is written in English we can

00:11:27,200 --> 00:11:32,180
just write them in Python and you you

00:11:29,240 --> 00:11:37,459
need not be expert in Python I mean it's

00:11:32,180 --> 00:11:38,160
very basic so the I mean onboarding

00:11:37,459 --> 00:11:40,410
process is very

00:11:38,160 --> 00:11:43,829
all you have to know is very basic bite

00:11:40,410 --> 00:11:46,649
on that's all so connection manager once

00:11:43,829 --> 00:11:48,720
established I mean after after the

00:11:46,649 --> 00:11:51,079
connection establishment it it gives you

00:11:48,720 --> 00:11:54,290
a couple of api's and couple of

00:11:51,079 --> 00:11:57,110
variables to which you can actually

00:11:54,290 --> 00:12:01,529
access all your servers all your nodes

00:11:57,110 --> 00:12:04,019
and they say that's edgy that's a

00:12:01,529 --> 00:12:07,740
gentlest connection in the sense only

00:12:04,019 --> 00:12:10,230
sshd should be raining so no disturb

00:12:07,740 --> 00:12:12,839
does not run any program by itself on

00:12:10,230 --> 00:12:21,689
the remote machines but you need to have

00:12:12,839 --> 00:12:23,970
ssh ed running and so at least in in in

00:12:21,689 --> 00:12:25,439
case of gloucester most of work most of

00:12:23,970 --> 00:12:27,420
the commands that we wanted to run on

00:12:25,439 --> 00:12:30,959
the servers are basically bash commands

00:12:27,420 --> 00:12:33,240
special shell commands so disturb use

00:12:30,959 --> 00:12:35,459
you to AP ice with through which you can

00:12:33,240 --> 00:12:38,269
actually run all your bash command

00:12:35,459 --> 00:12:40,920
synchronously or asynchronously and then

00:12:38,269 --> 00:12:44,819
if you want to if you want to run

00:12:40,920 --> 00:12:46,380
anything Python commands on the remote

00:12:44,819 --> 00:12:49,740
machines you can request for a

00:12:46,380 --> 00:12:50,819
connection and all the Python operation

00:12:49,740 --> 00:12:52,500
that you do on that particular

00:12:50,819 --> 00:12:54,870
connection runs on that particular

00:12:52,500 --> 00:12:57,149
remote node through which you request

00:12:54,870 --> 00:12:59,550
the connection with suppose like if you

00:12:57,149 --> 00:13:00,899
want to do open a file and read a file

00:12:59,550 --> 00:13:03,779
in the remote node you have to get a

00:13:00,899 --> 00:13:05,970
connection to that node and all the open

00:13:03,779 --> 00:13:12,660
and Python open and rewrite that you do

00:13:05,970 --> 00:13:14,850
will be on the remote machine yeah so so

00:13:12,660 --> 00:13:16,350
that's how we make the discovery so I

00:13:14,850 --> 00:13:18,180
mean test base covered is so all your

00:13:16,350 --> 00:13:21,120
test cases should have a decorator

00:13:18,180 --> 00:13:24,420
called a test case the test case name so

00:13:21,120 --> 00:13:28,350
when this stuff goes through your a test

00:13:24,420 --> 00:13:30,540
test list or tests or score it reads all

00:13:28,350 --> 00:13:32,490
the decorator and puts them in a list

00:13:30,540 --> 00:13:34,529
and then runs them one by one you can

00:13:32,490 --> 00:13:37,290
actually control the control what what

00:13:34,529 --> 00:13:41,750
should run what should not run in by

00:13:37,290 --> 00:13:41,750
giving a CLI options

00:13:44,529 --> 00:13:56,779
ok so I have AB I have a sample test

00:13:50,720 --> 00:13:59,089
case code so if you see from disturb you

00:13:56,779 --> 00:14:00,649
till import TC so TC is my global

00:13:59,089 --> 00:14:02,480
connection object through which we can

00:14:00,649 --> 00:14:04,640
access all your service or your clients

00:14:02,480 --> 00:14:06,920
and it provides a lot of AP ice with

00:14:04,640 --> 00:14:11,630
which you can run commands on the remote

00:14:06,920 --> 00:14:16,940
node and so that's my so when when there

00:14:11,630 --> 00:14:20,270
is a further okay so the test case can

00:14:16,940 --> 00:14:23,209
be either a class or a function it does

00:14:20,270 --> 00:14:26,120
not matter but then if it is a class it

00:14:23,209 --> 00:14:32,930
should have the methods set up run and

00:14:26,120 --> 00:14:36,560
teardown so and a suit you you write you

00:14:32,930 --> 00:14:39,020
specify the test cases in that desk at

00:14:36,560 --> 00:14:40,700
SPS decorator so everything at all

00:14:39,020 --> 00:14:42,529
Python functions or classes that has

00:14:40,700 --> 00:14:47,390
particular decorator is considered as a

00:14:42,529 --> 00:14:51,860
test case and if you see in the doc

00:14:47,390 --> 00:14:53,899
string I have I have two two values

00:14:51,860 --> 00:14:57,649
among key value pair and that's

00:14:53,899 --> 00:15:00,920
basically written in humble format so

00:14:57,649 --> 00:15:03,500
what we do is like we I read the dot we

00:15:00,920 --> 00:15:05,630
did the doc string and then pass the

00:15:03,500 --> 00:15:07,339
gavel format in it and we get the

00:15:05,630 --> 00:15:10,690
dictionary so we make a couple of

00:15:07,339 --> 00:15:13,970
decisions based on that particular a

00:15:10,690 --> 00:15:16,700
particular value suppose like me you set

00:15:13,970 --> 00:15:19,010
up so if you a test case wants to set up

00:15:16,700 --> 00:15:20,660
a fresh set up then you can make it Ryu

00:15:19,010 --> 00:15:22,610
set up false which means like that setup

00:15:20,660 --> 00:15:25,520
will not be run and directly you can go

00:15:22,610 --> 00:15:28,130
to the run part of that your class if

00:15:25,520 --> 00:15:29,959
you have a class and you can actually

00:15:28,130 --> 00:15:35,180
have this is not implemented yet the

00:15:29,959 --> 00:15:36,680
tags so the plan is to like have tags

00:15:35,180 --> 00:15:38,149
for a particular test case I mean this

00:15:36,680 --> 00:15:40,220
is my regression case this is my

00:15:38,149 --> 00:15:42,079
longevity case or this is a priority 0

00:15:40,220 --> 00:15:43,790
case so while running you can specify

00:15:42,079 --> 00:15:49,339
run all the cases that has this

00:15:43,790 --> 00:15:51,470
particular tag yeah so so you have

00:15:49,339 --> 00:15:54,320
access to your servers and clients with

00:15:51,470 --> 00:15:55,570
the dot notes dot clients variables the

00:15:54,320 --> 00:16:00,640
Python list

00:15:55,570 --> 00:16:02,320
so and yet I would just explain i mean i

00:16:00,640 --> 00:16:04,300
have just this is a dummy test here so i

00:16:02,320 --> 00:16:07,630
have written i have explained i mean

00:16:04,300 --> 00:16:10,780
three basic api's that has provided by

00:16:07,630 --> 00:16:14,350
distaff one is dot run DC doctrine and

00:16:10,780 --> 00:16:16,180
renee sing so both are used to run any

00:16:14,350 --> 00:16:20,110
bash or shell commands in the remote

00:16:16,180 --> 00:16:22,930
node so that a TC road run takes two

00:16:20,110 --> 00:16:25,620
arguments that the server in which you

00:16:22,930 --> 00:16:30,100
want to run any command or and the

00:16:25,620 --> 00:16:32,320
command itself and it returns you 38 a

00:16:30,100 --> 00:16:35,560
Python topple basically so that's one is

00:16:32,320 --> 00:16:37,870
written code the STD out an STD so if

00:16:35,560 --> 00:16:39,490
you want to do any you know negative

00:16:37,870 --> 00:16:42,130
test case in the negative case where you

00:16:39,490 --> 00:16:44,410
want to pass the steadier and then check

00:16:42,130 --> 00:16:48,910
something that we can use you can use

00:16:44,410 --> 00:16:53,020
the third steadier so I'm just running

00:16:48,910 --> 00:16:55,180
some ntpd start and then I'm running I

00:16:53,020 --> 00:16:58,600
mean using this fine command in the

00:16:55,180 --> 00:17:01,930
client I'm renaming all the files that's

00:16:58,600 --> 00:17:07,000
in the mount point and if Renee Singh

00:17:01,930 --> 00:17:08,860
gives you a objectify thanh sub-process

00:17:07,000 --> 00:17:12,850
object so with which we can do wait kill

00:17:08,860 --> 00:17:17,410
written code or anything that python

00:17:12,850 --> 00:17:19,390
suppressors can do and so while that is

00:17:17,410 --> 00:17:22,329
running in the client I am I can do

00:17:19,390 --> 00:17:24,189
anything on the server so this just an

00:17:22,329 --> 00:17:26,170
example so i am getting a connection to

00:17:24,189 --> 00:17:29,560
this server as a root and then i'm just

00:17:26,170 --> 00:17:33,510
running a cathouse name so the

00:17:29,560 --> 00:17:37,210
disconnection so all your commands so

00:17:33,510 --> 00:17:39,430
Python commands if it is a built-in like

00:17:37,210 --> 00:17:42,430
open read right you should specify

00:17:39,430 --> 00:17:45,490
connection dot built-in dot open a file

00:17:42,430 --> 00:17:49,240
or read something like that if it's a if

00:17:45,490 --> 00:17:52,120
it depends depends on a module like here

00:17:49,240 --> 00:17:55,600
socket its connection dot modules dot

00:17:52,120 --> 00:17:57,400
your module if you're if you are if you

00:17:55,600 --> 00:17:59,980
want to write AB if you want to make use

00:17:57,400 --> 00:18:01,660
of a non-standard python module in the

00:17:59,980 --> 00:18:04,270
remote machines you should make sure

00:18:01,660 --> 00:18:05,130
that this particular module is installed

00:18:04,270 --> 00:18:07,400
in in the

00:18:05,130 --> 00:18:20,900
machine that you get connection from

00:18:07,400 --> 00:18:20,900
yeah yeah yes there's a typo yes I'm by

00:18:26,600 --> 00:18:47,850
yes yes but then yes yeah they are dead

00:18:44,220 --> 00:18:50,010
they know they're just I mean I'm

00:18:47,850 --> 00:18:52,110
writing I'm using this for Gloucester so

00:18:50,010 --> 00:18:57,480
there's a differentiation but then the

00:18:52,110 --> 00:18:59,430
yeah there is no yes yes exactly so it's

00:18:57,480 --> 00:19:01,680
just it's just a connection manager

00:18:59,430 --> 00:19:03,720
which once connection is established you

00:19:01,680 --> 00:19:05,190
can run it's exactly the same methods

00:19:03,720 --> 00:19:10,860
that is available for both servers and

00:19:05,190 --> 00:19:12,990
clients yes I mean in our case sir

00:19:10,860 --> 00:19:22,010
versus why glossary since I applied this

00:19:12,990 --> 00:19:24,840
client so that's all yeah so yeah so

00:19:22,010 --> 00:19:27,750
after I mean after I get the horse named

00:19:24,840 --> 00:19:30,180
I am actually waiting for that all the

00:19:27,750 --> 00:19:32,490
rain aims to complete with the wait

00:19:30,180 --> 00:19:36,840
method and I after I want to actually

00:19:32,490 --> 00:19:39,450
check the output of that so I have dot

00:19:36,840 --> 00:19:43,050
value return that's one of the things

00:19:39,450 --> 00:19:45,630
that there is written on top other than

00:19:43,050 --> 00:19:47,310
what pythons or process gives you so

00:19:45,630 --> 00:19:50,220
again that gives you the same output as

00:19:47,310 --> 00:19:52,350
the run return code actually obtained

00:19:50,220 --> 00:19:58,380
yesterday air and one and then you have

00:19:52,350 --> 00:20:01,770
to close the connection so as you can

00:19:58,380 --> 00:20:05,850
see so writing test cases was pretty

00:20:01,770 --> 00:20:08,490
simple I mean you have cases written in

00:20:05,850 --> 00:20:14,110
English so you just have to convert them

00:20:08,490 --> 00:20:18,190
to python that so mostly not not always

00:20:14,110 --> 00:20:21,710
running tests so so you have to specify

00:20:18,190 --> 00:20:23,899
your servers so we have the servers and

00:20:21,710 --> 00:20:26,120
clients so you can actually omit one of

00:20:23,899 --> 00:20:30,919
them in which case that will be a empty

00:20:26,120 --> 00:20:32,330
list so but either service work line

00:20:30,919 --> 00:20:34,700
should be there but if you change the

00:20:32,330 --> 00:20:41,630
config person you can have your own key

00:20:34,700 --> 00:20:43,399
word so so we specify all the servers

00:20:41,630 --> 00:20:46,309
and clients or and all my configuration

00:20:43,399 --> 00:20:49,730
values in AML file and then I set up a

00:20:46,309 --> 00:20:52,250
password less ssh to those machines and

00:20:49,730 --> 00:20:53,630
if you have lot of machines a lot of

00:20:52,250 --> 00:20:57,260
cash machines then it can be a bit

00:20:53,630 --> 00:21:00,260
harder so there is a script that

00:20:57,260 --> 00:21:03,590
basically makes use of bash expect

00:21:00,260 --> 00:21:05,260
package to set up set that up but then

00:21:03,590 --> 00:21:12,590
you have to have all your remote

00:21:05,260 --> 00:21:15,679
machines password same and then we we

00:21:12,590 --> 00:21:18,350
have a currently we have options to run

00:21:15,679 --> 00:21:20,480
all the cases or all the cases inside a

00:21:18,350 --> 00:21:23,899
particular directory in your test case

00:21:20,480 --> 00:21:25,450
source code or everything from a file or

00:21:23,899 --> 00:21:27,950
just a test case list of test cases

00:21:25,450 --> 00:21:30,860
there we want to have couple of

00:21:27,950 --> 00:21:33,139
improvements on there and the results

00:21:30,860 --> 00:21:34,909
are either in text format are there in a

00:21:33,139 --> 00:21:37,159
unit style format you can that against

00:21:34,909 --> 00:21:39,440
can be specified through command line so

00:21:37,159 --> 00:21:41,029
Jane your style can be rendered by

00:21:39,440 --> 00:21:44,559
Jenkins friendly and you can show a

00:21:41,029 --> 00:21:52,580
pretty output on the Jenkins side

00:21:44,559 --> 00:21:55,549
project so CI so this is we are using

00:21:52,580 --> 00:21:57,500
this mainly for Gloucester so far and a

00:21:55,549 --> 00:22:03,919
couple of the recent changes that went

00:21:57,500 --> 00:22:06,139
in are very glassful specific so in here

00:22:03,919 --> 00:22:08,600
in cluster we are making actually we

00:22:06,139 --> 00:22:12,169
have two options both our work in

00:22:08,600 --> 00:22:14,710
progress so one of them is we are making

00:22:12,169 --> 00:22:20,389
use of sentiments in for a setup for CI

00:22:14,710 --> 00:22:21,830
in centos they have a a program called

00:22:20,389 --> 00:22:23,570
Duffy with which you can actually

00:22:21,830 --> 00:22:26,750
request all Santos mushy

00:22:23,570 --> 00:22:29,300
with couple of options so we make use of

00:22:26,750 --> 00:22:32,510
the planets to make use of that and we

00:22:29,300 --> 00:22:34,670
have recovered through that once you get

00:22:32,510 --> 00:22:36,350
the machines it gives you a hostname

00:22:34,670 --> 00:22:38,690
softly sir I mean whatever the machines

00:22:36,350 --> 00:22:41,630
that you asked for once you get that you

00:22:38,690 --> 00:22:44,720
populate them in the ml file

00:22:41,630 --> 00:22:47,360
programmatically and then start the

00:22:44,720 --> 00:22:50,000
cases that you want to run so in this

00:22:47,360 --> 00:22:53,330
case Jenkins slave access your list of

00:22:50,000 --> 00:22:56,030
management node and the cash machines

00:22:53,330 --> 00:22:58,880
are there is I mean reserved through

00:22:56,030 --> 00:23:00,470
centaurs infra so in other setup other

00:22:58,880 --> 00:23:02,690
setup also working progress but it's

00:23:00,470 --> 00:23:05,930
mostly more or less similar except that

00:23:02,690 --> 00:23:08,750
we request or we / vision all the test

00:23:05,930 --> 00:23:12,860
machines through vagrant with lip what I

00:23:08,750 --> 00:23:16,610
mean instead of instead of for Duffy so

00:23:12,860 --> 00:23:19,550
you can actually make use of rackspace

00:23:16,610 --> 00:23:29,000
or open standard car in in internally we

00:23:19,550 --> 00:23:32,930
use beaker as well okay so what we have

00:23:29,000 --> 00:23:34,580
in plan so if you we have couple of very

00:23:32,930 --> 00:23:37,640
basic test cases that does not require

00:23:34,580 --> 00:23:39,290
any you know stress or anything we can

00:23:37,640 --> 00:23:41,540
actually make use of containers in which

00:23:39,290 --> 00:23:45,410
case we want to make use of vagrant with

00:23:41,540 --> 00:23:48,170
alexi plug-in and as I said we want to

00:23:45,410 --> 00:23:52,360
have a couple of options with tags and

00:23:48,170 --> 00:23:55,640
then skipping it or running only those i

00:23:52,360 --> 00:23:58,220
mean those cases which have particular

00:23:55,640 --> 00:24:02,330
tags and currently the results are only

00:23:58,220 --> 00:24:04,940
in either text or JSON as far as a unit

00:24:02,330 --> 00:24:12,080
so we want to have a couple of more

00:24:04,940 --> 00:24:15,550
options there as well yeah that's all so

00:24:12,080 --> 00:24:15,550
if you have any questions

00:24:27,980 --> 00:24:37,500
so this is ours name changes every time

00:24:30,810 --> 00:24:55,830
I could change yeah no I didn't

00:24:37,500 --> 00:24:59,490
understand get you a question yes okay

00:24:55,830 --> 00:25:02,220
ah ok so the servers and clients at

00:24:59,490 --> 00:25:04,890
least disturb doesn't connect servers

00:25:02,220 --> 00:25:10,290
and clients by itself so client itself

00:25:04,890 --> 00:25:11,880
doesn't know anything yeah yeah you have

00:25:10,290 --> 00:25:14,160
to get that you have to get the review

00:25:11,880 --> 00:25:15,240
that whatever you want to do it through

00:25:14,160 --> 00:25:35,610
client and then tell it to the server

00:25:15,240 --> 00:25:38,190
through the management yes yes but then

00:25:35,610 --> 00:25:42,360
it's not very straightforward I mean

00:25:38,190 --> 00:25:45,450
even in multi host they they each each

00:25:42,360 --> 00:25:47,070
each machine knows what are other

00:25:45,450 --> 00:25:49,800
machines in the cluster but then it

00:25:47,070 --> 00:25:52,770
cannot talk to simply it has to use SSH

00:25:49,800 --> 00:25:54,540
and then all those things so in here the

00:25:52,770 --> 00:25:55,710
service itself friend clients we shall

00:25:54,540 --> 00:25:58,800
fight them so they don't know anything

00:25:55,710 --> 00:26:02,510
what other what server doesn't know how

00:25:58,800 --> 00:26:02,510
many servers are there in

00:26:06,059 --> 00:26:10,990
the servers and now you are yes requires

00:26:08,889 --> 00:26:13,809
a client connectedness cluster yeah so

00:26:10,990 --> 00:26:15,990
he needs a Muslim yeah oh that's why I

00:26:13,809 --> 00:26:17,769
pass it through management node

00:26:15,990 --> 00:26:22,720
management lord knows these are my

00:26:17,769 --> 00:26:24,700
server so in I I tell client to mount it

00:26:22,720 --> 00:26:26,559
through this horse named I can postulate

00:26:24,700 --> 00:26:28,149
the management node nodes everything so

00:26:26,559 --> 00:26:29,740
it can pass around all the information

00:26:28,149 --> 00:26:31,149
that it like but there is no direct

00:26:29,740 --> 00:26:37,200
communication between the servers and

00:26:31,149 --> 00:26:37,200
clients yeah

00:27:01,940 --> 00:27:09,179
well we don't have anything in the

00:27:05,669 --> 00:27:11,399
plants at least but if it makes sense

00:27:09,179 --> 00:27:14,100
but then as I said like we came up with

00:27:11,399 --> 00:27:17,149
this because of all the frustration that

00:27:14,100 --> 00:27:21,299
we had with multi host beaker enrollment

00:27:17,149 --> 00:27:23,210
and at that time we did research I mean

00:27:21,299 --> 00:27:26,490
we did looked into a couple of others

00:27:23,210 --> 00:27:27,899
but then that wasn't I mean I can't tell

00:27:26,490 --> 00:27:30,899
all of them I don't even remember all of

00:27:27,899 --> 00:27:32,940
them on top of my head but then we had a

00:27:30,899 --> 00:27:35,640
lot of issues with I mean one or other

00:27:32,940 --> 00:27:37,890
wishes with many of them like in here

00:27:35,640 --> 00:27:42,570
like we want it to be connect to windows

00:27:37,890 --> 00:27:45,260
for samba testing we do that through

00:27:42,570 --> 00:27:47,820
running openssh or phrases such in the

00:27:45,260 --> 00:27:50,659
windows and then connecting wire I mean

00:27:47,820 --> 00:27:53,220
using make you making use of PowerShell

00:27:50,659 --> 00:27:54,539
so each of the test case a test

00:27:53,220 --> 00:27:58,289
framework that we looked into her either

00:27:54,539 --> 00:28:01,440
one of one or other in a shortcoming so

00:27:58,289 --> 00:28:03,690
we had to come up with this but then at

00:28:01,440 --> 00:28:05,640
least now we don't have any it's been I

00:28:03,690 --> 00:28:09,720
mean at least it's it's been working

00:28:05,640 --> 00:28:12,390
good so far for us so we have we have no

00:28:09,720 --> 00:28:14,070
plans of migrating but then if that if

00:28:12,390 --> 00:28:20,059
there is a lot of issues with this as

00:28:14,070 --> 00:28:20,059
well then you put me yeah

00:28:29,560 --> 00:28:36,130
yeah yeah I i have heard of i came to

00:28:33,970 --> 00:28:47,940
know about occurred after this but then

00:28:36,130 --> 00:28:47,940
as I said nothing in the plans yeah

00:29:01,820 --> 00:29:10,080
now so there is a global ml file that

00:29:07,950 --> 00:29:13,529
has your environment information like

00:29:10,080 --> 00:29:15,239
these are my service clients and then my

00:29:13,529 --> 00:29:18,029
log file log level and all those things

00:29:15,239 --> 00:29:20,369
and since we're you cluster we have a

00:29:18,029 --> 00:29:23,899
lot of options to specify the volume

00:29:20,369 --> 00:29:26,779
configuration in pleasure as well but

00:29:23,899 --> 00:29:29,489
each test case can have its own

00:29:26,779 --> 00:29:32,279
configurations that you can specify in

00:29:29,489 --> 00:29:33,869
the ML format in the doc string there so

00:29:32,279 --> 00:29:35,789
before running a test case we actually

00:29:33,869 --> 00:29:37,879
at the beginning of running all the

00:29:35,789 --> 00:29:40,169
tests we read the doc string and then we

00:29:37,879 --> 00:29:42,359
parse it yamel mean patch it through

00:29:40,169 --> 00:29:45,929
llaman and then make decisions couple of

00:29:42,359 --> 00:29:48,389
based on that so but then again we have

00:29:45,929 --> 00:29:50,489
very few of mean like right now we have

00:29:48,389 --> 00:29:52,499
only three options and those are all

00:29:50,489 --> 00:29:55,049
cluster specific because the test case

00:29:52,499 --> 00:29:57,539
is written for cluster but then you a

00:29:55,049 --> 00:30:02,940
chili can make use of I mean write your

00:29:57,539 --> 00:30:05,580
own fields in the ML format and then

00:30:02,940 --> 00:30:07,379
make decisions on that but then you will

00:30:05,580 --> 00:30:09,359
have to write that config parser part

00:30:07,379 --> 00:30:11,009
for that whatever it is written you have

00:30:09,359 --> 00:30:12,659
to have a conflict I mean you have to

00:30:11,009 --> 00:30:17,609
pass it and read it and make decisions

00:30:12,659 --> 00:30:21,389
based on that there is no yamel file

00:30:17,609 --> 00:30:23,220
separate for a test case that's the one

00:30:21,389 --> 00:30:27,720
for particular what that particular case

00:30:23,220 --> 00:30:30,509
I mean it doesn't and it makes sense to

00:30:27,720 --> 00:30:32,399
have the test case and its related

00:30:30,509 --> 00:30:34,710
metadata together I mean it's related

00:30:32,399 --> 00:30:40,489
information in the same file at the same

00:30:34,710 --> 00:30:40,489
place yeah

00:30:52,030 --> 00:31:06,830
no I didn't understand okay run run

00:31:02,810 --> 00:31:08,450
tests yeah so provisioning and teardown

00:31:06,830 --> 00:31:11,920
you can use anything you are you like

00:31:08,450 --> 00:31:11,920
it's not tied to particular

00:31:29,720 --> 00:31:31,720
ah

00:31:37,480 --> 00:31:41,440
yeah I mean but then you have to have

00:31:39,280 --> 00:31:43,870
test cases for that but but yeah I mean

00:31:41,440 --> 00:31:45,549
you can but if this stuff doesn't take

00:31:43,870 --> 00:31:46,840
care of any package installations and

00:31:45,549 --> 00:31:50,280
everything you have if you want to do

00:31:46,840 --> 00:31:53,530
that you have to write that module or

00:31:50,280 --> 00:31:55,630
functions or whatever to do that in in

00:31:53,530 --> 00:31:57,340
list of yourself right now it does not

00:31:55,630 --> 00:31:59,530
do any package installation that is all

00:31:57,340 --> 00:32:02,260
kept separate so you can use anything

00:31:59,530 --> 00:32:06,419
you can use ansible you can use whatever

00:32:02,260 --> 00:32:14,740
you want to install the packages and

00:32:06,419 --> 00:32:23,590
softwares yeah just the test case just

00:32:14,740 --> 00:32:27,429
the test case test cases and stuff no

00:32:23,590 --> 00:32:29,520
questions right thank you thanks for

00:32:27,429 --> 00:32:29,520
coming

00:45:06,050 --> 00:45:08,110

YouTube URL: https://www.youtube.com/watch?v=WItk4xf4ZtA


