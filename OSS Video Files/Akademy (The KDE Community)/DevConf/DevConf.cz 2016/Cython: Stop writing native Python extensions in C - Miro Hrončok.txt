Title: Cython: Stop writing native Python extensions in C - Miro Hrončok
Publication date: 2016-02-11
Playlist: DevConf.cz 2016
Description: 
	Cython [1] let's you write native Python extensions in a syntax very similar to Python itself. It compiles your code to C and gives you the performance of C (or C++) while keeping the coding itself easy and Pythonistic. You can use Cython to write performance focused parts of your Python project or to create nice Python interfaces for C or C++ libraries, without the need of going mad using the Python C API.

This workshop is interned for programmers already familiar with the Python language, who have no or very small knowledge of Cython.

Live demos are part of the session - the entire session is mostly demos.

[1] http://cython.org/

Presentation: http://bit.ly/1SLYqzn
Captions: 
	00:00:06,080 --> 00:00:08,080
Oh

00:03:53,310 --> 00:04:07,709
sumbitchin observer

00:05:37,860 --> 00:05:47,699
like today you gotta tell me go read as

00:05:42,069 --> 00:05:47,699
a tornado potential

00:07:00,720 --> 00:07:11,710
sorry guys okay what time is it 10 ma ma

00:07:09,390 --> 00:07:14,170
session chair I want to get some

00:07:11,710 --> 00:07:19,140
breakfast I have no idea how to switch

00:07:14,170 --> 00:07:19,140
the display to this computer any ideas

00:07:27,450 --> 00:07:33,990
Rhonda put a chihuahua a lottery

00:07:30,070 --> 00:07:33,990
song she never put a table sushi oh yeah

00:07:35,520 --> 00:07:59,070
yeah okay so hello everybody my name is

00:07:57,280 --> 00:08:01,800
Mira her truck I work at Red Hat

00:07:59,070 --> 00:08:06,669
remotely from Prague for the burn office

00:08:01,800 --> 00:08:09,190
thank you and this is top or rupture

00:08:06,669 --> 00:08:11,020
that's not called site and stop writing

00:08:09,190 --> 00:08:13,240
native vitamix tensions in see I

00:08:11,020 --> 00:08:15,190
realized so I prepared a slice later

00:08:13,240 --> 00:08:17,919
that native extension it's not a thing

00:08:15,190 --> 00:08:19,540
but till you are here so you probably

00:08:17,919 --> 00:08:22,090
knew what i meant or at least you think

00:08:19,540 --> 00:08:27,729
something what I meant is extension

00:08:22,090 --> 00:08:29,440
modules but yeah first of all we do a

00:08:27,729 --> 00:08:31,270
little exercise because yesterday there

00:08:29,440 --> 00:08:36,159
was a party and as early in the morning

00:08:31,270 --> 00:08:38,860
so you think of your Python skills and

00:08:36,159 --> 00:08:41,050
then you raise your hand of one two

00:08:38,860 --> 00:08:42,849
three or four fingers is there anybody

00:08:41,050 --> 00:08:47,800
here who is not able to do that because

00:08:42,849 --> 00:08:51,010
of some okay fig it so then you raise

00:08:47,800 --> 00:08:54,070
like something like this and then you

00:08:51,010 --> 00:08:55,720
pair yourself little buddy so if you are

00:08:54,070 --> 00:08:58,210
beginner you should have a very

00:08:55,720 --> 00:09:01,140
experienced buddy and you will work on

00:08:58,210 --> 00:09:03,000
stuff I'll tell you to work on together

00:09:01,140 --> 00:09:05,880
preferably

00:09:03,000 --> 00:09:08,160
the more experienced guys should stand

00:09:05,880 --> 00:09:10,230
up and seek some beginners because for

00:09:08,160 --> 00:09:12,720
beginners it might be awkward to seek

00:09:10,230 --> 00:09:14,100
some expert guys I know this is the

00:09:12,720 --> 00:09:15,780
awkward finger and workshop you're

00:09:14,100 --> 00:09:17,760
probably sitting next to your friend or

00:09:15,780 --> 00:09:20,000
something like that but this also make

00:09:17,760 --> 00:09:23,520
sure that you do not talk about your

00:09:20,000 --> 00:09:25,140
other projects well you are having this

00:09:23,520 --> 00:09:27,270
workshop is this fine with you or

00:09:25,140 --> 00:09:29,850
nobody's moving or raising any hands I

00:09:27,270 --> 00:09:33,630
mean it you're not going to start

00:09:29,850 --> 00:09:38,040
without three like at the same time and

00:09:33,630 --> 00:09:41,430
you don't need to do that but while you

00:09:38,040 --> 00:09:44,370
are not doing it apparently you can go

00:09:41,430 --> 00:09:46,410
to github and grab this repository if

00:09:44,370 --> 00:09:51,650
there is a problem with connection I

00:09:46,410 --> 00:09:55,260
have one USB stick with the data and

00:09:51,650 --> 00:09:57,090
more empty USB sticks without the data

00:09:55,260 --> 00:10:02,210
so I can hand it to somebody and then we

00:09:57,090 --> 00:10:04,950
can distribute it thank you very much so

00:10:02,210 --> 00:10:08,000
let's just sit here for a couple of

00:10:04,950 --> 00:10:12,810
minutes before you start doing this and

00:10:08,000 --> 00:10:16,530
see them proly I mean f I see no hands

00:10:12,810 --> 00:10:21,000
and I really mean it raise your hands I

00:10:16,530 --> 00:10:23,339
I think myself number four and establish

00:10:21,000 --> 00:10:25,500
what guru is if you have multiple PI two

00:10:23,339 --> 00:10:27,990
projects and get help and stuff then

00:10:25,500 --> 00:10:32,790
it's fine you're a guru let's think

00:10:27,990 --> 00:10:35,850
about it like that now everybody looks

00:10:32,790 --> 00:10:39,210
at me and not everybody can pair with me

00:10:35,850 --> 00:10:43,530
so just look at each other and keep

00:10:39,210 --> 00:10:46,620
their hands there yeah yeah your

00:10:43,530 --> 00:10:49,980
manliness number 10 we have number minus

00:10:46,620 --> 00:10:52,350
10 so we can pair up somebody okay now

00:10:49,980 --> 00:10:55,020
look at each other in please / do we

00:10:52,350 --> 00:10:58,680
have some ones over here cool do we have

00:10:55,020 --> 00:11:00,960
some force for one you sitting next to

00:10:58,680 --> 00:11:04,770
each other you are done that's how

00:11:00,960 --> 00:11:10,320
you're all okay can some form seek this

00:11:04,770 --> 00:11:12,810
guy over here please it would really

00:11:10,320 --> 00:11:15,480
help me if you follow my instructions

00:11:12,810 --> 00:11:16,440
but if you are not interested we can go

00:11:15,480 --> 00:11:22,430
home

00:11:16,440 --> 00:11:22,430
I mean it's Sunday morning guys

00:11:31,399 --> 00:11:40,200
okay whatever do you at least have the

00:11:37,769 --> 00:11:43,730
the repository cloned or something or is

00:11:40,200 --> 00:11:48,200
that a problem as long you got okay

00:11:43,730 --> 00:11:50,700
there are several files in the repo I

00:11:48,200 --> 00:11:53,040
will have some code examples in the

00:11:50,700 --> 00:11:57,750
slides and you will find them in this

00:11:53,040 --> 00:12:00,380
file all of them so if you want to like

00:11:57,750 --> 00:12:02,730
copy paste something you don't need to

00:12:00,380 --> 00:12:06,089
letter by letter or copy it from the

00:12:02,730 --> 00:12:12,870
screen you can use the this file and

00:12:06,089 --> 00:12:14,910
seek the code example in it also do you

00:12:12,870 --> 00:12:17,040
have seitan and I python and stuff like

00:12:14,910 --> 00:12:27,959
that on your computer or anybody need a

00:12:17,040 --> 00:12:31,040
life fedora or whatever with this seitan

00:12:27,959 --> 00:12:36,680
Oh packages Python free this item and

00:12:31,040 --> 00:12:36,680
probably capital C as well I'm not sure

00:12:37,190 --> 00:12:43,410
item yeah that's it if there are

00:12:41,519 --> 00:12:46,290
troubles with the connection about the

00:12:43,410 --> 00:12:48,000
packages we can boot some like systems

00:12:46,290 --> 00:12:50,390
that should probably already have those

00:12:48,000 --> 00:12:50,390
packages

00:12:54,060 --> 00:12:59,980
meanwhile ever site on what it is you

00:12:58,270 --> 00:13:02,640
can find more information on Santa in

00:12:59,980 --> 00:13:06,850
the dark it's a programming language

00:13:02,640 --> 00:13:10,990
which is similar to python and you can

00:13:06,850 --> 00:13:14,830
type statically using types from C or

00:13:10,990 --> 00:13:17,130
C++ or maybe even Fortran but i have no

00:13:14,830 --> 00:13:20,590
knowledge of forum so just forget it and

00:13:17,130 --> 00:13:24,100
it's also a compiler from this site on

00:13:20,590 --> 00:13:27,370
language to c or c++ depending on what

00:13:24,100 --> 00:13:31,480
typing are using and it compels the

00:13:27,370 --> 00:13:34,270
stuff to python extension module or even

00:13:31,480 --> 00:13:38,710
two standalone apps but those standalone

00:13:34,270 --> 00:13:41,760
apps will still require Python runtime

00:13:38,710 --> 00:13:44,890
and libraries so it's not so stand alone

00:13:41,760 --> 00:13:48,760
when you write tighten it feels like

00:13:44,890 --> 00:13:52,630
item but it works like see so you had

00:13:48,760 --> 00:13:57,070
the Python experience as a programmer

00:13:52,630 --> 00:14:01,030
but then you get the profit of boost and

00:13:57,070 --> 00:14:04,770
stuff like that from see yuksek force

00:14:01,030 --> 00:14:07,990
here you can get sec Falls I don't know

00:14:04,770 --> 00:14:11,290
if you miss segfaults from python this

00:14:07,990 --> 00:14:13,780
is a way to do it easily all you need st

00:14:11,290 --> 00:14:15,700
I don't know access and index in an

00:14:13,780 --> 00:14:23,920
array that's out of bounds and you get a

00:14:15,700 --> 00:14:25,840
second Wow okay i have read this very

00:14:23,920 --> 00:14:27,310
good book and if you are really

00:14:25,840 --> 00:14:29,440
interested in to siphon after this

00:14:27,310 --> 00:14:32,230
workshop i really recommend to getting

00:14:29,440 --> 00:14:34,060
it and it's a very good book and you can

00:14:32,230 --> 00:14:36,100
get all the information you need just

00:14:34,060 --> 00:14:41,650
workshop will be only a little taste of

00:14:36,100 --> 00:14:44,470
seitan if you how many of you have ever

00:14:41,650 --> 00:14:46,950
written an extension module for python

00:14:44,470 --> 00:14:51,370
and crc class pass or something on it

00:14:46,950 --> 00:14:55,990
feel not many not a source yeah how many

00:14:51,370 --> 00:14:58,540
ever seen some sources at least how okay

00:14:55,990 --> 00:15:02,320
so for those who haven't seen any

00:14:58,540 --> 00:15:04,660
sources you are lucky it yet do you

00:15:02,320 --> 00:15:06,670
agree yeah it's ugly

00:15:04,660 --> 00:15:09,009
you cannot write it you cannot read it

00:15:06,670 --> 00:15:14,829
you will try to poke your eyes out and

00:15:09,009 --> 00:15:18,370
everything so never mind if you want to

00:15:14,829 --> 00:15:23,050
accent Python with C or C++ you can use

00:15:18,370 --> 00:15:24,850
this thing and usually you do it because

00:15:23,050 --> 00:15:27,100
of performance or because you need to

00:15:24,850 --> 00:15:30,730
interact with c or c pi plus libraries

00:15:27,100 --> 00:15:33,519
or a code you write a seek out you

00:15:30,730 --> 00:15:36,129
include python h and then you do a lot

00:15:33,519 --> 00:15:37,720
of crazy dancing to create the objects

00:15:36,129 --> 00:15:40,329
and classes in language that doesn't

00:15:37,720 --> 00:15:42,550
support them and stuff like that it

00:15:40,329 --> 00:15:44,800
hurts to write it hurts to read it hurts

00:15:42,550 --> 00:15:46,980
to maintain and if you want to keep it

00:15:44,800 --> 00:15:51,879
compatible with legacy Python and Python

00:15:46,980 --> 00:15:56,110
it's almost it's possible but it's

00:15:51,879 --> 00:15:58,660
harder than the normal Python code sitel

00:15:56,110 --> 00:16:00,579
makes all of this easy it's easy to

00:15:58,660 --> 00:16:02,529
write it's easy to read it easy to

00:16:00,579 --> 00:16:06,509
maintain and it's easy to keep it both

00:16:02,529 --> 00:16:11,189
compatible with legacy Python Python

00:16:06,509 --> 00:16:14,560
this is an example of Python code is

00:16:11,189 --> 00:16:19,480
here anybody who is not capable of

00:16:14,560 --> 00:16:23,800
comprehending this kind of code great so

00:16:19,480 --> 00:16:26,290
let's see fibonacci sequence stuff it

00:16:23,800 --> 00:16:28,540
doesn't generate a sequence it will just

00:16:26,290 --> 00:16:31,769
get you the enth number of the sequence

00:16:28,540 --> 00:16:36,360
by generating to sync plants internally

00:16:31,769 --> 00:16:39,250
higher the number longer it takes and

00:16:36,360 --> 00:16:42,490
the code is pretty easy you just start

00:16:39,250 --> 00:16:45,939
with 0 and 1 and then you just you know

00:16:42,490 --> 00:16:49,180
count it if you get this code you can

00:16:45,939 --> 00:16:55,449
copy it from the front of sytan prx file

00:16:49,180 --> 00:16:59,589
and you paste it into ipython let me see

00:16:55,449 --> 00:17:01,509
it is this very first ring if you copy

00:16:59,589 --> 00:17:05,850
something and you run I Python or

00:17:01,509 --> 00:17:10,659
something like that you can just use

00:17:05,850 --> 00:17:12,990
this magic because if you paste it it

00:17:10,659 --> 00:17:17,500
will not work now we have this

00:17:12,990 --> 00:17:18,790
functional in here and I can just see

00:17:17,500 --> 00:17:26,980
stuff like to

00:17:18,790 --> 00:17:32,170
free for etc and if I run 90 it is very

00:17:26,980 --> 00:17:35,650
large number and I can ease I can each

00:17:32,170 --> 00:17:39,700
time it which is also my Python think so

00:17:35,650 --> 00:17:45,550
i can for example 1 190 and i can use

00:17:39,700 --> 00:17:47,380
time in it and i don't know why but if

00:17:45,550 --> 00:17:51,010
you time it it takes like 10 times more

00:17:47,380 --> 00:17:53,140
time but it times it anyway there are

00:17:51,010 --> 00:17:56,560
some there are some numbers about how

00:17:53,140 --> 00:17:58,510
long does it take it says / lube and it

00:17:56,560 --> 00:18:00,340
says some number I don't know what his

00:17:58,510 --> 00:18:03,340
number really means but if you compare

00:18:00,340 --> 00:18:05,820
two results of time it it actually gives

00:18:03,340 --> 00:18:11,020
you some idea what's faster or slower

00:18:05,820 --> 00:18:14,980
now a good thing about Sidon is that

00:18:11,020 --> 00:18:17,290
this is valid citing code everything

00:18:14,980 --> 00:18:19,360
that's valid Python code is valid citing

00:18:17,290 --> 00:18:23,400
code I think everything almost

00:18:19,360 --> 00:18:27,450
everything normal so we can take it and

00:18:23,400 --> 00:18:34,450
we can maybe compile it with seitan and

00:18:27,450 --> 00:18:37,900
run it but be to make it like / forever

00:18:34,450 --> 00:18:40,360
better we should add static typing mmm

00:18:37,900 --> 00:18:42,400
you can see now on the top it's the

00:18:40,360 --> 00:18:44,770
Python thing and on the bottom is the

00:18:42,400 --> 00:18:49,270
cycling thing and there are a few move

00:18:44,770 --> 00:18:51,700
more things the the argument to the

00:18:49,270 --> 00:18:56,160
function is no longer just a letter it's

00:18:51,700 --> 00:18:59,440
an integer and then you have an e

00:18:56,160 --> 00:19:01,690
keyword not down in Python and it's c

00:18:59,440 --> 00:19:05,560
def basically its meaning i am defining

00:19:01,690 --> 00:19:07,780
this C variable and I or declaring and

00:19:05,560 --> 00:19:11,800
it's going to be an integer and it's

00:19:07,780 --> 00:19:14,350
going to be this letter or work also you

00:19:11,800 --> 00:19:17,320
can do multiple and once on the second

00:19:14,350 --> 00:19:20,950
line the keys are going to be long

00:19:17,320 --> 00:19:24,840
integers and it's going to be a and B

00:19:20,950 --> 00:19:24,840
and they gonna have some values and

00:19:25,710 --> 00:19:30,490
that's it otherwise the coat stays the

00:19:29,500 --> 00:19:33,760
same

00:19:30,490 --> 00:19:36,790
and if you want to just try it quickly

00:19:33,760 --> 00:19:39,429
in the ipython you can load an extension

00:19:36,790 --> 00:19:41,410
called seitan magic I don't know where

00:19:39,429 --> 00:19:43,210
it comes from but i guess i'm taylor

00:19:41,410 --> 00:19:47,130
avenue in style seitan and I pipe in

00:19:43,210 --> 00:19:52,030
bulk it just there and then you can use

00:19:47,130 --> 00:19:54,160
three percent marks and seitan and then

00:19:52,030 --> 00:19:59,650
this thing is going to be compiled like

00:19:54,160 --> 00:20:06,760
when you define it so if I just go and

00:19:59,650 --> 00:20:12,580
grab this all thing and go here and go

00:20:06,760 --> 00:20:16,960
based there is an syntax error maybe you

00:20:12,580 --> 00:20:25,540
have to do this before you paste and now

00:20:16,960 --> 00:20:30,340
just copied without it yet now I have

00:20:25,540 --> 00:20:33,910
this function you can see I can run it

00:20:30,340 --> 00:20:38,590
and it gives some results if i give it

00:20:33,910 --> 00:20:41,080
90 and i scroll back to 90 it ends with

00:20:38,590 --> 00:20:46,570
zero and stars of three looks like the

00:20:41,080 --> 00:20:50,850
same number and you can of course a time

00:20:46,570 --> 00:20:50,850
it i will time again the original one

00:20:52,320 --> 00:21:02,110
and now I going to time the the you one

00:20:58,650 --> 00:21:06,190
and you can see we are talking about

00:21:02,110 --> 00:21:09,160
tens of microseconds in here and about

00:21:06,190 --> 00:21:11,710
hundreds of nanoseconds in here in case

00:21:09,160 --> 00:21:17,470
you don't know nanoseconds are smaller

00:21:11,710 --> 00:21:21,520
than microseconds 1,000 of them to

00:21:17,470 --> 00:21:25,900
create one so this is like I don't know

00:21:21,520 --> 00:21:30,460
two magnitudes or whatever boost and all

00:21:25,900 --> 00:21:33,730
we did is we took the coat and we edit

00:21:30,460 --> 00:21:38,290
some some keywords and make it static of

00:21:33,730 --> 00:21:41,950
course some view things might happen if

00:21:38,290 --> 00:21:44,350
you use site fit and you just give it a

00:21:41,950 --> 00:21:47,350
string I have no idea what

00:21:44,350 --> 00:21:48,940
happen I didn't try it before it's an

00:21:47,350 --> 00:21:52,240
exception and not in seg fault which is

00:21:48,940 --> 00:21:54,910
cool what happens if I just go here and

00:21:52,240 --> 00:21:58,410
use the original one as another

00:21:54,910 --> 00:22:02,559
exception but the same time typer oh so

00:21:58,410 --> 00:22:09,429
that's it but maybe if the code would be

00:22:02,559 --> 00:22:12,250
different you could get real stuff okay

00:22:09,429 --> 00:22:15,100
normally you don't use site and magic

00:22:12,250 --> 00:22:17,610
because it's magic and you don't use

00:22:15,100 --> 00:22:22,030
magic in your code usually if you don't

00:22:17,610 --> 00:22:24,520
study at Hogwarts but so if you have a

00:22:22,030 --> 00:22:27,780
module and you install it with setup I

00:22:24,520 --> 00:22:32,679
and set up tools you can use this

00:22:27,780 --> 00:22:35,080
dancing around to make it work you just

00:22:32,679 --> 00:22:39,340
type set up by install and everything

00:22:35,080 --> 00:22:42,100
compounds there is an easy way is your

00:22:39,340 --> 00:22:44,049
ray it's called site nice but it doesn't

00:22:42,100 --> 00:22:46,900
work with set of tools in it only works

00:22:44,049 --> 00:22:48,850
with these details and mostly now when

00:22:46,900 --> 00:22:51,039
you call these details setuptools is

00:22:48,850 --> 00:22:54,010
going to be cold instead so this is a

00:22:51,039 --> 00:22:57,070
better thing to call the the new things

00:22:54,010 --> 00:22:59,620
are the second line you from cycling dis

00:22:57,070 --> 00:23:02,289
utils you import build extension and

00:22:59,620 --> 00:23:04,179
then he says in setup that that build

00:23:02,289 --> 00:23:05,559
extension is both extension it's a

00:23:04,179 --> 00:23:07,480
little bit more or better personal

00:23:05,559 --> 00:23:09,970
supposed to be probably normally and

00:23:07,480 --> 00:23:11,950
then you just give it an extension the

00:23:09,970 --> 00:23:15,970
name and the name of the file you

00:23:11,950 --> 00:23:18,130
usually use iyx extension for silent

00:23:15,970 --> 00:23:20,080
code and a good fingers to either

00:23:18,130 --> 00:23:22,230
classifier but it's not something that

00:23:20,080 --> 00:23:26,110
is really important for this to run

00:23:22,230 --> 00:23:29,110
saying it's written in this item if you

00:23:26,110 --> 00:23:32,409
have this in setup I then when you run

00:23:29,110 --> 00:23:35,650
set up by install set up by bill next or

00:23:32,409 --> 00:23:38,679
whatever that it works the only problem

00:23:35,650 --> 00:23:41,799
i found is if you have install requires

00:23:38,679 --> 00:23:44,020
in your setup file and you say site on

00:23:41,799 --> 00:23:46,330
inside and then somebody goes and

00:23:44,020 --> 00:23:51,220
doesn't have seitan and goes pip install

00:23:46,330 --> 00:23:53,409
whatever and it produces an importer or

00:23:51,220 --> 00:23:55,659
on the second line because when the file

00:23:53,409 --> 00:23:57,500
is parsed you don't have sighting yet

00:23:55,659 --> 00:23:59,990
and stuff like that so if you

00:23:57,500 --> 00:24:01,820
want to like work around it you have to

00:23:59,990 --> 00:24:05,170
do some little dancing like trying to

00:24:01,820 --> 00:24:09,610
import it first and stuff like that so

00:24:05,170 --> 00:24:12,560
now about typing this is a Python code

00:24:09,610 --> 00:24:17,600
that's also cycling code nothing is

00:24:12,560 --> 00:24:19,910
typed and like by e by saying it but

00:24:17,600 --> 00:24:22,490
things have typed right the B is the

00:24:19,910 --> 00:24:26,450
list for example but if you want to type

00:24:22,490 --> 00:24:29,680
thing statically in seitan you have to

00:24:26,450 --> 00:24:32,780
see that you already seen it most of the

00:24:29,680 --> 00:24:37,100
types has like normal names you would

00:24:32,780 --> 00:24:40,190
expect usually sometimes it's like

00:24:37,100 --> 00:24:42,110
Python and see so if you need to have a

00:24:40,190 --> 00:24:43,970
float in Python and you want to have a

00:24:42,110 --> 00:24:45,800
double precision you put a here double

00:24:43,970 --> 00:24:51,560
because that's the c-type and stuff like

00:24:45,800 --> 00:24:53,990
that it's also possible to declare them

00:24:51,560 --> 00:24:55,970
like on the same line multiple things

00:24:53,990 --> 00:24:57,830
any it's also possible to give them

00:24:55,970 --> 00:25:01,940
somebody's you seen it in the Fibonacci

00:24:57,830 --> 00:25:04,040
example there is nothing really good

00:25:01,940 --> 00:25:06,620
about is the thing is here you can see

00:25:04,040 --> 00:25:10,330
long int and before there was just a

00:25:06,620 --> 00:25:10,330
long it's basically the same thing

00:25:17,460 --> 00:25:23,899
like mean like the number in the name of

00:25:20,039 --> 00:25:37,830
the type yes I'm not sure about it Oh

00:25:23,899 --> 00:25:41,130
probably not okay I don't know the

00:25:37,830 --> 00:25:44,279
answer to this question sorry probably

00:25:41,130 --> 00:25:46,289
good idea is to go to documentation of

00:25:44,279 --> 00:25:49,110
seitan which is on dogs site and drunk

00:25:46,289 --> 00:25:51,659
and try to look at them I never really

00:25:49,110 --> 00:26:08,990
needed such press like to have the exact

00:25:51,659 --> 00:26:13,529
idea how long these types are thank you

00:26:08,990 --> 00:26:16,010
so pointers are raised and built now so

00:26:13,529 --> 00:26:19,169
if you need a pointer you just put

00:26:16,010 --> 00:26:21,450
asterisks before the variable name which

00:26:19,169 --> 00:26:23,700
is probably the same way you do it and

00:26:21,450 --> 00:26:27,720
see if you need like a pointer to a

00:26:23,700 --> 00:26:29,850
pointer which feels very serious to have

00:26:27,720 --> 00:26:32,340
pointers to pointers to pointers he just

00:26:29,850 --> 00:26:37,159
multiplies the stars even if you like

00:26:32,340 --> 00:26:41,520
pointers to functions you can do it and

00:26:37,159 --> 00:26:44,159
if you need a static array you can hear

00:26:41,520 --> 00:26:46,460
you can use size t so maybe you can also

00:26:44,159 --> 00:26:49,380
use in whatever number also

00:26:46,460 --> 00:26:52,490
automatically I don't know you just say

00:26:49,380 --> 00:26:55,799
there are it's an area of free elements

00:26:52,490 --> 00:26:57,929
you can only use constants and numbers

00:26:55,799 --> 00:27:00,029
in here you cannot make it based on

00:26:57,929 --> 00:27:06,000
variable because cycling translates to

00:27:00,029 --> 00:27:08,610
see 89 and it doesn't work now here you

00:27:06,000 --> 00:27:12,720
can see if you want to get the pointer

00:27:08,610 --> 00:27:14,190
to thank you Sam percent and before

00:27:12,720 --> 00:27:17,279
which is probably also the same way you

00:27:14,190 --> 00:27:19,890
do it and see but you cannot do

00:27:17,279 --> 00:27:21,720
reference value you're like sorry get

00:27:19,890 --> 00:27:24,510
the value out of the pointer by stars

00:27:21,720 --> 00:27:26,730
because then has a different meaning in

00:27:24,510 --> 00:27:30,450
Python probably so you can always use

00:27:26,730 --> 00:27:34,200
like 0l

00:27:30,450 --> 00:27:37,110
of NRA and that gives you the value that

00:27:34,200 --> 00:27:40,020
works in situ there is also an operator

00:27:37,110 --> 00:27:42,630
for that and but you have to import from

00:27:40,020 --> 00:27:44,610
side to the dot operator import the

00:27:42,630 --> 00:27:47,820
reference and then the codes get very

00:27:44,610 --> 00:27:51,000
ugly so this is probably better one

00:27:47,820 --> 00:27:54,840
special type is bent which is like a

00:27:51,000 --> 00:27:58,320
boolean in feature in your site and code

00:27:54,840 --> 00:28:03,180
it's true or false but in the generated

00:27:58,320 --> 00:28:08,430
C code is going to be 0 0 or 1 it works

00:28:03,180 --> 00:28:13,620
as expected so true is anything but 0

00:28:08,430 --> 00:28:20,820
and force is 0 you can also have

00:28:13,620 --> 00:28:24,360
structure and unions and it's you can

00:28:20,820 --> 00:28:26,760
you can eat CDF or see typedef the only

00:28:24,360 --> 00:28:30,480
difference is with C typedef it's going

00:28:26,760 --> 00:28:32,070
to be a typedef struct and CM etc but

00:28:30,480 --> 00:28:36,060
from your site encode it works exactly

00:28:32,070 --> 00:28:38,250
the same you see that your name of the

00:28:36,060 --> 00:28:45,000
struct and name of the variable is the

00:28:38,250 --> 00:28:49,590
very last line if you want to initialize

00:28:45,000 --> 00:28:52,410
a struct you just you can use something

00:28:49,590 --> 00:28:54,750
like a constructor that's automatically

00:28:52,410 --> 00:28:57,240
get generated you can give it the

00:28:54,750 --> 00:29:00,960
positional arguments or name arguments

00:28:57,240 --> 00:29:04,320
or you can just get an e struct and then

00:29:00,960 --> 00:29:07,110
access each of those things inside and

00:29:04,320 --> 00:29:08,790
set them separately I have no idea what

00:29:07,110 --> 00:29:11,880
the initial value would be if it's going

00:29:08,790 --> 00:29:14,160
to be 0 or some random thing but is in

00:29:11,880 --> 00:29:16,020
Forrest Gump if you don't initialize

00:29:14,160 --> 00:29:18,420
your memory you never know what you're

00:29:16,020 --> 00:29:21,540
going to get so probably better to

00:29:18,420 --> 00:29:26,030
always initialize the values and also

00:29:21,540 --> 00:29:28,980
you can just give a dictionary like to

00:29:26,030 --> 00:29:32,250
assign the dictionary to that struct and

00:29:28,980 --> 00:29:34,230
it works which is probably a good way if

00:29:32,250 --> 00:29:36,120
you have dictionaries in Python and you

00:29:34,230 --> 00:29:39,800
want to convert them to strikes you just

00:29:36,120 --> 00:29:39,800
do this and it works

00:29:40,060 --> 00:29:49,420
okay functions there are free type of or

00:29:44,440 --> 00:29:54,490
three kinds of functions def CAF and see

00:29:49,420 --> 00:29:57,520
PDF and def function is something you're

00:29:54,490 --> 00:30:00,340
going to use from Python later like you

00:29:57,520 --> 00:30:02,440
you write an insight on you compile your

00:30:00,340 --> 00:30:05,620
module then you import it from button

00:30:02,440 --> 00:30:10,090
and it works it has a pipeline interface

00:30:05,620 --> 00:30:12,400
if you see that for functions they will

00:30:10,090 --> 00:30:14,440
not be visible from Python you can only

00:30:12,400 --> 00:30:17,620
use this for your internal functions

00:30:14,440 --> 00:30:20,290
they they differ they have a return type

00:30:17,620 --> 00:30:23,590
as you can see see that it returns long

00:30:20,290 --> 00:30:25,720
but the Deaf doesn't return any type

00:30:23,590 --> 00:30:31,750
because it returns Python whatever

00:30:25,720 --> 00:30:34,240
object and this is faster inside but you

00:30:31,750 --> 00:30:36,160
cannot access it from from Python and if

00:30:34,240 --> 00:30:38,320
you need both if you want to access the

00:30:36,160 --> 00:30:40,510
function from inside your code in Sidon

00:30:38,320 --> 00:30:43,120
and also export it for others to use it

00:30:40,510 --> 00:30:45,100
from Python you can use see PDF which

00:30:43,120 --> 00:30:47,260
basically is the same thing as if you

00:30:45,100 --> 00:30:50,950
would like copy paste the code and have

00:30:47,260 --> 00:30:52,660
it with the return type and be louder so

00:30:50,950 --> 00:30:58,300
it's a shortcut so you don't have to use

00:30:52,660 --> 00:31:03,400
this repeat yourself if you want to have

00:30:58,300 --> 00:31:05,590
classes normally in Python and extension

00:31:03,400 --> 00:31:08,830
modules you don't have classes but you

00:31:05,590 --> 00:31:11,260
have extension types it has some

00:31:08,830 --> 00:31:14,310
differences for example if you have an

00:31:11,260 --> 00:31:18,790
object which is an instance of class and

00:31:14,310 --> 00:31:21,310
you just you can just give it new new

00:31:18,790 --> 00:31:23,530
variables inside like self dot whatever

00:31:21,310 --> 00:31:27,040
in the middle of the code this doesn't

00:31:23,530 --> 00:31:28,900
work here so everything that's a

00:31:27,040 --> 00:31:31,110
variable of the instance you have to

00:31:28,900 --> 00:31:35,590
define it at the beginning of the class

00:31:31,110 --> 00:31:39,610
so if we're going to use self dot NR we

00:31:35,590 --> 00:31:41,740
need to declare it in the beginning all

00:31:39,610 --> 00:31:44,230
these things are normally private by

00:31:41,740 --> 00:31:45,910
default you can make them public which

00:31:44,230 --> 00:31:49,000
means even from Python then you can

00:31:45,910 --> 00:31:52,630
reset them and read them by adding c def

00:31:49,000 --> 00:31:56,260
public double whatever or you can use a

00:31:52,630 --> 00:32:01,240
only witches read only for public no

00:31:56,260 --> 00:32:05,500
writable if it's fine with you you can

00:32:01,240 --> 00:32:08,650
use normal in it but if you're gonna do

00:32:05,500 --> 00:32:14,350
some sea magic you should always use sin

00:32:08,650 --> 00:32:16,660
it see in it and the only problem is if

00:32:14,350 --> 00:32:20,860
you like something like if there is an

00:32:16,660 --> 00:32:22,810
init self does not exist yet in Python

00:32:20,860 --> 00:32:25,540
and blah blah and now you are trying to

00:32:22,810 --> 00:32:28,120
access a memory and this could end up in

00:32:25,540 --> 00:32:30,790
some ugly segfaults if you like so you

00:32:28,120 --> 00:32:33,070
can use it to have sex but you don't

00:32:30,790 --> 00:32:36,730
want to have sex then you have to see in

00:32:33,070 --> 00:32:38,650
it and this makes sure this is like cold

00:32:36,730 --> 00:32:42,880
every time before in it and stuff like

00:32:38,650 --> 00:32:45,820
that and here we have a cool think we

00:32:42,880 --> 00:32:48,490
have a pointer to double which is

00:32:45,820 --> 00:32:51,400
session essentially a buffer of of

00:32:48,490 --> 00:32:56,880
doubles or array of doubles but we have

00:32:51,400 --> 00:32:59,200
to initialize it so we malach which is

00:32:56,880 --> 00:33:02,850
probably something you would use and see

00:32:59,200 --> 00:33:06,900
but to have it in ensighten you have to

00:33:02,850 --> 00:33:11,730
see imported and that's on the very top

00:33:06,900 --> 00:33:15,790
some lipsy is basically a wrapper in

00:33:11,730 --> 00:33:18,370
Sidon about lipsy so you from sleep see

00:33:15,790 --> 00:33:22,270
so to the lip you see import malloc and

00:33:18,370 --> 00:33:26,530
free to use it and you can eat size of

00:33:22,270 --> 00:33:30,940
for free and this double with asterisks

00:33:26,530 --> 00:33:33,010
in those apparent Isis and disgusting it

00:33:30,940 --> 00:33:37,270
has a little bit different syntax than

00:33:33,010 --> 00:33:40,000
from C for whatever reasons so you want

00:33:37,270 --> 00:33:43,210
to cast something you want to use HTML

00:33:40,000 --> 00:33:47,320
brackets or whatever they are called so

00:33:43,210 --> 00:33:50,290
when you Malik some memory then you

00:33:47,320 --> 00:33:53,350
should see a fat vent well it usually

00:33:50,290 --> 00:33:55,300
goes well today but sometimes you may be

00:33:53,350 --> 00:34:01,120
out of memory or whatever so you should

00:33:55,300 --> 00:34:02,950
race memory or for that and it's a good

00:34:01,120 --> 00:34:04,990
thing to free your memory if you don't

00:34:02,950 --> 00:34:05,710
want to get leaks for your sec faults to

00:34:04,990 --> 00:34:07,840
have something

00:34:05,710 --> 00:34:11,080
leak on your sexual sand whatever then

00:34:07,840 --> 00:34:15,330
you should you should free this thing so

00:34:11,080 --> 00:34:19,030
that's the method that's called dialogue

00:34:15,330 --> 00:34:21,760
these two methods have to be deaf Nazi

00:34:19,030 --> 00:34:24,040
def not see PDF I don't know why exactly

00:34:21,760 --> 00:34:31,060
is that but all the other metals can be

00:34:24,040 --> 00:34:32,980
whatever functions could be now this is

00:34:31,060 --> 00:34:37,089
not a talk it's a workshop so let's

00:34:32,980 --> 00:34:39,550
start do something we're going to use a

00:34:37,089 --> 00:34:41,290
knapsack problem which is a problem from

00:34:39,550 --> 00:34:45,990
combination or a combinatorial

00:34:41,290 --> 00:34:49,030
optimization it's a very common thing

00:34:45,990 --> 00:34:51,369
basically you have a pool of things and

00:34:49,030 --> 00:34:55,119
you have a knapsack of a given capacity

00:34:51,369 --> 00:34:59,230
and each of those things has the weight

00:34:55,119 --> 00:35:02,010
and cost and you just try to put more

00:34:59,230 --> 00:35:06,339
expensive combination into your backpack

00:35:02,010 --> 00:35:11,320
there are hundreds of algorithms to do

00:35:06,339 --> 00:35:14,530
is the easiest way is brute force so you

00:35:11,320 --> 00:35:17,290
just get every possible combination of

00:35:14,530 --> 00:35:21,240
those items you calculate the weight and

00:35:17,290 --> 00:35:24,160
the cost if it fits into your knapsack

00:35:21,240 --> 00:35:26,349
then you try to locate maximum cost of

00:35:24,160 --> 00:35:29,230
those and if it doesn't fit you just use

00:35:26,349 --> 00:35:32,020
a different combination this is of

00:35:29,230 --> 00:35:38,200
course exponential it takes a long time

00:35:32,020 --> 00:35:41,050
to do and if you have this Reaper clone

00:35:38,200 --> 00:35:48,910
from the beginning there is a little

00:35:41,050 --> 00:35:51,339
code in in the knapsack folder and there

00:35:48,910 --> 00:35:53,050
are some some fast like data loader and

00:35:51,339 --> 00:35:54,580
in it by you don't have to look at those

00:35:53,050 --> 00:36:00,820
if you don't want you and then there is

00:35:54,580 --> 00:36:02,770
sober by and see solar pie IX and it's

00:36:00,820 --> 00:36:04,900
the same code exactly the same code the

00:36:02,770 --> 00:36:10,530
only thing that changes is a name of the

00:36:04,900 --> 00:36:15,040
class just to make it clear this is the

00:36:10,530 --> 00:36:18,339
solver class that solves this problem by

00:36:15,040 --> 00:36:19,240
brute force it has a inert that takes

00:36:18,339 --> 00:36:25,050
the sack

00:36:19,240 --> 00:36:25,050
which is something that looks like this

00:36:25,140 --> 00:36:31,090
every SEC has an ID you don't need to

00:36:27,910 --> 00:36:33,280
even use an ID it has a count which is

00:36:31,090 --> 00:36:36,700
essentially the same thing as you ask

00:36:33,280 --> 00:36:39,340
how many items are in there it has a

00:36:36,700 --> 00:36:44,530
capacity and it has a list of other

00:36:39,340 --> 00:36:47,890
dicks that contains right and cost now

00:36:44,530 --> 00:36:50,380
if you initialize your sober and then

00:36:47,890 --> 00:36:53,160
you call solve it returns the maximum

00:36:50,380 --> 00:36:57,750
possible combination as endless list of

00:36:53,160 --> 00:37:00,520
boolean's and max cost which is the

00:36:57,750 --> 00:37:06,510
maximum custody you can fit in the

00:37:00,520 --> 00:37:09,940
knapsack sometimes multiple combinations

00:37:06,510 --> 00:37:12,670
yet can have the maximum cost of course

00:37:09,940 --> 00:37:20,160
but the maximum cost is deterministic

00:37:12,670 --> 00:37:24,700
for each net sike i will just heart this

00:37:20,160 --> 00:37:28,180
make it larger yeah the main routine is

00:37:24,700 --> 00:37:31,050
here solve it just saves the number of

00:37:28,180 --> 00:37:34,420
attempts so it's easier accessible and

00:37:31,050 --> 00:37:36,130
it says the maximum costs something

00:37:34,420 --> 00:37:40,030
negative because coast will be always

00:37:36,130 --> 00:37:43,750
positive and for each number in range

00:37:40,030 --> 00:37:47,290
from 0 to 2 to the power of number of

00:37:43,750 --> 00:37:50,050
items you generate a combination from

00:37:47,290 --> 00:37:52,030
that end which is basically a little

00:37:50,050 --> 00:37:56,470
coat that will take an integer and turn

00:37:52,030 --> 00:37:59,740
it into you list of bits and you

00:37:56,470 --> 00:38:02,710
calculate device and cost which is done

00:37:59,740 --> 00:38:04,630
like f there if this is true in the

00:38:02,710 --> 00:38:07,619
combination then you add the weight and

00:38:04,630 --> 00:38:10,869
cost them you get the final number and

00:38:07,619 --> 00:38:15,010
if it fits into the backpack and it's

00:38:10,869 --> 00:38:18,300
better than what we have set before we

00:38:15,010 --> 00:38:24,090
don't save two new costantini combo it's

00:38:18,300 --> 00:38:28,350
very easy code but it takes ages

00:38:24,090 --> 00:38:30,370
sometimes there's read me and has some

00:38:28,350 --> 00:38:33,460
some

00:38:30,370 --> 00:38:36,820
code snippets for bash this for examples

00:38:33,460 --> 00:38:40,750
python3 setup i build x in place make

00:38:36,820 --> 00:38:47,800
sure that you can run the code from this

00:38:40,750 --> 00:38:51,220
very folder this builds the sea server

00:38:47,800 --> 00:38:54,490
which is here and built it and now you

00:38:51,220 --> 00:38:58,930
have a this shared object file and you

00:38:54,490 --> 00:39:03,880
can import it then if i'm gonna call

00:38:58,930 --> 00:39:08,440
this thing now i'm solving the problem

00:39:03,880 --> 00:39:10,450
for some random data for the number in

00:39:08,440 --> 00:39:13,060
here means how many items are there

00:39:10,450 --> 00:39:16,000
possible to put like you have the pool

00:39:13,060 --> 00:39:18,490
of the items so if there's four you only

00:39:16,000 --> 00:39:20,680
have to choose from four items for Bruce

00:39:18,490 --> 00:39:22,810
for us means to you to the power of 4

00:39:20,680 --> 00:39:25,930
which is not a very large number so it

00:39:22,810 --> 00:39:29,140
was fast and see 10 and 15 was fast as

00:39:25,930 --> 00:39:31,330
well and number 20 is taking some time

00:39:29,140 --> 00:39:34,270
and it's going to get worse and it's

00:39:31,330 --> 00:39:37,090
going to get worse if you are bored you

00:39:34,270 --> 00:39:39,700
can just control see it and now you have

00:39:37,090 --> 00:39:43,090
some data for all the first except 20

00:39:39,700 --> 00:39:48,850
and more and now you can run it on

00:39:43,090 --> 00:39:52,480
seitan which is this and it works again

00:39:48,850 --> 00:39:55,660
it's also probably slow we don't know

00:39:52,480 --> 00:40:00,640
nothing about how much and now i'm going

00:39:55,660 --> 00:40:04,810
to just end it as well ok and now i have

00:40:00,640 --> 00:40:07,930
some i have measured the time and time

00:40:04,810 --> 00:40:14,590
and if you go to read me and you can get

00:40:07,930 --> 00:40:16,690
the this one last one you need a mascot

00:40:14,590 --> 00:40:21,430
lip if you don't have mud pot lip you

00:40:16,690 --> 00:40:28,360
have to get it from the repo and now you

00:40:21,430 --> 00:40:32,980
have x PDF and you can see based on the

00:40:28,360 --> 00:40:35,620
problem size the time how much Duke is a

00:40:32,980 --> 00:40:37,960
logarithmic scale so don't be surprised

00:40:35,620 --> 00:40:40,900
is almost linear it's actually very

00:40:37,960 --> 00:40:42,410
exponential and you can see the blue

00:40:40,900 --> 00:40:45,859
fingers Python

00:40:42,410 --> 00:40:49,069
the green Fink is a real or whatever is

00:40:45,859 --> 00:40:50,809
the number seitan and we didn't change

00:40:49,069 --> 00:40:54,470
the code and we get a little boost up

00:40:50,809 --> 00:40:56,690
for free just by compiling it and now if

00:40:54,470 --> 00:40:59,660
you want to get the better performance

00:40:56,690 --> 00:41:02,809
you need to add static typing you will

00:40:59,660 --> 00:41:05,569
never get by the thing that it is

00:41:02,809 --> 00:41:08,119
exponential even if you cite them and

00:41:05,569 --> 00:41:09,530
black magic and you cut your wrist on in

00:41:08,119 --> 00:41:11,000
the middle of cross road in the middle

00:41:09,530 --> 00:41:13,520
of the night it will still be

00:41:11,000 --> 00:41:16,130
exponential so only things we are

00:41:13,520 --> 00:41:19,400
changing is the multiplication constant

00:41:16,130 --> 00:41:22,490
for for the time and but it could be

00:41:19,400 --> 00:41:25,789
like thousand pastor or something like

00:41:22,490 --> 00:41:28,960
that so we are supposed to do now in

00:41:25,789 --> 00:41:33,020
your verbal form pairs on the beginning

00:41:28,960 --> 00:41:35,930
is to look at the Cecil roofing and try

00:41:33,020 --> 00:41:38,210
to optimize the code you're not trying

00:41:35,930 --> 00:41:40,520
to optimize the algorithm keep it naive

00:41:38,210 --> 00:41:43,250
as it is it's a very naive brute-force

00:41:40,520 --> 00:41:45,230
algorithm and you can get much faster

00:41:43,250 --> 00:41:47,170
and not even exponential things if you

00:41:45,230 --> 00:41:51,349
try guessing and stuff like that but

00:41:47,170 --> 00:41:55,670
just keep it as it is of course you can

00:41:51,349 --> 00:41:57,640
like rewrite this things but the the

00:41:55,670 --> 00:42:01,190
solve procedure should be the same thing

00:41:57,640 --> 00:42:04,400
for each number from 0 to 2 to the power

00:42:01,190 --> 00:42:06,680
of number of items minus 1 you just try

00:42:04,400 --> 00:42:09,369
to get the combination calculate weight

00:42:06,680 --> 00:42:13,160
and cost see if it fits and if it fits

00:42:09,369 --> 00:42:21,980
yeah you know and then if you if you do

00:42:13,160 --> 00:42:24,349
some changes you can important think

00:42:21,980 --> 00:42:26,839
when you do some changes to the code you

00:42:24,349 --> 00:42:29,450
have to run built X in place again

00:42:26,839 --> 00:42:32,329
you're probably not used to it if you

00:42:29,450 --> 00:42:34,039
are programming in Python mostly but now

00:42:32,329 --> 00:42:36,529
we are compiling the code so don't be

00:42:34,039 --> 00:42:38,690
scared that you have made changes to the

00:42:36,529 --> 00:42:41,750
files and the times are always the same

00:42:38,690 --> 00:42:44,299
every time you want to run it again you

00:42:41,750 --> 00:42:46,940
want to run this again I didn't do any

00:42:44,299 --> 00:42:51,500
changes so it says is up to date but if

00:42:46,940 --> 00:42:54,410
I would like go in here and do some very

00:42:51,500 --> 00:42:58,339
useful change maybe even a new line

00:42:54,410 --> 00:43:01,369
that will compile this again if you have

00:42:58,339 --> 00:43:03,980
a syntax error in seitan it should tell

00:43:01,369 --> 00:43:07,190
you and the lines are pretty

00:43:03,980 --> 00:43:09,020
self-explanatory you should probably be

00:43:07,190 --> 00:43:11,150
able to tell what's going on and what's

00:43:09,020 --> 00:43:17,000
the problem is if you are not just ask

00:43:11,150 --> 00:43:20,180
me or your fella over ever and let's try

00:43:17,000 --> 00:43:25,190
to put a very large distance between the

00:43:20,180 --> 00:43:27,650
two dots on on every column and each

00:43:25,190 --> 00:43:30,410
time the the distance between the dots

00:43:27,650 --> 00:43:32,960
is the same distances between those

00:43:30,410 --> 00:43:37,190
number on the left you just made it

00:43:32,960 --> 00:43:40,010
faster 10 times and as you can remember

00:43:37,190 --> 00:43:44,750
probably from the Fibonacci think we

00:43:40,010 --> 00:43:47,089
made it how like 100 faster so it should

00:43:44,750 --> 00:43:50,660
be able to do at least you got those

00:43:47,089 --> 00:43:52,309
steps I don't know for sure maybe this

00:43:50,660 --> 00:43:55,609
problem will not be able to get this

00:43:52,309 --> 00:43:59,119
much performance boost but since I guess

00:43:55,609 --> 00:44:02,839
it's a very it runs very often even more

00:43:59,119 --> 00:44:05,000
often than the Fibonacci Frank you

00:44:02,839 --> 00:44:08,950
should be probably even able to make the

00:44:05,000 --> 00:44:08,950
distance even larger

00:44:13,390 --> 00:44:20,950
if you have a stronger hardware you can

00:44:17,190 --> 00:44:25,450
let the calculation go further and

00:44:20,950 --> 00:44:29,130
further up to something like 40 but when

00:44:25,450 --> 00:44:33,070
my hardware the 40 thing on Python if I

00:44:29,130 --> 00:44:44,200
have to get an app to get it done and it

00:44:33,070 --> 00:44:45,820
took a long time in the meantime there

00:44:44,200 --> 00:44:49,360
are plenty other things you can do with

00:44:45,820 --> 00:44:52,180
seitan you like using C libraries

00:44:49,360 --> 00:44:54,010
interact with non fine and stuff like

00:44:52,180 --> 00:44:56,500
that I didn't cover this on the workshop

00:44:54,010 --> 00:44:59,650
because I think we just focus on one

00:44:56,500 --> 00:45:04,210
thing they have excellent documentation

00:44:59,650 --> 00:45:07,900
so just go to docs cited org or or get

00:45:04,210 --> 00:45:11,440
the book in the slice you have to slice

00:45:07,900 --> 00:45:15,640
into repo in the form of text file you

00:45:11,440 --> 00:45:17,920
know there is a link to a github repo

00:45:15,640 --> 00:45:20,140
that has examples from the book you can

00:45:17,920 --> 00:45:24,520
find it useful or if you want to contact

00:45:20,140 --> 00:45:26,920
me as mirror I dread head to come later

00:45:24,520 --> 00:45:28,840
if you want to contact me here don't

00:45:26,920 --> 00:45:33,090
write me emails just raise your hand or

00:45:28,840 --> 00:45:33,090
a shout at me it's going to be faster

00:45:34,290 --> 00:45:42,220
and I have some scarves here yeah so if

00:45:39,820 --> 00:45:45,130
you get some very good results at the

00:45:42,220 --> 00:45:53,230
end I have a scarf for you defcon think

00:45:45,130 --> 00:45:57,910
that looks like cometa por oh yeah few

00:45:53,230 --> 00:46:00,340
years back because i used this magic

00:45:57,910 --> 00:46:03,670
import from the library which if you can

00:46:00,340 --> 00:46:07,780
port it and install it then

00:46:03,670 --> 00:46:11,710
any module which is site on its it

00:46:07,780 --> 00:46:13,540
automatically compiled I can return it

00:46:11,710 --> 00:46:16,359
was very good for debugging and you know

00:46:13,540 --> 00:46:19,210
like anything but it doesn't seem to

00:46:16,359 --> 00:46:20,799
work anymore let's just look to the

00:46:19,210 --> 00:46:24,940
clever Brooke I know what do you mean

00:46:20,799 --> 00:46:27,880
big six import pics import yeah windows

00:46:24,940 --> 00:46:30,670
but here's combining on the five of

00:46:27,880 --> 00:46:33,640
fixing part maybe Europe change

00:46:30,670 --> 00:46:36,069
something in the time and the same thing

00:46:33,640 --> 00:46:39,930
it has an import pics apart you have to

00:46:36,069 --> 00:46:44,349
pick super install before importing yes

00:46:39,930 --> 00:46:48,930
and then you overhear any party or no

00:46:44,349 --> 00:46:51,579
deal and it's automatically you know

00:46:48,930 --> 00:46:55,210
just what will work for me on the head

00:46:51,579 --> 00:47:01,690
off any one which is out of date it

00:46:55,210 --> 00:47:05,799
seems like gone threads corrupt rest so

00:47:01,690 --> 00:47:10,329
you can create fresh in like normal siii

00:47:05,799 --> 00:47:12,760
press but then you can get some cool cig

00:47:10,329 --> 00:47:15,549
holes and stuff like that again I never

00:47:12,760 --> 00:47:22,390
I never did run in Perl here you can

00:47:15,549 --> 00:47:24,460
have your sec poses yeah basically what

00:47:22,390 --> 00:47:27,430
you can also probably use a thing I oh

00:47:24,460 --> 00:47:31,170
and you seek out from all these things

00:47:27,430 --> 00:47:35,859
inside there is a last chapter in here I

00:47:31,170 --> 00:47:38,859
looking able to finish yet it's called

00:47:35,859 --> 00:47:40,720
parallel programming in cyclin so if

00:47:38,859 --> 00:47:47,290
you're really interested in like short

00:47:40,720 --> 00:47:52,589
in unity products news program is like

00:47:47,290 --> 00:47:52,589
four pages only be able to read it even

00:47:56,640 --> 00:48:14,829
working on the buses and PhD paralyzed I

00:48:11,529 --> 00:48:22,019
would hope that you can use seitan to

00:48:14,829 --> 00:48:22,019
bypass the children from working

00:48:38,740 --> 00:48:45,289
okay yeah I have it in the slice but I

00:48:42,230 --> 00:48:47,809
forgot to tell it so if you have your

00:48:45,289 --> 00:48:51,160
cycling code which is on the beginning

00:48:47,809 --> 00:48:54,049
it's basically the same code SS Python

00:48:51,160 --> 00:48:57,559
you can ease annotate it's not in the

00:48:54,049 --> 00:49:03,680
slices on the readme and so you can ease

00:48:57,559 --> 00:49:06,430
seitan an update and the file you're

00:49:03,680 --> 00:49:12,700
going to annotate and this will produce

00:49:06,430 --> 00:49:16,420
HTML file you can open in a browser and

00:49:12,700 --> 00:49:20,569
as yellowish and more yellow issued gets

00:49:16,420 --> 00:49:24,020
it does black magic to know what type

00:49:20,569 --> 00:49:26,690
goes in so it does it basically means if

00:49:24,020 --> 00:49:29,420
you type it statically it's going to be

00:49:26,690 --> 00:49:32,780
less yellow and and if you click on the

00:49:29,420 --> 00:49:38,059
line somewhere this is the C code is

00:49:32,780 --> 00:49:41,510
generated just by this magic in it that

00:49:38,059 --> 00:49:43,940
can take anything but if you use it

00:49:41,510 --> 00:49:46,970
mirpur you essentially going to get

00:49:43,940 --> 00:49:50,089
anything the thing about the seitan and

00:49:46,970 --> 00:49:54,049
the sequel of the genre's is very long

00:49:50,089 --> 00:49:57,680
and very ugly but it's the because it

00:49:54,049 --> 00:50:02,210
tries to optimize it so if you are not

00:49:57,680 --> 00:50:05,089
every like if you some might say if I

00:50:02,210 --> 00:50:07,119
write my extensions in see directly it

00:50:05,089 --> 00:50:12,650
will always be better than seitan

00:50:07,119 --> 00:50:17,869
probably not i'm not sure so more yellow

00:50:12,650 --> 00:50:21,079
asians gets its worst it imports

00:50:17,869 --> 00:50:27,319
itertools which are never used I guess

00:50:21,079 --> 00:50:30,079
so you can just get rid of that and this

00:50:27,319 --> 00:50:33,500
is not so yellow it's just returns to

00:50:30,079 --> 00:50:38,000
things but yeah you can see here if you

00:50:33,500 --> 00:50:40,940
haven't seen any any C Python API this

00:50:38,000 --> 00:50:46,849
is how it looks like it's very nice and

00:50:40,940 --> 00:50:48,710
readable and stuff thank you for for a

00:50:46,849 --> 00:50:52,040
comment I can give you a scarf for

00:50:48,710 --> 00:50:59,060
just even if you don't want to type

00:50:52,040 --> 00:51:01,570
anything unless you already have one but

00:50:59,060 --> 00:51:01,570
you

00:51:33,210 --> 00:51:44,860
and you can have arrows and what happens

00:51:41,560 --> 00:51:49,390
if I want to use the library from see

00:51:44,860 --> 00:51:52,480
their terrorism it doesn't generate the

00:51:49,390 --> 00:51:57,250
spray you unfortunately have to create

00:51:52,480 --> 00:52:00,850
the vtx of PSD file in a HD file which

00:51:57,250 --> 00:52:03,460
is a Chancery a copy of the 8h file the

00:52:00,850 --> 00:52:06,370
file from zero super fast but you remove

00:52:03,460 --> 00:52:10,450
some unnecessary signal spring the

00:52:06,370 --> 00:52:13,300
problem see but it can change stuff in

00:52:10,450 --> 00:52:16,030
there and then you can see import this

00:52:13,300 --> 00:52:19,060
file and use the functions but I did

00:52:16,030 --> 00:52:22,120
when I want to get like the header file

00:52:19,060 --> 00:52:26,080
was very large i wrote a pipe about that

00:52:22,120 --> 00:52:28,480
took the file and journalists they

00:52:26,080 --> 00:52:31,210
essentially same documentation something

00:52:28,480 --> 00:52:34,240
like cycle though not automatically

00:52:31,210 --> 00:52:37,870
generate all this for you because this

00:52:34,240 --> 00:52:40,440
endless of this and i can show you how

00:52:37,870 --> 00:52:40,440
it looks like

00:53:05,470 --> 00:53:17,650
so this is a PSD file for a dementia clh

00:53:11,710 --> 00:53:22,010
if I try to get also the header file so

00:53:17,650 --> 00:53:25,099
stl H is here there are some types of

00:53:22,010 --> 00:53:30,700
structs in here so you have them here as

00:53:25,099 --> 00:53:30,700
help as well and then you have some

00:53:31,150 --> 00:53:38,750
function definitions or declarations in

00:53:35,720 --> 00:53:41,359
here you remove stuff like x.x turn and

00:53:38,750 --> 00:53:44,240
you remove semicolons and you just

00:53:41,359 --> 00:53:50,540
basically copy pasted the thing is you

00:53:44,240 --> 00:53:53,270
only need those generally use and here

00:53:50,540 --> 00:53:57,170
is a different you have to use C typedef

00:53:53,270 --> 00:53:59,330
if it's a typedef struct in the header

00:53:57,170 --> 00:54:03,800
file or you have to each of these the

00:53:59,330 --> 00:54:06,230
caf if it's just the struct and you can

00:54:03,800 --> 00:54:12,320
have even enemies i get see typedef

00:54:06,230 --> 00:54:15,050
enemy and sometimes if you know that you

00:54:12,320 --> 00:54:16,849
will never access the internal parts of

00:54:15,050 --> 00:54:18,170
the structure but still you're going to

00:54:16,849 --> 00:54:20,270
like take the structure from one

00:54:18,170 --> 00:54:24,500
function and pass it to another all you

00:54:20,270 --> 00:54:26,810
need to do is help to have it but inside

00:54:24,500 --> 00:54:32,780
you can just use pass it's a it's like I

00:54:26,810 --> 00:54:35,080
don't care whatever and I have a very

00:54:32,780 --> 00:54:39,619
ugly coat that basically takes this and

00:54:35,080 --> 00:54:42,290
converted to this it might be done with

00:54:39,619 --> 00:54:44,330
regular expressions maybe but I have I

00:54:42,290 --> 00:54:47,589
will just read each line and for each

00:54:44,330 --> 00:54:47,589
line I do some magic

00:55:16,200 --> 00:55:22,089
if you want to program the operations

00:55:19,210 --> 00:55:23,980
yourself I would recommend seitan but

00:55:22,089 --> 00:55:26,560
they are probably also libraries that

00:55:23,980 --> 00:55:28,839
are Britain incite them already like

00:55:26,560 --> 00:55:31,300
none by and side by that probably

00:55:28,839 --> 00:55:33,099
already have this basic operations like

00:55:31,300 --> 00:55:37,180
matrix multiplication and vector

00:55:33,099 --> 00:55:39,640
operations so if you if you just want to

00:55:37,180 --> 00:55:43,109
use regular matrix multiplication you

00:55:39,640 --> 00:55:46,270
can ease numpy if you want to do some

00:55:43,109 --> 00:55:48,130
weird multiplication as you define it

00:55:46,270 --> 00:55:49,990
for yourself and you need to hold it for

00:55:48,130 --> 00:55:52,380
yourself that seitan is a good choice

00:55:49,990 --> 00:55:52,380
for that

00:58:17,849 --> 00:58:25,650
too busy just nebbish the power really a

00:58:27,210 --> 00:58:32,520
missile at rizvi para alla prova de

00:58:29,559 --> 00:58:32,520
Compostela

01:02:33,120 --> 01:02:53,860
no Lucy masochistic rcbc de France inter

01:02:47,740 --> 01:02:57,180
proven procedure should eat a prevalent

01:02:53,860 --> 01:03:04,960
Pacific Studies department released

01:02:57,180 --> 01:03:07,180
working with pins because I wasn't

01:03:04,960 --> 01:03:12,220
entirely sure from Saturday's would give

01:03:07,180 --> 01:03:14,950
1 divided proceedeth my Latin type my

01:03:12,220 --> 01:03:22,360
buttons all the distance silentium

01:03:14,950 --> 01:03:25,450
cisplatin genetic dictionary was too

01:03:22,360 --> 01:03:28,210
poor to a degree felony the array of

01:03:25,450 --> 01:03:34,240
structs Christmas increase to train

01:03:28,210 --> 01:03:36,400
whistle utility mr. Gardner captioning

01:03:34,240 --> 01:03:41,950
it from file across Canada recognize

01:03:36,400 --> 01:03:47,310
reseda struct item a double team and

01:03:41,950 --> 01:03:47,310
double cost a double

01:03:51,340 --> 01:04:01,240
they're finished weapon x

01:04:09,470 --> 01:04:12,910
there's two

01:05:54,030 --> 01:05:56,090
you

01:07:20,700 --> 01:07:22,700
I

01:11:55,820 --> 01:12:09,770
so used oh goodness each pony start with

01:12:03,720 --> 01:12:13,770
making class see that okay all thank you

01:12:09,770 --> 01:12:22,770
stop something in the scene like this

01:12:13,770 --> 01:12:29,010
slide which make it already faster look

01:12:22,770 --> 01:12:36,780
at reading where's the sea I don't think

01:12:29,010 --> 01:12:39,510
down there this one the bar that was the

01:12:36,780 --> 01:12:42,860
class itself process the episode because

01:12:39,510 --> 01:12:42,860
it's not a ccd class

01:15:05,930 --> 01:15:11,420
this category that you get on what a

01:15:08,850 --> 01:15:11,420
video chat

01:23:08,900 --> 01:23:11,900
and

01:24:05,110 --> 01:24:18,520
I think in your past probably you don't

01:24:16,900 --> 01:24:21,550
have to have a structure for all this it

01:24:18,520 --> 01:24:23,290
was only that one sec or you can add the

01:24:21,550 --> 01:24:27,929
structural concept whatever you prepare

01:24:23,290 --> 01:24:27,929
it and then seal it you will take the

01:24:29,880 --> 01:24:42,510
structure then you just read it save it

01:24:37,900 --> 01:24:42,510
to your structure and the original

01:25:18,670 --> 01:25:27,580
internally you shouldn't use lists crs

01:25:29,050 --> 01:25:34,520
after you are done calculations you

01:25:32,390 --> 01:25:39,710
should create a list and put the values

01:25:34,520 --> 01:25:44,450
from see it's very inefficient we

01:25:39,710 --> 01:25:46,640
useless or big inside you custom list

01:25:44,450 --> 01:25:50,380
and they they can contain basically

01:25:46,640 --> 01:25:53,930
elephant and they can be whatever in a

01:25:50,380 --> 01:25:56,930
process of accessibility normal quantum

01:25:53,930 --> 01:26:03,490
to structure and you will accept some

01:25:56,930 --> 01:26:03,490
number the finger just no memory of

01:30:47,870 --> 01:30:50,870
in

01:35:21,030 --> 01:35:27,520
it has this book so you can ask somebody

01:35:24,790 --> 01:35:29,260
to is not my book to copy I have

01:35:27,520 --> 01:35:31,480
somebody else and you can borrow it

01:35:29,260 --> 01:35:41,740
through this thing you can find it on

01:35:31,480 --> 01:35:45,640
github / I've SMS / bookshop in nine or

01:35:41,740 --> 01:35:48,580
eight minutes right which will actually

01:35:45,640 --> 01:35:50,910
early he was lying to me pear / kind of

01:35:48,580 --> 01:35:50,910

YouTube URL: https://www.youtube.com/watch?v=-B8JRDLmrvM


