Title: Lies, mapped drives & device-mapper statistics - Bryn M. Reeves
Publication date: 2016-02-11
Playlist: DevConf.cz 2016
Description: 
	Linux has provided block device IO statistics for well over 15 years, with familiar tools such as iostat, sar, and PCP able to benefit from the same sets of counter data maintained by the kernel.

Device-mapper, the kernel framework that underpins applications like LVM2, multipath-tools, and dmraid, as well as modern storage virtualisation features, including thin provisioning, and caching has provided its own in-kernel statistics support since 2013 (v3.11).

In addition to the basic statistics already provided by the kernel this includes several new features such as the ability to track a user-defined latency histogram, independent statistics for arbitrary regions of devices, and high-resolution timekeeping.
Captions: 
	00:00:03,440 --> 00:00:13,650
well are ready to go without them let's

00:00:09,090 --> 00:00:15,799
go I will sit in silence and drink my

00:00:13,650 --> 00:00:15,799
coffee

00:00:35,660 --> 00:00:41,330
I'm sure girl us what you need white

00:00:38,220 --> 00:00:41,330
copy of my mustache

00:01:02,500 --> 00:01:06,520
turns lot of the ranch

00:01:09,740 --> 00:01:16,640
I had lots of trouble receiving it

00:01:13,430 --> 00:01:34,420
likely even switching to mobile with

00:01:16,640 --> 00:01:34,420
that Vodafone or I made 852 here so

00:01:35,710 --> 00:01:42,140
whenever you get the style I'll just

00:01:38,060 --> 00:01:46,399
talk for 30 minutes plus then I should

00:01:42,140 --> 00:01:48,679
leave enough training mucking around at

00:01:46,399 --> 00:01:50,920
the beginning and time for questions at

00:01:48,679 --> 00:01:50,920
the end

00:02:19,330 --> 00:02:24,340
they're usually back five minutes late

00:02:21,710 --> 00:02:24,340
starting

00:04:04,260 --> 00:04:08,370
I'm just everything

00:04:14,940 --> 00:04:17,000
you

00:05:48,490 --> 00:05:55,580
we just heard you about this very

00:05:50,630 --> 00:05:58,310
technical what sighs yeah and i'm not

00:05:55,580 --> 00:06:17,360
sure why they're not displaying properly

00:05:58,310 --> 00:06:18,710
now because i got the wrong skyping just

00:06:17,360 --> 00:06:32,650
let them know I'm just fixing the

00:06:18,710 --> 00:06:32,650
scaling lobby please seek center section

00:06:34,540 --> 00:06:40,390
121 to do testing 12 good morning below

00:07:12,070 --> 00:07:21,680
see the slides that what's going on

00:07:14,810 --> 00:07:24,770
Sunday nobody cared I mean it's almost

00:07:21,680 --> 00:07:49,270
an accident that the stream is exposed

00:07:24,770 --> 00:07:49,270
live hello hold on a second

00:07:55,190 --> 00:08:01,490
drug testing message it was too loud

00:07:56,900 --> 00:08:13,520
here testing testing one two one two is

00:08:01,490 --> 00:08:16,160
up a better level okay good morning

00:08:13,520 --> 00:08:18,650
everyone thank you for attending my

00:08:16,160 --> 00:08:20,750
chalk this morning I'm very sorry that I

00:08:18,650 --> 00:08:23,810
wasn't able to attend them from to the

00:08:20,750 --> 00:08:27,290
last moment to present in person but

00:08:23,810 --> 00:08:29,000
thanks the magic of YouTube we can

00:08:27,290 --> 00:08:31,220
hopefully get through this 40 minutes

00:08:29,000 --> 00:08:34,130
law without any dropping agador or

00:08:31,220 --> 00:08:35,900
disappearing too much so I'd like to

00:08:34,130 --> 00:08:38,780
talk today about a project that I've

00:08:35,900 --> 00:08:41,690
been working on for but a couple of

00:08:38,780 --> 00:08:44,480
years including the prototype phase but

00:08:41,690 --> 00:08:46,190
really most of the work that i'm going

00:08:44,480 --> 00:08:50,050
to present today's come together in the

00:08:46,190 --> 00:08:53,270
last 12 months or so it's available in

00:08:50,050 --> 00:08:56,150
all distributions that are shipping a

00:08:53,270 --> 00:08:59,360
recent version valium to and vitamin

00:08:56,150 --> 00:09:02,950
Power Stroke vidura Ralph 7 there is an

00:08:59,360 --> 00:09:06,470
update on the way for l6 most other

00:09:02,950 --> 00:09:10,190
distributions that are very close to

00:09:06,470 --> 00:09:13,250
upstream so just to kind of set the

00:09:10,190 --> 00:09:16,670
scene for today's talk and provide some

00:09:13,250 --> 00:09:18,800
background as the project I wanted to

00:09:16,670 --> 00:09:21,530
talk about today is the end stats or

00:09:18,800 --> 00:09:23,450
device mappers statistics as this is

00:09:21,530 --> 00:09:26,570
this is something that exists in in two

00:09:23,450 --> 00:09:29,390
components Colonel piece that has been

00:09:26,570 --> 00:09:31,340
around for a couple of years and the new

00:09:29,390 --> 00:09:35,840
users face support which I'll be talking

00:09:31,340 --> 00:09:38,000
about today obviously I know statistics

00:09:35,840 --> 00:09:41,600
are not a new thing they've been around

00:09:38,000 --> 00:09:43,820
for many years I'm really kind of coming

00:09:41,600 --> 00:09:48,290
together to form the source of

00:09:43,820 --> 00:09:50,810
statistics we see today in the 1980s so

00:09:48,290 --> 00:09:53,330
obviously this is something that needs

00:09:50,810 --> 00:09:56,960
Koror support the device type of place

00:09:53,330 --> 00:09:59,300
is no different here so the basic five

00:09:56,960 --> 00:10:01,960
steps that we have on Linux the block

00:09:59,300 --> 00:10:04,660
layer was modified to keep track

00:10:01,960 --> 00:10:08,050
certainly bangs so when an i/o is

00:10:04,660 --> 00:10:11,200
submitted or when it completes and in

00:10:08,050 --> 00:10:13,090
ink counter is incremented and you'll

00:10:11,200 --> 00:10:16,860
see that most of the performance metrics

00:10:13,090 --> 00:10:19,930
use this very simple kinda based model

00:10:16,860 --> 00:10:22,090
so as events occur the counter is

00:10:19,930 --> 00:10:24,460
incremented we can then look at the

00:10:22,090 --> 00:10:27,430
counter valium or more importantly how

00:10:24,460 --> 00:10:29,920
it changed over a particular period of

00:10:27,430 --> 00:10:32,140
time to determine the level of activity

00:10:29,920 --> 00:10:36,700
for different events going on in the

00:10:32,140 --> 00:10:38,530
system so the colonel side arm as most

00:10:36,700 --> 00:10:40,900
things in the curb all it likes to keep

00:10:38,530 --> 00:10:44,010
things simple and the counters are all

00:10:40,900 --> 00:10:47,380
implemented as playing integer values

00:10:44,010 --> 00:10:49,980
now clearly when we come to look at this

00:10:47,380 --> 00:10:52,660
is as human beings or to carry out

00:10:49,980 --> 00:10:55,210
additional processing and calculation

00:10:52,660 --> 00:10:57,550
with the data that may not be the most

00:10:55,210 --> 00:11:00,610
convenient form to working we may want

00:10:57,550 --> 00:11:02,740
to rate expressed in terms of human

00:11:00,610 --> 00:11:05,530
readable quantities like megabytes or

00:11:02,740 --> 00:11:08,530
gigabytes and to have those rates

00:11:05,530 --> 00:11:10,540
expressed in familiar units of time per

00:11:08,530 --> 00:11:13,030
second per minute or rough or whatever

00:11:10,540 --> 00:11:15,130
it's convenient so we need the user

00:11:13,030 --> 00:11:19,560
space tooling to provide this

00:11:15,130 --> 00:11:22,360
conservation to time rate conversion and

00:11:19,560 --> 00:11:25,570
also possibly to do my level tasks

00:11:22,360 --> 00:11:27,970
things like aggregation and sorting if

00:11:25,570 --> 00:11:30,580
you used some of the more advanced

00:11:27,970 --> 00:11:32,140
options for iostat that I user group

00:11:30,580 --> 00:11:34,360
devices together you may be familiar

00:11:32,140 --> 00:11:38,950
with the kind of ideas I'm talking about

00:11:34,360 --> 00:11:41,590
here to look at Linux in a little bit

00:11:38,950 --> 00:11:43,900
more detail and what we have today or

00:11:41,590 --> 00:11:48,670
what we have prior to the introduction

00:11:43,900 --> 00:11:51,610
of that of the M stands the current auto

00:11:48,670 --> 00:11:54,780
statistics framework has been present

00:11:51,610 --> 00:11:58,270
since well roughly like two point four

00:11:54,780 --> 00:12:02,290
stroke 32 like five there is some minor

00:11:58,270 --> 00:12:03,400
differences between the two but for

00:12:02,290 --> 00:12:05,410
today's purposes do

00:12:03,400 --> 00:12:10,570
chorus is kind of historical anyway so

00:12:05,410 --> 00:12:15,070
what we have now is a set of 11 event

00:12:10,570 --> 00:12:18,880
characters these are documented in the

00:12:15,070 --> 00:12:21,640
artifact stop txt file in the kernel

00:12:18,880 --> 00:12:24,090
sources or in the package documentation

00:12:21,640 --> 00:12:27,220
that you'll find on your system and

00:12:24,090 --> 00:12:29,500
these track quantities like the number

00:12:27,220 --> 00:12:33,760
of reads completed the number of writes

00:12:29,500 --> 00:12:37,180
completed the number of q merges where

00:12:33,760 --> 00:12:39,940
we see the to iOS are adjacent and stick

00:12:37,180 --> 00:12:43,060
them together to build a larger io to

00:12:39,940 --> 00:12:46,390
send out the hardware and these these

00:12:43,060 --> 00:12:49,930
low-level walking values of n consumed

00:12:46,390 --> 00:12:53,830
by users based tools historically are

00:12:49,930 --> 00:12:57,280
primarily the system package that

00:12:53,830 --> 00:13:00,550
includes things like a toast at as well

00:12:57,280 --> 00:13:04,000
as the system activity reporter and its

00:13:00,550 --> 00:13:06,970
data collector component Adam today

00:13:04,000 --> 00:13:10,120
these tools look a little home fashioned

00:13:06,970 --> 00:13:12,820
in some ways they've been around in more

00:13:10,120 --> 00:13:16,300
or less the current form there's over 20

00:13:12,820 --> 00:13:17,980
or 30 years if you look back to tools

00:13:16,300 --> 00:13:21,250
that were available commercial unix

00:13:17,980 --> 00:13:24,280
platforms in the 1990s they're generally

00:13:21,250 --> 00:13:26,500
very similar today there are also more

00:13:24,280 --> 00:13:31,360
modern alternatives to these that my

00:13:26,500 --> 00:13:36,880
super uses better PCP is a project

00:13:31,360 --> 00:13:40,600
started by SBI eats a chocolate

00:13:36,880 --> 00:13:43,540
performance co-pilot and it's a large

00:13:40,600 --> 00:13:46,080
set of tools for everything from data

00:13:43,540 --> 00:13:48,640
gathering pulling data into the system

00:13:46,080 --> 00:13:51,490
recording and archiving and then

00:13:48,640 --> 00:13:55,630
presenting or transmitting that data for

00:13:51,490 --> 00:13:58,090
further analysis and use from bc peas

00:13:55,630 --> 00:14:00,820
are a large topic so i won't going into

00:13:58,090 --> 00:14:03,130
it anymore in in today's talk there are

00:14:00,820 --> 00:14:06,090
some good talks on on youtube and it

00:14:03,130 --> 00:14:08,130
also tends to come up at conferences

00:14:06,090 --> 00:14:10,770
largely because it sir

00:14:08,130 --> 00:14:12,930
a relatively new tool that people at

00:14:10,770 --> 00:14:15,720
least in the linux world are I'm not so

00:14:12,930 --> 00:14:18,150
from anywhere there are also high level

00:14:15,720 --> 00:14:22,830
management tools things like the open a

00:14:18,150 --> 00:14:26,580
low my sweet which supports the ndf sem

00:14:22,830 --> 00:14:29,610
data model these today can also retain

00:14:26,580 --> 00:14:31,500
the statistics from a living system and

00:14:29,610 --> 00:14:38,730
provide them for right for further

00:14:31,500 --> 00:14:41,670
processing and use so this is mistake

00:14:38,730 --> 00:14:43,830
that we have today and it's been a good

00:14:41,670 --> 00:14:47,210
model it served as well for a number of

00:14:43,830 --> 00:14:50,580
years but it does have some limitations

00:14:47,210 --> 00:14:55,020
in particular there is just one came to

00:14:50,580 --> 00:14:57,750
Seth pretty nice this is regardless of a

00:14:55,020 --> 00:15:02,730
lot of the devices or how it's composed

00:14:57,750 --> 00:15:05,160
if you've ever used Linux md or ldm on a

00:15:02,730 --> 00:15:07,980
system with more than one physical disk

00:15:05,160 --> 00:15:11,240
you're familiar with the idea that a

00:15:07,980 --> 00:15:15,060
single block device may be composed of

00:15:11,240 --> 00:15:19,140
multiple component devices perhaps is a

00:15:15,060 --> 00:15:21,590
raid array so with distributing data and

00:15:19,140 --> 00:15:25,520
possibly parasi information within that

00:15:21,590 --> 00:15:28,710
or it may simply be a composite device

00:15:25,520 --> 00:15:31,350
from a logical volume that has been

00:15:28,710 --> 00:15:35,430
extended several times so they have

00:15:31,350 --> 00:15:38,610
disjoint data regions possibly spanning

00:15:35,430 --> 00:15:41,520
multiple disks in these sorts of

00:15:38,610 --> 00:15:43,890
situations it may be useful to have a

00:15:41,520 --> 00:15:47,520
little bit more insight into particular

00:15:43,890 --> 00:15:50,430
areas of the desk without that we're

00:15:47,520 --> 00:15:52,680
just getting very Taurus averages over

00:15:50,430 --> 00:15:56,130
we'll make it a very large physical

00:15:52,680 --> 00:15:59,430
device these counters today are also

00:15:56,130 --> 00:16:03,920
shared by all users now there's a simple

00:15:59,430 --> 00:16:07,050
technique used that allows us to

00:16:03,920 --> 00:16:10,280
actually share this resource among

00:16:07,050 --> 00:16:13,260
multiple users without interference and

00:16:10,280 --> 00:16:16,890
that is just the weekenders never reset

00:16:13,260 --> 00:16:18,810
they just constantly increase and this

00:16:16,890 --> 00:16:20,620
means that anyone using the characters

00:16:18,810 --> 00:16:22,900
needs to maintain

00:16:20,620 --> 00:16:25,960
two copies of the data we need to

00:16:22,900 --> 00:16:28,510
maintain the last thing that we saw and

00:16:25,960 --> 00:16:30,100
the current snapshot and we then take

00:16:28,510 --> 00:16:33,040
the difference between these two and

00:16:30,100 --> 00:16:35,680
that gives us the observations for the

00:16:33,040 --> 00:16:38,470
current interval it's a relatively small

00:16:35,680 --> 00:16:43,210
overhead but it is an overhead and it

00:16:38,470 --> 00:16:47,430
does complicate code that needs to read

00:16:43,210 --> 00:16:49,780
and manage these values in user space oh

00:16:47,430 --> 00:16:52,450
there's a relatively fixed set of

00:16:49,780 --> 00:16:55,480
performance counters here as well this

00:16:52,450 --> 00:16:57,400
is apparently back to historical reasons

00:16:55,480 --> 00:17:01,000
if you remember the introduction into

00:16:57,400 --> 00:17:02,820
tall and the later 25 changes you'll

00:17:01,000 --> 00:17:05,320
know that they're in different places

00:17:02,820 --> 00:17:08,770
the reason for this is that once we

00:17:05,320 --> 00:17:12,370
introduced our file in Prague and in the

00:17:08,770 --> 00:17:17,290
case of virus diseases such proc / disk

00:17:12,370 --> 00:17:19,510
stats that becomes part of the ABI part

00:17:17,290 --> 00:17:21,970
of the interface with users base and

00:17:19,510 --> 00:17:25,620
that means that we can't freely make

00:17:21,970 --> 00:17:29,890
changes to that to add additional fields

00:17:25,620 --> 00:17:33,370
with somewhat more free in the device

00:17:29,890 --> 00:17:36,340
map of oil here in that we use careful

00:17:33,370 --> 00:17:39,190
versioning of both the interaction with

00:17:36,340 --> 00:17:41,530
the colonel and the library user space

00:17:39,190 --> 00:17:46,090
which means that we have a much better

00:17:41,530 --> 00:17:48,790
path to introduce new additions or

00:17:46,090 --> 00:17:53,800
changes in a controlled manner without

00:17:48,790 --> 00:17:56,590
breaking all the systems another

00:17:53,800 --> 00:18:00,550
limitation of the classical risks tax is

00:17:56,590 --> 00:18:02,050
that they use the colonel GT counter if

00:18:00,550 --> 00:18:03,970
you're familiar with the Colonel's time

00:18:02,050 --> 00:18:07,590
keeping you all know that we have

00:18:03,970 --> 00:18:11,800
multiple different sources of timing

00:18:07,590 --> 00:18:14,920
information now the GV cancer is a very

00:18:11,800 --> 00:18:17,140
cause millisecond resolution or i should

00:18:14,920 --> 00:18:21,340
say roughly millisecond resolution

00:18:17,140 --> 00:18:23,950
counter that ticks up traditionally

00:18:21,340 --> 00:18:26,440
every time the time is it went off today

00:18:23,950 --> 00:18:29,190
you may not have a regular time at T but

00:18:26,440 --> 00:18:32,160
in principle it's just the same

00:18:29,190 --> 00:18:35,100
there are two real problems here firstly

00:18:32,160 --> 00:18:37,010
we have a limited resolution we truncate

00:18:35,100 --> 00:18:40,560
back to the millisecond accuracy

00:18:37,010 --> 00:18:42,630
precision I should say and also there's

00:18:40,560 --> 00:18:44,970
an accuracy problem depending on what's

00:18:42,630 --> 00:18:47,490
happening on the system and especially

00:18:44,970 --> 00:18:50,220
in virtualized environments legitly

00:18:47,490 --> 00:18:51,960
clock may drift so this time a

00:18:50,220 --> 00:18:53,850
millisecond maybe a little bit too long

00:18:51,960 --> 00:18:56,940
next time it might be a little bit in

00:18:53,850 --> 00:18:59,460
short depending on what you're doing

00:18:56,940 --> 00:19:03,780
with the data this kind of variation

00:18:59,460 --> 00:19:07,440
injector may be problematic the last

00:19:03,780 --> 00:19:10,940
major problem there's very little

00:19:07,440 --> 00:19:14,180
insight into the latency that your IO

00:19:10,940 --> 00:19:19,650
experiencing we do have some averages

00:19:14,180 --> 00:19:25,920
produced so the average service time and

00:19:19,650 --> 00:19:29,610
the average time that I am I await

00:19:25,920 --> 00:19:33,210
before being issued but these are just

00:19:29,610 --> 00:19:36,360
cause averages if we're seeing very high

00:19:33,210 --> 00:19:40,140
rates of i/o and remember we have noises

00:19:36,360 --> 00:19:43,680
together a capable of a million or more

00:19:40,140 --> 00:19:46,020
items per second this this single

00:19:43,680 --> 00:19:48,360
average value uses very little the

00:19:46,020 --> 00:19:51,270
inside of a cram the latencies are

00:19:48,360 --> 00:19:53,280
actually distributed and often in

00:19:51,270 --> 00:19:56,730
today's performance analysis is that

00:19:53,280 --> 00:20:03,440
distribution at least some overall rough

00:19:56,730 --> 00:20:06,090
shape that we're mainly interested in so

00:20:03,440 --> 00:20:09,330
this has been the sort of state of

00:20:06,090 --> 00:20:12,450
biostatistics supporting linux for some

00:20:09,330 --> 00:20:17,940
time and as I said it because largely

00:20:12,450 --> 00:20:22,020
served as well we should examine why

00:20:17,940 --> 00:20:23,550
today this is becoming a problem or why

00:20:22,020 --> 00:20:26,400
we would like to have some more

00:20:23,550 --> 00:20:30,420
capabilities to get better insight into

00:20:26,400 --> 00:20:33,570
what's going on to that be and a major

00:20:30,420 --> 00:20:36,620
part of the reason the advance the

00:20:33,570 --> 00:20:39,640
storage tax have changed to borrower

00:20:36,620 --> 00:20:42,340
appraised it's not your father's storage

00:20:39,640 --> 00:20:45,040
more so today we have things like

00:20:42,340 --> 00:20:47,800
software-defined storage if you use

00:20:45,040 --> 00:20:50,170
things like Seth or Gloucester you're

00:20:47,800 --> 00:20:53,470
familiar with the idea here rather than

00:20:50,170 --> 00:20:56,200
building large proprietary hardware disk

00:20:53,470 --> 00:20:58,420
arrays and presenting them over fibre

00:20:56,200 --> 00:21:02,980
channel awful some of the standard

00:20:58,420 --> 00:21:06,100
protocol we build much cheaper arrays of

00:21:02,980 --> 00:21:08,940
commodity hardware with locally attached

00:21:06,100 --> 00:21:14,890
storage and we then use software and

00:21:08,940 --> 00:21:20,020
networking to make that storage

00:21:14,890 --> 00:21:22,540
available to the client systems we also

00:21:20,020 --> 00:21:25,600
today see much more heavily tiered

00:21:22,540 --> 00:21:31,870
storage architectures what are the first

00:21:25,600 --> 00:21:34,230
term ideas of tiered storage is a sort

00:21:31,870 --> 00:21:37,120
of layered trash where we have a

00:21:34,230 --> 00:21:40,200
hierarchical storage model and they

00:21:37,120 --> 00:21:43,990
choose automatically moved between years

00:21:40,200 --> 00:21:45,970
depending on its usage patterns so we

00:21:43,990 --> 00:21:49,690
may as the front end have in-memory

00:21:45,970 --> 00:21:53,890
cache is moving through fast local

00:21:49,690 --> 00:21:56,860
storage like SSD or flash made available

00:21:53,890 --> 00:21:58,630
over the PCI bus and eventually we may

00:21:56,860 --> 00:22:01,990
arrive on on something like that take

00:21:58,630 --> 00:22:05,710
silo where the slowest largest end of

00:22:01,990 --> 00:22:08,820
the hierarchy where these tears are

00:22:05,710 --> 00:22:12,850
implemented in Linux we may want to have

00:22:08,820 --> 00:22:15,400
better visibility into the path of an

00:22:12,850 --> 00:22:20,020
idle as he tracks down through those

00:22:15,400 --> 00:22:24,150
tears and lighters obviously I i work on

00:22:20,020 --> 00:22:26,350
device mapper and two of the major

00:22:24,150 --> 00:22:28,630
additions in device matter over the last

00:22:26,350 --> 00:22:31,930
few years of being the addition of

00:22:28,630 --> 00:22:35,200
trashing and thin provisioning targets

00:22:31,930 --> 00:22:37,420
the thin provisioning target also is

00:22:35,200 --> 00:22:39,610
responsible for the much better

00:22:37,420 --> 00:22:43,030
performance we never have with that with

00:22:39,610 --> 00:22:46,950
device map of snapshots again these

00:22:43,030 --> 00:22:50,330
involve breaking our storage up and

00:22:46,950 --> 00:22:53,720
assigning certain data to

00:22:50,330 --> 00:22:56,419
fast low-latency hydropower storage well

00:22:53,720 --> 00:22:59,450
other data is moved out to slower

00:22:56,419 --> 00:23:03,640
back-end storage with informational

00:22:59,450 --> 00:23:06,649
would you may have volumes that are

00:23:03,640 --> 00:23:10,580
initially only partially provisioned and

00:23:06,649 --> 00:23:13,220
then become fully provisioned or more

00:23:10,580 --> 00:23:16,640
provision as I always sent down to

00:23:13,220 --> 00:23:18,980
different regions of the device this is

00:23:16,640 --> 00:23:22,580
this is somewhat related to the next

00:23:18,980 --> 00:23:25,460
point that in fact the the example I

00:23:22,580 --> 00:23:27,559
happen which is read predates the

00:23:25,460 --> 00:23:30,049
information in capabilities in device

00:23:27,559 --> 00:23:33,950
mapper and it uses a different mechanism

00:23:30,049 --> 00:23:35,929
for multi-tenancy storage this one's an

00:23:33,950 --> 00:23:38,179
interesting use case for device market

00:23:35,929 --> 00:23:40,779
statistics because the way that Rev

00:23:38,179 --> 00:23:44,269
operate it takes a single arrow many

00:23:40,779 --> 00:23:47,000
slices that up into pieces and each

00:23:44,269 --> 00:23:49,789
piece may be assigned to a different

00:23:47,000 --> 00:23:51,850
virtual machine so we do have this this

00:23:49,789 --> 00:23:55,639
situation really have one block device

00:23:51,850 --> 00:23:58,039
containing a number of logical disk

00:23:55,639 --> 00:24:03,830
devices that belong to different virtual

00:23:58,039 --> 00:24:06,200
machines again this is somewhat related

00:24:03,830 --> 00:24:09,889
to the container and virtualization

00:24:06,200 --> 00:24:18,649
world where we may have many images all

00:24:09,889 --> 00:24:20,450
packed onto a single device so this

00:24:18,649 --> 00:24:24,309
leads us on to to what we might wish to

00:24:20,450 --> 00:24:27,710
to monitor and observe on these devices

00:24:24,309 --> 00:24:30,500
the first point is the one the old

00:24:27,710 --> 00:24:33,909
iostat sandisk stats mechanism is

00:24:30,500 --> 00:24:38,690
incapable of it's not able to perform

00:24:33,909 --> 00:24:40,880
monitoring on sub regions of devices we

00:24:38,690 --> 00:24:43,990
might want to use this to identify

00:24:40,880 --> 00:24:47,299
hotspots region of the disk which

00:24:43,990 --> 00:24:49,880
receives a large volume of i/o and that

00:24:47,299 --> 00:24:52,100
may be becoming a bottleneck if we were

00:24:49,880 --> 00:24:54,350
in some sort of an environment with cash

00:24:52,100 --> 00:24:57,120
devices available that's the sort of

00:24:54,350 --> 00:24:59,280
region that we might consider cashing in

00:24:57,120 --> 00:25:03,030
to give a performance boost or to remove

00:24:59,280 --> 00:25:06,000
a bottle rack we may also want to carry

00:25:03,030 --> 00:25:09,480
object discrimination so one block

00:25:06,000 --> 00:25:12,510
device safe it's got a file system or a

00:25:09,480 --> 00:25:15,240
database store life is going to contain

00:25:12,510 --> 00:25:17,160
many different objects if the file

00:25:15,240 --> 00:25:20,010
system or database can tell us where

00:25:17,160 --> 00:25:23,460
those objects are then we can provide

00:25:20,010 --> 00:25:25,650
statistics specifically for those

00:25:23,460 --> 00:25:28,950
regions of the desk that are used by the

00:25:25,650 --> 00:25:31,290
object as I mentioned earlier latency

00:25:28,950 --> 00:25:37,350
characterization is another important

00:25:31,290 --> 00:25:40,610
area one way to make this available is

00:25:37,350 --> 00:25:43,950
to track some kind of a histogram a

00:25:40,610 --> 00:25:47,309
histogram shows us directly the

00:25:43,950 --> 00:25:49,590
distribution of a set of values by

00:25:47,309 --> 00:25:52,620
dividing the value space up into buckets

00:25:49,590 --> 00:25:56,370
and then accounting each individual IO

00:25:52,620 --> 00:26:00,929
into whichever budgeting feds we build

00:25:56,370 --> 00:26:06,420
up an overall picture of our buildings

00:26:00,929 --> 00:26:08,429
is distributed among I O's they also

00:26:06,420 --> 00:26:12,300
want to grant different users on the

00:26:08,429 --> 00:26:14,429
machine access the statistics facility

00:26:12,300 --> 00:26:17,070
in a way that doesn't interfere with

00:26:14,429 --> 00:26:19,380
other users as we said the old I stacks

00:26:17,070 --> 00:26:24,840
and desk stats use is this symbol track

00:26:19,380 --> 00:26:26,400
of global non resetting changes but when

00:26:24,840 --> 00:26:30,300
we're providing some of these additional

00:26:26,400 --> 00:26:31,440
mechanisms like latency histograms we

00:26:30,300 --> 00:26:35,880
need something a little bit more

00:26:31,440 --> 00:26:38,700
sophisticated for that and we also want

00:26:35,880 --> 00:26:40,980
to be able to monitor and potentially

00:26:38,700 --> 00:26:44,340
respond to the overheads that are

00:26:40,980 --> 00:26:48,980
statistics collection is imposing by

00:26:44,340 --> 00:26:51,420
xoring memory our CPU or or other terms

00:26:48,980 --> 00:26:55,140
since the device matter statistics

00:26:51,420 --> 00:26:58,020
provides much greater flexibility and

00:26:55,140 --> 00:27:01,110
options it does naturally impose a

00:26:58,020 --> 00:27:03,809
higher overhead and we'll take a look at

00:27:01,110 --> 00:27:08,500
how you can track that

00:27:03,809 --> 00:27:11,350
so press on them to a brief discussion

00:27:08,500 --> 00:27:14,320
of the dance that's tool but I said this

00:27:11,350 --> 00:27:17,050
is available now in most recent

00:27:14,320 --> 00:27:21,780
distributions the kernel side of things

00:27:17,050 --> 00:27:24,010
has been available since 2013e

00:27:21,780 --> 00:27:27,010
introduced the general DM stacks

00:27:24,010 --> 00:27:30,460
interface which use it for the device

00:27:27,010 --> 00:27:33,400
maker message facility it allows us to

00:27:30,460 --> 00:27:36,040
set up arbitrary regions of devices to

00:27:33,400 --> 00:27:41,140
statistics tracking and we can also

00:27:36,040 --> 00:27:47,020
divide those regions up into chunks so

00:27:41,140 --> 00:27:48,670
this was updated in 2015 22 important

00:27:47,020 --> 00:27:50,880
new features these are a higher

00:27:48,670 --> 00:27:54,730
precision not a second resolution

00:27:50,880 --> 00:27:58,929
cancers as well as user defined latency

00:27:54,730 --> 00:28:01,270
histograms so what's available now in

00:27:58,929 --> 00:28:03,820
current device market packages consists

00:28:01,270 --> 00:28:05,890
of two components a user space to

00:28:03,820 --> 00:28:08,790
libraries of application programmers can

00:28:05,890 --> 00:28:12,910
use to directly access the stocks data

00:28:08,790 --> 00:28:16,330
and also the DM stacks command which

00:28:12,910 --> 00:28:20,170
allows us to interact with the facility

00:28:16,330 --> 00:28:23,110
from the terminal so the command allows

00:28:20,170 --> 00:28:25,929
us to create delete and monitor regions

00:28:23,110 --> 00:28:28,929
as well as to print the current values

00:28:25,929 --> 00:28:32,679
in the rate from thirty form as provided

00:28:28,929 --> 00:28:35,559
by the library so the actual command

00:28:32,679 --> 00:28:40,090
interface if you've ever used the DM

00:28:35,559 --> 00:28:42,970
setup program it's very similar we have

00:28:40,090 --> 00:28:45,610
the DM stacks command followed by any

00:28:42,970 --> 00:28:47,770
options or switches and then a sub

00:28:45,610 --> 00:28:53,260
command to indicate what we want to do

00:28:47,770 --> 00:28:56,429
create delete and so on the reporting

00:28:53,260 --> 00:28:59,140
functions of am stocks use the existing

00:28:56,429 --> 00:29:01,840
device matter and lvm reporting

00:28:59,140 --> 00:29:04,300
framework so again if you use that to do

00:29:01,840 --> 00:29:07,270
set the fields that you want to use or

00:29:04,300 --> 00:29:08,780
any sorting or selection criteria that's

00:29:07,270 --> 00:29:12,020
also available

00:29:08,780 --> 00:29:15,170
being statistics and this amazing page

00:29:12,020 --> 00:29:22,820
with examples and pull uses information

00:29:15,170 --> 00:29:25,880
in the DM status page so one of the main

00:29:22,820 --> 00:29:28,340
ideas in gamestats is and I briefly

00:29:25,880 --> 00:29:31,250
mentioned this on the last slide this

00:29:28,340 --> 00:29:33,530
notion of regions and areas are a region

00:29:31,250 --> 00:29:35,990
it is just a range of sectors will be

00:29:33,530 --> 00:29:39,410
tracked and statistics for and we can

00:29:35,990 --> 00:29:42,470
break that down further into areas what

00:29:39,410 --> 00:29:44,570
we mean by the area is this portion of

00:29:42,470 --> 00:29:47,960
the desk will have its own independent

00:29:44,570 --> 00:29:50,360
set of challenges so we can tell whether

00:29:47,960 --> 00:29:53,270
there's a lot of I know happening in one

00:29:50,360 --> 00:29:56,210
area or in the adjacent or any other

00:29:53,270 --> 00:29:59,120
area I'm you can create an unlimited

00:29:56,210 --> 00:30:02,720
number of reasons of any size that you

00:29:59,120 --> 00:30:06,230
wish obviously these doing poems are a

00:30:02,720 --> 00:30:07,910
memory overhead and you'll be limited by

00:30:06,230 --> 00:30:10,820
the amount of physical memory available

00:30:07,910 --> 00:30:13,070
on your machine there's also a little

00:30:10,820 --> 00:30:15,830
safety check in the kernel that we don't

00:30:13,070 --> 00:30:18,260
allow the statistics data to exceed more

00:30:15,830 --> 00:30:23,150
than twenty five percent while available

00:30:18,260 --> 00:30:26,390
round so to create a region we use of it

00:30:23,150 --> 00:30:28,670
up to create command we can control the

00:30:26,390 --> 00:30:31,730
number of areas or the size of the areas

00:30:28,670 --> 00:30:34,190
that will create one thing to know here

00:30:31,730 --> 00:30:38,450
you do have to set all the options you

00:30:34,190 --> 00:30:39,920
want when you first create a region if

00:30:38,450 --> 00:30:41,930
you boned and you want to change them

00:30:39,920 --> 00:30:46,640
later on it's not a problem just delete

00:30:41,930 --> 00:30:50,560
the region and then recreate it so if I

00:30:46,640 --> 00:30:50,560
just start switch I want to

00:30:56,690 --> 00:30:58,750
you

00:32:53,269 --> 00:32:57,960
I'm getting a message you make a lost

00:32:55,440 --> 00:33:02,519
fan I hope not if I hopefully even read

00:32:57,960 --> 00:33:05,009
my lips so the reporting as you saw we

00:33:02,519 --> 00:33:07,710
can specify can't you can also specify

00:33:05,009 --> 00:33:10,259
an interval and if you specify either

00:33:07,710 --> 00:33:14,669
one it will pull the reports to repeat

00:33:10,259 --> 00:33:17,399
otherwise if we just run the report you

00:33:14,669 --> 00:33:23,369
get a single snapshot of the current

00:33:17,399 --> 00:33:26,789
families just very quickly take a look

00:33:23,369 --> 00:33:30,499
at latency histograms these are one of

00:33:26,789 --> 00:33:33,179
the most requested features in PM stats

00:33:30,499 --> 00:33:35,309
it took a little bit of time to get the

00:33:33,179 --> 00:33:38,129
kernel size of the support for every

00:33:35,309 --> 00:33:43,470
workday emerged but this is not

00:33:38,129 --> 00:33:46,649
available in the current nice mapper and

00:33:43,470 --> 00:33:49,710
LEM two releases just specify a

00:33:46,649 --> 00:33:52,769
histogram we give the bangs for the bin

00:33:49,710 --> 00:33:56,730
batteries so we've got an example here

00:33:52,769 --> 00:34:00,210
with 10 20 and 30 milliseconds what that

00:33:56,730 --> 00:34:03,299
is doing is creating four buckets in our

00:34:00,210 --> 00:34:07,080
histogram one from zero to ten one from

00:34:03,299 --> 00:34:09,540
10 to 20 another from 20 to 30 and the

00:34:07,080 --> 00:34:12,809
final one which is for everything 30 and

00:34:09,540 --> 00:34:16,619
above and these will then report or

00:34:12,809 --> 00:34:18,960
rather a relative or absolute count when

00:34:16,619 --> 00:34:22,139
we use that as a histogram option to the

00:34:18,960 --> 00:34:26,750
reporting tools but if I to switch back

00:34:22,139 --> 00:34:26,750
to a terminal for a moment

00:34:32,280 --> 00:34:34,340
you

00:36:35,220 --> 00:36:43,260
having you to carry on and create new

00:36:38,640 --> 00:36:45,720
regions with new definitions in future

00:36:43,260 --> 00:36:47,520
we've got a number of feature requests

00:36:45,720 --> 00:36:50,130
worked on being worked on at the moment

00:36:47,520 --> 00:36:52,290
to a grouping and aggregation so that

00:36:50,130 --> 00:36:55,320
you can more flexibly combine different

00:36:52,290 --> 00:36:59,430
statistics direct integration with the

00:36:55,320 --> 00:37:02,550
LEM tools an automated tool to detect

00:36:59,430 --> 00:37:04,200
hotspots and hopefully also invert of

00:37:02,550 --> 00:37:07,920
the next batch of updates will be about

00:37:04,200 --> 00:37:10,260
sort of real-time top style display for

00:37:07,920 --> 00:37:13,050
the statistics information so I'm sorry

00:37:10,260 --> 00:37:15,300
up running with my talking as usual so I

00:37:13,050 --> 00:37:18,660
think we've got about 30 seconds a

00:37:15,300 --> 00:37:23,310
deeper questions do feel free to do

00:37:18,660 --> 00:37:27,660
passes over will be relayed to me by IRC

00:37:23,310 --> 00:37:31,109
and my fearless video system month later

00:37:27,660 --> 00:37:32,550
in our farmer office and so please go

00:37:31,109 --> 00:37:40,609
please go ahead if there are any

00:37:32,550 --> 00:37:40,609
questions they've lost sound again

00:37:43,210 --> 00:37:49,789
this is you to voice the pinnacle a

00:37:45,440 --> 00:37:54,890
questions in life stops dark I bet

00:37:49,789 --> 00:37:57,589
nonsense on strength don't honestly know

00:37:54,890 --> 00:37:59,990
what is up with audio it I'm recording a

00:37:57,589 --> 00:38:08,480
good a good level here I may have been

00:37:59,990 --> 00:38:15,799
class I just think everyone's walked I

00:38:08,480 --> 00:38:19,750
find out there won't be many questions I

00:38:15,799 --> 00:38:38,509
wasn't you to start picking my nose I

00:38:19,750 --> 00:38:40,460
are taken you know the reason there is a

00:38:38,509 --> 00:38:42,670
blue jean claim that hours to send I

00:38:40,460 --> 00:38:47,029
mean if I can't connect to it while I'm

00:38:42,670 --> 00:38:53,480
I shouldn't sit there with my arms or

00:38:47,029 --> 00:38:55,839
should I I trying to feel like switching

00:38:53,480 --> 00:38:55,839
the video

00:39:17,030 --> 00:39:21,410

YouTube URL: https://www.youtube.com/watch?v=Vyb26BL-Lcw


