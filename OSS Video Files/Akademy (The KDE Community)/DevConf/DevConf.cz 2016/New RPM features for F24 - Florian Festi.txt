Title: New RPM features for F24 - Florian Festi
Publication date: 2016-02-11
Playlist: DevConf.cz 2016
Description: 
	With rpm-4.13 in F23 we can now think about using the new Features in the F24 development cycle. The most notable being rich dependencies and file triggers. The talk will give an introduction into both features and give an overview of their current state and usage in Fedora and how to apply them to new use cases.

Presentation: http://bit.ly/1TgwOC2
Captions: 
	00:00:00,000 --> 00:00:02,030
I

00:03:23,960 --> 00:03:30,240
hello please welcome our next speaker

00:03:27,150 --> 00:03:39,150
Florian feste will be talking about new

00:03:30,240 --> 00:03:41,490
features in rpm in fedora 24 so as you

00:03:39,150 --> 00:03:44,580
may have noticed we've put a new release

00:03:41,490 --> 00:03:47,070
actually not in fedora 24 but in fedora

00:03:44,580 --> 00:03:50,100
23 which basically means the new

00:03:47,070 --> 00:03:52,080
features can be started to be used now

00:03:50,100 --> 00:03:55,080
because it's always takes like release

00:03:52,080 --> 00:03:57,209
or something maybe even two before the

00:03:55,080 --> 00:04:00,390
builders get up to date and you actually

00:03:57,209 --> 00:04:03,840
can use the stuff without damaging

00:04:00,390 --> 00:04:06,810
everything and builds node work so we

00:04:03,840 --> 00:04:11,370
are talking about 24 it's basically 23

00:04:06,810 --> 00:04:14,100
plus one so I'm going to because the

00:04:11,370 --> 00:04:16,560
last release was pretty big new feature

00:04:14,100 --> 00:04:22,019
wise because RPM is known to be rather

00:04:16,560 --> 00:04:24,210
slow moving but not this time so will

00:04:22,019 --> 00:04:26,280
you start with a lot of a couple of

00:04:24,210 --> 00:04:28,980
smaller stuff we will just skip over and

00:04:26,280 --> 00:04:32,310
then go to the two big things we added

00:04:28,980 --> 00:04:36,000
just five triggers and boolean the

00:04:32,310 --> 00:04:39,350
dependencies which we will dedicate a

00:04:36,000 --> 00:04:45,600
bit more time to because they are more

00:04:39,350 --> 00:04:48,090
complicated so it's just dive into one

00:04:45,600 --> 00:04:51,300
thing we edit because I I don't I think

00:04:48,090 --> 00:04:53,250
Harold wanted this see here all right

00:04:51,300 --> 00:04:56,790
all right yeah I is it's probably his

00:04:53,250 --> 00:04:59,130
fault so we added removed paths post

00:04:56,790 --> 00:05:02,669
fixes which basically allows you to chop

00:04:59,130 --> 00:05:04,740
up the end of a file name which allows

00:05:02,669 --> 00:05:07,680
you multiple filenames actually ending

00:05:04,740 --> 00:05:11,790
up being the same the problem is as we

00:05:07,680 --> 00:05:13,890
have a shared install directory for all

00:05:11,790 --> 00:05:15,960
the sub packages you cannot have the

00:05:13,890 --> 00:05:17,970
same file with different contents and

00:05:15,960 --> 00:05:19,890
different sub packages which is annoying

00:05:17,970 --> 00:05:21,919
if you want to ship like different

00:05:19,890 --> 00:05:26,610
configurations for different use cases

00:05:21,919 --> 00:05:28,500
of course you want to set conflicts for

00:05:26,610 --> 00:05:31,220
these packages but they are just a valid

00:05:28,500 --> 00:05:34,760
use case and you just couldn't do it and

00:05:31,220 --> 00:05:39,110
so that's basically the quick fix for us

00:05:34,760 --> 00:05:41,000
it's still not one hundred percent as it

00:05:39,110 --> 00:05:43,850
should because they are all implications

00:05:41,000 --> 00:05:46,670
which dependency generators we don't

00:05:43,850 --> 00:05:49,670
talk about this but I so ever will

00:05:46,670 --> 00:05:51,890
probably be as we will revisit it and

00:05:49,670 --> 00:05:54,260
clean it up but for the most simple

00:05:51,890 --> 00:05:58,820
cases it's just works fine you basically

00:05:54,260 --> 00:06:00,470
give a list of Colin separated and file

00:05:58,820 --> 00:06:02,450
endings that it they are basically just

00:06:00,470 --> 00:06:06,680
chopped off when the packages are some

00:06:02,450 --> 00:06:13,910
not as we are as far names we also

00:06:06,680 --> 00:06:18,620
enable the clubbing with less policy

00:06:13,910 --> 00:06:22,730
actually called with this curly curly

00:06:18,620 --> 00:06:25,070
prices then it because he can be used

00:06:22,730 --> 00:06:26,750
either in the API or on in the file list

00:06:25,070 --> 00:06:28,640
so if you have files which are basically

00:06:26,750 --> 00:06:30,890
named the same with some chapter of some

00:06:28,640 --> 00:06:32,900
middle part you can do that now it's not

00:06:30,890 --> 00:06:37,910
a big thing but I've I think we broke

00:06:32,900 --> 00:06:39,530
something yeah I think we fixed

00:06:37,910 --> 00:06:41,900
something else which showed up some

00:06:39,530 --> 00:06:44,720
packages which use that which actually

00:06:41,900 --> 00:06:47,720
never worked but it was hidden that

00:06:44,720 --> 00:06:51,710
didn't work again so we said well at

00:06:47,720 --> 00:06:55,430
least as a as an apology we will enable

00:06:51,710 --> 00:06:57,650
it and it works now another thing that's

00:06:55,430 --> 00:07:00,770
actually not in a release but we've

00:06:57,650 --> 00:07:06,740
backported it is just now 444 chillip

00:07:00,770 --> 00:07:08,990
see people we're not here now but just

00:07:06,740 --> 00:07:11,600
as we made it decided they don't need it

00:07:08,990 --> 00:07:15,160
anymore but we basically promoted

00:07:11,600 --> 00:07:18,170
missing on cave to being a full file

00:07:15,160 --> 00:07:20,930
attribute before this you could have

00:07:18,170 --> 00:07:22,310
config missing okay which means you have

00:07:20,930 --> 00:07:26,650
a config file that you are allowed to

00:07:22,310 --> 00:07:32,000
delete like in some Dottie's directory

00:07:26,650 --> 00:07:34,400
when httpd dotty directory and of course

00:07:32,000 --> 00:07:37,520
you may want to delete a file and the

00:07:34,400 --> 00:07:39,710
nice thing is with the config as it is a

00:07:37,520 --> 00:07:45,070
config file it's not restored on update

00:07:39,710 --> 00:07:45,070
but gia lipsy people wanted actually not

00:07:45,090 --> 00:07:48,449
wanted to use it for different use cases

00:07:46,919 --> 00:07:50,820
the use case was basically having a

00:07:48,449 --> 00:07:53,280
translations file just then merge into

00:07:50,820 --> 00:07:56,490
some library there in some lump sum

00:07:53,280 --> 00:08:00,060
database basically and then you can

00:07:56,490 --> 00:08:01,680
throw in a way to save to space but if

00:08:00,060 --> 00:08:03,120
it is a config file it's not restored

00:08:01,680 --> 00:08:05,160
that mean on an update you cannot update

00:08:03,120 --> 00:08:07,229
a database because the file is not even

00:08:05,160 --> 00:08:10,169
put there and it was kind of annoying

00:08:07,229 --> 00:08:12,060
and now you can basically do that so the

00:08:10,169 --> 00:08:13,949
use cases you have data that needs to be

00:08:12,060 --> 00:08:16,620
merged on installation and then be

00:08:13,949 --> 00:08:18,360
thrown away and it's not very much in

00:08:16,620 --> 00:08:24,660
the RPM spirit but there are use cases

00:08:18,360 --> 00:08:25,860
and so we be supported now then there

00:08:24,660 --> 00:08:31,080
are a couple other things which are not

00:08:25,860 --> 00:08:33,180
so much speculated added parameters for

00:08:31,080 --> 00:08:36,440
rpm build so you can actually do

00:08:33,180 --> 00:08:40,169
everything you do with the normal

00:08:36,440 --> 00:08:42,270
building also from a nice rpm there you

00:08:40,169 --> 00:08:44,760
there's also is like rebuild and

00:08:42,270 --> 00:08:46,920
recompile but although the intermediate

00:08:44,760 --> 00:08:50,490
stage two stages could not be passed to

00:08:46,920 --> 00:08:53,160
the command line and so we have

00:08:50,490 --> 00:08:55,380
basically minus our four rebuild and so

00:08:53,160 --> 00:08:58,529
you can basically go to any step to the

00:08:55,380 --> 00:09:00,600
from the source rpm I don't know it's

00:08:58,529 --> 00:09:02,550
probably not that important folder for

00:09:00,600 --> 00:09:05,000
the fedora workflow but there are a lot

00:09:02,550 --> 00:09:08,089
of people building packages and I'm

00:09:05,000 --> 00:09:12,240
circumstances there's another big thing

00:09:08,089 --> 00:09:15,029
which are those security I am a flex

00:09:12,240 --> 00:09:20,000
that's something that was done from IBM

00:09:15,029 --> 00:09:22,080
basically it's a it's basically

00:09:20,000 --> 00:09:23,670
signatures that are put into the file

00:09:22,080 --> 00:09:26,640
system so the kernel can check to the

00:09:23,670 --> 00:09:28,110
file didn't change so it's basically one

00:09:26,640 --> 00:09:30,930
of the proud to make trusted computing

00:09:28,110 --> 00:09:33,180
actually work but I don't know if it's

00:09:30,930 --> 00:09:47,730
fedora wants to do that but my guess is

00:09:33,180 --> 00:09:49,800
not i'm not sure i have only a very

00:09:47,730 --> 00:09:52,700
rough idea about it it is more under

00:09:49,800 --> 00:09:55,610
what does it break in the RPM IP

00:09:52,700 --> 00:10:07,130
a code stuff not so much what does it

00:09:55,610 --> 00:10:08,960
break on your system yeah right you

00:10:07,130 --> 00:10:20,560
cannot do it for directory contents be

00:10:08,960 --> 00:10:20,560
course that subdirectory content up in

00:10:35,680 --> 00:10:48,260
there I don't know the IBM because

00:10:39,080 --> 00:10:49,880
actually girl did it yeah maybe we will

00:10:48,260 --> 00:10:51,740
send we will end up might be really

00:10:49,880 --> 00:10:54,920
dated like three years because no one

00:10:51,740 --> 00:11:00,410
uses it but it's the first step to

00:10:54,920 --> 00:11:01,880
actually make defines more trusted so

00:11:00,410 --> 00:11:06,790
another thing that actually panel still

00:11:01,880 --> 00:11:09,560
did was was doing a check for 444

00:11:06,790 --> 00:11:11,870
encoding it's currently still disabled

00:11:09,560 --> 00:11:13,700
in a sin city only gives a warning but I

00:11:11,870 --> 00:11:14,900
don't know if fedora at one time is

00:11:13,700 --> 00:11:19,400
brave enough they can switch it on and

00:11:14,900 --> 00:11:23,180
basically prevent spec fights with funny

00:11:19,400 --> 00:11:26,060
characters from building then and make

00:11:23,180 --> 00:11:29,630
sure they are all properly utf-8 encoded

00:11:26,060 --> 00:11:32,330
and which is turns up all kind of

00:11:29,630 --> 00:11:35,210
problems especially with young don't

00:11:32,330 --> 00:11:38,050
know how dnf fritz if it gets crazy

00:11:35,210 --> 00:11:41,660
stuff from from from RPM because RPM and

00:11:38,050 --> 00:11:43,820
used to not care so if you just put some

00:11:41,660 --> 00:11:47,180
random le encoded bytes in there you get

00:11:43,820 --> 00:11:49,310
item by its out RPM just makes a

00:11:47,180 --> 00:11:51,590
comparison on the bits and it's happy if

00:11:49,310 --> 00:11:53,830
the match or and if it's something else

00:11:51,590 --> 00:11:56,680
like a description doesn't even

00:11:53,830 --> 00:11:58,810
get it do with some figurative and some

00:11:56,680 --> 00:12:04,020
higher-level languages like Python are

00:11:58,810 --> 00:12:11,580
pretty upset if they get wrongly encoded

00:12:04,020 --> 00:12:15,820
bytes so that's a way to at least

00:12:11,580 --> 00:12:18,490
mitigate a problem then we added what

00:12:15,820 --> 00:12:20,320
recommends and what what supplements and

00:12:18,490 --> 00:12:22,390
whatever stuff which we should have

00:12:20,320 --> 00:12:26,070
added like last year when we added two

00:12:22,390 --> 00:12:31,860
week dependencies but for some reasons

00:12:26,070 --> 00:12:31,860
no one noticed that our missing solved I

00:12:32,610 --> 00:12:41,260
don't know who forgot to check that so

00:12:38,020 --> 00:12:46,360
we added that and you probably still

00:12:41,260 --> 00:12:51,070
this time forgot them again but I talk

00:12:46,360 --> 00:12:55,450
about this next year so then we come to

00:12:51,070 --> 00:12:58,630
the bigger features one of the large one

00:12:55,450 --> 00:13:00,730
is file triggers that's something we

00:12:58,630 --> 00:13:02,530
have tried to do for quite a while there

00:13:00,730 --> 00:13:05,500
has been a previous attempt which didn't

00:13:02,530 --> 00:13:08,940
work out that create so it's got to eat

00:13:05,500 --> 00:13:11,320
it again this time we are basically

00:13:08,940 --> 00:13:15,010
using the same mechanisms we use for

00:13:11,320 --> 00:13:19,710
normal triggers and just glorify them to

00:13:15,010 --> 00:13:22,510
to do more which has the the thing is

00:13:19,710 --> 00:13:27,160
normal triggers we always kind of

00:13:22,510 --> 00:13:29,830
discouraged them being used so the story

00:13:27,160 --> 00:13:32,860
also thing so there's this old Disney

00:13:29,830 --> 00:13:34,510
movie the old Disney Robin Hood I don't

00:13:32,860 --> 00:13:37,450
know if anyone old enough to know that

00:13:34,510 --> 00:13:39,130
so the cartoon thing and there's there's

00:13:37,450 --> 00:13:40,660
trigger it's a character in there and

00:13:39,130 --> 00:13:43,240
it's basically what what triggers are

00:13:40,660 --> 00:13:46,810
it's one of you go down guards to

00:13:43,240 --> 00:13:50,740
vulture with a crossbow which is safe

00:13:46,810 --> 00:13:53,680
and will not fire unless you pound it

00:13:50,740 --> 00:13:56,770
into random directions basically that's

00:13:53,680 --> 00:13:59,050
what triggers are basically are so they

00:13:56,770 --> 00:14:04,960
are sitting there waiting for the wrong

00:13:59,050 --> 00:14:06,130
thing walking in front so one of our

00:14:04,960 --> 00:14:07,329
file triggers they're basically

00:14:06,130 --> 00:14:10,749
scriptlets at our exit

00:14:07,329 --> 00:14:14,679
cute if files our install or removed

00:14:10,749 --> 00:14:20,110
from given locations so they can

00:14:14,679 --> 00:14:22,839
basically keep care of places and files

00:14:20,110 --> 00:14:27,999
being pushed there the nice thing is in

00:14:22,839 --> 00:14:29,910
a an opposite to do nominal scriptlets

00:14:27,999 --> 00:14:33,100
which are basically tied to the package

00:14:29,910 --> 00:14:34,989
themselves they can be centralized and

00:14:33,100 --> 00:14:37,059
the files can be elsewhere in other

00:14:34,989 --> 00:14:39,309
packages so you can basically put a

00:14:37,059 --> 00:14:41,439
logic in one place where it belongs and

00:14:39,309 --> 00:14:43,420
have to order other packages putting

00:14:41,439 --> 00:14:45,670
just files they're not caring how it's

00:14:43,420 --> 00:14:47,920
implemented so you can actually change

00:14:45,670 --> 00:14:51,720
things like without going through

00:14:47,920 --> 00:14:55,929
hundreds of packages and just jump files

00:14:51,720 --> 00:14:57,850
so to understand how they work you

00:14:55,929 --> 00:15:00,850
basically need to know how nuclear

00:14:57,850 --> 00:15:03,399
triggers work so they're all but new but

00:15:00,850 --> 00:15:06,910
I still will go but over them they are

00:15:03,399 --> 00:15:10,959
basically four of them the names are a

00:15:06,910 --> 00:15:15,220
bit odd because historical reasons so

00:15:10,959 --> 00:15:18,160
I'm sorry but we're not changing yet get

00:15:15,220 --> 00:15:21,790
used to them or look them up if you need

00:15:18,160 --> 00:15:24,369
one because no one can actually remember

00:15:21,790 --> 00:15:26,470
which name actually does what so they

00:15:24,369 --> 00:15:28,179
are basically can we run before package

00:15:26,470 --> 00:15:29,980
installs after package sauce before

00:15:28,179 --> 00:15:31,059
we'll take package uninstall so after

00:15:29,980 --> 00:15:37,929
the package and installed by the names

00:15:31,059 --> 00:15:39,970
are kind of weird also with str

00:15:37,929 --> 00:15:42,189
scriptlets they also inherit all the

00:15:39,970 --> 00:15:44,519
weirdness of normal scriptlets like to

00:15:42,189 --> 00:15:48,100
install being done before our array so

00:15:44,519 --> 00:15:49,959
that's the trill you all hopefully are

00:15:48,100 --> 00:15:52,809
familiar with so that's the next thing

00:15:49,959 --> 00:15:58,419
to keep in mind so you come some baggage

00:15:52,809 --> 00:16:02,919
with that but that's how it is I mean no

00:15:58,419 --> 00:16:08,319
reason why that should change in rpm so

00:16:02,919 --> 00:16:10,569
without some triggers they get executed

00:16:08,319 --> 00:16:14,769
if the matching package gets installed

00:16:10,569 --> 00:16:19,319
or or uninstalled depending on what type

00:16:14,769 --> 00:16:20,670
of trigger is this so the execution is

00:16:19,319 --> 00:16:23,310
independent of the

00:16:20,670 --> 00:16:25,500
package that actually contains it so

00:16:23,310 --> 00:16:28,040
it's something happening when somewhere

00:16:25,500 --> 00:16:30,330
else something happens that's the trick

00:16:28,040 --> 00:16:33,360
the problem is the triggers are also

00:16:30,330 --> 00:16:36,330
executed if the package containing it is

00:16:33,360 --> 00:16:40,620
installed or updated that's done on

00:16:36,330 --> 00:16:43,080
purpose to allow the strip 'let 22 to

00:16:40,620 --> 00:16:45,870
work on the fire tedera or packages

00:16:43,080 --> 00:16:50,400
there have been installed before or to

00:16:45,870 --> 00:16:52,320
update something in in case you need to

00:16:50,400 --> 00:16:56,640
change the implementation of whatever to

00:16:52,320 --> 00:16:59,010
trigger us so so if you're if you're

00:16:56,640 --> 00:17:03,240
taking care of something like updating

00:16:59,010 --> 00:17:06,000
some cash you can rebuild the cash if

00:17:03,240 --> 00:17:08,790
the cash former changes even if only

00:17:06,000 --> 00:17:10,530
your package changed not you don't have

00:17:08,790 --> 00:17:13,250
to reinstall all other packages which

00:17:10,530 --> 00:17:18,210
would actually trigger the cash update

00:17:13,250 --> 00:17:19,890
so that's something to be aware of that

00:17:18,210 --> 00:17:24,560
a trigger can fire when you don't expect

00:17:19,890 --> 00:17:27,030
it so think about the craft across volpe

00:17:24,560 --> 00:17:30,870
point it in all kind of directions

00:17:27,030 --> 00:17:33,150
probably yours and and make sure that

00:17:30,870 --> 00:17:35,190
you're broken your prick your trigger so

00:17:33,150 --> 00:17:42,950
late they don't break anything if they

00:17:35,190 --> 00:17:47,310
get discharged on accident so gun safety

00:17:42,950 --> 00:17:49,950
dem missin is raining so in fact riggers

00:17:47,310 --> 00:17:53,670
are basically the same thing in opposite

00:17:49,950 --> 00:17:56,340
to the normal triggers we have 11

00:17:53,670 --> 00:17:57,900
trigger level less because we don't do

00:17:56,340 --> 00:17:59,340
anything before the package gets

00:17:57,900 --> 00:18:02,610
installed because they are no files

00:17:59,340 --> 00:18:06,780
there and so we kind of figure that's

00:18:02,610 --> 00:18:10,860
not that useful to do something with

00:18:06,780 --> 00:18:14,760
files that are not there yet but in

00:18:10,860 --> 00:18:17,070
addition to this to those three times so

00:18:14,760 --> 00:18:19,980
basically after the fights got installed

00:18:17,070 --> 00:18:22,020
before the fights get removed on after

00:18:19,980 --> 00:18:29,790
the fights get removed there's another

00:18:22,020 --> 00:18:31,680
set of triggers which run basically at

00:18:29,790 --> 00:18:33,740
the beginning or the end of transaction

00:18:31,680 --> 00:18:36,980
so they're trigger us only

00:18:33,740 --> 00:18:40,100
run once per transaction the idea here

00:18:36,980 --> 00:18:42,080
is the problem is one thing so I Paris

00:18:40,100 --> 00:18:43,760
cryptids are so annoying is

00:18:42,080 --> 00:18:46,100
because they are executed so many times

00:18:43,760 --> 00:18:47,720
every time you have to spin up the best

00:18:46,100 --> 00:18:50,270
or whatever and it takes a lot of time

00:18:47,720 --> 00:18:52,790
so when people are complaining about rpm

00:18:50,270 --> 00:18:56,059
being slow yes rpm does some things

00:18:52,790 --> 00:18:58,880
where is thoroughly but most of times

00:18:56,059 --> 00:19:03,460
actually spending some trigger or some

00:18:58,880 --> 00:19:03,460
scriptlets Colonel I'm looking at you

00:19:04,270 --> 00:19:10,790
which run all kind of software it just

00:19:08,750 --> 00:19:13,460
takes time and we'll s we execute them

00:19:10,790 --> 00:19:15,470
less often we have to spin up a batch or

00:19:13,460 --> 00:19:19,340
whatever that the more quickly we can do

00:19:15,470 --> 00:19:23,860
updates so that's the idea with the

00:19:19,340 --> 00:19:27,860
trench triggers soda d basically either

00:19:23,860 --> 00:19:31,220
done after installation of everything or

00:19:27,860 --> 00:19:33,800
before a transaction for fights that are

00:19:31,220 --> 00:19:38,720
going to be removed or after transaction

00:19:33,800 --> 00:19:41,480
for files that are then removed so the

00:19:38,720 --> 00:19:42,830
question is if you're executed after the

00:19:41,480 --> 00:19:45,760
transaction how do you know what

00:19:42,830 --> 00:19:48,440
actually happened and so we actually

00:19:45,760 --> 00:19:51,080
give you the list of files that are

00:19:48,440 --> 00:19:53,330
affected through the Khmer through the

00:19:51,080 --> 00:19:54,710
standard in so you can read them if

00:19:53,330 --> 00:19:56,570
you're interested if you're just

00:19:54,710 --> 00:20:02,720
updating some kind of cash you may not

00:19:56,570 --> 00:20:05,120
be interested in just romantic cash as

00:20:02,720 --> 00:20:08,510
they are scripted they share all the

00:20:05,120 --> 00:20:11,000
other parameters will still normal

00:20:08,510 --> 00:20:14,720
scriptlet so you can give an interpreter

00:20:11,000 --> 00:20:16,490
and stuff like this we added also a

00:20:14,720 --> 00:20:21,590
priority which allows you to basically

00:20:16,490 --> 00:20:23,450
ordered us to the file triggers in which

00:20:21,590 --> 00:20:25,130
to give an order in which they are

00:20:23,450 --> 00:20:29,500
executed one after the other because it

00:20:25,130 --> 00:20:33,320
might be important for some use cases

00:20:29,500 --> 00:20:36,550
maybe not maybe there are so we

00:20:33,320 --> 00:20:36,550
basically have yes

00:20:39,470 --> 00:20:44,900
the Transvaal trigger of whatever and he

00:20:42,440 --> 00:20:46,580
coded it and you are is that because it

00:20:44,900 --> 00:20:51,909
does not depend on batch so do you have

00:20:46,580 --> 00:20:51,909
to do that on every event known better

00:20:52,419 --> 00:21:00,830
you don't have to but if the the thing

00:20:58,580 --> 00:21:02,480
with Lou is every script you have to

00:21:00,830 --> 00:21:05,570
when you have a strap lab you have to

00:21:02,480 --> 00:21:08,150
ask yourself when is this going to be

00:21:05,570 --> 00:21:10,400
executed and if it is executed at the

00:21:08,150 --> 00:21:12,500
beginning of a transaction with an empty

00:21:10,400 --> 00:21:15,880
system you cannot call bash because

00:21:12,500 --> 00:21:27,980
there's no batch there that's basically

00:21:15,880 --> 00:21:29,750
if you have you have ef ef turn normal

00:21:27,980 --> 00:21:33,440
trigger fire triggers which are

00:21:29,750 --> 00:21:35,870
basically installed before before the

00:21:33,440 --> 00:21:39,950
fire now there's only after the files

00:21:35,870 --> 00:21:44,600
let I'll lay down so that should

00:21:39,950 --> 00:21:46,940
probably yeah so if you're if you're a

00:21:44,600 --> 00:21:50,690
core package which is installed before

00:21:46,940 --> 00:21:56,210
bash you probably need to use you are so

00:21:50,690 --> 00:21:59,299
but maybe if you did if you're dead core

00:21:56,210 --> 00:22:02,419
maybe you can do without Val triggers I

00:21:59,299 --> 00:22:04,309
don't know maybe you have other things

00:22:02,419 --> 00:22:07,850
to do I don't know but but for those

00:22:04,309 --> 00:22:10,039
cases you will you will need alwar yeah

00:22:07,850 --> 00:22:12,020
but it's basically one of those all

00:22:10,039 --> 00:22:14,809
those all those other scriptlet stuff

00:22:12,020 --> 00:22:17,390
still applies so that ann lewis script

00:22:14,809 --> 00:22:26,600
scripting is basically one of those

00:22:17,390 --> 00:22:29,330
other things and yeah now Lua is

00:22:26,600 --> 00:22:31,730
actually a part of our p.m. itself so

00:22:29,330 --> 00:22:34,669
it's built in it's it's part of the RPM

00:22:31,730 --> 00:22:36,740
process which might come from some magic

00:22:34,669 --> 00:22:40,190
place like an anaconda or whatever or

00:22:36,740 --> 00:22:43,039
order the world outside of your install

00:22:40,190 --> 00:22:45,320
route and so that's why it's used why

00:22:43,039 --> 00:22:47,030
we're using Lua it's part of our p.m. so

00:22:45,320 --> 00:22:51,280
it can be used even on an empty system

00:22:47,030 --> 00:22:51,280
that's what's all the fuss is about

00:22:52,320 --> 00:22:59,710
so and I did a quick trap on on on on

00:22:57,010 --> 00:23:03,120
the spec files of Fedora of the current

00:22:59,710 --> 00:23:08,140
Fedora tree it looks like it's pretty

00:23:03,120 --> 00:23:11,440
used a lot already the thing is one one

00:23:08,140 --> 00:23:13,810
thing a89 scriptlets is not much but you

00:23:11,440 --> 00:23:15,880
have to keep in mind that each of those

00:23:13,810 --> 00:23:18,310
triggers basically replaces all the

00:23:15,880 --> 00:23:26,050
scriptlets in the other packages that

00:23:18,310 --> 00:23:28,210
put files there so there and so so even

00:23:26,050 --> 00:23:31,470
if the whole distribution in the end has

00:23:28,210 --> 00:23:33,700
only maybe 30 40 50 of those triggers

00:23:31,470 --> 00:23:39,280
that's a good that's a huge thing

00:23:33,700 --> 00:23:42,970
because it replaces maybe 5 10 20 50

00:23:39,280 --> 00:23:44,740
times more and scriptlets and that's I

00:23:42,970 --> 00:23:48,550
think where we want to go in the long

00:23:44,740 --> 00:23:49,930
run and all of those that we have

00:23:48,550 --> 00:23:51,760
already are basically updating some

00:23:49,930 --> 00:23:53,800
caches so they are all very simple they

00:23:51,760 --> 00:23:56,560
are basically just to avoid whatever

00:23:53,800 --> 00:23:59,100
whatever cash to update thing they have

00:23:56,560 --> 00:24:01,270
they just call it and be done with it

00:23:59,100 --> 00:24:03,460
with the exception of system behavior

00:24:01,270 --> 00:24:06,190
which actually reloads the configuration

00:24:03,460 --> 00:24:18,250
of the system 10 modules or whatever

00:24:06,190 --> 00:24:24,310
they are called right units yes so you

00:24:18,250 --> 00:24:26,590
can choose I should have looked it up

00:24:24,310 --> 00:24:31,960
i've looked into some but i don't

00:24:26,590 --> 00:24:34,120
remember yeah yeah that should be

00:24:31,960 --> 00:24:36,220
transaction unless it's a cash that's

00:24:34,120 --> 00:24:39,370
may be needed by RS triplets that's

00:24:36,220 --> 00:24:42,040
basically the whole script that story

00:24:39,370 --> 00:24:44,200
again if you need to update something

00:24:42,040 --> 00:24:48,090
that's needed trying to transaction do

00:24:44,200 --> 00:24:52,660
it now otherwise use the transactions

00:24:48,090 --> 00:24:55,050
script lat okay that's file triggers

00:24:52,660 --> 00:24:58,750
there's a bit of documentation I heard

00:24:55,050 --> 00:25:02,280
next thing we need to get going one

00:24:58,750 --> 00:25:02,280
question one quick question

00:25:23,560 --> 00:25:31,220
yeah so there's a lot of scriptlet which

00:25:27,140 --> 00:25:35,960
the crossbow is pointing it and which

00:25:31,220 --> 00:25:38,750
are likely to get shot so the network

00:25:35,960 --> 00:25:40,010
next next big thing is the boolean

00:25:38,750 --> 00:25:42,470
dependencies if there are no questions

00:25:40,010 --> 00:25:46,430
left four or five triggers otherwise we

00:25:42,470 --> 00:25:49,490
can do questions at the end it's one of

00:25:46,430 --> 00:25:51,830
my big things we wanted to do for for

00:25:49,490 --> 00:25:55,190
for like ages and it's finally clear

00:25:51,830 --> 00:25:58,580
it's basically you can now use boolean

00:25:55,190 --> 00:26:00,470
expressions within dependencies and it's

00:25:58,580 --> 00:26:02,840
important to understand that the top

00:26:00,470 --> 00:26:05,210
rights will stay simple I actually

00:26:02,840 --> 00:26:09,440
thought about also making them boolean

00:26:05,210 --> 00:26:12,620
expressions but things get crazy if

00:26:09,440 --> 00:26:16,850
you're true that the the thing is with

00:26:12,620 --> 00:26:19,960
provides being simple the stuff that RPM

00:26:16,850 --> 00:26:22,370
dust can still basically be done

00:26:19,960 --> 00:26:24,320
aesthetically like just checking every

00:26:22,370 --> 00:26:26,510
boolean expression if it is true or

00:26:24,320 --> 00:26:27,620
false if you start having boolean

00:26:26,510 --> 00:26:30,380
expression on the other side you

00:26:27,620 --> 00:26:34,070
basically have to do what dnf does like

00:26:30,380 --> 00:26:36,380
real depth solving checking what stuff

00:26:34,070 --> 00:26:40,580
actually needs to be what to get to a

00:26:36,380 --> 00:26:43,130
being and we said no basically right now

00:26:40,580 --> 00:26:45,380
there are four operators its end it's

00:26:43,130 --> 00:26:50,080
all its if which is basically the

00:26:45,380 --> 00:26:52,790
reverse implication and yes if else

00:26:50,080 --> 00:27:02,230
which basically gives the forward

00:26:52,790 --> 00:27:02,230
implications as a third term um yes

00:27:02,570 --> 00:27:13,710
requires more videos sorry by this time

00:27:07,920 --> 00:27:17,970
some package requires who or bar so what

00:27:13,710 --> 00:27:20,670
water requires that that that's an

00:27:17,970 --> 00:27:26,490
excellent question did I say I will talk

00:27:20,670 --> 00:27:28,230
about what requires next year the thing

00:27:26,490 --> 00:27:31,680
is it currently doesn't really work and

00:27:28,230 --> 00:27:33,990
while one of this is recursive into

00:27:31,680 --> 00:27:36,590
figures to figure it out and the next

00:27:33,990 --> 00:27:39,380
thing is there's there for the reverse

00:27:36,590 --> 00:27:42,360
query there's no not really an answer

00:27:39,380 --> 00:27:45,480
which which which fits the same question

00:27:42,360 --> 00:27:47,730
that we had before it basically you can

00:27:45,480 --> 00:27:51,540
either say well it only fits if you

00:27:47,730 --> 00:27:53,820
actually really match the full term or

00:27:51,540 --> 00:27:56,340
you can say well these are all the terms

00:27:53,820 --> 00:27:59,610
that might fit somehow some of them

00:27:56,340 --> 00:28:02,100
might even prevent that thing for

00:27:59,610 --> 00:28:04,440
matching if it's in the wrong place of

00:28:02,100 --> 00:28:08,520
the term but we will show it to you

00:28:04,440 --> 00:28:10,380
anyway so that's yeah I still have to

00:28:08,520 --> 00:28:15,510
look into this thing to be honest so

00:28:10,380 --> 00:28:17,910
yeah yeah yeah it's an issue and we will

00:28:15,510 --> 00:28:24,000
document it so I have an example here

00:28:17,910 --> 00:28:28,230
and so you can the thing is it is as a

00:28:24,000 --> 00:28:29,970
feature it is much more complicated than

00:28:28,230 --> 00:28:31,590
for example two pints triggers the file

00:28:29,970 --> 00:28:33,300
triggers is you have a use case you have

00:28:31,590 --> 00:28:35,850
script as you need to run and you just

00:28:33,300 --> 00:28:38,730
use it in it works the problem here is

00:28:35,850 --> 00:28:41,970
it's more like a toolbox and to be

00:28:38,730 --> 00:28:43,920
honest i also have half a few ideas how

00:28:41,970 --> 00:28:46,230
it can be used but it's very very

00:28:43,920 --> 00:28:48,840
unclear what is actually going to be

00:28:46,230 --> 00:28:51,060
like to be wider use that in the

00:28:48,840 --> 00:28:54,810
distribution in what corner cases people

00:28:51,060 --> 00:28:57,930
might be able to come up to actually do

00:28:54,810 --> 00:29:00,030
with it it also interacts very nicely

00:28:57,930 --> 00:29:02,760
with the week dependencies we just edit

00:29:00,030 --> 00:29:06,210
so you have a huge plethora of things

00:29:02,760 --> 00:29:09,840
you can do now and it's difficult to get

00:29:06,210 --> 00:29:11,670
a grip on what actually should be done

00:29:09,840 --> 00:29:12,870
so that maybe we can do that in a little

00:29:11,670 --> 00:29:16,800
discussion there

00:29:12,870 --> 00:29:19,320
in a question session the example I have

00:29:16,800 --> 00:29:21,480
here is the stuff that's actually

00:29:19,320 --> 00:29:25,440
currently been worked on which are like

00:29:21,480 --> 00:29:28,470
final language packages and you can

00:29:25,440 --> 00:29:30,540
basically do a supplement which is a

00:29:28,470 --> 00:29:32,280
week reverse dependencies that it's

00:29:30,540 --> 00:29:35,570
basically so it would be proud of the

00:29:32,280 --> 00:29:37,920
after language pack and it says

00:29:35,570 --> 00:29:42,840
supplement with person means install me

00:29:37,920 --> 00:29:45,090
if if my main package gets installed in

00:29:42,840 --> 00:29:47,610
the language I'm providing is also

00:29:45,090 --> 00:29:50,220
installed so what people are working

00:29:47,610 --> 00:29:52,200
right now it's basically having meta

00:29:50,220 --> 00:29:55,710
packages that are empty that basically

00:29:52,200 --> 00:29:57,300
represent the language and although lang

00:29:55,710 --> 00:29:59,550
packs can basically attached to their

00:29:57,300 --> 00:30:01,530
and be installed automatically if the

00:29:59,550 --> 00:30:03,929
language support for this given language

00:30:01,530 --> 00:30:07,860
is installed on the system so this is

00:30:03,929 --> 00:30:10,740
also basically replacing the if clauses

00:30:07,860 --> 00:30:13,620
we have in incomes which has been

00:30:10,740 --> 00:30:18,059
traditionally used mainly for those

00:30:13,620 --> 00:30:21,270
language stuff with some exceptions but

00:30:18,059 --> 00:30:24,630
I don't know is it still in there do you

00:30:21,270 --> 00:30:27,140
anyone know dot coms haven't looked for

00:30:24,630 --> 00:30:27,140
a while

00:30:29,290 --> 00:30:47,510
okay but okay so so I hear conditionals

00:30:45,410 --> 00:30:50,150
are still in comms but I am no longer

00:30:47,510 --> 00:30:52,340
used because the language lang pag pag

00:30:50,150 --> 00:30:55,730
plug-in does the work because the comm

00:30:52,340 --> 00:31:01,250
stuff didn't work so well basically for

00:30:55,730 --> 00:31:02,540
the rows in the back so I was grabbing

00:31:01,250 --> 00:31:06,169
through through the through the

00:31:02,540 --> 00:31:10,130
repository and was wondering how is it

00:31:06,169 --> 00:31:12,710
used must be create and yeah there's

00:31:10,130 --> 00:31:15,260
exactly one package which has one and

00:31:12,710 --> 00:31:23,570
basically it looks a bit like like this

00:31:15,260 --> 00:31:39,500
one and that's it so no one cares so

00:31:23,570 --> 00:31:41,750
sorry so at least so so so so instead to

00:31:39,500 --> 00:31:43,549
to lift myself up a bit i looked what

00:31:41,750 --> 00:31:46,010
week taps are actually doing in the

00:31:43,549 --> 00:31:51,020
distribution and looks like they arrived

00:31:46,010 --> 00:31:52,850
there so the numbers are compared to all

00:31:51,020 --> 00:31:55,760
dependencies in the dispute maybe not

00:31:52,850 --> 00:31:59,780
that big but it's looks like this they

00:31:55,760 --> 00:32:02,090
are gaining subtraction and getting used

00:31:59,780 --> 00:32:06,980
and they're basically are also getting

00:32:02,090 --> 00:32:11,270
used a way that is expected like the

00:32:06,980 --> 00:32:14,690
reverse with dependencies are used much

00:32:11,270 --> 00:32:16,490
less only for few cases which is i've

00:32:14,690 --> 00:32:21,860
not checked them yet because that's not

00:32:16,490 --> 00:32:23,540
my problem but maybe someone should but

00:32:21,860 --> 00:32:27,890
they are used much less than the forward

00:32:23,540 --> 00:32:33,049
ones which are supposed to be used as a

00:32:27,890 --> 00:32:36,190
default in there but used on both levels

00:32:33,049 --> 00:32:38,919
they're slightly stronger ones

00:32:36,190 --> 00:32:40,840
that are used to basically allow people

00:32:38,919 --> 00:32:43,809
to be installed packages which would

00:32:40,840 --> 00:32:45,629
otherwise be selected and really the

00:32:43,809 --> 00:32:48,340
suggests which are basically hints

00:32:45,629 --> 00:32:51,700
telling the depths over which package to

00:32:48,340 --> 00:32:56,470
choose in case there are multiple

00:32:51,700 --> 00:32:58,899
options and so both of those are used to

00:32:56,470 --> 00:33:06,690
a good degree could be more we'll get

00:32:58,899 --> 00:33:10,929
more I'm optimistic about this so but as

00:33:06,690 --> 00:33:13,419
in here here that's not the thing about

00:33:10,929 --> 00:33:15,279
one package using it it's not the real

00:33:13,419 --> 00:33:19,570
whole picture there people are working

00:33:15,279 --> 00:33:21,370
on this G lipsy mainly will is currently

00:33:19,570 --> 00:33:23,259
working on splitting our basically all

00:33:21,370 --> 00:33:27,899
the trends translations into sub

00:33:23,259 --> 00:33:30,700
packages which end up like 180 if I

00:33:27,899 --> 00:33:34,539
thought if I if I understood it

00:33:30,700 --> 00:33:37,600
correctly so it's it's it's a bunch and

00:33:34,539 --> 00:33:38,919
of course it's always an RPM if you try

00:33:37,600 --> 00:33:43,779
something completely new you run into

00:33:38,919 --> 00:33:46,419
issues turns out some lips off and

00:33:43,779 --> 00:33:50,309
especially your April query is not yet

00:33:46,419 --> 00:33:53,590
one hundred percent up to the task and

00:33:50,309 --> 00:33:57,759
also rpm pro horribly when they try to

00:33:53,590 --> 00:34:00,940
generate 180 sub packages out of one

00:33:57,759 --> 00:34:04,720
macro if for some reason there's some

00:34:00,940 --> 00:34:19,359
buffer that wasn't just dynamic enough

00:34:04,720 --> 00:34:22,839
and no note 768 mr. number but as far as

00:34:19,359 --> 00:34:27,099
i sees blue bush fix that and so they're

00:34:22,839 --> 00:34:28,990
on good track and i hope we will get to

00:34:27,099 --> 00:34:31,540
the point where we can then standardize

00:34:28,990 --> 00:34:34,619
their solution maybe even put it as a

00:34:31,540 --> 00:34:38,260
standard of macaroni or PM upstream and

00:34:34,619 --> 00:34:40,540
so other people will have much less work

00:34:38,260 --> 00:34:42,970
to do to spit out their stuff how much

00:34:40,540 --> 00:34:44,889
is this going to be used still up to

00:34:42,970 --> 00:34:48,099
debate that's not really an RPM upstream

00:34:44,889 --> 00:34:50,349
question my guess is that are right up

00:34:48,099 --> 00:34:52,690
maybe a handful of packages were big

00:34:50,349 --> 00:34:57,400
enough to really split out everything

00:34:52,690 --> 00:34:59,950
into hundreds of sub packages but that's

00:34:57,400 --> 00:35:02,619
up to this for other people to decide

00:34:59,950 --> 00:35:07,900
how fine that the distribution wants to

00:35:02,619 --> 00:35:10,239
to drain that I expect there will be at

00:35:07,900 --> 00:35:18,400
least a handful of packages maybe maybe

00:35:10,239 --> 00:35:22,630
more we'll see so I want to say a bit

00:35:18,400 --> 00:35:26,529
more how it works because the thing is

00:35:22,630 --> 00:35:31,229
if you come with with the normal package

00:35:26,529 --> 00:35:31,229
your mindset and read those relations

00:35:31,920 --> 00:35:39,549
it's not like like the like the boolean

00:35:34,900 --> 00:35:42,160
expressions change much but the default

00:35:39,549 --> 00:35:45,119
mindset at least I have does no longer

00:35:42,160 --> 00:35:49,660
work so if if you read yours read

00:35:45,119 --> 00:35:52,029
package X requires this package and for

00:35:49,660 --> 00:35:54,630
some things this works nicely it

00:35:52,029 --> 00:35:58,509
requires this package or does a package

00:35:54,630 --> 00:36:01,839
so those are the normal flow of reading

00:35:58,509 --> 00:36:03,700
it like a sentence works but there are

00:36:01,839 --> 00:36:06,069
some points where it breaks down and you

00:36:03,700 --> 00:36:08,079
actually have to have them have a model

00:36:06,069 --> 00:36:11,109
in your mind how it's actually working

00:36:08,079 --> 00:36:13,269
and and in it not just being some

00:36:11,109 --> 00:36:16,719
English sentence with parent users in in

00:36:13,269 --> 00:36:18,880
between and so the thing you have to

00:36:16,719 --> 00:36:20,680
realize it's basically whenever there is

00:36:18,880 --> 00:36:24,069
a name or name and add version

00:36:20,680 --> 00:36:27,039
comparison this is translated into a

00:36:24,069 --> 00:36:30,579
boolean value whether you find a match

00:36:27,039 --> 00:36:32,950
or not so so if you require us package X

00:36:30,579 --> 00:36:37,119
and package x is there that's getting a

00:36:32,950 --> 00:36:38,950
true if package is not there in the to

00:36:37,119 --> 00:36:41,019
be completed translations of course

00:36:38,950 --> 00:36:43,119
always we have always talking of of the

00:36:41,019 --> 00:36:47,200
future basically after the translation

00:36:43,119 --> 00:36:48,930
as successfully run if it's not there

00:36:47,200 --> 00:36:51,969
then it is this is going to be a false

00:36:48,930 --> 00:36:54,910
and everything else is just boolean

00:36:51,969 --> 00:36:57,460
operation so the end is just as a normal

00:36:54,910 --> 00:36:59,710
boolean end it requires both sides to be

00:36:57,460 --> 00:37:01,329
true to all requires one side to be true

00:36:59,710 --> 00:37:04,509
and if

00:37:01,329 --> 00:37:11,079
servers yeah which requires have we have

00:37:04,509 --> 00:37:13,390
two flights like for this so so whenever

00:37:11,079 --> 00:37:15,549
things get fishy you can basically take

00:37:13,390 --> 00:37:19,599
a step back and say well that's all

00:37:15,549 --> 00:37:22,089
boolean values and I can figure out what

00:37:19,599 --> 00:37:23,859
expressions means by just imagining

00:37:22,089 --> 00:37:26,589
what's happening if some parts get

00:37:23,859 --> 00:37:32,559
through or faults and how this gets then

00:37:26,589 --> 00:37:34,599
combined and in the end basically most

00:37:32,559 --> 00:37:37,390
of the dependencies needs to get true to

00:37:34,599 --> 00:37:39,700
work or conflicts need to be false of

00:37:37,390 --> 00:37:43,079
course otherwise it is a conflict and

00:37:39,700 --> 00:37:48,039
you cannot install so it's basically

00:37:43,079 --> 00:37:51,219
requires with a knot in front photos who

00:37:48,039 --> 00:37:57,459
think that's more easy to understand but

00:37:51,219 --> 00:37:59,920
most probably don't so the thing that's

00:37:57,459 --> 00:38:02,019
a so end in awe or is actually

00:37:59,920 --> 00:38:07,299
pretty simple to understand what's bit

00:38:02,019 --> 00:38:09,940
tricky is the if operator and because it

00:38:07,299 --> 00:38:13,839
works very well if the XO if the whole

00:38:09,940 --> 00:38:17,349
term is like positive so if you have for

00:38:13,839 --> 00:38:20,619
example requires package a if package B

00:38:17,349 --> 00:38:23,469
that's nice and easy if package B is you

00:38:20,619 --> 00:38:26,019
also require the first package and you

00:38:23,469 --> 00:38:28,869
basically you have to install them both

00:38:26,019 --> 00:38:30,459
then and if you just install the first

00:38:28,869 --> 00:38:32,259
packets it doesn't matter because

00:38:30,459 --> 00:38:36,160
package P is not there and we don't care

00:38:32,259 --> 00:38:39,880
then but of course we don't care means

00:38:36,160 --> 00:38:42,130
the requires as a whole is true the

00:38:39,880 --> 00:38:46,839
whole term has to be true so the

00:38:42,130 --> 00:38:52,029
requires is fulfilled and if we now put

00:38:46,839 --> 00:38:54,249
that in an in an conflicts being true

00:38:52,029 --> 00:38:56,559
it's not like the default case we are

00:38:54,249 --> 00:38:59,170
looking for because of course you have

00:38:56,559 --> 00:39:03,459
to be false to for the conflict not to

00:38:59,170 --> 00:39:06,459
affect or not to stop the transaction so

00:39:03,459 --> 00:39:11,559
if you say conflicts package a if Peggy

00:39:06,459 --> 00:39:12,729
HP and package B is not there then the

00:39:11,559 --> 00:39:13,960
whole charm is true and you have a

00:39:12,729 --> 00:39:18,670
conflict

00:39:13,960 --> 00:39:21,339
and that's probably not what you want if

00:39:18,670 --> 00:39:24,099
you want it fine but then you have

00:39:21,339 --> 00:39:25,480
something weird complicated and you've

00:39:24,099 --> 00:39:29,859
probably thought about it long enough

00:39:25,480 --> 00:39:34,599
that you don't need my talk but but if

00:39:29,859 --> 00:39:39,580
you so the general rule is if you can

00:39:34,599 --> 00:39:41,710
use end instead and think it's the same

00:39:39,580 --> 00:39:44,530
thing it's probably not and usually

00:39:41,710 --> 00:39:47,710
should use and so that that's basically

00:39:44,530 --> 00:39:50,680
the thing to take away so that these ifs

00:39:47,710 --> 00:39:54,910
as soon as they are used negatively or

00:39:50,680 --> 00:39:58,750
in the second example as part of some or

00:39:54,910 --> 00:40:00,849
chain where you say well if nothing

00:39:58,750 --> 00:40:02,859
happens it's okay if it's false because

00:40:00,849 --> 00:40:07,750
someone off to other packages then

00:40:02,859 --> 00:40:10,210
should be installed so so so if the

00:40:07,750 --> 00:40:13,900
default basically should be zero or

00:40:10,210 --> 00:40:17,890
false then if it's not typically what

00:40:13,900 --> 00:40:19,690
you're looking for and if you replace

00:40:17,890 --> 00:40:21,730
the if by an end and then the whole

00:40:19,690 --> 00:40:29,230
thing then actually still makes sense

00:40:21,730 --> 00:40:31,420
then go go with it is is I don't know do

00:40:29,230 --> 00:40:40,000
I need more clarification on this if

00:40:31,420 --> 00:40:43,720
stuff what it actually does I mean you

00:40:40,000 --> 00:40:46,290
can do of course so so so truth tables

00:40:43,720 --> 00:40:46,290
and stuff like this

00:40:48,920 --> 00:40:56,190
and yeah there are tears of

00:40:52,380 --> 00:41:04,020
documentation dude anyone needs the

00:40:56,190 --> 00:41:06,210
morgans rule just just hmm so that sort

00:41:04,020 --> 00:41:10,890
of else is basically you say package a

00:41:06,210 --> 00:41:13,140
if package be else package see and it's

00:41:10,890 --> 00:41:15,960
its choice yeah I should have had an

00:41:13,140 --> 00:41:17,490
example here on the documentation page

00:41:15,960 --> 00:41:19,470
there's an example for us which

00:41:17,490 --> 00:41:21,240
basically means if the picture is

00:41:19,470 --> 00:41:23,130
installed and we require this package

00:41:21,240 --> 00:41:27,000
and if not installed you still require

00:41:23,130 --> 00:41:29,070
another package it's not really

00:41:27,000 --> 00:41:31,140
necessary to have the system operator so

00:41:29,070 --> 00:41:33,180
you can do that otherwise but it's I

00:41:31,140 --> 00:41:35,760
think the Sun Texas is so nice that I

00:41:33,180 --> 00:41:40,290
just had to edit you can basically make

00:41:35,760 --> 00:41:46,320
it be the second line how do I get it

00:41:40,290 --> 00:41:53,579
out of my mind and so if the else means

00:41:46,320 --> 00:41:54,990
if if not Jojo I'm not doing this by

00:41:53,579 --> 00:41:58,500
heart

00:41:54,990 --> 00:42:01,320
so but in the end it's it's basically

00:41:58,500 --> 00:42:03,750
just an it's placing a compound which

00:42:01,320 --> 00:42:06,300
you can have with two lines of saying

00:42:03,750 --> 00:42:08,640
one and if and i think one in end or

00:42:06,300 --> 00:42:11,070
something which means the same thing but

00:42:08,640 --> 00:42:14,760
if if then else is somehow i think

00:42:11,070 --> 00:42:16,440
cleaner and it shows more that you have

00:42:14,760 --> 00:42:18,570
an alternative depending on the package

00:42:16,440 --> 00:42:25,830
is not beaten there so so it's nicer

00:42:18,570 --> 00:42:38,070
it's syntactic sugar basically so that's

00:42:25,830 --> 00:42:51,980
basically it can you speak a bit up I

00:42:38,070 --> 00:43:00,359
can yeah it works get up the i hope the

00:42:51,980 --> 00:43:02,310
the deer just did but the thing is you

00:43:00,359 --> 00:43:03,690
have to have the parent eases for for

00:43:02,310 --> 00:43:06,270
these operations have to be basically

00:43:03,690 --> 00:43:08,040
the beginning of a full of words just

00:43:06,270 --> 00:43:10,109
some special code which allows like

00:43:08,040 --> 00:43:16,710
basically closing the parent eases if

00:43:10,109 --> 00:43:19,280
there's still some open but yeah you

00:43:16,710 --> 00:43:19,280
should test it

00:43:42,270 --> 00:43:48,400
yeah the thing is I thought about us

00:43:45,040 --> 00:43:50,530
first or not operator so if I always had

00:43:48,400 --> 00:43:53,470
the feeling that the not operator is

00:43:50,530 --> 00:43:55,750
clearly missing the problem is I have

00:43:53,470 --> 00:43:58,300
not been able to come up with a use case

00:43:55,750 --> 00:44:00,220
for it and I asked people to come up

00:43:58,300 --> 00:44:02,950
with a use case in all the use cases

00:44:00,220 --> 00:44:05,170
they came up with where we're like don't

00:44:02,950 --> 00:44:07,180
do this there's you can do that with a

00:44:05,170 --> 00:44:10,300
different thing which is more clear and

00:44:07,180 --> 00:44:12,510
it just complicated things so if you can

00:44:10,300 --> 00:44:16,260
have if you can come up with a use case

00:44:12,510 --> 00:44:18,940
where where the not operator really is

00:44:16,260 --> 00:44:21,720
useful and actually looks more beautiful

00:44:18,940 --> 00:44:25,300
than an alternative please come to me I

00:44:21,720 --> 00:44:30,780
probably forgot the second part which

00:44:25,300 --> 00:44:30,780
answer was no thank you very much

00:44:37,570 --> 00:44:40,570

YouTube URL: https://www.youtube.com/watch?v=t10ErV9Lt5Y


