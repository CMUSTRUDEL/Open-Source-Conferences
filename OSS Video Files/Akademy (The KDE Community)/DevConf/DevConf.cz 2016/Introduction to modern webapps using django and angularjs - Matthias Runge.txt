Title: Introduction to modern webapps using django and angularjs - Matthias Runge
Publication date: 2016-02-11
Playlist: DevConf.cz 2016
Description: 
	The following is indendend to give an overview on web application
development these days, especially under the light of restful apis
already used in projects like OpenStack.

OpenStack Horizon is moving from a pure python application to more responsive interface for end users to a OpenStack cloud.


http://www.openstack.org/
http://docs.openstack.org/developer/h...
https://github.com/openstack/horizon

Presentation: http://bit.ly/1PRNfSZ
Captions: 
	00:05:13,990 --> 00:05:17,100
still ugly

00:05:52,259 --> 00:05:58,900
hi let me welcome Mattias run game he's

00:05:57,039 --> 00:06:01,180
a software engineer at Red Hat and he

00:05:58,900 --> 00:06:05,009
will tell us a bit about web

00:06:01,180 --> 00:06:08,680
applications using Django and angularjs

00:06:05,009 --> 00:06:12,460
thank you very much um in the next few

00:06:08,680 --> 00:06:18,789
minutes up first of all welcome to my

00:06:12,460 --> 00:06:23,620
talk I'm glad I see all of you here on a

00:06:18,789 --> 00:06:30,279
Sunday afternoon after a long week and

00:06:23,620 --> 00:06:32,860
so on so this is just to be intended sa

00:06:30,279 --> 00:06:36,029
introduction touching many many many

00:06:32,860 --> 00:06:39,370
talk topics or many many buzzwords I

00:06:36,029 --> 00:06:41,529
guess naming all those buzzwords is the

00:06:39,370 --> 00:06:45,099
reason why I was selected to be

00:06:41,529 --> 00:06:49,389
presenting here it's not to be manned as

00:06:45,099 --> 00:06:52,139
a deep dive into anything so if if you

00:06:49,389 --> 00:06:54,729
would like to see something like that I

00:06:52,139 --> 00:07:01,509
would suggest to save your time and

00:06:54,729 --> 00:07:04,899
leave so first of all I would introduce

00:07:01,509 --> 00:07:11,379
like to introduce you to the terminology

00:07:04,899 --> 00:07:15,520
and just describe where we are what we

00:07:11,379 --> 00:07:23,740
are talking about and what's the problem

00:07:15,520 --> 00:07:26,559
description so first of all it does any

00:07:23,740 --> 00:07:32,199
one of you have experience with

00:07:26,559 --> 00:07:36,479
something like OpenStack awesome and any

00:07:32,199 --> 00:07:42,930
one of you have experience with Django

00:07:36,479 --> 00:07:49,870
120 great anyone experience with angular

00:07:42,930 --> 00:07:55,830
great as well so OpenStack is a

00:07:49,870 --> 00:07:58,930
a project to provide you

00:07:55,830 --> 00:08:02,380
infrastructure-as-a-service like you are

00:07:58,930 --> 00:08:05,730
able to click on a button and get a

00:08:02,380 --> 00:08:09,070
virtual machine somewhere running

00:08:05,730 --> 00:08:13,480
horizon is the project I'm working on is

00:08:09,070 --> 00:08:15,790
the web front-end for OpenStack so you

00:08:13,480 --> 00:08:18,580
could click in your horizon until that

00:08:15,790 --> 00:08:21,610
button and get a instance i'm also a

00:08:18,580 --> 00:08:24,550
fedora contributor rdio contributor and

00:08:21,610 --> 00:08:33,940
maintainer on a redhead OpenStack

00:08:24,550 --> 00:08:37,120
packages and so on so most of you should

00:08:33,940 --> 00:08:39,670
be knowing we are talking about browsers

00:08:37,120 --> 00:08:41,710
we are talking about web servers we are

00:08:39,670 --> 00:08:44,050
talking about whiskey with which is the

00:08:41,710 --> 00:08:46,930
interface binding your gem Django in

00:08:44,050 --> 00:08:53,560
your web server and we are talking about

00:08:46,930 --> 00:08:57,100
client-side scripting this in OpenStack

00:08:53,560 --> 00:09:03,100
horizon this somehow change we we've

00:08:57,100 --> 00:09:07,200
been a django only project and OpenStack

00:09:03,100 --> 00:09:17,560
is very very Python centric I'd say

00:09:07,200 --> 00:09:21,310
welcome take a seat so as you all have

00:09:17,560 --> 00:09:25,830
heard already about Django I just throw

00:09:21,310 --> 00:09:30,430
the slides in it's still a fast-evolving

00:09:25,830 --> 00:09:36,820
project with some interesting changes in

00:09:30,430 --> 00:09:41,100
further for the next few versions doing

00:09:36,820 --> 00:09:45,100
a bit DJ a short detour I already

00:09:41,100 --> 00:09:48,910
mentioned OpenStack horizon it is a

00:09:45,100 --> 00:09:52,660
whiskey application running in mostly

00:09:48,910 --> 00:09:57,610
apache httpd it is implemented in python

00:09:52,660 --> 00:10:02,850
as it uses django and originally we were

00:09:57,610 --> 00:10:02,850
or more something like two projects

00:10:03,139 --> 00:10:22,399
first one was a it's not interesting no

00:10:15,470 --> 00:10:32,329
words you want to scar so I'm sorry I

00:10:22,399 --> 00:10:35,869
cannot sell them horizon is being made

00:10:32,329 --> 00:10:39,290
of two pies and applications one is

00:10:35,869 --> 00:10:43,299
named horizon and it's currently the

00:10:39,290 --> 00:10:47,179
framework to implement a dashboard to

00:10:43,299 --> 00:10:48,980
implore it's it's the framework to

00:10:47,179 --> 00:10:51,769
implement a dashboard for OpenStack

00:10:48,980 --> 00:10:56,149
dashboard and OpenStack dashboard itself

00:10:51,769 --> 00:11:00,350
it's is the implementation it has been

00:10:56,149 --> 00:11:03,139
part of open sections probably ever it's

00:11:00,350 --> 00:11:04,910
it's not entirely true but it's it's

00:11:03,139 --> 00:11:07,790
been integrated in the object for a long

00:11:04,910 --> 00:11:10,489
long time and as I mentioned before it's

00:11:07,790 --> 00:11:15,220
the end user interface for OpenStack

00:11:10,489 --> 00:11:18,290
dashboard unlike other Django

00:11:15,220 --> 00:11:21,559
applications it is completely stateless

00:11:18,290 --> 00:11:25,579
and it doesn't use a database so it

00:11:21,559 --> 00:11:30,529
everything is stored somewhere else and

00:11:25,579 --> 00:11:37,519
it's exclusively talks to underlying

00:11:30,529 --> 00:11:43,249
services using a restful api I mentioned

00:11:37,519 --> 00:11:45,739
before horizon is the dashboard for

00:11:43,249 --> 00:11:50,860
OpenStack and you could do something

00:11:45,739 --> 00:11:50,860
like large instances manipulate your

00:11:51,369 --> 00:11:58,399
system images you could attach create

00:11:55,039 --> 00:12:01,279
volumes like comparable to a hard disk

00:11:58,399 --> 00:12:05,169
you could manipulate Network

00:12:01,279 --> 00:12:07,730
configurations and so on or even launch

00:12:05,169 --> 00:12:13,959
databases if you're using the database

00:12:07,730 --> 00:12:13,959
project in OpenStack so

00:12:15,330 --> 00:12:23,260
Jengo provides you a whole bunch of

00:12:19,180 --> 00:12:26,770
tools useful for creating something like

00:12:23,260 --> 00:12:30,220
a dashboard or a web application lat

00:12:26,770 --> 00:12:32,830
like it takes care of authenticating

00:12:30,220 --> 00:12:36,420
your users it's even pluggable as we

00:12:32,830 --> 00:12:40,390
will see in the next slide you have

00:12:36,420 --> 00:12:45,850
features like a built-in admin side

00:12:40,390 --> 00:12:58,050
which is not used at all in OpenStack as

00:12:45,850 --> 00:13:01,360
you don't in come on as we don't use a

00:12:58,050 --> 00:13:08,340
database adapter in OpenStack we don't

00:13:01,360 --> 00:13:08,340
need the function in Django for this

00:13:09,330 --> 00:13:16,090
we'll have a short look at the template

00:13:13,420 --> 00:13:19,510
engine after what and as I mentioned

00:13:16,090 --> 00:13:24,760
it's extendable and I'll explain you how

00:13:19,510 --> 00:13:26,920
so you could plug in your user user

00:13:24,760 --> 00:13:30,400
authentication by the implementing

00:13:26,920 --> 00:13:34,900
specific methods and the way OpenStack

00:13:30,400 --> 00:13:37,950
use it as as it provides you a user

00:13:34,900 --> 00:13:40,270
object and that user object is

00:13:37,950 --> 00:13:42,100
authenticated against opens their keys

00:13:40,270 --> 00:13:47,880
their own which is the authentication

00:13:42,100 --> 00:13:54,400
and authorization project within

00:13:47,880 --> 00:13:57,070
OpenStack and the user object is created

00:13:54,400 --> 00:14:01,930
at login time and destroyed afterwards

00:13:57,070 --> 00:14:04,770
and you just get a token from Keystone

00:14:01,930 --> 00:14:07,630
which is used to get all the data and

00:14:04,770 --> 00:14:11,380
it's also used for permission checks

00:14:07,630 --> 00:14:15,490
like is my user allowed to do this or

00:14:11,380 --> 00:14:17,670
that what is the role of my user and so

00:14:15,490 --> 00:14:17,670
on

00:14:18,240 --> 00:14:25,740
as I'm lucky and you all are familiar

00:14:21,420 --> 00:14:31,440
with templates in Django I don't need to

00:14:25,740 --> 00:14:34,320
explain this it briefly describes how to

00:14:31,440 --> 00:14:39,200
interact with templates or how to

00:14:34,320 --> 00:14:43,890
provide templates you just submit or

00:14:39,200 --> 00:14:46,740
provide aid a template in a something

00:14:43,890 --> 00:14:49,709
like in HTML template and Django will

00:14:46,740 --> 00:15:02,880
fill in values and fill in variables in

00:14:49,709 --> 00:15:07,560
there angularjs is front end only so we

00:15:02,880 --> 00:15:09,810
talked until now about server side now

00:15:07,560 --> 00:15:13,320
we are talking about front and side and

00:15:09,810 --> 00:15:16,410
angular is just one pic there are many

00:15:13,320 --> 00:15:22,640
many other frameworks even more popular

00:15:16,410 --> 00:15:25,680
frameworks than angular but it at the

00:15:22,640 --> 00:15:28,010
time we were talking about integrating

00:15:25,680 --> 00:15:31,589
something like a client-side scripting

00:15:28,010 --> 00:15:36,029
it seemed to be the most obvious thing

00:15:31,589 --> 00:15:38,670
to integrate angular so it's a something

00:15:36,029 --> 00:15:42,180
like a application framework maintained

00:15:38,670 --> 00:15:47,000
by google we basically have to somehow

00:15:42,180 --> 00:15:51,600
competing versions like 1 dot x is in

00:15:47,000 --> 00:15:55,680
production and it's a pure JavaScript

00:15:51,600 --> 00:15:58,470
implementation version 2 is in beta

00:15:55,680 --> 00:16:03,450
since well at least since we are talking

00:15:58,470 --> 00:16:05,420
about this and it uses something named

00:16:03,450 --> 00:16:09,089
typescript which is a superset of

00:16:05,420 --> 00:16:11,700
JavaScript so nobody in no browser can

00:16:09,089 --> 00:16:16,200
understand it directly and you need to

00:16:11,700 --> 00:16:21,209
compile this and not being sure about

00:16:16,200 --> 00:16:29,160
how smart this is so

00:16:21,209 --> 00:16:33,389
a element application and angular could

00:16:29,160 --> 00:16:45,139
look like this one pretty ugly source

00:16:33,389 --> 00:16:49,499
code so how does it work since it's

00:16:45,139 --> 00:16:51,660
Sunday afternoon it looks like this one

00:16:49,499 --> 00:16:57,139
here and you could type in something

00:16:51,660 --> 00:17:00,449
like give a talk and it directly that's

00:16:57,139 --> 00:17:03,300
even if you can't read this it directly

00:17:00,449 --> 00:17:09,829
at it and it's pure client-side you

00:17:03,300 --> 00:17:09,829
could even strike it through well okay

00:17:10,370 --> 00:17:19,919
previously I just showed you the

00:17:14,899 --> 00:17:22,799
template in HTML and if you're spotting

00:17:19,919 --> 00:17:25,079
a bit nearer you could see the double

00:17:22,799 --> 00:17:28,350
curlies and the double curlies are also

00:17:25,079 --> 00:17:31,140
used by Django so if you're going to mix

00:17:28,350 --> 00:17:40,140
both angular and Django this will hurt

00:17:31,140 --> 00:17:51,659
you the JavaScript for this just for

00:17:40,140 --> 00:17:59,520
completeness is I shouldn't explain this

00:17:51,659 --> 00:18:02,640
way so um as I mentioned before the

00:17:59,520 --> 00:18:06,960
templates both share double curlies you

00:18:02,640 --> 00:18:11,820
could redefine the template text for

00:18:06,960 --> 00:18:16,649
angular with this kind of ugly heck I

00:18:11,820 --> 00:18:20,100
mentioned on the bottom of the slide if

00:18:16,649 --> 00:18:24,270
you're doing this and using additional

00:18:20,100 --> 00:18:26,789
plugins or additional packages for

00:18:24,270 --> 00:18:31,010
angular this we're going to hurt you as

00:18:26,789 --> 00:18:33,779
well because those plugins are

00:18:31,010 --> 00:18:34,680
additional libraries will expect the

00:18:33,779 --> 00:18:37,140
double curlies

00:18:34,680 --> 00:18:39,690
and not something else you defined so

00:18:37,140 --> 00:18:41,820
either you are going to change that

00:18:39,690 --> 00:18:49,380
source code as well or you should be

00:18:41,820 --> 00:18:53,040
smart and do something else so we had

00:18:49,380 --> 00:18:58,160
Django and we had angular and how to mix

00:18:53,040 --> 00:19:03,960
both together there are some useful

00:18:58,160 --> 00:19:10,980
libraries producing or creating directly

00:19:03,960 --> 00:19:13,890
rest api's from your django models the

00:19:10,980 --> 00:19:16,680
first three of them are just to be

00:19:13,890 --> 00:19:25,260
mentioned I have a demo for the first

00:19:16,680 --> 00:19:29,400
one the last library is not for creating

00:19:25,260 --> 00:19:31,410
something like a restful api it it's

00:19:29,400 --> 00:19:34,160
like something like a proof of concept

00:19:31,410 --> 00:19:38,070
or something which is currently evolving

00:19:34,160 --> 00:19:41,220
quite fast to add something like a

00:19:38,070 --> 00:19:43,320
synchronous features to django it

00:19:41,220 --> 00:19:47,070
currently does not provide something

00:19:43,320 --> 00:19:50,820
like this it adds something like HTTP to

00:19:47,070 --> 00:19:56,930
to django it's currently agnostic of

00:19:50,820 --> 00:20:00,440
that so I just thought I should put up a

00:19:56,930 --> 00:20:04,590
I'm sorry they shop shop blogging

00:20:00,440 --> 00:20:09,080
application it will give you something

00:20:04,590 --> 00:20:11,220
like a short title a summary and

00:20:09,080 --> 00:20:17,640
something like a full text or whatever

00:20:11,220 --> 00:20:21,930
it's nothing really astonishing so

00:20:17,640 --> 00:20:26,970
you're basically putting this to your

00:20:21,930 --> 00:20:32,460
models in in your django app if you're

00:20:26,970 --> 00:20:36,410
mixing in the rest framework this a bit

00:20:32,460 --> 00:20:39,240
of code to write in in the in your URL

00:20:36,410 --> 00:20:42,300
specification and you're basically

00:20:39,240 --> 00:20:45,580
describing how to serialize your models

00:20:42,300 --> 00:20:51,250
into something consumable bye-bye

00:20:45,580 --> 00:20:54,010
rest or how to describe AJ and you could

00:20:51,250 --> 00:20:58,570
even so basically what i'm specifying

00:20:54,010 --> 00:21:04,290
here is which model to serialize and

00:20:58,570 --> 00:21:14,590
which fields to display in that Jason

00:21:04,290 --> 00:21:19,090
and at the rest I'm just describing what

00:21:14,590 --> 00:21:24,480
to view and where to view this so back

00:21:19,090 --> 00:21:29,080
to the demo if you're just using this in

00:21:24,480 --> 00:21:34,450
Django it's nothing really I edge it

00:21:29,080 --> 00:21:40,390
just did it did a quick demo and just

00:21:34,450 --> 00:21:44,530
put out the subject so if looking at

00:21:40,390 --> 00:21:53,830
what we get from rest api this is just

00:21:44,530 --> 00:21:57,460
what the code nobody can read it this is

00:21:53,830 --> 00:22:01,980
something you could easily pull in we

00:21:57,460 --> 00:22:07,020
are in api in this case via wrist and

00:22:01,980 --> 00:22:12,190
you get even the URL to access the

00:22:07,020 --> 00:22:18,190
objects stored in the database you could

00:22:12,190 --> 00:22:26,940
even use this to pull it pull the

00:22:18,190 --> 00:22:26,940
contents of that data out and finally

00:22:30,310 --> 00:22:38,890
if you're putting in the angular no

00:22:34,360 --> 00:22:43,230
sorry the Django admin interface you

00:22:38,890 --> 00:22:45,220
could add something like a new object

00:22:43,230 --> 00:22:47,350
something like fill it in the title

00:22:45,220 --> 00:22:54,970
summary and so on so enough nothing

00:22:47,350 --> 00:23:00,870
really interesting so get getting back

00:22:54,970 --> 00:23:05,350
and pulling of the data out with angular

00:23:00,870 --> 00:23:15,670
provides you most basically the same we

00:23:05,350 --> 00:23:18,900
had with a with Django before it's quite

00:23:15,670 --> 00:23:24,250
compact code and nothing really am

00:23:18,900 --> 00:23:28,210
interesting so going going back this is

00:23:24,250 --> 00:23:31,990
how your implementation would look like

00:23:28,210 --> 00:23:38,590
if you are using pure angular or pure

00:23:31,990 --> 00:23:41,830
Django so in OpenStack horizon just to

00:23:38,590 --> 00:23:47,980
set the terms straight we have something

00:23:41,830 --> 00:23:54,730
do I have it we have something out like

00:23:47,980 --> 00:23:58,570
a dashboard and this is the project

00:23:54,730 --> 00:24:01,960
stuff we we were hitting here hiding

00:23:58,570 --> 00:24:08,500
here and this is something we are named

00:24:01,960 --> 00:24:11,380
a dash for a dashboard the hierarchy

00:24:08,500 --> 00:24:14,020
below this what you see a computer or

00:24:11,380 --> 00:24:19,120
network overview and so on those unnamed

00:24:14,020 --> 00:24:21,840
panels I already outlined how horizon

00:24:19,120 --> 00:24:31,240
and OpenStack dashboard fit together so

00:24:21,840 --> 00:24:36,270
um as I mentioned OpenStack uses lots of

00:24:31,240 --> 00:24:41,260
api's so this is just a small window of

00:24:36,270 --> 00:24:41,890
every API you have an OpenStack so it's

00:24:41,260 --> 00:24:46,090
it

00:24:41,890 --> 00:24:52,770
seem to be reasonable to directly talk

00:24:46,090 --> 00:24:59,920
to those api's via some kind of

00:24:52,770 --> 00:25:06,910
JavaScript since we already have some

00:24:59,920 --> 00:25:10,510
code we created a way how to to extend

00:25:06,910 --> 00:25:19,440
horizon something like you could plug in

00:25:10,510 --> 00:25:22,360
a Python module or even a angular know

00:25:19,440 --> 00:25:24,670
something like a Tyson model and and if

00:25:22,360 --> 00:25:29,620
you're using a Python module you could

00:25:24,670 --> 00:25:38,770
even ship static files like a like

00:25:29,620 --> 00:25:44,080
angular code within that so we separated

00:25:38,770 --> 00:25:48,840
the Python module and the Python module

00:25:44,080 --> 00:25:53,140
and the configuration into various bits

00:25:48,840 --> 00:25:57,520
the idea is you could even package it up

00:25:53,140 --> 00:26:01,900
for like rpm so you're just putting in

00:25:57,520 --> 00:26:05,310
somewhere your python module like a pure

00:26:01,900 --> 00:26:09,670
pizen package and you just drop in that

00:26:05,310 --> 00:26:12,040
here in a named enabled file in a

00:26:09,670 --> 00:26:14,670
specific or specified directory and

00:26:12,040 --> 00:26:20,860
horizon we'll put pull up this

00:26:14,670 --> 00:26:24,070
automatically specified here is the name

00:26:20,860 --> 00:26:27,400
of the panel would be my panel it would

00:26:24,070 --> 00:26:33,910
be put in into the dashboard named

00:26:27,400 --> 00:26:38,380
identity and in the section at panel

00:26:33,910 --> 00:26:43,060
there's also the Python module named in

00:26:38,380 --> 00:26:48,450
there and if you're requiring to add

00:26:43,060 --> 00:26:48,450
something like to your django

00:26:48,930 --> 00:26:55,050
applications that would be my plug-in in

00:26:52,300 --> 00:26:55,050
this case and

00:26:56,130 --> 00:27:02,490
the way how static files like images

00:27:03,900 --> 00:27:09,550
JavaScript and so on are handled in

00:27:06,280 --> 00:27:15,660
horizon are they are just directly

00:27:09,550 --> 00:27:15,660
placed in the folder where you have your

00:27:17,070 --> 00:27:25,060
Python package and Django will discover

00:27:21,730 --> 00:27:28,690
those files automatically and copy them

00:27:25,060 --> 00:27:34,680
to a specific specified place there's

00:27:28,690 --> 00:27:41,080
even a undocumented feature with your

00:27:34,680 --> 00:27:45,670
running this command named collect files

00:27:41,080 --> 00:27:49,120
if you're appending the parameter dash L

00:27:45,670 --> 00:27:54,700
it will create links instead of copy of

00:27:49,120 --> 00:27:57,510
the files which is quite need so if

00:27:54,700 --> 00:28:02,760
you're going to create something like a

00:27:57,510 --> 00:28:07,330
plug-in for horizon you will end up in

00:28:02,760 --> 00:28:10,180
creating something like this in this

00:28:07,330 --> 00:28:12,220
case the plugin would be named user and

00:28:10,180 --> 00:28:17,770
you would probably have something like

00:28:12,220 --> 00:28:21,310
forms a panel HTML files somewhere

00:28:17,770 --> 00:28:23,680
located in templates if you would be

00:28:21,310 --> 00:28:26,590
distributing some static files you would

00:28:23,680 --> 00:28:32,830
be placing them in a folder named

00:28:26,590 --> 00:28:36,580
aesthetic and so on so it's not that

00:28:32,830 --> 00:28:41,680
different from what you would expect

00:28:36,580 --> 00:28:45,580
from a pure Django implementation as I

00:28:41,680 --> 00:28:49,630
stated earlier we we are using the

00:28:45,580 --> 00:28:53,680
framework named horizon to implement all

00:28:49,630 --> 00:28:55,510
that stuff so we are inheriting much of

00:28:53,680 --> 00:28:58,480
their function of that functionality

00:28:55,510 --> 00:29:02,080
already sold to describe something like

00:28:58,480 --> 00:29:05,620
a panel it does not take more than those

00:29:02,080 --> 00:29:07,440
five lines of code if you're just doing

00:29:05,620 --> 00:29:10,839
this

00:29:07,440 --> 00:29:16,389
even your L routing is going to be

00:29:10,839 --> 00:29:21,119
pluggable in this case and just to put

00:29:16,389 --> 00:29:26,289
out something like a HTML file you would

00:29:21,119 --> 00:29:30,239
inherit a a view and direct your

00:29:26,289 --> 00:29:36,279
template to whatever unit way you want

00:29:30,239 --> 00:29:39,909
so it might look like in this case it's

00:29:36,279 --> 00:29:44,190
just taken from the horizon upstream

00:29:39,909 --> 00:29:52,269
documentation so you're basically

00:29:44,190 --> 00:29:54,759
extending blocks and yes the docs are

00:29:52,269 --> 00:29:58,950
predefined in the base HTML file

00:29:54,759 --> 00:30:05,969
described in the OpenStack dashboard

00:29:58,950 --> 00:30:09,039
templates directory if you're adding

00:30:05,969 --> 00:30:12,159
something like JavaScript content be

00:30:09,039 --> 00:30:21,940
sure to run collect static otherwise you

00:30:12,159 --> 00:30:25,269
get interesting results I say since that

00:30:21,940 --> 00:30:30,179
angular staff within horizon is still

00:30:25,269 --> 00:30:36,359
quite in flux I just put in here some

00:30:30,179 --> 00:30:39,940
links to example xmm implementations it

00:30:36,359 --> 00:30:44,129
somehow tends to change upstream how to

00:30:39,940 --> 00:30:54,239
implement and where to put files so they

00:30:44,129 --> 00:30:57,729
differ a bit and we are still somehow

00:30:54,239 --> 00:30:59,830
undecided how to do it best so we are

00:30:57,729 --> 00:31:06,419
implementing something and trying to

00:30:59,830 --> 00:31:09,869
learn from from this but we will see so

00:31:06,419 --> 00:31:09,869
quite quick one

00:31:13,330 --> 00:31:20,930
what we did not cover yet is how to test

00:31:17,510 --> 00:31:24,110
what you implement it upstream we've

00:31:20,930 --> 00:31:30,200
seen there are several ways to break

00:31:24,110 --> 00:31:34,610
everything and tests tend not to be what

00:31:30,200 --> 00:31:38,750
you think they are testing especially if

00:31:34,610 --> 00:31:44,650
you're talking to api's define somewhere

00:31:38,750 --> 00:31:48,530
else if you're testing something and

00:31:44,650 --> 00:31:52,940
you're is expecting those URLs not to

00:31:48,530 --> 00:31:55,160
change well you have a problem as if

00:31:52,940 --> 00:32:01,070
you're integrating this kind of stuff

00:31:55,160 --> 00:32:04,070
you might see something changed so we

00:32:01,070 --> 00:32:10,160
also don't cover how to check for

00:32:04,070 --> 00:32:15,920
consistency if you're adding content to

00:32:10,160 --> 00:32:19,430
horizon you could put in something like

00:32:15,920 --> 00:32:23,890
Abe a plugin there are no consistency

00:32:19,430 --> 00:32:30,890
checks to see if this fits to the

00:32:23,890 --> 00:32:34,100
upstream style there are no naming

00:32:30,890 --> 00:32:37,910
checks of course and currently there is

00:32:34,100 --> 00:32:40,940
no way for upstream horizon to check if

00:32:37,910 --> 00:32:46,790
your plug-in is that's what it's

00:32:40,940 --> 00:32:51,080
supposed to do we also did not cover how

00:32:46,790 --> 00:32:54,110
to package something like a plug-in it's

00:32:51,080 --> 00:32:59,780
just a Python package that I didn't

00:32:54,110 --> 00:33:04,250
cover it here and since JavaScript

00:32:59,780 --> 00:33:06,560
frameworks are evolving that fast if I

00:33:04,250 --> 00:33:10,540
would start a new project I would

00:33:06,560 --> 00:33:15,460
probably be looking at something else or

00:33:10,540 --> 00:33:19,600
at least do some more research about

00:33:15,460 --> 00:33:19,600
that kind of frameworks and

00:33:20,810 --> 00:33:29,310
that's it okay i guess i saved you 20

00:33:24,570 --> 00:33:38,420
minutes of your life time thank you do

00:33:29,310 --> 00:33:38,420
you have any questions who wants a scarf

00:33:40,700 --> 00:33:57,870
yeah hmm good question i'd say it's a

00:33:51,240 --> 00:34:04,740
bit historic since horizon was primarily

00:33:57,870 --> 00:34:08,580
a django project we have that meetup

00:34:04,740 --> 00:34:11,730
upstream where some guys approached us

00:34:08,580 --> 00:34:14,310
and said well either we are going to

00:34:11,730 --> 00:34:19,080
re-implement everything else or we are

00:34:14,310 --> 00:34:24,030
going to fork you or you are going to

00:34:19,080 --> 00:34:28,320
adopt so and those guys were doing stuff

00:34:24,030 --> 00:34:32,159
in angular so what do you do are you

00:34:28,320 --> 00:34:37,560
splitting the community are you this is

00:34:32,159 --> 00:34:41,280
why it was taken so other than that no

00:34:37,560 --> 00:34:46,169
real reason I know there are other

00:34:41,280 --> 00:34:49,700
frameworks doing a great job as well so

00:34:46,169 --> 00:34:49,700
are you sure you don't want to scar

00:34:50,840 --> 00:34:55,850
anything else yes

00:35:00,340 --> 00:35:19,540
so so the question is how do I deal with

00:35:16,570 --> 00:35:23,470
authentication or other database

00:35:19,540 --> 00:35:27,130
excesses in OpenStack horizon and the

00:35:23,470 --> 00:35:32,270
answer is I'm creating all objects

00:35:27,130 --> 00:35:35,270
needed at runtime so if I am creating

00:35:32,270 --> 00:35:37,940
something like a user I'm creating this

00:35:35,270 --> 00:35:40,850
by integrating into the authentication

00:35:37,940 --> 00:35:42,950
stick I'm directly talking to open stair

00:35:40,850 --> 00:35:46,340
Keystone which does the authentication

00:35:42,950 --> 00:35:50,930
and I'm creating a user object object

00:35:46,340 --> 00:35:54,560
when I needed and the same is true so

00:35:50,930 --> 00:36:03,020
and keystone provides me a list of other

00:35:54,560 --> 00:36:10,880
API endpoints I'm allowed to talk to so

00:36:03,020 --> 00:36:14,090
I am basically in my case I'm keeping

00:36:10,880 --> 00:36:18,470
sessions somewhere else like in memcache

00:36:14,090 --> 00:36:20,420
the Redis or whatever this is why I

00:36:18,470 --> 00:36:26,780
don't need to care about database

00:36:20,420 --> 00:36:39,190
migrations for example do you want to

00:36:26,780 --> 00:36:39,190
scarf so hey oh sorry yes please

00:36:52,450 --> 00:37:02,210
so the question is how angularjs and and

00:36:57,770 --> 00:37:05,570
jQuery relate to each other so basically

00:37:02,210 --> 00:37:09,380
both our side client-side scripts and I

00:37:05,570 --> 00:37:18,920
would expect I would I would just use

00:37:09,380 --> 00:37:22,700
angular instead of that jQuery yeah so

00:37:18,920 --> 00:37:26,780
um for example angular has neat features

00:37:22,700 --> 00:37:29,900
like it does for Villa Dacian at client

00:37:26,780 --> 00:37:32,270
site so you get directly a feedback on

00:37:29,900 --> 00:37:38,080
the other side you need to implement

00:37:32,270 --> 00:37:46,850
those checks twice depends what you like

00:37:38,080 --> 00:37:49,360
do you want to scar who wants another

00:37:46,850 --> 00:37:49,360
scar

00:38:09,239 --> 00:38:16,799
so um the implementation or

00:38:14,160 --> 00:38:21,189
implementation of everything client-side

00:38:16,799 --> 00:38:27,029
kept us busy for the last 11 and a half

00:38:21,189 --> 00:38:30,519
years and over that time we also

00:38:27,029 --> 00:38:35,229
discovered we were doing a quite bad job

00:38:30,519 --> 00:38:39,249
in matching other projects in OpenStack

00:38:35,229 --> 00:38:43,059
we just talked about managing virtual

00:38:39,249 --> 00:38:47,589
machines managing volumes managing

00:38:43,059 --> 00:38:53,880
network but OpenStack hasn't much more

00:38:47,589 --> 00:38:56,739
like managing DNS managing containers

00:38:53,880 --> 00:38:59,709
managing databases actually we have

00:38:56,739 --> 00:39:02,589
something like support for data

00:38:59,709 --> 00:39:07,779
databases as a service in horizon but

00:39:02,589 --> 00:39:13,329
it's very very basic we we also have

00:39:07,779 --> 00:39:17,469
something like a support for Hadoop but

00:39:13,329 --> 00:39:22,089
we don't really match everything we have

00:39:17,469 --> 00:39:25,630
in OpenStack and since we are doing such

00:39:22,089 --> 00:39:30,039
a bad job we were extending our moving

00:39:25,630 --> 00:39:32,859
to that plugin model to enable other

00:39:30,039 --> 00:39:37,449
projects to implement their own their

00:39:32,859 --> 00:39:41,679
sports of course so it's just adding

00:39:37,449 --> 00:39:46,479
something like a enabled file and adding

00:39:41,679 --> 00:39:55,349
that or pointing horizon to your python

00:39:46,479 --> 00:39:59,640
module just plugs in your dashboard we

00:39:55,349 --> 00:40:05,439
still need to support something like

00:39:59,640 --> 00:40:09,930
domain scope tokens in horizon we

00:40:05,439 --> 00:40:13,859
currently do I don't do so

00:40:09,930 --> 00:40:16,470
I need to make a bigger detour about

00:40:13,859 --> 00:40:33,660
this so maybe we should discuss it

00:40:16,470 --> 00:40:39,980
afterwards so well so if you're going to

00:40:33,660 --> 00:40:39,980
Keystone and getting a token seriously

00:40:41,540 --> 00:40:49,559
your token is Cara Lee scoped to your

00:40:44,730 --> 00:40:54,450
project and you could Reese cop you're

00:40:49,559 --> 00:40:58,520
talking to use a different project but

00:40:54,450 --> 00:41:04,770
if you're using a back end or

00:40:58,520 --> 00:41:06,960
hierarchical em tenants like or multiple

00:41:04,770 --> 00:41:11,130
domains in your Keystone it's a tiki

00:41:06,960 --> 00:41:14,849
stone setting we currently match that in

00:41:11,130 --> 00:41:18,450
horizon at all horizon just uses a

00:41:14,849 --> 00:41:24,140
project scope token unlike all other

00:41:18,450 --> 00:41:27,420
projects in opal stagg so this will be

00:41:24,140 --> 00:41:36,270
something we need to address in the near

00:41:27,420 --> 00:41:39,690
future we we cannot manage so the the

00:41:36,270 --> 00:41:41,910
weight projects are set up are you are a

00:41:39,690 --> 00:41:45,329
user and you have a project but that

00:41:41,910 --> 00:41:47,369
project cannot it actually in OpenStack

00:41:45,329 --> 00:41:50,760
it can but in horizon it cannot have a

00:41:47,369 --> 00:41:57,480
super lying project or something like in

00:41:50,760 --> 00:42:00,809
a Yaqui so we we have no real cute q

00:41:57,480 --> 00:42:08,520
currently how to display this to the end

00:42:00,809 --> 00:42:14,430
user it somehow falls down to how to do

00:42:08,520 --> 00:42:17,520
inheritance of roles and so on of course

00:42:14,430 --> 00:42:20,010
this is defined from Keystone but still

00:42:17,520 --> 00:42:22,160
we need to display the user what you can

00:42:20,010 --> 00:42:22,160
do

00:42:25,990 --> 00:42:46,790
okay yes I would probably look for

00:42:43,040 --> 00:42:56,720
example at something like polymer which

00:42:46,790 --> 00:43:03,500
seems to be the new pig in the park yeah

00:42:56,720 --> 00:43:06,650
what so currently we until angular 2 is

00:43:03,500 --> 00:43:10,820
not stable we have some kind of grace

00:43:06,650 --> 00:43:15,800
period but if we are going to rewrite

00:43:10,820 --> 00:43:20,210
everything it makes sense to look at

00:43:15,800 --> 00:43:22,340
something else maybe but I'm just one

00:43:20,210 --> 00:43:30,910
single guy in a project and it's a

00:43:22,340 --> 00:43:30,910
project project decision anything else

00:43:31,950 --> 00:43:36,180
okay thank you very much

00:44:23,450 --> 00:45:03,110
yeah thank you so much

00:45:09,890 --> 00:45:17,759
about not taking the on video I want I

00:45:13,710 --> 00:45:22,049
was just ignore so why should i do you

00:45:17,759 --> 00:45:25,410
that favor right now so maybe we are

00:45:22,049 --> 00:45:28,190
your turn videotaping workshop is

00:45:25,410 --> 00:45:28,190
nonsense

00:45:45,170 --> 00:45:54,089
looking forward I was just like this my

00:45:50,099 --> 00:45:57,030
closet is nothing to be suits actually

00:45:54,089 --> 00:45:59,190
there there is a photo from 2013 I

00:45:57,030 --> 00:46:03,050
believe that you are photo building our

00:45:59,190 --> 00:46:03,050
photo yeah

00:47:01,390 --> 00:47:27,730
get a banana someone yeah

00:47:44,240 --> 00:47:52,630
it's somebody else efficient okay yeah

00:47:49,760 --> 00:47:52,630
just kind of toss it

00:48:17,240 --> 00:48:20,240
this

00:48:21,700 --> 00:48:26,070
I believe it shouldn't be other

00:50:14,090 --> 00:50:17,090
ok

00:50:17,769 --> 00:50:24,670
do you have a little gets there

00:50:41,349 --> 00:50:43,410
you

00:50:46,770 --> 00:50:50,160
okay thank you

00:50:57,589 --> 00:51:01,700
and it's turned on so long

00:51:06,850 --> 00:51:08,910

YouTube URL: https://www.youtube.com/watch?v=GAuJ-61RSfU


