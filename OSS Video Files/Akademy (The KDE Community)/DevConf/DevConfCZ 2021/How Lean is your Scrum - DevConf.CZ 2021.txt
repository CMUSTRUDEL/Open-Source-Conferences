Title: How Lean is your Scrum - DevConf.CZ 2021
Publication date: 2021-03-15
Playlist: DevConfCZ 2021
Description: 
	Speaker: Leigh Griffin



Scrum has an often unjustified reputation among developers for being a heavyweight framework, with ceremonies designed to ultimately guide a product which can incur a lot of meeting time and commitment to maintenance of tickets, backlogs and requirements documents. Lean looks primarily at waste elimination and in a world that has found itself forced into a work from home culture, Scrum teams are now generating a lot of waste as they adapt their processes to be remote friendly. This is on top of any bad habits that formed around their flavor of Agile. With teams finding themselves experiencing meeting fatigue and drowning in process, the question needs to be asked, how Lean is your Scrum? Join me in this session where we look at the application of some Lean principles to Scrum and showcase the improvements at both a process and team happiness level that resulted from applying them in our remote Agile team.

Red Hat has a long history of remote working, with over half of the workforce long term remote. With covid-19, the vast majority of the company, along with the wider world, have found themselves working from home. Our team, which serves the Open Source communities for Fedora and CentOS, are almost exclusively remote, following our own flavor of Agile which is primarily focused on Scrum, but taking in aspects of Lean and Kanban. Our processes were born remotely and despite that, the pandemic pushed our meeting workload and our team health to the limits. We took a renewed view of the Lean principles that underpinned our processes to make adjustments to how work flows into the team, how the team organises themselves and how we work and live day to day. This session explores some Lean principles that are easily applied and complimentary to Scrum.



Schedule: https://sched.co/gmIC
Captions: 
	00:00:01,199 --> 00:00:04,640
my name is lee griffin i'm a senior

00:00:02,639 --> 00:00:05,040
engineering manager working for the cpe

00:00:04,640 --> 00:00:06,399
team

00:00:05,040 --> 00:00:08,080
and that's the team that helps to look

00:00:06,399 --> 00:00:09,280
after the fedora and center west

00:00:08,080 --> 00:00:11,920
communities

00:00:09,280 --> 00:00:13,840
i'm also a lean masters student in

00:00:11,920 --> 00:00:15,759
waterford institute of technology

00:00:13,840 --> 00:00:18,080
and where i'm looking at lean enterprise

00:00:15,759 --> 00:00:18,400
excellence and i'm here today to talk to

00:00:18,080 --> 00:00:20,800
you

00:00:18,400 --> 00:00:22,320
about a topic that i've been exploring

00:00:20,800 --> 00:00:25,279
for the last couple of months

00:00:22,320 --> 00:00:28,080
to look at scrum from a lean lens and

00:00:25,279 --> 00:00:30,720
it's called how lean is your scrum

00:00:28,080 --> 00:00:33,040
now why scrum uh well scrum is dominant

00:00:30,720 --> 00:00:34,320
quite simply um in the most recent state

00:00:33,040 --> 00:00:36,480
of agile report

00:00:34,320 --> 00:00:38,079
uh it's occupying about 80 something

00:00:36,480 --> 00:00:40,000
percent of the market share when you

00:00:38,079 --> 00:00:41,520
factor in the hybrid versions of scrum

00:00:40,000 --> 00:00:43,440
the pure versions of scrum

00:00:41,520 --> 00:00:44,719
but more importantly across all the

00:00:43,440 --> 00:00:46,559
people surveyed

00:00:44,719 --> 00:00:48,399
the top five agile techniques have the

00:00:46,559 --> 00:00:50,480
majority of the scrum ceremonies so

00:00:48,399 --> 00:00:51,039
people really enjoy retrospectives they

00:00:50,480 --> 00:00:52,960
try

00:00:51,039 --> 00:00:54,800
to do some kind of iteration planning

00:00:52,960 --> 00:00:56,559
and reviews and try to work in short

00:00:54,800 --> 00:00:59,440
iterations

00:00:56,559 --> 00:01:01,440
and what i really like about scrum and

00:00:59,440 --> 00:01:04,000
it pairs well with other approaches

00:01:01,440 --> 00:01:05,760
it's really something that you can get

00:01:04,000 --> 00:01:07,200
other frameworks and approaches to

00:01:05,760 --> 00:01:09,280
complement so the most

00:01:07,200 --> 00:01:11,119
popular going on the scrum master trends

00:01:09,280 --> 00:01:12,240
report this is the last one available to

00:01:11,119 --> 00:01:14,880
me and

00:01:12,240 --> 00:01:15,360
had kanban which is actually a leaning

00:01:14,880 --> 00:01:18,240
approach

00:01:15,360 --> 00:01:20,000
as one of the highest and most popular

00:01:18,240 --> 00:01:21,040
integrators with scrum and kanban is

00:01:20,000 --> 00:01:22,960
very popular

00:01:21,040 --> 00:01:24,720
because of the visuals and it gives you

00:01:22,960 --> 00:01:27,680
this pull-based system

00:01:24,720 --> 00:01:29,600
um but how strict do you follow kanban i

00:01:27,680 --> 00:01:31,040
know teams i've worked with very rarely

00:01:29,600 --> 00:01:33,520
follow it to the letter the law

00:01:31,040 --> 00:01:35,759
working progress limits but it's a

00:01:33,520 --> 00:01:37,280
complimenting tool

00:01:35,759 --> 00:01:39,520
and what's really interesting if we just

00:01:37,280 --> 00:01:42,720
quickly switch back to the last slide

00:01:39,520 --> 00:01:44,720
one percent um of the agile techniques

00:01:42,720 --> 00:01:46,560
are in the lean startup sphere

00:01:44,720 --> 00:01:48,320
and if you look at the percentages here

00:01:46,560 --> 00:01:50,000
the top four items

00:01:48,320 --> 00:01:51,600
lean as it mentioned which is really

00:01:50,000 --> 00:01:55,520
interesting and that's kind of what

00:01:51,600 --> 00:01:57,439
i gravitated towards some motivators

00:01:55,520 --> 00:01:59,439
here for why we want to look at this uh

00:01:57,439 --> 00:02:02,000
remote scrum is difficult and i say that

00:01:59,439 --> 00:02:03,520
as a practitioner of remote strum for

00:02:02,000 --> 00:02:05,680
several years

00:02:03,520 --> 00:02:07,360
and now that the whole world is at home

00:02:05,680 --> 00:02:09,520
and we don't have this hybrid model

00:02:07,360 --> 00:02:10,399
there's a lot of distractions um you

00:02:09,520 --> 00:02:12,319
have emails

00:02:10,399 --> 00:02:14,000
instant messaging family life so you

00:02:12,319 --> 00:02:14,959
know at any given moment even in this

00:02:14,000 --> 00:02:16,560
presentation

00:02:14,959 --> 00:02:18,879
you might hear two screaming kids in the

00:02:16,560 --> 00:02:20,640
background and that's totally fine

00:02:18,879 --> 00:02:22,160
the duration of the ceremonies are

00:02:20,640 --> 00:02:24,000
problematic and

00:02:22,160 --> 00:02:25,920
sprint planning for example if you're to

00:02:24,000 --> 00:02:28,640
go by the scrum guide

00:02:25,920 --> 00:02:29,520
is up to eight hours for a one-month

00:02:28,640 --> 00:02:31,680
sprint

00:02:29,520 --> 00:02:33,120
ergonomically sitting in a chair for

00:02:31,680 --> 00:02:34,000
longer than an hour is not good for your

00:02:33,120 --> 00:02:36,239
health

00:02:34,000 --> 00:02:37,599
uh fatigue meeting apathy these are

00:02:36,239 --> 00:02:39,440
things that are happening and there's a

00:02:37,599 --> 00:02:40,959
lot of research being carried out now

00:02:39,440 --> 00:02:43,280
but the real impacts will be seen in a

00:02:40,959 --> 00:02:45,280
couple of years time

00:02:43,280 --> 00:02:47,040
something i've always preached and it's

00:02:45,280 --> 00:02:48,640
very difficult in remote strum

00:02:47,040 --> 00:02:50,480
is the whole mechanically agile be

00:02:48,640 --> 00:02:52,480
mentally agile and what i mean by that

00:02:50,480 --> 00:02:54,000
is teams that are mechanically agile

00:02:52,480 --> 00:02:55,680
they can deal with ceremonies they can

00:02:54,000 --> 00:02:57,200
groom their backlog they can work in

00:02:55,680 --> 00:02:59,200
short iterations

00:02:57,200 --> 00:03:00,959
they stay on the framework tracks and

00:02:59,200 --> 00:03:02,879
they get to their destination

00:03:00,959 --> 00:03:05,120
but is it sinking in up here is the

00:03:02,879 --> 00:03:06,400
rationale happening for wider doing

00:03:05,120 --> 00:03:07,920
these things

00:03:06,400 --> 00:03:09,360
and if you don't have the rationale

00:03:07,920 --> 00:03:10,800
that's when the fatigue of the apathy

00:03:09,360 --> 00:03:12,560
starts setting in

00:03:10,800 --> 00:03:14,480
and if you pay all of this not just from

00:03:12,560 --> 00:03:15,840
a process perspective

00:03:14,480 --> 00:03:18,000
how many companies are set up for

00:03:15,840 --> 00:03:20,319
working from home with i.t policies

00:03:18,000 --> 00:03:22,720
and this pandemic will help to fight 80

00:03:20,319 --> 00:03:25,200
policies for the globe going forward

00:03:22,720 --> 00:03:27,920
and any of inadequate home office spaces

00:03:25,200 --> 00:03:29,760
people working from kitchen tables

00:03:27,920 --> 00:03:31,360
not a great situation to begin but this

00:03:29,760 --> 00:03:33,599
is the reality that we find ourselves

00:03:31,360 --> 00:03:37,120
forced in so that's my motivator for why

00:03:33,599 --> 00:03:38,959
i wanted to look at this and scrum is

00:03:37,120 --> 00:03:40,799
evolving we've had several iterations

00:03:38,959 --> 00:03:42,400
just from going in recent years after a

00:03:40,799 --> 00:03:45,040
large gap in time

00:03:42,400 --> 00:03:46,640
and adaptations to scrum to neither

00:03:45,040 --> 00:03:48,480
normal and healthy that's why we have a

00:03:46,640 --> 00:03:49,280
retrospective and this is why hybrid

00:03:48,480 --> 00:03:52,959
scrum

00:03:49,280 --> 00:03:54,640
year on year is increasing in popularity

00:03:52,959 --> 00:03:56,400
but not all teams have a perfect scrum

00:03:54,640 --> 00:03:59,120
environment and we try and make scrum

00:03:56,400 --> 00:04:00,799
fit into an imperfect environment matrix

00:03:59,120 --> 00:04:02,720
organizations what i mean by that is

00:04:00,799 --> 00:04:03,760
development and qe of different manager

00:04:02,720 --> 00:04:05,680
streams and different parts of the

00:04:03,760 --> 00:04:07,760
organization and different budgets which

00:04:05,680 --> 00:04:09,840
can present a lot of challenges

00:04:07,760 --> 00:04:11,280
and not all skills are capable of being

00:04:09,840 --> 00:04:12,959
in that one team

00:04:11,280 --> 00:04:14,319
so as much as we like to talk about

00:04:12,959 --> 00:04:15,760
cross-functional team

00:04:14,319 --> 00:04:18,400
sometimes all of the skills aren't

00:04:15,760 --> 00:04:20,400
available to us for various reasons

00:04:18,400 --> 00:04:21,759
and what we often have particularly in

00:04:20,400 --> 00:04:25,280
big companies

00:04:21,759 --> 00:04:27,680
um is a waterfall flowing into an agile

00:04:25,280 --> 00:04:30,720
processes flowing out to a waterfall

00:04:27,680 --> 00:04:34,160
so market needs um all of that

00:04:30,720 --> 00:04:36,720
top heavy analysis for deciding to

00:04:34,160 --> 00:04:37,680
invest a heavy amount of resourcing into

00:04:36,720 --> 00:04:40,080
a problem

00:04:37,680 --> 00:04:41,280
that's waterfall in nature shipping your

00:04:40,080 --> 00:04:42,880
code to a customer

00:04:41,280 --> 00:04:44,800
you know the nirvana of shipping at the

00:04:42,880 --> 00:04:46,479
end of the sprint very difficult for a

00:04:44,800 --> 00:04:48,000
lot of teams that are in a multinational

00:04:46,479 --> 00:04:50,880
to have compliance and other

00:04:48,000 --> 00:04:52,960
regulatory issues to deal with and that

00:04:50,880 --> 00:04:54,639
means when the sprint teams are finished

00:04:52,960 --> 00:04:56,000
it goes into a waterfall to get out the

00:04:54,639 --> 00:04:57,840
door to customers

00:04:56,000 --> 00:04:59,680
that's the reality and that's why

00:04:57,840 --> 00:05:02,240
scrum's adaptations are becoming more

00:04:59,680 --> 00:05:04,479
and more important

00:05:02,240 --> 00:05:06,080
now a very quick note about lean and the

00:05:04,479 --> 00:05:07,280
origins are in the toyota production

00:05:06,080 --> 00:05:09,360
systems and this has gone back to the

00:05:07,280 --> 00:05:12,160
1930s so they have

00:05:09,360 --> 00:05:14,000
probably an 80-year head start on the

00:05:12,160 --> 00:05:14,960
modern version of agile software

00:05:14,000 --> 00:05:18,080
development and

00:05:14,960 --> 00:05:20,160
womack getall in 1991

00:05:18,080 --> 00:05:21,840
and wrote a seminal book on the machine

00:05:20,160 --> 00:05:24,000
that changed the world and these

00:05:21,840 --> 00:05:25,039
explored some principles which is really

00:05:24,000 --> 00:05:27,039
what lean

00:05:25,039 --> 00:05:28,880
has distilled down to as a philosophy

00:05:27,039 --> 00:05:30,720
and i really need to reinforce that lean

00:05:28,880 --> 00:05:32,240
is a philosophy and a mindset

00:05:30,720 --> 00:05:34,080
with an accompanying set of tables and

00:05:32,240 --> 00:05:35,680
culture so it's not like a

00:05:34,080 --> 00:05:38,320
full-blown framework like scott like

00:05:35,680 --> 00:05:39,199
scrum and the principles are looking at

00:05:38,320 --> 00:05:41,360
productivity

00:05:39,199 --> 00:05:43,120
waste reduction is a big one and this

00:05:41,360 --> 00:05:45,440
continuous improvement mindset

00:05:43,120 --> 00:05:47,360
and that's really what lean is all about

00:05:45,440 --> 00:05:48,960
and the most successful companies really

00:05:47,360 --> 00:05:50,720
do embrace it as a philosophy and not

00:05:48,960 --> 00:05:52,880
just the tools to achieve the likes of

00:05:50,720 --> 00:05:53,919
waste reduction and the productivity

00:05:52,880 --> 00:05:55,840
aspects

00:05:53,919 --> 00:05:57,919
and it's really interesting that the

00:05:55,840 --> 00:06:00,720
success rate despite having

00:05:57,919 --> 00:06:02,240
90 plus years of experience in lean

00:06:00,720 --> 00:06:04,560
environments

00:06:02,240 --> 00:06:05,759
is actually 10 percent that is really

00:06:04,560 --> 00:06:06,560
really low when you look at the

00:06:05,759 --> 00:06:08,319
adaptation

00:06:06,560 --> 00:06:10,080
of lingan it's ubiquitous in

00:06:08,319 --> 00:06:12,160
manufacturing industries

00:06:10,080 --> 00:06:14,479
but only ten percent have a successful

00:06:12,160 --> 00:06:15,840
adaptation that's long lasting

00:06:14,479 --> 00:06:19,120
and that's that whole mentally

00:06:15,840 --> 00:06:20,960
mechanically conversation i mentioned

00:06:19,120 --> 00:06:23,280
so here are the famous eight wastes of

00:06:20,960 --> 00:06:24,479
lean and i'm not going to dawdle on this

00:06:23,280 --> 00:06:27,199
slide because we're going to look at

00:06:24,479 --> 00:06:30,560
them individually as we go through it

00:06:27,199 --> 00:06:31,520
the first waste is defects so this is

00:06:30,560 --> 00:06:33,360
additional work

00:06:31,520 --> 00:06:34,880
that is performed on a product or

00:06:33,360 --> 00:06:36,000
service and if we're to view this with a

00:06:34,880 --> 00:06:37,600
software lens because we're at a

00:06:36,000 --> 00:06:39,360
software conference

00:06:37,600 --> 00:06:40,720
that's software bugs that's extra work

00:06:39,360 --> 00:06:41,520
that we have to do that we didn't

00:06:40,720 --> 00:06:44,400
originally plan

00:06:41,520 --> 00:06:46,479
for and where this can actually come

00:06:44,400 --> 00:06:48,479
from a lot of the time is unclear

00:06:46,479 --> 00:06:50,000
procedures or specifications so we're

00:06:48,479 --> 00:06:50,720
unsure exactly what we've been asked to

00:06:50,000 --> 00:06:53,039
do

00:06:50,720 --> 00:06:54,960
and we don't really have a format or a

00:06:53,039 --> 00:06:58,400
process to handle this

00:06:54,960 --> 00:06:59,759
and the relevant causes as viewed from a

00:06:58,400 --> 00:07:02,639
lean perspective

00:06:59,759 --> 00:07:04,560
is poor training and it can be caused by

00:07:02,639 --> 00:07:06,319
excessive stock so leaving things hang

00:07:04,560 --> 00:07:08,400
around for too long

00:07:06,319 --> 00:07:10,960
is that technical debt no i think it is

00:07:08,400 --> 00:07:12,479
it's probably technical debt

00:07:10,960 --> 00:07:14,080
now if we look at this through a scrum

00:07:12,479 --> 00:07:16,080
lens um

00:07:14,080 --> 00:07:17,680
scrum genuinely struggles to handle

00:07:16,080 --> 00:07:20,319
in-flight bugs

00:07:17,680 --> 00:07:22,400
if you've worked on a sas platform and

00:07:20,319 --> 00:07:24,639
where you have just-in-time bugs coming

00:07:22,400 --> 00:07:25,919
in we can't plan for those bugs we can

00:07:24,639 --> 00:07:27,759
plan a capacity

00:07:25,919 --> 00:07:29,280
and if you're viewing your your team as

00:07:27,759 --> 00:07:29,919
i'll do eighty percent on planned work

00:07:29,280 --> 00:07:31,919
and 20

00:07:29,919 --> 00:07:33,759
on unplanned work that fallacy comes

00:07:31,919 --> 00:07:36,400
back to bite you so quickly

00:07:33,759 --> 00:07:38,639
and what teams have have to do is

00:07:36,400 --> 00:07:42,080
abstract the bugs into a dedicated team

00:07:38,639 --> 00:07:44,240
a customer or community success team

00:07:42,080 --> 00:07:45,199
that breaks scrum as a model and that

00:07:44,240 --> 00:07:47,120
mentally

00:07:45,199 --> 00:07:48,560
um impairs the team because they're

00:07:47,120 --> 00:07:50,319
spending so much time going through

00:07:48,560 --> 00:07:50,720
ceremonies to plan two or three weeks of

00:07:50,319 --> 00:07:52,479
work

00:07:50,720 --> 00:07:54,479
and then problems are encountered in

00:07:52,479 --> 00:07:56,319
production

00:07:54,479 --> 00:07:58,319
there is a challenge with requirements

00:07:56,319 --> 00:07:59,840
right if you go too deep on requirements

00:07:58,319 --> 00:08:01,919
you're not agile you're probably a

00:07:59,840 --> 00:08:04,479
version of waterfall

00:08:01,919 --> 00:08:05,360
if you go too light the risk of defects

00:08:04,479 --> 00:08:07,360
increases

00:08:05,360 --> 00:08:09,120
so that balance is really really

00:08:07,360 --> 00:08:10,639
difficult and i don't think any team in

00:08:09,120 --> 00:08:12,720
the world has solved this yet but it's

00:08:10,639 --> 00:08:14,879
something to be conscious of

00:08:12,720 --> 00:08:16,720
and then you have the skills and balance

00:08:14,879 --> 00:08:18,400
the scrum guide denotes

00:08:16,720 --> 00:08:21,440
three roles and exactly three roles

00:08:18,400 --> 00:08:22,800
scrum master product owner and the team

00:08:21,440 --> 00:08:24,720
and you look at the amount of people

00:08:22,800 --> 00:08:27,199
that are trained for scrum

00:08:24,720 --> 00:08:28,400
and certified scrub master is one of the

00:08:27,199 --> 00:08:29,840
most popular training

00:08:28,400 --> 00:08:31,520
and certifications in the world for

00:08:29,840 --> 00:08:34,320
anyone want to work in scrum

00:08:31,520 --> 00:08:35,519
product owner is a distant second and

00:08:34,320 --> 00:08:37,360
scrum developer

00:08:35,519 --> 00:08:39,360
so training developers for how to

00:08:37,360 --> 00:08:40,880
operate in a scrum environment to use

00:08:39,360 --> 00:08:42,479
all their tools their approaches their

00:08:40,880 --> 00:08:44,640
best practices

00:08:42,479 --> 00:08:47,279
minimal absolutely minimal so for

00:08:44,640 --> 00:08:49,200
example if you're a team that follows um

00:08:47,279 --> 00:08:50,640
test driven development scrum is

00:08:49,200 --> 00:08:51,519
probably a very good mix for you if

00:08:50,640 --> 00:08:53,360
you're a team that follows

00:08:51,519 --> 00:08:55,120
behavior-driven development

00:08:53,360 --> 00:08:57,120
not such a good complement because the

00:08:55,120 --> 00:09:00,800
how bdd actually operates

00:08:57,120 --> 00:09:02,399
so that imbalance creates a potential

00:09:00,800 --> 00:09:05,519
defect initially with scrum

00:09:02,399 --> 00:09:07,519
from a waste perspective the second lean

00:09:05,519 --> 00:09:08,000
waste is inventory that's sitting idle

00:09:07,519 --> 00:09:10,480
or

00:09:08,000 --> 00:09:11,040
waiting as we like to call it so

00:09:10,480 --> 00:09:12,320
literally

00:09:11,040 --> 00:09:14,399
waiting for something to happen with

00:09:12,320 --> 00:09:16,480
your code um

00:09:14,399 --> 00:09:17,440
in manufacturing terms and even in

00:09:16,480 --> 00:09:19,279
software terms

00:09:17,440 --> 00:09:21,760
this can be viewed as batch completion

00:09:19,279 --> 00:09:24,800
versus a single lighting transfer

00:09:21,760 --> 00:09:26,240
so trying to move items through the

00:09:24,800 --> 00:09:28,080
value stream

00:09:26,240 --> 00:09:30,160
and moving them at a single level rather

00:09:28,080 --> 00:09:32,080
than waiting for that to load up

00:09:30,160 --> 00:09:34,000
and what's also added in here is the

00:09:32,080 --> 00:09:35,519
time required to perform rework because

00:09:34,000 --> 00:09:38,080
all of these wastes interconnect with

00:09:35,519 --> 00:09:39,680
each other and the rework time is

00:09:38,080 --> 00:09:40,800
literally waiting before your customer

00:09:39,680 --> 00:09:42,800
can get it

00:09:40,800 --> 00:09:44,480
and that is a real symptom of inadequate

00:09:42,800 --> 00:09:46,320
flow to the system that we're not able

00:09:44,480 --> 00:09:48,240
to move things quickly enough into our

00:09:46,320 --> 00:09:50,160
customers hands

00:09:48,240 --> 00:09:52,240
now you look at this from the the scrum

00:09:50,160 --> 00:09:53,360
lens again the potentially shippable

00:09:52,240 --> 00:09:55,200
increments

00:09:53,360 --> 00:09:57,279
that's a batch right because we don't

00:09:55,200 --> 00:09:58,880
release those bugs and those features as

00:09:57,279 --> 00:10:00,399
we go well most teams don't they're

00:09:58,880 --> 00:10:02,240
certainly teams that operate at a very

00:10:00,399 --> 00:10:04,800
high level of ci cd

00:10:02,240 --> 00:10:05,440
and but in general is your customer able

00:10:04,800 --> 00:10:08,399
to receive

00:10:05,440 --> 00:10:10,720
um bugs or new features in flight or do

00:10:08,399 --> 00:10:12,720
we have to batch it and hold on to us

00:10:10,720 --> 00:10:14,800
the definition it done to me actually

00:10:12,720 --> 00:10:16,560
hampers the flow within the team it

00:10:14,800 --> 00:10:18,079
increases the quality and this is where

00:10:16,560 --> 00:10:19,760
the trade-off of the conversations have

00:10:18,079 --> 00:10:21,839
to happen within the team

00:10:19,760 --> 00:10:22,959
because you have this early and often

00:10:21,839 --> 00:10:25,600
feedback loop

00:10:22,959 --> 00:10:26,959
it causes rework naturally where you're

00:10:25,600 --> 00:10:29,040
putting a very raw

00:10:26,959 --> 00:10:31,200
um pull request out there for people to

00:10:29,040 --> 00:10:32,079
review give feedback and do that rework

00:10:31,200 --> 00:10:34,240
cycle

00:10:32,079 --> 00:10:36,160
arguably great learnings but it creates

00:10:34,240 --> 00:10:37,680
bottlenecks depending on team makeup

00:10:36,160 --> 00:10:38,640
especially if you're depending on a core

00:10:37,680 --> 00:10:41,360
set of skills

00:10:38,640 --> 00:10:42,000
and to progress that i mentioned the

00:10:41,360 --> 00:10:44,160
skills

00:10:42,000 --> 00:10:46,000
and imbalance and matrix organizations

00:10:44,160 --> 00:10:48,720
earlier and that skills matrix

00:10:46,000 --> 00:10:50,160
um can lead to people waiting especially

00:10:48,720 --> 00:10:51,120
if you have an imbalance with quality

00:10:50,160 --> 00:10:53,600
engineers

00:10:51,120 --> 00:10:55,279
and engineering and depending on your

00:10:53,600 --> 00:10:56,720
team's view of quality it should be

00:10:55,279 --> 00:10:58,880
everyone's responsibility

00:10:56,720 --> 00:11:00,640
but some teams will always opt for the

00:10:58,880 --> 00:11:01,279
the expert and quality to review

00:11:00,640 --> 00:11:03,279
something

00:11:01,279 --> 00:11:04,959
and with about a five to one ratio

00:11:03,279 --> 00:11:06,560
that's an imbalance in skills and that

00:11:04,959 --> 00:11:09,680
can lead to a lot of waiting on that

00:11:06,560 --> 00:11:09,680
person's availability

00:11:09,839 --> 00:11:15,839
the third waste is um transportation

00:11:12,959 --> 00:11:17,760
uh this is described as non-value ad

00:11:15,839 --> 00:11:19,519
movement of materials or people

00:11:17,760 --> 00:11:21,600
lean talks a lot about value-add

00:11:19,519 --> 00:11:22,640
necessary and non-value-add and

00:11:21,600 --> 00:11:24,160
non-value-add

00:11:22,640 --> 00:11:25,760
and the three things are basically

00:11:24,160 --> 00:11:27,760
framed around the customer is our

00:11:25,760 --> 00:11:29,120
customer paying for this that's a value

00:11:27,760 --> 00:11:30,399
add we're adding value to what the

00:11:29,120 --> 00:11:32,320
customer wants

00:11:30,399 --> 00:11:33,519
sometimes there's necessary steps we

00:11:32,320 --> 00:11:35,440
have to take

00:11:33,519 --> 00:11:36,880
that don't add any value but we're okay

00:11:35,440 --> 00:11:37,519
with it because if we don't take it the

00:11:36,880 --> 00:11:39,920
customer

00:11:37,519 --> 00:11:40,959
ultimately won't get the product but

00:11:39,920 --> 00:11:42,720
non-value-add

00:11:40,959 --> 00:11:45,040
are things that are pointless so why are

00:11:42,720 --> 00:11:47,279
we doing this um

00:11:45,040 --> 00:11:49,120
processes that should be grouped closely

00:11:47,279 --> 00:11:51,200
together to minimize delay as a way of

00:11:49,120 --> 00:11:54,399
handling this from a lean perspective

00:11:51,200 --> 00:11:56,079
but going back to um our causes large

00:11:54,399 --> 00:11:57,519
batch sizes which you see is a

00:11:56,079 --> 00:12:00,880
repeating feature going through the

00:11:57,519 --> 00:12:02,880
waste is a problem and complex systems

00:12:00,880 --> 00:12:04,320
if you name me the software system

00:12:02,880 --> 00:12:05,760
that's a simple system

00:12:04,320 --> 00:12:07,839
um i'll give you a hundred dollars

00:12:05,760 --> 00:12:09,600
because they just don't exist to get a

00:12:07,839 --> 00:12:12,399
complex

00:12:09,600 --> 00:12:13,839
and system view of software that is

00:12:12,399 --> 00:12:15,360
distilled down into something that's

00:12:13,839 --> 00:12:18,320
simple to allow a

00:12:15,360 --> 00:12:18,880
very clean value stream it's very very

00:12:18,320 --> 00:12:20,800
difficult

00:12:18,880 --> 00:12:22,320
unless you're designing specifically for

00:12:20,800 --> 00:12:25,519
that and if you are

00:12:22,320 --> 00:12:28,480
you're going to make a lot of money

00:12:25,519 --> 00:12:29,519
now if we look to a scrum lens um what

00:12:28,480 --> 00:12:30,800
we're talking about here from the

00:12:29,519 --> 00:12:32,959
transport perspective

00:12:30,800 --> 00:12:34,160
is the imperfect skills mean work is

00:12:32,959 --> 00:12:36,320
handed off

00:12:34,160 --> 00:12:38,320
and this is where the code the feature

00:12:36,320 --> 00:12:39,920
the product the ticket is handed off

00:12:38,320 --> 00:12:41,839
and waiting for another part of the

00:12:39,920 --> 00:12:43,680
company to complete this could be

00:12:41,839 --> 00:12:45,440
compliance for example so security

00:12:43,680 --> 00:12:47,680
productization release engineering

00:12:45,440 --> 00:12:48,959
policies might require this to go down

00:12:47,680 --> 00:12:51,120
the value stream

00:12:48,959 --> 00:12:52,800
outside of your scrum team's visibility

00:12:51,120 --> 00:12:54,000
to get the final stamp before it gets to

00:12:52,800 --> 00:12:56,160
the customer

00:12:54,000 --> 00:12:58,000
this means that you need to view your

00:12:56,160 --> 00:13:00,000
software engineering processes as an

00:12:58,000 --> 00:13:01,680
entire software supply chain

00:13:00,000 --> 00:13:03,040
to look at it from the inception point

00:13:01,680 --> 00:13:05,120
of the requirements to the point that

00:13:03,040 --> 00:13:07,440
reaches the customer's hands

00:13:05,120 --> 00:13:09,120
and your scrum team might have that

00:13:07,440 --> 00:13:10,639
buy-in but you need to try and push

00:13:09,120 --> 00:13:12,639
through that buy-in to get all of those

00:13:10,639 --> 00:13:13,760
other parts of the organization buying

00:13:12,639 --> 00:13:15,360
into the process

00:13:13,760 --> 00:13:17,519
and not having scrum working in an

00:13:15,360 --> 00:13:19,120
isolated silo

00:13:17,519 --> 00:13:20,800
now automation is generally an

00:13:19,120 --> 00:13:22,959
afterthought um

00:13:20,800 --> 00:13:24,720
manually moving cultural environments

00:13:22,959 --> 00:13:26,800
looking at manual intervention because

00:13:24,720 --> 00:13:27,920
it's gated by key skills or requirements

00:13:26,800 --> 00:13:30,560
or so on

00:13:27,920 --> 00:13:31,200
and there is a base set of technologies

00:13:30,560 --> 00:13:33,519
and and

00:13:31,200 --> 00:13:35,440
technological and safety nets that need

00:13:33,519 --> 00:13:36,880
to be in place before a team can really

00:13:35,440 --> 00:13:38,399
harness and

00:13:36,880 --> 00:13:40,240
empower themselves through the use of

00:13:38,399 --> 00:13:40,959
scrum so the likes of regression test

00:13:40,240 --> 00:13:42,720
beds

00:13:40,959 --> 00:13:44,720
proper environments proper access to

00:13:42,720 --> 00:13:47,680
hardware virtualization

00:13:44,720 --> 00:13:48,000
and a process that allows all that flow

00:13:47,680 --> 00:13:50,000
but

00:13:48,000 --> 00:13:51,120
generally we tack that on mid-flight in

00:13:50,000 --> 00:13:52,880
the scrum team or

00:13:51,120 --> 00:13:54,639
after the fact the product is launched

00:13:52,880 --> 00:13:55,680
and available because we need to get the

00:13:54,639 --> 00:13:57,199
market quickly

00:13:55,680 --> 00:13:58,639
and i get that's a trade-off and that's

00:13:57,199 --> 00:13:59,360
probably a very critical view of the

00:13:58,639 --> 00:14:01,440
world

00:13:59,360 --> 00:14:03,680
and but that value that you get from

00:14:01,440 --> 00:14:06,639
having automation is huge to minimize

00:14:03,680 --> 00:14:06,639
this particular waste

00:14:06,800 --> 00:14:11,040
the fort waste is motion and this is

00:14:09,040 --> 00:14:13,120
another um non-value add where you have

00:14:11,040 --> 00:14:14,959
the movement directions of people

00:14:13,120 --> 00:14:16,880
that don't add value to the product or

00:14:14,959 --> 00:14:19,760
service and from a

00:14:16,880 --> 00:14:20,240
a manufacturing perspective this is the

00:14:19,760 --> 00:14:22,720
poor

00:14:20,240 --> 00:14:24,399
design and layout of the organization

00:14:22,720 --> 00:14:26,240
the poor process design

00:14:24,399 --> 00:14:28,959
the large batch sizes that you have to

00:14:26,240 --> 00:14:31,199
go and move things in a slower pace

00:14:28,959 --> 00:14:33,120
now i hear you thinking that we're not

00:14:31,199 --> 00:14:33,519
in manufacturing we don't really meet or

00:14:33,120 --> 00:14:34,959
move

00:14:33,519 --> 00:14:37,199
right we're not moving between meeting

00:14:34,959 --> 00:14:39,839
rooms certainly at this time of year

00:14:37,199 --> 00:14:40,399
but you look at motion from a scrub lens

00:14:39,839 --> 00:14:42,880
and

00:14:40,399 --> 00:14:46,160
meeting attendance to me is a problem

00:14:42,880 --> 00:14:47,920
and whole team meetings which scrum

00:14:46,160 --> 00:14:49,440
recommends i won't say mandates is

00:14:47,920 --> 00:14:50,959
probably the wrong word uh

00:14:49,440 --> 00:14:53,440
it is designed for knowledge sharing

00:14:50,959 --> 00:14:55,199
which is fantastic but ninety percent of

00:14:53,440 --> 00:14:56,720
people on scrum calls in my experience

00:14:55,199 --> 00:14:59,120
are passive listeners when you get to

00:14:56,720 --> 00:15:02,160
that knowledge sharing ceremonies for

00:14:59,120 --> 00:15:03,760
ticket breakdown or backlog grooming and

00:15:02,160 --> 00:15:05,360
it's typically the person with the most

00:15:03,760 --> 00:15:08,959
knowledge the technical lead

00:15:05,360 --> 00:15:10,800
or um the the sme in the area are

00:15:08,959 --> 00:15:13,040
driving the conversation

00:15:10,800 --> 00:15:14,880
the rest of the people are passive and

00:15:13,040 --> 00:15:16,160
passive is very bad and remote scrum at

00:15:14,880 --> 00:15:18,880
the moment because people are getting

00:15:16,160 --> 00:15:21,279
distracted by emails by cat mems

00:15:18,880 --> 00:15:22,560
and anything else going on in the world

00:15:21,279 --> 00:15:23,839
so

00:15:22,560 --> 00:15:25,360
that's something we need to consider

00:15:23,839 --> 00:15:26,720
right do we need the whole team to be

00:15:25,360 --> 00:15:29,519
there

00:15:26,720 --> 00:15:31,440
context switching so the multi-hot rolls

00:15:29,519 --> 00:15:33,519
from i'm writing code to reviewing code

00:15:31,440 --> 00:15:34,800
to testing code to deploying code to

00:15:33,519 --> 00:15:37,680
debugging code

00:15:34,800 --> 00:15:38,079
and it's mentally difficult for humans

00:15:37,680 --> 00:15:41,519
to

00:15:38,079 --> 00:15:43,440
do more than two tasks at the same time

00:15:41,519 --> 00:15:45,360
without losing about 33

00:15:43,440 --> 00:15:46,480
productivity lots of research stats out

00:15:45,360 --> 00:15:49,839
there on that

00:15:46,480 --> 00:15:51,440
and why don't we enforce our whip limits

00:15:49,839 --> 00:15:53,040
to protect ourselves from that

00:15:51,440 --> 00:15:55,040
and this goes back to the usage of

00:15:53,040 --> 00:15:56,720
kanban going through the system

00:15:55,040 --> 00:15:58,720
and what you're trying to actually get

00:15:56,720 --> 00:16:01,120
to is a pull from the right mentality

00:15:58,720 --> 00:16:03,040
where we're actually going towards

00:16:01,120 --> 00:16:04,880
tickets and code that is as close to

00:16:03,040 --> 00:16:06,959
being released to the customers we can

00:16:04,880 --> 00:16:08,800
can i help deploy it can i help review

00:16:06,959 --> 00:16:09,759
it can i help test it can i help here

00:16:08,800 --> 00:16:11,600
program it

00:16:09,759 --> 00:16:13,120
and can i help write a new feature

00:16:11,600 --> 00:16:15,440
that's the kind of mentality we should

00:16:13,120 --> 00:16:17,440
be doing to try and minimize this waste

00:16:15,440 --> 00:16:20,079
and reduce the motion and increase the

00:16:17,440 --> 00:16:22,399
flow through the overall system

00:16:20,079 --> 00:16:23,839
the fifth waste is over production and

00:16:22,399 --> 00:16:24,800
that's the worst kind of waste from a

00:16:23,839 --> 00:16:26,399
lean perspective

00:16:24,800 --> 00:16:29,279
because it is a root cause of other

00:16:26,399 --> 00:16:30,959
wastes uh it obscures the need for

00:16:29,279 --> 00:16:33,040
improvement because we think we're doing

00:16:30,959 --> 00:16:35,600
the right thing by producing more

00:16:33,040 --> 00:16:37,680
and how could that happen well we

00:16:35,600 --> 00:16:39,839
produce faster than required or faster

00:16:37,680 --> 00:16:42,480
than our consumer wants

00:16:39,839 --> 00:16:45,040
and what can cause this from a pure lean

00:16:42,480 --> 00:16:47,839
perspective is this forecasting

00:16:45,040 --> 00:16:50,399
we are thinking we'll deliver x and we

00:16:47,839 --> 00:16:52,240
deliver x plus one and

00:16:50,399 --> 00:16:54,959
unbalanced teams can cause this where

00:16:52,240 --> 00:16:56,639
you have way too much being produced at

00:16:54,959 --> 00:16:58,320
an early part of the value stream and it

00:16:56,639 --> 00:17:01,120
causes issues further down but

00:16:58,320 --> 00:17:01,920
ultimately one part of the overall

00:17:01,120 --> 00:17:04,160
stream

00:17:01,920 --> 00:17:05,439
working harder and faster than other

00:17:04,160 --> 00:17:07,600
parts can actually create an

00:17:05,439 --> 00:17:09,600
overproduction scenario because they're

00:17:07,600 --> 00:17:11,120
forcing the pace on the team and that

00:17:09,600 --> 00:17:12,480
can put a lot of pressure at a people

00:17:11,120 --> 00:17:14,480
level as well where they feel under

00:17:12,480 --> 00:17:17,360
pressure to perform at the level of the

00:17:14,480 --> 00:17:19,439
the fastest person in the team now from

00:17:17,360 --> 00:17:21,280
the scrum lens i mentioned that the team

00:17:19,439 --> 00:17:23,360
ratio has been off the typical 5 to 1

00:17:21,280 --> 00:17:24,640
ratio for engineering in qa straight

00:17:23,360 --> 00:17:26,160
away we're in a

00:17:24,640 --> 00:17:28,400
a dangerous area where we're going to

00:17:26,160 --> 00:17:30,480
produce too much code that will run the

00:17:28,400 --> 00:17:32,160
risk of the quality regressions and

00:17:30,480 --> 00:17:35,280
quality is everyone's problem

00:17:32,160 --> 00:17:37,919
but do teams view it like that uh

00:17:35,280 --> 00:17:39,679
estimates right so scrum guide actually

00:17:37,919 --> 00:17:41,600
doesn't mention estimates per se

00:17:39,679 --> 00:17:43,600
or story points to allude to it and

00:17:41,600 --> 00:17:45,600
teams who use it for velocity

00:17:43,600 --> 00:17:47,120
but rarely do teams complete exactly

00:17:45,600 --> 00:17:49,679
what they committed to

00:17:47,120 --> 00:17:51,280
and more often than not they pull in new

00:17:49,679 --> 00:17:53,440
work into the sprint because

00:17:51,280 --> 00:17:55,039
typically when they're underperforming

00:17:53,440 --> 00:17:55,600
they reduce what they're going to commit

00:17:55,039 --> 00:17:57,200
to

00:17:55,600 --> 00:17:58,720
and they end up reducing it too low

00:17:57,200 --> 00:18:01,520
which means they over produce

00:17:58,720 --> 00:18:02,799
as natural sprints and progress and that

00:18:01,520 --> 00:18:04,720
can have a

00:18:02,799 --> 00:18:06,080
a mental impact on the team as well that

00:18:04,720 --> 00:18:07,039
they're not feeling they're delivering

00:18:06,080 --> 00:18:08,799
the value

00:18:07,039 --> 00:18:10,480
and they're missing their goals which

00:18:08,799 --> 00:18:12,480
questions they're buying to scrum the

00:18:10,480 --> 00:18:14,240
process and so on

00:18:12,480 --> 00:18:15,919
now extra functionality that's

00:18:14,240 --> 00:18:18,080
potentially not captured by acceptance

00:18:15,919 --> 00:18:19,360
criteria also causes this because it

00:18:18,080 --> 00:18:20,080
creates this bigger maintenance

00:18:19,360 --> 00:18:21,919
footprint

00:18:20,080 --> 00:18:23,120
which your devops folks have to actually

00:18:21,919 --> 00:18:24,960
maintain

00:18:23,120 --> 00:18:26,480
the great example i use for the extra

00:18:24,960 --> 00:18:27,760
functionality you have to be tasked to

00:18:26,480 --> 00:18:29,440
design a calculator

00:18:27,760 --> 00:18:31,039
it's just addition and multiplication

00:18:29,440 --> 00:18:32,880
the customer wants nothing else

00:18:31,039 --> 00:18:34,320
but smart engineers are smarter they'll

00:18:32,880 --> 00:18:36,000
say well subtraction and division is

00:18:34,320 --> 00:18:37,760
just an inverse operation i can quickly

00:18:36,000 --> 00:18:39,039
give that functionality

00:18:37,760 --> 00:18:40,960
and that's not in the acceptance

00:18:39,039 --> 00:18:42,880
criteria that's not in the brief

00:18:40,960 --> 00:18:44,640
and what we've done is created more

00:18:42,880 --> 00:18:45,520
pressure on the whole value stream

00:18:44,640 --> 00:18:48,000
because qe

00:18:45,520 --> 00:18:49,600
now have something else to review devops

00:18:48,000 --> 00:18:52,000
has something else to deploy

00:18:49,600 --> 00:18:53,360
and our customers got something for free

00:18:52,000 --> 00:18:55,039
i don't think the business folks like

00:18:53,360 --> 00:18:58,080
giving customers something for free

00:18:55,039 --> 00:19:00,320
so the over eagerness of a an engineer

00:18:58,080 --> 00:19:01,760
and not adhering to the acceptance

00:19:00,320 --> 00:19:03,679
criteria can actually cause

00:19:01,760 --> 00:19:05,039
overproduction issues um

00:19:03,679 --> 00:19:08,400
with the best of intent you know it's

00:19:05,039 --> 00:19:10,960
not done maliciously by any means

00:19:08,400 --> 00:19:12,240
the sixth waste is inventory so stock

00:19:10,960 --> 00:19:13,919
being held and not used in a

00:19:12,240 --> 00:19:15,360
just-in-time manner if you're storing

00:19:13,919 --> 00:19:17,440
stock is costing you money

00:19:15,360 --> 00:19:18,400
because you have to allocate room for it

00:19:17,440 --> 00:19:21,520
you have to

00:19:18,400 --> 00:19:23,200
make sure it's um refreshed you have to

00:19:21,520 --> 00:19:24,799
make sure it's rotated to make sure that

00:19:23,200 --> 00:19:26,400
the older stock is used first so that

00:19:24,799 --> 00:19:27,760
things are going off for example in a

00:19:26,400 --> 00:19:30,720
food environment

00:19:27,760 --> 00:19:32,640
and this cannot just be at the end it

00:19:30,720 --> 00:19:34,640
can be before or after a process so it

00:19:32,640 --> 00:19:36,720
can be in the middle of the value stream

00:19:34,640 --> 00:19:38,000
and that causes these flow problems when

00:19:36,720 --> 00:19:41,039
bottlenecks are in place

00:19:38,000 --> 00:19:42,960
now looking at that from scrum and the

00:19:41,039 --> 00:19:44,240
first place where i look for inventory

00:19:42,960 --> 00:19:46,480
is the backlog

00:19:44,240 --> 00:19:48,480
and there's this little's law and which

00:19:46,480 --> 00:19:50,559
looks a true port which is defined by

00:19:48,480 --> 00:19:52,320
your work in progress by your cycle time

00:19:50,559 --> 00:19:54,400
the great example they use is if you're

00:19:52,320 --> 00:19:56,480
in starbucks wanting to buy a coffee

00:19:54,400 --> 00:19:57,840
there's six people in the queue there's

00:19:56,480 --> 00:19:59,840
two people serving

00:19:57,840 --> 00:20:01,280
it takes a minute per person to get

00:19:59,840 --> 00:20:03,280
served you know you're going to get

00:20:01,280 --> 00:20:06,640
served in about three minutes time

00:20:03,280 --> 00:20:08,320
if you look at your backlog and can you

00:20:06,640 --> 00:20:09,760
tell me the littlest law for your

00:20:08,320 --> 00:20:11,200
backlog when will you exhaust your

00:20:09,760 --> 00:20:12,880
backlog

00:20:11,200 --> 00:20:14,640
most teams have a backlog that would

00:20:12,880 --> 00:20:16,799
probably stretch to two years

00:20:14,640 --> 00:20:18,559
that doesn't sound very agile that's a

00:20:16,799 --> 00:20:21,039
lot of waste from a human

00:20:18,559 --> 00:20:22,960
development perspective going in to look

00:20:21,039 --> 00:20:24,640
at specifications to break down work

00:20:22,960 --> 00:20:25,919
that probably won't be considered for 18

00:20:24,640 --> 00:20:27,360
to 24 months

00:20:25,919 --> 00:20:29,360
and anyone that works in the software

00:20:27,360 --> 00:20:30,159
industry will know that is a very long

00:20:29,360 --> 00:20:32,400
time

00:20:30,159 --> 00:20:34,400
so try and put a work in progress limit

00:20:32,400 --> 00:20:36,559
on your backlog to try and

00:20:34,400 --> 00:20:38,880
focus on the real value in front of you

00:20:36,559 --> 00:20:40,400
and not waste time on effort that

00:20:38,880 --> 00:20:43,200
probably won't be valid and will need to

00:20:40,400 --> 00:20:45,520
be revisited down the line

00:20:43,200 --> 00:20:47,360
scrum and partially done work is always

00:20:45,520 --> 00:20:49,200
a debate that you see at conferences

00:20:47,360 --> 00:20:51,360
right so incomplete items in the sprint

00:20:49,200 --> 00:20:53,360
should be returned to the backlog

00:20:51,360 --> 00:20:55,440
are they reevaluated what have we

00:20:53,360 --> 00:20:58,000
learned what can we pull from it

00:20:55,440 --> 00:20:59,600
um will we guarantee we'll do it in the

00:20:58,000 --> 00:21:02,159
next sprint especially if you're running

00:20:59,600 --> 00:21:04,080
teamatic sprints there's no guarantee

00:21:02,159 --> 00:21:06,000
that you will take that item and finish

00:21:04,080 --> 00:21:07,840
it and that's waste

00:21:06,000 --> 00:21:10,080
because you're now storing incomplete

00:21:07,840 --> 00:21:11,600
work and storing that ticket still on

00:21:10,080 --> 00:21:14,080
your backlog

00:21:11,600 --> 00:21:15,200
um the work in progress limits can cause

00:21:14,080 --> 00:21:17,600
poor flow

00:21:15,200 --> 00:21:19,280
because user stories can be held for

00:21:17,600 --> 00:21:21,360
review and batches

00:21:19,280 --> 00:21:22,880
in between process stages so when you're

00:21:21,360 --> 00:21:24,400
in progress on an item

00:21:22,880 --> 00:21:26,000
you want to progress to the next stage

00:21:24,400 --> 00:21:27,679
where it's ready for review

00:21:26,000 --> 00:21:29,120
and people don't know on the context

00:21:27,679 --> 00:21:30,240
switch straight away to grab that and

00:21:29,120 --> 00:21:32,080
run it through the system

00:21:30,240 --> 00:21:33,679
they might wait till two three four five

00:21:32,080 --> 00:21:35,840
tickets are available have a review

00:21:33,679 --> 00:21:38,320
afternoon or a review couple of hours

00:21:35,840 --> 00:21:39,520
and that hampers flow to the system to

00:21:38,320 --> 00:21:42,000
protect themselves from context

00:21:39,520 --> 00:21:42,000
switching

00:21:42,080 --> 00:21:46,720
the seventh waste is extra processing

00:21:44,320 --> 00:21:48,720
and what lean talks about is doing the

00:21:46,720 --> 00:21:49,520
minimum amount to match what's useful

00:21:48,720 --> 00:21:51,120
and needed so

00:21:49,520 --> 00:21:53,360
not going beyond it not putting

00:21:51,120 --> 00:21:56,480
additional decorations on it

00:21:53,360 --> 00:22:00,080
and one of the big problems um

00:21:56,480 --> 00:22:02,320
that has emerged here is standardization

00:22:00,080 --> 00:22:03,679
and the lack thereof in many industries

00:22:02,320 --> 00:22:05,280
so if you have a standard or best

00:22:03,679 --> 00:22:06,640
practices approach it minimizes the

00:22:05,280 --> 00:22:08,640
extra processing

00:22:06,640 --> 00:22:10,400
and the specification which is again a

00:22:08,640 --> 00:22:11,440
reoccurring team from a waste

00:22:10,400 --> 00:22:13,360
perspective

00:22:11,440 --> 00:22:14,799
is what often causes extra processing

00:22:13,360 --> 00:22:16,559
because you think you've completed what

00:22:14,799 --> 00:22:18,000
was asked you get clarity on it

00:22:16,559 --> 00:22:20,720
and you have to do extra work then to

00:22:18,000 --> 00:22:23,360
finish and get it over the line

00:22:20,720 --> 00:22:24,880
looking at that from scrum um scrum

00:22:23,360 --> 00:22:27,039
actually requires help from xp and

00:22:24,880 --> 00:22:28,720
others to minimize extra processing

00:22:27,039 --> 00:22:30,400
because of this concept of any member

00:22:28,720 --> 00:22:31,600
the team being able to take work and

00:22:30,400 --> 00:22:34,400
complete it

00:22:31,600 --> 00:22:35,919
and that means that you could work on

00:22:34,400 --> 00:22:38,080
something in a silo

00:22:35,919 --> 00:22:39,200
and then your colleague could pick up an

00:22:38,080 --> 00:22:41,679
equivalent ticket

00:22:39,200 --> 00:22:42,559
another few sprints later and work on it

00:22:41,679 --> 00:22:44,400
in the solo

00:22:42,559 --> 00:22:46,400
unaware that there was knowledge gained

00:22:44,400 --> 00:22:48,400
and unaware that there were specific

00:22:46,400 --> 00:22:50,799
um use cases that they should have known

00:22:48,400 --> 00:22:53,280
about that requires extra relearning

00:22:50,799 --> 00:22:54,080
that's an extra processing step so pair

00:22:53,280 --> 00:22:55,600
or mob

00:22:54,080 --> 00:22:57,760
programming depend on how much you buy

00:22:55,600 --> 00:23:00,240
into that and is what can be used to

00:22:57,760 --> 00:23:02,960
break down knowledge solos to try and

00:23:00,240 --> 00:23:04,720
identify opportunities where we can

00:23:02,960 --> 00:23:06,400
avoid having to learn the same problem

00:23:04,720 --> 00:23:08,080
by looking at a unique blog or a unique

00:23:06,400 --> 00:23:08,880
scenario that you have domain knowledge

00:23:08,080 --> 00:23:10,240
about

00:23:08,880 --> 00:23:11,600
and what often happens there is the

00:23:10,240 --> 00:23:13,360
person that has the domain knowledge

00:23:11,600 --> 00:23:15,200
will keep picking that bug up until

00:23:13,360 --> 00:23:15,840
they're out on holidays or they left the

00:23:15,200 --> 00:23:18,640
company

00:23:15,840 --> 00:23:20,640
and then you're relearning again and the

00:23:18,640 --> 00:23:21,200
specification balance right that problem

00:23:20,640 --> 00:23:23,039
again

00:23:21,200 --> 00:23:24,559
and how do we solve it that's the

00:23:23,039 --> 00:23:25,679
million dollar question about getting

00:23:24,559 --> 00:23:27,280
the specification

00:23:25,679 --> 00:23:29,520
nailed with the right acceptance

00:23:27,280 --> 00:23:31,520
criteria and that we don't do extra

00:23:29,520 --> 00:23:33,120
processing

00:23:31,520 --> 00:23:34,640
longer term maintenance is one of the

00:23:33,120 --> 00:23:35,520
definitions of extra processing and

00:23:34,640 --> 00:23:37,280
software

00:23:35,520 --> 00:23:39,280
and scrum doesn't speak to this right

00:23:37,280 --> 00:23:40,400
scrum will try to tell you put

00:23:39,280 --> 00:23:42,880
everything on your backlog

00:23:40,400 --> 00:23:44,880
right but artifacts need to be generated

00:23:42,880 --> 00:23:45,600
for long-term maintenance cves are a

00:23:44,880 --> 00:23:49,120
problem

00:23:45,600 --> 00:23:50,799
and end of life for um life cycle

00:23:49,120 --> 00:23:52,480
and dependencies that you have are a

00:23:50,799 --> 00:23:54,720
problem so making sure that

00:23:52,480 --> 00:23:56,240
your have an upgrade path for your

00:23:54,720 --> 00:23:57,440
software to stay at the latest and

00:23:56,240 --> 00:23:59,039
greatest and make sure you have the

00:23:57,440 --> 00:24:00,880
right level of support

00:23:59,039 --> 00:24:03,039
that's often break into the definition

00:24:00,880 --> 00:24:04,320
of done versus becoming a standard user

00:24:03,039 --> 00:24:07,200
story and

00:24:04,320 --> 00:24:07,760
that extra processing often forms that

00:24:07,200 --> 00:24:09,360
00:24:07,760 --> 00:24:11,200
ratio that people try to gravitate

00:24:09,360 --> 00:24:13,200
towards to fix these problems instead of

00:24:11,200 --> 00:24:15,919
making them a primary citizen

00:24:13,200 --> 00:24:17,440
and make it part of the long-term

00:24:15,919 --> 00:24:19,760
maintenance of your overall software

00:24:17,440 --> 00:24:21,520
suite

00:24:19,760 --> 00:24:22,880
the eight waste is actually not part of

00:24:21,520 --> 00:24:25,520
the toyota production system

00:24:22,880 --> 00:24:26,400
it's the under utilization of talent and

00:24:25,520 --> 00:24:29,120
what that

00:24:26,400 --> 00:24:30,240
looks at um is not getting the most out

00:24:29,120 --> 00:24:32,320
of your workforce

00:24:30,240 --> 00:24:34,240
red hat of this fantastic opt model

00:24:32,320 --> 00:24:35,760
which is organization passion and talent

00:24:34,240 --> 00:24:36,720
where if you get people with the right

00:24:35,760 --> 00:24:38,480
passions

00:24:36,720 --> 00:24:40,480
the right skills and talents and put

00:24:38,480 --> 00:24:42,720
them in the right role that intersection

00:24:40,480 --> 00:24:45,279
point is what their career best is

00:24:42,720 --> 00:24:46,640
and what lean attributes this towards is

00:24:45,279 --> 00:24:47,279
the separation of management and

00:24:46,640 --> 00:24:49,600
employees

00:24:47,279 --> 00:24:51,440
these rigid processes that are in place

00:24:49,600 --> 00:24:53,440
and a lack of challenges for people who

00:24:51,440 --> 00:24:55,520
are working

00:24:53,440 --> 00:24:57,120
and from a scrum perspective scrum

00:24:55,520 --> 00:24:59,520
doesn't recognize the manager role and

00:24:57,120 --> 00:25:01,200
that becomes a separation of concerns

00:24:59,520 --> 00:25:02,240
because the manager is disconnected from

00:25:01,200 --> 00:25:04,159
the team

00:25:02,240 --> 00:25:05,840
and that lack of a day-to-day pulse for

00:25:04,159 --> 00:25:07,919
guidance and career changes can

00:25:05,840 --> 00:25:09,600
harm people over a longer period of time

00:25:07,919 --> 00:25:10,320
it can lead to one-on-ones with your

00:25:09,600 --> 00:25:12,159
manager

00:25:10,320 --> 00:25:13,520
becoming a conversation to update the

00:25:12,159 --> 00:25:14,559
manager on the inner workings of the

00:25:13,520 --> 00:25:15,919
scrum team

00:25:14,559 --> 00:25:17,840
versus that person's career

00:25:15,919 --> 00:25:19,919
opportunities and you'll often see that

00:25:17,840 --> 00:25:22,000
the manager has missed an opportunity

00:25:19,919 --> 00:25:23,679
because they're not there observing or

00:25:22,000 --> 00:25:24,320
having the ability to observe what's

00:25:23,679 --> 00:25:26,000
going on

00:25:24,320 --> 00:25:27,600
to make recommendations at a career

00:25:26,000 --> 00:25:29,200
level

00:25:27,600 --> 00:25:30,960
if you follow scrum by the book the

00:25:29,200 --> 00:25:32,480
retrospective stable in the framework

00:25:30,960 --> 00:25:34,880
they don't want to break scrum

00:25:32,480 --> 00:25:37,279
but agile is so rich that teams should

00:25:34,880 --> 00:25:39,039
look beyond scrum as a framework

00:25:37,279 --> 00:25:41,520
to look at what complements well and

00:25:39,039 --> 00:25:44,159
solves their problems around it

00:25:41,520 --> 00:25:45,679
and that means people don't innovate

00:25:44,159 --> 00:25:47,360
that means they don't want to look

00:25:45,679 --> 00:25:48,640
beyond the because scrum is saying hey

00:25:47,360 --> 00:25:51,600
stay in your lane this is what you're

00:25:48,640 --> 00:25:53,120
going to do and another question that

00:25:51,600 --> 00:25:54,880
i think everyone should ask in their in

00:25:53,120 --> 00:25:56,240
their teams when they go back after this

00:25:54,880 --> 00:25:58,000
is is how

00:25:56,240 --> 00:26:00,320
um involved are the team and division

00:25:58,000 --> 00:26:01,760
and direction is work handed down or can

00:26:00,320 --> 00:26:03,440
ideas bubble up

00:26:01,760 --> 00:26:04,880
are are your team considered a

00:26:03,440 --> 00:26:07,120
stakeholder

00:26:04,880 --> 00:26:08,880
i know my teams are and that's something

00:26:07,120 --> 00:26:10,559
that i believe is rare

00:26:08,880 --> 00:26:12,320
based on conversations with other people

00:26:10,559 --> 00:26:14,000
in this area so your team

00:26:12,320 --> 00:26:15,520
should be able to bubble up ideas and

00:26:14,000 --> 00:26:16,799
help set the direction that it's going

00:26:15,520 --> 00:26:18,799
on because that's how you

00:26:16,799 --> 00:26:22,000
get smart people engaged and that's what

00:26:18,799 --> 00:26:25,279
you pay smart people to do

00:26:22,000 --> 00:26:27,279
and just a quick whistle tour of um lean

00:26:25,279 --> 00:26:29,679
tools and approaches that you can apply

00:26:27,279 --> 00:26:31,360
uh embrace kanban uh a lot of people

00:26:29,679 --> 00:26:32,559
embrace it for the visuals but please

00:26:31,360 --> 00:26:34,240
look at it from a work in progress

00:26:32,559 --> 00:26:36,799
limits pull from the right to minimize

00:26:34,240 --> 00:26:38,559
that context and increase the flow

00:26:36,799 --> 00:26:40,559
what about your ceremonies how many

00:26:38,559 --> 00:26:43,039
people are idle can you streamline them

00:26:40,559 --> 00:26:46,159
can you get the technical experts to

00:26:43,039 --> 00:26:48,000
disconnect run it on their own share

00:26:46,159 --> 00:26:49,520
their knowledge asynchronously or find a

00:26:48,000 --> 00:26:50,799
different way that is not pulling 10

00:26:49,520 --> 00:26:52,640
people into a call

00:26:50,799 --> 00:26:55,360
for an hour to sit down and have someone

00:26:52,640 --> 00:26:57,840
talk through a problem or an issue

00:26:55,360 --> 00:26:59,600
reveal your backlog um can you exhaust

00:26:57,840 --> 00:27:02,400
it in six sprints what is little's law

00:26:59,600 --> 00:27:04,559
telling you how much runway do you have

00:27:02,400 --> 00:27:06,080
force those value conversations to make

00:27:04,559 --> 00:27:07,200
people really question

00:27:06,080 --> 00:27:09,120
whether an item should get on the

00:27:07,200 --> 00:27:10,880
backlog or not

00:27:09,120 --> 00:27:12,240
i really would like people to consider

00:27:10,880 --> 00:27:15,039
empowering their team

00:27:12,240 --> 00:27:16,720
innovate influence the backlog get all

00:27:15,039 --> 00:27:18,640
of your maintenance bugs technical debt

00:27:16,720 --> 00:27:21,440
as primary citizens they should be up

00:27:18,640 --> 00:27:23,600
there with user stories so you can help

00:27:21,440 --> 00:27:24,880
wall off issues before they become an

00:27:23,600 --> 00:27:26,559
issue for the team because that's

00:27:24,880 --> 00:27:28,240
mentally draining on people and in a

00:27:26,559 --> 00:27:29,840
pandemic with everyone working from home

00:27:28,240 --> 00:27:34,320
we don't need that level of stress

00:27:29,840 --> 00:27:36,960
when we can prevent it by minimal tweaks

00:27:34,320 --> 00:27:39,279
that is me um my email is elle griffin

00:27:36,960 --> 00:27:40,399
at redhat.com i'm on twitter at lee

00:27:39,279 --> 00:27:42,880
griffin as well

00:27:40,399 --> 00:27:44,399
um i'm just exploring this lean area i'd

00:27:42,880 --> 00:27:45,919
love to hear your thoughts i'm happy to

00:27:44,399 --> 00:27:48,480
take questions here

00:27:45,919 --> 00:27:49,679
on the discord after it or over email or

00:27:48,480 --> 00:27:51,520
on twitter as well

00:27:49,679 --> 00:27:54,960
i hope you enjoyed it and got some value

00:27:51,520 --> 00:27:54,960
from it today thank you very much

00:27:55,600 --> 00:28:01,120
thank you very much lee and we have one

00:27:58,640 --> 00:28:02,080
more questions in the q a section so do

00:28:01,120 --> 00:28:05,600
you want to answer

00:28:02,080 --> 00:28:08,320
it now we still have time uh okay

00:28:05,600 --> 00:28:10,159
so i miss hallway coffee conversations

00:28:08,320 --> 00:28:12,480
unstructured or accidental what's your

00:28:10,159 --> 00:28:13,360
experience in dedicating time for coffee

00:28:12,480 --> 00:28:15,679
chats

00:28:13,360 --> 00:28:17,200
so i can speak from our team experience

00:28:15,679 --> 00:28:20,159
and we have

00:28:17,200 --> 00:28:22,000
in our calendar placeholders for um

00:28:20,159 --> 00:28:23,360
social kind of conversations we have

00:28:22,000 --> 00:28:24,320
them at an office level even though

00:28:23,360 --> 00:28:27,679
we're all remote

00:28:24,320 --> 00:28:30,960
and our team have had virtual copies and

00:28:27,679 --> 00:28:32,640
we even do things like a pub quiz every

00:28:30,960 --> 00:28:34,480
couple of months as well to get people

00:28:32,640 --> 00:28:36,159
together in a social element

00:28:34,480 --> 00:28:37,760
we have a team meeting every week where

00:28:36,159 --> 00:28:39,120
i think the most value in the meeting is

00:28:37,760 --> 00:28:40,399
before the meeting and after the meeting

00:28:39,120 --> 00:28:44,159
where people can

00:28:40,399 --> 00:28:46,320
get there talk have conversations um but

00:28:44,159 --> 00:28:48,320
creating a means to improve the

00:28:46,320 --> 00:28:50,159
communication within your team is

00:28:48,320 --> 00:28:50,799
usually important because that social

00:28:50,159 --> 00:28:53,120
aspect

00:28:50,799 --> 00:28:53,840
in computing and will make or break a

00:28:53,120 --> 00:28:56,080
team

00:28:53,840 --> 00:28:58,240
uh it creates that camaraderie where

00:28:56,080 --> 00:28:59,760
people are willing to go the extra mile

00:28:58,240 --> 00:29:02,080
to help each other out

00:28:59,760 --> 00:29:03,120
and there are so many tools that you can

00:29:02,080 --> 00:29:06,000
do this with but

00:29:03,120 --> 00:29:07,360
even having a social chat room uh is is

00:29:06,000 --> 00:29:10,480
so much fun

00:29:07,360 --> 00:29:12,960
and we often have pun battles in our um

00:29:10,480 --> 00:29:14,240
chat rooms but awful puns by people

00:29:12,960 --> 00:29:16,559
but it gets everyone laughing and it

00:29:14,240 --> 00:29:19,039
gets everyone talking and

00:29:16,559 --> 00:29:20,559
we do regular office hours where people

00:29:19,039 --> 00:29:22,799
can come with a topic

00:29:20,559 --> 00:29:25,600
um or just come to have a chat and those

00:29:22,799 --> 00:29:27,600
informal chats then lead to those

00:29:25,600 --> 00:29:29,120
really cool bright ideas that that

00:29:27,600 --> 00:29:30,960
people want to get which is what

00:29:29,120 --> 00:29:32,320
to me comes out of the hallway

00:29:30,960 --> 00:29:33,840
conversations you know

00:29:32,320 --> 00:29:35,679
where you go in just to talk about the

00:29:33,840 --> 00:29:37,039
weather and how everyone is and you come

00:29:35,679 --> 00:29:38,080
out with an idea for a problem that

00:29:37,039 --> 00:29:40,399
you've been working on because the

00:29:38,080 --> 00:29:44,720
conversation just naturally happened

00:29:40,399 --> 00:29:47,200
so force it somewhat um until it becomes

00:29:44,720 --> 00:29:47,200
normal

00:29:50,880 --> 00:29:55,120
thank you and we have we have one more

00:29:53,760 --> 00:29:58,159
questions there

00:29:55,120 --> 00:30:00,640
can you from pavel zielinski

00:29:58,159 --> 00:30:02,159
uh can you point me on the golden advice

00:30:00,640 --> 00:30:05,919
to reduced

00:30:02,159 --> 00:30:05,919
reduced waste on meetings

00:30:07,440 --> 00:30:10,399
we can't hear you

00:30:11,200 --> 00:30:14,559
have a habit of hitting mute when i'm

00:30:12,960 --> 00:30:17,679
not talking and

00:30:14,559 --> 00:30:20,320
have an agenda and i try not to turn up

00:30:17,679 --> 00:30:22,880
the meetings with no agenda have a very

00:30:20,320 --> 00:30:24,960
clear agenda about what the goals are

00:30:22,880 --> 00:30:26,159
because a big part of waste is people

00:30:24,960 --> 00:30:28,480
coming along

00:30:26,159 --> 00:30:30,399
and wanting to talk about what they want

00:30:28,480 --> 00:30:31,840
to talk about but it's not documented

00:30:30,399 --> 00:30:33,760
the team haven't bought into but

00:30:31,840 --> 00:30:35,360
people haven't prepared so you might

00:30:33,760 --> 00:30:37,360
spend the first 10 minutes

00:30:35,360 --> 00:30:39,600
trying to understand what the problem is

00:30:37,360 --> 00:30:40,399
so in general if it's an important

00:30:39,600 --> 00:30:42,640
meeting

00:30:40,399 --> 00:30:44,559
send your agenda in advance send any

00:30:42,640 --> 00:30:45,919
pre-reading in advance so people have an

00:30:44,559 --> 00:30:48,720
opportunity to

00:30:45,919 --> 00:30:50,960
up skill on what the topic might be and

00:30:48,720 --> 00:30:52,399
and when you get there try and time box

00:30:50,960 --> 00:30:55,200
it as tight as you can

00:30:52,399 --> 00:30:56,640
so if you see we're running over um

00:30:55,200 --> 00:30:57,840
don't extend the meeting

00:30:56,640 --> 00:30:59,440
end the meeting take things

00:30:57,840 --> 00:31:00,480
asynchronously see what the action

00:30:59,440 --> 00:31:02,240
points are

00:31:00,480 --> 00:31:03,519
and every meeting to me should have a

00:31:02,240 --> 00:31:05,200
defined outcome

00:31:03,519 --> 00:31:06,720
so we go into a meeting what is the

00:31:05,200 --> 00:31:07,760
outcome because you don't want to walk

00:31:06,720 --> 00:31:09,279
away from it

00:31:07,760 --> 00:31:10,960
everyone comes out with a different idea

00:31:09,279 --> 00:31:12,480
of what the conclusion was

00:31:10,960 --> 00:31:13,840
and then another meeting is called a

00:31:12,480 --> 00:31:15,919
week later to rehash the same

00:31:13,840 --> 00:31:19,600
conversation so really being

00:31:15,919 --> 00:31:21,760
strict on it and what we've also um

00:31:19,600 --> 00:31:23,279
used in in red hat certainly is the

00:31:21,760 --> 00:31:25,840
google calendar feature

00:31:23,279 --> 00:31:28,240
which ends 30 minute meetings after 25

00:31:25,840 --> 00:31:30,240
and hour-long meetings after 50 minutes

00:31:28,240 --> 00:31:32,640
they give people five to ten minutes

00:31:30,240 --> 00:31:34,240
between meetings so they don't feel

00:31:32,640 --> 00:31:35,519
rushed or stressed they can get a coffee

00:31:34,240 --> 00:31:36,880
they can use the toilet they can just

00:31:35,519 --> 00:31:38,240
get up and stretch which is usually

00:31:36,880 --> 00:31:39,440
important

00:31:38,240 --> 00:31:45,840
and that's something that we should

00:31:39,440 --> 00:31:45,840

YouTube URL: https://www.youtube.com/watch?v=kiKW3Yddwx4


