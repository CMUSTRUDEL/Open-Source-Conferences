Title: Unifying Kernel Test Reporting with KernelCI - DevConf.CZ 2021
Publication date: 2021-03-12
Playlist: DevConfCZ 2021
Description: 
	Speaker: Nikolai Kondrashov


The landscape of Linux kernel testing and CI is notoriously fragmented. Systems like Intel's 0day, Linaro's LKFT, Google's Syzbot, Red Hat's CKI, and others, are each running their own tests, sending separate emails, and hosting different dashboards. As a result, developers have to cope with multiple diverse reports arriving at various stages of development cycle, and it's difficult to correlate and analyze results. The Linux Foundation's KernelCI project has been working on a CI stack and service for all to use, which is seeing increasing adoption. However, the project has also started a new effort aimed at already-established CI systems, letting participants keep their setups, but submit testing results to a common database and reporting system, using a simple, extensible protocol.

The system behind the new effort is called "KCIDB" (for "KernelCI Database") and is already receiving reports from the native KernelCI tests, RedHat's CKI and Google's Syzbot, with more systems working on joining. Our aim is to develop a unified report protocol and schema, maintain an open result database, provide a single dashboard, and to send email notifications aggregating the data from all the participating systems. We want to reduce developer load, and make it easier to discover and analyze kernel testing results.

Join this session to find out how far we've got, how our dashboard and email notifications look, how we're pulling this off, what the protocol and the schema is like, and how to start sending your reports or join the development. 


Schedule: https://sched.co/gmMt
Captions: 
	00:00:01,120 --> 00:00:07,040
my name is nikolai kondrershov i'm

00:00:03,439 --> 00:00:10,240
spb nick on preno twitter

00:00:07,040 --> 00:00:12,719
github gitlab well everywhere else

00:00:10,240 --> 00:00:14,960
i'm a software engineer at red hat and i

00:00:12,719 --> 00:00:17,680
work on the cgi project which

00:00:14,960 --> 00:00:19,520
stands for continuous kernel integration

00:00:17,680 --> 00:00:22,640
project where we are testing our

00:00:19,520 --> 00:00:24,480
kernels uh red hat kernels as well as

00:00:22,640 --> 00:00:26,800
upstream kernels

00:00:24,480 --> 00:00:27,680
i'm also working with the kernel ci

00:00:26,800 --> 00:00:31,039
project

00:00:27,680 --> 00:00:32,399
who which recently became a part of

00:00:31,039 --> 00:00:34,480
linux foundation

00:00:32,399 --> 00:00:35,440
and i'm a casey idb maintainer and

00:00:34,480 --> 00:00:37,680
developer

00:00:35,440 --> 00:00:40,399
i'm also a digiment maintainer on a

00:00:37,680 --> 00:00:43,600
break right now where i'm working on

00:00:40,399 --> 00:00:45,360
writing drivers for graphics tablets

00:00:43,600 --> 00:00:47,520
i do electronics and embedded as a hobby

00:00:45,360 --> 00:00:49,120
in in free time and i'm from russia

00:00:47,520 --> 00:00:49,840
originally but living in finland right

00:00:49,120 --> 00:00:51,600
now

00:00:49,840 --> 00:00:53,360
i'm going very fast because we only have

00:00:51,600 --> 00:00:55,520
20 minutes

00:00:53,360 --> 00:00:56,719
so open these slides if you would like

00:00:55,520 --> 00:00:58,960
to click the links there are going to be

00:00:56,719 --> 00:01:01,280
some interesting ones

00:00:58,960 --> 00:01:02,719
so as most of you probably know uh there

00:01:01,280 --> 00:01:05,920
is a ton of

00:01:02,719 --> 00:01:08,880
kernel testing systems out there

00:01:05,920 --> 00:01:09,360
uh these are just just a few of them and

00:01:08,880 --> 00:01:12,240
there are

00:01:09,360 --> 00:01:14,000
many more and they're all having their

00:01:12,240 --> 00:01:16,880
own dashboards maintained and

00:01:14,000 --> 00:01:18,400
uh and presented to developers and

00:01:16,880 --> 00:01:20,240
maintainers uh

00:01:18,400 --> 00:01:22,000
and they are all sending their own

00:01:20,240 --> 00:01:23,520
reports to the developers and

00:01:22,000 --> 00:01:25,840
maintainers and

00:01:23,520 --> 00:01:27,520
this is a this is difficult to manage

00:01:25,840 --> 00:01:30,400
for for them

00:01:27,520 --> 00:01:30,640
for the recipients and also it's a lot

00:01:30,400 --> 00:01:33,920
of

00:01:30,640 --> 00:01:37,840
wasted effort so

00:01:33,920 --> 00:01:42,399
about two years ago well actually

00:01:37,840 --> 00:01:45,680
no well 2019 yeah it was in autumn

00:01:42,399 --> 00:01:47,360
we were at uh linux plumbers and after

00:01:45,680 --> 00:01:49,439
that we had a

00:01:47,360 --> 00:01:51,439
sort of a hackfest organized by cti

00:01:49,439 --> 00:01:53,520
where lots of people from

00:01:51,439 --> 00:01:55,920
different companies came and we

00:01:53,520 --> 00:01:57,920
discussed all things kernel testing and

00:01:55,920 --> 00:02:00,560
how to collaborate what we can do to

00:01:57,920 --> 00:02:02,640
improve the situation and

00:02:00,560 --> 00:02:04,960
how to make it less burdensome for

00:02:02,640 --> 00:02:07,200
developers and maintainers

00:02:04,960 --> 00:02:08,080
and right there we came up with the idea

00:02:07,200 --> 00:02:10,879
to come

00:02:08,080 --> 00:02:12,319
to start at the end of the pipeline and

00:02:10,879 --> 00:02:14,959
try to join them

00:02:12,319 --> 00:02:16,000
namely at the reporting stage where we

00:02:14,959 --> 00:02:18,480
would try to get

00:02:16,000 --> 00:02:20,080
everyone's testing results and put them

00:02:18,480 --> 00:02:22,160
into a single database so that we can

00:02:20,080 --> 00:02:24,080
have a single dashboard and a

00:02:22,160 --> 00:02:25,200
single notification message coming out

00:02:24,080 --> 00:02:28,800
to developers and

00:02:25,200 --> 00:02:30,080
with the results so at that moment kcidb

00:02:28,800 --> 00:02:33,280
was born and we started

00:02:30,080 --> 00:02:33,280
hacking on it right away

00:02:33,440 --> 00:02:39,760
and one of the primary decisions was

00:02:37,360 --> 00:02:40,959
to start getting data as soon as

00:02:39,760 --> 00:02:42,720
possible

00:02:40,959 --> 00:02:45,120
not thinking so much about what the

00:02:42,720 --> 00:02:47,280
schema should be or how to express

00:02:45,120 --> 00:02:49,200
everything that we want ahead of time

00:02:47,280 --> 00:02:50,640
so get the data first whatever data we

00:02:49,200 --> 00:02:52,720
have then

00:02:50,640 --> 00:02:53,920
see what patterns emerge formalize it

00:02:52,720 --> 00:02:56,959
make the schema

00:02:53,920 --> 00:02:57,680
and then repeat and we are currently on

00:02:56,959 --> 00:02:59,280
our

00:02:57,680 --> 00:03:01,519
third version of the schema and there is

00:02:59,280 --> 00:03:03,760
no end inside

00:03:01,519 --> 00:03:05,280
uh you've probably all seen this cartoon

00:03:03,760 --> 00:03:07,519
uh this comic

00:03:05,280 --> 00:03:10,879
from this kcd we're discussing i'm sorry

00:03:07,519 --> 00:03:10,879
my dog is making some noise

00:03:11,200 --> 00:03:16,840
so probably seen this um comic

00:03:14,239 --> 00:03:18,480
that talks about the proliferation of

00:03:16,840 --> 00:03:20,800
standards

00:03:18,480 --> 00:03:22,720
and it's it's it's there's a danger of

00:03:20,800 --> 00:03:24,480
that happening but actually kcidb is the

00:03:22,720 --> 00:03:27,519
first standard to try to you know

00:03:24,480 --> 00:03:28,560
to to unify uh reporting for kernel

00:03:27,519 --> 00:03:30,400
tests

00:03:28,560 --> 00:03:32,159
so we hope we'll be able to keep it at

00:03:30,400 --> 00:03:35,280
one but probably

00:03:32,159 --> 00:03:36,959
that's futile let's see uh so

00:03:35,280 --> 00:03:38,400
the bigger picture of kernel side the

00:03:36,959 --> 00:03:41,760
project is uh

00:03:38,400 --> 00:03:43,920
that for a long time kernel ci has been

00:03:41,760 --> 00:03:46,720
creating a testing system which other

00:03:43,920 --> 00:03:50,480
people can deploy on their hardware

00:03:46,720 --> 00:03:54,000
and there is a number of labs that are

00:03:50,480 --> 00:03:56,080
using it and running tests when

00:03:54,000 --> 00:03:57,200
when commits are made into kernel

00:03:56,080 --> 00:03:59,920
repositories and

00:03:57,200 --> 00:04:00,640
this is mostly implemented as lava labs

00:03:59,920 --> 00:04:02,319
but although

00:04:00,640 --> 00:04:04,959
there are also custom labs reporting

00:04:02,319 --> 00:04:08,480
their results and taking tests to run

00:04:04,959 --> 00:04:12,159
uh currently uh kernel ci is starting to

00:04:08,480 --> 00:04:14,159
to run actual tests like above the

00:04:12,159 --> 00:04:15,680
boot testing and planning to implement

00:04:14,159 --> 00:04:17,840
static checks

00:04:15,680 --> 00:04:18,799
and this is all done in kernel ci back

00:04:17,840 --> 00:04:21,120
hand

00:04:18,799 --> 00:04:23,680
but since we started kcib kernel ci is

00:04:21,120 --> 00:04:24,560
also sending data to kcidb to the common

00:04:23,680 --> 00:04:26,639
database

00:04:24,560 --> 00:04:30,560
as well as a number of other testing

00:04:26,639 --> 00:04:34,320
systems including cti where i'm working

00:04:30,560 --> 00:04:34,800
gentle g kernel ci arm and google sees

00:04:34,320 --> 00:04:37,199
bot

00:04:34,800 --> 00:04:38,639
with others working on joining actually

00:04:37,199 --> 00:04:42,400
lenara tax suite

00:04:38,639 --> 00:04:44,800
is almost ready to switch to production

00:04:42,400 --> 00:04:45,680
uh and others at various stages of

00:04:44,800 --> 00:04:48,880
interest or

00:04:45,680 --> 00:04:51,680
consideration and working with us

00:04:48,880 --> 00:04:53,600
so the smaller picture of uh kcidb is

00:04:51,680 --> 00:04:56,880
rather simple

00:04:53,600 --> 00:04:59,040
every submitter just generates json

00:04:56,880 --> 00:05:00,240
sends it to our message queue which gets

00:04:59,040 --> 00:05:02,880
delivered to the

00:05:00,240 --> 00:05:03,680
database which is currently bigquery but

00:05:02,880 --> 00:05:06,320
we are not

00:05:03,680 --> 00:05:08,000
not really tied to that very much and we

00:05:06,320 --> 00:05:10,560
have a dashboard which

00:05:08,000 --> 00:05:12,080
which accesses the database plus there

00:05:10,560 --> 00:05:12,960
is a subscription system looking at

00:05:12,080 --> 00:05:16,240
what's coming in

00:05:12,960 --> 00:05:18,000
and sending out the notifications so we

00:05:16,240 --> 00:05:20,880
have a bunch of command line tools

00:05:18,000 --> 00:05:23,280
uh we have a python 3 library a decline

00:05:20,880 --> 00:05:26,400
for submission and query in the database

00:05:23,280 --> 00:05:28,000
basic query and a normal submission we

00:05:26,400 --> 00:05:29,280
have a prototype dashboard made with

00:05:28,000 --> 00:05:32,000
grafana

00:05:29,280 --> 00:05:32,800
they have a proof of concept email

00:05:32,000 --> 00:05:34,880
reports or

00:05:32,800 --> 00:05:36,560
notifications as i would call them sent

00:05:34,880 --> 00:05:38,160
to our development mail list

00:05:36,560 --> 00:05:40,320
which you can see there are links down

00:05:38,160 --> 00:05:41,759
here if you if you'd like

00:05:40,320 --> 00:05:44,160
they're all available you can see

00:05:41,759 --> 00:05:46,000
everything that's linked here

00:05:44,160 --> 00:05:48,240
uh there is also an alternative

00:05:46,000 --> 00:05:50,639
implementation being done at cti

00:05:48,240 --> 00:05:53,039
for managing the data storing it and

00:05:50,639 --> 00:05:55,840
displaying it and the dashboard

00:05:53,039 --> 00:05:57,520
and additionally cgi is using them is

00:05:55,840 --> 00:05:59,280
based on their own

00:05:57,520 --> 00:06:01,440
internal communication about results

00:05:59,280 --> 00:06:03,120
from kcib schema as well so

00:06:01,440 --> 00:06:04,560
we are stretching it in that direction

00:06:03,120 --> 00:06:07,039
as well

00:06:04,560 --> 00:06:08,720
so the schema looks like uh just

00:06:07,039 --> 00:06:10,960
basically a json object with uh

00:06:08,720 --> 00:06:13,440
three arrays uh containing revisions

00:06:10,960 --> 00:06:15,759
bills and tests respectively

00:06:13,440 --> 00:06:17,199
and you can send them in any combination

00:06:15,759 --> 00:06:19,039
in any order

00:06:17,199 --> 00:06:20,639
first revision and b in the build and

00:06:19,039 --> 00:06:22,319
then uh some other revision and more

00:06:20,639 --> 00:06:23,840
bills for both of those and then some

00:06:22,319 --> 00:06:25,600
tests for the first revision

00:06:23,840 --> 00:06:27,600
and the same submission and then another

00:06:25,600 --> 00:06:30,800
one like adding some more

00:06:27,600 --> 00:06:33,919
this doesn't matter how you send them uh

00:06:30,800 --> 00:06:35,199
but the data becomes like is processed

00:06:33,919 --> 00:06:36,319
and then becomes available in the

00:06:35,199 --> 00:06:39,199
dashboard only

00:06:36,319 --> 00:06:40,720
only after you've provided all the all

00:06:39,199 --> 00:06:44,400
the parts of it

00:06:40,720 --> 00:06:45,600
and it's consistent so uh we just use a

00:06:44,400 --> 00:06:48,240
basic system

00:06:45,600 --> 00:06:49,759
where for the most part uh the submitter

00:06:48,240 --> 00:06:51,440
provides the id because this is a

00:06:49,759 --> 00:06:53,039
distributed database we don't

00:06:51,440 --> 00:06:55,120
maintain our own ids we don't want to

00:06:53,039 --> 00:06:57,039
have the callbacks like i want to create

00:06:55,120 --> 00:06:58,639
an object give me an id and then i

00:06:57,039 --> 00:07:00,639
get given an id and then i have to

00:06:58,639 --> 00:07:02,319
submit it with this id etc

00:07:00,639 --> 00:07:04,319
no we just let the submitters generate

00:07:02,319 --> 00:07:06,960
their own ids give them a name

00:07:04,319 --> 00:07:08,080
namespace with their submitter name and

00:07:06,960 --> 00:07:09,919
off they go

00:07:08,080 --> 00:07:12,000
at the moment uh revisions are different

00:07:09,919 --> 00:07:13,840
because we use the commit hash plus the

00:07:12,000 --> 00:07:15,039
sometimes patch set hash to identify

00:07:13,840 --> 00:07:16,720
revisions but

00:07:15,039 --> 00:07:18,639
let's see how it goes later in the

00:07:16,720 --> 00:07:21,759
presentation

00:07:18,639 --> 00:07:23,759
uh we also have a field for the origin

00:07:21,759 --> 00:07:25,599
who submitted the dci system which

00:07:23,759 --> 00:07:27,360
submitted your the report

00:07:25,599 --> 00:07:29,120
and this is actually all the fields that

00:07:27,360 --> 00:07:30,479
are required for report to be accepted

00:07:29,120 --> 00:07:32,960
and validated

00:07:30,479 --> 00:07:34,319
you can start with just this to send

00:07:32,960 --> 00:07:37,360
your data

00:07:34,319 --> 00:07:37,680
uh and as you build up your interface to

00:07:37,360 --> 00:07:39,599
the

00:07:37,680 --> 00:07:41,520
to the kcidb submission you can start

00:07:39,599 --> 00:07:44,080
adding other fields

00:07:41,520 --> 00:07:45,520
and then some more and some more as you

00:07:44,080 --> 00:07:46,879
feel comfortable

00:07:45,520 --> 00:07:48,960
these are all of course not all the

00:07:46,879 --> 00:07:51,199
fields and uh

00:07:48,960 --> 00:07:54,000
speaking of that we also have a special

00:07:51,199 --> 00:07:55,840
misc field standing for miscellaneous

00:07:54,000 --> 00:07:57,039
for every object where you can put

00:07:55,840 --> 00:07:59,599
whatever you want

00:07:57,039 --> 00:08:01,120
you can use that for debugging but but

00:07:59,599 --> 00:08:02,800
also

00:08:01,120 --> 00:08:04,879
more importantly you can use that for

00:08:02,800 --> 00:08:06,319
stuff in data that you cannot put into

00:08:04,879 --> 00:08:07,440
other fields right now because they are

00:08:06,319 --> 00:08:09,680
not defined there is no

00:08:07,440 --> 00:08:12,319
no feel for your data you can start

00:08:09,680 --> 00:08:14,720
pushing this data immediately and

00:08:12,319 --> 00:08:15,919
get it delivered to developers while in

00:08:14,720 --> 00:08:17,440
a rather

00:08:15,919 --> 00:08:19,919
not very readable state but still the

00:08:17,440 --> 00:08:21,280
data is there and more importantly

00:08:19,919 --> 00:08:23,280
we get to accumulate the data you

00:08:21,280 --> 00:08:24,080
generate so that we can make our

00:08:23,280 --> 00:08:26,800
decision

00:08:24,080 --> 00:08:27,680
on formalizing it and unifying it with

00:08:26,800 --> 00:08:30,560
others

00:08:27,680 --> 00:08:32,719
based on actual data instead of you know

00:08:30,560 --> 00:08:34,880
prolonged discussions

00:08:32,719 --> 00:08:36,320
so look at all the details at this link

00:08:34,880 --> 00:08:39,360
here this is the

00:08:36,320 --> 00:08:41,919
current schema schema v3 and

00:08:39,360 --> 00:08:44,000
going forward uh all the all the

00:08:41,919 --> 00:08:45,839
submissions that you send

00:08:44,000 --> 00:08:47,279
uh you can keep them at previous

00:08:45,839 --> 00:08:48,080
versions and they will be converted to

00:08:47,279 --> 00:08:50,080
the

00:08:48,080 --> 00:08:51,279
the new version as we upgrade them

00:08:50,080 --> 00:08:53,839
automatically

00:08:51,279 --> 00:08:55,120
most of the time so you can keep using

00:08:53,839 --> 00:08:59,360
one version and

00:08:55,120 --> 00:09:01,680
move at your own pace uh we have a

00:08:59,360 --> 00:09:03,839
database in bigquery and the schema is

00:09:01,680 --> 00:09:07,920
defined in python

00:09:03,839 --> 00:09:08,320
uh we keep one data set and we query per

00:09:07,920 --> 00:09:11,360
the

00:09:08,320 --> 00:09:15,279
i o schema and the current one is

00:09:11,360 --> 00:09:17,440
well named kernel cio4 our data set

00:09:15,279 --> 00:09:18,480
is open to anyone on the internet

00:09:17,440 --> 00:09:20,959
currently anyone

00:09:18,480 --> 00:09:21,680
authenticated with google and you can go

00:09:20,959 --> 00:09:23,760
to

00:09:21,680 --> 00:09:25,360
bigquery console like by clicking this

00:09:23,760 --> 00:09:27,839
link for example and explore the

00:09:25,360 --> 00:09:30,000
database schema as well as query various

00:09:27,839 --> 00:09:32,800
data from the database

00:09:30,000 --> 00:09:35,040
uh like the revision statistics the

00:09:32,800 --> 00:09:38,720
build statistics or the

00:09:35,040 --> 00:09:42,160
test statistics uh and you can also use

00:09:38,720 --> 00:09:44,160
tools like google data studio to

00:09:42,160 --> 00:09:45,839
make your graphs or whatever you want

00:09:44,160 --> 00:09:48,160
like whatever you want to dig

00:09:45,839 --> 00:09:50,160
our database for this is there these are

00:09:48,160 --> 00:09:50,880
graphs for the previous for the queries

00:09:50,160 --> 00:09:53,600
that you saw

00:09:50,880 --> 00:09:54,800
on the previous screens so here's an

00:09:53,600 --> 00:09:58,399
example how

00:09:54,800 --> 00:09:59,839
how data goes from the from a source to

00:09:58,399 --> 00:10:00,959
our database for example here's a

00:09:59,839 --> 00:10:04,720
revision

00:10:00,959 --> 00:10:06,800
uh published on kernel.org

00:10:04,720 --> 00:10:08,959
here is this revision the same revision

00:10:06,800 --> 00:10:11,680
on kernel ci dashboard

00:10:08,959 --> 00:10:12,720
and in the kernel ci system native tests

00:10:11,680 --> 00:10:14,720
running there

00:10:12,720 --> 00:10:16,560
and here is the same revision at cti

00:10:14,720 --> 00:10:18,640
dashboard

00:10:16,560 --> 00:10:20,560
and here is an example of the json

00:10:18,640 --> 00:10:23,760
that's generated by

00:10:20,560 --> 00:10:25,760
red hat in this case cki and here is

00:10:23,760 --> 00:10:26,320
this both of those revisions and their

00:10:25,760 --> 00:10:28,480
builds

00:10:26,320 --> 00:10:30,079
uh in the in the dashboard here's the

00:10:28,480 --> 00:10:31,519
red hat builds and there's this kernel

00:10:30,079 --> 00:10:34,959
ci builds

00:10:31,519 --> 00:10:36,959
they all joined here the results

00:10:34,959 --> 00:10:38,720
another example is a build that's been

00:10:36,959 --> 00:10:41,519
made by kernel ci

00:10:38,720 --> 00:10:42,560
and here's the json for it and here's

00:10:41,519 --> 00:10:44,240
the dashboard

00:10:42,560 --> 00:10:46,160
with the build and the tests that were

00:10:44,240 --> 00:10:48,720
running for this build and

00:10:46,160 --> 00:10:49,200
at last the test example again in kernel

00:10:48,720 --> 00:10:52,560
ci

00:10:49,200 --> 00:10:55,360
native and there is the

00:10:52,560 --> 00:10:56,959
json for it and the dashboard view for

00:10:55,360 --> 00:10:59,120
it

00:10:56,959 --> 00:11:00,079
uh and the same yeah it's another test

00:10:59,120 --> 00:11:03,279
from

00:11:00,079 --> 00:11:06,800
cti also the dashboard json

00:11:03,279 --> 00:11:09,200
and dashboard for kcidb again

00:11:06,800 --> 00:11:10,560
so of course the main purpose of this

00:11:09,200 --> 00:11:12,320
exercise is to get

00:11:10,560 --> 00:11:14,240
to get bring the data together so we

00:11:12,320 --> 00:11:16,959
have to work on correlation we have some

00:11:14,240 --> 00:11:17,440
something done in that direction but we

00:11:16,959 --> 00:11:20,240
will

00:11:17,440 --> 00:11:22,000
need to work some more of course there's

00:11:20,240 --> 00:11:25,120
lots to do

00:11:22,000 --> 00:11:26,959
so far we have revision ids

00:11:25,120 --> 00:11:28,959
that are constructed from the commit

00:11:26,959 --> 00:11:31,040
hash or commit hash plus

00:11:28,959 --> 00:11:32,240
a hash of the patches that were put on

00:11:31,040 --> 00:11:34,079
top

00:11:32,240 --> 00:11:35,519
like for example distribution patches or

00:11:34,079 --> 00:11:38,160
patches that were

00:11:35,519 --> 00:11:39,600
downloaded from from a mail list archive

00:11:38,160 --> 00:11:42,880
or it's not something like that

00:11:39,600 --> 00:11:44,640
it looks like this uh here's an example

00:11:42,880 --> 00:11:47,760
of how you can get

00:11:44,640 --> 00:11:49,680
a patch set generated using shell or

00:11:47,760 --> 00:11:51,519
patch set hash generated using shell or

00:11:49,680 --> 00:11:53,200
python it's rather simple

00:11:51,519 --> 00:11:54,639
of course it doesn't work for all the

00:11:53,200 --> 00:11:56,160
cases and we'll be working on

00:11:54,639 --> 00:11:58,240
formalizing it more but this is good for

00:11:56,160 --> 00:12:00,399
the start

00:11:58,240 --> 00:12:01,600
we also maintain proof of concept test

00:12:00,399 --> 00:12:03,760
catalog

00:12:01,600 --> 00:12:05,120
for example here is the case of test

00:12:03,760 --> 00:12:07,680
entry

00:12:05,120 --> 00:12:08,320
we just ask you to define the name for

00:12:07,680 --> 00:12:10,959
this test

00:12:08,320 --> 00:12:12,639
that we can all use so that we can

00:12:10,959 --> 00:12:15,680
correlate the results

00:12:12,639 --> 00:12:17,440
uh yeah we define the

00:12:15,680 --> 00:12:19,040
uh description for this test and the

00:12:17,440 --> 00:12:21,440
homepage so that we can make sure that

00:12:19,040 --> 00:12:25,440
we are talking about the same test

00:12:21,440 --> 00:12:27,279
uh and in in json this name is used in

00:12:25,440 --> 00:12:31,120
the tests like this

00:12:27,279 --> 00:12:33,040
and the dashboard is visible here uh

00:12:31,120 --> 00:12:34,560
further on uh you don't have to limit

00:12:33,040 --> 00:12:35,839
yourself to just the name of the test

00:12:34,560 --> 00:12:38,880
suite

00:12:35,839 --> 00:12:41,120
you can also specify a specific test and

00:12:38,880 --> 00:12:43,519
report them all separately like arm does

00:12:41,120 --> 00:12:46,320
for ltp results they go all the way to

00:12:43,519 --> 00:12:49,120
all the details about ltp test runs

00:12:46,320 --> 00:12:51,040
and you can report your your details

00:12:49,120 --> 00:12:52,959
this way

00:12:51,040 --> 00:12:54,560
uh you can also describe your

00:12:52,959 --> 00:12:55,440
environment but at the moment this is

00:12:54,560 --> 00:12:56,959
not formalized

00:12:55,440 --> 00:12:58,399
there's just a description field like

00:12:56,959 --> 00:12:59,920
human readable description and the

00:12:58,399 --> 00:13:00,240
miscellaneous field again where you can

00:12:59,920 --> 00:13:02,560
put

00:13:00,240 --> 00:13:03,680
your stuff we uh we still have to have

00:13:02,560 --> 00:13:05,680
to get there

00:13:03,680 --> 00:13:07,120
uh describing environments in details

00:13:05,680 --> 00:13:10,720
like cpu

00:13:07,120 --> 00:13:12,639
ram and everything so the subscription

00:13:10,720 --> 00:13:16,000
system

00:13:12,639 --> 00:13:16,720
is basically at the moment is python

00:13:16,000 --> 00:13:18,320
modules

00:13:16,720 --> 00:13:20,800
that you create when you want to

00:13:18,320 --> 00:13:24,480
subscribe with our help of course

00:13:20,800 --> 00:13:26,800
uh you just write a python module which

00:13:24,480 --> 00:13:28,320
gets an object that's that's that is

00:13:26,800 --> 00:13:29,360
incoming into the database or was

00:13:28,320 --> 00:13:31,440
changed

00:13:29,360 --> 00:13:32,639
in the database and you can access its

00:13:31,440 --> 00:13:35,040
fields and

00:13:32,639 --> 00:13:36,480
filter by for example repository your

00:13:35,040 --> 00:13:38,800
branch in that repository

00:13:36,480 --> 00:13:40,240
particular tests or architecture

00:13:38,800 --> 00:13:41,600
whatever you want and then decide

00:13:40,240 --> 00:13:43,600
whether you want to message about this

00:13:41,600 --> 00:13:46,720
or not and where to send it

00:13:43,600 --> 00:13:48,079
a subscription for a proof of concept

00:13:46,720 --> 00:13:50,480
subscription for stable

00:13:48,079 --> 00:13:53,600
repositories looks like this this is a

00:13:50,480 --> 00:13:55,920
complete subscription at the moment

00:13:53,600 --> 00:13:58,320
and a message can look like this for

00:13:55,920 --> 00:14:00,480
example here's the

00:13:58,320 --> 00:14:01,360
total overview of the status and the

00:14:00,480 --> 00:14:04,959
revision rather

00:14:01,360 --> 00:14:06,639
match managed to submerge it or not

00:14:04,959 --> 00:14:08,000
uh details on the revision where it came

00:14:06,639 --> 00:14:09,760
from uh

00:14:08,000 --> 00:14:11,760
overview of the bills here are the

00:14:09,760 --> 00:14:13,600
kernel ci bills around the cki bills and

00:14:11,760 --> 00:14:16,639
the same message

00:14:13,600 --> 00:14:17,120
we see for example the tests from kernel

00:14:16,639 --> 00:14:19,360
ci

00:14:17,120 --> 00:14:21,519
bunch of them there's many more and a

00:14:19,360 --> 00:14:24,959
bunch of tests from cti for the same

00:14:21,519 --> 00:14:27,920
the same revision so to submit

00:14:24,959 --> 00:14:30,000
uh the data to casey idb you can use the

00:14:27,920 --> 00:14:32,399
command line tool

00:14:30,000 --> 00:14:34,399
just pipe json into it and it should

00:14:32,399 --> 00:14:37,519
match the schema of course

00:14:34,399 --> 00:14:40,720
or you can use python interface which is

00:14:37,519 --> 00:14:41,839
almost equally as easy here is the

00:14:40,720 --> 00:14:44,480
screenshot of

00:14:41,839 --> 00:14:46,399
complete source for the current kernel

00:14:44,480 --> 00:14:49,600
ci interface to kcidb

00:14:46,399 --> 00:14:52,240
that comes up at 265 lines

00:14:49,600 --> 00:14:53,760
us well there's of course hooks in other

00:14:52,240 --> 00:14:58,079
other places but this is the

00:14:53,760 --> 00:15:00,480
the mid part uh here's an example of uh

00:14:58,079 --> 00:15:03,440
gen 2g kernel ci interface like under

00:15:00,480 --> 00:15:06,480
200 lines of code python and shell

00:15:03,440 --> 00:15:09,120
and another one written in go uh

00:15:06,480 --> 00:15:10,560
under 200 lines as well for the most

00:15:09,120 --> 00:15:11,839
part there is a separate file with the

00:15:10,560 --> 00:15:13,279
schema but it's just

00:15:11,839 --> 00:15:15,120
you know technical details it's

00:15:13,279 --> 00:15:17,600
generated uh

00:15:15,120 --> 00:15:19,199
this this case uh talks directly to the

00:15:17,600 --> 00:15:22,480
to the google cloud using the

00:15:19,199 --> 00:15:24,160
um message queue interface uh so

00:15:22,480 --> 00:15:26,320
that is also available if you have

00:15:24,160 --> 00:15:26,959
particular requirements although it's of

00:15:26,320 --> 00:15:30,639
course

00:15:26,959 --> 00:15:31,199
less stable regarding the changes future

00:15:30,639 --> 00:15:32,720
changes

00:15:31,199 --> 00:15:35,440
we have a submission how to which you

00:15:32,720 --> 00:15:35,440
can take a look at

00:15:35,759 --> 00:15:40,160
and when you start submitting the data

00:15:38,639 --> 00:15:41,920
they give you

00:15:40,160 --> 00:15:44,079
credentials and parameters to submit

00:15:41,920 --> 00:15:45,519
into a special place called playground

00:15:44,079 --> 00:15:47,360
basically you can do anything you want

00:15:45,519 --> 00:15:49,040
there without fear of breaking anything

00:15:47,360 --> 00:15:51,120
and experiment with sending data here's

00:15:49,040 --> 00:15:53,199
the today's screenshot

00:15:51,120 --> 00:15:54,480
of tax suite sending their data there

00:15:53,199 --> 00:15:55,600
and they are

00:15:54,480 --> 00:15:58,480
i think they are ready to go to

00:15:55,600 --> 00:16:00,399
production just need to do the switch

00:15:58,480 --> 00:16:01,920
so you get a free like a place to to

00:16:00,399 --> 00:16:04,160
play freely uh

00:16:01,920 --> 00:16:05,199
and experiment and see how your system

00:16:04,160 --> 00:16:09,040
goes submit

00:16:05,199 --> 00:16:11,759
automatically manually whatever you want

00:16:09,040 --> 00:16:14,079
all of that of the above above was about

00:16:11,759 --> 00:16:18,720
the current release kci dbv8 and for

00:16:14,079 --> 00:16:21,759
v9 we're going to be doing many changes

00:16:18,720 --> 00:16:24,320
most of them concerning

00:16:21,759 --> 00:16:25,839
system and our primary target for that

00:16:24,320 --> 00:16:27,120
is reaching actual developers and

00:16:25,839 --> 00:16:31,120
maintainers who

00:16:27,120 --> 00:16:33,279
doing most of our work towards that

00:16:31,120 --> 00:16:36,000
among the changes is the uh we're

00:16:33,279 --> 00:16:38,000
renaming revision object to check out

00:16:36,000 --> 00:16:39,519
to represent the data better because it

00:16:38,000 --> 00:16:43,680
matches better what we are sending

00:16:39,519 --> 00:16:45,279
its revision was not granular enough and

00:16:43,680 --> 00:16:46,240
check out much is better what we are

00:16:45,279 --> 00:16:48,079
doing

00:16:46,240 --> 00:16:50,959
so when you when you check out the

00:16:48,079 --> 00:16:53,920
kernel you can submit an object for that

00:16:50,959 --> 00:16:55,680
like when you reference from the build

00:16:53,920 --> 00:16:59,120
what you actually build

00:16:55,680 --> 00:17:01,360
uh then we are adding support for

00:16:59,120 --> 00:17:02,800
log excerpts so that like just just a

00:17:01,360 --> 00:17:05,439
piece of the log

00:17:02,800 --> 00:17:06,720
that exposes the problem about a build

00:17:05,439 --> 00:17:10,480
or a checkout or a test

00:17:06,720 --> 00:17:12,160
and right now we just have log url

00:17:10,480 --> 00:17:14,400
which you can use to link to your log

00:17:12,160 --> 00:17:15,520
hosted somewhere that doesn't work for

00:17:14,400 --> 00:17:18,160
everybody

00:17:15,520 --> 00:17:19,280
and so we're adding log excerpt fields

00:17:18,160 --> 00:17:21,679
to

00:17:19,280 --> 00:17:23,679
to store just a particular piece of the

00:17:21,679 --> 00:17:25,760
load that is relevant to the issue

00:17:23,679 --> 00:17:27,439
that will come in useful for intel zero

00:17:25,760 --> 00:17:31,039
day and also

00:17:27,439 --> 00:17:33,039
uh this way we can directly paste the

00:17:31,039 --> 00:17:36,080
log except into the reports or the

00:17:33,039 --> 00:17:38,960
dashboard if if you had space

00:17:36,080 --> 00:17:39,840
uh additionally right now our database

00:17:38,960 --> 00:17:42,080
backend is

00:17:39,840 --> 00:17:44,240
google bigquery but we've also added the

00:17:42,080 --> 00:17:45,919
sqlite backend for testing and also

00:17:44,240 --> 00:17:48,720
implementing some you know

00:17:45,919 --> 00:17:50,880
mostly testing features and that will

00:17:48,720 --> 00:17:52,480
let you experiment without having access

00:17:50,880 --> 00:17:54,799
to google bigquery or being online

00:17:52,480 --> 00:17:58,720
offline or things like that

00:17:54,799 --> 00:18:01,200
uh we are expanding our object relation

00:17:58,720 --> 00:18:03,360
relational mapping for the database so

00:18:01,200 --> 00:18:04,480
that our subscriptions can also explore

00:18:03,360 --> 00:18:07,280
more data and

00:18:04,480 --> 00:18:10,080
be more flexible and present more you

00:18:07,280 --> 00:18:12,400
know readable reports and notifications

00:18:10,080 --> 00:18:13,440
uh we're adding the ability to extract

00:18:12,400 --> 00:18:16,000
the

00:18:13,440 --> 00:18:16,480
the normalized data from from the from

00:18:16,000 --> 00:18:18,240
the

00:18:16,480 --> 00:18:20,799
from the reports we're using distributed

00:18:18,240 --> 00:18:22,240
sql database and that means we're using

00:18:20,799 --> 00:18:24,320
the normalized

00:18:22,240 --> 00:18:25,360
schema so this way we can extract the

00:18:24,320 --> 00:18:27,600
data

00:18:25,360 --> 00:18:29,440
more data from it and be more flexible

00:18:27,600 --> 00:18:32,720
so getting a little smarter

00:18:29,440 --> 00:18:35,280
with the notification system uh so

00:18:32,720 --> 00:18:36,480
that release is gonna be um hopefully in

00:18:35,280 --> 00:18:38,799
the spring

00:18:36,480 --> 00:18:40,320
this spring and further on we're

00:18:38,799 --> 00:18:42,400
thinking about implementing

00:18:40,320 --> 00:18:43,919
known issues so that we don't send

00:18:42,400 --> 00:18:46,160
reports of test failures that are

00:18:43,919 --> 00:18:48,480
already known and triaged and uh

00:18:46,160 --> 00:18:49,760
shouldn't bother developers about and

00:18:48,480 --> 00:18:51,679
the same with the builds

00:18:49,760 --> 00:18:53,360
hopefully uh we would like to

00:18:51,679 --> 00:18:55,280
accommodate the static checks and

00:18:53,360 --> 00:18:57,440
linters as well for that we will need a

00:18:55,280 --> 00:19:01,120
separate table and object

00:18:57,440 --> 00:19:02,960
uh further on the talking back to the

00:19:01,120 --> 00:19:05,200
going back to the environments they'll

00:19:02,960 --> 00:19:06,000
need to somehow be able to correlate

00:19:05,200 --> 00:19:07,760
between

00:19:06,000 --> 00:19:09,200
similar environments in the database

00:19:07,760 --> 00:19:09,520
because we can say like okay did this

00:19:09,200 --> 00:19:12,000
stay

00:19:09,520 --> 00:19:12,559
test in this like in a similar

00:19:12,000 --> 00:19:15,039
environment

00:19:12,559 --> 00:19:16,480
produce the same results or not and we

00:19:15,039 --> 00:19:17,840
have some ideas how to implement that

00:19:16,480 --> 00:19:21,520
but nothing concrete

00:19:17,840 --> 00:19:23,679
for now finally we would like to do

00:19:21,520 --> 00:19:24,960
dissections and benchmarks of course who

00:19:23,679 --> 00:19:28,320
wouldn't

00:19:24,960 --> 00:19:29,520
and uh here are our main repos in the

00:19:28,320 --> 00:19:32,960
kernel site

00:19:29,520 --> 00:19:34,000
project on github you can click the link

00:19:32,960 --> 00:19:35,440
to find them

00:19:34,000 --> 00:19:37,520
there are of course other ripples if you

00:19:35,440 --> 00:19:40,799
are interested in kerosene

00:19:37,520 --> 00:19:42,320
we have good first issues tagged there

00:19:40,799 --> 00:19:45,039
so if you're interested to help

00:19:42,320 --> 00:19:46,960
we'll be more than glad so go there and

00:19:45,039 --> 00:19:49,520
check out the issues

00:19:46,960 --> 00:19:50,400
uh we have a mail list you can send

00:19:49,520 --> 00:19:53,440
their director

00:19:50,400 --> 00:19:56,720
directly or subscribe and of course we

00:19:53,440 --> 00:20:01,200
have an rc channel on freenode

00:19:56,720 --> 00:20:04,799
and that's it thank you

00:20:01,200 --> 00:20:09,919
oh actually there is one from haddo

00:20:04,799 --> 00:20:14,559
thank you for what are you going to use

00:20:09,919 --> 00:20:14,559
11 stain distance

00:20:15,520 --> 00:20:20,000
yeah it's it's just a wild idea so if

00:20:18,640 --> 00:20:22,559
if i understand it correctly the

00:20:20,000 --> 00:20:26,880
levenshtein distance is used to

00:20:22,559 --> 00:20:30,320
describe similarity between two texts

00:20:26,880 --> 00:20:31,600
let's say so you have two texts and you

00:20:30,320 --> 00:20:33,120
can apply the

00:20:31,600 --> 00:20:34,400
levenshtein distance function on that

00:20:33,120 --> 00:20:36,400
and that will give you a certain number

00:20:34,400 --> 00:20:39,120
which says how similar they are

00:20:36,400 --> 00:20:40,720
that's my understanding so we have to

00:20:39,120 --> 00:20:42,480
have to compare our environment somehow

00:20:40,720 --> 00:20:43,520
so my idea was like okay maybe we can

00:20:42,480 --> 00:20:45,520
just

00:20:43,520 --> 00:20:47,520
dump json for both of the environments

00:20:45,520 --> 00:20:50,080
and

00:20:47,520 --> 00:20:51,280
do uh levenshtein distance on those and

00:20:50,080 --> 00:20:53,760
be able to say

00:20:51,280 --> 00:20:55,520
how close they are that's just just the

00:20:53,760 --> 00:20:56,880
wild idea maybe there is some certain

00:20:55,520 --> 00:20:59,520
function which works for

00:20:56,880 --> 00:21:00,400
arbitrary but data structures like that

00:20:59,520 --> 00:21:02,960
or

00:21:00,400 --> 00:21:04,480
maybe we can just do that it's just as i

00:21:02,960 --> 00:21:06,559
described something like that we need

00:21:04,480 --> 00:21:09,440
something to be able to

00:21:06,559 --> 00:21:11,120
compare those environments and uh i

00:21:09,440 --> 00:21:12,000
don't think we'll be able to you know

00:21:11,120 --> 00:21:14,400
keep the

00:21:12,000 --> 00:21:15,360
structure of those like the data

00:21:14,400 --> 00:21:19,520
structure

00:21:15,360 --> 00:21:21,280
the same and unmoving and uniform across

00:21:19,520 --> 00:21:22,799
all the submitters because some

00:21:21,280 --> 00:21:25,200
submitters have some data some other

00:21:22,799 --> 00:21:27,440
submitters have other data it's like

00:21:25,200 --> 00:21:28,640
it's always different so we have to come

00:21:27,440 --> 00:21:31,280
up with some

00:21:28,640 --> 00:21:32,480
fluid methods to compare those roughly

00:21:31,280 --> 00:21:35,360
it doesn't have to be perfect

00:21:32,480 --> 00:21:37,919
just give you a sense of how similar the

00:21:35,360 --> 00:21:41,360
test environments are

00:21:37,919 --> 00:21:41,840
actually there is a last-minute question

00:21:41,360 --> 00:21:45,679
from

00:21:41,840 --> 00:21:50,000
santiago have any tooling and

00:21:45,679 --> 00:21:50,799
lci core to serve to submit data from a

00:21:50,000 --> 00:21:55,679
local

00:21:50,799 --> 00:21:55,679
currency instance to kcidb

00:21:57,840 --> 00:22:04,320
uh if you mean you have your own

00:22:01,039 --> 00:22:07,919
independent kernel cia instance right

00:22:04,320 --> 00:22:11,039
uh well i assume that's yeah okay

00:22:07,919 --> 00:22:16,480
so the support

00:22:11,039 --> 00:22:18,799
for sending to kcidba i think is merged

00:22:16,480 --> 00:22:20,000
so if you'd like to send your data from

00:22:18,799 --> 00:22:22,960
your local instance

00:22:20,000 --> 00:22:25,679
you just need to get the credentials and

00:22:22,960 --> 00:22:29,600
figure out how to set it up

00:22:25,679 --> 00:22:29,600
so i suppose it should work

00:22:29,840 --> 00:22:36,159
we can ask uh guillaume and you know

00:22:33,200 --> 00:22:37,679
at granocia and jump in the channel and

00:22:36,159 --> 00:22:40,640
we can figure it out

00:22:37,679 --> 00:22:42,559
we can give you credentials for

00:22:40,640 --> 00:22:49,520
playground to try it out and

00:22:42,559 --> 00:22:49,520

YouTube URL: https://www.youtube.com/watch?v=czHaqosibY0


