Title: Create your own custom Fedora IoT images - DevConf.CZ 2021
Publication date: 2021-03-17
Playlist: DevConfCZ 2021
Description: 
	Speakers: Martin Sehnoutka, Christian Kellner


Would you like to build your own Fedora IoT image? As you probably already know, Fedora IoT images are immutable system images using the OSTree technology, for Internet of Things and Device Edge ecosystems. Wouldn't it be great if you could create your own customized images and OSTree commits? Fedora Image Builder enables you to do exactly this!

In this talk, you will learn how to use Image Builder to create OSTree images and commits. 


Schedule: https://sched.co/gmMM
Captions: 
	00:00:01,680 --> 00:00:06,720
so as you probably know

00:00:03,040 --> 00:00:08,400
fedora iot images are official federal

00:00:06,720 --> 00:00:11,679
images that use the

00:00:08,400 --> 00:00:14,719
os 3 technology and

00:00:11,679 --> 00:00:17,279
os build composer is a web service

00:00:14,719 --> 00:00:18,720
for building custom operating system

00:00:17,279 --> 00:00:21,760
artifacts

00:00:18,720 --> 00:00:24,800
so this means for example

00:00:21,760 --> 00:00:28,000
virtual machine images but also os

00:00:24,800 --> 00:00:30,240
3 commits and

00:00:28,000 --> 00:00:31,039
you can deploy has built composer

00:00:30,240 --> 00:00:34,160
locally

00:00:31,039 --> 00:00:37,360
and it is built it is based on

00:00:34,160 --> 00:00:38,559
os build which was presented at defconf

00:00:37,360 --> 00:00:43,120
last year

00:00:38,559 --> 00:00:46,399
and you can find a link in these slides

00:00:43,120 --> 00:00:47,120
now i will very briefly introduce oswald

00:00:46,399 --> 00:00:50,399
composer

00:00:47,120 --> 00:00:55,039
itself so as i said it is

00:00:50,399 --> 00:00:59,039
a web service for creating uh customized

00:00:55,039 --> 00:01:03,120
operating system artifacts

00:00:59,039 --> 00:01:06,080
in order to specify the customization

00:01:03,120 --> 00:01:06,479
you need to create something which we

00:01:06,080 --> 00:01:09,920
call

00:01:06,479 --> 00:01:13,600
a blueprint and you can see

00:01:09,920 --> 00:01:16,080
very simple example of a blueprint here

00:01:13,600 --> 00:01:17,119
it's a thumbnail file and in this

00:01:16,080 --> 00:01:20,479
example

00:01:17,119 --> 00:01:24,880
i have created one user with named test

00:01:20,479 --> 00:01:28,320
and password password but you can also

00:01:24,880 --> 00:01:31,360
install additional rpm packages or

00:01:28,320 --> 00:01:36,159
enable systemd services

00:01:31,360 --> 00:01:41,759
and a lot of other customizations

00:01:36,159 --> 00:01:45,439
now a question will talk about os3

00:01:41,759 --> 00:01:45,920
okay what is os3 um the tagline of os3

00:01:45,439 --> 00:01:48,560
is

00:01:45,920 --> 00:01:49,439
like git but for file system trees and

00:01:48,560 --> 00:01:51,439
that means that

00:01:49,439 --> 00:01:53,520
basically all the stuff that is stored

00:01:51,439 --> 00:01:54,240
in a repository is content addressed

00:01:53,520 --> 00:01:58,399
very much like

00:01:54,240 --> 00:02:00,799
it and then a commit

00:01:58,399 --> 00:02:02,399
in such a repository is basically a

00:02:00,799 --> 00:02:05,119
complete file system dream

00:02:02,399 --> 00:02:06,320
so you you basically get to a commit in

00:02:05,119 --> 00:02:08,879
if you have

00:02:06,320 --> 00:02:10,239
a complete file system root file system

00:02:08,879 --> 00:02:11,599
three like your normal fedora

00:02:10,239 --> 00:02:14,000
installation for example

00:02:11,599 --> 00:02:14,959
and then you run or s3 commit command on

00:02:14,000 --> 00:02:16,800
that tree

00:02:14,959 --> 00:02:19,040
and it will put all the files very much

00:02:16,800 --> 00:02:22,480
like a get git commit command

00:02:19,040 --> 00:02:25,599
like put all the files in one you know

00:02:22,480 --> 00:02:27,280
atomic commit that belongs together

00:02:25,599 --> 00:02:30,000
and then you can have multiple ones

00:02:27,280 --> 00:02:32,319
where um

00:02:30,000 --> 00:02:33,440
this previous commit is referred to as a

00:02:32,319 --> 00:02:36,319
parent very much like

00:02:33,440 --> 00:02:36,879
in git as well and then if you want to

00:02:36,319 --> 00:02:38,879
actually

00:02:36,879 --> 00:02:40,800
use such a commit you have to create a

00:02:38,879 --> 00:02:43,920
deployment which is basically

00:02:40,800 --> 00:02:47,120
as in get a check out of that commit

00:02:43,920 --> 00:02:47,840
um plus a kernel that is contained in

00:02:47,120 --> 00:02:50,080
the commit

00:02:47,840 --> 00:02:51,680
and a bootloader but obviously you also

00:02:50,080 --> 00:02:54,720
need some state

00:02:51,680 --> 00:02:58,000
which is contained in

00:02:54,720 --> 00:02:59,760
in etsy and bar and then in this

00:02:58,000 --> 00:03:02,560
checkout that you do to save space

00:02:59,760 --> 00:03:04,239
you don't actually uh as in contrast to

00:03:02,560 --> 00:03:05,120
get you don't actually create copies of

00:03:04,239 --> 00:03:06,879
the files

00:03:05,120 --> 00:03:08,319
but what happens is that you create hard

00:03:06,879 --> 00:03:10,640
links into

00:03:08,319 --> 00:03:11,519
the repository so all the files on your

00:03:10,640 --> 00:03:13,440
file system

00:03:11,519 --> 00:03:16,319
are actually hard links into the same

00:03:13,440 --> 00:03:18,159
file in the repository

00:03:16,319 --> 00:03:20,239
which obviously only makes sense if the

00:03:18,159 --> 00:03:23,360
files in the file system is read only

00:03:20,239 --> 00:03:24,799
otherwise you could you know edit the

00:03:23,360 --> 00:03:26,799
files and then you would host up your

00:03:24,799 --> 00:03:28,879
commit which you don't want to

00:03:26,799 --> 00:03:31,120
so this whole thing basically assumes

00:03:28,879 --> 00:03:34,000
that you have an immutable system image

00:03:31,120 --> 00:03:35,680
that is self-contained and then very

00:03:34,000 --> 00:03:37,519
much as in with git you know if

00:03:35,680 --> 00:03:39,200
two commits contain exactly the same

00:03:37,519 --> 00:03:41,120
file you can share the same file because

00:03:39,200 --> 00:03:42,799
you just get another hard link into you

00:03:41,120 --> 00:03:45,040
know the repository

00:03:42,799 --> 00:03:46,159
and then between deployments what you

00:03:45,040 --> 00:03:49,040
share is

00:03:46,159 --> 00:03:49,280
the state that is in etsy and var and if

00:03:49,040 --> 00:03:50,959
you

00:03:49,280 --> 00:03:52,720
like switch from one commit to another

00:03:50,959 --> 00:03:55,200
level there will be a

00:03:52,720 --> 00:03:56,879
three-way merge between all state and

00:03:55,200 --> 00:03:59,920
see new state and sc and

00:03:56,879 --> 00:04:02,959
the configuration that you have made to

00:03:59,920 --> 00:04:02,959
the files yourself

00:04:03,519 --> 00:04:07,360
one thing that is very cool about rpmo

00:04:05,760 --> 00:04:10,080
s3 is that it allows you to

00:04:07,360 --> 00:04:11,599
layer specific packages on top of your

00:04:10,080 --> 00:04:13,200
base image because you know if your base

00:04:11,599 --> 00:04:15,360
image is immutable

00:04:13,200 --> 00:04:17,120
how do you get additional software on

00:04:15,360 --> 00:04:18,079
top of it well there's this feature of

00:04:17,120 --> 00:04:19,759
layering

00:04:18,079 --> 00:04:21,680
that you know in the newest version of

00:04:19,759 --> 00:04:23,440
rpm s3 can even apply it

00:04:21,680 --> 00:04:24,800
live before you had to actually do a

00:04:23,440 --> 00:04:27,440
reboot

00:04:24,800 --> 00:04:28,320
and obviously the other feature is you

00:04:27,440 --> 00:04:32,000
could use is

00:04:28,320 --> 00:04:33,919
flat packs from containers um

00:04:32,000 --> 00:04:36,240
and the big the two big feature that our

00:04:33,919 --> 00:04:38,639
s3 gives you compared to a traditional

00:04:36,240 --> 00:04:40,479
system is that you have this immutable

00:04:38,639 --> 00:04:42,240
system images and you can do atomic

00:04:40,479 --> 00:04:44,320
updates because

00:04:42,240 --> 00:04:46,320
when you when you basically switch to a

00:04:44,320 --> 00:04:48,000
new commit what will happen is that you

00:04:46,320 --> 00:04:50,479
prepare new deployment

00:04:48,000 --> 00:04:51,520
and then only on reboot when you reboot

00:04:50,479 --> 00:04:53,360
into the new system

00:04:51,520 --> 00:04:55,840
you will actually reboot into this new

00:04:53,360 --> 00:04:57,120
deployment and if something goes wrong

00:04:55,840 --> 00:04:59,600
then you can easily

00:04:57,120 --> 00:05:00,320
just revert to the previous commit to

00:04:59,600 --> 00:05:02,720
the previous

00:05:00,320 --> 00:05:04,080
deployment which is exactly in the state

00:05:02,720 --> 00:05:06,880
as it was before

00:05:04,080 --> 00:05:07,280
and in fedora iot there's even a feature

00:05:06,880 --> 00:05:11,120
called

00:05:07,280 --> 00:05:11,600
green boot which does boot checking so

00:05:11,120 --> 00:05:13,680
like

00:05:11,600 --> 00:05:15,600
you make a new deployment try to put

00:05:13,680 --> 00:05:17,680
into it uh we will try

00:05:15,600 --> 00:05:18,800
three times to put into the system if it

00:05:17,680 --> 00:05:21,039
doesn't work so if

00:05:18,800 --> 00:05:22,400
if the green boot success target from

00:05:21,039 --> 00:05:24,080
system d is not reached

00:05:22,400 --> 00:05:25,600
it will automatically select the

00:05:24,080 --> 00:05:28,720
previous deployment

00:05:25,600 --> 00:05:29,759
as the next boot operation so after on

00:05:28,720 --> 00:05:31,520
the fourth

00:05:29,759 --> 00:05:33,600
would try you will actually end up

00:05:31,520 --> 00:05:36,639
automatically in the previous commit

00:05:33,600 --> 00:05:40,479
if the new commit does not actually

00:05:36,639 --> 00:05:44,560
deploy properly anyway that's

00:05:40,479 --> 00:05:52,560
a brief overview back to martin

00:05:44,560 --> 00:05:56,000
yes thank you and

00:05:52,560 --> 00:05:58,880
so i will show a quick demo

00:05:56,000 --> 00:06:00,080
this demo is a little bit more

00:05:58,880 --> 00:06:03,280
complicated than

00:06:00,080 --> 00:06:06,639
creating a vm image and

00:06:03,280 --> 00:06:10,319
simply booting it because in this

00:06:06,639 --> 00:06:13,600
demo i will create an os3 commit

00:06:10,319 --> 00:06:16,800
and then i will create

00:06:13,600 --> 00:06:21,280
an http server that will serve

00:06:16,800 --> 00:06:24,720
this commit in an os3 repository

00:06:21,280 --> 00:06:29,520
then i will need to download the fedora

00:06:24,720 --> 00:06:32,479
installation iso and run the iso in pmu

00:06:29,520 --> 00:06:34,319
and finally configure anaconda to

00:06:32,479 --> 00:06:38,160
install the commit

00:06:34,319 --> 00:06:42,000
so as you can see the demo will be

00:06:38,160 --> 00:06:45,039
quite long so first of all

00:06:42,000 --> 00:06:48,560
i need to make sure

00:06:45,039 --> 00:06:52,080
that i'm creating the commit

00:06:48,560 --> 00:06:55,680
for the right federal release

00:06:52,080 --> 00:06:58,800
osbourne composer can at the moment

00:06:55,680 --> 00:07:02,400
only create os3 commits for

00:06:58,800 --> 00:07:05,520
the same federal released that

00:07:02,400 --> 00:07:09,520
the host system is using so

00:07:05,520 --> 00:07:13,120
in my demo i'm using fedora 33

00:07:09,520 --> 00:07:17,680
and i've also created a blueprint

00:07:13,120 --> 00:07:22,319
as you can see here i want an additional

00:07:17,680 --> 00:07:26,240
user in my system and i want

00:07:22,319 --> 00:07:30,160
the fish package to be installed

00:07:26,240 --> 00:07:33,199
now i can use the composer cli tool

00:07:30,160 --> 00:07:36,560
to push the blueprint into os build

00:07:33,199 --> 00:07:39,840
composer and i can start

00:07:36,560 --> 00:07:44,000
a compose using the compose

00:07:39,840 --> 00:07:46,960
start command and

00:07:44,000 --> 00:07:48,479
name of the blueprint as an argument and

00:07:46,960 --> 00:07:52,160
also federer iot

00:07:48,479 --> 00:07:56,240
commit which is the name of image type

00:07:52,160 --> 00:08:00,240
that we use for federer

00:07:56,240 --> 00:08:03,520
os3 commits and you can also monitor

00:08:00,240 --> 00:08:04,800
the status of your running compose using

00:08:03,520 --> 00:08:07,759
composer cli

00:08:04,800 --> 00:08:07,759
compose status

00:08:08,720 --> 00:08:15,919
and once the compose

00:08:12,240 --> 00:08:16,479
is finished you can download the os 3

00:08:15,919 --> 00:08:19,840
comment

00:08:16,479 --> 00:08:23,120
inside of a turbo using the composer

00:08:19,840 --> 00:08:27,199
cli compose image command

00:08:23,120 --> 00:08:30,960
and you need to specify the uuid of your

00:08:27,199 --> 00:08:34,959
compose so now we have

00:08:30,960 --> 00:08:38,159
the qs3 commit inside this turbo

00:08:34,959 --> 00:08:42,719
so next we need to download

00:08:38,159 --> 00:08:46,080
the installation i saw for fedora 33

00:08:42,719 --> 00:08:46,720
in this case i will use the federal net

00:08:46,080 --> 00:08:51,040
install

00:08:46,720 --> 00:08:54,240
iso and

00:08:51,040 --> 00:08:57,680
i will create a configuration for

00:08:54,240 --> 00:09:00,720
anaconda as you probably know

00:08:57,680 --> 00:09:03,760
you can create a kickstart file

00:09:00,720 --> 00:09:07,200
that will instruct anaconda

00:09:03,760 --> 00:09:11,279
what to do in order to

00:09:07,200 --> 00:09:14,000
install the system so

00:09:11,279 --> 00:09:14,480
i will not describe the whole kickstart

00:09:14,000 --> 00:09:18,480
file

00:09:14,480 --> 00:09:22,800
but on the last line you can see the os

00:09:18,480 --> 00:09:26,240
3 setup command which specifies

00:09:22,800 --> 00:09:29,680
where to look for the os 3

00:09:26,240 --> 00:09:33,120
commits or the repository

00:09:29,680 --> 00:09:37,000
and what to download from it

00:09:33,120 --> 00:09:40,000
if you are wondering uh where the

00:09:37,000 --> 00:09:43,279
10.0.2.2 ip address comes from

00:09:40,000 --> 00:09:46,560
it's because i will use qmu to

00:09:43,279 --> 00:09:49,120
boot the vm and

00:09:46,560 --> 00:09:50,399
this is a special ip address that you

00:09:49,120 --> 00:09:54,240
can use to

00:09:50,399 --> 00:09:54,240
reach the host system

00:09:54,800 --> 00:10:00,880
okay now that i have to commit

00:09:58,080 --> 00:10:02,800
and i have the installation iso and the

00:10:00,880 --> 00:10:05,920
kickstarter file

00:10:02,800 --> 00:10:10,160
i need to serve the os 3

00:10:05,920 --> 00:10:14,240
commit using some http server

00:10:10,160 --> 00:10:16,480
so my first idea of course would be to

00:10:14,240 --> 00:10:18,079
use something very simple for example

00:10:16,480 --> 00:10:21,680
the python 3

00:10:18,079 --> 00:10:25,360
http server unfortunately

00:10:21,680 --> 00:10:28,640
os 3 produces a lot of

00:10:25,360 --> 00:10:31,200
a lot of requests and the

00:10:28,640 --> 00:10:32,720
built-in python http server cannot

00:10:31,200 --> 00:10:35,920
handle the load

00:10:32,720 --> 00:10:40,079
so what i will do instead

00:10:35,920 --> 00:10:44,399
is that i will create a container

00:10:40,079 --> 00:10:47,600
that will run httpd

00:10:44,399 --> 00:10:50,800
and i will place the

00:10:47,600 --> 00:10:54,079
os 3 commit and the kickstart file

00:10:50,800 --> 00:10:57,120
inside this container so

00:10:54,079 --> 00:10:58,399
as you can see here i have the docker

00:10:57,120 --> 00:11:01,920
file

00:10:58,399 --> 00:11:05,120
and the turbo and the kickstart file

00:11:01,920 --> 00:11:05,760
in a single directory and i use podman

00:11:05,120 --> 00:11:10,160
build

00:11:05,760 --> 00:11:14,240
to create the the container

00:11:10,160 --> 00:11:17,279
now i can simply run the container

00:11:14,240 --> 00:11:22,240
and bind the http

00:11:17,279 --> 00:11:25,200
port to port 8000

00:11:22,240 --> 00:11:25,200
now i open

00:11:26,480 --> 00:11:33,200
now i open uh

00:11:29,760 --> 00:11:36,880
another deck in my terminal emulator

00:11:33,200 --> 00:11:40,399
and i need to create an disk image

00:11:36,880 --> 00:11:40,399
uh what we um

00:11:41,200 --> 00:11:47,920
yes so previously i downloaded

00:11:44,560 --> 00:11:51,600
the installation iso but that's not an

00:11:47,920 --> 00:11:54,959
disk image you need to

00:11:51,600 --> 00:11:58,880
create a disk image separately so that

00:11:54,959 --> 00:12:02,240
you can install the new system to it

00:11:58,880 --> 00:12:06,399
so i'm using the qmu

00:12:02,240 --> 00:12:09,519
img command to create a disk image for

00:12:06,399 --> 00:12:12,079
my for my vm and

00:12:09,519 --> 00:12:14,079
i want to create for example five

00:12:12,079 --> 00:12:17,920
gigabytes

00:12:14,079 --> 00:12:21,920
disk and then i can use

00:12:17,920 --> 00:12:24,959
qmu system x86 to actually

00:12:21,920 --> 00:12:25,680
boot the vm and as you can see in the

00:12:24,959 --> 00:12:29,200
command

00:12:25,680 --> 00:12:32,959
i specify the fedora net installation

00:12:29,200 --> 00:12:36,839
iso as an argument and also

00:12:32,959 --> 00:12:40,000
the disk image now when i hit

00:12:36,839 --> 00:12:40,970
enter i will see

00:12:40,000 --> 00:12:43,040
this

00:12:40,970 --> 00:12:46,800
[Music]

00:12:43,040 --> 00:12:49,839
this screen this is the standard

00:12:46,800 --> 00:12:52,720
booting screen and now

00:12:49,839 --> 00:12:53,680
you need to interrupt the installation

00:12:52,720 --> 00:12:56,720
process

00:12:53,680 --> 00:13:00,399
and you need to move focus

00:12:56,720 --> 00:13:04,000
on the install fedora 33 line

00:13:00,399 --> 00:13:08,959
and then you hit tab once you do that

00:13:04,000 --> 00:13:08,959
you will see the grub command line

00:13:09,040 --> 00:13:16,959
and can you see my

00:13:12,320 --> 00:13:20,800
pointer yes perfect

00:13:16,959 --> 00:13:24,320
and as you can see here

00:13:20,800 --> 00:13:28,160
i specify the location

00:13:24,320 --> 00:13:31,680
of the kickstart file that is available

00:13:28,160 --> 00:13:35,040
from the running http server

00:13:31,680 --> 00:13:37,200
now when i hit enter anaconda

00:13:35,040 --> 00:13:39,279
will automatically download the

00:13:37,200 --> 00:13:43,040
kickstart file

00:13:39,279 --> 00:13:46,079
and i specified the

00:13:43,040 --> 00:13:47,120
os3 repository and commits in the

00:13:46,079 --> 00:13:49,360
kickstart file

00:13:47,120 --> 00:13:51,040
so the installation will happen

00:13:49,360 --> 00:13:54,480
automatically

00:13:51,040 --> 00:13:57,760
so once this is finished

00:13:54,480 --> 00:14:01,360
i will see my

00:13:57,760 --> 00:14:04,800
customized fedora iot image

00:14:01,360 --> 00:14:08,399
and as you can see here i can

00:14:04,800 --> 00:14:12,880
login using the user test

00:14:08,399 --> 00:14:16,480
and the password password

00:14:12,880 --> 00:14:17,519
but i forgot to create a home directory

00:14:16,480 --> 00:14:22,079
for my user

00:14:17,519 --> 00:14:24,560
so bash complains that it does not exist

00:14:22,079 --> 00:14:25,680
and i can also make sure that fish is

00:14:24,560 --> 00:14:28,240
installed

00:14:25,680 --> 00:14:29,680
and fish is complaining even more about

00:14:28,240 --> 00:14:33,040
the fact that i have

00:14:29,680 --> 00:14:37,120
forgot to create a home directory

00:14:33,040 --> 00:14:40,480
but as you can see the user is there

00:14:37,120 --> 00:14:43,920
and the package is there as well so

00:14:40,480 --> 00:14:46,880
we have successfully created a custom

00:14:43,920 --> 00:14:50,160
fedora iot image

00:14:46,880 --> 00:14:51,839
now back to question so

00:14:50,160 --> 00:14:53,600
what are the current features that we

00:14:51,839 --> 00:14:54,639
are supporting i mean the first thing is

00:14:53,600 --> 00:14:56,240
obviously

00:14:54,639 --> 00:14:57,680
the customizations that you can do by

00:14:56,240 --> 00:15:00,720
the blueprints

00:14:57,680 --> 00:15:02,639
like creating users the call and

00:15:00,720 --> 00:15:04,079
time zone and others there's a

00:15:02,639 --> 00:15:05,199
communication somewhere that you can

00:15:04,079 --> 00:15:08,639
look up

00:15:05,199 --> 00:15:11,920
and then very recently we added support

00:15:08,639 --> 00:15:12,800
which is not yet released so that we can

00:15:11,920 --> 00:15:14,720
create

00:15:12,800 --> 00:15:16,639
uh commit directly in a container with

00:15:14,720 --> 00:15:18,399
the web server basically the step that

00:15:16,639 --> 00:15:20,720
martin showed where

00:15:18,399 --> 00:15:21,839
he manually creates a container via a

00:15:20,720 --> 00:15:24,320
docker file

00:15:21,839 --> 00:15:26,480
we can now directly natively do so you

00:15:24,320 --> 00:15:30,000
get the container with the commit

00:15:26,480 --> 00:15:32,399
directly from os build and composer

00:15:30,000 --> 00:15:33,040
and then also the last step that is the

00:15:32,399 --> 00:15:34,639
tds

00:15:33,040 --> 00:15:36,639
that you have to download the net

00:15:34,639 --> 00:15:38,399
install instead of installer and then

00:15:36,639 --> 00:15:39,759
manually specify the kickstarter that

00:15:38,399 --> 00:15:42,480
you created on the

00:15:39,759 --> 00:15:43,759
command line we also can now create boot

00:15:42,480 --> 00:15:47,759
isis ourselves

00:15:43,759 --> 00:15:49,199
and have the os recommit directly in the

00:15:47,759 --> 00:15:52,079
installation image

00:15:49,199 --> 00:15:54,240
so that when you create the bootloader

00:15:52,079 --> 00:15:57,279
the boot iso you can get it

00:15:54,240 --> 00:15:59,040
use it on on this image file that

00:15:57,279 --> 00:16:00,959
martin created as well and it will

00:15:59,040 --> 00:16:02,160
automatically install the commit without

00:16:00,959 --> 00:16:05,360
any intermediary

00:16:02,160 --> 00:16:08,720
web server or something needed

00:16:05,360 --> 00:16:10,880
okay next slide maybe there's a bunch of

00:16:08,720 --> 00:16:12,720
features that are missing like one

00:16:10,880 --> 00:16:15,440
obvious one is that for currently it's

00:16:12,720 --> 00:16:18,639
only x86 64 supported

00:16:15,440 --> 00:16:22,160
so arm would would be nice and also um

00:16:18,639 --> 00:16:25,199
currently we don't support making raw

00:16:22,160 --> 00:16:27,120
cucumber images based on commits i mean

00:16:25,199 --> 00:16:28,800
oswald the low level tool can't do it

00:16:27,120 --> 00:16:30,560
but we haven't wired the bits up into

00:16:28,800 --> 00:16:32,800
composure

00:16:30,560 --> 00:16:34,320
and so this is also something that if

00:16:32,800 --> 00:16:38,320
somebody wants to help out

00:16:34,320 --> 00:16:40,079
quick jump in um and then

00:16:38,320 --> 00:16:41,519
what also is currently a bit cumbersome

00:16:40,079 --> 00:16:43,519
is the whole um

00:16:41,519 --> 00:16:46,000
infrastructure around commits it's not

00:16:43,519 --> 00:16:48,560
very you basically end up with like

00:16:46,000 --> 00:16:50,000
either an install commit and then in

00:16:48,560 --> 00:16:51,759
order to create updates you have to

00:16:50,000 --> 00:16:52,880
somehow like look up the commit id

00:16:51,759 --> 00:16:55,440
yourself and it's

00:16:52,880 --> 00:16:56,959
it's a bit cumbersome and then maybe

00:16:55,440 --> 00:17:01,120
there would also be

00:16:56,959 --> 00:17:05,120
you know room for more customizations

00:17:01,120 --> 00:17:07,520
all right i think that's it

00:17:05,120 --> 00:17:07,520
thank you

00:17:08,799 --> 00:17:12,959
any questions okay so it's time for a q

00:17:11,280 --> 00:17:15,280
a section so if everyone has

00:17:12,959 --> 00:17:17,120
any questions uh put them in the chat or

00:17:15,280 --> 00:17:20,319
q a section

00:17:17,120 --> 00:17:22,720
so far one question from dan chermak

00:17:20,319 --> 00:17:24,559
and it says how hard would it be to

00:17:22,720 --> 00:17:27,120
split up the ulstery image

00:17:24,559 --> 00:17:33,840
image generation out of os build so that

00:17:27,120 --> 00:17:36,080
other image builders could use it too

00:17:33,840 --> 00:17:37,280
i mean there is a there's a tool called

00:17:36,080 --> 00:17:39,840
rpm os street

00:17:37,280 --> 00:17:40,720
that and which is the same thing that

00:17:39,840 --> 00:17:43,760
you manage

00:17:40,720 --> 00:17:45,120
the quest for installation with the

00:17:43,760 --> 00:17:48,320
algorithms restoration

00:17:45,120 --> 00:17:49,039
and it can also take uh create these

00:17:48,320 --> 00:17:51,200
commits

00:17:49,039 --> 00:17:52,320
based on a thing called a tree file that

00:17:51,200 --> 00:17:56,640
you might look up

00:17:52,320 --> 00:18:00,000
but for s build itself um

00:17:56,640 --> 00:18:01,039
the the way we support creating the os

00:18:00,000 --> 00:18:04,640
3s is quite

00:18:01,039 --> 00:18:06,400
deeply integrated in in os build like

00:18:04,640 --> 00:18:08,559
westport is super flexible we could

00:18:06,400 --> 00:18:09,200
create you know all sorts of artifacts

00:18:08,559 --> 00:18:10,799
and the way

00:18:09,200 --> 00:18:13,520
the way it was built the little tool

00:18:10,799 --> 00:18:16,080
works is that we have a bunch of stages

00:18:13,520 --> 00:18:17,600
that are run one after another and they

00:18:16,080 --> 00:18:19,600
work on the file system three so there's

00:18:17,600 --> 00:18:20,320
an rpn stage that installs the rpm and

00:18:19,600 --> 00:18:22,400
then

00:18:20,320 --> 00:18:23,360
there's like the user stage that creates

00:18:22,400 --> 00:18:24,880
the user and it

00:18:23,360 --> 00:18:27,280
and then there's a few stages that

00:18:24,880 --> 00:18:28,880
prepare the tree for the rpm commit

00:18:27,280 --> 00:18:31,440
for the os3 commit and then there's an

00:18:28,880 --> 00:18:34,000
s3 commit stage so

00:18:31,440 --> 00:18:35,039
like ripping this out and making it

00:18:34,000 --> 00:18:36,640
available for

00:18:35,039 --> 00:18:39,200
some other image builder would basically

00:18:36,640 --> 00:18:42,240
mean you re-implement all of this so

00:18:39,200 --> 00:18:44,000
but the os for this real low level tool

00:18:42,240 --> 00:18:44,400
maybe you can just integrate west build

00:18:44,000 --> 00:18:46,559
itself

00:18:44,400 --> 00:18:48,960
into other image builders if you wanted

00:18:46,559 --> 00:18:48,960
to do that

00:18:49,440 --> 00:18:53,600
okay there's another question from james

00:18:52,320 --> 00:18:55,679
can the customization

00:18:53,600 --> 00:18:58,559
include using python bit to install

00:18:55,679 --> 00:18:58,559
python modules

00:19:00,000 --> 00:19:06,559
yeah so if the

00:19:03,440 --> 00:19:09,600
python bit module is packaged in

00:19:06,559 --> 00:19:12,720
rpm you can install it but

00:19:09,600 --> 00:19:16,480
we don't support

00:19:12,720 --> 00:19:19,679
installing the raw python modules

00:19:16,480 --> 00:19:24,400
using osborne composer

00:19:19,679 --> 00:19:27,600
so yeah that's probably

00:19:24,400 --> 00:19:29,760
okay we have another questions

00:19:27,600 --> 00:19:32,000
from benjamin block how hard is it to

00:19:29,760 --> 00:19:33,760
add custom modification to the image

00:19:32,000 --> 00:19:39,840
that are not

00:19:33,760 --> 00:19:39,840
packaged in rpm is that possible at all

00:19:42,080 --> 00:19:45,679
depends on what kind of customizations

00:19:44,799 --> 00:19:49,280
you mean like

00:19:45,679 --> 00:19:51,440
files or or

00:19:49,280 --> 00:19:53,200
i mean there's the the low level is

00:19:51,440 --> 00:19:55,600
always a there's always this

00:19:53,200 --> 00:19:56,240
spoiler between what os but the low

00:19:55,600 --> 00:19:58,480
level

00:19:56,240 --> 00:20:00,400
tool can do and there's lots of room for

00:19:58,480 --> 00:20:02,640
making customizations there but then the

00:20:00,400 --> 00:20:04,720
question is you know

00:20:02,640 --> 00:20:06,559
what composer which is the thing on top

00:20:04,720 --> 00:20:09,440
that actually knows how to

00:20:06,559 --> 00:20:11,120
in you know how to make a fedora image

00:20:09,440 --> 00:20:14,159
for example what goes into it

00:20:11,120 --> 00:20:16,000
and how that can be customized and there

00:20:14,159 --> 00:20:18,240
we don't support

00:20:16,000 --> 00:20:19,520
that many things because you know we

00:20:18,240 --> 00:20:21,600
want to

00:20:19,520 --> 00:20:22,559
people not make like mess up the the

00:20:21,600 --> 00:20:25,200
system too much

00:20:22,559 --> 00:20:26,480
or maybe we haven't even just thought of

00:20:25,200 --> 00:20:27,280
some of the customizations that are

00:20:26,480 --> 00:20:29,360
needed

00:20:27,280 --> 00:20:30,640
so if you have some pressing ideas or so

00:20:29,360 --> 00:20:32,559
then maybe come to us

00:20:30,640 --> 00:20:35,840
in the backtracker issue tracker and

00:20:32,559 --> 00:20:35,840
file them

00:20:35,919 --> 00:20:38,960
another question from duncher mark that

00:20:38,480 --> 00:20:41,039
says

00:20:38,960 --> 00:20:43,440
so os built is the low level tool

00:20:41,039 --> 00:20:46,080
invoked by os build composer

00:20:43,440 --> 00:20:48,400
yes so os build is like you know we

00:20:46,080 --> 00:20:51,120
always say is basically assembler

00:20:48,400 --> 00:20:52,240
that is you give it a manifest and the

00:20:51,120 --> 00:20:54,080
manifest contains

00:20:52,240 --> 00:20:55,760
it's a json file and it contains

00:20:54,080 --> 00:20:57,360
everything to

00:20:55,760 --> 00:20:59,039
produce the image and if you run it

00:20:57,360 --> 00:21:00,640
twice it will produce the

00:20:59,039 --> 00:21:02,480
function in exactly the same image i

00:21:00,640 --> 00:21:04,080
mean obviously there's some differences

00:21:02,480 --> 00:21:05,200
because time steps and tools you know

00:21:04,080 --> 00:21:08,320
like rpm whatever

00:21:05,200 --> 00:21:09,840
you know sometimes create files and so

00:21:08,320 --> 00:21:11,840
the timestamps of the file screen will

00:21:09,840 --> 00:21:14,080
differ but you know the image if you

00:21:11,840 --> 00:21:15,520
you know run the manifest the same money

00:21:14,080 --> 00:21:17,120
first twice will basically produce

00:21:15,520 --> 00:21:21,120
functioning this is the very same

00:21:17,120 --> 00:21:22,080
exact uh image and it supports all sorts

00:21:21,120 --> 00:21:24,480
of things including

00:21:22,080 --> 00:21:25,280
like os3 commits or you know cue cards

00:21:24,480 --> 00:21:28,159
and stuff

00:21:25,280 --> 00:21:29,760
and then uh the knowledge how to make a

00:21:28,159 --> 00:21:31,840
fedora image and the knowledge how to

00:21:29,760 --> 00:21:34,240
make a real for edge image or a rail

00:21:31,840 --> 00:21:35,280
image or a cubeco image this is

00:21:34,240 --> 00:21:38,640
basically how to

00:21:35,280 --> 00:21:40,400
plug the stages together to make a os

00:21:38,640 --> 00:21:42,480
variant out of this this lives in

00:21:40,400 --> 00:21:44,000
composer which is providing this web

00:21:42,480 --> 00:21:46,480
service and queueing

00:21:44,000 --> 00:21:49,840
and worker management and all sorts of

00:21:46,480 --> 00:21:49,840
high level functionality on top

00:21:53,440 --> 00:21:59,760
okay and we have another question

00:21:57,679 --> 00:22:01,520
does os build composer have any

00:21:59,760 --> 00:22:05,280
relationship with core os

00:22:01,520 --> 00:22:05,280
assembler by james pauling

00:22:05,600 --> 00:22:12,880
uh so far not

00:22:08,960 --> 00:22:15,760
um i mean we we are in contacts and

00:22:12,880 --> 00:22:16,480
uh been talking to colin and the group

00:22:15,760 --> 00:22:18,720
around there

00:22:16,480 --> 00:22:19,840
build coaster and there is some efforts

00:22:18,720 --> 00:22:22,799
to maybe like

00:22:19,840 --> 00:22:23,440
share some bits and pieces and uh maybe

00:22:22,799 --> 00:22:25,280
you know

00:22:23,440 --> 00:22:26,720
streamline the two things together a bit

00:22:25,280 --> 00:22:29,760
more

00:22:26,720 --> 00:22:34,559
but so far there is no

00:22:29,760 --> 00:22:34,559
like there are no big shares so far not

00:22:35,480 --> 00:22:38,480

YouTube URL: https://www.youtube.com/watch?v=KnRlZc0I6QM


