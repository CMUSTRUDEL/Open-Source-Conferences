Title: Testing extensions for Visual Studio Code - DevConf.CZ 2021
Publication date: 2021-03-14
Playlist: DevConfCZ 2021
Description: 
	Speaker: Dan Čermák


Visual Studio Code is an extremely popular editor and has a very rich ecosystem of extensions. However, testing these extensions is rather tricky in practice. Often extensions require external resources which have to be injected into the development environment. Unit tests are quite bad at testing the UI itself, as they require extensive setup code and a lot of mocking (= implementation of the production API in the testing environment that exposes the same interface). Checking the results of them still requires one to manually verify that the UI looks correct. All this combined can easily lead to false-positives and false-negatives. Integration tests on the other hand are not a silver bullet either as they can be rather brittle, slow, lengthy to write, hard to set up while also not being able to cover edge-cases very efficiently.
This talk will focus on what we learned while developing the Open Build Service Connector: which testing strategies work, which don't and what tools to use. We will cover some viable approaches to unit testing and the vscode-extension-tester module that we used for integration tests. 


Schedule: https://sched.co/gmLC
Captions: 
	00:00:01,360 --> 00:00:04,000
hi everyone hope you're having a great

00:00:03,520 --> 00:00:06,240
day

00:00:04,000 --> 00:00:07,440
i'm having honestly a fantastic day the

00:00:06,240 --> 00:00:10,240
weather outside is

00:00:07,440 --> 00:00:12,320
absolutely terrific unfortunately you

00:00:10,240 --> 00:00:13,840
can't see a thing of that since i had to

00:00:12,320 --> 00:00:16,720
put my blinds down as you

00:00:13,840 --> 00:00:17,840
maybe want to see me as well but let's

00:00:16,720 --> 00:00:20,000
get started

00:00:17,840 --> 00:00:22,720
i would like to present you today how to

00:00:20,000 --> 00:00:24,960
test visual studio code extensions

00:00:22,720 --> 00:00:27,439
and let's start out with me my name is

00:00:24,960 --> 00:00:29,439
dan i am a software developer working at

00:00:27,439 --> 00:00:30,400
susa as part of the developer engagement

00:00:29,439 --> 00:00:33,440
program

00:00:30,400 --> 00:00:35,120
so i'm my task is mostly to build tools

00:00:33,440 --> 00:00:37,440
for other developers

00:00:35,120 --> 00:00:40,079
i'm also a package maintainer for some

00:00:37,440 --> 00:00:42,559
opensuse packages i'm also

00:00:40,079 --> 00:00:43,600
i also maintain a bunch of packages in

00:00:42,559 --> 00:00:46,239
fedora

00:00:43,600 --> 00:00:48,239
and there i'm also a member of the i3

00:00:46,239 --> 00:00:51,920
special interest group where we've

00:00:48,239 --> 00:00:54,320
created the new i3 spin for fedora 34.

00:00:51,920 --> 00:00:56,160
one of my big passions is testing and

00:00:54,320 --> 00:00:56,480
that's also one of the reasons why i

00:00:56,160 --> 00:00:58,000
have

00:00:56,480 --> 00:01:00,399
invested quite a lot of work into

00:00:58,000 --> 00:01:02,960
testing visual studio code extensions

00:01:00,399 --> 00:01:04,400
and why i'm also giving this talk in

00:01:02,960 --> 00:01:06,560
case you want to start me on social

00:01:04,400 --> 00:01:08,479
media you can find a few handles further

00:01:06,560 --> 00:01:10,880
below where i occasionally post stuff

00:01:08,479 --> 00:01:13,119
about technology

00:01:10,880 --> 00:01:14,240
but let's take a look what we'll do

00:01:13,119 --> 00:01:16,640
today and as

00:01:14,240 --> 00:01:17,600
the title of the talk suggests it's

00:01:16,640 --> 00:01:19,680
about testing

00:01:17,600 --> 00:01:21,119
extensions for visual studio code so

00:01:19,680 --> 00:01:22,320
this is really from a developer

00:01:21,119 --> 00:01:25,520
perspective

00:01:22,320 --> 00:01:28,479
and the main agenda is well

00:01:25,520 --> 00:01:30,240
how to test extensions and i'll cover

00:01:28,479 --> 00:01:32,640
and i'll be covering

00:01:30,240 --> 00:01:34,880
the three big approaches that are unit

00:01:32,640 --> 00:01:35,759
testing manual testing and integration

00:01:34,880 --> 00:01:37,520
testing

00:01:35,759 --> 00:01:39,360
well and at the end we'll have a q a

00:01:37,520 --> 00:01:41,520
session and depending on how much time

00:01:39,360 --> 00:01:44,000
this left i can maybe also show you

00:01:41,520 --> 00:01:45,840
a thing or two in case there's an

00:01:44,000 --> 00:01:47,759
interest

00:01:45,840 --> 00:01:49,920
so first let's get started with visual

00:01:47,759 --> 00:01:52,560
studio code i mean i guess you

00:01:49,920 --> 00:01:54,560
uh you probably know visual studio code

00:01:52,560 --> 00:01:56,960
it's a cross-platform ide

00:01:54,560 --> 00:01:59,439
developed by microsoft it's built with

00:01:56,960 --> 00:02:01,680
web technologies so this whole thing is

00:01:59,439 --> 00:02:04,000
built in typescript which is a superset

00:02:01,680 --> 00:02:07,520
of javascript

00:02:04,000 --> 00:02:08,239
it's extremely popular so it started to

00:02:07,520 --> 00:02:11,680
be uh

00:02:08,239 --> 00:02:12,080
it i think it became a thing in 2015 and

00:02:11,680 --> 00:02:14,400
it

00:02:12,080 --> 00:02:17,040
breached 50 market share according to a

00:02:14,400 --> 00:02:18,560
stack overflow developer survey in 2019

00:02:17,040 --> 00:02:20,800
and it grew even more so

00:02:18,560 --> 00:02:22,879
this is an insanely popular editor it

00:02:20,800 --> 00:02:26,080
has a extremely good

00:02:22,879 --> 00:02:28,400
initial user experience which also

00:02:26,080 --> 00:02:30,480
explains why it's so popular and it has

00:02:28,400 --> 00:02:32,400
a very rich extension ecosystem

00:02:30,480 --> 00:02:34,640
and especially a very very well

00:02:32,400 --> 00:02:36,480
documented extension api

00:02:34,640 --> 00:02:38,720
so in case you ever feel like creating

00:02:36,480 --> 00:02:42,560
an extension yourself

00:02:38,720 --> 00:02:44,640
go for it this is really really simple

00:02:42,560 --> 00:02:46,000
and also a bit for my background i have

00:02:44,640 --> 00:02:49,040
spent more

00:02:46,000 --> 00:02:50,000
a good chunk of last year developing the

00:02:49,040 --> 00:02:51,760
open build service

00:02:50,000 --> 00:02:53,360
connector which is an extension for

00:02:51,760 --> 00:02:56,879
visual studio codes that

00:02:53,360 --> 00:03:00,879
bridges visual studio code itself

00:02:56,879 --> 00:03:03,920
to the um to the open build service

00:03:00,879 --> 00:03:05,920
which is the in case uh in case you

00:03:03,920 --> 00:03:07,680
don't uh don't know it it's essentially

00:03:05,920 --> 00:03:12,080
the combination of pegua

00:03:07,680 --> 00:03:15,760
plus koji uh in fedora

00:03:12,080 --> 00:03:16,959
so but now let's get started with the

00:03:15,760 --> 00:03:20,080
actual topic at hand

00:03:16,959 --> 00:03:22,800
testing extensions and so

00:03:20,080 --> 00:03:23,200
in my impression testing uh really just

00:03:22,800 --> 00:03:25,599
the

00:03:23,200 --> 00:03:26,400
extensions for vs code this is pretty

00:03:25,599 --> 00:03:29,200
tough

00:03:26,400 --> 00:03:30,400
and why is that tough well the main

00:03:29,200 --> 00:03:34,239
reason is

00:03:30,400 --> 00:03:36,640
you are testing a ui and your eyes have

00:03:34,239 --> 00:03:38,720
unfortunately the disadvantage that

00:03:36,640 --> 00:03:42,400
these things carry a lot of state

00:03:38,720 --> 00:03:46,000
so imagine your visuals your

00:03:42,400 --> 00:03:49,360
essentially any ui but now take vs code

00:03:46,000 --> 00:03:52,159
if you have something open all of the

00:03:49,360 --> 00:03:53,360
all of the ui elements that are present

00:03:52,159 --> 00:03:56,400
this is a certain

00:03:53,360 --> 00:03:57,040
state that's present and all of the

00:03:56,400 --> 00:04:00,640
state

00:03:57,040 --> 00:04:02,799
influences this how your extension

00:04:00,640 --> 00:04:03,920
interacts with that and what the outcome

00:04:02,799 --> 00:04:06,959
of that is

00:04:03,920 --> 00:04:08,959
so this means if you want to actually

00:04:06,959 --> 00:04:12,159
write meaningful tests

00:04:08,959 --> 00:04:15,040
you will have to pre-create all the

00:04:12,159 --> 00:04:18,000
important state yourself

00:04:15,040 --> 00:04:19,919
feed it into your extension get the

00:04:18,000 --> 00:04:21,040
state that your extension produces out

00:04:19,919 --> 00:04:24,080
of that

00:04:21,040 --> 00:04:27,520
and check that it actually matches and

00:04:24,080 --> 00:04:29,919
that's pretty hard because your

00:04:27,520 --> 00:04:30,639
vs code editor window there's a ton of

00:04:29,919 --> 00:04:32,720
information

00:04:30,639 --> 00:04:33,759
you have to extract all the important

00:04:32,720 --> 00:04:36,800
information

00:04:33,759 --> 00:04:38,960
you have to you have to find the

00:04:36,800 --> 00:04:40,800
right one you have to ensure that you

00:04:38,960 --> 00:04:42,880
actually got the right one

00:04:40,800 --> 00:04:45,520
and so on and so on so this is this is

00:04:42,880 --> 00:04:47,040
not a vs code specific problem this is a

00:04:45,520 --> 00:04:49,440
ui testing specif

00:04:47,040 --> 00:04:50,720
this is a general problem when testing

00:04:49,440 --> 00:04:52,960
user interfaces

00:04:50,720 --> 00:04:54,880
and graphical user interfaces

00:04:52,960 --> 00:04:59,120
specifically

00:04:54,880 --> 00:05:01,919
also uh if you have created an extension

00:04:59,120 --> 00:05:03,680
then usually the important part is that

00:05:01,919 --> 00:05:06,720
you have certain workflows imagine

00:05:03,680 --> 00:05:09,440
a git extension or a subversion or

00:05:06,720 --> 00:05:11,199
an extension that connects to kubernetes

00:05:09,440 --> 00:05:14,880
or to open shift or

00:05:11,199 --> 00:05:15,520
whatnot you want a workflow to be

00:05:14,880 --> 00:05:18,479
working

00:05:15,520 --> 00:05:20,639
to be functional so let's say i want to

00:05:18,479 --> 00:05:22,960
be able to commit things

00:05:20,639 --> 00:05:25,199
and i am in my impression in recent

00:05:22,960 --> 00:05:27,360
years it's been very popular to write

00:05:25,199 --> 00:05:29,680
unit tests and to rely on unit tests

00:05:27,360 --> 00:05:31,680
but unit tests are really only good for

00:05:29,680 --> 00:05:34,639
testing individual chunks of code

00:05:31,680 --> 00:05:36,400
they are not good at testing really

00:05:34,639 --> 00:05:39,039
workflows because a workflow is a

00:05:36,400 --> 00:05:41,840
combination of a whole ton of things

00:05:39,039 --> 00:05:43,600
but a unit test tests just one tiny

00:05:41,840 --> 00:05:46,080
teeny tiny bit and you are actually

00:05:43,600 --> 00:05:49,919
interested in the big picture

00:05:46,080 --> 00:05:49,919
well and the last thing here is

00:05:50,000 --> 00:05:54,800
what you so what you test is not

00:05:53,039 --> 00:05:57,919
necessarily what you see

00:05:54,800 --> 00:05:59,360
because if you start out pre-creating

00:05:57,919 --> 00:06:02,160
this ui state

00:05:59,360 --> 00:06:03,120
for your tests you can easily create

00:06:02,160 --> 00:06:05,759
state that would

00:06:03,120 --> 00:06:06,880
never appear like that in practice and

00:06:05,759 --> 00:06:09,680
also

00:06:06,880 --> 00:06:11,280
if you then actually want to check the

00:06:09,680 --> 00:06:14,400
result

00:06:11,280 --> 00:06:14,880
um it all it effectively means anyway

00:06:14,400 --> 00:06:17,280
that

00:06:14,880 --> 00:06:19,680
you'll be you'll be running your

00:06:17,280 --> 00:06:22,880
extension you take a look at the output

00:06:19,680 --> 00:06:25,440
and then you take a um and

00:06:22,880 --> 00:06:26,639
then you check what comes out of it and

00:06:25,440 --> 00:06:30,000
then you test that

00:06:26,639 --> 00:06:32,240
so effectively you

00:06:30,000 --> 00:06:35,360
still have to take a look at the actual

00:06:32,240 --> 00:06:38,400
stuff that happens

00:06:35,360 --> 00:06:40,960
so now let's uh let's get

00:06:38,400 --> 00:06:42,319
started with actually testing and first

00:06:40,960 --> 00:06:44,479
a general notice

00:06:42,319 --> 00:06:46,080
usually extensions have to rely on some

00:06:44,479 --> 00:06:48,639
kind of external service

00:06:46,080 --> 00:06:49,840
so whether this be for instance external

00:06:48,639 --> 00:06:53,039
libraries

00:06:49,840 --> 00:06:56,400
so imagine you have a

00:06:53,039 --> 00:06:58,880
um imagine that you have um that you

00:06:56,400 --> 00:07:01,360
need to store credentials somewhere

00:06:58,880 --> 00:07:03,199
yeah these need to be stored in a in the

00:07:01,360 --> 00:07:05,599
operating systems keyring that's how

00:07:03,199 --> 00:07:08,160
it's usually done from vs code

00:07:05,599 --> 00:07:09,440
and depending on your on how you're

00:07:08,160 --> 00:07:11,840
exactly testing

00:07:09,440 --> 00:07:13,759
you have to mock these out so i'd say

00:07:11,840 --> 00:07:14,800
for unit tests mark them out i'll cover

00:07:13,759 --> 00:07:17,680
that later for

00:07:14,800 --> 00:07:20,240
integration tests you can use stuff like

00:07:17,680 --> 00:07:21,759
ld preload and write fake libraries

00:07:20,240 --> 00:07:24,080
i've done that for the open build

00:07:21,759 --> 00:07:27,280
service connector i have a fake

00:07:24,080 --> 00:07:28,240
lip secret that just reads credentials

00:07:27,280 --> 00:07:30,000
from a file

00:07:28,240 --> 00:07:31,759
and so it doesn't mess with the

00:07:30,000 --> 00:07:34,160
developer's machine

00:07:31,759 --> 00:07:37,840
if you have external services so imagine

00:07:34,160 --> 00:07:40,160
kubernetes or some cloud provider

00:07:37,840 --> 00:07:42,880
take a look whether upstream has some

00:07:40,160 --> 00:07:44,879
sort of staging environment

00:07:42,880 --> 00:07:46,319
or if preferably a development

00:07:44,879 --> 00:07:48,319
environment so usually

00:07:46,319 --> 00:07:50,160
upstream projects have development

00:07:48,319 --> 00:07:51,199
environments that can be just spun up

00:07:50,160 --> 00:07:54,160
for testing

00:07:51,199 --> 00:07:57,680
use these to test against them you want

00:07:54,160 --> 00:07:59,759
to be testing against the real thing

00:07:57,680 --> 00:08:01,199
especially for integration tests test

00:07:59,759 --> 00:08:03,280
against the real service

00:08:01,199 --> 00:08:04,639
otherwise uh the service will change

00:08:03,280 --> 00:08:06,319
something or something will behave

00:08:04,639 --> 00:08:07,199
slightly differently than what you

00:08:06,319 --> 00:08:09,919
mocked out

00:08:07,199 --> 00:08:11,360
and it will your tests will be green

00:08:09,919 --> 00:08:14,479
your actual service

00:08:11,360 --> 00:08:17,919
your actual extension will fail

00:08:14,479 --> 00:08:19,680
good let's get to unit testing so

00:08:17,919 --> 00:08:20,960
unit testing means you have one

00:08:19,680 --> 00:08:23,840
functionality

00:08:20,960 --> 00:08:24,879
so you test one teeny tiny chunk of code

00:08:23,840 --> 00:08:26,720
and you test

00:08:24,879 --> 00:08:28,400
one specific functionality of this so

00:08:26,720 --> 00:08:28,879
usually it means you take for instance a

00:08:28,400 --> 00:08:31,280
function

00:08:28,879 --> 00:08:32,159
you take a class and you want to check

00:08:31,280 --> 00:08:34,880
okay does

00:08:32,159 --> 00:08:36,640
this does this function fulfill its

00:08:34,880 --> 00:08:38,320
purpose

00:08:36,640 --> 00:08:40,240
and as i already rented quite

00:08:38,320 --> 00:08:42,719
extensively anything that

00:08:40,240 --> 00:08:45,200
touches the ui will need extensive setup

00:08:42,719 --> 00:08:48,800
and teardown and verification will be

00:08:45,200 --> 00:08:52,000
a pain in the backside so um

00:08:48,800 --> 00:08:54,880
if you want to really check that certain

00:08:52,000 --> 00:08:56,880
certain elements work the way they are

00:08:54,880 --> 00:08:58,640
displayed the way you want them

00:08:56,880 --> 00:09:01,120
it will be a lot of work and i would

00:08:58,640 --> 00:09:03,839
recommend not to do that

00:09:01,120 --> 00:09:04,480
if you have external services and want

00:09:03,839 --> 00:09:06,720
to

00:09:04,480 --> 00:09:08,000
and need to communicate with them my

00:09:06,720 --> 00:09:11,519
recommendation is for unit

00:09:08,000 --> 00:09:14,320
tests mock them out so

00:09:11,519 --> 00:09:16,560
if you have for instance credentials use

00:09:14,320 --> 00:09:19,920
some mocking library for that

00:09:16,560 --> 00:09:22,320
um or do dependency injection since your

00:09:19,920 --> 00:09:24,399
unit tests should be should be

00:09:22,320 --> 00:09:26,640
relatively fast and if you now

00:09:24,399 --> 00:09:29,200
spin up testing environments it will

00:09:26,640 --> 00:09:31,040
take a lot of time

00:09:29,200 --> 00:09:32,800
if you want to get started with unit

00:09:31,040 --> 00:09:35,760
testing this is fairly simple

00:09:32,800 --> 00:09:36,240
so the upstream documentation has a good

00:09:35,760 --> 00:09:38,399
has

00:09:36,240 --> 00:09:39,440
an example if you use the official

00:09:38,399 --> 00:09:42,640
generator for

00:09:39,440 --> 00:09:44,640
a vs code extension then

00:09:42,640 --> 00:09:46,480
that will set it up yourself and how

00:09:44,640 --> 00:09:49,120
these unit tests

00:09:46,480 --> 00:09:49,760
these use the module let's call vs code

00:09:49,120 --> 00:09:51,519
tests

00:09:49,760 --> 00:09:52,800
and what that effectively does is it

00:09:51,519 --> 00:09:55,680
spins up a

00:09:52,800 --> 00:09:57,040
temporary vs code instance loads your

00:09:55,680 --> 00:09:59,839
extension into that

00:09:57,040 --> 00:10:01,040
and then it executes all your unit tests

00:09:59,839 --> 00:10:03,519
that you defined

00:10:01,040 --> 00:10:04,640
so you will have a real vs code instance

00:10:03,519 --> 00:10:08,399
running you can do

00:10:04,640 --> 00:10:11,440
all kinds of stuff that the vs code api

00:10:08,399 --> 00:10:14,880
exposes to you and

00:10:11,440 --> 00:10:15,440
with that you have and your unit tests

00:10:14,880 --> 00:10:18,720
run

00:10:15,440 --> 00:10:21,839
essentially in the real thing this

00:10:18,720 --> 00:10:24,720
is fairly straightforward so that's um

00:10:21,839 --> 00:10:26,160
it's it can be sometimes a bit tricky to

00:10:24,720 --> 00:10:28,399
get it run on the ci

00:10:26,160 --> 00:10:29,200
as you have to have to have a x server

00:10:28,399 --> 00:10:31,440
running

00:10:29,200 --> 00:10:33,440
but again the upstream documentation is

00:10:31,440 --> 00:10:35,760
fairly good in this example

00:10:33,440 --> 00:10:36,880
a tiny catch is if you want to extract

00:10:35,760 --> 00:10:38,560
test coverage

00:10:36,880 --> 00:10:40,240
the upstream documentation does not

00:10:38,560 --> 00:10:42,720
cover that um

00:10:40,240 --> 00:10:43,600
and it's also a bit nasty to get that

00:10:42,720 --> 00:10:47,040
running but

00:10:43,600 --> 00:10:50,240
fortunately connor has um

00:10:47,040 --> 00:10:53,040
has a really good example for that

00:10:50,240 --> 00:10:53,680
and it's linked in the slides so if you

00:10:53,040 --> 00:10:56,000
if you

00:10:53,680 --> 00:10:56,720
want to want to use this code snippet

00:10:56,000 --> 00:10:58,880
yourself

00:10:56,720 --> 00:11:02,079
go ahead and just steal it i did the

00:10:58,880 --> 00:11:02,079
same for my extension

00:11:02,320 --> 00:11:09,440
good so i'd now like to go over some

00:11:06,160 --> 00:11:11,040
some specific parts of uh of unit

00:11:09,440 --> 00:11:14,079
testing that i found

00:11:11,040 --> 00:11:14,880
interesting particular or surprising

00:11:14,079 --> 00:11:17,519
maybe

00:11:14,880 --> 00:11:19,440
so one thing is extension settings

00:11:17,519 --> 00:11:20,560
depending on your extension you might

00:11:19,440 --> 00:11:23,200
have to

00:11:20,560 --> 00:11:25,519
you might have to write or read settings

00:11:23,200 --> 00:11:28,720
because you have hundreds of them

00:11:25,519 --> 00:11:30,320
um in that case uh

00:11:28,720 --> 00:11:32,240
this is fairly straightforward since you

00:11:30,320 --> 00:11:33,279
have a real bs code instance running so

00:11:32,240 --> 00:11:36,160
you can just read

00:11:33,279 --> 00:11:36,800
write modify them to your liking since

00:11:36,160 --> 00:11:38,720
you also

00:11:36,800 --> 00:11:40,880
have a testing environment it doesn't

00:11:38,720 --> 00:11:43,040
mess with your real settings that's nice

00:11:40,880 --> 00:11:45,680
um the only thing that you should really

00:11:43,040 --> 00:11:49,680
keep in mind is clean up after yourself

00:11:45,680 --> 00:11:53,120
so if you use some post test hook

00:11:49,680 --> 00:11:54,800
and and remove all your temporary

00:11:53,120 --> 00:11:56,720
settings that you made since

00:11:54,800 --> 00:11:58,000
subsequent tests could then otherwise

00:11:56,720 --> 00:12:01,519
fail

00:11:58,000 --> 00:12:04,399
that's essentially it events

00:12:01,519 --> 00:12:05,279
so if you have worked with the vs code

00:12:04,399 --> 00:12:07,440
api then

00:12:05,279 --> 00:12:08,959
you'll have then you'll see that there's

00:12:07,440 --> 00:12:11,760
um when you'll

00:12:08,959 --> 00:12:12,880
have seen events and an event is

00:12:11,760 --> 00:12:16,560
essentially

00:12:12,880 --> 00:12:18,880
uh as you can see in this so events are

00:12:16,560 --> 00:12:20,320
typically used in visual studio code to

00:12:18,880 --> 00:12:22,959
signal

00:12:20,320 --> 00:12:24,639
uh to event listeners that something

00:12:22,959 --> 00:12:25,839
happened for instance user selected

00:12:24,639 --> 00:12:28,720
something user clicked

00:12:25,839 --> 00:12:29,360
uh somewhere some property changed and

00:12:28,720 --> 00:12:32,399
how these

00:12:29,360 --> 00:12:34,399
uh how these runs so here you have a uh

00:12:32,399 --> 00:12:35,519
here you have the on the change value

00:12:34,399 --> 00:12:38,160
event

00:12:35,519 --> 00:12:39,920
and um how this works is you pass a

00:12:38,160 --> 00:12:42,720
function into that

00:12:39,920 --> 00:12:43,519
and every time this event is this event

00:12:42,720 --> 00:12:46,639
happens

00:12:43,519 --> 00:12:50,079
that function gets executed um

00:12:46,639 --> 00:12:50,880
this also can be used so you should test

00:12:50,079 --> 00:12:53,440
these if they

00:12:50,880 --> 00:12:55,360
include a whole bunch of business logic

00:12:53,440 --> 00:12:57,839
the only catch with them is

00:12:55,360 --> 00:12:58,880
the visual studio code itself will not

00:12:57,839 --> 00:13:01,440
eva await

00:12:58,880 --> 00:13:03,120
promises so if you pass an as

00:13:01,440 --> 00:13:04,480
asynchronous function like in this

00:13:03,120 --> 00:13:06,399
example here

00:13:04,480 --> 00:13:08,800
visual studio code will just execute it

00:13:06,399 --> 00:13:11,600
and not wait for the promise to resolve

00:13:08,800 --> 00:13:13,360
so my recommendation is implement some

00:13:11,600 --> 00:13:14,880
fake events yourself this is

00:13:13,360 --> 00:13:16,959
really straightforward if you want to

00:13:14,880 --> 00:13:20,480
take a look how this is done

00:13:16,959 --> 00:13:23,200
uh steal my implementation from the

00:13:20,480 --> 00:13:23,839
from the open build service connector it

00:13:23,200 --> 00:13:27,279
will be

00:13:23,839 --> 00:13:31,440
linked on one of the last slides

00:13:27,279 --> 00:13:34,000
disposables so

00:13:31,440 --> 00:13:35,519
disposables are essentially a workaround

00:13:34,000 --> 00:13:36,880
for javascript being in garbage

00:13:35,519 --> 00:13:37,839
collected language and not having

00:13:36,880 --> 00:13:42,160
finalizers

00:13:37,839 --> 00:13:46,160
and these are destructors so

00:13:42,160 --> 00:13:48,240
a whole bunch of of the vs code api

00:13:46,160 --> 00:13:50,560
returns a so-called disposable that's

00:13:48,240 --> 00:13:51,120
just an object that has a dispose

00:13:50,560 --> 00:13:54,639
function

00:13:51,120 --> 00:13:55,920
and this unregisters it from so for

00:13:54,639 --> 00:13:58,480
example if you have

00:13:55,920 --> 00:14:00,720
if you have registered a command then

00:13:58,480 --> 00:14:03,120
the function that registers a command

00:14:00,720 --> 00:14:04,320
um gives you a disposable that will

00:14:03,120 --> 00:14:07,040
unregister it

00:14:04,320 --> 00:14:08,720
and the the idea here is you can't

00:14:07,040 --> 00:14:11,360
register a command twice

00:14:08,720 --> 00:14:13,440
so just keep in mind everything that

00:14:11,360 --> 00:14:15,760
returns a disposable should be actually

00:14:13,440 --> 00:14:18,320
disposed of after a single test

00:14:15,760 --> 00:14:20,639
and for that most test runners have some

00:14:18,320 --> 00:14:22,880
some kind of after or after each hook

00:14:20,639 --> 00:14:24,320
that runs after a test or after a test

00:14:22,880 --> 00:14:26,639
suit or after each test

00:14:24,320 --> 00:14:27,839
and so just keep in mind to get rid of

00:14:26,639 --> 00:14:31,120
them

00:14:27,839 --> 00:14:35,199
ui elements as i said now twice

00:14:31,120 --> 00:14:36,880
um don't check them preferably or

00:14:35,199 --> 00:14:39,120
and if you really want to check them

00:14:36,880 --> 00:14:42,480
really check only the interesting parts

00:14:39,120 --> 00:14:43,839
so don't check all the don't check the

00:14:42,480 --> 00:14:44,959
whole data structure your test will

00:14:43,839 --> 00:14:46,959
otherwise fail

00:14:44,959 --> 00:14:48,000
on every vs code update you don't want

00:14:46,959 --> 00:14:51,040
to do that

00:14:48,000 --> 00:14:53,199
so really just check for the

00:14:51,040 --> 00:14:55,519
for the part that you really really care

00:14:53,199 --> 00:14:58,240
about for example

00:14:55,519 --> 00:15:00,320
the icon yeah check that you actually

00:14:58,240 --> 00:15:01,440
use the correct icon under a certain

00:15:00,320 --> 00:15:05,279
condition

00:15:01,440 --> 00:15:06,880
and keep it keep this part as small as

00:15:05,279 --> 00:15:10,160
possible

00:15:06,880 --> 00:15:12,560
and a general recommendation here is

00:15:10,160 --> 00:15:14,079
structure your code so that the your

00:15:12,560 --> 00:15:16,639
main business logic

00:15:14,079 --> 00:15:17,279
can be very well tested and the ui part

00:15:16,639 --> 00:15:19,600
is as

00:15:17,279 --> 00:15:20,639
small as possible since otherwise you're

00:15:19,600 --> 00:15:23,839
going to have a

00:15:20,639 --> 00:15:26,399
very very bad time with qa

00:15:23,839 --> 00:15:28,560
it's going to be it's going to be very

00:15:26,399 --> 00:15:30,880
annoying

00:15:28,560 --> 00:15:32,639
that should be it for unit testing let's

00:15:30,880 --> 00:15:34,240
go to manual testing and now you might

00:15:32,639 --> 00:15:36,639
say wait manual testing you mean like

00:15:34,240 --> 00:15:37,440
doing it yourself yes i mean exactly

00:15:36,639 --> 00:15:40,800
doing that

00:15:37,440 --> 00:15:41,360
do it yourself which might sound like a

00:15:40,800 --> 00:15:43,440
very

00:15:41,360 --> 00:15:45,120
weird suggestion given today's world

00:15:43,440 --> 00:15:47,680
where we try to automate essentially

00:15:45,120 --> 00:15:50,720
everything and automate ourselves out

00:15:47,680 --> 00:15:53,279
out of our job and uh of course

00:15:50,720 --> 00:15:54,000
that's not going to happen but so when

00:15:53,279 --> 00:15:57,759
does this make

00:15:54,000 --> 00:16:00,720
sense um the manual testing

00:15:57,759 --> 00:16:02,639
really makes sense if you have a kind of

00:16:00,720 --> 00:16:04,399
a one-shot extension so you've written

00:16:02,639 --> 00:16:06,880
it once and you expect your future

00:16:04,399 --> 00:16:09,759
changes to be really really small

00:16:06,880 --> 00:16:10,240
which is usually not going to happen but

00:16:09,759 --> 00:16:13,040
uh

00:16:10,240 --> 00:16:14,639
you know it's if you anticipate that you

00:16:13,040 --> 00:16:16,959
could go for manual testing or if you

00:16:14,639 --> 00:16:19,839
have a really complex environment

00:16:16,959 --> 00:16:21,839
that's essentially impossible to create

00:16:19,839 --> 00:16:23,360
automatically or you have to wait for

00:16:21,839 --> 00:16:26,639
certain conditions that take

00:16:23,360 --> 00:16:27,920
ages and doing that automatically is

00:16:26,639 --> 00:16:29,920
very very hard

00:16:27,920 --> 00:16:32,720
in that case you can go for manual

00:16:29,920 --> 00:16:34,959
testing and my recommendation here is

00:16:32,720 --> 00:16:37,360
make yourself a test plan so make a

00:16:34,959 --> 00:16:39,519
checklist write down what should you

00:16:37,360 --> 00:16:41,680
what should be done exactly in what

00:16:39,519 --> 00:16:42,880
steps what are your expectations make

00:16:41,680 --> 00:16:45,040
yourself a

00:16:42,880 --> 00:16:47,600
tick box that you tick and before every

00:16:45,040 --> 00:16:50,240
release you go through the whole thing

00:16:47,600 --> 00:16:53,199
if you have um you can even use some

00:16:50,240 --> 00:16:55,360
test management system like tv tcms

00:16:53,199 --> 00:16:56,959
if you are familiar with that you can

00:16:55,360 --> 00:16:59,360
plug that into this

00:16:56,959 --> 00:17:00,240
but yeah not necessarily my

00:16:59,360 --> 00:17:02,000
recommendation

00:17:00,240 --> 00:17:03,839
and so let's go for integration testing

00:17:02,000 --> 00:17:05,520
since manual testing is effectively

00:17:03,839 --> 00:17:09,760
manual integration testing

00:17:05,520 --> 00:17:12,319
and it just means let a machine do it so

00:17:09,760 --> 00:17:13,760
you test the main workflows of your

00:17:12,319 --> 00:17:16,079
extension

00:17:13,760 --> 00:17:17,439
and you effectively let something click

00:17:16,079 --> 00:17:19,360
through vs code

00:17:17,439 --> 00:17:21,839
and do all the stuff and verify that

00:17:19,360 --> 00:17:24,959
everything that comes out

00:17:21,839 --> 00:17:27,679
is actually what you expected

00:17:24,959 --> 00:17:29,440
so um for that i found a very nice

00:17:27,679 --> 00:17:31,760
module that's called vs code extension

00:17:29,440 --> 00:17:33,200
tester developed mainly by jan richter

00:17:31,760 --> 00:17:35,840
from red hat

00:17:33,200 --> 00:17:37,600
and this leverages the simple fact that

00:17:35,840 --> 00:17:38,960
visual studio code is built on web

00:17:37,600 --> 00:17:40,480
technologies the whole thing

00:17:38,960 --> 00:17:42,000
runs in electron that's a headless

00:17:40,480 --> 00:17:44,000
chrome browser so

00:17:42,000 --> 00:17:45,520
you can use all the cool stuff all the

00:17:44,000 --> 00:17:46,000
cool testing libraries that are out

00:17:45,520 --> 00:17:49,039
there to

00:17:46,000 --> 00:17:52,640
test web pages

00:17:49,039 --> 00:17:53,120
you can use these to test visual studio

00:17:52,640 --> 00:17:55,679
code

00:17:53,120 --> 00:17:56,320
and one of these is selenium webdriver

00:17:55,679 --> 00:17:58,880
and

00:17:56,320 --> 00:17:59,679
what vs code extension tester does is it

00:17:58,880 --> 00:18:03,200
wraps

00:17:59,679 --> 00:18:06,400
all the calls to the to the

00:18:03,200 --> 00:18:09,039
actual dom so to the actual html stuff

00:18:06,400 --> 00:18:10,880
that's created by the visual studio code

00:18:09,039 --> 00:18:12,240
and gives you a convenient api that

00:18:10,880 --> 00:18:14,799
looks like this

00:18:12,240 --> 00:18:16,559
so you can say hey i give me a new give

00:18:14,799 --> 00:18:20,000
me a new text editor

00:18:16,559 --> 00:18:23,360
then i can open uh open a certain file

00:18:20,000 --> 00:18:26,320
set the text and so on and so on

00:18:23,360 --> 00:18:27,760
and this works this works quite well in

00:18:26,320 --> 00:18:31,760
practice

00:18:27,760 --> 00:18:33,919
the api is also pretty nice to use so

00:18:31,760 --> 00:18:35,760
what should you test with that my

00:18:33,919 --> 00:18:39,280
recommendation would be find your

00:18:35,760 --> 00:18:42,400
main workflows and

00:18:39,280 --> 00:18:44,799
try to try to identify really the more

00:18:42,400 --> 00:18:46,559
main and most interesting workflows that

00:18:44,799 --> 00:18:48,880
you are going to

00:18:46,559 --> 00:18:51,280
that you really want to care about go

00:18:48,880 --> 00:18:54,320
here for an 80 20 rule so

00:18:51,280 --> 00:18:57,360
try to cover with 20 of the work 80

00:18:54,320 --> 00:18:59,760
of your code since your test runs they

00:18:57,360 --> 00:19:02,240
will take a while to run

00:18:59,760 --> 00:19:03,840
and don't test corner cases or some

00:19:02,240 --> 00:19:07,280
minor regressions that are

00:19:03,840 --> 00:19:09,600
hard to uh that are hard to reach since

00:19:07,280 --> 00:19:11,520
that's um i don't think that's something

00:19:09,600 --> 00:19:15,520
that integration tests should do

00:19:11,520 --> 00:19:19,120
that's more something for unit tests

00:19:15,520 --> 00:19:22,000
how should you test so upstream the

00:19:19,120 --> 00:19:23,039
vs code extension test they use is moca

00:19:22,000 --> 00:19:24,880
i would suggest you

00:19:23,039 --> 00:19:26,640
use the same as a test runner in this

00:19:24,880 --> 00:19:29,360
case um

00:19:26,640 --> 00:19:30,320
mocha also supports root hooks so these

00:19:29,360 --> 00:19:32,559
are essentially

00:19:30,320 --> 00:19:34,960
hooks that run before all tests and

00:19:32,559 --> 00:19:37,679
after all tests and use these to really

00:19:34,960 --> 00:19:38,799
uh set up your development environment

00:19:37,679 --> 00:19:42,000
if you need

00:19:38,799 --> 00:19:43,679
so keep in mind you can override

00:19:42,000 --> 00:19:44,640
environment variables like the home

00:19:43,679 --> 00:19:47,840
directory

00:19:44,640 --> 00:19:48,640
like ld library path ld preload you can

00:19:47,840 --> 00:19:50,559
inject

00:19:48,640 --> 00:19:51,679
all kinds of external symbols if you

00:19:50,559 --> 00:19:54,400
need a

00:19:51,679 --> 00:19:55,919
if you need passwords from lip secret

00:19:54,400 --> 00:19:58,080
then

00:19:55,919 --> 00:19:59,200
use your use a custom lip secret if you

00:19:58,080 --> 00:20:01,120
need another library

00:19:59,200 --> 00:20:02,240
use another library if you need if you

00:20:01,120 --> 00:20:04,960
need to sub

00:20:02,240 --> 00:20:05,600
process into git use a fake git and so

00:20:04,960 --> 00:20:08,400
on

00:20:05,600 --> 00:20:08,720
so that you have more control and then

00:20:08,400 --> 00:20:11,760
run

00:20:08,720 --> 00:20:14,159
each of your individual steps as uh

00:20:11,760 --> 00:20:16,480
individual so called it steps that's

00:20:14,159 --> 00:20:20,080
just how it's called in mocker

00:20:16,480 --> 00:20:21,840
and be done with that so downside is you

00:20:20,080 --> 00:20:22,640
won't be able to run them in parallel

00:20:21,840 --> 00:20:25,840
but

00:20:22,640 --> 00:20:28,159
you can't do that anyway um

00:20:25,840 --> 00:20:29,600
good so let's take a look at few of the

00:20:28,159 --> 00:20:32,960
catches

00:20:29,600 --> 00:20:34,960
the the integration tests especially

00:20:32,960 --> 00:20:36,960
with vs code extension tester

00:20:34,960 --> 00:20:38,240
they are relatively slow and resource

00:20:36,960 --> 00:20:40,960
demanding

00:20:38,240 --> 00:20:41,440
so the if your machine is under load

00:20:40,960 --> 00:20:43,360
then

00:20:41,440 --> 00:20:45,200
sometimes you'll get random timeouts

00:20:43,360 --> 00:20:46,559
which is annoying especially if you run

00:20:45,200 --> 00:20:49,520
your tests on a ci

00:20:46,559 --> 00:20:51,760
because your beefy development machine

00:20:49,520 --> 00:20:54,559
is not comparable to the ci worker that

00:20:51,760 --> 00:20:57,120
you share with 50 other people

00:20:54,559 --> 00:20:58,640
you should also definitely avoid

00:20:57,120 --> 00:21:01,360
explicitly sleeping

00:20:58,640 --> 00:21:02,080
in your tests unfortunately the upstream

00:21:01,360 --> 00:21:05,679
examples

00:21:02,080 --> 00:21:08,159
include that in a few places so

00:21:05,679 --> 00:21:10,640
that's you should avoid that because

00:21:08,159 --> 00:21:13,520
again that will fail on the ci

00:21:10,640 --> 00:21:15,520
then also another thing is certain

00:21:13,520 --> 00:21:16,400
elements in vs code are invisible by

00:21:15,520 --> 00:21:18,080
default

00:21:16,400 --> 00:21:19,440
so for instance certain buttons only

00:21:18,080 --> 00:21:21,919
appear if you if

00:21:19,440 --> 00:21:24,320
you hover over another element with the

00:21:21,919 --> 00:21:24,720
mouse but that's a solvable problem it's

00:21:24,320 --> 00:21:27,120
just

00:21:24,720 --> 00:21:27,919
uh something to that you should keep in

00:21:27,120 --> 00:21:30,400
mind

00:21:27,919 --> 00:21:32,320
and the last thing is you will not get

00:21:30,400 --> 00:21:34,799
test coverage out of that that is

00:21:32,320 --> 00:21:35,840
more or less important effectively

00:21:34,799 --> 00:21:37,840
impossible

00:21:35,840 --> 00:21:40,240
on the other hand you shouldn't in my

00:21:37,840 --> 00:21:41,840
opinion rely on test coverage from

00:21:40,240 --> 00:21:44,960
integration tests

00:21:41,840 --> 00:21:46,240
anyway so good and since i'm already

00:21:44,960 --> 00:21:48,559
running pretty

00:21:46,240 --> 00:21:50,640
low on time here are a few links that

00:21:48,559 --> 00:21:53,280
you can find in the original slot

00:21:50,640 --> 00:21:55,360
in the slides the slide source the slice

00:21:53,280 --> 00:21:56,799
source code is here on github if you

00:21:55,360 --> 00:21:59,360
want to take a look

00:21:56,799 --> 00:22:00,960
the obligatory legal slide with who owns

00:21:59,360 --> 00:22:03,600
what the copyright

00:22:00,960 --> 00:22:05,120
and now i'm over i would like to thank

00:22:03,600 --> 00:22:08,720
you for your attention and i'm

00:22:05,120 --> 00:22:11,360
open for questions thank you don

00:22:08,720 --> 00:22:12,080
we have one question for you from brian

00:22:11,360 --> 00:22:13,760
hi dan

00:22:12,080 --> 00:22:15,520
thank you for a presentation i was

00:22:13,760 --> 00:22:18,799
wondering if you ever tried to mock

00:22:15,520 --> 00:22:21,440
certain parts of the vs code api and how

00:22:18,799 --> 00:22:25,520
would you go about it

00:22:21,440 --> 00:22:30,480
uh yeah so i i have done that

00:22:25,520 --> 00:22:33,840
um um it really depends on which parts

00:22:30,480 --> 00:22:37,440
of the vs code api you want to

00:22:33,840 --> 00:22:40,080
uh you want to mock out yeah this is

00:22:37,440 --> 00:22:42,000
this really depends on which which parts

00:22:40,080 --> 00:22:42,960
of the api you are you are thinking

00:22:42,000 --> 00:22:43,980
about

00:22:42,960 --> 00:22:47,200
so um

00:22:43,980 --> 00:22:47,200
[Music]

00:22:47,360 --> 00:22:51,200
so maybe a good idea to perhaps discuss

00:22:50,320 --> 00:22:53,840
this with brian

00:22:51,200 --> 00:22:54,320
in discord maybe in more detail because

00:22:53,840 --> 00:22:58,720
uh

00:22:54,320 --> 00:22:58,720
yeah like you said it depends so

00:22:58,799 --> 00:23:02,480
uh so don told us that he will be

00:23:00,799 --> 00:23:06,960
available in discord right

00:23:02,480 --> 00:23:09,520
after the talk i will be there so

00:23:06,960 --> 00:23:10,880
and that's it for the questions so i

00:23:09,520 --> 00:23:12,159
think we can wrap it up

00:23:10,880 --> 00:23:14,080
thank you don it was a great

00:23:12,159 --> 00:23:17,600
presentation thank you thanks

00:23:14,080 --> 00:23:18,799
thanks for having me and thank you for

00:23:17,600 --> 00:23:21,440
attending guys

00:23:18,799 --> 00:23:22,400
and like we said uh dan will be in the

00:23:21,440 --> 00:23:24,240
discord

00:23:22,400 --> 00:23:26,880
server after this talk so you can reach

00:23:24,240 --> 00:23:32,960
out to him there thank you

00:23:26,880 --> 00:23:32,960

YouTube URL: https://www.youtube.com/watch?v=gKFOJz52dG8


