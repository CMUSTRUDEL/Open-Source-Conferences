Title: Get Quarkus Fungy the next time you hit a Serverless dance floor! - DevConf.CZ 2021
Publication date: 2021-03-12
Playlist: DevConfCZ 2021
Description: 
	Speaker: Daniel Oh


No doubt to transition existing cloud-native microservices to serverless functions anytime for optimizing resources on Kubernetes but also scaling out the functions in a variety of FaaS/Serverless platforms at speed. However, each platform provides different APIs, syntax, and runtime restrictions to write a function that is not enjoyable works for serverless developers. Quarkus Funqy aims to provide portable Java APIs for developers to write a function and make it deployable on multiple Serverless platforms(i.e. AWS Lambda, Azure Functions, Google Cloud Functions, Knative Eventing). In this session, we'll walk you through how Quarkus Funqy makes you(developer) dance on the Serverless floor for fun without code changes. 


Schedule: https://sched.co/gmMV
Captions: 
	00:00:01,520 --> 00:00:04,319
my name is daniel oh i'm working for

00:00:03,760 --> 00:00:06,960
redhead

00:00:04,319 --> 00:00:08,639
as a technical marketing major so

00:00:06,960 --> 00:00:10,880
welcome to join the guest

00:00:08,639 --> 00:00:14,000
orchestra funky the next time you hit

00:00:10,880 --> 00:00:17,440
the submarines fence floor

00:00:14,000 --> 00:00:20,560
so just uh who am i uh

00:00:17,440 --> 00:00:22,800
as i say i'm um i'm technical marketing

00:00:20,560 --> 00:00:23,760
major at red hair uh specialized cloud

00:00:22,800 --> 00:00:26,720
every application

00:00:23,760 --> 00:00:27,199
development and also try to give some

00:00:26,720 --> 00:00:30,160
more

00:00:27,199 --> 00:00:31,439
uh actual practice for uh many

00:00:30,160 --> 00:00:33,920
enterprise developers

00:00:31,439 --> 00:00:34,960
but also idea operation team with exile

00:00:33,920 --> 00:00:37,520
and devops

00:00:34,960 --> 00:00:39,440
and also imcm super investor and the

00:00:37,520 --> 00:00:42,160
devops institute ambassador as well

00:00:39,440 --> 00:00:44,000
so here's my old contact point you got

00:00:42,160 --> 00:00:46,320
my twitter and you got my

00:00:44,000 --> 00:00:48,320
youtube channel and my gear repository

00:00:46,320 --> 00:00:50,239
please feel free to reach out to me

00:00:48,320 --> 00:00:52,480
if you have any questions around

00:00:50,239 --> 00:00:54,320
quarters and radio technology but also

00:00:52,480 --> 00:00:57,680
cncf stuff

00:00:54,320 --> 00:01:00,879
all right so just think about it and

00:00:57,680 --> 00:01:02,399
let's see one step back why we needed to

00:01:00,879 --> 00:01:06,000
subless and when

00:01:02,399 --> 00:01:09,360
the summaries came up so it almost

00:01:06,000 --> 00:01:11,680
uh five and six years ago

00:01:09,360 --> 00:01:12,880
at the beginning time we have only one

00:01:11,680 --> 00:01:16,080
serverless platform

00:01:12,880 --> 00:01:18,720
as say the sas service

00:01:16,080 --> 00:01:19,920
zone everybody say that lambda and

00:01:18,720 --> 00:01:23,439
everybody is still

00:01:19,920 --> 00:01:26,240
really loved to using lambda to address

00:01:23,439 --> 00:01:28,080
your serverless workload on top of that

00:01:26,240 --> 00:01:29,600
after a few years we have a more

00:01:28,080 --> 00:01:32,960
serverless platform

00:01:29,600 --> 00:01:36,880
and offering such as amazon google

00:01:32,960 --> 00:01:40,560
and ibm and even kubernetes provides

00:01:36,880 --> 00:01:43,600
serverless capability on top of the k

00:01:40,560 --> 00:01:46,560
native and then

00:01:43,600 --> 00:01:47,439
what happened uh at this moment there

00:01:46,560 --> 00:01:50,479
are lots of

00:01:47,439 --> 00:01:53,360
serverless uh platforms and

00:01:50,479 --> 00:01:54,240
uh frameworks and tools and even

00:01:53,360 --> 00:01:58,240
security

00:01:54,240 --> 00:02:01,280
uh ecosystem as well as you can see here

00:01:58,240 --> 00:02:02,399
this is came from the cncf serverless

00:02:01,280 --> 00:02:04,719
landscape

00:02:02,399 --> 00:02:05,840
there are a lot of tools which means oh

00:02:04,719 --> 00:02:08,479
we can

00:02:05,840 --> 00:02:10,080
address and implement design our

00:02:08,479 --> 00:02:12,959
serverless application

00:02:10,080 --> 00:02:14,160
and architecture and the platform even

00:02:12,959 --> 00:02:17,360
you can have

00:02:14,160 --> 00:02:19,920
managed services or you can install

00:02:17,360 --> 00:02:22,239
and build up your own manageable

00:02:19,920 --> 00:02:24,959
platform for your serverless application

00:02:22,239 --> 00:02:26,239
for example k-neb services and

00:02:24,959 --> 00:02:29,360
k-n-m-serving

00:02:26,239 --> 00:02:30,080
uh allows you make that happen so what

00:02:29,360 --> 00:02:32,800
is the concern

00:02:30,080 --> 00:02:33,840
were challenging with this serverless

00:02:32,800 --> 00:02:36,560
landscape

00:02:33,840 --> 00:02:37,280
it's too many choices for example i am

00:02:36,560 --> 00:02:39,920
individual

00:02:37,280 --> 00:02:41,040
java developer which is platform which

00:02:39,920 --> 00:02:44,160
is framework

00:02:41,040 --> 00:02:46,720
i have to use for designing

00:02:44,160 --> 00:02:47,440
use serverless application and develop

00:02:46,720 --> 00:02:50,000
reactive

00:02:47,440 --> 00:02:51,360
application on top of that for the

00:02:50,000 --> 00:02:54,480
devops engineers

00:02:51,360 --> 00:02:57,519
they needed to make a decision on which

00:02:54,480 --> 00:03:00,959
platform is a manageable or hosted

00:02:57,519 --> 00:03:03,519
or the instable platform would be

00:03:00,959 --> 00:03:04,319
perfect for their next generation devops

00:03:03,519 --> 00:03:07,280
platform

00:03:04,319 --> 00:03:08,239
as well as addressing traditional

00:03:07,280 --> 00:03:10,959
microservices

00:03:08,239 --> 00:03:11,440
but also serverless applications this is

00:03:10,959 --> 00:03:15,040
all

00:03:11,440 --> 00:03:17,360
a new tools framework is

00:03:15,040 --> 00:03:19,920
too much choices for as part of the

00:03:17,360 --> 00:03:22,720
burden for devops engineering architect

00:03:19,920 --> 00:03:24,080
individual developers here's a very

00:03:22,720 --> 00:03:27,840
interesting survey

00:03:24,080 --> 00:03:30,799
a new newly executed last year

00:03:27,840 --> 00:03:32,239
so as you see there are only six percent

00:03:30,799 --> 00:03:34,959
java developer

00:03:32,239 --> 00:03:36,000
uh really love to use the amazon render

00:03:34,959 --> 00:03:38,239
to

00:03:36,000 --> 00:03:39,840
handle their workload i mean vgc

00:03:38,239 --> 00:03:42,560
application workload

00:03:39,840 --> 00:03:43,120
on top of that more and more the

00:03:42,560 --> 00:03:44,879
front-end

00:03:43,120 --> 00:03:46,879
application developer or actually

00:03:44,879 --> 00:03:50,319
developer really love to use

00:03:46,879 --> 00:03:53,200
node.js and python why why

00:03:50,319 --> 00:03:54,640
they really love to use node.js python

00:03:53,200 --> 00:03:56,560
rather than java

00:03:54,640 --> 00:03:58,480
even though there are more than 10

00:03:56,560 --> 00:04:01,599
million java developer

00:03:58,480 --> 00:04:04,080
out there around the world to

00:04:01,599 --> 00:04:04,720
implement business application also

00:04:04,080 --> 00:04:07,280
maintain

00:04:04,720 --> 00:04:09,360
business improvement or bug fix or

00:04:07,280 --> 00:04:12,319
security problem every single day

00:04:09,360 --> 00:04:14,480
but still the language platform

00:04:12,319 --> 00:04:16,639
framework and the program language is

00:04:14,480 --> 00:04:17,840
really moving forward to node.js

00:04:16,639 --> 00:04:20,799
javascript base and

00:04:17,840 --> 00:04:21,919
python related java here is the reason

00:04:20,799 --> 00:04:25,040
why

00:04:21,919 --> 00:04:25,919
the java is not fitted in serverless

00:04:25,040 --> 00:04:29,600
architecture

00:04:25,919 --> 00:04:33,199
so first of all java was unreached

00:04:29,600 --> 00:04:34,080
upon the world back in 1995 almost 260

00:04:33,199 --> 00:04:36,800
years ago

00:04:34,080 --> 00:04:38,240
at a time java was designed for high

00:04:36,800 --> 00:04:41,600
network proof food

00:04:38,240 --> 00:04:45,600
which means it caused

00:04:41,600 --> 00:04:48,320
high expense to maintain the hype

00:04:45,600 --> 00:04:48,800
through food such as the big memory and

00:04:48,320 --> 00:04:52,080
the

00:04:48,800 --> 00:04:55,199
loan startup time and also

00:04:52,080 --> 00:04:56,720
once you deploy your application in

00:04:55,199 --> 00:04:59,360
production environment

00:04:56,720 --> 00:05:00,080
and there should be around a long

00:04:59,360 --> 00:05:03,199
process

00:05:00,080 --> 00:05:06,240
such as 24 7 without any

00:05:03,199 --> 00:05:09,680
download and then shutting down

00:05:06,240 --> 00:05:10,080
so it operation team totally accepted

00:05:09,680 --> 00:05:12,560
their

00:05:10,080 --> 00:05:13,759
loan learning process and maybe 10

00:05:12,560 --> 00:05:16,240
minutes startup time

00:05:13,759 --> 00:05:17,120
doesn't matter the startup time but

00:05:16,240 --> 00:05:20,560
should be

00:05:17,120 --> 00:05:23,759
a stable services for a long time

00:05:20,560 --> 00:05:26,400
that was the design criteria

00:05:23,759 --> 00:05:27,360
for developing java applications but

00:05:26,400 --> 00:05:30,960
also

00:05:27,360 --> 00:05:33,919
java definitely fundamentally have

00:05:30,960 --> 00:05:35,039
dynamic behavior which means once the

00:05:33,919 --> 00:05:38,639
developer

00:05:35,039 --> 00:05:41,360
build your java application they have

00:05:38,639 --> 00:05:43,520
a buy code which means that buy code can

00:05:41,360 --> 00:05:45,600
be running on any application server

00:05:43,520 --> 00:05:48,080
over the internet technology

00:05:45,600 --> 00:05:50,240
so you don't need to rely on specific

00:05:48,080 --> 00:05:51,120
application servers specific virtual

00:05:50,240 --> 00:05:53,919
machine

00:05:51,120 --> 00:05:55,520
this is that was a really great benefit

00:05:53,919 --> 00:05:58,319
and a feature

00:05:55,520 --> 00:06:00,479
to run your java application implement

00:05:58,319 --> 00:06:02,319
web application around the world with

00:06:00,479 --> 00:06:06,160
internet technology

00:06:02,319 --> 00:06:09,120
but after 10 years or 20 years later we

00:06:06,160 --> 00:06:12,240
have such a great technology and also

00:06:09,120 --> 00:06:15,280
their technology allows us to run

00:06:12,240 --> 00:06:17,360
a new application in time such as

00:06:15,280 --> 00:06:19,199
immutable infrastructure such as we

00:06:17,360 --> 00:06:20,800
called up kubernetes

00:06:19,199 --> 00:06:22,240
and right there approach this is one of

00:06:20,800 --> 00:06:26,080
the enterprise already

00:06:22,240 --> 00:06:27,280
kubernetes services so in this immutable

00:06:26,080 --> 00:06:31,039
infrastructure

00:06:27,280 --> 00:06:33,759
uh you have to run one single microsoft

00:06:31,039 --> 00:06:35,680
application but you have to consider

00:06:33,759 --> 00:06:39,039
scalability which means the same

00:06:35,680 --> 00:06:42,240
application but scale out thousand

00:06:39,039 --> 00:06:42,880
parts on kubernetes cluster so we don't

00:06:42,240 --> 00:06:46,720
need to

00:06:42,880 --> 00:06:47,520
uh dynamic behavior any longer it's not

00:06:46,720 --> 00:06:50,560
a good

00:06:47,520 --> 00:06:54,080
benefit or even an advantage in this

00:06:50,560 --> 00:06:56,160
immutable infrastructure at the moment

00:06:54,080 --> 00:06:57,520
that's why we needed something different

00:06:56,160 --> 00:07:01,280
if you still need to

00:06:57,520 --> 00:07:04,160
java technology to run and

00:07:01,280 --> 00:07:06,720
architect with the container slash club

00:07:04,160 --> 00:07:10,319
analysis technologies

00:07:06,720 --> 00:07:13,520
so carcass was born and designed to

00:07:10,319 --> 00:07:15,919
overcome this potential challenge so

00:07:13,520 --> 00:07:19,039
carcass is 100 open-source

00:07:15,919 --> 00:07:22,400
project and it allows the developer

00:07:19,039 --> 00:07:25,520
to implement cloud-level microservice

00:07:22,400 --> 00:07:29,039
as well as design serverless application

00:07:25,520 --> 00:07:30,800
which he enabled to run your serverless

00:07:29,039 --> 00:07:31,840
application with the event driven

00:07:30,800 --> 00:07:34,160
architecture

00:07:31,840 --> 00:07:35,759
and then you can communicate back-end or

00:07:34,160 --> 00:07:39,280
distributing systems such as

00:07:35,759 --> 00:07:43,120
copycat messages services so

00:07:39,280 --> 00:07:46,560
with the quercus uh totally emphasized

00:07:43,120 --> 00:07:48,879
on optimizing the your

00:07:46,560 --> 00:07:50,000
java technology and architecture for

00:07:48,879 --> 00:07:52,720
example

00:07:50,000 --> 00:07:53,840
uh you can run your java application on

00:07:52,720 --> 00:07:56,479
openglk

00:07:53,840 --> 00:07:58,240
like a jvm but also you can run without

00:07:56,479 --> 00:08:01,039
jvm just so you could

00:07:58,240 --> 00:08:03,039
have executable file called uh network

00:08:01,039 --> 00:08:06,160
executable binary

00:08:03,039 --> 00:08:09,280
and you can see the like cycle

00:08:06,160 --> 00:08:12,560
pre shorter such as

00:08:09,280 --> 00:08:15,599
just you can deploy every maybe

00:08:12,560 --> 00:08:16,319
thousand time in a day or start of time

00:08:15,599 --> 00:08:19,759
from

00:08:16,319 --> 00:08:22,240
seconds to millisecond

00:08:19,759 --> 00:08:24,639
and how it works because the quarkx

00:08:22,240 --> 00:08:28,160
gives them two options for developer

00:08:24,639 --> 00:08:31,199
from compile application and then

00:08:28,160 --> 00:08:32,080
create your buy code and then you have a

00:08:31,199 --> 00:08:34,640
two choices

00:08:32,080 --> 00:08:36,080
to make the runnable audio first of all

00:08:34,640 --> 00:08:37,839
uh based on java

00:08:36,080 --> 00:08:39,680
the java file something like that and

00:08:37,839 --> 00:08:42,959
then you can have take the

00:08:39,680 --> 00:08:45,120
ahead of time compo compilation strategy

00:08:42,959 --> 00:08:46,320
which he allows you have a near

00:08:45,120 --> 00:08:48,399
executable file

00:08:46,320 --> 00:08:49,440
so you can just run that file just like

00:08:48,399 --> 00:08:51,920
a go

00:08:49,440 --> 00:08:53,600
and the more important thing is quartus

00:08:51,920 --> 00:08:56,640
shipped to all

00:08:53,600 --> 00:08:59,120
necessary tasks when you run time such

00:08:56,640 --> 00:09:02,399
as the annotation scanning or

00:08:59,120 --> 00:09:05,279
price descriptor and the enable disables

00:09:02,399 --> 00:09:07,760
specific feature and configuration this

00:09:05,279 --> 00:09:10,080
always happening at runtime when you run

00:09:07,760 --> 00:09:13,760
java application traditionally

00:09:10,080 --> 00:09:17,600
but focus move that requires requests

00:09:13,760 --> 00:09:20,959
and tasks from runtime to build time

00:09:17,600 --> 00:09:22,480
so this is a huge impact makes your java

00:09:20,959 --> 00:09:25,440
application lighter

00:09:22,480 --> 00:09:26,160
smaller really fitting in your container

00:09:25,440 --> 00:09:29,600
plus

00:09:26,160 --> 00:09:32,959
kubernetes technologies so

00:09:29,600 --> 00:09:35,120
how do quarkus support uh

00:09:32,959 --> 00:09:37,440
the native compilation strategies the

00:09:35,120 --> 00:09:39,839
naval comparation came from

00:09:37,440 --> 00:09:40,640
uh the grive vm technology and the

00:09:39,839 --> 00:09:43,200
graveyard

00:09:40,640 --> 00:09:46,240
invented by oracle and then there were

00:09:43,200 --> 00:09:49,279
two versions community edition but also

00:09:46,240 --> 00:09:53,040
in a project edition the carcass more

00:09:49,279 --> 00:09:56,240
uh support the mandrel

00:09:53,040 --> 00:09:59,519
downstream project from graviem which

00:09:56,240 --> 00:10:02,320
aligned to open jdk technology and we

00:09:59,519 --> 00:10:03,360
also keep maintaining the security

00:10:02,320 --> 00:10:06,800
problems such as

00:10:03,360 --> 00:10:08,640
cve and also we're going to add more

00:10:06,800 --> 00:10:10,240
enterprise capabilities such as

00:10:08,640 --> 00:10:13,519
debugging and monitoring

00:10:10,240 --> 00:10:16,079
et cetera so this is the only way uh

00:10:13,519 --> 00:10:17,120
quarkx supports nato corporation based

00:10:16,079 --> 00:10:20,640
on manual

00:10:17,120 --> 00:10:24,240
project and how quercus

00:10:20,640 --> 00:10:27,440
address the function and serverless

00:10:24,240 --> 00:10:30,079
capability for your application

00:10:27,440 --> 00:10:31,279
here's a really uh interesting you know

00:10:30,079 --> 00:10:34,880
i really love this

00:10:31,279 --> 00:10:37,839
name so funky it's one of the extension

00:10:34,880 --> 00:10:39,760
of corkers though the extension means

00:10:37,839 --> 00:10:41,680
it's a wonderful capability

00:10:39,760 --> 00:10:43,200
just imagine that if you have some

00:10:41,680 --> 00:10:46,320
experience to develop

00:10:43,200 --> 00:10:49,040
maven project on java application you

00:10:46,320 --> 00:10:50,640
you need to define multiple dependency

00:10:49,040 --> 00:10:54,160
on your project

00:10:50,640 --> 00:10:56,240
such as the jxrs or data transaction

00:10:54,160 --> 00:10:58,959
like a postgresql or

00:10:56,240 --> 00:11:00,399
mongodb this is all capability on your

00:10:58,959 --> 00:11:02,560
java application

00:11:00,399 --> 00:11:04,959
which is specified and defined on your

00:11:02,560 --> 00:11:07,920
pubmed xml as a dependency

00:11:04,959 --> 00:11:09,839
the focus extension is the way uh

00:11:07,920 --> 00:11:13,760
specified that dependency

00:11:09,839 --> 00:11:17,440
and capability so one of the extension

00:11:13,760 --> 00:11:20,480
uh no the name is the funky allows so

00:11:17,440 --> 00:11:21,600
you have a portable java ap to write

00:11:20,480 --> 00:11:24,240
your function

00:11:21,600 --> 00:11:25,760
and which you deploy multiple fast

00:11:24,240 --> 00:11:29,040
platforms like a google

00:11:25,760 --> 00:11:31,920
amazon and k native and also the

00:11:29,040 --> 00:11:32,560
microsoft etcetera and this is your code

00:11:31,920 --> 00:11:36,000
snippet

00:11:32,560 --> 00:11:38,320
and just funk uh annotation make your

00:11:36,000 --> 00:11:41,120
your java method as a function i'm going

00:11:38,320 --> 00:11:44,000
to show you quick demo just a bit later

00:11:41,120 --> 00:11:45,360
so also you can have a traditional

00:11:44,000 --> 00:11:47,839
request response

00:11:45,360 --> 00:11:49,680
synchronized application function but

00:11:47,839 --> 00:11:52,959
also you can handle

00:11:49,680 --> 00:11:55,519
a synchronized reactive application just

00:11:52,959 --> 00:11:56,800
easy but still using phone annotation

00:11:55,519 --> 00:12:00,560
but you just define

00:11:56,800 --> 00:12:01,680
the written code from uh just string

00:12:00,560 --> 00:12:04,720
type but this is

00:12:01,680 --> 00:12:05,440
the uni or mutiny uh reactive type in

00:12:04,720 --> 00:12:07,600
the

00:12:05,440 --> 00:12:08,959
quartus format or a wire your

00:12:07,600 --> 00:12:13,040
application method

00:12:08,959 --> 00:12:16,320
as a reactive uh capability

00:12:13,040 --> 00:12:19,360
and also you can have the context

00:12:16,320 --> 00:12:21,519
dependency injection like a spring di by

00:12:19,360 --> 00:12:23,200
default this is one of the beauty of the

00:12:21,519 --> 00:12:26,639
carcass framework

00:12:23,200 --> 00:12:29,440
to have the cdi injection

00:12:26,639 --> 00:12:31,839
and here is your uh what kind of subless

00:12:29,440 --> 00:12:34,639
platform what fast problem you could use

00:12:31,839 --> 00:12:36,720
you could deploy with exactly the same

00:12:34,639 --> 00:12:39,519
quality application as a function

00:12:36,720 --> 00:12:40,560
so just you can deploy function as a

00:12:39,519 --> 00:12:44,079
standalone

00:12:40,560 --> 00:12:46,880
or you can deploy amazon render or know

00:12:44,079 --> 00:12:48,480
event or azure function and your google

00:12:46,880 --> 00:12:50,880
function google cloud

00:12:48,480 --> 00:12:53,279
this you don't need to figure out the

00:12:50,880 --> 00:12:56,880
syntax or api

00:12:53,279 --> 00:12:58,720
to deploy the specific cloud platform

00:12:56,880 --> 00:13:00,639
which means you don't need to change any

00:12:58,720 --> 00:13:02,800
code just you need to figure it out

00:13:00,639 --> 00:13:04,639
and put in your configuration on your

00:13:02,800 --> 00:13:07,600
application properly

00:13:04,639 --> 00:13:07,839
such for example target platform is this

00:13:07,600 --> 00:13:10,480
is

00:13:07,839 --> 00:13:12,320
amazon this is google this is a

00:13:10,480 --> 00:13:16,000
microsoft this is a k name

00:13:12,320 --> 00:13:18,639
etcetera and one thing a little bit

00:13:16,000 --> 00:13:20,639
redone k native because everybody is

00:13:18,639 --> 00:13:22,320
doing kubernetes and the kubernetes

00:13:20,639 --> 00:13:26,079
provide the k-nav

00:13:22,320 --> 00:13:29,200
which allows you manage deploy and

00:13:26,079 --> 00:13:30,560
implement uh serverless applications on

00:13:29,200 --> 00:13:34,880
top of the kubernetes

00:13:30,560 --> 00:13:36,720
so you just need to k natively

00:13:34,880 --> 00:13:39,120
manifest using quartus because your

00:13:36,720 --> 00:13:42,320
quarkus funky annotation

00:13:39,120 --> 00:13:44,720
uh automatically generate your k name

00:13:42,320 --> 00:13:47,440
will manifest yeah mobile just like that

00:13:44,720 --> 00:13:51,279
you just need to put into one carcass

00:13:47,440 --> 00:13:54,160
deployment this target equal k name

00:13:51,279 --> 00:13:55,519
this uh app just one single key value

00:13:54,160 --> 00:13:58,000
compilation

00:13:55,519 --> 00:13:59,279
uh make that happen just like the right

00:13:58,000 --> 00:14:02,399
side use

00:13:59,279 --> 00:14:05,199
yemo snippet and then

00:14:02,399 --> 00:14:05,519
with with this all focused things you

00:14:05,199 --> 00:14:08,320
just

00:14:05,519 --> 00:14:08,800
need to write your code just like a

00:14:08,320 --> 00:14:12,000
function

00:14:08,800 --> 00:14:14,880
in the packaging using maven or gradle

00:14:12,000 --> 00:14:16,160
and then deploy uh like a maven or

00:14:14,880 --> 00:14:18,959
greater command line

00:14:16,160 --> 00:14:20,880
just three steps from application

00:14:18,959 --> 00:14:23,920
development to deploy your

00:14:20,880 --> 00:14:26,639
application to kubernetes cluster for

00:14:23,920 --> 00:14:27,199
serverless application so i'm going to

00:14:26,639 --> 00:14:30,160
start

00:14:27,199 --> 00:14:31,040
talking and just jump into demo how it

00:14:30,160 --> 00:14:34,880
works

00:14:31,040 --> 00:14:36,720
so start my project mode and then

00:14:34,880 --> 00:14:37,920
here's my local environment i'm going to

00:14:36,720 --> 00:14:40,959
using the k

00:14:37,920 --> 00:14:43,839
neighbor serving command line aka kn

00:14:40,959 --> 00:14:46,399
and there are some ads on km func uh

00:14:43,839 --> 00:14:46,959
it's a dev preview in openshift.460

00:14:46,399 --> 00:14:48,720
cluster

00:14:46,959 --> 00:14:51,040
as part of the operation serverless

00:14:48,720 --> 00:14:54,000
operator and capability

00:14:51,040 --> 00:14:55,199
so here's my sample uh local trajectory

00:14:54,000 --> 00:14:58,240
as you can see

00:14:55,199 --> 00:15:00,399
i have some spew experiment thing here

00:14:58,240 --> 00:15:01,839
so first of all i'm going to need to

00:15:00,399 --> 00:15:05,199
create my

00:15:01,839 --> 00:15:08,720
function project so k n func and

00:15:05,199 --> 00:15:10,320
create and the quarkx the function name

00:15:08,720 --> 00:15:14,160
quarkx func

00:15:10,320 --> 00:15:18,320
and then uh i'm going to use

00:15:14,160 --> 00:15:18,320
the runtime environment in the partners

00:15:18,880 --> 00:15:25,360
there we go and then now we have a new

00:15:22,560 --> 00:15:26,399
cordless phone project is automatically

00:15:25,360 --> 00:15:29,360
generated

00:15:26,399 --> 00:15:30,160
and you go to progress project and then

00:15:29,360 --> 00:15:32,079
you can find

00:15:30,160 --> 00:15:34,160
that the maven project automatically

00:15:32,079 --> 00:15:37,279
generated and let's take a look at the

00:15:34,160 --> 00:15:37,279
fun emo file

00:15:37,360 --> 00:15:41,519
as you can see uh the function name

00:15:39,759 --> 00:15:44,639
quarkxphone and namespace

00:15:41,519 --> 00:15:46,560
each which is a referring to your

00:15:44,639 --> 00:15:48,160
kubernetes namespace will openshift the

00:15:46,560 --> 00:15:50,959
project name and runtime

00:15:48,160 --> 00:15:52,720
particles actually this function allows

00:15:50,959 --> 00:15:53,680
you have a multiple runtime like a

00:15:52,720 --> 00:15:56,800
springboard

00:15:53,680 --> 00:15:59,519
and quarkus you know the js and go

00:15:56,800 --> 00:15:59,839
you know we don't have we don't uh build

00:15:59,519 --> 00:16:02,320
this

00:15:59,839 --> 00:16:02,959
application at this moment yet so that's

00:16:02,320 --> 00:16:06,839
why there's

00:16:02,959 --> 00:16:08,000
no image uh some value in the trigger

00:16:06,839 --> 00:16:11,440
http

00:16:08,000 --> 00:16:13,759
and also bigger imagery here so so

00:16:11,440 --> 00:16:14,959
next step i'm going to deploy this

00:16:13,759 --> 00:16:17,519
application but

00:16:14,959 --> 00:16:18,720
before that we're going to just use one

00:16:17,519 --> 00:16:20,839
java id2

00:16:18,720 --> 00:16:23,519
take a look at a little bit detail this

00:16:20,839 --> 00:16:26,000
application

00:16:23,519 --> 00:16:27,360
so i'm going to make it a little bit

00:16:26,000 --> 00:16:31,519
bigger

00:16:27,360 --> 00:16:34,240
which make you comfortable to see it

00:16:31,519 --> 00:16:36,240
and here's a fun emo file and then go to

00:16:34,240 --> 00:16:40,079
source directory

00:16:36,240 --> 00:16:41,759
in the pub.xml there are quarkx version

00:16:40,079 --> 00:16:43,600
and then you can see here the frankie

00:16:41,759 --> 00:16:48,000
kennedy event already

00:16:43,600 --> 00:16:51,199
uh pull down your application and go to

00:16:48,000 --> 00:16:52,639
our java file here's a function just

00:16:51,199 --> 00:16:55,680
like a cool snippet

00:16:52,639 --> 00:16:56,160
uh we just needed to one func annotation

00:16:55,680 --> 00:16:58,480
here

00:16:56,160 --> 00:17:00,000
and then the other method just like a

00:16:58,480 --> 00:17:02,880
pojo

00:17:00,000 --> 00:17:05,520
and then it's just input the json file

00:17:02,880 --> 00:17:07,839
messaging and then output the json file

00:17:05,520 --> 00:17:10,319
messaging so simple you couldn't get

00:17:07,839 --> 00:17:12,160
started to add more pages or capability

00:17:10,319 --> 00:17:15,439
on this application

00:17:12,160 --> 00:17:18,640
on this disk template okay and go

00:17:15,439 --> 00:17:20,559
back to func yemo in the back to the

00:17:18,640 --> 00:17:23,520
terminal in the next step

00:17:20,559 --> 00:17:24,799
i'm going to just deploy this

00:17:23,520 --> 00:17:28,799
application

00:17:24,799 --> 00:17:31,360
and i'm going to specify the

00:17:28,799 --> 00:17:32,080
container registry once i build this

00:17:31,360 --> 00:17:34,880
application

00:17:32,080 --> 00:17:35,280
as a job file and then i'm going to do

00:17:34,880 --> 00:17:37,799
uh

00:17:35,280 --> 00:17:39,120
unload and push this application as a

00:17:37,799 --> 00:17:42,160
containerization

00:17:39,120 --> 00:17:45,200
and then we will

00:17:42,160 --> 00:17:46,000
pull the image when we deploy this

00:17:45,200 --> 00:17:47,760
application to

00:17:46,000 --> 00:17:49,679
kubernetes or opportunity container

00:17:47,760 --> 00:17:50,240
prepper for today i'm going to use the

00:17:49,679 --> 00:17:54,160
operation

00:17:50,240 --> 00:17:54,160
460 cluster and my

00:17:55,919 --> 00:18:01,120
the registry and then the namespace

00:17:59,039 --> 00:18:04,640
we're going to use the quarkx

00:18:01,120 --> 00:18:08,080
uh function namespace and

00:18:04,640 --> 00:18:08,640
browse here so for the run it here you

00:18:08,080 --> 00:18:11,919
might open

00:18:08,640 --> 00:18:14,480
the cluster and then

00:18:11,919 --> 00:18:15,200
the qualcomm there's no resources here

00:18:14,480 --> 00:18:17,840
uh there's

00:18:15,200 --> 00:18:19,679
no uh pod or anything because i didn't

00:18:17,840 --> 00:18:22,240
deploy anything at this moment

00:18:19,679 --> 00:18:24,080
and back to here i'm gonna run this

00:18:22,240 --> 00:18:24,720
application the first step i'm gonna

00:18:24,080 --> 00:18:28,400
build this

00:18:24,720 --> 00:18:30,799
application like the java the maven

00:18:28,400 --> 00:18:33,600
packaging something like that the

00:18:30,799 --> 00:18:35,240
basically we using buildpad project to

00:18:33,600 --> 00:18:37,280
build this application and

00:18:35,240 --> 00:18:40,000
containerization and pushy pro

00:18:37,280 --> 00:18:41,280
etc so as you can see when you go back

00:18:40,000 --> 00:18:43,760
to iid 2

00:18:41,280 --> 00:18:44,720
you can find that the namespace is

00:18:43,760 --> 00:18:47,679
automatically

00:18:44,720 --> 00:18:48,640
updated based on our parameter in our

00:18:47,679 --> 00:18:51,760
command line

00:18:48,640 --> 00:18:54,080
and the image i just updated it

00:18:51,760 --> 00:18:54,960
because i put in this as a parameter

00:18:54,080 --> 00:18:56,960
when i

00:18:54,960 --> 00:18:59,039
run the ka funko camaro line and the

00:18:56,960 --> 00:19:00,160
image digester will be updated soon yeah

00:18:59,039 --> 00:19:01,760
just like here

00:19:00,160 --> 00:19:03,840
because when you go back to terminal

00:19:01,760 --> 00:19:06,480
it's already uh the

00:19:03,840 --> 00:19:08,559
push there and we need to uh k number

00:19:06,480 --> 00:19:09,120
serving become ready and when you go to

00:19:08,559 --> 00:19:12,480
or push

00:19:09,120 --> 00:19:16,240
container platform now you can see the

00:19:12,480 --> 00:19:16,880
your editor server is already deployed

00:19:16,240 --> 00:19:20,640
when you click

00:19:16,880 --> 00:19:22,960
on build you can find here here is a jvm

00:19:20,640 --> 00:19:24,320
application and then you just need to

00:19:22,960 --> 00:19:26,559
pull 60 seconds

00:19:24,320 --> 00:19:29,840
uh to start up almost one half a second

00:19:26,559 --> 00:19:33,039
to start up and go back to topology view

00:19:29,840 --> 00:19:35,120
and then one thing uh maybe interesting

00:19:33,039 --> 00:19:38,640
we need to add a label here

00:19:35,120 --> 00:19:41,760
like a approach to that i o

00:19:38,640 --> 00:19:43,120
and one time equal forecast because we

00:19:41,760 --> 00:19:46,160
need to differ one more time

00:19:43,120 --> 00:19:50,240
today now you can see quarkus

00:19:46,160 --> 00:19:53,520
and then uh go back to here

00:19:50,240 --> 00:19:59,120
and here is the rest endpoint uh your

00:19:53,520 --> 00:19:59,120
focus application and i just try to copy

00:19:59,600 --> 00:20:06,480
and try to uh

00:20:03,039 --> 00:20:09,600
call an invoke endpoint here

00:20:06,480 --> 00:20:14,000
the messaging like a json

00:20:09,600 --> 00:20:17,760
and like a parker's function

00:20:14,000 --> 00:20:21,520
and all

00:20:17,760 --> 00:20:24,320
the end point here

00:20:21,520 --> 00:20:25,520
let's give it some moment yeah so our

00:20:24,320 --> 00:20:27,840
application

00:20:25,520 --> 00:20:29,280
already terminating which means the

00:20:27,840 --> 00:20:33,120
default configuration

00:20:29,280 --> 00:20:36,640
setting is story second which means

00:20:33,120 --> 00:20:38,799
if there's no demand or request to this

00:20:36,640 --> 00:20:41,280
application serverless function this

00:20:38,799 --> 00:20:44,000
will be scaled down to zero

00:20:41,280 --> 00:20:44,400
by default just like a server's behavior

00:20:44,000 --> 00:20:47,440
like

00:20:44,400 --> 00:20:50,320
amazon lambda and then once

00:20:47,440 --> 00:20:50,640
it already terminated and down to zero

00:20:50,320 --> 00:20:54,000
and

00:20:50,640 --> 00:20:56,960
we will uh invoke and trigger this

00:20:54,000 --> 00:20:58,320
sublist function using a call command

00:20:56,960 --> 00:21:01,440
like a http

00:20:58,320 --> 00:21:04,640
request and this will be uh go

00:21:01,440 --> 00:21:06,880
up automatically like a core star one of

00:21:04,640 --> 00:21:08,400
the behavior of a serverless application

00:21:06,880 --> 00:21:11,200
okay we just down

00:21:08,400 --> 00:21:12,640
and back to here and then just trigger

00:21:11,200 --> 00:21:16,000
your application

00:21:12,640 --> 00:21:18,960
using http brocco and back to here

00:21:16,000 --> 00:21:19,679
your application just started this is

00:21:18,960 --> 00:21:22,480
the

00:21:19,679 --> 00:21:23,520
uh ejector same behavior your serverless

00:21:22,480 --> 00:21:26,559
application

00:21:23,520 --> 00:21:28,799
and now we got the return is a

00:21:26,559 --> 00:21:30,000
code it takes just two seconds to make

00:21:28,799 --> 00:21:32,559
that happening so let's

00:21:30,000 --> 00:21:34,159
try to warm up another experimental

00:21:32,559 --> 00:21:37,760
thing so go back to here

00:21:34,159 --> 00:21:40,880
and try to uh using native compilation

00:21:37,760 --> 00:21:41,280
so just make sure the different function

00:21:40,880 --> 00:21:44,320
name

00:21:41,280 --> 00:21:47,520
native and then immediately

00:21:44,320 --> 00:21:51,760
also native in the builder we

00:21:47,520 --> 00:21:55,039
just need to uh here

00:21:51,760 --> 00:21:56,240
uh native so this uh make your

00:21:55,039 --> 00:21:58,480
application live

00:21:56,240 --> 00:21:59,280
compilation so go back to terminal

00:21:58,480 --> 00:22:02,320
window

00:21:59,280 --> 00:22:06,480
and then okay

00:22:02,320 --> 00:22:10,000
phone command line and deploy once again

00:22:06,480 --> 00:22:12,080
so this will be

00:22:10,000 --> 00:22:13,600
packaging your application user builder

00:22:12,080 --> 00:22:17,280
pack but as you can see

00:22:13,600 --> 00:22:20,480
we got a using the native and then uh

00:22:17,280 --> 00:22:21,919
we gonna uh package this application as

00:22:20,480 --> 00:22:25,280
a native executable

00:22:21,919 --> 00:22:27,120
file based on graviem and

00:22:25,280 --> 00:22:28,720
it takes a little bit longer than our

00:22:27,120 --> 00:22:32,240
previous uh

00:22:28,720 --> 00:22:36,000
deploy because the neighbor corporation

00:22:32,240 --> 00:22:37,039
uh compare your own necessary dependency

00:22:36,000 --> 00:22:40,159
and library

00:22:37,039 --> 00:22:42,159
etc just like you see uh container

00:22:40,159 --> 00:22:45,360
images immutable

00:22:42,159 --> 00:22:48,400
file which contain all

00:22:45,360 --> 00:22:51,280
necessary uh file to run

00:22:48,400 --> 00:22:51,919
that container so it's a exact the

00:22:51,280 --> 00:22:54,000
similar

00:22:51,919 --> 00:22:55,200
concepts it takes a little bit longer so

00:22:54,000 --> 00:22:57,440
in the meantime

00:22:55,200 --> 00:22:58,480
let's try to open your terminal and what

00:22:57,440 --> 00:23:01,760
kind of

00:22:58,480 --> 00:23:03,520
uh capability the km func provider for

00:23:01,760 --> 00:23:07,200
example

00:23:03,520 --> 00:23:09,600
kn phone could create and i'm going to

00:23:07,200 --> 00:23:10,240
help command line you can see here you

00:23:09,600 --> 00:23:13,120
can

00:23:10,240 --> 00:23:14,080
uh select the multiple runtime for

00:23:13,120 --> 00:23:16,960
example

00:23:14,080 --> 00:23:17,520
go node.js quarkx and a springboard

00:23:16,960 --> 00:23:20,640
default

00:23:17,520 --> 00:23:22,000
is node.js and you can also trigger a

00:23:20,640 --> 00:23:24,720
default http

00:23:22,000 --> 00:23:26,080
we just did it and then you can also uh

00:23:24,720 --> 00:23:29,120
send in the event

00:23:26,080 --> 00:23:32,400
and then once you use an event the your

00:23:29,120 --> 00:23:35,760
template project will be generated the

00:23:32,400 --> 00:23:36,880
cloud event source code rather than http

00:23:35,760 --> 00:23:40,240
or request

00:23:36,880 --> 00:23:44,159
response java method

00:23:40,240 --> 00:23:47,120
okay and then when you go to

00:23:44,159 --> 00:23:48,840
uh here in the let's try to switch

00:23:47,120 --> 00:23:51,679
another project

00:23:48,840 --> 00:23:54,240
here so

00:23:51,679 --> 00:23:56,559
delra this is all about developer

00:23:54,240 --> 00:23:56,799
standpoint but what about operation team

00:23:56,559 --> 00:23:59,039
and

00:23:56,799 --> 00:24:00,240
they also care about serverless and

00:23:59,039 --> 00:24:03,279
function on their

00:24:00,240 --> 00:24:05,440
uh on top of their own platform

00:24:03,279 --> 00:24:06,480
so here is the another good way to

00:24:05,440 --> 00:24:09,520
operate the full

00:24:06,480 --> 00:24:13,120
six cluster or later version provide the

00:24:09,520 --> 00:24:16,840
ham chart it's one of the popular uh

00:24:13,120 --> 00:24:19,679
uh tool to manage your

00:24:16,840 --> 00:24:22,159
software template or

00:24:19,679 --> 00:24:23,760
maintain like a day to operation so when

00:24:22,159 --> 00:24:27,520
you go to ham chart

00:24:23,760 --> 00:24:30,720
and then world topology you can actually

00:24:27,520 --> 00:24:32,720
uh add the ham chart and there are

00:24:30,720 --> 00:24:34,000
quarter same chart already there it's a

00:24:32,720 --> 00:24:36,799
still

00:24:34,000 --> 00:24:37,440
preview feature but you can actually use

00:24:36,799 --> 00:24:40,720
that

00:24:37,440 --> 00:24:40,960
so for devops engineer or operation team

00:24:40,720 --> 00:24:43,840
or

00:24:40,960 --> 00:24:45,760
sre they can actually install hem

00:24:43,840 --> 00:24:48,240
charcoal

00:24:45,760 --> 00:24:50,320
stay caucus in one time they can also

00:24:48,240 --> 00:24:52,559
add some specific configuration

00:24:50,320 --> 00:24:54,559
so just imagine okay i will i need to

00:24:52,559 --> 00:24:58,159
some a standard

00:24:54,559 --> 00:25:00,720
application server like a jboss eap or

00:24:58,159 --> 00:25:01,279
apache web server they need to define

00:25:00,720 --> 00:25:04,400
based on

00:25:01,279 --> 00:25:06,960
openshift template or kubota cmo file or

00:25:04,400 --> 00:25:08,640
operator or any support now they can do

00:25:06,960 --> 00:25:11,840
that same capability

00:25:08,640 --> 00:25:15,360
with the ham chart for carcass

00:25:11,840 --> 00:25:19,600
standard runtimes just install hem chart

00:25:15,360 --> 00:25:23,039
and then install your hem chart here

00:25:19,600 --> 00:25:26,480
okay i'm going to try to a new one

00:25:23,039 --> 00:25:28,159
and install your ham chart and it takes

00:25:26,480 --> 00:25:30,880
a few seconds

00:25:28,159 --> 00:25:31,279
and then you can go to uh but you got a

00:25:30,880 --> 00:25:33,679
lot of

00:25:31,279 --> 00:25:35,279
image food back up but don't scare you

00:25:33,679 --> 00:25:36,960
about don't freak out when you go to

00:25:35,279 --> 00:25:39,840
hampshire and you could never

00:25:36,960 --> 00:25:42,000
hand you and go to regionals you can

00:25:39,840 --> 00:25:44,799
find you will deploy my rear report

00:25:42,000 --> 00:25:46,000
image full error or imaging fullback up

00:25:44,799 --> 00:25:49,440
because the skill

00:25:46,000 --> 00:25:51,679
build is ongoing so when you go to build

00:25:49,440 --> 00:25:52,720
and then use qualcomm and go to build

00:25:51,679 --> 00:25:55,520
menu you can find

00:25:52,720 --> 00:25:56,159
the logs file here it takes a few

00:25:55,520 --> 00:25:59,520
minutes

00:25:56,159 --> 00:26:02,480
to uh finish your build your application

00:25:59,520 --> 00:26:03,360
in the meantime as you see uh this will

00:26:02,480 --> 00:26:06,320
ham chad

00:26:03,360 --> 00:26:07,120
clone the exchange sample application

00:26:06,320 --> 00:26:10,720
and then

00:26:07,120 --> 00:26:12,799
build that application using maven or

00:26:10,720 --> 00:26:14,880
the gradle and then packaging just like

00:26:12,799 --> 00:26:17,760
a s2i source to image

00:26:14,880 --> 00:26:19,200
process let's go back to our terminal

00:26:17,760 --> 00:26:21,760
window

00:26:19,200 --> 00:26:23,440
and how did oh you're the neighbor

00:26:21,760 --> 00:26:26,799
comparison just did it

00:26:23,440 --> 00:26:29,520
and go back to operation to console

00:26:26,799 --> 00:26:30,320
and now we have a new uh native

00:26:29,520 --> 00:26:31,919
compilation

00:26:30,320 --> 00:26:33,760
it's already terminating uh during the

00:26:31,919 --> 00:26:38,080
dead time okay i'm gonna do

00:26:33,760 --> 00:26:41,520
uh just trigger one more time

00:26:38,080 --> 00:26:45,360
and copy here and then

00:26:41,520 --> 00:26:48,720
echo so i'm gonna just delete it

00:26:45,360 --> 00:26:50,720
uh the endpoint new endpoint and then

00:26:48,720 --> 00:26:53,760
just try to another message like a

00:26:50,720 --> 00:26:56,720
quarkus native function

00:26:53,760 --> 00:26:57,120
and then go back to control and then we

00:26:56,720 --> 00:27:00,400
see

00:26:57,120 --> 00:27:02,240
application automatically scale up

00:27:00,400 --> 00:27:04,159
and then just regular uh negative

00:27:02,240 --> 00:27:05,440
corporation return but it takes a little

00:27:04,159 --> 00:27:08,640
bit faster

00:27:05,440 --> 00:27:10,240
as you can see the start-up time here uh

00:27:08,640 --> 00:27:13,720
just 32 milliseconds

00:27:10,240 --> 00:27:17,279
previously with the jvm we just see uh

00:27:13,720 --> 00:27:19,360
4.5 seconds it's a almost 100 faster

00:27:17,279 --> 00:27:20,480
than any application this is repeating

00:27:19,360 --> 00:27:23,600
native compilation with

00:27:20,480 --> 00:27:26,720
your serverless and they go to here

00:27:23,600 --> 00:27:28,240
your application almost running up so it

00:27:26,720 --> 00:27:30,559
takes a little bit a second

00:27:28,240 --> 00:27:32,000
a little bit more time to finish that so

00:27:30,559 --> 00:27:35,520
we got i have another

00:27:32,000 --> 00:27:37,840
a few more slider the wrap up just today

00:27:35,520 --> 00:27:40,559
so go back to here and then pretty soon

00:27:37,840 --> 00:27:43,039
we have already learning over time

00:27:40,559 --> 00:27:45,840
okay so here's a full more use case in a

00:27:43,039 --> 00:27:48,480
demo if you're really more interested in

00:27:45,840 --> 00:27:50,320
corkers in the suburbs or a cloud every

00:27:48,480 --> 00:27:52,399
application development i pre

00:27:50,320 --> 00:27:53,520
strongly recommend you just subscribe to

00:27:52,399 --> 00:27:57,120
my youtube channel

00:27:53,520 --> 00:28:00,080
beanie daniel or tv i put in the tons of

00:27:57,120 --> 00:28:00,720
video demo and the technical tutorial

00:28:00,080 --> 00:28:03,600
etc

00:28:00,720 --> 00:28:05,919
for example here is how to develop the

00:28:03,600 --> 00:28:07,200
serverless application based on quarkx

00:28:05,919 --> 00:28:10,000
funky and then

00:28:07,200 --> 00:28:11,360
that front-end quarkus application

00:28:10,000 --> 00:28:13,520
communicator back-end

00:28:11,360 --> 00:28:16,080
display data grid on top of the infinite

00:28:13,520 --> 00:28:18,960
span and you will find out how to auto

00:28:16,080 --> 00:28:21,279
scaling automatically scale down to zero

00:28:18,960 --> 00:28:23,520
automatically based on your own demand

00:28:21,279 --> 00:28:26,640
network throughput

00:28:23,520 --> 00:28:29,440
so the quarkus once again are

00:28:26,640 --> 00:28:30,399
born for kubernetes application

00:28:29,440 --> 00:28:32,799
department

00:28:30,399 --> 00:28:34,880
more focused on container technology in

00:28:32,799 --> 00:28:37,919
the live coding for developer joy

00:28:34,880 --> 00:28:39,679
and you can handle traditional microsoft

00:28:37,919 --> 00:28:41,440
application development but also

00:28:39,679 --> 00:28:43,760
reactivate application

00:28:41,440 --> 00:28:44,640
but it's still java which means you can

00:28:43,760 --> 00:28:47,760
easily

00:28:44,640 --> 00:28:48,399
integrate a lot of open source a project

00:28:47,760 --> 00:28:52,399
too

00:28:48,399 --> 00:28:55,520
like a messaging or security or cloud

00:28:52,399 --> 00:28:57,679
and also a lot of money monitoring and

00:28:55,520 --> 00:29:01,760
observation tool

00:28:57,679 --> 00:29:03,919
so here's a more uh uh help out your

00:29:01,760 --> 00:29:05,120
kubernetes approach caucus journey like

00:29:03,919 --> 00:29:07,440
idc report

00:29:05,120 --> 00:29:08,240
in an interactive portal like a try to

00:29:07,440 --> 00:29:10,480
parkours

00:29:08,240 --> 00:29:12,799
and you just need the web browser to go

00:29:10,480 --> 00:29:15,200
through the all tons of the scenario

00:29:12,799 --> 00:29:16,399
and the code caucus io the project

00:29:15,200 --> 00:29:19,679
generated

00:29:16,399 --> 00:29:23,039
for today so this is all i have

00:29:19,679 --> 00:29:26,159
and i go to here so now you can see

00:29:23,039 --> 00:29:29,039
your new quarkx application here

00:29:26,159 --> 00:29:30,080
and you go to hello the endpoint you got

00:29:29,039 --> 00:29:33,600
a new hello

00:29:30,080 --> 00:29:37,039
and another endpoint reading

00:29:33,600 --> 00:29:39,919
in my name daniel and then you can find

00:29:37,039 --> 00:29:40,399
here so you are the access endpoint with

00:29:39,919 --> 00:29:43,760
the

00:29:40,399 --> 00:29:44,480
hem chart okay so i'm gonna take it down

00:29:43,760 --> 00:29:48,000
i'm gonna stop

00:29:44,480 --> 00:29:51,679
sharing any question around there

00:29:48,000 --> 00:29:55,039
no question means uh

00:29:51,679 --> 00:29:57,360
good sign

00:29:55,039 --> 00:29:58,320
so one thing if you uh question around

00:29:57,360 --> 00:30:00,799
the questions just

00:29:58,320 --> 00:30:01,919
feel free reach out to me by twitter or

00:30:00,799 --> 00:30:04,640
youtube or

00:30:01,919 --> 00:30:06,559
i'm gonna do uh keep staying the

00:30:04,640 --> 00:30:09,840
conference today so you can

00:30:06,559 --> 00:30:12,399
uh just uh chat with me

00:30:09,840 --> 00:30:13,200
or the discord or the your chat room

00:30:12,399 --> 00:30:14,960
directly

00:30:13,200 --> 00:30:16,960
i'm more than happy to address your

00:30:14,960 --> 00:30:18,880
question thanks for tuning have a good

00:30:16,960 --> 00:30:21,840
rest of the day

00:30:18,880 --> 00:30:23,679
daniel we have uh one question here okay

00:30:21,840 --> 00:30:25,200
oh

00:30:23,679 --> 00:30:27,200
what is the software you are working

00:30:25,200 --> 00:30:28,880
with

00:30:27,200 --> 00:30:30,240
where is the question like where can i

00:30:28,880 --> 00:30:32,880
find it on the qa

00:30:30,240 --> 00:30:32,880
q a tab

00:30:33,360 --> 00:30:36,720
i don't see actually any question

00:30:35,200 --> 00:30:38,880
coordinated

00:30:36,720 --> 00:30:40,240
yeah can you repeat the question once

00:30:38,880 --> 00:30:43,440
again apparently

00:30:40,240 --> 00:30:46,640
what is the software you're working with

00:30:43,440 --> 00:30:49,120
software yes uh

00:30:46,640 --> 00:30:50,000
yeah so mainly i am the technical

00:30:49,120 --> 00:30:53,279
marketing major

00:30:50,000 --> 00:30:55,120
at redhead runtimes team so i've

00:30:53,279 --> 00:30:57,120
been working with the springbook and

00:30:55,120 --> 00:30:59,600
quarkx and

00:30:57,120 --> 00:31:01,600
node.js broadcast all cloud naval

00:30:59,600 --> 00:31:05,120
runtime but also

00:31:01,600 --> 00:31:07,200
data grid like a single sign on all the

00:31:05,120 --> 00:31:09,919
long time related products and software

00:31:07,200 --> 00:31:13,039
and also kubernetes thing as well

00:31:09,919 --> 00:31:14,559
okay uh i have one question so um

00:31:13,039 --> 00:31:17,039
let me remind everybody they can post

00:31:14,559 --> 00:31:18,720
the q a questions in the q a tab

00:31:17,039 --> 00:31:20,399
uh we still have daniel here and after

00:31:18,720 --> 00:31:22,559
the session daniel

00:31:20,399 --> 00:31:23,760
will you be available on discord for

00:31:22,559 --> 00:31:26,159
follow on sure

00:31:23,760 --> 00:31:26,880
yeah sure i will be there all the time

00:31:26,159 --> 00:31:29,519
so

00:31:26,880 --> 00:31:30,240
just pick me or drag me i will keep

00:31:29,519 --> 00:31:32,880
watching

00:31:30,240 --> 00:31:34,000
the session is this section the what is

00:31:32,880 --> 00:31:37,519
the session number

00:31:34,000 --> 00:31:39,760
uh in the discord we're session room one

00:31:37,519 --> 00:31:40,880
okay we'll be there yeah so if you can

00:31:39,760 --> 00:31:44,080
monitor that that would be

00:31:40,880 --> 00:31:44,399
fabulous so yeah you had a a slide that

00:31:44,080 --> 00:31:45,760
was

00:31:44,399 --> 00:31:47,519
that was very interesting where you

00:31:45,760 --> 00:31:51,039
talked about k-native under

00:31:47,519 --> 00:31:53,039
amazon gcp and azure so

00:31:51,039 --> 00:31:54,559
uh so what your point really is that you

00:31:53,039 --> 00:31:56,720
can code once

00:31:54,559 --> 00:31:57,840
and then run in any of those three cloud

00:31:56,720 --> 00:32:00,240
providers

00:31:57,840 --> 00:32:02,159
as well as on-prem are there any changes

00:32:00,240 --> 00:32:04,880
you need to make to your code

00:32:02,159 --> 00:32:06,960
to run in those different environments

00:32:04,880 --> 00:32:08,080
no actually no need and then you just

00:32:06,960 --> 00:32:10,320
need to add

00:32:08,080 --> 00:32:12,399
the target environment your application

00:32:10,320 --> 00:32:14,399
property file rather than java code

00:32:12,399 --> 00:32:16,159
so when you go to my youtube channel i

00:32:14,399 --> 00:32:18,880
actually posted all

00:32:16,159 --> 00:32:20,720
uh the video demos how to deploy same

00:32:18,880 --> 00:32:24,080
application to amazon lambda

00:32:20,720 --> 00:32:27,679
or microsoft edger or k name just like i

00:32:24,080 --> 00:32:29,200
uh show you today so you can figure out

00:32:27,679 --> 00:32:31,679
what differentiating between the

00:32:29,200 --> 00:32:33,600
multi-process platform to deploy

00:32:31,679 --> 00:32:35,919
serverless function without any code

00:32:33,600 --> 00:32:39,200
change and i'm going to put into this

00:32:35,919 --> 00:32:41,600
slides tag in the disk call as well

00:32:39,200 --> 00:32:42,720
excellent excellent and where do you if

00:32:41,600 --> 00:32:44,000
i can ask you to

00:32:42,720 --> 00:32:46,399
kind of foretell the future where do you

00:32:44,000 --> 00:32:49,039
see serverless going

00:32:46,399 --> 00:32:50,559
in the future yeah that is a really good

00:32:49,039 --> 00:32:54,000
question so actually

00:32:50,559 --> 00:32:55,760
i had a conversation earlier this week

00:32:54,000 --> 00:32:59,600
with the forester analyst

00:32:55,760 --> 00:33:01,840
around the suburbs strategy or vision

00:32:59,600 --> 00:33:03,360
and the interesting is that cyber race

00:33:01,840 --> 00:33:05,440
is still early stage

00:33:03,360 --> 00:33:06,399
i mean in major technology because

00:33:05,440 --> 00:33:08,559
people saying

00:33:06,399 --> 00:33:09,600
somebody is really feeling just a web

00:33:08,559 --> 00:33:11,679
application

00:33:09,600 --> 00:33:14,000
but it turns out more and more

00:33:11,679 --> 00:33:16,640
enterprise companies try to adapt

00:33:14,000 --> 00:33:17,679
serverless technology with multiple

00:33:16,640 --> 00:33:20,320
business domain

00:33:17,679 --> 00:33:21,120
i mean traditional business domain so in

00:33:20,320 --> 00:33:24,960
the end

00:33:21,120 --> 00:33:26,880
you can evolve existing all business

00:33:24,960 --> 00:33:29,279
application with the serverless

00:33:26,880 --> 00:33:30,159
plus eventually architecture but it

00:33:29,279 --> 00:33:33,039
takes a little bit

00:33:30,159 --> 00:33:34,559
time to make that happen like a cold

00:33:33,039 --> 00:33:38,399
start the warm start

00:33:34,559 --> 00:33:40,799
and what is stress put or what is your

00:33:38,399 --> 00:33:42,880
container what so just imagine

00:33:40,799 --> 00:33:45,279
containers still a little bit uh

00:33:42,880 --> 00:33:47,200
experimental thing for serverless

00:33:45,279 --> 00:33:48,960
technology because amazon render doesn't

00:33:47,200 --> 00:33:49,519
need to contain a technology just you

00:33:48,960 --> 00:33:51,519
can

00:33:49,519 --> 00:33:52,640
unload your application itself and then

00:33:51,519 --> 00:33:56,320
running on top of

00:33:52,640 --> 00:33:58,880
just a virtual machine so so there are

00:33:56,320 --> 00:33:59,519
still exponential thing with serverless

00:33:58,880 --> 00:34:01,679
with the real

00:33:59,519 --> 00:34:02,559
application on inner project production

00:34:01,679 --> 00:34:04,320
but

00:34:02,559 --> 00:34:08,080
more and more enterprises are really uh

00:34:04,320 --> 00:34:08,080
interesting adopting that thing

00:34:08,879 --> 00:34:13,839
and in terms of manageability how do

00:34:12,159 --> 00:34:15,280
you know if you decompose an application

00:34:13,839 --> 00:34:18,079
into thousands of

00:34:15,280 --> 00:34:18,960
serverless endpoints yep you know how

00:34:18,079 --> 00:34:21,119
he's managing

00:34:18,960 --> 00:34:23,119
uh you know this the application that

00:34:21,119 --> 00:34:25,119
way or is it or is that a benefit where

00:34:23,119 --> 00:34:26,399
you can change one thing and have little

00:34:25,119 --> 00:34:28,159
to no effect on the other applications

00:34:26,399 --> 00:34:31,280
yeah that's another good question

00:34:28,159 --> 00:34:34,560
so basically all serverless based on

00:34:31,280 --> 00:34:37,440
uh the http protocol

00:34:34,560 --> 00:34:39,599
and also the cloud event so there are

00:34:37,440 --> 00:34:42,240
several as a workflow project

00:34:39,599 --> 00:34:43,280
to manage your multiple thousands of

00:34:42,240 --> 00:34:46,879
servers at

00:34:43,280 --> 00:34:50,240
one workflow multiple workflow for your

00:34:46,879 --> 00:34:50,879
business application behavior but also

00:34:50,240 --> 00:34:54,639
you can have

00:34:50,879 --> 00:34:57,839
the api platform to manage or

00:34:54,639 --> 00:35:02,880
handle your recast from end

00:34:57,839 --> 00:35:04,400
user to your serverless application

00:35:02,880 --> 00:35:06,240
excellent stuff i may have lost my video

00:35:04,400 --> 00:35:08,560
here oh yeah don't worry

00:35:06,240 --> 00:35:09,520
i can see you're a nice handsome

00:35:08,560 --> 00:35:12,480
handsome picture

00:35:09,520 --> 00:35:12,480
oh you're you're more shocked

00:35:14,079 --> 00:35:17,119
so if there's no other questions i would

00:35:15,599 --> 00:35:19,680
invite everyone to

00:35:17,119 --> 00:35:20,480
join daniel on discord and thank you

00:35:19,680 --> 00:35:23,680
very much for

00:35:20,480 --> 00:35:25,680
for all an awesome talk next up

00:35:23,680 --> 00:35:27,200
we will have service mesh serverless and

00:35:25,680 --> 00:35:27,760
adventure and architecture with langdon

00:35:27,200 --> 00:35:30,240
white

00:35:27,760 --> 00:35:32,240
and that will start at the 3 30 central

00:35:30,240 --> 00:35:32,960
european time so again daniel thank you

00:35:32,240 --> 00:35:35,839
very much

00:35:32,960 --> 00:35:36,400
on behalf of uh tavia with myself yeah

00:35:35,839 --> 00:35:38,079
thanks

00:35:36,400 --> 00:35:40,160
thanks eri and thanks for attending

00:35:38,079 --> 00:35:45,839
babari and have a good rest of the day

00:35:40,160 --> 00:35:45,839

YouTube URL: https://www.youtube.com/watch?v=rc_qPO-A5EI


