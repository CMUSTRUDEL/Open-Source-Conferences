Title: Life After Selenium - DevConf.CZ 2021
Publication date: 2021-03-12
Playlist: DevConfCZ 2021
Description: 
	Speaker: John Hill

Selenium has been the unchallenged leader in open source UI testing since 2004. The web has changed since then and our tools should, too.

In this talk, we'll go over the problems with Selenium and how the new tools solve them. We'll (cross our fingers and) do some live demos with webdriver.io, puppeteer, playwright and cypress. We'll end with Selenium 4.0 and what it might mean for your current project.


Schedule: https://sched.co/gmM4
Captions: 
	00:00:01,920 --> 00:00:05,520
yeah so in this talk uh we're going to

00:00:03,760 --> 00:00:06,560
talk about selenium browsers problem

00:00:05,520 --> 00:00:08,080
solutions

00:00:06,560 --> 00:00:10,000
two frameworks not three we'll talk

00:00:08,080 --> 00:00:10,639
about what happens next and we'll do a q

00:00:10,000 --> 00:00:12,960
a

00:00:10,639 --> 00:00:14,320
um uh in the stock we're not i'm not

00:00:12,960 --> 00:00:14,960
going to convince you to delete and

00:00:14,320 --> 00:00:16,320
restart

00:00:14,960 --> 00:00:18,400
i'm not getting paid commission at least

00:00:16,320 --> 00:00:19,279
i don't think so we're going to skip

00:00:18,400 --> 00:00:20,720
over mobile

00:00:19,279 --> 00:00:22,080
we're not going to talk about all the

00:00:20,720 --> 00:00:23,199
alternatives out there and we're going

00:00:22,080 --> 00:00:26,320
to ignore

00:00:23,199 --> 00:00:27,599
python and java so let's talk about in

00:00:26,320 --> 00:00:29,599
the beginning so this is

00:00:27,599 --> 00:00:31,279
life after selenium let's talk about in

00:00:29,599 --> 00:00:34,480
the beginning in the beginning

00:00:31,279 --> 00:00:37,360
there was mercury and mercury

00:00:34,480 --> 00:00:39,360
created qtp and that was created by

00:00:37,360 --> 00:00:41,680
mercury interactive in 1998

00:00:39,360 --> 00:00:42,879
it was one of the first if not the first

00:00:41,680 --> 00:00:45,039
browser-based ui

00:00:42,879 --> 00:00:46,320
automation tool it was closed source

00:00:45,039 --> 00:00:48,640
proprietary

00:00:46,320 --> 00:00:50,879
four thousand dollars per copy and that

00:00:48,640 --> 00:00:54,160
was in 1998 dollars

00:00:50,879 --> 00:00:57,520
i should say usd um so that's probably

00:00:54,160 --> 00:00:59,680
more maybe almost double that um

00:00:57,520 --> 00:01:01,680
and it had a limited browser support it

00:00:59,680 --> 00:01:05,840
only i believe only worked with ie

00:01:01,680 --> 00:01:09,520
3.0 or 1.0 um and it only ran on windows

00:01:05,840 --> 00:01:11,920
um and so selenium came from that

00:01:09,520 --> 00:01:12,560
selenium is the cure for mercury

00:01:11,920 --> 00:01:14,400
poisoning

00:01:12,560 --> 00:01:15,680
and that was what the idea for that's

00:01:14,400 --> 00:01:18,400
where the name comes from

00:01:15,680 --> 00:01:20,000
is created in the year 2004 long after

00:01:18,400 --> 00:01:23,439
that and that is now

00:01:20,000 --> 00:01:26,240
in 2021 maintained by a selenium hq

00:01:23,439 --> 00:01:27,119
organization it's open source and open

00:01:26,240 --> 00:01:29,520
standard

00:01:27,119 --> 00:01:30,880
um across it was designed to be cross

00:01:29,520 --> 00:01:32,640
browser instead of just working one

00:01:30,880 --> 00:01:34,079
place they wanted to work everywhere

00:01:32,640 --> 00:01:36,079
so they created the abstraction that we

00:01:34,079 --> 00:01:39,600
know today which is web driver

00:01:36,079 --> 00:01:41,360
so in today in 2021 selenium

00:01:39,600 --> 00:01:43,040
is the infrastructure and rule the

00:01:41,360 --> 00:01:46,000
tooling to run webdriver

00:01:43,040 --> 00:01:47,759
but webdriver is now the open standard

00:01:46,000 --> 00:01:48,960
it's built into every browser now it's

00:01:47,759 --> 00:01:51,600
part of the w3c

00:01:48,960 --> 00:01:52,240
specification any browser you're using

00:01:51,600 --> 00:01:55,119
today

00:01:52,240 --> 00:01:55,840
now has webdriver built in um and so

00:01:55,119 --> 00:01:59,040
therefore

00:01:55,840 --> 00:02:01,920
it is cross browser by definition

00:01:59,040 --> 00:02:02,799
so what does that mean well it's an open

00:02:01,920 --> 00:02:04,399
standard so

00:02:02,799 --> 00:02:06,240
it's maintained not necessarily

00:02:04,399 --> 00:02:08,560
maintained by the same folks so

00:02:06,240 --> 00:02:10,319
while preparing for this talk today my

00:02:08,560 --> 00:02:12,879
and you've all probably seen this

00:02:10,319 --> 00:02:13,840
my chrome driver binary got out of sync

00:02:12,879 --> 00:02:16,000
with chrome

00:02:13,840 --> 00:02:17,440
um in which it was out of sync with web

00:02:16,000 --> 00:02:19,840
driver and

00:02:17,440 --> 00:02:21,280
you know in the slinging test itself

00:02:19,840 --> 00:02:22,800
this is the problem with being an open

00:02:21,280 --> 00:02:24,560
standard but um

00:02:22,800 --> 00:02:26,239
let's talk about what webdriver itself

00:02:24,560 --> 00:02:27,920
is driving so

00:02:26,239 --> 00:02:29,920
um the best way i know to do that is

00:02:27,920 --> 00:02:32,480
with a real world application

00:02:29,920 --> 00:02:33,200
and so this is the cypress real world

00:02:32,480 --> 00:02:35,360
app

00:02:33,200 --> 00:02:37,120
um available on my github repo it's not

00:02:35,360 --> 00:02:38,080
created by me it's built by the cypress

00:02:37,120 --> 00:02:39,680
team but

00:02:38,080 --> 00:02:41,200
everything we know and love is testers

00:02:39,680 --> 00:02:43,840
it's got a login page

00:02:41,200 --> 00:02:44,879
so uh you know username password sign in

00:02:43,840 --> 00:02:47,120
button

00:02:44,879 --> 00:02:48,560
so this is chrome and on the right is

00:02:47,120 --> 00:02:50,720
the chrome dev tools

00:02:48,560 --> 00:02:52,160
on the right with all of the network

00:02:50,720 --> 00:02:52,720
traffic that we're going to capture here

00:02:52,160 --> 00:02:54,640
so

00:02:52,720 --> 00:02:55,840
i've entered in the username i've

00:02:54,640 --> 00:02:59,519
entered in the password

00:02:55,840 --> 00:03:00,720
and click the sign in button in my case

00:02:59,519 --> 00:03:02,239
you can see here that we were

00:03:00,720 --> 00:03:04,480
successfully logged in we got a

00:03:02,239 --> 00:03:07,280
successful request for login

00:03:04,480 --> 00:03:07,920
now i'm going to go to the new button up

00:03:07,280 --> 00:03:09,840
here

00:03:07,920 --> 00:03:12,400
and you can see what happens right when

00:03:09,840 --> 00:03:15,519
i got new i got more information more

00:03:12,400 --> 00:03:17,920
rendered on the screen and when i start

00:03:15,519 --> 00:03:20,319
searching i'm going to search for devon

00:03:17,920 --> 00:03:20,319
becker

00:03:20,959 --> 00:03:26,799
i'm searching and getting a payload

00:03:24,000 --> 00:03:27,599
back so you can see here this is the

00:03:26,799 --> 00:03:30,319
request

00:03:27,599 --> 00:03:31,599
that the browser is sending to the api

00:03:30,319 --> 00:03:33,680
server

00:03:31,599 --> 00:03:34,640
which happens to be a local host and

00:03:33,680 --> 00:03:38,480
that is

00:03:34,640 --> 00:03:41,200
giving me a response of a json payload

00:03:38,480 --> 00:03:42,319
that is then simply rendered on the

00:03:41,200 --> 00:03:44,959
screen so again

00:03:42,319 --> 00:03:47,120
you log in you go to the new button you

00:03:44,959 --> 00:03:49,200
wait for the new button to exist

00:03:47,120 --> 00:03:50,959
and then you click on it then you wait

00:03:49,200 --> 00:03:52,640
for the search bar to exist

00:03:50,959 --> 00:03:54,560
you click on it and you enter in the

00:03:52,640 --> 00:03:58,000
stream dave on becker

00:03:54,560 --> 00:03:58,720
the web browser receives this json

00:03:58,000 --> 00:04:01,280
payload

00:03:58,720 --> 00:04:04,239
from the api and renders it on screen

00:04:01,280 --> 00:04:05,760
and that's just like the simplest

00:04:04,239 --> 00:04:14,000
thing i can think to demonstrate

00:04:05,760 --> 00:04:17,680
selenium so let's talk about selenium

00:04:14,000 --> 00:04:20,799
so in a review login page authentication

00:04:17,680 --> 00:04:21,519
via an xhr api request we're routed to

00:04:20,799 --> 00:04:23,520
home

00:04:21,519 --> 00:04:25,440
we see the new button we click on the

00:04:23,520 --> 00:04:28,880
new button and it's routed to

00:04:25,440 --> 00:04:31,759
um a new url we uh the

00:04:28,880 --> 00:04:32,960
um the browser renders the search bar

00:04:31,759 --> 00:04:34,880
and then we search

00:04:32,960 --> 00:04:36,000
by firing off requests and receiving a

00:04:34,880 --> 00:04:39,280
payload and that

00:04:36,000 --> 00:04:41,199
request is seen by the um the user so

00:04:39,280 --> 00:04:43,120
i've got a selenium test here that does

00:04:41,199 --> 00:04:45,040
just what we just did by hand so we

00:04:43,120 --> 00:04:46,880
instantiate a browser

00:04:45,040 --> 00:04:48,160
we in our case we're just doing a simple

00:04:46,880 --> 00:04:49,840
check to see that the name of the

00:04:48,160 --> 00:04:52,080
application is up

00:04:49,840 --> 00:04:54,080
we are going to wait and use the

00:04:52,080 --> 00:04:56,880
selenium best practice for

00:04:54,080 --> 00:04:57,840
waiting and polling until this statement

00:04:56,880 --> 00:05:00,240
is true

00:04:57,840 --> 00:05:01,680
so it's going to pull on internal

00:05:00,240 --> 00:05:05,039
implicit waiting

00:05:01,680 --> 00:05:06,880
um for 10 000 milliseconds or 10 seconds

00:05:05,039 --> 00:05:09,039
and we're waiting for the username field

00:05:06,880 --> 00:05:12,000
to exist when it does exist

00:05:09,039 --> 00:05:12,479
we move on into test logic we send some

00:05:12,000 --> 00:05:14,240
keys

00:05:12,479 --> 00:05:16,479
the username password we click the

00:05:14,240 --> 00:05:19,600
button and then we

00:05:16,479 --> 00:05:21,600
um then we click on the the new button

00:05:19,600 --> 00:05:24,000
that we just saw at the top right

00:05:21,600 --> 00:05:24,639
and then we're going to find the search

00:05:24,000 --> 00:05:26,000
bar

00:05:24,639 --> 00:05:28,240
they're usually called queue for some

00:05:26,000 --> 00:05:29,759
reason uh query i guess

00:05:28,240 --> 00:05:31,520
and then we're going to send the keys

00:05:29,759 --> 00:05:35,199
dave on becker and assert

00:05:31,520 --> 00:05:37,680
that we've received davon becker text

00:05:35,199 --> 00:05:38,479
in the little drop down so this is a

00:05:37,680 --> 00:05:39,600
test so

00:05:38,479 --> 00:05:41,919
again if you want to run this for

00:05:39,600 --> 00:05:42,800
yourself please check out the uh the

00:05:41,919 --> 00:05:46,639
github repo

00:05:42,800 --> 00:05:50,240
so we've instantiated the browser

00:05:46,639 --> 00:05:52,000
we've routed to localhost

00:05:50,240 --> 00:05:53,280
we've seen the sign in page we've logged

00:05:52,000 --> 00:05:56,080
in and uh oh

00:05:53,280 --> 00:05:58,160
we've failed and why have we failed well

00:05:56,080 --> 00:06:01,919
in our case there is no such

00:05:58,160 --> 00:06:03,680
element um for the new button

00:06:01,919 --> 00:06:06,160
and if you look at this it's because we

00:06:03,680 --> 00:06:07,840
immediately went from the login page to

00:06:06,160 --> 00:06:10,240
the new button but we have no

00:06:07,840 --> 00:06:12,479
idea from a selenium standpoint what

00:06:10,240 --> 00:06:13,680
happens in between

00:06:12,479 --> 00:06:15,840
and that's the problem that's what we're

00:06:13,680 --> 00:06:18,400
here to talk about today

00:06:15,840 --> 00:06:19,600
so why is selenium flaky it's because

00:06:18,400 --> 00:06:22,400
you're effectively stuck

00:06:19,600 --> 00:06:24,479
here um in your in your test code you

00:06:22,400 --> 00:06:26,560
don't really know what's going on

00:06:24,479 --> 00:06:27,520
um between the web driver and the

00:06:26,560 --> 00:06:30,240
browser

00:06:27,520 --> 00:06:32,240
um you have to pull until true and it's

00:06:30,240 --> 00:06:35,360
stateless it's restful it's stateless

00:06:32,240 --> 00:06:37,440
it it becomes true it's not event driven

00:06:35,360 --> 00:06:39,039
and you have zero insight into what's

00:06:37,440 --> 00:06:40,240
going on between the browser and the web

00:06:39,039 --> 00:06:42,319
app with slimming

00:06:40,240 --> 00:06:44,720
so you're effectively it's not event

00:06:42,319 --> 00:06:45,360
driven it's polling versus listening for

00:06:44,720 --> 00:06:47,199
events

00:06:45,360 --> 00:06:48,800
there's this loose cup and coupling

00:06:47,199 --> 00:06:50,479
because you're effectively stuck here at

00:06:48,800 --> 00:06:52,240
the web driver level or the

00:06:50,479 --> 00:06:54,880
you know your client library in our case

00:06:52,240 --> 00:06:57,919
javascript and there's just generally

00:06:54,880 --> 00:07:00,479
a lack of observability here

00:06:57,919 --> 00:07:02,080
so let's do that same exact test but

00:07:00,479 --> 00:07:04,080
we're going to add um

00:07:02,080 --> 00:07:05,360
additional latency in our case something

00:07:04,080 --> 00:07:05,919
that's closer to the real world we'll

00:07:05,360 --> 00:07:07,840
add

00:07:05,919 --> 00:07:09,759
you know the difference between jenkins

00:07:07,840 --> 00:07:10,720
and browser stack for example 100

00:07:09,759 --> 00:07:13,599
milliseconds so let's

00:07:10,720 --> 00:07:14,639
run that exact same test and what you'll

00:07:13,599 --> 00:07:17,440
see here is

00:07:14,639 --> 00:07:18,880
because we're pulling until true it

00:07:17,440 --> 00:07:22,000
continuously pulls

00:07:18,880 --> 00:07:23,840
until this is available holds until this

00:07:22,000 --> 00:07:26,400
is available on a given interval

00:07:23,840 --> 00:07:27,440
and then it moves on and fails in the

00:07:26,400 --> 00:07:29,280
same way

00:07:27,440 --> 00:07:30,560
it fails in exactly the same way but

00:07:29,280 --> 00:07:32,479
we've we've made it

00:07:30,560 --> 00:07:34,960
the problem even worse by not running

00:07:32,479 --> 00:07:37,759
locally with local hosts we've made

00:07:34,960 --> 00:07:39,680
the problem by running like you would in

00:07:37,759 --> 00:07:41,360
jenkins which is a huge problem

00:07:39,680 --> 00:07:42,960
so to summarize some of the problems

00:07:41,360 --> 00:07:44,639
it's an open which creates some

00:07:42,960 --> 00:07:46,479
dependencies without ownership like you

00:07:44,639 --> 00:07:47,360
saw from the first failure message i

00:07:46,479 --> 00:07:49,120
showed you where

00:07:47,360 --> 00:07:50,639
chrome driver couldn't talk to chrome

00:07:49,120 --> 00:07:52,720
because it was the wrong version

00:07:50,639 --> 00:07:54,720
um that's because it's an open standard

00:07:52,720 --> 00:07:56,319
um you know chrome doesn't necessarily

00:07:54,720 --> 00:07:58,240
have to support

00:07:56,319 --> 00:07:59,680
every binary version of the webdriver

00:07:58,240 --> 00:08:02,560
binary there's

00:07:59,680 --> 00:08:03,840
abstraction um so there's because it

00:08:02,560 --> 00:08:06,160
runs everywhere

00:08:03,840 --> 00:08:08,000
that creates a problem which is you are

00:08:06,160 --> 00:08:08,639
observing you're stuck on the outside

00:08:08,000 --> 00:08:10,560
which cause

00:08:08,639 --> 00:08:12,400
speed and performance issues it's

00:08:10,560 --> 00:08:13,759
expensive to run because you're waiting

00:08:12,400 --> 00:08:16,879
you're spending a lot of time

00:08:13,759 --> 00:08:18,800
but also it's inherently flaky

00:08:16,879 --> 00:08:20,960
due to this loose coupling between the

00:08:18,800 --> 00:08:22,240
test code and what you actually are

00:08:20,960 --> 00:08:25,440
trying to test which is the web

00:08:22,240 --> 00:08:28,080
application so let's talk about

00:08:25,440 --> 00:08:29,599
the solutions here so the solutions all

00:08:28,080 --> 00:08:30,479
come from what's happened in the web

00:08:29,599 --> 00:08:34,159
space so

00:08:30,479 --> 00:08:37,440
in 2004 which is off the screen here

00:08:34,159 --> 00:08:40,080
back here um chrome didn't exist

00:08:37,440 --> 00:08:42,399
chrome didn't exist until about this

00:08:40,080 --> 00:08:44,399
portion here and then it took off

00:08:42,399 --> 00:08:45,680
and during that time everything else

00:08:44,399 --> 00:08:48,399
kind of cratered

00:08:45,680 --> 00:08:48,959
so the definition of what multi-browser

00:08:48,399 --> 00:08:51,279
means

00:08:48,959 --> 00:08:52,880
has changed the definition of what you

00:08:51,279 --> 00:08:56,080
know going from ie

00:08:52,880 --> 00:08:58,480
um to chrome that kind of has kind of

00:08:56,080 --> 00:08:59,680
shifted the entire landscape to what

00:08:58,480 --> 00:09:02,080
we're looking at today

00:08:59,680 --> 00:09:03,760
which is puppets here so puppeteer is

00:09:02,080 --> 00:09:05,760
how the chrome team

00:09:03,760 --> 00:09:08,399
tests chrome and that's hugely important

00:09:05,760 --> 00:09:10,240
because if you're going to test chrome

00:09:08,399 --> 00:09:12,080
you need a good interface you can't have

00:09:10,240 --> 00:09:15,760
this lack of observability

00:09:12,080 --> 00:09:17,360
so they created an api using that chrome

00:09:15,760 --> 00:09:18,480
devtools protocol that we looked at

00:09:17,360 --> 00:09:20,720
which is the you know

00:09:18,480 --> 00:09:22,720
that everything that you saw me do

00:09:20,720 --> 00:09:24,720
manually and you saw the network request

00:09:22,720 --> 00:09:27,519
come across is now exposed

00:09:24,720 --> 00:09:28,240
to your tests in the in in puppeteer and

00:09:27,519 --> 00:09:31,040
um

00:09:28,240 --> 00:09:31,839
to further um you know they've also made

00:09:31,040 --> 00:09:34,160
the api

00:09:31,839 --> 00:09:35,440
almost exactly match webdriver in terms

00:09:34,160 --> 00:09:36,320
of the way that it looks in the way that

00:09:35,440 --> 00:09:38,160
it feels

00:09:36,320 --> 00:09:40,240
so it is almost interchangeable in that

00:09:38,160 --> 00:09:41,440
sense but it gives you everything you

00:09:40,240 --> 00:09:44,000
kind of need here

00:09:41,440 --> 00:09:45,920
also it's evergreen it always works if

00:09:44,000 --> 00:09:47,760
you've got a version of chrome installed

00:09:45,920 --> 00:09:49,760
then you've got an associated puppeteer

00:09:47,760 --> 00:09:51,200
binary that works

00:09:49,760 --> 00:09:53,360
it's easy to get you npm install

00:09:51,200 --> 00:09:55,279
puppeteer it's now got

00:09:53,360 --> 00:09:57,120
multi-browser support i remember that

00:09:55,279 --> 00:09:59,760
was a big deal for selenium through

00:09:57,120 --> 00:10:00,720
the nightlys and firefox um but i do

00:09:59,760 --> 00:10:02,720
want to call out

00:10:00,720 --> 00:10:04,640
it is not a framework just a selenium

00:10:02,720 --> 00:10:05,600
replacement as puppeteer is not a

00:10:04,640 --> 00:10:07,120
framework

00:10:05,600 --> 00:10:09,519
it doesn't necessarily have assertions

00:10:07,120 --> 00:10:12,320
and that sort of thing

00:10:09,519 --> 00:10:13,680
um but yeah so let's just spend one more

00:10:12,320 --> 00:10:16,880
slide on this to say

00:10:13,680 --> 00:10:19,120
puppeteer is now event driven the

00:10:16,880 --> 00:10:20,399
websocket interface is now provided

00:10:19,120 --> 00:10:22,560
instead of a stateless

00:10:20,399 --> 00:10:24,079
rest request interface and you're

00:10:22,560 --> 00:10:25,120
getting everything you kind of need

00:10:24,079 --> 00:10:27,120
within the

00:10:25,120 --> 00:10:28,480
it with you know kind of within uh

00:10:27,120 --> 00:10:30,320
chrome here um

00:10:28,480 --> 00:10:32,079
and that it provides even more power

00:10:30,320 --> 00:10:34,399
than i think is immediately obvious that

00:10:32,079 --> 00:10:37,360
we're going to look at at the end here

00:10:34,399 --> 00:10:38,800
but you are now inside the browser and

00:10:37,360 --> 00:10:40,880
you're getting real-time information

00:10:38,800 --> 00:10:42,560
streamed back to your test

00:10:40,880 --> 00:10:45,040
about the application and if you look at

00:10:42,560 --> 00:10:46,160
it head-to-head effectively you've moved

00:10:45,040 --> 00:10:48,800
from here

00:10:46,160 --> 00:10:50,399
with webdriver to here you are inside

00:10:48,800 --> 00:10:52,240
the browser you know everything there is

00:10:50,399 --> 00:10:53,920
to know about the web app

00:10:52,240 --> 00:10:55,120
you know everything there is your test

00:10:53,920 --> 00:10:55,680
can know everything there is to know

00:10:55,120 --> 00:10:57,839
about

00:10:55,680 --> 00:10:59,600
what the web app is doing which is where

00:10:57,839 --> 00:11:02,320
we want to be as testers

00:10:59,600 --> 00:11:02,959
so a quick summary it's not a w3

00:11:02,320 --> 00:11:05,920
standard

00:11:02,959 --> 00:11:07,279
it's real time instead of pulling very

00:11:05,920 --> 00:11:09,800
few dependencies to manage

00:11:07,279 --> 00:11:11,040
npm install puppeteer is

00:11:09,800 --> 00:11:13,680
cross-browser-ish

00:11:11,040 --> 00:11:15,839
just firefox now it's not inherently

00:11:13,680 --> 00:11:18,160
flaky again it's not that abstract

00:11:15,839 --> 00:11:19,440
um because you're inside the browser and

00:11:18,160 --> 00:11:22,640
it's very lightweight

00:11:19,440 --> 00:11:25,519
very little that bring to bring with it

00:11:22,640 --> 00:11:27,360
and that's a good thing um and let's

00:11:25,519 --> 00:11:29,360
take a look at the best example i can

00:11:27,360 --> 00:11:31,839
say the best example i know of the

00:11:29,360 --> 00:11:34,399
impact that cdp and puppeteer have had

00:11:31,839 --> 00:11:36,160
is now that webdriver io which was

00:11:34,399 --> 00:11:38,880
created in 2013

00:11:36,160 --> 00:11:40,240
is now switched from web driver bindings

00:11:38,880 --> 00:11:42,640
to puppeteer by default

00:11:40,240 --> 00:11:44,399
it is so powerful that webdriver i o

00:11:42,640 --> 00:11:46,959
needs a new domain name

00:11:44,399 --> 00:11:48,880
because it's it's no longer appropriate

00:11:46,959 --> 00:11:51,279
to really call it webdriver.io

00:11:48,880 --> 00:11:53,040
um but let's take a look uh it's a it's

00:11:51,279 --> 00:11:54,480
an open source framework um but let's

00:11:53,040 --> 00:11:55,120
just let's stop talking and take a look

00:11:54,480 --> 00:11:57,920
here

00:11:55,120 --> 00:11:59,839
so i've got a web driver i o test looks

00:11:57,920 --> 00:12:00,720
very similar to the selenium test we

00:11:59,839 --> 00:12:03,120
looked at

00:12:00,720 --> 00:12:05,440
um you you're you know you're waiting

00:12:03,120 --> 00:12:08,480
for the username to appear

00:12:05,440 --> 00:12:10,959
um you are setting the values just like

00:12:08,480 --> 00:12:12,560
typing uh you know typing keystrokes

00:12:10,959 --> 00:12:14,320
you're clicking in exactly the same way

00:12:12,560 --> 00:12:14,959
and all of this is using web driver

00:12:14,320 --> 00:12:17,120
under

00:12:14,959 --> 00:12:18,480
under the hood um you're waiting for it

00:12:17,120 --> 00:12:20,160
to exist and you're you know you're just

00:12:18,480 --> 00:12:22,639
following the standard things so

00:12:20,160 --> 00:12:23,200
um here we're again we're at the search

00:12:22,639 --> 00:12:25,600
where we

00:12:23,200 --> 00:12:27,200
set the value in the search bar right

00:12:25,600 --> 00:12:28,240
and then at the end of it we are going

00:12:27,200 --> 00:12:31,200
to assert

00:12:28,240 --> 00:12:31,600
that devon becker appears in that search

00:12:31,200 --> 00:12:38,720
bar

00:12:31,600 --> 00:12:41,279
so let's give it a shot so going to run

00:12:38,720 --> 00:12:42,240
this same test but i'm going to use web

00:12:41,279 --> 00:12:45,360
driver i o

00:12:42,240 --> 00:12:49,120
and the webdriver bindings that the

00:12:45,360 --> 00:12:52,079
framework provides so

00:12:49,120 --> 00:12:53,200
boring boring boring boring but not so

00:12:52,079 --> 00:12:55,279
boring it failed

00:12:53,200 --> 00:12:57,120
and that it failed for the exact same

00:12:55,279 --> 00:12:58,000
reason that the selenium test failed

00:12:57,120 --> 00:13:00,880
which is

00:12:58,000 --> 00:13:01,600
it failed here it doesn't necessarily

00:13:00,880 --> 00:13:04,320
know

00:13:01,600 --> 00:13:05,440
what has occurred between the search and

00:13:04,320 --> 00:13:07,920
it doesn't necessarily

00:13:05,440 --> 00:13:08,880
know what's occurred between um and

00:13:07,920 --> 00:13:10,800
what's received

00:13:08,880 --> 00:13:12,639
and visible by the dom in the clock for

00:13:10,800 --> 00:13:14,720
the client to see the browser

00:13:12,639 --> 00:13:17,040
because this is still using the await

00:13:14,720 --> 00:13:19,040
mechanisms given by webdriver

00:13:17,040 --> 00:13:21,120
um you could use an anti-pattern which

00:13:19,040 --> 00:13:22,880
is like putting in pauses but that

00:13:21,120 --> 00:13:24,560
that's not really what we want so let's

00:13:22,880 --> 00:13:25,200
let's instead of that let's give this a

00:13:24,560 --> 00:13:27,120
shot

00:13:25,200 --> 00:13:28,639
let's switch from web driver to

00:13:27,120 --> 00:13:30,399
puppeteer which is

00:13:28,639 --> 00:13:31,680
what's so cool about this is it's almost

00:13:30,399 --> 00:13:32,720
interchangeable if your framework

00:13:31,680 --> 00:13:35,120
supports it

00:13:32,720 --> 00:13:36,399
which uh you know this does here so

00:13:35,120 --> 00:13:37,279
what's a little bit different here is

00:13:36,399 --> 00:13:39,760
remember

00:13:37,279 --> 00:13:40,880
um we the test is the same until this

00:13:39,760 --> 00:13:42,320
point

00:13:40,880 --> 00:13:44,079
um but what we're going to do is we're

00:13:42,320 --> 00:13:47,120
going to intercept

00:13:44,079 --> 00:13:48,000
the network request search term for

00:13:47,120 --> 00:13:50,000
davon becker

00:13:48,000 --> 00:13:51,360
and guarantee that a 200 comes back from

00:13:50,000 --> 00:13:53,199
the api

00:13:51,360 --> 00:13:55,600
and then we are going to move on only

00:13:53,199 --> 00:13:57,920
after this becomes true

00:13:55,600 --> 00:13:59,279
only after this becomes true and let's

00:13:57,920 --> 00:14:02,399
see what sort of effect

00:13:59,279 --> 00:14:05,040
that has on the outcome of the test

00:14:02,399 --> 00:14:07,040
i'm going to save my i'm going to switch

00:14:05,040 --> 00:14:10,000
to the other one and save my changes

00:14:07,040 --> 00:14:11,920
um and you'll see in the the code base

00:14:10,000 --> 00:14:13,680
just how easy it is to switch between

00:14:11,920 --> 00:14:15,600
puppeteer and webdriver

00:14:13,680 --> 00:14:17,600
so we're going to instantiate another

00:14:15,600 --> 00:14:18,800
browser same thing except now we're

00:14:17,600 --> 00:14:21,519
using cdp

00:14:18,800 --> 00:14:22,399
instead of webdriver uh bingo and it's

00:14:21,519 --> 00:14:24,000
done it worked

00:14:22,399 --> 00:14:26,079
it did everything it needed to do

00:14:24,000 --> 00:14:28,800
because it did it as

00:14:26,079 --> 00:14:29,360
quickly as possible basically real time

00:14:28,800 --> 00:14:32,240
because

00:14:29,360 --> 00:14:34,000
of the um it has the information it

00:14:32,240 --> 00:14:35,040
needs to know when to transition between

00:14:34,000 --> 00:14:38,000
states

00:14:35,040 --> 00:14:39,040
um which is super cool super powerful um

00:14:38,000 --> 00:14:41,120
and kind of

00:14:39,040 --> 00:14:43,120
there's really no going back like once

00:14:41,120 --> 00:14:44,720
once you're in the browser and you need

00:14:43,120 --> 00:14:47,920
you have access to all the information

00:14:44,720 --> 00:14:50,320
you need why go back

00:14:47,920 --> 00:14:52,399
so um unfortunately we don't have enough

00:14:50,320 --> 00:14:54,320
time to demo playwright today in this

00:14:52,399 --> 00:14:55,440
abbreviated version i am going to talk

00:14:54,320 --> 00:14:57,040
about it and i am going to show a

00:14:55,440 --> 00:14:58,000
screenshot from it but just think about

00:14:57,040 --> 00:15:01,360
it as

00:14:58,000 --> 00:15:03,279
a problem uh it's cross browser testing

00:15:01,360 --> 00:15:06,079
done right it's open source

00:15:03,279 --> 00:15:07,600
but it's managed by microsoft um it's

00:15:06,079 --> 00:15:10,880
not using the same

00:15:07,600 --> 00:15:13,040
cdp interface exactly it created a shim

00:15:10,880 --> 00:15:14,160
so that they can use other browsers but

00:15:13,040 --> 00:15:15,680
it's controversial though

00:15:14,160 --> 00:15:17,600
and best kind of illustrates what's

00:15:15,680 --> 00:15:19,920
happening in the space which is

00:15:17,600 --> 00:15:20,720
microsoft hired the puppeteer team they

00:15:19,920 --> 00:15:22,320
just bought them

00:15:20,720 --> 00:15:23,839
they they approached them and moved them

00:15:22,320 --> 00:15:26,880
in and

00:15:23,839 --> 00:15:27,920
now we you know now you have chrome now

00:15:26,880 --> 00:15:30,959
all right now you have

00:15:27,920 --> 00:15:33,839
puppeteer and you have playwright um but

00:15:30,959 --> 00:15:35,759
it's uh causing issues because

00:15:33,839 --> 00:15:37,199
playwright is using a fork of a fork of

00:15:35,759 --> 00:15:39,199
firefox puppeteer

00:15:37,199 --> 00:15:41,440
but not the same one that firefox is

00:15:39,199 --> 00:15:42,880
using now so

00:15:41,440 --> 00:15:44,800
if that makes your head spin yeah it

00:15:42,880 --> 00:15:46,160
should it's now very confusing

00:15:44,800 --> 00:15:48,320
um it's because of their shim that

00:15:46,160 --> 00:15:49,920
they've added here it can run

00:15:48,320 --> 00:15:51,519
um one cool thing is uh one of the

00:15:49,920 --> 00:15:52,560
reasons they did this was so they could

00:15:51,519 --> 00:15:54,959
run on safari

00:15:52,560 --> 00:15:56,480
which is effectively you know webkit um

00:15:54,959 --> 00:15:59,519
which means you can run

00:15:56,480 --> 00:16:00,720
um you know your your ui tests on

00:15:59,519 --> 00:16:03,360
firefox

00:16:00,720 --> 00:16:04,320
uh chrome and now safari effectively

00:16:03,360 --> 00:16:06,399
through webkit

00:16:04,320 --> 00:16:07,440
um and i'm going to give a picture of

00:16:06,399 --> 00:16:08,560
that but effectively it's not a

00:16:07,440 --> 00:16:10,399
framework right now

00:16:08,560 --> 00:16:11,600
it's a fork think of it more of a fork

00:16:10,399 --> 00:16:13,920
of puppeteer so

00:16:11,600 --> 00:16:16,000
if webdriver io wanted to i think they

00:16:13,920 --> 00:16:18,639
could very easily

00:16:16,000 --> 00:16:19,920
change their uh their their interface

00:16:18,639 --> 00:16:22,800
from the cdp

00:16:19,920 --> 00:16:24,560
um puppeteer interface to the um the

00:16:22,800 --> 00:16:25,759
shim here and i'm sure there's probably

00:16:24,560 --> 00:16:27,440
a package out there

00:16:25,759 --> 00:16:29,040
that does just that for folks that are

00:16:27,440 --> 00:16:30,959
using webdriver i o tests

00:16:29,040 --> 00:16:32,079
but want to run it with playwright and

00:16:30,959 --> 00:16:34,079
what does that give you

00:16:32,079 --> 00:16:35,759
well really right now today that gives

00:16:34,079 --> 00:16:38,160
you

00:16:35,759 --> 00:16:40,079
this which is webkit the ability to run

00:16:38,160 --> 00:16:41,759
safari tests anywhere you can run it on

00:16:40,079 --> 00:16:42,240
a jenkins linux node you can run it

00:16:41,759 --> 00:16:44,480
anywhere

00:16:42,240 --> 00:16:47,040
you can cover safari effectively which

00:16:44,480 --> 00:16:47,040
is awesome

00:16:47,120 --> 00:16:50,399
and unfortunately we don't have time to

00:16:48,320 --> 00:16:52,720
demo it but what i do want to

00:16:50,399 --> 00:16:53,600
take the time to demo is cyprus io so a

00:16:52,720 --> 00:16:56,560
little bit different

00:16:53,600 --> 00:16:58,399
um not using cdp directly it kind of is

00:16:56,560 --> 00:16:59,839
but it's proprietary so we're going all

00:16:58,399 --> 00:17:00,959
the way back to the mercury days it's

00:16:59,839 --> 00:17:03,120
proprietary

00:17:00,959 --> 00:17:05,120
um it's way more than a framework it's

00:17:03,120 --> 00:17:06,400
kind of a holistic all-in-one solution

00:17:05,120 --> 00:17:09,439
to ui testing

00:17:06,400 --> 00:17:10,720
you just npm install cypress and you

00:17:09,439 --> 00:17:14,240
have everything you need

00:17:10,720 --> 00:17:16,000
they have a freemium oss model that has

00:17:14,240 --> 00:17:17,600
a dashboard service that gives you test

00:17:16,000 --> 00:17:18,559
analytics and everything you would need

00:17:17,600 --> 00:17:20,799
to kind of

00:17:18,559 --> 00:17:21,919
complete the total feedback loop for

00:17:20,799 --> 00:17:24,319
tests um

00:17:21,919 --> 00:17:25,600
this cross platform now firefox and edge

00:17:24,319 --> 00:17:29,120
are now supported

00:17:25,600 --> 00:17:30,960
um but otherwise for most testers

00:17:29,120 --> 00:17:32,720
um it's going to become clear kind of

00:17:30,960 --> 00:17:34,240
like where the power is with this tool

00:17:32,720 --> 00:17:35,760
here in a second in the demo

00:17:34,240 --> 00:17:37,280
let me go ahead and show you so i'm

00:17:35,760 --> 00:17:41,600
going to

00:17:37,280 --> 00:17:41,600
show you the cypress tests

00:17:42,640 --> 00:17:49,200
here five minutes left

00:17:46,000 --> 00:17:50,480
great awesome so i think so in here um

00:17:49,200 --> 00:17:51,760
we are going to

00:17:50,480 --> 00:17:53,840
um do the same thing that we have been

00:17:51,760 --> 00:17:55,039
doing previously um you can notice that

00:17:53,840 --> 00:17:56,960
it has built-in waiting

00:17:55,039 --> 00:17:58,320
it's waiting for this to be to be

00:17:56,960 --> 00:18:00,559
present before moving on

00:17:58,320 --> 00:18:03,280
but it's all basically the same except

00:18:00,559 --> 00:18:05,360
we now have access to this information

00:18:03,280 --> 00:18:07,520
um we are going to wait for this to be

00:18:05,360 --> 00:18:10,880
true before moving on into the test

00:18:07,520 --> 00:18:13,360
very simple um very straightforward um

00:18:10,880 --> 00:18:15,840
uh yeah let's just run it so to run it

00:18:13,360 --> 00:18:15,840
we're gonna do

00:18:16,559 --> 00:18:23,120
npm runs as cyprus open and

00:18:19,840 --> 00:18:24,799
um this is the headed version uh you

00:18:23,120 --> 00:18:27,200
could run it endlessly if you'd like to

00:18:24,799 --> 00:18:28,160
as if it were running in ci um this is

00:18:27,200 --> 00:18:30,799
the gui

00:18:28,160 --> 00:18:32,400
um that comes with it i'm going to

00:18:30,799 --> 00:18:35,600
select the test i want to run

00:18:32,400 --> 00:18:37,200
i'm going to run it against canary so

00:18:35,600 --> 00:18:39,360
let's run it

00:18:37,200 --> 00:18:41,360
so what makes cyprus unique and

00:18:39,360 --> 00:18:42,799
differentiates it from the rest

00:18:41,360 --> 00:18:44,640
is what you're seeing on the left hand

00:18:42,799 --> 00:18:46,160
side so right now the test that we

00:18:44,640 --> 00:18:48,320
looked at is running

00:18:46,160 --> 00:18:50,080
um and it's identical to all the other

00:18:48,320 --> 00:18:52,480
tests that we saw previously

00:18:50,080 --> 00:18:55,039
um it's you know entering the username

00:18:52,480 --> 00:18:56,720
entering the password clicking

00:18:55,039 --> 00:18:59,440
waiting for this to exist and clicking

00:18:56,720 --> 00:19:00,160
on it um and it's failing in a live demo

00:18:59,440 --> 00:19:03,200
which is great

00:19:00,160 --> 00:19:04,480
let's run it again uh um let's try that

00:19:03,200 --> 00:19:05,840
one more time

00:19:04,480 --> 00:19:08,960
uh right now i don't know if you can see

00:19:05,840 --> 00:19:12,240
but my computer is slowing to a crawl

00:19:08,960 --> 00:19:14,080
yeah so unfortunately um this is

00:19:12,240 --> 00:19:15,360
exactly but we can see exactly what's

00:19:14,080 --> 00:19:18,960
not working right now

00:19:15,360 --> 00:19:21,760
um that it is um not exactly

00:19:18,960 --> 00:19:24,240
this this element is not exactly ready

00:19:21,760 --> 00:19:25,360
because the url is not exactly correct

00:19:24,240 --> 00:19:27,760
and you can see

00:19:25,360 --> 00:19:29,039
the xhr requests as they go across the

00:19:27,760 --> 00:19:31,120
wire

00:19:29,039 --> 00:19:32,960
so that's kind of kind of the power of

00:19:31,120 --> 00:19:35,280
cypress is it gives you the insight of

00:19:32,960 --> 00:19:36,880
you know why did your test fail um and

00:19:35,280 --> 00:19:38,480
you can see where it failed you can get

00:19:36,880 --> 00:19:40,400
a snapshot in the dom

00:19:38,480 --> 00:19:41,520
of what it saw when it failed and in our

00:19:40,400 --> 00:19:44,880
case this

00:19:41,520 --> 00:19:46,080
xh this link is actually bad

00:19:44,880 --> 00:19:48,080
this link that we're looking for is

00:19:46,080 --> 00:19:50,480
actually bad because it's seeing two

00:19:48,080 --> 00:19:52,160
versions of that so let's move on and

00:19:50,480 --> 00:19:54,080
pretend that didn't happen uh it's a

00:19:52,160 --> 00:19:56,720
live demo this is the way it goes

00:19:54,080 --> 00:19:57,600
um and i'll figure out what went wrong

00:19:56,720 --> 00:19:59,919
after the

00:19:57,600 --> 00:20:00,799
after the demo but let's let's do one

00:19:59,919 --> 00:20:03,679
step better

00:20:00,799 --> 00:20:05,200
and use cyprus 6.0 and take a look at

00:20:03,679 --> 00:20:06,880
what we can do as testers

00:20:05,200 --> 00:20:08,320
when we have access to everything in the

00:20:06,880 --> 00:20:10,720
browser in my case

00:20:08,320 --> 00:20:13,039
i'm going to replace the payload that

00:20:10,720 --> 00:20:15,120
comes back from the api with my name

00:20:13,039 --> 00:20:16,559
and a first name and last name which is

00:20:15,120 --> 00:20:17,280
pretty cool i'm going to modify it on

00:20:16,559 --> 00:20:21,840
the wire

00:20:17,280 --> 00:20:21,840
so let's do that

00:20:29,120 --> 00:20:32,960
yeah that's also failing um let's let me

00:20:31,600 --> 00:20:34,720
go ahead and do what we're not supposed

00:20:32,960 --> 00:20:36,720
to do and let me go ahead and add a

00:20:34,720 --> 00:20:40,400
weight i think it's just being bogged

00:20:36,720 --> 00:20:40,400
down by the fact that i'm presenting

00:20:40,960 --> 00:20:45,520
so let's put a weight which is the

00:20:43,760 --> 00:20:48,559
anti-pattern from cyprus

00:20:45,520 --> 00:20:48,880
uh let's go and give it a shot there it

00:20:48,559 --> 00:20:50,880
is

00:20:48,880 --> 00:20:52,480
there goes and what you can see is um

00:20:50,880 --> 00:20:53,840
you can see you have access to all of

00:20:52,480 --> 00:20:55,760
this information so you can see

00:20:53,840 --> 00:20:57,280
everything as it comes across the wire

00:20:55,760 --> 00:20:59,760
is available in the test and you can see

00:20:57,280 --> 00:21:01,679
i i just took and i made up a payload

00:20:59,760 --> 00:21:03,840
um you know real time in the test which

00:21:01,679 --> 00:21:07,039
is awesome what that means is

00:21:03,840 --> 00:21:08,799
where we are now um with cyprus 6.0 is

00:21:07,039 --> 00:21:10,320
we are here we're actually on the other

00:21:08,799 --> 00:21:12,000
side of the web app we're on both sides

00:21:10,320 --> 00:21:14,640
of it we can modify it

00:21:12,000 --> 00:21:16,240
on the wire we can we can make the test

00:21:14,640 --> 00:21:17,679
be anything we want so it's really

00:21:16,240 --> 00:21:18,799
powerful for example if you have an

00:21:17,679 --> 00:21:20,559
external service that's

00:21:18,799 --> 00:21:22,480
you don't want to necessarily create all

00:21:20,559 --> 00:21:24,000
the time you can mock it out stub it out

00:21:22,480 --> 00:21:25,679
or you know make the

00:21:24,000 --> 00:21:27,600
you can make this test fail any number

00:21:25,679 --> 00:21:29,679
of ways you know every once in a while

00:21:27,600 --> 00:21:32,400
you need to test that a 500 error code

00:21:29,679 --> 00:21:35,280
is handled by the api well here's your

00:21:32,400 --> 00:21:38,320
chance you can do this however you want

00:21:35,280 --> 00:21:39,840
um so in summary it's

00:21:38,320 --> 00:21:41,760
real time without flake now these all

00:21:39,840 --> 00:21:43,280
these solutions are fewer dependencies

00:21:41,760 --> 00:21:45,120
less maintenance they're all across

00:21:43,280 --> 00:21:46,880
browser but they're open source with an

00:21:45,120 --> 00:21:48,720
issue that we're going to talk about

00:21:46,880 --> 00:21:51,840
which is kind of the future right now

00:21:48,720 --> 00:21:53,520
which is where we are today with cdp

00:21:51,840 --> 00:21:54,960
we've now gotten to a situation we've

00:21:53,520 --> 00:21:57,280
never been in where we have multiple

00:21:54,960 --> 00:21:59,760
competing standards multiple competing

00:21:57,280 --> 00:22:00,799
organizations microsoft google cypress

00:21:59,760 --> 00:22:03,039
webdriver io

00:22:00,799 --> 00:22:04,400
all kind of driving towards the same

00:22:03,039 --> 00:22:06,880
goal but they're

00:22:04,400 --> 00:22:08,080
they we're no longer all happy with

00:22:06,880 --> 00:22:11,120
selenium and

00:22:08,080 --> 00:22:13,200
webdriver um that is to say until now

00:22:11,120 --> 00:22:14,720
so uh the one thing that i want to say

00:22:13,200 --> 00:22:16,640
is that selenium 4 is out

00:22:14,720 --> 00:22:18,000
um or the beta is being released you can

00:22:16,640 --> 00:22:20,880
see it here it's

00:22:18,000 --> 00:22:22,159
using um an open source w3c

00:22:20,880 --> 00:22:23,679
bi-directional cdp

00:22:22,159 --> 00:22:25,520
standard that's where they're going

00:22:23,679 --> 00:22:26,720
that's very new should be happening in

00:22:25,520 --> 00:22:29,520
the next few weeks so

00:22:26,720 --> 00:22:30,799
keep an eye on that um and it's event

00:22:29,520 --> 00:22:32,720
based and effectively

00:22:30,799 --> 00:22:34,400
yeah we've gone kind of full circle here

00:22:32,720 --> 00:22:36,960
and now selenium

00:22:34,400 --> 00:22:38,000
um is now right back to you know solving

00:22:36,960 --> 00:22:40,240
a lot of the problems

00:22:38,000 --> 00:22:41,840
that we talked about earlier so i'm

00:22:40,240 --> 00:22:43,440
going to stop so i can leave some time

00:22:41,840 --> 00:22:45,360
for a q a but in effect

00:22:43,440 --> 00:22:47,039
we talked about selenium we identified

00:22:45,360 --> 00:22:48,159
some of the problems walked through two

00:22:47,039 --> 00:22:49,840
of the solutions

00:22:48,159 --> 00:22:51,120
and with selenium four we kind of talked

00:22:49,840 --> 00:22:52,799
about what happens next with our

00:22:51,120 --> 00:22:55,840
bi-directional cvp

00:22:52,799 --> 00:22:55,840

YouTube URL: https://www.youtube.com/watch?v=wBgN82gYkBc


