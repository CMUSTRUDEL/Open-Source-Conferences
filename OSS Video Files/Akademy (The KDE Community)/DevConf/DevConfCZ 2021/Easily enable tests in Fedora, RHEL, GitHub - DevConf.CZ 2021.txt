Title: Easily enable tests in Fedora, RHEL, GitHub - DevConf.CZ 2021
Publication date: 2021-03-15
Playlist: DevConfCZ 2021
Description: 
	Speakers: Petr Šplíchal, Miroslav Vadkerti, František Nečas, Pavel Valena


Imagine there would be a simple way to enable tests in the CI. Imagine the configuration would be consistent across Fedora, RHEL, CentOS, GitHub… so you would not have to always learn a new syntax for each. Imagine you could easily open source tests and share them across different distros. Imagine you could enter your component git repository, type just seven letters and all tests would be safely executed in your preferred environment. Imagine writing or debugging a test and reviewing test results would be a joyful task. Imagine… Or, do not imagine but come & try yourself:

* Learn how to use the new tmt command line tool
* Enable a simple test in the CI using a pull request
* Create a new test for your component, track coverage
* Safely and easily execute tests from your laptop
* Run and debug test code in your preferred environment
* Overview of Fedora CI support, Packit GitHub integration
* Real-life examples, hands-on experience, space for questions

Prerequisites:
Required: Laptop with Fedora, Fedora account, FPCA signed
Recommended: A package for experimenting / contributions
Optional: A test suitable for CI


Schedule: https://sched.co/gmSD
Captions: 
	00:00:01,360 --> 00:00:05,279
welcome to our uh to our talk uh

00:00:03,840 --> 00:00:07,040
uh during which we would like to show

00:00:05,279 --> 00:00:09,519
you how easy it uh

00:00:07,040 --> 00:00:11,200
can be to enable tests in uh federal

00:00:09,519 --> 00:00:13,679
github and

00:00:11,200 --> 00:00:15,040
possibly many other places uh in the

00:00:13,679 --> 00:00:17,600
near future as well

00:00:15,040 --> 00:00:19,279
so for the introduction at the start i'm

00:00:17,600 --> 00:00:21,600
peter spichar i'm from the operating

00:00:19,279 --> 00:00:24,800
system continuous integration team

00:00:21,600 --> 00:00:27,359
and my focus is on improving tools

00:00:24,800 --> 00:00:30,320
and processes and best practices and

00:00:27,359 --> 00:00:33,440
these tmt is one of my focus items

00:00:30,320 --> 00:00:35,440
the next one is melo hello everybody i'm

00:00:33,440 --> 00:00:37,360
irobot kerti i work

00:00:35,440 --> 00:00:38,800
testing farm team and we are creating a

00:00:37,360 --> 00:00:40,800
testing system as a service

00:00:38,800 --> 00:00:42,079
which is now used for federal ci

00:00:40,800 --> 00:00:46,160
internally for real

00:00:42,079 --> 00:00:50,320
and also for packet and our main format

00:00:46,160 --> 00:00:50,320
run and how we how the tests are defined

00:00:50,879 --> 00:00:54,000
my name is pablo valena uh i'm a

00:00:53,039 --> 00:00:56,879
maintainer in

00:00:54,000 --> 00:00:58,000
fedora working for red head and i'm

00:00:56,879 --> 00:01:01,039
looking into the

00:00:58,000 --> 00:01:05,439
adoption on of tmz on

00:01:01,039 --> 00:01:07,200
github and uh fedora ci

00:01:05,439 --> 00:01:09,040
from my developers point of view

00:01:07,200 --> 00:01:11,360
frantisek

00:01:09,040 --> 00:01:12,720
my name is and i'm part of the core

00:01:11,360 --> 00:01:14,400
services team

00:01:12,720 --> 00:01:17,360
and i focus mainly on automation

00:01:14,400 --> 00:01:17,360
currently on tmt

00:01:18,240 --> 00:01:21,840
okay uh so thanks guys uh for the

00:01:20,479 --> 00:01:24,880
introduction

00:01:21,840 --> 00:01:28,159
uh let's see what we have

00:01:24,880 --> 00:01:29,920
before us so on the agent now after a

00:01:28,159 --> 00:01:31,119
short introduction about into the topic

00:01:29,920 --> 00:01:34,320
we would like to give some

00:01:31,119 --> 00:01:36,799
real-life examples of the tnt in action

00:01:34,320 --> 00:01:38,640
then some more examples and then some

00:01:36,799 --> 00:01:39,680
even more examples basically the session

00:01:38,640 --> 00:01:43,040
should be

00:01:39,680 --> 00:01:44,880
filled with examples how to how tmt

00:01:43,040 --> 00:01:47,280
works how you can use it

00:01:44,880 --> 00:01:50,399
uh what you can do with it and how you

00:01:47,280 --> 00:01:52,560
can use it to enable tests in a easy way

00:01:50,399 --> 00:01:54,560
um at the end we would like to spend

00:01:52,560 --> 00:01:55,200
some a little time about the overview of

00:01:54,560 --> 00:01:56,799
the

00:01:55,200 --> 00:01:58,240
infrastructure status so wherever it's

00:01:56,799 --> 00:02:01,040
already working

00:01:58,240 --> 00:02:01,759
and then give some space uh for

00:02:01,040 --> 00:02:06,159
questions

00:02:01,759 --> 00:02:06,719
uh um and feedback uh also so as already

00:02:06,159 --> 00:02:09,759
mentioned

00:02:06,719 --> 00:02:13,040
please share your feedback in the chat

00:02:09,759 --> 00:02:14,080
anytime and at the end if we have some

00:02:13,040 --> 00:02:17,280
extra time we can

00:02:14,080 --> 00:02:19,440
we can dive into some a bit of theory uh

00:02:17,280 --> 00:02:20,400
please note that the uh in the schedule

00:02:19,440 --> 00:02:22,800
or in the chat

00:02:20,400 --> 00:02:23,840
i included uh links to them to the

00:02:22,800 --> 00:02:26,160
presentation

00:02:23,840 --> 00:02:26,959
so if you if you don't uh if you don't

00:02:26,160 --> 00:02:28,879
follow or

00:02:26,959 --> 00:02:30,800
because i will be switching before uh

00:02:28,879 --> 00:02:33,040
between the terminal

00:02:30,800 --> 00:02:33,840
and and the slides so you can you can

00:02:33,040 --> 00:02:36,400
open your

00:02:33,840 --> 00:02:37,440
in the slides and check them there so

00:02:36,400 --> 00:02:39,840
okay so let's

00:02:37,440 --> 00:02:41,040
uh so that you have nice experience i

00:02:39,840 --> 00:02:44,480
turn off

00:02:41,040 --> 00:02:47,200
my camera and we start the decision so

00:02:44,480 --> 00:02:48,160
let's start with why uh so at the

00:02:47,200 --> 00:02:51,200
beginning there were

00:02:48,160 --> 00:02:53,440
a couple of user stories and

00:02:51,200 --> 00:02:56,160
based on them we started the work and

00:02:53,440 --> 00:02:58,000
these were uh i would highlight

00:02:56,160 --> 00:02:59,440
i would like to as a developer test i

00:02:58,000 --> 00:03:00,879
would like to have an easy way how to

00:02:59,440 --> 00:03:03,360
contribute tests

00:03:00,879 --> 00:03:05,680
so there was it was complex to various

00:03:03,360 --> 00:03:08,239
test case management tools and

00:03:05,680 --> 00:03:09,280
doing some leaders have to create

00:03:08,239 --> 00:03:13,440
accounts and stuff

00:03:09,280 --> 00:03:15,040
like that then the second one i want to

00:03:13,440 --> 00:03:16,800
easily run tests in my preferred

00:03:15,040 --> 00:03:18,400
environment so someone

00:03:16,800 --> 00:03:20,400
prefers to run tests in a row couple

00:03:18,400 --> 00:03:23,120
summary containers on a virtual machine

00:03:20,400 --> 00:03:24,560
we would like to support all of them uh

00:03:23,120 --> 00:03:27,040
if there is a problem

00:03:24,560 --> 00:03:28,239
in the in the ci i would like to be able

00:03:27,040 --> 00:03:31,920
to reproduce the issue

00:03:28,239 --> 00:03:34,959
very very easily that's another one

00:03:31,920 --> 00:03:36,799
next one is i want to have the flexible

00:03:34,959 --> 00:03:38,720
metadata for tests stored

00:03:36,799 --> 00:03:41,040
at a single place so not scattered

00:03:38,720 --> 00:03:43,760
across multiple places and i want to be

00:03:41,040 --> 00:03:45,440
so that they are human rainbow and easy

00:03:43,760 --> 00:03:48,640
to use

00:03:45,440 --> 00:03:51,200
so here's a um like high level overview

00:03:48,640 --> 00:03:51,760
of the of the solution we propose and

00:03:51,200 --> 00:03:55,200
this is

00:03:51,760 --> 00:03:57,280
so uh store all the metadata

00:03:55,200 --> 00:03:59,519
related to this execution in one place

00:03:57,280 --> 00:04:02,640
everything in plain text human variable

00:03:59,519 --> 00:04:04,400
version under git no external test case

00:04:02,640 --> 00:04:06,799
management systems

00:04:04,400 --> 00:04:08,560
we chose or we developed fmf the

00:04:06,799 --> 00:04:10,879
flexible metadata format

00:04:08,560 --> 00:04:12,480
which allows us to prevent duplication

00:04:10,879 --> 00:04:14,159
uh for example

00:04:12,480 --> 00:04:16,000
you have 100 tests and you don't want to

00:04:14,159 --> 00:04:18,400
store the same information about the

00:04:16,000 --> 00:04:21,040
required packages hundred times

00:04:18,400 --> 00:04:22,079
then uh we designed a specification

00:04:21,040 --> 00:04:25,199
which describes the

00:04:22,079 --> 00:04:27,040
uh the syntax and the next step was to

00:04:25,199 --> 00:04:27,680
implement tool which would uh which

00:04:27,040 --> 00:04:29,919
would

00:04:27,680 --> 00:04:31,840
provide provide an easy way how to

00:04:29,919 --> 00:04:33,440
create new tests how to run tests from

00:04:31,840 --> 00:04:36,960
the laptop how to

00:04:33,440 --> 00:04:38,400
enable them and basically maintain so

00:04:36,960 --> 00:04:39,440
that's the test management tool is the

00:04:38,400 --> 00:04:41,919
tmt

00:04:39,440 --> 00:04:43,759
and the next one is to enable enable it

00:04:41,919 --> 00:04:45,199
in the in the pipeline so it actually

00:04:43,759 --> 00:04:48,000
works

00:04:45,199 --> 00:04:48,479
and many of that has already been done

00:04:48,000 --> 00:04:51,440
so

00:04:48,479 --> 00:04:53,360
uh let's see so if you want to start

00:04:51,440 --> 00:04:56,240
experimenting and we we encourage you

00:04:53,360 --> 00:04:58,880
you experiment during the session

00:04:56,240 --> 00:05:00,160
these are the first steps so you should

00:04:58,880 --> 00:05:02,960
install the

00:05:00,160 --> 00:05:04,960
you should install it to the tool it's

00:05:02,960 --> 00:05:06,240
available in fedora so you can do just

00:05:04,960 --> 00:05:09,120
the invent start tmt

00:05:06,240 --> 00:05:10,639
you get the basics and features uh there

00:05:09,120 --> 00:05:13,360
are extra packages

00:05:10,639 --> 00:05:13,680
which have additional dependencies like

00:05:13,360 --> 00:05:15,120
for

00:05:13,680 --> 00:05:18,000
provisioning in container or

00:05:15,120 --> 00:05:20,080
provisioning in virtual machine

00:05:18,000 --> 00:05:22,000
if you don't care about this space and

00:05:20,080 --> 00:05:23,440
want to have everything just install tnt

00:05:22,000 --> 00:05:26,000
all

00:05:23,440 --> 00:05:26,720
um i would like to point out that there

00:05:26,000 --> 00:05:29,120
is a copper

00:05:26,720 --> 00:05:30,880
repository so in order to get the length

00:05:29,120 --> 00:05:33,120
is greatest you can enable

00:05:30,880 --> 00:05:35,120
pss slash tmt and install empty from

00:05:33,120 --> 00:05:35,840
there so you will have the fresh bits

00:05:35,120 --> 00:05:39,360
there

00:05:35,840 --> 00:05:42,720
also if you want just to experiment

00:05:39,360 --> 00:05:43,759
safely uh you can use our fresh

00:05:42,720 --> 00:05:47,120
container images

00:05:43,759 --> 00:05:50,000
from qui io testing farm slash tnt

00:05:47,120 --> 00:05:51,600
or tnt all again the first container is

00:05:50,000 --> 00:05:54,400
quite small the second one is

00:05:51,600 --> 00:05:54,880
a bit large because it has a virtual

00:05:54,400 --> 00:05:57,199
virtual

00:05:54,880 --> 00:05:58,560
and uh the tutorial independence is

00:05:57,199 --> 00:06:01,520
included

00:05:58,560 --> 00:06:02,479
so um that's for the installation and we

00:06:01,520 --> 00:06:06,000
start with

00:06:02,479 --> 00:06:08,240
simple stuff so if you come

00:06:06,000 --> 00:06:09,919
to a repository or somebody has already

00:06:08,240 --> 00:06:12,240
prepared tests or

00:06:09,919 --> 00:06:13,039
has configured tests the only thing you

00:06:12,240 --> 00:06:16,560
do is

00:06:13,039 --> 00:06:19,680
tmt so let's see uh i'm

00:06:16,560 --> 00:06:22,639
in wg repository i said tmt oh

00:06:19,680 --> 00:06:24,080
okay so here's nothing i changed to our

00:06:22,639 --> 00:06:26,639
tmt repository

00:06:24,080 --> 00:06:27,759
for uh where we have uh sources for for

00:06:26,639 --> 00:06:30,560
for tmt

00:06:27,759 --> 00:06:32,240
and i say tmt and here we see so there

00:06:30,560 --> 00:06:35,919
are a bunch of tests

00:06:32,240 --> 00:06:37,280
uh we have nine plans we are extensively

00:06:35,919 --> 00:06:40,520
using uh plans for

00:06:37,280 --> 00:06:43,280
protesting things and we have also uh

00:06:40,520 --> 00:06:44,960
157 stories which describe the features

00:06:43,280 --> 00:06:47,919
we want to implement and they are in

00:06:44,960 --> 00:06:48,880
different states so in this way if

00:06:47,919 --> 00:06:50,560
you're not sure if

00:06:48,880 --> 00:06:53,280
everything is set up if everything is

00:06:50,560 --> 00:06:56,400
working you just write tmt and it says

00:06:53,280 --> 00:06:56,800
what's available there and let's start

00:06:56,400 --> 00:07:00,479
with

00:06:56,800 --> 00:07:03,120
actually um enabling a test so

00:07:00,479 --> 00:07:04,160
we wanted to make it very easy to enable

00:07:03,120 --> 00:07:08,400
a test

00:07:04,160 --> 00:07:10,479
so you don't need to learn the syntax

00:07:08,400 --> 00:07:11,759
the right location for the files and all

00:07:10,479 --> 00:07:14,000
the stuff like that

00:07:11,759 --> 00:07:16,080
so the only thing to enable tests should

00:07:14,000 --> 00:07:19,120
be something like a simple command

00:07:16,080 --> 00:07:22,080
tmt init does exactly that tmt init

00:07:19,120 --> 00:07:24,080
supports templates so if you uh if you

00:07:22,080 --> 00:07:27,360
have your repository

00:07:24,080 --> 00:07:30,800
and there's nothing you can do tmt in it

00:07:27,360 --> 00:07:32,880
minus template mini minimal okay

00:07:30,800 --> 00:07:34,000
so now i do tmt and it says okay here's

00:07:32,880 --> 00:07:35,759
one plan

00:07:34,000 --> 00:07:37,199
so let's have a look how the plan looks

00:07:35,759 --> 00:07:40,319
like so

00:07:37,199 --> 00:07:42,479
here we have a minimal smoke test

00:07:40,319 --> 00:07:43,360
it can be like this really two lines

00:07:42,479 --> 00:07:46,560
nothing more

00:07:43,360 --> 00:07:47,520
and this is this is just enough um okay

00:07:46,560 --> 00:07:50,560
so this is for

00:07:47,520 --> 00:07:53,120
wget and we do a very simple smoke test

00:07:50,560 --> 00:07:56,840
double get minus minus help

00:07:53,120 --> 00:08:00,319
and um that will be it okay

00:07:56,840 --> 00:08:02,160
so what now um

00:08:00,319 --> 00:08:04,000
that's that's the example i just shown

00:08:02,160 --> 00:08:07,840
and the minimal example

00:08:04,000 --> 00:08:11,360
um okay so it's time to enable the test

00:08:07,840 --> 00:08:14,319
so you just hit add you check out

00:08:11,360 --> 00:08:16,639
check out some branch let's okay smoke

00:08:14,319 --> 00:08:16,639
test

00:08:18,800 --> 00:08:27,840
you comment let's say

00:08:21,919 --> 00:08:27,840
enable basic smoke test

00:08:29,520 --> 00:08:32,639
you push it to your fork

00:08:34,399 --> 00:08:37,919
and create this and create the actual

00:08:36,800 --> 00:08:40,159
pull request

00:08:37,919 --> 00:08:41,279
so there should be there should be your

00:08:40,159 --> 00:08:45,279
own shown

00:08:41,279 --> 00:08:45,279
here okay so let's see

00:08:45,920 --> 00:08:51,279
bundling here we have it prepared it

00:08:49,440 --> 00:08:54,640
will be again straw height

00:08:51,279 --> 00:08:57,920
gradable request okay

00:08:54,640 --> 00:09:00,480
and now wait a bit

00:08:57,920 --> 00:09:01,360
now wait a bit of course but if you're

00:09:00,480 --> 00:09:03,279
impatient

00:09:01,360 --> 00:09:05,040
you don't want to wait you want to try

00:09:03,279 --> 00:09:08,080
things so let's see

00:09:05,040 --> 00:09:10,399
uh we thought that the

00:09:08,080 --> 00:09:11,839
scenario when you come you want to

00:09:10,399 --> 00:09:14,000
develop a component

00:09:11,839 --> 00:09:14,880
and you want to make sure that the

00:09:14,000 --> 00:09:16,320
change you did

00:09:14,880 --> 00:09:19,120
didn't break anything and then you want

00:09:16,320 --> 00:09:22,240
to verify it should be very easy so

00:09:19,120 --> 00:09:23,920
tmt runner should be the way how to run

00:09:22,240 --> 00:09:27,440
all available tests

00:09:23,920 --> 00:09:30,959
so okay so if we are here i can do

00:09:27,440 --> 00:09:32,880
tmt run uh

00:09:30,959 --> 00:09:34,399
let's see what would happen i will use

00:09:32,880 --> 00:09:36,640
drive

00:09:34,399 --> 00:09:37,920
okay so here you see uh so there will be

00:09:36,640 --> 00:09:40,240
some discover phase

00:09:37,920 --> 00:09:41,680
provisioning virtual some preparations

00:09:40,240 --> 00:09:44,080
no preparations

00:09:41,680 --> 00:09:45,120
no tests because uh the driver does not

00:09:44,080 --> 00:09:47,279
actually uh

00:09:45,120 --> 00:09:49,519
do the checking so let's try actually

00:09:47,279 --> 00:09:53,200
what will happen here

00:09:49,519 --> 00:09:54,000
so uh as you see the first step is

00:09:53,200 --> 00:09:57,760
discover

00:09:54,000 --> 00:10:01,120
discover checks for available tests

00:09:57,760 --> 00:10:03,920
here we did a simple

00:10:01,120 --> 00:10:06,000
shell discover because we have a single

00:10:03,920 --> 00:10:09,519
line with a bit of smog test there

00:10:06,000 --> 00:10:11,360
so uh it it revealed one test

00:10:09,519 --> 00:10:12,880
um then the second step is to provision

00:10:11,360 --> 00:10:16,000
the machine

00:10:12,880 --> 00:10:18,000
we by default we want we have virtual

00:10:16,000 --> 00:10:20,399
so that you have like full support for

00:10:18,000 --> 00:10:22,640
full virtualization where you can

00:10:20,399 --> 00:10:24,320
basically test anything we could make

00:10:22,640 --> 00:10:26,000
containers to make it faster but

00:10:24,320 --> 00:10:27,440
people we thought the virtual would be

00:10:26,000 --> 00:10:29,200
the best default because it doesn't

00:10:27,440 --> 00:10:30,720
affect your laptop so it's safe

00:10:29,200 --> 00:10:32,399
but you have the full virtualization so

00:10:30,720 --> 00:10:34,399
that's the default

00:10:32,399 --> 00:10:35,760
and you see okay provision is done

00:10:34,399 --> 00:10:36,640
preparations we didn't have any

00:10:35,760 --> 00:10:38,720
preparations

00:10:36,640 --> 00:10:41,279
and for the execute step tmt one test

00:10:38,720 --> 00:10:44,720
was executed but there was some error oh

00:10:41,279 --> 00:10:48,079
okay um but what was wrong

00:10:44,720 --> 00:10:49,920
so you don't have to run again and

00:10:48,079 --> 00:10:51,200
like in verbose mode or debug mode or

00:10:49,920 --> 00:10:55,120
something like that

00:10:51,200 --> 00:10:59,040
you just run tmt run last uh

00:10:55,120 --> 00:11:01,920
tm clear and last report would show you

00:10:59,040 --> 00:11:04,320
what happened and it says is it's done

00:11:01,920 --> 00:11:08,079
but i want to rerun it again

00:11:04,320 --> 00:11:10,720
so i place their minus v uh

00:11:08,079 --> 00:11:11,440
for for more detail verbose mode and

00:11:10,720 --> 00:11:15,440
here you see

00:11:11,440 --> 00:11:18,480
oh uh of course it was not installed

00:11:15,440 --> 00:11:19,680
so what do we do um see if i will take

00:11:18,480 --> 00:11:20,320
care of that because there will be a

00:11:19,680 --> 00:11:22,800
fresh package

00:11:20,320 --> 00:11:23,760
so uh it will it will make take care of

00:11:22,800 --> 00:11:27,519
that

00:11:23,760 --> 00:11:28,240
but um we say um that it would be good

00:11:27,519 --> 00:11:32,320
to prepare

00:11:28,240 --> 00:11:35,920
so i'll say prepare how is to install

00:11:32,320 --> 00:11:40,240
and the package would be delegate

00:11:35,920 --> 00:11:43,440
to make there okay tmt run

00:11:40,240 --> 00:11:46,720
and let's uh let's see what will

00:11:43,440 --> 00:11:49,600
what will happen but

00:11:46,720 --> 00:11:51,120
uh until the command is finished uh help

00:11:49,600 --> 00:11:53,680
is your friend

00:11:51,120 --> 00:11:54,320
if you uh want to know about how to how

00:11:53,680 --> 00:11:56,320
to work

00:11:54,320 --> 00:11:58,240
with with the tests or which commands

00:11:56,320 --> 00:11:59,839
are available so for example here tmg

00:11:58,240 --> 00:12:02,160
run minus minus help

00:11:59,839 --> 00:12:04,480
describes the individual steps so what

00:12:02,160 --> 00:12:06,720
discover provision prepare mean

00:12:04,480 --> 00:12:07,519
uh execute how you can report result and

00:12:06,720 --> 00:12:09,440
finish

00:12:07,519 --> 00:12:11,040
there are some additional subcommands

00:12:09,440 --> 00:12:13,279
login which can provide

00:12:11,040 --> 00:12:14,639
you an interactive shell on the guest

00:12:13,279 --> 00:12:15,839
you can select plans

00:12:14,639 --> 00:12:17,680
and select tests which should be

00:12:15,839 --> 00:12:20,000
executed if you dive

00:12:17,680 --> 00:12:20,800
a little bit more tmdrum provision help

00:12:20,000 --> 00:12:22,240
it gives you an

00:12:20,800 --> 00:12:24,160
overview of the provisioning methods

00:12:22,240 --> 00:12:26,639
which are the handles so here you see

00:12:24,160 --> 00:12:28,959
we have connect local uh one minute tip

00:12:26,639 --> 00:12:31,440
and container virtual test cloud

00:12:28,959 --> 00:12:33,120
so these five provision methods for

00:12:31,440 --> 00:12:34,160
running your tests and you can you can

00:12:33,120 --> 00:12:37,440
freely choose

00:12:34,160 --> 00:12:39,600
what's the best uh you can leave

00:12:37,440 --> 00:12:42,160
you can type even even more deeper the

00:12:39,600 --> 00:12:45,120
internal provision how virtual help

00:12:42,160 --> 00:12:45,920
and you will see the options for the

00:12:45,120 --> 00:12:49,519
virtual

00:12:45,920 --> 00:12:51,680
plugin uh virtual provision plugin

00:12:49,519 --> 00:12:53,360
so for example specify a amount of

00:12:51,680 --> 00:12:55,680
memory or disk

00:12:53,360 --> 00:12:57,040
uh let's see what happened here uh we

00:12:55,680 --> 00:13:00,399
are installing the get

00:12:57,040 --> 00:13:00,720
uh slow metadata fetching so that would

00:13:00,399 --> 00:13:02,560
be

00:13:00,720 --> 00:13:04,320
that would be uh i will be continuing

00:13:02,560 --> 00:13:08,560
here and describing stuff

00:13:04,320 --> 00:13:09,519
what we have so um the discover step as

00:13:08,560 --> 00:13:12,000
i already said

00:13:09,519 --> 00:13:12,639
uh it will tell you what what would be

00:13:12,000 --> 00:13:14,000
wrong so

00:13:12,639 --> 00:13:16,880
imagine you come to report you don't

00:13:14,000 --> 00:13:17,920
want to execute the test because it can

00:13:16,880 --> 00:13:19,360
take hours

00:13:17,920 --> 00:13:21,040
uh you just want to know what will

00:13:19,360 --> 00:13:23,360
happen or what would happen

00:13:21,040 --> 00:13:24,399
so you run just the tmt run i think

00:13:23,360 --> 00:13:26,800
you're on discover oh

00:13:24,399 --> 00:13:29,120
well and we see the test already passed

00:13:26,800 --> 00:13:29,680
so that's that's very nice and we can

00:13:29,120 --> 00:13:32,800
see

00:13:29,680 --> 00:13:34,480
that actually there was output from the

00:13:32,800 --> 00:13:35,839
from the help command and it nicely

00:13:34,480 --> 00:13:39,360
worked fine

00:13:35,839 --> 00:13:43,199
uh so second time tmt run

00:13:39,360 --> 00:13:45,839
discover so was there one test selected

00:13:43,199 --> 00:13:48,160
uh some more verbosity oh okay so that's

00:13:45,839 --> 00:13:51,040
that's the script zero zero because it's

00:13:48,160 --> 00:13:51,760
not very interesting but let's see what

00:13:51,040 --> 00:13:55,519
we have

00:13:51,760 --> 00:13:59,680
for example in gmt report tmt run

00:13:55,519 --> 00:14:00,399
discover let's see so advanced plan i

00:13:59,680 --> 00:14:03,680
test

00:14:00,399 --> 00:14:07,360
another uh basic basic

00:14:03,680 --> 00:14:09,279
27 tests features core 10 tests

00:14:07,360 --> 00:14:11,760
we have some extra plans for minimal

00:14:09,279 --> 00:14:14,560
installation and installing using pip

00:14:11,760 --> 00:14:15,199
to making sure these leds are not broken

00:14:14,560 --> 00:14:17,360
and

00:14:15,199 --> 00:14:18,880
we also just have a couple of times for

00:14:17,360 --> 00:14:20,000
probably testing that the provisioning

00:14:18,880 --> 00:14:22,399
actually works so

00:14:20,000 --> 00:14:24,959
some limited set of tests is run against

00:14:22,399 --> 00:14:27,199
connect and terminate and everything

00:14:24,959 --> 00:14:28,800
okay good so this is this current so now

00:14:27,199 --> 00:14:32,160
you can uh

00:14:28,800 --> 00:14:34,240
you know how to discover this tmc around

00:14:32,160 --> 00:14:37,279
this cover you can shorten it if you are

00:14:34,240 --> 00:14:39,920
lazy uh planner name

00:14:37,279 --> 00:14:40,320
planner name core okay so you can select

00:14:39,920 --> 00:14:43,199
uh

00:14:40,320 --> 00:14:44,399
tell me what's up next oh okay discover

00:14:43,199 --> 00:14:46,959
they're both

00:14:44,399 --> 00:14:47,760
let's see so we have 10 tests 10 tests

00:14:46,959 --> 00:14:50,800
for the core

00:14:47,760 --> 00:14:52,880
feature score plan um okay

00:14:50,800 --> 00:14:54,320
that was covered and now for the project

00:14:52,880 --> 00:14:57,440
part

00:14:54,320 --> 00:14:58,000
so you can provision you can if you you

00:14:57,440 --> 00:15:00,160
saw i

00:14:58,000 --> 00:15:01,279
selected the discovered step and it ran

00:15:00,160 --> 00:15:04,800
only in the discussion

00:15:01,279 --> 00:15:08,160
but you can run all all steps but adjust

00:15:04,800 --> 00:15:11,199
some so for example here tmt run all

00:15:08,160 --> 00:15:11,680
provision minus minus how container

00:15:11,199 --> 00:15:14,320
means

00:15:11,680 --> 00:15:16,480
run all steps but instead of the default

00:15:14,320 --> 00:15:17,120
uh virtual iranian container so let's

00:15:16,480 --> 00:15:20,800
make it

00:15:17,120 --> 00:15:23,839
much faster our uh previous scenario

00:15:20,800 --> 00:15:26,399
tmt tmt run all

00:15:23,839 --> 00:15:26,399
or a

00:15:27,600 --> 00:15:34,639
let's see provision provision

00:15:31,600 --> 00:15:36,639
uh container and i will make it faster

00:15:34,639 --> 00:15:39,120
because i have fresh federal image so

00:15:36,639 --> 00:15:41,120
let's see and we are interested to to

00:15:39,120 --> 00:15:43,040
see what actually happens

00:15:41,120 --> 00:15:44,160
under the hook so let's let's do it this

00:15:43,040 --> 00:15:47,120
way

00:15:44,160 --> 00:15:49,600
okay so it's doing the beginning

00:15:47,120 --> 00:15:52,000
container is ready we do the preparation

00:15:49,600 --> 00:15:53,199
installability do the like oh that was

00:15:52,000 --> 00:15:55,759
much faster

00:15:53,199 --> 00:15:56,800
okay so that's that's a that's that's a

00:15:55,759 --> 00:15:58,959
way how to go if you

00:15:56,800 --> 00:16:00,720
don't need full virtualization if you

00:15:58,959 --> 00:16:04,320
need tmt-run is the default

00:16:00,720 --> 00:16:06,480
uh but you can explicitly override with

00:16:04,320 --> 00:16:09,040
what's specified in the plan so you can

00:16:06,480 --> 00:16:10,000
specify project virtual while for

00:16:09,040 --> 00:16:12,240
example

00:16:10,000 --> 00:16:14,240
i'm used to because i want to test the

00:16:12,240 --> 00:16:17,440
local changes very quickly

00:16:14,240 --> 00:16:18,160
uh in the in the top hierarchy i specify

00:16:17,440 --> 00:16:21,360
the provision

00:16:18,160 --> 00:16:24,800
is local for for all tmt plans

00:16:21,360 --> 00:16:25,680
fine so that's virtual of course it's

00:16:24,800 --> 00:16:28,480
possible to run

00:16:25,680 --> 00:16:29,360
local that's what i have just just shown

00:16:28,480 --> 00:16:32,320
to you

00:16:29,360 --> 00:16:33,600
and if you have a test box you can just

00:16:32,320 --> 00:16:36,959
provide the ip or

00:16:33,600 --> 00:16:37,360
hostname with the password or private

00:16:36,959 --> 00:16:39,680
key

00:16:37,360 --> 00:16:40,560
you can connect a machine and that's

00:16:39,680 --> 00:16:43,120
about it

00:16:40,560 --> 00:16:45,040
for the provisioning provisioning part

00:16:43,120 --> 00:16:46,880
uh now let's jump to install

00:16:45,040 --> 00:16:48,880
uh for the installing um

00:16:46,880 --> 00:16:51,040
[Music]

00:16:48,880 --> 00:16:52,480
you can as you as you already as you

00:16:51,040 --> 00:16:53,839
already saw uh

00:16:52,480 --> 00:16:55,680
you might want to install some

00:16:53,839 --> 00:16:58,320
additional packages so you can

00:16:55,680 --> 00:16:59,120
we have this prepare prepare step and

00:16:58,320 --> 00:17:01,680
you can

00:16:59,120 --> 00:17:03,920
uh you can use the the plugin install

00:17:01,680 --> 00:17:06,959
which can install a package

00:17:03,920 --> 00:17:10,160
package httpd it can enable copper

00:17:06,959 --> 00:17:12,720
install fresh packages from there it

00:17:10,160 --> 00:17:14,079
also can install packages from local

00:17:12,720 --> 00:17:15,679
directory so let's see

00:17:14,079 --> 00:17:19,280
for example this is interesting because

00:17:15,679 --> 00:17:23,120
you make rpms make rpm

00:17:19,280 --> 00:17:26,160
so you get a bunch of rpms uh

00:17:23,120 --> 00:17:29,520
okay some test is running

00:17:26,160 --> 00:17:32,559
so let's see tmt

00:17:29,520 --> 00:17:35,520
i think the rpms so

00:17:32,559 --> 00:17:37,840
here here we have the rpms uh and i want

00:17:35,520 --> 00:17:41,679
to test these these rpms

00:17:37,840 --> 00:17:44,720
uh so uh i would run for example tmt

00:17:41,679 --> 00:17:48,559
run when core

00:17:44,720 --> 00:17:50,960
this name smoke uh and i would run all

00:17:48,559 --> 00:17:50,960
steps

00:17:51,280 --> 00:17:55,520
uh but i wouldn't run it in a in a

00:17:53,440 --> 00:17:58,640
container so provision would be

00:17:55,520 --> 00:18:01,520
a container and it would be

00:17:58,640 --> 00:18:02,880
image would be fedora fresh to make it

00:18:01,520 --> 00:18:07,120
fast

00:18:02,880 --> 00:18:10,400
and we do the preparation prepare

00:18:07,120 --> 00:18:13,520
install and directory is this

00:18:10,400 --> 00:18:15,760
so it would take it would take the

00:18:13,520 --> 00:18:17,919
packages from the directory

00:18:15,760 --> 00:18:19,360
here you see it checks the directory and

00:18:17,919 --> 00:18:21,840
we okay we see

00:18:19,360 --> 00:18:22,480
uh not much details here because i

00:18:21,840 --> 00:18:24,640
didn't

00:18:22,480 --> 00:18:26,960
turn on verbosity but in this way you

00:18:24,640 --> 00:18:28,160
get you get the fresh rpms installed on

00:18:26,960 --> 00:18:30,160
the on the box

00:18:28,160 --> 00:18:31,760
uh in the container and actually it has

00:18:30,160 --> 00:18:32,880
the latest bits which you have just

00:18:31,760 --> 00:18:34,880
modified

00:18:32,880 --> 00:18:36,320
okay so that would be for the install

00:18:34,880 --> 00:18:38,240
part uh

00:18:36,320 --> 00:18:40,000
we also support of course and simple

00:18:38,240 --> 00:18:40,480
playbooks so you can provide a playbook

00:18:40,000 --> 00:18:43,679
to

00:18:40,480 --> 00:18:44,080
prepare prepare the guest by playbook or

00:18:43,679 --> 00:18:47,200
some

00:18:44,080 --> 00:18:48,320
shell script no problem with that for

00:18:47,200 --> 00:18:51,039
the reporting part

00:18:48,320 --> 00:18:51,600
uh you've seen that already so tmt

00:18:51,039 --> 00:18:54,720
runner

00:18:51,600 --> 00:18:57,520
planner plan name horror

00:18:54,720 --> 00:18:58,160
i can i can run some plan and it gives

00:18:57,520 --> 00:19:01,120
just some

00:18:58,160 --> 00:19:02,559
brief overview but we can use tf during

00:19:01,120 --> 00:19:05,760
last report

00:19:02,559 --> 00:19:08,880
uh with different verbosity levels and

00:19:05,760 --> 00:19:12,240
see some more some more details there

00:19:08,880 --> 00:19:15,440
fine okay um now what's

00:19:12,240 --> 00:19:17,280
what what's nice so let's see so

00:19:15,440 --> 00:19:19,679
what do we have currently here we are

00:19:17,280 --> 00:19:22,880
just uh still installing the packages

00:19:19,679 --> 00:19:25,760
okay what a shame uh but i can

00:19:22,880 --> 00:19:26,720
drop finish finish the container will be

00:19:25,760 --> 00:19:29,760
stopped

00:19:26,720 --> 00:19:30,480
uh i have some uh example uh example

00:19:29,760 --> 00:19:32,480
plans

00:19:30,480 --> 00:19:35,039
and here comes the new feature tmd

00:19:32,480 --> 00:19:38,960
status implemented by franta

00:19:35,039 --> 00:19:42,320
and i just recently so here i have this

00:19:38,960 --> 00:19:46,320
feature some recent one recent

00:19:42,320 --> 00:19:49,840
run and i want to make a report on it

00:19:46,320 --> 00:19:52,960
tmt run the id is

00:19:49,840 --> 00:19:55,919
this and i do the reporting

00:19:52,960 --> 00:19:56,880
and i want to do it like an html and i

00:19:55,919 --> 00:20:00,000
want to

00:19:56,880 --> 00:20:02,400
uh open it in a web page

00:20:00,000 --> 00:20:04,000
so here we see here you see there are

00:20:02,400 --> 00:20:06,880
like three plants

00:20:04,000 --> 00:20:08,880
and all are green very nice you can jump

00:20:06,880 --> 00:20:11,200
to the logs directly from the web page

00:20:08,880 --> 00:20:15,360
which is quite fine

00:20:11,200 --> 00:20:17,840
okay so um and for the status

00:20:15,360 --> 00:20:18,799
uh there are different variability

00:20:17,840 --> 00:20:21,760
levels so you can

00:20:18,799 --> 00:20:23,840
you can see what which plan already has

00:20:21,760 --> 00:20:26,640
finished or for example

00:20:23,840 --> 00:20:28,480
which steps were finished in the plan

00:20:26,640 --> 00:20:31,520
which is quite nice

00:20:28,480 --> 00:20:34,960
so that would be uh for the

00:20:31,520 --> 00:20:38,000
report test results uh okay

00:20:34,960 --> 00:20:40,480
tmt plan so far so good everybody uh

00:20:38,000 --> 00:20:42,000
can you hear me does it work still no

00:20:40,480 --> 00:20:43,760
problems

00:20:42,000 --> 00:20:45,919
it's good just as you're typing it's

00:20:43,760 --> 00:20:48,159
quite choppy i would say that

00:20:45,919 --> 00:20:50,559
like the the screen sharing is quite

00:20:48,159 --> 00:20:53,520
slow so as you are typing fast

00:20:50,559 --> 00:20:54,159
it's it's it's sometimes hard hardly

00:20:53,520 --> 00:20:55,679
hard to watch

00:20:54,159 --> 00:20:57,280
just just maybe that okay one

00:20:55,679 --> 00:20:59,200
observation hopefully the slides

00:20:57,280 --> 00:21:00,960
slides will will help it with the

00:20:59,200 --> 00:21:02,799
examples because we have most of that

00:21:00,960 --> 00:21:05,520
covered in this ones as well

00:21:02,799 --> 00:21:07,600
so uh here we go with the tmt plan uh so

00:21:05,520 --> 00:21:08,159
the tmt plan is command for managing

00:21:07,600 --> 00:21:10,240
plans

00:21:08,159 --> 00:21:12,880
uh the plan looks like this there's some

00:21:10,240 --> 00:21:14,960
summary you define the provision

00:21:12,880 --> 00:21:16,320
you define the preparer step you define

00:21:14,960 --> 00:21:18,320
what should be executed

00:21:16,320 --> 00:21:19,840
that's that's the plan what you can do

00:21:18,320 --> 00:21:23,200
with plans is you can

00:21:19,840 --> 00:21:26,400
check what's available tmt plans

00:21:23,200 --> 00:21:29,919
you can do tmt plan dmt

00:21:26,400 --> 00:21:33,440
plan list or you can do tmd

00:21:29,919 --> 00:21:35,440
plan a show to for example the core

00:21:33,440 --> 00:21:36,799
the core plan and you would get some

00:21:35,440 --> 00:21:40,880
some uh

00:21:36,799 --> 00:21:44,640
some some more details about that

00:21:40,880 --> 00:21:47,200
so that's for plans listing showing uh

00:21:44,640 --> 00:21:47,760
and we could dive into some examples but

00:21:47,200 --> 00:21:50,880
i think

00:21:47,760 --> 00:21:52,400
uh let's go let's go on of course

00:21:50,880 --> 00:21:54,159
uh if you want to create a new plan

00:21:52,400 --> 00:21:56,840
there's the command tmt plan

00:21:54,159 --> 00:21:58,559
create and you it would create a new

00:21:56,840 --> 00:22:00,080
plan

00:21:58,559 --> 00:22:02,400
there are some templates so you can

00:22:00,080 --> 00:22:05,120
choose what will be the best way

00:22:02,400 --> 00:22:06,799
some extra features for from us must be

00:22:05,120 --> 00:22:08,880
preparing plans

00:22:06,799 --> 00:22:09,919
and now for the test this is this is

00:22:08,880 --> 00:22:12,000
probably the

00:22:09,919 --> 00:22:13,919
most interesting one so if you as a

00:22:12,000 --> 00:22:15,039
tester level we want to create tests of

00:22:13,919 --> 00:22:18,320
course

00:22:15,039 --> 00:22:20,960
so uh instead of old ancient uh

00:22:18,320 --> 00:22:22,000
ugly make files this is the way how we

00:22:20,960 --> 00:22:25,600
want to go forward

00:22:22,000 --> 00:22:27,520
a simple nice yaml file

00:22:25,600 --> 00:22:29,280
with support for fmf with the hierarchy

00:22:27,520 --> 00:22:31,039
and and that stuff so you place the

00:22:29,280 --> 00:22:34,400
summary description

00:22:31,039 --> 00:22:35,360
path test you might take with some tags

00:22:34,400 --> 00:22:37,039
or tier

00:22:35,360 --> 00:22:39,360
you are the duration recurrent packages

00:22:37,039 --> 00:22:41,840
and that's it nothing more nothing more

00:22:39,360 --> 00:22:42,960
again tests tmd tests the indie test

00:22:41,840 --> 00:22:46,799
awesome

00:22:42,960 --> 00:22:50,320
uh tmt dust test a list

00:22:46,799 --> 00:22:51,039
uh you can filter use me filter for

00:22:50,320 --> 00:22:54,559
example

00:22:51,039 --> 00:22:57,600
only the around tests and do such stuff

00:22:54,559 --> 00:22:58,240
so that's uh for test test show of

00:22:57,600 --> 00:23:01,280
course

00:22:58,240 --> 00:23:04,159
and tmt test linked can uh

00:23:01,280 --> 00:23:06,000
check whether the metadata are well set

00:23:04,159 --> 00:23:08,080
uh it has some basic functionalities for

00:23:06,000 --> 00:23:10,480
now but we want to extend it for

00:23:08,080 --> 00:23:13,360
creating tests the empty test created

00:23:10,480 --> 00:23:15,039
tmg test created a smoke so if you if

00:23:13,360 --> 00:23:16,159
you want to create a new test this is

00:23:15,039 --> 00:23:18,559
this is the way

00:23:16,159 --> 00:23:19,600
this is the way to go uh we can try this

00:23:18,559 --> 00:23:21,760
in the and

00:23:19,600 --> 00:23:23,440
double click the repository so let's see

00:23:21,760 --> 00:23:27,440
empty test

00:23:23,440 --> 00:23:30,400
create it could be vclip and

00:23:27,440 --> 00:23:32,799
it would be tests basic i don't know

00:23:30,400 --> 00:23:36,080
something like that

00:23:32,799 --> 00:23:39,039
create templates sorry okay

00:23:36,080 --> 00:23:40,400
so here we see uh we have one test and

00:23:39,039 --> 00:23:43,279
one plan

00:23:40,400 --> 00:23:44,960
and and if you look into the in the into

00:23:43,279 --> 00:23:46,720
the repository for the basic test you

00:23:44,960 --> 00:23:48,960
would see that there's the

00:23:46,720 --> 00:23:51,600
some skeleton folder for the metadata

00:23:48,960 --> 00:23:53,679
and the eclipse content actually

00:23:51,600 --> 00:23:56,240
so we can you can quickly quickly start

00:23:53,679 --> 00:23:58,400
with this with this example

00:23:56,240 --> 00:24:00,080
uh libraries uh i wanted to mention

00:23:58,400 --> 00:24:00,720
libraries because quite often you don't

00:24:00,080 --> 00:24:03,120
want to

00:24:00,720 --> 00:24:04,799
write the same thing again and again so

00:24:03,120 --> 00:24:08,000
we have the clip libraries

00:24:04,799 --> 00:24:08,960
uh enabling the b clip library is um as

00:24:08,000 --> 00:24:12,480
easy as this

00:24:08,960 --> 00:24:13,520
uh you um use a require library http

00:24:12,480 --> 00:24:15,279
http

00:24:13,520 --> 00:24:17,440
and in the test you can then use

00:24:15,279 --> 00:24:19,650
libraries features so for example

00:24:17,440 --> 00:24:21,919
setting up quite complex

00:24:19,650 --> 00:24:23,840
[Music]

00:24:21,919 --> 00:24:25,760
things around like apache with all the

00:24:23,840 --> 00:24:27,760
certificate certificates and putting

00:24:25,760 --> 00:24:30,400
putting the things up at the right place

00:24:27,760 --> 00:24:31,039
so you just do http secure start http

00:24:30,400 --> 00:24:34,080
install

00:24:31,039 --> 00:24:37,520
certificate and it's done okay

00:24:34,080 --> 00:24:38,720
so much much better um and that's

00:24:37,520 --> 00:24:43,360
basically it

00:24:38,720 --> 00:24:46,799
yeah uh we have i have an example here

00:24:43,360 --> 00:24:49,520
i created blue request yesterday

00:24:46,799 --> 00:24:51,679
which uh which is uh which is enabling

00:24:49,520 --> 00:24:54,799
uh enabling this simple test

00:24:51,679 --> 00:24:56,400
here we see uh this is disappointed will

00:24:54,799 --> 00:24:59,520
get so there's some setup

00:24:56,400 --> 00:25:02,880
as i mentioned uh setting up

00:24:59,520 --> 00:25:05,600
starting certificates creating some uh

00:25:02,880 --> 00:25:06,000
test file and here we do the h1 check

00:25:05,600 --> 00:25:08,159
and it

00:25:06,000 --> 00:25:10,159
everything works including certificates

00:25:08,159 --> 00:25:13,679
and all that complex stuff

00:25:10,159 --> 00:25:17,440
and uh even there are some green results

00:25:13,679 --> 00:25:20,799
so scratch build and this be test shows

00:25:17,440 --> 00:25:24,000
that everything passed and the test

00:25:20,799 --> 00:25:27,039
actually okay very handy for walk

00:25:24,000 --> 00:25:30,960
so that would be about libraries

00:25:27,039 --> 00:25:32,880
uh we want to uh make it easy

00:25:30,960 --> 00:25:34,000
to users to come from from the old

00:25:32,880 --> 00:25:36,640
solutions like uh

00:25:34,000 --> 00:25:37,600
nitrate and have migrated metadata to

00:25:36,640 --> 00:25:40,960
git so we have the

00:25:37,600 --> 00:25:45,360
tmt test import tmt test export and

00:25:40,960 --> 00:25:49,120
and uh so so let's do some example here

00:25:45,360 --> 00:25:52,480
tmt uh examples convert we will do tmd

00:25:49,120 --> 00:25:56,720
test import and it would check out

00:25:52,480 --> 00:25:59,760
check the make file ah okay

00:25:56,720 --> 00:25:59,760
i didn't look in it

00:26:00,320 --> 00:26:09,840
okay so let's see so let's see

00:26:05,679 --> 00:26:13,120
okay so that would be for the nitrate

00:26:09,840 --> 00:26:15,520
okay so

00:26:13,120 --> 00:26:17,200
everything imported and here we see some

00:26:15,520 --> 00:26:20,400
new file

00:26:17,200 --> 00:26:21,279
main fmf it has all the stuff imported

00:26:20,400 --> 00:26:23,039
from from this

00:26:21,279 --> 00:26:24,880
there might be some things you want to

00:26:23,039 --> 00:26:26,080
you want to remove because this is this

00:26:24,880 --> 00:26:28,720
is just a test case

00:26:26,080 --> 00:26:29,679
but here you see like uh there's one

00:26:28,720 --> 00:26:32,159
test

00:26:29,679 --> 00:26:33,679
one test which which was imported from

00:26:32,159 --> 00:26:34,320
the nitrate and you can you can right

00:26:33,679 --> 00:26:38,559
away

00:26:34,320 --> 00:26:40,320
use it um quite fresh

00:26:38,559 --> 00:26:42,159
support we have for context adjust for

00:26:40,320 --> 00:26:44,559
those who know test case that i want see

00:26:42,159 --> 00:26:45,279
uh this is feature uh which can be used

00:26:44,559 --> 00:26:47,360
to filter

00:26:45,279 --> 00:26:48,320
relevant tests so if you share tests you

00:26:47,360 --> 00:26:50,000
have a

00:26:48,320 --> 00:26:52,000
set of tests which can be used across

00:26:50,000 --> 00:26:53,600
distros for some of them you know that

00:26:52,000 --> 00:26:56,640
the feature was added later

00:26:53,600 --> 00:26:57,440
you can adjust the metadata based on the

00:26:56,640 --> 00:26:59,279
context

00:26:57,440 --> 00:27:00,960
so here you say when the distro is less

00:26:59,279 --> 00:27:04,960
than federal 33

00:27:00,960 --> 00:27:08,400
we turn it off i have an example here

00:27:04,960 --> 00:27:11,360
and and test

00:27:08,400 --> 00:27:13,440
this kind of libraries because i i

00:27:11,360 --> 00:27:15,760
needed to disable the test

00:27:13,440 --> 00:27:16,880
because it runs just uh too long and it

00:27:15,760 --> 00:27:18,559
could not be running in the same

00:27:16,880 --> 00:27:19,200
pipeline because full virtualization

00:27:18,559 --> 00:27:22,080
needed

00:27:19,200 --> 00:27:23,520
stuff so i did something like that so

00:27:22,080 --> 00:27:26,640
the test is disabled

00:27:23,520 --> 00:27:29,760
unless context how how is uh set to

00:27:26,640 --> 00:27:31,600
set to full which which means that you

00:27:29,760 --> 00:27:33,200
you provide the context how is full and

00:27:31,600 --> 00:27:37,200
then then it would work

00:27:33,200 --> 00:27:40,399
so dmp test uh let's see

00:27:37,200 --> 00:27:43,840
filter enabled enabled in a

00:27:40,399 --> 00:27:46,640
dot is through uh it is

00:27:43,840 --> 00:27:47,120
let's see so let's uh you when you see

00:27:46,640 --> 00:27:49,440
the

00:27:47,120 --> 00:27:51,360
library it's it's here but we provide

00:27:49,440 --> 00:27:53,679
context how is full

00:27:51,360 --> 00:27:55,120
we run a full there's no no class

00:27:53,679 --> 00:27:58,799
disabled everything is enabled

00:27:55,120 --> 00:28:01,039
so that's how it works um

00:27:58,799 --> 00:28:02,240
that's what i've just shown now for

00:28:01,039 --> 00:28:05,360
debugging tests

00:28:02,240 --> 00:28:06,080
uh this is quite useful so if you the

00:28:05,360 --> 00:28:08,640
back test

00:28:06,080 --> 00:28:10,320
you don't want to for example do complex

00:28:08,640 --> 00:28:12,799
preparation many times

00:28:10,320 --> 00:28:14,000
so instead of repeating the provisioning

00:28:12,799 --> 00:28:17,840
and prepared part

00:28:14,000 --> 00:28:20,080
you run tmtr 2m tmt run until report

00:28:17,840 --> 00:28:21,279
and then you see the the result of the

00:28:20,080 --> 00:28:23,600
test and then you just

00:28:21,279 --> 00:28:24,720
re-execute the test again so this is

00:28:23,600 --> 00:28:27,039
this is how you can

00:28:24,720 --> 00:28:27,840
quite fast the bucket of the test we

00:28:27,039 --> 00:28:29,760
started to

00:28:27,840 --> 00:28:31,840
work on some aliases because these

00:28:29,760 --> 00:28:34,480
commands are just a little bit

00:28:31,840 --> 00:28:35,679
uh too long for now and we want to

00:28:34,480 --> 00:28:37,279
integrate them so

00:28:35,679 --> 00:28:39,039
here here are some examples of some

00:28:37,279 --> 00:28:41,679
common areas which uh which

00:28:39,039 --> 00:28:44,880
which you can use to to make use of this

00:28:41,679 --> 00:28:47,760
uh of this functionality um

00:28:44,880 --> 00:28:49,279
i want to also mention to uh the

00:28:47,760 --> 00:28:52,159
possibility to login

00:28:49,279 --> 00:28:53,200
so you can log in actually into into the

00:28:52,159 --> 00:28:58,399
machine so

00:28:53,200 --> 00:29:03,120
for example i can say tnt run

00:28:58,399 --> 00:29:05,840
the tmtram provision provision container

00:29:03,120 --> 00:29:06,880
login and finish so it would run the

00:29:05,840 --> 00:29:08,559
container

00:29:06,880 --> 00:29:11,600
i can do something in the interactive

00:29:08,559 --> 00:29:13,760
shell i leave it and finish will take uh

00:29:11,600 --> 00:29:15,520
it it will close the you know close and

00:29:13,760 --> 00:29:16,399
and here it does perform for all the

00:29:15,520 --> 00:29:19,279
plans so

00:29:16,399 --> 00:29:20,000
so i have to i have to stop it now uh

00:29:19,279 --> 00:29:23,760
you can

00:29:20,000 --> 00:29:25,360
log in in uh during selected steps so

00:29:23,760 --> 00:29:26,880
at the end of the preparation you can do

00:29:25,360 --> 00:29:29,120
some manual tasks

00:29:26,880 --> 00:29:30,159
or you can say please give me login if

00:29:29,120 --> 00:29:33,200
there is a failure

00:29:30,159 --> 00:29:34,080
of or error so that's possible and for

00:29:33,200 --> 00:29:37,360
the stories

00:29:34,080 --> 00:29:39,279
uh we close close this this overview of

00:29:37,360 --> 00:29:41,679
available objects tmt stories

00:29:39,279 --> 00:29:43,360
is used for tracking uh stories so the

00:29:41,679 --> 00:29:44,720
features requirements which need to be

00:29:43,360 --> 00:29:47,919
implemented

00:29:44,720 --> 00:29:51,120
uh tmt stories uh lists so we have

00:29:47,919 --> 00:29:52,399
uh we have a few of them uh we cover the

00:29:51,120 --> 00:29:54,960
specification

00:29:52,399 --> 00:29:57,840
as the stories so if uh if i was

00:29:54,960 --> 00:30:01,679
mentioned i mentioned for example

00:29:57,840 --> 00:30:04,159
corn um adjust adjusting the context

00:30:01,679 --> 00:30:05,520
so here's the story and you can show it

00:30:04,159 --> 00:30:08,480
the empty stories show

00:30:05,520 --> 00:30:09,360
gorgeous and here you see the the things

00:30:08,480 --> 00:30:11,360
which are

00:30:09,360 --> 00:30:13,279
relevant for it and we see it's also

00:30:11,360 --> 00:30:14,320
it's implemented here and it's tested

00:30:13,279 --> 00:30:16,640
here

00:30:14,320 --> 00:30:18,080
so that's about stories um

00:30:16,640 --> 00:30:21,679
[Music]

00:30:18,080 --> 00:30:24,799
yeah maybe one more example tmt story uh

00:30:21,679 --> 00:30:27,840
coverage coverage uh which show you

00:30:24,799 --> 00:30:28,559
uh how are you doing so here you see for

00:30:27,840 --> 00:30:31,679
example

00:30:28,559 --> 00:30:34,559
for the cio cli cli test

00:30:31,679 --> 00:30:34,880
area the coverage is like this for code

00:30:34,559 --> 00:30:36,559
and

00:30:34,880 --> 00:30:38,480
coverage by tests and coverage by

00:30:36,559 --> 00:30:41,840
documentation

00:30:38,480 --> 00:30:44,960
so okay so that would be

00:30:41,840 --> 00:30:46,399
the overview of what tmt can and i think

00:30:44,960 --> 00:30:49,919
the time is

00:30:46,399 --> 00:30:50,720
to very quickly say that we have this

00:30:49,919 --> 00:30:52,640
enabled in

00:30:50,720 --> 00:30:55,120
github so packages are built in copper

00:30:52,640 --> 00:30:55,840
by decade uh triggered by pull requests

00:30:55,120 --> 00:30:58,720
or comments

00:30:55,840 --> 00:31:01,120
and there's a full tmp support uh quite

00:30:58,720 --> 00:31:03,279
freshly and we are very glad for that

00:31:01,120 --> 00:31:04,640
uh it's supporting fluorescei so

00:31:03,279 --> 00:31:07,360
packages built

00:31:04,640 --> 00:31:09,519
are by the cr pipeline built in koji

00:31:07,360 --> 00:31:11,679
triggered by pull requests or builds

00:31:09,519 --> 00:31:13,120
and we have full full gmt support

00:31:11,679 --> 00:31:16,000
including context adjust

00:31:13,120 --> 00:31:19,360
quite fresh thanks to mikhail for

00:31:16,000 --> 00:31:21,519
cooperating on this and the lci internal

00:31:19,360 --> 00:31:24,399
it's also possible uh to use tmt for

00:31:21,519 --> 00:31:26,080
testing pull requests and builds

00:31:24,399 --> 00:31:27,440
i wanted to include a couple of uh

00:31:26,080 --> 00:31:30,960
real-life examples

00:31:27,440 --> 00:31:33,600
but i want to ask um if we want now

00:31:30,960 --> 00:31:34,720
to jump into some questions or shall i

00:31:33,600 --> 00:31:38,000
continue with the

00:31:34,720 --> 00:31:38,000
with the examples what do you say

00:31:44,840 --> 00:31:50,399
is yet so

00:31:48,559 --> 00:31:52,240
i i think we can continue but if there

00:31:50,399 --> 00:31:54,159
is any question from the chat

00:31:52,240 --> 00:31:57,440
i will try to answer it or i can just

00:31:54,159 --> 00:32:00,799
interrupt and we can answer it together

00:31:57,440 --> 00:32:01,679
all right good so uh so here are a

00:32:00,799 --> 00:32:04,960
couple of

00:32:01,679 --> 00:32:08,960
uh couple of examples so um

00:32:04,960 --> 00:32:12,080
the smoke test uh actually we did

00:32:08,960 --> 00:32:13,679
uh i tried yesterday and we tried

00:32:12,080 --> 00:32:16,240
today so let's see what happened with

00:32:13,679 --> 00:32:19,519
our enable basic small test pull request

00:32:16,240 --> 00:32:21,039
it's open and the disk test is running

00:32:19,519 --> 00:32:24,320
okay so we will see

00:32:21,039 --> 00:32:26,720
it might take some time uh so

00:32:24,320 --> 00:32:28,159
um the result from yesterday here you

00:32:26,720 --> 00:32:30,320
see a

00:32:28,159 --> 00:32:32,159
example of a minimal smoke test and the

00:32:30,320 --> 00:32:36,480
results and the fedoras here this

00:32:32,159 --> 00:32:39,679
test it looks like it looks like this

00:32:36,480 --> 00:32:43,120
script and it it should

00:32:39,679 --> 00:32:46,480
it should show uh what's the content uh

00:32:43,120 --> 00:32:47,919
we use the version or outcome under ios

00:32:46,480 --> 00:32:49,440
version there so so here you see the

00:32:47,919 --> 00:32:52,640
version

00:32:49,440 --> 00:32:55,600
uh the context adjust how it works uh

00:32:52,640 --> 00:32:56,159
it's a really live example of federal ci

00:32:55,600 --> 00:32:59,679
so

00:32:56,159 --> 00:33:00,640
i use this to request to disable a

00:32:59,679 --> 00:33:04,159
couple of tests

00:33:00,640 --> 00:33:06,880
do some other filtering and

00:33:04,159 --> 00:33:08,080
it it seems to be working because

00:33:06,880 --> 00:33:11,039
because only those

00:33:08,080 --> 00:33:12,720
a couple of tests were selected we have

00:33:11,039 --> 00:33:15,760
nice failure here

00:33:12,720 --> 00:33:19,440
but uh instead of running like

00:33:15,760 --> 00:33:23,200
the 50 or 60 tests we have it run only

00:33:19,440 --> 00:33:26,880
only the basic part uh github request

00:33:23,200 --> 00:33:30,399
uh just the fresh github from from

00:33:26,880 --> 00:33:33,679
yesterday i guess uh here the results

00:33:30,399 --> 00:33:36,159
are uh as usual in the in the

00:33:33,679 --> 00:33:38,000
in the bottom bottom section so packet

00:33:36,159 --> 00:33:39,200
testing apparel and thanks to mirror we

00:33:38,000 --> 00:33:42,080
have nice

00:33:39,200 --> 00:33:42,399
nice overview of x unit results here you

00:33:42,080 --> 00:33:44,320
can

00:33:42,399 --> 00:33:46,000
click on the contracted to to make it

00:33:44,320 --> 00:33:49,760
hidden

00:33:46,000 --> 00:33:52,000
to collapse uh the results and

00:33:49,760 --> 00:33:53,039
you can have a look uh if there's

00:33:52,000 --> 00:33:56,080
failure for some

00:33:53,039 --> 00:33:59,440
uh details for the for the test output

00:33:56,080 --> 00:34:01,039
uh so that would be for this fm example

00:33:59,440 --> 00:34:03,120
i just wanted to highlight that it's

00:34:01,039 --> 00:34:05,760
possible to reference uh

00:34:03,120 --> 00:34:06,480
tests from other repositories so for

00:34:05,760 --> 00:34:09,839
example

00:34:06,480 --> 00:34:12,560
uh here uh in the fmf plan i'm

00:34:09,839 --> 00:34:13,520
referencing tests from tmt to ensure

00:34:12,560 --> 00:34:16,399
that a change in

00:34:13,520 --> 00:34:16,960
fm does not does not break tmt so in

00:34:16,399 --> 00:34:19,760
this way

00:34:16,960 --> 00:34:21,440
you just include a new integration plan

00:34:19,760 --> 00:34:23,760
it references the

00:34:21,440 --> 00:34:24,480
git repository it might choose some ref

00:34:23,760 --> 00:34:27,119
and

00:34:24,480 --> 00:34:28,720
picks fixed uh pick some sort of tests

00:34:27,119 --> 00:34:30,720
and it runs there

00:34:28,720 --> 00:34:32,399
so in this way you can you can keep

00:34:30,720 --> 00:34:35,040
components which are related

00:34:32,399 --> 00:34:36,320
in a good shape still uh here's a real

00:34:35,040 --> 00:34:40,079
live example of uh

00:34:36,320 --> 00:34:42,560
lftp uh yeah yeah i was just

00:34:40,079 --> 00:34:44,639
doing fresh pull requests here guys are

00:34:42,560 --> 00:34:48,079
using a test namespace

00:34:44,639 --> 00:34:48,879
for their lftp tests so from the rpms

00:34:48,079 --> 00:34:52,159
name space

00:34:48,879 --> 00:34:52,960
uh they reference the the reference test

00:34:52,159 --> 00:34:55,520
here

00:34:52,960 --> 00:34:56,960
the advantage is that they can store the

00:34:55,520 --> 00:34:58,800
tests at one place and then reference

00:34:56,960 --> 00:35:01,920
them from federal from github from

00:34:58,800 --> 00:35:03,200
internally and and you you maintain only

00:35:01,920 --> 00:35:05,440
on one place

00:35:03,200 --> 00:35:06,880
another example of sure test is uh our

00:35:05,440 --> 00:35:09,920
tests for bash

00:35:06,880 --> 00:35:10,720
conch shell and other uh posix combined

00:35:09,920 --> 00:35:13,920
shells

00:35:10,720 --> 00:35:17,599
uh they uh they have this uh

00:35:13,920 --> 00:35:20,880
set of um set of plans

00:35:17,599 --> 00:35:23,599
in the test name space so it's possible

00:35:20,880 --> 00:35:25,760
so it's possible to test changes so if

00:35:23,599 --> 00:35:28,560
you do pull request

00:35:25,760 --> 00:35:29,599
for a test change you would receive

00:35:28,560 --> 00:35:33,280
results for

00:35:29,599 --> 00:35:35,200
for that changes so for example here uh

00:35:33,280 --> 00:35:37,599
we don't have the good naming of the of

00:35:35,200 --> 00:35:40,800
the tests but for all five tests

00:35:37,599 --> 00:35:42,000
those uh those for all five shells tests

00:35:40,800 --> 00:35:45,040
for around

00:35:42,000 --> 00:35:48,480
and it it gives these results

00:35:45,040 --> 00:35:50,640
um bind an example of open source

00:35:48,480 --> 00:35:51,920
by job open source test internal

00:35:50,640 --> 00:35:54,640
previously internal are

00:35:51,920 --> 00:35:55,680
open and we want to go in this direction

00:35:54,640 --> 00:35:58,800
uh more so

00:35:55,680 --> 00:36:01,599
example of success here

00:35:58,800 --> 00:36:01,920
and we also support full and transition

00:36:01,599 --> 00:36:05,040
so

00:36:01,920 --> 00:36:08,000
uh users are still uh able to schedule

00:36:05,040 --> 00:36:09,119
tests migrated to git uh using workflow

00:36:08,000 --> 00:36:12,720
tomorrow

00:36:09,119 --> 00:36:14,560
also during tests are using uh fmf uh

00:36:12,720 --> 00:36:16,720
in the ci pipeline to define how they

00:36:14,560 --> 00:36:18,079
would be how they would be around so rpm

00:36:16,720 --> 00:36:21,119
inspect for example

00:36:18,079 --> 00:36:23,280
there's the discover discover step and

00:36:21,119 --> 00:36:24,960
other provision description and all the

00:36:23,280 --> 00:36:27,599
stuff so that would be enough of

00:36:24,960 --> 00:36:30,320
examples

00:36:27,599 --> 00:36:30,320
let's uh

00:36:30,800 --> 00:36:33,680
are there any questions

00:36:34,480 --> 00:36:40,210
questions so if anyone has something

00:36:37,040 --> 00:36:43,239
just ask

00:36:40,210 --> 00:36:43,239
[Music]

00:36:43,520 --> 00:36:47,200
yeah sorry you have some question in the

00:36:45,280 --> 00:36:50,000
q a section

00:36:47,200 --> 00:36:51,839
yeah andre buddha is asking can i safely

00:36:50,000 --> 00:36:55,839
pass credentials to test cases when

00:36:51,839 --> 00:36:55,839
using dmt upstream in a github project

00:36:57,119 --> 00:37:01,599
credentials to test cases when using tv

00:36:59,599 --> 00:37:06,000
upstream

00:37:01,599 --> 00:37:09,440
so far we haven't

00:37:06,000 --> 00:37:12,079
resolved any such use case uh

00:37:09,440 --> 00:37:12,880
so i probably cannot provide here any

00:37:12,079 --> 00:37:15,839
other guys

00:37:12,880 --> 00:37:16,320
do you know any so far we haven't used

00:37:15,839 --> 00:37:18,160
uh

00:37:16,320 --> 00:37:20,160
credentials for storing yeah currently

00:37:18,160 --> 00:37:20,560
it's not possible and it's in discussion

00:37:20,160 --> 00:37:23,119
if

00:37:20,560 --> 00:37:24,880
in the future we should support it and

00:37:23,119 --> 00:37:27,040
how it will be done because

00:37:24,880 --> 00:37:29,119
like we talked with packet who is what

00:37:27,040 --> 00:37:30,560
is basically a github application

00:37:29,119 --> 00:37:32,000
where you need to have a github

00:37:30,560 --> 00:37:33,040
application or something where you store

00:37:32,000 --> 00:37:34,839
the secrets right

00:37:33,040 --> 00:37:36,160
and becky doesn't want to take the

00:37:34,839 --> 00:37:38,079
responsibility

00:37:36,160 --> 00:37:39,440
so we are thinking about putting this

00:37:38,079 --> 00:37:40,079
into the other service which runs the

00:37:39,440 --> 00:37:43,040
tests

00:37:40,079 --> 00:37:44,320
but definitely we didn't yet even plan

00:37:43,040 --> 00:37:46,160
on the feature

00:37:44,320 --> 00:37:48,000
so if you have these requirements i

00:37:46,160 --> 00:37:51,200
guess we will need an issue

00:37:48,000 --> 00:37:52,800
to be filled maybe in tmt and

00:37:51,200 --> 00:37:54,480
i i can take a look if there is already

00:37:52,800 --> 00:37:57,359
something but i think

00:37:54,480 --> 00:37:58,800
it's it's some it it won't be

00:37:57,359 --> 00:38:04,640
implemented very soon

00:37:58,800 --> 00:38:06,320
uh because the the number of users are

00:38:04,640 --> 00:38:08,000
can you share more details what are you

00:38:06,320 --> 00:38:10,640
looking for or do you want to

00:38:08,000 --> 00:38:12,880
what you want to credentials used for on

00:38:10,640 --> 00:38:14,720
trade

00:38:12,880 --> 00:38:16,160
okay so so i will i will continue it

00:38:14,720 --> 00:38:18,640
with like the outline of

00:38:16,160 --> 00:38:20,640
our close future what we see so for the

00:38:18,640 --> 00:38:22,160
next steps we would like to enable the

00:38:20,640 --> 00:38:23,760
the context to just feature in our

00:38:22,160 --> 00:38:25,680
pipelines we

00:38:23,760 --> 00:38:27,280
want to uh do some cleanup in the

00:38:25,680 --> 00:38:30,320
documentation and

00:38:27,280 --> 00:38:31,200
to extend the guide we started work on

00:38:30,320 --> 00:38:33,760
recently

00:38:31,200 --> 00:38:35,119
uh to add some new plugins like restroom

00:38:33,760 --> 00:38:37,440
executor

00:38:35,119 --> 00:38:39,359
improved debugging and usability like

00:38:37,440 --> 00:38:40,160
aliases i mentioned that that would be

00:38:39,359 --> 00:38:42,880
integrated

00:38:40,160 --> 00:38:44,720
uh directly in the tool maybe perhaps a

00:38:42,880 --> 00:38:46,560
wizard mode for those who are

00:38:44,720 --> 00:38:48,160
new coming and not want to like learn

00:38:46,560 --> 00:38:52,480
options but would offer some

00:38:48,160 --> 00:38:55,119
some possibilities and there's a lot of

00:38:52,480 --> 00:38:55,920
uh nice ideas shared in the in the tmt

00:38:55,119 --> 00:38:58,400
issues

00:38:55,920 --> 00:39:00,480
on github so there's a lot of stuff to

00:38:58,400 --> 00:39:02,000
do and a lot of bucks of course

00:39:00,480 --> 00:39:03,760
to be fixed so if you are interested to

00:39:02,000 --> 00:39:06,000
contribute you can

00:39:03,760 --> 00:39:07,920
pick a good first issue uh from from the

00:39:06,000 --> 00:39:10,400
list and start working on that

00:39:07,920 --> 00:39:11,440
or if you have an idea or some iran into

00:39:10,400 --> 00:39:14,000
back please please

00:39:11,440 --> 00:39:14,800
and submit it you can also join the tnt

00:39:14,000 --> 00:39:17,599
channel

00:39:14,800 --> 00:39:18,320
or the telegram room to to discuss the

00:39:17,599 --> 00:39:19,920
design

00:39:18,320 --> 00:39:22,160
there are links in the slides you can

00:39:19,920 --> 00:39:24,720
you can you can use them

00:39:22,160 --> 00:39:26,079
and here we have links to some of the

00:39:24,720 --> 00:39:29,040
documentation

00:39:26,079 --> 00:39:29,599
so the tmt dots uh at the read about

00:39:29,040 --> 00:39:32,720
side

00:39:29,599 --> 00:39:33,040
uh there's a tmt cheat sheet so to get

00:39:32,720 --> 00:39:35,839
an

00:39:33,040 --> 00:39:36,720
um brief overview of what's what's

00:39:35,839 --> 00:39:38,560
available

00:39:36,720 --> 00:39:40,560
you can use the cheat sheet it lists

00:39:38,560 --> 00:39:43,839
like it gives some overview of

00:39:40,560 --> 00:39:45,760
of the functions which are there uh

00:39:43,839 --> 00:39:47,280
and the guide i mentioned the guide so

00:39:45,760 --> 00:39:49,920
we started to write a guide

00:39:47,280 --> 00:39:52,160
which should help new users to uh to

00:39:49,920 --> 00:39:54,640
understand how to regulate the tool

00:39:52,160 --> 00:39:57,359
and we will be after this first uh

00:39:54,640 --> 00:39:59,440
section we will define providing more

00:39:57,359 --> 00:40:05,280
a link to federation documentation and

00:39:59,440 --> 00:40:05,280

YouTube URL: https://www.youtube.com/watch?v=HVo4iS1XOuo


