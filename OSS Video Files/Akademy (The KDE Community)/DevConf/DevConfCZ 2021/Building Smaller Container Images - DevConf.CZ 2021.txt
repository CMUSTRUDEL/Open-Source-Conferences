Title: Building Smaller Container Images - DevConf.CZ 2021
Publication date: 2021-03-15
Playlist: DevConfCZ 2021
Description: 
	Speakers: Scott McCarty, Adam Šamalík



Red Hat helped pioneer the concept of a Linux distribution, now we're working on how to get rid of it... OK, you're paying attention, right? Technically, we're trying to shift the problem of managing the distro to Red Hat so that you don't have to worry about it. Distroless container images can be tiny because they don't include package management tools like RPM and DNF, but still provide users needed software like glibc, openssl, and httpd. Cloud is just somebody else's computer, Serverless is just somebody else's server, and Distroless is just somebody else's Linux distro.

In this talk, we'll analyze the dependencies in container images using rpm-show, and explain how work is constantly being done to make container images smaller while still providing battle tested, pre-built software that is convenient to consume.



Schedule: https://sched.co/gmSS
Captions: 
	00:00:01,520 --> 00:00:05,920
so hey everyone my name is adam

00:00:03,520 --> 00:00:07,040
um i work in red hat as a senior

00:00:05,920 --> 00:00:09,840
software engineer

00:00:07,040 --> 00:00:10,960
um i work in fedora most of my time and

00:00:09,840 --> 00:00:14,000
on the build system

00:00:10,960 --> 00:00:17,600
and all sorts of things like that um

00:00:14,000 --> 00:00:18,160
scott yeah i am a product manager so i

00:00:17,600 --> 00:00:20,400
focus

00:00:18,160 --> 00:00:21,600
a lot on the why and like what we're

00:00:20,400 --> 00:00:23,600
trying to do

00:00:21,600 --> 00:00:25,199
um and i tried to keep my fingers out of

00:00:23,600 --> 00:00:27,439
the what and how

00:00:25,199 --> 00:00:28,800
or the how i should say but i end up

00:00:27,439 --> 00:00:29,519
doing it too much and so that's how i

00:00:28,800 --> 00:00:32,079
end up

00:00:29,519 --> 00:00:33,920
i end up with talks like this with adam

00:00:32,079 --> 00:00:35,360
um so we'll go through kind of the why

00:00:33,920 --> 00:00:36,960
the what and the how

00:00:35,360 --> 00:00:39,680
in this talk on like building smaller

00:00:36,960 --> 00:00:39,680
container images

00:00:39,760 --> 00:00:45,760
i think we can jump in so i

00:00:44,399 --> 00:00:47,840
we we're gonna go through a little

00:00:45,760 --> 00:00:49,840
section where we where we

00:00:47,840 --> 00:00:50,879
kind of like dive through like over the

00:00:49,840 --> 00:00:53,199
last like seven

00:00:50,879 --> 00:00:54,879
ish years you know i've been talking to

00:00:53,199 --> 00:00:56,239
users at conferences and

00:00:54,879 --> 00:00:57,440
customers and all kinds of views you

00:00:56,239 --> 00:00:58,239
know people that basically use

00:00:57,440 --> 00:00:59,680
containers

00:00:58,239 --> 00:01:01,520
and like the one of the one of the

00:00:59,680 --> 00:01:03,920
resounding sort of like

00:01:01,520 --> 00:01:05,040
themes is always like i want smaller

00:01:03,920 --> 00:01:07,520
images why are these

00:01:05,040 --> 00:01:08,640
images too large how do i make these

00:01:07,520 --> 00:01:11,119
images smaller

00:01:08,640 --> 00:01:12,400
and so obviously like over that time

00:01:11,119 --> 00:01:13,840
we've we've

00:01:12,400 --> 00:01:15,920
looked at all kinds of like ways that we

00:01:13,840 --> 00:01:17,200
can make them smaller but in the last

00:01:15,920 --> 00:01:19,040
like 18-ish months

00:01:17,200 --> 00:01:20,640
especially working with adam we've

00:01:19,040 --> 00:01:22,479
definitely finally i think we're on to

00:01:20,640 --> 00:01:23,680
some really really interesting like

00:01:22,479 --> 00:01:25,200
techniques and

00:01:23,680 --> 00:01:28,479
ways to make container images smaller

00:01:25,200 --> 00:01:30,400
while still retaining all of the uh

00:01:28,479 --> 00:01:32,159
all of the advantages of using a linux

00:01:30,400 --> 00:01:33,920
distro and so

00:01:32,159 --> 00:01:35,119
we this is where we get serious this is

00:01:33,920 --> 00:01:37,520
where we're going to dig into serious

00:01:35,119 --> 00:01:37,520
business

00:01:39,200 --> 00:01:42,240
so first um i'll walk through like some

00:01:41,759 --> 00:01:43,840
of the

00:01:42,240 --> 00:01:46,079
the things that i see people ask for

00:01:43,840 --> 00:01:47,840
like they always ask for smaller images

00:01:46,079 --> 00:01:50,560
but like what they really mean

00:01:47,840 --> 00:01:52,560
what they really think they mean is that

00:01:50,560 --> 00:01:54,799
they want a smaller attack surface

00:01:52,560 --> 00:01:56,560
um and by attack surface if you haven't

00:01:54,799 --> 00:01:59,200
heard that word what that means is

00:01:56,560 --> 00:02:00,479
is you know the lesson permutations of

00:01:59,200 --> 00:02:02,880
software that you have in your

00:02:00,479 --> 00:02:04,799
environment

00:02:02,880 --> 00:02:07,200
get to find a bug and get into your

00:02:04,799 --> 00:02:09,119
environment so so if you have like 22

00:02:07,200 --> 00:02:11,360
different versions of glibc

00:02:09,119 --> 00:02:13,440
and 100 different versions of open ssl

00:02:11,360 --> 00:02:14,480
and you know 50 different versions of

00:02:13,440 --> 00:02:16,879
nginx and

00:02:14,480 --> 00:02:18,400
200 different versions of apache that's

00:02:16,879 --> 00:02:20,239
much more likely that like

00:02:18,400 --> 00:02:22,239
one of those versions of those you know

00:02:20,239 --> 00:02:23,680
500 different pieces of software

00:02:22,239 --> 00:02:25,280
is gonna have a bug that will let

00:02:23,680 --> 00:02:25,599
somebody get in so like if you only have

00:02:25,280 --> 00:02:28,400
one

00:02:25,599 --> 00:02:30,239
open ssl and one uh apache and one

00:02:28,400 --> 00:02:32,080
engine x and one glibc

00:02:30,239 --> 00:02:33,440
it's much less likely and it's much

00:02:32,080 --> 00:02:36,160
easier to track

00:02:33,440 --> 00:02:37,440
the cves for you know for those for that

00:02:36,160 --> 00:02:39,519
software so like the attack

00:02:37,440 --> 00:02:40,879
concept of attack surface is that within

00:02:39,519 --> 00:02:42,160
an environment within a software

00:02:40,879 --> 00:02:43,680
environment that's controlled by a

00:02:42,160 --> 00:02:46,319
specific organization

00:02:43,680 --> 00:02:48,560
um you know the the minimum number of

00:02:46,319 --> 00:02:50,319
different permutations of visa software

00:02:48,560 --> 00:02:51,440
what that's what they actually want but

00:02:50,319 --> 00:02:52,560
they just say they want smaller

00:02:51,440 --> 00:02:54,400
container images

00:02:52,560 --> 00:02:56,319
um because they're thinking about attack

00:02:54,400 --> 00:02:58,080
surface within the context of a single

00:02:56,319 --> 00:02:59,519
application or a single container but

00:02:58,080 --> 00:03:00,959
that's not actually the way it works it

00:02:59,519 --> 00:03:01,920
actually applies to everything in the

00:03:00,959 --> 00:03:04,400
environment

00:03:01,920 --> 00:03:05,680
not just like a single container image

00:03:04,400 --> 00:03:07,120
so

00:03:05,680 --> 00:03:09,040
they say smaller container image but

00:03:07,120 --> 00:03:10,640
like i mentioned you a thousand

00:03:09,040 --> 00:03:12,239
different container images that are like

00:03:10,640 --> 00:03:13,680
five megabytes each is actually five

00:03:12,239 --> 00:03:15,360
gigabytes of attack surface

00:03:13,680 --> 00:03:17,440
where in that case it might have

00:03:15,360 --> 00:03:20,640
actually been better to have

00:03:17,440 --> 00:03:21,519
like um you know 200 containers you know

00:03:20,640 --> 00:03:23,040
that are that are

00:03:21,519 --> 00:03:25,040
that are much bigger that are like you

00:03:23,040 --> 00:03:26,400
know 15 megabytes each right or what

00:03:25,040 --> 00:03:28,319
whatever but like there's this

00:03:26,400 --> 00:03:30,560
balancing act of like less container

00:03:28,319 --> 00:03:31,120
images that could be slightly bigger

00:03:30,560 --> 00:03:32,959
versus

00:03:31,120 --> 00:03:34,239
a bunch of very small container images

00:03:32,959 --> 00:03:35,920
it's not quite as black and white as

00:03:34,239 --> 00:03:38,319
everybody thinks to get to the actual

00:03:35,920 --> 00:03:39,920
less attack service like smaller

00:03:38,319 --> 00:03:41,920
individual container images is part of

00:03:39,920 --> 00:03:43,280
the battle but not all of it

00:03:41,920 --> 00:03:44,879
um and then another thing i think that

00:03:43,280 --> 00:03:46,319
users want is they don't have to think

00:03:44,879 --> 00:03:48,319
about it right like they just want

00:03:46,319 --> 00:03:49,920
like like there's this concept now of

00:03:48,319 --> 00:03:51,280
like consumerism that just you know i

00:03:49,920 --> 00:03:51,840
just want to download this thing and use

00:03:51,280 --> 00:03:54,959
it

00:03:51,840 --> 00:03:55,360
um and then i think finally we jokingly

00:03:54,959 --> 00:03:56,720
said

00:03:55,360 --> 00:03:58,319
you know they want cool tweets they just

00:03:56,720 --> 00:03:59,920
want to like tweet out like some of my

00:03:58,319 --> 00:04:01,760
more popular tweets are like when i show

00:03:59,920 --> 00:04:04,400
some of adam's work or some of our work

00:04:01,760 --> 00:04:04,959
on on on what we call ubi micro or on on

00:04:04,400 --> 00:04:07,200
fedor

00:04:04,959 --> 00:04:08,640
and using this sort of technique um if i

00:04:07,200 --> 00:04:10,159
can produce really small images and

00:04:08,640 --> 00:04:12,840
tweet those out that's pretty cool so i

00:04:10,159 --> 00:04:14,080
think that's what users want in a

00:04:12,840 --> 00:04:17,600
nutshell

00:04:14,080 --> 00:04:19,519
um and so

00:04:17,600 --> 00:04:21,199
to try to solve those things like we

00:04:19,519 --> 00:04:22,720
looked at we've looked at like over the

00:04:21,199 --> 00:04:23,680
last couple years working together like

00:04:22,720 --> 00:04:24,720
we've looked at a bunch of different

00:04:23,680 --> 00:04:26,560
things like so

00:04:24,720 --> 00:04:27,759
my journey on looking at smaller images

00:04:26,560 --> 00:04:28,400
started probably seven years ago but

00:04:27,759 --> 00:04:30,160
like

00:04:28,400 --> 00:04:32,400
some of the many of these are dead ends

00:04:30,160 --> 00:04:34,560
by themselves in and of themselves um

00:04:32,400 --> 00:04:36,800
so we looked at scratch builds um we

00:04:34,560 --> 00:04:39,280
looked at minimizing the dependency

00:04:36,800 --> 00:04:40,720
tree within like fedora unreal we looked

00:04:39,280 --> 00:04:43,520
at distro lists which

00:04:40,720 --> 00:04:45,280
is is really like the concept of using

00:04:43,520 --> 00:04:46,880
binaries that somebody else provides to

00:04:45,280 --> 00:04:48,400
you in a container image although i'll

00:04:46,880 --> 00:04:51,040
dig into that a little bit deeper

00:04:48,400 --> 00:04:52,000
and then uh we looked at compiling from

00:04:51,040 --> 00:04:53,360
scratch

00:04:52,000 --> 00:04:54,960
um which is something that we've done in

00:04:53,360 --> 00:04:55,360
linux forever you know like apache you

00:04:54,960 --> 00:04:56,720
know

00:04:55,360 --> 00:04:58,240
compiling apache from scratch for

00:04:56,720 --> 00:04:59,360
example and then we also looked at the

00:04:58,240 --> 00:05:02,240
concept of again like

00:04:59,360 --> 00:05:04,479
less container which i'll dig in a

00:05:02,240 --> 00:05:08,560
little bit deeper

00:05:04,479 --> 00:05:11,199
so next slide adam if you don't mind

00:05:08,560 --> 00:05:12,560
so the first thing is scratch container

00:05:11,199 --> 00:05:14,400
image builds right like so we thought

00:05:12,560 --> 00:05:15,840
about the concept of like using yum

00:05:14,400 --> 00:05:17,520
to install into a scratch directory and

00:05:15,840 --> 00:05:18,800
then copy that into like

00:05:17,520 --> 00:05:21,360
you know into the container so like

00:05:18,800 --> 00:05:24,320
using like multi-stage builds along with

00:05:21,360 --> 00:05:25,840
um along with you know building building

00:05:24,320 --> 00:05:27,039
basically from scratch with like nothing

00:05:25,840 --> 00:05:28,880
in a in a directory

00:05:27,039 --> 00:05:30,320
to start the problem with this is you're

00:05:28,880 --> 00:05:31,600
basically competing against like the

00:05:30,320 --> 00:05:33,120
fedora contributors

00:05:31,600 --> 00:05:35,440
or the rel builders you know the rel

00:05:33,120 --> 00:05:37,520
package builders or or debian or

00:05:35,440 --> 00:05:39,360
whoever you know whatever linux distro

00:05:37,520 --> 00:05:40,080
um and they're pretty good at it like

00:05:39,360 --> 00:05:41,520
these are not

00:05:40,080 --> 00:05:43,039
dumb people like they're pretty smart

00:05:41,520 --> 00:05:44,000
and they're pretty good at it so like

00:05:43,039 --> 00:05:47,199
you're not

00:05:44,000 --> 00:05:48,560
what i found myself is is better than

00:05:47,199 --> 00:05:49,680
them and i went down and i started

00:05:48,560 --> 00:05:50,960
trying to build them from scratch and i

00:05:49,680 --> 00:05:52,560
realized oh these are like

00:05:50,960 --> 00:05:54,960
the exact same size as the ones that are

00:05:52,560 --> 00:05:56,319
coming out of fedoran and ubuntu and rel

00:05:54,960 --> 00:05:57,759
and blah blah blah so like i was like

00:05:56,319 --> 00:05:59,680
all right so this is not

00:05:57,759 --> 00:06:01,280
this is not a magic bullet in and of

00:05:59,680 --> 00:06:01,840
itself to do scratch builds right

00:06:01,280 --> 00:06:02,960
because

00:06:01,840 --> 00:06:04,960
because what happens is it's a

00:06:02,960 --> 00:06:06,720
dependency tree um you know there's a

00:06:04,960 --> 00:06:07,360
dependency tree and certain dependencies

00:06:06,720 --> 00:06:09,039
get pulled in

00:06:07,360 --> 00:06:11,600
and it is what it is and like those

00:06:09,039 --> 00:06:12,240
dependency tree dependencies get pulled

00:06:11,600 --> 00:06:13,520
in

00:06:12,240 --> 00:06:15,680
no matter whether it's somebody at

00:06:13,520 --> 00:06:17,680
fedora at the fedora project doing it or

00:06:15,680 --> 00:06:18,800
or a rel package manager or if it's me

00:06:17,680 --> 00:06:20,479
so like it ends up

00:06:18,800 --> 00:06:23,840
pretty much being washed by itself so

00:06:20,479 --> 00:06:27,120
this was kind of a dead end

00:06:23,840 --> 00:06:28,639
the the next thing we tried we i looked

00:06:27,120 --> 00:06:30,400
at immediately was like well how do i

00:06:28,639 --> 00:06:32,319
minimize these dependencies

00:06:30,400 --> 00:06:33,520
so in this graphic this is a graphic

00:06:32,319 --> 00:06:34,400
that actually one of adam's tools

00:06:33,520 --> 00:06:36,560
produces

00:06:34,400 --> 00:06:37,440
um and and it's pretty cool because it

00:06:36,560 --> 00:06:38,800
will kind of give you

00:06:37,440 --> 00:06:40,240
leads like like if you're an

00:06:38,800 --> 00:06:41,039
investigator trying to figure out like

00:06:40,240 --> 00:06:42,479
how do i

00:06:41,039 --> 00:06:44,560
figure out what's getting pulled in

00:06:42,479 --> 00:06:45,520
that's so big that's making this image

00:06:44,560 --> 00:06:47,280
get bigger right

00:06:45,520 --> 00:06:48,720
and so it's really nice but then what i

00:06:47,280 --> 00:06:50,479
realized is like oh i want to

00:06:48,720 --> 00:06:52,639
i want to change the dependency tree

00:06:50,479 --> 00:06:53,520
here that actually gets really hard like

00:06:52,639 --> 00:06:55,360
you have to be

00:06:53,520 --> 00:06:56,960
like like i got the bright idea one day

00:06:55,360 --> 00:06:57,759
to try to look at the apache spec file

00:06:56,960 --> 00:06:59,360
in fedora

00:06:57,759 --> 00:07:00,800
and i was like i'll just fix this i was

00:06:59,360 --> 00:07:01,599
assist admin forever i've done enough

00:07:00,800 --> 00:07:03,919
spec files

00:07:01,599 --> 00:07:05,360
and i realized oh my god the apache spec

00:07:03,919 --> 00:07:06,400
file is one of the most sophisticated

00:07:05,360 --> 00:07:08,319
spec files

00:07:06,400 --> 00:07:09,919
i've ever seen and then trying to

00:07:08,319 --> 00:07:11,360
minimize like turn certain dependencies

00:07:09,919 --> 00:07:12,319
to weak dependencies and do all that

00:07:11,360 --> 00:07:15,199
myself

00:07:12,319 --> 00:07:16,800
i quickly realized was like a lot of sme

00:07:15,199 --> 00:07:17,840
knowledge like a lot of subject matter

00:07:16,800 --> 00:07:19,599
expertise

00:07:17,840 --> 00:07:21,520
um that i didn't even know i didn't have

00:07:19,599 --> 00:07:22,639
like like when i compiled apache from

00:07:21,520 --> 00:07:24,000
scratch i just pulled in whatever

00:07:22,639 --> 00:07:24,560
dependencies and it just worked and i

00:07:24,000 --> 00:07:26,479
did

00:07:24,560 --> 00:07:28,479
but i realized i didn't have an actual

00:07:26,479 --> 00:07:30,240
strong grasp on the actual dependency

00:07:28,479 --> 00:07:31,759
tree like it's a very different

00:07:30,240 --> 00:07:33,280
level of knowledge about a certain

00:07:31,759 --> 00:07:35,039
package um and it's even different than

00:07:33,280 --> 00:07:37,039
what maybe the developers of apache

00:07:35,039 --> 00:07:38,880
or the users of apache actually know so

00:07:37,039 --> 00:07:40,000
like the packaging skill set is

00:07:38,880 --> 00:07:41,680
definitely its own thing

00:07:40,000 --> 00:07:44,720
so this again kind of ended up being a

00:07:41,680 --> 00:07:46,800
dead end for me by itself

00:07:44,720 --> 00:07:48,479
um finally i looked at dystrolis and uh

00:07:46,800 --> 00:07:50,879
i i figured it was easier for me to let

00:07:48,479 --> 00:07:53,360
cletus hikes aka tanner guy

00:07:50,879 --> 00:07:54,879
uh of world renowned fame with a very

00:07:53,360 --> 00:07:56,639
very popular tweet

00:07:54,879 --> 00:07:58,400
uh where he explains what distrolus is

00:07:56,639 --> 00:08:00,000
you know there's no such thing as just

00:07:58,400 --> 00:08:02,960
just another dependency

00:08:00,000 --> 00:08:04,960
that you manage and so you know jokingly

00:08:02,960 --> 00:08:07,919
i mean this is obviously a joke but uh

00:08:04,960 --> 00:08:09,919
um but but in a nutshell like if you

00:08:07,919 --> 00:08:11,680
look at like this the distrelisk

00:08:09,919 --> 00:08:12,879
uh like there's one there's a i forget

00:08:11,680 --> 00:08:13,360
exactly what the community name is but i

00:08:12,879 --> 00:08:15,120
think it's

00:08:13,360 --> 00:08:16,800
something distroless on github it's a

00:08:15,120 --> 00:08:19,039
google project um

00:08:16,800 --> 00:08:20,000
if you look at that like how some of the

00:08:19,039 --> 00:08:21,280
some of the

00:08:20,000 --> 00:08:22,960
software that you're trying to download

00:08:21,280 --> 00:08:24,240
is compiled from scratch and it's like

00:08:22,960 --> 00:08:26,000
its own thing it's you're

00:08:24,240 --> 00:08:27,680
expecting that community to manage those

00:08:26,000 --> 00:08:29,520
binaries for you and all the libraries

00:08:27,680 --> 00:08:31,280
that those binaries are compiled against

00:08:29,520 --> 00:08:33,440
and then others are actually just using

00:08:31,280 --> 00:08:34,719
debian packages so like what i quickly

00:08:33,440 --> 00:08:36,479
realized was like

00:08:34,719 --> 00:08:38,159
there's no such thing as distroless like

00:08:36,479 --> 00:08:39,680
you either manage the dependency or some

00:08:38,159 --> 00:08:41,279
other team manages the dependency but

00:08:39,680 --> 00:08:42,560
somebody's managing the dependency

00:08:41,279 --> 00:08:44,720
and you're either managing it from

00:08:42,560 --> 00:08:47,519
scratch or you're managing it as part of

00:08:44,720 --> 00:08:49,440
a set of escrowed binaries and by escrow

00:08:47,519 --> 00:08:51,120
binaries i mean like binaries that some

00:08:49,440 --> 00:08:51,680
other team builds and saves somewhere

00:08:51,120 --> 00:08:54,240
right

00:08:51,680 --> 00:08:56,000
like um you know that's that's basically

00:08:54,240 --> 00:08:57,360
the con and i quickly realized that is a

00:08:56,000 --> 00:08:58,240
linux distro like you can call it

00:08:57,360 --> 00:08:59,760
distro-less

00:08:58,240 --> 00:09:01,440
but it's still a linux distro like

00:08:59,760 --> 00:09:03,360
you're you're essentially offloading

00:09:01,440 --> 00:09:05,120
that subject matter expertise

00:09:03,360 --> 00:09:06,480
to another group of people to go do that

00:09:05,120 --> 00:09:08,399
for you and

00:09:06,480 --> 00:09:10,720
i found some challenges with that in

00:09:08,399 --> 00:09:12,320
that like a distroless group

00:09:10,720 --> 00:09:13,920
you know is not necessarily have the

00:09:12,320 --> 00:09:16,000
same track record as like

00:09:13,920 --> 00:09:18,160
fedora like fedora has been managing

00:09:16,000 --> 00:09:20,320
dependencies for 15 years you know 15

00:09:18,160 --> 00:09:22,000
20 years so you know that they that

00:09:20,320 --> 00:09:24,160
there's like organizational knowledge

00:09:22,000 --> 00:09:25,600
of how to manage an escrow binaries and

00:09:24,160 --> 00:09:27,120
that's what they do for a linux district

00:09:25,600 --> 00:09:28,720
that runs on bare metal so like

00:09:27,120 --> 00:09:30,160
it's not really that different for

00:09:28,720 --> 00:09:33,360
inside of a container image so

00:09:30,160 --> 00:09:36,880
again dystrolis by itself it feels like

00:09:33,360 --> 00:09:39,279
a red herring

00:09:36,880 --> 00:09:40,720
so finally as i mentioned you can you

00:09:39,279 --> 00:09:41,440
can have somebody escrow those binaries

00:09:40,720 --> 00:09:43,279
from scrap

00:09:41,440 --> 00:09:45,120
you know for you or you can build them

00:09:43,279 --> 00:09:46,720
yourselves and escrow them yourselves

00:09:45,120 --> 00:09:48,959
um now you you have the option you could

00:09:46,720 --> 00:09:50,720
compile from scratch every time you do a

00:09:48,959 --> 00:09:52,800
container image build but that would be

00:09:50,720 --> 00:09:54,480
terrible because that would take forever

00:09:52,800 --> 00:09:55,920
or you know and you could cache them on

00:09:54,480 --> 00:09:57,600
your build servers or

00:09:55,920 --> 00:09:59,440
again you could escrow them on some

00:09:57,600 --> 00:10:01,680
server somewhere and now you just became

00:09:59,440 --> 00:10:04,480
a lim

00:10:01,680 --> 00:10:06,000
and not super fun like this quickly this

00:10:04,480 --> 00:10:08,320
was probably the quickest dead end

00:10:06,000 --> 00:10:09,360
um where i'm like uh i don't really want

00:10:08,320 --> 00:10:10,560
to do this because now i

00:10:09,360 --> 00:10:12,480
now i'm in the business of building

00:10:10,560 --> 00:10:14,160
extra and in the business of building

00:10:12,480 --> 00:10:15,920
container images from scratch and now

00:10:14,160 --> 00:10:17,200
i'm two steps away from what i actually

00:10:15,920 --> 00:10:18,079
want to achieve which is just have a

00:10:17,200 --> 00:10:20,079
small image

00:10:18,079 --> 00:10:22,000
i just want a podman poll or a

00:10:20,079 --> 00:10:23,360
kubernetes you know yaml file that pulls

00:10:22,000 --> 00:10:25,120
an image i don't wanna

00:10:23,360 --> 00:10:26,959
i don't want to have to like do all this

00:10:25,120 --> 00:10:30,560
work myself

00:10:26,959 --> 00:10:32,640
so this is where

00:10:30,560 --> 00:10:34,320
like like like the final one we looked

00:10:32,640 --> 00:10:37,040
at was like well what a

00:10:34,320 --> 00:10:38,560
learning environment right like like

00:10:37,040 --> 00:10:40,959
config management world we

00:10:38,560 --> 00:10:42,800
we very easily understood that like

00:10:40,959 --> 00:10:44,480
having one linux distro to manage was

00:10:42,800 --> 00:10:45,279
much easier than 22 different linux

00:10:44,480 --> 00:10:46,880
distros because

00:10:45,279 --> 00:10:48,160
there's always these small differences

00:10:46,880 --> 00:10:49,040
between them and even though the config

00:10:48,160 --> 00:10:51,760
management tool

00:10:49,040 --> 00:10:53,120
helps you it's still easier to minimize

00:10:51,760 --> 00:10:54,720
the number of linux restarts

00:10:53,120 --> 00:10:56,079
for some reason once we move to

00:10:54,720 --> 00:10:58,000
containers we dump everything in a

00:10:56,079 --> 00:10:59,360
tarball and we're just like wee

00:10:58,000 --> 00:11:01,200
we like we don't care what's in there

00:10:59,360 --> 00:11:01,760
and we're like it's fine but then you

00:11:01,200 --> 00:11:03,920
realize

00:11:01,760 --> 00:11:05,279
but from a pure attack uh you know

00:11:03,920 --> 00:11:07,680
surface perspective like

00:11:05,279 --> 00:11:08,880
i just gave a very general example here

00:11:07,680 --> 00:11:10,800
i just picked random

00:11:08,880 --> 00:11:11,920
you know or relatively recent versions

00:11:10,800 --> 00:11:14,720
of fedora ubuntu

00:11:11,920 --> 00:11:16,079
alpine and ubi and i i added up the

00:11:14,720 --> 00:11:16,959
different version you know you'd end up

00:11:16,079 --> 00:11:18,959
with 11

00:11:16,959 --> 00:11:20,320
different versions of open ssl three

00:11:18,959 --> 00:11:21,920
different versions of muscle

00:11:20,320 --> 00:11:23,360
c library and eight different versions

00:11:21,920 --> 00:11:25,760
of glibc so you basically have

00:11:23,360 --> 00:11:26,880
11 different c libraries and 11

00:11:25,760 --> 00:11:28,880
different open ssls

00:11:26,880 --> 00:11:30,720
and you go what what value do i get from

00:11:28,880 --> 00:11:31,440
that right like that's actually way way

00:11:30,720 --> 00:11:33,040
way more than a

00:11:31,440 --> 00:11:35,040
attack surface that if i just

00:11:33,040 --> 00:11:37,040
standardize on like one in this example

00:11:35,040 --> 00:11:38,560
i just use ubi8 but this works with

00:11:37,040 --> 00:11:40,399
with any linux distro if you just

00:11:38,560 --> 00:11:42,320
standardize one version of one linux

00:11:40,399 --> 00:11:44,160
distro you end up with a lot less

00:11:42,320 --> 00:11:45,360
uh you know a lot less attack service

00:11:44,160 --> 00:11:47,440
because you end up with one glibc

00:11:45,360 --> 00:11:48,720
one c library one open sl library and i

00:11:47,440 --> 00:11:50,560
use those because those are two

00:11:48,720 --> 00:11:51,279
really key important libraries to think

00:11:50,560 --> 00:11:52,320
about when you're thinking about

00:11:51,279 --> 00:11:54,839
containers

00:11:52,320 --> 00:11:56,720
um and so finally when we pull all this

00:11:54,839 --> 00:11:58,959
together

00:11:56,720 --> 00:11:59,760
um we've we looked at this and we

00:11:58,959 --> 00:12:01,279
realized like

00:11:59,760 --> 00:12:02,560
none of these by themselves is

00:12:01,279 --> 00:12:03,600
completely a magic bullet but when you

00:12:02,560 --> 00:12:05,040
pull it all together

00:12:03,600 --> 00:12:06,800
there is something magical and so like a

00:12:05,040 --> 00:12:08,399
lot of adam's work is going to cover

00:12:06,800 --> 00:12:10,079
basically like using a high quality

00:12:08,399 --> 00:12:12,800
dependency tree like i still

00:12:10,079 --> 00:12:14,560
think uh the linux distro still matters

00:12:12,800 --> 00:12:16,480
so like i i did a talk at fosdem last

00:12:14,560 --> 00:12:17,760
year like the linux distro still matters

00:12:16,480 --> 00:12:19,839
because they're really good at managing

00:12:17,760 --> 00:12:20,560
dependencies and escrowing binaries so

00:12:19,839 --> 00:12:22,480
like that's

00:12:20,560 --> 00:12:24,160
seems dumb not to use that um the

00:12:22,480 --> 00:12:24,560
existing tooling the tooling that they

00:12:24,160 --> 00:12:26,079
build

00:12:24,560 --> 00:12:28,000
also still works really well and they're

00:12:26,079 --> 00:12:29,120
really good at managing dependency trees

00:12:28,000 --> 00:12:31,920
and pulling that

00:12:29,120 --> 00:12:33,120
um uh now minimizing the dependencies

00:12:31,920 --> 00:12:34,240
this is actually a place where adam's

00:12:33,120 --> 00:12:35,600
gonna go a lot deeper

00:12:34,240 --> 00:12:37,279
because he's done a lot of work and

00:12:35,600 --> 00:12:38,560
people don't quite realize how hard this

00:12:37,279 --> 00:12:40,639
work is because there is

00:12:38,560 --> 00:12:42,399
actually no single expert within a linux

00:12:40,639 --> 00:12:43,440
distro that knows how to minimize it

00:12:42,399 --> 00:12:44,800
it's actually

00:12:43,440 --> 00:12:46,160
it's actually you know hundreds and

00:12:44,800 --> 00:12:47,600
thousands of people working together

00:12:46,160 --> 00:12:49,680
each building their packages

00:12:47,600 --> 00:12:51,279
and so like it really has to be a

00:12:49,680 --> 00:12:52,240
collaborative team effort to like do

00:12:51,279 --> 00:12:53,920
this and so

00:12:52,240 --> 00:12:55,440
so like adam will dig deeper into that

00:12:53,920 --> 00:12:56,480
it took a lot of work to get us on the

00:12:55,440 --> 00:12:58,480
right track there

00:12:56,480 --> 00:12:59,760
um again choosing a single linux

00:12:58,480 --> 00:13:01,120
distribution obviously we're doing this

00:12:59,760 --> 00:13:02,800
within fedora and rel

00:13:01,120 --> 00:13:04,720
ecosystem because it's what it's where

00:13:02,800 --> 00:13:06,079
we work but like any single linux

00:13:04,720 --> 00:13:07,519
distribution could do this but

00:13:06,079 --> 00:13:09,279
but we're going to talk about ours in

00:13:07,519 --> 00:13:10,959
particular um and then

00:13:09,279 --> 00:13:13,040
finally after you have all of that the

00:13:10,959 --> 00:13:14,399
output the effect of it is like that you

00:13:13,040 --> 00:13:16,000
will have smaller images

00:13:14,399 --> 00:13:17,760
and then those smaller images will share

00:13:16,000 --> 00:13:19,360
the exact same libraries with all the

00:13:17,760 --> 00:13:20,720
other small images in your environment

00:13:19,360 --> 00:13:23,440
and now you've truly achieved what you

00:13:20,720 --> 00:13:24,800
want you want a smaller attack surface

00:13:23,440 --> 00:13:26,560
so i'm going to hand it over to adam to

00:13:24,800 --> 00:13:28,399
dig deeper into a lot of

00:13:26,560 --> 00:13:29,600
what he's done over the last 18 months

00:13:28,399 --> 00:13:31,360
all right cool um

00:13:29,600 --> 00:13:32,639
so yeah let's talk about building small

00:13:31,360 --> 00:13:34,160
imagery

00:13:32,639 --> 00:13:36,079
showing some examples how you can do

00:13:34,160 --> 00:13:36,720
that because i expect because you're

00:13:36,079 --> 00:13:38,480
here you

00:13:36,720 --> 00:13:40,959
i expect you want to build stuff

00:13:38,480 --> 00:13:42,399
yourself so i want to demonstrate a few

00:13:40,959 --> 00:13:43,839
things how you can actually do that with

00:13:42,399 --> 00:13:48,079
a linux distro

00:13:43,839 --> 00:13:50,320
um so i'll be using fedora as an example

00:13:48,079 --> 00:13:52,480
because that's where innovation happens

00:13:50,320 --> 00:13:54,880
but like everything i show will work in

00:13:52,480 --> 00:13:59,120
basically any rpm distro that uses

00:13:54,880 --> 00:14:02,079
that uses dnf which is a package manager

00:13:59,120 --> 00:14:02,560
i'll be using the concept of multi-stage

00:14:02,079 --> 00:14:04,560
build

00:14:02,560 --> 00:14:06,160
multi-stage container builds and the

00:14:04,560 --> 00:14:08,399
main idea is basically

00:14:06,160 --> 00:14:10,079
like when you buy a car right you only

00:14:08,399 --> 00:14:12,000
get the car and they won't ship you the

00:14:10,079 --> 00:14:14,880
assembly line with it that would be

00:14:12,000 --> 00:14:16,800
that would be horrible um so if i think

00:14:14,880 --> 00:14:18,399
about this concept and package managers

00:14:16,800 --> 00:14:21,680
i can do the same thing right

00:14:18,399 --> 00:14:23,760
um the package manager to build the

00:14:21,680 --> 00:14:24,959
container image but i don't want to ship

00:14:23,760 --> 00:14:28,639
it because that's

00:14:24,959 --> 00:14:30,959
that's no use in the end

00:14:28,639 --> 00:14:33,360
and fedoras package manager is dnf and

00:14:30,959 --> 00:14:36,800
has a few features that can help us

00:14:33,360 --> 00:14:38,560
actually achieve this um you can install

00:14:36,800 --> 00:14:40,959
into an empty directory so you don't

00:14:38,560 --> 00:14:44,240
have to install into your system but

00:14:40,959 --> 00:14:47,360
actually somewhere else um you can

00:14:44,240 --> 00:14:48,720
disable weak dependencies so in the rpm

00:14:47,360 --> 00:14:50,320
worlds there's

00:14:48,720 --> 00:14:52,240
many dependencies some of them are

00:14:50,320 --> 00:14:53,040
higher some of them are weak and weak

00:14:52,240 --> 00:14:54,720
means that they're

00:14:53,040 --> 00:14:57,040
kind of optional right so you can

00:14:54,720 --> 00:14:58,800
disable all of the optionals and then

00:14:57,040 --> 00:15:00,959
intentionally pick what you actually

00:14:58,800 --> 00:15:02,560
need that reduces the size

00:15:00,959 --> 00:15:04,160
um and you can disable documentation

00:15:02,560 --> 00:15:05,760
packages because you don't need those in

00:15:04,160 --> 00:15:08,959
containers

00:15:05,760 --> 00:15:11,120
those need to be very small um

00:15:08,959 --> 00:15:13,199
combining that with some knowledge about

00:15:11,120 --> 00:15:17,040
the actual ecosystem

00:15:13,199 --> 00:15:20,160
for example we have alternatives

00:15:17,040 --> 00:15:22,160
because it's a huge group of packages

00:15:20,160 --> 00:15:24,639
and there's just a few of them that just

00:15:22,160 --> 00:15:26,880
might provide the same functionality

00:15:24,639 --> 00:15:28,000
and there might be a huge difference in

00:15:26,880 --> 00:15:30,240
terms of size

00:15:28,000 --> 00:15:32,399
or other things um there are two in

00:15:30,240 --> 00:15:34,240
particular i'll be using as an example

00:15:32,399 --> 00:15:35,680
and these are juliefc minimal language

00:15:34,240 --> 00:15:38,959
and corridor single

00:15:35,680 --> 00:15:41,199
i'll show them in a bit so

00:15:38,959 --> 00:15:42,720
let's try to build a docker file i'm i'm

00:15:41,199 --> 00:15:44,800
using a docker file because that's

00:15:42,720 --> 00:15:45,839
very widely known format how to build

00:15:44,800 --> 00:15:48,079
the containers

00:15:45,839 --> 00:15:50,240
this will work in any other format that

00:15:48,079 --> 00:15:52,639
you're using with port mine with builder

00:15:50,240 --> 00:15:54,399
i'm using this because most people know

00:15:52,639 --> 00:15:56,880
it but the concept is the same

00:15:54,399 --> 00:15:56,880
everywhere

00:15:56,959 --> 00:16:00,880
so let's try an example nginx you

00:15:59,920 --> 00:16:03,279
probably don't

00:16:00,880 --> 00:16:05,279
need to build nginx container yourself

00:16:03,279 --> 00:16:06,800
like you can get them from red hat or

00:16:05,279 --> 00:16:08,639
fedora but

00:16:06,800 --> 00:16:10,079
this is an example of how you can build

00:16:08,639 --> 00:16:11,680
an nginx right

00:16:10,079 --> 00:16:14,160
you might think that this is the best

00:16:11,680 --> 00:16:16,720
way you just do from fedora 33

00:16:14,160 --> 00:16:19,440
run the package manager install nginx

00:16:16,720 --> 00:16:22,480
and you end up with 224 megs

00:16:19,440 --> 00:16:25,519
image which is not amazing so how we can

00:16:22,480 --> 00:16:27,360
make it slightly smaller so i'll try

00:16:25,519 --> 00:16:28,880
using the scratch build as scott said

00:16:27,360 --> 00:16:31,519
right so

00:16:28,880 --> 00:16:33,519
oh this is the multi-stage build in the

00:16:31,519 --> 00:16:35,440
container so i'll say hey

00:16:33,519 --> 00:16:37,920
i'll build i'll install everything into

00:16:35,440 --> 00:16:39,519
a directory and then build a new image

00:16:37,920 --> 00:16:41,199
just from that directory so there's no

00:16:39,519 --> 00:16:43,759
package manager in the end

00:16:41,199 --> 00:16:46,399
but something really weird happened it

00:16:43,759 --> 00:16:51,279
just grew to 450 megs

00:16:46,399 --> 00:16:53,519
why this is really weird right so

00:16:51,279 --> 00:16:55,120
what if i apply some other knowledge

00:16:53,519 --> 00:16:57,279
that i shared um

00:16:55,120 --> 00:16:58,880
i can disable weak dependencies i can

00:16:57,279 --> 00:17:01,360
disable documentation

00:16:58,880 --> 00:17:02,639
but what makes the biggest difference is

00:17:01,360 --> 00:17:04,000
actually choosing some of the

00:17:02,639 --> 00:17:06,000
alternative packages

00:17:04,000 --> 00:17:08,079
in the dependency tree and these are

00:17:06,000 --> 00:17:08,799
glipc minimal and pack and coil till

00:17:08,079 --> 00:17:11,760
single

00:17:08,799 --> 00:17:13,520
these are just smaller versions of of

00:17:11,760 --> 00:17:15,839
those packages and it suddenly dropped

00:17:13,520 --> 00:17:19,520
216 meg

00:17:15,839 --> 00:17:23,120
so these these are the two side by side

00:17:19,520 --> 00:17:25,520
and you can see how with a few tricks

00:17:23,120 --> 00:17:27,679
you can actually build an image that's

00:17:25,520 --> 00:17:29,919
reasonably small

00:17:27,679 --> 00:17:31,679
with still using the linux distro so

00:17:29,919 --> 00:17:34,240
this is using packages

00:17:31,679 --> 00:17:35,440
that are maintained by hundreds of

00:17:34,240 --> 00:17:37,679
experts

00:17:35,440 --> 00:17:38,960
um it's always complete right you can

00:17:37,679 --> 00:17:40,960
always install it um

00:17:38,960 --> 00:17:42,640
it works it's maintained if there's an

00:17:40,960 --> 00:17:43,280
issue you can open a bug that'll fix it

00:17:42,640 --> 00:17:45,840
for you

00:17:43,280 --> 00:17:46,559
this is what this show does and if you

00:17:45,840 --> 00:17:48,320
need an update

00:17:46,559 --> 00:17:50,320
you just rebuild the image as you would

00:17:48,320 --> 00:17:52,880
normally do of course

00:17:50,320 --> 00:17:55,120
um you want your images to be immutable

00:17:52,880 --> 00:17:57,520
so that's how you get updates in

00:17:55,120 --> 00:17:58,559
and that's how you can do much much

00:17:57,520 --> 00:18:02,400
smaller results

00:17:58,559 --> 00:18:04,559
i have a few other examples you can do

00:18:02,400 --> 00:18:06,400
i call the distro as this is probably a

00:18:04,559 --> 00:18:09,039
bad name but you can build a small base

00:18:06,400 --> 00:18:11,280
which only has a glibc and bash in it

00:18:09,039 --> 00:18:12,559
and that's 38 makes and this is how you

00:18:11,280 --> 00:18:13,919
how you get there and

00:18:12,559 --> 00:18:15,600
you can use it as like a general

00:18:13,919 --> 00:18:18,960
environment or just put some

00:18:15,600 --> 00:18:21,919
golang or rust binary in there to run it

00:18:18,960 --> 00:18:23,200
um there's no package manager in there

00:18:21,919 --> 00:18:26,960
and if you want to get

00:18:23,200 --> 00:18:30,640
even smaller you can build a 1.8 meg

00:18:26,960 --> 00:18:32,480
um digital s in quotes busy box based

00:18:30,640 --> 00:18:34,799
that's just 1.8 megs

00:18:32,480 --> 00:18:36,960
again from fedora from an rpm but

00:18:34,799 --> 00:18:39,520
there's no package manager in the

00:18:36,960 --> 00:18:41,679
in the result so you can just copy this

00:18:39,520 --> 00:18:44,160
out from the slide we'll show them later

00:18:41,679 --> 00:18:45,039
and you can build yourself a tiny image

00:18:44,160 --> 00:18:47,200
um

00:18:45,039 --> 00:18:49,280
so these were just a few examples how

00:18:47,200 --> 00:18:51,679
you can actually use distributions to

00:18:49,280 --> 00:18:53,919
build a small image but

00:18:51,679 --> 00:18:56,480
don't include the package manager and

00:18:53,919 --> 00:18:59,200
this is possible by

00:18:56,480 --> 00:18:59,760
actually minimizing the dependency tree

00:18:59,200 --> 00:19:02,960
right

00:18:59,760 --> 00:19:04,799
that's why we're able to build a few

00:19:02,960 --> 00:19:06,559
that's why we're able to build smaller

00:19:04,799 --> 00:19:09,679
images and i want to

00:19:06,559 --> 00:19:10,000
share a few facts about that um so scott

00:19:09,679 --> 00:19:11,760
mentioned

00:19:10,000 --> 00:19:14,080
this right dependencies are complex and

00:19:11,760 --> 00:19:16,080
this is the fedora repo

00:19:14,080 --> 00:19:18,559
and it's like a dependency graph with

00:19:16,080 --> 00:19:20,400
all the nodes packages and

00:19:18,559 --> 00:19:22,480
many various dependencies in between

00:19:20,400 --> 00:19:23,120
them and you can't really just approach

00:19:22,480 --> 00:19:25,840
it as

00:19:23,120 --> 00:19:26,559
an individual and try to make it smaller

00:19:25,840 --> 00:19:28,880
right this is

00:19:26,559 --> 00:19:30,160
really complex and hundreds of really

00:19:28,880 --> 00:19:32,559
clever people maintain

00:19:30,160 --> 00:19:34,080
these individual pieces so you need

00:19:32,559 --> 00:19:37,360
something

00:19:34,080 --> 00:19:40,160
broader to actually optimize this so

00:19:37,360 --> 00:19:41,840
that's where fedora's objectives come in

00:19:40,160 --> 00:19:43,520
and minimization is actually one of

00:19:41,840 --> 00:19:45,200
fedora's main objective

00:19:43,520 --> 00:19:46,799
so the whole community is actually

00:19:45,200 --> 00:19:50,480
working towards

00:19:46,799 --> 00:19:54,240
minimizing the dependencies so

00:19:50,480 --> 00:19:57,360
we can build smaller images and

00:19:54,240 --> 00:20:00,000
this is a graph of fedora

00:19:57,360 --> 00:20:01,679
base image sizes basically you can maybe

00:20:00,000 --> 00:20:03,039
see on the right side that the colors

00:20:01,679 --> 00:20:06,400
change i've been

00:20:03,039 --> 00:20:08,400
building this graph over time but around

00:20:06,400 --> 00:20:09,520
for there are 30 i have two entries here

00:20:08,400 --> 00:20:11,440
this is where we started the

00:20:09,520 --> 00:20:14,159
minimization objective

00:20:11,440 --> 00:20:16,240
and that's where the images sizes

00:20:14,159 --> 00:20:19,600
started to drop quite significantly

00:20:16,240 --> 00:20:22,159
and this is again only possible with

00:20:19,600 --> 00:20:24,159
many people working together and making

00:20:22,159 --> 00:20:26,080
sure that

00:20:24,159 --> 00:20:27,919
the dependency tree is organ is

00:20:26,080 --> 00:20:29,760
optimized and also that the image is

00:20:27,919 --> 00:20:32,880
using only what it needs

00:20:29,760 --> 00:20:33,200
um and for that we have a tool um this

00:20:32,880 --> 00:20:35,039
is

00:20:33,200 --> 00:20:36,880
actually available for you in public you

00:20:35,039 --> 00:20:39,520
can just see it and i want to share a

00:20:36,880 --> 00:20:43,360
few things it can do

00:20:39,520 --> 00:20:46,240
this is looking at nginx

00:20:43,360 --> 00:20:46,960
which is web server it's what we built

00:20:46,240 --> 00:20:49,280
before

00:20:46,960 --> 00:20:50,559
and this is analyzing it in various base

00:20:49,280 --> 00:20:52,480
container images

00:20:50,559 --> 00:20:54,480
and in various architectures and these

00:20:52,480 --> 00:20:55,200
are not necessarily images that federer

00:20:54,480 --> 00:20:57,919
builds

00:20:55,200 --> 00:21:00,159
or ships this is mostly just

00:20:57,919 --> 00:21:02,559
installations that we expect people

00:21:00,159 --> 00:21:04,240
to do on them on their own so we want to

00:21:02,559 --> 00:21:05,360
make sure that these are as small as

00:21:04,240 --> 00:21:07,120
possible so

00:21:05,360 --> 00:21:10,080
we analyze all of this and this is what

00:21:07,120 --> 00:21:12,000
like all the fedora teams uh

00:21:10,080 --> 00:21:14,000
this is all available to all of them to

00:21:12,000 --> 00:21:17,840
just monitor whatever they need and you

00:21:14,000 --> 00:21:17,840
can see at the bottom right

00:21:18,080 --> 00:21:22,159
this is the this is the nginx image that

00:21:20,960 --> 00:21:25,840
we built

00:21:22,159 --> 00:21:27,360
um and yeah there's dependency graphs

00:21:25,840 --> 00:21:29,039
and you can see over time there was some

00:21:27,360 --> 00:21:32,960
weirdness in the middle but

00:21:29,039 --> 00:21:35,919
overall growing um package list

00:21:32,960 --> 00:21:37,600
with details about each package and even

00:21:35,919 --> 00:21:40,320
you can drill down to

00:21:37,600 --> 00:21:42,080
the inter dependencies between

00:21:40,320 --> 00:21:43,200
individual packages i can really show

00:21:42,080 --> 00:21:45,440
you things

00:21:43,200 --> 00:21:47,280
um in detail and this is available on

00:21:45,440 --> 00:21:48,799
this url you can go there right now and

00:21:47,280 --> 00:21:50,480
you can just check it out

00:21:48,799 --> 00:21:53,120
and you can even contribute your own

00:21:50,480 --> 00:21:56,480
weekly workloads to

00:21:53,120 --> 00:21:58,960
put them into the monitoring um

00:21:56,480 --> 00:22:01,520
so that's my part i guess i'll handle

00:21:58,960 --> 00:22:01,520
this code

00:22:03,120 --> 00:22:08,080
yeah so maybe next slide all right

00:22:08,400 --> 00:22:11,520
so some of this work like you can see it

00:22:10,880 --> 00:22:13,760
today

00:22:11,520 --> 00:22:15,520
in in fedora obviously as adam showed

00:22:13,760 --> 00:22:17,760
like like and we mess with this all day

00:22:15,520 --> 00:22:19,760
you know all the time in fedor but also

00:22:17,760 --> 00:22:22,559
you'll see this work arrive in rel

00:22:19,760 --> 00:22:24,080
uh some in rel eight some in row nine

00:22:22,559 --> 00:22:26,320
mostly is kind of where you'll see it

00:22:24,080 --> 00:22:27,280
i mean we're kind of done with rel7 but

00:22:26,320 --> 00:22:29,039
but

00:22:27,280 --> 00:22:30,880
i want to at least put out there that

00:22:29,039 --> 00:22:31,440
like again these these are like a pretty

00:22:30,880 --> 00:22:33,120
decent

00:22:31,440 --> 00:22:34,080
base image that's standard that like

00:22:33,120 --> 00:22:34,720
where you're gonna see a lot of this

00:22:34,080 --> 00:22:36,320
work arrive

00:22:34,720 --> 00:22:38,000
so like we have something called ubi

00:22:36,320 --> 00:22:40,159
micro um

00:22:38,000 --> 00:22:42,080
coming in rel eight four which shouldn't

00:22:40,159 --> 00:22:44,240
be in the next three ish months

00:22:42,080 --> 00:22:46,240
um and so you'll see we did get it down

00:22:44,240 --> 00:22:48,559
to about 38 megabytes uh

00:22:46,240 --> 00:22:49,280
uncompressed and i believe compressed it

00:22:48,559 --> 00:22:51,520
might be

00:22:49,280 --> 00:22:53,280
13 ish megabytes so like it's pretty

00:22:51,520 --> 00:22:54,720
darn good across the wire like 13

00:22:53,280 --> 00:22:56,159
megabytes and then 38

00:22:54,720 --> 00:22:59,039
and that's with a full that's with a

00:22:56,159 --> 00:23:02,400
real glib c um we are looking at

00:22:59,039 --> 00:23:04,480
um other ways to minimize

00:23:02,400 --> 00:23:06,080
the dependency tree like like um i'm

00:23:04,480 --> 00:23:07,440
working with carlos o'donnell to like

00:23:06,080 --> 00:23:09,039
look at ways that we might trim out a

00:23:07,440 --> 00:23:12,159
megabyte or two here and there

00:23:09,039 --> 00:23:14,640
for like tz data and um

00:23:12,159 --> 00:23:15,600
and other other like components of glypc

00:23:14,640 --> 00:23:17,200
so there's still we had

00:23:15,600 --> 00:23:19,440
we definitely have a road map of things

00:23:17,200 --> 00:23:21,280
where we can like continue to focus on

00:23:19,440 --> 00:23:23,280
driving down the dependencies but like

00:23:21,280 --> 00:23:24,640
you quickly find that like it it touches

00:23:23,280 --> 00:23:26,640
a lot of different teams and a lot of

00:23:24,640 --> 00:23:28,480
different clever people like adam said

00:23:26,640 --> 00:23:29,679
and so it's it's it's a tough problem

00:23:28,480 --> 00:23:33,039
but it's one that's fun

00:23:29,679 --> 00:23:34,880
to work on um again like we said kind of

00:23:33,039 --> 00:23:36,080
distributes images like like again these

00:23:34,880 --> 00:23:37,919
are this is a

00:23:36,080 --> 00:23:39,520
a joking word that we use because like

00:23:37,919 --> 00:23:40,880
in the image it doesn't have the

00:23:39,520 --> 00:23:42,559
assembly line packaged

00:23:40,880 --> 00:23:44,640
or or maybe another way to say is like

00:23:42,559 --> 00:23:46,080
we package the assembly line in a build

00:23:44,640 --> 00:23:46,640
container in the first stage of the

00:23:46,080 --> 00:23:48,960
build

00:23:46,640 --> 00:23:50,559
and then we only deliver the the car in

00:23:48,960 --> 00:23:52,240
the second one right and so

00:23:50,559 --> 00:23:53,679
so like if you need to move the assembly

00:23:52,240 --> 00:23:55,600
line around you can

00:23:53,679 --> 00:23:57,120
um you could you could save that

00:23:55,600 --> 00:23:57,679
assembly line and cache it and keep it

00:23:57,120 --> 00:23:58,960
around

00:23:57,679 --> 00:24:00,960
and then know exactly how to rebuild

00:23:58,960 --> 00:24:02,720
that image um but but

00:24:00,960 --> 00:24:04,799
in general you and in production you

00:24:02,720 --> 00:24:05,679
only want the uh you know the car and

00:24:04,799 --> 00:24:08,440
that makes sense

00:24:05,679 --> 00:24:10,400
and again it's not necessarily

00:24:08,440 --> 00:24:11,440
disrespect serverless and all these

00:24:10,400 --> 00:24:12,960
other less

00:24:11,440 --> 00:24:14,720
words it's somebody else's you know

00:24:12,960 --> 00:24:16,159
somebody else has to manage that and in

00:24:14,720 --> 00:24:18,320
this case we think that like letting

00:24:16,159 --> 00:24:19,679
fedora and the the linux distro itself

00:24:18,320 --> 00:24:21,360
manage that makes sense

00:24:19,679 --> 00:24:23,600
um i already kind of mentioned like the

00:24:21,360 --> 00:24:24,799
dependency tree rel8 real nine you're

00:24:23,600 --> 00:24:27,600
going to see a lot of this i mean

00:24:24,799 --> 00:24:28,000
i'm hoping to see even smaller in real

00:24:27,600 --> 00:24:30,080
nine

00:24:28,000 --> 00:24:32,080
like when we have a raw9 micro you know

00:24:30,080 --> 00:24:34,320
uh i hope to even get it down in the

00:24:32,080 --> 00:24:34,799
25-ish megabyte range we'll see how

00:24:34,320 --> 00:24:36,320
close

00:24:34,799 --> 00:24:37,919
we can get to that but getting to that

00:24:36,320 --> 00:24:41,120
and then maybe even looking at

00:24:37,919 --> 00:24:43,440
um a a uh a

00:24:41,120 --> 00:24:45,360
uh like maybe even a busy box image just

00:24:43,440 --> 00:24:47,039
by itself as like a base starting point

00:24:45,360 --> 00:24:48,880
um definitely some other ones that to

00:24:47,039 --> 00:24:51,360
keep your eye out for like probably rel

00:24:48,880 --> 00:24:52,720
eight five-ish time frame is around uh

00:24:51,360 --> 00:24:55,360
having like an open ssl

00:24:52,720 --> 00:24:56,799
based image and an nginx based micro

00:24:55,360 --> 00:24:58,000
image and an apache based

00:24:56,799 --> 00:24:59,520
micro image those are three that are

00:24:58,000 --> 00:25:00,559
high on my priority list like i'd really

00:24:59,520 --> 00:25:02,320
like to get those

00:25:00,559 --> 00:25:04,799
three out by like rel eight five time

00:25:02,320 --> 00:25:06,960
frame um and so those would end up being

00:25:04,799 --> 00:25:08,559
a 120 megabyte range for like a patching

00:25:06,960 --> 00:25:10,400
engine x and i think

00:25:08,559 --> 00:25:11,440
even smaller 80-ish megabytes i can't

00:25:10,400 --> 00:25:13,039
quite remember the size off top of my

00:25:11,440 --> 00:25:14,880
head for open so but they should be

00:25:13,039 --> 00:25:16,400
pretty good even with the rel eight

00:25:14,880 --> 00:25:18,159
dependency tree but then with again with

00:25:16,400 --> 00:25:20,000
a real nine dependency tree which will

00:25:18,159 --> 00:25:21,840
inherit a lot of uh adam's work you'll

00:25:20,000 --> 00:25:24,960
end up seeing a lot even smaller

00:25:21,840 --> 00:25:25,600
images but uh and so then you know i i

00:25:24,960 --> 00:25:26,960
bring this all

00:25:25,600 --> 00:25:28,320
together to like try to explain like

00:25:26,960 --> 00:25:29,600
this is how you actually get to a

00:25:28,320 --> 00:25:32,320
smaller tech surface right

00:25:29,600 --> 00:25:33,840
like you have to have standardized uh c

00:25:32,320 --> 00:25:34,640
library standardized open sl

00:25:33,840 --> 00:25:36,720
standardized

00:25:34,640 --> 00:25:38,400
uh you know xml libraries things like

00:25:36,720 --> 00:25:38,799
that like have all these standardized

00:25:38,400 --> 00:25:40,880
and then

00:25:38,799 --> 00:25:42,640
and then have the minimum you know each

00:25:40,880 --> 00:25:44,080
of the images needs to be minimized but

00:25:42,640 --> 00:25:46,799
then the entire dependency

00:25:44,080 --> 00:25:47,520
chain your tree has to be also minimized

00:25:46,799 --> 00:25:48,640
so that like

00:25:47,520 --> 00:25:50,559
the attack surface within your

00:25:48,640 --> 00:25:51,840
organization is actually minimizing so

00:25:50,559 --> 00:25:52,960
this is kind of the path we're going

00:25:51,840 --> 00:25:53,600
down and like we think it's a pretty

00:25:52,960 --> 00:25:55,679
good path

00:25:53,600 --> 00:25:58,320
and uh happy to answer any questions if

00:25:55,679 --> 00:25:58,320
you guys have any

00:25:58,559 --> 00:26:04,400
okay uh adam kaplan was asking

00:26:01,600 --> 00:26:05,360
does minimizing depend the band

00:26:04,400 --> 00:26:07,600
dependencies

00:26:05,360 --> 00:26:09,279
go hand in hand with the objective of

00:26:07,600 --> 00:26:11,760
reproducible builds

00:26:09,279 --> 00:26:13,200
to keep the outer factory metaphor going

00:26:11,760 --> 00:26:16,320
can these techniques help

00:26:13,200 --> 00:26:18,159
ensure we are building the same car yes

00:26:16,320 --> 00:26:20,000
absolutely so this was one of the core

00:26:18,159 --> 00:26:21,520
principles behind the minimization

00:26:20,000 --> 00:26:23,360
objective like

00:26:21,520 --> 00:26:25,120
there were options right we can just

00:26:23,360 --> 00:26:27,440
install something and then just

00:26:25,120 --> 00:26:29,279
tear things apart and make it small but

00:26:27,440 --> 00:26:31,360
terrible and not reproducible so

00:26:29,279 --> 00:26:32,320
um the decision was that we actually

00:26:31,360 --> 00:26:34,960
want to keep

00:26:32,320 --> 00:26:37,440
using rpm dependencies as they are

00:26:34,960 --> 00:26:39,360
unmodified right so we're doing changes

00:26:37,440 --> 00:26:41,760
before actually the installation so this

00:26:39,360 --> 00:26:44,960
is during the packaging and during

00:26:41,760 --> 00:26:47,360
during the build process so

00:26:44,960 --> 00:26:49,039
still just rpm3 and it's still

00:26:47,360 --> 00:26:51,279
reproducible like the way

00:26:49,039 --> 00:26:52,720
we build packages in fedora are in in a

00:26:51,279 --> 00:26:55,120
build system that just

00:26:52,720 --> 00:26:56,240
keeps track of all everything that was

00:26:55,120 --> 00:26:57,919
in the build root at

00:26:56,240 --> 00:26:59,679
any particular time and you can really

00:26:57,919 --> 00:27:00,960
reproduce like to the bit

00:26:59,679 --> 00:27:02,720
every single build and that's what

00:27:00,960 --> 00:27:06,000
definitely be keeping

00:27:02,720 --> 00:27:08,559
um and so yeah the answer is definitely

00:27:06,000 --> 00:27:10,159
yes that's that that's very important to

00:27:08,559 --> 00:27:12,960
us

00:27:10,159 --> 00:27:13,679
okay next question from cornell what do

00:27:12,960 --> 00:27:17,279
you think about

00:27:13,679 --> 00:27:19,279
nix and building nick's oci images

00:27:17,279 --> 00:27:21,520
why overriding certain package

00:27:19,279 --> 00:27:24,960
attributes for example disabling

00:27:21,520 --> 00:27:29,440
pam supports the git package

00:27:24,960 --> 00:27:29,440
does it count as making your own distro

00:27:30,880 --> 00:27:37,840
that's an interesting question

00:27:34,559 --> 00:27:41,279
um i don't i'm not

00:27:37,840 --> 00:27:43,039
super familiar with nyx um so i don't

00:27:41,279 --> 00:27:45,200
have a good answer to that i'll tap my

00:27:43,039 --> 00:27:45,200
head

00:27:45,679 --> 00:27:50,240
yes adam yeah sorry not not not really

00:27:48,960 --> 00:27:52,480
expert in nix there

00:27:50,240 --> 00:27:52,480
um

00:27:54,000 --> 00:27:57,279
yeah i guess it's a strange question for

00:27:55,679 --> 00:27:58,480
us because we basically deal mostly with

00:27:57,279 --> 00:27:59,840
like fedora and rel

00:27:58,480 --> 00:28:01,520
and in the fedora and real world we

00:27:59,840 --> 00:28:03,760
would probably never disable things like

00:28:01,520 --> 00:28:06,159
pam lake we want

00:28:03,760 --> 00:28:07,520
we want to keep the way the binaries

00:28:06,159 --> 00:28:08,960
function in a container

00:28:07,520 --> 00:28:11,039
since containers are just fancy

00:28:08,960 --> 00:28:11,600
processes and container images are just

00:28:11,039 --> 00:28:13,600
fancy

00:28:11,600 --> 00:28:15,600
files that live on operate you know on

00:28:13,600 --> 00:28:16,960
the disk then we basically want to keep

00:28:15,600 --> 00:28:19,200
them functioning

00:28:16,960 --> 00:28:21,440
quite similarly to to the way they

00:28:19,200 --> 00:28:23,679
function in a native traditional

00:28:21,440 --> 00:28:24,799
linux os it's like we really try to

00:28:23,679 --> 00:28:26,640
steer away from like

00:28:24,799 --> 00:28:28,399
i get that i start to squint my eyes and

00:28:26,640 --> 00:28:29,120
go i don't know about anything that

00:28:28,399 --> 00:28:30,960
would like

00:28:29,120 --> 00:28:32,399
make the binaries behave differently in

00:28:30,960 --> 00:28:33,600
a container we already have enough

00:28:32,399 --> 00:28:35,279
confusion

00:28:33,600 --> 00:28:37,520
and and you'd be surprised how many

00:28:35,279 --> 00:28:39,039
questions we get the vast vast majority

00:28:37,520 --> 00:28:40,559
of the questions i get are

00:28:39,039 --> 00:28:41,760
trying to take something that exists in

00:28:40,559 --> 00:28:43,600
linux and then make it work in a

00:28:41,760 --> 00:28:45,840
container i'd say that's 85

00:28:43,600 --> 00:28:47,760
percent of the questions i get and so

00:28:45,840 --> 00:28:49,919
like making things work differently

00:28:47,760 --> 00:28:51,200
kind of defeats that so i think i don't

00:28:49,919 --> 00:28:52,880
think that's a technique we would look

00:28:51,200 --> 00:28:54,960
at deeply

00:28:52,880 --> 00:28:56,880
and also like we're using glibc the

00:28:54,960 --> 00:28:58,559
standard c library and

00:28:56,880 --> 00:29:00,799
it's kind of big but like that's the

00:28:58,559 --> 00:29:02,159
standard that everyone uses right and

00:29:00,799 --> 00:29:04,320
that that's what we want to use

00:29:02,159 --> 00:29:06,320
as well so there's there's additional

00:29:04,320 --> 00:29:08,159
ways how you can optimize it like

00:29:06,320 --> 00:29:09,520
for example use it with the busy box but

00:29:08,159 --> 00:29:10,399
that's not what we're really aiming for

00:29:09,520 --> 00:29:13,600
we want to

00:29:10,399 --> 00:29:16,320
use the standard ways but minimize

00:29:13,600 --> 00:29:16,320
within those

00:29:16,559 --> 00:29:20,159
okay let's go to the next question is

00:29:19,520 --> 00:29:25,279
ubi

00:29:20,159 --> 00:29:25,679
nice hour no ubi 9 will be based on rel

00:29:25,279 --> 00:29:27,360
nine

00:29:25,679 --> 00:29:29,440
and so when real nine drops we'll

00:29:27,360 --> 00:29:32,559
release ubi nine at the same time

00:29:29,440 --> 00:29:33,760
um the closest thing you can see fedor

00:29:32,559 --> 00:29:35,520
fedora if you go and play with the

00:29:33,760 --> 00:29:37,279
fedora images you're gonna get very

00:29:35,520 --> 00:29:39,520
close to what what you'll have in real

00:29:37,279 --> 00:29:39,520
nine

00:29:39,600 --> 00:29:44,000
okay questions from renee what was the

00:29:42,240 --> 00:29:46,320
improvement from from performance

00:29:44,000 --> 00:29:49,760
perspective of minimizing site as

00:29:46,320 --> 00:29:52,240
shown for ngems are there any

00:29:49,760 --> 00:29:54,159
performance metrics

00:29:52,240 --> 00:29:55,279
so that's one that's when i'll jump in

00:29:54,159 --> 00:29:56,640
adam if you don't mind because i have

00:29:55,279 --> 00:29:57,840
i've had some recent

00:29:56,640 --> 00:30:00,399
conversations around this that are

00:29:57,840 --> 00:30:01,600
interesting so minimizing the dependency

00:30:00,399 --> 00:30:04,000
tree and all these things will not

00:30:01,600 --> 00:30:05,679
really have an effect on performance

00:30:04,000 --> 00:30:07,039
the the two main places that will affect

00:30:05,679 --> 00:30:09,440
performance in my opinion

00:30:07,039 --> 00:30:11,120
are glib c and the kernel are and

00:30:09,440 --> 00:30:12,880
probably open sl library

00:30:11,120 --> 00:30:14,960
um you know those those three things are

00:30:12,880 --> 00:30:16,960
what matter and and actually i just got

00:30:14,960 --> 00:30:20,240
a recent report of somebody using

00:30:16,960 --> 00:30:20,640
a a partner using uh in fact i still

00:30:20,240 --> 00:30:21,840
have a

00:30:20,640 --> 00:30:24,000
i have a call with them next week i

00:30:21,840 --> 00:30:25,440
believe if i remember right because they

00:30:24,000 --> 00:30:27,440
want to understand

00:30:25,440 --> 00:30:29,200
why their database is performing better

00:30:27,440 --> 00:30:31,520
on ubi than than other

00:30:29,200 --> 00:30:32,799
linux based images and this is you you

00:30:31,520 --> 00:30:33,679
can break this question down and say

00:30:32,799 --> 00:30:35,520
well why does

00:30:33,679 --> 00:30:37,520
why does nginx or what does you know a

00:30:35,520 --> 00:30:38,960
database perform better with this

00:30:37,520 --> 00:30:40,640
library than that library with these

00:30:38,960 --> 00:30:42,159
binaries and those binaries i mean

00:30:40,640 --> 00:30:42,640
that's always going to come down to the

00:30:42,159 --> 00:30:44,960
kernel

00:30:42,640 --> 00:30:45,840
glibc and then the libraries right and

00:30:44,960 --> 00:30:48,240
so like

00:30:45,840 --> 00:30:49,760
i i over this journey that i've come

00:30:48,240 --> 00:30:50,000
from the container side learning more

00:30:49,760 --> 00:30:51,840
and more

00:30:50,000 --> 00:30:53,440
about glibc and like all the work we do

00:30:51,840 --> 00:30:54,960
in that in that tool chain

00:30:53,440 --> 00:30:56,559
i realized that that team does an

00:30:54,960 --> 00:30:58,399
immense amount of work to make

00:30:56,559 --> 00:31:00,880
the glib see that like red hat produces

00:30:58,399 --> 00:31:01,600
in fedora and in rel and even just glibc

00:31:00,880 --> 00:31:03,600
in general

00:31:01,600 --> 00:31:04,799
even upstream like they do a tremendous

00:31:03,600 --> 00:31:06,960
amount of work to like

00:31:04,799 --> 00:31:09,120
make that work really quickly and they

00:31:06,960 --> 00:31:11,039
worry about runtime performance the

00:31:09,120 --> 00:31:12,399
the minimization would only ever have to

00:31:11,039 --> 00:31:13,600
do with the pull time of

00:31:12,399 --> 00:31:15,840
pulling the container image but the

00:31:13,600 --> 00:31:17,360
runtime performance is all the work of

00:31:15,840 --> 00:31:18,000
the glibc team and then the kernel team

00:31:17,360 --> 00:31:19,919
and then how that

00:31:18,000 --> 00:31:22,000
stuff's compiled and how it works and so

00:31:19,919 --> 00:31:23,519
apparently there are customers and

00:31:22,000 --> 00:31:25,679
and users that are seeing different

00:31:23,519 --> 00:31:28,080
performances based on which uh

00:31:25,679 --> 00:31:30,080
which library i i did i did research

00:31:28,080 --> 00:31:31,600
muscle c a while back again i didn't we

00:31:30,080 --> 00:31:33,279
didn't do like crazy

00:31:31,600 --> 00:31:34,799
benchmarking but it definitely looks

00:31:33,279 --> 00:31:36,640
like there are system calls

00:31:34,799 --> 00:31:38,080
that are significantly slower in like

00:31:36,640 --> 00:31:39,360
other if you know

00:31:38,080 --> 00:31:41,279
engineering is always a trade-off right

00:31:39,360 --> 00:31:42,720
like the there's a reason why glibc is

00:31:41,279 --> 00:31:44,000
bigger it has more functionality and

00:31:42,720 --> 00:31:44,640
it's probably been better tested and

00:31:44,000 --> 00:31:45,840
blah blah

00:31:44,640 --> 00:31:47,360
if you go to a smaller library like

00:31:45,840 --> 00:31:48,000
muscle c there's definitely function

00:31:47,360 --> 00:31:49,600
calls or

00:31:48,000 --> 00:31:51,840
or system calls that don't func that

00:31:49,600 --> 00:31:53,039
don't perform as well i suspect that

00:31:51,840 --> 00:31:54,559
that's where i would focus your time if

00:31:53,039 --> 00:31:55,919
you're worried about nginx actual

00:31:54,559 --> 00:31:58,559
runtime performance is the

00:31:55,919 --> 00:32:01,840
the kernel the c library and like the

00:31:58,559 --> 00:32:01,840
ssl libraries things like that

00:32:02,399 --> 00:32:06,000
next question from camille have you

00:32:04,480 --> 00:32:08,480
considered also using

00:32:06,000 --> 00:32:09,600
lip curl minimal and curl minimalist

00:32:08,480 --> 00:32:14,080
alternatives to

00:32:09,600 --> 00:32:16,080
lip curl and curl in the base images

00:32:14,080 --> 00:32:18,000
yeah sure i think that's basically with

00:32:16,080 --> 00:32:19,600
whatever i show with the gillips minimal

00:32:18,000 --> 00:32:21,519
and there's minimal versions of

00:32:19,600 --> 00:32:22,880
other packages and yeah that you can

00:32:21,519 --> 00:32:24,640
definitely use those

00:32:22,880 --> 00:32:26,240
this goes back to like knowing the

00:32:24,640 --> 00:32:27,279
knowing the ecosystem and knowing like

00:32:26,240 --> 00:32:28,480
what to pick because there's

00:32:27,279 --> 00:32:32,880
alternatives

00:32:28,480 --> 00:32:33,440
um i i kind of i kind of wouldn't want

00:32:32,880 --> 00:32:36,080
to have

00:32:33,440 --> 00:32:37,679
maybe a list or something or way to make

00:32:36,080 --> 00:32:38,640
this more obvious for people so like

00:32:37,679 --> 00:32:40,640
they don't need to just

00:32:38,640 --> 00:32:42,559
know but they can refer at something but

00:32:40,640 --> 00:32:45,760
yeah this is definitely part of it just

00:32:42,559 --> 00:32:47,760
making the smarter c3

00:32:45,760 --> 00:32:49,200
that work the best for for whatever

00:32:47,760 --> 00:32:52,000
you're doing and

00:32:49,200 --> 00:32:52,960
back to the performance um you you might

00:32:52,000 --> 00:32:54,720
also

00:32:52,960 --> 00:32:56,640
want to consider just like sometimes

00:32:54,720 --> 00:32:57,760
smaller might be maybe not that

00:32:56,640 --> 00:32:59,279
performance so

00:32:57,760 --> 00:33:00,960
these are always trade-offs right but

00:32:59,279 --> 00:33:02,000
yeah if you want to optimize for size

00:33:00,960 --> 00:33:03,760
just like

00:33:02,000 --> 00:33:06,880
go for all the minimal packages and you

00:33:03,760 --> 00:33:09,120
get very small image

00:33:06,880 --> 00:33:10,480
yeah and to jump in on that the one

00:33:09,120 --> 00:33:12,960
about the uh

00:33:10,480 --> 00:33:14,240
uh lib minimal that's interesting like

00:33:12,960 --> 00:33:15,120
on the discord server i'd love to

00:33:14,240 --> 00:33:17,840
discuss like

00:33:15,120 --> 00:33:19,919
would you view it useful to have like a

00:33:17,840 --> 00:33:21,039
a curl container image or a wget

00:33:19,919 --> 00:33:22,640
container image that's something i'd

00:33:21,039 --> 00:33:24,000
love to discuss a little bit deeper like

00:33:22,640 --> 00:33:26,000
that's where my mind goes like it might

00:33:24,000 --> 00:33:27,440
be easiest for us to produce a container

00:33:26,000 --> 00:33:29,360
image that already has

00:33:27,440 --> 00:33:30,880
those minimal versions in them so i'd

00:33:29,360 --> 00:33:34,000
love to discuss that a little long

00:33:30,880 --> 00:33:36,880
more if you have some time okay

00:33:34,000 --> 00:33:38,559
question from pavel do you use for

00:33:36,880 --> 00:33:39,120
scheduling and triggering the image

00:33:38,559 --> 00:33:42,640
builds

00:33:39,120 --> 00:33:42,640
trump young kings

00:33:43,760 --> 00:33:48,399
well adam could probably answer fedora

00:33:45,360 --> 00:33:48,399
and i could probably answer rel

00:33:49,519 --> 00:33:53,120
okay will there be a question from oh no

00:33:52,159 --> 00:33:54,640
no

00:33:53,120 --> 00:33:56,240
oh no that wasn't the answer i was i was

00:33:54,640 --> 00:33:58,159
handing it to adam to answer like what

00:33:56,240 --> 00:34:01,039
using fedora to build

00:33:58,159 --> 00:34:02,559
all right yeah fedora i think uses um

00:34:01,039 --> 00:34:06,000
osbs which is oh

00:34:02,559 --> 00:34:08,560
uh how

00:34:06,000 --> 00:34:10,240
i just open shift system openshift yeah

00:34:08,560 --> 00:34:12,800
yeah openshift container

00:34:10,240 --> 00:34:15,919
build system um that's what fedora uses

00:34:12,800 --> 00:34:19,919
and you can find like sources for

00:34:15,919 --> 00:34:22,000
all the container builds on src.fedora

00:34:19,919 --> 00:34:24,960
think it's slash containers

00:34:22,000 --> 00:34:28,159
um that's where you can find all the

00:34:24,960 --> 00:34:29,520
sources for the federal packages

00:34:28,159 --> 00:34:31,200
yeah and the same is actually true for

00:34:29,520 --> 00:34:32,240
rel like internally we have an osps

00:34:31,200 --> 00:34:34,800
system that

00:34:32,240 --> 00:34:36,320
basically is a huge cluster of of

00:34:34,800 --> 00:34:37,359
servers that are all running openshift

00:34:36,320 --> 00:34:38,720
and then uh

00:34:37,359 --> 00:34:39,919
that build system actually is what

00:34:38,720 --> 00:34:41,280
builds our container engines and there's

00:34:39,919 --> 00:34:43,119
this dependency tree graph

00:34:41,280 --> 00:34:45,440
so like if we rebuild ubi we have to

00:34:43,119 --> 00:34:48,000
rebuild shared images we have to rebuild

00:34:45,440 --> 00:34:49,760
all the middleware images etc

00:34:48,000 --> 00:34:51,119
there's a huge i think red hat might

00:34:49,760 --> 00:34:53,520
have one of the biggest

00:34:51,119 --> 00:34:54,720
build dependencies well no but but it's

00:34:53,520 --> 00:34:58,399
probably it's pretty big

00:34:54,720 --> 00:34:58,399
we build millions of images per month

00:34:59,280 --> 00:35:05,520
okay question next one is from terry

00:35:02,400 --> 00:35:07,839
will be a scent os streamline container

00:35:05,520 --> 00:35:07,839
image

00:35:08,400 --> 00:35:11,520
terry why are you asking me this no i'm

00:35:09,760 --> 00:35:17,839
kidding

00:35:11,520 --> 00:35:17,839
all right yes there will likely be yes

00:35:17,920 --> 00:35:21,119
oh go ahead adam were you gonna say

00:35:19,440 --> 00:35:24,160
something oh that though i would just be

00:35:21,119 --> 00:35:26,400
very surprised if there wasn't so yeah

00:35:24,160 --> 00:35:27,839
that's yeah in fact in fact brian

00:35:26,400 --> 00:35:32,320
simpson is working on a

00:35:27,839 --> 00:35:34,800
centos eight image right now um

00:35:32,320 --> 00:35:36,160
as of today we're building it off of ubi

00:35:34,800 --> 00:35:38,800
we're basically using a

00:35:36,160 --> 00:35:39,680
ubi8 image and then running a yum update

00:35:38,800 --> 00:35:42,079
against the

00:35:39,680 --> 00:35:43,520
centos stream uh things so that like

00:35:42,079 --> 00:35:45,520
basically ubi's the

00:35:43,520 --> 00:35:46,800
since sent to a stream is a future

00:35:45,520 --> 00:35:47,680
version of rel

00:35:46,800 --> 00:35:49,760
you can think of it almost like a

00:35:47,680 --> 00:35:50,400
rawhide it makes sense to just like

00:35:49,760 --> 00:35:52,960
update

00:35:50,400 --> 00:35:53,920
the the slower moving you know you know

00:35:52,960 --> 00:35:55,040
and like from

00:35:53,920 --> 00:35:58,320
you know you can think of you could

00:35:55,040 --> 00:36:00,480
think of sent to a stream as rel.next um

00:35:58,320 --> 00:36:02,480
and then you can think of like ubi as

00:36:00,480 --> 00:36:04,000
rel and so when you want rel.next you

00:36:02,480 --> 00:36:05,520
just run a yum update and just a few

00:36:04,000 --> 00:36:07,200
things should change like you know

00:36:05,520 --> 00:36:08,960
that are just a small set of packages

00:36:07,200 --> 00:36:11,119
there's only like 180 packages in

00:36:08,960 --> 00:36:12,640
in ubi so like if you're on a yum update

00:36:11,119 --> 00:36:14,560
you know it might be five packages get

00:36:12,640 --> 00:36:16,079
updated so like that's the way

00:36:14,560 --> 00:36:19,680
that's the way the plan is to build the

00:36:16,079 --> 00:36:19,680
centos stream images as of today

00:36:20,560 --> 00:36:23,599
okay there was also a question from

00:36:22,240 --> 00:36:27,119
james regarding

00:36:23,599 --> 00:36:30,480
real nine when it's going to ga but

00:36:27,119 --> 00:36:33,440
terry already replied that's it's in the

00:36:30,480 --> 00:36:36,720
middle of 2022

00:36:33,440 --> 00:36:39,119
correct yep that's right and

00:36:36,720 --> 00:36:40,560
the last question the funny one from

00:36:39,119 --> 00:36:43,599
william

00:36:40,560 --> 00:36:47,280
scott can you remove your hat so we can

00:36:43,599 --> 00:36:49,280
see your new mane i am i'm too bald to

00:36:47,280 --> 00:36:51,520
remove my hat but you can see my

00:36:49,280 --> 00:36:54,000
my you know you can hear i don't care

00:36:51,520 --> 00:36:56,720
this is my hair

00:36:54,000 --> 00:36:58,240
this is covet hair this is like whatever

00:36:56,720 --> 00:37:01,359
a year of no haircuts

00:36:58,240 --> 00:37:02,480
i believe that you made our days like

00:37:01,359 --> 00:37:05,920
you know

00:37:02,480 --> 00:37:08,960
if it's a bit more colorful

00:37:05,920 --> 00:37:11,760
with with this last uh

00:37:08,960 --> 00:37:12,560
picture of you which we can uh project

00:37:11,760 --> 00:37:15,599
um

00:37:12,560 --> 00:37:17,680
that's all questions we still have like

00:37:15,599 --> 00:37:22,400
two minutes to go so if you have any

00:37:17,680 --> 00:37:23,760
question it's the last moment to ask

00:37:22,400 --> 00:37:27,920
well i have no idea what i mean by

00:37:23,760 --> 00:37:27,920
pandemic hair that makes no sense to me

00:37:29,680 --> 00:37:37,839
you've always had pen i know

00:37:33,200 --> 00:37:41,359
thank you

00:37:37,839 --> 00:37:41,359
that's all i believe

00:37:41,760 --> 00:37:45,520
and i would like to thank you scott and

00:37:44,720 --> 00:37:48,839
adam for

00:37:45,520 --> 00:37:50,079
presenting the workshop we had great

00:37:48,839 --> 00:37:53,680
questions

00:37:50,079 --> 00:37:55,680
and there is one more from pavel

00:37:53,680 --> 00:37:59,359
um what was the biggest issue when

00:37:55,680 --> 00:37:59,359
minimizing the dependencies

00:37:59,839 --> 00:38:05,440
um i don't think i know like

00:38:03,280 --> 00:38:07,680
the biggest issue but it's just every

00:38:05,440 --> 00:38:09,520
getting everyone on the same page and

00:38:07,680 --> 00:38:11,440
figuring out like what to do because

00:38:09,520 --> 00:38:13,359
there's if you if you say

00:38:11,440 --> 00:38:15,119
smaller right like what do you mean

00:38:13,359 --> 00:38:17,520
smaller like do you want to minimize the

00:38:15,119 --> 00:38:18,880
repo do you want to minimize

00:38:17,520 --> 00:38:21,599
and then there were like many things and

00:38:18,880 --> 00:38:22,640
we need to just discuss this and figure

00:38:21,599 --> 00:38:24,480
out like

00:38:22,640 --> 00:38:25,680
what specifically we're actually making

00:38:24,480 --> 00:38:28,000
smaller versus like

00:38:25,680 --> 00:38:30,079
what are we keeping right so we're

00:38:28,000 --> 00:38:33,280
keeping rpm

00:38:30,079 --> 00:38:35,280
let's see but we want to maybe

00:38:33,280 --> 00:38:37,760
make the dependency more optional and

00:38:35,280 --> 00:38:42,400
stuff like that so

00:38:37,760 --> 00:38:42,400
so those things and then

00:38:43,839 --> 00:38:47,520
i don't know it's it's that there

00:38:45,920 --> 00:38:50,560
weren't like a huge problem

00:38:47,520 --> 00:38:51,280
it's it it's an interesting work

00:38:50,560 --> 00:38:53,119
definitely

00:38:51,280 --> 00:38:54,320
um so just like yeah getting everyone on

00:38:53,119 --> 00:38:56,640
the same page and

00:38:54,320 --> 00:38:58,800
making sure like people actually find

00:38:56,640 --> 00:38:59,200
time in like on top of their actual you

00:38:58,800 --> 00:39:03,040
know

00:38:59,200 --> 00:39:06,640
jobs and everything to focus on this um

00:39:03,040 --> 00:39:09,680
but yeah i i can think of like something

00:39:06,640 --> 00:39:11,359
really really huge i think it's going

00:39:09,680 --> 00:39:12,880
yeah i'd concur adam like for me it was

00:39:11,359 --> 00:39:13,680
just getting people excited about the

00:39:12,880 --> 00:39:15,839
idea of

00:39:13,680 --> 00:39:17,119
minimizing things it's it's grunt work

00:39:15,839 --> 00:39:18,720
in a lot of ways right like if

00:39:17,119 --> 00:39:20,000
if i have 50 million things on my plate

00:39:18,720 --> 00:39:21,920
somebody says hey by the way you need to

00:39:20,000 --> 00:39:23,839
make these things smaller i'm like ah

00:39:21,920 --> 00:39:25,920
like i'm gonna get grumpy like and so

00:39:23,839 --> 00:39:27,359
getting everybody excited about like

00:39:25,920 --> 00:39:29,200
no this matters like especially in the

00:39:27,359 --> 00:39:31,440
container world that's

00:39:29,200 --> 00:39:33,280
right in my mind the hardest piece yeah

00:39:31,440 --> 00:39:35,839
and sometimes it actually means like

00:39:33,280 --> 00:39:37,839
making the packages live harder because

00:39:35,839 --> 00:39:40,079
they may be using some huge library

00:39:37,839 --> 00:39:41,680
to make this piece of code simpler right

00:39:40,079 --> 00:39:43,119
just like call a function

00:39:41,680 --> 00:39:44,800
and when i'm asking you hey you need to

00:39:43,119 --> 00:39:46,079
remove this very useful library because

00:39:44,800 --> 00:39:47,839
it's massive like

00:39:46,079 --> 00:39:49,599
that's actually a burden for them but it

00:39:47,839 --> 00:39:51,200
benefits everyone else right and then we

00:39:49,599 --> 00:39:52,240
need to figure out like what to do about

00:39:51,200 --> 00:39:54,079
it so

00:39:52,240 --> 00:39:57,839
there's that many trade-offs it's it's

00:39:54,079 --> 00:39:57,839

YouTube URL: https://www.youtube.com/watch?v=HuE2Lrf5mRg


