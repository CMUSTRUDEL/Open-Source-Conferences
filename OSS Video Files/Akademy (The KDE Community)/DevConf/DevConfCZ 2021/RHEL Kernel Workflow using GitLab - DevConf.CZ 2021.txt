Title: RHEL Kernel Workflow using GitLab - DevConf.CZ 2021
Publication date: 2021-03-19
Playlist: DevConfCZ 2021
Description: 
	Speakers: Prarit Bhargava, Don Zickus

The Red Hat Enterprise Linux (RHEL) kernel has modernized its workflow using GitLab as its source forge. With the release of CentOS-Stream, most of this workflow will be made public. This talk will discuss how the team uses gitlab to manage its Enterprise workflow requirements. We will introduce the CI pieces using the Continuous Kernel Integration (CKI) Service, the cli tools we use, lab and bichon, and the challenges we are working on overcoming. In addition, there will be examples of how non-Red Hat developers will be able to contribute to this workflow. Attendees should understand how git and git forges like GitLab work and the basic idea of CI services. Understanding how kernel development works is helpful but not necessary. An attendee will walk away understanding how to apply this workflow to their projects and how to contribute to the RHEL kernel.


Schedule: https://sched.co/gmN5
Captions: 
	00:00:01,280 --> 00:00:06,399
hello everybody welcome to our talk

00:00:04,400 --> 00:00:08,320
my name is don zikus a kernel workflow

00:00:06,399 --> 00:00:10,000
lead at red hat and with me is prayer

00:00:08,320 --> 00:00:11,040
bhargava a distinguished engineer at red

00:00:10,000 --> 00:00:12,160
hat

00:00:11,040 --> 00:00:14,000
we're going to talk about how we

00:00:12,160 --> 00:00:15,280
incorporated gitlab into the real kernel

00:00:14,000 --> 00:00:19,279
workflow

00:00:15,280 --> 00:00:20,960
next slide the rel kernel has a workflow

00:00:19,279 --> 00:00:23,199
that was established over 10 years ago

00:00:20,960 --> 00:00:24,640
to handle a large volume of back codes

00:00:23,199 --> 00:00:26,000
using emails a mailing list and

00:00:24,640 --> 00:00:27,519
patchwork we created processes to

00:00:26,000 --> 00:00:28,880
guarantee that change was tracked and

00:00:27,519 --> 00:00:30,240
reviewed correctly

00:00:28,880 --> 00:00:32,000
worked well for a number of years and

00:00:30,240 --> 00:00:34,079
over time like most workflows we added

00:00:32,000 --> 00:00:36,239
more rules processes and volume

00:00:34,079 --> 00:00:37,360
this led to the workflow slowly becoming

00:00:36,239 --> 00:00:38,800
the bottleneck

00:00:37,360 --> 00:00:40,719
with the new requirement to publicize

00:00:38,800 --> 00:00:42,840
our workflow for sentostream

00:00:40,719 --> 00:00:44,160
an opportunity came to modernize this

00:00:42,840 --> 00:00:45,600
workflow

00:00:44,160 --> 00:00:47,360
this presentation will talk about what

00:00:45,600 --> 00:00:49,680
we want to accomplish how gitlab helps

00:00:47,360 --> 00:00:51,360
us what we implement

00:00:49,680 --> 00:00:52,960
the hope is you can walk away understand

00:00:51,360 --> 00:00:53,600
the difficulties of an email-based

00:00:52,960 --> 00:00:54,960
workflow

00:00:53,600 --> 00:00:56,320
understand the new technologies we

00:00:54,960 --> 00:00:58,160
introduce and hopefully be encouraged to

00:00:56,320 --> 00:01:00,559
migrate your email-based workflow to a

00:00:58,160 --> 00:01:04,400
git forge based workflow

00:01:00,559 --> 00:01:05,199
next slide all workflows start with

00:01:04,400 --> 00:01:07,439
requirements

00:01:05,199 --> 00:01:08,960
ours was simple upstream first all

00:01:07,439 --> 00:01:10,320
changes reviewed and tested

00:01:08,960 --> 00:01:12,960
and that there is an audit trail of how

00:01:10,320 --> 00:01:15,360
the change lands in the raw kernel

00:01:12,960 --> 00:01:16,960
what does that mean upstream first means

00:01:15,360 --> 00:01:18,479
all changes push the upstream community

00:01:16,960 --> 00:01:20,640
for review and acceptance

00:01:18,479 --> 00:01:22,159
and then backboard and then we backport

00:01:20,640 --> 00:01:23,600
the final version

00:01:22,159 --> 00:01:26,400
this allows us to leverage upstream

00:01:23,600 --> 00:01:28,799
expertise as much as possible

00:01:26,400 --> 00:01:30,159
and all changes reviewed and tested kind

00:01:28,799 --> 00:01:31,759
of breaks out into two pieces we have

00:01:30,159 --> 00:01:33,920
the review which has two parts

00:01:31,759 --> 00:01:36,560
technical review and a business review

00:01:33,920 --> 00:01:38,720
which is basically bugzilla

00:01:36,560 --> 00:01:40,960
all can all kernel changes are gated on

00:01:38,720 --> 00:01:42,560
the acceptance of both those reviews

00:01:40,960 --> 00:01:43,840
each review process has complicated

00:01:42,560 --> 00:01:45,119
rules that the workflow needed to

00:01:43,840 --> 00:01:47,920
accommodate

00:01:45,119 --> 00:01:49,759
and our testing is broken into two parts

00:01:47,920 --> 00:01:51,759
automated functional testing performance

00:01:49,759 --> 00:01:54,399
testing and qe verification

00:01:51,759 --> 00:01:57,840
with cuber qe verifying changes that

00:01:54,399 --> 00:01:57,840
automated testing could not

00:01:58,079 --> 00:02:01,600
finally audit trail means we need to

00:02:00,079 --> 00:02:03,680
ensure that we can understand why and

00:02:01,600 --> 00:02:04,960
how a change entered our kernel this is

00:02:03,680 --> 00:02:06,240
necessary for various security

00:02:04,960 --> 00:02:08,479
certifications

00:02:06,240 --> 00:02:10,560
we also tracked all posted changes to

00:02:08,479 --> 00:02:10,959
verify nothing was accidentally dropped

00:02:10,560 --> 00:02:15,200
or

00:02:10,959 --> 00:02:15,200
ignored next slide

00:02:16,560 --> 00:02:19,840
putting this all together our old

00:02:18,160 --> 00:02:21,520
workflow revolved around a patchwork

00:02:19,840 --> 00:02:23,120
server and a mailing list the maintainer

00:02:21,520 --> 00:02:24,480
spent most of the time tagging emails

00:02:23,120 --> 00:02:25,760
and patches with information that

00:02:24,480 --> 00:02:26,560
determined whether the patches were

00:02:25,760 --> 00:02:28,879
reviewed

00:02:26,560 --> 00:02:30,480
and ready to be committed or not

00:02:28,879 --> 00:02:32,160
automated testing happened on the side

00:02:30,480 --> 00:02:34,400
it was manually coordinated to block the

00:02:32,160 --> 00:02:37,040
patches based on its results

00:02:34,400 --> 00:02:39,680
a lot of manual work but it worked for

00:02:37,040 --> 00:02:43,200
worked great for a long time

00:02:39,680 --> 00:02:44,959
next slide however

00:02:43,200 --> 00:02:46,560
it had its struggles with the increase

00:02:44,959 --> 00:02:47,599
of volume the amount of manual work was

00:02:46,560 --> 00:02:50,319
overwhelming

00:02:47,599 --> 00:02:51,920
every email was triaged and labeled lots

00:02:50,319 --> 00:02:52,560
of scripts run to generate the correct

00:02:51,920 --> 00:02:54,560
tags and

00:02:52,560 --> 00:02:55,599
move the patches along scratch builds

00:02:54,560 --> 00:02:56,879
and tests were not

00:02:55,599 --> 00:02:58,159
integrated into the tooling and

00:02:56,879 --> 00:02:59,680
developers had to wait for an email

00:02:58,159 --> 00:03:00,879
report that may or may not come to find

00:02:59,680 --> 00:03:01,920
out if their patches could get

00:03:00,879 --> 00:03:03,760
integrated

00:03:01,920 --> 00:03:05,280
all those work was manually coordinated

00:03:03,760 --> 00:03:07,040
by the various kernel maintainers and

00:03:05,280 --> 00:03:08,159
after a while the maintainers became the

00:03:07,040 --> 00:03:11,040
bottleneck

00:03:08,159 --> 00:03:12,720
this had to be addressed also the

00:03:11,040 --> 00:03:13,519
developer contribution both emailing

00:03:12,720 --> 00:03:15,599
backported

00:03:13,519 --> 00:03:16,879
patches following multiple threads for

00:03:15,599 --> 00:03:18,959
feedback and review verifying the

00:03:16,879 --> 00:03:20,800
various boxes settings

00:03:18,959 --> 00:03:22,400
and checking a status page to see if you

00:03:20,800 --> 00:03:23,920
did everything right

00:03:22,400 --> 00:03:25,840
explain this to new hires was a

00:03:23,920 --> 00:03:27,680
challenge the workflow is outdated

00:03:25,840 --> 00:03:28,480
compared to popular services like github

00:03:27,680 --> 00:03:32,799
and gitlab

00:03:28,480 --> 00:03:34,239
we had to address that too next slide

00:03:32,799 --> 00:03:36,480
as i said earlier the straw that broke

00:03:34,239 --> 00:03:38,000
the camel's back was new requirements

00:03:36,480 --> 00:03:39,280
red hat shifted strategies and wanted

00:03:38,000 --> 00:03:40,560
ralph to have a proper public

00:03:39,280 --> 00:03:42,640
contribution path

00:03:40,560 --> 00:03:44,000
where non-red hat contributor interact

00:03:42,640 --> 00:03:45,040
with red hat employees using the same

00:03:44,000 --> 00:03:47,440
workflow

00:03:45,040 --> 00:03:48,879
red hat calls this centaur stream taking

00:03:47,440 --> 00:03:50,400
a workflow and hardening it was going to

00:03:48,879 --> 00:03:51,680
be a challenge explaining how to

00:03:50,400 --> 00:03:53,040
contribute to the rel kernel was going

00:03:51,680 --> 00:03:54,879
to be more challenging

00:03:53,040 --> 00:03:57,280
a lot of quirks and nuances that we did

00:03:54,879 --> 00:03:59,040
not want to share in terms

00:03:57,280 --> 00:04:01,200
so we use this opportunity to rethink

00:03:59,040 --> 00:04:06,239
this modernize the workflow and make

00:04:01,200 --> 00:04:06,239
contributing easier next slide

00:04:07,599 --> 00:04:11,040
what do we want this new workflow to

00:04:08,959 --> 00:04:12,720
look like first we agreed

00:04:11,040 --> 00:04:15,200
it had to be a merge based workflow it

00:04:12,720 --> 00:04:17,120
needed a robust api to build cli tools

00:04:15,200 --> 00:04:19,359
and interact with it

00:04:17,120 --> 00:04:20,799
developers love their cli tools having a

00:04:19,359 --> 00:04:23,199
web ui was okay but not

00:04:20,799 --> 00:04:24,400
higher on our priority list having a

00:04:23,199 --> 00:04:26,639
built-in automated

00:04:24,400 --> 00:04:28,160
testing tool was a plus along with open

00:04:26,639 --> 00:04:30,400
source friendliness and being easy

00:04:28,160 --> 00:04:31,360
for developers to use most importantly

00:04:30,400 --> 00:04:33,840
it had

00:04:31,360 --> 00:04:36,080
to drastically reduce the manual burden

00:04:33,840 --> 00:04:38,560
of the maintainer

00:04:36,080 --> 00:04:38,560
next slide

00:04:39,440 --> 00:04:42,320
after a few weeks reviewing the tools

00:04:41,040 --> 00:04:44,160
and services out there we conclude that

00:04:42,320 --> 00:04:46,000
gitlab met our needs the service had

00:04:44,160 --> 00:04:47,759
merge requests at its core and ci

00:04:46,000 --> 00:04:49,040
tooling built into its architecture with

00:04:47,759 --> 00:04:50,960
this huge api list

00:04:49,040 --> 00:04:52,080
it was easy to find and customize

00:04:50,960 --> 00:04:53,840
tooling around it

00:04:52,080 --> 00:04:56,160
the service was open source and already

00:04:53,840 --> 00:04:58,320
popular in the community we spent some

00:04:56,160 --> 00:05:01,440
time verifying could meet our needs

00:04:58,320 --> 00:05:03,280
our internal ci testing service cki

00:05:01,440 --> 00:05:04,880
already leveraged get lab ci tools so we

00:05:03,280 --> 00:05:06,160
knew that piece was solid

00:05:04,880 --> 00:05:07,840
a few merge requests helped us

00:05:06,160 --> 00:05:08,800
understand what a developer and review

00:05:07,840 --> 00:05:11,280
contribution

00:05:08,800 --> 00:05:12,560
workflow look like we learned about web

00:05:11,280 --> 00:05:14,479
hooks and how to leverage them to

00:05:12,560 --> 00:05:15,360
customize the gitlab workflow to our

00:05:14,479 --> 00:05:17,199
needs

00:05:15,360 --> 00:05:18,800
finally gitlab had defined structured

00:05:17,199 --> 00:05:19,600
rules for contributing reviewing and

00:05:18,800 --> 00:05:22,160
maintaining

00:05:19,600 --> 00:05:23,199
these rules made us rethink our workflow

00:05:22,160 --> 00:05:26,479
and strengthen them

00:05:23,199 --> 00:05:28,080
we felt confident this is be a good fit

00:05:26,479 --> 00:05:29,600
we finally saw a path for red hat and

00:05:28,080 --> 00:05:31,199
non-red hat developers could easily

00:05:29,600 --> 00:05:32,400
contribute to the rail kernel reviewers

00:05:31,199 --> 00:05:33,840
had faster feedback on their

00:05:32,400 --> 00:05:35,919
contributions and maintainers

00:05:33,840 --> 00:05:38,800
could finally monitor the process and

00:05:35,919 --> 00:05:42,880
not be the process

00:05:38,800 --> 00:05:43,600
next slide after months of work we did

00:05:42,880 --> 00:05:46,080
it

00:05:43,600 --> 00:05:47,919
the transition was not easy change among

00:05:46,080 --> 00:05:50,840
developers is hard

00:05:47,919 --> 00:05:52,240
mapping all processes the new ones is

00:05:50,840 --> 00:05:54,479
hard

00:05:52,240 --> 00:05:56,400
one the world would be better trust us

00:05:54,479 --> 00:05:58,319
is not an easy sell

00:05:56,400 --> 00:06:00,000
we started small we educated a small

00:05:58,319 --> 00:06:01,680
team of developers

00:06:00,000 --> 00:06:03,440
and added another team and incorporated

00:06:01,680 --> 00:06:04,639
all their feedback and then rolled this

00:06:03,440 --> 00:06:08,000
out to everyone

00:06:04,639 --> 00:06:09,360
we made it at this point i'm going to

00:06:08,000 --> 00:06:10,960
hand this over to prior to talk about

00:06:09,360 --> 00:06:14,560
the technical stuff we had to implement

00:06:10,960 --> 00:06:14,560
to accomplish this huge task

00:06:16,240 --> 00:06:21,280
thanks don as you excuse me as everybody

00:06:19,680 --> 00:06:22,960
just heard from don we had a lot of

00:06:21,280 --> 00:06:26,000
issues that needed adjusting

00:06:22,960 --> 00:06:26,639
or resolving in our existing workflow as

00:06:26,000 --> 00:06:29,120
a result

00:06:26,639 --> 00:06:30,960
we're attempting to completely overall

00:06:29,120 --> 00:06:32,080
overhaul the way we contribute to the

00:06:30,960 --> 00:06:34,080
rel kernel

00:06:32,080 --> 00:06:37,199
we've changed the process based on input

00:06:34,080 --> 00:06:39,120
from the maintainers developers and qe

00:06:37,199 --> 00:06:41,039
i think the best way to review the

00:06:39,120 --> 00:06:41,600
changes is to look at them from a point

00:06:41,039 --> 00:06:44,000
of view

00:06:41,600 --> 00:06:45,840
of a contributor to the rel kernel and

00:06:44,000 --> 00:06:47,520
what they now have to do

00:06:45,840 --> 00:06:49,440
so i'm going to focus on the developer

00:06:47,520 --> 00:06:52,560
point of view for this presentation

00:06:49,440 --> 00:06:55,520
rather than look at the entire process

00:06:52,560 --> 00:06:57,560
to start our main user facing bug and

00:06:55,520 --> 00:06:59,039
feature request tool is still

00:06:57,560 --> 00:07:01,199
bugzilla.redhead.com

00:06:59,039 --> 00:07:03,280
we use this for all of our rel projects

00:07:01,199 --> 00:07:05,599
and across all of our os's

00:07:03,280 --> 00:07:08,400
we allow open bugzilla reports against

00:07:05,599 --> 00:07:09,360
rel and our other os's like fedora and

00:07:08,400 --> 00:07:11,919
centos

00:07:09,360 --> 00:07:13,039
so typically we start with the bugzilla

00:07:11,919 --> 00:07:16,160
filed by someone

00:07:13,039 --> 00:07:18,479
for an issue they have the kernel

00:07:16,160 --> 00:07:20,720
an engineer is assigned to that bugzilla

00:07:18,479 --> 00:07:23,919
and debugs that issue

00:07:20,720 --> 00:07:25,120
if it's an easy fix sorry it's an easy

00:07:23,919 --> 00:07:26,960
it's easy if there's a fix

00:07:25,120 --> 00:07:28,319
up stream they just back port that fix

00:07:26,960 --> 00:07:30,800
and get it into realm

00:07:28,319 --> 00:07:32,720
if there isn't a fix upstream there's a

00:07:30,800 --> 00:07:35,120
little bit more work involved

00:07:32,720 --> 00:07:35,919
the assignee has to create code and post

00:07:35,120 --> 00:07:37,840
upstream

00:07:35,919 --> 00:07:40,479
for inclusion into the upstream kernel

00:07:37,840 --> 00:07:43,440
before considering a fix for rel

00:07:40,479 --> 00:07:43,680
ultimately and in either case the code

00:07:43,440 --> 00:07:45,759
is

00:07:43,680 --> 00:07:47,919
upstream and the bugzilla signee needs

00:07:45,759 --> 00:07:50,080
to get it into the rel kernel

00:07:47,919 --> 00:07:51,120
that this process of debugging and

00:07:50,080 --> 00:07:53,039
analysis

00:07:51,120 --> 00:07:55,599
hasn't changed over the 15 years i've

00:07:53,039 --> 00:07:57,919
been doing kernel development at red hat

00:07:55,599 --> 00:08:01,440
and it's after this analysis step where

00:07:57,919 --> 00:08:05,280
we've introduced a new process

00:08:01,440 --> 00:08:08,000
so as i just asked how does that code

00:08:05,280 --> 00:08:08,800
now get from upstream into the rel

00:08:08,000 --> 00:08:10,800
kernel

00:08:08,800 --> 00:08:13,120
and i'm going to also throw in a select

00:08:10,800 --> 00:08:14,879
new question what are the requirements

00:08:13,120 --> 00:08:16,879
for providing a backboard and patch for

00:08:14,879 --> 00:08:18,879
a submission in terrell

00:08:16,879 --> 00:08:21,520
we have a document called commit rules

00:08:18,879 --> 00:08:23,120
that details exactly what a back ported

00:08:21,520 --> 00:08:24,960
patch must look like

00:08:23,120 --> 00:08:27,599
it has guidelines for referencing a

00:08:24,960 --> 00:08:28,560
bugzilla the format of the back port of

00:08:27,599 --> 00:08:31,520
patch's title

00:08:28,560 --> 00:08:34,479
description and tags like the cc signed

00:08:31,520 --> 00:08:36,959
off bys tested by's etc

00:08:34,479 --> 00:08:38,800
we also have a tool called getbackport

00:08:36,959 --> 00:08:40,959
that formats an upstream patch

00:08:38,800 --> 00:08:42,560
referenced by its commit hash in a

00:08:40,959 --> 00:08:45,680
matter that will meet the standard

00:08:42,560 --> 00:08:46,160
standard set by the commit rules there

00:08:45,680 --> 00:08:48,399
are

00:08:46,160 --> 00:08:50,240
obviously some things that git backport

00:08:48,399 --> 00:08:53,120
cannot do

00:08:50,240 --> 00:08:54,320
you can't know what you did for a test

00:08:53,120 --> 00:08:57,120
you can't know about

00:08:54,320 --> 00:08:59,040
patch conflicts for example the newly

00:08:57,120 --> 00:08:59,440
backported code may conflict with some

00:08:59,040 --> 00:09:02,320
other

00:08:59,440 --> 00:09:04,160
code that already is in rel and it can't

00:09:02,320 --> 00:09:06,240
know about the dependencies on code

00:09:04,160 --> 00:09:08,959
found in other bugzillas

00:09:06,240 --> 00:09:10,880
but the format does conform to the

00:09:08,959 --> 00:09:14,480
general commit and metadata layout

00:09:10,880 --> 00:09:14,480
specified by the commit rules

00:09:16,080 --> 00:09:19,440
after back porting and testing

00:09:17,680 --> 00:09:20,560
contributors now must create a merge

00:09:19,440 --> 00:09:22,640
request

00:09:20,560 --> 00:09:24,640
this can be done through git or git and

00:09:22,640 --> 00:09:27,040
the gitlab web ui

00:09:24,640 --> 00:09:29,440
red hat kernel engineering however

00:09:27,040 --> 00:09:31,040
recommends that the lab utility be used

00:09:29,440 --> 00:09:31,920
on the command line in place of those

00:09:31,040 --> 00:09:33,839
options

00:09:31,920 --> 00:09:36,080
it has an intuitive and easy to use

00:09:33,839 --> 00:09:38,080
interface for example to push and create

00:09:36,080 --> 00:09:41,040
your merge request you simply do get

00:09:38,080 --> 00:09:42,720
push your fork and a branch with your

00:09:41,040 --> 00:09:44,480
changes in it

00:09:42,720 --> 00:09:46,800
now you can follow that with a simple

00:09:44,480 --> 00:09:49,360
lab mr create

00:09:46,800 --> 00:09:50,640
the lab project is open source is an

00:09:49,360 --> 00:09:53,600
open source project

00:09:50,640 --> 00:09:55,519
hosted at this link it is not a unique

00:09:53,600 --> 00:09:57,600
red hat project and we've noticed

00:09:55,519 --> 00:10:00,160
other large groups and communities using

00:09:57,600 --> 00:10:01,680
it there are two red hat engineers that

00:10:00,160 --> 00:10:02,880
currently have commit access to the

00:10:01,680 --> 00:10:04,800
repository

00:10:02,880 --> 00:10:08,000
and both have been active in making and

00:10:04,800 --> 00:10:08,000
reviewing enhancements

00:10:09,200 --> 00:10:12,560
when the when the merge request is

00:10:11,760 --> 00:10:15,360
submitted

00:10:12,560 --> 00:10:16,160
several things happen at once the web

00:10:15,360 --> 00:10:19,200
hooks run

00:10:16,160 --> 00:10:21,600
on the merge request cki starts and the

00:10:19,200 --> 00:10:23,040
email bridge sends out patch emails

00:10:21,600 --> 00:10:24,800
we're going to go through each of these

00:10:23,040 --> 00:10:26,800
in the next few slides but first

00:10:24,800 --> 00:10:28,240
i'm going to turn it back over to don to

00:10:26,800 --> 00:10:33,839
give us a deeper look into the

00:10:28,240 --> 00:10:33,839
engineering behind the web hooks

00:10:36,480 --> 00:10:39,200
don are you there

00:10:43,040 --> 00:10:48,000
go ahead so thanks brett web hooks one

00:10:46,000 --> 00:10:49,839
of the key features about gitlab for us

00:10:48,000 --> 00:10:50,800
was its use of web hooks to deliver

00:10:49,839 --> 00:10:52,560
events

00:10:50,800 --> 00:10:54,800
these events are in response to merge

00:10:52,560 --> 00:10:57,760
requests comments ci pipelines

00:10:54,800 --> 00:10:58,160
issues etc using these events allowed us

00:10:57,760 --> 00:11:01,120
to

00:10:58,160 --> 00:11:01,920
tailor the workflow to our needs however

00:11:01,120 --> 00:11:03,760
workbooks

00:11:01,920 --> 00:11:05,120
are a one-time event and with the volume

00:11:03,760 --> 00:11:05,839
we anticipated we need to make this

00:11:05,120 --> 00:11:08,160
service

00:11:05,839 --> 00:11:09,680
more robust in addition we need to be

00:11:08,160 --> 00:11:12,320
able to access data behind

00:11:09,680 --> 00:11:14,560
our firewall securely so we created a

00:11:12,320 --> 00:11:15,760
rab mq service on aws that queued up all

00:11:14,560 --> 00:11:17,360
our events and delivered them to

00:11:15,760 --> 00:11:18,959
registered containers on our internal

00:11:17,360 --> 00:11:20,720
openshift platform

00:11:18,959 --> 00:11:22,959
these containers process the event had

00:11:20,720 --> 00:11:25,200
safe access to internal data

00:11:22,959 --> 00:11:26,240
once processed using an api token we

00:11:25,200 --> 00:11:27,920
could then update

00:11:26,240 --> 00:11:29,680
the gitlab merge request with comments

00:11:27,920 --> 00:11:31,600
labels or status

00:11:29,680 --> 00:11:33,680
this allowed developers reviewers and

00:11:31,600 --> 00:11:36,480
maintainers immediate feedback that once

00:11:33,680 --> 00:11:40,880
was a manual triaging job

00:11:36,480 --> 00:11:42,640
back to you prayer thanks don

00:11:40,880 --> 00:11:44,560
so as don just said we've created a

00:11:42,640 --> 00:11:46,240
sophisticated set of web hooks that run

00:11:44,560 --> 00:11:47,680
on merge request creation and other

00:11:46,240 --> 00:11:50,000
merge request events

00:11:47,680 --> 00:11:51,760
these include the bugzilla web hook

00:11:50,000 --> 00:11:52,560
which validates the bug zilla state and

00:11:51,760 --> 00:11:54,800
flags

00:11:52,560 --> 00:11:56,639
the commit comparison web hook that

00:11:54,800 --> 00:11:57,600
compares the commit against the upstream

00:11:56,639 --> 00:12:00,399
commit

00:11:57,600 --> 00:12:01,680
the dco web hook that confirms each

00:12:00,399 --> 00:12:03,200
commit

00:12:01,680 --> 00:12:04,880
and the merge request description

00:12:03,200 --> 00:12:06,639
contains a signed off by that

00:12:04,880 --> 00:12:07,920
acknowledges the developer certificate

00:12:06,639 --> 00:12:10,880
of origin

00:12:07,920 --> 00:12:12,079
the subsystems web hook that tags each

00:12:10,880 --> 00:12:15,200
merge request which

00:12:12,079 --> 00:12:19,440
with a specific subsystem tag like pci

00:12:15,200 --> 00:12:23,440
aspi networking individual drivers etc

00:12:19,440 --> 00:12:26,480
and lastly the kernel watch web hook

00:12:23,440 --> 00:12:26,959
this is a brand new feature it'll this

00:12:26,480 --> 00:12:29,600
project

00:12:26,959 --> 00:12:31,600
allows users to uniquely identify areas

00:12:29,600 --> 00:12:34,240
of the kernel they are interested in

00:12:31,600 --> 00:12:36,560
for example you might not be interested

00:12:34,240 --> 00:12:38,399
in being a reviewer for pci

00:12:36,560 --> 00:12:40,320
but you might be interested in the high

00:12:38,399 --> 00:12:41,839
level pci driver changes that are

00:12:40,320 --> 00:12:45,360
reflected in the include

00:12:41,839 --> 00:12:46,079
linux pci.h header file on the other

00:12:45,360 --> 00:12:47,839
hand

00:12:46,079 --> 00:12:49,600
you might be someone who wants to get

00:12:47,839 --> 00:12:50,639
experience in learning and reviewing an

00:12:49,600 --> 00:12:52,560
area of code

00:12:50,639 --> 00:12:55,200
and adding an entry to kernel watch

00:12:52,560 --> 00:12:57,360
allows you to watch that area of code

00:12:55,200 --> 00:12:59,519
kernel watch adds a comment to a merge

00:12:57,360 --> 00:13:01,519
request so that you'll be notified via

00:12:59,519 --> 00:13:03,360
gitlab app notification

00:13:01,519 --> 00:13:07,040
on the merge request that changes the

00:13:03,360 --> 00:13:09,360
files that you're interested in

00:13:07,040 --> 00:13:11,839
continuous integration also runs when a

00:13:09,360 --> 00:13:13,839
merge request is submitted or updated

00:13:11,839 --> 00:13:15,440
we have a sophisticated test suite that

00:13:13,839 --> 00:13:18,399
now runs part of the git

00:13:15,440 --> 00:13:20,240
as part of the gitlab process and starts

00:13:18,399 --> 00:13:21,360
exactly when that merge request is

00:13:20,240 --> 00:13:23,519
submitted

00:13:21,360 --> 00:13:25,440
previous to this it was run separately

00:13:23,519 --> 00:13:29,519
and kernel developers had to watch their

00:13:25,440 --> 00:13:32,399
email for results from the cki subsystem

00:13:29,519 --> 00:13:33,920
as can be seen on this slide cki results

00:13:32,399 --> 00:13:35,040
can be queried directly in the merge

00:13:33,920 --> 00:13:37,519
request

00:13:35,040 --> 00:13:39,519
cki will build rpms and test changes

00:13:37,519 --> 00:13:41,920
across all supported architectures with

00:13:39,519 --> 00:13:44,240
a few minor limitations

00:13:41,920 --> 00:13:45,279
for example we don't build the debug

00:13:44,240 --> 00:13:48,000
kernel for all our

00:13:45,279 --> 00:13:49,440
architectures users can download the

00:13:48,000 --> 00:13:51,680
artifacts from the tests

00:13:49,440 --> 00:13:52,639
the rpms that are built the logs of

00:13:51,680 --> 00:13:55,199
tests

00:13:52,639 --> 00:13:56,480
and review and use those locally to be

00:13:55,199 --> 00:13:59,440
clear however

00:13:56,480 --> 00:14:01,519
cki must have a successful run in order

00:13:59,440 --> 00:14:03,839
for the code to be included into the rel

00:14:01,519 --> 00:14:03,839
source

00:14:05,120 --> 00:14:08,320
the last project that runs on a merge

00:14:06,959 --> 00:14:10,720
request submission is the

00:14:08,320 --> 00:14:12,320
email bridge it is a utility that

00:14:10,720 --> 00:14:13,120
converts the commits from a merge

00:14:12,320 --> 00:14:15,360
request

00:14:13,120 --> 00:14:16,880
into an email patch set and sends them

00:14:15,360 --> 00:14:18,880
to a list

00:14:16,880 --> 00:14:21,040
right now the current rel kernel

00:14:18,880 --> 00:14:22,880
development process provides for email

00:14:21,040 --> 00:14:25,279
reviews of patch sets

00:14:22,880 --> 00:14:27,199
just like it's done upstream so it's

00:14:25,279 --> 00:14:28,320
necessary to have these emails for

00:14:27,199 --> 00:14:30,079
review

00:14:28,320 --> 00:14:32,320
the email bridge will use the merge

00:14:30,079 --> 00:14:34,480
request title and description to create

00:14:32,320 --> 00:14:36,480
a cover letter for the change set

00:14:34,480 --> 00:14:38,480
and send it to a pre-configured email

00:14:36,480 --> 00:14:41,680
address reviewers can then

00:14:38,480 --> 00:14:45,279
act positively acknowledge the changes

00:14:41,680 --> 00:14:48,480
or knack reject or request changes

00:14:45,279 --> 00:14:51,360
again this review process is currently

00:14:48,480 --> 00:14:53,839
all done in email

00:14:51,360 --> 00:14:54,720
since that email review is done outside

00:14:53,839 --> 00:14:56,639
of gitlab

00:14:54,720 --> 00:14:58,000
we do have an additional web hook to

00:14:56,639 --> 00:14:59,600
track data

00:14:58,000 --> 00:15:01,600
it's different from the others in that

00:14:59,600 --> 00:15:02,800
it runs on all comments made on the

00:15:01,600 --> 00:15:06,160
merge request

00:15:02,800 --> 00:15:07,279
we call it the acknack web hook this web

00:15:06,160 --> 00:15:09,760
hook processes

00:15:07,279 --> 00:15:11,600
access nets from reviewers and email the

00:15:09,760 --> 00:15:12,000
email bridge applies them as comments to

00:15:11,600 --> 00:15:15,360
the merge

00:15:12,000 --> 00:15:17,440
request and ensures that the appropriate

00:15:15,360 --> 00:15:18,639
people from rh maintainers have reviewed

00:15:17,440 --> 00:15:21,920
the code

00:15:18,639 --> 00:15:23,279
at least two reviews are required if a

00:15:21,920 --> 00:15:25,680
merge request spans

00:15:23,279 --> 00:15:27,360
multiple subsystems then at least one

00:15:25,680 --> 00:15:28,800
reviewer from each of the affected

00:15:27,360 --> 00:15:32,959
subsystems must provide

00:15:28,800 --> 00:15:34,480
review we have some additional changes

00:15:32,959 --> 00:15:36,079
that we need to make as we continue

00:15:34,480 --> 00:15:38,880
through this transition

00:15:36,079 --> 00:15:40,000
we are currently using as both don and i

00:15:38,880 --> 00:15:42,639
just explained

00:15:40,000 --> 00:15:44,639
email reviews of patches the email

00:15:42,639 --> 00:15:46,560
review process needs to be converted to

00:15:44,639 --> 00:15:48,320
using gitlab's built-in approve and

00:15:46,560 --> 00:15:50,399
blocking threads model

00:15:48,320 --> 00:15:51,440
an approve would replace that email

00:15:50,399 --> 00:15:53,360
acknowledgement

00:15:51,440 --> 00:15:54,560
and in order to block or reject code

00:15:53,360 --> 00:15:56,720
from inclusion

00:15:54,560 --> 00:15:59,440
a reviewer would now open up a blocking

00:15:56,720 --> 00:16:02,240
thread on the gitlab merge request

00:15:59,440 --> 00:16:04,160
also to aid in reviews red hat has

00:16:02,240 --> 00:16:06,079
identified an open source tool which

00:16:04,160 --> 00:16:07,680
happens to be maintained by red hat or

00:16:06,079 --> 00:16:09,839
bishop

00:16:07,680 --> 00:16:11,680
i won't be able to demo it today but

00:16:09,839 --> 00:16:13,040
here's a screenshot to show that it's

00:16:11,680 --> 00:16:16,560
also command line based

00:16:13,040 --> 00:16:16,560
and takes design hints from mud

00:16:18,079 --> 00:16:22,480
we are going to be using this process

00:16:19,759 --> 00:16:24,560
for the centos stream kernel project

00:16:22,480 --> 00:16:26,160
contributions will be a bit limited at

00:16:24,560 --> 00:16:27,839
first as we figure out the process and

00:16:26,160 --> 00:16:30,160
make changes to it

00:16:27,839 --> 00:16:31,199
watch centus.org for announcements about

00:16:30,160 --> 00:16:32,720
the kernel

00:16:31,199 --> 00:16:35,040
if you're interested in trying things

00:16:32,720 --> 00:16:37,360
out today you can also try the fedora

00:16:35,040 --> 00:16:40,399
kernel project also known as kernel arc

00:16:37,360 --> 00:16:40,399
at this location

00:16:41,440 --> 00:16:45,120
we're planning on rolling out additional

00:16:43,040 --> 00:16:47,040
changes every few weeks

00:16:45,120 --> 00:16:48,959
we have other problems to solve

00:16:47,040 --> 00:16:50,240
dependencies between merge requests that

00:16:48,959 --> 00:16:53,600
might be solved by merge

00:16:50,240 --> 00:16:55,279
trains data retention issues etc we also

00:16:53,600 --> 00:16:56,639
have several feature requests that need

00:16:55,279 --> 00:16:59,519
to be resolved by gitlab

00:16:56,639 --> 00:17:01,120
for example restricting editing comments

00:16:59,519 --> 00:17:02,240
and restricting those who can block a

00:17:01,120 --> 00:17:04,559
comment

00:17:02,240 --> 00:17:06,640
with that i'll hand it back over to don

00:17:04,559 --> 00:17:09,280
for closing comments

00:17:06,640 --> 00:17:09,280
thanks prat

00:17:10,319 --> 00:17:14,480
thanks for it as prayer said we still

00:17:12,640 --> 00:17:15,919
have kings to work out with our new with

00:17:14,480 --> 00:17:17,520
our workflow and gitlab

00:17:15,919 --> 00:17:19,120
but overall while a transition was

00:17:17,520 --> 00:17:21,280
difficult the pros clear that it would

00:17:19,120 --> 00:17:23,280
clearly outweigh the cons

00:17:21,280 --> 00:17:24,720
we have a faster workflow cleaner rules

00:17:23,280 --> 00:17:27,120
and more tightly integrated

00:17:24,720 --> 00:17:28,720
processes hopefully others who had

00:17:27,120 --> 00:17:30,160
thoughts of transition to gitlab have a

00:17:28,720 --> 00:17:31,760
better understanding of what they will

00:17:30,160 --> 00:17:33,280
get themselves into

00:17:31,760 --> 00:17:34,799
and for folks who would like to get

00:17:33,280 --> 00:17:36,720
involved with contributing to the real

00:17:34,799 --> 00:17:40,480
colonel we are now finally ready

00:17:36,720 --> 00:17:44,240
for your contributions later this year

00:17:40,480 --> 00:17:46,799
thanks and any questions

00:17:44,240 --> 00:17:47,679
oh actually we have uh one slide we have

00:17:46,799 --> 00:17:49,360
links here

00:17:47,679 --> 00:17:50,720
uh for all the projects for folks who

00:17:49,360 --> 00:17:53,200
want to get involved or understand our

00:17:50,720 --> 00:17:56,240
technologies

00:17:53,200 --> 00:17:58,840
and with that we're open to questions

00:17:56,240 --> 00:18:00,080
yes so uh there was one there is one

00:17:58,840 --> 00:18:03,520
question

00:18:00,080 --> 00:18:07,280
uh will gitlab's issue be used if so how

00:18:03,520 --> 00:18:07,280
does it cooperate with paxilla

00:18:08,559 --> 00:18:11,760
john do you want to answer that do you

00:18:10,000 --> 00:18:14,559
want me to answer that

00:18:11,760 --> 00:18:15,840
so for what the way we've decided is all

00:18:14,559 --> 00:18:17,679
source content

00:18:15,840 --> 00:18:19,919
we'll use bugzilla that's how red hat

00:18:17,679 --> 00:18:23,200
tracks all of its uh

00:18:19,919 --> 00:18:25,679
its issues and problems through uh for

00:18:23,200 --> 00:18:26,640
various reviews however for workflow

00:18:25,679 --> 00:18:29,360
issues

00:18:26,640 --> 00:18:30,559
we decided we're using git lab issues

00:18:29,360 --> 00:18:32,480
for that

00:18:30,559 --> 00:18:34,080
the reason being is the workflow issues

00:18:32,480 --> 00:18:36,160
are it's easier to track in gitlab

00:18:34,080 --> 00:18:38,000
because that's where all that code is

00:18:36,160 --> 00:18:40,080
and uh it it's kind of a little bit

00:18:38,000 --> 00:18:43,520
outside the business purview of

00:18:40,080 --> 00:18:46,000
what we need to do do you want to add

00:18:43,520 --> 00:18:47,760
anything to that

00:18:46,000 --> 00:18:50,160
yeah we we do acknowledge that there's

00:18:47,760 --> 00:18:51,200
going to be some some confusion about

00:18:50,160 --> 00:18:53,440
that

00:18:51,200 --> 00:18:55,039
reporting issues on workflow because

00:18:53,440 --> 00:18:56,799
people tend to think of the workflow in

00:18:55,039 --> 00:18:59,280
terms of their code

00:18:56,799 --> 00:19:01,200
but we hope as time goes on it'll it'll

00:18:59,280 --> 00:19:01,679
be a pretty smooth and natural process

00:19:01,200 --> 00:19:05,200
to

00:19:01,679 --> 00:19:09,200
uh separate actual code

00:19:05,200 --> 00:19:12,480
issues as it were from process issues

00:19:09,200 --> 00:19:13,919
thank you there are uh other questions

00:19:12,480 --> 00:19:18,000
we have still

00:19:13,919 --> 00:19:20,880
a lot of time so guys feel free to post

00:19:18,000 --> 00:19:21,679
other questions as well so here it is do

00:19:20,880 --> 00:19:24,880
you plan to go

00:19:21,679 --> 00:19:26,000
away from the email-based review system

00:19:24,880 --> 00:19:28,960
you

00:19:26,000 --> 00:19:28,960
for that as well

00:19:29,919 --> 00:19:34,960
yeah yes that's ultimately our goal

00:19:33,280 --> 00:19:36,480
sorry to cut you off don that is

00:19:34,960 --> 00:19:39,840
ultimately our goal to

00:19:36,480 --> 00:19:41,840
drop email reviews um we

00:19:39,840 --> 00:19:43,840
recognize that this is a difference from

00:19:41,840 --> 00:19:47,039
the upstream community

00:19:43,840 --> 00:19:47,679
uh but the the time has come to make

00:19:47,039 --> 00:19:51,200
this leap

00:19:47,679 --> 00:19:54,559
forward uh the upstream community for

00:19:51,200 --> 00:19:56,880
two years maybe even three has had

00:19:54,559 --> 00:19:58,480
discussions on migrating to a get forged

00:19:56,880 --> 00:20:00,480
based workflow as well

00:19:58,480 --> 00:20:02,320
and just ah we recognize this is a

00:20:00,480 --> 00:20:04,640
difficult transition especially for

00:20:02,320 --> 00:20:07,840
developers uh therefore we have these

00:20:04,640 --> 00:20:09,919
email as a crutch to kind of allow us to

00:20:07,840 --> 00:20:11,600
develop the necessary tools and mature

00:20:09,919 --> 00:20:15,120
them such that this

00:20:11,600 --> 00:20:15,120
we can transition successfully

00:20:16,159 --> 00:20:20,400
i think the name bridge is very

00:20:18,640 --> 00:20:22,000
interesting in the email bridge it's a

00:20:20,400 --> 00:20:23,840
brit it's meant to be a bridge between a

00:20:22,000 --> 00:20:26,080
mailing list and get lab

00:20:23,840 --> 00:20:28,320
but it's also been it's also going to be

00:20:26,080 --> 00:20:30,480
used as a bridge for us to migrate

00:20:28,320 --> 00:20:31,360
people from their old email based

00:20:30,480 --> 00:20:35,120
workflows

00:20:31,360 --> 00:20:37,520
to a git lab workflow

00:20:35,120 --> 00:20:39,360
thank you there is one more question

00:20:37,520 --> 00:20:43,440
from denise

00:20:39,360 --> 00:20:43,440
what was the most difficult part of all

00:20:46,840 --> 00:20:49,840
this

00:20:49,919 --> 00:20:53,280
there was a lot of challenges how about

00:20:52,960 --> 00:20:55,520
that

00:20:53,280 --> 00:20:58,159
getting the developers to understand

00:20:55,520 --> 00:21:01,280
what git lab can do that was

00:20:58,159 --> 00:21:03,360
the proponent of this with my experience

00:21:01,280 --> 00:21:05,520
with various projects in the cti team

00:21:03,360 --> 00:21:07,039
and convincing kernel developers that

00:21:05,520 --> 00:21:09,360
we can use something besides an email

00:21:07,039 --> 00:21:11,280
based workflow was a big mind shift and

00:21:09,360 --> 00:21:13,520
as i said before the transition was hard

00:21:11,280 --> 00:21:15,200
but you take a step by step i took

00:21:13,520 --> 00:21:17,120
i grabbed grabbed a small group of

00:21:15,200 --> 00:21:18,320
kernel developers i convinced them they

00:21:17,120 --> 00:21:20,720
started like prayer

00:21:18,320 --> 00:21:21,600
and and a bunch of red hats that denise

00:21:20,720 --> 00:21:23,520
knows

00:21:21,600 --> 00:21:25,120
we started there convinced them they

00:21:23,520 --> 00:21:27,039
started to understand the gitlab power

00:21:25,120 --> 00:21:28,159
the power of gitlab and we brought it

00:21:27,039 --> 00:21:29,760
out to some more people

00:21:28,159 --> 00:21:31,360
and brought them in to now we have this

00:21:29,760 --> 00:21:32,480
critical mass of people that understand

00:21:31,360 --> 00:21:34,159
how

00:21:32,480 --> 00:21:36,080
how great this workflow is going to be

00:21:34,159 --> 00:21:36,880
and then it's easy to spread the word

00:21:36,080 --> 00:21:39,200
from there

00:21:36,880 --> 00:21:40,559
so for me that transition was hard

00:21:39,200 --> 00:21:43,039
harder than a lot of the technical

00:21:40,559 --> 00:21:43,039
challenges

00:21:43,200 --> 00:21:47,840
when excuse me when zika first

00:21:46,320 --> 00:21:50,159
approached me about moving

00:21:47,840 --> 00:21:51,600
moving to a git forge based workflow for

00:21:50,159 --> 00:21:53,760
the colonel

00:21:51,600 --> 00:21:55,120
i didn't exactly laugh in his face but i

00:21:53,760 --> 00:21:58,400
came close

00:21:55,120 --> 00:22:01,200
um i'm a true convert to it

00:21:58,400 --> 00:22:01,760
i think that dawn's right that's mine

00:22:01,200 --> 00:22:03,919
shift

00:22:01,760 --> 00:22:05,760
and one of the problems that we faced

00:22:03,919 --> 00:22:06,880
and we're still facing as we're rolling

00:22:05,760 --> 00:22:09,360
it out

00:22:06,880 --> 00:22:10,840
is that kernel engineers are used to

00:22:09,360 --> 00:22:14,240
very simplistic

00:22:10,840 --> 00:22:16,559
use of git they

00:22:14,240 --> 00:22:17,280
check out they clone a tree they do some

00:22:16,559 --> 00:22:19,280
stuff

00:22:17,280 --> 00:22:21,039
they create patches they send it to an

00:22:19,280 --> 00:22:23,520
email list

00:22:21,039 --> 00:22:25,039
explaining to people how forks and

00:22:23,520 --> 00:22:28,240
clones and local

00:22:25,039 --> 00:22:30,080
local copies work uh you know

00:22:28,240 --> 00:22:31,679
explaining what the get lab process

00:22:30,080 --> 00:22:33,840
really is is

00:22:31,679 --> 00:22:35,360
is actually the hurdle that the biggest

00:22:33,840 --> 00:22:41,679
hurdle i think that we've had to cross

00:22:35,360 --> 00:22:43,520
to these

00:22:41,679 --> 00:22:46,159
my biggest hurdle is the weekly meeting

00:22:43,520 --> 00:22:46,159
with zikus

00:22:46,960 --> 00:22:52,880
i couldn't resist on sorry

00:22:50,080 --> 00:22:52,880
you're the expert

00:22:53,679 --> 00:23:00,320
yeah uh there is

00:22:56,880 --> 00:23:02,480
uh one more question uh have you looked

00:23:00,320 --> 00:23:05,039
at tying commits to tickets

00:23:02,480 --> 00:23:08,799
vexilla to enforce traceability of

00:23:05,039 --> 00:23:11,919
commits back to the origin ticket

00:23:08,799 --> 00:23:14,640
we do that today every commit is

00:23:11,919 --> 00:23:15,280
has a bugzilla metadata in the changelog

00:23:14,640 --> 00:23:19,679
that's

00:23:15,280 --> 00:23:22,000
part of our commit rules requirement uh

00:23:19,679 --> 00:23:23,840
for kind of that reason we every and

00:23:22,000 --> 00:23:25,520
that's it ties into our audit trail too

00:23:23,840 --> 00:23:27,919
is we need to verify

00:23:25,520 --> 00:23:30,080
why we have every commit in our tree and

00:23:27,919 --> 00:23:32,640
where it came from bugzilla

00:23:30,080 --> 00:23:34,960
provides why it came into the tree and

00:23:32,640 --> 00:23:36,400
that it was approved i mean uh

00:23:34,960 --> 00:23:38,320
otherwise anything that comes in without

00:23:36,400 --> 00:23:39,679
a bugzilla is

00:23:38,320 --> 00:23:41,600
it's easy to argue that it wasn't

00:23:39,679 --> 00:23:44,400
approved and slipped in and

00:23:41,600 --> 00:23:45,360
that's a that's a red flag in our case

00:23:44,400 --> 00:23:47,200
now there are some red

00:23:45,360 --> 00:23:49,200
there's some process there's some

00:23:47,200 --> 00:23:50,799
workflow stuff that may come in without

00:23:49,200 --> 00:23:52,640
a bugzilla but that's just behind the

00:23:50,799 --> 00:23:56,080
scenes that doesn't impact

00:23:52,640 --> 00:23:58,000
customers per you're a big fan of

00:23:56,080 --> 00:24:01,200
bugzilla

00:23:58,000 --> 00:24:01,200
do you have anything else to add to that

00:24:01,279 --> 00:24:06,320
no that's exactly it perfect answer now

00:24:07,120 --> 00:24:11,840
okay there is one more um

00:24:13,520 --> 00:24:22,559
so was github considered as well

00:24:17,200 --> 00:24:22,559
uh saa openshift uses github

00:24:24,159 --> 00:24:28,720
yeah we we did look at other git forges

00:24:27,039 --> 00:24:32,000
um

00:24:28,720 --> 00:24:34,400
garrett github we

00:24:32,000 --> 00:24:35,919
we'd already started some work with cki

00:24:34,400 --> 00:24:36,559
on git lab and that was one of the

00:24:35,919 --> 00:24:38,960
reasons

00:24:36,559 --> 00:24:41,360
we went we ended up moving towards git

00:24:38,960 --> 00:24:44,559
lab but there are other reasons

00:24:41,360 --> 00:24:46,480
git lab git lab generally as a company

00:24:44,559 --> 00:24:49,679
has more of an open source

00:24:46,480 --> 00:24:52,720
view i think than some of the other uh

00:24:49,679 --> 00:24:56,080
corporate uh proprietary

00:24:52,720 --> 00:24:58,559
uh get services so we really

00:24:56,080 --> 00:24:59,120
i really kind of latched on to that that

00:24:58,559 --> 00:25:02,880
when

00:24:59,120 --> 00:25:05,600
i found out that git lab is really truly

00:25:02,880 --> 00:25:07,840
an open source company it it mattered a

00:25:05,600 --> 00:25:07,840
lot

00:25:08,000 --> 00:25:11,520
we could have certainly gone with github

00:25:10,240 --> 00:25:14,559
uh

00:25:11,520 --> 00:25:17,200
i don't think there's any

00:25:14,559 --> 00:25:18,000
huge reason overall other than that

00:25:17,200 --> 00:25:20,559
there was starting

00:25:18,000 --> 00:25:21,760
a couple i mean so the kernel workflow

00:25:20,559 --> 00:25:23,679
wasn't the only thing that's choosing

00:25:21,760 --> 00:25:24,720
gitlab we were also at the time working

00:25:23,679 --> 00:25:27,120
with we're trying to

00:25:24,720 --> 00:25:28,559
bring out the centos stream project and

00:25:27,120 --> 00:25:30,400
they were trying to evaluate how

00:25:28,559 --> 00:25:32,640
how they wanted to deliver their content

00:25:30,400 --> 00:25:35,760
um azure git lab

00:25:32,640 --> 00:25:38,080
github and they stumbled upon

00:25:35,760 --> 00:25:40,080
git lab was something that made sense to

00:25:38,080 --> 00:25:41,360
them sense to them and their community

00:25:40,080 --> 00:25:43,360
and we're actually trying to work with

00:25:41,360 --> 00:25:46,080
the fedora community too to see if

00:25:43,360 --> 00:25:47,360
if git lab would be a good fit to you

00:25:46,080 --> 00:25:49,520
know kind of update

00:25:47,360 --> 00:25:51,440
their their workflows too or if they

00:25:49,520 --> 00:25:53,039
want to continue using pejor

00:25:51,440 --> 00:25:54,799
there's some concerns that pejor wasn't

00:25:53,039 --> 00:25:56,240
able to keep up with

00:25:54,799 --> 00:25:57,840
the feature requests that fedora

00:25:56,240 --> 00:26:00,240
infrastructure needed

00:25:57,840 --> 00:26:02,320
so uh gitlab seemed to make a good sense

00:26:00,240 --> 00:26:04,159
for all those three projects so it

00:26:02,320 --> 00:26:06,000
and with as far as i said cki using

00:26:04,159 --> 00:26:11,840
gitlab already

00:26:06,000 --> 00:26:11,840
it seemed to be a better fit than github

00:26:13,760 --> 00:26:17,200
do you think this uh that this approach

00:26:15,679 --> 00:26:21,520
is going to be adapted by

00:26:17,200 --> 00:26:21,520
kernel maintainers outside of redhead

00:26:22,960 --> 00:26:27,760
so i'll let me answer that um

00:26:30,480 --> 00:26:35,360
let's both answer this one as i as i

00:26:33,520 --> 00:26:37,600
said just a few minutes ago

00:26:35,360 --> 00:26:38,559
we do know that the upstream kernel

00:26:37,600 --> 00:26:41,760
community

00:26:38,559 --> 00:26:46,000
has been looking has been investigating

00:26:41,760 --> 00:26:47,520
uh using a git forge approach

00:26:46,000 --> 00:26:49,840
and what we discovered when we went

00:26:47,520 --> 00:26:51,360
through that those emails and to saw

00:26:49,840 --> 00:26:52,000
some of the discussion on that mailing

00:26:51,360 --> 00:26:55,679
list about

00:26:52,000 --> 00:26:59,279
using a git forge they had a lot of

00:26:55,679 --> 00:27:01,679
problems that we have um

00:26:59,279 --> 00:27:03,440
how do you handle reviews like how do

00:27:01,679 --> 00:27:04,960
you acknowledge reviews how do you

00:27:03,440 --> 00:27:07,520
reject reviews

00:27:04,960 --> 00:27:08,880
uh how do you make comments how do you

00:27:07,520 --> 00:27:11,840
comment on a specific

00:27:08,880 --> 00:27:13,520
command etc we have a lot of the same

00:27:11,840 --> 00:27:16,400
things and what we decided to do

00:27:13,520 --> 00:27:18,240
was maybe step out for once a little bit

00:27:16,400 --> 00:27:20,720
more forward than the upstream community

00:27:18,240 --> 00:27:22,080
solve those problems and now we'll be

00:27:20,720 --> 00:27:23,679
able to go back to them and say well

00:27:22,080 --> 00:27:26,000
this is what we did

00:27:23,679 --> 00:27:26,720
and you have pretty much the identical

00:27:26,000 --> 00:27:29,840
problems we

00:27:26,720 --> 00:27:33,360
we have will they adopt

00:27:29,840 --> 00:27:34,720
git lab per se that's that's a question

00:27:33,360 --> 00:27:38,080
for the upstream community

00:27:34,720 --> 00:27:41,120
i i can't answer uh that will they

00:27:38,080 --> 00:27:43,840
adopt maybe now be more uh

00:27:41,120 --> 00:27:45,279
open to uh adopting a git forage based

00:27:43,840 --> 00:27:47,039
workflow

00:27:45,279 --> 00:27:49,120
yeah that's all right that's definitely

00:27:47,039 --> 00:27:50,960
one of the intentions of this project

00:27:49,120 --> 00:27:53,600
to show them the way i wanted to expand

00:27:50,960 --> 00:27:55,840
on that part of my role is i'm on the

00:27:53,600 --> 00:27:56,960
board of the kernel ci project at linux

00:27:55,840 --> 00:28:00,000
foundation

00:27:56,960 --> 00:28:01,679
and the mission there is to stabilize

00:28:00,000 --> 00:28:03,200
the linux kernel linux stable in

00:28:01,679 --> 00:28:05,520
particular

00:28:03,200 --> 00:28:06,240
and we're trying to do is we're trying

00:28:05,520 --> 00:28:08,640
to get

00:28:06,240 --> 00:28:09,520
the upstream maintainers on board with

00:28:08,640 --> 00:28:11,600
using ci

00:28:09,520 --> 00:28:12,720
systems either the red hat one or if

00:28:11,600 --> 00:28:15,600
there's 10 other

00:28:12,720 --> 00:28:16,000
10 other systems out there and try to

00:28:15,600 --> 00:28:19,520
use them

00:28:16,000 --> 00:28:21,840
to gate their commits

00:28:19,520 --> 00:28:23,120
going before they propagate up the lane

00:28:21,840 --> 00:28:24,880
as tree

00:28:23,120 --> 00:28:26,720
and so the the question that the

00:28:24,880 --> 00:28:28,799
struggles they have there is how do they

00:28:26,720 --> 00:28:30,559
negate all the changes there and we we

00:28:28,799 --> 00:28:32,640
develop technologies uh there's a talk

00:28:30,559 --> 00:28:34,320
about kcidb by nikolai

00:28:32,640 --> 00:28:36,240
uh that talks about what we're doing

00:28:34,320 --> 00:28:38,240
there but you start to think about

00:28:36,240 --> 00:28:39,760
these maintainers is that how do they

00:28:38,240 --> 00:28:40,960
really start structuring all this stuff

00:28:39,760 --> 00:28:42,880
it's like prior says like

00:28:40,960 --> 00:28:44,559
do you want to you start tying in ci

00:28:42,880 --> 00:28:46,559
systems we went down that path with an

00:28:44,559 --> 00:28:48,080
email-based ci system reviews

00:28:46,559 --> 00:28:50,320
and you still have to manually triage

00:28:48,080 --> 00:28:51,600
and coordinate everything

00:28:50,320 --> 00:28:53,600
is there a way to integrate that and

00:28:51,600 --> 00:28:53,919
make it a faster and smoother process

00:28:53,600 --> 00:28:56,559
and

00:28:53,919 --> 00:28:58,399
we want to show these maintainers that

00:28:56,559 --> 00:28:59,200
we did that we're doing that with git

00:28:58,399 --> 00:29:01,440
lab

00:28:59,200 --> 00:29:02,960
and they should you know look at that

00:29:01,440 --> 00:29:04,480
and there's various upstream communities

00:29:02,960 --> 00:29:05,760
that do that there's a drm is is a

00:29:04,480 --> 00:29:07,120
popular choice they they're they're

00:29:05,760 --> 00:29:08,559
exploring gitlab and

00:29:07,120 --> 00:29:10,399
using that successfully in their

00:29:08,559 --> 00:29:12,240
workflow so

00:29:10,399 --> 00:29:13,840
that's the point of these these this

00:29:12,240 --> 00:29:14,960
effort here is to show these sub

00:29:13,840 --> 00:29:18,159
maintainers that there's

00:29:14,960 --> 00:29:20,000
there's opportunities for moving forward

00:29:18,159 --> 00:29:21,520
patchwork came along years ago and that

00:29:20,000 --> 00:29:23,279
was a great step for

00:29:21,520 --> 00:29:25,360
these maintainers organizing their stuff

00:29:23,279 --> 00:29:26,799
and now we're at another point

00:29:25,360 --> 00:29:28,399
an inflection point saying hey you know

00:29:26,799 --> 00:29:30,320
what maybe it's time to take another

00:29:28,399 --> 00:29:30,880
step forward to either github or git lab

00:29:30,320 --> 00:29:33,200
or another

00:29:30,880 --> 00:29:35,279
source forge that really truly starts to

00:29:33,200 --> 00:29:41,840
integrate some of these ci cd

00:29:35,279 --> 00:29:41,840

YouTube URL: https://www.youtube.com/watch?v=O9YRiXMskjU


