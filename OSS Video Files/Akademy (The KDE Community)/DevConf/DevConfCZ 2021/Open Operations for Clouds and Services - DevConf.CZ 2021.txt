Title: Open Operations for Clouds and Services - DevConf.CZ 2021
Publication date: 2021-03-15
Playlist: DevConfCZ 2021
Description: 
	Speakers: Stef Walter, Tomas Tomecek, Marcel Hild
Moderator: Radek Vokal

Open Source has become the defining way of developing software. If open source made software great, how do we “open source” a software service or the operations of the cloud?
You may be thinking: “Wait a second - all my source code is shared right here. Of course, it’s open!”
Open means, getting involved in the community is easy. Open Source is powered by a simple function: Converting a small percentage of users into contributors.

For Operations this means all data is accessible: issues, tickets, metrics. We coined the term “Operate First” for this. We want to run the software in an operational context, by the group that develops the software.
For Software as a Service we must combine several existing DevOps, SRE and deployment principles to function as a true Open Source contribution model.

In this interactive panel discussion, we will explore what challenges are ahead, how to apply lessons learned from an Open Source culture and some concrete examples how this journey already started within the Packit and OpenDataHub community.

If you'd like to get a glimpse of what this session is going to be about, you can read panelists' blog posts:

https://www.operate-first.cloud/how-to-open-source-cloud-operations.md
http://stef.thewalter.net/open-source-services.html
https://blog.tomecek.net/post/open-service-as-a-service-in-practice/

Schedule: https://sched.co/gmXX
Captions: 
	00:00:00,560 --> 00:00:03,439
so let me first introduce our keynote

00:00:02,800 --> 00:00:06,640
speakers

00:00:03,439 --> 00:00:08,639
uh our very first person is martial hilt

00:00:06,640 --> 00:00:09,920
uh the guy with the headset or without

00:00:08,639 --> 00:00:12,480
the headset now

00:00:09,920 --> 00:00:13,200
uh martha is an open source enthusiast

00:00:12,480 --> 00:00:15,040
he's been

00:00:13,200 --> 00:00:17,359
uh in the open source communities for

00:00:15,040 --> 00:00:18,160
some time already but his favorite topic

00:00:17,359 --> 00:00:20,640
in the last

00:00:18,160 --> 00:00:22,640
a decade already is talking about ai ops

00:00:20,640 --> 00:00:25,840
and ai and machine learning

00:00:22,640 --> 00:00:28,640
uh of course martial today is working at

00:00:25,840 --> 00:00:30,960
red hat with an office of cto cto is the

00:00:28,640 --> 00:00:32,399
incubator for us for new technologies

00:00:30,960 --> 00:00:34,559
and new types of things

00:00:32,399 --> 00:00:36,399
so he's always excited and exploring new

00:00:34,559 --> 00:00:38,879
open source technologies

00:00:36,399 --> 00:00:40,960
then we have steph here uh steph i know

00:00:38,879 --> 00:00:42,640
you for some time as well already

00:00:40,960 --> 00:00:45,600
you've been winning the open source

00:00:42,640 --> 00:00:47,120
community for 20 years and plus already

00:00:45,600 --> 00:00:49,200
and you've been involved in many

00:00:47,120 --> 00:00:51,199
different upstream projects

00:00:49,200 --> 00:00:52,800
but your passion is to make sure that

00:00:51,199 --> 00:00:54,559
different upstream projects actually

00:00:52,800 --> 00:00:55,360
work with each other and that we have a

00:00:54,559 --> 00:00:58,399
healthy

00:00:55,360 --> 00:01:00,239
ecosystem of great linux components and

00:00:58,399 --> 00:01:03,039
that's what i like about you

00:01:00,239 --> 00:01:03,920
and then we have tomas tomachek and also

00:01:03,039 --> 00:01:07,439
i know tomasz

00:01:03,920 --> 00:01:09,119
for almost a decade now uh tomasz is a

00:01:07,439 --> 00:01:10,560
great example of a person who approached

00:01:09,119 --> 00:01:12,960
me at one of the deaf cons

00:01:10,560 --> 00:01:14,880
uh nine or eight years ago asking me hey

00:01:12,960 --> 00:01:16,799
radic i love this open source thing how

00:01:14,880 --> 00:01:19,600
can i start participating it

00:01:16,799 --> 00:01:20,640
in it and today tomasz is a principal

00:01:19,600 --> 00:01:22,080
software engineer

00:01:20,640 --> 00:01:24,240
who's working on some of the core

00:01:22,080 --> 00:01:26,560
projects within red hat enterprise linux

00:01:24,240 --> 00:01:28,320
or recently on centos streams

00:01:26,560 --> 00:01:31,119
so again one of the great engineers that

00:01:28,320 --> 00:01:32,880
we have here at red hat

00:01:31,119 --> 00:01:34,560
and today we're going to be talking

00:01:32,880 --> 00:01:35,520
about open source operations and open

00:01:34,560 --> 00:01:38,720
source services

00:01:35,520 --> 00:01:41,759
and uh first i want to ask martial

00:01:38,720 --> 00:01:43,280
what the hell are we talking about

00:01:41,759 --> 00:01:45,600
yeah that's a that's a really good

00:01:43,280 --> 00:01:48,640
question and it starts like

00:01:45,600 --> 00:01:50,640
every fairy tale with once upon a time

00:01:48,640 --> 00:01:53,759
but it's this one is based on a true

00:01:50,640 --> 00:01:56,640
story so once upon a time

00:01:53,759 --> 00:01:56,640
open source

00:01:57,360 --> 00:02:03,600
next slide please open source entered

00:02:01,040 --> 00:02:05,360
the world actually it was code that

00:02:03,600 --> 00:02:08,319
entered the world and code

00:02:05,360 --> 00:02:09,520
was made happy by open source so we

00:02:08,319 --> 00:02:11,360
revolutionized

00:02:09,520 --> 00:02:13,360
the code development how we developed

00:02:11,360 --> 00:02:15,360
software basically and i don't want to

00:02:13,360 --> 00:02:16,959
talk about this part yet because we're

00:02:15,360 --> 00:02:20,080
at devconf everybody should know what's

00:02:16,959 --> 00:02:21,120
why open source and why uh so why

00:02:20,080 --> 00:02:24,160
they're so great to have

00:02:21,120 --> 00:02:26,560
open source communities and we had a lot

00:02:24,160 --> 00:02:28,959
of projects

00:02:26,560 --> 00:02:31,519
spawning and communities evolved and you

00:02:28,959 --> 00:02:34,800
had a healthy competition against

00:02:31,519 --> 00:02:36,239
other and amongst others and some

00:02:34,800 --> 00:02:39,280
companies would differentiate

00:02:36,239 --> 00:02:39,680
on the top of the common code i mean you

00:02:39,280 --> 00:02:42,160
even

00:02:39,680 --> 00:02:43,680
i mean red hat ships open source

00:02:42,160 --> 00:02:46,959
products based on

00:02:43,680 --> 00:02:46,959
open source code

00:02:47,360 --> 00:02:52,800
but the code was the value right so

00:02:50,640 --> 00:02:54,160
code was there to solve the problems you

00:02:52,800 --> 00:02:56,720
would have features

00:02:54,160 --> 00:02:57,920
to differentiate yourself from other

00:02:56,720 --> 00:03:01,360
projects

00:02:57,920 --> 00:03:05,280
and ops more or less was an afterthought

00:03:01,360 --> 00:03:05,920
and then in 2006 or so clouds came along

00:03:05,280 --> 00:03:08,959
and

00:03:05,920 --> 00:03:09,519
and it embraced code and it i mean it

00:03:08,959 --> 00:03:11,440
was

00:03:09,519 --> 00:03:13,440
hugging code really really really

00:03:11,440 --> 00:03:18,080
tightly right and

00:03:13,440 --> 00:03:20,959
and then suddenly ops became important

00:03:18,080 --> 00:03:23,599
so you want to get your code running in

00:03:20,959 --> 00:03:25,280
a reliable fashion because in the end

00:03:23,599 --> 00:03:27,920
if you're not operating if you're not

00:03:25,280 --> 00:03:29,200
available then your business would lose

00:03:27,920 --> 00:03:31,280
money

00:03:29,200 --> 00:03:32,720
so you could not really have outages by

00:03:31,280 --> 00:03:34,239
any means

00:03:32,720 --> 00:03:35,760
i mean we take it really really for

00:03:34,239 --> 00:03:38,799
granted nowadays that

00:03:35,760 --> 00:03:43,519
our phones and the internet always works

00:03:38,799 --> 00:03:45,360
so a new persona emerged it's the

00:03:43,519 --> 00:03:47,599
it's the implementation of the devops

00:03:45,360 --> 00:03:50,560
community it's the service reliability

00:03:47,599 --> 00:03:54,080
engineer the sre persona

00:03:50,560 --> 00:03:58,720
but now is it really balanced so is code

00:03:54,080 --> 00:04:02,080
really as valuable as ops

00:03:58,720 --> 00:04:03,439
so there's this person met essay he's

00:04:02,080 --> 00:04:07,200
working

00:04:03,439 --> 00:04:10,560
at aws for open source

00:04:07,200 --> 00:04:12,400
and he tweeted just recently about this

00:04:10,560 --> 00:04:14,000
story about juggerby the company

00:04:12,400 --> 00:04:16,799
essentially switching

00:04:14,000 --> 00:04:18,160
gears from an open core model where they

00:04:16,799 --> 00:04:21,759
had parts of their code

00:04:18,160 --> 00:04:24,160
not open to open sourcing everything

00:04:21,759 --> 00:04:25,440
right and and he said yeah that that was

00:04:24,160 --> 00:04:28,639
the right decision because

00:04:25,440 --> 00:04:31,759
in in the end the code was not

00:04:28,639 --> 00:04:34,880
the compelling value it was

00:04:31,759 --> 00:04:35,440
um this it was the usage of the software

00:04:34,880 --> 00:04:37,520
so

00:04:35,440 --> 00:04:39,199
if the customer can't use the software

00:04:37,520 --> 00:04:42,800
then it has no value

00:04:39,199 --> 00:04:45,840
so it's really an operationalizing it

00:04:42,800 --> 00:04:50,000
so that the customer can be productive

00:04:45,840 --> 00:04:54,320
so everything is not just the code

00:04:50,000 --> 00:04:56,880
but everything is also the ops platform

00:04:54,320 --> 00:04:58,479
so i would go even one step further and

00:04:56,880 --> 00:05:01,759
say ops is

00:04:58,479 --> 00:05:03,280
even more important and

00:05:01,759 --> 00:05:04,880
kind of by definition it's always

00:05:03,280 --> 00:05:08,639
proprietary i mean we use

00:05:04,880 --> 00:05:10,880
open source tools to run our operations

00:05:08,639 --> 00:05:12,560
for monitoring and stuff like this but

00:05:10,880 --> 00:05:15,199
in the end every

00:05:12,560 --> 00:05:15,680
implementation of a data center of an

00:05:15,199 --> 00:05:18,160
ops

00:05:15,680 --> 00:05:19,199
service of your of your workload that

00:05:18,160 --> 00:05:22,160
you're running

00:05:19,199 --> 00:05:22,800
that's private and the snowflake by

00:05:22,160 --> 00:05:25,120
default

00:05:22,800 --> 00:05:26,080
because of very good reasons because of

00:05:25,120 --> 00:05:28,479
privacy and

00:05:26,080 --> 00:05:30,479
access permission so you can't just let

00:05:28,479 --> 00:05:32,320
everybody access your backend and data

00:05:30,479 --> 00:05:35,919
center that wouldn't make sense

00:05:32,320 --> 00:05:40,240
so my core

00:05:35,919 --> 00:05:40,240
proposition here or my core thesis is

00:05:41,360 --> 00:05:48,400
if the value in i.t is in ops

00:05:45,039 --> 00:05:52,320
and ops are proprietary then open source

00:05:48,400 --> 00:05:55,360
has a problem and

00:05:52,320 --> 00:05:58,639
in the kubernetes community

00:05:55,360 --> 00:06:03,520
we see that movement from um

00:05:58,639 --> 00:06:06,479
where we try to operationalize the

00:06:03,520 --> 00:06:08,240
the the the the knowledge and the

00:06:06,479 --> 00:06:11,759
excellence of

00:06:08,240 --> 00:06:14,400
operators as in the person into

00:06:11,759 --> 00:06:16,319
a bit of code basically codifying

00:06:14,400 --> 00:06:18,160
operational excellence and

00:06:16,319 --> 00:06:19,360
in something that we can ship with the

00:06:18,160 --> 00:06:22,720
product

00:06:19,360 --> 00:06:26,880
go that operators and

00:06:22,720 --> 00:06:28,560
i think if the developers who will

00:06:26,880 --> 00:06:31,600
implement those operators

00:06:28,560 --> 00:06:33,360
and the sre guys who are running in

00:06:31,600 --> 00:06:35,280
these operational issues and are

00:06:33,360 --> 00:06:36,800
basically experiencing what it means to

00:06:35,280 --> 00:06:39,759
operate the software

00:06:36,800 --> 00:06:40,479
if they can't meet and if it's just

00:06:39,759 --> 00:06:43,039
another

00:06:40,479 --> 00:06:44,720
throw by stuff over the wall thing then

00:06:43,039 --> 00:06:46,880
we're really really missing out some

00:06:44,720 --> 00:06:50,080
great opportunities

00:06:46,880 --> 00:06:53,280
so i think what we what we need is a

00:06:50,080 --> 00:06:55,759
cloud installation with full

00:06:53,280 --> 00:06:56,800
visibility into the ops center where you

00:06:55,759 --> 00:06:59,840
can really

00:06:56,800 --> 00:07:03,280
look at everything completely

00:06:59,840 --> 00:07:07,199
transparent down to the stack so that we

00:07:03,280 --> 00:07:08,960
have that collaboration going on

00:07:07,199 --> 00:07:10,240
all right marcel thanks us i see where

00:07:08,960 --> 00:07:12,000
we're heading but

00:07:10,240 --> 00:07:13,599
honestly guys i don't know what the

00:07:12,000 --> 00:07:16,560
solution for the problem is

00:07:13,599 --> 00:07:17,120
steph i'm pretty sure you got something

00:07:16,560 --> 00:07:21,280
so

00:07:17,120 --> 00:07:24,000
so i i guess i'm as i understand marcel

00:07:21,280 --> 00:07:26,479
open sourcing the code is not sufficient

00:07:24,000 --> 00:07:29,039
to make an open source service

00:07:26,479 --> 00:07:31,520
um we see a lot of services that throw

00:07:29,039 --> 00:07:32,960
code over the wall

00:07:31,520 --> 00:07:34,479
some of them are red hat some of them

00:07:32,960 --> 00:07:36,160
are not and share their code but it's

00:07:34,479 --> 00:07:37,680
insufficient to run it it's insufficient

00:07:36,160 --> 00:07:40,720
to contribute it's insufficient to

00:07:37,680 --> 00:07:44,240
actually participate

00:07:40,720 --> 00:07:45,919
but i would say that

00:07:44,240 --> 00:07:48,400
open sourcing your operations whether it

00:07:45,919 --> 00:07:50,800
be via operators or other mechanisms

00:07:48,400 --> 00:07:52,720
is also insufficient to make an open

00:07:50,800 --> 00:07:54,240
source service it's necessary

00:07:52,720 --> 00:07:56,560
so i like that i'm buying what you're

00:07:54,240 --> 00:08:01,840
selling but i think it's in

00:07:56,560 --> 00:08:01,840
uh insufficient and here's why

00:08:01,919 --> 00:08:06,720
so a service that's running is really a

00:08:04,720 --> 00:08:07,199
whole bunch of different interconnected

00:08:06,720 --> 00:08:08,720
things

00:08:07,199 --> 00:08:10,319
i mean source code is there it's very

00:08:08,720 --> 00:08:11,120
prominent both the source code for the

00:08:10,319 --> 00:08:13,919
service itself

00:08:11,120 --> 00:08:15,360
and for operating it but there's a crazy

00:08:13,919 --> 00:08:17,039
amount of other things that contribute

00:08:15,360 --> 00:08:19,280
to the value of the service

00:08:17,039 --> 00:08:20,240
all of these things are really hard to

00:08:19,280 --> 00:08:22,560
replicate

00:08:20,240 --> 00:08:23,680
and all of these things define the

00:08:22,560 --> 00:08:25,440
service itself

00:08:23,680 --> 00:08:26,800
if you have a service perhaps like

00:08:25,440 --> 00:08:28,879
gitlab where

00:08:26,800 --> 00:08:29,919
it's intended for other people to run

00:08:28,879 --> 00:08:31,599
it's a product

00:08:29,919 --> 00:08:33,680
and yes you can run it you can consume

00:08:31,599 --> 00:08:35,599
it as a managed service as well

00:08:33,680 --> 00:08:37,839
then yeah i get it sharing your

00:08:35,599 --> 00:08:40,479
operations might be good enough

00:08:37,839 --> 00:08:41,519
but for most services well-developed

00:08:40,479 --> 00:08:44,880
services

00:08:41,519 --> 00:08:47,680
that doesn't play open source

00:08:44,880 --> 00:08:49,519
thrives because it converts users into

00:08:47,680 --> 00:08:52,399
contributors

00:08:49,519 --> 00:08:53,760
a small small portion of the users of an

00:08:52,399 --> 00:08:56,240
open source project

00:08:53,760 --> 00:08:58,080
become the contributors and that's what

00:08:56,240 --> 00:08:59,040
open source builds off of this is how it

00:08:58,080 --> 00:09:02,399
continues

00:08:59,040 --> 00:09:05,519
conversely open source starves

00:09:02,399 --> 00:09:06,399
when it cannot convert users into

00:09:05,519 --> 00:09:08,959
contributors

00:09:06,399 --> 00:09:10,959
and we see that with services with

00:09:08,959 --> 00:09:13,839
software as a service so much

00:09:10,959 --> 00:09:15,600
that there's there are users who are

00:09:13,839 --> 00:09:18,720
consuming it

00:09:15,600 --> 00:09:20,000
and some of them notice that that hey we

00:09:18,720 --> 00:09:22,720
need a fix

00:09:20,000 --> 00:09:24,320
and then even just figuring out hey can

00:09:22,720 --> 00:09:25,600
i contribute to this thing

00:09:24,320 --> 00:09:26,959
all of a sudden we lose a bunch of

00:09:25,600 --> 00:09:27,760
participants people who would have

00:09:26,959 --> 00:09:29,200
contributed

00:09:27,760 --> 00:09:30,160
here in this diagram we have open source

00:09:29,200 --> 00:09:31,680
software on the left and we have

00:09:30,160 --> 00:09:34,160
software service on the right

00:09:31,680 --> 00:09:36,000
and you can see that even walking

00:09:34,160 --> 00:09:38,160
through the process of a user

00:09:36,000 --> 00:09:39,440
turning into a contributor on typical

00:09:38,160 --> 00:09:41,200
open source software

00:09:39,440 --> 00:09:43,360
there's so many steps where we lose

00:09:41,200 --> 00:09:44,959
people we lose users and a few of them

00:09:43,360 --> 00:09:45,600
filter out and become real contributors

00:09:44,959 --> 00:09:47,200
many of you

00:09:45,600 --> 00:09:48,800
here have gone through some of these

00:09:47,200 --> 00:09:50,320
steps or other obstacles

00:09:48,800 --> 00:09:51,839
but when you look over at the software

00:09:50,320 --> 00:09:53,680
as a service side

00:09:51,839 --> 00:09:55,279
there's no way to overcome any of these

00:09:53,680 --> 00:09:56,320
obstacles and we pretty much lose

00:09:55,279 --> 00:09:58,000
everyone

00:09:56,320 --> 00:10:00,399
and that is the challenge that we're

00:09:58,000 --> 00:10:00,399
facing

00:10:01,200 --> 00:10:04,480
what's more is it's not just about these

00:10:03,360 --> 00:10:07,279
mechanisms here

00:10:04,480 --> 00:10:07,839
and all the obstacles but the users of a

00:10:07,279 --> 00:10:11,279
service

00:10:07,839 --> 00:10:12,240
explicitly chose not to get into the

00:10:11,279 --> 00:10:13,839
operations

00:10:12,240 --> 00:10:15,120
why are they consuming that service in

00:10:13,839 --> 00:10:16,560
the first place why are they using

00:10:15,120 --> 00:10:18,560
software in that way

00:10:16,560 --> 00:10:20,959
because they don't want to operate it so

00:10:18,560 --> 00:10:23,120
if operating is necessary

00:10:20,959 --> 00:10:24,240
uh operating your own copy of it or

00:10:23,120 --> 00:10:27,120
spotting up your own

00:10:24,240 --> 00:10:28,079
instance or all of that kind of forking

00:10:27,120 --> 00:10:30,640
it in some way

00:10:28,079 --> 00:10:32,720
is necessary to contribute we lose them

00:10:30,640 --> 00:10:35,440
right away

00:10:32,720 --> 00:10:37,600
there's an and the other dynamic is that

00:10:35,440 --> 00:10:39,440
as we noted before

00:10:37,600 --> 00:10:41,360
these these two folks here these two

00:10:39,440 --> 00:10:43,040
twins started from the same source code

00:10:41,360 --> 00:10:44,959
the same dna

00:10:43,040 --> 00:10:46,320
and yet they're growing up very quickly

00:10:44,959 --> 00:10:48,000
to be different

00:10:46,320 --> 00:10:49,440
uh people in fact who knows they might

00:10:48,000 --> 00:10:50,800
even be enemies

00:10:49,440 --> 00:10:52,720
at this rate look at what's going on

00:10:50,800 --> 00:10:55,680
here but

00:10:52,720 --> 00:10:56,240
if you fork a service and all of the

00:10:55,680 --> 00:10:57,760
other stuff

00:10:56,240 --> 00:10:59,440
around the source code the

00:10:57,760 --> 00:11:01,519
infrastructure the interconnected

00:10:59,440 --> 00:11:02,959
services the legal agreements the data

00:11:01,519 --> 00:11:05,680
the other users and so on

00:11:02,959 --> 00:11:06,720
essentially your copy of the service is

00:11:05,680 --> 00:11:10,800
a different

00:11:06,720 --> 00:11:12,839
service and so we have to

00:11:10,800 --> 00:11:14,399
overcome this challenge that is service

00:11:12,839 --> 00:11:17,760
itself

00:11:14,399 --> 00:11:20,399
a well-developed uh service is not a

00:11:17,760 --> 00:11:23,760
reproducible thing

00:11:20,399 --> 00:11:26,399
we have to so the

00:11:23,760 --> 00:11:28,560
the threat that's facing us um let's use

00:11:26,399 --> 00:11:31,279
postgres as an example

00:11:28,560 --> 00:11:32,880
on the left we have postgresql which is

00:11:31,279 --> 00:11:34,640
which is one of the

00:11:32,880 --> 00:11:36,399
most awesome communities that i've ever

00:11:34,640 --> 00:11:37,839
contributed to i've only contributed a

00:11:36,399 --> 00:11:39,279
feature and a few fixes

00:11:37,839 --> 00:11:41,760
but not only did they make me feel

00:11:39,279 --> 00:11:43,839
welcome they made me successful

00:11:41,760 --> 00:11:45,440
in contributing and made it

00:11:43,839 --> 00:11:46,959
non-surprising expected

00:11:45,440 --> 00:11:49,680
treated me like a peer and this was

00:11:46,959 --> 00:11:52,880
amazing on the right hand side we have

00:11:49,680 --> 00:11:54,560
amazon rds which runs postgres runs all

00:11:52,880 --> 00:11:55,839
of the operations for you the backups

00:11:54,560 --> 00:11:57,279
the monitoring the scaling the high

00:11:55,839 --> 00:11:59,519
availability

00:11:57,279 --> 00:12:01,279
the infrastructure everything that you

00:11:59,519 --> 00:12:02,639
could possibly need makes it much easier

00:12:01,279 --> 00:12:04,880
to consume postgres

00:12:02,639 --> 00:12:07,440
however if everyone started consuming it

00:12:04,880 --> 00:12:10,320
that way using postgres that way

00:12:07,440 --> 00:12:12,079
the pool of contributors would dry up

00:12:10,320 --> 00:12:13,519
there's no mechanism for people to

00:12:12,079 --> 00:12:16,639
convert from a user

00:12:13,519 --> 00:12:17,760
to a contributor so here's what i would

00:12:16,639 --> 00:12:19,839
say is the challenge

00:12:17,760 --> 00:12:21,760
that we face and the challenge that i

00:12:19,839 --> 00:12:23,440
put before you

00:12:21,760 --> 00:12:25,360
this is the target the goal we need to

00:12:23,440 --> 00:12:29,040
get to is that a user of an

00:12:25,360 --> 00:12:30,800
open source service can discover

00:12:29,040 --> 00:12:32,240
which component of that service which

00:12:30,800 --> 00:12:36,000
microservice for example

00:12:32,240 --> 00:12:36,639
to contribute to can make a nonsensical

00:12:36,000 --> 00:12:38,480
change

00:12:36,639 --> 00:12:39,760
perhaps adding a printf statement or

00:12:38,480 --> 00:12:40,160
changing the spelling of something like

00:12:39,760 --> 00:12:43,040
many

00:12:40,160 --> 00:12:44,720
so many of you have done can then

00:12:43,040 --> 00:12:47,040
experience that change

00:12:44,720 --> 00:12:48,320
when using the existing service when it

00:12:47,040 --> 00:12:50,160
acts on their own data

00:12:48,320 --> 00:12:51,680
or perhaps as operating on their own

00:12:50,160 --> 00:12:54,079
workload and then

00:12:51,680 --> 00:12:57,200
iterate on that change until it's useful

00:12:54,079 --> 00:12:59,360
until they can propose it for merging

00:12:57,200 --> 00:13:01,120
and another part of this is that we the

00:12:59,360 --> 00:13:02,399
communities will form around this and we

00:13:01,120 --> 00:13:04,240
need to enable them

00:13:02,399 --> 00:13:06,000
so that these communities can share

00:13:04,240 --> 00:13:08,959
changes can stabilize

00:13:06,000 --> 00:13:10,480
new behavior and work together on

00:13:08,959 --> 00:13:12,720
certain features before

00:13:10,480 --> 00:13:14,240
every user of the service stabilizes

00:13:12,720 --> 00:13:14,800
those changes we're familiar with that

00:13:14,240 --> 00:13:17,440
here

00:13:14,800 --> 00:13:17,920
we work on fedora we stabilize things

00:13:17,440 --> 00:13:21,839
before

00:13:17,920 --> 00:13:21,839
everyone else gets to them

00:13:21,920 --> 00:13:26,959
so all right steph

00:13:25,120 --> 00:13:28,880
you scared me a bit because this really

00:13:26,959 --> 00:13:30,800
sounds like anyone will be able to

00:13:28,880 --> 00:13:32,639
contribute to my favorite servers and

00:13:30,800 --> 00:13:34,720
take it down and break it

00:13:32,639 --> 00:13:36,240
is this thing even real is it even

00:13:34,720 --> 00:13:39,040
doable to make sure that

00:13:36,240 --> 00:13:40,320
people can contribute to services that

00:13:39,040 --> 00:13:42,000
are just running online

00:13:40,320 --> 00:13:44,320
so much i'm pretty sure you have some

00:13:42,000 --> 00:13:47,600
answer for that

00:13:44,320 --> 00:13:49,440
yeah okay right i'll try to answer that

00:13:47,600 --> 00:13:52,000
so i would like to take you here on a

00:13:49,440 --> 00:13:53,519
journey from the traditional development

00:13:52,000 --> 00:13:55,440
process to the

00:13:53,519 --> 00:13:57,519
ultimate contribution and operation

00:13:55,440 --> 00:14:00,240
workflow so let's start

00:13:57,519 --> 00:14:01,120
with uh like this first stage and i'm

00:14:00,240 --> 00:14:03,040
pretty sure that

00:14:01,120 --> 00:14:04,480
all like all of you are familiar with

00:14:03,040 --> 00:14:06,560
this like this

00:14:04,480 --> 00:14:08,880
well-established open source project

00:14:06,560 --> 00:14:11,199
like in our case open source surveys

00:14:08,880 --> 00:14:12,880
uh there are pull requests flowing in

00:14:11,199 --> 00:14:13,440
there's continuous integration which

00:14:12,880 --> 00:14:16,079
means that

00:14:13,440 --> 00:14:16,720
all the changes are being tested and

00:14:16,079 --> 00:14:19,360
then

00:14:16,720 --> 00:14:19,920
if you want to run your service yourself

00:14:19,360 --> 00:14:22,480
you just

00:14:19,920 --> 00:14:23,760
open readme or like the documentation

00:14:22,480 --> 00:14:25,279
and deploy it locally

00:14:23,760 --> 00:14:27,120
and ideally this would be running in

00:14:25,279 --> 00:14:28,160
containers so that it's really easy to

00:14:27,120 --> 00:14:32,079
do

00:14:28,160 --> 00:14:35,360
like we all know this so if we go to the

00:14:32,079 --> 00:14:36,079
uh step two like the next step would be

00:14:35,360 --> 00:14:39,040
to running

00:14:36,079 --> 00:14:40,880
all the operation tasks like as soon as

00:14:39,040 --> 00:14:41,680
they are merged like either it's code or

00:14:40,880 --> 00:14:44,720
either is

00:14:41,680 --> 00:14:46,720
the operation like playbooks or scripts

00:14:44,720 --> 00:14:48,160
so that we would have addition like

00:14:46,720 --> 00:14:50,160
another deployment

00:14:48,160 --> 00:14:51,920
in our case this would be stage so on

00:14:50,160 --> 00:14:53,920
the left side we have the production

00:14:51,920 --> 00:14:54,639
service where which is generating us

00:14:53,920 --> 00:14:56,800
money

00:14:54,639 --> 00:14:58,160
and that's what users are using but at

00:14:56,800 --> 00:14:59,199
the same time we would have stage where

00:14:58,160 --> 00:15:02,399
we would have the

00:14:59,199 --> 00:15:05,440
all the latest code available and

00:15:02,399 --> 00:15:07,600
again this is pretty common and pretty

00:15:05,440 --> 00:15:09,040
like everyone knows this so let's go

00:15:07,600 --> 00:15:11,600
number three

00:15:09,040 --> 00:15:13,600
and number three like the biggest

00:15:11,600 --> 00:15:16,160
difference between two and three

00:15:13,600 --> 00:15:18,320
is that in two there was no traffic for

00:15:16,160 --> 00:15:20,959
stage like we would just make sure that

00:15:18,320 --> 00:15:23,120
like our latest code is good but in

00:15:20,959 --> 00:15:24,000
three we actually want to expose stage

00:15:23,120 --> 00:15:25,839
to

00:15:24,000 --> 00:15:27,120
users in this case that would be

00:15:25,839 --> 00:15:29,199
probably contributors

00:15:27,120 --> 00:15:30,399
so here you can see that our customers

00:15:29,199 --> 00:15:32,000
are using using the

00:15:30,399 --> 00:15:34,480
production deployment which is like

00:15:32,000 --> 00:15:36,240
stable and scalable secure

00:15:34,480 --> 00:15:38,480
but we also have this stage which is

00:15:36,240 --> 00:15:41,279
different probably not so secure

00:15:38,480 --> 00:15:42,480
and hopefully matching production but

00:15:41,279 --> 00:15:44,959
maybe not

00:15:42,480 --> 00:15:47,120
and that's where the value is like our

00:15:44,959 --> 00:15:48,639
contributors if they use stage like we

00:15:47,120 --> 00:15:49,360
are getting it on the feedback like if

00:15:48,639 --> 00:15:51,440
it works

00:15:49,360 --> 00:15:52,720
like if it breaks for different uh

00:15:51,440 --> 00:15:54,560
circumstances

00:15:52,720 --> 00:15:56,079
and we probably don't want to expose

00:15:54,560 --> 00:15:59,600
this to the customers

00:15:56,079 --> 00:16:01,759
and like get them yell at us and

00:15:59,600 --> 00:16:03,600
at the same time we want contributors to

00:16:01,759 --> 00:16:06,000
still use production like so

00:16:03,600 --> 00:16:07,600
it's really up to them to pick like what

00:16:06,000 --> 00:16:10,240
they want to choose

00:16:07,600 --> 00:16:11,600
and that's a manual step to be honest so

00:16:10,240 --> 00:16:14,000
here in number four

00:16:11,600 --> 00:16:16,160
we would like to introduce a new thing

00:16:14,000 --> 00:16:19,440
like a

00:16:16,160 --> 00:16:20,560
router or proxy which would be the

00:16:19,440 --> 00:16:22,320
unified point

00:16:20,560 --> 00:16:24,880
for everyone to interact with our

00:16:22,320 --> 00:16:28,480
service like whatever deployment it is

00:16:24,880 --> 00:16:30,639
like this router would route the traffic

00:16:28,480 --> 00:16:32,399
to the appropriate deployment so that

00:16:30,639 --> 00:16:33,839
for example our contributors would still

00:16:32,399 --> 00:16:35,360
be able to use stage

00:16:33,839 --> 00:16:37,920
and customers would be exposed to

00:16:35,360 --> 00:16:39,839
production and if we wanted we could

00:16:37,920 --> 00:16:42,320
start routing some other production

00:16:39,839 --> 00:16:44,800
traffic to stage and make sure

00:16:42,320 --> 00:16:45,920
that our customers like it works for

00:16:44,800 --> 00:16:47,519
them and

00:16:45,920 --> 00:16:49,839
and stage actually works with their

00:16:47,519 --> 00:16:52,720
workloads

00:16:49,839 --> 00:16:54,639
if we got here i mean we can even go

00:16:52,720 --> 00:16:57,360
like some like infinite right

00:16:54,639 --> 00:16:58,160
we can create as many environments as

00:16:57,360 --> 00:17:00,240
possible

00:16:58,160 --> 00:17:02,480
and test features as they are being

00:17:00,240 --> 00:17:03,279
developed so let's say that i'm going to

00:17:02,480 --> 00:17:06,319
work on my

00:17:03,279 --> 00:17:08,799
mega feature and

00:17:06,319 --> 00:17:11,120
i won't have it deployed and i want all

00:17:08,799 --> 00:17:13,039
my contributors or like all my teammates

00:17:11,120 --> 00:17:15,600
to try it as soon as possible

00:17:13,039 --> 00:17:17,760
and this way if we have the traffic

00:17:15,600 --> 00:17:19,199
router automated like it should be very

00:17:17,760 --> 00:17:20,799
easy to set up

00:17:19,199 --> 00:17:22,640
and if you look at this picture you

00:17:20,799 --> 00:17:23,600
might be asking like what's with the

00:17:22,640 --> 00:17:26,160
kittens

00:17:23,600 --> 00:17:28,400
and what steph said like said that we

00:17:26,160 --> 00:17:31,120
would like to turn users to contributors

00:17:28,400 --> 00:17:32,720
and i'd like to step it like go one way

00:17:31,120 --> 00:17:34,720
further and i like to turn

00:17:32,720 --> 00:17:36,960
our users and customers into cute

00:17:34,720 --> 00:17:39,440
kittens

00:17:36,960 --> 00:17:41,919
and this is number five like this is

00:17:39,440 --> 00:17:44,880
what i personally call the unlimited

00:17:41,919 --> 00:17:46,320
contributor and operation workflow well

00:17:44,880 --> 00:17:49,039
you are able to

00:17:46,320 --> 00:17:49,679
very like iterate on your service very

00:17:49,039 --> 00:17:51,919
well

00:17:49,679 --> 00:17:54,160
deployed you have automated most of the

00:17:51,919 --> 00:17:56,400
tasks and it's very easy for

00:17:54,160 --> 00:17:58,960
people or for the community to try

00:17:56,400 --> 00:18:01,600
changes as they are being developed

00:17:58,960 --> 00:18:03,120
and here we would like to invite you to

00:18:01,600 --> 00:18:05,679
work on this

00:18:03,120 --> 00:18:07,360
uh like work on this with us because not

00:18:05,679 --> 00:18:07,760
everything is solved like number six

00:18:07,360 --> 00:18:09,440
what's

00:18:07,760 --> 00:18:10,960
what's the step number six like how do

00:18:09,440 --> 00:18:12,960
we treat data

00:18:10,960 --> 00:18:14,559
which is maybe like embargo customer

00:18:12,960 --> 00:18:17,760
data how do we treat

00:18:14,559 --> 00:18:19,440
uh the security or even like what uh

00:18:17,760 --> 00:18:21,760
radix said in the beginning how do we

00:18:19,440 --> 00:18:24,559
make sure that production doesn't break

00:18:21,760 --> 00:18:26,320
and that's that's what we are trying to

00:18:24,559 --> 00:18:28,080
figure out and we'll have links for you

00:18:26,320 --> 00:18:29,760
in the end of the presentation

00:18:28,080 --> 00:18:31,440
and in the in the meantime i'd like to

00:18:29,760 --> 00:18:34,480
show you some examples

00:18:31,440 --> 00:18:36,000
yeah tonight i like all this but uh

00:18:34,480 --> 00:18:37,600
give me some real projects where this

00:18:36,000 --> 00:18:39,679
actually works or there are some

00:18:37,600 --> 00:18:42,480
snippets where it's already working

00:18:39,679 --> 00:18:43,200
oh okay yeah yeah okay let's go for it

00:18:42,480 --> 00:18:46,480
so

00:18:43,200 --> 00:18:49,200
in in first example like here we have a

00:18:46,480 --> 00:18:51,679
screenshot of a pull request and you can

00:18:49,200 --> 00:18:55,120
see that the maintainers of the project

00:18:51,679 --> 00:18:57,520
are able to request a testing version of

00:18:55,120 --> 00:19:00,559
the project and then there is a

00:18:57,520 --> 00:19:03,039
bot which is which deploys the change

00:19:00,559 --> 00:19:04,720
like somewhere and makes it available

00:19:03,039 --> 00:19:05,360
and this is exactly what we are looking

00:19:04,720 --> 00:19:07,440
for with

00:19:05,360 --> 00:19:09,360
what with these open source services

00:19:07,440 --> 00:19:11,520
that i as a maintainer can

00:19:09,360 --> 00:19:14,000
request it to be level uh deployed and

00:19:11,520 --> 00:19:16,480
then i can interact with the service and

00:19:14,000 --> 00:19:17,600
and try to change myself or like anyone

00:19:16,480 --> 00:19:19,600
in the community like

00:19:17,600 --> 00:19:21,600
this is the perfect example what we are

00:19:19,600 --> 00:19:23,440
aiming for and you can do this

00:19:21,600 --> 00:19:24,960
like this is for example cockpit podman

00:19:23,440 --> 00:19:25,440
you can do it with other projects like

00:19:24,960 --> 00:19:29,120
okd

00:19:25,440 --> 00:19:29,679
or kubernetes as well and on the next

00:19:29,120 --> 00:19:31,600
slide

00:19:29,679 --> 00:19:34,000
uh i i wanted to show you how we are

00:19:31,600 --> 00:19:35,840
doing it in our project in packet

00:19:34,000 --> 00:19:38,559
like our project has many features and

00:19:35,840 --> 00:19:40,880
other features is that it's a github app

00:19:38,559 --> 00:19:42,160
and we have two separate deployments and

00:19:40,880 --> 00:19:44,480
up to our users to

00:19:42,160 --> 00:19:46,160
pick like if they want to be on the one

00:19:44,480 --> 00:19:47,280
which is latest which sometimes might be

00:19:46,160 --> 00:19:49,280
not so stable

00:19:47,280 --> 00:19:51,120
or if they want to be on production

00:19:49,280 --> 00:19:53,120
which is stable and that's

00:19:51,120 --> 00:19:55,440
like that's the main thing and then just

00:19:53,120 --> 00:19:56,160
pick it by like picking different github

00:19:55,440 --> 00:19:58,000
apps

00:19:56,160 --> 00:19:59,520
and you can see that we don't have the

00:19:58,000 --> 00:20:01,520
router thing here because

00:19:59,520 --> 00:20:03,440
users still need to opt for the specific

00:20:01,520 --> 00:20:04,880
version and if we had the router there

00:20:03,440 --> 00:20:06,000
would be just one and we would have some

00:20:04,880 --> 00:20:09,120
different logic to do

00:20:06,000 --> 00:20:11,440
it and in my final example

00:20:09,120 --> 00:20:13,679
uh this is open data hub and i would say

00:20:11,440 --> 00:20:17,120
this is an excellent example of the

00:20:13,679 --> 00:20:18,320
like stage one that you can contribute

00:20:17,120 --> 00:20:21,520
like changes to their

00:20:18,320 --> 00:20:23,600
container images or to the manifest how

00:20:21,520 --> 00:20:25,600
they are being deployed in openshift

00:20:23,600 --> 00:20:28,159
and you don't need to know how to deploy

00:20:25,600 --> 00:20:28,720
them uh the ci system will take care of

00:20:28,159 --> 00:20:31,679
it

00:20:28,720 --> 00:20:33,280
uh but there is no way to like perceive

00:20:31,679 --> 00:20:35,120
your changes like you still need to

00:20:33,280 --> 00:20:35,600
deploy it locally if you want to test it

00:20:35,120 --> 00:20:39,200
out

00:20:35,600 --> 00:20:40,890
but the contribution workflow allows you

00:20:39,200 --> 00:20:42,400
to like

00:20:40,890 --> 00:20:44,559
[Music]

00:20:42,400 --> 00:20:48,960
so that it's tested for you you don't

00:20:44,559 --> 00:20:51,440
need to know how to do it

00:20:48,960 --> 00:20:53,440
all right great tamashii thank you this

00:20:51,440 --> 00:20:54,720
this was a lot of interesting stuff i

00:20:53,440 --> 00:20:56,640
have to say

00:20:54,720 --> 00:20:58,880
and i'm pretty sure there are some

00:20:56,640 --> 00:20:59,600
questions on the audience so guys if you

00:20:58,880 --> 00:21:02,320
want to ask

00:20:59,600 --> 00:21:04,320
something right now uh please use one of

00:21:02,320 --> 00:21:04,960
the chats the the stage chat here and

00:21:04,320 --> 00:21:07,840
hop in

00:21:04,960 --> 00:21:08,880
or or ask through the q and a section

00:21:07,840 --> 00:21:11,360
before you do so

00:21:08,880 --> 00:21:12,640
i've already collected some uh questions

00:21:11,360 --> 00:21:15,679
from our twitter and

00:21:12,640 --> 00:21:16,960
and from our discord chat so i'm going

00:21:15,679 --> 00:21:19,520
to ask a few of those

00:21:16,960 --> 00:21:20,559
here right away one thing that i'm

00:21:19,520 --> 00:21:23,440
really worried about

00:21:20,559 --> 00:21:25,039
is data privacy and user data how do we

00:21:23,440 --> 00:21:27,440
ensure that

00:21:25,039 --> 00:21:29,120
the data are not leaking from some of

00:21:27,440 --> 00:21:29,840
these services or how do we make sure

00:21:29,120 --> 00:21:31,520
that

00:21:29,840 --> 00:21:33,600
for these stage environments i can use

00:21:31,520 --> 00:21:36,400
the same data as i would use for the

00:21:33,600 --> 00:21:39,840
production environment

00:21:36,400 --> 00:21:41,440
steph um yeah so there's a couple things

00:21:39,840 --> 00:21:42,480
we can use here one of the one of the

00:21:41,440 --> 00:21:44,799
things you'll notice

00:21:42,480 --> 00:21:46,400
when when tomasz went through that is

00:21:44,799 --> 00:21:50,080
many of the techniques

00:21:46,400 --> 00:21:52,480
he shared were existing techniques used

00:21:50,080 --> 00:21:54,320
towards this goal this challenge that he

00:21:52,480 --> 00:21:56,240
wasn't inventing anything new and i

00:21:54,320 --> 00:21:58,320
believe that there's existing techniques

00:21:56,240 --> 00:22:01,760
we can use to solve the data challenge

00:21:58,320 --> 00:22:05,360
one is the fact that in open source

00:22:01,760 --> 00:22:08,000
we regularly run code against our data

00:22:05,360 --> 00:22:08,400
that other people have changed but we do

00:22:08,000 --> 00:22:11,520
have

00:22:08,400 --> 00:22:13,440
a step that happens of review of other

00:22:11,520 --> 00:22:14,960
people vetting that code before it

00:22:13,440 --> 00:22:17,600
touches our data

00:22:14,960 --> 00:22:19,120
so i it's important for us to work on

00:22:17,600 --> 00:22:22,480
this and make sure

00:22:19,120 --> 00:22:23,679
that in the in this contribution model

00:22:22,480 --> 00:22:26,240
to services

00:22:23,679 --> 00:22:27,280
the contributions can only test the data

00:22:26,240 --> 00:22:29,679
of the user

00:22:27,280 --> 00:22:31,600
that they uh originate that it

00:22:29,679 --> 00:22:34,720
originated from

00:22:31,600 --> 00:22:37,440
you'll also see many projects have

00:22:34,720 --> 00:22:39,200
an ok to test flag or some other

00:22:37,440 --> 00:22:41,840
indication in their workflow

00:22:39,200 --> 00:22:43,440
that says they're ready to allow their

00:22:41,840 --> 00:22:45,360
ci infrastructure to run

00:22:43,440 --> 00:22:46,720
on a contribution that means a

00:22:45,360 --> 00:22:48,400
maintainer may have reviewed it

00:22:46,720 --> 00:22:50,640
sufficiently to know it isn't a

00:22:48,400 --> 00:22:52,559
a bitcoin mining bot or some other thing

00:22:50,640 --> 00:22:54,720
that does crazy stuff

00:22:52,559 --> 00:22:56,720
similarly these contributions would

00:22:54,720 --> 00:22:57,679
certainly need a review step of some

00:22:56,720 --> 00:23:00,880
sort before

00:22:57,679 --> 00:23:04,080
a a contributor or even a team member

00:23:00,880 --> 00:23:06,080
we can deploy their code against um real

00:23:04,080 --> 00:23:08,000
data even the user's own data

00:23:06,080 --> 00:23:09,679
so by bringing these kind of techniques

00:23:08,000 --> 00:23:10,080
together i mean there's probably more

00:23:09,679 --> 00:23:12,240
here

00:23:10,080 --> 00:23:13,120
i know that in the sre space there are

00:23:12,240 --> 00:23:14,480
techniques for

00:23:13,120 --> 00:23:16,880
ensuring that only the software can

00:23:14,480 --> 00:23:18,799
touch the data and never the operations

00:23:16,880 --> 00:23:19,440
code for example or other things like

00:23:18,799 --> 00:23:22,080
that

00:23:19,440 --> 00:23:23,919
and we can work together to figure this

00:23:22,080 --> 00:23:25,760
part out it's not completely done

00:23:23,919 --> 00:23:27,039
but i'm pretty confident we can figure

00:23:25,760 --> 00:23:29,679
this out yeah

00:23:27,039 --> 00:23:30,400
and i would add to that that in in

00:23:29,679 --> 00:23:33,840
security

00:23:30,400 --> 00:23:36,559
one one thing

00:23:33,840 --> 00:23:39,039
to solve this challenge never really

00:23:36,559 --> 00:23:42,240
worked security by obscurity

00:23:39,039 --> 00:23:44,159
so instead of just

00:23:42,240 --> 00:23:46,159
don't touching it and making everything

00:23:44,159 --> 00:23:48,080
close i think it's

00:23:46,159 --> 00:23:49,679
it's a it's a real problem and we don't

00:23:48,080 --> 00:23:51,600
have answers to that so

00:23:49,679 --> 00:23:53,840
let's open it up for research there's a

00:23:51,600 --> 00:23:55,039
lot of research going on in data privacy

00:23:53,840 --> 00:23:58,159
data governance

00:23:55,039 --> 00:24:01,279
just because data is also one of my

00:23:58,159 --> 00:24:04,400
main main concerns these days

00:24:01,279 --> 00:24:06,720
data data bias and a lot of

00:24:04,400 --> 00:24:07,760
things are going on there also in the ai

00:24:06,720 --> 00:24:09,760
domain so

00:24:07,760 --> 00:24:11,440
um that's something that needs to be

00:24:09,760 --> 00:24:15,039
actively solved

00:24:11,440 --> 00:24:17,120
and um not only not only in regards to

00:24:15,039 --> 00:24:18,000
data that that you are producing in your

00:24:17,120 --> 00:24:21,600
deployment but also

00:24:18,000 --> 00:24:23,360
in the how we exchange data so there

00:24:21,600 --> 00:24:25,679
i think we are beyond a world where i'm

00:24:23,360 --> 00:24:28,000
just sitting on my pile of data and i'm

00:24:25,679 --> 00:24:28,720
trying to do my best there but i'm also

00:24:28,000 --> 00:24:31,120
i'm also

00:24:28,720 --> 00:24:33,600
working on data that is coming from my

00:24:31,120 --> 00:24:36,240
competitors from my

00:24:33,600 --> 00:24:36,960
from from people that i'm working with

00:24:36,240 --> 00:24:40,559
from my

00:24:36,960 --> 00:24:42,799
customers and such so how do i how do we

00:24:40,559 --> 00:24:45,520
exchange that data and make it still

00:24:42,799 --> 00:24:46,000
secure how do we how do we make it

00:24:45,520 --> 00:24:47,679
private

00:24:46,000 --> 00:24:49,279
i think that's that's one of the main

00:24:47,679 --> 00:24:52,400
challenges um ahead

00:24:49,279 --> 00:24:54,880
and we made that good for

00:24:52,400 --> 00:24:56,960
face recognition voice recognition but

00:24:54,880 --> 00:24:59,120
we really really suck

00:24:56,960 --> 00:25:01,679
at doing this with the data that the

00:24:59,120 --> 00:25:04,400
computers are generating

00:25:01,679 --> 00:25:05,600
so martial i i get that then and i get

00:25:04,400 --> 00:25:07,520
the contribution model for

00:25:05,600 --> 00:25:10,080
services but what about the operational

00:25:07,520 --> 00:25:13,279
side how would we contribute to the

00:25:10,080 --> 00:25:15,279
underlying services that power the whole

00:25:13,279 --> 00:25:17,679
application the whole service

00:25:15,279 --> 00:25:19,360
and are there any specifics for that

00:25:17,679 --> 00:25:22,240
yeah

00:25:19,360 --> 00:25:23,520
so the how is um i think that's pretty

00:25:22,240 --> 00:25:25,200
straightforward we just

00:25:23,520 --> 00:25:27,360
just in air quotes need to replicate

00:25:25,200 --> 00:25:30,159
what we did with software for operations

00:25:27,360 --> 00:25:31,039
and that doesn't exist yet so if i want

00:25:30,159 --> 00:25:34,559
to

00:25:31,039 --> 00:25:34,960
jump into a software project i'm looking

00:25:34,559 --> 00:25:38,159
at

00:25:34,960 --> 00:25:40,880
on github on beginner labels

00:25:38,159 --> 00:25:42,880
issues and i can just contribute there

00:25:40,880 --> 00:25:46,400
how do i get into operations

00:25:42,880 --> 00:25:48,480
i can apply for a job yes but i can

00:25:46,400 --> 00:25:50,159
can i set up a a reproduction

00:25:48,480 --> 00:25:50,960
environment somewhere no because there's

00:25:50,159 --> 00:25:53,520
money involved

00:25:50,960 --> 00:25:54,559
so opening this up for a community

00:25:53,520 --> 00:25:57,840
approach where

00:25:54,559 --> 00:26:00,880
people are can actively contribute

00:25:57,840 --> 00:26:03,120
to running services running productions

00:26:00,880 --> 00:26:05,679
i think that's critical for also for the

00:26:03,120 --> 00:26:07,600
educational piece for growing new talent

00:26:05,679 --> 00:26:11,120
that is willing to go into that sre

00:26:07,600 --> 00:26:13,520
route obviously you still will have

00:26:11,120 --> 00:26:14,960
some deployments that you can't

00:26:13,520 --> 00:26:17,440
completely open up so

00:26:14,960 --> 00:26:18,400
i would say there's there's a um there's

00:26:17,440 --> 00:26:21,279
a

00:26:18,400 --> 00:26:23,039
sort of an open cloud that is running

00:26:21,279 --> 00:26:25,520
workloads that are not super mission

00:26:23,039 --> 00:26:28,240
critical where we can

00:26:25,520 --> 00:26:29,279
reduce the slas and we can break things

00:26:28,240 --> 00:26:31,919
and we can

00:26:29,279 --> 00:26:32,640
get postgresql developers running and

00:26:31,919 --> 00:26:35,919
production

00:26:32,640 --> 00:26:39,200
great service of their postgresql

00:26:35,919 --> 00:26:41,200
database always with a caveat that it

00:26:39,200 --> 00:26:44,159
might go down that you shouldn't

00:26:41,200 --> 00:26:44,799
be storing um private data in there that

00:26:44,159 --> 00:26:47,600
you

00:26:44,799 --> 00:26:48,159
that you could could lose right but then

00:26:47,600 --> 00:26:50,559
then

00:26:48,159 --> 00:26:52,320
building on top of this operational

00:26:50,559 --> 00:26:52,640
excellence that's captured there we can

00:26:52,320 --> 00:26:56,480
ship

00:26:52,640 --> 00:26:58,480
a baseline to the

00:26:56,480 --> 00:27:00,240
actual production crate running

00:26:58,480 --> 00:27:03,279
postgresql databases

00:27:00,240 --> 00:27:07,200
and train on that data and train

00:27:03,279 --> 00:27:09,279
really really um yeah turn it into code

00:27:07,200 --> 00:27:11,840
so that's that's the that's the business

00:27:09,279 --> 00:27:11,840
side of it

00:27:12,960 --> 00:27:19,679
great um question for tomas probably

00:27:17,279 --> 00:27:21,279
uh do you see any other services that

00:27:19,679 --> 00:27:23,679
would benefit from this

00:27:21,279 --> 00:27:25,440
approach you gave us some examples where

00:27:23,679 --> 00:27:28,320
pieces of this already work but

00:27:25,440 --> 00:27:30,320
what other things would be the next step

00:27:28,320 --> 00:27:33,039
for you

00:27:30,320 --> 00:27:35,840
well all of them i mean ratku will tell

00:27:33,039 --> 00:27:35,840
me

00:27:36,480 --> 00:27:43,679
i would love to have my gitlab running

00:27:39,840 --> 00:27:45,840
how would i do that well

00:27:43,679 --> 00:27:46,960
i would say first the gitlab as the

00:27:45,840 --> 00:27:49,279
upstream project would

00:27:46,960 --> 00:27:50,559
start need to participating like would

00:27:49,279 --> 00:27:52,559
need to enable

00:27:50,559 --> 00:27:54,240
this kind of contribution workflow that

00:27:52,559 --> 00:27:56,880
you contribute to gitlab

00:27:54,240 --> 00:27:58,640
and then you are able to experience it

00:27:56,880 --> 00:27:59,679
let's say one hour later when it gets

00:27:58,640 --> 00:28:02,399
deployed and

00:27:59,679 --> 00:28:02,799
there is a bot in your merch request

00:28:02,399 --> 00:28:05,200
would

00:28:02,799 --> 00:28:05,840
give you a link like how you can try the

00:28:05,200 --> 00:28:09,760
uh

00:28:05,840 --> 00:28:13,279
change out but i mean if we were at

00:28:09,760 --> 00:28:15,440
real dev conflict inside the uh

00:28:13,279 --> 00:28:17,200
inside the chateau i would actually ask

00:28:15,440 --> 00:28:19,919
the question to the audience like

00:28:17,200 --> 00:28:20,640
what what services you would like to see

00:28:19,919 --> 00:28:22,399
that

00:28:20,640 --> 00:28:24,240
they would use this kind of contribution

00:28:22,399 --> 00:28:25,600
and operation model

00:28:24,240 --> 00:28:28,080
yeah what services would you like to

00:28:25,600 --> 00:28:31,279
contribute to put it in the chat

00:28:28,080 --> 00:28:32,240
but i will say gitlab is already pretty

00:28:31,279 --> 00:28:34,240
far along on

00:28:32,240 --> 00:28:36,000
enabling contributions i mean obviously

00:28:34,240 --> 00:28:38,000
they've doubled down on making sure that

00:28:36,000 --> 00:28:39,679
you're able to run your own

00:28:38,000 --> 00:28:41,520
instance which is called the gitlab

00:28:39,679 --> 00:28:43,919
development kit i think

00:28:41,520 --> 00:28:45,200
and it's it's fun to get started with do

00:28:43,919 --> 00:28:46,720
it in a vm because it

00:28:45,200 --> 00:28:48,559
does all sorts of crazy stuff to your

00:28:46,720 --> 00:28:50,799
system

00:28:48,559 --> 00:28:51,600
but also they have a staging environment

00:28:50,799 --> 00:28:53,679
where

00:28:51,600 --> 00:28:55,279
recent merge requests before they're

00:28:53,679 --> 00:28:57,200
deployed to everyone get launched and

00:28:55,279 --> 00:28:58,480
you can go to a specific url and

00:28:57,200 --> 00:29:00,240
experience those

00:28:58,480 --> 00:29:01,840
so they're not all the way over where

00:29:00,240 --> 00:29:03,520
people would experience a change

00:29:01,840 --> 00:29:06,880
necessarily before it's merged

00:29:03,520 --> 00:29:08,960
in the hosted service but you know

00:29:06,880 --> 00:29:10,080
as far as as far as services walking

00:29:08,960 --> 00:29:12,159
down this road

00:29:10,080 --> 00:29:14,320
they have taken those initial steps and

00:29:12,159 --> 00:29:16,559
do have quite a few contributions

00:29:14,320 --> 00:29:18,240
um even even when you look at the

00:29:16,559 --> 00:29:20,320
numbers in the data

00:29:18,240 --> 00:29:21,840
i would say it's every service that you

00:29:20,320 --> 00:29:24,960
really care about so that's

00:29:21,840 --> 00:29:27,600
um how open source software um

00:29:24,960 --> 00:29:28,320
got big right you're having software and

00:29:27,600 --> 00:29:31,440
something that's

00:29:28,320 --> 00:29:33,600
uh that that bothers you so you

00:29:31,440 --> 00:29:34,720
dive in and you try to fix it you

00:29:33,600 --> 00:29:38,000
contribute because they

00:29:34,720 --> 00:29:40,640
had some itch scratching you so why not

00:29:38,000 --> 00:29:41,440
why not tweet to twitter and say look

00:29:40,640 --> 00:29:44,480
guys

00:29:41,440 --> 00:29:47,360
i'm missing this feature how can i

00:29:44,480 --> 00:29:50,640
contribute to you

00:29:47,360 --> 00:29:52,640
go out and raise your voice

00:29:50,640 --> 00:29:54,080
so you just made me think about one

00:29:52,640 --> 00:29:56,320
thing uh this

00:29:54,080 --> 00:29:58,399
sounds like we're gonna end up with many

00:29:56,320 --> 00:30:00,559
clones of different services

00:29:58,399 --> 00:30:01,520
and my question is is that okay or do we

00:30:00,559 --> 00:30:05,200
want to prevent

00:30:01,520 --> 00:30:05,200
these clones to be spinning up

00:30:05,279 --> 00:30:10,159
i i guess uh we we that same thing will

00:30:08,000 --> 00:30:12,720
apply to applied to open source

00:30:10,159 --> 00:30:13,360
so i guess fundamentally we'd like of

00:30:12,720 --> 00:30:15,679
course

00:30:13,360 --> 00:30:17,440
we i would make the claim that many

00:30:15,679 --> 00:30:19,279
services when you clone them they are no

00:30:17,440 --> 00:30:21,520
longer the same service

00:30:19,279 --> 00:30:23,200
but in such an implementation model like

00:30:21,520 --> 00:30:24,960
tamash said there might be infinite

00:30:23,200 --> 00:30:27,120
behaviors depending on

00:30:24,960 --> 00:30:28,880
on who configures the load balancer to

00:30:27,120 --> 00:30:30,080
to connect to what pull requests in the

00:30:28,880 --> 00:30:32,159
background and so on

00:30:30,080 --> 00:30:33,200
and how do we keep that from getting out

00:30:32,159 --> 00:30:35,440
of control

00:30:33,200 --> 00:30:36,880
well we we do that pretty well in open

00:30:35,440 --> 00:30:39,360
source where

00:30:36,880 --> 00:30:41,360
if you fork or you make a pull request

00:30:39,360 --> 00:30:43,360
of a project or change it

00:30:41,360 --> 00:30:45,200
suddenly you stop getting everyone

00:30:43,360 --> 00:30:46,960
else's contributions

00:30:45,200 --> 00:30:48,559
everyone else's changes and this

00:30:46,960 --> 00:30:51,919
incentivizes you

00:30:48,559 --> 00:30:53,679
to um get your stuff merged if you think

00:30:51,919 --> 00:30:55,279
it's worthwhile because then it becomes

00:30:53,679 --> 00:30:55,919
part of the default behavior of everyone

00:30:55,279 --> 00:30:57,519
and you can

00:30:55,919 --> 00:30:59,120
continue to get this stream of changes

00:30:57,519 --> 00:31:00,640
if you just keep your change to yourself

00:30:59,120 --> 00:31:02,000
and say hey this is good enough for me

00:31:00,640 --> 00:31:03,600
then you give up on the rest of them and

00:31:02,000 --> 00:31:04,240
i think we can apply that same model

00:31:03,600 --> 00:31:06,399
here

00:31:04,240 --> 00:31:08,480
where such an outstanding contribution

00:31:06,399 --> 00:31:10,720
doesn't get everyone else's changes

00:31:08,480 --> 00:31:12,880
um during that time and it incentivizes

00:31:10,720 --> 00:31:15,440
you to complete the work sufficiently

00:31:12,880 --> 00:31:17,120
to bring it uh back together and and

00:31:15,440 --> 00:31:18,640
merge that branch rather than continue

00:31:17,120 --> 00:31:20,720
to have the fork

00:31:18,640 --> 00:31:21,679
and i wouldn't even consider this as a

00:31:20,720 --> 00:31:23,519
bad thing if

00:31:21,679 --> 00:31:24,799
we have multiple instances and flavors

00:31:23,519 --> 00:31:27,919
of your service running

00:31:24,799 --> 00:31:28,799
so the question is why did we in in the

00:31:27,919 --> 00:31:32,159
first place

00:31:28,799 --> 00:31:35,200
strip down the features and say okay

00:31:32,159 --> 00:31:37,679
i'm just serving out the the

00:31:35,200 --> 00:31:39,039
smallest common denominator of features

00:31:37,679 --> 00:31:42,320
to the wide audience

00:31:39,039 --> 00:31:44,640
because i only have a small team who's

00:31:42,320 --> 00:31:46,559
that is capable of running this service

00:31:44,640 --> 00:31:47,679
and we must make sure that it's really

00:31:46,559 --> 00:31:49,519
running reliable

00:31:47,679 --> 00:31:51,600
so if we solve this problem that we can

00:31:49,519 --> 00:31:53,360
really scale out horizontally

00:31:51,600 --> 00:31:54,640
also on the feature level and let

00:31:53,360 --> 00:31:56,559
everybody contribute

00:31:54,640 --> 00:31:58,640
so i wouldn't mind having my own version

00:31:56,559 --> 00:32:02,559
of twitter available with um

00:31:58,640 --> 00:32:04,080
with say um gpg signatures for tweets

00:32:02,559 --> 00:32:05,760
that i can see whether they are coming

00:32:04,080 --> 00:32:07,039
from a bot or not maybe nobody else

00:32:05,760 --> 00:32:10,240
cares about it but i would like

00:32:07,039 --> 00:32:11,360
to see this feature so if twitter would

00:32:10,240 --> 00:32:13,919
be able to

00:32:11,360 --> 00:32:14,559
run different flavors of their service

00:32:13,919 --> 00:32:17,600
without

00:32:14,559 --> 00:32:19,200
being impacted on their commercial model

00:32:17,600 --> 00:32:21,440
i don't think it's necessarily a bad

00:32:19,200 --> 00:32:21,440
thing

00:32:21,919 --> 00:32:25,120
great uh mirror brought up an

00:32:23,919 --> 00:32:27,279
interesting point uh

00:32:25,120 --> 00:32:29,120
in the chat and gitlab is not a really

00:32:27,279 --> 00:32:30,960
good example because it's not a true

00:32:29,120 --> 00:32:32,559
open source project

00:32:30,960 --> 00:32:34,000
and this made the thing about licensing

00:32:32,559 --> 00:32:35,440
have you guys thought about how

00:32:34,000 --> 00:32:38,000
licenses would actually work in this

00:32:35,440 --> 00:32:38,000
ecosystem

00:32:39,279 --> 00:32:45,279
so the i believe the licenses are

00:32:43,120 --> 00:32:47,519
fundamental to sharing the code so

00:32:45,279 --> 00:32:49,360
licenses operate on copyright

00:32:47,519 --> 00:32:51,360
and obviously we need to continue to use

00:32:49,360 --> 00:32:53,120
real open source licenses

00:32:51,360 --> 00:32:55,919
to share both the the source code for

00:32:53,120 --> 00:32:57,600
the service and the operational code

00:32:55,919 --> 00:32:59,840
that is open sourced

00:32:57,600 --> 00:33:01,440
um and so that's a foundational part of

00:32:59,840 --> 00:33:04,720
this open sourcing

00:33:01,440 --> 00:33:06,240
uh the work however by of itself it's

00:33:04,720 --> 00:33:08,840
insufficient to incentivize

00:33:06,240 --> 00:33:12,480
contributions to a service

00:33:08,840 --> 00:33:14,720
yeah i just recently heard that uh

00:33:12,480 --> 00:33:16,240
the license that you choose also depends

00:33:14,720 --> 00:33:19,440
on your business model so

00:33:16,240 --> 00:33:21,039
i'm not really a lawyer and um i usually

00:33:19,440 --> 00:33:22,880
don't care about the license too much

00:33:21,039 --> 00:33:24,080
which is a shame to say here now in the

00:33:22,880 --> 00:33:26,640
public but

00:33:24,080 --> 00:33:28,240
i usually i i usually take code and i

00:33:26,640 --> 00:33:29,840
tweak and tinker with it if i have the

00:33:28,240 --> 00:33:30,799
source code somebody else should care

00:33:29,840 --> 00:33:32,799
about um

00:33:30,799 --> 00:33:34,240
whether the license is okay but that's

00:33:32,799 --> 00:33:36,399
nothing i should say in public

00:33:34,240 --> 00:33:38,159
but it's not only about the source code

00:33:36,399 --> 00:33:40,080
but it's also about the data so

00:33:38,159 --> 00:33:42,240
thinking about the data that is being

00:33:40,080 --> 00:33:44,320
produced from your ops team

00:33:42,240 --> 00:33:46,080
how do we slap a license on this and

00:33:44,320 --> 00:33:48,640
that's the linux foundation just

00:33:46,080 --> 00:33:49,279
came up with a license for data two

00:33:48,640 --> 00:33:52,960
years ago

00:33:49,279 --> 00:33:56,960
lfa from the linux foundation ai so

00:33:52,960 --> 00:33:59,679
also think about how we how you could

00:33:56,960 --> 00:34:00,320
if you run a service put a portion of

00:33:59,679 --> 00:34:02,559
your

00:34:00,320 --> 00:34:03,600
operational data of your services um of

00:34:02,559 --> 00:34:05,760
your in

00:34:03,600 --> 00:34:06,799
tickets and and such under a certain

00:34:05,760 --> 00:34:09,679
license so that it's

00:34:06,799 --> 00:34:12,480
um that's for posterity and for for

00:34:09,679 --> 00:34:12,480
research available

00:34:13,839 --> 00:34:17,119
i just read a comment in the chat from

00:34:15,200 --> 00:34:19,119
rado he's talking about open source

00:34:17,119 --> 00:34:20,800
alternative tips to existing services

00:34:19,119 --> 00:34:21,440
but one thing that made me think here is

00:34:20,800 --> 00:34:23,040
that

00:34:21,440 --> 00:34:25,119
some of these services you're not able

00:34:23,040 --> 00:34:26,800
to run them locally you actually require

00:34:25,119 --> 00:34:30,560
a huge infrastructure to run

00:34:26,800 --> 00:34:32,639
their own how would you make sure that a

00:34:30,560 --> 00:34:34,320
community has access to such

00:34:32,639 --> 00:34:36,560
infrastructure where they can run the

00:34:34,320 --> 00:34:39,679
services i if it's running on the public

00:34:36,560 --> 00:34:41,119
close someone has to pay for it right

00:34:39,679 --> 00:34:43,280
yeah so there's a couple things going on

00:34:41,119 --> 00:34:44,960
here first of all not everything

00:34:43,280 --> 00:34:47,280
i can't run locally everything that

00:34:44,960 --> 00:34:50,560
fedora produces i cannot run

00:34:47,280 --> 00:34:53,679
many of the iot builds i cannot run

00:34:50,560 --> 00:34:55,679
the s390 artifacts and so on open source

00:34:53,679 --> 00:34:57,119
regularly produces things that not

00:34:55,679 --> 00:34:59,520
everyone can run

00:34:57,119 --> 00:35:01,839
so there are barriers i don't have

00:34:59,520 --> 00:35:03,200
access i mean i could get access maybe

00:35:01,839 --> 00:35:04,640
if i figured it out but i don't have

00:35:03,200 --> 00:35:06,800
access to many of the architectures and

00:35:04,640 --> 00:35:11,119
and systems that are necessary to run

00:35:06,800 --> 00:35:12,800
fedora um that said

00:35:11,119 --> 00:35:14,640
as we described making sure that

00:35:12,800 --> 00:35:17,839
everyone can operate your service

00:35:14,640 --> 00:35:20,320
is necessary making sure that you bring

00:35:17,839 --> 00:35:21,119
operators into the code in this case

00:35:20,320 --> 00:35:23,119
we're

00:35:21,119 --> 00:35:24,560
we're kind of hinting at kubernetes and

00:35:23,119 --> 00:35:25,839
openshift operators but there's other

00:35:24,560 --> 00:35:28,960
ways to do this

00:35:25,839 --> 00:35:30,880
and making sure that much of the logic

00:35:28,960 --> 00:35:32,240
much of what's proprietary or much of

00:35:30,880 --> 00:35:35,119
the of the things

00:35:32,240 --> 00:35:36,000
that that ops teams do are encoded in

00:35:35,119 --> 00:35:37,920
code

00:35:36,000 --> 00:35:39,359
that's what marcel was going after in

00:35:37,920 --> 00:35:41,040
the beginning and this really

00:35:39,359 --> 00:35:43,920
opens up the amount of people who are

00:35:41,040 --> 00:35:45,920
able to operate a service

00:35:43,920 --> 00:35:47,680
those people of course in many cases

00:35:45,920 --> 00:35:48,160
will have a slimmed down behavior of the

00:35:47,680 --> 00:35:50,320
service

00:35:48,160 --> 00:35:51,680
why because the service connects to

00:35:50,320 --> 00:35:52,880
other services to do things like

00:35:51,680 --> 00:35:56,240
authentication

00:35:52,880 --> 00:35:58,320
connects to other services in order to

00:35:56,240 --> 00:35:59,520
you know call for a certain function or

00:35:58,320 --> 00:36:02,240
connects elsewhere

00:35:59,520 --> 00:36:04,560
it's an entire constellation really and

00:36:02,240 --> 00:36:07,119
so when if you clone it and run that

00:36:04,560 --> 00:36:08,720
the one service yourself you may be able

00:36:07,119 --> 00:36:10,960
to you get all the code for

00:36:08,720 --> 00:36:12,400
for running it but you're running

00:36:10,960 --> 00:36:12,960
something different than the original

00:36:12,400 --> 00:36:15,359
one so

00:36:12,960 --> 00:36:16,560
in addition to enabling everyone to run

00:36:15,359 --> 00:36:18,880
that themselves

00:36:16,560 --> 00:36:21,040
we also need to enable contributions to

00:36:18,880 --> 00:36:23,040
the service as it stands

00:36:21,040 --> 00:36:25,839
or else we're putting up too high of a

00:36:23,040 --> 00:36:28,880
barrier to contributions

00:36:25,839 --> 00:36:30,960
not i'm not super worried about the um

00:36:28,880 --> 00:36:32,640
about the money factor here if we

00:36:30,960 --> 00:36:36,079
produce something that is

00:36:32,640 --> 00:36:38,160
has value to companies um that can

00:36:36,079 --> 00:36:41,280
monetize on the

00:36:38,160 --> 00:36:44,400
on the on on the community that

00:36:41,280 --> 00:36:45,520
produces great artifacts then they will

00:36:44,400 --> 00:36:48,720
happily throw

00:36:45,520 --> 00:36:50,240
hardware at it remember if if if the

00:36:48,720 --> 00:36:52,000
service is free

00:36:50,240 --> 00:36:53,760
then you are the product and i think

00:36:52,000 --> 00:36:54,400
something similar will probably happen

00:36:53,760 --> 00:36:56,800
with

00:36:54,400 --> 00:36:57,920
some open source services where the

00:36:56,800 --> 00:37:00,640
service is free

00:36:57,920 --> 00:37:01,839
yes and you can tweak and tinker with

00:37:00,640 --> 00:37:04,640
the operations

00:37:01,839 --> 00:37:05,440
but the data that you're producing there

00:37:04,640 --> 00:37:09,359
will be

00:37:05,440 --> 00:37:10,880
used by the community in return to

00:37:09,359 --> 00:37:14,240
create better products

00:37:10,880 --> 00:37:16,640
so that uh companies can sell better

00:37:14,240 --> 00:37:20,720
versions of their products

00:37:16,640 --> 00:37:20,720
it's in in the end it's somebody has to

00:37:20,800 --> 00:37:24,560
make it make something out of the money

00:37:22,880 --> 00:37:26,400
that they're investing there

00:37:24,560 --> 00:37:27,920
and that we should be sure that it works

00:37:26,400 --> 00:37:29,119
with open source software so why

00:37:27,920 --> 00:37:32,240
shouldn't it work with um

00:37:29,119 --> 00:37:34,480
services and operations and

00:37:32,240 --> 00:37:36,160
it actually already works for some if we

00:37:34,480 --> 00:37:38,960
look at how next cloud works

00:37:36,160 --> 00:37:40,720
i mean their product is completely open

00:37:38,960 --> 00:37:43,760
source you can go deploy it

00:37:40,720 --> 00:37:45,520
locally on in your home easily and

00:37:43,760 --> 00:37:51,200
at the same time they're a company and

00:37:45,520 --> 00:37:54,320
they are making money so

00:37:51,200 --> 00:37:58,079
works i'm running out of questions here

00:37:54,320 --> 00:37:58,079
uh so guys do you have stickers

00:37:58,240 --> 00:38:02,839
i would like to talk a little bit more

00:37:59,760 --> 00:38:05,440
about the open core

00:38:02,839 --> 00:38:06,160
aspect um because it's going on in the

00:38:05,440 --> 00:38:08,560
chat

00:38:06,160 --> 00:38:09,359
and it is true that open core is a

00:38:08,560 --> 00:38:11,359
crutch

00:38:09,359 --> 00:38:12,480
um and it's it's unfortunate to see

00:38:11,359 --> 00:38:15,599
certain companies

00:38:12,480 --> 00:38:17,280
uh like get lab or others rely on that

00:38:15,599 --> 00:38:18,960
crutch because they they seem to believe

00:38:17,280 --> 00:38:21,359
that there's no alternative

00:38:18,960 --> 00:38:22,160
i believe that if we truly enabled open

00:38:21,359 --> 00:38:24,800
source on us

00:38:22,160 --> 00:38:26,880
on a service and contributions to that

00:38:24,800 --> 00:38:28,640
service directly

00:38:26,880 --> 00:38:30,560
that there would be such a community

00:38:28,640 --> 00:38:32,079
around it and such a center of gravity

00:38:30,560 --> 00:38:33,920
of people participating

00:38:32,079 --> 00:38:35,599
that you would not need to rely on

00:38:33,920 --> 00:38:38,079
crutches like open core

00:38:35,599 --> 00:38:39,440
in order to sustain it and in order to

00:38:38,079 --> 00:38:42,560
have a business model around

00:38:39,440 --> 00:38:43,760
it obviously this is theoretical and

00:38:42,560 --> 00:38:45,920
unproven

00:38:43,760 --> 00:38:47,359
but it is a conviction that if you if

00:38:45,920 --> 00:38:48,800
you actually

00:38:47,359 --> 00:38:51,040
go all the way with open source you

00:38:48,800 --> 00:38:53,119
start to see all the advantages of it

00:38:51,040 --> 00:38:54,960
and if you go halfway yes there are

00:38:53,119 --> 00:38:56,960
risks that you then mitigate in awkward

00:38:54,960 --> 00:38:58,480
ways such as open core

00:38:56,960 --> 00:39:00,800
but if you actually enable this

00:38:58,480 --> 00:39:01,520
completely you get such an advantage

00:39:00,800 --> 00:39:03,280
from it

00:39:01,520 --> 00:39:05,040
that it is sufficient to outweigh those

00:39:03,280 --> 00:39:07,200
risks and you don't need to rely on

00:39:05,040 --> 00:39:09,359
crutches like open core so let's see

00:39:07,200 --> 00:39:11,920
i think if we pull this off we will see

00:39:09,359 --> 00:39:14,720
a viable alternative to open core

00:39:11,920 --> 00:39:16,480
great we're running out of time so i

00:39:14,720 --> 00:39:17,280
would encourage folks to continue the

00:39:16,480 --> 00:39:20,079
discussion

00:39:17,280 --> 00:39:20,480
either on this court or here on the chat

00:39:20,079 --> 00:39:22,160
uh

00:39:20,480 --> 00:39:23,520
folks it's been really great to have you

00:39:22,160 --> 00:39:27,119
here um

00:39:23,520 --> 00:39:27,119
famous last words from all of you

00:39:27,359 --> 00:39:32,800
yeah so there's one url operate

00:39:30,400 --> 00:39:35,119
first dot cloud that's actually a url

00:39:32,800 --> 00:39:37,680
type it into your browser and you can

00:39:35,119 --> 00:39:39,520
join a community where we operate open

00:39:37,680 --> 00:39:41,920
shift and open data hub in

00:39:39,520 --> 00:39:43,359
a community fashion and the first talk

00:39:41,920 --> 00:39:46,160
just starting now

00:39:43,359 --> 00:39:48,400
shows you how to do this with an ai

00:39:46,160 --> 00:39:50,079
application on data hub

00:39:48,400 --> 00:39:51,680
and we'll go into more details on these

00:39:50,079 --> 00:39:52,880
topics and perhaps have more discussion

00:39:51,680 --> 00:39:56,720
on them tomorrow

00:39:52,880 --> 00:39:57,359
at 2 45 and and your service is not open

00:39:56,720 --> 00:40:00,079
source

00:39:57,359 --> 00:40:02,160
talk and i would encourage you to to

00:40:00,079 --> 00:40:04,640
also click the other link down below

00:40:02,160 --> 00:40:06,720
to look at this challenge some of the

00:40:04,640 --> 00:40:08,560
playbook that tomasz described

00:40:06,720 --> 00:40:12,319
and other ways user stories and other

00:40:08,560 --> 00:40:12,319
ways to uh to participate

00:40:12,640 --> 00:40:15,920
all right steph martial tomasz thanks a

00:40:15,119 --> 00:40:23,280
lot you've been

00:40:15,920 --> 00:40:23,280

YouTube URL: https://www.youtube.com/watch?v=CH4vgihEg6M


