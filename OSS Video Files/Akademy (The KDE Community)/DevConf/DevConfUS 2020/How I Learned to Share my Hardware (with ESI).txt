Title: How I Learned to Share my Hardware (with ESI)
Publication date: 2020-10-07
Playlist: DevConfUS 2020
Description: 
	Speaker: Tzu-Mainn Chen

The Elastic Secure Infrastructure (ESI) project was started by the Mass Open Cloud (MOC) in order to "create a set of services/systems to permit multiple tenants to flexibly allocate bare-metal machines from a pool of available hardware, create networks, attach bare-metal nodes and networks, and to optionally provision an operating system on those systems through the use of an associated provisioning service". As part of this project, ESI has contributed upstream development efforts in Ironic to custom development of a leasing service and has created a CLI to create a bridge in between OpenStack and additional functionality needed by ESI. On this presentation, we will discuss both the challenges and the successes behind these efforts. We will also demonstrate how we're putting all this work together into a flexible hardware sharing architecture - designed specifically for the MOC, but easily adaptable for other needs as well!
Captions: 
	00:00:00,799 --> 00:00:04,720
hi my name is tsuman chen

00:00:03,120 --> 00:00:06,960
and i'm a principal software engineer at

00:00:04,720 --> 00:00:08,800
red hat for the past year or so

00:00:06,960 --> 00:00:10,000
i've been working on the elastic secure

00:00:08,800 --> 00:00:12,000
infrastructure project

00:00:10,000 --> 00:00:13,599
or esi along with other red hat

00:00:12,000 --> 00:00:17,760
engineers as well as people from the

00:00:13,599 --> 00:00:20,800
massachusetts open cloud or mlc

00:00:17,760 --> 00:00:22,640
so what is zsi doing well for my readme

00:00:20,800 --> 00:00:24,640
we want to create a set of services to

00:00:22,640 --> 00:00:26,240
permit multiple tenants to flexibly

00:00:24,640 --> 00:00:28,480
allocate bare metal machines

00:00:26,240 --> 00:00:29,279
from a pool of available hardware create

00:00:28,480 --> 00:00:31,199
networks

00:00:29,279 --> 00:00:32,640
attach bare middle nodes and networks

00:00:31,199 --> 00:00:35,920
and to optionally provision

00:00:32,640 --> 00:00:38,160
an operating system on those systems

00:00:35,920 --> 00:00:40,000
one key thing to note is that esi does

00:00:38,160 --> 00:00:41,040
not compel users to a specific service

00:00:40,000 --> 00:00:42,879
architecture

00:00:41,040 --> 00:00:44,960
you can put the pieces together yourself

00:00:42,879 --> 00:00:47,600
to support your own architectures and

00:00:44,960 --> 00:00:47,600
project goals

00:00:48,399 --> 00:00:52,320
that's your goal but what is esi

00:00:50,079 --> 00:00:54,320
actually doing to explain that

00:00:52,320 --> 00:00:55,680
i like to think of esi as more of an

00:00:54,320 --> 00:00:57,840
enablement initiative

00:00:55,680 --> 00:00:59,840
that aims to fill the gaps in openstack

00:00:57,840 --> 00:01:02,160
in order to fulfill its goals

00:00:59,840 --> 00:01:03,760
so we'll work upstream with established

00:01:02,160 --> 00:01:04,479
openstack projects to expand feature

00:01:03,760 --> 00:01:06,640
sets

00:01:04,479 --> 00:01:08,240
we'll write custom code where needed and

00:01:06,640 --> 00:01:10,960
will provide guidance and support to

00:01:08,240 --> 00:01:12,560
other groups working in this space

00:01:10,960 --> 00:01:13,840
the best way to illustrate the sort of

00:01:12,560 --> 00:01:14,400
work that we've been doing is to talk

00:01:13,840 --> 00:01:16,320
about an

00:01:14,400 --> 00:01:17,520
esi project that we're currently working

00:01:16,320 --> 00:01:19,920
on in the

00:01:17,520 --> 00:01:19,920
mlc

00:01:21,439 --> 00:01:24,880
that project is an internal hardware

00:01:23,600 --> 00:01:27,119
leasing system

00:01:24,880 --> 00:01:28,720
the goal is to replace the mlc's current

00:01:27,119 --> 00:01:30,880
internal hardware leasing system

00:01:28,720 --> 00:01:32,560
that uses complex custom scripts that

00:01:30,880 --> 00:01:36,000
are powerful but difficult to

00:01:32,560 --> 00:01:37,680
maintain or extend the idea behind the

00:01:36,000 --> 00:01:38,240
esi version of this hardware leasing

00:01:37,680 --> 00:01:39,759
system

00:01:38,240 --> 00:01:41,439
is that users contribute their own

00:01:39,759 --> 00:01:43,360
hardware to the bear mail pool

00:01:41,439 --> 00:01:44,479
those node owners have exclusive use of

00:01:43,360 --> 00:01:46,560
their nodes

00:01:44,479 --> 00:01:48,640
however when the node owner is not using

00:01:46,560 --> 00:01:50,640
their node they can put them off release

00:01:48,640 --> 00:01:55,680
allowing the lessee to temporarily claim

00:01:50,640 --> 00:01:57,680
the node and use it for themselves

00:01:55,680 --> 00:01:58,960
at the high level this is what the

00:01:57,680 --> 00:02:00,799
hardware losing system service

00:01:58,960 --> 00:02:02,719
architecture looks like

00:02:00,799 --> 00:02:04,240
in the middle of the daw is a bare metal

00:02:02,719 --> 00:02:05,360
service where we keep our inventory of

00:02:04,240 --> 00:02:07,439
nodes

00:02:05,360 --> 00:02:08,479
a leasing workflow allows owners to

00:02:07,439 --> 00:02:11,200
offer up their nodes

00:02:08,479 --> 00:02:13,280
while that sees lease nodes then a

00:02:11,200 --> 00:02:14,160
provisioning workflow allows both owners

00:02:13,280 --> 00:02:16,160
and the seas

00:02:14,160 --> 00:02:17,360
to perform provisioning actions they can

00:02:16,160 --> 00:02:22,640
provision around nodes

00:02:17,360 --> 00:02:24,000
or configure node networking

00:02:22,640 --> 00:02:25,840
let's dig a little deeper into the

00:02:24,000 --> 00:02:28,319
hardware leasing system workflows

00:02:25,840 --> 00:02:30,000
we'll start with the creation of offers

00:02:28,319 --> 00:02:30,959
let's say that the bare middle inventory

00:02:30,000 --> 00:02:33,680
has five nodes

00:02:30,959 --> 00:02:34,959
a through e with nodes a b and c owned

00:02:33,680 --> 00:02:38,000
by owner o1

00:02:34,959 --> 00:02:40,400
and notes dne owned by owner o2

00:02:38,000 --> 00:02:41,920
owner o1 is not using any of their nodes

00:02:40,400 --> 00:02:43,680
so they offered them up in the leasing

00:02:41,920 --> 00:02:44,959
service by creating an offer for each of

00:02:43,680 --> 00:02:47,440
their nodes

00:02:44,959 --> 00:02:49,040
owner o2 isn't using node d so they

00:02:47,440 --> 00:02:51,760
offered it up as well

00:02:49,040 --> 00:02:54,480
however o2 is using node e so they keep

00:02:51,760 --> 00:02:54,480
it for themselves

00:02:55,200 --> 00:02:59,440
now the less c is coming to play now see

00:02:57,599 --> 00:03:01,440
l1 wants to use two nodes

00:02:59,440 --> 00:03:04,080
so they look at the available offers and

00:03:01,440 --> 00:03:06,319
create the contract for nodes b and d

00:03:04,080 --> 00:03:08,400
let's say l2 only needs one node so they

00:03:06,319 --> 00:03:10,480
create a contract for node c

00:03:08,400 --> 00:03:12,080
no one creates a contract for node a so

00:03:10,480 --> 00:03:13,840
nonetheless he can take it

00:03:12,080 --> 00:03:16,000
and no one can create the contract for

00:03:13,840 --> 00:03:19,840
node since it was never offered up in

00:03:16,000 --> 00:03:19,840
the leasing service

00:03:20,640 --> 00:03:24,560
once the nodes are leased the lassie can

00:03:22,560 --> 00:03:26,400
move into the provisioning workflow

00:03:24,560 --> 00:03:28,239
let's see l1 can use the two nodes saved

00:03:26,400 --> 00:03:30,000
list nodes b and d

00:03:28,239 --> 00:03:31,280
in conjunction with the public network

00:03:30,000 --> 00:03:32,400
and the two private networks that

00:03:31,280 --> 00:03:34,159
they've created

00:03:32,400 --> 00:03:35,519
they can perform a variety of actions

00:03:34,159 --> 00:03:37,280
provision the node attach

00:03:35,519 --> 00:03:40,400
networks to their nodes and network

00:03:37,280 --> 00:03:42,560
actions will be reflected on the switch

00:03:40,400 --> 00:03:43,840
thus the l2 can do similar things but

00:03:42,560 --> 00:03:47,840
they're limited to node

00:03:43,840 --> 00:03:47,840
c and the public network

00:03:48,799 --> 00:03:52,560
so that's what we want to do what steps

00:03:50,799 --> 00:03:54,480
have we taken to get there

00:03:52,560 --> 00:03:55,680
to answer that let's look at the partial

00:03:54,480 --> 00:03:59,040
requirements breakdown

00:03:55,680 --> 00:04:01,200
from the halcyon days back in 2019

00:03:59,040 --> 00:04:02,799
it's not a complete requirements list

00:04:01,200 --> 00:04:05,040
but it illustrates a lot of the work

00:04:02,799 --> 00:04:06,560
that we've done

00:04:05,040 --> 00:04:09,360
let's start with the bare metal service

00:04:06,560 --> 00:04:10,799
or ironic we need to be able to add and

00:04:09,360 --> 00:04:13,280
remove nodes from inventory

00:04:10,799 --> 00:04:14,959
something ironic already does very well

00:04:13,280 --> 00:04:16,560
we also need the ability to assign

00:04:14,959 --> 00:04:18,239
owners and lassies to the node

00:04:16,560 --> 00:04:21,199
and for those owners and lessees to be

00:04:18,239 --> 00:04:23,120
able to perform limited api actions

00:04:21,199 --> 00:04:24,320
combined this translates into node's

00:04:23,120 --> 00:04:25,840
multi-tenancy

00:04:24,320 --> 00:04:27,520
and is something that was not supported

00:04:25,840 --> 00:04:28,880
by ironic when we started working on the

00:04:27,520 --> 00:04:30,479
hardware leasing system

00:04:28,880 --> 00:04:32,800
and it ended up being something we

00:04:30,479 --> 00:04:34,560
implemented ourselves

00:04:32,800 --> 00:04:36,160
next are the network requirements we

00:04:34,560 --> 00:04:37,919
want users to be able to create their

00:04:36,160 --> 00:04:39,600
own networks and to potentially share

00:04:37,919 --> 00:04:41,120
those networks with another project

00:04:39,600 --> 00:04:43,600
things that neutron already supported

00:04:41,120 --> 00:04:46,000
very well the mlc also needed

00:04:43,600 --> 00:04:47,360
ml2 ansible networking to support the

00:04:46,000 --> 00:04:48,720
cisco nexus switch

00:04:47,360 --> 00:04:51,120
and we discovered that was something we

00:04:48,720 --> 00:04:52,720
need to code ourselves finally

00:04:51,120 --> 00:04:54,240
we needed the ability to create the

00:04:52,720 --> 00:04:56,080
managed trunk ports

00:04:54,240 --> 00:04:58,080
after some investigation we learned that

00:04:56,080 --> 00:05:00,960
neutron did most of what we needed but

00:04:58,080 --> 00:05:02,479
there were some pieces that were missing

00:05:00,960 --> 00:05:05,199
the next requirement is a bit of a

00:05:02,479 --> 00:05:06,960
strange one simplified cli commands

00:05:05,199 --> 00:05:08,639
we'll talk about this more in a moment

00:05:06,960 --> 00:05:10,080
but the gist of the issue is that the

00:05:08,639 --> 00:05:12,240
default openstack cli

00:05:10,080 --> 00:05:14,240
is comprehensive but not always easy to

00:05:12,240 --> 00:05:18,320
use so we decided we would need to give

00:05:14,240 --> 00:05:20,240
our users some simplified cli commands

00:05:18,320 --> 00:05:21,840
finally there's a leasing service which

00:05:20,240 --> 00:05:23,520
we created from scratch

00:05:21,840 --> 00:05:25,600
it needed to allow node owners to offer

00:05:23,520 --> 00:05:29,039
nodes and for lecies to contract the

00:05:25,600 --> 00:05:29,039
node for a given time period

00:05:31,280 --> 00:05:35,039
let's go into more detail about the work

00:05:32,960 --> 00:05:36,080
we did we'll start with ironic node

00:05:35,039 --> 00:05:38,000
multi-tenancy

00:05:36,080 --> 00:05:39,600
which was the key feature we needed

00:05:38,000 --> 00:05:41,360
above all else

00:05:39,600 --> 00:05:43,120
we started by talking with the upstream

00:05:41,360 --> 00:05:44,479
ironic team about our requirements

00:05:43,120 --> 00:05:46,880
and they were amazing at walking us

00:05:44,479 --> 00:05:48,560
through our ideas and implementation

00:05:46,880 --> 00:05:51,039
helping us refine our spec and giving us

00:05:48,560 --> 00:05:53,280
feedback about our code

00:05:51,039 --> 00:05:55,360
the implementation steps started with

00:05:53,280 --> 00:05:57,360
adding owner and lassie fields to nodes

00:05:55,360 --> 00:05:58,960
ironic actually already had an owner

00:05:57,360 --> 00:06:00,960
field for nodes but it was purely

00:05:58,960 --> 00:06:03,120
informational

00:06:00,960 --> 00:06:04,560
next we exposed those owner and lessee

00:06:03,120 --> 00:06:06,639
fields to policy

00:06:04,560 --> 00:06:08,160
openstack policies determine which users

00:06:06,639 --> 00:06:10,479
have access to which api

00:06:08,160 --> 00:06:12,560
actions and can be specified in an easy

00:06:10,479 --> 00:06:15,360
to update configuration file

00:06:12,560 --> 00:06:17,039
before our work all ironic api actions

00:06:15,360 --> 00:06:18,400
were only accessible to ironic

00:06:17,039 --> 00:06:21,039
administrators

00:06:18,400 --> 00:06:22,240
we added two new rules is node owner and

00:06:21,039 --> 00:06:23,919
is nodelessly

00:06:22,240 --> 00:06:25,280
that determine whether the user making

00:06:23,919 --> 00:06:26,880
an api request

00:06:25,280 --> 00:06:28,319
is the owner of the node or the let's

00:06:26,880 --> 00:06:30,160
say of the node

00:06:28,319 --> 00:06:31,840
with those in place we can now update

00:06:30,160 --> 00:06:34,080
the other policy rules

00:06:31,840 --> 00:06:36,080
for example we can update baremail node

00:06:34,080 --> 00:06:37,840
update to allow access if the user is an

00:06:36,080 --> 00:06:40,160
admin or the owner of the node

00:06:37,840 --> 00:06:40,880
and we can update baremodel node set

00:06:40,160 --> 00:06:42,960
powerstate

00:06:40,880 --> 00:06:44,479
to allow access if the user is an admin

00:06:42,960 --> 00:06:45,600
or the owner of the node or the lesson

00:06:44,479 --> 00:06:47,600
of the node

00:06:45,600 --> 00:06:49,120
note that these policy roles are fully

00:06:47,600 --> 00:06:52,800
customizable by each

00:06:49,120 --> 00:06:54,720
individual openstack installation

00:06:52,800 --> 00:06:56,880
there were a few additional minor tweaks

00:06:54,720 --> 00:06:58,639
necessary but that was mostly it

00:06:56,880 --> 00:07:00,479
we tested our code with single ironic

00:06:58,639 --> 00:07:01,520
cli commands and then we tried something

00:07:00,479 --> 00:07:03,680
more complicated

00:07:01,520 --> 00:07:05,680
using metalsmith which is a client-side

00:07:03,680 --> 00:07:06,560
python library for provisioning ironic

00:07:05,680 --> 00:07:08,240
nodes

00:07:06,560 --> 00:07:09,919
what we discovered was that mel smith

00:07:08,240 --> 00:07:10,720
just worked for node owners unless these

00:07:09,919 --> 00:07:12,160
with our code

00:07:10,720 --> 00:07:13,840
owners unless these could provision

00:07:12,160 --> 00:07:15,520
nodes that they owned or released

00:07:13,840 --> 00:07:17,440
and cannot do so for notes that they did

00:07:15,520 --> 00:07:19,840
not own release which was exactly what

00:07:17,440 --> 00:07:19,840
we wanted

00:07:22,319 --> 00:07:26,240
onto networking we started by adding

00:07:24,400 --> 00:07:27,680
support for the cisco nexus switch into

00:07:26,240 --> 00:07:29,520
ml2 ansible networking

00:07:27,680 --> 00:07:30,960
with guidance from the upstream

00:07:29,520 --> 00:07:32,400
networking ansible team

00:07:30,960 --> 00:07:34,160
they were great at helping us understand

00:07:32,400 --> 00:07:34,960
what we needed to do and helping us

00:07:34,160 --> 00:07:37,759
merge our code

00:07:34,960 --> 00:07:38,639
and that was that next we tested trunk

00:07:37,759 --> 00:07:40,160
port support

00:07:38,639 --> 00:07:41,840
we discovered that neutron already

00:07:40,160 --> 00:07:42,800
supported the creation and deletion of

00:07:41,840 --> 00:07:44,800
trunk boards

00:07:42,800 --> 00:07:46,000
however we couldn't attach a trunk port

00:07:44,800 --> 00:07:48,080
to a specific nic

00:07:46,000 --> 00:07:49,440
so that's a feature we added actually in

00:07:48,080 --> 00:07:51,199
ironic

00:07:49,440 --> 00:07:52,879
lastly we found out that updating a

00:07:51,199 --> 00:07:54,639
trunk port didn't fully work

00:07:52,879 --> 00:07:56,639
if a trunk port was attached to the nic

00:07:54,639 --> 00:07:58,160
and then updated the change would not be

00:07:56,639 --> 00:08:00,240
reflected on the switch

00:07:58,160 --> 00:08:02,319
so we made plans to implement this

00:08:00,240 --> 00:08:04,000
feature and we got around to working on

00:08:02,319 --> 00:08:05,280
it we discovered that someone had beaten

00:08:04,000 --> 00:08:08,000
us through the punch by a week or two

00:08:05,280 --> 00:08:08,000
which was great

00:08:10,400 --> 00:08:14,080
simplified user commands why well

00:08:13,120 --> 00:08:16,560
because if you

00:08:14,080 --> 00:08:18,160
use the default openstack cli figuring

00:08:16,560 --> 00:08:18,879
out how networks are attached to a

00:08:18,160 --> 00:08:20,720
single node

00:08:18,879 --> 00:08:22,000
requires two plus two times the number

00:08:20,720 --> 00:08:23,759
of nix commands

00:08:22,000 --> 00:08:25,759
so six commands if your node has two

00:08:23,759 --> 00:08:27,599
nics you also have to use the output

00:08:25,759 --> 00:08:30,560
from one command as input for the next

00:08:27,599 --> 00:08:32,240
copying and pasting uuids then you still

00:08:30,560 --> 00:08:34,080
have to collate the results of all those

00:08:32,240 --> 00:08:35,760
commands

00:08:34,080 --> 00:08:37,279
but what we learned was that it's

00:08:35,760 --> 00:08:38,719
actually really easy to extend the

00:08:37,279 --> 00:08:40,399
openstack cli

00:08:38,719 --> 00:08:42,640
no one on our team have much experience

00:08:40,399 --> 00:08:44,880
with the cli code but within a few days

00:08:42,640 --> 00:08:45,920
we have developed openstack esi node

00:08:44,880 --> 00:08:47,680
network list

00:08:45,920 --> 00:08:49,279
a single command that produces the

00:08:47,680 --> 00:08:51,360
output you see here

00:08:49,279 --> 00:08:53,120
we've created additional cli commands to

00:08:51,360 --> 00:08:54,240
simplify various operations

00:08:53,120 --> 00:08:57,120
and you'll see a lot of them in the

00:08:54,240 --> 00:08:57,120
moment in our demo

00:08:58,560 --> 00:09:02,880
finally the leasing service we started

00:09:01,200 --> 00:09:05,440
by looking at openstack blazer

00:09:02,880 --> 00:09:06,080
which is openstack's reservation service

00:09:05,440 --> 00:09:07,760
however

00:09:06,080 --> 00:09:09,440
at the time that we looked blazer did

00:09:07,760 --> 00:09:10,880
not have full support for provisioning

00:09:09,440 --> 00:09:12,800
on ironic nodes

00:09:10,880 --> 00:09:14,240
it was also tied closely to nova

00:09:12,800 --> 00:09:16,640
something we were trying to avoid

00:09:14,240 --> 00:09:18,320
as iron can provision nodes on its own

00:09:16,640 --> 00:09:20,480
and we wanted as simple of a service

00:09:18,320 --> 00:09:22,560
architecture as possible

00:09:20,480 --> 00:09:23,600
lastly blizzard did not support

00:09:22,560 --> 00:09:26,399
policy-based

00:09:23,600 --> 00:09:28,000
node api access you might be able to

00:09:26,399 --> 00:09:29,760
provision an ironic node

00:09:28,000 --> 00:09:32,080
but you couldn't allow a lacie to power

00:09:29,760 --> 00:09:34,160
supplement node

00:09:32,080 --> 00:09:35,360
so last summer with the help of a bunch

00:09:34,160 --> 00:09:37,200
of red hat interns

00:09:35,360 --> 00:09:39,040
some of who are now full-time red hat

00:09:37,200 --> 00:09:41,440
engineers working on esi

00:09:39,040 --> 00:09:42,959
we developed esi leap which is a pretty

00:09:41,440 --> 00:09:45,120
simple alternative

00:09:42,959 --> 00:09:46,000
it allows resource owners to offer their

00:09:45,120 --> 00:09:47,920
resources

00:09:46,000 --> 00:09:49,760
and resource lessees to contract an

00:09:47,920 --> 00:09:50,720
offered resource for a specified time

00:09:49,760 --> 00:09:53,040
period

00:09:50,720 --> 00:09:54,240
for ironic nodes contracting a node just

00:09:53,040 --> 00:09:55,440
means setting the nodes that's the

00:09:54,240 --> 00:09:57,760
attribute

00:09:55,440 --> 00:09:58,720
esi leap supports the leasing of ironic

00:09:57,760 --> 00:10:00,720
nodes

00:09:58,720 --> 00:10:05,200
but can easily be extended to work with

00:10:00,720 --> 00:10:06,640
other resources

00:10:05,200 --> 00:10:08,480
let's take one more look at the service

00:10:06,640 --> 00:10:09,040
architecture of our hardware listing

00:10:08,480 --> 00:10:10,560
system

00:10:09,040 --> 00:10:12,800
and hopefully you have a clearer picture

00:10:10,560 --> 00:10:14,880
of how all the pieces interact

00:10:12,800 --> 00:10:16,560
one thing i really want to emphasize now

00:10:14,880 --> 00:10:18,320
is how disconnected our leasing and

00:10:16,560 --> 00:10:19,760
provisioning workflows are

00:10:18,320 --> 00:10:21,600
maybe you don't need the concept of

00:10:19,760 --> 00:10:23,440
lessees or maybe you're fine with owners

00:10:21,600 --> 00:10:25,200
assigning the seats themselves

00:10:23,440 --> 00:10:27,040
you can do whatever you want there and

00:10:25,200 --> 00:10:28,160
still take advantage of all our work in

00:10:27,040 --> 00:10:30,640
the provisioning space

00:10:28,160 --> 00:10:33,839
with ironic node multi-tenancy and

00:10:30,640 --> 00:10:33,839
simplified cli commands

00:10:35,920 --> 00:10:40,959
okay let's move on to our demos first

00:10:38,959 --> 00:10:42,640
we'll see a demo of our leasing service

00:10:40,959 --> 00:10:44,720
and ironix multi-tenant node

00:10:42,640 --> 00:10:46,399
capabilities

00:10:44,720 --> 00:10:47,760
we're going to start with three users

00:10:46,399 --> 00:10:50,399
each with a different view into the

00:10:47,760 --> 00:10:52,560
ironics node inventory

00:10:50,399 --> 00:10:55,120
the admin user sees every node in the

00:10:52,560 --> 00:10:55,120
inventory

00:10:55,839 --> 00:11:00,720
the owner sees the three nodes that they

00:10:58,839 --> 00:11:02,640
own

00:11:00,720 --> 00:11:06,560
and the lessee has not yet leased any

00:11:02,640 --> 00:11:06,560
nodes so they see no nodes at all

00:11:07,279 --> 00:11:12,079
now the owner has decided to share del2

00:11:10,160 --> 00:11:12,959
so they create an offer for the node by

00:11:12,079 --> 00:11:16,000
specifying

00:11:12,959 --> 00:11:17,040
the ironic node resource type and the

00:11:16,000 --> 00:11:20,800
ironic node's

00:11:17,040 --> 00:11:21,680
uid note that the owner can also specify

00:11:20,800 --> 00:11:23,600
a start time and

00:11:21,680 --> 00:11:25,120
end time for the offer but we'll just

00:11:23,600 --> 00:11:26,839
specify an end time

00:11:25,120 --> 00:11:29,839
so the offer will be immediately

00:11:26,839 --> 00:11:29,839
available

00:11:34,000 --> 00:11:38,720
a lassie can see the offer and when it's

00:11:40,839 --> 00:11:46,000
available

00:11:42,000 --> 00:11:46,000
can now create a contract for that node

00:11:50,320 --> 00:11:54,560
after the contract is created note that

00:11:52,800 --> 00:11:57,839
the availabilities for the offer are

00:11:54,560 --> 00:11:57,839
also updated

00:11:58,720 --> 00:12:03,600
other lessees can still contract the

00:12:00,560 --> 00:12:03,600
node for those times

00:12:04,399 --> 00:12:08,839
when we reach the contract start date

00:12:06,399 --> 00:12:10,079
the manager service will fulfill the

00:12:08,839 --> 00:12:11,760
contract

00:12:10,079 --> 00:12:13,440
by setting the node's lessee field to

00:12:11,760 --> 00:12:15,279
the losses project

00:12:13,440 --> 00:12:17,279
when the contract expiration date is

00:12:15,279 --> 00:12:18,959
reached the manager service will also

00:12:17,279 --> 00:12:21,360
unset the node's lesson field and clean

00:12:18,959 --> 00:12:21,360
the node

00:12:22,240 --> 00:12:26,160
now that the contract has been fulfilled

00:12:24,800 --> 00:12:28,720
the lessee has access

00:12:26,160 --> 00:12:28,720
to the node

00:12:32,399 --> 00:12:38,160
they can also perform specific actions

00:12:34,880 --> 00:12:39,040
as dictated by iranian policy for

00:12:38,160 --> 00:12:42,160
example

00:12:39,040 --> 00:12:44,959
our ironic policy allows lasius to power

00:12:42,160 --> 00:12:44,959
nodes on and off

00:12:45,839 --> 00:12:53,839
but not to set or unset node attributes

00:13:06,720 --> 00:13:10,880
here are our ironic policy changes

00:13:11,839 --> 00:13:15,839
this is the generic node update rule

00:13:14,639 --> 00:13:21,600
which allows api

00:13:15,839 --> 00:13:23,519
access to only admins and node owners

00:13:21,600 --> 00:13:24,800
and here's the set power state rule

00:13:23,519 --> 00:13:26,959
which allows api

00:13:24,800 --> 00:13:29,600
access to admins node owners and

00:13:26,959 --> 00:13:31,760
nodelesses

00:13:29,600 --> 00:13:33,680
this time running policy is restrictive

00:13:31,760 --> 00:13:35,440
but still allows lassies to do pretty

00:13:33,680 --> 00:13:38,079
complex things

00:13:35,440 --> 00:13:40,480
for example using nailsmith to provision

00:13:38,079 --> 00:13:40,480
the node

00:13:42,800 --> 00:13:47,360
this operation takes a while so we'll

00:13:44,880 --> 00:13:50,560
skip ahead in time

00:13:47,360 --> 00:13:54,240
provisioning is now complete and the lsc

00:13:50,560 --> 00:13:54,240
can now log into your provision node

00:13:58,800 --> 00:14:04,560
that concludes this demo

00:14:02,480 --> 00:14:06,720
next we're going to look at our custom

00:14:04,560 --> 00:14:08,959
openstack cli commands

00:14:06,720 --> 00:14:09,839
the base openstack cli is powerful and

00:14:08,959 --> 00:14:11,440
comprehensive

00:14:09,839 --> 00:14:12,880
but often requires a user to run

00:14:11,440 --> 00:14:15,600
multiple commands

00:14:12,880 --> 00:14:16,000
when i run an esi cli command i'll also

00:14:15,600 --> 00:14:17,680
tell you

00:14:16,000 --> 00:14:20,399
how many openstack commands would have

00:14:17,680 --> 00:14:22,160
been needed for the same result

00:14:20,399 --> 00:14:25,519
we'll start with the node owner who can

00:14:22,160 --> 00:14:25,519
see the three nodes that they own

00:14:26,959 --> 00:14:30,399
let's look at how neutron networks are

00:14:28,560 --> 00:14:45,839
attached to these nodes by looking at

00:14:30,399 --> 00:14:45,839
the bare middle nodes and ports

00:14:50,959 --> 00:14:54,880
looking at the spare metal port we can

00:14:52,880 --> 00:14:58,160
see that this corresponds to

00:14:54,880 --> 00:15:00,480
this node uuid which is still two

00:14:58,160 --> 00:15:01,440
and there's no information internal info

00:15:00,480 --> 00:15:03,279
so you can see

00:15:01,440 --> 00:15:04,880
that this parameter port is not attached

00:15:03,279 --> 00:15:08,320
to any network

00:15:04,880 --> 00:15:13,839
actually we can also use an esi cli

00:15:08,320 --> 00:15:13,839
command to get the same sort of result

00:15:17,040 --> 00:15:21,120
in here with one command instead of

00:15:18,880 --> 00:15:23,199
three we can instantly see that

00:15:21,120 --> 00:15:25,279
none of our nodes are attached to any

00:15:23,199 --> 00:15:27,120
networks yet

00:15:25,279 --> 00:15:30,720
let's verify that there are no networks

00:15:27,120 --> 00:15:30,720
attached to dell 2 on the switch

00:15:32,480 --> 00:15:36,160
and we can see that there's nothing

00:15:33,680 --> 00:15:36,480
attached the next thing we're going to

00:15:36,160 --> 00:15:40,880
do

00:15:36,480 --> 00:15:44,560
is create a trunk port

00:15:40,880 --> 00:15:44,560
let's see what networks are available

00:15:46,720 --> 00:15:50,480
we're going to use these three test

00:15:48,639 --> 00:15:52,480
networks

00:15:50,480 --> 00:15:54,079
we'll start by creating a trunk port

00:15:52,480 --> 00:15:54,639
with test one network as a native

00:15:54,079 --> 00:15:58,959
network

00:15:54,639 --> 00:15:58,959
and test two network as a tag network

00:15:59,519 --> 00:16:06,399
uh this esi command would take five

00:16:01,600 --> 00:16:06,399
separate base openstack cli commands to

00:16:06,839 --> 00:16:09,759
run we've created the chalkboard and we

00:16:09,440 --> 00:16:13,120
can

00:16:09,759 --> 00:16:13,120
see some summary information

00:16:17,600 --> 00:16:22,800
this summary information will have taken

00:16:19,279 --> 00:16:24,959
four base openstack cli commands

00:16:22,800 --> 00:16:27,199
now let's attach this trunk port to dell

00:16:24,959 --> 00:16:27,199
2.

00:16:27,519 --> 00:16:32,079
i'm going to specify the trunk port the

00:16:30,240 --> 00:16:37,600
mac address

00:16:32,079 --> 00:16:39,600
and the node

00:16:37,600 --> 00:16:41,279
this command would take 7 to 10

00:16:39,600 --> 00:16:43,600
openstack cli commands

00:16:41,279 --> 00:16:46,639
for the equivalent depending on what

00:16:43,600 --> 00:16:46,639
state the node is in

00:16:48,399 --> 00:16:53,199
the network attachment is complete let's

00:16:50,720 --> 00:16:55,440
take a look at our summary node network

00:16:53,199 --> 00:16:55,440
list

00:17:01,600 --> 00:17:06,880
now we can see the attached network on

00:17:04,640 --> 00:17:08,240
dell 2. we can verify this on the switch

00:17:06,880 --> 00:17:13,199
as well

00:17:08,240 --> 00:17:13,199
vlans 611 and 612 should be accessible

00:17:14,640 --> 00:17:19,839
and we see that that is indeed the case

00:17:20,480 --> 00:17:24,400
next let's add another tag network to

00:17:22,480 --> 00:17:27,199
the trunk

00:17:24,400 --> 00:17:29,839
this will take four base openstack cli

00:17:27,199 --> 00:17:29,839
operations

00:17:29,919 --> 00:17:34,799
let's verify this update with our esi

00:17:31,919 --> 00:17:34,799
clr commands

00:17:40,400 --> 00:17:45,120
we can see that uh test three network

00:17:42,960 --> 00:17:47,840
has been added as a tag network

00:17:45,120 --> 00:17:47,840
right here

00:17:54,320 --> 00:17:58,559
and our summary node network list also

00:17:56,720 --> 00:18:00,559
shows that same information

00:17:58,559 --> 00:18:02,480
we can verify this on this fish as well

00:18:00,559 --> 00:18:05,039
making sure that vlan 613 is

00:18:02,480 --> 00:18:05,039
accessible

00:18:05,520 --> 00:18:11,200
and that is indeed the case okay

00:18:08,880 --> 00:18:15,840
now let's clean things up we'll start by

00:18:11,200 --> 00:18:15,840
detaching the network from the node

00:18:20,720 --> 00:18:25,840
this would take three base openstack cli

00:18:22,960 --> 00:18:28,160
commands to execute

00:18:25,840 --> 00:18:30,640
let's verify that this update happened

00:18:28,160 --> 00:18:30,640
on the switch

00:18:30,960 --> 00:18:34,320
and we can see that the switchboard is

00:18:32,480 --> 00:18:38,160
now shut down

00:18:34,320 --> 00:18:38,160
finally let's delete this trunk port

00:18:41,679 --> 00:18:45,200
this command will take five base

00:18:43,600 --> 00:18:48,000
openstack cli commands

00:18:45,200 --> 00:18:48,000
for the equivalent

00:18:49,200 --> 00:18:52,320
that concludes this demo

00:18:52,880 --> 00:18:56,080
what's next we're working towards the

00:18:55,039 --> 00:18:57,520
trial implementation

00:18:56,080 --> 00:18:59,840
of our hardware leasing system in the

00:18:57,520 --> 00:19:02,640
mlc with just one key feature missing

00:18:59,840 --> 00:19:02,880
which i'll talk about in a second there

00:19:02,640 --> 00:19:04,640
are

00:19:02,880 --> 00:19:06,960
additional scenarios where we might use

00:19:04,640 --> 00:19:07,679
csi a red hat colleague working on

00:19:06,960 --> 00:19:09,360
openshift

00:19:07,679 --> 00:19:11,039
thinks that esi will be perfect for

00:19:09,360 --> 00:19:13,039
creating open shift bare metal clusters

00:19:11,039 --> 00:19:16,559
that can expand and shrink on demand

00:19:13,039 --> 00:19:18,480
there's also flock x a phd project at bu

00:19:16,559 --> 00:19:20,080
flock x is a hardware marketplace where

00:19:18,480 --> 00:19:22,000
users can buy and sell use

00:19:20,080 --> 00:19:23,440
of bare metal nodes there's a talk about

00:19:22,000 --> 00:19:24,880
flock x

00:19:23,440 --> 00:19:27,120
and i'll have details about that in the

00:19:24,880 --> 00:19:28,640
next slide

00:19:27,120 --> 00:19:30,480
we also have some feature development to

00:19:28,640 --> 00:19:32,640
do we're starting to look at node

00:19:30,480 --> 00:19:35,200
attestation with key lime

00:19:32,640 --> 00:19:35,840
the mlc also needs iscsi support in

00:19:35,200 --> 00:19:37,520
openstack

00:19:35,840 --> 00:19:39,039
for its hardware leasing system and

00:19:37,520 --> 00:19:41,039
there's an upstream patch that we'll be

00:19:39,039 --> 00:19:42,400
testing out

00:19:41,039 --> 00:19:44,960
then there's improvements to the leasing

00:19:42,400 --> 00:19:46,400
service reporting reservation limits so

00:19:44,960 --> 00:19:47,679
one last c can't lease all the nodes

00:19:46,400 --> 00:19:52,799
until the end of time

00:19:47,679 --> 00:19:55,280
and the ui

00:19:52,799 --> 00:19:56,880
further information red hat research

00:19:55,280 --> 00:19:58,320
days 2020 is coming up

00:19:56,880 --> 00:20:00,320
and there will be a talk about flock

00:19:58,320 --> 00:20:01,120
acts titled using elastic secure

00:20:00,320 --> 00:20:03,520
infrastructure

00:20:01,120 --> 00:20:04,960
why and how it'll be on september 30th

00:20:03,520 --> 00:20:07,760
at 12 30 pm eastern

00:20:04,960 --> 00:20:09,360
so check it out if you're curious the

00:20:07,760 --> 00:20:11,440
red hat research quarterly has an

00:20:09,360 --> 00:20:12,320
article about a multi-tenant ironic

00:20:11,440 --> 00:20:15,039
implementation

00:20:12,320 --> 00:20:16,640
called isn't multi-tenancy ironic so if

00:20:15,039 --> 00:20:17,200
you'd like more details about what we

00:20:16,640 --> 00:20:21,039
did there

00:20:17,200 --> 00:20:22,720
read all about it the esi git repository

00:20:21,039 --> 00:20:25,760
is a good place to look at our code

00:20:22,720 --> 00:20:27,760
and also our documentation and finally

00:20:25,760 --> 00:20:28,960
you can reach us at any time through irc

00:20:27,760 --> 00:20:31,600
on the freenode server

00:20:28,960 --> 00:20:33,039
in the moc channel thank you for

00:20:31,600 --> 00:20:36,000
listening to this presentation

00:20:33,039 --> 00:20:36,000
i hope you enjoyed it

00:20:38,240 --> 00:20:42,320
all right thanks it was a great

00:20:40,880 --> 00:20:46,159
presentation and

00:20:42,320 --> 00:20:46,159
let me stop sharing

00:20:46,840 --> 00:20:52,960
and we're

00:20:48,799 --> 00:20:52,960
up to a q a session

00:21:00,720 --> 00:21:04,000
there were some comments in the chat

00:21:02,080 --> 00:21:08,640
window but i don't see any

00:21:04,000 --> 00:21:08,640
defined questions who who said what

00:21:08,880 --> 00:21:20,880
it was manual michael

00:21:17,679 --> 00:21:22,640
all right uh folks if you have any

00:21:20,880 --> 00:21:24,480
questions please type them in the chat

00:21:22,640 --> 00:21:28,000
window

00:21:24,480 --> 00:21:28,720
we'll give it probably another couple of

00:21:28,000 --> 00:21:31,760
minutes

00:21:28,720 --> 00:21:36,559
and if we don't have any

00:21:31,760 --> 00:21:40,080
questions we will

00:21:36,559 --> 00:21:45,840
here we go we have some comments

00:21:40,080 --> 00:21:45,840
great presentation

00:21:52,799 --> 00:22:01,840
all right i think we

00:21:57,360 --> 00:22:01,840
okay here we go there's a question

00:22:01,919 --> 00:22:05,600
uh so the question is what was the one

00:22:04,159 --> 00:22:09,280
feature missing for deploying

00:22:05,600 --> 00:22:10,000
at moc um so the mlc has a requirement

00:22:09,280 --> 00:22:12,400
to use

00:22:10,000 --> 00:22:13,600
uh to work with cinder volumes uh

00:22:12,400 --> 00:22:15,760
through uh

00:22:13,600 --> 00:22:18,320
through the set by scuzzy driver which

00:22:15,760 --> 00:22:20,080
currently is not uh present in cinder um

00:22:18,320 --> 00:22:21,760
there's an upstream patch for it that

00:22:20,080 --> 00:22:24,799
has not yet been merged but

00:22:21,760 --> 00:22:26,799
we're going to be testing it uh this uh

00:22:24,799 --> 00:22:28,000
next week actually see if it works and

00:22:26,799 --> 00:22:28,960
if it works then we're just gonna carry

00:22:28,000 --> 00:22:31,360
that patch with us

00:22:28,960 --> 00:22:33,200
and use that um and then we'll we'll be

00:22:31,360 --> 00:22:37,919
pretty much feature complete for

00:22:33,200 --> 00:22:37,919
for the trial uh implementation at the

00:22:38,840 --> 00:22:41,840
mlc

00:22:43,679 --> 00:22:47,679
uh do we have any more questions from

00:22:46,640 --> 00:22:54,000
anyone

00:22:47,679 --> 00:22:57,520
on this presentation

00:22:54,000 --> 00:23:01,039
right i guess uh

00:22:57,520 --> 00:23:03,600
that concludes our topic

00:23:01,039 --> 00:23:04,799
at this point and uh thank you very much

00:23:03,600 --> 00:23:09,840
for your

00:23:04,799 --> 00:23:09,840

YouTube URL: https://www.youtube.com/watch?v=qDRYY0Tpx1k


