Title: Middleware Gate-Checks
Publication date: 2020-10-06
Playlist: DevConfUS 2020
Description: 
	Speaker: Aneri Shah

My talk is based on Middleware Productizationâ€™s Gates Initiative. It becomes necessary to verify
that our Product is following the required Standards and policies decided by Red-Hat. This is
where Gates-Check come on board. These Gates consist of different checks that need to be
applied before, during or after the Productization Process to verify the compliance with the Red
Hat Policies and Standards. They are mandatory to prevent Red Hat from being vulnerable to any
of the legal actions or government sanctions. So, in my talk I will be presenting the idea of -
What exactly are these Gate-Checks?
Why and when are they required to be applied to the Products?
How to run these Gates Pipeline?
Captions: 
	00:00:00,080 --> 00:00:04,000
okay and we're going to start our next

00:00:01,439 --> 00:00:06,319
talk middleware gate checks

00:00:04,000 --> 00:00:07,839
thanks everyone for joining us here in

00:00:06,319 --> 00:00:08,480
the systems engineering and hardware

00:00:07,839 --> 00:00:09,840
track

00:00:08,480 --> 00:00:17,920
and we hope you find the talk

00:00:09,840 --> 00:00:17,920
educational i'm going to start it now

00:00:23,359 --> 00:00:27,920
hello everyone hope all of you are doing

00:00:25,599 --> 00:00:28,400
good it's my honor to have you all here

00:00:27,920 --> 00:00:30,480
today

00:00:28,400 --> 00:00:32,239
to listen to my talk before moving

00:00:30,480 --> 00:00:33,600
forward with my talk let me first

00:00:32,239 --> 00:00:36,239
introduce myself

00:00:33,600 --> 00:00:38,480
my name is anirisha currently i am

00:00:36,239 --> 00:00:39,040
pursuing my masters in computer science

00:00:38,480 --> 00:00:41,600
program

00:00:39,040 --> 00:00:44,079
from indiana university bloomington this

00:00:41,600 --> 00:00:44,640
summer i got an opportunity to work with

00:00:44,079 --> 00:00:46,800
redhead

00:00:44,640 --> 00:00:48,239
as a devops intern with continuous

00:00:46,800 --> 00:00:50,480
productization team

00:00:48,239 --> 00:00:52,079
and under middleware productization team

00:00:50,480 --> 00:00:54,160
on gates initiative

00:00:52,079 --> 00:00:55,760
my today's talk is based on gates

00:00:54,160 --> 00:00:58,239
initiative

00:00:55,760 --> 00:00:59,920
as i am emphasizing on gates initiative

00:00:58,239 --> 00:01:02,879
so you all might be wondering

00:00:59,920 --> 00:01:04,559
what exactly are these gates let me give

00:01:02,879 --> 00:01:06,960
you a very brief walkthrough

00:01:04,559 --> 00:01:08,799
of what are these gate checks and why

00:01:06,960 --> 00:01:10,560
and when are they required to be applied

00:01:08,799 --> 00:01:13,200
on the middleware products

00:01:10,560 --> 00:01:15,439
what are gates productization coating

00:01:13,200 --> 00:01:17,360
gates are basically collection of all

00:01:15,439 --> 00:01:18,000
checks that need to be applied either

00:01:17,360 --> 00:01:20,240
before

00:01:18,000 --> 00:01:21,040
during or after the productization

00:01:20,240 --> 00:01:23,439
process

00:01:21,040 --> 00:01:24,159
in order to verify that all the redhead

00:01:23,439 --> 00:01:25,920
policies

00:01:24,159 --> 00:01:27,520
requirements and standards are in

00:01:25,920 --> 00:01:29,439
compliance hence

00:01:27,520 --> 00:01:31,280
any middleware product have a minimum

00:01:29,439 --> 00:01:33,520
set of requirements that need to be

00:01:31,280 --> 00:01:34,240
satisfied before any customer facing

00:01:33,520 --> 00:01:36,079
release

00:01:34,240 --> 00:01:37,920
this minimum set of requirements are

00:01:36,079 --> 00:01:40,240
nothing but gate checks

00:01:37,920 --> 00:01:42,240
this gate checks have been created from

00:01:40,240 --> 00:01:43,040
a checklist of verifications and they

00:01:42,240 --> 00:01:45,520
are designed to

00:01:43,040 --> 00:01:47,680
assist the release process of any new

00:01:45,520 --> 00:01:49,840
product by utilizing some standard tools

00:01:47,680 --> 00:01:52,560
and processes

00:01:49,840 --> 00:01:54,479
pct that is productization core team

00:01:52,560 --> 00:01:57,200
acts as a central service and it is

00:01:54,479 --> 00:01:58,960
responsible for enforcing such gates

00:01:57,200 --> 00:02:00,479
such gates are applied to all the

00:01:58,960 --> 00:02:02,399
middleware products and they are

00:02:00,479 --> 00:02:04,719
mandatory to prevent redhead

00:02:02,399 --> 00:02:06,960
from being vulnerable to either legal

00:02:04,719 --> 00:02:09,520
actions damage to reputation

00:02:06,960 --> 00:02:10,000
loss of business or government sanctions

00:02:09,520 --> 00:02:12,319
hence

00:02:10,000 --> 00:02:14,560
these gates need to be run at least once

00:02:12,319 --> 00:02:16,879
before any customer facing release

00:02:14,560 --> 00:02:17,840
but it is helpful to run them as early

00:02:16,879 --> 00:02:20,000
as possible

00:02:17,840 --> 00:02:22,800
in the release process as they help in

00:02:20,000 --> 00:02:25,200
early identification of problems

00:02:22,800 --> 00:02:27,120
now why are they used they are used to

00:02:25,200 --> 00:02:28,720
make sure that the checks continue to

00:02:27,120 --> 00:02:30,959
happen and guarantee

00:02:28,720 --> 00:02:32,640
not only compliance with red hat release

00:02:30,959 --> 00:02:35,040
policies and standards

00:02:32,640 --> 00:02:36,080
but also to see that a uniform set of

00:02:35,040 --> 00:02:38,480
checks is applied

00:02:36,080 --> 00:02:40,560
across all the products all the product

00:02:38,480 --> 00:02:41,280
gate checks are documented in a single

00:02:40,560 --> 00:02:43,280
place

00:02:41,280 --> 00:02:45,360
and problems are not at all forgotten

00:02:43,280 --> 00:02:47,680
and a proper plan is put in place

00:02:45,360 --> 00:02:49,760
to resolve them also they check that

00:02:47,680 --> 00:02:52,319
customers get quality software and their

00:02:49,760 --> 00:02:54,800
experience is not at all compromised

00:02:52,319 --> 00:02:56,400
workflow these kits have been divided

00:02:54,800 --> 00:02:58,080
into three main categories

00:02:56,400 --> 00:03:00,319
first is gates on the code and

00:02:58,080 --> 00:03:01,280
deliverables then comes gates on the

00:03:00,319 --> 00:03:02,959
infrastructure

00:03:01,280 --> 00:03:04,319
and then comes kids on red hat

00:03:02,959 --> 00:03:06,560
requirements

00:03:04,319 --> 00:03:07,519
as the name suggests gates on the code

00:03:06,560 --> 00:03:09,440
and deliverables

00:03:07,519 --> 00:03:11,599
define the checks that have to be done

00:03:09,440 --> 00:03:13,360
on the source code and the deliverables

00:03:11,599 --> 00:03:14,720
and the characteristics that the code

00:03:13,360 --> 00:03:16,720
must comply to

00:03:14,720 --> 00:03:18,560
different and specialized checks can be

00:03:16,720 --> 00:03:19,840
applied depending on the underlying

00:03:18,560 --> 00:03:21,680
technology

00:03:19,840 --> 00:03:23,840
gigs on infrastructure define the

00:03:21,680 --> 00:03:25,599
characteristics that the infrastructure

00:03:23,840 --> 00:03:27,680
involved in the build and distribution

00:03:25,599 --> 00:03:29,920
process must comply to

00:03:27,680 --> 00:03:30,799
this checks ensure that the bills are

00:03:29,920 --> 00:03:33,440
done in proper

00:03:30,799 --> 00:03:34,239
redhead internal certified systems such

00:03:33,440 --> 00:03:38,400
as brew

00:03:34,239 --> 00:03:38,799
osbs pnc etc and that the delivery is

00:03:38,400 --> 00:03:40,720
done

00:03:38,799 --> 00:03:42,000
via a proper redhead distribution

00:03:40,720 --> 00:03:44,560
channel

00:03:42,000 --> 00:03:46,480
gates on redhead requirements define the

00:03:44,560 --> 00:03:48,319
additional checks that have to be done

00:03:46,480 --> 00:03:49,120
in the overall build and distribution

00:03:48,319 --> 00:03:51,280
process

00:03:49,120 --> 00:03:53,200
which may include general and strategic

00:03:51,280 --> 00:03:55,760
redhead policies

00:03:53,200 --> 00:03:57,599
workflow diagram this diagram depicts

00:03:55,760 --> 00:03:58,720
the working scenario of gate checks

00:03:57,599 --> 00:04:00,799
implementation

00:03:58,720 --> 00:04:03,040
there are different jenkins pipeline and

00:04:00,799 --> 00:04:03,680
jobs set up for the execution of these

00:04:03,040 --> 00:04:05,280
gates

00:04:03,680 --> 00:04:07,360
which are scheduled to run the

00:04:05,280 --> 00:04:10,080
appropriate check for that product

00:04:07,360 --> 00:04:12,080
and produce junit report this junit

00:04:10,080 --> 00:04:12,400
report are further stored in results to

00:04:12,080 --> 00:04:14,400
be

00:04:12,400 --> 00:04:17,359
and the status of the gate checks can be

00:04:14,400 --> 00:04:20,079
displayed on dashboard

00:04:17,359 --> 00:04:21,840
so as i said they provide dashboard

00:04:20,079 --> 00:04:23,759
which shows the exact state of the

00:04:21,840 --> 00:04:24,639
checks and which can be monitored by all

00:04:23,759 --> 00:04:26,960
the groups

00:04:24,639 --> 00:04:28,000
this allow everyone to see the status of

00:04:26,960 --> 00:04:30,000
products which are not

00:04:28,000 --> 00:04:32,479
following due diligence the gates

00:04:30,000 --> 00:04:34,800
pipeline generate junit report which is

00:04:32,479 --> 00:04:36,639
further stored in results db

00:04:34,800 --> 00:04:39,040
this report is then converted into

00:04:36,639 --> 00:04:41,120
appropriate json message format

00:04:39,040 --> 00:04:42,160
to publish on umb which are then

00:04:41,120 --> 00:04:44,639
retrieved by

00:04:42,160 --> 00:04:47,680
resultsdb updater microservice and then

00:04:44,639 --> 00:04:49,840
put in two results db

00:04:47,680 --> 00:04:51,280
this is the snapshot of one of the gates

00:04:49,840 --> 00:04:53,520
pipeline execution

00:04:51,280 --> 00:04:54,720
it shows the successful execution of the

00:04:53,520 --> 00:04:57,199
gates pipeline

00:04:54,720 --> 00:05:00,240
which means that all the gate checks are

00:04:57,199 --> 00:05:02,479
passing for that particular product

00:05:00,240 --> 00:05:04,479
okay so after the completion of the

00:05:02,479 --> 00:05:05,759
pipeline build we can go to the test

00:05:04,479 --> 00:05:08,639
result analyzer

00:05:05,759 --> 00:05:10,560
to analyze the execution result this

00:05:08,639 --> 00:05:11,360
screenshot shows all the different gate

00:05:10,560 --> 00:05:13,440
stacks

00:05:11,360 --> 00:05:16,960
which are either passing failing or

00:05:13,440 --> 00:05:16,960
skipped for that particular build

00:05:19,759 --> 00:05:24,080
so now the test result analyzer also

00:05:23,759 --> 00:05:26,400
shows

00:05:24,080 --> 00:05:27,600
the build details for that product in a

00:05:26,400 --> 00:05:29,840
graphical manner

00:05:27,600 --> 00:05:31,600
that is it shows the percentage of test

00:05:29,840 --> 00:05:33,440
cases which are passing

00:05:31,600 --> 00:05:35,759
the percentage of test cases which are

00:05:33,440 --> 00:05:38,560
failing and the percentage of test cases

00:05:35,759 --> 00:05:41,440
which are skipped

00:05:38,560 --> 00:05:43,199
so as we can see from this snapshot that

00:05:41,440 --> 00:05:45,840
four test cases are failing

00:05:43,199 --> 00:05:48,080
so then the question arises what happens

00:05:45,840 --> 00:05:51,199
if any of the test case fail

00:05:48,080 --> 00:05:53,120
so here comes a picture exception if any

00:05:51,199 --> 00:05:53,680
of the gate checks fail for certain

00:05:53,120 --> 00:05:55,919
product

00:05:53,680 --> 00:05:57,919
before its customer facing release then

00:05:55,919 --> 00:05:59,919
it is considered as an exception

00:05:57,919 --> 00:06:02,000
it becomes a concern from legal

00:05:59,919 --> 00:06:04,880
perspective and the team needs to file

00:06:02,000 --> 00:06:06,720
an exception and store it involved they

00:06:04,880 --> 00:06:08,960
also need needs to be worked upon and

00:06:06,720 --> 00:06:11,120
resolved before next customer release

00:06:08,960 --> 00:06:13,199
the world results can also be stored in

00:06:11,120 --> 00:06:16,479
resultstv for better analysis and

00:06:13,199 --> 00:06:18,960
auditing using exception pipeline

00:06:16,479 --> 00:06:20,880
current status so currently these gates

00:06:18,960 --> 00:06:23,520
are carried out manually

00:06:20,880 --> 00:06:25,280
in the manual execution it asks the user

00:06:23,520 --> 00:06:27,680
to explicitly mention

00:06:25,280 --> 00:06:28,479
whether the particular test case is is

00:06:27,680 --> 00:06:30,639
passing or

00:06:28,479 --> 00:06:32,960
failing for their product based on the

00:06:30,639 --> 00:06:35,680
user input the test cases will run

00:06:32,960 --> 00:06:37,199
producing the results so currently

00:06:35,680 --> 00:06:39,759
product team needs to

00:06:37,199 --> 00:06:42,000
run the checks with their own solution

00:06:39,759 --> 00:06:43,280
existing infrastructure and by answering

00:06:42,000 --> 00:06:46,560
a list of questions

00:06:43,280 --> 00:06:48,880
related to those checks now

00:06:46,560 --> 00:06:50,479
our team is focusing on automating these

00:06:48,880 --> 00:06:52,240
gates and integrating it

00:06:50,479 --> 00:06:54,560
with c pass that is continuous

00:06:52,240 --> 00:06:56,400
productization as a service

00:06:54,560 --> 00:06:58,400
this summer i helped the team in

00:06:56,400 --> 00:07:00,560
automating one of the gate checks

00:06:58,400 --> 00:07:02,479
and also admitting the process of

00:07:00,560 --> 00:07:03,520
releasing a new version of the kids

00:07:02,479 --> 00:07:05,919
pipeline

00:07:03,520 --> 00:07:08,400
automated gates are planned to receive

00:07:05,919 --> 00:07:09,840
url to its configuration file as an

00:07:08,400 --> 00:07:12,560
input parameter

00:07:09,840 --> 00:07:14,800
this configuration files are nothing but

00:07:12,560 --> 00:07:17,120
files containing some metadata needed to

00:07:14,800 --> 00:07:18,400
run the game

00:07:17,120 --> 00:07:20,240
these are certain links and

00:07:18,400 --> 00:07:23,120
documentation to help you know

00:07:20,240 --> 00:07:23,440
more about our team and our work this

00:07:23,120 --> 00:07:25,919
was

00:07:23,440 --> 00:07:28,400
it from my side lastly i would like to

00:07:25,919 --> 00:07:29,440
thank my entire cp team and middleweight

00:07:28,400 --> 00:07:32,000
broadcast team

00:07:29,440 --> 00:07:34,319
for providing me such a nice experience

00:07:32,000 --> 00:07:36,639
and special thanks to the pnt team

00:07:34,319 --> 00:07:38,560
for giving me an opportunity to present

00:07:36,639 --> 00:07:40,880
my talk in front of you all

00:07:38,560 --> 00:07:42,960
thanks to all of you for listening to my

00:07:40,880 --> 00:07:46,160
talk if you have any questions

00:07:42,960 --> 00:07:48,400
i would be happy to discuss them thank

00:07:46,160 --> 00:07:48,400
you

00:07:52,240 --> 00:07:55,680
thank you very much neri that was an

00:07:53,840 --> 00:07:57,919
excellent presentation

00:07:55,680 --> 00:08:00,080
and come join us on video and there you

00:07:57,919 --> 00:08:00,080
are

00:08:01,520 --> 00:08:05,599
hi hi you're perfect timing

00:08:06,240 --> 00:08:09,440
so excellent talk and very important

00:08:08,479 --> 00:08:12,560
subject

00:08:09,440 --> 00:08:14,160
thank you i would be happy if uh

00:08:12,560 --> 00:08:15,919
someone have a question i will be happy

00:08:14,160 --> 00:08:17,840
to discuss them

00:08:15,919 --> 00:08:20,160
uh would anyone like to ask an area any

00:08:17,840 --> 00:08:27,840
questions

00:08:20,160 --> 00:08:27,840
we definitely have folks in the channel

00:08:32,719 --> 00:08:35,680
let's see is there an aries or anything

00:08:34,159 --> 00:08:37,680
else you would like to add or any

00:08:35,680 --> 00:08:39,760
comments you'd like to make

00:08:37,680 --> 00:08:42,080
uh i would just like to tell that my

00:08:39,760 --> 00:08:45,279
entire summer experience was wonderful

00:08:42,080 --> 00:08:46,959
i got to learn a lot of things and each

00:08:45,279 --> 00:08:49,760
and everyone was very helpful and

00:08:46,959 --> 00:08:51,440
supportive so thank you very much

00:08:49,760 --> 00:08:52,880
absolutely well we're glad to have you

00:08:51,440 --> 00:08:54,160
i'm sorry you had to join us during the

00:08:52,880 --> 00:08:57,600
summer of covid but

00:08:54,160 --> 00:08:57,600
we're glad to have you work with us

00:08:58,880 --> 00:09:02,480
okay anybody questions

00:09:06,160 --> 00:09:10,000
okay well if we don't have any questions

00:09:08,080 --> 00:09:12,720
then thank you very much neri

00:09:10,000 --> 00:09:14,100
thank you thank you all okay have a good

00:09:12,720 --> 00:09:17,159
evening

00:09:14,100 --> 00:09:17,159
[Music]

00:09:18,480 --> 00:09:22,000
that was our last talk for this

00:09:20,399 --> 00:09:24,080
afternoon uh that was

00:09:22,000 --> 00:09:26,000
middleware gate checks by neri shah it's

00:09:24,080 --> 00:09:27,920
a very important presentation

00:09:26,000 --> 00:09:29,200
and it's very important to make sure

00:09:27,920 --> 00:09:30,320
that content doesn't go to where you

00:09:29,200 --> 00:09:31,760
don't expect it to

00:09:30,320 --> 00:09:33,360
so it's a very important part of the

00:09:31,760 --> 00:09:35,839
middleware portfolio

00:09:33,360 --> 00:09:38,720
and the sort of pipelines are definitely

00:09:35,839 --> 00:09:41,440
very interesting

00:09:38,720 --> 00:09:42,720
so thanks everyone who's been watching i

00:09:41,440 --> 00:09:45,200
appreciate your time

00:09:42,720 --> 00:09:49,519
and i hope you got something good out of

00:09:45,200 --> 00:09:49,519

YouTube URL: https://www.youtube.com/watch?v=EaicpK3yZGo


