Title: Latest News In Container Security
Publication date: 2020-10-06
Playlist: DevConfUS 2020
Description: 
	Speaker: Daniel Walsh

This talk will cover the latest technology in container security.
This will be partial talk and partial demonstration.

Will demonstrate new features in CRI-O, Buildah, Podman and other tools to increase container separation and to allow more people to run more secure containers in their infrastructure.
Captions: 
	00:00:00,320 --> 00:00:04,240
i think it's been a while we can go

00:00:03,280 --> 00:00:07,120
ahead and start

00:00:04,240 --> 00:00:08,639
the presentation okay so we'll be

00:00:07,120 --> 00:00:10,480
talking today about uh

00:00:08,639 --> 00:00:11,679
sort of the state of container security

00:00:10,480 --> 00:00:14,880
uh i did

00:00:11,679 --> 00:00:16,640
this talk at the devconf check

00:00:14,880 --> 00:00:18,240
and this will be a little bit of an

00:00:16,640 --> 00:00:22,560
update on it um

00:00:18,240 --> 00:00:25,840
but i think it's a pretty interesting

00:00:22,560 --> 00:00:30,000
some ideas that we've been uh going over

00:00:25,840 --> 00:00:32,399
um so um for the

00:00:30,000 --> 00:00:33,520
at def con check i actually found that

00:00:32,399 --> 00:00:36,079
uh a lot of people

00:00:33,520 --> 00:00:37,680
in europe don't know who goldilocks is i

00:00:36,079 --> 00:00:38,800
don't know the story of goldilocks not

00:00:37,680 --> 00:00:41,760
three beers

00:00:38,800 --> 00:00:44,160
um but um so i had to run a video there

00:00:41,760 --> 00:00:47,120
hopefully since this is the u.s one

00:00:44,160 --> 00:00:49,520
um people understand it but basically

00:00:47,120 --> 00:00:52,160
the basic idea of the story is that

00:00:49,520 --> 00:00:54,079
um goldilocks goes into a house with

00:00:52,160 --> 00:00:55,760
three beers there's a mama bear a papa

00:00:54,079 --> 00:00:59,199
bear and a baby bear

00:00:55,760 --> 00:01:00,160
and basically she you know tries to eat

00:00:59,199 --> 00:01:01,920
some pirates she

00:01:00,160 --> 00:01:03,440
the papa bears is too hot the mouth my

00:01:01,920 --> 00:01:06,080
beard is too cold and the

00:01:03,440 --> 00:01:07,439
baby bears is just right um sits in a

00:01:06,080 --> 00:01:09,920
chair the papa bears

00:01:07,439 --> 00:01:11,280
too hard mama bear's too soft and baby's

00:01:09,920 --> 00:01:12,640
beard's just right and that's

00:01:11,280 --> 00:01:14,320
basically the idea is everything she

00:01:12,640 --> 00:01:16,640
goes through she's always picking the

00:01:14,320 --> 00:01:19,840
just right moment of the uh

00:01:16,640 --> 00:01:23,119
of uh you know the the story

00:01:19,840 --> 00:01:23,680
um and so you know a lot of times when

00:01:23,119 --> 00:01:27,040
we

00:01:23,680 --> 00:01:28,880
um you know look at container security

00:01:27,040 --> 00:01:30,720
um if we may contain a security or make

00:01:28,880 --> 00:01:33,200
any type of security too hard

00:01:30,720 --> 00:01:34,000
um people just turn the um turn the

00:01:33,200 --> 00:01:37,040
security off

00:01:34,000 --> 00:01:38,720
so this is you know if we crank up

00:01:37,040 --> 00:01:40,000
security so high that you can't get your

00:01:38,720 --> 00:01:41,280
application to work then you're just

00:01:40,000 --> 00:01:44,479
going to turn it off

00:01:41,280 --> 00:01:47,680
um and then if we make um

00:01:44,479 --> 00:01:50,000
you know security too soft um basically

00:01:47,680 --> 00:01:51,680
you know what's the purpose if if if all

00:01:50,000 --> 00:01:53,840
we're doing is putting chicken fire

00:01:51,680 --> 00:01:54,720
chicken wire around the prison you know

00:01:53,840 --> 00:01:56,799
it's not really

00:01:54,720 --> 00:01:57,920
you know doing anything to prevent

00:01:56,799 --> 00:02:00,880
breakouts so

00:01:57,920 --> 00:02:01,360
um so what we want to get to when we're

00:02:00,880 --> 00:02:03,119
doing

00:02:01,360 --> 00:02:04,799
looking at container security we're

00:02:03,119 --> 00:02:06,719
always sort of taking that middle ground

00:02:04,799 --> 00:02:09,679
we're always trying to get to the

00:02:06,719 --> 00:02:10,640
point of being just right for for

00:02:09,679 --> 00:02:12,400
security

00:02:10,640 --> 00:02:14,000
um and that's really what goldilocks is

00:02:12,400 --> 00:02:17,200
about all about

00:02:14,000 --> 00:02:19,520
so when we look at um you know when i

00:02:17,200 --> 00:02:20,800
look at container security i i realize

00:02:19,520 --> 00:02:23,680
that

00:02:20,800 --> 00:02:24,959
no one ever uh turns concert you know

00:02:23,680 --> 00:02:28,000
turns security up

00:02:24,959 --> 00:02:28,800
right they they they basically um you

00:02:28,000 --> 00:02:30,640
know

00:02:28,800 --> 00:02:32,560
you know people never run the commands

00:02:30,640 --> 00:02:35,920
podman run capitability

00:02:32,560 --> 00:02:36,560
um remove uh there's a table on the

00:02:35,920 --> 00:02:39,120
slide

00:02:36,560 --> 00:02:40,239
uh but basically they never say you know

00:02:39,120 --> 00:02:42,480
take away some

00:02:40,239 --> 00:02:43,280
uh take away some privileges from my

00:02:42,480 --> 00:02:45,280
container

00:02:43,280 --> 00:02:46,959
um what they usually do is is things

00:02:45,280 --> 00:02:48,080
like run privileged right so if i'm

00:02:46,959 --> 00:02:49,440
running a container

00:02:48,080 --> 00:02:51,360
and it doesn't work they're just going

00:02:49,440 --> 00:02:53,200
to run pogba and run privileged and and

00:02:51,360 --> 00:02:54,560
the container works and they're happy

00:02:53,200 --> 00:02:57,360
now even though they've turned off all

00:02:54,560 --> 00:02:59,280
the security um and then of course

00:02:57,360 --> 00:03:00,959
historically with sc linux

00:02:59,280 --> 00:03:02,640
uh the joke is always you know how do

00:03:00,959 --> 00:03:05,760
you handle sd linux well you're

00:03:02,640 --> 00:03:06,720
set in which basically moves everybody

00:03:05,760 --> 00:03:09,760
back to

00:03:06,720 --> 00:03:12,159
the mama bear moment and uh

00:03:09,760 --> 00:03:13,280
um so so bottom line with container

00:03:12,159 --> 00:03:15,920
security is

00:03:13,280 --> 00:03:18,000
is people take the defaults or they turn

00:03:15,920 --> 00:03:20,720
it off so anytime people come into the

00:03:18,000 --> 00:03:21,360
equation um those are really the two

00:03:20,720 --> 00:03:24,239
choices

00:03:21,360 --> 00:03:25,440
uh we do so because of that you know

00:03:24,239 --> 00:03:28,799
again we go with

00:03:25,440 --> 00:03:31,200
the medium level right we get the uh the

00:03:28,799 --> 00:03:32,640
goldilocks you know the middle ground

00:03:31,200 --> 00:03:33,519
and so the rest of this talk is going to

00:03:32,640 --> 00:03:35,599
be talking about

00:03:33,519 --> 00:03:36,879
you know how do i take you know move

00:03:35,599 --> 00:03:40,480
from goldilocks

00:03:36,879 --> 00:03:41,040
towards papa bear how do i get users to

00:03:40,480 --> 00:03:43,760
run

00:03:41,040 --> 00:03:45,680
and mostly you know more securely and

00:03:43,760 --> 00:03:46,000
without the users having to do anything

00:03:45,680 --> 00:03:47,519
because

00:03:46,000 --> 00:03:48,720
if the users again if the users have to

00:03:47,519 --> 00:03:50,080
do anything all they're going to do is

00:03:48,720 --> 00:03:53,519
turn things off

00:03:50,080 --> 00:03:54,959
um how do i get to more security without

00:03:53,519 --> 00:03:58,000
the user taking action

00:03:54,959 --> 00:04:01,120
so one of the things we look at is sort

00:03:58,000 --> 00:04:03,760
of forcing the users to be more secure

00:04:01,120 --> 00:04:05,360
so when it comes to running a container

00:04:03,760 --> 00:04:07,920
when you want to run a container

00:04:05,360 --> 00:04:09,519
in the environment usually there's three

00:04:07,920 --> 00:04:11,680
different entities that have input

00:04:09,519 --> 00:04:13,120
into running the running the container

00:04:11,680 --> 00:04:15,280
the first one we're going to look at

00:04:13,120 --> 00:04:17,440
is actually the user all right so you

00:04:15,280 --> 00:04:19,120
know basically someone sitting

00:04:17,440 --> 00:04:20,720
you know running a podman command or a

00:04:19,120 --> 00:04:24,240
docker command

00:04:20,720 --> 00:04:27,120
or you know launching a kubernetes

00:04:24,240 --> 00:04:28,000
or an open shift container right they're

00:04:27,120 --> 00:04:29,680
going to launch a container

00:04:28,000 --> 00:04:31,040
they're going to write a yaml file to

00:04:29,680 --> 00:04:32,960
launch the container

00:04:31,040 --> 00:04:34,800
uh well one of the things that we we've

00:04:32,960 --> 00:04:36,720
done in openshift is

00:04:34,800 --> 00:04:38,240
we've sort of changed the defaults if

00:04:36,720 --> 00:04:39,360
you run you know if anybody runs

00:04:38,240 --> 00:04:42,160
containers

00:04:39,360 --> 00:04:44,400
in uh you know podman or darker they

00:04:42,160 --> 00:04:46,560
usually default to running his route

00:04:44,400 --> 00:04:49,280
um but openshift basically out of the

00:04:46,560 --> 00:04:51,360
box forces everybody to run as non-route

00:04:49,280 --> 00:04:52,479
um and and basically makes you have to

00:04:51,360 --> 00:04:55,680
jump through hoops

00:04:52,479 --> 00:04:56,000
to uh you know to basically run a root

00:04:55,680 --> 00:04:57,919
running

00:04:56,000 --> 00:05:00,080
container um which you know sort of

00:04:57,919 --> 00:05:02,080
forces good practice into the

00:05:00,080 --> 00:05:03,520
to the users but we have to also you

00:05:02,080 --> 00:05:04,960
know the developers have to develop the

00:05:03,520 --> 00:05:06,080
containers so they'll just work in

00:05:04,960 --> 00:05:07,360
non-mood environments

00:05:06,080 --> 00:05:09,199
so what we're trying to do is we're

00:05:07,360 --> 00:05:10,240
trying to use a little stick towards the

00:05:09,199 --> 00:05:12,000
developers

00:05:10,240 --> 00:05:13,360
or or towards you know everybody's

00:05:12,000 --> 00:05:15,840
building container images

00:05:13,360 --> 00:05:17,440
to move them to the ability to run is

00:05:15,840 --> 00:05:19,520
non-root and that that to me is one of

00:05:17,440 --> 00:05:21,199
the key factors in getting

00:05:19,520 --> 00:05:22,840
containers to be more secure in your

00:05:21,199 --> 00:05:25,680
environment is just get rid of root

00:05:22,840 --> 00:05:27,759
altogether um

00:05:25,680 --> 00:05:29,039
you know so i wrote an article back in

00:05:27,759 --> 00:05:30,720
2018 but

00:05:29,039 --> 00:05:32,639
basically said just say no to root

00:05:30,720 --> 00:05:34,160
inside of containers and i really talked

00:05:32,639 --> 00:05:35,520
a lot about a lot of the security

00:05:34,160 --> 00:05:37,280
features we have to add

00:05:35,520 --> 00:05:38,800
to containers is all about getting rid

00:05:37,280 --> 00:05:42,080
of root right getting rid of

00:05:38,800 --> 00:05:42,479
this powerful root user in the system um

00:05:42,080 --> 00:05:44,800
and

00:05:42,479 --> 00:05:46,720
and really containers you know and just

00:05:44,800 --> 00:05:48,960
about all workloads don't need

00:05:46,720 --> 00:05:49,759
don't need roots theoretically the only

00:05:48,960 --> 00:05:52,560
reason you need

00:05:49,759 --> 00:05:53,840
root is to modify the system and really

00:05:52,560 --> 00:05:54,960
we won't we don't want containers

00:05:53,840 --> 00:05:57,919
running the system right your

00:05:54,960 --> 00:05:59,840
your web services your databases they

00:05:57,919 --> 00:06:00,960
all run perfectly fine without being

00:05:59,840 --> 00:06:03,120
rude in the system

00:06:00,960 --> 00:06:04,160
it's just that you know it's really

00:06:03,120 --> 00:06:06,000
because of the way we

00:06:04,160 --> 00:06:07,680
build container images and the way we

00:06:06,000 --> 00:06:09,680
traditionally install software

00:06:07,680 --> 00:06:11,520
is we make an assumption that the system

00:06:09,680 --> 00:06:13,520
you know when it's machine boots up

00:06:11,520 --> 00:06:15,039
the process that the apache server is

00:06:13,520 --> 00:06:16,639
going to get started by root

00:06:15,039 --> 00:06:18,400
and then be you know it'll drop

00:06:16,639 --> 00:06:20,080
privileges uh whatever

00:06:18,400 --> 00:06:22,240
in the container world though we really

00:06:20,080 --> 00:06:22,639
want to start applications right off the

00:06:22,240 --> 00:06:24,319
bat

00:06:22,639 --> 00:06:25,840
without privileges so it's a little

00:06:24,319 --> 00:06:27,360
different mindset from

00:06:25,840 --> 00:06:29,520
sort of traditional way we install

00:06:27,360 --> 00:06:31,120
software so the next

00:06:29,520 --> 00:06:32,720
the next entity when we want to run a

00:06:31,120 --> 00:06:35,759
container on a system

00:06:32,720 --> 00:06:38,800
is is the container engine okay

00:06:35,759 --> 00:06:40,319
and and the container engine um you know

00:06:38,800 --> 00:06:42,479
you know that everybody you know

00:06:40,319 --> 00:06:46,479
familiar with is darker

00:06:42,479 --> 00:06:50,000
and um but docker was is sort of a

00:06:46,479 --> 00:06:51,440
you know a tool for all entities um so

00:06:50,000 --> 00:06:53,360
you know if you think about you know

00:06:51,440 --> 00:06:55,440
what provides the default

00:06:53,360 --> 00:06:57,120
you know se linux label what provides

00:06:55,440 --> 00:06:57,680
the default list of capabilities what

00:06:57,120 --> 00:06:59,759
def

00:06:57,680 --> 00:07:01,599
provides the default list of set cops

00:06:59,759 --> 00:07:03,360
that's all in the container engine

00:07:01,599 --> 00:07:05,199
well i i've always had a big problem

00:07:03,360 --> 00:07:07,360
with the darker demon in that

00:07:05,199 --> 00:07:08,319
it runs this route right and it

00:07:07,360 --> 00:07:11,360
basically

00:07:08,319 --> 00:07:13,360
you know it's a big demon that all the

00:07:11,360 --> 00:07:14,639
anybody interacting with it has to you

00:07:13,360 --> 00:07:17,759
know connect

00:07:14,639 --> 00:07:18,639
over a socket and be able to launch the

00:07:17,759 --> 00:07:21,440
containers

00:07:18,639 --> 00:07:23,039
well you know i like to differentiate

00:07:21,440 --> 00:07:26,319
when i look at containers i write

00:07:23,039 --> 00:07:28,319
containers underneath kubernetes is is

00:07:26,319 --> 00:07:30,160
containers in production right so when i

00:07:28,319 --> 00:07:32,319
run my containers in production i really

00:07:30,160 --> 00:07:34,319
want to write them a lot tighter

00:07:32,319 --> 00:07:36,080
security wise than maybe when i'm

00:07:34,319 --> 00:07:37,840
developing containers so if i'm just

00:07:36,080 --> 00:07:39,840
playing around with containers

00:07:37,840 --> 00:07:42,000
uh you know or even when i'm building

00:07:39,840 --> 00:07:43,680
containers i need different privileges

00:07:42,000 --> 00:07:45,599
than when i'm you know running

00:07:43,680 --> 00:07:47,199
containers in production but if we only

00:07:45,599 --> 00:07:48,479
have one container engine and that

00:07:47,199 --> 00:07:50,319
container engine has

00:07:48,479 --> 00:07:52,160
you know it's hard-coded defaults inside

00:07:50,319 --> 00:07:54,000
of it then all of a sudden all different

00:07:52,160 --> 00:07:56,879
types of workloads end up being

00:07:54,000 --> 00:07:58,319
a standard um you know following the

00:07:56,879 --> 00:07:59,039
same rules so running containers in

00:07:58,319 --> 00:08:00,400
production

00:07:59,039 --> 00:08:02,560
building containers are playing with

00:08:00,400 --> 00:08:04,319
containers all have the same default

00:08:02,560 --> 00:08:06,160
rules from a security point of view

00:08:04,319 --> 00:08:07,599
and i'd really like to at least take the

00:08:06,160 --> 00:08:10,160
ones running my production

00:08:07,599 --> 00:08:10,639
and move them closer to papa bear right

00:08:10,160 --> 00:08:11,840
so

00:08:10,639 --> 00:08:13,680
one of the things we've done over the

00:08:11,840 --> 00:08:14,800
last couple of years is we took what was

00:08:13,680 --> 00:08:16,240
the docker demon

00:08:14,800 --> 00:08:18,479
and looked at the functionality that it

00:08:16,240 --> 00:08:19,840
did and we broke it into a series of

00:08:18,479 --> 00:08:21,840
other container engines

00:08:19,840 --> 00:08:22,879
so we have cryo as a container engine

00:08:21,840 --> 00:08:25,120
whose main job

00:08:22,879 --> 00:08:27,039
his only job is to run kubernetes and

00:08:25,120 --> 00:08:29,039
that's running containers of production

00:08:27,039 --> 00:08:30,240
and because of that we ship trio with

00:08:29,039 --> 00:08:32,320
tighter security

00:08:30,240 --> 00:08:33,279
then we would ship you know say the

00:08:32,320 --> 00:08:35,839
docker demon

00:08:33,279 --> 00:08:37,039
um or even podman and the other tools uh

00:08:35,839 --> 00:08:40,240
podman was a tool

00:08:37,039 --> 00:08:42,640
to you know to implement pretty much the

00:08:40,240 --> 00:08:43,599
docker command line tool originally

00:08:42,640 --> 00:08:45,600
although um

00:08:43,599 --> 00:08:47,519
and and our goal was to make you know

00:08:45,600 --> 00:08:48,640
running containers switching from docker

00:08:47,519 --> 00:08:50,560
to something else

00:08:48,640 --> 00:08:52,560
as easy as possible so we really just

00:08:50,560 --> 00:08:55,519
copied the entire cli

00:08:52,560 --> 00:08:56,160
um but we used some new concepts and and

00:08:55,519 --> 00:08:57,920
what i

00:08:56,160 --> 00:08:59,680
felt was a better security model of

00:08:57,920 --> 00:09:00,399
using sort of standard client server

00:08:59,680 --> 00:09:02,560
model

00:09:00,399 --> 00:09:04,720
um instead of using the client server

00:09:02,560 --> 00:09:06,640
model to use the fork exec model so that

00:09:04,720 --> 00:09:08,800
you know podman is a parent of the of

00:09:06,640 --> 00:09:12,320
the container that it's launching

00:09:08,800 --> 00:09:14,160
um and then builder is a is lastly is a

00:09:12,320 --> 00:09:15,920
tool for building container images

00:09:14,160 --> 00:09:17,920
sports things like docker files

00:09:15,920 --> 00:09:19,760
but actually also allows you to just

00:09:17,920 --> 00:09:22,160
create a directory on disk

00:09:19,760 --> 00:09:23,680
and put content into it and really allow

00:09:22,160 --> 00:09:24,399
you to really get deep down and

00:09:23,680 --> 00:09:25,920
controlling

00:09:24,399 --> 00:09:27,680
what's going inside your container

00:09:25,920 --> 00:09:29,120
images uh but

00:09:27,680 --> 00:09:30,720
the really interesting thing that

00:09:29,120 --> 00:09:32,880
happened when we built these container

00:09:30,720 --> 00:09:34,080
engines is people started experimenting

00:09:32,880 --> 00:09:35,760
and adding features

00:09:34,080 --> 00:09:37,279
to actually allow them all to run

00:09:35,760 --> 00:09:40,080
without requiring root

00:09:37,279 --> 00:09:41,680
not cryo but podman and builder and we

00:09:40,080 --> 00:09:43,600
started to see that since we had

00:09:41,680 --> 00:09:45,040
sort of smaller subsets we could start

00:09:43,600 --> 00:09:47,279
combining them back up

00:09:45,040 --> 00:09:49,279
so imagine running a your kubernetes

00:09:47,279 --> 00:09:50,000
cluster and you take a bunch of builders

00:09:49,279 --> 00:09:51,760
and stick

00:09:50,000 --> 00:09:53,839
them into them and now you can have your

00:09:51,760 --> 00:09:54,800
entire ci cd system running inside of

00:09:53,839 --> 00:09:57,360
kubernetes

00:09:54,800 --> 00:09:58,800
uh with your lockdown builder containers

00:09:57,360 --> 00:09:59,600
locked down by the kubernetes

00:09:58,800 --> 00:10:01,600
environment

00:09:59,600 --> 00:10:03,680
um as if you try to do that with darker

00:10:01,600 --> 00:10:04,480
what people do is they inject the darker

00:10:03,680 --> 00:10:07,519
socket

00:10:04,480 --> 00:10:08,399
into the cryo into the kubernetes

00:10:07,519 --> 00:10:10,560
containers

00:10:08,399 --> 00:10:11,920
and then you know allow them to talk to

00:10:10,560 --> 00:10:13,920
the docker socket and

00:10:11,920 --> 00:10:15,680
years ago i wrote an article that said

00:10:13,920 --> 00:10:17,360
access to the docker socket is the most

00:10:15,680 --> 00:10:18,000
dangerous thing you can do on a computer

00:10:17,360 --> 00:10:20,079
system

00:10:18,000 --> 00:10:22,000
because you can basically become root

00:10:20,079 --> 00:10:24,480
take over the machine and then

00:10:22,000 --> 00:10:25,360
eliminate all logging that you did it um

00:10:24,480 --> 00:10:27,760
so anyway so

00:10:25,360 --> 00:10:29,440
so that's one way to get more security

00:10:27,760 --> 00:10:30,800
is by breaking apart

00:10:29,440 --> 00:10:32,720
you know each of the container

00:10:30,800 --> 00:10:34,240
operations into each container engine

00:10:32,720 --> 00:10:36,320
and then the container engines can have

00:10:34,240 --> 00:10:39,440
different defaults

00:10:36,320 --> 00:10:41,279
so the the last step is is uh

00:10:39,440 --> 00:10:43,040
use basically the person the engineer

00:10:41,279 --> 00:10:44,560
the developer who's developing the

00:10:43,040 --> 00:10:45,440
application that you can run inside of a

00:10:44,560 --> 00:10:47,040
container

00:10:45,440 --> 00:10:49,200
um and that that's the person that's

00:10:47,040 --> 00:10:50,800
building you know oci images the images

00:10:49,200 --> 00:10:53,040
that set out at docker io

00:10:50,800 --> 00:10:54,880
and and builder io and most of the rest

00:10:53,040 --> 00:10:57,680
of this talk is going to talk about

00:10:54,880 --> 00:10:59,040
some of my my ideas about how we could

00:10:57,680 --> 00:11:01,360
do a better job

00:10:59,040 --> 00:11:02,480
you know and get getting more input from

00:11:01,360 --> 00:11:04,560
the developer

00:11:02,480 --> 00:11:06,079
into saying my container will run

00:11:04,560 --> 00:11:07,360
perfectly fine with these tighter

00:11:06,079 --> 00:11:08,959
security controls

00:11:07,360 --> 00:11:10,320
um and then you know give us an

00:11:08,959 --> 00:11:11,600
opportunity because right now there's no

00:11:10,320 --> 00:11:13,200
way for the developer

00:11:11,600 --> 00:11:15,279
to actually give input into what

00:11:13,200 --> 00:11:16,399
security controls that his application

00:11:15,279 --> 00:11:18,800
needs in the system

00:11:16,399 --> 00:11:20,000
it just hasn't been built into you know

00:11:18,800 --> 00:11:22,720
into the oci

00:11:20,000 --> 00:11:23,279
at this point so let's look at a couple

00:11:22,720 --> 00:11:26,399
of things

00:11:23,279 --> 00:11:27,760
um so we talked earlier about you know

00:11:26,399 --> 00:11:29,440
running containers and the problem of

00:11:27,760 --> 00:11:31,440
running his route um

00:11:29,440 --> 00:11:32,560
and you know but sometimes people have

00:11:31,440 --> 00:11:35,920
to run it through and

00:11:32,560 --> 00:11:37,279
and over over time um we've looked at

00:11:35,920 --> 00:11:39,360
you know there's there's a concept of

00:11:37,279 --> 00:11:41,760
linux kernel called capabilities

00:11:39,360 --> 00:11:43,040
and what capabilities are is basically

00:11:41,760 --> 00:11:45,200
you know we took the power of

00:11:43,040 --> 00:11:46,160
the links kernel engineers took the

00:11:45,200 --> 00:11:48,399
power of root

00:11:46,160 --> 00:11:50,399
and divided them into originally 32

00:11:48,399 --> 00:11:51,519
capabilities and later on to 64

00:11:50,399 --> 00:11:54,839
capabilities

00:11:51,519 --> 00:11:56,320
um and right now actually there's 37

00:11:54,839 --> 00:11:58,880
capabilities as

00:11:56,320 --> 00:12:00,000
last time i looked anyways um so there's

00:11:58,880 --> 00:12:02,560
00:12:00,000 --> 00:12:03,120
different parts sections of running this

00:12:02,560 --> 00:12:05,600
route

00:12:03,120 --> 00:12:06,639
and then surprisingly we can run most

00:12:05,600 --> 00:12:09,839
containers

00:12:06,639 --> 00:12:11,279
with only 14 capabilities so only 14

00:12:09,839 --> 00:12:13,040
capabilities that's sort of what

00:12:11,279 --> 00:12:14,560
you know over the over the years has

00:12:13,040 --> 00:12:16,880
evolved as to the

00:12:14,560 --> 00:12:17,839
list of capabilities but if i asked

00:12:16,880 --> 00:12:20,000
everybody on this

00:12:17,839 --> 00:12:22,160
if i gave everybody online right now a

00:12:20,000 --> 00:12:23,279
test and said what are those 14

00:12:22,160 --> 00:12:24,880
capabilities

00:12:23,279 --> 00:12:26,959
i would bet you almost everybody would

00:12:24,880 --> 00:12:29,680
fail to answer all 14 of them

00:12:26,959 --> 00:12:31,120
um even i would fail to list all 14 of

00:12:29,680 --> 00:12:32,800
them so

00:12:31,120 --> 00:12:34,800
um again they were designed by the

00:12:32,800 --> 00:12:35,279
darker project and you know what they

00:12:34,800 --> 00:12:37,040
are

00:12:35,279 --> 00:12:38,880
well here they are these are the 14

00:12:37,040 --> 00:12:41,200
capabilities that are allowed by default

00:12:38,880 --> 00:12:44,079
by docker by podman by builder

00:12:41,200 --> 00:12:45,519
um so these are sort of the the default

00:12:44,079 --> 00:12:47,279
list of capabilities

00:12:45,519 --> 00:12:48,800
um but they've sort of evolved right

00:12:47,279 --> 00:12:50,639
they they you know it wasn't

00:12:48,800 --> 00:12:52,000
written in stone that these these are

00:12:50,639 --> 00:12:55,519
necessary um

00:12:52,000 --> 00:12:55,839
and um so they they just sort of evolves

00:12:55,519 --> 00:12:57,440
and

00:12:55,839 --> 00:12:59,920
and i i have four of them i'm going to

00:12:57,440 --> 00:13:03,120
talk about right now that

00:12:59,920 --> 00:13:04,639
i you know i really don't think should

00:13:03,120 --> 00:13:06,079
be allowed by default but again they

00:13:04,639 --> 00:13:07,040
were they were allowed by default from

00:13:06,079 --> 00:13:10,079
the beginning

00:13:07,040 --> 00:13:10,560
and i'm trying to really get them turned

00:13:10,079 --> 00:13:12,399
off

00:13:10,560 --> 00:13:13,839
so right it's the first one i gotta talk

00:13:12,399 --> 00:13:16,880
about audit right was

00:13:13,839 --> 00:13:20,160
a capability um that allows you to

00:13:16,880 --> 00:13:22,399
um to basically write messages and and

00:13:20,160 --> 00:13:24,560
write to the auditing subsystem

00:13:22,399 --> 00:13:27,200
um so you write messages like you know

00:13:24,560 --> 00:13:28,959
dan walsh just logged onto the system

00:13:27,200 --> 00:13:30,639
so you wouldn't think that you'd want a

00:13:28,959 --> 00:13:32,639
container to have that capability right

00:13:30,639 --> 00:13:34,160
to be able to modify something your auto

00:13:32,639 --> 00:13:36,560
log is supposed to be this

00:13:34,160 --> 00:13:38,079
this high security system uh you know

00:13:36,560 --> 00:13:38,880
for logging what's going on in the

00:13:38,079 --> 00:13:41,920
system

00:13:38,880 --> 00:13:42,399
and and to have a containerized process

00:13:41,920 --> 00:13:44,240
have

00:13:42,399 --> 00:13:46,639
out of the box have ability to write it

00:13:44,240 --> 00:13:48,240
so why is that on by default well

00:13:46,639 --> 00:13:49,680
historically that's on by default

00:13:48,240 --> 00:13:51,120
because when people first started

00:13:49,680 --> 00:13:53,199
running containers

00:13:51,120 --> 00:13:54,560
um you know using containers one of the

00:13:53,199 --> 00:13:57,120
first things they did is they

00:13:54,560 --> 00:13:58,399
they put the ssh demon inside of them so

00:13:57,120 --> 00:14:00,639
they you know everybody thought they

00:13:58,399 --> 00:14:03,120
were like vms and you put the ssh demon

00:14:00,639 --> 00:14:05,040
and then you ssh into your container

00:14:03,120 --> 00:14:06,480
um and you know obviously that's not

00:14:05,040 --> 00:14:08,160
what you need you just you know

00:14:06,480 --> 00:14:10,320
do a podman exec you get into the

00:14:08,160 --> 00:14:12,320
container you you don't have to use a

00:14:10,320 --> 00:14:14,959
demon to get into it

00:14:12,320 --> 00:14:16,560
um but because people did that everybody

00:14:14,959 --> 00:14:17,839
was constantly failing when they were

00:14:16,560 --> 00:14:20,000
running darker with this

00:14:17,839 --> 00:14:21,519
hdmi listening and it was always blowing

00:14:20,000 --> 00:14:22,240
up and it was blowing up because they

00:14:21,519 --> 00:14:24,560
didn't have cap

00:14:22,240 --> 00:14:26,320
on it right so when you log into a

00:14:24,560 --> 00:14:27,279
system there's an audit record written

00:14:26,320 --> 00:14:29,040
the fact that you

00:14:27,279 --> 00:14:31,760
you know that dan walsh logged onto the

00:14:29,040 --> 00:14:32,320
system um so s's h demon was blowing up

00:14:31,760 --> 00:14:34,560
and

00:14:32,320 --> 00:14:36,320
out of the box we allowed audit right or

00:14:34,560 --> 00:14:38,880
you know the powers to be the

00:14:36,320 --> 00:14:40,000
the upstream community decided to just

00:14:38,880 --> 00:14:41,839
allow audit right

00:14:40,000 --> 00:14:43,839
why is it still on at this point nobody

00:14:41,839 --> 00:14:45,279
runs this is hdmi inside of it but it's

00:14:43,839 --> 00:14:47,680
real hard to go back

00:14:45,279 --> 00:14:48,880
and remove certain things the next one

00:14:47,680 --> 00:14:51,839
i'm going to talk about is make

00:14:48,880 --> 00:14:53,199
node and make node was uh it allows you

00:14:51,839 --> 00:14:54,720
to create device nodes

00:14:53,199 --> 00:14:56,399
now when a container you know the

00:14:54,720 --> 00:14:57,519
container engine goes out and creates

00:14:56,399 --> 00:15:00,160
all the device nodes

00:14:57,519 --> 00:15:01,440
that it wants you to use so it creates

00:15:00,160 --> 00:15:03,199
you know basically all the content

00:15:01,440 --> 00:15:04,560
that's in slash dev it only creates

00:15:03,199 --> 00:15:07,040
devices that

00:15:04,560 --> 00:15:08,639
um you know it figures that you need or

00:15:07,040 --> 00:15:11,040
you know it's not putting in

00:15:08,639 --> 00:15:13,199
you know physical devices you have to

00:15:11,040 --> 00:15:15,360
physical disk devices things like that

00:15:13,199 --> 00:15:18,320
um and then you as a you know the users

00:15:15,360 --> 00:15:21,360
can add additional devices if it wants

00:15:18,320 --> 00:15:23,600
now make note is is basically allows you

00:15:21,360 --> 00:15:25,519
to do a make note and it can

00:15:23,600 --> 00:15:27,680
you know which is required basically a

00:15:25,519 --> 00:15:29,920
root privilege um so

00:15:27,680 --> 00:15:31,360
uh it's kind of a dangerous capability

00:15:29,920 --> 00:15:33,199
because you know theoretically you

00:15:31,360 --> 00:15:34,880
create device nodes that you could use

00:15:33,199 --> 00:15:36,560
then to attack the linux kernel

00:15:34,880 --> 00:15:37,920
now there are other other features of

00:15:36,560 --> 00:15:41,600
linux to prevent

00:15:37,920 --> 00:15:45,120
certain you know we have uh c-groups

00:15:41,600 --> 00:15:48,720
controls and at least in um in

00:15:45,120 --> 00:15:49,839
v2 v1 version and then we have some ebpf

00:15:48,720 --> 00:15:51,920
to prevent

00:15:49,839 --> 00:15:53,680
to control so which devices you're able

00:15:51,920 --> 00:15:54,079
to make but for the most part you don't

00:15:53,680 --> 00:15:56,000
need

00:15:54,079 --> 00:15:58,000
device you know you don't need make node

00:15:56,000 --> 00:15:58,320
to do anything so why is make note on

00:15:58,000 --> 00:16:01,040
well

00:15:58,320 --> 00:16:02,160
it turns out that certain uh images

00:16:01,040 --> 00:16:04,800
certain builds

00:16:02,160 --> 00:16:07,120
um in the worlds you know need make node

00:16:04,800 --> 00:16:09,040
to be able to build containers

00:16:07,120 --> 00:16:10,560
so they create device nodes on the fly

00:16:09,040 --> 00:16:13,600
you know during during

00:16:10,560 --> 00:16:13,920
in installation um now i mean this is

00:16:13,600 --> 00:16:15,360
all

00:16:13,920 --> 00:16:17,519
something i heard about years and years

00:16:15,360 --> 00:16:19,600
ago but you know but again if you're

00:16:17,519 --> 00:16:20,560
running containers inside of cryo you

00:16:19,600 --> 00:16:22,399
know you're not you're probably not

00:16:20,560 --> 00:16:24,480
going to be doing that um so

00:16:22,399 --> 00:16:25,920
or you at least should not have it on by

00:16:24,480 --> 00:16:28,720
defaults and just to have your builder

00:16:25,920 --> 00:16:31,279
containers get it get it by default

00:16:28,720 --> 00:16:32,320
um so the another one i you know i have

00:16:31,279 --> 00:16:35,120
a problem with is

00:16:32,320 --> 00:16:36,720
is sis charute and we go back and forth

00:16:35,120 --> 00:16:40,240
on this so to root is

00:16:36,720 --> 00:16:42,160
the mechanism for creating a a um

00:16:40,240 --> 00:16:43,440
you know rude environment but if you're

00:16:42,160 --> 00:16:45,759
already in a container you're really

00:16:43,440 --> 00:16:48,480
sort of like an introvert on steroids

00:16:45,759 --> 00:16:50,160
um but we're experimenting back and

00:16:48,480 --> 00:16:53,120
forth turns out some rpm

00:16:50,160 --> 00:16:54,160
builds need um to root so i'm not sure

00:16:53,120 --> 00:16:55,360
we're gonna be able to get rid of this

00:16:54,160 --> 00:16:55,680
one but that's another one it's just

00:16:55,360 --> 00:16:57,279
like

00:16:55,680 --> 00:16:58,720
it just seems kind of you know shouldn't

00:16:57,279 --> 00:17:00,560
be on by default

00:16:58,720 --> 00:17:02,320
and then the last one probably the worst

00:17:00,560 --> 00:17:05,360
one is net raw matter of fact

00:17:02,320 --> 00:17:07,360
we regularly hear about cves um

00:17:05,360 --> 00:17:08,600
dealing with netra netrar allows you to

00:17:07,360 --> 00:17:11,360
create a

00:17:08,600 --> 00:17:13,120
icnp packet basically allows you to

00:17:11,360 --> 00:17:13,919
create any kind of ip packet in the

00:17:13,120 --> 00:17:16,000
universe

00:17:13,919 --> 00:17:18,400
and network has been used to break out

00:17:16,000 --> 00:17:22,160
of secure virtualization so

00:17:18,400 --> 00:17:24,079
basically if you get assigned a vpn

00:17:22,160 --> 00:17:26,640
uh you know a virtual private network

00:17:24,079 --> 00:17:28,240
and don't get access to the host network

00:17:26,640 --> 00:17:29,679
there's been occasions when people been

00:17:28,240 --> 00:17:31,760
able to format

00:17:29,679 --> 00:17:33,440
certain types of packets send them out

00:17:31,760 --> 00:17:34,799
on the vpn and have those packets

00:17:33,440 --> 00:17:37,200
somehow break out

00:17:34,799 --> 00:17:38,559
of the vpn and get you know get out onto

00:17:37,200 --> 00:17:41,520
the rail network or

00:17:38,559 --> 00:17:43,679
whatever um so you know having that rare

00:17:41,520 --> 00:17:45,600
on by default is really curious

00:17:43,679 --> 00:17:47,440
but you know why do we allow that by

00:17:45,600 --> 00:17:49,440
default and it turns out the reason

00:17:47,440 --> 00:17:50,640
we're allowing it by default is is for

00:17:49,440 --> 00:17:52,799
the ping command

00:17:50,640 --> 00:17:54,400
so people when they set up containers

00:17:52,799 --> 00:17:55,760
they want to go into the container and

00:17:54,400 --> 00:17:57,200
be able to make sure it can reach

00:17:55,760 --> 00:17:59,760
certain networks and the way

00:17:57,200 --> 00:18:00,880
most admins or developers do that as

00:17:59,760 --> 00:18:03,360
they use the ping command

00:18:00,880 --> 00:18:04,799
and ping creates an icmp packet which is

00:18:03,360 --> 00:18:08,640
not allowed by default

00:18:04,799 --> 00:18:10,880
and requires net rock well

00:18:08,640 --> 00:18:13,120
what we've done in containers is we

00:18:10,880 --> 00:18:16,559
actually there is another tool

00:18:13,120 --> 00:18:17,760
in uh and linux assist control that

00:18:16,559 --> 00:18:20,320
could be turned on

00:18:17,760 --> 00:18:20,960
to allow non-root users and none you

00:18:20,320 --> 00:18:24,000
know

00:18:20,960 --> 00:18:28,000
users without netra to actually do pings

00:18:24,000 --> 00:18:31,280
without requiring um

00:18:28,000 --> 00:18:33,120
without requiring a

00:18:31,280 --> 00:18:43,840
rock capability so what i'm going to

00:18:33,120 --> 00:18:43,840
show you right now is what happens when

00:18:51,200 --> 00:18:54,480
so what i'm going to show right now is a

00:18:52,880 --> 00:18:56,160
little demonstration of you know what

00:18:54,480 --> 00:19:11,840
happens when you take away net raw

00:18:56,160 --> 00:19:11,840
capability from

00:19:12,640 --> 00:19:19,440
oops you don't

00:19:16,000 --> 00:19:19,440
this is probably why i should recorded

00:19:22,840 --> 00:19:25,840
this

00:19:29,760 --> 00:19:33,360
okay so here we have sort of a standard

00:19:31,679 --> 00:19:35,280
podman running a container

00:19:33,360 --> 00:19:37,840
and it's just doing a pin right so by

00:19:35,280 --> 00:19:39,840
out of the box as i said we have default

00:19:37,840 --> 00:19:41,760
uh capabilities for netra and that

00:19:39,840 --> 00:19:43,440
allows you to ping so the next step is

00:19:41,760 --> 00:19:46,160
i'm going to run a container now

00:19:43,440 --> 00:19:46,480
in this case i'm going to drop knit rock

00:19:46,160 --> 00:19:48,960
and

00:19:46,480 --> 00:19:49,760
boom it blows up so just you know i have

00:19:48,960 --> 00:19:52,480
a pink

00:19:49,760 --> 00:19:53,520
basically a container image that tries

00:19:52,480 --> 00:19:55,760
to do a ping

00:19:53,520 --> 00:19:56,640
um we disable that raw and also the ping

00:19:55,760 --> 00:19:58,400
is broken

00:19:56,640 --> 00:19:59,840
but there is assist control that's been

00:19:58,400 --> 00:20:01,280
available for for

00:19:59,840 --> 00:20:03,440
i think about seven or eight years in

00:20:01,280 --> 00:20:06,640
the linux kernel uh called

00:20:03,440 --> 00:20:09,280
ip you know net ipv4 ping user

00:20:06,640 --> 00:20:11,679
range and what this allows you is to for

00:20:09,280 --> 00:20:14,720
a range of uids on your system

00:20:11,679 --> 00:20:15,440
um to allow any anybody that's in that

00:20:14,720 --> 00:20:17,840
group

00:20:15,440 --> 00:20:19,679
um to be able to do a ping so what i

00:20:17,840 --> 00:20:21,919
want to do is i'm going to do a

00:20:19,679 --> 00:20:23,120
drop the net raw capability again and

00:20:21,919 --> 00:20:24,799
all i'm going to do is set the assist

00:20:23,120 --> 00:20:26,480
control

00:20:24,799 --> 00:20:28,000
and boom i get capabilities so now i'm

00:20:26,480 --> 00:20:28,960
running a container that's much more

00:20:28,000 --> 00:20:31,600
secure

00:20:28,960 --> 00:20:32,400
um and that that's this control that i

00:20:31,600 --> 00:20:34,240
just set

00:20:32,400 --> 00:20:36,320
is actually set just for the container

00:20:34,240 --> 00:20:38,400
so it hasn't loosened up the security

00:20:36,320 --> 00:20:39,760
um on the rest of the system it doesn't

00:20:38,400 --> 00:20:41,280
you know theoretically if you're worried

00:20:39,760 --> 00:20:42,799
about other users on the system being

00:20:41,280 --> 00:20:44,559
able to ping or other containers

00:20:42,799 --> 00:20:46,320
being able to ping but it's a fairly

00:20:44,559 --> 00:20:49,520
easy thing to to change

00:20:46,320 --> 00:20:51,280
and instantaneously um you get a little

00:20:49,520 --> 00:20:53,200
bit more security

00:20:51,280 --> 00:20:54,320
so that's kind of cool that we could do

00:20:53,200 --> 00:20:56,720
that um

00:20:54,320 --> 00:20:57,919
and uh you know just as an idea of you

00:20:56,720 --> 00:20:59,919
know different ways we could

00:20:57,919 --> 00:21:02,080
actually move towards papa bear so now

00:20:59,919 --> 00:21:05,760
we're going to look at um

00:21:02,080 --> 00:21:08,000
you know imagine a a developer

00:21:05,760 --> 00:21:10,000
has figured out in his image that he

00:21:08,000 --> 00:21:12,720
wants uh you know certain

00:21:10,000 --> 00:21:13,760
um you know he figures out that his

00:21:12,720 --> 00:21:16,559
container image

00:21:13,760 --> 00:21:17,600
only needs a couple of uh a couple of

00:21:16,559 --> 00:21:20,640
capabilities

00:21:17,600 --> 00:21:22,880
um say it only needs set uid and set gid

00:21:20,640 --> 00:21:24,799
um so what would be really cool is if if

00:21:22,880 --> 00:21:26,720
they could add a label something you

00:21:24,799 --> 00:21:28,880
know some content to the image

00:21:26,720 --> 00:21:30,480
that says you know my image only needs

00:21:28,880 --> 00:21:31,919
these two capabilities

00:21:30,480 --> 00:21:34,400
and what could happen then is the

00:21:31,919 --> 00:21:36,400
container engines like podman and cryo

00:21:34,400 --> 00:21:37,840
could actually pull down the container

00:21:36,400 --> 00:21:40,080
image and take

00:21:37,840 --> 00:21:42,159
that that label read that label and

00:21:40,080 --> 00:21:43,760
figure out if those two capabilities are

00:21:42,159 --> 00:21:45,760
currently

00:21:43,760 --> 00:21:46,880
allowed in the default capabilities so

00:21:45,760 --> 00:21:49,280
what's going to happen is

00:21:46,880 --> 00:21:51,919
is if you know the image says i only

00:21:49,280 --> 00:21:53,840
need set uid and set gid

00:21:51,919 --> 00:21:56,000
podman goes looks at his default list

00:21:53,840 --> 00:21:57,120
and says oh i already allow set uid and

00:21:56,000 --> 00:21:59,440
set gid

00:21:57,120 --> 00:22:01,120
instead of allowing all 14 capabilities

00:21:59,440 --> 00:22:02,480
then it could just say okay i'm going to

00:22:01,120 --> 00:22:04,559
launch the container just with the two

00:22:02,480 --> 00:22:06,559
uf2 capabilities it needs

00:22:04,559 --> 00:22:08,799
now if the image came along and said it

00:22:06,559 --> 00:22:10,559
needed a capability that isn't in the

00:22:08,799 --> 00:22:12,080
in the default list then it could at

00:22:10,559 --> 00:22:14,000
least you know

00:22:12,080 --> 00:22:15,760
currently in podman what happens is

00:22:14,000 --> 00:22:17,919
it'll blow up and basically

00:22:15,760 --> 00:22:18,799
but it'll tell you that this container

00:22:17,919 --> 00:22:21,679
in order to run

00:22:18,799 --> 00:22:22,400
needs this capability so let's take a

00:22:21,679 --> 00:22:25,200
look at

00:22:22,400 --> 00:22:26,080
that so here we have i'm creating a

00:22:25,200 --> 00:22:28,000
container

00:22:26,080 --> 00:22:30,159
i'm basically just a fedora container

00:22:28,000 --> 00:22:31,919
that's going to have um

00:22:30,159 --> 00:22:33,679
you know says that it needs set uid and

00:22:31,919 --> 00:22:36,720
set gid

00:22:33,679 --> 00:22:38,799
and i'm going to create a container and

00:22:36,720 --> 00:22:40,960
basically with podman and because i

00:22:38,799 --> 00:22:43,760
pulled down the fedora capability

00:22:40,960 --> 00:22:45,360
you know created that container um it

00:22:43,760 --> 00:22:48,400
basically launches the container and

00:22:45,360 --> 00:22:50,159
and shows that it's running with

00:22:48,400 --> 00:22:51,840
the default capabilities of set uid and

00:22:50,159 --> 00:22:54,480
set gid if i run

00:22:51,840 --> 00:22:55,919
a standard container um you know

00:22:54,480 --> 00:22:57,440
basically a regular container on the

00:22:55,919 --> 00:22:59,280
system a default container

00:22:57,440 --> 00:23:00,720
um you see that you know podman

00:22:59,280 --> 00:23:02,080
basically will run with the 14

00:23:00,720 --> 00:23:03,440
capabilities that we've been talking

00:23:02,080 --> 00:23:04,640
about during this talk

00:23:03,440 --> 00:23:06,159
so now i'm going to create another

00:23:04,640 --> 00:23:08,159
container image and this time i'm going

00:23:06,159 --> 00:23:11,280
to use ones that aren't in the list of

00:23:08,159 --> 00:23:13,200
of the 14 i'm going to run podman

00:23:11,280 --> 00:23:15,120
and what happens now is podman will come

00:23:13,200 --> 00:23:16,720
out and

00:23:15,120 --> 00:23:18,799
actually contain create the container

00:23:16,720 --> 00:23:20,400
with the default 14 list

00:23:18,799 --> 00:23:21,760
but it'll actually report an error to

00:23:20,400 --> 00:23:23,520
you saying that the capabilities

00:23:21,760 --> 00:23:25,120
requested by the user or an image

00:23:23,520 --> 00:23:27,120
are not allowed by default cap and

00:23:25,120 --> 00:23:30,080
they're that many caps system

00:23:27,120 --> 00:23:32,080
um so um so you see we still go back to

00:23:30,080 --> 00:23:34,640
the 14 if you ask for ones that

00:23:32,080 --> 00:23:35,600
aren't in the list but if you decide

00:23:34,640 --> 00:23:37,919
that you want to

00:23:35,600 --> 00:23:39,840
run the container um and with those

00:23:37,919 --> 00:23:40,880
capabilities because it doesn't work for

00:23:39,840 --> 00:23:43,919
whatever reason

00:23:40,880 --> 00:23:45,120
you can actually go back and run the

00:23:43,919 --> 00:23:47,120
container again

00:23:45,120 --> 00:23:48,400
and just add that to your fault list so

00:23:47,120 --> 00:23:49,440
there's the commands to add those

00:23:48,400 --> 00:23:51,279
capabilities

00:23:49,440 --> 00:23:53,360
so this is a mechanism for the developer

00:23:51,279 --> 00:23:56,159
to at least communicate back to the

00:23:53,360 --> 00:23:57,840
the user that hey my container will you

00:23:56,159 --> 00:23:58,559
know needs these two capabilities to run

00:23:57,840 --> 00:24:00,559
properly

00:23:58,559 --> 00:24:01,760
and that that's documented nowhere in

00:24:00,559 --> 00:24:03,760
the in the system

00:24:01,760 --> 00:24:05,440
um and so you know all of a sudden you

00:24:03,760 --> 00:24:07,120
know his container will run perfectly

00:24:05,440 --> 00:24:08,880
well as long as it has those two key

00:24:07,120 --> 00:24:10,880
build capabilities so it gives a

00:24:08,880 --> 00:24:11,840
mechanism for the developer to actually

00:24:10,880 --> 00:24:14,559
document

00:24:11,840 --> 00:24:15,200
in this container um you know the way

00:24:14,559 --> 00:24:17,039
that he

00:24:15,200 --> 00:24:18,559
he wants the containers to run you know

00:24:17,039 --> 00:24:21,039
which capabilities they want to

00:24:18,559 --> 00:24:23,200
run so similar to that another feature

00:24:21,039 --> 00:24:25,440
that we use for securing containers

00:24:23,200 --> 00:24:27,039
is the thing called setcomp and and

00:24:25,440 --> 00:24:28,960
really what setcomp is all about is

00:24:27,039 --> 00:24:30,640
controlling the number of syscalls that

00:24:28,960 --> 00:24:33,200
are available to containers

00:24:30,640 --> 00:24:33,840
so it limits the you know right now

00:24:33,200 --> 00:24:36,960
there's about

00:24:33,840 --> 00:24:38,799
six six hundred syscalls on the x86

00:24:36,960 --> 00:24:41,520
system and when we use setcomp

00:24:38,799 --> 00:24:43,360
um we're able to limit the uh filter the

00:24:41,520 --> 00:24:44,159
number of syscalls that a container can

00:24:43,360 --> 00:24:46,320
do

00:24:44,159 --> 00:24:47,200
so right now you know well let's just

00:24:46,320 --> 00:24:50,000
say that there's four

00:24:47,200 --> 00:24:51,279
450 on a standard linux box i think it's

00:24:50,000 --> 00:24:52,159
actually a lot more than that if you

00:24:51,279 --> 00:24:56,320
include the

00:24:52,159 --> 00:24:58,159
uh 32-bit curl code but um so out of it

00:24:56,320 --> 00:25:00,240
right now you know we have a second

00:24:58,159 --> 00:25:03,919
filter that basically identifies

00:25:00,240 --> 00:25:06,159
which syscalls are available to uh

00:25:03,919 --> 00:25:08,240
to the system when we run containers and

00:25:06,159 --> 00:25:09,520
what happens is we're allowing about 300

00:25:08,240 --> 00:25:12,080
linux sys calls

00:25:09,520 --> 00:25:13,520
out of approximately 450 plus the 32

00:25:12,080 --> 00:25:15,360
bits this call so we eliminate the

00:25:13,520 --> 00:25:17,279
32-bit sys calls and then we eliminate

00:25:15,360 --> 00:25:19,120
about 150 other sys calls

00:25:17,279 --> 00:25:21,679
uh when we run containers that's pretty

00:25:19,120 --> 00:25:24,720
good but 300 sis calls is quite a

00:25:21,679 --> 00:25:28,279
quite a bit right so can we do better

00:25:24,720 --> 00:25:30,799
so aquasec wrote an article um back in

00:25:28,279 --> 00:25:32,880
2019 that said that they believe that

00:25:30,799 --> 00:25:34,320
most containers can run with only 40 to

00:25:32,880 --> 00:25:36,240
70 cis calls

00:25:34,320 --> 00:25:38,480
so right now we're running we're giving

00:25:36,240 --> 00:25:39,279
300 sis calls when we potentially could

00:25:38,480 --> 00:25:42,080
only need

00:25:39,279 --> 00:25:43,200
you know you know far less than 100 says

00:25:42,080 --> 00:25:44,720
calls to be able to run

00:25:43,200 --> 00:25:46,480
wouldn't it be good to eliminate those

00:25:44,720 --> 00:25:48,159
additional sys calls but of course

00:25:46,480 --> 00:25:49,840
there's no way for

00:25:48,159 --> 00:25:52,240
for anybody to figure out which sys

00:25:49,840 --> 00:25:55,520
calls the container image actually makes

00:25:52,240 --> 00:25:58,400
so last summer a year ago

00:25:55,520 --> 00:25:59,919
summer we we actually worked with a uh

00:25:58,400 --> 00:26:02,480
google summer code

00:25:59,919 --> 00:26:04,720
uh and we created a new uh open source

00:26:02,480 --> 00:26:07,120
project called the oci sitcom bpf

00:26:04,720 --> 00:26:08,880
hook and what this this hook does is

00:26:07,120 --> 00:26:11,520
actually plugs into containers

00:26:08,880 --> 00:26:12,400
and actually just watches which syscalls

00:26:11,520 --> 00:26:14,480
are

00:26:12,400 --> 00:26:16,480
being used inside of a container and

00:26:14,480 --> 00:26:17,120
then it will generate a second profile

00:26:16,480 --> 00:26:19,200
file

00:26:17,120 --> 00:26:20,480
by tracing all the syscalls and then you

00:26:19,200 --> 00:26:25,520
can use that

00:26:20,480 --> 00:26:28,080
later to lock down your container

00:26:25,520 --> 00:26:29,679
so this gives you a quick idea of you

00:26:28,080 --> 00:26:31,039
know this is a configuration file for

00:26:29,679 --> 00:26:33,520
the set comp hook

00:26:31,039 --> 00:26:35,360
um and what this is basically you know

00:26:33,520 --> 00:26:38,159
the interesting thing here on the

00:26:35,360 --> 00:26:39,120
uh in the screen is that you can

00:26:38,159 --> 00:26:41,120
basically set this

00:26:39,120 --> 00:26:42,640
up to permanently sit on your system

00:26:41,120 --> 00:26:45,360
just install on your system

00:26:42,640 --> 00:26:46,159
but then if you want to trace um

00:26:45,360 --> 00:26:48,240
syscalls

00:26:46,159 --> 00:26:49,679
you can set what's called an annotation

00:26:48,240 --> 00:26:50,640
it's basically a command line option

00:26:49,679 --> 00:26:52,240
it's a pod man

00:26:50,640 --> 00:26:54,720
or it's a cryo you can put it in your

00:26:52,240 --> 00:26:55,600
kubernetes yaml um to say basically i

00:26:54,720 --> 00:26:58,400
want this

00:26:55,600 --> 00:26:58,960
actual container image or this pod to be

00:26:58,400 --> 00:27:00,559
traced

00:26:58,960 --> 00:27:02,640
to basically have all the syscalls

00:27:00,559 --> 00:27:04,880
recorded inside of it and what i'm going

00:27:02,640 --> 00:27:07,039
to do now is i'm going to actually

00:27:04,880 --> 00:27:08,000
use podman and i'm going to run uh the

00:27:07,039 --> 00:27:10,400
annotations

00:27:08,000 --> 00:27:11,039
call to basically say i want to write

00:27:10,400 --> 00:27:13,600
run

00:27:11,039 --> 00:27:15,120
fedora ls of slash basically just

00:27:13,600 --> 00:27:17,679
looking at ls of slash

00:27:15,120 --> 00:27:20,720
and i'm telling the syscall uh filter to

00:27:17,679 --> 00:27:24,480
record all of the setconf

00:27:20,720 --> 00:27:27,120
uh sys calls that are uh happening there

00:27:24,480 --> 00:27:28,320
um and there it just ran ran the command

00:27:27,120 --> 00:27:30,559
traced all of the

00:27:28,320 --> 00:27:32,320
uh syscalls and it created if you look

00:27:30,559 --> 00:27:32,720
up here you'll see that i'm telling you

00:27:32,320 --> 00:27:36,279
to

00:27:32,720 --> 00:27:37,600
store them all into a file called uh

00:27:36,279 --> 00:27:40,559
mysetcomp.json

00:27:37,600 --> 00:27:41,600
and now if i look at my setcom.json this

00:27:40,559 --> 00:27:44,480
shows you

00:27:41,600 --> 00:27:46,960
all of the syscalls that ls of slash

00:27:44,480 --> 00:27:49,520
uses when it wants to run a container

00:27:46,960 --> 00:27:51,840
so you see you know whatever so it's

00:27:49,520 --> 00:27:52,480
about probably about 25 or 30 syscalls

00:27:51,840 --> 00:27:54,240
here

00:27:52,480 --> 00:27:55,919
um so now what i'm going to do is now

00:27:54,240 --> 00:27:57,520
i'm going to put it in enforcing mode so

00:27:55,919 --> 00:27:58,080
instead of you now instead of using the

00:27:57,520 --> 00:28:00,399
filter

00:27:58,080 --> 00:28:02,000
i'm actually going to use the generated

00:28:00,399 --> 00:28:04,559
second file for

00:28:02,000 --> 00:28:06,720
um the container uh oh by the way i

00:28:04,559 --> 00:28:08,720
didn't mention earlier in my talk that

00:28:06,720 --> 00:28:11,200
these setcomp rules for you know those

00:28:08,720 --> 00:28:13,200
default 300 syscalls were actually

00:28:11,200 --> 00:28:14,320
developed by daca actually by jesse

00:28:13,200 --> 00:28:17,039
frizzell was the

00:28:14,320 --> 00:28:18,559
one who led it um and you know it just

00:28:17,039 --> 00:28:20,399
went back and forth and they they

00:28:18,559 --> 00:28:21,520
basically try to find out what the real

00:28:20,399 --> 00:28:23,600
goldilocks you know what

00:28:21,520 --> 00:28:24,960
what you know will the bulk of all

00:28:23,600 --> 00:28:26,960
containers run

00:28:24,960 --> 00:28:28,159
with um on the system so it's a real

00:28:26,960 --> 00:28:29,760
goldilocks moment

00:28:28,159 --> 00:28:31,440
but here we have a real papa beer and

00:28:29,760 --> 00:28:33,200
that i can run the container

00:28:31,440 --> 00:28:35,520
with just the syscalls that the

00:28:33,200 --> 00:28:38,000
container needs to be able to run

00:28:35,520 --> 00:28:39,840
so obviously that's a much more secure

00:28:38,000 --> 00:28:42,159
way of running a container if

00:28:39,840 --> 00:28:44,080
you know something hacks into my system

00:28:42,159 --> 00:28:46,399
and causes a different syscall to

00:28:44,080 --> 00:28:47,760
be used it'll be blocked by the kernel

00:28:46,399 --> 00:28:49,919
um so here we're going to run

00:28:47,760 --> 00:28:52,240
the exact same command but this time i'm

00:28:49,919 --> 00:28:53,679
adding the dash l the dash long flag

00:28:52,240 --> 00:28:55,200
to the ls command and you're going to

00:28:53,679 --> 00:28:55,600
see that the container is going to blow

00:28:55,200 --> 00:28:58,720
up

00:28:55,600 --> 00:29:01,279
so that shows that the container

00:28:58,720 --> 00:29:02,799
actually you know was blocked.com they

00:29:01,279 --> 00:29:05,279
tried to do some sys calls

00:29:02,799 --> 00:29:07,360
that weren't allowed by the by default

00:29:05,279 --> 00:29:07,679
i'm not sure why my auditing system is

00:29:07,360 --> 00:29:09,360
not

00:29:07,679 --> 00:29:11,360
logging it right now but there should be

00:29:09,360 --> 00:29:14,000
records in the auditing subsystem

00:29:11,360 --> 00:29:16,080
to say that the sys calls you know are

00:29:14,000 --> 00:29:18,320
used but i'll show you them in a minute

00:29:16,080 --> 00:29:20,399
so what we're going to do now is um i'm

00:29:18,320 --> 00:29:22,480
going to use the annotation again

00:29:20,399 --> 00:29:24,399
so i put it out of enforcing mode sort

00:29:22,480 --> 00:29:25,760
of in back into a permissive mode

00:29:24,399 --> 00:29:28,080
and this time it's going to take the

00:29:25,760 --> 00:29:29,679
original file so an input file of my

00:29:28,080 --> 00:29:31,279
setcomp is going to create my

00:29:29,679 --> 00:29:33,440
and then going to generate a new file

00:29:31,279 --> 00:29:36,480
called mysetcom2.json

00:29:33,440 --> 00:29:38,240
so basically it's just sort of you know

00:29:36,480 --> 00:29:40,240
taking its import what was allowed

00:29:38,240 --> 00:29:42,399
before and then getting the new ones

00:29:40,240 --> 00:29:43,840
and now i'm just running the ls-l

00:29:42,399 --> 00:29:46,880
command

00:29:43,840 --> 00:29:48,960
to uh you know get the long listing of

00:29:46,880 --> 00:29:50,960
slash and there you see a long listing

00:29:48,960 --> 00:29:54,000
of slash inside of my container

00:29:50,960 --> 00:29:56,720
and now if i run the same command in

00:29:54,000 --> 00:29:58,720
lockdown mode with the new uh file it

00:29:56,720 --> 00:30:01,600
works instantaneously now i have

00:29:58,720 --> 00:30:02,720
you know a a broader sense of syscalls

00:30:01,600 --> 00:30:05,440
that are available

00:30:02,720 --> 00:30:06,880
um to the container to be able to run i

00:30:05,440 --> 00:30:10,080
mean if we want to look

00:30:06,880 --> 00:30:12,080
at you know what what did dash l add

00:30:10,080 --> 00:30:13,600
you know what why did you know dash l

00:30:12,080 --> 00:30:15,200
not work and it basically

00:30:13,600 --> 00:30:16,720
didn't work because it needed these sys

00:30:15,200 --> 00:30:19,200
calls so

00:30:16,720 --> 00:30:20,159
if you understand the way linux works on

00:30:19,200 --> 00:30:22,399
the system

00:30:20,159 --> 00:30:23,520
um you know some of these just calls i

00:30:22,399 --> 00:30:26,080
can explain to you

00:30:23,520 --> 00:30:27,279
um so when i do a net dash l that tells

00:30:26,080 --> 00:30:29,919
it to basically

00:30:27,279 --> 00:30:30,480
you know instead of showing you ids to

00:30:29,919 --> 00:30:32,799
you

00:30:30,480 --> 00:30:34,320
it actually needs to translate the uid

00:30:32,799 --> 00:30:36,640
into you know something like d

00:30:34,320 --> 00:30:38,080
walsh on the system the way that happens

00:30:36,640 --> 00:30:40,720
underneath the in the

00:30:38,080 --> 00:30:42,720
linux system is you know it basically

00:30:40,720 --> 00:30:44,240
ordinarily just reads that c password

00:30:42,720 --> 00:30:48,080
and and translates it

00:30:44,240 --> 00:30:49,840
but on a modern modern linux systems

00:30:48,080 --> 00:30:51,120
um that's a little bit more complicated

00:30:49,840 --> 00:30:56,240
than that actually the

00:30:51,120 --> 00:31:00,000
the uh the ls command is actually using

00:30:56,240 --> 00:31:02,480
um a feature in glibc called ns switch

00:31:00,000 --> 00:31:03,200
and then the switch is set up by default

00:31:02,480 --> 00:31:05,360
instead of

00:31:03,200 --> 00:31:07,120
reading the etsy password file directly

00:31:05,360 --> 00:31:08,960
it actually goes out to a demon

00:31:07,120 --> 00:31:11,039
it connects over a unix domain socket to

00:31:08,960 --> 00:31:12,480
a demon called sss daemon

00:31:11,039 --> 00:31:14,399
so it needs to connect in order to

00:31:12,480 --> 00:31:15,760
connect to that daemon and then it needs

00:31:14,399 --> 00:31:18,399
you know the socket connection to be

00:31:15,760 --> 00:31:20,000
able to communicate back and forth

00:31:18,399 --> 00:31:21,519
it also does things like get the x

00:31:20,000 --> 00:31:23,760
adders out of

00:31:21,519 --> 00:31:25,600
your file system so that that's

00:31:23,760 --> 00:31:26,480
basically all of these additional things

00:31:25,600 --> 00:31:28,399
are needed

00:31:26,480 --> 00:31:30,399
when we go up with the but the basic

00:31:28,399 --> 00:31:32,399
idea is that you can

00:31:30,399 --> 00:31:33,440
sort of continue to watch a container

00:31:32,399 --> 00:31:35,760
image

00:31:33,440 --> 00:31:36,880
and and you further generate more and

00:31:35,760 --> 00:31:39,039
more syscalls

00:31:36,880 --> 00:31:40,320
so obviously out of the box you can't

00:31:39,039 --> 00:31:41,840
you know figure out all

00:31:40,320 --> 00:31:43,440
possible ways people are going to run an

00:31:41,840 --> 00:31:45,120
image but imagine you run

00:31:43,440 --> 00:31:46,480
in a kubernetes cluster and you could

00:31:45,120 --> 00:31:47,440
basically say i'm going to put this new

00:31:46,480 --> 00:31:49,840
application

00:31:47,440 --> 00:31:52,240
through my ci cd system i'm going to run

00:31:49,840 --> 00:31:54,960
all my tests on and have the syscall

00:31:52,240 --> 00:31:56,960
filtering tool watching it constantly

00:31:54,960 --> 00:31:57,519
and once it gets out of the ci cd system

00:31:56,960 --> 00:31:59,200
i have

00:31:57,519 --> 00:32:00,799
you know probably a pretty good idea of

00:31:59,200 --> 00:32:01,760
the syscalls that are used to run that

00:32:00,799 --> 00:32:03,760
container

00:32:01,760 --> 00:32:05,760
now i can take that container and put it

00:32:03,760 --> 00:32:07,600
into production with those syscalls

00:32:05,760 --> 00:32:09,120
and actually have another tool you know

00:32:07,600 --> 00:32:10,720
just use the filter again

00:32:09,120 --> 00:32:13,039
and this time the filter is you know

00:32:10,720 --> 00:32:15,919
watching for additional sys calls

00:32:13,039 --> 00:32:17,360
and say you run it for three months in

00:32:15,919 --> 00:32:18,799
sort of that permissive mode and after

00:32:17,360 --> 00:32:20,640
three months if you find no

00:32:18,799 --> 00:32:22,000
additional sys calls you know being

00:32:20,640 --> 00:32:23,519
added

00:32:22,000 --> 00:32:25,440
then probably at that point you say

00:32:23,519 --> 00:32:27,519
maybe i can put it into enforcing mode

00:32:25,440 --> 00:32:29,760
but basically this gives you the tools

00:32:27,519 --> 00:32:32,320
to be able to

00:32:29,760 --> 00:32:33,200
do you know basically monitor a

00:32:32,320 --> 00:32:35,519
container

00:32:33,200 --> 00:32:37,039
and do it so imagine you know we could

00:32:35,519 --> 00:32:38,640
take similar to what we talked about

00:32:37,039 --> 00:32:40,320
before with capabilities

00:32:38,640 --> 00:32:42,000
imagine i could take this generated

00:32:40,320 --> 00:32:43,440
second file and actually

00:32:42,000 --> 00:32:44,960
you know how do i distribute that to the

00:32:43,440 --> 00:32:46,960
environment and what i would subscribe

00:32:44,960 --> 00:32:50,080
is that we put that sitcom file

00:32:46,960 --> 00:32:51,039
inside the the actually inside of the

00:32:50,080 --> 00:32:54,159
oci

00:32:51,039 --> 00:32:55,600
uh the the json that describes what's

00:32:54,159 --> 00:32:57,360
inside the image the developer could

00:32:55,600 --> 00:32:59,200
basically go out figure out what set cop

00:32:57,360 --> 00:33:01,200
rules his container image needs

00:32:59,200 --> 00:33:02,399
and then associate it with the image and

00:33:01,200 --> 00:33:04,720
embed it

00:33:02,399 --> 00:33:06,320
then the container tools could be made

00:33:04,720 --> 00:33:07,679
smart enough to basically look at what

00:33:06,320 --> 00:33:10,960
they're giving for the defaults

00:33:07,679 --> 00:33:12,559
those default 300 syscalls that it gives

00:33:10,960 --> 00:33:14,480
and look at the the the ones that the

00:33:12,559 --> 00:33:15,840
container image is asking for

00:33:14,480 --> 00:33:18,159
and make sure that you know if the

00:33:15,840 --> 00:33:20,960
default 300 if the

00:33:18,159 --> 00:33:21,600
the image asks for all of the same allow

00:33:20,960 --> 00:33:23,519
rules

00:33:21,600 --> 00:33:24,880
that are in the default 300 then they're

00:33:23,519 --> 00:33:25,600
just running in a much tighter

00:33:24,880 --> 00:33:27,840
environment

00:33:25,600 --> 00:33:29,760
and it has to be no interaction with the

00:33:27,840 --> 00:33:32,799
user um there has to be no

00:33:29,760 --> 00:33:34,159
interaction with you know software

00:33:32,799 --> 00:33:36,720
management or anything else it just

00:33:34,159 --> 00:33:39,360
would work out of the box

00:33:36,720 --> 00:33:41,440
okay so se linux i often talk about how

00:33:39,360 --> 00:33:43,840
great sc linux is for

00:33:41,440 --> 00:33:45,120
um securing the system and if you look

00:33:43,840 --> 00:33:48,080
at just the number of

00:33:45,120 --> 00:33:49,200
of uh security vulnerabilities that see

00:33:48,080 --> 00:33:51,200
lenses blocked

00:33:49,200 --> 00:33:53,200
in the container world it's it's pretty

00:33:51,200 --> 00:33:55,679
impressive the last one here

00:33:53,200 --> 00:33:57,679
that lassie v down here actually was a

00:33:55,679 --> 00:33:59,679
cv that allowed a root process to

00:33:57,679 --> 00:34:02,000
overwrite the tool that launched the

00:33:59,679 --> 00:34:04,480
container so you know run c

00:34:02,000 --> 00:34:06,480
um is the tool that people use to

00:34:04,480 --> 00:34:07,120
configure all the containers so imagine

00:34:06,480 --> 00:34:08,480
if you

00:34:07,120 --> 00:34:10,879
ran a container that had this

00:34:08,480 --> 00:34:12,399
vulnerability you could overwrite run c

00:34:10,879 --> 00:34:14,399
and then all future containers get

00:34:12,399 --> 00:34:17,200
launched would be under your control

00:34:14,399 --> 00:34:18,720
um so selinux actually protects the file

00:34:17,200 --> 00:34:20,639
system

00:34:18,720 --> 00:34:22,399
from container escape and that's usually

00:34:20,639 --> 00:34:23,839
where the container escapes is

00:34:22,399 --> 00:34:26,159
by you know getting out to the file

00:34:23,839 --> 00:34:28,000
system and being able to wreak havoc

00:34:26,159 --> 00:34:29,839
um and see linux basically keeps things

00:34:28,000 --> 00:34:31,760
contained so it's blocked most

00:34:29,839 --> 00:34:33,280
containers best tool in my opinion for

00:34:31,760 --> 00:34:36,320
file system escape

00:34:33,280 --> 00:34:36,800
um but selinux has additional features

00:34:36,320 --> 00:34:38,079
like

00:34:36,800 --> 00:34:40,560
it has the ability to control

00:34:38,079 --> 00:34:43,599
capabilities but we we basically out

00:34:40,560 --> 00:34:44,240
for the fault policy we allow containers

00:34:43,599 --> 00:34:46,480
to have all

00:34:44,240 --> 00:34:48,079
access to all linux capabilities and

00:34:46,480 --> 00:34:49,839
have full access to the network so we're

00:34:48,079 --> 00:34:50,560
not using that parts of sc linux to

00:34:49,839 --> 00:34:52,079
control

00:34:50,560 --> 00:34:54,000
because we're relying on other parts of

00:34:52,079 --> 00:34:55,599
the kernel for doing that so

00:34:54,000 --> 00:34:57,200
so you know sort of again it's the

00:34:55,599 --> 00:35:00,480
goldilocks right

00:34:57,200 --> 00:35:01,200
to control uh but uh so one of the

00:35:00,480 --> 00:35:02,880
problems that

00:35:01,200 --> 00:35:04,960
and when people you know containers work

00:35:02,880 --> 00:35:07,440
real real well with sc links but the one

00:35:04,960 --> 00:35:10,480
area where people fall into issues with

00:35:07,440 --> 00:35:13,200
uh sc linux is around volumes

00:35:10,480 --> 00:35:15,119
so um you know basically a volume is a

00:35:13,200 --> 00:35:17,040
way of exposing parts of the operating

00:35:15,119 --> 00:35:19,119
system into the container to take

00:35:17,040 --> 00:35:20,880
parts of the file system and inject them

00:35:19,119 --> 00:35:23,440
into the container

00:35:20,880 --> 00:35:25,280
and so sc linux uh you know

00:35:23,440 --> 00:35:26,160
functionality was added to docker and

00:35:25,280 --> 00:35:28,720
pod man

00:35:26,160 --> 00:35:30,800
um you realize that you know any content

00:35:28,720 --> 00:35:32,640
that you take from the from the host is

00:35:30,800 --> 00:35:33,920
going to be labeled incorrectly for use

00:35:32,640 --> 00:35:37,440
with the container

00:35:33,920 --> 00:35:40,000
so we added an option to the volume out

00:35:37,440 --> 00:35:42,079
you know locate z and capital z and what

00:35:40,000 --> 00:35:44,000
capital z does is basically tells the

00:35:42,079 --> 00:35:46,640
container engine pod podman here

00:35:44,000 --> 00:35:48,079
to fix the labels on that directory and

00:35:46,640 --> 00:35:50,560
just runs a recursive

00:35:48,079 --> 00:35:52,079
change of all the content so if you

00:35:50,560 --> 00:35:54,079
basically run a mariadb

00:35:52,079 --> 00:35:55,839
and you want to have the database stored

00:35:54,079 --> 00:35:56,960
on your disk you can just you know

00:35:55,839 --> 00:35:59,200
create a directory

00:35:56,960 --> 00:36:00,560
mounted into the container using control

00:35:59,200 --> 00:36:02,560
z capital z

00:36:00,560 --> 00:36:04,320
and uh podman will relabel that

00:36:02,560 --> 00:36:05,839
directory and all your content

00:36:04,320 --> 00:36:08,000
for that directory will be private to

00:36:05,839 --> 00:36:10,720
that container the lowercase

00:36:08,000 --> 00:36:12,000
allows you to have it public public to

00:36:10,720 --> 00:36:13,520
all containers

00:36:12,000 --> 00:36:15,359
but still be isolated all the rest of

00:36:13,520 --> 00:36:17,760
the content from the host

00:36:15,359 --> 00:36:19,200
but the second line down here pardon me

00:36:17,760 --> 00:36:21,440
and run by a log

00:36:19,200 --> 00:36:22,880
um it could be a problem so if you were

00:36:21,440 --> 00:36:24,800
running a flu indeed demon and you

00:36:22,880 --> 00:36:25,839
wanted to have access to all the logs on

00:36:24,800 --> 00:36:28,320
the host

00:36:25,839 --> 00:36:29,280
in order to say export them uh running

00:36:28,320 --> 00:36:31,520
the cap

00:36:29,280 --> 00:36:33,280
colon z here would be a real serious

00:36:31,520 --> 00:36:36,400
issue because it would basically

00:36:33,280 --> 00:36:38,160
re-label all the content of our log and

00:36:36,400 --> 00:36:40,079
you know we might have other there's

00:36:38,160 --> 00:36:42,000
probably other parts of your system that

00:36:40,079 --> 00:36:42,400
are confined that i'm allowed to write

00:36:42,000 --> 00:36:44,880
to

00:36:42,400 --> 00:36:46,800
a container label um but need to write

00:36:44,880 --> 00:36:48,560
to the biology so you know

00:36:46,800 --> 00:36:50,160
you'd have lots and lots of the system

00:36:48,560 --> 00:36:52,240
would blow up if you

00:36:50,160 --> 00:36:53,200
you know run a column z at a higher

00:36:52,240 --> 00:36:56,079
level so this is

00:36:53,200 --> 00:36:56,320
the usual place where essie linux you

00:36:56,079 --> 00:36:59,119
know

00:36:56,320 --> 00:36:59,359
users stumble upon it so what do we do

00:36:59,119 --> 00:37:01,599
for

00:36:59,359 --> 00:37:03,359
that situation because we don't want

00:37:01,599 --> 00:37:05,280
people re-labeling you know system

00:37:03,359 --> 00:37:06,880
directories like that that's a bad idea

00:37:05,280 --> 00:37:09,359
or the host will break

00:37:06,880 --> 00:37:11,359
and so the only option by default is to

00:37:09,359 --> 00:37:12,160
basically turn sc linux off for the

00:37:11,359 --> 00:37:14,640
container

00:37:12,160 --> 00:37:16,560
um to really basically you know execute

00:37:14,640 --> 00:37:17,520
a security app labeled equals disabled

00:37:16,560 --> 00:37:19,280
which tells

00:37:17,520 --> 00:37:20,880
the container not to use sc link

00:37:19,280 --> 00:37:23,280
separation but that kind of sucks

00:37:20,880 --> 00:37:24,800
because i just told you that you know se

00:37:23,280 --> 00:37:26,880
linux is probably the best tool for a

00:37:24,800 --> 00:37:29,359
container separation that we have

00:37:26,880 --> 00:37:31,440
and now we turn it off for you know a

00:37:29,359 --> 00:37:34,000
fairly common use case

00:37:31,440 --> 00:37:35,920
so the the upstream sc linux maintainers

00:37:34,000 --> 00:37:39,200
have built a new tool called

00:37:35,920 --> 00:37:41,680
uditsa or utica for us americans

00:37:39,200 --> 00:37:43,760
uh but uditzer is a tool that can

00:37:41,680 --> 00:37:45,920
actually go out and it understands

00:37:43,760 --> 00:37:48,560
containers and understands the

00:37:45,920 --> 00:37:50,079
um the the json file that's associated

00:37:48,560 --> 00:37:52,079
with containers so basically you'll

00:37:50,079 --> 00:37:54,160
examine you build a container

00:37:52,079 --> 00:37:55,760
and it will examine the content of that

00:37:54,160 --> 00:37:57,119
container and we'll generate an sc linux

00:37:55,760 --> 00:38:00,560
policy based on that

00:37:57,119 --> 00:38:01,119
oops let's see if we can get this

00:38:00,560 --> 00:38:03,200
running so

00:38:01,119 --> 00:38:05,440
here i'm going to run a container on my

00:38:03,200 --> 00:38:07,359
system and i volume mounted in slash

00:38:05,440 --> 00:38:09,040
home into the container investment this

00:38:07,359 --> 00:38:10,240
is a standard one with see linux and

00:38:09,040 --> 00:38:12,560
enforcing mode

00:38:10,240 --> 00:38:14,320
um and if i do an ls at home it gives me

00:38:12,560 --> 00:38:16,400
permission tonight right because

00:38:14,320 --> 00:38:17,680
we don't want if a container broke out

00:38:16,400 --> 00:38:20,240
to be able to go out and

00:38:17,680 --> 00:38:21,920
read the home directory of the user and

00:38:20,240 --> 00:38:22,880
similarly if i wanted to you know we

00:38:21,920 --> 00:38:25,520
mounted this

00:38:22,880 --> 00:38:26,720
about spool as being rare world writable

00:38:25,520 --> 00:38:28,960
or rewritable

00:38:26,720 --> 00:38:30,560
if i wanted to go out and do something

00:38:28,960 --> 00:38:32,480
there i'm also going to get permission

00:38:30,560 --> 00:38:33,839
denied there for messy linux is the only

00:38:32,480 --> 00:38:36,160
thing that's preventing this

00:38:33,839 --> 00:38:37,760
on the system uh but you know you sort

00:38:36,160 --> 00:38:38,800
of stuck so if you wanted a container

00:38:37,760 --> 00:38:41,839
that did this

00:38:38,800 --> 00:38:43,280
um you would basically have to um

00:38:41,839 --> 00:38:44,800
you know run the machine and you know

00:38:43,280 --> 00:38:45,599
with essays linux disabled for the

00:38:44,800 --> 00:38:48,320
containers

00:38:45,599 --> 00:38:49,760
so now i'm going to take udiza and and

00:38:48,320 --> 00:38:51,359
basically i'm going to look at the

00:38:49,760 --> 00:38:55,119
container i just generated

00:38:51,359 --> 00:38:56,800
and pipe it into uditsa so right there i

00:38:55,119 --> 00:38:58,640
inspected it and what happened just in

00:38:56,800 --> 00:39:00,800
that inspection you need to went out and

00:38:58,640 --> 00:39:02,000
generated policy so here's a couple of

00:39:00,800 --> 00:39:04,720
commands

00:39:02,000 --> 00:39:07,200
so i'm about to execute two commands to

00:39:04,720 --> 00:39:09,599
update the se linux policy on the system

00:39:07,200 --> 00:39:11,839
to basically be able to create a new

00:39:09,599 --> 00:39:14,000
policy type for my container

00:39:11,839 --> 00:39:15,280
so now instead of the first time i just

00:39:14,000 --> 00:39:17,200
ran with the standard

00:39:15,280 --> 00:39:19,200
label but now i'm going to run my

00:39:17,200 --> 00:39:22,000
container with my generated

00:39:19,200 --> 00:39:23,520
um type so create this created a new my

00:39:22,000 --> 00:39:24,880
container process type

00:39:23,520 --> 00:39:26,720
but that's the only thing that's changed

00:39:24,880 --> 00:39:28,240
so instead of having to run see linux

00:39:26,720 --> 00:39:30,480
disabled for this container

00:39:28,240 --> 00:39:31,440
i could actually generate a policy for

00:39:30,480 --> 00:39:33,280
the container

00:39:31,440 --> 00:39:35,119
uh that easily and here you can see the

00:39:33,280 --> 00:39:37,440
container running on my system

00:39:35,119 --> 00:39:38,560
uh with the new label and now i'm gonna

00:39:37,440 --> 00:39:41,520
enter the container

00:39:38,560 --> 00:39:42,160
and if i go into slash home i see

00:39:41,520 --> 00:39:44,880
content

00:39:42,160 --> 00:39:45,680
and if i go out and i touch content and

00:39:44,880 --> 00:39:48,400
brass pool

00:39:45,680 --> 00:39:50,640
then i get able to do it so this

00:39:48,400 --> 00:39:52,160
container is still under confinement

00:39:50,640 --> 00:39:54,560
but the only thing it's able to do now

00:39:52,160 --> 00:39:57,359
is read the content that's in slash home

00:39:54,560 --> 00:39:57,839
and actually you know and and write soup

00:39:57,359 --> 00:39:59,680
content

00:39:57,839 --> 00:40:01,200
investment and so now you can take

00:39:59,680 --> 00:40:03,599
something like the flu indeed

00:40:01,200 --> 00:40:05,119
uh container that we showed earlier and

00:40:03,599 --> 00:40:06,960
actually running with etsy linux and

00:40:05,119 --> 00:40:08,319
enforcing mode still locked down but

00:40:06,960 --> 00:40:10,640
slightly looser slightly

00:40:08,319 --> 00:40:12,319
closer to mama bear as opposed to going

00:40:10,640 --> 00:40:15,520
all the way past mom and dad to

00:40:12,319 --> 00:40:16,480
being disabled so the last thing i'm

00:40:15,520 --> 00:40:19,680
going to talk about

00:40:16,480 --> 00:40:21,680
uh in in this session is use a namespace

00:40:19,680 --> 00:40:24,720
so you use a namespace is a

00:40:21,680 --> 00:40:27,040
uh is something that's sort of

00:40:24,720 --> 00:40:27,760
people have dreamed about for years and

00:40:27,040 --> 00:40:30,720
years

00:40:27,760 --> 00:40:32,480
um and the the basic idea is the

00:40:30,720 --> 00:40:35,839
username space allows us to map

00:40:32,480 --> 00:40:38,560
non-root users uh you know give give

00:40:35,839 --> 00:40:40,000
root to a container but not be rude in

00:40:38,560 --> 00:40:41,680
the system so if you broke out of a

00:40:40,000 --> 00:40:43,200
container even though you root inside

00:40:41,680 --> 00:40:46,240
the container if you broke out

00:40:43,200 --> 00:40:48,000
you would be uh non-root and so

00:40:46,240 --> 00:40:50,079
this is this is actually the secret of

00:40:48,000 --> 00:40:52,079
podman it's pod menu when you're running

00:40:50,079 --> 00:40:54,000
rootless podman rootless builder we're

00:40:52,079 --> 00:40:55,760
actually using the username space

00:40:54,000 --> 00:40:57,599
so we use the namespace allows us to

00:40:55,760 --> 00:40:59,040
fake you out so you know when you look

00:40:57,599 --> 00:41:01,280
at root inside of your

00:40:59,040 --> 00:41:02,720
rootless container if you went if you

00:41:01,280 --> 00:41:04,560
left that

00:41:02,720 --> 00:41:06,000
container and look to that process that

00:41:04,560 --> 00:41:08,400
process is actually just you

00:41:06,000 --> 00:41:09,680
it's your uid so all we're doing is

00:41:08,400 --> 00:41:12,640
mapping your uid

00:41:09,680 --> 00:41:14,160
inside the container uh your uid outside

00:41:12,640 --> 00:41:15,839
of the container to be rooted inside the

00:41:14,160 --> 00:41:18,400
container

00:41:15,839 --> 00:41:20,160
the problem is that other than podman

00:41:18,400 --> 00:41:23,359
you know none of these you know cryo

00:41:20,160 --> 00:41:25,440
and kubernetes and you know docker

00:41:23,359 --> 00:41:26,960
and stuff like that has ever used user

00:41:25,440 --> 00:41:29,680
name space um so

00:41:26,960 --> 00:41:31,359
really we're not using it for container

00:41:29,680 --> 00:41:32,640
separation there has been some efforts

00:41:31,359 --> 00:41:34,640
to potentially

00:41:32,640 --> 00:41:36,640
run your container engine in the

00:41:34,640 --> 00:41:37,920
username space but not to have each

00:41:36,640 --> 00:41:39,520
container launched with a different

00:41:37,920 --> 00:41:41,440
username space

00:41:39,520 --> 00:41:42,720
um so with usernamespace it'd be really

00:41:41,440 --> 00:41:44,240
cool if we launched every single

00:41:42,720 --> 00:41:44,880
container with a different username

00:41:44,240 --> 00:41:46,720
space for

00:41:44,880 --> 00:41:48,000
you know each container with a different

00:41:46,720 --> 00:41:50,560
username space

00:41:48,000 --> 00:41:51,920
um and you know we're working towards

00:41:50,560 --> 00:41:55,359
that and we're hoping to get

00:41:51,920 --> 00:41:56,079
into kubernetes soon um so there is some

00:41:55,359 --> 00:41:57,440
features

00:41:56,079 --> 00:42:00,079
you know that are lacking but we're

00:41:57,440 --> 00:42:01,920
building up our tooling to be able to do

00:42:00,079 --> 00:42:04,240
things like uh you know fixing up the

00:42:01,920 --> 00:42:07,280
file systems to be able to work

00:42:04,240 --> 00:42:11,520
and so here i'm going to do a quick demo

00:42:07,280 --> 00:42:12,319
of uh here's the namespace so podman has

00:42:11,520 --> 00:42:15,040
built in

00:42:12,319 --> 00:42:15,520
you can specify username space i can

00:42:15,040 --> 00:42:17,520
take a

00:42:15,520 --> 00:42:18,880
container and if i looked inside the

00:42:17,520 --> 00:42:20,800
container right now

00:42:18,880 --> 00:42:22,560
um if i entered that container it said

00:42:20,800 --> 00:42:24,319
it's running its root but if i look at

00:42:22,560 --> 00:42:25,760
you know i use podman top here

00:42:24,319 --> 00:42:27,520
to show you that that container is

00:42:25,760 --> 00:42:30,800
actually running as uid 100

00:42:27,520 --> 00:42:32,720
000. um and here you know if i

00:42:30,800 --> 00:42:34,560
actually examine the system to look at

00:42:32,720 --> 00:42:36,400
that sleep command i just executed you

00:42:34,560 --> 00:42:37,200
see it's running as 100 000 on the

00:42:36,400 --> 00:42:38,880
system

00:42:37,200 --> 00:42:40,400
um and then if i launched the second

00:42:38,880 --> 00:42:43,839
container

00:42:40,400 --> 00:42:47,680
as uid 200 000 the reason this is

00:42:43,839 --> 00:42:47,680
pausing is actually changing the file

00:42:48,480 --> 00:42:52,480
okay so now created a second container

00:42:50,800 --> 00:42:53,520
so now i have two containers on my

00:42:52,480 --> 00:42:55,440
system

00:42:53,520 --> 00:42:57,040
running both of them think they have

00:42:55,440 --> 00:42:58,560
both of them have root inside of the

00:42:57,040 --> 00:42:59,920
container they're able to do things like

00:42:58,560 --> 00:43:01,200
root inside of the container and have

00:42:59,920 --> 00:43:02,800
multiple uids

00:43:01,200 --> 00:43:04,400
but on the host you know one's running

00:43:02,800 --> 00:43:07,200
is 200 uid 200

00:43:04,400 --> 00:43:09,599
100 000 the other one's running is uid

00:43:07,200 --> 00:43:10,480
200 000 if those container processes

00:43:09,599 --> 00:43:12,319
broke out

00:43:10,480 --> 00:43:14,400
and got access to the system the system

00:43:12,319 --> 00:43:16,960
would just treat them as uid 100

00:43:14,400 --> 00:43:18,400
000 uid 200 000 so they wouldn't have

00:43:16,960 --> 00:43:21,040
any power you know

00:43:18,400 --> 00:43:23,119
basically sort of this standard security

00:43:21,040 --> 00:43:26,160
that we've been relying on for

00:43:23,119 --> 00:43:28,960
you know 50 years in linux linux

00:43:26,160 --> 00:43:29,760
you know we'd have full uid protections

00:43:28,960 --> 00:43:31,440
so we've added

00:43:29,760 --> 00:43:33,520
new the problem with that is you know

00:43:31,440 --> 00:43:36,960
you have to the user again

00:43:33,520 --> 00:43:39,680
has to be able to uh figure out which

00:43:36,960 --> 00:43:41,280
username space to use to to basically

00:43:39,680 --> 00:43:44,240
make sure each one of us containers

00:43:41,280 --> 00:43:46,000
is secure so we've added a flag to

00:43:44,240 --> 00:43:48,240
pogman again

00:43:46,000 --> 00:43:50,240
to basically automatically pick uh

00:43:48,240 --> 00:43:51,280
unique username spaces so this one went

00:43:50,240 --> 00:43:54,560
out and picked

00:43:51,280 --> 00:43:56,319
um this huge number as the process

00:43:54,560 --> 00:43:58,240
running on the system is running as

00:43:56,319 --> 00:43:59,760
that huge number and now we're going to

00:43:58,240 --> 00:44:00,240
run another container it's going to pick

00:43:59,760 --> 00:44:04,000
a

00:44:00,240 --> 00:44:05,520
huge different number um so so now we're

00:44:04,000 --> 00:44:07,200
basically you know we don't have to do

00:44:05,520 --> 00:44:09,520
any smarts on the system

00:44:07,200 --> 00:44:10,240
and basically podman in its databases

00:44:09,520 --> 00:44:12,640
there is

00:44:10,240 --> 00:44:14,640
in storage is actually keeping track of

00:44:12,640 --> 00:44:18,000
all the username spaces that's using

00:44:14,640 --> 00:44:19,599
and and able to give you different um

00:44:18,000 --> 00:44:20,960
you know different username spaces for

00:44:19,599 --> 00:44:22,000
each one of them so here i created

00:44:20,960 --> 00:44:24,319
another one

00:44:22,000 --> 00:44:26,079
and this just shows you what the mapping

00:44:24,319 --> 00:44:29,440
inside of the container looks like

00:44:26,079 --> 00:44:32,720
so this one says that it's mapping uid 0

00:44:29,440 --> 00:44:35,520
to this gargantuan number and then

00:44:32,720 --> 00:44:36,480
you know we asked for only 5 000 uids so

00:44:35,520 --> 00:44:38,240
it basically maps

00:44:36,480 --> 00:44:39,920
the next five thousand uids into the

00:44:38,240 --> 00:44:41,200
container and you can take advantage of

00:44:39,920 --> 00:44:43,359
using a space

00:44:41,200 --> 00:44:45,440
uh podman under the covers is setting

00:44:43,359 --> 00:44:49,119
that up to um

00:44:45,440 --> 00:44:52,160
to uh be able to um

00:44:49,119 --> 00:44:54,880
you know use those uh you know

00:44:52,160 --> 00:44:56,640
random uids and and fixing up the file

00:44:54,880 --> 00:44:58,720
systems and things like that so that

00:44:56,640 --> 00:45:01,119
everything will work um so right now

00:44:58,720 --> 00:45:03,280
there's a pull request inside into cryo

00:45:01,119 --> 00:45:04,960
i think it's just been about merged

00:45:03,280 --> 00:45:07,200
to allow cryo to do similar

00:45:04,960 --> 00:45:09,040
functionality to that so cryo

00:45:07,200 --> 00:45:10,880
will be able to launch lots and lots of

00:45:09,040 --> 00:45:12,160
containers underneath kubernetes

00:45:10,880 --> 00:45:14,319
each one of them inside of their own

00:45:12,160 --> 00:45:15,599
username space so at this point i'm

00:45:14,319 --> 00:45:19,839
going to stop sharing

00:45:15,599 --> 00:45:19,839
and see if anybody's asked any questions

00:45:26,319 --> 00:45:30,400
has someone been reading the questions

00:45:27,839 --> 00:45:33,440
to ask them

00:45:30,400 --> 00:45:36,319
i can do that that'd be great so

00:45:33,440 --> 00:45:39,440
um mike asks that these runtime

00:45:36,319 --> 00:45:42,160
namespace selections are separate from

00:45:39,440 --> 00:45:42,800
what we would previously have to specify

00:45:42,160 --> 00:45:47,119
in

00:45:42,800 --> 00:45:49,440
uh edc sub id file so the etsy subuid

00:45:47,119 --> 00:45:52,319
file nazi sub gid file

00:45:49,440 --> 00:45:54,240
is is something that is specified for

00:45:52,319 --> 00:45:56,160
each user on the system

00:45:54,240 --> 00:45:57,359
what i'm trying to show here is i'm

00:45:56,160 --> 00:46:00,319
running

00:45:57,359 --> 00:46:02,160
lots and lots of containers as root and

00:46:00,319 --> 00:46:02,880
then putting them into separate username

00:46:02,160 --> 00:46:04,560
spaces

00:46:02,880 --> 00:46:06,480
we can do similar with rootless

00:46:04,560 --> 00:46:08,720
containers except that the

00:46:06,480 --> 00:46:10,160
number of uids that i have allocated

00:46:08,720 --> 00:46:14,560
right so by default

00:46:10,160 --> 00:46:15,760
a user running on a linux system gets 65

00:46:14,560 --> 00:46:17,280
000 uids

00:46:15,760 --> 00:46:19,040
if he's going to create multiple

00:46:17,280 --> 00:46:22,560
containers

00:46:19,040 --> 00:46:23,520
using auto equals f you know he's he's

00:46:22,560 --> 00:46:26,560
going to use up

00:46:23,520 --> 00:46:28,960
his number of uids very quickly

00:46:26,560 --> 00:46:31,200
as opposed to if you root on the system

00:46:28,960 --> 00:46:33,760
you have you know basically four billion

00:46:31,200 --> 00:46:35,920
uids so if you even allocate them with

00:46:33,760 --> 00:46:37,920
65 000 uids each

00:46:35,920 --> 00:46:39,200
um you can get better separation so the

00:46:37,920 --> 00:46:42,000
real goal to me

00:46:39,200 --> 00:46:42,800
is is not well it's a cool feature for

00:46:42,000 --> 00:46:45,280
rootless

00:46:42,800 --> 00:46:46,560
um it's also a much cooler feature if

00:46:45,280 --> 00:46:48,000
you're running a server with lots and

00:46:46,560 --> 00:46:50,400
lots of services running on

00:46:48,000 --> 00:46:52,880
it um and those services require real

00:46:50,400 --> 00:46:53,599
root um to use username space and and

00:46:52,880 --> 00:46:55,599
really

00:46:53,599 --> 00:46:57,520
the end goal the real goal is to get

00:46:55,599 --> 00:46:59,920
this into kubernetes so that

00:46:57,520 --> 00:47:01,200
kubernetes could launch you know 50 200

00:46:59,920 --> 00:47:03,040
300 containers

00:47:01,200 --> 00:47:04,960
each one of different username spaces

00:47:03,040 --> 00:47:10,480
and you know we basically added another

00:47:04,960 --> 00:47:13,760
layer of defense

00:47:10,480 --> 00:47:17,599
okay so um james cassell

00:47:13,760 --> 00:47:18,720
asks that um it's ordered to allow for

00:47:17,599 --> 00:47:20,400
containers

00:47:18,720 --> 00:47:21,920
yeah it's actually smarter than audit to

00:47:20,400 --> 00:47:23,520
allow so autolow just

00:47:21,920 --> 00:47:25,359
basically waits till something goes

00:47:23,520 --> 00:47:28,640
wrong and then

00:47:25,359 --> 00:47:31,119
this is utica um

00:47:28,640 --> 00:47:32,480
auto to allow just reads what's written

00:47:31,119 --> 00:47:33,680
into the auto log these are things that

00:47:32,480 --> 00:47:35,760
were blocked by

00:47:33,680 --> 00:47:37,520
um you know i see linux and then

00:47:35,760 --> 00:47:40,079
basically as allow rules

00:47:37,520 --> 00:47:41,839
what juditha does is actually looks at

00:47:40,079 --> 00:47:42,800
those two volumes that were mounted into

00:47:41,839 --> 00:47:45,599
the container

00:47:42,800 --> 00:47:46,559
and see it figures out oh uh he needs to

00:47:45,599 --> 00:47:48,000
be able to read

00:47:46,559 --> 00:47:50,319
you know it's a read-only flag on the

00:47:48,000 --> 00:47:52,800
slash home directory so it generates

00:47:50,319 --> 00:47:54,720
policy that says he can read any type

00:47:52,800 --> 00:47:57,119
that is defined and stored in underneath

00:47:54,720 --> 00:47:58,319
slash home um similarly the vast school

00:47:57,119 --> 00:48:00,480
was rewritable

00:47:58,319 --> 00:48:02,079
it looks at baspool looks at the essence

00:48:00,480 --> 00:48:03,920
policies installed the machine it

00:48:02,079 --> 00:48:06,240
generates policy that says it can

00:48:03,920 --> 00:48:07,520
read and write types that are stored

00:48:06,240 --> 00:48:09,440
under my spool

00:48:07,520 --> 00:48:11,200
so it's it's a really sort of an

00:48:09,440 --> 00:48:13,599
intelligent and creative

00:48:11,200 --> 00:48:15,280
way of handling this but yes but it's

00:48:13,599 --> 00:48:16,880
not and after the fact it's basically

00:48:15,280 --> 00:48:18,880
before you run a container

00:48:16,880 --> 00:48:20,559
you basically define you design your

00:48:18,880 --> 00:48:21,920
container and then realize that's the

00:48:20,559 --> 00:48:24,079
links are going to be a problem and you

00:48:21,920 --> 00:48:24,720
run uditsa to examine how the container

00:48:24,079 --> 00:48:26,319
is and says

00:48:24,720 --> 00:48:28,160
it comes back and says well this

00:48:26,319 --> 00:48:28,880
container would work better if it had it

00:48:28,160 --> 00:48:30,800
uses this

00:48:28,880 --> 00:48:34,559
as a linux type and generates the policy

00:48:30,800 --> 00:48:37,680
to be used

00:48:34,559 --> 00:48:40,720
right um and finally we had

00:48:37,680 --> 00:48:43,359
michelle salim ask that

00:48:40,720 --> 00:48:45,280
is overlaying the labels an option i

00:48:43,359 --> 00:48:48,640
guess this is in context with

00:48:45,280 --> 00:48:49,760
the linux files yeah so

00:48:48,640 --> 00:48:51,440
really you're talking i think what

00:48:49,760 --> 00:48:52,640
you're asking there is could i have two

00:48:51,440 --> 00:48:55,520
different types

00:48:52,640 --> 00:48:56,640
for a file you know or could i somehow

00:48:55,520 --> 00:48:58,480
um

00:48:56,640 --> 00:48:59,920
i guess do a bind mount and have it

00:48:58,480 --> 00:49:02,800
change the label

00:48:59,920 --> 00:49:03,920
um of the files and and really from a

00:49:02,800 --> 00:49:05,920
security point of view

00:49:03,920 --> 00:49:07,520
selinux has always blocked that

00:49:05,920 --> 00:49:08,240
capability for going into the latest

00:49:07,520 --> 00:49:11,280
kernel

00:49:08,240 --> 00:49:12,640
um because they believe that uh uh if i

00:49:11,280 --> 00:49:16,000
have two types on

00:49:12,640 --> 00:49:16,720
a single file on the system um it you

00:49:16,000 --> 00:49:18,960
know the the

00:49:16,720 --> 00:49:20,240
security of this of the files is none

00:49:18,960 --> 00:49:23,200
you can't judge it right so

00:49:20,240 --> 00:49:25,280
it's sort of you know basically they

00:49:23,200 --> 00:49:25,920
want every object to have a single label

00:49:25,280 --> 00:49:28,640
on it

00:49:25,920 --> 00:49:29,040
and then you enforce that label based

00:49:28,640 --> 00:49:32,640
off

00:49:29,040 --> 00:49:34,079
you know a you know there's an analysis

00:49:32,640 --> 00:49:34,640
that can happen at that point by the

00:49:34,079 --> 00:49:36,640
colonel

00:49:34,640 --> 00:49:37,839
to make sure that you this process only

00:49:36,640 --> 00:49:40,160
has it and it's in

00:49:37,839 --> 00:49:41,760
they need to have ways of discovering

00:49:40,160 --> 00:49:44,640
and studying those

00:49:41,760 --> 00:49:45,440
those types so they never allowed um two

00:49:44,640 --> 00:49:47,200
types to be

00:49:45,440 --> 00:49:50,000
stored on a single file in a single

00:49:47,200 --> 00:49:52,880
single time as far as bind mounts

00:49:50,000 --> 00:49:53,440
there is a select thing called a context

00:49:52,880 --> 00:49:56,160
mount

00:49:53,440 --> 00:49:58,079
so when i do a mount of say an nfs

00:49:56,160 --> 00:49:58,880
directory i can say this nfs directory

00:49:58,079 --> 00:50:02,319
is going to be

00:49:58,880 --> 00:50:04,160
a container file t type but um

00:50:02,319 --> 00:50:05,520
bind mounts don't support that mainly

00:50:04,160 --> 00:50:08,160
for the same reason that you know

00:50:05,520 --> 00:50:08,960
so it would be easy to confuse the linux

00:50:08,160 --> 00:50:13,839
kernel if

00:50:08,960 --> 00:50:13,839
you were able to do buying mouse

00:50:14,079 --> 00:50:19,760
great so we have one more question mike

00:50:17,200 --> 00:50:21,040
asks that the eureka rules are specific

00:50:19,760 --> 00:50:22,800
to the image

00:50:21,040 --> 00:50:24,720
containers that they were generated

00:50:22,800 --> 00:50:27,200
against

00:50:24,720 --> 00:50:28,640
uh it's well theoretically yes i mean

00:50:27,200 --> 00:50:30,800
because it's

00:50:28,640 --> 00:50:32,800
yes it's it's it's more towards the

00:50:30,800 --> 00:50:34,559
container than the image because it's

00:50:32,800 --> 00:50:37,839
it's examining the

00:50:34,559 --> 00:50:38,960
the volumes and capabilities and things

00:50:37,839 --> 00:50:41,040
like that that you put

00:50:38,960 --> 00:50:43,119
when you ran the container so the in

00:50:41,040 --> 00:50:45,520
this case the developer of

00:50:43,119 --> 00:50:47,040
the application has designed say a pod

00:50:45,520 --> 00:50:50,319
man or a docker command

00:50:47,040 --> 00:50:51,200
to execute his container and you know he

00:50:50,319 --> 00:50:52,880
might specify

00:50:51,200 --> 00:50:54,319
you know somewhere in help document this

00:50:52,880 --> 00:50:56,079
is a command i would suggest that you

00:50:54,319 --> 00:50:58,000
would run for running the container

00:50:56,079 --> 00:50:59,440
and what you need to would then do is

00:50:58,000 --> 00:51:00,880
look at that and be able to generate

00:50:59,440 --> 00:51:03,200
policy on the fly

00:51:00,880 --> 00:51:04,880
to to allow you to control what that

00:51:03,200 --> 00:51:08,800
container does in the system from that

00:51:04,880 --> 00:51:12,079
to the next point of view

00:51:08,800 --> 00:51:12,960
great i think that's the end of all the

00:51:12,079 --> 00:51:15,440
questions

00:51:12,960 --> 00:51:16,880
yeah thanks a lot dan i think this talk

00:51:15,440 --> 00:51:19,839
was really informative

00:51:16,880 --> 00:51:22,160
i for one didn't know i could do 300 sis

00:51:19,839 --> 00:51:24,400
calls from my container

00:51:22,160 --> 00:51:27,720
so that's great if you want to look at

00:51:24,400 --> 00:51:29,200
the syscalls go to uh

00:51:27,720 --> 00:51:30,480
usershipcontainers.com.json that's the

00:51:29,200 --> 00:51:32,800
whole list

00:51:30,480 --> 00:51:34,240
okay i guess i'm i think someone's

00:51:32,800 --> 00:51:35,040
supposed to be talking right now so i

00:51:34,240 --> 00:51:37,839
got to get out

00:51:35,040 --> 00:51:37,839

YouTube URL: https://www.youtube.com/watch?v=wuwwp-abfOA


