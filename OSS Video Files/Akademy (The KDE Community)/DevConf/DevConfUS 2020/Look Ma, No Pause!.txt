Title: Look Ma, No Pause!
Publication date: 2020-10-07
Playlist: DevConfUS 2020
Description: 
	Speaker: Peter Hunt

The pause container is a quinnessential hack for Kubernetes pods. A pause container is the first container in a pod, pauses until it is terminated, and is used to hold Linux namespaces open for the lifespan of the pod. Even though the pause container is as minimal as possible, it still has overhead, and we can do better.
CRI-O now has the option to only run a pause container when absolutely necessary. Join Peter Hunt for a deep dive into the implementation details of dropping the pause container, as well as a performance comparison and discussion of other benefits. Attendees will participate in a conversation about the removal of this hack from Kubernetes.
Captions: 
	00:00:01,040 --> 00:00:05,120
hello everybody and welcome to my talk

00:00:03,280 --> 00:00:06,399
my name is peter hunt i'm a software

00:00:05,120 --> 00:00:08,880
engineer for red hat

00:00:06,399 --> 00:00:10,000
i primarily work on cryo for openshift

00:00:08,880 --> 00:00:12,000
but i also work on

00:00:10,000 --> 00:00:13,599
con mon and podman and other container

00:00:12,000 --> 00:00:15,519
related technologies

00:00:13,599 --> 00:00:17,119
today we're going to talk about cryo

00:00:15,519 --> 00:00:20,480
specifically the journey

00:00:17,119 --> 00:00:22,720
in cryo in dropping the paws container

00:00:20,480 --> 00:00:24,320
before we get into the nitty-gritty

00:00:22,720 --> 00:00:25,119
about what a pause container is we've

00:00:24,320 --> 00:00:27,760
got to first

00:00:25,119 --> 00:00:29,439
talk about what a little bit about

00:00:27,760 --> 00:00:31,920
kubernetes background so to get on the

00:00:29,439 --> 00:00:34,239
same page let's talk about what a pot is

00:00:31,920 --> 00:00:35,040
you can think about a pod like a group

00:00:34,239 --> 00:00:36,719
of it's

00:00:35,040 --> 00:00:38,239
it's like a logical host it's a group of

00:00:36,719 --> 00:00:40,000
containers pretty much

00:00:38,239 --> 00:00:42,160
they share some name spaces and some

00:00:40,000 --> 00:00:44,960
storage and they're kind of like

00:00:42,160 --> 00:00:45,840
uh you know server so you may have a web

00:00:44,960 --> 00:00:47,680
server

00:00:45,840 --> 00:00:49,280
container inside of it and maybe a

00:00:47,680 --> 00:00:51,520
logging sidecar

00:00:49,280 --> 00:00:52,640
and maybe some other containers that you

00:00:51,520 --> 00:00:55,920
know

00:00:52,640 --> 00:00:58,800
warm up the cache maybe

00:00:55,920 --> 00:00:59,920
uh now that we have a uh understanding

00:00:58,800 --> 00:01:02,160
what a pod is

00:00:59,920 --> 00:01:03,680
let's talk a little bit about the pause

00:01:02,160 --> 00:01:06,479
or the infra container

00:01:03,680 --> 00:01:07,680
but what is the pause if you uh run

00:01:06,479 --> 00:01:10,240
docker

00:01:07,680 --> 00:01:11,280
and you've ever run docker ps on your

00:01:10,240 --> 00:01:13,439
kubernetes node

00:01:11,280 --> 00:01:14,640
you may notice a mysterious pause

00:01:13,439 --> 00:01:17,439
container

00:01:14,640 --> 00:01:17,840
in the bottom of this of this picture we

00:01:17,439 --> 00:01:21,600
have

00:01:17,840 --> 00:01:24,159
pause 3.2 and the pause container

00:01:21,600 --> 00:01:26,159
sits and pauses it really doesn't do

00:01:24,159 --> 00:01:27,920
very much more than that

00:01:26,159 --> 00:01:29,840
except for at the end of its life and

00:01:27,920 --> 00:01:31,520
we'll talk more about what the pause

00:01:29,840 --> 00:01:35,439
does

00:01:31,520 --> 00:01:38,560
the original the idea of the pause is to

00:01:35,439 --> 00:01:40,479
hold the pod level name spaces uh

00:01:38,560 --> 00:01:41,920
and share them with other containers

00:01:40,479 --> 00:01:43,600
inside of the pod

00:01:41,920 --> 00:01:46,640
and it's contained within the pod c

00:01:43,600 --> 00:01:47,840
group it's often referred to as the pod

00:01:46,640 --> 00:01:49,520
infra container

00:01:47,840 --> 00:01:51,200
so in this talk we're mostly going to

00:01:49,520 --> 00:01:53,600
call it pause but you may see some

00:01:51,200 --> 00:01:56,159
uh instances of it being called an

00:01:53,600 --> 00:01:59,439
infrared container

00:01:56,159 --> 00:02:01,200
for some history of kubernetes pods

00:01:59,439 --> 00:02:04,719
uh in the beginning there was just

00:02:01,200 --> 00:02:08,080
docker and

00:02:04,719 --> 00:02:11,599
this was you know well before cri or

00:02:08,080 --> 00:02:13,840
rocket or other runtimes were able to go

00:02:11,599 --> 00:02:17,440
under kubernetes

00:02:13,840 --> 00:02:18,959
kubernetes needed a way to give each pod

00:02:17,440 --> 00:02:22,080
an ip address

00:02:18,959 --> 00:02:23,840
how would one do that in docker the way

00:02:22,080 --> 00:02:25,120
that they figured it out was they

00:02:23,840 --> 00:02:28,319
started a container

00:02:25,120 --> 00:02:30,480
and then they had they jumped into the

00:02:28,319 --> 00:02:32,400
network namespace of that container and

00:02:30,480 --> 00:02:35,760
assigned an ip

00:02:32,400 --> 00:02:37,920
then they started other containers uh

00:02:35,760 --> 00:02:39,040
joining that network namespace of the

00:02:37,920 --> 00:02:42,319
first container

00:02:39,040 --> 00:02:43,120
and then the containers had the assigned

00:02:42,319 --> 00:02:44,879
ip

00:02:43,120 --> 00:02:46,800
and that's how the pause container came

00:02:44,879 --> 00:02:48,800
to be

00:02:46,800 --> 00:02:50,000
as such it was originally called the net

00:02:48,800 --> 00:02:51,519
container because it only

00:02:50,000 --> 00:02:53,440
held the network namespace but

00:02:51,519 --> 00:02:53,920
eventually other namespaces were added

00:02:53,440 --> 00:02:56,160
to it

00:02:53,920 --> 00:02:57,920
the first one being ipc at which point

00:02:56,160 --> 00:02:59,680
it was named the infrared container in

00:02:57,920 --> 00:03:02,840
the codebase

00:02:59,680 --> 00:03:04,080
eventually the pid namespace sharing was

00:03:02,840 --> 00:03:06,080
added uh

00:03:04,080 --> 00:03:07,519
and then the positive job came a little

00:03:06,080 --> 00:03:09,680
bit more involved

00:03:07,519 --> 00:03:11,120
uh in addition to just holding the

00:03:09,680 --> 00:03:14,159
namespaces

00:03:11,120 --> 00:03:16,480
it is also by being pid one in

00:03:14,159 --> 00:03:17,360
the pod level pit namespace it's

00:03:16,480 --> 00:03:20,640
responsible for

00:03:17,360 --> 00:03:21,920
reaping processes in the pot and we're

00:03:20,640 --> 00:03:24,000
going to talk about that a little bit

00:03:21,920 --> 00:03:25,840
more later

00:03:24,000 --> 00:03:27,599
so now we know what the pause is why

00:03:25,840 --> 00:03:28,799
would we drop it we've been using this

00:03:27,599 --> 00:03:30,959
forever

00:03:28,799 --> 00:03:33,040
the first reason is it uses up space for

00:03:30,959 --> 00:03:35,760
the binary the container and the image

00:03:33,040 --> 00:03:36,400
so uh per node the image is it's a

00:03:35,760 --> 00:03:39,760
pretty small

00:03:36,400 --> 00:03:42,400
600 kilobytes not bad not really

00:03:39,760 --> 00:03:44,879
anything anyone would sweat

00:03:42,400 --> 00:03:45,760
however the amount of memory that it had

00:03:44,879 --> 00:03:48,959
per pod

00:03:45,760 --> 00:03:52,480
is not great i mean one meg

00:03:48,959 --> 00:03:55,680
per pod is really not bad kubernetes

00:03:52,480 --> 00:03:58,000
nodes typically cap at around 250

00:03:55,680 --> 00:03:59,439
uh pods which means that's 250 megs

00:03:58,000 --> 00:04:00,319
that's barely anything in the grand

00:03:59,439 --> 00:04:03,280
scheme of things

00:04:00,319 --> 00:04:05,040
but that is a little bit of space for

00:04:03,280 --> 00:04:07,120
your workloads

00:04:05,040 --> 00:04:10,000
another reason is it does take time to

00:04:07,120 --> 00:04:13,280
create mount and start the container

00:04:10,000 --> 00:04:16,400
below we have an example of running it

00:04:13,280 --> 00:04:17,600
uh creating a pod with a pause container

00:04:16,400 --> 00:04:20,160
and without

00:04:17,600 --> 00:04:21,919
um and these times don't look all that

00:04:20,160 --> 00:04:22,240
different and i'm gonna go into a little

00:04:21,919 --> 00:04:25,199
bit

00:04:22,240 --> 00:04:26,639
more of com performance comparison and i

00:04:25,199 --> 00:04:29,520
ultimately know that

00:04:26,639 --> 00:04:30,560
there are really two things that uh pod

00:04:29,520 --> 00:04:34,000
creation request

00:04:30,560 --> 00:04:35,520
needs to do it needs to somehow share

00:04:34,000 --> 00:04:37,120
the name spaces

00:04:35,520 --> 00:04:38,560
uh create the namespaces for sharing

00:04:37,120 --> 00:04:41,120
within the pod and

00:04:38,560 --> 00:04:42,240
set up the networking stack for the pod

00:04:41,120 --> 00:04:44,479
so

00:04:42,240 --> 00:04:45,840
uh this is with by dropping the pause

00:04:44,479 --> 00:04:49,360
container we're doing about

00:04:45,840 --> 00:04:51,919
you know half of those things finally

00:04:49,360 --> 00:04:53,919
there's some process management overhead

00:04:51,919 --> 00:04:54,479
uh there's much more code and setup and

00:04:53,919 --> 00:04:56,320
cleanup

00:04:54,479 --> 00:04:57,600
and you know we need to keep track of

00:04:56,320 --> 00:05:00,240
the pause container

00:04:57,600 --> 00:05:02,000
notice here we have uh you know we we

00:05:00,240 --> 00:05:03,600
have a devoted con mon which is a

00:05:02,000 --> 00:05:04,880
container monitor for our infra

00:05:03,600 --> 00:05:07,759
container to make sure that it's still

00:05:04,880 --> 00:05:10,320
alive or it hasn't been um killed

00:05:07,759 --> 00:05:11,600
and ultimately no process means no

00:05:10,320 --> 00:05:12,960
process management

00:05:11,600 --> 00:05:14,960
uh we don't have to worry about any of

00:05:12,960 --> 00:05:18,400
that and the saved code

00:05:14,960 --> 00:05:18,400
has saved bugs as well

00:05:18,639 --> 00:05:22,400
so how would we go about dropping the

00:05:20,960 --> 00:05:25,039
pause container if we needed to

00:05:22,400 --> 00:05:25,600
what does the pause container really do

00:05:25,039 --> 00:05:27,120
the first

00:05:25,600 --> 00:05:29,039
thing that you need to do is find a way

00:05:27,120 --> 00:05:30,560
to keep name spaces without an

00:05:29,039 --> 00:05:32,160
associated process

00:05:30,560 --> 00:05:35,120
and luckily linux just supports us out

00:05:32,160 --> 00:05:37,759
of the box we can bind mount namespaces

00:05:35,120 --> 00:05:38,880
so in this first line here we have

00:05:37,759 --> 00:05:42,479
unshared

00:05:38,880 --> 00:05:46,160
net and unshare means uh

00:05:42,479 --> 00:05:46,960
create or point to another namespace and

00:05:46,160 --> 00:05:49,280
jump into it

00:05:46,960 --> 00:05:50,800
so unshare minus minusnet means make me

00:05:49,280 --> 00:05:52,639
a new namespace and then put me right

00:05:50,800 --> 00:05:53,759
inside of it and then that following

00:05:52,639 --> 00:05:57,199
command mount

00:05:53,759 --> 00:06:00,880
dash bind proc self nsnet davar

00:05:57,199 --> 00:06:02,800
run net1 uh that's saying mount

00:06:00,880 --> 00:06:04,560
my personal namespace which is the

00:06:02,800 --> 00:06:05,199
namespace we just created in the unshare

00:06:04,560 --> 00:06:07,919
command

00:06:05,199 --> 00:06:09,199
mount proc self nsnet to the specified

00:06:07,919 --> 00:06:11,440
location

00:06:09,199 --> 00:06:12,880
and then in this terminal below we can

00:06:11,440 --> 00:06:16,479
unshare inside of

00:06:12,880 --> 00:06:21,840
to that bar run net1 and then be inside

00:06:16,479 --> 00:06:21,840
of the namespace of the pod

00:06:22,160 --> 00:06:27,039
or created by that uh unshared command

00:06:24,800 --> 00:06:28,479
above

00:06:27,039 --> 00:06:30,080
the second step which is actually

00:06:28,479 --> 00:06:33,600
something that took me by surprise

00:06:30,080 --> 00:06:35,120
in implementing this feature is

00:06:33,600 --> 00:06:38,000
you need to apply the cis cuddles in the

00:06:35,120 --> 00:06:40,479
pod so linux just calls their name space

00:06:38,000 --> 00:06:41,039
and we need to apply them at some point

00:06:40,479 --> 00:06:43,280
so

00:06:41,039 --> 00:06:45,199
the time that you apply them is when you

00:06:43,280 --> 00:06:47,759
are inside of the pod

00:06:45,199 --> 00:06:48,880
but where you are unshared inside of the

00:06:47,759 --> 00:06:52,319
namespace

00:06:48,880 --> 00:06:55,599
but you have uh yet to

00:06:52,319 --> 00:06:58,160
um you you've unshared the name inside

00:06:55,599 --> 00:07:00,720
the namespace and you configure it then

00:06:58,160 --> 00:07:02,240
uh some examples are like ipnet if you

00:07:00,720 --> 00:07:03,680
forward and message mac they're just

00:07:02,240 --> 00:07:07,360
ways to configure

00:07:03,680 --> 00:07:09,280
uh some things inside of the namespaces

00:07:07,360 --> 00:07:11,440
finally you need to take the namespaces

00:07:09,280 --> 00:07:14,880
that you've just created and pass it to

00:07:11,440 --> 00:07:15,280
the oci runtime to when so it can use

00:07:14,880 --> 00:07:16,880
them

00:07:15,280 --> 00:07:18,960
in creating the container so on the left

00:07:16,880 --> 00:07:22,639
here we have the old way of doing it

00:07:18,960 --> 00:07:27,759
where we used proc uh the proc entry for

00:07:22,639 --> 00:07:31,440
the pause container proc 864303

00:07:27,759 --> 00:07:34,800
and uh took that uh

00:07:31,440 --> 00:07:37,919
that namespace and then passed it to the

00:07:34,800 --> 00:07:41,759
uh runtime which then gave uh unshared

00:07:37,919 --> 00:07:43,120
the container inside of it and then uh

00:07:41,759 --> 00:07:46,240
you know had that container inside of

00:07:43,120 --> 00:07:50,000
the namespace on the

00:07:46,240 --> 00:07:53,680
other side we have a created

00:07:50,000 --> 00:07:57,199
path that we pass down instead

00:07:53,680 --> 00:07:59,039
so we have our unshare our mounted

00:07:57,199 --> 00:08:00,879
namespace path and we just pass it right

00:07:59,039 --> 00:08:02,400
to the runtime and the runtime takes

00:08:00,879 --> 00:08:05,680
care of actually configuring it

00:08:02,400 --> 00:08:08,319
for the new container inside of the pod

00:08:05,680 --> 00:08:09,680
now that we've uh so now that we know

00:08:08,319 --> 00:08:12,400
how

00:08:09,680 --> 00:08:13,280
uh let's get to introducing how we

00:08:12,400 --> 00:08:15,919
actually did it

00:08:13,280 --> 00:08:16,400
and that is with a binary called pin and

00:08:15,919 --> 00:08:19,599
s

00:08:16,400 --> 00:08:20,960
it's pronounced pin and s not pins

00:08:19,599 --> 00:08:23,759
and it currently lives inside of the

00:08:20,960 --> 00:08:24,639
cryotree it was inspired by the ipnet

00:08:23,759 --> 00:08:27,039
ness

00:08:24,639 --> 00:08:28,479
commands as well as a container

00:08:27,039 --> 00:08:31,599
networking package

00:08:28,479 --> 00:08:34,399
that is used heavily in cni today

00:08:31,599 --> 00:08:36,080
it's a c binary that's execs from cryo

00:08:34,399 --> 00:08:38,080
and the reason we went with this rather

00:08:36,080 --> 00:08:41,519
than doing it in cryo natively

00:08:38,080 --> 00:08:43,760
is because uh go is kind of funky with

00:08:41,519 --> 00:08:46,720
how it configures namespaces

00:08:43,760 --> 00:08:47,920
uh well how like the runtime interacts

00:08:46,720 --> 00:08:49,920
with namespaces

00:08:47,920 --> 00:08:52,320
um the runtime has the ability to jump

00:08:49,920 --> 00:08:55,200
through different namespaces at any time

00:08:52,320 --> 00:08:56,080
uh you know so uh you need or and

00:08:55,200 --> 00:08:58,880
interrupt

00:08:56,080 --> 00:09:00,160
uh you know your process at any time so

00:08:58,880 --> 00:09:02,240
you need to

00:09:00,160 --> 00:09:03,680
uh lock the os thread do all of your

00:09:02,240 --> 00:09:06,240
namespace related uh

00:09:03,680 --> 00:09:07,839
stuff and then unlock it uh to safely do

00:09:06,240 --> 00:09:08,959
that and instead of doing that we just

00:09:07,839 --> 00:09:11,200
decided to do it in c

00:09:08,959 --> 00:09:12,480
which there's not a runtime mucking

00:09:11,200 --> 00:09:14,720
around with things

00:09:12,480 --> 00:09:17,040
and there's more native support for

00:09:14,720 --> 00:09:18,959
unsharing and mounting

00:09:17,040 --> 00:09:20,720
crowd then takes the amount of namespace

00:09:18,959 --> 00:09:23,519
from pinaness and hands it

00:09:20,720 --> 00:09:24,000
to a container and then boom we did it

00:09:23,519 --> 00:09:27,279
pause

00:09:24,000 --> 00:09:29,120
process drop for the most part the one

00:09:27,279 --> 00:09:32,080
case that we have to worry about still

00:09:29,120 --> 00:09:34,480
is the dreaded pid namespace so remember

00:09:32,080 --> 00:09:37,279
the special responsibility that pid1 has

00:09:34,480 --> 00:09:38,080
inside of a private pid name space it's

00:09:37,279 --> 00:09:40,720
responsible

00:09:38,080 --> 00:09:42,000
for reaping uh the children from the

00:09:40,720 --> 00:09:44,880
kernel's process table

00:09:42,000 --> 00:09:45,440
basically calling weight pid so that the

00:09:44,880 --> 00:09:50,000
those

00:09:45,440 --> 00:09:52,000
uh pids can then be reused

00:09:50,000 --> 00:09:54,000
if you don't do this then there's a

00:09:52,000 --> 00:09:55,760
entry in the process table

00:09:54,000 --> 00:09:58,080
uh but there's no associated process and

00:09:55,760 --> 00:10:00,880
this is called a zombie zombified

00:09:58,080 --> 00:10:02,560
you know process that no zombie antidote

00:10:00,880 --> 00:10:06,000
will fix

00:10:02,560 --> 00:10:08,800
for this case a pod level pid name space

00:10:06,000 --> 00:10:10,000
we actually keep the pause container now

00:10:08,800 --> 00:10:11,760
there's a couple of

00:10:10,000 --> 00:10:13,200
hacky work arounds we could do instead

00:10:11,760 --> 00:10:15,279
like what if we had

00:10:13,200 --> 00:10:16,399
the first process inside of the the

00:10:15,279 --> 00:10:19,920
first container

00:10:16,399 --> 00:10:22,880
inside of the pod bpeg1 and

00:10:19,920 --> 00:10:23,519
made sure that that pid one always had

00:10:22,880 --> 00:10:26,880
the

00:10:23,519 --> 00:10:27,519
uh capability to reap the children of

00:10:26,880 --> 00:10:30,880
the

00:10:27,519 --> 00:10:34,399
uh you know the

00:10:30,880 --> 00:10:36,000
space uh but unfortunately uh we would

00:10:34,399 --> 00:10:37,440
still need to ensure ordering so if

00:10:36,000 --> 00:10:37,760
there was another container that jumped

00:10:37,440 --> 00:10:39,839
in

00:10:37,760 --> 00:10:41,600
beforehand then that would be paid one

00:10:39,839 --> 00:10:43,200
and then there would be zombies

00:10:41,600 --> 00:10:44,880
and ultimately this is what you know our

00:10:43,200 --> 00:10:47,680
pause container already does

00:10:44,880 --> 00:10:49,360
we already reap uh the you know children

00:10:47,680 --> 00:10:51,519
inside of the private namespace

00:10:49,360 --> 00:10:53,440
inside of the pod level pit namespace

00:10:51,519 --> 00:10:57,200
and we've insured ordering with

00:10:53,440 --> 00:10:58,480
uh the pause container uh luckily this

00:10:57,200 --> 00:11:01,519
is not that much of a loss

00:10:58,480 --> 00:11:03,760
because most uh pods have

00:11:01,519 --> 00:11:04,800
a container level pid name space instead

00:11:03,760 --> 00:11:06,800
of pod level

00:11:04,800 --> 00:11:08,320
so uh we can still drop the infra

00:11:06,800 --> 00:11:10,880
container and not worry about

00:11:08,320 --> 00:11:12,720
sharing a private pid name spade pod

00:11:10,880 --> 00:11:14,800
level pin namespace

00:11:12,720 --> 00:11:16,240
and only use a pause container for cases

00:11:14,800 --> 00:11:19,760
where we have a pod level

00:11:16,240 --> 00:11:20,640
the name space so given that let's talk

00:11:19,760 --> 00:11:24,320
a little bit about

00:11:20,640 --> 00:11:26,480
crowd's journey uh through different

00:11:24,320 --> 00:11:28,240
options in configuring sandboxes which

00:11:26,480 --> 00:11:31,360
is analogous for pods

00:11:28,240 --> 00:11:33,440
and um you know having

00:11:31,360 --> 00:11:35,200
uh getting to the drop in front so we

00:11:33,440 --> 00:11:38,320
started off configuring pods with

00:11:35,200 --> 00:11:40,320
name spaces and proc we saw uh the

00:11:38,320 --> 00:11:42,079
we have straw the sing string before

00:11:40,320 --> 00:11:45,279
proc pid ns

00:11:42,079 --> 00:11:46,480
net or whatever um and that's how we

00:11:45,279 --> 00:11:49,120
originally did it

00:11:46,480 --> 00:11:50,399
uh with a pause container then a little

00:11:49,120 --> 00:11:52,320
bit uh

00:11:50,399 --> 00:11:53,920
down the line kata containers needed a

00:11:52,320 --> 00:11:55,279
way to pre-configure the network name

00:11:53,920 --> 00:11:57,839
space before starting

00:11:55,279 --> 00:11:58,560
the pause container so that the vm had a

00:11:57,839 --> 00:12:01,600
running

00:11:58,560 --> 00:12:03,040
network uh to start up with and so an

00:12:01,600 --> 00:12:04,800
option was introduced manage

00:12:03,040 --> 00:12:06,720
network ns lifecycle which used the

00:12:04,800 --> 00:12:09,279
container networking package

00:12:06,720 --> 00:12:10,240
and natively did it all in go to pin the

00:12:09,279 --> 00:12:13,279
namespace

00:12:10,240 --> 00:12:16,639
and this made it for cryo 1.0

00:12:13,279 --> 00:12:19,120
for security uh we

00:12:16,639 --> 00:12:19,920
uh move we're moving towards uh managing

00:12:19,120 --> 00:12:23,600
all of the

00:12:19,920 --> 00:12:25,920
ns lifecycle so about a year ago

00:12:23,600 --> 00:12:27,519
we had a cve where an interaction

00:12:25,920 --> 00:12:30,320
between the kernel um killer

00:12:27,519 --> 00:12:31,279
and con mon our container monitor and

00:12:30,320 --> 00:12:33,760
pidrap

00:12:31,279 --> 00:12:34,399
caused sometimes sometimes caused an

00:12:33,760 --> 00:12:37,680
unprivileged

00:12:34,399 --> 00:12:39,200
container to be able to uh jump onto the

00:12:37,680 --> 00:12:42,480
network namespace of

00:12:39,200 --> 00:12:44,480
a host pro of the host which could allow

00:12:42,480 --> 00:12:46,560
for the host to have the hostname change

00:12:44,480 --> 00:12:48,480
or something like that which is very bad

00:12:46,560 --> 00:12:49,760
um that has been passed in a couple of

00:12:48,480 --> 00:12:52,560
different ways and we've

00:12:49,760 --> 00:12:53,440
nearly fully mitigated that and the

00:12:52,560 --> 00:12:55,040
final

00:12:53,440 --> 00:12:57,040
nail on the coffin for that

00:12:55,040 --> 00:12:58,800
vulnerability is managing

00:12:57,040 --> 00:13:00,240
ns life cycle which is now the default

00:12:58,800 --> 00:13:03,279
option um

00:13:00,240 --> 00:13:06,160
managed ns life cycle is what

00:13:03,279 --> 00:13:07,600
introduced the pin and s binary and

00:13:06,160 --> 00:13:11,120
allowed us to

00:13:07,600 --> 00:13:11,839
uh pin all of the pod level name spaces

00:13:11,120 --> 00:13:14,320
but without

00:13:11,839 --> 00:13:16,399
having yet dropped the pause container

00:13:14,320 --> 00:13:19,120
and then finally for

00:13:16,399 --> 00:13:20,560
uh performance we moved on to drop the

00:13:19,120 --> 00:13:22,320
pause container

00:13:20,560 --> 00:13:24,399
and that's corresponds to the drop infra

00:13:22,320 --> 00:13:27,279
option which is slated to be introduced

00:13:24,399 --> 00:13:28,880
in cryo 119.

00:13:27,279 --> 00:13:31,200
so given that let's talk a little bit

00:13:28,880 --> 00:13:33,360
about the future so yeah

00:13:31,200 --> 00:13:34,480
in experimental support for the paws

00:13:33,360 --> 00:13:36,639
container

00:13:34,480 --> 00:13:38,639
of dropping the pots containers targeted

00:13:36,639 --> 00:13:41,839
for cryo119

00:13:38,639 --> 00:13:44,720
um neck then after that we

00:13:41,839 --> 00:13:47,040
uh plan on having podman pods also use

00:13:44,720 --> 00:13:50,240
pin and s to configure the namespaces

00:13:47,040 --> 00:13:53,760
um as it currently also uses

00:13:50,240 --> 00:13:55,760
a infra container and then eventually

00:13:53,760 --> 00:13:57,760
we want pin name spaces and drop pause

00:13:55,760 --> 00:14:01,120
to be the default so that we

00:13:57,760 --> 00:14:03,519
get rid of the pause container entirely

00:14:01,120 --> 00:14:05,839
unless we absolutely need it in the pid

00:14:03,519 --> 00:14:09,519
name space case

00:14:05,839 --> 00:14:09,519
so let's do a quick demo

00:14:13,519 --> 00:14:20,079
so here we have

00:14:16,800 --> 00:14:22,000
our um our

00:14:20,079 --> 00:14:24,079
local cluster running and this is just

00:14:22,000 --> 00:14:24,880
has uh cryo and we're going to start off

00:14:24,079 --> 00:14:27,920
with

00:14:24,880 --> 00:14:30,320
um not managing the namespace lifecycle

00:14:27,920 --> 00:14:33,680
and not dropping the pause container

00:14:30,320 --> 00:14:35,600
so uh here we have our two containers

00:14:33,680 --> 00:14:38,160
hello one and hello two

00:14:35,600 --> 00:14:39,279
uh are two pods and they're pretty much

00:14:38,160 --> 00:14:41,440
the same

00:14:39,279 --> 00:14:42,560
except for their name and basically what

00:14:41,440 --> 00:14:45,600
they're gonna be doing

00:14:42,560 --> 00:14:48,079
is uh an alpine container that runs top

00:14:45,600 --> 00:14:49,360
very simple so we're going to start off

00:14:48,079 --> 00:14:52,880
by running

00:14:49,360 --> 00:14:57,199
cube cuddle apply

00:14:52,880 --> 00:15:01,600
a halo pod now we have a halo pod

00:14:57,199 --> 00:15:05,279
so uh let's look at it in cry cuddle

00:15:01,600 --> 00:15:06,720
odds so here we have the container id

00:15:05,279 --> 00:15:10,720
for this hello pod

00:15:06,720 --> 00:15:14,160
let's look at the pause process itself

00:15:10,720 --> 00:15:18,000
so we can do a run c

00:15:14,160 --> 00:15:21,680
list yes a and notice here we have

00:15:18,000 --> 00:15:24,480
f three c run c list spaces

00:15:21,680 --> 00:15:24,880
so here we have the name spaces that we

00:15:24,480 --> 00:15:27,440
asked

00:15:24,880 --> 00:15:28,560
run c to use for this pod so notice it

00:15:27,440 --> 00:15:30,560
has a private

00:15:28,560 --> 00:15:32,399
pid and mount name space but we passed

00:15:30,560 --> 00:15:34,880
down uh the

00:15:32,399 --> 00:15:35,600
the path for the net ipc and uts

00:15:34,880 --> 00:15:38,079
namespace

00:15:35,600 --> 00:15:38,639
of the infra container so look at this

00:15:38,079 --> 00:15:42,079
pid

00:15:38,639 --> 00:15:44,399
it matches the 285 264 of our

00:15:42,079 --> 00:15:45,440
pause process because we're taking the

00:15:44,399 --> 00:15:48,480
entry in the proc

00:15:45,440 --> 00:15:50,560
uh table for the

00:15:48,480 --> 00:15:52,320
namespace the net all the namespaces of

00:15:50,560 --> 00:15:55,360
the pause container and passing it down

00:15:52,320 --> 00:15:58,560
to run c now let us

00:15:55,360 --> 00:16:01,680
try it with dropping infra

00:15:58,560 --> 00:16:05,120
equals true so now

00:16:01,680 --> 00:16:05,120
we're going to create

00:16:06,160 --> 00:16:13,759
we have hello2 created

00:16:10,480 --> 00:16:13,759
right cuddle bonds

00:16:14,639 --> 00:16:21,040
yes minus a and look at this this

00:16:17,839 --> 00:16:24,880
is our uh

00:16:21,040 --> 00:16:27,519
run c list and notice here

00:16:24,880 --> 00:16:29,040
we did the same thing as before except

00:16:27,519 --> 00:16:32,000
instead of passing

00:16:29,040 --> 00:16:33,120
the uh path that had the proc entry

00:16:32,000 --> 00:16:36,959
we're passing

00:16:33,120 --> 00:16:38,880
uh the name spaces that pin ns unshared

00:16:36,959 --> 00:16:41,040
uh configure the ciscos and then bind

00:16:38,880 --> 00:16:42,240
mounted to the specified location crowd

00:16:41,040 --> 00:16:44,639
took that location

00:16:42,240 --> 00:16:45,759
and then passed it down to run c and now

00:16:44,639 --> 00:16:49,040
we have a pod

00:16:45,759 --> 00:16:51,839
running without a pid namespace without

00:16:49,040 --> 00:16:51,839
a pause container

00:16:52,560 --> 00:16:57,360
so that is it for the demo

00:16:56,320 --> 00:17:00,079
let's talk a little bit about

00:16:57,360 --> 00:17:03,120
performance comparison moment of truth

00:17:00,079 --> 00:17:03,759
so in this here's a little script that

00:17:03,120 --> 00:17:07,360
we

00:17:03,759 --> 00:17:07,919
used to test how well the performance

00:17:07,360 --> 00:17:09,839
increase

00:17:07,919 --> 00:17:12,160
uh how much better the performance is

00:17:09,839 --> 00:17:14,799
when dropping the pause container

00:17:12,160 --> 00:17:15,520
um all we're doing is in parallel we're

00:17:14,799 --> 00:17:18,559
running

00:17:15,520 --> 00:17:18,959
100 unique pods waiting until that's

00:17:18,559 --> 00:17:22,240
done

00:17:18,959 --> 00:17:24,480
and then removing all of those pods uh

00:17:22,240 --> 00:17:25,760
and taking the time for that operation

00:17:24,480 --> 00:17:29,200
and we did it

00:17:25,760 --> 00:17:32,240
uh 10 times each for

00:17:29,200 --> 00:17:33,280
uh dropped and not dropped uh pause

00:17:32,240 --> 00:17:35,840
container

00:17:33,280 --> 00:17:37,360
and uh use a tool called multi-time to

00:17:35,840 --> 00:17:40,080
aggregate the data and

00:17:37,360 --> 00:17:41,679
make the comparison so and here's the

00:17:40,080 --> 00:17:45,120
data that we got

00:17:41,679 --> 00:17:47,200
in the drop pause case we have about

00:17:45,120 --> 00:17:48,720
a little bit less or a little bit more

00:17:47,200 --> 00:17:51,440
than half of

00:17:48,720 --> 00:17:52,160
uh the real time as when we keep the

00:17:51,440 --> 00:17:53,679
pause

00:17:52,160 --> 00:17:56,240
now there's a couple of caveats here

00:17:53,679 --> 00:17:58,320
number one notice how the user insists

00:17:56,240 --> 00:17:59,360
time is about the same and usually those

00:17:58,320 --> 00:18:02,160
are actually the

00:17:59,360 --> 00:18:03,840
uh meaningful metrics for the amount of

00:18:02,160 --> 00:18:06,720
time a process takes because

00:18:03,840 --> 00:18:07,120
they don't uh because the real time has

00:18:06,720 --> 00:18:10,559
the

00:18:07,120 --> 00:18:13,039
uh noise of kernel interrupts and

00:18:10,559 --> 00:18:14,240
uh you know others operate other things

00:18:13,039 --> 00:18:18,080
that are happening

00:18:14,240 --> 00:18:20,320
on the system uh but unfortunately

00:18:18,080 --> 00:18:21,600
the way that cry cuddle works it makes a

00:18:20,320 --> 00:18:23,919
request off to cryo

00:18:21,600 --> 00:18:25,200
crowd does all the work and then crowd

00:18:23,919 --> 00:18:28,400
returns a response so

00:18:25,200 --> 00:18:32,240
none of the actual work is being um

00:18:28,400 --> 00:18:35,760
of the of the pod creation and removal

00:18:32,240 --> 00:18:37,600
is being uh attributed to the real time

00:18:35,760 --> 00:18:40,799
of the cry cradle process

00:18:37,600 --> 00:18:42,000
okay well so that means the uh you know

00:18:40,799 --> 00:18:44,240
there's a little bit of noise

00:18:42,000 --> 00:18:45,280
and these numbers aren't precise but

00:18:44,240 --> 00:18:48,320
what we can

00:18:45,280 --> 00:18:48,880
take away is that you know we're doing a

00:18:48,320 --> 00:18:50,480
many

00:18:48,880 --> 00:18:52,960
fewer things when we're not actually

00:18:50,480 --> 00:18:56,720
creating uh we're not creating

00:18:52,960 --> 00:18:58,400
the root fs and then uh running the

00:18:56,720 --> 00:18:59,440
container and then having conomon

00:18:58,400 --> 00:19:00,799
listening to the container and then

00:18:59,440 --> 00:19:01,679
waiting for kanan to have be listening

00:19:00,799 --> 00:19:03,120
to the container

00:19:01,679 --> 00:19:05,039
and then you know we're doing none of

00:19:03,120 --> 00:19:06,080
that all we're doing is you know bind

00:19:05,039 --> 00:19:08,960
mounting a couple of

00:19:06,080 --> 00:19:10,080
uh unsharing bind mounting and then uh

00:19:08,960 --> 00:19:13,919
going on with our

00:19:10,080 --> 00:19:14,720
network uh setup so this is uh much

00:19:13,919 --> 00:19:17,600
better

00:19:14,720 --> 00:19:18,799
um and we like that and this is not even

00:19:17,600 --> 00:19:21,919
accounting for

00:19:18,799 --> 00:19:24,960
the amount of time that we are uh

00:19:21,919 --> 00:19:25,679
we took of the amount of code savings

00:19:24,960 --> 00:19:27,440
that we have

00:19:25,679 --> 00:19:29,840
with all the complexity of doing all of

00:19:27,440 --> 00:19:33,440
these pause container related things

00:19:29,840 --> 00:19:36,559
and it's also not accounting for the

00:19:33,440 --> 00:19:38,799
small but notable amount of memory that

00:19:36,559 --> 00:19:41,840
we're saving by not having a pause

00:19:38,799 --> 00:19:41,840
container for every pod

00:19:42,480 --> 00:19:47,200
so that is uh the presentation if you

00:19:45,440 --> 00:19:49,039
want to find out more here's a couple of

00:19:47,200 --> 00:19:49,440
different links you can also contact me

00:19:49,039 --> 00:19:53,440
i'm at

00:19:49,440 --> 00:19:56,480
hair commander on most things um

00:19:53,440 --> 00:19:57,919
if uh thank you very much for coming

00:19:56,480 --> 00:20:00,240
if you have any questions and are

00:19:57,919 --> 00:20:02,000
watching live then feel free to ask them

00:20:00,240 --> 00:20:04,320
if you're not live then you can ping me

00:20:02,000 --> 00:20:06,640
on any of these things and i'd be happy

00:20:04,320 --> 00:20:08,080
to answer i really appreciate you coming

00:20:06,640 --> 00:20:11,120
and

00:20:08,080 --> 00:20:11,120
are there any questions

00:20:18,799 --> 00:20:26,720
oh um so

00:20:22,159 --> 00:20:30,799
yes please uh questions in the chat

00:20:26,720 --> 00:20:33,120
um there was one

00:20:30,799 --> 00:20:35,360
go ahead i think we had one question

00:20:33,120 --> 00:20:37,120
that you said you were gonna

00:20:35,360 --> 00:20:38,640
read it for you are you just gonna find

00:20:37,120 --> 00:20:41,760
it i can

00:20:38,640 --> 00:20:43,840
i can uh find it so the uh the question

00:20:41,760 --> 00:20:46,320
was couldn't we just have

00:20:43,840 --> 00:20:47,600
cryo create a pid namespace and put a

00:20:46,320 --> 00:20:51,280
process into that

00:20:47,600 --> 00:20:53,520
that it would later kill and so i've

00:20:51,280 --> 00:20:55,120
i hadn't thought about that um prior to

00:20:53,520 --> 00:20:57,919
this um the

00:20:55,120 --> 00:20:59,360
there's a couple of uh things that may

00:20:57,919 --> 00:21:02,640
actually make it so that

00:20:59,360 --> 00:21:04,240
that doesn't save us very much so we

00:21:02,640 --> 00:21:07,840
still use

00:21:04,240 --> 00:21:10,880
um the runtime spec generation

00:21:07,840 --> 00:21:11,520
for uh keeping this uh state of the pod

00:21:10,880 --> 00:21:13,600
so that

00:21:11,520 --> 00:21:15,600
we're basically reusing all of the work

00:21:13,600 --> 00:21:19,919
we did before making a config

00:21:15,600 --> 00:21:22,880
json blob and for the pause container

00:21:19,919 --> 00:21:24,480
uh even if we drop the pause container

00:21:22,880 --> 00:21:25,440
and that's so that we can restore the

00:21:24,480 --> 00:21:27,840
pod

00:21:25,440 --> 00:21:29,039
um that i think we'd eventually like to

00:21:27,840 --> 00:21:30,480
move away from that

00:21:29,039 --> 00:21:32,799
but that's what we're doing currently so

00:21:30,480 --> 00:21:33,840
we wouldn't save the spec generation

00:21:32,799 --> 00:21:36,960
step

00:21:33,840 --> 00:21:39,679
we would still need to have

00:21:36,960 --> 00:21:41,440
some con mon like process because we

00:21:39,679 --> 00:21:44,400
need to be able to handle

00:21:41,440 --> 00:21:45,840
if somehow this pause process got killed

00:21:44,400 --> 00:21:48,880
somehow

00:21:45,840 --> 00:21:50,480
and if the pause so

00:21:48,880 --> 00:21:52,480
we would probably still want someone

00:21:50,480 --> 00:21:54,080
listening to it or you know be able to

00:21:52,480 --> 00:21:57,200
catch a sick child

00:21:54,080 --> 00:21:58,080
um and go can't do that very well

00:21:57,200 --> 00:22:01,360
because of how

00:21:58,080 --> 00:22:05,280
go handles signals which is

00:22:01,360 --> 00:22:05,280
uh the runtime gobbles them up

00:22:05,520 --> 00:22:11,440
and finally the in the kata container

00:22:09,600 --> 00:22:12,080
case we still need a pause container

00:22:11,440 --> 00:22:13,280
because

00:22:12,080 --> 00:22:15,919
and i didn't mention this in the talking

00:22:13,280 --> 00:22:18,960
i should have but for akata containers

00:22:15,919 --> 00:22:21,600
the another vm based uh runtimes

00:22:18,960 --> 00:22:23,120
the pause container actually there's an

00:22:21,600 --> 00:22:25,039
annotation that is

00:22:23,120 --> 00:22:26,559
given to the pause container and then as

00:22:25,039 --> 00:22:29,280
it's passed down to the runtime

00:22:26,559 --> 00:22:30,000
the runtime actually creates a new vm

00:22:29,280 --> 00:22:33,039
for

00:22:30,000 --> 00:22:33,840
the pause container and then later

00:22:33,039 --> 00:22:36,960
containers

00:22:33,840 --> 00:22:37,520
are injected into that vm so we couldn't

00:22:36,960 --> 00:22:40,640
um

00:22:37,520 --> 00:22:42,559
have we couldn't make uh

00:22:40,640 --> 00:22:43,840
we're going to be totally pauseless

00:22:42,559 --> 00:22:47,919
because we still need

00:22:43,840 --> 00:22:52,159
to handle that case um so

00:22:47,919 --> 00:22:55,679
yeah but um yeah mourinho i think the uh

00:22:52,159 --> 00:22:57,679
the oh yeah and then we need the um the

00:22:55,679 --> 00:22:59,600
we would need that process to be able to

00:22:57,679 --> 00:23:00,240
do pid reaping which is not too hard to

00:22:59,600 --> 00:23:03,919
do but

00:23:00,240 --> 00:23:05,760
um yeah it would basically

00:23:03,919 --> 00:23:08,640
be the equivalent amount of work with a

00:23:05,760 --> 00:23:11,440
little less of the overhead of oci

00:23:08,640 --> 00:23:13,280
containers in general um so it wouldn't

00:23:11,440 --> 00:23:16,720
add a whole lot

00:23:13,280 --> 00:23:19,760
um so it wouldn't save us

00:23:16,720 --> 00:23:24,559
a ton uh yet

00:23:19,760 --> 00:23:27,039
um and there's a follow-up question uh

00:23:24,559 --> 00:23:27,760
and does pause container handled shared

00:23:27,039 --> 00:23:31,840
c groups

00:23:27,760 --> 00:23:35,039
or is this done via cryo um so

00:23:31,840 --> 00:23:39,039
the pause container used to

00:23:35,039 --> 00:23:42,320
hold the namespace for the uh

00:23:39,039 --> 00:23:45,360
use basically the namespaces for the uh

00:23:42,320 --> 00:23:48,400
the pod was uh based on

00:23:45,360 --> 00:23:51,679
the the pause containers pid

00:23:48,400 --> 00:23:53,440
uh proc entry uh in regards to its pit

00:23:51,679 --> 00:23:54,720
um but now we don't use that anymore we

00:23:53,440 --> 00:23:58,000
use pin and s

00:23:54,720 --> 00:24:00,799
which just mounts the oh shared c okay

00:23:58,000 --> 00:24:02,480
sorry shared c group namespace the

00:24:00,799 --> 00:24:03,440
question was does pause container handle

00:24:02,480 --> 00:24:06,960
shared c group

00:24:03,440 --> 00:24:10,480
namespace and yeah that's not shared in

00:24:06,960 --> 00:24:13,520
kubernetes yet uh though we're

00:24:10,480 --> 00:24:18,159
working on getting that working for

00:24:13,520 --> 00:24:20,400
secret c2 and pin and s does support it

00:24:18,159 --> 00:24:20,400
yes

00:24:22,159 --> 00:24:33,840
are there any other questions

00:24:36,559 --> 00:24:43,360
uh if not then

00:24:41,440 --> 00:24:47,600
if we don't have any of the questions i

00:24:43,360 --> 00:24:50,640
guess um folks can head over to the

00:24:47,600 --> 00:24:54,080
break up to the expo hall if you

00:24:50,640 --> 00:24:55,360
click on the link to the left of your

00:24:54,080 --> 00:24:58,159
screen down there

00:24:55,360 --> 00:24:59,679
um you can go and meet other other

00:24:58,159 --> 00:25:02,320
attendees of the conference

00:24:59,679 --> 00:25:03,200
or if you just want to take a break the

00:25:02,320 --> 00:25:06,559
next talk

00:25:03,200 --> 00:25:10,000
is gonna start at um

00:25:06,559 --> 00:25:12,559
3 30 so we'll see you over there

00:25:10,000 --> 00:25:13,360
thank you so much and great presentation

00:25:12,559 --> 00:25:15,360
peter

00:25:13,360 --> 00:25:19,600
thank you thanks beverly bye-bye

00:25:15,360 --> 00:25:19,600

YouTube URL: https://www.youtube.com/watch?v=E0I3XTh17jw


