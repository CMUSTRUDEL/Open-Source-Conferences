Title: Kubernetes styled CI CD tool
Publication date: 2020-10-06
Playlist: DevConfUS 2020
Description: 
	Speaker: Harshad Reddy Nalla

In the container world, the emphasis is on the easy build and ship. CI/CD for the container tools should also work on a similar principle of easy build and deploy. Many of the CI/CD tools present are designed before the existence of cloud-native paradigms which makes it difficult to run in containerized environments like Kubernetes. OpenShift Pipelines builds upon the Tekton project to enable Kubernetes-style delivery pipelines that remove the need to rely on central teams to maintain and manage a CI server and can fully control and own the complete lifecycle of their microservices. Utilizing the power of Openshift Pipelines and Tekton trigger we have designed and implement our own Thoth-CI to facilitate the projects which have multi-namespace microservice architecture.
This talk is about how our ci/cd tool is providing ease to the developer to work on source code and not worry about deploying the project to containerized environments and its configuration.
Captions: 
	00:00:00,960 --> 00:00:08,800
hello um we're just about ready to start

00:00:04,240 --> 00:00:12,000
kubernetes styled ci cd uh with harshad

00:00:08,800 --> 00:00:13,599
and um i had to close all my other tabs

00:00:12,000 --> 00:00:16,960
because they were very noisy

00:00:13,599 --> 00:00:19,520
so um harshad i'm going to

00:00:16,960 --> 00:00:21,520
start it now if anybody has any problems

00:00:19,520 --> 00:00:23,199
with the audio just let me know and chat

00:00:21,520 --> 00:00:25,279
also i'll be pinning the link to the

00:00:23,199 --> 00:00:26,800
video if you do have any issues um you

00:00:25,279 --> 00:00:30,720
can go and watch it direct

00:00:26,800 --> 00:00:35,040
from that link in the chat

00:00:30,720 --> 00:00:37,680
all right i'm going to hit start and

00:00:35,040 --> 00:00:37,680
mute myself

00:00:41,200 --> 00:00:47,600
hello everyone welcome to the us 2020

00:00:45,520 --> 00:00:48,960
hope everyone is doing well and staying

00:00:47,600 --> 00:00:51,360
safe

00:00:48,960 --> 00:00:52,320
i'm very excited to be presenting uh

00:00:51,360 --> 00:00:54,320
here

00:00:52,320 --> 00:00:58,079
i'll be presenting kubernetes style ci

00:00:54,320 --> 00:00:59,440
cd system

00:00:58,079 --> 00:01:01,760
following would be the agenda for

00:00:59,440 --> 00:01:05,600
today's talk we'll be going through

00:01:01,760 --> 00:01:07,040
uh the whole design and implementation

00:01:05,600 --> 00:01:10,840
of the cicd system

00:01:07,040 --> 00:01:13,520
but with some knowledge about tecton uh

00:01:10,840 --> 00:01:15,840
stools and then i'll be telling you

00:01:13,520 --> 00:01:17,600
more about my challenges the standards

00:01:15,840 --> 00:01:20,560
which i faced and some insights

00:01:17,600 --> 00:01:21,119
on the whole development process before

00:01:20,560 --> 00:01:23,200
starting

00:01:21,119 --> 00:01:24,320
let me introduce myself i'm harshly

00:01:23,200 --> 00:01:26,640
ready nala

00:01:24,320 --> 00:01:28,320
i'm a software engineer working in air

00:01:26,640 --> 00:01:31,200
center of excellence red hat

00:01:28,320 --> 00:01:32,960
currently stationed in boston i'm a part

00:01:31,200 --> 00:01:35,520
of ai deaf psychologist team

00:01:32,960 --> 00:01:36,240
we work on a project called dot it's a

00:01:35,520 --> 00:01:39,280
ai

00:01:36,240 --> 00:01:41,680
stack recommendation system uh it

00:01:39,280 --> 00:01:42,960
recommends python package modules based

00:01:41,680 --> 00:01:45,439
upon

00:01:42,960 --> 00:01:48,320
performance and security uh i'm

00:01:45,439 --> 00:01:51,439
currently focusing on the aicovci

00:01:48,320 --> 00:01:51,920
uh that's a kubernetes style ci cd uh

00:01:51,439 --> 00:01:54,320
which

00:01:51,920 --> 00:01:55,600
which is this whole dark base spawn i'll

00:01:54,320 --> 00:01:57,759
be talking more about it

00:01:55,600 --> 00:02:00,000
how we designed and implemented it and

00:01:57,759 --> 00:02:02,320
also showing a demo about that

00:02:00,000 --> 00:02:04,479
so without any further ado let's jump

00:02:02,320 --> 00:02:08,399
right into it

00:02:04,479 --> 00:02:10,879
so the goal for this talk was uh is

00:02:08,399 --> 00:02:12,080
to share my findings and learnings when

00:02:10,879 --> 00:02:14,720
i

00:02:12,080 --> 00:02:18,160
started to build this ci cd tool with

00:02:14,720 --> 00:02:18,160
tecton pipelines and triggers

00:02:19,200 --> 00:02:23,200
so before going into the design and

00:02:21,680 --> 00:02:26,160
implementation let me

00:02:23,200 --> 00:02:28,319
ask you why do we care about the cicd

00:02:26,160 --> 00:02:30,080
the cic is a very integral part of the

00:02:28,319 --> 00:02:33,040
the

00:02:30,080 --> 00:02:34,959
uh integral part of the devops team or

00:02:33,040 --> 00:02:38,000
the devops architecture or the

00:02:34,959 --> 00:02:40,400
devops life cycle right

00:02:38,000 --> 00:02:41,200
when uh when our developer or a

00:02:40,400 --> 00:02:43,440
contributor

00:02:41,200 --> 00:02:44,400
contributes to us scored they make some

00:02:43,440 --> 00:02:46,720
new changes

00:02:44,400 --> 00:02:48,000
they they send this new changes for

00:02:46,720 --> 00:02:49,599
review

00:02:48,000 --> 00:02:51,599
while the reviewer's job is to review

00:02:49,599 --> 00:02:53,200
the source uh the new changes for the

00:02:51,599 --> 00:02:55,280
source code

00:02:53,200 --> 00:02:56,879
he or she doesn't have to ensure on the

00:02:55,280 --> 00:02:59,440
syntax styling

00:02:56,879 --> 00:03:01,280
or linting or any of the pi test or

00:02:59,440 --> 00:03:02,480
checks on the testing or the end-to-end

00:03:01,280 --> 00:03:05,040
testing of this

00:03:02,480 --> 00:03:05,920
new changes this all things can be taken

00:03:05,040 --> 00:03:09,120
care of by the

00:03:05,920 --> 00:03:10,800
continuous integration system the review

00:03:09,120 --> 00:03:14,159
can focus on reviewing the

00:03:10,800 --> 00:03:15,360
actual uh course core code of the new

00:03:14,159 --> 00:03:18,640
changes

00:03:15,360 --> 00:03:21,920
and once it he or she feels like

00:03:18,640 --> 00:03:22,640
they are valid they are okay to be

00:03:21,920 --> 00:03:26,640
merged

00:03:22,640 --> 00:03:29,920
they the cs ci system the ci system can

00:03:26,640 --> 00:03:33,200
move that code in once this code

00:03:29,920 --> 00:03:34,400
gets into the source code that's

00:03:33,200 --> 00:03:35,440
it needs to be delivered to the

00:03:34,400 --> 00:03:37,200
production environment or the

00:03:35,440 --> 00:03:40,080
development environment

00:03:37,200 --> 00:03:41,360
so there the delivery part comes in so

00:03:40,080 --> 00:03:43,599
today we'll be talking about the

00:03:41,360 --> 00:03:46,720
continuous integration delivery

00:03:43,599 --> 00:03:48,720
system uh the continuous deployment

00:03:46,720 --> 00:03:49,840
we are not uh we are not considering

00:03:48,720 --> 00:03:52,000
that right now

00:03:49,840 --> 00:03:54,159
we are just focusing on the integration

00:03:52,000 --> 00:03:56,239
and delivery aspect of it

00:03:54,159 --> 00:03:58,000
as we wanted to build this system we

00:03:56,239 --> 00:03:59,840
founded something which can run on

00:03:58,000 --> 00:04:03,120
premise of open

00:03:59,840 --> 00:04:06,319
um as as

00:04:03,120 --> 00:04:09,120
all our core workloads runs on openshift

00:04:06,319 --> 00:04:09,599
so we want you to concentrate on those

00:04:09,120 --> 00:04:12,640
apps

00:04:09,599 --> 00:04:15,360
aspects while researching about it

00:04:12,640 --> 00:04:15,840
we got to know that there's no one ci

00:04:15,360 --> 00:04:18,880
which

00:04:15,840 --> 00:04:19,359
fits all the application the the team or

00:04:18,880 --> 00:04:21,519
the

00:04:19,359 --> 00:04:24,240
maintainers have to decide on their ci

00:04:21,519 --> 00:04:28,240
cd tool based on their applications

00:04:24,240 --> 00:04:31,520
so it's true that new one size fits all

00:04:28,240 --> 00:04:33,840
as the applications are moving towards

00:04:31,520 --> 00:04:35,759
microservices from monolithical

00:04:33,840 --> 00:04:39,520
architecture

00:04:35,759 --> 00:04:41,680
similarly if you would oh similarly the

00:04:39,520 --> 00:04:43,199
the deployment infrastructure is also

00:04:41,680 --> 00:04:46,000
moving from

00:04:43,199 --> 00:04:47,600
from virtual machines to containers as

00:04:46,000 --> 00:04:49,199
the applications have been move

00:04:47,600 --> 00:04:51,040
are moving so fast towards the

00:04:49,199 --> 00:04:54,000
kubernetes enrollment

00:04:51,040 --> 00:04:54,320
we would like to have a ci cd tool which

00:04:54,000 --> 00:04:56,800
is

00:04:54,320 --> 00:04:59,360
also running its workload on a on a

00:04:56,800 --> 00:05:03,440
continuous environment

00:04:59,360 --> 00:05:05,600
so thus the whole um the whole

00:05:03,440 --> 00:05:09,120
focus on building a ci cd tool through

00:05:05,600 --> 00:05:09,120
with a community style

00:05:09,759 --> 00:05:12,880
so while doing this we come up while

00:05:12,400 --> 00:05:14,639
trying to

00:05:12,880 --> 00:05:16,080
develop something like this we came

00:05:14,639 --> 00:05:18,320
across tech talk

00:05:16,080 --> 00:05:20,000
technology open framework which uh

00:05:18,320 --> 00:05:22,400
allows uh allows the user

00:05:20,000 --> 00:05:23,280
or the developer to build csc detailed

00:05:22,400 --> 00:05:26,880
systems with

00:05:23,280 --> 00:05:29,919
its tool it's very it's uh it was uh

00:05:26,880 --> 00:05:33,280
created or and contributed by

00:05:29,919 --> 00:05:35,039
red hat and google contributors it's now

00:05:33,280 --> 00:05:38,479
a part of

00:05:35,039 --> 00:05:40,800
cd foundation the

00:05:38,479 --> 00:05:41,759
before learning about tecton we would

00:05:40,800 --> 00:05:44,800
have to learn about

00:05:41,759 --> 00:05:47,120
tecton terminologies we can't just

00:05:44,800 --> 00:05:48,720
uh go right into the tecton designing

00:05:47,120 --> 00:05:49,600
and implementing your tecton pipeline

00:05:48,720 --> 00:05:52,240
without knowing it

00:05:49,600 --> 00:05:52,800
terminologies right so let me take you

00:05:52,240 --> 00:05:55,759
through

00:05:52,800 --> 00:05:58,000
the journey of learning like what these

00:05:55,759 --> 00:06:01,520
terminologies are and how they are used

00:05:58,000 --> 00:06:04,720
um while developing the pipeline

00:06:01,520 --> 00:06:06,400
uh for the ci cd2 so first as a step

00:06:04,720 --> 00:06:09,840
step is a very is this

00:06:06,400 --> 00:06:12,560
uh the smallest um

00:06:09,840 --> 00:06:13,280
okay piece of code in the pipeline step

00:06:12,560 --> 00:06:16,160
would be

00:06:13,280 --> 00:06:16,960
um references the container image that

00:06:16,160 --> 00:06:19,600
ex

00:06:16,960 --> 00:06:20,000
which would execute a specific script a

00:06:19,600 --> 00:06:23,520
task

00:06:20,000 --> 00:06:25,680
would be um thus would

00:06:23,520 --> 00:06:27,120
uh be running this series of steps and a

00:06:25,680 --> 00:06:28,560
task one would be something which will

00:06:27,120 --> 00:06:31,360
initiate this

00:06:28,560 --> 00:06:32,240
uh which uh initiate this whole task for

00:06:31,360 --> 00:06:36,479
example

00:06:32,240 --> 00:06:39,039
um they uh take building a image

00:06:36,479 --> 00:06:41,039
so building an image would be a task so

00:06:39,039 --> 00:06:43,280
what would be the steps involved in it

00:06:41,039 --> 00:06:44,960
of first step would be to gather all the

00:06:43,280 --> 00:06:47,440
information to build that image

00:06:44,960 --> 00:06:48,639
second task would be to use a docker and

00:06:47,440 --> 00:06:51,120
uh

00:06:48,639 --> 00:06:51,840
canadian orchestration tool such as

00:06:51,120 --> 00:06:54,639
builder

00:06:51,840 --> 00:06:55,919
apartment to build them the third task

00:06:54,639 --> 00:06:59,759
would be to publish them

00:06:55,919 --> 00:07:01,360
into a image stream registry

00:06:59,759 --> 00:07:02,880
so this would be the following steps and

00:07:01,360 --> 00:07:06,720
our tasks and if you

00:07:02,880 --> 00:07:08,960
if we execute this task on an um

00:07:06,720 --> 00:07:09,919
on on to the on to the cloud native

00:07:08,960 --> 00:07:13,759
environment

00:07:09,919 --> 00:07:15,919
that becomes a task one moving further

00:07:13,759 --> 00:07:17,520
there is pipeline and pipeline resources

00:07:15,919 --> 00:07:18,800
pipeline resources is a place where you

00:07:17,520 --> 00:07:21,919
will

00:07:18,800 --> 00:07:25,120
define all the base information such as

00:07:21,919 --> 00:07:26,639
in images or get resources so get

00:07:25,120 --> 00:07:28,880
resources could be anything

00:07:26,639 --> 00:07:30,080
such as if you are describing your whole

00:07:28,880 --> 00:07:33,360
kit repository

00:07:30,080 --> 00:07:36,080
to where to clone the repository from or

00:07:33,360 --> 00:07:37,280
to gather the pull request information

00:07:36,080 --> 00:07:39,759
this would be the place

00:07:37,280 --> 00:07:40,960
where you would initialize that pull

00:07:39,759 --> 00:07:43,039
request

00:07:40,960 --> 00:07:44,479
pipeline resources also gathers

00:07:43,039 --> 00:07:47,599
information from the output

00:07:44,479 --> 00:07:48,479
of the step of a task and pipeline would

00:07:47,599 --> 00:07:52,720
be

00:07:48,479 --> 00:07:55,759
a pipeline runs a series of tasks

00:07:52,720 --> 00:07:56,560
and pipeline run is the is the

00:07:55,759 --> 00:07:57,759
initiative

00:07:56,560 --> 00:08:00,080
which will initiate the pipeline

00:07:57,759 --> 00:08:03,520
execution so let me explain you

00:08:00,080 --> 00:08:06,240
well more better with this

00:08:03,520 --> 00:08:08,319
example like so if you see on your left

00:08:06,240 --> 00:08:10,639
side with the shaded

00:08:08,319 --> 00:08:12,400
blocks those are the pipeline resources

00:08:10,639 --> 00:08:14,800
such as github repository

00:08:12,400 --> 00:08:16,800
and the image here the image is a upi

00:08:14,800 --> 00:08:18,319
image a github repository could be my

00:08:16,800 --> 00:08:21,360
repository

00:08:18,319 --> 00:08:23,759
so the following other blocks

00:08:21,360 --> 00:08:25,280
are describing the task like a code

00:08:23,759 --> 00:08:28,160
quality check accept the

00:08:25,280 --> 00:08:30,160
environment build image of a publish or

00:08:28,160 --> 00:08:33,039
deploy them

00:08:30,160 --> 00:08:34,159
the whole this whole uh figure describes

00:08:33,039 --> 00:08:37,360
a pipeline

00:08:34,159 --> 00:08:38,800
and once we run this pipeline with some

00:08:37,360 --> 00:08:42,080
inputs

00:08:38,800 --> 00:08:44,720
those uh that becomes a pipeline run

00:08:42,080 --> 00:08:45,519
if you see that smaller chunk of code

00:08:44,720 --> 00:08:48,800
where

00:08:45,519 --> 00:08:51,839
where it's written task run so if

00:08:48,800 --> 00:08:54,000
uh when the github resource github

00:08:51,839 --> 00:08:57,200
repository resources are provided to

00:08:54,000 --> 00:08:58,560
the task and the task is executed that

00:08:57,200 --> 00:09:01,760
becomes a task one

00:08:58,560 --> 00:09:06,480
so a pipeline constitutes offer several

00:09:01,760 --> 00:09:08,560
task runs that's how it can be defined

00:09:06,480 --> 00:09:10,640
as we learned about the terminologies of

00:09:08,560 --> 00:09:13,519
the pipeline let's learn some more

00:09:10,640 --> 00:09:16,640
terminologies of the tecton trigger

00:09:13,519 --> 00:09:18,240
a tecton trigger takes the even payload

00:09:16,640 --> 00:09:18,720
from a web hook and provides that

00:09:18,240 --> 00:09:22,240
towards

00:09:18,720 --> 00:09:25,760
a resource applet so what are the co

00:09:22,240 --> 00:09:26,240
what are the core uh components used

00:09:25,760 --> 00:09:27,839
here

00:09:26,240 --> 00:09:29,760
this event listener which will be

00:09:27,839 --> 00:09:30,560
continuously listening to the http

00:09:29,760 --> 00:09:32,720
request

00:09:30,560 --> 00:09:33,920
from the from the webhook from any of

00:09:32,720 --> 00:09:36,880
the get

00:09:33,920 --> 00:09:38,160
uh environments like a github or gitlab

00:09:36,880 --> 00:09:43,519
or it can

00:09:38,160 --> 00:09:46,240
also take uh direct webhook um payloads

00:09:43,519 --> 00:09:47,680
so the adjacent payload from this event

00:09:46,240 --> 00:09:50,399
listener is passed to the trigger

00:09:47,680 --> 00:09:52,720
binding trigger binding maps this a max

00:09:50,399 --> 00:09:54,000
the content of the adjacent payload to

00:09:52,720 --> 00:09:56,399
the required

00:09:54,000 --> 00:09:57,920
or to gather the required parameters

00:09:56,399 --> 00:10:00,000
these required parameters

00:09:57,920 --> 00:10:02,839
thus are provided to attack a template

00:10:00,000 --> 00:10:06,880
and trigger template passes those

00:10:02,839 --> 00:10:10,079
parameters to the pipeline run

00:10:06,880 --> 00:10:10,399
so this describes the whole concepts of

00:10:10,079 --> 00:10:13,279
like

00:10:10,399 --> 00:10:14,560
uh basic concepts of tecton triggers and

00:10:13,279 --> 00:10:16,480
tecton pipelines

00:10:14,560 --> 00:10:18,800
using this components we can build the

00:10:16,480 --> 00:10:22,000
whole cicd system

00:10:18,800 --> 00:10:23,279
let's jump into like how what design

00:10:22,000 --> 00:10:25,680
constraints or what

00:10:23,279 --> 00:10:27,680
design requirements we had and that's

00:10:25,680 --> 00:10:29,680
and then i'll be explaining you

00:10:27,680 --> 00:10:31,680
with all these components how we built a

00:10:29,680 --> 00:10:34,720
ci cd2

00:10:31,680 --> 00:10:37,760
so as most of our projects are ai

00:10:34,720 --> 00:10:41,200
ml oriented we wanted to focus on them

00:10:37,760 --> 00:10:42,560
most uh so all the projects are python

00:10:41,200 --> 00:10:46,000
based

00:10:42,560 --> 00:10:46,560
so we wanted to have some just unlimited

00:10:46,000 --> 00:10:50,000
checks and

00:10:46,560 --> 00:10:52,079
starting checks static should be uh like

00:10:50,000 --> 00:10:53,120
pie test running some test by test

00:10:52,079 --> 00:10:54,800
end-to-end test

00:10:53,120 --> 00:10:57,519
learning checks would be running some by

00:10:54,800 --> 00:11:01,839
docs styling

00:10:57,519 --> 00:11:04,880
or um some of the flake eight flicked

00:11:01,839 --> 00:11:06,640
uh checks once we were done with the

00:11:04,880 --> 00:11:08,160
checks on the pull request we also

00:11:06,640 --> 00:11:11,120
wanted to release these

00:11:08,160 --> 00:11:14,720
applications so a python application can

00:11:11,120 --> 00:11:18,959
be either a module or it could be

00:11:14,720 --> 00:11:20,720
a running application a python module

00:11:18,959 --> 00:11:22,800
has to be released to pipe ai and then

00:11:20,720 --> 00:11:25,839
you can use it as a

00:11:22,800 --> 00:11:26,480
package um if it's an application you

00:11:25,839 --> 00:11:28,160
can

00:11:26,480 --> 00:11:30,000
containerize them and then deploy it

00:11:28,160 --> 00:11:32,720
into the openshift environment

00:11:30,000 --> 00:11:34,079
so we wanted our ci system cxed system

00:11:32,720 --> 00:11:36,480
which can

00:11:34,079 --> 00:11:37,360
enable us to do some code checks via the

00:11:36,480 --> 00:11:40,320
pull request

00:11:37,360 --> 00:11:42,000
on a pull request and also enable us to

00:11:40,320 --> 00:11:46,320
do some releases on the source

00:11:42,000 --> 00:11:48,399
code so we focused on two aspects here

00:11:46,320 --> 00:11:49,760
one was on pull request and another was

00:11:48,399 --> 00:11:52,240
the tag release

00:11:49,760 --> 00:11:53,200
so as a contributor make support creates

00:11:52,240 --> 00:11:56,720
a pull request

00:11:53,200 --> 00:11:59,200
the ci services will trigger a

00:11:56,720 --> 00:12:01,120
pipeline pull request pipeline a pull

00:11:59,200 --> 00:12:01,839
request pipeline will run some stand

00:12:01,120 --> 00:12:04,959
status

00:12:01,839 --> 00:12:08,560
status checks such as um

00:12:04,959 --> 00:12:10,720
pi test lending checks and then also

00:12:08,560 --> 00:12:12,959
also check for the build checks if the

00:12:10,720 --> 00:12:13,600
whole application can be built into a

00:12:12,959 --> 00:12:17,519
container

00:12:13,600 --> 00:12:18,320
container image or not once this process

00:12:17,519 --> 00:12:20,560
is done

00:12:18,320 --> 00:12:21,920
the checks will return the validation if

00:12:20,560 --> 00:12:24,720
the validations are

00:12:21,920 --> 00:12:25,680
all true the reviewer can uh review the

00:12:24,720 --> 00:12:28,240
source code

00:12:25,680 --> 00:12:28,720
and if the reviewer has access the

00:12:28,240 --> 00:12:30,720
source

00:12:28,720 --> 00:12:32,639
uh the new changes then the new changes

00:12:30,720 --> 00:12:34,639
can be merged into the source code

00:12:32,639 --> 00:12:36,320
once all these so all the pull requests

00:12:34,639 --> 00:12:38,959
are merged into the source code and the

00:12:36,320 --> 00:12:41,279
maintainer decides to release attack

00:12:38,959 --> 00:12:42,720
the tag release pipeline will be

00:12:41,279 --> 00:12:45,760
triggered from the ci

00:12:42,720 --> 00:12:49,200
the tire release pipeline uh builds

00:12:45,760 --> 00:12:50,639
uh runs a image build task or based upon

00:12:49,200 --> 00:12:52,000
the application if it's an application

00:12:50,639 --> 00:12:55,680
is important then it runs

00:12:52,000 --> 00:12:59,120
by pi release task

00:12:55,680 --> 00:13:02,160
once this task is run the task based on

00:12:59,120 --> 00:13:02,800
the application will release the image

00:13:02,160 --> 00:13:06,800
to the

00:13:02,800 --> 00:13:09,279
ipi uh index or else

00:13:06,800 --> 00:13:10,480
uh it creates the container image and

00:13:09,279 --> 00:13:13,519
passes it to image

00:13:10,480 --> 00:13:15,200
image registry and then updates that tag

00:13:13,519 --> 00:13:16,959
into the customized manifest so that it

00:13:15,200 --> 00:13:20,880
can be deployed into

00:13:16,959 --> 00:13:22,880
the kubernetes orchestration openshift

00:13:20,880 --> 00:13:24,399
so this is what we focused on and this

00:13:22,880 --> 00:13:25,519
is what was the requirement and how we

00:13:24,399 --> 00:13:27,120
designed it

00:13:25,519 --> 00:13:29,120
so let me show you the architecture

00:13:27,120 --> 00:13:30,320
diagram and explain you through that and

00:13:29,120 --> 00:13:32,480
then i'll explain you

00:13:30,320 --> 00:13:33,440
the implementation from the source code

00:13:32,480 --> 00:13:36,399
and then i'll show

00:13:33,440 --> 00:13:38,720
and i'll show you some live demo so this

00:13:36,399 --> 00:13:41,360
is the architecture which we follow

00:13:38,720 --> 00:13:43,680
we have so on the left side you have a

00:13:41,360 --> 00:13:45,199
source code from the github repository

00:13:43,680 --> 00:13:47,120
and also from some of the gitlab

00:13:45,199 --> 00:13:50,800
repositories so

00:13:47,120 --> 00:13:54,720
both of them are triggers uh

00:13:50,800 --> 00:13:57,680
some p some g uh some webhooks on

00:13:54,720 --> 00:13:58,240
on pull request or the merge request one

00:13:57,680 --> 00:14:00,000
so this

00:13:58,240 --> 00:14:02,399
webhooks triggers to the technon

00:14:00,000 --> 00:14:04,959
pipeline running in our environment

00:14:02,399 --> 00:14:06,639
it starts our technon pipeline for the

00:14:04,959 --> 00:14:09,680
pull request

00:14:06,639 --> 00:14:10,240
run so the pull request pipeline uh runs

00:14:09,680 --> 00:14:12,880
some

00:14:10,240 --> 00:14:13,360
certain tasks such as lend checks unit

00:14:12,880 --> 00:14:16,000
checks

00:14:13,360 --> 00:14:16,639
and syntax tricks so once this task

00:14:16,000 --> 00:14:20,000
completes

00:14:16,639 --> 00:14:23,279
it sends out the results to the

00:14:20,000 --> 00:14:25,839
status check on github so

00:14:23,279 --> 00:14:27,519
these data steps could be based upon the

00:14:25,839 --> 00:14:28,800
results of that task if the task has

00:14:27,519 --> 00:14:32,720
completed successfully

00:14:28,800 --> 00:14:34,720
they will send out a true uh true status

00:14:32,720 --> 00:14:35,760
to the github and once these series are

00:14:34,720 --> 00:14:38,000
corrected

00:14:35,760 --> 00:14:40,079
as you know review will review the code

00:14:38,000 --> 00:14:42,639
and merge and click on merge and

00:14:40,079 --> 00:14:45,279
most will the new changes will go into

00:14:42,639 --> 00:14:47,600
the source code another aspect was

00:14:45,279 --> 00:14:48,639
like i said hostile attack release on

00:14:47,600 --> 00:14:50,880
each type release

00:14:48,639 --> 00:14:52,160
the ticket up will send out a webhook to

00:14:50,880 --> 00:14:54,560
the tecton pipeline

00:14:52,160 --> 00:14:56,160
the techno pipeline will start the tag

00:14:54,560 --> 00:14:57,519
release pipeline the tag release

00:14:56,160 --> 00:15:00,160
pipeline has a task called

00:14:57,519 --> 00:15:01,279
image image will be built and then

00:15:00,160 --> 00:15:03,040
there's a delivery

00:15:01,279 --> 00:15:04,639
pass which will deliver that image to

00:15:03,040 --> 00:15:06,560
the image registry

00:15:04,639 --> 00:15:09,440
and as of now we're using the red hat

00:15:06,560 --> 00:15:12,160
way to take that

00:15:09,440 --> 00:15:12,720
let me explain you let's let's dig into

00:15:12,160 --> 00:15:14,720
the some

00:15:12,720 --> 00:15:16,480
implementation they know so i'll show

00:15:14,720 --> 00:15:17,199
you some of the source code explain you

00:15:16,480 --> 00:15:19,680
through

00:15:17,199 --> 00:15:20,240
each component how that's been designed

00:15:19,680 --> 00:15:23,760
and what

00:15:20,240 --> 00:15:26,959
is the um what is the purpose of

00:15:23,760 --> 00:15:28,560
it and how they will be um how they are

00:15:26,959 --> 00:15:29,600
part of the whole big pipeline of the

00:15:28,560 --> 00:15:33,040
cict

00:15:29,600 --> 00:15:35,759
tool chain and then i'll show you

00:15:33,040 --> 00:15:36,160
the live um the live demo like how it

00:15:35,759 --> 00:15:39,199
works

00:15:36,160 --> 00:15:42,959
in an actual

00:15:39,199 --> 00:15:46,560
uh so let's go through it uh

00:15:42,959 --> 00:15:49,199
so uh the whole pipeline

00:15:46,560 --> 00:15:50,160
is the application is called here iso

00:15:49,199 --> 00:15:52,959
eci

00:15:50,160 --> 00:15:54,240
uh it's been developed based on the

00:15:52,959 --> 00:15:55,440
tecton pipelines and the openshift

00:15:54,240 --> 00:15:59,360
pipelines

00:15:55,440 --> 00:16:01,040
and it is available on github

00:15:59,360 --> 00:16:02,639
it is also a github application so you

00:16:01,040 --> 00:16:05,600
can download it into your

00:16:02,639 --> 00:16:06,320
own repository and use it based on that

00:16:05,600 --> 00:16:08,959
so

00:16:06,320 --> 00:16:10,720
before going into the development of the

00:16:08,959 --> 00:16:13,199
pipeline first we have to

00:16:10,720 --> 00:16:15,199
install the tecton pipeline and take

00:16:13,199 --> 00:16:17,920
down triggers

00:16:15,199 --> 00:16:18,720
there is a setup script in the github

00:16:17,920 --> 00:16:22,720
repository

00:16:18,720 --> 00:16:24,720
of the asuaci or else you can use the

00:16:22,720 --> 00:16:26,000
use the actual technon pipeline

00:16:24,720 --> 00:16:28,079
repositories to

00:16:26,000 --> 00:16:29,519
install based upon the instructions or

00:16:28,079 --> 00:16:31,600
you can just read through them

00:16:29,519 --> 00:16:32,880
and install the tecton pipeline and

00:16:31,600 --> 00:16:35,120
attack on trigger

00:16:32,880 --> 00:16:36,639
apart from these two we also installed

00:16:35,120 --> 00:16:39,199
tecton dashboard

00:16:36,639 --> 00:16:40,079
tech dashboard enables you to it gives

00:16:39,199 --> 00:16:42,079
you a ui

00:16:40,079 --> 00:16:44,399
where you can visualize all these

00:16:42,079 --> 00:16:47,120
pipeline runs

00:16:44,399 --> 00:16:48,399
so i have already set it up for today's

00:16:47,120 --> 00:16:50,639
demo

00:16:48,399 --> 00:16:52,399
and let me show you that in an open

00:16:50,639 --> 00:16:54,320
shift and groundwater i've

00:16:52,399 --> 00:16:55,680
deployed tecton dashboard tecton

00:16:54,320 --> 00:16:58,320
pipelines uh

00:16:55,680 --> 00:16:58,880
takedown triggers so all this is running

00:16:58,320 --> 00:17:01,199
there's a

00:16:58,880 --> 00:17:05,039
fabric this uh listener and there's

00:17:01,199 --> 00:17:08,319
electron vapor pressure as well

00:17:05,039 --> 00:17:10,959
so once you have done this we have to

00:17:08,319 --> 00:17:11,760
as i said first we have to design our

00:17:10,959 --> 00:17:13,919
event

00:17:11,760 --> 00:17:15,280
trigger a listener so let me show you

00:17:13,919 --> 00:17:18,319
some source and let's

00:17:15,280 --> 00:17:20,959
talk through that so first

00:17:18,319 --> 00:17:23,600
is the event listener as you can see

00:17:20,959 --> 00:17:26,640
this is the event listener

00:17:23,600 --> 00:17:28,720
manifest so in the even lesson manifest

00:17:26,640 --> 00:17:30,240
we are concentrating on two components

00:17:28,720 --> 00:17:32,720
as of now so one

00:17:30,240 --> 00:17:33,280
is the event called pull request and

00:17:32,720 --> 00:17:36,720
another

00:17:33,280 --> 00:17:39,360
is called the tag release so in github

00:17:36,720 --> 00:17:39,760
whenever pull request is triggered there

00:17:39,360 --> 00:17:42,240
is an

00:17:39,760 --> 00:17:44,160
event type added to it it's called pull

00:17:42,240 --> 00:17:47,679
request to that payload

00:17:44,160 --> 00:17:48,160
so as um apple request um is generated

00:17:47,679 --> 00:17:51,280
into

00:17:48,160 --> 00:17:53,200
github github sends a paper uh to the

00:17:51,280 --> 00:17:54,400
event listener even listener listens to

00:17:53,200 --> 00:17:56,640
that takes the

00:17:54,400 --> 00:17:57,520
uh takes the json payload and passes

00:17:56,640 --> 00:18:00,320
that to

00:17:57,520 --> 00:18:02,640
github uh sorry trigger binding so

00:18:00,320 --> 00:18:04,320
trigger bindings can be defined as this

00:18:02,640 --> 00:18:07,039
the monster trigger bindings have been

00:18:04,320 --> 00:18:09,840
passed the trigger bindings

00:18:07,039 --> 00:18:11,200
takes out the imported information from

00:18:09,840 --> 00:18:14,080
the json payload

00:18:11,200 --> 00:18:14,480
the json payload takes that information

00:18:14,080 --> 00:18:15,919
uh

00:18:14,480 --> 00:18:17,600
from the g sub payload the trigger

00:18:15,919 --> 00:18:18,559
binding takes the information such as

00:18:17,600 --> 00:18:21,360
event

00:18:18,559 --> 00:18:23,600
actions pr pull request number the

00:18:21,360 --> 00:18:27,120
repository to which pull request was

00:18:23,600 --> 00:18:28,080
raised repository full name pull request

00:18:27,120 --> 00:18:31,679
url

00:18:28,080 --> 00:18:34,400
and repo url all this information

00:18:31,679 --> 00:18:35,440
is then passed to the tecton tecton

00:18:34,400 --> 00:18:39,039
trigger template

00:18:35,440 --> 00:18:39,600
tecton triggered is a resource template

00:18:39,039 --> 00:18:42,640
which

00:18:39,600 --> 00:18:45,600
uh basically runs a tecton pipeline run

00:18:42,640 --> 00:18:46,400
so it describes all the parameters which

00:18:45,600 --> 00:18:49,600
are passed through

00:18:46,400 --> 00:18:51,760
the tecton uh trigger binding

00:18:49,600 --> 00:18:53,600
and then pass those trigger bindings to

00:18:51,760 --> 00:18:56,559
resource template

00:18:53,600 --> 00:18:57,120
those resource template is a background

00:18:56,559 --> 00:18:59,200
run

00:18:57,120 --> 00:19:01,039
in this case so the pipeline take

00:18:59,200 --> 00:19:04,240
pipeline run takes all this info

00:19:01,039 --> 00:19:06,240
to environment and it passes this

00:19:04,240 --> 00:19:07,919
information to a pipeline

00:19:06,240 --> 00:19:10,480
here the pipeline is described as tech

00:19:07,919 --> 00:19:12,960
on ci pipeline

00:19:10,480 --> 00:19:13,679
that's the name we have came in here and

00:19:12,960 --> 00:19:16,960
it has

00:19:13,679 --> 00:19:19,360
when we have provided all the parameters

00:19:16,960 --> 00:19:21,280
with all these parameters along with all

00:19:19,360 --> 00:19:22,559
these parameters we also pass some

00:19:21,280 --> 00:19:25,280
resources

00:19:22,559 --> 00:19:27,039
these are the pipeline resources which

00:19:25,280 --> 00:19:29,440
you can be which we can do

00:19:27,039 --> 00:19:30,799
which we can describe in in an

00:19:29,440 --> 00:19:33,760
additional manifest file

00:19:30,799 --> 00:19:34,480
or we can also describe them in inline

00:19:33,760 --> 00:19:35,840
so here

00:19:34,480 --> 00:19:38,080
some of the resources are being

00:19:35,840 --> 00:19:40,080
described in line with the resource

00:19:38,080 --> 00:19:41,600
pack the resource pack this finds that

00:19:40,080 --> 00:19:43,200
you're describing in line

00:19:41,600 --> 00:19:45,360
you're saying that this type of

00:19:43,200 --> 00:19:48,160
resources are get type

00:19:45,360 --> 00:19:50,240
um you're using the report repository

00:19:48,160 --> 00:19:51,200
url so based upon this it will clone the

00:19:50,240 --> 00:19:54,240
repository

00:19:51,200 --> 00:19:56,559
whichever was whose report whichever

00:19:54,240 --> 00:19:59,679
repository url is passed to this

00:19:56,559 --> 00:20:01,919
so this url is a parameter this

00:19:59,679 --> 00:20:02,880
parameter comes from the json payload as

00:20:01,919 --> 00:20:05,600
we know

00:20:02,880 --> 00:20:06,080
so as as one pull request has been

00:20:05,600 --> 00:20:09,760
triggered

00:20:06,080 --> 00:20:12,080
that all the whole value travels from

00:20:09,760 --> 00:20:13,440
the event listener json payload trigger

00:20:12,080 --> 00:20:16,720
binding trigger template

00:20:13,440 --> 00:20:18,320
and do this resource apart from this you

00:20:16,720 --> 00:20:20,240
can as i said you can describe the

00:20:18,320 --> 00:20:22,640
resources into a manifest file

00:20:20,240 --> 00:20:24,000
here you see there is s2i dot image you

00:20:22,640 --> 00:20:26,000
could be a 8 image

00:20:24,000 --> 00:20:28,400
we have taken a reference so these are

00:20:26,000 --> 00:20:31,039
being described in the resource file

00:20:28,400 --> 00:20:32,640
so let's look through that so here we

00:20:31,039 --> 00:20:36,240
have described

00:20:32,640 --> 00:20:36,799
the s2i dot image so the image which we

00:20:36,240 --> 00:20:39,039
are using

00:20:36,799 --> 00:20:40,080
is the histogram base image which is

00:20:39,039 --> 00:20:43,600
developed by the

00:20:40,080 --> 00:20:46,159
dot project team and then there is a

00:20:43,600 --> 00:20:47,360
ubi 8 image so we are passing those

00:20:46,159 --> 00:20:49,200
images as also

00:20:47,360 --> 00:20:50,960
resources which can be used in tecton

00:20:49,200 --> 00:20:53,120
task and then

00:20:50,960 --> 00:20:54,400
the pull request itself so there's a

00:20:53,120 --> 00:20:57,039
police type

00:20:54,400 --> 00:20:58,640
type pull request in this if we provide

00:20:57,039 --> 00:21:01,440
the url

00:20:58,640 --> 00:21:02,559
it it captures the pull request

00:21:01,440 --> 00:21:04,880
information

00:21:02,559 --> 00:21:06,960
into a json which is available for each

00:21:04,880 --> 00:21:09,280
task

00:21:06,960 --> 00:21:11,360
one thing to remember here is that each

00:21:09,280 --> 00:21:13,679
request

00:21:11,360 --> 00:21:15,120
from a from a public repository can be

00:21:13,679 --> 00:21:18,400
pulled directly but from

00:21:15,120 --> 00:21:19,919
a private repository to people nick of

00:21:18,400 --> 00:21:22,000
purpose to be pulled from a private

00:21:19,919 --> 00:21:24,320
repository requires some secrets

00:21:22,000 --> 00:21:26,559
so authentication secrets so you can

00:21:24,320 --> 00:21:28,320
provide that authentication token

00:21:26,559 --> 00:21:30,000
that's the search keys through the

00:21:28,320 --> 00:21:32,720
secret to directly

00:21:30,000 --> 00:21:32,720
to the resource

00:21:33,679 --> 00:21:37,760
as we as we have gone through the

00:21:35,440 --> 00:21:40,080
trigger template and pipeline run

00:21:37,760 --> 00:21:41,360
now we know that once this trigger

00:21:40,080 --> 00:21:43,440
template is triggered

00:21:41,360 --> 00:21:45,520
this pipeline would be run so let's go

00:21:43,440 --> 00:21:47,200
through the pipeline

00:21:45,520 --> 00:21:49,039
the pipeline describes about in this

00:21:47,200 --> 00:21:50,400
pack we describe the parameter and the

00:21:49,039 --> 00:21:51,600
resources which we are getting from the

00:21:50,400 --> 00:21:53,280
pipeline run

00:21:51,600 --> 00:21:54,720
and then we describe some task

00:21:53,280 --> 00:21:57,760
references so

00:21:54,720 --> 00:21:59,679
all these task references corresponds to

00:21:57,760 --> 00:22:01,360
each test responses corresponds to our

00:21:59,679 --> 00:22:05,200
task run here

00:22:01,360 --> 00:22:06,880
so for let's look through one task one

00:22:05,200 --> 00:22:08,960
so there's one passed one which is a

00:22:06,880 --> 00:22:12,080
pre-comment check

00:22:08,960 --> 00:22:14,960
in this task run we are describing that

00:22:12,080 --> 00:22:16,159
this is the task which we need to run

00:22:14,960 --> 00:22:18,159
while you are doing that

00:22:16,159 --> 00:22:19,600
we want to do some pre-checks before

00:22:18,159 --> 00:22:23,520
that task is run

00:22:19,600 --> 00:22:26,000
as as as in tecton what happens is

00:22:23,520 --> 00:22:29,200
if you run a task and if the task fails

00:22:26,000 --> 00:22:32,640
the whole pipeline fails

00:22:29,200 --> 00:22:34,880
there could be some some steps in which

00:22:32,640 --> 00:22:35,840
the pipeline the task can result into

00:22:34,880 --> 00:22:38,640
failure right

00:22:35,840 --> 00:22:39,600
so before doing that it would be better

00:22:38,640 --> 00:22:42,240
if you do something

00:22:39,600 --> 00:22:43,679
some condition checks for that tecton

00:22:42,240 --> 00:22:44,880
provides something called tecton

00:22:43,679 --> 00:22:47,360
conditions

00:22:44,880 --> 00:22:48,799
so tecton conditions public conditions

00:22:47,360 --> 00:22:52,080
are

00:22:48,799 --> 00:22:54,320
also a sub task but their failure

00:22:52,080 --> 00:22:56,159
doesn't result into pipeline failure

00:22:54,320 --> 00:22:58,400
their failure just results into a check

00:22:56,159 --> 00:23:01,679
field so we are just checking

00:22:58,400 --> 00:23:02,559
if the actual pull request has an action

00:23:01,679 --> 00:23:04,400
open

00:23:02,559 --> 00:23:05,600
if it's closed we don't want to run

00:23:04,400 --> 00:23:08,799
these checks

00:23:05,600 --> 00:23:12,000
uh are also checking um

00:23:08,799 --> 00:23:14,720
some other components and once it's done

00:23:12,000 --> 00:23:16,640
if these conditions are true then then

00:23:14,720 --> 00:23:19,760
only the pipeline will run

00:23:16,640 --> 00:23:22,799
also all the pipeline will also

00:23:19,760 --> 00:23:23,840
so this task will be wrong the task will

00:23:22,799 --> 00:23:25,760
consider some

00:23:23,840 --> 00:23:27,280
of the parameters and the resources from

00:23:25,760 --> 00:23:30,080
the pipeline

00:23:27,280 --> 00:23:31,679
and run after basically states that

00:23:30,080 --> 00:23:34,000
until unless this task

00:23:31,679 --> 00:23:37,280
have been run please do not run the

00:23:34,000 --> 00:23:40,480
pre-comment check

00:23:37,280 --> 00:23:43,039
so as we learned about the task one

00:23:40,480 --> 00:23:44,240
let's go through the task the pre-commit

00:23:43,039 --> 00:23:46,400
check task

00:23:44,240 --> 00:23:48,000
so in the task we have described the

00:23:46,400 --> 00:23:49,919
parameters which we gathered from the

00:23:48,000 --> 00:23:50,720
pipeline resources which we get from the

00:23:49,919 --> 00:23:54,080
pipeline

00:23:50,720 --> 00:23:56,240
now we are describing the steps

00:23:54,080 --> 00:23:57,440
first step is taking the information

00:23:56,240 --> 00:23:59,520
from the pull request

00:23:57,440 --> 00:24:01,360
and gathering all the information all

00:23:59,520 --> 00:24:03,600
the changes which were

00:24:01,360 --> 00:24:04,640
created in the pull request so we got

00:24:03,600 --> 00:24:06,320
that

00:24:04,640 --> 00:24:08,240
changes from the pull request we checked

00:24:06,320 --> 00:24:10,640
out our branch

00:24:08,240 --> 00:24:12,799
and now we are running some tests on it

00:24:10,640 --> 00:24:15,679
we already have a base image

00:24:12,799 --> 00:24:16,640
for this task uh pre-comment checks are

00:24:15,679 --> 00:24:20,080
basically

00:24:16,640 --> 00:24:21,200
a series of checks uh like by my pie

00:24:20,080 --> 00:24:24,400
checks python

00:24:21,200 --> 00:24:28,080
uh python by test checks flakey tracks

00:24:24,400 --> 00:24:29,760
pepe checks so all these are already

00:24:28,080 --> 00:24:32,159
candidates into a image

00:24:29,760 --> 00:24:33,120
and we would use this image in the step

00:24:32,159 --> 00:24:36,000
to run

00:24:33,120 --> 00:24:36,480
a simple script which is pre-commit

00:24:36,000 --> 00:24:39,120
track

00:24:36,480 --> 00:24:39,679
run on all files so we are running this

00:24:39,120 --> 00:24:42,080
from

00:24:39,679 --> 00:24:43,360
pre-comment check on the all files in

00:24:42,080 --> 00:24:45,279
that pull request

00:24:43,360 --> 00:24:46,400
so the changes are being checked and

00:24:45,279 --> 00:24:49,360
once the checks

00:24:46,400 --> 00:24:50,640
have been run we update the pull request

00:24:49,360 --> 00:24:53,919
with information

00:24:50,640 --> 00:24:54,559
as a status run we are saying if it was

00:24:53,919 --> 00:24:57,840
a

00:24:54,559 --> 00:24:57,840
successful check or not

00:24:58,080 --> 00:25:03,600
once it's done the pipeline completes

00:25:01,360 --> 00:25:05,440
and let's look through this pipeline in

00:25:03,600 --> 00:25:08,480
a live execution

00:25:05,440 --> 00:25:11,679
so let's go to the github this

00:25:08,480 --> 00:25:15,279
i have already i have set up a

00:25:11,679 --> 00:25:18,000
uh i've set up

00:25:15,279 --> 00:25:20,000
i've set up a github repository for

00:25:18,000 --> 00:25:22,080
today's the demonstration

00:25:20,000 --> 00:25:24,480
i have already opened a pull request

00:25:22,080 --> 00:25:27,520
with some changes to the repository

00:25:24,480 --> 00:25:28,880
i made a single change that added a

00:25:27,520 --> 00:25:32,159
print statement into my

00:25:28,880 --> 00:25:34,880
app.p by say stating that oh uh

00:25:32,159 --> 00:25:36,320
i'm very excited too to present in dev

00:25:34,880 --> 00:25:39,039
quantity 20.

00:25:36,320 --> 00:25:39,600
so when the pull request started running

00:25:39,039 --> 00:25:42,799
there was

00:25:39,600 --> 00:25:45,919
the cic the ci cd system started running

00:25:42,799 --> 00:25:48,000
with the cxc system running it

00:25:45,919 --> 00:25:49,600
did two checks one is belt check and a

00:25:48,000 --> 00:25:51,520
pre commission

00:25:49,600 --> 00:25:52,880
as we see the the pre-commit ship has

00:25:51,520 --> 00:25:56,000
failed because

00:25:52,880 --> 00:25:57,440
there was some issues with buy dock but

00:25:56,000 --> 00:26:00,799
the bill check has finished

00:25:57,440 --> 00:26:03,840
so let's see how this results into

00:26:00,799 --> 00:26:06,240
a tech talk or pipeline right so

00:26:03,840 --> 00:26:07,600
in the tecton dashboard you can go to

00:26:06,240 --> 00:26:10,960
the pipeline run

00:26:07,600 --> 00:26:14,480
in the section of a suv pipeline

00:26:10,960 --> 00:26:16,960
run we see the bunch of test run and we

00:26:14,480 --> 00:26:18,720
see the bike pre-commit check running

00:26:16,960 --> 00:26:20,320
as we can see first we gather the

00:26:18,720 --> 00:26:22,080
request information

00:26:20,320 --> 00:26:23,520
okay so let me explain you first what

00:26:22,080 --> 00:26:25,120
happened

00:26:23,520 --> 00:26:26,880
there was a web hook which triggered the

00:26:25,120 --> 00:26:28,480
event list the event let's not trigger

00:26:26,880 --> 00:26:30,400
the tiger trigger binding the trigger

00:26:28,480 --> 00:26:32,240
binding passed relieve that to regular

00:26:30,400 --> 00:26:34,240
template the trigger template started

00:26:32,240 --> 00:26:36,400
pipeline run the pipeline run is called

00:26:34,240 --> 00:26:38,480
asu pipeline

00:26:36,400 --> 00:26:40,720
good run this has started the pipeline

00:26:38,480 --> 00:26:43,360
which had series of task ones

00:26:40,720 --> 00:26:45,760
the task funds have started to execute

00:26:43,360 --> 00:26:48,640
now we are investigating on one task

00:26:45,760 --> 00:26:50,320
the one task was pre-commit check one

00:26:48,640 --> 00:26:51,760
there was one step to gather the

00:26:50,320 --> 00:26:53,279
information from the pull request we

00:26:51,760 --> 00:26:54,240
gathered some information from the pull

00:26:53,279 --> 00:26:56,320
request

00:26:54,240 --> 00:26:57,279
we run some tests while the dust

00:26:56,320 --> 00:26:59,360
completed

00:26:57,279 --> 00:27:01,760
we sent those information through our

00:26:59,360 --> 00:27:06,159
webhook again to get up

00:27:01,760 --> 00:27:08,960
as you can see the step was failed

00:27:06,159 --> 00:27:11,919
so we returned a failure and you can see

00:27:08,960 --> 00:27:11,919
it's a failure here

00:27:12,799 --> 00:27:20,320
and now similarly here we have a

00:27:16,320 --> 00:27:22,159
we have we have a tag release pipeline

00:27:20,320 --> 00:27:23,760
so the tire release pipeline on each

00:27:22,159 --> 00:27:24,720
creation it takes some of the

00:27:23,760 --> 00:27:26,960
information

00:27:24,720 --> 00:27:27,919
like version of the tag uh what type of

00:27:26,960 --> 00:27:30,000
tag is it

00:27:27,919 --> 00:27:31,120
and name of the url similarly it's

00:27:30,000 --> 00:27:34,480
passing to a

00:27:31,120 --> 00:27:36,000
tag template template it runs its own

00:27:34,480 --> 00:27:38,640
pipeline it's called tag release

00:27:36,000 --> 00:27:39,760
pipeline let's go to the tag release

00:27:38,640 --> 00:27:41,440
pipeline

00:27:39,760 --> 00:27:43,039
in the tag release and it's basically

00:27:41,440 --> 00:27:45,360
checking

00:27:43,039 --> 00:27:46,399
what configurations do you have uh

00:27:45,360 --> 00:27:48,640
should we build

00:27:46,399 --> 00:27:50,080
should i build it to uh release into

00:27:48,640 --> 00:27:52,880
pipia or should i

00:27:50,080 --> 00:27:53,520
um build to con make it as a container

00:27:52,880 --> 00:27:56,399
image

00:27:53,520 --> 00:27:58,559
so let's go and see what happens when

00:27:56,399 --> 00:28:00,840
you are building into a container image

00:27:58,559 --> 00:28:02,000
you're taking gathering all this

00:28:00,840 --> 00:28:04,640
information

00:28:02,000 --> 00:28:05,679
first is to check if it can be pushed to

00:28:04,640 --> 00:28:08,559
our image stream or not

00:28:05,679 --> 00:28:10,000
image registry yes we can push it to

00:28:08,559 --> 00:28:12,480
image registry so we gather the

00:28:10,000 --> 00:28:16,159
information of a task in the next step

00:28:12,480 --> 00:28:18,799
we take s2i build we are

00:28:16,159 --> 00:28:19,679
building with the information as you can

00:28:18,799 --> 00:28:22,159
see it said

00:28:19,679 --> 00:28:24,320
i have added a script which checks if it

00:28:22,159 --> 00:28:26,720
needs to be built with docker file

00:28:24,320 --> 00:28:28,880
as to why from a source to image or from

00:28:26,720 --> 00:28:30,960
a docker or from a container

00:28:28,880 --> 00:28:34,080
based upon the application if you see

00:28:30,960 --> 00:28:34,080
here from the source code

00:28:34,320 --> 00:28:37,520
it's it is it is considered containing a

00:28:36,640 --> 00:28:40,640
docker file

00:28:37,520 --> 00:28:43,600
so this tecton pipeline

00:28:40,640 --> 00:28:45,360
of task release should run the

00:28:43,600 --> 00:28:47,279
dockerfile

00:28:45,360 --> 00:28:48,720
and as you can see it's gathered the

00:28:47,279 --> 00:28:50,080
dockerfile information

00:28:48,720 --> 00:28:51,840
and it does build based on the

00:28:50,080 --> 00:28:53,360
dockerfile so if you consider the

00:28:51,840 --> 00:28:56,960
changes in the dockerfile

00:28:53,360 --> 00:28:59,200
it's basically take python367

00:28:56,960 --> 00:29:00,399
it starts the output female file and

00:28:59,200 --> 00:29:03,840
there is a command

00:29:00,399 --> 00:29:04,480
so it has taken the python 36 centos

00:29:03,840 --> 00:29:08,000
file

00:29:04,480 --> 00:29:10,559
taken the app and then

00:29:08,000 --> 00:29:13,360
and continuously do image and now this

00:29:10,559 --> 00:29:16,320
image is pushed to a query repository

00:29:13,360 --> 00:29:16,720
we have pushed the query repository uh

00:29:16,320 --> 00:29:20,080
from

00:29:16,720 --> 00:29:22,720
the second step so once we have built

00:29:20,080 --> 00:29:24,480
we have pushed it so while pushing it we

00:29:22,720 --> 00:29:27,919
also provide the configuration

00:29:24,480 --> 00:29:30,720
for it to push it to a query repository

00:29:27,919 --> 00:29:31,520
as this step is executed the image is

00:29:30,720 --> 00:29:34,559
pushed to

00:29:31,520 --> 00:29:38,840
the query opacity as you can see here

00:29:34,559 --> 00:29:40,399
so this is how the whole tecton pipeline

00:29:38,840 --> 00:29:43,840
executes

00:29:40,399 --> 00:29:46,320
let us go back to the demo

00:29:43,840 --> 00:29:47,120
uh let us go back to the presentation i

00:29:46,320 --> 00:29:50,080
hope you

00:29:47,120 --> 00:29:51,840
and understood how the pipeline works

00:29:50,080 --> 00:29:52,840
there were some few challenges while

00:29:51,840 --> 00:29:55,120
designing all this

00:29:52,840 --> 00:29:56,159
implementation first i as i explained

00:29:55,120 --> 00:29:58,320
while interacting

00:29:56,159 --> 00:29:59,760
the ci cd needs to know how to interact

00:29:58,320 --> 00:30:02,080
with private repositories

00:29:59,760 --> 00:30:03,520
i showed you how you can set up a secret

00:30:02,080 --> 00:30:05,840
and attach that to this

00:30:03,520 --> 00:30:07,440
such connection the another challenge

00:30:05,840 --> 00:30:09,520
was to

00:30:07,440 --> 00:30:10,480
that you need to pass one result to

00:30:09,520 --> 00:30:12,399
another task

00:30:10,480 --> 00:30:13,679
there's a tecton result resource which

00:30:12,399 --> 00:30:17,200
you can read up on

00:30:13,679 --> 00:30:19,360
on the tecton uh pipeline readme

00:30:17,200 --> 00:30:21,200
and you can use that to store results

00:30:19,360 --> 00:30:24,399
and pass that

00:30:21,200 --> 00:30:26,080
pass those as a par me pau use that to

00:30:24,399 --> 00:30:27,200
store the results into a file and then

00:30:26,080 --> 00:30:30,080
use this file

00:30:27,200 --> 00:30:33,200
to uh reduce resources to use pi as a

00:30:30,080 --> 00:30:36,240
parameter to pass them to the next task

00:30:33,200 --> 00:30:38,240
apart from this there is is some

00:30:36,240 --> 00:30:40,880
of the steps which you need to follow

00:30:38,240 --> 00:30:43,279
while maintaining the connection between

00:30:40,880 --> 00:30:46,240
running pipelines and the github status

00:30:43,279 --> 00:30:48,080
so while you're doing that

00:30:46,240 --> 00:30:50,399
when you're executing the snap you can

00:30:48,080 --> 00:30:53,279
always pass those information to github

00:30:50,399 --> 00:30:54,240
as a status check as i showed you it

00:30:53,279 --> 00:30:57,120
shows you if a

00:30:54,240 --> 00:30:58,720
pipeline task has failed or not so these

00:30:57,120 --> 00:30:59,679
were the few common challenges which we

00:30:58,720 --> 00:31:02,320
faced and we

00:30:59,679 --> 00:31:03,200
figured out a way around them and we

00:31:02,320 --> 00:31:06,559
worked to

00:31:03,200 --> 00:31:09,519
to overcome them

00:31:06,559 --> 00:31:11,440
next uh let me show tell you some of the

00:31:09,519 --> 00:31:13,519
insights while developing it

00:31:11,440 --> 00:31:15,679
we realize that all these tecton

00:31:13,519 --> 00:31:17,679
pipelines can be directly plugged into

00:31:15,679 --> 00:31:20,480
other ci tools like proof

00:31:17,679 --> 00:31:22,640
so you don't need to run it as a as an

00:31:20,480 --> 00:31:23,279
individual ci if you want if you want

00:31:22,640 --> 00:31:25,679
you can

00:31:23,279 --> 00:31:27,039
add it into your pre-existing pipeline

00:31:25,679 --> 00:31:29,279
if you have something

00:31:27,039 --> 00:31:30,840
like pro which is also a community space

00:31:29,279 --> 00:31:34,799
yeah

00:31:30,840 --> 00:31:38,159
cs2 there's uh we also figured out that

00:31:34,799 --> 00:31:40,640
uh you can also add this uh which

00:31:38,159 --> 00:31:41,840
also works the ci cd system works very

00:31:40,640 --> 00:31:44,880
well along with

00:31:41,840 --> 00:31:48,000
additional ci tools such as solar arco

00:31:44,880 --> 00:31:50,960
which which can be used for gating

00:31:48,000 --> 00:31:53,679
and then you can use um the ci cd

00:31:50,960 --> 00:31:56,720
systems to run some checks

00:31:53,679 --> 00:31:57,440
they evolve in very well very well with

00:31:56,720 --> 00:32:00,640
the sync

00:31:57,440 --> 00:32:02,799
with synergy because all of them uses

00:32:00,640 --> 00:32:06,000
xiaomi arguments and manifest files so

00:32:02,799 --> 00:32:08,000
they work very well together

00:32:06,000 --> 00:32:09,760
where one of the biggest thing which

00:32:08,000 --> 00:32:12,840
which we looked into was like

00:32:09,760 --> 00:32:15,279
while developing we were using openshift

00:32:12,840 --> 00:32:16,320
3.11 and we realized that tecton

00:32:15,279 --> 00:32:18,640
pipeline

00:32:16,320 --> 00:32:19,519
version 10.2 was a large version which

00:32:18,640 --> 00:32:21,840
supported

00:32:19,519 --> 00:32:23,279
that version so please be careful while

00:32:21,840 --> 00:32:25,919
you're developing to miss

00:32:23,279 --> 00:32:27,519
to check which tecton python matches

00:32:25,919 --> 00:32:28,960
which kubernetes version

00:32:27,519 --> 00:32:31,440
and if you can implement that in your

00:32:28,960 --> 00:32:32,080
openshift or not while deploying your

00:32:31,440 --> 00:32:33,679
cluster

00:32:32,080 --> 00:32:36,720
or your tecton pipelines onto the

00:32:33,679 --> 00:32:38,399
cluster you need admin privileges

00:32:36,720 --> 00:32:40,880
so these are some things which you need

00:32:38,399 --> 00:32:44,240
to keep in mind while deploying and

00:32:40,880 --> 00:32:47,440
developing such tools

00:32:44,240 --> 00:32:50,799
hope all this information helps you

00:32:47,440 --> 00:32:51,919
to build the cicd tool and if you need

00:32:50,799 --> 00:32:54,960
more information

00:32:51,919 --> 00:32:56,080
you can uh visit i have added some of

00:32:54,960 --> 00:32:58,159
the references here

00:32:56,080 --> 00:32:59,760
the first two references are of the

00:32:58,159 --> 00:33:02,000
application which we developed

00:32:59,760 --> 00:33:03,120
i have added some of the readmes maybe i

00:33:02,000 --> 00:33:05,360
haven't gone through

00:33:03,120 --> 00:33:06,399
each and every detail i wanted to just

00:33:05,360 --> 00:33:09,519
cover a lot of

00:33:06,399 --> 00:33:11,679
lot of topics in the short duration so

00:33:09,519 --> 00:33:12,960
a few of the topics are few other things

00:33:11,679 --> 00:33:15,840
you can check through

00:33:12,960 --> 00:33:17,120
are from the read me if you have more

00:33:15,840 --> 00:33:18,880
questions you can open

00:33:17,120 --> 00:33:20,320
a issue with the if you want to

00:33:18,880 --> 00:33:20,960
contribute please feel free to

00:33:20,320 --> 00:33:22,960
contribute

00:33:20,960 --> 00:33:24,960
if you would like others to contribute

00:33:22,960 --> 00:33:26,799
to this project

00:33:24,960 --> 00:33:29,120
apart from this i've also added some of

00:33:26,799 --> 00:33:32,080
the references from the

00:33:29,120 --> 00:33:34,000
from the upstream community and also the

00:33:32,080 --> 00:33:35,039
openshift pipeline openshift pipeline is

00:33:34,000 --> 00:33:37,120
the downstream of the

00:33:35,039 --> 00:33:39,200
tecton pipeline which is frequently

00:33:37,120 --> 00:33:42,240
being contributed by red hat

00:33:39,200 --> 00:33:42,799
uh contributors so feel free please feel

00:33:42,240 --> 00:33:46,159
free to

00:33:42,799 --> 00:33:47,760
have a look at it as well thank you so

00:33:46,159 --> 00:33:50,320
much for attending my talk

00:33:47,760 --> 00:33:52,880
i hope you learned a little bit about

00:33:50,320 --> 00:33:55,919
how to develop a ci cd with a

00:33:52,880 --> 00:33:57,679
baseline kubernetes style if you have

00:33:55,919 --> 00:33:59,840
more questions please reach you can

00:33:57,679 --> 00:34:02,880
reach me

00:33:59,840 --> 00:34:06,080
you can reach out to me on the following

00:34:02,880 --> 00:34:09,440
links and for more information

00:34:06,080 --> 00:34:11,359
about doth uh you i've also provided the

00:34:09,440 --> 00:34:13,440
also provided some links about that you

00:34:11,359 --> 00:34:16,639
can reach out to them

00:34:13,440 --> 00:34:19,040
thank you so much uh have a

00:34:16,639 --> 00:34:20,079
have a really good day uh in the dev

00:34:19,040 --> 00:34:22,480
conf

00:34:20,079 --> 00:34:24,399
while looking through all the dev co

00:34:22,480 --> 00:34:35,280
presentations

00:34:24,399 --> 00:34:37,200
thank you stay safe

00:34:35,280 --> 00:34:38,480
hey harsha thank you so much for that

00:34:37,200 --> 00:34:42,000
that was a a great

00:34:38,480 --> 00:34:44,399
present oh oh i am mute okay oops sorry

00:34:42,000 --> 00:34:44,399
hold on

00:34:46,079 --> 00:34:49,839
just to sit yeah

00:34:57,680 --> 00:35:01,280
next video playing in youtube on my end

00:35:00,720 --> 00:35:05,520
um

00:35:01,280 --> 00:35:08,560
so i don't see any questions um

00:35:05,520 --> 00:35:10,800
i am really interested in this topic

00:35:08,560 --> 00:35:12,079
i work on openshift do you also work on

00:35:10,800 --> 00:35:14,800
openshift

00:35:12,079 --> 00:35:16,320
uh not exactly on openshirt but we tell

00:35:14,800 --> 00:35:17,119
most of our applications run on

00:35:16,320 --> 00:35:19,680
openshift

00:35:17,119 --> 00:35:20,160
so we have to when they do oh i see yeah

00:35:19,680 --> 00:35:23,680
the

00:35:20,160 --> 00:35:26,960
the openshift ci cd we use pro

00:35:23,680 --> 00:35:30,000
um kubernetes pro yep and it is

00:35:26,960 --> 00:35:32,280
insane and complicated and

00:35:30,000 --> 00:35:33,440
brings together over a hundred different

00:35:32,280 --> 00:35:36,720
repositories

00:35:33,440 --> 00:35:38,880
that all need to stay in sync and not

00:35:36,720 --> 00:35:41,040
break each other you know the the

00:35:38,880 --> 00:35:43,760
complete openshift release

00:35:41,040 --> 00:35:45,280
payload is made up of over 100 different

00:35:43,760 --> 00:35:49,599
repositories i believe

00:35:45,280 --> 00:35:52,640
at this point and it's complicated and

00:35:49,599 --> 00:35:57,520
absolutely necessary to keep keep

00:35:52,640 --> 00:36:01,040
things rolling a dependable and

00:35:57,520 --> 00:36:03,599
working ci cd yeah yes uh definitely

00:36:01,040 --> 00:36:04,160
i actually looked into pro and uh that

00:36:03,599 --> 00:36:06,079
was a

00:36:04,160 --> 00:36:07,280
like that was the first step when look

00:36:06,079 --> 00:36:09,760
then we were searching for

00:36:07,280 --> 00:36:11,280
all the ciacd tools that's the one which

00:36:09,760 --> 00:36:13,119
we came across because

00:36:11,280 --> 00:36:14,400
we were very close with openshift team

00:36:13,119 --> 00:36:17,760
and we know like they

00:36:14,400 --> 00:36:18,240
provided us the details and but then we

00:36:17,760 --> 00:36:20,000
went

00:36:18,240 --> 00:36:21,839
on to looking more and then there was

00:36:20,000 --> 00:36:24,079
those stacked on we just

00:36:21,839 --> 00:36:25,280
thought maybe why not let's try to

00:36:24,079 --> 00:36:27,200
develop it again

00:36:25,280 --> 00:36:28,640
and then you can just edit improve

00:36:27,200 --> 00:36:30,880
because pro has this

00:36:28,640 --> 00:36:32,240
feature where you can uh include it and

00:36:30,880 --> 00:36:35,040
to prove jobs so

00:36:32,240 --> 00:36:35,839
you're sending out the github or gitlab

00:36:35,040 --> 00:36:38,640
webworks

00:36:35,839 --> 00:36:40,240
but it's going reaching pro but pro is

00:36:38,640 --> 00:36:42,079
triggering the technon pipelines

00:36:40,240 --> 00:36:43,440
so it's not running its own jobs but

00:36:42,079 --> 00:36:46,560
it's running pipelines

00:36:43,440 --> 00:36:48,480
so i see you can do this so all these

00:36:46,560 --> 00:36:49,920
are plug and play so you don't need to

00:36:48,480 --> 00:36:51,760
change anything you just need to remove

00:36:49,920 --> 00:36:52,320
the techno trigger just put it into

00:36:51,760 --> 00:36:55,839
proof

00:36:52,320 --> 00:36:55,839
and it works exactly the same

00:36:56,160 --> 00:37:03,359
oh wow that's really interesting

00:36:59,359 --> 00:37:06,400
um so we do have the breakout room um

00:37:03,359 --> 00:37:09,200
if you uh have any other questions

00:37:06,400 --> 00:37:09,599
otherwise thank you so much and you can

00:37:09,200 --> 00:37:12,480
uh

00:37:09,599 --> 00:37:14,480
watch harshad's link i pinned it above

00:37:12,480 --> 00:37:18,800
and it will be updated in the schedule

00:37:14,480 --> 00:37:22,160
when i get to it maybe a few minutes

00:37:18,800 --> 00:37:24,240
thank you so much yep have a great night

00:37:22,160 --> 00:37:27,040
thank you everyone enjoy the rest of the

00:37:24,240 --> 00:37:27,040

YouTube URL: https://www.youtube.com/watch?v=EC8KUqyVr-Q


