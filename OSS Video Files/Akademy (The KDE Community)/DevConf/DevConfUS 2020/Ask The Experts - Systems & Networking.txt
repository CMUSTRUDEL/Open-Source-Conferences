Title: Ask The Experts - Systems & Networking
Publication date: 2020-10-06
Playlist: DevConfUS 2020
Description: 
	Speakers: Prarit Bhargava, Waiman Long, Dan Winship, Aaron Conole, & Thomas Haller

Ask the Experts for all your systems and networking questions.

Join Prarit Bhargava, Waiman Long, Dan Winship, and Thomas Haller as
they answer your questions about systems and networking.
Captions: 
	00:00:00,320 --> 00:00:05,839
all right it is 11 30 a.m eastern

00:00:03,679 --> 00:00:07,279
hello everyone welcome to the ask the

00:00:05,839 --> 00:00:09,280
expert session for the systems

00:00:07,279 --> 00:00:11,759
engineering and hardware track

00:00:09,280 --> 00:00:13,360
we have a panel of experts here who are

00:00:11,759 --> 00:00:14,719
here to answer all your questions around

00:00:13,360 --> 00:00:16,240
systems and networking

00:00:14,719 --> 00:00:18,800
so please put in all your questions into

00:00:16,240 --> 00:00:21,439
the chat and we will feel them

00:00:18,800 --> 00:00:22,560
as we see them i'm going to hand that

00:00:21,439 --> 00:00:24,640
over to you now aaron

00:00:22,560 --> 00:00:26,880
please take over and thank you all for

00:00:24,640 --> 00:00:30,240
doing this

00:00:26,880 --> 00:00:30,960
all right thanks rashi so on the panel

00:00:30,240 --> 00:00:34,880
we have

00:00:30,960 --> 00:00:38,719
wyman long prairie pagava thomas haller

00:00:34,880 --> 00:00:41,120
and dan winship so we have a good mix of

00:00:38,719 --> 00:00:41,920
sort of networking expertise both in

00:00:41,120 --> 00:00:44,719
sort of the

00:00:41,920 --> 00:00:46,160
desktop server as well as cloud and

00:00:44,719 --> 00:00:49,760
kernel expertise

00:00:46,160 --> 00:00:51,840
so feel free to ask questions

00:00:49,760 --> 00:00:53,120
anywhere you want and if no one can

00:00:51,840 --> 00:00:55,440
answer them then

00:00:53,120 --> 00:00:55,440
sorry

00:00:57,120 --> 00:01:00,239
first question we'll just get right into

00:00:58,960 --> 00:01:03,120
it so first question

00:01:00,239 --> 00:01:04,720
is from richard jones um are you

00:01:03,120 --> 00:01:06,400
following risk five

00:01:04,720 --> 00:01:09,280
and what effect might it have on the

00:01:06,400 --> 00:01:09,280
server landscape

00:01:10,640 --> 00:01:17,040
i'll take a shot at answering that um

00:01:13,680 --> 00:01:19,759
richard that's a great question uh

00:01:17,040 --> 00:01:20,159
historically we we've seen a little bit

00:01:19,759 --> 00:01:23,360
of

00:01:20,159 --> 00:01:24,080
of interest in in risk risk five over

00:01:23,360 --> 00:01:27,600
the years

00:01:24,080 --> 00:01:30,880
uh over the past little while rather um

00:01:27,600 --> 00:01:32,960
it's it's we're i'm following it

00:01:30,880 --> 00:01:35,040
purely from a point of view that that it

00:01:32,960 --> 00:01:37,360
may become something

00:01:35,040 --> 00:01:38,400
uh may become a product that maybe may

00:01:37,360 --> 00:01:41,040
become

00:01:38,400 --> 00:01:42,399
something more more real someday adding

00:01:41,040 --> 00:01:45,680
another architecture

00:01:42,399 --> 00:01:46,079
is is as always very interesting at red

00:01:45,680 --> 00:01:49,200
hat

00:01:46,079 --> 00:01:51,119
uh it takes uh it's not just an

00:01:49,200 --> 00:01:53,040
engineering effort there's qe there's

00:01:51,119 --> 00:01:54,159
productization documentation and

00:01:53,040 --> 00:01:57,200
everything that's involved

00:01:54,159 --> 00:02:00,399
in there once we see enough uh

00:01:57,200 --> 00:02:03,040
interest from partners and customers

00:02:00,399 --> 00:02:09,840
that's when we'll have a real serious

00:02:03,040 --> 00:02:09,840
discussion about risk five

00:02:15,920 --> 00:02:19,440
i guess along that there are some

00:02:18,480 --> 00:02:23,040
efforts to

00:02:19,440 --> 00:02:26,080
have data centers that are x86

00:02:23,040 --> 00:02:28,080
and i guess there are some challenges uh

00:02:26,080 --> 00:02:29,040
related to that both from a networking

00:02:28,080 --> 00:02:32,560
side

00:02:29,040 --> 00:02:36,000
and uh and just a systems

00:02:32,560 --> 00:02:38,319
uh execution side so

00:02:36,000 --> 00:02:40,080
are there any special considerations

00:02:38,319 --> 00:02:44,640
from networking or

00:02:40,080 --> 00:02:44,640
systems that that we have to keep in

00:02:48,840 --> 00:02:51,840
mind

00:02:55,200 --> 00:03:01,120
sorry aaron my my screen just uh

00:02:58,959 --> 00:03:04,879
went out and i heard the very end of

00:03:01,120 --> 00:03:08,159
that could you repeat that my apologies

00:03:04,879 --> 00:03:10,080
yeah so there's sort of a other data

00:03:08,159 --> 00:03:12,159
centers that are starting to migrate to

00:03:10,080 --> 00:03:16,159
non-intel hardware

00:03:12,159 --> 00:03:18,800
and that can bring its own challenges

00:03:16,159 --> 00:03:19,920
and what sort of considerations do we

00:03:18,800 --> 00:03:23,519
have to have

00:03:19,920 --> 00:03:26,560
um from systems and networking side uh

00:03:23,519 --> 00:03:27,680
sort of when thinking about running sort

00:03:26,560 --> 00:03:30,799
of the full

00:03:27,680 --> 00:03:32,879
a full solution like um not just

00:03:30,799 --> 00:03:34,239
you know say kernel and os utilities but

00:03:32,879 --> 00:03:36,879
like

00:03:34,239 --> 00:03:38,480
the networking side and and like you

00:03:36,879 --> 00:03:40,640
know hardware enablement

00:03:38,480 --> 00:03:42,239
and offload enablement all that sort of

00:03:40,640 --> 00:03:42,720
stuff what are what are the things we

00:03:42,239 --> 00:03:46,159
have to

00:03:42,720 --> 00:03:49,200
keep in mind as special considerations

00:03:46,159 --> 00:03:52,080
well i think from from a low

00:03:49,200 --> 00:03:52,319
i'm i'm primarily kernel focused and so

00:03:52,080 --> 00:03:54,879
i

00:03:52,319 --> 00:03:55,599
i always like to say we're the bottom of

00:03:54,879 --> 00:04:00,319
the pile

00:03:55,599 --> 00:04:04,159
as it relates to the rest of the stack

00:04:00,319 --> 00:04:06,799
we we try for parity uh

00:04:04,159 --> 00:04:07,360
across all architectures uh with our

00:04:06,799 --> 00:04:09,519
product

00:04:07,360 --> 00:04:10,560
with our products so it doesn't matter

00:04:09,519 --> 00:04:13,680
which

00:04:10,560 --> 00:04:17,040
what architecture you're running

00:04:13,680 --> 00:04:19,519
that again takes effort it's not

00:04:17,040 --> 00:04:20,720
just uh kind of snap your fingers and

00:04:19,519 --> 00:04:24,000
and hope it works

00:04:20,720 --> 00:04:26,639
uh kind of kind of effort

00:04:24,000 --> 00:04:27,600
there are things like we we have to make

00:04:26,639 --> 00:04:30,880
sure that the

00:04:27,600 --> 00:04:35,199
drivers and the devices that these

00:04:30,880 --> 00:04:37,600
systems uh adopt are maintainable

00:04:35,199 --> 00:04:39,040
we've had in the past where uh some

00:04:37,600 --> 00:04:40,160
drivers have come in on some

00:04:39,040 --> 00:04:41,919
architectures

00:04:40,160 --> 00:04:43,520
and could not be maintained for long

00:04:41,919 --> 00:04:48,400
periods of time

00:04:43,520 --> 00:04:48,400
we also have to look at the overall uh

00:04:49,199 --> 00:04:53,520
specific purpose of some of these

00:04:51,280 --> 00:04:55,600
processors risk five for example as

00:04:53,520 --> 00:04:59,919
you've noted it has a very much a

00:04:55,600 --> 00:05:03,199
server footprint

00:04:59,919 --> 00:05:06,320
whereas arm it was hoped would have

00:05:03,199 --> 00:05:09,360
both a server and a

00:05:06,320 --> 00:05:10,720
laptop footprint

00:05:09,360 --> 00:05:12,720
so i think those types of things

00:05:10,720 --> 00:05:13,759
definitely play into the decisions that

00:05:12,720 --> 00:05:16,160
are made

00:05:13,759 --> 00:05:17,919
um there there are technical issues

00:05:16,160 --> 00:05:18,639
throughout the stack that i could get

00:05:17,919 --> 00:05:20,560
into but i

00:05:18,639 --> 00:05:22,880
i think i would potentially bore

00:05:20,560 --> 00:05:26,080
everybody on this call

00:05:22,880 --> 00:05:28,639
so i don't want to get too far into that

00:05:26,080 --> 00:05:31,520
and with that long rambling answer i'll

00:05:28,639 --> 00:05:31,520
i'll end it there

00:05:33,919 --> 00:05:38,960
so i work on openshift networking um and

00:05:36,960 --> 00:05:41,520
you know from our perspective

00:05:38,960 --> 00:05:43,919
we just you know use the features that

00:05:41,520 --> 00:05:47,120
the kernel gives us so

00:05:43,919 --> 00:05:48,800
if if if rel starts supporting

00:05:47,120 --> 00:05:50,639
other architectures then we can support

00:05:48,800 --> 00:05:51,840
them at the higher levels and

00:05:50,639 --> 00:06:07,840
yeah we don't really even notice

00:05:51,840 --> 00:06:11,360
architecture that much

00:06:07,840 --> 00:06:15,199
okay um

00:06:11,360 --> 00:06:15,199
any other questions it's a

00:06:15,360 --> 00:06:21,840
pretty short panel so far

00:06:23,520 --> 00:06:28,560
maybe um like thomas and dan you can

00:06:27,199 --> 00:06:32,080
talk a little bit about

00:06:28,560 --> 00:06:37,039
uh what's happening in uh

00:06:32,080 --> 00:06:37,039
like server side networking developments

00:06:46,080 --> 00:06:49,599
i can say something i i work on network

00:06:48,560 --> 00:06:53,599
manager

00:06:49,599 --> 00:06:54,160
and in general in the the the management

00:06:53,599 --> 00:06:57,199
of

00:06:54,160 --> 00:07:00,080
of networking in in rel so

00:06:57,199 --> 00:07:01,440
the what we want to do is the network

00:07:00,080 --> 00:07:05,120
manager is the component

00:07:01,440 --> 00:07:06,319
for configuring networking on the linux

00:07:05,120 --> 00:07:08,960
host

00:07:06,319 --> 00:07:11,840
and there are there is uh there are

00:07:08,960 --> 00:07:14,560
other components on top of that

00:07:11,840 --> 00:07:16,319
that that use the api that network

00:07:14,560 --> 00:07:20,160
manager provides

00:07:16,319 --> 00:07:20,160
and and

00:07:21,919 --> 00:07:26,479
i think the point is that we believe

00:07:25,039 --> 00:07:27,680
network manager should be this uses a

00:07:26,479 --> 00:07:30,400
space component

00:07:27,680 --> 00:07:31,919
that provides an api to other components

00:07:30,400 --> 00:07:34,400
so on top of that

00:07:31,919 --> 00:07:35,759
we have another project it's called

00:07:34,400 --> 00:07:38,720
animstate

00:07:35,759 --> 00:07:40,080
which is kind of a simple it provides a

00:07:38,720 --> 00:07:44,879
different api

00:07:40,080 --> 00:07:47,120
to applications and

00:07:44,879 --> 00:07:47,120
yes

00:07:48,319 --> 00:07:51,120
that's it i think

00:07:51,440 --> 00:07:55,280
for instance in openshift we're looking

00:07:53,199 --> 00:07:56,960
at using m state because

00:07:55,280 --> 00:07:58,319
people have various complicated

00:07:56,960 --> 00:08:01,360
networking configurations

00:07:58,319 --> 00:08:02,879
on their in their clusters and we don't

00:08:01,360 --> 00:08:05,120
want everybody running

00:08:02,879 --> 00:08:07,039
you know ifconfig or whatever on on

00:08:05,120 --> 00:08:08,560
their openshift nodes

00:08:07,039 --> 00:08:10,560
doing random strange things to the

00:08:08,560 --> 00:08:13,599
network so nm state is great because

00:08:10,560 --> 00:08:15,440
it lets them just sort of declaratively

00:08:13,599 --> 00:08:16,800
explain their networking configuration

00:08:15,440 --> 00:08:18,720
and you can get that set up

00:08:16,800 --> 00:08:21,759
that's that's still a few releases in

00:08:18,720 --> 00:08:21,759
the future for us but

00:08:23,280 --> 00:08:28,400
um so someone is just asking uh

00:08:26,639 --> 00:08:30,400
i am part of openshift support team and

00:08:28,400 --> 00:08:33,120
could see we are now moving to obn

00:08:30,400 --> 00:08:34,800
from obs how do we see ovn helping us

00:08:33,120 --> 00:08:36,640
moving away from ip tables

00:08:34,800 --> 00:08:37,919
what if the north deep pods go down do

00:08:36,640 --> 00:08:40,560
they have any mechanism to come up

00:08:37,919 --> 00:08:44,000
without causing any network disruptions

00:08:40,560 --> 00:08:45,680
um okay so moving from or to obn from

00:08:44,000 --> 00:08:48,160
ovs so the the current

00:08:45,680 --> 00:08:49,279
openshift network plug-in openshift sdn

00:08:48,160 --> 00:08:52,640
is built on on

00:08:49,279 --> 00:08:53,279
raw obs basically obn is also built on

00:08:52,640 --> 00:08:56,880
obs

00:08:53,279 --> 00:08:58,320
it's just another layer of abstraction

00:08:56,880 --> 00:09:01,920
on top of it

00:08:58,320 --> 00:09:03,519
so yeah um in openshift 46 which is

00:09:01,920 --> 00:09:07,519
coming out this fall

00:09:03,519 --> 00:09:11,279
ovn will be over kubernetes the plug-in

00:09:07,519 --> 00:09:11,279
will be ga

00:09:12,720 --> 00:09:17,200
how do we see obn helping us moving away

00:09:15,120 --> 00:09:20,560
from ip tables i mean obn kubernetes

00:09:17,200 --> 00:09:22,480
doesn't use ip tables at all

00:09:20,560 --> 00:09:24,160
openshift sdn and a lot of other

00:09:22,480 --> 00:09:27,200
kubernetes network plugins

00:09:24,160 --> 00:09:30,000
um use ip tables to do all the service

00:09:27,200 --> 00:09:32,080
proxy and so in a very large cluster you

00:09:30,000 --> 00:09:33,040
can have tens of thousands of ip tables

00:09:32,080 --> 00:09:34,959
rules

00:09:33,040 --> 00:09:37,040
and things get kind of slow after a

00:09:34,959 --> 00:09:40,800
while and causes problems

00:09:37,040 --> 00:09:44,399
uh ovn kubernetes uses ovn flows which

00:09:40,800 --> 00:09:48,320
compile down to obs openflow

00:09:44,399 --> 00:09:48,320
to do all the the load balancing stuff

00:09:48,839 --> 00:09:53,279
um

00:09:50,800 --> 00:09:53,920
in it doesn't have the ip tables

00:09:53,279 --> 00:09:56,000
problems

00:09:53,920 --> 00:09:58,000
it you know is having some problems of

00:09:56,000 --> 00:10:01,360
its own we're working through those

00:09:58,000 --> 00:10:03,839
uh fixing performance issues uh but

00:10:01,360 --> 00:10:05,360
yeah i mean basically if you're using

00:10:03,839 --> 00:10:08,480
ovn kubernetes you

00:10:05,360 --> 00:10:09,040
are moved away from ip tables it uses

00:10:08,480 --> 00:10:13,200
maybe like

00:10:09,040 --> 00:10:16,720
10 ib tables rules total um

00:10:13,200 --> 00:10:19,279
what if the north teapots go down so

00:10:16,720 --> 00:10:20,880
one problem that that we had had with

00:10:19,279 --> 00:10:23,279
obitusdn even

00:10:20,880 --> 00:10:25,279
is that when doing a cluster upgrade uh

00:10:23,279 --> 00:10:26,320
every node gets restarted every pod gets

00:10:25,279 --> 00:10:28,640
restarted

00:10:26,320 --> 00:10:30,240
and when you restart the ovs pods that

00:10:28,640 --> 00:10:33,519
causes disruption because

00:10:30,240 --> 00:10:36,959
when obs isn't running it it

00:10:33,519 --> 00:10:38,560
can't be routing traffic um so we

00:10:36,959 --> 00:10:40,079
eventually moved to an architecture

00:10:38,560 --> 00:10:42,560
where instead of running obs

00:10:40,079 --> 00:10:44,640
in pods we finally moved it back into

00:10:42,560 --> 00:10:45,279
the system image so it actually runs as

00:10:44,640 --> 00:10:49,440
a systemd

00:10:45,279 --> 00:10:51,200
service on the node rather than as a pod

00:10:49,440 --> 00:10:52,880
and so that way it only gets restarted

00:10:51,200 --> 00:10:53,600
when the node itself gets restarted when

00:10:52,880 --> 00:10:56,320
there are no

00:10:53,600 --> 00:10:57,920
pods on and so it doesn't interrupt the

00:10:56,320 --> 00:11:00,800
traffic

00:10:57,920 --> 00:11:01,760
so the idea is the same with obn that

00:11:00,800 --> 00:11:04,240
anything

00:11:01,760 --> 00:11:05,680
that is is actually critical to the

00:11:04,240 --> 00:11:09,200
routing of traffic

00:11:05,680 --> 00:11:10,880
runs on the node itself uh in the northd

00:11:09,200 --> 00:11:13,440
case if the northeapods go down

00:11:10,880 --> 00:11:15,040
that means we can't make changes to the

00:11:13,440 --> 00:11:18,480
network

00:11:15,040 --> 00:11:19,440
uh connectivity whatever until they come

00:11:18,480 --> 00:11:21,440
back up

00:11:19,440 --> 00:11:23,200
but north d isn't actually needed to

00:11:21,440 --> 00:11:26,399
keep the packets flowing

00:11:23,200 --> 00:11:28,240
so if northea goes down uh

00:11:26,399 --> 00:11:30,079
you know the the api server the

00:11:28,240 --> 00:11:33,040
scheduler or whatever notices

00:11:30,079 --> 00:11:33,839
that oh it's gone down uh start a new

00:11:33,040 --> 00:11:35,600
northeapod

00:11:33,839 --> 00:11:39,040
and it just does that and it works

00:11:35,600 --> 00:11:39,040
because the network will still be there

00:11:40,720 --> 00:11:45,519
i guess there's some trickiness with

00:11:44,000 --> 00:11:47,120
something has to tell northey about the

00:11:45,519 --> 00:11:49,839
new pod but um

00:11:47,120 --> 00:11:51,360
the northeast run in aha mode so as long

00:11:49,839 --> 00:11:53,200
as all three north deep paws don't go

00:11:51,360 --> 00:11:55,839
down at the same time

00:11:53,200 --> 00:11:57,279
you're fine um and if all three north

00:11:55,839 --> 00:11:58,560
duponts do go down at the same time you

00:11:57,279 --> 00:12:01,680
probably have bigger problems

00:11:58,560 --> 00:12:06,240
like lightning strike or something

00:12:01,680 --> 00:12:10,000
so uh

00:12:06,240 --> 00:12:12,639
yeah further questions

00:12:10,000 --> 00:12:12,639
type them out

00:12:15,519 --> 00:12:18,880
thanks dan i also wanted to point out

00:12:17,120 --> 00:12:25,839
that till put a link

00:12:18,880 --> 00:12:25,839
in the chat to nm state

00:12:33,279 --> 00:12:39,519
ah okay so proud

00:12:36,480 --> 00:12:39,519
tell us about rel eight

00:12:40,320 --> 00:12:44,079
um i just noted i was just scanning down

00:12:42,800 --> 00:12:45,839
the uh people list

00:12:44,079 --> 00:12:47,279
and i'll i'll tell you this great story

00:12:45,839 --> 00:12:49,760
about this this shirt

00:12:47,279 --> 00:12:52,160
um this is actually one of my favorite

00:12:49,760 --> 00:12:55,200
red hat shirts denise dumas gave this to

00:12:52,160 --> 00:12:58,160
me and i saw her name in the uh

00:12:55,200 --> 00:12:59,519
in the uh people list so she's get a

00:12:58,160 --> 00:13:02,320
nice big shout out

00:12:59,519 --> 00:13:04,000
uh and i'll do her an extra shout out i

00:13:02,320 --> 00:13:05,040
don't know if she's doing a session on

00:13:04,000 --> 00:13:07,680
diversity

00:13:05,040 --> 00:13:09,440
at dev conf us but if she is everybody

00:13:07,680 --> 00:13:10,959
on this call needs to go and listen to

00:13:09,440 --> 00:13:14,560
what she says

00:13:10,959 --> 00:13:16,720
um but uh look uh

00:13:14,560 --> 00:13:18,800
you know relate is our primary product

00:13:16,720 --> 00:13:20,399
uh sorry one of our primary products

00:13:18,800 --> 00:13:23,760
here at red hat

00:13:20,399 --> 00:13:26,560
we are working hard on rel nine so uh

00:13:23,760 --> 00:13:28,240
the shirt is almost out of date um i'll

00:13:26,560 --> 00:13:30,639
need to ask denise

00:13:28,240 --> 00:13:32,880
to uh give me one oh she i just noticed

00:13:30,639 --> 00:13:34,399
this she's giving everybody on this call

00:13:32,880 --> 00:13:36,560
you have to go you have to go you have

00:13:34,399 --> 00:13:40,320
to go listen to what she says

00:13:36,560 --> 00:13:40,800
um and uh we're working hard on real

00:13:40,320 --> 00:13:43,199
nine

00:13:40,800 --> 00:13:44,959
um you know rel eight was an interesting

00:13:43,199 --> 00:13:46,720
process real nine is going to be even

00:13:44,959 --> 00:13:48,000
more interesting we're moving a lot of

00:13:46,720 --> 00:13:50,399
our development into

00:13:48,000 --> 00:13:51,839
more open areas we're working right now

00:13:50,399 --> 00:13:54,880
with

00:13:51,839 --> 00:13:55,600
centos stream as people may have heard

00:13:54,880 --> 00:13:58,880
of

00:13:55,600 --> 00:14:01,040
that as a thing now

00:13:58,880 --> 00:14:03,120
we're working on figuring out how we're

00:14:01,040 --> 00:14:05,600
going to work with centaur stream

00:14:03,120 --> 00:14:06,959
and what our development process will be

00:14:05,600 --> 00:14:08,720
with centos stream

00:14:06,959 --> 00:14:10,399
and that just doesn't go for the kernel

00:14:08,720 --> 00:14:13,600
that goes for every

00:14:10,399 --> 00:14:17,360
uh package uh in rel

00:14:13,600 --> 00:14:19,440
is going to be more outward facing

00:14:17,360 --> 00:14:21,600
we are supposed to be an open source

00:14:19,440 --> 00:14:24,639
company and it's time we acted like

00:14:21,600 --> 00:14:26,160
one is uh what i like saying to people

00:14:24,639 --> 00:14:29,440
these days

00:14:26,160 --> 00:14:33,040
um rel eight

00:14:29,440 --> 00:14:33,519
is uh is humming along wonderfully rel

00:14:33,040 --> 00:14:36,800
nine

00:14:33,519 --> 00:14:45,839
is going to do the same uh is what i'll

00:14:36,800 --> 00:14:45,839
what i'll say

00:14:50,560 --> 00:14:56,480
yeah thanks um and denise's keynote is

00:14:54,480 --> 00:14:59,680
tomorrow at 9 30 a.m so like

00:14:56,480 --> 00:15:02,160
said should go and attend be

00:14:59,680 --> 00:15:02,160
quite good

00:15:03,920 --> 00:15:08,480
all right so irvashi asks what are some

00:15:06,720 --> 00:15:10,160
cool technologies that you all are

00:15:08,480 --> 00:15:10,880
working on in the systems and networking

00:15:10,160 --> 00:15:12,720
area

00:15:10,880 --> 00:15:16,000
things that people are not familiar in

00:15:12,720 --> 00:15:16,000
the area would like to know about

00:15:22,399 --> 00:15:26,240
let's make wayman answer that yeah let

00:15:24,800 --> 00:15:29,519
me start with that okay

00:15:26,240 --> 00:15:33,199
um i'm a kernel engineer

00:15:29,519 --> 00:15:34,160
i'm working mainly in the core kernel

00:15:33,199 --> 00:15:36,200
area

00:15:34,160 --> 00:15:38,959
including uh locking um

00:15:36,200 --> 00:15:42,560
[Music]

00:15:38,959 --> 00:15:46,639
control group as well as some many mm

00:15:42,560 --> 00:15:50,639
related stuff uh right now i'm trying to

00:15:46,639 --> 00:15:54,000
backprotect one of the upstream um

00:15:50,639 --> 00:15:56,639
memory sequel changes that um

00:15:54,000 --> 00:15:58,079
will help us to reduce the consumption

00:15:56,639 --> 00:16:02,160
of kernel memory

00:15:58,079 --> 00:16:05,600
in the kernel um they will

00:16:02,160 --> 00:16:09,440
i hope uh have openshift to allow them

00:16:05,600 --> 00:16:12,240
to um to use to have more container

00:16:09,440 --> 00:16:12,639
with a given set amount of memory the

00:16:12,240 --> 00:16:15,600
way

00:16:12,639 --> 00:16:18,160
that the the container work is it make

00:16:15,600 --> 00:16:22,079
use of the two kernel feature

00:16:18,160 --> 00:16:25,120
um primarily one is the the c group

00:16:22,079 --> 00:16:25,920
uh to partition the resources in in in a

00:16:25,120 --> 00:16:28,160
system

00:16:25,920 --> 00:16:29,440
the other one is name space to isolate

00:16:28,160 --> 00:16:31,199
the name so that you won't

00:16:29,440 --> 00:16:32,639
so that one container are not supposed

00:16:31,199 --> 00:16:35,360
to see a

00:16:32,639 --> 00:16:36,959
stop uh name uh from a different

00:16:35,360 --> 00:16:41,360
container or from the

00:16:36,959 --> 00:16:43,759
whole system and in

00:16:41,360 --> 00:16:44,880
and also in order to uh for the in the

00:16:43,759 --> 00:16:46,639
case of um

00:16:44,880 --> 00:16:48,320
let me see group in order to control the

00:16:46,639 --> 00:16:50,480
amount resource you are allowed to use

00:16:48,320 --> 00:16:53,279
in a container

00:16:50,480 --> 00:16:55,040
you have to set up some kind of limit

00:16:53,279 --> 00:16:55,920
like how much memory you are supposed to

00:16:55,040 --> 00:16:59,199
use

00:16:55,920 --> 00:17:02,160
and and that includes

00:16:59,199 --> 00:17:03,680
everything the um the application within

00:17:02,160 --> 00:17:07,199
the container will consume

00:17:03,680 --> 00:17:10,880
like the order pay cash

00:17:07,199 --> 00:17:12,559
or the file buffer and also all the

00:17:10,880 --> 00:17:14,799
internal data structure that you cannot

00:17:12,559 --> 00:17:19,120
maintain for for all the processes

00:17:14,799 --> 00:17:21,039
in the container and

00:17:19,120 --> 00:17:22,240
and the kernel memory that is current

00:17:21,039 --> 00:17:25,919
the system used

00:17:22,240 --> 00:17:27,839
is that um each um each container will

00:17:25,919 --> 00:17:29,520
have their own set of what we call the

00:17:27,839 --> 00:17:33,360
the km cache

00:17:29,520 --> 00:17:35,760
and with the k nps in order to

00:17:33,360 --> 00:17:36,640
for have better performance and you have

00:17:35,760 --> 00:17:38,640
also of

00:17:36,640 --> 00:17:40,640
caches within the command cache

00:17:38,640 --> 00:17:42,160
including the perceptual cache as well

00:17:40,640 --> 00:17:45,679
as per node cache

00:17:42,160 --> 00:17:48,799
and is those caches that can consume

00:17:45,679 --> 00:17:52,400
quite a bit of memory um

00:17:48,799 --> 00:17:54,799
so right now um each container or

00:17:52,400 --> 00:17:55,520
specifically each memory c group have

00:17:54,799 --> 00:17:58,880
their own set

00:17:55,520 --> 00:18:01,440
of k m cash and so

00:17:58,880 --> 00:18:02,320
and there's no sharing between um

00:18:01,440 --> 00:18:05,360
different

00:18:02,320 --> 00:18:08,480
container and as a result

00:18:05,360 --> 00:18:10,799
you have consumed a lot more memory than

00:18:08,480 --> 00:18:12,880
you are actually using because some of

00:18:10,799 --> 00:18:16,240
the the memory are

00:18:12,880 --> 00:18:19,039
being kept within the kmm class as

00:18:16,240 --> 00:18:20,960
one in the payment cash you you allocate

00:18:19,039 --> 00:18:23,760
a set of pages for each

00:18:20,960 --> 00:18:24,320
what we call a slab and usually you you

00:18:23,760 --> 00:18:26,640
are not

00:18:24,320 --> 00:18:28,880
going to use up everything uh within the

00:18:26,640 --> 00:18:32,320
slab so the free space left

00:18:28,880 --> 00:18:36,000
uh cannot be used by other container

00:18:32,320 --> 00:18:39,039
um with the upcoming x4 kernel

00:18:36,000 --> 00:18:42,799
we are going to backup a change that

00:18:39,039 --> 00:18:45,039
allow us to share the premium cache

00:18:42,799 --> 00:18:45,840
between different containers so instead

00:18:45,039 --> 00:18:48,799
of one

00:18:45,840 --> 00:18:49,919
one class for each container we can have

00:18:48,799 --> 00:18:52,960
one single cache

00:18:49,919 --> 00:18:55,760
share by all and in this way

00:18:52,960 --> 00:18:57,120
you you you reduce the consumption of

00:18:55,760 --> 00:19:01,600
memory by quite a bit

00:18:57,120 --> 00:19:03,520
and which hopefully will reduce the um

00:19:01,600 --> 00:19:05,600
the amount consumed by each container

00:19:03,520 --> 00:19:10,640
and so we we hope we can

00:19:05,600 --> 00:19:13,919
have more container within a system and

00:19:10,640 --> 00:19:16,240
yeah that is that that's it for me

00:19:13,919 --> 00:19:17,919
so uh i'll let the other panelists talk

00:19:16,240 --> 00:19:25,840
about what they are

00:19:17,919 --> 00:19:25,840
doing for for the for the new releases

00:19:32,240 --> 00:19:39,600
i guess i'll go next um so right now i'm

00:19:35,600 --> 00:19:42,960
working a lot on stack ipv4 ipv6 stuff

00:19:39,600 --> 00:19:44,640
and openshift um i mean i think that's

00:19:42,960 --> 00:19:46,000
that's pretty much a solved problem

00:19:44,640 --> 00:19:48,880
like out there in the rest of the

00:19:46,000 --> 00:19:50,720
networking world but uh for kubernetes

00:19:48,880 --> 00:19:52,080
for a long time it hasn't been able to

00:19:50,720 --> 00:19:54,320
do dual stack

00:19:52,080 --> 00:19:55,600
um so microsoft has been working on that

00:19:54,320 --> 00:19:58,080
a lot upstream

00:19:55,600 --> 00:19:59,280
to get dual stack support for kubernetes

00:19:58,080 --> 00:20:00,799
on azure

00:19:59,280 --> 00:20:03,360
um and we've been working with them

00:20:00,799 --> 00:20:05,679
upstream we're doing a lot of work

00:20:03,360 --> 00:20:07,039
in ovn kubernetes and in openshift

00:20:05,679 --> 00:20:09,520
getting all that working

00:20:07,039 --> 00:20:10,880
for various customers that need to do

00:20:09,520 --> 00:20:15,120
that

00:20:10,880 --> 00:20:17,039
um really the big networking news in

00:20:15,120 --> 00:20:18,720
openshift these days is ovn though i

00:20:17,039 --> 00:20:22,240
just talked about that so

00:20:18,720 --> 00:20:22,240
i think that's about it oh okay

00:20:29,760 --> 00:20:34,000
oh okay i can go next i work on network

00:20:32,640 --> 00:20:36,559
manager as i said

00:20:34,000 --> 00:20:38,799
and well network commands is a rather

00:20:36,559 --> 00:20:41,840
old project already

00:20:38,799 --> 00:20:43,600
but i i really have the feeling that

00:20:41,840 --> 00:20:46,840
each release kind of is better than

00:20:43,600 --> 00:20:49,600
before so i'm very happy about that

00:20:46,840 --> 00:20:50,799
and and i think that it's also

00:20:49,600 --> 00:20:53,600
attributed that we

00:20:50,799 --> 00:20:54,799
significantly improved our continuous

00:20:53,600 --> 00:20:59,840
integration and testing

00:20:54,799 --> 00:20:59,840
over the past years that

00:21:00,080 --> 00:21:04,159
that is not that is not a goal in itself

00:21:02,480 --> 00:21:06,799
but it really helps

00:21:04,159 --> 00:21:08,960
that our software i think works better

00:21:06,799 --> 00:21:11,039
and more reliable

00:21:08,960 --> 00:21:12,480
what i what i think is the the great

00:21:11,039 --> 00:21:12,960
part here is that there are all these

00:21:12,480 --> 00:21:15,520
other

00:21:12,960 --> 00:21:16,559
components that that build on the api of

00:21:15,520 --> 00:21:19,760
network manager

00:21:16,559 --> 00:21:21,360
that is of course the ui but also for

00:21:19,760 --> 00:21:23,520
example there is cockpit and there is

00:21:21,360 --> 00:21:26,640
integration with ansible

00:21:23,520 --> 00:21:30,880
and we want to do more with openshift

00:21:26,640 --> 00:21:33,679
and and these layout products so

00:21:30,880 --> 00:21:34,799
i i think in our team we see network

00:21:33,679 --> 00:21:38,559
manager as this

00:21:34,799 --> 00:21:40,000
is part of that provides the api for

00:21:38,559 --> 00:21:43,200
configuring the network

00:21:40,000 --> 00:21:44,720
and and i'm happy about this

00:21:43,200 --> 00:21:46,240
this position i think it's right that

00:21:44,720 --> 00:21:51,200
there is one component

00:21:46,240 --> 00:21:53,360
that that provides it i mean

00:21:51,200 --> 00:21:55,120
it provides something on top of what the

00:21:53,360 --> 00:21:57,840
kernel directly does because

00:21:55,120 --> 00:21:59,760
in kernel you just configure the current

00:21:57,840 --> 00:22:00,559
networking interfaces and the ib

00:21:59,760 --> 00:22:03,840
addresses

00:22:00,559 --> 00:22:07,440
but that's all just for the moment

00:22:03,840 --> 00:22:09,679
but then you need ways to persist this

00:22:07,440 --> 00:22:12,720
and for that network match provides an

00:22:09,679 --> 00:22:14,880
api that is based on profiles

00:22:12,720 --> 00:22:14,880
and

00:22:15,760 --> 00:22:20,640
and i think it needs to be one central

00:22:19,120 --> 00:22:23,520
api in the sense that

00:22:20,640 --> 00:22:25,600
different components use the same use

00:22:23,520 --> 00:22:29,440
the same

00:22:25,600 --> 00:22:31,440
api so that they

00:22:29,440 --> 00:22:33,679
that when you configure something say

00:22:31,440 --> 00:22:36,880
with cockpit or with the ansible

00:22:33,679 --> 00:22:40,000
that it touches the same things

00:22:36,880 --> 00:22:42,880
so yes that's

00:22:40,000 --> 00:22:42,880
what i enjoy

00:22:53,039 --> 00:22:55,840
i think you're muted

00:22:57,440 --> 00:23:01,039
uh i'll speak a little bit about what's

00:22:59,120 --> 00:23:02,240
going on in in some of the platform

00:23:01,039 --> 00:23:04,640
areas

00:23:02,240 --> 00:23:05,760
uh as we all know intel is delayed at

00:23:04,640 --> 00:23:07,919
seven nanometer

00:23:05,760 --> 00:23:09,840
uh for a little while so they're putting

00:23:07,919 --> 00:23:13,600
some of those features into

00:23:09,840 --> 00:23:15,520
and existing uh processors

00:23:13,600 --> 00:23:18,159
things like we're seeing with cpu

00:23:15,520 --> 00:23:20,000
frequency enhancements things like uh

00:23:18,159 --> 00:23:23,280
speed select technology

00:23:20,000 --> 00:23:26,400
which instead of just allowing

00:23:23,280 --> 00:23:29,840
an entire processor or entire core

00:23:26,400 --> 00:23:30,960
to uh ramp up its frequency or decrease

00:23:29,840 --> 00:23:33,520
its frequency

00:23:30,960 --> 00:23:34,480
we're now have the ability to have user

00:23:33,520 --> 00:23:39,120
selected

00:23:34,480 --> 00:23:41,039
cores rise to user selected frequencies

00:23:39,120 --> 00:23:42,880
and it's even more than that you can you

00:23:41,039 --> 00:23:46,000
can modify the heuristic

00:23:42,880 --> 00:23:46,559
to work the way you wanted to we're

00:23:46,000 --> 00:23:50,400
seeing

00:23:46,559 --> 00:23:51,279
areas some areas of work in smartnets

00:23:50,400 --> 00:23:54,480
getting rel

00:23:51,279 --> 00:23:58,080
onto both the offload cpu

00:23:54,480 --> 00:24:01,279
and getting the rel os

00:23:58,080 --> 00:24:04,080
uh involved there and vme and

00:24:01,279 --> 00:24:05,840
storage things like persistent memory i

00:24:04,080 --> 00:24:08,480
know we've tossed around the

00:24:05,840 --> 00:24:10,480
nvme phrase for years but it's now

00:24:08,480 --> 00:24:11,760
becoming really much more of a thing

00:24:10,480 --> 00:24:15,200
that we're seeing uh

00:24:11,760 --> 00:24:17,039
even in lower end servers there's a lot

00:24:15,200 --> 00:24:18,880
of effort around here about edge

00:24:17,039 --> 00:24:22,240
computing

00:24:18,880 --> 00:24:25,360
going out to the edge and making sure

00:24:22,240 --> 00:24:27,440
rel and linux runs securely

00:24:25,360 --> 00:24:30,159
in those areas so there's a lot of

00:24:27,440 --> 00:24:33,840
security work going on there

00:24:30,159 --> 00:24:36,159
we also uh i i noticed this in the title

00:24:33,840 --> 00:24:38,640
it's called system engineering and heart

00:24:36,159 --> 00:24:39,200
system engineering and hardware i almost

00:24:38,640 --> 00:24:42,159
wish

00:24:39,200 --> 00:24:42,880
i had a moment to yell at aaron and say

00:24:42,159 --> 00:24:44,840
hey

00:24:42,880 --> 00:24:46,720
change it to systems engineering and

00:24:44,840 --> 00:24:49,360
platform

00:24:46,720 --> 00:24:50,240
we're no longer just doing hardware here

00:24:49,360 --> 00:24:53,279
we haven't been

00:24:50,240 --> 00:24:56,799
for gosh

00:24:53,279 --> 00:25:00,000
10 years i'd say we are a virtual

00:24:56,799 --> 00:25:03,360
virtualization company we do deal with

00:25:00,000 --> 00:25:04,159
partner uh uh virtualization platforms

00:25:03,360 --> 00:25:06,320
aws

00:25:04,159 --> 00:25:07,919
for example runs uh some of their

00:25:06,320 --> 00:25:11,120
systems run rel

00:25:07,919 --> 00:25:14,159
um you know uh it's it's actually

00:25:11,120 --> 00:25:16,080
a big piece here at red hat

00:25:14,159 --> 00:25:18,799
to note that you can run in virtualized

00:25:16,080 --> 00:25:21,840
environments containers etc

00:25:18,799 --> 00:25:22,640
so uh there's a lot going on in platform

00:25:21,840 --> 00:25:26,000
and it's a

00:25:22,640 --> 00:25:26,000
constant change here

00:25:27,679 --> 00:25:31,840
so just so that you don't stay mad at me

00:25:29,679 --> 00:25:33,600
that system's engineering and hardware

00:25:31,840 --> 00:25:35,840
is actually the name of the track not

00:25:33,600 --> 00:25:38,320
the session so it's not my oh is it

00:25:35,840 --> 00:25:40,240
is it yeah yeah is it who do i have to

00:25:38,320 --> 00:25:41,440
yell at to get them to change that next

00:25:40,240 --> 00:25:45,279
year

00:25:41,440 --> 00:25:48,159
i i don't know someone maybe irvaki yeah

00:25:45,279 --> 00:25:49,520
um i guess i can answer that question as

00:25:48,159 --> 00:25:51,120
well a little bit from the

00:25:49,520 --> 00:25:52,640
ovs side since we talked a little bit

00:25:51,120 --> 00:25:56,400
about it one of the cool things

00:25:52,640 --> 00:26:01,279
from the more recent ovs releases

00:25:56,400 --> 00:26:05,120
is this support for like af xdp

00:26:01,279 --> 00:26:06,960
interrupt mode on af xdp ports

00:26:05,120 --> 00:26:08,640
so that's like kind of cool you can

00:26:06,960 --> 00:26:10,400
actually

00:26:08,640 --> 00:26:12,320
integrate with the cool buzzword

00:26:10,400 --> 00:26:12,960
technology that the that the kernel

00:26:12,320 --> 00:26:16,559
exposes

00:26:12,960 --> 00:26:19,679
it's actually quite neat um this xtp

00:26:16,559 --> 00:26:21,679
uh interface for uh or or

00:26:19,679 --> 00:26:24,320
api i don't really know what the best

00:26:21,679 --> 00:26:27,679
way of calling it is but um

00:26:24,320 --> 00:26:32,559
framework um yeah

00:26:27,679 --> 00:26:32,559
so that's kind of neat from the ovs side

00:26:36,799 --> 00:26:41,440
there's a question how will smartnix

00:26:38,880 --> 00:26:43,760
within os embedded enable new platforms

00:26:41,440 --> 00:26:44,720
workloads uh so this is something that

00:26:43,760 --> 00:26:47,919
that we are

00:26:44,720 --> 00:26:51,520
keeping track of in openshift um

00:26:47,919 --> 00:26:53,520
so ovn kubernetes the project to use obn

00:26:51,520 --> 00:26:54,559
as a network plug-in for kubernetes and

00:26:53,520 --> 00:26:57,600
openshift

00:26:54,559 --> 00:26:58,799
was mostly started by people at nvidia

00:26:57,600 --> 00:27:00,240
who were

00:26:58,799 --> 00:27:02,559
they're doing something with like giant

00:27:00,240 --> 00:27:04,000
clusters of gpus or something

00:27:02,559 --> 00:27:06,000
but they're really excited about smart

00:27:04,000 --> 00:27:08,559
knicks and have been

00:27:06,000 --> 00:27:10,080
working on support for for that inovy

00:27:08,559 --> 00:27:12,240
and kubernetes with

00:27:10,080 --> 00:27:14,960
i think malinox has cards that actually

00:27:12,240 --> 00:27:17,840
run ovs on the nick

00:27:14,960 --> 00:27:18,880
entirely so that you can just offload

00:27:17,840 --> 00:27:21,760
all of your

00:27:18,880 --> 00:27:24,080
flow processing to the nic rather than

00:27:21,760 --> 00:27:25,440
having to do any of it in cpu

00:27:24,080 --> 00:27:27,360
and so they've been making sure that

00:27:25,440 --> 00:27:29,679
that obn supports that which

00:27:27,360 --> 00:27:31,279
i'm pretty sure it does like just the

00:27:29,679 --> 00:27:32,720
current code and get mastered the way we

00:27:31,279 --> 00:27:35,520
deploy it in

00:27:32,720 --> 00:27:36,399
openshift right now that won't work but

00:27:35,520 --> 00:27:38,320
we have a

00:27:36,399 --> 00:27:40,240
enhancement proposal open to get that

00:27:38,320 --> 00:27:49,840
working for 4.7

00:27:40,240 --> 00:27:49,840
i think

00:27:50,159 --> 00:27:55,200
thomas does network manager have any uh

00:27:53,440 --> 00:27:58,559
like special knobs or anything to

00:27:55,200 --> 00:27:58,559
integrate with any smartnics

00:28:00,399 --> 00:28:05,279
not really it just uses the the kernel

00:28:03,679 --> 00:28:07,520
abstracts this for them for the most

00:28:05,279 --> 00:28:10,960
part so

00:28:07,520 --> 00:28:11,919
no it doesn't also because it doesn't

00:28:10,960 --> 00:28:15,279
configure like

00:28:11,919 --> 00:28:18,320
flows directly for that you would

00:28:15,279 --> 00:28:18,320
you would need obs

00:28:27,840 --> 00:28:31,679
well network manager can configure open

00:28:29,760 --> 00:28:32,159
v-switch but it doesn't configure the

00:28:31,679 --> 00:28:45,840
flows

00:28:32,159 --> 00:28:45,840
itself right

00:28:47,440 --> 00:28:52,559
yeah i guess it just sets up bridges and

00:28:50,399 --> 00:28:55,200
and ports

00:28:52,559 --> 00:28:55,200
that's about it

00:28:57,360 --> 00:29:01,360
so this question was how this enables

00:28:59,039 --> 00:29:03,360
new platforms and workloads and well i

00:29:01,360 --> 00:29:05,840
don't know exactly other than by being

00:29:03,360 --> 00:29:05,840
faster

00:29:11,279 --> 00:29:16,799
are this so david asks

00:29:14,720 --> 00:29:17,840
is there a strong relationship between

00:29:16,799 --> 00:29:21,039
ovs and

00:29:17,840 --> 00:29:24,480
ansible like network manager

00:29:21,039 --> 00:29:26,399
um not that i'm aware i don't know that

00:29:24,480 --> 00:29:28,720
there's anything that uh

00:29:26,399 --> 00:29:30,080
i don't know that there's any like

00:29:28,720 --> 00:29:32,880
ansible

00:29:30,080 --> 00:29:33,279
module or plug-in or anything like that

00:29:32,880 --> 00:29:37,760
that

00:29:33,279 --> 00:29:37,760
is tightly coupled to ovs

00:29:39,360 --> 00:29:42,480
there is a module okay

00:29:43,279 --> 00:29:48,240
yeah i know like for us um

00:29:46,559 --> 00:29:50,480
so the biggest thing that's configuring

00:29:48,240 --> 00:29:53,679
ovs right now is ovn

00:29:50,480 --> 00:29:54,640
and so a lot of the projects speak to

00:29:53,679 --> 00:29:58,399
ovn

00:29:54,640 --> 00:30:01,840
so for instance like openstack

00:29:58,399 --> 00:30:05,600
and openshift they

00:30:01,840 --> 00:30:07,200
they sort of program up ovn and then ovn

00:30:05,600 --> 00:30:10,960
goes and programs up

00:30:07,200 --> 00:30:11,760
uh ovs so i don't know that there i

00:30:10,960 --> 00:30:14,799
don't know that

00:30:11,760 --> 00:30:23,840
i don't know what ansible

00:30:14,799 --> 00:30:23,840
projects are are doing

00:30:52,799 --> 00:30:59,279
okay nm state supports ovs and has some

00:30:56,000 --> 00:30:59,919
ansible support okay cool does that

00:30:59,279 --> 00:31:02,799
include

00:30:59,919 --> 00:31:05,840
programming flows sorry now i'm asking

00:31:02,799 --> 00:31:05,840
you questions

00:31:11,440 --> 00:31:17,679
okay just what nm supports okay

00:31:15,840 --> 00:31:33,840
possible there are as many experts in

00:31:17,679 --> 00:31:33,840
the audience as their panel

00:31:55,039 --> 00:31:59,440
all right here's a question since i

00:31:57,120 --> 00:32:03,760
don't see one posted yet

00:31:59,440 --> 00:32:06,799
what is uh what's a uh difficult

00:32:03,760 --> 00:32:09,120
systems or networking problem that you

00:32:06,799 --> 00:32:11,279
uh ran into that you were never able to

00:32:09,120 --> 00:32:12,720
solve

00:32:11,279 --> 00:32:14,480
i guess it's like an interview question

00:32:12,720 --> 00:32:16,880
too but like

00:32:14,480 --> 00:32:16,880
why not

00:32:20,559 --> 00:32:26,159
i want to hear what weyman's answer is

00:32:24,080 --> 00:32:28,080
he's so everybody knows he's known as

00:32:26,159 --> 00:32:29,760
one of the best engineers at red hat and

00:32:28,080 --> 00:32:30,240
if there's a problem that he can't solve

00:32:29,760 --> 00:32:31,840
i

00:32:30,240 --> 00:32:35,600
i would really like to hear what his

00:32:31,840 --> 00:32:38,880
answer is um

00:32:35,600 --> 00:32:42,480
well i

00:32:38,880 --> 00:32:44,680
um i

00:32:42,480 --> 00:32:47,829
can't think of any at the moment um

00:32:44,680 --> 00:32:47,829
[Music]

00:32:48,000 --> 00:32:52,000
you were high enough um you have at

00:32:50,880 --> 00:32:56,159
least

00:32:52,000 --> 00:32:59,039
some way to either wear one here um

00:32:56,159 --> 00:33:00,000
or possibly adjust it i i will not say

00:32:59,039 --> 00:33:02,000
that

00:33:00,000 --> 00:33:03,200
you are able to solve every every

00:33:02,000 --> 00:33:06,559
problem that you have

00:33:03,200 --> 00:33:09,679
but you just try your best to to

00:33:06,559 --> 00:33:10,799
make the best out of it okay that that

00:33:09,679 --> 00:33:13,360
is my

00:33:10,799 --> 00:33:14,640
my philosophy yeah yeah there's some

00:33:13,360 --> 00:33:17,120
there always something you can do

00:33:14,640 --> 00:33:18,880
but it may not completely address the

00:33:17,120 --> 00:33:21,679
issue or address the problem

00:33:18,880 --> 00:33:22,080
but at least uh give the customer some

00:33:21,679 --> 00:33:25,279
way

00:33:22,080 --> 00:33:27,840
to one year or handle it

00:33:25,279 --> 00:33:27,840
in some way

00:33:29,440 --> 00:33:32,720
you know wayman that's that's very

00:33:31,360 --> 00:33:35,919
profound i

00:33:32,720 --> 00:33:38,000
i think that a lot of our a lot of

00:33:35,919 --> 00:33:41,360
engineers get stuck in the trap

00:33:38,000 --> 00:33:45,360
of i have to provide a solution

00:33:41,360 --> 00:33:47,919
and at times there may not be a solution

00:33:45,360 --> 00:33:48,559
a perfect solution and getting something

00:33:47,919 --> 00:33:51,039
that just

00:33:48,559 --> 00:33:52,000
works or at least works around a problem

00:33:51,039 --> 00:33:54,640
that a customer

00:33:52,000 --> 00:33:55,039
or partner may have is very important

00:33:54,640 --> 00:33:57,279
and

00:33:55,039 --> 00:33:58,799
to be able to articulate that this isn't

00:33:57,279 --> 00:34:02,640
a perfect solution

00:33:58,799 --> 00:34:05,200
is also very important uh

00:34:02,640 --> 00:34:06,000
there are tons of cases at red hat that

00:34:05,200 --> 00:34:09,200
we deal with

00:34:06,000 --> 00:34:10,240
that are like that um but in my case it

00:34:09,200 --> 00:34:13,599
tends to a lot be

00:34:10,240 --> 00:34:15,200
due to broken firmware uh no one no

00:34:13,599 --> 00:34:17,119
customer or partner likes to hear that

00:34:15,200 --> 00:34:20,079
their firmware is broken

00:34:17,119 --> 00:34:21,359
uh but i have to say that a lot of times

00:34:20,079 --> 00:34:23,440
and that the only fix

00:34:21,359 --> 00:34:35,839
the only real fix they can have is to

00:34:23,440 --> 00:34:35,839
update their firmware

00:34:40,079 --> 00:34:44,320
for me it is sometimes to find to model

00:34:43,440 --> 00:34:48,720
a problem like

00:34:44,320 --> 00:34:52,240
networking configuration that should be

00:34:48,720 --> 00:34:54,639
that should well you want to have

00:34:52,240 --> 00:34:56,639
an api to configure all the network but

00:34:54,639 --> 00:34:59,839
there is quite a lot of diversity

00:34:56,639 --> 00:35:02,400
in the in the technologies and the work

00:34:59,839 --> 00:35:03,040
and then you up to abstract this so that

00:35:02,400 --> 00:35:04,720
you can both

00:35:03,040 --> 00:35:07,920
implement it and say wow this is nice

00:35:04,720 --> 00:35:10,160
and simple and also that the api of

00:35:07,920 --> 00:35:12,160
the result of it is actually use useful

00:35:10,160 --> 00:35:17,839
and powerful at the same time

00:35:12,160 --> 00:35:17,839
so this i think is pretty hard

00:35:38,720 --> 00:35:44,800
okay this one is from marcelo to

00:35:42,079 --> 00:35:46,079
thomas how are things going in regards

00:35:44,800 --> 00:35:48,960
to network manager

00:35:46,079 --> 00:35:48,960
and network d

00:35:50,960 --> 00:35:56,800
uh i think they are going well the

00:35:54,240 --> 00:35:57,520
well for example we don't cooperate so

00:35:56,800 --> 00:35:59,440
much

00:35:57,520 --> 00:36:02,800
but for example network manager consumes

00:35:59,440 --> 00:36:07,119
quite a lot of source code of system b

00:36:02,800 --> 00:36:09,440
to use the dhcp client from network d

00:36:07,119 --> 00:36:11,440
currently that currently systemd doesn't

00:36:09,440 --> 00:36:14,079
provide this as a

00:36:11,440 --> 00:36:14,480
proper library but instead we kind of

00:36:14,079 --> 00:36:18,079
fork

00:36:14,480 --> 00:36:19,520
parts of it so it's that is actually

00:36:18,079 --> 00:36:22,720
quite useful

00:36:19,520 --> 00:36:24,720
i i think we also we didn't only use

00:36:22,720 --> 00:36:25,359
that we also provided uh batches for

00:36:24,720 --> 00:36:28,720
systemd

00:36:25,359 --> 00:36:28,720
for this for this part

00:36:29,200 --> 00:36:32,880
other than that i think the network

00:36:31,359 --> 00:36:35,040
manager network d

00:36:32,880 --> 00:36:36,800
have a different focus and do different

00:36:35,040 --> 00:36:40,880
things

00:36:36,800 --> 00:36:42,800
so both i think both projects have their

00:36:40,880 --> 00:36:47,200
value

00:36:42,800 --> 00:36:47,200
but are not directly yeah

00:36:48,320 --> 00:36:51,599
on rel for example we currently don't

00:36:49,839 --> 00:36:55,839
support systemd network d

00:36:51,599 --> 00:36:59,599
it's it's excluded on rail aid

00:36:55,839 --> 00:37:01,440
because uh well

00:36:59,599 --> 00:37:03,359
i guess the answer is that we that we

00:37:01,440 --> 00:37:06,880
want to focus our effort

00:37:03,359 --> 00:37:09,440
in one solution and that

00:37:06,880 --> 00:37:11,520
that it's that it would be better if we

00:37:09,440 --> 00:37:14,240
had one solution that works for

00:37:11,520 --> 00:37:15,280
a variety of scenarios instead of having

00:37:14,240 --> 00:37:19,200
two solutions

00:37:15,280 --> 00:37:19,200
that both have still their own uh

00:37:20,839 --> 00:37:23,839
downsides

00:37:26,720 --> 00:37:30,240
yes i don't know if that answered the

00:37:34,839 --> 00:37:37,839
question

00:37:49,440 --> 00:37:53,520
we do rely on a lot of system d uh

00:37:52,320 --> 00:37:55,760
components right

00:37:53,520 --> 00:37:59,440
i mean we really like system the resolve

00:37:55,760 --> 00:38:02,960
d which will be the default on fedora 33

00:37:59,440 --> 00:38:05,200
and and newer and

00:38:02,960 --> 00:38:06,400
we also use systemd hostname d and of

00:38:05,200 --> 00:38:09,680
course on red we run

00:38:06,400 --> 00:38:10,800
ss systemd service so in general we

00:38:09,680 --> 00:38:13,599
think systemd

00:38:10,800 --> 00:38:14,960
does great things but there is a

00:38:13,599 --> 00:38:19,839
function overlapped with

00:38:14,960 --> 00:38:19,839
what network d does

00:38:55,680 --> 00:38:59,040
all right is there anything anyone's

00:38:57,440 --> 00:39:01,359
looking forward to

00:38:59,040 --> 00:39:02,400
uh in the future that they that they see

00:39:01,359 --> 00:39:14,320
coming up some new

00:39:02,400 --> 00:39:15,920
cool piece of technology

00:39:14,320 --> 00:39:17,760
this is more of an old piece of

00:39:15,920 --> 00:39:20,480
technology but we we

00:39:17,760 --> 00:39:21,839
will now be supporting sctp in in

00:39:20,480 --> 00:39:24,000
openshift

00:39:21,839 --> 00:39:29,839
so all of you who were looking forward

00:39:24,000 --> 00:39:29,839
to that

00:39:36,880 --> 00:39:43,839
excited at least

00:39:58,640 --> 00:40:04,800
i am quite excited about it enemy state

00:40:01,760 --> 00:40:08,079
it's it's a new project which and it

00:40:04,800 --> 00:40:11,599
i think it shows a lot of promise there

00:40:08,079 --> 00:40:14,400
is also a presentation by by fernando

00:40:11,599 --> 00:40:17,200
about enemy state on defcon i just don't

00:40:14,400 --> 00:40:17,200
know the time now

00:40:23,599 --> 00:40:27,200
i'm i'm actually even though this isn't

00:40:25,839 --> 00:40:29,119
purely a uh

00:40:27,200 --> 00:40:30,560
systems engineering issue and i

00:40:29,119 --> 00:40:33,119
mentioned it before

00:40:30,560 --> 00:40:34,560
i'm really looking forward to to center

00:40:33,119 --> 00:40:38,880
center stream

00:40:34,560 --> 00:40:41,920
um it's going to bring a lot of

00:40:38,880 --> 00:40:53,839
non-traditional partners to the table

00:40:41,920 --> 00:40:53,839
for red hat to deal with the hardware

00:41:30,560 --> 00:41:35,520
so the question from ali is

00:41:33,760 --> 00:41:37,599
i have a modified linux kernel that

00:41:35,520 --> 00:41:40,720
works great on qmu

00:41:37,599 --> 00:41:42,640
but not on hardware what tips

00:41:40,720 --> 00:41:46,400
might you have for testing linux on

00:41:42,640 --> 00:41:46,400
hardware and debugging it there

00:41:46,960 --> 00:41:52,000
ali uh uh hopefully we can

00:41:50,240 --> 00:41:53,920
you can just type your answers do you

00:41:52,000 --> 00:41:55,040
are you getting far enough to get output

00:41:53,920 --> 00:42:03,839
from the kernel

00:41:55,040 --> 00:42:03,839
uh or is it stuck in early boot

00:42:04,400 --> 00:42:09,200
so i guess there's output coming

00:42:13,359 --> 00:42:16,960
let's turn it on the application comes

00:42:14,960 --> 00:42:18,640
up okay

00:42:16,960 --> 00:42:20,240
so when you boot it on hardware one of

00:42:18,640 --> 00:42:23,359
the things you can do to find out

00:42:20,240 --> 00:42:25,839
what what component uh there's

00:42:23,359 --> 00:42:28,000
there's a couple of steps here while

00:42:25,839 --> 00:42:31,839
running the application on this modified

00:42:28,000 --> 00:42:31,839
kernel it barfs

00:42:32,240 --> 00:42:47,280
i see so it's a vanilla

00:42:44,000 --> 00:42:48,720
hi uh can you hear me yep i

00:42:47,280 --> 00:42:50,319
i think i thought it was better if i

00:42:48,720 --> 00:42:53,839
just uh connected directly

00:42:50,319 --> 00:42:56,800
so yeah uh the application comes up

00:42:53,839 --> 00:42:58,000
and while running and running it on this

00:42:56,800 --> 00:43:01,200
modified hardware

00:42:58,000 --> 00:43:01,520
it works i can see uh you know a couple

00:43:01,200 --> 00:43:04,880
of

00:43:01,520 --> 00:43:07,040
cpus are uh stuck so that

00:43:04,880 --> 00:43:08,160
that gives me a problem after like 22

00:43:07,040 --> 00:43:12,240
seconds i

00:43:08,160 --> 00:43:14,960
can see a few uh page faults uh

00:43:12,240 --> 00:43:15,760
but what i'm actually looking for is the

00:43:14,960 --> 00:43:19,280
way i can

00:43:15,760 --> 00:43:22,319
debug it on qmu i can connect uh

00:43:19,280 --> 00:43:24,640
gdb to from the outside

00:43:22,319 --> 00:43:25,599
i can take memory dumps and look at it

00:43:24,640 --> 00:43:28,240
through the

00:43:25,599 --> 00:43:28,960
crash utility how do i do that on

00:43:28,240 --> 00:43:30,720
hardware

00:43:28,960 --> 00:43:32,960
or do you have any tips for doing those

00:43:30,720 --> 00:43:32,960
things

00:43:33,359 --> 00:43:40,160
so there is a cr there is kdump uh

00:43:36,560 --> 00:43:43,599
that uh we have on in uh

00:43:40,160 --> 00:43:47,040
all the uh rel related kernel centos uh

00:43:43,599 --> 00:43:48,160
fedora and rel so when when the system

00:43:47,040 --> 00:43:50,319
does panic

00:43:48,160 --> 00:43:51,680
uh you should be able to collect kdump

00:43:50,319 --> 00:43:54,960
and there's a utility called

00:43:51,680 --> 00:43:55,680
crash which you can use to run on that

00:43:54,960 --> 00:43:58,960
ktm

00:43:55,680 --> 00:44:01,599
there's a lot of documentation about it

00:43:58,960 --> 00:44:01,599
on uh

00:44:02,720 --> 00:44:05,839
tons of websites i think if you just do

00:44:04,880 --> 00:44:08,240
a search for

00:44:05,839 --> 00:44:09,119
uh how to debug the fedora kernel with

00:44:08,240 --> 00:44:10,960
crash

00:44:09,119 --> 00:44:13,440
you'll come across a couple of good hits

00:44:10,960 --> 00:44:16,960
about that yes i've used crash before

00:44:13,440 --> 00:44:16,960
through qmu memory dumps yes

00:44:19,359 --> 00:44:23,680
can i ask the nature of the changes you

00:44:21,359 --> 00:44:25,520
made uh so this is regarding the

00:44:23,680 --> 00:44:26,880
unikernel linux project which i'll be

00:44:25,520 --> 00:44:28,640
presenting today uh

00:44:26,880 --> 00:44:30,319
as well so this is basically the

00:44:28,640 --> 00:44:32,240
application linked in directly with

00:44:30,319 --> 00:44:33,760
nglipsy linkedin directly with the

00:44:32,240 --> 00:44:36,960
kernel uh

00:44:33,760 --> 00:44:38,800
so everything runs in ring zero uh and

00:44:36,960 --> 00:44:40,800
when this application comes up it starts

00:44:38,800 --> 00:44:44,240
running it's a memcache d application

00:44:40,800 --> 00:44:47,119
uh when we increase the load

00:44:44,240 --> 00:44:48,960
on the system uh then i see all these

00:44:47,119 --> 00:44:51,839
behaviors that i do not see

00:44:48,960 --> 00:44:54,319
on qmu so the way i have been debugging

00:44:51,839 --> 00:44:55,760
it on qmu is i can see all the

00:44:54,319 --> 00:44:57,599
symbols all the application symbols

00:44:55,760 --> 00:45:00,079
g-loopsy symbols kernel symbols

00:44:57,599 --> 00:45:01,680
on qmu i can take memory dumps and look

00:45:00,079 --> 00:45:05,040
at it through

00:45:01,680 --> 00:45:05,920
crash utility but on hardware i'm just

00:45:05,040 --> 00:45:08,480
starting out

00:45:05,920 --> 00:45:11,200
and that i am there's no place for me

00:45:08,480 --> 00:45:11,200
actually to start

00:45:11,359 --> 00:45:15,200
i see the uh

00:45:16,000 --> 00:45:20,000
trying to think of what else i could

00:45:17,119 --> 00:45:24,079
give you um

00:45:20,000 --> 00:45:26,240
um may i suggest something um

00:45:24,079 --> 00:45:27,760
do the links can you say a lot of debug

00:45:26,240 --> 00:45:33,680
capability

00:45:27,760 --> 00:45:36,400
uh if you are

00:45:33,680 --> 00:45:36,960
uh and then we on the hardware and see

00:45:36,400 --> 00:45:39,280
what

00:45:36,960 --> 00:45:40,319
sort of um different messages they gave

00:45:39,280 --> 00:45:43,359
you you may

00:45:40,319 --> 00:45:44,319
even give you some hint on what the

00:45:43,359 --> 00:45:46,800
problem is

00:45:44,319 --> 00:45:48,480
for instance in where we ship two cell

00:45:46,800 --> 00:45:49,520
kernel we have a regular production

00:45:48,480 --> 00:45:51,440
kernel

00:45:49,520 --> 00:45:52,560
this is for performance and then we have

00:45:51,440 --> 00:45:55,839
a debug kernel

00:45:52,560 --> 00:45:59,200
that um provides a lot more

00:45:55,839 --> 00:46:00,800
debugging within message um to to

00:45:59,200 --> 00:46:02,720
allow you to figure out if there's

00:46:00,800 --> 00:46:03,839
something wrong with the system or the

00:46:02,720 --> 00:46:06,880
hardware

00:46:03,839 --> 00:46:07,440
and also one thing is um for qmu they

00:46:06,880 --> 00:46:10,480
provide

00:46:07,440 --> 00:46:11,520
you only a set of very simplified mla

00:46:10,480 --> 00:46:14,319
hardware

00:46:11,520 --> 00:46:15,200
on real hardware yeah a lot more devices

00:46:14,319 --> 00:46:18,319
and

00:46:15,200 --> 00:46:19,680
and stuff that that you won't hit uh in

00:46:18,319 --> 00:46:22,079
the qemu environment

00:46:19,680 --> 00:46:22,960
that may be reason why you you are

00:46:22,079 --> 00:46:26,079
having problem

00:46:22,960 --> 00:46:28,800
with putting on the on your hardware

00:46:26,079 --> 00:46:29,760
all right that is something that the tv

00:46:28,800 --> 00:46:32,079
didn't emulate

00:46:29,760 --> 00:46:32,800
so you won't you don't see it when you

00:46:32,079 --> 00:46:36,960
put from

00:46:32,800 --> 00:46:36,960
pvmu great i understand

00:46:37,040 --> 00:46:40,880
all right so avashi let us know that

00:46:39,599 --> 00:46:42,160
there is a breakout room

00:46:40,880 --> 00:46:44,400
for anyone that wants to continue the

00:46:42,160 --> 00:46:47,280
discussion uh thank you

00:46:44,400 --> 00:46:48,560
all the panelists and thank you all the

00:46:47,280 --> 00:46:50,319
participants

00:46:48,560 --> 00:46:52,480
yeah thank you all so much for the

00:46:50,319 --> 00:46:54,560
session i definitely learned a lot

00:46:52,480 --> 00:46:56,240
as erin mentioned we have breakout rooms

00:46:54,560 --> 00:46:57,839
under the expo tab for each track if you

00:46:56,240 --> 00:46:59,119
want to continue conversations there

00:46:57,839 --> 00:47:00,480
please feel free to go there you can

00:46:59,119 --> 00:47:02,079
share audio and video

00:47:00,480 --> 00:47:04,000
we have more track and more sessions

00:47:02,079 --> 00:47:05,520
coming up in this track from 12 50 pm

00:47:04,000 --> 00:47:07,040
onwards so we'll see you back here at

00:47:05,520 --> 00:47:10,880
that time it's break time now

00:47:07,040 --> 00:47:10,880

YouTube URL: https://www.youtube.com/watch?v=vCjvtEm86tY


