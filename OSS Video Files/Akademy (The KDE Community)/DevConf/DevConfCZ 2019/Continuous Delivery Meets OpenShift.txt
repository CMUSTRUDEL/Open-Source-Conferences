Title: Continuous Delivery Meets OpenShift
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Continuous Delivery Meets OpenShift
Speakers: Shiyang Wang, Yuxiang Zhu
Description:  This presentation will introduce why continuous delivery matters for a software, and give a complete container-based continuous delivery pipelines implementation that is used in Red Hat PnT DevOps Factory 2.0 project.
Highlights:
- fully on OpenShift, supporting scaling-out with workload growth
- using pure Red Hat technologies
- accelerated by parallel runs
- pipeline as code, deployed as OpenShift apps
- automatically proceeding to the next stage in the pipeline
- ensure products are mutually compatible as container changes
A functional demo and major technical details will also be covered.

Attendees will learn the background and basic concept about continuous delivery, and get an overview of how Red Hat internally runs continuous delivery pipelines for products on OpenShift.
[ https://sched.co/Jcfu ]
Captions: 
	00:00:05,149 --> 00:00:13,290
hello everyone my name is Shyam and my

00:00:10,320 --> 00:00:16,289
colleagues here he's from his genre we

00:00:13,290 --> 00:00:19,679
post from Beijing office so today's

00:00:16,289 --> 00:00:23,970
topic is about continuous delivery myths

00:00:19,679 --> 00:00:26,369
open shift if you were developers and I

00:00:23,970 --> 00:00:31,439
think you must be familiar with the CI

00:00:26,369 --> 00:00:35,610
CD maybe OpenShift so today we want to

00:00:31,439 --> 00:00:39,090
talk about more about arahat how we use

00:00:35,610 --> 00:00:42,540
the continuous delivery plus open

00:00:39,090 --> 00:00:46,560
shipped and the presentation will be

00:00:42,540 --> 00:00:49,410
split into two parts first part I want

00:00:46,560 --> 00:00:52,970
to talk a little bit more about before

00:00:49,410 --> 00:00:56,790
we moving the to the O in the open shift

00:00:52,970 --> 00:00:59,580
what's the problem we had and the second

00:00:56,790 --> 00:01:02,090
part my colleague Lucia is from pienty

00:00:59,580 --> 00:01:06,689
DevOps he will talk a little bit more

00:01:02,090 --> 00:01:09,060
about the how the ways of the problem so

00:01:06,689 --> 00:01:12,780
without any further ado we can just jump

00:01:09,060 --> 00:01:16,770
into the problem there's two major

00:01:12,780 --> 00:01:19,409
problems I will break it down like in

00:01:16,770 --> 00:01:23,930
two different perspective so the first

00:01:19,409 --> 00:01:26,690
one is more related to the environments

00:01:23,930 --> 00:01:30,659
so you know traditional environments

00:01:26,690 --> 00:01:34,500
buck cannot be reproduced really easily

00:01:30,659 --> 00:01:37,799
for some historical reasons like some of

00:01:34,500 --> 00:01:41,940
our internal projects abrahan is a

00:01:37,799 --> 00:01:44,310
little bit hard to Cape Def and QE and

00:01:41,940 --> 00:01:48,930
the stage and the production environment

00:01:44,310 --> 00:01:52,110
similar so here's a story there's a

00:01:48,930 --> 00:01:54,750
developer he made some code change maybe

00:01:52,110 --> 00:01:57,420
is a future implementation here at the

00:01:54,750 --> 00:02:02,580
unit has function test integration tests

00:01:57,420 --> 00:02:06,510
and compile pass the CI CD and then he

00:02:02,580 --> 00:02:09,869
released then comes to the quality

00:02:06,510 --> 00:02:12,569
engineers responsibility he just fetched

00:02:09,869 --> 00:02:16,780
the release from maybe rpm or something

00:02:12,569 --> 00:02:20,370
but unfortunately he found a bug

00:02:16,780 --> 00:02:24,220
that's a little bit aside but since the

00:02:20,370 --> 00:02:27,430
precondition I mentioned before since

00:02:24,220 --> 00:02:30,300
the developers and the qyz they're not

00:02:27,430 --> 00:02:33,160
using or sharing the same environments

00:02:30,300 --> 00:02:34,360
their environments are different when

00:02:33,160 --> 00:02:37,750
the QE sub-meter

00:02:34,360 --> 00:02:41,620
bug may be on Bugzilla or something it's

00:02:37,750 --> 00:02:44,590
hard to reproduce for developers this

00:02:41,620 --> 00:02:47,860
could be a severe problem sometimes it

00:02:44,590 --> 00:02:51,160
may took like a couple four or five days

00:02:47,860 --> 00:02:53,800
back and forth they Curie and developer

00:02:51,160 --> 00:02:56,560
collaborate together to troubleshooting

00:02:53,800 --> 00:03:01,860
and figure out whether the issue is

00:02:56,560 --> 00:03:01,860
related to the environment or Co change

00:03:04,020 --> 00:03:09,640
so here comes the second one the

00:03:07,270 --> 00:03:13,390
traditional environments are hard to

00:03:09,640 --> 00:03:17,410
clone provide rebuild more or even

00:03:13,390 --> 00:03:20,230
delivery the same or same environment or

00:03:17,410 --> 00:03:22,690
mirror environment really easily so your

00:03:20,230 --> 00:03:26,860
customer may want to clone your

00:03:22,690 --> 00:03:29,980
environment for tasks you may want also

00:03:26,860 --> 00:03:31,930
like clone all the server's dependency

00:03:29,980 --> 00:03:36,370
which I will talk a little bit later of

00:03:31,930 --> 00:03:39,820
your project to the other teams and you

00:03:36,370 --> 00:03:43,720
know extremely condition like what if

00:03:39,820 --> 00:03:46,450
you're like environment lost due to the

00:03:43,720 --> 00:03:52,330
hardware failure is there any easy way

00:03:46,450 --> 00:03:55,350
to for you to rebuild so previously some

00:03:52,330 --> 00:03:59,380
of the team they had a really like long

00:03:55,350 --> 00:04:02,200
documentation TDS for step one two three

00:03:59,380 --> 00:04:04,980
four five to you know help you to how to

00:04:02,200 --> 00:04:08,470
rebuild the environment or clone work

00:04:04,980 --> 00:04:10,660
set up the crack environment some teams

00:04:08,470 --> 00:04:14,380
even better they automated with like

00:04:10,660 --> 00:04:17,500
scripting like automation tools like

00:04:14,380 --> 00:04:20,650
each team like reinvent the wheel

00:04:17,500 --> 00:04:24,160
this is not really good and even like

00:04:20,650 --> 00:04:25,870
there's a high level you know decision

00:04:24,160 --> 00:04:28,870
make like make all those tools

00:04:25,870 --> 00:04:30,460
consolidate into one sometimes that two

00:04:28,870 --> 00:04:32,740
is really hard for

00:04:30,460 --> 00:04:37,479
like each team fail there everybody's

00:04:32,740 --> 00:04:40,690
need so is there in a more generic way

00:04:37,479 --> 00:04:44,699
to solve this problem even with our like

00:04:40,690 --> 00:04:44,699
ready any tools or codes

00:04:47,460 --> 00:04:54,789
so the cert environment problem is some

00:04:53,080 --> 00:04:57,819
traditional environments sometimes

00:04:54,789 --> 00:05:03,330
lowering the performance and resource

00:04:57,819 --> 00:05:06,849
utilization so many of your team or

00:05:03,330 --> 00:05:12,849
projects may already have the you know

00:05:06,849 --> 00:05:15,880
pipeline for CI and some some of the CI

00:05:12,849 --> 00:05:19,240
a maybe your jinkers due to some reason

00:05:15,880 --> 00:05:23,710
you might have some fixed numbers of

00:05:19,240 --> 00:05:27,669
slaves and this is not really flexible

00:05:23,710 --> 00:05:31,539
sometimes and if you want to run let's

00:05:27,669 --> 00:05:33,909
say a destructive case maybe your slave

00:05:31,539 --> 00:05:37,169
is a VM and you have to wait the

00:05:33,909 --> 00:05:40,330
previous guy to finish up your test and

00:05:37,169 --> 00:05:44,289
recovering the whole environment so that

00:05:40,330 --> 00:05:48,849
you can occupy as a machine but ideally

00:05:44,289 --> 00:05:52,630
we wanna rehab we want to like use each

00:05:48,849 --> 00:05:55,479
machine as much as possible like we can

00:05:52,630 --> 00:06:00,159
run multiple jobs in one machine is VM

00:05:55,479 --> 00:06:05,460
or bare metal as simultaneously paralyze

00:06:00,159 --> 00:06:05,460
and use the resource as less as possible

00:06:08,099 --> 00:06:17,139
so the second problems I want to talk is

00:06:12,490 --> 00:06:20,710
more about the service dependencies as a

00:06:17,139 --> 00:06:24,159
service service dependency I didn't mean

00:06:20,710 --> 00:06:26,860
the openshift service or how good you

00:06:24,159 --> 00:06:29,409
feel about the waiter or waitress or see

00:06:26,860 --> 00:06:32,020
you last night and when I say the

00:06:29,409 --> 00:06:35,770
service dependencies I mean the macro

00:06:32,020 --> 00:06:38,969
service which is a kind of packs best

00:06:35,770 --> 00:06:43,390
practice for you to deploy your

00:06:38,969 --> 00:06:46,090
application in a cloud native way so in

00:06:43,390 --> 00:06:47,620
there's a huge company and when your

00:06:46,090 --> 00:06:50,710
projects getting bigger and bigger

00:06:47,620 --> 00:06:53,920
there's a lot of increasing macro

00:06:50,710 --> 00:06:57,490
service your service depends on service

00:06:53,920 --> 00:07:00,760
of someone else someone else service may

00:06:57,490 --> 00:07:03,820
be depends on yours how do you make sure

00:07:00,760 --> 00:07:05,850
an upgrade of the service will not break

00:07:03,820 --> 00:07:10,180
the others

00:07:05,850 --> 00:07:13,780
let me just like explain it more simpler

00:07:10,180 --> 00:07:17,140
maybe we have a downstream and a stream

00:07:13,780 --> 00:07:20,200
like two teams they why is workaround

00:07:17,140 --> 00:07:22,210
downstream and another working on the

00:07:20,200 --> 00:07:26,080
upstream you can also consider it as a

00:07:22,210 --> 00:07:29,350
two service dependencies so they're both

00:07:26,080 --> 00:07:31,390
pretty productive they like making Co

00:07:29,350 --> 00:07:34,420
change pretty frequently maybe I read a

00:07:31,390 --> 00:07:37,630
couple minutes and hours but due to the

00:07:34,420 --> 00:07:41,740
system complexity and a lot of like

00:07:37,630 --> 00:07:43,720
interleaved server dependencies the the

00:07:41,740 --> 00:07:46,450
release sometimes it could be really

00:07:43,720 --> 00:07:48,790
hard because you have to make sure all

00:07:46,450 --> 00:07:51,460
these components all those dependencies

00:07:48,790 --> 00:07:54,730
pass the CI and have to it's a

00:07:51,460 --> 00:07:57,820
complicated release process and usually

00:07:54,730 --> 00:08:01,630
sometimes took four or five days this

00:07:57,820 --> 00:08:04,390
difference sometimes to make like your

00:08:01,630 --> 00:08:09,280
code change will accumulate like four or

00:08:04,390 --> 00:08:12,430
five days so that each release will like

00:08:09,280 --> 00:08:16,780
accumulate a lot of code change this is

00:08:12,430 --> 00:08:20,950
not really good and sometimes is a high

00:08:16,780 --> 00:08:24,810
like risking tasks because according to

00:08:20,950 --> 00:08:30,070
the philosophy or best practice of

00:08:24,810 --> 00:08:33,880
continuous delivery we want each time

00:08:30,070 --> 00:08:36,370
like push make the codes as small as

00:08:33,880 --> 00:08:38,440
possible so that you can isolate the

00:08:36,370 --> 00:08:41,190
problem and troubleshooting more easily

00:08:38,440 --> 00:08:45,280
and the second one we want to release

00:08:41,190 --> 00:08:47,830
the code or make the release as frequent

00:08:45,280 --> 00:08:50,830
as possible even every minute so you can

00:08:47,830 --> 00:08:54,230
travel and fund roll and find a problem

00:08:50,830 --> 00:08:58,680
as soon as possible

00:08:54,230 --> 00:09:01,800
so with all those problems we had how do

00:08:58,680 --> 00:09:05,880
you solve it my colleague you John drew

00:09:01,800 --> 00:09:10,620
he will talk a little bit more all the

00:09:05,880 --> 00:09:34,200
pnt develops ways of this problem from

00:09:10,620 --> 00:09:39,150
the perfection in Rahad I want to share

00:09:34,200 --> 00:09:42,480
some experience in rahat well how we use

00:09:39,150 --> 00:09:44,339
the development practice of continuous

00:09:42,480 --> 00:09:47,880
delivery openshift

00:09:44,339 --> 00:09:53,490
to solve all the problems she owns

00:09:47,880 --> 00:09:56,700
estimation before we talk about the

00:09:53,490 --> 00:10:00,900
concept of continuous delivery let's

00:09:56,700 --> 00:10:04,800
think about the concept of continuous

00:10:00,900 --> 00:10:08,279
integration of just a CI I think most of

00:10:04,800 --> 00:10:12,300
you probably already heard this term or

00:10:08,279 --> 00:10:16,650
probably yochim already have has some CI

00:10:12,300 --> 00:10:22,140
pop lines working everyday the lesson

00:10:16,650 --> 00:10:26,330
recorded days without CI so in the old

00:10:22,140 --> 00:10:29,730
days some developer teams have a rule

00:10:26,330 --> 00:10:32,570
some people called the build per day so

00:10:29,730 --> 00:10:36,510
you have a development team and maybe

00:10:32,570 --> 00:10:43,230
five or more developers working our

00:10:36,510 --> 00:10:45,870
project so when the your manager ask you

00:10:43,230 --> 00:10:49,970
to release a new version that build

00:10:45,870 --> 00:10:53,610
Pranay should get someone's work

00:10:49,970 --> 00:10:56,540
schedule from somebody's and another

00:10:53,610 --> 00:10:59,580
people the files from another people and

00:10:56,540 --> 00:11:03,530
he gather all the files from our

00:10:59,580 --> 00:11:06,700
developers and mix it up and hopefully

00:11:03,530 --> 00:11:10,830
the next

00:11:06,700 --> 00:11:15,070
the share the codebase will build and

00:11:10,830 --> 00:11:17,800
works so if anything goes wrong you

00:11:15,070 --> 00:11:20,320
probably need to take a very long time

00:11:17,800 --> 00:11:26,410
to figure out what's going wrong so it's

00:11:20,320 --> 00:11:28,930
a slow procedure it may take several

00:11:26,410 --> 00:11:34,660
weeks before you can actually get your

00:11:28,930 --> 00:11:38,650
build success so with continuous

00:11:34,660 --> 00:11:42,070
integration we require every developer

00:11:38,650 --> 00:11:47,020
to integrate their change to the soft

00:11:42,070 --> 00:11:47,710
code to a shared repository as as far as

00:11:47,020 --> 00:11:51,160
possible

00:11:47,710 --> 00:11:54,130
maybe several times a day this ensure

00:11:51,160 --> 00:11:59,080
that this will encourage the developer

00:11:54,130 --> 00:12:01,990
to make little changes to the source

00:11:59,080 --> 00:12:05,170
code and they test with the whole

00:12:01,990 --> 00:12:07,900
project so if anything goes wrong you

00:12:05,170 --> 00:12:11,730
can easily figure out what's the problem

00:12:07,900 --> 00:12:14,950
and you can easily fix it the idea of

00:12:11,730 --> 00:12:23,170
continuous integration but the problem

00:12:14,950 --> 00:12:26,490
is living with VI your shared source

00:12:23,170 --> 00:12:31,800
code is buildable and the even even

00:12:26,490 --> 00:12:34,960
works perfectly in developers own works

00:12:31,800 --> 00:12:37,780
workstation or even in the development

00:12:34,960 --> 00:12:41,290
environment nobody has the confidence

00:12:37,780 --> 00:12:44,350
that it will be fine if you really put

00:12:41,290 --> 00:12:49,750
your new version of your software into

00:12:44,350 --> 00:12:54,970
production environment so the developers

00:12:49,750 --> 00:12:57,070
always eager to deploy their new feature

00:12:54,970 --> 00:12:59,980
to the production environment but our

00:12:57,070 --> 00:13:03,900
little guys they may be not happy

00:12:59,980 --> 00:13:03,900
because nobody knows what we are having

00:13:05,250 --> 00:13:12,190
so now the continuous delivery the

00:13:09,040 --> 00:13:16,810
concept comes into the play so

00:13:12,190 --> 00:13:18,190
continuous delivery is also development

00:13:16,810 --> 00:13:21,880
practice

00:13:18,190 --> 00:13:28,860
exchanging to the concept of CI we

00:13:21,880 --> 00:13:33,160
should require developers to rapidly

00:13:28,860 --> 00:13:36,790
deliver the change to production like

00:13:33,160 --> 00:13:42,910
environment and make some automated

00:13:36,790 --> 00:13:45,760
tests to ensure that if we deploy the

00:13:42,910 --> 00:13:51,880
new version of the software into the

00:13:45,760 --> 00:13:55,750
real production it will be fine so here

00:13:51,880 --> 00:13:58,630
I want to make a clean distinguish

00:13:55,750 --> 00:14:01,140
between two very similar terms while

00:13:58,630 --> 00:14:05,650
color continuous delivery another is

00:14:01,140 --> 00:14:10,270
continuous deployment during continuous

00:14:05,650 --> 00:14:13,720
deployment every change from a developer

00:14:10,270 --> 00:14:16,990
will be constantly deployed deployed

00:14:13,720 --> 00:14:19,270
into production automatically in some

00:14:16,990 --> 00:14:25,690
Internet companies like Facebook they

00:14:19,270 --> 00:14:28,870
already like continuous deployment in

00:14:25,690 --> 00:14:34,960
practice for a long time but in

00:14:28,870 --> 00:14:40,500
continuous delivery we can actually do

00:14:34,960 --> 00:14:47,070
it but we may choose not to if more like

00:14:40,500 --> 00:14:51,340
business division we we can deploy our

00:14:47,070 --> 00:14:54,280
shared code base into the production if

00:14:51,340 --> 00:14:56,400
we want but we need to know true and

00:14:54,280 --> 00:14:59,110
that's the difference of between

00:14:56,400 --> 00:15:01,320
continuous delivery or continuous

00:14:59,110 --> 00:15:01,320
deployment

00:15:07,200 --> 00:15:15,820
how to implement continuous delivery I

00:15:11,790 --> 00:15:18,790
would say the ingredient of continuous

00:15:15,820 --> 00:15:21,490
delivery is automation so basically you

00:15:18,790 --> 00:15:25,360
need to automate everything you can

00:15:21,490 --> 00:15:29,410
imagine so you need automated build

00:15:25,360 --> 00:15:33,880
automated tests all the script like to

00:15:29,410 --> 00:15:36,730
deploy your application into different

00:15:33,880 --> 00:15:41,140
environments and automatically to the

00:15:36,730 --> 00:15:46,029
configuration setup database and razor

00:15:41,140 --> 00:15:49,870
machine everything it's a lot of work

00:15:46,029 --> 00:15:55,839
and it's actually not easy to automate

00:15:49,870 --> 00:15:58,750
everything so path today we have over

00:15:55,839 --> 00:16:02,800
openshift the following infection I will

00:15:58,750 --> 00:16:05,800
introduce you some features some

00:16:02,800 --> 00:16:08,740
advantages that OpenShift will bring you

00:16:05,800 --> 00:16:16,839
to help you implement your continuous

00:16:08,740 --> 00:16:20,860
delivery pipeline so in open shift your

00:16:16,839 --> 00:16:23,860
application is run shipped and managed

00:16:20,860 --> 00:16:27,420
in the forms of containers or container

00:16:23,860 --> 00:16:32,170
images so the container image has your

00:16:27,420 --> 00:16:35,529
program and other dependences file

00:16:32,170 --> 00:16:37,029
system in the image so you can actually

00:16:35,529 --> 00:16:39,209
minimize the difference between

00:16:37,029 --> 00:16:45,040
different environments and different

00:16:39,209 --> 00:16:47,829
deployments an urban shift has a feature

00:16:45,040 --> 00:16:49,600
called open shift tablet so with autism

00:16:47,829 --> 00:16:56,490
tablets you can actually write a

00:16:49,600 --> 00:16:56,490
template for all your environments

00:16:56,760 --> 00:17:04,000
people from other team or if they want

00:17:00,820 --> 00:17:10,030
to like clone your environment they

00:17:04,000 --> 00:17:13,959
can't just write youth your basic

00:17:10,030 --> 00:17:18,050
template to start a new deployment with

00:17:13,959 --> 00:17:23,000
exactly same configuration just like a

00:17:18,050 --> 00:17:27,170
wine click and you can also live with

00:17:23,000 --> 00:17:29,720
all the hardware resource of the whole

00:17:27,170 --> 00:17:32,270
cluster so you need to need to worry

00:17:29,720 --> 00:17:35,500
about hardware don't need to worry about

00:17:32,270 --> 00:17:40,280
provision machine or up operating your

00:17:35,500 --> 00:17:46,429
hardware comfort reason ultimate

00:17:40,280 --> 00:17:47,840
automatic way so the most exciting thing

00:17:46,429 --> 00:17:50,350
is openshift

00:17:47,840 --> 00:17:54,350
has a feature called ownership table

00:17:50,350 --> 00:17:55,850
which can help you imply implement your

00:17:54,350 --> 00:18:06,080
CD problems

00:17:55,850 --> 00:18:09,950
you know manageable and fancy way this

00:18:06,080 --> 00:18:13,730
is very popular it's obviously popular

00:18:09,950 --> 00:18:17,360
is actually something that brings the

00:18:13,730 --> 00:18:20,390
power of jenkins into OpenShift so

00:18:17,360 --> 00:18:24,530
jenkins is a very powerful say a theory

00:18:20,390 --> 00:18:27,170
tool and this has a feature called

00:18:24,530 --> 00:18:30,230
jingle poplar which allows you to write

00:18:27,170 --> 00:18:36,770
your poplin code in a text file called

00:18:30,230 --> 00:18:41,720
james file and open shift exchange this

00:18:36,770 --> 00:18:45,020
technology by providing you a new domain

00:18:41,720 --> 00:18:49,809
specific language so you can you know

00:18:45,020 --> 00:18:53,480
check file you can write some groovy

00:18:49,809 --> 00:18:57,020
like inclusive language you can just

00:18:53,480 --> 00:18:59,720
write right the openness of the DSL to

00:18:57,020 --> 00:19:06,910
interact your poplin code with the

00:18:59,720 --> 00:19:06,910
overshift api server and

00:19:07,500 --> 00:19:13,140
once you create a new administer

00:19:10,590 --> 00:19:16,500
propellant of Sanka Java will be

00:19:13,140 --> 00:19:20,809
automatically created and linked to the

00:19:16,500 --> 00:19:27,539
urban safe job so it has a built-in

00:19:20,809 --> 00:19:33,570
synchronization making them so here's a

00:19:27,539 --> 00:19:37,049
real example in rahat we implemented a

00:19:33,570 --> 00:19:41,130
CD pop line for we were DB it's an open

00:19:37,049 --> 00:19:45,450
source project hosted Pegler if you're

00:19:41,130 --> 00:19:49,590
interested in CD pipeline implementation

00:19:45,450 --> 00:19:54,110
you can go to peridot I'll search for we

00:19:49,590 --> 00:19:59,549
were DB so here's the high-level

00:19:54,110 --> 00:20:05,520
workflow after CD pipeline every time a

00:19:59,549 --> 00:20:08,010
developer some major change to SCM so

00:20:05,520 --> 00:20:11,730
the change will go through the whole

00:20:08,010 --> 00:20:16,850
table so the partner will firstly

00:20:11,730 --> 00:20:20,630
perform some basic basic checks and

00:20:16,850 --> 00:20:24,419
round unit tests to ensure your code is

00:20:20,630 --> 00:20:28,890
your code looks good and then maybe

00:20:24,419 --> 00:20:30,750
build rpms Rahim checks and finally the

00:20:28,890 --> 00:20:34,039
puff Lang will build account in the

00:20:30,750 --> 00:20:38,909
image for you from from the source code

00:20:34,039 --> 00:20:41,580
then the image will be deployed into a

00:20:38,909 --> 00:20:43,620
temporary environment and we will run

00:20:41,580 --> 00:20:48,600
some functional tester and other some

00:20:43,620 --> 00:20:53,429
high-level tests to it if all tests are

00:20:48,600 --> 00:20:57,919
passed we will tack the image as latest

00:20:53,429 --> 00:20:57,919
and pushed into the container registry

00:21:00,710 --> 00:21:07,919
when the image is tact as latest we will

00:21:05,190 --> 00:21:10,100
see we have a confidence that the image

00:21:07,919 --> 00:21:14,100
is good enough to deploy in two

00:21:10,100 --> 00:21:18,010
different development environment so the

00:21:14,100 --> 00:21:22,400
next steps are actually

00:21:18,010 --> 00:21:24,320
promote this container image into the

00:21:22,400 --> 00:21:30,800
state environment and finally the

00:21:24,320 --> 00:21:34,810
production environment a tassel by like

00:21:30,800 --> 00:21:38,540
if we want to promote a image from the

00:21:34,810 --> 00:21:45,380
dev version to the stage version we need

00:21:38,540 --> 00:21:48,470
to like pour the latest a diversion of

00:21:45,380 --> 00:21:52,460
your application and all the today's

00:21:48,470 --> 00:21:57,440
version of your application if

00:21:52,460 --> 00:21:59,510
dependencies then we will run some into

00:21:57,440 --> 00:22:02,330
end tests and the other high level

00:21:59,510 --> 00:22:06,380
integration tests to ensure that once

00:22:02,330 --> 00:22:10,100
you promote your image from there to

00:22:06,380 --> 00:22:15,140
stage and you won't work you want to

00:22:10,100 --> 00:22:19,130
break out anything similar procedure

00:22:15,140 --> 00:22:22,970
happens when you promote the image from

00:22:19,130 --> 00:22:28,940
stage into production but we introduced

00:22:22,970 --> 00:22:34,100
a switch here so a human can decide if

00:22:28,940 --> 00:22:37,970
we really want to promote a state image

00:22:34,100 --> 00:22:41,030
to production if you remove this which

00:22:37,970 --> 00:22:42,890
is called a continuous deployment but if

00:22:41,030 --> 00:22:45,100
you add this which is continuous

00:22:42,890 --> 00:22:45,100
delivery

00:22:47,110 --> 00:22:55,760
this is how the pipeline looks like in

00:22:52,880 --> 00:22:58,970
the OpenShift dashboard if you create

00:22:55,760 --> 00:23:02,150
ownership the public job I click the

00:22:58,970 --> 00:23:06,200
build pipeline body you will see all the

00:23:02,150 --> 00:23:09,830
pipeline's of and click into poplin top

00:23:06,200 --> 00:23:13,240
you can see the all stages in your

00:23:09,830 --> 00:23:13,240
pipeline here like this

00:23:17,480 --> 00:23:26,370
so now how to write your own

00:23:20,910 --> 00:23:28,980
OpenShift poplu hey so we need to

00:23:26,370 --> 00:23:34,530
introduce the Jegs fire first

00:23:28,980 --> 00:23:36,840
thanks file is a basically a text file

00:23:34,530 --> 00:23:39,380
written in the gooery programming

00:23:36,840 --> 00:23:47,210
language it's a feature provided by

00:23:39,380 --> 00:23:53,090
Jenkins you can create a text file right

00:23:47,210 --> 00:23:57,000
come like this the agent part specifies

00:23:53,090 --> 00:24:01,280
which node you want to run your pipeline

00:23:57,000 --> 00:24:04,440
and in the stages part you define

00:24:01,280 --> 00:24:07,370
different stages in your popular and

00:24:04,440 --> 00:24:12,600
every stages you can write some query

00:24:07,370 --> 00:24:21,120
source code to for your pipeline

00:24:12,600 --> 00:24:23,670
workflow I OpenShift

00:24:21,120 --> 00:24:26,940
you can actually create a build config

00:24:23,670 --> 00:24:30,300
but that's the third strategy to

00:24:26,940 --> 00:24:35,850
changing pipeline strategy and then you

00:24:30,300 --> 00:24:38,760
can put your JS file here you can you

00:24:35,850 --> 00:24:42,270
have to actually have two options one

00:24:38,760 --> 00:24:49,320
option is copy your content of change

00:24:42,270 --> 00:24:53,040
file into the build configure object the

00:24:49,320 --> 00:24:56,370
other option is story or change file

00:24:53,040 --> 00:25:00,720
into as SEM like github chanting

00:24:56,370 --> 00:25:08,180
reference your text file from external

00:25:00,720 --> 00:25:12,420
case report so here I have an example

00:25:08,180 --> 00:25:18,420
build config and you can download my

00:25:12,420 --> 00:25:21,420
slice and take a look can you if you

00:25:18,420 --> 00:25:26,340
have a runny open supercluster you can

00:25:21,420 --> 00:25:30,059
up and yeah the Yama file tree OpenShift

00:25:26,340 --> 00:25:46,419
cluster and click the build

00:25:30,059 --> 00:25:51,009
let's see how it works this is this is

00:25:46,419 --> 00:25:54,940
the Yama file so you can see we include

00:25:51,009 --> 00:25:59,139
text file here and we define the agent

00:25:54,940 --> 00:26:01,950
the agent is actually a tall template of

00:25:59,139 --> 00:26:01,950
OpenShift

00:26:09,269 --> 00:26:16,299
so if the metadata part is the name of

00:26:12,820 --> 00:26:19,629
your drink Elisha popular intro and here

00:26:16,299 --> 00:26:23,700
you define the whole template so your

00:26:19,629 --> 00:26:28,299
pop line will be run your pod openshift

00:26:23,700 --> 00:26:33,159
this feature is interred is supported by

00:26:28,299 --> 00:26:35,409
our length plugin then you can add this

00:26:33,159 --> 00:26:38,470
build config to openshift

00:26:35,409 --> 00:26:43,480
and here in the OpenShift dashboard you

00:26:38,470 --> 00:26:46,350
can see a job is created like this and

00:26:43,480 --> 00:26:49,480
you can click the button stop apply or

00:26:46,350 --> 00:26:53,740
use your command line also start build

00:26:49,480 --> 00:26:57,850
the privilege of name to start a new

00:26:53,740 --> 00:27:05,259
build of your ship a plunger here a new

00:26:57,850 --> 00:27:08,619
building started when you click the real

00:27:05,259 --> 00:27:13,119
lock body ownership we will never get

00:27:08,619 --> 00:27:20,970
you to the tanks master page so you can

00:27:13,119 --> 00:27:25,080
see the procedure of how your pipeline

00:27:20,970 --> 00:27:25,080
runs in Jenkins

00:27:34,049 --> 00:27:41,320
you can see obesity will automatically

00:27:37,269 --> 00:27:45,879
start a new part based on the part

00:27:41,320 --> 00:27:54,549
templates you provided and around all

00:27:45,879 --> 00:27:57,279
the steps inside your open ship part and

00:27:54,549 --> 00:28:02,009
go back to the holdings of tab dashboard

00:27:57,279 --> 00:28:02,009
you can see all the steps here

00:28:15,350 --> 00:28:28,500
so because you're openshift pipeline job

00:28:20,880 --> 00:28:31,470
if if config in open shift object in the

00:28:28,500 --> 00:28:33,210
form of a yama or Jason so you can

00:28:31,470 --> 00:28:38,730
actually use openshift

00:28:33,210 --> 00:28:43,320
template to like package your poplin top

00:28:38,730 --> 00:28:47,730
as OpenShift applications with this

00:28:43,320 --> 00:28:51,510
approach you will give the flexibility

00:28:47,730 --> 00:28:54,870
to your team members or downstream

00:28:51,510 --> 00:29:00,020
developers to deploy their own pipeline

00:28:54,870 --> 00:29:00,020
jobs for the for the application fox

00:29:05,900 --> 00:29:13,890
so with open ship popular you can every

00:29:10,560 --> 00:29:19,400
time you trigger a new build of your job

00:29:13,890 --> 00:29:23,490
a new a new part will be created and

00:29:19,400 --> 00:29:29,310
present so you can actually run your

00:29:23,490 --> 00:29:31,550
public multiple builds in parallel you

00:29:29,310 --> 00:29:37,290
don't need to worry about if someone's

00:29:31,550 --> 00:29:41,660
occupy that machine so we you have a

00:29:37,290 --> 00:29:46,610
very long and complex pipeline this will

00:29:41,660 --> 00:29:49,610
dramatically speed up your development

00:29:46,610 --> 00:29:49,610
cycle

00:29:50,989 --> 00:30:01,049
and with this approach or your poplin

00:29:56,429 --> 00:30:06,929
code series and the whole build

00:30:01,049 --> 00:30:10,649
environment are predicted in SEM so you

00:30:06,929 --> 00:30:14,700
don't need to worry about how a failure

00:30:10,649 --> 00:30:24,080
will cause you to lose your build and

00:30:14,700 --> 00:30:29,970
test environment so you can store your

00:30:24,080 --> 00:30:35,279
OpenShift pipeline job as buildconfig

00:30:29,970 --> 00:30:40,129
Adamo's your SEM and your credentials

00:30:35,279 --> 00:30:40,129
can be protested as urban civil security

00:30:40,970 --> 00:30:48,450
you can't create open general OpenShift

00:30:44,970 --> 00:30:51,090
secrets with this tag so the secret will

00:30:48,450 --> 00:30:56,220
be automatically synced to the changes

00:30:51,090 --> 00:30:58,980
master so you don't need to like pack

00:30:56,220 --> 00:31:02,549
half of your data on the text after all

00:30:58,980 --> 00:31:07,460
you need is like keep your Yama files

00:31:02,549 --> 00:31:07,460
and you will have anything everything

00:31:17,160 --> 00:31:30,280
let's just let me summarize all the

00:31:24,100 --> 00:31:33,220
benefits we have with open public you

00:31:30,280 --> 00:31:37,900
can actually use open super popular DSL

00:31:33,220 --> 00:31:41,940
to interact with oblivion server without

00:31:37,900 --> 00:31:48,090
calling the OSI command and the posture

00:31:41,940 --> 00:31:52,360
output manually and you can use the

00:31:48,090 --> 00:31:55,570
kubernetes plugin to run your popular

00:31:52,360 --> 00:31:57,970
and generous lives at

00:31:55,570 --> 00:32:03,670
OpenShift path so you don't need to

00:31:57,970 --> 00:32:08,350
worry about provision new machine to run

00:32:03,670 --> 00:32:11,880
your Papa and you can actually define

00:32:08,350 --> 00:32:14,940
some offensive templates for all

00:32:11,880 --> 00:32:18,250
environments of your application and you

00:32:14,940 --> 00:32:24,220
don't need to worry about the

00:32:18,250 --> 00:32:26,430
environment could be destroyed or be

00:32:24,220 --> 00:32:26,430
lost

00:32:28,470 --> 00:32:41,250
that's all we talked about the question

00:32:34,480 --> 00:32:41,250
Q&A time thank you

00:32:44,230 --> 00:33:10,000
so if you guys have have any questions

00:32:47,950 --> 00:33:12,750
you can just ask her here you mean the

00:33:10,000 --> 00:33:12,750
cake

00:33:15,029 --> 00:33:23,049
okay let's see yeah so actually the this

00:33:20,980 --> 00:33:26,100
teacher is highly integrated with

00:33:23,049 --> 00:33:30,659
Jenkins so every time you create a new

00:33:26,100 --> 00:33:35,230
build config the overshift will

00:33:30,659 --> 00:33:40,690
automatically create a drink job in the

00:33:35,230 --> 00:33:44,019
linked jinkx master so by so far so the

00:33:40,690 --> 00:33:46,240
poplar is actually running in drinking's

00:33:44,019 --> 00:33:49,440
and the drinking's is running as

00:33:46,240 --> 00:33:49,440
ownership path

00:34:07,290 --> 00:34:17,440
so your question is do I know

00:34:13,600 --> 00:34:28,920
do we know how the pipeline works

00:34:17,440 --> 00:34:28,920
between different namespaces or - yeah

00:34:36,419 --> 00:34:42,559
okay so the question is how to if you

00:34:39,089 --> 00:34:49,710
have many projects so how would you like

00:34:42,559 --> 00:34:53,609
deal with this situation so so actually

00:34:49,710 --> 00:34:56,909
we you the overshift buildconfig

00:34:53,609 --> 00:35:02,279
is our namespace the resource so we'll

00:34:56,909 --> 00:35:05,369
create a table you know project open

00:35:02,279 --> 00:35:06,500
ships will look will look for service

00:35:05,369 --> 00:35:09,650
called changings

00:35:06,500 --> 00:35:14,369
inside your project so if you already

00:35:09,650 --> 00:35:18,450
define a service to find the initial

00:35:14,369 --> 00:35:24,329
service in your project so it will find

00:35:18,450 --> 00:35:27,930
the change master using the the back of

00:35:24,329 --> 00:35:32,549
the pack points of the service so if you

00:35:27,930 --> 00:35:36,299
have a Jenkins master but in every

00:35:32,549 --> 00:35:40,319
project you have you have services

00:35:36,299 --> 00:35:43,829
inside every project but their services

00:35:40,319 --> 00:35:46,319
links is linked to the thing drinks

00:35:43,829 --> 00:35:48,599
master that the job will be created in

00:35:46,319 --> 00:35:51,779
that deck master but you can also have

00:35:48,599 --> 00:35:56,779
different things matter so it only ship

00:35:51,779 --> 00:35:59,609
that it just like looks looks for the

00:35:56,779 --> 00:36:02,900
open ship service called thinking being

00:35:59,609 --> 00:36:02,900
the father James master

00:36:33,750 --> 00:36:36,809
[Music]

00:37:09,760 --> 00:37:18,500
so the question is in the promotion

00:37:14,150 --> 00:37:22,190
workflow if we like put the image to the

00:37:18,500 --> 00:37:27,020
dev how to trigger the next stage so

00:37:22,190 --> 00:37:30,320
currently we have our internal project

00:37:27,020 --> 00:37:32,090
we have macro service called the report

00:37:30,320 --> 00:37:35,480
tracker which will check out the

00:37:32,090 --> 00:37:40,940
registry tag changes so if there is a

00:37:35,480 --> 00:37:43,550
new tag change the like the little

00:37:40,940 --> 00:37:46,880
target changed to another community

00:37:43,550 --> 00:37:51,220
image we will know that we will set up

00:37:46,880 --> 00:37:51,220
trigger to trigger the next stage

00:38:25,660 --> 00:38:35,980
so your question where we keep the

00:38:30,849 --> 00:38:42,220
catalog and other without yeah it's

00:38:35,980 --> 00:38:48,069
actually the logs after Owen Jenkins so

00:38:42,220 --> 00:38:52,099
still in Jenkins and the checks master

00:38:48,069 --> 00:38:54,849
so in the touching slave is informal so

00:38:52,099 --> 00:38:58,700
when the job we abilities finished

00:38:54,849 --> 00:39:03,220
sleeve will be killed but the Jencks

00:38:58,700 --> 00:39:06,249
master has a positive story to config so

00:39:03,220 --> 00:39:07,430
everything out drinks master is actually

00:39:06,249 --> 00:39:12,349
protested

00:39:07,430 --> 00:39:14,720
so you actually you need to use in

00:39:12,349 --> 00:39:19,249
Jenkins their engines popular and there

00:39:14,720 --> 00:39:23,329
is a step called arc have something to

00:39:19,249 --> 00:39:31,160
like move to copy the content in your

00:39:23,329 --> 00:39:36,190
Jenkins live in to master the master is

00:39:31,160 --> 00:39:41,450
also part but we the urban shift you can

00:39:36,190 --> 00:39:44,089
create political stories claim and

00:39:41,450 --> 00:39:49,910
mounted mounted a storage among the

00:39:44,089 --> 00:39:52,460
volume into Jennings so actually the all

00:39:49,910 --> 00:39:55,700
the files are pervasive in the

00:39:52,460 --> 00:39:58,609
possessive volume so if you kill the

00:39:55,700 --> 00:40:00,950
Jenkins master obviously we will start a

00:39:58,609 --> 00:40:03,890
new part for that a new James master but

00:40:00,950 --> 00:40:08,769
it will still master seem storage so

00:40:03,890 --> 00:40:08,769
everything still if they are kept

00:40:31,040 --> 00:40:40,740
you mean the two stages once they

00:40:34,500 --> 00:40:47,930
finished yet in the Jenkins interchange

00:40:40,740 --> 00:40:47,930
pipeline and you finally something

00:41:03,170 --> 00:41:11,010
so so in you can this is taken from the

00:41:08,730 --> 00:41:15,810
official Jenkins popular documentation

00:41:11,010 --> 00:41:19,110
so he changed poplar if you write stages

00:41:15,810 --> 00:41:26,070
like in the stage effects in stage 1

00:41:19,110 --> 00:41:30,150
stage 2 v color sequential stages so

00:41:26,070 --> 00:41:33,300
once the process stages down it change

00:41:30,150 --> 00:41:38,460
will automatically start the next page

00:41:33,300 --> 00:41:40,530
and there is another form of stages

00:41:38,460 --> 00:41:43,650
called parallel stage so you can

00:41:40,530 --> 00:41:48,800
actually define multiple stages they are

00:41:43,650 --> 00:41:48,800
started concurrently

00:41:56,380 --> 00:42:16,660
yeah yeah yeah yeah

00:42:22,930 --> 00:42:25,930
yeah

00:42:37,300 --> 00:42:40,419
[Music]

00:42:59,340 --> 00:43:07,390
troubleshooting so the question is if

00:43:02,970 --> 00:43:09,730
for the pipeline and the deployment like

00:43:07,390 --> 00:43:13,690
applications are running in organ

00:43:09,730 --> 00:43:16,960
support sometimes your job fails and the

00:43:13,690 --> 00:43:26,170
parties killed how to use troubleshoot

00:43:16,960 --> 00:43:33,790
do some troubleshooting oh yeah so there

00:43:26,170 --> 00:43:35,710
are many ways to do that so firstly you

00:43:33,790 --> 00:43:41,760
know tanks partner actually you can

00:43:35,710 --> 00:43:46,570
write logs to the to the King's Council

00:43:41,760 --> 00:43:49,810
so if in most situations you can

00:43:46,570 --> 00:43:56,110
actually figure out what's going wrong

00:43:49,810 --> 00:44:00,250
based on the logs and the other tricks

00:43:56,110 --> 00:44:03,970
like you can actually for example if if

00:44:00,250 --> 00:44:05,590
you want you don't want the Jenkins to

00:44:03,970 --> 00:44:11,650
leave to be killed

00:44:05,590 --> 00:44:15,430
you can actually add some so we you find

00:44:11,650 --> 00:44:19,690
that Pavlin build a third you can use

00:44:15,430 --> 00:44:23,730
the replay functionality in jenkins to

00:44:19,690 --> 00:44:27,970
rerun the build with the exactly same

00:44:23,730 --> 00:44:33,060
parameters and you can actually change

00:44:27,970 --> 00:44:35,800
I'll change the public code on the

00:44:33,060 --> 00:44:39,870
Jencks configuration page and add

00:44:35,800 --> 00:44:42,870
something like a sleep to keep the pod

00:44:39,870 --> 00:44:42,870
Ronnie

00:45:02,510 --> 00:45:04,720
ha

00:45:23,839 --> 00:45:36,599
and also I want to add I'm from the CIA

00:45:33,510 --> 00:45:48,359
alright guys so I know there's a OCD

00:45:36,599 --> 00:45:52,320
back man which you can always if the

00:45:48,359 --> 00:46:00,050
provider talked to help you debug some

00:45:52,320 --> 00:46:00,050
problems inside OpenShift but a generic

00:46:34,500 --> 00:46:38,550
[Applause]

00:46:38,560 --> 00:46:40,620

YouTube URL: https://www.youtube.com/watch?v=Emxwj65x2a4


