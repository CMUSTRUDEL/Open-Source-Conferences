Title: Portable Services Are Ready To Use
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Portable Services Are Ready To Use
Speaker: Lennart Poettering
Description:  Portable Services bring certain aspects of containers to classic systemd service management. With systemd v239 Portable Services are for the first time complete and ready for users to take advantage of. In this talk we'll have a look on the underlying technical concepts, how things fit together and what the precise limitations and benefits are. We'll discuss why you should (or shouldn't) care about Portable Services, and what's next for them.
[ https://sched.co/JchM ]
Captions: 
	00:00:05,730 --> 00:00:12,100
hi everybody

00:00:08,290 --> 00:00:13,900
I think I'm competing against food so I

00:00:12,100 --> 00:00:17,920
guess that's a very tough competition to

00:00:13,900 --> 00:00:20,859
be in but at least my belly says so

00:00:17,920 --> 00:00:23,800
but yep hi I'm Holly I'm gonna talk

00:00:20,859 --> 00:00:28,230
today about portable services which is

00:00:23,800 --> 00:00:33,370
something we did in a system D project

00:00:28,230 --> 00:00:36,219
over the last year or two I'm gonna

00:00:33,370 --> 00:00:38,140
introduce you to what this is and I'd

00:00:36,219 --> 00:00:40,780
like to clear up like if you have any

00:00:38,140 --> 00:00:42,730
questions do not hesitate to interrupt

00:00:40,780 --> 00:00:44,739
me right away I much prefer it if we can

00:00:42,730 --> 00:00:46,989
have a like active discussion going on

00:00:44,739 --> 00:00:48,969
here all the time I would just at the

00:00:46,989 --> 00:00:50,289
end so don't have the tape just

00:00:48,969 --> 00:00:55,449
interrupt me if you have any question

00:00:50,289 --> 00:00:57,489
whatsoever about what I'm saying okay

00:00:55,449 --> 00:00:59,609
let's jump in so what are portable

00:00:57,489 --> 00:01:02,559
services portable services are

00:00:59,609 --> 00:01:04,330
ultimately the combination of system

00:01:02,559 --> 00:01:06,190
services which of course is as you all

00:01:04,330 --> 00:01:08,110
know this thing that system is about

00:01:06,190 --> 00:01:09,880
right like it's a service manager and a

00:01:08,110 --> 00:01:12,820
couple of other things but primarily and

00:01:09,880 --> 00:01:14,800
originally a service manager plus some

00:01:12,820 --> 00:01:16,750
container features so the idea is

00:01:14,800 --> 00:01:18,850
basically I mean we're not living in a

00:01:16,750 --> 00:01:20,680
vacuum and system Services is how

00:01:18,850 --> 00:01:23,140
traditionally services were managed on

00:01:20,680 --> 00:01:26,020
linux right like since system five times

00:01:23,140 --> 00:01:28,270
and before and nowadays there are

00:01:26,020 --> 00:01:30,130
containers that try to do something

00:01:28,270 --> 00:01:32,320
slightly different but essentially are

00:01:30,130 --> 00:01:35,410
still about managing services just in a

00:01:32,320 --> 00:01:38,650
more slightly different ways services

00:01:35,410 --> 00:01:40,120
are one approach how I think we can take

00:01:38,650 --> 00:01:42,520
some of the features of container

00:01:40,120 --> 00:01:44,770
management not all and puts them to

00:01:42,520 --> 00:01:48,490
regular system services simply because

00:01:44,770 --> 00:01:49,960
they are generally useful you could also

00:01:48,490 --> 00:01:51,910
say the other way around that it's kind

00:01:49,960 --> 00:01:55,480
of containers but with more system

00:01:51,910 --> 00:01:58,360
service features right what does that

00:01:55,480 --> 00:01:59,560
actually like mean like first of all the

00:01:58,360 --> 00:02:01,060
question is what does containers mean

00:01:59,560 --> 00:02:03,730
nobody really knows what containers are

00:02:01,060 --> 00:02:06,070
like I mean their various definitions to

00:02:03,730 --> 00:02:06,550
me at least it's about these three

00:02:06,070 --> 00:02:08,200
things

00:02:06,550 --> 00:02:09,610
resource bundles right you package

00:02:08,200 --> 00:02:12,849
everything up in a table or like all the

00:02:09,610 --> 00:02:15,069
dependencies all the shell libraries all

00:02:12,849 --> 00:02:16,450
the resources and needs into one it's

00:02:15,069 --> 00:02:17,200
about isolation right you apply

00:02:16,450 --> 00:02:19,000
sandboxing

00:02:17,200 --> 00:02:20,500
- it might be better sent boxing were

00:02:19,000 --> 00:02:22,599
sandboxing but it's definitely there

00:02:20,500 --> 00:02:24,790
Plus delivery right like you have seats

00:02:22,599 --> 00:02:27,190
orchestration framework that distributed

00:02:24,790 --> 00:02:29,290
on your cluster and and so would that

00:02:27,190 --> 00:02:30,910
ever seen can run right so under the

00:02:29,290 --> 00:02:32,230
assumption that this is what containers

00:02:30,910 --> 00:02:33,519
are about I'm pretty sure some people

00:02:32,230 --> 00:02:36,580
have other opinions that there might be

00:02:33,519 --> 00:02:37,989
more necessary but yeah that's at least

00:02:36,580 --> 00:02:41,860
the three things that I see what

00:02:37,989 --> 00:02:44,140
containers are yeah portable services

00:02:41,860 --> 00:02:46,209
are hence the combination of resource

00:02:44,140 --> 00:02:50,230
bundles right like exactly that idea

00:02:46,209 --> 00:02:51,069
from containers but in trend in contrast

00:02:50,230 --> 00:02:52,780
to isolation

00:02:51,069 --> 00:02:54,190
I put the focus on integration right

00:02:52,780 --> 00:02:56,470
because that's what system services are

00:02:54,190 --> 00:02:59,590
traditionally system services ran was

00:02:56,470 --> 00:03:01,630
full privileges was full integration to

00:02:59,590 --> 00:03:04,150
the system right like they could do

00:03:01,630 --> 00:03:06,910
anything that they wanted because they

00:03:04,150 --> 00:03:10,720
ran as route and had the full access

00:03:06,910 --> 00:03:12,220
but then again also at sandboxing so

00:03:10,720 --> 00:03:13,900
what's the definition like well where do

00:03:12,220 --> 00:03:15,760
I draw the line between isolation and

00:03:13,900 --> 00:03:17,739
sandboxing right like as mentioned I put

00:03:15,760 --> 00:03:19,510
the isolation thing here and I plant the

00:03:17,739 --> 00:03:23,440
sandboxing here where do I see the

00:03:19,510 --> 00:03:25,329
difference there um i salon for me is a

00:03:23,440 --> 00:03:28,170
little bit stronger right an isolation

00:03:25,329 --> 00:03:30,280
is really about creating your own world

00:03:28,170 --> 00:03:32,709
containers in many ways mostly

00:03:30,280 --> 00:03:34,389
communicated with the outside through

00:03:32,709 --> 00:03:36,970
the network right so they might as well

00:03:34,389 --> 00:03:39,489
be VMS in many regards not in all

00:03:36,970 --> 00:03:42,280
regards but in many radio regards which

00:03:39,489 --> 00:03:44,560
is not traditionally how system services

00:03:42,280 --> 00:03:47,859
work right like they just have access to

00:03:44,560 --> 00:03:50,920
IPC and yes some of the local daemons

00:03:47,859 --> 00:03:52,480
tend to communicate a tcp/ip but many of

00:03:50,920 --> 00:03:55,030
them communicate with completely other

00:03:52,480 --> 00:03:57,670
things among each other like AF unix

00:03:55,030 --> 00:04:02,470
sockets or or whatever else there is

00:03:57,670 --> 00:04:04,359
fifa's whatever we have so yeah for

00:04:02,470 --> 00:04:06,760
portable services the focus is less on

00:04:04,359 --> 00:04:09,639
isolation more about just sandboxing

00:04:06,760 --> 00:04:11,709
right like allowing the specific service

00:04:09,639 --> 00:04:14,500
to integrate in a service exactly as

00:04:11,709 --> 00:04:16,780
much as it wants but not more right

00:04:14,500 --> 00:04:21,579
isolate where it's necessary integrate

00:04:16,780 --> 00:04:25,120
was appropriate but try to find the

00:04:21,579 --> 00:04:26,920
sweet spot between those right yeah it's

00:04:25,120 --> 00:04:28,210
a thing I guess it's a different

00:04:26,920 --> 00:04:29,980
of the world where you come from like

00:04:28,210 --> 00:04:31,270
one comes you come from the left side

00:04:29,980 --> 00:04:33,250
from the complete isolation the other

00:04:31,270 --> 00:04:35,440
one you come from the other side where

00:04:33,250 --> 00:04:36,580
you have complete integration with

00:04:35,440 --> 00:04:39,040
portable service I kind of want to put

00:04:36,580 --> 00:04:41,380
the thing there that yeah you decide how

00:04:39,040 --> 00:04:44,430
much you want of that you would decide

00:04:41,380 --> 00:04:47,860
how much integration isolation you get

00:04:44,430 --> 00:04:51,760
total servers are also very much modular

00:04:47,860 --> 00:04:54,160
right what do I mean by this you know

00:04:51,760 --> 00:04:56,500
when you buy into containers you usually

00:04:54,160 --> 00:05:00,840
buy until like all the concept at once

00:04:56,500 --> 00:05:00,840
right you the bundling the the

00:05:01,050 --> 00:05:07,600
deployment logic the the isolation which

00:05:05,650 --> 00:05:09,070
portable service like I mean it's not

00:05:07,600 --> 00:05:10,420
that there you actually have to really

00:05:09,070 --> 00:05:12,040
buy into them you can then take docker

00:05:10,420 --> 00:05:14,860
for example and turn off the all the

00:05:12,040 --> 00:05:16,120
various things again but yeah where's

00:05:14,860 --> 00:05:17,830
power or service I like from the

00:05:16,120 --> 00:05:19,690
beginning I want to have a modular

00:05:17,830 --> 00:05:20,920
system so you see you have the service

00:05:19,690 --> 00:05:22,450
and you pick exactly what you want do

00:05:20,920 --> 00:05:24,130
you want if you want the resource

00:05:22,450 --> 00:05:26,590
bundling or do you actually don't want

00:05:24,130 --> 00:05:28,360
that but you do want the the the sandbox

00:05:26,590 --> 00:05:30,700
thing or the other way around you want

00:05:28,360 --> 00:05:32,680
the you want the bundling but not the

00:05:30,700 --> 00:05:35,620
isolation so this is a personal modular

00:05:32,680 --> 00:05:37,780
you pick what you want and it's up to

00:05:35,620 --> 00:05:41,230
you to pick the exact same level of

00:05:37,780 --> 00:05:44,250
isolation integration bundling and so on

00:05:41,230 --> 00:05:48,250
different view on this is consider range

00:05:44,250 --> 00:05:49,960
from like on one side integration and on

00:05:48,250 --> 00:05:50,980
the other side or well I approached it

00:05:49,960 --> 00:05:52,660
to it the other way around I see the

00:05:50,980 --> 00:05:54,940
slides and the other direction here okay

00:05:52,660 --> 00:05:56,260
from isolation on the left hand to

00:05:54,940 --> 00:05:58,900
integration on the right hand if you

00:05:56,260 --> 00:06:00,580
would consider that a range like I mean

00:05:58,900 --> 00:06:02,050
if it was a better graphics artists I

00:06:00,580 --> 00:06:04,180
probably would have painted something

00:06:02,050 --> 00:06:06,280
here but I was too lazy and like take

00:06:04,180 --> 00:06:09,160
made it too easy for me to not do this

00:06:06,280 --> 00:06:10,600
so if you have that range then on one

00:06:09,160 --> 00:06:12,370
side you have classic system services

00:06:10,600 --> 00:06:15,040
right they're fully integrated right

00:06:12,370 --> 00:06:17,110
system five in it so system server

00:06:15,040 --> 00:06:19,270
they're full privilege see everything

00:06:17,110 --> 00:06:21,220
can't do everything that's happening on

00:06:19,270 --> 00:06:23,200
system portable system servers the way I

00:06:21,220 --> 00:06:25,360
positioned this new concept affordable

00:06:23,200 --> 00:06:27,610
services docker style micro service is

00:06:25,360 --> 00:06:30,010
somewhere in the middle right full OS

00:06:27,610 --> 00:06:32,290
containers on Alexi you know Alexi is

00:06:30,010 --> 00:06:34,390
like this this original container

00:06:32,290 --> 00:06:37,450
manager in Linux they tried to put a

00:06:34,390 --> 00:06:40,530
focus on on virtualization using

00:06:37,450 --> 00:06:43,840
containers but more in the fash

00:06:40,530 --> 00:06:46,180
for a classic VM virtualization except

00:06:43,840 --> 00:06:48,639
that it's not and then there's the M

00:06:46,180 --> 00:06:49,780
Salik ADM right like true isolation

00:06:48,639 --> 00:06:51,580
where you have a completely virtual

00:06:49,780 --> 00:06:54,730
machine and the communication with the

00:06:51,580 --> 00:06:56,740
outside is exclusively over over

00:06:54,730 --> 00:06:58,750
networking right like so yeah if you

00:06:56,740 --> 00:07:00,700
consider that range costing system

00:06:58,750 --> 00:07:02,350
servers on one end VMs on the other end

00:07:00,700 --> 00:07:05,080
docker somewhere in the middle but

00:07:02,350 --> 00:07:06,370
nobody really knows where it is and part

00:07:05,080 --> 00:07:08,800
of our system services and using I'm

00:07:06,370 --> 00:07:11,110
trying to introduce somewhere to the

00:07:08,800 --> 00:07:12,220
right so just a minute underline this is

00:07:11,110 --> 00:07:13,810
not supposed to be like a

00:07:12,220 --> 00:07:15,520
reimplementation of anything the

00:07:13,810 --> 00:07:20,860
containers do it's just to be something

00:07:15,520 --> 00:07:23,980
right that closes bridge like between

00:07:20,860 --> 00:07:25,690
these camps because you know ultimately

00:07:23,980 --> 00:07:27,520
we live in a world where pretty much

00:07:25,690 --> 00:07:30,250
every software we have nowadays is

00:07:27,520 --> 00:07:32,530
already packaged as a system service

00:07:30,250 --> 00:07:34,060
either it's a native system you service

00:07:32,530 --> 00:07:35,500
or a system v service but it's already

00:07:34,060 --> 00:07:37,600
packages that like at least every

00:07:35,500 --> 00:07:40,530
software that is older than five years

00:07:37,600 --> 00:07:43,240
or something has that so I wanna like

00:07:40,530 --> 00:07:45,370
open up the bridge that people who

00:07:43,240 --> 00:07:47,140
already have done all that work because

00:07:45,370 --> 00:07:50,020
everything is already packed like that

00:07:47,140 --> 00:07:51,700
can you some of the container servers -

00:07:50,020 --> 00:07:57,430
for their stuff without having to buy

00:07:51,700 --> 00:08:00,460
into the whole thing this range I

00:07:57,430 --> 00:08:01,539
pretend to be a one-dimensional thing

00:08:00,460 --> 00:08:02,950
right but of course it's not

00:08:01,539 --> 00:08:06,760
one-dimensional it's multi-dimensional

00:08:02,950 --> 00:08:08,229
so in reality yeah consider what's

00:08:06,760 --> 00:08:10,210
shared and not shared like networking

00:08:08,229 --> 00:08:11,740
for example tends to be shared between

00:08:10,210 --> 00:08:13,750
classic system servers on the host

00:08:11,740 --> 00:08:17,080
obviously right like I mean if you run

00:08:13,750 --> 00:08:19,300
your service engine X on my realm

00:08:17,080 --> 00:08:21,340
machine or something yes I configure the

00:08:19,300 --> 00:08:23,289
realm networking inside of rel and then

00:08:21,340 --> 00:08:24,910
engine exists makes use of this on the

00:08:23,289 --> 00:08:27,550
other hand the networking for VMs for

00:08:24,910 --> 00:08:29,620
example is generally separated right

00:08:27,550 --> 00:08:31,539
like it's you have to configure inside

00:08:29,620 --> 00:08:33,610
of the VM the networking for the VM and

00:08:31,539 --> 00:08:36,789
on the host the networking for the host

00:08:33,610 --> 00:08:40,060
but there's no yeah it's fully isolated

00:08:36,789 --> 00:08:42,280
and then yeah portable system services

00:08:40,060 --> 00:08:43,539
basically gives the either but usually

00:08:42,280 --> 00:08:47,260
you share the networking with the host

00:08:43,539 --> 00:08:49,330
docker style generally tries to push you

00:08:47,260 --> 00:08:50,620
towards not sharing the network but they

00:08:49,330 --> 00:08:53,590
put

00:08:50,620 --> 00:08:54,790
network layers and talk Lexie and kam of

00:08:53,590 --> 00:08:57,070
course have full isolation of the

00:08:54,790 --> 00:08:58,870
network generally but yeah of course all

00:08:57,070 --> 00:09:00,430
of this is blurry right like if I claim

00:08:58,870 --> 00:09:02,140
that this is this way then you can

00:09:00,430 --> 00:09:04,000
totally make the point that in my

00:09:02,140 --> 00:09:05,680
particular setup it's not that way I I

00:09:04,000 --> 00:09:07,870
do not share it but and generally this

00:09:05,680 --> 00:09:10,150
is wet goes right when you think about

00:09:07,870 --> 00:09:13,120
sharing file systems classic system

00:09:10,150 --> 00:09:15,760
services share the the file system fully

00:09:13,120 --> 00:09:18,340
was the host right like if I have an

00:09:15,760 --> 00:09:21,610
engine X installed on my system and it

00:09:18,340 --> 00:09:23,920
opens at CFS tab or any other file on

00:09:21,610 --> 00:09:25,630
the file system it's the same as if as

00:09:23,920 --> 00:09:26,770
tap what are they and the other file in

00:09:25,630 --> 00:09:28,810
a file system that the host sees

00:09:26,770 --> 00:09:31,420
obviously this is different of course

00:09:28,810 --> 00:09:33,280
with VM like if I open a ZFS type in my

00:09:31,420 --> 00:09:35,290
program that runs inside of a VM I will

00:09:33,280 --> 00:09:36,730
see the one on the VM not the one on the

00:09:35,290 --> 00:09:38,500
host right and if you think about the

00:09:36,730 --> 00:09:40,270
other ones docker style you usually

00:09:38,500 --> 00:09:41,530
would not see the ones on the host which

00:09:40,270 --> 00:09:43,150
portable system service I want to give

00:09:41,530 --> 00:09:45,280
you the option right generally you would

00:09:43,150 --> 00:09:47,380
not see them because yeah I suggest

00:09:45,280 --> 00:09:51,400
people use bundling but if you want to

00:09:47,380 --> 00:09:52,570
see them go ahead bid namespaces yeah

00:09:51,400 --> 00:09:55,300
you know pin their size you know kids

00:09:52,570 --> 00:09:57,160
right like the process identifier if you

00:09:55,300 --> 00:10:01,240
live in a VM fully isolated from the

00:09:57,160 --> 00:10:02,950
host right PID one or PDS 47:11 inside

00:10:01,240 --> 00:10:04,600
of the VM is something completely

00:10:02,950 --> 00:10:05,170
different than the same PID on the host

00:10:04,600 --> 00:10:07,390
right

00:10:05,170 --> 00:10:09,460
classic system services no isolation at

00:10:07,390 --> 00:10:12,550
all in that regard if I have PID one of

00:10:09,460 --> 00:10:14,770
47:11 the thing that the container that

00:10:12,550 --> 00:10:16,300
the service sees there and that is

00:10:14,770 --> 00:10:17,980
actually the fact on the host exactly

00:10:16,300 --> 00:10:20,260
the same saying they live in the same PA

00:10:17,980 --> 00:10:24,070
PID name spaces which portable system

00:10:20,260 --> 00:10:26,080
services the idea is PID namespace

00:10:24,070 --> 00:10:28,870
arshad docker style generally does not

00:10:26,080 --> 00:10:33,970
share them and then everything to the

00:10:28,870 --> 00:10:36,250
right on shadow meter init system for

00:10:33,970 --> 00:10:38,140
classic system services of course I mean

00:10:36,250 --> 00:10:40,570
that's what system B is right a manager

00:10:38,140 --> 00:10:42,250
services so if you run as a service on a

00:10:40,570 --> 00:10:44,710
system you service yeah you speak to the

00:10:42,250 --> 00:10:47,170
host system D instance to the health

00:10:44,710 --> 00:10:48,880
init system again on the other end of

00:10:47,170 --> 00:10:50,380
the extreme the VMS they generally run

00:10:48,880 --> 00:10:51,670
their own init systems which can do the

00:10:50,380 --> 00:10:52,870
same thing on the house but it also does

00:10:51,670 --> 00:10:55,570
something completely different can be

00:10:52,870 --> 00:10:58,300
system v in it on the on the

00:10:55,570 --> 00:10:59,920
a virtual machine and on the host can be

00:10:58,300 --> 00:11:01,750
systemd if you look at the ones that are

00:10:59,920 --> 00:11:03,430
in the middle docker usually tries to

00:11:01,750 --> 00:11:05,440
avoid it in a system but if you would

00:11:03,430 --> 00:11:07,450
call them that they have an init system

00:11:05,440 --> 00:11:09,300
it's probably their own one that stunts

00:11:07,450 --> 00:11:12,940
in it

00:11:09,300 --> 00:11:14,680
false arrest containers Allah Lexi they

00:11:12,940 --> 00:11:16,420
do run their own init system however and

00:11:14,680 --> 00:11:19,240
that can be distinct from the host right

00:11:16,420 --> 00:11:24,520
so you put the line somewhere else then

00:11:19,240 --> 00:11:25,930
device access you know in device acts

00:11:24,520 --> 00:11:29,130
that I mean simply access to something

00:11:25,930 --> 00:11:31,600
like the sound card or network device or

00:11:29,130 --> 00:11:35,740
hard-disk or something like this if you

00:11:31,600 --> 00:11:37,120
do KDM you're unlikely to get direct

00:11:35,740 --> 00:11:38,590
access to the real hardware I mean now

00:11:37,120 --> 00:11:39,910
our mess it's how you can do this now

00:11:38,590 --> 00:11:41,110
but it's always like you have to do

00:11:39,910 --> 00:11:42,750
extra work to do this and then it's

00:11:41,110 --> 00:11:45,730
still not the real hardware but some

00:11:42,750 --> 00:11:47,380
password weirdo thing if you do classic

00:11:45,730 --> 00:11:51,850
system servers obviously you get full

00:11:47,380 --> 00:11:54,160
access yeah if you open def SDA you get

00:11:51,850 --> 00:11:56,050
def SDA the real thing from the host if

00:11:54,160 --> 00:11:57,330
you now think about the sink in the

00:11:56,050 --> 00:12:01,210
middle

00:11:57,330 --> 00:12:02,680
Lexy generally is like vm yeah you

00:12:01,210 --> 00:12:06,520
probably won't even have def SDA

00:12:02,680 --> 00:12:07,540
so is docker and so like particle system

00:12:06,520 --> 00:12:09,670
service is somewhere in the middle I

00:12:07,540 --> 00:12:11,350
give you both options you can open up

00:12:09,670 --> 00:12:13,000
device access in which case you see the

00:12:11,350 --> 00:12:14,980
same slash staff with the full access

00:12:13,000 --> 00:12:16,630
mode as you like can you also choose to

00:12:14,980 --> 00:12:17,890
not do that and then you see a little

00:12:16,630 --> 00:12:20,710
reduced one which just contains

00:12:17,890 --> 00:12:25,030
definitely differ and 'm but not the

00:12:20,710 --> 00:12:27,250
real hardware logging if you do classic

00:12:25,030 --> 00:12:29,200
system services the logging of your

00:12:27,250 --> 00:12:31,360
service goes to the system blocks right

00:12:29,200 --> 00:12:33,280
so logging is shed every every in the

00:12:31,360 --> 00:12:34,990
native system running on a system e

00:12:33,280 --> 00:12:37,210
system puts its logging through the

00:12:34,990 --> 00:12:39,250
journal and wherever that ends up in if

00:12:37,210 --> 00:12:42,160
you do it on a VM vlogging is entirely

00:12:39,250 --> 00:12:44,050
separate right the VMS they log into

00:12:42,160 --> 00:12:45,460
them their own vlogging time and that

00:12:44,050 --> 00:12:47,560
writes it to the hard disk of the

00:12:45,460 --> 00:12:49,990
virtual machine it's not shared with the

00:12:47,560 --> 00:12:52,150
host if you then look at the things in

00:12:49,990 --> 00:12:53,800
the between there Lexi as usually it's

00:12:52,150 --> 00:12:56,500
logging right the stuff that happens

00:12:53,800 --> 00:12:59,530
inside of this kind of containerization

00:12:56,500 --> 00:13:00,900
and up inside of it you have to do extra

00:12:59,530 --> 00:13:02,050
work to actually pull it out of that

00:13:00,900 --> 00:13:04,060
docker

00:13:02,050 --> 00:13:06,760
usually yes the

00:13:04,060 --> 00:13:08,740
she answered was the host but not quiet

00:13:06,760 --> 00:13:10,900
so you like everything that docker

00:13:08,740 --> 00:13:12,280
containers lock ends up in the system

00:13:10,900 --> 00:13:14,320
locks eventually even though they don't

00:13:12,280 --> 00:13:17,110
get access to the system locks directly

00:13:14,320 --> 00:13:19,840
paulla system services they share the

00:13:17,110 --> 00:13:21,630
locks was a host the idea really is that

00:13:19,840 --> 00:13:23,860
everything ends up in the journal so

00:13:21,630 --> 00:13:25,870
yeah I hope you kind of got the idea

00:13:23,860 --> 00:13:29,730
what I mean was integration isolation

00:13:25,870 --> 00:13:31,690
and that it's not a linear

00:13:29,730 --> 00:13:33,850
one-dimensional thing it's more like a

00:13:31,690 --> 00:13:37,870
couple of check boxes and the different

00:13:33,850 --> 00:13:40,990
solutions of virtualization from

00:13:37,870 --> 00:13:43,600
containers to EMS like from classic

00:13:40,990 --> 00:13:46,260
system services to VMs take different

00:13:43,600 --> 00:13:48,940
boxes and in different areas

00:13:46,260 --> 00:13:50,980
okay so much about the integration and

00:13:48,940 --> 00:13:53,640
kind of where I want to put it position

00:13:50,980 --> 00:13:56,650
the portable system services concept

00:13:53,640 --> 00:13:58,090
let's talk about a a little bit about by

00:13:56,650 --> 00:13:59,080
the way again if anybody has any

00:13:58,090 --> 00:14:02,350
questions about this stuff

00:13:59,080 --> 00:14:04,840
totally interrupt me one of the girls

00:14:02,350 --> 00:14:06,220
which potable system services before we

00:14:04,840 --> 00:14:08,770
actually come to the technical stuff how

00:14:06,220 --> 00:14:10,960
it's all implemented is leave no

00:14:08,770 --> 00:14:13,270
artifacts right this is something that

00:14:10,960 --> 00:14:16,000
container engines eternally provide what

00:14:13,270 --> 00:14:17,500
do I mean by that a classic system

00:14:16,000 --> 00:14:20,800
services generally do not provide that

00:14:17,500 --> 00:14:22,720
for example if I start a system service

00:14:20,800 --> 00:14:26,110
I first have to install it how do I do

00:14:22,720 --> 00:14:28,450
that with rpm if I do that with rpm then

00:14:26,110 --> 00:14:30,130
this will create a user usually right

00:14:28,450 --> 00:14:33,760
like a system user that this stuff runs

00:14:30,130 --> 00:14:35,200
that on ral and fedora and all the Linux

00:14:33,760 --> 00:14:39,580
distributions that they all right now

00:14:35,200 --> 00:14:41,470
these system users stay around right why

00:14:39,580 --> 00:14:43,330
do they stay around because if these

00:14:41,470 --> 00:14:45,190
users ever created a file anywhere in

00:14:43,330 --> 00:14:47,580
the file system these files will be

00:14:45,190 --> 00:14:49,870
owned by the same UID since we cannot

00:14:47,580 --> 00:14:52,200
easily figure out which files those are

00:14:49,870 --> 00:14:55,390
because not ask for all file systems are

00:14:52,200 --> 00:14:58,720
accessible and all the time and because

00:14:55,390 --> 00:14:59,680
it's not indexed that way around we have

00:14:58,720 --> 00:15:01,600
this rule and all the distribution

00:14:59,680 --> 00:15:03,430
system users will never delete it right

00:15:01,600 --> 00:15:05,350
if you create a system user once it

00:15:03,430 --> 00:15:07,450
stays around forever that's an artifact

00:15:05,350 --> 00:15:08,650
right and that couple of other artifacts

00:15:07,450 --> 00:15:11,770
like that like for example if I would

00:15:08,650 --> 00:15:15,160
install there's some weird em and it

00:15:11,770 --> 00:15:15,820
creates a system v IPC object and then

00:15:15,160 --> 00:15:16,279
you stop it

00:15:15,820 --> 00:15:17,870
and

00:15:16,279 --> 00:15:19,879
around and he deleted and still stays

00:15:17,870 --> 00:15:22,129
around or if it creates files on slash

00:15:19,879 --> 00:15:23,540
temp ride you install it you run it

00:15:22,129 --> 00:15:25,850
creates some files and slash temp

00:15:23,540 --> 00:15:28,129
temporary stuff you stop it you remove

00:15:25,850 --> 00:15:32,209
it these time files will stay around so

00:15:28,129 --> 00:15:34,009
one of the girls of portable services is

00:15:32,209 --> 00:15:36,860
to put the emphasis on leaving no

00:15:34,009 --> 00:15:39,319
artifacts right taking classic service

00:15:36,860 --> 00:15:42,410
management and adding this concept that

00:15:39,319 --> 00:15:46,249
we do not leave our effects around and

00:15:42,410 --> 00:15:47,569
that when a service is stopped or the

00:15:46,249 --> 00:15:50,660
latest when it's removed from the system

00:15:47,569 --> 00:15:52,910
everything's gone no user stay around no

00:15:50,660 --> 00:15:54,889
file stay around no IPC objects stay

00:15:52,910 --> 00:15:57,470
around no nothing stays around so that

00:15:54,889 --> 00:15:57,949
you're basically where you've started

00:15:57,470 --> 00:15:59,269
from

00:15:57,949 --> 00:16:00,680
yeah as mentioned containers do

00:15:59,269 --> 00:16:02,420
generally provide this out-of-the-box

00:16:00,680 --> 00:16:05,149
right Lex this is about adding something

00:16:02,420 --> 00:16:07,759
that this world already had to the other

00:16:05,149 --> 00:16:09,259
classic world there's one exception

00:16:07,759 --> 00:16:10,370
though about the outer effects this

00:16:09,259 --> 00:16:12,019
thing that I don't want to remove the

00:16:10,370 --> 00:16:13,730
other logs because those are generally

00:16:12,019 --> 00:16:15,230
useful you actually do want to know that

00:16:13,730 --> 00:16:17,300
once upon a time that was a system user

00:16:15,230 --> 00:16:22,100
in the service rent so locks are not

00:16:17,300 --> 00:16:24,170
removed what this effectively means is

00:16:22,100 --> 00:16:26,269
we need to bind life cycles together

00:16:24,170 --> 00:16:28,279
right because this is something we never

00:16:26,269 --> 00:16:31,250
did on UNIX so it's really nicely right

00:16:28,279 --> 00:16:33,259
like the life cycle of a service right

00:16:31,250 --> 00:16:35,389
like the time where it's installed all

00:16:33,259 --> 00:16:38,420
the time where it's running is in no way

00:16:35,389 --> 00:16:40,699
bound to the life cycle of files it's a

00:16:38,420 --> 00:16:44,029
no way bound to the life cycle of system

00:16:40,699 --> 00:16:46,309
users and this year is the goal to bind

00:16:44,029 --> 00:16:48,230
these together right together right so

00:16:46,309 --> 00:16:52,059
that when the service goes down we

00:16:48,230 --> 00:16:54,019
remove everything else and vice versa

00:16:52,059 --> 00:16:57,589
another goal is everything in one place

00:16:54,019 --> 00:16:59,149
right like on UNIX we have traditionally

00:16:57,589 --> 00:17:00,769
like if you install an RPM of nginx

00:16:59,149 --> 00:17:03,980
right it puts files everywhere all over

00:17:00,769 --> 00:17:06,439
the place right user use lip Etsy var

00:17:03,980 --> 00:17:08,419
wherever it wants to first portable

00:17:06,439 --> 00:17:10,730
services we try to like the idea is to

00:17:08,419 --> 00:17:14,990
to focus on classic services but try to

00:17:10,730 --> 00:17:17,510
enable people to isolate their stuff

00:17:14,990 --> 00:17:20,209
from the rest of system more strictly

00:17:17,510 --> 00:17:22,189
what does this effectively mean chroot

00:17:20,209 --> 00:17:24,500
right everybody knows true true it's

00:17:22,189 --> 00:17:26,240
this UNIX thing that always existed it's

00:17:24,500 --> 00:17:29,680
at the core of the ideas of containers

00:17:26,240 --> 00:17:32,260
but for classic system services it's

00:17:29,680 --> 00:17:34,420
particularly used like I mean there are

00:17:32,260 --> 00:17:36,310
some servers which do this like I think

00:17:34,420 --> 00:17:37,630
postfix does a lot he does in a couple

00:17:36,310 --> 00:17:39,760
of other system service does but

00:17:37,630 --> 00:17:43,330
generally corroding is not the default

00:17:39,760 --> 00:17:45,520
on classic system services with portable

00:17:43,330 --> 00:17:47,890
services the goal is to make this happen

00:17:45,520 --> 00:17:50,530
right like so that the the emphasis

00:17:47,890 --> 00:17:53,380
really is on yeah everything in one

00:17:50,530 --> 00:17:54,640
place but again no necessary it is a

00:17:53,380 --> 00:17:56,860
need that you actually have to do this

00:17:54,640 --> 00:17:58,420
we just want to make it easy and move

00:17:56,860 --> 00:18:00,790
these concept that has been around for

00:17:58,420 --> 00:18:03,190
on UNIX for a long time more into the

00:18:00,790 --> 00:18:04,480
focus of attention and suggestion that

00:18:03,190 --> 00:18:05,790
yeah maybe that's how it should do you

00:18:04,480 --> 00:18:08,710
stuff

00:18:05,790 --> 00:18:10,590
another thing that I let this real goal

00:18:08,710 --> 00:18:14,200
of the potable services concept is I

00:18:10,590 --> 00:18:17,860
think they it's important that they feel

00:18:14,200 --> 00:18:19,660
like native services so they I mean

00:18:17,860 --> 00:18:20,950
right now a system he supports two kinds

00:18:19,660 --> 00:18:23,730
of services right like system five

00:18:20,950 --> 00:18:26,560
services and every system services and

00:18:23,730 --> 00:18:28,120
you control them regardless what kind of

00:18:26,560 --> 00:18:30,130
type they have the same way their system

00:18:28,120 --> 00:18:32,140
control for it so you can start them you

00:18:30,130 --> 00:18:34,060
can stop them like like affect the

00:18:32,140 --> 00:18:35,950
lifecycle of it you can do resource

00:18:34,060 --> 00:18:38,380
management for them you see the logs

00:18:35,950 --> 00:18:40,470
always the same way the idears for the

00:18:38,380 --> 00:18:42,940
portable services stuff if you now use

00:18:40,470 --> 00:18:47,050
stronger sandboxing the bundling and so

00:18:42,940 --> 00:18:48,340
on that yeah it should still feel like a

00:18:47,050 --> 00:18:49,840
native service so that you still have

00:18:48,340 --> 00:18:51,640
the same controls for resource

00:18:49,840 --> 00:18:53,560
management logging blah blah blah that

00:18:51,640 --> 00:18:56,260
you had for the classic system services

00:18:53,560 --> 00:18:59,970
because they are classic system services

00:18:56,260 --> 00:19:04,300
ultimately okay so much about what it is

00:18:59,970 --> 00:19:06,970
well let's take a step back at this

00:19:04,300 --> 00:19:10,180
point and ask why even bother right like

00:19:06,970 --> 00:19:11,470
I mean Quinn is already exist so I'm of

00:19:10,180 --> 00:19:13,240
course a service management guy right

00:19:11,470 --> 00:19:15,580
like because yeah I'm one of the

00:19:13,240 --> 00:19:16,930
persistent people for me it's like the

00:19:15,580 --> 00:19:19,900
next step for service management because

00:19:16,930 --> 00:19:21,310
I mean so as management is always going

00:19:19,900 --> 00:19:22,840
to be necessary right like well because

00:19:21,310 --> 00:19:25,510
there's always these low-level system

00:19:22,840 --> 00:19:27,340
components right because you need to run

00:19:25,510 --> 00:19:28,600
your container manager you give it in

00:19:27,340 --> 00:19:30,610
his instance like these Oh system

00:19:28,600 --> 00:19:34,630
services and they generally need stuff

00:19:30,610 --> 00:19:36,400
first to be up right so I think service

00:19:34,630 --> 00:19:37,930
management is kind of like its its core

00:19:36,400 --> 00:19:39,900
of the us design and it's not going to

00:19:37,930 --> 00:19:42,640
go away

00:19:39,900 --> 00:19:43,090
but we also don't live in right here and

00:19:42,640 --> 00:19:45,250
you need to

00:19:43,090 --> 00:19:46,330
see what other things people do so for

00:19:45,250 --> 00:19:48,790
me it's the next step for service

00:19:46,330 --> 00:19:50,290
management pudding-like getting the idea

00:19:48,790 --> 00:19:52,840
so what's good about containers and

00:19:50,290 --> 00:19:55,990
adapting them to classic service

00:19:52,840 --> 00:19:57,330
management because they're useful also

00:19:55,990 --> 00:20:01,120
yeah I'm already mentioned this kind of

00:19:57,330 --> 00:20:02,710
this um takes benefit of the fact that

00:20:01,120 --> 00:20:04,570
pretty much everything that we have a

00:20:02,710 --> 00:20:06,040
Linux right now already has a system you

00:20:04,570 --> 00:20:07,630
saw this file and if it hasn't it has a

00:20:06,040 --> 00:20:08,970
system five in its crib but that's kind

00:20:07,630 --> 00:20:12,210
of same thing right

00:20:08,970 --> 00:20:14,380
so yeah ton lots of stuff is nowadays

00:20:12,210 --> 00:20:15,880
packaged as a docker container or OCI

00:20:14,380 --> 00:20:18,370
containers I'm telling you this but

00:20:15,880 --> 00:20:19,840
ultimately yeah probably even more stuff

00:20:18,370 --> 00:20:22,600
already has a system you serve as well

00:20:19,840 --> 00:20:24,820
so if we build on that and just allow

00:20:22,600 --> 00:20:26,170
people to take system B services that

00:20:24,820 --> 00:20:28,000
already have a service file that makes

00:20:26,170 --> 00:20:30,700
them into something new that that's the

00:20:28,000 --> 00:20:34,060
isolation and adds the the the bundling

00:20:30,700 --> 00:20:35,590
then I think it's a nice upgrade to what

00:20:34,060 --> 00:20:40,030
we already have another complete

00:20:35,590 --> 00:20:41,800
revolution yeah Ivan's already used is

00:20:40,030 --> 00:20:45,400
used to service already let's just make

00:20:41,800 --> 00:20:47,230
them more powerful right it's yeah it's

00:20:45,400 --> 00:20:48,340
a thing of learning curve I mean the

00:20:47,230 --> 00:20:50,440
learning curve for is adopting system

00:20:48,340 --> 00:20:52,240
yeah I guess was steep originally for

00:20:50,440 --> 00:20:54,880
many people but now we're there already

00:20:52,240 --> 00:20:56,920
right so let's open this up and just a

00:20:54,880 --> 00:20:58,660
little bit sprinkles of Awesomeness on

00:20:56,920 --> 00:21:02,800
top to make it more useful for them

00:20:58,660 --> 00:21:05,320
normal admin and in something else that

00:21:02,800 --> 00:21:07,240
I have in mind is like a couple of Def

00:21:05,320 --> 00:21:08,560
Con office ago there was always talk

00:21:07,240 --> 00:21:12,210
about super privilege containers right

00:21:08,560 --> 00:21:15,640
so promote containers was about shipping

00:21:12,210 --> 00:21:18,100
highly privileged system components as

00:21:15,640 --> 00:21:20,950
containers right they wanted to use

00:21:18,100 --> 00:21:22,000
docker add back at the time for this

00:21:20,950 --> 00:21:24,940
where the basic tenets of all the

00:21:22,000 --> 00:21:26,380
security stuff and it should have full

00:21:24,940 --> 00:21:28,360
exposure to the system and it's kind of

00:21:26,380 --> 00:21:29,830
like so you take this new tool and you

00:21:28,360 --> 00:21:31,930
remove everything that you can remove

00:21:29,830 --> 00:21:33,970
and try to use it because the only thing

00:21:31,930 --> 00:21:35,920
they actually were interested in was the

00:21:33,970 --> 00:21:39,880
bundling feature that containers

00:21:35,920 --> 00:21:42,370
provided so to me this is like the

00:21:39,880 --> 00:21:44,230
perfect use case for portable services

00:21:42,370 --> 00:21:47,200
right because it allows you to bundle

00:21:44,230 --> 00:21:49,180
stuff up but you still because it is a

00:21:47,200 --> 00:21:51,250
regular system service get the exact the

00:21:49,180 --> 00:21:54,160
full integrations the host system that

00:21:51,250 --> 00:21:55,840
you want to the point where you want it

00:21:54,160 --> 00:21:56,710
right so you can isolate as much as you

00:21:55,840 --> 00:21:58,390
want

00:21:56,710 --> 00:22:00,010
integrate as much as you want you pick

00:21:58,390 --> 00:22:01,750
the sweet spot that is exactly right for

00:22:00,010 --> 00:22:04,510
your service right so if you for example

00:22:01,750 --> 00:22:06,340
hack on storage stuff with the width

00:22:04,510 --> 00:22:08,020
which is one of the candidates for super

00:22:06,340 --> 00:22:10,150
privileged containers you can decide

00:22:08,020 --> 00:22:12,670
okay I want to ship my own lip see in my

00:22:10,150 --> 00:22:14,620
own whatever else I want to ship but I

00:22:12,670 --> 00:22:17,280
also want to be have want to have access

00:22:14,620 --> 00:22:19,900
to unifor whatever of the of the host

00:22:17,280 --> 00:22:21,190
with portable server that's kind of

00:22:19,900 --> 00:22:25,050
natural because you just write it down

00:22:21,190 --> 00:22:28,180
in service violence that's how it works

00:22:25,050 --> 00:22:30,420
yeah and another reason why I think

00:22:28,180 --> 00:22:33,160
portable service manner is that as

00:22:30,420 --> 00:22:34,870
mentioned containers are to some level

00:22:33,160 --> 00:22:37,480
but isolation right it's isolating of

00:22:34,870 --> 00:22:41,740
the to the host and that that is good in

00:22:37,480 --> 00:22:42,970
in many cases but it's also very like I

00:22:41,740 --> 00:22:44,530
mean for example in super privileged

00:22:42,970 --> 00:22:47,470
container use case like if you actually

00:22:44,530 --> 00:22:48,820
do have highly privileged stuff then the

00:22:47,470 --> 00:22:50,920
integration would actually be a good

00:22:48,820 --> 00:22:52,840
thing not a bad thing so you shouldn't

00:22:50,920 --> 00:22:54,310
be fighting or it's the technology that

00:22:52,840 --> 00:22:56,740
actually is about isolation and then

00:22:54,310 --> 00:22:58,360
remove the isolation so yeah depending

00:22:56,740 --> 00:23:00,730
on your use case really depending on

00:22:58,360 --> 00:23:03,630
your use case the integration is often

00:23:00,730 --> 00:23:06,280
good and not bad and hence we should

00:23:03,630 --> 00:23:07,240
emphasize it and make it easy for you

00:23:06,280 --> 00:23:09,850
that if you want to build your stuff

00:23:07,240 --> 00:23:16,810
this way and many people do they can

00:23:09,850 --> 00:23:19,600
write so much about the use case I hope

00:23:16,810 --> 00:23:20,700
that made sense and again if anybody has

00:23:19,600 --> 00:23:23,350
any questions

00:23:20,700 --> 00:23:25,900
totally awesome I can't be that you guys

00:23:23,350 --> 00:23:27,730
don't have any questions ok let's get a

00:23:25,900 --> 00:23:29,740
little bit more technical I kind of

00:23:27,730 --> 00:23:33,130
indicated this already the goal really

00:23:29,740 --> 00:23:34,930
is that sooner or later or not sooner or

00:23:33,130 --> 00:23:37,440
later we actually already do we supports

00:23:34,930 --> 00:23:40,570
three service formats classic system 5

00:23:37,440 --> 00:23:42,550
native services meaning classic system

00:23:40,570 --> 00:23:46,450
II services and these new portable

00:23:42,550 --> 00:23:48,850
services what's also important to notice

00:23:46,450 --> 00:23:53,020
is the abilities the buildings blocks

00:23:48,850 --> 00:23:54,160
that the system 5 services the native

00:23:53,020 --> 00:23:55,480
service and the portable servers are

00:23:54,160 --> 00:23:58,540
built from or actually intelligent

00:23:55,480 --> 00:24:00,760
nearing right though these three are the

00:23:58,540 --> 00:24:03,700
ones we will and already do support

00:24:00,760 --> 00:24:05,920
natively in system D you can use the

00:24:03,700 --> 00:24:08,080
same building blocks to generate

00:24:05,920 --> 00:24:09,010
completely different concepts like for

00:24:08,080 --> 00:24:09,750
example you could probably write a

00:24:09,010 --> 00:24:12,120
generator that

00:24:09,750 --> 00:24:15,930
runs snaps or whatever else as a system

00:24:12,120 --> 00:24:17,580
service if you like to do that so yeah

00:24:15,930 --> 00:24:20,910
after this we want to support these

00:24:17,580 --> 00:24:23,130
three out of the box but also be so

00:24:20,910 --> 00:24:26,190
modular and so generic that you can

00:24:23,130 --> 00:24:30,440
build any kind of container this

00:24:26,190 --> 00:24:30,440
management thing out of it that you like

00:24:30,530 --> 00:24:36,330
let's talk now about bundling

00:24:32,840 --> 00:24:38,550
specifically disk images you know disk

00:24:36,330 --> 00:24:39,990
images like this we like for containers

00:24:38,550 --> 00:24:43,200
there's now these OCI stuff and it's

00:24:39,990 --> 00:24:45,600
it's it's these are new specs that

00:24:43,200 --> 00:24:46,950
people wrote and they use all fancy Jase

00:24:45,600 --> 00:24:47,370
and stuff and things like that and it's

00:24:46,950 --> 00:24:51,030
all great

00:24:47,370 --> 00:24:52,860
I was my portable service I want to

00:24:51,030 --> 00:24:55,050
provide bundling but I also do not want

00:24:52,860 --> 00:24:56,790
to write a new specification right so

00:24:55,050 --> 00:24:58,640
the emphasis of the portable server

00:24:56,790 --> 00:25:02,580
stuff is about not doing that

00:24:58,640 --> 00:25:06,330
portable services do not introduce any

00:25:02,580 --> 00:25:07,980
nuke format instead like so let's avoid

00:25:06,330 --> 00:25:11,790
defining something you instead we just

00:25:07,980 --> 00:25:14,100
use simple directories or GPT partition

00:25:11,790 --> 00:25:16,650
like disk images containing a Squasher

00:25:14,100 --> 00:25:19,680
fats for example the emphasis being

00:25:16,650 --> 00:25:20,970
these are formats like nobody define

00:25:19,680 --> 00:25:22,200
anything new there these are the four

00:25:20,970 --> 00:25:25,710
words of the Linux kernel natively in a

00:25:22,200 --> 00:25:27,210
stance right if I if I unpack ATAR then

00:25:25,710 --> 00:25:28,920
it's just a tree in the filesystem and

00:25:27,210 --> 00:25:30,990
that point it's good enough for for

00:25:28,920 --> 00:25:33,350
portable services it is already one it

00:25:30,990 --> 00:25:36,120
doesn't need any additional metadata

00:25:33,350 --> 00:25:38,490
similar if I have a disk image and has

00:25:36,120 --> 00:25:40,260
GPT on it and it has some files of some

00:25:38,490 --> 00:25:41,940
of the deluxe kernel supports such as

00:25:40,260 --> 00:25:44,910
squash FS or XT for whatever you like

00:25:41,940 --> 00:25:46,860
good enough for portable services it's

00:25:44,910 --> 00:25:50,070
all it needs right so the emphasis

00:25:46,860 --> 00:25:52,320
really is there is no concept like like

00:25:50,070 --> 00:25:54,570
no complexity in that anyway it just

00:25:52,320 --> 00:25:56,420
uses the format's that have been

00:25:54,570 --> 00:25:58,560
established since 20 years right like

00:25:56,420 --> 00:26:00,720
nothing of this isn't anyway new it's

00:25:58,560 --> 00:26:04,320
just you this the concept that already

00:26:00,720 --> 00:26:06,510
have linear the idea is then to run the

00:26:04,320 --> 00:26:08,010
system services directly from them right

00:26:06,510 --> 00:26:09,990
like so insistently there's root image

00:26:08,010 --> 00:26:13,350
and root directory root directory is the

00:26:09,990 --> 00:26:14,850
just how we expose classic to root root

00:26:13,350 --> 00:26:17,220
images kind of like it but instead of

00:26:14,850 --> 00:26:19,650
you specify a directory where the

00:26:17,220 --> 00:26:21,030
services run from you specify disk image

00:26:19,650 --> 00:26:22,260
right the disk images then loopback

00:26:21,030 --> 00:26:24,750
mount it and

00:26:22,260 --> 00:26:26,940
figure out what concepts are in there

00:26:24,750 --> 00:26:28,470
and then it might eventually does

00:26:26,940 --> 00:26:29,820
something like it's a root actually do

00:26:28,470 --> 00:26:33,900
this file system namespace but that's

00:26:29,820 --> 00:26:36,870
limitation detail yeah so the disk

00:26:33,900 --> 00:26:38,640
imagers are not anything new they are

00:26:36,870 --> 00:26:40,200
you can create them and all the tools

00:26:38,640 --> 00:26:44,100
you already know with F disk

00:26:40,200 --> 00:26:46,260
where's X 84 for matters with whatever

00:26:44,100 --> 00:26:49,770
you like right doesn't matter if it's in

00:26:46,260 --> 00:26:51,390
some way I something that love the Linux

00:26:49,770 --> 00:26:57,480
kernel ethically understands it's fine

00:26:51,390 --> 00:27:00,809
there is no additional metadata yeah so

00:26:57,480 --> 00:27:02,549
it's ultimately true but in usable right

00:27:00,809 --> 00:27:03,809
like because I mean some people as

00:27:02,549 --> 00:27:04,890
mentioned did use to route before

00:27:03,809 --> 00:27:07,620
containers were there but it's always

00:27:04,890 --> 00:27:09,150
it's a hugely manual process and had a

00:27:07,620 --> 00:27:11,280
lot of shortcomings like for example the

00:27:09,150 --> 00:27:12,390
the password databases and things like

00:27:11,280 --> 00:27:16,530
that we're out of sync so there was

00:27:12,390 --> 00:27:19,169
always quite problematic with yeah

00:27:16,530 --> 00:27:21,240
whisper about service we try to fix many

00:27:19,169 --> 00:27:23,520
of these aspects that are highly

00:27:21,240 --> 00:27:24,929
problematic to use what's also

00:27:23,520 --> 00:27:28,320
interesting interesting by the way is

00:27:24,929 --> 00:27:30,090
because we use disk images right we use

00:27:28,320 --> 00:27:32,640
the stuff that the Linux kernel already

00:27:30,090 --> 00:27:35,190
supports natively we also can open it up

00:27:32,640 --> 00:27:36,870
to taking benefit of all the fancy stuff

00:27:35,190 --> 00:27:41,100
that the kernel supports there for

00:27:36,870 --> 00:27:43,350
example yeah a portable service and

00:27:41,100 --> 00:27:45,299
system B can be a luxe encrypted disk

00:27:43,350 --> 00:27:47,490
image right in which case you suddenly

00:27:45,299 --> 00:27:50,640
have a service that only when it's

00:27:47,490 --> 00:27:52,080
activated it becomes accessible and all

00:27:50,640 --> 00:27:54,990
the data or the stores internally it's

00:27:52,080 --> 00:27:56,610
not leaked to anyone or even better and

00:27:54,990 --> 00:27:59,700
this is already supported and in system

00:27:56,610 --> 00:28:01,350
Li you can have a Verity enabled disk

00:27:59,700 --> 00:28:04,169
image Verity for you those who don't

00:28:01,350 --> 00:28:05,549
know is this scheme and the Google came

00:28:04,169 --> 00:28:08,790
up with this for the Chromebook so

00:28:05,549 --> 00:28:11,610
basically allows you to say that every

00:28:08,790 --> 00:28:14,309
access to some file system is verified

00:28:11,610 --> 00:28:15,630
on access and if it doesn't match some

00:28:14,309 --> 00:28:19,559
top-level hats that is ultimately

00:28:15,630 --> 00:28:21,150
pre-configured the the access is denied

00:28:19,559 --> 00:28:22,320
so the idea the use case of this of

00:28:21,150 --> 00:28:23,630
course they they wanted to have that for

00:28:22,320 --> 00:28:27,179
Chromebook so that you can have a

00:28:23,630 --> 00:28:30,929
completely secure system where the whole

00:28:27,179 --> 00:28:33,120
Wes is validated by the hardware and the

00:28:30,929 --> 00:28:35,220
hardware will only boot Google versions

00:28:33,120 --> 00:28:35,879
of the OS right we can use this here

00:28:35,220 --> 00:28:37,589
because it's already

00:28:35,879 --> 00:28:39,029
Luna's colonel and apply it to a

00:28:37,589 --> 00:28:40,769
portable services because we can then

00:28:39,029 --> 00:28:42,949
basically say that yeah this system for

00:28:40,769 --> 00:28:45,929
example shall only be able to run

00:28:42,949 --> 00:28:47,759
services that are signed and validated

00:28:45,929 --> 00:28:49,409
on access by Red Hat or something else

00:28:47,759 --> 00:28:52,259
but this is just a side note the fact

00:28:49,409 --> 00:28:54,569
that we by sticking to lineage kernel

00:28:52,259 --> 00:28:56,459
concept there that we have these

00:28:54,569 --> 00:29:00,899
abilities it's kind of nice but it's not

00:28:56,459 --> 00:29:03,599
core to the idea of portable services

00:29:00,899 --> 00:29:05,269
now you wonder I keep emphasizing the

00:29:03,599 --> 00:29:07,289
fact that there's no new metadata

00:29:05,269 --> 00:29:08,639
attached to it now you wonder like but

00:29:07,289 --> 00:29:10,019
it needs some metadata I like to know

00:29:08,639 --> 00:29:14,849
what is actually supposed to start with

00:29:10,019 --> 00:29:16,729
it the logic here is yeah we already

00:29:14,849 --> 00:29:19,709
have lots of metadata on the file system

00:29:16,729 --> 00:29:21,839
anyway because it's that's what we do on

00:29:19,709 --> 00:29:25,379
Linux operating system let's just use

00:29:21,839 --> 00:29:26,969
them for that specifically we'll ask

00:29:25,379 --> 00:29:30,359
them and just carry system to unit files

00:29:26,969 --> 00:29:31,769
already so let's just use them and Linux

00:29:30,359 --> 00:29:33,299
file system regardless how he created

00:29:31,769 --> 00:29:35,279
them if you created them from Pharrell

00:29:33,299 --> 00:29:36,659
or for Debian or Fedora it doesn't

00:29:35,279 --> 00:29:39,719
really matter they also have this user

00:29:36,659 --> 00:29:41,759
libris release file that describes the

00:29:39,719 --> 00:29:45,690
distribution that installed or even the

00:29:41,759 --> 00:29:47,909
image and further detail so taking

00:29:45,690 --> 00:29:50,909
benefit of the fact that a lot of

00:29:47,909 --> 00:29:52,440
metadata is already implicitly embedded

00:29:50,909 --> 00:29:54,509
in all the distributions that have been

00:29:52,440 --> 00:29:56,690
released in the last five years we don't

00:29:54,509 --> 00:29:59,609
need to be fine any new metadata right

00:29:56,690 --> 00:30:02,129
so now these two things come together no

00:29:59,609 --> 00:30:05,399
new file system format no OCI layering

00:30:02,129 --> 00:30:08,129
table all a ufs unpacking whatever no

00:30:05,399 --> 00:30:10,169
new metadata on top of it because we

00:30:08,129 --> 00:30:13,399
already have all that OS release unit

00:30:10,169 --> 00:30:15,389
files let's just put this together and

00:30:13,399 --> 00:30:18,119
yeah suddenly have something that is

00:30:15,389 --> 00:30:19,469
like containers but not containers and a

00:30:18,119 --> 00:30:22,859
lot more little level and a lot more

00:30:19,469 --> 00:30:25,729
fine-grained okay any questions so far

00:30:22,859 --> 00:30:28,319
about that nobody has questions

00:30:25,729 --> 00:30:30,089
otherwise the next detail sandboxing

00:30:28,319 --> 00:30:32,039
right like this was on the initial

00:30:30,089 --> 00:30:34,769
slides I put up like the sandbox in one

00:30:32,039 --> 00:30:38,069
of the three key goals of this what does

00:30:34,769 --> 00:30:39,929
it effectively mean over the last couple

00:30:38,069 --> 00:30:41,639
of years we added lots of sandbox and

00:30:39,929 --> 00:30:43,649
functionalities to system lis services a

00:30:41,639 --> 00:30:44,940
couple of them are listed here I'm not

00:30:43,649 --> 00:30:47,789
sure I want to go into too much detail

00:30:44,940 --> 00:30:49,440
these settings you can already turn on

00:30:47,789 --> 00:30:51,330
on your regular system services and

00:30:49,440 --> 00:30:52,379
have been doing that you could do that

00:30:51,330 --> 00:30:54,000
for the last five years or something

00:30:52,379 --> 00:30:55,860
like somewhere you knew uh some are

00:30:54,000 --> 00:30:56,970
older but most of them exist for a

00:30:55,860 --> 00:30:59,070
couple of years already

00:30:56,970 --> 00:31:00,629
like for example private devices it's a

00:30:59,070 --> 00:31:02,759
boolean if you turn it on for a service

00:31:00,629 --> 00:31:04,740
it gives you a private version of Flash

00:31:02,759 --> 00:31:06,870
def if you turn it off you get the host

00:31:04,740 --> 00:31:08,490
version of Flash def Private Network if

00:31:06,870 --> 00:31:09,929
you it's also boolean if you turn it on

00:31:08,490 --> 00:31:11,129
you get your own private networking

00:31:09,929 --> 00:31:12,960
environment where you only have loopback

00:31:11,129 --> 00:31:14,309
you should turn it off you get the host

00:31:12,960 --> 00:31:17,250
networking and a couple of others like

00:31:14,309 --> 00:31:19,259
this one particularly interesting one is

00:31:17,250 --> 00:31:21,330
dynamic user but I think I have another

00:31:19,259 --> 00:31:23,850
slide about that but yeah these are a

00:31:21,330 --> 00:31:25,559
couple of more things not sure I want to

00:31:23,850 --> 00:31:28,350
go into all of the details of what these

00:31:25,559 --> 00:31:30,570
all mean you should read the man pages a

00:31:28,350 --> 00:31:31,830
few more interested and I'm a couple of

00:31:30,570 --> 00:31:33,600
more we want to hang it as well like

00:31:31,830 --> 00:31:35,009
protect kernel logs actually the protect

00:31:33,600 --> 00:31:36,330
hearing is it has been edit now I should

00:31:35,009 --> 00:31:38,730
probably remove that from the slides or

00:31:36,330 --> 00:31:41,039
move it up on the slides to protect

00:31:38,730 --> 00:31:43,139
certain other facets right these options

00:31:41,039 --> 00:31:45,720
by the way our is things that if you're

00:31:43,139 --> 00:31:48,299
a packager for Fedora rel you should

00:31:45,720 --> 00:31:50,159
make use of already write like because

00:31:48,299 --> 00:31:52,110
regardless if you buy into the idea of

00:31:50,159 --> 00:31:53,639
portable service or anything else if

00:31:52,110 --> 00:31:57,330
you've write a service that it's not

00:31:53,639 --> 00:31:59,850
using these you writing a service file

00:31:57,330 --> 00:32:02,190
that is needlessly unsafe right like

00:31:59,850 --> 00:32:04,440
because most services for example don't

00:32:02,190 --> 00:32:06,539
need the privileges to change the system

00:32:04,440 --> 00:32:08,549
clock they're apparently like I mean

00:32:06,539 --> 00:32:10,289
there's the anti P server maybe a couple

00:32:08,549 --> 00:32:12,210
of other ones that want to change the

00:32:10,289 --> 00:32:14,279
system clocks but that is so if you run

00:32:12,210 --> 00:32:16,200
your apache or nginx or whatever you run

00:32:14,279 --> 00:32:18,360
with the privileges to change the system

00:32:16,200 --> 00:32:21,230
clock you're doing something wrong right

00:32:18,360 --> 00:32:23,129
so yeah

00:32:21,230 --> 00:32:26,269
portable services doesn't add anything

00:32:23,129 --> 00:32:28,950
really new to the table regarding

00:32:26,269 --> 00:32:31,590
sandboxing like sandboxing has already

00:32:28,950 --> 00:32:33,480
been there portable service there's just

00:32:31,590 --> 00:32:34,799
about taking this what's already there

00:32:33,480 --> 00:32:37,200
and putting it together

00:32:34,799 --> 00:32:38,460
in a new and nicer to use way which is

00:32:37,200 --> 00:32:40,320
by the way the general motor of this

00:32:38,460 --> 00:32:42,870
right like what I talked about the

00:32:40,320 --> 00:32:44,759
bundling earlier nothing of that is new

00:32:42,870 --> 00:32:46,200
either right the root directory stuff

00:32:44,759 --> 00:32:47,460
the root image stuff that I was talking

00:32:46,200 --> 00:32:50,220
about these two settings that allow you

00:32:47,460 --> 00:32:51,870
to run a program for Mature Devon

00:32:50,220 --> 00:32:54,120
basically they have been around in

00:32:51,870 --> 00:32:56,759
system D since its beginning basically

00:32:54,120 --> 00:32:58,100
and as mentioned chroot is a system call

00:32:56,759 --> 00:33:01,320
that has been around from like

00:32:58,100 --> 00:33:02,810
beginnings of Linux or I like from 1990

00:33:01,320 --> 00:33:08,790
for something like this

00:33:02,810 --> 00:33:17,670
so yeah but analytics probably not right

00:33:08,790 --> 00:33:18,870
like Linux in here but okay yeah so then

00:33:17,670 --> 00:33:21,120
other stuff that is really interesting

00:33:18,870 --> 00:33:22,860
is the per service firewalling something

00:33:21,120 --> 00:33:27,090
really added recently added in the

00:33:22,860 --> 00:33:28,530
accounting so at least like firewalling

00:33:27,090 --> 00:33:29,730
an accounting like this is on one hand

00:33:28,530 --> 00:33:31,980
for resource management on the other

00:33:29,730 --> 00:33:33,780
hand it's it's it's access control so I

00:33:31,980 --> 00:33:35,010
put them up here as well I can system he

00:33:33,780 --> 00:33:37,230
recently got this and it probably will

00:33:35,010 --> 00:33:40,440
have more of those very soon we can

00:33:37,230 --> 00:33:45,240
basically say yeah this shall be able to

00:33:40,440 --> 00:33:48,600
reach that IP range but nothing else one

00:33:45,240 --> 00:33:50,640
important thing to underline these

00:33:48,600 --> 00:33:52,740
options were all been available since a

00:33:50,640 --> 00:33:54,270
long time as machine but they're not

00:33:52,740 --> 00:33:56,280
enabled by default they are not enabled

00:33:54,270 --> 00:33:58,080
by default for services for historical

00:33:56,280 --> 00:33:59,730
reasons right like because system 5 and

00:33:58,080 --> 00:34:01,140
it didn't have them and because the

00:33:59,730 --> 00:34:01,800
initial system diversions didn't have

00:34:01,140 --> 00:34:03,990
them either

00:34:01,800 --> 00:34:05,940
we couldn't we can't default to them

00:34:03,990 --> 00:34:06,930
because if we did then all the services

00:34:05,940 --> 00:34:10,380
files written in the last five years

00:34:06,930 --> 00:34:12,780
would suddenly break so they are so far

00:34:10,380 --> 00:34:14,790
for regular services opted in which is

00:34:12,780 --> 00:34:16,050
unfortunate we try to do something about

00:34:14,790 --> 00:34:17,640
this you might have seen this like the

00:34:16,050 --> 00:34:19,830
system the analyzed security tool that

00:34:17,640 --> 00:34:21,990
we added which is something you specify

00:34:19,830 --> 00:34:23,460
unit file and then we'll analyze you and

00:34:21,990 --> 00:34:26,460
didn't suggest you a couple of more that

00:34:23,460 --> 00:34:29,399
you could turn on it's a lovely tool you

00:34:26,460 --> 00:34:31,830
should totally all use it but yeah which

00:34:29,399 --> 00:34:33,960
portable services as being a slightly

00:34:31,830 --> 00:34:35,399
new concept we have the chance to from

00:34:33,960 --> 00:34:37,860
the beginning turn things around right

00:34:35,399 --> 00:34:39,000
so for part of our services sandboxing

00:34:37,860 --> 00:34:41,310
is opted out not up then right

00:34:39,000 --> 00:34:43,050
everything like as much as possible of

00:34:41,310 --> 00:34:44,820
this is turned on off by default and

00:34:43,050 --> 00:34:46,890
then if you want to pick these specific

00:34:44,820 --> 00:34:49,080
things of integration you actually want

00:34:46,890 --> 00:34:50,760
like to be able to have full access to

00:34:49,080 --> 00:34:54,390
the system clock but all Minds go to it

00:34:50,760 --> 00:34:56,760
and set the protect clock thing okay so

00:34:54,390 --> 00:35:02,700
much about sandboxing any questions

00:34:56,760 --> 00:35:03,990
about this now has questions okay with

00:35:02,700 --> 00:35:05,480
the whole approach of doing this a

00:35:03,990 --> 00:35:07,950
couple of hard problems

00:35:05,480 --> 00:35:09,360
the first one is users I already

00:35:07,950 --> 00:35:11,430
mentioned this right like we had this

00:35:09,360 --> 00:35:14,220
girl how much time you actually still

00:35:11,430 --> 00:35:15,130
have now we have this girl about leaving

00:35:14,220 --> 00:35:16,809
your heart no

00:35:15,130 --> 00:35:18,099
artifact I like so and one of the

00:35:16,809 --> 00:35:21,730
artifacts that I mentioned was system

00:35:18,099 --> 00:35:23,289
users so by doing like putting a

00:35:21,730 --> 00:35:24,970
stronger emphasis on root directory and

00:35:23,289 --> 00:35:26,799
good image we're not going to solve this

00:35:24,970 --> 00:35:29,349
magic like this hard problem of system

00:35:26,799 --> 00:35:32,140
users right like yeah

00:35:29,349 --> 00:35:33,700
so in system Li like in a release like I

00:35:32,140 --> 00:35:35,890
seen mural tour something we introduced

00:35:33,700 --> 00:35:37,809
a new concept it's called dynamic users

00:35:35,890 --> 00:35:40,319
dynamic users are basically users like

00:35:37,809 --> 00:35:43,059
system users that are being allocated

00:35:40,319 --> 00:35:45,190
implicitly the moment a service starts

00:35:43,059 --> 00:35:47,049
out and they're viable and the service

00:35:45,190 --> 00:35:49,180
code runs does it the moment the service

00:35:47,049 --> 00:35:52,029
shuts down these users are removed again

00:35:49,180 --> 00:35:53,289
right so if you listen closely to what I

00:35:52,029 --> 00:35:55,119
said earlier

00:35:53,289 --> 00:35:57,460
this sounds problematic at first right

00:35:55,119 --> 00:35:58,839
like because file ownership is sticky on

00:35:57,460 --> 00:36:01,000
UNIX right like if you create a file

00:35:58,839 --> 00:36:03,309
somewhere as one of these dynamic users

00:36:01,000 --> 00:36:04,720
we're basically like we have a problem

00:36:03,309 --> 00:36:07,210
right like because these the ownership

00:36:04,720 --> 00:36:08,619
will be sticky and if then a server

00:36:07,210 --> 00:36:11,470
shuts down the file would still be owned

00:36:08,619 --> 00:36:13,509
by this user our way out we simply

00:36:11,470 --> 00:36:15,579
prohibit that so if you turn on timing

00:36:13,509 --> 00:36:17,380
dynamic user it's a boolean for regular

00:36:15,579 --> 00:36:18,849
system services again this already

00:36:17,380 --> 00:36:20,200
exists for a while you don't have to use

00:36:18,849 --> 00:36:21,910
it to the portable service concept you

00:36:20,200 --> 00:36:22,630
can use it in classic we contact no

00:36:21,910 --> 00:36:25,240
problem at all

00:36:22,630 --> 00:36:27,569
if you turn this on what happens is not

00:36:25,240 --> 00:36:30,160
only do you get a dynamic user ID

00:36:27,569 --> 00:36:31,839
assigned that is assigned as long as you

00:36:30,160 --> 00:36:33,880
run but also you automatically lose

00:36:31,839 --> 00:36:37,630
write access to the entire file system

00:36:33,880 --> 00:36:41,289
with the exception of slash temp and VAR

00:36:37,630 --> 00:36:43,359
temp where you get your own a version of

00:36:41,289 --> 00:36:45,430
it that is life cycle bound to your own

00:36:43,359 --> 00:36:49,660
lifetime - this is where we bind the

00:36:45,430 --> 00:36:52,690
life cycles plus a couple of directories

00:36:49,660 --> 00:36:55,990
that you can explicitly listen a list in

00:36:52,690 --> 00:36:58,720
the service file where's the state

00:36:55,990 --> 00:37:03,970
directory setting which are basically

00:36:58,720 --> 00:37:06,220
directories in in for Lib that are with

00:37:03,970 --> 00:37:08,170
the ownership has changed to what the

00:37:06,220 --> 00:37:12,099
service is running as the moments of

00:37:08,170 --> 00:37:14,019
service runs like it started and if from

00:37:12,099 --> 00:37:16,150
a previous run these directories have a

00:37:14,019 --> 00:37:18,789
different owner than the dynamic user ID

00:37:16,150 --> 00:37:20,829
that we are just about assigned they got

00:37:18,789 --> 00:37:22,960
recursively chaunt this is not pretty

00:37:20,829 --> 00:37:24,519
the fact that we recursively Chone and I

00:37:22,960 --> 00:37:26,109
would prefer if we didn't have to do

00:37:24,519 --> 00:37:27,510
that in long Scarola would have give us

00:37:26,109 --> 00:37:28,950
options but are better than

00:37:27,510 --> 00:37:30,570
but it's actually not that bad because

00:37:28,950 --> 00:37:34,800
recurrence returning a huge directory

00:37:30,570 --> 00:37:37,859
tree is surprisingly fast still so yeah

00:37:34,800 --> 00:37:39,150
so the the solution of not allowing like

00:37:37,859 --> 00:37:42,090
leg let go the solution for the problem

00:37:39,150 --> 00:37:45,450
of sticky files is let's very closely

00:37:42,090 --> 00:37:47,250
figure out where the service is shall it

00:37:45,450 --> 00:37:49,980
shall be allowed to write to and then

00:37:47,250 --> 00:37:51,570
prohibited everywhere else make sure for

00:37:49,980 --> 00:37:54,060
these few areas where there's a lot of

00:37:51,570 --> 00:37:57,150
write that either it's all deleted when

00:37:54,060 --> 00:37:58,740
the service goes down or it's isolated

00:37:57,150 --> 00:38:00,359
from the rest of the system so that the

00:37:58,740 --> 00:38:02,430
rest of the system can never have access

00:38:00,359 --> 00:38:05,490
to it taking benefit of the weird

00:38:02,430 --> 00:38:07,440
reusing of you at ease and the ownership

00:38:05,490 --> 00:38:11,520
has changed if it's not matching the

00:38:07,440 --> 00:38:13,560
service user the moment it started the

00:38:11,520 --> 00:38:15,720
next time I hope this made some sense

00:38:13,560 --> 00:38:33,900
that must be people who have questions

00:38:15,720 --> 00:38:36,359
about this ok so the question was

00:38:33,900 --> 00:38:39,570
regarding if I have a service like this

00:38:36,359 --> 00:38:41,820
which runs as a dynamic user and you

00:38:39,570 --> 00:38:44,220
want to do something like escape from

00:38:41,820 --> 00:38:45,840
the sandbox to operate like to execute

00:38:44,220 --> 00:38:48,210
operations on the system the question is

00:38:45,840 --> 00:38:51,119
how you can do that the answer to this

00:38:48,210 --> 00:38:53,190
is really depends right ultimately this

00:38:51,119 --> 00:38:55,350
user is like a normal user right like so

00:38:53,190 --> 00:38:57,840
if you have a have a system user in your

00:38:55,350 --> 00:38:59,220
old solution or have a dynamic user in

00:38:57,840 --> 00:39:00,960
the new solution the difference isn't

00:38:59,220 --> 00:39:03,540
that bad big right you can still use

00:39:00,960 --> 00:39:05,190
sudo if you like but you also cannot use

00:39:03,540 --> 00:39:07,500
it right like it's up to you

00:39:05,190 --> 00:39:09,000
there are like four system B's own api's

00:39:07,500 --> 00:39:10,350
right like because you explicitly ask

00:39:09,000 --> 00:39:11,820
about starting another service and

00:39:10,350 --> 00:39:14,940
things like that for system these own

00:39:11,820 --> 00:39:16,650
api is there's policy kid right politic

00:39:14,940 --> 00:39:17,790
is actually not very good right now it's

00:39:16,650 --> 00:39:20,400
done every users when we need to figure

00:39:17,790 --> 00:39:22,380
that out still in detail but the essence

00:39:20,400 --> 00:39:24,090
really is what applies to static users

00:39:22,380 --> 00:39:25,530
also applies to dynamic users right well

00:39:24,090 --> 00:39:27,390
it's also important to notice that the

00:39:25,530 --> 00:39:30,270
dynamic users can have any name you like

00:39:27,390 --> 00:39:32,670
right so you can actually reference the

00:39:30,270 --> 00:39:37,109
dynamic users in policy files if you

00:39:32,670 --> 00:39:39,390
like if you feel like it but admittedly

00:39:37,109 --> 00:39:40,410
it's not all pretty because right now

00:39:39,390 --> 00:39:41,849
the

00:39:40,410 --> 00:39:45,440
the policies for Paulo ticket for

00:39:41,849 --> 00:39:47,369
example are introduced a system-level

00:39:45,440 --> 00:39:49,829
right so if you want to have a dynamic

00:39:47,369 --> 00:39:51,059
user being able to start their service

00:39:49,829 --> 00:39:52,739
or something like this you actually have

00:39:51,059 --> 00:39:54,989
to drop a policy file into the system

00:39:52,739 --> 00:39:56,970
and while this it doesn't directly

00:39:54,989 --> 00:39:58,979
conflict with the goal of mod leaving

00:39:56,970 --> 00:40:01,920
artifacts it still gives me this bad

00:39:58,979 --> 00:40:03,329
feeling that ideally the policy that

00:40:01,920 --> 00:40:05,970
you're allowed to do this should be in

00:40:03,329 --> 00:40:07,200
the image of the of the portable service

00:40:05,970 --> 00:40:10,109
and not be on the system

00:40:07,200 --> 00:40:11,759
right but I mean yeah I think it's it's

00:40:10,109 --> 00:40:14,759
it's still usable it's just not as

00:40:11,759 --> 00:40:18,930
pretty as I would like it to be

00:40:14,759 --> 00:40:21,779
and yeah we certainly could do better I

00:40:18,930 --> 00:40:23,249
don't have much time but if nobody has

00:40:21,779 --> 00:40:26,539
honor questions and we'll just continue

00:40:23,249 --> 00:40:26,539
with the slides I guess

00:40:26,940 --> 00:40:30,660
okay another thing is user database

00:40:29,309 --> 00:40:34,799
mismatch already mentioned that briefly

00:40:30,660 --> 00:40:36,960
before if you use classic shirts then

00:40:34,799 --> 00:40:39,479
Etsy passwd on the host and in the

00:40:36,960 --> 00:40:40,200
chroot is definitely going to differ

00:40:39,479 --> 00:40:45,869
right

00:40:40,200 --> 00:40:49,469
like because user IDs are are assigned

00:40:45,869 --> 00:40:51,839
dynamically and then yeah if you install

00:40:49,469 --> 00:40:53,940
five packages and this order in the to

00:40:51,839 --> 00:40:56,039
route and 20 packages and another also

00:40:53,940 --> 00:40:59,579
on the host then they will get the you

00:40:56,039 --> 00:41:01,289
eddie numberings wrong this is a big

00:40:59,579 --> 00:41:03,150
problem right because it basically means

00:41:01,289 --> 00:41:04,650
that if you otherwise integrate to the

00:41:03,150 --> 00:41:06,539
host system then suddenly some single is

00:41:04,650 --> 00:41:08,579
called nginx like the nginx user in the

00:41:06,539 --> 00:41:09,749
container matches the my sequel will use

00:41:08,579 --> 00:41:11,219
it on the host or something like this

00:41:09,749 --> 00:41:12,900
and then they suddenly get access to

00:41:11,219 --> 00:41:14,999
stuff they shouldn't get access to like

00:41:12,900 --> 00:41:17,819
kill process and whatever else the

00:41:14,999 --> 00:41:20,759
solution we came up with for system D is

00:41:17,819 --> 00:41:23,729
something called private users if you

00:41:20,759 --> 00:41:25,380
it's also boolean what it does is it

00:41:23,729 --> 00:41:27,479
uses user name spacing for those who

00:41:25,380 --> 00:41:28,829
know these concepts and it does

00:41:27,479 --> 00:41:30,239
something very very simple it matches

00:41:28,829 --> 00:41:33,119
the root user to the root user

00:41:30,239 --> 00:41:34,529
it matches the user service runs add to

00:41:33,119 --> 00:41:36,539
the use of the service or unset and

00:41:34,529 --> 00:41:38,160
everything else is mapped as a nobody

00:41:36,539 --> 00:41:39,690
user you know the nobody user is a

00:41:38,160 --> 00:41:44,579
special unit user that has been around

00:41:39,690 --> 00:41:49,360
for UNIX since ages it has the UID 655 3

00:41:44,579 --> 00:41:51,640
4 like it's -2 and 16-bit

00:41:49,360 --> 00:41:52,900
and there's nobody users basically like

00:41:51,640 --> 00:41:57,070
the catch-all you that everything else

00:41:52,900 --> 00:41:58,690
is meant for why like it so the the the

00:41:57,070 --> 00:42:01,900
code that runs into the inside of the

00:41:58,690 --> 00:42:03,490
service what it sees is that everything

00:42:01,900 --> 00:42:06,610
all the objects that have ownership

00:42:03,490 --> 00:42:09,130
right files IPC objects and this kind of

00:42:06,610 --> 00:42:13,320
thing processes are owned by one of

00:42:09,130 --> 00:42:16,240
these three user IDs his own root or

00:42:13,320 --> 00:42:19,390
nobody now the nice thing is that these

00:42:16,240 --> 00:42:21,490
three are kinda like like two of them

00:42:19,390 --> 00:42:23,100
are kind of the only user IDs where

00:42:21,490 --> 00:42:26,410
everybody can agree on what they mean

00:42:23,100 --> 00:42:27,820
right if you have a debian machine if

00:42:26,410 --> 00:42:29,560
you have a boot machine if you have a

00:42:27,820 --> 00:42:31,119
fedora machine if you have Solaris

00:42:29,560 --> 00:42:32,710
Machine well okay it's a large not too

00:42:31,119 --> 00:42:35,560
much but at least all the Linux machines

00:42:32,710 --> 00:42:37,480
they agree that root is zero and zeros

00:42:35,560 --> 00:42:39,540
root and they agree that there is a

00:42:37,480 --> 00:42:43,240
nobody user and it has six five five

00:42:39,540 --> 00:42:44,920
three four I'm a little bit lying there

00:42:43,240 --> 00:42:46,750
actually because on Fedora for

00:42:44,920 --> 00:42:48,910
historical reasons that nobody uses

00:42:46,750 --> 00:42:51,520
actually called NFS nobody and I really

00:42:48,910 --> 00:42:56,890
wish it wouldn't but it's how it is and

00:42:51,520 --> 00:43:00,430
yeah they somebody who what it has been

00:42:56,890 --> 00:43:03,910
changed okay okay man you know what I

00:43:00,430 --> 00:43:05,590
said so everything's good now so yeah

00:43:03,910 --> 00:43:07,180
our hack around the mismatch of the user

00:43:05,590 --> 00:43:08,859
database is making the user debate

00:43:07,180 --> 00:43:10,600
debates irrelevant by removing pretty

00:43:08,859 --> 00:43:12,640
much all the entrants like I mean the

00:43:10,600 --> 00:43:14,830
entries will still be there but you will

00:43:12,640 --> 00:43:15,820
not see any object owned by anything but

00:43:14,830 --> 00:43:18,210
these three um

00:43:15,820 --> 00:43:20,590
user ID said you can synchronize a

00:43:18,210 --> 00:43:24,160
couple of other party bus doesn't really

00:43:20,590 --> 00:43:26,740
like if users are registered temporarily

00:43:24,160 --> 00:43:30,700
and go away it's something we have to

00:43:26,740 --> 00:43:32,200
deal with and it's not as bad as yeah it

00:43:30,700 --> 00:43:33,490
sounds it's kind of like the policy good

00:43:32,200 --> 00:43:35,770
thing right like because in policy kid

00:43:33,490 --> 00:43:39,100
if you want to reference something on a

00:43:35,770 --> 00:43:41,650
user you have to write it down in the

00:43:39,100 --> 00:43:43,270
policy and device has also policy but

00:43:41,650 --> 00:43:49,090
yeah we're working on this to getting

00:43:43,270 --> 00:43:49,869
this fixed but it's nasty any other

00:43:49,090 --> 00:43:52,450
questions at this point

00:43:49,869 --> 00:43:53,830
I mean theory we have now 15 minutes or

00:43:52,450 --> 00:43:55,869
probably now ten minutes of something

00:43:53,830 --> 00:43:57,369
seven minutes of question but if nobody

00:43:55,869 --> 00:43:58,540
asks any questions I mean it's it's

00:43:57,369 --> 00:44:00,850
completely ok by the way if I don't

00:43:58,540 --> 00:44:01,900
finish all those slides these slides are

00:44:00,850 --> 00:44:04,000
just to fill time

00:44:01,900 --> 00:44:06,070
I think I kind of hope that you already

00:44:04,000 --> 00:44:08,410
got the gist of the idea what are we

00:44:06,070 --> 00:44:10,390
doing here but just really nobody has

00:44:08,410 --> 00:44:17,290
any questions I'll just continue you

00:44:10,390 --> 00:44:20,830
have a question nope that's on fedora

00:44:17,290 --> 00:44:22,540
what's the most recent fedora okay

00:44:20,830 --> 00:44:25,840
that's where it's supported but this is

00:44:22,540 --> 00:44:27,910
relatively recent stuff and yeah I'm the

00:44:25,840 --> 00:44:29,320
second to last version of system the

00:44:27,910 --> 00:44:32,890
upstream we still change a couple of

00:44:29,320 --> 00:44:35,980
things but yeah in in one year time this

00:44:32,890 --> 00:44:47,980
all should hit your distribution in one

00:44:35,980 --> 00:44:49,120
way or another so we like them so the

00:44:47,980 --> 00:44:51,520
question was regarding which system did

00:44:49,120 --> 00:44:53,320
worsen this was supported so we added as

00:44:51,520 --> 00:44:56,860
a preview in one version which is two

00:44:53,320 --> 00:44:59,560
three seven or so but in the preview

00:44:56,860 --> 00:45:02,440
version we installed the main binary

00:44:59,560 --> 00:45:06,250
that you'd talk to which is like this

00:45:02,440 --> 00:45:08,440
one part of a control its installed and

00:45:06,250 --> 00:45:10,570
use a lip right so it's out of view of

00:45:08,440 --> 00:45:12,790
pass and the idea is like as long as

00:45:10,570 --> 00:45:15,070
it's not officially supported it wasn't

00:45:12,790 --> 00:45:16,900
accepted accessible in the next version

00:45:15,070 --> 00:45:18,670
two three eight I think we moved it to

00:45:16,900 --> 00:45:20,290
use a bin making an official API and

00:45:18,670 --> 00:45:21,670
fully supportive right but actually

00:45:20,290 --> 00:45:22,990
nothing really change between that right

00:45:21,670 --> 00:45:24,850
like we weren't sure if it was stable

00:45:22,990 --> 00:45:30,670
but yeah ultimately turn out to be

00:45:24,850 --> 00:45:32,850
stable by the way yeah if I presume so

00:45:30,670 --> 00:45:32,850
yeah

00:45:36,349 --> 00:45:45,270
it should be I mean it's it's a

00:45:43,920 --> 00:45:47,550
relatively minor component right like

00:45:45,270 --> 00:45:49,640
one of the the keys that we wanted to

00:45:47,550 --> 00:45:53,609
get across is that nothing of this is

00:45:49,640 --> 00:45:56,880
really new right this is the giant copy

00:45:53,609 --> 00:45:59,820
fest if you will of ideas other people

00:45:56,880 --> 00:46:01,829
came up with and technologies that have

00:45:59,820 --> 00:46:03,420
already pre existed in system D but just

00:46:01,829 --> 00:46:05,369
then pulling them together in one new

00:46:03,420 --> 00:46:07,050
tool which is this one portable control

00:46:05,369 --> 00:46:08,490
to make it easy right like the disk

00:46:07,050 --> 00:46:11,010
format is nothing new we came up with

00:46:08,490 --> 00:46:12,630
the the service file form is not this

00:46:11,010 --> 00:46:14,730
thing we came up with it's the old one

00:46:12,630 --> 00:46:17,839
as before nothing else is this new right

00:46:14,730 --> 00:46:21,570
it's really just about giving a nice

00:46:17,839 --> 00:46:23,849
integrated command line to lots of stuff

00:46:21,570 --> 00:46:26,070
that we're separate before and like

00:46:23,849 --> 00:46:37,290
moving classic system service management

00:46:26,070 --> 00:46:38,819
to the next level in this regard ok so

00:46:37,290 --> 00:46:41,670
the question is would you still install

00:46:38,819 --> 00:46:43,440
portable service Avaya PRM my question

00:46:41,670 --> 00:46:44,940
is I don't care right like this is

00:46:43,440 --> 00:46:47,069
outside of the scope like I have this

00:46:44,940 --> 00:46:48,930
other slide that one before

00:46:47,069 --> 00:46:50,460
in scope is probably simple delivery but

00:46:48,930 --> 00:46:53,760
generally it's only simple delivery I

00:46:50,460 --> 00:46:55,859
care about like how the images get on

00:46:53,760 --> 00:46:58,349
the system it's completely up to you

00:46:55,859 --> 00:46:59,640
right you can package them up rpm if you

00:46:58,349 --> 00:47:02,640
feel like this right like you can for

00:46:59,640 --> 00:47:05,490
example like package inside of rpm a

00:47:02,640 --> 00:47:07,550
subdirectory in opt or whatever you want

00:47:05,490 --> 00:47:09,930
where you get the full directory tree

00:47:07,550 --> 00:47:12,030
it's completely up to you I don't really

00:47:09,930 --> 00:47:14,400
care about this like what I care about

00:47:12,030 --> 00:47:16,290
ultimately is that it is a viable in one

00:47:14,400 --> 00:47:19,349
of the format's Linux kernel supports

00:47:16,290 --> 00:47:21,089
natively meaning as a directory or as a

00:47:19,349 --> 00:47:22,890
loopback file that we can just mount and

00:47:21,089 --> 00:47:24,810
yeah and the loopback man is completely

00:47:22,890 --> 00:47:27,540
automatically you don't even have to

00:47:24,810 --> 00:47:30,180
know that there is loopback mounting or

00:47:27,540 --> 00:47:32,369
anything involved but yeah people can

00:47:30,180 --> 00:47:34,470
put up tar balls on the Internet people

00:47:32,369 --> 00:47:36,270
can put a compress Squasher versus

00:47:34,470 --> 00:47:37,829
things on the internet it doesn't matter

00:47:36,270 --> 00:47:39,150
they can download which W get they can

00:47:37,829 --> 00:47:41,130
deploy it with whatever they want to

00:47:39,150 --> 00:47:44,339
deploy we don't care

00:47:41,130 --> 00:47:46,170
it's like as soon as it's there we will

00:47:44,339 --> 00:47:47,160
run as a portable service right the same

00:47:46,170 --> 00:47:48,600
way as for classic

00:47:47,160 --> 00:47:51,450
we don't really care if you packaged up

00:47:48,600 --> 00:47:54,030
with as a tarball either or as RPM or as

00:47:51,450 --> 00:48:06,150
a DEP or whatever else systemd is not

00:47:54,030 --> 00:48:08,030
interested in that question so the

00:48:06,150 --> 00:48:11,580
question is what's the benefit regarding

00:48:08,030 --> 00:48:13,470
a Padma in a system like I mean it tried

00:48:11,580 --> 00:48:15,090
to like my slides mentioned talker style

00:48:13,470 --> 00:48:18,150
a couple of things and that's kind of

00:48:15,090 --> 00:48:19,410
what Putnam is right there containers

00:48:18,150 --> 00:48:21,210
right like they're strong like this is

00:48:19,410 --> 00:48:22,530
like the first part of the talk was just

00:48:21,210 --> 00:48:25,020
about trying to draw the line between

00:48:22,530 --> 00:48:25,830
classical container management and what

00:48:25,020 --> 00:48:30,300
this is right

00:48:25,830 --> 00:48:32,520
so yeah apartment is in many ways just a

00:48:30,300 --> 00:48:34,350
more modern version of docker FC well

00:48:32,520 --> 00:48:36,840
right the concepts are the same you get

00:48:34,350 --> 00:48:38,280
the same isolation and these kind of

00:48:36,840 --> 00:48:39,720
things to get the like ultimately then

00:48:38,280 --> 00:48:42,870
the deployments will cubed anything

00:48:39,720 --> 00:48:44,400
whatnot this stuff tries to focus on a

00:48:42,870 --> 00:48:46,170
lower level right like so if you

00:48:44,400 --> 00:48:49,350
actually want to put together a web

00:48:46,170 --> 00:48:50,730
service of some form you probably I mean

00:48:49,350 --> 00:48:52,650
you can do it with potable service and

00:48:50,730 --> 00:48:53,850
sure I invite you to but it's probably

00:48:52,650 --> 00:48:55,050
not what you want to do right like you

00:48:53,850 --> 00:48:57,900
would just want to use the container set

00:48:55,050 --> 00:48:59,730
this stuff is for everybody else who

00:48:57,900 --> 00:49:02,310
needs the more integration into the

00:48:59,730 --> 00:49:03,630
operating system like for example super

00:49:02,310 --> 00:49:05,100
village containers you do your storage

00:49:03,630 --> 00:49:06,390
stuff and you want to want to have lots

00:49:05,100 --> 00:49:08,460
of access to the operating system but

00:49:06,390 --> 00:49:09,840
also have isolation to some point or if

00:49:08,460 --> 00:49:12,120
you do a matted stuff for example like

00:49:09,840 --> 00:49:14,160
there are lots of people doing this

00:49:12,120 --> 00:49:15,780
right so it really depends on your use

00:49:14,160 --> 00:49:18,000
case this is supposed to be completely

00:49:15,780 --> 00:49:19,410
generic tool and we invite everybody to

00:49:18,000 --> 00:49:22,950
use it for everything they want to use

00:49:19,410 --> 00:49:24,330
it for but you know Cuban editions this

00:49:22,950 --> 00:49:26,100
thing like this is huge infrastructure

00:49:24,330 --> 00:49:28,560
that's already there use that if you

00:49:26,100 --> 00:49:30,480
that's a use case this tries to cover

00:49:28,560 --> 00:49:33,060
slightly other use cases even though it

00:49:30,480 --> 00:49:35,070
could probably cover many of them of the

00:49:33,060 --> 00:49:36,810
classic Putman use cases too but just

00:49:35,070 --> 00:49:38,250
many of them but I don't know it's not

00:49:36,810 --> 00:49:40,910
the competition I want to be in I'm

00:49:38,250 --> 00:49:44,160
looking for something other because I I

00:49:40,910 --> 00:49:45,780
you know I've been listening to what's

00:49:44,160 --> 00:49:47,610
going on in the nineteen I know that a

00:49:45,780 --> 00:49:49,020
lot of people like in particularly amber

00:49:47,610 --> 00:49:51,150
the people come up with running docker

00:49:49,020 --> 00:49:52,740
on on their Emily device right in the

00:49:51,150 --> 00:49:54,390
arm device because they want to have

00:49:52,740 --> 00:49:56,580
some kind of image format then you just

00:49:54,390 --> 00:49:59,100
like why do you do this like they don't

00:49:56,580 --> 00:50:00,600
even have WEP or anything on there so

00:49:59,100 --> 00:50:04,520
yeah this is supposed to cover that

00:50:00,600 --> 00:50:04,520
but I just see that my time is out Oh

00:50:15,510 --> 00:50:24,290

YouTube URL: https://www.youtube.com/watch?v=6leOTc6l53o


