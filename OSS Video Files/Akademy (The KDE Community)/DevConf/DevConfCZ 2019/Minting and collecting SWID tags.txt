Title: Minting and collecting SWID tags
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Minting and collecting SWID tags
Speaker: Jan Pazdziora
Description:  What software is installed on machine X?

With new ways of distributing software like container images or web applications in various formats, trusted packaging tools and formats like rpm, deb, or pacman no longer provide complete answer to this simple question. That in turn makes it harder to scan for vulnerabilities, or prevents even basic software accounting.

We will look at SWID, 2015 standard for software identification that might be bringing a solution. We will explore the schema, some SWID tags, tools and content, and share preliminary results of quest for best practices, for turning the standard into useful mechanism for admins, security personnel, or software maintainers. Think about examples of convoluted deployment and come to find out if SWID can bring some order to the chaos.
[ https://sched.co/Jcil ]
Captions: 
	00:00:05,660 --> 00:00:23,189
so hello people topic of software

00:00:12,450 --> 00:00:25,769
identification so that machine what what

00:00:23,189 --> 00:00:28,109
software do I have on my laptop what

00:00:25,769 --> 00:00:32,780
software is running is in my containers

00:00:28,109 --> 00:00:35,900
and for me the answer is sort of clear

00:00:32,780 --> 00:00:39,840
[Music]

00:00:35,900 --> 00:00:44,030
except not always because I made here

00:00:39,840 --> 00:00:44,030
are some containers from some images

00:00:44,150 --> 00:00:55,080
doctor knows where and I might be

00:00:48,240 --> 00:00:57,570
running some scripts that I so who is

00:00:55,080 --> 00:01:01,440
asking the question I might be sort of

00:00:57,570 --> 00:01:07,190
interesting when I'm to troubleshoot or

00:01:01,440 --> 00:01:09,630
debug a problem two versions of

00:01:07,190 --> 00:01:14,670
libraries whether they are available or

00:01:09,630 --> 00:01:16,740
typical day is fall or not I might be

00:01:14,670 --> 00:01:22,770
scanning for not vulnerability so I

00:01:16,740 --> 00:01:25,530
might be looking for or I might not

00:01:22,770 --> 00:01:30,570
necessarily be interested in the list of

00:01:25,530 --> 00:01:35,130
our packages because if my goal is to

00:01:30,570 --> 00:01:38,570
charge a customer for running my product

00:01:35,130 --> 00:01:41,760
in some cloud somewhere for two hours

00:01:38,570 --> 00:01:44,310
the fact that it's the product whatever

00:01:41,760 --> 00:01:49,530
the product is might be the you know

00:01:44,310 --> 00:01:54,900
important part so rpm des you might not

00:01:49,530 --> 00:01:57,750
be now I mean our lives would be much

00:01:54,900 --> 00:02:01,439
easier but there are people and systems

00:01:57,750 --> 00:02:05,299
or there are people using systems by

00:02:01,439 --> 00:02:08,299
teaching formats even on Linux there are

00:02:05,299 --> 00:02:08,299
people

00:02:09,259 --> 00:02:15,599
and their application server will just

00:02:12,299 --> 00:02:20,459
by magic start to do something and of

00:02:15,599 --> 00:02:23,159
course we might want to or need to be

00:02:20,459 --> 00:02:26,720
able to account for something on higher

00:02:23,159 --> 00:02:32,970
level than just packages so when when

00:02:26,720 --> 00:02:37,280
things don't standards what you do well

00:02:32,970 --> 00:02:37,280
you come up with another standard so

00:02:38,390 --> 00:02:46,260
identification and it's ISO standard and

00:02:42,930 --> 00:02:51,840
we'll be talking about the one which has

00:02:46,260 --> 00:02:54,000
2015 in the name you might mention

00:02:51,840 --> 00:02:56,849
somewhere that was an older version not

00:02:54,000 --> 00:02:59,819
compatible and I sort of don't care

00:02:56,849 --> 00:03:02,640
about it so if you came specifically

00:02:59,819 --> 00:03:05,879
because what makes you up at night is

00:03:02,640 --> 00:03:09,659
that you have something to do with 2009

00:03:05,879 --> 00:03:14,250
standard I probably won't be helpful at

00:03:09,659 --> 00:03:19,200
all so it's an ISO standard so you can

00:03:14,250 --> 00:03:20,910
read it as you hey but you know you

00:03:19,200 --> 00:03:24,329
you're not you're not missing much

00:03:20,910 --> 00:03:34,609
because what what the text understand

00:03:24,329 --> 00:03:41,280
that both an XML schema definition so

00:03:34,609 --> 00:03:44,849
sweet is all XML files with or in a box

00:03:41,280 --> 00:03:56,030
for XML so now I'm in space the

00:03:44,849 --> 00:03:56,030
definition of the next place to look for

00:03:59,070 --> 00:04:07,980
well you might have experienced that

00:04:02,380 --> 00:04:10,810
when you you look at the something and

00:04:07,980 --> 00:04:16,780
there might be something there or that

00:04:10,810 --> 00:04:23,200
there's not and especially if there is

00:04:16,780 --> 00:04:28,140
so it is good because on the URL there

00:04:23,200 --> 00:04:30,520
is schema definition but it's for space

00:04:28,140 --> 00:04:35,800
because you know this is a new standard

00:04:30,520 --> 00:04:38,730
so it's you need to be prepared and this

00:04:35,800 --> 00:04:43,420
is like the entrance and entrance level

00:04:38,730 --> 00:04:46,060
of of your ability to do so it at all so

00:04:43,420 --> 00:04:49,090
when when you want to see the definition

00:04:46,060 --> 00:04:53,230
of of the schema you have to append the

00:04:49,090 --> 00:04:55,180
Shari to actually get the definition for

00:04:53,230 --> 00:05:04,120
the menu space that we've been talking

00:04:55,180 --> 00:05:07,000
about and it's a nice main space

00:05:04,120 --> 00:05:11,710
definition it has documentation in it

00:05:07,000 --> 00:05:13,600
and the documentation the other XML

00:05:11,710 --> 00:05:18,460
files that we'll be talking about is

00:05:13,600 --> 00:05:22,030
sort of mirroring what is in standard

00:05:18,460 --> 00:05:26,850
text so that's why my feeling is that

00:05:22,030 --> 00:05:33,490
you really don't need to pay to ISO so

00:05:26,850 --> 00:05:36,310
this is XML tools that even if the first

00:05:33,490 --> 00:05:38,620
one looks like URL well it is interested

00:05:36,310 --> 00:05:48,760
about schema eventually to go to the

00:05:38,620 --> 00:05:53,470
other URL to fetch it so we and sweet

00:05:48,760 --> 00:05:56,650
tag is nothing about a XML file with

00:05:53,470 --> 00:05:57,520
root element software identity in the

00:05:56,650 --> 00:06:03,699
extra money

00:05:57,520 --> 00:06:05,470
of the Swift well that the spiel defines

00:06:03,699 --> 00:06:26,370
by the way if you have any questions and

00:06:05,470 --> 00:06:26,370
you know because so the primary

00:06:35,070 --> 00:06:45,130
components and it might also be used to

00:06:38,229 --> 00:06:47,530
describe like installation media so but

00:06:45,130 --> 00:06:49,270
primarily it is about what software is

00:06:47,530 --> 00:06:53,139
installed on this on this particular

00:06:49,270 --> 00:06:56,080
machine so you would like to see a suite

00:06:53,139 --> 00:06:59,849
right so I have a good news so if you

00:06:56,080 --> 00:07:10,169
have a federal route 29

00:06:59,849 --> 00:07:15,820
let's try try it here better 29 in

00:07:10,169 --> 00:07:19,330
usually suite federal project org we

00:07:15,820 --> 00:07:21,460
have a sweet actually is it big enough

00:07:19,330 --> 00:07:28,770
for you or do you want the phone bigger

00:07:21,460 --> 00:07:28,770
I can show off to make it bigger okay so

00:07:32,310 --> 00:07:40,630
it has the column that I promise and you

00:07:37,509 --> 00:07:42,180
know when when you start to look at X

00:07:40,630 --> 00:07:46,330
amount you might not necessarily

00:07:42,180 --> 00:07:48,750
immediately see what is important so one

00:07:46,330 --> 00:07:57,909
of the important things is the tag ID

00:07:48,750 --> 00:08:02,229
which should be universally unique the

00:07:57,909 --> 00:08:04,830
sweeter the standard sort of assumes

00:08:02,229 --> 00:08:04,830
that you

00:08:05,250 --> 00:08:12,790
but I like to look at a string and have

00:08:09,340 --> 00:08:16,300
some clue about what it is about so

00:08:12,790 --> 00:08:18,850
sweet ex that I create have some meaning

00:08:16,300 --> 00:08:21,100
even if you are not supposed to parse

00:08:18,850 --> 00:08:24,220
that string you are not supposed to like

00:08:21,100 --> 00:08:27,550
you know right tools that will split the

00:08:24,220 --> 00:08:29,200
tape itself and say yeah this is fedora

00:08:27,550 --> 00:08:32,250
you have supposed to look at the other

00:08:29,200 --> 00:08:35,169
attributes in the sweater

00:08:32,250 --> 00:08:40,300
another interesting or important thing

00:08:35,169 --> 00:08:44,620
in and you have things like name and

00:08:40,300 --> 00:08:50,760
version in the SPEA tag but a very

00:08:44,620 --> 00:09:03,880
important thing is a entity tag creator

00:08:50,760 --> 00:09:06,520
so you are something that maybe you

00:09:03,880 --> 00:09:09,520
found laying around on your on your

00:09:06,520 --> 00:09:11,440
system so there is a way to you know

00:09:09,520 --> 00:09:14,410
identify that Fedora project might be

00:09:11,440 --> 00:09:16,320
both creating and creating the software

00:09:14,410 --> 00:09:22,180
and attack or there might be multiple

00:09:16,320 --> 00:09:27,690
entities that that do that and there's a

00:09:22,180 --> 00:09:31,930
bunch of other interesting entries here

00:09:27,690 --> 00:09:36,790
so one one thing that you might notice

00:09:31,930 --> 00:09:41,320
is that there's nothing about files in

00:09:36,790 --> 00:09:44,770
this or about content right so if you

00:09:41,320 --> 00:09:48,220
look at another example let me make this

00:09:44,770 --> 00:09:51,850
a little bit smaller so that I can make

00:09:48,220 --> 00:09:56,440
it a little bit bigger so that you see

00:09:51,850 --> 00:10:06,900
the bottom so this might be an example

00:09:56,440 --> 00:10:10,840
sweet egg for for bash and I gave it

00:10:06,900 --> 00:10:13,000
this tech ID so you see a pattern it's

00:10:10,840 --> 00:10:14,300
like the Fedora project or just reversed

00:10:13,000 --> 00:10:15,890
and then the

00:10:14,300 --> 00:10:21,290
and then never out of the RPM package

00:10:15,890 --> 00:10:23,330
and it has some some information general

00:10:21,290 --> 00:10:26,960
information I can say that Federer

00:10:23,330 --> 00:10:30,610
project created our balls to package and

00:10:26,960 --> 00:10:33,430
the tag and there can be an evidence of

00:10:30,610 --> 00:10:42,400
what was may be found on on the disk

00:10:33,430 --> 00:10:46,250
with a list of files and directories and

00:10:42,400 --> 00:10:46,760
checks arms so now we are getting

00:10:46,250 --> 00:10:49,100
somewhere

00:10:46,760 --> 00:10:52,340
right now we are describing not just all

00:10:49,100 --> 00:10:58,570
this is bad but the content of the

00:10:52,340 --> 00:11:02,810
package is is something of an interest

00:10:58,570 --> 00:11:12,700
so with other XML namespaces you might

00:11:02,810 --> 00:11:18,460
be obviously tricks arms there is also a

00:11:12,700 --> 00:11:21,290
extension for the nice internal report

00:11:18,460 --> 00:11:24,470
of a guideline for implementing switch

00:11:21,290 --> 00:11:29,120
so if you want to read some piece of

00:11:24,470 --> 00:11:34,010
literature I might recommend the

00:11:29,120 --> 00:11:40,400
internal report from this obviously this

00:11:34,010 --> 00:11:45,740
is down because of shutdown so this page

00:11:40,400 --> 00:11:47,270
loads but the links to the actual PDF so

00:11:45,740 --> 00:11:49,400
you don't need to fill all this

00:11:47,270 --> 00:11:51,800
archive.org or something or ask me

00:11:49,400 --> 00:11:56,810
because I have the PDF download it right

00:11:51,800 --> 00:12:00,790
because I'm coming prepared so it talks

00:11:56,810 --> 00:12:07,070
about what the guidelines talk about

00:12:00,790 --> 00:12:09,530
creating tags creating also rating and

00:12:07,070 --> 00:12:11,990
also known also rattle div tags how

00:12:09,530 --> 00:12:14,900
links should work so what how you are

00:12:11,990 --> 00:12:19,700
supposed to make a link things among

00:12:14,900 --> 00:12:21,710
other and and so on so the next thing

00:12:19,700 --> 00:12:24,150
that you might encounter our XML

00:12:21,710 --> 00:12:28,700
signatures so

00:12:24,150 --> 00:12:31,230
standard sort of comes and assumes that

00:12:28,700 --> 00:12:38,990
the content of the sweet egg will be

00:12:31,230 --> 00:12:38,990
signed one needed if you look at the XML

00:12:39,230 --> 00:12:46,980
sweet Eric you might be disappointed to

00:12:42,540 --> 00:12:58,380
not find any signature there and but if

00:12:46,980 --> 00:13:03,680
you look at relate beta not I have here

00:12:58,380 --> 00:13:06,810
as well in user lips with tag and now

00:13:03,680 --> 00:13:09,240
where would you expect the next puffy it

00:13:06,810 --> 00:13:14,310
would be red hot calm right because it's

00:13:09,240 --> 00:13:18,060
not Federer you might find a file which

00:13:14,310 --> 00:13:24,030
at the bottom has an excellent signature

00:13:18,060 --> 00:13:29,070
and the certificate chain so we shipped

00:13:24,030 --> 00:13:34,790
a sweet egg identifying distribution for

00:13:29,070 --> 00:13:38,760
both Fedora unsigned and Rho zero signed

00:13:34,790 --> 00:13:40,770
so if you want to look at some examples

00:13:38,760 --> 00:13:43,290
of Swift edge that's that's where you

00:13:40,770 --> 00:13:45,150
might want to start but what if you want

00:13:43,290 --> 00:13:46,160
to create some sweet it like for

00:13:45,150 --> 00:13:54,200
yourself

00:13:46,160 --> 00:13:56,700
so we have a tool in a copper a poor

00:13:54,200 --> 00:14:00,570
copper in anymore

00:13:56,700 --> 00:14:03,180
an outbound sweet yes and if this takes

00:14:00,570 --> 00:14:04,470
too long I have another container where

00:14:03,180 --> 00:14:10,410
it is already installed so I'm coming

00:14:04,470 --> 00:14:13,560
prepared I've call it RPM - sweet tag so

00:14:10,410 --> 00:14:15,010
you see I started with rpm because as I

00:14:13,560 --> 00:14:19,720
said

00:14:15,010 --> 00:14:21,760
it's rpm - Q right so I started with rpm

00:14:19,720 --> 00:14:26,079
just - oh it's already installed so

00:14:21,760 --> 00:14:29,350
sorry I need to go to this one you know

00:14:26,079 --> 00:14:32,539
to have the experience for you fully

00:14:29,350 --> 00:14:32,539
[Music]

00:14:32,610 --> 00:14:37,050
fully matching what you will see

00:14:40,649 --> 00:14:48,160
it'll probably take a little while so we

00:14:45,190 --> 00:14:52,510
have a tool called rpm to speak back

00:14:48,160 --> 00:14:55,870
which can take either installed rpm in

00:14:52,510 --> 00:15:04,260
our community base or rpm file a package

00:14:55,870 --> 00:15:04,260
and generate a sweet tag for you so

00:15:06,329 --> 00:15:14,230
which ok let's let's make it let's wait

00:15:10,690 --> 00:15:16,269
on the edge for which of these packages

00:15:14,230 --> 00:15:25,800
would you like would you like me to

00:15:16,269 --> 00:15:28,149
create a sweet egg for you asked sorry I

00:15:25,800 --> 00:15:39,879
hate this one

00:15:28,149 --> 00:15:40,899
cut it rpm too sweet a great lips so we

00:15:39,879 --> 00:15:45,040
have something

00:15:40,899 --> 00:15:47,259
it has a tech ID as I said it's fairly

00:15:45,040 --> 00:15:49,870
important

00:15:47,259 --> 00:15:52,540
we have entity where I'm saying well I

00:15:49,870 --> 00:15:55,540
have no idea who created the sweet XO

00:15:52,540 --> 00:15:57,910
the standard order nice internal airport

00:15:55,540 --> 00:16:00,220
80/60 I'm not sure says that's invalid

00:15:57,910 --> 00:16:03,459
unavailable is what we probably won't

00:16:00,220 --> 00:16:06,879
there and we have a list of directories

00:16:03,459 --> 00:16:12,670
and files and the checksums so this is

00:16:06,879 --> 00:16:15,910
pretty cool right there's another sweet

00:16:12,670 --> 00:16:23,980
tag creeping here so but we'll come to

00:16:15,910 --> 00:16:26,199
it later so we can also look at the

00:16:23,980 --> 00:16:28,629
sweet tags that we have on our system so

00:16:26,199 --> 00:16:32,679
if you install RPM - sweet tag it also

00:16:28,629 --> 00:16:34,300
comes with sweet queue it will only find

00:16:32,679 --> 00:16:36,579
- sweet - because that's what we have

00:16:34,300 --> 00:16:38,290
and it's interesting I didn't tell you

00:16:36,579 --> 00:16:40,779
that I have the second one here because

00:16:38,290 --> 00:16:43,779
well I don't need to tell you everything

00:16:40,779 --> 00:16:45,970
right away but we have many more

00:16:43,779 --> 00:16:51,329
packages installed in the container

00:16:45,970 --> 00:16:58,209
right so if I run the nf RPM - sweet tag

00:16:51,329 --> 00:17:00,790
regenerate what I should get is a list

00:16:58,209 --> 00:17:05,260
of sweet tags for all the packages that

00:17:00,790 --> 00:17:08,130
I have so and it will store it in one

00:17:05,260 --> 00:17:11,260
way to attack whatever pass

00:17:08,130 --> 00:17:12,909
you can also generate sweet export if

00:17:11,260 --> 00:17:14,860
you have a young repository if you just

00:17:12,909 --> 00:17:16,959
created one using create people you can

00:17:14,860 --> 00:17:18,880
also generate that and then the DNF

00:17:16,959 --> 00:17:22,870
plug-in can pull it from from the

00:17:18,880 --> 00:17:30,250
repository for you so if you don't fancy

00:17:22,870 --> 00:17:32,440
looking at XML it is also possible to so

00:17:30,250 --> 00:17:35,930
we now have many of them and I can say

00:17:32,440 --> 00:17:48,250
this - rpm what are the names

00:17:35,930 --> 00:17:48,250
or SQL light lips I don't know the name

00:17:50,590 --> 00:18:01,810
okay I'm doing something wrong

00:18:06,080 --> 00:18:11,200
what happened somebody tell me what

00:18:08,870 --> 00:18:11,200
happened

00:18:13,330 --> 00:18:20,450
yes the name of the package throw some

00:18:15,470 --> 00:18:22,580
clouds so which dish I I can display the

00:18:20,450 --> 00:18:28,250
content of the sweet egg in a more

00:18:22,580 --> 00:18:30,950
readable form and I can also I think I

00:18:28,250 --> 00:18:32,390
also have dump which dumps it because if

00:18:30,950 --> 00:18:34,070
when you are working with new standard

00:18:32,390 --> 00:18:36,830
you come up with a new format right as

00:18:34,070 --> 00:18:44,440
well so this is my my way of displaying

00:18:36,830 --> 00:18:44,440
XML but you can also say guess a XML so

00:18:45,580 --> 00:18:57,220
one of the things that you might know

00:18:47,690 --> 00:18:57,220
notice is that package and it's because

00:18:57,430 --> 00:19:06,170
you can describe things and one of the

00:19:03,560 --> 00:19:11,360
relationships is supplemental so you can

00:19:06,170 --> 00:19:13,280
have this afterwards and says well I

00:19:11,360 --> 00:19:16,370
knew that if for any sweeter describing

00:19:13,280 --> 00:19:20,350
for example fedora but I'm telling you

00:19:16,370 --> 00:19:24,520
that this failure also has a component

00:19:20,350 --> 00:19:31,610
SQLite leads or something like that and

00:19:24,520 --> 00:19:35,330
the sweet tag that I will display it so

00:19:31,610 --> 00:19:39,080
if I look at the fedora right now so

00:19:35,330 --> 00:19:42,890
what sweetie you does it doesn't just

00:19:39,080 --> 00:19:44,539
display things you know in text text for

00:19:42,890 --> 00:19:54,570
money but also

00:19:44,539 --> 00:19:56,249
the Supplemental bags and and if you're

00:19:54,570 --> 00:19:59,179
interested in what the difference is we

00:19:56,249 --> 00:20:03,440
can talk about it about it later so

00:19:59,179 --> 00:20:06,059
basically to know everything about a

00:20:03,440 --> 00:20:10,110
category tag you need to look at all of

00:20:06,059 --> 00:20:13,769
them resolve the Supplemental times and

00:20:10,110 --> 00:20:16,110
only then you know like what the content

00:20:13,769 --> 00:20:20,899
of the obviously that actually is for

00:20:16,110 --> 00:20:27,090
for a given set of installed packages or

00:20:20,899 --> 00:20:29,759
software products on a system there are

00:20:27,090 --> 00:20:31,919
some other interesting things about

00:20:29,759 --> 00:20:36,840
sweet egg well the standard is very

00:20:31,919 --> 00:20:39,450
large the 80/60 news report is more

00:20:36,840 --> 00:20:41,519
specific sometimes it's not very exact

00:20:39,450 --> 00:20:44,190
and it does not touch some of the issues

00:20:41,519 --> 00:20:45,779
that or some of the situations that you

00:20:44,190 --> 00:20:55,289
might encounter so for example you

00:20:45,779 --> 00:21:03,019
probably want to have x86 64 or whether

00:20:55,289 --> 00:21:10,340
it's no art so we used the arc attribute

00:21:03,019 --> 00:21:13,710
which the standard allows but a

00:21:10,340 --> 00:21:19,249
validation to provided by or that the

00:21:13,710 --> 00:21:22,289
scheme allows because basically anything

00:21:19,249 --> 00:21:24,929
but the validation tool that NIST

00:21:22,289 --> 00:21:28,909
provides does not doesn't accept so that

00:21:24,929 --> 00:21:32,669
there are a little confusions in there

00:21:28,909 --> 00:21:34,830
so when you want looks like that you

00:21:32,669 --> 00:21:36,809
have a system let's say you have how do

00:21:34,830 --> 00:21:39,899
you find a suite that's like what what's

00:21:36,809 --> 00:21:41,610
the location of us we tax the standard

00:21:39,899 --> 00:21:43,529
seems to assume that you basically scan

00:21:41,610 --> 00:21:46,980
the whole days and then when you find a

00:21:43,529 --> 00:21:49,470
sweet tag what is next to it is is the

00:21:46,980 --> 00:21:51,860
package that we're looking for to be

00:21:49,470 --> 00:21:53,700
reasonably efficient

00:21:51,860 --> 00:21:55,559
[Music]

00:21:53,700 --> 00:21:58,470
you need to basically process all the

00:21:55,559 --> 00:22:02,820
stickers to resolve the supplemental

00:21:58,470 --> 00:22:07,499
information for any particle we came up

00:22:02,820 --> 00:22:10,789
with a plan so we are man with span and

00:22:07,499 --> 00:22:15,779
in sweet sweet Tex

00:22:10,789 --> 00:22:17,909
dead GE we propose siblings to basically

00:22:15,779 --> 00:22:21,059
locations that hold sweet text so that

00:22:17,909 --> 00:22:24,539
for maybe Fedora or present price he

00:22:21,059 --> 00:22:26,309
knows the way and the standard allows us

00:22:24,539 --> 00:22:28,619
to do it the standard allows us to

00:22:26,309 --> 00:22:31,649
define a vendor specific or platform

00:22:28,619 --> 00:22:32,999
specific way of finding sweet text so it

00:22:31,649 --> 00:22:42,509
would be the same range in this

00:22:32,999 --> 00:22:45,450
directory things can be sound and I have

00:22:42,509 --> 00:22:50,429
an option in rpm facility to call XML

00:22:45,450 --> 00:22:54,570
sex on the guidance around signatures

00:22:50,429 --> 00:22:56,340
are a little bit confusing they expect

00:22:54,570 --> 00:22:59,519
trusty constants but they don't really

00:22:56,340 --> 00:23:04,590
say how the genome crafts should should

00:22:59,519 --> 00:23:09,779
work so we just ignore that part so

00:23:04,590 --> 00:23:15,359
what's what's the plan I want to be able

00:23:09,779 --> 00:23:17,849
to finalize the XML namespace used in

00:23:15,359 --> 00:23:21,019
the NF repository because sweet tag

00:23:17,849 --> 00:23:21,019
defines namespace for

00:23:21,090 --> 00:23:30,299
that I produce for young repository and

00:23:25,470 --> 00:23:32,580
then make available I want to basically

00:23:30,299 --> 00:23:35,970
create a rapport which would serve as a

00:23:32,580 --> 00:23:39,600
place for people to for basically me and

00:23:35,970 --> 00:23:41,789
us publishing what our recommendations

00:23:39,600 --> 00:23:43,529
or best practices or decisions design

00:23:41,789 --> 00:23:46,019
decisions have been and for other people

00:23:43,529 --> 00:23:49,879
to maybe comment on why are poor request

00:23:46,019 --> 00:23:52,889
issues or so we hope that nails would

00:23:49,879 --> 00:23:54,629
serve as that place or tag vol foot self

00:23:52,889 --> 00:23:58,350
as you know that that place for people

00:23:54,629 --> 00:24:01,409
to show what what they have and maybe

00:23:58,350 --> 00:24:10,379
discuss what their next step should be

00:24:01,409 --> 00:24:11,999
but it did not happen so my biggest draw

00:24:10,379 --> 00:24:13,919
is that I I don't know what the name of

00:24:11,999 --> 00:24:17,580
the recipe so you know naming is heart

00:24:13,919 --> 00:24:20,610
and I made a decision about the tech IDs

00:24:17,580 --> 00:24:28,169
using nefra but for this one it needs a

00:24:20,610 --> 00:24:30,570
little bit of time we have having well

00:24:28,169 --> 00:24:35,100
you need to implement things twice in

00:24:30,570 --> 00:24:41,190
PMF well I'd like to get the tools that

00:24:35,100 --> 00:24:43,919
you have security and I probably need to

00:24:41,190 --> 00:24:48,570
add signature validation and having a

00:24:43,919 --> 00:24:50,789
way to show motives the tree of but also

00:24:48,570 --> 00:24:52,740
you know other relationships are like

00:24:50,789 --> 00:24:55,710
component but the problem is to show you

00:24:52,740 --> 00:24:58,200
components of I first need to resolve

00:24:55,710 --> 00:25:01,559
the support architects to find the final

00:24:58,200 --> 00:25:04,889
information about what direction so it's

00:25:01,559 --> 00:25:07,429
like multi multi stage process and I

00:25:04,889 --> 00:25:10,019
also want to make it possible to update

00:25:07,429 --> 00:25:11,549
sweet texture on the young repository if

00:25:10,019 --> 00:25:15,600
you already have the packages installed

00:25:11,549 --> 00:25:24,090
not just during installation we welcome

00:25:15,600 --> 00:25:24,370
people we try to read the sooner we try

00:25:24,090 --> 00:25:26,320
to

00:25:24,370 --> 00:25:28,720
the documentation we try to imply on

00:25:26,320 --> 00:25:33,520
something but you know other people have

00:25:28,720 --> 00:25:38,559
other English cases if you feel like

00:25:33,520 --> 00:25:41,530
coffee or you have any something like

00:25:38,559 --> 00:25:45,790
death to attack or zip to attack or

00:25:41,530 --> 00:25:50,260
directly might be useful I might get to

00:25:45,790 --> 00:25:54,030
doing it eventually anyway but I'll be

00:25:50,260 --> 00:25:56,679
happy to review a batch here's a list of

00:25:54,030 --> 00:25:59,950
some of the places you might want to

00:25:56,679 --> 00:26:29,710
check out we don't have time for any

00:25:59,950 --> 00:26:32,679
questions but so if it's not signed

00:26:29,710 --> 00:26:34,480
if you you are okay about the evidence

00:26:32,679 --> 00:26:36,910
you can generate this we check on the

00:26:34,480 --> 00:26:38,530
machine not have it signed by the vendor

00:26:36,910 --> 00:26:40,780
by the grantor federal project or

00:26:38,530 --> 00:26:44,520
anybody and you can use it by other

00:26:40,780 --> 00:26:44,520
tools that might have information

00:26:46,520 --> 00:26:49,619
[Music]

00:26:55,720 --> 00:26:58,849
[Music]

00:27:20,760 --> 00:27:23,809
[Music]

00:27:45,529 --> 00:27:48,799
but I don't

00:27:50,540 --> 00:27:56,430

YouTube URL: https://www.youtube.com/watch?v=x86v5brZDfI


