Title: Enhancing the Fedora Upgrade Process
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Enhancing the Fedora Upgrade Process
Speaker: Vinzenz Feenstra
Description:  This session will give an introduction to a new way of doing system upgrades on Fedora, RHEL and CentOS using the Leapp framework to give more options to the users.

We will introduce the Framework, how it works and what it can do for making a difference during the upgrade of Fedora.
[ https://sched.co/JchY ]
Captions: 
	00:00:06,740 --> 00:00:15,410
hello everyone welcome to enhancing the

00:00:11,690 --> 00:00:17,720
fedora update process process don't be

00:00:15,410 --> 00:00:20,750
alarmed we're not pushing anything into

00:00:17,720 --> 00:00:22,310
fedora this is just the proposal my name

00:00:20,750 --> 00:00:30,050
is Vincent Finster I'm a senior software

00:00:22,310 --> 00:00:35,030
engineer and I'm working for right so we

00:00:30,050 --> 00:00:38,350
have a tool called leap leap is not only

00:00:35,030 --> 00:00:44,090
a tool it's also a framework for

00:00:38,350 --> 00:00:46,730
application or modernization as I said

00:00:44,090 --> 00:00:49,399
it's a tool which will be used for the

00:00:46,730 --> 00:00:57,219
upgrade from browser seven six to

00:00:49,399 --> 00:00:57,219
relight the initial version you know

00:00:57,339 --> 00:01:03,379
what does modernization mean updating

00:01:00,469 --> 00:01:05,690
upgrading the system and then there's

00:01:03,379 --> 00:01:12,370
the question isn't that that what DNF

00:01:05,690 --> 00:01:12,370
and RPM is doing yes and also know

00:01:12,729 --> 00:01:19,579
because leap can allow you to do

00:01:17,590 --> 00:01:22,189
customizations and extensions of the

00:01:19,579 --> 00:01:26,299
upgrade process which is way beyond the

00:01:22,189 --> 00:01:28,219
capabilities of DN f or RPM not only

00:01:26,299 --> 00:01:30,799
because of technical limitations but

00:01:28,219 --> 00:01:35,350
also because of policies there are

00:01:30,799 --> 00:01:41,539
reasons for that to guarantee the stable

00:01:35,350 --> 00:01:43,130
upgrade transaction to happen so what we

00:01:41,539 --> 00:01:46,039
with these two can actually do for the

00:01:43,130 --> 00:01:47,719
users we can make optional things away

00:01:46,039 --> 00:01:49,579
all that you uses during the upgrade

00:01:47,719 --> 00:01:52,600
things that haven't been there but are

00:01:49,579 --> 00:01:57,469
now optional in the in the new version

00:01:52,600 --> 00:02:01,180
can be made available through giving

00:01:57,469 --> 00:02:04,100
them choice choices by asking questions

00:02:01,180 --> 00:02:06,109
what we can do is convert configuration

00:02:04,100 --> 00:02:08,570
file formats sometimes from one version

00:02:06,109 --> 00:02:10,670
to another some parts of the

00:02:08,570 --> 00:02:14,209
configuration files changes

00:02:10,670 --> 00:02:19,120
and the meaning changes or the format

00:02:14,209 --> 00:02:22,430
changes or values get deprecated or

00:02:19,120 --> 00:02:22,970
things like this so you can do this with

00:02:22,430 --> 00:02:27,410
rpm

00:02:22,970 --> 00:02:29,959
this is usually a no-no we can allow

00:02:27,410 --> 00:02:33,350
third-party applications to be upgraded

00:02:29,959 --> 00:02:35,600
together with the operating system that

00:02:33,350 --> 00:02:37,720
means like not only that that you just

00:02:35,600 --> 00:02:40,550
include the repositories which you need

00:02:37,720 --> 00:02:44,450
which is needed through the transaction

00:02:40,550 --> 00:02:45,800
but quite often like sometimes when you

00:02:44,450 --> 00:02:47,840
upgrade the software then it needs

00:02:45,800 --> 00:02:49,910
database migrations to happen and things

00:02:47,840 --> 00:02:53,090
like this so you never know so this

00:02:49,910 --> 00:02:56,209
these are basically waste which can you

00:02:53,090 --> 00:02:57,920
can use there as I already mentioned you

00:02:56,209 --> 00:03:01,760
can ask the user questions during the

00:02:57,920 --> 00:03:07,580
process right now there is no such thing

00:03:01,760 --> 00:03:11,140
in the RPM upgrade you can allow to do

00:03:07,580 --> 00:03:13,510
things yeah that's what I already said

00:03:11,140 --> 00:03:16,370
yeah you can actually influence the

00:03:13,510 --> 00:03:18,230
transaction sometimes you see that it

00:03:16,370 --> 00:03:21,620
does something but you don't want it to

00:03:18,230 --> 00:03:23,510
be done for example it installs

00:03:21,620 --> 00:03:25,670
something that you don't actually need

00:03:23,510 --> 00:03:28,280
because it sees it like oh this is a

00:03:25,670 --> 00:03:32,380
soft dependency or something let's

00:03:28,280 --> 00:03:36,980
install it with it but you don't need it

00:03:32,380 --> 00:03:38,690
you can warn the user are about removed

00:03:36,980 --> 00:03:40,609
support for something that is in use or

00:03:38,690 --> 00:03:42,200
at least has been used in the past it

00:03:40,609 --> 00:03:44,810
means you can scan the current system

00:03:42,200 --> 00:03:47,989
before you do the upgrade and see oh you

00:03:44,810 --> 00:03:49,310
using battery FS well but our FS will be

00:03:47,989 --> 00:03:54,500
removed it's obsolete

00:03:49,310 --> 00:03:56,920
there's always something better now I

00:03:54,500 --> 00:03:59,329
have here a few scenarios which are

00:03:56,920 --> 00:04:02,120
hypothetical they are not implemented

00:03:59,329 --> 00:04:06,889
neither in Braille nor anywhere else

00:04:02,120 --> 00:04:09,440
these are just ideas in a in a way that

00:04:06,889 --> 00:04:15,859
you can imagine how we could improve the

00:04:09,440 --> 00:04:17,389
process so first asking the user to

00:04:15,859 --> 00:04:22,400
switch to the new new bootloader

00:04:17,389 --> 00:04:23,360
specification in until now we every

00:04:22,400 --> 00:04:25,099
every boot load

00:04:23,360 --> 00:04:28,550
had its own configuration files grab

00:04:25,099 --> 00:04:31,610
Sybil or who knows what which would load

00:04:28,550 --> 00:04:34,939
her what platform and there was like a

00:04:31,610 --> 00:04:37,610
move to unify that and one place to have

00:04:34,939 --> 00:04:40,159
all the the bootloader specifications

00:04:37,610 --> 00:04:42,409
also across as far as I understand it

00:04:40,159 --> 00:04:45,289
correctly also across the multiple

00:04:42,409 --> 00:04:50,539
distributions so that there's like one

00:04:45,289 --> 00:04:53,090
way for doing it for everyone a question

00:04:50,539 --> 00:04:55,039
to the user could look like this there's

00:04:53,090 --> 00:04:57,020
like convert to boot loader

00:04:55,039 --> 00:04:59,779
specification with a justification what

00:04:57,020 --> 00:05:00,229
it is it to give the user a choice to do

00:04:59,779 --> 00:05:04,159
it or not

00:05:00,229 --> 00:05:05,960
and basically say yes or no and based on

00:05:04,159 --> 00:05:09,279
that the action will be taken or not

00:05:05,960 --> 00:05:12,080
like later on when it's time to do it

00:05:09,279 --> 00:05:13,849
another scenario would be detecting

00:05:12,080 --> 00:05:15,949
Python to application scripts and

00:05:13,849 --> 00:05:18,020
subscribe to the Python 2 channels what

00:05:15,949 --> 00:05:20,060
I call the channels but the actual name

00:05:18,020 --> 00:05:24,740
should be module streams as far as I

00:05:20,060 --> 00:05:28,190
know so you could ask the user yeah here

00:05:24,740 --> 00:05:29,750
I've wrote it Python 2.7 module stream

00:05:28,190 --> 00:05:31,729
we detected Python 2 scripts on your

00:05:29,750 --> 00:05:32,930
system the new version of adore gives

00:05:31,729 --> 00:05:34,940
you the opportunity to switch to the

00:05:32,930 --> 00:05:38,240
Python 2.7 module stream and then you

00:05:34,940 --> 00:05:40,669
can have a choice like to either just

00:05:38,240 --> 00:05:42,229
subscribe to this tree stream do nothing

00:05:40,669 --> 00:05:43,490
or like about the upgrade and do

00:05:42,229 --> 00:05:46,339
whatever or something with the system

00:05:43,490 --> 00:05:49,279
with you if you want to another thing is

00:05:46,339 --> 00:05:52,389
like detecting these scripts or

00:05:49,279 --> 00:05:54,469
applications and one day user about the

00:05:52,389 --> 00:05:55,550
discontinued support which is a thing

00:05:54,469 --> 00:05:59,060
next year

00:05:55,550 --> 00:06:01,099
right I mean a Python 2.7 is no longer

00:05:59,060 --> 00:06:05,810
supported officially at least upstream

00:06:01,099 --> 00:06:08,330
not and it could look like this and we

00:06:05,810 --> 00:06:12,529
could even show for example where we

00:06:08,330 --> 00:06:14,330
found these files that said these kind

00:06:12,529 --> 00:06:17,210
of scans would be very very very

00:06:14,330 --> 00:06:22,210
expensive on on systems which have lots

00:06:17,210 --> 00:06:26,180
of files so this are just potentially

00:06:22,210 --> 00:06:28,569
things we could do other thing which

00:06:26,180 --> 00:06:32,630
happened I think when I'm not wrong in

00:06:28,569 --> 00:06:35,360
swing Sidora 29 they switch to

00:06:32,630 --> 00:06:37,040
phosphorous 10 but you can still have a

00:06:35,360 --> 00:06:40,120
post quest 9

00:06:37,040 --> 00:06:43,340
promote Ustream as far as I know and

00:06:40,120 --> 00:06:46,340
sometimes you don't want to upgrade your

00:06:43,340 --> 00:06:48,830
database because like you're not sure

00:06:46,340 --> 00:06:50,810
that the application that uses it will

00:06:48,830 --> 00:06:55,550
be actually happy about the fact that

00:06:50,810 --> 00:06:57,380
there's a newer version or vice-versa

00:06:55,550 --> 00:06:59,630
maybe it's better to have a new version

00:06:57,380 --> 00:07:02,120
and not to have you cannot support the

00:06:59,630 --> 00:07:04,190
older versions and whatever so the user

00:07:02,120 --> 00:07:06,200
a choice that they can switch to it or

00:07:04,190 --> 00:07:10,550
give them the choice to say like upgrade

00:07:06,200 --> 00:07:13,910
to the latest another thing would be

00:07:10,550 --> 00:07:15,710
like service defaults the record to be

00:07:13,910 --> 00:07:17,930
quite honest when I I thought about that

00:07:15,710 --> 00:07:21,980
it seemed like a good idea but I think

00:07:17,930 --> 00:07:24,320
it's maybe not even that useful but

00:07:21,980 --> 00:07:26,690
sometimes someone changes to user

00:07:24,320 --> 00:07:28,430
defaults and we can detect that there

00:07:26,690 --> 00:07:30,020
are not before that there are

00:07:28,430 --> 00:07:32,750
differences between that what will be

00:07:30,020 --> 00:07:34,400
and what should be and we can ask the

00:07:32,750 --> 00:07:36,830
user to convert them and merge or merge

00:07:34,400 --> 00:07:38,360
them and keep my changes and keep the

00:07:36,830 --> 00:07:40,490
order to keep the previous defaults or

00:07:38,360 --> 00:07:46,130
discard the changes and apply the new

00:07:40,490 --> 00:07:50,470
default and well again back to the

00:07:46,130 --> 00:07:53,120
third-party applications part of this

00:07:50,470 --> 00:07:55,340
extension could be just to update the

00:07:53,120 --> 00:07:56,960
repository also config repository

00:07:55,340 --> 00:08:02,180
configuration

00:07:56,960 --> 00:08:09,710
sometimes these they change locations

00:08:02,180 --> 00:08:12,740
they have different ways of referring to

00:08:09,710 --> 00:08:14,720
the the the path in the in the URLs and

00:08:12,740 --> 00:08:17,030
so on so which are not like covered by

00:08:14,720 --> 00:08:19,610
the typical variables which which are

00:08:17,030 --> 00:08:23,509
used in Fedora

00:08:19,610 --> 00:08:25,370
I am so it can be used to to update the

00:08:23,509 --> 00:08:27,409
repositories for the new for the new

00:08:25,370 --> 00:08:32,899
system that the new rpm so we found

00:08:27,409 --> 00:08:36,050
during the upgrade yeah and I have here

00:08:32,899 --> 00:08:38,060
an overview over the upgrade workflow by

00:08:36,050 --> 00:08:40,940
example of rel that means like how are

00:08:38,060 --> 00:08:43,099
we are doing it right now right now

00:08:40,940 --> 00:08:44,990
means like how we are going to do it

00:08:43,099 --> 00:08:48,350
basically for the for the red light

00:08:44,990 --> 00:08:52,399
upgrade the first thing what the users

00:08:48,350 --> 00:08:58,070
would do the yum install leap as a tool

00:08:52,399 --> 00:09:01,519
and run leap upgrade and they are like

00:08:58,070 --> 00:09:03,769
three stages there's the original state

00:09:01,519 --> 00:09:05,420
where it's just like in Braille 7 we

00:09:03,769 --> 00:09:07,610
would just scan the system we will

00:09:05,420 --> 00:09:09,290
download some things but we will not

00:09:07,610 --> 00:09:11,329
modify we leave anything on the

00:09:09,290 --> 00:09:13,370
configuration or on the system the next

00:09:11,329 --> 00:09:15,620
phase would be the in it run this that

00:09:13,370 --> 00:09:17,540
is like a stage in between where we

00:09:15,620 --> 00:09:21,950
already boot into a new kernel new

00:09:17,540 --> 00:09:25,430
system deep and will be able to with the

00:09:21,950 --> 00:09:27,560
new tooling of RPM to apply all the on

00:09:25,430 --> 00:09:29,750
the RPM transaction and the last stage

00:09:27,560 --> 00:09:34,610
is basically starting the rare light

00:09:29,750 --> 00:09:36,940
system and giving for some actions that

00:09:34,610 --> 00:09:42,019
need to be executed on the first boot

00:09:36,940 --> 00:09:45,019
give the opportunity to run them so in

00:09:42,019 --> 00:09:46,910
the first phase we scan and collect

00:09:45,019 --> 00:09:50,480
facts about the system the means like we

00:09:46,910 --> 00:09:52,459
scan like what is the networking

00:09:50,480 --> 00:09:54,019
configuration what's the storage layout

00:09:52,459 --> 00:09:58,699
and all these things we collect together

00:09:54,019 --> 00:10:00,800
and any tools that would want later to

00:09:58,699 --> 00:10:02,930
operate like for example configurations

00:10:00,800 --> 00:10:04,910
or whatever they would scan them collect

00:10:02,930 --> 00:10:07,730
the information and would send them as

00:10:04,910 --> 00:10:10,670
messages to to our or store them as

00:10:07,730 --> 00:10:12,230
messages in our system the next thing is

00:10:10,670 --> 00:10:15,170
like we would perform checks on these

00:10:12,230 --> 00:10:18,470
collective information to to be able to

00:10:15,170 --> 00:10:19,990
block upgrades in case there is a

00:10:18,470 --> 00:10:22,430
problem

00:10:19,990 --> 00:10:27,610
problems could be that you use a kernel

00:10:22,430 --> 00:10:27,610
module that is not supported anymore

00:10:28,520 --> 00:10:34,830
like I I mean like one thing I noticed

00:10:31,410 --> 00:10:36,990
it was like reversed later but I had the

00:10:34,830 --> 00:10:40,020
problem with the e1000 driver which was

00:10:36,990 --> 00:10:42,810
removed during during the development

00:10:40,020 --> 00:10:44,490
phase and basically this would be

00:10:42,810 --> 00:10:46,830
something we would detect and will

00:10:44,490 --> 00:10:48,480
prevent the user from from upgrading so

00:10:46,830 --> 00:10:50,640
that they are not ending up with the

00:10:48,480 --> 00:10:52,830
unbootable system or a system that is at

00:10:50,640 --> 00:10:58,470
the end like inaccessible because the

00:10:52,830 --> 00:10:59,940
networking driver can't be found next

00:10:58,470 --> 00:11:03,570
section would be like that you ask the

00:10:59,940 --> 00:11:05,790
user about questions about what you

00:11:03,570 --> 00:11:09,930
found if you want to do something you

00:11:05,790 --> 00:11:12,779
want to do something like the scenario

00:11:09,930 --> 00:11:15,180
so before the next thing is like we

00:11:12,779 --> 00:11:18,110
would solve the RPM transaction that

00:11:15,180 --> 00:11:21,750
means like we're trying to solve the

00:11:18,110 --> 00:11:24,180
transaction from the rs7 system to the

00:11:21,750 --> 00:11:26,970
real light system and be sure that it

00:11:24,180 --> 00:11:30,450
works and of course download already all

00:11:26,970 --> 00:11:34,140
rpms so they are locally available we

00:11:30,450 --> 00:11:35,910
will go into the inner drum disk after

00:11:34,140 --> 00:11:37,589
we prepared the in RAM disk which is

00:11:35,910 --> 00:11:39,589
like something that needs to be

00:11:37,589 --> 00:11:43,020
configured of course in a bootloader

00:11:39,589 --> 00:11:44,790
specific configuration we will start the

00:11:43,020 --> 00:11:49,920
inner drum this and from there we will

00:11:44,790 --> 00:11:51,510
not boot the system on the disk we will

00:11:49,920 --> 00:11:54,000
just start with the inner drum disk and

00:11:51,510 --> 00:11:55,860
we will switch into some different state

00:11:54,000 --> 00:11:59,120
where we actually continue with our

00:11:55,860 --> 00:12:03,480
process and we can apply first

00:11:59,120 --> 00:12:05,550
workarounds that will fix problems that

00:12:03,480 --> 00:12:07,620
are in the transaction especially when

00:12:05,550 --> 00:12:10,050
you consider this big jumps that Rell

00:12:07,620 --> 00:12:12,959
does like from Braille 7 to relate

00:12:10,050 --> 00:12:14,190
there's like many years of development

00:12:12,959 --> 00:12:16,050
for this all these tooling and

00:12:14,190 --> 00:12:19,380
applications sometimes it happens that

00:12:16,050 --> 00:12:21,810
the rpms are not able to upgrade without

00:12:19,380 --> 00:12:24,800
actually some intervention we can do the

00:12:21,810 --> 00:12:28,860
workaround application before that and

00:12:24,800 --> 00:12:30,089
perform them the RPM upgrade also of

00:12:28,860 --> 00:12:33,450
course there can be done some late

00:12:30,089 --> 00:12:36,300
checks before that so in case sometimes

00:12:33,450 --> 00:12:38,440
you might be only able to detect some of

00:12:36,300 --> 00:12:40,480
the problems once you are already in the

00:12:38,440 --> 00:12:46,210
system in the underly new kernel or

00:12:40,480 --> 00:12:49,600
engine you using the new system v after

00:12:46,210 --> 00:12:51,310
the after the transaction passed we

00:12:49,600 --> 00:12:53,140
would apply configuration fixes this

00:12:51,310 --> 00:12:55,600
means like the new configuration files

00:12:53,140 --> 00:12:58,960
are updated based on the data that has

00:12:55,600 --> 00:13:02,590
been found originally in the raw 7

00:12:58,960 --> 00:13:06,720
system and yeah the relay check should

00:13:02,590 --> 00:13:09,850
have been a little bit earlier but and

00:13:06,720 --> 00:13:12,190
the last part is that we are scheduling

00:13:09,850 --> 00:13:14,770
the SELinux relabeling so because we

00:13:12,190 --> 00:13:16,930
changed a lot of things and asylums

00:13:14,770 --> 00:13:20,080
during this transaction needs to be

00:13:16,930 --> 00:13:24,430
disabled because it would go crazy about

00:13:20,080 --> 00:13:29,080
what we're doing we need to ensure that

00:13:24,430 --> 00:13:32,410
once it's rebooting that it's relabeling

00:13:29,080 --> 00:13:33,880
all the files correctly so once we're

00:13:32,410 --> 00:13:35,380
booting into red light the first thing

00:13:33,880 --> 00:13:37,180
that happens and the first time right

00:13:35,380 --> 00:13:40,900
now is that it will reliable everything

00:13:37,180 --> 00:13:42,360
because we told it to that is considered

00:13:40,900 --> 00:13:45,010
when you didn't disable

00:13:42,360 --> 00:13:48,730
selinux of course on your origin system

00:13:45,010 --> 00:13:51,040
and we're getting them to the first

00:13:48,730 --> 00:13:53,230
loose for first boot tasks that means

00:13:51,040 --> 00:13:55,300
like sometimes we for example can clean

00:13:53,230 --> 00:13:59,200
up temporaries and things like this

00:13:55,300 --> 00:14:02,320
afterwards users could like let's

00:13:59,200 --> 00:14:03,760
imagine like you have a workstation you

00:14:02,320 --> 00:14:05,440
could get like what's new in braille

00:14:03,760 --> 00:14:08,650
aids or something this is like scheduled

00:14:05,440 --> 00:14:12,910
for the first time and not like to come

00:14:08,650 --> 00:14:15,610
up every time so and then you're done so

00:14:12,910 --> 00:14:17,530
i have a demo for this which takes about

00:14:15,610 --> 00:14:19,000
four minutes it goes just quickly

00:14:17,530 --> 00:14:22,150
through there are no questions in this

00:14:19,000 --> 00:14:25,960
involved but that's I would like give

00:14:22,150 --> 00:14:32,650
you just a little bit of an idea how

00:14:25,960 --> 00:14:35,980
this looks like so so first thing I run

00:14:32,650 --> 00:14:40,330
the leaver live upgrade tool well this

00:14:35,980 --> 00:14:44,740
is the with debug output yeah so usually

00:14:40,330 --> 00:14:47,260
this is this will be reduced because

00:14:44,740 --> 00:14:49,960
there's too much information for someone

00:14:47,260 --> 00:14:52,010
to process and especially for normal

00:14:49,960 --> 00:14:58,280
users this is not really

00:14:52,010 --> 00:15:00,590
interesting the whole process right now

00:14:58,280 --> 00:15:02,810
what it does it did already all the

00:15:00,590 --> 00:15:05,440
checks it did already the scanning part

00:15:02,810 --> 00:15:08,120
right now it's preparing the

00:15:05,440 --> 00:15:10,400
subscription manager to move to the

00:15:08,120 --> 00:15:15,080
relates subscription or to relate

00:15:10,400 --> 00:15:17,980
product but in a in a temporary

00:15:15,080 --> 00:15:20,780
environment that we will basically use a

00:15:17,980 --> 00:15:23,270
system the end spawn container with an

00:15:20,780 --> 00:15:25,600
overlay FS to modify the system without

00:15:23,270 --> 00:15:30,170
actually modifying the real system and

00:15:25,600 --> 00:15:31,940
so we are able to get system this

00:15:30,170 --> 00:15:37,850
subscription manager to switch over to

00:15:31,940 --> 00:15:41,210
the new product and then after it's done

00:15:37,850 --> 00:15:43,340
we are trying to get the we trying we

00:15:41,210 --> 00:15:46,760
are getting the the metadata from the

00:15:43,340 --> 00:15:49,430
repository and we already in this stage

00:15:46,760 --> 00:15:51,680
we already applied through a plug-in all

00:15:49,430 --> 00:15:54,680
the workarounds to to make the

00:15:51,680 --> 00:15:56,120
transaction succeed and work exactly how

00:15:54,680 --> 00:15:58,520
it should be

00:15:56,120 --> 00:16:00,170
by default young wouldn't be able to DNF

00:15:58,520 --> 00:16:04,490
wouldn't be able to resolve this we're

00:16:00,170 --> 00:16:07,040
using already DNF here because a lot of

00:16:04,490 --> 00:16:08,750
the packaging information is lost and

00:16:07,040 --> 00:16:13,610
there are packages replaced with other

00:16:08,750 --> 00:16:15,440
ones and they cannot be specified in the

00:16:13,610 --> 00:16:17,510
packaging so this is like another reason

00:16:15,440 --> 00:16:21,110
why we had some where we need some

00:16:17,510 --> 00:16:26,750
tooling like this now we will reboot to

00:16:21,110 --> 00:16:28,430
the innatron system and as you see use

00:16:26,750 --> 00:16:30,710
like already went through the first

00:16:28,430 --> 00:16:33,620
stage and now it applies already the

00:16:30,710 --> 00:16:35,090
upgrade transaction and this is if you

00:16:33,620 --> 00:16:40,190
look at the curse everyone notice that

00:16:35,090 --> 00:16:43,190
this is fed up and also you can see it

00:16:40,190 --> 00:16:45,410
here after about like a hundred nine

00:16:43,190 --> 00:16:48,470
seconds of the boot you will notice that

00:16:45,410 --> 00:16:49,850
it will be even faster because it took

00:16:48,470 --> 00:16:52,670
like ten minutes to generate the RAM

00:16:49,850 --> 00:16:54,410
disks for whatever reason there's the

00:16:52,670 --> 00:16:59,700
things which we need to solve but like

00:16:54,410 --> 00:17:02,940
this is still in involved in

00:16:59,700 --> 00:17:08,280
so that was finished relabeling is

00:17:02,940 --> 00:17:13,049
happening now and right after that it

00:17:08,280 --> 00:17:15,179
will be booting into the new system also

00:17:13,049 --> 00:17:17,850
this was I think sped up twice or three

00:17:15,179 --> 00:17:20,040
or four times or something right it's

00:17:17,850 --> 00:17:25,260
just the whole process takes 17 minutes

00:17:20,040 --> 00:17:31,580
I'm married and I'm down to four that is

00:17:25,260 --> 00:17:31,580
not taking too much time of the talk so

00:17:31,880 --> 00:17:38,880
how it's booting into red light I just

00:17:36,360 --> 00:17:40,470
ran some some a few commands that you

00:17:38,880 --> 00:17:43,410
just like showing some things I think

00:17:40,470 --> 00:17:48,360
you see already Linux read it in the

00:17:43,410 --> 00:17:53,309
pricing was 800 PETA and it's like

00:17:48,360 --> 00:18:00,750
they're ready to release file and like

00:17:53,309 --> 00:18:06,630
network is up and that's it for this for

00:18:00,750 --> 00:18:11,850
the demo but let's see how far we are at

00:18:06,630 --> 00:18:14,610
the time good so now I will give you an

00:18:11,850 --> 00:18:17,940
overview overleap about the framework

00:18:14,610 --> 00:18:20,010
what can it do and what does of what

00:18:17,940 --> 00:18:23,820
does it consist what we what we're doing

00:18:20,010 --> 00:18:25,830
here the main thing is that we have a

00:18:23,820 --> 00:18:28,850
thing like called actors which are the

00:18:25,830 --> 00:18:32,340
modules which actually do the work and

00:18:28,850 --> 00:18:36,299
these actors we communicate over

00:18:32,340 --> 00:18:39,000
messages which we represent in the form

00:18:36,299 --> 00:18:40,740
of models the the messages the models

00:18:39,000 --> 00:18:43,110
are basically the payload of the

00:18:40,740 --> 00:18:45,059
messages everything else is metadata

00:18:43,110 --> 00:18:47,040
around it that we know from where it

00:18:45,059 --> 00:18:50,730
came when it was done and things like

00:18:47,040 --> 00:18:53,040
this but it boils down basically to data

00:18:50,730 --> 00:18:56,940
a model looks a model definition looks

00:18:53,040 --> 00:18:59,340
like this we like experience Python guys

00:18:56,940 --> 00:19:02,460
might have noticed that this is a very

00:18:59,340 --> 00:19:05,100
common way of doing things like for

00:19:02,460 --> 00:19:07,860
databases for example since we are

00:19:05,100 --> 00:19:09,330
talking here about data structures it

00:19:07,860 --> 00:19:10,460
was like a natural choice to do

00:19:09,330 --> 00:19:13,640
something similar

00:19:10,460 --> 00:19:15,860
and we have a way of expressing things

00:19:13,640 --> 00:19:20,090
are optional by saying they are knowable

00:19:15,860 --> 00:19:23,840
or making them required by having them

00:19:20,090 --> 00:19:26,930
not knowable and however giving them the

00:19:23,840 --> 00:19:28,580
ability to specify a default value and

00:19:26,930 --> 00:19:33,280
then since they are like kind of

00:19:28,580 --> 00:19:37,130
optional as well there's like also the

00:19:33,280 --> 00:19:42,110
ability of inheritance as you can see

00:19:37,130 --> 00:19:44,420
you can use the same model but with

00:19:42,110 --> 00:19:47,510
different names for different meanings

00:19:44,420 --> 00:19:49,130
sometimes you have the same data but the

00:19:47,510 --> 00:19:51,560
meaning of the data is like something

00:19:49,130 --> 00:19:54,080
else we have here the operant rpm

00:19:51,560 --> 00:19:55,400
transaction tasks is something for the

00:19:54,080 --> 00:19:58,670
workarounds what I was talking about

00:19:55,400 --> 00:20:02,480
where we influence the the RPM

00:19:58,670 --> 00:20:04,400
transaction there's like we say like

00:20:02,480 --> 00:20:05,000
this needs to be installed this needs to

00:20:04,400 --> 00:20:06,620
be kept

00:20:05,000 --> 00:20:10,510
this needs to be removed and there are

00:20:06,620 --> 00:20:13,640
like some local rpms which we bundle to

00:20:10,510 --> 00:20:17,600
solve some of the problems with the

00:20:13,640 --> 00:20:20,450
packaging and however some of these

00:20:17,600 --> 00:20:23,210
actions actually need still to be

00:20:20,450 --> 00:20:26,090
filtered out and that's why we need to

00:20:23,210 --> 00:20:29,770
separate it because otherwise some actor

00:20:26,090 --> 00:20:33,350
says I want to have the RPM transaction

00:20:29,770 --> 00:20:36,020
tasks message but I actually need to

00:20:33,350 --> 00:20:38,600
fill that one so instead of like putting

00:20:36,020 --> 00:20:40,160
there a field and saying like hey this

00:20:38,600 --> 00:20:42,110
is the filtered one or this is not a

00:20:40,160 --> 00:20:44,330
filtered one and having it iterate

00:20:42,110 --> 00:20:47,720
through all possible messages we

00:20:44,330 --> 00:20:50,690
basically just applicated the the

00:20:47,720 --> 00:20:53,660
structure and give it a new name

00:20:50,690 --> 00:20:58,820
we using pipes basically for everything

00:20:53,660 --> 00:21:01,880
I will get there we have different field

00:20:58,820 --> 00:21:05,650
types if you look at it there are no

00:21:01,880 --> 00:21:09,130
dictionaries we have strings numbers

00:21:05,650 --> 00:21:12,770
also specifically integer or float

00:21:09,130 --> 00:21:14,180
bullying's date times lists and model

00:21:12,770 --> 00:21:17,510
where model means like you can have

00:21:14,180 --> 00:21:19,850
another model living as a nested item

00:21:17,510 --> 00:21:21,970
but you cannot have arbitrary key value

00:21:19,850 --> 00:21:24,850
pairs if you want something like this

00:21:21,970 --> 00:21:27,690
use a normal dictionary and dump it as a

00:21:24,850 --> 00:21:32,980
JSON string and you store it as a string

00:21:27,690 --> 00:21:36,090
it's - it basically prevents you from

00:21:32,980 --> 00:21:38,350
doing like the same checks about like

00:21:36,090 --> 00:21:39,790
what's defined whatnot because in the

00:21:38,350 --> 00:21:42,670
end you will end up with everyone just

00:21:39,790 --> 00:21:46,270
using dictionaries and this is not a

00:21:42,670 --> 00:21:51,340
good idea we have also the dialogues

00:21:46,270 --> 00:21:54,310
here they look like this when you use

00:21:51,340 --> 00:21:57,280
them just that here you just see right

00:21:54,310 --> 00:22:01,210
after the execution what was returned so

00:21:57,280 --> 00:22:16,660
I can show if you want I can show you

00:22:01,210 --> 00:22:19,570
that I haven't actually prepared so you

00:22:16,660 --> 00:22:21,820
see like it's waiting for input has a

00:22:19,570 --> 00:22:25,210
default value of the DEF CON she says we

00:22:21,820 --> 00:22:29,040
just like the current local username for

00:22:25,210 --> 00:22:33,250
the for the Wi-Fi and you can specify a

00:22:29,040 --> 00:22:35,560
password which I just did and it's like

00:22:33,250 --> 00:22:38,640
you see there was no echo and not

00:22:35,560 --> 00:22:40,570
echoing it so it's really interactive

00:22:38,640 --> 00:22:44,050
dialogues

00:22:40,570 --> 00:22:46,110
however these dialogues are meant also

00:22:44,050 --> 00:22:51,570
to be replaced with for example cockpit

00:22:46,110 --> 00:22:55,080
based interfaces so we could change the

00:22:51,570 --> 00:22:57,880
the dialogues to be actually web forms

00:22:55,080 --> 00:23:03,780
and if you would in start the upgrade

00:22:57,880 --> 00:23:07,390
through some cockpit instance this still

00:23:03,780 --> 00:23:08,950
hypothetical thing but basically the way

00:23:07,390 --> 00:23:10,960
how we implemented it it should be

00:23:08,950 --> 00:23:12,610
possible because we can just switch the

00:23:10,960 --> 00:23:17,620
renderer and it will handle all these

00:23:12,610 --> 00:23:20,380
things for us here's the like a second

00:23:17,620 --> 00:23:24,360
question like what sci-fi universe you

00:23:20,380 --> 00:23:27,220
prefer I rather not answer this question

00:23:24,360 --> 00:23:31,870
because they might people be very

00:23:27,220 --> 00:23:36,330
passionate about this probably even

00:23:31,870 --> 00:23:36,330
worse which Marvel and DC

00:23:36,610 --> 00:23:43,880
so this is how that look likes really

00:23:40,640 --> 00:23:47,420
new and not even my colleagues in the

00:23:43,880 --> 00:23:48,950
room will know that right now this

00:23:47,420 --> 00:23:52,400
morning I changed actually the way how

00:23:48,950 --> 00:23:56,990
we define dialogues it will look like

00:23:52,400 --> 00:23:59,299
this something like this this is again a

00:23:56,990 --> 00:24:03,260
class and it's very similar to the

00:23:59,299 --> 00:24:05,360
models because it allows you to to write

00:24:03,260 --> 00:24:07,100
it in a more natural way before you had

00:24:05,360 --> 00:24:08,690
to create a dialogue instance and put

00:24:07,100 --> 00:24:11,900
there a couple of components which you

00:24:08,690 --> 00:24:14,720
put there but it was just too

00:24:11,900 --> 00:24:16,100
complicated I got that there's a

00:24:14,720 --> 00:24:18,290
feedback and I was like thinking about

00:24:16,100 --> 00:24:20,960
it why not to do it's like an Indian

00:24:18,290 --> 00:24:22,760
this way then over there was like

00:24:20,960 --> 00:24:24,380
talking why you don't use the models and

00:24:22,760 --> 00:24:28,100
I was like hmm

00:24:24,380 --> 00:24:30,919
so I basically resembled the models in

00:24:28,100 --> 00:24:33,890
some way here as well and use even the

00:24:30,919 --> 00:24:35,600
dog strings for the of the credentials

00:24:33,890 --> 00:24:37,910
basically what is displayed to the user

00:24:35,600 --> 00:24:42,190
and just give the ability to set the

00:24:37,910 --> 00:24:42,190
title for the dialogue man you're done

00:24:43,510 --> 00:24:49,549
for the dialogues you can ask the user

00:24:46,580 --> 00:24:52,520
like certain questions input types are

00:24:49,549 --> 00:24:54,620
text numbers passwords do just like get

00:24:52,520 --> 00:24:56,540
an input of course he has no answers

00:24:54,620 --> 00:24:57,910
choice and multiple choice multiple

00:24:56,540 --> 00:25:02,380
choices

00:24:57,910 --> 00:25:02,380
everyone knows checkboxes right so

00:25:03,700 --> 00:25:12,919
workflows is basically the the thing how

00:25:10,220 --> 00:25:14,929
the framework knows what to do it's like

00:25:12,919 --> 00:25:18,080
if you execute something with the

00:25:14,929 --> 00:25:19,730
framework you specify a workflow the

00:25:18,080 --> 00:25:21,890
beginning of our implies upgrade

00:25:19,730 --> 00:25:23,600
workflow looks like this I stripped it

00:25:21,890 --> 00:25:26,179
down from the documentation because it's

00:25:23,600 --> 00:25:33,730
to get a bit more fitting in here but

00:25:26,179 --> 00:25:37,130
the gist is here you specify basically

00:25:33,730 --> 00:25:40,790
you specify here just the workflow class

00:25:37,130 --> 00:25:43,950
and you define subclasses in here which

00:25:40,790 --> 00:25:48,370
are individual faces and

00:25:43,950 --> 00:25:52,600
so a virtual consists of phases and in

00:25:48,370 --> 00:25:58,260
these phases are these okay missing a

00:25:52,600 --> 00:26:02,559
slide in these faces will be actors and

00:25:58,260 --> 00:26:04,090
the actors are selected by tags and you

00:26:02,559 --> 00:26:06,429
see that it's like for example checks

00:26:04,090 --> 00:26:10,410
face dive down low face acting in rum

00:26:06,429 --> 00:26:15,220
start face tag and I have there we go

00:26:10,410 --> 00:26:17,260
this based on these tags we can find we

00:26:15,220 --> 00:26:19,660
can find from from all the actors that

00:26:17,260 --> 00:26:21,970
exists where to put them into which face

00:26:19,660 --> 00:26:23,470
and when to execute them and that's like

00:26:21,970 --> 00:26:26,890
you can see here like these are like

00:26:23,470 --> 00:26:30,550
facts collection tag track actors these

00:26:26,890 --> 00:26:34,030
red ones and they will go into the facts

00:26:30,550 --> 00:26:36,940
collection face the yellow ones go the

00:26:34,030 --> 00:26:42,970
checks face goes into checks face and so

00:26:36,940 --> 00:26:45,610
on so I think I will skip this today

00:26:42,970 --> 00:26:47,559
this is not too interesting we have a

00:26:45,610 --> 00:26:52,600
repository where all of these things are

00:26:47,559 --> 00:26:54,460
inside and these repositories can also

00:26:52,600 --> 00:26:57,400
be linked together it means they can

00:26:54,460 --> 00:26:58,660
exist multiple repositories one use case

00:26:57,400 --> 00:27:01,660
where this would be for example that

00:26:58,660 --> 00:27:04,000
like a third party a party vendor would

00:27:01,660 --> 00:27:06,450
add their own actors and models and

00:27:04,000 --> 00:27:09,100
things like this entity into the mix and

00:27:06,450 --> 00:27:13,660
but they also want to use things from

00:27:09,100 --> 00:27:16,600
the existing repositories so they can

00:27:13,660 --> 00:27:19,840
actually link to it and include their

00:27:16,600 --> 00:27:22,240
own actors into the workflow we have

00:27:19,840 --> 00:27:25,780
also bundling support for tools which

00:27:22,240 --> 00:27:28,270
like bash scripts even binaries files

00:27:25,780 --> 00:27:30,850
like which you need data files as

00:27:28,270 --> 00:27:35,110
templates or things like this or input

00:27:30,850 --> 00:27:37,090
data you can have Python libraries

00:27:35,110 --> 00:27:39,580
included which is like your own things

00:27:37,090 --> 00:27:41,679
the to make things better and these

00:27:39,580 --> 00:27:45,220
things can be either private to the

00:27:41,679 --> 00:27:47,260
actor or shared across portable this is

00:27:45,220 --> 00:27:51,790
just an overview of overview about like

00:27:47,260 --> 00:27:53,910
what's all there I think that's not then

00:27:51,790 --> 00:27:58,289
we have a tool called nectar

00:27:53,910 --> 00:28:01,410
nectar helps to develop the the reactors

00:27:58,289 --> 00:28:03,720
more rapidly because you need to follow

00:28:01,410 --> 00:28:07,080
some convention and snack that can help

00:28:03,720 --> 00:28:09,090
you to basically get rid of the boiler

00:28:07,080 --> 00:28:12,570
code and regenerate regenerate new to

00:28:09,090 --> 00:28:16,200
things it can run the active like for

00:28:12,570 --> 00:28:19,320
testing it can run whole workflows also

00:28:16,200 --> 00:28:21,900
for testing it can get a generate boiler

00:28:19,320 --> 00:28:25,320
boiler plate for active tax topics

00:28:21,900 --> 00:28:27,809
models workflows even create the

00:28:25,320 --> 00:28:29,549
repository and you can manage the

00:28:27,809 --> 00:28:33,929
repositories with it in a sense of you

00:28:29,549 --> 00:28:36,510
can register them for local yeah there's

00:28:33,929 --> 00:28:39,900
a registry in your home folder where it

00:28:36,510 --> 00:28:41,820
can store the locations of all your

00:28:39,900 --> 00:28:43,770
repositories so that at any place where

00:28:41,820 --> 00:28:46,530
you are they can list them and can find

00:28:43,770 --> 00:28:48,539
what is registered and in the repository

00:28:46,530 --> 00:28:51,750
it can show you what is in there and

00:28:48,539 --> 00:28:52,830
even what is linked to it and of course

00:28:51,750 --> 00:28:56,159
it can do the linking of the

00:28:52,830 --> 00:29:00,679
repositories and now I come to the

00:28:56,159 --> 00:29:00,679
section which is like usually the most

00:29:01,580 --> 00:29:15,830
demanding so for for the life actor demo

00:29:12,390 --> 00:29:19,740
I prepared already a workflow and

00:29:15,830 --> 00:29:21,450
repository there's like I said showed

00:29:19,740 --> 00:29:23,400
you before there was like a work for the

00:29:21,450 --> 00:29:25,799
in place upgrade the workflow this one

00:29:23,400 --> 00:29:28,950
has only two phases as the first phase

00:29:25,799 --> 00:29:31,380
and second phase nothing special it's

00:29:28,950 --> 00:29:33,270
just like I want to show you how you can

00:29:31,380 --> 00:29:39,120
get actually your things executed in

00:29:33,270 --> 00:29:42,470
there so it's the first thing you see

00:29:39,120 --> 00:29:45,630
there's nectar discover which gives you

00:29:42,470 --> 00:29:50,539
the overview and shows you what's in

00:29:45,630 --> 00:29:53,370
there I already predefined for for here

00:29:50,539 --> 00:29:55,020
like two actors a location provider that

00:29:53,370 --> 00:30:00,360
is supposed to be executed at the first

00:29:55,020 --> 00:30:02,010
phase and the sync DEFCON data actor

00:30:00,360 --> 00:30:04,500
that is supposed to be collecting all

00:30:02,010 --> 00:30:08,340
messages that are under the

00:30:04,500 --> 00:30:10,980
defconn's data topic additionally I have

00:30:08,340 --> 00:30:13,620
the location model specified a host name

00:30:10,980 --> 00:30:16,470
and a result host name model specified

00:30:13,620 --> 00:30:20,130
and for those we will be writing now

00:30:16,470 --> 00:30:22,230
some some some actors that actually use

00:30:20,130 --> 00:30:26,340
them just that you get a feel of like

00:30:22,230 --> 00:30:29,520
how one would write like this module so

00:30:26,340 --> 00:30:34,230
the first vector would be like figure

00:30:29,520 --> 00:30:37,110
out what's the current has been so it's

00:30:34,230 --> 00:30:38,700
obviously not a big another big deal but

00:30:37,110 --> 00:30:41,580
for that you can use this nectar tool to

00:30:38,700 --> 00:30:43,650
provide provide you with the boilerplate

00:30:41,580 --> 00:30:45,750
the thing what we need to do we want to

00:30:43,650 --> 00:30:49,920
execute it in the first phase so we copy

00:30:45,750 --> 00:30:52,410
that put it here and we want to have it

00:30:49,920 --> 00:31:00,060
included into the indeed ref convert

00:30:52,410 --> 00:31:02,540
flow so we need to put we would put

00:31:00,060 --> 00:31:07,260
there over the pack for the workflow and

00:31:02,540 --> 00:31:09,630
now since we want to produce like we

00:31:07,260 --> 00:31:11,310
want to scan for the hostname and we

00:31:09,630 --> 00:31:14,780
want to produce a message that actually

00:31:11,310 --> 00:31:17,700
contains it will already say produce a

00:31:14,780 --> 00:31:19,670
hostname which is the model and we call

00:31:17,700 --> 00:31:25,740
this whole thing was name scanner and we

00:31:19,670 --> 00:31:30,150
could now let's lose which is to decode

00:31:25,740 --> 00:31:31,860
and have it here so so you see this is

00:31:30,150 --> 00:31:34,740
the boilerplate we generated for you

00:31:31,860 --> 00:31:36,660
already it imported the models which you

00:31:34,740 --> 00:31:39,450
need it imported the tax which you need

00:31:36,660 --> 00:31:42,870
and it's prefilled it here so the thing

00:31:39,450 --> 00:31:45,480
is that you need to do is get going and

00:31:42,870 --> 00:31:55,070
the first thing we do will say we show a

00:31:45,480 --> 00:31:55,070
message that and to make

00:32:01,660 --> 00:32:12,080
introduce a host name with the name

00:32:03,860 --> 00:32:16,430
variable at the fqdn

00:32:12,080 --> 00:32:18,110
and this is the first acting role let's

00:32:16,430 --> 00:32:20,570
all you need to do to get producer

00:32:18,110 --> 00:32:24,380
message send it to others for also for

00:32:20,570 --> 00:32:30,020
using it to see this in action now we

00:32:24,380 --> 00:32:30,650
can use nectar run to say on the host

00:32:30,020 --> 00:32:39,010
name scanner

00:32:30,650 --> 00:32:39,010
oh look okay something we did wrong

00:33:10,929 --> 00:33:27,799
okay now I mean don't get lost okay now

00:33:17,720 --> 00:33:30,370
I see the file wasn't saved okay so you

00:33:27,799 --> 00:33:32,659
see it just showed shows a message here

00:33:30,370 --> 00:33:35,600
but if you want to see what it produced

00:33:32,659 --> 00:33:38,259
you can actually say print output and

00:33:35,600 --> 00:33:42,380
you can see let it produce a message

00:33:38,259 --> 00:33:44,659
with the payload which says like name

00:33:42,380 --> 00:33:47,269
field and it has the data for the local

00:33:44,659 --> 00:33:51,200
host local domain which is the host name

00:33:47,269 --> 00:33:53,480
of this virtual machine and now if you

00:33:51,200 --> 00:33:55,429
want to process that message you want to

00:33:53,480 --> 00:34:01,820
resolve the IP for that we have the

00:33:55,429 --> 00:34:04,129
resolved host name model that inherits

00:34:01,820 --> 00:34:07,370
the host name model so it gets also the

00:34:04,129 --> 00:34:13,399
name field and extended it with an IP

00:34:07,370 --> 00:34:18,349
field so let's create an actor that does

00:34:13,399 --> 00:34:24,560
this so we can use the same the same

00:34:18,349 --> 00:34:27,379
face we produce the result host name we

00:34:24,560 --> 00:34:32,679
consume the host name of the director

00:34:27,379 --> 00:34:39,679
and we call this actor host name is over

00:34:32,679 --> 00:34:44,690
so now it's your new item is over so for

00:34:39,679 --> 00:34:51,889
every host name we get so for host name

00:34:44,690 --> 00:34:54,980
in name this will limit the input to

00:34:51,889 --> 00:34:56,690
just the type host name if you wouldn't

00:34:54,980 --> 00:34:58,130
do this and you would consume multiple

00:34:56,690 --> 00:34:59,690
types of messages you would get

00:34:58,130 --> 00:35:01,940
everything so basically the

00:34:59,690 --> 00:35:06,650
specification of force name here is a is

00:35:01,940 --> 00:35:13,089
a filter on the type so now we want to

00:35:06,650 --> 00:35:13,089
want to resolve it use the socket

00:35:13,760 --> 00:35:22,790
and use self-produce

00:35:17,650 --> 00:35:29,859
resolved hostname name is first name and

00:35:22,790 --> 00:35:29,859
IP is socket yet host name

00:35:39,840 --> 00:35:47,490
so thank you also for meeting so what we

00:35:45,690 --> 00:35:52,860
do here is like we've resolved it was

00:35:47,490 --> 00:35:56,490
named in this in here we pass through

00:35:52,860 --> 00:36:00,030
the name to the new to the new type we

00:35:56,490 --> 00:36:02,880
produce a new message and send it

00:36:00,030 --> 00:36:04,470
further so for every time we get for if

00:36:02,880 --> 00:36:05,670
there can be multiple messages of the

00:36:04,470 --> 00:36:07,200
host name so there could be multiple

00:36:05,670 --> 00:36:08,610
actors that produce it or there could be

00:36:07,200 --> 00:36:12,830
a bootable host names that need to be

00:36:08,610 --> 00:36:15,990
resolved this would take care of it to

00:36:12,830 --> 00:36:22,860
be resolving all of the host names that

00:36:15,990 --> 00:36:27,500
are sent just for the sake of the

00:36:22,860 --> 00:36:27,500
visibility myself

00:36:31,500 --> 00:36:37,650
so resolving host names and

00:36:55,220 --> 00:37:05,299
so

00:36:57,839 --> 00:37:05,299
now now I'm running this customers order

00:37:07,729 --> 00:37:14,819
but it doesn't do anything because we

00:37:12,479 --> 00:37:17,609
need actually if we use nectar run

00:37:14,819 --> 00:37:20,479
we need to explicitly tell it to save

00:37:17,609 --> 00:37:22,799
something to be used by other actors

00:37:20,479 --> 00:37:24,390
there's a reason for the reason for this

00:37:22,799 --> 00:37:26,400
is if you debugging something it would

00:37:24,390 --> 00:37:29,189
save all the messages you would end up

00:37:26,400 --> 00:37:31,769
with a lot of bogus data in a place that

00:37:29,189 --> 00:37:37,109
would later be used for another actor so

00:37:31,769 --> 00:37:41,779
to avoid this you use you call the first

00:37:37,109 --> 00:37:51,090
one again but you say just safe output

00:37:41,779 --> 00:37:55,050
and now

00:37:51,090 --> 00:37:57,150
this one is doing something so you saw

00:37:55,050 --> 00:38:04,680
before the workflow you can execute it

00:37:57,150 --> 00:38:09,660
with an actor as well and it will

00:38:04,680 --> 00:38:11,310
execute all the things it was scanning

00:38:09,660 --> 00:38:13,560
for the last name in which resolving the

00:38:11,310 --> 00:38:16,200
host names it resolved it for local host

00:38:13,560 --> 00:38:19,470
a local domain and then at the end I

00:38:16,200 --> 00:38:20,940
have a sync actor that actually consumes

00:38:19,470 --> 00:38:23,220
all the messages that have been produced

00:38:20,940 --> 00:38:25,260
disorders like the DEFCON is that which

00:38:23,220 --> 00:38:28,350
is like the first activists like

00:38:25,260 --> 00:38:30,870
providing location the second message

00:38:28,350 --> 00:38:32,670
that was done was the scanning for the

00:38:30,870 --> 00:38:38,760
host name and the third one which was

00:38:32,670 --> 00:38:40,050
done was the result of resolved IP so

00:38:38,760 --> 00:38:44,190
basically that's just a quick

00:38:40,050 --> 00:38:45,450
introduction to this Viking actors can

00:38:44,190 --> 00:38:47,550
be a bit more challenging because

00:38:45,450 --> 00:38:49,620
there's a lot of things involved but I

00:38:47,550 --> 00:38:56,180
hope that gave you a little bit of an

00:38:49,620 --> 00:38:56,180
idea any questions

00:38:59,900 --> 00:39:06,050
one second I just so if you just like

00:39:02,870 --> 00:39:08,360
one just quick links to documentation

00:39:06,050 --> 00:39:17,090
and our github organizations are here

00:39:08,360 --> 00:39:20,930
soon please I would rather see it as

00:39:17,090 --> 00:39:23,060
like working the question was if if it

00:39:20,930 --> 00:39:23,540
would be replacing the system upgrade

00:39:23,060 --> 00:39:25,130
plugin

00:39:23,540 --> 00:39:28,360
I'd rather would see it more as like

00:39:25,130 --> 00:39:31,250
either extending or integrating with it

00:39:28,360 --> 00:39:33,170
because that's basically what we do we

00:39:31,250 --> 00:39:35,780
use we don't want to replace it we just

00:39:33,170 --> 00:39:38,870
for fedora it makes more sense to use

00:39:35,780 --> 00:39:41,300
the approach that is used there so we

00:39:38,870 --> 00:39:46,390
would rather we use what exists there

00:39:41,300 --> 00:39:46,390
and try to integrate with it yes please

00:39:54,010 --> 00:40:04,370
yeah but but the question was if I

00:40:01,580 --> 00:40:06,200
looked at the history of feda and yes I

00:40:04,370 --> 00:40:10,210
did look at the history of fed-up which

00:40:06,200 --> 00:40:12,580
is the rate I'll upgrade to actually and

00:40:10,210 --> 00:40:15,260
yes we have been looking into it and

00:40:12,580 --> 00:40:18,460
there are known problems which we know

00:40:15,260 --> 00:40:22,910
about like like for example a bi

00:40:18,460 --> 00:40:26,360
problems and other things but we are not

00:40:22,910 --> 00:40:28,310
doing the same mistakes which have been

00:40:26,360 --> 00:40:29,990
done there because for example one of

00:40:28,310 --> 00:40:31,910
the things which we are trying to avoid

00:40:29,990 --> 00:40:35,000
is like switching the system D context

00:40:31,910 --> 00:40:37,760
like we don't load like from our new

00:40:35,000 --> 00:40:40,220
system D in the integrand is for HR d 20

00:40:37,760 --> 00:40:41,870
versions older system D and trying to

00:40:40,220 --> 00:40:43,850
give it like the state from a new

00:40:41,870 --> 00:40:47,860
version so now we are not doing this and

00:40:43,850 --> 00:40:50,570
now we're not using Plymouth either so

00:40:47,860 --> 00:40:53,290
so there's we trying to avoid these

00:40:50,570 --> 00:40:53,290
things yes please

00:40:59,589 --> 00:41:04,579
the question is if there if something

00:41:02,390 --> 00:41:09,519
goes wrong if there's a way to roll back

00:41:04,579 --> 00:41:12,140
at this moment no at this moment no but

00:41:09,519 --> 00:41:15,979
this definitely is something that we

00:41:12,140 --> 00:41:18,349
have to address and it's basically

00:41:15,979 --> 00:41:20,239
already a regression from the previous

00:41:18,349 --> 00:41:23,739
version of rel 67 because we actually

00:41:20,239 --> 00:41:25,910
support snapshots in some way there so

00:41:23,739 --> 00:41:27,769
we need to improve on that but the

00:41:25,910 --> 00:41:29,779
initial version won't have it because of

00:41:27,769 --> 00:41:32,029
the complexity with with the rest of it

00:41:29,779 --> 00:41:46,459
involved would be something which we add

00:41:32,029 --> 00:41:47,449
on top of it later but no idea when the

00:41:46,459 --> 00:41:49,719
question is if they have a way of

00:41:47,449 --> 00:41:54,829
verifying that everything is okay um

00:41:49,719 --> 00:41:56,479
let's say like this if the app you don't

00:41:54,829 --> 00:41:58,759
really have a way of verifying that

00:41:56,479 --> 00:42:00,469
everything is okay you can do some

00:41:58,759 --> 00:42:03,849
checks but even if I mean if you can't

00:42:00,469 --> 00:42:06,849
go back what are you doing

00:42:03,849 --> 00:42:06,849
yes

00:42:13,620 --> 00:42:18,360
let's say red is the NIP - we might

00:42:15,930 --> 00:42:20,160
bring it like the framework into it the

00:42:18,360 --> 00:42:22,170
upgrade tool does not make sense in

00:42:20,160 --> 00:42:24,810
because we don't have a workflows

00:42:22,170 --> 00:42:27,000
basically specifically fitting to fedora

00:42:24,810 --> 00:42:29,400
just yet we don't have the time this is

00:42:27,000 --> 00:42:31,470
more like a teaser of like hey get the

00:42:29,400 --> 00:42:33,720
federal community bit like or people who

00:42:31,470 --> 00:42:36,980
are interested with this like get them

00:42:33,720 --> 00:42:39,840
interested into this topic to improve

00:42:36,980 --> 00:42:42,150
like we we don't want to force them

00:42:39,840 --> 00:42:44,520
something to take something that they

00:42:42,150 --> 00:42:47,340
don't want so it's it's like basically

00:42:44,520 --> 00:42:50,340
you hey look what we have we offering

00:42:47,340 --> 00:42:51,960
you - to use it as well and we're fine

00:42:50,340 --> 00:42:54,680
also with doing things for it and work

00:42:51,960 --> 00:42:57,060
with with you but we're not going to

00:42:54,680 --> 00:42:59,790
actively start Moodle right now because

00:42:57,060 --> 00:43:02,220
we're like not having enough time in for

00:42:59,790 --> 00:43:06,470
forgetting it done I don't know a lot of

00:43:02,220 --> 00:43:06,470
other things to do ISO question yes

00:43:08,410 --> 00:43:11,500
[Music]

00:43:19,360 --> 00:43:22,479
[Music]

00:43:45,880 --> 00:43:53,360
so basically if maintaining the obsolete

00:43:50,870 --> 00:43:55,550
stacks in rpms if that would have solved

00:43:53,360 --> 00:43:57,650
some of the problems we have and if the

00:43:55,550 --> 00:43:59,780
Fedora community wouldn't like basically

00:43:57,650 --> 00:44:03,020
purge these obsoletes after like two or

00:43:59,780 --> 00:44:07,040
three versions to basically benefit well

00:44:03,020 --> 00:44:09,470
with it the thing is like I thought so

00:44:07,040 --> 00:44:11,690
as well at the first moment but actually

00:44:09,470 --> 00:44:14,660
the longer I think about it is quite a

00:44:11,690 --> 00:44:17,210
high burden to keep it in there and also

00:44:14,660 --> 00:44:20,450
some of these things cannot be resolved

00:44:17,210 --> 00:44:22,790
with obsoletes or provides for example

00:44:20,450 --> 00:44:26,720
the Python to Python 3 switch

00:44:22,790 --> 00:44:29,210
you cannot say python 2 version is

00:44:26,720 --> 00:44:31,700
obsoleted by a Python 3 version I mean

00:44:29,210 --> 00:44:34,460
it's a library because they right now

00:44:31,700 --> 00:44:37,130
can even coexist you know so it is not

00:44:34,460 --> 00:44:39,230
so simple you know that's why there are

00:44:37,130 --> 00:44:41,210
a lot of corner cases and not all of the

00:44:39,230 --> 00:44:43,400
problems are like related even to these

00:44:41,210 --> 00:44:44,810
things we have a way around this for

00:44:43,400 --> 00:44:47,090
this is called packaged evolution

00:44:44,810 --> 00:44:52,070
service which provides us with data for

00:44:47,090 --> 00:44:54,700
this but this is for some other time any

00:44:52,070 --> 00:44:54,700
other questions

00:45:00,859 --> 00:45:06,839
yeah so within the face I've obviously

00:45:03,539 --> 00:45:09,119
there is Gianni how does the ordering of

00:45:06,839 --> 00:45:11,430
actors work within the face obviously

00:45:09,119 --> 00:45:13,049
the faces is not a problem but the

00:45:11,430 --> 00:45:16,680
actors they can send messages and they

00:45:13,049 --> 00:45:18,890
can write messages and I can send

00:45:16,680 --> 00:45:22,049
messages and consume messages and

00:45:18,890 --> 00:45:24,539
basically we need to be able to resolve

00:45:22,049 --> 00:45:27,089
the the order that's like what you try

00:45:24,539 --> 00:45:30,470
to say right so what we are using there

00:45:27,089 --> 00:45:34,619
what we using there is topology sort and

00:45:30,470 --> 00:45:37,950
basically any producer is executed first

00:45:34,619 --> 00:45:39,690
for anything that is consumed so if you

00:45:37,950 --> 00:45:41,190
know within the face anyone produces

00:45:39,690 --> 00:45:44,819
something that the same face consumes

00:45:41,190 --> 00:45:48,630
that it's done before and no one can

00:45:44,819 --> 00:45:57,329
produce and consume the same message so

00:45:48,630 --> 00:45:58,950
let's I need other questions thank you

00:45:57,329 --> 00:46:05,880
very much

00:45:58,950 --> 00:46:05,880

YouTube URL: https://www.youtube.com/watch?v=a-tfi3TP4BQ


