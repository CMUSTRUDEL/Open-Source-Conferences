Title: Declare your Linux Network state!
Publication date: 2019-03-04
Playlist: DevConfCZ 2019
Description: 
	Presentation name: Declare your Linux Network state!
Speakers: Edward Haas, Till Maas
Description:  Various services built on top of Linux need to manage the network configuration. Each service models network entities differently and uses various APIs to change the network state, multiplying the required work.
NMState centralizes the challenges by providing a unified declarative representation of the Linux network state and allowing to modify it using the same schema. NMState also provides Ansible network modules to manage Linux systems, conforming to the same uniform schema used to control network appliances.
The talk will introduce NMState, its core capabilities, current users and roadmap, including plans for Kubevirt, oVirt, Openshift and Openstack support. Afterwards, the audience will understand the benefits of using NMState to centralize collaboration on Linux network management.
[ https://sched.co/JcnJ ]
Captions: 
	00:00:06,400 --> 00:00:23,439
my name is until we come from different

00:00:12,200 --> 00:00:27,140
teams in a doubt I'm from we want to

00:00:23,439 --> 00:00:30,830
tell you about a challenge we had with

00:00:27,140 --> 00:00:32,720
when you when we work on over here we

00:00:30,830 --> 00:00:36,800
had a problem that we wanted to

00:00:32,720 --> 00:00:39,260
configure the Linux networking and we

00:00:36,800 --> 00:00:43,550
already do it today but we do it using

00:00:39,260 --> 00:00:46,010
I've CFG files and with the future that

00:00:43,550 --> 00:00:47,900
I've searched the files are slowly dying

00:00:46,010 --> 00:00:51,610
and not maintained anymore

00:00:47,900 --> 00:00:55,760
we wanted to do something more current

00:00:51,610 --> 00:00:57,680
mainly network manager today and add all

00:00:55,760 --> 00:01:00,350
kinds of new features which we were

00:00:57,680 --> 00:01:10,700
missing and when we started working on

00:01:00,350 --> 00:01:15,490
that when we started working on that we

00:01:10,700 --> 00:01:18,830
found out that actually many projects

00:01:15,490 --> 00:01:21,830
actually need the same thing they they

00:01:18,830 --> 00:01:24,560
also look to configure the network part

00:01:21,830 --> 00:01:29,300
of the Linux and everyone is doing it

00:01:24,560 --> 00:01:30,470
very differently like some of using is

00:01:29,300 --> 00:01:34,820
using a CFG

00:01:30,470 --> 00:01:38,450
and IP route to end net link and all

00:01:34,820 --> 00:01:43,370
kind of other options open stock many

00:01:38,450 --> 00:01:45,080
uses I've saved if I'm not mistaken as

00:01:43,370 --> 00:01:51,610
you can see everyone is doing something

00:01:45,080 --> 00:01:54,380
else and it became obvious that if we

00:01:51,610 --> 00:01:56,990
stop working with a top manager and we

00:01:54,380 --> 00:01:58,909
invest in god you could have to do it to

00:01:56,990 --> 00:02:03,290
make sense to do something that can

00:01:58,909 --> 00:02:08,119
serve everyone so we we suggested that

00:02:03,290 --> 00:02:11,239
this is very complex we don't we want to

00:02:08,119 --> 00:02:13,549
simplify it for for us and for everyone

00:02:11,239 --> 00:02:18,529
else and hopefully the others will also

00:02:13,549 --> 00:02:22,510
contribute to a more I'll try to show

00:02:18,529 --> 00:02:25,579
you the what we mean by this nm state

00:02:22,510 --> 00:02:29,290
solution so this is how we configure a

00:02:25,579 --> 00:02:33,650
bond with slaves and an IP address on

00:02:29,290 --> 00:02:35,989
music network manager and nmcli this is

00:02:33,650 --> 00:02:39,349
how we configure it using IP log tool

00:02:35,989 --> 00:02:42,769
and this is how we configure to touch

00:02:39,349 --> 00:02:45,709
the FG it's for each interface we have I

00:02:42,769 --> 00:02:49,549
mean we have for the bond and a 3d file

00:02:45,709 --> 00:02:53,529
and to find for the slaves and this is

00:02:49,549 --> 00:02:57,999
how we reconfigure it using an 'm state

00:02:53,529 --> 00:02:57,999
so this is the project itself

00:02:59,030 --> 00:03:05,810
so our intention and what we created

00:03:03,260 --> 00:03:09,110
until now is to have one layer and

00:03:05,810 --> 00:03:10,970
hopefully every one of the project and

00:03:09,110 --> 00:03:14,830
many others at least these are the ones

00:03:10,970 --> 00:03:17,870
that we focus currently will use this

00:03:14,830 --> 00:03:21,950
declarative way to configure the Linux

00:03:17,870 --> 00:03:25,010
networking and that that layer will use

00:03:21,950 --> 00:03:34,190
the liberal M and network manager and

00:03:25,010 --> 00:03:36,800
whatever is needed to configure the now

00:03:34,190 --> 00:03:39,170
let's get to the design design of state

00:03:36,800 --> 00:03:41,150
earlier we saw that for example Albert

00:03:39,170 --> 00:03:43,070
was using a lot of different tools and

00:03:41,150 --> 00:03:45,050
this was because it needs to have the

00:03:43,070 --> 00:03:48,020
complete Linux network state so not just

00:03:45,050 --> 00:03:49,820
only part of us and one idea of a new

00:03:48,020 --> 00:03:52,610
state is really to capture everything

00:03:49,820 --> 00:03:56,800
that's important about networking on a

00:03:52,610 --> 00:04:01,550
Linux house in one central place and

00:03:56,800 --> 00:04:03,739
this state should not be used only to be

00:04:01,550 --> 00:04:05,570
able to configure the networking but you

00:04:03,739 --> 00:04:07,820
get the same user can use the same

00:04:05,570 --> 00:04:10,489
format for reporting but for example if

00:04:07,820 --> 00:04:12,530
you want to have a system that's

00:04:10,489 --> 00:04:13,970
configured the way you want and you want

00:04:12,530 --> 00:04:16,940
to replicate this you can just get

00:04:13,970 --> 00:04:19,580
report from the current state maybe just

00:04:16,940 --> 00:04:21,380
network card names or MAC addresses and

00:04:19,580 --> 00:04:23,900
then apply the state to a different

00:04:21,380 --> 00:04:28,280
machine and you get the fan the same

00:04:23,900 --> 00:04:29,780
result and for this state definition we

00:04:28,280 --> 00:04:32,000
just want to do it

00:04:29,780 --> 00:04:34,430
declarative so this means it can be

00:04:32,000 --> 00:04:36,620
represented in JSON or younger or it's a

00:04:34,430 --> 00:04:40,220
Python dictionary with the central

00:04:36,620 --> 00:04:42,350
values and then this allows other tools

00:04:40,220 --> 00:04:45,229
to build on top of this that also needs

00:04:42,350 --> 00:04:47,540
some kind of declarative interface and

00:04:45,229 --> 00:04:49,790
then all the logic can be an nm state

00:04:47,540 --> 00:04:51,320
and you only need to map for example the

00:04:49,790 --> 00:04:52,790
schema that they're using an enemy state

00:04:51,320 --> 00:04:54,740
to the schema you're using somewhere

00:04:52,790 --> 00:04:56,690
else or maybe we will even adjust a

00:04:54,740 --> 00:04:59,900
schema in nm state because we are not

00:04:56,690 --> 00:05:01,610
really interested in defining the schema

00:04:59,900 --> 00:05:04,160
that everyone is use what you want to

00:05:01,610 --> 00:05:06,740
make it easy to have some kind of

00:05:04,160 --> 00:05:10,669
decorative schema and we just had to

00:05:06,740 --> 00:05:12,770
choose something to start with the

00:05:10,669 --> 00:05:14,509
design itself or the idea

00:05:12,770 --> 00:05:17,660
it's inspired by an industry standard

00:05:14,509 --> 00:05:20,000
for networked devices which is a head

00:05:17,660 --> 00:05:21,919
count and young where you have something

00:05:20,000 --> 00:05:24,470
that defines the network configuration

00:05:21,919 --> 00:05:29,379
of these devices in a unified way and

00:05:24,470 --> 00:05:33,560
there's a lot of C's about this it's all

00:05:29,379 --> 00:05:35,720
we didn't want to start doing XML but we

00:05:33,560 --> 00:05:40,250
prefer Jason Jana but it should still be

00:05:35,720 --> 00:05:43,419
easy to map from our decorative way to

00:05:40,250 --> 00:05:47,210
XML if you would like to share this

00:05:43,419 --> 00:05:50,270
another key feature that was important

00:05:47,210 --> 00:05:51,979
to us at that you can have atomic

00:05:50,270 --> 00:05:54,740
changes so for example you know this

00:05:51,979 --> 00:05:56,930
from Network Devices where you can check

00:05:54,740 --> 00:05:59,210
the configuration then you apply it you

00:05:56,930 --> 00:06:01,699
can connect the changes then check it

00:05:59,210 --> 00:06:04,340
apply it and it will apply them or it

00:06:01,699 --> 00:06:05,389
will you can walk back but with Linux

00:06:04,340 --> 00:06:07,490
networking you don't have this

00:06:05,389 --> 00:06:10,099
possibility nowadays so for example if

00:06:07,490 --> 00:06:12,710
you need to move the configuration from

00:06:10,099 --> 00:06:14,780
an single interface into a bridge or a

00:06:12,710 --> 00:06:17,599
bond device and the face in between then

00:06:14,780 --> 00:06:19,610
you might end up in the stage we cannot

00:06:17,599 --> 00:06:21,949
access the Machine anymore because you

00:06:19,610 --> 00:06:23,599
either need to at least the IP address

00:06:21,949 --> 00:06:26,229
under single interface or on the bridge

00:06:23,599 --> 00:06:29,270
interface and we want to make sure that

00:06:26,229 --> 00:06:31,159
when you define a state we verify

00:06:29,270 --> 00:06:33,469
whether or not it's correct and if it's

00:06:31,159 --> 00:06:36,770
not correct we will walk back to the

00:06:33,469 --> 00:06:39,400
previous set so you can rely on having

00:06:36,770 --> 00:06:41,810
either the one state or the other one

00:06:39,400 --> 00:06:44,000
the design it's currently based on

00:06:41,810 --> 00:06:46,580
network major because it's the best

00:06:44,000 --> 00:06:49,550
solution to manage all kind of different

00:06:46,580 --> 00:06:51,979
networking aspects nowadays but of

00:06:49,550 --> 00:06:54,349
course it cannot handle everything that

00:06:51,979 --> 00:06:57,550
might be some educators for example for

00:06:54,349 --> 00:07:00,349
vendors that provides there are

00:06:57,550 --> 00:07:02,389
proprietary solutions that customers

00:07:00,349 --> 00:07:06,580
would like to use and therefore we are

00:07:02,389 --> 00:07:08,810
also hoping to add other backends for

00:07:06,580 --> 00:07:11,630
features that cannot be added to network

00:07:08,810 --> 00:07:13,250
manager and it might also be easier to

00:07:11,630 --> 00:07:15,380
add them now tandem state because it's

00:07:13,250 --> 00:07:17,360
still a young project and then

00:07:15,380 --> 00:07:17,840
eventually they can also end up in

00:07:17,360 --> 00:07:21,430
network

00:07:17,840 --> 00:07:24,820
makes sense to implement them for a

00:07:21,430 --> 00:07:24,820
wider audience

00:07:24,850 --> 00:07:30,139
Kirti we already support the basic

00:07:27,979 --> 00:07:32,360
settings which make it easy to figure

00:07:30,139 --> 00:07:34,729
out whether this concept is makes sense

00:07:32,360 --> 00:07:38,300
for someone such as a net devices of

00:07:34,729 --> 00:07:41,169
course with ipv6 and ipv4 configuration

00:07:38,300 --> 00:07:44,600
both static and dynamic addresses and

00:07:41,169 --> 00:07:47,479
basic aggregation types like the bonding

00:07:44,600 --> 00:07:49,850
linux bridges and even obviously obvious

00:07:47,479 --> 00:07:52,400
business support yeah still currently we

00:07:49,850 --> 00:07:55,760
are mostly using what network manager is

00:07:52,400 --> 00:08:00,100
already providing and then also focusing

00:07:55,760 --> 00:08:02,000
on the other aspects like the

00:08:00,100 --> 00:08:04,720
configuration verification to ensure

00:08:02,000 --> 00:08:07,550
that everything is working well together

00:08:04,720 --> 00:08:08,900
to do this there's of course a

00:08:07,550 --> 00:08:11,840
command-line interface that makes it

00:08:08,900 --> 00:08:14,090
easy to show what we are working and to

00:08:11,840 --> 00:08:17,120
test this to demonstrate this let's not

00:08:14,090 --> 00:08:20,389
find an interface that everyone else

00:08:17,120 --> 00:08:23,060
needs to use but for example we can use

00:08:20,389 --> 00:08:26,000
it here to just show what a state would

00:08:23,060 --> 00:08:27,620
look like so this would be so here you

00:08:26,000 --> 00:08:30,710
have two reporting you get the current

00:08:27,620 --> 00:08:33,860
state of eth0 and then you can use this

00:08:30,710 --> 00:08:37,370
one to apply to a different machine with

00:08:33,860 --> 00:08:41,029
the only for example changed interface

00:08:37,370 --> 00:08:43,339
name or if you want to use the API it's

00:08:41,029 --> 00:08:46,670
also very simple it's I think basically

00:08:43,339 --> 00:08:48,890
the same methods you have a method to

00:08:46,670 --> 00:08:51,080
get the current state net info shell and

00:08:48,890 --> 00:08:52,520
you have applied to apply the state and

00:08:51,080 --> 00:08:54,230
for example if you just want to change

00:08:52,520 --> 00:08:56,600
the MTU you take the current state

00:08:54,230 --> 00:08:58,400
change the mq where you apply it and

00:08:56,600 --> 00:09:00,860
then afterwards the MTU will be changed

00:08:58,400 --> 00:09:02,779
and then as a human you can easily look

00:09:00,860 --> 00:09:05,270
at the Jason configuration of the

00:09:02,779 --> 00:09:07,760
current House system and in my opinion

00:09:05,270 --> 00:09:09,230
it's very self-explanatory so you just

00:09:07,760 --> 00:09:11,950
see what you need to do and you don't

00:09:09,230 --> 00:09:16,550
have to dig to different tools

00:09:11,950 --> 00:09:20,990
there's also from the interval network

00:09:16,550 --> 00:09:23,390
site standard where they agreed on a

00:09:20,990 --> 00:09:24,180
common interface across several network

00:09:23,390 --> 00:09:27,779
module

00:09:24,180 --> 00:09:31,020
the flenders provides support for their

00:09:27,779 --> 00:09:33,390
network devices like cisco juniper and I

00:09:31,020 --> 00:09:33,960
think dozens others but there's nothing

00:09:33,390 --> 00:09:37,680
yet

00:09:33,960 --> 00:09:40,290
to configure Linux host networking the

00:09:37,680 --> 00:09:43,200
same thing and because with an M state

00:09:40,290 --> 00:09:46,649
you already have the possibility to map

00:09:43,200 --> 00:09:48,240
the decorative state to the New York

00:09:46,649 --> 00:09:50,190
source network instead it's also very

00:09:48,240 --> 00:09:52,620
easy to implement these modules so we

00:09:50,190 --> 00:09:55,290
also started implementing them and they

00:09:52,620 --> 00:09:57,839
just create like the mapping from the

00:09:55,290 --> 00:10:01,589
configuration which we can see here at

00:09:57,839 --> 00:10:06,510
the left hand side this is how you would

00:10:01,589 --> 00:10:08,790
configure link aggregation and this

00:10:06,510 --> 00:10:12,060
would work across all kinds of different

00:10:08,790 --> 00:10:14,370
network devices in the venom state we

00:10:12,060 --> 00:10:17,040
have a module that would just translate

00:10:14,370 --> 00:10:19,050
this day to day in Hempstead State we

00:10:17,040 --> 00:10:21,600
presentation then you can apply it as

00:10:19,050 --> 00:10:24,000
well but from the user perspective it

00:10:21,600 --> 00:10:27,750
just looks like this and it's very easy

00:10:24,000 --> 00:10:30,180
for for the programmer to do this to

00:10:27,750 --> 00:10:31,790
implement this even for other schemas if

00:10:30,180 --> 00:10:35,970
you like

00:10:31,790 --> 00:10:37,770
so we also talked about verification and

00:10:35,970 --> 00:10:40,680
Warbeck and so that's something that I

00:10:37,770 --> 00:10:43,080
would like to use to demonstrate the

00:10:40,680 --> 00:10:53,220
current state of M state with a simple

00:10:43,080 --> 00:10:55,470
example so give you one machine and on

00:10:53,220 --> 00:10:58,440
the right hand side you see the current

00:10:55,470 --> 00:11:03,020
network configuration I said start on

00:10:58,440 --> 00:11:07,950
this and I have an example state file oh

00:11:03,020 --> 00:11:10,950
it was so this is just to configure bond

00:11:07,950 --> 00:11:11,400
interface called web bond with two

00:11:10,950 --> 00:11:13,980
slaves

00:11:11,400 --> 00:11:18,140
each h1 h2 and also a villain on top of

00:11:13,980 --> 00:11:20,730
this then I can use annum State CGI set

00:11:18,140 --> 00:11:22,440
apply this there's a lot of debug output

00:11:20,730 --> 00:11:24,260
and then on the right hand side you see

00:11:22,440 --> 00:11:27,899
there's the configuration files on disk

00:11:24,260 --> 00:11:31,470
and can also run nmcli to get the

00:11:27,899 --> 00:11:33,290
current connections and you see that the

00:11:31,470 --> 00:11:35,810
bond interface

00:11:33,290 --> 00:11:38,899
successfully and also the villain on top

00:11:35,810 --> 00:11:43,040
of this there's also the added Komatsu

00:11:38,899 --> 00:11:46,279
these are basically I didn't meant to

00:11:43,040 --> 00:11:50,149
edit everything so I can edit just the

00:11:46,279 --> 00:11:54,230
web font interfaces and then I want to

00:11:50,149 --> 00:11:58,370
reset the system so I can afterwards

00:11:54,230 --> 00:12:00,519
demonstrate you the wall back so I just

00:11:58,370 --> 00:12:02,959
say Epson for both the web font

00:12:00,519 --> 00:12:06,380
interface and the vena interface I want

00:12:02,959 --> 00:12:11,000
it and you see the configuration is gone

00:12:06,380 --> 00:12:14,600
it also be the the interfaces are gone

00:12:11,000 --> 00:12:19,250
and the nmcli output and now I will use

00:12:14,600 --> 00:12:26,269
this playbook copy it and oh it's

00:12:19,250 --> 00:12:30,139
already there and so the idea is now to

00:12:26,269 --> 00:12:33,259
create a stage that would fail and to

00:12:30,139 --> 00:12:34,880
artificially create a failure to show

00:12:33,259 --> 00:12:37,610
you the wall back I will just at

00:12:34,880 --> 00:12:39,410
something like fetch whoo so it's not

00:12:37,610 --> 00:12:41,410
it's an invalid value but something that

00:12:39,410 --> 00:12:43,579
nm state cannot really find in the

00:12:41,410 --> 00:12:48,199
resulting output because there's no

00:12:43,579 --> 00:12:53,000
transition to get it report fair - this

00:12:48,199 --> 00:12:55,730
means when I now apply this for brief

00:12:53,000 --> 00:13:00,110
moment the interface will be created but

00:12:55,730 --> 00:13:02,510
then it notices here at the time that

00:13:00,110 --> 00:13:04,670
the outcome state doesn't have this

00:13:02,510 --> 00:13:06,470
property because nothing maps to this

00:13:04,670 --> 00:13:12,680
again it falls back to the previous

00:13:06,470 --> 00:13:15,440
state and now I will end over again to

00:13:12,680 --> 00:13:20,630
Eddie who will show us another feature

00:13:15,440 --> 00:13:24,910
that we have the methods anyone is

00:13:20,630 --> 00:13:29,600
familiar with kubernetes here the way

00:13:24,910 --> 00:13:34,279
one of the work of we found out that it

00:13:29,600 --> 00:13:36,830
is this one is also useful for allowing

00:13:34,279 --> 00:13:39,950
to grow lettuce or some extension of

00:13:36,830 --> 00:13:42,649
that we hopefully will be accepted to

00:13:39,950 --> 00:13:45,110
configure the node the networking oh no

00:13:42,649 --> 00:13:48,260
not today kubernetes is not interested

00:13:45,110 --> 00:13:50,990
in managing the node networking so they

00:13:48,260 --> 00:13:53,269
don't care if you have a pond there over

00:13:50,990 --> 00:13:55,730
the bridge or whatever they just want

00:13:53,269 --> 00:13:58,180
connectivity to exist and they rely on

00:13:55,730 --> 00:14:02,690
someone else to do it so this is a

00:13:58,180 --> 00:14:05,260
suggestion and survey that was here it

00:14:02,690 --> 00:14:08,899
was presented in order to allow

00:14:05,260 --> 00:14:11,390
kubernetes shafted so you can define the

00:14:08,899 --> 00:14:14,769
node networking through coalescing

00:14:11,390 --> 00:14:18,500
itself to its APR it's like an extension

00:14:14,769 --> 00:14:20,540
so what we do what if you are

00:14:18,500 --> 00:14:23,450
interesting you are welcome to click on

00:14:20,540 --> 00:14:27,380
that link after all talk but what we are

00:14:23,450 --> 00:14:30,740
doing there we have like two schemas one

00:14:27,380 --> 00:14:34,100
is called node node net config policy

00:14:30,740 --> 00:14:38,060
and the second one is the no network

00:14:34,100 --> 00:14:41,300
state the policy say something it has a

00:14:38,060 --> 00:14:44,390
match with for example on the nodes and

00:14:41,300 --> 00:14:48,529
on the current state of the nodes and

00:14:44,390 --> 00:14:50,420
they're not apply snippet it will the

00:14:48,529 --> 00:14:52,730
policy will generate States for the

00:14:50,420 --> 00:14:54,950
nodes and then the this that state for

00:14:52,730 --> 00:14:57,620
nano would be applied like in our case

00:14:54,950 --> 00:15:00,440
so there is Manik I wrote here a small

00:14:57,620 --> 00:15:03,320
example so if we can say in the policy

00:15:00,440 --> 00:15:06,170
that on every node in the cluster on

00:15:03,320 --> 00:15:08,360
every saw of acceleration stake here

00:15:06,170 --> 00:15:11,480
on Esther of the interface we want to

00:15:08,360 --> 00:15:14,779
define a two virtual functions and it

00:15:11,480 --> 00:15:17,029
will go to each of the each of the nodes

00:15:14,779 --> 00:15:18,829
it will read the state of their nodes

00:15:17,029 --> 00:15:22,070
will understand that the interfaces are

00:15:18,829 --> 00:15:25,790
SLV and will go and update this the

00:15:22,070 --> 00:15:28,040
desired state 2 to 8 so in this case for

00:15:25,790 --> 00:15:31,300
the first one it is 0 and it is 1 our

00:15:28,040 --> 00:15:34,090
service so it defines 8 there and so on

00:15:31,300 --> 00:15:36,580
this is maybe

00:15:34,090 --> 00:15:39,970
we hope that it will be accepted it's

00:15:36,580 --> 00:15:42,490
mainly interested interesting when we

00:15:39,970 --> 00:15:44,500
when containers will start working on

00:15:42,490 --> 00:15:47,860
their metal and not like today they are

00:15:44,500 --> 00:15:50,200
working on many on virtual machines so

00:15:47,860 --> 00:15:55,150
then it will be very important to have

00:15:50,200 --> 00:15:59,890
something like that this is an example

00:15:55,150 --> 00:16:03,640
of of the CLT how it looks like the the

00:15:59,890 --> 00:16:05,770
beginning is some kubernetes tea and

00:16:03,640 --> 00:16:08,680
stuff and the rest is very similar to

00:16:05,770 --> 00:16:11,290
what we saw earlier it maps almost

00:16:08,680 --> 00:16:19,480
identically to the to the nm state

00:16:11,290 --> 00:16:21,130
schema we found that the that there were

00:16:19,480 --> 00:16:25,660
several challenges in working with

00:16:21,130 --> 00:16:27,430
desire with declarative States which

00:16:25,660 --> 00:16:29,590
were not expected at the beginning at

00:16:27,430 --> 00:16:31,900
least one of them is when you change

00:16:29,590 --> 00:16:34,870
something for example in this example

00:16:31,900 --> 00:16:40,050
when you want to say ipv4 enable DHCP

00:16:34,870 --> 00:16:42,520
there sometimes this this has

00:16:40,050 --> 00:16:45,100
application on other parameters for

00:16:42,520 --> 00:16:48,190
example if you say DHCP enable and it

00:16:45,100 --> 00:16:50,020
gets an IP address the currents the

00:16:48,190 --> 00:16:52,620
actual state the current state will have

00:16:50,020 --> 00:16:55,930
an IP address so how will you check that

00:16:52,620 --> 00:16:59,920
the desired state is is actually like

00:16:55,930 --> 00:17:01,960
the current state so in some cases this

00:16:59,920 --> 00:17:04,690
one there is also the negotiation of the

00:17:01,960 --> 00:17:08,140
link because you want to say that I want

00:17:04,690 --> 00:17:12,700
to have speed Auto negotiation with

00:17:08,140 --> 00:17:15,340
speed 10 gig and maybe it got one

00:17:12,700 --> 00:17:20,160
because something like that so this

00:17:15,340 --> 00:17:23,110
challenge is needs to be resolved like

00:17:20,160 --> 00:17:27,519
Pacifica to the to the case that

00:17:23,110 --> 00:17:29,130
in also and there are many debates on

00:17:27,519 --> 00:17:32,409
how to handle it

00:17:29,130 --> 00:17:34,899
this is a continuous channel that we see

00:17:32,409 --> 00:17:36,429
every time we had something new yes so

00:17:34,899 --> 00:17:39,010
the other changes also if you want to

00:17:36,429 --> 00:17:40,870
remove something so for example only

00:17:39,010 --> 00:17:43,210
after this stage for the actual

00:17:40,870 --> 00:17:45,279
interface configuration but not a

00:17:43,210 --> 00:17:47,320
possibility to explicitly say just

00:17:45,279 --> 00:17:49,929
remove this IP address in a declarative

00:17:47,320 --> 00:17:51,490
way except to get all the current IP

00:17:49,929 --> 00:17:53,590
addresses we move the one that you don't

00:17:51,490 --> 00:17:55,450
want to have and then say you want all

00:17:53,590 --> 00:17:57,580
the other ones so there are some

00:17:55,450 --> 00:18:01,240
limitations and how you can express

00:17:57,580 --> 00:18:06,419
things in a declarative way or you have

00:18:01,240 --> 00:18:06,419
to do some kind of compromises in there

00:18:06,840 --> 00:18:12,760
so I guess I see you're really excited

00:18:10,450 --> 00:18:16,000
about this you just want us to shut up

00:18:12,760 --> 00:18:18,929
and take your money but it's we software

00:18:16,000 --> 00:18:22,179
so you can just get it on state I all

00:18:18,929 --> 00:18:24,940
and it's currently package already in

00:18:22,179 --> 00:18:27,669
fedora it's available in epic testing

00:18:24,940 --> 00:18:30,429
and we also have a copper repository

00:18:27,669 --> 00:18:32,889
where you get automatic rebuilds on

00:18:30,429 --> 00:18:35,830
after every commit on master and we have

00:18:32,889 --> 00:18:39,159
also some kind of CI that gates or the

00:18:35,830 --> 00:18:41,320
pull request it's available on pi PI as

00:18:39,159 --> 00:18:44,019
well so you can do pip install something

00:18:41,320 --> 00:18:46,590
you can run it from the pickup we

00:18:44,019 --> 00:18:49,000
positive it and we are also working on

00:18:46,590 --> 00:18:51,909
supplying container images so you just

00:18:49,000 --> 00:18:54,789
can run a container and play on the

00:18:51,909 --> 00:18:57,010
content of the network manager and in M

00:18:54,789 --> 00:18:58,840
state city and see if it suits your

00:18:57,010 --> 00:19:00,269
needs and if you would like to

00:18:58,840 --> 00:19:02,830
participate in the development

00:19:00,269 --> 00:19:04,929
everything is happening properly so

00:19:02,830 --> 00:19:07,779
development is at github where we have

00:19:04,929 --> 00:19:10,990
full requests in the source code we also

00:19:07,779 --> 00:19:13,179
do some planning on JIRA which is the so

00:19:10,990 --> 00:19:15,789
the intestine done edges the apps being

00:19:13,179 --> 00:19:18,600
3gr instance where you still needed in

00:19:15,789 --> 00:19:21,220
there you need an account but you don't

00:19:18,600 --> 00:19:23,440
need any extra permissions to access

00:19:21,220 --> 00:19:26,060
this and we are your quantity just

00:19:23,440 --> 00:19:29,300
discussing topics on an F

00:19:26,060 --> 00:19:31,910
because it mainly affects things with

00:19:29,300 --> 00:19:36,410
network manager and person I see channel

00:19:31,910 --> 00:19:38,360
on freenode I see hashtag and instead so

00:19:36,410 --> 00:19:41,540
what are we planning to develop in the

00:19:38,360 --> 00:19:43,700
future so currently under review is

00:19:41,540 --> 00:19:47,000
already ending watching support which is

00:19:43,700 --> 00:19:50,990
a little bit of challenge and few other

00:19:47,000 --> 00:19:53,540
things but yeah we also want to get your

00:19:50,990 --> 00:19:55,070
feedback if there's something that you

00:19:53,540 --> 00:19:58,010
would like to have let you see it's

00:19:55,070 --> 00:19:59,810
important then just speak up now of our

00:19:58,010 --> 00:20:10,250
what are your other questions and you

00:19:59,810 --> 00:20:12,410
will get some kind of you so the

00:20:10,250 --> 00:20:14,870
question was was the Debian support

00:20:12,410 --> 00:20:17,210
basically we are building on top of

00:20:14,870 --> 00:20:18,920
network manager so of course the problem

00:20:17,210 --> 00:20:22,180
with Debbie might be the network manager

00:20:18,920 --> 00:20:24,230
is too old if you have stable Debian but

00:20:22,180 --> 00:20:25,730
everything that's handed to network

00:20:24,230 --> 00:20:28,520
manager will work with random state as

00:20:25,730 --> 00:20:31,240
well because network managers our

00:20:28,520 --> 00:20:31,240
abstraction layer

00:20:54,850 --> 00:21:03,560
the ticket is like the idea was to have

00:21:00,340 --> 00:21:07,300
we asked is asking if we call it to

00:21:03,560 --> 00:21:12,170
provided the backend of how to implement

00:21:07,300 --> 00:21:14,150
the declarative way how to implement it

00:21:12,170 --> 00:21:15,680
not with using metric measure but with

00:21:14,150 --> 00:21:18,740
something else that is maybe we don't

00:21:15,680 --> 00:21:21,080
level like that link or something really

00:21:18,740 --> 00:21:23,210
low for embedded systems an example

00:21:21,080 --> 00:21:28,160
because network major may be too costly

00:21:23,210 --> 00:21:29,990
the right so yes it was it is I mean if

00:21:28,160 --> 00:21:31,670
someone will come and say this is very

00:21:29,990 --> 00:21:35,420
important and it makes sense

00:21:31,670 --> 00:21:38,030
III can join the effort and create a

00:21:35,420 --> 00:21:40,970
provider for the for implemented it

00:21:38,030 --> 00:21:43,610
through something else it's like we hope

00:21:40,970 --> 00:21:46,820
we are going to make it pluggable the

00:21:43,610 --> 00:21:49,310
provider spot currently anatomize is the

00:21:46,820 --> 00:21:51,800
main focus but we will reverse the

00:21:49,310 --> 00:21:54,170
dependency so it can just plug in and

00:21:51,800 --> 00:21:56,060
implement the scheme and also we're

00:21:54,170 --> 00:21:58,010
working closely with the network manager

00:21:56,060 --> 00:22:00,320
team so if there any specific concerns

00:21:58,010 --> 00:22:01,760
about resource consumption and maybe

00:22:00,320 --> 00:22:04,490
they can be addressed a network manager

00:22:01,760 --> 00:22:07,340
directly and then network manager will

00:22:04,490 --> 00:22:09,910
also suit the use case on low power

00:22:07,340 --> 00:22:09,910
devices

00:22:12,280 --> 00:22:17,570
yeah that's true but we can try view if

00:22:15,710 --> 00:22:20,140
we already that we can do like a small

00:22:17,570 --> 00:22:22,460
demo to do something specific

00:22:20,140 --> 00:22:25,130
we're using a lot of features from

00:22:22,460 --> 00:22:27,830
atomizer like the rod back portion which

00:22:25,130 --> 00:22:30,050
is like they give it to us we use it the

00:22:27,830 --> 00:22:41,630
persistence is done through not a module

00:22:30,050 --> 00:22:44,030
but it doesn't say we can that was all

00:22:41,630 --> 00:22:47,470
sorry so they were we were talking with

00:22:44,030 --> 00:22:47,470
the chorus guys and

00:22:47,840 --> 00:22:52,730
requesting that bootstrap not if they

00:22:50,900 --> 00:22:55,700
want to use it it's a program to work

00:22:52,730 --> 00:22:57,260
for them credit bible today one of the

00:22:55,700 --> 00:23:01,820
suggestions wants to write it in some

00:22:57,260 --> 00:23:05,210
more compact like go what it is like

00:23:01,820 --> 00:23:07,490
there is not enough force there but it

00:23:05,210 --> 00:23:09,910
is not something that we don't we think

00:23:07,490 --> 00:23:09,910
it's not possible

00:23:26,050 --> 00:23:29,170
[Music]

00:23:40,840 --> 00:23:49,519
but that it exists called la la link

00:23:47,389 --> 00:23:51,230
aggregation is possible to do it if you

00:23:49,519 --> 00:23:53,019
want to define an IP address it's

00:23:51,230 --> 00:23:55,370
possible to do it you just need to say

00:23:53,019 --> 00:24:02,629
what is the on the other side only

00:23:55,370 --> 00:24:08,450
declaring vinnitsa value say Cisco when

00:24:02,629 --> 00:24:11,049
we will talk to us after the thank you

00:24:08,450 --> 00:24:11,049
very much and

00:24:11,090 --> 00:24:14,200
[Music]

00:24:14,909 --> 00:24:16,970

YouTube URL: https://www.youtube.com/watch?v=ZVxoVtLZJk0


