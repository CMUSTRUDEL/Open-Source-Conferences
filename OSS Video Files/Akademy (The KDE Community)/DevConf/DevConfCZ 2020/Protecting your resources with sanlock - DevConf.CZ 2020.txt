Title: Protecting your resources with sanlock - DevConf.CZ 2020
Publication date: 2020-03-26
Playlist: DevConfCZ 2020
Description: 
	Speakers: Vojtech Juranek

Have you ever wonder how exactly sanlock protect you resources, e.g. disks to prevent multiple VMs to write to the same disk? Have you used sanlock and been afraid of changing sanlock timeouts as you have no idea what it exactly does?
In this talk we will outline the ideas on which sanlock is built upon, namely
Disk Paxos and Delta Leases. This will clarify, how sanlock works and also
some of it's configuration parameters.

[ https://sched.co/YOtJ ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,120 --> 00:00:08,109
since for coming my name is so ironic I

00:00:05,380 --> 00:00:11,500
work at Red Hat as a developer and in

00:00:08,109 --> 00:00:15,580
stock I'd like to talk to talk about the

00:00:11,500 --> 00:00:18,699
some ideas which some work is built up

00:00:15,580 --> 00:00:22,270
into if you hopefully some good starting

00:00:18,699 --> 00:00:24,670
point to use some look and understand

00:00:22,270 --> 00:00:26,670
how it works and eventually how to tune

00:00:24,670 --> 00:00:30,189
and configure it for your application

00:00:26,670 --> 00:00:34,750
before we start how many of you know

00:00:30,189 --> 00:00:38,020
what some loop is or even use it okay

00:00:34,750 --> 00:00:41,559
couple of hands but not all so we first

00:00:38,020 --> 00:00:45,250
briefly start with motivation why we

00:00:41,559 --> 00:00:48,430
actually need a piece of software like

00:00:45,250 --> 00:00:51,280
some work I guess all of you ever heard

00:00:48,430 --> 00:00:57,550
about the possibilities that we have

00:00:51,280 --> 00:01:01,690
some storage basically over this and we

00:00:57,550 --> 00:01:05,619
accept the these discs from compute

00:01:01,690 --> 00:01:08,079
nodes over the network so basically in

00:01:05,619 --> 00:01:14,859
this setup when a couple of machines

00:01:08,079 --> 00:01:17,920
access this I you sooner or later come

00:01:14,859 --> 00:01:22,090
into the situation when two or even more

00:01:17,920 --> 00:01:25,090
nodes try to access on right the same

00:01:22,090 --> 00:01:27,189
disk area this so of course result into

00:01:25,090 --> 00:01:30,819
the data corruption and this is probably

00:01:27,189 --> 00:01:32,889
what you don't want to happen so

00:01:30,819 --> 00:01:35,829
probably the first idea which came to

00:01:32,889 --> 00:01:40,029
your mind how to protect this is to

00:01:35,829 --> 00:01:43,899
introduce some external work manager

00:01:40,029 --> 00:01:47,259
here which world which will would

00:01:43,899 --> 00:01:51,189
control all the traffic and all various

00:01:47,259 --> 00:01:54,279
nodes to access different location of

00:01:51,189 --> 00:01:57,939
the disk this of course works but to

00:01:54,279 --> 00:02:01,049
have couple of drawbacks beside it's the

00:01:57,939 --> 00:02:03,729
additional arm trip to the sort manager

00:02:01,049 --> 00:02:07,119
what would happen if this component dies

00:02:03,729 --> 00:02:09,939
of course your application gets stuck

00:02:07,119 --> 00:02:11,520
because or at least won't be able to

00:02:09,939 --> 00:02:13,950
write any data because

00:02:11,520 --> 00:02:17,640
we'll be able to get unlocks from the

00:02:13,950 --> 00:02:21,330
dock manager which died so probably

00:02:17,640 --> 00:02:24,180
maybe we can do better and maybe you can

00:02:21,330 --> 00:02:27,210
come up with idea to somehow co-locate

00:02:24,180 --> 00:02:30,000
the walks they are play with the data

00:02:27,210 --> 00:02:32,960
the works are trying to protect and this

00:02:30,000 --> 00:02:36,900
is actually what some work does as a

00:02:32,960 --> 00:02:41,430
manager which use a short file storage

00:02:36,900 --> 00:02:45,210
for for its processing and keeping dogs

00:02:41,430 --> 00:02:49,500
of course you don't have to use the

00:02:45,210 --> 00:02:51,870
works provided by Philip to protect only

00:02:49,500 --> 00:02:55,080
the data you can use this works for

00:02:51,870 --> 00:02:58,170
whatever you want but to use the days

00:02:55,080 --> 00:03:00,660
locks for protecting the data undershirt

00:02:58,170 --> 00:03:08,010
storage is probably the most typical

00:03:00,660 --> 00:03:11,690
usage and the symbol is built up to its

00:03:08,010 --> 00:03:15,360
this axis and Delta leases and in the

00:03:11,690 --> 00:03:17,910
following slides I will try to really

00:03:15,360 --> 00:03:22,050
briefly outline these algorithms because

00:03:17,910 --> 00:03:24,950
some work is a little bit hard to

00:03:22,050 --> 00:03:28,200
configure or at least do it right so

00:03:24,950 --> 00:03:30,800
before you touch an assemble

00:03:28,200 --> 00:03:33,270
configuration you should really read the

00:03:30,800 --> 00:03:36,240
documentation carefully maybe you should

00:03:33,270 --> 00:03:41,690
also reach pieces of source code to be

00:03:36,240 --> 00:03:45,200
really sure what it does and to do this

00:03:41,690 --> 00:03:47,250
explanation hopefully will give you some

00:03:45,200 --> 00:03:50,340
good start

00:03:47,250 --> 00:03:54,470
or would make it more easy to understand

00:03:50,340 --> 00:03:58,380
what's going cons are at least I hope so

00:03:54,470 --> 00:04:00,720
well first start with classical boxes

00:03:58,380 --> 00:04:03,870
algorithm because this is just

00:04:00,720 --> 00:04:07,770
modification of classical boxes all

00:04:03,870 --> 00:04:14,070
working so I all familiar with axes all

00:04:07,770 --> 00:04:16,739
working maybe not so I will just start

00:04:14,070 --> 00:04:19,020
with short interaction of axis axis is

00:04:16,739 --> 00:04:21,870
basically concerns us all Burton which

00:04:19,020 --> 00:04:26,160
tries to solve concern Zeus

00:04:21,870 --> 00:04:28,199
between a couple of machines which the

00:04:26,160 --> 00:04:31,590
goal is to agree on some single Ally

00:04:28,199 --> 00:04:34,350
while it may sound pretty trivial it's

00:04:31,590 --> 00:04:36,389
actually very hard problem and it's

00:04:34,350 --> 00:04:38,760
actually one of the hardest program in

00:04:36,389 --> 00:04:43,229
distributed system world because

00:04:38,760 --> 00:04:49,199
supportin say on the network this is

00:04:43,229 --> 00:04:52,800
just examples so basically it's pretty

00:04:49,199 --> 00:04:56,729
hard problem and axis was one of the

00:04:52,800 --> 00:05:00,570
first mostly on board who came up with

00:04:56,729 --> 00:05:04,229
Fox's algorithm was one of the first who

00:05:00,570 --> 00:05:08,130
successfully solve this problem so how

00:05:04,229 --> 00:05:11,520
possible Paxos works basically each node

00:05:08,130 --> 00:05:15,479
which joins the consensus procedure

00:05:11,520 --> 00:05:18,860
tries to propose its value or this is

00:05:15,479 --> 00:05:22,430
called usually in the papers board and

00:05:18,860 --> 00:05:25,710
each proposal has its own a number and

00:05:22,430 --> 00:05:30,479
which is usually called belt number so

00:05:25,710 --> 00:05:35,930
each node in first place called Ripper

00:05:30,479 --> 00:05:40,139
Ripper face propose this belt number and

00:05:35,930 --> 00:05:46,880
other nodes upon receiving this prepare

00:05:40,139 --> 00:05:53,300
message response with the minimum

00:05:46,880 --> 00:05:55,949
proposal number which is the number they

00:05:53,300 --> 00:06:00,960
obtained from other nodes so basically

00:05:55,949 --> 00:06:04,220
if I sent number two and one node here

00:06:00,960 --> 00:06:07,740
for the already accepted some proposal

00:06:04,220 --> 00:06:11,699
with both number one it will accept my

00:06:07,740 --> 00:06:16,740
value but it will also respond with only

00:06:11,699 --> 00:06:19,229
accepted value when I received the

00:06:16,740 --> 00:06:21,449
response from majority of nodes I will

00:06:19,229 --> 00:06:24,720
search through the replies and it says

00:06:21,449 --> 00:06:27,360
or is some accepted value so basically

00:06:24,720 --> 00:06:29,070
which means that there is a node in a

00:06:27,360 --> 00:06:31,800
cluster which already accepted some

00:06:29,070 --> 00:06:35,370
value I can't propose my own value but I

00:06:31,800 --> 00:06:35,910
have to use this holy and but I can

00:06:35,370 --> 00:06:38,820
continue

00:06:35,910 --> 00:06:41,700
- next face when I broadcast another

00:06:38,820 --> 00:06:44,040
message and ask other nose if they

00:06:41,700 --> 00:06:48,270
accept this value I will still keep this

00:06:44,040 --> 00:06:51,000
number and but will use this well if my

00:06:48,270 --> 00:06:55,620
number is still the largest one the nose

00:06:51,000 --> 00:06:59,070
so this value and return okay if not

00:06:55,620 --> 00:07:01,890
that they will send me that they have

00:06:59,070 --> 00:07:04,740
already some higher number and and

00:07:01,890 --> 00:07:06,270
return me this number and then I will

00:07:04,740 --> 00:07:09,570
have to abort and start from the

00:07:06,270 --> 00:07:12,240
beginning and if I go from matric of

00:07:09,570 --> 00:07:16,230
nose responses they will accept my value

00:07:12,240 --> 00:07:18,840
I won my this value is accepted and I

00:07:16,230 --> 00:07:21,840
can broadcast that we agreed that this

00:07:18,840 --> 00:07:24,630
value is accepted so basically this

00:07:21,840 --> 00:07:27,330
sounds like a phase commit from the

00:07:24,630 --> 00:07:29,370
database world with two phase commit or

00:07:27,330 --> 00:07:32,670
three phase come so this this is a

00:07:29,370 --> 00:07:38,600
little bit similar to C phase commit so

00:07:32,670 --> 00:07:43,080
do at least roughly understand this if

00:07:38,600 --> 00:07:45,960
yes so understanding this paxos would be

00:07:43,080 --> 00:07:48,980
very easy because it's just a very

00:07:45,960 --> 00:07:52,650
slight modification of these algorithms

00:07:48,980 --> 00:07:58,770
again it's was done by one port and

00:07:52,650 --> 00:08:03,110
government and basically now we assume

00:07:58,770 --> 00:08:06,570
that we have n processors and M disk

00:08:03,110 --> 00:08:10,320
well when these processors tries to

00:08:06,570 --> 00:08:15,410
write each process each process obtains

00:08:10,320 --> 00:08:18,050
some book on each disk when it will try

00:08:15,410 --> 00:08:21,900
this data structure which contains

00:08:18,050 --> 00:08:25,850
number again the value which was already

00:08:21,900 --> 00:08:29,640
accepted observos and any such and the

00:08:25,850 --> 00:08:33,440
value with highest number so far so

00:08:29,640 --> 00:08:36,750
basically instead of exchanging messages

00:08:33,440 --> 00:08:39,360
over the network between the nodes there

00:08:36,750 --> 00:08:42,180
are nodes right this record directed to

00:08:39,360 --> 00:08:46,530
the shirt storage two dedicated place

00:08:42,180 --> 00:08:48,450
for each node and we assume of course

00:08:46,530 --> 00:08:51,839
that right

00:08:48,450 --> 00:08:58,079
atomic so we typically write only the

00:08:51,839 --> 00:09:05,190
size of a book or we typically write one

00:08:58,079 --> 00:09:10,829
block of the disk so we start as before

00:09:05,190 --> 00:09:13,500
that for each disk I will write my

00:09:10,829 --> 00:09:17,430
record and at the same time I will also

00:09:13,500 --> 00:09:21,029
read the records of all other processors

00:09:17,430 --> 00:09:25,350
which wrote their data structure on the

00:09:21,029 --> 00:09:27,000
disk and again I will check all other

00:09:25,350 --> 00:09:30,810
would from what I read

00:09:27,000 --> 00:09:33,600
I will check these both numbers and if I

00:09:30,810 --> 00:09:38,519
found out that there is some higher bolt

00:09:33,600 --> 00:09:41,130
number I have to my this process and

00:09:38,519 --> 00:09:45,690
start again with the higher number but

00:09:41,130 --> 00:09:49,350
if not I can continue further and choose

00:09:45,690 --> 00:09:52,500
the volume again I have to choose if J

00:09:49,350 --> 00:09:56,100
is already anywhere value written I will

00:09:52,500 --> 00:09:59,339
have to choose the value Wilson with the

00:09:56,100 --> 00:10:04,940
highest bought number and I know from

00:09:59,339 --> 00:10:08,550
now on I have to propose this value and

00:10:04,940 --> 00:10:12,089
then I will continue to the second phase

00:10:08,550 --> 00:10:12,930
then I will try to again write this

00:10:12,089 --> 00:10:15,329
value

00:10:12,930 --> 00:10:18,570
I found out in previous step and again

00:10:15,329 --> 00:10:21,990
read all the records from other

00:10:18,570 --> 00:10:25,769
processors and again I need to check if

00:10:21,990 --> 00:10:29,940
all both numbers are still lower than

00:10:25,769 --> 00:10:33,510
mine if so I warned if not I will have

00:10:29,940 --> 00:10:37,079
to abort and start again and that's

00:10:33,510 --> 00:10:39,269
basically it if I want approaches I can

00:10:37,079 --> 00:10:42,120
again broadcast the value which was

00:10:39,269 --> 00:10:46,260
selected and I'm done and I have for

00:10:42,120 --> 00:10:46,529
example obtained walk so if so far so

00:10:46,260 --> 00:10:49,889
good

00:10:46,529 --> 00:10:54,720
there are some unanswered questions for

00:10:49,889 --> 00:10:59,339
example how do I add more nodes and you

00:10:54,720 --> 00:11:01,200
maybe I didn't notice an identity wants

00:10:59,339 --> 00:11:04,950
to know what the major Tacey

00:11:01,200 --> 00:11:07,530
no you have to know how many notes are

00:11:04,950 --> 00:11:10,470
joining good this consensus procedure

00:11:07,530 --> 00:11:14,760
but if you are only writing and reading

00:11:10,470 --> 00:11:17,400
this how you found out and maybe even

00:11:14,760 --> 00:11:23,400
harder problem is how to establish the

00:11:17,400 --> 00:11:26,760
mapping between the disk sector or book

00:11:23,400 --> 00:11:29,460
on the disk and the note which tries to

00:11:26,760 --> 00:11:33,360
write there they first need somehow to

00:11:29,460 --> 00:11:38,220
agree which will write to which which

00:11:33,360 --> 00:11:41,430
space so that's why why we need

00:11:38,220 --> 00:11:45,620
something more than this axis and this

00:11:41,430 --> 00:11:50,940
is solved by Delta G's or Burton

00:11:45,620 --> 00:11:54,210
introduced by Triple R mark in and it's

00:11:50,940 --> 00:11:58,860
actually pretty simple algorithm here's

00:11:54,210 --> 00:12:01,350
the website which provides release and

00:11:58,860 --> 00:12:03,990
here's the life cycle you basically try

00:12:01,350 --> 00:12:06,030
to obtain the lease if you are

00:12:03,990 --> 00:12:08,340
successful you will hold it and

00:12:06,030 --> 00:12:10,830
eventually release it the important

00:12:08,340 --> 00:12:14,670
thing is that if you obtain the lease

00:12:10,830 --> 00:12:17,820
you are out to keep it for only some

00:12:14,670 --> 00:12:22,260
amount of time which is called big Delta

00:12:17,820 --> 00:12:26,160
and also our welcome assumes that all

00:12:22,260 --> 00:12:31,500
operations are bounded by some amount of

00:12:26,160 --> 00:12:36,030
time which is called small Delta it can

00:12:31,500 --> 00:12:40,310
be generalized to unknown data the model

00:12:36,030 --> 00:12:45,140
but self use this known Delta model and

00:12:40,310 --> 00:12:48,510
it's used in this way that basically it

00:12:45,140 --> 00:12:51,840
approaches tries to write a value on

00:12:48,510 --> 00:12:54,510
some location on disk wait for some time

00:12:51,840 --> 00:12:57,600
if the process is happy and the hope is

00:12:54,510 --> 00:13:00,390
not health it waits to small Delta's

00:12:57,600 --> 00:13:04,080
reach this location again and if the

00:13:00,390 --> 00:13:06,540
value is same it obtains the log if the

00:13:04,080 --> 00:13:09,110
hope is already held at all it will wait

00:13:06,540 --> 00:13:12,110
big Delta plus five my

00:13:09,110 --> 00:13:15,230
small Delta and again repeats until it

00:13:12,110 --> 00:13:18,410
obtains the log it's quite trivial but

00:13:15,230 --> 00:13:21,470
unwritten but the main drawback is that

00:13:18,410 --> 00:13:29,570
it may take quite a long time to obtain

00:13:21,470 --> 00:13:34,790
the log so how these two are used in a

00:13:29,570 --> 00:13:38,779
Sun log Delta lease Albertan issues to

00:13:34,790 --> 00:13:41,750
acquiring the unique host ID for each

00:13:38,779 --> 00:13:48,290
host which is basically the number from

00:13:41,750 --> 00:13:52,160
1 to 2 thousand which basically says

00:13:48,290 --> 00:13:54,230
each node which both on the shared

00:13:52,160 --> 00:13:58,459
storage should be used for access

00:13:54,230 --> 00:14:01,930
leaders for writing exercises and it

00:13:58,459 --> 00:14:05,209
also is used by sun lock to determine if

00:14:01,930 --> 00:14:09,529
the machine is live because you have to

00:14:05,209 --> 00:14:13,089
renew after this big delta your lease so

00:14:09,529 --> 00:14:16,519
if you don't refresh surely someone will

00:14:13,089 --> 00:14:19,690
conclude that this machine is that and

00:14:16,519 --> 00:14:23,959
will try to kill it and then when you

00:14:19,690 --> 00:14:25,760
obtain your ID which determines the

00:14:23,959 --> 00:14:28,370
place on the shared storage where you

00:14:25,760 --> 00:14:31,670
should write your accessories you can

00:14:28,370 --> 00:14:34,490
use disk boxes to happily try to offer

00:14:31,670 --> 00:14:39,410
obtain or completely compete for for

00:14:34,490 --> 00:14:40,910
releases with other processes in the

00:14:39,410 --> 00:14:44,149
stock terminology if you read the

00:14:40,910 --> 00:14:47,899
documentation the Delta Rises is complex

00:14:44,149 --> 00:14:52,880
space and as I said prevents first true

00:14:47,899 --> 00:14:56,060
up to have the same ID somewhat

00:14:52,880 --> 00:15:02,779
limitation is that it's limited to 2,000

00:14:56,060 --> 00:15:05,870
inter hosts it's because of very long

00:15:02,779 --> 00:15:08,779
time about was allowed only to used one

00:15:05,870 --> 00:15:13,250
megabyte size for the lock space and if

00:15:08,779 --> 00:15:17,690
the block size is 512 the result is that

00:15:13,250 --> 00:15:22,090
it's limited to 2,000 hosts but recently

00:15:17,690 --> 00:15:24,940
it has changed and you can use also

00:15:22,090 --> 00:15:29,010
different size but knots to support a

00:15:24,940 --> 00:15:32,680
high amount of hosts but to support also

00:15:29,010 --> 00:15:35,650
disability rights which has block size

00:15:32,680 --> 00:15:38,860
for 4 kilobytes and you can configure

00:15:35,650 --> 00:15:41,620
with these parameters but 2,000

00:15:38,860 --> 00:15:42,220
hosts is still a limitation hard-coded

00:15:41,620 --> 00:15:44,140
in Sano

00:15:42,220 --> 00:15:46,150
but actually if you want you can very

00:15:44,140 --> 00:15:51,010
easily change it in the source code but

00:15:46,150 --> 00:15:54,250
we have to work on BIOS unlock and some

00:15:51,010 --> 00:15:57,160
local internally use this baby Delta

00:15:54,250 --> 00:16:03,880
least to 20 seconds so each process has

00:15:57,160 --> 00:16:07,630
to renew its Delta lease in 20 seconds

00:16:03,880 --> 00:16:14,140
so if you for example have your

00:16:07,630 --> 00:16:17,230
application use some walk it's good to

00:16:14,140 --> 00:16:20,110
keep in mind that it will timeout after

00:16:17,230 --> 00:16:22,930
20 seconds so example for example if you

00:16:20,110 --> 00:16:25,870
have something built on top on top of

00:16:22,930 --> 00:16:30,460
that and you've configured timeout for 1

00:16:25,870 --> 00:16:33,760
minute it's nice but some lock will dies

00:16:30,460 --> 00:16:37,210
or will expire a blog after 20 seconds

00:16:33,760 --> 00:16:39,520
and the small note Elise mentioned in

00:16:37,210 --> 00:16:44,620
our Burton before in some of its 10

00:16:39,520 --> 00:16:47,850
seconds so as I said this leases are

00:16:44,620 --> 00:16:50,590
also used for checking host is alive

00:16:47,850 --> 00:16:53,470
some work is more robust and has other

00:16:50,590 --> 00:16:58,090
component like Woodstock so after 20

00:16:53,470 --> 00:17:00,550
seconds if the work is not renewed Sun

00:16:58,090 --> 00:17:03,490
block will start procedure fencing your

00:17:00,550 --> 00:17:07,650
mount and would repel after some another

00:17:03,490 --> 00:17:11,170
timeout try to kill your machine now

00:17:07,650 --> 00:17:14,260
accessories are fast to acquire so which

00:17:11,170 --> 00:17:17,500
are suitable for real rocks in

00:17:14,260 --> 00:17:22,510
application in some rock terminology

00:17:17,500 --> 00:17:26,770
it's called resources and when I said it

00:17:22,510 --> 00:17:30,070
when you won the battle and your value

00:17:26,770 --> 00:17:32,360
as one that you committed the value

00:17:30,070 --> 00:17:34,250
somehow so

00:17:32,360 --> 00:17:37,570
in some look it's implemented the trade

00:17:34,250 --> 00:17:40,610
that this record is written to first

00:17:37,570 --> 00:17:45,320
book of the disk so this is how you

00:17:40,610 --> 00:17:47,299
propagate the value in Sun log and it's

00:17:45,320 --> 00:17:50,630
actually somehow combined with Delta e

00:17:47,299 --> 00:17:52,309
says that when you refer renew the Delta

00:17:50,630 --> 00:17:56,090
lease it will also remove all your

00:17:52,309 --> 00:17:58,269
accessories so it's some combined in

00:17:56,090 --> 00:18:03,890
some lock together also in this way

00:17:58,269 --> 00:18:07,100
so in summary where if you want to

00:18:03,890 --> 00:18:09,830
somewhat in your application you first

00:18:07,100 --> 00:18:13,760
need to prepare directory structure

00:18:09,830 --> 00:18:19,039
where all this processes will right

00:18:13,760 --> 00:18:22,039
it's called initialization of the

00:18:19,039 --> 00:18:25,399
workspace in some documentation it has

00:18:22,039 --> 00:18:29,350
to be done only once and then whenever

00:18:25,399 --> 00:18:32,779
your application or start or note joins

00:18:29,350 --> 00:18:34,730
the cluster it will need to join the

00:18:32,779 --> 00:18:37,490
workspace which means it needs to

00:18:34,730 --> 00:18:41,720
acquire the Delta is to get the host ID

00:18:37,490 --> 00:18:45,799
so the no host knows how work right then

00:18:41,720 --> 00:18:49,610
when you acquire a walk for a release it

00:18:45,799 --> 00:18:53,919
means that you obtain the box office

00:18:49,610 --> 00:18:56,630
I speak before and when your application

00:18:53,919 --> 00:18:58,700
stops it basically leaves the workspace

00:18:56,630 --> 00:19:03,139
which means that the journeys the double

00:18:58,700 --> 00:19:06,470
box as I said boxes more compose a mail

00:19:03,139 --> 00:19:10,070
pieces like which book so if there is

00:19:06,470 --> 00:19:12,049
definitely something you can this

00:19:10,070 --> 00:19:14,570
presentation could be much longer to

00:19:12,049 --> 00:19:19,700
explain all the stuff I have no time for

00:19:14,570 --> 00:19:21,860
it so it's up to and I would wrote try

00:19:19,700 --> 00:19:23,870
to encourage you before you change

00:19:21,860 --> 00:19:26,330
anything and some log please be sure

00:19:23,870 --> 00:19:29,179
that you know what you are doing and

00:19:26,330 --> 00:19:32,299
reach the documentation carefully and I

00:19:29,179 --> 00:19:36,730
hope that this presentation if you at

00:19:32,299 --> 00:19:39,799
least some first step and make the

00:19:36,730 --> 00:19:40,460
understanding of documentation no easy

00:19:39,799 --> 00:19:42,790
for you

00:19:40,460 --> 00:19:48,600
so the

00:19:42,790 --> 00:19:48,600
so since and are there any questions

00:19:52,650 --> 00:19:59,560
some work is at least I know at least

00:19:56,680 --> 00:20:01,900
about one famous project which use some

00:19:59,560 --> 00:20:05,110
work and it's hope over it it's probably

00:20:01,900 --> 00:20:08,890
the best example but I think it's also

00:20:05,110 --> 00:20:22,420
used by constant OPM and probably other

00:20:08,890 --> 00:20:26,610
projects you can but you have to renew

00:20:22,420 --> 00:20:26,610
the login twenty seconds so basically

00:20:38,040 --> 00:20:43,180
typically typically returns as a demon

00:20:41,290 --> 00:20:45,880
on your host which you do all the stuff

00:20:43,180 --> 00:20:49,120
for you but it provides also client

00:20:45,880 --> 00:20:59,590
libraries so you can access it also from

00:20:49,120 --> 00:21:04,090
your own code from your application this

00:20:59,590 --> 00:21:05,050
is I'm not sure I would definitely not

00:21:04,090 --> 00:21:07,420
do that

00:21:05,050 --> 00:21:10,210
you probably have to do direct IO

00:21:07,420 --> 00:21:14,920
because unless you can get stuck or

00:21:10,210 --> 00:21:18,700
indication and but to be honest I'm not

00:21:14,920 --> 00:21:23,190
completely sure if it has to be

00:21:18,700 --> 00:21:23,190
implemented in some local using direct

00:21:28,860 --> 00:21:43,170
we're ashes on the very storage device

00:21:33,660 --> 00:21:46,170
Oh which would be required you know my

00:21:43,170 --> 00:21:46,170
No

00:21:54,100 --> 00:22:01,159
I'm not expert on my hardware so I'm not

00:21:57,740 --> 00:22:04,370
very sure but I would probably don't do

00:22:01,159 --> 00:22:06,580
that because almost some value can get

00:22:04,370 --> 00:22:12,669
stuck in the cache and in the meantime

00:22:06,580 --> 00:22:12,669
two applications can think that they can

00:22:28,299 --> 00:22:37,899
okay other questions were encouraged to

00:22:34,820 --> 00:22:40,850
read the paper and if you read the

00:22:37,899 --> 00:22:45,440
discourses paper this is a home port for

00:22:40,850 --> 00:22:49,190
you one port I to be honest didn't

00:22:45,440 --> 00:22:51,919
notice but on his page has a statement

00:22:49,190 --> 00:22:54,379
that about doesn't errors in the his

00:22:51,919 --> 00:22:57,110
paper but he's not going to fix it and

00:22:54,379 --> 00:22:59,889
homework for the readers so you are

00:22:57,110 --> 00:22:59,889

YouTube URL: https://www.youtube.com/watch?v=we0zW7ekfAI


