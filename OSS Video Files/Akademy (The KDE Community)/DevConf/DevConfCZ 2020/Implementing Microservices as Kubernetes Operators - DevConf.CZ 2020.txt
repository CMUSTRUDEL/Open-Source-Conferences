Title: Implementing Microservices as Kubernetes Operators - DevConf.CZ 2020
Publication date: 2020-03-03
Playlist: DevConfCZ 2020
Description: 
	Speakers: Lisa Seelye, Naveen Malik

Kubernetes provides a rich framework for developers that enable the creation and management of microservices with relatively little code. By implementing operators as a service [1][2], the developer will benefit from the existing underlying Kubernetes conventions in addition to the highly available elements of the cluster. The resulting service will be accessible via a highly available API, backed by a replicated data store, and have built in user management and authorization. This REST API is capable of implementing all CRUD operations. Audience members will gain a new perspective of operators and their uses.

[1] https://developers.redhat.com/blog/2018/12/18/kubernetes-operators-in-depth/
[2] https://github.com/operator-framework/operator-sdk

Key takeaways:
* How using operators provides the benefits of the platform: rbac, HA, DR
* Operators are powerful utilities to help configure administer Openshift
* Using Openshift as an API provides a rich framework to the developer.

[ https://sched.co/YOxf ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:00,600 --> 00:00:06,859
hello everybody welcome to implementing

00:00:03,840 --> 00:00:09,210
micro services as kubernetes operators

00:00:06,859 --> 00:00:10,650
get out of the way early the of course

00:00:09,210 --> 00:00:12,599
slides are going to be available we've

00:00:10,650 --> 00:00:14,190
got a demonstration the source code of

00:00:12,599 --> 00:00:16,440
registry will be available as well we've

00:00:14,190 --> 00:00:19,530
got some QR codes at the end and links

00:00:16,440 --> 00:00:22,800
so you're welcome to pick those up at

00:00:19,530 --> 00:00:25,260
the end of the deck before we get into

00:00:22,800 --> 00:00:26,940
it I've a couple questions be

00:00:25,260 --> 00:00:28,170
interesting to see the number of people

00:00:26,940 --> 00:00:30,210
who raise their hand for this given

00:00:28,170 --> 00:00:31,830
where we are in DEFCON Fionn how often

00:00:30,210 --> 00:00:34,950
I've heard that kubernetes and other

00:00:31,830 --> 00:00:37,920
talks so who in here has used or heard

00:00:34,950 --> 00:00:41,640
of kubernetes all right a lot that's

00:00:37,920 --> 00:00:45,120
expected know about controllers and

00:00:41,640 --> 00:00:50,670
operators right little fewer hands

00:00:45,120 --> 00:00:54,060
how about my cursor micro-services more

00:00:50,670 --> 00:00:59,000
okay and then who's written a controller

00:00:54,060 --> 00:00:59,000
or an operator all right good

00:01:02,880 --> 00:01:07,680
so today well for those who maybe didn't

00:01:06,120 --> 00:01:08,700
raise your hand for what understanding

00:01:07,680 --> 00:01:11,340
kubernetes going to go through a high

00:01:08,700 --> 00:01:15,570
level of what kubernetes is you know

00:01:11,340 --> 00:01:18,930
understanding of operators and why we

00:01:15,570 --> 00:01:20,070
believe operators are micro services and

00:01:18,930 --> 00:01:26,330
then finally we going to end up with a

00:01:20,070 --> 00:01:28,440
demo of creating a creating an operator

00:01:26,330 --> 00:01:28,799
building and deploying it and testing it

00:01:28,440 --> 00:01:32,520
here

00:01:28,799 --> 00:01:36,750
in the room why yeah well the Democrats

00:01:32,520 --> 00:01:38,909
with a lot of students so I'm to be

00:01:36,750 --> 00:01:41,100
Maalik I'm a senior principal site

00:01:38,909 --> 00:01:45,030
reliability engineer on the openshift

00:01:41,100 --> 00:01:47,430
sre platform team background in software

00:01:45,030 --> 00:01:48,900
engineering software architecture father

00:01:47,430 --> 00:01:51,150
to little boys

00:01:48,900 --> 00:01:54,360
I run a whole lot and sometimes make

00:01:51,150 --> 00:01:56,340
things with a overly expensive 3d

00:01:54,360 --> 00:01:57,509
printer for I used to make toys for my

00:01:56,340 --> 00:02:00,420
kids

00:01:57,509 --> 00:02:02,520
I'm Lisa Seeley I'm senior Maria the

00:02:00,420 --> 00:02:04,409
same team as him it's the word Salas I'm

00:02:02,520 --> 00:02:05,640
not going to say it I come from the

00:02:04,409 --> 00:02:08,490
primarily system in back

00:02:05,640 --> 00:02:11,400
with systems software engineering in

00:02:08,490 --> 00:02:14,070
there too coming in Canadian I hope hey

00:02:11,400 --> 00:02:16,020
I love my cat I can't wait to get home

00:02:14,070 --> 00:02:17,970
visit my all castles view a cat pictures

00:02:16,020 --> 00:02:19,920
I want to see them do you have cat

00:02:17,970 --> 00:02:21,900
pictures on an arm architecture

00:02:19,920 --> 00:02:24,410
I'm into arm - so show me your cat

00:02:21,900 --> 00:02:27,540
pictures on your arm clusters that's me

00:02:24,410 --> 00:02:30,300
so I don't have any cats right now but I

00:02:27,540 --> 00:02:32,100
do have a couple dogs that think it may

00:02:30,300 --> 00:02:33,660
be acceptable he said like the guy on

00:02:32,100 --> 00:02:35,490
the left here sprocket is a Japanese

00:02:33,660 --> 00:02:37,260
chin which is the most cat-like dog we

00:02:35,490 --> 00:02:42,570
could find so basically he ignores us

00:02:37,260 --> 00:02:45,630
unless you want something as close as we

00:02:42,570 --> 00:02:47,700
could get my kids are allergic so

00:02:45,630 --> 00:02:49,500
kubernetes if you if you're not familiar

00:02:47,700 --> 00:02:52,140
haven't heard about it a quick overview

00:02:49,500 --> 00:02:55,050
it's a platform and open source platform

00:02:52,140 --> 00:02:57,450
for managing your containerized for

00:02:55,050 --> 00:03:00,470
clothes allows you to declare some

00:02:57,450 --> 00:03:02,970
configuration and then the platform

00:03:00,470 --> 00:03:05,610
realizes that as the running state for

00:03:02,970 --> 00:03:08,510
you it comes with a plethora of

00:03:05,610 --> 00:03:12,150
resources as a part of the platform with

00:03:08,510 --> 00:03:14,400
application manage applications to

00:03:12,150 --> 00:03:16,019
software to manage those resources for

00:03:14,400 --> 00:03:18,150
you and allows you to extend the

00:03:16,019 --> 00:03:20,370
platform with customizations you can do

00:03:18,150 --> 00:03:22,590
custom resources and then custom

00:03:20,370 --> 00:03:25,440
business logic around those resources so

00:03:22,590 --> 00:03:28,350
you can tune like add things into the

00:03:25,440 --> 00:03:31,799
platform itself make it work for your

00:03:28,350 --> 00:03:34,110
your business news it's real quick why

00:03:31,799 --> 00:03:36,750
we are here why this talk is really

00:03:34,110 --> 00:03:40,860
exciting for both of us is that on the

00:03:36,750 --> 00:03:45,209
SR 18 we manage all of Red Hots open

00:03:40,860 --> 00:03:48,660
ship dedicated offering we manage large

00:03:45,209 --> 00:03:52,830
number of open ship clusters with our

00:03:48,660 --> 00:03:56,250
flavor of kubernetes and wit for our

00:03:52,830 --> 00:03:58,200
enterprise customers and we do operators

00:03:56,250 --> 00:04:02,010
for all the things so I'll get into

00:03:58,200 --> 00:04:03,810
the history of that later on so open

00:04:02,010 --> 00:04:06,120
shift is to kubernetes as well as to

00:04:03,810 --> 00:04:08,010
Linux and our ownership dedicated

00:04:06,120 --> 00:04:11,340
offering is a hosted service that we

00:04:08,010 --> 00:04:13,230
manage 24 by 7 follow-the-sun support I

00:04:11,340 --> 00:04:15,630
got paged in the middle of the keynote

00:04:13,230 --> 00:04:21,000
on Friday as an example for something

00:04:15,630 --> 00:04:24,389
flowing up quick plug we are hiring we

00:04:21,000 --> 00:04:27,450
have 12 recs open as of the 15th of

00:04:24,389 --> 00:04:30,300
January assume there's a boost if you're

00:04:27,450 --> 00:04:32,190
interested stop by to the Red Hat booth

00:04:30,300 --> 00:04:34,889
and asked or you know come talk to Lisa

00:04:32,190 --> 00:04:36,450
Rowe myself love to hear about your

00:04:34,889 --> 00:04:40,229
interest or if you have somebody you

00:04:36,450 --> 00:04:45,510
know that might be interested so Lisa is

00:04:40,229 --> 00:04:48,810
going to walk us through right so before

00:04:45,510 --> 00:04:51,500
we get too deep into operators and all

00:04:48,810 --> 00:04:53,970
that I want to review quickly how

00:04:51,500 --> 00:04:56,490
crimini T's is applying our changes of

00:04:53,970 --> 00:05:01,290
how we tell communities to make changes

00:04:56,490 --> 00:05:03,240
for us so when we install kundunese or

00:05:01,290 --> 00:05:05,520
open ship out of the box we get a whole

00:05:03,240 --> 00:05:07,440
bunch of resources for free

00:05:05,520 --> 00:05:09,630
we use these for express your

00:05:07,440 --> 00:05:12,810
applications so that's like storage

00:05:09,630 --> 00:05:14,120
configuration how it's scheduled and all

00:05:12,810 --> 00:05:16,760
of that good stuff

00:05:14,120 --> 00:05:19,320
one resource that we get that is

00:05:16,760 --> 00:05:23,660
critical to this talk is called custom

00:05:19,320 --> 00:05:26,250
resource definition what it does kind of

00:05:23,660 --> 00:05:27,660
gives it away in the name but we're

00:05:26,250 --> 00:05:30,870
going to be talking about this a lot for

00:05:27,660 --> 00:05:33,330
the rest of the talk so how we use these

00:05:30,870 --> 00:05:36,960
resources is we declare a yellow me

00:05:33,330 --> 00:05:40,830
right now mold and feed them into the

00:05:36,960 --> 00:05:43,560
kubernetes api with who so we just

00:05:40,830 --> 00:05:49,400
learned how to say this it's a coup

00:05:43,560 --> 00:05:54,620
Bechtel coop CTL coop cuddle ku-ku-ku-ku

00:05:49,400 --> 00:05:54,620
be cuddled its next like the preferred

00:05:56,210 --> 00:06:02,789
we're told so we don't burn Jana in to

00:06:00,990 --> 00:06:05,820
through the API server with that but

00:06:02,789 --> 00:06:08,660
that what happens well as it happens

00:06:05,820 --> 00:06:11,570
just a clearing animal doesn't do enough

00:06:08,660 --> 00:06:13,220
especially like me you have tabs in the

00:06:11,570 --> 00:06:15,080
wrong places or spaces in the wrong

00:06:13,220 --> 00:06:20,090
places or tabs and spaces in the wrong

00:06:15,080 --> 00:06:24,260
place and the API server cares about

00:06:20,090 --> 00:06:26,150
that because controllers aren't that are

00:06:24,260 --> 00:06:27,740
the piece of code the piece of logic

00:06:26,150 --> 00:06:29,450
that is watching all of these resources

00:06:27,740 --> 00:06:31,900
that they necessarily care about and

00:06:29,450 --> 00:06:35,180
we'll see what that looks like soon and

00:06:31,900 --> 00:06:36,860
that's the logic takes I want this from

00:06:35,180 --> 00:06:42,950
the ammo and makes it have it inside the

00:06:36,860 --> 00:06:47,030
cluster right so the next step is let's

00:06:42,950 --> 00:06:49,310
have a look at how operators are doing

00:06:47,030 --> 00:06:51,980
the same kind of thing so as I mentioned

00:06:49,310 --> 00:06:55,880
we got the custom resource definition

00:06:51,980 --> 00:06:58,400
type out of the box with kubernetes but

00:06:55,880 --> 00:07:00,020
that's up to us to make new customer

00:06:58,400 --> 00:07:02,170
resource definitions with that and we'll

00:07:00,020 --> 00:07:04,850
see what that looks like to the work and

00:07:02,170 --> 00:07:06,650
they follow the same pattern where we're

00:07:04,850 --> 00:07:07,940
creating these with the ammo and we have

00:07:06,650 --> 00:07:09,440
controllers that we're going to write

00:07:07,940 --> 00:07:12,290
and maybe we'll show you how to do that

00:07:09,440 --> 00:07:14,240
a little bit later to turn them into

00:07:12,290 --> 00:07:15,440
yeah turn them from llamó into something

00:07:14,240 --> 00:07:19,340
that makes sense for us inside the

00:07:15,440 --> 00:07:24,530
cluster now let's have a closer look at

00:07:19,340 --> 00:07:26,090
how the controller makes changes so the

00:07:24,530 --> 00:07:26,540
length of controller looks a lot like

00:07:26,090 --> 00:07:28,520
this

00:07:26,540 --> 00:07:31,430
at the start is just hanging out just

00:07:28,520 --> 00:07:34,150
waiting for changes it's in a loop it's

00:07:31,430 --> 00:07:36,680
keeping an eye on things this particular

00:07:34,150 --> 00:07:38,720
controller I just picked out of the blue

00:07:36,680 --> 00:07:42,490
deployment I like deployment controllers

00:07:38,720 --> 00:07:44,240
pretty cool let's see what happens when

00:07:42,490 --> 00:07:48,710
something changes with an employment

00:07:44,240 --> 00:07:50,390
object so what a change is made the

00:07:48,710 --> 00:07:52,310
controller's gonna be notified of it and

00:07:50,390 --> 00:07:55,280
then reconcile the clustered towards

00:07:52,310 --> 00:07:58,790
that new desired state our request here

00:07:55,280 --> 00:08:02,000
is to create a 3 pod engine X deployment

00:07:58,790 --> 00:08:03,919
running bridge in 1.7.9 and so the

00:08:02,000 --> 00:08:06,080
controller is going to make do all can

00:08:03,919 --> 00:08:08,480
to make sure that happens this is a

00:08:06,080 --> 00:08:10,700
pretty simplified example but the fuller

00:08:08,480 --> 00:08:14,390
picture of how deployment works is on

00:08:10,700 --> 00:08:16,640
humanity's IO website and that you know

00:08:14,390 --> 00:08:17,820
here is a potentially short because it's

00:08:16,640 --> 00:08:19,550
as long as my arm

00:08:17,820 --> 00:08:22,560
do all the things that you need to do

00:08:19,550 --> 00:08:27,860
but when we apply it sometimes there's

00:08:22,560 --> 00:08:30,270
an error in it right so in addition to

00:08:27,860 --> 00:08:33,840
bullying with spaces I also sometimes

00:08:30,270 --> 00:08:34,500
hit the wrong key and the controller to

00:08:33,840 --> 00:08:37,080
handle that

00:08:34,500 --> 00:08:38,700
maybe the controller will spit on error

00:08:37,080 --> 00:08:40,560
so if you've had an error in the

00:08:38,700 --> 00:08:46,830
deployment if you're creating any stuff

00:08:40,560 --> 00:08:50,100
it'll say hey the same thing here it's

00:08:46,830 --> 00:08:52,350
up to us the administrators to go in and

00:08:50,100 --> 00:08:57,150
fix it and then make a new object the

00:08:52,350 --> 00:09:01,770
control is gonna pick up and then we get

00:08:57,150 --> 00:09:04,170
our pots it's pretty neat and then what

00:09:01,770 --> 00:09:12,330
happens next controller just sit around

00:09:04,170 --> 00:09:17,730
waiting for changes what does it look

00:09:12,330 --> 00:09:20,640
like for an operator though well with

00:09:17,730 --> 00:09:22,650
the start if you have a controller that

00:09:20,640 --> 00:09:24,660
right there just sit around watching

00:09:22,650 --> 00:09:28,320
resources that it cares about waiting

00:09:24,660 --> 00:09:29,820
for changes and then it the code that we

00:09:28,320 --> 00:09:33,000
write in that controller is going to

00:09:29,820 --> 00:09:35,580
realize those and make the cluster at

00:09:33,000 --> 00:09:37,440
the with it we want I think maybe you

00:09:35,580 --> 00:09:39,000
can tell us why someone would want to

00:09:37,440 --> 00:09:41,520
use this operator thing in the first

00:09:39,000 --> 00:09:43,740
place thanks Lisa and actually want to

00:09:41,520 --> 00:09:45,780
talk more about the micro services side

00:09:43,740 --> 00:09:50,850
of this and why you might consider using

00:09:45,780 --> 00:09:52,680
an operator for that domain so just a

00:09:50,850 --> 00:09:53,970
quick overview of micro services it's an

00:09:52,680 --> 00:09:56,790
architecture that's been around for a

00:09:53,970 --> 00:09:59,040
long time and I've I come from Red Hat

00:09:56,790 --> 00:10:01,790
IT before I joined this team and written

00:09:59,040 --> 00:10:04,740
a lot of services in that domain and

00:10:01,790 --> 00:10:06,510
basically we can call anything we want a

00:10:04,740 --> 00:10:09,990
micro service is just how you want to

00:10:06,510 --> 00:10:12,240
spin it but there's a few facets that

00:10:09,990 --> 00:10:14,460
are fairly consistent across any kind of

00:10:12,240 --> 00:10:17,310
definition and for the purpose of this

00:10:14,460 --> 00:10:20,160
discussion talk about the context so

00:10:17,310 --> 00:10:21,680
micro services have a bounded context

00:10:20,160 --> 00:10:24,510
simply means they have a small business

00:10:21,680 --> 00:10:26,460
domain or a very small use case that

00:10:24,510 --> 00:10:27,960
you're trying to work for you have to

00:10:26,460 --> 00:10:29,640
communicate over a network because you

00:10:27,960 --> 00:10:30,240
have lots of these things they're micro

00:10:29,640 --> 00:10:33,510
they

00:10:30,240 --> 00:10:36,510
very specific tasks they do it really

00:10:33,510 --> 00:10:38,459
well but that's usually not valuable in

00:10:36,510 --> 00:10:39,660
the context of some kind of business

00:10:38,459 --> 00:10:40,950
problem that you're trying to solve so

00:10:39,660 --> 00:10:43,230
you need to have a lot of these talking

00:10:40,950 --> 00:10:44,790
to each other and then because you have

00:10:43,230 --> 00:10:46,410
a lot of these and maybe you didn't

00:10:44,790 --> 00:10:47,850
right although maybe you bought some or

00:10:46,410 --> 00:10:49,700
other teams are dealing with them are

00:10:47,850 --> 00:10:53,010
creating before you need to have some

00:10:49,700 --> 00:11:02,820
technology agnostic protocols that they

00:10:53,010 --> 00:11:05,070
can communicate over I think restful

00:11:02,820 --> 00:11:06,839
services in example and then you

00:11:05,070 --> 00:11:08,459
organize these things around some

00:11:06,839 --> 00:11:10,529
business capability the thing that you

00:11:08,459 --> 00:11:12,510
you know need to solve in your business

00:11:10,529 --> 00:11:15,149
remaining that thing becomes an

00:11:12,510 --> 00:11:18,029
independently deployable component you

00:11:15,149 --> 00:11:19,680
may want to have some subset of micro

00:11:18,029 --> 00:11:22,380
services running in kubernetes cluster

00:11:19,680 --> 00:11:23,970
some may need to run in your datacenter

00:11:22,380 --> 00:11:25,920
on bare metal depending on the workloads

00:11:23,970 --> 00:11:28,230
you need flexibility and they need to be

00:11:25,920 --> 00:11:30,089
independent and usually you have some

00:11:28,230 --> 00:11:32,190
other things that you're concerned with

00:11:30,089 --> 00:11:33,959
security there's a couple of facets here

00:11:32,190 --> 00:11:36,660
and one because you have this small

00:11:33,959 --> 00:11:39,300
context the surface of attack or

00:11:36,660 --> 00:11:41,070
potential abuse for this is much smaller

00:11:39,300 --> 00:11:44,010
because you're dealing with a much

00:11:41,070 --> 00:11:45,360
smaller domain additionally the micro

00:11:44,010 --> 00:11:47,459
services or services that I've ever

00:11:45,360 --> 00:11:51,709
developed and what we do in our

00:11:47,459 --> 00:11:54,660
day-to-day needs something to keep

00:11:51,709 --> 00:11:57,570
unwanted users from getting in and using

00:11:54,660 --> 00:11:59,399
that service and other things like

00:11:57,570 --> 00:12:00,899
numerate all you know availability

00:11:59,399 --> 00:12:02,339
scalability you want these things to be

00:12:00,899 --> 00:12:05,399
online you want to be able to grow them

00:12:02,339 --> 00:12:08,160
if your service is successful so how do

00:12:05,399 --> 00:12:10,560
operators meet these needs well as Lisa

00:12:08,160 --> 00:12:11,910
mentioned with custom resources and

00:12:10,560 --> 00:12:14,760
custom resource definitions you can

00:12:11,910 --> 00:12:18,270
define a very small context you have a

00:12:14,760 --> 00:12:22,230
very narrow scope you get the platform's

00:12:18,270 --> 00:12:24,990
network to communicate over and you get

00:12:22,230 --> 00:12:26,550
the platform's API kubernetes provides

00:12:24,990 --> 00:12:31,050
you an API to interact with these

00:12:26,550 --> 00:12:33,899
resources you can have controllers that

00:12:31,050 --> 00:12:36,180
are focused on a specific resource be a

00:12:33,899 --> 00:12:37,600
their stock resource or a custom

00:12:36,180 --> 00:12:39,220
resource

00:12:37,600 --> 00:12:41,199
karates what deployments exactly the

00:12:39,220 --> 00:12:43,149
deployment controller it better deploy

00:12:41,199 --> 00:12:45,040
care only about the deployment resource

00:12:43,149 --> 00:12:47,470
I might have a different controller for

00:12:45,040 --> 00:12:50,139
dealing with serve secrets something

00:12:47,470 --> 00:12:51,339
else they might deal with pods etc and

00:12:50,139 --> 00:12:53,980
you can bundle these things together

00:12:51,339 --> 00:12:56,050
into a unit and deploy them as you're

00:12:53,980 --> 00:12:59,110
oscillating multiple custom controllers

00:12:56,050 --> 00:13:01,569
into one thing right if your business

00:12:59,110 --> 00:13:05,290
domain requires you to deal with

00:13:01,569 --> 00:13:06,880
multiple resources in the same founder

00:13:05,290 --> 00:13:08,649
context you can bundle those into the

00:13:06,880 --> 00:13:10,449
single operator and deploy those and

00:13:08,649 --> 00:13:12,639
then kubernetes brings a lot of things

00:13:10,449 --> 00:13:15,060
to the table just a few things for this

00:13:12,639 --> 00:13:20,110
top knee authentication authorization

00:13:15,060 --> 00:13:21,759
kubernetes not IO right kubernetes that

00:13:20,110 --> 00:13:23,980
I owe everybody lots of information

00:13:21,759 --> 00:13:25,839
their authentication authorization you

00:13:23,980 --> 00:13:29,529
get a lot of features from the platform

00:13:25,839 --> 00:13:32,500
around users and service accountability

00:13:29,529 --> 00:13:34,180
to access resources within the cluster

00:13:32,500 --> 00:13:36,850
as well as what you're authorized to do

00:13:34,180 --> 00:13:39,250
like I can get access am I allowed to do

00:13:36,850 --> 00:13:40,839
something with a specific resource the

00:13:39,250 --> 00:13:43,930
platform can be deployed in a very

00:13:40,839 --> 00:13:45,279
highly available manner which allows

00:13:43,930 --> 00:13:48,250
your deployments to be highly available

00:13:45,279 --> 00:13:50,139
and then it is built with the scheduler

00:13:48,250 --> 00:13:53,100
to enable you to scale up your workloads

00:13:50,139 --> 00:13:59,439
across that platform

00:13:53,100 --> 00:14:02,439
operators are hyper services yeah but

00:13:59,439 --> 00:14:04,389
they can do a lot more so I want to talk

00:14:02,439 --> 00:14:06,430
a bit about configuration management a

00:14:04,389 --> 00:14:08,889
little bit of a story how we got to

00:14:06,430 --> 00:14:14,290
where we are and why we are very excited

00:14:08,889 --> 00:14:17,560
about the operators space so we started

00:14:14,290 --> 00:14:20,430
off so our team has been using open

00:14:17,560 --> 00:14:24,519
shift since the early days version one

00:14:20,430 --> 00:14:28,569
and most recently on version 3

00:14:24,519 --> 00:14:33,009
we had a centralized configuration

00:14:28,569 --> 00:14:37,089
management system we decided to go with

00:14:33,009 --> 00:14:39,490
the ansible based solution that was

00:14:37,089 --> 00:14:40,630
provided with open shift in order to

00:14:39,490 --> 00:14:42,610
configure our all the yoga chip

00:14:40,630 --> 00:14:45,269
dedicated clusters and this works great

00:14:42,610 --> 00:14:48,550
when you have you know a single cluster

00:14:45,269 --> 00:14:50,750
easily manage it add a couple more it's

00:14:48,550 --> 00:14:54,230
growing it's scaling it's keeping up

00:14:50,750 --> 00:14:56,720
problem when we start to get into large

00:14:54,230 --> 00:14:58,610
numbers of clusters it becomes pretty

00:14:56,720 --> 00:15:01,340
complicated we have a lot of things that

00:14:58,610 --> 00:15:04,700
were configuring it makes it it becomes

00:15:01,340 --> 00:15:08,210
hard for onboarding new members to the

00:15:04,700 --> 00:15:10,700
team becomes difficult to understand

00:15:08,210 --> 00:15:13,970
when my change that I've merged is

00:15:10,700 --> 00:15:16,880
actually going to run this thing we

00:15:13,970 --> 00:15:18,680
called it config loop could take 12

00:15:16,880 --> 00:15:20,720
hours to execute where is it in that

00:15:18,680 --> 00:15:23,150
execution when is that the cluster that

00:15:20,720 --> 00:15:24,800
needs this hotfix going to have that

00:15:23,150 --> 00:15:27,530
configuration lance should I kill the

00:15:24,800 --> 00:15:28,790
existing configured process will start a

00:15:27,530 --> 00:15:31,040
new and you know all these types of

00:15:28,790 --> 00:15:34,850
things that complicates the landscape a

00:15:31,040 --> 00:15:38,510
lot and then failures failures can now

00:15:34,850 --> 00:15:41,420
cascade into other places of failure and

00:15:38,510 --> 00:15:44,360
configuring cluster to potentially

00:15:41,420 --> 00:15:49,690
ripple into causing cluster 3 or other

00:15:44,360 --> 00:15:49,690
clusters not to update so it's a problem

00:15:51,850 --> 00:15:58,820
so where we are today is we are using

00:15:56,350 --> 00:16:01,640
micro services of based approach with

00:15:58,820 --> 00:16:03,050
operators with to implement a

00:16:01,640 --> 00:16:06,320
distributed configuration management

00:16:03,050 --> 00:16:08,540
platform so we still have something in

00:16:06,320 --> 00:16:11,630
the middle that needs to apply some

00:16:08,540 --> 00:16:14,030
desired state to a cluster but it's

00:16:11,630 --> 00:16:16,760
expressing that desired state it's not

00:16:14,030 --> 00:16:19,430
expressing or configuring the running

00:16:16,760 --> 00:16:23,240
state so we need a controller or a

00:16:19,430 --> 00:16:26,470
series of controllers to do that and as

00:16:23,240 --> 00:16:29,089
we scale this out that works really well

00:16:26,470 --> 00:16:31,040
because we are as I said we're dealing

00:16:29,089 --> 00:16:33,260
with that one slice the yellow on the

00:16:31,040 --> 00:16:34,940
left hand side here I'm just defining

00:16:33,260 --> 00:16:38,450
what we want the cluster to look like

00:16:34,940 --> 00:16:40,520
and if something fails we have isolation

00:16:38,450 --> 00:16:43,670
there may be a failure in a single

00:16:40,520 --> 00:16:46,550
cluster we can deal that with that by I

00:16:43,670 --> 00:16:51,440
think some metrics bubble up into an

00:16:46,550 --> 00:16:54,589
alert to my page the correct SRE team to

00:16:51,440 --> 00:16:56,570
respond and it's a lot easier to

00:16:54,589 --> 00:16:59,860
understand everything is as much easier

00:16:56,570 --> 00:16:59,860
to on board new team members

00:17:00,480 --> 00:17:06,569
so microservices or operators are

00:17:03,570 --> 00:17:10,439
allowing us to move towards operations

00:17:06,569 --> 00:17:12,150
as code we treat all of our operators as

00:17:10,439 --> 00:17:14,970
any other software engineering project

00:17:12,150 --> 00:17:18,870
it's there actually if you're interested

00:17:14,970 --> 00:17:22,439
they're out on github and the OpenShift

00:17:18,870 --> 00:17:23,880
organization come talk to us later if

00:17:22,439 --> 00:17:25,500
you're interested in taking a look at

00:17:23,880 --> 00:17:27,569
any of them and it makes it a lot easier

00:17:25,500 --> 00:17:28,980
to onboard new members we understand

00:17:27,569 --> 00:17:31,590
what's happening a lot easier it's

00:17:28,980 --> 00:17:33,720
easier to manage the platform's etc so

00:17:31,590 --> 00:17:36,330
then hand over to Lisa who is going to

00:17:33,720 --> 00:17:39,419
walk through some examples of that's

00:17:36,330 --> 00:17:42,419
right so on the first key new keynote on

00:17:39,419 --> 00:17:44,520
Friday we saw a couple of operators that

00:17:42,419 --> 00:17:46,410
we're using we're gonna take a look at

00:17:44,520 --> 00:17:49,200
some other ones but I'm gonna take a

00:17:46,410 --> 00:17:52,559
look at it from kind of an operation to

00:17:49,200 --> 00:17:54,809
point of view task oriented we need to

00:17:52,559 --> 00:17:56,669
do these things the things that we're

00:17:54,809 --> 00:17:59,270
gonna look at are sawing and configuring

00:17:56,669 --> 00:18:02,460
software provisioning cloud credentials

00:17:59,270 --> 00:18:05,640
and provisioning TLS certificates inside

00:18:02,460 --> 00:18:08,250
of a cluster for like inter inter

00:18:05,640 --> 00:18:09,840
cluster communications the first thing

00:18:08,250 --> 00:18:11,790
we're gonna look at is installing and

00:18:09,840 --> 00:18:15,200
configuring software and we're gonna use

00:18:11,790 --> 00:18:18,390
cluster monitoring operator to do that

00:18:15,200 --> 00:18:21,450
now the old days when we're installing

00:18:18,390 --> 00:18:23,790
software we don't have operators so we

00:18:21,450 --> 00:18:25,500
have to install it by hand we figure if

00:18:23,790 --> 00:18:28,070
I need to install all of the pieces that

00:18:25,500 --> 00:18:31,530
we want to make of our monitoring stock

00:18:28,070 --> 00:18:33,960
since we're in kubernetes and these

00:18:31,530 --> 00:18:36,660
deployment type projects don't have a

00:18:33,960 --> 00:18:39,540
concept of watching for can convict maps

00:18:36,660 --> 00:18:43,140
where we're storing our configuration we

00:18:39,540 --> 00:18:45,030
have to write the glue to tell the

00:18:43,140 --> 00:18:47,240
deployment or tell kubernetes to restart

00:18:45,030 --> 00:18:49,950
the pods with this new configuration

00:18:47,240 --> 00:18:52,380
every time we change something so every

00:18:49,950 --> 00:18:55,730
new rule that we write for Prometheus we

00:18:52,380 --> 00:18:59,130
need to restart that by hand somehow or

00:18:55,730 --> 00:19:01,740
write the glue for it

00:18:59,130 --> 00:19:06,720
so let's look and see what the operator

00:19:01,740 --> 00:19:08,190
is giving us so we can say that the cost

00:19:06,720 --> 00:19:09,900
of monitoring operator first and

00:19:08,190 --> 00:19:12,419
foremost is installing these things for

00:19:09,900 --> 00:19:15,450
us that's that's the easy part

00:19:12,419 --> 00:19:18,210
great the secret sauce really comes with

00:19:15,450 --> 00:19:21,120
per media the operator that comes along

00:19:18,210 --> 00:19:23,610
for the ride with the CMO cluster

00:19:21,120 --> 00:19:26,280
monitoring operator Prometheus operator

00:19:23,610 --> 00:19:29,520
in turn is giving us a couple of custom

00:19:26,280 --> 00:19:32,970
resources specifically Prometheus role

00:19:29,520 --> 00:19:37,200
on how to configure alert manager and

00:19:32,970 --> 00:19:38,990
Prometheus itself this is great because

00:19:37,200 --> 00:19:41,880
now we can interact with these

00:19:38,990 --> 00:19:44,850
kubernetes objects and that the operator

00:19:41,880 --> 00:19:47,250
worry about how we turn that it's not we

00:19:44,850 --> 00:19:51,179
how it turns it into configuration files

00:19:47,250 --> 00:19:53,750
for these services and then restart

00:19:51,179 --> 00:20:04,590
those services as it needs to

00:19:53,750 --> 00:20:06,900
let's see what that looks like the

00:20:04,590 --> 00:20:09,390
operator has controllers that is

00:20:06,900 --> 00:20:12,780
watching for Prometheus from role type

00:20:09,390 --> 00:20:16,080
objects kind Prometheus rule this looks

00:20:12,780 --> 00:20:18,179
like almost every other kubernetes

00:20:16,080 --> 00:20:20,190
object out there you have the kind we

00:20:18,179 --> 00:20:23,700
have metadata we have a name namespace

00:20:20,190 --> 00:20:26,159
all that good stuff labels even let's

00:20:23,700 --> 00:20:28,470
look at a spec the spec we have this is

00:20:26,159 --> 00:20:31,380
different this is specific to Prometheus

00:20:28,470 --> 00:20:33,990
rule we have groups which ties into

00:20:31,380 --> 00:20:37,710
communities rules as it gets rented out

00:20:33,990 --> 00:20:40,320
into the permits big file have rules a

00:20:37,710 --> 00:20:43,289
number of rules inside that group and we

00:20:40,320 --> 00:20:46,500
have our alert no Kubb note unscheduled

00:20:43,289 --> 00:20:50,909
s-sorry guess what it's on coop notice

00:20:46,500 --> 00:20:52,850
unschedule what's ah easy so when we

00:20:50,909 --> 00:20:56,460
create this object in the cluster the

00:20:52,850 --> 00:20:59,820
operator the controller of that operator

00:20:56,460 --> 00:21:02,880
will render this into config and that's

00:20:59,820 --> 00:21:05,880
it okay when we're done with it we

00:21:02,880 --> 00:21:07,500
delete this object in kubernetes and the

00:21:05,880 --> 00:21:10,060
operator removes it from the config file

00:21:07,500 --> 00:21:13,450
restarts prometheus

00:21:10,060 --> 00:21:15,940
forget to go that's great that's so much

00:21:13,450 --> 00:21:18,130
easier for us next thing we have to do

00:21:15,940 --> 00:21:19,750
all the time is provision cloud

00:21:18,130 --> 00:21:24,100
credentials we do this with cloud

00:21:19,750 --> 00:21:26,530
credential operator what's the workflow

00:21:24,100 --> 00:21:30,040
we're most familiar with when we need

00:21:26,530 --> 00:21:31,090
credentials in the service well you need

00:21:30,040 --> 00:21:33,220
to figure out who in the organization

00:21:31,090 --> 00:21:35,320
should get that request and then ask

00:21:33,220 --> 00:21:36,640
them for him they go off and make sure

00:21:35,320 --> 00:21:38,350
you're even allowed to have those

00:21:36,640 --> 00:21:41,410
permissions and then give them to you

00:21:38,350 --> 00:21:42,520
encrypted I hope now you have using

00:21:41,410 --> 00:21:43,900
cryptic credentials and you have to

00:21:42,520 --> 00:21:46,840
figure out how to store them securely

00:21:43,900 --> 00:21:48,100
you just put me get right no I don't do

00:21:46,840 --> 00:21:50,310
that so you have to figure out secrets

00:21:48,100 --> 00:21:52,390
management to know that's easy to write

00:21:50,310 --> 00:21:55,330
then you have to get the credentials

00:21:52,390 --> 00:21:57,400
securely into your cluster and keep that

00:21:55,330 --> 00:21:59,830
secure but that's doable too so that's

00:21:57,400 --> 00:22:01,450
cool and then finally you have to figure

00:21:59,830 --> 00:22:04,840
out how to scale that across every

00:22:01,450 --> 00:22:08,080
cluster all of your users and all the

00:22:04,840 --> 00:22:12,250
cloud providers good luck how do we do

00:22:08,080 --> 00:22:13,960
this with an operator well the operator

00:22:12,250 --> 00:22:16,300
introduces new resource called

00:22:13,960 --> 00:22:18,130
credentials requests similar to the

00:22:16,300 --> 00:22:20,290
Prometheus rule of this abstracts the

00:22:18,130 --> 00:22:24,640
notion of requesting cloud credentials

00:22:20,290 --> 00:22:26,980
in a pretty focused way that means that

00:22:24,640 --> 00:22:30,040
the workflow is now user creates a

00:22:26,980 --> 00:22:32,770
credentials request object your

00:22:30,040 --> 00:22:34,840
operators watching for it with the

00:22:32,770 --> 00:22:38,890
request the operator talks to the cloud

00:22:34,840 --> 00:22:42,040
provider and was on this case and stores

00:22:38,890 --> 00:22:43,750
or krandalls in a secret cool I not

00:22:42,040 --> 00:22:45,430
belong to anyone you need to make sure I

00:22:43,750 --> 00:22:48,400
have permissions to create this credit

00:22:45,430 --> 00:22:50,200
with request object ok guys needs to say

00:22:48,400 --> 00:22:52,960
outside I say all Baba what does it

00:22:50,200 --> 00:22:54,970
actually look like all right yeah and

00:22:52,960 --> 00:22:56,500
that user can access this either what

00:22:54,970 --> 00:22:59,350
does actually look like let's look at

00:22:56,500 --> 00:23:02,520
the credentials request just like before

00:22:59,350 --> 00:23:05,320
we have standard kubernetes type stuff

00:23:02,520 --> 00:23:07,060
we have our spec where we want to store

00:23:05,320 --> 00:23:10,500
it in this case for storing in the aptly

00:23:07,060 --> 00:23:15,130
named secret to store credentials secret

00:23:10,500 --> 00:23:17,590
the operator is going to see what

00:23:15,130 --> 00:23:20,210
permissions we want in this case we want

00:23:17,590 --> 00:23:23,230
to easy to describe all of our instances

00:23:20,210 --> 00:23:26,210
pretty reasonable thing to be doing and

00:23:23,230 --> 00:23:27,740
the output the operator is going to

00:23:26,210 --> 00:23:31,340
create a secret for us and it's going to

00:23:27,740 --> 00:23:34,220
access these Goodluck decrypting these

00:23:31,340 --> 00:23:37,610
it's totally secure I promise and that's

00:23:34,220 --> 00:23:40,190
it we have freed up human beings to do

00:23:37,610 --> 00:23:43,730
creative work since this is in all of

00:23:40,190 --> 00:23:44,870
our clusters we have use the access

00:23:43,730 --> 00:23:46,640
permissions that they've been mentioned

00:23:44,870 --> 00:23:48,880
earlier to control who can actually

00:23:46,640 --> 00:23:51,800
request this which is great

00:23:48,880 --> 00:23:53,330
humans can focus on creative stuff next

00:23:51,800 --> 00:23:55,730
we're gonna start talking about managing

00:23:53,330 --> 00:23:58,370
certificates so you can talk to me

00:23:55,730 --> 00:24:01,100
kubernetes service with encryption we do

00:23:58,370 --> 00:24:02,540
this with service CA operator this is

00:24:01,100 --> 00:24:05,600
different than Serban which we learned

00:24:02,540 --> 00:24:08,960
about on friday pathway how do you do it

00:24:05,600 --> 00:24:11,510
without an operator ok this is actually

00:24:08,960 --> 00:24:13,760
somewhat easy to do you connect to the

00:24:11,510 --> 00:24:17,090
cluster and create a CSR that's a

00:24:13,760 --> 00:24:18,860
certificate signing request then you

00:24:17,090 --> 00:24:21,620
still connect that cluster and improve

00:24:18,860 --> 00:24:24,640
it with coops ETL or cuddle whatever you

00:24:21,620 --> 00:24:28,970
want approve certificate signing request

00:24:24,640 --> 00:24:31,130
next be the credentials are then

00:24:28,970 --> 00:24:34,240
associated with that CSR and you have to

00:24:31,130 --> 00:24:36,530
keep them safe too bad looks bad you

00:24:34,240 --> 00:24:41,330
have to figure how to scale it over all

00:24:36,530 --> 00:24:43,850
your clusters and who has access to all

00:24:41,330 --> 00:24:46,130
the clusters in your environment at any

00:24:43,850 --> 00:24:47,210
given time to do this for someone how do

00:24:46,130 --> 00:24:49,970
you get their credentials how do you

00:24:47,210 --> 00:24:51,530
keep those safe so that's still another

00:24:49,970 --> 00:24:55,040
problem all right

00:24:51,530 --> 00:24:57,020
operator help us this is actually a

00:24:55,040 --> 00:24:59,360
different approach to it there's no

00:24:57,020 --> 00:25:02,540
custom resources with this all it's

00:24:59,360 --> 00:25:05,060
doing is looking at annotations on

00:25:02,540 --> 00:25:07,160
native objects service that's a native

00:25:05,060 --> 00:25:09,080
object all this operator is doing is

00:25:07,160 --> 00:25:10,520
looking for this long annotation which

00:25:09,080 --> 00:25:11,200
I'm not going to read aloud I'm a

00:25:10,520 --> 00:25:14,990
tongue-twister

00:25:11,200 --> 00:25:17,450
what assuming is gonna this controller

00:25:14,990 --> 00:25:21,110
that's from this operator will see this

00:25:17,450 --> 00:25:23,300
annotation spit out the private

00:25:21,110 --> 00:25:26,270
certificate and then with a key and a

00:25:23,300 --> 00:25:28,910
certificate stuff it into a secret and

00:25:26,270 --> 00:25:30,620
that is also going to dump into a config

00:25:28,910 --> 00:25:32,750
map which has this kind of annotation

00:25:30,620 --> 00:25:36,260
the see a bundle

00:25:32,750 --> 00:25:40,220
and now your deployment can use that

00:25:36,260 --> 00:25:44,660
mounted and your G unicorn process can

00:25:40,220 --> 00:25:46,520
serve pls secure sign by the cluster and

00:25:44,660 --> 00:25:48,860
you can connect to it which is important

00:25:46,520 --> 00:25:51,490
if you're doing web hooks ask me how I

00:25:48,860 --> 00:25:54,860
know talk me out for this talk

00:25:51,490 --> 00:25:57,530
so that means their operators increase

00:25:54,860 --> 00:25:59,210
our velocity our scalability and the

00:25:57,530 --> 00:26:01,580
availability and all of these tasks that

00:25:59,210 --> 00:26:03,880
we need to do because kubernetes knows

00:26:01,580 --> 00:26:12,170
how to scale these and keep them running

00:26:03,880 --> 00:26:14,060
but what's next so it's gonna walk

00:26:12,170 --> 00:26:17,990
through a bit of a contrived example as

00:26:14,060 --> 00:26:19,520
I'm very clear in noting up here we're

00:26:17,990 --> 00:26:23,930
gonna create an operator called pod

00:26:19,520 --> 00:26:27,410
operator but why what's the purpose of

00:26:23,930 --> 00:26:29,480
showing everybody here how to create an

00:26:27,410 --> 00:26:31,670
operator I want to make sure that we

00:26:29,480 --> 00:26:33,170
have you know an understanding that it's

00:26:31,670 --> 00:26:36,200
really easy to get started with creating

00:26:33,170 --> 00:26:38,330
a going operator get a sense of how to

00:26:36,200 --> 00:26:41,780
create a custom resource definition and

00:26:38,330 --> 00:26:44,300
a custom controller and given the time

00:26:41,780 --> 00:26:46,310
we have you know we can pack it in quite

00:26:44,300 --> 00:26:49,100
easily it's it's fairly simple as you'll

00:26:46,310 --> 00:26:50,840
see before I write anything though I

00:26:49,100 --> 00:26:53,870
want to know what is it supposed to do

00:26:50,840 --> 00:26:56,570
even for a demo so there's three key

00:26:53,870 --> 00:26:59,510
things that I want this operator to do

00:26:56,570 --> 00:27:03,170
for us first is when I create a custom

00:26:59,510 --> 00:27:05,030
resource I wanted to create a pot I want

00:27:03,170 --> 00:27:07,370
to ensure that pot exists over time so

00:27:05,030 --> 00:27:10,190
if that pod happens to go away bring it

00:27:07,370 --> 00:27:12,710
back please and then clean up so if my

00:27:10,190 --> 00:27:14,390
custom resources delete it I want any of

00:27:12,710 --> 00:27:17,870
the resources that pot in this example

00:27:14,390 --> 00:27:19,280
to be deleted as well and I'm going to

00:27:17,870 --> 00:27:21,860
use a couple of tools and I want to get

00:27:19,280 --> 00:27:23,870
into all the details may have heard of

00:27:21,860 --> 00:27:27,800
some of these and other talks today the

00:27:23,870 --> 00:27:29,510
quick summary operator SDK is a software

00:27:27,800 --> 00:27:34,390
development toolkit for building

00:27:29,510 --> 00:27:36,280
kubernetes applications pod man is a

00:27:34,390 --> 00:27:39,490
demoness container

00:27:36,280 --> 00:27:42,070
engine management tool basically all you

00:27:39,490 --> 00:27:45,520
a pod man pushed to get my image

00:27:42,070 --> 00:27:48,910
available in my cluster and then cube

00:27:45,520 --> 00:27:53,110
Caudill for managing the kubernetes

00:27:48,910 --> 00:27:55,690
cluster and before we dive into a

00:27:53,110 --> 00:27:57,610
terminal which I'm going to do I'm gonna

00:27:55,690 --> 00:27:59,890
walk through what the steps that we're

00:27:57,610 --> 00:28:01,450
going to do give you some context

00:27:59,890 --> 00:28:05,920
without all the fluff of stuff actually

00:28:01,450 --> 00:28:08,650
happening so we are going to use the SDK

00:28:05,920 --> 00:28:10,750
operator SDK to create a new operator

00:28:08,650 --> 00:28:13,270
I'm gonna call it pod operators you can

00:28:10,750 --> 00:28:17,590
see on the right hand side there will

00:28:13,270 --> 00:28:19,740
use that CK to add an API which is our

00:28:17,590 --> 00:28:22,480
custom resource definition do you know

00:28:19,740 --> 00:28:25,030
the specification the suspect that the

00:28:22,480 --> 00:28:28,300
the details of the desired state are

00:28:25,030 --> 00:28:32,530
going to be empty initially we're going

00:28:28,300 --> 00:28:34,930
to create and controller because the

00:28:32,530 --> 00:28:37,530
custom resource definition is not that

00:28:34,930 --> 00:28:40,090
useful unless we have some code that's

00:28:37,530 --> 00:28:43,390
reacting to events around those

00:28:40,090 --> 00:28:44,980
resources this controller gives us a lot

00:28:43,390 --> 00:28:47,830
out-of-the-box like at this point like

00:28:44,980 --> 00:28:51,270
I've not edited and you line of code and

00:28:47,830 --> 00:28:53,740
it knows to watch my custom resource

00:28:51,270 --> 00:28:57,430
it's a contrived example so it by

00:28:53,740 --> 00:28:59,890
default will watch also pods it assigns

00:28:57,430 --> 00:29:01,450
ownership to dependent resources that

00:28:59,890 --> 00:29:06,190
get created which I'll go into a little

00:29:01,450 --> 00:29:07,390
more detail later and it has basic

00:29:06,190 --> 00:29:11,680
frameworks for how to create a pod

00:29:07,390 --> 00:29:14,950
within your cluster name well that's

00:29:11,680 --> 00:29:16,240
nice it's not all that I want we're

00:29:14,950 --> 00:29:18,060
gonna go in and edit the code we're

00:29:16,240 --> 00:29:21,550
going to customize the custom resource

00:29:18,060 --> 00:29:23,950
definition to add three new fields the

00:29:21,550 --> 00:29:25,960
name image and command so we can change

00:29:23,950 --> 00:29:28,930
what it is we deploy with our operator

00:29:25,960 --> 00:29:32,020
and then we'll edit the controller to

00:29:28,930 --> 00:29:36,460
utilize those fields so that we actually

00:29:32,020 --> 00:29:39,640
do something with them we will use SDK

00:29:36,460 --> 00:29:43,720
to build an image and then pod man to

00:29:39,640 --> 00:29:46,660
push that out to quite at i/o and then

00:29:43,720 --> 00:29:48,460
finally cube Caudill to actually deploy

00:29:46,660 --> 00:29:56,500
this operator into

00:29:48,460 --> 00:29:59,050
a cluster wrap-up with actual testings

00:29:56,500 --> 00:30:01,120
so great it's deployed well I'm going to

00:29:59,050 --> 00:30:02,830
show you actually working we're going to

00:30:01,120 --> 00:30:06,880
create the custom resource called pod

00:30:02,830 --> 00:30:08,890
request will show that a pod gets

00:30:06,880 --> 00:30:10,240
created as a side effect of that because

00:30:08,890 --> 00:30:12,360
we're going to write that I have that

00:30:10,240 --> 00:30:15,730
controller code deployed in our cluster

00:30:12,360 --> 00:30:17,800
we're going to show that when we delete

00:30:15,730 --> 00:30:22,000
this pod that was created by the

00:30:17,800 --> 00:30:24,430
controller that it will come back it's

00:30:22,000 --> 00:30:26,080
our second requirement and our third

00:30:24,430 --> 00:30:28,810
requirement when we delete that custom

00:30:26,080 --> 00:30:32,380
resource and show that yes it actually

00:30:28,810 --> 00:30:38,730
does go and clean up our plot alright

00:30:32,380 --> 00:30:38,730
demo time what could possibly go wrong

00:30:39,510 --> 00:30:49,710
okay so real quick the top portion of

00:30:47,830 --> 00:30:53,320
this is where I'm going to be showing

00:30:49,710 --> 00:30:55,720
running commands bottom left is the logs

00:30:53,320 --> 00:30:56,980
for our operator which as you can see

00:30:55,720 --> 00:30:59,650
it's waiting for the operator we haven't

00:30:56,980 --> 00:31:02,410
deployed anything the bottom right we

00:30:59,650 --> 00:31:06,280
are watching for pods to show when the

00:31:02,410 --> 00:31:07,930
operator itself and the pod that we're

00:31:06,280 --> 00:31:11,140
creating is part of our controller are

00:31:07,930 --> 00:31:13,660
deployed and watching for our custom

00:31:11,140 --> 00:31:16,120
resource called pod requests or the

00:31:13,660 --> 00:31:17,830
plural in this case pod requests as you

00:31:16,120 --> 00:31:19,870
can see right now it doesn't know about

00:31:17,830 --> 00:31:22,390
that that resource doesn't exist in the

00:31:19,870 --> 00:31:25,000
cluster so that's a good starting got

00:31:22,390 --> 00:31:29,410
everything cleaned up from so I'm

00:31:25,000 --> 00:31:32,260
creating the operator now it's a pretty

00:31:29,410 --> 00:31:34,330
quick operator sdk new name of operator

00:31:32,260 --> 00:31:36,790
so now we have a new operator called pod

00:31:34,330 --> 00:31:38,440
operator it's that quick next we're

00:31:36,790 --> 00:31:40,540
going to do probably the slowest step

00:31:38,440 --> 00:31:42,850
other than pushing out to Quay is

00:31:40,540 --> 00:31:46,240
creating a new custom resource

00:31:42,850 --> 00:31:49,870
definition so we're calling a pod

00:31:46,240 --> 00:31:55,530
request at API and what this is doing is

00:31:49,870 --> 00:31:58,630
is creating the JSON sorry not JSON the

00:31:55,530 --> 00:32:01,090
Hamel definition on the file system and

00:31:58,630 --> 00:32:04,330
then generating the go

00:32:01,090 --> 00:32:07,210
for this as well next create the

00:32:04,330 --> 00:32:10,720
controller so we are watching pod

00:32:07,210 --> 00:32:13,120
requests with our controller that one's

00:32:10,720 --> 00:32:16,749
super fast I like that one and now let's

00:32:13,120 --> 00:32:22,840
edit some code see which window it pops

00:32:16,749 --> 00:32:25,289
up in alright so I've got two files open

00:32:22,840 --> 00:32:27,669
right now the first one here is the

00:32:25,289 --> 00:32:29,080
controller and I'm not going to walk

00:32:27,669 --> 00:32:33,340
through all this I'm just going to show

00:32:29,080 --> 00:32:35,590
a few relevant pieces in this add

00:32:33,340 --> 00:32:39,159
function the first piece I want to show

00:32:35,590 --> 00:32:40,659
is the the watching so I remember I

00:32:39,159 --> 00:32:43,049
haven't changed anything this is just

00:32:40,659 --> 00:32:45,789
what the SDK provides out-of-the-box I

00:32:43,049 --> 00:32:48,460
told it to create a controller for the

00:32:45,789 --> 00:32:51,220
pod request resource and it did and it's

00:32:48,460 --> 00:32:53,529
watching the pod request resource for me

00:32:51,220 --> 00:32:57,009
so anytime there's an event any event

00:32:53,529 --> 00:32:58,960
for pod requests it's going to hit it's

00:32:57,009 --> 00:33:00,639
called the reconcile loop which is the

00:32:58,960 --> 00:33:02,080
the next function I'll I'll take a look

00:33:00,639 --> 00:33:04,690
at it just keep that in mind we're

00:33:02,080 --> 00:33:07,029
watching for pod requests events caused

00:33:04,690 --> 00:33:08,440
the reconciliation to happen trying to

00:33:07,029 --> 00:33:13,330
get move from desired state and

00:33:08,440 --> 00:33:17,919
reconcile to the running state the next

00:33:13,330 --> 00:33:20,799
is the pod resource so we're watching

00:33:17,919 --> 00:33:24,070
also for pods but it doesn't in queue a

00:33:20,799 --> 00:33:27,909
pod event it looks for who owns a spot

00:33:24,070 --> 00:33:30,700
who created this pot if it is owned by

00:33:27,909 --> 00:33:32,830
this controller we get an event in

00:33:30,700 --> 00:33:36,220
queued for a reconcile reconciliation

00:33:32,830 --> 00:33:38,980
loop for the referenced pod request so

00:33:36,220 --> 00:33:41,019
part of it causes reconciliation for the

00:33:38,980 --> 00:33:42,490
pod request so we're always dealing with

00:33:41,019 --> 00:33:44,529
pod requests we don't care about the

00:33:42,490 --> 00:33:46,240
pods as an event we care about the pod

00:33:44,529 --> 00:33:51,610
requests which is what we told our

00:33:46,240 --> 00:33:55,090
controller to handle now scrolling down

00:33:51,610 --> 00:33:58,809
a bit so our reconcile loop this is the

00:33:55,090 --> 00:34:01,059
part leases diagrams we had a controller

00:33:58,809 --> 00:34:03,850
block and loop so it's just a basically

00:34:01,059 --> 00:34:05,769
a hot loop that's waiting for events it

00:34:03,850 --> 00:34:06,970
periodically wakes up as well like if

00:34:05,769 --> 00:34:08,710
there hasn't been an event and be like

00:34:06,970 --> 00:34:10,210
oh should I have known

00:34:08,710 --> 00:34:14,260
did I miss something and then it'll run

00:34:10,210 --> 00:34:16,960
through this it looks for the pod

00:34:14,260 --> 00:34:19,270
request instance if it doesn't exist it

00:34:16,960 --> 00:34:23,589
bails but assuming that we do have a pod

00:34:19,270 --> 00:34:26,649
request custom resource in memory we the

00:34:23,589 --> 00:34:31,179
controller creates the pod the dependent

00:34:26,649 --> 00:34:33,270
resource and it's not been it's not been

00:34:31,179 --> 00:34:37,869
saved in the cluster yet it's in memory

00:34:33,270 --> 00:34:39,540
it sets a reference on that pod to a pod

00:34:37,869 --> 00:34:42,399
request so this is how we get that

00:34:39,540 --> 00:34:47,379
relationship between the pod and our

00:34:42,399 --> 00:34:51,220
custom resource for in queueing the pod

00:34:47,379 --> 00:34:53,859
request events when pods change and then

00:34:51,220 --> 00:34:57,280
we look for the pod should it does it

00:34:53,859 --> 00:35:01,089
exist if not we go and create the pod

00:34:57,280 --> 00:35:03,849
and then if it already existed we just

00:35:01,089 --> 00:35:08,640
skip log that it hey you know it already

00:35:03,849 --> 00:35:08,640
existed nothing to do here moving on oh

00:35:08,849 --> 00:35:17,470
wait my cursor go there we go the last

00:35:13,180 --> 00:35:21,430
bit is the creation of the pot so we

00:35:17,470 --> 00:35:25,030
have a pod request and we simply define

00:35:21,430 --> 00:35:29,049
within go the pod that we want to have

00:35:25,030 --> 00:35:32,650
in our cluster we have the metadata so

00:35:29,049 --> 00:35:34,780
we have the the name namespace set some

00:35:32,650 --> 00:35:36,400
labels by default and then we have the

00:35:34,780 --> 00:35:38,349
specification for the pod what container

00:35:36,400 --> 00:35:40,119
are we gonna run this one's hard-coded

00:35:38,349 --> 00:35:44,200
since what came with the operator SDK

00:35:40,119 --> 00:35:46,329
out of box gives us a name of busybox

00:35:44,200 --> 00:35:54,040
image of busy box and the command is to

00:35:46,329 --> 00:35:56,470
sleep for 3600 seconds we want to change

00:35:54,040 --> 00:36:01,569
that but so we're gonna go look at our

00:35:56,470 --> 00:36:05,500
custom resource definition this is the

00:36:01,569 --> 00:36:06,849
struct ingo I'm not going to worry too

00:36:05,500 --> 00:36:08,200
much about that that there's a lot of

00:36:06,849 --> 00:36:10,030
good information online there's a lot of

00:36:08,200 --> 00:36:12,010
good documentation links in the

00:36:10,030 --> 00:36:14,950
generated code get you where you need to

00:36:12,010 --> 00:36:17,500
be to to make modifications here just

00:36:14,950 --> 00:36:19,420
quickly high level we've got three main

00:36:17,500 --> 00:36:21,940
chunks here that would talk about the

00:36:19,420 --> 00:36:22,299
metadata which is where you define the

00:36:21,940 --> 00:36:23,799
name of your

00:36:22,299 --> 00:36:25,749
resource where you want to deploy it in

00:36:23,799 --> 00:36:28,449
what name space labels those kinds of

00:36:25,749 --> 00:36:31,890
standard things in kubernetes resources

00:36:28,449 --> 00:36:34,059
and then you have a speck in a status

00:36:31,890 --> 00:36:36,939
we're gonna change the spec because we

00:36:34,059 --> 00:36:39,640
want to change what our desired state is

00:36:36,939 --> 00:36:40,989
and define some additional fields status

00:36:39,640 --> 00:36:43,929
is really powerful when you're writing

00:36:40,989 --> 00:36:46,420
your own custom resources and

00:36:43,929 --> 00:36:49,269
controllers so you can reflect state

00:36:46,420 --> 00:36:51,099
about the custom resource back to

00:36:49,269 --> 00:36:53,609
whatever might be interested in that

00:36:51,099 --> 00:36:56,429
through the status you could say it's

00:36:53,609 --> 00:37:00,699
provisioning something or it failed to

00:36:56,429 --> 00:37:03,549
you know create a PV or whatever like

00:37:00,699 --> 00:37:05,529
you can you can capture information

00:37:03,549 --> 00:37:07,689
about what's going on about that

00:37:05,529 --> 00:37:11,469
resource in status but we're gonna

00:37:07,689 --> 00:37:14,709
ignore it today we're gonna go into the

00:37:11,469 --> 00:37:18,699
spec and you see they have lots of

00:37:14,709 --> 00:37:20,589
helpful comments edit this file insert

00:37:18,699 --> 00:37:23,189
additional spec field so we're going to

00:37:20,589 --> 00:37:27,189
insert some additional spec fields here

00:37:23,189 --> 00:37:29,709
as I said earlier we want three things

00:37:27,189 --> 00:37:31,959
we want a name which is a string and I

00:37:29,709 --> 00:37:33,789
have to tell it in JSON what do we want

00:37:31,959 --> 00:37:37,779
to call that oh not my name that's

00:37:33,789 --> 00:37:40,959
muscle memory I've never done that

00:37:37,779 --> 00:37:45,069
running through this we wanted an image

00:37:40,959 --> 00:37:48,339
which is also string called that image

00:37:45,069 --> 00:37:58,239
and JSON or Gamal command which is an

00:37:48,339 --> 00:38:01,239
array missed it of string and save that

00:37:58,239 --> 00:38:03,189
and we have now customized our custom

00:38:01,239 --> 00:38:08,589
resource definition it's that easier

00:38:03,189 --> 00:38:08,979
you're done all of us well yes good

00:38:08,589 --> 00:38:10,779
point

00:38:08,979 --> 00:38:13,329
all those done we're not using it yet so

00:38:10,779 --> 00:38:15,009
it's not actually useful so we're gonna

00:38:13,329 --> 00:38:16,509
come back to our controller and tell the

00:38:15,009 --> 00:38:21,579
controller to do something with that

00:38:16,509 --> 00:38:23,920
data and in here we want to use the name

00:38:21,579 --> 00:38:25,779
image and command that comes in on our

00:38:23,920 --> 00:38:32,670
custom resource pod request comes in the

00:38:25,779 --> 00:38:38,530
spec and use the name field spec image

00:38:32,670 --> 00:38:40,869
see our spec command and then I'm gonna

00:38:38,530 --> 00:38:44,560
make a change here because this annoys

00:38:40,869 --> 00:38:46,510
me to no end we know this is a pod I

00:38:44,560 --> 00:38:49,920
don't need the name to say that it is a

00:38:46,510 --> 00:38:53,890
pod I'm gonna take it out it's redundant

00:38:49,920 --> 00:38:57,099
save that and I didn't flood anything so

00:38:53,890 --> 00:38:59,200
it's good and we're gonna go build it so

00:38:57,099 --> 00:39:01,480
we're done we can that we now customized

00:38:59,200 --> 00:39:03,190
our CRD or custom resource definition

00:39:01,480 --> 00:39:06,130
we've customized our controller to use

00:39:03,190 --> 00:39:07,680
it and we're ready to go build it and

00:39:06,130 --> 00:39:13,980
deploy it

00:39:07,680 --> 00:39:18,130
so next step sdk build ready set go

00:39:13,980 --> 00:39:21,849
so this is taking the go that we have

00:39:18,130 --> 00:39:25,900
modified it is generating an image for

00:39:21,849 --> 00:39:30,849
us locally and it's ready and I'm now

00:39:25,900 --> 00:39:33,369
going to push this out to way sort of I

00:39:30,849 --> 00:39:35,230
don't trust Wi-Fi here so I'm actually

00:39:33,369 --> 00:39:40,690
gonna force it go wow it actually

00:39:35,230 --> 00:39:47,890
finished I have it time out after 15

00:39:40,690 --> 00:39:50,320
seconds so yeah and I actually preparing

00:39:47,890 --> 00:39:51,970
things wouldn't work so well I'm going

00:39:50,320 --> 00:39:53,980
to use a tag called demo it's exactly

00:39:51,970 --> 00:39:57,720
the same code that I've just presented

00:39:53,980 --> 00:40:00,670
it is just kind of a you know failsafe

00:39:57,720 --> 00:40:02,440
we're going to now deploy this into a

00:40:00,670 --> 00:40:05,260
running cluster so I'm actually using an

00:40:02,440 --> 00:40:15,220
open strip dedicated cluster it's

00:40:05,260 --> 00:40:18,670
running openshift version 4 to 13 yeah I

00:40:15,220 --> 00:40:23,020
don't know the latest and greatest and

00:40:18,670 --> 00:40:25,510
we're going to apply our operator and

00:40:23,020 --> 00:40:28,180
the custom resource so what we should

00:40:25,510 --> 00:40:30,369
see is in the bottom right we're gonna

00:40:28,180 --> 00:40:32,880
see the pod for our operator come online

00:40:30,369 --> 00:40:35,650
as well as see that they'll actually

00:40:32,880 --> 00:40:38,589
recognize the the pod request resource

00:40:35,650 --> 00:40:40,900
and then once the pod is online will see

00:40:38,589 --> 00:40:44,250
some logs for the operator

00:40:40,900 --> 00:40:45,810
spinning up and

00:40:44,250 --> 00:40:50,150
should be fairly fast I think time just

00:40:45,810 --> 00:40:53,810
like 12 seconds let's see if I right

00:40:50,150 --> 00:40:56,400
we've got the pod yep container creating

00:40:53,810 --> 00:40:58,680
and we've got some logs it's running

00:40:56,400 --> 00:41:00,600
we're ready to go we see no resources

00:40:58,680 --> 00:41:03,210
found meaning that our custom resource

00:41:00,600 --> 00:41:06,240
has been defined as you can see in the

00:41:03,210 --> 00:41:07,560
top now we've got a the yamo for one of

00:41:06,240 --> 00:41:11,240
our custom resources that we want to

00:41:07,560 --> 00:41:14,130
deploy it's a pot request we're going to

00:41:11,240 --> 00:41:16,020
we're keeping the the same as the

00:41:14,130 --> 00:41:18,840
defaults we're naming the pod we're

00:41:16,020 --> 00:41:19,710
gonna create busy box using the busy box

00:41:18,840 --> 00:41:21,630
image but we're gonna do something

00:41:19,710 --> 00:41:23,400
different instead of sleeping just going

00:41:21,630 --> 00:41:26,970
to have it loop indefinitely and it's

00:41:23,400 --> 00:41:30,240
going to echo hello Def Con cz 2020

00:41:26,970 --> 00:41:32,760
every five sounds so most of the

00:41:30,240 --> 00:41:35,070
defaults were pretty good well yeah I

00:41:32,760 --> 00:41:42,240
could have changed it could use like the

00:41:35,070 --> 00:41:44,490
hello world and so creating the pod

00:41:42,240 --> 00:41:47,010
request we can see it's been created one

00:41:44,490 --> 00:41:49,620
second container is crazy so we've got

00:41:47,010 --> 00:41:53,520
our pod called busy box already spinning

00:41:49,620 --> 00:41:55,290
up because it's not a it's not a loop

00:41:53,520 --> 00:41:57,270
that this controller is actually doing

00:41:55,290 --> 00:41:59,040
it's waiting for events to be generated

00:41:57,270 --> 00:42:03,120
and being sent to the controller it's

00:41:59,040 --> 00:42:05,880
pretty pretty amazing yep got our custom

00:42:03,120 --> 00:42:07,740
resource we can see in the logs we've

00:42:05,880 --> 00:42:09,480
got a request for to reconcile that pod

00:42:07,740 --> 00:42:11,190
request it realized hey I don't have

00:42:09,480 --> 00:42:13,410
this pod called busy box that they care

00:42:11,190 --> 00:42:15,660
about I'm gonna create it and then we

00:42:13,410 --> 00:42:18,630
got a couple other events happening as

00:42:15,660 --> 00:42:21,690
state changes within the resources in

00:42:18,630 --> 00:42:24,150
the cluster as as the pod moved from

00:42:21,690 --> 00:42:25,770
container knit to Commander creating to

00:42:24,150 --> 00:42:27,750
running all of those are events that

00:42:25,770 --> 00:42:30,630
bubble up into our control areas pod

00:42:27,750 --> 00:42:33,540
request events so when it's the pod

00:42:30,630 --> 00:42:36,260
doing what we wanted to do yes a lot of

00:42:33,540 --> 00:42:40,430
so the logs are showing a lot of hello

00:42:36,260 --> 00:42:43,710
Def Con cz 2020 so it's working and now

00:42:40,430 --> 00:42:47,850
you I'm gonna put me to kill the pod I'm

00:42:43,710 --> 00:42:50,850
killing busy box and it's terminating we

00:42:47,850 --> 00:42:53,010
saw on an event in the bottom right I'm

00:42:50,850 --> 00:42:54,780
gonna give us a little white space so we

00:42:53,010 --> 00:42:58,520
can check it out so we got an event for

00:42:54,780 --> 00:42:58,520
the pod entering a terminating state

00:42:58,890 --> 00:43:03,660
which is coincidence yeah one of the

00:43:02,100 --> 00:43:06,270
really cool things about this the only

00:43:03,660 --> 00:43:07,350
code that we wrote around the

00:43:06,270 --> 00:43:09,600
functionality that we're going to show

00:43:07,350 --> 00:43:12,810
right here is the reference from the pod

00:43:09,600 --> 00:43:14,430
to the owning pod request that is the

00:43:12,810 --> 00:43:17,250
only thing that we have to set and

00:43:14,430 --> 00:43:22,860
because of that relationship when we get

00:43:17,250 --> 00:43:26,690
the event for the you just got lucky no

00:43:22,860 --> 00:43:29,640
it says terminating still that is weird

00:43:26,690 --> 00:43:32,400
is it updating okay creating new pod

00:43:29,640 --> 00:43:34,800
okay good because of the relationship we

00:43:32,400 --> 00:43:37,560
got an event for the pod request the pod

00:43:34,800 --> 00:43:39,390
request went and to find the pod in

00:43:37,560 --> 00:43:41,490
memory and then search for it and found

00:43:39,390 --> 00:43:44,040
hey my pod isn't there I expect this to

00:43:41,490 --> 00:43:45,720
be here my desired state is not my

00:43:44,040 --> 00:43:48,990
running state I'm going to change that

00:43:45,720 --> 00:43:50,460
and it created the a pod busy box with

00:43:48,990 --> 00:43:52,920
one line of code by just creating that

00:43:50,460 --> 00:43:55,560
relationship another benefit is we are

00:43:52,920 --> 00:43:58,950
going to delete our custom resource that

00:43:55,560 --> 00:44:02,550
we created and because of that

00:43:58,950 --> 00:44:05,370
relationship it's going to also delete

00:44:02,550 --> 00:44:06,960
the related pod so it works both ways so

00:44:05,370 --> 00:44:10,590
our custom resources gone we've got some

00:44:06,960 --> 00:44:13,140
events for the pod request and we can

00:44:10,590 --> 00:44:17,100
see our pod is already terminating from

00:44:13,140 --> 00:44:24,750
the bottom right it just gone and we are

00:44:17,100 --> 00:44:26,280
done with the demo portion actually make

00:44:24,750 --> 00:44:28,560
sure I clicked on the right thing here

00:44:26,280 --> 00:44:33,540
so the clicker thing irks I could find

00:44:28,560 --> 00:44:35,580
how to move back over all right so

00:44:33,540 --> 00:44:37,050
that's great we have an operator one

00:44:35,580 --> 00:44:39,740
other thing I want to just call out is

00:44:37,050 --> 00:44:42,210
how you can distribute these operators

00:44:39,740 --> 00:44:43,350
what we did is the first thing you see

00:44:42,210 --> 00:44:46,320
on the side here is just the raw

00:44:43,350 --> 00:44:48,210
manifest cute cuddle create apply

00:44:46,320 --> 00:44:51,480
replace whatever state you are on the

00:44:48,210 --> 00:44:53,790
lifecycle of your resource can deploy

00:44:51,480 --> 00:44:56,400
them straight from github you can also

00:44:53,790 --> 00:44:58,260
use operator lifecycle manager OLM which

00:44:56,400 --> 00:45:00,600
is what we use within our team for

00:44:58,260 --> 00:45:02,610
deploying our operators very powerful

00:45:00,600 --> 00:45:05,190
operator itself for managing the

00:45:02,610 --> 00:45:09,060
lifecycle of operators so the deployment

00:45:05,190 --> 00:45:11,400
upgrades and deletion it's it's it's

00:45:09,060 --> 00:45:14,520
really great operator hub do

00:45:11,400 --> 00:45:16,940
great resource for deploying or making

00:45:14,520 --> 00:45:19,230
your kubernetes operators available

00:45:16,940 --> 00:45:24,480
generally it's part of the open ship

00:45:19,230 --> 00:45:25,859
platform as well go out there to see

00:45:24,480 --> 00:45:28,230
what are out there see what you might

00:45:25,859 --> 00:45:30,420
want to pick up for your own use cases

00:45:28,230 --> 00:45:32,190
why why write it when it already exists

00:45:30,420 --> 00:45:33,420
for you and then a plethora of other

00:45:32,190 --> 00:45:35,039
things that are not going to try to

00:45:33,420 --> 00:45:40,680
enumerate here but there's a lot of good

00:45:35,039 --> 00:45:49,650
things here and police'

00:45:40,680 --> 00:45:52,980
thank you so like two human counterparts

00:45:49,650 --> 00:45:55,829
operators are here to do work we think

00:45:52,980 --> 00:45:57,240
that the operator pattern is a really

00:45:55,829 --> 00:46:01,140
good way to abstract all the work that

00:45:57,240 --> 00:46:04,710
we do a lot and let the API help us do

00:46:01,140 --> 00:46:09,839
with computers so humans do creative

00:46:04,710 --> 00:46:11,400
problems we model well we try to model

00:46:09,839 --> 00:46:13,950
all of our work into custom resources

00:46:11,400 --> 00:46:17,579
and controllers to handle changes in

00:46:13,950 --> 00:46:20,400
events with them and because we're able

00:46:17,579 --> 00:46:23,240
to do that effectively a lot of my work

00:46:20,400 --> 00:46:26,400
is now automated in a way that scales is

00:46:23,240 --> 00:46:29,250
redundant and it's available now when

00:46:26,400 --> 00:46:30,779
you all go ahead and start writing your

00:46:29,250 --> 00:46:33,750
own operators you don't need to be

00:46:30,779 --> 00:46:36,390
limited to the operations types of

00:46:33,750 --> 00:46:38,849
things that we showed you can do

00:46:36,390 --> 00:46:40,770
whatever you want the sky is limit it is

00:46:38,849 --> 00:46:43,740
really impossible to enumerate all of

00:46:40,770 --> 00:46:44,730
them because everyone to use case is

00:46:43,740 --> 00:46:46,950
different and that's the beauty of

00:46:44,730 --> 00:46:53,549
operator is that you can tailor it to

00:46:46,950 --> 00:46:55,470
your specific needs and with that 10

00:46:53,549 --> 00:47:00,329
points if you can scan a QR code from in

00:46:55,470 --> 00:47:03,650
the backroom if there's any questions we

00:47:00,329 --> 00:47:03,650
have yes

00:47:07,550 --> 00:47:17,180
we're going to be but it feels like it's

00:47:10,069 --> 00:47:21,530
safe so I would like to ask key tops I

00:47:17,180 --> 00:47:24,589
really really like it ups that get is

00:47:21,530 --> 00:47:27,050
the single source of truth and all the

00:47:24,589 --> 00:47:29,150
state of my custard or maybe even

00:47:27,050 --> 00:47:43,490
custard is described in a single

00:47:29,150 --> 00:47:46,210
repository but it seems like so we we

00:47:43,490 --> 00:47:48,829
use the get-ups model in our team

00:47:46,210 --> 00:47:50,599
everything we do is in get not

00:47:48,829 --> 00:47:53,210
necessarily publicly repositories but

00:47:50,599 --> 00:47:55,520
there are we drive all her work together

00:47:53,210 --> 00:47:56,930
yeah so I think they can work in concert

00:47:55,520 --> 00:47:58,940
I mean one of the things to remember is

00:47:56,930 --> 00:48:01,250
these operators are deployed as

00:47:58,940 --> 00:48:03,740
resources in the cluster themselves

00:48:01,250 --> 00:48:07,220
using the standard resources that

00:48:03,740 --> 00:48:08,720
platform provides and once you've

00:48:07,220 --> 00:48:10,309
deployed them once you've also deployed

00:48:08,720 --> 00:48:11,720
your customer resource definitions again

00:48:10,309 --> 00:48:14,119
you're back to just resources in the

00:48:11,720 --> 00:48:16,700
cluster so the processes that get get

00:48:14,119 --> 00:48:19,309
ops flows for how you manage things are

00:48:16,700 --> 00:48:23,890
a perfect fit for both the deployment of

00:48:19,309 --> 00:48:23,890
and the utilization of your operators

00:48:29,980 --> 00:48:43,400
did you sit on the keynote on Friday

00:48:33,700 --> 00:48:49,930
okay so I'm part of the keynote was Dana

00:48:43,400 --> 00:48:49,930
life or as I mentioned I got paged

00:48:51,349 --> 00:48:56,809
so we manage the platform and on top of

00:48:54,230 --> 00:48:58,130
us is another layer called a pessary

00:48:56,809 --> 00:49:00,410
the application that's raised that has a

00:48:58,130 --> 00:49:03,200
point on top of it the advisory team for

00:49:00,410 --> 00:49:05,690
us manages the the workload to get from

00:49:03,200 --> 00:49:08,480
get into the production clusters into

00:49:05,690 --> 00:49:12,520
staging so they have I think it's based

00:49:08,480 --> 00:49:12,520
on Jenkins yes

00:49:18,109 --> 00:49:22,740
but it's mostly Jenkins but I think I

00:49:21,210 --> 00:49:24,329
think it's work

00:49:22,740 --> 00:49:25,920
yeah there's all sorts of options I

00:49:24,329 --> 00:49:26,730
don't think there's any one tool that

00:49:25,920 --> 00:49:28,619
would be best

00:49:26,730 --> 00:49:31,680
it's what it's gonna be a good 50

00:49:28,619 --> 00:49:33,329
organization what do you know or others

00:49:31,680 --> 00:49:36,510
in your team know and what are you

00:49:33,329 --> 00:49:39,589
willing to adopt broadly yeah we use

00:49:36,510 --> 00:49:48,540
combination of all on which we mentioned

00:49:39,589 --> 00:50:02,280
Jenkins and some homemade stuff so did

00:49:48,540 --> 00:50:13,829
the QR codes get in the back side of the

00:50:02,280 --> 00:50:15,839
cluster so so we we have yet several

00:50:13,829 --> 00:50:18,470
operators that we run in a like a

00:50:15,839 --> 00:50:21,630
management cluster to administer

00:50:18,470 --> 00:50:24,300
external services like Pedro duty dead

00:50:21,630 --> 00:50:26,750
man snitch interacting with let's

00:50:24,300 --> 00:50:32,609
encrypt for generation of certificates

00:50:26,750 --> 00:50:34,410
kind of yeah and those ultimately we've

00:50:32,609 --> 00:50:36,420
segmented those out from ro can strip

00:50:34,410 --> 00:50:38,700
dedicated clusters cuz we don't want

00:50:36,420 --> 00:50:40,829
that management credentials in a cluster

00:50:38,700 --> 00:50:45,109
that our customers connect us and they

00:50:40,829 --> 00:50:49,560
yet pushed in using a tool called high

00:50:45,109 --> 00:50:51,060
that is know where that is from a

00:50:49,560 --> 00:50:54,619
product point of view but it's open shoe

00:50:51,060 --> 00:50:54,619
it Oregon get home

00:51:21,470 --> 00:51:37,760
just business process definitions

00:51:34,500 --> 00:51:41,040
definitely a whole different domain

00:51:37,760 --> 00:51:45,810
problem i one thing i didn't mention

00:51:41,040 --> 00:51:47,610
like operators are our hypothesis theory

00:51:45,810 --> 00:51:49,830
assertion whatever operators are

00:51:47,610 --> 00:51:52,470
micro-services it doesn't mean that

00:51:49,830 --> 00:51:54,330
micro services are operators I don't

00:51:52,470 --> 00:51:57,450
think that you know everything could be

00:51:54,330 --> 00:52:00,240
defined as an operator but so that's

00:51:57,450 --> 00:52:03,510
probably a domain in which it's much

00:52:00,240 --> 00:52:09,920
more difficult to fit an operator into

00:52:03,510 --> 00:52:09,920
the model we are

00:52:14,250 --> 00:52:16,310

YouTube URL: https://www.youtube.com/watch?v=QhAcaJRquoo


