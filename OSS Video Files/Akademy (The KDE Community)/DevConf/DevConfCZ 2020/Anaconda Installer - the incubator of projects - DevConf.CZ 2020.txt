Title: Anaconda Installer - the incubator of projects - DevConf.CZ 2020
Publication date: 2020-03-26
Playlist: DevConfCZ 2020
Description: 
	Speakers: Jiří Konečný

Anaconda is the OS installer for Fedora, CentOS, RHEL and others. As the installer, it has to be able to control and set up most of the system parts. Because of this, Anaconda is getting bigger and bigger, and sometimes a part of the project takes on a life of its own. I would like to go over these projects which happened to start as an Anaconda part. Who knows, maybe even you will find an interesting project you can use in this presentation!

[ https://sched.co/YOpF ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,660 --> 00:00:08,160
hi everyone you are here for thought

00:00:05,069 --> 00:00:12,460
anaconda tech incubator of projects and

00:00:08,160 --> 00:00:16,180
I will talk this presentation will be

00:00:12,460 --> 00:00:18,760
about list of projects which were rest

00:00:16,180 --> 00:00:21,390
from the Anaconda which were originally

00:00:18,760 --> 00:00:24,160
part of the IRA Kunda or started as a

00:00:21,390 --> 00:00:30,340
project we have to you we need for

00:00:24,160 --> 00:00:34,359
anaconda so it's about that so a little

00:00:30,340 --> 00:00:39,429
bit about me I'm Anaconda developer for

00:00:34,359 --> 00:00:44,499
some few years for four years I will be

00:00:39,429 --> 00:00:47,460
five i'm redditor and here our compacts

00:00:44,499 --> 00:00:50,949
from me these two are important for you

00:00:47,460 --> 00:00:53,440
you can contact us about any of the

00:00:50,949 --> 00:00:56,920
projects I will talk about it above them

00:00:53,440 --> 00:00:59,530
you can contact us about it here I would

00:00:56,920 --> 00:01:02,100
prefer the IRC but you have a time zone

00:00:59,530 --> 00:01:07,659
for the pin no time because we are

00:01:02,100 --> 00:01:12,430
opening people the list is a good place

00:01:07,659 --> 00:01:15,869
for so we are entering the Anaconda

00:01:12,430 --> 00:01:20,020
alignment there'll be plenty of snakes

00:01:15,869 --> 00:01:26,500
mostly Python and a few bucks mates

00:01:20,020 --> 00:01:29,909
flying around mainly part so what is

00:01:26,500 --> 00:01:34,119
anaconda in case you don't know it's

00:01:29,909 --> 00:01:37,869
awesome story for Santos rail scientific

00:01:34,119 --> 00:01:42,429
Linux and Hydra and I think they're more

00:01:37,869 --> 00:01:46,329
about literature at least six

00:01:42,429 --> 00:01:48,729
also if you have questions about any

00:01:46,329 --> 00:01:50,799
project I will be mentioning it will be

00:01:48,729 --> 00:01:52,299
like I will have two slides about one

00:01:50,799 --> 00:01:54,100
project or something like that I will

00:01:52,299 --> 00:01:56,890
talk about it and then I will go to

00:01:54,100 --> 00:01:58,780
another project so ask me immediately if

00:01:56,890 --> 00:02:02,829
I won't react you can throw something on

00:01:58,780 --> 00:02:04,240
me but please make it something which

00:02:02,829 --> 00:02:08,470
won't hurt me

00:02:04,240 --> 00:02:11,200
and I hope it won't be tomato because

00:02:08,470 --> 00:02:16,080
you know - I programmer Adele will do

00:02:11,200 --> 00:02:20,590
more work than one I programmer hmm so

00:02:16,080 --> 00:02:25,269
why anaconda why there are projects

00:02:20,590 --> 00:02:27,430
thanks to the anaconda so first as I

00:02:25,269 --> 00:02:30,190
always installed anaconda has to control

00:02:27,430 --> 00:02:32,470
and set up many parts of the system yeah

00:02:30,190 --> 00:02:36,640
we need to set up services we need to do

00:02:32,470 --> 00:02:39,130
a partitioning we need to run the

00:02:36,640 --> 00:02:42,760
creator or in a gram disk and so and so

00:02:39,130 --> 00:02:44,410
and so on we are most most of the time

00:02:42,760 --> 00:02:46,959
we are controlling other applications

00:02:44,410 --> 00:02:49,690
which are doing this for us but we also

00:02:46,959 --> 00:02:55,290
have plenty and plenty and plenty of API

00:02:49,690 --> 00:02:57,790
and user interface things and yeah so

00:02:55,290 --> 00:03:02,260
thanks to this we have plenty of

00:02:57,790 --> 00:03:04,360
projects and we have some many I would

00:03:02,260 --> 00:03:09,459
say many of the projects which are

00:03:04,360 --> 00:03:11,890
usable for for big projects like

00:03:09,459 --> 00:03:14,560
anaconda and of course even small

00:03:11,890 --> 00:03:16,750
projects we are trying to make the

00:03:14,560 --> 00:03:19,720
library usable for anything basically

00:03:16,750 --> 00:03:23,079
and also it's much better for

00:03:19,720 --> 00:03:25,900
maintenance instead of one giant github

00:03:23,079 --> 00:03:28,420
repo you can have plenty of small ones

00:03:25,900 --> 00:03:31,540
with separate issue separate since tests

00:03:28,420 --> 00:03:36,819
about examples and so and so on so it's

00:03:31,540 --> 00:03:40,019
much better this is by the way anaconda

00:03:36,819 --> 00:03:40,019
logo looks nice

00:03:42,270 --> 00:03:51,050
and another reason why anaconda is

00:03:46,350 --> 00:03:55,980
because it's all it's really all it's

00:03:51,050 --> 00:03:58,020
the first comment is from 1999 and I'm

00:03:55,980 --> 00:04:00,440
telling I'm saying first commit because

00:03:58,020 --> 00:04:02,190
we don't know when the project started

00:04:00,440 --> 00:04:04,770
unfortunately it would be fair to

00:04:02,190 --> 00:04:07,170
pretend I think I would guess that it's

00:04:04,770 --> 00:04:09,890
something around 1996 or something like

00:04:07,170 --> 00:04:14,070
that but I mean the vaca PDR you find

00:04:09,890 --> 00:04:23,130
1999 because that's the first commit we

00:04:14,070 --> 00:04:25,460
don't know and main thing which I wanted

00:04:23,130 --> 00:04:27,930
to say you please use the projects I

00:04:25,460 --> 00:04:31,170
want to make this something like an

00:04:27,930 --> 00:04:34,080
advanced advancement for the for our

00:04:31,170 --> 00:04:38,310
project because I think they are great

00:04:34,080 --> 00:04:44,160
for any size projects this library's

00:04:38,310 --> 00:04:48,180
most of the time and it's shame that

00:04:44,160 --> 00:04:50,280
online mostly anaconda is using it it

00:04:48,180 --> 00:04:52,980
would be great if we get some community

00:04:50,280 --> 00:04:54,810
around it if it will be there will be

00:04:52,980 --> 00:04:58,590
issues requests and so on

00:04:54,810 --> 00:05:00,570
so please use it right they are some of

00:04:58,590 --> 00:05:05,310
the really great projects between

00:05:00,570 --> 00:05:08,120
between collars and I think anyone can

00:05:05,310 --> 00:05:08,120
find something

00:05:12,369 --> 00:05:32,820
yeah so this is some kind of for so just

00:05:25,940 --> 00:05:32,820
[Music]

00:05:35,180 --> 00:05:40,749
[Music]

00:05:44,650 --> 00:05:47,890
[Music]

00:05:48,519 --> 00:05:57,079
this is to create ISOs you can boot and

00:05:54,709 --> 00:06:01,249
install frame or you can pay your Wi-Fi

00:05:57,079 --> 00:06:06,229
so and so on this is for the updates of

00:06:01,249 --> 00:06:08,860
the system and these are libraries which

00:06:06,229 --> 00:06:12,349
are used by under and I think they are

00:06:08,860 --> 00:06:18,039
one of the most useful lamps because

00:06:12,349 --> 00:06:27,040
they are usable for your future projects

00:06:18,039 --> 00:06:30,199
basically this is something special

00:06:27,040 --> 00:06:30,199
[Music]

00:06:34,150 --> 00:06:40,090
it's a tool which were which will around

00:06:37,810 --> 00:06:42,520
when you have after the installation and

00:06:40,090 --> 00:06:44,490
it will allow you to make the post

00:06:42,520 --> 00:06:48,940
installation configuration steps

00:06:44,490 --> 00:06:53,620
it's basically front-end for and added

00:06:48,940 --> 00:06:57,010
front-end anaconda and you can you can't

00:06:53,620 --> 00:07:00,880
make the installation which means you

00:06:57,010 --> 00:07:05,320
won't experience but it will allow you

00:07:00,880 --> 00:07:07,180
to set of services install you create

00:07:05,320 --> 00:07:16,590
user mainly creatives and that's the

00:07:07,180 --> 00:07:20,620
main impact so first of our projects

00:07:16,590 --> 00:07:26,350
piping single line this is a few Python

00:07:20,620 --> 00:07:30,820
library for text to you I if you ever

00:07:26,350 --> 00:07:32,890
installed anaconda in the text UI you

00:07:30,820 --> 00:07:38,620
can use this like it'll be the same

00:07:32,890 --> 00:07:41,260
it's we basically grabbed the dropped

00:07:38,620 --> 00:07:43,690
code from the anaconda and created a

00:07:41,260 --> 00:07:46,300
separate library first it's easier to

00:07:43,690 --> 00:07:49,510
maintain second it would it would it

00:07:46,300 --> 00:07:54,030
helped us with our current issues with

00:07:49,510 --> 00:07:56,260
migrating anaconda as an off topic

00:07:54,030 --> 00:07:58,510
interesting thing it's pure Python

00:07:56,260 --> 00:08:01,840
library seen there's no other

00:07:58,510 --> 00:08:05,020
dependencies then piping frame which it

00:08:01,840 --> 00:08:07,680
could be in this people and second big

00:08:05,020 --> 00:08:09,850
benefit is it's nine base is

00:08:07,680 --> 00:08:12,670
specifically designed to four lines

00:08:09,850 --> 00:08:15,400
based processing which means that you

00:08:12,670 --> 00:08:19,390
can connect by a console or serial

00:08:15,400 --> 00:08:22,630
console or if you want you can even use

00:08:19,390 --> 00:08:26,050
line based printers or anything and Kate

00:08:22,630 --> 00:08:34,190
you are a based on that the point is

00:08:26,050 --> 00:08:36,979
that that we never never remove anything

00:08:34,190 --> 00:08:40,520
the screen on what once it's printed it

00:08:36,979 --> 00:08:45,320
will be there this is from the Anaconda

00:08:40,520 --> 00:09:01,400
text UI so it's better simple earlier

00:08:45,320 --> 00:09:04,520
it's and also information about about

00:09:01,400 --> 00:09:08,930
spokes you can enter or think you can

00:09:04,520 --> 00:09:13,070
set up and so on and so on main thing we

00:09:08,930 --> 00:09:16,370
are trying to trying to get from this

00:09:13,070 --> 00:09:21,170
library is it should be simple it should

00:09:16,370 --> 00:09:26,540
be simple to use I don't think we get

00:09:21,170 --> 00:09:28,760
where we want to me but if you will try

00:09:26,540 --> 00:09:32,030
it and you find a way how to improve

00:09:28,760 --> 00:09:36,280
user experience developer experience and

00:09:32,030 --> 00:09:42,800
I think please file an issue or better

00:09:36,280 --> 00:09:46,240
 are welcome as always so also

00:09:42,800 --> 00:09:47,920
interesting thing optional optional

00:09:46,240 --> 00:09:52,640
[Music]

00:09:47,920 --> 00:09:55,550
optional benefit of this library you can

00:09:52,640 --> 00:09:58,040
use existing Gillette chillip even loop

00:09:55,550 --> 00:10:00,230
which means that if you have if you have

00:09:58,040 --> 00:10:02,840
already graphical text graphical user

00:10:00,230 --> 00:10:05,120
interface which using chili or you to

00:10:02,840 --> 00:10:08,390
communicate with deep bass or anything

00:10:05,120 --> 00:10:10,220
you just need to even look you can use

00:10:08,390 --> 00:10:16,610
the piping van which is by default

00:10:10,220 --> 00:10:19,790
created there but you can also use the G

00:10:16,610 --> 00:10:22,760
lip existing TV or even that could be

00:10:19,790 --> 00:10:24,470
interesting for you we are using that

00:10:22,760 --> 00:10:27,280
birthday heavily because we are using

00:10:24,470 --> 00:10:27,280
the deepest there

00:10:28,769 --> 00:10:36,790
yeah if you want to try this library or

00:10:31,720 --> 00:10:38,470
you want to get more more details about

00:10:36,790 --> 00:10:44,050
it please look on the github repository

00:10:38,470 --> 00:10:48,029
it's there and there are examples and I

00:10:44,050 --> 00:10:48,029
think it's much better than any tutorial

00:10:55,560 --> 00:11:01,509
they could never no one no one ever

00:10:58,600 --> 00:11:03,100
asked us about about this and that's the

00:11:01,509 --> 00:11:05,470
reason why I'm doing this thought I

00:11:03,100 --> 00:11:08,259
would be good I would be glad if and I

00:11:05,470 --> 00:11:25,730
wanna be to use it because I think that

00:11:08,259 --> 00:11:28,420
either is useful Thanks

00:11:25,730 --> 00:11:28,420
so

00:11:29,390 --> 00:11:38,220
so another interesting library these

00:11:33,899 --> 00:11:41,750
lavas Wednesday ponsova have had headed

00:11:38,220 --> 00:11:46,800
to all our before this presentation

00:11:41,750 --> 00:11:48,300
unfortunately about if you want to if

00:11:46,800 --> 00:11:50,490
you are interesting you can move on the

00:11:48,300 --> 00:11:52,620
streams from from the talk if you were a

00:11:50,490 --> 00:11:56,430
parent there if you read there you will

00:11:52,620 --> 00:12:01,410
know this but in general I will I will

00:11:56,430 --> 00:12:06,360
talk about it in sure it's pretty new

00:12:01,410 --> 00:12:10,709
library but I think its nature even its

00:12:06,360 --> 00:12:13,620
patent you because it's stable sir it's

00:12:10,709 --> 00:12:17,670
stable because it's used in anaconda on

00:12:13,620 --> 00:12:20,820
failure for some time even before if it

00:12:17,670 --> 00:12:28,670
wasn't like separate library but the

00:12:20,820 --> 00:12:34,050
code was similar its deepest library

00:12:28,670 --> 00:12:39,240
pretty easy to use it's heavily inspired

00:12:34,050 --> 00:12:42,329
by Orca it started basically from the PI

00:12:39,240 --> 00:12:45,329
D bus is inspired by PI D bus and the

00:12:42,329 --> 00:12:49,020
reason why this even was created I know

00:12:45,329 --> 00:12:53,700
yet another deepest library a the reason

00:12:49,020 --> 00:12:56,910
was because pythons PI to PI D bus is a

00:12:53,700 --> 00:13:00,209
great library until you need something

00:12:56,910 --> 00:13:05,459
changed in that and then you will find

00:13:00,209 --> 00:13:08,790
out that that the maintainer is not

00:13:05,459 --> 00:13:12,149
reacting on anything which is not really

00:13:08,790 --> 00:13:15,149
great and we had plenty of things we

00:13:12,149 --> 00:13:20,910
want to change so we are we are right

00:13:15,149 --> 00:13:25,020
now packaging PI D bus to the fedora

00:13:20,910 --> 00:13:28,650
with our patches don't don't worry it

00:13:25,020 --> 00:13:31,470
won't break your or by the bus usage

00:13:28,650 --> 00:13:34,770
it's just we have another another

00:13:31,470 --> 00:13:37,620
functionality which we need for anaconda

00:13:34,770 --> 00:13:41,460
and it's much easier to get it into into

00:13:37,620 --> 00:13:44,250
PI D bus than having it inside Conda

00:13:41,460 --> 00:13:47,490
it's basically not we are not able to do

00:13:44,250 --> 00:13:50,190
that from anaconda site to inject the

00:13:47,490 --> 00:13:53,730
co2 by the desk this one of the reasons

00:13:50,190 --> 00:13:57,720
why it does pose how does boss or goals

00:13:53,730 --> 00:13:59,550
of - bus to be extendable extensible you

00:13:57,720 --> 00:14:04,860
are able to expand that with your

00:13:59,550 --> 00:14:07,650
features override things so some

00:14:04,860 --> 00:14:09,990
pictures you can create proxy objects

00:14:07,650 --> 00:14:12,330
that means when you are using client

00:14:09,990 --> 00:14:14,940
application you will just point it to

00:14:12,330 --> 00:14:17,640
the bus service the bus the bus path and

00:14:14,940 --> 00:14:19,890
interface and it will create for you the

00:14:17,640 --> 00:14:24,060
proxy and you can call it this normal

00:14:19,890 --> 00:14:27,870
piping piping call piping class by

00:14:24,060 --> 00:14:30,720
tonight's dance class it's pretty easy

00:14:27,870 --> 00:14:32,370
to use from the clients plants solution

00:14:30,720 --> 00:14:34,680
you are basically done you don't need

00:14:32,370 --> 00:14:39,480
anything else you can use just this and

00:14:34,680 --> 00:14:42,420
be happy with if you using server to

00:14:39,480 --> 00:14:45,990
create things server for d-bus it's a

00:14:42,420 --> 00:14:54,540
little bit more interesting and in that

00:14:45,990 --> 00:14:57,060
case you will definitely use and the

00:14:54,540 --> 00:14:59,580
point is when you are creating service

00:14:57,060 --> 00:15:02,610
services on d-bus which means we were

00:14:59,580 --> 00:15:07,710
creating servers only buzz basically you

00:15:02,610 --> 00:15:11,970
have to create XML files which will tell

00:15:07,710 --> 00:15:14,190
the bus what is registered on your on

00:15:11,970 --> 00:15:16,740
your application and the deepest will

00:15:14,190 --> 00:15:19,080
basically when a known someone use the

00:15:16,740 --> 00:15:21,540
bus crawl because signal the bus the bus

00:15:19,080 --> 00:15:23,340
interface with call it will point to

00:15:21,540 --> 00:15:26,700
your class in the crawl thanks to the

00:15:23,340 --> 00:15:29,520
6ml file thanks to the dust bus you can

00:15:26,700 --> 00:15:31,770
just create just use decorator in

00:15:29,520 --> 00:15:34,230
fighting over the glass and it will

00:15:31,770 --> 00:15:36,240
generate it from the from the current

00:15:34,230 --> 00:15:38,340
class inviting you don't need to do

00:15:36,240 --> 00:15:43,950
anything else you just joined it with

00:15:38,340 --> 00:15:48,180
the path yeah we are using piping piping

00:15:43,950 --> 00:15:50,760
system so you will have you have to

00:15:48,180 --> 00:15:53,790
provide types which will be registered

00:15:50,760 --> 00:15:56,700
on the bus but it's used is using Python

00:15:53,790 --> 00:15:58,620
syntax it's nothing like something

00:15:56,700 --> 00:16:00,720
special you have to deal with something

00:15:58,620 --> 00:16:04,460
you have to learn you can use normal

00:16:00,720 --> 00:16:07,260
piping syntax in Python free we are

00:16:04,460 --> 00:16:09,930
creating our own typing system but it's

00:16:07,260 --> 00:16:14,720
just another import and the single types

00:16:09,930 --> 00:16:20,010
no nothing like so such a problem and

00:16:14,720 --> 00:16:23,330
also be exception propagation there also

00:16:20,010 --> 00:16:26,520
when you rise exception it will create

00:16:23,330 --> 00:16:31,010
correct d-bus error and run it through

00:16:26,520 --> 00:16:31,010
the D bus yes

00:16:36,010 --> 00:16:44,690
now we were thinking about it but mainly

00:16:41,029 --> 00:16:47,029
when they the outer but the code is so

00:16:44,690 --> 00:16:48,440
different and we wanted to find some we

00:16:47,029 --> 00:16:51,560
wanted to create this something

00:16:48,440 --> 00:16:53,810
extensible so even on this level

00:16:51,560 --> 00:16:58,600
you will get to the point that you need

00:16:53,810 --> 00:17:02,180
to rewrite almost everything so

00:16:58,600 --> 00:17:04,939
unfortunately no it would be great if we

00:17:02,180 --> 00:17:07,189
can use by PI D bus and create not

00:17:04,939 --> 00:17:10,100
create another a new project but in this

00:17:07,189 --> 00:17:12,500
case on project layers this was this was

00:17:10,100 --> 00:17:20,000
much better a much easier solution and

00:17:12,500 --> 00:17:24,880
much better so it's very looking from

00:17:20,000 --> 00:17:31,520
sketch basically we are mainly one day I

00:17:24,880 --> 00:17:37,490
don't want to take her credit her

00:17:31,520 --> 00:17:40,910
created basically or she used code be

00:17:37,490 --> 00:17:43,130
created for PI D bus we're about of

00:17:40,910 --> 00:17:45,320
course with different different back-end

00:17:43,130 --> 00:17:47,420
different background and so on so it's

00:17:45,320 --> 00:17:50,900
even from this point of view it's our

00:17:47,420 --> 00:17:54,980
code what we taken from took from PI D

00:17:50,900 --> 00:17:58,340
bus is their solution for the interfaces

00:17:54,980 --> 00:18:01,750
and basically the ideas ideas from the

00:17:58,340 --> 00:18:01,750
project but the code enforcement

00:18:08,950 --> 00:18:13,330
so this is just few features from that

00:18:11,440 --> 00:18:15,070
there are plenty of Mars if you are

00:18:13,330 --> 00:18:19,180
interesting as I said look on the

00:18:15,070 --> 00:18:22,210
presentation or talk with Wendy she's

00:18:19,180 --> 00:18:26,890
sitting there or you can reach us on I

00:18:22,210 --> 00:18:30,520
or C or email this is one of the most

00:18:26,890 --> 00:18:33,460
important I am sorry I have broken five

00:18:30,520 --> 00:18:36,490
but this is the most important project I

00:18:33,460 --> 00:18:39,130
would say from from our projects for

00:18:36,490 --> 00:18:59,080
basically any project using deep bass or

00:18:39,130 --> 00:19:01,870
in general most usable project I will

00:18:59,080 --> 00:19:06,400
just repeat it for for the recording

00:19:01,870 --> 00:19:11,400
that Buyten the bass is not really

00:19:06,400 --> 00:19:14,170
usable by D bass a solution is fine but

00:19:11,400 --> 00:19:16,480
unfortunately not great maintain not

00:19:14,170 --> 00:19:18,400
active maintain I don't want to say he

00:19:16,480 --> 00:19:22,090
he created a really great project by the

00:19:18,400 --> 00:19:25,870
bass is not bad but yeah he doesn't have

00:19:22,090 --> 00:19:30,180
a time so there's nothing more much more

00:19:25,870 --> 00:19:30,180
on the deepest library side yep

00:19:41,210 --> 00:19:47,820
if if we make it if if created by a

00:19:44,670 --> 00:19:51,360
Dustbuster compatible for the transition

00:19:47,820 --> 00:20:01,550
from the body busted as possible I think

00:19:51,360 --> 00:20:01,550
we yeah yeah

00:20:06,880 --> 00:20:12,730
yeah so I will I will could there are

00:20:09,430 --> 00:20:16,090
some week it's pretty much compatible

00:20:12,730 --> 00:20:19,330
and in short we are using the similar

00:20:16,090 --> 00:20:21,570
syntax I think by the bus if I'm not

00:20:19,330 --> 00:20:25,420
mistaken does not use the Python types

00:20:21,570 --> 00:20:28,210
so that's one of the extension for you

00:20:25,420 --> 00:20:30,850
but I think it's it's not that hard to

00:20:28,210 --> 00:20:35,680
migrate from or from like this from

00:20:30,850 --> 00:20:41,020
party bus to to the spa's so if one

00:20:35,680 --> 00:20:45,280
project this should be the one okay so

00:20:41,020 --> 00:20:54,150
then we have a blue soap literally the

00:20:45,280 --> 00:20:57,610
Python library okay one thing about that

00:20:54,150 --> 00:21:00,400
it's a great library the problem is I

00:20:57,610 --> 00:21:03,910
don't think there will be many users of

00:21:00,400 --> 00:21:07,210
the partitioning library like potential

00:21:03,910 --> 00:21:08,110
users but in case they are here

00:21:07,210 --> 00:21:09,690
somewhere

00:21:08,110 --> 00:21:13,630
[Music]

00:21:09,690 --> 00:21:19,210
then I will make it quick summary of

00:21:13,630 --> 00:21:23,830
that so it's Viking my brain it's using

00:21:19,210 --> 00:21:28,150
two it's separating you from using tools

00:21:23,830 --> 00:21:30,820
to create the insane partitioning

00:21:28,150 --> 00:21:33,520
we are supporting my anaconda basically

00:21:30,820 --> 00:21:35,470
anaconda is using just live at I would

00:21:33,520 --> 00:21:40,240
say and live at is using plenty of

00:21:35,470 --> 00:21:43,440
others things and if you need dynamic

00:21:40,240 --> 00:21:46,060
partitioning sorry if you need

00:21:43,440 --> 00:21:48,010
partitioning planning basically to

00:21:46,060 --> 00:21:50,800
create your partitions before we will

00:21:48,010 --> 00:21:53,140
execute the commands then you

00:21:50,800 --> 00:21:57,160
can you use this library if you are

00:21:53,140 --> 00:22:03,640
inviting that's great there's some Luber

00:21:57,160 --> 00:22:06,220
new core library which I was which I was

00:22:03,640 --> 00:22:08,530
pointed some time ago it's storage

00:22:06,220 --> 00:22:10,840
energy it's written in C so that's an

00:22:08,530 --> 00:22:13,330
alternative but I think livid goo is

00:22:10,840 --> 00:22:15,310
working real time and it's used by

00:22:13,330 --> 00:22:17,680
anaconda heavily so it's tested

00:22:15,310 --> 00:22:23,350
I think storage energy is used by open

00:22:17,680 --> 00:22:25,960
SUSE I'm not sure how long one thing why

00:22:23,350 --> 00:22:29,590
this why this was started is that there

00:22:25,960 --> 00:22:31,780
was no alternative to create your

00:22:29,590 --> 00:22:34,690
partitioning without executing the

00:22:31,780 --> 00:22:37,210
commands that's the pure one you can

00:22:34,690 --> 00:22:39,460
fire you can create the tools everything

00:22:37,210 --> 00:22:43,540
about plan planning the partitioning

00:22:39,460 --> 00:22:45,450
ahead of removing erasing all your data

00:22:43,540 --> 00:22:50,290
it's not that easy

00:22:45,450 --> 00:22:52,600
yeah so I will show you definition of

00:22:50,290 --> 00:22:55,360
play that one definition when you did it

00:22:52,600 --> 00:22:57,610
to Google is this file this is a

00:22:55,360 --> 00:23:00,490
graphical definition it's someone

00:22:57,610 --> 00:23:03,940
somehow hurt eyes when you are looking

00:23:00,490 --> 00:23:08,080
in the and the second one is from urban

00:23:03,940 --> 00:23:11,410
dictionary and I think this is pretty

00:23:08,080 --> 00:23:13,720
precise what is plymouth is trying to do

00:23:11,410 --> 00:23:18,010
basically when you try to interact with

00:23:13,720 --> 00:23:22,290
the tools which are doing storage like

00:23:18,010 --> 00:23:25,820
but refers to sell vm 206 the pass

00:23:22,290 --> 00:23:31,420
x4 and there are you

00:23:25,820 --> 00:23:36,170
even the removed man like FCoE and and

00:23:31,420 --> 00:23:38,800
so you will get to plenty of different

00:23:36,170 --> 00:23:42,980
use cases and you trying to do something

00:23:38,800 --> 00:23:47,120
but then with sign API and that's really

00:23:42,980 --> 00:23:51,070
not an easy task so they are anytime to

00:23:47,120 --> 00:23:51,070
get something where it shouldn't be

00:23:52,060 --> 00:24:00,470
yeah another project is livid quick

00:23:57,740 --> 00:24:02,960
right it was created as diploma thesis

00:24:00,470 --> 00:24:09,940
by weight attract me he's here son he's

00:24:02,960 --> 00:24:09,940
sitting there all look of them of course

00:24:09,970 --> 00:24:20,080
it's great great grid tool basically I

00:24:15,470 --> 00:24:25,250
would say its replacement of gparted in

00:24:20,080 --> 00:24:30,710
many cases maybe all cases it's doing

00:24:25,250 --> 00:24:33,290
the same but the difference is that that

00:24:30,710 --> 00:24:35,660
gparted does not support if I'm not

00:24:33,290 --> 00:24:39,710
mistaken but gparted does not support

00:24:35,660 --> 00:24:44,810
container types of storage which means

00:24:39,710 --> 00:24:48,770
LVM battery FS and so on so mainly DS do

00:24:44,810 --> 00:24:52,520
so because I kind of understand them in

00:24:48,770 --> 00:24:56,000
in the in time when gparted was created

00:24:52,520 --> 00:24:58,250
there was no such thing they were they

00:24:56,000 --> 00:25:00,140
were they couldn't think of LVM

00:24:58,250 --> 00:25:03,200
something you will create and storage

00:25:00,140 --> 00:25:04,700
storage on your okay container on your

00:25:03,200 --> 00:25:06,350
storage and in that you can create

00:25:04,700 --> 00:25:08,360
another container and another container

00:25:06,350 --> 00:25:10,960
another container and you can link them

00:25:08,360 --> 00:25:14,420
and use between disks and so on it's

00:25:10,960 --> 00:25:16,790
really really pain to somehow create GUI

00:25:14,420 --> 00:25:18,980
which will show you which disks are used

00:25:16,790 --> 00:25:22,580
and so on that's something you don't

00:25:18,980 --> 00:25:26,810
want to change but vojta in it and I

00:25:22,580 --> 00:25:30,440
think pretty successful you can find

00:25:26,810 --> 00:25:33,170
blivet GUI also in anaconda it's it's

00:25:30,440 --> 00:25:35,280
not project which happened from anaconda

00:25:33,170 --> 00:25:37,920
directly but it's in anaconda

00:25:35,280 --> 00:25:40,200
in federal you can find it as another

00:25:37,920 --> 00:25:42,150
bartering way if you don't like our

00:25:40,200 --> 00:25:44,600
custom partitioning which is kind of

00:25:42,150 --> 00:25:47,390
complicated this is more gparted like

00:25:44,600 --> 00:25:54,390
and you can easily kill three terms

00:25:47,390 --> 00:25:57,960
that's great great create project and

00:25:54,390 --> 00:26:00,900
thanks a lot God for that when you have

00:25:57,960 --> 00:26:03,300
when you want to try get your get LPN

00:26:00,900 --> 00:26:05,850
partition go but if s partitioning on on

00:26:03,300 --> 00:26:10,130
your flash drive it's is a hell if you

00:26:05,850 --> 00:26:10,130
are not using it like normal daily bread

00:26:12,860 --> 00:26:23,730
so another storage libraries we okay not

00:26:20,010 --> 00:26:30,780
me but it's kind of also created from

00:26:23,730 --> 00:26:34,590
anaconda these two are I think they are

00:26:30,780 --> 00:26:38,160
pretty petty useful for even small

00:26:34,590 --> 00:26:42,300
projects if you ever have to interact

00:26:38,160 --> 00:26:44,790
with storage to link then please use the

00:26:42,300 --> 00:26:50,100
block def instead it's library written

00:26:44,790 --> 00:26:51,660
in C it has really introspection G

00:26:50,100 --> 00:26:56,060
object introspection which means that

00:26:51,660 --> 00:26:56,060
you can use it from almost any language

00:27:00,920 --> 00:27:10,740
it's is what believe it is using as I

00:27:05,700 --> 00:27:13,830
said before to make sane sane control of

00:27:10,740 --> 00:27:16,130
the insane storage tools and they are

00:27:13,830 --> 00:27:19,290
really insane it's like when you I

00:27:16,130 --> 00:27:23,700
remember from few bucks we had like when

00:27:19,290 --> 00:27:26,640
you type - - - - help it will behave

00:27:23,700 --> 00:27:28,980
different like it will written - van on

00:27:26,640 --> 00:27:33,120
some cases but on other cases not it

00:27:28,980 --> 00:27:35,070
depends what tool you are using and also

00:27:33,120 --> 00:27:36,690
when you invoke some commands it can

00:27:35,070 --> 00:27:39,119
behave differently on

00:27:36,690 --> 00:27:43,080
like version from version and so on you

00:27:39,119 --> 00:27:45,090
really don't want to mess it is another

00:27:43,080 --> 00:27:48,749
interesting which could be interesting

00:27:45,090 --> 00:27:51,529
for anyone who have to show or interact

00:27:48,749 --> 00:27:55,200
with user and tell ask him for storage

00:27:51,529 --> 00:27:58,889
units give me 100 megabits or anything

00:27:55,200 --> 00:28:04,320
like that is my right size it's

00:27:58,889 --> 00:28:08,220
implemented in C and Python and it's

00:28:04,320 --> 00:28:11,519
really making saying sign storage unit

00:28:08,220 --> 00:28:14,340
management in insanity of this because

00:28:11,519 --> 00:28:18,059
it looks like pretty easy ok you will

00:28:14,340 --> 00:28:21,080
give one combo box or something and you

00:28:18,059 --> 00:28:24,599
will write like I want to 100 megabits

00:28:21,080 --> 00:28:28,710
but then you have an a B then you have

00:28:24,599 --> 00:28:31,759
mb u ke B and so on and so on and so on

00:28:28,710 --> 00:28:35,580
and it has different calculations and

00:28:31,759 --> 00:28:38,389
when you start to drag into this mess

00:28:35,580 --> 00:28:42,720
even translations because for example

00:28:38,389 --> 00:28:48,239
Arabic language has a totally different

00:28:42,720 --> 00:28:50,460
view on these units it's kinda mess so

00:28:48,239 --> 00:28:53,029
you can use this and it will make your

00:28:50,460 --> 00:28:53,029
life much easier

00:28:57,480 --> 00:29:04,120
and another interesting interesting

00:29:01,870 --> 00:29:08,309
thing is fed up

00:29:04,120 --> 00:29:19,900
who from you knows no fed up whoo

00:29:08,309 --> 00:29:22,000
okay who is using fedora so whenever

00:29:19,900 --> 00:29:25,809
possible see here before DNS system

00:29:22,000 --> 00:29:28,900
upgrade may be going they decided that

00:29:25,809 --> 00:29:31,419
DNF is much better place for the photo

00:29:28,900 --> 00:29:37,179
fed up to be or for the functionality to

00:29:31,419 --> 00:29:40,809
be system update which you probably know

00:29:37,179 --> 00:29:43,780
today it's how you upgrade for a federal

00:29:40,809 --> 00:29:46,179
nineteen to now federal federal twenty

00:29:43,780 --> 00:29:48,070
and so on so it will download your

00:29:46,179 --> 00:29:50,409
download the packages make the reboot

00:29:48,070 --> 00:29:51,909
and install packages in a special

00:29:50,409 --> 00:29:53,880
environment and reboot to the new

00:29:51,909 --> 00:30:04,960
version of federal so we don't have to

00:29:53,880 --> 00:30:09,760
reinstall your suspend so this happened

00:30:04,960 --> 00:30:13,620
from like started from Fedora 18 2012

00:30:09,760 --> 00:30:16,110
it's pretty old but I really like the

00:30:13,620 --> 00:30:18,549
history about how this was created

00:30:16,110 --> 00:30:25,750
thanks Bill for sharing by the way this

00:30:18,549 --> 00:30:29,710
is there's an outer office so well work

00:30:25,750 --> 00:30:33,000
a spider aqui we eat at time and he had

00:30:29,710 --> 00:30:36,220
a span of his job he was testing

00:30:33,000 --> 00:30:39,159
upgrades at least that time looked like

00:30:36,220 --> 00:30:40,780
you have to burn the DVD of the anaconda

00:30:39,159 --> 00:30:43,179
with the Anaconda boots special

00:30:40,780 --> 00:30:46,510
environment round the scripts and it

00:30:43,179 --> 00:30:48,789
will make some magic and upgrade you to

00:30:46,510 --> 00:30:52,510
a new system to a new version of the

00:30:48,789 --> 00:30:56,500
system that's right but when you are few

00:30:52,510 --> 00:30:59,770
poor QE and you have to test it then you

00:30:56,500 --> 00:31:02,830
burn panty and plenty and plenty of DVDs

00:30:59,770 --> 00:31:07,290
to test it on real hardware so when the

00:31:02,830 --> 00:31:10,090
well burned thousands of these DVDs he

00:31:07,290 --> 00:31:16,240
start to think that must be passed over

00:31:10,090 --> 00:31:21,160
and he started to create preamp which

00:31:16,240 --> 00:31:23,170
was in place upgrades we have now it was

00:31:21,160 --> 00:31:27,280
that way that time it was plenty of

00:31:23,170 --> 00:31:30,550
states which you were basically we were

00:31:27,280 --> 00:31:33,570
by you were able to run and avoid this

00:31:30,550 --> 00:31:36,760
mess of DVD in the DVD burning

00:31:33,570 --> 00:31:39,750
booting to special state and running

00:31:36,760 --> 00:31:49,690
something and you can do that you

00:31:39,750 --> 00:31:55,090
couldn't do that on existing system yeah

00:31:49,690 --> 00:32:00,010
from that Fatah was created and it was

00:31:55,090 --> 00:32:04,060
more same solution of this of this idea

00:32:00,010 --> 00:32:10,840
and this was used for on federal I was

00:32:04,060 --> 00:32:13,390
saying a few quite fury races fed up it

00:32:10,840 --> 00:32:16,900
was switched to DNS system upgrade I was

00:32:13,390 --> 00:32:19,350
maybe eight five eight releases back or

00:32:16,900 --> 00:32:19,350
something

00:32:20,160 --> 00:32:25,950
twenty-six own thing it's not even ideas

00:32:28,470 --> 00:32:36,030
so so thanks - thanks - well we have we

00:32:34,200 --> 00:32:44,030
have DNS system upgrade now

00:32:36,030 --> 00:32:48,840
thanks Phil I owe you this one so and

00:32:44,030 --> 00:32:51,480
another project is bitewing Pocket lint

00:32:48,840 --> 00:32:55,970
if you saw my presentation I have this

00:32:51,480 --> 00:33:04,200
presentation on open out here in here

00:32:55,970 --> 00:33:06,450
YouTube beauty I said I told her that

00:33:04,200 --> 00:33:11,730
it's great project and you should loot

00:33:06,450 --> 00:33:13,620
on that and so on but then I okay I will

00:33:11,730 --> 00:33:16,500
start from from the beginning what

00:33:13,620 --> 00:33:21,090
pocket lettuce is prepare around Pyland

00:33:16,500 --> 00:33:24,600
to make center force - to make center

00:33:21,090 --> 00:33:28,710
work with the false positives you are

00:33:24,600 --> 00:33:32,430
able to create the red X - much you to

00:33:28,710 --> 00:33:35,130
match your false positives and that way

00:33:32,430 --> 00:33:38,130
you are able to not disable like the

00:33:35,130 --> 00:33:40,590
complete check or make the disable check

00:33:38,130 --> 00:33:43,500
on like I don't know 100 places in your

00:33:40,590 --> 00:33:47,010
code which is both very answer what ways

00:33:43,500 --> 00:33:51,360
are bad because the check could be could

00:33:47,010 --> 00:33:53,820
be valid on some cases so we have this

00:33:51,360 --> 00:33:56,580
solution it's even dead smart it will

00:33:53,820 --> 00:33:59,490
tell you that the false positive is not

00:33:56,580 --> 00:34:04,050
used anymore when you run the grandest

00:33:59,490 --> 00:34:06,770
pilant on that so it means you know that

00:34:04,050 --> 00:34:11,070
you can turn it off and get rid of it

00:34:06,770 --> 00:34:15,020
that's dedicate it also has the great

00:34:11,070 --> 00:34:18,120
feature which was great in the beginning

00:34:15,020 --> 00:34:23,190
when the project started I don't know

00:34:18,120 --> 00:34:26,370
when when it was but the feature was

00:34:23,190 --> 00:34:29,520
that we basically found found all the

00:34:26,370 --> 00:34:34,140
Python files in the codebase and ran

00:34:29,520 --> 00:34:37,470
Pyland on each of this file because

00:34:34,140 --> 00:34:39,160
Pilon wasn't able to scale that time

00:34:37,470 --> 00:34:41,320
most probable

00:34:39,160 --> 00:34:43,870
not that sure but I guess it's is there

00:34:41,320 --> 00:34:47,490
I don't image I can imagine why wouldn't

00:34:43,870 --> 00:34:51,820
why would someone else wrote that code

00:34:47,490 --> 00:34:55,420
when I tried to benchmark it before this

00:34:51,820 --> 00:34:58,390
presentation I found out that it's like

00:34:55,420 --> 00:35:01,600
four times slower than when you run

00:34:58,390 --> 00:35:03,010
pilot on just one processor even it's in

00:35:01,600 --> 00:35:05,260
the early to using all of your

00:35:03,010 --> 00:35:08,290
processors thanks to the context sharing

00:35:05,260 --> 00:35:15,390
between the pilot and so on it's health

00:35:08,290 --> 00:35:18,700
no it's it's insane so my current

00:35:15,390 --> 00:35:29,230
recommendation is do not use this

00:35:18,700 --> 00:35:32,610
project please it's not that easy

00:35:29,230 --> 00:35:36,970
Pilon okay I will repeat the question

00:35:32,610 --> 00:35:39,820
why Pilon by not like eight or anything

00:35:36,970 --> 00:35:42,760
anything else we looked on the

00:35:39,820 --> 00:35:46,660
alternative and Pyland is still one of

00:35:42,760 --> 00:35:49,570
the most configurable and most robust

00:35:46,660 --> 00:35:54,010
system for this diastatic checker for

00:35:49,570 --> 00:36:00,250
piping even though the flag eight is so

00:35:54,010 --> 00:36:02,110
pretty like I would say sexy it has it

00:36:00,250 --> 00:36:05,200
has interesting interesting things but

00:36:02,110 --> 00:36:08,050
still the pilot this if you really want

00:36:05,200 --> 00:36:10,780
to have great checker you will go for

00:36:08,050 --> 00:36:21,460
pile and this or that was our our

00:36:10,780 --> 00:36:24,880
dictation result okay so what I did last

00:36:21,460 --> 00:36:28,090
few days I basically replace the pilot

00:36:24,880 --> 00:36:31,120
and most of the things it done because

00:36:28,090 --> 00:36:32,950
most of the things it done was on a kind

00:36:31,120 --> 00:36:34,570
of specific pretty anaconda specific

00:36:32,950 --> 00:36:37,060
which is funny because plenty of critics

00:36:34,570 --> 00:36:40,990
are using it basically all the projects

00:36:37,060 --> 00:36:45,310
which happens to start from or which

00:36:40,990 --> 00:36:50,820
which were created by developers of

00:36:45,310 --> 00:36:50,820
anaconda so I

00:36:51,440 --> 00:36:57,799
well soon pay deploy request for

00:36:54,829 --> 00:37:01,970
propellant and tell that it's deprecated

00:36:57,799 --> 00:37:07,220
and try to get the only useful ability

00:37:01,970 --> 00:37:10,670
it has which is the false positives to

00:37:07,220 --> 00:37:12,410
get this to pile and directly I'm not

00:37:10,670 --> 00:37:15,500
saying I will be successful I'm not sure

00:37:12,410 --> 00:37:17,930
if that's doable early but if it will be

00:37:15,500 --> 00:37:20,150
it will be great if not maybe there's a

00:37:17,930 --> 00:37:23,839
place or for something new which will do

00:37:20,150 --> 00:37:26,569
this just this but do it correctly right

00:37:23,839 --> 00:37:28,400
now the Pyland is the dependence or the

00:37:26,569 --> 00:37:32,059
popul and is doing plenty of stuff you

00:37:28,400 --> 00:37:36,079
don't need and it's planet condo

00:37:32,059 --> 00:37:38,539
specific except the false positives

00:37:36,079 --> 00:37:41,900
false positives filter that's great sure

00:37:38,539 --> 00:37:45,049
but it doesn't it doesn't help you when

00:37:41,900 --> 00:37:48,530
you want to run your pilot and it's

00:37:45,049 --> 00:37:50,900
eight minutes and you can get it get it

00:37:48,530 --> 00:37:58,039
down for one minute so it's really

00:37:50,900 --> 00:38:01,960
really too much for this and one of the

00:37:58,039 --> 00:38:06,770
last things I want to talk about here is

00:38:01,960 --> 00:38:17,210
Lorax and the family i would say i hope

00:38:06,770 --> 00:38:21,859
i won't i won't offend anyone laura is

00:38:17,210 --> 00:38:27,079
the base library and even and also a

00:38:21,859 --> 00:38:30,770
tool to create a suitable ISOs you are

00:38:27,079 --> 00:38:33,770
using it fedora is using it to create a

00:38:30,770 --> 00:38:36,230
bootable ISO for fedora and all Sorrell

00:38:33,770 --> 00:38:40,760
and so and Santos is you are using it if

00:38:36,230 --> 00:38:44,270
I'm not mistaken and what it does it

00:38:40,760 --> 00:38:47,569
will it's starting anaconda in a special

00:38:44,270 --> 00:38:51,410
mode to create our image basically it

00:38:47,569 --> 00:38:54,300
will also start a VM to separate

00:38:51,410 --> 00:38:58,470
environment from your current working

00:38:54,300 --> 00:39:00,780
environment because you know running

00:38:58,470 --> 00:39:03,780
anaconda on your system is doesn't look

00:39:00,780 --> 00:39:06,420
like a smart way to do you can if if we

00:39:03,780 --> 00:39:09,960
mess up one if we can erase your data

00:39:06,420 --> 00:39:15,080
and break your system so it's much much

00:39:09,960 --> 00:39:20,310
better to run it in everything this is

00:39:15,080 --> 00:39:21,810
in your apps and you can I would say you

00:39:20,310 --> 00:39:25,160
can create good ice over that pretty

00:39:21,810 --> 00:39:28,650
easily it just a consumes a lot of time

00:39:25,160 --> 00:39:31,740
it's a little bit harder if you want to

00:39:28,650 --> 00:39:36,630
create some some special custom scenario

00:39:31,740 --> 00:39:39,270
but what what do you need to create a

00:39:36,630 --> 00:39:42,360
bootable ISO is to use kickstart and

00:39:39,270 --> 00:39:45,120
that's basically an Lorax template sir

00:39:42,360 --> 00:39:48,060
oh it's Lorax templates but you can use

00:39:45,120 --> 00:39:51,030
lower extent place you can inspire be

00:39:48,060 --> 00:39:57,660
inspired by your x10 place from Federer

00:39:51,030 --> 00:40:01,320
which is great then there is like media

00:39:57,660 --> 00:40:05,430
creator and like media creator is a tool

00:40:01,320 --> 00:40:10,250
around of which which on the back end

00:40:05,430 --> 00:40:14,600
it's using Clorox and it's the same

00:40:10,250 --> 00:40:18,480
functionality basically much harder to

00:40:14,600 --> 00:40:24,290
to control there's plenty of plenty of

00:40:18,480 --> 00:40:27,750
more options parameters and so on to

00:40:24,290 --> 00:40:32,360
think about but it's via for creating

00:40:27,750 --> 00:40:32,360
live also so that's the reason yeah

00:40:34,640 --> 00:40:42,630
yeah it's the question if it is used to

00:40:40,230 --> 00:40:47,700
create life life medias yeah it's used

00:40:42,630 --> 00:40:51,450
for Federer and the reason why may miss

00:40:47,700 --> 00:40:54,359
it is because they're spongy too which

00:40:51,450 --> 00:40:59,460
is running like media creator and lurks

00:40:54,359 --> 00:41:03,049
on behind like in in the process so it's

00:40:59,460 --> 00:41:03,049
doing much more yes

00:41:08,910 --> 00:41:11,980
[Music]

00:41:17,359 --> 00:41:25,769
and this as my colleague said there's

00:41:21,619 --> 00:41:28,799
even a live CD Toros live CD creator or

00:41:25,769 --> 00:41:33,299
obviously lifestyle it was not sure to

00:41:28,799 --> 00:41:38,970
create to create create live CDs it's

00:41:33,299 --> 00:41:40,559
not it's not the recommended way to for

00:41:38,970 --> 00:41:44,130
from federal perspective if I'm not

00:41:40,559 --> 00:41:46,650
mistaken but it's also working UK you

00:41:44,130 --> 00:41:48,359
are free to use it the difference is if

00:41:46,650 --> 00:41:51,269
I'm not mistaken that the live CD tools

00:41:48,359 --> 00:41:56,039
does not use anaconda so they can have

00:41:51,269 --> 00:41:58,609
other problems and other benefits you

00:41:56,039 --> 00:41:58,609
have to choose

00:41:58,740 --> 00:42:09,510
by the way in I have it here maybe not

00:42:03,809 --> 00:42:11,579
true no you can the reason why it's like

00:42:09,510 --> 00:42:14,549
anaconda related project is because an

00:42:11,579 --> 00:42:16,980
Archon that does this and they're in the

00:42:14,549 --> 00:42:20,970
old anaconda I'm not sure if rl5 branch

00:42:16,980 --> 00:42:24,660
or right there 6 bench I think it's real

00:42:20,970 --> 00:42:26,490
5 range in anaconda github people you

00:42:24,660 --> 00:42:27,630
can find scripts to create a bootable

00:42:26,490 --> 00:42:31,559
ISOs

00:42:27,630 --> 00:42:36,150
so before it was these scripts then the

00:42:31,559 --> 00:42:39,269
tool was created to unify all these all

00:42:36,150 --> 00:42:43,140
these tools to create life ISO to create

00:42:39,269 --> 00:42:47,130
a bootable or net net net install I so

00:42:43,140 --> 00:42:51,930
and so and so and so so it was mainly

00:42:47,130 --> 00:42:55,289
big mainly to place and the anaconda

00:42:51,930 --> 00:42:57,750
will be underneath it's not that true

00:42:55,289 --> 00:43:01,410
what they are trying to do right now is

00:42:57,750 --> 00:43:05,029
to get a count out of it but you have my

00:43:01,410 --> 00:43:09,329
mind you have my vote for that because

00:43:05,029 --> 00:43:11,609
it could be interesting I should

00:43:09,329 --> 00:43:14,099
shouldn't tell that because you know we

00:43:11,609 --> 00:43:15,720
are losing some some some work workflow

00:43:14,099 --> 00:43:17,880
but on the other hand

00:43:15,720 --> 00:43:20,490
it will make our life easier when we

00:43:17,880 --> 00:43:22,589
don't have to count on my running system

00:43:20,490 --> 00:43:25,140
because right now we have plenty of code

00:43:22,589 --> 00:43:27,329
to just switch if we are on the running

00:43:25,140 --> 00:43:29,849
system and it's dear install or in which

00:43:27,329 --> 00:43:32,220
install or on the other hand we are in

00:43:29,849 --> 00:43:35,550
the in the stage 2 and we have to format

00:43:32,220 --> 00:43:38,740
things and so on that's why that's the

00:43:35,550 --> 00:43:44,910
reason why we don't recommend

00:43:38,740 --> 00:43:48,550
running anaconda or creating ISO without

00:43:44,910 --> 00:43:52,030
the VM running like outside of the VM on

00:43:48,550 --> 00:43:56,380
your honor system because it's plenty

00:43:52,030 --> 00:43:59,380
it's very complicated to do this and the

00:43:56,380 --> 00:44:02,349
last thing and you was think family

00:43:59,380 --> 00:44:06,339
member I would say youngest family as

00:44:02,349 --> 00:44:11,349
well there you can also know it under

00:44:06,339 --> 00:44:18,690
name composer it's the same tool well

00:44:11,349 --> 00:44:18,690
there is just the upstream name sir oh

00:44:19,770 --> 00:44:25,510
so it will be will be composer even for

00:44:23,710 --> 00:44:29,790
upstream okay so it will be composer

00:44:25,510 --> 00:44:29,790
even for ransom I should update my son

00:44:33,000 --> 00:44:38,140
yeah it's okay it's even more confusing

00:44:36,369 --> 00:44:44,140
so there are plenty of names for that

00:44:38,140 --> 00:44:46,000
okay I I will end up with this but the

00:44:44,140 --> 00:44:48,160
important thing you can find it here and

00:44:46,000 --> 00:44:51,460
if not there will be a local building

00:44:48,160 --> 00:44:58,170
for the current surgical project current

00:44:51,460 --> 00:45:02,580
name so what it does is you is to make

00:44:58,170 --> 00:45:08,080
above projects with plenty of parameters

00:45:02,580 --> 00:45:11,140
plenty of parameters and plenty of your

00:45:08,080 --> 00:45:13,720
knowledge you have to run this to create

00:45:11,140 --> 00:45:19,839
a nice UI in the cockpit which means up

00:45:13,720 --> 00:45:22,960
interface basically in short and to just

00:45:19,839 --> 00:45:26,260
at your packages set your settings click

00:45:22,960 --> 00:45:28,380
what you want and then it it's great if

00:45:26,260 --> 00:45:32,349
you want just to produce your own

00:45:28,380 --> 00:45:34,690
install install I'm not sure if you were

00:45:32,349 --> 00:45:37,869
doing installation Isis or just

00:45:34,690 --> 00:45:40,520
installed like you have installed system

00:45:37,869 --> 00:45:44,880
and you will boot it

00:45:40,520 --> 00:45:55,680
yeah so it's just yeah that's that's

00:45:44,880 --> 00:45:58,170
true for now the V will be so yeah I

00:45:55,680 --> 00:46:00,480
will repeat it it's right now it's just

00:45:58,170 --> 00:46:03,000
you've located I so which really which

00:46:00,480 --> 00:46:06,390
you will boot up on for example Amazon

00:46:03,000 --> 00:46:08,490
or anything VM and we will run it for

00:46:06,390 --> 00:46:13,710
your use case so we will you can create

00:46:08,490 --> 00:46:17,910
Fred you you can create your your

00:46:13,710 --> 00:46:21,630
environment you want to run you want to

00:46:17,910 --> 00:46:26,520
run your application by this it's much

00:46:21,630 --> 00:46:30,150
easier to I if you're not using like

00:46:26,520 --> 00:46:33,270
creating ISOs every day and that's

00:46:30,150 --> 00:46:35,730
everything from my presentation there

00:46:33,270 --> 00:46:42,180
are sources on all the interesting

00:46:35,730 --> 00:46:45,240
things this is our price you can read

00:46:42,180 --> 00:46:49,650
about news in anaconda and projects

00:46:45,240 --> 00:46:55,530
that's about the storage thing storage

00:46:49,650 --> 00:46:57,350
things stuff any questions you asked

00:46:55,530 --> 00:47:03,050
during the presentation so my guests as

00:46:57,350 --> 00:47:05,720
their arms okay great

00:47:03,050 --> 00:47:06,810
[Applause]

00:47:05,720 --> 00:47:09,869
you

00:47:06,810 --> 00:47:09,869

YouTube URL: https://www.youtube.com/watch?v=FDEBsfsPJMc


