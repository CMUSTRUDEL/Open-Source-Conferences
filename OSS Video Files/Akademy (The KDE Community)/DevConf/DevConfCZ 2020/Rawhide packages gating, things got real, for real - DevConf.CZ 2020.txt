Title: Rawhide packages gating, things got real, for real - DevConf.CZ 2020
Publication date: 2020-03-27
Playlist: DevConfCZ 2020
Description: 
	Speakers: Adam Saleh

Fedora has been working on a mechanism to gate rawhide packages on test results.
At flock 2019 we presented the first phase of this initiative where only
single-build updates were supported.
Now, both single and multi-builds updates can be gated in bodhi.
So we will take you on a tour of how packages gating works in Fedora, how it
changed since flock, what are the known sour spots in the process and what we
are hoping to do to address them.
If you have found yourself some sour spots, we would also love to hear from you.

Finally, we will conclude on some thoughts for the future of Fedora CI.

[ https://sched.co/ZVfw ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:00,599 --> 00:00:06,600
so clarification it's not my call Pingu

00:00:04,080 --> 00:00:10,070
should be standing here he has some

00:00:06,600 --> 00:00:13,289
virus he didn't want to spread it around

00:00:10,070 --> 00:00:16,320
so I received the whole transcript

00:00:13,289 --> 00:00:19,230
yesterday I trying to learn it if you

00:00:16,320 --> 00:00:21,390
ask me question there is Nils and me pal

00:00:19,230 --> 00:00:22,920
and I will throw it back at them and

00:00:21,390 --> 00:00:25,920
they should know what this is actually

00:00:22,920 --> 00:00:30,349
about I know something about the testing

00:00:25,920 --> 00:00:34,039
site because that's when I got in but

00:00:30,349 --> 00:00:38,489
let's get to it I am talking about

00:00:34,039 --> 00:00:41,960
gating row height this is the talk where

00:00:38,489 --> 00:00:49,170
we announce that yeah we have it running

00:00:41,960 --> 00:00:50,489
someone so agenda first why we want to

00:00:49,170 --> 00:00:53,160
get low high and what were the

00:00:50,489 --> 00:00:56,190
challenges if anybody saw pingu stalled

00:00:53,160 --> 00:00:58,829
on previous clock I think these are the

00:00:56,190 --> 00:01:02,519
two things he already talked about then

00:00:58,829 --> 00:01:06,720
I will talk about what actually is let's

00:01:02,519 --> 00:01:09,090
say life what we've done maybe some

00:01:06,720 --> 00:01:12,090
hints about how to interact with it when

00:01:09,090 --> 00:01:14,970
we you need to suddenly be back because

00:01:12,090 --> 00:01:20,100
it stuck somewhere and you actually want

00:01:14,970 --> 00:01:21,810
to use it and some roadmap because of

00:01:20,100 --> 00:01:24,329
course it's software so which never done

00:01:21,810 --> 00:01:29,060
and last but not least being who has a

00:01:24,329 --> 00:01:29,060
surprise for you so

00:01:29,700 --> 00:01:36,970
why getting rawhide primary reason we

00:01:33,280 --> 00:01:40,000
want to have more stable rawhide so we

00:01:36,970 --> 00:01:42,460
want to have something automated when

00:01:40,000 --> 00:01:45,400
you want to push a new package new

00:01:42,460 --> 00:01:47,740
update that checks it didn't really

00:01:45,400 --> 00:01:50,680
break anything

00:01:47,740 --> 00:01:54,300
so it should have many advantages it

00:01:50,680 --> 00:01:57,370
should give us working composers and

00:01:54,300 --> 00:02:04,420
composers not being broken that often

00:01:57,370 --> 00:02:08,170
and hopefully faster updates when we are

00:02:04,420 --> 00:02:10,540
actually doing release and one thing we

00:02:08,170 --> 00:02:15,190
will actually want to achieve with it is

00:02:10,540 --> 00:02:18,750
if we manage to implement it correctly

00:02:15,190 --> 00:02:21,520
it shouldn't happen to you anymore that

00:02:18,750 --> 00:02:24,340
you are maintaining your package and

00:02:21,520 --> 00:02:26,130
somebody broke one of your dependencies

00:02:24,340 --> 00:02:30,850
and it's your problem

00:02:26,130 --> 00:02:33,430
so we would move to you broke it you fix

00:02:30,850 --> 00:02:35,590
it you can't deny it you tell the people

00:02:33,430 --> 00:02:36,310
downstream that hey I'm doing this

00:02:35,590 --> 00:02:39,550
update

00:02:36,310 --> 00:02:42,940
I don't know I'm doing a Sony bump we

00:02:39,550 --> 00:02:46,709
need to figure this together instead of

00:02:42,940 --> 00:02:48,850
just pushing and update and let all of

00:02:46,709 --> 00:02:51,760
the others deal with it

00:02:48,850 --> 00:02:58,989
like that's not something that we really

00:02:51,760 --> 00:03:01,570
have yet but we are moving to that so

00:02:58,989 --> 00:03:05,459
we're we're we're challenges first

00:03:01,570 --> 00:03:08,709
biggest challenge waiting who told me is

00:03:05,459 --> 00:03:11,680
we actually attempted to do something

00:03:08,709 --> 00:03:13,930
like that a few years ago and we didn't

00:03:11,680 --> 00:03:17,050
manage you did it down more of the story

00:03:13,930 --> 00:03:22,989
so I don't know what were the problems

00:03:17,050 --> 00:03:26,350
in the previous iteration second no big

00:03:22,989 --> 00:03:28,930
sweeping changes to the update system we

00:03:26,350 --> 00:03:32,920
definitely don't want to maintain like I

00:03:28,930 --> 00:03:35,530
don't know rawhide specific body or

00:03:32,920 --> 00:03:39,730
something just to have this gating

00:03:35,530 --> 00:03:42,590
feature third interrupt as little as

00:03:39,730 --> 00:03:45,170
possible power packagers

00:03:42,590 --> 00:03:46,489
like there would be some changes to

00:03:45,170 --> 00:03:49,550
package or workflow because we are

00:03:46,489 --> 00:03:54,019
adding this new feature but have it fit

00:03:49,550 --> 00:03:58,700
into the existing - link and limit what

00:03:54,019 --> 00:04:01,580
they need to learn etc and last but not

00:03:58,700 --> 00:04:04,970
least of course we built this new

00:04:01,580 --> 00:04:07,190
testing - for the packages and then our

00:04:04,970 --> 00:04:08,900
testing tool fails and the packages

00:04:07,190 --> 00:04:10,970
suffer because they can't get the update

00:04:08,900 --> 00:04:14,299
in so there needs to be some sort of

00:04:10,970 --> 00:04:16,190
escape hatch if that happens or if you

00:04:14,299 --> 00:04:22,970
just know you need to move this there is

00:04:16,190 --> 00:04:32,419
a way how to waive the test results to

00:04:22,970 --> 00:04:34,970
ignore them so this was the plan we need

00:04:32,419 --> 00:04:36,979
though single build update testing and

00:04:34,970 --> 00:04:45,350
multi code update testing that we would

00:04:36,979 --> 00:04:48,020
face it in a phased rollout and then we

00:04:45,350 --> 00:04:52,930
would be able to gather feedback instead

00:04:48,020 --> 00:04:56,479
of doing like a big bang release and we

00:04:52,930 --> 00:05:03,820
really wanted to have a good user

00:04:56,479 --> 00:05:06,800
experience once we go forward with this

00:05:03,820 --> 00:05:10,310
that's something I shouldn't ask in the

00:05:06,800 --> 00:05:12,200
questions to you guys if those of you

00:05:10,310 --> 00:05:19,250
who actually have to interact with it

00:05:12,200 --> 00:05:22,510
like what was your experience so we

00:05:19,250 --> 00:05:27,860
actually haven't running now it has been

00:05:22,510 --> 00:05:34,660
deployed on body and staging and

00:05:27,860 --> 00:05:42,620
production for few weeks and you now can

00:05:34,660 --> 00:05:47,590
see that builds are gated in rawhide

00:05:42,620 --> 00:05:47,590
both for single and multi built

00:05:47,960 --> 00:05:57,650
so how does this work let's first look

00:05:53,270 --> 00:05:58,789
at a single build and this thing is just

00:05:57,650 --> 00:06:00,880
to scare you off

00:05:58,789 --> 00:06:11,410
you don't need to really pay attention

00:06:00,880 --> 00:06:17,389
it mostly says to signify that update oh

00:06:11,410 --> 00:06:24,830
this is the testing and tomorrow morning

00:06:17,389 --> 00:06:33,440
there's actually at all just the the

00:06:24,830 --> 00:06:38,360
parts actually do the testing so let's

00:06:33,440 --> 00:06:41,030
look at a simplified flow where you see

00:06:38,360 --> 00:06:45,520
just the thing that actually happens

00:06:41,030 --> 00:06:47,630
this is a simplified implementation we

00:06:45,520 --> 00:06:50,530
we actually in the end went with

00:06:47,630 --> 00:06:55,130
something bit different once we had

00:06:50,530 --> 00:07:01,389
multi built gating because we wanted to

00:06:55,130 --> 00:07:06,710
have them fairly similar so once you

00:07:01,389 --> 00:07:11,120
kick off your build the build is tagged

00:07:06,710 --> 00:07:17,780
with updates Canada then it waits to

00:07:11,120 --> 00:07:20,360
design then it gets retired updates

00:07:17,780 --> 00:07:23,960
pending and that's kind of the sign that

00:07:20,360 --> 00:07:32,120
all right now we are waiting for the

00:07:23,960 --> 00:07:40,370
test then the CI system notices to make

00:07:32,120 --> 00:07:43,039
it clear if you look at this all the

00:07:40,370 --> 00:07:47,930
messages that are sent back and forth to

00:07:43,039 --> 00:07:50,990
actually facilitate think ping who told

00:07:47,930 --> 00:07:53,360
me he will share the full resolution so

00:07:50,990 --> 00:07:55,639
I think once this gets published you

00:07:53,360 --> 00:07:57,350
should be able to study it in detail and

00:07:55,639 --> 00:08:01,670
tell us when we have like

00:07:57,350 --> 00:08:07,550
we have stuff in it so who didn't

00:08:01,670 --> 00:08:14,990
queries Greenwave to see how the testing

00:08:07,550 --> 00:08:21,590
went and if it passed it can let package

00:08:14,990 --> 00:08:26,720
to stable rawhide or get it so does that

00:08:21,590 --> 00:08:28,820
make sense okay looks at least two mils

00:08:26,720 --> 00:08:31,960
it was one of the people who build it it

00:08:28,820 --> 00:08:35,860
makes sense that's good so multi built

00:08:31,960 --> 00:08:39,650
let's start with the same horrible image

00:08:35,860 --> 00:08:41,599
there are kind of two things when we try

00:08:39,650 --> 00:08:45,800
to solve multi built is we are using

00:08:41,599 --> 00:08:49,550
excite tags and coating so in the

00:08:45,800 --> 00:08:59,050
beginning there is like party that deals

00:08:49,550 --> 00:09:04,940
with site bags and in the end as well so

00:08:59,050 --> 00:09:08,030
this is the simplified thing so first

00:09:04,940 --> 00:09:10,010
you would have to create a side tag and

00:09:08,030 --> 00:09:14,060
then you build all of the packages that

00:09:10,010 --> 00:09:16,670
have to go together in one update in the

00:09:14,060 --> 00:09:18,410
side tag at once you are happy with

00:09:16,670 --> 00:09:20,840
everything being built

00:09:18,410 --> 00:09:25,310
you can tell body all right this thing

00:09:20,840 --> 00:09:34,450
this side tag that's my update run with

00:09:25,310 --> 00:09:37,580
it and then Koji will take the side tag

00:09:34,450 --> 00:09:40,060
four to four rubber signatory to know

00:09:37,580 --> 00:09:42,650
that it should sign the packages and

00:09:40,060 --> 00:09:44,750
after that it gets three tag with

00:09:42,650 --> 00:09:47,750
testing pending and that's how all

00:09:44,750 --> 00:09:51,470
Dino's alright now we are handing lift

00:09:47,750 --> 00:09:57,880
off to the CI system and bode queries

00:09:51,470 --> 00:09:57,880
again the CI to know how well it went

00:09:59,670 --> 00:10:06,100
so this is probably the most significant

00:10:04,029 --> 00:10:09,639
things because you just create a site

00:10:06,100 --> 00:10:12,220
tag and from what I understand there's

00:10:09,639 --> 00:10:15,069
haven't really been the case if you want

00:10:12,220 --> 00:10:18,879
it to have a large update there was a

00:10:15,069 --> 00:10:21,309
fairly involved process to have site

00:10:18,879 --> 00:10:27,579
tags only the largest of projects use

00:10:21,309 --> 00:10:30,609
them but we worked with upstream ecology

00:10:27,579 --> 00:10:34,119
to simplify the site tag creation so

00:10:30,609 --> 00:10:36,779
that we can actually use them for this

00:10:34,119 --> 00:10:40,199
process which we want to be running

00:10:36,779 --> 00:10:40,199
quite often

00:10:45,079 --> 00:10:55,259
one of the things you might have noticed

00:10:47,939 --> 00:10:57,809
in the previous slide that we are then

00:10:55,259 --> 00:10:59,249
creating updated Modi that's something

00:10:57,809 --> 00:11:01,170
we didn't need to do for the single

00:10:59,249 --> 00:11:03,119
package because it's just a single

00:11:01,170 --> 00:11:10,730
package so body can just know that it

00:11:03,119 --> 00:11:10,730
should Cree continue with the build but

00:11:10,819 --> 00:11:17,220
that's something we needed to change so

00:11:13,970 --> 00:11:25,790
now the process for the single built and

00:11:17,220 --> 00:11:25,790
motive build is more similar okay

00:11:26,249 --> 00:11:34,290
like if you don't want to go home to the

00:11:29,249 --> 00:11:38,910
tomorrow talk about Greenwave etc this

00:11:34,290 --> 00:11:43,249
is kind of a high-level overview of what

00:11:38,910 --> 00:11:43,249
actually happens when tests are running

00:11:43,549 --> 00:11:54,929
if I remember correctly currently the CI

00:11:47,639 --> 00:11:59,579
systems mostly the CentOS CI we update

00:11:54,929 --> 00:12:02,910
the upload the results to the results DB

00:11:59,579 --> 00:12:05,189
and then Green Wave is the service that

00:12:02,910 --> 00:12:08,220
can check what was the result of the

00:12:05,189 --> 00:12:10,379
actual test for the update or if we

00:12:08,220 --> 00:12:12,869
don't care and if we just want to wave

00:12:10,379 --> 00:12:16,110
it because I don't know some part of the

00:12:12,869 --> 00:12:20,100
system I might be broken or or we really

00:12:16,110 --> 00:12:21,869
need to push the update or something you

00:12:20,100 --> 00:12:26,369
need the specific permission to be able

00:12:21,869 --> 00:12:29,449
to wait just a wave the test results but

00:12:26,369 --> 00:12:29,449
it's there and

00:12:31,920 --> 00:12:34,820
wave is for

00:12:37,029 --> 00:12:45,980
and there is even I like CLI command for

00:12:42,440 --> 00:12:51,160
that you can do body updates wave in

00:12:45,980 --> 00:12:51,160
both the CLI

00:13:00,080 --> 00:13:09,649
so now if something gets stuck what can

00:13:06,860 --> 00:13:11,480
you do like you created your update how

00:13:09,649 --> 00:13:25,519
do you know what is actually happening

00:13:11,480 --> 00:13:28,550
as you saw in the here as you can see

00:13:25,519 --> 00:13:31,760
like the biggest state change that

00:13:28,550 --> 00:13:36,589
happens it is visible are the tag

00:13:31,760 --> 00:13:46,610
changes so if you list the tags on your

00:13:36,589 --> 00:13:48,920
build then you can see it's waiting on

00:13:46,610 --> 00:13:52,240
Boni or indeed if it is waiting to be

00:13:48,920 --> 00:13:54,200
signed or if it is waiting to be tested

00:13:52,240 --> 00:13:57,019
there is one more tag

00:13:54,200 --> 00:14:00,079
it's just updated edge testing which

00:13:57,019 --> 00:14:06,290
means that tests are in progress so once

00:14:00,079 --> 00:14:10,940
you list all the tags you can at least

00:14:06,290 --> 00:14:12,890
see where it is stuck currently or it

00:14:10,940 --> 00:14:15,860
might not even be stuck the test just

00:14:12,890 --> 00:14:23,270
might be taking too long but it is at

00:14:15,860 --> 00:14:25,959
least some sort of signifier like all

00:14:23,270 --> 00:14:31,640
right where are we at if you start

00:14:25,959 --> 00:14:35,829
writing somebody on IRC hey my belt is

00:14:31,640 --> 00:14:39,140
stuck or something like that

00:14:35,829 --> 00:14:43,930
another interesting thing is that

00:14:39,140 --> 00:14:53,910
because we are relying so heavily on the

00:14:43,930 --> 00:14:58,830
federal messaging system we like you

00:14:53,910 --> 00:15:01,740
could try to massage the fig forward so

00:14:58,830 --> 00:15:04,110
if you created your update and nothing

00:15:01,740 --> 00:15:04,740
happens and you list your tags and there

00:15:04,110 --> 00:15:07,170
are none

00:15:04,740 --> 00:15:09,770
you could try to tag it manually and

00:15:07,170 --> 00:15:13,680
once you create for the single package D

00:15:09,770 --> 00:15:16,170
updates can do that tag the message

00:15:13,680 --> 00:15:19,440
should be sent and somebody should pick

00:15:16,170 --> 00:15:21,780
it up and that should take off the whole

00:15:19,440 --> 00:15:25,430
process even if in the beginning

00:15:21,780 --> 00:15:25,430
something failed

00:15:31,220 --> 00:15:39,389
no just yeah this this would work only

00:15:34,319 --> 00:15:43,589
if you see there are no tags and maybe I

00:15:39,389 --> 00:15:47,939
will try to kick it off manually so if

00:15:43,589 --> 00:15:52,019
you would just take it randomly with

00:15:47,939 --> 00:15:55,919
some of the tags further it wouldn't

00:15:52,019 --> 00:15:58,139
work because it is for example for

00:15:55,919 --> 00:16:00,779
updates testing it expects there are

00:15:58,139 --> 00:16:03,739
sign packages so if there are no

00:16:00,779 --> 00:16:06,359
scienter cages giving it the tag

00:16:03,739 --> 00:16:08,309
wouldn't help but if something happened

00:16:06,359 --> 00:16:14,899
and the first type is not even created

00:16:08,309 --> 00:16:22,679
then doing that manually might help so

00:16:14,899 --> 00:16:26,160
so you can you can visit it yeah this is

00:16:22,679 --> 00:16:29,339
well yeah second part is if you have

00:16:26,160 --> 00:16:34,079
multiple built you are looking at the

00:16:29,339 --> 00:16:38,369
side tag because with multi builds you

00:16:34,079 --> 00:16:41,369
are not just taking packages you are for

00:16:38,369 --> 00:16:45,539
like each step you are creating entire

00:16:41,369 --> 00:16:48,629
new site tag to idle to wait for to

00:16:45,539 --> 00:16:51,559
decide or to wait for the test end to

00:16:48,629 --> 00:16:55,069
finish so this is actually happening in

00:16:51,559 --> 00:16:55,069
the side tags

00:17:04,000 --> 00:17:14,880
okay in theory you could truly check

00:17:09,850 --> 00:17:20,610
this in Bodi as well there is a little

00:17:14,880 --> 00:17:23,169
bigger in your like updateui and if

00:17:20,610 --> 00:17:25,809
everything works correctly it connects

00:17:23,169 --> 00:17:28,870
to the Green Wave to see what is the

00:17:25,809 --> 00:17:31,059
status and so there are basically three

00:17:28,870 --> 00:17:34,809
states currently we displayed either

00:17:31,059 --> 00:17:37,559
it's pending which means it didn't go

00:17:34,809 --> 00:17:42,580
through the Robo signature yet or

00:17:37,559 --> 00:17:48,490
testing which means in the testing part

00:17:42,580 --> 00:17:51,789
of the process tests are being running

00:17:48,490 --> 00:17:54,789
or that is finished and it's being gated

00:17:51,789 --> 00:17:59,340
and there is a little results tab where

00:17:54,789 --> 00:18:02,470
you can see how did this look and

00:17:59,340 --> 00:18:06,870
finally if everything went well you can

00:18:02,470 --> 00:18:06,870
see that the update is stable

00:18:10,480 --> 00:18:19,190
so we had to change something based on

00:18:14,030 --> 00:18:20,960
the user feedback once we when we did

00:18:19,190 --> 00:18:25,480
some of them where with the release of

00:18:20,960 --> 00:18:30,260
the new UI and 45 because it seems we

00:18:25,480 --> 00:18:39,380
inadvertently broke some people's

00:18:30,260 --> 00:18:42,640
workflows for example we added query

00:18:39,380 --> 00:18:45,980
into coding so that you don't need to

00:18:42,640 --> 00:18:50,900
copy paste all of the builds you want in

00:18:45,980 --> 00:18:52,430
your update but it turns out there are

00:18:50,900 --> 00:18:55,130
many people that have good reasons why

00:18:52,430 --> 00:19:01,670
they want to copy paste the list of all

00:18:55,130 --> 00:19:06,280
of the of their updates so we added that

00:19:01,670 --> 00:19:11,180
back in you need to have that list like

00:19:06,280 --> 00:19:15,080
space separated but it should work more

00:19:11,180 --> 00:19:19,930
or less as previously there are still

00:19:15,080 --> 00:19:22,760
some performance issues with Koji

00:19:19,930 --> 00:19:27,710
especially with the when we do the query

00:19:22,760 --> 00:19:33,050
because we always ask like what is the

00:19:27,710 --> 00:19:35,150
state so if Koji is busy then it doesn't

00:19:33,050 --> 00:19:42,280
really show up in bode because though he

00:19:35,150 --> 00:19:46,640
is doing the query another thing was for

00:19:42,280 --> 00:19:48,110
every single build in height update if

00:19:46,640 --> 00:19:51,980
you are maintained there you would

00:19:48,110 --> 00:20:00,380
receive like 3 to 5 emails which for

00:19:51,980 --> 00:20:03,890
most people was too much so we are

00:20:00,380 --> 00:20:06,710
trying to reduce it if you still feel

00:20:03,890 --> 00:20:10,850
you are receiving too many emails for

00:20:06,710 --> 00:20:13,720
your packages just let us know we might

00:20:10,850 --> 00:20:13,720
try harder

00:20:15,190 --> 00:20:20,230
yes and the last thing

00:20:22,760 --> 00:20:26,220
[Music]

00:20:33,190 --> 00:20:36,270
I didn't know

00:20:40,270 --> 00:20:43,460
[Music]

00:20:47,490 --> 00:20:51,960
you could try to listen on me

00:21:04,040 --> 00:21:10,440
but we could discuss this later on I

00:21:07,800 --> 00:21:13,620
know some other qqe people are in the

00:21:10,440 --> 00:21:17,640
audience so if this is something you it

00:21:13,620 --> 00:21:20,430
that would make your life easier we

00:21:17,640 --> 00:21:24,840
could look into if it's in our bandwidth

00:21:20,430 --> 00:21:27,330
to implement it yeah one more thing we

00:21:24,840 --> 00:21:30,480
we had for some reason we have for a

00:21:27,330 --> 00:21:34,050
long time requests for enhancements so

00:21:30,480 --> 00:21:35,550
that once the update is stable nobody

00:21:34,050 --> 00:21:38,160
should be able to comment on it anymore

00:21:35,550 --> 00:21:41,490
and then we realized that there are

00:21:38,160 --> 00:21:44,070
people whose workflows rely on being

00:21:41,490 --> 00:21:46,890
able to still comment and coordinate

00:21:44,070 --> 00:21:49,470
even if from our point of view it looks

00:21:46,890 --> 00:21:58,730
like the work is done and you shouldn't

00:21:49,470 --> 00:22:02,760
be so there is a shout out to is there I

00:21:58,730 --> 00:22:06,630
arsenic atom W here okay so

00:22:02,760 --> 00:22:09,780
Pingu tells you Merry Christmas we

00:22:06,630 --> 00:22:12,380
reverted this because of use of your

00:22:09,780 --> 00:22:12,380
world trying

00:22:18,210 --> 00:22:28,659
so now what we don't have yet because as

00:22:22,600 --> 00:22:30,840
I said never finished we want to

00:22:28,659 --> 00:22:34,809
optimize for testing and reporting

00:22:30,840 --> 00:22:38,799
results for groups this is on the

00:22:34,809 --> 00:22:40,600
roadmap and previously we are focused

00:22:38,799 --> 00:22:42,399
more on the single bill so that for the

00:22:40,600 --> 00:22:46,890
single package it looks kinda nice

00:22:42,399 --> 00:22:50,110
influence the second we want to have

00:22:46,890 --> 00:22:53,200
better taste to it for the stuff that

00:22:50,110 --> 00:22:57,909
actually is testing the packages for

00:22:53,200 --> 00:23:02,580
example running rpm inspect is something

00:22:57,909 --> 00:23:02,580
that shouldn't do far in the future

00:23:08,049 --> 00:23:14,749
we still don't know like how will it

00:23:12,499 --> 00:23:19,119
work once we will have like a large

00:23:14,749 --> 00:23:22,820
amount of builds at once especially how

00:23:19,119 --> 00:23:24,860
Greenwave will really handle it because

00:23:22,820 --> 00:23:27,769
we were running the code for some time

00:23:24,860 --> 00:23:33,110
but there wasn't like there were no mass

00:23:27,769 --> 00:23:34,999
rebuilds or anything like that what we

00:23:33,110 --> 00:23:37,279
would really like to add is the reverse

00:23:34,999 --> 00:23:38,840
dependency testing which was one of the

00:23:37,279 --> 00:23:40,460
things I was talking about in the

00:23:38,840 --> 00:23:41,080
beginning why we would actually want to

00:23:40,460 --> 00:23:44,989
do that

00:23:41,080 --> 00:23:48,200
for example once your package would

00:23:44,989 --> 00:23:51,769
break your dependencies so that it's the

00:23:48,200 --> 00:23:55,070
problem of the person who broke the

00:23:51,769 --> 00:23:59,869
dependency for people like downstream of

00:23:55,070 --> 00:24:03,739
him and not for all of the people who

00:23:59,869 --> 00:24:08,080
use it like if you disagree shouted us

00:24:03,739 --> 00:24:08,080
before we try to implement it I guess

00:24:17,590 --> 00:24:25,690
yeah we are starting to discuss if we

00:24:21,790 --> 00:24:31,470
could enable some sort of either compose

00:24:25,690 --> 00:24:31,470
or destroy level tests as well and

00:24:32,160 --> 00:24:37,810
because I'm not as familiar like how far

00:24:35,290 --> 00:24:42,490
any of these are if you have better

00:24:37,810 --> 00:24:45,850
ideas on Sunday there should be CI

00:24:42,490 --> 00:24:48,070
special interview workshop so there is

00:24:45,850 --> 00:24:52,110
where you can have your voice heard or

00:24:48,070 --> 00:24:52,110
ask us more questions

00:24:58,380 --> 00:25:04,510
second power the this is like laughing

00:25:01,539 --> 00:25:07,510
I'm working on right now with pingu is

00:25:04,510 --> 00:25:10,779
we are not a certain like how the thing

00:25:07,510 --> 00:25:14,799
actually works in production so we are

00:25:10,779 --> 00:25:17,049
building camera testing suit just the

00:25:14,799 --> 00:25:20,650
small suit so that we would always see

00:25:17,049 --> 00:25:23,110
for our ly really simple dummy packages

00:25:20,650 --> 00:25:25,510
that we created that have almost no

00:25:23,110 --> 00:25:29,590
coated content but just to see that

00:25:25,510 --> 00:25:34,200
these are able to go through all of the

00:25:29,590 --> 00:25:37,450
pipeline that all of the systems

00:25:34,200 --> 00:25:39,850
communicate each other and respond so

00:25:37,450 --> 00:25:42,220
sort of really lightweight happy path

00:25:39,850 --> 00:25:44,200
end to end testing we could run in

00:25:42,220 --> 00:25:47,350
regular intervals

00:25:44,200 --> 00:25:51,419
Pingu already uses this for debugging

00:25:47,350 --> 00:25:54,720
but we want to go one step further and

00:25:51,419 --> 00:25:58,750
have it being run periodically and

00:25:54,720 --> 00:26:00,580
reporting so that we know before our

00:25:58,750 --> 00:26:03,450
packagers now once this thing is

00:26:00,580 --> 00:26:03,450
actually broken

00:26:03,659 --> 00:26:16,149
second thing is we'd like to improve

00:26:07,649 --> 00:26:21,210
workflow for mass rebuilds in the first

00:26:16,149 --> 00:26:24,520
iteration of our single build what

00:26:21,210 --> 00:26:27,100
happens is that in the end we would be

00:26:24,520 --> 00:26:29,649
waiting all right the Robo signature is

00:26:27,100 --> 00:26:32,289
sign our package but if we would do like

00:26:29,649 --> 00:26:35,289
a mass rebuild that could mean there are

00:26:32,289 --> 00:26:39,419
other packages in waiting to be signed

00:26:35,289 --> 00:26:42,460
and from the point of view of the user

00:26:39,419 --> 00:26:46,600
it looks like nothing works and

00:26:42,460 --> 00:26:50,169
everything is stuck now once we move the

00:26:46,600 --> 00:26:54,190
alright create update relatively early

00:26:50,169 --> 00:26:57,520
in the process in bori bori can become

00:26:54,190 --> 00:27:00,789
kind of this source of truth where you

00:26:57,520 --> 00:27:04,570
would see where in the process the thing

00:27:00,789 --> 00:27:06,119
is so you can at least shout at us it's

00:27:04,570 --> 00:27:08,999
stuck there and

00:27:06,119 --> 00:27:16,189
just it looks like nothing's happening

00:27:08,999 --> 00:27:19,559
so with this we could be able to trigger

00:27:16,189 --> 00:27:21,299
mass rebuilds in a way that wouldn't be

00:27:19,559 --> 00:27:27,899
just horrible pain for everybody

00:27:21,299 --> 00:27:30,209
involved but we are not yet sure what

00:27:27,899 --> 00:27:35,279
would be the impacts but it's something

00:27:30,209 --> 00:27:39,719
that is on our roadmap so this will

00:27:35,279 --> 00:27:48,899
certainly not be done if we need to do

00:27:39,719 --> 00:27:50,699
like the next mass rebuild but we need

00:27:48,899 --> 00:27:52,939
something we really want to work on to

00:27:50,699 --> 00:27:52,939
solve

00:27:56,610 --> 00:28:06,929
okay so the surprise but think who was

00:28:01,980 --> 00:28:09,960
talking about in the beginning was you

00:28:06,929 --> 00:28:13,140
can do on demand side tax you might have

00:28:09,960 --> 00:28:17,390
noticed that during the multi bills we

00:28:13,140 --> 00:28:17,390
are creating side tags left and right

00:28:18,710 --> 00:28:30,809
and the surprise is you can do this for

00:28:24,690 --> 00:28:33,059
stable releases not only rawhide which

00:28:30,809 --> 00:28:38,929
means that that Patrick chain belt

00:28:33,059 --> 00:28:42,559
should work in stable releases like with

00:28:38,929 --> 00:28:49,289
stable releases as well the difference

00:28:42,559 --> 00:28:54,320
is that for rawhide the stable tag will

00:28:49,289 --> 00:28:59,340
be removed when the update goes stable

00:28:54,320 --> 00:29:03,779
for stable release type side tag will be

00:28:59,340 --> 00:29:06,720
deleted once you create the update so if

00:29:03,779 --> 00:29:11,760
you need to edit the update or need to

00:29:06,720 --> 00:29:14,279
add a build then you go the same way is

00:29:11,760 --> 00:29:20,610
you worry used to before you had this

00:29:14,279 --> 00:29:23,280
available okay

00:29:20,610 --> 00:29:25,410
that was quick I don't know what thing

00:29:23,280 --> 00:29:29,220
who wanted to talk about for 30 more

00:29:25,410 --> 00:29:31,560
minutes but if you have questions to ask

00:29:29,220 --> 00:30:05,430
and there are people in the audience

00:29:31,560 --> 00:30:07,410
that should be able to answer so so you

00:30:05,430 --> 00:30:10,970
heard the question you answer I will

00:30:07,410 --> 00:30:10,970
then repeat it for the microphone

00:30:52,910 --> 00:31:00,059
okay so to repeat the question was all

00:30:57,720 --> 00:31:01,980
right version depend reverse dependency

00:31:00,059 --> 00:31:04,740
testing it can't come soon enough when

00:31:01,980 --> 00:31:07,350
will you have it and the answer is we

00:31:04,740 --> 00:31:10,080
really need everybody or most people

00:31:07,350 --> 00:31:13,380
using regular tests for just their

00:31:10,080 --> 00:31:17,299
packages first so that we can actually

00:31:13,380 --> 00:31:19,710
utilize that to create reverse

00:31:17,299 --> 00:31:42,570
dependency testing that would actually

00:31:19,710 --> 00:31:44,880
make sense but I think this is actually

00:31:42,570 --> 00:31:49,140
the sort of discussion that would be

00:31:44,880 --> 00:31:51,900
really great for the workshop for CIC

00:31:49,140 --> 00:31:53,549
yeah no I'm just want to really

00:31:51,900 --> 00:31:55,909
advertise it so that more people can

00:31:53,549 --> 00:31:55,909
know

00:32:28,740 --> 00:32:35,770
okay so just to reiterate we are not

00:32:32,530 --> 00:32:38,020
actually being blocked on that we still

00:32:35,770 --> 00:32:42,940
want to progress the reverse dependency

00:32:38,020 --> 00:32:46,150
testing even if there are like there is

00:32:42,940 --> 00:32:49,060
no like full coverage or anything but we

00:32:46,150 --> 00:32:51,730
still are counting on packager

00:32:49,060 --> 00:32:56,040
involvement so that it actually makes

00:32:51,730 --> 00:32:56,040
sense all right Adam in the back

00:33:00,460 --> 00:33:02,460
Oh

00:33:22,670 --> 00:33:25,819
[Music]

00:33:30,470 --> 00:33:33,640
[Music]

00:34:01,080 --> 00:34:04,300
[Music]

00:34:07,780 --> 00:34:16,179
okay so I wonder if I yeah no no I

00:34:13,070 --> 00:34:19,340
wonder if I suggest how many of you like

00:34:16,179 --> 00:34:23,240
you know your staff nails said something

00:34:19,340 --> 00:34:25,399
so if I just invite you over so that you

00:34:23,240 --> 00:34:31,810
can speak to the mic so that we have

00:34:25,399 --> 00:34:31,810
this saved for posterity okay

00:34:55,560 --> 00:34:58,639
[Music]

00:35:07,880 --> 00:35:23,760
there are competing okay good point

00:35:22,260 --> 00:35:38,610
question is this is something that

00:35:23,760 --> 00:35:39,210
should be an issue in our github come

00:35:38,610 --> 00:35:40,770
closer

00:35:39,210 --> 00:35:44,780
microphone is a year we've been mostly

00:35:40,770 --> 00:35:47,760
built gating we really like tease you

00:35:44,780 --> 00:35:49,380
tempt you to put everything to do in one

00:35:47,760 --> 00:35:53,600
big site egg and just merge it as

00:35:49,380 --> 00:35:56,280
monthly but this thing is similar as

00:35:53,600 --> 00:35:58,560
what you call feature branch development

00:35:56,280 --> 00:36:00,930
to own the source code so you create a

00:35:58,560 --> 00:36:02,700
huge branch with all the changes and of

00:36:00,930 --> 00:36:05,730
course it conflicts with a master when

00:36:02,700 --> 00:36:08,420
we try to put it there so this conflicts

00:36:05,730 --> 00:36:14,600
they're going to happen and so please

00:36:08,420 --> 00:36:17,640
please do not use very many multi built

00:36:14,600 --> 00:36:18,660
builds in one site egg unless you really

00:36:17,640 --> 00:36:21,900
really need it

00:36:18,660 --> 00:36:23,790
so this smaller we change you do the

00:36:21,900 --> 00:36:27,120
better you make it for everyone don't

00:36:23,790 --> 00:36:29,100
over over bundle things which you try to

00:36:27,120 --> 00:36:31,230
push for the gate because it's going to

00:36:29,100 --> 00:36:32,880
be complicated but yeah the local

00:36:31,230 --> 00:36:36,900
mechanism should be a feature request

00:36:32,880 --> 00:36:39,020
for this whole system so it's I think it

00:36:36,900 --> 00:36:40,910
could be implemented like what

00:36:39,020 --> 00:36:44,900
when you do felt package requests

00:36:40,910 --> 00:36:46,850
SciTech for something and try to submit

00:36:44,900 --> 00:36:48,830
new package to the SciTech it can say

00:36:46,850 --> 00:36:51,740
something like you know this package is

00:36:48,830 --> 00:36:53,930
already in free open side tax and you

00:36:51,740 --> 00:36:56,090
are going to have a conflict but but

00:36:53,930 --> 00:36:58,730
really well it's important not to

00:36:56,090 --> 00:37:01,760
overuse this multi-multi package feature

00:36:58,730 --> 00:37:04,970
don't don't bundle too much otherwise

00:37:01,760 --> 00:37:09,160
miss Woking McCain will just again it

00:37:04,970 --> 00:37:09,160
will just stop you from doing your work

00:37:21,010 --> 00:37:25,910
but mastery bills are different from us

00:37:23,510 --> 00:37:27,680
repeals you kind of can denounce it and

00:37:25,910 --> 00:37:30,140
you say like you know we must review

00:37:27,680 --> 00:37:32,360
today please don't do you built until we

00:37:30,140 --> 00:37:34,880
finish and this is like a district-wide

00:37:32,360 --> 00:37:37,340
action but if you start using the site

00:37:34,880 --> 00:37:40,070
text or semi must rebuild without

00:37:37,340 --> 00:37:41,570
announcing it without collaborating with

00:37:40,070 --> 00:37:45,880
other people when you get into this

00:37:41,570 --> 00:37:45,880
complex situation yeah it's going to be

00:37:46,950 --> 00:37:53,429
[Music]

00:37:53,780 --> 00:38:03,050
we just rebuild Apache cheese fish

00:37:56,140 --> 00:38:09,310
happens to be using providing for oh no

00:38:03,050 --> 00:38:09,310
no I'm not saying it's a good

00:38:22,300 --> 00:38:25,479
[Music]

00:38:58,750 --> 00:39:14,530
I look over because maybe want one thing

00:39:11,530 --> 00:39:17,770
to add if we talk so you solve it Vera

00:39:14,530 --> 00:39:19,540
look 10 services tipton different

00:39:17,770 --> 00:39:21,340
services participating in the home

00:39:19,540 --> 00:39:22,900
gating infrastructure and when you're

00:39:21,340 --> 00:39:25,270
working with and you will have a

00:39:22,900 --> 00:39:27,880
feedback like this one and you're unsure

00:39:25,270 --> 00:39:30,880
like to which service based feedback

00:39:27,880 --> 00:39:32,800
actually needs to to go and what in this

00:39:30,880 --> 00:39:36,190
whole process who's responsible for what

00:39:32,800 --> 00:39:40,180
so we have a catch-all back tracker

00:39:36,190 --> 00:39:43,950
which is in Peru or it's Fedora CI 15 or

00:39:40,180 --> 00:39:46,540
- CI project and there is a general

00:39:43,950 --> 00:39:49,690
sub-project and Fedora CM project where

00:39:46,540 --> 00:39:52,150
you can file feedback like this and when

00:39:49,690 --> 00:39:54,280
we reroute it to the project which is

00:39:52,150 --> 00:39:55,960
responsible for this whole thing so if

00:39:54,280 --> 00:39:58,720
you're unsure where to file B issue

00:39:55,960 --> 00:40:02,140
regarding gating NCI try this fedora see

00:39:58,720 --> 00:40:06,900
I slept in general at procore and we

00:40:02,140 --> 00:40:06,900
find a way to - we treat people

00:40:09,000 --> 00:40:12,650
okay more questions

00:40:16,190 --> 00:40:22,920
one more announcement awesome so you saw

00:40:20,430 --> 00:40:25,289
this gating process is what happens

00:40:22,920 --> 00:40:27,660
after you build the package after you

00:40:25,289 --> 00:40:31,109
merge and submit a built and it already

00:40:27,660 --> 00:40:34,200
goes half a cup the way there and we

00:40:31,109 --> 00:40:37,170
know it sometimes it's very annoying to

00:40:34,200 --> 00:40:39,450
like have your package full we pack as

00:40:37,170 --> 00:40:42,029
we'll be done with all the version bumps

00:40:39,450 --> 00:40:44,609
that you submit we build with built then

00:40:42,029 --> 00:40:46,859
fails a test and you need to go all the

00:40:44,609 --> 00:40:50,250
way back and do redo the whole thing

00:40:46,859 --> 00:40:52,140
from front from beginning so to ease

00:40:50,250 --> 00:40:54,510
this thing there is another possibility

00:40:52,140 --> 00:40:58,380
to run tests on your packages which is

00:40:54,510 --> 00:41:01,680
pull request testing and today in this

00:40:58,380 --> 00:41:05,490
same room where we'll be Zulu talk by

00:41:01,680 --> 00:41:07,470
Fabian who will tell you how you can

00:41:05,490 --> 00:41:09,150
actually test packages before you merge

00:41:07,470 --> 00:41:12,450
them into master and before you do a

00:41:09,150 --> 00:41:14,720
full process for this package but let's

00:41:12,450 --> 00:41:17,910
get your feedback early so you can

00:41:14,720 --> 00:41:20,930
easily change something in the package

00:41:17,910 --> 00:41:20,930
before it goes

00:41:27,690 --> 00:41:36,730
in that case any more announcements okay

00:41:35,080 --> 00:41:39,430
if there are no more questions are no

00:41:36,730 --> 00:41:42,490
more announcements there is no reason to

00:41:39,430 --> 00:41:46,300
not let you go for a coffee so thank you

00:41:42,490 --> 00:41:49,920
for your attention I again apologize for

00:41:46,300 --> 00:41:54,760
Pingu not being here but these hands is

00:41:49,920 --> 00:42:03,399
regards and hopefully should get else

00:41:54,760 --> 00:42:03,399

YouTube URL: https://www.youtube.com/watch?v=d4kxRWXTb5k


