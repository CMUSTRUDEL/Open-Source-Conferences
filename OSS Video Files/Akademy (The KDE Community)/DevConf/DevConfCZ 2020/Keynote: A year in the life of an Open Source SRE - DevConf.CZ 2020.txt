Title: Keynote: A year in the life of an Open Source SRE - DevConf.CZ 2020
Publication date: 2020-03-25
Playlist: DevConfCZ 2020
Description: 
	Speakers: Jeremy Eder, Karanbir Singh

The path to Red Hat-as-a-Service.
Red Hat does managed services. We do DevOps in the style of the Google SRE Book. We’re a decent sized and growing org that supports customers 24/7. &nbsp;Our team is at the forefront of operationalizing OpenShift 4’s revolutionary set of capabilities, and are a way-to-market for many of Red Hat’s newest portfolio offerings.

As a company founded on Open Source principals, Red Hat’s SRE have a unique point of view around what it takes to actually operate and SLA open source software. &nbsp;In this talk, Red Hat’s managed services architects will discuss what it takes to write truly operable open source software. &nbsp;From fostering an observability-first mentality and feedback-loop driven development, to Operators as SRE force-multipliers and the changing role of CI/CD in a cloud-native world, we’ll pull back the curtain and walk through lessons learned over the last year.

[ https://sched.co/YSjv ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,420 --> 00:00:08,570
welcome everyone on DEFCON 20 tanti it's

00:00:05,029 --> 00:00:13,310
the 12th annual conference that we're

00:00:08,570 --> 00:00:16,609
been doing here for way too long I'm

00:00:13,310 --> 00:00:19,070
glad to see some old faces here friends

00:00:16,609 --> 00:00:21,199
also a lot of new people who has never

00:00:19,070 --> 00:00:22,910
been to the conference so let's I

00:00:21,199 --> 00:00:25,070
started with this quick show of hands

00:00:22,910 --> 00:00:28,130
for how many of you this is the first

00:00:25,070 --> 00:00:33,830
time you're attending DEFCON that's

00:00:28,130 --> 00:00:35,930
that's a quite a lot of people yeah okay

00:00:33,830 --> 00:00:37,700
that's that's good because I have few

00:00:35,930 --> 00:00:40,160
things about DEFCON prepared here and I

00:00:37,700 --> 00:00:42,230
can go through it now it's awesome maybe

00:00:40,160 --> 00:00:44,390
I'll try one more question like this for

00:00:42,230 --> 00:00:56,180
how many of you has been to every single

00:00:44,390 --> 00:00:56,750
DEFCON so far Wow cool so first thing

00:00:56,180 --> 00:00:59,330
first

00:00:56,750 --> 00:01:01,970
DEFCON what is it about you you're

00:00:59,330 --> 00:01:04,430
probably here to listen to some great

00:01:01,970 --> 00:01:05,329
talks and and interesting presentations

00:01:04,430 --> 00:01:08,240
and things like this

00:01:05,329 --> 00:01:09,619
but I want to remind you few things how

00:01:08,240 --> 00:01:11,299
much did you pay for the ticket

00:01:09,619 --> 00:01:14,689
what's what's the price on the black

00:01:11,299 --> 00:01:16,490
market these days let's put it this way

00:01:14,689 --> 00:01:18,679
if you paid zero for the ticket you're

00:01:16,490 --> 00:01:21,530
automatically becoming a volunteer here

00:01:18,679 --> 00:01:22,789
helping with the conference so that's

00:01:21,530 --> 00:01:24,799
that's the whole notion of the

00:01:22,789 --> 00:01:26,840
conference there there's pretty much one

00:01:24,799 --> 00:01:28,520
person who's been paid for organizing

00:01:26,840 --> 00:01:30,950
this thing but the whole thing is

00:01:28,520 --> 00:01:33,560
organized by a group of roughly hundred

00:01:30,950 --> 00:01:35,119
volunteers you can actually recognize

00:01:33,560 --> 00:01:37,909
them because they have this nice black

00:01:35,119 --> 00:01:39,380
hoodies around here well thanks for

00:01:37,909 --> 00:01:43,670
standing up and showing the duty to

00:01:39,380 --> 00:01:46,100
everyone and that's that's one thing I

00:01:43,670 --> 00:01:48,560
want to ask you about if you if you see

00:01:46,100 --> 00:01:50,990
something if you have some questions if

00:01:48,560 --> 00:01:52,700
you need some help these people are here

00:01:50,990 --> 00:01:54,609
to help so these are the black hoodies

00:01:52,700 --> 00:01:58,609
people the grey who these people are

00:01:54,609 --> 00:02:01,060
presenters and I want to basically

00:01:58,609 --> 00:02:03,729
remind you that this is your opportunity

00:02:01,060 --> 00:02:06,920
to talk to them give them feedback

00:02:03,729 --> 00:02:08,869
socialize with them so keep in mind that

00:02:06,920 --> 00:02:11,540
these people know a lot about their

00:02:08,869 --> 00:02:13,090
subject matter and you should talk to

00:02:11,540 --> 00:02:14,980
them for sure

00:02:13,090 --> 00:02:17,650
there's one more important thing about

00:02:14,980 --> 00:02:19,540
the speakers when we created the whole

00:02:17,650 --> 00:02:22,540
schedule the whole agenda we

00:02:19,540 --> 00:02:26,019
intentionally try to mix a first-time

00:02:22,540 --> 00:02:27,879
speakers and presenters who are well

00:02:26,019 --> 00:02:32,380
established and who's been presenting on

00:02:27,879 --> 00:02:34,750
every single DEFCON fright then so keep

00:02:32,380 --> 00:02:36,550
that in mind please give these people

00:02:34,750 --> 00:02:38,920
feedback talk to them after the

00:02:36,550 --> 00:02:40,900
presentation talk to them about how

00:02:38,920 --> 00:02:42,220
they're did with their presentation and

00:02:40,900 --> 00:02:44,500
what they can improve and things like

00:02:42,220 --> 00:02:46,269
this again for a lot of them this is the

00:02:44,500 --> 00:02:48,370
first time they are talking in front of

00:02:46,269 --> 00:02:51,489
an audience like this and it's it's a

00:02:48,370 --> 00:02:54,730
brand new experience for them there's

00:02:51,489 --> 00:02:58,090
going to be roughly 1,700 attendees here

00:02:54,730 --> 00:03:00,760
so that's quite a lot of people for the

00:02:58,090 --> 00:03:02,769
keynotes we have to apologize but the

00:03:00,760 --> 00:03:06,400
streaming doesn't work I won't mention

00:03:02,769 --> 00:03:07,780
why so we only have this room we were

00:03:06,400 --> 00:03:10,180
planning to have the rooms downstairs

00:03:07,780 --> 00:03:12,400
available as well so for the keynote

00:03:10,180 --> 00:03:14,440
we're allowed to have this many people

00:03:12,400 --> 00:03:16,510
in this room but for any other

00:03:14,440 --> 00:03:19,269
presentation we're only allowed to have

00:03:16,510 --> 00:03:20,920
the people sitting in the room not

00:03:19,269 --> 00:03:23,500
standing or sitting on the stairs so

00:03:20,920 --> 00:03:25,540
please keep that in mind the session

00:03:23,500 --> 00:03:27,400
chairs the volunteers will always remind

00:03:25,540 --> 00:03:28,900
you the room is already full and will

00:03:27,400 --> 00:03:32,049
guide you to other presentations that

00:03:28,900 --> 00:03:35,920
are not that full so please respect them

00:03:32,049 --> 00:03:37,840
and that matter what else I already

00:03:35,920 --> 00:03:40,150
mentioned give us a feedback that there

00:03:37,840 --> 00:03:43,030
are also feedback forms the QR codes are

00:03:40,150 --> 00:03:44,290
somewhere printed around this venue so

00:03:43,030 --> 00:03:46,660
tell us what you think about the

00:03:44,290 --> 00:03:49,389
conference there's a telegram group for

00:03:46,660 --> 00:03:51,670
all the attendees so you can share your

00:03:49,389 --> 00:03:54,370
feedback there as well and there's a

00:03:51,670 --> 00:04:00,250
Twitter tag DEFCON 4 underscore under

00:03:54,370 --> 00:04:02,470
what is the thing underscore sees that

00:04:00,250 --> 00:04:04,630
it's written somewhere around here so

00:04:02,470 --> 00:04:07,540
use that for sharing pictures sharing

00:04:04,630 --> 00:04:10,930
your thoughts we're watching that we'll

00:04:07,540 --> 00:04:13,690
be answering questions talking about

00:04:10,930 --> 00:04:15,940
sharing stuff this is still University

00:04:13,690 --> 00:04:18,940
y5 so I can guarantee you it's going to

00:04:15,940 --> 00:04:22,000
be a bit flaky so keep that in mind of

00:04:18,940 --> 00:04:24,669
course what else there'll be some

00:04:22,000 --> 00:04:27,289
interesting events happening so as you

00:04:24,669 --> 00:04:28,970
probably know there's a party tomorrow

00:04:27,289 --> 00:04:32,990
the tickets will be available tomorrow

00:04:28,970 --> 00:04:34,699
right and we don't want to give you the

00:04:32,990 --> 00:04:37,849
tickets ahead of time you still have to

00:04:34,699 --> 00:04:40,610
come to the conference and pay attention

00:04:37,849 --> 00:04:41,780
to the right time and it says it's going

00:04:40,610 --> 00:04:45,830
to be announced that the tickets are

00:04:41,780 --> 00:04:47,539
available so keep that in mind and the

00:04:45,830 --> 00:04:49,190
last session of the conference it's

00:04:47,539 --> 00:04:51,590
becoming already a tradition that we'll

00:04:49,190 --> 00:04:54,470
be doing this trivia crease and we'll be

00:04:51,590 --> 00:04:56,210
handing out some interesting prizes so

00:04:54,470 --> 00:04:59,659
make sure you stay here till the very

00:04:56,210 --> 00:05:04,520
last session on Sunday if you do you'll

00:04:59,659 --> 00:05:07,610
get something for that what else one

00:05:04,520 --> 00:05:10,069
thing that I have to do for sure is I

00:05:07,610 --> 00:05:12,409
need to thank the University here so

00:05:10,069 --> 00:05:14,690
we're using this beautiful venue again

00:05:12,409 --> 00:05:16,669
this year and I we promise the

00:05:14,690 --> 00:05:19,729
university that a will will return it

00:05:16,669 --> 00:05:22,729
back in the same shape as we got it so

00:05:19,729 --> 00:05:25,879
please help us please don't bring any

00:05:22,729 --> 00:05:28,879
food into the rooms please if you see

00:05:25,879 --> 00:05:31,849
something broken something not working

00:05:28,879 --> 00:05:33,969
let us know about it immediately because

00:05:31,849 --> 00:05:36,919
we have to deal with it and solve it

00:05:33,969 --> 00:05:40,069
which reminds me we're trying to be a

00:05:36,919 --> 00:05:42,500
little more eco-friendly this time so we

00:05:40,069 --> 00:05:45,740
have these beautiful cups that you can

00:05:42,500 --> 00:05:47,229
get in front of the at the reception

00:05:45,740 --> 00:05:50,569
basically where the coffee stand is

00:05:47,229 --> 00:05:52,880
please keep in mind that there's one cup

00:05:50,569 --> 00:05:54,800
per person I've already seen some people

00:05:52,880 --> 00:05:56,900
getting more of them there's just one

00:05:54,800 --> 00:06:00,620
really per person and reuse it as much

00:05:56,900 --> 00:06:04,490
as you can so we don't produce a huge

00:06:00,620 --> 00:06:06,289
amount of waste here what else I think

00:06:04,490 --> 00:06:10,069
that's that's pretty much it what I have

00:06:06,289 --> 00:06:12,110
here maybe one more thing different than

00:06:10,069 --> 00:06:14,300
last year we have the ventana' coffee

00:06:12,110 --> 00:06:16,639
shop open this is across the street from

00:06:14,300 --> 00:06:18,949
the main entrance so you can go there as

00:06:16,639 --> 00:06:20,900
well and you've probably seen some food

00:06:18,949 --> 00:06:22,759
trucks that are already here on that on

00:06:20,900 --> 00:06:24,770
the main square and there's one in the

00:06:22,759 --> 00:06:27,409
back as well there are four in the back

00:06:24,770 --> 00:06:31,729
something like that all right

00:06:27,409 --> 00:06:33,319
I don't get your sign language sorry the

00:06:31,729 --> 00:06:35,240
point is that there are food trucks all

00:06:33,319 --> 00:06:37,099
over the place and if you use that small

00:06:35,240 --> 00:06:38,060
town over there there's a partner in

00:06:37,099 --> 00:06:39,889
wealth in the back and there are

00:06:38,060 --> 00:06:41,009
probably some more food trucks and and

00:06:39,889 --> 00:06:43,830
you can always go

00:06:41,009 --> 00:06:47,759
and grab some food I think that's pretty

00:06:43,830 --> 00:06:48,839
much it so enjoy the conference enjoy

00:06:47,759 --> 00:06:51,059
the great keynotes

00:06:48,839 --> 00:06:53,419
I'm gonna talk quickly about the

00:06:51,059 --> 00:06:55,830
keynotes we've picked the keynotes

00:06:53,419 --> 00:06:57,960
by looking basically at some interesting

00:06:55,830 --> 00:06:59,639
trends and interesting technologies so

00:06:57,960 --> 00:07:02,909
today it's going to be an interesting

00:06:59,639 --> 00:07:05,279
trend that is influencing most of the IT

00:07:02,909 --> 00:07:08,309
and software development so this is

00:07:05,279 --> 00:07:09,930
going to be Paul KB and and Jeremy you

00:07:08,309 --> 00:07:12,960
guys are all distinguished engineers

00:07:09,930 --> 00:07:15,210
Paul you're not your principal engineer

00:07:12,960 --> 00:07:17,729
all right so the distinguished engineer

00:07:15,210 --> 00:07:20,039
for me is those are basically the people

00:07:17,729 --> 00:07:23,129
I usually sit and quietly listen to

00:07:20,039 --> 00:07:25,229
because they have tons of experience and

00:07:23,129 --> 00:07:28,559
I know Jeremy has a lot of experience

00:07:25,229 --> 00:07:30,990
with running quadrille that come open

00:07:28,559 --> 00:07:33,599
chief online as well right and things

00:07:30,990 --> 00:07:35,209
like this KB has a lot of experience in

00:07:33,599 --> 00:07:37,529
CentOS running these centralized

00:07:35,209 --> 00:07:41,610
infrastructure and we know each other

00:07:37,529 --> 00:07:43,559
for Ag sword so I think this is going to

00:07:41,610 --> 00:07:44,969
be great you know tomorrow we'll be

00:07:43,559 --> 00:07:47,550
talking about some AI and machine

00:07:44,969 --> 00:07:49,289
learning topics and then on Sunday we

00:07:47,550 --> 00:07:51,479
have an interesting presentation from

00:07:49,289 --> 00:07:55,159
Wesley which is more on the soft skill

00:07:51,479 --> 00:07:57,990
side so interesting keynotes all them

00:07:55,159 --> 00:08:00,330
enjoy them and again sure share of

00:07:57,990 --> 00:08:03,209
feedback ask questions these guys so

00:08:00,330 --> 00:08:06,019
that's it it's all up to you guys now

00:08:03,209 --> 00:08:06,019
thank you

00:08:10,510 --> 00:08:15,110
all right guys can you can you hear me

00:08:12,680 --> 00:08:16,790
yeah so I think I think the only

00:08:15,110 --> 00:08:18,860
distinguished engineer here is actually

00:08:16,790 --> 00:08:21,620
Jeremy I like to think of myself as more

00:08:18,860 --> 00:08:23,060
of an extinguished engineer and Paul

00:08:21,620 --> 00:08:26,000
actually represents an engineer who does

00:08:23,060 --> 00:08:27,890
stuff right but Radek again I don't know

00:08:26,000 --> 00:08:29,330
has he left the building

00:08:27,890 --> 00:08:31,910
thank you thank you for having us here

00:08:29,330 --> 00:08:35,540
it's it's great to come across we're a

00:08:31,910 --> 00:08:36,110
very young organization let me see if

00:08:35,540 --> 00:08:46,480
this works

00:08:36,110 --> 00:08:46,480
yeah there we go maybe No

00:08:53,540 --> 00:09:06,570
so while we are see that yeah there we

00:09:04,079 --> 00:09:07,980
go so the SS Evans delivery organization

00:09:06,570 --> 00:09:11,250
right so we're a young we're a young

00:09:07,980 --> 00:09:12,899
group we're about a year and a half in

00:09:11,250 --> 00:09:14,370
the process so I think we are sort of

00:09:12,899 --> 00:09:15,899
you know maturing well full-bodied

00:09:14,370 --> 00:09:18,990
hopefully you know and soon we'll taste

00:09:15,899 --> 00:09:20,430
well as well we execute as a part of an

00:09:18,990 --> 00:09:21,389
engineering group we have a part of pnt

00:09:20,430 --> 00:09:23,519
we very much

00:09:21,389 --> 00:09:25,230
engineering engineering focused full

00:09:23,519 --> 00:09:26,730
function so we do we do our own quality

00:09:25,230 --> 00:09:28,529
work we do our own reliability work we

00:09:26,730 --> 00:09:30,420
do our own development work we do our

00:09:28,529 --> 00:09:31,800
own service and support for our own

00:09:30,420 --> 00:09:34,110
infrastructure and for our tenants as

00:09:31,800 --> 00:09:36,209
well but at the heart of the whole piece

00:09:34,110 --> 00:09:38,820
is that we are what we like to think as

00:09:36,209 --> 00:09:41,670
a modern practices driven service

00:09:38,820 --> 00:09:42,930
organization right we thoroughly enjoy

00:09:41,670 --> 00:09:44,670
what we do we are very excited about

00:09:42,930 --> 00:09:46,290
where we are going and where we being

00:09:44,670 --> 00:09:48,209
able to help RedHat come along with us

00:09:46,290 --> 00:09:51,029
as well and over the course of the next

00:09:48,209 --> 00:09:53,790
45 minutes or so we'll try and share a

00:09:51,029 --> 00:09:55,139
very high-level view of some of I would

00:09:53,790 --> 00:09:56,279
say a very small sliver of the

00:09:55,139 --> 00:09:57,839
interesting things that we're working on

00:09:56,279 --> 00:10:00,149
and I hope you know you guys get

00:09:57,839 --> 00:10:01,139
interested in if you want to know more

00:10:00,149 --> 00:10:02,370
are we going to be here for the next

00:10:01,139 --> 00:10:03,569
three days there's about a dozen other

00:10:02,370 --> 00:10:05,790
people here from the service

00:10:03,569 --> 00:10:10,290
organization feel free to reach out we

00:10:05,790 --> 00:10:12,510
even have stickers so what we've what we

00:10:10,290 --> 00:10:14,790
actually do fundamentally is that we're

00:10:12,510 --> 00:10:17,190
an engineering group that has a primary

00:10:14,790 --> 00:10:18,959
directive which is to figure out what

00:10:17,190 --> 00:10:21,480
running services actually means right

00:10:18,959 --> 00:10:23,069
from how do you develop them how do you

00:10:21,480 --> 00:10:25,290
plan them how do you go to market with a

00:10:23,069 --> 00:10:28,110
with a service how do you lifecycle a

00:10:25,290 --> 00:10:29,819
service how do you support a customer in

00:10:28,110 --> 00:10:32,610
service how do you do very high velocity

00:10:29,819 --> 00:10:34,529
turnover in cloud native patterns using

00:10:32,610 --> 00:10:36,510
modern system you know expectations and

00:10:34,529 --> 00:10:38,160
being able to meet the customers where

00:10:36,510 --> 00:10:40,019
we think the customers are going as the

00:10:38,160 --> 00:10:44,029
next next leapfrog right moving away

00:10:40,019 --> 00:10:47,399
from static slow-moving product spaces

00:10:44,029 --> 00:10:51,870
the second part of what we're doing is

00:10:47,399 --> 00:10:54,839
that Red Hat has invested extensively in

00:10:51,870 --> 00:10:56,339
the model where we believe that a very

00:10:54,839 --> 00:10:58,529
large portion of our customers are

00:10:56,339 --> 00:11:01,260
invested in hybrid cloud patterns they

00:10:58,529 --> 00:11:03,480
are going to look at multi-faceted

00:11:01,260 --> 00:11:05,010
infrastructure and there is no hybrid

00:11:03,480 --> 00:11:06,230
pattern unless you got a managed service

00:11:05,010 --> 00:11:07,850
as a part of that

00:11:06,230 --> 00:11:09,470
when a customer invests in the fact that

00:11:07,850 --> 00:11:11,300
hey I'm going to use a cloud he's

00:11:09,470 --> 00:11:14,450
already investing in a situation where

00:11:11,300 --> 00:11:15,590
he's agreed that he doesn't have metal

00:11:14,450 --> 00:11:17,660
access he doesn't have physical access

00:11:15,590 --> 00:11:18,980
he doesn't need that physical access in

00:11:17,660 --> 00:11:22,190
order to succeed for his business

00:11:18,980 --> 00:11:23,660
purpose right so we represent the Red

00:11:22,190 --> 00:11:25,190
Hat interface into what that managed

00:11:23,660 --> 00:11:28,010
service would look like and how we would

00:11:25,190 --> 00:11:30,020
deliver Red Hat's product portfolio as a

00:11:28,010 --> 00:11:34,430
service so that we can go complete the

00:11:30,020 --> 00:11:35,840
hybrid hybrid loop how the organization

00:11:34,430 --> 00:11:38,150
is set up we execute across four

00:11:35,840 --> 00:11:40,280
distinct functions we have our platform

00:11:38,150 --> 00:11:42,590
engineering group which is traditionally

00:11:40,280 --> 00:11:45,590
the you know the the more operationally

00:11:42,590 --> 00:11:47,360
focused SRE group they're the guys who

00:11:45,590 --> 00:11:48,740
engaged extensively with the OpenShift

00:11:47,360 --> 00:11:50,420
teams and the other platform teams

00:11:48,740 --> 00:11:52,460
including storage including networking

00:11:50,420 --> 00:11:54,290
including Linux engineering and they

00:11:52,460 --> 00:11:56,060
deliver our open shell dedicated product

00:11:54,290 --> 00:11:58,240
and the Azure Red Hat OpenShift product

00:11:56,060 --> 00:12:01,580
right the base fundamental product

00:11:58,240 --> 00:12:03,710
working across dozens of flavors

00:12:01,580 --> 00:12:05,810
hundreds of clusters thousands and

00:12:03,710 --> 00:12:07,540
thousands of nodes and and doing a

00:12:05,810 --> 00:12:10,040
really good job of it exposing that as a

00:12:07,540 --> 00:12:11,390
as a customer facing product right I'm

00:12:10,040 --> 00:12:14,450
sure most people have heard of open chef

00:12:11,390 --> 00:12:15,920
dedicated here the second layer above

00:12:14,450 --> 00:12:17,240
that is our tenant operations the

00:12:15,920 --> 00:12:18,950
application has sorry team right the

00:12:17,240 --> 00:12:20,750
team that walls go to help talk through

00:12:18,950 --> 00:12:22,790
a little bit they are invested in

00:12:20,750 --> 00:12:24,920
consuming open ship dedicated consuming

00:12:22,790 --> 00:12:27,010
as your Red Hat openshift and Red Hat

00:12:24,920 --> 00:12:29,180
platforms in order to deliver our

00:12:27,010 --> 00:12:31,370
application portfolio above that right

00:12:29,180 --> 00:12:34,550
so think of it as if Red Hat is running

00:12:31,370 --> 00:12:36,260
a SAS if Red Hat is running a managed

00:12:34,550 --> 00:12:38,150
service it is the tenant operations team

00:12:36,260 --> 00:12:40,340
that facilitates that right so they

00:12:38,150 --> 00:12:42,850
consume the platform just as a customer

00:12:40,340 --> 00:12:45,290
would and then deliver above that right

00:12:42,850 --> 00:12:46,550
the third the third layer within the

00:12:45,290 --> 00:12:48,230
organization the third functional piece

00:12:46,550 --> 00:12:49,520
is the service Development Group right

00:12:48,230 --> 00:12:52,130
they are the guys who are building out

00:12:49,520 --> 00:12:54,050
the open chef cluster manager ocm they

00:12:52,130 --> 00:12:55,820
are the people who are building out the

00:12:54,050 --> 00:12:57,640
self-service portal that we then use for

00:12:55,820 --> 00:12:59,990
all of our Tollbooth pieces our

00:12:57,640 --> 00:13:01,640
subscription management open should

00:12:59,990 --> 00:13:03,200
dedicated etcetera right the other guys

00:13:01,640 --> 00:13:04,550
who basically invested in building out

00:13:03,200 --> 00:13:06,470
the tools that are required for other

00:13:04,550 --> 00:13:08,270
groups across Red Hat and for service

00:13:06,470 --> 00:13:09,680
delivery to go succeed right the

00:13:08,270 --> 00:13:12,140
application development piece as it were

00:13:09,680 --> 00:13:14,360
and in the fourth part the fourth group

00:13:12,140 --> 00:13:16,250
that complements the whole stack is our

00:13:14,360 --> 00:13:19,160
emerging technologies and compliance

00:13:16,250 --> 00:13:19,970
group right so I'm going to hand over to

00:13:19,160 --> 00:13:22,129
Jeremy

00:13:19,970 --> 00:13:24,169
to talk to us talk us through what

00:13:22,129 --> 00:13:27,739
reliability engineering is and what our

00:13:24,169 --> 00:13:30,109
interpretation of that looks like thanks

00:13:27,739 --> 00:13:31,759
KB yep so i'm jeremy eater one of

00:13:30,109 --> 00:13:34,489
several of the architects within the

00:13:31,759 --> 00:13:36,169
service delivery group what i wanted to

00:13:34,489 --> 00:13:39,559
share with you today is two things

00:13:36,169 --> 00:13:41,599
first how we defines the primary

00:13:39,559 --> 00:13:44,029
responsibilities of a service

00:13:41,599 --> 00:13:45,919
reliability engineer and then a couple

00:13:44,029 --> 00:13:48,979
of work decay be mentioned that we're

00:13:45,919 --> 00:13:51,409
primarily an engineering group some

00:13:48,979 --> 00:13:54,559
worked examples of cool stuff that we've

00:13:51,409 --> 00:13:56,689
built out of necessity to help operate

00:13:54,559 --> 00:13:57,919
the platforms that were responsible for

00:13:56,689 --> 00:14:00,439
so who's familiar with Maslow's

00:13:57,919 --> 00:14:03,319
hierarchy of needs this is the sre

00:14:00,439 --> 00:14:05,149
hierarchy of needs look at the

00:14:03,319 --> 00:14:07,489
foundation there last time I was at Def

00:14:05,149 --> 00:14:10,639
Con fied did a five minute lightning

00:14:07,489 --> 00:14:12,739
talk on prometheus and observability so

00:14:10,639 --> 00:14:14,629
connecting these two talks fundamentally

00:14:12,739 --> 00:14:16,519
we need to know it is our job to know

00:14:14,629 --> 00:14:19,459
what is happening at all times on a

00:14:16,519 --> 00:14:22,519
platform calling that observability that

00:14:19,459 --> 00:14:23,739
includes monitoring logging tracing so

00:14:22,519 --> 00:14:26,959
forth

00:14:23,739 --> 00:14:28,459
our teams including the well all of our

00:14:26,959 --> 00:14:30,109
s3 teams are involved in incident

00:14:28,459 --> 00:14:32,029
response all it's going to take us

00:14:30,109 --> 00:14:37,579
through a worked example of Incident

00:14:32,029 --> 00:14:40,309
Response and post mortems who's heard of

00:14:37,579 --> 00:14:43,099
the term garbage in garbage out so we

00:14:40,309 --> 00:14:44,869
have we have pipelines that ensure there

00:14:43,099 --> 00:14:47,689
is as little garbage I take that I'm

00:14:44,869 --> 00:14:49,039
saying this lightly and just that the

00:14:47,689 --> 00:14:52,039
stuff going into our production

00:14:49,039 --> 00:14:54,379
environments is as qualified as possible

00:14:52,039 --> 00:14:58,519
and I'll have some examples of how we do

00:14:54,379 --> 00:15:01,399
that how we do that shortly we're

00:14:58,519 --> 00:15:03,919
involved in capacity planning as you can

00:15:01,399 --> 00:15:07,129
imagine if marketing wants to do a push

00:15:03,919 --> 00:15:10,069
for managed service we would need to

00:15:07,129 --> 00:15:12,169
know in advance and be able to know what

00:15:10,069 --> 00:15:13,970
our services are capable of so that we

00:15:12,169 --> 00:15:17,809
can budget for the increase the load

00:15:13,970 --> 00:15:20,179
that might occur everybody in the team

00:15:17,809 --> 00:15:21,979
is a developer at some level I think

00:15:20,179 --> 00:15:23,209
that's one of the key traits here not

00:15:21,979 --> 00:15:24,949
only do you need to know how to use the

00:15:23,209 --> 00:15:27,309
software but you need to know how to fix

00:15:24,949 --> 00:15:30,769
the software or improve the software and

00:15:27,309 --> 00:15:33,500
it all funnels up to our product our

00:15:30,769 --> 00:15:36,620
managed services product so this is what

00:15:33,500 --> 00:15:40,190
each ORS are either tasked to understand

00:15:36,620 --> 00:15:43,460
and to actualize couple of worked

00:15:40,190 --> 00:15:47,870
examples our primary primary cloud right

00:15:43,460 --> 00:15:50,120
now is AWS so if you sign up for an open

00:15:47,870 --> 00:15:52,070
shift dedicated cluster you will get it

00:15:50,120 --> 00:15:54,260
on AWS if you sign up for an arrow

00:15:52,070 --> 00:15:58,640
cluster that will be on Microsoft's

00:15:54,260 --> 00:16:00,710
cloud this example is called we've

00:15:58,640 --> 00:16:02,540
written I think there's over eight or

00:16:00,710 --> 00:16:05,180
nine operators that we've written I

00:16:02,540 --> 00:16:07,070
think there's actually more than that to

00:16:05,180 --> 00:16:08,870
run the platform the first example I've

00:16:07,070 --> 00:16:09,650
got here is an AWS account operator what

00:16:08,870 --> 00:16:13,280
does this guy do

00:16:09,650 --> 00:16:16,540
for security purposes every OSD is in

00:16:13,280 --> 00:16:19,100
its own V PC that's a virtual private

00:16:16,540 --> 00:16:21,650
cloud I think is what it's an eight it's

00:16:19,100 --> 00:16:23,930
an AWS term and this essentially a

00:16:21,650 --> 00:16:26,060
security bucket everything all the

00:16:23,930 --> 00:16:28,460
resources in that V PC

00:16:26,060 --> 00:16:32,450
are scopes you just that account we used

00:16:28,460 --> 00:16:34,460
it for isolation between our tenants how

00:16:32,450 --> 00:16:36,800
do we actualize the creation of those

00:16:34,460 --> 00:16:38,780
accounts we tie them to users and how do

00:16:36,800 --> 00:16:41,780
we stand up clusters within those

00:16:38,780 --> 00:16:43,910
accounts well it turns out that using

00:16:41,780 --> 00:16:45,620
AWS is api's while they're fantastic

00:16:43,910 --> 00:16:47,890
they can be slow and they can be missing

00:16:45,620 --> 00:16:50,300
features that our team actually needs

00:16:47,890 --> 00:16:53,540
for responsiveness we want to make sure

00:16:50,300 --> 00:16:54,530
that clusters can be turned on as

00:16:53,540 --> 00:16:59,270
quickly as possible

00:16:54,530 --> 00:17:02,089
who's installed open chip before okay

00:16:59,270 --> 00:17:04,670
well it takes about 35 minutes sometimes

00:17:02,089 --> 00:17:07,160
longer and even worse if the cloud

00:17:04,670 --> 00:17:09,020
providers having a bad day so what we

00:17:07,160 --> 00:17:11,689
want to do is make sure we our layer is

00:17:09,020 --> 00:17:14,240
as minimal as possible in terms of delay

00:17:11,689 --> 00:17:16,250
so we pre-allocate accounts we actually

00:17:14,240 --> 00:17:18,350
pre provision instances in those

00:17:16,250 --> 00:17:20,870
accounts that kind of warm them so to

00:17:18,350 --> 00:17:23,420
say these are in reaction to behaviors

00:17:20,870 --> 00:17:26,780
we've seen AWS do so for example initial

00:17:23,420 --> 00:17:28,940
instance provisioning in a V PC can be

00:17:26,780 --> 00:17:33,410
delayed if you've got a brand-new fresh

00:17:28,940 --> 00:17:39,160
V PC so we do that we primed those we

00:17:33,410 --> 00:17:41,210
prime those V pcs as a managed service

00:17:39,160 --> 00:17:44,060
over the last couple of years we've

00:17:41,210 --> 00:17:46,280
gotten involved kind of at a little bit

00:17:44,060 --> 00:17:47,390
to level lower level I would say on each

00:17:46,280 --> 00:17:48,770
individual cluster

00:17:47,390 --> 00:17:51,820
what we're trying to do now is bring

00:17:48,770 --> 00:17:54,110
everything up to a self-service

00:17:51,820 --> 00:17:55,910
capability one of the things that the

00:17:54,110 --> 00:17:59,570
AWS account operator is helping us with

00:17:55,910 --> 00:18:01,070
is to allow customers to be able to peer

00:17:59,570 --> 00:18:05,350
what's called peer which is like a VPN

00:18:01,070 --> 00:18:07,280
between their OSD and their internal

00:18:05,350 --> 00:18:08,600
workstations for example their internal

00:18:07,280 --> 00:18:10,490
networks so they can do development

00:18:08,600 --> 00:18:12,790
against OSD without actually going over

00:18:10,490 --> 00:18:14,840
the Internet

00:18:12,790 --> 00:18:16,400
second example if you've installed

00:18:14,840 --> 00:18:20,300
openshift you've seen the self-signed

00:18:16,400 --> 00:18:23,360
certificates that are on the API server

00:18:20,300 --> 00:18:24,560
and that are on the console and that

00:18:23,360 --> 00:18:25,850
makes sense for a product default

00:18:24,560 --> 00:18:27,620
because a lot of our larger customers

00:18:25,850 --> 00:18:29,030
have their own CAS internally or want to

00:18:27,620 --> 00:18:30,560
own their own certificate life cycles

00:18:29,030 --> 00:18:32,270
and so forth for managed services a

00:18:30,560 --> 00:18:34,250
little bit less sense we have an

00:18:32,270 --> 00:18:37,040
operator now that deals with let's

00:18:34,250 --> 00:18:39,350
encrypt I'm sure you've heard of that

00:18:37,040 --> 00:18:41,300
certificate authority what that guy will

00:18:39,350 --> 00:18:42,650
do is go out request certificates lay

00:18:41,300 --> 00:18:44,840
them down on the cluster and I think

00:18:42,650 --> 00:18:46,190
most importantly lifecycle them so that

00:18:44,840 --> 00:18:48,080
we don't ever worry about these things

00:18:46,190 --> 00:18:51,770
getting expired so it will install the

00:18:48,080 --> 00:18:53,360
certs cycle the console operator to kind

00:18:51,770 --> 00:18:55,970
of kick this so that they actually are

00:18:53,360 --> 00:18:57,980
kicked in and yeah so then you have a

00:18:55,970 --> 00:19:00,110
real certificate when you get an open

00:18:57,980 --> 00:19:01,340
ship dedicated cluster right now that's

00:19:00,110 --> 00:19:03,620
the second example of something that

00:19:01,340 --> 00:19:05,750
we've done to improve the product

00:19:03,620 --> 00:19:07,070
experience and I think it's it's

00:19:05,750 --> 00:19:09,250
basically what someone would expect I

00:19:07,070 --> 00:19:12,740
would think out of a managed service

00:19:09,250 --> 00:19:15,260
thirdly application interface I

00:19:12,740 --> 00:19:17,960
mentioned garbage in garbage out well

00:19:15,260 --> 00:19:19,790
that pipeline is encapsulated in a get

00:19:17,960 --> 00:19:22,010
off strip and workflow we called the app

00:19:19,790 --> 00:19:23,900
interface Paul is going to go into it a

00:19:22,010 --> 00:19:24,860
lot more detail I think this may be one

00:19:23,900 --> 00:19:27,140
of the coolest things we're doing right

00:19:24,860 --> 00:19:28,070
now it's certainly very it's very unique

00:19:27,140 --> 00:19:29,990
and forward-looking

00:19:28,070 --> 00:19:31,460
in terms of its in terms of how modern

00:19:29,990 --> 00:19:33,890
it really is so we manage everything

00:19:31,460 --> 00:19:35,870
through this app interface if you want

00:19:33,890 --> 00:19:38,180
to bring on a managed service you will

00:19:35,870 --> 00:19:41,540
you will end up in some kind of service

00:19:38,180 --> 00:19:42,950
delivery get ops flow and there's many

00:19:41,540 --> 00:19:45,440
maybe in the audience they who have

00:19:42,950 --> 00:19:49,670
already engaged us engage with us on on

00:19:45,440 --> 00:19:52,610
an integration in the app interface when

00:19:49,670 --> 00:19:56,900
you put something in there just like

00:19:52,610 --> 00:19:59,660
github there are PR checks and we try

00:19:56,900 --> 00:20:00,970
and keep trying to standardize the PRS

00:19:59,660 --> 00:20:04,270
are coming in in terms of like

00:20:00,970 --> 00:20:06,400
best practices that we learn of are you

00:20:04,270 --> 00:20:08,320
setting requests and limits things like

00:20:06,400 --> 00:20:09,640
that I wish we could enforce POD

00:20:08,320 --> 00:20:11,800
disruption budgets but certain

00:20:09,640 --> 00:20:13,330
applications aren't ready for those so

00:20:11,800 --> 00:20:16,810
we can't really enforce them even though

00:20:13,330 --> 00:20:18,730
they are indeed unknown best practice so

00:20:16,810 --> 00:20:20,260
that's the app interface and again like

00:20:18,730 --> 00:20:25,060
pipe like I said Paula mentioned more

00:20:20,260 --> 00:20:27,460
later the manifest bouncer I was on a

00:20:25,060 --> 00:20:29,830
call with a customer I don't know three

00:20:27,460 --> 00:20:32,290
or four days ago and they were worried

00:20:29,830 --> 00:20:34,090
about their deployment flow and now they

00:20:32,290 --> 00:20:35,710
they actually broke their production

00:20:34,090 --> 00:20:39,370
because the developer emerged some code

00:20:35,710 --> 00:20:41,530
that wasn't didn't have the correct

00:20:39,370 --> 00:20:44,470
syntax in it screw Burnett in an Indiana

00:20:41,530 --> 00:20:47,170
the open chef Jemil deployment llamo I

00:20:44,470 --> 00:20:48,460
should say so well I said well we're

00:20:47,170 --> 00:20:50,700
working on tools we have the same

00:20:48,460 --> 00:20:55,330
problem everybody's got the same problem

00:20:50,700 --> 00:20:58,120
we have a tool for this every time a PR

00:20:55,330 --> 00:20:59,890
hits the app interface it will go

00:20:58,120 --> 00:21:02,860
through a series of PR checks the

00:20:59,890 --> 00:21:05,560
manifest balancer is the the mechanism

00:21:02,860 --> 00:21:06,940
by which those PR checks are executed

00:21:05,560 --> 00:21:10,330
that's a deliverable from the app

00:21:06,940 --> 00:21:11,890
application asari team as well and quite

00:21:10,330 --> 00:21:13,030
honestly this was built for survival too

00:21:11,890 --> 00:21:15,850
we want to make sure that our

00:21:13,030 --> 00:21:20,740
applications are supportable things that

00:21:15,850 --> 00:21:23,380
were on the hook to SLA oh thank you hi

00:21:20,740 --> 00:21:25,840
everyone my name is Paul I'm the team

00:21:23,380 --> 00:21:28,960
lead for the application Azhar a team or

00:21:25,840 --> 00:21:30,880
the APIs are a team for short and based

00:21:28,960 --> 00:21:33,310
out of Oslo so it's nice being able to

00:21:30,880 --> 00:21:40,090
travel to some warmer climates for the

00:21:33,310 --> 00:21:43,270
conference and so as as Jeremy pointed

00:21:40,090 --> 00:21:47,760
out the service delivery org executing a

00:21:43,270 --> 00:21:50,470
layer SRA model so we consume the

00:21:47,760 --> 00:21:53,770
platforms in the way that any customer

00:21:50,470 --> 00:21:56,530
would so this allows us to focus on what

00:21:53,770 --> 00:21:58,480
we need to be focusing on the

00:21:56,530 --> 00:22:00,490
application experience the application

00:21:58,480 --> 00:22:03,130
delivery and also allows us to feedback

00:22:00,490 --> 00:22:07,330
into the platform and possibly predict

00:22:03,130 --> 00:22:12,710
customer requirements internally

00:22:07,330 --> 00:22:14,930
so we do we have a concept called the

00:22:12,710 --> 00:22:17,150
app contract while we engage as a

00:22:14,930 --> 00:22:21,050
customer with the platform the app

00:22:17,150 --> 00:22:23,480
contract defines how the application SRA

00:22:21,050 --> 00:22:28,160
team engages with the services or our

00:22:23,480 --> 00:22:29,870
attendants our customers we defined this

00:22:28,160 --> 00:22:32,030
is a set of structured schemas with

00:22:29,870 --> 00:22:34,370
required fields optional fields defining

00:22:32,030 --> 00:22:36,710
the applications the contacts metadata

00:22:34,370 --> 00:22:39,230
around but also runtime configuration

00:22:36,710 --> 00:22:40,810
and specifics concerning the

00:22:39,230 --> 00:22:43,490
applications themselves

00:22:40,810 --> 00:22:47,600
this means that developers can focus on

00:22:43,490 --> 00:22:50,090
delivering the code while we handle they

00:22:47,600 --> 00:22:52,520
to operations which don't necessarily

00:22:50,090 --> 00:22:55,040
require developer interaction can help

00:22:52,520 --> 00:22:57,680
scale we can cycle your TLS certificates

00:22:55,040 --> 00:22:58,940
we can do a lot of these things that

00:22:57,680 --> 00:23:05,000
need to be done around the edges

00:22:58,940 --> 00:23:06,680
primarily through automation it's yeah

00:23:05,000 --> 00:23:09,290
as I mentioned it then defines the

00:23:06,680 --> 00:23:12,410
service relationship there is a set of

00:23:09,290 --> 00:23:16,010
requirements there is our model supports

00:23:12,410 --> 00:23:17,630
a opinionated specific way of delivering

00:23:16,010 --> 00:23:18,970
an application you get a staged

00:23:17,630 --> 00:23:21,680
environment a production environment

00:23:18,970 --> 00:23:24,500
developed it on the button but you have

00:23:21,680 --> 00:23:29,270
to do your due diligence before you push

00:23:24,500 --> 00:23:31,790
the fount and this is all imports

00:23:29,270 --> 00:23:39,220
through a formal schema so these schemas

00:23:31,790 --> 00:23:48,230
are not just metadata the implementation

00:23:39,220 --> 00:23:49,610
which I'll get to in a moment is is the

00:23:48,230 --> 00:23:52,550
schemas are loaded into a graph QL

00:23:49,610 --> 00:23:55,070
database a graphical instance which

00:23:52,550 --> 00:23:57,440
allows us to query the desired state of

00:23:55,070 --> 00:23:58,820
applications at any given time so we

00:23:57,440 --> 00:24:00,740
have a set of integrations run against

00:23:58,820 --> 00:24:03,380
this data which will continuously

00:24:00,740 --> 00:24:05,300
reconcile this target state of the

00:24:03,380 --> 00:24:07,960
application on the clusters themselves

00:24:05,300 --> 00:24:10,670
or the backing databases or all their

00:24:07,960 --> 00:24:14,960
other things that we deliver access user

00:24:10,670 --> 00:24:16,970
access and the key thing is that if you

00:24:14,960 --> 00:24:19,370
follow our way we will take your s loz

00:24:16,970 --> 00:24:20,810
which we provide your way to define and

00:24:19,370 --> 00:24:23,690
we will make them our

00:24:20,810 --> 00:24:27,470
and we will help you work towards those

00:24:23,690 --> 00:24:29,620
goals so a little bit more on the app

00:24:27,470 --> 00:24:32,810
interface it's the app contract

00:24:29,620 --> 00:24:35,150
implementation it enforces a schema and

00:24:32,810 --> 00:24:38,030
it loads the state into graph QL which

00:24:35,150 --> 00:24:39,560
allows us to reconcile against that and

00:24:38,030 --> 00:24:41,090
it's a github driven workflow the

00:24:39,560 --> 00:24:44,900
schemes themselves living it's the

00:24:41,090 --> 00:24:46,580
developers offered they're merge

00:24:44,900 --> 00:24:52,340
requests into there we will sign off

00:24:46,580 --> 00:24:56,450
merge and it's in production so I'll go

00:24:52,340 --> 00:24:58,490
back actually the I'm gonna run you

00:24:56,450 --> 00:25:02,120
through an incident that we experienced

00:24:58,490 --> 00:25:03,740
a little while back it's I think one of

00:25:02,120 --> 00:25:05,810
many incidents this particular one was

00:25:03,740 --> 00:25:09,170
in a gray area where the service was

00:25:05,810 --> 00:25:12,470
knighted down nor up as such not like

00:25:09,170 --> 00:25:14,450
clearly as an on/off switch but it's not

00:25:12,470 --> 00:25:17,510
the incident itself I want to focus on

00:25:14,450 --> 00:25:19,250
it's the process we went through and how

00:25:17,510 --> 00:25:24,580
we worked through that incident to

00:25:19,250 --> 00:25:28,640
improve our flow so there's a quick

00:25:24,580 --> 00:25:31,520
slide here with with the events that

00:25:28,640 --> 00:25:33,980
transcribed we were made aware of an

00:25:31,520 --> 00:25:37,790
incident affecting cloud read about comm

00:25:33,980 --> 00:25:40,460
and it turned out that they cease was an

00:25:37,790 --> 00:25:45,830
issue with a subcomponent in the single

00:25:40,460 --> 00:25:47,390
sign-on service we were able to identify

00:25:45,830 --> 00:25:49,430
this we were able to through the health

00:25:47,390 --> 00:25:52,700
metrics of the application realize that

00:25:49,430 --> 00:25:54,530
it was operating as it should because it

00:25:52,700 --> 00:25:59,930
was serving existing tokens but new

00:25:54,530 --> 00:26:02,150
logins were worth affected so through

00:25:59,930 --> 00:26:03,560
engaging with Red Hat IT through the

00:26:02,150 --> 00:26:05,480
formalized normal channels we were able

00:26:03,560 --> 00:26:07,610
to restore service pretty quickly this

00:26:05,480 --> 00:26:09,620
all transcribed in about I put 90

00:26:07,610 --> 00:26:12,590
minutes in there with some

00:26:09,620 --> 00:26:15,070
troubleshooting close to an hour it's

00:26:12,590 --> 00:26:15,070
probably true

00:26:15,750 --> 00:26:19,350
and some would probably say that well

00:26:17,430 --> 00:26:20,760
yes okay you've notified the IT

00:26:19,350 --> 00:26:23,970
department that correct the error

00:26:20,760 --> 00:26:26,250
outages mitigated everything's over well

00:26:23,970 --> 00:26:28,350
as we did the RTA work we realized that

00:26:26,250 --> 00:26:30,380
there were a couple of faults in how

00:26:28,350 --> 00:26:36,080
we'd been approaching this this outage

00:26:30,380 --> 00:26:38,370
we had only been troubleshooting the

00:26:36,080 --> 00:26:43,470
dependency the dependent service SSO

00:26:38,370 --> 00:26:50,610
through one of our applications and we

00:26:43,470 --> 00:26:52,710
could have been warned earlier so here's

00:26:50,610 --> 00:26:56,310
an example of an app definition it is

00:26:52,710 --> 00:26:59,070
edited this is not complete and it's

00:26:56,310 --> 00:27:00,660
it's not the full picture I put a couple

00:26:59,070 --> 00:27:04,620
of the I'm not going to go through it in

00:27:00,660 --> 00:27:06,990
detail but what we had in there was that

00:27:04,620 --> 00:27:09,750
we had the dependencies explicitly

00:27:06,990 --> 00:27:11,880
defined as app interface objects because

00:27:09,750 --> 00:27:13,740
we want to know what what dependencies

00:27:11,880 --> 00:27:19,020
what external dependencies your service

00:27:13,740 --> 00:27:23,220
has been able to map out where it's

00:27:19,020 --> 00:27:26,700
works integrates into we also realized

00:27:23,220 --> 00:27:28,470
that we had the monitoring stack our

00:27:26,700 --> 00:27:31,410
observability stack already deployed

00:27:28,470 --> 00:27:36,440
through the app interface doing all the

00:27:31,410 --> 00:27:36,440
monitoring for all our applications and

00:27:37,670 --> 00:27:42,390
that simply meant that we could in the

00:27:41,040 --> 00:27:43,590
dependencies definitions which I

00:27:42,390 --> 00:27:46,170
certainly do not have a slide on we

00:27:43,590 --> 00:27:48,540
could just add a monitoring section and

00:27:46,170 --> 00:27:49,980
then point the monitoring reconciliation

00:27:48,540 --> 00:27:53,160
loop to actually look at the

00:27:49,980 --> 00:27:56,490
dependencies as well so what this means

00:27:53,160 --> 00:27:58,740
is there every application from now on

00:27:56,490 --> 00:28:01,950
there has any dependency can just define

00:27:58,740 --> 00:28:06,180
it with this one line it's the well any

00:28:01,950 --> 00:28:08,760
one dependency you point a reference to

00:28:06,180 --> 00:28:13,110
a commonly defined dependency and it

00:28:08,760 --> 00:28:15,420
will be monitored and that allows us

00:28:13,110 --> 00:28:21,360
also to do the opposite instead of

00:28:15,420 --> 00:28:24,300
figuring out what dependency a specific

00:28:21,360 --> 00:28:26,240
service has we can do the reverse query

00:28:24,300 --> 00:28:29,590
and we can say when we were alerted to

00:28:26,240 --> 00:28:31,450
the an SSO outage for example

00:28:29,590 --> 00:28:34,000
or any other kind of outers in any other

00:28:31,450 --> 00:28:36,640
dependency we do reverse query and we

00:28:34,000 --> 00:28:48,880
can immediately identify which services

00:28:36,640 --> 00:28:50,770
across our stack is are impacted and yes

00:28:48,880 --> 00:28:52,419
and coupling that up with a metadata

00:28:50,770 --> 00:28:54,010
that we have about each service we also

00:28:52,419 --> 00:28:56,289
know where to notify we know all the

00:28:54,010 --> 00:29:01,360
contact points and we have those in a

00:28:56,289 --> 00:29:04,360
couple of lines of code or queries so I

00:29:01,360 --> 00:29:06,880
guess the key takeaway is how we how our

00:29:04,360 --> 00:29:09,700
technology stack how I get observing

00:29:06,880 --> 00:29:12,820
workflow how our abstraction layers

00:29:09,700 --> 00:29:15,700
allows us to rapidly evolved and evolved

00:29:12,820 --> 00:29:19,419
through the post-mortem culture and

00:29:15,700 --> 00:29:20,470
that's the fun thing when you realize

00:29:19,419 --> 00:29:23,409
that you have all the building blocks

00:29:20,470 --> 00:29:33,100
and we can just do this that's a great

00:29:23,409 --> 00:29:36,360
place to be for me and my team thanks

00:29:33,100 --> 00:29:40,240
for let me see if we can forward yeah

00:29:36,360 --> 00:29:42,909
it's it's actually pretty good that as a

00:29:40,240 --> 00:29:45,039
developer when you submit an application

00:29:42,909 --> 00:29:47,799
through the application interface you

00:29:45,039 --> 00:29:49,570
get okay you get an opinionated flow

00:29:47,799 --> 00:29:50,679
through right the app team will want you

00:29:49,570 --> 00:29:51,820
to do things in a particular way

00:29:50,679 --> 00:29:53,200
credentials have to be shipped in a

00:29:51,820 --> 00:29:54,640
particular way your deliveries have to

00:29:53,200 --> 00:29:56,470
work in a particular way your CI has to

00:29:54,640 --> 00:29:57,909
work in a particular way but in return

00:29:56,470 --> 00:29:59,230
for that they carry the frontline pager

00:29:57,909 --> 00:30:00,700
for you right so they can do the

00:29:59,230 --> 00:30:02,230
guaranteeing work to make sure that what

00:30:00,700 --> 00:30:05,110
you're pushing out there works and works

00:30:02,230 --> 00:30:06,340
consistently right so one of the

00:30:05,110 --> 00:30:07,960
questions that that we've been working

00:30:06,340 --> 00:30:09,460
on over the last six months right

00:30:07,960 --> 00:30:12,010
and spending quite a lot of time on this

00:30:09,460 --> 00:30:13,899
is that we do a lot of work to do

00:30:12,010 --> 00:30:16,299
Quality Assurance to do reliability in

00:30:13,899 --> 00:30:17,529
service to do integration work to do all

00:30:16,299 --> 00:30:19,570
of the you know the liaison the

00:30:17,529 --> 00:30:21,100
associations through the stack you know

00:30:19,570 --> 00:30:23,110
all the way from open shift engineering

00:30:21,100 --> 00:30:26,380
to you know quality delivery etc getting

00:30:23,110 --> 00:30:28,330
products out that we isolate etc but

00:30:26,380 --> 00:30:30,309
what can we do now as a next step that

00:30:28,330 --> 00:30:32,169
enables other teams at Red Hat to come

00:30:30,309 --> 00:30:33,520
and consume the processes and be able to

00:30:32,169 --> 00:30:35,590
use what we are doing for their own

00:30:33,520 --> 00:30:37,780
benefit right for their own wins how can

00:30:35,590 --> 00:30:39,190
we scale ourselves in a way that other

00:30:37,780 --> 00:30:41,889
teams at Red Hat can also come and

00:30:39,190 --> 00:30:44,210
benefit from the work that we are doing

00:30:41,889 --> 00:30:46,899
before we before we go down that way

00:30:44,210 --> 00:30:49,820
right I want to bring up one key

00:30:46,899 --> 00:30:51,889
consideration here so this typically two

00:30:49,820 --> 00:30:53,419
kinds of services that you run in a

00:30:51,889 --> 00:30:55,369
managed environment right so the first

00:30:53,419 --> 00:30:56,869
part of it is assess you have a

00:30:55,369 --> 00:30:58,729
multi-tenant infrastructure you have a

00:30:56,869 --> 00:31:00,830
dedicated developer team behind it you

00:30:58,729 --> 00:31:03,289
have a dedicated SRE team looking at it

00:31:00,830 --> 00:31:05,090
you have dedicated infrastructure that

00:31:03,289 --> 00:31:06,440
you can scale for its own merit you life

00:31:05,090 --> 00:31:09,109
cycle that you supported right but it's

00:31:06,440 --> 00:31:10,759
a single SAS so think of it like I don't

00:31:09,109 --> 00:31:12,139
know hosted Bugzilla for example right

00:31:10,759 --> 00:31:15,649
it's a great example of a SAS

00:31:12,139 --> 00:31:17,299
potentially the second model that that

00:31:15,649 --> 00:31:18,739
that we're trying to bring through here

00:31:17,299 --> 00:31:20,749
that we try to crystallize and formalize

00:31:18,739 --> 00:31:23,269
is the idea of a managed instance

00:31:20,749 --> 00:31:24,499
delivered by a single developer team so

00:31:23,269 --> 00:31:26,809
the differentiation there becomes you

00:31:24,499 --> 00:31:29,539
have a one to SAS one developer team one

00:31:26,809 --> 00:31:31,309
product delivering a SAS versus one

00:31:29,539 --> 00:31:33,739
developer one product team delivering

00:31:31,309 --> 00:31:35,779
too many instances off that service but

00:31:33,739 --> 00:31:37,580
in a managed environment right think of

00:31:35,779 --> 00:31:39,320
it like open chef dedicated versus OCP

00:31:37,580 --> 00:31:41,690
open you have dedicated hundreds of

00:31:39,320 --> 00:31:43,399
instances coming from the OpenShift

00:31:41,690 --> 00:31:45,259
product right so that's an example of

00:31:43,399 --> 00:31:47,720
one to many you could think of a hosted

00:31:45,259 --> 00:31:49,279
managed my sequel instance for example

00:31:47,720 --> 00:31:51,229
as a one-to-many kind of a model as well

00:31:49,279 --> 00:31:52,309
right a lot of the work that we do like

00:31:51,229 --> 00:31:54,499
a lot of the work that paul was talking

00:31:52,309 --> 00:31:56,450
about stuff that we've we spoken about

00:31:54,499 --> 00:31:58,700
earlier in the day today a lot of that

00:31:56,450 --> 00:32:00,830
was built out to essentially solve the

00:31:58,700 --> 00:32:03,109
problem for how does Red Hat solve the

00:32:00,830 --> 00:32:04,970
SAS issue like how do we get into a

00:32:03,109 --> 00:32:07,489
model where we can deliver a million

00:32:04,970 --> 00:32:09,619
accounts run through a single instance

00:32:07,489 --> 00:32:11,330
of the software right so we are now at a

00:32:09,619 --> 00:32:13,129
point we're extending that model to get

00:32:11,330 --> 00:32:14,690
to a point where any developer team any

00:32:13,129 --> 00:32:17,179
product team at Red Hat is able to

00:32:14,690 --> 00:32:18,739
deliver single instances hosted multiple

00:32:17,179 --> 00:32:21,440
times dedicated for the customer right

00:32:18,739 --> 00:32:22,940
so think of it like a dedicated Quay you

00:32:21,440 --> 00:32:24,799
know you wake up one morning and he said

00:32:22,940 --> 00:32:26,479
you know my life is complete but it

00:32:24,799 --> 00:32:28,700
would be really good if I had my own

00:32:26,479 --> 00:32:30,739
little pet Quay that nobody else could

00:32:28,700 --> 00:32:31,970
get to right and and we could do that

00:32:30,739 --> 00:32:33,080
right so you have a dedicated koi

00:32:31,970 --> 00:32:34,639
instance now you could have a hundred

00:32:33,080 --> 00:32:36,409
customers running dedicated koi

00:32:34,639 --> 00:32:38,840
instances that there are their own right

00:32:36,409 --> 00:32:41,389
coming from a single single team right

00:32:38,840 --> 00:32:43,009
so what we're doing in this place is

00:32:41,389 --> 00:32:45,619
we've got something called the addons

00:32:43,009 --> 00:32:49,159
flow right it's it's a managed tenants

00:32:45,619 --> 00:32:51,169
process and we extend this model in a

00:32:49,159 --> 00:32:52,789
way that we don't interfere with

00:32:51,169 --> 00:32:54,410
anything that you guys do as developers

00:32:52,789 --> 00:32:55,490
or from your busy

00:32:54,410 --> 00:32:56,750
perspective offering a product

00:32:55,490 --> 00:32:58,460
management or from your program

00:32:56,750 --> 00:33:00,410
management right so you build the

00:32:58,460 --> 00:33:02,480
software you need to build you build it

00:33:00,410 --> 00:33:04,520
the way you want to build it you deliver

00:33:02,480 --> 00:33:06,860
it the way you feel most confident right

00:33:04,520 --> 00:33:09,500
and then what we do is we meet you along

00:33:06,860 --> 00:33:11,390
that way along that path of delivery so

00:33:09,500 --> 00:33:13,040
come join us come participate with us on

00:33:11,390 --> 00:33:14,810
the automation stack right come join us

00:33:13,040 --> 00:33:17,030
in the validation stack come join us in

00:33:14,810 --> 00:33:20,000
a way that we can help you life cycle

00:33:17,030 --> 00:33:21,620
the whole conference right and get to a

00:33:20,000 --> 00:33:23,180
point right so why do it like this

00:33:21,620 --> 00:33:25,130
what we can bring to the table here is

00:33:23,180 --> 00:33:26,600
that we have a platform a sari team that

00:33:25,130 --> 00:33:28,100
can engage with you guys on best

00:33:26,600 --> 00:33:29,990
practices on how to consume openshift

00:33:28,100 --> 00:33:31,460
how to do your resource allocation how

00:33:29,990 --> 00:33:33,530
to do bin packing how to do scale out

00:33:31,460 --> 00:33:35,060
work how to do your security work what

00:33:33,530 --> 00:33:37,250
is the InfoSec implications of certain

00:33:35,060 --> 00:33:38,540
pieces we might already have InfoSec

00:33:37,250 --> 00:33:39,950
approval for certain patterns that you

00:33:38,540 --> 00:33:42,680
can land out the back off right so you

00:33:39,950 --> 00:33:44,570
don't have to do that work the tenant

00:33:42,680 --> 00:33:46,160
applications stay in Paul's team already

00:33:44,570 --> 00:33:47,390
runs applications right they've got a

00:33:46,160 --> 00:33:49,340
hundred plus micro services in

00:33:47,390 --> 00:33:51,560
production today a lot of the names that

00:33:49,340 --> 00:33:53,120
you would see on red hats properties

00:33:51,560 --> 00:33:54,140
cloud or red hat or come for example is

00:33:53,120 --> 00:33:57,620
run through the service delivery

00:33:54,140 --> 00:34:00,950
organization how do we get to a point

00:33:57,620 --> 00:34:02,210
where you guys could then use the work

00:34:00,950 --> 00:34:03,770
that the tenant team is doing the

00:34:02,210 --> 00:34:04,970
application SRE team is doing to

00:34:03,770 --> 00:34:06,860
basically scale your own application

00:34:04,970 --> 00:34:08,840
deliver your own applications right use

00:34:06,860 --> 00:34:10,520
their CI use their monitoring use their

00:34:08,840 --> 00:34:12,280
pager infrastructure it if we have a

00:34:10,520 --> 00:34:15,260
processor let's see do it today right

00:34:12,280 --> 00:34:20,150
extending that model further down the

00:34:15,260 --> 00:34:21,560
road becomes that the sorry as the the

00:34:20,150 --> 00:34:24,020
asari flow right the entire feedback

00:34:21,560 --> 00:34:26,540
flow when you deliver a managed instance

00:34:24,020 --> 00:34:28,340
of your software what we do is we work

00:34:26,540 --> 00:34:30,080
with the support teams to bring the

00:34:28,340 --> 00:34:31,400
support interfaces down to a point where

00:34:30,080 --> 00:34:33,590
it is consistent with all of our other

00:34:31,400 --> 00:34:35,210
managed services so if a customer has

00:34:33,590 --> 00:34:36,560
three or four or five different pieces

00:34:35,210 --> 00:34:38,690
or you have a hundred different

00:34:36,560 --> 00:34:40,520
customers with let's say to each the

00:34:38,690 --> 00:34:42,230
support experience the engagement model

00:34:40,520 --> 00:34:44,150
for for each of those customers remains

00:34:42,230 --> 00:34:45,230
consistent you don't have to talk to a

00:34:44,150 --> 00:34:47,179
different group of RedHat if you're

00:34:45,230 --> 00:34:49,010
using a different product you can expect

00:34:47,179 --> 00:34:50,540
that every different group ad Red Hat is

00:34:49,010 --> 00:34:51,740
using the same model to deliver the

00:34:50,540 --> 00:34:53,990
management to face right so you can set

00:34:51,740 --> 00:34:55,700
expectations against it the other key

00:34:53,990 --> 00:34:56,780
part of it becomes that as the platform

00:34:55,700 --> 00:34:59,720
expands like for example

00:34:56,780 --> 00:35:01,520
arrow arrow v4 is expected soon if

00:34:59,720 --> 00:35:03,320
you're already invested with us in our

00:35:01,520 --> 00:35:04,730
processes in our policies you will get

00:35:03,320 --> 00:35:05,180
heroine ableman for free when our o'er

00:35:04,730 --> 00:35:07,309
comes

00:35:05,180 --> 00:35:09,559
right open shave dedicated goes to GCP

00:35:07,309 --> 00:35:11,180
or two you know let's say the next big

00:35:09,559 --> 00:35:12,740
cloud without taking any names you get

00:35:11,180 --> 00:35:14,930
that enablement for free because you can

00:35:12,740 --> 00:35:16,430
make assumptions that our interfaces are

00:35:14,930 --> 00:35:19,089
consistent our models are consistent and

00:35:16,430 --> 00:35:21,950
we've delivered and expectations based

00:35:19,089 --> 00:35:24,890
reliable service against that right so

00:35:21,950 --> 00:35:27,740
this stack is available today we have

00:35:24,890 --> 00:35:30,410
almost a dozen themes in different

00:35:27,740 --> 00:35:31,579
stages of maturity through the stack and

00:35:30,410 --> 00:35:32,569
it is available today so this is not

00:35:31,579 --> 00:35:33,470
something that we're projecting or

00:35:32,569 --> 00:35:35,000
whatever this is stuff that is

00:35:33,470 --> 00:35:37,250
implemented in place the one-to-many

00:35:35,000 --> 00:35:39,140
delivery model right what does this mean

00:35:37,250 --> 00:35:41,270
for the customer so if you look through

00:35:39,140 --> 00:35:44,059
our self-service portal from a customer

00:35:41,270 --> 00:35:45,200
standpoint the product that you guys are

00:35:44,059 --> 00:35:47,450
shipping let's call it I don't know

00:35:45,200 --> 00:35:50,180
let's call it fort ready workspaces for

00:35:47,450 --> 00:35:51,619
example right the SKU reconciliation

00:35:50,180 --> 00:35:53,349
behind-the-scenes happens automatically

00:35:51,619 --> 00:35:56,569
so when a customer goes out and buys

00:35:53,349 --> 00:35:58,550
code ready workspaces a button will show

00:35:56,569 --> 00:36:00,079
up in their console that allows them to

00:35:58,550 --> 00:36:01,520
contextualise a cluster with that

00:36:00,079 --> 00:36:03,500
particular product right with no

00:36:01,520 --> 00:36:05,300
intervention no no feedback nothing that

00:36:03,500 --> 00:36:07,130
it's a it's an automated process recon

00:36:05,300 --> 00:36:08,660
solution happening behind the scenes the

00:36:07,130 --> 00:36:10,130
delivery is guaranteed we'll talk about

00:36:08,660 --> 00:36:11,450
that a little bit down the road but we

00:36:10,130 --> 00:36:14,089
but you know we get up to a very high

00:36:11,450 --> 00:36:15,770
level of guarantee the code is tested

00:36:14,089 --> 00:36:17,569
through our CI CD processes so as

00:36:15,770 --> 00:36:19,280
openshift dedicated evolves as arrow

00:36:17,569 --> 00:36:21,799
evolves you know that you're going to

00:36:19,280 --> 00:36:24,859
get rapid feedback you know like I'll

00:36:21,799 --> 00:36:26,720
give an example for ATO at 11 OCP going

00:36:24,859 --> 00:36:29,510
to 4 or 2 or 12 might potentially have

00:36:26,720 --> 00:36:31,010
an implication on your app typically 72

00:36:29,510 --> 00:36:32,930
hours before it goes to production you

00:36:31,010 --> 00:36:34,160
will get a feedback loop call to say hey

00:36:32,930 --> 00:36:35,900
you know we think your CI is going to

00:36:34,160 --> 00:36:37,579
fail and we think your impact is going

00:36:35,900 --> 00:36:39,410
to look like X right 40 clusters

00:36:37,579 --> 00:36:40,640
potentially going to go down in this

00:36:39,410 --> 00:36:42,410
particular kind of way right through our

00:36:40,640 --> 00:36:43,940
automation harness and this is not

00:36:42,410 --> 00:36:45,170
something we have an option on doing

00:36:43,940 --> 00:36:48,740
right this is a part of our reliability

00:36:45,170 --> 00:36:50,089
work that we invest in already right the

00:36:48,740 --> 00:36:51,770
other part of this is that you could

00:36:50,089 --> 00:36:53,210
Park a lot of that conversation and you

00:36:51,770 --> 00:36:55,280
could say what if I just want to consume

00:36:53,210 --> 00:36:56,869
a white labeled open shave dedicated or

00:36:55,280 --> 00:36:58,940
I want to consume a white label

00:36:56,869 --> 00:37:01,670
application has already stack right you

00:36:58,940 --> 00:37:03,140
can API open chef dot-com exposes the

00:37:01,670 --> 00:37:04,609
full feature function sets so if you

00:37:03,140 --> 00:37:07,280
want to go and write your own

00:37:04,609 --> 00:37:08,119
integration Suites in bash or you want

00:37:07,280 --> 00:37:10,579
to integrate up which have dedicated

00:37:08,119 --> 00:37:12,460
into your CI pipelines or you want to go

00:37:10,579 --> 00:37:14,780
integrate any of the managed components

00:37:12,460 --> 00:37:16,160
into software that you ship services

00:37:14,780 --> 00:37:17,750
that you ship that you want to control

00:37:16,160 --> 00:37:18,850
the customer interface with there's an

00:37:17,750 --> 00:37:20,650
API that lets you go

00:37:18,850 --> 00:37:22,810
that today right don't want to use an

00:37:20,650 --> 00:37:24,100
API we have SDKs that are available that

00:37:22,810 --> 00:37:25,240
let you go to the same thing don't want

00:37:24,100 --> 00:37:26,620
to use an SDK there's a command-line

00:37:25,240 --> 00:37:28,330
interface that you could use that we

00:37:26,620 --> 00:37:30,670
ship there's a believe there's a copper

00:37:28,330 --> 00:37:32,290
for it and it's available on on Apple

00:37:30,670 --> 00:37:33,730
and in fedora that allows you to just go

00:37:32,290 --> 00:37:38,440
directly engage with the API OpenShift

00:37:33,730 --> 00:37:39,630
comm let me hand over to Jeremy who

00:37:38,440 --> 00:37:42,720
talked us through one of our

00:37:39,630 --> 00:37:45,760
implementations here

00:37:42,720 --> 00:37:46,330
okay cool so it's it's DNF copper and

00:37:45,760 --> 00:37:53,020
Abel

00:37:46,330 --> 00:37:54,340
OC m DNF install ocm CLI okay

00:37:53,020 --> 00:37:55,720
so we've got all of these building

00:37:54,340 --> 00:37:58,750
blocks in place all of that

00:37:55,720 --> 00:38:01,410
infrastructure that helps abstract AWS

00:37:58,750 --> 00:38:03,760
it helps abstract OpenShift

00:38:01,410 --> 00:38:06,340
let's talk about the actual onboarding

00:38:03,760 --> 00:38:09,220
of an application which by the way it's

00:38:06,340 --> 00:38:11,260
official Quay is pronounced Quay

00:38:09,220 --> 00:38:12,760
according to this shirt so no I don't

00:38:11,260 --> 00:38:16,270
know where you're from but he according

00:38:12,760 --> 00:38:19,600
to this shirt it's quite so let's talk

00:38:16,270 --> 00:38:25,930
about how this went from ideation to

00:38:19,600 --> 00:38:27,100
production in 2019 so well before I get

00:38:25,930 --> 00:38:30,340
into that a couple things were already

00:38:27,100 --> 00:38:32,920
running some of these services you may

00:38:30,340 --> 00:38:33,430
recognize sometimes not but in addition

00:38:32,920 --> 00:38:34,750
to Quay

00:38:33,430 --> 00:38:40,450
there's a bunch of other stuff in prod

00:38:34,750 --> 00:38:41,860
already here's the timeline May of 2019

00:38:40,450 --> 00:38:44,230
actually a little bit before that but

00:38:41,860 --> 00:38:46,930
let's let's call it may we decide to as

00:38:44,230 --> 00:38:50,890
a team there will be a project that gets

00:38:46,930 --> 00:38:52,840
Quade IO the SAS not the pet Enterprise

00:38:50,890 --> 00:38:54,990
Quay that KB was mentioning we're

00:38:52,840 --> 00:38:57,700
talking about if you go to Quay dot IO

00:38:54,990 --> 00:38:59,560
shared infrastructure that thing will

00:38:57,700 --> 00:39:02,650
eventually run on an open shift

00:38:59,560 --> 00:39:04,540
dedicated for cluster this timeline

00:39:02,650 --> 00:39:07,810
represents the path it took to get there

00:39:04,540 --> 00:39:09,730
so the first was to say let's talk about

00:39:07,810 --> 00:39:11,080
people and process we need to figure we

00:39:09,730 --> 00:39:15,130
need to make sure we have the s Ari's in

00:39:11,080 --> 00:39:16,930
place to be able to do this by June all

00:39:15,130 --> 00:39:18,610
the teams were clicking and executing

00:39:16,930 --> 00:39:20,920
they were making operators out of their

00:39:18,610 --> 00:39:22,300
stuff they were realizing that their

00:39:20,920 --> 00:39:23,800
builders are currently on kubernetes

00:39:22,300 --> 00:39:25,690
that's kind of a bad place to be and

00:39:23,800 --> 00:39:28,360
it's legacy quai stuff from prior to the

00:39:25,690 --> 00:39:31,300
core OS acquisition they moved their

00:39:28,360 --> 00:39:32,620
stuff to open shift container platform

00:39:31,300 --> 00:39:34,510
not OSD

00:39:32,620 --> 00:39:37,180
that thing needs to run on bare metal so

00:39:34,510 --> 00:39:38,560
it's running on packet dotnet they found

00:39:37,180 --> 00:39:41,590
some other service dependencies like

00:39:38,560 --> 00:39:43,870
they wanted to move from s CD to one of

00:39:41,590 --> 00:39:47,110
AWS has managed in-memory databases

00:39:43,870 --> 00:39:49,630
called ElastiCache that was June by

00:39:47,110 --> 00:39:52,150
November we're ready to start doing real

00:39:49,630 --> 00:39:55,140
migration so the prep work is three four

00:39:52,150 --> 00:39:57,160
five months long maybe one quarter a

00:39:55,140 --> 00:39:59,650
couple of things that needed to happen

00:39:57,160 --> 00:40:01,840
before they could do an OSD deployment

00:39:59,650 --> 00:40:03,660
they need to move from some older AWS

00:40:01,840 --> 00:40:06,190
infrastructure I mentioned legacy setup

00:40:03,660 --> 00:40:10,810
over to the virtual private cloud side

00:40:06,190 --> 00:40:12,400
of AWS and then the SRA management team

00:40:10,810 --> 00:40:14,620
you know handled some knowledge

00:40:12,400 --> 00:40:17,290
transfers so like Way has been running

00:40:14,620 --> 00:40:19,720
in prod for many years right for several

00:40:17,290 --> 00:40:21,430
years they had all kinds of operational

00:40:19,720 --> 00:40:24,700
knowledge now they're attempting to have

00:40:21,430 --> 00:40:27,520
other people run this service for them

00:40:24,700 --> 00:40:29,560
carry the pager all of those checks and

00:40:27,520 --> 00:40:31,240
a half interface are in place there's

00:40:29,560 --> 00:40:33,280
also human elements where we need to

00:40:31,240 --> 00:40:34,720
have a transition and then this this

00:40:33,280 --> 00:40:35,680
timeframe is when we handle this so

00:40:34,720 --> 00:40:38,500
there is I don't know half a dozen

00:40:35,680 --> 00:40:42,790
knowledge transfer meetings for the SRA

00:40:38,500 --> 00:40:45,400
team our SRA team to take over for the

00:40:42,790 --> 00:40:46,740
Quai really the quite founder is quite

00:40:45,400 --> 00:40:50,110
honestly

00:40:46,740 --> 00:40:51,550
fast forward to December we've got two

00:40:50,110 --> 00:40:53,980
environments set up we've got Quaid

00:40:51,550 --> 00:40:56,110
Idaho Prague the old stuff and we've got

00:40:53,980 --> 00:40:59,050
Quaid i/o running on open shift

00:40:56,110 --> 00:41:00,520
dedicated which incidentally uses the

00:40:59,050 --> 00:41:04,510
add ons flow as part of it that the

00:41:00,520 --> 00:41:05,860
thing that KB just described so like any

00:41:04,510 --> 00:41:07,720
other production service we're going to

00:41:05,860 --> 00:41:10,600
canary this guy they're gonna slowly

00:41:07,720 --> 00:41:13,990
slowly move percentages of load over to

00:41:10,600 --> 00:41:16,360
the new service 5% watch the

00:41:13,990 --> 00:41:18,640
observability graphs 10% watch the

00:41:16,360 --> 00:41:21,450
observability graphs all the way up 50

00:41:18,640 --> 00:41:25,630
100 within a day or two all of the load

00:41:21,450 --> 00:41:27,250
for the control plane was on OSD so I

00:41:25,630 --> 00:41:28,960
think that was December 18th and was

00:41:27,250 --> 00:41:31,510
quite an achievement to get done right

00:41:28,960 --> 00:41:33,670
before the shutdown but the team did it

00:41:31,510 --> 00:41:35,200
the existing infrastructure was still

00:41:33,670 --> 00:41:36,610
there just in case

00:41:35,200 --> 00:41:39,010
right as you can imagine not gonna turn

00:41:36,610 --> 00:41:41,320
that off before we're ready eventually

00:41:39,010 --> 00:41:43,540
we didn't ever need to the folks didn't

00:41:41,320 --> 00:41:45,280
ever need to migrate back so that was

00:41:43,540 --> 00:41:45,930
the official cut over ended December

00:41:45,280 --> 00:41:48,270
open

00:41:45,930 --> 00:41:51,450
sorry Quay io running on OpenShift

00:41:48,270 --> 00:41:54,450
dedicated and I can see engagements with

00:41:51,450 --> 00:41:58,580
other groups taking this basic flow it's

00:41:54,450 --> 00:42:02,340
like scoping pre-work knowledge transfer

00:41:58,580 --> 00:42:03,390
and then the actual execution phase they

00:42:02,340 --> 00:42:05,070
have a couple of things in their roadmap

00:42:03,390 --> 00:42:07,860
that they know they they know they need

00:42:05,070 --> 00:42:08,940
to improve they do builder like I

00:42:07,860 --> 00:42:11,940
mentioned there dude they're doing

00:42:08,940 --> 00:42:13,140
builds on bare metal for security

00:42:11,940 --> 00:42:15,000
purposes we need to figure out how to

00:42:13,140 --> 00:42:16,650
handle that and openshift dedicated a

00:42:15,000 --> 00:42:19,020
couple of other things they need to they

00:42:16,650 --> 00:42:21,000
need to to handle to kind of round this

00:42:19,020 --> 00:42:24,140
out and that'll happen in the fullness

00:42:21,000 --> 00:42:27,090
of time that's how it was on boarded I

00:42:24,140 --> 00:42:28,800
can't end a presentation without some

00:42:27,090 --> 00:42:30,180
graphs or I get docked salaries so there

00:42:28,800 --> 00:42:31,800
you go this is what they're

00:42:30,180 --> 00:42:35,610
observability dashboard currently looks

00:42:31,800 --> 00:42:37,160
like 4-4 Quay is what they're looking at

00:42:35,610 --> 00:42:41,670
now and this is what they will look to

00:42:37,160 --> 00:42:45,210
to improve over the over the year last

00:42:41,670 --> 00:42:48,210
thing i will mention now that we have

00:42:45,210 --> 00:42:50,400
Quay IO on OpenShift dedicated we have a

00:42:48,210 --> 00:42:52,260
pretty full story for a release of open

00:42:50,400 --> 00:42:54,690
shift software and we have some pretty

00:42:52,260 --> 00:42:57,690
frequent touch points with every open

00:42:54,690 --> 00:42:59,280
shift customer i've got almost in

00:42:57,690 --> 00:43:00,480
parentheses because i was hoping to say

00:42:59,280 --> 00:43:03,990
we're done but we're not done with the

00:43:00,480 --> 00:43:05,400
origin CI migration that's ongoing we

00:43:03,990 --> 00:43:10,380
are done with us Cincinnati migration

00:43:05,400 --> 00:43:12,300
has anybody heard of Cincinnati yeah all

00:43:10,380 --> 00:43:14,070
this guy is it's a simple stateless

00:43:12,300 --> 00:43:16,650
micro service every OpenShift cluster

00:43:14,070 --> 00:43:18,660
goes out hits this endpoint to figure

00:43:16,650 --> 00:43:18,930
out if there is an upgrade available for

00:43:18,660 --> 00:43:22,320
them

00:43:18,930 --> 00:43:24,920
nothing more we host that on openshift

00:43:22,320 --> 00:43:28,680
dedicated for as of I think last week

00:43:24,920 --> 00:43:31,470
Quay again already on open share for two

00:43:28,680 --> 00:43:34,470
limiter which is our some folks maybe I

00:43:31,470 --> 00:43:37,680
think in in this office working on onto

00:43:34,470 --> 00:43:40,410
limiter on the Brno area the backhaul of

00:43:37,680 --> 00:43:41,730
performance and infrastructure metrics

00:43:40,410 --> 00:43:43,050
from every open shift cluster in the

00:43:41,730 --> 00:43:45,300
world if you haven't seen some of our

00:43:43,050 --> 00:43:47,220
telemetry dashboards they are fantastic

00:43:45,300 --> 00:43:49,260
you can zoom in to a particular cluster

00:43:47,220 --> 00:43:51,990
you can slice and dice the data in

00:43:49,260 --> 00:43:53,430
really any way as experienced as you are

00:43:51,990 --> 00:43:55,980
with prompt QL is how much data you can

00:43:53,430 --> 00:43:57,690
you fish out of this thing we also

00:43:55,980 --> 00:43:59,400
handle the initial customer engagement

00:43:57,690 --> 00:44:01,529
through we call a service called Toby

00:43:59,400 --> 00:44:04,140
and we mentioned we do subscription

00:44:01,529 --> 00:44:05,759
management so we also handle tri-dot

00:44:04,140 --> 00:44:07,190
openshift comm all of this together

00:44:05,759 --> 00:44:09,630
means that

00:44:07,190 --> 00:44:12,059
openshift itself is dependent on

00:44:09,630 --> 00:44:14,720
OpenShift itself in a managed way so I

00:44:12,059 --> 00:44:17,369
think this is the prime example of how

00:44:14,720 --> 00:44:18,869
you know Red Hat's sre life needs to

00:44:17,369 --> 00:44:24,509
needs to evolve and it can use to

00:44:18,869 --> 00:44:26,579
continue on a path like this one couple

00:44:24,509 --> 00:44:29,210
of other teams you may recognize the

00:44:26,579 --> 00:44:32,309
names of that are in flight right now

00:44:29,210 --> 00:44:34,730
we're bringing on through likely through

00:44:32,309 --> 00:44:37,140
the add ons flow all of these stacks

00:44:34,730 --> 00:44:38,789
some further along and others Katie

00:44:37,140 --> 00:44:41,910
mentioned code ready insights platform

00:44:38,789 --> 00:44:44,279
API management obviously we need storage

00:44:41,910 --> 00:44:46,349
if anyone's working on OCS we're gonna

00:44:44,279 --> 00:44:48,269
figure out how to run that on OSD and

00:44:46,349 --> 00:44:50,640
then our middleware folks as well very

00:44:48,269 --> 00:44:52,470
popular offering called alright jamai so

00:44:50,640 --> 00:44:54,690
we'll be able to run those as soon as

00:44:52,470 --> 00:44:57,359
they run through the same flow that kwai

00:44:54,690 --> 00:44:59,490
went through you'll be able to knock all

00:44:57,359 --> 00:45:03,119
of the check all of these boxes check

00:44:59,490 --> 00:45:06,529
all these boxes as well thanks thanks

00:45:03,119 --> 00:45:08,460
Jeremy so anybody here working on OCS

00:45:06,529 --> 00:45:09,900
anybody what are you guys doing at a

00:45:08,460 --> 00:45:14,609
conference shouldn't you be like back in

00:45:09,900 --> 00:45:16,019
the office working tell me something

00:45:14,609 --> 00:45:18,359
like sixty percent of our customers are

00:45:16,019 --> 00:45:20,460
asking for OCS so in case in case you

00:45:18,359 --> 00:45:23,130
need any motivation anybody spoken to

00:45:20,460 --> 00:45:24,119
please come find us so in confusion I

00:45:23,130 --> 00:45:25,769
think so we've been able to share with

00:45:24,119 --> 00:45:27,480
you guys you know a very small sliver of

00:45:25,769 --> 00:45:28,980
what we do we're very excited about the

00:45:27,480 --> 00:45:30,450
work that we're undertaking right now we

00:45:28,980 --> 00:45:32,430
think we're making great progress we're

00:45:30,450 --> 00:45:35,670
a small team vs New York today's about

00:45:32,430 --> 00:45:37,140
80 people and growing but we remain we

00:45:35,670 --> 00:45:38,640
remain committed to the to to the

00:45:37,140 --> 00:45:41,009
process that we're working on right now

00:45:38,640 --> 00:45:42,900
from from a developer perspective like

00:45:41,009 --> 00:45:44,640
if you were looking at if you're looking

00:45:42,900 --> 00:45:46,680
at on working in a team that has a

00:45:44,640 --> 00:45:48,450
execution path for managed services

00:45:46,680 --> 00:45:49,440
there are a couple of fundamental things

00:45:48,450 --> 00:45:50,640
that you always want to be thinking

00:45:49,440 --> 00:45:52,589
about right so we spoke about

00:45:50,640 --> 00:45:53,819
observability is very important that

00:45:52,589 --> 00:45:55,529
when you're writing a code when you're

00:45:53,819 --> 00:45:56,489
designing your code you should also be

00:45:55,529 --> 00:45:59,880
thinking about how you're going to

00:45:56,489 --> 00:46:01,680
monitor your code the big paradigm shift

00:45:59,880 --> 00:46:02,759
that I know Red Hat is going through

00:46:01,680 --> 00:46:03,809
today right there's this whole emotional

00:46:02,759 --> 00:46:05,880
journey and then there's a technical

00:46:03,809 --> 00:46:08,670
journey getting away from delivering

00:46:05,880 --> 00:46:10,619
products which are one short version

00:46:08,670 --> 00:46:13,200
deliveries to actually keeping something

00:46:10,619 --> 00:46:15,000
running where potentially your

00:46:13,200 --> 00:46:16,740
recycle only lasts five minutes right

00:46:15,000 --> 00:46:18,720
because something worked you can only

00:46:16,740 --> 00:46:19,680
make a confidence judgment that hey I

00:46:18,720 --> 00:46:21,180
think it's going to work for at least

00:46:19,680 --> 00:46:22,829
another five minutes after that I don't

00:46:21,180 --> 00:46:24,329
know what have to test again that's a

00:46:22,829 --> 00:46:25,950
big paradigm shift that we are trying to

00:46:24,329 --> 00:46:27,690
drive through the different

00:46:25,950 --> 00:46:29,099
organizations right and so when you're

00:46:27,690 --> 00:46:30,990
building the software you are best

00:46:29,099 --> 00:46:33,510
positioned to make decisions around what

00:46:30,990 --> 00:46:35,040
you should be monitoring right what are

00:46:33,510 --> 00:46:36,300
the parameters that are interesting what

00:46:35,040 --> 00:46:37,829
are the parameters that are critical

00:46:36,300 --> 00:46:39,510
that somebody should be alerted on if

00:46:37,829 --> 00:46:41,670
somebody is alerted what could the

00:46:39,510 --> 00:46:45,240
actions there look like right and then

00:46:41,670 --> 00:46:49,230
and then come and participate let me let

00:46:45,240 --> 00:46:50,700
me just kind of point out that we have a

00:46:49,230 --> 00:46:51,599
if you guys have more questions we have

00:46:50,700 --> 00:46:53,130
an office hours that we're running

00:46:51,599 --> 00:46:56,130
there's a there's a link that we can

00:46:53,130 --> 00:46:57,630
pass around next week please come join

00:46:56,130 --> 00:46:59,250
us and then we'll try and make it a more

00:46:57,630 --> 00:47:00,599
regular thing you guys can come and

00:46:59,250 --> 00:47:02,190
engage with us in an open forum if you

00:47:00,599 --> 00:47:05,310
don't want to do it through official

00:47:02,190 --> 00:47:06,329
stuff and then and then a critical piece

00:47:05,310 --> 00:47:08,130
right is something that I really enjoy

00:47:06,329 --> 00:47:10,170
nothing that we talk about nothing that

00:47:08,130 --> 00:47:11,400
we do is future projections right all of

00:47:10,170 --> 00:47:14,160
our numbers all of our metrics are

00:47:11,400 --> 00:47:15,720
driven by quantified data right so if

00:47:14,160 --> 00:47:17,700
you were in the business of trying to

00:47:15,720 --> 00:47:19,410
get a managed service or trying to run a

00:47:17,700 --> 00:47:21,240
service that you wanted some level of

00:47:19,410 --> 00:47:22,740
ash or and so on would you want to run

00:47:21,240 --> 00:47:24,270
it on a platform that gets you

00:47:22,740 --> 00:47:25,740
potentially three nines

00:47:24,270 --> 00:47:27,359
we had a very little conversation

00:47:25,740 --> 00:47:29,700
earlier today because we actually do hit

00:47:27,359 --> 00:47:31,380
three nines but if you stretch it over

00:47:29,700 --> 00:47:33,240
the last year we had a couple of bad

00:47:31,380 --> 00:47:35,099
days and so we actually drop a couple of

00:47:33,240 --> 00:47:36,599
percentage points there right and so the

00:47:35,099 --> 00:47:38,250
question then becomes do you want your

00:47:36,599 --> 00:47:40,290
service to go hit the same numbers if

00:47:38,250 --> 00:47:41,910
you do then we can help we have the

00:47:40,290 --> 00:47:45,960
processes we have the people and and

00:47:41,910 --> 00:47:49,670
we're here to help we really liked it so

00:47:45,960 --> 00:47:49,670
on that let me say thank you

00:47:52,730 --> 00:47:54,790

YouTube URL: https://www.youtube.com/watch?v=L8Fy4AIy8rQ


