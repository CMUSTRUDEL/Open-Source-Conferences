Title: Kogito - Business automation powered by cloud native Java - DevConf.CZ 2020
Publication date: 2020-02-28
Playlist: DevConfCZ 2020
Description: 
	Speakers: Cristiano Nicolai, Ricardo Zanini Fernandes

Java is entering a new era - the cloud native era. It can be made small, light and fast and at the same time as powerful as never before. Quarkus has changed the perception of Java in a cloud significantly and opened the door for the next generation of middleware where one of the important players is business automation- processes and rules.

[ https://sched.co/YOrN ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,380 --> 00:00:09,510
we are Cardozo Nene and his Hawaii we

00:00:06,270 --> 00:00:14,240
are engineers and in Red Hat and rework

00:00:09,510 --> 00:00:17,999
and could you tow project Guido is our

00:00:14,240 --> 00:00:20,550
next act for the BPM Andrew saying that

00:00:17,999 --> 00:00:22,919
you guys already saw in the past

00:00:20,550 --> 00:00:25,679
presentations so we were talking about

00:00:22,919 --> 00:00:29,429
business and automation so what is a

00:00:25,679 --> 00:00:32,850
business automation briefly it is the

00:00:29,429 --> 00:00:34,350
math that we do to automate some process

00:00:32,850 --> 00:00:37,530
and what is a process so the process can

00:00:34,350 --> 00:00:39,690
be anything you know like if you have

00:00:37,530 --> 00:00:41,700
issues to buy a mouse for example you

00:00:39,690 --> 00:00:44,700
cannot you can ask for your manager for

00:00:41,700 --> 00:00:46,740
proof for you to buy a mouse and you can

00:00:44,700 --> 00:00:49,410
ask for a know three different vendors

00:00:46,740 --> 00:00:52,020
to buy this mouse for you or to know to

00:00:49,410 --> 00:00:55,140
get some holes of the price for these

00:00:52,020 --> 00:00:58,050
models and the cheaper or the they

00:00:55,140 --> 00:01:00,810
wander will deliver for you you buy so

00:00:58,050 --> 00:01:03,120
you need a mouse and you order a mouse

00:01:00,810 --> 00:01:06,960
so this is a process of ordering a mouse

00:01:03,120 --> 00:01:09,359
okay so let's imagine that every one

00:01:06,960 --> 00:01:12,149
that needs to repossess a business of we

00:01:09,359 --> 00:01:14,939
came from business process realize how

00:01:12,149 --> 00:01:17,369
different way of doing that like using

00:01:14,939 --> 00:01:21,359
three parts so instead of using pig

00:01:17,369 --> 00:01:23,969
parts simmer very very much more smarter

00:01:21,359 --> 00:01:26,729
than us we come up with an idea why not

00:01:23,969 --> 00:01:29,520
standardize this you know let's call

00:01:26,729 --> 00:01:33,170
this BPMN so this is the same process

00:01:29,520 --> 00:01:37,049
that we have here as a clipart we have

00:01:33,170 --> 00:01:42,240
please go okay hey stop

00:01:37,049 --> 00:01:44,340
we have here we call BPMN so we have

00:01:42,240 --> 00:01:47,009
here for example or their ruse

00:01:44,340 --> 00:01:49,560
what is the rules to buy a mouse you

00:01:47,009 --> 00:01:51,119
know somewhat to review my order my

00:01:49,560 --> 00:01:53,490
measure for example there let you

00:01:51,119 --> 00:01:55,880
badmouth really you need the mouse for

00:01:53,490 --> 00:01:58,880
example oh yeah I need them also please

00:01:55,880 --> 00:02:01,560
approve my mouth for example let's quote

00:01:58,880 --> 00:02:04,330
different suppliers for models and the

00:02:01,560 --> 00:02:06,190
best one we decided here using the

00:02:04,330 --> 00:02:10,060
Asian rules and then we end the process

00:02:06,190 --> 00:02:13,300
so we bought a mouse and we represent

00:02:10,060 --> 00:02:15,010
this process that anyone in this room or

00:02:13,300 --> 00:02:17,350
anyone in the world that has you know

00:02:15,010 --> 00:02:20,050
some kind of intelligence can understand

00:02:17,350 --> 00:02:23,650
what a business process is by looking at

00:02:20,050 --> 00:02:26,890
this so instead of having a perfect

00:02:23,650 --> 00:02:28,810
Terrier your own way of representing a

00:02:26,890 --> 00:02:31,810
business process we have a standard and

00:02:28,810 --> 00:02:34,150
what do we did we took this big

00:02:31,810 --> 00:02:36,700
demanding standard and we transform it

00:02:34,150 --> 00:02:39,040
into a micro services application so

00:02:36,700 --> 00:02:41,020
those applications work pretty well

00:02:39,040 --> 00:02:43,870
into metal service architecture so you

00:02:41,020 --> 00:02:46,630
can compose other service so let's

00:02:43,870 --> 00:02:48,790
imagine that we have here a lot of

00:02:46,630 --> 00:02:51,370
service that we are calling you know in

00:02:48,790 --> 00:02:55,000
our architecture to call us for super a

00:02:51,370 --> 00:02:56,530
B or C so they have different API they

00:02:55,000 --> 00:02:58,240
have different micro service they have

00:02:56,530 --> 00:03:00,130
different gateways and how to

00:02:58,240 --> 00:03:01,740
communicate with your micro service

00:03:00,130 --> 00:03:04,180
architecture so we are calling them

00:03:01,740 --> 00:03:09,250
using our power process and we can't do

00:03:04,180 --> 00:03:12,430
that with so are you doing here it is a

00:03:09,250 --> 00:03:14,860
kind of service' composition ok

00:03:12,430 --> 00:03:16,720
so this is more or less what it is a

00:03:14,860 --> 00:03:19,660
business process and I hope you guys

00:03:16,720 --> 00:03:22,150
understood that and standard that we

00:03:19,660 --> 00:03:26,310
call big Damian and we take this the

00:03:22,150 --> 00:03:26,310
opinion and we transform it into micro

00:03:26,730 --> 00:03:36,850
service architecture in the cloud so so

00:03:31,570 --> 00:03:39,519
just one please respect to the to the

00:03:36,850 --> 00:03:42,340
process so do it well when I look at

00:03:39,519 --> 00:03:45,400
this the the nice thing we can actually

00:03:42,340 --> 00:03:48,160
see here is that this become a common

00:03:45,400 --> 00:03:50,320
language for developers and the business

00:03:48,160 --> 00:03:53,230
analyst right so you can show this to

00:03:50,320 --> 00:03:55,989
them until look this is what my micro

00:03:53,230 --> 00:03:59,440
servant is doing from the business

00:03:55,989 --> 00:04:01,660
perspective is that ok is that doing the

00:03:59,440 --> 00:04:07,930
right function and then he might look

00:04:01,660 --> 00:04:10,390
into that ya know if other needs know

00:04:07,930 --> 00:04:13,920
it's X amount of dollar it needs to go

00:04:10,390 --> 00:04:17,380
for two levels of review so that sort of

00:04:13,920 --> 00:04:19,120
change chains on how you speak

00:04:17,380 --> 00:04:20,890
and how you talk to you with the

00:04:19,120 --> 00:04:24,990
business it creates a common language

00:04:20,890 --> 00:04:29,260
for us developers and to the business to

00:04:24,990 --> 00:04:29,830
get for a solution for the business

00:04:29,260 --> 00:04:31,600
again

00:04:29,830 --> 00:04:34,030
all we do with with the business

00:04:31,600 --> 00:04:36,430
application is creating a solution based

00:04:34,030 --> 00:04:39,370
on on a business requirement it's this

00:04:36,430 --> 00:04:40,690
it's the perfect translation for that at

00:04:39,370 --> 00:04:44,230
this one is we see

00:04:40,690 --> 00:04:47,530
so with Koji - so where did it came from

00:04:44,230 --> 00:04:50,310
I believe most of you guys already heard

00:04:47,530 --> 00:04:51,760
about drools and jbpm so those are two

00:04:50,310 --> 00:04:55,990
well-established

00:04:51,760 --> 00:05:01,930
Java frameworks that been around for ten

00:04:55,990 --> 00:05:05,710
plus years so when we started drusen

00:05:01,930 --> 00:05:07,360
jbpm the work was very different how you

00:05:05,710 --> 00:05:09,390
deploy your application on how you

00:05:07,360 --> 00:05:13,450
create your application is running on

00:05:09,390 --> 00:05:25,150
wildfly apu websphere whatever the

00:05:13,450 --> 00:05:27,670
runtime was completely different just a

00:05:25,150 --> 00:05:29,740
library we just why don't you step off

00:05:27,670 --> 00:05:33,040
you know do you bring all the thing and

00:05:29,740 --> 00:05:34,720
other value for that so and then so we

00:05:33,040 --> 00:05:36,490
realize that things change so we are

00:05:34,720 --> 00:05:37,680
talking about open shift but talking

00:05:36,490 --> 00:05:39,670
about kubernetes

00:05:37,680 --> 00:05:42,400
you know the world has changed

00:05:39,670 --> 00:05:44,550
completely in terms of runtime but there

00:05:42,400 --> 00:05:48,640
is two things that these two guys know

00:05:44,550 --> 00:05:52,090
really well how to do for Druce its how

00:05:48,640 --> 00:05:55,900
to how to write rules or how to expose

00:05:52,090 --> 00:05:59,380
to sift rules from your project jbpm

00:05:55,900 --> 00:06:01,420
itself is exactly what we just saw is

00:05:59,380 --> 00:06:03,280
the modeling part is how you connect the

00:06:01,420 --> 00:06:05,620
different servers so we have this

00:06:03,280 --> 00:06:08,200
background knowledge

00:06:05,620 --> 00:06:10,240
pretty well established over you know

00:06:08,200 --> 00:06:11,770
ten plus years and we don't want to

00:06:10,240 --> 00:06:14,920
throw that away so because it is

00:06:11,770 --> 00:06:17,860
actually reusing all of this knowledge

00:06:14,920 --> 00:06:20,980
that we've got with juice and J we can

00:06:17,860 --> 00:06:23,560
but focusing on the cloud so we get all

00:06:20,980 --> 00:06:25,840
of that and then we put into surfing

00:06:23,560 --> 00:06:29,990
that specifically for the crowd trying

00:06:25,840 --> 00:06:32,960
to minimize any sort of resource

00:06:29,990 --> 00:06:35,210
that you need if that CPU or memory or

00:06:32,960 --> 00:06:38,300
storage or anything like that because

00:06:35,210 --> 00:06:40,790
now we understand that any of that is

00:06:38,300 --> 00:06:42,440
paid by the use which is completely

00:06:40,790 --> 00:06:45,020
different from from the past where you

00:06:42,440 --> 00:06:48,500
had the big monolithic application that

00:06:45,020 --> 00:06:52,610
we we saw on a previous presentation so

00:06:48,500 --> 00:06:54,920
Cochiti is that view for this new

00:06:52,610 --> 00:06:58,190
environment but reusing the existing

00:06:54,920 --> 00:07:03,650
knowledge that we had with rules in

00:06:58,190 --> 00:07:08,270
Japan with with prosciutto we we also

00:07:03,650 --> 00:07:11,630
understand that there is to let's say

00:07:08,270 --> 00:07:13,430
mainstream environments for creating job

00:07:11,630 --> 00:07:16,610
applications these days one is

00:07:13,430 --> 00:07:18,710
Springwood know a lot of people are

00:07:16,610 --> 00:07:22,010
familiar with with that and the other

00:07:18,710 --> 00:07:23,930
one that's having a bit of a heart at

00:07:22,010 --> 00:07:26,120
the moment which is quite close right so

00:07:23,930 --> 00:07:29,000
we don't really enforce the developers

00:07:26,120 --> 00:07:31,370
to use either one of them we leave the

00:07:29,000 --> 00:07:33,170
choice for you to decide which one is

00:07:31,370 --> 00:07:35,120
best for you to adopt in your company if

00:07:33,170 --> 00:07:36,860
you're using spring boots you can use

00:07:35,120 --> 00:07:37,520
squash it with that if you're using

00:07:36,860 --> 00:07:41,120
quarks

00:07:37,520 --> 00:07:44,390
we have a pretty good xtension for quark

00:07:41,120 --> 00:07:47,560
use with Coach it of course if you're

00:07:44,390 --> 00:07:49,880
using coach Farkas you do have something

00:07:47,560 --> 00:07:55,880
cou in there which is the hot reload

00:07:49,880 --> 00:07:57,950
which works very well right so so we are

00:07:55,880 --> 00:08:01,960
talking about you know the micro

00:07:57,950 --> 00:08:05,180
services and the BPMN so what's the

00:08:01,960 --> 00:08:07,580
really like the end go that we want to

00:08:05,180 --> 00:08:10,640
do with kazuto so we're going to go from

00:08:07,580 --> 00:08:13,790
that BPM process into a micro service so

00:08:10,640 --> 00:08:17,420
from that BPM process we've got Utah we

00:08:13,790 --> 00:08:20,450
can actually generate a full rest

00:08:17,420 --> 00:08:22,160
restful application automatically that's

00:08:20,450 --> 00:08:25,220
how we written there

00:08:22,160 --> 00:08:27,560
so you you go from from from the bpmn

00:08:25,220 --> 00:08:29,920
you model your process but at the end of

00:08:27,560 --> 00:08:33,260
the day you are creating microsoft

00:08:29,920 --> 00:08:36,680
exposes this ApS for you to interact

00:08:33,260 --> 00:08:39,080
with the process from this point all of

00:08:36,680 --> 00:08:41,610
this is auto-generated is based on the

00:08:39,080 --> 00:08:43,800
domain model that you

00:08:41,610 --> 00:08:47,370
or the poetry classes that you put in

00:08:43,800 --> 00:08:51,000
the process so there is nothing on on

00:08:47,370 --> 00:08:54,720
this so for instance this is the

00:08:51,000 --> 00:08:56,850
rainforest process we have a post here

00:08:54,720 --> 00:08:58,740
that's where you're going to start your

00:08:56,850 --> 00:09:00,510
process pushing your domain there's

00:08:58,740 --> 00:09:02,640
nothing specifically about cachito api

00:09:00,510 --> 00:09:06,000
in there is just pushing the domain of

00:09:02,640 --> 00:09:08,339
course if you need more than that if you

00:09:06,000 --> 00:09:10,649
still want to know about the specific or

00:09:08,339 --> 00:09:16,320
the internals of Cochiti you can for

00:09:10,649 --> 00:09:19,550
instance have extra atom which is called

00:09:16,320 --> 00:09:21,480
management atom that expose more

00:09:19,550 --> 00:09:23,550
endpoints for you to deal with the

00:09:21,480 --> 00:09:29,490
specifics of the pair and information

00:09:23,550 --> 00:09:32,850
process yeah yeah so we've caused you to

00:09:29,490 --> 00:09:35,850
so right before you get this end point

00:09:32,850 --> 00:09:39,180
auto-generated and the the way it works

00:09:35,850 --> 00:09:43,500
is that we expose a few add-ons that's

00:09:39,180 --> 00:09:45,269
depending on your need if you guys saw

00:09:43,500 --> 00:09:46,410
the present the previous presentation

00:09:45,269 --> 00:09:49,380
from the QE guys

00:09:46,410 --> 00:09:52,079
they showed all the different options

00:09:49,380 --> 00:09:55,410
you could have including persistence

00:09:52,079 --> 00:09:57,390
including Kafka data index and all of

00:09:55,410 --> 00:09:59,880
that so those are add-ons that are

00:09:57,390 --> 00:10:02,550
published with Cochiti so you can choose

00:09:59,880 --> 00:10:04,740
and pick which ones are needed for your

00:10:02,550 --> 00:10:06,540
solution that you need to build and then

00:10:04,740 --> 00:10:09,300
you start adding like management you

00:10:06,540 --> 00:10:12,209
start adding events with Kafka you start

00:10:09,300 --> 00:10:15,180
adding persistence with infinite spell

00:10:12,209 --> 00:10:20,820
it really depends on on on the solution

00:10:15,180 --> 00:10:24,209
that you're trying to to create as I

00:10:20,820 --> 00:10:28,100
said like we don't really enforce you to

00:10:24,209 --> 00:10:31,290
use Quercus or you still can use

00:10:28,100 --> 00:10:33,180
Springwood but for instance with parties

00:10:31,290 --> 00:10:34,440
we can generate a native application

00:10:33,180 --> 00:10:37,560
with cojito

00:10:34,440 --> 00:10:39,990
and that's pretty huge so if you look at

00:10:37,560 --> 00:10:43,110
startup time of this application there's

00:10:39,990 --> 00:10:45,810
a full application based on Koshiro and

00:10:43,110 --> 00:10:50,569
Farkus it start-ups in less than a

00:10:45,810 --> 00:10:53,540
second 0.03 Michael

00:10:50,569 --> 00:10:57,980
so that's that's pretty good all right

00:10:53,540 --> 00:11:01,399
so that's with carcass you do have a way

00:10:57,980 --> 00:11:03,680
to generate native native applications

00:11:01,399 --> 00:11:06,189
and push that into darker image and push

00:11:03,680 --> 00:11:10,910
global shift and that's what you get

00:11:06,189 --> 00:11:14,290
right so we have Dakota travel agency we

00:11:10,910 --> 00:11:16,759
are just going to we are not going to go

00:11:14,290 --> 00:11:20,870
too much deep into that we just wanna

00:11:16,759 --> 00:11:22,610
show from that's too much stopping from

00:11:20,870 --> 00:11:24,589
where the guy stopped on the previous

00:11:22,610 --> 00:11:27,379
presentation we are take from that and

00:11:24,589 --> 00:11:45,199
see the application running on open

00:11:27,379 --> 00:11:47,959
shift everything the visa process the

00:11:45,199 --> 00:11:56,930
travel process you know and then they

00:11:47,959 --> 00:12:00,949
are just what we're doing here is the

00:11:56,930 --> 00:12:06,709
visa process and we have their separate

00:12:00,949 --> 00:12:09,819
process because there are different

00:12:06,709 --> 00:12:13,360
macro services they act independently

00:12:09,819 --> 00:12:17,809
and then they are both using the same

00:12:13,360 --> 00:12:20,449
infinite persistence tour and they are

00:12:17,809 --> 00:12:22,339
using Kefka for communicating with each

00:12:20,449 --> 00:12:25,220
other so for example if you need visa

00:12:22,339 --> 00:12:27,439
you can send a message to the visa micro

00:12:25,220 --> 00:12:30,769
service saying oh this person is visa so

00:12:27,439 --> 00:12:32,990
process that you know we are not calling

00:12:30,769 --> 00:12:36,290
that directly that's the main difference

00:12:32,990 --> 00:12:38,329
we are we have this even basing

00:12:36,290 --> 00:12:41,329
architecture building talk of ownership

00:12:38,329 --> 00:12:43,220
with Kafka infamy spam you know as a

00:12:41,329 --> 00:12:46,879
backup as a infrastructure backup and

00:12:43,220 --> 00:12:49,009
not everything else they're being

00:12:46,879 --> 00:12:53,839
administered by our Kochi to operator

00:12:49,009 --> 00:12:56,660
that is an operator is briefly Cuban

00:12:53,839 --> 00:13:00,680
Aires applications of cube analysis that

00:12:56,660 --> 00:13:02,240
you know the mainstream cube containers

00:13:00,680 --> 00:13:05,990
repres dictionary market everyone is

00:13:02,240 --> 00:13:07,820
using cubanelles nowadays and smarter

00:13:05,990 --> 00:13:12,470
people thinking about something like

00:13:07,820 --> 00:13:14,890
well if we extend this kubernetes you

00:13:12,470 --> 00:13:17,750
know the devastation containers for

00:13:14,890 --> 00:13:19,430
others to write applications there so

00:13:17,750 --> 00:13:21,710
that we are taught what we are doing we

00:13:19,430 --> 00:13:25,400
are creating you know an application

00:13:21,710 --> 00:13:27,050
that manage other applications that and

00:13:25,400 --> 00:13:29,900
I'll provide the infrastructure for

00:13:27,050 --> 00:13:32,950
everything for catechol well if you if

00:13:29,900 --> 00:13:36,620
you come up with well my process needs

00:13:32,950 --> 00:13:40,490
inventing into messin what can I do you

00:13:36,620 --> 00:13:43,100
just I need something you know Joe to

00:13:40,490 --> 00:13:44,900
send message there is something that

00:13:43,100 --> 00:13:48,050
exists in the market that cost Kafka

00:13:44,900 --> 00:13:50,300
that we can actually deploy the server

00:13:48,050 --> 00:13:53,930
into the OpenShift and use that you know

00:13:50,300 --> 00:13:55,490
in who is going to deploy that for me

00:13:53,930 --> 00:13:57,950
you're ready we'll do that for you

00:13:55,490 --> 00:14:00,440
so if you don't need to worry anything

00:13:57,950 --> 00:14:02,240
like that just you know deploy your

00:14:00,440 --> 00:14:05,840
service the operator will be smart

00:14:02,240 --> 00:14:08,630
enough to realize that you need you

00:14:05,840 --> 00:14:12,670
deploy the participant service and if

00:14:08,630 --> 00:14:12,670
you deploy the messenger service for you

00:14:13,870 --> 00:14:22,250
just yeah so again so this is the same

00:14:17,680 --> 00:14:23,990
process we we saw before so you know

00:14:22,250 --> 00:14:26,270
starting the process of emitting a

00:14:23,990 --> 00:14:28,940
travel request and then we have two

00:14:26,270 --> 00:14:31,220
other cert process there we've seen this

00:14:28,940 --> 00:14:33,710
one before just regarding the

00:14:31,220 --> 00:14:35,980
architecture what we are going to show

00:14:33,710 --> 00:14:37,970
here is there we have this to

00:14:35,980 --> 00:14:41,720
microservices so there are two

00:14:37,970 --> 00:14:43,850
independent processes right and what's

00:14:41,720 --> 00:14:47,810
happening there is that they are using

00:14:43,850 --> 00:14:50,780
if in spam as key value store to persist

00:14:47,810 --> 00:14:54,740
the the state of the process and they're

00:14:50,780 --> 00:14:57,230
also sending events through Kafka where

00:14:54,740 --> 00:15:01,610
this data index herbs is consuming the

00:14:57,230 --> 00:15:03,890
data so with the data index itself the

00:15:01,610 --> 00:15:06,440
data index is it's a service that we

00:15:03,890 --> 00:15:08,720
provide out of the box and the ideal if

00:15:06,440 --> 00:15:11,720
the services that it listens

00:15:08,720 --> 00:15:14,000
for all of the micro services that

00:15:11,720 --> 00:15:16,610
they're running and have them capability

00:15:14,000 --> 00:15:17,480
of sending events through cognitive

00:15:16,610 --> 00:15:20,959
runtime

00:15:17,480 --> 00:15:24,410
so if you imagine this is to micro

00:15:20,959 --> 00:15:26,870
services they could be expand to I don't

00:15:24,410 --> 00:15:29,000
know hundreds of instances of different

00:15:26,870 --> 00:15:31,189
pods into open shoes so you need that

00:15:29,000 --> 00:15:33,050
single place that escaped above

00:15:31,189 --> 00:15:34,790
combining all of the information of the

00:15:33,050 --> 00:15:38,269
process instances they're run

00:15:34,790 --> 00:15:40,100
so from at certain point in time you

00:15:38,269 --> 00:15:42,259
want to see and you want to know the

00:15:40,100 --> 00:15:44,920
state of the processes that are running

00:15:42,259 --> 00:15:47,810
on your environment and that's where

00:15:44,920 --> 00:15:50,000
you're gonna get the information through

00:15:47,810 --> 00:15:54,800
the data X so the domain is also using

00:15:50,000 --> 00:15:58,310
infinite span as storage just just a

00:15:54,800 --> 00:16:00,230
comment on the messaging we are using

00:15:58,310 --> 00:16:04,399
katka but could you do itself supports

00:16:00,230 --> 00:16:09,319
not only every single messaging provided

00:16:04,399 --> 00:16:13,009
that's compatible with small really

00:16:09,319 --> 00:16:17,329
which is the my crop of profile API you

00:16:13,009 --> 00:16:20,269
can hook into kocha to the other thing

00:16:17,329 --> 00:16:23,930
we are just showing here another

00:16:20,269 --> 00:16:26,180
capability is that for every credit of

00:16:23,930 --> 00:16:29,540
runtime as part of the add-ons that we

00:16:26,180 --> 00:16:33,279
have we have one that's called matrix

00:16:29,540 --> 00:16:35,600
and that expose and a rest endpoint to

00:16:33,279 --> 00:16:38,779
permit you so you can plug from meters

00:16:35,600 --> 00:16:41,269
to scrape the data from from these

00:16:38,779 --> 00:16:44,509
runtimes and then create some some nice

00:16:41,269 --> 00:16:46,610
graph on top of that right so that's

00:16:44,509 --> 00:16:51,139
seven you get let's say out of the box

00:16:46,610 --> 00:16:56,360
if you use the matrix atom from from

00:16:51,139 --> 00:17:01,329
cojito alright so now we are going to

00:16:56,360 --> 00:17:05,959
jump into the actual demo on openshift

00:17:01,329 --> 00:17:08,089
let me just see here what we have so

00:17:05,959 --> 00:17:11,000
that's the application running on up a

00:17:08,089 --> 00:17:13,909
shift we can see that's the causative

00:17:11,000 --> 00:17:17,329
users Def Con which is the project that

00:17:13,909 --> 00:17:20,569
was created so I'm just going to come in

00:17:17,329 --> 00:17:25,639
here and create a new travel request

00:17:20,569 --> 00:17:32,019
and streets or on Brasilia Brazil and

00:17:25,639 --> 00:17:32,019
when I go to Australia Brisbane alright

00:17:35,259 --> 00:17:42,649
okay so that's the the latest one that

00:17:38,690 --> 00:17:46,580
was created so as part of the rules that

00:17:42,649 --> 00:17:50,830
we that we added to this micro service

00:17:46,580 --> 00:17:54,259
it's saying that it needs a visa right

00:17:50,830 --> 00:17:57,139
in that what's gonna happen is that we

00:17:54,259 --> 00:18:00,169
have a separate application another

00:17:57,139 --> 00:18:06,289
micro service that's having just the

00:18:00,169 --> 00:18:11,690
application for visas which is this one

00:18:06,289 --> 00:18:15,379
here alright so when the process reaches

00:18:11,690 --> 00:18:18,220
the point that it needs a visa it

00:18:15,379 --> 00:18:20,899
actually sends an event through Kafka

00:18:18,220 --> 00:18:22,820
right so he publishes a message and the

00:18:20,899 --> 00:18:27,669
other Microsoft signals is listening for

00:18:22,820 --> 00:18:30,740
that message yeah

00:18:27,669 --> 00:18:39,159
so if you go there and apply for the

00:18:30,740 --> 00:18:45,559
visa application to the trip so now the

00:18:39,159 --> 00:18:47,690
visitation will see ya there is a

00:18:45,559 --> 00:18:50,480
requirement and then someone else can

00:18:47,690 --> 00:18:52,940
approve that proof of how for example I

00:18:50,480 --> 00:18:55,730
have the best part of the guy I have the

00:18:52,940 --> 00:18:57,889
you know the idea of him then you know

00:18:55,730 --> 00:19:01,610
all the paperwork that indignity of the

00:18:57,889 --> 00:19:04,220
visa and I can reject or not prove the

00:19:01,610 --> 00:19:08,149
visa so here going to prove that I'm

00:19:04,220 --> 00:19:11,179
going to proceed on our affirming and

00:19:08,149 --> 00:19:13,580
now we have booked a hotel and book a

00:19:11,179 --> 00:19:16,460
flight for him so because the visa was

00:19:13,580 --> 00:19:18,769
approved okay so we have this shoe

00:19:16,460 --> 00:19:20,970
services communicated with each other

00:19:18,769 --> 00:19:22,830
without rests and other

00:19:20,970 --> 00:19:24,600
anything like that in the media we have

00:19:22,830 --> 00:19:27,659
a cloudy event is king

00:19:24,600 --> 00:19:29,700
we have event-driven architecture so and

00:19:27,659 --> 00:19:32,070
how we're able to do that we are doing

00:19:29,700 --> 00:19:35,400
that with Kafka so let me send a message

00:19:32,070 --> 00:19:37,890
for Kafka hello listen I need a visa and

00:19:35,400 --> 00:19:39,750
then someone else in there actually

00:19:37,890 --> 00:19:41,580
listen to that we will serve that

00:19:39,750 --> 00:19:43,320
training and will receive the message

00:19:41,580 --> 00:19:46,200
you will find the fees I will proceed

00:19:43,320 --> 00:19:50,070
with that I can't actually miss mom

00:19:46,200 --> 00:19:56,220
mucho services there that can for

00:19:50,070 --> 00:19:57,900
example have actually helped me with the

00:19:56,220 --> 00:20:00,809
visa for example so I have another

00:19:57,900 --> 00:20:03,870
service there you know that someone will

00:20:00,809 --> 00:20:05,880
receive a message hey look there's a

00:20:03,870 --> 00:20:07,740
piece of request in the service

00:20:05,880 --> 00:20:09,870
architecture in the context here in this

00:20:07,740 --> 00:20:11,820
scenario so do something with that like

00:20:09,870 --> 00:20:15,450
you can send in major a gallery leave

00:20:11,820 --> 00:20:19,320
that visa prepare yourself to face the

00:20:15,450 --> 00:20:21,780
people you know that's the disguise

00:20:19,320 --> 00:20:24,960
limit so you can do whatever you want

00:20:21,780 --> 00:20:27,240
with this cloud you maintain the

00:20:24,960 --> 00:20:28,950
architecture you want time to gather

00:20:27,240 --> 00:20:30,809
your service they are acting by

00:20:28,950 --> 00:20:32,340
themselves that that's the beauty of the

00:20:30,809 --> 00:20:33,770
micro service make sure it's not just

00:20:32,340 --> 00:20:36,390
you know taking a monolithic

00:20:33,770 --> 00:20:38,490
architecture and break it down in small

00:20:36,390 --> 00:20:40,890
part and say oh I have my sources

00:20:38,490 --> 00:20:42,990
if you tie them to the other like though

00:20:40,890 --> 00:20:46,700
I depend on that interface they depend

00:20:42,990 --> 00:20:46,700
on that rest and point and build up

00:20:49,880 --> 00:20:59,460
things will be tough for me to you know

00:20:53,940 --> 00:21:01,710
to actually scale or service there are

00:20:59,460 --> 00:21:04,200
vertical imagine that we have the visa

00:21:01,710 --> 00:21:05,789
and drive application when on I need a

00:21:04,200 --> 00:21:08,640
visa a track application we will post a

00:21:05,789 --> 00:21:10,440
request an actual request to the end

00:21:08,640 --> 00:21:14,460
point of the visa what are gonna happen

00:21:10,440 --> 00:21:16,080
if I lost my visa application event you

00:21:14,460 --> 00:21:20,940
know to see a lot of airports in one

00:21:16,080 --> 00:21:22,650
interface and the users but in this in

00:21:20,940 --> 00:21:25,470
this case we have a synchronous process

00:21:22,650 --> 00:21:27,570
so I just put something in the stream

00:21:25,470 --> 00:21:34,610
with something in the queue and someone

00:21:27,570 --> 00:21:37,649
else so that's the the beauty of the

00:21:34,610 --> 00:21:40,200
fainting attacker I can just you know

00:21:37,649 --> 00:21:42,299
delete the part of my visa and proceed

00:21:40,200 --> 00:21:44,399
with the visa check and if they were

00:21:42,299 --> 00:21:56,850
there waiting for someone to catch the

00:21:44,399 --> 00:21:59,580
message and okay so go a little bit

00:21:56,850 --> 00:22:01,799
further with the data index service that

00:21:59,580 --> 00:22:07,280
I wish has anyone here worked with

00:22:01,799 --> 00:22:10,770
graphed well already yeah so yeah so we

00:22:07,280 --> 00:22:14,429
had like a really good experience for

00:22:10,770 --> 00:22:18,990
doing this this service and what this

00:22:14,429 --> 00:22:23,669
search is capable of remember that I

00:22:18,990 --> 00:22:25,620
think we we mention on the on the

00:22:23,669 --> 00:22:27,570
previous presentations that we were not

00:22:25,620 --> 00:22:30,330
with coach it it's not only about the

00:22:27,570 --> 00:22:32,100
run time we also want to make two other

00:22:30,330 --> 00:22:34,020
things very important one is the

00:22:32,100 --> 00:22:35,520
developer experience when we want to

00:22:34,020 --> 00:22:38,549
make it as easy as possible to create

00:22:35,520 --> 00:22:40,530
those microservice and we also want to

00:22:38,549 --> 00:22:42,780
help the developer to focus on the

00:22:40,530 --> 00:22:43,590
business domain that you know that they

00:22:42,780 --> 00:22:46,350
are trying to solve

00:22:43,590 --> 00:22:50,880
so with that for instance with this data

00:22:46,350 --> 00:22:54,809
index API service that we created we

00:22:50,880 --> 00:22:57,870
have a schema with graphical that's able

00:22:54,809 --> 00:23:00,419
to not only expose the technical

00:22:57,870 --> 00:23:03,110
information which is process instance

00:23:00,419 --> 00:23:05,309
and user task instances so that's the

00:23:03,110 --> 00:23:07,110
internals of cachito

00:23:05,309 --> 00:23:09,570
right so those are the process and the

00:23:07,110 --> 00:23:12,720
tasks but we are also exposing the data

00:23:09,570 --> 00:23:14,909
about the micro services themselves so

00:23:12,720 --> 00:23:18,390
we have the travels which is the domain

00:23:14,909 --> 00:23:20,820
of the first application that we saw

00:23:18,390 --> 00:23:22,860
where I submit the travel and we have

00:23:20,820 --> 00:23:27,780
the visa applications which is the

00:23:22,860 --> 00:23:31,010
domain of the visa handling specific

00:23:27,780 --> 00:23:32,430
application so what can we do with that

00:23:31,010 --> 00:23:36,960
so

00:23:32,430 --> 00:23:39,900
let me just close it here so this is the

00:23:36,960 --> 00:23:42,240
API that we created so for instance if

00:23:39,900 --> 00:23:45,059
I'm looking at the process instance I

00:23:42,240 --> 00:23:47,790
can go in that and get the details of

00:23:45,059 --> 00:23:50,490
just the active process instance so I

00:23:47,790 --> 00:23:53,400
have a pretty good future in capability

00:23:50,490 --> 00:23:56,520
here and I can get the details of the

00:23:53,400 --> 00:23:59,760
current processes that are running that

00:23:56,520 --> 00:24:02,490
the nice thing about graph code is that

00:23:59,760 --> 00:24:06,990
only returns what you need and I also

00:24:02,490 --> 00:24:09,030
give you the schema where you know it

00:24:06,990 --> 00:24:11,429
has the attributes the specific

00:24:09,030 --> 00:24:13,380
attributes that you want to search for

00:24:11,429 --> 00:24:17,160
so if I wanted to include the process

00:24:13,380 --> 00:24:22,980
name I can do that so the UI that you

00:24:17,160 --> 00:24:25,380
guys saw in here and here this to you is

00:24:22,980 --> 00:24:28,050
these two tables they're built using

00:24:25,380 --> 00:24:32,730
Hrothgar so that's the exact same thing

00:24:28,050 --> 00:24:36,000
that I run in here so but in this case

00:24:32,730 --> 00:24:38,850
here I'm looking at the technical

00:24:36,000 --> 00:24:41,640
details of the process but let's say

00:24:38,850 --> 00:24:45,870
that we are interested on looking at

00:24:41,640 --> 00:24:48,450
deed pieces right so here's of all my

00:24:45,870 --> 00:24:57,900
domains all right so I have the visa

00:24:48,450 --> 00:25:02,070
applications expand their application

00:24:57,900 --> 00:25:03,290
which is my object and then I can check

00:25:02,070 --> 00:25:09,860
if it is approved

00:25:03,290 --> 00:25:14,340
city let's say the nationality right

00:25:09,860 --> 00:25:16,320
there it is so if you guys can see like

00:25:14,340 --> 00:25:18,210
there is nothing specifically about Cody

00:25:16,320 --> 00:25:21,540
to here so we are just search on the

00:25:18,210 --> 00:25:24,179
domain of this application itself right

00:25:21,540 --> 00:25:26,640
so if you if you have to build let's say

00:25:24,179 --> 00:25:30,929
a mobile application using graphical

00:25:26,640 --> 00:25:32,790
that's how you can hook up into the data

00:25:30,929 --> 00:25:35,880
part of fujita

00:25:32,790 --> 00:25:39,660
all right so let's say that now I'm

00:25:35,880 --> 00:25:42,360
doing mobile application that needs to

00:25:39,660 --> 00:25:45,970
show on the UI for someone to actually

00:25:42,360 --> 00:25:54,130
approve the applications that are not

00:25:45,970 --> 00:25:56,230
right so how I can do that just here so

00:25:54,130 --> 00:26:00,700
I have this where order by and

00:25:56,230 --> 00:26:06,520
pagination at capabilities so today

00:26:00,700 --> 00:26:08,110
we're part and then I can get into the

00:26:06,520 --> 00:26:11,170
domain again so those are the attributes

00:26:08,110 --> 00:26:15,430
of TV's application so I'm gonna get

00:26:11,170 --> 00:26:17,040
into the visa application itself open up

00:26:15,430 --> 00:26:30,670
again

00:26:17,040 --> 00:26:31,530
I'm gonna save approved equal Joe or

00:26:30,670 --> 00:26:38,320
false

00:26:31,530 --> 00:26:43,000
alright so that's right so there's only

00:26:38,320 --> 00:26:45,610
one end in there so again so I'm looking

00:26:43,000 --> 00:26:48,540
at the domain I'm asking for approved

00:26:45,610 --> 00:26:51,630
equals false and I get the current

00:26:48,540 --> 00:26:54,100
application that's pending to be

00:26:51,630 --> 00:26:57,970
approved so that's that's pretty

00:26:54,100 --> 00:27:00,940
powerful as you guys can see if you need

00:26:57,970 --> 00:27:03,270
to build our UI on top of the services

00:27:00,940 --> 00:27:06,970
of course YouTube that's the sort of

00:27:03,270 --> 00:27:12,430
capability we can provide in there of

00:27:06,970 --> 00:27:15,220
course so if you from the domain

00:27:12,430 --> 00:27:17,470
perspective right so you found the

00:27:15,220 --> 00:27:19,690
application that's missing to be

00:27:17,470 --> 00:27:23,170
approved but let's say now you you

00:27:19,690 --> 00:27:25,570
actually want to know which process is

00:27:23,170 --> 00:27:28,000
related to this one so you can actually

00:27:25,570 --> 00:27:33,460
look into the metadata of the visa

00:27:28,000 --> 00:27:37,030
application process instances and give

00:27:33,460 --> 00:27:43,870
me the ID and the process name from

00:27:37,030 --> 00:27:45,820
which sorry process ID from each data

00:27:43,870 --> 00:27:49,870
application is related so I have the

00:27:45,820 --> 00:27:51,880
idea of the process that numerical there

00:27:49,870 --> 00:27:52,710
and the process ID which is visible

00:27:51,880 --> 00:27:55,769
occasion

00:27:52,710 --> 00:27:57,899
check back actually you know stop then

00:27:55,769 --> 00:28:00,960
do something about it you know there is

00:27:57,899 --> 00:28:03,779
tracking you know and that is yours you

00:28:00,960 --> 00:28:07,409
can scrape through through you know and

00:28:03,779 --> 00:28:09,929
looking into it a new program can create

00:28:07,409 --> 00:28:12,749
reports for example you can create the

00:28:09,929 --> 00:28:17,690
Spach mail messages you can actually

00:28:12,749 --> 00:28:20,639
have whatever you want because we are

00:28:17,690 --> 00:28:23,700
doing that with JSON files and with

00:28:20,639 --> 00:28:27,840
requests and get an episode all with the

00:28:23,700 --> 00:28:30,090
standard tools this is nothing time with

00:28:27,840 --> 00:28:33,149
gordito tied if it became tie with

00:28:30,090 --> 00:28:38,509
anything it's just your data and you're

00:28:33,149 --> 00:28:42,090
just scratching the data using start so

00:28:38,509 --> 00:28:47,369
it's sorry I get what excited about this

00:28:42,090 --> 00:28:49,649
because it's writing this stuff so not

00:28:47,369 --> 00:28:53,249
only the acquiring capabilities but if

00:28:49,649 --> 00:28:56,279
we're looking to the api's for graph QL

00:28:53,249 --> 00:28:58,679
it does support something other that's

00:28:56,279 --> 00:29:00,860
really nice which is this subscriptions

00:28:58,679 --> 00:29:04,710
so we actually have a model for

00:29:00,860 --> 00:29:07,440
subscriptions here again I can subscribe

00:29:04,710 --> 00:29:10,830
to events related to process instances

00:29:07,440 --> 00:29:12,480
or user tasks which come by default with

00:29:10,830 --> 00:29:15,980
the data enix but depending on your

00:29:12,480 --> 00:29:19,529
model then we create the domain-specific

00:29:15,980 --> 00:29:22,019
subscriptions so what a subscription is

00:29:19,529 --> 00:29:24,779
it's just a WebSocket a push back

00:29:22,019 --> 00:29:28,139
notification right from the server so if

00:29:24,779 --> 00:29:31,529
my applications is subscribed to a

00:29:28,139 --> 00:29:34,529
travels added event

00:29:31,529 --> 00:29:36,629
anytime someone every time the data

00:29:34,529 --> 00:29:39,539
index received an event from any runtime

00:29:36,629 --> 00:29:41,220
on your architecture that added and new

00:29:39,539 --> 00:29:46,049
travels you're going to get a push

00:29:41,220 --> 00:29:49,440
notification back how that works if you

00:29:46,049 --> 00:29:53,220
guys actually see or saw when I push a

00:29:49,440 --> 00:30:00,260
new travel here I actually got a refresh

00:29:53,220 --> 00:30:04,000
on the page that was done via source

00:30:00,260 --> 00:30:08,630
to show that that was done via the

00:30:04,000 --> 00:30:11,330
subscription for the dead and eggs so in

00:30:08,630 --> 00:30:13,990
here this is just a plain WebSocket so

00:30:11,330 --> 00:30:17,780
what happens here somes

00:30:13,990 --> 00:30:20,480
subscribing to the travels update event

00:30:17,780 --> 00:30:23,270
and I asking for the ID the traveler the

00:30:20,480 --> 00:30:28,220
neck lastname firstname you made the

00:30:23,270 --> 00:30:40,760
tree lalala so this whole uy here

00:30:28,220 --> 00:30:43,310
it's beaut and react based yeah you know

00:30:40,760 --> 00:30:45,140
oh we have Tuesday's coogee to rest or

00:30:43,310 --> 00:30:47,210
this could eat with guys nothing like

00:30:45,140 --> 00:30:49,040
that you know you don't even know that

00:30:47,210 --> 00:30:51,860
you're running a bpmn process behind

00:30:49,040 --> 00:30:54,380
that so that's the nice thing there you

00:30:51,860 --> 00:30:58,040
hide implementation and you show on the

00:30:54,380 --> 00:31:00,320
interface that's the you know one of the

00:30:58,040 --> 00:31:02,750
nice things about the software engineer

00:31:00,320 --> 00:31:05,030
that is you know hiding permutation or

00:31:02,750 --> 00:31:08,390
from the client so you can actually have

00:31:05,030 --> 00:31:10,250
a nice interface playing interface with

00:31:08,390 --> 00:31:14,150
your data if your domain and you cannot

00:31:10,250 --> 00:31:16,970
act actually work with that so that's

00:31:14,150 --> 00:31:19,150
the the thing that we want to achieve we

00:31:16,970 --> 00:31:22,160
want to expose your domain data and

00:31:19,150 --> 00:31:24,290
behind some business automation and

00:31:22,160 --> 00:31:27,560
intelligence process know that's the

00:31:24,290 --> 00:31:31,010
that's the thing we don't want to you

00:31:27,560 --> 00:31:33,560
know to being the saying like all let's

00:31:31,010 --> 00:31:35,870
do BPM and let's do drew the net Saturno

00:31:33,560 --> 00:31:38,540
we're trying to what you are trying to

00:31:35,870 --> 00:31:40,970
achieve is exposing your domain data in

00:31:38,540 --> 00:31:42,530
a smart way so you use your structure

00:31:40,970 --> 00:31:46,700
you just know

00:31:42,530 --> 00:31:48,710
great choice lecture mix things with

00:31:46,700 --> 00:31:51,590
your structure and link them like a

00:31:48,710 --> 00:31:54,380
Millikan traveler with a trip so this is

00:31:51,590 --> 00:31:55,400
the beauty you show like your business

00:31:54,380 --> 00:31:56,800
you RPO

00:31:55,400 --> 00:31:59,110
you have a product owner first

00:31:56,800 --> 00:32:01,510
and you just realized how your domain

00:31:59,110 --> 00:32:05,410
that I reach you because each other so

00:32:01,510 --> 00:32:08,080
up so I'm going to create this travel

00:32:05,410 --> 00:32:10,750
application and add an entry and in the

00:32:08,080 --> 00:32:12,850
traveler and the visa ID all those kind

00:32:10,750 --> 00:32:15,280
of things then how they are going to

00:32:12,850 --> 00:32:18,370
know to talk with each other so I I

00:32:15,280 --> 00:32:21,310
design a process you know I go there and

00:32:18,370 --> 00:32:23,530
I design a process and I realize what it

00:32:21,310 --> 00:32:26,740
what I want and then you use could you

00:32:23,530 --> 00:32:29,170
to to power to that know to actually run

00:32:26,740 --> 00:32:31,720
that process for you so you create your

00:32:29,170 --> 00:32:34,360
domain you link things how they are

00:32:31,720 --> 00:32:36,180
going to do you describe your rules you

00:32:34,360 --> 00:32:39,340
scrub your business process and then you

00:32:36,180 --> 00:32:42,430
have put it to do the hard work for you

00:32:39,340 --> 00:32:45,370
that is taking everything there and put

00:32:42,430 --> 00:32:54,940
in the cloud so let's see how the budget

00:32:45,370 --> 00:32:57,520
is on the cloud yeah this is the

00:32:54,940 --> 00:33:01,920
cooperator that is the

00:32:57,520 --> 00:33:03,640
engine behind taking cachito from source

00:33:01,920 --> 00:33:06,790
into the operation

00:33:03,640 --> 00:33:11,100
so basically what we have is if you are

00:33:06,790 --> 00:33:11,100
design your process you start with a

00:33:11,820 --> 00:33:16,810
github but we can use whatever get

00:33:14,920 --> 00:33:19,410
solution that you have so you have a big

00:33:16,810 --> 00:33:22,210
project a pro story and you start

00:33:19,410 --> 00:33:25,990
creating your job by structure file out

00:33:22,210 --> 00:33:30,580
that the plain old Java file objects

00:33:25,990 --> 00:33:34,590
there and then you design a process is

00:33:30,580 --> 00:33:36,940
rude etc everything inside I get

00:33:34,590 --> 00:33:39,190
environment that get it put story and

00:33:36,940 --> 00:33:41,440
then you talk to Crystal crater hey

00:33:39,190 --> 00:33:43,720
here's my full story

00:33:41,440 --> 00:33:46,440
take this source files and putting the

00:33:43,720 --> 00:33:49,710
whole patient and by the way I met you

00:33:46,440 --> 00:33:52,769
resistance and reduce inventing we are

00:33:49,710 --> 00:33:55,379
working hard to have the operator to

00:33:52,769 --> 00:33:57,629
realize that your process need eventing

00:33:55,379 --> 00:34:00,899
be persistent need everything else oh we

00:33:57,629 --> 00:34:03,000
can actually do that for you what we

00:34:00,899 --> 00:34:08,490
won't even know it you know you won't

00:34:03,000 --> 00:34:12,030
even have to tell me that oh here's my

00:34:08,490 --> 00:34:14,940
source and you know do something with it

00:34:12,030 --> 00:34:16,919
put on a bishop and you know the boy -

00:34:14,940 --> 00:34:19,619
spend it like a fat apply everything for

00:34:16,919 --> 00:34:22,560
me and I just want to see my one of my

00:34:19,619 --> 00:34:27,329
service working I don't want you be

00:34:22,560 --> 00:34:28,980
aware of like thinking about well I need

00:34:27,329 --> 00:34:31,050
to think about the in explain how how

00:34:28,980 --> 00:34:36,690
can i deploy this module don't forget to

00:34:31,050 --> 00:34:38,220
have persistence topic and data and

00:34:36,690 --> 00:34:41,220
streaming you know this kind of stuff

00:34:38,220 --> 00:34:43,349
I just want to send a message and leave

00:34:41,220 --> 00:34:48,179
that to the operator so that's what

00:34:43,349 --> 00:34:53,069
you're doing and Joe well come on ok so

00:34:48,179 --> 00:34:55,679
to do that we need image so you know a

00:34:53,069 --> 00:34:57,690
little bit about containers you you

00:34:55,679 --> 00:35:02,250
realize that you need images to do that

00:34:57,690 --> 00:35:06,030
so we have our own images for particles

00:35:02,250 --> 00:35:08,160
and if our spring book so whatever

00:35:06,030 --> 00:35:09,599
runtime you have quark was always

00:35:08,160 --> 00:35:12,569
bringing put it down to a break oh hey

00:35:09,599 --> 00:35:15,060
my my process I want quark is not

00:35:12,569 --> 00:35:18,150
spraying ok so generate the code using

00:35:15,060 --> 00:35:21,210
Farkas and then we use these images to

00:35:18,150 --> 00:35:24,420
build from source and to you know to

00:35:21,210 --> 00:35:26,400
come up with a final jar file final

00:35:24,420 --> 00:35:29,280
microservices file like the same file

00:35:26,400 --> 00:35:31,589
that the guys from the previous

00:35:29,280 --> 00:35:35,310
presentation show it to you guys like oh

00:35:31,589 --> 00:35:38,099
here's my Farkas application with this

00:35:35,310 --> 00:35:40,800
this Newburg jar file and we take this

00:35:38,099 --> 00:35:41,579
jar file and transform that into a fiery

00:35:40,800 --> 00:35:44,339
light wave

00:35:41,579 --> 00:35:46,800
image look here I have one Giga image

00:35:44,339 --> 00:35:48,990
because I have may even have to decay I

00:35:46,800 --> 00:35:51,180
have a lot of things here and in those

00:35:48,990 --> 00:35:53,880
image for runtime there is just the your

00:35:51,180 --> 00:35:54,510
application just the the jar file for

00:35:53,880 --> 00:35:58,040
application

00:35:54,510 --> 00:36:01,350
in anything more your image you know

00:35:58,040 --> 00:36:04,800
lied away and we have security because

00:36:01,350 --> 00:36:10,050
we are relying on how wait okay so we

00:36:04,800 --> 00:36:12,690
have limits eight being our base image

00:36:10,050 --> 00:36:16,680
so whatever you need for example a

00:36:12,690 --> 00:36:19,470
security issue on the on the operational

00:36:16,680 --> 00:36:22,230
system the guys from Red Hat group date

00:36:19,470 --> 00:36:25,380
the image and you're in the operatory

00:36:22,230 --> 00:36:29,460
update your runtimes automatically so

00:36:25,380 --> 00:36:31,560
also we have a neo and you see we have

00:36:29,460 --> 00:36:36,140
fixed your of times we have the Sigma a

00:36:31,560 --> 00:36:36,140
fixative as well that's the beauty well

00:36:38,240 --> 00:36:43,440
so this is the architecture that Jenna

00:36:41,100 --> 00:36:45,390
showed you guys you know the brand new

00:36:43,440 --> 00:36:48,510
york actually if the oh here is the

00:36:45,390 --> 00:36:51,390
Gogeta etc so how do we take that thing

00:36:48,510 --> 00:36:54,540
that the guys there are working and all

00:36:51,390 --> 00:36:57,300
locally because it is easy no it's their

00:36:54,540 --> 00:36:59,880
machine my machine works but how about

00:36:57,300 --> 00:37:02,130
open Chico how can i you know actually

00:36:59,880 --> 00:37:06,360
deploy that cue Burnett is on the

00:37:02,130 --> 00:37:09,900
bishops container installation solution

00:37:06,360 --> 00:37:15,570
so we think a lot about that and the

00:37:09,900 --> 00:37:18,660
widget operator is the infrastructure

00:37:15,570 --> 00:37:22,110
behind all all of it so we have for

00:37:18,660 --> 00:37:24,090
instance dependence on northern operator

00:37:22,110 --> 00:37:27,450
that's the strings that is no greater

00:37:24,090 --> 00:37:30,750
fork Africa I want you now to the boy

00:37:27,450 --> 00:37:32,670
Casca by myself I can you know delegate

00:37:30,750 --> 00:37:35,400
that to the screens that is on other

00:37:32,670 --> 00:37:37,770
Cuban edges of a traitor it's pretty

00:37:35,400 --> 00:37:42,030
popular and we are using that so when

00:37:37,770 --> 00:37:44,370
you stop you when you talk to 22 hey we

00:37:42,030 --> 00:37:46,830
need eventing okay so I'm going to

00:37:44,370 --> 00:37:50,580
install Kafka and I'm going just to say

00:37:46,830 --> 00:37:51,200
together install the topic installed it

00:37:50,580 --> 00:37:54,319
closer

00:37:51,200 --> 00:37:56,750
for me because my services are then

00:37:54,319 --> 00:37:59,180
choose that and the same for a Finnish

00:37:56,750 --> 00:38:02,000
man so if I mean persistence they think

00:37:59,180 --> 00:38:03,770
operator Rudy will deploy I think

00:38:02,000 --> 00:38:07,880
instant server and we're going to use

00:38:03,770 --> 00:38:11,089
that for persistent as well and we have

00:38:07,880 --> 00:38:13,250
our own custom resources if you know a

00:38:11,089 --> 00:38:15,260
little bit about to turn ends you'll see

00:38:13,250 --> 00:38:18,589
that we have some resources there that

00:38:15,260 --> 00:38:20,390
is deployment service there is an

00:38:18,589 --> 00:38:22,309
operation to help out we have the

00:38:20,390 --> 00:38:25,130
plumbing of the beautiful thing all of

00:38:22,309 --> 00:38:28,040
these are resources they call resources

00:38:25,130 --> 00:38:30,530
and decide kubernetes environment and as

00:38:28,040 --> 00:38:32,480
we are gradient custom kubernetes

00:38:30,530 --> 00:38:34,579
application we have a coastal resource

00:38:32,480 --> 00:38:36,950
that we call Koji to service that is

00:38:34,579 --> 00:38:39,650
your amount of time service is running

00:38:36,950 --> 00:38:42,380
in your picture so you can like for

00:38:39,650 --> 00:38:44,480
example Elsie get good G to apps and

00:38:42,380 --> 00:38:46,369
then you're going to miss Holly which to

00:38:44,480 --> 00:38:48,589
act as the final operation because of

00:38:46,369 --> 00:38:52,609
our repeater is offering this customer

00:38:48,589 --> 00:38:54,470
resource okay so besides could you two

00:38:52,609 --> 00:38:57,260
services we have we could you to

00:38:54,470 --> 00:38:59,960
dynamics as well so you can deploy nice

00:38:57,260 --> 00:39:04,430
known that I index there and then you

00:38:59,960 --> 00:39:06,890
touch the cogeco operator hey deployed a

00:39:04,430 --> 00:39:09,230
very expert me and for poetry's the

00:39:06,890 --> 00:39:11,480
Crypt operators smart enough to know

00:39:09,230 --> 00:39:13,099
that that in because I'm going to need a

00:39:11,480 --> 00:39:15,290
Afghani finished planner and then we did

00:39:13,099 --> 00:39:18,079
a pilot for you so with one line of code

00:39:15,290 --> 00:39:20,329
like the guys shoot you to back from the

00:39:18,079 --> 00:39:23,030
previous presentation when they type

00:39:20,329 --> 00:39:26,390
like would you to the service in staff

00:39:23,030 --> 00:39:29,059
in spam your yogi you're given a hint to

00:39:26,390 --> 00:39:31,369
the CLI to the operator that the in

00:39:29,059 --> 00:39:33,530
finish but in this case when the pointer

00:39:31,369 --> 00:39:35,480
index with that same tool they could you

00:39:33,530 --> 00:39:38,150
to see alive you do like could you to

00:39:35,480 --> 00:39:41,000
install the radix when you do that you

00:39:38,150 --> 00:39:43,700
can achieve create custom restores that

00:39:41,000 --> 00:39:45,470
we call puja total index and then the

00:39:43,700 --> 00:39:47,780
all things which are going to be

00:39:45,470 --> 00:39:50,059
provided for you the same you are doing

00:39:47,780 --> 00:39:52,010
right now for key clock as well so we

00:39:50,059 --> 00:39:57,170
are going to have access to coordinates

00:39:52,010 --> 00:39:59,750
within open shapes using Oracle 3 so

00:39:57,170 --> 00:40:01,550
this is other demo I guess we won't have

00:39:59,750 --> 00:40:05,300
much time to go through

00:40:01,550 --> 00:40:08,840
the thing ya found on the operator but

00:40:05,300 --> 00:40:10,790
I'm going to show something here that is

00:40:08,840 --> 00:40:12,860
pretty cool this is the product at that

00:40:10,790 --> 00:40:15,890
cough and here we have all the parts

00:40:12,860 --> 00:40:20,480
deployed on our architecture so what we

00:40:15,890 --> 00:40:23,540
have is the operators that I saw that I

00:40:20,480 --> 00:40:25,190
showed you guys so we have the operator

00:40:23,540 --> 00:40:27,170
and awesomest all the quit operator

00:40:25,190 --> 00:40:29,810
which we have installed in finished by

00:40:27,170 --> 00:40:32,720
operator and the operator as well and if

00:40:29,810 --> 00:40:34,550
you want to see your custom resources

00:40:32,720 --> 00:40:38,630
you can click here and you're going to

00:40:34,550 --> 00:40:40,400
see an user interface to index the

00:40:38,630 --> 00:40:42,260
tribal regions and vintage tribal

00:40:40,400 --> 00:40:44,180
witnessing business they're put to

00:40:42,260 --> 00:40:48,770
applications that I created you know

00:40:44,180 --> 00:40:51,040
this week and so ok which the operator

00:40:48,770 --> 00:40:54,800
please deploy those applications and

00:40:51,040 --> 00:40:56,930
cuto infra is a new custom resource that

00:40:54,800 --> 00:40:59,570
we came up with that is the orchestrator

00:40:56,930 --> 00:41:02,240
of the all-day infrastructure than the

00:40:59,570 --> 00:41:05,090
operations so also we create a call to

00:41:02,240 --> 00:41:08,470
infra with without them ok install for

00:41:05,090 --> 00:41:11,390
me Kefka hispanic or whatever any

00:41:08,470 --> 00:41:15,070
infrastructure alpha we have so for

00:41:11,390 --> 00:41:16,810
example if i go here we can see some

00:41:15,070 --> 00:41:20,570
[Music]

00:41:16,810 --> 00:41:23,180
values regarding no important properties

00:41:20,570 --> 00:41:26,660
regarding the digital service here and

00:41:23,180 --> 00:41:28,970
we have the source we have the runtime

00:41:26,660 --> 00:41:32,060
type we have the route that we can

00:41:28,970 --> 00:41:37,190
access the service what kind of

00:41:32,060 --> 00:41:41,810
installation mode i want further like I

00:41:37,190 --> 00:41:43,520
said here what else we have

00:41:41,810 --> 00:41:47,570
how many deployments we have right now

00:41:43,520 --> 00:41:49,010
for this service and of course so if we

00:41:47,570 --> 00:41:51,440
were talking about kubernetes we're

00:41:49,010 --> 00:41:51,650
talking about resources we're talking

00:41:51,440 --> 00:41:56,360
about

00:41:51,650 --> 00:41:58,370
yellow files yellow files so here's all

00:41:56,360 --> 00:42:00,530
the specification of the yellow files

00:41:58,370 --> 00:42:03,350
for this service so you can specify

00:42:00,530 --> 00:42:06,760
event to your you know environment

00:42:03,350 --> 00:42:09,220
variables you can specify the source and

00:42:06,760 --> 00:42:12,110
so on

00:42:09,220 --> 00:42:12,950
like the runtime for example is if I

00:42:12,110 --> 00:42:16,579
change the rent

00:42:12,950 --> 00:42:19,400
- sprinkles the Ruby is mine enough to

00:42:16,579 --> 00:42:21,230
change that and repute my service we

00:42:19,400 --> 00:42:22,820
using it spring put from times I don't

00:42:21,230 --> 00:42:25,670
know I don't need to do anything because

00:42:22,820 --> 00:42:29,030
the the rest and points will be the same

00:42:25,670 --> 00:42:33,520
you know just is the the heart of the

00:42:29,030 --> 00:42:36,770
crystal service or get you to change and

00:42:33,520 --> 00:42:39,349
also we also have the the other service

00:42:36,770 --> 00:42:44,200
I think it here okay that is critical

00:42:39,349 --> 00:42:46,910
visas and here that is a very tiny

00:42:44,200 --> 00:42:59,780
boolean value let me see if I put in

00:42:46,910 --> 00:43:01,900
here oh why is yeah nevermind I fathered

00:42:59,780 --> 00:43:01,900
AI

00:43:01,960 --> 00:43:10,609
field but I can't see here right now I

00:43:04,940 --> 00:43:14,359
just forget I just have to know but to

00:43:10,609 --> 00:43:17,270
tell you is that we have a native

00:43:14,359 --> 00:43:23,420
perspective as well so I can just do

00:43:17,270 --> 00:43:26,480
this and again say and make a say to the

00:43:23,420 --> 00:43:29,450
operator hey reviewed my service in

00:43:26,480 --> 00:43:32,569
native mode and I will have that running

00:43:29,450 --> 00:43:35,960
in native mode that means that the

00:43:32,569 --> 00:43:40,849
beauty time I will strip out all java

00:43:35,960 --> 00:43:43,660
code from my service and native

00:43:40,849 --> 00:43:47,150
application Java that bar is powered by

00:43:43,660 --> 00:43:49,569
VM and wireless so I want to change that

00:43:47,150 --> 00:43:52,700
ran out cuz take a lot of time tribute

00:43:49,569 --> 00:43:55,000
and I want to show you guys more things

00:43:52,700 --> 00:43:59,000
in these 10 minutes that I have so

00:43:55,000 --> 00:44:01,310
there's all these pods here they are all

00:43:59,000 --> 00:44:03,740
responsible to do something like the

00:44:01,310 --> 00:44:08,630
CAFTA pods the zookeeper paws that is

00:44:03,740 --> 00:44:10,760
the the pod that keeps my cat cut closer

00:44:08,630 --> 00:44:12,380
and I'm running and I don't need to

00:44:10,760 --> 00:44:14,869
don't you know nothing about that

00:44:12,380 --> 00:44:17,510
because the operator is doing his job of

00:44:14,869 --> 00:44:19,579
maintaining this these things working if

00:44:17,510 --> 00:44:21,700
you read delete something for example

00:44:19,579 --> 00:44:25,440
they operate for you

00:44:21,700 --> 00:44:28,360
well let's get back to the

00:44:25,440 --> 00:44:32,800
presentation because I want to show you

00:44:28,360 --> 00:44:37,780
guys why small demo in this five minutes

00:44:32,800 --> 00:44:39,280
like this is the more real-life example

00:44:37,780 --> 00:44:42,550
real-life demonstration that we have

00:44:39,280 --> 00:44:45,550
pretend you have in your company an

00:44:42,550 --> 00:44:48,250
application like oh I have a reactive

00:44:45,550 --> 00:44:49,930
interface I have a back-end I have

00:44:48,250 --> 00:44:52,270
another service that I can call and etc

00:44:49,930 --> 00:44:55,060
and it's all their service King call you

00:44:52,270 --> 00:44:59,350
know external services so for example we

00:44:55,060 --> 00:45:02,140
have this UI that is receiving some data

00:44:59,350 --> 00:45:05,380
from flow users in this case the

00:45:02,140 --> 00:45:07,510
location of theirs so what is your

00:45:05,380 --> 00:45:11,080
location where is their less than than

00:45:07,510 --> 00:45:13,450
legit so if this information I'm going

00:45:11,080 --> 00:45:15,940
to start a process that will gasp if

00:45:13,450 --> 00:45:18,460
it's gonna remain or not and to know

00:45:15,940 --> 00:45:20,890
that I need forecast information for the

00:45:18,460 --> 00:45:22,540
location of the user right and I don't

00:45:20,890 --> 00:45:25,780
know the forecast information I have to

00:45:22,540 --> 00:45:28,840
ask to an external services and to keep

00:45:25,780 --> 00:45:31,870
the all my external service into a

00:45:28,840 --> 00:45:35,110
unique interface I'm using here an epi a

00:45:31,870 --> 00:45:40,660
two-factor that's the using the cable

00:45:35,110 --> 00:45:43,750
framework have you guys before okay so

00:45:40,660 --> 00:45:45,670
it is a Java library for transformation

00:45:43,750 --> 00:45:48,100
and for integration of things so you can

00:45:45,670 --> 00:45:50,560
transform XML which we mo you can

00:45:48,100 --> 00:45:53,320
transform XML and yam okay so from

00:45:50,560 --> 00:45:56,370
anything to another anything okay so

00:45:53,320 --> 00:46:00,070
basically here my Peter is calling to

00:45:56,370 --> 00:46:05,680
weather services they have a similar

00:46:00,070 --> 00:46:06,520
domain model but their defi interface it

00:46:05,680 --> 00:46:08,980
is pretty different

00:46:06,520 --> 00:46:10,810
because Yahoo implements the their

00:46:08,980 --> 00:46:13,450
interface of weather like the way they

00:46:10,810 --> 00:46:16,750
they want you and you're walking weather

00:46:13,450 --> 00:46:18,850
as well but both can tell me if it's

00:46:16,750 --> 00:46:22,690
gonna rain or not in that location right

00:46:18,850 --> 00:46:27,850
so I just call this or that using a load

00:46:22,690 --> 00:46:29,830
balance feature here so I call the

00:46:27,850 --> 00:46:32,430
weapon weather and the other chemical

00:46:29,830 --> 00:46:35,549
Yahoo so it is nice because I

00:46:32,430 --> 00:46:38,609
limit bandwidth with both services so I

00:46:35,549 --> 00:46:42,690
can you know keep it calling it one and

00:46:38,609 --> 00:46:45,720
another each time so if you guys took

00:46:42,690 --> 00:46:46,740
your phone and find your camera to this

00:46:45,720 --> 00:46:49,529
you're going to see the application

00:46:46,740 --> 00:46:52,309
running in your phone so what is the

00:46:49,529 --> 00:46:59,269
what is what is the beauty of this thing

00:46:52,309 --> 00:46:59,269
you can actually well let me try it here

00:47:00,589 --> 00:47:09,539
I'm gonna open and what's gonna happen

00:47:06,869 --> 00:47:12,930
here myself when I went to send my

00:47:09,539 --> 00:47:15,359
location to the Fuji to service and

00:47:12,930 --> 00:47:19,859
equation service will call the camo and

00:47:15,359 --> 00:47:22,140
it will call the turn of services and we

00:47:19,859 --> 00:47:25,470
are going to know if you're gonna pay or

00:47:22,140 --> 00:47:28,049
not so we can safely go outside because

00:47:25,470 --> 00:47:30,720
it I'm not gonna rain so this is the

00:47:28,049 --> 00:47:38,190
real data the real example that we just

00:47:30,720 --> 00:47:41,009
did and we don't even you know we used

00:47:38,190 --> 00:47:43,650
the cloud with the cachito and we use a

00:47:41,009 --> 00:47:47,609
real-life application to do that you

00:47:43,650 --> 00:47:49,650
know and you guys that's nice

00:47:47,609 --> 00:47:52,739
although it is an awful project we can

00:47:49,650 --> 00:47:54,359
do things like this so let's see what

00:47:52,739 --> 00:47:56,609
are you are doing here our process is

00:47:54,359 --> 00:48:00,029
pretty simple we just get the weather

00:47:56,609 --> 00:48:02,339
forecast we call an external service and

00:48:00,029 --> 00:48:04,019
I'm going to show you guys how I call an

00:48:02,339 --> 00:48:05,400
external service and is external service

00:48:04,019 --> 00:48:09,630
or not I could you to service it is that

00:48:05,400 --> 00:48:12,690
another service here I have a business

00:48:09,630 --> 00:48:15,599
rule that will Shack for the output of

00:48:12,690 --> 00:48:19,410
this service like let me figure out with

00:48:15,599 --> 00:48:21,480
your data for any humidity the furniture

00:48:19,410 --> 00:48:23,220
and education with to an array or not

00:48:21,480 --> 00:48:25,680
and then I'm going to end the process

00:48:23,220 --> 00:48:28,170
this to process here just you know a

00:48:25,680 --> 00:48:30,660
scripting that is putting it on the log

00:48:28,170 --> 00:48:36,989
something cuz I'm nerdy I like to see

00:48:30,660 --> 00:48:40,650
this I'm doing that when we deploy our

00:48:36,989 --> 00:48:41,349
service we have Q Canary's API insider

00:48:40,650 --> 00:48:43,839
who

00:48:41,349 --> 00:48:46,749
service that is we called cloud services

00:48:43,839 --> 00:48:49,720
API that we have in Kochi talk and they

00:48:46,749 --> 00:48:52,660
this CPI this isn't far enough to know

00:48:49,720 --> 00:48:55,329
that the cuckoo is running kubernetes

00:48:52,660 --> 00:48:57,609
cluster and then he scrapped for service

00:48:55,329 --> 00:49:01,420
with this label and I told in the

00:48:57,609 --> 00:49:04,450
process that I looking for process that

00:49:01,420 --> 00:49:07,150
has this label on the service for chaos

00:49:04,450 --> 00:49:09,849
equal service if I have a service

00:49:07,150 --> 00:49:12,759
forecast equals service I'm going to

00:49:09,849 --> 00:49:17,049
call it using I specified interface of

00:49:12,759 --> 00:49:18,789
course and after that I'm going to

00:49:17,049 --> 00:49:21,180
decide it's gonna ran out it is pretty

00:49:18,789 --> 00:49:24,309
simple what what is the condition of the

00:49:21,180 --> 00:49:29,170
the output always range so it's gonna

00:49:24,309 --> 00:49:34,599
rain but we can't circulate this thing

00:49:29,170 --> 00:49:37,299
you know like much more about the the

00:49:34,599 --> 00:49:40,299
yahoo service and nothing like that I

00:49:37,299 --> 00:49:43,119
just want to know the about my domain

00:49:40,299 --> 00:49:45,880
data so I came out there is lady all the

00:49:43,119 --> 00:49:49,779
data from the yahoo and and opening

00:49:45,880 --> 00:49:52,119
weather into a common domain for a month

00:49:49,779 --> 00:49:54,519
that I understand and I use that domain

00:49:52,119 --> 00:49:56,529
assignment process you know that is

00:49:54,519 --> 00:50:03,849
another example for using your domain

00:49:56,529 --> 00:50:05,920
data to do nice things like so we have

00:50:03,849 --> 00:50:07,420
to see I did guys show it to you this

00:50:05,920 --> 00:50:11,259
common will des provide the service that

00:50:07,420 --> 00:50:13,690
you saw the whole architecture they hope

00:50:11,259 --> 00:50:15,670
that the zone is on github on this

00:50:13,690 --> 00:50:18,099
there's a link on the position are going

00:50:15,670 --> 00:50:20,950
to share what do we do guys and you can

00:50:18,099 --> 00:50:27,400
deploy new york kubernetes on your open

00:50:20,950 --> 00:50:29,920
ship which is out and those all the

00:50:27,400 --> 00:50:32,559
resources here and thank you thank you

00:50:29,920 --> 00:50:36,609
thank you very much this is the another

00:50:32,559 --> 00:50:40,499
care code at we love this it is a

00:50:36,609 --> 00:50:40,499
workshop that you can do

00:50:41,680 --> 00:50:46,029
you know that's a lot of instructions

00:50:44,230 --> 00:50:47,890
there are now how to get started with

00:50:46,029 --> 00:50:50,710
could you to be lonely unappreciated for

00:50:47,890 --> 00:50:53,230
this first part of the workshop we just

00:50:50,710 --> 00:50:57,640
went to build your first push to service

00:50:53,230 --> 00:51:00,039
and run run it locally and we we did

00:50:57,640 --> 00:51:03,880
that workshop yesterday was pretty fun

00:51:00,039 --> 00:51:07,930
to have that with the guys here and if

00:51:03,880 --> 00:51:12,690
in that workshop we also have a feedback

00:51:07,930 --> 00:51:15,549
link that is a feedback form that we

00:51:12,690 --> 00:51:18,309
look you know for opinions from

00:51:15,549 --> 00:51:21,339
outsiders like if they are using cachito

00:51:18,309 --> 00:51:24,250
if they are enjoying using editor if

00:51:21,339 --> 00:51:27,039
they have any questions or if they need

00:51:24,250 --> 00:51:30,609
something for us they could just ask

00:51:27,039 --> 00:51:33,819
here also we have development and Google

00:51:30,609 --> 00:51:35,799
Groups calm that is the our main list

00:51:33,819 --> 00:51:37,380
for development so you can know just

00:51:35,799 --> 00:51:40,270
send a message there oh I'm having

00:51:37,380 --> 00:51:42,400
trouble with because there is lane or

00:51:40,270 --> 00:51:49,029
there's something here that isn't

00:51:42,400 --> 00:51:51,819
working so feel free to reaches there I

00:51:49,029 --> 00:51:54,250
was going on Twitter so that's much more

00:51:51,819 --> 00:51:56,380
what we have to say oh yeah that's

00:51:54,250 --> 00:51:58,690
pretty much it so you guys can reach us

00:51:56,380 --> 00:52:01,960
on the google group there that's where

00:51:58,690 --> 00:52:05,859
the mailing list for the entire team is

00:52:01,960 --> 00:52:09,220
there we have the twitter handle for for

00:52:05,859 --> 00:52:13,210
the project as well and yeah if you guys

00:52:09,220 --> 00:52:22,619
have any questions now and he asked yeah

00:52:13,210 --> 00:52:22,619
yeah used to data index

00:52:31,300 --> 00:52:37,240
[Music]

00:52:34,060 --> 00:52:41,230
every time you do okay so that the

00:52:37,240 --> 00:52:44,560
question is that first where the graph

00:52:41,230 --> 00:52:48,040
service is deployed and the second is

00:52:44,560 --> 00:52:52,119
how the data X is capable of creating

00:52:48,040 --> 00:52:56,230
the domain specific domain right so I'm

00:52:52,119 --> 00:52:58,270
just showing the helping shape that is

00:52:56,230 --> 00:53:00,220
the endpoint for the graphic out that

00:52:58,270 --> 00:53:02,740
that's actually the only thing that the

00:53:00,220 --> 00:53:06,510
data exposed is the graphical point

00:53:02,740 --> 00:53:09,490
that's the only point that you can

00:53:06,510 --> 00:53:13,630
interact with that in X the second point

00:53:09,490 --> 00:53:17,470
is for when you enable persistence in to

00:53:13,630 --> 00:53:20,260
occur due to runtime application as we

00:53:17,470 --> 00:53:24,900
work with infinite span we use protobuf

00:53:20,260 --> 00:53:28,329
to persist the data and for that we need

00:53:24,900 --> 00:53:31,540
profile that prototype is a definition

00:53:28,329 --> 00:53:33,609
of your domain that right so it's the

00:53:31,540 --> 00:53:36,520
replication of the portress that you

00:53:33,609 --> 00:53:38,710
have on your local project this is

00:53:36,520 --> 00:53:41,800
generated it's Auto generated by pujita

00:53:38,710 --> 00:53:46,930
when you compile the project you shared

00:53:41,800 --> 00:53:48,190
this with the dynamics yeah Wireless

00:53:46,930 --> 00:53:51,040
building your application when you

00:53:48,190 --> 00:53:55,800
create a conflict yeah every creative of

00:53:51,040 --> 00:53:55,800
this map with the file and register file

00:54:01,340 --> 00:54:12,600
for for the communication with its

00:54:05,850 --> 00:54:14,580
finished pen protocol that's the one we

00:54:12,600 --> 00:54:18,690
use to communicate with infinite spam

00:54:14,580 --> 00:54:33,830
but we also load these and parts into

00:54:18,690 --> 00:54:33,830
the graphical schema thank you

00:54:35,400 --> 00:54:38,610

YouTube URL: https://www.youtube.com/watch?v=wFDPET4VAgg


