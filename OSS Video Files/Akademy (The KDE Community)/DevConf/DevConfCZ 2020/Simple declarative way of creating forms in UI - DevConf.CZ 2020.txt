Title: Simple declarative way of creating forms in UI - DevConf.CZ 2020
Publication date: 2020-03-27
Playlist: DevConfCZ 2020
Description: 
	Speakers: Martin MaroÅ¡i

Do you hate developing forms in web environment? Data driven forms is here to rescue you! Data driven forms is a React library which renders forms UI based on predefined JSON schema. It handles all state updates for you, validation, conditions, customization and more. Instead of duplicating existing forms, you will have more time for improving your UX, test your UI and make it more stable. and There are many libraries that use the same principle, however they are restricted to specific technologies and design systems. Data driven forms allows you to create your own components and the schema is defined by your components API and not by anything else.

[ https://sched.co/YOwS ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:01,000 --> 00:00:08,389
hello everyone so my name is Martin as

00:00:05,630 --> 00:00:09,889
you probably heard and I will be today

00:00:08,389 --> 00:00:12,769
telling you something about data to

00:00:09,889 --> 00:00:13,909
inform and something about dated when

00:00:12,769 --> 00:00:17,210
approached when they are trying to

00:00:13,909 --> 00:00:20,210
generate some piece of UI from some some

00:00:17,210 --> 00:00:23,470
data right I should probably introduce

00:00:20,210 --> 00:00:26,420
myself I work here at Red Hat in brown

00:00:23,470 --> 00:00:28,280
for almost three years now I started

00:00:26,420 --> 00:00:31,010
working as a UI developer from the start

00:00:28,280 --> 00:00:33,560
the first project I was working on Skull

00:00:31,010 --> 00:00:36,970
forms and then all of people from cult

00:00:33,560 --> 00:00:39,739
rooms move to the insights which is now

00:00:36,970 --> 00:00:44,270
cloud services or whatever you want to

00:00:39,739 --> 00:00:47,000
call it I've been developing UI for as

00:00:44,270 --> 00:00:49,340
long as I can remember my thing the

00:00:47,000 --> 00:00:50,840
first piece of code that I've written at

00:00:49,340 --> 00:00:55,550
high school that was just something

00:00:50,840 --> 00:00:57,020
simple JavaScript applications for some

00:00:55,550 --> 00:00:59,450
projects and honestly at that time I

00:00:57,020 --> 00:01:01,550
really didn't really didn't like the UI

00:00:59,450 --> 00:01:04,129
and mostly because of the JavaScript

00:01:01,550 --> 00:01:06,890
because I felt that the language was

00:01:04,129 --> 00:01:09,250
very clunky like the prototyping instead

00:01:06,890 --> 00:01:11,720
of classes that was just completely

00:01:09,250 --> 00:01:14,360
insane for me because I also used to

00:01:11,720 --> 00:01:16,430
write you know Java code and in Java

00:01:14,360 --> 00:01:17,630
every classes and everything is really

00:01:16,430 --> 00:01:19,369
nice you know you've got all these

00:01:17,630 --> 00:01:21,320
interfaces and types and stuff light up

00:01:19,369 --> 00:01:22,729
and then you write something like that

00:01:21,320 --> 00:01:26,270
in JavaScript and you just got

00:01:22,729 --> 00:01:28,490
what's going on there you know that

00:01:26,270 --> 00:01:31,610
moves to change when the es6

00:01:28,490 --> 00:01:34,659
specification came I felt like that the

00:01:31,610 --> 00:01:38,470
language really girl know what and

00:01:34,659 --> 00:01:42,670
syntax especially was much more you know

00:01:38,470 --> 00:01:44,600
Java like I guess which really

00:01:42,670 --> 00:01:46,729
interested me and I know it it's not

00:01:44,600 --> 00:01:49,340
that true but at a time I really believe

00:01:46,729 --> 00:01:52,039
that and also the movement towards the

00:01:49,340 --> 00:01:53,360
functional programming was really you

00:01:52,039 --> 00:01:55,459
know big thing for me because I

00:01:53,360 --> 00:02:01,610
personally believe that's the way to go

00:01:55,459 --> 00:02:05,179
so maybe something you know about my

00:02:01,610 --> 00:02:07,849
personal life I love dogs I just

00:02:05,179 --> 00:02:09,500
recently bought a flat so I could

00:02:07,849 --> 00:02:15,110
mortgage for thirty years so if somebody

00:02:09,500 --> 00:02:17,360
was to sponsor me yeah and that's about

00:02:15,110 --> 00:02:19,930
it that's about myself and let's move

00:02:17,360 --> 00:02:25,849
toward something we call different forms

00:02:19,930 --> 00:02:28,940
so never do in forms is a react library

00:02:25,849 --> 00:02:31,010
that we have written I will be talking

00:02:28,940 --> 00:02:33,440
about it but that doesn't mean that you

00:02:31,010 --> 00:02:36,049
can't you know applies these rules you

00:02:33,440 --> 00:02:38,959
know and approach to other languages or

00:02:36,049 --> 00:02:41,600
libraries or whatever we try to design

00:02:38,959 --> 00:02:42,709
this library to be designed for UI and

00:02:41,600 --> 00:02:45,829
for components

00:02:42,709 --> 00:02:51,790
not for react and not for specific

00:02:45,829 --> 00:02:54,790
project so what's it all about

00:02:51,790 --> 00:02:54,790
working

00:02:59,610 --> 00:03:08,350
so what's it all about veteran forums is

00:03:04,600 --> 00:03:12,430
a react component which takes a JSON

00:03:08,350 --> 00:03:15,940
input and renders a form from them it

00:03:12,430 --> 00:03:18,240
takes care of all about of all the form

00:03:15,940 --> 00:03:20,740
state management because validations

00:03:18,240 --> 00:03:22,570
synchronous asynchronous it depends what

00:03:20,740 --> 00:03:26,140
you want to use you've got some

00:03:22,570 --> 00:03:28,600
conditional fields you've got you know

00:03:26,140 --> 00:03:31,510
death types and typecasting as you

00:03:28,600 --> 00:03:33,220
probably know that in HTML forms

00:03:31,510 --> 00:03:35,890
everything is string except for

00:03:33,220 --> 00:03:39,760
checkboxes so you need that for your

00:03:35,890 --> 00:03:43,630
api's we also design it to be designed

00:03:39,760 --> 00:03:45,190
system independence so that means that

00:03:43,630 --> 00:03:47,230
you can use any component library you

00:03:45,190 --> 00:03:50,830
want really we are using mostly

00:03:47,230 --> 00:03:53,920
butterfly 3 & 4 if you're using

00:03:50,830 --> 00:03:55,300
something else you can do that also all

00:03:53,920 --> 00:03:59,020
the components are fully customizable

00:03:55,300 --> 00:04:00,910
and you are not locked down to just

00:03:59,020 --> 00:04:03,820
specific set of components like if you

00:04:00,910 --> 00:04:05,769
need some very strange component just

00:04:03,820 --> 00:04:10,060
for that one form you can just develop

00:04:05,769 --> 00:04:14,290
it break it straight into the form

00:04:10,060 --> 00:04:17,350
render and use it so that's you know

00:04:14,290 --> 00:04:19,959
quick summary of data to inform this but

00:04:17,350 --> 00:04:22,030
I would like you to explain why did we

00:04:19,959 --> 00:04:24,130
even decide to create a library like

00:04:22,030 --> 00:04:26,110
this it's not the only one out there

00:04:24,130 --> 00:04:28,750
there are other libraries that we do

00:04:26,110 --> 00:04:30,580
practically the same thing that we found

00:04:28,750 --> 00:04:34,840
out that there are some limitations and

00:04:30,580 --> 00:04:38,919
issues with them so we did not use them

00:04:34,840 --> 00:04:40,240
so why would you even try to use like

00:04:38,919 --> 00:04:42,190
data-driven approach why would you

00:04:40,240 --> 00:04:45,040
generate their UI from some label I

00:04:42,190 --> 00:04:46,750
think you just bright it out well and in

00:04:45,040 --> 00:04:48,430
small-scale projects that doesn't really

00:04:46,750 --> 00:04:50,530
make sense I mean if your application

00:04:48,430 --> 00:04:52,180
with four pages you will spend more time

00:04:50,530 --> 00:04:55,330
you know developing some of these tools

00:04:52,180 --> 00:04:59,080
rather than you just sit down and write

00:04:55,330 --> 00:05:01,060
write the mark-up and write logic but

00:04:59,080 --> 00:05:02,150
you know when the scale is growing when

00:05:01,060 --> 00:05:04,070
you have for instance

00:05:02,150 --> 00:05:06,740
hundreds and hundreds of forums like

00:05:04,070 --> 00:05:09,020
Vedic and cloud forms you know doing

00:05:06,740 --> 00:05:11,449
everything manually is not really that

00:05:09,020 --> 00:05:14,000
easy right so if you have some data to

00:05:11,449 --> 00:05:15,889
an approach you are stable you can make

00:05:14,000 --> 00:05:17,960
anything you tested only one place you

00:05:15,889 --> 00:05:19,610
know that with the same input people

00:05:17,960 --> 00:05:22,370
always get the same result you don't

00:05:19,610 --> 00:05:26,690
have to worry about some strange side

00:05:22,370 --> 00:05:28,220
effect and stuff like that one thing

00:05:26,690 --> 00:05:29,990
that I should mention we didn't know

00:05:28,220 --> 00:05:32,270
developments take enrichment library we

00:05:29,990 --> 00:05:35,389
are using react find forum could you

00:05:32,270 --> 00:05:36,979
take care of the state management we did

00:05:35,389 --> 00:05:39,949
not feel that this is necessary I mean

00:05:36,979 --> 00:05:42,380
it's very good library it see that our

00:05:39,949 --> 00:05:44,389
needs and again if you are using

00:05:42,380 --> 00:05:45,919
something else in your applications and

00:05:44,389 --> 00:05:48,530
you would like to use take internal

00:05:45,919 --> 00:05:50,539
forms you can easily take all of these

00:05:48,530 --> 00:05:53,330
ideas and approaches and just apply them

00:05:50,539 --> 00:05:58,280
to your specific desktop you don't even

00:05:53,330 --> 00:06:01,310
have to use to be up so there was the

00:05:58,280 --> 00:06:05,660
question so why did we develop this so

00:06:01,310 --> 00:06:08,840
we had this use case you know manager

00:06:05,660 --> 00:06:12,650
came and said we need to generate forms

00:06:08,840 --> 00:06:14,900
from some data we don't we will have

00:06:12,650 --> 00:06:16,940
dynamic forms based on some parameters

00:06:14,900 --> 00:06:18,560
you will send something to API and it

00:06:16,940 --> 00:06:22,160
will send you some data you have to

00:06:18,560 --> 00:06:24,229
render it we also that's for the call

00:06:22,160 --> 00:06:26,060
services like in call forms there was

00:06:24,229 --> 00:06:28,669
also the issues that we have hundreds of

00:06:26,060 --> 00:06:31,849
forms they were noticed that everything

00:06:28,669 --> 00:06:34,479
was behaving completely differently and

00:06:31,849 --> 00:06:36,530
we needed to fix them and there was

00:06:34,479 --> 00:06:38,479
another issue that we will have to

00:06:36,530 --> 00:06:39,979
migrate for butterfly free to butterfly

00:06:38,479 --> 00:06:42,080
for if you don't know what their

00:06:39,979 --> 00:06:45,289
employees by the place is a design

00:06:42,080 --> 00:06:48,169
system used used in red head in all

00:06:45,289 --> 00:06:50,539
their applications and we have two

00:06:48,169 --> 00:06:52,520
versions right now free and for no free

00:06:50,539 --> 00:06:54,020
butterfly frames based on food so in

00:06:52,520 --> 00:06:56,360
bootstrap and a butterfly for has been

00:06:54,020 --> 00:06:57,650
built from ground up and eventually

00:06:56,360 --> 00:07:00,260
every application should probably

00:06:57,650 --> 00:07:02,539
migrate to the latest version so

00:07:00,260 --> 00:07:05,120
obviously the first thing I did I went

00:07:02,539 --> 00:07:09,139
on the internet and I written data to

00:07:05,120 --> 00:07:11,810
inform in the search and I get a lot of

00:07:09,139 --> 00:07:14,210
results you know libraries like we have

00:07:11,810 --> 00:07:17,840
got all of the objects

00:07:14,210 --> 00:07:21,680
or SQL even some library for generating

00:07:17,840 --> 00:07:22,389
frustum SQL which - kind of strange but

00:07:21,680 --> 00:07:24,860
it's okay

00:07:22,389 --> 00:07:27,199
we specifically used in the cloud

00:07:24,860 --> 00:07:28,910
services to open API if you don't know

00:07:27,199 --> 00:07:31,280
what about the eyes open API is

00:07:28,910 --> 00:07:33,289
basically specifications for API as it

00:07:31,280 --> 00:07:35,569
defines the endpoints you can use it for

00:07:33,289 --> 00:07:38,930
generate some clients documentations and

00:07:35,569 --> 00:07:40,639
stuff like them and you know after I

00:07:38,930 --> 00:07:42,470
like a couple of days one of our

00:07:40,639 --> 00:07:44,660
back-end guys came and he said hey

00:07:42,470 --> 00:07:49,310
there's this library react JSON schema

00:07:44,660 --> 00:07:50,900
form and it can generate forms I was

00:07:49,310 --> 00:07:53,780
like right you know work is finished

00:07:50,900 --> 00:07:58,160
everything is fine but as it turned out

00:07:53,780 --> 00:08:03,620
it really really wasn't so generating Qi

00:07:58,160 --> 00:08:06,289
from data isn't there's a lot of a lot

00:08:03,620 --> 00:08:09,710
of libraries out there even if you have

00:08:06,289 --> 00:08:11,539
ever written some list that is generated

00:08:09,710 --> 00:08:15,080
from your API response you are basically

00:08:11,539 --> 00:08:17,919
did you know data-driven approach so why

00:08:15,080 --> 00:08:21,830
create another one I will try to explain

00:08:17,919 --> 00:08:25,070
this using graphical example and using

00:08:21,830 --> 00:08:28,099
the libraries that I listed all these

00:08:25,070 --> 00:08:31,280
libraries have one similarity and that

00:08:28,099 --> 00:08:33,950
is they are not developed for UI they

00:08:31,280 --> 00:08:36,500
are you they are become technologies all

00:08:33,950 --> 00:08:42,409
of them and they are used to specify you

00:08:36,500 --> 00:08:47,420
know entities tables but the thing is

00:08:42,409 --> 00:08:51,589
now then consider the same use cases the

00:08:47,420 --> 00:08:53,750
same attributes or other stuff that you

00:08:51,589 --> 00:08:57,680
have to consider when you are developing

00:08:53,750 --> 00:09:00,680
UI when you have your API endpoint and

00:08:57,680 --> 00:09:02,029
you expect the string you expect the

00:09:00,680 --> 00:09:04,670
string if something out comes you just

00:09:02,029 --> 00:09:06,500
throw an error like if the back-end

00:09:04,670 --> 00:09:09,860
developers are nice and kind you will

00:09:06,500 --> 00:09:11,600
get you know 400 response pod request

00:09:09,860 --> 00:09:14,180
we'll just let the server blow up when

00:09:11,600 --> 00:09:16,490
you get 500 that's not winner for the UI

00:09:14,180 --> 00:09:18,680
an even graph kilo which was built

00:09:16,490 --> 00:09:20,620
specifically for UI because Facebook had

00:09:18,680 --> 00:09:23,930
issues with mobile versions of the

00:09:20,620 --> 00:09:26,089
Facebook app it's still not good enough

00:09:23,930 --> 00:09:29,839
because it's still a specification for

00:09:26,089 --> 00:09:31,279
an API it's a query language it doesn't

00:09:29,839 --> 00:09:33,880
consider all the stuff that you have to

00:09:31,279 --> 00:09:37,970
consider when you're building UI right

00:09:33,880 --> 00:09:39,350
so I will try to oh by the way I'm not

00:09:37,970 --> 00:09:43,579
trying to say that you should not use

00:09:39,350 --> 00:09:46,040
these things I I think that for a lot of

00:09:43,579 --> 00:09:49,730
you you know libraries like the Apollo

00:09:46,040 --> 00:09:52,880
graph QL forms would be enough the issue

00:09:49,730 --> 00:09:56,810
will be apparent when you when you have

00:09:52,880 --> 00:09:59,810
some complex UX and when you get some

00:09:56,810 --> 00:10:01,610
strange tasks from the customers that

00:09:59,810 --> 00:10:04,010
will specifically tell you I need this

00:10:01,610 --> 00:10:06,350
like this is not standard and all of

00:10:04,010 --> 00:10:09,410
these libraries are not very well

00:10:06,350 --> 00:10:14,089
together for them so let me show you an

00:10:09,410 --> 00:10:16,760
example and we as I said we did use open

00:10:14,089 --> 00:10:19,970
API but I think the example using I feel

00:10:16,760 --> 00:10:22,160
it's much more it's much better because

00:10:19,970 --> 00:10:24,230
the limitations of the graphical and

00:10:22,160 --> 00:10:26,870
which are even but when it comes to the

00:10:24,230 --> 00:10:29,930
generating you are even bigger than open

00:10:26,870 --> 00:10:32,720
API so this is your standard you know

00:10:29,930 --> 00:10:34,959
graph QL entity specification is just a

00:10:32,720 --> 00:10:39,589
simple user you've got four attributes

00:10:34,959 --> 00:10:41,720
name a city it's a try and if you look

00:10:39,589 --> 00:10:43,220
at this you know and if they can they

00:10:41,720 --> 00:10:45,199
can guys come to you hey this is the

00:10:43,220 --> 00:10:47,300
entity being informed for this and

00:10:45,199 --> 00:10:48,800
generate this please you just look at it

00:10:47,300 --> 00:10:50,750
okay string that's going to be text

00:10:48,800 --> 00:10:53,740
input integer is going to be number

00:10:50,750 --> 00:10:56,360
input city types except types of thing

00:10:53,740 --> 00:10:58,970
so you do your job you know you created

00:10:56,360 --> 00:11:01,430
form you send it to 0

00:10:58,970 --> 00:11:05,570
Cheryl whatever you are using you mark

00:11:01,430 --> 00:11:07,490
it as done and you more late well then

00:11:05,570 --> 00:11:10,850
the UX Compson they look at a screenshot

00:11:07,490 --> 00:11:13,910
and they say but the bio thing like that

00:11:10,850 --> 00:11:14,690
is to be an texture I say okay that

00:11:13,910 --> 00:11:17,269
sounds reasonable

00:11:14,690 --> 00:11:18,010
so how do I do this I've got this

00:11:17,269 --> 00:11:21,550
anything

00:11:18,010 --> 00:11:24,790
API has been using it for months they

00:11:21,550 --> 00:11:27,790
haven't clearly defined what do I do

00:11:24,790 --> 00:11:30,460
about it to database stores it has

00:11:27,790 --> 00:11:33,670
exactly the same feel like it's very

00:11:30,460 --> 00:11:35,470
hard to five five whatever but the UX

00:11:33,670 --> 00:11:37,120
said that it has to be at extra because

00:11:35,470 --> 00:11:39,250
they would want instantly and it's

00:11:37,120 --> 00:11:42,010
reasonable so we say okay well how do I

00:11:39,250 --> 00:11:43,660
do this well for graphical I have to

00:11:42,010 --> 00:11:45,730
create another type because that's the

00:11:43,660 --> 00:11:49,390
only thing that differentiates these

00:11:45,730 --> 00:11:51,730
things so I could not tell bio and I

00:11:49,390 --> 00:11:55,090
know that every time I get a bio type I

00:11:51,730 --> 00:11:59,020
would like to render textura and then

00:11:55,090 --> 00:12:02,130
you get another request the age let's go

00:11:59,020 --> 00:12:06,400
into the input type French

00:12:02,130 --> 00:12:08,560
I would never do that and add the metric

00:12:06,400 --> 00:12:11,290
another field which is it's not an

00:12:08,560 --> 00:12:12,970
integer so you write bikes to the UX

00:12:11,290 --> 00:12:14,650
person and you tell him this is

00:12:12,970 --> 00:12:18,280
completely stupid like why would each

00:12:14,650 --> 00:12:19,960
field eh like would be a slider and the

00:12:18,280 --> 00:12:22,180
response will be well the user is going

00:12:19,960 --> 00:12:27,010
to pay us 10 billion billion dollars and

00:12:22,180 --> 00:12:29,050
give us dogs we all love dogs so this so

00:12:27,010 --> 00:12:31,030
you create another type of age and if

00:12:29,050 --> 00:12:33,520
something is going to be type of age you

00:12:31,030 --> 00:12:36,700
will lender I mean two type of French

00:12:33,520 --> 00:12:38,890
and then they don't need I mean on for

00:12:36,700 --> 00:12:41,200
the CP and that's actually reasonable

00:12:38,890 --> 00:12:45,700
you don't wanna just you just pick from

00:12:41,200 --> 00:12:47,800
the selection why not and then the back

00:12:45,700 --> 00:12:49,810
in time comes to work and he see what

00:12:47,800 --> 00:12:52,330
you did to the graphical specification

00:12:49,810 --> 00:12:52,960
and it breaks absolutely everything

00:12:52,330 --> 00:12:56,500
right

00:12:52,960 --> 00:12:59,470
tests are gone you're the QA they're

00:12:56,500 --> 00:13:01,270
just everything is on fire you can't do

00:12:59,470 --> 00:13:03,130
that right but you can't just change

00:13:01,270 --> 00:13:06,250
your models you know your database

00:13:03,130 --> 00:13:08,710
tables and you know tell them well I

00:13:06,250 --> 00:13:10,000
need is to render the UI this is not a

00:13:08,710 --> 00:13:12,700
good idea this is going to break

00:13:10,000 --> 00:13:16,630
everything so we gave you know huge five

00:13:12,700 --> 00:13:18,880
you know and you start shouting at each

00:13:16,630 --> 00:13:22,600
other and in the middle of that great

00:13:18,880 --> 00:13:23,980
conversation the UX comes again and they

00:13:22,600 --> 00:13:26,620
will tell you I need this to be a wizard

00:13:23,980 --> 00:13:29,110
and on the first step they will be named

00:13:26,620 --> 00:13:31,149
and its second step breast and the first

00:13:29,110 --> 00:13:34,649
that they're gonna be nice summary with

00:13:31,149 --> 00:13:36,970
a crazy video guy riding a bicycle right

00:13:34,649 --> 00:13:41,050
how do I'm supposed to generate that

00:13:36,970 --> 00:13:43,440
from the perf kill all time this is how

00:13:41,050 --> 00:13:43,440
you feel about

00:13:43,880 --> 00:13:50,060
so what was the problem here and I can

00:13:48,259 --> 00:13:53,360
tell you that with the open API is

00:13:50,060 --> 00:13:55,430
slightly slightly easier because you

00:13:53,360 --> 00:13:57,350
know you get stuff like titles and you

00:13:55,430 --> 00:14:00,800
get stuff like you know if the field is

00:13:57,350 --> 00:14:03,440
read-only and whatnot you can even hide

00:14:00,800 --> 00:14:05,600
there are there are even some articles

00:14:03,440 --> 00:14:07,579
which tell you to hide some fields but

00:14:05,600 --> 00:14:13,269
at the end of the day you will have the

00:14:07,579 --> 00:14:13,269
same issue so why do you have this issue

00:14:17,050 --> 00:14:22,550
from the UI perspective there is nothing

00:14:20,300 --> 00:14:26,509
that tells you what to render and how to

00:14:22,550 --> 00:14:29,329
use it the only thing that is clear is

00:14:26,509 --> 00:14:32,420
the name of that field and based on the

00:14:29,329 --> 00:14:35,930
exclamation mark that is required and

00:14:32,420 --> 00:14:38,000
what are another you know achieve is

00:14:35,930 --> 00:14:40,790
what about labels what about

00:14:38,000 --> 00:14:43,610
placeholders you know what about the

00:14:40,790 --> 00:14:46,819
validation message how I'm supposed to

00:14:43,610 --> 00:14:49,089
store all of these things into just a

00:14:46,819 --> 00:14:51,470
single data into just a simple string

00:14:49,089 --> 00:14:53,329
and the question other than the ask you

00:14:51,470 --> 00:14:54,920
to do that is you don't by creating new

00:14:53,329 --> 00:14:56,899
types that doesn't work we are going to

00:14:54,920 --> 00:14:58,790
break everything and you can argue well

00:14:56,899 --> 00:15:01,430
we will create a second schema just for

00:14:58,790 --> 00:15:03,380
me UI well why would you use craft your

00:15:01,430 --> 00:15:10,610
specification for that that's the point

00:15:03,380 --> 00:15:15,380
so another thing is you might have an

00:15:10,610 --> 00:15:17,029
API which is consumed by ten different

00:15:15,380 --> 00:15:18,620
UIs and every single UI is using

00:15:17,029 --> 00:15:20,540
different design system and different

00:15:18,620 --> 00:15:24,139
wording and some are translated some are

00:15:20,540 --> 00:15:27,439
not so you can't really justify using

00:15:24,139 --> 00:15:31,250
pack and technologies to render from

00:15:27,439 --> 00:15:33,199
them right I put a slide here maybe some

00:15:31,250 --> 00:15:35,269
of you won't agree with me but

00:15:33,199 --> 00:15:37,339
personally I feel that if you want to

00:15:35,269 --> 00:15:40,130
sell something some type of location you

00:15:37,339 --> 00:15:41,930
better have some pretty good UX because

00:15:40,130 --> 00:15:44,480
that's going that that is was going to

00:15:41,930 --> 00:15:46,009
sell the thing not the features nobody

00:15:44,480 --> 00:15:49,579
cares about

00:15:46,009 --> 00:15:53,720
I feel like take for instance travel

00:15:49,579 --> 00:15:55,549
everybody knows travel it's a nice you

00:15:53,720 --> 00:15:57,739
know task management system or Kanban

00:15:55,549 --> 00:16:00,079
system whatever you want to call it but

00:15:57,739 --> 00:16:01,849
at its core is just few lists and you

00:16:00,079 --> 00:16:04,159
drag and drop stuff between that and

00:16:01,849 --> 00:16:07,249
that's it like yes you can you can

00:16:04,159 --> 00:16:08,989
attack some dates but there are many

00:16:07,249 --> 00:16:10,699
many other you know management tasks

00:16:08,989 --> 00:16:14,299
management systems which are much more

00:16:10,699 --> 00:16:15,769
complex and can do much more things but

00:16:14,299 --> 00:16:17,629
nobody uses them because everybody's

00:16:15,769 --> 00:16:19,819
using control because everybody can use

00:16:17,629 --> 00:16:22,429
true you just you know sit a guy in

00:16:19,819 --> 00:16:24,409
front of the computer open the cella

00:16:22,429 --> 00:16:25,699
page and he'll be like master of task

00:16:24,409 --> 00:16:28,189
management in five minutes

00:16:25,699 --> 00:16:32,959
because it's so simple to use and the UX

00:16:28,189 --> 00:16:33,679
is great but you know this wasn't good

00:16:32,959 --> 00:16:36,139
enough for us

00:16:33,679 --> 00:16:38,359
we needed some generate some UI

00:16:36,139 --> 00:16:41,959
generation and something for the big

00:16:38,359 --> 00:16:44,389
forums we couldn't write in manually

00:16:41,959 --> 00:16:46,189
because we didn't well the use K was

00:16:44,389 --> 00:16:48,739
specific he will get some payload then

00:16:46,189 --> 00:16:51,919
you will have to render random that from

00:16:48,739 --> 00:16:53,929
the from the and also we had some legacy

00:16:51,919 --> 00:16:55,279
project which has as I said hundreds and

00:16:53,929 --> 00:16:58,220
hundreds of forms and doing that

00:16:55,279 --> 00:17:00,139
manually like we at that at that point

00:16:58,220 --> 00:17:04,129
we were behind several years of

00:17:00,139 --> 00:17:05,839
migrating them to new technologies and

00:17:04,129 --> 00:17:08,899
nobody wants to code forms I mean let's

00:17:05,839 --> 00:17:11,149
be honest like forms are boring every

00:17:08,899 --> 00:17:17,209
form like you know every form behaves

00:17:11,149 --> 00:17:20,629
basically the same way so why would they

00:17:17,209 --> 00:17:23,299
different forms be any different the

00:17:20,629 --> 00:17:26,149
first difference is that the data-driven

00:17:23,299 --> 00:17:28,879
forms as I said were designed from

00:17:26,149 --> 00:17:31,850
ground up with UI in mind and not just

00:17:28,879 --> 00:17:35,059
divide but also components we did not

00:17:31,850 --> 00:17:39,049
focus on any specific library we didn't

00:17:35,059 --> 00:17:40,549
focus on any specific applications and

00:17:39,049 --> 00:17:43,250
after some iterations

00:17:40,549 --> 00:17:46,909
these are basically the main rules that

00:17:43,250 --> 00:17:50,120
I kind of came up with when trying to

00:17:46,909 --> 00:17:53,450
write the library from the ground up and

00:17:50,120 --> 00:17:55,710
the first rule that I am personally you

00:17:53,450 --> 00:17:58,289
know very well acquainted with

00:17:55,710 --> 00:18:02,190
do not limit the developer like if the

00:17:58,289 --> 00:18:05,640
UX send you some if the designer will

00:18:02,190 --> 00:18:08,100
send you some crazy crazy looking UI you

00:18:05,640 --> 00:18:10,380
have to be able to do that right you

00:18:08,100 --> 00:18:11,940
can't just tell them I can't do that

00:18:10,380 --> 00:18:14,250
because the library that I'm using

00:18:11,940 --> 00:18:16,799
doesn't allow me to and that's not going

00:18:14,250 --> 00:18:19,080
to be good enough they did a lot of

00:18:16,799 --> 00:18:21,360
research they designed it they know that

00:18:19,080 --> 00:18:23,100
the customers wants the custom ones in

00:18:21,360 --> 00:18:26,820
that way so you have to be able to do

00:18:23,100 --> 00:18:29,760
that the second thing is when you have

00:18:26,820 --> 00:18:32,610
the schema and it kind of depends on the

00:18:29,760 --> 00:18:36,980
first the first rule the schema has to

00:18:32,610 --> 00:18:41,820
be open because the UI will change

00:18:36,980 --> 00:18:43,590
you can have two forums same fields but

00:18:41,820 --> 00:18:44,880
the fields can be completely different

00:18:43,590 --> 00:18:46,710
you can use completely different

00:18:44,880 --> 00:18:49,890
components we've completely different

00:18:46,710 --> 00:18:52,470
attributes so you can't be just locked

00:18:49,890 --> 00:18:53,820
down to set off I don't know 50

00:18:52,470 --> 00:18:57,149
attributes that you can use for your

00:18:53,820 --> 00:19:00,090
components but at same at the same time

00:18:57,149 --> 00:19:02,580
the schema has to be also defined if you

00:19:00,090 --> 00:19:04,380
will just design something then that has

00:19:02,580 --> 00:19:06,840
no you know rules and limitation

00:19:04,380 --> 00:19:09,480
eventually that's going to break and you

00:19:06,840 --> 00:19:12,240
will end up in the same place you know

00:19:09,480 --> 00:19:14,700
as if you would when you be writing all

00:19:12,240 --> 00:19:18,240
these code all these UI so all these

00:19:14,700 --> 00:19:21,779
forms manual and the third rule is don't

00:19:18,240 --> 00:19:24,210
look the user or the developer to just

00:19:21,779 --> 00:19:25,860
one design system that comes back to

00:19:24,210 --> 00:19:28,110
what I said earlier we are using Firefly

00:19:25,860 --> 00:19:30,809
feel free and for and we want to migrate

00:19:28,110 --> 00:19:38,039
to fly poor so obviously we need this

00:19:30,809 --> 00:19:41,669
flexibility to ladies so after we had

00:19:38,039 --> 00:19:44,460
this you know rules let's say we needed

00:19:41,669 --> 00:19:46,799
some you know main building blocks of

00:19:44,460 --> 00:19:48,600
the library so obviously we want to

00:19:46,799 --> 00:19:51,840
render something from data so we have to

00:19:48,600 --> 00:19:54,990
somehow specific specify the schema in

00:19:51,840 --> 00:19:56,830
order to let the developers to create

00:19:54,990 --> 00:20:01,029
some new components and

00:19:56,830 --> 00:20:04,120
then we came up with something called

00:20:01,029 --> 00:20:07,809
component mapping I'll get three later

00:20:04,120 --> 00:20:09,820
and then there is this form under itself

00:20:07,809 --> 00:20:13,590
which basically takes the scheme and and

00:20:09,820 --> 00:20:16,059
the components and then renders the UI

00:20:13,590 --> 00:20:19,779
so let's look at this these things

00:20:16,059 --> 00:20:22,690
separately so this is a very very basic

00:20:19,779 --> 00:20:25,269
example of the schema

00:20:22,690 --> 00:20:27,549
it's always an object and then as to

00:20:25,269 --> 00:20:29,590
always be in fields all right and every

00:20:27,549 --> 00:20:34,960
single object in the fields array is the

00:20:29,590 --> 00:20:37,179
component so first thing is the name I

00:20:34,960 --> 00:20:38,529
mean if you have input with some name in

00:20:37,179 --> 00:20:41,169
the form you have to have it somewhere

00:20:38,529 --> 00:20:44,710
and then there is the component view I

00:20:41,169 --> 00:20:46,690
mean the component feel exactly defines

00:20:44,710 --> 00:20:49,450
what kind of component component you are

00:20:46,690 --> 00:20:51,580
going to use in this case it's text

00:20:49,450 --> 00:20:53,860
field it can be select it can be wizard

00:20:51,580 --> 00:20:57,220
it can be tabs checkboxes or whatever

00:20:53,860 --> 00:21:01,000
other complement you have at your

00:20:57,220 --> 00:21:03,610
disposal and compared to the graph QL

00:21:01,000 --> 00:21:06,100
for instance there was just a string

00:21:03,610 --> 00:21:07,539
there is just this type string and I'm

00:21:06,100 --> 00:21:09,850
supposed to guess from the type

00:21:07,539 --> 00:21:13,419
everything that I need to know well we

00:21:09,850 --> 00:21:15,610
decided I mean it's nice but we know

00:21:13,419 --> 00:21:16,600
that the type is string but it doesn't

00:21:15,610 --> 00:21:19,389
help us in the UI

00:21:16,600 --> 00:21:21,730
everything is drink and forums so we

00:21:19,389 --> 00:21:24,340
will just use this definition of the

00:21:21,730 --> 00:21:26,919
component and this constant will always

00:21:24,340 --> 00:21:28,240
pick or define the current component I

00:21:26,919 --> 00:21:31,630
have to use there is no ambiguity

00:21:28,240 --> 00:21:34,059
nothing like that and then you start

00:21:31,630 --> 00:21:37,240
adding stuff there's label text colorful

00:21:34,059 --> 00:21:40,000
way but that is core all of these like

00:21:37,240 --> 00:21:44,679
other special stuff they are just

00:21:40,000 --> 00:21:47,799
component props from react right and now

00:21:44,679 --> 00:21:50,620
you might say well which perhaps I'm

00:21:47,799 --> 00:21:51,520
supposed to use how do I know that my

00:21:50,620 --> 00:21:55,410
component uses

00:21:51,520 --> 00:21:58,300
we're going to do instead of title and

00:21:55,410 --> 00:22:00,790
these probes and these attributes name

00:21:58,300 --> 00:22:04,720
are picked specifically from the

00:22:00,790 --> 00:22:08,200
component your component API defines how

00:22:04,720 --> 00:22:11,170
to feel or how the schema looks if your

00:22:08,200 --> 00:22:13,660
component uses label probes like a prop

00:22:11,170 --> 00:22:17,560
you can add whiskey if your component

00:22:13,660 --> 00:22:20,130
uses options prop you will add the

00:22:17,560 --> 00:22:23,590
options key with the correct value and

00:22:20,130 --> 00:22:26,530
this is I believe that how we achieved

00:22:23,590 --> 00:22:29,170
that is kim eyes open but yet at the

00:22:26,530 --> 00:22:31,960
same time is defined I mean if you take

00:22:29,170 --> 00:22:34,000
a redhead for instance every UI

00:22:31,960 --> 00:22:37,450
developer knows or at least should not

00:22:34,000 --> 00:22:38,920
apply and if they know panel fly they

00:22:37,450 --> 00:22:40,720
can look at a schema and they can

00:22:38,920 --> 00:22:42,550
instantly say what kind of component it

00:22:40,720 --> 00:22:47,200
is and what kind of probes in hands and

00:22:42,550 --> 00:22:48,820
how behave so even though that the

00:22:47,200 --> 00:22:50,980
schema is fairly open every single

00:22:48,820 --> 00:22:54,610
developer in Red Hat will know what kind

00:22:50,980 --> 00:22:57,190
of UI will be rendered it will do and

00:22:54,610 --> 00:22:59,170
that applies to you know any other

00:22:57,190 --> 00:23:02,070
company that has some design system and

00:22:59,170 --> 00:23:05,890
that has some component libraries right

00:23:02,070 --> 00:23:08,830
so then there is the form render the

00:23:05,890 --> 00:23:12,210
form render is basically just a big

00:23:08,830 --> 00:23:17,770
rendering loop that goes through that

00:23:12,210 --> 00:23:19,930
goes through my schema it also hooks the

00:23:17,770 --> 00:23:25,210
components through the form staying if

00:23:19,930 --> 00:23:27,010
you want it to be it goes through those

00:23:25,210 --> 00:23:29,140
it goes through the schema it picks the

00:23:27,010 --> 00:23:31,180
components it has some necessary probes

00:23:29,140 --> 00:23:33,880
you know like your own change functions

00:23:31,180 --> 00:23:36,430
your onboard functions it had some

00:23:33,880 --> 00:23:38,770
metadata to it you know it is the field

00:23:36,430 --> 00:23:41,050
valid is it not is there some error

00:23:38,770 --> 00:23:43,600
message did you touch it is it active

00:23:41,050 --> 00:23:45,760
all these good things come from the RIA

00:23:43,600 --> 00:23:48,630
final form library and I guess that the

00:23:45,760 --> 00:23:51,430
other I believe some equivalents to it

00:23:48,630 --> 00:23:55,810
and once the component is put together

00:23:51,430 --> 00:23:57,730
it just renders into the UI but on its

00:23:55,810 --> 00:23:59,760
own the form vendor doesn't really know

00:23:57,730 --> 00:24:01,950
anything about the combo

00:23:59,760 --> 00:24:04,380
it's supposed to render right if you try

00:24:01,950 --> 00:24:05,850
to just you know use the schema pass it

00:24:04,380 --> 00:24:08,670
to the render it would just crash

00:24:05,850 --> 00:24:11,550
because it it's no idea how to how to

00:24:08,670 --> 00:24:15,090
render them now that is taken care of by

00:24:11,550 --> 00:24:17,640
the component mapping the component

00:24:15,090 --> 00:24:23,520
making mapping itself these are just you

00:24:17,640 --> 00:24:25,200
know objects and each key or each value

00:24:23,520 --> 00:24:28,260
in that object has a key and a value

00:24:25,200 --> 00:24:29,880
obvious then the key has the same is the

00:24:28,260 --> 00:24:32,880
same constant that he used for the

00:24:29,880 --> 00:24:35,640
component view right so if you have a

00:24:32,880 --> 00:24:37,560
text field in your schema you must have

00:24:35,640 --> 00:24:41,970
a text field key in your component

00:24:37,560 --> 00:24:45,000
mappers and base and you know value of

00:24:41,970 --> 00:24:47,490
that component component mapper is react

00:24:45,000 --> 00:24:49,710
component and that's all the limitations

00:24:47,490 --> 00:24:53,250
you have if you want to use their

00:24:49,710 --> 00:24:54,570
application as a field and if you want

00:24:53,250 --> 00:24:56,760
to use their application as a field in

00:24:54,570 --> 00:24:59,250
the form you can do that we don't

00:24:56,760 --> 00:25:01,860
restrict you to any component sets you

00:24:59,250 --> 00:25:04,020
know or component types you will use

00:25:01,860 --> 00:25:05,880
whatever you need to use you will use

00:25:04,020 --> 00:25:07,590
whatever you are using right now in your

00:25:05,880 --> 00:25:10,650
application and just very straight

00:25:07,590 --> 00:25:14,580
understand main so right now there are

00:25:10,650 --> 00:25:16,500
two component markers actually we kind

00:25:14,580 --> 00:25:18,840
of decided that the next major version

00:25:16,500 --> 00:25:22,440
version of the library there is going to

00:25:18,840 --> 00:25:25,050
be only one for some reason we decided

00:25:22,440 --> 00:25:27,660
to split to layout mappers and form

00:25:25,050 --> 00:25:29,310
fields my purse but as it turned out it

00:25:27,660 --> 00:25:32,040
doesn't really make sense there is no

00:25:29,310 --> 00:25:33,870
reason why you should split these things

00:25:32,040 --> 00:25:36,750
so but right now there's a layout number

00:25:33,870 --> 00:25:38,460
and in love mapper you will use your

00:25:36,750 --> 00:25:40,290
aesthetic you know components for the

00:25:38,460 --> 00:25:42,390
forms for instance the whole form

00:25:40,290 --> 00:25:45,450
wrapper or basically just a form tag in

00:25:42,390 --> 00:25:48,270
HTML but means we have some four groups

00:25:45,450 --> 00:25:50,190
and stuff like that we had even more

00:25:48,270 --> 00:25:52,470
before but you know as we are developing

00:25:50,190 --> 00:25:54,030
and using it and iterating we kind of

00:25:52,470 --> 00:25:56,160
discovered that you don't really need

00:25:54,030 --> 00:25:58,110
that much and basically you don't even

00:25:56,160 --> 00:26:00,870
need these buttons you know you can

00:25:58,110 --> 00:26:02,700
render them on your own the only thing

00:26:00,870 --> 00:26:06,630
from the layout buffer that you really

00:26:02,700 --> 00:26:09,240
need right now is the form tag and then

00:26:06,630 --> 00:26:12,039
there's the phone form things mapper if

00:26:09,240 --> 00:26:15,960
yeah that's the implementation for

00:26:12,039 --> 00:26:18,759
books or a check boxes like sex attract

00:26:15,960 --> 00:26:21,249
so this is how the component mapper

00:26:18,759 --> 00:26:24,309
looks like I will be using the text

00:26:21,249 --> 00:26:26,049
field example and as you can see it's

00:26:24,309 --> 00:26:29,559
just simple and implementation of

00:26:26,049 --> 00:26:32,669
reaction to them and there is a

00:26:29,559 --> 00:26:35,440
confluence mapper is just a text field

00:26:32,669 --> 00:26:38,259
the is just a constant of text field and

00:26:35,440 --> 00:26:41,289
there is the value of the component and

00:26:38,259 --> 00:26:43,809
this is how it kind of works and I will

00:26:41,289 --> 00:26:47,320
show specific this specific example in a

00:26:43,809 --> 00:26:49,359
minute I will do some coding you take

00:26:47,320 --> 00:26:51,759
the component approach you take the

00:26:49,359 --> 00:26:53,979
schemas you put it into vendor vendor or

00:26:51,759 --> 00:26:56,229
fix all the stuff it means it will

00:26:53,979 --> 00:26:59,249
connect the field to the state to pass

00:26:56,229 --> 00:27:07,989
the probes to it and then this hundred

00:26:59,249 --> 00:27:10,859
so let's give you some examples I will

00:27:07,989 --> 00:27:14,619
show you some basic code that you can do

00:27:10,859 --> 00:27:16,720
and what you would probably do then you

00:27:14,619 --> 00:27:18,220
would start you know writing the data

00:27:16,720 --> 00:27:20,259
stream forms and then I will show you

00:27:18,220 --> 00:27:23,200
some more complex stuff that we are

00:27:20,259 --> 00:27:25,799
using right now in our applications on

00:27:23,200 --> 00:27:25,799
cloud services

00:27:40,259 --> 00:27:48,009
so I created complete lengthy project

00:27:43,929 --> 00:27:52,539
which has been bootstrap which we create

00:27:48,009 --> 00:27:56,320
react up from Facebook as you can see

00:27:52,539 --> 00:27:58,269
there is nothing special about this just

00:27:56,320 --> 00:28:00,100
the empty project I did pre install the

00:27:58,269 --> 00:28:03,460
dependencies I did pre-installed with a

00:28:00,100 --> 00:28:07,409
patent forms and also material UI

00:28:03,460 --> 00:28:11,169
because I didn't want you to wait for it

00:28:07,409 --> 00:28:13,029
so let's just start there is a lot of

00:28:11,169 --> 00:28:21,159
useless stuff that we don't need at this

00:28:13,029 --> 00:28:23,370
moment I will just delete all this all

00:28:21,159 --> 00:28:23,370
this

00:28:26,500 --> 00:28:29,559
[Music]

00:28:30,950 --> 00:28:39,240
started and there is an empty react

00:28:35,250 --> 00:28:41,990
application by do it I think it's like

00:28:39,240 --> 00:28:41,990
too small

00:28:58,660 --> 00:29:05,739
yeah it seems like

00:29:01,299 --> 00:29:20,860
so you would start as with any library

00:29:05,739 --> 00:29:25,180
in reality which is yeah commander and I

00:29:20,860 --> 00:29:29,730
will use our amazing recommendation

00:29:25,180 --> 00:29:33,730
and we start creating some mayo feathers

00:29:29,730 --> 00:29:36,400
so as I said in layout papers they are

00:29:33,730 --> 00:29:39,430
right now just fine predefined component

00:29:36,400 --> 00:29:42,990
types form upper buttons title and stuff

00:29:39,430 --> 00:30:00,490
like that we all just create you of them

00:29:42,990 --> 00:30:12,540
copy these so to create just the form

00:30:00,490 --> 00:30:12,540
wrapper all you really need form tag

00:30:19,029 --> 00:30:32,269
children to it go past approves so in

00:30:29,809 --> 00:30:34,399
these probes you basically just find the

00:30:32,269 --> 00:30:38,419
handle submit function or on submit

00:30:34,399 --> 00:30:49,879
rather and obviously the children of the

00:30:38,419 --> 00:30:53,959
form which has a label in Si and there's

00:30:49,879 --> 00:30:55,909
some other stuff mostly you know again

00:30:53,959 --> 00:30:59,690
the handle submit some types except

00:30:55,909 --> 00:31:06,349
Jack's a job we're just going to be

00:30:59,690 --> 00:31:10,719
normal button label and let's give it

00:31:06,349 --> 00:31:10,719
some styling it's going to be very basic

00:31:12,759 --> 00:31:16,749
let's give it a background

00:31:17,030 --> 00:31:27,840
this primary is going to be read

00:31:22,100 --> 00:31:30,410
otherwise it's going to be it's going to

00:31:27,840 --> 00:31:30,410
be very pretty

00:31:32,960 --> 00:31:43,910
No welcome to Reseda but doesn't matter

00:31:51,740 --> 00:31:56,530
and for the rest of the stuff they're

00:31:53,630 --> 00:32:00,040
just containers for some value species

00:31:56,530 --> 00:32:04,250
so we'll just use fragment for that

00:32:00,040 --> 00:32:05,720
obviously if you would ever used it in

00:32:04,250 --> 00:32:09,860
your application you would probably want

00:32:05,720 --> 00:32:19,310
to style the thing so let's now use the

00:32:09,860 --> 00:32:21,670
form under let's get it the layout

00:32:19,310 --> 00:32:21,670
Napper

00:32:23,680 --> 00:32:28,640
and we don't have any schema right now

00:32:27,020 --> 00:32:30,440
you'll probably fail if I try friend

00:32:28,640 --> 00:32:36,710
okay you get nice error that you are

00:32:30,440 --> 00:32:40,640
missing the schema so let's create in

00:32:36,710 --> 00:32:43,280
the schema we need so feels right and in

00:32:40,640 --> 00:32:45,760
the fields right we will create a text

00:32:43,280 --> 00:32:45,760
field

00:32:53,170 --> 00:33:00,710
first name

00:32:54,800 --> 00:33:03,230
I want used component of textview you

00:33:00,710 --> 00:33:11,230
don't need any other website now we'll

00:33:03,230 --> 00:33:14,570
just add label I know

00:33:11,230 --> 00:33:20,120
let's found the ski mountain form and

00:33:14,570 --> 00:33:22,640
once create some submit function just

00:33:20,120 --> 00:33:25,970
control arc is good enough for now now

00:33:22,640 --> 00:33:29,720
it's going to crash because we don't

00:33:25,970 --> 00:33:32,200
have any form fields mapper so let's

00:33:29,720 --> 00:33:32,200
create up

00:33:36,820 --> 00:33:41,020
and right now it's just going to be an

00:33:39,170 --> 00:33:44,860
empty because we don't have any form

00:33:41,020 --> 00:33:44,860
components defined

00:33:49,990 --> 00:34:00,460
so this would be the basic setup you

00:33:58,389 --> 00:34:10,690
would need to start but obviously we are

00:34:00,460 --> 00:34:18,809
missing the components to render and I

00:34:10,690 --> 00:34:23,730
seem to miss oops layout mapper

00:34:18,809 --> 00:34:23,730
formfields mapper I probably some typos

00:34:29,899 --> 00:34:36,089
yes so now it's telling me that I'm

00:34:33,899 --> 00:34:40,020
trying to render text field component

00:34:36,089 --> 00:34:42,419
but there isn't any so let's implement

00:34:40,020 --> 00:34:44,429
that and I'm going to create some very

00:34:42,419 --> 00:34:47,520
simple example and then I'm going to

00:34:44,429 --> 00:34:51,169
show you if you have an existing design

00:34:47,520 --> 00:34:55,679
system how easy it is to actually use it

00:34:51,169 --> 00:34:59,880
so let's create a text field it will get

00:34:55,679 --> 00:35:01,770
two new probes that you don't specify in

00:34:59,880 --> 00:35:03,420
the schema and those are input in my

00:35:01,770 --> 00:35:05,010
time in the input property we'll get

00:35:03,420 --> 00:35:06,839
your own change you will get your value

00:35:05,010 --> 00:35:09,510
you will get your own blue focus and

00:35:06,839 --> 00:35:11,730
stuff like that basically the things

00:35:09,510 --> 00:35:13,440
that will change the form stage and in

00:35:11,730 --> 00:35:15,150
the meta to beauty will get your error

00:35:13,440 --> 00:35:17,869
message you will get your other meta

00:35:15,150 --> 00:35:20,730
tags like if the field is valid etc and

00:35:17,869 --> 00:35:22,619
then you will get anything that you want

00:35:20,730 --> 00:35:24,630
so let's say our pixel is going to have

00:35:22,619 --> 00:35:30,859
label let's say it's going to place

00:35:24,630 --> 00:35:35,099
holder what size come out protects

00:35:30,859 --> 00:35:37,760
protects and let's say that we wanted to

00:35:35,099 --> 00:35:37,760
be required

00:35:48,569 --> 00:35:54,209
so let's create that interview it's

00:35:51,900 --> 00:36:02,509
going to bei this let's give it some

00:35:54,209 --> 00:36:13,319
style let's make it flex because why not

00:36:02,509 --> 00:36:29,929
make it and I call them okay so now

00:36:13,319 --> 00:36:34,859
let's do the label now let's use the

00:36:29,929 --> 00:36:36,329
let's actually define the input and

00:36:34,859 --> 00:36:41,039
maybe a good thing would be to have a

00:36:36,329 --> 00:36:42,599
type of nothing let's give it all the

00:36:41,039 --> 00:36:47,839
input props that we get from the

00:36:42,599 --> 00:36:47,839
four-state let's give it the type

00:36:56,240 --> 00:37:04,780
and then let's use if we have some

00:36:59,390 --> 00:37:04,780
helper text let's give it another

00:37:11,640 --> 00:37:19,540
they're less so I just defined a very

00:37:14,740 --> 00:37:24,730
basic component and I will now take the

00:37:19,540 --> 00:37:31,330
constant of that component give it to

00:37:24,730 --> 00:37:36,760
the forum filter and use the component

00:37:31,330 --> 00:37:41,340
as a value and it's there in southern

00:37:36,760 --> 00:37:45,850
links render so let's also give some

00:37:41,340 --> 00:37:49,200
state so you can actually see that you

00:37:45,850 --> 00:37:49,200
have written inside everything

00:38:17,000 --> 00:38:31,950
and whenever we submit the values we'll

00:38:27,060 --> 00:38:34,680
just set them Jorge state so I can now

00:38:31,950 --> 00:38:36,329
type my name inside of here and I will

00:38:34,680 --> 00:38:39,920
get it in the home state so this is the

00:38:36,329 --> 00:38:42,030
album so this is very basic example

00:38:39,920 --> 00:38:45,180
let's say that we want to add some

00:38:42,030 --> 00:38:48,560
validation so required validation is

00:38:45,180 --> 00:38:48,560
good enough for this example I think

00:38:49,490 --> 00:38:57,320
what would be required validator I will

00:38:53,040 --> 00:38:57,320
just copy and paste it from the docks

00:39:00,079 --> 00:39:12,969
and who's this and I also added the

00:39:06,160 --> 00:39:15,019
required prop in our text field now one

00:39:12,969 --> 00:39:17,089
important thing to mention like this

00:39:15,019 --> 00:39:19,279
validate feel only does the validation

00:39:17,089 --> 00:39:21,019
it doesn't change the look of that

00:39:19,279 --> 00:39:23,569
component so if you want to add you know

00:39:21,019 --> 00:39:27,099
some asterisks and stuff like that you

00:39:23,569 --> 00:39:30,469
will have to specify that specifically

00:39:27,099 --> 00:39:34,160
for that component now the reason why we

00:39:30,469 --> 00:39:36,229
did this is that we didn't want to go

00:39:34,160 --> 00:39:38,929
through all the validators and then some

00:39:36,229 --> 00:39:41,449
create some magic attribute because a

00:39:38,929 --> 00:39:43,549
lot of material UI for instance uses

00:39:41,449 --> 00:39:46,069
required you know parent fly uses is

00:39:43,549 --> 00:39:48,170
required and your different component

00:39:46,069 --> 00:39:49,699
can use different type of flag for that

00:39:48,170 --> 00:39:51,949
and we have a lot of different

00:39:49,699 --> 00:39:54,739
validations like for maximum and minimum

00:39:51,949 --> 00:39:58,579
one via validation for reg X URLs except

00:39:54,739 --> 00:40:00,559
ax so going through you know going

00:39:58,579 --> 00:40:02,869
through all these validations and coming

00:40:00,559 --> 00:40:04,519
up with different attributes and kind of

00:40:02,869 --> 00:40:06,109
guessing what kind of attributes your

00:40:04,519 --> 00:40:09,019
components are using it's not really an

00:40:06,109 --> 00:40:11,599
option so this is another thing that we

00:40:09,019 --> 00:40:13,309
didn't want to dictate the api's of your

00:40:11,599 --> 00:40:20,359
component II will just use your own

00:40:13,309 --> 00:40:23,660
things so my field is now required if I

00:40:20,359 --> 00:40:25,369
save this and if I try to submit it you

00:40:23,660 --> 00:40:27,890
see that nothing happens but only the

00:40:25,369 --> 00:40:29,599
field gets focused I would also probably

00:40:27,890 --> 00:40:32,779
want to see the validation message of

00:40:29,599 --> 00:40:34,279
dot-com or of that error so the

00:40:32,779 --> 00:40:36,729
validation message is hidden in this

00:40:34,279 --> 00:40:36,729
meta top

00:40:37,230 --> 00:40:53,180
so if there is an error I will use new

00:40:46,910 --> 00:40:53,180
element which will run the error message

00:40:57,220 --> 00:41:18,930
I missed something I'm supposed to use

00:41:02,140 --> 00:41:18,930
this so can somebody see the issue I

00:41:19,920 --> 00:41:25,750
don't I'm not gonna get Polly with that

00:41:25,240 --> 00:41:30,220
right now

00:41:25,750 --> 00:41:42,640
I don't know debug it it's probably

00:41:30,220 --> 00:41:50,010
something no no it should be in the

00:41:42,640 --> 00:41:53,609
metal object yeah over there is an error

00:41:50,010 --> 00:41:53,609
there is big

00:41:56,569 --> 00:42:14,599
so tribute see that is the error message

00:42:09,229 --> 00:42:21,589
I don't know why it's not showing you

00:42:14,599 --> 00:42:33,309
see it here oh yeah this is this is why

00:42:21,589 --> 00:42:33,309
live demos are the best always oh it is

00:42:36,219 --> 00:42:44,150
it works after all so there it is you've

00:42:41,509 --> 00:42:45,679
got your validation now this is very

00:42:44,150 --> 00:42:53,029
ugly you wouldn't really want to use

00:42:45,679 --> 00:42:58,189
that anywhere so I pre-installed in

00:42:53,029 --> 00:43:00,679
material UI to showcase how easy it is

00:42:58,189 --> 00:43:09,459
to use existing components in your

00:43:00,679 --> 00:43:09,459
component mappers react or text field

00:43:09,520 --> 00:43:19,330
so for the material you are oh you don't

00:43:16,330 --> 00:43:24,570
need to have this you can just delete it

00:43:19,330 --> 00:43:40,920
just use the text field we will give it

00:43:24,570 --> 00:43:40,920
the input props label required

00:43:44,020 --> 00:43:52,140
so just a bit quiet on tape

00:43:48,900 --> 00:43:52,140
why not

00:43:53,760 --> 00:44:02,670
ooh and suddenly there's material your

00:43:55,980 --> 00:44:07,230
input which works exactly the same if I

00:44:02,670 --> 00:44:16,290
use hypertext I can give it a helpful

00:44:07,230 --> 00:44:19,109
text or use the meta so this is how it

00:44:16,290 --> 00:44:20,820
works you can see if you have already

00:44:19,109 --> 00:44:24,300
predefined components it's very simple

00:44:20,820 --> 00:44:26,609
and you don't really have to do that

00:44:24,300 --> 00:44:28,320
much coding you just have to you know

00:44:26,609 --> 00:44:31,619
connect this component to the form

00:44:28,320 --> 00:44:34,020
stable so rather than just showing you

00:44:31,619 --> 00:44:38,010
these simple examples I will just move

00:44:34,020 --> 00:44:41,940
on towards something that we are using

00:44:38,010 --> 00:44:44,070
right now in the cloud services so this

00:44:41,940 --> 00:44:47,580
is a sources page basically what this

00:44:44,070 --> 00:44:49,980
means you use some clouds Scout services

00:44:47,580 --> 00:44:52,710
provider like Amazon and openshift you

00:44:49,980 --> 00:44:55,920
connect it to your you connected to your

00:44:52,710 --> 00:44:57,660
tenant or blue loop or whatever and you

00:44:55,920 --> 00:44:59,850
can then order some stuff you can burn

00:44:57,660 --> 00:45:01,320
it or eat etc it's not really that

00:44:59,850 --> 00:45:06,930
important for this showcase

00:45:01,320 --> 00:45:09,720
I click so when you want to add a new

00:45:06,930 --> 00:45:12,060
source you are going to be shown this

00:45:09,720 --> 00:45:16,890
wizard and everything is this visit is

00:45:12,060 --> 00:45:22,050
done via data to inform so let's look at

00:45:16,890 --> 00:45:24,660
some of the features so then now you

00:45:22,050 --> 00:45:26,100
have some page you can choose your

00:45:24,660 --> 00:45:28,680
application for which you want to use

00:45:26,100 --> 00:45:32,670
this source so let's say I when I do

00:45:28,680 --> 00:45:35,520
catalog and only available source type

00:45:32,670 --> 00:45:38,490
for catalogs and symbols our okay then

00:45:35,520 --> 00:45:40,680
let's go to the next step you need to

00:45:38,490 --> 00:45:44,580
add some name you need to add some

00:45:40,680 --> 00:45:46,710
password and you can see that if this

00:45:44,580 --> 00:45:48,930
you know subform is not valid you can't

00:45:46,710 --> 00:45:51,330
move to the next page or next step you

00:45:48,930 --> 00:45:54,480
can't click to the next step let's give

00:45:51,330 --> 00:45:57,930
it some something else you can do some

00:45:54,480 --> 00:46:00,420
more parameters you know URL success ah

00:45:57,930 --> 00:46:06,710
well this is not a URL I can't go

00:46:00,420 --> 00:46:06,710
somewhere else something else

00:46:07,430 --> 00:46:17,310
whatever it's still on TRL no let's use

00:46:13,530 --> 00:46:20,730
this thing so the validation is quite

00:46:17,310 --> 00:46:22,260
solid and you know about it for

00:46:20,730 --> 00:46:23,670
validation you can use asynchronous

00:46:22,260 --> 00:46:26,609
validation you can discussed on

00:46:23,670 --> 00:46:28,740
functions whatever you need you can

00:46:26,609 --> 00:46:31,589
you've got not this nice summary page

00:46:28,740 --> 00:46:33,480
you can go back you can choose the you

00:46:31,589 --> 00:46:37,320
know different applications you want you

00:46:33,480 --> 00:46:39,450
want to use everything you have to you

00:46:37,320 --> 00:46:41,430
know everything is and work you can also

00:46:39,450 --> 00:46:43,349
say that you know whether the feel is

00:46:41,430 --> 00:46:45,720
gone from the from the Dom you can

00:46:43,349 --> 00:46:47,400
delete those stuff and you can imagine

00:46:45,720 --> 00:46:51,690
there's actually quite a lot of logic

00:46:47,400 --> 00:46:53,430
you know behind this component and you

00:46:51,690 --> 00:46:55,170
know anytime you know you want to use

00:46:53,430 --> 00:46:57,180
wizard you don't have to write anything

00:46:55,170 --> 00:46:59,849
you just have to write ok I want these

00:46:57,180 --> 00:47:01,410
components to be in this step I want

00:46:59,849 --> 00:47:04,410
these validations you know and when I

00:47:01,410 --> 00:47:06,510
select the type to be X I want to go

00:47:04,410 --> 00:47:08,490
this route or I want to go another round

00:47:06,510 --> 00:47:12,230
so this is kind of nice it's nice

00:47:08,490 --> 00:47:16,680
example the another one I can show you

00:47:12,230 --> 00:47:21,450
is how does it work with dynamic data

00:47:16,680 --> 00:47:26,940
fetching first my goals so in different

00:47:21,450 --> 00:47:29,490
application in catalog you can run play

00:47:26,940 --> 00:47:31,020
books from ansible tower if you don't

00:47:29,490 --> 00:47:33,359
know what that means you have basically

00:47:31,020 --> 00:47:36,240
some scenario somewhere written that

00:47:33,359 --> 00:47:38,310
will tell you I want to install you know

00:47:36,240 --> 00:47:41,339
new operating system and I want to use

00:47:38,310 --> 00:47:44,130
10 CPUs for that and I want it to run

00:47:41,339 --> 00:47:46,170
you know every 5 minutes or whatever and

00:47:44,130 --> 00:47:50,130
it seems that the site is down which is

00:47:46,170 --> 00:47:55,280
amazing as always like the most are the

00:47:50,130 --> 00:47:55,280
best there is

00:47:55,350 --> 00:48:01,470
so how we do that so you can you know

00:47:58,500 --> 00:48:05,010
create these groups of items inside

00:48:01,470 --> 00:48:07,140
catalog you say I won't have these

00:48:05,010 --> 00:48:08,910
chopped template the job templates and

00:48:07,140 --> 00:48:11,250
based on that job top and plus when you

00:48:08,910 --> 00:48:17,370
want to run that thing you will get a

00:48:11,250 --> 00:48:19,620
form and the site is down again or the

00:48:17,370 --> 00:48:22,980
connection is really slow well how does

00:48:19,620 --> 00:48:27,030
it basically works is that you send a

00:48:22,980 --> 00:48:28,560
request to a server it will send you the

00:48:27,030 --> 00:48:30,480
schema and from that schema you are

00:48:28,560 --> 00:48:32,370
going to hundred there are also another

00:48:30,480 --> 00:48:34,350
features like you can take that schema

00:48:32,370 --> 00:48:36,360
you can modify it inside the application

00:48:34,350 --> 00:48:38,610
you know you can change your validation

00:48:36,360 --> 00:48:42,240
messages you can change your names

00:48:38,610 --> 00:48:44,340
labels etc and you can customize it to

00:48:42,240 --> 00:48:46,350
your needs like for a longing user you

00:48:44,340 --> 00:48:48,120
want to show just half of the attributes

00:48:46,350 --> 00:48:50,370
because you don't want them to customize

00:48:48,120 --> 00:48:52,770
the number of CPUs because that's going

00:48:50,370 --> 00:48:55,530
to cost a lot of money you want them you

00:48:52,770 --> 00:48:57,600
know to customize maybe just you know

00:48:55,530 --> 00:49:00,180
the times and play book is supposed to

00:48:57,600 --> 00:49:01,830
run and stuff like that and you can see

00:49:00,180 --> 00:49:02,900
right now doing that manually isn't

00:49:01,830 --> 00:49:05,460
really possible

00:49:02,900 --> 00:49:07,350
you kind of need some sort of engine

00:49:05,460 --> 00:49:10,500
which will render this you guys for you

00:49:07,350 --> 00:49:16,290
I was kind of hoping that I could show

00:49:10,500 --> 00:49:18,450
that to you but I guess I won't well you

00:49:16,290 --> 00:49:21,110
have to be connected to VPN and stuff

00:49:18,450 --> 00:49:21,110
like that but

00:49:35,329 --> 00:49:41,410
something is happening Network changed

00:49:43,720 --> 00:49:50,780
yeah III don't want to get bogged down

00:49:47,930 --> 00:49:56,200
with this stuff so you're gonna have to

00:49:50,780 --> 00:50:03,470
just take my word for it it works and

00:49:56,200 --> 00:50:07,099
that's about it I would like to thank

00:50:03,470 --> 00:50:10,069
you for your attention if you are

00:50:07,099 --> 00:50:11,859
interested in the data journal forms

00:50:10,069 --> 00:50:14,930
there are some contacts you can use

00:50:11,859 --> 00:50:17,630
definitely check out the github repo we

00:50:14,930 --> 00:50:20,480
are always looking for some help you can

00:50:17,630 --> 00:50:22,550
check out the docs and if you need to

00:50:20,480 --> 00:50:24,530
get in contact with me specifically you

00:50:22,550 --> 00:50:26,750
can use the email or I've always said

00:50:24,530 --> 00:50:32,020
good job well always when I'm not

00:50:26,750 --> 00:50:32,020
sleeping so you can contact me there

00:50:33,010 --> 00:50:36,010
please

00:50:41,590 --> 00:50:46,410
[Music]

00:50:43,670 --> 00:50:49,110
yeah so the question was if I have any

00:50:46,410 --> 00:50:57,900
links to the examples that I was showing

00:50:49,110 --> 00:51:01,170
at this thank you so we had examples for

00:50:57,900 --> 00:51:05,580
all the components that we use at the

00:51:01,170 --> 00:51:12,540
data gem forums documentation so if you

00:51:05,580 --> 00:51:14,910
want to see just visit the collection

00:51:12,540 --> 00:51:18,770
which actually works but we don't have

00:51:14,910 --> 00:51:21,150
specific examples you know to these

00:51:18,770 --> 00:51:24,030
components because obviously they are

00:51:21,150 --> 00:51:28,710
used in the cloud services in the cloud

00:51:24,030 --> 00:51:31,200
services application so I think there

00:51:28,710 --> 00:51:32,790
are some pictures yeah you can try it

00:51:31,200 --> 00:51:36,690
out over here you can see some of the

00:51:32,790 --> 00:51:40,200
schemas for the vigil I think there are

00:51:36,690 --> 00:51:42,680
even some pictures here yes I think this

00:51:40,200 --> 00:51:45,300
is taken directly for the call services

00:51:42,680 --> 00:51:48,030
so most of the stuff that I was showing

00:51:45,300 --> 00:51:49,560
you here today is taken from our

00:51:48,030 --> 00:51:51,690
documentation so if you want to check

00:51:49,560 --> 00:51:55,310
that out you can go through it you will

00:51:51,690 --> 00:51:58,430
find a lot of you notice that there

00:51:55,310 --> 00:51:58,430
anybody else

00:52:10,790 --> 00:52:17,910
yes yes so the question was the reason

00:52:15,960 --> 00:52:20,339
of this library is that you can generate

00:52:17,910 --> 00:52:23,160
a schema and if you need to write it

00:52:20,339 --> 00:52:25,589
manually there is you know no point of

00:52:23,160 --> 00:52:27,809
doing that just right into j6 that's a

00:52:25,589 --> 00:52:29,640
very good point and we are actually

00:52:27,809 --> 00:52:32,099
working on a editor when you can just

00:52:29,640 --> 00:52:33,869
drag and drop all these components and

00:52:32,099 --> 00:52:36,059
it will generate the schema for you and

00:52:33,869 --> 00:52:39,859
then you can use the thing now writing

00:52:36,059 --> 00:52:42,480
that manually is a little bit painful I

00:52:39,859 --> 00:52:45,540
definitely agree with that but it will

00:52:42,480 --> 00:52:47,520
still take away the necessity of many of

00:52:45,540 --> 00:52:53,010
you know magic managing the state on

00:52:47,520 --> 00:52:55,770
your own that is the editor is going to

00:52:53,010 --> 00:52:57,960
be included very soon we actually have

00:52:55,770 --> 00:53:00,020
to work an example in the cloud services

00:52:57,960 --> 00:53:03,020
we just need to flesh out some you know

00:53:00,020 --> 00:53:03,020
box

00:53:11,150 --> 00:53:14,150
yes

00:53:28,030 --> 00:53:34,310
yeah so the comment from the audience

00:53:31,430 --> 00:53:35,870
was that they see the main benefit that

00:53:34,310 --> 00:53:38,180
you have some functions which will

00:53:35,870 --> 00:53:40,070
generate the schema for you and that is

00:53:38,180 --> 00:53:42,050
exactly the case for the wizard that you

00:53:40,070 --> 00:53:43,880
saw like writing that schema manually

00:53:42,050 --> 00:53:45,920
did will be insane there's like 50

00:53:43,880 --> 00:53:49,070
different fields and it branches and all

00:53:45,920 --> 00:53:50,420
the paths all around what we do there we

00:53:49,070 --> 00:53:53,060
are you know fetching all of these

00:53:50,420 --> 00:53:55,010
partials from server and then we use

00:53:53,060 --> 00:53:56,420
these functions to create a schema you

00:53:55,010 --> 00:53:59,270
know to kind of bound it all together

00:53:56,420 --> 00:54:01,960
and then you can render that you know

00:53:59,270 --> 00:54:05,080
fairly complex form if you ask me

00:54:01,960 --> 00:54:05,080
another question

00:54:08,860 --> 00:54:15,470
well I guess that's it so it was great

00:54:12,890 --> 00:54:19,280
talking to you and I hope you liked it I

00:54:15,470 --> 00:54:21,440
hope you will try that library and not I

00:54:19,280 --> 00:54:24,560
will help you that whenever you need to

00:54:21,440 --> 00:54:27,920
write some you know generate the QI you

00:54:24,560 --> 00:54:29,540
will remember that sometimes the backend

00:54:27,920 --> 00:54:31,700
technologies are not enough even though

00:54:29,540 --> 00:54:35,000
that your team is going to try you to

00:54:31,700 --> 00:54:37,730
otherwise and thank you for an intention

00:54:35,000 --> 00:54:41,739
and it was pleasure speaking to

00:54:37,730 --> 00:54:41,739

YouTube URL: https://www.youtube.com/watch?v=MK77GeenXLs


