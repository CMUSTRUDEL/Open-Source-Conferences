Title: Operators for Beginners - DevConf.CZ 2020
Publication date: 2020-03-25
Playlist: DevConfCZ 2020
Description: 
	Speakers: Dominik Süß

Operators are the hottest thing in DevOps right now, but what exactly do they do? This Session will cover the basics of Operators and their development, continuously increasing in complexity. We'll walk through the different stages of Operators and briefly touch on the Operator Lifecycle Manager.

After the talk, you'll know what the fuzz is all about and know how to get started developing your own operator. Basic Kubernetes skills are required.

[ https://sched.co/YOsm ]

--
Recordings of talks at DevConf are a community effort. Unfortunately not everything works perfectly every time. If you're interested in helping us improve, let us know.
Captions: 
	00:00:00,260 --> 00:00:04,880
so first of all thanks you're saying

00:00:02,870 --> 00:00:07,279
thanks for being here this is actually

00:00:04,880 --> 00:00:09,050
my first talk at a great present at a

00:00:07,279 --> 00:00:10,730
great conference so I hope I'm not too

00:00:09,050 --> 00:00:13,309
nervous for this but today we're going

00:00:10,730 --> 00:00:15,769
to talk about operators how to develop

00:00:13,309 --> 00:00:17,720
them how they actually work and then

00:00:15,769 --> 00:00:19,460
we're just going to touch on how to get

00:00:17,720 --> 00:00:21,800
one up and running inside of an open

00:00:19,460 --> 00:00:27,320
shipped cluster so the first question we

00:00:21,800 --> 00:00:30,289
have to ask yourself is how what do

00:00:27,320 --> 00:00:32,839
operators actually do so we often see

00:00:30,289 --> 00:00:34,760
online password bingo style yeah we have

00:00:32,839 --> 00:00:36,499
an operator for that or this is solved

00:00:34,760 --> 00:00:38,479
by an operator there's an operator for

00:00:36,499 --> 00:00:40,429
anything but what does an operator

00:00:38,479 --> 00:00:42,620
actually do if you search for it online

00:00:40,429 --> 00:00:44,179
you will find the following definitions

00:00:42,620 --> 00:00:46,489
that it's a method of packaging

00:00:44,179 --> 00:00:49,309
operational knowledge you can control it

00:00:46,489 --> 00:00:50,780
via standard kubernetes tooling but this

00:00:49,309 --> 00:00:52,670
really didn't give me an intuition on

00:00:50,780 --> 00:00:55,190
how they actually work on a technical

00:00:52,670 --> 00:00:57,289
level so for this I have prepared kind

00:00:55,190 --> 00:01:00,049
of a short overview how the operator

00:00:57,289 --> 00:01:02,479
architecture looks like so in the end we

00:01:00,049 --> 00:01:04,900
have a resource which is your standard

00:01:02,479 --> 00:01:07,490
kubernetes resource like a port like a

00:01:04,900 --> 00:01:09,500
deployment configuration or OpenShift

00:01:07,490 --> 00:01:11,690
resources like an image scream or a

00:01:09,500 --> 00:01:14,390
build configuration and you change those

00:01:11,690 --> 00:01:16,520
inside of kubernetes so as of now

00:01:14,390 --> 00:01:18,230
nothing has to do with the operator you

00:01:16,520 --> 00:01:21,140
just change a resource inside of

00:01:18,230 --> 00:01:23,390
kubernetes so now the operator comes in

00:01:21,140 --> 00:01:25,340
gets triggered by kubernetes and perform

00:01:23,390 --> 00:01:27,410
some action this could be and at this

00:01:25,340 --> 00:01:29,660
point this can be any action at all it

00:01:27,410 --> 00:01:32,390
could go ahead and delete the resource

00:01:29,660 --> 00:01:34,910
as soon as we create it it could attach

00:01:32,390 --> 00:01:36,680
a label based on some condition or in

00:01:34,910 --> 00:01:40,100
this case it could interact with an

00:01:36,680 --> 00:01:41,930
external system so for now the operator

00:01:40,100 --> 00:01:43,970
is just a black box which takes a

00:01:41,930 --> 00:01:45,760
resource perform some action on it and

00:01:43,970 --> 00:01:48,680
then saves it back to the resource and

00:01:45,760 --> 00:01:50,720
that's really all an operator is we have

00:01:48,680 --> 00:01:53,090
a resource we perform an action on it

00:01:50,720 --> 00:01:56,390
and update it back into the cluster so

00:01:53,090 --> 00:01:59,000
now what do we do with those resources

00:01:56,390 --> 00:02:00,950
we already have pods in kubernetes we

00:01:59,000 --> 00:02:03,470
already have deployments we already have

00:02:00,950 --> 00:02:04,880
routes we already have services what

00:02:03,470 --> 00:02:08,209
kind of functionality could we actually

00:02:04,880 --> 00:02:10,249
implement using an operator so we're not

00:02:08,209 --> 00:02:12,650
limited to only the kubernetes resources

00:02:10,249 --> 00:02:13,700
we can specify our own resources this is

00:02:12,650 --> 00:02:15,200
called custom resource

00:02:13,700 --> 00:02:17,360
which is a method introduced in

00:02:15,200 --> 00:02:19,790
kubernetes to allow developers to

00:02:17,360 --> 00:02:21,800
package their own resources into

00:02:19,790 --> 00:02:23,780
kubernetes the whole thing works by a

00:02:21,800 --> 00:02:25,519
custom resource definitions which are is

00:02:23,780 --> 00:02:27,200
a schema for your resource which you

00:02:25,519 --> 00:02:29,269
submit to your cluster and after that

00:02:27,200 --> 00:02:31,310
point you can do everything with your

00:02:29,269 --> 00:02:34,400
resource as it would be a default

00:02:31,310 --> 00:02:36,170
kubernetes resource coober custom

00:02:34,400 --> 00:02:38,239
resources can be namespace they can be

00:02:36,170 --> 00:02:40,370
cluster scope and they have a few

00:02:38,239 --> 00:02:43,069
advantages over just providing a plain

00:02:40,370 --> 00:02:44,810
old API which I will get into later so

00:02:43,069 --> 00:02:47,480
what this custom resource actually

00:02:44,810 --> 00:02:49,190
looked like so a custom resource in this

00:02:47,480 --> 00:02:51,709
case I just defined a custom resource

00:02:49,190 --> 00:02:53,870
called key and a single field called

00:02:51,709 --> 00:02:56,209
value and now we are basically abusing

00:02:53,870 --> 00:02:58,010
kubernetes as a key value store custom

00:02:56,209 --> 00:03:00,019
resources do absolutely nothing on their

00:02:58,010 --> 00:03:02,450
own they get saved into kubernetes like

00:03:00,019 --> 00:03:05,150
any other resource but after that that's

00:03:02,450 --> 00:03:07,340
it there's no logic behind the custom

00:03:05,150 --> 00:03:10,569
resource it's just a schema to store

00:03:07,340 --> 00:03:13,010
additional resources into kubernetes so

00:03:10,569 --> 00:03:15,590
after we have added this resource to

00:03:13,010 --> 00:03:19,040
kubernetes we can use our standard cube

00:03:15,590 --> 00:03:20,600
CTO tooling to get key value store so

00:03:19,040 --> 00:03:23,480
why would we actually want to do this

00:03:20,600 --> 00:03:25,730
why not just provide an API or use a

00:03:23,480 --> 00:03:27,380
default key value store you shouldn't

00:03:25,730 --> 00:03:29,810
actually use kubernetes as a key value

00:03:27,380 --> 00:03:31,430
store but the reason behind custom

00:03:29,810 --> 00:03:33,650
resources why they are so awesome is

00:03:31,430 --> 00:03:34,970
they work with all kubernetes clients

00:03:33,650 --> 00:03:36,709
out of the box so if you have a

00:03:34,970 --> 00:03:38,329
kubernetes client you can use the custom

00:03:36,709 --> 00:03:40,400
resources as if they were native

00:03:38,329 --> 00:03:42,950
resources you get role based access

00:03:40,400 --> 00:03:45,650
control all of the books you can specify

00:03:42,950 --> 00:03:47,870
roll bindings roles user mappings all

00:03:45,650 --> 00:03:49,940
the nice stuff of kubernetes you get API

00:03:47,870 --> 00:03:51,680
versioning which is also something which

00:03:49,940 --> 00:03:53,569
is good to have and if you already have

00:03:51,680 --> 00:03:55,790
a backup infrastructure in place to back

00:03:53,569 --> 00:03:57,920
up your whole cluster custom resources

00:03:55,790 --> 00:03:59,359
will get backed up as well also if

00:03:57,920 --> 00:04:02,299
you're using something like open shift

00:03:59,359 --> 00:04:04,280
or another UI tool you will have UI

00:04:02,299 --> 00:04:05,660
integration for your custom resources so

00:04:04,280 --> 00:04:07,730
in the latest OpenShift version

00:04:05,660 --> 00:04:10,609
OpenShift or you also get a nice

00:04:07,730 --> 00:04:12,530
overview of audio custom resources you

00:04:10,609 --> 00:04:14,780
can provision new custom resources from

00:04:12,530 --> 00:04:16,849
the catalog but yeah that's basically

00:04:14,780 --> 00:04:18,979
the use case for providing custom

00:04:16,849 --> 00:04:20,750
resources in contrast to just providing

00:04:18,979 --> 00:04:24,590
a separate server which is offering an

00:04:20,750 --> 00:04:26,480
API so to get some to get a feeling what

00:04:24,590 --> 00:04:29,870
we can achieve with operators I have

00:04:26,480 --> 00:04:32,350
some example operators so these are all

00:04:29,870 --> 00:04:35,270
community operators most of them and

00:04:32,350 --> 00:04:37,010
they just just want to showcase what an

00:04:35,270 --> 00:04:38,690
operator can actually do so we have the

00:04:37,010 --> 00:04:41,270
Prometheus operator which manages

00:04:38,690 --> 00:04:43,940
installation of of Prometheus but also

00:04:41,270 --> 00:04:46,520
configuration of couple of parameters so

00:04:43,940 --> 00:04:49,280
I can install a complete Prometheus

00:04:46,520 --> 00:04:51,650
setup and also control it via custom

00:04:49,280 --> 00:04:54,860
resources so I could have a have a

00:04:51,650 --> 00:04:56,570
premiere first server and then apply

00:04:54,860 --> 00:04:58,100
Prometheus rules all inside of

00:04:56,570 --> 00:05:00,380
kubernetes can manage this along

00:04:58,100 --> 00:05:02,600
alongside with my application manifest

00:05:00,380 --> 00:05:04,760
and it's all managed by an operator in

00:05:02,600 --> 00:05:07,700
there in the end there's also the Yaga

00:05:04,760 --> 00:05:10,340
operator a post-race operator and those

00:05:07,700 --> 00:05:13,490
kind of operators all provide a resource

00:05:10,340 --> 00:05:15,530
so we have a resource we perform an

00:05:13,490 --> 00:05:17,510
action on it and in this case the action

00:05:15,530 --> 00:05:19,430
is provide additional resources in our

00:05:17,510 --> 00:05:21,530
company this cluster for example if I

00:05:19,430 --> 00:05:23,900
want to go ahead and provide a new

00:05:21,530 --> 00:05:26,210
prometheus instance I create a customer

00:05:23,900 --> 00:05:28,730
ease I create this resource and the

00:05:26,210 --> 00:05:30,740
operator will go ahead and hey this guy

00:05:28,730 --> 00:05:32,750
requested a Prometheus server and we'll

00:05:30,740 --> 00:05:35,240
go ahead and start a deployment config

00:05:32,750 --> 00:05:38,510
or I will go ahead and spawn new pods

00:05:35,240 --> 00:05:40,940
for this existing one so those are all

00:05:38,510 --> 00:05:42,290
updating things inside of kubernetes but

00:05:40,940 --> 00:05:44,300
you could also use an operator to

00:05:42,290 --> 00:05:45,500
perform actions completely unrelated to

00:05:44,300 --> 00:05:48,830
kubernetes for this

00:05:45,500 --> 00:05:50,870
there's the AWS s3 operator which means

00:05:48,830 --> 00:05:52,460
you can now use cucumber Nettie's to

00:05:50,870 --> 00:05:53,900
store informations about your packets

00:05:52,460 --> 00:05:56,150
you can request new packets you can

00:05:53,900 --> 00:05:58,400
create pockets you can edit quotas for

00:05:56,150 --> 00:06:00,110
those packets this is all inside of

00:05:58,400 --> 00:06:02,870
kubernetes 10 so you never have to leave

00:06:00,110 --> 00:06:05,540
your kubernetes cluster and not to get a

00:06:02,870 --> 00:06:07,220
bit more concrete this is what a pod

00:06:05,540 --> 00:06:09,140
monitor resource looks like with

00:06:07,220 --> 00:06:11,750
Prometheus this is provided by the

00:06:09,140 --> 00:06:14,330
Prometheus operator and here again we

00:06:11,750 --> 00:06:17,270
have a plain odama resource specifying a

00:06:14,330 --> 00:06:19,580
selector match labels and afterwards the

00:06:17,270 --> 00:06:21,680
operator gets the textures resource

00:06:19,580 --> 00:06:24,110
takes this resource and reconfigures the

00:06:21,680 --> 00:06:26,710
existing premier first server to

00:06:24,110 --> 00:06:29,480
automatically scrape all pots with this

00:06:26,710 --> 00:06:31,370
label so this is something you can do

00:06:29,480 --> 00:06:34,820
with operators you could also go ahead

00:06:31,370 --> 00:06:36,620
and perform more complex in application

00:06:34,820 --> 00:06:38,990
configurations so this is from an

00:06:36,620 --> 00:06:39,599
elastic search operator where we can

00:06:38,990 --> 00:06:41,279
specify

00:06:39,599 --> 00:06:43,649
version of the elasticsearch cluster we

00:06:41,279 --> 00:06:45,539
want to we want to provision we can

00:06:43,649 --> 00:06:47,639
specify additional elasticsearch

00:06:45,539 --> 00:06:49,619
specific configurations inside of

00:06:47,639 --> 00:06:51,289
kubernetes so I have this resource I

00:06:49,619 --> 00:06:53,399
don't need to take care of any

00:06:51,289 --> 00:06:55,199
elasticsearch specific configuration

00:06:53,399 --> 00:06:56,879
files I don't have to modify any config

00:06:55,199 --> 00:07:01,080
Maps it's just all inside of this

00:06:56,879 --> 00:07:03,539
resource ok so now we know roughly what

00:07:01,080 --> 00:07:06,240
an operator looks like and what kind of

00:07:03,539 --> 00:07:08,580
resources we can we can create now we

00:07:06,240 --> 00:07:10,379
need to actually develop our operator so

00:07:08,580 --> 00:07:12,149
you could theoretically develop an

00:07:10,379 --> 00:07:13,860
operator in any language you want you

00:07:12,149 --> 00:07:16,619
can even go as far and say I want to

00:07:13,860 --> 00:07:18,360
write an operator in bash write a simple

00:07:16,619 --> 00:07:20,430
while loop checking with kubernetes

00:07:18,360 --> 00:07:22,379
tooling it has a new resource being

00:07:20,430 --> 00:07:25,259
created and if it has been created

00:07:22,379 --> 00:07:27,119
perform some command line steps but the

00:07:25,259 --> 00:07:30,330
reasonable way to go is there are

00:07:27,119 --> 00:07:32,819
existing frameworks to ease getting

00:07:30,330 --> 00:07:34,349
started with operator development the

00:07:32,819 --> 00:07:37,319
biggest one right now is the operator

00:07:34,349 --> 00:07:39,119
SDK there is also a rust implementation

00:07:37,319 --> 00:07:40,769
of a kubernetes controller so if you're

00:07:39,119 --> 00:07:42,929
into that you can write your operators

00:07:40,769 --> 00:07:45,479
and rust you can also go a bit more

00:07:42,929 --> 00:07:47,249
low-level which which is where queue

00:07:45,479 --> 00:07:48,779
builder comes in this is also a

00:07:47,249 --> 00:07:51,680
component which is included in the

00:07:48,779 --> 00:07:53,759
operator SDK but you can take a

00:07:51,680 --> 00:07:57,240
low-level approach and build it from the

00:07:53,759 --> 00:07:59,369
ground up so for the rest of my talk I

00:07:57,240 --> 00:08:01,229
will just go into examples of how to get

00:07:59,369 --> 00:08:04,619
started writing an operator using the

00:08:01,229 --> 00:08:06,180
operator SDK the reason why I'm only

00:08:04,619 --> 00:08:07,919
talking about the operator SDK is

00:08:06,180 --> 00:08:09,539
because it's the easiest to get started

00:08:07,919 --> 00:08:11,999
you don't have to learn any low-level

00:08:09,539 --> 00:08:13,889
technical aspects of how to interact

00:08:11,999 --> 00:08:16,289
with the kubernetes api and you can

00:08:13,889 --> 00:08:18,889
start with a simple operator in a simple

00:08:16,289 --> 00:08:22,139
framework and work your way from there

00:08:18,889 --> 00:08:23,939
so this is a nice graph provided by the

00:08:22,139 --> 00:08:26,399
operator SDK which lists the

00:08:23,939 --> 00:08:29,009
capabilities of the operators so the

00:08:26,399 --> 00:08:31,259
operator SDK comes with free operator

00:08:29,009 --> 00:08:33,240
types out-of-the-box we have a helmet or

00:08:31,259 --> 00:08:35,880
an animal operator and the go operator

00:08:33,240 --> 00:08:37,979
and those support different levels of

00:08:35,880 --> 00:08:42,750
integration with the whole kubernetes

00:08:37,979 --> 00:08:44,310
system so I'll just go through them you

00:08:42,750 --> 00:08:45,810
can always go back to this graph it's a

00:08:44,310 --> 00:08:47,069
pretty popular graph which you'll find

00:08:45,810 --> 00:08:49,589
when you're searching for operators

00:08:47,069 --> 00:08:51,389
anywhere so let's start with the ham

00:08:49,589 --> 00:08:52,160
operator I've provided some sample code

00:08:51,389 --> 00:08:53,360
so

00:08:52,160 --> 00:08:55,610
you want to check out our github

00:08:53,360 --> 00:08:57,319
repository you can see every code

00:08:55,610 --> 00:08:59,120
snippet I'm posting here in a

00:08:57,319 --> 00:09:00,980
full-fledged operator which is fear

00:08:59,120 --> 00:09:03,800
ethically ready to be deployed but not

00:09:00,980 --> 00:09:05,839
production ready so the hem operator

00:09:03,800 --> 00:09:08,930
uses simple help charts to deploy

00:09:05,839 --> 00:09:10,399
resources so you can also guess from

00:09:08,930 --> 00:09:12,439
this that you can't really integrate

00:09:10,399 --> 00:09:14,329
with something outside of kubernetes so

00:09:12,439 --> 00:09:16,430
if you already have a simple ham chart

00:09:14,329 --> 00:09:19,850
you can take the operator SDK and

00:09:16,430 --> 00:09:21,769
package it into an operator in no time

00:09:19,850 --> 00:09:23,480
what this actually looks like is you

00:09:21,769 --> 00:09:25,040
have your operator SDK which were

00:09:23,480 --> 00:09:27,589
bootstrap a folder structure for you

00:09:25,040 --> 00:09:30,350
this will look roughly like this in this

00:09:27,589 --> 00:09:32,600
example I'm creating a Redis operator

00:09:30,350 --> 00:09:34,339
using the operator SDK you have your

00:09:32,600 --> 00:09:36,949
build folder which contains a docker

00:09:34,339 --> 00:09:39,019
file to package all your operator

00:09:36,949 --> 00:09:41,240
resources you have a deploy folder

00:09:39,019 --> 00:09:43,399
containing custom resource definitions

00:09:41,240 --> 00:09:45,379
containing instructions on how to

00:09:43,399 --> 00:09:47,449
actually run your operator inside of

00:09:45,379 --> 00:09:49,699
kubernetes and also what kinds of

00:09:47,449 --> 00:09:51,199
permission the operator needs and then

00:09:49,699 --> 00:09:53,420
the important part is the help charts

00:09:51,199 --> 00:09:55,339
directory and inside of there are just

00:09:53,420 --> 00:09:56,930
plain old ham charts nothing special

00:09:55,339 --> 00:09:58,939
about them if you already have an

00:09:56,930 --> 00:10:02,300
existing ham chart you can just drop it

00:09:58,939 --> 00:10:04,370
in there and it should work the way we

00:10:02,300 --> 00:10:06,410
interact we now interact with these ham

00:10:04,370 --> 00:10:09,259
charts so we have ham shots but we also

00:10:06,410 --> 00:10:12,470
need to specify some values into this

00:10:09,259 --> 00:10:14,329
ham shot so we if we just apply a single

00:10:12,470 --> 00:10:16,519
ham chart over and over we don't gain

00:10:14,329 --> 00:10:19,399
any benefits so this is where the

00:10:16,519 --> 00:10:21,649
watches fire comes in this looks roughly

00:10:19,399 --> 00:10:24,829
like this in here we actually create the

00:10:21,649 --> 00:10:27,079
mapping between our custom resources and

00:10:24,829 --> 00:10:29,149
the helm charts to be applied so inside

00:10:27,079 --> 00:10:31,430
of here I specify my API version I

00:10:29,149 --> 00:10:33,439
specify my group I specify the kind of

00:10:31,430 --> 00:10:36,230
resource I want to watch and then which

00:10:33,439 --> 00:10:38,000
chart to actually execute so this is the

00:10:36,230 --> 00:10:40,309
way the operator SDK then goes ahead and

00:10:38,000 --> 00:10:42,949
says ok I'm connecting to the kubernetes

00:10:40,309 --> 00:10:45,290
api notify me every foot every time

00:10:42,949 --> 00:10:48,350
Redis resource has changed and I will go

00:10:45,290 --> 00:10:50,930
ahead and apply this ham chart so for

00:10:48,350 --> 00:10:53,180
the helm chart component you just use

00:10:50,930 --> 00:10:54,769
your standard value study mo file where

00:10:53,180 --> 00:10:57,290
you insert your default values for you

00:10:54,769 --> 00:10:59,480
for your ham charts and then you can

00:10:57,290 --> 00:11:02,329
override this in your custom resource so

00:10:59,480 --> 00:11:05,220
as seen here I have a storage variable

00:11:02,329 --> 00:11:07,649
which is then directly referenced for

00:11:05,220 --> 00:11:10,589
my Redis custom resource where I can

00:11:07,649 --> 00:11:12,569
again specify a storage value inside of

00:11:10,589 --> 00:11:14,370
the helm chart this looks like any other

00:11:12,569 --> 00:11:15,959
helm chart you can just use the

00:11:14,370 --> 00:11:18,870
templating engine to insert this value

00:11:15,959 --> 00:11:22,379
into your concrete persistent volumes or

00:11:18,870 --> 00:11:24,300
ports or whatever so this is the way we

00:11:22,379 --> 00:11:24,980
interact with our custom resource from

00:11:24,300 --> 00:11:27,949
him

00:11:24,980 --> 00:11:30,990
so just to recap the ham operator it's

00:11:27,949 --> 00:11:32,550
best suited for existing ham charts if

00:11:30,990 --> 00:11:35,100
your organization is already working

00:11:32,550 --> 00:11:37,050
with helm pretty much for everything it

00:11:35,100 --> 00:11:39,720
should be simple to get started writing

00:11:37,050 --> 00:11:41,910
an operator out of it it's best suited

00:11:39,720 --> 00:11:44,850
for very small applications so you can't

00:11:41,910 --> 00:11:46,800
really perform advanced lifecycle

00:11:44,850 --> 00:11:49,889
operations like let's say for example I

00:11:46,800 --> 00:11:52,079
want to cluster my my radius instance I

00:11:49,889 --> 00:11:53,879
would need to perform some custom logic

00:11:52,079 --> 00:11:55,290
to ensure that everything is set up I

00:11:53,879 --> 00:11:58,019
have the right count of sentinels and

00:11:55,290 --> 00:11:59,459
master nodes I can't do that with helm

00:11:58,019 --> 00:12:02,189
so that's why it's suited for small

00:11:59,459 --> 00:12:04,410
applications and also again you don't

00:12:02,189 --> 00:12:06,660
have the capability to perform complex

00:12:04,410 --> 00:12:08,939
integration with external systems since

00:12:06,660 --> 00:12:11,759
it's all using him I can't go ahead and

00:12:08,939 --> 00:12:15,029
execute a remote API call it's just

00:12:11,759 --> 00:12:17,850
limited to this so the next operator is

00:12:15,029 --> 00:12:19,259
the ansible operator this is a more

00:12:17,850 --> 00:12:21,000
advanced operator and that it can

00:12:19,259 --> 00:12:22,290
perform any action that ensberg can do

00:12:21,000 --> 00:12:24,199
so you get the full lifecycle

00:12:22,290 --> 00:12:26,730
integration if you already know ansible

00:12:24,199 --> 00:12:28,879
you might already know some modules you

00:12:26,730 --> 00:12:31,769
can use to further enhance your operator

00:12:28,879 --> 00:12:33,540
it runs ends above playbooks using the

00:12:31,769 --> 00:12:36,360
ends of a runner which is a external

00:12:33,540 --> 00:12:39,089
component it supports full lifecycle

00:12:36,360 --> 00:12:42,720
management this means I can include

00:12:39,089 --> 00:12:45,269
hooks to say I want to just scale a

00:12:42,720 --> 00:12:47,370
resource up and I can use cube CTL scale

00:12:45,269 --> 00:12:50,550
to scale this resource up I can also

00:12:47,370 --> 00:12:53,279
detect perform custom status updates so

00:12:50,550 --> 00:12:55,220
in this example you will find that the

00:12:53,279 --> 00:12:57,480
elasticsearch operator actually

00:12:55,220 --> 00:12:59,370
pre-populates the elasticsearch resource

00:12:57,480 --> 00:13:01,500
with the status of the elasticsearch

00:12:59,370 --> 00:13:03,360
server so if my status of the server

00:13:01,500 --> 00:13:05,750
changes to red I will get this as a

00:13:03,360 --> 00:13:07,920
status report from the custom resource

00:13:05,750 --> 00:13:09,899
yet the integration with kubernetes

00:13:07,920 --> 00:13:11,939
happens through the standard ends up ok

00:13:09,899 --> 00:13:14,429
des module so if you know this module

00:13:11,939 --> 00:13:16,410
you will feel right at home and the

00:13:14,429 --> 00:13:17,490
operator SDK additionally provides a

00:13:16,410 --> 00:13:19,830
module called Kay

00:13:17,490 --> 00:13:24,060
status where you can update the status

00:13:19,830 --> 00:13:26,070
of any of your custom resources so again

00:13:24,060 --> 00:13:27,660
the folder structure looks roughly the

00:13:26,070 --> 00:13:29,520
same we can have a build folder which

00:13:27,660 --> 00:13:31,380
contains artifacts and docker file and

00:13:29,520 --> 00:13:33,660
whatever the deploy folder again

00:13:31,380 --> 00:13:36,300
containing custom resources but then

00:13:33,660 --> 00:13:38,399
we're also we also get a generated

00:13:36,300 --> 00:13:39,810
molecules folder which is a testing

00:13:38,399 --> 00:13:41,459
framework for Enzo build this is all

00:13:39,810 --> 00:13:43,410
pre-populated so you can perform

00:13:41,459 --> 00:13:45,720
end-to-end tests from inside of the

00:13:43,410 --> 00:13:47,459
operator framework and instead of a ham

00:13:45,720 --> 00:13:49,820
charts directory we now have a rolls

00:13:47,459 --> 00:13:52,380
directory containing the roles of our

00:13:49,820 --> 00:13:53,850
custom resources The Watcher study AMA

00:13:52,380 --> 00:13:57,540
file in this case doesn't map between

00:13:53,850 --> 00:14:01,200
help charts and in custom resources but

00:13:57,540 --> 00:14:03,149
between roles and custom resources to

00:14:01,200 --> 00:14:06,990
integrate using the Ndebele module at

00:14:03,149 --> 00:14:08,820
the ends of the operator we again have

00:14:06,990 --> 00:14:11,550
to specify our default values this is

00:14:08,820 --> 00:14:13,980
again just something specific to err to

00:14:11,550 --> 00:14:17,730
ansible so this is just your plain old

00:14:13,980 --> 00:14:20,130
default in zaboo and afterwards you use

00:14:17,730 --> 00:14:22,200
it like any other top-level editable

00:14:20,130 --> 00:14:23,760
variable and you can also access the

00:14:22,200 --> 00:14:25,589
metadata of your objects using the

00:14:23,760 --> 00:14:27,120
top-level meta object so if you want to

00:14:25,589 --> 00:14:30,149
access labels from ends up where you can

00:14:27,120 --> 00:14:32,190
also do this here and yeah again all

00:14:30,149 --> 00:14:35,820
those values will be replaced by those

00:14:32,190 --> 00:14:38,970
you specify in the custom resource to

00:14:35,820 --> 00:14:40,890
recap the ansible operator we have its

00:14:38,970 --> 00:14:42,870
best suited for medium complexity so if

00:14:40,890 --> 00:14:44,550
you already have an application if you

00:14:42,870 --> 00:14:47,010
want to deploy an application which has

00:14:44,550 --> 00:14:49,890
an instable module available you can

00:14:47,010 --> 00:14:52,230
reuse this and apply it to the created

00:14:49,890 --> 00:14:55,140
resource it allows for integration with

00:14:52,230 --> 00:14:57,600
other components so as I said before it

00:14:55,140 --> 00:14:59,070
can do anything and zaboo can do and if

00:14:57,600 --> 00:15:00,660
your earlier already have existing

00:14:59,070 --> 00:15:02,610
ansible knowledge in your organization

00:15:00,660 --> 00:15:04,110
you will feel right at home you can use

00:15:02,610 --> 00:15:07,860
your existing ends above playbooks

00:15:04,110 --> 00:15:09,450
inside of the operator sdk but the

00:15:07,860 --> 00:15:11,579
limitation is it's hard to go beyond

00:15:09,450 --> 00:15:13,170
this if you want to perform some other

00:15:11,579 --> 00:15:15,480
action you have to basically write your

00:15:13,170 --> 00:15:17,310
own in Zobel module for it and at that

00:15:15,480 --> 00:15:19,589
point it might just be simpler to switch

00:15:17,310 --> 00:15:21,029
over to the go operator now the

00:15:19,589 --> 00:15:23,820
cooperator is the last one i want to

00:15:21,029 --> 00:15:27,060
talk about and the reason I don't have

00:15:23,820 --> 00:15:29,250
any sample code for this is that any

00:15:27,060 --> 00:15:30,259
operator you search for online will most

00:15:29,250 --> 00:15:31,999
probably be written

00:15:30,259 --> 00:15:34,129
go and follow the same kind of folder

00:15:31,999 --> 00:15:35,749
structure and basic layout so the

00:15:34,129 --> 00:15:37,519
Prometheus operator is written and go

00:15:35,749 --> 00:15:39,049
most of the open shift operators are

00:15:37,519 --> 00:15:41,119
written and go if you want to take a

00:15:39,049 --> 00:15:44,569
look at sample code just check out any

00:15:41,119 --> 00:15:46,279
existing operator yes the name suggests

00:15:44,569 --> 00:15:48,049
the NGO operator is written and go and

00:15:46,279 --> 00:15:49,579
it can every can do anything a go

00:15:48,049 --> 00:15:51,499
program can do this means you can

00:15:49,579 --> 00:15:53,720
include external libraries you can

00:15:51,499 --> 00:15:56,329
perform file system operations you can

00:15:53,720 --> 00:15:59,600
even go as far and create a separate web

00:15:56,329 --> 00:16:02,899
server providing a nice UI for your

00:15:59,600 --> 00:16:04,669
operator it also has some advanced

00:16:02,899 --> 00:16:06,499
features like it can also automatically

00:16:04,669 --> 00:16:09,139
create your custom resource definitions

00:16:06,499 --> 00:16:11,660
this includes things like open API

00:16:09,139 --> 00:16:13,189
schema definitions so you're at creation

00:16:11,660 --> 00:16:15,079
time of your resource you already know

00:16:13,189 --> 00:16:18,319
does this resource have this field

00:16:15,079 --> 00:16:19,999
available does it accept my value you

00:16:18,319 --> 00:16:22,100
can perform records matching in there

00:16:19,999 --> 00:16:24,229
and it allows for simpler external

00:16:22,100 --> 00:16:27,649
integrations because you can include any

00:16:24,229 --> 00:16:29,720
third particle library just one thing

00:16:27,649 --> 00:16:32,029
you want I want to point out as many

00:16:29,720 --> 00:16:34,459
people get lost in here when you

00:16:32,029 --> 00:16:36,410
bootstrap a cooperator you will be left

00:16:34,459 --> 00:16:38,779
off with this function this is the main

00:16:36,410 --> 00:16:41,239
entry point for your operator so if you

00:16:38,779 --> 00:16:42,829
just ignore any other code and put your

00:16:41,239 --> 00:16:44,779
custom code in there you should be ready

00:16:42,829 --> 00:16:46,220
to go this is the function which will

00:16:44,779 --> 00:16:48,319
get called every time your resource

00:16:46,220 --> 00:16:50,660
changes every time you resource updates

00:16:48,319 --> 00:16:52,549
and in here you perform your custom

00:16:50,660 --> 00:16:54,559
logic of course you are free to change

00:16:52,549 --> 00:16:56,239
any other pre-existing boilerplate code

00:16:54,559 --> 00:16:59,629
but this is really where your logic

00:16:56,239 --> 00:17:01,879
happens to recap the cooperator it's for

00:16:59,629 --> 00:17:03,259
medium to high complexity application it

00:17:01,879 --> 00:17:05,149
allows for easy integration with

00:17:03,259 --> 00:17:08,389
external services and it's kind of

00:17:05,149 --> 00:17:10,909
deflection operator as in most operators

00:17:08,389 --> 00:17:14,510
are written in go and you can use any as

00:17:10,909 --> 00:17:15,980
a reference so now just as I know I'm

00:17:14,510 --> 00:17:17,990
running short on time I just want to

00:17:15,980 --> 00:17:21,230
have a brief overview on how to actually

00:17:17,990 --> 00:17:22,730
run your operator afterwards the rough

00:17:21,230 --> 00:17:24,829
flow looks like this we have our

00:17:22,730 --> 00:17:28,580
operator manifest this is a Yama file

00:17:24,829 --> 00:17:30,139
containing all all instructions on how

00:17:28,580 --> 00:17:31,539
to run your operator this includes

00:17:30,139 --> 00:17:35,029
things like deployment configuration

00:17:31,539 --> 00:17:36,980
image streams information on which

00:17:35,029 --> 00:17:38,809
custom resources needs to be created and

00:17:36,980 --> 00:17:40,639
those get packaged into a cluster

00:17:38,809 --> 00:17:42,440
catalog there are many cluster catalogs

00:17:40,639 --> 00:17:43,670
available for example the operator hub

00:17:42,440 --> 00:17:46,580
thought i/o which

00:17:43,670 --> 00:17:48,860
his community operators and you can also

00:17:46,580 --> 00:17:51,080
provide your own cluster catalog so you

00:17:48,860 --> 00:17:53,840
can inside of your organization manager

00:17:51,080 --> 00:17:56,060
or cluster catalog and this will provide

00:17:53,840 --> 00:17:58,130
all your users with the ability to

00:17:56,060 --> 00:18:02,120
subscribe to updates for the operator

00:17:58,130 --> 00:18:04,940
i've also designed us more more or less

00:18:02,120 --> 00:18:06,740
more conceptual overview but I know I'm

00:18:04,940 --> 00:18:10,310
short on time so I will not go into

00:18:06,740 --> 00:18:12,110
detail just a quick overview you have

00:18:10,310 --> 00:18:13,910
your operator catalog which provides the

00:18:12,110 --> 00:18:15,950
manifests which again results in the

00:18:13,910 --> 00:18:18,380
users subscribing to those manifests

00:18:15,950 --> 00:18:20,090
which creates an install plan which in

00:18:18,380 --> 00:18:21,800
turn creates the resources this looks

00:18:20,090 --> 00:18:23,960
like a hell of a lot complexity for

00:18:21,800 --> 00:18:25,970
nothing in return but in reality you get

00:18:23,960 --> 00:18:27,260
the safety of creating separate update

00:18:25,970 --> 00:18:30,020
channels for your operator you have

00:18:27,260 --> 00:18:31,760
version updates you can say I want this

00:18:30,020 --> 00:18:34,070
namespace to subscribe to the Alpha

00:18:31,760 --> 00:18:37,400
Channel and this namespace to subscribe

00:18:34,070 --> 00:18:41,360
to the stable Channel and thus easily

00:18:37,400 --> 00:18:43,670
manage updates so just to close this

00:18:41,360 --> 00:18:46,010
talk I just want you to keep three

00:18:43,670 --> 00:18:48,650
things in mind operators perform actions

00:18:46,010 --> 00:18:51,800
and resources they are not magic you can

00:18:48,650 --> 00:18:53,480
do operators don't do that much at all

00:18:51,800 --> 00:18:55,610
you have resources you perform an action

00:18:53,480 --> 00:18:57,830
on it that's it that's how open shift4

00:18:55,610 --> 00:19:00,110
works so if you know this you can now

00:18:57,830 --> 00:19:02,140
know openshift or you can define your

00:19:00,110 --> 00:19:04,810
own resources so feel free to experiment

00:19:02,140 --> 00:19:06,740
if you have your custom application

00:19:04,810 --> 00:19:08,660
available you can try to write an

00:19:06,740 --> 00:19:11,000
operator of all of it to easily deploy

00:19:08,660 --> 00:19:12,860
new versions and yet the most important

00:19:11,000 --> 00:19:15,560
thing operators are not magic to not be

00:19:12,860 --> 00:19:17,510
afraid to touch on operators they could

00:19:15,560 --> 00:19:21,670
mess up your cluster but probably won't

00:19:17,510 --> 00:19:21,670
so yeah that's it

00:19:28,450 --> 00:19:32,080
so are there any questions

00:19:48,960 --> 00:19:56,500
what do you mean by security so the

00:19:51,070 --> 00:19:58,720
question was what about security no you

00:19:56,500 --> 00:20:00,669
can find range the security permissions

00:19:58,720 --> 00:20:02,440
you can say I want to deploy this

00:20:00,669 --> 00:20:05,019
operator and effect only a specific

00:20:02,440 --> 00:20:07,029
namespace so I want this operator to

00:20:05,019 --> 00:20:08,500
only handle this specific namespace and

00:20:07,029 --> 00:20:09,940
you can also tune the permissions on

00:20:08,500 --> 00:20:12,130
that level so if your operator only

00:20:09,940 --> 00:20:14,529
needs to perform actions on some on a

00:20:12,130 --> 00:20:17,049
single namespace you do not not provide

00:20:14,529 --> 00:20:19,509
need to provide any higher privileges

00:20:17,049 --> 00:20:21,399
you only need to provide the privileges

00:20:19,509 --> 00:20:23,789
for agency operator actually needs to

00:20:21,399 --> 00:20:23,789
perform

00:20:37,110 --> 00:20:40,800
yeah then I will be available at a whole

00:20:39,360 --> 00:20:43,800
conference if you see me just approached

00:20:40,800 --> 00:20:50,839
me and asked me about operators

00:20:43,800 --> 00:20:50,839

YouTube URL: https://www.youtube.com/watch?v=0p2m8TzBK-k


