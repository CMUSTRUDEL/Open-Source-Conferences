Title: Windup - automated migration platform - Ondrej Zizka
Publication date: 2016-02-12
Playlist: JUDCon
Description: 
	Windup is a tool for enterprise application migration - from one platform to another (ideally a Red Hat one:o)), from older version to a newer.

The existing platform-independent rules are focused on migration to JBoss EAP 6+, but you can use it for other purposes as Windup is a generic rule-based pluggable platform.

This talk summarizes what's the current state of the project and what is planned in the near future. It also explains some interesting technical aspects such as how we deal with large sets of loosely structured data or how the rules are evaluated.

Presentation: http://bit.ly/1QcfptS
Captions: 
	00:04:15,160 --> 00:04:18,160
it's

00:05:31,830 --> 00:05:33,890
you

00:07:08,210 --> 00:07:16,430
so if you could please mute your phones

00:07:11,550 --> 00:07:21,020
and otherwise I'm having to introduce

00:07:16,430 --> 00:07:24,919
and Rajesh Khanna who is recently

00:07:21,020 --> 00:07:31,610
spending his most of his time in

00:07:24,919 --> 00:07:35,789
programming tools for migrating

00:07:31,610 --> 00:07:41,449
applications and application servers as

00:07:35,789 --> 00:07:46,409
well II that's the topic of his taller

00:07:41,449 --> 00:07:48,379
so hello sorry for initial technical

00:07:46,409 --> 00:07:52,110
troubles I wasn't able to make it

00:07:48,379 --> 00:07:55,020
displayed and to excuse me for my

00:07:52,110 --> 00:07:56,879
request because i'm a beatle i would

00:07:55,020 --> 00:07:59,819
like to present you wind up which is the

00:07:56,879 --> 00:08:01,949
migration assistant by jboss it's a

00:07:59,819 --> 00:08:07,289
project which started about three years

00:08:01,949 --> 00:08:09,750
ago when some consultant won't wanted to

00:08:07,289 --> 00:08:12,389
automate his tasks when he comes to a

00:08:09,750 --> 00:08:15,240
client and needs to analyze the

00:08:12,389 --> 00:08:20,490
application right away but why should

00:08:15,240 --> 00:08:23,520
wind up be interesting also for you so

00:08:20,490 --> 00:08:26,250
what is wind-up wind-up is a migration

00:08:23,520 --> 00:08:29,219
assistant which is huggable modular

00:08:26,250 --> 00:08:31,150
based on forge ruled even and let's just

00:08:29,219 --> 00:08:35,340
few basic characteristic

00:08:31,150 --> 00:08:49,270
Oh 32 teacher one excuse me I need to

00:08:35,340 --> 00:08:51,880
know microphone I guess so wind up as a

00:08:49,270 --> 00:08:55,290
migration assistant what it does imagine

00:08:51,880 --> 00:08:57,910
that you have a let's say an eShop and

00:08:55,290 --> 00:09:00,400
you run it on a server so you have your

00:08:57,910 --> 00:09:02,350
application on your server but your

00:09:00,400 --> 00:09:04,330
server is relatively expensive because

00:09:02,350 --> 00:09:08,620
of licensing because of harder because

00:09:04,330 --> 00:09:11,170
of any other additional costs or you run

00:09:08,620 --> 00:09:13,570
on a really obsolete technology so in

00:09:11,170 --> 00:09:15,280
that case it calls you as well because

00:09:13,570 --> 00:09:17,110
you need to maintain it you need to keep

00:09:15,280 --> 00:09:19,510
someone who understands the ancient

00:09:17,110 --> 00:09:22,720
technology so you want to migrate

00:09:19,510 --> 00:09:25,540
probably and you consider migrating to a

00:09:22,720 --> 00:09:29,020
new shiny brand-new server which happens

00:09:25,540 --> 00:09:33,810
to be tables of course and so what to do

00:09:29,020 --> 00:09:38,230
with that you take your application and

00:09:33,810 --> 00:09:39,850
you try to deploy it and usually you end

00:09:38,230 --> 00:09:44,170
up with this with the deployment

00:09:39,850 --> 00:09:47,710
exception so you go into the source code

00:09:44,170 --> 00:09:49,660
and look what's wrong but what if your

00:09:47,710 --> 00:09:52,360
application looks like this it isn't

00:09:49,660 --> 00:09:56,230
just one war or it isn't just won a

00:09:52,360 --> 00:09:59,080
bundle it's several or like this or this

00:09:56,230 --> 00:10:01,750
or this in that case you are not

00:09:59,080 --> 00:10:04,960
probably going to use the same approach

00:10:01,750 --> 00:10:07,870
opening ID and going through every one

00:10:04,960 --> 00:10:11,350
of them when you consider the migration

00:10:07,870 --> 00:10:13,510
whether to do it or not and this is how

00:10:11,350 --> 00:10:15,580
the application may look like inside so

00:10:13,510 --> 00:10:17,800
it's really a kind of curse and it may

00:10:15,580 --> 00:10:19,920
not be documented sometimes because the

00:10:17,800 --> 00:10:23,410
application can be tried years old and

00:10:19,920 --> 00:10:25,570
sometimes even imagine that in situation

00:10:23,410 --> 00:10:27,160
like this some of the applications don't

00:10:25,570 --> 00:10:28,960
have the source code at all you don't

00:10:27,160 --> 00:10:33,070
have the source code and the people who

00:10:28,960 --> 00:10:36,630
made it are let's say unavailable so

00:10:33,070 --> 00:10:36,630
what would you do in that case

00:10:38,190 --> 00:10:44,800
Butte call wind up you would download

00:10:41,650 --> 00:10:46,870
lined up and try to find up wind up is a

00:10:44,800 --> 00:10:51,970
tool which is exactly for this situation

00:10:46,870 --> 00:10:56,590
you will run wind up against your let's

00:10:51,970 --> 00:10:59,830
say a year which is a in Java it means a

00:10:56,590 --> 00:11:03,700
bunch of applications somehow

00:10:59,830 --> 00:11:06,280
interconnected and after it runs for

00:11:03,700 --> 00:11:09,190
several in this case hours because it's

00:11:06,280 --> 00:11:11,170
quite complicated tasks it comes up with

00:11:09,190 --> 00:11:14,110
a report this is just one of the pages

00:11:11,170 --> 00:11:17,320
of the report but it basically shows you

00:11:14,110 --> 00:11:20,230
some summarization some statistics some

00:11:17,320 --> 00:11:24,940
nice graphs and then the details I will

00:11:20,230 --> 00:11:27,720
show you what it produces later now

00:11:24,940 --> 00:11:27,720
let's go to the demo

00:11:35,110 --> 00:11:38,830
wind up is a console application

00:11:47,480 --> 00:11:50,079
alright

00:12:06,880 --> 00:12:14,290
so when a pigeon is a CI application at

00:12:12,430 --> 00:12:18,940
console application so currently this is

00:12:14,290 --> 00:12:30,450
des yeah sure sorry I will try to make

00:12:18,940 --> 00:12:30,450
it with right

00:12:32,640 --> 00:12:38,460
so wound up is a co application console

00:12:36,270 --> 00:12:40,850
application so this is the only way you

00:12:38,460 --> 00:12:44,160
I currently we have there was also

00:12:40,850 --> 00:12:46,740
vertical you I but we dumped it for a

00:12:44,160 --> 00:12:49,230
while because it wasn't much used it's

00:12:46,740 --> 00:12:51,660
after all used by developers and

00:12:49,230 --> 00:12:54,600
administrators and the main output isn't

00:12:51,660 --> 00:12:58,980
graphical in terms of you I is vehicle

00:12:54,600 --> 00:13:02,340
in terms of the report so after scanning

00:12:58,980 --> 00:13:06,020
some of these some of these parameters

00:13:02,340 --> 00:13:09,890
you know that you are going to use

00:13:06,020 --> 00:13:09,890
mainly the input one

00:13:15,340 --> 00:13:20,410
here i have the application that i want

00:13:17,680 --> 00:13:22,750
to migrate i will show you what's inside

00:13:20,410 --> 00:13:26,140
I unfortunately I cannot make it much

00:13:22,750 --> 00:13:28,660
bigger but you can see that it's a

00:13:26,140 --> 00:13:31,540
normal year which contains one web

00:13:28,660 --> 00:13:35,920
application and some library and several

00:13:31,540 --> 00:13:38,500
files used mainly for testing but still

00:13:35,920 --> 00:13:41,050
there is some useful code which emulates

00:13:38,500 --> 00:13:43,870
how a real application looks like this

00:13:41,050 --> 00:13:46,420
is a tiny one so we can make it run only

00:13:43,870 --> 00:13:50,230
for a few minutes or a few seconds it

00:13:46,420 --> 00:13:52,120
lands on your computer but the principle

00:13:50,230 --> 00:13:54,580
is the same in in bigger applications

00:13:52,120 --> 00:14:04,780
where the ear is for example 100

00:13:54,580 --> 00:14:07,480
megabytes big so I'm cheating a bit

00:14:04,780 --> 00:14:09,960
because I preferred the comment here in

00:14:07,480 --> 00:14:09,960
advance

00:14:16,080 --> 00:14:28,200
so let's look at the command aha kit so

00:14:25,830 --> 00:14:30,980
the comment is basically running wind up

00:14:28,200 --> 00:14:34,410
against an application which you have

00:14:30,980 --> 00:14:37,380
somewhere in your class in your file

00:14:34,410 --> 00:14:42,330
system here is where you put the output

00:14:37,380 --> 00:14:45,750
and some flags basically for controlling

00:14:42,330 --> 00:14:57,600
weather to overwrite the output when you

00:14:45,750 --> 00:14:59,730
run it wind up unzips it then it d

00:14:57,600 --> 00:15:02,010
compiles it then it scans through the

00:14:59,730 --> 00:15:05,430
class files or the compile Java files

00:15:02,010 --> 00:15:07,830
then it scans the XML files runs all the

00:15:05,430 --> 00:15:09,390
rules we have because as I said its rule

00:15:07,830 --> 00:15:13,670
based application and I will show you

00:15:09,390 --> 00:15:18,810
what the rule-based mins later and then

00:15:13,670 --> 00:15:20,130
it every or majority of the rules scan

00:15:18,810 --> 00:15:22,740
the Java aspects of the application

00:15:20,130 --> 00:15:24,660
windup currently targets mainly java

00:15:22,740 --> 00:15:28,800
application java ee applications but

00:15:24,660 --> 00:15:30,960
it's actually a customizable tool and

00:15:28,800 --> 00:15:33,120
you can provide any rules you want it

00:15:30,960 --> 00:15:35,640
doesn't have to be targeted for java it

00:15:33,120 --> 00:15:39,300
can be targeted also for.net

00:15:35,640 --> 00:15:41,760
applications for see I mean binary

00:15:39,300 --> 00:15:43,350
applications which were created by see

00:15:41,760 --> 00:15:45,590
if you have a good enough the compiler

00:15:43,350 --> 00:15:51,840
of course that's one of the

00:15:45,590 --> 00:15:55,800
preconditions and now it seems it's a

00:15:51,840 --> 00:15:59,550
bit stuck which doesn't really happen

00:15:55,800 --> 00:16:01,530
always it doesn't happen at all but it

00:15:59,550 --> 00:16:03,980
usually when it happens it's during a

00:16:01,530 --> 00:16:03,980
demo

00:16:06,350 --> 00:16:09,790
so I will try to begin

00:16:32,140 --> 00:16:37,600
oh ok I'm running from master so this

00:16:35,080 --> 00:16:40,360
happens when you run a demonstration on

00:16:37,600 --> 00:16:43,090
a master application master means the

00:16:40,360 --> 00:16:45,460
latest development code so apparently we

00:16:43,090 --> 00:16:54,940
found a buck I can tell my quali there

00:16:45,460 --> 00:16:57,150
that we have to fix it but I could I see

00:16:54,940 --> 00:17:00,010
I'm not on Wi-Fi that's right correct

00:16:57,150 --> 00:17:02,950
yeah because of course I should have

00:17:00,010 --> 00:17:05,170
stuck my mind it's validating xml files

00:17:02,950 --> 00:17:07,570
against its DTD sore or against it

00:17:05,170 --> 00:17:09,910
schemas which are defined as some online

00:17:07,570 --> 00:17:12,520
resources so it's trying to download it

00:17:09,910 --> 00:17:14,170
and because i'm on VPN still but it

00:17:12,520 --> 00:17:16,209
doesn't connect then there is a long

00:17:14,170 --> 00:17:22,630
time old so we would wait for about six

00:17:16,209 --> 00:17:27,130
minutes alright so flying is it offline

00:17:22,630 --> 00:17:29,800
mode like this I think so or a fine or

00:17:27,130 --> 00:17:33,720
just Oh fine that's what I wanted to

00:17:29,800 --> 00:17:36,720
show you afterwards but it's our

00:17:33,720 --> 00:17:36,720
documentation

00:17:40,480 --> 00:17:45,690
oh I'm not the fight I'm linea

00:18:23,850 --> 00:18:26,720
there it goes

00:18:29,260 --> 00:18:41,230
right so this is the result so this is

00:18:35,960 --> 00:18:41,230
the final report of the application so

00:18:41,350 --> 00:18:46,400
the initial page kinda isn't really nice

00:18:44,510 --> 00:18:48,140
because you only have one application

00:18:46,400 --> 00:18:52,490
usually there is for each application

00:18:48,140 --> 00:18:55,870
you have run against you have one record

00:18:52,490 --> 00:18:58,340
so let's look at our one application

00:18:55,870 --> 00:19:01,060
here is some report index which tells

00:18:58,340 --> 00:19:05,240
you how many accidents you find Oh

00:19:01,060 --> 00:19:07,160
windup found or how many issues you are

00:19:05,240 --> 00:19:09,920
going to see when you are when you are

00:19:07,160 --> 00:19:12,340
going to migrate how many what we are

00:19:09,920 --> 00:19:14,810
trying to do on this page is to tell you

00:19:12,340 --> 00:19:17,750
how much effort you will need to put

00:19:14,810 --> 00:19:20,870
into migrating your application from one

00:19:17,750 --> 00:19:25,220
platform to another in this case the

00:19:20,870 --> 00:19:28,940
first platform is weblogic and the

00:19:25,220 --> 00:19:30,890
target platform is je bosse a p6 so for

00:19:28,940 --> 00:19:35,600
this case for this application you would

00:19:30,890 --> 00:19:37,220
see several mandatory problem several

00:19:35,600 --> 00:19:40,100
things that you have to fix some

00:19:37,220 --> 00:19:42,440
potential issues are am several optional

00:19:40,100 --> 00:19:44,840
optional means like for example you if

00:19:42,440 --> 00:19:48,830
you want to upgrade hybrid rate you

00:19:44,840 --> 00:19:53,030
don't have to but you can then the

00:19:48,830 --> 00:19:56,690
report contains a list of migration

00:19:53,030 --> 00:19:58,700
issues this is a summarization it's a

00:19:56,690 --> 00:20:03,350
statistic sorry you can see it again so

00:19:58,700 --> 00:20:06,670
I will make it bigger for you and you

00:20:03,350 --> 00:20:12,280
can see the level of effort which is

00:20:06,670 --> 00:20:17,360
primarily good for assessing again the

00:20:12,280 --> 00:20:20,720
cost of the migration for developers the

00:20:17,360 --> 00:20:26,390
pages the detailed pages are important

00:20:20,720 --> 00:20:30,230
for example we go to the down to the

00:20:26,390 --> 00:20:33,890
level of individual java files the main

00:20:30,230 --> 00:20:37,640
result for you as a developer is are

00:20:33,890 --> 00:20:40,730
these reports from the index pages you

00:20:37,640 --> 00:20:42,290
go to individual sources and you see the

00:20:40,730 --> 00:20:44,450
particular places where

00:20:42,290 --> 00:20:46,190
the application has some issues for

00:20:44,450 --> 00:20:54,650
example here you can see that we are

00:20:46,190 --> 00:20:59,180
using the ghost for this line you are

00:20:54,650 --> 00:21:01,070
using a proprietary weblogic no

00:20:59,180 --> 00:21:04,850
transaction the transaction helper I

00:21:01,070 --> 00:21:06,770
don't make it bigger again and you need

00:21:04,850 --> 00:21:09,170
to replace it with something standard

00:21:06,770 --> 00:21:11,510
because GF jboss EAP sticks to the java

00:21:09,170 --> 00:21:14,060
ee standards so we encourage users to

00:21:11,510 --> 00:21:17,270
stick to the standards and and replace

00:21:14,060 --> 00:21:20,060
the API so it not table specific but

00:21:17,270 --> 00:21:22,390
with the standard standardized Hawaii AP

00:21:20,060 --> 00:21:22,390
ice

00:21:56,290 --> 00:22:04,220
so wind up is rule-based what does that

00:21:58,760 --> 00:22:06,830
mean we have inside wind up isn't just a

00:22:04,220 --> 00:22:09,620
bunch of scripts or a hard-coded Java

00:22:06,830 --> 00:22:13,700
code it's a platform which runs rules

00:22:09,620 --> 00:22:15,590
and the rules are not biased towards any

00:22:13,700 --> 00:22:18,170
particular check technology it's written

00:22:15,590 --> 00:22:20,390
it's written in Java but currently

00:22:18,170 --> 00:22:23,150
majority of the rules especially the

00:22:20,390 --> 00:22:25,220
simple ones look like this you define a

00:22:23,150 --> 00:22:27,980
rule set and in that rule set you have

00:22:25,220 --> 00:22:30,830
several rules and the rules usually

00:22:27,980 --> 00:22:32,780
target particular knowledge piece by

00:22:30,830 --> 00:22:35,060
knowledge piece I mean that you are an

00:22:32,780 --> 00:22:39,850
expert on some matter like how to

00:22:35,060 --> 00:22:43,930
migrate messaging API of logic into

00:22:39,850 --> 00:22:48,460
messaging into java messaging or other

00:22:43,930 --> 00:22:55,330
target technology most of the rules

00:22:48,460 --> 00:22:58,210
catch appearance of particle particle

00:22:55,330 --> 00:23:00,680
java constructs which means imports

00:22:58,210 --> 00:23:05,030
constructors calling call the method or

00:23:00,680 --> 00:23:07,550
some annotation and the result is a hint

00:23:05,030 --> 00:23:09,290
on that line in the sources and one that

00:23:07,550 --> 00:23:14,780
wind up then automatically creates all

00:23:09,290 --> 00:23:18,250
that all those statistics from it the

00:23:14,780 --> 00:23:21,140
rules contain predefined conditions

00:23:18,250 --> 00:23:23,810
which for example can be Java curious

00:23:21,140 --> 00:23:26,870
curious to the ast as I told you wind up

00:23:23,810 --> 00:23:29,720
the compile Java classes or you can also

00:23:26,870 --> 00:23:33,920
scan source code in that case you can

00:23:29,720 --> 00:23:36,350
Curie the source java sources for for

00:23:33,920 --> 00:23:40,790
particular constructs or you can scan

00:23:36,350 --> 00:23:43,550
XML files with xpath but these are just

00:23:40,790 --> 00:23:45,440
those we already implemented you can

00:23:43,550 --> 00:23:47,990
implement any condition you like let's

00:23:45,440 --> 00:23:50,450
say you have a seed project and you want

00:23:47,990 --> 00:23:52,340
to or or ruby and you want to scan your

00:23:50,450 --> 00:23:55,610
ruby project so what we would you have

00:23:52,340 --> 00:24:00,650
to do is to implement your own condition

00:23:55,610 --> 00:24:03,800
and then implement a wrapper for XML

00:24:00,650 --> 00:24:07,480
let's say for something to read the XML

00:24:03,800 --> 00:24:10,720
of your own choice format

00:24:07,480 --> 00:24:13,360
then you would use it in the when part

00:24:10,720 --> 00:24:16,330
instead of xml file which matches some

00:24:13,360 --> 00:24:20,650
xbox you will have your own expression

00:24:16,330 --> 00:24:22,710
for matching Ruby constructs then there

00:24:20,650 --> 00:24:25,840
are predefined operations as I told

00:24:22,710 --> 00:24:28,210
typically an operation is putting a hint

00:24:25,840 --> 00:24:33,160
on a particular line in the source code

00:24:28,210 --> 00:24:38,350
and it can be also xslt transformation

00:24:33,160 --> 00:24:40,900
it can also be a call of CLI comment je

00:24:38,350 --> 00:24:43,270
bosse AP which makes it change its

00:24:40,900 --> 00:24:45,730
configuration or it can be a

00:24:43,270 --> 00:24:50,470
classification of the file let's say

00:24:45,730 --> 00:24:52,900
that you find annotation of entity on

00:24:50,470 --> 00:24:56,530
some Java class then you know that you

00:24:52,900 --> 00:24:58,900
can classify classify it as a entity

00:24:56,530 --> 00:25:01,420
bean in which case it appears again in

00:24:58,900 --> 00:25:03,970
the statistics and it's on the ejb

00:25:01,420 --> 00:25:10,030
report which is another special report

00:25:03,970 --> 00:25:12,670
page of wind up report of course as I

00:25:10,030 --> 00:25:14,500
said you can code your own custom

00:25:12,670 --> 00:25:18,910
conditions and operations and in which

00:25:14,500 --> 00:25:22,120
case there is an API Java API ready for

00:25:18,910 --> 00:25:26,530
you which is quite well documented

00:25:22,120 --> 00:25:31,030
nowadays and we are eagerly expecting

00:25:26,530 --> 00:25:37,020
your contributions if you like the rules

00:25:31,030 --> 00:25:40,210
we were looking for some rule engine but

00:25:37,020 --> 00:25:43,710
none of them matched our expectations or

00:25:40,210 --> 00:25:46,630
our needs especially nested iterations

00:25:43,710 --> 00:25:51,000
because for example the rule and genes

00:25:46,630 --> 00:25:53,320
which you probably know do not allow

00:25:51,000 --> 00:25:55,990
nested iterations or sometimes

00:25:53,320 --> 00:26:02,650
iterations at all they target some

00:25:55,990 --> 00:26:05,350
different different for problems the

00:26:02,650 --> 00:26:08,830
Moodle processes they don't model some

00:26:05,350 --> 00:26:11,500
scripting engine the rules also have

00:26:08,830 --> 00:26:13,779
metadata with by which you can enable or

00:26:11,500 --> 00:26:16,929
disable it for example you are

00:26:13,779 --> 00:26:19,259
a developer which only focuses on jpa

00:26:16,929 --> 00:26:26,109
migration so in that case you only

00:26:19,259 --> 00:26:28,419
enable those jpa related our tax and you

00:26:26,109 --> 00:26:36,450
can of course right or your own rules

00:26:28,419 --> 00:26:39,489
and contribute excuse me also one of the

00:26:36,450 --> 00:26:42,580
extension ways of wind up is that wind

00:26:39,489 --> 00:26:46,450
up is based on a life cycle if you split

00:26:42,580 --> 00:26:48,899
the migration the migration process into

00:26:46,450 --> 00:26:51,909
several parts then you can for example

00:26:48,899 --> 00:26:53,830
identify that you have some unzipping

00:26:51,909 --> 00:26:56,440
initial then there is the compilation

00:26:53,830 --> 00:27:01,059
then there is scanning of the java files

00:26:56,440 --> 00:27:05,190
and in each of those lifecycle phases

00:27:01,059 --> 00:27:08,440
you can put your own hook let's say and

00:27:05,190 --> 00:27:13,960
which means the rule and let it run

00:27:08,440 --> 00:27:17,969
right there wind up is modular it's

00:27:13,960 --> 00:27:24,009
based on jboss forge or jboss modules

00:27:17,969 --> 00:27:26,320
and it's bugaboo if you want to I was

00:27:24,009 --> 00:27:28,299
talking about the rub a integration if

00:27:26,320 --> 00:27:31,690
you want to migrate your applications

00:27:28,299 --> 00:27:34,659
you would do it as a new module simply

00:27:31,690 --> 00:27:37,719
you don't need to change the source code

00:27:34,659 --> 00:27:40,779
of the windup core you need to make your

00:27:37,719 --> 00:27:45,129
own module put your own custom

00:27:40,779 --> 00:27:48,369
conditions and conditions and operations

00:27:45,129 --> 00:27:50,789
and wrap it into an add-on which is

00:27:48,369 --> 00:27:53,830
basically a jar and put it two wind-ups

00:27:50,789 --> 00:27:57,219
cross paths and it will just load it and

00:27:53,830 --> 00:27:59,710
if you will if you made it well then you

00:27:57,219 --> 00:28:03,659
will have your add-on available and your

00:27:59,710 --> 00:28:03,659
operations available in the xml rules

00:28:05,159 --> 00:28:10,650
wind up

00:28:07,490 --> 00:28:15,990
it's not just the application wind-up is

00:28:10,650 --> 00:28:19,380
kind of ecosystem or community its

00:28:15,990 --> 00:28:21,870
primary or its initial where it came

00:28:19,380 --> 00:28:25,740
from was Jay both consultants which

00:28:21,870 --> 00:28:28,590
usually come to site and they don't have

00:28:25,740 --> 00:28:31,980
much time to go through application of

00:28:28,590 --> 00:28:34,020
size of thousands of applications so

00:28:31,980 --> 00:28:38,480
they really need some substantial

00:28:34,020 --> 00:28:42,180
information in in let's say few minutes

00:28:38,480 --> 00:28:44,790
so that's where it started but currently

00:28:42,180 --> 00:28:46,650
we are getting attention from everyday

00:28:44,790 --> 00:28:49,140
users migrating their applications

00:28:46,650 --> 00:28:52,710
because migrating happens quite often

00:28:49,140 --> 00:28:56,100
even between the versions upgrading is

00:28:52,710 --> 00:28:58,200
also kind of migration you take your

00:28:56,100 --> 00:29:00,780
application which runs on all the

00:28:58,200 --> 00:29:02,790
version of your server and all of your

00:29:00,780 --> 00:29:04,770
of your let's say a platform and you

00:29:02,790 --> 00:29:08,250
want to upgrade one or two major

00:29:04,770 --> 00:29:10,620
versions so in this case you don't want

00:29:08,250 --> 00:29:15,600
to go one by one but you want to capture

00:29:10,620 --> 00:29:18,120
the knowledge of one developer into a

00:29:15,600 --> 00:29:19,860
rule and apply it on the rest of the

00:29:18,120 --> 00:29:23,130
application so the other developers can

00:29:19,860 --> 00:29:26,640
spot the highlights without going

00:29:23,130 --> 00:29:29,490
through the code manually wind-up is

00:29:26,640 --> 00:29:33,630
also migration knowledge base we are

00:29:29,490 --> 00:29:36,330
building let's say starting to build a

00:29:33,630 --> 00:29:38,250
knowledge base for migration

00:29:36,330 --> 00:29:43,730
specifically if you go to wind up doe

00:29:38,250 --> 00:29:43,730
tables calm sorry orc you will see our

00:29:43,760 --> 00:29:54,570
links to currently it's hosted by a

00:29:47,690 --> 00:29:56,610
redhead com a knowledge base side then

00:29:54,570 --> 00:29:59,280
wind up is also the rules repository

00:29:56,610 --> 00:30:02,700
currently it works as a just simply as a

00:29:59,280 --> 00:30:04,710
github repository but in the future we

00:30:02,700 --> 00:30:08,760
are probably going to make it something

00:30:04,710 --> 00:30:12,060
smarter so you can on one place you

00:30:08,760 --> 00:30:17,930
could write your own rules and test it

00:30:12,060 --> 00:30:19,890
right away you could put your knowledge

00:30:17,930 --> 00:30:20,509
let's say you don't want to write the

00:30:19,890 --> 00:30:24,289
rule

00:30:20,509 --> 00:30:29,269
want to put it give it too much time but

00:30:24,289 --> 00:30:32,539
you want to just to make the idea not to

00:30:29,269 --> 00:30:35,479
die somewhere so you write it in a

00:30:32,539 --> 00:30:38,059
formula forum and post it to our

00:30:35,479 --> 00:30:41,149
repository and someone may pick it up

00:30:38,059 --> 00:30:46,969
and write the rule how much time do I

00:30:41,149 --> 00:30:49,940
have plenty okay we also have a Eclipse

00:30:46,969 --> 00:30:52,819
IDE plugin so you can imagine how it

00:30:49,940 --> 00:30:56,899
works you open the project run wind up

00:30:52,819 --> 00:30:58,639
plug-in and it creates the quick fixes

00:30:56,899 --> 00:31:02,269
or how is it cold so you can see right

00:30:58,639 --> 00:31:07,999
away in the IDE you can say 15 great

00:31:02,269 --> 00:31:11,959
thank you you can run the winder plugin

00:31:07,999 --> 00:31:13,969
and it and the Eclipse IDE will show you

00:31:11,959 --> 00:31:17,539
the particular places which are

00:31:13,969 --> 00:31:21,139
problematic and show you the hint what

00:31:17,539 --> 00:31:23,959
to do with the particular line and also

00:31:21,139 --> 00:31:27,709
there is a maven winder plugin which you

00:31:23,959 --> 00:31:30,109
can use to run wind up regularly as a

00:31:27,709 --> 00:31:32,239
part of maven build so for example if

00:31:30,109 --> 00:31:34,999
you are if you have a continuous

00:31:32,239 --> 00:31:37,519
integration and you are in the process

00:31:34,999 --> 00:31:40,849
already of migrating the application

00:31:37,519 --> 00:31:44,629
then you can rerun nightly and push the

00:31:40,849 --> 00:31:48,349
reports to your management and they will

00:31:44,629 --> 00:31:52,749
see the progress the next big step of

00:31:48,349 --> 00:31:57,169
wind up is to make it a service

00:31:52,749 --> 00:31:59,119
currently as you saw you run it as a CI

00:31:57,169 --> 00:32:02,599
application as a command line

00:31:59,119 --> 00:32:06,349
application but what what would be nice

00:32:02,599 --> 00:32:08,239
would be if it was on a server and you

00:32:06,349 --> 00:32:10,219
could upload your application not

00:32:08,239 --> 00:32:14,599
necessarily to some public site but your

00:32:10,219 --> 00:32:16,789
own internal site or a cloud and wind up

00:32:14,599 --> 00:32:20,929
would scan it it would analyze the

00:32:16,789 --> 00:32:23,779
application a synchronously you would

00:32:20,929 --> 00:32:26,529
put it there in the evening and come in

00:32:23,779 --> 00:32:29,650
the morning and see how far you have got

00:32:26,529 --> 00:32:34,300
and second

00:32:29,650 --> 00:32:37,360
going through an HTML report which has

00:32:34,300 --> 00:32:43,530
as the size of several dozens of

00:32:37,360 --> 00:32:43,530
megabytes isn't really neat it's

00:32:43,830 --> 00:32:51,280
basically it halts the browser sometimes

00:32:47,110 --> 00:32:53,220
if we have some not really well behaving

00:32:51,280 --> 00:32:56,770
JavaScript which you figure out but

00:32:53,220 --> 00:32:58,840
still on a computer with lower memory

00:32:56,770 --> 00:33:02,740
you can get into troubles so what we

00:32:58,840 --> 00:33:06,820
want to do is to leverage the fact that

00:33:02,740 --> 00:33:10,420
wind up is a backed by graph database

00:33:06,820 --> 00:33:14,080
and make it navigate you through the

00:33:10,420 --> 00:33:16,180
individual part of the findings by

00:33:14,080 --> 00:33:18,610
clicking through it so you could for

00:33:16,180 --> 00:33:21,370
example navigate by the individual

00:33:18,610 --> 00:33:24,640
applications or you could be in a source

00:33:21,370 --> 00:33:27,720
and click through the findings you could

00:33:24,640 --> 00:33:32,560
find all the similar findings you could

00:33:27,720 --> 00:33:34,720
navigate to let's say ejb and look where

00:33:32,560 --> 00:33:38,740
every where it is used and similar it's

00:33:34,720 --> 00:33:45,520
similar to the find usages in your

00:33:38,740 --> 00:33:47,830
favorite IDE and wind up is also looking

00:33:45,520 --> 00:33:51,250
for anyone who can help the community

00:33:47,830 --> 00:33:54,160
who can join the community you are

00:33:51,250 --> 00:33:56,350
welcome especially if you are planning

00:33:54,160 --> 00:33:59,680
or already doing some kind of migration

00:33:56,350 --> 00:34:03,550
in which case you certainly have some

00:33:59,680 --> 00:34:07,480
knowledge about what causes the troubles

00:34:03,550 --> 00:34:10,270
and we would like you to put this

00:34:07,480 --> 00:34:12,130
information into the forum ideally into

00:34:10,270 --> 00:34:14,350
the form of rules but also it can be

00:34:12,130 --> 00:34:18,909
just a text you can send us an email you

00:34:14,350 --> 00:34:22,590
can send you can file a JIRA and we will

00:34:18,909 --> 00:34:25,480
then cover it with a rule set and your

00:34:22,590 --> 00:34:27,429
platform will be covered for the next

00:34:25,480 --> 00:34:28,810
time you you migrate it or before the

00:34:27,429 --> 00:34:30,970
next time you migrate another

00:34:28,810 --> 00:34:35,380
application from the same platform to

00:34:30,970 --> 00:34:37,240
the same target platform also it would

00:34:35,380 --> 00:34:40,240
be great if you could share your

00:34:37,240 --> 00:34:43,210
applications if you have any application

00:34:40,240 --> 00:34:46,440
which is shareable with public

00:34:43,210 --> 00:34:51,540
if it's open source or anything and it's

00:34:46,440 --> 00:34:56,349
targeted for a particular platform

00:34:51,540 --> 00:34:58,690
especially known tables and it uses its

00:34:56,349 --> 00:35:00,369
specific api's then we will be grateful

00:34:58,690 --> 00:35:04,630
if you shared the application with us

00:35:00,369 --> 00:35:06,940
because we would of course use it to

00:35:04,630 --> 00:35:10,300
extract the knowledge and see what are

00:35:06,940 --> 00:35:16,030
the points where where when the problems

00:35:10,300 --> 00:35:18,339
arise for that particular platform if

00:35:16,030 --> 00:35:20,530
you want to see more about lined up go

00:35:18,339 --> 00:35:22,330
to the project site the primary site is

00:35:20,530 --> 00:35:23,980
wind up doe je Bois d'Arc from which you

00:35:22,330 --> 00:35:26,710
can get to the documentation to the

00:35:23,980 --> 00:35:29,770
github site you can see what you can do

00:35:26,710 --> 00:35:32,320
to contribute there are guides like the

00:35:29,770 --> 00:35:36,220
user guide or the rule the group

00:35:32,320 --> 00:35:39,520
developer guide and folder developers

00:35:36,220 --> 00:35:42,339
github and how the core rules look like

00:35:39,520 --> 00:35:44,890
i'm currently not connected but if I

00:35:42,339 --> 00:35:47,920
manage to connect to Wi-Fi i will show

00:35:44,890 --> 00:35:52,839
you some more rules Nanaia now I have

00:35:47,920 --> 00:35:55,330
some questions for you we have met

00:35:52,839 --> 00:35:58,240
really big applications so big that we

00:35:55,330 --> 00:36:01,990
were surprised that an application can

00:35:58,240 --> 00:36:07,030
get so big how many applications do you

00:36:01,990 --> 00:36:09,369
think was in the biggest application I'm

00:36:07,030 --> 00:36:17,050
in here or group of applications we have

00:36:09,369 --> 00:36:23,460
seen so far now it was not one it was

00:36:17,050 --> 00:36:23,460
not 25 was way more orders of magnitude

00:36:23,920 --> 00:36:34,830
thousand onset thousand first okay it's

00:36:31,510 --> 00:36:42,130
not I think it was the guy in the back

00:36:34,830 --> 00:36:47,320
so here is your car okay put it to

00:36:42,130 --> 00:36:51,700
someone who said thousands so it is over

00:36:47,320 --> 00:36:54,580
1,000 it is about 1200 show it and each

00:36:51,700 --> 00:37:04,450
of this application is about megabytes

00:36:54,580 --> 00:37:06,420
of class files now wow how many how many

00:37:04,450 --> 00:37:09,640
megabytes do you think that our current

00:37:06,420 --> 00:37:12,340
report has I said that we have pretty

00:37:09,640 --> 00:37:15,040
huge HTML reports it's divided into

00:37:12,340 --> 00:37:16,630
several files but if you run against

00:37:15,040 --> 00:37:19,840
this biggest application we have seen so

00:37:16,630 --> 00:37:23,500
far how much how large you think that

00:37:19,840 --> 00:37:25,990
the biggest HTML file is which is the

00:37:23,500 --> 00:37:30,040
motivation for us to make it to make it

00:37:25,990 --> 00:37:32,830
a service and a clickable that

00:37:30,040 --> 00:37:37,980
application so how big you think the

00:37:32,830 --> 00:37:41,220
biggest are not really not that big a

00:37:37,980 --> 00:37:41,220
bit more

00:37:41,710 --> 00:37:49,750
I think the closest match was the 20

00:37:44,410 --> 00:37:58,089
megabytes it is roughly forty megabytes

00:37:49,750 --> 00:38:01,349
or 45 maybe oh so now I will try to

00:37:58,089 --> 00:38:01,349
connect it Wi-Fi

00:38:24,069 --> 00:38:27,579
digital with you know

00:38:40,170 --> 00:38:47,910
I see I see that some of you are already

00:38:46,680 --> 00:38:50,640
leaving till thank you for your

00:38:47,910 --> 00:38:53,190
attention and who wants to stay for a

00:38:50,640 --> 00:38:56,069
few more details about wind up or who

00:38:53,190 --> 00:39:06,270
want to ask something yeah we have about

00:38:56,069 --> 00:39:08,250
five minutes so any questions so far if

00:39:06,270 --> 00:39:10,500
you don't have a source code how will

00:39:08,250 --> 00:39:12,420
wind up help you well wind up doesn't

00:39:10,500 --> 00:39:14,339
really need the source code it's quite

00:39:12,420 --> 00:39:17,220
common situation that the source code

00:39:14,339 --> 00:39:20,730
isn't available at the time the NLL

00:39:17,220 --> 00:39:24,030
analyzes analytic comes to the site he

00:39:20,730 --> 00:39:26,880
only has the server the running server

00:39:24,030 --> 00:39:28,680
or or the deployments themselves so you

00:39:26,880 --> 00:39:31,049
run against the deployments and wind up

00:39:28,680 --> 00:39:34,589
the compiles we have internally be used

00:39:31,049 --> 00:39:37,049
to the compilers original wind up the

00:39:34,589 --> 00:39:39,569
engine version used jet but that wasn't

00:39:37,049 --> 00:39:42,270
really good for Java of the new versions

00:39:39,569 --> 00:39:44,569
of Java it was good for Java 1.3 so

00:39:42,270 --> 00:39:49,770
currently we use firm flower from

00:39:44,569 --> 00:39:51,869
jetbrains from ID idea ide and then the

00:39:49,770 --> 00:39:55,380
Procyon by mark Mike Strobel which is

00:39:51,869 --> 00:39:58,920
kind of reworked eclipse the compiler so

00:39:55,380 --> 00:40:01,140
you decompile all the sources those

00:39:58,920 --> 00:40:03,599
which failed be compiled that happens

00:40:01,140 --> 00:40:06,089
about five percent times you try it with

00:40:03,599 --> 00:40:07,799
the other one and we get almost one

00:40:06,089 --> 00:40:10,260
hundred percent of the compiled files

00:40:07,799 --> 00:40:11,880
and there is also pretty good it's not

00:40:10,260 --> 00:40:13,290
the same as the source code of your

00:40:11,880 --> 00:40:15,990
application of course because the

00:40:13,290 --> 00:40:19,280
formatting I mean because similar things

00:40:15,990 --> 00:40:21,690
but it gives you really good results

00:40:19,280 --> 00:40:26,630
including the annotations including the

00:40:21,690 --> 00:40:26,630
generics so it's really useful

00:40:37,800 --> 00:40:44,040
the question is well I will not repeat

00:40:40,660 --> 00:40:46,600
the question but restate would wind up

00:40:44,040 --> 00:40:50,110
dust in this situation if you don't have

00:40:46,600 --> 00:40:52,600
the source code it D compiles and that's

00:40:50,110 --> 00:40:56,170
exactly the same report as you see here

00:40:52,600 --> 00:40:59,100
so it really gives you the hints in

00:40:56,170 --> 00:41:01,540
particle lines but it's not only a

00:40:59,100 --> 00:41:03,670
oriented towards source code it's also

00:41:01,540 --> 00:41:06,340
oriented towards configuration because

00:41:03,670 --> 00:41:10,480
in the Java applications you can have

00:41:06,340 --> 00:41:14,280
the descriptors like you can have files

00:41:10,480 --> 00:41:17,650
which in it let's say in tables of

00:41:14,280 --> 00:41:21,220
application server 5 or EAP 5 you had

00:41:17,650 --> 00:41:24,310
those tables dash was holding dot XML so

00:41:21,220 --> 00:41:27,880
that made the server to configure the

00:41:24,310 --> 00:41:30,070
cross holding specifically for for this

00:41:27,880 --> 00:41:33,240
application and it's not supported

00:41:30,070 --> 00:41:37,420
anymore in the newer version so you

00:41:33,240 --> 00:41:39,250
either tell the user that this is not

00:41:37,420 --> 00:41:42,730
supported anymore and point him to the

00:41:39,250 --> 00:41:45,400
documentation or you can also make the

00:41:42,730 --> 00:41:47,650
XML if we know how to do it if there is

00:41:45,400 --> 00:41:50,970
some matching one to one and the logic

00:41:47,650 --> 00:41:54,460
is we can follow the logic of the

00:41:50,970 --> 00:41:58,420
original file then we transform it using

00:41:54,460 --> 00:42:00,250
xslt and similar like there are some

00:41:58,420 --> 00:42:06,100
things that which do not apply to

00:42:00,250 --> 00:42:10,360
certain file or lime like for example if

00:42:06,100 --> 00:42:13,420
you use log4j it's not recommended to

00:42:10,360 --> 00:42:18,040
for the enterprise to use log4j or or

00:42:13,420 --> 00:42:21,160
solo for forge a sword for J so if we

00:42:18,040 --> 00:42:23,710
find this on class path then we report

00:42:21,160 --> 00:42:29,080
it in in the in the main report as well

00:42:23,710 --> 00:42:32,140
and the conditions or the constructs

00:42:29,080 --> 00:42:34,180
found can be more complicated but it

00:42:32,140 --> 00:42:36,270
gets more complicated to explain so if

00:42:34,180 --> 00:42:39,420
you are interested what you can do with

00:42:36,270 --> 00:42:41,880
wind up then you are welcome to come and

00:42:39,420 --> 00:42:44,820
have a look but as I said it's backed by

00:42:41,880 --> 00:42:47,250
a graph database so we can what we

00:42:44,820 --> 00:42:49,620
internally do in wind up is that when

00:42:47,250 --> 00:42:52,050
scanning the pieces of the applications

00:42:49,620 --> 00:42:54,240
we put the information into the graph

00:42:52,050 --> 00:42:56,970
and this is where the plug ability comes

00:42:54,240 --> 00:42:58,530
useful because you your plug-in can

00:42:56,970 --> 00:43:00,720
actually access the information which

00:42:58,530 --> 00:43:02,810
was extracted by the other plugins by

00:43:00,720 --> 00:43:05,670
the other conditions and other other

00:43:02,810 --> 00:43:08,100
discoveries whiskering plugins so you

00:43:05,670 --> 00:43:11,340
can see all the jb's you can see all the

00:43:08,100 --> 00:43:14,880
hibernate entities or sorry JP entities

00:43:11,340 --> 00:43:16,980
you can see all the Java files you can

00:43:14,880 --> 00:43:20,070
see those which you can see also the

00:43:16,980 --> 00:43:21,300
findings or the hints the problematic

00:43:20,070 --> 00:43:23,280
places already you can see the

00:43:21,300 --> 00:43:25,680
annotations and you can curate a graph

00:43:23,280 --> 00:43:27,600
for with whatever you want and you get

00:43:25,680 --> 00:43:29,550
the result immediately you don't have to

00:43:27,600 --> 00:43:32,370
scan yourself fall for these findings

00:43:29,550 --> 00:43:37,500
you can go to the graph and got all get

00:43:32,370 --> 00:43:40,590
all the let's say all the places where

00:43:37,500 --> 00:43:50,180
you use a notation X Y Z so this is this

00:43:40,590 --> 00:43:50,180
is how it's bugaboo yes yes

00:43:50,600 --> 00:43:58,950
excuse me it's a complicated there is a

00:43:56,220 --> 00:44:01,020
API which is called tinker pop and it

00:43:58,950 --> 00:44:03,950
has several implementations like neo4j

00:44:01,020 --> 00:44:08,250
and object DB and we are using or we use

00:44:03,950 --> 00:44:10,890
Titan DB Titan DBS and Tinker pop is

00:44:08,250 --> 00:44:13,740
currently switching from two point x2

00:44:10,890 --> 00:44:15,420
3.0 and it was donated to apache i

00:44:13,740 --> 00:44:17,100
recommend it to your attention because

00:44:15,420 --> 00:44:20,580
it's very interesting project and the

00:44:17,100 --> 00:44:23,400
titan DB as well was donated and it has

00:44:20,580 --> 00:44:38,450
reached 1.0 and it's really cool project

00:44:23,400 --> 00:44:38,450
to learn with it's the question is it

00:44:42,670 --> 00:44:47,839
yeah the question is whether wind-up

00:44:45,140 --> 00:44:50,900
supports a configuration server

00:44:47,839 --> 00:44:53,569
configuration migration it doesn't it

00:44:50,900 --> 00:44:55,970
depends because windup is a platform if

00:44:53,569 --> 00:44:58,490
you write rules for migrating the server

00:44:55,970 --> 00:45:00,349
configuration that it supports it but

00:44:58,490 --> 00:45:03,799
currently we don't have many rules

00:45:00,349 --> 00:45:08,299
supporting it because we started work on

00:45:03,799 --> 00:45:12,020
it but for the jboss ie it's raj bose

00:45:08,299 --> 00:45:15,380
EAP of the coming version it was done a

00:45:12,020 --> 00:45:17,960
different way which is much lighter i

00:45:15,380 --> 00:45:20,030
have to admit that wind-up has over 200

00:45:17,960 --> 00:45:22,250
megabytes so it's not something to

00:45:20,030 --> 00:45:25,819
distribute with a server which has about

00:45:22,250 --> 00:45:28,250
150 megabytes just for migration but you

00:45:25,819 --> 00:45:32,030
can download it separately and i think

00:45:28,250 --> 00:45:33,829
that over time there will be some rules

00:45:32,030 --> 00:45:37,490
for server migration will appear

00:45:33,829 --> 00:45:42,260
definitely for or my i think that the

00:45:37,490 --> 00:45:47,720
rules for EAP upgrade will appear if not

00:45:42,260 --> 00:45:50,210
by us than by community thank you for

00:45:47,720 --> 00:45:59,000
the question by the way any more

00:45:50,210 --> 00:46:02,289
questions the aft of time ok we are out

00:45:59,000 --> 00:46:02,289

YouTube URL: https://www.youtube.com/watch?v=tokK2kerlv8


