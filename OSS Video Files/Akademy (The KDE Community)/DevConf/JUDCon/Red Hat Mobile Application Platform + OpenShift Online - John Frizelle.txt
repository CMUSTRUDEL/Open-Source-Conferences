Title: Red Hat Mobile Application Platform + OpenShift Online - John Frizelle
Publication date: 2016-02-12
Playlist: JUDCon
Description: 
	A walk-through of the features of the Red Hat Mobile Application Platform and how to use the OpenShift Online PaaS as a Mobile Backend as a Service (MBaaS) for RHMAP. During the walkthrough, we will look at creating mobile applications, deploying Node.js microservices as well as local development, testing and deployment.

The majority of the session will be a live demo of the platform & will include live coding.

Presentation: http://bit.ly/1Sm7Xwo

Open registration for the stack we will be using is available at https://openshift.feedhenry.com
Captions: 
	00:00:18,320 --> 00:00:21,320
so

00:00:22,770 --> 00:00:25,610
business

00:00:31,610 --> 00:00:35,150
it's important

00:00:41,120 --> 00:00:44,260
to disguise

00:00:52,000 --> 00:00:55,300
some people

00:01:01,120 --> 00:01:08,300
just hard

00:01:04,390 --> 00:01:11,300
falling mechanism

00:01:08,300 --> 00:01:11,300
you

00:01:13,759 --> 00:01:16,759
sure

00:01:19,190 --> 00:01:23,420
the question is could you take

00:01:35,770 --> 00:01:38,770
careful

00:01:39,210 --> 00:01:42,420
it's all I

00:01:48,400 --> 00:01:51,600
so much

00:02:04,909 --> 00:02:06,939
Oh

00:02:59,480 --> 00:03:04,610
it's nice for certain thing actually

00:03:02,400 --> 00:03:04,610
went

00:03:19,260 --> 00:03:23,280
no how it work

00:03:50,049 --> 00:03:53,049
wisdom

00:04:01,349 --> 00:04:04,500
thank you

00:04:27,330 --> 00:04:29,389
you

00:04:57,780 --> 00:05:03,210
I'm very pleased to welcome John's

00:05:00,389 --> 00:05:11,250
result that will speak about open shift

00:05:03,210 --> 00:05:13,320
and the mobile platform thank you so a

00:05:11,250 --> 00:05:16,050
little bit about myself my name is John

00:05:13,320 --> 00:05:18,900
Frizzle I am the chief architect with

00:05:16,050 --> 00:05:21,270
red hot mobile I was previously with a

00:05:18,900 --> 00:05:24,230
company called feed Henry and we

00:05:21,270 --> 00:05:26,940
required by red house in October 2014

00:05:24,230 --> 00:05:31,530
been working with feet Henry and in

00:05:26,940 --> 00:05:34,919
mobile technology since 2008 so quite a

00:05:31,530 --> 00:05:38,040
bit of background they're all of our

00:05:34,919 --> 00:05:40,500
time apparently if my t-shirt is to be

00:05:38,040 --> 00:05:43,200
believed means I have mobile superpowers

00:05:40,500 --> 00:05:45,990
let's see if that's true today you can

00:05:43,200 --> 00:05:53,220
find me on Twitter at John phrase and on

00:05:45,990 --> 00:05:54,990
github ghetto com / John phrase so over

00:05:53,220 --> 00:05:57,090
the next 40 minutes what I'm going to be

00:05:54,990 --> 00:06:00,180
talking to you about is using the radar

00:05:57,090 --> 00:06:02,700
mobile platform to build some mobile

00:06:00,180 --> 00:06:06,630
solutions and we're going to be looking

00:06:02,700 --> 00:06:09,510
that in the context of pairing up red

00:06:06,630 --> 00:06:13,860
hot mobile and open shifts online to

00:06:09,510 --> 00:06:16,229
deliver these solutions so what we're

00:06:13,860 --> 00:06:19,350
looking at here is a it's a little bit

00:06:16,229 --> 00:06:22,590
marketing oriented of an architecture

00:06:19,350 --> 00:06:26,130
diagram but basically it tells us that

00:06:22,590 --> 00:06:28,410
this mobile platform gives developers a

00:06:26,130 --> 00:06:31,400
set of features and functionality for

00:06:28,410 --> 00:06:34,919
building mobile applications so you have

00:06:31,400 --> 00:06:38,030
facilities like get hosting nodejs

00:06:34,919 --> 00:06:42,300
source code user and identity management

00:06:38,030 --> 00:06:44,340
analytics hosted build farm so that

00:06:42,300 --> 00:06:47,300
allows you to take your your mobile

00:06:44,340 --> 00:06:51,000
source code and generate binaries

00:06:47,300 --> 00:06:55,080
automatically without having to install

00:06:51,000 --> 00:06:56,940
and run Jules locally as well as that as

00:06:55,080 --> 00:06:59,700
part of the platform you have this mbus

00:06:56,940 --> 00:07:02,760
mobile backend as a service and what

00:06:59,700 --> 00:07:05,250
that's for is for the mobile

00:07:02,760 --> 00:07:07,380
applications that are on your device a

00:07:05,250 --> 00:07:11,100
mobile application on its own is not

00:07:07,380 --> 00:07:12,810
much good if it doesn't have some back

00:07:11,100 --> 00:07:17,730
connectivity some systems talk to you

00:07:12,810 --> 00:07:19,410
and the model that we promote is you

00:07:17,730 --> 00:07:22,290
have the mobile application talking to a

00:07:19,410 --> 00:07:25,470
single API server that acts as a gateway

00:07:22,290 --> 00:07:28,110
or a mediator and then from there into

00:07:25,470 --> 00:07:31,650
back-end systems and we look at that in

00:07:28,110 --> 00:07:35,790
quite a bit more detail over the next 40

00:07:31,650 --> 00:07:37,530
minutes we work on a premise of bring

00:07:35,790 --> 00:07:39,900
your own toolkit so we're not

00:07:37,530 --> 00:07:41,790
prescriptive on how you develop your

00:07:39,900 --> 00:07:44,220
applications if you're developing a

00:07:41,790 --> 00:07:45,960
native iOS app you're obviously going to

00:07:44,220 --> 00:07:47,990
want and need to use xcode for your

00:07:45,960 --> 00:07:50,820
local development if you're developing

00:07:47,990 --> 00:07:55,080
cordova hybrid apps it's really up to

00:07:50,820 --> 00:07:56,970
yourself what editor you use we do have

00:07:55,080 --> 00:07:59,010
a nice integration with j BDS that would

00:07:56,970 --> 00:08:01,100
probably be the recommended editor but

00:07:59,010 --> 00:08:05,760
you're free to use whatever you want

00:08:01,100 --> 00:08:07,920
sublime Adam IntelliJ same Emacs if

00:08:05,760 --> 00:08:11,760
you're inclined that way not here to

00:08:07,920 --> 00:08:14,190
judge so basically we make it as easy as

00:08:11,760 --> 00:08:17,340
possible for you to develop applications

00:08:14,190 --> 00:08:21,630
the way you want to try and stay out of

00:08:17,340 --> 00:08:28,470
the way and basically get involved where

00:08:21,630 --> 00:08:31,980
we can add value the mobile platform is

00:08:28,470 --> 00:08:34,700
deployed as a hosted offering at the

00:08:31,980 --> 00:08:38,190
moment so it's software as a service you

00:08:34,700 --> 00:08:41,729
go to the URL you sign up for an account

00:08:38,190 --> 00:08:45,480
and use the hosted service in

00:08:41,729 --> 00:08:47,580
conjunction with openshift online we are

00:08:45,480 --> 00:08:49,740
working to make it available as a

00:08:47,580 --> 00:08:51,510
on-premise solution as well so something

00:08:49,740 --> 00:08:54,990
give myself installed and that's been

00:08:51,510 --> 00:08:58,950
built on top of the next generation of

00:08:54,990 --> 00:09:04,500
open shift open shiftry using darker and

00:08:58,950 --> 00:09:05,670
cooper nettings so so many key concepts

00:09:04,500 --> 00:09:09,720
we're going to talk about today first

00:09:05,670 --> 00:09:11,600
one is mbus as I said that's the mobile

00:09:09,720 --> 00:09:14,520
backend as a service it's that piece

00:09:11,600 --> 00:09:17,280
running in the cloud that your mobile

00:09:14,520 --> 00:09:19,530
app communicates with in this case we're

00:09:17,280 --> 00:09:23,040
going to use an open shift to provide

00:09:19,530 --> 00:09:24,480
our mbus another concept that we have to

00:09:23,040 --> 00:09:27,209
we'll be touching on

00:09:24,480 --> 00:09:30,260
what we call an ember service and this

00:09:27,209 --> 00:09:33,540
is a reusable piece of functionality

00:09:30,260 --> 00:09:36,959
within our platform all of the backend

00:09:33,540 --> 00:09:39,800
systems are developed in oj s and the M

00:09:36,959 --> 00:09:42,420
bar service it's a reusable microservice

00:09:39,800 --> 00:09:44,579
for encapsulating a specific piece of

00:09:42,420 --> 00:09:47,370
functionality that you might want to use

00:09:44,579 --> 00:09:50,190
again again in different mobile projects

00:09:47,370 --> 00:09:54,180
or solutions so for example i connect

00:09:50,190 --> 00:09:56,910
connector into a CMS system or a

00:09:54,180 --> 00:09:58,860
connector into an order database or

00:09:56,910 --> 00:10:04,320
connecting to external systems like

00:09:58,860 --> 00:10:05,279
twilio or Google or sales force today

00:10:04,320 --> 00:10:09,209
we're going to be playing around with

00:10:05,279 --> 00:10:11,279
tree and bass services and we're going

00:10:09,209 --> 00:10:14,010
to be fronting them with an API server

00:10:11,279 --> 00:10:18,269
and we have a little application that

00:10:14,010 --> 00:10:20,910
we're going to be using when we talk

00:10:18,269 --> 00:10:23,279
mobile we tend to talk in terms of

00:10:20,910 --> 00:10:25,260
mobile projects or mobility projects

00:10:23,279 --> 00:10:28,380
rather than mobile apps because the app

00:10:25,260 --> 00:10:30,139
is is just the front end of the system

00:10:28,380 --> 00:10:33,959
it's a bit you see and feel and touch

00:10:30,139 --> 00:10:36,750
but without those back-end layers mobile

00:10:33,959 --> 00:10:38,550
apps are pretty pretty dead if they

00:10:36,750 --> 00:10:39,930
don't have any back-end systems to

00:10:38,550 --> 00:10:43,829
connect to they're not going to do very

00:10:39,930 --> 00:10:46,380
much so when we talk about a project we

00:10:43,829 --> 00:10:48,899
talked about the mobile app we talked

00:10:46,380 --> 00:10:50,850
about an API server in middle and we

00:10:48,899 --> 00:10:53,040
talked about these mbar services behind

00:10:50,850 --> 00:10:58,769
the API server for connecting into your

00:10:53,040 --> 00:11:01,050
back-end systems so the demo app we're

00:10:58,769 --> 00:11:03,779
going to turn around with today is an

00:11:01,050 --> 00:11:09,180
apt analogy to scan barcodes and look up

00:11:03,779 --> 00:11:10,829
data from a website called search UPC so

00:11:09,180 --> 00:11:13,170
we have a barcode scanner and better

00:11:10,829 --> 00:11:17,550
than the application you scan a barcode

00:11:13,170 --> 00:11:22,529
it sends us to search you pc and it gets

00:11:17,550 --> 00:11:25,260
the data back search you pc exposes its

00:11:22,529 --> 00:11:29,040
data via some of its information via a

00:11:25,260 --> 00:11:30,540
soap endpoint and then the response to

00:11:29,040 --> 00:11:34,740
comes back inside to solve endpoint is

00:11:30,540 --> 00:11:35,740
csv nice and what we want to return is

00:11:34,740 --> 00:11:40,090
jason

00:11:35,740 --> 00:11:43,600
so within this micro service we have

00:11:40,090 --> 00:11:45,580
will be receiving soap does wrapped

00:11:43,600 --> 00:11:47,470
around CSV and will be transforming it

00:11:45,580 --> 00:11:50,380
into JSON to send it back today a client

00:11:47,470 --> 00:11:52,900
application there's also the ability

00:11:50,380 --> 00:11:55,750
will insert UPC to see the last five

00:11:52,900 --> 00:11:58,300
searches that's anyone that has used

00:11:55,750 --> 00:11:59,980
their service has done now that

00:11:58,300 --> 00:12:02,350
information is not available yet or a

00:11:59,980 --> 00:12:04,150
p.i it's only available on the rain web

00:12:02,350 --> 00:12:07,930
page so we have a piece of functionality

00:12:04,150 --> 00:12:10,000
in here that loads the web page loads it

00:12:07,930 --> 00:12:13,330
up in an in-memory browser in the cloud

00:12:10,000 --> 00:12:16,000
injects jquery and then pulls out the

00:12:13,330 --> 00:12:18,700
recent searches again to be able to

00:12:16,000 --> 00:12:20,680
display them in the application now the

00:12:18,700 --> 00:12:25,630
app has no idea what what's going on

00:12:20,680 --> 00:12:28,260
here because it's just talking to this

00:12:25,630 --> 00:12:33,400
guy who exposes a nice clean rest api

00:12:28,260 --> 00:12:38,230
for day functionality it needs and the

00:12:33,400 --> 00:12:39,400
nasty HTML scraping and so parsing is

00:12:38,230 --> 00:12:40,960
all contained in that barcode

00:12:39,400 --> 00:12:43,240
microservice so we have nice

00:12:40,960 --> 00:12:46,180
encapsulation we have that service doing

00:12:43,240 --> 00:12:48,820
just one or two things and doing them

00:12:46,180 --> 00:12:52,980
quite well the auditing search UPC

00:12:48,820 --> 00:12:56,910
returns is a URL of an image

00:12:52,980 --> 00:13:00,490
representing the product you just can't

00:12:56,910 --> 00:13:03,670
and that's typically a link to something

00:13:00,490 --> 00:13:05,770
in Amazon because let's face it amazon

00:13:03,670 --> 00:13:08,620
sell pretty much every product you can

00:13:05,770 --> 00:13:11,190
think of so we also have this image

00:13:08,620 --> 00:13:13,930
micro service that will take the URL

00:13:11,190 --> 00:13:16,660
reach out to wherever the URL is

00:13:13,930 --> 00:13:18,940
pointing to get the data back stream it

00:13:16,660 --> 00:13:20,590
back address base64 or as binary

00:13:18,940 --> 00:13:24,130
depending on what parameters you give us

00:13:20,590 --> 00:13:26,470
and then cash it for I think it's 10

00:13:24,130 --> 00:13:28,300
seconds or 30 seconds so the river

00:13:26,470 --> 00:13:32,170
request for the same URL comes and again

00:13:28,300 --> 00:13:35,830
it serves a back out of cash and finally

00:13:32,170 --> 00:13:38,380
we have a dummy order service so it is

00:13:35,830 --> 00:13:39,970
just a very simple in memory it keeps a

00:13:38,380 --> 00:13:42,820
list of things that in the app you say

00:13:39,970 --> 00:13:45,460
oh I want to order one of them but the

00:13:42,820 --> 00:13:48,180
nice thing here is it has an API exposed

00:13:45,460 --> 00:13:50,899
so if we wanted to take this and hook it

00:13:48,180 --> 00:13:53,160
to a real world order processing system

00:13:50,899 --> 00:13:55,470
we can just replace the order

00:13:53,160 --> 00:13:57,480
microservice with one that connects into

00:13:55,470 --> 00:14:01,770
an actual system and so long as we keep

00:13:57,480 --> 00:14:04,649
the API is the same this part and this

00:14:01,770 --> 00:14:06,660
part never know that we've switched out

00:14:04,649 --> 00:14:09,200
our order service for something else so

00:14:06,660 --> 00:14:12,899
it gives you real separation of concerns

00:14:09,200 --> 00:14:14,550
between the micro services that guy in

00:14:12,899 --> 00:14:17,370
the middle it's doing the mediation and

00:14:14,550 --> 00:14:20,190
the mobile app and device hasn't a clue

00:14:17,370 --> 00:14:25,230
what's going on he's nice and simple and

00:14:20,190 --> 00:14:27,000
dumb as dumb as possible because one of

00:14:25,230 --> 00:14:29,940
the things you need to keep in mind with

00:14:27,000 --> 00:14:31,350
mobile is it's very different to

00:14:29,940 --> 00:14:33,510
deploying an object to a web application

00:14:31,350 --> 00:14:35,490
once people start downloading and

00:14:33,510 --> 00:14:38,010
installing your application you can't

00:14:35,490 --> 00:14:40,470
force to upgrade so the more information

00:14:38,010 --> 00:14:42,180
you put in the client the more

00:14:40,470 --> 00:14:43,950
likelihood there is did you'll end up

00:14:42,180 --> 00:14:45,300
with bugs in your code in the client and

00:14:43,950 --> 00:14:47,310
you're having to try and push out

00:14:45,300 --> 00:14:49,770
updates you can't force people to take

00:14:47,310 --> 00:14:52,350
the updates and you end up with old

00:14:49,770 --> 00:14:55,339
bogey versions your software on people's

00:14:52,350 --> 00:14:58,350
voices that you can't do anything about

00:14:55,339 --> 00:15:01,560
so if you move as much your logic as you

00:14:58,350 --> 00:15:05,100
can't these two tiers and keep this as a

00:15:01,560 --> 00:15:08,310
very simple basically a UI rendering

00:15:05,100 --> 00:15:11,190
layer then most of your heavy lifting

00:15:08,310 --> 00:15:14,160
almost your logic is back here meaning

00:15:11,190 --> 00:15:16,050
once your bugs are back here and you can

00:15:14,160 --> 00:15:20,600
patch an update and redeploy this

00:15:16,050 --> 00:15:20,600
because they're just hosted web services

00:15:25,170 --> 00:15:34,810
so stealing how this is represented in

00:15:30,940 --> 00:15:36,490
the actual platform is this screen here

00:15:34,810 --> 00:15:38,709
will will be in out this screen quite a

00:15:36,490 --> 00:15:40,569
bit but we can see the same layout that

00:15:38,709 --> 00:15:43,839
we looked at on the previous slide you

00:15:40,569 --> 00:15:45,250
have the client you have this node API

00:15:43,839 --> 00:15:47,199
server in the middle acting as the

00:15:45,250 --> 00:15:50,139
mediator and you have the tree

00:15:47,199 --> 00:15:56,560
microservices over here that are doing

00:15:50,139 --> 00:16:03,000
all of the heavy lifting ok so let's not

00:15:56,560 --> 00:16:03,000
do any more slides that's just a code

00:16:08,370 --> 00:16:13,150
okay so we have a version the platform

00:16:11,800 --> 00:16:15,390
deployed that's hooked up to open shift

00:16:13,150 --> 00:16:20,080
you go to open shift up feat Henry calm

00:16:15,390 --> 00:16:21,700
you click request an invite before you

00:16:20,080 --> 00:16:24,010
do that you need to have an account on

00:16:21,700 --> 00:16:25,570
open chefs online it's a free account

00:16:24,010 --> 00:16:27,580
checks by two minutes to sign up for

00:16:25,570 --> 00:16:31,060
once you have your account on openshift

00:16:27,580 --> 00:16:34,930
online you come back here you select

00:16:31,060 --> 00:16:39,060
request an invite you put in your

00:16:34,930 --> 00:16:42,220
details your openshift email address and

00:16:39,060 --> 00:16:44,470
hit sign up you get an email with an

00:16:42,220 --> 00:16:51,340
invite link and then you'll be able to

00:16:44,470 --> 00:16:53,320
log into the system once you log into

00:16:51,340 --> 00:16:56,980
the system you land on this page here

00:16:53,320 --> 00:16:58,810
this is the main dashboard so from here

00:16:56,980 --> 00:17:01,780
we have kind of an eight main functional

00:16:58,810 --> 00:17:04,390
areas a set of material and resources

00:17:01,780 --> 00:17:05,980
for getting started so tutorials guides

00:17:04,390 --> 00:17:08,740
walk through this video's that kind of

00:17:05,980 --> 00:17:10,630
thing projects which is where as a

00:17:08,740 --> 00:17:12,790
developer you would spend quite a bit of

00:17:10,630 --> 00:17:14,770
your time this is where you lay out the

00:17:12,790 --> 00:17:16,569
architecture for your projects which

00:17:14,770 --> 00:17:18,670
what different types of clients you want

00:17:16,569 --> 00:17:23,319
are they native or a hybrid are they web

00:17:18,670 --> 00:17:25,360
applications that no jsapi server in the

00:17:23,319 --> 00:17:28,150
middle and your micro services on the

00:17:25,360 --> 00:17:30,580
right-hand side you have reporting and

00:17:28,150 --> 00:17:32,410
analytics to get information on usage of

00:17:30,580 --> 00:17:35,050
your applications how many installs how

00:17:32,410 --> 00:17:38,320
many startups how many API requests that

00:17:35,050 --> 00:17:41,410
kind of thing here's where you create

00:17:38,320 --> 00:17:45,100
those mobile microservices to the

00:17:41,410 --> 00:17:49,210
backend microservices link into

00:17:45,100 --> 00:17:51,070
documentation dragon drop apps is a set

00:17:49,210 --> 00:17:53,350
of functionality designed more for line

00:17:51,070 --> 00:17:57,070
of business users and developers so that

00:17:53,350 --> 00:18:01,990
allows people using a dragon drop system

00:17:57,070 --> 00:18:04,930
j drag fields onto a form so standard

00:18:01,990 --> 00:18:06,970
text fields and number fields mobile

00:18:04,930 --> 00:18:09,820
specific things like location capture

00:18:06,970 --> 00:18:11,770
image capture signature capture and then

00:18:09,820 --> 00:18:13,690
without writing a line of code these

00:18:11,770 --> 00:18:16,000
line of business users click a button

00:18:13,690 --> 00:18:18,400
generate a mobile application and they

00:18:16,000 --> 00:18:20,800
can start replacing paper based systems

00:18:18,400 --> 00:18:22,000
it's it's pretty cool front

00:18:20,800 --> 00:18:23,460
technical people but it's not something

00:18:22,000 --> 00:18:27,070
we're going to really look at very much

00:18:23,460 --> 00:18:28,930
here today then we have an

00:18:27,070 --> 00:18:32,590
administration section where you can

00:18:28,930 --> 00:18:36,010
configure various pieces connectivity

00:18:32,590 --> 00:18:38,950
security teams collaborations that kind

00:18:36,010 --> 00:18:40,810
of thing so let's start by taking a

00:18:38,950 --> 00:18:42,430
quick look in here because a couple of

00:18:40,810 --> 00:18:44,650
things happen when you first sign into

00:18:42,430 --> 00:18:47,260
the system the first thing that happens

00:18:44,650 --> 00:18:49,660
is when you log into the system you're

00:18:47,260 --> 00:18:51,040
using your openshift credentials so the

00:18:49,660 --> 00:18:53,530
first thing we do when we get the login

00:18:51,040 --> 00:18:55,300
request we proxy that request to open

00:18:53,530 --> 00:18:58,630
shift and get them to verify your

00:18:55,300 --> 00:19:00,880
identity assuming that your user and

00:18:58,630 --> 00:19:03,250
password you're correct we now have an

00:19:00,880 --> 00:19:06,130
active session on your behalf we use

00:19:03,250 --> 00:19:08,860
that to set up an SSH key pair and an

00:19:06,130 --> 00:19:11,050
auth token so that we can communicate

00:19:08,860 --> 00:19:14,500
with open shift on your behalf and

00:19:11,050 --> 00:19:17,320
deploy applications into open shift so

00:19:14,500 --> 00:19:20,530
in here under embossed targets we can

00:19:17,320 --> 00:19:23,940
see that it created a target for us

00:19:20,530 --> 00:19:27,700
using my open shift username against

00:19:23,940 --> 00:19:30,130
openshift online and it set up two

00:19:27,700 --> 00:19:33,730
environments so environments are there

00:19:30,130 --> 00:19:36,040
to allow you to have control of the life

00:19:33,730 --> 00:19:38,890
cycle of your development like you don't

00:19:36,040 --> 00:19:41,020
write code and just bang it straight

00:19:38,890 --> 00:19:43,960
into production well sometimes you do

00:19:41,020 --> 00:19:46,420
but normally you go through a kind of a

00:19:43,960 --> 00:19:48,490
Dave test cycle so what we have here is

00:19:46,420 --> 00:19:51,940
the concept of environments to allow you

00:19:48,490 --> 00:19:53,110
to deploy your no Jas code and build

00:19:51,940 --> 00:19:55,300
your applications in different

00:19:53,110 --> 00:19:58,330
environments and move your mobile

00:19:55,300 --> 00:19:59,890
solutions Tribble life cycle so that you

00:19:58,330 --> 00:20:02,980
can continue to iterate on your

00:19:59,890 --> 00:20:04,480
development in your dev area and you're

00:20:02,980 --> 00:20:06,790
only deploying things that have been

00:20:04,480 --> 00:20:09,670
tested and verified to your production

00:20:06,790 --> 00:20:12,280
environment you have the option here

00:20:09,670 --> 00:20:14,710
under environments if if you had a third

00:20:12,280 --> 00:20:16,450
stage or a fourth stage in your life

00:20:14,710 --> 00:20:18,910
cycle flow you can add additional

00:20:16,450 --> 00:20:22,630
environments and hook them up to one or

00:20:18,910 --> 00:20:25,390
more of these imbeciles over an open

00:20:22,630 --> 00:20:31,540
shift under the settings area we can see

00:20:25,390 --> 00:20:33,240
the keys and the OAuth token assuming

00:20:31,540 --> 00:20:36,300
that was created to allow

00:20:33,240 --> 00:20:38,550
activity revoking these tokens would

00:20:36,300 --> 00:20:40,680
prevent our platform from being able to

00:20:38,550 --> 00:20:43,260
talk to open shift and next time I tried

00:20:40,680 --> 00:20:45,120
to do anything with open shift it will

00:20:43,260 --> 00:20:47,250
pop up message saying we're no longer

00:20:45,120 --> 00:20:48,780
able to authenticate against overshift

00:20:47,250 --> 00:20:50,550
can you please but you're using them and

00:20:48,780 --> 00:20:53,850
pass or back in and we'll recreate these

00:20:50,550 --> 00:20:58,190
tokens so itself feels if the children's

00:20:53,850 --> 00:20:58,190
expire or if the revoked for some reason

00:20:59,930 --> 00:21:06,840
okay so back in projects as I say the

00:21:05,700 --> 00:21:10,170
application we're going to play with

00:21:06,840 --> 00:21:14,540
here is a barcode scanner application

00:21:10,170 --> 00:21:17,850
and this is a screen that we saw in the

00:21:14,540 --> 00:21:19,560
final slide of the presentation so we

00:21:17,850 --> 00:21:23,100
can see that we have a Cordova

00:21:19,560 --> 00:21:27,690
application here no jsapi server and

00:21:23,100 --> 00:21:30,900
three no Jas microservices within the

00:21:27,690 --> 00:21:33,210
client application we have a set of

00:21:30,900 --> 00:21:36,780
details about the application ideas

00:21:33,210 --> 00:21:39,000
access keys get URLs so all the

00:21:36,780 --> 00:21:41,520
applications that you create are backed

00:21:39,000 --> 00:21:45,240
by a git repository hosted within the

00:21:41,520 --> 00:21:47,220
platform so straightaway it should start

00:21:45,240 --> 00:21:48,930
feeling like a fairly familiar workflow

00:21:47,220 --> 00:21:51,450
you get clone and you can start

00:21:48,930 --> 00:21:52,950
developing locally over here on the

00:21:51,450 --> 00:21:55,140
right hand side we have a preview of the

00:21:52,950 --> 00:21:57,240
application because it's a hybrid

00:21:55,140 --> 00:22:00,270
application means that uses mainly web

00:21:57,240 --> 00:22:02,400
technologies so we can preview it in the

00:22:00,270 --> 00:22:04,590
browser without actually having to

00:22:02,400 --> 00:22:07,230
install our own device obviously this

00:22:04,590 --> 00:22:09,450
doesn't work for native iOS and native

00:22:07,230 --> 00:22:11,430
Android projects but for day for the

00:22:09,450 --> 00:22:12,870
hybrid applications the preview can be

00:22:11,430 --> 00:22:16,680
quite useful for just very quickly

00:22:12,870 --> 00:22:19,710
looking at the functionality going to

00:22:16,680 --> 00:22:22,500
just pop this out for a minute as I said

00:22:19,710 --> 00:22:24,900
it's not a particularly pretty up I keep

00:22:22,500 --> 00:22:28,380
meaning to go back and do something with

00:22:24,900 --> 00:22:31,740
it and make it look less ugly but there

00:22:28,380 --> 00:22:34,170
you go so what we're seeing here is the

00:22:31,740 --> 00:22:39,090
list of five recent scans from search

00:22:34,170 --> 00:22:41,220
UPC over on the search UPC website we

00:22:39,090 --> 00:22:44,760
can see the same list if you click on

00:22:41,220 --> 00:22:45,980
one of the scans it shows your product

00:22:44,760 --> 00:22:51,740
details

00:22:45,980 --> 00:22:54,140
so within the mobile application we've

00:22:51,740 --> 00:23:05,150
implemented the same functionality now

00:22:54,140 --> 00:23:06,770
here's where this this demo ok sorry got

00:23:05,150 --> 00:23:09,260
myself caught up you're just get a

00:23:06,770 --> 00:23:10,520
little bit interesting I have no idea

00:23:09,260 --> 00:23:12,890
what other people have been searching

00:23:10,520 --> 00:23:15,049
for so we've had a couple of occasions

00:23:12,890 --> 00:23:17,900
where we've clicked on something and

00:23:15,049 --> 00:23:20,720
it's been a little bit um shall we say

00:23:17,900 --> 00:23:22,460
not suitable for work so disclaimer I

00:23:20,720 --> 00:23:25,250
don't know what's going to show up here

00:23:22,460 --> 00:23:28,700
i am not responsible for what shows up

00:23:25,250 --> 00:23:31,220
here so as we click on each of these

00:23:28,700 --> 00:23:32,900
what's happening is this client

00:23:31,220 --> 00:23:35,330
application is making an API call

00:23:32,900 --> 00:23:37,250
throughout no Jas guy in the middle who

00:23:35,330 --> 00:23:39,380
in turn is mediating the call out to the

00:23:37,250 --> 00:23:42,559
bar code service to make that soap

00:23:39,380 --> 00:23:44,720
request and get the data back it then

00:23:42,559 --> 00:23:46,700
pulls the image URL out and it makes a

00:23:44,720 --> 00:23:49,220
call to the image service to get a base

00:23:46,700 --> 00:23:51,919
64 version of the image back we build

00:23:49,220 --> 00:23:53,360
all of that up as a JSON object and send

00:23:51,919 --> 00:23:55,309
the whole thing back so we're getting

00:23:53,360 --> 00:23:58,669
everything we need back to the client in

00:23:55,309 --> 00:24:00,950
a single HTTP request along the way we

00:23:58,669 --> 00:24:03,890
strip out any data that comes back from

00:24:00,950 --> 00:24:05,840
search UPC that we don't want or need to

00:24:03,890 --> 00:24:09,790
keep the payload as small as possible

00:24:05,840 --> 00:24:17,350
going back into the client application

00:24:09,790 --> 00:24:17,350
so let's see what we get

00:24:20,889 --> 00:24:31,009
organic oils natural hair mussed okay

00:24:23,450 --> 00:24:34,479
that's not bad a handsome dude oh no

00:24:31,009 --> 00:24:34,479
sorry it's the jacket it's not the guy

00:24:34,840 --> 00:24:45,080
another dude would have a head and a

00:24:41,840 --> 00:24:49,460
dude with no upper body okay they

00:24:45,080 --> 00:24:51,859
weren't too bad so let's look at

00:24:49,460 --> 00:24:54,080
actually getting this as an application

00:24:51,859 --> 00:24:59,359
on our devices and maybe have a little

00:24:54,080 --> 00:25:00,820
bit of fun with ocean so we're just

00:24:59,359 --> 00:25:02,719
going to quickly run down through the

00:25:00,820 --> 00:25:06,950
functionality available on the left-hand

00:25:02,719 --> 00:25:09,169
side here documentation area that just

00:25:06,950 --> 00:25:11,210
allows you to provide information about

00:25:09,169 --> 00:25:12,889
the application say for developers

00:25:11,210 --> 00:25:14,809
coming along behind you what kind of

00:25:12,889 --> 00:25:16,669
frameworks that users may be some

00:25:14,809 --> 00:25:18,349
structure to co would just useful

00:25:16,669 --> 00:25:20,899
information this is basically you read

00:25:18,349 --> 00:25:22,940
me file in fact it is your readme file

00:25:20,899 --> 00:25:24,109
in the root of your repo so the kinds of

00:25:22,940 --> 00:25:26,149
information you'd normally put in a

00:25:24,109 --> 00:25:31,309
readme file are things to will show up

00:25:26,149 --> 00:25:34,700
here there's a live editor which is

00:25:31,309 --> 00:25:37,249
handy for making small quick like typo

00:25:34,700 --> 00:25:41,119
Corrections or very minor modifications

00:25:37,249 --> 00:25:43,820
you can open your various source code

00:25:41,119 --> 00:25:45,589
files and make changes and see those

00:25:43,820 --> 00:25:48,229
updates refresh or reflecting your

00:25:45,589 --> 00:25:50,320
preview but this is not really intended

00:25:48,229 --> 00:25:53,029
for actually writing your application

00:25:50,320 --> 00:25:55,489
because let's be honest if you had to

00:25:53,029 --> 00:25:58,909
try and use a tiny web-based editor this

00:25:55,489 --> 00:26:00,440
size you go crazy very quickly so the

00:25:58,909 --> 00:26:02,269
majority or development is going to be

00:26:00,440 --> 00:26:05,089
done locally and we'll get on to that in

00:26:02,269 --> 00:26:06,469
the mid ocean we have some analytics

00:26:05,089 --> 00:26:09,830
information there's not going to be a

00:26:06,469 --> 00:26:12,139
lot here because yeah the app hasn't

00:26:09,830 --> 00:26:14,599
been used in quite a while configuration

00:26:12,139 --> 00:26:18,229
section integration of push

00:26:14,599 --> 00:26:19,849
notifications we need to enable push wit

00:26:18,229 --> 00:26:22,700
with various keys and credentials and

00:26:19,849 --> 00:26:24,950
then the fun part building the

00:26:22,700 --> 00:26:28,700
application getting an actual APK that

00:26:24,950 --> 00:26:30,619
we can install on device so in the oven

00:26:28,700 --> 00:26:32,840
shift online version android it's the

00:26:30,619 --> 00:26:36,350
only platform that we support through

00:26:32,840 --> 00:26:39,070
farm in the fall enterprise offering it

00:26:36,350 --> 00:26:41,929
supports Android iOS and Windows Phone

00:26:39,070 --> 00:26:43,730
so we're going to build off master you

00:26:41,929 --> 00:26:45,980
can specify a branch attack or a commit

00:26:43,730 --> 00:26:47,659
that you want to build from we're going

00:26:45,980 --> 00:26:49,370
to build a debug application because in

00:26:47,659 --> 00:26:51,470
Android they're really simple to build

00:26:49,370 --> 00:26:52,760
you don't have to set up any keys you

00:26:51,470 --> 00:26:55,730
don't have to do anything you can

00:26:52,760 --> 00:26:58,340
literally just click build and we're

00:26:55,730 --> 00:27:00,020
saying that we are talking to the bar

00:26:58,340 --> 00:27:01,909
code and now that that's the guy in the

00:27:00,020 --> 00:27:03,169
middle it is possible to have more than

00:27:01,909 --> 00:27:05,770
one of them which is why there's an

00:27:03,169 --> 00:27:11,840
option here to select which one you want

00:27:05,770 --> 00:27:13,850
so if you have an Android device there

00:27:11,840 --> 00:27:16,580
will be a QR code appearing in just a

00:27:13,850 --> 00:27:19,039
minute if you want to install my lovely

00:27:16,580 --> 00:27:20,840
ugly looking up so what's happening here

00:27:19,039 --> 00:27:23,750
at the moment is it's taking the source

00:27:20,840 --> 00:27:26,270
code it's sending across to a hostage

00:27:23,750 --> 00:27:28,669
linux machine that has the android build

00:27:26,270 --> 00:27:31,130
tools installed because this is a chord

00:27:28,669 --> 00:27:33,890
of application it's doing the cordova

00:27:31,130 --> 00:27:36,529
bundling and packaging that's needed to

00:27:33,890 --> 00:27:38,809
add a android platform to it and then

00:27:36,529 --> 00:27:41,210
it's invoking the standard belgians

00:27:38,809 --> 00:27:43,630
giving it all of that information plus

00:27:41,210 --> 00:27:46,760
any credentials insert store sent across

00:27:43,630 --> 00:27:53,299
generate an APK and gives us back a link

00:27:46,760 --> 00:27:56,570
to it this can take just a minute so i

00:27:53,299 --> 00:27:59,830
will talk quite slowly while we wait for

00:27:56,570 --> 00:27:59,830
this to happen

00:28:08,260 --> 00:28:19,910
anyone know any good jokes no okay while

00:28:15,620 --> 00:28:21,920
we're waiting for us couple of other it

00:28:19,910 --> 00:28:24,560
always starts out to me as soon as i go

00:28:21,920 --> 00:28:28,730
to move off okay there we go if anyone

00:28:24,560 --> 00:28:33,440
does have a QR code reader let me just

00:28:28,730 --> 00:28:36,110
make that a little bit bigger so if

00:28:33,440 --> 00:28:38,180
anyone has a QR reader and they want to

00:28:36,110 --> 00:28:43,040
take a snap it out and install the

00:28:38,180 --> 00:28:44,210
application i see a couple of phones out

00:28:43,040 --> 00:28:46,450
so I'll just step out it away from

00:28:44,210 --> 00:28:46,450
minish

00:28:52,799 --> 00:28:58,480
ok we can come back to that if people

00:28:56,230 --> 00:29:00,490
didn't get it there's also a short link

00:28:58,480 --> 00:29:02,169
there and you can download the apk

00:29:00,490 --> 00:29:06,460
directly onto your machine and install

00:29:02,169 --> 00:29:12,580
us over USB okay so with the application

00:29:06,460 --> 00:29:18,460
installed what do we get we got a very

00:29:12,580 --> 00:29:20,519
sad looking face okay let's try that

00:29:18,460 --> 00:29:20,519
again

00:29:40,290 --> 00:29:46,070
who this worked perfectly earlier on

00:30:11,470 --> 00:30:25,059
sorry about this folks sorry

00:30:30,400 --> 00:30:36,200
yeah this is not going to work basically

00:30:34,340 --> 00:30:38,660
I was just going to demonstrate real

00:30:36,200 --> 00:30:41,930
time scanning an actual of barcode and

00:30:38,660 --> 00:30:44,600
seeing the whole flow true but live

00:30:41,930 --> 00:30:55,370
demos being what they are that's not

00:30:44,600 --> 00:31:13,220
going to happen beg your pardon hmm I

00:30:55,370 --> 00:31:23,210
could try doing that yeah okay I also

00:31:13,220 --> 00:31:28,580
gonna work alright let's try that no

00:31:23,210 --> 00:31:31,309
they Cordova actually yeah so the

00:31:28,580 --> 00:31:33,890
barcode scanning functionality is a

00:31:31,309 --> 00:31:35,720
Cordova plugin which has a layer of

00:31:33,890 --> 00:31:37,640
native code for interacting with your

00:31:35,720 --> 00:31:40,190
camera device and overlaying the barcode

00:31:37,640 --> 00:31:41,960
scanner piece which means that won't

00:31:40,190 --> 00:31:46,540
work in the browser because it doesn't

00:31:41,960 --> 00:31:46,540
have the native OS bit underneath

00:31:50,360 --> 00:32:13,520
this exact mo sorry yeah I don't have

00:32:10,409 --> 00:32:19,620
chrome remote debugging set up okay it's

00:32:13,520 --> 00:32:22,950
it's not going to play ball let us move

00:32:19,620 --> 00:32:25,440
on because we're fast running out of

00:32:22,950 --> 00:32:27,150
time ok I want to talk a little bit

00:32:25,440 --> 00:32:31,169
about local development so we've had a

00:32:27,150 --> 00:32:33,679
bit of a look around the up studio at

00:32:31,169 --> 00:32:36,780
various bits and pieces of functionality

00:32:33,679 --> 00:32:39,030
but in terms of actually building out

00:32:36,780 --> 00:32:40,200
these mobile solutions as I said you're

00:32:39,030 --> 00:32:54,030
not going to be doing it from the web

00:32:40,200 --> 00:32:56,760
browser so so we have a command line

00:32:54,030 --> 00:32:58,620
tool called fhc that I try to update

00:32:56,760 --> 00:33:01,799
about an hour before the presentation

00:32:58,620 --> 00:33:06,240
and it uninstalled the old version and

00:33:01,799 --> 00:33:08,309
then just failed I think it was because

00:33:06,240 --> 00:33:11,809
of the internet so I'm going to very

00:33:08,309 --> 00:33:11,809
quickly see if I can install it again

00:33:19,860 --> 00:33:33,809
basically what I HC does is it gives you

00:33:22,450 --> 00:33:37,539
I will try not to do that again fhc

00:33:33,809 --> 00:33:41,260
woohoo so basically what it does is it

00:33:37,539 --> 00:33:43,419
gives you a command line version of all

00:33:41,260 --> 00:33:46,120
the functionality does is available

00:33:43,419 --> 00:33:49,210
through to graphical you I so this is

00:33:46,120 --> 00:33:51,039
very useful for for developers for kind

00:33:49,210 --> 00:33:52,659
of standard development flow you don't

00:33:51,039 --> 00:33:54,669
want to be going back to you I and click

00:33:52,659 --> 00:33:56,799
click clicking it's a large it's a lot

00:33:54,669 --> 00:33:59,950
easier and quicker once you're familiar

00:33:56,799 --> 00:34:02,620
with a syntax of the commands to use the

00:33:59,950 --> 00:34:05,080
command line tool it's written in

00:34:02,620 --> 00:34:07,740
node.js itself you may be sensing a

00:34:05,080 --> 00:34:10,030
theme here we quite like know Jas and

00:34:07,740 --> 00:34:12,010
what that also means is you can include

00:34:10,030 --> 00:34:16,270
it as a library and you can integrate it

00:34:12,010 --> 00:34:18,780
into a CI CD process and automate

00:34:16,270 --> 00:34:23,200
nightly builds of mobile applications

00:34:18,780 --> 00:34:25,389
deploys of your cloud code automatically

00:34:23,200 --> 00:34:28,109
run tests on your mobile device there's

00:34:25,389 --> 00:34:31,780
a lot of a very powerful functionality

00:34:28,109 --> 00:34:35,500
that you can get you when you have the

00:34:31,780 --> 00:34:37,060
fhc command available as a library so

00:34:35,500 --> 00:34:40,570
let's take a look at a couple of

00:34:37,060 --> 00:34:45,030
examples so we want to see what projects

00:34:40,570 --> 00:34:45,030
we have so we say fhc projects

00:34:50,220 --> 00:35:01,619
and we get nothing god I love live demos

00:35:26,930 --> 00:35:44,880
spelter writer would help ok ok so we've

00:35:42,930 --> 00:35:48,000
basically with the fhe cherubic command

00:35:44,880 --> 00:35:51,329
we've told it to cherish the same URL as

00:35:48,000 --> 00:35:52,950
we're using here for our web browser I

00:35:51,329 --> 00:35:55,829
was already logged in so it didn't

00:35:52,950 --> 00:35:58,319
prompt me to authenticate again and then

00:35:55,829 --> 00:36:00,569
it gives us a list of our tree projects

00:35:58,319 --> 00:36:03,779
in the same way as we can see a list of

00:36:00,569 --> 00:36:05,730
three projects here we can then if we

00:36:03,779 --> 00:36:08,240
want to get a list of the apps within

00:36:05,730 --> 00:36:08,240
the project

00:36:14,660 --> 00:36:20,210
so we can see we have our client and our

00:36:17,900 --> 00:36:22,730
node.js cloud code we have a link to our

00:36:20,210 --> 00:36:24,970
get URL so we can get clone the

00:36:22,730 --> 00:36:28,870
applications and start local development

00:36:24,970 --> 00:36:36,110
so I already have cloned the

00:36:28,870 --> 00:36:38,000
applications and so the client

00:36:36,110 --> 00:36:40,190
application design in the middle under

00:36:38,000 --> 00:36:43,670
tree services I have them all clones and

00:36:40,190 --> 00:36:45,560
open in Adam here so just want to

00:36:43,670 --> 00:36:48,140
quickly take a look at a little bit of

00:36:45,560 --> 00:36:50,900
code that i was talking about earlier on

00:36:48,140 --> 00:36:57,020
so they the micro servers for

00:36:50,900 --> 00:37:00,620
interacting with search UPC is here can

00:36:57,020 --> 00:37:10,700
people see that fun sighs okay do you

00:37:00,620 --> 00:37:12,710
want a bigger bit more I will okay so

00:37:10,700 --> 00:37:15,440
this is the entire implementation of

00:37:12,710 --> 00:37:19,250
they get me a list of the recent

00:37:15,440 --> 00:37:20,570
barcodes and what we're doing here i'll

00:37:19,250 --> 00:37:22,940
try and stand up without ripping my

00:37:20,570 --> 00:37:27,020
microphone off and i want to play with

00:37:22,940 --> 00:37:30,140
the stick so okay so we'll make an HTTP

00:37:27,020 --> 00:37:33,140
request to search UPC com just a

00:37:30,140 --> 00:37:35,630
standard get request when we get the

00:37:33,140 --> 00:37:37,400
response body back well we get to

00:37:35,630 --> 00:37:40,040
response week we check to see was there

00:37:37,400 --> 00:37:42,560
an ER i think the last time i did this

00:37:40,040 --> 00:37:45,650
presentation I was working through this

00:37:42,560 --> 00:37:47,330
and it just would not work regardless of

00:37:45,650 --> 00:37:49,420
what I did I thought I'd introduced a

00:37:47,330 --> 00:37:51,950
bog I was trying and trying and trying

00:37:49,420 --> 00:37:55,340
eventually I went to the search UPC site

00:37:51,950 --> 00:37:57,380
and it was down which is why I went to

00:37:55,340 --> 00:38:00,260
it so early this time to make sure it

00:37:57,380 --> 00:38:04,490
was working so once we got a successful

00:38:00,260 --> 00:38:08,810
HTML response back we use a node module

00:38:04,490 --> 00:38:11,120
called j/s dom and we loading jquery

00:38:08,810 --> 00:38:13,460
into the HTML response the site doesn't

00:38:11,120 --> 00:38:17,180
have jquery anna by default we inject

00:38:13,460 --> 00:38:18,980
jquery because the jquery selectors are

00:38:17,180 --> 00:38:21,280
just so damn powerful and makes it

00:38:18,980 --> 00:38:21,280
really easy

00:38:21,670 --> 00:38:29,349
so having just viewed source of the

00:38:25,089 --> 00:38:32,170
webpage I could see that they find

00:38:29,349 --> 00:38:34,180
search results were in an element with

00:38:32,170 --> 00:38:37,119
an idea of current searches and each one

00:38:34,180 --> 00:38:39,040
of them was a link so a small little

00:38:37,119 --> 00:38:42,400
iterator to link over each of the

00:38:39,040 --> 00:38:46,540
children and pull out the actual URL of

00:38:42,400 --> 00:38:48,970
the link and then we return that as a

00:38:46,540 --> 00:38:54,490
JSON object and there we have a nice

00:38:48,970 --> 00:38:58,750
clean API screen scraping in about 25

00:38:54,490 --> 00:39:05,799
lines code similarly for the read

00:38:58,750 --> 00:39:18,250
endpoint in this case we're using the so

00:39:05,799 --> 00:39:20,319
bend point sorry okay so we're using

00:39:18,250 --> 00:39:23,049
another node module here called soap

00:39:20,319 --> 00:39:25,450
creating a soap client we are calling

00:39:23,049 --> 00:39:30,220
the get products function exposed from

00:39:25,450 --> 00:39:32,500
the wisdom we get our response back we

00:39:30,220 --> 00:39:34,150
pull out the product results which is

00:39:32,500 --> 00:39:37,270
the bit that they send back a CSV which

00:39:34,150 --> 00:39:40,119
is quite disgusting we use yet no sorry

00:39:37,270 --> 00:39:42,849
that would that was accidental we use

00:39:40,119 --> 00:39:46,210
another node module called CSV to Paris

00:39:42,849 --> 00:39:48,819
the CSV results and turn into a JSON

00:39:46,210 --> 00:39:53,530
response and then send that back so

00:39:48,819 --> 00:39:56,319
again in 25 lines of code were

00:39:53,530 --> 00:39:59,170
integrating with a saw Pam point we're

00:39:56,319 --> 00:40:02,140
pulling out a CSV response transforming

00:39:59,170 --> 00:40:07,270
its Jason and sending back a nice clean

00:40:02,140 --> 00:40:11,950
API so similarly then the image strain

00:40:07,270 --> 00:40:13,720
service is even simpler so all in

00:40:11,950 --> 00:40:22,020
including boilerplate its 31 lines of

00:40:13,720 --> 00:40:22,020
code don't don't use it roll

00:40:26,580 --> 00:40:31,930
so we got in a URL and a boolean to say

00:40:30,250 --> 00:40:36,460
whether or not we want RMH base64

00:40:31,930 --> 00:40:40,720
encoded if we do want to base64 encoded

00:40:36,460 --> 00:40:42,850
we get the Omega request for the URL

00:40:40,720 --> 00:40:44,800
weed pipe it through stream encoder and

00:40:42,850 --> 00:40:46,570
pipe it at the far side that's when the

00:40:44,800 --> 00:40:49,480
really nice things about nodejs as its

00:40:46,570 --> 00:40:52,450
support for streaming so you're not

00:40:49,480 --> 00:40:54,700
buffering large amounts of data in

00:40:52,450 --> 00:40:56,380
memory you set up streams you pipe

00:40:54,700 --> 00:40:58,660
things through as many different streams

00:40:56,380 --> 00:41:00,790
as you need for transformations pipe it

00:40:58,660 --> 00:41:02,920
at the fireside and it's literally just

00:41:00,790 --> 00:41:05,920
two chunks that it has a memory at the

00:41:02,920 --> 00:41:07,570
moment as its streaming a true so it

00:41:05,920 --> 00:41:11,950
gives you a very nice small memory

00:41:07,570 --> 00:41:14,590
footprint and all of that then is

00:41:11,950 --> 00:41:21,220
fronted by that cloud app to be talked

00:41:14,590 --> 00:41:23,800
about that exposes the set of AP is that

00:41:21,220 --> 00:41:28,060
we need as a barre chord API and an

00:41:23,800 --> 00:41:31,420
orders API for getting the bar code

00:41:28,060 --> 00:41:34,150
stuff a little bit more involved here

00:41:31,420 --> 00:41:35,800
we're cashing the information for the

00:41:34,150 --> 00:41:37,810
recent searches for 10 seconds so we're

00:41:35,800 --> 00:41:40,600
not hitting search UPC all of the time

00:41:37,810 --> 00:41:42,280
so first thing we do is check to see if

00:41:40,600 --> 00:41:46,540
we have anything in the cash for the

00:41:42,280 --> 00:41:48,670
recent searches if we do have anything

00:41:46,540 --> 00:41:51,280
in the cash we return it straight away

00:41:48,670 --> 00:41:53,859
down here if we don't have anything in

00:41:51,280 --> 00:41:55,720
the cash we make a call out to the bar

00:41:53,859 --> 00:41:59,260
code service saying we want to call the

00:41:55,720 --> 00:42:01,780
recent endpoint and we got our results

00:41:59,260 --> 00:42:06,190
back stick it into the cache and return

00:42:01,780 --> 00:42:09,190
ocean for the read endpoint similar idea

00:42:06,190 --> 00:42:12,880
if it's in cash we use it if it's not in

00:42:09,190 --> 00:42:15,730
cash we call the rear end point we get

00:42:12,880 --> 00:42:18,190
the information back from the search UPC

00:42:15,730 --> 00:42:20,020
site we rip out the bits that were not

00:42:18,190 --> 00:42:26,260
interested in to reduce the payload size

00:42:20,020 --> 00:42:29,619
and we somewhere here I've lost it yeah

00:42:26,260 --> 00:42:31,359
if we've been given an image URL we call

00:42:29,619 --> 00:42:34,000
the image service and get it to stream

00:42:31,359 --> 00:42:34,960
the image back to us as base64 stick

00:42:34,000 --> 00:42:39,220
that into the respond

00:42:34,960 --> 00:42:41,410
and back it goes so that's a pretty

00:42:39,220 --> 00:42:43,570
quick trust true the kind of high-level

00:42:41,410 --> 00:42:44,920
functionality of the platform and a

00:42:43,570 --> 00:42:46,210
little bit of a look at the

00:42:44,920 --> 00:42:49,089
implementation of some of the micro

00:42:46,210 --> 00:42:55,119
services that we use to achieve this

00:42:49,089 --> 00:42:56,260
functionality I two minutes out so I'm

00:42:55,119 --> 00:42:58,210
going to throw it open to any questions

00:42:56,260 --> 00:43:08,859
if anyone has anything they'd like to

00:42:58,210 --> 00:43:14,109
ask yes oh we have support for native

00:43:08,859 --> 00:43:21,460
apps so within the project here you can

00:43:14,109 --> 00:43:24,520
add so we have karnov apps we have web

00:43:21,460 --> 00:43:26,050
applications we have native Android with

00:43:24,520 --> 00:43:30,630
native Android using the Gradle build

00:43:26,050 --> 00:43:33,660
system native iOS native windows phone

00:43:30,630 --> 00:43:36,640
there should be native iOS using

00:43:33,660 --> 00:43:38,950
cocoapods as well and then some

00:43:36,640 --> 00:43:40,630
templates using some of the popular HTML

00:43:38,950 --> 00:43:42,490
frameworks like ionic angular a

00:43:40,630 --> 00:43:45,490
backboard so there's quite a selection

00:43:42,490 --> 00:43:49,440
of of getting started templates that

00:43:45,490 --> 00:43:49,440
cover pretty much all of the bases

00:43:55,340 --> 00:44:05,580
it has been discussed quite a bit I

00:44:00,770 --> 00:44:07,020
think probably ultimately yes simply due

00:44:05,580 --> 00:44:11,760
to the number of times we've been asked

00:44:07,020 --> 00:44:21,140
that question doing the iOS one sorry

00:44:11,760 --> 00:44:21,140
James go ahead yeah

00:44:28,310 --> 00:44:37,530
now I have two sticks ok I think we're

00:44:33,960 --> 00:44:42,119
at a time just one final thing before I

00:44:37,530 --> 00:44:49,800
let you go we do have a workshop on

00:44:42,119 --> 00:44:51,510
today in room a 112 from 430 to 650 so

00:44:49,800 --> 00:44:52,890
if you're interested in learning a

00:44:51,510 --> 00:44:55,080
little bit more and actually having a

00:44:52,890 --> 00:44:56,940
play around with the system gnucash

00:44:55,080 --> 00:44:59,130
fridge one of my colleagues will be

00:44:56,940 --> 00:45:01,350
running the workshop I'll be there and

00:44:59,130 --> 00:45:03,000
some of the other read our mobile folks

00:45:01,350 --> 00:45:05,310
will be there so if you want to come

00:45:03,000 --> 00:45:08,640
have a chat with us or try out the

00:45:05,310 --> 00:45:24,410
system yourself that is when and where

00:45:08,640 --> 00:45:27,119
you can do it thank you very much right

00:45:24,410 --> 00:45:29,010
all right that that's okay i didn't know

00:45:27,119 --> 00:45:31,040
to not eat the screen door sorry about

00:45:29,010 --> 00:45:31,040
that

00:45:54,270 --> 00:45:57,500
la cita mania

00:46:35,450 --> 00:46:37,510
I

00:46:44,549 --> 00:46:47,549
miles

00:46:54,740 --> 00:46:59,770
vga feel safer too you're probably going

00:46:57,680 --> 00:46:59,770
on

00:47:04,020 --> 00:47:20,950
okay the first column is now militia la

00:47:06,460 --> 00:47:23,020
see ya is it on okay so this is how loud

00:47:20,950 --> 00:47:25,210
yeah see it's very loud okay so I'll try

00:47:23,020 --> 00:47:26,740
to talk a little quieter and if

00:47:25,210 --> 00:47:28,840
everybody if it starts to hurt your ears

00:47:26,740 --> 00:47:31,510
start making this yeah exactly start

00:47:28,840 --> 00:47:35,290
doing that is it already like that is it

00:47:31,510 --> 00:47:41,320
a do already feel that way do I believe

00:47:35,290 --> 00:47:45,400
you should I believe you what country

00:47:41,320 --> 00:47:48,660
are you from this one I know mark I

00:47:45,400 --> 00:47:48,660
don't trust you

00:47:55,180 --> 00:47:57,240
you

00:48:07,010 --> 00:48:10,010

YouTube URL: https://www.youtube.com/watch?v=TzxB-pvh3MA


