Title: Knowledge driven micro services -  Maciej Swiderski
Publication date: 2016-02-12
Playlist: JUDCon
Description: 
	With constantly growing business demands more and more focus is put on gathering business knowledge and making use of it in IT. Knowledge Is Everything - thatâ€™s a slogan that lots of business domains is catching up right now.
On the other hand, recent trends in software development are shifting into micro services environments where loosely coupled, standalone and independent services provide access to various business assets. 
With that in mind, knowledge driven micro service idea came into live to combine couple of great technologies together to satisfy such needs:
- vert.x - toolkit for building reactive applications on JVM
- jBPM and Drools flexible process and rule engines that provide excellent execution environment for business assets - the knowledge
- hazelcast - in memory data grid
- various programming languages (Java, JavaScript, Scala, Groovy) to attract various development teams

This session is about illustrating how easily and fast you can build knowledge driven micro services and scale them to almost no limits. All in reactive and polyglot fashion with powerful clustering. Scale individual knowledge micro services without a hassle and allow various languages to easily interact with business knowledge without a need to know where they are located. It all goes via clustered event bus provided by Vert.x, backed by deployable knowledge archives provided by jBPM and Drools, clustering delivered by hazelcast data grid and allow polyglot client side access.

Itâ€™s all about business knowledge that can be delivered as software solution with:
- flexibility
- speed of development
- isolated scalability
- manageability 

Come and see how to transform your IT solutions into knowledge driven micro services with Vert.x, jBPM, Drools and Hazelcast. This session will be full of life demos to actually show the running micro services driven by business knowledge.

Presentation: http://bit.ly/1V9ryxK
Captions: 
	00:00:00,000 --> 00:00:05,520
that will be back with a certain pager

00:00:01,760 --> 00:00:08,460
so we will see in a minute that we will

00:00:05,520 --> 00:00:10,230
have like business rules in archive that

00:00:08,460 --> 00:00:14,460
will actually contain all our business

00:00:10,230 --> 00:00:16,529
rules for qualifying the bank loan then

00:00:14,460 --> 00:00:18,600
we have another business archive or

00:00:16,529 --> 00:00:21,090
knowledge archive that will contain the

00:00:18,600 --> 00:00:24,060
processes for different types of belongs

00:00:21,090 --> 00:00:26,250
so we have a basic loan that requires a

00:00:24,060 --> 00:00:28,439
single person approval and we have a

00:00:26,250 --> 00:00:30,330
long-term loan that will retry manager

00:00:28,439 --> 00:00:44,190
approval and might require additional

00:00:30,330 --> 00:00:47,300
special terms to be set up so a very

00:00:44,190 --> 00:00:50,910
simplistic view at the bank loan system

00:00:47,300 --> 00:00:55,500
to apply to qualify and to approve it

00:00:50,910 --> 00:00:57,719
like a three major steps in the bank

00:00:55,500 --> 00:01:00,239
loan system that can take and of course

00:00:57,719 --> 00:01:03,210
in relay in reality that will be way

00:01:00,239 --> 00:01:04,890
more complex but just for the sake of

00:01:03,210 --> 00:01:09,450
the team won't be able to actually show

00:01:04,890 --> 00:01:11,549
it I completely simplify that so first

00:01:09,450 --> 00:01:14,970
step is that the applicant places a loan

00:01:11,549 --> 00:01:17,070
request by loan request we will see a

00:01:14,970 --> 00:01:18,869
certain information that the person

00:01:17,070 --> 00:01:21,540
needs to provide so provides just the

00:01:18,869 --> 00:01:24,780
data and just drops the request

00:01:21,540 --> 00:01:27,439
somewhere then do we have a bank system

00:01:24,780 --> 00:01:30,720
that is actually taking the loan request

00:01:27,439 --> 00:01:36,390
evaluating that and qualifying is it and

00:01:30,720 --> 00:01:38,040
maybe it's so low risk long that it can

00:01:36,390 --> 00:01:40,079
be outer proof we don't have to involve

00:01:38,040 --> 00:01:42,600
anyone else so the bank system can take

00:01:40,079 --> 00:01:45,180
the decision itself but maybe it's a

00:01:42,600 --> 00:01:47,630
higher risk long or long term also we

00:01:45,180 --> 00:01:50,939
need to qualify and we need to start

00:01:47,630 --> 00:01:53,820
certain steps that need to take in the

00:01:50,939 --> 00:01:56,479
bank in the bank itself to make sure

00:01:53,820 --> 00:01:59,280
that the bank represent that is approve

00:01:56,479 --> 00:02:01,290
approves or rejects the loan so there

00:01:59,280 --> 00:02:03,950
will be a different steps included then

00:02:01,290 --> 00:02:08,039
if we start moving that into services

00:02:03,950 --> 00:02:11,760
then we can divide that as a stress-free

00:02:08,039 --> 00:02:13,060
step into free services once they apply

00:02:11,760 --> 00:02:16,690
for long service

00:02:13,060 --> 00:02:20,560
which usually will be like a UI system

00:02:16,690 --> 00:02:23,340
that except no allows user to put or

00:02:20,560 --> 00:02:26,350
enter the the data that Bank requires

00:02:23,340 --> 00:02:29,410
most likely validate it and pass it

00:02:26,350 --> 00:02:32,020
along then we have the evaluate long

00:02:29,410 --> 00:02:33,550
service and last but not least is the

00:02:32,020 --> 00:02:36,490
process long service so this is where

00:02:33,550 --> 00:02:40,810
different different steps might take

00:02:36,490 --> 00:02:43,690
place so if going to a bit of details of

00:02:40,810 --> 00:02:46,090
the services so yeah I'm main entry

00:02:43,690 --> 00:02:49,239
point whoever would like to get the long

00:02:46,090 --> 00:02:51,010
go to that system enters the data giving

00:02:49,239 --> 00:02:54,940
the applicant applicant name monthly

00:02:51,010 --> 00:02:57,610
income long amount and the duration how

00:02:54,940 --> 00:02:59,739
long can take that money so this is

00:02:57,610 --> 00:03:01,450
again the what we just defined the

00:02:59,739 --> 00:03:04,060
application loan application nothing

00:03:01,450 --> 00:03:07,030
else attempting to get a little

00:03:04,060 --> 00:03:10,060
information from the applicant to be

00:03:07,030 --> 00:03:12,100
able to process those evaluate so this

00:03:10,060 --> 00:03:15,820
is the business rules this is where we

00:03:12,100 --> 00:03:18,459
actually define what can happen and if

00:03:15,820 --> 00:03:20,410
certain criteria are met something else

00:03:18,459 --> 00:03:23,350
will happen so if we provide the data

00:03:20,410 --> 00:03:27,430
that there is a very low risk long like

00:03:23,350 --> 00:03:29,650
well below 10,000 then we can directly

00:03:27,430 --> 00:03:33,040
auto prove it we don't have to involve

00:03:29,650 --> 00:03:35,049
anyone if we have something that is the

00:03:33,040 --> 00:03:37,060
amount for the loan is more than

00:03:35,049 --> 00:03:40,030
thousand and it's less than five years

00:03:37,060 --> 00:03:45,910
for the duration of the loan we need to

00:03:40,030 --> 00:03:48,489
include like a default born bank to the

00:03:45,910 --> 00:03:50,980
representative that we just check the

00:03:48,489 --> 00:03:55,510
background of a given applicant to make

00:03:50,980 --> 00:03:57,519
sure that it's not it's not like a risk

00:03:55,510 --> 00:03:59,230
client or something and then if we have

00:03:57,519 --> 00:04:00,730
a long term which is more than thousand

00:03:59,230 --> 00:04:02,860
and more than five years then we need to

00:04:00,730 --> 00:04:05,769
have a special stuff so include as well

00:04:02,860 --> 00:04:09,549
and this is why the our rules and we

00:04:05,769 --> 00:04:11,260
qualify that long and then we have the

00:04:09,549 --> 00:04:13,829
depending on the classification of our

00:04:11,260 --> 00:04:16,209
loan we can make a decision on what

00:04:13,829 --> 00:04:19,030
process of what step needs to be taken

00:04:16,209 --> 00:04:21,130
to actually drive the long till the end

00:04:19,030 --> 00:04:22,660
so then we have the basic loan

00:04:21,130 --> 00:04:23,890
department that is just bunch of guys

00:04:22,660 --> 00:04:25,570
that's sitting there and you know

00:04:23,890 --> 00:04:26,500
evaluating the loan request for the

00:04:25,570 --> 00:04:30,820
basic operation

00:04:26,500 --> 00:04:33,070
low risk low amount and the low duration

00:04:30,820 --> 00:04:34,930
of them over the long then we have the

00:04:33,070 --> 00:04:36,850
long term loans department that are

00:04:34,930 --> 00:04:39,670
different set of people that will have

00:04:36,850 --> 00:04:47,890
different set of steps to carry on with

00:04:39,670 --> 00:04:50,200
the approval of rejection so now if you

00:04:47,890 --> 00:04:52,930
start pulling those services into the

00:04:50,200 --> 00:04:55,870
into the into your environment you start

00:04:52,930 --> 00:04:58,810
having like a free individual services

00:04:55,870 --> 00:05:01,030
that do not have anything in common they

00:04:58,810 --> 00:05:02,680
are not dependent on each other the only

00:05:01,030 --> 00:05:05,140
thing that they have in common is the

00:05:02,680 --> 00:05:07,120
data that they work the long application

00:05:05,140 --> 00:05:11,230
that's the only thing that they actually

00:05:07,120 --> 00:05:13,780
have in common so they just drop stuff

00:05:11,230 --> 00:05:17,380
pick up stuff from the even bus nothing

00:05:13,780 --> 00:05:18,190
else so if you start looking at how it

00:05:17,380 --> 00:05:20,910
actually works

00:05:18,190 --> 00:05:23,860
so each service itself contain

00:05:20,910 --> 00:05:27,280
everything that that service needs to to

00:05:23,860 --> 00:05:29,740
operate has inside it it does not care

00:05:27,280 --> 00:05:31,840
if something else is available it does

00:05:29,740 --> 00:05:33,820
not care if that api's of that version

00:05:31,840 --> 00:05:36,940
of that version it's completely

00:05:33,820 --> 00:05:39,250
self-contained as I said the only

00:05:36,940 --> 00:05:40,900
trivial services are backed by the cage'

00:05:39,250 --> 00:05:42,400
so to be able to start on knowledge

00:05:40,900 --> 00:05:44,590
driven service you need to have a

00:05:42,400 --> 00:05:49,900
something that actually brings in the

00:05:44,590 --> 00:05:52,900
knowledge to you and again services talk

00:05:49,900 --> 00:05:56,740
to each other by exchanging data and

00:05:52,900 --> 00:06:00,220
thanks to the vertex even bass this is a

00:05:56,740 --> 00:06:02,620
very simple way of exchanging data the

00:06:00,220 --> 00:06:07,060
only addressing schema in vertex even

00:06:02,620 --> 00:06:09,190
bass is just the name it's a simple

00:06:07,060 --> 00:06:12,310
string that defines where you're

00:06:09,190 --> 00:06:16,780
actually sending data there is no APR

00:06:12,310 --> 00:06:19,510
there is no advanced interfaces that we

00:06:16,780 --> 00:06:22,660
actually need to understand to be able

00:06:19,510 --> 00:06:27,669
to exchange and communicate we just drop

00:06:22,660 --> 00:06:30,340
the data that's your interface the

00:06:27,669 --> 00:06:32,410
services can be added dynamically or

00:06:30,340 --> 00:06:34,930
remove dynamically so you can start as

00:06:32,410 --> 00:06:37,390
many services service instances as you

00:06:34,930 --> 00:06:39,470
like and you can shut them down and

00:06:37,390 --> 00:06:41,750
start them up

00:06:39,470 --> 00:06:44,590
anytime there are no no they are not

00:06:41,750 --> 00:06:47,810
interfering you can start a single

00:06:44,590 --> 00:06:49,910
service we specify how many instances

00:06:47,810 --> 00:06:52,100
inside should run it but at the same

00:06:49,910 --> 00:06:53,600
time you can start multiple JV ends that

00:06:52,100 --> 00:06:56,300
will cause different instances of the

00:06:53,600 --> 00:07:02,240
same service and they can be anywhere in

00:06:56,300 --> 00:07:08,350
the network alright so let's go to a

00:07:02,240 --> 00:07:10,850
demo so before alright so this is the

00:07:08,350 --> 00:07:12,170
key platform their knowledge is

00:07:10,850 --> 00:07:15,050
everything platform that allows us to

00:07:12,170 --> 00:07:17,450
capture in a unified way our knowledge

00:07:15,050 --> 00:07:22,520
so this is a web UI so you can just go

00:07:17,450 --> 00:07:32,480
into project outer ring and here we have

00:07:22,520 --> 00:07:36,380
our this is our long term long process a

00:07:32,480 --> 00:07:39,590
very simple one it computes the monthly

00:07:36,380 --> 00:07:42,530
rate it asked for the manager approval

00:07:39,590 --> 00:07:44,510
and if manager approved it it might go

00:07:42,530 --> 00:07:46,850
either to the accept identification so

00:07:44,510 --> 00:07:49,340
we inform the customer the applicant yes

00:07:46,850 --> 00:07:51,590
you got the loan if it's not yet

00:07:49,340 --> 00:07:53,720
approval in price or some special terms

00:07:51,590 --> 00:07:55,400
to be set up there is another task that

00:07:53,720 --> 00:07:58,430
will be assigned to another individual

00:07:55,400 --> 00:08:00,860
in another group in your department that

00:07:58,430 --> 00:08:05,570
might be able to handle that and decide

00:08:00,860 --> 00:08:08,030
what to do a basic one is even simpler

00:08:05,570 --> 00:08:10,160
we have the clerk verification if that

00:08:08,030 --> 00:08:12,169
person approves it's not instant

00:08:10,160 --> 00:08:14,090
notification to the customer it's not

00:08:12,169 --> 00:08:18,770
pretty much the same but not really

00:08:14,090 --> 00:08:21,010
happy message and if we look at the

00:08:18,770 --> 00:08:21,010
rules

00:08:22,530 --> 00:08:28,890
now just three rules that actually

00:08:25,150 --> 00:08:31,900
decide is it out of proofs is it a basic

00:08:28,890 --> 00:08:34,360
loan or is it long term oh just by

00:08:31,900 --> 00:08:36,640
evaluating the data that we sent you

00:08:34,360 --> 00:08:40,810
just grab the element that we have we

00:08:36,640 --> 00:08:42,460
got from the even bus we check it we can

00:08:40,810 --> 00:08:48,150
set as you can see I don't know if you

00:08:42,460 --> 00:08:48,150
can see it see if I can

00:08:54,640 --> 00:09:03,580
this is better now and so you can set a

00:09:00,100 --> 00:09:06,130
certain attribute on the on the loan

00:09:03,580 --> 00:09:08,770
applicant application that will be then

00:09:06,130 --> 00:09:11,230
you can send over this information will

00:09:08,770 --> 00:09:13,540
be already sent to the other parties

00:09:11,230 --> 00:09:15,250
that will actually work with that so we

00:09:13,540 --> 00:09:19,360
just mark it as it's not approved and we

00:09:15,250 --> 00:09:22,810
said with a small type on it it should

00:09:19,360 --> 00:09:26,140
be explanation that it requires basic

00:09:22,810 --> 00:09:28,360
and provoked process so we carry already

00:09:26,140 --> 00:09:36,790
information about what the rules that

00:09:28,360 --> 00:09:42,790
the why as if alive evaluated and then

00:09:36,790 --> 00:09:45,400
the most important thing is our loan

00:09:42,790 --> 00:09:50,380
application this is a Java class that

00:09:45,400 --> 00:09:56,890
has a certain attribute so we have three

00:09:50,380 --> 00:10:00,060
pieces that brings in our knowledge into

00:09:56,890 --> 00:10:02,530
the runtime environment we have the our

00:10:00,060 --> 00:10:04,810
data and that is represented as a Java

00:10:02,530 --> 00:10:06,940
class we have our business rules that

00:10:04,810 --> 00:10:11,610
are represented as a draws language and

00:10:06,940 --> 00:10:15,840
then we have our business processes

00:10:11,610 --> 00:10:15,840
represented as BPMN two processes

00:10:18,070 --> 00:10:30,170
alright then let's see how that works so

00:10:23,030 --> 00:10:33,470
we have three services I will try to

00:10:30,170 --> 00:10:36,140
zoom in zoom out people - so Marvin so

00:10:33,470 --> 00:10:43,400
we can in the first and we use them

00:10:36,140 --> 00:10:46,870
technology here here we have our vertex

00:10:43,400 --> 00:10:49,010
module that relies on the loan rules

00:10:46,870 --> 00:10:51,980
configuration which actually just brings

00:10:49,010 --> 00:10:54,470
in the information about our Cajun and

00:10:51,980 --> 00:10:57,980
this cager actually will be built from

00:10:54,470 --> 00:11:00,290
within the keyword Panj that brings in

00:10:57,980 --> 00:11:02,590
all the business rules the business

00:11:00,290 --> 00:11:07,400
rules are here so here we have our

00:11:02,590 --> 00:11:09,470
evaluate long salaries second one is the

00:11:07,400 --> 00:11:12,140
loan process which is billed based on

00:11:09,470 --> 00:11:16,160
the KL with our two business processes

00:11:12,140 --> 00:11:18,950
basic flow and long term now last but

00:11:16,160 --> 00:11:22,010
not least is our client and here we will

00:11:18,950 --> 00:11:25,070
see different we will see polyglot

00:11:22,010 --> 00:11:27,320
support for it so we have we start with

00:11:25,070 --> 00:11:31,610
a simple Java client as you can see what

00:11:27,320 --> 00:11:34,340
nice if you can see it it's a Java so

00:11:31,610 --> 00:11:38,480
it's you don't have to compile it runs

00:11:34,340 --> 00:11:41,330
the source vertex will do whatever is

00:11:38,480 --> 00:11:43,580
needed to actually run your Java but you

00:11:41,330 --> 00:11:51,220
specify not the class itself but the

00:11:43,580 --> 00:11:54,590
source so let's start our services then

00:11:51,220 --> 00:12:00,680
so we starting in class third mode so

00:11:54,590 --> 00:12:04,100
the services will talk to each other it

00:12:00,680 --> 00:12:10,780
deploying as you can see hopefully I can

00:12:04,100 --> 00:12:14,320
make it bigger kill you right now please

00:12:10,780 --> 00:12:14,320
to some extent

00:12:17,050 --> 00:12:25,040
so we deployed a container with this

00:12:22,100 --> 00:12:27,800
group and a group artifact inversion

00:12:25,040 --> 00:12:30,410
this is a maven structure so we deployed

00:12:27,800 --> 00:12:33,260
a bank loan rules as a cager as a

00:12:30,410 --> 00:12:37,780
back-end for our service drawers

00:12:33,260 --> 00:12:37,780
vertical started and it's ready to run

00:12:38,170 --> 00:12:47,380
that's fine all right then we do the

00:12:43,850 --> 00:12:47,380
same for our process

00:12:58,450 --> 00:13:04,810
again jelly Bebe's a bank loan process

00:13:02,139 --> 00:13:07,990
this is the cager we started the jbpm

00:13:04,810 --> 00:13:20,740
vertical so now it's up and running so

00:13:07,990 --> 00:13:22,630
now now we have our yep our client that

00:13:20,740 --> 00:13:25,959
the client will show you the source of

00:13:22,630 --> 00:13:29,290
it it is a single short client so it

00:13:25,959 --> 00:13:31,510
just generates a loan application based

00:13:29,290 --> 00:13:35,769
on random data so it will generate

00:13:31,510 --> 00:13:39,100
random amount random monthly income and

00:13:35,769 --> 00:13:41,199
random user name that is actually

00:13:39,100 --> 00:13:44,019
requesting the loan and random a

00:13:41,199 --> 00:13:46,120
duration of the loan so that way we can

00:13:44,019 --> 00:13:51,699
see a different rules being evaluating

00:13:46,120 --> 00:13:56,079
different processes being started so we

00:13:51,699 --> 00:14:00,600
starting this started and as you can see

00:13:56,079 --> 00:14:00,600
in the Joule smart

00:14:08,210 --> 00:14:13,550
we created a long application for John

00:14:11,140 --> 00:14:17,570
with Java single long request is a

00:14:13,550 --> 00:14:20,960
request ID income 2,000 requires basic

00:14:17,570 --> 00:14:22,720
loan approval process so then the roles

00:14:20,960 --> 00:14:27,410
evaluated that they give and long

00:14:22,720 --> 00:14:29,720
requires the basic loan approval cost

00:14:27,410 --> 00:14:32,170
that means that there should be a

00:14:29,720 --> 00:14:35,510
process started for it

00:14:32,170 --> 00:14:37,340
we don't have anything printed out here

00:14:35,510 --> 00:14:44,260
because since its basic doesn't make

00:14:37,340 --> 00:14:44,260
sense to anything but you can go here

00:14:48,040 --> 00:14:59,330
see if we have any process instances in

00:14:53,900 --> 00:14:59,660
the tasks and we have the basic can you

00:14:59,330 --> 00:15:05,510
read that

00:14:59,660 --> 00:15:07,580
a clerk verification for basic

00:15:05,510 --> 00:15:10,430
verification for long requested by John

00:15:07,580 --> 00:15:12,860
so that already came into the business

00:15:10,430 --> 00:15:15,860
process management platform and started

00:15:12,860 --> 00:15:19,310
the task for Claire that person can then

00:15:15,860 --> 00:15:22,430
go and evaluate the details so we have

00:15:19,310 --> 00:15:26,600
the applicant name John loan amount 7000

00:15:22,430 --> 00:15:31,720
monthly income 2000 duration 2 years and

00:15:26,600 --> 00:15:31,720
we can either approve it or reject it

00:15:33,010 --> 00:15:39,800
can I do that that claim so now it's

00:15:36,770 --> 00:15:45,170
assigned to me so now I can make a

00:15:39,800 --> 00:15:49,450
decision if I approve it or not and it's

00:15:45,170 --> 00:15:49,450
done then

00:15:58,279 --> 00:16:05,660
so this is one shot you know that's just

00:16:02,160 --> 00:16:15,630
a simple thing so now let's try to use

00:16:05,660 --> 00:16:19,460
another one that sends a new request

00:16:15,630 --> 00:16:24,510
long requests every two seconds again

00:16:19,460 --> 00:16:26,940
it's generated so you can see how much

00:16:24,510 --> 00:16:29,910
staff they are every two seconds

00:16:26,940 --> 00:16:42,839
something new is coming you request

00:16:29,910 --> 00:16:44,940
coming in to same will be here as you

00:16:42,839 --> 00:16:47,100
can see different names different types

00:16:44,940 --> 00:16:51,690
of basic verification for manager

00:16:47,100 --> 00:16:54,990
approval so it runs constantly every

00:16:51,690 --> 00:17:02,640
single everything every two seconds we

00:16:54,990 --> 00:17:05,280
create a new business process it just

00:17:02,640 --> 00:17:08,600
constantly runs so here we calculate the

00:17:05,280 --> 00:17:17,160
monthly rate this is for the long term

00:17:08,600 --> 00:17:20,490
and here you can see you can't that we

00:17:17,160 --> 00:17:24,900
have how to approved as well because

00:17:20,490 --> 00:17:27,360
it's below 1000 oh 1000 so it's Auto

00:17:24,900 --> 00:17:29,940
proofing no process is started roll

00:17:27,360 --> 00:17:32,130
system decided yes this is low-risk loan

00:17:29,940 --> 00:17:36,450
let's approve it immediately there is no

00:17:32,130 --> 00:17:38,460
need to do it and you can see that the

00:17:36,450 --> 00:17:40,290
request ID is different because it's a

00:17:38,460 --> 00:17:42,000
different client different client a

00:17:40,290 --> 00:17:45,510
client generated so the client is

00:17:42,000 --> 00:17:48,750
actually when sending the request can

00:17:45,510 --> 00:17:51,360
again listen to responses and as soon as

00:17:48,750 --> 00:17:54,270
the loan was out approve he gets this

00:17:51,360 --> 00:17:56,040
notification immediately but for that

00:17:54,270 --> 00:18:01,500
given person that given loan has been

00:17:56,040 --> 00:18:06,630
accepted or out approved then you can

00:18:01,500 --> 00:18:08,840
stop this and then if you are a groovy

00:18:06,630 --> 00:18:08,840
fan

00:18:09,530 --> 00:18:15,470
can do the same with groovy language it

00:18:12,470 --> 00:18:20,180
will do exactly the same but the thing

00:18:15,470 --> 00:18:23,690
here is that we want to scale it so we

00:18:20,180 --> 00:18:25,940
just append instances and how many stars

00:18:23,690 --> 00:18:27,920
we wanted to run because by default it

00:18:25,940 --> 00:18:31,250
starts with single instance so there

00:18:27,920 --> 00:18:33,860
will be just one guy sending every

00:18:31,250 --> 00:18:38,360
two-second a long application but if we

00:18:33,860 --> 00:18:40,370
said started with three instances it

00:18:38,360 --> 00:18:47,570
should now send three long requests

00:18:40,370 --> 00:18:51,050
every two seconds and you can see that

00:18:47,570 --> 00:18:53,360
yeah swapping up with more instances in

00:18:51,050 --> 00:18:56,120
exactly the same way you can scale any

00:18:53,360 --> 00:18:57,530
of your micro-services here if you need

00:18:56,120 --> 00:19:00,710
more processing power on the road

00:18:57,530 --> 00:19:03,140
service just started with - instances

00:19:00,710 --> 00:19:06,080
and another number of instances you like

00:19:03,140 --> 00:19:07,970
there so this demo is very simple it's

00:19:06,080 --> 00:19:11,090
very quick there is no time-consuming

00:19:07,970 --> 00:19:14,120
activities neither for rules or an hour

00:19:11,090 --> 00:19:15,650
for processes but to some extent if you

00:19:14,120 --> 00:19:17,060
have like a long-running operation

00:19:15,650 --> 00:19:21,350
within the process and long-running I

00:19:17,060 --> 00:19:23,320
mean like even 2 or 3 seconds then it's

00:19:21,350 --> 00:19:26,180
better to increase the number of

00:19:23,320 --> 00:19:28,400
instances that actually can process your

00:19:26,180 --> 00:19:31,220
request otherwise the messages will be

00:19:28,400 --> 00:19:34,100
queued your system is not efficient

00:19:31,220 --> 00:19:35,660
enough not not fast enough and now you

00:19:34,100 --> 00:19:38,480
can actually scale it the way you like

00:19:35,660 --> 00:19:40,370
and scale it individually you can scale

00:19:38,480 --> 00:19:42,440
only the process service or you can

00:19:40,370 --> 00:19:44,410
scale on either evaluate a long service

00:19:42,440 --> 00:19:46,790
or you can scale the clients as we did

00:19:44,410 --> 00:19:49,220
it's completely up to you and you can

00:19:46,790 --> 00:19:51,710
just scale it by starting with -

00:19:49,220 --> 00:19:53,840
instances or starting another instance

00:19:51,710 --> 00:19:56,900
somewhere else in the network on another

00:19:53,840 --> 00:20:00,200
machine that will will process the

00:19:56,900 --> 00:20:02,840
messages the same way vertex it provides

00:20:00,200 --> 00:20:05,060
us with two options for sending data

00:20:02,840 --> 00:20:07,640
it's sent which is point-to-point or

00:20:05,060 --> 00:20:09,740
published the send is not a nice thing

00:20:07,640 --> 00:20:11,840
because even though we have multiple

00:20:09,740 --> 00:20:13,070
instances listening for the same type of

00:20:11,840 --> 00:20:17,120
data same

00:20:13,070 --> 00:20:18,770
component the vertex will make sure they

00:20:17,120 --> 00:20:22,960
are distributed in a round robin fashion

00:20:18,770 --> 00:20:25,160
and delivered to only one end point

00:20:22,960 --> 00:20:27,080
published and that's publishing

00:20:25,160 --> 00:20:29,210
subscribe so sending one will be

00:20:27,080 --> 00:20:30,980
delivered to everything and then with

00:20:29,210 --> 00:20:34,040
that you can again have different

00:20:30,980 --> 00:20:36,350
operations and different types of stuff

00:20:34,040 --> 00:20:44,150
you can actually include in your micro

00:20:36,350 --> 00:20:47,270
service and expand them individually as

00:20:44,150 --> 00:20:52,610
you can see lots of stuff and yeah the

00:20:47,270 --> 00:20:55,010
request ID is actually groovy loan

00:20:52,610 --> 00:20:57,320
request and for different users

00:20:55,010 --> 00:21:04,820
different the messages completely

00:20:57,320 --> 00:21:12,130
generated to stop and the same stuff we

00:21:04,820 --> 00:21:12,130
have for if you like JavaScript

00:21:18,220 --> 00:21:28,370
so something to get out approved and of

00:21:23,870 --> 00:21:36,050
course if you start doing here go into

00:21:28,370 --> 00:21:37,940
tasks we have 200 almost 140 tasks

00:21:36,050 --> 00:21:40,070
already available it's constantly

00:21:37,940 --> 00:21:42,020
creating the regression they're being

00:21:40,070 --> 00:21:43,940
pick up so you can have this as a you

00:21:42,020 --> 00:21:45,850
want you can have another micro service

00:21:43,940 --> 00:21:48,770
that will actually provide you with the

00:21:45,850 --> 00:21:51,020
visualization of your data of your

00:21:48,770 --> 00:21:54,320
process and collect information again

00:21:51,020 --> 00:21:58,370
just here when you click at that it just

00:21:54,320 --> 00:22:01,910
shows you the form of the input of the

00:21:58,370 --> 00:22:03,170
loan application you can build up

00:22:01,910 --> 00:22:05,270
another micro service that actually

00:22:03,170 --> 00:22:07,400
communicate so will get the information

00:22:05,270 --> 00:22:15,590
will process that approve it rejected

00:22:07,400 --> 00:22:18,650
whatever send it over and here we have

00:22:15,590 --> 00:22:23,930
the J's loan request every single client

00:22:18,650 --> 00:22:26,410
has a different and this is how looks

00:22:23,930 --> 00:22:26,410
like it

00:22:27,640 --> 00:22:39,010
I very simply the simple hope so we have

00:22:36,250 --> 00:22:41,050
the handler that is going to listen for

00:22:39,010 --> 00:22:42,880
the responses as soon as it get the

00:22:41,050 --> 00:22:45,130
response it will just print it out and

00:22:42,880 --> 00:22:45,700
then we have the sent periodic every two

00:22:45,130 --> 00:22:48,790
seconds

00:22:45,700 --> 00:22:50,440
we run this function so it's just

00:22:48,790 --> 00:22:54,400
sending the message that it generates

00:22:50,440 --> 00:22:56,530
the JSON object to simplify to make it

00:22:54,400 --> 00:22:59,260
polyglot we use JSON because it's the

00:22:56,530 --> 00:23:00,730
easiest format to consume in almost any

00:22:59,260 --> 00:23:03,400
language now especially those that are

00:23:00,730 --> 00:23:06,280
supported by vertex so we just fill in

00:23:03,400 --> 00:23:09,340
the data and send it to long application

00:23:06,280 --> 00:23:12,850
and this is just the name it could be

00:23:09,340 --> 00:23:15,490
anything then the rules are listening to

00:23:12,850 --> 00:23:20,190
that and waiting for that information

00:23:15,490 --> 00:23:24,190
and then just replying after evaluation

00:23:20,190 --> 00:23:28,500
and then you can have this exact same

00:23:24,190 --> 00:23:33,130
code in Java bit more verbose but still

00:23:28,500 --> 00:23:51,010
that's exact same thing and groove it

00:23:33,130 --> 00:23:53,170
without syntax highlighting yeah and

00:23:51,010 --> 00:23:55,320
again you can just scale it by adding

00:23:53,170 --> 00:23:58,960
instances and you can scale by adding

00:23:55,320 --> 00:24:03,070
three here two there one there up to you

00:23:58,960 --> 00:24:05,620
to define and based on there and based

00:24:03,070 --> 00:24:08,080
on the on the requirement so to sum up

00:24:05,620 --> 00:24:10,090
main takeaways from the presentation is

00:24:08,080 --> 00:24:13,450
knowledge is everything it really it is

00:24:10,090 --> 00:24:15,550
everything once you know what you're

00:24:13,450 --> 00:24:17,800
going to work with you know your domain

00:24:15,550 --> 00:24:20,170
you can make a wise and fact-based

00:24:17,800 --> 00:24:23,830
decisions so think and keep in mind

00:24:20,170 --> 00:24:26,860
about the what why and how once you have

00:24:23,830 --> 00:24:30,190
that you will be producing way better

00:24:26,860 --> 00:24:33,400
software for your actual end-users and

00:24:30,190 --> 00:24:36,010
yeah those tools that you've seen here

00:24:33,400 --> 00:24:39,010
vertex julesjb BM hassle class adjust

00:24:36,010 --> 00:24:40,720
the tools today you can use these tools

00:24:39,010 --> 00:24:43,990
tomorrow you can switch then

00:24:40,720 --> 00:24:46,929
but the knowledge once you have that the

00:24:43,990 --> 00:24:49,090
tools are just a secondary thing there

00:24:46,929 --> 00:24:50,919
will be anyway replaced that's the

00:24:49,090 --> 00:24:54,159
technology that's happened that's

00:24:50,919 --> 00:24:55,929
happening every single time and with

00:24:54,159 --> 00:24:58,590
that I'd like to thank you very much for

00:24:55,929 --> 00:24:58,590
your attention and

00:28:11,280 --> 00:28:16,280

YouTube URL: https://www.youtube.com/watch?v=GDl0zKpXXMU


