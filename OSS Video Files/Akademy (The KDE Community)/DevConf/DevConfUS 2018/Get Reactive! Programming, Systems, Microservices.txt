Title: Get Reactive! Programming, Systems, Microservices
Publication date: 2019-02-22
Playlist: DevConfUS 2018
Description: 
	Facebook has more than 2 billion monthly, active users - more than active users of the internet in 2000. Humans create 2.5 quintillion bytes of data every day. Massively scalable systems and massive amounts of data are now part of every developer’s life even if you don’t work at a Silicon Valley unicorn.

Reactive approaches are critical pieces in scaling modern systems and effectively working with distributed applications. Reactive approaches are particularly important in microservices architectures. 

This talk covers the origins of reactive Java at Netflix with ReactiveX, reactive systems with Eclipse Vert.x, Akka and Spring Reactor, and a bit of Reactive JavaScript while playing with marbles.
Captions: 
	00:00:03,290 --> 00:00:22,850
let's back up I take it out what are you

00:00:22,580 --> 00:00:30,920
speaking

00:00:22,850 --> 00:00:33,559
I work me that I travel all the time

00:00:30,920 --> 00:00:34,969
solutions architect alright and I made a

00:00:33,559 --> 00:00:44,390
completely rookie mistake and booked

00:00:34,969 --> 00:00:47,840
myself in two cities today so I am

00:00:44,390 --> 00:00:51,550
headed to London right after this I'll

00:00:47,840 --> 00:00:51,550
finish cab and go to the airport

00:01:10,610 --> 00:01:18,530
hey can I switch out the cables resign

00:01:14,970 --> 00:01:18,530
under that not a good thing idea

00:01:23,850 --> 00:01:27,120
let's try this

00:01:47,880 --> 00:01:51,080
okay oh yeah

00:02:06,770 --> 00:02:09,520
oh that's

00:02:10,910 --> 00:02:20,490
there's again

00:02:14,180 --> 00:02:23,580
Jimmy are you yeah probably you okay I

00:02:20,490 --> 00:02:26,190
talk pretty loud welcome austerity and

00:02:23,580 --> 00:02:31,070
if there are questions make sure to

00:02:26,190 --> 00:02:31,070
repeat them so they - yeah

00:02:40,450 --> 00:02:45,889
so who's heard of reactive proto's done

00:02:42,920 --> 00:02:50,120
reactive programming before anybody one

00:02:45,889 --> 00:02:52,400
guys yeah sorry vertex is that go for

00:02:50,120 --> 00:03:01,010
next counts the fact I even have vertex

00:02:52,400 --> 00:03:04,099
stickers all right so is that on kids

00:03:01,010 --> 00:03:06,859
that on got a decent sound level back

00:03:04,099 --> 00:03:08,950
there I'm pretty loud anyway so I don't

00:03:06,859 --> 00:03:08,950
know

00:03:21,900 --> 00:03:26,080
yeah so I have a vertex stickers for

00:03:24,820 --> 00:03:28,300
your laptop if you need some some

00:03:26,080 --> 00:03:30,130
stickers for your laptop here we can

00:03:28,300 --> 00:03:34,660
pass these around when I come to the

00:03:30,130 --> 00:03:36,580
vertex section as you want your laptop

00:03:34,660 --> 00:03:40,980
yeah you we have a lot of stickers out

00:03:36,580 --> 00:03:40,980
front you plaster your laptop here

00:03:53,140 --> 00:03:55,560
okay

00:03:57,430 --> 00:04:06,769
there are you so one for next year any

00:04:03,469 --> 00:04:09,159
other vertex users or rx Java or rxjs

00:04:06,769 --> 00:04:09,159
yeah

00:04:19,470 --> 00:04:23,730
okay

00:04:21,840 --> 00:04:25,440
it's a while we're killing time so tell

00:04:23,730 --> 00:04:26,550
me why we have five we have like three

00:04:25,440 --> 00:04:28,560
minutes poi star so why are you why are

00:04:26,550 --> 00:04:30,990
you interested in this topic today two

00:04:28,560 --> 00:04:39,560
minutes two minutes Co so why are you

00:04:30,990 --> 00:04:39,560
guys interested in this topic today okay

00:04:41,869 --> 00:04:53,789
yeah else why why are you interested in

00:04:44,969 --> 00:04:55,169
it all right excellent things you know

00:04:53,789 --> 00:04:57,689
I'll just call for two minutes and

00:04:55,169 --> 00:05:03,959
they'll thought do we start and Sarah

00:04:57,689 --> 00:05:05,369
Jane you want to come up here again and

00:05:03,959 --> 00:05:06,059
you'll give me the thumbs up right when

00:05:05,369 --> 00:05:08,819
ready go

00:05:06,059 --> 00:05:14,989
Oh ray do we always go ahead and start

00:05:08,819 --> 00:05:14,989
oh I'm sorry I all right sorry

00:05:24,169 --> 00:05:27,620
wasting my living

00:05:30,090 --> 00:05:36,240
good afternoon welcome to the sessions

00:05:32,740 --> 00:05:39,870
called tip reactive programming systems

00:05:36,240 --> 00:05:43,690
microservices speaker is Jeremy Davis

00:05:39,870 --> 00:05:45,639
and Jeffrey Davis is a principal

00:05:43,690 --> 00:05:47,820
solution architect for active before

00:05:45,639 --> 00:05:47,820
joining

00:05:58,580 --> 00:06:04,650
well thank you all right thank you for

00:06:02,280 --> 00:06:06,930
joining my talking about reactive I've

00:06:04,650 --> 00:06:08,100
given this talk or a variation on this

00:06:06,930 --> 00:06:10,170
talk a number of times

00:06:08,100 --> 00:06:12,720
it usually runs longer than thirty five

00:06:10,170 --> 00:06:14,730
minutes so I'm gonna go really quick but

00:06:12,720 --> 00:06:16,380
feel free to interrupt all right I have

00:06:14,730 --> 00:06:17,430
to say I love when you interrupt and I

00:06:16,380 --> 00:06:18,750
have stickers I'll give you a sticker

00:06:17,430 --> 00:06:20,040
early if you interrupt me and ask

00:06:18,750 --> 00:06:25,320
questions right so audience

00:06:20,040 --> 00:06:28,470
participation is highly encouraged yeah

00:06:25,320 --> 00:06:29,700
please Danny like ten minutes ten

00:06:28,470 --> 00:06:32,400
minutes and we'll make sure we're going

00:06:29,700 --> 00:06:34,980
through stuff um so and so you just got

00:06:32,400 --> 00:06:37,320
a good bit of my background here I'd

00:06:34,980 --> 00:06:38,880
started out as a as a dot-com web monkey

00:06:37,320 --> 00:06:40,530
that's when I began my career all on

00:06:38,880 --> 00:06:42,750
front-end I'm doing a lot of JavaScript

00:06:40,530 --> 00:06:45,000
this is the last time I was at Boston

00:06:42,750 --> 00:06:47,460
University my father was a professor

00:06:45,000 --> 00:06:49,530
here and that's probably the last time I

00:06:47,460 --> 00:06:51,390
was on ice skates because after we left

00:06:49,530 --> 00:06:53,340
Boston went to South Carolina where you

00:06:51,390 --> 00:06:56,070
don't get a lot of opportunity to get on

00:06:53,340 --> 00:06:58,860
ice skates right but I have skated at

00:06:56,070 --> 00:07:03,270
the Boston University ice rink a decade

00:06:58,860 --> 00:07:04,920
or three good so so we're gonna start

00:07:03,270 --> 00:07:06,330
off and you guys will have I really

00:07:04,920 --> 00:07:08,190
wanted you guys to have my email address

00:07:06,330 --> 00:07:09,990
and and Twitter handle too so these will

00:07:08,190 --> 00:07:11,220
be available up around SlideShare some

00:07:09,990 --> 00:07:14,760
and they'll be available from the

00:07:11,220 --> 00:07:16,440
conference as well so we're gonna start

00:07:14,760 --> 00:07:17,730
first of all of why this matters right

00:07:16,440 --> 00:07:19,290
so couple people said they're already

00:07:17,730 --> 00:07:21,030
using some reactive toolkits or

00:07:19,290 --> 00:07:22,860
interested in the topic I've heard of it

00:07:21,030 --> 00:07:23,340
I'm gonna give you a little bit a

00:07:22,860 --> 00:07:26,060
different angle

00:07:23,340 --> 00:07:29,040
I think the user experience is why

00:07:26,060 --> 00:07:31,110
reactive matters then this guy's a user

00:07:29,040 --> 00:07:33,030
experience guru but I have colleagues

00:07:31,110 --> 00:07:35,460
who are user experience gurus as well

00:07:33,030 --> 00:07:38,400
and so I asked Sarah Jane who you can

00:07:35,460 --> 00:07:41,280
find out here to kick us off talking

00:07:38,400 --> 00:07:42,960
about what Red Hat does around UX my

00:07:41,280 --> 00:07:44,669
name is Sarah Jane Clark and I'm on Red

00:07:42,960 --> 00:07:47,729
House user experience

00:07:44,669 --> 00:07:49,770
I'm the lead user experience researcher

00:07:47,729 --> 00:07:51,929
on developer focus products which is why

00:07:49,770 --> 00:07:53,849
we're here today and what we're doing in

00:07:51,929 --> 00:07:57,269
our booth out here are actually

00:07:53,849 --> 00:07:59,819
usability tests so we have four products

00:07:57,269 --> 00:08:02,699
and we're looking at including pattern

00:07:59,819 --> 00:08:05,550
fly which is our design system open

00:08:02,699 --> 00:08:06,989
shipped i/o open ship and the new

00:08:05,550 --> 00:08:08,879
developer website and what we're trying

00:08:06,989 --> 00:08:10,949
to do is get feedback because that

00:08:08,879 --> 00:08:14,789
feedback is what helps the designers

00:08:10,949 --> 00:08:16,529
know how to design the products so it's

00:08:14,789 --> 00:08:18,899
super important for us to understand

00:08:16,529 --> 00:08:21,269
what's important to you what is it

00:08:18,899 --> 00:08:23,279
important to you and what you think

00:08:21,269 --> 00:08:24,990
about about our products so that's the

00:08:23,279 --> 00:08:26,610
feedback we're getting we have all kinds

00:08:24,990 --> 00:08:27,779
of goodies so if you have five minutes

00:08:26,610 --> 00:08:30,599
for me I would love to hear your

00:08:27,779 --> 00:08:34,019
feedback thank you

00:08:30,599 --> 00:08:37,620
so who waits fun in code tell people who

00:08:34,019 --> 00:08:39,569
has back-end code everybody right anyway

00:08:37,620 --> 00:08:41,159
so now we'll go to the normally when we

00:08:39,569 --> 00:08:42,509
talk about user experience we talk about

00:08:41,159 --> 00:08:43,680
the front-end right that's what we think

00:08:42,509 --> 00:08:46,500
about it turns about layout and design

00:08:43,680 --> 00:08:48,029
and navigation but this guy and then

00:08:46,500 --> 00:08:49,860
this guy early on Jakob Nielsen I

00:08:48,029 --> 00:08:51,240
mentioned I started as a dot-com web

00:08:49,860 --> 00:08:53,130
monkey right and this guy was like Vee

00:08:51,240 --> 00:08:55,259
guru at the turn of the century this guy

00:08:53,130 --> 00:08:57,000
was the Guru or on web design which was

00:08:55,259 --> 00:08:58,560
kind of amusing because the guys website

00:08:57,000 --> 00:09:01,350
was completely boring it was just text

00:08:58,560 --> 00:09:02,670
but he but he was the Guru right but he

00:09:01,350 --> 00:09:04,649
has these three numbers and he started

00:09:02,670 --> 00:09:06,810
his career at the I think IBM and his

00:09:04,649 --> 00:09:08,790
career doing mainframe usability I know

00:09:06,810 --> 00:09:10,589
that's kind of an oxymoron right but he

00:09:08,790 --> 00:09:12,600
did mainframe usability and then he did

00:09:10,589 --> 00:09:14,699
at Sun Microsystems did Fleck fat client

00:09:12,600 --> 00:09:16,170
stuff and then moved on to the web when

00:09:14,699 --> 00:09:18,240
the web was taking off and now does

00:09:16,170 --> 00:09:20,160
mobile and web consultancy and he has

00:09:18,240 --> 00:09:24,389
these three numbers point one one and

00:09:20,160 --> 00:09:26,699
ten and this is all relates to how you

00:09:24,389 --> 00:09:28,470
feel something is responding in point

00:09:26,699 --> 00:09:30,329
one second you feel like you're

00:09:28,470 --> 00:09:31,860
interacting actively with your

00:09:30,329 --> 00:09:33,630
application whether it's a website or

00:09:31,860 --> 00:09:35,069
whether it's moving your mouse around or

00:09:33,630 --> 00:09:38,459
or using your cookie or whatever it is

00:09:35,069 --> 00:09:40,199
at one second you begin to notice a lag

00:09:38,459 --> 00:09:41,880
so if I were to click this and it took a

00:09:40,199 --> 00:09:43,529
second for that slide to change or if I

00:09:41,880 --> 00:09:45,269
click a button on a web page and it

00:09:43,529 --> 00:09:48,180
takes a second you begin to notice a lag

00:09:45,269 --> 00:09:49,560
but it's okay at about ten seconds

00:09:48,180 --> 00:09:50,850
you're gonna abandon what you're doing

00:09:49,560 --> 00:09:52,610
and this is why you get you know the

00:09:50,850 --> 00:09:54,380
spinning beach ball of death on

00:09:52,610 --> 00:09:55,940
while you get you know icons on a

00:09:54,380 --> 00:09:57,260
website that tells you something's

00:09:55,940 --> 00:09:59,740
happening right because giving you

00:09:57,260 --> 00:10:01,760
feedback saying you'll hang on wait and

00:09:59,740 --> 00:10:03,560
the interesting thing about this is

00:10:01,760 --> 00:10:05,510
these numbers he mentioned he started

00:10:03,560 --> 00:10:07,370
off doing mainframe what we did fat

00:10:05,510 --> 00:10:08,990
client stuff did web mobile these

00:10:07,370 --> 00:10:10,490
numbers have stayed the same across all

00:10:08,990 --> 00:10:12,769
those paradigms so there's something

00:10:10,490 --> 00:10:14,839
that's uniquely human about these

00:10:12,769 --> 00:10:16,820
numbers right and if we write back-end

00:10:14,839 --> 00:10:18,709
code we have to deal with this because

00:10:16,820 --> 00:10:22,640
we have to get a response to our users

00:10:18,709 --> 00:10:24,500
inside of these time frames and reactive

00:10:22,640 --> 00:10:26,630
is responsive and so that's why we

00:10:24,500 --> 00:10:29,630
started with user experience and and

00:10:26,630 --> 00:10:31,730
being able to deliver right there are

00:10:29,630 --> 00:10:33,290
also interesting on tools and we're

00:10:31,730 --> 00:10:35,779
going to look at several of these tools

00:10:33,290 --> 00:10:37,130
I I'm assuming that most people have

00:10:35,779 --> 00:10:38,510
heard of at least no DJ asked some of

00:10:37,130 --> 00:10:41,779
these others are probably going to be

00:10:38,510 --> 00:10:43,459
new vertex is a Red Hat project I have

00:10:41,779 --> 00:10:45,110
vertex stickers up here and we've got

00:10:43,459 --> 00:10:48,790
some some vertex stickers out there as

00:10:45,110 --> 00:10:51,050
well and we'll take a dive into vertex

00:10:48,790 --> 00:10:53,779
and and react to ask you for

00:10:51,050 --> 00:10:56,209
technologies for technologies in 35

00:10:53,779 --> 00:10:58,910
minutes or 30 minutes all right so we're

00:10:56,209 --> 00:11:00,380
covering really three topics but the two

00:10:58,910 --> 00:11:02,089
big ones are reactive systems in

00:11:00,380 --> 00:11:03,920
reactive programming and then we'll talk

00:11:02,089 --> 00:11:05,630
about how those feed into microservices

00:11:03,920 --> 00:11:08,660
architecture where they make a lot of

00:11:05,630 --> 00:11:10,490
sense and we're gonna do both

00:11:08,660 --> 00:11:11,690
programming and systems right so this

00:11:10,490 --> 00:11:13,160
programming might look a little weird

00:11:11,690 --> 00:11:15,980
hopefully it won't look too weird in

00:11:13,160 --> 00:11:17,750
just a few minutes and this is this is

00:11:15,980 --> 00:11:19,640
about reactive systems this comes from

00:11:17,750 --> 00:11:21,560
the reactive manifesto which is a

00:11:19,640 --> 00:11:23,420
manifesto and you can all go sign that

00:11:21,560 --> 00:11:26,180
right after this right I'm a proud

00:11:23,420 --> 00:11:28,490
signatory a little reactive manifesto as

00:11:26,180 --> 00:11:31,040
well as well as the vertex team vertex

00:11:28,490 --> 00:11:32,510
team guys have all signed that all right

00:11:31,040 --> 00:11:35,449
so everybody in here is a programmer

00:11:32,510 --> 00:11:36,500
writes code right okay excellent so

00:11:35,449 --> 00:11:38,000
traditional programming writing

00:11:36,500 --> 00:11:40,670
imperative programming what you normally

00:11:38,000 --> 00:11:42,440
do the way we write code is we call a

00:11:40,670 --> 00:11:44,720
method we get the output from that

00:11:42,440 --> 00:11:46,640
message stored in a variable and then we

00:11:44,720 --> 00:11:48,560
do something useful with that variable

00:11:46,640 --> 00:11:50,720
useful method I know it's it's just you

00:11:48,560 --> 00:11:52,699
had to fiddle my slide right and then we

00:11:50,720 --> 00:11:54,079
call this compute method right we store

00:11:52,699 --> 00:11:55,730
in this variable and then we do

00:11:54,079 --> 00:11:57,430
something useful in this case we put it

00:11:55,730 --> 00:11:59,500
out to the console right

00:11:57,430 --> 00:12:00,640
this is how programming works right it's

00:11:59,500 --> 00:12:02,500
how we've done programming for a long

00:12:00,640 --> 00:12:05,320
time unless you've done like front-end

00:12:02,500 --> 00:12:06,580
code right I bet I started out as a web

00:12:05,320 --> 00:12:08,740
monkey doing a lot of kind of user

00:12:06,580 --> 00:12:09,940
experience or interface stuff

00:12:08,740 --> 00:12:12,760
well it's saying that if you don't fat

00:12:09,940 --> 00:12:14,110
client user interface stuff so any

00:12:12,760 --> 00:12:16,510
synchronous programming is a little bit

00:12:14,110 --> 00:12:20,020
different right we do we do callbacks so

00:12:16,510 --> 00:12:22,360
instead of the notion of calling calling

00:12:20,020 --> 00:12:23,890
a function and storing that result we

00:12:22,360 --> 00:12:26,050
create a method that does something

00:12:23,890 --> 00:12:30,010
useful and then we define an

00:12:26,050 --> 00:12:31,860
asynchronous call to this method and we

00:12:30,010 --> 00:12:36,310
do some other stuff until it comes back

00:12:31,860 --> 00:12:38,110
and what that looks like is we have this

00:12:36,310 --> 00:12:39,640
compute method again like really

00:12:38,110 --> 00:12:42,100
interesting but we've added one thing

00:12:39,640 --> 00:12:44,170
here we've added a callback it's getting

00:12:42,100 --> 00:12:45,970
passed in and if you've used JavaScript

00:12:44,170 --> 00:12:49,690
or Ruby you know you can think about

00:12:45,970 --> 00:12:51,700
these as closures right in lambda here

00:12:49,690 --> 00:12:53,140
in the Java world right so when we call

00:12:51,700 --> 00:12:55,240
this method instead of getting this back

00:12:53,140 --> 00:12:56,770
and storing the result and doing

00:12:55,240 --> 00:13:00,310
something that was the result that comes

00:12:56,770 --> 00:13:02,250
back we pass in our values and we pass

00:13:00,310 --> 00:13:04,150
in the function to tell it what to do

00:13:02,250 --> 00:13:06,160
all right so we're passing in this

00:13:04,150 --> 00:13:08,320
Handler and it just calls handle and

00:13:06,160 --> 00:13:09,910
this is a vertex cons from a sink and

00:13:08,320 --> 00:13:11,529
bar but the notion is we're passing in a

00:13:09,910 --> 00:13:13,000
piece of code that's gonna do something

00:13:11,529 --> 00:13:14,770
and the code will get executed from

00:13:13,000 --> 00:13:16,540
inside of that method but it's not gonna

00:13:14,770 --> 00:13:22,240
block it's not gonna make anybody wait

00:13:16,540 --> 00:13:25,779
for this to happen that's very efficient

00:13:22,240 --> 00:13:27,760
but callbacks can kind of lead to stuff

00:13:25,779 --> 00:13:29,440
that looks like this right and there

00:13:27,760 --> 00:13:31,540
would actually be more code inside of

00:13:29,440 --> 00:13:33,640
here except with failure handling code

00:13:31,540 --> 00:13:36,670
and we can end up with these really big

00:13:33,640 --> 00:13:39,220
nested callbacks right this is usually

00:13:36,670 --> 00:13:40,510
referred to as callback hell and this

00:13:39,220 --> 00:13:43,540
can be kind of difficult to navigate

00:13:40,510 --> 00:13:44,740
right and it can get tough to lead and

00:13:43,540 --> 00:13:46,209
that's you know your IDE has those

00:13:44,740 --> 00:13:47,410
little switches on the side right you

00:13:46,209 --> 00:13:49,180
can collapse your code and try to figure

00:13:47,410 --> 00:13:52,360
out where your bracket would bracket you

00:13:49,180 --> 00:13:54,700
missing right so when we get to reactive

00:13:52,360 --> 00:13:56,380
programming the rest of the stuff that

00:13:54,700 --> 00:13:59,320
were going to talk about is largely a

00:13:56,380 --> 00:14:00,490
ways to deal with or make this easier so

00:13:59,320 --> 00:14:03,760
it also kind of feeds into user

00:14:00,490 --> 00:14:05,170
experience for us as developers we don't

00:14:03,760 --> 00:14:06,730
usually think about user experience in

00:14:05,170 --> 00:14:07,490
that way but if you're writing a library

00:14:06,730 --> 00:14:09,470
that somebody

00:14:07,490 --> 00:14:11,600
else is gonna use you have a user that

00:14:09,470 --> 00:14:12,680
will have an experience right and we

00:14:11,600 --> 00:14:13,970
don't usually think about you that

00:14:12,680 --> 00:14:16,130
usability in that way

00:14:13,970 --> 00:14:17,839
but it becomes really important and as

00:14:16,130 --> 00:14:19,640
developers we all like the things that

00:14:17,839 --> 00:14:23,540
make our lives easier and we like nice

00:14:19,640 --> 00:14:24,950
clean api's right so I'm now gonna stop

00:14:23,540 --> 00:14:27,740
talking for a while and actually look at

00:14:24,950 --> 00:14:28,820
some code right you guys want to see

00:14:27,740 --> 00:14:32,500
code right more than you want to see

00:14:28,820 --> 00:14:32,500
more than you want see my slides right

00:14:33,970 --> 00:14:41,540
alright so if you guys can see this this

00:14:36,830 --> 00:14:43,339
is we're gonna build a little bit of rx

00:14:41,540 --> 00:14:44,810
Java right so we'll get into what

00:14:43,339 --> 00:14:46,670
reactive acts and where it comes from

00:14:44,810 --> 00:14:49,430
but I mentioned that this is about

00:14:46,670 --> 00:14:50,899
building api's around those kind of

00:14:49,430 --> 00:14:54,350
callbacks and asynchronous programming

00:14:50,899 --> 00:14:56,060
to make it easier for you to do that and

00:14:54,350 --> 00:14:58,130
what we have here you can see is this

00:14:56,060 --> 00:15:01,580
thing called an observable and we're

00:14:58,130 --> 00:15:04,459
subscribing to this observable and right

00:15:01,580 --> 00:15:07,910
here we've just got a list of strings

00:15:04,459 --> 00:15:10,730
right if we run this it doesn't do

00:15:07,910 --> 00:15:14,570
anything really cool it just spits out

00:15:10,730 --> 00:15:15,950
the array right and then no big deal so

00:15:14,570 --> 00:15:17,959
that's that's the first introduction the

00:15:15,950 --> 00:15:20,450
reactive programming is it spits out of

00:15:17,959 --> 00:15:22,190
strings but the next thing we're gonna

00:15:20,450 --> 00:15:24,709
do here is we're gonna take this same

00:15:22,190 --> 00:15:30,399
method and we're gonna add some stuff

00:15:24,709 --> 00:15:30,399
here and it's gonna change what we do

00:15:33,030 --> 00:15:40,190
whoops I run the same one all right

00:15:38,300 --> 00:15:44,270
so now I split the words out so it's not

00:15:40,190 --> 00:15:47,930
one object now we're gonna add some

00:15:44,270 --> 00:15:49,820
other stuff I'm gonna treat this as an

00:15:47,930 --> 00:15:50,900
iterable so I'm not gonna have to do the

00:15:49,820 --> 00:15:52,220
traditional way the iterating over

00:15:50,900 --> 00:15:55,940
something right I'm gonna see you use

00:15:52,220 --> 00:15:57,830
this from interval and then I'm gonna do

00:15:55,940 --> 00:16:00,110
something called zip with whoops I

00:15:57,830 --> 00:16:02,030
missed one first let me do something

00:16:00,110 --> 00:16:03,470
boring first again I'm gonna say

00:16:02,030 --> 00:16:08,360
observable and I'm gonna do a range I'm

00:16:03,470 --> 00:16:10,610
gonna pass in some numbers and I'm gonna

00:16:08,360 --> 00:16:12,680
spit out the numbers one through five

00:16:10,610 --> 00:16:14,680
again like that's not real interesting

00:16:12,680 --> 00:16:16,880
right we just spit out one through five

00:16:14,680 --> 00:16:19,610
it gets interesting when we get to this

00:16:16,880 --> 00:16:22,340
one because now I've got two observables

00:16:19,610 --> 00:16:24,890
here and one of them is doing that range

00:16:22,340 --> 00:16:26,840
thing right so this is gonna this is

00:16:24,890 --> 00:16:33,080
gonna create numbers and just return a

00:16:26,840 --> 00:16:36,730
number and then I'm passing in my lambda

00:16:33,080 --> 00:16:41,750
here and I'm telling it to to spit out

00:16:36,730 --> 00:16:44,000
the number and the word I'm using this

00:16:41,750 --> 00:16:46,210
as if with thing here so zip with is

00:16:44,000 --> 00:16:50,410
gonna take these two streams of data and

00:16:46,210 --> 00:16:50,410
concatenate those streams of data for me

00:16:50,920 --> 00:16:55,930
so now I've got this right and not a lot

00:16:53,630 --> 00:16:59,840
of code that I have to write to do that

00:16:55,930 --> 00:17:01,150
so now we'll we'll do something a little

00:16:59,840 --> 00:17:03,410
more interesting we'll split this out

00:17:01,150 --> 00:17:04,910
because now we're gonna start doing some

00:17:03,410 --> 00:17:06,290
some data analysis right we're gonna

00:17:04,910 --> 00:17:08,570
write a real programming so we have the

00:17:06,290 --> 00:17:10,040
quick brown fox jumped over the lazy dog

00:17:08,570 --> 00:17:12,230
right and they they always tell me we

00:17:10,040 --> 00:17:14,209
started typing right this this is every

00:17:12,230 --> 00:17:15,230
letter in the alphabet so I want to find

00:17:14,209 --> 00:17:18,200
out if it is every letter in the

00:17:15,230 --> 00:17:19,520
alphabet which by the way this example

00:17:18,200 --> 00:17:21,680
was not this was not my idea

00:17:19,520 --> 00:17:24,020
this was another guys example I could

00:17:21,680 --> 00:17:27,589
not find his his post he gets on D zone

00:17:24,020 --> 00:17:29,000
though so unknown guy I have to give you

00:17:27,589 --> 00:17:31,220
a lot of credit because this is a great

00:17:29,000 --> 00:17:33,170
way of explaining this so now we've got

00:17:31,220 --> 00:17:35,570
36 different letters but that's not

00:17:33,170 --> 00:17:37,790
really so useful is it because we want

00:17:35,570 --> 00:17:40,520
to find out exactly which ones we have

00:17:37,790 --> 00:17:42,260
so now we're gonna split our words up

00:17:40,520 --> 00:17:44,720
and we're gonna call modifier called

00:17:42,260 --> 00:17:46,020
distinct and we're gonna add that in the

00:17:44,720 --> 00:17:50,910
mix

00:17:46,020 --> 00:17:53,429
and that's gonna show me that I have 25

00:17:50,910 --> 00:17:55,820
different letters the ground fox jumped

00:17:53,429 --> 00:17:58,080
over the lazy dog which is one shy of

00:17:55,820 --> 00:17:59,750
the alphabet right where the English

00:17:58,080 --> 00:18:02,780
alphabet

00:17:59,750 --> 00:18:06,350
so now let's let's throw in another one

00:18:02,780 --> 00:18:06,350
called sorted

00:18:12,580 --> 00:18:15,250
so now we can see what we're missing

00:18:14,050 --> 00:18:16,810
where we missing we're missing an ass

00:18:15,250 --> 00:18:19,390
right so they can come down here

00:18:16,810 --> 00:18:27,430
it's very quickly so live data analysis

00:18:19,390 --> 00:18:29,740
right yeah I will get to that in just a

00:18:27,430 --> 00:18:33,280
second I will explain this in in real in

00:18:29,740 --> 00:18:34,690
real actual detail so observable stuff

00:18:33,280 --> 00:18:38,230
when we do when we do all this stuff we

00:18:34,690 --> 00:18:39,460
can go from I'm still gonna give you

00:18:38,230 --> 00:18:41,590
stickers thank you for the question

00:18:39,460 --> 00:18:44,620
interrupting me and I promise I am going

00:18:41,590 --> 00:18:45,820
to answer that I will repeat that

00:18:44,620 --> 00:18:47,920
because the question was what is

00:18:45,820 --> 00:18:49,600
subscribe do want to subscribe and we

00:18:47,920 --> 00:18:51,750
will jump into what subscribers so we

00:18:49,600 --> 00:18:55,900
can go from simply having an array to

00:18:51,750 --> 00:18:57,640
sorting and sorting you know taking two

00:18:55,900 --> 00:18:59,350
streams of data concatenated that data

00:18:57,640 --> 00:19:01,870
into something that we can use right and

00:18:59,350 --> 00:19:04,570
this is what Rx is about reactive

00:19:01,870 --> 00:19:06,520
extensions now let's go back to my

00:19:04,570 --> 00:19:08,650
slides here and we'll explain kind of

00:19:06,520 --> 00:19:11,050
what I was what we were just looking at

00:19:08,650 --> 00:19:12,550
so I mentioned that asynchronous

00:19:11,050 --> 00:19:13,780
programming is different from imperative

00:19:12,550 --> 00:19:15,430
programming like because we create our

00:19:13,780 --> 00:19:16,960
method that does something useful we

00:19:15,430 --> 00:19:18,970
define an asynchronous call and then we

00:19:16,960 --> 00:19:21,010
do other stuff until that call returns

00:19:18,970 --> 00:19:22,900
well that's what we were doing there but

00:19:21,010 --> 00:19:24,670
we used some constructs on top of it

00:19:22,900 --> 00:19:26,770
that kept us from getting in that kind

00:19:24,670 --> 00:19:28,390
of call back syntax and what we did is

00:19:26,770 --> 00:19:31,180
we created a method that calls something

00:19:28,390 --> 00:19:33,670
useful we defined the asynchronous call

00:19:31,180 --> 00:19:37,450
and that observable object was how we

00:19:33,670 --> 00:19:39,460
define that asynchronous call then we

00:19:37,450 --> 00:19:42,640
attached an observer to the observable

00:19:39,460 --> 00:19:44,440
by calling subscribe and so we call

00:19:42,640 --> 00:19:46,030
subscribers okay I'm watching you

00:19:44,440 --> 00:19:47,890
and this is an important construct in

00:19:46,030 --> 00:19:49,780
the RX world until you attach a

00:19:47,890 --> 00:19:51,130
subscriber it's on you do anything it's

00:19:49,780 --> 00:19:52,960
just a method it's never gonna get

00:19:51,130 --> 00:19:55,960
executed subscribed means like okay

00:19:52,960 --> 00:19:58,120
actually do stuff it has to be observed

00:19:55,960 --> 00:20:00,340
before to execute anything now there are

00:19:58,120 --> 00:20:01,480
subclasses of observable I'm going

00:20:00,340 --> 00:20:03,220
really quick so I'm not going to get

00:20:01,480 --> 00:20:04,450
into all of them I'm an Rx Java two

00:20:03,220 --> 00:20:07,060
there's a couple of things flowable

00:20:04,450 --> 00:20:08,560
completable that have different use

00:20:07,060 --> 00:20:12,370
cases but there's their subtypes of

00:20:08,560 --> 00:20:14,320
observable and then the other big piece

00:20:12,370 --> 00:20:15,760
is so one where we have this method that

00:20:14,320 --> 00:20:17,350
does something useful that we observe

00:20:15,760 --> 00:20:18,970
right and we call observe on it

00:20:17,350 --> 00:20:21,370
the other piece are all these modifiers

00:20:18,970 --> 00:20:22,670
that we saw right group by flat map

00:20:21,370 --> 00:20:24,980
flatmap means we're going to be

00:20:22,670 --> 00:20:27,200
multiple pieces of data and concatenated

00:20:24,980 --> 00:20:29,120
them into one thing that's useful so in

00:20:27,200 --> 00:20:30,680
the real world what's a real world use

00:20:29,120 --> 00:20:31,940
for this kind of it's also it's like

00:20:30,680 --> 00:20:34,220
remember their Ganga for observer

00:20:31,940 --> 00:20:37,400
pattern right it's kind of a lot like

00:20:34,220 --> 00:20:39,320
that right we've got some extra methods

00:20:37,400 --> 00:20:41,600
on here right so on completed and on air

00:20:39,320 --> 00:20:43,460
our key pieces of it they're very

00:20:41,600 --> 00:20:44,780
cardinal parts of this because we know

00:20:43,460 --> 00:20:47,930
that errors are gonna happen and we know

00:20:44,780 --> 00:20:50,390
we want to deal with it so a real-world

00:20:47,930 --> 00:20:52,040
use case and at the end of the slides I

00:20:50,390 --> 00:20:54,470
have some links been Christensen as a

00:20:52,040 --> 00:20:56,390
guy Netflix he talks really well and he

00:20:54,470 --> 00:20:58,520
implemented the reactive X Java library

00:20:56,390 --> 00:21:01,880
or was one of the guys that did has some

00:20:58,520 --> 00:21:05,660
great talks on YouTube this is built

00:21:01,880 --> 00:21:07,460
using rx Java and the reason for that is

00:21:05,660 --> 00:21:10,760
at one point in time when Netflix first

00:21:07,460 --> 00:21:12,830
began really exploding they kept adding

00:21:10,760 --> 00:21:15,140
functionality into their homepage and I

00:21:12,830 --> 00:21:17,330
believe the number it was 38 so at one

00:21:15,140 --> 00:21:19,640
point in time they had to make 38

00:21:17,330 --> 00:21:22,070
synchronous calls to display your home

00:21:19,640 --> 00:21:23,870
page when you log in right which you

00:21:22,070 --> 00:21:25,190
know what that how that's gonna get back

00:21:23,870 --> 00:21:26,690
to those numbers we started off talking

00:21:25,190 --> 00:21:28,820
about right you're not gonna get that

00:21:26,690 --> 00:21:31,430
home page of him in a second when you're

00:21:28,820 --> 00:21:32,690
making 38 blocking calls right and so

00:21:31,430 --> 00:21:35,810
they knew they had to do something else

00:21:32,690 --> 00:21:37,400
and he began looking at reactive

00:21:35,810 --> 00:21:39,890
extensions and implemented the reactive

00:21:37,400 --> 00:21:41,450
extensions for Java another little aside

00:21:39,890 --> 00:21:43,070
here that's interesting and if it you

00:21:41,450 --> 00:21:44,720
know I mentioned that on error errors

00:21:43,070 --> 00:21:47,180
are treated as first-class citizens and

00:21:44,720 --> 00:21:50,090
this paradigm forces you to deal with

00:21:47,180 --> 00:21:51,560
that and have backup plans and one of

00:21:50,090 --> 00:21:52,610
the things they do at Netflix is they

00:21:51,560 --> 00:21:53,840
there are some of these recommendations

00:21:52,610 --> 00:21:55,910
that are cached

00:21:53,840 --> 00:21:58,610
right so this is I logged in this is a

00:21:55,910 --> 00:22:00,710
top picks for dad you know continue

00:21:58,610 --> 00:22:03,020
watching for dad and I can guarantee you

00:22:00,710 --> 00:22:06,980
the top picks for dad do not include lab

00:22:03,020 --> 00:22:10,730
rats and total ID drama or whatever

00:22:06,980 --> 00:22:12,730
these shows are so either the a reactive

00:22:10,730 --> 00:22:15,230
call failed and they grab some cash data

00:22:12,730 --> 00:22:17,210
or maybe my kids had logged in and watch

00:22:15,230 --> 00:22:18,650
things under my account possible also

00:22:17,210 --> 00:22:20,690
but for the sake of this talk I like to

00:22:18,650 --> 00:22:23,920
go with the first right I think it did

00:22:20,690 --> 00:22:26,740
it illustrates the point better

00:22:23,920 --> 00:22:29,440
right morally the ladder all right so

00:22:26,740 --> 00:22:31,750
reactive X reactive X's started life at

00:22:29,440 --> 00:22:34,750
Microsoft in the.net world but this is

00:22:31,750 --> 00:22:37,990
originally a c-sharp thing but it has

00:22:34,750 --> 00:22:43,360
gained a lot of life look at reactive X

00:22:37,990 --> 00:22:44,320
here one thing that's really nice

00:22:43,360 --> 00:22:46,060
there's a couple of things that are

00:22:44,320 --> 00:22:53,830
really nice about reactive X one thing

00:22:46,060 --> 00:23:04,950
that's really nice is get back on my

00:22:53,830 --> 00:23:08,290
phone oh okay on G choose your platform

00:23:04,950 --> 00:23:10,390
there's there's reactive there's an Rx

00:23:08,290 --> 00:23:13,090
implementation in just about any

00:23:10,390 --> 00:23:14,650
language that you want to use and if

00:23:13,090 --> 00:23:16,540
there's not one you can send them some

00:23:14,650 --> 00:23:18,550
pull requests right if they have a they

00:23:16,540 --> 00:23:21,640
have more implementations so there's a

00:23:18,550 --> 00:23:22,750
lot of languages in here some more

00:23:21,640 --> 00:23:25,290
complete than others but there's a lot

00:23:22,750 --> 00:23:27,700
and the documentation is really nice

00:23:25,290 --> 00:23:29,050
especially for you know open source

00:23:27,700 --> 00:23:30,940
community projects this is a really nice

00:23:29,050 --> 00:23:33,730
documentation and you can really come

00:23:30,940 --> 00:23:36,040
through here and figure out how how

00:23:33,730 --> 00:23:37,870
these pieces work and you'll get used to

00:23:36,040 --> 00:23:39,040
playing with marbles right this is when

00:23:37,870 --> 00:23:40,720
the evilest people started calling these

00:23:39,040 --> 00:23:42,490
diagrams these are these operator

00:23:40,720 --> 00:23:44,770
diagrams people started calling them

00:23:42,490 --> 00:23:47,190
marbles it's like we saw a flat map

00:23:44,770 --> 00:23:49,600
right so if we go to flatten that

00:23:47,190 --> 00:23:51,310
there's a flat map and this is showing

00:23:49,600 --> 00:23:52,840
us what happens I'm pulling in different

00:23:51,310 --> 00:23:55,120
types of data I can put in these three

00:23:52,840 --> 00:23:56,860
types of data and what that's gonna do

00:23:55,120 --> 00:23:58,660
behind the scenes is transform it all

00:23:56,860 --> 00:24:01,090
into the same thing and give me one

00:23:58,660 --> 00:24:02,980
stream out all right so I can have red

00:24:01,090 --> 00:24:06,250
green and blue and what I get out are

00:24:02,980 --> 00:24:09,180
all identical objects right all together

00:24:06,250 --> 00:24:09,180
maps together

00:24:09,299 --> 00:24:15,789
and in the spirit of marbles you can go

00:24:13,840 --> 00:24:17,500
to rx marbles comm and here's a

00:24:15,789 --> 00:24:19,929
JavaScript implementation of this and

00:24:17,500 --> 00:24:22,780
you can play with marbles and it will

00:24:19,929 --> 00:24:26,260
show you you'll see exactly how that

00:24:22,780 --> 00:24:30,250
affects the output you get and you can

00:24:26,260 --> 00:24:33,970
go like from you can go interval default

00:24:30,250 --> 00:24:35,679
empty D balances what a D balance does

00:24:33,970 --> 00:24:36,669
and this is a D balance of time so you

00:24:35,679 --> 00:24:38,169
know there's like you won't actually get

00:24:36,669 --> 00:24:41,320
a result there if you if you come within

00:24:38,169 --> 00:24:42,760
a certain interval so you can play with

00:24:41,320 --> 00:24:45,070
these marbles which does help when you

00:24:42,760 --> 00:24:48,220
begin when you begin programming in this

00:24:45,070 --> 00:24:49,450
in this using rx because there is a bit

00:24:48,220 --> 00:24:56,200
of a learning curve right so is this a

00:24:49,450 --> 00:24:57,159
shift a different way of thinking all

00:24:56,200 --> 00:24:58,659
right I'm going to come in and start

00:24:57,159 --> 00:25:00,159
going maybe even a little bit faster so

00:24:58,659 --> 00:25:01,809
opera is playing with marbles these

00:25:00,159 --> 00:25:03,850
links are also all in the back right so

00:25:01,809 --> 00:25:05,710
reactive X or a series of extensions

00:25:03,850 --> 00:25:07,990
lots of different languages designed to

00:25:05,710 --> 00:25:09,850
let you build reactive code really

00:25:07,990 --> 00:25:11,559
easily now you can build reactive

00:25:09,850 --> 00:25:14,169
systems using this Netflix did that

00:25:11,559 --> 00:25:15,490
right they run on Tomcat on AWS right

00:25:14,169 --> 00:25:18,610
everybody turn around my neck looks mic

00:25:15,490 --> 00:25:19,990
restores his architecture don't mutate

00:25:18,610 --> 00:25:21,039
your state outside the function by the

00:25:19,990 --> 00:25:24,340
way you only want to change things

00:25:21,039 --> 00:25:26,110
inside of this functions but there there

00:25:24,340 --> 00:25:28,570
are other toolkits to make building

00:25:26,110 --> 00:25:30,039
complete reactive systems easier right

00:25:28,570 --> 00:25:31,179
so the reactive programming is one way

00:25:30,039 --> 00:25:33,039
of doing it and you can build a system

00:25:31,179 --> 00:25:34,929
that way but there are also toolkits to

00:25:33,039 --> 00:25:36,820
make systems easier I mentioned this is

00:25:34,929 --> 00:25:39,390
the reactive manifesto this is a

00:25:36,820 --> 00:25:41,440
manifesto that you can go and sign um

00:25:39,390 --> 00:25:43,030
you know right for this talk you're

00:25:41,440 --> 00:25:44,530
gonna completely believe this you're

00:25:43,030 --> 00:25:46,330
gonna want to come sign the manifesto

00:25:44,530 --> 00:25:51,690
right so you go to reactive manifesto

00:25:46,330 --> 00:25:54,159
org the ideas behind this starts with

00:25:51,690 --> 00:25:56,530
responsiveness right so the top of this

00:25:54,159 --> 00:25:58,450
diagram the key to building these

00:25:56,530 --> 00:26:00,520
applications is responsiveness came out

00:25:58,450 --> 00:26:02,140
of some guys in Europe who had been

00:26:00,520 --> 00:26:04,419
doing work on really large systems

00:26:02,140 --> 00:26:06,370
inside of banks or large systems for

00:26:04,419 --> 00:26:07,870
banks and they came up with this way

00:26:06,370 --> 00:26:09,640
that this is how we need to build

00:26:07,870 --> 00:26:11,799
applications to make them response it

00:26:09,640 --> 00:26:12,970
into scale right so key number one is

00:26:11,799 --> 00:26:14,290
that everything needs to be responsive

00:26:12,970 --> 00:26:15,730
people get bored

00:26:14,290 --> 00:26:17,260
they want an answer right and that

00:26:15,730 --> 00:26:18,940
doesn't matter that that's your end user

00:26:17,260 --> 00:26:20,770
who's interacting with the user

00:26:18,940 --> 00:26:22,270
interface as well as other people

00:26:20,770 --> 00:26:25,390
working with your library right we need

00:26:22,270 --> 00:26:27,250
an answer back in order to do this your

00:26:25,390 --> 00:26:29,620
system has to be resilient right so it

00:26:27,250 --> 00:26:31,600
has to be self-healing we need to be

00:26:29,620 --> 00:26:33,490
able to replicate the components of your

00:26:31,600 --> 00:26:34,960
system right says like statelessness a

00:26:33,490 --> 00:26:36,670
lot of the kind of concepts we hear when

00:26:34,960 --> 00:26:37,990
we talk about cloud native development a

00:26:36,670 --> 00:26:40,060
lot of things we hear about like in the

00:26:37,990 --> 00:26:41,740
world of micro services any kind of

00:26:40,060 --> 00:26:43,180
failures need to be contained right so

00:26:41,740 --> 00:26:44,740
it needs to happen inside of there but

00:26:43,180 --> 00:26:46,660
doesn't have should not propagate out

00:26:44,740 --> 00:26:48,130
into the entire system right so if one

00:26:46,660 --> 00:26:49,960
piece fails that's okay we have a

00:26:48,130 --> 00:26:51,460
strategy for dealing with that right now

00:26:49,960 --> 00:26:53,440
it's the key thing about Netflix right

00:26:51,460 --> 00:26:56,410
if one of these 38 calls fails that's

00:26:53,440 --> 00:26:58,330
okay you still get a home screen they

00:26:56,410 --> 00:27:00,160
also need to be able to be elastic so

00:26:58,330 --> 00:27:02,680
they have to scale up and scale back

00:27:00,160 --> 00:27:04,270
down right them because we know one of

00:27:02,680 --> 00:27:06,160
the things we know in systems today is

00:27:04,270 --> 00:27:07,540
we can't necessarily tell how much data

00:27:06,160 --> 00:27:09,160
we're gonna get right

00:27:07,540 --> 00:27:11,500
we had these we started off with the

00:27:09,160 --> 00:27:12,940
with lazy dog right but then we started

00:27:11,500 --> 00:27:14,860
adding other things and then we started

00:27:12,940 --> 00:27:19,780
adding another stream of data in there

00:27:14,860 --> 00:27:21,640
with numbers in systems today we don't

00:27:19,780 --> 00:27:23,050
necessarily know how many other systems

00:27:21,640 --> 00:27:25,300
we have to call how many other sources

00:27:23,050 --> 00:27:26,770
of data we have right especially as we

00:27:25,300 --> 00:27:28,810
move like a micro services architecture

00:27:26,770 --> 00:27:30,160
and the business realizes they can get a

00:27:28,810 --> 00:27:31,660
new feature into production in a week or

00:27:30,160 --> 00:27:33,820
two you're gonna be dealing with a lot

00:27:31,660 --> 00:27:36,700
of new sources of data new sources of

00:27:33,820 --> 00:27:38,410
truth right and then the other key here

00:27:36,700 --> 00:27:40,390
that they came up with is that your

00:27:38,410 --> 00:27:41,980
system should be message driven and the

00:27:40,390 --> 00:27:44,080
next few things we look at will

00:27:41,980 --> 00:27:46,360
implement this in different ways vertex

00:27:44,080 --> 00:27:48,580
uses JSON for this right so JSON is the

00:27:46,360 --> 00:27:50,380
payload for passing messages between

00:27:48,580 --> 00:27:53,320
objects the first thing we'll look at

00:27:50,380 --> 00:27:54,820
though is akka when that's because this

00:27:53,320 --> 00:27:56,500
was written by the akka guys there were

00:27:54,820 --> 00:27:57,760
really leaders in this space or the

00:27:56,500 --> 00:27:59,680
light band guys you guys are familiar

00:27:57,760 --> 00:28:04,690
with light Bend right the guys that do

00:27:59,680 --> 00:28:06,100
Scala all right so our first toolkit I

00:28:04,690 --> 00:28:07,930
mentioned we'll look at these three

00:28:06,100 --> 00:28:11,590
things next akka vertex and in spring

00:28:07,930 --> 00:28:13,060
reactor akka is it's called a toolkit

00:28:11,590 --> 00:28:14,650
for highly resilient scalable

00:28:13,060 --> 00:28:17,350
applications I'm gonna give you one

00:28:14,650 --> 00:28:19,090
disclaimer here so I first saw akka at a

00:28:17,350 --> 00:28:20,460
conference very similar to this sat down

00:28:19,090 --> 00:28:21,929
and watch this talk on akka

00:28:20,460 --> 00:28:24,409
my immediate impression was wow I never

00:28:21,929 --> 00:28:26,700
want to build an application using that

00:28:24,409 --> 00:28:28,830
then when I began doing some research

00:28:26,700 --> 00:28:30,509
for this talk I started playing with

00:28:28,830 --> 00:28:33,990
akka and you know what akka is pretty

00:28:30,509 --> 00:28:35,999
cool so the moral that story is you know

00:28:33,990 --> 00:28:38,549
even if the guy up front doesn't do a

00:28:35,999 --> 00:28:39,840
good job of talking to the technology go

00:28:38,549 --> 00:28:41,999
get your hands dirty right that's why

00:28:39,840 --> 00:28:43,860
we're looking at code you know I might

00:28:41,999 --> 00:28:45,059
not come into this is good stuff but you

00:28:43,860 --> 00:28:46,559
can change your mind by going by you

00:28:45,059 --> 00:28:47,970
know downloading this and firing up this

00:28:46,559 --> 00:28:49,409
is all open source you know you can get

00:28:47,970 --> 00:28:51,629
going really easy and there's another

00:28:49,409 --> 00:28:55,679
nice tutorial on tutorials on Jaquez

00:28:51,629 --> 00:28:58,740
website so the way that akka works is it

00:28:55,679 --> 00:29:01,440
uses the actor model and actors talk to

00:28:58,740 --> 00:29:04,619
other actors by sending messages to

00:29:01,440 --> 00:29:05,909
other actors mail boxes we don't we

00:29:04,619 --> 00:29:07,679
don't pass anything by reference

00:29:05,909 --> 00:29:09,749
everything gets passed completely in a

00:29:07,679 --> 00:29:11,730
message right that message gets received

00:29:09,749 --> 00:29:13,440
some sort of action gets taken and then

00:29:11,730 --> 00:29:16,019
another message gets sent somewhere else

00:29:13,440 --> 00:29:18,179
there completely there's no state right

00:29:16,019 --> 00:29:19,889
everything happens within the own actor

00:29:18,179 --> 00:29:22,320
which gets us back to how do we scale

00:29:19,889 --> 00:29:24,269
you know how do we how we resilient

00:29:22,320 --> 00:29:25,499
right we spin up more and more actors

00:29:24,269 --> 00:29:26,999
you know they can be in different

00:29:25,499 --> 00:29:28,950
different data centers they can be

00:29:26,999 --> 00:29:30,690
across you know different machines on so

00:29:28,950 --> 00:29:33,990
it becomes very easy to scale it's also

00:29:30,690 --> 00:29:35,669
very easy to bring those back in there

00:29:33,990 --> 00:29:37,830
is one sort of parent that makes this

00:29:35,669 --> 00:29:40,080
map under the covers of all the actors

00:29:37,830 --> 00:29:41,369
in the system and it uses URLs to talk

00:29:40,080 --> 00:29:43,139
to them right so a layer of indirection

00:29:41,369 --> 00:29:44,700
which means this year all could point to

00:29:43,139 --> 00:29:46,590
multiple different different things

00:29:44,700 --> 00:29:48,629
right we could we can scale out behind

00:29:46,590 --> 00:29:50,429
these internal URLs you don't have to

00:29:48,629 --> 00:29:55,850
manage this acha itself as the framework

00:29:50,429 --> 00:29:55,850
does that for you what it looks like is

00:29:56,809 --> 00:30:03,240
my next IntelliJ thing so the way that

00:30:00,240 --> 00:30:05,490
that awkward anybody use Scala they may

00:30:03,240 --> 00:30:07,860
have Scala fan a couple Scala fans okay

00:30:05,490 --> 00:30:10,139
so I don't know Scala what am I good one

00:30:07,860 --> 00:30:12,840
of my buddies had work and colleagues

00:30:10,139 --> 00:30:14,549
like Scala watt and so he says if this

00:30:12,840 --> 00:30:16,320
the way that akka has written he thinks

00:30:14,549 --> 00:30:18,990
is very intuitive coming from a scholar

00:30:16,320 --> 00:30:20,850
mindset or a scholar based approach it's

00:30:18,990 --> 00:30:22,830
it's not hard to get to in Java either

00:30:20,850 --> 00:30:25,529
cuz I did I did the Java example

00:30:22,830 --> 00:30:27,269
muscala but if this is just a little

00:30:25,529 --> 00:30:29,519
hello world example it's pretty simple

00:30:27,269 --> 00:30:31,860
and we had these things these actor

00:30:29,519 --> 00:30:38,340
references right you know printer actor

00:30:31,860 --> 00:30:40,140
and we have a howdy actor and what these

00:30:38,340 --> 00:30:42,870
classes do is it this is a class called

00:30:40,140 --> 00:30:45,990
it has a class called greeting right and

00:30:42,870 --> 00:30:49,710
it just takes this class it receives a

00:30:45,990 --> 00:30:55,799
class and you use the class type to let

00:30:49,710 --> 00:30:59,309
it know what to do so this takes a

00:30:55,799 --> 00:31:00,690
receive a who to greet class so instead

00:30:59,309 --> 00:31:02,760
of just passing a message tower or

00:31:00,690 --> 00:31:06,779
calling a method you use the object type

00:31:02,760 --> 00:31:07,350
to send in these messages ten minute

00:31:06,779 --> 00:31:09,960
mark okay

00:31:07,350 --> 00:31:17,010
okay they're really quick let me fire up

00:31:09,960 --> 00:31:21,080
my debug this test will stop oh great I

00:31:17,010 --> 00:31:24,630
take an error okay anyway that is the

00:31:21,080 --> 00:31:26,909
basic akka example the thing to remember

00:31:24,630 --> 00:31:28,110
about akka is all message based and it

00:31:26,909 --> 00:31:29,880
handles behind the scenes this

00:31:28,110 --> 00:31:31,529
abstraction and it makes it really easy

00:31:29,880 --> 00:31:32,970
for you scale up and scale down it's

00:31:31,529 --> 00:31:34,970
also pretty easy to get going with and

00:31:32,970 --> 00:31:37,289
pretty and pretty quick

00:31:34,970 --> 00:31:41,220
alright spring web bus is splitting

00:31:37,289 --> 00:31:42,990
spring web plus reactor spring web I

00:31:41,220 --> 00:31:44,010
probably built a website here in the

00:31:42,990 --> 00:31:46,830
Java space you've probably built a

00:31:44,010 --> 00:31:48,210
website using spring MVC before spring

00:31:46,830 --> 00:31:52,019
web is you know obviously their their

00:31:48,210 --> 00:31:53,549
web toolkit they jumped into the

00:31:52,019 --> 00:31:55,049
reactive space a few years ago they say

00:31:53,549 --> 00:31:57,480
they were going to make the user

00:31:55,049 --> 00:31:58,919
interface a lot easier to use I don't

00:31:57,480 --> 00:32:01,409
think it really got there they ended up

00:31:58,919 --> 00:32:03,690
changing some of the names so instead of

00:32:01,409 --> 00:32:06,210
a single they have a mono and instead of

00:32:03,690 --> 00:32:09,059
a floral they have a flux now it's

00:32:06,210 --> 00:32:10,799
almost exactly like our X Java so it's

00:32:09,059 --> 00:32:14,460
basically the same thing it's mostly

00:32:10,799 --> 00:32:16,830
built into the regular spring website so

00:32:14,460 --> 00:32:19,279
instead of so you would just get back a

00:32:16,830 --> 00:32:21,929
client response of an observable type

00:32:19,279 --> 00:32:22,980
but you would otherwise it's very

00:32:21,929 --> 00:32:26,370
similar for the way you would do

00:32:22,980 --> 00:32:28,649
traditional spring programming I'm gonna

00:32:26,370 --> 00:32:30,179
go to eclipse fer tax right so my vertex

00:32:28,649 --> 00:32:31,050
stickers up here back here will pass

00:32:30,179 --> 00:32:33,030
around vertex

00:32:31,050 --> 00:32:34,800
I'm gonna save one for the one for the

00:32:33,030 --> 00:32:36,660
you you asked me a question so I'm gonna

00:32:34,800 --> 00:32:38,100
make sure you to sticker everybody else

00:32:36,660 --> 00:32:39,420
you got and your stickers back rats and

00:32:38,100 --> 00:32:42,270
stickers and it's more fun if you guys

00:32:39,420 --> 00:32:43,860
want some of these so the vertex is

00:32:42,270 --> 00:32:45,750
based on a single fronted event loop

00:32:43,860 --> 00:32:47,190
does it sound like nodejs that's because

00:32:45,750 --> 00:32:50,040
was inspired by nodejs

00:32:47,190 --> 00:32:52,350
the guy that wrote this wrote Hornet Q

00:32:50,040 --> 00:32:55,890
which was the the JMS message broker

00:32:52,350 --> 00:32:57,990
inside of J of JBoss EAP or JBoss

00:32:55,890 --> 00:32:59,970
application server it was the world's

00:32:57,990 --> 00:33:02,130
fastest JMS message broker it was based

00:32:59,970 --> 00:33:04,590
heavily on something called Neddie

00:33:02,130 --> 00:33:06,300
Neddie will pop up a lot this is also

00:33:04,590 --> 00:33:07,710
inside of spring web fox you'll see it

00:33:06,300 --> 00:33:10,410
in a lot of the reactive space it's

00:33:07,710 --> 00:33:11,760
super super fast low-level IO Network if

00:33:10,410 --> 00:33:14,070
you've ever used Twitter or done

00:33:11,760 --> 00:33:15,809
anything from with Apple you've used

00:33:14,070 --> 00:33:19,559
nettie it's it forms the basis of the

00:33:15,809 --> 00:33:21,809
iTunes and your App Store but being a

00:33:19,559 --> 00:33:23,010
message based guy when he created Vern

00:33:21,809 --> 00:33:24,750
actually took the concept of a single

00:33:23,010 --> 00:33:27,059
init event loop to build websites and

00:33:24,750 --> 00:33:28,500
marry it onto it an event bus right not

00:33:27,059 --> 00:33:30,150
surprising from a guy that did Road

00:33:28,500 --> 00:33:32,250
event buses right or a road message

00:33:30,150 --> 00:33:33,390
brokers now this isn't like the kind of

00:33:32,250 --> 00:33:35,010
thing we have just in a persistence I

00:33:33,390 --> 00:33:36,780
think it's very simple in the in a

00:33:35,010 --> 00:33:39,780
vertex world everything is what we call

00:33:36,780 --> 00:33:41,580
a vertical and a vertical kick and it

00:33:39,780 --> 00:33:43,530
has its own own event bus you can you

00:33:41,580 --> 00:33:47,730
can pass messages off the event bus and

00:33:43,530 --> 00:33:50,370
and pass your compute over to a

00:33:47,730 --> 00:33:54,090
different vertical I've got a app

00:33:50,370 --> 00:33:58,380
running right now and this is a public

00:33:54,090 --> 00:34:00,300
example and this I've got this this

00:33:58,380 --> 00:34:01,710
example you can get a link to this one

00:34:00,300 --> 00:34:03,030
thing about vertex it's super

00:34:01,710 --> 00:34:05,309
lightweight and this is actually

00:34:03,030 --> 00:34:07,679
currently pretty heavy it's using 275

00:34:05,309 --> 00:34:09,899
Meg's but I'm running nine instances and

00:34:07,679 --> 00:34:13,169
a database here so all that memory is

00:34:09,899 --> 00:34:14,909
nine instances of vertex the code for

00:34:13,169 --> 00:34:16,409
this this is got stock trading

00:34:14,909 --> 00:34:18,869
application it's not a real completely

00:34:16,409 --> 00:34:21,030
fake stock trading application but we

00:34:18,869 --> 00:34:25,520
are sending trades the way this stuff

00:34:21,030 --> 00:34:25,520
ends up looking in a vertex world

00:34:27,429 --> 00:34:30,700
so vertex has a number of different ways

00:34:29,260 --> 00:34:32,079
to help you get through callbacks one

00:34:30,700 --> 00:34:33,789
you can do callbacks right this is kind

00:34:32,079 --> 00:34:37,119
of traditional looking way to do

00:34:33,789 --> 00:34:39,039
callbacks so we we have a request stream

00:34:37,119 --> 00:34:42,639
right we're returning the flowable right

00:34:39,039 --> 00:34:44,409
which is an observable subtype and then

00:34:42,639 --> 00:34:46,419
we're subscribing to that here right so

00:34:44,409 --> 00:34:48,309
a lot of rx pieces are built right into

00:34:46,419 --> 00:34:51,329
vertex to make it very easy for you to

00:34:48,309 --> 00:34:51,329
use those kind of concepts

00:34:58,190 --> 00:35:03,400
and then rx Java concepts like singles

00:35:00,770 --> 00:35:08,809
are built right in so you can use these

00:35:03,400 --> 00:35:10,369
and you can chain together calls so we

00:35:08,809 --> 00:35:11,930
can call multiple different services so

00:35:10,369 --> 00:35:13,160
we can like call shares we can get the

00:35:11,930 --> 00:35:14,480
price of a share we can find out if

00:35:13,160 --> 00:35:16,099
they're in any orders we can grab those

00:35:14,480 --> 00:35:18,049
and zip those together we can do this

00:35:16,099 --> 00:35:19,609
really easily right so you think about

00:35:18,049 --> 00:35:20,780
it especially in a micro-services world

00:35:19,609 --> 00:35:22,190
where you're calling multiple different

00:35:20,780 --> 00:35:23,630
services like the Netflix front end if

00:35:22,190 --> 00:35:25,250
you're calling you know a couple dozen

00:35:23,630 --> 00:35:26,599
services this makes it really easy to

00:35:25,250 --> 00:35:28,430
change those together and perform your

00:35:26,599 --> 00:35:32,349
operations right there inside of your

00:35:28,430 --> 00:35:32,349
micro service or inside of your service

00:35:34,960 --> 00:35:38,619
service and then

00:35:41,700 --> 00:35:45,990
five minutes and then the other piece

00:35:43,920 --> 00:35:47,880
about vertex also heavily message-based

00:35:45,990 --> 00:35:51,720
so when we said when we send messages

00:35:47,880 --> 00:35:54,329
across our event bus we use JSON JSON is

00:35:51,720 --> 00:35:56,339
a first-class citizen inside of vertex

00:35:54,329 --> 00:35:57,750
and all messages recommended you don't

00:35:56,339 --> 00:35:59,670
have to do this but it's recommended all

00:35:57,750 --> 00:36:01,619
your messages get passed as JSON which

00:35:59,670 --> 00:36:03,569
is nice it's language agnostic you can

00:36:01,619 --> 00:36:04,980
attend you can attach to the event bus

00:36:03,569 --> 00:36:06,869
directly from like your web browser

00:36:04,980 --> 00:36:08,460
using JavaScript right so you can send

00:36:06,869 --> 00:36:09,750
them you can send a JSON message to the

00:36:08,460 --> 00:36:11,430
event bus you can read from the event

00:36:09,750 --> 00:36:12,660
bus and that's actually how we are

00:36:11,430 --> 00:36:14,099
getting in this example how we're

00:36:12,660 --> 00:36:15,960
getting these numbers right we're not

00:36:14,099 --> 00:36:17,849
we're talking natively from JavaScript

00:36:15,960 --> 00:36:19,380
right to this vertex event bus and we're

00:36:17,849 --> 00:36:20,849
using JSON for our message payloads

00:36:19,380 --> 00:36:22,079
which is this key right because you want

00:36:20,849 --> 00:36:23,730
to be you want to have to send message

00:36:22,079 --> 00:36:25,170
you want to pass messages and we don't

00:36:23,730 --> 00:36:26,640
want to pass something by reference

00:36:25,170 --> 00:36:30,200
right we're passing something by value

00:36:26,640 --> 00:36:30,200
in this case JSON text

00:36:34,090 --> 00:36:40,160
JSON object right and so JSON objects

00:36:36,440 --> 00:36:41,690
become really what you work with another

00:36:40,160 --> 00:36:43,400
another thing I didn't mention vertexes

00:36:41,690 --> 00:36:45,680
polyglot if you don't like Java there

00:36:43,400 --> 00:36:47,480
are JavaScript Ruby other

00:36:45,680 --> 00:36:49,340
implementations and this team has done

00:36:47,480 --> 00:36:50,780
has done a lot of work to make it feel

00:36:49,340 --> 00:36:51,980
native so if you're using the rate if

00:36:50,780 --> 00:36:53,120
you're using the JavaScript or the Ruby

00:36:51,980 --> 00:36:55,610
one it actually feels like you're using

00:36:53,120 --> 00:36:57,170
Java or JavaScript or Ruby but it

00:36:55,610 --> 00:37:00,260
doesn't feel graphs it in like a lot of

00:36:57,170 --> 00:37:01,210
say JRuby or or other things links in

00:37:00,260 --> 00:37:03,920
here

00:37:01,210 --> 00:37:06,380
this pro this book I highly recommend

00:37:03,920 --> 00:37:09,140
great book written by Ben Christensen

00:37:06,380 --> 00:37:11,900
and Thomas Newark wits they're the guys

00:37:09,140 --> 00:37:13,460
that wrote rx Java Ben Christensen also

00:37:11,900 --> 00:37:18,350
has some really good talks that you can

00:37:13,460 --> 00:37:23,210
watch on that this link is hot with

00:37:18,350 --> 00:37:24,380
go-to 2013 on YouTube akka I mentioned

00:37:23,210 --> 00:37:26,420
these are this is the guys for light

00:37:24,380 --> 00:37:28,130
Bend this book is pretty good and these

00:37:26,420 --> 00:37:30,380
were these guys really waived you know

00:37:28,130 --> 00:37:34,520
we're banner carriers for the reactive

00:37:30,380 --> 00:37:36,860
movement and Jonas paneer who is the CEO

00:37:34,520 --> 00:37:38,990
I guess so a lot she's CTO he has a

00:37:36,860 --> 00:37:42,260
number of good talks on this topic as

00:37:38,990 --> 00:37:43,400
well spring web flux even and then and a

00:37:42,260 --> 00:37:44,840
lot more than I think stuff with these

00:37:43,400 --> 00:37:46,190
slides together on they're starting to

00:37:44,840 --> 00:37:48,410
talk about this a lot more of the spring

00:37:46,190 --> 00:37:50,330
world vertex you can download both of

00:37:48,410 --> 00:37:52,430
these books from developers Red Hat comm

00:37:50,330 --> 00:37:53,660
those are both free really nice I love

00:37:52,430 --> 00:37:56,000
the title a gentle guide to a

00:37:53,660 --> 00:37:57,290
synchronous programming right there's

00:37:56,000 --> 00:37:58,550
also lots of different tutorials

00:37:57,290 --> 00:38:00,260
including the one that I was just

00:37:58,550 --> 00:38:02,990
showing here this this trader vertical

00:38:00,260 --> 00:38:05,030
that I was that I'm running currently on

00:38:02,990 --> 00:38:06,920
an open shift which is our kubernetes

00:38:05,030 --> 00:38:08,390
distro on my laptop you don't have to

00:38:06,920 --> 00:38:11,930
run it on Cabrillo you can just respond

00:38:08,390 --> 00:38:14,680
your laptop to write thank you very much

00:38:11,930 --> 00:38:14,680
gonna pull that off

00:38:15,690 --> 00:38:24,820
three minutes anybody have questions was

00:38:21,370 --> 00:38:26,200
that too fast yeah yeah so how does

00:38:24,820 --> 00:38:30,190
vertex compare to it um

00:38:26,200 --> 00:38:31,960
so reactive in general so though uses

00:38:30,190 --> 00:38:33,790
that callback model right so you know

00:38:31,960 --> 00:38:35,980
when a web request comes in to an

00:38:33,790 --> 00:38:38,140
endpoint being serviced by node it grabs

00:38:35,980 --> 00:38:39,370
a request and then sends the work off to

00:38:38,140 --> 00:38:41,620
another thread and then continues

00:38:39,370 --> 00:38:44,170
listening right vertex works very much

00:38:41,620 --> 00:38:45,310
the same way and that's a reactive

00:38:44,170 --> 00:38:46,270
method of programming so you think by

00:38:45,310 --> 00:38:48,910
the way we would do things with servlets

00:38:46,270 --> 00:38:51,820
or traditional HTTP calls right you know

00:38:48,910 --> 00:38:53,410
if you're programming Java servlet call

00:38:51,820 --> 00:38:55,270
comes in Java servlet connects to

00:38:53,410 --> 00:38:57,040
database or Leena grabs a database

00:38:55,270 --> 00:38:58,690
connection somewhere performs a query

00:38:57,040 --> 00:39:00,400
gets the query back on Marshalls that

00:38:58,690 --> 00:39:01,840
turns into an object decorate you with

00:39:00,400 --> 00:39:04,090
some other stuff and then sends the call

00:39:01,840 --> 00:39:05,800
back right we're just fundamentally

00:39:04,090 --> 00:39:08,140
different than like a vertex event loop

00:39:05,800 --> 00:39:11,440
or very similar in no Jeff's world call

00:39:08,140 --> 00:39:13,480
comes in vertex send something to the

00:39:11,440 --> 00:39:15,210
event bus which contains a handler

00:39:13,480 --> 00:39:23,860
saying what to do when it comes back

00:39:15,210 --> 00:39:27,520
right so the question was are callbacks

00:39:23,860 --> 00:39:29,860
the same as promises no they're not the

00:39:27,520 --> 00:39:31,990
same as promises there's another piece

00:39:29,860 --> 00:39:34,210
to there's a future that's a vertex

00:39:31,990 --> 00:39:36,850
future it's different from a Java future

00:39:34,210 --> 00:39:39,580
a Java feature blocks a vertex feature

00:39:36,850 --> 00:39:41,910
does not block at all and so in the

00:39:39,580 --> 00:39:49,150
vertex row we use vertex futures

00:39:41,910 --> 00:39:50,710
promises are so callbacks don't have to

00:39:49,150 --> 00:39:53,290
be any particular kind of object right

00:39:50,710 --> 00:39:54,790
it's just a piece of code largely where

00:39:53,290 --> 00:39:56,380
as a promise is going to return

00:39:54,790 --> 00:39:58,300
something in the future but it's a

00:39:56,380 --> 00:39:59,500
concert number on top of that and the

00:39:58,300 --> 00:40:01,450
notion about the callbacks are the

00:39:59,500 --> 00:40:03,160
lowest level the lowest easiest way of

00:40:01,450 --> 00:40:04,750
doing that and you still use it's fine

00:40:03,160 --> 00:40:05,890
to use them right it's just you don't

00:40:04,750 --> 00:40:09,120
want to end up with too many nested

00:40:05,890 --> 00:40:09,120
callbacks when it becomes problematic

00:40:09,480 --> 00:40:17,190
not quite the same yeah yeah any other

00:40:14,070 --> 00:40:19,700
questions alright thanks and enjoy the

00:40:17,190 --> 00:40:19,700

YouTube URL: https://www.youtube.com/watch?v=7d81337JNA0


