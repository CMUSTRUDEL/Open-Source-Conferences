Title: Using Traefik as Kubernetes Ingress Controller
Publication date: 2019-02-22
Playlist: DevConfUS 2018
Description: 
	This talk will introduce Traefik, the open source reverse-proxy/load-balancer, which can be used as an Ingress Controller in your container infrastructure. Using an Ingress controller allows you to configure routing to services based on host name, port, and path rather than exposing them directly.

Traefik is an Ingress Controller which interfaces to backends such as Kubernetes, Docker, Mesos, Consul allowing dynamic updating of the routing configuration without service loss.

We will look at what is a reverse-proxy, an Ingress Controller and Traefik through demonstration and discussion.
Captions: 
	00:00:08,260 --> 00:00:25,460
[Music]

00:00:23,619 --> 00:00:28,970
hi everyone

00:00:25,460 --> 00:00:31,360
we now have Gerald crows talking about

00:00:28,970 --> 00:00:36,200
using traffic as Cuban it is a

00:00:31,360 --> 00:00:39,050
compressed controller thank you

00:00:36,200 --> 00:00:41,560
just before I start I have stickers if

00:00:39,050 --> 00:00:45,740
you want cool looking stickers for your

00:00:41,560 --> 00:00:47,870
computers so first of all thanks for

00:00:45,740 --> 00:00:50,480
being here with me despite the fact that

00:00:47,870 --> 00:00:51,980
it's getting late

00:00:50,480 --> 00:00:54,410
it's always nice to have the opportunity

00:00:51,980 --> 00:00:56,750
to show developers how much fun you can

00:00:54,410 --> 00:00:59,930
have how much an expected fun you can

00:00:56,750 --> 00:01:01,910
have with a reverse proxy and I know

00:00:59,930 --> 00:01:04,549
that it is customary to let speakers

00:01:01,910 --> 00:01:06,409
talk about their accomplishments even

00:01:04,549 --> 00:01:08,870
though nobody really cares about them

00:01:06,409 --> 00:01:11,510
and good news is that I don't have

00:01:08,870 --> 00:01:13,760
anything that literally qualifies itself

00:01:11,510 --> 00:01:19,130
as an accomplishment so it'll be over

00:01:13,760 --> 00:01:22,729
soon so my name is Gerald cows I'm a

00:01:19,130 --> 00:01:27,500
senior developer at containers I publish

00:01:22,729 --> 00:01:30,590
stuff on medium dev to Twitter once in a

00:01:27,500 --> 00:01:33,560
year so if you like the presentation you

00:01:30,590 --> 00:01:36,020
can follow me there I do my best

00:01:33,560 --> 00:01:38,150
right comprehensive articles different

00:01:36,020 --> 00:01:41,780
topics

00:01:38,150 --> 00:01:44,300
note that one of the latest article on

00:01:41,780 --> 00:01:47,360
medium is more or less what we will see

00:01:44,300 --> 00:01:50,590
today here so you might want to check it

00:01:47,360 --> 00:01:54,350
out later it's a 10-minute read so yeah

00:01:50,590 --> 00:01:57,080
before working for containers I used to

00:01:54,350 --> 00:02:01,160
have a more traditional job as known as

00:01:57,080 --> 00:02:03,710
not working on an open source project I

00:02:01,160 --> 00:02:05,750
worked for an insurance company where I

00:02:03,710 --> 00:02:08,180
led the transition from a legacy

00:02:05,750 --> 00:02:12,860
monolith to a micro-services

00:02:08,180 --> 00:02:15,370
architecture with success the project

00:02:12,860 --> 00:02:18,920
involved 80 people using our

00:02:15,370 --> 00:02:20,780
ever-evolving architecture and needed a

00:02:18,920 --> 00:02:23,780
little more than two years of

00:02:20,780 --> 00:02:27,220
development to reach the point where we

00:02:23,780 --> 00:02:30,860
were somehow satisfied with the result

00:02:27,220 --> 00:02:33,410
to give you some numbers we ended up

00:02:30,860 --> 00:02:37,960
with a cluster of 40 machines running

00:02:33,410 --> 00:02:41,690
less than a thousand microservices

00:02:37,960 --> 00:02:45,100
40 machines doesn't sound that big but

00:02:41,690 --> 00:02:48,230
it represented five terabytes of RAM and

00:02:45,100 --> 00:02:53,510
320 processors which all of a sudden

00:02:48,230 --> 00:02:55,700
looks a little bigger about containers

00:02:53,510 --> 00:02:59,120
which is my current company we deliver

00:02:55,700 --> 00:03:02,209
traffic in the sense that we actively

00:02:59,120 --> 00:03:07,010
develop the product and we do all the

00:03:02,209 --> 00:03:11,120
tedious work sorting issues prioritizing

00:03:07,010 --> 00:03:14,330
features writing documentation who loves

00:03:11,120 --> 00:03:18,800
documentation it takes a lot of our time

00:03:14,330 --> 00:03:20,330
but it's quite fun because working on

00:03:18,800 --> 00:03:23,660
this project is a fantastic adventure

00:03:20,330 --> 00:03:26,970
the important facts we hire so feel free

00:03:23,660 --> 00:03:30,720
to check out the available position

00:03:26,970 --> 00:03:37,470
and to literally check out you might see

00:03:30,720 --> 00:03:41,010
that later anyways sit today I'm here to

00:03:37,470 --> 00:03:44,880
talk about traffic modern reverse proxy

00:03:41,010 --> 00:03:48,420
smash load balancer / cloud native edge

00:03:44,880 --> 00:03:50,790
router to use trendy vocabulary if

00:03:48,420 --> 00:03:51,750
you've never heard about traffic a

00:03:50,790 --> 00:03:55,290
little cap shop

00:03:51,750 --> 00:03:58,440
it's a popular open source project with

00:03:55,290 --> 00:04:02,340
to this day more than 280 contributors

00:03:58,440 --> 00:04:05,550
it might be 300 yes it's 300 today we

00:04:02,340 --> 00:04:07,380
have more than 150 million actually a

00:04:05,550 --> 00:04:10,470
hundred and sixteen million downloads

00:04:07,380 --> 00:04:13,950
and a little more than seventeen

00:04:10,470 --> 00:04:16,680
thousand stars on github so right after

00:04:13,950 --> 00:04:19,190
the presentation and nothing prevents

00:04:16,680 --> 00:04:22,920
you from using it or making it your own

00:04:19,190 --> 00:04:25,290
by bringing new features with full

00:04:22,920 --> 00:04:29,340
requests it's really an open source

00:04:25,290 --> 00:04:31,860
project in the unlikely event that you

00:04:29,340 --> 00:04:34,410
stumble into a bug note that there is a

00:04:31,860 --> 00:04:37,290
helpful command line to autofill a bug

00:04:34,410 --> 00:04:39,870
report with your environment and

00:04:37,290 --> 00:04:42,300
configuration file so it will give us

00:04:39,870 --> 00:04:42,450
all the information we need to help you

00:04:42,300 --> 00:04:44,930
out

00:04:42,450 --> 00:04:47,330
[Music]

00:04:44,930 --> 00:04:50,470
now that I'm done with the formalities

00:04:47,330 --> 00:04:54,590
it's time we talk about traffic a

00:04:50,470 --> 00:04:57,620
reverse proxy okay nothing that sounds

00:04:54,590 --> 00:05:00,590
too exciting right even two years ago

00:04:57,620 --> 00:05:02,150
when the project was born you probably

00:05:00,590 --> 00:05:05,090
know that there were many available

00:05:02,150 --> 00:05:08,300
production proven reverse proxies

00:05:05,090 --> 00:05:11,780
available so you could legitimately ask

00:05:08,300 --> 00:05:16,550
the question why why did you bring us

00:05:11,780 --> 00:05:19,280
yet another reverse proxy why and the

00:05:16,550 --> 00:05:22,400
answer lies in the same place the

00:05:19,280 --> 00:05:25,729
product was born it was a regular office

00:05:22,400 --> 00:05:28,010
with software architects on the ready to

00:05:25,729 --> 00:05:32,210
transform business challenges into

00:05:28,010 --> 00:05:33,830
regular software bugs and at the time we

00:05:32,210 --> 00:05:35,260
were involved in passionate debates

00:05:33,830 --> 00:05:39,139
around micro-services

00:05:35,260 --> 00:05:43,130
to be honest at the time we weren't

00:05:39,139 --> 00:05:46,610
aware of the term micro-services we knew

00:05:43,130 --> 00:05:50,210
that to survive we had to transform this

00:05:46,610 --> 00:05:52,250
sluggish monolith that had become this

00:05:50,210 --> 00:05:55,400
software contraption nobody wanted to

00:05:52,250 --> 00:05:58,520
work on anymore so we had to go from

00:05:55,400 --> 00:06:03,139
point A the the big ball of mud on the

00:05:58,520 --> 00:06:05,840
left to Point C the neat ecosystem with

00:06:03,139 --> 00:06:09,680
empowered components that would be aware

00:06:05,840 --> 00:06:12,860
of their responsibilities so the premise

00:06:09,680 --> 00:06:15,530
of this new world were appealing it was

00:06:12,860 --> 00:06:17,780
scalability for deployment and

00:06:15,530 --> 00:06:21,330
development

00:06:17,780 --> 00:06:23,520
simplicity security efficiency and the

00:06:21,330 --> 00:06:26,810
more we studied this architecture the

00:06:23,520 --> 00:06:29,430
more we realized that we weren't alone

00:06:26,810 --> 00:06:31,949
the vanguard of people trying to keep

00:06:29,430 --> 00:06:34,349
their sanity in an ever-evolving world

00:06:31,949 --> 00:06:37,259
was already there and some small

00:06:34,349 --> 00:06:39,659
companies like Netflix had already

00:06:37,259 --> 00:06:42,180
worked on micro services and they had

00:06:39,659 --> 00:06:46,770
open sourced frameworks to make it

00:06:42,180 --> 00:06:49,259
happen but unfortunately at first sight

00:06:46,770 --> 00:06:52,560
all these components seemed to go

00:06:49,259 --> 00:06:54,270
against the simplicity principle all of

00:06:52,560 --> 00:06:57,659
a sudden we were facing multiple

00:06:54,270 --> 00:07:00,120
components and we were ready to deal

00:06:57,659 --> 00:07:03,569
with them so our decision at the time

00:07:00,120 --> 00:07:07,050
was to stay clear of these at least

00:07:03,569 --> 00:07:09,449
until their necessity was obvious so

00:07:07,050 --> 00:07:11,279
little by little our niche

00:07:09,449 --> 00:07:14,310
infrastructure have started to welcome

00:07:11,279 --> 00:07:17,039
additional elements to decide which

00:07:14,310 --> 00:07:19,770
service would be hosted on which server

00:07:17,039 --> 00:07:22,889
we used an Orchestrator which was at the

00:07:19,770 --> 00:07:24,599
time Martha do you know where the

00:07:22,889 --> 00:07:28,710
service is where we use a service

00:07:24,599 --> 00:07:30,990
registry your ek to make the service

00:07:28,710 --> 00:07:32,969
callable in HTTP we use the reverse

00:07:30,990 --> 00:07:35,419
proxy that knew how to configure itself

00:07:32,969 --> 00:07:39,149
from the service registry that was Zoo

00:07:35,419 --> 00:07:41,909
to customize further the URLs to our

00:07:39,149 --> 00:07:46,050
micro services we used the front reverse

00:07:41,909 --> 00:07:48,810
proxy HR proxy to configure this reverse

00:07:46,050 --> 00:07:51,389
proxy we wrote custom scripts

00:07:48,810 --> 00:07:53,130
to know when to rewrite the mm line

00:07:51,389 --> 00:07:55,980
configuration file we had to define

00:07:53,130 --> 00:07:59,250
timers Watchers to detect when the

00:07:55,980 --> 00:08:01,440
services were deployed or removed to

00:07:59,250 --> 00:08:04,790
ease the developer's life we wrote Java

00:08:01,440 --> 00:08:06,960
framework that was responsible for

00:08:04,790 --> 00:08:09,990
registering the services in the service

00:08:06,960 --> 00:08:14,610
registry and because there is a course

00:08:09,990 --> 00:08:16,830
life beyond Java we wrote wrappers to

00:08:14,610 --> 00:08:24,900
enable developers to use other languages

00:08:16,830 --> 00:08:28,620
like PHP Python R or others so in the

00:08:24,900 --> 00:08:30,780
end it was a well-oiled machine but not

00:08:28,620 --> 00:08:33,089
flawless we had to struggle with

00:08:30,780 --> 00:08:34,740
synchronization problems with between

00:08:33,089 --> 00:08:37,560
the service registry and the

00:08:34,740 --> 00:08:39,599
orchestrator we had to fight against the

00:08:37,560 --> 00:08:43,140
delay of the multiple refresh that were

00:08:39,599 --> 00:08:45,000
involved here and there we had to ensure

00:08:43,140 --> 00:08:48,690
that no connection would be lost during

00:08:45,000 --> 00:08:54,089
an update and then arrived with other

00:08:48,690 --> 00:08:57,120
issues health checks readiness so it did

00:08:54,089 --> 00:09:00,839
the job but we kept thinking there had

00:08:57,120 --> 00:09:02,760
to be a better way a way that would get

00:09:00,839 --> 00:09:05,550
rid of the multiple configuration file

00:09:02,760 --> 00:09:08,790
that were spread across the system that

00:09:05,550 --> 00:09:11,970
would get rid of all the glue components

00:09:08,790 --> 00:09:14,440
that would replace all the tooling and

00:09:11,970 --> 00:09:18,420
unfortunately there were none

00:09:14,440 --> 00:09:21,610
so luckily for us someone didn't give up

00:09:18,420 --> 00:09:24,550
any we could do better and he started to

00:09:21,610 --> 00:09:26,740
work on a very small NGO script that

00:09:24,550 --> 00:09:31,149
would answer the only important question

00:09:26,740 --> 00:09:36,040
that had yet not found its answer where

00:09:31,149 --> 00:09:38,230
is my service because in the end the all

00:09:36,040 --> 00:09:41,500
the tooling involved around micro

00:09:38,230 --> 00:09:44,259
services are dedicated to this simple

00:09:41,500 --> 00:09:48,370
question maybe you can find Charlie

00:09:44,259 --> 00:09:52,689
while I talk anyway the reverse proxy

00:09:48,370 --> 00:09:54,040
job this edge router job is just this to

00:09:52,689 --> 00:10:00,310
route the request to their first

00:09:54,040 --> 00:10:04,750
founding available server so where is my

00:10:00,310 --> 00:10:07,300
service the one incredible thing thing

00:10:04,750 --> 00:10:09,399
when you think about it is that all the

00:10:07,300 --> 00:10:13,060
components to answer that specific

00:10:09,399 --> 00:10:14,860
question are already there one of the

00:10:13,060 --> 00:10:16,959
great advantage of micro services is

00:10:14,860 --> 00:10:19,240
that you can look at your service as a

00:10:16,959 --> 00:10:22,600
black box that does some job on its own

00:10:19,240 --> 00:10:25,139
and since it is it's only this package

00:10:22,600 --> 00:10:28,930
to be deployed anywhere anytime on

00:10:25,139 --> 00:10:31,540
premise on your infrastructure or on the

00:10:28,930 --> 00:10:33,730
cloud as a container and to handle this

00:10:31,540 --> 00:10:36,430
serious deployment tasks we have many

00:10:33,730 --> 00:10:39,689
solutions at our disposal one of them

00:10:36,430 --> 00:10:43,329
being orchestrators like uber Nettie's

00:10:39,689 --> 00:10:47,040
but sworn marathon service fabric Amazon

00:10:43,329 --> 00:10:50,649
and so forth these tools responsible for

00:10:47,040 --> 00:10:53,050
deploying your service to the to the

00:10:50,649 --> 00:10:55,569
right place they already know the answer

00:10:53,050 --> 00:10:57,300
to that question your service is there I

00:10:55,569 --> 00:11:00,090
deployed it

00:10:57,300 --> 00:11:02,940
so in the end why would any of us ever

00:11:00,090 --> 00:11:04,800
write a configuration file that is the

00:11:02,940 --> 00:11:09,930
translation of information we already

00:11:04,800 --> 00:11:12,930
have because our orchestrators no

00:11:09,930 --> 00:11:15,630
services by their names only and that

00:11:12,930 --> 00:11:20,160
don't know nor do they care about what

00:11:15,630 --> 00:11:25,070
they can do services are workers that

00:11:20,160 --> 00:11:28,530
need space power network to do their job

00:11:25,070 --> 00:11:31,470
reverse proxies on the other hand need

00:11:28,530 --> 00:11:34,530
to accept requests and take the requests

00:11:31,470 --> 00:11:37,800
to the matching service so not only do

00:11:34,530 --> 00:11:40,200
they care about when where the services

00:11:37,800 --> 00:11:45,390
are but the need to know what they can

00:11:40,200 --> 00:11:48,360
do so the configuration file for proxies

00:11:45,390 --> 00:11:51,960
are the glue component the declare the

00:11:48,360 --> 00:11:54,510
service cap abilities and the rules so

00:11:51,960 --> 00:11:56,670
requests will eventually and on the

00:11:54,510 --> 00:12:00,840
right service

00:11:56,670 --> 00:12:03,360
but what if I told you that you don't

00:12:00,840 --> 00:12:06,390
need these configuration file to join

00:12:03,360 --> 00:12:09,560
the - what if you're a reverse proxy

00:12:06,390 --> 00:12:13,620
could use information already available

00:12:09,560 --> 00:12:17,010
it'll sound crazy but traffic was born

00:12:13,620 --> 00:12:19,950
from the simple idea that adding

00:12:17,010 --> 00:12:22,320
information to an existing database was

00:12:19,950 --> 00:12:25,800
better than duplicating the data into a

00:12:22,320 --> 00:12:27,810
specific configuration file so why

00:12:25,800 --> 00:12:29,760
traffic to keep things simple

00:12:27,810 --> 00:12:31,620
instead of writing a separate

00:12:29,760 --> 00:12:33,240
configuration file you'll attach

00:12:31,620 --> 00:12:36,180
information to your service and

00:12:33,240 --> 00:12:39,030
containers information that will be used

00:12:36,180 --> 00:12:43,680
by traffic to treat the routes in real

00:12:39,030 --> 00:12:46,590
time this diagram tries to sum up what

00:12:43,680 --> 00:12:49,080
the product is about on the right are

00:12:46,590 --> 00:12:51,990
your infrastructure and multiple

00:12:49,080 --> 00:12:54,660
clusters multiple services and on the

00:12:51,990 --> 00:12:57,060
left are the incoming requests from the

00:12:54,660 --> 00:13:00,350
outside with no knowledge of your IT

00:12:57,060 --> 00:13:02,160
just plain requests and in the middle

00:13:00,350 --> 00:13:06,060
automatically connecting everything

00:13:02,160 --> 00:13:08,700
together stands traffic and to treat the

00:13:06,060 --> 00:13:11,400
routes from the requests to the services

00:13:08,700 --> 00:13:13,890
traffic doesn't need to read the

00:13:11,400 --> 00:13:15,570
information from a configuration file it

00:13:13,890 --> 00:13:17,280
knows how to deal with every major

00:13:15,570 --> 00:13:20,880
technology provider

00:13:17,280 --> 00:13:23,340
thanks to their IP is and one of these

00:13:20,880 --> 00:13:27,060
technology again is to burn edits and

00:13:23,340 --> 00:13:29,550
that's it so to its core traffic is

00:13:27,060 --> 00:13:32,820
really an open source project that was

00:13:29,550 --> 00:13:37,390
born from this idea

00:13:32,820 --> 00:13:40,500
so let's talk about how one would

00:13:37,390 --> 00:13:43,959
configure traffic along with kubernetes

00:13:40,500 --> 00:13:46,779
for those of you who aren't aware of the

00:13:43,959 --> 00:13:50,529
concept of kubernetes let's do a very

00:13:46,779 --> 00:13:53,080
quick recap so cue burnin is is a

00:13:50,529 --> 00:13:55,959
cluster technology it shouldn't come as

00:13:53,080 --> 00:13:59,110
a surprise to us it makes a cluster of

00:13:55,959 --> 00:14:02,920
computers act as one whatever their

00:13:59,110 --> 00:14:06,279
location is if there are virtual

00:14:02,920 --> 00:14:09,270
machines or VeriFone computers machines

00:14:06,279 --> 00:14:13,089
in cuber Nattie's cluster are called

00:14:09,270 --> 00:14:15,220
nodes they come and go they can break

00:14:13,089 --> 00:14:18,459
down they can be removed from the

00:14:15,220 --> 00:14:22,779
cluster and new nodes can be deployed to

00:14:18,459 --> 00:14:25,870
handle clothes they are volatile so we

00:14:22,779 --> 00:14:27,880
have places where we can deploy this

00:14:25,870 --> 00:14:31,300
stuff and now we want to deploy

00:14:27,880 --> 00:14:35,560
containers kubernetes adds a layer

00:14:31,300 --> 00:14:37,930
around containers the pods usually a pod

00:14:35,560 --> 00:14:39,430
will contain only one container but just

00:14:37,930 --> 00:14:42,300
note that you can deploy if more than

00:14:39,430 --> 00:14:42,300
one container

00:14:44,830 --> 00:14:49,810
you will deploy the pods telling

00:14:46,840 --> 00:14:52,180
kubernetes how many of them you want at

00:14:49,810 --> 00:14:54,460
a specific time basically we'll say

00:14:52,180 --> 00:14:58,720
thank you I'd like to have two replicas

00:14:54,460 --> 00:15:01,690
for my web app and four for my rest

00:14:58,720 --> 00:15:05,110
server and it will be ready to burn at

00:15:01,690 --> 00:15:09,640
Asus job to ensure that at any time you

00:15:05,110 --> 00:15:13,480
have this life on your cluster so at

00:15:09,640 --> 00:15:18,250
this point we have our sorry because

00:15:13,480 --> 00:15:21,790
there are multiple pods you add the

00:15:18,250 --> 00:15:25,600
notion of services that basically say a

00:15:21,790 --> 00:15:29,680
service is any available pod that

00:15:25,600 --> 00:15:33,400
handles this specific task so at this

00:15:29,680 --> 00:15:36,790
point of time we have our application on

00:15:33,400 --> 00:15:40,480
our cluster but unfortunately nobody can

00:15:36,790 --> 00:15:45,160
access the cluster so we have the option

00:15:40,480 --> 00:15:47,200
to expose each service directly but it's

00:15:45,160 --> 00:15:50,860
improve costly because you'll need extra

00:15:47,200 --> 00:15:53,830
components from your provider or we can

00:15:50,860 --> 00:15:56,830
choose to use ingress and an ingress

00:15:53,830 --> 00:15:59,950
controller this option consists of

00:15:56,830 --> 00:16:04,790
opening a door for the outside to your

00:15:59,950 --> 00:16:08,330
cluster you first define rules

00:16:04,790 --> 00:16:12,230
when the requests look like this then go

00:16:08,330 --> 00:16:14,420
talk to service Hey and to implement

00:16:12,230 --> 00:16:16,820
those rules you use an ingress

00:16:14,420 --> 00:16:23,959
controller a reverse proxy an edge

00:16:16,820 --> 00:16:27,260
router and traffic is a great one all

00:16:23,959 --> 00:16:30,380
these cool features traffic is super

00:16:27,260 --> 00:16:33,230
easy to set up my recommendation for

00:16:30,380 --> 00:16:35,269
people not familiar with kubernetes is

00:16:33,230 --> 00:16:39,230
to use help which is a package manager

00:16:35,269 --> 00:16:44,360
before and basically you do help install

00:16:39,230 --> 00:16:46,190
traffic and you're good to go here it is

00:16:44,360 --> 00:16:49,940
the actual command line

00:16:46,190 --> 00:16:54,320
I used to install try to configure

00:16:49,940 --> 00:16:58,250
traffic on my Mac for q4 doctor for Mac

00:16:54,320 --> 00:17:02,300
or whatever the name is I asked to

00:16:58,250 --> 00:17:05,170
enable the dashboard and to publish the

00:17:02,300 --> 00:17:08,540
the dashboard on dashboard the localhost

00:17:05,170 --> 00:17:11,390
this is the line yeah there and when I

00:17:08,540 --> 00:17:14,360
go on that word localhost I can see the

00:17:11,390 --> 00:17:17,439
dashboard of traffic it works

00:17:14,360 --> 00:17:21,740
traffic is my incresed controller

00:17:17,439 --> 00:17:24,860
so now just yeah so you know you can see

00:17:21,740 --> 00:17:27,860
that there is one service here which is

00:17:24,860 --> 00:17:30,590
the dashboard itself and one rule to

00:17:27,860 --> 00:17:33,590
redirect the traffic to the dashboard

00:17:30,590 --> 00:17:40,100
which is check if the host is dashboard

00:17:33,590 --> 00:17:43,370
look looks so before going further I

00:17:40,100 --> 00:17:45,679
want you to have all the tools to keep

00:17:43,370 --> 00:17:48,110
using traffic if you want after the

00:17:45,679 --> 00:17:51,440
presentation so I'll talk about the

00:17:48,110 --> 00:17:56,330
concepts you'll need later and don't

00:17:51,440 --> 00:17:58,669
worry there are only three four concepts

00:17:56,330 --> 00:18:02,059
you'll need to understand so you

00:17:58,669 --> 00:18:03,770
remember the diagram we said that on the

00:18:02,059 --> 00:18:06,080
Left where the request and on the right

00:18:03,770 --> 00:18:09,080
our infrastructure and in the middle

00:18:06,080 --> 00:18:11,330
traffic so let's make it simpler and

00:18:09,080 --> 00:18:13,279
focused on a smaller channel a single

00:18:11,330 --> 00:18:16,789
requests a single service on a single

00:18:13,279 --> 00:18:18,940
cluster let's see how the request gets

00:18:16,789 --> 00:18:22,220
handled by the service on the right

00:18:18,940 --> 00:18:24,530
first things first

00:18:22,220 --> 00:18:26,510
when you start traffic you need to tell

00:18:24,530 --> 00:18:30,350
it what infrastructure components you

00:18:26,510 --> 00:18:32,720
have in our case kubernetes basically

00:18:30,350 --> 00:18:35,540
you start traffic high traffic I'm using

00:18:32,720 --> 00:18:37,730
kubernetes and traffic will answer okay

00:18:35,540 --> 00:18:41,480
I got it I will keep searching for new

00:18:37,730 --> 00:18:44,419
services these infrastructure components

00:18:41,480 --> 00:18:46,520
are what we call providers because they

00:18:44,419 --> 00:18:49,419
will provide all the information traffic

00:18:46,520 --> 00:18:52,429
needs throughout the incoming requests

00:18:49,419 --> 00:18:54,049
of course as we saw in the full diagram

00:18:52,429 --> 00:18:57,380
you can have traffic configured to

00:18:54,049 --> 00:18:58,840
listen to multiple providers and at the

00:18:57,380 --> 00:19:01,210
same time but we'll stick with

00:18:58,840 --> 00:19:04,750
kubernetes

00:19:01,210 --> 00:19:07,820
then because you don't want to waste

00:19:04,750 --> 00:19:10,370
computer time on analyzing data you

00:19:07,820 --> 00:19:13,970
don't care about you tell traffic to

00:19:10,370 --> 00:19:17,419
open doors for the outside in the form

00:19:13,970 --> 00:19:20,120
of entry points in their most basic form

00:19:17,419 --> 00:19:23,299
entry points are just ports you will

00:19:20,120 --> 00:19:26,540
accept connection from but you can go

00:19:23,299 --> 00:19:29,700
further and an authentication SSL and so

00:19:26,540 --> 00:19:32,429
on then

00:19:29,700 --> 00:19:34,440
traffic will at some point to detect new

00:19:32,429 --> 00:19:37,200
containers and when it detects a new

00:19:34,440 --> 00:19:40,709
container it will create what is called

00:19:37,200 --> 00:19:42,649
a back-end the configuration for the

00:19:40,709 --> 00:19:46,019
feature that exists on your

00:19:42,649 --> 00:19:48,269
infrastructure ultimately the backend

00:19:46,019 --> 00:19:50,519
responsibility will be to forward the

00:19:48,269 --> 00:19:53,789
request to the container capable of

00:19:50,519 --> 00:19:56,820
handling the request and backends in

00:19:53,789 --> 00:19:58,679
their simplest form are just IPS it

00:19:56,820 --> 00:20:01,859
answers the question where is the

00:19:58,679 --> 00:20:04,499
container you can add more to them like

00:20:01,859 --> 00:20:08,489
load balancing rules shortcut rules

00:20:04,499 --> 00:20:11,070
health check endpoints and so on and now

00:20:08,489 --> 00:20:13,589
that we have defined backends the only

00:20:11,070 --> 00:20:15,929
thing left is to define which requests

00:20:13,589 --> 00:20:18,989
should be routed to them and this is

00:20:15,929 --> 00:20:21,659
what front ends are about that define

00:20:18,989 --> 00:20:23,879
the characteristics of the requests that

00:20:21,659 --> 00:20:24,570
have an impact on the way this should be

00:20:23,879 --> 00:20:28,320
handled

00:20:24,570 --> 00:20:30,989
for instance we you will have rules on

00:20:28,320 --> 00:20:36,599
the hostname which you can have rules

00:20:30,989 --> 00:20:39,629
for path headers and so on so these

00:20:36,599 --> 00:20:41,820
rules they will be attached directly on

00:20:39,629 --> 00:20:44,070
your containers so you don't need a

00:20:41,820 --> 00:20:46,739
separate configuration file all the

00:20:44,070 --> 00:20:49,530
relevant information for a component are

00:20:46,739 --> 00:20:53,940
attached to the component itself

00:20:49,530 --> 00:20:55,950
so we will sum everything up providers

00:20:53,940 --> 00:20:58,650
provide information so traffic and

00:20:55,950 --> 00:21:01,860
configure itself dynamically entry

00:20:58,650 --> 00:21:03,900
points listen for incoming data and set

00:21:01,860 --> 00:21:06,570
apart the request we want to analyze and

00:21:03,900 --> 00:21:08,310
the request we don't even consider from

00:21:06,570 --> 00:21:10,320
ends contain the rules that will

00:21:08,310 --> 00:21:13,130
eventually route requests to the

00:21:10,320 --> 00:21:15,660
corresponding server back-end sorry and

00:21:13,130 --> 00:21:18,510
backends represent the available

00:21:15,660 --> 00:21:22,560
features in your system along with how

00:21:18,510 --> 00:21:26,100
to invoke them and in practice we have

00:21:22,560 --> 00:21:29,240
this requests this incoming requests it

00:21:26,100 --> 00:21:31,860
is on port 80 so we handle the request

00:21:29,240 --> 00:21:34,860
from and says is it back-office

00:21:31,860 --> 00:21:36,540
domain.com yes it is so it route the

00:21:34,860 --> 00:21:39,930
request to the corresponding back-end

00:21:36,540 --> 00:21:42,840
which is the container IP and it goes to

00:21:39,930 --> 00:21:45,000
the container IP these are all the

00:21:42,840 --> 00:21:48,230
concepts you need to understand how

00:21:45,000 --> 00:21:48,230
traffic works

00:21:48,590 --> 00:21:54,240
finally halfway through the presentation

00:21:51,270 --> 00:21:59,820
it's time to deploy things on our

00:21:54,240 --> 00:22:05,280
cluster so let's do an example this is

00:21:59,820 --> 00:22:09,360
the story of the pod named Who am I that

00:22:05,280 --> 00:22:13,440
is defined by this llamo so we have a

00:22:09,360 --> 00:22:15,300
deployment it deploys the application

00:22:13,440 --> 00:22:21,030
application Who am I

00:22:15,300 --> 00:22:25,050
there which is a container and then we

00:22:21,030 --> 00:22:28,170
have a service for the corresponding

00:22:25,050 --> 00:22:29,980
container there

00:22:28,170 --> 00:22:34,659
[Music]

00:22:29,980 --> 00:22:37,870
this thought meets an ingress so this

00:22:34,659 --> 00:22:42,510
ingress wants the request with who am i

00:22:37,870 --> 00:22:48,760
dot localhost to go to Who am I service

00:22:42,510 --> 00:22:51,909
there so we defined here the ingress we

00:22:48,760 --> 00:22:56,200
add an annotation to say to tell traffic

00:22:51,909 --> 00:23:00,549
traffic to use this ingress process it

00:22:56,200 --> 00:23:03,549
and the ingress so says if house equals

00:23:00,549 --> 00:23:07,799
who am i dot localhost then go to Who am

00:23:03,549 --> 00:23:12,610
I service you cube chat all the files

00:23:07,799 --> 00:23:17,710
and in the end they have a route

00:23:12,610 --> 00:23:21,610
together you have the back end the new

00:23:17,710 --> 00:23:24,540
back end and the new route for your back

00:23:21,610 --> 00:23:26,789
end dynamically and automatically

00:23:24,540 --> 00:23:29,639
[Music]

00:23:26,789 --> 00:23:34,430
and this is an example of invoking the

00:23:29,639 --> 00:23:38,360
service so

00:23:34,430 --> 00:23:42,230
it was definitely a cute example for the

00:23:38,360 --> 00:23:48,620
sake of repetition we will do the same

00:23:42,230 --> 00:23:51,020
example with this time two replicas so

00:23:48,620 --> 00:23:54,800
we will define it who are you deployment

00:23:51,020 --> 00:24:01,850
this time with two replicas application

00:23:54,800 --> 00:24:05,390
who are you there so we have a service

00:24:01,850 --> 00:24:08,150
this time pointing to who are you and we

00:24:05,390 --> 00:24:10,520
have an egress that will route the

00:24:08,150 --> 00:24:14,740
request who are you local host - who are

00:24:10,520 --> 00:24:18,320
you service we cube kettle the file and

00:24:14,740 --> 00:24:21,590
all of a sudden traffic will detect the

00:24:18,320 --> 00:24:24,650
new route once again but this time since

00:24:21,590 --> 00:24:27,740
we have two replicas for our service it

00:24:24,650 --> 00:24:31,010
will create two servers for the same

00:24:27,740 --> 00:24:34,160
back end with one route and it will be

00:24:31,010 --> 00:24:37,100
traffic responsibility to load balance

00:24:34,160 --> 00:24:39,560
between the two instances that are

00:24:37,100 --> 00:24:42,170
available and of course if one of them

00:24:39,560 --> 00:24:45,440
breaks down then traffic will update the

00:24:42,170 --> 00:24:49,149
route and so on so it is completely

00:24:45,440 --> 00:24:52,460
automatic and dynamic

00:24:49,149 --> 00:24:57,019
so this is the full picture of what we

00:24:52,460 --> 00:25:00,380
did so we have incoming requests that

00:24:57,019 --> 00:25:04,429
arrived on the ingress controller I will

00:25:00,380 --> 00:25:08,509
remove the mouse there to route the

00:25:04,429 --> 00:25:12,230
request traffic uses the ingress and it

00:25:08,509 --> 00:25:15,400
will redirect the routes that's that's

00:25:12,230 --> 00:25:17,890
all there is to know

00:25:15,400 --> 00:25:19,960
[Music]

00:25:17,890 --> 00:25:22,779
I don't know how much time I still have

00:25:19,960 --> 00:25:26,380
left ten minutes okay well I will use

00:25:22,779 --> 00:25:28,990
the five last minute there there is much

00:25:26,380 --> 00:25:32,830
more to traffic than just being able to

00:25:28,990 --> 00:25:34,870
detect services by itself it has many

00:25:32,830 --> 00:25:37,019
features and right before I take your

00:25:34,870 --> 00:25:40,570
questions I wanted to show you a very

00:25:37,019 --> 00:25:43,059
popular one that deal with security I

00:25:40,570 --> 00:25:47,649
was very proud of my captain traffic

00:25:43,059 --> 00:25:50,309
America there so if you were like me and

00:25:47,649 --> 00:25:53,799
you happen to have struggle with HTTPS

00:25:50,309 --> 00:25:57,279
the classic way you've probably hate the

00:25:53,799 --> 00:26:00,010
certificate mess I used to accept the

00:25:57,279 --> 00:26:03,549
mess because I thought it was the price

00:26:00,010 --> 00:26:05,320
to pay for security but that was until

00:26:03,549 --> 00:26:07,870
the day I discovered traffic and it's

00:26:05,320 --> 00:26:10,870
let's encrypt feature basically with

00:26:07,870 --> 00:26:13,600
traffic all you have to do with a

00:26:10,870 --> 00:26:15,789
regular cluster with plain old HTTP

00:26:13,600 --> 00:26:18,820
services that are not aware of anything

00:26:15,789 --> 00:26:21,100
related to HTTPS all you have to do is

00:26:18,820 --> 00:26:25,090
to configure your email address and

00:26:21,100 --> 00:26:26,769
traffic will talk to that simple to get

00:26:25,090 --> 00:26:29,169
the certification to generate the

00:26:26,769 --> 00:26:31,770
certificates and everything will be

00:26:29,169 --> 00:26:34,890
exposed through HTTPS

00:26:31,770 --> 00:26:37,170
I almost like but this is the actual

00:26:34,890 --> 00:26:42,780
configuration file you would use for

00:26:37,170 --> 00:26:45,000
traffic to configure HTTPS there of

00:26:42,780 --> 00:26:47,600
course there are other cool features

00:26:45,000 --> 00:26:52,530
this is the different ways you can add

00:26:47,600 --> 00:26:56,250
basic authentication but there are many

00:26:52,530 --> 00:26:57,450
many many other features in traffic you

00:26:56,250 --> 00:26:59,730
could have talked about the other

00:26:57,450 --> 00:27:02,250
providers because everything that works

00:26:59,730 --> 00:27:05,520
for two brandies works for Dockers

00:27:02,250 --> 00:27:08,490
Warren Bezos marathon catalog or recon

00:27:05,520 --> 00:27:10,370
and so on renter we have many reverse

00:27:08,490 --> 00:27:15,570
proxies features right limiting

00:27:10,370 --> 00:27:21,960
circuit-breaker GRP see we have security

00:27:15,570 --> 00:27:25,679
features HTTP features WebSockets it is

00:27:21,960 --> 00:27:29,150
compatible with many tracing or metrics

00:27:25,679 --> 00:27:31,670
tools and other features that will come

00:27:29,150 --> 00:27:37,100
hopefully very soon

00:27:31,670 --> 00:27:39,890
so thank you I hope there if you have

00:27:37,100 --> 00:27:42,190
any question I will be happy to answer

00:27:39,890 --> 00:27:42,190
that

00:27:43,280 --> 00:27:46,500
[Music]

00:27:47,399 --> 00:27:53,409
for massive DDoS attacks I can't hear

00:27:51,429 --> 00:27:56,039
you I'm sorry the massive distributed

00:27:53,409 --> 00:28:00,309
denial-of-service requests do you handle

00:27:56,039 --> 00:28:04,559
features I'm trying to absolutely sit

00:28:00,309 --> 00:28:07,350
very closely you have facility for

00:28:04,559 --> 00:28:09,250
distributed denial-of-service requests

00:28:07,350 --> 00:28:12,230
requests attacks

00:28:09,250 --> 00:28:14,490
[Music]

00:28:12,230 --> 00:28:21,150
I didn't get the question

00:28:14,490 --> 00:28:24,570
oh we have we definitely it might not be

00:28:21,150 --> 00:28:29,240
the best France tool for DDoS of course

00:28:24,570 --> 00:28:31,610
but there are we have rate limiting or

00:28:29,240 --> 00:28:36,090
features like that that can help

00:28:31,610 --> 00:28:39,030
avoiding DDoS but I might not recommend

00:28:36,090 --> 00:28:43,980
traffic as being the tool for protecting

00:28:39,030 --> 00:28:45,720
your your IT from giddy us and I don't

00:28:43,980 --> 00:28:49,070
think that it it might not be the

00:28:45,720 --> 00:28:51,840
reverse proxy job to do that actually

00:28:49,070 --> 00:28:54,210
are there any plans to add support for

00:28:51,840 --> 00:28:55,590
kubernetes secrets as a Cavey store for

00:28:54,210 --> 00:28:59,140
the Acme support because what you showed

00:28:55,590 --> 00:29:00,800
there will only work with single modes

00:28:59,140 --> 00:29:03,810
[Music]

00:29:00,800 --> 00:29:06,720
hi I don't want to say something silly

00:29:03,810 --> 00:29:10,170
but I think that we support to run any

00:29:06,720 --> 00:29:12,000
secret or their my or you support it we

00:29:10,170 --> 00:29:14,520
don't yet less that's a for different

00:29:12,000 --> 00:29:15,060
thing for TLS keys but not for the Acme

00:29:14,520 --> 00:29:17,940
keys

00:29:15,060 --> 00:29:23,910
oh then there might be a pull request

00:29:17,940 --> 00:29:26,520
with that feature or I know the

00:29:23,910 --> 00:29:32,220
kubernetes expert I remember that there

00:29:26,520 --> 00:29:34,230
is a recommendation about I can't tell

00:29:32,220 --> 00:29:36,540
you well I will look into it and answer

00:29:34,230 --> 00:29:38,730
your question right after the

00:29:36,540 --> 00:29:43,680
presentation which we will

00:29:38,730 --> 00:29:43,680
[Music]

00:29:43,710 --> 00:29:54,110
okay any more questions

00:29:46,920 --> 00:30:04,250
[Music]

00:29:54,110 --> 00:30:07,070
okay thank you thank you we have the

00:30:04,250 --> 00:30:09,049
prize to severe should at the keynote

00:30:07,070 --> 00:30:12,679
place which happened in the morning

00:30:09,049 --> 00:30:14,280
that's the Metcalfe large so any big in

00:30:12,679 --> 00:30:22,280
that tree

00:30:14,280 --> 00:30:22,280
[Music]

00:30:24,860 --> 00:30:28,899
and I'm very sorry for my English

00:30:32,740 --> 00:30:42,190

YouTube URL: https://www.youtube.com/watch?v=gW6fT0LNep8


