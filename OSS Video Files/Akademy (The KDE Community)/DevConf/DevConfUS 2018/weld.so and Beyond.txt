Title: weld.so and Beyond
Publication date: 2019-02-25
Playlist: DevConfUS 2018
Description: 
	What if we didn't need packaging anymore? What if we could produce working system images in milliseconds? What if every system had atomic updates and perfect rollback? What if we never had to scan or rebuild container images? What if every process ran in its own dynamically-generated container? In this talk, Will Woods gives a brief of Project Weldr's long-term vision for the future of images and containers, and what it's going to take to make these things possible.
Captions: 
	00:00:09,559 --> 00:00:14,370
nothing

00:00:10,770 --> 00:00:16,259
Oh can everybody hear me great guys

00:00:14,370 --> 00:00:17,970
everyone thank you for coming here today

00:00:16,259 --> 00:00:19,740
we're very excited to have you here I'm

00:00:17,970 --> 00:00:22,430
here to introduce will he'll be

00:00:19,740 --> 00:00:24,750
presenting on well des Eaux and beyond

00:00:22,430 --> 00:00:25,859
it's gonna be great talking I'm really

00:00:24,750 --> 00:00:26,310
looking forward to seeing this coming to

00:00:25,859 --> 00:00:29,609
life

00:00:26,310 --> 00:00:32,820
bye guys all right hey everybody

00:00:29,609 --> 00:00:34,769
am i okay I feel like I'm audible if you

00:00:32,820 --> 00:00:38,010
can't hear me then cool all right I got

00:00:34,769 --> 00:00:39,059
somebody in the middle I want to I guess

00:00:38,010 --> 00:00:40,949
I'm gonna say I'm gonna thank you in

00:00:39,059 --> 00:00:42,269
advance due to some circumstances beyond

00:00:40,949 --> 00:00:44,940
my control these slides are not finished

00:00:42,269 --> 00:00:46,830
and my luggage arrived right before I

00:00:44,940 --> 00:00:50,250
got here so I don't have slides but you

00:00:46,830 --> 00:00:51,330
have clean underwear on so in the end I

00:00:50,250 --> 00:00:53,309
think you'll agree that's probably the

00:00:51,330 --> 00:00:55,589
better choice so I'm here to talk about

00:00:53,309 --> 00:00:59,670
well deso and beyond well that was a

00:00:55,589 --> 00:01:00,690
thing that we kind of made up so I'm to

00:00:59,670 --> 00:01:03,360
give you a little background

00:01:00,690 --> 00:01:04,739
I am a vest sorry what this senior

00:01:03,360 --> 00:01:09,450
software engineer at Red Hat I've worked

00:01:04,739 --> 00:01:15,330
on installation and upgrades for 15

00:01:09,450 --> 00:01:17,940
years and so our team has done has a

00:01:15,330 --> 00:01:20,220
deep history in doing things that

00:01:17,940 --> 00:01:22,770
involve image construction and packaging

00:01:20,220 --> 00:01:24,750
and the sort of weirder use cases of

00:01:22,770 --> 00:01:27,600
that um this stuff I'm gonna talk about

00:01:24,750 --> 00:01:30,360
is is not like supers or it is fairly

00:01:27,600 --> 00:01:33,270
specific to rpm and the way that we at

00:01:30,360 --> 00:01:35,460
Red Hat build images and things like

00:01:33,270 --> 00:01:39,420
that but I think the larger lesson sort

00:01:35,460 --> 00:01:42,690
of apply to the entirety of the Linux

00:01:39,420 --> 00:01:44,190
ecosystem so um oh yeah and some quick

00:01:42,690 --> 00:01:46,590
disclaimer is nothing here nothing that

00:01:44,190 --> 00:01:49,890
I say here is like this is soft Red Hat

00:01:46,590 --> 00:01:51,420
is definitely gonna do if you quick show

00:01:49,890 --> 00:01:55,260
of hands who in this room works for Red

00:01:51,420 --> 00:01:56,729
Hat okay for the rest of you the people

00:01:55,260 --> 00:01:58,680
who had their hands up we don't know

00:01:56,729 --> 00:02:01,490
what number comes after seven we can't

00:01:58,680 --> 00:02:01,490
count any higher than

00:02:04,149 --> 00:02:08,140
so this has nothing to do with whatever

00:02:05,950 --> 00:02:09,479
numbers might or might not come after

00:02:08,140 --> 00:02:12,069
seven I'm fairly sure there aren't any

00:02:09,479 --> 00:02:13,959
and yeah I wrote these like two hours

00:02:12,069 --> 00:02:14,440
ago so thank you in advance for bearing

00:02:13,959 --> 00:02:18,010
with me

00:02:14,440 --> 00:02:19,810
as I sort of ramble at you so the whole

00:02:18,010 --> 00:02:21,670
thing I want to say the the sort of

00:02:19,810 --> 00:02:23,319
promise of this well des Eaux thing is

00:02:21,670 --> 00:02:26,080
that like I'm pretty sure a bit looking

00:02:23,319 --> 00:02:27,730
at the way that we construct images by

00:02:26,080 --> 00:02:29,739
images I mean like filesystem addresses

00:02:27,730 --> 00:02:31,510
like containers or virtual machines or

00:02:29,739 --> 00:02:34,329
even just like doing an initial install

00:02:31,510 --> 00:02:36,400
on a system the way that you do that is

00:02:34,329 --> 00:02:37,540
like we're using you know we're using

00:02:36,400 --> 00:02:39,640
our time we're using packages do that

00:02:37,540 --> 00:02:41,799
and rpm and his friends were designed in

00:02:39,640 --> 00:02:43,930
the late 90s and they made sense at the

00:02:41,799 --> 00:02:45,430
time but there's a lot of slack and

00:02:43,930 --> 00:02:47,290
stuff getting in its own way that makes

00:02:45,430 --> 00:02:50,079
everything we do harder than it needs to

00:02:47,290 --> 00:02:53,950
be and with some tweaking we could have

00:02:50,079 --> 00:02:55,690
a system or a basically a Linux model

00:02:53,950 --> 00:02:57,280
for Linux distributions for going from

00:02:55,690 --> 00:02:59,110
you know upstream projects releasing

00:02:57,280 --> 00:03:02,590
sources to code that you're running

00:02:59,110 --> 00:03:04,480
somewhere that was like insanely fast

00:03:02,590 --> 00:03:06,310
and reliable and just did everything

00:03:04,480 --> 00:03:10,470
really easily to the point where I'm

00:03:06,310 --> 00:03:13,150
pretty sure we could start up a build a

00:03:10,470 --> 00:03:14,920
container for every process as it starts

00:03:13,150 --> 00:03:16,840
up using only the things that it

00:03:14,920 --> 00:03:18,790
actually needs in its file system so

00:03:16,840 --> 00:03:20,079
every process would have its own view of

00:03:18,790 --> 00:03:22,540
the file system the same way we do with

00:03:20,079 --> 00:03:25,450
virtual memory where every process at

00:03:22,540 --> 00:03:27,370
startup the dynamic linker goes in and

00:03:25,450 --> 00:03:29,319
links in the member the libraries that

00:03:27,370 --> 00:03:30,400
it needs and then actually jumps in to

00:03:29,319 --> 00:03:31,720
your process we could do the same thing

00:03:30,400 --> 00:03:32,650
with the file system and if you think

00:03:31,720 --> 00:03:34,810
about it it's kind of weird that we

00:03:32,650 --> 00:03:36,069
don't do that with the file system why

00:03:34,810 --> 00:03:38,079
is it that every process gives its own

00:03:36,069 --> 00:03:40,510
private view of memory that the kernel

00:03:38,079 --> 00:03:43,389
then arbitrates but we give them all the

00:03:40,510 --> 00:03:46,569
same view of the disk it's sort of like

00:03:43,389 --> 00:03:48,400
it was designed in an era where discs

00:03:46,569 --> 00:03:50,200
were really slow and there weren't a

00:03:48,400 --> 00:03:51,819
whole lot of computers and the idea of

00:03:50,200 --> 00:03:54,040
like doing that was just crazy and no

00:03:51,819 --> 00:03:56,010
like we'll get to it later if we can do

00:03:54,040 --> 00:03:58,750
that if we can build images that quickly

00:03:56,010 --> 00:04:00,519
milliseconds or less we can actually do

00:03:58,750 --> 00:04:02,380
things like OS wide CIN CD which has

00:04:00,519 --> 00:04:04,000
been sort of troubling for RedHat to do

00:04:02,380 --> 00:04:04,530
that sort of thing or in fedora for that

00:04:04,000 --> 00:04:07,110
matter

00:04:04,530 --> 00:04:09,090
can we don't do nightly builds a rod or

00:04:07,110 --> 00:04:10,230
we do sometimes sometimes we don't we

00:04:09,090 --> 00:04:15,810
don't do neatly install your image

00:04:10,230 --> 00:04:18,209
builds because we do that's kind of my

00:04:15,810 --> 00:04:21,480
point I'd love it if we succeeded that

00:04:18,209 --> 00:04:22,770
would be cool but yeah so I'm pretty

00:04:21,480 --> 00:04:24,540
sure that we can just tweak a few things

00:04:22,770 --> 00:04:26,070
and I say tweak a few things but it's

00:04:24,540 --> 00:04:28,110
actually like a fairly it's a lot of

00:04:26,070 --> 00:04:29,430
small system-wide changes that we would

00:04:28,110 --> 00:04:31,230
need to do to make this sort of a world

00:04:29,430 --> 00:04:34,050
possible but it is a lot like the shift

00:04:31,230 --> 00:04:35,639
from statically linked binaries in the

00:04:34,050 --> 00:04:37,440
late 80s and early 90s to dynamically

00:04:35,639 --> 00:04:39,600
linked by arson we don't like think too

00:04:37,440 --> 00:04:41,430
hard about dynamically linked binaries

00:04:39,600 --> 00:04:43,530
as being like a crazy new thing anymore

00:04:41,430 --> 00:04:45,000
but like there was a time where that was

00:04:43,530 --> 00:04:46,620
new and controversial and people hated

00:04:45,000 --> 00:04:47,910
it in the rest Alert a Solaris admins or

00:04:46,620 --> 00:04:49,680
like I will never have dynamically

00:04:47,910 --> 00:04:52,980
linked binaries on my system ever you

00:04:49,680 --> 00:04:54,810
know fist on the desk so like if you're

00:04:52,980 --> 00:04:56,220
getting if you're getting a feeling in

00:04:54,810 --> 00:04:57,960
your chest like this is crazy you still

00:04:56,220 --> 00:05:00,330
never wear how am i why am i listening

00:04:57,960 --> 00:05:02,760
to this guy like give me a minute just

00:05:00,330 --> 00:05:04,650
like clear your head so okay what is

00:05:02,760 --> 00:05:06,900
weld and welder just an acronym that we

00:05:04,650 --> 00:05:07,950
kind of made up for a experimental Linux

00:05:06,900 --> 00:05:09,390
distribution that we're sort of working

00:05:07,950 --> 00:05:11,190
on like what's it going to be the

00:05:09,390 --> 00:05:12,330
meaning of the acumen acronym changes

00:05:11,190 --> 00:05:13,740
depending on my mood I think it was

00:05:12,330 --> 00:05:15,150
originally wills experimental Linux

00:05:13,740 --> 00:05:17,160
distribution at one point it was the

00:05:15,150 --> 00:05:20,370
Wiggum Enterprise Linux distribution

00:05:17,160 --> 00:05:21,870
because of Ralph Wiggum and but yeah

00:05:20,370 --> 00:05:23,400
we're basically like figuring out new

00:05:21,870 --> 00:05:24,840
ways to do Lang sister stuff because the

00:05:23,400 --> 00:05:28,560
way we do it now is I'm saying it's like

00:05:24,840 --> 00:05:31,140
it's gnarly everything is a lot harder

00:05:28,560 --> 00:05:32,430
than it needs to be and we seem to have

00:05:31,140 --> 00:05:34,080
a lot we spend a lot of time fighting

00:05:32,430 --> 00:05:35,910
with ourselves building new tools to

00:05:34,080 --> 00:05:37,380
deal with problems inherent in the

00:05:35,910 --> 00:05:40,380
system rather than fixing the system

00:05:37,380 --> 00:05:41,850
itself everything like think about how

00:05:40,380 --> 00:05:43,200
many things features of the RPM

00:05:41,850 --> 00:05:46,680
ecosystem if you're familiar with it

00:05:43,200 --> 00:05:48,600
like comps groups every time we need to

00:05:46,680 --> 00:05:50,280
add something we add another layer extra

00:05:48,600 --> 00:05:53,039
layer of metadata and another extra

00:05:50,280 --> 00:05:54,000
layer of code to parse that metadata and

00:05:53,039 --> 00:05:57,240
at this point if you're dealing with I

00:05:54,000 --> 00:05:59,520
think modules involve like you have to

00:05:57,240 --> 00:06:01,380
fetch some yamo which then tells you

00:05:59,520 --> 00:06:03,330
where to get some sequel Lite database

00:06:01,380 --> 00:06:04,740
that tells you where to get the

00:06:03,330 --> 00:06:06,780
the XML tells you were the sequel late

00:06:04,740 --> 00:06:08,729
database is and then you can start

00:06:06,780 --> 00:06:10,919
parsing like other like there's 18

00:06:08,729 --> 00:06:12,870
different types of data involved and

00:06:10,919 --> 00:06:15,750
it's a mess and we could do a lot better

00:06:12,870 --> 00:06:19,020
so I already kind of went through this

00:06:15,750 --> 00:06:21,840
stuff but I think that the heart of the

00:06:19,020 --> 00:06:23,490
whole problem is that we're stuck on rpm

00:06:21,840 --> 00:06:25,050
and anybody who has talked to me at all

00:06:23,490 --> 00:06:26,689
in the past like 10 years is sick of

00:06:25,050 --> 00:06:32,460
hearing me yell about rpm and I'm sorry

00:06:26,689 --> 00:06:35,219
but I the problem with it is that we

00:06:32,460 --> 00:06:37,199
have so much of what we do encoded in it

00:06:35,219 --> 00:06:38,669
that everything we build is built upon

00:06:37,199 --> 00:06:40,560
it we keep building layers and layers on

00:06:38,669 --> 00:06:44,099
top of it but nobody understands how it

00:06:40,560 --> 00:06:46,919
works anymore like nobody actually knows

00:06:44,099 --> 00:06:48,509
the entire details of how the dependency

00:06:46,919 --> 00:06:51,750
system works or what's in the dependency

00:06:48,509 --> 00:06:54,210
tree or what the what's in all of the

00:06:51,750 --> 00:06:56,009
scriptlets and they're like

00:06:54,210 --> 00:06:57,120
non-deterministic and we don't know what

00:06:56,009 --> 00:06:58,529
they're doing but we have to run them as

00:06:57,120 --> 00:07:00,389
route because they might need a roof so

00:06:58,529 --> 00:07:02,939
we have like this enormous mountain of

00:07:00,389 --> 00:07:05,490
like code that we can't introspect on we

00:07:02,939 --> 00:07:07,529
have no idea what it's doing and it has

00:07:05,490 --> 00:07:10,169
to run this route and that seems like a

00:07:07,529 --> 00:07:13,039
fine to everybody which kind of makes me

00:07:10,169 --> 00:07:16,039
cry at night but that's what ever

00:07:13,039 --> 00:07:16,039
started

00:07:17,250 --> 00:07:21,210
oh the it's fine part well no everyone

00:07:19,950 --> 00:07:22,620
just sort of looks at it and it's like I

00:07:21,210 --> 00:07:24,270
guess I mean I don't know what we can do

00:07:22,620 --> 00:07:26,490
about it and I'm like we could not do

00:07:24,270 --> 00:07:29,280
that maybe like just throwing that one

00:07:26,490 --> 00:07:30,390
out there and yes so people are working

00:07:29,280 --> 00:07:31,470
around their problems and one of the

00:07:30,390 --> 00:07:33,630
things that I think is happening with

00:07:31,470 --> 00:07:37,170
our big shift to containerization is

00:07:33,630 --> 00:07:38,910
that and/or like the go where go by

00:07:37,170 --> 00:07:41,040
default build statically linked binaries

00:07:38,910 --> 00:07:42,900
and it's because of the troubles that we

00:07:41,040 --> 00:07:45,150
have with dependency resolution and

00:07:42,900 --> 00:07:46,860
things like that where you have your red

00:07:45,150 --> 00:07:48,390
hat or you have your Fedora system or

00:07:46,860 --> 00:07:50,400
your rail system and you're like okay

00:07:48,390 --> 00:07:51,690
but I I have this thing that needs these

00:07:50,400 --> 00:07:53,400
libraries and I have this thing these

00:07:51,690 --> 00:07:55,530
these other libraries how do we do that

00:07:53,400 --> 00:07:57,330
how do we get two sets of libraries that

00:07:55,530 --> 00:07:59,370
oh my god the package has the same name

00:07:57,330 --> 00:08:00,810
but they're different versions they

00:07:59,370 --> 00:08:03,990
can't possibly coexist in the same

00:08:00,810 --> 00:08:07,590
system I don't know why they're just

00:08:03,990 --> 00:08:09,360
files but okay rpm says they can and so

00:08:07,590 --> 00:08:11,700
instead of like addressing that problem

00:08:09,360 --> 00:08:13,530
we as a community slash industry have

00:08:11,700 --> 00:08:15,840
been like whatever we just went back to

00:08:13,530 --> 00:08:19,169
statically linking everything that was

00:08:15,840 --> 00:08:21,690
easier and like it works better but it's

00:08:19,169 --> 00:08:25,710
not a better idea it just works around

00:08:21,690 --> 00:08:27,720
that one problem so the whole thing and

00:08:25,710 --> 00:08:29,310
what I kind of went crazy doing for the

00:08:27,720 --> 00:08:31,050
past I'm not gonna subject you to it but

00:08:29,310 --> 00:08:32,789
we don't really have a good model for

00:08:31,050 --> 00:08:34,289
how rpm works like if you look at the

00:08:32,789 --> 00:08:36,300
Linux kernel there's like people have

00:08:34,289 --> 00:08:38,760
done formal memory models for how the

00:08:36,300 --> 00:08:41,310
Linux kernel deals with memory and what

00:08:38,760 --> 00:08:43,650
it does when when it takes locks and all

00:08:41,310 --> 00:08:45,540
of that stuff to sort of maintain the

00:08:43,650 --> 00:08:47,790
illusion that everything is safe and

00:08:45,540 --> 00:08:51,810
reliable it is safe and reliable

00:08:47,790 --> 00:08:56,220
asterisk well you know as long as you

00:08:51,810 --> 00:08:58,589
trust your hardware haha we don't have

00:08:56,220 --> 00:09:00,480
anything like that for rpm or packaging

00:08:58,589 --> 00:09:01,980
in general like we don't have any sense

00:09:00,480 --> 00:09:03,420
of like assertions like okay a

00:09:01,980 --> 00:09:05,730
well-behaved build system needs to

00:09:03,420 --> 00:09:08,010
maintain these sorts of invariants or

00:09:05,730 --> 00:09:09,630
like we have we can assume that this is

00:09:08,010 --> 00:09:11,040
true but we can't assume this is true so

00:09:09,630 --> 00:09:11,580
like we just sort of make it all up as

00:09:11,040 --> 00:09:13,770
we go along

00:09:11,580 --> 00:09:15,510
and that's where things get weird like

00:09:13,770 --> 00:09:16,620
oh we can't install two packages with

00:09:15,510 --> 00:09:18,930
the same name with different

00:09:16,620 --> 00:09:20,880
versions because reasons and it's like

00:09:18,930 --> 00:09:22,320
okay we will if we had a model maybe we

00:09:20,880 --> 00:09:24,710
could deal with that so you know I have

00:09:22,320 --> 00:09:26,790
a big like crazy model for a hat like

00:09:24,710 --> 00:09:29,340
written out mathematical model for how

00:09:26,790 --> 00:09:31,380
you do a Linux distribution what it

00:09:29,340 --> 00:09:33,140
actually involves the pieces aren't that

00:09:31,380 --> 00:09:36,180
difficult

00:09:33,140 --> 00:09:37,800
so it turns out if you kind of take it

00:09:36,180 --> 00:09:39,330
all apart and instead of like when you

00:09:37,800 --> 00:09:41,130
build a system using RPM what you're

00:09:39,330 --> 00:09:43,740
doing essentially what the installer

00:09:41,130 --> 00:09:46,140
does the installer it anaconda is a mini

00:09:43,740 --> 00:09:47,610
distribution and you boot a DVD or

00:09:46,140 --> 00:09:48,930
whatever and it starts this mini

00:09:47,610 --> 00:09:50,220
distribution and it used to be like a

00:09:48,930 --> 00:09:52,140
full-fledged media distribution that had

00:09:50,220 --> 00:09:54,750
its own like mountain binary and an it

00:09:52,140 --> 00:09:56,700
system and everything that we had to

00:09:54,750 --> 00:09:58,710
maintain our selves and it drove us

00:09:56,700 --> 00:10:00,600
completely bonkers so eventually we made

00:09:58,710 --> 00:10:01,830
it so it's just a small Fedora

00:10:00,600 --> 00:10:04,080
distribution it's very very

00:10:01,830 --> 00:10:06,150
stripped-down that we boot and load into

00:10:04,080 --> 00:10:07,920
memory and we format your hard drive and

00:10:06,150 --> 00:10:10,710
then we start installing stuff into it

00:10:07,920 --> 00:10:12,300
which is kind of bonkers when you

00:10:10,710 --> 00:10:14,070
consider that most of what people do

00:10:12,300 --> 00:10:15,840
after that finishes is they remove all

00:10:14,070 --> 00:10:17,820
the stuff they didn't want or they make

00:10:15,840 --> 00:10:19,290
a bunch of changes afterward because we

00:10:17,820 --> 00:10:21,660
don't know what happens in the middle

00:10:19,290 --> 00:10:23,640
it's all mysteries to us and it's really

00:10:21,660 --> 00:10:26,190
weird that we take a we take an empty

00:10:23,640 --> 00:10:27,660
box and then we like we have any little

00:10:26,190 --> 00:10:29,400
packages and people talk about packages

00:10:27,660 --> 00:10:30,510
like their bricks and they just sort of

00:10:29,400 --> 00:10:32,280
stacked off and you make a wall but

00:10:30,510 --> 00:10:35,400
they're more like tiny little robots

00:10:32,280 --> 00:10:37,740
with like chainsaws and arms on them and

00:10:35,400 --> 00:10:39,540
like you dump enough of them into a like

00:10:37,740 --> 00:10:40,740
little room and they sort of fight it

00:10:39,540 --> 00:10:45,450
out for a while and then they build

00:10:40,740 --> 00:10:47,430
Voltron you're like cool that's neat and

00:10:45,450 --> 00:10:49,860
like we made it all work and that's

00:10:47,430 --> 00:10:52,960
amazing like good job us but like maybe

00:10:49,860 --> 00:10:54,880
we could make bricks instead

00:10:52,960 --> 00:10:56,080
it's kind of my whole point like I'm

00:10:54,880 --> 00:10:57,370
gonna come back to this a lot I'm gonna

00:10:56,080 --> 00:10:59,740
use a lot of dumb analogies like that

00:10:57,370 --> 00:11:01,720
but my point is that as a community and

00:10:59,740 --> 00:11:03,730
an industry we need to start looking at

00:11:01,720 --> 00:11:06,160
the places where behavior is not innt

00:11:03,730 --> 00:11:08,560
respectable or not deterministic and

00:11:06,160 --> 00:11:11,380
start stamping them the hell out because

00:11:08,560 --> 00:11:13,810
they make everything else it's sort of

00:11:11,380 --> 00:11:15,430
propagates upward if you have parts of

00:11:13,810 --> 00:11:17,860
the lower levels that need to run

00:11:15,430 --> 00:11:20,290
unknown code as root well your upper

00:11:17,860 --> 00:11:22,090
level either has to work around that or

00:11:20,290 --> 00:11:23,530
just deal with that maybe happening

00:11:22,090 --> 00:11:24,670
sometime and you can only make certain

00:11:23,530 --> 00:11:28,990
guarantees about what's gonna happen in

00:11:24,670 --> 00:11:30,760
the middle it's not great so we sort of

00:11:28,990 --> 00:11:31,840
did an experiment on our team or we're

00:11:30,760 --> 00:11:34,060
like okay so what if we were doing

00:11:31,840 --> 00:11:35,290
basically what our p.m. does to what the

00:11:34,060 --> 00:11:36,610
Installer does to build system so

00:11:35,290 --> 00:11:37,660
instead of actually doing thing we open

00:11:36,610 --> 00:11:40,480
the box we throw in all the robots and

00:11:37,660 --> 00:11:42,460
let them build Voltron we take all of

00:11:40,480 --> 00:11:43,720
the pieces and we scrap scrape off all

00:11:42,460 --> 00:11:45,130
of their code from the outside and just

00:11:43,720 --> 00:11:46,540
make them little bricks and just put the

00:11:45,130 --> 00:11:49,090
bricks in place so just like take the

00:11:46,540 --> 00:11:51,910
contents of every package just lay down

00:11:49,090 --> 00:11:52,710
all the contents and then not on any of

00:11:51,910 --> 00:11:56,680
the scriptlets

00:11:52,710 --> 00:11:58,150
at all and it works like to a

00:11:56,680 --> 00:11:59,530
first-degree approximation it works it

00:11:58,150 --> 00:12:00,880
turns out there are some things that

00:11:59,530 --> 00:12:02,170
actually do need to be dynamically

00:12:00,880 --> 00:12:04,780
generated but they're really well known

00:12:02,170 --> 00:12:06,220
I have a different talk about this about

00:12:04,780 --> 00:12:07,390
what rpm scriptlets actually do there's

00:12:06,220 --> 00:12:11,260
only like six things and it's like

00:12:07,390 --> 00:12:12,670
create users you know generate like it's

00:12:11,260 --> 00:12:14,530
basically sometimes you generate a file

00:12:12,670 --> 00:12:16,330
like you have to give it a dynamically

00:12:14,530 --> 00:12:17,500
generate a list of users okay fine

00:12:16,330 --> 00:12:19,600
sometimes you do things like you create

00:12:17,500 --> 00:12:20,950
a host key well you don't always want to

00:12:19,600 --> 00:12:21,970
do that right like you only want to do

00:12:20,950 --> 00:12:24,010
that if you're installing on bare metal

00:12:21,970 --> 00:12:25,810
if you're making a image for the first

00:12:24,010 --> 00:12:26,950
time that's going to be a gold master

00:12:25,810 --> 00:12:28,780
you're gonna replicate everywhere it

00:12:26,950 --> 00:12:30,790
does not need that machine specific key

00:12:28,780 --> 00:12:31,990
so we need to look at all of that but

00:12:30,790 --> 00:12:33,730
that's not what this talk is about the

00:12:31,990 --> 00:12:37,330
point is you kind of throw it all the

00:12:33,730 --> 00:12:40,390
way and it all still works so when we

00:12:37,330 --> 00:12:42,160
did that we managed to make we built a

00:12:40,390 --> 00:12:45,460
thing and this is on our website and

00:12:42,160 --> 00:12:48,040
it's janky but we can put together a

00:12:45,460 --> 00:12:50,020
system about I think was I and Dave can

00:12:48,040 --> 00:12:51,790
confirm this maybe it's a hundred times

00:12:50,020 --> 00:12:52,750
faster than I our current stuff we can

00:12:51,790 --> 00:12:55,810
build

00:12:52,750 --> 00:12:57,310
yeah it was so we had a internal team

00:12:55,810 --> 00:12:59,920
trying to do continuous integration

00:12:57,310 --> 00:13:01,660
stuff on the colonel and so their whole

00:12:59,920 --> 00:13:03,220
deal was you know build a minimal VM

00:13:01,660 --> 00:13:04,959
spin it up do some stuff with it or

00:13:03,220 --> 00:13:06,459
build a mineral system and then some do

00:13:04,959 --> 00:13:08,019
some stuff took them about six minutes

00:13:06,459 --> 00:13:09,519
to build that image and and they can run

00:13:08,019 --> 00:13:11,529
their tests and we could build the

00:13:09,519 --> 00:13:17,769
equivalent image in six seconds and

00:13:11,529 --> 00:13:19,720
that's all I oh so going back to my yes

00:13:17,769 --> 00:13:21,430
this is basically dynamic linking is

00:13:19,720 --> 00:13:23,860
what we're doing there at that point

00:13:21,430 --> 00:13:24,910
what we're doing is taking in the same

00:13:23,860 --> 00:13:28,029
way you do as member you're taking an

00:13:24,910 --> 00:13:31,509
empty process and you're sort of dumping

00:13:28,029 --> 00:13:33,250
in the pieces that you need this is the

00:13:31,509 --> 00:13:35,290
same thing as I am a clinking it and we

00:13:33,250 --> 00:13:38,889
can just sort of borrow a lot of those

00:13:35,290 --> 00:13:41,379
ideas and make image construction way

00:13:38,889 --> 00:13:42,970
easier and way faster this is one of the

00:13:41,379 --> 00:13:46,990
things that elf got right

00:13:42,970 --> 00:13:49,360
that rpm gets wrong where rpm is hard to

00:13:46,990 --> 00:13:51,459
extend like one with the last time we've

00:13:49,360 --> 00:13:52,990
added a couple of tags no and then right

00:13:51,459 --> 00:13:56,319
we had weak dependencies after ten years

00:13:52,990 --> 00:13:57,459
of fighting about it we got we have

00:13:56,319 --> 00:14:00,220
build requires I don't think we have

00:13:57,459 --> 00:14:01,269
test requires yet yeah we've been

00:14:00,220 --> 00:14:04,959
fighting about that one for my entire

00:14:01,269 --> 00:14:08,559
career at hat so like rpm is notoriously

00:14:04,959 --> 00:14:10,990
hard to extend it's also it changes

00:14:08,559 --> 00:14:13,120
without warning like fun fact there is a

00:14:10,990 --> 00:14:15,879
specification for rpm technically in the

00:14:13,120 --> 00:14:17,470
Linux standard base in the AIT's a

00:14:15,879 --> 00:14:19,329
de-facto specification they wrote down

00:14:17,470 --> 00:14:21,309
how rpm work at the time if you

00:14:19,329 --> 00:14:23,500
implement rpm from that specification it

00:14:21,309 --> 00:14:26,339
won't do anything we changed how we

00:14:23,500 --> 00:14:29,050
store file names in rpm headers and

00:14:26,339 --> 00:14:31,480
didn't even upgrade the increment the

00:14:29,050 --> 00:14:32,949
version number of the file format or

00:14:31,480 --> 00:14:33,730
just kind of like change stuff out from

00:14:32,949 --> 00:14:36,100
other people all the time without

00:14:33,730 --> 00:14:37,300
telling them it's not great so this is

00:14:36,100 --> 00:14:40,329
the other thing I'm gonna hammer on to

00:14:37,300 --> 00:14:42,639
us as a community we need to actually

00:14:40,329 --> 00:14:46,360
start documenting how stuff works and

00:14:42,639 --> 00:14:49,500
like commit to not breaking it unless

00:14:46,360 --> 00:14:52,480
we're going to that ten left

00:14:49,500 --> 00:14:54,820
okay cool not commit to not breaking

00:14:52,480 --> 00:14:56,050
things without at least warning like

00:14:54,820 --> 00:14:58,600
incrementing a version number is not

00:14:56,050 --> 00:15:00,400
that hard rpm I think has a 32-bit

00:14:58,600 --> 00:15:02,850
version number so like they could do

00:15:00,400 --> 00:15:05,500
that a couple of times and would be fine

00:15:02,850 --> 00:15:07,360
but the point here at the point that

00:15:05,500 --> 00:15:09,610
this is dynamic linking is a interesting

00:15:07,360 --> 00:15:11,590
one because there's a whole lot of fun

00:15:09,610 --> 00:15:13,270
stuff that would happen if we started

00:15:11,590 --> 00:15:16,000
treating building images like we treat

00:15:13,270 --> 00:15:19,270
dynamic linking and I think this is

00:15:16,000 --> 00:15:20,950
where I run out of slides yeah so I can

00:15:19,270 --> 00:15:22,180
either show you my big outline or I can

00:15:20,950 --> 00:15:24,160
just hand wave at you and I might just

00:15:22,180 --> 00:15:25,060
hand wave and I apologize for the hand

00:15:24,160 --> 00:15:27,580
waving but here we go

00:15:25,060 --> 00:15:29,530
so one of the problems we have with

00:15:27,580 --> 00:15:32,710
containers is that we ship them around

00:15:29,530 --> 00:15:33,790
as statically linked blobs they're kind

00:15:32,710 --> 00:15:35,200
of nuts that really length there's a

00:15:33,790 --> 00:15:38,680
bunch of layers to them in the same way

00:15:35,200 --> 00:15:41,440
that there are layers to static linked

00:15:38,680 --> 00:15:43,360
binaries when you link in stuff you get

00:15:41,440 --> 00:15:44,590
you know you've got your compression

00:15:43,360 --> 00:15:48,190
library and all this you can build them

00:15:44,590 --> 00:15:49,330
and then they're built and then you

00:15:48,190 --> 00:15:50,440
don't really know what's in them anymore

00:15:49,330 --> 00:15:53,110
and this is why we have things like

00:15:50,440 --> 00:15:54,340
container scanning when there is a CV of

00:15:53,110 --> 00:15:55,720
some sort we have to go back and look at

00:15:54,340 --> 00:15:57,460
all of the stuff that everybody built

00:15:55,720 --> 00:15:59,050
and figure out which ones have the

00:15:57,460 --> 00:16:01,210
tainted code and then rebuild all of

00:15:59,050 --> 00:16:03,640
those if we were doing it dynamically

00:16:01,210 --> 00:16:05,950
where instead you're the image that you

00:16:03,640 --> 00:16:08,530
build your container is like an elf

00:16:05,950 --> 00:16:10,390
binary it's your code and some headers

00:16:08,530 --> 00:16:11,890
that say okay I need this version of

00:16:10,390 --> 00:16:13,930
this symbol and in this version of these

00:16:11,890 --> 00:16:15,370
Python libraries the same sort of

00:16:13,930 --> 00:16:19,090
symbols that we're using in our p.m. as

00:16:15,370 --> 00:16:20,830
dependencies with some tweaking mm-hmm

00:16:19,090 --> 00:16:23,050
because we want them to be deterministic

00:16:20,830 --> 00:16:25,630
because as it turns out and I've talked

00:16:23,050 --> 00:16:27,120
about this tomorrow I'm pretty sure OPM

00:16:25,630 --> 00:16:31,470
dependencies are not turing-complete

00:16:27,120 --> 00:16:33,640
in and you can use them to run arbitrary

00:16:31,470 --> 00:16:35,200
calculations we're just not like the

00:16:33,640 --> 00:16:37,270
best thing that you want out of a

00:16:35,200 --> 00:16:38,680
dependency system it's kind of just like

00:16:37,270 --> 00:16:41,430
a fun party trick more than it is

00:16:38,680 --> 00:16:45,520
actually worrisome but it is like a

00:16:41,430 --> 00:16:47,650
thing to talk about anyway point is if

00:16:45,520 --> 00:16:49,660
you have a reasonable dependency system

00:16:47,650 --> 00:16:52,240
like elfs you can pull in just the

00:16:49,660 --> 00:16:53,180
pieces that you need process the startup

00:16:52,240 --> 00:16:55,639
time

00:16:53,180 --> 00:16:59,059
as I understand it most container

00:16:55,639 --> 00:17:01,220
runtimes don't share memory when they

00:16:59,059 --> 00:17:02,660
build or at least with like the thin

00:17:01,220 --> 00:17:04,010
pool stuff when you're building and

00:17:02,660 --> 00:17:05,750
somebody correct me if I'm wrong when

00:17:04,010 --> 00:17:08,059
each container has its own block device

00:17:05,750 --> 00:17:10,309
backing its image which means that the

00:17:08,059 --> 00:17:11,569
block device is different for each of

00:17:10,309 --> 00:17:13,730
them which means that if you have a

00:17:11,569 --> 00:17:16,760
thousand containers using a thousand of

00:17:13,730 --> 00:17:18,770
the same copy of OpenSSL you have a

00:17:16,760 --> 00:17:25,549
thousand copies of it in memory and on

00:17:18,770 --> 00:17:26,750
disk which is like it's not always like

00:17:25,549 --> 00:17:28,339
that okay good so there is some

00:17:26,750 --> 00:17:30,130
improvement but the last less I heard

00:17:28,339 --> 00:17:32,270
that was like that it was so sort of

00:17:30,130 --> 00:17:36,289
people it's like yeah well you need a

00:17:32,270 --> 00:17:39,380
block device so we are I am sort of

00:17:36,289 --> 00:17:42,529
something for a like fairly significant

00:17:39,380 --> 00:17:44,390
change in how we expect a system to

00:17:42,529 --> 00:17:46,520
behave we should expect them to behave

00:17:44,390 --> 00:17:48,200
more like we expect a memory to behave

00:17:46,520 --> 00:17:49,700
like the expectation that you bill to

00:17:48,200 --> 00:17:52,190
write to any part of your disk should be

00:17:49,700 --> 00:17:53,210
like silly because like we don't expect

00:17:52,190 --> 00:17:56,570
you to really write to any part of

00:17:53,210 --> 00:18:00,409
memory that's obviously silly the

00:17:56,570 --> 00:18:02,779
expectation or the expectation that you

00:18:00,409 --> 00:18:03,919
know you can write to the disk and other

00:18:02,779 --> 00:18:06,010
processes will be able to read it by

00:18:03,919 --> 00:18:08,240
default like that's also kind of silly

00:18:06,010 --> 00:18:09,590
we don't always want that that leads to

00:18:08,240 --> 00:18:11,840
a lot of fun problems this is where we

00:18:09,590 --> 00:18:13,370
get you know temp directory attacks

00:18:11,840 --> 00:18:14,120
where you have well-known file names and

00:18:13,370 --> 00:18:15,590
why we have to have temporary

00:18:14,120 --> 00:18:17,179
directories at all is because there are

00:18:15,590 --> 00:18:19,549
well-known if there's a well-known path

00:18:17,179 --> 00:18:21,409
and you assume that every process shares

00:18:19,549 --> 00:18:22,549
the same file system space we'll then

00:18:21,409 --> 00:18:25,250
you have problems we could eliminate

00:18:22,549 --> 00:18:26,929
that entire class of problems a

00:18:25,250 --> 00:18:28,760
container like we can eliminate

00:18:26,929 --> 00:18:29,870
container scanning we don't need to do

00:18:28,760 --> 00:18:31,190
that anymore if we're automatically

00:18:29,870 --> 00:18:34,340
creating stuff that sort of we can

00:18:31,190 --> 00:18:36,230
eliminate yeah directory name attacks by

00:18:34,340 --> 00:18:38,210
dynamically creating your filesystem

00:18:36,230 --> 00:18:41,029
just for you so that other people can

00:18:38,210 --> 00:18:42,740
actually look at your file system so

00:18:41,029 --> 00:18:45,980
that's the world Daiso concept is

00:18:42,740 --> 00:18:50,149
basically let's look at how we put

00:18:45,980 --> 00:18:52,460
together our dependency chains let's try

00:18:50,149 --> 00:18:55,909
to winnow away all the parts of our p.m.

00:18:52,460 --> 00:18:59,210
that are not deterministic let's try to

00:18:55,909 --> 00:19:00,860
make dependencies themselves seen

00:18:59,210 --> 00:19:03,110
and get to a place where we can just

00:19:00,860 --> 00:19:06,110
sort of mash the package contents all

00:19:03,110 --> 00:19:09,830
together when we need it and do that to

00:19:06,110 --> 00:19:12,649
do that effectively back in what dynamic

00:19:09,830 --> 00:19:13,909
linking was invented you needed M maps

00:19:12,649 --> 00:19:15,919
to make it work right because just

00:19:13,909 --> 00:19:18,649
actually copying a whole bunch of memory

00:19:15,919 --> 00:19:21,080
into place that takes a while so then

00:19:18,649 --> 00:19:22,730
we're like hey we've got mm M map if you

00:19:21,080 --> 00:19:25,870
don't know how that works it's basically

00:19:22,730 --> 00:19:28,549
you say hey you tell the colonel put

00:19:25,870 --> 00:19:30,620
this library into this memory space and

00:19:28,549 --> 00:19:33,289
it goes cool okay whether or not it's

00:19:30,620 --> 00:19:35,210
actually in memory yet is not you don't

00:19:33,289 --> 00:19:36,770
have to care the kernel will put it

00:19:35,210 --> 00:19:38,929
there when it needs it we could do the

00:19:36,770 --> 00:19:40,880
same thing with files we could be doing

00:19:38,929 --> 00:19:41,960
this rather than when you start up a

00:19:40,880 --> 00:19:44,840
container rather than building the

00:19:41,960 --> 00:19:46,370
entire container right then we give you

00:19:44,840 --> 00:19:47,960
an empty namespace and when you try to

00:19:46,370 --> 00:19:50,240
look up stuff then we start putting

00:19:47,960 --> 00:19:52,039
stuff into it in fact we already have

00:19:50,240 --> 00:19:55,220
the capability to do this in the kernel

00:19:52,039 --> 00:19:57,830
it's just bind balance so we need to do

00:19:55,220 --> 00:20:00,649
some stuff with rearranging paths to

00:19:57,830 --> 00:20:03,110
make this work but instead of actually

00:20:00,649 --> 00:20:05,000
unhappy decompressing a whole bunch of

00:20:03,110 --> 00:20:07,429
rpms and popping all their contents in

00:20:05,000 --> 00:20:09,140
you could just bind mount the contents

00:20:07,429 --> 00:20:13,010
of each thing that you need into your

00:20:09,140 --> 00:20:15,200
private space for your process this

00:20:13,010 --> 00:20:17,120
should take milliseconds it's gonna it

00:20:15,200 --> 00:20:20,149
requires us to do some janky stuff with

00:20:17,120 --> 00:20:23,000
like where you look the paths that you

00:20:20,149 --> 00:20:25,130
look for libraries but we can do that we

00:20:23,000 --> 00:20:28,210
we have control over the entire system

00:20:25,130 --> 00:20:30,470
we know how to do all of these things so

00:20:28,210 --> 00:20:33,500
where do I so the point that I'm making

00:20:30,470 --> 00:20:35,330
here broadly is that all of the things

00:20:33,500 --> 00:20:37,909
that we need to do to build a system

00:20:35,330 --> 00:20:40,760
where everything is reliable and

00:20:37,909 --> 00:20:42,679
deterministic and shared in a way that

00:20:40,760 --> 00:20:44,029
isn't like it is now like we have

00:20:42,679 --> 00:20:44,539
control over all of it we could just do

00:20:44,029 --> 00:20:47,299
this

00:20:44,539 --> 00:20:49,429
I just need people to like buy in on the

00:20:47,299 --> 00:20:52,100
idea of making a somewhat radical shift

00:20:49,429 --> 00:20:52,970
in how we put things together and I

00:20:52,100 --> 00:20:54,860
don't know

00:20:52,970 --> 00:20:56,360
that's needs with a lot of resistance

00:20:54,860 --> 00:20:58,820
most of the time what I get is what I

00:20:56,360 --> 00:21:00,140
call the MacGyver problem which is sort

00:20:58,820 --> 00:21:02,809
of like this if you for watching the

00:21:00,140 --> 00:21:05,450
Guyver you go back like MacGyver Justino

00:21:02,809 --> 00:21:06,890
Super Duty like we'll fix things bubble

00:21:05,450 --> 00:21:09,440
gum and duct tape and like saves the day

00:21:06,890 --> 00:21:12,470
with ingenuity and using things in

00:21:09,440 --> 00:21:13,400
ungrateful ways well so a lot of times

00:21:12,470 --> 00:21:16,940
we go back and watch an episode of

00:21:13,400 --> 00:21:19,100
MacGyver the entire thing hinges on him

00:21:16,940 --> 00:21:20,780
like unlike somebody needs to get a

00:21:19,100 --> 00:21:22,159
piece of information to somebody else or

00:21:20,780 --> 00:21:24,260
else like the Ambassador is going to

00:21:22,159 --> 00:21:26,030
explode or whatever it is right like I

00:21:24,260 --> 00:21:27,860
don't know why but like you have to tell

00:21:26,030 --> 00:21:29,840
the ambassador not to say whatever it is

00:21:27,860 --> 00:21:31,580
but like if you have cell phones the

00:21:29,840 --> 00:21:33,530
entire plot just falls apart right

00:21:31,580 --> 00:21:35,299
you're just like hey ambassador don't do

00:21:33,530 --> 00:21:38,809
that okay done episode over no needs a

00:21:35,299 --> 00:21:40,610
guy over there so like the problem is if

00:21:38,809 --> 00:21:41,600
I show up in an episode of MacGyver

00:21:40,610 --> 00:21:42,830
and everyone's like what are we gonna do

00:21:41,600 --> 00:21:44,030
the Ambassador is gonna explode and I'm

00:21:42,830 --> 00:21:45,490
like just call him on a cell phone

00:21:44,030 --> 00:21:48,770
everyone's gonna look at me like what

00:21:45,490 --> 00:21:50,690
okay all right so all you need to do

00:21:48,770 --> 00:21:53,150
right it's build a worldwide network of

00:21:50,690 --> 00:21:55,429
radio towers and then in fact pocket

00:21:53,150 --> 00:21:57,350
supercomputers and teach them to talk of

00:21:55,429 --> 00:21:58,520
the radio towers and then you can just

00:21:57,350 --> 00:22:00,409
call him on his pockets a good computer

00:21:58,520 --> 00:22:02,210
and they're like we're gonna go with

00:22:00,409 --> 00:22:03,590
MacGyver's plan because that's gonna

00:22:02,210 --> 00:22:06,200
keep the Ambassador from exploding now

00:22:03,590 --> 00:22:08,720
and it doesn't mean like building this

00:22:06,200 --> 00:22:10,610
network is a bad idea but it means that

00:22:08,720 --> 00:22:11,809
it doesn't solve the problems that

00:22:10,610 --> 00:22:13,460
people are immediately facing I think

00:22:11,809 --> 00:22:15,230
this is the other thing that we as a

00:22:13,460 --> 00:22:17,419
community and an industry have been

00:22:15,230 --> 00:22:19,400
doing is macgyvering the hell out for

00:22:17,419 --> 00:22:20,960
years and not really looking at the

00:22:19,400 --> 00:22:24,049
larger problem of what it is we're

00:22:20,960 --> 00:22:24,919
trying to accomplish and like the larger

00:22:24,049 --> 00:22:26,419
thing about what we're trying to

00:22:24,919 --> 00:22:27,710
accomplish when we do image creation and

00:22:26,419 --> 00:22:31,370
what we're doing with containers is that

00:22:27,710 --> 00:22:34,340
we're trying to sort of extend what we

00:22:31,370 --> 00:22:35,900
do with memory already to the disk

00:22:34,340 --> 00:22:37,309
because we have a lot of stuff like

00:22:35,900 --> 00:22:38,780
interpreted languages like Python that

00:22:37,309 --> 00:22:40,850
want to in the same way that C does

00:22:38,780 --> 00:22:42,289
where it's like okay I might need this

00:22:40,850 --> 00:22:44,090
library so make sure it's available for

00:22:42,289 --> 00:22:46,760
me and the kernel will put it in your

00:22:44,090 --> 00:22:48,500
memory space if it needs it we could do

00:22:46,760 --> 00:22:50,240
the same thing with the file system it

00:22:48,500 --> 00:22:52,549
just makes sense to do it that way but

00:22:50,240 --> 00:22:54,169
there's that doesn't it's the MacGyver

00:22:52,549 --> 00:22:55,070
problem like it makes sense to do it

00:22:54,169 --> 00:22:57,900
that way but we require

00:22:55,070 --> 00:23:00,030
systemic changes to every

00:22:57,900 --> 00:23:02,250
thing we do not huge changes little

00:23:00,030 --> 00:23:05,610
changes but it requires like system-wide

00:23:02,250 --> 00:23:07,350
changes and like you know I can give you

00:23:05,610 --> 00:23:09,240
parts of this like how you store

00:23:07,350 --> 00:23:11,340
everything on disk right you want to do

00:23:09,240 --> 00:23:12,660
it sort of OS freestyle in a content

00:23:11,340 --> 00:23:14,370
addressable store so you get automatic

00:23:12,660 --> 00:23:15,930
deduplication so it's efficient and all

00:23:14,370 --> 00:23:18,000
that good stuff we have all of the

00:23:15,930 --> 00:23:19,710
pieces that we want to build this sort

00:23:18,000 --> 00:23:21,810
of a system we haven't put them all

00:23:19,710 --> 00:23:23,460
together yet and really it's just about

00:23:21,810 --> 00:23:24,870
getting everybody to get the idea in

00:23:23,460 --> 00:23:27,140
their head of what it is we're trying to

00:23:24,870 --> 00:23:29,340
build and then start building toward a

00:23:27,140 --> 00:23:30,420
so that's sort of what this is going to

00:23:29,340 --> 00:23:33,120
be about it was gonna have a lot more

00:23:30,420 --> 00:23:34,620
slides and the will des Eaux thing is

00:23:33,120 --> 00:23:36,270
basically once we get to that point once

00:23:34,620 --> 00:23:38,790
we have made these changes we could have

00:23:36,270 --> 00:23:41,220
a system where you your your program

00:23:38,790 --> 00:23:43,710
your thing maybe it has an elf header on

00:23:41,220 --> 00:23:45,840
it and it actually calls out to well des

00:23:43,710 --> 00:23:47,280
Eaux which then you know dynamically

00:23:45,840 --> 00:23:48,570
constructs an entire file system for

00:23:47,280 --> 00:23:50,760
your thing and that dynamically Force X

00:23:48,570 --> 00:23:52,290
memory space and then it runs like we

00:23:50,760 --> 00:23:54,870
can build all of this all the pieces are

00:23:52,290 --> 00:23:58,470
already there and that's about all I

00:23:54,870 --> 00:24:01,560
wanted to say I think about time so yeah

00:23:58,470 --> 00:24:03,480
are there any questions about any of

00:24:01,560 --> 00:24:06,090
this or do you just want to hear me rant

00:24:03,480 --> 00:24:13,890
about rpm more because I can do that all

00:24:06,090 --> 00:24:16,290
day so is there anyone doing this today

00:24:13,890 --> 00:24:19,320
any of the other distributions and the

00:24:16,290 --> 00:24:21,900
other OS is no as far as I can tell no

00:24:19,320 --> 00:24:24,630
and I have a theory on this but no I've

00:24:21,900 --> 00:24:26,310
asked around to anybody to work wherever

00:24:24,630 --> 00:24:29,700
I could find and there are pieces of it

00:24:26,310 --> 00:24:32,220
I've seen parts of like the making

00:24:29,700 --> 00:24:35,040
building packages more deterministic you

00:24:32,220 --> 00:24:38,220
see a lot of that in Nick's OS and like

00:24:35,040 --> 00:24:40,530
doing automata dating and quick

00:24:38,220 --> 00:24:42,840
generation of images you see from OS

00:24:40,530 --> 00:24:45,630
tree but they're still sort of

00:24:42,840 --> 00:24:47,880
constrained by rpm or their current

00:24:45,630 --> 00:24:50,190
system and so the it takes a large like

00:24:47,880 --> 00:24:51,930
it takes a tea industry right offer

00:24:50,190 --> 00:24:53,010
essentially which is how elf got

00:24:51,930 --> 00:24:55,020
implemented in the first place and

00:24:53,010 --> 00:24:56,490
dynamic linking was that you know the

00:24:55,020 --> 00:24:57,900
industry was a lot smaller than and you

00:24:56,490 --> 00:24:59,730
can kind of throw stuff around a lot

00:24:57,900 --> 00:25:00,600
more easily and there aren't a whole lot

00:24:59,730 --> 00:25:02,279
of people

00:25:00,600 --> 00:25:05,340
companies making operating systems left

00:25:02,279 --> 00:25:06,750
and so there's a lot of macgyvering and

00:25:05,340 --> 00:25:08,429
not a lot of like hey we should all work

00:25:06,750 --> 00:25:09,809
together to do this massive system-wide

00:25:08,429 --> 00:25:12,299
change because for the good of the

00:25:09,809 --> 00:25:13,799
industry containers sort of showed up

00:25:12,299 --> 00:25:16,830
because they scratched a niche but I

00:25:13,799 --> 00:25:18,750
haven't seen any I haven't seen the

00:25:16,830 --> 00:25:21,690
larger effort to attack the larger

00:25:18,750 --> 00:25:23,279
problem that I'm trying to describe I'm

00:25:21,690 --> 00:25:24,929
sorry I should have repeated with the

00:25:23,279 --> 00:25:27,840
question the question was is anybody

00:25:24,929 --> 00:25:36,230
working on this yet and yeah I've asked

00:25:27,840 --> 00:25:38,909
around I haven't seen it yet have you uh

00:25:36,230 --> 00:25:41,759
if you like given any thought to what a

00:25:38,909 --> 00:25:43,679
migration path would look like I mean I

00:25:41,759 --> 00:25:45,990
pathetically go I was working and you

00:25:43,679 --> 00:25:48,809
say yes but get from here there because

00:25:45,990 --> 00:25:51,559
yeah it's kind of disruptive yeah and

00:25:48,809 --> 00:25:53,820
that's that's a big that's a big one um

00:25:51,559 --> 00:25:57,210
and I think the way that we do that is

00:25:53,820 --> 00:25:59,220
not as hard as we might think in that a

00:25:57,210 --> 00:26:01,169
well-designed a little design system

00:25:59,220 --> 00:26:03,450
that you know adheres to a good you know

00:26:01,169 --> 00:26:06,809
model of how we want distribution to

00:26:03,450 --> 00:26:08,850
work would by sort of default like

00:26:06,809 --> 00:26:10,049
eliminating some of the earlier parts of

00:26:08,850 --> 00:26:13,320
what we have now it would be compatible

00:26:10,049 --> 00:26:15,779
with it in the abstract so like what we

00:26:13,320 --> 00:26:17,850
did with our experimental image builder

00:26:15,779 --> 00:26:19,080
was we just imported our PMS we strip

00:26:17,850 --> 00:26:21,179
out the parts that would not be allowed

00:26:19,080 --> 00:26:23,100
in our system but we just imported

00:26:21,179 --> 00:26:24,629
content directly from our PMS and I

00:26:23,100 --> 00:26:29,410
think we also extended it to work with

00:26:24,629 --> 00:26:32,960
NPM modules is that right okay

00:26:29,410 --> 00:26:35,900
okay yeah so yeah the the idea is that

00:26:32,960 --> 00:26:37,700
you can any any model that is sufficient

00:26:35,900 --> 00:26:40,010
to make this work is also sufficient to

00:26:37,700 --> 00:26:42,590
or you can probably wedge existing

00:26:40,010 --> 00:26:45,260
things into it and so the plan is to

00:26:42,590 --> 00:26:48,740
sort of bit by bit look at how the whole

00:26:45,260 --> 00:26:50,150
system works next attributions are a

00:26:48,740 --> 00:26:53,210
loop that's basically right you have

00:26:50,150 --> 00:26:54,590
sources and then you make builds and you

00:26:53,210 --> 00:26:57,680
put bunch of fields together to get an

00:26:54,590 --> 00:26:59,240
image and then the trick is when you did

00:26:57,680 --> 00:27:00,890
that build of when you did that build

00:26:59,240 --> 00:27:03,080
that was inside a build environment

00:27:00,890 --> 00:27:06,380
which is an image so you've got this

00:27:03,080 --> 00:27:08,810
loop going of source to build to image

00:27:06,380 --> 00:27:10,340
thing so you can take pieces of that

00:27:08,810 --> 00:27:12,650
loop and replace them one at a time with

00:27:10,340 --> 00:27:14,720
something takes the same inputs and has

00:27:12,650 --> 00:27:15,830
the same outputs but maybe is different

00:27:14,720 --> 00:27:19,370
in the middle and then you can start

00:27:15,830 --> 00:27:21,650
cutting out pieces like spec files for

00:27:19,370 --> 00:27:23,240
instance oh boy spec files there's like

00:27:21,650 --> 00:27:24,710
four different turing-complete languages

00:27:23,240 --> 00:27:27,200
fighting for dominance in there and it's

00:27:24,710 --> 00:27:30,920
horrifying but if you had something that

00:27:27,200 --> 00:27:32,900
was you know data that you could compile

00:27:30,920 --> 00:27:34,070
into a spec file well now you've got

00:27:32,900 --> 00:27:35,210
something else that you can write that's

00:27:34,070 --> 00:27:36,530
a little more reasonable and we can

00:27:35,210 --> 00:27:38,600
still plug it into our existing stuff

00:27:36,530 --> 00:27:39,980
and then we'll wait what if instead of

00:27:38,600 --> 00:27:41,990
doing an RPM build and then putting the

00:27:39,980 --> 00:27:43,460
RPM content into our weird content store

00:27:41,990 --> 00:27:46,040
why don't we just build straight from

00:27:43,460 --> 00:27:47,540
this thing into the content store I mean

00:27:46,040 --> 00:27:51,050
they're hopping over rpm at that point

00:27:47,540 --> 00:27:53,150
so I part of it is looking at the bigger

00:27:51,050 --> 00:27:54,560
model identifying each piece of the

00:27:53,150 --> 00:27:56,480
system and figuring out which ones we

00:27:54,560 --> 00:27:59,090
can most easily replace with something

00:27:56,480 --> 00:28:00,830
that's compatible but but better which I

00:27:59,090 --> 00:28:03,680
know is a abstract hand-wavy I'll answer

00:28:00,830 --> 00:28:07,330
but I hope that makes sense it seems

00:28:03,680 --> 00:28:07,330
feasible all right cool

00:28:14,400 --> 00:28:20,530
you may actually have touched on my

00:28:17,890 --> 00:28:23,350
question already which was that I've

00:28:20,530 --> 00:28:25,120
first I want to say great you've said it

00:28:23,350 --> 00:28:30,340
way better than I've been ranting for

00:28:25,120 --> 00:28:33,789
the last 15 years to Greg in working

00:28:30,340 --> 00:28:35,559
also with container bills they're doing

00:28:33,789 --> 00:28:37,809
this thing most of the time where we're

00:28:35,559 --> 00:28:41,590
building rpms and then running yum

00:28:37,809 --> 00:28:44,980
inside containers which I need airsick

00:28:41,590 --> 00:28:47,380
bags right but one of the things in

00:28:44,980 --> 00:28:50,140
looking at it may be ways to address

00:28:47,380 --> 00:28:51,850
that specifically was to take the RPM

00:28:50,140 --> 00:28:53,799
system and break it in half and say

00:28:51,850 --> 00:28:57,010
alright here's a build piece which

00:28:53,799 --> 00:28:58,720
creates artifacts and then we take them

00:28:57,010 --> 00:29:03,250
and we put them into an RPM or we put

00:28:58,720 --> 00:29:04,990
them into a container image you may have

00:29:03,250 --> 00:29:06,780
more sophisticated ways of thinking

00:29:04,990 --> 00:29:11,190
about that but that seemed to me to be a

00:29:06,780 --> 00:29:13,510
relatively simple way of reusing one bit

00:29:11,190 --> 00:29:15,669
but then I got to your then I got to

00:29:13,510 --> 00:29:18,250
your point of rpms no one knows how they

00:29:15,669 --> 00:29:19,480
work so right it's hard but you're we

00:29:18,250 --> 00:29:22,090
don't wanna maintain backwards

00:29:19,480 --> 00:29:24,130
compatibility so it's not so bad to be

00:29:22,090 --> 00:29:26,260
like I think you're I think that's the

00:29:24,130 --> 00:29:27,760
right instinct there is to say alright

00:29:26,260 --> 00:29:29,740
we're gonna have something that could do

00:29:27,760 --> 00:29:32,740
and do things a new way but also builds

00:29:29,740 --> 00:29:34,690
the old way if you want it to we didn't

00:29:32,740 --> 00:29:37,990
get as far back in the sort of process

00:29:34,690 --> 00:29:39,640
as looking at the specs side of it I

00:29:37,990 --> 00:29:43,659
mean I have you know obviously big hand

00:29:39,640 --> 00:29:45,190
read the ideas about it but that wasn't

00:29:43,659 --> 00:29:46,780
what we originally started attack and we

00:29:45,190 --> 00:29:50,020
started attacking sort of rpm as a

00:29:46,780 --> 00:29:52,720
storage medium and the dependency

00:29:50,020 --> 00:29:56,770
resolution and image construction start

00:29:52,720 --> 00:29:59,470
part of it yeah exactly and yes I also

00:29:56,770 --> 00:30:01,740
have concerns with that and yes let's

00:29:59,470 --> 00:30:01,740
talk

00:30:07,930 --> 00:30:15,880
the the efficiency in the is

00:30:13,630 --> 00:30:19,180
mind-boggling in containers and it's a

00:30:15,880 --> 00:30:20,170
good solution but lots you know we just

00:30:19,180 --> 00:30:24,700
keep getting more memory faster

00:30:20,170 --> 00:30:28,300
computers bigger than you but it sounded

00:30:24,700 --> 00:30:30,190
like there was a good security viewpoint

00:30:28,300 --> 00:30:32,500
from yours it does seems like a maybe

00:30:30,190 --> 00:30:34,480
the biggest selling point if that's the

00:30:32,500 --> 00:30:35,950
right direction yeah it depends on who

00:30:34,480 --> 00:30:37,090
I'm talking to but yeah there's some

00:30:35,950 --> 00:30:38,140
interesting stuff about that I mean if

00:30:37,090 --> 00:30:40,240
you think about all of the memory

00:30:38,140 --> 00:30:41,770
protection that we've added in elf over

00:30:40,240 --> 00:30:43,030
the years right like you could do an

00:30:41,770 --> 00:30:46,420
equivalent to address space layout

00:30:43,030 --> 00:30:49,690
randomization filesystem layout

00:30:46,420 --> 00:30:51,640
randomization where you have marked in

00:30:49,690 --> 00:30:54,070
your in your container every place where

00:30:51,640 --> 00:30:56,050
you call save in bash and just like we

00:30:54,070 --> 00:30:57,670
do when you're sort of an elf process we

00:30:56,050 --> 00:30:59,440
go through and relocate all of those so

00:30:57,670 --> 00:31:01,810
instead of being bin bash its some

00:30:59,440 --> 00:31:03,400
randomized paths and when we link in bin

00:31:01,810 --> 00:31:05,350
bash into your image we put it at that

00:31:03,400 --> 00:31:07,810
randomized path so even you don't know

00:31:05,350 --> 00:31:10,150
where bin Bash is so like your attacker

00:31:07,810 --> 00:31:11,200
can never run a shell because they don't

00:31:10,150 --> 00:31:13,510
know where it is and you don't know

00:31:11,200 --> 00:31:16,420
where it is all of the protections that

00:31:13,510 --> 00:31:17,800
we have for memory we can apply equally

00:31:16,420 --> 00:31:18,550
to the filesystem which is really

00:31:17,800 --> 00:31:20,410
interesting when you talk about

00:31:18,550 --> 00:31:22,840
interpreted languages that need the file

00:31:20,410 --> 00:31:24,250
system to get their libraries it's sort

00:31:22,840 --> 00:31:27,070
of a wonder we didn't do it before and

00:31:24,250 --> 00:31:28,180
from from my point of view but uh yeah I

00:31:27,070 --> 00:31:29,260
think for a certain crowd of folks

00:31:28,180 --> 00:31:30,640
that's a very interesting I have a

00:31:29,260 --> 00:31:33,160
friend who works for the DoD who is very

00:31:30,640 --> 00:31:36,160
interested in this very problem so yeah

00:31:33,160 --> 00:31:39,880
I think that's um something worth

00:31:36,160 --> 00:31:42,100
exploring further and yeah I do again

00:31:39,880 --> 00:31:44,320
this is a general thing any ideas that

00:31:42,100 --> 00:31:46,900
this makes you have about what you could

00:31:44,320 --> 00:31:48,760
do with a system like this I'd love to

00:31:46,900 --> 00:31:50,470
hear because I know the parts that I

00:31:48,760 --> 00:31:52,510
care about having done like installs and

00:31:50,470 --> 00:31:53,710
upgrades for like way too many years but

00:31:52,510 --> 00:31:55,480
I want to hear about the other stuff

00:31:53,710 --> 00:31:57,070
like I have vague notions about security

00:31:55,480 --> 00:31:58,510
things that I don't know what specific

00:31:57,070 --> 00:32:00,970
classes of problems it would eliminate

00:31:58,510 --> 00:32:03,760
for your stuff so please come talk to me

00:32:00,970 --> 00:32:07,770
let's figure this stuff out anything

00:32:03,760 --> 00:32:07,770
else we have time for one last question

00:32:09,560 --> 00:32:12,720
so yeah you brought up Bosch and

00:32:11,700 --> 00:32:14,790
actually this is where I'm trying to

00:32:12,720 --> 00:32:16,650
wrap my head around this so if all

00:32:14,790 --> 00:32:19,050
processes only had access to

00:32:16,650 --> 00:32:21,990
I guess the files that they will sort of

00:32:19,050 --> 00:32:25,740
own so how memory does how would like an

00:32:21,990 --> 00:32:27,510
interactive Vash shall work I teach an

00:32:25,740 --> 00:32:29,700
intro like the command-line course right

00:32:27,510 --> 00:32:30,720
and so they learn about CD and all that

00:32:29,700 --> 00:32:33,030
kind of stuff so how would something

00:32:30,720 --> 00:32:34,590
like that exists in the environment

00:32:33,030 --> 00:32:37,530
you're thinking of

00:32:34,590 --> 00:32:42,960
in what sense like how would the what

00:32:37,530 --> 00:32:44,160
part of that would be tricky that could

00:32:42,960 --> 00:32:47,100
go to wherever in the directory

00:32:44,160 --> 00:32:48,840
hierarchy that wanted oh well so your

00:32:47,100 --> 00:32:50,730
your bash process is going to have its

00:32:48,840 --> 00:32:51,930
own memory view so yeah you're gonna

00:32:50,730 --> 00:32:53,190
want to have like we do with this sort

00:32:51,930 --> 00:32:54,540
of file system containers like there

00:32:53,190 --> 00:32:55,770
isn't you're gonna need a set of tools

00:32:54,540 --> 00:32:56,880
and this is what I'm alluding to you're

00:32:55,770 --> 00:32:58,920
gonna need a set of tools that look at

00:32:56,880 --> 00:33:02,670
these sort of your system is going to

00:32:58,920 --> 00:33:04,530
have a root content store that contains

00:33:02,670 --> 00:33:05,760
all of the possible packages everything

00:33:04,530 --> 00:33:07,410
on your system is going to need you're

00:33:05,760 --> 00:33:10,110
gonna want something that's your sort of

00:33:07,410 --> 00:33:12,240
hypervisor login whatever a standard

00:33:10,110 --> 00:33:13,920
workstation type shell and that one's

00:33:12,240 --> 00:33:15,780
gonna have been bash in there in the

00:33:13,920 --> 00:33:19,260
normal place your usual this is how you

00:33:15,780 --> 00:33:20,850
log in so like that that contained image

00:33:19,260 --> 00:33:22,890
is gonna be a standard whatever but all

00:33:20,850 --> 00:33:26,510
of your other ones can be funkier if

00:33:22,890 --> 00:33:29,220
they want to so when you log into your

00:33:26,510 --> 00:33:30,810
your few that your shell sort of defines

00:33:29,220 --> 00:33:33,030
is what things should be in its file

00:33:30,810 --> 00:33:35,250
system but it's not gonna get everything

00:33:33,030 --> 00:33:38,280
for everybody on the system right like

00:33:35,250 --> 00:33:40,110
if you don't use PHP at the command line

00:33:38,280 --> 00:33:41,670
you're not gonna have PHP in there

00:33:40,110 --> 00:33:44,040
there's gonna be another set of tools

00:33:41,670 --> 00:33:46,470
that used to look at the global or not a

00:33:44,040 --> 00:33:48,810
little bit your systems content store to

00:33:46,470 --> 00:33:52,340
say oh okay I do have this copy of PHP

00:33:48,810 --> 00:33:52,340
here or whatever

00:33:54,250 --> 00:33:58,460
yes yeah exactly

00:33:56,570 --> 00:34:00,380
or like it's a get or a get style

00:33:58,460 --> 00:34:01,760
content store richness content you have

00:34:00,380 --> 00:34:03,260
a package and your packages are all in

00:34:01,760 --> 00:34:04,400
some big heap and when you start a

00:34:03,260 --> 00:34:07,070
process you pull the right ones out of

00:34:04,400 --> 00:34:08,600
the heap and you run them and your login

00:34:07,070 --> 00:34:10,159
can be in that heat but it's not gonna

00:34:08,600 --> 00:34:11,300
have everything in the heap unless you

00:34:10,159 --> 00:34:11,600
really want it to but why would you do

00:34:11,300 --> 00:34:13,190
that

00:34:11,600 --> 00:34:18,010
and there's collisions and stuff you

00:34:13,190 --> 00:34:20,600
can't really do that but anywhere yeah

00:34:18,010 --> 00:34:22,370
no that's a it is an interesting point

00:34:20,600 --> 00:34:25,280
because it sort of disrupts the idea of

00:34:22,370 --> 00:34:28,070
logging into the system because there

00:34:25,280 --> 00:34:30,230
isn't a system there is each thing gets

00:34:28,070 --> 00:34:32,120
its own view of the larger whole of the

00:34:30,230 --> 00:34:34,100
components that are used by all of them

00:34:32,120 --> 00:34:36,110
but there isn't one canonical thing that

00:34:34,100 --> 00:34:38,810
unless you're directly looking at the

00:34:36,110 --> 00:34:41,659
store itself did that make sense yeah

00:34:38,810 --> 00:34:44,000
okay cool and I guess that's all I got

00:34:41,659 --> 00:34:46,840
time for thank you all very much I

00:34:44,000 --> 00:34:46,840
really appreciate

00:34:50,080 --> 00:34:55,450
great our next talk is going to start in

00:34:52,280 --> 00:34:55,450
five minutes so stick around

00:35:02,930 --> 00:35:10,670
you might call it situated you need to

00:35:06,090 --> 00:35:10,670
use your own slicers you want yes

00:36:20,170 --> 00:36:25,510
okay yeah

00:36:31,890 --> 00:36:41,230
now stationed right wait how do you want

00:36:37,810 --> 00:36:43,330
I am sure 99 of psychotherapeutic good

00:36:41,230 --> 00:36:45,880
it's all yours one of this decimal this

00:36:43,330 --> 00:36:50,550
is even us in your sign doesn't you need

00:36:45,880 --> 00:36:53,820
to do it already like doers get too many

00:36:50,550 --> 00:36:55,800
this mean

00:36:53,820 --> 00:36:57,330
 amazing idea just like figure

00:36:55,800 --> 00:36:58,740
out like they wanted your questions and

00:36:57,330 --> 00:37:00,510
etiquette Maxim's and those or the

00:36:58,740 --> 00:37:01,920
Russians to give on the time frame be

00:37:00,510 --> 00:37:05,180
like ten minutes before our you know

00:37:01,920 --> 00:37:07,170
like this five minutes everyone that

00:37:05,180 --> 00:37:11,570
make sure they have the imperfections

00:37:07,170 --> 00:37:11,570
make our butt

00:37:14,339 --> 00:37:18,900
you need to talk with them about how you

00:37:16,660 --> 00:37:18,900

YouTube URL: https://www.youtube.com/watch?v=rboTNTbTn-E


