Title: Add Authentication to your App, No Code Required
Publication date: 2019-02-25
Playlist: DevConfUS 2018
Description: 
	Ever found yourself wanting to add authentication to an application but dreading writing all that code to deal with OAuth or passwords?

In this session, we'll cover using the nginx auth_request module to quickly add authentication to any service you're running without writing code. Lasso, a microservice written in Go, handles the OAuth dance to any number of different auth providers so you don't have to.

We'll cover using nginx + Lasso for a few different use cases:

* protecting an internal application by limiting logins to people in your company
* protecting an external application by requiring users authente
* running a application with public access and optionally authenticating users

You should be familiar with basic configuration of nginx to get the most out of this talk.
Captions: 
	00:00:02,550 --> 00:00:10,830
I grab something like I assume that this

00:00:05,100 --> 00:00:12,690
the right right window that's just for

00:00:10,830 --> 00:00:15,620
the video though right I need the Indies

00:00:12,690 --> 00:00:19,790
the audio mic for the remote

00:00:15,620 --> 00:00:19,790
[Music]

00:00:30,019 --> 00:00:36,760
I think out of the speakers do only that

00:00:35,969 --> 00:00:38,239
HP bar

00:00:36,760 --> 00:00:47,250
[Music]

00:00:38,239 --> 00:00:50,100
yeah I'll be great it's gonna be it's

00:00:47,250 --> 00:01:03,300
gonna be supposed to be ten minutes of

00:00:50,100 --> 00:01:04,710
questions at the end actually you know

00:01:03,300 --> 00:01:07,670
how much I think I have a clock on my

00:01:04,710 --> 00:01:07,670
powerpoint I'll be fine

00:01:11,710 --> 00:01:19,819
[Music]

00:01:43,110 --> 00:01:51,080
all right so this is Aaron and he's

00:01:46,650 --> 00:01:52,770
going to talk about authentication so

00:01:51,080 --> 00:01:54,900
get ready for all that

00:01:52,770 --> 00:01:57,510
and at the end if you have questions

00:01:54,900 --> 00:01:58,250
there will be time for questions so hold

00:01:57,510 --> 00:01:59,960
on to those

00:01:58,250 --> 00:02:04,320
[Music]

00:01:59,960 --> 00:02:08,100
yeah thanks I hope everyone's doing ok

00:02:04,320 --> 00:02:11,390
this late in the day you know it's a lot

00:02:08,100 --> 00:02:14,280
of sessions so yeah I'm Aaron Trekkie

00:02:11,390 --> 00:02:15,480
Aaron PK on twitter and PK comm on the

00:02:14,280 --> 00:02:19,800
Internet

00:02:15,480 --> 00:02:22,830
I'm a developer advocate at octa and the

00:02:19,800 --> 00:02:24,270
we have a Twitter account as well do a

00:02:22,830 --> 00:02:28,500
lot of blog posts about OAuth and

00:02:24,270 --> 00:02:30,750
authentication and things there I also

00:02:28,500 --> 00:02:32,880
maintain a auth net which if you're

00:02:30,750 --> 00:02:34,680
familiar with if you ever encountered

00:02:32,880 --> 00:02:38,100
velocity probably landed on that site at

00:02:34,680 --> 00:02:39,690
some point it's it's publicly editable

00:02:38,100 --> 00:02:41,790
as well it's up on github so if you ever

00:02:39,690 --> 00:02:43,500
have any things you want to add to it

00:02:41,790 --> 00:02:47,280
change feel free you send a pull request

00:02:43,500 --> 00:02:48,920
I wrote a book about OAuth commonality

00:02:47,280 --> 00:02:50,970
simplified try to trying to make it

00:02:48,920 --> 00:02:54,750
easier to understand for people who are

00:02:50,970 --> 00:02:57,780
getting into that but I'm here to talk

00:02:54,750 --> 00:03:00,209
about something thank you Joe off this

00:02:57,780 --> 00:03:06,420
time start starting with a little story

00:03:00,209 --> 00:03:07,920
about a avocado company and this is this

00:03:06,420 --> 00:03:13,580
is the website for the company avocado

00:03:07,920 --> 00:03:15,630
lol it's a real website and this

00:03:13,580 --> 00:03:16,980
theoretical company it doesn't really

00:03:15,630 --> 00:03:19,110
matter what they do let's say they make

00:03:16,980 --> 00:03:23,450
custom avocados custom printed labels

00:03:19,110 --> 00:03:26,130
and avocados and they start out

00:03:23,450 --> 00:03:28,590
launching just a static website for

00:03:26,130 --> 00:03:33,650
their company on avocado - lol and as

00:03:28,590 --> 00:03:36,579
they start hiring people on growing they

00:03:33,650 --> 00:03:42,019
and

00:03:36,579 --> 00:03:44,890
add a private workspace for managing

00:03:42,019 --> 00:03:47,810
brand assets and things like that for

00:03:44,890 --> 00:03:49,549
the employees of the company but they

00:03:47,810 --> 00:03:51,349
don't want that to be public on it and

00:03:49,549 --> 00:03:54,530
that's instead they stick it behind

00:03:51,349 --> 00:03:56,450
their private network you know easiest

00:03:54,530 --> 00:03:59,060
way to do access control right make it

00:03:56,450 --> 00:03:59,989
not accessible to the Internet then they

00:03:59,060 --> 00:04:00,709
realize that a bunch of people are

00:03:59,989 --> 00:04:02,180
working from home

00:04:00,709 --> 00:04:04,970
and don't have access to the private

00:04:02,180 --> 00:04:08,150
network so they move it back out to the

00:04:04,970 --> 00:04:12,680
Internet and then add a login form and a

00:04:08,150 --> 00:04:16,510
user database so as they grow they build

00:04:12,680 --> 00:04:20,810
on they start adding more internal

00:04:16,510 --> 00:04:23,360
subdomains like stat servers showing

00:04:20,810 --> 00:04:25,789
like I'm Union for server to server

00:04:23,360 --> 00:04:28,789
monitoring unit just publishes all of

00:04:25,789 --> 00:04:30,460
its files as static HTML and static

00:04:28,789 --> 00:04:33,229
assets so in order to protect those

00:04:30,460 --> 00:04:34,910
there's no like database you can put in

00:04:33,229 --> 00:04:40,099
front of it there's no login so they

00:04:34,910 --> 00:04:42,320
just use an HT password file and then

00:04:40,099 --> 00:04:45,770
they set up a continuous integration

00:04:42,320 --> 00:04:48,800
server and that one happens to have

00:04:45,770 --> 00:04:51,770
github off built in so now at this point

00:04:48,800 --> 00:04:54,949
as the company's been growing they have

00:04:51,770 --> 00:04:56,560
three places to manage users so when a

00:04:54,949 --> 00:04:58,760
new person joins or when someone leaves

00:04:56,560 --> 00:05:00,440
they have to have the youth use the wiki

00:04:58,760 --> 00:05:02,510
account they have to add them to the HT

00:05:00,440 --> 00:05:06,370
password file they have to add the

00:05:02,510 --> 00:05:08,840
person to the github organization so

00:05:06,370 --> 00:05:12,440
obviously that's not ideal so they go

00:05:08,840 --> 00:05:15,010
looking for new solutions and find some

00:05:12,440 --> 00:05:17,720
sort of like single sign-on thing and

00:05:15,010 --> 00:05:18,919
set up a new server for that witness own

00:05:17,720 --> 00:05:21,620
user database and then try to tie these

00:05:18,919 --> 00:05:24,500
all in together managed to find a wiki

00:05:21,620 --> 00:05:26,810
plugin that handles single sign-on with

00:05:24,500 --> 00:05:29,060
that server they managed to find a

00:05:26,810 --> 00:05:31,419
plugin for the CI system but then what

00:05:29,060 --> 00:05:33,790
do they do with this pile of HTML files

00:05:31,419 --> 00:05:35,860
somehow integrating that with it

00:05:33,790 --> 00:05:41,260
there's gotta be a better way to do this

00:05:35,860 --> 00:05:43,440
so thankfully there is this little cool

00:05:41,260 --> 00:05:47,140
thing that's already part of nginx

00:05:43,440 --> 00:05:48,910
called the author quest module and I was

00:05:47,140 --> 00:05:51,730
pretty surprised to see that this is um

00:05:48,910 --> 00:05:54,190
it's part of chords in nginx but it's

00:05:51,730 --> 00:05:56,110
not there by default you do have to add

00:05:54,190 --> 00:05:59,830
a flag when you're compiling into next

00:05:56,110 --> 00:06:04,140
to enable it so what this ends up doing

00:05:59,830 --> 00:06:10,330
though is this basically sits between

00:06:04,140 --> 00:06:12,100
your sits between all your servers and

00:06:10,330 --> 00:06:14,050
any time a request comes in so public

00:06:12,100 --> 00:06:15,730
requests of this site go through like

00:06:14,050 --> 00:06:16,900
normal but if you've configured the

00:06:15,730 --> 00:06:20,590
haunts of quest module for these

00:06:16,900 --> 00:06:22,390
subdomains before a request goes in hits

00:06:20,590 --> 00:06:24,250
a subdomain it first makes a sub request

00:06:22,390 --> 00:06:26,740
out to something else that you defined

00:06:24,250 --> 00:06:28,930
and depending on what HTTP code that

00:06:26,740 --> 00:06:32,640
server returns it will either allow or

00:06:28,930 --> 00:06:36,520
deny the request down to the backend

00:06:32,640 --> 00:06:39,700
it's not too hard to configure but the

00:06:36,520 --> 00:06:41,440
docs on nginx are a little bit rough

00:06:39,700 --> 00:06:45,730
around the edges so we'll walk through

00:06:41,440 --> 00:06:48,820
some of that this is basically the bare

00:06:45,730 --> 00:06:53,590
minimum you need in nginx to set it up

00:06:48,820 --> 00:06:56,470
so the first you tell it to enable this

00:06:53,590 --> 00:07:00,130
sub request that's the location that

00:06:56,470 --> 00:07:03,190
nginx will send the request to and then

00:07:00,130 --> 00:07:06,060
you handle that location in your nginx

00:07:03,190 --> 00:07:08,170
config and proxy it back to some other

00:07:06,060 --> 00:07:11,230
system that's going to decide whether or

00:07:08,170 --> 00:07:12,490
not the user is allowed to see it we

00:07:11,230 --> 00:07:14,050
also don't care by the request spotting

00:07:12,490 --> 00:07:15,550
so we just have it stripping the body

00:07:14,050 --> 00:07:16,870
that makes this request go faster

00:07:15,550 --> 00:07:21,850
because it's now also passing the whole

00:07:16,870 --> 00:07:24,070
body through so you have this new thing

00:07:21,850 --> 00:07:27,840
we're going to call it log and avacado

00:07:24,070 --> 00:07:29,800
LOL and that thing is responsible for

00:07:27,840 --> 00:07:32,830
authenticating users and getting the log

00:07:29,800 --> 00:07:35,260
in and that way all the user management

00:07:32,830 --> 00:07:38,919
is contained in that one piece so how

00:07:35,260 --> 00:07:42,010
does that actually authenticate people

00:07:38,919 --> 00:07:44,750
the author quest module doesn't have any

00:07:42,010 --> 00:07:47,000
concept of what is required to

00:07:44,750 --> 00:07:48,740
authenticate but just says if this

00:07:47,000 --> 00:07:52,220
endpoint returns 200 it all at the

00:07:48,740 --> 00:07:53,030
requester so there's this cool project

00:07:52,220 --> 00:07:58,790
called

00:07:53,030 --> 00:07:59,750
lasso and this is essentially a little

00:07:58,790 --> 00:08:01,790
micro service that handles

00:07:59,750 --> 00:08:05,950
authenticating users it's written didn't

00:08:01,790 --> 00:08:08,990
go so it's very easy to deploy it has

00:08:05,950 --> 00:08:10,430
configurable providers so you can swap

00:08:08,990 --> 00:08:11,479
out you can choose how you want to

00:08:10,430 --> 00:08:14,270
actually authenticate people whether

00:08:11,479 --> 00:08:17,570
that's via github users or a custom

00:08:14,270 --> 00:08:19,639
OAuth server you get to decide how long

00:08:17,570 --> 00:08:20,930
the sessions last so you can decide

00:08:19,639 --> 00:08:22,790
whether people are logged in for just

00:08:20,930 --> 00:08:24,800
like two hours and after the

00:08:22,790 --> 00:08:26,360
authenticated or if you want to just set

00:08:24,800 --> 00:08:30,440
a cookie the last 10 years and they

00:08:26,360 --> 00:08:32,240
never have to log in again this micro

00:08:30,440 --> 00:08:35,870
service is the one that is gonna be

00:08:32,240 --> 00:08:37,039
handling that post request or the sub

00:08:35,870 --> 00:08:41,330
request from nginx

00:08:37,039 --> 00:08:43,339
in the return of 200 or 401 and the way

00:08:41,330 --> 00:08:45,710
that this remembers whether people are

00:08:43,339 --> 00:08:48,670
logged in is by setting a cookie which

00:08:45,710 --> 00:08:51,170
is it John which is the self encoded

00:08:48,670 --> 00:08:52,820
token so there's no database no storage

00:08:51,170 --> 00:08:56,240
requirements and it's very fast to

00:08:52,820 --> 00:09:00,260
validate it so in order to set this up

00:08:56,240 --> 00:09:02,360
we're gonna take our normal stats

00:09:00,260 --> 00:09:05,240
avacado server blocker we're gonna add

00:09:02,360 --> 00:09:07,280
that off request Alain to it that's

00:09:05,240 --> 00:09:09,710
telling it to send that sub request to

00:09:07,280 --> 00:09:11,540
that half that passes can be handled by

00:09:09,710 --> 00:09:13,970
this middle chunk which is basically

00:09:11,540 --> 00:09:18,110
proxy that requests back to the go micro

00:09:13,970 --> 00:09:23,500
service which is listening on localhost

00:09:18,110 --> 00:09:23,500
port and 9090 and then

00:09:23,680 --> 00:09:28,880
that will when the users not logged in

00:09:26,300 --> 00:09:31,640
that's gonna return 401 so then over

00:09:28,880 --> 00:09:34,670
here we have it say okay when the

00:09:31,640 --> 00:09:37,580
service returns 401 we're going to do

00:09:34,670 --> 00:09:39,830
this which is redirecting to that

00:09:37,580 --> 00:09:42,230
service to tell that service to log the

00:09:39,830 --> 00:09:45,410
user in so we'll walk through this in a

00:09:42,230 --> 00:09:47,810
minute and and then we need a new server

00:09:45,410 --> 00:09:51,800
block for actually configuring the

00:09:47,810 --> 00:09:54,350
hostname log and avocado viola and

00:09:51,800 --> 00:09:58,010
that's basically just proxying to the go

00:09:54,350 --> 00:09:59,450
mic receivers as well so that it has a

00:09:58,010 --> 00:10:02,960
public hostname so that you can be

00:09:59,450 --> 00:10:07,490
visited in a browser so with this setup

00:10:02,960 --> 00:10:09,860
you can configure lasso to actually

00:10:07,490 --> 00:10:11,330
authenticate users via a number of

00:10:09,860 --> 00:10:13,430
different ways depending on what you're

00:10:11,330 --> 00:10:16,790
trying to do it has built-in support for

00:10:13,430 --> 00:10:19,100
github it has Google OAuth support you

00:10:16,790 --> 00:10:21,350
can even point it at your own WordPress

00:10:19,100 --> 00:10:23,990
blog to use your own WordPress users as

00:10:21,350 --> 00:10:27,440
your user store and you can find add a

00:10:23,990 --> 00:10:29,930
custom OAuth server as well so this is

00:10:27,440 --> 00:10:35,780
working like this when this is all set

00:10:29,930 --> 00:10:39,080
up someone visits stats lol nginx says

00:10:35,780 --> 00:10:42,080
is there a cookie already says I'm gonna

00:10:39,080 --> 00:10:43,820
ask that go micro service if the users

00:10:42,080 --> 00:10:46,520
logged in there's no cookie so that

00:10:43,820 --> 00:10:50,570
service returns 401 which redirects the

00:10:46,520 --> 00:10:52,100
user to the login page this is just a

00:10:50,570 --> 00:10:53,900
thing that starts the OAuth request

00:10:52,100 --> 00:10:56,390
which with whatever provider you guys

00:10:53,900 --> 00:10:58,460
set up in this case Google so this is

00:10:56,390 --> 00:11:02,030
the first thing the user sees those two

00:10:58,460 --> 00:11:03,350
redirects happen almost instantly and

00:11:02,030 --> 00:11:08,410
then the user sees okay we're trying to

00:11:03,350 --> 00:11:10,730
login on Google and then after they

00:11:08,410 --> 00:11:14,870
click that account they get redirected

00:11:10,730 --> 00:11:18,830
back to the login page which issues the

00:11:14,870 --> 00:11:21,740
cookies and then redirects back to the

00:11:18,830 --> 00:11:22,860
stats page and now they have a cookie so

00:11:21,740 --> 00:11:24,360
they're authenticated

00:11:22,860 --> 00:11:27,840
so we're gonna walk through that again

00:11:24,360 --> 00:11:31,920
in a different form so it starts out

00:11:27,840 --> 00:11:34,530
with the first request with from a new

00:11:31,920 --> 00:11:37,440
user with no cookie from the browser to

00:11:34,530 --> 00:11:41,760
nginx nginx passes that request on to

00:11:37,440 --> 00:11:46,530
lasso lasso says there's no cookie here

00:11:41,760 --> 00:11:48,570
so returned 401 nginx returns 302 back

00:11:46,530 --> 00:11:52,620
to the browser from that config block we

00:11:48,570 --> 00:11:55,910
set up at that point the browser then

00:11:52,620 --> 00:11:59,310
talks to lasso directly and says I'm

00:11:55,910 --> 00:12:04,590
starting the login process please lasso

00:11:59,310 --> 00:12:06,660
says great go to Google to log n so then

00:12:04,590 --> 00:12:10,170
the browser doesn't normal Google OAuth

00:12:06,660 --> 00:12:14,280
flow which is go fetch go show the

00:12:10,170 --> 00:12:15,810
prompt at Google Google says do you all

00:12:14,280 --> 00:12:18,570
want to continue logging into this app

00:12:15,810 --> 00:12:21,450
these are clicks yes and then it sends

00:12:18,570 --> 00:12:24,240
back a 302 back to the login page with a

00:12:21,450 --> 00:12:26,370
code in the query string so the browser

00:12:24,240 --> 00:12:31,380
fetches the login page with a code in

00:12:26,370 --> 00:12:34,590
the query string behind the scenes lasso

00:12:31,380 --> 00:12:37,260
now takes that code and gets an access

00:12:34,590 --> 00:12:38,880
token from Google and finds a user name

00:12:37,260 --> 00:12:41,760
of the person who logged in or the email

00:12:38,880 --> 00:12:45,540
I just have to logged in and then sets

00:12:41,760 --> 00:12:48,210
the cookie and then redirects back in

00:12:45,540 --> 00:12:49,830
the search page and now that first

00:12:48,210 --> 00:12:52,650
request happens again but the send with

00:12:49,830 --> 00:12:56,820
a cookie and because the cookies their

00:12:52,650 --> 00:12:58,560
lasso says yes this user is is logged in

00:12:56,820 --> 00:13:02,460
make sure it's 200 and then it can

00:12:58,560 --> 00:13:06,060
return the page the really cool part

00:13:02,460 --> 00:13:08,430
though is that this happens so fast that

00:13:06,060 --> 00:13:09,480
the user never even really knows that

00:13:08,430 --> 00:13:11,250
there was anything in the middle they

00:13:09,480 --> 00:13:15,360
never see anything from that from lasso

00:13:11,250 --> 00:13:16,320
it's completely invisible so there's a

00:13:15,360 --> 00:13:19,410
couple of different ways you can

00:13:16,320 --> 00:13:20,390
configure lasso depending on what you're

00:13:19,410 --> 00:13:23,570
trying to do

00:13:20,390 --> 00:13:26,000
you can if you're using Google for

00:13:23,570 --> 00:13:28,730
example you know anybody can have a

00:13:26,000 --> 00:13:32,300
Google account so you can limit it to

00:13:28,730 --> 00:13:35,839
the domain name of the email address so

00:13:32,300 --> 00:13:39,200
you can say I'm only gonna allow people

00:13:35,839 --> 00:13:43,760
with an email address ending in avocado

00:13:39,200 --> 00:13:45,649
lol to be able to actually see the the

00:13:43,760 --> 00:13:48,470
content behind it behind it the other

00:13:45,649 --> 00:13:52,010
way is if you're using like a custom

00:13:48,470 --> 00:13:54,709
Roth server then if the user can log in

00:13:52,010 --> 00:13:56,600
at all then they're authorized so that

00:13:54,709 --> 00:13:58,399
basically you don't need to then like

00:13:56,600 --> 00:14:00,140
those specific accounts or domains you

00:13:58,399 --> 00:14:01,760
just say if the user can log in to the

00:14:00,140 --> 00:14:06,279
server that means they can access the

00:14:01,760 --> 00:14:09,649
backend the other mode it has is if you

00:14:06,279 --> 00:14:13,670
if you want the like a read-only version

00:14:09,649 --> 00:14:19,160
of a site to be public with no

00:14:13,670 --> 00:14:21,290
authentication you can then have have

00:14:19,160 --> 00:14:23,060
less so pass the request through or

00:14:21,290 --> 00:14:27,350
acknowledge even without a cookie say

00:14:23,060 --> 00:14:28,970
it's okay but then if you log in the

00:14:27,350 --> 00:14:30,320
backend will get the name of the user

00:14:28,970 --> 00:14:31,730
who is logged in so you can give them

00:14:30,320 --> 00:14:34,220
additional privileges if they're logged

00:14:31,730 --> 00:14:37,670
in so you could you like read-only

00:14:34,220 --> 00:14:40,519
public when you log in to edit so last

00:14:37,670 --> 00:14:43,040
night was configured using a camel file

00:14:40,519 --> 00:14:48,320
so it's pretty it's pretty easy this is

00:14:43,040 --> 00:14:51,589
an example of Google so we're gonna say

00:14:48,320 --> 00:14:54,370
require every request to be authentic a

00:14:51,589 --> 00:14:57,680
so this is not a publicly accessible

00:14:54,370 --> 00:15:00,829
content on the back end we are going to

00:14:57,680 --> 00:15:02,959
only allow users at the domains below

00:15:00,829 --> 00:15:04,730
and they have to have an email address

00:15:02,959 --> 00:15:07,010
at that domain and then you go and you

00:15:04,730 --> 00:15:08,710
make a google app and you plug in the

00:15:07,010 --> 00:15:10,380
client ID and a client secret here

00:15:08,710 --> 00:15:14,390
[Music]

00:15:10,380 --> 00:15:17,610
the other mode you can do is a custom

00:15:14,390 --> 00:15:21,420
co-author opening connects server so

00:15:17,610 --> 00:15:24,240
this is an example of again require

00:15:21,420 --> 00:15:28,230
authentication at request but allow all

00:15:24,240 --> 00:15:30,210
users is set to true because if they

00:15:28,230 --> 00:15:31,320
have an account at your custom server

00:15:30,210 --> 00:15:33,810
it's assumed that the part of your

00:15:31,320 --> 00:15:35,010
company and that they can log-in and

00:15:33,810 --> 00:15:39,660
then for this case you need to actually

00:15:35,010 --> 00:15:44,550
go and provide the URLs to your overni

00:15:39,660 --> 00:15:46,320
connects to room another option is if

00:15:44,550 --> 00:15:50,580
you have a wordpress blog you can go and

00:15:46,320 --> 00:15:54,170
install install the plug-in to enable it

00:15:50,580 --> 00:16:01,260
as an OAuth server and then you provide

00:15:54,170 --> 00:16:02,280
your WordPress off URL here and this one

00:16:01,260 --> 00:16:04,320
will again require authentication

00:16:02,280 --> 00:16:07,140
whatever request that's basically just

00:16:04,320 --> 00:16:11,820
the WordPress Roth server config and now

00:16:07,140 --> 00:16:13,470
when so now when these are hits that

00:16:11,820 --> 00:16:15,870
they'll end up on the on WordPress don't

00:16:13,470 --> 00:16:16,580
think it sounds like this it's the stats

00:16:15,870 --> 00:16:19,320
page

00:16:16,580 --> 00:16:21,510
it's the login page then you end up on

00:16:19,320 --> 00:16:24,570
WordPress and it says the app is trying

00:16:21,510 --> 00:16:27,330
to assign it into this website redirects

00:16:24,570 --> 00:16:31,350
back to the login URL which redirects

00:16:27,330 --> 00:16:34,560
back to the status of their login the

00:16:31,350 --> 00:16:40,290
last example is github where you can go

00:16:34,560 --> 00:16:42,240
to github make a this one you might use

00:16:40,290 --> 00:16:45,360
this for the public access mode like a

00:16:42,240 --> 00:16:47,250
public wiki where even if you're not

00:16:45,360 --> 00:16:48,360
logged in it still shows you the content

00:16:47,250 --> 00:16:51,140
it's just that if you log in you get

00:16:48,360 --> 00:16:53,640
additional privileges allow all users

00:16:51,140 --> 00:16:56,550
truth anybody with a good of account can

00:16:53,640 --> 00:16:58,710
log in and then you go in to get up and

00:16:56,550 --> 00:17:03,000
you make an OAuth app and plug in the

00:16:58,710 --> 00:17:04,630
client ID and the client secret and so

00:17:03,000 --> 00:17:07,160
that would look like

00:17:04,630 --> 00:17:09,860
unauthenticated you would actually see

00:17:07,160 --> 00:17:13,760
something in a login link if you click

00:17:09,860 --> 00:17:15,920
the login link you go you redirect to

00:17:13,760 --> 00:17:18,410
the login page which redirects to github

00:17:15,920 --> 00:17:23,030
and shows you the prompt redirects you

00:17:18,410 --> 00:17:26,150
back and then you're logged in so how do

00:17:23,030 --> 00:17:29,090
you know who login there's another one

00:17:26,150 --> 00:17:32,720
more trick for this which is in in the

00:17:29,090 --> 00:17:36,260
nginx config last saw will actually set

00:17:32,720 --> 00:17:40,220
an HTTP header in that proxy requests

00:17:36,260 --> 00:17:42,380
and that sub request that has the email

00:17:40,220 --> 00:17:45,140
other so the person you logged in so

00:17:42,380 --> 00:17:48,410
it's made available as this X lasso user

00:17:45,140 --> 00:17:50,630
header which you can then using this

00:17:48,410 --> 00:17:53,930
octopus thing which is part of that

00:17:50,630 --> 00:17:56,630
plugin you can set it to a variable as

00:17:53,930 --> 00:17:58,940
available here so you can then use it in

00:17:56,630 --> 00:18:02,870
either your fast CGI or

00:17:58,940 --> 00:18:06,350
proxy configuration block and set it as

00:18:02,870 --> 00:18:08,900
an HTTP header so at this point we're

00:18:06,350 --> 00:18:11,300
basically passing that from the lasso

00:18:08,900 --> 00:18:12,950
back-end all the way up into an HTTP

00:18:11,300 --> 00:18:17,000
header that makes it into the into your

00:18:12,950 --> 00:18:21,500
app so like in PHP it just shows up as

00:18:17,000 --> 00:18:22,520
you know server remote user and you can

00:18:21,500 --> 00:18:26,590
use that to tell whether the person

00:18:22,520 --> 00:18:26,590
that's logged in or not and who they are

00:18:26,620 --> 00:18:35,300
so this lasso is basically responsible

00:18:31,400 --> 00:18:36,520
for starting the OAuth flow with the

00:18:35,300 --> 00:18:37,630
provider that you've configured

00:18:36,520 --> 00:18:40,670
[Music]

00:18:37,630 --> 00:18:41,830
verifying that callback that they by

00:18:40,670 --> 00:18:44,690
show login verifying that they are

00:18:41,830 --> 00:18:47,030
creating a jot and returning it in the

00:18:44,690 --> 00:18:49,430
cookie header and then verifying that

00:18:47,030 --> 00:18:52,820
cookie on each request so Java if you're

00:18:49,430 --> 00:18:54,290
not familiar with that is a it's a self

00:18:52,820 --> 00:18:56,870
encoded token there's three parts to

00:18:54,290 --> 00:18:58,820
this this is just has one long string

00:18:56,870 --> 00:19:00,980
they're separated by three parts

00:18:58,820 --> 00:19:01,880
separated by periods the first part is

00:19:00,980 --> 00:19:03,710
the header

00:19:01,880 --> 00:19:05,210
middle part is the payload which which

00:19:03,710 --> 00:19:06,530
actually has the data you're going to

00:19:05,210 --> 00:19:13,280
use in it and then the bottom part is a

00:19:06,530 --> 00:19:16,400
signature if you make 64 decode the top

00:19:13,280 --> 00:19:19,760
2 you'll see that they're just Jason

00:19:16,400 --> 00:19:22,070
strings in them the first one just tells

00:19:19,760 --> 00:19:23,540
it what algorithm was used to create the

00:19:22,070 --> 00:19:25,180
signature and in the middle one middle

00:19:23,540 --> 00:19:29,570
chunk has a data in it so in this case

00:19:25,180 --> 00:19:33,590
this is what Lassa uses to say here is

00:19:29,570 --> 00:19:36,490
the date that this John expires and here

00:19:33,590 --> 00:19:39,470
is the email to the person who signed in

00:19:36,490 --> 00:19:40,150
this is signed with a secret key that

00:19:39,470 --> 00:19:44,660
only

00:19:40,150 --> 00:19:46,480
laso knows so trying to modify those

00:19:44,660 --> 00:19:49,400
will cause the signature to fail

00:19:46,480 --> 00:19:51,350
the other cool thing is that this means

00:19:49,400 --> 00:19:53,480
that Lassa doesn't need to store this in

00:19:51,350 --> 00:19:57,160
a database and there's no lookups when

00:19:53,480 --> 00:20:00,410
it's trying to verify the cookie and

00:19:57,160 --> 00:20:03,460
it's it can be validated extremely

00:20:00,410 --> 00:20:05,870
quickly because it's just pretty simple

00:20:03,460 --> 00:20:09,680
math there's no database lookup for

00:20:05,870 --> 00:20:12,050
anything so with that in place you can

00:20:09,680 --> 00:20:16,040
now start adding more things to your

00:20:12,050 --> 00:20:18,560
back-end all protected by the same login

00:20:16,040 --> 00:20:21,650
and the front no matter what they are so

00:20:18,560 --> 00:20:24,290
whether it's a you know an app that has

00:20:21,650 --> 00:20:27,560
the concept of user accounts or just a

00:20:24,290 --> 00:20:30,380
pile of HTML and you can just you know

00:20:27,560 --> 00:20:33,080
stop this in front of anything this is

00:20:30,380 --> 00:20:34,280
great this lets you have one place to

00:20:33,080 --> 00:20:38,800
manage access to all these back-end

00:20:34,280 --> 00:20:42,140
tools each user has their own login

00:20:38,800 --> 00:20:44,000
instead of like just setting one main

00:20:42,140 --> 00:20:47,180
password in your HT password file and

00:20:44,000 --> 00:20:49,790
sharing around the office it could

00:20:47,180 --> 00:20:51,800
protect any app even if that happens and

00:20:49,790 --> 00:20:56,330
support authentication itself which is

00:20:51,800 --> 00:20:58,070
pretty cool and so getting started if

00:20:56,330 --> 00:21:00,830
you're not familiar with

00:20:58,070 --> 00:21:02,570
I I wasn't familiar with running go

00:21:00,830 --> 00:21:03,620
brothers at first when I first start

00:21:02,570 --> 00:21:06,140
using this but it's actually not that

00:21:03,620 --> 00:21:09,110
hard once you have go installed you just

00:21:06,140 --> 00:21:13,760
run this you go into that folder you run

00:21:09,110 --> 00:21:16,340
build and then it builds a binary to set

00:21:13,760 --> 00:21:19,550
up the config file see it doesn't

00:21:16,340 --> 00:21:23,330
example config file in the project and

00:21:19,550 --> 00:21:25,990
then you run it and it starts listening

00:21:23,330 --> 00:21:32,480
on whatever port you've configured and

00:21:25,990 --> 00:21:35,840
you're off and running so yeah that's

00:21:32,480 --> 00:21:37,670
the end of that thanks for listening the

00:21:35,840 --> 00:21:40,820
slides from this talk are actually a

00:21:37,670 --> 00:21:43,190
topic on lol and there's actually a demo

00:21:40,820 --> 00:21:47,480
of this working as well if you go to

00:21:43,190 --> 00:21:49,430
avocados lol there's a link to a fake

00:21:47,480 --> 00:21:51,680
stats page which then you can actually

00:21:49,430 --> 00:21:56,690
try to log in and it'll get you to log

00:21:51,680 --> 00:21:58,700
in using github so yeah thanks I'm happy

00:21:56,690 --> 00:22:07,720
that I'm happy to answer questions a few

00:21:58,700 --> 00:22:11,009
more minutes yeah oh yeah

00:22:07,720 --> 00:22:16,149
do you know if flatso allows multiple

00:22:11,009 --> 00:22:18,820
authenticators somehow more you just

00:22:16,149 --> 00:22:22,149
have to go so instead of Google or

00:22:18,820 --> 00:22:25,240
github you can configure and github

00:22:22,149 --> 00:22:26,470
no I did only supports one ok what's the

00:22:25,240 --> 00:22:29,409
what would be this case for supporting

00:22:26,470 --> 00:22:32,950
multiple that using Google and make your

00:22:29,409 --> 00:22:35,740
own choice like public facing Oh

00:22:32,950 --> 00:22:37,509
make your own choice Google or Facebook

00:22:35,740 --> 00:22:39,720
yeah I can also I guess it's pretty

00:22:37,509 --> 00:22:41,950
common pattern for like public stuff and

00:22:39,720 --> 00:22:46,659
no because I guess it wasn't designed

00:22:41,950 --> 00:22:47,769
for public-facing web pages it's meant

00:22:46,659 --> 00:22:49,269
for yeah it's definitely meant for

00:22:47,769 --> 00:22:50,980
protecting internal tools and off or

00:22:49,269 --> 00:22:51,879
just general user authentication but

00:22:50,980 --> 00:22:55,400
that's kind of a cool idea

00:22:51,879 --> 00:23:00,950
ok I could see extending it for that

00:22:55,400 --> 00:23:00,950
[Music]

00:23:03,820 --> 00:23:10,600
I had a couple of questions one is that

00:23:07,030 --> 00:23:13,480
you given some great points of like the

00:23:10,600 --> 00:23:16,960
pros to using this I'm really excited

00:23:13,480 --> 00:23:20,680
about it but I was wondering what sort

00:23:16,960 --> 00:23:22,480
of I guess cons or challenges of using

00:23:20,680 --> 00:23:26,470
it especially because you mentioned that

00:23:22,480 --> 00:23:30,280
is secure but like kind of like what

00:23:26,470 --> 00:23:32,740
kind of type of capacity of security

00:23:30,280 --> 00:23:35,290
does it have and then also is this

00:23:32,740 --> 00:23:37,810
similar concepts of how a lot of other

00:23:35,290 --> 00:23:40,930
sites and organizations and companies

00:23:37,810 --> 00:23:43,360
will have the option for people to like

00:23:40,930 --> 00:23:46,330
sign in through their Google or Facebook

00:23:43,360 --> 00:23:49,210
accounts is it kind of similar in that

00:23:46,330 --> 00:23:52,990
sense so I guess I'll start with the

00:23:49,210 --> 00:23:55,090
second question typically when you're

00:23:52,990 --> 00:23:57,790
seeing like someone's signing with

00:23:55,090 --> 00:23:59,470
Google or our Facebook button they've

00:23:57,790 --> 00:24:02,770
like any group that's part of the app

00:23:59,470 --> 00:24:05,440
they've written and it's usually it's

00:24:02,770 --> 00:24:06,460
usually done as just built in to

00:24:05,440 --> 00:24:10,450
whatever the thing that you're logging

00:24:06,460 --> 00:24:12,010
into whereas this is like sticking it

00:24:10,450 --> 00:24:14,050
out in front so the thing behind it

00:24:12,010 --> 00:24:16,630
doesn't even know that it was talking to

00:24:14,050 --> 00:24:18,670
Facebook or github right so it's kind of

00:24:16,630 --> 00:24:22,260
a different approach but it ends up

00:24:18,670 --> 00:24:29,860
being similar in the end the end result

00:24:22,260 --> 00:24:31,330
as far as the security question the or

00:24:29,860 --> 00:24:34,060
any gotchas around running this there

00:24:31,330 --> 00:24:35,770
were a couple of a couple of things that

00:24:34,060 --> 00:24:38,380
tripped me up a little bit when I first

00:24:35,770 --> 00:24:42,070
started using this one it does require

00:24:38,380 --> 00:24:44,380
that this lasso service is running so

00:24:42,070 --> 00:24:46,030
that means that like make sure that you

00:24:44,380 --> 00:24:46,960
set up with the process monitoring thing

00:24:46,030 --> 00:24:48,700
that's gonna be started if I ever

00:24:46,960 --> 00:24:56,690
crashes that kind of thing like you

00:24:48,700 --> 00:24:59,190
would run any other service and the

00:24:56,690 --> 00:25:02,130
sorry what was the well so we're asking

00:24:59,190 --> 00:25:07,350
about about security yes of it just type

00:25:02,130 --> 00:25:12,780
of like the cons of of using this in

00:25:07,350 --> 00:25:15,179
comparison to other oh yeah um so when

00:25:12,780 --> 00:25:17,669
lasso issues a cookie that cookie

00:25:15,179 --> 00:25:19,409
doesn't expire until the lifetime that

00:25:17,669 --> 00:25:21,480
you've set so one of the things that

00:25:19,409 --> 00:25:26,429
this does not have right now is the

00:25:21,480 --> 00:25:28,950
ability to preemptively revoke tokens so

00:25:26,429 --> 00:25:30,840
let's say you set up like a one-year

00:25:28,950 --> 00:25:33,030
cookie just so that your employees never

00:25:30,840 --> 00:25:35,610
have to login again after they login

00:25:33,030 --> 00:25:38,669
once if someone gets fired and you need

00:25:35,610 --> 00:25:40,890
to actually move their account you kind

00:25:38,669 --> 00:25:43,980
of have to like do it pretty manually go

00:25:40,890 --> 00:25:45,299
in and like adjust changes the secret

00:25:43,980 --> 00:25:47,700
and everybody gets logged out that kind

00:25:45,299 --> 00:25:50,130
of thing it's like it doesn't have very

00:25:47,700 --> 00:25:52,440
thorough user management tools built

00:25:50,130 --> 00:25:57,960
into it right now so that's a potential

00:25:52,440 --> 00:26:00,409
like thing to be aware of thank you that

00:25:57,960 --> 00:26:00,409
was awesome

00:26:01,090 --> 00:26:06,909
[Music]

00:26:04,360 --> 00:26:08,500
so in the partially public model where

00:26:06,909 --> 00:26:09,940
you have want to let some people in this

00:26:08,500 --> 00:26:12,429
engine next set up so that it's still

00:26:09,940 --> 00:26:14,019
sending that sub request every time to

00:26:12,429 --> 00:26:15,669
less oh and then if so how do you tell

00:26:14,019 --> 00:26:17,110
us so which part to actually force

00:26:15,669 --> 00:26:17,320
authentication on because I didn't see

00:26:17,110 --> 00:26:19,840
that

00:26:17,320 --> 00:26:24,309
oh sure I kind of I kind of glossed over

00:26:19,840 --> 00:26:26,640
that part of it okay um so every once

00:26:24,309 --> 00:26:29,260
this is configured every single request

00:26:26,640 --> 00:26:31,360
it ends up sending the sub request

00:26:29,260 --> 00:26:33,159
Alesso and whatever headers are in the

00:26:31,360 --> 00:26:35,350
request gets sent so that study that

00:26:33,159 --> 00:26:39,580
says there is a cookie and it's valid or

00:26:35,350 --> 00:26:41,590
there is no cookie and instead of in the

00:26:39,580 --> 00:26:43,480
in that in that partially in that public

00:26:41,590 --> 00:26:45,429
mode instead of sending back in for one

00:26:43,480 --> 00:26:49,960
it just still sends back 200 it just

00:26:45,429 --> 00:26:51,909
sets a blank user so basically a lasso

00:26:49,960 --> 00:26:54,789
will never send a 401 response in that

00:26:51,909 --> 00:26:56,740
mode okay which means you have to set

00:26:54,789 --> 00:26:58,840
you have to trigger the login manually

00:26:56,740 --> 00:27:02,769
and drive past this in the right

00:26:58,840 --> 00:27:03,909
response to say force the login it's you

00:27:02,769 --> 00:27:06,490
actually have to just like build the

00:27:03,909 --> 00:27:09,010
login link okay so you actually this is

00:27:06,490 --> 00:27:12,460
how this the live example is actually

00:27:09,010 --> 00:27:14,880
configured if you look at stats ah well

00:27:12,460 --> 00:27:20,559
there's a actually I think an have a

00:27:14,880 --> 00:27:23,380
it's not touchscreen on my channel so

00:27:20,559 --> 00:27:25,769
this is what it looks like if you look

00:27:23,380 --> 00:27:25,769
at this

00:27:27,860 --> 00:27:35,299
well that works great I think I think so

00:27:31,809 --> 00:27:36,679
I think this is what I was mentioning I

00:27:35,299 --> 00:27:41,299
don't think I said if I process monitor

00:27:36,679 --> 00:27:45,409
on myself and I think I was a sensation

00:27:41,299 --> 00:27:50,750
from this laptop running it anyway what

00:27:45,409 --> 00:27:52,730
I was gonna say was there is like an

00:27:50,750 --> 00:27:54,950
actual link on that page it says login

00:27:52,730 --> 00:27:57,409
and that's just a link to logging on i

00:27:54,950 --> 00:28:00,529
mattr LOL with a couple of parameters

00:27:57,409 --> 00:28:03,649
and that starts logging process okay and

00:28:00,529 --> 00:28:06,590
yeah when the one last was not running

00:28:03,649 --> 00:28:09,950
you get a 500 a server error because

00:28:06,590 --> 00:28:13,789
nginx tried to send the sub request and

00:28:09,950 --> 00:28:14,840
it failed so like there isn't really

00:28:13,789 --> 00:28:18,679
anything else I can do

00:28:14,840 --> 00:28:21,490
the good news is that it fails securely

00:28:18,679 --> 00:28:25,210
and doesn't allow the request through

00:28:21,490 --> 00:28:27,169
because if this is actually protecting a

00:28:25,210 --> 00:28:29,929
the secret stuff in the backend you

00:28:27,169 --> 00:28:35,100
wouldn't want lasso crashing to result

00:28:29,929 --> 00:28:40,520
in the data being public yeah

00:28:35,100 --> 00:28:42,120
[Music]

00:28:40,520 --> 00:28:45,210
anybody else

00:28:42,120 --> 00:28:45,210
[Music]

00:28:46,090 --> 00:28:50,900
so no you're not necessarily the author

00:28:48,410 --> 00:28:52,940
the author of lasso but I was curious

00:28:50,900 --> 00:28:55,220
one of things you maybe hinted at or

00:28:52,940 --> 00:28:59,360
maybe I just wanted to hear are you able

00:28:55,220 --> 00:29:00,770
to actually authenticate and specify

00:28:59,360 --> 00:29:04,880
like people who are in certain private

00:29:00,770 --> 00:29:07,880
github groups for example hmm no there's

00:29:04,880 --> 00:29:09,770
no group stuff in that yet I'd I think

00:29:07,880 --> 00:29:11,360
that would be a great addition to it

00:29:09,770 --> 00:29:14,960
touches accepted patent is accepted for

00:29:11,360 --> 00:29:16,700
sure and I think that would be a double

00:29:14,960 --> 00:29:20,300
yeah yeah that'd be really good use for

00:29:16,700 --> 00:29:22,490
it it's something that I use a fair

00:29:20,300 --> 00:29:23,720
amount to try to do some and we'd like

00:29:22,490 --> 00:29:25,490
to have some public facing community

00:29:23,720 --> 00:29:29,630
stuff and then some only people who have

00:29:25,490 --> 00:29:31,910
agreed to our sort of User Agreement to

00:29:29,630 --> 00:29:33,350
be able to have code access per se yeah

00:29:31,910 --> 00:29:35,030
you think it'd have groups to manage

00:29:33,350 --> 00:29:37,190
that it makes a lot of sense for sure I

00:29:35,030 --> 00:29:38,750
think it's a great yeah I'm worth filing

00:29:37,190 --> 00:29:41,870
a feature request at the very least on

00:29:38,750 --> 00:29:44,690
on the project I just started the server

00:29:41,870 --> 00:29:47,570
so this is what it looks like now so

00:29:44,690 --> 00:29:49,910
it's a login link and you'll end up

00:29:47,570 --> 00:29:58,180
seeing you know you get taken to github

00:29:49,910 --> 00:30:01,920
and then you log in and of course it's

00:29:58,180 --> 00:30:01,920
making me confirm my password

00:30:08,550 --> 00:30:11,640
[Music]

00:30:12,029 --> 00:30:17,919
and we're back and if I click logout I

00:30:16,329 --> 00:30:19,299
just get taken back here and now since

00:30:17,919 --> 00:30:21,549
I'm already logged into github and I've

00:30:19,299 --> 00:30:23,649
already authorized the application you

00:30:21,549 --> 00:30:26,069
don't even see it happen so fast which

00:30:23,649 --> 00:30:26,069
is pretty cool

00:30:27,050 --> 00:30:30,170
[Music]

00:30:30,330 --> 00:30:40,230
oh go I think that's about the end of

00:30:31,770 --> 00:30:41,990
the time thanks for the questions thank

00:30:40,230 --> 00:30:45,350
you

00:30:41,990 --> 00:30:48,630
[Music]

00:30:45,350 --> 00:30:50,340
I'd like to take this moment to also

00:30:48,630 --> 00:30:53,130
promote the party that's happening

00:30:50,340 --> 00:30:55,320
tonight at 7:00 it's gonna be the best

00:30:53,130 --> 00:30:56,610
party ever so it would be great and if

00:30:55,320 --> 00:30:59,370
you guys can make it will there be

00:30:56,610 --> 00:31:04,080
uncommon there is going to be cotton

00:30:59,370 --> 00:31:07,380
candy it's gonna be here who's

00:31:04,080 --> 00:31:11,760
downstairs in the lounge area yeah cure

00:31:07,380 --> 00:31:14,819
at 7:00 it's gonna be amazing

00:31:11,760 --> 00:31:14,819
[Music]

00:31:18,590 --> 00:31:27,450
thank you and ask me questions fully

00:31:25,379 --> 00:31:29,909
unrelated to this shirt I just

00:31:27,450 --> 00:31:31,980
started getting started with micro pub

00:31:29,909 --> 00:31:35,159
and what mentioned like jobs go awesome

00:31:31,980 --> 00:31:37,429
I think I mentioned you a microblogging

00:31:35,159 --> 00:31:37,429

YouTube URL: https://www.youtube.com/watch?v=FIBgKsDcwiU


