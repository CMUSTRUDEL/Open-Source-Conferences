Title: A Practical Guide To KubeVirt
Publication date: 2019-02-22
Playlist: DevConfUS 2018
Description: 
	KubeVirt is a robust Virtual Machine management infrastructure that runs on and leverages the core concepts of Kubernetes. The APIs used by KubeVirt will feel very familiar to the seasoned Kubernetes user, but that doesn't cover everybody.

This session is designed to arm users with the practical experience they'll need to deploy Virtual Machines using KubeVirt. We will start with a Virtual Machine running on a local Qemu instance, and using concrete examples, discuss the steps needed to move it to the hybrid cloud. This will cover the Custom Resources used by KubeVirt as well as other considerations such as storage and networking.
Captions: 
	00:00:03,510 --> 00:00:09,490
hi everybody I'm Stu God and this is a

00:00:07,120 --> 00:00:12,490
practical guide to cute Verte hopefully

00:00:09,490 --> 00:00:14,500
a guide for the rest of us just a

00:00:12,490 --> 00:00:17,289
current state of the world or your

00:00:14,500 --> 00:00:19,150
statement on where it is containers are

00:00:17,289 --> 00:00:21,220
increasingly becoming the de facto

00:00:19,150 --> 00:00:23,830
standard of power of packaging

00:00:21,220 --> 00:00:25,600
applications and kubernetes and

00:00:23,830 --> 00:00:28,000
OpenShift are becoming kind of the de

00:00:25,600 --> 00:00:30,730
facto way that we do that

00:00:28,000 --> 00:00:32,259
but that's for new applications when you

00:00:30,730 --> 00:00:34,180
start talking about virtual machines

00:00:32,259 --> 00:00:37,120
I've heard some people say they're going

00:00:34,180 --> 00:00:39,909
away well no they're not for business

00:00:37,120 --> 00:00:42,010
reasons it's hard to redo some

00:00:39,909 --> 00:00:44,920
applications and for technical reasons

00:00:42,010 --> 00:00:46,239
it may be impossible to do that for

00:00:44,920 --> 00:00:49,089
instance if you need Windows in the

00:00:46,239 --> 00:00:50,890
machine or if you attended the unit

00:00:49,089 --> 00:00:52,239
kernels talked yesterday that would not

00:00:50,890 --> 00:00:57,460
be something you would put directly in a

00:00:52,239 --> 00:00:59,050
container now in today's world we

00:00:57,460 --> 00:01:02,199
traditionally have separate management

00:00:59,050 --> 00:01:04,510
infrastructures for these stacks which

00:01:02,199 --> 00:01:08,970
unfortunately means under utilizing some

00:01:04,510 --> 00:01:12,090
hardware because you just can't Mitch

00:01:08,970 --> 00:01:14,660
so that's where Qbert comes in we're

00:01:12,090 --> 00:01:19,950
looking at a technology that enables

00:01:14,660 --> 00:01:21,540
unifying these two infrastructures so

00:01:19,950 --> 00:01:23,750
that you can build modify deploy

00:01:21,540 --> 00:01:26,670
applications that are virtualized

00:01:23,750 --> 00:01:27,990
alongside your containers or in other

00:01:26,670 --> 00:01:31,380
words put virtual machines right into

00:01:27,990 --> 00:01:34,140
your kubernetes product projects so we

00:01:31,380 --> 00:01:37,500
do this by using a custom resource

00:01:34,140 --> 00:01:39,720
definition that we drop into existing

00:01:37,500 --> 00:01:44,880
kubernetes clusters now this is really

00:01:39,720 --> 00:01:46,800
important to to stay we don't require we

00:01:44,880 --> 00:01:50,070
one of our requirements for ourselves is

00:01:46,800 --> 00:01:52,890
that we do not allow modification of the

00:01:50,070 --> 00:01:55,260
kubernetes cluster before we deploy in

00:01:52,890 --> 00:01:58,590
other words we can't change container

00:01:55,260 --> 00:02:00,060
runtimes we can't add system accounts or

00:01:58,590 --> 00:02:01,890
what have you it all has to be done as

00:02:00,060 --> 00:02:04,470
part of our deployment or it can't be

00:02:01,890 --> 00:02:07,320
done and so by doing this we extend the

00:02:04,470 --> 00:02:10,950
kubernetes infrastructure so that you

00:02:07,320 --> 00:02:13,610
know as kubernetes natively possible as

00:02:10,950 --> 00:02:13,610
a way as possible

00:02:13,720 --> 00:02:19,170
and so by doing this the the virtual

00:02:16,480 --> 00:02:23,590
machines are actually inside a container

00:02:19,170 --> 00:02:26,820
some solutions out there such as cata

00:02:23,590 --> 00:02:29,200
containers I believe vertel it may be

00:02:26,820 --> 00:02:31,000
actually modified the container runtime

00:02:29,200 --> 00:02:34,360
that's something we're explicitly trying

00:02:31,000 --> 00:02:36,790
not to do because we don't want to be

00:02:34,360 --> 00:02:38,680
modifying that ahead of time now in the

00:02:36,790 --> 00:02:41,740
future that might be a restriction

00:02:38,680 --> 00:02:43,420
that's lifted because dynamic container

00:02:41,740 --> 00:02:45,160
runtimes is something that may come to

00:02:43,420 --> 00:02:46,900
kubernetes in the future but for now

00:02:45,160 --> 00:02:48,280
that's kind of a hard and fast rule and

00:02:46,900 --> 00:02:51,520
one of the reasons that we're doing it

00:02:48,280 --> 00:02:54,700
the way we are and you know by

00:02:51,520 --> 00:02:57,690
leveraging our existing ecosystems teams

00:02:54,700 --> 00:03:00,160
are allowed to use the proper tool for

00:02:57,690 --> 00:03:01,870
their their solution whether that's a

00:03:00,160 --> 00:03:03,460
virtual machine or a container they can

00:03:01,870 --> 00:03:08,800
put that right into their CI CD

00:03:03,460 --> 00:03:10,510
pipelines so for the way we implements

00:03:08,800 --> 00:03:14,230
this we actually are using a custom

00:03:10,510 --> 00:03:15,790
resource definition this is you know

00:03:14,230 --> 00:03:17,980
I've got an example of one over on the

00:03:15,790 --> 00:03:20,350
right it's basically just a mo file for

00:03:17,980 --> 00:03:22,270
those who haven't seen this before for

00:03:20,350 --> 00:03:23,650
those who have seen kubernetes

00:03:22,270 --> 00:03:25,840
constructs before this should look

00:03:23,650 --> 00:03:27,700
pretty familiar in this case the only

00:03:25,840 --> 00:03:30,100
thing special about it is the kind is a

00:03:27,700 --> 00:03:31,990
virtual machine instance so virtual

00:03:30,100 --> 00:03:35,350
machines here have their own kind and

00:03:31,990 --> 00:03:37,990
this gives us the ability to express all

00:03:35,350 --> 00:03:41,510
common virtual machine parameters such

00:03:37,990 --> 00:03:43,099
as memory CPU and the like

00:03:41,510 --> 00:03:45,500
because we're implementing this is a

00:03:43,099 --> 00:03:49,640
custom resource definition we also

00:03:45,500 --> 00:03:51,019
inherit our back rules so users are only

00:03:49,640 --> 00:03:54,019
allowed to modify things in the

00:03:51,019 --> 00:03:57,409
namespaces they're designed for and what

00:03:54,019 --> 00:03:59,299
have you so here's a little bit of the

00:03:57,409 --> 00:04:02,209
workflow this is a busy slide so if I

00:03:59,299 --> 00:04:06,230
could take a minute to explain this when

00:04:02,209 --> 00:04:08,209
the user implements this custom resource

00:04:06,230 --> 00:04:10,220
are posted to the system that's a

00:04:08,209 --> 00:04:12,319
virtual machine instance so that's

00:04:10,220 --> 00:04:14,269
actually just a record on the you know

00:04:12,319 --> 00:04:16,510
in the sed cluster we've got a

00:04:14,269 --> 00:04:20,840
controller vert controller which is

00:04:16,510 --> 00:04:22,220
monitoring for changes to two custom

00:04:20,840 --> 00:04:24,770
resources or two virtual machine

00:04:22,220 --> 00:04:26,449
instances in this case and when it sees

00:04:24,770 --> 00:04:28,400
when it actually schedules the pod and

00:04:26,449 --> 00:04:30,590
that's all it does at this point we just

00:04:28,400 --> 00:04:32,479
schedule a pod and you can see that you

00:04:30,590 --> 00:04:34,850
know this is the third step here and

00:04:32,479 --> 00:04:38,150
then now the vert controller is a

00:04:34,850 --> 00:04:40,850
cluster level resource so it's only job

00:04:38,150 --> 00:04:43,520
is to schedule pods then on each of the

00:04:40,850 --> 00:04:45,260
individual nodes vert handler is running

00:04:43,520 --> 00:04:49,039
and that's another controller we have

00:04:45,260 --> 00:04:51,200
and it is looking for these pods that

00:04:49,039 --> 00:04:53,870
have a special label on them so that it

00:04:51,200 --> 00:04:55,700
knows that it owns that pod and it will

00:04:53,870 --> 00:04:58,220
then schedule starting the virtual

00:04:55,700 --> 00:04:59,510
machine inside of it now there's a

00:04:58,220 --> 00:05:02,180
little bit of hand waving there of

00:04:59,510 --> 00:05:04,070
course because I said start a virtual

00:05:02,180 --> 00:05:06,020
machine in a container that's already

00:05:04,070 --> 00:05:07,820
running so what we're actually doing is

00:05:06,020 --> 00:05:09,950
we've got a Damon called vert launcher

00:05:07,820 --> 00:05:12,110
inside this pod that's actually doing

00:05:09,950 --> 00:05:14,800
that work you know just a full

00:05:12,110 --> 00:05:14,800
disclosure there

00:05:17,759 --> 00:05:22,620
so as far as scheduling as I said vert

00:05:20,639 --> 00:05:24,120
controller is scheduling a pod that

00:05:22,620 --> 00:05:26,939
means that we're actually literally

00:05:24,120 --> 00:05:28,319
using a pod and pod rules for where

00:05:26,939 --> 00:05:30,779
we're going to end up placing virtual

00:05:28,319 --> 00:05:35,449
machines that means anti affinity

00:05:30,779 --> 00:05:37,139
affinity labels selectors all of those

00:05:35,449 --> 00:05:40,289
constraints that you can put on a

00:05:37,139 --> 00:05:41,550
kubernetes pod to still work and you can

00:05:40,289 --> 00:05:45,120
even use a custom scheduler if you

00:05:41,550 --> 00:05:46,710
needed now the applications within the

00:05:45,120 --> 00:05:49,439
virtual machines because they are

00:05:46,710 --> 00:05:51,240
leveraging a pod all existing kubernetes

00:05:49,439 --> 00:05:52,529
constructs such as services and routes

00:05:51,240 --> 00:05:55,110
still work and we'll get a little bit

00:05:52,529 --> 00:05:57,960
more into what those are later but we

00:05:55,110 --> 00:06:01,370
actually use labels on the on the

00:05:57,960 --> 00:06:04,649
service itself to designate which pod

00:06:01,370 --> 00:06:07,949
the service belongs to or where to route

00:06:04,649 --> 00:06:09,659
the packets basically so virtual

00:06:07,949 --> 00:06:10,949
machines live in pods now that's

00:06:09,659 --> 00:06:13,860
transparent to higher level of

00:06:10,949 --> 00:06:15,569
management systems but you know

00:06:13,860 --> 00:06:18,409
technically that's not worse than it it

00:06:15,569 --> 00:06:21,149
currently is before we did this project

00:06:18,409 --> 00:06:25,050
now virtual machines leverage pods when

00:06:21,149 --> 00:06:26,819
we have a new virtual machine record any

00:06:25,050 --> 00:06:29,099
labels that are on that will be

00:06:26,819 --> 00:06:30,899
translated over to the pod we're gonna

00:06:29,099 --> 00:06:34,439
need that for scheduling of course and

00:06:30,899 --> 00:06:37,080
to match things like services CPU and

00:06:34,439 --> 00:06:38,789
memory resources they're actually meshed

00:06:37,080 --> 00:06:41,999
from what the virtual machines

00:06:38,789 --> 00:06:43,889
definition has to do the pods so that

00:06:41,999 --> 00:06:45,139
we're not over allocating how much we're

00:06:43,889 --> 00:06:47,240
requesting

00:06:45,139 --> 00:06:50,050
of course affinity and anti affinity I

00:06:47,240 --> 00:06:53,719
talked about that as far as the storage

00:06:50,050 --> 00:06:55,849
that's where the the real rubber meets

00:06:53,719 --> 00:06:58,219
the road we're using for assistant

00:06:55,849 --> 00:07:00,849
volumes for this at the production level

00:06:58,219 --> 00:07:04,069
and so what that basically means is that

00:07:00,849 --> 00:07:05,180
any existing storage back-end that you

00:07:04,069 --> 00:07:08,300
already have for recruitment of these

00:07:05,180 --> 00:07:10,430
cluster we can take advantage of and

00:07:08,300 --> 00:07:12,319
that's a one-to-one mapping between the

00:07:10,430 --> 00:07:15,020
persistent volume and your virtual

00:07:12,319 --> 00:07:16,610
machine disk and so by doing this of

00:07:15,020 --> 00:07:18,979
course we can benefit from all existing

00:07:16,610 --> 00:07:24,319
eco systems that are currently out there

00:07:18,979 --> 00:07:25,879
and there's a lot so for the the disks

00:07:24,319 --> 00:07:27,949
and this is actually not a cube root

00:07:25,879 --> 00:07:30,740
project this is a sister project the

00:07:27,949 --> 00:07:32,360
containerized data importer I'm actually

00:07:30,740 --> 00:07:34,879
gonna take advantage of that and use it

00:07:32,360 --> 00:07:38,060
in the demo in a few minutes because

00:07:34,879 --> 00:07:40,419
it's just that awesome this is something

00:07:38,060 --> 00:07:43,490
that allows you to take an existing

00:07:40,419 --> 00:07:45,289
virtual machine image raw disk or

00:07:43,490 --> 00:07:47,930
something and actually import it

00:07:45,289 --> 00:07:50,120
directly into your kubernetes cluster on

00:07:47,930 --> 00:07:52,099
the fly which is something that

00:07:50,120 --> 00:07:53,240
obviously we're gonna need if we're

00:07:52,099 --> 00:07:54,590
gonna be able to pull this off because

00:07:53,240 --> 00:07:57,469
that's a been something that's been

00:07:54,590 --> 00:07:59,779
complicated for us in the past so this

00:07:57,469 --> 00:08:01,789
is also like cuber a declarative

00:07:59,779 --> 00:08:04,219
kubernetes utility so that you have

00:08:01,789 --> 00:08:05,930
controllers and operators monitoring for

00:08:04,219 --> 00:08:09,379
resources that will take action when

00:08:05,930 --> 00:08:11,810
those resources show up and so the two

00:08:09,379 --> 00:08:14,839
use cases here to either designate an

00:08:11,810 --> 00:08:17,419
HTTP URL that you would use to download

00:08:14,839 --> 00:08:19,219
an image from or a second use case that

00:08:17,419 --> 00:08:21,110
I won't be showing is to actually use a

00:08:19,219 --> 00:08:25,940
read-only name space within kubernetes

00:08:21,110 --> 00:08:28,099
to copy golden images to your users

00:08:25,940 --> 00:08:29,660
namespace that way they wouldn't modify

00:08:28,099 --> 00:08:31,330
the original

00:08:29,660 --> 00:08:35,180
the goodness that comes with senator

00:08:31,330 --> 00:08:37,039
says first the network goes we're

00:08:35,180 --> 00:08:40,120
actually using the pod network for the

00:08:37,039 --> 00:08:43,669
virtual machine that's both bad and good

00:08:40,120 --> 00:08:45,880
the the good of course is that you're

00:08:43,669 --> 00:08:48,620
able to communicate with any existing

00:08:45,880 --> 00:08:53,990
container resource as it currently

00:08:48,620 --> 00:08:56,420
exists so we can also expose these

00:08:53,990 --> 00:08:59,470
services from our virtual machine using

00:08:56,420 --> 00:09:02,060
services and routes as I've mentioned to

00:08:59,470 --> 00:09:05,120
expose specific ports on your virtual

00:09:02,060 --> 00:09:06,560
machine to the outside world we're

00:09:05,120 --> 00:09:09,910
looking at alternative networking

00:09:06,560 --> 00:09:11,870
options such as multiple networks or

00:09:09,910 --> 00:09:13,760
different variants but right now what

00:09:11,870 --> 00:09:16,760
we're using is just a tap device inside

00:09:13,760 --> 00:09:20,630
the virtual machine the unfortunate part

00:09:16,760 --> 00:09:23,870
about that is we lose the ability to do

00:09:20,630 --> 00:09:25,370
live migration because in in the

00:09:23,870 --> 00:09:28,970
beginning we actually had livered

00:09:25,370 --> 00:09:32,510
outside of our pod and at the cluster

00:09:28,970 --> 00:09:35,650
level or we had one lizard per node and

00:09:32,510 --> 00:09:38,770
that allowed us to do migrations between

00:09:35,650 --> 00:09:40,240
do do to move virtual machine between

00:09:38,770 --> 00:09:45,210
different nodes on your kubernetes

00:09:40,240 --> 00:09:47,440
cluster the the trouble with that was

00:09:45,210 --> 00:09:49,000
you know a little bit of a rabbit hole

00:09:47,440 --> 00:09:51,640
but we had some issues with hid

00:09:49,000 --> 00:09:53,470
namespaces and the like that we were

00:09:51,640 --> 00:09:54,970
violating assumptions and we just really

00:09:53,470 --> 00:09:57,160
couldn't do that it wasn't a good model

00:09:54,970 --> 00:09:59,910
so instead we're actually doing one live

00:09:57,160 --> 00:10:02,560
per pod and so lipfird actually lives

00:09:59,910 --> 00:10:05,230
inside of the pod that we're deploying

00:10:02,560 --> 00:10:07,300
our virtual machine in what that

00:10:05,230 --> 00:10:09,640
unfortunately means is livered has no

00:10:07,300 --> 00:10:12,580
network access to the cluster or to

00:10:09,640 --> 00:10:16,240
other nodes so we lose the ability to

00:10:12,580 --> 00:10:17,710
live migration for now once we implement

00:10:16,240 --> 00:10:20,260
other networking options we can

00:10:17,710 --> 00:10:22,029
reintroduce that so looking at the

00:10:20,260 --> 00:10:25,540
virtual machine client tool this is vert

00:10:22,029 --> 00:10:27,730
control one of the things that I sort of

00:10:25,540 --> 00:10:29,170
skipped over or have glossed over at

00:10:27,730 --> 00:10:32,770
this point is we're looking at virtual

00:10:29,170 --> 00:10:34,210
machine instances versus virtual

00:10:32,770 --> 00:10:39,040
machines these are two different kinds

00:10:34,210 --> 00:10:41,050
of records the virtual machine is kind

00:10:39,040 --> 00:10:44,709
of a static template for virtual machine

00:10:41,050 --> 00:10:47,740
instance point being in kubernetes world

00:10:44,709 --> 00:10:49,089
if you start a pod or stop a pod you're

00:10:47,740 --> 00:10:51,550
basically creating or deleting a

00:10:49,089 --> 00:10:52,959
resource and so that's what our virtual

00:10:51,550 --> 00:10:57,070
machine instance is it's kind of an

00:10:52,959 --> 00:10:58,990
analogy to that but we recognize that

00:10:57,070 --> 00:11:01,290
that doesn't really translate well to

00:10:58,990 --> 00:11:03,779
the world

00:11:01,290 --> 00:11:06,360
over the like people coming into this

00:11:03,779 --> 00:11:08,399
ecosystem or the tools that were trained

00:11:06,360 --> 00:11:10,680
to translate to the system that doesn't

00:11:08,399 --> 00:11:13,079
really work well so we created the

00:11:10,680 --> 00:11:14,370
virtual machine object and that's where

00:11:13,079 --> 00:11:16,709
when I'm talking about starting and

00:11:14,370 --> 00:11:19,319
stopping that's what we're doing where

00:11:16,709 --> 00:11:20,910
you actually issue a control start

00:11:19,319 --> 00:11:23,759
command on a virtual machine and we'll

00:11:20,910 --> 00:11:26,610
kick off an instance it also allows us

00:11:23,759 --> 00:11:28,769
to connect to the console or use VNC in

00:11:26,610 --> 00:11:31,850
order to be able to interface with your

00:11:28,769 --> 00:11:33,810
virtual machine and kind of get a

00:11:31,850 --> 00:11:36,949
snapshot of what's going on because

00:11:33,810 --> 00:11:36,949
you're obviously gonna need that

00:11:37,770 --> 00:11:42,420
now there's two ways to do for a confer

00:11:40,050 --> 00:11:44,100
client and that is either as a

00:11:42,420 --> 00:11:46,110
standalone command which is what I'll be

00:11:44,100 --> 00:11:48,450
using or you can actually use it as a

00:11:46,110 --> 00:11:51,180
cube controlled plugin so it would come

00:11:48,450 --> 00:11:53,670
straight off the cube controller and

00:11:51,180 --> 00:11:56,310
time for a demo real quick before I do

00:11:53,670 --> 00:11:58,470
that I'd like to explain what my system

00:11:56,310 --> 00:12:00,210
looks like so this Lite other than being

00:11:58,470 --> 00:12:02,190
an example of something complicated is

00:12:00,210 --> 00:12:05,130
what my development environment looks

00:12:02,190 --> 00:12:06,390
like inside the the physical machine

00:12:05,130 --> 00:12:08,470
we're actually running and I'm sorry

00:12:06,390 --> 00:12:10,070
down I have to say a docker cluster

00:12:08,470 --> 00:12:12,030
[Music]

00:12:10,070 --> 00:12:18,210
nearly got away with it but it's on the

00:12:12,030 --> 00:12:19,530
slide inside of the d-word docker we're

00:12:18,210 --> 00:12:20,640
running a vagrant instance and the

00:12:19,530 --> 00:12:22,050
reason we're doing this is for

00:12:20,640 --> 00:12:24,480
streamlining development so that

00:12:22,050 --> 00:12:25,890
everybody's machine looks the same we're

00:12:24,480 --> 00:12:27,870
getting consistent builds and the like

00:12:25,890 --> 00:12:30,150
but unfortunately adds a little bit of

00:12:27,870 --> 00:12:32,430
complexity that I can't get around what

00:12:30,150 --> 00:12:34,560
I'm showing this as a demo we'll be

00:12:32,430 --> 00:12:36,510
using cube control commands directly

00:12:34,560 --> 00:12:37,830
from the physical machine we've got a

00:12:36,510 --> 00:12:40,440
little sleight of hand where we're

00:12:37,830 --> 00:12:42,990
actually proxying these calls through

00:12:40,440 --> 00:12:45,420
the through the different layers here

00:12:42,990 --> 00:12:47,880
and down to node 0 1 but when I start

00:12:45,420 --> 00:12:50,370
working on the networking the edge is a

00:12:47,880 --> 00:12:52,440
light gray box node 0 1 is where your

00:12:50,370 --> 00:12:54,090
node ports actually terminate and so I

00:12:52,440 --> 00:12:55,920
can't reach them from the physical

00:12:54,090 --> 00:12:59,240
machine so I had to explain that before

00:12:55,920 --> 00:12:59,240
we get into this

00:12:59,540 --> 00:13:06,260
so if we start this off my second

00:13:02,240 --> 00:13:09,800
consider so I'm actually just running a

00:13:06,260 --> 00:13:10,530
qmu instance here let's see if I can

00:13:09,800 --> 00:13:16,830
make this bigger

00:13:10,530 --> 00:13:19,600
[Music]

00:13:16,830 --> 00:13:23,950
so I'm just booting a qmu instance here

00:13:19,600 --> 00:13:25,930
we've got two gigs of RAM and just a

00:13:23,950 --> 00:13:29,770
network device so just a standard CentOS

00:13:25,930 --> 00:13:32,170
machine it's logging in to to show that

00:13:29,770 --> 00:13:33,040
you know what the environment looks like

00:13:32,170 --> 00:13:38,860
it's just a standard run-of-the-mill

00:13:33,040 --> 00:13:43,000
CentOS machine and you know all I did

00:13:38,860 --> 00:13:45,670
was take a 10 gig image ID deed from dev

00:13:43,000 --> 00:13:47,890
0 and then run a qm you install on it

00:13:45,670 --> 00:13:49,420
and of course we skinned it with the dev

00:13:47,890 --> 00:13:52,870
Kampf logo so that we would have

00:13:49,420 --> 00:13:55,690
something recognizable so killing that

00:13:52,870 --> 00:13:59,230
off and I'm actually going to start a

00:13:55,690 --> 00:14:01,120
simple HTTP server here using just

00:13:59,230 --> 00:14:05,380
Python which I wouldn't really recommend

00:14:01,120 --> 00:14:09,130
but it works great for a demo hair so

00:14:05,380 --> 00:14:11,830
I'm gonna use for 9090 and of course

00:14:09,130 --> 00:14:14,470
when you run this it's exposing all the

00:14:11,830 --> 00:14:18,610
files in this directory one of them of

00:14:14,470 --> 00:14:21,190
course is disk dot IMG / port 1990 is a

00:14:18,610 --> 00:14:22,270
web server which would become important

00:14:21,190 --> 00:14:23,700
in a minute when we start using the

00:14:22,270 --> 00:14:26,830
containerized data importer

00:14:23,700 --> 00:14:29,920
[Music]

00:14:26,830 --> 00:14:33,490
so here this is the container race data

00:14:29,920 --> 00:14:35,680
imported and what just happened was I'm

00:14:33,490 --> 00:14:37,720
using the the get tree as you can see

00:14:35,680 --> 00:14:39,550
there's a little bit of cruft there from

00:14:37,720 --> 00:14:42,610
the video ignore the second argument

00:14:39,550 --> 00:14:45,550
over the last part of it all it is is

00:14:42,610 --> 00:14:47,500
the pointer to my git repo with

00:14:45,550 --> 00:14:50,170
containerize data importer and all I've

00:14:47,500 --> 00:14:53,079
done at this point to that is run make

00:14:50,170 --> 00:14:54,970
manifests so it's just a straight you

00:14:53,079 --> 00:14:57,130
know get your tree you can check out and

00:14:54,970 --> 00:14:59,410
run directly and that's all I did here

00:14:57,130 --> 00:15:01,540
is just deploy these different pieces so

00:14:59,410 --> 00:15:03,130
I've got a service account the cluster

00:15:01,540 --> 00:15:07,110
roles that are needed to actually do

00:15:03,130 --> 00:15:09,370
these actions and of course the the

00:15:07,110 --> 00:15:12,010
controller that is monitoring for

00:15:09,370 --> 00:15:17,980
persistent volumes their system volume

00:15:12,010 --> 00:15:20,640
claims that match it's the annotated

00:15:17,980 --> 00:15:20,640
I'll show that in a minute

00:15:24,270 --> 00:15:30,360
so show you what the persistent volume

00:15:28,080 --> 00:15:32,839
claim here looks like we're using

00:15:30,360 --> 00:15:35,010
annotations and that's all the

00:15:32,839 --> 00:15:38,910
containerized data importer needs in

00:15:35,010 --> 00:15:40,170
order to recognize persistent volume

00:15:38,910 --> 00:15:42,180
claims that is supposed to be taking

00:15:40,170 --> 00:15:46,440
action on here so as you can see I've

00:15:42,180 --> 00:15:48,839
got four 9090 discs IMG this contrived

00:15:46,440 --> 00:15:50,820
IP address actually points back to my

00:15:48,839 --> 00:15:53,610
fair metal machine when I ran this demo

00:15:50,820 --> 00:15:56,339
and of course the key value pairs the

00:15:53,610 --> 00:16:01,080
key is the cube Fornaio storage

00:15:56,339 --> 00:16:02,610
important endpoint for telling the

00:16:01,080 --> 00:16:05,040
containerized data importer

00:16:02,610 --> 00:16:07,560
where to go to fetch this image the

00:16:05,040 --> 00:16:09,270
commented out secret name obviously I

00:16:07,560 --> 00:16:11,459
don't need because I'm just using Python

00:16:09,270 --> 00:16:14,690
simple HTTP server so it's just going to

00:16:11,459 --> 00:16:17,070
serve up whatever file it seems so

00:16:14,690 --> 00:16:22,230
you're gonna go ahead and create that

00:16:17,070 --> 00:16:24,030
[Music]

00:16:22,230 --> 00:16:26,790
that's created the persistent volume

00:16:24,030 --> 00:16:28,980
claim already and we'll look at the pods

00:16:26,790 --> 00:16:31,680
here real quick to show that that's the

00:16:28,980 --> 00:16:32,880
case now there ends up being a little

00:16:31,680 --> 00:16:35,610
bit of lag here and that's an

00:16:32,880 --> 00:16:36,420
unfortunate side effect of our current

00:16:35,610 --> 00:16:39,450
implementation

00:16:36,420 --> 00:16:42,420
we're in as you can see it's now running

00:16:39,450 --> 00:16:44,340
we're running the upload for

00:16:42,420 --> 00:16:46,530
containerize data importer directly

00:16:44,340 --> 00:16:48,780
through the cube api server now in this

00:16:46,530 --> 00:16:51,090
case that's a 10 gigabyte image we're

00:16:48,780 --> 00:16:53,100
moving 10 gigabytes through the cube API

00:16:51,090 --> 00:16:56,340
server that's causing lag I'm sorry

00:16:53,100 --> 00:16:58,770
about that that is what it is in the

00:16:56,340 --> 00:17:00,720
future we're going to be re-implemented

00:16:58,770 --> 00:17:03,240
that as its own service endpoint and

00:17:00,720 --> 00:17:05,160
using you know different solutions in

00:17:03,240 --> 00:17:09,150
order to be able to authenticate so that

00:17:05,160 --> 00:17:10,709
we don't have that particular issue so

00:17:09,150 --> 00:17:12,069
checking the logs here you see the

00:17:10,709 --> 00:17:22,170
import has begun

00:17:12,069 --> 00:17:22,170
[Music]

00:17:22,560 --> 00:17:27,030
and so we're gonna look at the virtual

00:17:25,440 --> 00:17:28,470
machine instance itself here this is

00:17:27,030 --> 00:17:30,210
what's gonna actually be using this

00:17:28,470 --> 00:17:33,540
persistent volume claims that we're

00:17:30,210 --> 00:17:36,090
creating right now so you know this is

00:17:33,540 --> 00:17:38,970
basically the bare minimum that I would

00:17:36,090 --> 00:17:41,760
really want to define in the first place

00:17:38,970 --> 00:17:43,800
I've got two gigs of RAM I've got a

00:17:41,760 --> 00:17:48,990
persistent volume claim in this case

00:17:43,800 --> 00:17:51,570
which is mapping back to DEFCON - PVC

00:17:48,990 --> 00:17:53,420
which is the the persistent volume claim

00:17:51,570 --> 00:17:55,590
that we're actually creating with the

00:17:53,420 --> 00:17:58,070
containerize data importer as we're

00:17:55,590 --> 00:17:58,070
going live

00:18:00,570 --> 00:18:04,250
so highlighting some of that here

00:18:04,300 --> 00:18:14,360
[Music]

00:18:11,220 --> 00:18:14,360
the first two gigs rim

00:18:15,050 --> 00:18:20,650
sorry signal positive that point

00:18:16,640 --> 00:18:27,830
basically repeating what it's doing so

00:18:20,650 --> 00:18:29,480
quit out of there and then we'll check

00:18:27,830 --> 00:18:31,309
on the

00:18:29,480 --> 00:18:33,760
persistant volume flame again to see if

00:18:31,309 --> 00:18:33,760
it's up yet

00:18:37,590 --> 00:18:44,320
[Music]

00:18:42,170 --> 00:18:46,420
still not

00:18:44,320 --> 00:18:48,310
but for now let's look at the services

00:18:46,420 --> 00:18:50,400
we don't need to wait on the persistent

00:18:48,310 --> 00:18:53,050
volume claim itself to be instantiated

00:18:50,400 --> 00:18:56,620
in order to be able to instantiate the

00:18:53,050 --> 00:18:58,090
service so this is what it looks like at

00:18:56,620 --> 00:19:00,370
this point we're basically good just

00:18:58,090 --> 00:19:01,480
gonna use 422 as our service that's the

00:19:00,370 --> 00:19:05,680
stage because it's already running on

00:19:01,480 --> 00:19:09,220
the Santosh box and we're going to be

00:19:05,680 --> 00:19:12,400
exposing for 30,000 as a node which

00:19:09,220 --> 00:19:14,560
means that on the outer level of the

00:19:12,400 --> 00:19:19,540
light gray box we're going to be using

00:19:14,560 --> 00:19:22,300
for 30,000 as pestis age so over here in

00:19:19,540 --> 00:19:23,440
deaf camel I'm highlighting the

00:19:22,300 --> 00:19:26,920
incorrect thing actually what I was

00:19:23,440 --> 00:19:29,620
wanting to show is the the label here is

00:19:26,920 --> 00:19:32,320
dev comp us demo and that's just an

00:19:29,620 --> 00:19:34,210
arbitrary label that was put on to foods

00:19:32,320 --> 00:19:35,140
that I put on and says the selector on

00:19:34,210 --> 00:19:38,920
the service here

00:19:35,140 --> 00:19:40,660
DEFCON for us : demo that key value pair

00:19:38,920 --> 00:19:42,760
is what indicates if this service should

00:19:40,660 --> 00:19:43,900
match that virtual machine that's all

00:19:42,760 --> 00:19:47,750
you have to do

00:19:43,900 --> 00:19:50,070
[Music]

00:19:47,750 --> 00:20:02,210
so we can go ahead and create that

00:19:50,070 --> 00:20:04,980
[Music]

00:20:02,210 --> 00:20:08,160
and it's up so show that

00:20:04,980 --> 00:20:08,160
[Music]

00:20:08,190 --> 00:20:12,480
so we've got a cluster right fee of 1099

00:20:10,680 --> 00:20:14,610
one thirty four to thirty to forty four

00:20:12,480 --> 00:20:17,250
and the important that we're exposing is

00:20:14,610 --> 00:20:20,640
thirty thousand and we can check the

00:20:17,250 --> 00:20:22,410
endpoints real quick so services always

00:20:20,640 --> 00:20:26,370
have an endpoint which is where they map

00:20:22,410 --> 00:20:27,930
to on the other end and at this point of

00:20:26,370 --> 00:20:29,910
course the endpoints that we're mapping

00:20:27,930 --> 00:20:33,560
to is none because we haven't created

00:20:29,910 --> 00:20:33,560
the virtual machine the maps to this yet

00:20:37,410 --> 00:20:41,490
so let's check again and it looks like

00:20:39,390 --> 00:20:43,640
the import has now completed so let's

00:20:41,490 --> 00:20:48,210
check the logs real quick to make sure

00:20:43,640 --> 00:20:49,920
is that everything went okay and it did

00:20:48,210 --> 00:20:53,220
right there import complete down near

00:20:49,920 --> 00:20:55,080
the bottom and we don't need to worry

00:20:53,220 --> 00:20:58,260
about the warnings for file because we

00:20:55,080 --> 00:21:00,000
didn't use that we use HTTP and here is

00:20:58,260 --> 00:21:05,880
the persistent volume itself that were

00:21:00,000 --> 00:21:08,220
bound to and it's because map to the DEF

00:21:05,880 --> 00:21:09,780
CON PVC we don't need to worry about its

00:21:08,220 --> 00:21:12,750
name because that will be looked up

00:21:09,780 --> 00:21:16,010
automatically so let's go ahead and

00:21:12,750 --> 00:21:16,010
create the virtual machine instance now

00:21:16,130 --> 00:21:21,840
and show that we have a new pod for

00:21:19,170 --> 00:21:24,500
Verte launcher and it is running been up

00:21:21,840 --> 00:21:24,500
for three seconds

00:21:25,210 --> 00:21:29,890
and here's the virtual machine instance

00:21:26,979 --> 00:21:34,049
it goes with

00:21:29,890 --> 00:21:40,600
so let's check the VNC console here

00:21:34,049 --> 00:21:45,600
login through PNC and the screen saver

00:21:40,600 --> 00:21:45,600
ticked on don't know how to get out

00:21:46,100 --> 00:21:56,880
actually no we ran out of power on the

00:21:48,889 --> 00:22:02,820
laptop we never plugged it in so we had

00:21:56,880 --> 00:22:04,670
the power right out on the laptop here's

00:22:02,820 --> 00:22:10,259
a plug

00:22:04,670 --> 00:22:10,259
[Music]

00:22:11,150 --> 00:22:18,170
we never plugged it in so at that point

00:22:16,200 --> 00:22:21,720
we were showing the the virtual machine

00:22:18,170 --> 00:22:23,520
you know missed it right there VNC was

00:22:21,720 --> 00:22:25,230
gonna boot up and actually show that we

00:22:23,520 --> 00:22:26,760
were using the exact same image that we

00:22:25,230 --> 00:22:29,460
had started with on bare metal which was

00:22:26,760 --> 00:22:32,060
of course well we've got if we better

00:22:29,460 --> 00:22:32,060
charge now

00:22:34,100 --> 00:22:38,060
it would take a minute for the machine

00:22:35,660 --> 00:22:39,590
to boot at this point so but that was

00:22:38,060 --> 00:22:45,470
basically there's the only other thing

00:22:39,590 --> 00:22:47,930
that I wanted to show was the disservice

00:22:45,470 --> 00:22:49,340
and actually how we mapped from that

00:22:47,930 --> 00:22:50,960
virtual machine that exposed that

00:22:49,340 --> 00:22:53,330
surface because the end point that I

00:22:50,960 --> 00:22:56,000
showed you a moment ago was mapped to

00:22:53,330 --> 00:22:57,800
that pod for that virtual machine and

00:22:56,000 --> 00:22:58,280
because we're mapping the virtual

00:22:57,800 --> 00:23:00,080
machines

00:22:58,280 --> 00:23:03,550
there's the pods IP to the virtual

00:23:00,080 --> 00:23:07,820
machine that then terminated at the

00:23:03,550 --> 00:23:12,050
machine itself so then we were able to

00:23:07,820 --> 00:23:13,340
SSH in from the node IP itself so it's

00:23:12,050 --> 00:23:15,710
something outside the cluster if you're

00:23:13,340 --> 00:23:16,550
done ssh into that box which obviously

00:23:15,710 --> 00:23:19,090
if you're gonna have a cloud-based

00:23:16,550 --> 00:23:23,080
virtual machine is a very essential

00:23:19,090 --> 00:23:25,020
point from here the yes

00:23:23,080 --> 00:23:26,610
[Music]

00:23:25,020 --> 00:23:29,760
yeah we was just gonna talk about the

00:23:26,610 --> 00:23:32,010
next steps of course one of the things

00:23:29,760 --> 00:23:33,809
that I glossed over was that we don't or

00:23:32,010 --> 00:23:35,870
that I was using local storage on this

00:23:33,809 --> 00:23:38,850
because it's a single instance machine

00:23:35,870 --> 00:23:40,260
you can use other backends however I

00:23:38,850 --> 00:23:43,890
chose not to do that because of the

00:23:40,260 --> 00:23:46,770
complexity of actually doing that on a

00:23:43,890 --> 00:23:48,240
single node one of the things we'd like

00:23:46,770 --> 00:23:51,980
to work on in the future of course it's

00:23:48,240 --> 00:23:51,980
making that a little easier to do and

00:23:52,340 --> 00:23:56,070
multiple networks is you know is another

00:23:54,540 --> 00:23:59,850
thing that I'd mentioned that was on our

00:23:56,070 --> 00:24:01,140
major wish list but from there I guess

00:23:59,850 --> 00:24:06,130
it's time to take questions

00:24:01,140 --> 00:24:06,130
[Music]

00:24:07,700 --> 00:24:14,010
we're bringing a mic one second

00:24:09,890 --> 00:24:15,110
[Music]

00:24:14,010 --> 00:24:20,160
which is

00:24:15,110 --> 00:24:22,020
[Music]

00:24:20,160 --> 00:24:23,180
all right can you guys hear me all right

00:24:22,020 --> 00:24:25,410
I want to make sure I understood the

00:24:23,180 --> 00:24:27,810
containerized data importers that what

00:24:25,410 --> 00:24:29,970
it was called yes okay it's basically

00:24:27,810 --> 00:24:33,030
just a utility that'll go grab an HTTP

00:24:29,970 --> 00:24:34,770
image of a disk image right yes but it

00:24:33,030 --> 00:24:36,330
runs as a container is that what to call

00:24:34,770 --> 00:24:39,930
the container hands it is a container

00:24:36,330 --> 00:24:42,870
that is basically running as a run once

00:24:39,930 --> 00:24:45,210
container and that because as you see

00:24:42,870 --> 00:24:47,670
it's it said completed when it finished

00:24:45,210 --> 00:24:49,890
actually doing the import and so what

00:24:47,670 --> 00:24:53,490
that pods job was to do was just simply

00:24:49,890 --> 00:24:55,590
to load the local storage on one end and

00:24:53,490 --> 00:24:59,190
connect HTTP on the other and just move

00:24:55,590 --> 00:25:01,500
the bits what that just dumps the bits

00:24:59,190 --> 00:25:03,750
into the Peavey exactly and it's doing

00:25:01,500 --> 00:25:05,580
it in the name space that you want on

00:25:03,750 --> 00:25:07,260
purpose so whatever name space you had

00:25:05,580 --> 00:25:08,820
mentioned in your virtual machine is

00:25:07,260 --> 00:25:10,650
where it's you know the container is

00:25:08,820 --> 00:25:12,750
data importers gonna start this pod and

00:25:10,650 --> 00:25:14,160
then you know we're not running into

00:25:12,750 --> 00:25:16,470
permissions issues by doing it that way

00:25:14,160 --> 00:25:17,430
and there's is that the only utility you

00:25:16,470 --> 00:25:19,020
have today you don't have anything

00:25:17,430 --> 00:25:20,400
that'll pull I was talking to Steve

00:25:19,020 --> 00:25:22,620
guarding a hair and I thought there was

00:25:20,400 --> 00:25:25,080
some way to pull an OCI image that might

00:25:22,620 --> 00:25:27,980
be embedded with a kernel and all the

00:25:25,080 --> 00:25:31,290
things that you want to vote to do that

00:25:27,980 --> 00:25:33,060
so pull an OCI image with it's already

00:25:31,290 --> 00:25:36,840
got all the bits you want yeah I mean

00:25:33,060 --> 00:25:38,130
it's nasty abuse of OCI but it's it also

00:25:36,840 --> 00:25:39,660
would make it nice and that all the

00:25:38,130 --> 00:25:41,100
infrastructure would be the same right I

00:25:39,660 --> 00:25:44,040
think what you're talking about in that

00:25:41,100 --> 00:25:45,870
case is using a different excuse me

00:25:44,040 --> 00:25:49,440
container runtime

00:25:45,870 --> 00:25:52,049
no no no I'm saying like dump VM image

00:25:49,440 --> 00:25:55,230
in a no CI image stuff it in a registry

00:25:52,049 --> 00:25:56,669
oh that is just a random disk image or

00:25:55,230 --> 00:25:59,549
another option we just pull straight

00:25:56,669 --> 00:26:02,309
from cinder like I always wondered why

00:25:59,549 --> 00:26:06,539
so we actually do have registry disks as

00:26:02,309 --> 00:26:11,340
a possible option here so you know you

00:26:06,539 --> 00:26:13,169
absolutely could do that I think that in

00:26:11,340 --> 00:26:15,240
a production environment I would imagine

00:26:13,169 --> 00:26:17,390
maybe that the persistent volume claim

00:26:15,240 --> 00:26:19,770
would have just a more universal appeal

00:26:17,390 --> 00:26:21,809
but yeah we certainly could put it into

00:26:19,770 --> 00:26:27,090
a registry as well a container registry

00:26:21,809 --> 00:26:30,059
right we're actually doing that on our

00:26:27,090 --> 00:26:32,520
dev images right now so we created

00:26:30,059 --> 00:26:34,760
docker registry sorry a container

00:26:32,520 --> 00:26:34,760
registry

00:26:38,760 --> 00:26:43,500
we you know will me instantiate the

00:26:41,160 --> 00:26:46,169
develop vironment we stock it with a

00:26:43,500 --> 00:26:47,640
tall pine image and a cirrus image and a

00:26:46,169 --> 00:26:50,250
couple others you know just so that we

00:26:47,640 --> 00:26:51,750
have base images to do all our testing

00:26:50,250 --> 00:26:53,070
infrastructure in and so yeah we put

00:26:51,750 --> 00:26:57,120
that directly into a container registry

00:26:53,070 --> 00:27:00,230
and you know utilize those images inside

00:26:57,120 --> 00:27:00,230
Cubert as well

00:27:00,950 --> 00:27:07,200
[Music]

00:27:02,850 --> 00:27:09,240
in that case we actually have a there

00:27:07,200 --> 00:27:12,930
was one other pod that was sitting on

00:27:09,240 --> 00:27:15,240
the you know what I would was listing

00:27:12,930 --> 00:27:22,350
the pods that's what was doing that yet

00:27:15,240 --> 00:27:23,520
one more pod any other questions so this

00:27:22,350 --> 00:27:26,940
part has been going on for a couple

00:27:23,520 --> 00:27:29,040
years are there examples that are using

00:27:26,940 --> 00:27:30,330
this for like primary security or are

00:27:29,040 --> 00:27:31,950
they just migrating existing virtual

00:27:30,330 --> 00:27:34,590
machines to make it easier to their

00:27:31,950 --> 00:27:36,420
existing workflow and if the former can

00:27:34,590 --> 00:27:38,850
you give an example of where it's better

00:27:36,420 --> 00:27:40,920
than I couldn't hear the question I'm

00:27:38,850 --> 00:27:42,720
sorry so one of the benefits of running

00:27:40,920 --> 00:27:44,430
virtual machines on top of kubernetes is

00:27:42,720 --> 00:27:46,290
you get more than just like Alex C&C

00:27:44,430 --> 00:27:48,210
groups to do like sandboxing between

00:27:46,290 --> 00:27:50,100
different varmints and I was curious

00:27:48,210 --> 00:27:52,890
like are there either customers of Red

00:27:50,100 --> 00:27:54,390
Hat or Red Hat that's using it in an

00:27:52,890 --> 00:27:56,670
area that they have like pen tested this

00:27:54,390 --> 00:27:58,170
on direct containers and you know they

00:27:56,670 --> 00:27:59,100
weren't secure enough and this was

00:27:58,170 --> 00:28:03,450
secure enough and could you talk about

00:27:59,100 --> 00:28:05,100
that a little bit so in terms of what I

00:28:03,450 --> 00:28:08,010
think the question is is you know

00:28:05,100 --> 00:28:09,030
address security concerns or is with

00:28:08,010 --> 00:28:11,630
security one of the things we were

00:28:09,030 --> 00:28:14,520
trying to address when we set this up

00:28:11,630 --> 00:28:17,550
yes it is more secure that wasn't

00:28:14,520 --> 00:28:19,020
necessarily our stated goal in terms of

00:28:17,550 --> 00:28:21,000
something we were setting out to

00:28:19,020 --> 00:28:22,740
accomplish but you're right there's

00:28:21,000 --> 00:28:24,810
there's a lot stronger process isolation

00:28:22,740 --> 00:28:26,850
when you run services inside the virtual

00:28:24,810 --> 00:28:28,620
machines like this however I would still

00:28:26,850 --> 00:28:31,500
point out that between other containers

00:28:28,620 --> 00:28:35,240
there's no isolation at that level

00:28:31,500 --> 00:28:38,340
anyway so you're just really I mean if

00:28:35,240 --> 00:28:39,810
security of now if you're looking at

00:28:38,340 --> 00:28:41,460
untrusted workloads in the virtual

00:28:39,810 --> 00:28:42,960
machine that's yes this is great if

00:28:41,460 --> 00:28:44,070
you're looking at not trusting anything

00:28:42,960 --> 00:28:46,050
on the cluster you're gonna need

00:28:44,070 --> 00:28:47,120
stronger guarantees

00:28:46,050 --> 00:28:52,540
does that answer the question

00:28:47,120 --> 00:28:53,670
[Music]

00:28:52,540 --> 00:28:54,980
soon

00:28:53,670 --> 00:28:58,399
[Music]

00:28:54,980 --> 00:29:00,529
so the question was how is it different

00:28:58,399 --> 00:29:03,889
from in the virtual machine versus just

00:29:00,529 --> 00:29:06,950
in a container and maybe who cares about

00:29:03,889 --> 00:29:08,389
that okay so in terms of what what's the

00:29:06,950 --> 00:29:10,580
difference in level of security between

00:29:08,389 --> 00:29:12,190
a virtual machine in a container level

00:29:10,580 --> 00:29:14,720
of the process isolation

00:29:12,190 --> 00:29:16,639
okay I'm sorry the level of process

00:29:14,720 --> 00:29:18,649
isolation or the level of process

00:29:16,639 --> 00:29:19,880
isolation yeah so that I mean that is

00:29:18,649 --> 00:29:21,559
one of the reasons that you would run a

00:29:19,880 --> 00:29:24,049
virtual machine is because you have that

00:29:21,559 --> 00:29:26,389
stronger process isolation than you do

00:29:24,049 --> 00:29:28,880
with a container which you see groups

00:29:26,389 --> 00:29:32,720
namespaces SELinux I mean those are

00:29:28,880 --> 00:29:34,490
strong guarantees but in theory you

00:29:32,720 --> 00:29:38,990
might be able to do something I don't

00:29:34,490 --> 00:29:41,419
know so so yeah I mean the virtual

00:29:38,990 --> 00:29:42,710
machine is a stronger guarantee but

00:29:41,419 --> 00:29:46,000
that's not what we set out to do when we

00:29:42,710 --> 00:29:49,130
do that when we set this up thank you

00:29:46,000 --> 00:29:53,400
anybody else

00:29:49,130 --> 00:29:55,170
[Music]

00:29:53,400 --> 00:29:56,760
if you don't mind it might try to answer

00:29:55,170 --> 00:29:59,460
his question I think I understand it

00:29:56,760 --> 00:30:00,900
okay so like I think you're thinking

00:29:59,460 --> 00:30:01,830
about it reverse like like you're

00:30:00,900 --> 00:30:03,420
thinking about it from a security

00:30:01,830 --> 00:30:04,920
perspective he's saying it exactly right

00:30:03,420 --> 00:30:06,060
don't think of it so from a security

00:30:04,920 --> 00:30:08,250
perspective but we should tell them what

00:30:06,060 --> 00:30:11,340
to think about it think about it as a

00:30:08,250 --> 00:30:13,560
tool to pull a VM into a an application

00:30:11,340 --> 00:30:15,030
similar to you know in a kubernetes am

00:30:13,560 --> 00:30:16,800
will file like that's phenomenal right

00:30:15,030 --> 00:30:18,660
because now I've got a database living

00:30:16,800 --> 00:30:21,000
in a VM I've got front-ends living in a

00:30:18,660 --> 00:30:22,410
container and it's a way to scope the

00:30:21,000 --> 00:30:24,450
entire application with a single

00:30:22,410 --> 00:30:26,250
application definition that's the beauty

00:30:24,450 --> 00:30:27,600
of coop vert on the other side of that I

00:30:26,250 --> 00:30:29,970
would say something like attic

00:30:27,600 --> 00:30:31,980
containers is where you're now running a

00:30:29,970 --> 00:30:33,870
container in a VM it still pulls the VM

00:30:31,980 --> 00:30:36,090
image it still uses all of the

00:30:33,870 --> 00:30:37,980
I'm sorry the container image it uses

00:30:36,090 --> 00:30:39,420
all the container constructs that you

00:30:37,980 --> 00:30:41,370
care about so now it's a packaging

00:30:39,420 --> 00:30:43,710
format in that scenario you're adding

00:30:41,370 --> 00:30:45,330
extra isolation you know around a

00:30:43,710 --> 00:30:47,250
container I think that's the way that

00:30:45,330 --> 00:30:48,780
you think about in a security construct

00:30:47,250 --> 00:30:50,370
in that now it's an isolate container

00:30:48,780 --> 00:30:51,990
but I still get all the packaging format

00:30:50,370 --> 00:30:53,460
advantages this is the opposite you

00:30:51,990 --> 00:30:55,110
don't get the packaging format advantage

00:30:53,460 --> 00:30:57,180
you get bring in old stuff that's in a

00:30:55,110 --> 00:31:01,720
VM advantage which is a very which is

00:30:57,180 --> 00:31:04,880
like the converse essentially thank you

00:31:01,720 --> 00:31:04,880
[Music]

00:31:07,809 --> 00:31:16,659
first you owe me about 50 cents so one

00:31:15,519 --> 00:31:20,950
of the interesting things I would like

00:31:16,659 --> 00:31:23,320
to see with Cooper is to sort of be able

00:31:20,950 --> 00:31:26,320
to handle the kind of container and use

00:31:23,320 --> 00:31:28,210
case in that you know kubernetes is

00:31:26,320 --> 00:31:31,330
running a law and you define said it

00:31:28,210 --> 00:31:32,349
needs additional resource application

00:31:31,330 --> 00:31:35,619
for yourself that needs additional

00:31:32,349 --> 00:31:38,309
resources so it calls into Cooper and

00:31:35,619 --> 00:31:40,210
launches additional VMS that then

00:31:38,309 --> 00:31:42,879
kubernetes could take advantage those

00:31:40,210 --> 00:31:45,309
new VMs to watch for containers inside

00:31:42,879 --> 00:31:48,729
is that is that been considered or is

00:31:45,309 --> 00:31:50,979
that the big limitation to what we're

00:31:48,729 --> 00:31:53,259
setting out right now is that we're

00:31:50,979 --> 00:31:55,089
attempting to not modify the kubernetes

00:31:53,259 --> 00:31:59,619
cluster or not required to be modified

00:31:55,089 --> 00:32:01,659
ahead of time and so because in order to

00:31:59,619 --> 00:32:03,639
be able to run a virtual machine as a

00:32:01,659 --> 00:32:06,190
container that requires a different

00:32:03,639 --> 00:32:08,259
container runtime than the default so we

00:32:06,190 --> 00:32:09,789
can't ask an administrator to

00:32:08,259 --> 00:32:12,039
necessarily do that because that's going

00:32:09,789 --> 00:32:15,039
to increase the friction in the future

00:32:12,039 --> 00:32:17,859
if kubernetes does allow dynamic

00:32:15,039 --> 00:32:18,609
container runtimes to be injected in on

00:32:17,859 --> 00:32:20,859
the fly

00:32:18,609 --> 00:32:23,229
then we can explore using virtual

00:32:20,859 --> 00:32:24,909
machines directly for using them in the

00:32:23,229 --> 00:32:27,639
cotta containers sort of approach where

00:32:24,909 --> 00:32:29,690
the point is for process isolation does

00:32:27,639 --> 00:32:32,779
that answer the question

00:32:29,690 --> 00:32:32,779
[Music]

00:32:34,050 --> 00:32:38,270
I mean I'm not looking for necessarily

00:32:36,240 --> 00:32:40,980
the considering the isolation be great

00:32:38,270 --> 00:32:42,810
but just being able to launch more being

00:32:40,980 --> 00:32:45,210
you know at a certain point in

00:32:42,810 --> 00:32:47,310
applications run out of resources inside

00:32:45,210 --> 00:32:50,910
of the beat existing VMs and needs to

00:32:47,310 --> 00:32:52,560
launch more VM so usually coupang

00:32:50,910 --> 00:32:54,300
they're these breaks at that point it

00:32:52,560 --> 00:32:57,080
has to fall back and hope it stack or

00:32:54,300 --> 00:32:59,640
some other tool for launching for VMs I

00:32:57,080 --> 00:33:02,220
just thought that cougar could be a way

00:32:59,640 --> 00:33:05,040
to actually Oso resource say to run

00:33:02,220 --> 00:33:08,210
right um I hadn't thought about that

00:33:05,040 --> 00:33:08,210
that's an interesting angle

00:33:08,280 --> 00:33:12,859
[Music]

00:33:09,970 --> 00:33:13,290
you have about three more minutes maybe

00:33:12,859 --> 00:33:17,429
less

00:33:13,290 --> 00:33:19,320
[Music]

00:33:17,429 --> 00:33:21,840
is there a way to pass like a cloud

00:33:19,320 --> 00:33:26,220
config as part of the virtual machine

00:33:21,840 --> 00:33:28,259
instance object oh cloud init data yeah

00:33:26,220 --> 00:33:30,899
yes I did not show that a bad into the

00:33:28,259 --> 00:33:33,419
virtual machine and you know basically

00:33:30,899 --> 00:33:34,649
cloud and it is its own standard so

00:33:33,419 --> 00:33:36,000
we're not doing anything special there

00:33:34,649 --> 00:33:37,980
we're just injecting that data and

00:33:36,000 --> 00:33:41,600
making it available we do that usually

00:33:37,980 --> 00:33:45,570
through a through its own volume mount

00:33:41,600 --> 00:33:47,490
so just to confirm the couvert has no

00:33:45,570 --> 00:33:49,919
access to the VM itself right it just

00:33:47,490 --> 00:33:52,370
brings up the VM and you're expected to

00:33:49,919 --> 00:33:54,430
know how to make use of it

00:33:52,370 --> 00:33:56,680
[Music]

00:33:54,430 --> 00:33:59,320
that's a loaded question know what I

00:33:56,680 --> 00:34:02,590
mean know what I mean is like this no

00:33:59,320 --> 00:34:05,040
for example if there's no like injection

00:34:02,590 --> 00:34:07,480
in the club config of like an SSH key

00:34:05,040 --> 00:34:09,790
well you can do cloud into data you can

00:34:07,480 --> 00:34:11,919
do an SSH key that way absolutely right

00:34:09,790 --> 00:34:13,630
right but I mean that's up to the user

00:34:11,919 --> 00:34:15,760
that's up to the user to do what they

00:34:13,630 --> 00:34:17,530
yet to set out presumably you would know

00:34:15,760 --> 00:34:19,570
that you wanted to do that however so

00:34:17,530 --> 00:34:22,300
we're yeah we're exposing the ability to

00:34:19,570 --> 00:34:24,040
do that and yes you can use that or but

00:34:22,300 --> 00:34:26,140
you have to know to do that right right

00:34:24,040 --> 00:34:28,510
what I just mean is the Qbert just

00:34:26,140 --> 00:34:33,210
brings it up and that said like there's

00:34:28,510 --> 00:34:33,210
no management inside of the VM itself

00:34:35,550 --> 00:34:41,950
that's the answer is yes that's true we

00:34:39,790 --> 00:34:45,640
are looking at other possibilities in

00:34:41,950 --> 00:34:48,429
terms of doing a monitor application

00:34:45,640 --> 00:34:49,899
that would be available if of course you

00:34:48,429 --> 00:34:51,700
know how do you do that in a generalized

00:34:49,899 --> 00:34:53,260
fashion if you're booting putting up a

00:34:51,700 --> 00:34:55,720
generalized virtual machine suddenly

00:34:53,260 --> 00:34:58,960
you're building you know your own VMware

00:34:55,720 --> 00:35:00,790
sort of infrastructure so yes we're

00:34:58,960 --> 00:35:03,370
looking into all possibilities for

00:35:00,790 --> 00:35:05,320
limited cases

00:35:03,370 --> 00:35:06,570
last question maybe

00:35:05,320 --> 00:35:08,250
[Music]

00:35:06,570 --> 00:35:10,910
all right okay out of time thanks

00:35:08,250 --> 00:35:10,910

YouTube URL: https://www.youtube.com/watch?v=Yjr5NB3gT3w


