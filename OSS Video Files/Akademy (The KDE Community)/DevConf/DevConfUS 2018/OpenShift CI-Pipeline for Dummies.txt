Title: OpenShift CI-Pipeline for Dummies
Publication date: 2019-02-25
Playlist: DevConfUS 2018
Description: 
	Continuous integration, Continous Delivery, and containers are buzz words of tech world nowadays. Though there are many tools for setting up the CI/CD pipelines Jenkins and openshift always have their special place. The current talk discusses common terms of continuous integration with respect to openshift and walks you through a simple tutorial about how to set up a containerized CI/CD pipeline on openshift with help of little boilerplate code for simple starter projects which can also be extended to any type of projects. By the end of session one should be able to easily create their CI/CD pipeline environment which runs on minishift.
Captions: 
	00:00:03,700 --> 00:00:06,820
[Music]

00:00:13,169 --> 00:00:19,710
great let's get on with it

00:00:20,390 --> 00:00:26,250
can you guys hear me so I thought it

00:00:24,750 --> 00:00:32,029
would be a talk but it's gonna be a

00:00:26,250 --> 00:00:32,029
conversation so let's get it started so

00:00:32,780 --> 00:00:39,540
today my name is Sam ran Kashyap Rolla

00:00:35,550 --> 00:00:41,879
Bundy I go by SK and on RedHat internal

00:00:39,540 --> 00:00:44,210
like I have an IRC idea of SK and on

00:00:41,879 --> 00:00:47,100
freenode am Sam Burrell and I work for

00:00:44,210 --> 00:00:49,769
continuous product ization team and my

00:00:47,100 --> 00:00:52,769
work mostly involves around like open

00:00:49,769 --> 00:00:54,210
shift and building ci5 lines and

00:00:52,769 --> 00:00:58,559
building tools to optimize the

00:00:54,210 --> 00:01:01,109
pipeline's etc so today as little as you

00:00:58,559 --> 00:01:04,170
can see the talk is about like open chip

00:01:01,109 --> 00:01:07,170
CI pipeline for dummies and I don't

00:01:04,170 --> 00:01:10,229
assume any knowledge love of open shaft

00:01:07,170 --> 00:01:12,960
or containers or like Percy software

00:01:10,229 --> 00:01:14,640
also but I guess you my you guys might

00:01:12,960 --> 00:01:17,850
be knowing about software since you are

00:01:14,640 --> 00:01:20,550
at Def Con so our agenda is to talk

00:01:17,850 --> 00:01:23,670
about like what is software and what are

00:01:20,550 --> 00:01:25,380
the problems with software and motion

00:01:23,670 --> 00:01:27,689
control and its need why do we need

00:01:25,380 --> 00:01:29,610
version control and common terminology

00:01:27,689 --> 00:01:32,310
which is coming across like when you

00:01:29,610 --> 00:01:35,390
start with CI pipelines continuous

00:01:32,310 --> 00:01:38,640
integration continuous delivery etc and

00:01:35,390 --> 00:01:41,909
how do we distribute like code on PI pi

00:01:38,640 --> 00:01:44,729
and how to build your pipeline using

00:01:41,909 --> 00:01:46,950
Jenkins on open shift then because this

00:01:44,729 --> 00:01:49,229
would be followed up by a small demo

00:01:46,950 --> 00:01:51,539
which is actually required for 20

00:01:49,229 --> 00:01:54,689
minutes but I'll try to fast forward it

00:01:51,539 --> 00:01:57,810
for the talk going ahead

00:01:54,689 --> 00:02:00,630
what is the software as it says this is

00:01:57,810 --> 00:02:04,490
a conversation maker do you guys have

00:02:00,630 --> 00:02:04,490
any definitions about software

00:02:06,520 --> 00:02:12,819
yeah that's from Wikipedia it doesn't

00:02:09,670 --> 00:02:15,270
count so like uh okay for in my opinion

00:02:12,819 --> 00:02:18,459
like up for me software is like

00:02:15,270 --> 00:02:20,890
something which is written like a Fermi

00:02:18,459 --> 00:02:23,650
software is just a code code written in

00:02:20,890 --> 00:02:27,580
a file and which runs on my computer or

00:02:23,650 --> 00:02:29,050
through which it can run on like any

00:02:27,580 --> 00:02:31,180
other device like which has the

00:02:29,050 --> 00:02:33,420
computing power it can be my washing

00:02:31,180 --> 00:02:35,940
machine or like it can be a television

00:02:33,420 --> 00:02:38,440
thanks to Samsung and the other

00:02:35,940 --> 00:02:42,069
companies now software is running

00:02:38,440 --> 00:02:43,720
everywhere so then that's how a software

00:02:42,069 --> 00:02:45,850
is defined finally it comes down to a

00:02:43,720 --> 00:02:48,250
piece of code or like the set of

00:02:45,850 --> 00:02:52,030
instructions that you tell a machine to

00:02:48,250 --> 00:02:53,950
work on and these are the problems which

00:02:52,030 --> 00:02:56,560
in with the software like usually in are

00:02:53,950 --> 00:02:59,980
like software world the first problem is

00:02:56,560 --> 00:03:01,569
like does it install properly and the

00:02:59,980 --> 00:03:04,209
second problem is does it install

00:03:01,569 --> 00:03:07,060
properly on my machine because you guys

00:03:04,209 --> 00:03:09,700
might be working on Mac Mac books right

00:03:07,060 --> 00:03:13,480
or us or like any other like any other

00:03:09,700 --> 00:03:15,730
machine per se but does it work finally

00:03:13,480 --> 00:03:17,470
and does it really work there is a

00:03:15,730 --> 00:03:21,190
subtle difference between does it work

00:03:17,470 --> 00:03:23,560
and does it really work because each

00:03:21,190 --> 00:03:26,310
person who is using a software has their

00:03:23,560 --> 00:03:31,390
own use case of like for example if you

00:03:26,310 --> 00:03:35,049
if you use a paint software like a child

00:03:31,390 --> 00:03:37,000
would be using for like painting random

00:03:35,049 --> 00:03:39,370
diagrams or a professional you would be

00:03:37,000 --> 00:03:42,040
using for certain other use cases by

00:03:39,370 --> 00:03:44,500
clipping or cropping so when we talk

00:03:42,040 --> 00:03:46,780
about does it really work it extensively

00:03:44,500 --> 00:03:50,530
tests about like software is working for

00:03:46,780 --> 00:03:53,250
many use cases or not and we do we store

00:03:50,530 --> 00:03:56,109
the software and how do we store it and

00:03:53,250 --> 00:03:58,660
how do we verify everything which has

00:03:56,109 --> 00:04:01,920
which is which is already mentioned

00:03:58,660 --> 00:04:04,080
about the questions going ahead

00:04:01,920 --> 00:04:06,540
and another night premiere we see in

00:04:04,080 --> 00:04:08,190
every night your liquor segments like

00:04:06,540 --> 00:04:11,130
any of you are and guys are elixir

00:04:08,190 --> 00:04:13,590
segments by any chance okay have you

00:04:11,130 --> 00:04:16,410
ever got there's like it works on my

00:04:13,590 --> 00:04:18,030
machine by by one of the customers so

00:04:16,410 --> 00:04:21,299
that that's what like happens with me

00:04:18,030 --> 00:04:23,850
always because I am one of the

00:04:21,299 --> 00:04:26,520
maintainer soft like a project called as

00:04:23,850 --> 00:04:30,050
linchpin and most of the times like the

00:04:26,520 --> 00:04:32,820
github issues we'll see was like ok like

00:04:30,050 --> 00:04:35,460
it doesn't work on my machine and some

00:04:32,820 --> 00:04:38,639
people say that it works on Fedora but

00:04:35,460 --> 00:04:40,740
it doesn't work on sent us but we want

00:04:38,639 --> 00:04:43,050
to make it work on sent us that is like

00:04:40,740 --> 00:04:47,610
a usual nightmare which we've V to be

00:04:43,050 --> 00:04:50,370
you see usually like how you know how to

00:04:47,610 --> 00:04:52,760
do that like the next big thing is like

00:04:50,370 --> 00:04:55,229
where do we store the software like

00:04:52,760 --> 00:04:57,060
there are like many options to soul

00:04:55,229 --> 00:04:59,550
store the software like during my

00:04:57,060 --> 00:05:01,820
undergrad days I used to mail my code

00:04:59,550 --> 00:05:05,550
which I'm totally embarrassed off

00:05:01,820 --> 00:05:08,280
because like we didn't have like github

00:05:05,550 --> 00:05:10,110
or like anything maybe I was not aware

00:05:08,280 --> 00:05:12,539
of or about the version control systems

00:05:10,110 --> 00:05:14,880
at that woman we used to mail code there

00:05:12,539 --> 00:05:17,880
using Gmail but thanks to Gmail if they

00:05:14,880 --> 00:05:20,610
have started blocking the code in zip

00:05:17,880 --> 00:05:23,370
files like these days so because then

00:05:20,610 --> 00:05:26,160
that is not an option anymore and later

00:05:23,370 --> 00:05:29,100
on we started using traditional software

00:05:26,160 --> 00:05:31,650
providers like Google Drive Dropbox and

00:05:29,100 --> 00:05:34,530
one driver but the inherent problem with

00:05:31,650 --> 00:05:36,300
this all this kind of software softwares

00:05:34,530 --> 00:05:39,210
are like we couldn't maintain the

00:05:36,300 --> 00:05:41,970
versions of of the whole software so for

00:05:39,210 --> 00:05:43,950
example I have made a change like 10

00:05:41,970 --> 00:05:47,190
days back and I want to get that change

00:05:43,950 --> 00:05:48,780
again right now so at that moment like I

00:05:47,190 --> 00:05:52,350
don't know where if I use Google Drive

00:05:48,780 --> 00:05:54,680
to do that every time I upload my files

00:05:52,350 --> 00:05:58,229
to Google Drive it kind of overrides it

00:05:54,680 --> 00:06:00,450
unless it is Google Docs it has recently

00:05:58,229 --> 00:06:01,180
introduced a version control system

00:06:00,450 --> 00:06:03,370
where you can

00:06:01,180 --> 00:06:05,199
through different versions but that

00:06:03,370 --> 00:06:10,389
didn't feel like a proper way to store

00:06:05,199 --> 00:06:13,650
my code so then came get so I just

00:06:10,389 --> 00:06:17,500
wanted to share this manual pager get

00:06:13,650 --> 00:06:19,900
that that is like mentioned as like give

00:06:17,500 --> 00:06:22,210
the stupid content factory it's not

00:06:19,900 --> 00:06:25,300
stupid anymore it's like it's the best

00:06:22,210 --> 00:06:26,830
content tracking can content writing

00:06:25,300 --> 00:06:29,080
software or the version control software

00:06:26,830 --> 00:06:33,340
have ever experienced

00:06:29,080 --> 00:06:36,759
so how does it work it has like many

00:06:33,340 --> 00:06:39,130
many features out there but all I do is

00:06:36,759 --> 00:06:42,039
like I memorize like four to five

00:06:39,130 --> 00:06:46,840
commands and I know the purpose of that

00:06:42,039 --> 00:06:49,570
get add commit you know git pull git add

00:06:46,840 --> 00:06:50,889
git commit get push so these are the

00:06:49,570 --> 00:06:53,139
four commands which you need to know

00:06:50,889 --> 00:06:56,830
like in order to be like maintain your

00:06:53,139 --> 00:06:59,440
software on git so this is an

00:06:56,830 --> 00:07:03,099
interesting definition like a version

00:06:59,440 --> 00:07:04,930
control is like the basic idea is about

00:07:03,099 --> 00:07:07,900
like the homomorphic end up after

00:07:04,930 --> 00:07:11,020
snapping some manifolds of hilbert space

00:07:07,900 --> 00:07:13,300
which i don't know what it is even they

00:07:11,020 --> 00:07:16,570
I'm not sure like creators must be

00:07:13,300 --> 00:07:19,330
knowing about that the advantages of

00:07:16,570 --> 00:07:21,940
version control which I found it is like

00:07:19,330 --> 00:07:25,090
we can get the continuous backup of a

00:07:21,940 --> 00:07:27,550
software so we can back up the software

00:07:25,090 --> 00:07:30,250
like to certain extent that we can

00:07:27,550 --> 00:07:33,099
revert that software from the lake up

00:07:30,250 --> 00:07:35,080
but not even 10 days or like it can

00:07:33,099 --> 00:07:39,099
which can time this literally time

00:07:35,080 --> 00:07:41,470
travel from one particular checkpoint to

00:07:39,099 --> 00:07:44,080
another checkpoint so these are the

00:07:41,470 --> 00:07:46,449
early get 101 things which you do there

00:07:44,080 --> 00:07:48,849
will be a remote repository on github or

00:07:46,449 --> 00:07:51,370
somewhere on your host server and you'll

00:07:48,849 --> 00:07:55,570
have your working directory and you use

00:07:51,370 --> 00:07:57,280
git add to git add command to add the

00:07:55,570 --> 00:08:00,940
working directory on to the steering and

00:07:57,280 --> 00:08:02,080
staging and you use commit to actually

00:08:00,940 --> 00:08:04,810
like

00:08:02,080 --> 00:08:07,690
result finalized the finalized version

00:08:04,810 --> 00:08:10,000
of your software and you push it back to

00:08:07,690 --> 00:08:14,080
the remote repository so that's how you

00:08:10,000 --> 00:08:16,420
do like a kid and there's like then

00:08:14,080 --> 00:08:18,400
whenever you have the perfect backup of

00:08:16,420 --> 00:08:20,920
your software and you always have

00:08:18,400 --> 00:08:22,630
confidence to move on or to let go with

00:08:20,920 --> 00:08:26,260
the next steps like installation of

00:08:22,630 --> 00:08:28,900
software's or like resolve resolve some

00:08:26,260 --> 00:08:31,480
other problems with the software going

00:08:28,900 --> 00:08:34,270
ahead let's see the terminology like

00:08:31,480 --> 00:08:37,930
before you need to know about like

00:08:34,270 --> 00:08:40,240
continuous a CI pipelines before we get

00:08:37,930 --> 00:08:42,370
into the actual carpet one is containers

00:08:40,240 --> 00:08:43,720
and other terms are continuous

00:08:42,370 --> 00:08:46,180
integration continuous delivery

00:08:43,720 --> 00:08:49,150
continuous deployment and there are like

00:08:46,180 --> 00:08:51,160
many continuous these days like our team

00:08:49,150 --> 00:08:53,140
I Red Hat it's called as continuous

00:08:51,160 --> 00:08:55,750
product ization and there is like

00:08:53,140 --> 00:08:57,310
continuous improvement coming up there

00:08:55,750 --> 00:09:00,640
there are like many things which you

00:08:57,310 --> 00:09:02,170
continuously do then and we will see

00:09:00,640 --> 00:09:04,750
through the definitions of like some of

00:09:02,170 --> 00:09:06,370
those and you know what we should we

00:09:04,750 --> 00:09:08,370
should be knowing what Jenkins says and

00:09:06,370 --> 00:09:11,260
we should be knowing what openshift is

00:09:08,370 --> 00:09:15,010
and different types of configurations in

00:09:11,260 --> 00:09:18,550
open shot so coming to the continuous

00:09:15,010 --> 00:09:21,010
things the thing which has been

00:09:18,550 --> 00:09:25,180
bothering everyone like since many

00:09:21,010 --> 00:09:26,920
decades is like whenever software is

00:09:25,180 --> 00:09:29,170
released like there are the versions of

00:09:26,920 --> 00:09:31,810
software's a lot of enhancements a lot

00:09:29,170 --> 00:09:34,930
of bug fixes and like a lot of features

00:09:31,810 --> 00:09:37,090
coming up so the basic trend nowadays

00:09:34,930 --> 00:09:38,770
which curve goes around like all the

00:09:37,090 --> 00:09:41,020
software is continuous integration

00:09:38,770 --> 00:09:42,970
continuous delivery and continuous

00:09:41,020 --> 00:09:45,460
deployment so continuous integration

00:09:42,970 --> 00:09:48,100
comes in the picture where you keep on

00:09:45,460 --> 00:09:53,380
merging every comment every comment

00:09:48,100 --> 00:09:55,710
which a developer says onto onto your

00:09:53,380 --> 00:09:59,440
like a production environment or like

00:09:55,710 --> 00:10:01,780
you create a build of the software which

00:09:59,440 --> 00:10:03,790
which is content

00:10:01,780 --> 00:10:07,960
which is continuously aligns with the

00:10:03,790 --> 00:10:09,520
actual production repository so that is

00:10:07,960 --> 00:10:11,710
when we call it as a continuous

00:10:09,520 --> 00:10:13,750
integration because every software has

00:10:11,710 --> 00:10:15,820
like lots of nowadays every software has

00:10:13,750 --> 00:10:17,710
a lot of dependencies and pieces which

00:10:15,820 --> 00:10:21,160
new you need to put it together like a

00:10:17,710 --> 00:10:23,980
Lego and if one of the earlier pieces

00:10:21,160 --> 00:10:26,110
fails the whole software fails again so

00:10:23,980 --> 00:10:27,940
to make sure that everything is working

00:10:26,110 --> 00:10:30,940
fine continuous integration is one of

00:10:27,940 --> 00:10:33,880
the process and the other thing is like

00:10:30,940 --> 00:10:35,920
the other most ambiguous two terms are

00:10:33,880 --> 00:10:37,590
continuous delivery and continuous

00:10:35,920 --> 00:10:40,540
deployment there is a subtle difference

00:10:37,590 --> 00:10:42,520
between continuous delivery and

00:10:40,540 --> 00:10:46,780
deployment delivery is something which

00:10:42,520 --> 00:10:49,810
you reliably release your software so

00:10:46,780 --> 00:10:52,240
whenever I say well software X has

00:10:49,810 --> 00:10:54,130
released like one dot oh it is the most

00:10:52,240 --> 00:10:56,590
stable version and I'm going to deliver

00:10:54,130 --> 00:10:58,750
it to all the distributions out there

00:10:56,590 --> 00:11:01,930
and so that people can install it

00:10:58,750 --> 00:11:04,210
install it but continuous deployment is

00:11:01,930 --> 00:11:07,120
something which if there is a running

00:11:04,210 --> 00:11:09,660
software like an Apache server or like a

00:11:07,120 --> 00:11:13,660
Python base server and you continuously

00:11:09,660 --> 00:11:15,940
update the existing packages while

00:11:13,660 --> 00:11:17,800
running the software out there and we

00:11:15,940 --> 00:11:20,620
have a stage production and test

00:11:17,800 --> 00:11:22,990
environments like all together making

00:11:20,620 --> 00:11:26,740
sure that deployment of the software

00:11:22,990 --> 00:11:29,080
runs runs runs as per the tests which

00:11:26,740 --> 00:11:33,640
are being run against that particular

00:11:29,080 --> 00:11:35,170
application no you had Y continuous why

00:11:33,640 --> 00:11:36,880
do we need continuous because like

00:11:35,170 --> 00:11:39,310
whenever the software really is release

00:11:36,880 --> 00:11:41,920
it doesn't mean that the software is

00:11:39,310 --> 00:11:45,070
perfect there it is a process where like

00:11:41,920 --> 00:11:47,800
evolution happens and it turns into a

00:11:45,070 --> 00:11:52,420
like a production quality software where

00:11:47,800 --> 00:11:54,550
people can use using the using all the

00:11:52,420 --> 00:11:56,080
test mechanisms and other other things

00:11:54,550 --> 00:11:59,980
but the

00:11:56,080 --> 00:12:01,810
basic reasons of like of the continuous

00:11:59,980 --> 00:12:04,060
things that are which are happening are

00:12:01,810 --> 00:12:07,149
because to ensure the standard practices

00:12:04,060 --> 00:12:10,149
and ensure the software is delivered

00:12:07,149 --> 00:12:12,730
faster that at a faster rate and people

00:12:10,149 --> 00:12:17,350
get the time to market of a software is

00:12:12,730 --> 00:12:19,240
reduce and if we fail also like we would

00:12:17,350 --> 00:12:21,430
like to feel consistently so that we

00:12:19,240 --> 00:12:25,390
could fix it in the next version so that

00:12:21,430 --> 00:12:28,000
is the important goal get away with the

00:12:25,390 --> 00:12:32,019
continuous improvement of an existing

00:12:28,000 --> 00:12:35,050
software going ahead so this is the CI

00:12:32,019 --> 00:12:37,870
CD loop which every software is maker

00:12:35,050 --> 00:12:40,810
nowadays following there you code a

00:12:37,870 --> 00:12:42,850
particular software and you climb you

00:12:40,810 --> 00:12:45,370
value and you build that software and

00:12:42,850 --> 00:12:48,610
later on you test the software release

00:12:45,370 --> 00:12:50,950
and deploy into the production and make

00:12:48,610 --> 00:12:53,649
the customers use it and later on you

00:12:50,950 --> 00:12:55,930
can just monitor it so depending upon

00:12:53,649 --> 00:12:58,510
the feedback which you get you can just

00:12:55,930 --> 00:13:04,240
again plan recode and rebuild everything

00:12:58,510 --> 00:13:07,839
so and enhance it so what are containers

00:13:04,240 --> 00:13:10,510
so containers are these buzzwords

00:13:07,839 --> 00:13:14,320
recently came into picture like after a

00:13:10,510 --> 00:13:17,470
long time where there these are this

00:13:14,320 --> 00:13:21,610
isolated user spaces so if you have a

00:13:17,470 --> 00:13:24,190
very big machine off liquor 128 GB RAM

00:13:21,610 --> 00:13:27,220
and like 8 terabytes so if you want to

00:13:24,190 --> 00:13:29,680
share the whole machine with different

00:13:27,220 --> 00:13:31,930
processes together we need to create

00:13:29,680 --> 00:13:34,060
some isolation so previously it used to

00:13:31,930 --> 00:13:35,829
happen with virtual machines but

00:13:34,060 --> 00:13:37,660
relating the problem with virtual

00:13:35,829 --> 00:13:40,209
machines was like virtual machines were

00:13:37,660 --> 00:13:42,160
very heavy in nature and each has its

00:13:40,209 --> 00:13:45,100
own operating system complete operating

00:13:42,160 --> 00:13:47,410
system running and lot of unnecessary

00:13:45,100 --> 00:13:49,899
like software which is running as an

00:13:47,410 --> 00:13:52,560
isolated environment in in terms of

00:13:49,899 --> 00:13:55,870
virtual machines but whereas containers

00:13:52,560 --> 00:13:58,520
lessen the burden by creating small user

00:13:55,870 --> 00:14:00,620
spaces using technology called as

00:13:58,520 --> 00:14:03,310
I'm not going to go and detail into it

00:14:00,620 --> 00:14:06,770
but it kind of simulates the whole

00:14:03,310 --> 00:14:09,980
server environment in terms of a process

00:14:06,770 --> 00:14:13,010
and you can give you the whole feel of

00:14:09,980 --> 00:14:16,520
the Bullock operating system within a

00:14:13,010 --> 00:14:18,440
container so that resulted in this like

00:14:16,520 --> 00:14:20,750
previously people used to say it works

00:14:18,440 --> 00:14:25,160
on my machine now people started saying

00:14:20,750 --> 00:14:28,340
it works on my country so this is an

00:14:25,160 --> 00:14:30,290
example file of the darker darker which

00:14:28,340 --> 00:14:33,970
is used to create your own like

00:14:30,290 --> 00:14:36,530
container so what it does is like it was

00:14:33,970 --> 00:14:40,160
equally from the main repository of like

00:14:36,530 --> 00:14:43,760
a fedora and it pulls down the Fedora

00:14:40,160 --> 00:14:46,700
image and it runs a command called a DNF

00:14:43,760 --> 00:14:50,360
install and runs the command and install

00:14:46,700 --> 00:14:53,090
the software on top of that image and it

00:14:50,360 --> 00:14:55,040
also says that ok this will be the slash

00:14:53,090 --> 00:14:57,710
temp slash would be the you are star

00:14:55,040 --> 00:14:59,420
working directory and this is a

00:14:57,710 --> 00:15:01,940
container if you run the container

00:14:59,420 --> 00:15:05,180
without the last statement there it

00:15:01,940 --> 00:15:07,600
would just run and it's tall it would

00:15:05,180 --> 00:15:10,610
stop after like few seconds because

00:15:07,600 --> 00:15:13,190
container needs something needs

00:15:10,610 --> 00:15:17,120
something to like achieve each container

00:15:13,190 --> 00:15:19,730
has a purpose of running a command or

00:15:17,120 --> 00:15:23,600
running a web server or running Sai

00:15:19,730 --> 00:15:27,440
anything but if we want to kind of keep

00:15:23,600 --> 00:15:30,530
on like if you want to keep on make the

00:15:27,440 --> 00:15:34,580
container running always you use some

00:15:30,530 --> 00:15:38,960
liquor some command like kale - eff dev

00:15:34,580 --> 00:15:40,880
/ null to make it it works like an

00:15:38,960 --> 00:15:45,140
infinite loop so to make the container

00:15:40,880 --> 00:15:47,900
running always and finally

00:15:45,140 --> 00:15:50,540
Jenkins Jenkins is a tool of which

00:15:47,900 --> 00:15:55,160
people started using for the whole

00:15:50,540 --> 00:15:57,490
automation purposes there it can achieve

00:15:55,160 --> 00:16:00,610
like a law of lays it

00:15:57,490 --> 00:16:03,089
by means of life plugins and shell

00:16:00,610 --> 00:16:06,880
scripts our Jenkins job files by

00:16:03,089 --> 00:16:10,020
creating the many scheduled running

00:16:06,880 --> 00:16:13,180
bills and triggers notifications and

00:16:10,020 --> 00:16:15,279
automated scripts and pipelines and it

00:16:13,180 --> 00:16:18,550
also does the multi node delegation

00:16:15,279 --> 00:16:20,800
where like if there are different types

00:16:18,550 --> 00:16:23,620
of operating systems you want to test

00:16:20,800 --> 00:16:26,050
the software on Jenkins Jenkins is a

00:16:23,620 --> 00:16:27,880
software which you go to because it can

00:16:26,050 --> 00:16:31,270
you do the delegation lifts if you want

00:16:27,880 --> 00:16:34,649
to run a script on a fedorov slave it

00:16:31,270 --> 00:16:38,560
can also do that and it also has like a

00:16:34,649 --> 00:16:41,320
log logging mechanism where it can

00:16:38,560 --> 00:16:43,600
record everything every instruction

00:16:41,320 --> 00:16:47,320
which you run against a particular sales

00:16:43,600 --> 00:16:49,690
slave using Jenkins so 5 like ingest

00:16:47,320 --> 00:16:53,050
Jenkins is a tool which automates stuff

00:16:49,690 --> 00:16:57,430
with the help of scripts plugins and job

00:16:53,050 --> 00:16:58,930
files and how Jenkins come ins will come

00:16:57,430 --> 00:17:04,360
into the picture like whether it opens

00:16:58,930 --> 00:17:06,520
open Jenkins is a is a tool as I

00:17:04,360 --> 00:17:09,160
said it will software or it can do

00:17:06,520 --> 00:17:13,030
anything which you want to Jenkins takes

00:17:09,160 --> 00:17:15,610
the code from git git server and it can

00:17:13,030 --> 00:17:18,400
also it has a feature to build a docker

00:17:15,610 --> 00:17:22,390
container and it can run it can also run

00:17:18,400 --> 00:17:25,689
it on open shell so over ship comes with

00:17:22,390 --> 00:17:27,910
a CI server that can build deploy and

00:17:25,689 --> 00:17:30,190
apply the containers for you now so

00:17:27,910 --> 00:17:32,080
whenever software is nowadays delivered

00:17:30,190 --> 00:17:34,690
like you in order to make sure the

00:17:32,080 --> 00:17:37,540
software is always running we deliver it

00:17:34,690 --> 00:17:40,600
in inside a container instead of a rpm

00:17:37,540 --> 00:17:43,990
package or any other liquor script any

00:17:40,600 --> 00:17:47,020
other repository because containers have

00:17:43,990 --> 00:17:50,110
a reliable source of software

00:17:47,020 --> 00:17:53,559
distribution because of distribution

00:17:50,110 --> 00:17:59,620
because because of their isolated

00:17:53,559 --> 00:18:02,800
environment nature and because of I'm

00:17:59,620 --> 00:18:05,080
sorry the isolated environment and I'm

00:18:02,800 --> 00:18:07,540
in nature and it is sure it is sure that

00:18:05,080 --> 00:18:13,740
it would work at any point of time using

00:18:07,540 --> 00:18:16,929
docker so open server is a open ship or

00:18:13,740 --> 00:18:20,170
recently changed its name to like okd or

00:18:16,929 --> 00:18:22,390
ours and kubernetes distribution it is

00:18:20,170 --> 00:18:25,210
it kind of built around like the docker

00:18:22,390 --> 00:18:28,510
containers and kubernetes distribution

00:18:25,210 --> 00:18:30,970
platform which manages the whole laker

00:18:28,510 --> 00:18:33,520
different kinds of containers and which

00:18:30,970 --> 00:18:36,780
can also the load balance on the

00:18:33,520 --> 00:18:39,760
containers so open ship has like many

00:18:36,780 --> 00:18:42,490
many configurations which you can make

00:18:39,760 --> 00:18:45,190
use of to build containers and to deploy

00:18:42,490 --> 00:18:48,429
containers and to store different

00:18:45,190 --> 00:18:50,770
metadata about the containers and also

00:18:48,429 --> 00:18:54,370
it can also the create pipelines and

00:18:50,770 --> 00:18:56,800
pods inside the container and we will

00:18:54,370 --> 00:19:00,150
see that in detail a bill they open

00:18:56,800 --> 00:19:03,580
shift in open ship terminology like each

00:19:00,150 --> 00:19:06,550
configuration is termed as a template to

00:19:03,580 --> 00:19:09,070
do a specific task for example when you

00:19:06,550 --> 00:19:11,590
see a very conflict built logic is

00:19:09,070 --> 00:19:15,280
something which you tell open ship how

00:19:11,590 --> 00:19:18,790
to build the image of a container and a

00:19:15,280 --> 00:19:21,580
deployment conflict is about these about

00:19:18,790 --> 00:19:24,070
the way how you deploy or how you run

00:19:21,580 --> 00:19:27,460
the container with all different load

00:19:24,070 --> 00:19:30,640
balancers and make any health checks or

00:19:27,460 --> 00:19:33,280
triggers etc and conflict maps are

00:19:30,640 --> 00:19:35,710
something which we use to store the

00:19:33,280 --> 00:19:37,960
credentials or any other metadata which

00:19:35,710 --> 00:19:40,750
is related to the container which can be

00:19:37,960 --> 00:19:41,110
available at the time of running by the

00:19:40,750 --> 00:19:43,390
time

00:19:41,110 --> 00:19:45,210
running containers environment variables

00:19:43,390 --> 00:19:48,429
inside the container

00:19:45,210 --> 00:19:50,620
finally like open shipped also has like

00:19:48,429 --> 00:19:53,799
previously it used to be a preview but

00:19:50,620 --> 00:19:57,070
now OpenShift supports pipelines where

00:19:53,799 --> 00:19:59,770
you can have a series of steps use which

00:19:57,070 --> 00:20:03,490
can be ran through Jenkins which uses

00:19:59,770 --> 00:20:05,320
the containers containers using an open

00:20:03,490 --> 00:20:08,200
chef domain-specific language and

00:20:05,320 --> 00:20:10,740
separate OpenShift plugin so that like

00:20:08,200 --> 00:20:13,750
you can achieve the whole pipeline

00:20:10,740 --> 00:20:16,980
deployment or like a software deployment

00:20:13,750 --> 00:20:20,350
or release process using it using the

00:20:16,980 --> 00:20:23,860
user-defined steps inside a champions

00:20:20,350 --> 00:20:25,510
file and pod is nothing but a collection

00:20:23,860 --> 00:20:28,410
of containers which you want to run

00:20:25,510 --> 00:20:32,500
standalone instead of running it as a

00:20:28,410 --> 00:20:35,620
deployment or the advantage of word

00:20:32,500 --> 00:20:38,530
deploy a pod is like this is the best

00:20:35,620 --> 00:20:42,040
mechanism to test your container so you

00:20:38,530 --> 00:20:43,960
you just create a pod file and you copy

00:20:42,040 --> 00:20:46,570
paste the pod file onto the open shipped

00:20:43,960 --> 00:20:48,610
environment and it runs as a container

00:20:46,570 --> 00:20:51,910
and you can delete the pod anytime

00:20:48,610 --> 00:20:54,880
however in case of a deployment the

00:20:51,910 --> 00:20:56,740
deployment is like bye-bye configuration

00:20:54,880 --> 00:20:59,919
by default configuration deployments

00:20:56,740 --> 00:21:01,570
always tend to be replicating in nature

00:20:59,919 --> 00:21:05,140
even though if you accidentally delete

00:21:01,570 --> 00:21:09,330
it so deployments are something which

00:21:05,140 --> 00:21:12,040
you use for the production environment

00:21:09,330 --> 00:21:14,250
finally like how do we deploy how do we

00:21:12,040 --> 00:21:19,090
deploy the containers and how do we

00:21:14,250 --> 00:21:22,660
define all these deployments so the best

00:21:19,090 --> 00:21:26,049
part is like openshift talks Yamin so

00:21:22,660 --> 00:21:29,350
instead of having a long json or like

00:21:26,049 --> 00:21:32,860
any other xml definitions openshift has

00:21:29,350 --> 00:21:34,530
a simplified nature of like defining

00:21:32,860 --> 00:21:36,970
things using Yama

00:21:34,530 --> 00:21:39,530
before that like our if you want to have

00:21:36,970 --> 00:21:43,100
your open shipped around running

00:21:39,530 --> 00:21:45,200
your local machine you just create this

00:21:43,100 --> 00:21:48,020
is a this is an instruction set which is

00:21:45,200 --> 00:21:51,590
used for installing open mini shipped on

00:21:48,020 --> 00:21:54,290
your current big Fedora machine so if

00:21:51,590 --> 00:21:56,830
you want to do it on you are like

00:21:54,290 --> 00:21:59,060
Windows machine or like any other

00:21:56,830 --> 00:22:01,310
distribution they are set of

00:21:59,060 --> 00:22:03,140
documentation set of the documentation

00:22:01,310 --> 00:22:08,090
instructions are on the OpenShift

00:22:03,140 --> 00:22:11,630
website but like for for running an open

00:22:08,090 --> 00:22:15,440
shirt on your local environment to test

00:22:11,630 --> 00:22:18,770
things we use we install the lippert

00:22:15,440 --> 00:22:21,770
dependencies and we install we make sure

00:22:18,770 --> 00:22:24,110
that your current user name is added to

00:22:21,770 --> 00:22:27,500
the lipfird group to manage the little

00:22:24,110 --> 00:22:30,050
to manage the KVM and all the virtual

00:22:27,500 --> 00:22:34,330
machines and you download the miniature

00:22:30,050 --> 00:22:37,960
binary from for all from the miniature

00:22:34,330 --> 00:22:40,520
github repository and you just start

00:22:37,960 --> 00:22:45,020
start with like many should start come

00:22:40,520 --> 00:22:46,730
on so this is this is a build conflict

00:22:45,020 --> 00:22:48,860
is an example build conflict for

00:22:46,730 --> 00:22:52,940
building the docker file which is

00:22:48,860 --> 00:22:55,610
already like mentioned before so most of

00:22:52,940 --> 00:22:57,770
the times what I do what any person like

00:22:55,610 --> 00:23:00,740
curve would do is like just copy paste

00:22:57,770 --> 00:23:04,120
of working down working Yaman file and

00:23:00,740 --> 00:23:08,300
try to edit it while understanding it so

00:23:04,120 --> 00:23:10,460
the pretty liquor build conflicts are

00:23:08,300 --> 00:23:12,200
like pretty intuitive in nature because

00:23:10,460 --> 00:23:15,200
if you can read through the whole build

00:23:12,200 --> 00:23:17,990
config you can understand by then by the

00:23:15,200 --> 00:23:20,210
key value pairs so for example it uses

00:23:17,990 --> 00:23:23,540
an API version of like version 1 and

00:23:20,210 --> 00:23:25,480
it's a template and further it has it

00:23:23,540 --> 00:23:28,640
has been labeled as a template bar

00:23:25,480 --> 00:23:31,220
template name called as like fedora and

00:23:28,640 --> 00:23:33,290
it has like different annotations which

00:23:31,220 --> 00:23:34,640
can be like perfectly ignored because

00:23:33,290 --> 00:23:36,799
these annotations even

00:23:34,640 --> 00:23:40,000
if you don't mention it these are

00:23:36,799 --> 00:23:43,580
generated by openshift inherently and

00:23:40,000 --> 00:23:47,420
each conflict has its own objects maker

00:23:43,580 --> 00:23:51,110
for example we are using an image stream

00:23:47,420 --> 00:23:54,559
to build the whole federal trade or a

00:23:51,110 --> 00:23:58,460
container and this image stream is again

00:23:54,559 --> 00:23:59,330
Whitford reported as an output for the

00:23:58,460 --> 00:24:01,580
container

00:23:59,330 --> 00:24:03,140
so whenever a container is built it is

00:24:01,580 --> 00:24:08,030
being pushed to the open shaft image

00:24:03,140 --> 00:24:10,820
image stream and this particular section

00:24:08,030 --> 00:24:13,549
called a source is used to build

00:24:10,820 --> 00:24:16,669
s2i images the source to image images

00:24:13,549 --> 00:24:21,260
from gift itself so if I mentioned a

00:24:16,669 --> 00:24:24,350
github repository URL as a parameter it

00:24:21,260 --> 00:24:27,500
can go back and pull that repository and

00:24:24,350 --> 00:24:29,809
put it inside the container or it can

00:24:27,500 --> 00:24:33,559
refer to the docker file remotely which

00:24:29,809 --> 00:24:36,020
is on to the github repository or any

00:24:33,559 --> 00:24:37,730
other external get server and it also

00:24:36,020 --> 00:24:40,010
follows like different strategies

00:24:37,730 --> 00:24:42,799
currently we are using docker strategy

00:24:40,010 --> 00:24:45,080
there and with no cache is equal to true

00:24:42,799 --> 00:24:47,870
like if it says that whenever a request

00:24:45,080 --> 00:24:50,720
bill comes to open sure it should build

00:24:47,870 --> 00:24:53,230
from from the scratch instead of using

00:24:50,720 --> 00:24:57,380
all the layers inside the docker

00:24:53,230 --> 00:24:59,870
or a like instead of using all the laker

00:24:57,380 --> 00:25:03,679
instead of using all the pre-populated

00:24:59,870 --> 00:25:06,309
steps or free pre ran steps it usually

00:25:03,679 --> 00:25:09,169
writes to build it from the scratch and

00:25:06,309 --> 00:25:12,380
it can also have like different kinds of

00:25:09,169 --> 00:25:15,320
triggers like you can make make open

00:25:12,380 --> 00:25:17,720
shape do things like whenever a person

00:25:15,320 --> 00:25:19,910
pushes to the repository whenever there

00:25:17,720 --> 00:25:22,010
is a commit being created you can

00:25:19,910 --> 00:25:24,440
trigger a change in the whole build

00:25:22,010 --> 00:25:26,390
conflicts so for more information like

00:25:24,440 --> 00:25:29,090
you can just refer the whole bunch of

00:25:26,390 --> 00:25:32,310
documentation later which is more detail

00:25:29,090 --> 00:25:35,910
this is a basic example to create a

00:25:32,310 --> 00:25:39,840
container using a bill currently going

00:25:35,910 --> 00:25:42,270
ahead you can pass the parameters are in

00:25:39,840 --> 00:25:45,690
bill conflict using a parameter slick

00:25:42,270 --> 00:25:46,950
attribute which have which has Lake

00:25:45,690 --> 00:25:49,050
curve which is nothing but a key value

00:25:46,950 --> 00:25:51,800
pairs which you pass to a container

00:25:49,050 --> 00:25:54,600
while while it is being built and the

00:25:51,800 --> 00:25:57,000
next fire is like a deployment conflict

00:25:54,600 --> 00:25:59,400
as I said deployment conflicts are like

00:25:57,000 --> 00:26:03,450
all very cells replicative in nature

00:25:59,400 --> 00:26:05,460
maker if there is any if there is any

00:26:03,450 --> 00:26:07,590
accidental the leak in the prior in the

00:26:05,460 --> 00:26:09,930
environment it rights to create we

00:26:07,590 --> 00:26:12,480
create it again so that it doesn't

00:26:09,930 --> 00:26:16,530
affect the lake customers who are using

00:26:12,480 --> 00:26:19,170
the using the deployment conflict and it

00:26:16,530 --> 00:26:21,480
also has config Maps as I said before it

00:26:19,170 --> 00:26:23,400
is used mostly used for passing metadata

00:26:21,480 --> 00:26:26,940
or the credentials as environment

00:26:23,400 --> 00:26:27,990
variables inside the containers finally

00:26:26,940 --> 00:26:30,900
the pipelines

00:26:27,990 --> 00:26:33,150
so pipelines are something which where

00:26:30,900 --> 00:26:36,410
you declare as I said where you declare

00:26:33,150 --> 00:26:39,420
different stages of a particular Jenkins

00:26:36,410 --> 00:26:41,580
environment so that Jenkins can pull up

00:26:39,420 --> 00:26:43,770
pull down the Jenkins file from the

00:26:41,580 --> 00:26:48,330
external repository and run those steps

00:26:43,770 --> 00:26:52,770
within the containers so the example

00:26:48,330 --> 00:26:54,840
pipeline looks like this and is as I

00:26:52,770 --> 00:26:57,210
said before with the bell context is

00:26:54,840 --> 00:26:58,920
kind of applicable to pipelines also it

00:26:57,210 --> 00:27:02,250
can also pull from the remote get

00:26:58,920 --> 00:27:05,060
repositories so this is an example

00:27:02,250 --> 00:27:08,220
repository which is being created and

00:27:05,060 --> 00:27:11,130
this is a sample file where which uses a

00:27:08,220 --> 00:27:13,200
group groovy DSL where you can declare

00:27:11,130 --> 00:27:16,590
different stages of like building a

00:27:13,200 --> 00:27:20,190
container in this current example we

00:27:16,590 --> 00:27:21,630
have used in this current example we

00:27:20,190 --> 00:27:24,750
have used like different stages like

00:27:21,630 --> 00:27:27,210
build deploy container wait clone clone

00:27:24,750 --> 00:27:29,990
the particular source code and install

00:27:27,210 --> 00:27:29,990
the source code

00:27:30,490 --> 00:27:37,629
and test the source code and start like

00:27:34,299 --> 00:27:40,330
cars start building the another another

00:27:37,629 --> 00:27:42,929
container using the same source code and

00:27:40,330 --> 00:27:47,769
you can also like out create a release

00:27:42,929 --> 00:27:50,049
with running commands like car commands

00:27:47,769 --> 00:27:54,249
like twine or like a pipe a release or

00:27:50,049 --> 00:27:56,590
any shell script also so finally there

00:27:54,249 --> 00:27:59,320
is a stage called as a clean up stage

00:27:56,590 --> 00:28:03,340
so once the the whole work is done you

00:27:59,320 --> 00:28:07,659
can directly clean up so as I said

00:28:03,340 --> 00:28:09,999
before like you can run pods as done as

00:28:07,659 --> 00:28:12,990
individual like containers like without

00:28:09,999 --> 00:28:15,129
by anything anything related to I

00:28:12,990 --> 00:28:17,470
thought anything related to like a

00:28:15,129 --> 00:28:21,519
deployment context or build conflicts so

00:28:17,470 --> 00:28:24,789
this is how you do it so let's create a

00:28:21,519 --> 00:28:27,669
project and create a bell conflict and

00:28:24,789 --> 00:28:31,749
create a pipeline and start building so

00:28:27,669 --> 00:28:34,600
I have a demo like curl them or to just

00:28:31,749 --> 00:28:38,769
that simulates the whole distribution

00:28:34,600 --> 00:28:40,360
pipeline where I use a Python package

00:28:38,769 --> 00:28:43,749
called as like gummy bears which is

00:28:40,360 --> 00:28:46,690
already on github repository which does

00:28:43,749 --> 00:28:50,230
nothing but like when Ron gummy bears it

00:28:46,690 --> 00:28:53,799
just prints hello there so this is a

00:28:50,230 --> 00:28:54,860
pipe I packaged and like let me start

00:28:53,799 --> 00:28:58,780
demo

00:28:54,860 --> 00:29:02,330
[Music]

00:28:58,780 --> 00:29:04,040
so and as I like mentioned in the

00:29:02,330 --> 00:29:06,140
examples this is one of the darker files

00:29:04,040 --> 00:29:08,780
which I've been using to create the

00:29:06,140 --> 00:29:14,210
whole pipeline release and each of the

00:29:08,780 --> 00:29:17,210
steps in the pipeline hourly curve build

00:29:14,210 --> 00:29:19,430
the whole package and later on test the

00:29:17,210 --> 00:29:23,900
package and deploy to the pi PI

00:29:19,430 --> 00:29:27,320
repository and this is the open shipped

00:29:23,900 --> 00:29:29,510
environment where you just go ahead and

00:29:27,320 --> 00:29:31,520
copy paste there is an option called as

00:29:29,510 --> 00:29:33,470
Adi Ammal to the project where you can

00:29:31,520 --> 00:29:36,410
just copy paste the bill conflicts and

00:29:33,470 --> 00:29:38,030
it creates the whole email images and it

00:29:36,410 --> 00:29:42,680
creates the deployment configurations

00:29:38,030 --> 00:29:46,220
and it also creates the pipelines so now

00:29:42,680 --> 00:29:48,530
we are just creating the pipeline and as

00:29:46,220 --> 00:29:51,550
I said like we are just copy testing the

00:29:48,530 --> 00:29:54,030
whole the whole vehement files and

00:29:51,550 --> 00:29:57,079
changing the parameters accordingly

00:29:54,030 --> 00:29:57,079
[Music]

00:29:59,340 --> 00:30:02,430
[Music]

00:30:03,310 --> 00:30:10,990
so once the pipeline is being created we

00:30:06,910 --> 00:30:13,690
need to we need to start the pipeline

00:30:10,990 --> 00:30:15,070
but in this case like - just fail

00:30:13,690 --> 00:30:18,640
because the credentials were not

00:30:15,070 --> 00:30:20,830
available so I just created a Blake

00:30:18,640 --> 00:30:26,580
config map which shows the credentials

00:30:20,830 --> 00:30:26,580
and now the pipeline is started again

00:30:31,320 --> 00:30:35,030
and just fast-forward

00:30:37,790 --> 00:30:44,330
so as you can see it's currently

00:30:40,230 --> 00:30:44,330
building inside the Jenkins container

00:30:45,110 --> 00:30:49,860
the container is built from scratch so

00:30:47,520 --> 00:30:54,210
it starts from DNF update and install

00:30:49,860 --> 00:30:58,830
the packages and installs the whole pipe

00:30:54,210 --> 00:31:01,550
I package as you can see there is an

00:30:58,830 --> 00:31:04,710
error involved here they come

00:31:01,550 --> 00:31:06,570
because there is no change in the pipe I

00:31:04,710 --> 00:31:08,910
repository there is no change in the

00:31:06,570 --> 00:31:10,860
repository so I created a comment which

00:31:08,910 --> 00:31:12,990
updates the version of the particular

00:31:10,860 --> 00:31:13,850
software and the reader and the build

00:31:12,990 --> 00:31:19,230
again

00:31:13,850 --> 00:31:24,170
so once the build is being rerun it

00:31:19,230 --> 00:31:24,170
updates to the pipe I repository again

00:31:27,560 --> 00:31:36,650
there you go like we caught 0.03 version

00:31:32,000 --> 00:31:36,650
and that's it any questions

00:31:38,899 --> 00:31:44,960
so OpenShift contains the Jenkins

00:31:43,580 --> 00:31:48,149
[Music]

00:31:44,960 --> 00:31:50,399
yeah like open ship has like a different

00:31:48,149 --> 00:31:52,830
set of image catalog where you have the

00:31:50,399 --> 00:31:54,870
Jenkins images which are already there

00:31:52,830 --> 00:31:56,970
so once you deploy the Jenkins image

00:31:54,870 --> 00:31:59,490
right automatically detects the

00:31:56,970 --> 00:32:02,190
pipelines and of it is kind of

00:31:59,490 --> 00:32:04,409
prepackaged with it open chef plugin so

00:32:02,190 --> 00:32:07,549
which identifies the OpenShift resources

00:32:04,409 --> 00:32:07,549
within the rangers

00:32:08,510 --> 00:32:15,350
[Music]

00:32:11,430 --> 00:32:21,859
yes cuts it any questions

00:32:15,350 --> 00:32:21,859
[Music]

00:32:24,960 --> 00:32:30,440
[Music]

00:32:37,490 --> 00:32:40,619
[Music]

00:32:55,060 --> 00:32:58,130

YouTube URL: https://www.youtube.com/watch?v=VaIrDN9_QqM


