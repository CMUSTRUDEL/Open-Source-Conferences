Title: State of Linux Container Technologies
Publication date: 2019-02-22
Playlist: DevConfUS 2018
Description: 
	This session will describe the current state of low level operating system container tools. We will describe the state of containers/storage, containers/image, CRI-O, Skopeo, Buildah and Podman. The session will also cover the latest state of changes to the linux kernel to make cgroups and user namespace work better.
Captions: 
	00:00:06,680 --> 00:00:34,580
[Music]

00:00:32,320 --> 00:00:44,450
where all the actions

00:00:34,580 --> 00:00:44,450
[Music]

00:00:47,230 --> 00:00:53,179
[Music]

00:00:57,380 --> 00:01:01,579
[Music]

00:01:03,410 --> 00:01:08,420
okay's people continue to wander in

00:01:05,890 --> 00:01:10,670
since I only have 35 minutes under the

00:01:08,420 --> 00:01:13,580
50 minute talk or an hour-long socking I

00:01:10,670 --> 00:01:15,650
have to get started my name is Dan Walsh

00:01:13,580 --> 00:01:18,350
I lead the container to container team

00:01:15,650 --> 00:01:20,870
at Red Hat today we're gonna be talking

00:01:18,350 --> 00:01:22,430
about new container technologies that

00:01:20,870 --> 00:01:24,860
we've been developing over the last year

00:01:22,430 --> 00:01:27,980
year and a half way I'd like to stop

00:01:24,860 --> 00:01:30,110
this talk first of all everybody who

00:01:27,980 --> 00:01:34,100
went to see Scott's talk yesterday about

00:01:30,110 --> 00:01:35,660
container technology a bunch of you so

00:01:34,100 --> 00:01:39,530
this is sure it is a fairly powerful

00:01:35,660 --> 00:01:42,590
shirt of Red Hat and a lot of times we

00:01:39,530 --> 00:01:44,150
talk about containers and the way I like

00:01:42,590 --> 00:01:47,270
to describe containers is that just

00:01:44,150 --> 00:01:50,240
simply processes on a Linux system and

00:01:47,270 --> 00:01:53,540
if you've one way to describe containers

00:01:50,240 --> 00:01:55,160
is to say that they're processes that

00:01:53,540 --> 00:01:57,140
are controlled by three things one of

00:01:55,160 --> 00:01:59,290
them is C groups of resource constraints

00:01:57,140 --> 00:02:01,910
basically taking a group of processes

00:01:59,290 --> 00:02:04,190
putting things like memory CPU

00:02:01,910 --> 00:02:05,840
utilization and trying to control how

00:02:04,190 --> 00:02:08,090
much they use so they don't affect other

00:02:05,840 --> 00:02:09,470
groups of processes on the system the

00:02:08,090 --> 00:02:11,540
second thing to think about when you

00:02:09,470 --> 00:02:13,520
talk about containers is security

00:02:11,540 --> 00:02:14,569
constraints so basically I want to make

00:02:13,520 --> 00:02:16,550
sure that this group of processes

00:02:14,569 --> 00:02:19,040
doesn't mean to fear with this group of

00:02:16,550 --> 00:02:21,390
process so there's no escalations things

00:02:19,040 --> 00:02:22,590
like that

00:02:21,390 --> 00:02:24,750
the third thing you think about with

00:02:22,590 --> 00:02:26,370
containers and stuff called namespaces

00:02:24,750 --> 00:02:28,370
so namespaces gives you that

00:02:26,370 --> 00:02:30,750
virtualization feel so it's sort of

00:02:28,370 --> 00:02:32,730
there's a pity namespace as soon as a

00:02:30,750 --> 00:02:34,680
process chooses to join a pit namespace

00:02:32,730 --> 00:02:36,690
it loses view of all the other processes

00:02:34,680 --> 00:02:39,630
on the system similar Mountain

00:02:36,690 --> 00:02:41,130
namespaces enjoy the mountain names

00:02:39,630 --> 00:02:43,800
place everything you mouth and then on

00:02:41,130 --> 00:02:45,750
is not seen by your parent so your mount

00:02:43,800 --> 00:02:48,360
table starts to diverge from your your

00:02:45,750 --> 00:02:50,040
parents mount table is so those are the

00:02:48,360 --> 00:02:52,590
three things that basically make up

00:02:50,040 --> 00:02:54,780
containers so see groups some kind of

00:02:52,590 --> 00:02:56,820
security constraints and then namespaces

00:02:54,780 --> 00:02:59,660
if you boot up a modern Linux system

00:02:56,820 --> 00:03:03,290
Arel like a rel 7 system or Noah Noah

00:02:59,660 --> 00:03:06,030
you would see that pit one inside of a

00:03:03,290 --> 00:03:07,410
system D that boots up the system if you

00:03:06,030 --> 00:03:10,950
went and looked at it you would see that

00:03:07,410 --> 00:03:12,570
you could cat out proc one /c groups and

00:03:10,950 --> 00:03:14,340
you would see that pig one is inside of

00:03:12,570 --> 00:03:17,340
C groups that see groups associated with

00:03:14,340 --> 00:03:20,670
it if you cat it out if you went to proc

00:03:17,340 --> 00:03:21,840
one and and you would see that you know

00:03:20,670 --> 00:03:24,510
system DS running with SC Linux

00:03:21,840 --> 00:03:26,880
constraints it has used users associated

00:03:24,510 --> 00:03:28,739
with avocados proc one slash status

00:03:26,880 --> 00:03:32,640
you'd see capabilities associated with

00:03:28,739 --> 00:03:34,650
it lastly if you went to proc one / NS

00:03:32,640 --> 00:03:36,690
you would see the namespaces associated

00:03:34,650 --> 00:03:39,360
with pig 1 so when you boot up a Linux

00:03:36,690 --> 00:03:41,610
system everything in the Linux system is

00:03:39,360 --> 00:03:44,250
in a C group has security constraints

00:03:41,610 --> 00:03:46,260
and has namespaces so by the definition

00:03:44,250 --> 00:03:48,299
of that because those things being

00:03:46,260 --> 00:03:49,950
required for a container everything on a

00:03:48,299 --> 00:03:51,900
Linux system is a container and that's

00:03:49,950 --> 00:03:53,910
why the shirt says Linux is containers

00:03:51,900 --> 00:03:57,450
and the backs that says containers of

00:03:53,910 --> 00:03:58,769
Linux so really the whole you Linux

00:03:57,450 --> 00:04:01,320
system is built to build these

00:03:58,769 --> 00:04:03,060
containers now container runtimes are

00:04:01,320 --> 00:04:05,730
all about basically modifying those

00:04:03,060 --> 00:04:08,310
constraints so further locking down what

00:04:05,730 --> 00:04:10,200
a process is able to do on the system so

00:04:08,310 --> 00:04:10,900
lastly when people ask me can I do that

00:04:10,200 --> 00:04:13,030
in

00:04:10,900 --> 00:04:15,010
can I run this in a container I always

00:04:13,030 --> 00:04:16,359
say can you run it on Linux but the

00:04:15,010 --> 00:04:19,090
answer is yes that you can run in a

00:04:16,359 --> 00:04:21,040
container okay so we're gonna talk of

00:04:19,090 --> 00:04:23,280
next generation but let's start by doing

00:04:21,040 --> 00:04:23,280
this

00:04:30,610 --> 00:04:36,280
please read it out loud all text and

00:04:33,280 --> 00:04:39,910
read this is excellent

00:04:36,280 --> 00:04:39,910
[Music]

00:04:44,290 --> 00:04:47,499
[Applause]

00:04:48,100 --> 00:04:55,399
[Music]

00:04:59,590 --> 00:05:02,460
excellent

00:05:03,550 --> 00:05:10,849
okay so since we're trying to do this

00:05:07,429 --> 00:05:12,469
talk without using the doctor word we

00:05:10,849 --> 00:05:15,739
have to put off the swear jack for those

00:05:12,469 --> 00:05:19,429
that I may be native to the u.s. swear

00:05:15,739 --> 00:05:21,110
jar is what and American households when

00:05:19,429 --> 00:05:23,419
you're a child would say us where they'd

00:05:21,110 --> 00:05:25,939
have to put a quarter or some amount of

00:05:23,419 --> 00:05:27,999
money into a switch so if I say the D

00:05:25,939 --> 00:05:30,529
word during this I will have to put

00:05:27,999 --> 00:05:33,050
money in there but the real point of

00:05:30,529 --> 00:05:35,119
this is to point out that so that the

00:05:33,050 --> 00:05:37,099
the D word is sort of dominated the

00:05:35,119 --> 00:05:39,889
conversation and it's really just one

00:05:37,099 --> 00:05:42,469
form of doing containers and I believe

00:05:39,889 --> 00:05:45,259
in a lot of ways because of that we've

00:05:42,469 --> 00:05:49,789
been sort of hindered right five years

00:05:45,259 --> 00:05:54,919
ago and I'll say it now darker came

00:05:49,789 --> 00:05:56,839
along and they you know they sort of

00:05:54,919 --> 00:06:00,469
revolution the godfathers container

00:05:56,839 --> 00:06:01,909
stuff didn't to take off and all of a

00:06:00,469 --> 00:06:04,429
sudden it became the only way of doing

00:06:01,909 --> 00:06:05,659
it and just just by the containers are

00:06:04,429 --> 00:06:08,509
nothing more than the process on a Linux

00:06:05,659 --> 00:06:10,729
system and because of that we've had

00:06:08,509 --> 00:06:12,649
some hindrances in my opinion and what I

00:06:10,729 --> 00:06:15,169
want to look at is new tools to be able

00:06:12,649 --> 00:06:19,419
to do this container technology and be

00:06:15,169 --> 00:06:21,319
able to expand it so when I look at it

00:06:19,419 --> 00:06:23,899
what do you need to do to run a

00:06:21,319 --> 00:06:25,639
container so what what does it mean that

00:06:23,899 --> 00:06:27,889
I want to run a container on a system

00:06:25,639 --> 00:06:29,360
break it down what I'm trying to do here

00:06:27,889 --> 00:06:31,069
is break it down it was this core

00:06:29,360 --> 00:06:32,689
components so when I want to run a

00:06:31,069 --> 00:06:34,599
container on a system first of all I

00:06:32,689 --> 00:06:37,309
have to identify what a container is

00:06:34,599 --> 00:06:38,719
okay and that's really sort of you know

00:06:37,309 --> 00:06:40,550
what is a container where's a container

00:06:38,719 --> 00:06:41,989
image so most people when they refer to

00:06:40,550 --> 00:06:43,969
are actually referring to container

00:06:41,989 --> 00:06:45,559
images right I want to pull something

00:06:43,969 --> 00:06:48,349
from doctor Rio that's the site I want

00:06:45,559 --> 00:06:49,579
to pay for that one so you know they

00:06:48,349 --> 00:06:53,029
want to pull some kind of application

00:06:49,579 --> 00:06:54,360
down and and what happened the real side

00:06:53,029 --> 00:06:55,770
of the

00:06:54,360 --> 00:06:57,659
dr. revolution was that they

00:06:55,770 --> 00:07:01,169
standardized on this concept of an image

00:06:57,659 --> 00:07:03,120
when an image was as a table all in some

00:07:01,169 --> 00:07:04,710
JSON files so what you do is it created

00:07:03,120 --> 00:07:06,150
what's called a root efest a root

00:07:04,710 --> 00:07:08,580
offenses it's a directory that looks

00:07:06,150 --> 00:07:10,650
like root on a Linux system and then I

00:07:08,580 --> 00:07:12,539
create a JSON file that basically

00:07:10,650 --> 00:07:14,460
describes what's in the root efest then

00:07:12,539 --> 00:07:16,680
I tie the thing up together so I use the

00:07:14,460 --> 00:07:19,289
you know tired tape archive tool and

00:07:16,680 --> 00:07:21,000
Linux on my tile goes up now I can have

00:07:19,289 --> 00:07:22,590
what's called layered images which is

00:07:21,000 --> 00:07:24,659
basically I'm going to install something

00:07:22,590 --> 00:07:26,490
on top of that root FS so I tie up the

00:07:24,659 --> 00:07:29,370
first one and I install something new

00:07:26,490 --> 00:07:31,169
now I tie up the difference from the

00:07:29,370 --> 00:07:33,180
original code to the new one in the top

00:07:31,169 --> 00:07:35,310
wall and I created another JSON file

00:07:33,180 --> 00:07:36,930
that modifies the original JSON file and

00:07:35,310 --> 00:07:38,940
I tear that up and that's a layered

00:07:36,930 --> 00:07:41,370
image ok so there's just nothing more

00:07:38,940 --> 00:07:43,560
than to power balls and JSON files and

00:07:41,370 --> 00:07:45,330
you know the next thing you do is you

00:07:43,560 --> 00:07:47,490
take these tabs so you put them out on a

00:07:45,330 --> 00:07:51,509
website and in this case we call that

00:07:47,490 --> 00:07:53,460
website a container registry so a

00:07:51,509 --> 00:07:55,259
container registry and then we build a

00:07:53,460 --> 00:07:57,539
protocol to pull those images back and

00:07:55,259 --> 00:08:01,710
forth so when we came out with these

00:07:57,539 --> 00:08:03,569
these tie balls are originally there was

00:08:01,710 --> 00:08:05,219
no standard right there's no standard

00:08:03,569 --> 00:08:07,050
for it and everybody was just using the

00:08:05,219 --> 00:08:10,589
de-facto standard basically what doctor

00:08:07,050 --> 00:08:12,509
did in the beginning and so what they

00:08:10,589 --> 00:08:14,219
did in the beginning everybody was fine

00:08:12,509 --> 00:08:16,710
with that for a little while and then

00:08:14,219 --> 00:08:18,270
all sunflora West came along in core OS

00:08:16,710 --> 00:08:20,400
had a different technology they had a

00:08:18,270 --> 00:08:22,139
technology called rocket and what they

00:08:20,400 --> 00:08:24,060
wanted to do with rocket is they wanted

00:08:22,139 --> 00:08:26,550
to be able to support out their own

00:08:24,060 --> 00:08:28,080
application container images and and

00:08:26,550 --> 00:08:30,360
what they decided to do is they came out

00:08:28,080 --> 00:08:31,800
with they wanted to standardize on it so

00:08:30,360 --> 00:08:34,560
they didn't want a one company to be

00:08:31,800 --> 00:08:35,940
able to control what it is and if you

00:08:34,560 --> 00:08:38,490
think about the problems of controlling

00:08:35,940 --> 00:08:40,919
what the data the data images just think

00:08:38,490 --> 00:08:44,320
of Microsoft so Microsoft came out with

00:08:40,919 --> 00:08:46,630
you know dot docx format back

00:08:44,320 --> 00:08:48,670
in the 1990s and what microsoft would do

00:08:46,630 --> 00:08:50,079
is every single release of their

00:08:48,670 --> 00:08:52,810
operating system they would basically

00:08:50,079 --> 00:08:55,180
change the doc format so all of sudden

00:08:52,810 --> 00:08:57,759
people couldn't send documents around

00:08:55,180 --> 00:08:59,860
unless you bought the latest Windows or

00:08:57,759 --> 00:09:02,079
the latest office products right so if

00:08:59,860 --> 00:09:04,240
you have Windows 95 and also Windows

00:09:02,079 --> 00:09:06,130
2000 comes out all sudden people would

00:09:04,240 --> 00:09:07,240
build documents on Windows 2000 and you

00:09:06,130 --> 00:09:09,850
wouldn't be able to view on one under

00:09:07,240 --> 00:09:11,620
Windows 95 and of course Microsoft also

00:09:09,850 --> 00:09:13,180
was able to get like Libre Office and

00:09:11,620 --> 00:09:15,759
OpenOffice and all these other tools

00:09:13,180 --> 00:09:17,350
weren't able to interoperate so what we

00:09:15,759 --> 00:09:19,690
wanted to do is get a standard org is a

00:09:17,350 --> 00:09:21,040
standard application core OS that we

00:09:19,690 --> 00:09:23,199
have to have a standard on what this

00:09:21,040 --> 00:09:25,839
image format was and so they came out

00:09:23,199 --> 00:09:27,639
with the app see SPAC now app see spec

00:09:25,839 --> 00:09:29,819
was different than what was the darker

00:09:27,639 --> 00:09:29,819
image

00:09:30,760 --> 00:09:37,540
so there was a problem with that had

00:09:32,980 --> 00:09:39,820
prepaid for next one so that so all of a

00:09:37,540 --> 00:09:42,820
sudden the big industry companies like

00:09:39,820 --> 00:09:45,399
Red Hat and Microsoft and and Google and

00:09:42,820 --> 00:09:46,120
IBM basically said and said this is

00:09:45,399 --> 00:09:47,980
gonna be bad

00:09:46,120 --> 00:09:48,930
what's gonna happen here is also there's

00:09:47,980 --> 00:09:50,680
going to be multiple different

00:09:48,930 --> 00:09:52,480
specifications so if you want to build

00:09:50,680 --> 00:09:55,029
applications they're gonna ship in the

00:09:52,480 --> 00:09:57,360
future you can have to have an app C

00:09:55,029 --> 00:09:59,529
version you're gonna have to have a

00:09:57,360 --> 00:10:02,320
darker version that was my second one

00:09:59,529 --> 00:10:03,880
and so we really want didn't want

00:10:02,320 --> 00:10:06,550
everybody having the ship different type

00:10:03,880 --> 00:10:07,630
of container images so everybody got

00:10:06,550 --> 00:10:09,130
together and said we're gonna form a

00:10:07,630 --> 00:10:11,440
standard and that was OCI

00:10:09,130 --> 00:10:12,910
so OCI stands for open container

00:10:11,440 --> 00:10:16,240
initiative it was a standard spotty

00:10:12,910 --> 00:10:19,139
originated by Red Hat Dhaka ranked don't

00:10:16,240 --> 00:10:23,949
have to pay for that's the company and

00:10:19,139 --> 00:10:24,550
Microsoft's IBM Google and maybe our

00:10:23,949 --> 00:10:27,100
core OS

00:10:24,550 --> 00:10:28,389
and Red Hat and maybe a couple others

00:10:27,100 --> 00:10:30,730
but anyways they got together and they

00:10:28,389 --> 00:10:32,620
said it and as of last December that

00:10:30,730 --> 00:10:34,600
came out with the OCI image bundle

00:10:32,620 --> 00:10:36,579
format this basically defined what goes

00:10:34,600 --> 00:10:38,350
in an image so a lot of times we talk

00:10:36,579 --> 00:10:40,329
about images for now on and say is

00:10:38,350 --> 00:10:42,699
calling them the D image call it a no CI

00:10:40,329 --> 00:10:44,980
image it's a standardized image forints

00:10:42,699 --> 00:10:46,569
based on the original D image but

00:10:44,980 --> 00:10:48,310
everybody agreed to do that so kora

00:10:46,569 --> 00:10:51,519
let's actually trigger this long before

00:10:48,310 --> 00:10:53,620
they were acquired by Red Hat so the

00:10:51,519 --> 00:10:55,600
next thing you need to do oh the segue

00:10:53,620 --> 00:10:57,819
next thing you need to do is basically

00:10:55,600 --> 00:10:59,230
pull down on an image so this is a one

00:10:57,819 --> 00:11:00,430
of the tools I'm introducing today it's

00:10:59,230 --> 00:11:02,350
been around for a couple of years kind

00:11:00,430 --> 00:11:03,610
of weird I'm introducing now it's called

00:11:02,350 --> 00:11:06,850
scope yo how many people have played

00:11:03,610 --> 00:11:09,279
with scope yo okay good

00:11:06,850 --> 00:11:11,800
scope EO was introduced a few years ago

00:11:09,279 --> 00:11:13,810
and the whole idea is originally what we

00:11:11,800 --> 00:11:16,360
wanted to do is basically go out to a

00:11:13,810 --> 00:11:18,040
registry container registry and look at

00:11:16,360 --> 00:11:21,579
that JSON file associated with the

00:11:18,040 --> 00:11:22,690
registry with the image and if you think

00:11:21,579 --> 00:11:25,079
about some of these images I've seen

00:11:22,690 --> 00:11:27,819
JBoss images they're like hundreds of

00:11:25,079 --> 00:11:29,860
megabytes I know besides getting up in

00:11:27,819 --> 00:11:32,830
the air gigabytes size of these images

00:11:29,860 --> 00:11:35,560
so the only way right now with the

00:11:32,830 --> 00:11:37,269
to look at one of these JSON files

00:11:35,560 --> 00:11:38,920
associated with an images actually pull

00:11:37,269 --> 00:11:40,630
the image so do you want to pull a

00:11:38,920 --> 00:11:42,430
couple hundred megabytes just to look at

00:11:40,630 --> 00:11:45,279
them to add at this JSON file that

00:11:42,430 --> 00:11:46,750
describes the image and basically say oh

00:11:45,279 --> 00:11:48,519
that's the wrong area it's not gonna

00:11:46,750 --> 00:11:50,170
throw it away so what we wanted was

00:11:48,519 --> 00:11:53,079
basically to be able to do a D inspect

00:11:50,170 --> 00:11:56,500
remote def - remote we did a pull

00:11:53,079 --> 00:11:58,959
request to upstream and they said no we

00:11:56,500 --> 00:12:01,240
don't want to clutter up the CLI what we

00:11:58,959 --> 00:12:02,740
want to do is they said we don't want us

00:12:01,240 --> 00:12:04,209
to do that but he said it's just simple

00:12:02,740 --> 00:12:06,220
it's just a web service just two web

00:12:04,209 --> 00:12:08,140
protocols and you can pull down the JSON

00:12:06,220 --> 00:12:10,209
file build your own tool to do it so we

00:12:08,140 --> 00:12:12,490
built the tool for that called scope yo

00:12:10,209 --> 00:12:15,459
so scope EO which means in in Greek

00:12:12,490 --> 00:12:17,680
remote viewing was a tool to basically

00:12:15,459 --> 00:12:19,390
look at a remote site and just pull down

00:12:17,680 --> 00:12:21,820
that JSON file associated with a

00:12:19,390 --> 00:12:23,350
container image so the guy that did this

00:12:21,820 --> 00:12:27,459
on my team

00:12:23,350 --> 00:12:29,890
Antonio medaka actually decided to go

00:12:27,459 --> 00:12:32,260
further so originally just did you know

00:12:29,890 --> 00:12:33,730
inspecting images to pull down that but

00:12:32,260 --> 00:12:36,100
then he started to say well I can fill

00:12:33,730 --> 00:12:38,050
the entire container image protocol

00:12:36,100 --> 00:12:40,779
right the ability to pull these images

00:12:38,050 --> 00:12:42,370
back and forth between registries he

00:12:40,779 --> 00:12:44,230
basically built scope EO into a tool

00:12:42,370 --> 00:12:45,820
that could move images around now scope

00:12:44,230 --> 00:12:47,680
has become really cool because it can

00:12:45,820 --> 00:12:49,510
actually transition from different

00:12:47,680 --> 00:12:52,560
formats so you can actually copy down an

00:12:49,510 --> 00:12:54,430
old CI format store it inside of a

00:12:52,560 --> 00:12:56,720
inside of

00:12:54,430 --> 00:12:59,029
[Music]

00:12:56,720 --> 00:13:01,069
inside of a darker demon you can

00:12:59,029 --> 00:13:03,199
actually pull it to local for local

00:13:01,069 --> 00:13:05,089
directories you can translate from the

00:13:03,199 --> 00:13:06,860
original image formats the new image

00:13:05,089 --> 00:13:09,310
format but the really cool thing is you

00:13:06,860 --> 00:13:11,750
can actually move images from one

00:13:09,310 --> 00:13:13,639
container storage to another or one

00:13:11,750 --> 00:13:15,470
container registry to another so a lot

00:13:13,639 --> 00:13:16,910
of people now are using scope EO to

00:13:15,470 --> 00:13:18,560
actually move images around their

00:13:16,910 --> 00:13:20,660
environment and we're getting a lot of

00:13:18,560 --> 00:13:23,029
uptake in this so we were working with

00:13:20,660 --> 00:13:25,370
Clara West to try to get Clara West to

00:13:23,029 --> 00:13:27,259
embed scope EO into rocket and they said

00:13:25,370 --> 00:13:29,600
they don't want to be vetted tool CLI

00:13:27,259 --> 00:13:31,399
tool ins who rocket what they wanted to

00:13:29,600 --> 00:13:34,250
do is basically just lose the library

00:13:31,399 --> 00:13:36,470
the scope it was using so that library

00:13:34,250 --> 00:13:39,019
became containers image so github

00:13:36,470 --> 00:13:41,379
containers image is now a library for

00:13:39,019 --> 00:13:43,430
moving these OCI images and

00:13:41,379 --> 00:13:44,779
old-fashioned images back and forth

00:13:43,430 --> 00:13:46,759
around the environment you move between

00:13:44,779 --> 00:13:48,769
registries and you don't need to have

00:13:46,759 --> 00:13:50,480
any route based tools so you can

00:13:48,769 --> 00:13:53,360
basically sit there as users they copy

00:13:50,480 --> 00:13:55,550
from say my internet based container

00:13:53,360 --> 00:13:57,110
registry and copy into my internal

00:13:55,550 --> 00:13:59,420
container registry or copy the files

00:13:57,110 --> 00:14:01,220
locally so we became a mechanism for

00:13:59,420 --> 00:14:03,860
moving that image from the registry to

00:14:01,220 --> 00:14:05,839
the host the next thing we needed to do

00:14:03,860 --> 00:14:08,300
is basically take that read that image

00:14:05,839 --> 00:14:10,160
and basically explode it on disk right

00:14:08,300 --> 00:14:12,350
in order to run an application and

00:14:10,160 --> 00:14:15,439
container we have to have that route FS

00:14:12,350 --> 00:14:18,290
re-established so we take down those one

00:14:15,439 --> 00:14:21,350
or more layers and reassemble them the

00:14:18,290 --> 00:14:23,509
way you do that in Linux is what with

00:14:21,350 --> 00:14:25,339
things called copy-on-write file systems

00:14:23,509 --> 00:14:27,920
okay you might have heard of overlay

00:14:25,339 --> 00:14:30,019
device mapper butter FS is a whole bunch

00:14:27,920 --> 00:14:32,120
of them so we basically took a lot of

00:14:30,019 --> 00:14:34,189
the tooling that we had worked with with

00:14:32,120 --> 00:14:36,079
the upstream and built it into a little

00:14:34,189 --> 00:14:38,660
tiny library called container storage

00:14:36,079 --> 00:14:41,059
those ability to explode images onto a

00:14:38,660 --> 00:14:42,230
copy on write filesystem and the last

00:14:41,059 --> 00:14:44,089
thing you need to do when you run a

00:14:42,230 --> 00:14:46,910
container run around the container is

00:14:44,089 --> 00:14:49,130
you actually have to basically what does

00:14:46,910 --> 00:14:51,170
it mean to run the container and luckily

00:14:49,130 --> 00:14:52,160
OCI is standardized on that so there's

00:14:51,170 --> 00:14:54,800
stand-in meccans

00:14:52,160 --> 00:14:57,110
verónica Taner and that was fit also

00:14:54,800 --> 00:14:59,540
specified last year by the beginning of

00:14:57,110 --> 00:15:01,750
last year as the OCI runtime

00:14:59,540 --> 00:15:05,480
specification so inner OSI at run time

00:15:01,750 --> 00:15:07,670
specification says that I pull down the

00:15:05,480 --> 00:15:09,259
image and that the image had that JSON

00:15:07,670 --> 00:15:11,629
file that tells me how to run the

00:15:09,259 --> 00:15:13,759
container well I also have input from

00:15:11,629 --> 00:15:15,800
the user and I might have input from

00:15:13,759 --> 00:15:17,509
whatever tool is putting this all

00:15:15,800 --> 00:15:19,160
together and I basically want to take

00:15:17,509 --> 00:15:21,079
those three inputs and combine them

00:15:19,160 --> 00:15:23,569
together so user might come in and say I

00:15:21,079 --> 00:15:25,939
want to run in a privileged mode or I

00:15:23,569 --> 00:15:28,490
want to run without this capability or I

00:15:25,939 --> 00:15:30,470
want our volume mount in this stuff so

00:15:28,490 --> 00:15:32,209
we need to take the user input the

00:15:30,470 --> 00:15:33,439
application that's setting it all up of

00:15:32,209 --> 00:15:35,180
the container or I'm gonna call it

00:15:33,439 --> 00:15:37,189
container engine and then the last step

00:15:35,180 --> 00:15:38,899
is actually to take the stuff from the

00:15:37,189 --> 00:15:40,850
image and am undissolved that together

00:15:38,899 --> 00:15:43,850
and basically writes out on another JSON

00:15:40,850 --> 00:15:46,160
file so that JSON file becomes it

00:15:43,850 --> 00:15:48,740
becomes the OCI configuration and it's

00:15:46,160 --> 00:15:52,189
part of the runtime the OCI runtime spec

00:15:48,740 --> 00:15:54,470
defines what's in that JSON file as well

00:15:52,189 --> 00:15:56,689
as what's in the root of s so it says

00:15:54,470 --> 00:15:58,850
put a root of s on the system you put

00:15:56,689 --> 00:16:00,889
this JSON file between it and now I

00:15:58,850 --> 00:16:03,850
launched an executable that understands

00:16:00,889 --> 00:16:07,850
the JSON and configures the system

00:16:03,850 --> 00:16:11,149
darker rink basically gave the first

00:16:07,850 --> 00:16:12,860
tool to do that called run C so run C

00:16:11,149 --> 00:16:15,019
was the first implementation or so the

00:16:12,860 --> 00:16:17,689
de-facto implementation of the OCI

00:16:15,019 --> 00:16:19,910
runtime specification just about every

00:16:17,689 --> 00:16:21,949
tool that runs containers now in the

00:16:19,910 --> 00:16:22,860
universe uses run C to create the

00:16:21,949 --> 00:16:24,930
container

00:16:22,860 --> 00:16:27,360
okay so run see so this is the steps

00:16:24,930 --> 00:16:29,130
that you needed to do to run a container

00:16:27,360 --> 00:16:31,690
on your box right everybody agree with

00:16:29,130 --> 00:16:33,080
that anything missing

00:16:31,690 --> 00:16:36,240
[Music]

00:16:33,080 --> 00:16:37,910
okay so we don't need a big fat

00:16:36,240 --> 00:16:41,160
container demon to do all those steps

00:16:37,910 --> 00:16:42,960
and I have a big pusher against the big

00:16:41,160 --> 00:16:45,360
fat container demon because the big fat

00:16:42,960 --> 00:16:47,700
container demon here we are five years

00:16:45,360 --> 00:16:49,380
into containers and there's only one way

00:16:47,700 --> 00:16:50,700
to run containers everybody knows that

00:16:49,380 --> 00:16:52,710
if I ask you how do you pull an image

00:16:50,700 --> 00:16:54,090
you tell me the deep pull by actually

00:16:52,710 --> 00:16:56,310
out of pushes you said deep but how do

00:16:54,090 --> 00:16:58,140
you build it deep built and everything

00:16:56,310 --> 00:17:01,230
goes through this one air is the problem

00:16:58,140 --> 00:17:03,090
with the big fat container that is the

00:17:01,230 --> 00:17:05,760
biggest problem with it is we got least

00:17:03,090 --> 00:17:08,280
common denominator of security so

00:17:05,760 --> 00:17:09,450
needing to build a container is much

00:17:08,280 --> 00:17:11,760
different than needing to run in

00:17:09,450 --> 00:17:13,020
production I need a lot more privileges

00:17:11,760 --> 00:17:15,930
to be able to write to the Container

00:17:13,020 --> 00:17:18,930
image than I do to basically when I want

00:17:15,930 --> 00:17:20,430
to run it say 'under kubernetes so we

00:17:18,930 --> 00:17:22,380
want to do is basically take these

00:17:20,430 --> 00:17:23,970
pieces of pod and reassemble them and

00:17:22,380 --> 00:17:26,100
redo different types of tools for

00:17:23,970 --> 00:17:27,630
running containers each one with the

00:17:26,100 --> 00:17:29,430
least privilege now later on there's

00:17:27,630 --> 00:17:30,780
gonna be a talk that talks about some of

00:17:29,430 --> 00:17:32,850
the security features that we've been

00:17:30,780 --> 00:17:36,570
able to do by breaking apart the big fat

00:17:32,850 --> 00:17:39,660
container be I work for open shift so

00:17:36,570 --> 00:17:42,330
everything that I do tends to be either

00:17:39,660 --> 00:17:44,160
for open source or I am instructed to do

00:17:42,330 --> 00:17:45,990
it for open ship so when I look at what

00:17:44,160 --> 00:17:47,490
open ship needs to do to run content

00:17:45,990 --> 00:17:51,270
OpenShift is red-hats

00:17:47,490 --> 00:17:52,650
kubernetes you know our enterprise

00:17:51,270 --> 00:17:55,350
version the Koopa net is really what

00:17:52,650 --> 00:17:56,730
open shift is plus plus okay we have

00:17:55,350 --> 00:17:58,800
other features and other things we've

00:17:56,730 --> 00:18:00,420
added on to kubernetes but basically if

00:17:58,800 --> 00:18:04,020
you want to get if you come to red head

00:18:00,420 --> 00:18:07,260
you want to buy kubernetes from us we

00:18:04,020 --> 00:18:09,090
will sell you open shift so what does

00:18:07,260 --> 00:18:10,740
open shift in kubernetes need to run a

00:18:09,090 --> 00:18:13,350
container they need those four first

00:18:10,740 --> 00:18:15,380
four things but they need CRI so there's

00:18:13,350 --> 00:18:18,860
a little story here

00:18:15,380 --> 00:18:20,929
core OS again Koro West came along and

00:18:18,860 --> 00:18:24,770
they wanted the original version the

00:18:20,929 --> 00:18:29,030
kubernetes embedded docker all over the

00:18:24,770 --> 00:18:30,710
place inside of the code core core OS

00:18:29,030 --> 00:18:33,049
came along and they said we want to

00:18:30,710 --> 00:18:35,210
support rocket inside of kubernetes so

00:18:33,049 --> 00:18:36,620
they wrote huge patch sets the cadence

00:18:35,210 --> 00:18:38,840
basically sent them upstream to

00:18:36,620 --> 00:18:40,820
kubernetes that basically said if def

00:18:38,840 --> 00:18:43,700
rocket do it this way else do it the old

00:18:40,820 --> 00:18:45,500
way and the kubernetes developed the

00:18:43,700 --> 00:18:47,030
developers at the time of the upstream

00:18:45,500 --> 00:18:49,340
kubernetes said wait a minute we can't

00:18:47,030 --> 00:18:51,830
do this because we do this for rocket

00:18:49,340 --> 00:18:54,140
then all of a sudden gotten some other

00:18:51,830 --> 00:18:56,570
container engines gonna come along and

00:18:54,140 --> 00:18:58,039
say we want you to support our container

00:18:56,570 --> 00:19:00,020
runtime as well

00:18:58,039 --> 00:19:01,760
so what kubernetes did is they wanted to

00:19:00,020 --> 00:19:04,640
turn it on its head and they basically

00:19:01,760 --> 00:19:06,380
said you guys implement a small daemon

00:19:04,640 --> 00:19:08,900
and we will talk to it and we will talk

00:19:06,380 --> 00:19:11,270
to that thing called via CI r ISO

00:19:08,900 --> 00:19:13,400
contain a runtime interface so kuba

00:19:11,270 --> 00:19:15,980
needs to find an interface that he will

00:19:13,400 --> 00:19:17,570
talk to container engines with and then

00:19:15,980 --> 00:19:19,549
if the container engine implements it

00:19:17,570 --> 00:19:20,750
kubernetes will very happily do that

00:19:19,549 --> 00:19:22,549
next thing is

00:19:20,750 --> 00:19:24,710
coupon that needs needs to do when it

00:19:22,549 --> 00:19:27,230
talks to a container engine is wants to

00:19:24,710 --> 00:19:29,590
tell the CRI that needs was it's gonna

00:19:27,230 --> 00:19:31,789
tell the CRI it needs a container image

00:19:29,590 --> 00:19:34,190
CRI needs to pull the image from the

00:19:31,789 --> 00:19:36,470
container registry needs to store it on

00:19:34,190 --> 00:19:38,840
top of a copy-on-write file system and

00:19:36,470 --> 00:19:40,460
finally needs to execute a no CI runtime

00:19:38,840 --> 00:19:43,309
anything look familiar from the first

00:19:40,460 --> 00:19:46,280
part so we have all these tools another

00:19:43,309 --> 00:19:48,710
one of my members of my teams when this

00:19:46,280 --> 00:19:50,360
happened basically said you know we

00:19:48,710 --> 00:19:52,820
could take our standard building block

00:19:50,360 --> 00:19:56,090
tools here and build our own CI right

00:19:52,820 --> 00:19:58,640
and that thing was called trial so CRI

00:19:56,090 --> 00:20:01,010
also the CRI stands for container

00:19:58,640 --> 00:20:03,230
runtime interface for kubernetes and the

00:20:01,010 --> 00:20:06,049
O stands for open containers or OC I

00:20:03,230 --> 00:20:08,210
open container images so we developed a

00:20:06,049 --> 00:20:10,249
small lightweight team and

00:20:08,210 --> 00:20:13,009
that basically just implements what's

00:20:10,249 --> 00:20:15,580
needed for kubernetes to run containers

00:20:13,009 --> 00:20:18,619
in the environment and we called it cryo

00:20:15,580 --> 00:20:18,830
so cryo is an OC I based I already said

00:20:18,619 --> 00:20:21,799
that

00:20:18,830 --> 00:20:25,249
so scope is totally tied to kubernetes

00:20:21,799 --> 00:20:27,740
to CRI only supported uses containers

00:20:25,249 --> 00:20:30,409
for kubernetes nothing more nothing less

00:20:27,740 --> 00:20:33,320
let me beat this to death cryo loves

00:20:30,409 --> 00:20:35,869
kubernetes kubernetes is it cryo is a

00:20:33,320 --> 00:20:38,360
you know she's very loyal to her man

00:20:35,869 --> 00:20:40,669
she's never gonna go anywhere she might

00:20:38,360 --> 00:20:42,830
get mesosphere comes in and says you

00:20:40,669 --> 00:20:44,389
know that's too it around her and stuff

00:20:42,830 --> 00:20:47,749
like that but she says no friggin way

00:20:44,389 --> 00:20:52,369
now we got here definitely not not even

00:20:47,749 --> 00:20:56,600
in the ballpark this no way and

00:20:52,369 --> 00:20:59,509
definitely not okay cryo is only all she

00:20:56,600 --> 00:21:02,210
cares about is kubernetes okay just

00:20:59,509 --> 00:21:03,230
kubernetes so overview of additional

00:21:02,210 --> 00:21:05,149
components so there are additional

00:21:03,230 --> 00:21:06,769
things we needed to be able to do cry

00:21:05,149 --> 00:21:08,960
out and we'll talk a little bit about

00:21:06,769 --> 00:21:10,909
those so one of the things we need to do

00:21:08,960 --> 00:21:12,619
is basically translate the input from

00:21:10,909 --> 00:21:14,600
kubernetes kubernetes has its own

00:21:12,619 --> 00:21:16,999
specification of what he wants to do to

00:21:14,600 --> 00:21:20,690
run a container but we have to translate

00:21:16,999 --> 00:21:22,610
that specification to oshi a runtime

00:21:20,690 --> 00:21:25,340
specification so there happened to be a

00:21:22,610 --> 00:21:26,899
tool inside of OCI called OCI runtime

00:21:25,340 --> 00:21:29,330
tools actually written by one of my guys

00:21:26,899 --> 00:21:31,340
but basically you can take input from

00:21:29,330 --> 00:21:33,409
users a library that will take input

00:21:31,340 --> 00:21:36,049
from users and generate an oci runtime

00:21:33,409 --> 00:21:38,869
specification so we use that inside of

00:21:36,049 --> 00:21:41,840
Craiova next thing we need uses this

00:21:38,869 --> 00:21:44,450
thing again core OS comes along we

00:21:41,840 --> 00:21:46,340
needed a way to configure networks so

00:21:44,450 --> 00:21:48,860
networks is kind of a strange part of

00:21:46,340 --> 00:21:51,110
this whole container world and that we

00:21:48,860 --> 00:21:53,600
needed networks too you know we want to

00:21:51,110 --> 00:21:56,210
allow different virtual private network

00:21:53,600 --> 00:21:57,379
tooling to come along and build and be

00:21:56,210 --> 00:21:58,549
able to plug into the container

00:21:57,379 --> 00:22:00,019
environment there's lots and lots of

00:21:58,549 --> 00:22:02,480
companies building their own sorta

00:22:00,019 --> 00:22:03,220
either hardware base no software based

00:22:02,480 --> 00:22:05,080
antenna net

00:22:03,220 --> 00:22:07,030
working I mean so work or West is

00:22:05,080 --> 00:22:09,909
defined a standard called CNI was

00:22:07,030 --> 00:22:11,590
container networking interface to use to

00:22:09,909 --> 00:22:13,630
allow other people to plug in and so

00:22:11,590 --> 00:22:15,789
they've been used with flannel we've

00:22:13,630 --> 00:22:18,789
opened a light open us the end I think

00:22:15,789 --> 00:22:20,130
the open shift has their own version so

00:22:18,789 --> 00:22:24,100
lots and lots of people are building

00:22:20,130 --> 00:22:25,840
content and networking interfaces lastly

00:22:24,100 --> 00:22:28,570
to run containers we need a way to

00:22:25,840 --> 00:22:30,370
monitor the container so when I launch a

00:22:28,570 --> 00:22:33,220
container on the system using no sea air

00:22:30,370 --> 00:22:36,250
runtime it just goes out and configures

00:22:33,220 --> 00:22:38,230
the kernel you know those sea groups and

00:22:36,250 --> 00:22:40,120
security settings and namespaces

00:22:38,230 --> 00:22:42,400
launches the process and then goes away

00:22:40,120 --> 00:22:44,470
so at that point there's nobody watching

00:22:42,400 --> 00:22:47,350
the container there's nobody sitting out

00:22:44,470 --> 00:22:49,539
there saying to the container exit right

00:22:47,350 --> 00:22:52,419
wrapping it and then so we needed a tool

00:22:49,539 --> 00:22:54,400
to be basically watch the container and

00:22:52,419 --> 00:22:56,020
basically that's called con Mon we wrote

00:22:54,400 --> 00:22:57,820
it in C because we wanted it to be as

00:22:56,020 --> 00:23:00,039
lightweight as possible and it basically

00:22:57,820 --> 00:23:01,900
monitors it takes care of logging what's

00:23:00,039 --> 00:23:03,490
the output so when you run containers

00:23:01,900 --> 00:23:04,900
you usually watch what's up going to

00:23:03,490 --> 00:23:07,799
standard out and standard era

00:23:04,900 --> 00:23:10,299
I mean handles the tty it's service

00:23:07,799 --> 00:23:12,010
serving attached clients and it's a

00:23:10,299 --> 00:23:14,049
textual basically the figures out if the

00:23:12,010 --> 00:23:16,780
container died and then writes the

00:23:14,049 --> 00:23:18,789
status to a file so that now any

00:23:16,780 --> 00:23:20,590
container engine that comes up can

00:23:18,789 --> 00:23:22,000
actually go to conmen and basically

00:23:20,590 --> 00:23:23,860
figure out what happened or you know

00:23:22,000 --> 00:23:27,309
Carmona likes it with the container but

00:23:23,860 --> 00:23:29,020
it'll record the data that happened so

00:23:27,309 --> 00:23:31,750
the pod architecture when you're running

00:23:29,020 --> 00:23:33,309
kubernetes in your environment coop

00:23:31,750 --> 00:23:35,320
anaise runs pods it doesn't run

00:23:33,309 --> 00:23:38,049
containers now container pods are

00:23:35,320 --> 00:23:40,120
basically one or more containers running

00:23:38,049 --> 00:23:42,039
together and the pod there's also this

00:23:40,120 --> 00:23:44,799
idea of what's called an infra container

00:23:42,039 --> 00:23:47,830
our pods container and what happens when

00:23:44,799 --> 00:23:49,750
you launch a pod under kubernetes is it

00:23:47,830 --> 00:23:52,480
launches this little tiny contain a

00:23:49,750 --> 00:23:54,429
program that basically goes to sleep and

00:23:52,480 --> 00:23:56,380
it just starts up and then it attaches

00:23:54,429 --> 00:23:58,220
all those namespaces to it you have to

00:23:56,380 --> 00:24:00,799
have a process in the original name

00:23:58,220 --> 00:24:03,080
and then it will add containers to it so

00:24:00,799 --> 00:24:04,909
if you looked at under cryo what happens

00:24:03,080 --> 00:24:06,679
when you launch a pod we launch the

00:24:04,909 --> 00:24:08,720
infra container it has one conmen

00:24:06,679 --> 00:24:10,789
listening to that and then one or more

00:24:08,720 --> 00:24:13,450
containers get sloshed so basically this

00:24:10,789 --> 00:24:16,720
is what the whole infrastructure of

00:24:13,450 --> 00:24:19,490
audience structure around the cryo so

00:24:16,720 --> 00:24:21,980
right we talked earlier about how much

00:24:19,490 --> 00:24:23,840
cryo loves kubernetes and the way we're

00:24:21,980 --> 00:24:25,940
trying to prove that is basically we

00:24:23,840 --> 00:24:29,659
have the biggest test Suites every test

00:24:25,940 --> 00:24:31,940
suite we can find we run before anything

00:24:29,659 --> 00:24:33,769
gets merged in the continuance trial so

00:24:31,940 --> 00:24:35,590
we don't want to cry out to ever break

00:24:33,769 --> 00:24:37,909
and no new features ever break

00:24:35,590 --> 00:24:40,340
kubernetes so right now we're running

00:24:37,909 --> 00:24:41,870
and I know it's probably much more than

00:24:40,340 --> 00:24:44,750
five hundred for this nine full test

00:24:41,870 --> 00:24:46,850
weeks to get a pull request into into

00:24:44,750 --> 00:24:48,649
cryo at this point is pretty difficult

00:24:46,850 --> 00:24:49,970
right you have to jump through hoops you

00:24:48,649 --> 00:24:52,429
have to make sure that everything is

00:24:49,970 --> 00:24:55,159
possible state no Piazza merged without

00:24:52,429 --> 00:24:57,370
everything passing cryo came out was

00:24:55,159 --> 00:25:00,289
fully supported as of last December

00:24:57,370 --> 00:25:03,710
one dot negative my engine is wanted to

00:25:00,289 --> 00:25:05,720
call it 1 0 so we released it back in

00:25:03,710 --> 00:25:08,330
December I hated the fact that we called

00:25:05,720 --> 00:25:10,879
it 1.0 so the next release we called it

00:25:08,330 --> 00:25:13,820
1.9 which works with kubernetes dot 1.9

00:25:10,879 --> 00:25:16,370
then we hit released 1.10 which works

00:25:13,820 --> 00:25:19,920
with kubernetes 1.10 anybody heads of

00:25:16,370 --> 00:25:22,560
the guess what works with 1.11

00:25:19,920 --> 00:25:25,050
yeah okay so 1.11 works for kubernetes

00:25:22,560 --> 00:25:31,320
1.11 we are stocking the hell out of

00:25:25,050 --> 00:25:32,550
kubernetes okay the goal right now I'll

00:25:31,320 --> 00:25:36,030
talk about that in a minute but based on

00:25:32,550 --> 00:25:37,800
the goal for openshift 4.0 is that will

00:25:36,030 --> 00:25:41,820
support cryo by default right now we

00:25:37,800 --> 00:25:45,600
support both trial and doctor under the

00:25:41,820 --> 00:25:50,160
covers but the goal is that 4.0 to

00:25:45,600 --> 00:25:52,980
support trial by default cryo is now

00:25:50,160 --> 00:25:54,630
supporting red is now running most a lot

00:25:52,980 --> 00:25:57,030
of openshift online so if you go on

00:25:54,630 --> 00:25:59,040
openshift online you're using cryo if

00:25:57,030 --> 00:26:01,500
you go to Microsoft you want to launch a

00:25:59,040 --> 00:26:03,420
kind of container you're using trial

00:26:01,500 --> 00:26:05,820
okay so cryo is actually getting out

00:26:03,420 --> 00:26:07,980
there but a lot of ways I always tell

00:26:05,820 --> 00:26:10,080
people I want try out to be something

00:26:07,980 --> 00:26:12,000
you ignore right the real goal here is

00:26:10,080 --> 00:26:15,330
to make running containers in production

00:26:12,000 --> 00:26:16,800
boring okay I often ask people they say

00:26:15,330 --> 00:26:18,210
alright you use this in the background

00:26:16,800 --> 00:26:20,790
you use this in the back end I asked

00:26:18,210 --> 00:26:22,350
them what file system do you use I don't

00:26:20,790 --> 00:26:25,710
know what file system I have on my

00:26:22,350 --> 00:26:27,240
laptop this is the X t4 is the next FS I

00:26:25,710 --> 00:26:28,980
don't know and I don't care the only

00:26:27,240 --> 00:26:31,350
time I care it is when something breaks

00:26:28,980 --> 00:26:32,580
and so our goal here is to make this

00:26:31,350 --> 00:26:34,860
thing just blend into the background

00:26:32,580 --> 00:26:38,310
it's just that it's just a feature

00:26:34,860 --> 00:26:40,650
underneath coop images so what else does

00:26:38,310 --> 00:26:42,840
the open chef need to do to run

00:26:40,650 --> 00:26:44,340
containers after runs you know and use

00:26:42,840 --> 00:26:46,320
this cool kubernetes well it needs the

00:26:44,340 --> 00:26:47,850
ability to build images openshift has

00:26:46,320 --> 00:26:49,800
this concept called source to image

00:26:47,850 --> 00:26:51,870
where user just check something in to

00:26:49,800 --> 00:26:53,490
get does a push and all of a sudden the

00:26:51,870 --> 00:26:55,290
container poops off the back end of the

00:26:53,490 --> 00:26:57,090
open chef right so we need that

00:26:55,290 --> 00:27:00,390
container image to come out of the end

00:26:57,090 --> 00:27:02,820
so we needed a way to support that for

00:27:00,390 --> 00:27:04,020
open ship and we need the ability to

00:27:02,820 --> 00:27:06,300
post these things to container

00:27:04,020 --> 00:27:08,970
registries so this guy right down here

00:27:06,300 --> 00:27:12,360
is an island I'd like is working with me

00:27:08,970 --> 00:27:13,950
last year at Def Con check and we're

00:27:12,360 --> 00:27:15,510
sitting there together and he's in

00:27:13,950 --> 00:27:16,980
charge of containers image and I always

00:27:15,510 --> 00:27:20,340
kept on saying to him that

00:27:16,980 --> 00:27:22,140
I need a tool for building containers I

00:27:20,340 --> 00:27:24,180
wanted to call utils for building

00:27:22,140 --> 00:27:25,680
containers I said you know it's just a

00:27:24,180 --> 00:27:27,660
brute offense I need to create a brute

00:27:25,680 --> 00:27:29,820
efest I rode up higher ups in JSON file

00:27:27,660 --> 00:27:31,140
put it together and build it and I said

00:27:29,820 --> 00:27:33,300
I needed some coffee and write it say

00:27:31,140 --> 00:27:35,010
you got that you've got containers image

00:27:33,300 --> 00:27:36,900
could we throw together something to do

00:27:35,010 --> 00:27:39,330
that I told him that in the morning

00:27:36,900 --> 00:27:40,950
while we're at DEFCON and by that

00:27:39,330 --> 00:27:43,470
evening he did a five minute talk

00:27:40,950 --> 00:27:47,070
showing how he would build container

00:27:43,470 --> 00:27:48,240
images using container storage and so he

00:27:47,070 --> 00:27:49,560
said what do you want me to call it I

00:27:48,240 --> 00:27:51,180
said I don't care what you call it just

00:27:49,560 --> 00:27:54,830
call it builder what difference does it

00:27:51,180 --> 00:27:54,830
make and then he came out with this

00:27:55,279 --> 00:28:02,999
and so we and the last thing here this

00:28:00,989 --> 00:28:04,710
is not the current image but this image

00:28:02,999 --> 00:28:06,929
was the first image we put out of it

00:28:04,710 --> 00:28:08,639
this is a Boston Terrier and supposedly

00:28:06,929 --> 00:28:10,649
on a hard hat as soon as we tweeted out

00:28:08,639 --> 00:28:12,149
that we had of it the icon for this

00:28:10,649 --> 00:28:13,830
people came back and said why do you

00:28:12,149 --> 00:28:16,860
have a dog with tighty whities on his

00:28:13,830 --> 00:28:18,600
head so I still live it it's a so it's

00:28:16,860 --> 00:28:20,700
much more of a hot head nowadays but I'd

00:28:18,600 --> 00:28:23,039
like to leave it just for that joke okay

00:28:20,700 --> 00:28:24,690
so in the coloring book that hopefully

00:28:23,039 --> 00:28:27,389
you guys picked up if you don't come get

00:28:24,690 --> 00:28:30,359
me afterwards this is a builder is

00:28:27,389 --> 00:28:31,769
represent represented as as a dog and I

00:28:30,359 --> 00:28:32,110
think it kind of looks like now on don't

00:28:31,769 --> 00:28:33,429
you

00:28:32,110 --> 00:28:35,779
[Music]

00:28:33,429 --> 00:28:38,269
okay so builder came along and then

00:28:35,779 --> 00:28:40,909
again it's my my idea was kept core

00:28:38,269 --> 00:28:43,849
called utils for containers we wanted to

00:28:40,909 --> 00:28:45,049
have a simple interface for it so you

00:28:43,849 --> 00:28:46,639
know we needed to be able to pull an

00:28:45,049 --> 00:28:48,829
image from a container from a container

00:28:46,639 --> 00:28:51,259
registry to the post and so we built

00:28:48,829 --> 00:28:53,209
build it from fedora so what this does

00:28:51,259 --> 00:28:54,979
is it goes out uses that container image

00:28:53,209 --> 00:28:56,959
to go out to a container registry pulls

00:28:54,979 --> 00:28:59,179
down the Fedora image off of a container

00:28:56,959 --> 00:29:01,099
registry to the local system puts it on

00:28:59,179 --> 00:29:02,690
top of container storage and then

00:29:01,099 --> 00:29:04,669
creates a Builder container

00:29:02,690 --> 00:29:06,529
okay containers a way overused word in

00:29:04,669 --> 00:29:08,179
this world but basically has all the

00:29:06,529 --> 00:29:10,759
data that's associated with a container

00:29:08,179 --> 00:29:12,440
in the next step we need to do is we

00:29:10,759 --> 00:29:14,299
need to model the container right I want

00:29:12,440 --> 00:29:15,769
a mount point I want that root of Fest

00:29:14,299 --> 00:29:17,299
Mountain on my sister and I just want to

00:29:15,769 --> 00:29:19,519
be able to write to that root of Fest so

00:29:17,299 --> 00:29:21,589
we built build a mount and that

00:29:19,519 --> 00:29:24,079
basically brings back a mile point

00:29:21,589 --> 00:29:27,169
okay another segue anybody ever hear

00:29:24,079 --> 00:29:31,369
with this command anybody know what this

00:29:27,169 --> 00:29:34,069
command does there's copies content from

00:29:31,369 --> 00:29:36,739
a container image to the host or IRA

00:29:34,069 --> 00:29:41,100
copy stuff from the container from the

00:29:36,739 --> 00:29:43,620
host into a container image really cool

00:29:41,100 --> 00:29:45,509
really cool I saw that and I said I'm

00:29:43,620 --> 00:29:47,610
gonna steal that idea so I decided to go

00:29:45,509 --> 00:29:51,149
off and build my own tool and I called

00:29:47,610 --> 00:29:53,880
the copy and I put it into coil

00:29:51,149 --> 00:29:56,399
utilities on the system and I built it

00:29:53,880 --> 00:29:58,559
yeah it really you know works really

00:29:56,399 --> 00:30:00,659
well but once I saw that work really

00:29:58,559 --> 00:30:02,940
well I decided to build another tool so

00:30:00,659 --> 00:30:04,529
I built the tool called PNF sometimes

00:30:02,940 --> 00:30:06,570
you call it yeah I used to call it yeah

00:30:04,529 --> 00:30:08,130
I might call um again in the future

00:30:06,570 --> 00:30:09,899
but basically with this tool you can

00:30:08,130 --> 00:30:12,029
actually install content into a

00:30:09,899 --> 00:30:13,919
container root offense so I just added

00:30:12,029 --> 00:30:16,320
the - - install root and you can

00:30:13,919 --> 00:30:18,870
basically install Apache into a empty

00:30:16,320 --> 00:30:19,500
root of fast and do it but I said that's

00:30:18,870 --> 00:30:21,090
cool

00:30:19,500 --> 00:30:23,730
Alden that's another troll I invented a

00:30:21,090 --> 00:30:25,350
tool called make so with the tool make I

00:30:23,730 --> 00:30:26,789
can actually do this thing called dester

00:30:25,350 --> 00:30:28,139
I decided to come up with this concept

00:30:26,789 --> 00:30:30,470
of dester and I could basically set it

00:30:28,139 --> 00:30:32,399
up to the point to a root offense so

00:30:30,470 --> 00:30:33,990
basically what I'm showing here is you

00:30:32,399 --> 00:30:35,820
can basically use anything on a Linux

00:30:33,990 --> 00:30:37,649
systems actually populate what's going

00:30:35,820 --> 00:30:38,970
to go into your container so the next

00:30:37,649 --> 00:30:41,250
thing you need to do is populate that

00:30:38,970 --> 00:30:43,350
JSON associated with the container image

00:30:41,250 --> 00:30:44,759
and we have a tool called builder config

00:30:43,350 --> 00:30:46,860
and so you can put things like entry

00:30:44,759 --> 00:30:48,740
points environmental variables all this

00:30:46,860 --> 00:30:52,220
different stuff that you've basically

00:30:48,740 --> 00:30:55,769
put into containers image to identify

00:30:52,220 --> 00:30:57,539
what the container is and then finally

00:30:55,769 --> 00:31:00,210
we want to take that container image and

00:30:57,539 --> 00:31:02,279
actually have a container and create an

00:31:00,210 --> 00:31:04,320
image right great and OCI image on the

00:31:02,279 --> 00:31:05,759
system and so that's build a commitment

00:31:04,320 --> 00:31:07,289
and then of course I want to be able to

00:31:05,759 --> 00:31:09,269
push it somewhere I pushed it to a

00:31:07,289 --> 00:31:09,779
container registry so we have build a

00:31:09,269 --> 00:31:13,049
push

00:31:09,779 --> 00:31:16,169
so with this tooling and by the way all

00:31:13,049 --> 00:31:16,940
this stuff here no big fat container

00:31:16,169 --> 00:31:18,769
team

00:31:16,940 --> 00:31:21,499
right I don't need a demon to do any of

00:31:18,769 --> 00:31:24,099
this stuff so I can do it not only that

00:31:21,499 --> 00:31:27,950
I'm showing it's running his route here

00:31:24,099 --> 00:31:29,960
with rate with the current builder we

00:31:27,950 --> 00:31:30,440
can do it as an on route we can do all

00:31:29,960 --> 00:31:31,519
this stuff

00:31:30,440 --> 00:31:33,109
taking advantage to use a namespace

00:31:31,519 --> 00:31:41,809
we're able to do this all is non route

00:31:33,109 --> 00:31:44,289
now try it again every sin check one two

00:31:41,809 --> 00:31:44,289
three

00:31:45,999 --> 00:31:53,090
glad you asked so builder also has some

00:31:50,869 --> 00:31:55,070
support darker file ok docker file has

00:31:53,090 --> 00:31:56,809
become this sort of the facto standard I

00:31:55,070 --> 00:31:59,929
like to think of it's a really crappy

00:31:56,809 --> 00:32:01,340
version of bash but shell script but

00:31:59,929 --> 00:32:03,139
basically it's become this two facto

00:32:01,340 --> 00:32:04,940
that everybody wants to support so we

00:32:03,139 --> 00:32:06,950
actually had the support with builders

00:32:04,940 --> 00:32:08,869
who are using darker files so we built a

00:32:06,950 --> 00:32:11,749
command called build builder using

00:32:08,869 --> 00:32:13,549
builder build using docker file and

00:32:11,749 --> 00:32:15,919
basically as the same syntax that you

00:32:13,549 --> 00:32:17,840
would expect for running builds on it

00:32:15,919 --> 00:32:19,989
about the costs were engineer so we're

00:32:17,840 --> 00:32:22,309
all lazy so we actually have build a bud

00:32:19,989 --> 00:32:23,869
so build a bud and no it's you know

00:32:22,309 --> 00:32:26,869
anheuser-busch is not involved in this

00:32:23,869 --> 00:32:29,130
decision but basically we can build

00:32:26,869 --> 00:32:32,179
container images using docker files

00:32:29,130 --> 00:32:32,179
[Music]

00:32:36,190 --> 00:32:40,250
well it's not called bilder file but I

00:32:38,630 --> 00:32:44,050
decided to write this really nice

00:32:40,250 --> 00:32:47,270
scripting language and I called it bash

00:32:44,050 --> 00:32:49,010
so after I wrote bash I basically have

00:32:47,270 --> 00:32:50,840
that you know lots and lots of tools out

00:32:49,010 --> 00:32:53,000
there to build container images and the

00:32:50,840 --> 00:32:54,440
whole idea here is that what I really

00:32:53,000 --> 00:32:57,410
wanted with bilder is to basically

00:32:54,440 --> 00:32:59,360
provide a library or low-level

00:32:57,410 --> 00:33:00,710
command-line tools that other people

00:32:59,360 --> 00:33:03,080
could build higher level content

00:33:00,710 --> 00:33:05,180
container languages so we want others to

00:33:03,080 --> 00:33:09,080
build it we're looking at OpenShift

00:33:05,180 --> 00:33:11,440
is looking to basically replace right

00:33:09,080 --> 00:33:13,850
now the source to image is actually

00:33:11,440 --> 00:33:19,580
injecting the darker socket into the

00:33:13,850 --> 00:33:21,020
containers to run to do bills a lot of

00:33:19,580 --> 00:33:23,120
times I tell people that that is

00:33:21,020 --> 00:33:25,550
probably the most insecure thing you can

00:33:23,120 --> 00:33:28,550
possibly do if you want to give people

00:33:25,550 --> 00:33:30,680
access to the so that I tell you that

00:33:28,550 --> 00:33:32,690
just go in and set sudo to known root

00:33:30,680 --> 00:33:34,640
and turn off your logging because if you

00:33:32,690 --> 00:33:37,250
give a non root user access to that

00:33:34,640 --> 00:33:39,550
socket that's what you're doing if I go

00:33:37,250 --> 00:33:44,120
and do evil things or on the system as

00:33:39,550 --> 00:33:45,950
via via the doctor socket I can then

00:33:44,120 --> 00:33:47,840
destroy my container and there's no

00:33:45,950 --> 00:33:50,210
record of me ever doing anything on your

00:33:47,840 --> 00:33:53,360
system so never give out that socket to

00:33:50,210 --> 00:33:54,830
a non privileged user so we want to do

00:33:53,360 --> 00:33:56,600
with source the images basically stop

00:33:54,830 --> 00:33:59,360
injecting that lots and lots of people

00:33:56,600 --> 00:34:01,730
around running container builders inside

00:33:59,360 --> 00:34:03,200
of us inside of kubernetes and what

00:34:01,730 --> 00:34:05,900
they're doing is their volume mounting

00:34:03,200 --> 00:34:07,580
in that socket okay which is equivalent

00:34:05,900 --> 00:34:08,750
of giving them route on any coasters

00:34:07,580 --> 00:34:10,760
they're doing it so we want to be able

00:34:08,750 --> 00:34:13,520
to do builder inside a source to image

00:34:10,760 --> 00:34:16,220
and stop injecting the socket ansible

00:34:13,520 --> 00:34:18,590
containers is also looking at

00:34:16,220 --> 00:34:22,220
potentially using builder to replace and

00:34:18,590 --> 00:34:24,050
basically using ansible as your sort of

00:34:22,220 --> 00:34:25,620
instable playbooks for defining what's

00:34:24,050 --> 00:34:28,390
in the container image

00:34:25,620 --> 00:34:30,310
so what else does open ship needs to do

00:34:28,390 --> 00:34:32,020
we needed to ability to diagnose

00:34:30,310 --> 00:34:35,470
problems we need people to be able to

00:34:32,020 --> 00:34:37,540
play in this environment so we decided

00:34:35,470 --> 00:34:40,600
to create this new tool and we called it

00:34:37,540 --> 00:34:42,250
pod man so quad man is part of the lip

00:34:40,600 --> 00:34:44,260
cloud effort so we wanted to be able to

00:34:42,250 --> 00:34:47,220
basically build a pod manager or a

00:34:44,260 --> 00:34:50,050
container managing tool and we wanted to

00:34:47,220 --> 00:34:52,179
base with this tool is just a CLI

00:34:50,050 --> 00:34:54,370
command line tool that can be used for

00:34:52,179 --> 00:34:57,070
managing container images and we based

00:34:54,370 --> 00:35:01,660
it on top of what everybody knows which

00:34:57,070 --> 00:35:03,430
is a darker CLI so pod man is now out

00:35:01,660 --> 00:35:05,170
we're actually releasing pod man on a

00:35:03,430 --> 00:35:08,110
weekly basis we've been doing it for

00:35:05,170 --> 00:35:12,250
probably the last six months just k5 on

00:35:08,110 --> 00:35:14,560
8.3 so we release it ages the month and

00:35:12,250 --> 00:35:15,940
the third week so at the end of the year

00:35:14,560 --> 00:35:17,470
we're gonna be in trouble so we have to

00:35:15,940 --> 00:35:20,860
have one zero by the end of the year

00:35:17,470 --> 00:35:22,750
coming about naming system gone but

00:35:20,860 --> 00:35:25,090
basically you want to list the

00:35:22,750 --> 00:35:26,950
containers on the system if you want to

00:35:25,090 --> 00:35:28,980
run a container on the system if you

00:35:26,950 --> 00:35:32,440
want to exact into an existing container

00:35:28,980 --> 00:35:34,360
if you want to list the images out on

00:35:32,440 --> 00:35:37,180
the container basically we've tried to

00:35:34,360 --> 00:35:39,070
copy everything in that CLI possible

00:35:37,180 --> 00:35:41,140
that we care about obviously we're not

00:35:39,070 --> 00:35:43,060
doing suam with this command but we've

00:35:41,140 --> 00:35:45,100
had most of the commands are all done

00:35:43,060 --> 00:35:48,280
and lots and lots of people there was a

00:35:45,100 --> 00:35:51,670
great tweet that came out back about now

00:35:48,280 --> 00:35:53,830
I guess it's back in May and I love this

00:35:51,670 --> 00:35:56,020
tweet he says I completely forgot that

00:35:53,830 --> 00:35:58,450
two months ago I set up an alias of dr.

00:35:56,020 --> 00:36:00,460
equals pod man and it has been a dream

00:35:58,450 --> 00:36:02,890
so he's been running for two months at

00:36:00,460 --> 00:36:04,810
this point without use with the pod man

00:36:02,890 --> 00:36:07,270
of course that's several month old one

00:36:04,810 --> 00:36:09,670
so next question down comes down and

00:36:07,270 --> 00:36:12,070
says the only downside there's no book

00:36:09,670 --> 00:36:14,560
I'll talk about that in a second next

00:36:12,070 --> 00:36:16,510
one's down Joe Thompson replies and says

00:36:14,560 --> 00:36:18,820
so who remind how did you might figure

00:36:16,510 --> 00:36:20,970
out that you were running doctor and

00:36:18,820 --> 00:36:23,700
Padma instead of doctor

00:36:20,970 --> 00:36:25,770
and he said I executed dr. help and it

00:36:23,700 --> 00:36:31,619
came out with pod man help I think I owe

00:36:25,770 --> 00:36:33,960
about three-quarters so so what advise

00:36:31,619 --> 00:36:36,119
you to do right now is go home try to

00:36:33,960 --> 00:36:39,359
sell it try l-pod names available on

00:36:36,119 --> 00:36:43,410
fedora rel sent to us

00:36:39,359 --> 00:36:45,780
Ubuntu and it's fully supported on Susy

00:36:43,410 --> 00:36:47,339
open Susi as well so it's basically gone

00:36:45,780 --> 00:36:50,310
out we have lots and lots of

00:36:47,339 --> 00:36:52,980
contributors to it you guess what no big

00:36:50,310 --> 00:36:54,930
fat container demon okay it works like a

00:36:52,980 --> 00:36:57,599
 exactly works sort of exactly

00:36:54,930 --> 00:36:59,430
what you expect not a client-server

00:36:57,599 --> 00:37:01,500
operation the pod man is really really

00:36:59,430 --> 00:37:03,900
cool and does almost everything you can

00:37:01,500 --> 00:37:05,220
so we talked a lot about containers

00:37:03,900 --> 00:37:08,310
there's handed out the coloring book

00:37:05,220 --> 00:37:10,319
before and I think I'm just about to run

00:37:08,310 --> 00:37:12,569
out of space so we have two other socks

00:37:10,319 --> 00:37:14,160
this afternoon now Alan's gonna be

00:37:12,569 --> 00:37:16,770
giving a talk and I'm sure going back

00:37:14,160 --> 00:37:19,710
and attacking me so I'm gonna give a

00:37:16,770 --> 00:37:22,290
deep dive into bilder and then kurbashi

00:37:19,710 --> 00:37:23,880
and Sally O'Malley gonna be talking

00:37:22,290 --> 00:37:25,230
about all the difference I said there's

00:37:23,880 --> 00:37:27,300
lots of security stuff that we're able

00:37:25,230 --> 00:37:28,589
to do by breaking apart containers so

00:37:27,300 --> 00:37:30,359
they're gonna be cut talking about that

00:37:28,589 --> 00:37:32,880
later on the stuff to notice to look for

00:37:30,359 --> 00:37:34,980
those talks you can take the photo of

00:37:32,880 --> 00:37:37,770
this and the presentations be there I

00:37:34,980 --> 00:37:39,410
can't how the answer one question I

00:37:37,770 --> 00:37:42,489
guess yes

00:37:39,410 --> 00:37:42,489
[Music]

00:37:43,280 --> 00:37:48,530
is there any tool currently that can

00:37:46,010 --> 00:37:50,720
update a tag on a remote on the

00:37:48,530 --> 00:37:52,700
container remote registry any tools

00:37:50,720 --> 00:37:54,830
actually someone asks for that and the

00:37:52,700 --> 00:37:56,990
answer is that has to be built into the

00:37:54,830 --> 00:37:59,090
container protocol container but

00:37:56,990 --> 00:38:01,700
basically the protocol that talks

00:37:59,090 --> 00:38:03,470
between the client and the server and

00:38:01,700 --> 00:38:04,550
Vincents raising his hand back there

00:38:03,470 --> 00:38:06,410
because he's gonna point out that

00:38:04,550 --> 00:38:08,780
they're working on a standard now to

00:38:06,410 --> 00:38:13,220
find that so that what you're gonna tell

00:38:08,780 --> 00:38:15,860
me been static the the you can drop a

00:38:13,220 --> 00:38:17,270
coin and the docker registry API not the

00:38:15,860 --> 00:38:20,150
docker registry code base with the

00:38:17,270 --> 00:38:22,970
docker registry API has now been donated

00:38:20,150 --> 00:38:25,850
to the OCI the open containers

00:38:22,970 --> 00:38:28,370
initiative as the distribution spec it

00:38:25,850 --> 00:38:31,160
is the API that would enable a feature

00:38:28,370 --> 00:38:32,600
like that but it's not really up to the

00:38:31,160 --> 00:38:34,400
client tools right now they would have

00:38:32,600 --> 00:38:36,260
to do some shenanigans like fetch the

00:38:34,400 --> 00:38:38,000
image and then retag it and REE push it

00:38:36,260 --> 00:38:40,460
so that would be the place to look for

00:38:38,000 --> 00:38:42,860
it osya open containers / distribution

00:38:40,460 --> 00:38:44,480
spec right so we actually we had a big

00:38:42,860 --> 00:38:46,520
bug report that someone asked e for that

00:38:44,480 --> 00:38:49,040
in scope yo but we have to get it into

00:38:46,520 --> 00:38:52,040
you know we needed to get into Quay and

00:38:49,040 --> 00:38:53,570
out of factory docker IO and so we

00:38:52,040 --> 00:38:55,040
really need that to be a standard how

00:38:53,570 --> 00:38:56,330
you interact with the container

00:38:55,040 --> 00:39:00,620
registries to be able to do something

00:38:56,330 --> 00:39:02,360
like that anybody else everybody loves

00:39:00,620 --> 00:39:04,550
this idea and they're all aliasing it on

00:39:02,360 --> 00:39:06,110
their machines right now actually

00:39:04,550 --> 00:39:08,090
all right anybody want to talk to me

00:39:06,110 --> 00:39:11,329
I'll be around and thanks for coming

00:39:08,090 --> 00:39:11,329

YouTube URL: https://www.youtube.com/watch?v=c8uc7unZ8po


