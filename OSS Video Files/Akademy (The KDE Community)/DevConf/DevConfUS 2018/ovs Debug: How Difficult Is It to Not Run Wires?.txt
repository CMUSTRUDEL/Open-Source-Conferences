Title: ovs Debug: How Difficult Is It to Not Run Wires?
Publication date: 2019-02-22
Playlist: DevConfUS 2018
Description: 
	Open vSwitch is one of the common solutions for providing interconnection between VMs, containers, and even physical machines in the cloud space.  However, sometimes it can be difficult to understand what is going wrong when running a network.  In this session, a brief overview of how Open vSwitch works will be presented.  Tools and common debug scenarios will be also be covered.
Captions: 
	00:00:06,110 --> 00:00:09,230
[Music]

00:00:17,210 --> 00:00:22,190
stocks gonna be on open we switch by

00:00:21,000 --> 00:00:25,570
Erin Connell

00:00:22,190 --> 00:00:29,410
[Music]

00:00:25,570 --> 00:00:34,090
hi everyone I'm Erin this talk is on OBS

00:00:29,410 --> 00:00:36,910
debugging I it's gonna be very kind of

00:00:34,090 --> 00:00:38,050
terminal oriented and a lot of text so

00:00:36,910 --> 00:00:40,450
sorry

00:00:38,050 --> 00:00:45,880
I guess read your email if that kind of

00:00:40,450 --> 00:00:48,760
stuff fours you so this talk is gonna be

00:00:45,880 --> 00:00:52,180
about debugging networking with open V

00:00:48,760 --> 00:00:53,739
switch I don't mean like debugging the C

00:00:52,180 --> 00:00:57,430
code of open V switch so we're not gonna

00:00:53,739 --> 00:01:00,460
go do anything with GV but we are going

00:00:57,430 --> 00:01:04,240
to do use some kind of fancy OBS

00:01:00,460 --> 00:01:06,820
commands we will talk about tracing

00:01:04,240 --> 00:01:10,090
packets and yes that does mean we'll be

00:01:06,820 --> 00:01:12,310
using TCP dump a little bit but no TCP

00:01:10,090 --> 00:01:15,070
dump is not the only thing you need

00:01:12,310 --> 00:01:19,380
or rather it's not the only tool you

00:01:15,070 --> 00:01:22,899
need to reach for when working with OBS

00:01:19,380 --> 00:01:25,570
finally I'm not going to touch net

00:01:22,899 --> 00:01:29,470
filter routing table any of those things

00:01:25,570 --> 00:01:31,600
we'll get to why in a bit but just if

00:01:29,470 --> 00:01:34,179
you you know if you have a problem and

00:01:31,600 --> 00:01:37,289
you think like oh okay open V switch and

00:01:34,179 --> 00:01:39,880
net filter aren't playing well together

00:01:37,289 --> 00:01:41,040
we'll we will cover it but I'm not going

00:01:39,880 --> 00:01:46,979
to talk about net filter

00:01:41,040 --> 00:01:46,979
[Music]

00:01:47,210 --> 00:01:53,150
okay so two types of people I kind of

00:01:51,470 --> 00:01:56,600
geared this talk for people who are

00:01:53,150 --> 00:02:00,500
writing Sdn orchestration tools and

00:01:56,600 --> 00:02:03,950
people who are supporting you know in a

00:02:00,500 --> 00:02:07,010
kind of a support role the most common

00:02:03,950 --> 00:02:09,789
things that come up our packets don't go

00:02:07,010 --> 00:02:13,700
out packets go out the wrong port

00:02:09,789 --> 00:02:16,340
performance is bad those are kind of the

00:02:13,700 --> 00:02:19,220
big ones and then most recently when we

00:02:16,340 --> 00:02:23,120
enabled support for running stuff under

00:02:19,220 --> 00:02:24,530
SELinux OBS doesn't start but we should

00:02:23,120 --> 00:02:30,170
have solved that those are those are

00:02:24,530 --> 00:02:32,840
real obvious bugs alright so how does

00:02:30,170 --> 00:02:35,390
obvious work it's two demons primarily

00:02:32,840 --> 00:02:38,540
we have the OBS DB which is the

00:02:35,390 --> 00:02:40,940
configuration database and the V switch

00:02:38,540 --> 00:02:44,750
D which does the forwarding decisions

00:02:40,940 --> 00:02:47,540
and the flow pipeline there are some

00:02:44,750 --> 00:02:49,700
important commands that go along with it

00:02:47,540 --> 00:02:53,330
obvious via scuttle is one of the most

00:02:49,700 --> 00:02:54,260
common ones that's how you add ports at

00:02:53,330 --> 00:02:56,750
bridges

00:02:54,260 --> 00:03:01,489
you know dump database information from

00:02:56,750 --> 00:03:03,860
OVS DB another one that's important for

00:03:01,489 --> 00:03:06,650
debugging diagnostics is obvious app

00:03:03,860 --> 00:03:10,570
cuddle and that will allow you to

00:03:06,650 --> 00:03:13,700
actually send commands to specific OBS

00:03:10,570 --> 00:03:15,680
applications so you can do obvious app

00:03:13,700 --> 00:03:17,360
cuddle commands for the DB you can do

00:03:15,680 --> 00:03:18,730
obvious app cuddle commands for the V

00:03:17,360 --> 00:03:20,800
switch D

00:03:18,730 --> 00:03:22,570
you know any any of the demons that are

00:03:20,800 --> 00:03:25,150
running will have their own set of

00:03:22,570 --> 00:03:29,260
commands and obvious a puddle is is how

00:03:25,150 --> 00:03:32,140
you would access the OBS DB contains

00:03:29,260 --> 00:03:35,880
just configuration information ports

00:03:32,140 --> 00:03:41,130
bridges interfaces mirror information

00:03:35,880 --> 00:03:44,470
that kind of stuff it doesn't contain

00:03:41,130 --> 00:03:46,810
you know other other kind of data I

00:03:44,470 --> 00:03:49,750
guess it doesn't hold copies of packets

00:03:46,810 --> 00:03:53,920
it's not involved in the actual

00:03:49,750 --> 00:03:57,310
forwarding at all it just says this is

00:03:53,920 --> 00:04:01,750
the configuration you can dump that

00:03:57,310 --> 00:04:06,190
information by using o vs vs total show

00:04:01,750 --> 00:04:08,200
OBS Vedas cuddle list etc sometimes the

00:04:06,190 --> 00:04:10,080
DB can contain what's called what some

00:04:08,200 --> 00:04:12,489
people refer to as stale information

00:04:10,080 --> 00:04:14,560
what that means is someone has added

00:04:12,489 --> 00:04:17,560
some some port configuration we'll say

00:04:14,560 --> 00:04:21,730
for a port that doesn't exist the DB

00:04:17,560 --> 00:04:23,830
does not enforce that you are that you

00:04:21,730 --> 00:04:26,169
have a correct configuration this is

00:04:23,830 --> 00:04:27,790
just like a configuration file where you

00:04:26,169 --> 00:04:29,800
can throw in whatever interfaces you

00:04:27,790 --> 00:04:31,300
want the DB will allow you to put

00:04:29,800 --> 00:04:35,949
anything in it

00:04:31,300 --> 00:04:39,679
so yeah beware

00:04:35,949 --> 00:04:42,619
the V switch D is the other side of OBS

00:04:39,679 --> 00:04:44,629
the the forwarding side and that will

00:04:42,619 --> 00:04:46,809
pull all the configuration out of the

00:04:44,629 --> 00:04:50,569
database okay

00:04:46,809 --> 00:04:53,269
it will make sure that the running state

00:04:50,569 --> 00:04:57,649
of the system matches what's in the

00:04:53,269 --> 00:04:59,329
database and it will clean up any flows

00:04:57,649 --> 00:05:02,239
that have been installed in any of the

00:04:59,329 --> 00:05:03,889
data paths periodically and it will make

00:05:02,239 --> 00:05:08,899
sure that new flows that are required

00:05:03,889 --> 00:05:09,499
are inserted okay that's basically all

00:05:08,899 --> 00:05:13,009
it does

00:05:09,499 --> 00:05:15,319
I mean it's we'll get to some other kind

00:05:13,009 --> 00:05:19,899
of minor things it does but for the most

00:05:15,319 --> 00:05:22,459
part it's just making sure things are

00:05:19,899 --> 00:05:26,299
matching what's in the configuration

00:05:22,459 --> 00:05:29,139
that's been requested okay there are two

00:05:26,299 --> 00:05:35,269
important data paths that V switch D

00:05:29,139 --> 00:05:37,819
cares about net dev and link so net link

00:05:35,269 --> 00:05:40,729
is you know sometimes we might call the

00:05:37,819 --> 00:05:43,339
kernel data path it's important to note

00:05:40,729 --> 00:05:46,309
that like OBS runs on Windows as well as

00:05:43,339 --> 00:05:50,419
Linux and you know Mac and all that so

00:05:46,309 --> 00:05:53,779
and FreeBSD and whatever else and so

00:05:50,419 --> 00:05:57,169
some operating systems notably Windows

00:05:53,779 --> 00:06:02,949
and Linux they have support for using

00:05:57,169 --> 00:06:05,710
this net link data path so you know the

00:06:02,949 --> 00:06:07,509
the VHD in that case will generally

00:06:05,710 --> 00:06:10,060
prefer to use the net linked data path

00:06:07,509 --> 00:06:11,860
we'll get to why in us in a second

00:06:10,060 --> 00:06:15,009
but we call that the kernel data path

00:06:11,860 --> 00:06:17,110
usually the net dev data path is all

00:06:15,009 --> 00:06:19,569
done in user space that means packets

00:06:17,110 --> 00:06:21,669
come in into the V switch D and the V

00:06:19,569 --> 00:06:24,479
search deep processes them and pushes

00:06:21,669 --> 00:06:24,479
them out as well

00:06:25,370 --> 00:06:30,370
[Music]

00:06:27,520 --> 00:06:33,130
so it's kind of simple what happens in a

00:06:30,370 --> 00:06:38,319
data path right pack it in pack it out

00:06:33,130 --> 00:06:42,520
then there are kind of two paths there's

00:06:38,319 --> 00:06:44,889
the fast path in Colonel or you know

00:06:42,520 --> 00:06:47,110
we'll get something in net lane in net

00:06:44,889 --> 00:06:48,910
dev and then there's the slow path which

00:06:47,110 --> 00:06:50,800
is which is everything that fast path

00:06:48,910 --> 00:06:52,539
can't do so when fast paths can move a

00:06:50,800 --> 00:06:55,810
packet it does when it can't move a

00:06:52,539 --> 00:06:57,460
packet defaults to the slow path okay

00:06:55,810 --> 00:06:59,949
that's what we call like kind of an

00:06:57,460 --> 00:07:01,900
uptick all right I actually like to

00:06:59,949 --> 00:07:04,389
think of it as a as a down call but they

00:07:01,900 --> 00:07:09,310
think of it as as like going up to user

00:07:04,389 --> 00:07:11,259
space but the packet you know when the

00:07:09,310 --> 00:07:14,949
packet doesn't match any rules in the

00:07:11,259 --> 00:07:17,169
kernel flow table it'll get pushed into

00:07:14,949 --> 00:07:21,520
user space and then the user space has

00:07:17,169 --> 00:07:25,569
to figure out what's going on there's no

00:07:21,520 --> 00:07:28,389
net filter processing so OBS or the OBS

00:07:25,569 --> 00:07:30,970
data path does nothing that that you

00:07:28,389 --> 00:07:33,969
don't ask it to do or rather only does

00:07:30,970 --> 00:07:36,009
what you ask it to do so if you don't

00:07:33,969 --> 00:07:38,770
ask it to send the packet through

00:07:36,009 --> 00:07:40,870
something that handles netfilter

00:07:38,770 --> 00:07:43,960
so if you want iptables processing and

00:07:40,870 --> 00:07:46,469
you add some iptables rules selecting on

00:07:43,960 --> 00:07:48,969
packets that are in your OVS bridge

00:07:46,469 --> 00:07:51,880
you'll notice that those rules don't do

00:07:48,969 --> 00:07:54,039
anything that's because the packet comes

00:07:51,880 --> 00:07:55,659
in and it's processed by the data path

00:07:54,039 --> 00:07:57,669
and is and is pushed right out there's

00:07:55,659 --> 00:07:59,949
no chance for net filter hooks to

00:07:57,669 --> 00:08:03,219
operate you would need to like somehow

00:07:59,949 --> 00:08:05,380
distributed so the local host push it to

00:08:03,219 --> 00:08:07,210
some kind of local interface that can be

00:08:05,380 --> 00:08:07,539
you know that that has those net filter

00:08:07,210 --> 00:08:09,520
hooks

00:08:07,539 --> 00:08:11,250
maybe the eath device maybe a ton device

00:08:09,520 --> 00:08:15,150
something like that

00:08:11,250 --> 00:08:16,770
otherwise OBS isn't gonna call those

00:08:15,150 --> 00:08:18,750
things in it and it won't push things

00:08:16,770 --> 00:08:21,750
out to contract for instance without you

00:08:18,750 --> 00:08:24,000
telling it and so really OBS tries to do

00:08:21,750 --> 00:08:26,400
the most simple thing possible pack it

00:08:24,000 --> 00:08:30,740
in pack it out and and give you the

00:08:26,400 --> 00:08:34,080
building blocks to build what you want

00:08:30,740 --> 00:08:35,640
so this is kind of like you know this

00:08:34,080 --> 00:08:37,110
this picture kind of just illustrates

00:08:35,640 --> 00:08:40,110
what I've been talking about packet

00:08:37,110 --> 00:08:43,349
comes in that packet is matched against

00:08:40,110 --> 00:08:46,890
the flow key table okay if there's no

00:08:43,349 --> 00:08:49,200
key that matches that packet so meaning

00:08:46,890 --> 00:08:51,960
whatever metadata is associated with

00:08:49,200 --> 00:08:55,400
that packet whatever stuff makes up a

00:08:51,960 --> 00:09:00,570
flow key so for instance IP source test

00:08:55,400 --> 00:09:03,120
eath source test you know ports what

00:09:00,570 --> 00:09:05,580
port it came in on those kind of things

00:09:03,120 --> 00:09:09,330
if those aren't in the flow key table to

00:09:05,580 --> 00:09:12,300
match then it will be sent down to the

00:09:09,330 --> 00:09:14,220
switch D you know or rather they like to

00:09:12,300 --> 00:09:18,750
flip the picture and say it's sent up to

00:09:14,220 --> 00:09:20,330
be switch D and a packet is processed by

00:09:18,750 --> 00:09:23,130
the research D and then pushed out and

00:09:20,330 --> 00:09:26,130
simultaneously a flow will get installed

00:09:23,130 --> 00:09:29,510
into the flow key table to match future

00:09:26,130 --> 00:09:29,510
packets that come in

00:09:30,300 --> 00:09:35,610
okay finet dev datapath is a little bit

00:09:33,720 --> 00:09:39,630
different because there's no need for an

00:09:35,610 --> 00:09:41,910
up call as it were right so and and it

00:09:39,630 --> 00:09:44,220
can do some other things so it can take

00:09:41,910 --> 00:09:48,300
advantage of some packet batching if

00:09:44,220 --> 00:09:50,610
that's if that's possible and it

00:09:48,300 --> 00:09:54,330
actually also uses a whole bunch of

00:09:50,610 --> 00:09:58,050
caches and maybe if we have time we can

00:09:54,330 --> 00:09:59,540
talk about some issues around the caches

00:09:58,050 --> 00:10:02,490
[Music]

00:09:59,540 --> 00:10:04,380
this is kind of an illustration of what

00:10:02,490 --> 00:10:06,240
happens like a batch of packets would

00:10:04,380 --> 00:10:08,610
come in would be would be pulled off of

00:10:06,240 --> 00:10:10,590
a port they would be run through the

00:10:08,610 --> 00:10:12,750
what's called the EMC or the exact match

00:10:10,590 --> 00:10:15,480
cache it's actually another cache called

00:10:12,750 --> 00:10:20,460
the SMC but that we just call that part

00:10:15,480 --> 00:10:22,740
of the EMC that EMC is very small so you

00:10:20,460 --> 00:10:24,150
can see like the cost I've tried to

00:10:22,740 --> 00:10:26,670
illustrate it getting a little bit more

00:10:24,150 --> 00:10:31,260
each time you have to go to the next

00:10:26,670 --> 00:10:33,990
cache the EMC is very small but the idea

00:10:31,260 --> 00:10:36,450
is it's very fast if the packets don't

00:10:33,990 --> 00:10:38,550
match an EMC they're pushed on to the

00:10:36,450 --> 00:10:40,560
data path classifier and if they don't

00:10:38,550 --> 00:10:44,510
match in the data path classifier they

00:10:40,560 --> 00:10:44,510
go through a proto processing

00:10:45,510 --> 00:10:54,120
in OBS rather an open flow everything is

00:10:49,079 --> 00:10:57,990
like match action so feels like packet

00:10:54,120 --> 00:11:01,680
type IP header information all of that

00:10:57,990 --> 00:11:03,360
those are what you can match on and you

00:11:01,680 --> 00:11:05,579
can also match on some metadata what

00:11:03,360 --> 00:11:09,750
port it came in on or you know what

00:11:05,579 --> 00:11:12,839
bridge is be use that kind of

00:11:09,750 --> 00:11:14,760
information and then the actions are all

00:11:12,839 --> 00:11:16,889
like what to do with the packet jumps

00:11:14,760 --> 00:11:19,980
other tables output the boards push it

00:11:16,889 --> 00:11:22,889
over to whatever contract implementation

00:11:19,980 --> 00:11:25,079
you know modify parts of the packet drop

00:11:22,889 --> 00:11:32,180
the packet those are those are all

00:11:25,079 --> 00:11:36,779
actions alright so when things go wrong

00:11:32,180 --> 00:11:41,430
open V switch never takes action unless

00:11:36,779 --> 00:11:43,260
it's been told to right so the net link

00:11:41,430 --> 00:11:44,970
data path is simple just forwards

00:11:43,260 --> 00:11:47,610
packets maybe we'll go up to contract

00:11:44,970 --> 00:11:49,769
but but that's it that Deb is a bit more

00:11:47,610 --> 00:11:51,930
complex because it has those caches and

00:11:49,769 --> 00:11:54,089
it has to be involved in kind of pulling

00:11:51,930 --> 00:11:56,639
the packets and pushing the packets but

00:11:54,089 --> 00:12:00,240
really it's still just forwarding

00:11:56,639 --> 00:12:03,480
packets and it's really Software Defined

00:12:00,240 --> 00:12:06,029
Networking and what that means is the

00:12:03,480 --> 00:12:08,279
most likely when you have a problem with

00:12:06,029 --> 00:12:09,899
a packet moving just like when your

00:12:08,279 --> 00:12:12,870
computer and you have a problem with a

00:12:09,899 --> 00:12:14,520
program running most likely you told OBS

00:12:12,870 --> 00:12:17,430
to do something that you

00:12:14,520 --> 00:12:20,430
in 10 so you told it to take some action

00:12:17,430 --> 00:12:22,830
and it's taking that action but it's not

00:12:20,430 --> 00:12:25,800
doing it's not taking that action the

00:12:22,830 --> 00:12:28,110
result is not what you expect but

00:12:25,800 --> 00:12:31,339
usually it's not a fault of OVS you've

00:12:28,110 --> 00:12:33,720
told it what to do it's carrying it out

00:12:31,339 --> 00:12:37,620
forcus traders probably misconfigure

00:12:33,720 --> 00:12:39,120
things we see this a lot so things like

00:12:37,620 --> 00:12:40,470
adding ports and then forgetting to

00:12:39,120 --> 00:12:44,220
delete them because of race conditions

00:12:40,470 --> 00:12:45,660
internally or you know adding improper

00:12:44,220 --> 00:12:47,430
flow rules for the system that forward

00:12:45,660 --> 00:12:50,820
packets like kind of all over and create

00:12:47,430 --> 00:12:52,440
loops bad port parameters so setting

00:12:50,820 --> 00:12:54,959
things up setting queues up incorrectly

00:12:52,440 --> 00:12:57,450
or you know setting priorities

00:12:54,959 --> 00:13:01,170
incorrectly or we're finding hues to

00:12:57,450 --> 00:13:03,510
specific cpus incorrectly failing to

00:13:01,170 --> 00:13:06,540
restore flows after OVS restarts some of

00:13:03,510 --> 00:13:09,660
them don't don't detect that OBS has had

00:13:06,540 --> 00:13:12,089
a fault crashed and come back up and so

00:13:09,660 --> 00:13:16,589
then your system has no flows it's not

00:13:12,089 --> 00:13:20,600
gonna process anymore and and failure to

00:13:16,589 --> 00:13:20,600
observe false in oh yes

00:13:21,180 --> 00:13:26,760
so it's important to remember upstream

00:13:25,050 --> 00:13:28,920
is always available help everyone on

00:13:26,760 --> 00:13:31,770
over yes in the OBS community really

00:13:28,920 --> 00:13:35,010
does want the the ouvea software suite

00:13:31,770 --> 00:13:38,100
to work so go to open V switch org

00:13:35,010 --> 00:13:41,910
seriously not joking go sign up on the

00:13:38,100 --> 00:13:43,440
discuss in dev lists right now people

00:13:41,910 --> 00:13:44,640
already have their laptops out so you

00:13:43,440 --> 00:13:47,640
know and you can do it on your phone too

00:13:44,640 --> 00:13:50,250
it's pretty simple so I'm not kidding

00:13:47,640 --> 00:13:52,680
like it it's good to do there's a lot of

00:13:50,250 --> 00:13:53,500
good information there and people are

00:13:52,680 --> 00:13:56,700
very responsive

00:13:53,500 --> 00:13:56,700
[Music]

00:13:57,280 --> 00:14:02,080
so for the remaining part of the talk

00:13:59,590 --> 00:14:03,850
I'll try to like do some examples it's

00:14:02,080 --> 00:14:07,240
always good to have like a real test

00:14:03,850 --> 00:14:09,250
environment so I like teams Network

00:14:07,240 --> 00:14:10,930
namespaces and veep devices these

00:14:09,250 --> 00:14:14,200
devices actually work for both data path

00:14:10,930 --> 00:14:15,790
types pretty well they're simple to set

00:14:14,200 --> 00:14:20,980
up it's simple to set up network

00:14:15,790 --> 00:14:24,040
namespaces is like and maybe like 11

00:14:20,980 --> 00:14:26,260
commands or something to set up like to

00:14:24,040 --> 00:14:28,090
network namespaces connected through the

00:14:26,260 --> 00:14:30,280
devices that you can ping from one to

00:14:28,090 --> 00:14:33,370
the other you know back and forth and by

00:14:30,280 --> 00:14:35,230
default this this will work I mean like

00:14:33,370 --> 00:14:38,500
you can you can send packets back and

00:14:35,230 --> 00:14:40,500
forth another great environment where

00:14:38,500 --> 00:14:44,280
you can actually work with a real

00:14:40,500 --> 00:14:47,350
Orchestrator is OpenShift includes this

00:14:44,280 --> 00:14:51,010
doctrine docker cluster a kind of hack

00:14:47,350 --> 00:14:53,320
script that's really cool because if it

00:14:51,010 --> 00:14:55,120
does set up like open V switch it adds

00:14:53,320 --> 00:14:56,680
flows it allows you to start pods on

00:14:55,120 --> 00:15:00,250
your on your local machine and you can

00:14:56,680 --> 00:15:04,560
play around with it it's it's I actually

00:15:00,250 --> 00:15:04,560
like that quite a bit so

00:15:05,200 --> 00:15:10,089
all right a lot of times problems that

00:15:08,560 --> 00:15:13,000
get reported and can be solved by just

00:15:10,089 --> 00:15:16,779
looking at the logs okay

00:15:13,000 --> 00:15:19,570
these woody logs a lot

00:15:16,779 --> 00:15:22,660
it is configurable but VHD definitely

00:15:19,570 --> 00:15:24,310
logs any errors warnings you know all

00:15:22,660 --> 00:15:27,310
that and if you're using the net dev

00:15:24,310 --> 00:15:29,889
data path with DVD K ports all the DVD K

00:15:27,310 --> 00:15:33,070
log data is also in obvious V switch D

00:15:29,889 --> 00:15:35,920
log and I don't know how many times

00:15:33,070 --> 00:15:38,380
we've gotten like bugs reported we're in

00:15:35,920 --> 00:15:40,540
the log it actually says you know this

00:15:38,380 --> 00:15:44,769
port is not available for whatever

00:15:40,540 --> 00:15:47,740
reason and people like complain to us oh

00:15:44,769 --> 00:15:50,260
we we don't know what's going on like

00:15:47,740 --> 00:15:52,750
why OVS isn't working you know that's

00:15:50,260 --> 00:15:54,459
that's the that's the thing they say and

00:15:52,750 --> 00:15:56,470
I got in the log it actually tells you

00:15:54,459 --> 00:15:58,690
this port failed to ad and it tells you

00:15:56,470 --> 00:16:00,940
why you know the bio MMU is

00:15:58,690 --> 00:16:03,130
misconfigured or something else you can

00:16:00,940 --> 00:16:08,050
actually see right there you know what

00:16:03,130 --> 00:16:11,230
it what went wrong and go fix it a lot

00:16:08,050 --> 00:16:13,420
of people ignore this it could have

00:16:11,230 --> 00:16:15,960
answered simple why questions I mean

00:16:13,420 --> 00:16:18,700
really the logs are quite good

00:16:15,960 --> 00:16:21,940
[Music]

00:16:18,700 --> 00:16:21,940
sure anytime

00:16:25,320 --> 00:16:28,529
[Music]

00:16:37,360 --> 00:16:44,179
[Music]

00:16:48,790 --> 00:16:52,030
same one from the shirt you're wearing

00:16:49,990 --> 00:16:53,110
oh yeah yeah now that I'm halfway

00:16:52,030 --> 00:16:56,140
through my rambling they'll give me a

00:16:53,110 --> 00:16:57,940
mic um is there any thought on making

00:16:56,140 --> 00:16:59,470
that better or making it a little bit

00:16:57,940 --> 00:17:01,300
because especially with the different

00:16:59,470 --> 00:17:03,910
kinds of net devs and you know DP D K

00:17:01,300 --> 00:17:07,810
errors look different than regular using

00:17:03,910 --> 00:17:08,400
the standard deep if yeah so that's a

00:17:07,810 --> 00:17:11,020
good point

00:17:08,400 --> 00:17:13,270
one thing that's nice though with a lot

00:17:11,020 --> 00:17:15,520
in defense of the logs what I will say

00:17:13,270 --> 00:17:18,010
is anytime there's an error and actually

00:17:15,520 --> 00:17:20,949
you can just Brett it for that eerr or

00:17:18,010 --> 00:17:23,470
worn string I know what you're saying

00:17:20,949 --> 00:17:27,840
I agree sometimes it is difficult to

00:17:23,470 --> 00:17:30,700
understand the faults I'll get to that

00:17:27,840 --> 00:17:32,320
well not in the next slide but in a

00:17:30,700 --> 00:17:37,450
couple slides there there are some stuff

00:17:32,320 --> 00:17:39,460
I'll talk about yeah check your firmware

00:17:37,450 --> 00:17:42,330
check your kernel you know but make sure

00:17:39,460 --> 00:17:44,110
like the version numbers for firmwares

00:17:42,330 --> 00:17:45,810
the version number for the firmware

00:17:44,110 --> 00:17:48,910
appropriate to the software you're using

00:17:45,810 --> 00:17:51,700
we did actually have instances where

00:17:48,910 --> 00:17:54,400
like Knicks were sending up multiple

00:17:51,700 --> 00:17:57,520
packets right duplicate packets and it

00:17:54,400 --> 00:17:59,620
was being blamed on OBS and

00:17:57,520 --> 00:18:02,320
team hadn't upgraded their firmware in

00:17:59,620 --> 00:18:04,120
like two or three years and it was

00:18:02,320 --> 00:18:06,220
mismatched with the driver and have been

00:18:04,120 --> 00:18:07,690
the driver was actually thinking it was

00:18:06,220 --> 00:18:09,570
programming something to the Nick and

00:18:07,690 --> 00:18:11,620
instead it was telling the Nick to like

00:18:09,570 --> 00:18:16,240
duplicate the packet and forward it up

00:18:11,620 --> 00:18:18,850
in the queue so really it's important to

00:18:16,240 --> 00:18:22,090
make sure that the configurations are

00:18:18,850 --> 00:18:24,510
set right sometimes some offloads do

00:18:22,090 --> 00:18:28,390
cause problems for certain Network

00:18:24,510 --> 00:18:30,280
scenarios I know Andy just did a talk

00:18:28,390 --> 00:18:31,840
and he said oh people always just

00:18:30,280 --> 00:18:33,490
disable off flows and Here I am on stage

00:18:31,840 --> 00:18:35,530
like advocating yeah just disable off

00:18:33,490 --> 00:18:35,890
flows but sometimes they don't make

00:18:35,530 --> 00:18:40,360
sense

00:18:35,890 --> 00:18:43,300
so and sometimes you have hardware that

00:18:40,360 --> 00:18:45,340
does require additional work to get to

00:18:43,300 --> 00:18:46,510
get the kind of functionality that you

00:18:45,340 --> 00:18:48,730
want there may be additional kernel

00:18:46,510 --> 00:18:51,070
module parameters additional bios set up

00:18:48,730 --> 00:18:53,230
additional you know other things that

00:18:51,070 --> 00:18:58,960
have to be done for that hardware to

00:18:53,230 --> 00:19:01,540
work optimally or even at all okay so a

00:18:58,960 --> 00:19:04,390
little bit to answer your question or to

00:19:01,540 --> 00:19:06,610
go back to your login question so a lot

00:19:04,390 --> 00:19:09,880
of times when a port ism is configured

00:19:06,610 --> 00:19:11,740
it just shows up in OBS via scuttle show

00:19:09,880 --> 00:19:13,000
right so if you do an obvious via

00:19:11,740 --> 00:19:15,490
scuttle show and there's a port error

00:19:13,000 --> 00:19:17,950
and usually just shows up like right

00:19:15,490 --> 00:19:20,140
there you know in this case these ports

00:19:17,950 --> 00:19:22,000
are set up correctly but a lot of times

00:19:20,140 --> 00:19:23,920
it will say like if you add a port that

00:19:22,000 --> 00:19:25,750
doesn't exist it will save that before

00:19:23,920 --> 00:19:27,250
it's not found you know right there you

00:19:25,750 --> 00:19:28,660
could you could just see it so there's

00:19:27,250 --> 00:19:32,460
no need to grab the logs in that case

00:19:28,660 --> 00:19:32,460
although it will show up in the logs to

00:19:33,530 --> 00:19:38,400
now someone might ask oh well you know

00:19:37,020 --> 00:19:39,900
the ports not there can't you just write

00:19:38,400 --> 00:19:41,640
a coming up script it's actually a

00:19:39,900 --> 00:19:43,230
little bit difficult right you have to

00:19:41,640 --> 00:19:44,790
know what kind of port you're dealing

00:19:43,230 --> 00:19:50,220
with for instance vhosts use reports

00:19:44,790 --> 00:19:52,260
won't show up in the in the kernel IP

00:19:50,220 --> 00:19:53,460
let you know in the kernel like if you

00:19:52,260 --> 00:19:54,990
do a net length query to get all the

00:19:53,460 --> 00:19:56,940
interfaces on the system you won't see

00:19:54,990 --> 00:19:58,740
videos use reports so you have to know

00:19:56,940 --> 00:20:00,390
like which ports to whitelist rule CD

00:19:58,740 --> 00:20:02,130
PDK ports so you might assume that

00:20:00,390 --> 00:20:04,290
they're that they're non-existent if you

00:20:02,130 --> 00:20:06,990
do like a simple night match and you

00:20:04,290 --> 00:20:08,340
might remove a working config so a clean

00:20:06,990 --> 00:20:10,470
up script is really difficult

00:20:08,340 --> 00:20:12,090
it's I like to say it's best for the

00:20:10,470 --> 00:20:14,280
orchestrator to clean up the ports and

00:20:12,090 --> 00:20:17,040
ads you know I like that because the

00:20:14,280 --> 00:20:21,570
orchestrator is supposed to no OVS

00:20:17,040 --> 00:20:25,710
really can't and then for the negative

00:20:21,570 --> 00:20:28,170
data path which really only applies to

00:20:25,710 --> 00:20:33,870
OpenStack deployments I don't think

00:20:28,170 --> 00:20:35,790
OpenShift is using DBK at all but DVD

00:20:33,870 --> 00:20:38,190
hey ports do require extra configuration

00:20:35,790 --> 00:20:40,110
to get optimal performance or even

00:20:38,190 --> 00:20:41,820
sometimes to get performance at all so

00:20:40,110 --> 00:20:44,730
you need to check your hardware topology

00:20:41,820 --> 00:20:47,160
make sure like your Numa notes the

00:20:44,730 --> 00:20:48,690
hardware is correctly matched and the

00:20:47,160 --> 00:20:50,880
feet then the VMS are correctly spawned

00:20:48,690 --> 00:20:54,330
on the right Numa node to get optimal

00:20:50,880 --> 00:20:56,580
performance are your kernel parameters

00:20:54,330 --> 00:21:00,440
or kundi parameters set up correctly use

00:20:56,580 --> 00:21:02,950
ISIL CPUs did you turn off the RC you

00:21:00,440 --> 00:21:04,540
processing did you do

00:21:02,950 --> 00:21:07,840
you know like did you allocate in a few

00:21:04,540 --> 00:21:10,510
pages are your VMs you know on the right

00:21:07,840 --> 00:21:13,620
note or even you know accessing those

00:21:10,510 --> 00:21:16,510
huge pages is that configuration right

00:21:13,620 --> 00:21:19,780
there's a lot of additional stuff on top

00:21:16,510 --> 00:21:22,270
of open V switch for that to work and

00:21:19,780 --> 00:21:23,590
and finally you should know when you're

00:21:22,270 --> 00:21:27,760
debugging this stuff what your network

00:21:23,590 --> 00:21:30,250
topology is supposed to be so what was

00:21:27,760 --> 00:21:31,870
the a lot of projects actually set up

00:21:30,250 --> 00:21:33,100
their their network topologies

00:21:31,870 --> 00:21:35,350
differently openshift

00:21:33,100 --> 00:21:37,570
wants to configure OVS differently than

00:21:35,350 --> 00:21:40,330
OpenStack and and probably different

00:21:37,570 --> 00:21:43,929
than Rev and probably different than you

00:21:40,330 --> 00:21:47,740
know some other project that's that's

00:21:43,929 --> 00:21:50,799
using Sdn so and and controls open V

00:21:47,740 --> 00:21:52,600
switch so I say like all bridges are not

00:21:50,799 --> 00:21:55,600
created equally

00:21:52,600 --> 00:21:57,460
a lot of times developers make

00:21:55,600 --> 00:21:59,950
assumptions about how packets should

00:21:57,460 --> 00:22:02,980
flow when they do like when they add an

00:21:59,950 --> 00:22:05,620
o vs bridge but if you read that blog

00:22:02,980 --> 00:22:07,540
which I wrote so it's a plug for me but

00:22:05,620 --> 00:22:10,150
if you read that blog it actually goes

00:22:07,540 --> 00:22:12,880
over that really the OVS kernel data

00:22:10,150 --> 00:22:16,000
path of bridge is kind of a fiction on

00:22:12,880 --> 00:22:20,710
top of a bunch of flow rules it's it's

00:22:16,000 --> 00:22:23,980
not really it doesn't exist as a as like

00:22:20,710 --> 00:22:25,840
a thing in in the way of that packet so

00:22:23,980 --> 00:22:27,900
it's it's not even a bump in a wire or

00:22:25,840 --> 00:22:27,900
something

00:22:28,010 --> 00:22:31,880
openshift and OpenStack you can actually

00:22:30,180 --> 00:22:38,190
read how they like to set up their

00:22:31,880 --> 00:22:39,510
network at these two URLs so there's

00:22:38,190 --> 00:22:41,130
there's a lot of good information there

00:22:39,510 --> 00:22:42,450
you'll you'll find out about like what

00:22:41,130 --> 00:22:44,250
gr and VXR

00:22:42,450 --> 00:22:47,100
you know all those different bridges do

00:22:44,250 --> 00:22:49,180
and and for openshift it's radically

00:22:47,100 --> 00:22:52,260
different

00:22:49,180 --> 00:22:54,630
[Music]

00:22:52,260 --> 00:22:55,860
does your system you know when you're

00:22:54,630 --> 00:22:57,990
using OpenStack when you're using open

00:22:55,860 --> 00:23:01,200
ship this is true does your system use

00:22:57,990 --> 00:23:03,090
the kernel IP stack the kernel

00:23:01,200 --> 00:23:05,519
networking stack in addition to open V

00:23:03,090 --> 00:23:06,870
switch Roman ship that's true and they

00:23:05,519 --> 00:23:08,850
have a ton device and they forward

00:23:06,870 --> 00:23:11,970
packets through that to provide IP

00:23:08,850 --> 00:23:14,100
tables hooks so OBS doesn't directly use

00:23:11,970 --> 00:23:16,769
the routing table obvious I mean it can

00:23:14,100 --> 00:23:19,500
and in some cases it will but but

00:23:16,769 --> 00:23:21,600
generally speaking it doesn't obvious

00:23:19,500 --> 00:23:23,970
doesn't Usenet filter it uses like a

00:23:21,600 --> 00:23:29,070
contract and only if you've told it to

00:23:23,970 --> 00:23:31,169
so it's not really like it doesn't I

00:23:29,070 --> 00:23:33,450
mean it's integrated with the kernel but

00:23:31,169 --> 00:23:37,789
it doesn't use those parts of the kernel

00:23:33,450 --> 00:23:37,789
you haven't asked it to use question

00:23:44,130 --> 00:23:50,220
or how would you map these rules that

00:23:47,070 --> 00:23:51,390
you've set up a way for the user rules

00:23:50,220 --> 00:23:53,160
are different if you're asking about

00:23:51,390 --> 00:23:55,590
like topology and I would say use

00:23:53,160 --> 00:23:59,190
Blatnick config or I think there's

00:23:55,590 --> 00:24:01,679
actually another tool called skydive and

00:23:59,190 --> 00:24:04,770
both of those will actually like detect

00:24:01,679 --> 00:24:06,840
what ports you're using they'll they'll

00:24:04,770 --> 00:24:09,780
kind of give you a graph like if your

00:24:06,840 --> 00:24:12,660
new plot graph that shows how the

00:24:09,780 --> 00:24:13,880
interfaces are kind of interconnected it

00:24:12,660 --> 00:24:17,429
won't show you the flow rules though

00:24:13,880 --> 00:24:20,820
maybe skydive will but but I will get to

00:24:17,429 --> 00:24:22,710
how to debug those flow rules the old

00:24:20,820 --> 00:24:24,270
things like BGP and all that stuff did

00:24:22,710 --> 00:24:25,650
that still exist in this world or is

00:24:24,270 --> 00:24:28,980
that just a different world you're not

00:24:25,650 --> 00:24:30,330
using routing tables and so OBS operates

00:24:28,980 --> 00:24:32,250
that kind of a lower level right it's

00:24:30,330 --> 00:24:34,559
just move packets based on matching

00:24:32,250 --> 00:24:37,650
these fields from one place to another

00:24:34,559 --> 00:24:40,740
so all that routing decision all that

00:24:37,650 --> 00:24:43,340
BGP OSPF all that that's done it kind of

00:24:40,740 --> 00:24:43,340
a higher layer

00:24:45,910 --> 00:24:51,480
[Music]

00:24:48,200 --> 00:24:53,330
okay we can follow up

00:24:51,480 --> 00:24:56,509
[Music]

00:24:53,330 --> 00:24:58,100
so sometimes when the setup is wrong you

00:24:56,509 --> 00:25:00,440
can actually see how it was how it was

00:24:58,100 --> 00:25:02,389
made wrong by using the OBS DB tool so

00:25:00,440 --> 00:25:05,210
we do this OVS DB tools show log and

00:25:02,389 --> 00:25:08,029
point it at the database it will give

00:25:05,210 --> 00:25:10,279
you a rundown of the transactions that

00:25:08,029 --> 00:25:12,169
happened and which process executed

00:25:10,279 --> 00:25:17,149
those transactions so it's quite helpful

00:25:12,169 --> 00:25:19,639
if something else set up incorrectly you

00:25:17,149 --> 00:25:23,330
can also grab some stats this is like

00:25:19,639 --> 00:25:27,200
for the for the net dev data path so you

00:25:23,330 --> 00:25:29,239
can see like running statistics for how

00:25:27,200 --> 00:25:32,749
the how the forwarding engines are

00:25:29,239 --> 00:25:36,080
working kernel has other ways and and

00:25:32,749 --> 00:25:37,999
you can you can pull some interface you

00:25:36,080 --> 00:25:40,730
can pull interface statistics when the

00:25:37,999 --> 00:25:42,350
port is non DVD K for it like if it's a

00:25:40,730 --> 00:25:43,970
kernel port you can pull those interface

00:25:42,350 --> 00:25:48,810
statistics using your standard you know

00:25:43,970 --> 00:25:50,820
IP and it convey again etool

00:25:48,810 --> 00:25:53,280
[Music]

00:25:50,820 --> 00:25:55,860
so sometimes packet goes other

00:25:53,280 --> 00:25:57,750
face we have no idea why right so we do

00:25:55,860 --> 00:25:59,550
something like dumb flows right in this

00:25:57,750 --> 00:26:01,680
case it's really simple all right oh

00:25:59,550 --> 00:26:04,830
okay there's one flow it's normal action

00:26:01,680 --> 00:26:10,680
okay so it's behaving kind of like you

00:26:04,830 --> 00:26:13,290
know a switch and a lot of times you can

00:26:10,680 --> 00:26:15,660
just you know if your if your flow rules

00:26:13,290 --> 00:26:18,300
are small you can just watch like which

00:26:15,660 --> 00:26:19,820
flow has these send packets you can see

00:26:18,300 --> 00:26:22,290
like which end packets are increasing

00:26:19,820 --> 00:26:24,540
that works great if you have a static

00:26:22,290 --> 00:26:27,180
setup there's no data going through and

00:26:24,540 --> 00:26:31,440
you can push the packets it doesn't work

00:26:27,180 --> 00:26:33,390
well on heavily loaded systems and a lot

00:26:31,440 --> 00:26:35,960
of times you'll be reading through reams

00:26:33,390 --> 00:26:38,400
of flows you can do something crazy like

00:26:35,960 --> 00:26:40,560
I've done before which is like you can

00:26:38,400 --> 00:26:44,970
dump the flows and you diff and like try

00:26:40,560 --> 00:26:47,100
to compare them but that's the see and

00:26:44,970 --> 00:26:49,290
kernel and all that programmer at me

00:26:47,100 --> 00:26:52,380
coming out like that's not really people

00:26:49,290 --> 00:26:53,790
don't like to do that and I like to

00:26:52,380 --> 00:26:55,560
equate it to you know finding the Higgs

00:26:53,790 --> 00:26:57,120
boson the Higgs boson right like it's a

00:26:55,560 --> 00:26:59,070
whole bunch of stuff is blasted through

00:26:57,120 --> 00:27:00,690
this and you're kind of just sifting

00:26:59,070 --> 00:27:03,120
through all this data to figure out

00:27:00,690 --> 00:27:05,760
what's what's going on and what

00:27:03,120 --> 00:27:08,670
complicates it or makes it worse is the

00:27:05,760 --> 00:27:10,650
flows as they look in the kernel data

00:27:08,670 --> 00:27:13,710
path are completely different than what

00:27:10,650 --> 00:27:15,660
the open flow rules look like so because

00:27:13,710 --> 00:27:17,160
again as I said the kernel data path for

00:27:15,660 --> 00:27:19,230
instance it's just a flow key match

00:27:17,160 --> 00:27:21,630
right it's just it's just open these

00:27:19,230 --> 00:27:25,380
specific things match this is all you

00:27:21,630 --> 00:27:29,190
have to do there's no processing whereas

00:27:25,380 --> 00:27:32,280
like in the user space side it will

00:27:29,190 --> 00:27:33,899
evaluate these rules so it's a bit more

00:27:32,280 --> 00:27:36,580
complicated

00:27:33,899 --> 00:27:38,440
but maybe there's a better way so we'll

00:27:36,580 --> 00:27:41,130
take a quick detour right

00:27:38,440 --> 00:27:43,809
what's an SDN system it's programmable

00:27:41,130 --> 00:27:46,090
it has instructions a pipeline you know

00:27:43,809 --> 00:27:49,450
it's like kind of a processing chip but

00:27:46,090 --> 00:27:52,630
it's specific for packets and that means

00:27:49,450 --> 00:27:55,659
we do have some cool debugging tools so

00:27:52,630 --> 00:27:57,370
the one that I would reach for to answer

00:27:55,659 --> 00:28:01,510
your question about tracing these flows

00:27:57,370 --> 00:28:03,279
is a proto trace you give it a

00:28:01,510 --> 00:28:07,139
description of a packet or you can give

00:28:03,279 --> 00:28:10,500
it an actual packet dump and it will

00:28:07,139 --> 00:28:15,039
show you how it evaluated those rules

00:28:10,500 --> 00:28:16,870
right so from the example I made a

00:28:15,039 --> 00:28:18,760
change to the flow rules right from that

00:28:16,870 --> 00:28:20,769
demo example I showed I made a change to

00:28:18,760 --> 00:28:25,149
the to the flow rules and you can see

00:28:20,769 --> 00:28:28,030
here an art ping works but an ICMP ping

00:28:25,149 --> 00:28:30,970
does not

00:28:28,030 --> 00:28:34,150
so if I use all four traits and just say

00:28:30,970 --> 00:28:37,870
okay show me Armour it actually shows

00:28:34,150 --> 00:28:41,020
that okay it matched a rule our import

00:28:37,870 --> 00:28:47,860
one let that priority the action is

00:28:41,020 --> 00:28:50,680
output to to ID but if we trace ICMP we

00:28:47,860 --> 00:28:52,900
see that there were no rules matching so

00:28:50,680 --> 00:28:54,730
clearly in my flow rule somewhere i i

00:28:52,900 --> 00:28:57,160
have accounted for ARB

00:28:54,730 --> 00:28:58,930
I might have accounted for TCP I might

00:28:57,160 --> 00:29:03,370
have even accounted for a UDP or SCTP

00:28:58,930 --> 00:29:06,330
but I forgot ICMP so we can go through

00:29:03,370 --> 00:29:06,330
and debug

00:29:06,750 --> 00:29:09,380
how much

00:29:09,950 --> 00:29:15,410
so yeah as far as getting packet data

00:29:12,950 --> 00:29:20,000
goes alright and sometimes that's that's

00:29:15,410 --> 00:29:22,790
what people reach to so you could just

00:29:20,000 --> 00:29:24,710
reach to TCP dump TCP dump works great

00:29:22,790 --> 00:29:26,390
if you have a kernel interface it

00:29:24,710 --> 00:29:29,120
doesn't work at all for V host user it

00:29:26,390 --> 00:29:32,870
doesn't work for DP GK ports but OBS

00:29:29,120 --> 00:29:35,030
includes OBS TCP dump which sets up a

00:29:32,870 --> 00:29:37,540
mirror and that works internally for OBS

00:29:35,030 --> 00:29:42,290
for all kinds of ports Colonel ports

00:29:37,540 --> 00:29:44,420
VOCs reports all of that and then it has

00:29:42,290 --> 00:29:46,220
this other cool gadget called OBS TCP on

00:29:44,420 --> 00:29:48,230
them so remember I said Oh proto trace

00:29:46,220 --> 00:29:51,320
can take a packet bytes you can actually

00:29:48,230 --> 00:29:54,140
pipe TCP dump into TCP on them and you

00:29:51,320 --> 00:29:58,490
will get those bytes how and you can

00:29:54,140 --> 00:30:00,210
then feed those to an or proto trace so

00:29:58,490 --> 00:30:03,289
in conclusion

00:30:00,210 --> 00:30:05,429
sorry for concluding so quickly but

00:30:03,289 --> 00:30:07,080
obviously bug really shouldn't feel

00:30:05,429 --> 00:30:10,169
daunting there's a ton of documentation

00:30:07,080 --> 00:30:12,419
I know I've pushed a lot of URLs up

00:30:10,169 --> 00:30:14,039
there but there's a there's a ton of

00:30:12,419 --> 00:30:16,019
stuff on the web to read obvious

00:30:14,039 --> 00:30:19,019
documentation is really top-notch you

00:30:16,019 --> 00:30:20,279
can go to open V switch org you should

00:30:19,019 --> 00:30:22,619
already be there from signing up for the

00:30:20,279 --> 00:30:24,809
mailing list so you can just click over

00:30:22,619 --> 00:30:28,409
and actually read through some of the

00:30:24,809 --> 00:30:30,179
docs oh yes is almost always doing

00:30:28,409 --> 00:30:31,769
exactly what it Saks asked to do

00:30:30,179 --> 00:30:35,820
that's software sometimes it has bugs

00:30:31,769 --> 00:30:38,700
but usually what you're seeing is not a

00:30:35,820 --> 00:30:44,490
bug in OVS it's a bug in what you've

00:30:38,700 --> 00:30:47,249
programmed into OBS finally those are

00:30:44,490 --> 00:30:50,960
some of my email addresses I'll see all

00:30:47,249 --> 00:30:56,330
the mailing lists questions

00:30:50,960 --> 00:30:58,820
[Music]

00:30:56,330 --> 00:31:00,710
so go back did you go back to slides for

00:30:58,820 --> 00:31:03,440
me if you have a backward okay so the

00:31:00,710 --> 00:31:06,200
OBS TCP undone can you act you can

00:31:03,440 --> 00:31:09,380
actually take the byte stream from that

00:31:06,200 --> 00:31:11,300
and pass it to the command I think in

00:31:09,380 --> 00:31:13,190
two or three slides previous yep and

00:31:11,300 --> 00:31:14,600
it'll show you in addition because I in

00:31:13,190 --> 00:31:16,700
that particular example you had a really

00:31:14,600 --> 00:31:19,670
nice pretty print like import this

00:31:16,700 --> 00:31:23,930
version type I type of ICMP I think it's

00:31:19,670 --> 00:31:25,400
 yeah just a raw stream yes you

00:31:23,930 --> 00:31:27,320
can you can pass the string bites I

00:31:25,400 --> 00:31:29,120
forget the exact syntax but it but it

00:31:27,320 --> 00:31:32,480
does actually take it that's cool that's

00:31:29,120 --> 00:31:35,300
really cool yeah so I tried to cook up

00:31:32,480 --> 00:31:40,670
the XR just pipeline to make it happen

00:31:35,300 --> 00:31:42,710
but I'm not that cool yeah just a simple

00:31:40,670 --> 00:31:44,210
question on the logging thing do on

00:31:42,710 --> 00:31:47,600
system D systems do you log to the

00:31:44,210 --> 00:31:49,580
journal by default on system D systems

00:31:47,600 --> 00:31:52,760
do you log to the journal like as well

00:31:49,580 --> 00:31:55,730
as R instead of the log file yes I look

00:31:52,760 --> 00:31:58,370
for logs yeah so it's true right now we

00:31:55,730 --> 00:32:00,470
aren't logging to the system D Journal

00:31:58,370 --> 00:32:02,150
that's probably a good enhancement to

00:32:00,470 --> 00:32:04,550
make because I think a lot of tools do

00:32:02,150 --> 00:32:08,340
we make use of that journal now so yeah

00:32:04,550 --> 00:32:12,500
propose it on the mailing list maybe

00:32:08,340 --> 00:32:15,520
[Music]

00:32:12,500 --> 00:32:15,520
so you had

00:32:15,880 --> 00:32:23,030
[Music]

00:32:19,730 --> 00:32:29,360
you said that then when a packet comes

00:32:23,030 --> 00:32:33,590
down or up flow and then the the result

00:32:29,360 --> 00:32:36,770
of that forwarding the there's a update

00:32:33,590 --> 00:32:39,860
on the database yeah yes so is that the

00:32:36,770 --> 00:32:44,840
is it is that from the get-go or there

00:32:39,860 --> 00:32:47,900
is a configuration for all the powering

00:32:44,840 --> 00:32:50,630
than ahead of time is it always learned

00:32:47,900 --> 00:32:57,890
or is it yeah it's always learned so if

00:32:50,630 --> 00:33:01,310
you go back if I go back to here so see

00:32:57,890 --> 00:33:04,520
this this blog post if you actually go

00:33:01,310 --> 00:33:07,970
there so that talks about programming

00:33:04,520 --> 00:33:10,130
the kernel date and kernel like the the

00:33:07,970 --> 00:33:12,230
open V switch module in kernel it does

00:33:10,130 --> 00:33:14,660
not contain flows by default so by

00:33:12,230 --> 00:33:16,520
default a packet comes in and it doesn't

00:33:14,660 --> 00:33:18,080
match anything and then it's pushed to

00:33:16,520 --> 00:33:21,320
it you know it's pushed to an up call it

00:33:18,080 --> 00:33:24,850
push to alcohol so and processed and

00:33:21,320 --> 00:33:31,010
then that table is updated

00:33:24,850 --> 00:33:33,110
[Music]

00:33:31,010 --> 00:33:34,660
I think I'm out of time I don't think

00:33:33,110 --> 00:33:37,990
this

00:33:34,660 --> 00:33:40,270
No good talk Thanks so to answer your

00:33:37,990 --> 00:33:43,270
question what Aaron mentioned I think he

00:33:40,270 --> 00:33:45,520
was rushing towards the slides so on the

00:33:43,270 --> 00:33:47,110
high level there is I'm gonna do a

00:33:45,520 --> 00:33:49,780
shameless plug there are two other

00:33:47,110 --> 00:33:52,570
utilities plot net config which gives a

00:33:49,780 --> 00:33:54,669
static x-ray of the system within the

00:33:52,570 --> 00:33:56,980
server and another project called

00:33:54,669 --> 00:33:58,270
skydive that is exactly what Aaron

00:33:56,980 --> 00:34:03,270
mentioned but I just wanted to mention

00:33:58,270 --> 00:34:06,400
again so those correct

00:34:03,270 --> 00:34:06,400
[Music]

00:34:07,360 --> 00:34:11,440
yep you can get a man we can talk

00:34:09,700 --> 00:34:13,510
offline also but there are other

00:34:11,440 --> 00:34:14,860
utilities above and beyond this this was

00:34:13,510 --> 00:34:17,710
at a lower level but there are higher

00:34:14,860 --> 00:34:21,810
level Maps sort of network operating

00:34:17,710 --> 00:34:26,250
system all of that stuff available yes

00:34:21,810 --> 00:34:26,250
yep in addition yeah

00:34:31,829 --> 00:34:36,339
Thank You Aaron

00:34:33,820 --> 00:34:38,740
I just wanted to highlight all that

00:34:36,339 --> 00:34:40,510
there will be a party tonight at 7:00

00:34:38,740 --> 00:34:42,700
p.m. at the skin lounge

00:34:40,510 --> 00:34:44,740
so please do collect your tickets at the

00:34:42,700 --> 00:34:48,639
registration desk if you haven't already

00:34:44,740 --> 00:34:50,320
and if in case you don't want a ten and

00:34:48,639 --> 00:34:52,409
you change your mind please do give it

00:34:50,320 --> 00:34:56,139
back to us because we just have 200

00:34:52,409 --> 00:34:59,190
seats for that so but we do hope to see

00:34:56,139 --> 00:34:59,190
you all there thank you

00:35:01,740 --> 00:35:07,230
so what's the protocol on changing and

00:35:03,930 --> 00:35:09,590
laptops okay this does not reverse still

00:35:07,230 --> 00:35:12,720
we can like

00:35:09,590 --> 00:35:15,540
[Music]

00:35:12,720 --> 00:35:17,300
eighty-two years that only HD

00:35:15,540 --> 00:35:19,109
[Music]

00:35:17,300 --> 00:35:21,979
Miche

00:35:19,109 --> 00:35:21,979
what you have

00:35:28,160 --> 00:35:33,239
since I've got a minute

00:35:30,060 --> 00:35:33,239
[Music]

00:35:34,240 --> 00:35:44,040
and then is there a dongle for yes

00:35:36,940 --> 00:35:47,540
[Music]

00:35:44,040 --> 00:35:50,530
openshift for operators

00:35:47,540 --> 00:35:53,420
[Music]

00:35:50,530 --> 00:36:06,499
yes

00:35:53,420 --> 00:36:06,499
[Music]

00:36:09,280 --> 00:36:14,230
yeah I'm just trying to get

00:36:11,360 --> 00:36:14,230
to set up

00:36:16,500 --> 00:36:19,490
I'll be right here

00:36:24,750 --> 00:36:36,550
no yeah good are you doing this

00:36:29,150 --> 00:36:36,550
[Music]

00:36:36,869 --> 00:36:44,800
check-check

00:36:37,860 --> 00:36:44,800
[Music]

00:36:45,230 --> 00:36:48,790

YouTube URL: https://www.youtube.com/watch?v=5OFc5CaQr0E


