Title: 3 Pitfalls Everyone Ignores with Microservices
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speaker: Eric D. Schabell

The daily hype is all around you. Microservices are a necessary step along the path to integration for a digitally successful future for your organization. The choices you've got to make don't preclude the daily work of developing amazing applications. From containers, cloud, multicloud, and beyond, microservices are the core infrastructure ensuring your organization's flexibility in the digital world. Join us for an hour of power, where real life developer experiences are used to highlight the three top lessons we're all learning as we transition our integration infrastructure into modern day microservices.
Captions: 
	00:00:02,610 --> 00:00:05,729
looking a fireside chat instead of like

00:00:04,500 --> 00:00:07,290
a regular presentation but we're

00:00:05,729 --> 00:00:09,870
recording this so I'll go ahead and like

00:00:07,290 --> 00:00:11,850
do this like a presentation my name is

00:00:09,870 --> 00:00:15,000
Eric C Bell I work for Red Hat for more

00:00:11,850 --> 00:00:16,949
than 10 years now kind of an interesting

00:00:15,000 --> 00:00:19,140
title I have there's a second person on

00:00:16,949 --> 00:00:20,909
this presentation that I put up there

00:00:19,140 --> 00:00:22,980
it's a very good friend of mine that

00:00:20,909 --> 00:00:25,270
I've worked with in the Netherlands it's

00:00:22,980 --> 00:00:28,310
where I'm from

00:00:25,270 --> 00:00:29,870
he spends a lot of time as a Solutions

00:00:28,310 --> 00:00:32,450
Architect talking to customers about all

00:00:29,870 --> 00:00:34,520
kinds of interesting stuff and about two

00:00:32,450 --> 00:00:38,300
years ago we came up with this pitfalls

00:00:34,520 --> 00:00:40,520
kind of theme talking about what

00:00:38,300 --> 00:00:43,059
customers what partners what people are

00:00:40,520 --> 00:00:46,480
running into in various aspects of

00:00:43,059 --> 00:00:48,680
product development software development

00:00:46,480 --> 00:00:51,050
digital transformation all this kind of

00:00:48,680 --> 00:00:54,530
stuff right a lot of buzzwords involved

00:00:51,050 --> 00:00:56,989
we did a talk a couple of years ago at

00:00:54,530 --> 00:01:00,290
Red Hat Summit about three pitfalls of

00:00:56,989 --> 00:01:01,850
hybrid multi clouds and people got so

00:01:00,290 --> 00:01:03,860
excited about that it was voted like top

00:01:01,850 --> 00:01:06,290
10% or something in that conference it

00:01:03,860 --> 00:01:08,150
was kind of shocking to us because it

00:01:06,290 --> 00:01:10,130
all started with a phone call between

00:01:08,150 --> 00:01:11,510
him and me where he's complaining about

00:01:10,130 --> 00:01:13,610
how customers keep making the same

00:01:11,510 --> 00:01:14,750
mistakes all the time you know I just

00:01:13,610 --> 00:01:16,700
ran into another one that's doing this

00:01:14,750 --> 00:01:19,100
again and this three pitfalls happened

00:01:16,700 --> 00:01:23,530
the same way a year ago we started

00:01:19,100 --> 00:01:26,090
talking about it and we took this

00:01:23,530 --> 00:01:28,729
for our way

00:01:26,090 --> 00:01:31,840
do forehand

00:01:28,729 --> 00:01:31,840
it's going to do anything

00:01:36,560 --> 00:01:42,280
so we did this at the Red Hat summit in

00:01:39,789 --> 00:01:43,630
Boston this year and what we did if you

00:01:42,280 --> 00:01:44,710
look really closely it's kind of hard to

00:01:43,630 --> 00:01:46,000
see but at the top that we put a

00:01:44,710 --> 00:01:47,409
whiteboard in front of the door so when

00:01:46,000 --> 00:01:48,520
you came in and we divided we had two

00:01:47,409 --> 00:01:51,070
arrows we said if you're doing

00:01:48,520 --> 00:01:52,840
micro-services sit on this side and if

00:01:51,070 --> 00:01:54,219
you're thinking about it or just

00:01:52,840 --> 00:01:55,659
interested in it or just here because

00:01:54,219 --> 00:01:57,789
you don't know what's going on sit over

00:01:55,659 --> 00:01:59,380
here and this is right at the beginning

00:01:57,789 --> 00:02:01,990
but you notice really quickly it's about

00:01:59,380 --> 00:02:04,360
50/50 isn't it and it was completely

00:02:01,990 --> 00:02:06,069
full and it was 50/50 and the way

00:02:04,360 --> 00:02:07,600
they're positioned in the room we got

00:02:06,069 --> 00:02:09,640
sort of like this thing that one's

00:02:07,600 --> 00:02:12,010
talking to the other and we did this a

00:02:09,640 --> 00:02:14,590
little bit as a discussion and we did

00:02:12,010 --> 00:02:17,170
way more than just three we put up these

00:02:14,590 --> 00:02:18,810
opinions and like controversial

00:02:17,170 --> 00:02:21,220
statements are things that people think

00:02:18,810 --> 00:02:23,480
have to do with these microservices and

00:02:21,220 --> 00:02:24,980
we would let them talk about it

00:02:23,480 --> 00:02:26,239
and it was really kind of funny he was

00:02:24,980 --> 00:02:29,300
at one side of the room and I at the

00:02:26,239 --> 00:02:31,819
other and you'd see the conversation

00:02:29,300 --> 00:02:33,230
being taken away from us and they

00:02:31,819 --> 00:02:35,980
started arguing about stuff back and

00:02:33,230 --> 00:02:35,980
forth across this

00:02:37,790 --> 00:02:42,769
so what I did is we took notes during

00:02:40,190 --> 00:02:45,590
this talk and I picked out three for

00:02:42,769 --> 00:02:49,340
this presentation and this is the first

00:02:45,590 --> 00:02:51,970
one how many people in here are

00:02:49,340 --> 00:02:51,970
developers

00:02:53,810 --> 00:03:00,870
that everybody

00:02:55,629 --> 00:03:06,879
looks like it who here's an architect's

00:03:00,870 --> 00:03:09,900
one okay who here is doing

00:03:06,879 --> 00:03:09,900
micro-services right now

00:03:11,410 --> 00:03:20,400
for who here has never touched them

00:03:15,629 --> 00:03:21,900
no idea what I'm talking about okay how

00:03:20,400 --> 00:03:24,000
many people here have done services Web

00:03:21,900 --> 00:03:25,500
Services rest services whatever services

00:03:24,000 --> 00:03:32,160
you have a concept of what a service is

00:03:25,500 --> 00:03:33,720
right how many people have an actual job

00:03:32,160 --> 00:03:36,600
and I'm just saying that in a funny way

00:03:33,720 --> 00:03:38,070
who here's a student so we got one

00:03:36,600 --> 00:03:39,240
student okay that was a little bit of my

00:03:38,070 --> 00:03:41,610
concern about how many students were

00:03:39,240 --> 00:03:44,310
going to show up to this because one of

00:03:41,610 --> 00:03:45,450
the things about working in an

00:03:44,310 --> 00:03:47,250
organization you realize that the

00:03:45,450 --> 00:03:50,900
complexities versus what your program in

00:03:47,250 --> 00:03:52,580
the university are vastly different

00:03:50,900 --> 00:03:54,620
I remember my very first job that

00:03:52,580 --> 00:03:55,849
committed here right this web service

00:03:54,620 --> 00:03:58,280
that's no problem

00:03:55,849 --> 00:03:59,870
writing a web service on your laptop

00:03:58,280 --> 00:04:01,730
versus writing a web service in an

00:03:59,870 --> 00:04:05,209
organization is a whole different ball

00:04:01,730 --> 00:04:07,040
of wax how many people here work in an

00:04:05,209 --> 00:04:09,110
organization and we use kind of a

00:04:07,040 --> 00:04:11,480
buzzword he kind of thing here saying

00:04:09,110 --> 00:04:14,560
traditionally siloed organization so

00:04:11,480 --> 00:04:16,910
here who here works on applications or

00:04:14,560 --> 00:04:18,919
multiple applications in the sense of

00:04:16,910 --> 00:04:21,410
there's a deployment cycle it takes two

00:04:18,919 --> 00:04:22,900
three four six six months to deploy

00:04:21,410 --> 00:04:25,880
something all the way to production

00:04:22,900 --> 00:04:28,760
maintenance maintenance cycles a couple

00:04:25,880 --> 00:04:31,190
times a year maybe once a year who here

00:04:28,760 --> 00:04:33,820
works on services that are in some kind

00:04:31,190 --> 00:04:33,820
of service layer

00:04:35,900 --> 00:04:41,460
so everybody's just working our web apps

00:04:38,500 --> 00:04:44,370
web front-ends

00:04:41,460 --> 00:04:45,720
okay traditional side load stuff has to

00:04:44,370 --> 00:04:47,100
do with a development team and maybe

00:04:45,720 --> 00:04:48,810
you've seen this before where you have

00:04:47,100 --> 00:04:50,220
requirements and you have architects

00:04:48,810 --> 00:04:52,350
that bring stuff you have business users

00:04:50,220 --> 00:04:53,430
that might be voicing some opinions and

00:04:52,350 --> 00:04:55,260
you're all sitting around you're

00:04:53,430 --> 00:04:56,580
planning out your your development cycle

00:04:55,260 --> 00:04:58,020
and you're doing your work and you're

00:04:56,580 --> 00:04:59,790
releasing these various things you check

00:04:58,020 --> 00:05:02,610
them out boxes hopefully like GT

00:04:59,790 --> 00:05:06,600
reissues or whatever it is that you're

00:05:02,610 --> 00:05:08,670
working towards a release cycle then you

00:05:06,600 --> 00:05:11,580
make a step towards microservices and

00:05:08,670 --> 00:05:15,690
for the guys here or the gals here that

00:05:11,580 --> 00:05:17,220
have done micro-services does this sound

00:05:15,690 --> 00:05:18,810
anything like what happened when you

00:05:17,220 --> 00:05:20,100
guys jumped into micro services and

00:05:18,810 --> 00:05:21,660
thought wow this is really great we're

00:05:20,100 --> 00:05:25,250
gonna make a bunch of microservices and

00:05:21,660 --> 00:05:27,690
off we go did your organization change

00:05:25,250 --> 00:05:29,940
does anybody have anything that they

00:05:27,690 --> 00:05:31,500
could share with that

00:05:29,940 --> 00:05:33,710
so you don't get to sleep in this talk

00:05:31,500 --> 00:05:33,710
today

00:05:34,080 --> 00:05:38,250
if anybody wants to say anything but

00:05:35,990 --> 00:05:39,419
what we find that what we see a lot of

00:05:38,250 --> 00:05:41,490
is people say okay we're gonna do

00:05:39,419 --> 00:05:42,780
Microsoft Office stuff out take a big

00:05:41,490 --> 00:05:45,840
old monolith we're gonna break it up

00:05:42,780 --> 00:05:47,460
into pieces at least some of it and what

00:05:45,840 --> 00:05:49,500
they're not realizing it and not

00:05:47,460 --> 00:05:51,030
understanding is that there's a

00:05:49,500 --> 00:05:52,560
completely different methodology

00:05:51,030 --> 00:05:53,729
involved with working with this stuff so

00:05:52,560 --> 00:05:56,970
instead of being a development team that

00:05:53,729 --> 00:05:58,919
owns everything or at least most of it

00:05:56,970 --> 00:06:00,569
so maybe you have a front-end team and

00:05:58,919 --> 00:06:03,030
maybe you have a back-end team or

00:06:00,569 --> 00:06:04,680
services team but they own all of it

00:06:03,030 --> 00:06:05,879
now you're splitting it up and you're

00:06:04,680 --> 00:06:08,879
giving each one of these pieces to

00:06:05,879 --> 00:06:10,590
individual teams that own that piece so

00:06:08,879 --> 00:06:12,000
imagine owning that one service and I

00:06:10,590 --> 00:06:13,979
don't mean just owning that service like

00:06:12,000 --> 00:06:17,009
develop it push it into a pipeline and

00:06:13,979 --> 00:06:18,629
I'm done you own everything going

00:06:17,009 --> 00:06:21,629
forward you own the release cycles you

00:06:18,629 --> 00:06:23,250
own the CVE the security patches you get

00:06:21,629 --> 00:06:25,120
to decide when where and how you release

00:06:23,250 --> 00:06:26,710
this in how often

00:06:25,120 --> 00:06:29,110
so instead of doing your development

00:06:26,710 --> 00:06:30,970
cycle on your app pushing this stuff out

00:06:29,110 --> 00:06:32,860
once every three four six months if

00:06:30,970 --> 00:06:35,860
you're really good at it I worked in the

00:06:32,860 --> 00:06:39,910
bank so it took us almost eight months

00:06:35,860 --> 00:06:41,560
us to do one release now you're talking

00:06:39,910 --> 00:06:44,400
about all the individual pieces of your

00:06:41,560 --> 00:06:47,169
application can be released our leak

00:06:44,400 --> 00:06:51,520
three half-hour if you want to every

00:06:47,169 --> 00:06:53,590
time you push a fix if you want to think

00:06:51,520 --> 00:06:56,200
also about that development team has to

00:06:53,590 --> 00:06:59,380
own the testing of their individual

00:06:56,200 --> 00:07:02,800
service they have to own the API front

00:06:59,380 --> 00:07:04,360
end of it you have to document that

00:07:02,800 --> 00:07:06,040
properly so people understand that your

00:07:04,360 --> 00:07:07,360
API isn't changing drastically between

00:07:06,040 --> 00:07:10,540
this version and that version of

00:07:07,360 --> 00:07:12,010
breaking everybody's use of it things

00:07:10,540 --> 00:07:14,530
that people do not think about it just

00:07:12,010 --> 00:07:16,660
not ready for that stuff and this makes

00:07:14,530 --> 00:07:18,760
it super hard so a lot of people are

00:07:16,660 --> 00:07:20,470
getting into it in the first case start

00:07:18,760 --> 00:07:23,139
breaking stuff up and then realize wait

00:07:20,470 --> 00:07:25,389
a minute I have to now started treating

00:07:23,139 --> 00:07:27,550
each one of these individual services in

00:07:25,389 --> 00:07:30,389
a team as a business-to-business

00:07:27,550 --> 00:07:30,389
connection

00:07:30,559 --> 00:07:36,499
so it's just as if you've now created a

00:07:33,619 --> 00:07:38,089
little team outside your company and you

00:07:36,499 --> 00:07:39,859
have to interact with them so is anybody

00:07:38,089 --> 00:07:41,389
using any kind of piece of software ever

00:07:39,859 --> 00:07:44,419
from an external party such as

00:07:41,389 --> 00:07:47,119
Salesforce some of the Google services

00:07:44,419 --> 00:07:48,439
whatever they are they have an API they

00:07:47,119 --> 00:07:54,099
have a development team that does stuff

00:07:48,439 --> 00:07:56,800
completely out of your purview right

00:07:54,099 --> 00:07:58,419
you have to deal with that you don't get

00:07:56,800 --> 00:08:00,069
a choice you don't own the API you don't

00:07:58,419 --> 00:08:02,469
own the release cycle you don't own any

00:08:00,069 --> 00:08:05,520
of that that's something that people are

00:08:02,469 --> 00:08:05,520
absolutely not prepared for

00:08:06,310 --> 00:08:12,240
the second one sounds kind of simple and

00:08:10,060 --> 00:08:12,240
obvious

00:08:12,410 --> 00:08:16,250
do you think this how many people think

00:08:14,180 --> 00:08:18,610
that just a small service is a micro

00:08:16,250 --> 00:08:18,610
service

00:08:19,889 --> 00:08:26,969
good you shouldn't the thing behind this

00:08:25,259 --> 00:08:28,530
is it's got to do with the hints I was

00:08:26,969 --> 00:08:30,419
saying about having a team and having to

00:08:28,530 --> 00:08:32,669
treat it as if it's an external party

00:08:30,419 --> 00:08:34,589
where this development team owns

00:08:32,669 --> 00:08:38,610
everything has the the interface back

00:08:34,589 --> 00:08:40,110
and forth like that one of the questions

00:08:38,610 --> 00:08:42,209
that comes up really quickly after they

00:08:40,110 --> 00:08:43,579
discover so so imagine a company starts

00:08:42,209 --> 00:08:46,350
doing this or making this transition

00:08:43,579 --> 00:08:47,760
bumps into oh we have to have a little

00:08:46,350 --> 00:08:49,079
bit of an organizational change because

00:08:47,760 --> 00:08:50,399
you have to give the freedom away to

00:08:49,079 --> 00:08:52,769
these individual teams to do what

00:08:50,399 --> 00:08:54,980
they're going to do and play nice and

00:08:52,769 --> 00:08:57,029
set up the infrastructure to do all that

00:08:54,980 --> 00:08:59,310
then you come back around and you start

00:08:57,029 --> 00:09:01,500
thinking about who wait a minute I have

00:08:59,310 --> 00:09:04,019
this big monolith I know

00:09:01,500 --> 00:09:07,500
performance I know API calls I know

00:09:04,019 --> 00:09:09,540
service calls are all inside this

00:09:07,500 --> 00:09:11,130
monolith so I know how this works how

00:09:09,540 --> 00:09:12,899
this interacts I know the performance of

00:09:11,130 --> 00:09:16,860
this I can test it I can put metrics out

00:09:12,899 --> 00:09:18,779
about this anybody here attend Christina

00:09:16,860 --> 00:09:20,220
Milian's talked yesterday about a

00:09:18,779 --> 00:09:22,150
reference architecture for micro

00:09:20,220 --> 00:09:24,010
services

00:09:22,150 --> 00:09:25,450
she had some really cool drawings up

00:09:24,010 --> 00:09:28,360
there to remember now if you look at

00:09:25,450 --> 00:09:30,310
these two sets of seats imagine each one

00:09:28,360 --> 00:09:32,350
of these seats are an individual

00:09:30,310 --> 00:09:34,330
micro-service in your organization and

00:09:32,350 --> 00:09:36,400
all these are deployed in some data

00:09:34,330 --> 00:09:37,960
center over here in the world and all

00:09:36,400 --> 00:09:40,810
these are deployed somewhere else in the

00:09:37,960 --> 00:09:44,440
world and I'm the application upfront

00:09:40,810 --> 00:09:47,650
here and I'm using you you and him over

00:09:44,440 --> 00:09:50,860
there you don't talk to record it with

00:09:47,650 --> 00:09:52,360
each other ever right he has an

00:09:50,860 --> 00:09:54,580
interface you have an interface and you

00:09:52,360 --> 00:09:56,500
have an interface I talked to you I do

00:09:54,580 --> 00:09:57,700
that through entering this data center

00:09:56,500 --> 00:09:59,230
at the front end and going all the way

00:09:57,700 --> 00:10:01,660
to the back to whoever it is and talked

00:09:59,230 --> 00:10:02,770
I don't know exactly what the

00:10:01,660 --> 00:10:04,450
performance in the network is going to

00:10:02,770 --> 00:10:06,630
be some I make that call I don't know

00:10:04,450 --> 00:10:06,630
that

00:10:08,280 --> 00:10:12,180
if he wants to make a call over and use

00:10:10,860 --> 00:10:14,130
some service over here he has to come

00:10:12,180 --> 00:10:16,530
all the way out here all the way in the

00:10:14,130 --> 00:10:19,730
datacenter right so what you're giving

00:10:16,530 --> 00:10:21,750
up is the freedom of knowing what your

00:10:19,730 --> 00:10:23,610
networking calls in speed and the

00:10:21,750 --> 00:10:25,500
performance is going to be for the

00:10:23,610 --> 00:10:28,500
flexibility to deploy all these things

00:10:25,500 --> 00:10:31,380
at anytime you want to be able to fix

00:10:28,500 --> 00:10:33,120
security bugs like that to be able to

00:10:31,380 --> 00:10:35,460
react to what your customer wants to do

00:10:33,120 --> 00:10:38,370
I can change my business application up

00:10:35,460 --> 00:10:39,630
front here to their needs anytime I want

00:10:38,370 --> 00:10:41,160
because I'm not dependent on all these

00:10:39,630 --> 00:10:44,880
different services being updated too

00:10:41,160 --> 00:10:46,380
it's not a monolith anymore so I've

00:10:44,880 --> 00:10:48,750
taken the monolith broken it up into

00:10:46,380 --> 00:10:50,850
these pieces and you can now have a

00:10:48,750 --> 00:10:53,430
trade-off you have to do deal with how

00:10:50,850 --> 00:10:55,770
far do I want to go or do I not want to

00:10:53,430 --> 00:10:59,340
go or can I live with the performance

00:10:55,770 --> 00:11:00,390
issues that I don't exactly know anybody

00:10:59,340 --> 00:11:02,730
go through that when they were doing

00:11:00,390 --> 00:11:05,330
micro services anybody split up him on

00:11:02,730 --> 00:11:05,330
the little four

00:11:05,590 --> 00:11:09,360
don't promise them anything when you do

00:11:07,150 --> 00:11:09,360
that

00:11:10,060 --> 00:11:14,610
so

00:11:12,480 --> 00:11:16,230
to find that happiness has an awful lot

00:11:14,610 --> 00:11:17,910
to do with understanding how you're

00:11:16,230 --> 00:11:19,920
approaching this and what you're trying

00:11:17,910 --> 00:11:22,320
to achieve and being able to communicate

00:11:19,920 --> 00:11:24,720
that correctly to your CIOs or to your

00:11:22,320 --> 00:11:27,389
lead architects or to whoever is

00:11:24,720 --> 00:11:30,259
sponsoring this kind of stuff

00:11:27,389 --> 00:11:32,699
to become that modern cloud native

00:11:30,259 --> 00:11:34,319
high-performing quickly agile company

00:11:32,699 --> 00:11:36,540
being able to react to everything and

00:11:34,319 --> 00:11:39,329
anything that's happening around you you

00:11:36,540 --> 00:11:42,119
can't be deploying a monolith over eight

00:11:39,329 --> 00:11:43,379
months it's trust me everybody else is

00:11:42,119 --> 00:11:46,619
gonna be way faster than you they're

00:11:43,379 --> 00:11:48,170
gonna eat your lunch right that's how

00:11:46,619 --> 00:11:50,510
that works

00:11:48,170 --> 00:11:54,940
any questions so far anything I said

00:11:50,510 --> 00:11:54,940
sound like something on left-field

00:11:58,450 --> 00:12:02,590
we just said monoliths are not something

00:12:01,300 --> 00:12:05,080
you want to be deploying every day

00:12:02,590 --> 00:12:07,460
months what if your monoliths is that

00:12:05,080 --> 00:12:11,899
fast right

00:12:07,460 --> 00:12:15,130
so microservices are not always better

00:12:11,899 --> 00:12:15,130
than than mama this

00:12:15,780 --> 00:12:18,830
what do you think of that

00:12:19,029 --> 00:12:23,399
so this is kind of contradicting

00:12:20,410 --> 00:12:23,399
everything I just said right

00:12:25,120 --> 00:12:28,839
there's nothing wrong with looking at

00:12:26,769 --> 00:12:30,329
the monolith in deciding large portions

00:12:28,839 --> 00:12:33,379
of it are not worth turning into

00:12:30,329 --> 00:12:35,869
microservices or tearing apart

00:12:33,379 --> 00:12:37,399
what if I take those three services out

00:12:35,869 --> 00:12:39,319
of my monolith that I just talked about

00:12:37,399 --> 00:12:40,699
put them in those data centers and now I

00:12:39,319 --> 00:12:43,670
can release my model with every two

00:12:40,699 --> 00:12:45,949
months instead of every eight that might

00:12:43,670 --> 00:12:46,639
be enough business justification to stop

00:12:45,949 --> 00:12:48,559
right there

00:12:46,639 --> 00:12:50,959
and don't spend any more money on that

00:12:48,559 --> 00:12:52,429
project because I guarantee no matter

00:12:50,959 --> 00:12:54,739
what you're doing and how cool you think

00:12:52,429 --> 00:12:56,089
technology is the business is the one

00:12:54,739 --> 00:12:57,859
that owns it the business is the one

00:12:56,089 --> 00:12:59,179
with the money and they're gonna look at

00:12:57,859 --> 00:13:00,350
you and say why are we even touching

00:12:59,179 --> 00:13:03,679
this I don't want to spend my money

00:13:00,350 --> 00:13:05,540
on this great example the bank where I

00:13:03,679 --> 00:13:07,639
used to work still has in the corner

00:13:05,540 --> 00:13:10,850
machine running from when I worked there

00:13:07,639 --> 00:13:12,499
almost 15 years ago running the same

00:13:10,850 --> 00:13:14,749
version of one of our open source

00:13:12,499 --> 00:13:16,519
projects and the business unit still

00:13:14,749 --> 00:13:22,749
says no I don't want to upgrade it's not

00:13:16,519 --> 00:13:24,949
broken don't fix it right it's an option

00:13:22,749 --> 00:13:26,749
so that's what we mean by having like an

00:13:24,949 --> 00:13:28,429
agile monolith it's not so much that

00:13:26,749 --> 00:13:31,429
you're changing everything but you're

00:13:28,429 --> 00:13:32,779
making that slight sliding shift over

00:13:31,429 --> 00:13:34,670
into some microsurgery

00:13:32,779 --> 00:13:37,220
it's a way to start without having a

00:13:34,670 --> 00:13:39,980
huge impact on your organization it's

00:13:37,220 --> 00:13:44,050
something to think about it

00:13:39,980 --> 00:13:47,420
so we've looked at the three different

00:13:44,050 --> 00:13:50,090
pitfalls your organization might not be

00:13:47,420 --> 00:13:51,860
ready for this stuff just saying I'm

00:13:50,090 --> 00:13:53,720
going to do micro services is not doing

00:13:51,860 --> 00:13:55,280
micro services and you are going to run

00:13:53,720 --> 00:13:57,410
into a wall if you think that's how it

00:13:55,280 --> 00:13:58,820
works if you try to design your design

00:13:57,410 --> 00:14:00,740
teams and your development teams the

00:13:58,820 --> 00:14:03,290
same way as you did for normal

00:14:00,740 --> 00:14:05,420
monolithic development or service

00:14:03,290 --> 00:14:09,260
development up to now it is a completely

00:14:05,420 --> 00:14:11,150
different story your definition of a

00:14:09,260 --> 00:14:13,220
micro service and understanding what I

00:14:11,150 --> 00:14:17,990
described with two data centers and how

00:14:13,220 --> 00:14:20,150
that works and sacrificing the known

00:14:17,990 --> 00:14:22,370
factors of how your your your networking

00:14:20,150 --> 00:14:24,410
is working and your timing and metrics

00:14:22,370 --> 00:14:27,170
on your service calls versus the agility

00:14:24,410 --> 00:14:29,660
to be able to react to your business and

00:14:27,170 --> 00:14:32,570
changes every hour if you so wish

00:14:29,660 --> 00:14:35,240
without impacting the actual application

00:14:32,570 --> 00:14:39,619
it's a huge change

00:14:35,240 --> 00:14:42,129
and then microservices being not always

00:14:39,619 --> 00:14:44,779
the answer of beyond all monoliths

00:14:42,129 --> 00:14:48,319
there's nothing wrong with identifying

00:14:44,779 --> 00:14:50,209
that a monolith can be slightly carved

00:14:48,319 --> 00:14:51,860
out and left alone and it's agile enough

00:14:50,209 --> 00:14:53,300
and you sped up the development cycle so

00:14:51,860 --> 00:14:57,800
we're no longer waiting eight months or

00:14:53,300 --> 00:14:59,689
more it's now only two so that's three

00:14:57,800 --> 00:15:01,189
we could stop here but it wouldn't

00:14:59,689 --> 00:15:06,259
really be that fun would it if we didn't

00:15:01,189 --> 00:15:07,910
have like a bonus one so who here has

00:15:06,259 --> 00:15:10,279
been attending all these data talks that

00:15:07,910 --> 00:15:13,759
they've been having here it was a big

00:15:10,279 --> 00:15:15,619
data fan or a data engineer what are

00:15:13,759 --> 00:15:19,269
they calling him now data scientists

00:15:15,619 --> 00:15:19,269
data scientists there you go

00:15:19,470 --> 00:15:23,530
so one of the things that comes up and

00:15:21,550 --> 00:15:29,269
it didn't make the top three for me but

00:15:23,530 --> 00:15:31,779
it's probably a really close for state

00:15:29,269 --> 00:15:36,019
applications have state what about state

00:15:31,779 --> 00:15:37,309
so if I'm putting all these services out

00:15:36,019 --> 00:15:38,569
there and they're in little containers

00:15:37,309 --> 00:15:40,790
and you know you're over there you're

00:15:38,569 --> 00:15:43,199
here you're here what about a state of

00:15:40,790 --> 00:15:44,809
my application how am i managing that

00:15:43,199 --> 00:15:47,279
what are we doing with that these

00:15:44,809 --> 00:15:51,449
distributed data stores are you dealing

00:15:47,279 --> 00:15:54,149
with all that stuff most of what we're

00:15:51,449 --> 00:15:58,139
pushing for when I talk to people about

00:15:54,149 --> 00:15:59,939
this is theirs we use open source

00:15:58,139 --> 00:16:01,319
technology from Red Hat so that there's

00:15:59,939 --> 00:16:03,480
quite a few things going on out there in

00:16:01,319 --> 00:16:06,569
the cloud native world where they put a

00:16:03,480 --> 00:16:09,480
layer across the stuff that monitors

00:16:06,569 --> 00:16:11,040
change in your data sources and this is

00:16:09,480 --> 00:16:12,839
this is the path I would suggest is

00:16:11,040 --> 00:16:14,399
instead of tearing it all up and trying

00:16:12,839 --> 00:16:15,779
to store data locally by each one of

00:16:14,399 --> 00:16:17,910
these things and we'd be radically

00:16:15,779 --> 00:16:19,949
changing an architecture that's already

00:16:17,910 --> 00:16:22,279
in place you have to realize most

00:16:19,949 --> 00:16:24,239
organizations have a whole lot of

00:16:22,279 --> 00:16:25,980
technical debt is the word you always

00:16:24,239 --> 00:16:27,540
hear but it has to do with they've made

00:16:25,980 --> 00:16:30,149
decisions in the past you're stuck with

00:16:27,540 --> 00:16:32,459
so this database is not going anywhere

00:16:30,149 --> 00:16:33,959
because it comes from Oracle and the CEO

00:16:32,459 --> 00:16:35,100
made a big commitment to Oracle and

00:16:33,959 --> 00:16:38,279
that's not going to be here for the next

00:16:35,100 --> 00:16:40,499
ten years that's just the way it is but

00:16:38,279 --> 00:16:42,329
to be able to have the state information

00:16:40,499 --> 00:16:43,559
you want and to monitor that correctly

00:16:42,329 --> 00:16:46,019
to plug into that correctly there are

00:16:43,559 --> 00:16:47,489
layers of software that will now monitor

00:16:46,019 --> 00:16:49,169
those changes and allow you to publish

00:16:47,489 --> 00:16:52,080
those changes directly to individual

00:16:49,169 --> 00:16:54,310
micro services and things like that

00:16:52,080 --> 00:16:57,220
and you look at these slides and I

00:16:54,310 --> 00:16:59,290
forgot to mention they're already online

00:16:57,220 --> 00:17:01,450
about ten minutes before this talk

00:16:59,290 --> 00:17:03,400
started they published a Chevelle dot or

00:17:01,450 --> 00:17:07,899
my last name is my website that's where

00:17:03,400 --> 00:17:10,029
you'll find them in the notes of the

00:17:07,899 --> 00:17:11,589
the talk you'll find links to the

00:17:10,029 --> 00:17:16,449
various software elements you can look

00:17:11,589 --> 00:17:18,039
at that do that stuff the other option

00:17:16,449 --> 00:17:19,480
is you know people try to and that's

00:17:18,039 --> 00:17:21,189
what you mostly see happening it's like

00:17:19,480 --> 00:17:23,620
a gut reaction from anybody that's done

00:17:21,189 --> 00:17:25,209
services it's a tightly coupled the data

00:17:23,620 --> 00:17:28,209
for each one of these services to the

00:17:25,209 --> 00:17:29,950
individual individual services which

00:17:28,209 --> 00:17:32,289
means you now have containers out there

00:17:29,950 --> 00:17:34,899
with stores being coupled tightly to the

00:17:32,289 --> 00:17:36,519
service in the container which is not

00:17:34,899 --> 00:17:38,730
exactly the flexibility you're looking

00:17:36,519 --> 00:17:38,730
for

00:17:41,730 --> 00:17:46,490
I got a few references stuff you can

00:17:43,800 --> 00:17:46,490
read and look at

00:17:48,200 --> 00:17:55,790
this stuff is not easy okay we are or

00:17:52,649 --> 00:17:57,740
what they tell you it's not easy but

00:17:55,790 --> 00:17:59,590
just like anything we do and we're so

00:17:57,740 --> 00:18:01,790
ready University researched a little bit

00:17:59,590 --> 00:18:03,740
look for some of these best practices

00:18:01,790 --> 00:18:06,920
look for some of these these tips and

00:18:03,740 --> 00:18:08,600
tricks and stuff I make make decisions

00:18:06,920 --> 00:18:10,400
that work well for your organization I

00:18:08,600 --> 00:18:11,900
still I mean one of the most simple

00:18:10,400 --> 00:18:13,250
things as an architect when you look at

00:18:11,900 --> 00:18:14,690
an organization and look at stuff that

00:18:13,250 --> 00:18:17,300
you're trying to do is keep it simple

00:18:14,690 --> 00:18:19,540
you know that KISS principle that works

00:18:17,300 --> 00:18:21,760
all the time that has the longest living

00:18:19,540 --> 00:18:23,870
a well-functioning

00:18:21,760 --> 00:18:25,970
execution of a solution is if you keep

00:18:23,870 --> 00:18:27,050
it simple so if you can take a hint out

00:18:25,970 --> 00:18:29,290
of the stuff that would probably the

00:18:27,050 --> 00:18:29,290
best

00:18:30,760 --> 00:18:33,810
anybody have any questions

00:18:34,770 --> 00:18:42,140
it sounded like hocus-pocus or

00:18:37,740 --> 00:18:42,140
can you use some of this down front

00:18:43,500 --> 00:18:49,279
you could just talk and I'll repeat it

00:18:45,809 --> 00:18:49,279
it's amazing really 30 points

00:18:51,250 --> 00:18:58,170
servus how do you determine when to use

00:18:54,310 --> 00:18:58,170
micro-service and then after that how

00:18:59,100 --> 00:19:03,179
okay so first thing you said that made

00:19:01,889 --> 00:19:05,880
some good points about microservices

00:19:03,179 --> 00:19:08,220
second thing you said was it's correct

00:19:05,880 --> 00:19:09,360
me if I say this wrong how how do I

00:19:08,220 --> 00:19:11,940
decide when to make something

00:19:09,360 --> 00:19:13,950
micro-service and then how do I sell it

00:19:11,940 --> 00:19:16,649
and which I don't understand oh well so

00:19:13,950 --> 00:19:19,880
let's say you've decided we need to use

00:19:16,649 --> 00:19:19,880
micro services to solve this problem

00:19:20,330 --> 00:19:25,019
okay so that he's saying I for some

00:19:23,789 --> 00:19:26,429
reason to my organization have decided

00:19:25,019 --> 00:19:28,259
that we're gonna do micro services and

00:19:26,429 --> 00:19:29,789
how do I communicate that to my team so

00:19:28,259 --> 00:19:32,840
it has an awful lot to do with the

00:19:29,789 --> 00:19:37,080
number two pitfall that we talked about

00:19:32,840 --> 00:19:38,730
you're looking for agility versus yeah

00:19:37,080 --> 00:19:41,789
it sounds really bad right agility

00:19:38,730 --> 00:19:43,740
versus stability I don't mean stability

00:19:41,789 --> 00:19:46,679
of your application I mean stability of

00:19:43,740 --> 00:19:48,000
a known almost waterfall kind of process

00:19:46,679 --> 00:19:50,129
of how you're developing stuff from

00:19:48,000 --> 00:19:51,870
front to back do it release and then go

00:19:50,129 --> 00:19:53,220
background I do front to back do another

00:19:51,870 --> 00:19:55,919
release that stuff takes a long time

00:19:53,220 --> 00:20:00,149
it's all tightly coupled we're going for

00:19:55,919 --> 00:20:02,899
the agility of being able to expand your

00:20:00,149 --> 00:20:02,899
organization's

00:20:02,910 --> 00:20:08,250
reaction to you'd amaze you market to

00:20:04,950 --> 00:20:10,260
your customers a very good trigger could

00:20:08,250 --> 00:20:12,010
be that you want to use some service

00:20:10,260 --> 00:20:13,779
that is already a third party

00:20:12,010 --> 00:20:16,139
if you've been interacting with any kind

00:20:13,779 --> 00:20:18,070
of a SAS application or SAS service from

00:20:16,139 --> 00:20:19,720
Salesforce it's always an easy one to

00:20:18,070 --> 00:20:20,980
use let's say you're doing that or you

00:20:19,720 --> 00:20:24,159
have some third-party vendor that you're

00:20:20,980 --> 00:20:26,350
plugging into that process you just

00:20:24,159 --> 00:20:28,120
replicate for services across the

00:20:26,350 --> 00:20:31,630
organization

00:20:28,120 --> 00:20:33,190
and usually it gets triggered a decision

00:20:31,630 --> 00:20:34,539
like this is because you're starting to

00:20:33,190 --> 00:20:36,010
think about doing this modern way of

00:20:34,539 --> 00:20:38,679
being agile and getting a little bit

00:20:36,010 --> 00:20:41,590
more quick to respond based on an

00:20:38,679 --> 00:20:42,669
upgrade or an update to an existing

00:20:41,590 --> 00:20:45,340
model it takes something where you could

00:20:42,669 --> 00:20:48,419
carve off a few things and that's what I

00:20:45,340 --> 00:20:50,779
would always push for and what I always

00:20:48,419 --> 00:20:53,250
prefer versus just like a brand-new

00:20:50,779 --> 00:20:56,850
Greenfield let's do micro services for

00:20:53,250 --> 00:20:58,200
this project if you do if you see people

00:20:56,850 --> 00:21:00,539
doing that that's where all these come

00:20:58,200 --> 00:21:02,909
from right because I stumble over all of

00:21:00,539 --> 00:21:04,590
them you just you're not sure you don't

00:21:02,909 --> 00:21:06,029
know exactly what you do and you're it's

00:21:04,590 --> 00:21:08,640
just logical and you're gonna bump into

00:21:06,029 --> 00:21:10,730
this stuff taking things in smaller

00:21:08,640 --> 00:21:13,140
jumps smaller pieces and smaller bites

00:21:10,730 --> 00:21:15,149
lets you make mistakes about killing

00:21:13,140 --> 00:21:19,019
yourself or ruining a project or ruining

00:21:15,149 --> 00:21:20,250
your name or running budgets up through

00:21:19,019 --> 00:21:22,880
the roof because you forgot about a

00:21:20,250 --> 00:21:22,880
bunch of aspects

00:21:24,220 --> 00:21:33,120
and I spent some time in Holland at one

00:21:27,850 --> 00:21:35,920
of our the biggest railway maintenance

00:21:33,120 --> 00:21:36,880
organization we have and they're still

00:21:35,920 --> 00:21:38,320
going through saying this is like a

00:21:36,880 --> 00:21:40,450
government organization they're not

00:21:38,320 --> 00:21:43,060
agile it's not a quick change nothing is

00:21:40,450 --> 00:21:44,830
quick it's filled and staffed by IT

00:21:43,060 --> 00:21:45,910
people that are really happy with what

00:21:44,830 --> 00:21:47,290
they're doing for years and years and

00:21:45,910 --> 00:21:49,090
years and don't want to change their way

00:21:47,290 --> 00:21:52,030
of working so you're being brought in to

00:21:49,090 --> 00:21:54,040
talk about this stuff because a younger

00:21:52,030 --> 00:21:56,370
somebody is now put in charge to make

00:21:54,040 --> 00:21:56,370
change

00:21:56,720 --> 00:22:01,390
the best way to approaches is to ease

00:21:58,640 --> 00:22:03,740
them into it right I truly believe that

00:22:01,390 --> 00:22:08,300
does that answer your question in a long

00:22:03,740 --> 00:22:11,980
roundabout way never never yeah there's

00:22:08,300 --> 00:22:11,980
no single right answer absolutely not

00:22:12,100 --> 00:22:16,730
like like the third one says there are

00:22:14,780 --> 00:22:19,060
things that don't need to be a micro

00:22:16,730 --> 00:22:19,060
service

00:22:19,240 --> 00:22:22,779
because the cost could because of you

00:22:21,279 --> 00:22:24,100
know the known fact it could because of

00:22:22,779 --> 00:22:25,980
a customer that doesn't want to pay for

00:22:24,100 --> 00:22:31,140
it that kind of thing

00:22:25,980 --> 00:22:31,140
anybody else yes sir

00:22:33,030 --> 00:22:36,030
so

00:22:47,990 --> 00:22:50,800
oh do be sure

00:22:52,990 --> 00:22:57,669
okay I've been shattered PTFE is

00:22:59,420 --> 00:23:05,240
I'm gonna paraphrase a little bit so say

00:23:02,420 --> 00:23:06,980
say if I'm wrong how do you ensure that

00:23:05,240 --> 00:23:08,530
all these individual microservices that

00:23:06,980 --> 00:23:11,210
are doing data transactions and stuff

00:23:08,530 --> 00:23:12,650
equal the sum of what used to be one

00:23:11,210 --> 00:23:15,549
great big transaction from your

00:23:12,650 --> 00:23:17,750
monolithic application close enough okay

00:23:15,549 --> 00:23:21,440
that's that's exactly what I talked

00:23:17,750 --> 00:23:26,570
about in the bonus one the bonus the

00:23:21,440 --> 00:23:28,490
pitfall there are various options to

00:23:26,570 --> 00:23:30,830
ensure that there's a layer between your

00:23:28,490 --> 00:23:32,419
micro service architecture and services

00:23:30,830 --> 00:23:33,950
that are dealing with the state with

00:23:32,419 --> 00:23:35,480
with the database or whatever your

00:23:33,950 --> 00:23:37,610
storage is whether it could be data Lake

00:23:35,480 --> 00:23:39,910
it could be anything right data

00:23:37,610 --> 00:23:43,429
warehousing whatever it happens to be

00:23:39,910 --> 00:23:46,930
keeps the consistency and guarantees the

00:23:43,429 --> 00:23:52,050
the transactions as you're saying

00:23:46,930 --> 00:23:54,100
and you use that layer to ensure and to

00:23:52,050 --> 00:23:56,830
configure for each individual search

00:23:54,100 --> 00:23:58,360
what they need to know so read write

00:23:56,830 --> 00:24:00,310
whatever it is whatever data they need

00:23:58,360 --> 00:24:02,160
to have that's how you how you manage

00:24:00,310 --> 00:24:04,170
that

00:24:02,160 --> 00:24:06,000
that is used also to map the answers

00:24:04,170 --> 00:24:08,640
back to whatever the application needs

00:24:06,000 --> 00:24:10,080
to know so it sounds sounds a little bit

00:24:08,640 --> 00:24:11,580
like you're isolating everything out in

00:24:10,080 --> 00:24:15,550
digital service isn't that it's a mess

00:24:11,580 --> 00:24:16,960
but it's a bit imagine going on in that

00:24:15,550 --> 00:24:19,540
that that layer you're putting in

00:24:16,960 --> 00:24:20,680
frosted one of the tools is called I

00:24:19,540 --> 00:24:22,150
don't even know if I'm saying it right

00:24:20,680 --> 00:24:24,300
because we say it differently in Holland

00:24:22,150 --> 00:24:26,830
but doobies IAM if you've heard of that

00:24:24,300 --> 00:24:28,870
there's links in the presentation for

00:24:26,830 --> 00:24:30,730
that and that specific slide about what

00:24:28,870 --> 00:24:32,770
these components are take a look at it

00:24:30,730 --> 00:24:34,720
it's it's about you know putting a layer

00:24:32,770 --> 00:24:35,950
across to monitor changes and report

00:24:34,720 --> 00:24:38,710
those back to where you tell it to

00:24:35,950 --> 00:24:40,120
report it back to so if I'm a Microsoft

00:24:38,710 --> 00:24:42,010
that needs to know about an update to a

00:24:40,120 --> 00:24:44,110
customer ID or something like that or an

00:24:42,010 --> 00:24:45,490
H because it's a birthday it will push

00:24:44,110 --> 00:24:47,820
that back you can subscribe to that

00:24:45,490 --> 00:24:47,820
information

00:24:49,110 --> 00:24:54,029
I didn't say the complexities would go

00:24:50,879 --> 00:24:55,769
down it's not you know nothing is a

00:24:54,029 --> 00:24:58,350
magic pill it's it's it's a trade-off

00:24:55,769 --> 00:24:59,610
it's a trade-off between known ways of

00:24:58,350 --> 00:25:04,550
working versus having much more

00:24:59,610 --> 00:25:07,309
flexibility and and quicker releases

00:25:04,550 --> 00:25:09,080
I could even imagine in 10 years ago

00:25:07,309 --> 00:25:10,730
pushing a button on my code to commit it

00:25:09,080 --> 00:25:13,040
to a repository and then it triggers all

00:25:10,730 --> 00:25:14,410
kinds of pipelines that basically can

00:25:13,040 --> 00:25:18,830
push it all the way to production

00:25:14,410 --> 00:25:21,340
without an ops guy touching it anybody

00:25:18,830 --> 00:25:21,340
doing that now

00:25:22,010 --> 00:25:27,350
that's the dream isn't it

00:25:25,100 --> 00:25:29,630
so imagine if you have a microservice

00:25:27,350 --> 00:25:31,220
it's only about this big right I mean

00:25:29,630 --> 00:25:33,770
you didn't change anything you just put

00:25:31,220 --> 00:25:36,340
a CBE changing it to stop some kind of

00:25:33,770 --> 00:25:36,340
security thing

00:25:36,510 --> 00:25:40,669
about I don't know half hours

00:25:38,070 --> 00:25:40,669
introduction

00:25:40,980 --> 00:25:45,389
how about Moe stop geyser scared

00:25:42,630 --> 00:25:47,279
shitless women your stuff like but if

00:25:45,389 --> 00:25:48,450
all the automated pipelines are in place

00:25:47,279 --> 00:25:52,019
of all the testings in place there's

00:25:48,450 --> 00:25:54,380
nothing wrong with that is there that's

00:25:52,019 --> 00:25:54,380
the dream

00:25:56,130 --> 00:25:58,910
anything else

00:26:03,320 --> 00:26:06,010
Thanks

00:26:07,140 --> 00:26:10,309

YouTube URL: https://www.youtube.com/watch?v=il9s8WJYqho


