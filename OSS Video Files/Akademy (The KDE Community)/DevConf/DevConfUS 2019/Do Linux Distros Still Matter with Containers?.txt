Title: Do Linux Distros Still Matter with Containers?
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speaker: Scott McCarty 
In the beginning there was compiling and static linking. My first programs when I was 10 years old worked like that. Then, we discovered dynamic linking. This was great because we could now patch one library and all of the programs would pick up the change on restart. But we created another problem - dependencies. Throughout the history of computing we have solved one problem and created another. Containers are no different. This talk will walk through why we invented Linux distros and why we should continue to appreciate them in a world full of container hosts and images.
Captions: 
	00:00:06,020 --> 00:00:11,699
all right sweet can you guys hear me

00:00:08,129 --> 00:00:14,070
okay yeah I think you can yes all right

00:00:11,699 --> 00:00:16,199
so I'm going to ask a provocative

00:00:14,070 --> 00:00:17,609
question right like do Linux

00:00:16,199 --> 00:00:20,310
distributions still matter with

00:00:17,609 --> 00:00:22,400
containers I get people asking me

00:00:20,310 --> 00:00:25,950
questions like that all the time like

00:00:22,400 --> 00:00:27,840
and so a while back I guess it was

00:00:25,950 --> 00:00:30,900
February now so about six months ago I

00:00:27,840 --> 00:00:34,590
decided to publish a blog it with the

00:00:30,900 --> 00:00:36,270
same title and I just culminations of

00:00:34,590 --> 00:00:38,460
this conversation with a bunch of

00:00:36,270 --> 00:00:41,760
different people talking about distro

00:00:38,460 --> 00:00:43,470
bliss and scratch builds and all these

00:00:41,760 --> 00:00:47,130
different things and I think I think

00:00:43,470 --> 00:00:49,320
whenever we we you know whenever we get

00:00:47,130 --> 00:00:50,070
into new technology like something new

00:00:49,320 --> 00:00:51,750
comes out the top

00:00:50,070 --> 00:00:53,370
we went back when I was earlier I was in

00:00:51,750 --> 00:00:55,680
linux when it first came out I was in

00:00:53,370 --> 00:00:58,140
that first rage then virtualization came

00:00:55,680 --> 00:00:59,430
out and I then now containers and I

00:00:58,140 --> 00:01:01,200
think every time one of these major

00:00:59,430 --> 00:01:02,610
pieces of technology come out we then go

00:01:01,200 --> 00:01:04,739
back and go do we need these other

00:01:02,610 --> 00:01:06,270
things like perhaps we've forgotten like

00:01:04,739 --> 00:01:07,380
you know we reevaluate it even with

00:01:06,270 --> 00:01:08,850
virtualization whether we need the

00:01:07,380 --> 00:01:12,150
operating system though and now we're

00:01:08,850 --> 00:01:16,380
like asking this again with containers

00:01:12,150 --> 00:01:17,790
and I think for me like what inspired my

00:01:16,380 --> 00:01:19,620
thoughts are on this and I kind of

00:01:17,790 --> 00:01:21,840
entire framing in this argument or this

00:01:19,620 --> 00:01:24,450
conversation was was actually I had read

00:01:21,840 --> 00:01:27,750
this article of all things just a random

00:01:24,450 --> 00:01:29,850
article I found that talked about the

00:01:27,750 --> 00:01:32,100
fact that we balanced in our minds we

00:01:29,850 --> 00:01:33,840
have serve a bias towards innovation in

00:01:32,100 --> 00:01:35,550
fact the word innovation has kind of

00:01:33,840 --> 00:01:37,410
become a buzzword at this point like in

00:01:35,550 --> 00:01:39,930
a lot of ways like it's just like we

00:01:37,410 --> 00:01:41,760
always value innovation the way I heard

00:01:39,930 --> 00:01:43,050
it described by somebody outside to you

00:01:41,760 --> 00:01:44,940
was you know when we build a bridge a

00:01:43,050 --> 00:01:46,260
new bridge like when you know the Golden

00:01:44,940 --> 00:01:47,690
Gate Bridge was built we had a tuxedo

00:01:46,260 --> 00:01:49,950
dinner for the engineers in the

00:01:47,690 --> 00:01:51,360
architects right but when the you know

00:01:49,950 --> 00:01:53,070
thirty years later hundred years later

00:01:51,360 --> 00:01:54,630
when the construction workers resurface

00:01:53,070 --> 00:01:56,130
it you know they don't they barely get

00:01:54,630 --> 00:01:58,110
Taco Bell right like they go to Taco

00:01:56,130 --> 00:02:01,440
Bell for lunch so it's like we just have

00:01:58,110 --> 00:02:04,260
this bias against or we know we have a

00:02:01,440 --> 00:02:06,510
bias towards you know innovation and

00:02:04,260 --> 00:02:07,950
probably then subconsciously undervalue

00:02:06,510 --> 00:02:10,200
maintenance and just don't think through

00:02:07,950 --> 00:02:11,760
all the things they're happening and we

00:02:10,200 --> 00:02:13,530
don't necessarily know which thing is

00:02:11,760 --> 00:02:15,000
actually making our life better right

00:02:13,530 --> 00:02:16,380
like I mean I think that's probably even

00:02:15,000 --> 00:02:18,360
true like our cell phones and everything

00:02:16,380 --> 00:02:19,620
else right like we just constantly get

00:02:18,360 --> 00:02:22,490
these new things and then have no idea

00:02:19,620 --> 00:02:25,280
how they're affecting us over time

00:02:22,490 --> 00:02:27,080
so the question I mentioned right like I

00:02:25,280 --> 00:02:28,340
have the young kids come to me and I go

00:02:27,080 --> 00:02:30,650
I don't want to care about the operating

00:02:28,340 --> 00:02:31,550
system anymore and I'm like okay how

00:02:30,650 --> 00:02:33,950
many of you don't care about the

00:02:31,550 --> 00:02:35,240
operating system any more raise your

00:02:33,950 --> 00:02:37,370
hand if you don't care about it

00:02:35,240 --> 00:02:40,010
he doesn't care I he's good he doesn't

00:02:37,370 --> 00:02:42,980
care either it's two people don't care

00:02:40,010 --> 00:02:44,120
all right so that's good actually so

00:02:42,980 --> 00:02:47,240
good I'm preaching to the choir like I

00:02:44,120 --> 00:02:49,610
said to an extent so let's use tires as

00:02:47,240 --> 00:02:51,680
an analogy like I love this one how many

00:02:49,610 --> 00:02:53,330
of you how many of you are into cars

00:02:51,680 --> 00:02:55,100
raise your hand if you're into cars all

00:02:53,330 --> 00:02:56,630
right so good this is a little mix right

00:02:55,100 --> 00:02:58,040
how about the people that aren't into

00:02:56,630 --> 00:03:02,990
cars how many don't care about the tires

00:02:58,040 --> 00:03:04,250
on their car let's see all right how

00:03:02,990 --> 00:03:07,330
many of those people that don't care

00:03:04,250 --> 00:03:07,330
about tires have kids

00:03:07,660 --> 00:03:11,720
got his dish I'm going right for it so

00:03:10,490 --> 00:03:13,960
you have kids you don't care about the

00:03:11,720 --> 00:03:13,960
tires

00:03:16,019 --> 00:03:21,219
yeah it's like how's your stopping power

00:03:18,459 --> 00:03:25,569
in the rain is it good don't know don't

00:03:21,219 --> 00:03:28,349
care I would read I'm not a lawyer but I

00:03:25,569 --> 00:03:31,390
would suggest that maybe reevaluate

00:03:28,349 --> 00:03:33,099
considerations on that so right you have

00:03:31,390 --> 00:03:36,519
a minivan right like alright do you care

00:03:33,099 --> 00:03:38,079
about the tires on a minivan I might at

00:03:36,519 --> 00:03:39,430
first glance it I don't care but then

00:03:38,079 --> 00:03:41,109
wait a minute I think about the problem

00:03:39,430 --> 00:03:44,170
a little bit deeper maybe I do care

00:03:41,109 --> 00:03:46,150
alright so sports sedan you know I'm a

00:03:44,170 --> 00:03:48,340
forty fifty thousand dollar car fairly

00:03:46,150 --> 00:03:50,319
quick like driving in the mountains the

00:03:48,340 --> 00:03:51,370
advertising shows that you know this is

00:03:50,319 --> 00:03:53,200
not supposed to be doing with it right

00:03:51,370 --> 00:03:55,930
do I care about the tires how many of

00:03:53,200 --> 00:03:56,379
you like have BMWs or you know something

00:03:55,930 --> 00:03:58,750
like that

00:03:56,379 --> 00:04:00,400
alright so do you pay attention how long

00:03:58,750 --> 00:04:03,790
do you research the tires before you buy

00:04:00,400 --> 00:04:08,109
a set of tires for it days know don't

00:04:03,790 --> 00:04:09,310
care don't know you race it at all you

00:04:08,109 --> 00:04:11,319
know yeah cuz they're ridiculously

00:04:09,310 --> 00:04:12,819
expensive right yeah exactly because

00:04:11,319 --> 00:04:14,590
that even the cheapest ones are pretty

00:04:12,819 --> 00:04:17,919
good right there quality is all it is is

00:04:14,590 --> 00:04:19,329
the cost is too much ferry now if you

00:04:17,919 --> 00:04:21,099
buy one of these if you care about the

00:04:19,329 --> 00:04:27,810
tires how many how many people in here

00:04:21,099 --> 00:04:30,630
have a Ferrari you have a fryer

00:04:27,810 --> 00:04:32,639
I'm thinking just maybe if you buy a

00:04:30,630 --> 00:04:34,380
Ferrari you probably care about the

00:04:32,639 --> 00:04:35,700
tires like you're probably caring about

00:04:34,380 --> 00:04:37,350
that and honestly the price probably

00:04:35,700 --> 00:04:38,790
doesn't matter anymore you're probably

00:04:37,350 --> 00:04:40,350
not going the other way you're like I

00:04:38,790 --> 00:04:42,480
just want the best thing and you're like

00:04:40,350 --> 00:04:45,120
a tire guy put my tires on that are

00:04:42,480 --> 00:04:47,520
awesome right and then let's go all the

00:04:45,120 --> 00:04:49,230
way though and say we know they care

00:04:47,520 --> 00:04:50,700
about tires here I mean we absolutely

00:04:49,230 --> 00:04:53,040
know the tires can be the difference

00:04:50,700 --> 00:04:54,419
between winning and losing and so the

00:04:53,040 --> 00:04:55,950
question becomes then all right what

00:04:54,419 --> 00:04:58,020
kind of system are you building at work

00:04:55,950 --> 00:05:00,240
right like like to build things with

00:04:58,020 --> 00:05:02,130
containers you know like let's look at

00:05:00,240 --> 00:05:04,710
some right yeah Safety's probably tires

00:05:02,130 --> 00:05:06,780
matter Road performance amateur racing

00:05:04,710 --> 00:05:09,060
professional racing right like tires

00:05:06,780 --> 00:05:11,669
probably do matter but we start to think

00:05:09,060 --> 00:05:13,230
a little bit more nuanced about at first

00:05:11,669 --> 00:05:14,430
glance and they say I don't care I don't

00:05:13,230 --> 00:05:16,680
want to think about it

00:05:14,430 --> 00:05:18,600
play dice I may not want to think about

00:05:16,680 --> 00:05:20,010
it because maybe I'm an amateur to be

00:05:18,600 --> 00:05:21,330
honestly maybe maybe I'm not a

00:05:20,010 --> 00:05:23,490
professional with this maybe I'm just

00:05:21,330 --> 00:05:24,870
driving a minivan around maybe I'm just

00:05:23,490 --> 00:05:26,460
building containers from my house for

00:05:24,870 --> 00:05:29,220
like on my router or something maybe I

00:05:26,460 --> 00:05:31,470
don't care that much but if I'm starting

00:05:29,220 --> 00:05:33,000
to put into production and do really

00:05:31,470 --> 00:05:34,830
professional things with it and there's

00:05:33,000 --> 00:05:36,780
transactions happening and money going

00:05:34,830 --> 00:05:38,370
through it and then it starts to become

00:05:36,780 --> 00:05:41,520
a completely different set of calculus

00:05:38,370 --> 00:05:43,950
right so so maybe we maybe I've

00:05:41,520 --> 00:05:46,710
convinced you okay so we do care right

00:05:43,950 --> 00:05:47,970
like but how do I even know how to think

00:05:46,710 --> 00:05:50,430
about this right like I think what the

00:05:47,970 --> 00:05:52,020
analogy it's fairly easy to kind of see

00:05:50,430 --> 00:05:53,250
why you care about tires in certain

00:05:52,020 --> 00:05:54,750
contexts and maybe you think about it

00:05:53,250 --> 00:05:57,210
differently but with containers what is

00:05:54,750 --> 00:05:58,620
the context what's the criteria so let's

00:05:57,210 --> 00:06:02,250
start with some criteria for

00:05:58,620 --> 00:06:04,590
understanding traditional options

00:06:02,250 --> 00:06:06,630
typically you'll look at when you're

00:06:04,590 --> 00:06:08,610
doing containers people look at like you

00:06:06,630 --> 00:06:10,470
know Rell fedoras sent to us Debian

00:06:08,610 --> 00:06:12,510
Ubuntu windows obviously you care

00:06:10,470 --> 00:06:15,150
because windows containers don't run on

00:06:12,510 --> 00:06:17,039
Linux at all Linux kind of runs on

00:06:15,150 --> 00:06:18,960
Windows but typically now with wsl -

00:06:17,039 --> 00:06:21,060
it's a real Linux kernel so actually

00:06:18,960 --> 00:06:24,510
it's it's basically Linux running on

00:06:21,060 --> 00:06:26,400
Linux on a VM so like I don't know it

00:06:24,510 --> 00:06:27,810
was it was this emulation thing which

00:06:26,400 --> 00:06:32,400
was crazy and they're like yeah that's

00:06:27,810 --> 00:06:34,380
too hard so now on this side though what

00:06:32,400 --> 00:06:36,900
happens as I mentioned we will typically

00:06:34,380 --> 00:06:38,400
once we have this big technology thing

00:06:36,900 --> 00:06:39,930
in front of us right so when I buy a new

00:06:38,400 --> 00:06:41,340
car that's what I care about tires the

00:06:39,930 --> 00:06:43,530
most right or when I get into a new

00:06:41,340 --> 00:06:45,300
hobby when I first got started f1

00:06:43,530 --> 00:06:48,180
driving I really cared about the tires a

00:06:45,300 --> 00:06:52,680
lot but I'm joking I've never I've never

00:06:48,180 --> 00:06:54,210
done that but you know aspects of these

00:06:52,680 --> 00:06:56,760
things that's when you revive it and I

00:06:54,210 --> 00:06:58,140
think what happens is people people go

00:06:56,760 --> 00:06:59,610
oh I'm gonna do containers maybe I

00:06:58,140 --> 00:07:01,110
should check out this distro this thing

00:06:59,610 --> 00:07:03,690
or this scratch thing or realm minimal

00:07:01,110 --> 00:07:04,919
or Alpine and then they really what they

00:07:03,690 --> 00:07:06,390
care about and they come up with a new

00:07:04,919 --> 00:07:08,250
set of criteria in their brain that they

00:07:06,390 --> 00:07:10,409
care about and and the one that I find

00:07:08,250 --> 00:07:13,110
it's hilarious is typically they don't

00:07:10,409 --> 00:07:14,669
evaluate it from a purely engineering

00:07:13,110 --> 00:07:16,020
perspective where there are trade-offs

00:07:14,669 --> 00:07:17,520
and costs and benefits

00:07:16,020 --> 00:07:19,590
I think it's funny I talk to my

00:07:17,520 --> 00:07:21,450
mechanical engineer friends and they are

00:07:19,590 --> 00:07:23,490
not emotionally attached to what bolts

00:07:21,450 --> 00:07:26,370
they use like when they're building like

00:07:23,490 --> 00:07:27,930
like like machinery to like manufacture

00:07:26,370 --> 00:07:29,350
brakes like my brother-in-law does this

00:07:27,930 --> 00:07:31,510
and he never is like

00:07:29,350 --> 00:07:33,640
the bolts we loved ba they're amazingly

00:07:31,510 --> 00:07:35,050
but in software we have like a massive

00:07:33,640 --> 00:07:36,520
emotional connection to like the

00:07:35,050 --> 00:07:39,490
different tools we use we talk about all

00:07:36,520 --> 00:07:42,010
the time we're like we're more like we

00:07:39,490 --> 00:07:43,480
reminds me more people in the 1700s when

00:07:42,010 --> 00:07:46,720
they probably cared about their tools a

00:07:43,480 --> 00:07:48,280
lot a lot more we're still in my mind in

00:07:46,720 --> 00:07:49,600
a little immature compared like

00:07:48,280 --> 00:07:51,460
mechanical engineering and electrical

00:07:49,600 --> 00:07:53,500
engineering and like we have much more

00:07:51,460 --> 00:07:55,300
emotional connection so we will then we

00:07:53,500 --> 00:07:57,790
will then connect certain values like

00:07:55,300 --> 00:07:59,650
well size matters I'm like okay and then

00:07:57,790 --> 00:08:01,480
we'll then we'll even kind of do the

00:07:59,650 --> 00:08:02,830
thing where we'll attach well the

00:08:01,480 --> 00:08:04,750
security has to be better if the

00:08:02,830 --> 00:08:06,280
quantity smaller right like like the

00:08:04,750 --> 00:08:08,920
tacks surface tech service attack

00:08:06,280 --> 00:08:11,560
service I'm like but if the attack

00:08:08,920 --> 00:08:14,320
service can be one package and if that

00:08:11,560 --> 00:08:15,760
package quality is terrible it's very

00:08:14,320 --> 00:08:17,320
easy to have and like it's a

00:08:15,760 --> 00:08:19,690
two-dimensional problem right it's not a

00:08:17,320 --> 00:08:21,940
single dimensional problem and so I'd

00:08:19,690 --> 00:08:24,190
argue we need to kind of think through

00:08:21,940 --> 00:08:27,700
these things a little more nuanced and

00:08:24,190 --> 00:08:29,500
actually dig like into that 201 level so

00:08:27,700 --> 00:08:30,910
I use as the analogy right like this is

00:08:29,500 --> 00:08:33,190
a joke there is no cloud there's just

00:08:30,910 --> 00:08:35,169
someone else's computer well I would

00:08:33,190 --> 00:08:37,750
also say I would say a corollary to that

00:08:35,169 --> 00:08:40,300
is there is no distress just another

00:08:37,750 --> 00:08:41,890
dependency that you manage yourself that

00:08:40,300 --> 00:08:43,960
you have to patch over time and change

00:08:41,890 --> 00:08:45,490
and make sure it works and then the

00:08:43,960 --> 00:08:47,410
whole dependency and then the

00:08:45,490 --> 00:08:48,760
dependencies for that dependency and

00:08:47,410 --> 00:08:50,380
then the dependencies for those

00:08:48,760 --> 00:08:51,850
dependencies and then the dependencies

00:08:50,380 --> 00:08:53,080
for those dependencies the next thing

00:08:51,850 --> 00:08:56,200
you know now you're building a Linux

00:08:53,080 --> 00:08:57,820
distro in your container and so I don't

00:08:56,200 --> 00:08:59,110
know maybe I've kind of gotten to the

00:08:57,820 --> 00:09:01,060
point where yeah all right maybe what it

00:08:59,110 --> 00:09:02,920
does matter in this right and then let

00:09:01,060 --> 00:09:05,800
me go back to this one so like even

00:09:02,920 --> 00:09:07,210
distro lists actually actually Neil and

00:09:05,800 --> 00:09:08,310
I were digging into this last night out

00:09:07,210 --> 00:09:10,200
of our

00:09:08,310 --> 00:09:12,120
morbid curiosity you know like still

00:09:10,200 --> 00:09:14,340
uses Debian it's still using the demand

00:09:12,120 --> 00:09:16,310
Debian you know dependency tree for some

00:09:14,340 --> 00:09:19,560
of the stuff it's using the going

00:09:16,310 --> 00:09:21,510
dependency tree upstream it's using pi

00:09:19,560 --> 00:09:23,610
PI for the Python stuff it's still

00:09:21,510 --> 00:09:25,200
relying on somebody's dependency tree to

00:09:23,610 --> 00:09:26,640
go grab all the dependencies and so

00:09:25,200 --> 00:09:27,990
there's somebody that maintains that

00:09:26,640 --> 00:09:30,839
dependency tree they're not actually

00:09:27,990 --> 00:09:32,670
doing it so you have to like say yeah I

00:09:30,839 --> 00:09:33,750
think maybe it's not just Linux distros

00:09:32,670 --> 00:09:37,710
maybe it's anybody that builds a

00:09:33,750 --> 00:09:39,150
dependency trees and so I guess you

00:09:37,710 --> 00:09:40,740
start to think about like what criteria

00:09:39,150 --> 00:09:43,440
should I used to even think about this

00:09:40,740 --> 00:09:44,790
right well I think they're very similar

00:09:43,440 --> 00:09:46,410
to the criteria that you would use for

00:09:44,790 --> 00:09:48,120
any Linux distro if you're looking at a

00:09:46,410 --> 00:09:49,440
container image because I've now

00:09:48,120 --> 00:09:50,850
probably convinced you that you need to

00:09:49,440 --> 00:09:52,980
think about the quality of that

00:09:50,850 --> 00:09:54,660
dependency tree such that like the C

00:09:52,980 --> 00:09:57,630
library I'll give you some examples like

00:09:54,660 --> 00:10:01,470
mussels C is very small who thinks

00:09:57,630 --> 00:10:04,410
mussels C is faster than G Lib C faster

00:10:01,470 --> 00:10:07,320
to run yeah I don't think so like

00:10:04,410 --> 00:10:09,779
there's a lot of money spent and making

00:10:07,320 --> 00:10:11,550
G able to see very fast in many many

00:10:09,779 --> 00:10:13,380
many use cases not just fast but

00:10:11,550 --> 00:10:15,089
consistent so it always gets the same

00:10:13,380 --> 00:10:17,610
response works to the real-time kernel

00:10:15,089 --> 00:10:19,350
job is that there there is a long tail

00:10:17,610 --> 00:10:22,410
of 40 million things that get added to G

00:10:19,350 --> 00:10:23,940
Lib C you know so like quality of this

00:10:22,410 --> 00:10:26,850
you got library matters not just the

00:10:23,940 --> 00:10:29,010
size of it you know poor utilities you

00:10:26,850 --> 00:10:31,230
know it's the same thing you know busy

00:10:29,010 --> 00:10:32,550
box is great but like you know good new

00:10:31,230 --> 00:10:33,870
utils have their other their own

00:10:32,550 --> 00:10:35,310
advantages and that there's like you

00:10:33,870 --> 00:10:37,140
know if you have a bunch of legacy

00:10:35,310 --> 00:10:38,820
scripting that's raw eyes on this stuff

00:10:37,140 --> 00:10:41,670
you know like the command-line options

00:10:38,820 --> 00:10:43,320
are different etcetera etc but I would

00:10:41,670 --> 00:10:44,670
say even more important probably the

00:10:43,320 --> 00:10:47,250
most important on here I would say is

00:10:44,670 --> 00:10:49,439
life cycle right like I think

00:10:47,250 --> 00:10:50,759
I kind of tied it together when I said

00:10:49,439 --> 00:10:53,459
like you start to manage those

00:10:50,759 --> 00:10:55,800
dependencies and now that lifecycle in

00:10:53,459 --> 00:10:57,329
two years from now you have CS CD system

00:10:55,800 --> 00:10:59,670
going and you're just pulling the latest

00:10:57,329 --> 00:11:01,290
version of G blip C and then G loop C

00:10:59,670 --> 00:11:04,139
changes and your app breaks in some

00:11:01,290 --> 00:11:06,089
strange way and you're like okay what's

00:11:04,139 --> 00:11:08,759
wrong with this it's running 20% slower

00:11:06,089 --> 00:11:10,800
why first what did it in the dependency

00:11:08,759 --> 00:11:11,819
tree was it you and I'm being nice to

00:11:10,800 --> 00:11:12,899
you I'm saying okay it's to you let's

00:11:11,819 --> 00:11:14,250
see I'm telling you what the problem is

00:11:12,899 --> 00:11:15,629
but in reality you're gonna run your app

00:11:14,250 --> 00:11:17,220
but you're gonna make this 20% slower

00:11:15,629 --> 00:11:18,660
what the hell happen you're gonna be

00:11:17,220 --> 00:11:20,399
farting around for like three hours or

00:11:18,660 --> 00:11:21,930
three days figuring out which dependency

00:11:20,399 --> 00:11:23,339
growth thing then you're gonna be

00:11:21,930 --> 00:11:25,800
figuring out wait what happened to this

00:11:23,339 --> 00:11:28,740
dependency and like what regression

00:11:25,800 --> 00:11:30,000
happened blah blah blah that's stuff I

00:11:28,740 --> 00:11:33,089
don't like dealing with so like you've

00:11:30,000 --> 00:11:34,379
not taken you've not taken it like or or

00:11:33,089 --> 00:11:36,209
a better example as a CVE

00:11:34,379 --> 00:11:38,430
that's you're like oh this version of g

00:11:36,209 --> 00:11:40,740
Lipsy or OpenSSL that we use has some

00:11:38,430 --> 00:11:42,990
CVE okay well then i just rolled on the

00:11:40,740 --> 00:11:44,879
newest version and then it breaks api

00:11:42,990 --> 00:11:47,550
compatibility and now I've taken a

00:11:44,879 --> 00:11:50,100
sysadmin event I run essentially

00:11:47,550 --> 00:11:51,540
actually I've taken AC ICD yum update

00:11:50,100 --> 00:11:53,220
event which didn't even require a

00:11:51,540 --> 00:11:55,019
sysadmin didn't require anybody it was

00:11:53,220 --> 00:11:56,639
just a polling update turned it into a

00:11:55,019 --> 00:11:58,439
developer event we're now a developer

00:11:56,639 --> 00:12:01,019
has to get in their muck with code

00:11:58,439 --> 00:12:03,660
change command you know change arguments

00:12:01,019 --> 00:12:05,009
to function calls and like whatever what

00:12:03,660 --> 00:12:06,839
new version of a library comes out maybe

00:12:05,009 --> 00:12:07,889
a function call difference and you just

00:12:06,839 --> 00:12:09,720
have to get in there tap around with

00:12:07,889 --> 00:12:11,610
code now it's a 2 3 our developer event

00:12:09,720 --> 00:12:12,809
2 a.m. or something you know like what

00:12:11,610 --> 00:12:13,860
hopefully not it's um because with

00:12:12,809 --> 00:12:16,020
containers hopefully you're not doing

00:12:13,860 --> 00:12:18,210
updating them all tonight but

00:12:16,020 --> 00:12:20,550
right you see now you've taken an

00:12:18,210 --> 00:12:21,780
Operations event or even better a CI

00:12:20,550 --> 00:12:23,190
Siddhi event turned it into a

00:12:21,780 --> 00:12:25,470
qualitative thing where human beings

00:12:23,190 --> 00:12:27,270
have to go to touch it now so managing

00:12:25,470 --> 00:12:28,680
those dependencies how you manage those

00:12:27,270 --> 00:12:30,480
in the lifecycle of those dependencies

00:12:28,680 --> 00:12:34,290
how long they're supported for matters

00:12:30,480 --> 00:12:35,670
big time even in containers because

00:12:34,290 --> 00:12:37,260
really that's based on how often you

00:12:35,670 --> 00:12:38,730
want to re architect your app not on how

00:12:37,260 --> 00:12:40,700
often you rebuild the container

00:12:38,730 --> 00:12:43,650
I think people confuse those two things

00:12:40,700 --> 00:12:45,540
second security response having some

00:12:43,650 --> 00:12:47,760
kind of set of human beings that their

00:12:45,540 --> 00:12:50,040
job that is to go look at that set of

00:12:47,760 --> 00:12:52,950
dependencies that dependency tree AKA

00:12:50,040 --> 00:12:55,110
linux distro look at that analyze it

00:12:52,950 --> 00:12:57,210
proactively figure out if there's stuff

00:12:55,110 --> 00:12:58,710
wrong with it and then write down what's

00:12:57,210 --> 00:13:00,860
wrong with it and file CVEs

00:12:58,710 --> 00:13:03,000
and then you can for mentally make that

00:13:00,860 --> 00:13:04,620
sandcastle better over time and

00:13:03,000 --> 00:13:05,700
constantly maintain that sand castle so

00:13:04,620 --> 00:13:07,200
it doesn't get a washed away into the

00:13:05,700 --> 00:13:09,150
ocean I think that's an important thing

00:13:07,200 --> 00:13:11,100
to think about I think the same thing is

00:13:09,150 --> 00:13:13,530
true from a performance engineering

00:13:11,100 --> 00:13:15,420
perspective having a set of people and

00:13:13,530 --> 00:13:17,490
this could be actually users having

00:13:15,420 --> 00:13:19,230
millions of users using those bits

00:13:17,490 --> 00:13:21,300
already that's one set of safety

00:13:19,230 --> 00:13:23,010
mechanism where if I'm using a patchy

00:13:21,300 --> 00:13:24,390
that's built into a linux distro there

00:13:23,010 --> 00:13:26,550
may be millions of users using that

00:13:24,390 --> 00:13:28,320
patchy I put that Apache in a container

00:13:26,550 --> 00:13:29,910
it's a heck of a lot better to use the

00:13:28,320 --> 00:13:32,010
one that I already know is tested by 50

00:13:29,910 --> 00:13:33,390
million people then to like go build my

00:13:32,010 --> 00:13:36,060
own from scratch and it's some version

00:13:33,390 --> 00:13:38,070
that nobody's using so distros do kind

00:13:36,060 --> 00:13:40,320
of create gravity around certain

00:13:38,070 --> 00:13:42,120
versions of upstream software but then

00:13:40,320 --> 00:13:44,370
also having specific professional people

00:13:42,120 --> 00:13:46,890
that go and look and maybe load test it

00:13:44,370 --> 00:13:48,990
and write white papers and like go

00:13:46,890 --> 00:13:51,420
actually like for example in the CNC F

00:13:48,990 --> 00:13:53,880
go do upstream testing where we run the

00:13:51,420 --> 00:13:55,470
2048 node cluster and test all that

00:13:53,880 --> 00:13:57,360
software stack together and drive that

00:13:55,470 --> 00:13:59,070
and actually like proactively push the

00:13:57,360 --> 00:14:00,420
software because there is no such thing

00:13:59,070 --> 00:14:01,710
as good performance there's often you

00:14:00,420 --> 00:14:04,170
know typically when you're tune your

00:14:01,710 --> 00:14:05,580
tuning for specific purposes right I

00:14:04,170 --> 00:14:07,830
mean general performance is something

00:14:05,580 --> 00:14:09,360
that happens over time but but to

00:14:07,830 --> 00:14:11,220
scissor they tune something takes human

00:14:09,360 --> 00:14:14,090
beings to go in and specifically tuned

00:14:11,220 --> 00:14:14,090
for for work

00:14:14,100 --> 00:14:19,480
so how do things how do these things

00:14:17,230 --> 00:14:20,590
work so like I'll now go into the deeper

00:14:19,480 --> 00:14:24,160
part where I try to hurt your brain

00:14:20,590 --> 00:14:26,700
right so so you know let's let's start

00:14:24,160 --> 00:14:28,990
how many of you programmed in C before

00:14:26,700 --> 00:14:31,000
decent number good all right the people

00:14:28,990 --> 00:14:32,770
have not programmed in C I mean how many

00:14:31,000 --> 00:14:35,890
who here is never programmed at all

00:14:32,770 --> 00:14:37,810
raise your hand okay good I'm talking

00:14:35,890 --> 00:14:40,630
about fairly effective lines okay so

00:14:37,810 --> 00:14:41,170
when you program at C to refresh your

00:14:40,630 --> 00:14:43,630
memory

00:14:41,170 --> 00:14:45,520
you know you can basically just do a GE

00:14:43,630 --> 00:14:47,560
oh when you use DCC you can just compile

00:14:45,520 --> 00:14:50,980
into a dot o file right like and I'm

00:14:47,560 --> 00:14:52,810
basically pull live SSO pull you know

00:14:50,980 --> 00:14:55,210
the components of GFC that you use

00:14:52,810 --> 00:14:56,620
different you know libraries and just

00:14:55,210 --> 00:14:58,750
create a binary and that binary love

00:14:56,620 --> 00:15:00,010
everything in it that needs literally

00:14:58,750 --> 00:15:02,050
when you you know when you basically

00:15:00,010 --> 00:15:04,150
type dot slash and run that binary that

00:15:02,050 --> 00:15:05,530
alpha finer Linux the Linux loader will

00:15:04,150 --> 00:15:07,450
know how to like load that thing in a

00:15:05,530 --> 00:15:09,880
memory start executing at like bit one

00:15:07,450 --> 00:15:11,590
and just start going right that's called

00:15:09,880 --> 00:15:15,010
statically compiling we learned how to

00:15:11,590 --> 00:15:16,810
do this in like I don't know 1970s right

00:15:15,010 --> 00:15:18,070
like I don't know ish before that

00:15:16,810 --> 00:15:19,360
actually it was worse because you

00:15:18,070 --> 00:15:22,060
couldn't even you can even create a

00:15:19,360 --> 00:15:23,410
binary that was even portable at all but

00:15:22,060 --> 00:15:25,240
at least with this we have now some

00:15:23,410 --> 00:15:27,430
level of portability I can run this

00:15:25,240 --> 00:15:29,710
binary on any kernel that's similar to

00:15:27,430 --> 00:15:31,330
the one that I compiled it on and the

00:15:29,710 --> 00:15:33,070
source code itself is is completely

00:15:31,330 --> 00:15:34,660
portable because I can actually move it

00:15:33,070 --> 00:15:36,790
between like different architectures etc

00:15:34,660 --> 00:15:38,350
etc but you should be thinking in the

00:15:36,790 --> 00:15:40,590
context of containers oh wait a minute

00:15:38,350 --> 00:15:42,690
like obviously a

00:15:40,590 --> 00:15:44,430
you know obviously an armed miner is not

00:15:42,690 --> 00:15:46,410
gonna run on x86 obviously a power

00:15:44,430 --> 00:15:48,120
binary is not gonna run on arm grab the

00:15:46,410 --> 00:15:50,460
dock so there are definitely limits to

00:15:48,120 --> 00:15:52,200
compatibility and portability and this

00:15:50,460 --> 00:15:54,630
is one riot I harp on a lot people say

00:15:52,200 --> 00:15:56,940
containers are portable I'm like defined

00:15:54,630 --> 00:16:00,270
portable I mean like yeah I could pull

00:15:56,940 --> 00:16:03,300
an arm I could pull an arm you know

00:16:00,270 --> 00:16:04,650
manifest lists and cache it on the next

00:16:03,300 --> 00:16:06,810
eighty six box that doesn't mean I can

00:16:04,650 --> 00:16:08,490
run it it's compatible like it will I

00:16:06,810 --> 00:16:10,260
can pull it with pod man or docker and

00:16:08,490 --> 00:16:11,700
save the image locally yeah but you

00:16:10,260 --> 00:16:14,820
can't do anything with it you can't run

00:16:11,700 --> 00:16:16,140
it so like this is where we start to

00:16:14,820 --> 00:16:17,640
realize oh wait a minute I do need to

00:16:16,140 --> 00:16:19,830
understand how some of this works but

00:16:17,640 --> 00:16:21,660
the downside of statically linking

00:16:19,830 --> 00:16:24,390
though and this is becoming trendy again

00:16:21,660 --> 00:16:26,250
like especially in golang and see like

00:16:24,390 --> 00:16:27,810
people are getting I would say this has

00:16:26,250 --> 00:16:29,430
become kind of a hot hipster thing to do

00:16:27,810 --> 00:16:30,839
is like what statically compiled stuff

00:16:29,430 --> 00:16:32,010
and they like completely forgot why we

00:16:30,839 --> 00:16:36,240
created libraries and why we have

00:16:32,010 --> 00:16:38,040
dependencies but when you go to update

00:16:36,240 --> 00:16:39,240
it it's a pain in the butt because every

00:16:38,040 --> 00:16:41,490
time I need to update I have to

00:16:39,240 --> 00:16:42,960
recompile right like if Lib SSL has a

00:16:41,490 --> 00:16:44,880
problem I have to now recompile the

00:16:42,960 --> 00:16:46,560
entire binary and if I have limits of

00:16:44,880 --> 00:16:48,510
selling 20 binaries I get recompile all

00:16:46,560 --> 00:16:50,580
those 20 binaries rebuilding a container

00:16:48,510 --> 00:16:52,320
image you may take five minutes or two

00:16:50,580 --> 00:16:54,540
minutes or one minute recompiling a

00:16:52,320 --> 00:16:56,610
giant C program and then rebuilding the

00:16:54,540 --> 00:16:58,050
thing might not take ten minutes or 20

00:16:56,610 --> 00:17:01,190
minutes so like we get into this thing

00:16:58,050 --> 00:17:03,420
where this gets worse and worse so

00:17:01,190 --> 00:17:05,579
instead of reinventing the wheel and

00:17:03,420 --> 00:17:06,959
going back to 1970 something we now

00:17:05,579 --> 00:17:09,060
realize oh wait a minute there's this

00:17:06,959 --> 00:17:12,510
awesome feature in Linux with elf miners

00:17:09,060 --> 00:17:15,030
we actually put the loader as the first

00:17:12,510 --> 00:17:16,890
bits in the binary and then the binary

00:17:15,030 --> 00:17:18,420
is smart enough when the Linux when the

00:17:16,890 --> 00:17:20,490
Linux learner loads it to basically read

00:17:18,420 --> 00:17:23,550
the loader and go hey go find those

00:17:20,490 --> 00:17:26,069
files on disk like like open SSL and you

00:17:23,550 --> 00:17:28,860
Lipsy don't actually have to live in the

00:17:26,069 --> 00:17:30,000
actual binary because the Linux you know

00:17:28,860 --> 00:17:31,410
the Linux operating system has this

00:17:30,000 --> 00:17:33,179
capability built in and so does every

00:17:31,410 --> 00:17:34,920
other operating system on the planet but

00:17:33,179 --> 00:17:37,590
with you know these technologies turned

00:17:34,920 --> 00:17:39,630
on GCC elf and the loader we can now go

00:17:37,590 --> 00:17:41,680
find these these dependencies on disk

00:17:39,630 --> 00:17:43,840
but we've created a new problem now

00:17:41,680 --> 00:17:45,640
we have dependencies how do we get those

00:17:43,840 --> 00:17:47,890
files on disk that's a different problem

00:17:45,640 --> 00:17:49,510
that's a logistics problem and typically

00:17:47,890 --> 00:17:51,160
we would hand those dependencies with

00:17:49,510 --> 00:17:53,320
you know if you hand those dependencies

00:17:51,160 --> 00:17:55,690
with your binary now you're in now now

00:17:53,320 --> 00:17:58,350
you're in this in this pal world where

00:17:55,690 --> 00:18:01,870
we just Myka just talked about it with

00:17:58,350 --> 00:18:03,190
with fedoras silver blue if you have how

00:18:01,870 --> 00:18:05,620
many of you were in that talk or any of

00:18:03,190 --> 00:18:08,200
you so some of you if you have two

00:18:05,620 --> 00:18:09,370
different overlay offenses and they

00:18:08,200 --> 00:18:11,620
deliver two different versions of a

00:18:09,370 --> 00:18:13,660
library you now have two copies of that

00:18:11,620 --> 00:18:16,210
library on this right because we're not

00:18:13,660 --> 00:18:18,850
managing the dependencies we're not

00:18:16,210 --> 00:18:20,950
managing the versions of the flatbacks

00:18:18,850 --> 00:18:22,930
and the set of dependencies that go into

00:18:20,950 --> 00:18:25,000
that so actually this problem is very

00:18:22,930 --> 00:18:26,410
apropos to that so like you start to

00:18:25,000 --> 00:18:28,210
realize oh man we have a dependency

00:18:26,410 --> 00:18:30,040
trial problem and a versioning of

00:18:28,210 --> 00:18:31,870
dependencies problem and that's a really

00:18:30,040 --> 00:18:36,580
hairy Pramod spatial and temporal in

00:18:31,870 --> 00:18:38,680
nature so to fix that we come up with

00:18:36,580 --> 00:18:42,040
packaging right like packaging what is

00:18:38,680 --> 00:18:43,870
packaging packaging is a set of human

00:18:42,040 --> 00:18:45,520
beings that has to have SME knowledge

00:18:43,870 --> 00:18:46,750
that go out and create that set of

00:18:45,520 --> 00:18:49,000
dependencies as what we call a

00:18:46,750 --> 00:18:50,590
dependency tree which of dependency tree

00:18:49,000 --> 00:18:52,690
is nothing more than just a group of

00:18:50,590 --> 00:18:54,580
these dependencies that we put in one

00:18:52,690 --> 00:18:57,610
place and we version it we go that's

00:18:54,580 --> 00:19:00,570
Fedora 30 that's really you know this is

00:18:57,610 --> 00:19:03,220
a boom 240 know whatever you know like

00:19:00,570 --> 00:19:05,410
like and then we have this depth solver

00:19:03,220 --> 00:19:07,300
a dependency solver built into the

00:19:05,410 --> 00:19:09,280
packaging system that then goes and

00:19:07,300 --> 00:19:12,280
knows to search the right version of the

00:19:09,280 --> 00:19:14,710
dependency tree aka the yum repo pull it

00:19:12,280 --> 00:19:16,870
down and then only install the specific

00:19:14,710 --> 00:19:18,730
versions of that set of dependencies in

00:19:16,870 --> 00:19:21,040
IE so now when I install this version of

00:19:18,730 --> 00:19:22,570
live SSR this version of GC it gets on

00:19:21,040 --> 00:19:24,640
to disk the Linux loader can find it

00:19:22,570 --> 00:19:26,350
boom we're good we can load the RPM into

00:19:24,640 --> 00:19:27,820
you know or we can load the binary end

00:19:26,350 --> 00:19:29,620
of memory and boom off we go

00:19:27,820 --> 00:19:31,240
everything's good this all happens in a

00:19:29,620 --> 00:19:33,160
container like none of this is different

00:19:31,240 --> 00:19:35,200
right just because we have two different

00:19:33,160 --> 00:19:36,550
containers it doesn't necessarily mean

00:19:35,200 --> 00:19:39,100
that we want two different versions of

00:19:36,550 --> 00:19:40,420
live SSL all the time like sometimes we

00:19:39,100 --> 00:19:42,550
still kind of want to make sure they're

00:19:40,420 --> 00:19:43,600
using the same version of live SSL so

00:19:42,550 --> 00:19:44,900
that these two different containers

00:19:43,600 --> 00:19:46,280
perform

00:19:44,900 --> 00:19:48,170
like you know sometimes we want them to

00:19:46,280 --> 00:19:50,570
communicate and perform identically so

00:19:48,170 --> 00:19:51,890
so I guess these dependencies this is

00:19:50,570 --> 00:19:53,060
not all you know this isn't self

00:19:51,890 --> 00:19:54,770
everything but we're getting closer and

00:19:53,060 --> 00:19:58,040
closer to understanding why we built all

00:19:54,770 --> 00:20:00,890
this stuff right same is true with other

00:19:58,040 --> 00:20:02,810
things though not just G Lipsy but with

00:20:00,890 --> 00:20:04,580
like Python right a lot of people don't

00:20:02,810 --> 00:20:06,740
realize Python the same thing right

00:20:04,580 --> 00:20:08,620
instead of this happening when I load

00:20:06,740 --> 00:20:11,720
the script it happens when I load the

00:20:08,620 --> 00:20:14,600
Python interpreter which is written in C

00:20:11,720 --> 00:20:16,010
and still relies on open SSL and live

00:20:14,600 --> 00:20:17,060
SSL and things like that because most

00:20:16,010 --> 00:20:19,100
people don't read

00:20:17,060 --> 00:20:22,490
tripped ography algorithms except for

00:20:19,100 --> 00:20:25,550
going in in in the actual scripting

00:20:22,490 --> 00:20:27,680
language and in fact as an aside Red Hat

00:20:25,550 --> 00:20:30,080
is patching going to actually have an

00:20:27,680 --> 00:20:31,580
optional ability to use open SSL because

00:20:30,080 --> 00:20:33,260
open SSL has been through all the

00:20:31,580 --> 00:20:34,700
fitness requirements and so it's much

00:20:33,260 --> 00:20:37,070
easier to get through Phipps compliance

00:20:34,700 --> 00:20:38,710
than like actually using the the boring

00:20:37,070 --> 00:20:42,290
as to self stuff that's built into going

00:20:38,710 --> 00:20:44,210
so like even that is optionally in

00:20:42,290 --> 00:20:45,680
different ways but but but you'll see

00:20:44,210 --> 00:20:47,000
now here now we have another set of

00:20:45,680 --> 00:20:48,890
dependencies right not only do we have

00:20:47,000 --> 00:20:50,840
the operating system dependency tree we

00:20:48,890 --> 00:20:52,730
now have like Pip and NPM and

00:20:50,840 --> 00:20:54,800
pie-pie and all the other dependency

00:20:52,730 --> 00:20:55,940
tree to wing for every different

00:20:54,800 --> 00:20:57,830
language because nobody could ever

00:20:55,940 --> 00:20:59,510
standardize on one and I thought about

00:20:57,830 --> 00:21:01,490
starting a business around this as I was

00:20:59,510 --> 00:21:02,570
doing this I'm like I need to be I need

00:21:01,490 --> 00:21:04,670
to start business where I basically

00:21:02,570 --> 00:21:05,840
package all of that stuff have it in one

00:21:04,670 --> 00:21:08,410
place and build a create like the

00:21:05,840 --> 00:21:11,210
ultimate satellite server for every like

00:21:08,410 --> 00:21:12,670
possible version of every language may

00:21:11,210 --> 00:21:17,280
than everything

00:21:12,670 --> 00:21:20,110
I know all of us let's just start it

00:21:17,280 --> 00:21:21,190
alright alright so now we understand why

00:21:20,110 --> 00:21:22,660
we have dependencies why we don't

00:21:21,190 --> 00:21:24,730
statically compiled things anymore cuz

00:21:22,660 --> 00:21:27,640
that's 1970 and it's cool but it's not

00:21:24,730 --> 00:21:28,870
that cool and it's cool for some little

00:21:27,640 --> 00:21:31,690
things but it's not cool in a general

00:21:28,870 --> 00:21:33,280
case but now let's think about we have

00:21:31,690 --> 00:21:35,200
in this new level now we have this new

00:21:33,280 --> 00:21:37,090
set of technology we have these OCI

00:21:35,200 --> 00:21:38,830
container images right and now the same

00:21:37,090 --> 00:21:40,420
problem is what what Mika described in

00:21:38,830 --> 00:21:43,600
the flat house now we've got another set

00:21:40,420 --> 00:21:46,210
of metadata on top of this dependency

00:21:43,600 --> 00:21:47,500
tree and we've got snapshot at versions

00:21:46,210 --> 00:21:49,690
of these dependency trees basically

00:21:47,500 --> 00:21:51,460
baked into these container images or os

00:21:49,690 --> 00:21:54,430
trees it's the same it's the same exact

00:21:51,460 --> 00:21:57,130
technical problem with containers though

00:21:54,430 --> 00:21:59,740
you end up with I don't know how many of

00:21:57,130 --> 00:22:01,990
you saw the pot man talk by Vashi and

00:21:59,740 --> 00:22:03,790
Sally but they talked this through this

00:22:01,990 --> 00:22:05,050
a little bit but there's there's a

00:22:03,790 --> 00:22:06,670
couple different there's a couple of

00:22:05,050 --> 00:22:08,800
different JSON files that basically get

00:22:06,670 --> 00:22:10,690
creative but basically one gets consumed

00:22:08,800 --> 00:22:13,150
from the container image the container

00:22:10,690 --> 00:22:14,680
engine analyzes it and uses it as some

00:22:13,150 --> 00:22:15,910
of the component like architecture and

00:22:14,680 --> 00:22:18,670
other things to make decisions on which

00:22:15,910 --> 00:22:21,400
version the poll which versions of the

00:22:18,670 --> 00:22:23,020
actual blobs to pull and then actually

00:22:21,400 --> 00:22:25,930
will then assemble some of those pieces

00:22:23,020 --> 00:22:27,880
into new new JSON file called config dot

00:22:25,930 --> 00:22:29,680
JSON they don't hand that off to run C

00:22:27,880 --> 00:22:32,470
and then actually once it's basically

00:22:29,680 --> 00:22:34,270
expanded the route FS which has all of

00:22:32,470 --> 00:22:36,130
these dependencies in it the difference

00:22:34,270 --> 00:22:38,320
here now though is that that dependency

00:22:36,130 --> 00:22:40,180
tree came along for the ride right like

00:22:38,320 --> 00:22:42,220
it was already installed correctly the

00:22:40,180 --> 00:22:44,080
developer decided what dependencies

00:22:42,220 --> 00:22:46,210
needed to pull in when they were

00:22:44,080 --> 00:22:47,860
building the code the end user doesn't

00:22:46,210 --> 00:22:50,410
decide any of that right I got just get

00:22:47,860 --> 00:22:52,180
whatever they gave me but then but then

00:22:50,410 --> 00:22:55,120
again the same thing happens when I load

00:22:52,180 --> 00:22:57,220
this in the memory you know the HTTP de

00:22:55,120 --> 00:22:58,720
binary still has that LD Linux loader

00:22:57,220 --> 00:23:00,610
and it goes and finds those but it finds

00:22:58,720 --> 00:23:02,140
it in the image in the route FS that's

00:23:00,610 --> 00:23:03,880
been expanded from the OCI container

00:23:02,140 --> 00:23:05,700
image on disk and all then then all that

00:23:03,880 --> 00:23:07,619
magical stuff happens but

00:23:05,700 --> 00:23:09,509
and then and then you end up with you

00:23:07,619 --> 00:23:12,209
know we had some new technologies Oh see

00:23:09,509 --> 00:23:13,889
I expect our gzip JSON right like these

00:23:12,209 --> 00:23:15,509
are basically very basic technologies

00:23:13,889 --> 00:23:17,909
but this is how you construct and use an

00:23:15,509 --> 00:23:19,950
OSI I can dr AKA dr container in it

00:23:17,909 --> 00:23:24,749
which Dan's not here so they can't yell

00:23:19,950 --> 00:23:27,389
at me about using the D work so but then

00:23:24,749 --> 00:23:29,789
now you can create this new nastier

00:23:27,389 --> 00:23:31,859
dependency tree this like a layered

00:23:29,789 --> 00:23:33,299
dependency tree right okay so I like

00:23:31,859 --> 00:23:36,089
blocking people through this because

00:23:33,299 --> 00:23:38,909
people always get confused about alright

00:23:36,089 --> 00:23:42,659
if I use a base image and then I start

00:23:38,909 --> 00:23:45,450
in this example I have like so in this

00:23:42,659 --> 00:23:48,539
one I show this is the basic image we

00:23:45,450 --> 00:23:52,139
created right and and but these are some

00:23:48,539 --> 00:23:54,539
source images so like maybe this guy you

00:23:52,139 --> 00:23:56,249
know installs like this guy basically

00:23:54,539 --> 00:23:59,099
builds on top of that and replaces the

00:23:56,249 --> 00:24:00,570
Apache right so now I have this do you

00:23:59,099 --> 00:24:02,070
have seen this live SSL with this newer

00:24:00,570 --> 00:24:04,649
version of Apache or different version

00:24:02,070 --> 00:24:06,029
of Apache and then this guy or gal goes

00:24:04,649 --> 00:24:07,679
and builds over that one and that

00:24:06,029 --> 00:24:09,690
replaces the G Lib C with a different

00:24:07,679 --> 00:24:11,129
version of julep C so now really the G

00:24:09,690 --> 00:24:12,690
would see and the Apache are different

00:24:11,129 --> 00:24:14,700
than this image and this one they

00:24:12,690 --> 00:24:16,109
replace the live SSL so the Apache in

00:24:14,700 --> 00:24:17,429
the limits of cell are different and now

00:24:16,109 --> 00:24:18,989
these are different and it's basically a

00:24:17,429 --> 00:24:21,329
different set of permutations I've put

00:24:18,989 --> 00:24:23,099
in this and now these things all four of

00:24:21,329 --> 00:24:25,139
these different container images look

00:24:23,099 --> 00:24:26,789
kind of the same they could have even

00:24:25,139 --> 00:24:27,959
the exact same docker file to build them

00:24:26,789 --> 00:24:29,369
but they have completely different

00:24:27,959 --> 00:24:31,259
performance characteristics because

00:24:29,369 --> 00:24:33,299
maybe there's a regression in julep C or

00:24:31,259 --> 00:24:34,859
there's a regression in Lib SSL or maybe

00:24:33,299 --> 00:24:36,959
there's a new feature in limits now that

00:24:34,859 --> 00:24:37,919
makes it faster and now they have

00:24:36,959 --> 00:24:39,719
different performance characteristics

00:24:37,919 --> 00:24:41,279
different security characteristics but

00:24:39,719 --> 00:24:42,629
they've looked identically architectural

00:24:41,279 --> 00:24:44,180
II but there's nothing different

00:24:42,629 --> 00:24:46,130
architectural

00:24:44,180 --> 00:24:49,100
all right so now that I've basically

00:24:46,130 --> 00:24:50,690
scared you about container images and

00:24:49,100 --> 00:24:52,790
then what happens is we define those

00:24:50,690 --> 00:24:55,280
those different sets right so like in

00:24:52,790 --> 00:24:56,960
that particular one you know I showed a

00:24:55,280 --> 00:24:58,850
different version of Apache but here I'm

00:24:56,960 --> 00:25:01,730
showing like a version of like my spell

00:24:58,850 --> 00:25:03,500
or something and then we we communicate

00:25:01,730 --> 00:25:05,180
to the end user basically the Builder of

00:25:03,500 --> 00:25:07,520
the container image builds out this

00:25:05,180 --> 00:25:10,160
dependency tree this set this actual

00:25:07,520 --> 00:25:12,770
like version dependency tree uses it to

00:25:10,160 --> 00:25:14,450
construct a gainer image and then builds

00:25:12,770 --> 00:25:16,550
another dependency tree and then

00:25:14,450 --> 00:25:18,620
actually like labels them and

00:25:16,550 --> 00:25:21,440
communicates the end user like this is

00:25:18,620 --> 00:25:22,700
how you use the 4.0.1 version of this

00:25:21,440 --> 00:25:25,370
stuff that's that set of permutations

00:25:22,700 --> 00:25:26,570
and then here's how you use the 4.00

00:25:25,370 --> 00:25:28,340
version which is a different set of

00:25:26,570 --> 00:25:29,780
permutation but they're basically using

00:25:28,340 --> 00:25:33,110
you know different permutations of

00:25:29,780 --> 00:25:35,660
geodesy and Apache etc or whatever but

00:25:33,110 --> 00:25:38,690
but it's another layer to add confusion

00:25:35,660 --> 00:25:40,760
to people so and you think okay do I

00:25:38,690 --> 00:25:41,570
need like do I want to do all this stuff

00:25:40,760 --> 00:25:43,010
myself

00:25:41,570 --> 00:25:44,870
like do I want to manage every single

00:25:43,010 --> 00:25:47,060
piece of this myself

00:25:44,870 --> 00:25:49,700
I won't go deep into this but this

00:25:47,060 --> 00:25:52,550
actually represents what happens at a

00:25:49,700 --> 00:25:54,530
start time what or vaisya and and Sally

00:25:52,550 --> 00:25:56,390
covered container image gets pulled down

00:25:54,530 --> 00:25:57,980
there are variables embedded in image

00:25:56,390 --> 00:26:01,220
there's metadata there's a config file

00:25:57,980 --> 00:26:03,500
there's basically a JSON file they

00:26:01,220 --> 00:26:06,290
caught a JSON blob and then the user

00:26:03,500 --> 00:26:09,830
basically for example if you run pod man

00:26:06,290 --> 00:26:11,090
run and you say you run a command at

00:26:09,830 --> 00:26:13,970
their hand and you pass it a command

00:26:11,090 --> 00:26:15,830
you're overriding the CMD variable so

00:26:13,970 --> 00:26:17,600
basically the user option overrides if

00:26:15,830 --> 00:26:19,970
there was a CMD in the container image

00:26:17,600 --> 00:26:21,380
you'll actually override it right so

00:26:19,970 --> 00:26:22,880
like basically the container engine's

00:26:21,380 --> 00:26:24,800
job is to basically take the summation

00:26:22,880 --> 00:26:26,990
of the stuff you typed on the command

00:26:24,800 --> 00:26:29,630
line plus what's in the very in the in

00:26:26,990 --> 00:26:31,700
the in the image you know Rob should say

00:26:29,630 --> 00:26:33,170
I'm sorry the image variables the user

00:26:31,700 --> 00:26:35,960
can override those variables and then

00:26:33,170 --> 00:26:37,490
the runtime the actual engine itself can

00:26:35,960 --> 00:26:39,380
actually override some of these things

00:26:37,490 --> 00:26:40,940
like for example selinux rules the

00:26:39,380 --> 00:26:42,770
container engine decides whether it uses

00:26:40,940 --> 00:26:44,300
less selinux rules not necessarily the

00:26:42,770 --> 00:26:46,610
end user and set comparables things like

00:26:44,300 --> 00:26:47,809
that the user can override them but but

00:26:46,610 --> 00:26:50,059
typically they're the

00:26:47,809 --> 00:26:51,889
engine will default then we'll go crate

00:26:50,059 --> 00:26:54,320
this config that JSON hand this off

00:26:51,889 --> 00:26:56,629
along with the route FS to the run to

00:26:54,320 --> 00:26:57,950
the container runtime to basically run C

00:26:56,629 --> 00:27:00,109
and then the kernel will go and do this

00:26:57,950 --> 00:27:05,389
right so there's a lot of complexity

00:27:00,109 --> 00:27:07,489
happening there and as I showed you

00:27:05,389 --> 00:27:09,409
before like you know now you have these

00:27:07,489 --> 00:27:12,229
different sets of dependency trees right

00:27:09,409 --> 00:27:15,320
and now you can start to architect at a

00:27:12,229 --> 00:27:16,549
higher level then then the Linux distro

00:27:15,320 --> 00:27:18,649
if you will right like this is out of

00:27:16,549 --> 00:27:20,989
the Linux distros hands this more maps

00:27:18,649 --> 00:27:23,419
to the actual business problems that

00:27:20,989 --> 00:27:24,739
Enterprise have where like I'll have a

00:27:23,419 --> 00:27:26,839
customer that will say I want a real

00:27:24,739 --> 00:27:28,489
base image and then we want to add some

00:27:26,839 --> 00:27:30,799
stuff that I want everybody at our

00:27:28,489 --> 00:27:32,389
company to use like we want a specific

00:27:30,799 --> 00:27:35,210
version of oh good best to sell we want

00:27:32,389 --> 00:27:36,529
like the Etsy message of the day to say

00:27:35,210 --> 00:27:38,119
something like don't break in our

00:27:36,529 --> 00:27:40,519
computers will sue you blah blah blah

00:27:38,119 --> 00:27:43,159
and then and then we will have s Emmys

00:27:40,519 --> 00:27:45,289
for like Apache and nginx and my stuff

00:27:43,159 --> 00:27:48,529
and what this really represents here is

00:27:45,289 --> 00:27:50,479
this is the same collaboration that we

00:27:48,529 --> 00:27:52,159
would do with those s enemies except

00:27:50,479 --> 00:27:55,399
historically we collaborated in a file

00:27:52,159 --> 00:27:56,960
system so basically the you know there

00:27:55,399 --> 00:27:58,609
would be some kind of burn in team that

00:27:56,960 --> 00:27:59,929
would go and build a server right then

00:27:58,609 --> 00:28:01,669
they would hand it off to sis evans the

00:27:59,929 --> 00:28:03,440
stamens would configure the core build

00:28:01,669 --> 00:28:05,059
and then they haven't went hand it off

00:28:03,440 --> 00:28:06,409
to the job of people and the job people

00:28:05,059 --> 00:28:07,729
would dump a bunch of tar balls on the

00:28:06,409 --> 00:28:10,549
file system because they're crazy and

00:28:07,729 --> 00:28:12,289
then the job of programmers would say

00:28:10,549 --> 00:28:14,809
thanks for those JVM ins will dump our

00:28:12,289 --> 00:28:15,919
jar files in there but but if you really

00:28:14,809 --> 00:28:17,419
think what's happening at a higher level

00:28:15,919 --> 00:28:19,489
here this is a place where people

00:28:17,419 --> 00:28:21,019
collaborate in the file system and we

00:28:19,489 --> 00:28:22,669
may have used ansible for this we may

00:28:21,019 --> 00:28:24,259
have used rpm for this we may have used

00:28:22,669 --> 00:28:26,089
young we may have used all these

00:28:24,259 --> 00:28:28,039
different tools but it's flour sugar

00:28:26,089 --> 00:28:30,379
eggs and water for us to basically bake

00:28:28,039 --> 00:28:31,700
cakes and with different SMEs or subject

00:28:30,379 --> 00:28:35,029
matter experts and know different parts

00:28:31,700 --> 00:28:37,260
of these stacks this is probably where

00:28:35,029 --> 00:28:38,520
we should spend more of our time

00:28:37,260 --> 00:28:40,320
down in like building all the

00:28:38,520 --> 00:28:42,420
dependencies again we should probably

00:28:40,320 --> 00:28:45,570
start to think about how we want to how

00:28:42,420 --> 00:28:47,190
we want to remix the flour sugar eggs in

00:28:45,570 --> 00:28:48,720
water then basically building the flour

00:28:47,190 --> 00:28:51,150
eggs and you know I don't necessarily

00:28:48,720 --> 00:28:52,620
want to grind up flour at my house and

00:28:51,150 --> 00:28:53,760
make the flour but I want to use the

00:28:52,620 --> 00:28:55,080
flour in the way that I want it now I

00:28:53,760 --> 00:28:56,700
would say this is probably where we

00:28:55,080 --> 00:28:58,020
should start to think about it more and

00:28:56,700 --> 00:28:59,760
so this is what it would look like from

00:28:58,020 --> 00:29:01,950
a container perspective right I would

00:28:59,760 --> 00:29:03,810
say there's a lot of work to be done by

00:29:01,950 --> 00:29:05,700
the end-user around how you tag things

00:29:03,810 --> 00:29:06,930
and how you communicate to the end-user

00:29:05,700 --> 00:29:08,550
how they should consume your container

00:29:06,930 --> 00:29:10,950
images but I don't know that there's a

00:29:08,550 --> 00:29:14,160
lot of value in going back and like

00:29:10,950 --> 00:29:15,600
basically evaluating the underlying

00:29:14,160 --> 00:29:20,010
dependencies and mucking with those and

00:29:15,600 --> 00:29:21,300
rebuilding all those ourself so I talked

00:29:20,010 --> 00:29:25,620
about the criteria but what about the

00:29:21,300 --> 00:29:27,840
context so from this perspective like we

00:29:25,620 --> 00:29:29,790
thought and we thought that basically

00:29:27,840 --> 00:29:31,650
containers solved the works on my laptop

00:29:29,790 --> 00:29:33,090
problem right we would always have this

00:29:31,650 --> 00:29:34,740
problem before how many of you are

00:29:33,090 --> 00:29:37,830
familiar that works on my laptop problem

00:29:34,740 --> 00:29:39,210
good a lot of people so so historically

00:29:37,830 --> 00:29:43,080
I worked in American Greetings back in

00:29:39,210 --> 00:29:45,450
like 2003 or something 2004 or five

00:29:43,080 --> 00:29:46,650
and basically we would have developers

00:29:45,450 --> 00:29:48,240
build Python apps and they would

00:29:46,650 --> 00:29:50,220
literally develop develop on their

00:29:48,240 --> 00:29:51,540
laptop like waiting that VMs back then

00:29:50,220 --> 00:29:52,830
there were no vm's really on their

00:29:51,540 --> 00:29:54,570
laptops they would literally just have

00:29:52,830 --> 00:29:56,070
Python on their laptop would be some

00:29:54,570 --> 00:29:57,150
random version of Python it wouldn't be

00:29:56,070 --> 00:29:59,880
the one that we've had on the server's

00:29:57,150 --> 00:30:02,520
they would do pip or at the time I think

00:29:59,880 --> 00:30:04,650
we had easy install yeah we were using

00:30:02,520 --> 00:30:06,390
eggs and easy install and we would muck

00:30:04,650 --> 00:30:08,370
with those and they would get some happy

00:30:06,390 --> 00:30:10,440
thing they hold together and then they'd

00:30:08,370 --> 00:30:12,570
hand that to us and ops and be like okay

00:30:10,440 --> 00:30:14,460
run my thing and it would break in all

00:30:12,570 --> 00:30:15,990
kinds of horrible ways because like I

00:30:14,460 --> 00:30:16,679
would try to install a different size

00:30:15,990 --> 00:30:18,179
depends

00:30:16,679 --> 00:30:19,379
converting a Python than they were using

00:30:18,179 --> 00:30:20,549
and there would always be some weird

00:30:19,379 --> 00:30:22,259
circular thing where certain

00:30:20,549 --> 00:30:23,789
dependencies with break bubbeleh that

00:30:22,259 --> 00:30:25,470
was an annoying problem I mean and we

00:30:23,789 --> 00:30:26,999
had that with Perl we had it with Python

00:30:25,470 --> 00:30:28,409
we had it with Ruby we had it with all

00:30:26,999 --> 00:30:30,629
these everything if you were using

00:30:28,409 --> 00:30:31,950
different versions on Devon prod you

00:30:30,629 --> 00:30:33,869
would always run into these annoying

00:30:31,950 --> 00:30:35,249
upgrade downgrade chicken-and-egg

00:30:33,869 --> 00:30:36,450
problem sure like awfully upgrade then

00:30:35,249 --> 00:30:37,980
this library breaks but we downgraded

00:30:36,450 --> 00:30:39,360
that version then this other stuff won't

00:30:37,980 --> 00:30:39,779
have the things that ops want blah blah

00:30:39,360 --> 00:30:41,730
blah

00:30:39,779 --> 00:30:44,159
so basically containers are beautiful

00:30:41,730 --> 00:30:45,809
because at least from this perspective

00:30:44,159 --> 00:30:47,249
we've solved the works on my laptop

00:30:45,809 --> 00:30:49,529
problem right now at least we're using

00:30:47,249 --> 00:30:51,899
the same version of that dependency tree

00:30:49,529 --> 00:30:54,440
in the container image and now there's a

00:30:51,899 --> 00:30:56,549
way for there's a currency for the

00:30:54,440 --> 00:30:57,840
operations and development team to talk

00:30:56,549 --> 00:31:00,539
to each other you're like here's my

00:30:57,840 --> 00:31:02,700
docker file here's my container image go

00:31:00,539 --> 00:31:04,169
muck with it yeah but you can rebuild it

00:31:02,700 --> 00:31:05,850
from scratch and you can maybe tweak a

00:31:04,169 --> 00:31:07,350
little bit but we're now all pulling

00:31:05,850 --> 00:31:10,080
from the same set of dependencies and we

00:31:07,350 --> 00:31:11,940
have a sort of a contractual agreement

00:31:10,080 --> 00:31:13,679
at least written code about what we're

00:31:11,940 --> 00:31:15,210
actually using to build we know what

00:31:13,679 --> 00:31:16,740
grocery store we went to get the flour

00:31:15,210 --> 00:31:18,659
sugar eggs in water right like we know

00:31:16,740 --> 00:31:20,129
that the same quality of milk the same

00:31:18,659 --> 00:31:22,259
quality butter you know we know exactly

00:31:20,129 --> 00:31:25,440
what we're dealing with but it doesn't

00:31:22,259 --> 00:31:27,600
solve everything so this is one that

00:31:25,440 --> 00:31:29,190
that it doesn't solve them one I call it

00:31:27,600 --> 00:31:31,860
the 1 million transactions per second

00:31:29,190 --> 00:31:33,600
problem so like I can fire up it on my

00:31:31,860 --> 00:31:35,970
lap you know I can fire up an app with a

00:31:33,600 --> 00:31:37,289
web server on my laptop and then I can

00:31:35,970 --> 00:31:38,789
put it and then I can throw it over I

00:31:37,289 --> 00:31:40,139
can basically build a container image

00:31:38,789 --> 00:31:42,090
push it to a registry server have the

00:31:40,139 --> 00:31:43,440
ops team pull it down and how do I know

00:31:42,090 --> 00:31:45,869
it will actually run it a million

00:31:43,440 --> 00:31:48,419
transactions per second I mean what what

00:31:45,869 --> 00:31:49,830
about that set of actions that I just

00:31:48,419 --> 00:31:51,389
took of guarantees that that will work

00:31:49,830 --> 00:31:52,679
in a million transactions per second if

00:31:51,389 --> 00:31:53,400
a million transactions per second is the

00:31:52,679 --> 00:31:55,680
requirement

00:31:53,400 --> 00:31:57,450
there's like nothing right like I have

00:31:55,680 --> 00:31:59,550
no idea for work I don't even know what

00:31:57,450 --> 00:32:01,050
we get load test it and then start to

00:31:59,550 --> 00:32:02,730
understand what the baseline performance

00:32:01,050 --> 00:32:04,290
characteristics of it and again now we

00:32:02,730 --> 00:32:06,390
at least have like some basic

00:32:04,290 --> 00:32:07,590
understanding of like we use this set of

00:32:06,390 --> 00:32:09,660
flour sugar eggs and water and they were

00:32:07,590 --> 00:32:11,190
able to perform at this level you know

00:32:09,660 --> 00:32:13,080
this set of this dependency tree worked

00:32:11,190 --> 00:32:15,350
it that well but it doesn't really solve

00:32:13,080 --> 00:32:17,610
like actually getting better performance

00:32:15,350 --> 00:32:20,550
the same is true with security right

00:32:17,610 --> 00:32:22,320
like nothing about agreeing on which

00:32:20,550 --> 00:32:24,360
versions that we're using solves the

00:32:22,320 --> 00:32:26,520
security problem like if I fire up that

00:32:24,360 --> 00:32:27,600
same web app on my laptop and then I

00:32:26,520 --> 00:32:29,310
throw it pushing it you know the

00:32:27,600 --> 00:32:30,450
production by throwing push it into

00:32:29,310 --> 00:32:32,190
register or have them pull it down

00:32:30,450 --> 00:32:33,300
nothing saying won't be hacked in two

00:32:32,190 --> 00:32:34,980
seconds as soon as we put it into

00:32:33,300 --> 00:32:37,950
production and put real load traffic on

00:32:34,980 --> 00:32:39,810
it I again nothing about a container

00:32:37,950 --> 00:32:42,740
stops that from happening nothing makes

00:32:39,810 --> 00:32:44,700
it better or worse you know but but so

00:32:42,740 --> 00:32:47,610
looking back the only way to really

00:32:44,700 --> 00:32:49,650
solve that problem is to have bits that

00:32:47,610 --> 00:32:51,240
we are know are actually that actually

00:32:49,650 --> 00:32:53,610
work at a certain quality level right

00:32:51,240 --> 00:32:54,990
and so this is where I'll say this word

00:32:53,610 --> 00:32:56,460
difference is this where you start to

00:32:54,990 --> 00:32:57,690
really decide on which Linux

00:32:56,460 --> 00:32:59,490
distribution you want to use and why

00:32:57,690 --> 00:33:01,110
because you go alright some Linux

00:32:59,490 --> 00:33:02,970
distribution again some have a

00:33:01,110 --> 00:33:04,710
dependency trees like gee let's see like

00:33:02,970 --> 00:33:06,660
muscle may be very good for having a

00:33:04,710 --> 00:33:08,610
very small library but it may not be

00:33:06,660 --> 00:33:11,010
very good for a real-time use case or

00:33:08,610 --> 00:33:12,630
etcetera etcetera but the only way that

00:33:11,010 --> 00:33:14,400
you can really know that those bits are

00:33:12,630 --> 00:33:16,020
battle-tested is if they are used by

00:33:14,400 --> 00:33:18,780
like millions of people out there and so

00:33:16,020 --> 00:33:20,130
now again kind of relying on the quality

00:33:18,780 --> 00:33:22,140
of the linux distro and knowing that

00:33:20,130 --> 00:33:23,970
that linux distro is basically been

00:33:22,140 --> 00:33:25,230
battle tested and out and ran like you

00:33:23,970 --> 00:33:27,000
know things like the New York Stock

00:33:25,230 --> 00:33:28,980
Exchange now you start to have

00:33:27,000 --> 00:33:30,150
confidence that this permutation this

00:33:28,980 --> 00:33:32,220
set of dependencies that are pulled

00:33:30,150 --> 00:33:34,140
together into this Linux distro in this

00:33:32,220 --> 00:33:35,760
container image actually function and

00:33:34,140 --> 00:33:37,290
have a baseline of security like there

00:33:35,760 --> 00:33:38,790
is a certain minimum level of

00:33:37,290 --> 00:33:41,790
performance and a minimum level of

00:33:38,790 --> 00:33:45,300
security and so like

00:33:41,790 --> 00:33:46,590
like I I would say any any Linux

00:33:45,300 --> 00:33:48,330
distribution is probably gonna be better

00:33:46,590 --> 00:33:50,400
than no Linux distribution like building

00:33:48,330 --> 00:33:52,440
this dependency tree set yourself you

00:33:50,400 --> 00:33:53,970
have no history of usage for any of

00:33:52,440 --> 00:33:55,560
these bits I mean you have a little bit

00:33:53,970 --> 00:33:57,540
because there's still upstream projects

00:33:55,560 --> 00:33:59,460
but but you have none on the code you

00:33:57,540 --> 00:34:00,630
wrote and you have a little bit more on

00:33:59,460 --> 00:34:02,790
some of the upstream stuff to thing a

00:34:00,630 --> 00:34:04,440
hop battle-tested it is but I would

00:34:02,790 --> 00:34:06,870
still say that and that intermediary

00:34:04,440 --> 00:34:10,080
that Linux distro they pull those things

00:34:06,870 --> 00:34:11,760
together in a you know Apache releases

00:34:10,080 --> 00:34:13,409
thousands of versions of upstream but

00:34:11,760 --> 00:34:15,179
really only a few of those it's almost

00:34:13,409 --> 00:34:16,560
like the tags in a container image are

00:34:15,179 --> 00:34:17,880
the ones that get pulled into Linux

00:34:16,560 --> 00:34:20,280
distros and then really battle-tested

00:34:17,880 --> 00:34:22,169
like that scale so like I think that

00:34:20,280 --> 00:34:24,030
value of that Linux distro is pretty

00:34:22,169 --> 00:34:25,320
obvious here and I think I don't think

00:34:24,030 --> 00:34:26,610
we've thought through it as an industry

00:34:25,320 --> 00:34:28,980
how to explain this to the rest of world

00:34:26,610 --> 00:34:31,050
like what these what these basically

00:34:28,980 --> 00:34:33,720
what the value of all these Linux distro

00:34:31,050 --> 00:34:36,240
packages views now I'll leave you with

00:34:33,720 --> 00:34:39,179
one Red Hat has one that we use that or

00:34:36,240 --> 00:34:41,760
that we released in May called Universal

00:34:39,179 --> 00:34:43,050
base image now I'm biased I'll fully

00:34:41,760 --> 00:34:45,990
admit and I'm only throwing up here as

00:34:43,050 --> 00:34:47,700
an example but but you know this one is

00:34:45,990 --> 00:34:48,990
built on the road this so like

00:34:47,700 --> 00:34:51,060
essentially the Red Hat Enterprise Linux

00:34:48,990 --> 00:34:52,679
bit so there's a Red Hat Universal base

00:34:51,060 --> 00:34:55,740
image seven and a Red Hat Universal base

00:34:52,679 --> 00:34:58,470
image eight these this is like a set of

00:34:55,740 --> 00:35:00,420
rpms I try to show here it's not olive

00:34:58,470 --> 00:35:02,310
rel not olive Red Hat Enterprise Linux

00:35:00,420 --> 00:35:05,250
it's it's a smaller subset of things

00:35:02,310 --> 00:35:06,780
like Python Ruby Java no Jess and all

00:35:05,250 --> 00:35:08,640
the things that you will coincidentally

00:35:06,780 --> 00:35:10,470
notice basically look a lot like

00:35:08,640 --> 00:35:12,090
software collections and app streams

00:35:10,470 --> 00:35:13,800
because those are the things that end

00:35:12,090 --> 00:35:15,900
users need they don't necessarily need

00:35:13,800 --> 00:35:17,430
graphical things to run servers they

00:35:15,900 --> 00:35:19,230
don't necessarily need kernels there's

00:35:17,430 --> 00:35:20,370
no kernel and ran out Universal base

00:35:19,230 --> 00:35:22,740
image because you shouldn't be booting

00:35:20,370 --> 00:35:24,180
that thing but there are all of the

00:35:22,740 --> 00:35:25,800
dependencies in that and a set that

00:35:24,180 --> 00:35:28,110
dependency tree it's a subset of that

00:35:25,800 --> 00:35:31,530
giant dependency tree that's in rel to

00:35:28,110 --> 00:35:32,760
basically build you know basically what

00:35:31,530 --> 00:35:34,410
you would typically consider a cloud

00:35:32,760 --> 00:35:37,620
native app so things like Python Ruby

00:35:34,410 --> 00:35:38,490
you know I wouldn't call Perl native

00:35:37,620 --> 00:35:39,960
although I have people that

00:35:38,490 --> 00:35:41,910
really love pearls I don't insult pearl

00:35:39,960 --> 00:35:43,290
I did a lot of Perl programming myself

00:35:41,910 --> 00:35:44,970
so I don't want to talk but I don't know

00:35:43,290 --> 00:35:46,980
that I think of it as cloud native but

00:35:44,970 --> 00:35:50,040
uh but it is definitely an end-user like

00:35:46,980 --> 00:35:52,140
the old language and then we package

00:35:50,040 --> 00:35:53,880
that we sort of Reece Wizzle that set of

00:35:52,140 --> 00:35:55,290
dependencies into three different

00:35:53,880 --> 00:35:56,610
configurations and then we released

00:35:55,290 --> 00:35:58,740
these as different base images so we

00:35:56,610 --> 00:36:00,690
released a minimal one which I would say

00:35:58,740 --> 00:36:03,540
is good in a use case where maybe you

00:36:00,690 --> 00:36:05,910
really do have a small C library or a C

00:36:03,540 --> 00:36:08,130
binary or maybe all it needs is live SSL

00:36:05,910 --> 00:36:09,869
and just G clip C and you're like all

00:36:08,130 --> 00:36:11,490
right cool my binary with that is like

00:36:09,869 --> 00:36:13,440
eight megabytes sweet so I just use this

00:36:11,490 --> 00:36:15,210
minimal image I get access to a Red Hat

00:36:13,440 --> 00:36:17,280
basically supported G let's see that

00:36:15,210 --> 00:36:18,450
gets back ported survives for ten years

00:36:17,280 --> 00:36:20,550
and actually that's a really good

00:36:18,450 --> 00:36:22,710
quality base image to use because now I

00:36:20,550 --> 00:36:24,900
can run yum updates on that base image

00:36:22,710 --> 00:36:26,369
for ten years in the CI CD system and I

00:36:24,900 --> 00:36:27,780
just know my binary will always be

00:36:26,369 --> 00:36:30,450
patched for the latest TVs and I don't

00:36:27,780 --> 00:36:32,400
have to worry about it but I'd say we

00:36:30,450 --> 00:36:34,380
typically say this is like the 80% use

00:36:32,400 --> 00:36:36,990
case standard this looks the most like

00:36:34,380 --> 00:36:39,060
you know a regular basis that you would

00:36:36,990 --> 00:36:41,490
see and then we have one actually that

00:36:39,060 --> 00:36:42,930
will let you run system D in it and I

00:36:41,490 --> 00:36:45,150
know some people hate that some people

00:36:42,930 --> 00:36:47,280
love it but I will flu admit I use it

00:36:45,150 --> 00:36:48,960
because I'm a lazy bastard I used it for

00:36:47,280 --> 00:36:51,600
my wiki when I migrated it because I

00:36:48,960 --> 00:36:54,690
migrated from rl6 to LA and I basically

00:36:51,600 --> 00:36:57,840
went to ubi and I run a media wiki

00:36:54,690 --> 00:37:00,600
instance on Apache and marija DB side by

00:36:57,840 --> 00:37:03,090
side in a single container and I run it

00:37:00,600 --> 00:37:06,030
in read-only mode so like there's no

00:37:03,090 --> 00:37:08,310
3306 port exposed anywhere internally or

00:37:06,030 --> 00:37:09,660
externally it's just only internal you

00:37:08,310 --> 00:37:10,380
know only within that container can they

00:37:09,660 --> 00:37:11,640
communicate

00:37:10,380 --> 00:37:14,910
the only thing exposed externally is a

00:37:11,640 --> 00:37:16,410
port 80 you know in port 443 and and

00:37:14,910 --> 00:37:17,670
it's running in read-only mode so the

00:37:16,410 --> 00:37:19,240
only things that are writable are

00:37:17,670 --> 00:37:23,260
basically var lived of the

00:37:19,240 --> 00:37:25,180
and varlet my spell and so it's for me

00:37:23,260 --> 00:37:27,220
that was the level of security that gave

00:37:25,180 --> 00:37:28,869
me a warm and fuzzy but the beauty of it

00:37:27,220 --> 00:37:31,329
is my doctor file is super simple it's

00:37:28,869 --> 00:37:34,900
like yum install I'm really be youngins

00:37:31,329 --> 00:37:38,559
you know yum install really be h DVD and

00:37:34,900 --> 00:37:40,809
then all the like PHP requirements and

00:37:38,559 --> 00:37:44,260
then and then basically systemctl enable

00:37:40,809 --> 00:37:45,819
HDTV systemctl enable maria TV and

00:37:44,260 --> 00:37:47,559
that's it like it just works i was like

00:37:45,819 --> 00:37:49,480
beautiful and then i have a little bit

00:37:47,559 --> 00:37:50,920
of a nasty command-line for pot man to

00:37:49,480 --> 00:37:52,540
basically fire it up and read-only mode

00:37:50,920 --> 00:37:54,819
the other than that i captured that and

00:37:52,540 --> 00:37:58,119
script but it's useful for those kinds

00:37:54,819 --> 00:37:59,859
of things and the beauty of universal

00:37:58,119 --> 00:38:01,720
based image is it's a very high quality

00:37:59,859 --> 00:38:03,339
basically instead of dependency tree

00:38:01,720 --> 00:38:04,960
that we release that that is a different

00:38:03,339 --> 00:38:06,760
end user License Agreement it's more

00:38:04,960 --> 00:38:07,780
like sent to us or Fedora where you can

00:38:06,760 --> 00:38:08,079
basically distribute it anywhere you

00:38:07,780 --> 00:38:10,240
want

00:38:08,079 --> 00:38:12,040
whereas rel has a different read

00:38:10,240 --> 00:38:13,869
Enterprise Linux is a product so it has

00:38:12,040 --> 00:38:15,339
its own end user places agreement where

00:38:13,869 --> 00:38:16,569
a customer sign an agreement that say

00:38:15,339 --> 00:38:18,490
they won't just distribute it all over

00:38:16,569 --> 00:38:20,319
the internet or install 50 copies of it

00:38:18,490 --> 00:38:21,369
and only pay for one things like that so

00:38:20,319 --> 00:38:24,490
Universal Basin which has no

00:38:21,369 --> 00:38:25,809
restrictions so that's of course I think

00:38:24,490 --> 00:38:27,400
it's not evil I think Linux

00:38:25,809 --> 00:38:30,250
distributions are valuable in a

00:38:27,400 --> 00:38:33,549
container and so I'm then explaining

00:38:30,250 --> 00:38:35,190
what I think of what a very good example

00:38:33,549 --> 00:38:38,770
of one looks like which i think is ubi

00:38:35,190 --> 00:38:41,260
and I'll just leave you with some you

00:38:38,770 --> 00:38:43,390
know essentially links to other things I

00:38:41,260 --> 00:38:43,690
there is a introduction that what you

00:38:43,390 --> 00:38:45,339
know

00:38:43,690 --> 00:38:48,010
Red Hat Universal basement but I think

00:38:45,339 --> 00:38:49,990
in general I would I would say I would I

00:38:48,010 --> 00:38:51,849
would argue in defense of Linux

00:38:49,990 --> 00:38:53,140
distributions do still matter even in

00:38:51,849 --> 00:38:54,190
containers like I think that dependency

00:38:53,140 --> 00:38:56,260
tree and the quality of that event

00:38:54,190 --> 00:38:59,520
industry absolutely matters so with that

00:38:56,260 --> 00:38:59,520
I will say are there any questions

00:39:00,369 --> 00:39:04,420
if you have questions I'd ask that you

00:39:02,469 --> 00:39:06,160
raise your hand or and if you can try to

00:39:04,420 --> 00:39:07,329
move to an aisle so I can get the

00:39:06,160 --> 00:39:08,619
microphone to you that'll be great we

00:39:07,329 --> 00:39:10,719
have about five minutes for questions

00:39:08,619 --> 00:39:12,190
here Scott are you open to questions

00:39:10,719 --> 00:39:15,059
outside the room afterwards yeah

00:39:12,190 --> 00:39:15,059
absolutely great

00:39:15,300 --> 00:39:19,610
does anyone want to make an argument

00:39:16,800 --> 00:39:19,610
that they don't matter

00:39:25,560 --> 00:39:30,600
I like tires on my car I like stopping

00:39:27,930 --> 00:39:30,840
in the rain like when my kids are in the

00:39:30,600 --> 00:39:32,610
car

00:39:30,840 --> 00:39:34,080
I don't have one kid so it's a single

00:39:32,610 --> 00:39:36,270
point of failure for me this is an H a

00:39:34,080 --> 00:39:39,230
thing I don't have two kids so I gotta

00:39:36,270 --> 00:39:39,230
have to care about the tires

00:39:40,150 --> 00:39:44,920
I'm just saying when you only have one

00:39:42,320 --> 00:39:47,540
primate offspring you have to be careful

00:39:44,920 --> 00:39:49,160
okay like I this happens chimpanzee you

00:39:47,540 --> 00:39:50,780
drop the one offspring that's it you

00:39:49,160 --> 00:39:59,490
know like you're done single point of

00:39:50,780 --> 00:40:02,400
failure I've went into a rat hole

00:39:59,490 --> 00:40:05,390
- dependency tree it's just genetic

00:40:02,400 --> 00:40:05,390
nature

00:40:06,030 --> 00:40:10,010
any questions that aren't about tires

00:40:15,750 --> 00:40:21,630
got nothing does anyone want to yell at

00:40:19,470 --> 00:40:23,880
Scott do you guys want to give this talk

00:40:21,630 --> 00:40:25,320
I would love you to give this talk and

00:40:23,880 --> 00:40:27,060
educate other people online the Linux

00:40:25,320 --> 00:40:28,590
distro still matters if you're

00:40:27,060 --> 00:40:30,810
interested in that let me know you can

00:40:28,590 --> 00:40:34,970
definitely get these slides and and do

00:40:30,810 --> 00:40:39,130
it sweetie

00:40:34,970 --> 00:40:39,130
we need more dependencies recursion

00:40:39,890 --> 00:40:45,940
all right I'll be around to talk

00:40:41,329 --> 00:40:45,940

YouTube URL: https://www.youtube.com/watch?v=wlA-908pcuw


