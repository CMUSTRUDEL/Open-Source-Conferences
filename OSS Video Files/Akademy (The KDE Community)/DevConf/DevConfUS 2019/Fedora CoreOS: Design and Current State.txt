Title: Fedora CoreOS: Design and Current State
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speakers: Jonathan Lebon and Benjamin Gilbert

Fedora CoreOS is a new Fedora edition focused on container workloads and featuring automatic updates. Fedora CoreOS is the successor to both Fedora Atomic Host and CoreOS Container Linux, combining the best of those operating systems with some improvements of its own. This talk gives an overview of the platform and its major features, as well as the current state of the project.

https://getfedora.org/coreos/
https://github.com/coreos/fedora-coreos-tracker
Captions: 
	00:00:02,940 --> 00:00:08,500
all right good afternoon I'm Benjamin

00:00:06,279 --> 00:00:10,719
Gilbert I'm a software engineer working

00:00:08,500 --> 00:00:13,919
on Fedora core OS I also still worked a

00:00:10,719 --> 00:00:19,210
little bit on Korres container Linux

00:00:13,919 --> 00:00:21,460
test can you hear me oh I'm Jonathan I

00:00:19,210 --> 00:00:33,280
work with Benjamin also on federal

00:00:21,460 --> 00:00:34,839
chorus cool mr. Vance interesting we've

00:00:33,280 --> 00:00:40,859
got two simultaneous copies of this

00:00:34,839 --> 00:00:40,859
going yeah there you go

00:00:42,570 --> 00:00:46,800
sorry let me play with this for one sec

00:01:16,390 --> 00:01:22,890
all right sir about that

00:01:18,360 --> 00:01:26,160
okay so what is Fodor core OS it is a

00:01:22,890 --> 00:01:27,660
new edition of fedora that is that we're

00:01:26,160 --> 00:01:30,900
building specifically for running

00:01:27,660 --> 00:01:32,640
containerized workloads at scale if

00:01:30,900 --> 00:01:36,060
you've heard of Korres container Linux

00:01:32,640 --> 00:01:38,370
this dates from Korres incorporated

00:01:36,060 --> 00:01:42,390
which rate had acquired what a couple

00:01:38,370 --> 00:01:44,220
years ago now and container Linux has

00:01:42,390 --> 00:01:47,880
been pursuing a similar model for

00:01:44,220 --> 00:01:50,460
several years it's a small integrated OS

00:01:47,880 --> 00:01:53,790
specifically for running containers so

00:01:50,460 --> 00:01:55,740
we're continuing that sort of model plus

00:01:53,790 --> 00:01:59,280
integrating technology from Fedora

00:01:55,740 --> 00:02:01,979
atomic host here's the mission statement

00:01:59,280 --> 00:02:04,640
I won't but I think there are a couple

00:02:01,979 --> 00:02:06,720
of elements that are important here

00:02:04,640 --> 00:02:08,520
Fedora chorus is targeting several

00:02:06,720 --> 00:02:12,150
different sort of workloads in this

00:02:08,520 --> 00:02:13,830
space our use cases in this space it is

00:02:12,150 --> 00:02:15,480
targeted at clusters but it does not

00:02:13,830 --> 00:02:18,240
necessarily require running in a cluster

00:02:15,480 --> 00:02:20,430
and obviously we're interested in

00:02:18,240 --> 00:02:21,540
running in the kubernetes ecosystem but

00:02:20,430 --> 00:02:23,430
we're not going to require that either

00:02:21,540 --> 00:02:28,230
it's also possible to use Fedora core OS

00:02:23,430 --> 00:02:30,360
to run containers of standalone you may

00:02:28,230 --> 00:02:31,560
have heard of rel core OS so what is the

00:02:30,360 --> 00:02:35,489
relationship between these operating

00:02:31,560 --> 00:02:38,130
systems rel core OS is specifically

00:02:35,489 --> 00:02:39,870
intended as a component of openshift it

00:02:38,130 --> 00:02:41,660
updates along with OpenShift its version

00:02:39,870 --> 00:02:44,459
along with openshift

00:02:41,660 --> 00:02:47,010
it is based on the redhead Enterprise

00:02:44,459 --> 00:02:49,290
Linux package set so there's not

00:02:47,010 --> 00:02:52,560
actually a separate SKU as we say you

00:02:49,290 --> 00:02:54,720
can't download and use rel core OS as a

00:02:52,560 --> 00:02:56,340
standalone operating system it's

00:02:54,720 --> 00:02:57,840
something that's just integrated into

00:02:56,340 --> 00:02:58,620
openshift and you shouldn't have to

00:02:57,840 --> 00:03:01,410
think about it

00:02:58,620 --> 00:03:04,260
Fedora core OS is targeting a slightly

00:03:01,410 --> 00:03:05,790
broader set of use cases it shares some

00:03:04,260 --> 00:03:07,340
of the components and tooling it shares

00:03:05,790 --> 00:03:10,739
a lot of the same people working on it

00:03:07,340 --> 00:03:12,510
but it is standalone as I said it's

00:03:10,739 --> 00:03:14,340
targeted slightly broader set of use

00:03:12,510 --> 00:03:18,630
cases and it's based on the Fedora

00:03:14,340 --> 00:03:20,730
package set so there are a few elements

00:03:18,630 --> 00:03:23,160
that's important to understand about how

00:03:20,730 --> 00:03:25,670
we think about actually both of these

00:03:23,160 --> 00:03:27,810
operating systems fedora and rel core OS

00:03:25,670 --> 00:03:29,819
and the key one is immutable

00:03:27,810 --> 00:03:31,350
infrastructure these are these

00:03:29,819 --> 00:03:36,180
philosophical elements are not

00:03:31,350 --> 00:03:38,760
is their embodied in code exactly but

00:03:36,180 --> 00:03:41,960
they affect how we design the operating

00:03:38,760 --> 00:03:45,000
system and how we want it to be used so

00:03:41,960 --> 00:03:47,310
immutable infrastructure the idea here

00:03:45,000 --> 00:03:49,620
is that you'll need to make some

00:03:47,310 --> 00:03:50,850
customizations to to your operating

00:03:49,620 --> 00:03:53,900
system right you might need to set the

00:03:50,850 --> 00:03:57,420
hostname configure static IP addresses

00:03:53,900 --> 00:03:59,190
configure your container runtime and the

00:03:57,420 --> 00:04:02,460
idea is that all of those customizations

00:03:59,190 --> 00:04:05,250
should be encoded in a single file which

00:04:02,460 --> 00:04:07,200
is the provisioning config and then that

00:04:05,250 --> 00:04:09,870
provisioning config is given to the node

00:04:07,200 --> 00:04:14,340
when it first starts and it applies all

00:04:09,870 --> 00:04:16,140
of the configuration after that we think

00:04:14,340 --> 00:04:18,900
that you shouldn't go in further to

00:04:16,140 --> 00:04:22,500
configure the node you can SSH to the

00:04:18,900 --> 00:04:24,090
node and change things you can use

00:04:22,500 --> 00:04:27,180
configuration management tools if you'd

00:04:24,090 --> 00:04:28,440
like we don't stop you but the problem

00:04:27,180 --> 00:04:31,170
is that then you're provisioning config

00:04:28,440 --> 00:04:33,210
gets out of sync with the actual state

00:04:31,170 --> 00:04:35,880
of the node so what we think you should

00:04:33,210 --> 00:04:38,580
do instead is change the provisioning

00:04:35,880 --> 00:04:41,100
config and spit up a new node using it

00:04:38,580 --> 00:04:43,290
and then tear down the old node so

00:04:41,100 --> 00:04:45,120
essentially once a node exists you treat

00:04:43,290 --> 00:04:48,450
it as immutable and the reason for that

00:04:45,120 --> 00:04:53,070
is then if you want to scale out due to

00:04:48,450 --> 00:04:54,420
changes in demand then you can just

00:04:53,070 --> 00:04:56,450
launch new nodes with your current

00:04:54,420 --> 00:04:59,430
config and not have to think about

00:04:56,450 --> 00:05:01,700
configuration per se

00:04:59,430 --> 00:05:04,050
so another philosophical component is

00:05:01,700 --> 00:05:07,080
that software should run in containers

00:05:04,050 --> 00:05:08,550
the operating system is for supporting

00:05:07,080 --> 00:05:12,000
hardware it's for providing the

00:05:08,550 --> 00:05:13,920
container runtimes but if you're running

00:05:12,000 --> 00:05:16,680
your own software on the node it should

00:05:13,920 --> 00:05:18,810
always be in a container toward that end

00:05:16,680 --> 00:05:22,740
we don't ship interpreters we have bash

00:05:18,810 --> 00:05:24,240
obviously and of--can said if you count

00:05:22,740 --> 00:05:26,970
those we don't ship Python we don't ship

00:05:24,240 --> 00:05:28,730
Perl we don't ship Ruby if you want

00:05:26,970 --> 00:05:33,330
those things run them in a container

00:05:28,730 --> 00:05:34,800
similarly ABI compatibility for

00:05:33,330 --> 00:05:36,660
libraries within the host is not

00:05:34,800 --> 00:05:38,490
something we worry about too much the

00:05:36,660 --> 00:05:42,390
operating system is self-consistent but

00:05:38,490 --> 00:05:44,860
if you copy some random binary onto the

00:05:42,390 --> 00:05:47,800
node it's not guaranteed to keep working

00:05:44,860 --> 00:05:49,780
over no separate and speaking of LLS

00:05:47,800 --> 00:05:53,020
upgrades OS versions themselves are an

00:05:49,780 --> 00:05:55,060
implementation detail think of the

00:05:53,020 --> 00:05:56,650
notice something like an appliance

00:05:55,060 --> 00:05:59,639
it should Auto it up to update itself

00:05:56,650 --> 00:06:01,689
I'll talk about that more later but

00:05:59,639 --> 00:06:05,830
really shouldn't have to think about it

00:06:01,689 --> 00:06:08,050
and in particular when a Fedora major

00:06:05,830 --> 00:06:11,650
version upgrade occurs if you go to from

00:06:08,050 --> 00:06:12,819
Fedora 32 31 to 32 that should just be a

00:06:11,650 --> 00:06:17,860
regular upgrade you shouldn't have to

00:06:12,819 --> 00:06:19,330
think about about that at all okay so

00:06:17,860 --> 00:06:21,219
what is this operating system look like

00:06:19,330 --> 00:06:24,699
in a little bit more detail it's

00:06:21,219 --> 00:06:27,490
targeted at cloud instances and bare

00:06:24,699 --> 00:06:28,930
metal servers we aim to have it

00:06:27,490 --> 00:06:31,919
available on a wide variety of clouds

00:06:28,930 --> 00:06:33,759
all of the usual suspects really

00:06:31,919 --> 00:06:35,080
workloads as I said should run in

00:06:33,759 --> 00:06:36,879
containers which means that the

00:06:35,080 --> 00:06:41,080
operating system image itself can be

00:06:36,879 --> 00:06:42,969
pretty minimal it's not a lot in it it's

00:06:41,080 --> 00:06:46,080
an image based distro so you're not

00:06:42,969 --> 00:06:49,000
running DNF you're not installing rpms

00:06:46,080 --> 00:06:52,870
you get essentially a monolithic file

00:06:49,000 --> 00:06:54,699
system image and then it is updated

00:06:52,870 --> 00:06:57,819
atomically so if you've heard of rpm OS

00:06:54,699 --> 00:07:00,360
tree it you can think of it a little bit

00:06:57,819 --> 00:07:04,210
like get for the operating system you

00:07:00,360 --> 00:07:06,400
you have some revision and then when an

00:07:04,210 --> 00:07:09,009
update comes along you pull that down

00:07:06,400 --> 00:07:11,529
and apply it atomically to the disk and

00:07:09,009 --> 00:07:12,940
reboot into it so you're never running

00:07:11,529 --> 00:07:17,379
in sort of a half cooperated state the

00:07:12,940 --> 00:07:20,469
way you might be with DMF on top of our

00:07:17,379 --> 00:07:25,089
pmos tree we add automatic updates so

00:07:20,469 --> 00:07:28,509
rpm OS tree by default will upgrade when

00:07:25,089 --> 00:07:30,900
you tell it to same as a DNF we are

00:07:28,509 --> 00:07:32,379
adding a system on top of that which

00:07:30,900 --> 00:07:34,270
automatically fetches and installs

00:07:32,379 --> 00:07:37,900
updates and again we'll talk about a

00:07:34,270 --> 00:07:42,219
little bit more later so specifically

00:07:37,900 --> 00:07:43,569
what clouds the targets that were that

00:07:42,219 --> 00:07:45,240
we're focused on right now are listed

00:07:43,569 --> 00:07:50,289
there that outflow includes

00:07:45,240 --> 00:07:55,089
virtualization systems like EMU OneNote

00:07:50,289 --> 00:07:56,390
though some clouds often you'll find if

00:07:55,089 --> 00:07:59,900
you launch

00:07:56,390 --> 00:08:01,550
and let's say GCP or azor many Linux

00:07:59,900 --> 00:08:05,150
operating systems will include those

00:08:01,550 --> 00:08:08,330
clouds agent the agent does different

00:08:05,150 --> 00:08:10,490
things depending on the cloud on some

00:08:08,330 --> 00:08:11,900
platforms it has to check in with the

00:08:10,490 --> 00:08:14,050
cloud before the cloud believes that the

00:08:11,900 --> 00:08:15,740
OS is booted successfully for example

00:08:14,050 --> 00:08:17,720
sometimes it provides additional

00:08:15,740 --> 00:08:22,640
management functionality so that from

00:08:17,720 --> 00:08:26,450
the the clouds web interface you can add

00:08:22,640 --> 00:08:30,020
users to to the node or maybe even run

00:08:26,450 --> 00:08:32,150
code on the node in general we are going

00:08:30,020 --> 00:08:35,300
to try to avoid shipping those platform

00:08:32,150 --> 00:08:38,150
agents a lot of the functionality is not

00:08:35,300 --> 00:08:39,740
all that meaningful first a sort of more

00:08:38,150 --> 00:08:43,730
specialized operating system like Fedora

00:08:39,740 --> 00:08:48,260
core OS and not all of that code is

00:08:43,730 --> 00:08:50,660
uniformly well advised and so what we

00:08:48,260 --> 00:08:53,510
are generally trying to do we have a

00:08:50,660 --> 00:08:56,600
piece of code called afterburn and it is

00:08:53,510 --> 00:08:58,430
sort of a generic minimal cloud agent so

00:08:56,600 --> 00:08:59,540
on those platforms where you have to do

00:08:58,430 --> 00:09:03,500
something special to get network

00:08:59,540 --> 00:09:05,510
configuration or hostname or or to tell

00:09:03,500 --> 00:09:06,290
the cloud that you're ready afterburn

00:09:05,510 --> 00:09:08,330
will do that

00:09:06,290 --> 00:09:15,110
and we'll use that instead of the cloud

00:09:08,330 --> 00:09:16,190
agents on the bare metal side it's

00:09:15,110 --> 00:09:17,600
pretty much what you'd expect you

00:09:16,190 --> 00:09:21,890
install the operating system to disk and

00:09:17,600 --> 00:09:24,320
run it except for one thing in some

00:09:21,890 --> 00:09:27,110
sense Fedora core OS is a cloud native

00:09:24,320 --> 00:09:28,220
or cloud first operating system and in

00:09:27,110 --> 00:09:30,740
the cloud you don't have an installer

00:09:28,220 --> 00:09:33,700
there's nothing like anaconda you're

00:09:30,740 --> 00:09:37,070
just launching a prepackaged image and

00:09:33,700 --> 00:09:39,710
so bare metal for fedora rest doesn't

00:09:37,070 --> 00:09:43,510
have an installer here what we do

00:09:39,710 --> 00:09:46,720
instead is essentially a shell script

00:09:43,510 --> 00:09:49,400
you run a thing and it fetches a

00:09:46,720 --> 00:09:54,290
monolithic bag of bits and effectively

00:09:49,400 --> 00:09:56,170
just Dedes them to disk with

00:09:54,290 --> 00:09:58,190
consequences we'll get to in a minute

00:09:56,170 --> 00:10:00,770
but the idea is that the install process

00:09:58,190 --> 00:10:04,190
should be as simple as possible

00:10:00,770 --> 00:10:09,070
one other note container Linux supports

00:10:04,190 --> 00:10:09,070
live pixie so you can

00:10:09,170 --> 00:10:13,230
essentially just run your entire

00:10:11,190 --> 00:10:15,150
production OS from RAM and never

00:10:13,230 --> 00:10:16,440
installed to disk at all we're going to

00:10:15,150 --> 00:10:18,090
have similar functionality for fedora

00:10:16,440 --> 00:10:21,840
core OS this is actually fairly widely

00:10:18,090 --> 00:10:23,250
used on container Linux as a way to even

00:10:21,840 --> 00:10:29,100
further minimize the footprint of the

00:10:23,250 --> 00:10:31,890
operating system on disk so what is in

00:10:29,100 --> 00:10:34,200
federal chorus so of course it has all

00:10:31,890 --> 00:10:39,360
the latest federal bits you know system

00:10:34,200 --> 00:10:41,130
the kernel it's not based on Gen 2 we

00:10:39,360 --> 00:10:45,180
have all the basic hardware and

00:10:41,130 --> 00:10:47,070
implement software that we need there's

00:10:45,180 --> 00:10:48,960
basic administration tools like Benjamin

00:10:47,070 --> 00:10:52,080
was saying you know we don't expect you

00:10:48,960 --> 00:10:53,700
to login to federal court as that much

00:10:52,080 --> 00:10:56,670
to play around with it because

00:10:53,700 --> 00:10:58,470
everything should be set up for right

00:10:56,670 --> 00:11:00,210
from the beginning with your ignition

00:10:58,470 --> 00:11:03,510
configure from the provisioning step

00:11:00,210 --> 00:11:05,640
we'll talk wedding shin after but we

00:11:03,510 --> 00:11:08,160
have SSH of course there's our saying

00:11:05,640 --> 00:11:10,500
are all the basic stuff you can check

00:11:08,160 --> 00:11:12,180
the tour at all to do like some basic

00:11:10,500 --> 00:11:14,520
debugging and stuff

00:11:12,180 --> 00:11:17,220
of course there's container engines so

00:11:14,520 --> 00:11:21,440
we have pod man mobi assistant en spawn

00:11:17,220 --> 00:11:25,200
and then we're still discussing how will

00:11:21,440 --> 00:11:27,089
provide the cubelet and cryo to nodes so

00:11:25,200 --> 00:11:31,290
watch our firmware discussions about

00:11:27,089 --> 00:11:34,830
that ok so how do you actually provision

00:11:31,290 --> 00:11:37,530
a for a core OS node so federal Korres

00:11:34,830 --> 00:11:41,940
uses this tool called ignition ignition

00:11:37,530 --> 00:11:43,680
is very similar to in an idea to club in

00:11:41,940 --> 00:11:45,960
it for those of you who are familiar

00:11:43,680 --> 00:11:49,110
with how fluor atomic host was

00:11:45,960 --> 00:11:52,380
provisioned so ignition takes in a

00:11:49,110 --> 00:11:54,870
configuration file this file is a JSON

00:11:52,380 --> 00:11:56,730
document and it's provided using

00:11:54,870 --> 00:11:59,040
whatever the use of data mechanism is

00:11:56,730 --> 00:12:01,820
for the platform you're targeting so you

00:11:59,040 --> 00:12:05,300
know in in most clouds you can pass in

00:12:01,820 --> 00:12:07,740
some user data so what can ignition do

00:12:05,300 --> 00:12:09,990
you know you can write file so you can

00:12:07,740 --> 00:12:12,360
write system D units you can create

00:12:09,990 --> 00:12:16,410
users and groups but then you can also

00:12:12,360 --> 00:12:19,170
do fancier stuff like partitioned disks

00:12:16,410 --> 00:12:19,980
create raid arrays you can format file

00:12:19,170 --> 00:12:22,530
systems

00:12:19,980 --> 00:12:25,440
so for those of you coming from like the

00:12:22,530 --> 00:12:27,360
the Ralph ador side this it's sorts of

00:12:25,440 --> 00:12:30,690
the sort of a mix between cloud in it

00:12:27,360 --> 00:12:34,110
and kick start right so and that's part

00:12:30,690 --> 00:12:35,670
of the reason why as veteran was saying

00:12:34,110 --> 00:12:37,340
the bear mental image and the cloud

00:12:35,670 --> 00:12:41,040
image are actually the same thing

00:12:37,340 --> 00:12:44,070
ignition is sort of doing taking taking

00:12:41,040 --> 00:12:48,060
the place of kickstart and and clouding

00:12:44,070 --> 00:12:49,800
it almost so the reason why we can do

00:12:48,060 --> 00:12:51,600
those kind of powerful manipulations is

00:12:49,800 --> 00:12:53,880
because ignition runs any and it Rama

00:12:51,600 --> 00:12:57,990
fest so it runs even before the system

00:12:53,880 --> 00:13:01,530
is really booting it runs exactly once

00:12:57,990 --> 00:13:03,660
and most importantly if anything fails

00:13:01,530 --> 00:13:06,620
during the provisioning steps if any if

00:13:03,660 --> 00:13:09,480
anything in the config can't be executed

00:13:06,620 --> 00:13:11,460
it'll fail to boot so that means that if

00:13:09,480 --> 00:13:13,590
your node came up you're pretty

00:13:11,460 --> 00:13:17,460
confident that your configuration has

00:13:13,590 --> 00:13:20,310
been obeyed okay so how do you write any

00:13:17,460 --> 00:13:23,340
in an ignition config so like I said

00:13:20,310 --> 00:13:27,000
configs deacon figs are in json it's

00:13:23,340 --> 00:13:29,880
super mechanical it's not that pretty it

00:13:27,000 --> 00:13:32,850
sun triggered so we have this sort of

00:13:29,880 --> 00:13:35,640
layer on top called the for request

00:13:32,850 --> 00:13:38,880
config language so this is this one is

00:13:35,640 --> 00:13:41,430
meant for humans it's in llamo so it

00:13:38,880 --> 00:13:44,520
mostly maps on to the ignition config

00:13:41,430 --> 00:13:46,620
but it has some additional sugar for

00:13:44,520 --> 00:13:48,330
things like you know if you want to set

00:13:46,620 --> 00:13:53,430
your time zone or shorter said like

00:13:48,330 --> 00:13:57,380
whenever update windows for when one you

00:13:53,430 --> 00:14:00,980
know should update things that the the

00:13:57,380 --> 00:14:02,730
thorough course config transpiler will

00:14:00,980 --> 00:14:05,250
convert into things that ignition

00:14:02,730 --> 00:14:06,720
understands I sort of jumped a gun

00:14:05,250 --> 00:14:07,860
because the next bullet actually

00:14:06,720 --> 00:14:10,920
explains what the transpiler

00:14:07,860 --> 00:14:13,380
is the Transpower is the things that

00:14:10,920 --> 00:14:16,440
converts to llamo into JSON so it

00:14:13,380 --> 00:14:20,130
converts the federal chorus config file

00:14:16,440 --> 00:14:22,170
into the ignition config JSON data

00:14:20,130 --> 00:14:24,720
ignition actually understands and it's

00:14:22,170 --> 00:14:28,440
actually it's actually also it gives you

00:14:24,720 --> 00:14:30,720
a chance to be stopped by the trans

00:14:28,440 --> 00:14:32,990
power before you actually bring up the

00:14:30,720 --> 00:14:35,390
note if there's a really obvious area

00:14:32,990 --> 00:14:37,100
mission config so that you don't find

00:14:35,390 --> 00:14:40,070
out whenever when you're booting your

00:14:37,100 --> 00:14:41,990
node in AWS oh I missed a closing

00:14:40,070 --> 00:14:47,570
bracket here I have to refurbish in the

00:14:41,990 --> 00:14:51,080
node ok automatic updates so this is

00:14:47,570 --> 00:14:53,320
basically one of the you know key

00:14:51,080 --> 00:14:55,640
features of federal core oh s its

00:14:53,320 --> 00:14:58,430
inherited from the continued Linux

00:14:55,640 --> 00:15:01,070
philosophy of automatic updates and the

00:14:58,430 --> 00:15:02,930
basic idea is users should not have to

00:15:01,070 --> 00:15:04,100
think about updates at all right the

00:15:02,930 --> 00:15:05,089
machine should just take care of

00:15:04,100 --> 00:15:07,040
updating itself

00:15:05,089 --> 00:15:09,200
it should be able to just pull in the

00:15:07,040 --> 00:15:13,820
latest bug fixes the latest security

00:15:09,200 --> 00:15:16,399
patches a consequence of that if we

00:15:13,820 --> 00:15:18,800
really want this to work is that we mean

00:15:16,399 --> 00:15:20,959
automatic appears to be rock-solid we

00:15:18,800 --> 00:15:23,180
needed to be super reliable because if

00:15:20,959 --> 00:15:24,980
it's not reliable users will just turn

00:15:23,180 --> 00:15:26,750
them off and if users time to turn them

00:15:24,980 --> 00:15:28,160
off they don't get the latest fixes they

00:15:26,750 --> 00:15:32,720
don't get a little latest security

00:15:28,160 --> 00:15:35,420
patches so that basically means we can't

00:15:32,720 --> 00:15:37,610
have any braking changes and if we do

00:15:35,420 --> 00:15:39,260
envision any sort of braking change we

00:15:37,610 --> 00:15:44,000
need to have a really long tough ocation

00:15:39,260 --> 00:15:45,290
window that we publicize widely so how

00:15:44,000 --> 00:15:47,600
do we make sure that we don't break

00:15:45,290 --> 00:15:50,089
changes we don't introduce breaking

00:15:47,600 --> 00:15:52,579
changes so a lot of CI you know

00:15:50,089 --> 00:15:54,399
obviously if the bill doesn't pass CI

00:15:52,579 --> 00:15:56,709
it's never gonna make it to the users

00:15:54,399 --> 00:16:00,800
but then we also have some sort of

00:15:56,709 --> 00:16:02,959
process level mechanisms so I Benjamin

00:16:00,800 --> 00:16:05,270
after it's going to talk about manage

00:16:02,959 --> 00:16:07,190
update rollouts and the different really

00:16:05,270 --> 00:16:09,740
streams that we have with different

00:16:07,190 --> 00:16:12,140
semantics around breaking changes and

00:16:09,740 --> 00:16:15,950
then finally we have automatic roll

00:16:12,140 --> 00:16:17,779
backs so the node is capable of let's

00:16:15,950 --> 00:16:20,360
say pulls down the update it boosts it

00:16:17,779 --> 00:16:22,310
reboots into the new update and if

00:16:20,360 --> 00:16:24,200
there's something wrong with that new

00:16:22,310 --> 00:16:26,839
update for example if some service

00:16:24,200 --> 00:16:28,520
doesn't come up it'll detect that and

00:16:26,839 --> 00:16:34,160
it'll roll back to the previous update

00:16:28,520 --> 00:16:35,990
the previous version that it was on and

00:16:34,160 --> 00:16:39,380
this also includes the ability for users

00:16:35,990 --> 00:16:41,810
to specify additional checks that the

00:16:39,380 --> 00:16:44,720
boot has to pass before it's considered

00:16:41,810 --> 00:16:46,480
a successful boot so you can imagine if

00:16:44,720 --> 00:16:49,490
your scenario you can have like a

00:16:46,480 --> 00:16:51,350
service that you really need to be up

00:16:49,490 --> 00:16:53,540
and if that service is not up even if

00:16:51,350 --> 00:16:56,689
everything else is working it's just you

00:16:53,540 --> 00:17:00,829
don't want it to to propagate across

00:16:56,689 --> 00:17:03,439
your fleet okay so I'm gonna do a demo

00:17:00,829 --> 00:17:08,140
now if the I guess the provisioning

00:17:03,439 --> 00:17:08,140
workflow and also the automatic updates

00:17:08,380 --> 00:17:12,500
well this is gonna be hosting actually

00:17:10,459 --> 00:17:15,280
because I can't see

00:17:12,500 --> 00:17:15,280
let me shaking mirror

00:17:26,970 --> 00:17:32,750
I guess we'll revert the settings

00:17:37,570 --> 00:17:43,380
is it not just a no isn't it

00:17:43,700 --> 00:17:46,900
okay fun

00:17:47,390 --> 00:17:50,890
let me try something here

00:18:03,470 --> 00:18:29,100
we're trying to make it mirror you can

00:18:11,130 --> 00:18:32,790
go ahead but the imbued you can't change

00:18:29,100 --> 00:18:35,130
the notes once there we also talked

00:18:32,790 --> 00:18:37,020
about having updates and a live reboot

00:18:35,130 --> 00:18:38,490
system and I just write those are kind

00:18:37,020 --> 00:18:40,860
of I didn't quite understand how that

00:18:38,490 --> 00:18:42,570
worked right we think of the system as

00:18:40,860 --> 00:18:46,080
immutable from the perspective of the

00:18:42,570 --> 00:18:47,730
config so the user again is free to

00:18:46,080 --> 00:18:50,100
change configure things but probably

00:18:47,730 --> 00:18:53,460
shouldn't the note itself will continue

00:18:50,100 --> 00:18:54,900
to update so it's not truly immutable in

00:18:53,460 --> 00:18:58,140
the sense that it's a fixed bag of bits

00:18:54,900 --> 00:18:59,490
that never changes it's just that we

00:18:58,140 --> 00:19:04,230
don't want the user poking around at the

00:18:59,490 --> 00:19:06,810
system after - so can everyone read the

00:19:04,230 --> 00:19:12,330
font okay okay

00:19:06,810 --> 00:19:15,030
so so this is a photo chorus config for

00:19:12,330 --> 00:19:19,140
CMO so I won't go through every field

00:19:15,030 --> 00:19:23,390
but basically we're telling we want our

00:19:19,140 --> 00:19:27,390
config to create a user a core user and

00:19:23,390 --> 00:19:30,300
we wanted to have a specific SSH key as

00:19:27,390 --> 00:19:32,070
an authorized key and then we also

00:19:30,300 --> 00:19:35,630
wanted to write out a system to unit

00:19:32,070 --> 00:19:38,790
file so now we have this sam'l file and

00:19:35,630 --> 00:19:41,210
we'll convert it to actually let me

00:19:38,790 --> 00:19:44,160
bring that up right we'll convert it to

00:19:41,210 --> 00:19:46,590
the ignition JSON so to do that you use

00:19:44,160 --> 00:19:50,010
this tool called for a core OS config

00:19:46,590 --> 00:19:53,250
transpiler shortened to FCC G and I

00:19:50,010 --> 00:19:55,170
shall just use my bash history here so

00:19:53,250 --> 00:19:57,810
you give it a llamo file this is the

00:19:55,170 --> 00:20:01,320
file that we had just opened and then we

00:19:57,810 --> 00:20:02,940
want to output to JSON enter and I'll

00:20:01,320 --> 00:20:06,720
just show you quickly what that looks

00:20:02,940 --> 00:20:09,450
like but so essentially the same

00:20:06,720 --> 00:20:10,890
information is there just in in JSON but

00:20:09,450 --> 00:20:13,950
in the future you can imagine more

00:20:10,890 --> 00:20:14,600
complex things in the llamó that gets

00:20:13,950 --> 00:20:17,200
translated

00:20:14,600 --> 00:20:18,940
to many more things in the ignition

00:20:17,200 --> 00:20:21,500
config

00:20:18,940 --> 00:20:27,410
okay so let's boot up a machine with

00:20:21,500 --> 00:20:32,690
this config so actually I'm gonna put up

00:20:27,410 --> 00:20:36,440
two machines one one is going to be on

00:20:32,690 --> 00:20:37,760
the previous version of a federal chorus

00:20:36,440 --> 00:20:39,500
and the other ones will be on the latest

00:20:37,760 --> 00:20:40,880
version throw core OS and the reason I

00:20:39,500 --> 00:20:43,039
do that is the one that's gonna be

00:20:40,880 --> 00:20:46,280
booted on the previous version will be

00:20:43,039 --> 00:20:49,159
for demoing automatic updates but for

00:20:46,280 --> 00:20:51,200
the purposes of provisioning within with

00:20:49,159 --> 00:20:52,789
an ignition config I'm just gonna use

00:20:51,200 --> 00:20:54,890
the latest ami because you should always

00:20:52,789 --> 00:20:56,150
be using the latest config normally you

00:20:54,890 --> 00:20:57,470
wouldn't have a reason to use the

00:20:56,150 --> 00:21:03,890
previous one

00:20:57,470 --> 00:21:06,320
or the latest am i sorry so okay there's

00:21:03,890 --> 00:21:09,140
a lot of group but essentially the key

00:21:06,320 --> 00:21:12,770
part here is you know we do a w AWS ec2

00:21:09,140 --> 00:21:14,659
run instances and right here the user

00:21:12,770 --> 00:21:18,740
data that's where we're passing the

00:21:14,659 --> 00:21:22,220
ignition config to to the cloud

00:21:18,740 --> 00:21:27,850
so let's run that hopefully conference

00:21:22,220 --> 00:21:27,850
Wi-Fi is on our side okay cool

00:21:30,880 --> 00:21:39,370
okay so I provision to two instances so

00:21:35,680 --> 00:21:42,900
the second one is the latest am I so I'm

00:21:39,370 --> 00:21:42,900
just going to fetch the IP for that

00:21:42,990 --> 00:21:45,990
actually

00:21:56,540 --> 00:22:02,330
okay

00:21:59,030 --> 00:22:05,870
so remember the ignition config

00:22:02,330 --> 00:22:07,880
basically had the authorized keys that

00:22:05,870 --> 00:22:10,640
we wanted to add and a system D unit

00:22:07,880 --> 00:22:13,790
file with just a dummy fubar in it

00:22:10,640 --> 00:22:16,910
okay let's fun you might have to wait a

00:22:13,790 --> 00:22:31,790
little bit more let's let me just double

00:22:16,910 --> 00:22:33,350
check here 381 4187 okay okay okay so

00:22:31,790 --> 00:22:39,080
we're in so the fact that we logged in

00:22:33,350 --> 00:22:45,530
that means that yes H config went in and

00:22:39,080 --> 00:22:49,010
as check our system D service ok our bar

00:22:45,530 --> 00:22:53,000
has been food very cool so now let's try

00:22:49,010 --> 00:22:56,870
a let's look at automatic updates so I'm

00:22:53,000 --> 00:23:02,350
gonna log into the the second instance

00:22:56,870 --> 00:23:02,350
that I booted up which was actually the

00:23:02,860 --> 00:23:09,610
the older version so it's this one

00:23:28,070 --> 00:23:34,279
okay so this is interesting actually

00:23:31,179 --> 00:23:36,289
okay so right now it's on the previous

00:23:34,279 --> 00:23:38,149
version so I didn't actually show you

00:23:36,289 --> 00:23:42,919
the our chemistry status of the other

00:23:38,149 --> 00:23:45,019
note that I booted up but it was on zero

00:23:42,919 --> 00:23:49,009
801 and this is one that this one is on

00:23:45,019 --> 00:23:52,659
zero 725 so it should be in the process

00:23:49,009 --> 00:23:56,179
of updating and we can check that by

00:23:52,659 --> 00:23:59,809
looking at the status the journal

00:23:56,179 --> 00:24:01,580
entries for sync ID and our chemistry so

00:23:59,809 --> 00:24:03,349
sync caddy is a service that actually

00:24:01,580 --> 00:24:06,019
checks for updates and when it finds an

00:24:03,349 --> 00:24:12,739
update it'll tell our premise tree ok

00:24:06,019 --> 00:24:16,720
upgrade to this latest update that's

00:24:12,739 --> 00:24:20,090
what happened ok filter query Cincinnati

00:24:16,720 --> 00:24:21,259
okay so Zen caddy will retry in five

00:24:20,090 --> 00:24:24,169
minutes

00:24:21,259 --> 00:24:26,499
do we have that luxury well what I can

00:24:24,169 --> 00:24:26,499
do

00:24:37,340 --> 00:24:43,860
okay so now

00:24:39,929 --> 00:24:47,130
Zucotti detected a a new update and then

00:24:43,860 --> 00:24:52,559
it's telling our chemistry deploy this

00:24:47,130 --> 00:24:53,789
new commit and now our chemistry has

00:24:52,559 --> 00:24:56,309
deployed it and now the note is

00:24:53,789 --> 00:24:59,669
rebooting so what just happened there

00:24:56,309 --> 00:25:01,169
was that we start the update client

00:24:59,669 --> 00:25:03,539
without respect to whether networking is

00:25:01,169 --> 00:25:05,520
already up because if the first attempt

00:25:03,539 --> 00:25:06,360
to check in failed and try again at five

00:25:05,520 --> 00:25:10,950
minutes it's fine

00:25:06,360 --> 00:25:16,549
but of course demo it's not so fine yeah

00:25:10,950 --> 00:25:16,549
let's see how quickly AWS nodes reboot

00:25:34,600 --> 00:25:40,659
as funny as when I tested this earlier

00:25:37,899 --> 00:25:42,820
it honestly reboots spine within the

00:25:40,659 --> 00:25:45,399
first like 2 or 3 minutes it doesn't hit

00:25:42,820 --> 00:25:49,299
that race condition but the one time you

00:25:45,399 --> 00:25:53,169
do it live ok so there's already a good

00:25:49,299 --> 00:25:54,970
sign here which is in the login prompt

00:25:53,169 --> 00:25:56,710
thing it already tells you the latest

00:25:54,970 --> 00:25:57,970
the version you're on and this this is

00:25:56,710 --> 00:25:59,740
the latest version so we know the

00:25:57,970 --> 00:26:01,419
upgrade went well and if you do an RPM

00:25:59,740 --> 00:26:03,009
booster status you can see that it it's

00:26:01,419 --> 00:26:04,210
in the new deployment so if you're not

00:26:03,009 --> 00:26:06,700
familiar with our pairing with streets

00:26:04,210 --> 00:26:10,090
this is basically saying I was in this

00:26:06,700 --> 00:26:14,490
previous version in zero 725 and I'm now

00:26:10,090 --> 00:26:20,200
I'm in this version zero eight zero one

00:26:14,490 --> 00:26:24,759
let's go back to presentation cool it's

00:26:20,200 --> 00:26:27,879
married now yeah cool okay we do a

00:26:24,759 --> 00:26:31,659
couple interesting things with respect

00:26:27,879 --> 00:26:36,460
to how we publish install images and

00:26:31,659 --> 00:26:38,230
upgrades so as I mentioned before when

00:26:36,460 --> 00:26:40,029
you install Fedora core OS you're

00:26:38,230 --> 00:26:42,190
essentially just fetching a monolithic

00:26:40,029 --> 00:26:46,929
set of bits and copying them directly to

00:26:42,190 --> 00:26:50,200
disk in many Linux distros you can go to

00:26:46,929 --> 00:26:51,879
some FTP or web server somewhere and

00:26:50,200 --> 00:26:54,220
browse around and see all of the release

00:26:51,879 --> 00:26:58,090
images we intentionally do not enable

00:26:54,220 --> 00:27:01,269
that for Fedora core OS the the older

00:26:58,090 --> 00:27:05,470
release artifacts are still there but we

00:27:01,269 --> 00:27:08,169
think it's important to exercise closer

00:27:05,470 --> 00:27:10,990
attention to which images are being

00:27:08,169 --> 00:27:15,340
published so the starting point if you

00:27:10,990 --> 00:27:18,250
want some Fedora core OS bits is a JSON

00:27:15,340 --> 00:27:21,159
document at a public endpoint and if

00:27:18,250 --> 00:27:24,039
it's highly nested sorry I didn't put it

00:27:21,159 --> 00:27:27,700
in the slides but if you look at that

00:27:24,039 --> 00:27:30,820
JSON document you index by the CPU

00:27:27,700 --> 00:27:34,600
architecture you want the platform you

00:27:30,820 --> 00:27:37,389
want such as AWS or GCP and then perhaps

00:27:34,600 --> 00:27:39,460
even the the region of AWS that you want

00:27:37,389 --> 00:27:41,710
and when you when you get down through

00:27:39,460 --> 00:27:44,440
all those levels of nesting what you get

00:27:41,710 --> 00:27:47,230
at the end is okay here's the Fedora

00:27:44,440 --> 00:27:49,059
core S version here's the

00:27:47,230 --> 00:27:51,909
perhaps cloudy image ID or here's the

00:27:49,059 --> 00:27:54,070
URL to the download you want and the

00:27:51,909 --> 00:27:56,649
idea is that if you have scripts for

00:27:54,070 --> 00:28:01,809
example that fetch a QM engine deployed

00:27:56,649 --> 00:28:03,039
to to your machines those scripts start

00:28:01,809 --> 00:28:05,559
with the release meta

00:28:03,039 --> 00:28:07,720
sorry the stream metadata and always

00:28:05,559 --> 00:28:10,570
know what our recommendation is for the

00:28:07,720 --> 00:28:12,190
OS version to run in fact the the

00:28:10,570 --> 00:28:13,990
download site which is just a you know a

00:28:12,190 --> 00:28:18,929
traditional download webpage on get

00:28:13,990 --> 00:28:23,500
Fedora org reads the same JSON document

00:28:18,929 --> 00:28:25,179
so the idea here is that if we put out a

00:28:23,500 --> 00:28:26,710
band release for some reason and then we

00:28:25,179 --> 00:28:28,510
find out about it someone files a bug or

00:28:26,710 --> 00:28:31,750
it or whatever

00:28:28,510 --> 00:28:33,100
we can stop new deployments from using

00:28:31,750 --> 00:28:35,470
that release because will point the

00:28:33,100 --> 00:28:38,169
stream metadata back to a known good

00:28:35,470 --> 00:28:39,700
release so this always represents our

00:28:38,169 --> 00:28:44,590
recommendation for what's the safe

00:28:39,700 --> 00:28:46,360
release to run on the update side we

00:28:44,590 --> 00:28:51,250
have something similar so you saw is in

00:28:46,360 --> 00:28:54,220
County just now it before performing an

00:28:51,250 --> 00:28:57,190
update it checks in with a service run

00:28:54,220 --> 00:28:58,799
in Fedora infrastructure which gives it

00:28:57,190 --> 00:29:01,000
permission to update and tells it

00:28:58,799 --> 00:29:04,029
essentially here are the the versions

00:29:01,000 --> 00:29:05,860
you can update to that lets us roll

00:29:04,029 --> 00:29:10,600
updates out gradually container linux

00:29:05,860 --> 00:29:12,190
did the same thing when zenkei checks in

00:29:10,600 --> 00:29:14,350
and picks a number to put between 0 and

00:29:12,190 --> 00:29:16,330
1 and it says i'm i'm interested in

00:29:14,350 --> 00:29:20,710
being this aggressive for this rollout

00:29:16,330 --> 00:29:27,490
and you know if i'm a client and i say

00:29:20,710 --> 00:29:30,039
i'm in time my gresham is 0.4 and the

00:29:27,490 --> 00:29:33,940
server says I'm only rolling out

00:29:30,039 --> 00:29:35,380
releases to 0.3 and below then I won't

00:29:33,940 --> 00:29:38,320
get that update yet I won't even be told

00:29:35,380 --> 00:29:40,120
it exists so what that lets us do is

00:29:38,320 --> 00:29:42,370
just roll out releases it gradually over

00:29:40,120 --> 00:29:44,049
time and that means that if someone

00:29:42,370 --> 00:29:45,760
reports a regression to us or we find

00:29:44,049 --> 00:29:48,970
out about it in some way we can stop the

00:29:45,760 --> 00:29:51,010
roll out without having blatted this

00:29:48,970 --> 00:29:55,360
update to however many to the entire

00:29:51,010 --> 00:29:58,289
fleet of nodes and other things in

00:29:55,360 --> 00:30:01,030
county can do so that's that's sort of a

00:29:58,289 --> 00:30:03,640
distro wide piece of fun

00:30:01,030 --> 00:30:06,130
but individual nodes individual clusters

00:30:03,640 --> 00:30:08,950
can also be configured to have their own

00:30:06,130 --> 00:30:10,870
services they check into so if you're

00:30:08,950 --> 00:30:11,890
running a cluster you probably want to

00:30:10,870 --> 00:30:13,480
make sure that every node in that

00:30:11,890 --> 00:30:16,390
cluster doesn't update at the same time

00:30:13,480 --> 00:30:19,510
and the way you can do that is have Zen

00:30:16,390 --> 00:30:22,000
caddy call a service in your cluster and

00:30:19,510 --> 00:30:22,990
say may I update now and that service

00:30:22,000 --> 00:30:25,740
can make sure that it gives permission

00:30:22,990 --> 00:30:27,820
to exactly one note at a time or two

00:30:25,740 --> 00:30:29,050
maybe it only gives out permission in

00:30:27,820 --> 00:30:32,350
the middle of the night whatever it is

00:30:29,050 --> 00:30:34,390
you want to do we will provide at least

00:30:32,350 --> 00:30:37,800
one implementation of an example service

00:30:34,390 --> 00:30:37,800
or you can you can provide your own

00:30:38,160 --> 00:30:47,350
release streams Jonathan mentioned

00:30:42,990 --> 00:30:48,970
unmade CI before CI is good it can't

00:30:47,350 --> 00:30:50,830
catch everything we are shipping the

00:30:48,970 --> 00:30:52,650
Linux kernel your shipping system D we

00:30:50,830 --> 00:30:56,050
are shipping multiple container runtimes

00:30:52,650 --> 00:30:58,480
that's a lot of code being written by a

00:30:56,050 --> 00:31:02,550
lot of people and CI is just not going

00:30:58,480 --> 00:31:05,470
to catch all of the interesting bugs so

00:31:02,550 --> 00:31:08,560
when we roll out a release we want to be

00:31:05,470 --> 00:31:10,990
able to do it in a way that users can

00:31:08,560 --> 00:31:14,200
test it on with their workloads with

00:31:10,990 --> 00:31:16,900
their network configurations on their

00:31:14,200 --> 00:31:19,200
hardware and let us know if there are

00:31:16,900 --> 00:31:23,440
problems before it hits the entire fleet

00:31:19,200 --> 00:31:28,420
so the way we do that is any we start

00:31:23,440 --> 00:31:31,090
with Fedora 30 right now plus the set of

00:31:28,420 --> 00:31:33,430
uptick packages and every two weeks we

00:31:31,090 --> 00:31:37,720
snapshot that and we make a release on

00:31:33,430 --> 00:31:39,220
the testing stream and the idea is users

00:31:37,720 --> 00:31:41,370
we would encourage to run a few

00:31:39,220 --> 00:31:45,850
percentage of their nodes on testing

00:31:41,370 --> 00:31:48,910
report problems to us after two weeks we

00:31:45,850 --> 00:31:50,920
take that testing release and we maybe

00:31:48,910 --> 00:31:53,740
make whatever fixes are necessary add

00:31:50,920 --> 00:31:55,780
security fixes whatever and roll it up

00:31:53,740 --> 00:31:59,650
to the stable stream and that will be

00:31:55,780 --> 00:32:02,080
rolled out over time to everybody we

00:31:59,650 --> 00:32:04,630
also have this stream next which is

00:32:02,080 --> 00:32:06,580
intended to give extra baking time for

00:32:04,630 --> 00:32:08,680
longer changes so for certain types of

00:32:06,580 --> 00:32:12,020
things a two-week test period is

00:32:08,680 --> 00:32:16,010
probably not enough that's things like

00:32:12,020 --> 00:32:20,030
new substantial kernel releases fedora

00:32:16,010 --> 00:32:22,190
31 as a whole and so those sorts of

00:32:20,030 --> 00:32:26,560
things will be on the next stream for

00:32:22,190 --> 00:32:26,560
longer to get more time to get feedback

00:32:26,680 --> 00:32:32,660
as it says we hope users run a little

00:32:30,620 --> 00:32:34,750
bit of testing a little bit of next in

00:32:32,660 --> 00:32:38,540
production next to their stable nodes

00:32:34,750 --> 00:32:40,520
and in order to make that work we will

00:32:38,540 --> 00:32:43,730
apply critical bug fixes and security

00:32:40,520 --> 00:32:45,620
fixes to all three strings so you're not

00:32:43,730 --> 00:32:47,390
in a situation where I'm running next

00:32:45,620 --> 00:32:51,890
and that's fine but there's this unfun

00:32:47,390 --> 00:32:53,480
fixed security vulnerability one other

00:32:51,890 --> 00:32:55,670
thing that's interesting that we're

00:32:53,480 --> 00:32:59,510
doing is we're enabling machine counting

00:32:55,670 --> 00:33:02,410
by default there's a there's a trade-off

00:32:59,510 --> 00:33:04,850
here one of the things that we found

00:33:02,410 --> 00:33:07,730
with container linux with the door

00:33:04,850 --> 00:33:10,400
atomic host Fedora as a whole in fact

00:33:07,730 --> 00:33:12,830
it's very difficult to focus development

00:33:10,400 --> 00:33:15,470
time if you don't know how many users

00:33:12,830 --> 00:33:17,930
you have and what they're doing

00:33:15,470 --> 00:33:20,480
so for Fedora core OS do we spend more

00:33:17,930 --> 00:33:22,070
time on AWS do we spend more time on

00:33:20,480 --> 00:33:24,740
digitalocean or packet making those

00:33:22,070 --> 00:33:26,690
platforms better that kind of thing on

00:33:24,740 --> 00:33:29,000
the other hand privacy is important this

00:33:26,690 --> 00:33:30,410
is this is free software people don't

00:33:29,000 --> 00:33:31,670
want their machines spying on them and

00:33:30,410 --> 00:33:35,330
we understand that that is very

00:33:31,670 --> 00:33:37,700
important to us as well so we're trying

00:33:35,330 --> 00:33:43,100
to strike a balance here by default

00:33:37,700 --> 00:33:45,440
Fedora core OS will report some sort of

00:33:43,100 --> 00:33:47,080
generic information about nodes that are

00:33:45,440 --> 00:33:49,670
running and by what can really mean

00:33:47,080 --> 00:33:52,040
non-identifying information so this is

00:33:49,670 --> 00:33:55,970
things like I'm running on AWS I'm

00:33:52,040 --> 00:33:59,000
running an M for large instance type my

00:33:55,970 --> 00:34:00,950
OS version is X the original installed

00:33:59,000 --> 00:34:04,220
version of the OS version was Y these

00:34:00,950 --> 00:34:06,620
are things that hopefully are apply to

00:34:04,220 --> 00:34:11,179
enough people that it shouldn't

00:34:06,620 --> 00:34:12,440
fingerprint a node if you want you'll be

00:34:11,179 --> 00:34:14,179
able to opt in to additional to

00:34:12,440 --> 00:34:17,030
reporting additional information like if

00:34:14,179 --> 00:34:18,649
you're on bare metal what type of

00:34:17,030 --> 00:34:20,840
machine you have there's probably fewer

00:34:18,649 --> 00:34:23,090
of those so it might theoretically

00:34:20,840 --> 00:34:24,890
fingerprint you or of course it will

00:34:23,090 --> 00:34:27,040
always be possible to completely opt out

00:34:24,890 --> 00:34:29,409
of this

00:34:27,040 --> 00:34:30,700
the key point here is we will not we

00:34:29,409 --> 00:34:32,500
will only look at this information in

00:34:30,700 --> 00:34:35,230
aggregate we will not look at individual

00:34:32,500 --> 00:34:37,599
records and no unique identifiers will

00:34:35,230 --> 00:34:39,940
be reported at all the way this

00:34:37,599 --> 00:34:42,210
effectively works is that once a day the

00:34:39,940 --> 00:34:44,290
node says oh I need to report in and

00:34:42,210 --> 00:34:48,429
give this information but there's no

00:34:44,290 --> 00:34:50,319
unique IDs we feel that it's important

00:34:48,429 --> 00:34:51,700
to have this on by default because

00:34:50,319 --> 00:34:55,419
otherwise we won't get an accurate

00:34:51,700 --> 00:34:57,549
sample but you know hopefully we're

00:34:55,419 --> 00:35:00,609
preserving the privacy properties that

00:34:57,549 --> 00:35:02,140
we want to be preserving here and we

00:35:00,609 --> 00:35:04,299
will carefully document in the getting

00:35:02,140 --> 00:35:10,210
started guide and everything else that

00:35:04,299 --> 00:35:14,200
this is going on ok so how do we

00:35:10,210 --> 00:35:18,190
actually build for a core OS so actually

00:35:14,200 --> 00:35:21,010
this is shared with red-hot core OS the

00:35:18,190 --> 00:35:24,369
main tool is Korres assembler so it's

00:35:21,010 --> 00:35:26,440
sort of this collection of capabilities

00:35:24,369 --> 00:35:30,460
that together make it really really easy

00:35:26,440 --> 00:35:32,859
to build for requests locally so it's

00:35:30,460 --> 00:35:35,440
both used for developers for development

00:35:32,859 --> 00:35:38,680
purposes and for production

00:35:35,440 --> 00:35:40,390
so it's essentially just with three

00:35:38,680 --> 00:35:44,020
steps you can build kernel chorus

00:35:40,390 --> 00:35:46,900
locally you do cosa in it and then you

00:35:44,020 --> 00:35:50,079
give it the this repo so that sort of

00:35:46,900 --> 00:35:53,170
course config repo is where all the

00:35:50,079 --> 00:35:56,109
definition files for what goes into

00:35:53,170 --> 00:35:58,720
federal chorus live so you know all the

00:35:56,109 --> 00:36:00,910
packages and then soon we'll have lock

00:35:58,720 --> 00:36:03,099
files so actually specifically what

00:36:00,910 --> 00:36:07,089
version of each package we want in in

00:36:03,099 --> 00:36:08,710
there and then fetch fetch as the

00:36:07,089 --> 00:36:10,900
packages and build will build it of

00:36:08,710 --> 00:36:12,400
course so a cool thing of course

00:36:10,900 --> 00:36:16,599
assembler is it can run fully

00:36:12,400 --> 00:36:18,819
unprivileged so under the hood it uses

00:36:16,599 --> 00:36:23,260
rpm which 3 of course to convert the

00:36:18,819 --> 00:36:26,020
rpms into an OS tree and then super min

00:36:23,260 --> 00:36:29,020
so Superman is both used for doing the

00:36:26,020 --> 00:36:31,660
unprivileged stuff but also for actually

00:36:29,020 --> 00:36:35,710
creating the disk images that become the

00:36:31,660 --> 00:36:37,600
cloud or the bare metal images a big

00:36:35,710 --> 00:36:40,090
difference between request

00:36:37,600 --> 00:36:43,540
Korra's compared to let's say the rest

00:36:40,090 --> 00:36:45,490
of our traditional fedora is it does not

00:36:43,540 --> 00:36:49,720
use anaconda to build images

00:36:45,490 --> 00:36:52,120
so this first reason for this but yeah

00:36:49,720 --> 00:36:54,220
the idea here is like I said earlier

00:36:52,120 --> 00:36:57,730
right we have ignition is sort of the

00:36:54,220 --> 00:37:02,200
only tool we want to have to specify how

00:36:57,730 --> 00:37:04,420
you want your machine provisioned so how

00:37:02,200 --> 00:37:07,390
do we actually run for a core the core

00:37:04,420 --> 00:37:09,700
assembler in production to build the

00:37:07,390 --> 00:37:13,720
production images is a federal chorus

00:37:09,700 --> 00:37:15,460
line so it's simply a junkets pipeline

00:37:13,720 --> 00:37:17,470
that will run chorus assembler in

00:37:15,460 --> 00:37:20,730
openshift so everything happens and

00:37:17,470 --> 00:37:25,950
OpenShift and then we push those out to

00:37:20,730 --> 00:37:28,150
to the to s3 okay so where are we now

00:37:25,950 --> 00:37:31,390
there is a preview release of fedora

00:37:28,150 --> 00:37:33,940
chorus available today it's not ready to

00:37:31,390 --> 00:37:35,650
run in production so please don't what

00:37:33,940 --> 00:37:37,240
we'd like people to do is try it out

00:37:35,650 --> 00:37:41,110
report bugs to us report missing

00:37:37,240 --> 00:37:43,390
features be aware that we're reserving

00:37:41,110 --> 00:37:44,740
the right to make backward and

00:37:43,390 --> 00:37:49,090
compatible changes during the preview

00:37:44,740 --> 00:37:52,810
period in order to fix things or improve

00:37:49,090 --> 00:37:54,520
the design in more or less five months

00:37:52,810 --> 00:37:56,380
from now we're playing to have a stable

00:37:54,520 --> 00:37:58,180
release at which point we will recommend

00:37:56,380 --> 00:38:03,550
that Fedora chorus is ready to run in

00:37:58,180 --> 00:38:07,330
production so specifically what's next

00:38:03,550 --> 00:38:08,820
we need to finish implementing the all

00:38:07,330 --> 00:38:11,680
three of the streams that I mentioned

00:38:08,820 --> 00:38:13,900
we're working on adding additional cloud

00:38:11,680 --> 00:38:17,290
invert platforms support for

00:38:13,900 --> 00:38:19,410
architectures other than x86 life pixie

00:38:17,290 --> 00:38:24,160
support that I mentioned also earlier

00:38:19,410 --> 00:38:26,620
also live CDs some workaround network

00:38:24,160 --> 00:38:29,710
configuration additional sugar for the

00:38:26,620 --> 00:38:31,660
config transpiler machine counting right

00:38:29,710 --> 00:38:33,010
now is actually only a stub it reads the

00:38:31,660 --> 00:38:34,840
config file and make sure that it's

00:38:33,010 --> 00:38:38,200
valid so that you can configure your

00:38:34,840 --> 00:38:40,000
nodes but it doesn't do anything yet we

00:38:38,200 --> 00:38:43,870
will have much more documentation and we

00:38:40,000 --> 00:38:46,750
are also working on some details around

00:38:43,870 --> 00:38:49,120
integration with okd and kubernetes

00:38:46,750 --> 00:38:51,310
generally this is worth calling out

00:38:49,120 --> 00:38:52,660
specifically because the okt for

00:38:51,310 --> 00:38:57,120
effort is getting spun up at the same

00:38:52,660 --> 00:39:02,250
time in the short-term the plan there is

00:38:57,120 --> 00:39:04,570
to essentially branch Fedora core OS and

00:39:02,250 --> 00:39:07,900
both in whatever needs to be bolted in

00:39:04,570 --> 00:39:11,920
just to get okd to a minimally working

00:39:07,900 --> 00:39:14,410
state to have a demo after that we will

00:39:11,920 --> 00:39:16,450
start working on integrating that okd

00:39:14,410 --> 00:39:19,570
work back into Fedora chorus so there's

00:39:16,450 --> 00:39:22,840
one distro that's used for okay do you

00:39:19,570 --> 00:39:26,230
get use cases for other kubernetes

00:39:22,840 --> 00:39:28,480
distros as well as for non communities

00:39:26,230 --> 00:39:30,190
use cases and I listed there are a

00:39:28,480 --> 00:39:32,260
couple of the open issues in order to

00:39:30,190 --> 00:39:35,800
make that happen

00:39:32,260 --> 00:39:39,370
finally a note on the the districts that

00:39:35,800 --> 00:39:42,940
we came from Fedora atomic host will has

00:39:39,370 --> 00:39:45,070
not updated fedora 30 and we'll go

00:39:42,940 --> 00:39:47,920
end-of-life late now in November so

00:39:45,070 --> 00:39:51,250
depending on Fedora schedules container

00:39:47,920 --> 00:39:53,650
Linux will continue to be maintained for

00:39:51,250 --> 00:39:55,480
about six months and after the stable

00:39:53,650 --> 00:39:57,190
release of Fedora core OS and we will

00:39:55,480 --> 00:40:00,130
announce exact timing when we get closer

00:39:57,190 --> 00:40:02,740
to that point for container Linux users

00:40:00,130 --> 00:40:05,080
will provide migration tools and Docs

00:40:02,740 --> 00:40:06,640
and as much help as we can to help

00:40:05,080 --> 00:40:08,830
people migrate their existing work loads

00:40:06,640 --> 00:40:12,220
from container Linux over to Fedora core

00:40:08,830 --> 00:40:15,190
OS here's the usual list of places you

00:40:12,220 --> 00:40:16,720
can go for the website is the download

00:40:15,190 --> 00:40:20,880
site it also links to the getting

00:40:16,720 --> 00:40:23,200
started guide the second link is

00:40:20,880 --> 00:40:25,270
essentially the focus of development for

00:40:23,200 --> 00:40:27,130
Fedora core OS and then there's some

00:40:25,270 --> 00:40:29,500
other places you can discuss Fedora

00:40:27,130 --> 00:40:31,810
chorus with us as well thank you very

00:40:29,500 --> 00:40:33,310
much

00:40:31,810 --> 00:40:35,080
looks like we have about two minutes

00:40:33,310 --> 00:40:37,180
left we can maybe take a question or two

00:40:35,080 --> 00:40:40,230
and I think both of us will be available

00:40:37,180 --> 00:40:40,230
outside after the talk

00:40:44,970 --> 00:40:51,000
Thanks my questions about what's

00:40:48,060 --> 00:40:52,319
updating and releasing fedora chorus

00:40:51,000 --> 00:40:54,810
will look like so do you plan on

00:40:52,319 --> 00:40:57,150
releasing like ad for Amazon case

00:40:54,810 --> 00:41:00,420
regular a.m. eyes and then if I wanted

00:40:57,150 --> 00:41:04,500
to update fedora so just and how how how

00:41:00,420 --> 00:41:05,970
often will you release those AM eyes I'm

00:41:04,500 --> 00:41:09,780
gonna have a hearing nod so that means

00:41:05,970 --> 00:41:12,329
often sure so the current plan the exact

00:41:09,780 --> 00:41:14,579
timing is subject to some change but all

00:41:12,329 --> 00:41:17,970
three streams will release at least

00:41:14,579 --> 00:41:19,619
every two weeks in addition to those

00:41:17,970 --> 00:41:21,420
scheduled releases we can have out of

00:41:19,619 --> 00:41:23,040
cycle releases so if there's some major

00:41:21,420 --> 00:41:24,210
security update that needs to go out

00:41:23,040 --> 00:41:26,099
immediately

00:41:24,210 --> 00:41:28,589
we'll do a special releases on all three

00:41:26,099 --> 00:41:30,420
channels for that and that will be four

00:41:28,589 --> 00:41:33,480
that will be an update payload and it

00:41:30,420 --> 00:41:35,280
will also be new Ami's new qmu manages

00:41:33,480 --> 00:41:38,099
everything okay so you plan to release

00:41:35,280 --> 00:41:44,760
the OS trees and the image builds at the

00:41:38,099 --> 00:41:47,550
same time perfect yeah so you mentioned

00:41:44,760 --> 00:41:50,069
towards the end of that about okd and

00:41:47,550 --> 00:41:53,130
the integration of this when you say by

00:41:50,069 --> 00:41:55,349
branching F cause for this do you mean

00:41:53,130 --> 00:41:58,859
specifically like there's going to be a

00:41:55,349 --> 00:42:00,869
separate OS tree stream and a separate

00:41:58,859 --> 00:42:04,230
image stream for this or is there going

00:42:00,869 --> 00:42:06,990
to be like some kind of overlay package

00:42:04,230 --> 00:42:08,670
overlay or container overlay what do you

00:42:06,990 --> 00:42:11,130
mean by that because that's that's kind

00:42:08,670 --> 00:42:12,480
of confusing especially I came from just

00:42:11,130 --> 00:42:13,530
hearing the silver bull talk and he was

00:42:12,480 --> 00:42:16,589
talking about all kinds of weird things

00:42:13,530 --> 00:42:19,410
you can do on top of the RPM OS tree

00:42:16,589 --> 00:42:22,800
core for this we don't actually know

00:42:19,410 --> 00:42:24,780
right now it may be a separate OS tree

00:42:22,800 --> 00:42:26,430
in May that was I think what we were

00:42:24,780 --> 00:42:27,540
talking about at first then we started

00:42:26,430 --> 00:42:30,540
talking about just doing package

00:42:27,540 --> 00:42:34,190
overlays the latter approach is cleaner

00:42:30,540 --> 00:42:36,750
because the it requires less extra stuff

00:42:34,190 --> 00:42:40,790
we want to go for the smallest possible

00:42:36,750 --> 00:42:40,790
branch not clear what that's going to be

00:42:41,960 --> 00:42:48,260
- quick quick quick quick questions one

00:42:45,460 --> 00:42:52,670
automatic updates is that going to

00:42:48,260 --> 00:42:54,890
destroy custom things second question if

00:42:52,670 --> 00:42:59,120
you add all the bug fixes to stable how

00:42:54,890 --> 00:43:00,620
does that keep it stable right so the

00:42:59,120 --> 00:43:02,780
first question if you have

00:43:00,620 --> 00:43:04,820
customizations in Etsy or you have

00:43:02,780 --> 00:43:07,520
something an opt for example that will

00:43:04,820 --> 00:43:10,370
not be destroyed by an upgrade the parts

00:43:07,520 --> 00:43:12,650
of of the system which are modified by

00:43:10,370 --> 00:43:13,820
an upgrade are read-only so you can't

00:43:12,650 --> 00:43:17,630
accidentally get yourself in trouble

00:43:13,820 --> 00:43:25,340
there and the second question sorry

00:43:17,630 --> 00:43:27,440
remind me carefully so it's a tough but

00:43:25,340 --> 00:43:28,790
we've been dealing with this with the

00:43:27,440 --> 00:43:31,970
container linux ID for several years

00:43:28,790 --> 00:43:35,000
it's a tough call if there's something

00:43:31,970 --> 00:43:36,680
which is a large change and probably not

00:43:35,000 --> 00:43:39,140
that urgent we would roll it through

00:43:36,680 --> 00:43:40,970
testing first if there's a change which

00:43:39,140 --> 00:43:43,460
is small and urgent we would probably

00:43:40,970 --> 00:43:45,440
send it direct to stable if there's a

00:43:43,460 --> 00:43:47,960
change like fixing spectra and meltdown

00:43:45,440 --> 00:43:49,880
which is important and also a giant

00:43:47,960 --> 00:43:51,380
patch series we may have to hold our

00:43:49,880 --> 00:43:53,420
nose and send it directly to stable and

00:43:51,380 --> 00:43:55,450
that's not ideal but it's a judgement

00:43:53,420 --> 00:43:55,450
call

00:43:57,700 --> 00:44:01,240
yeah we will

00:44:01,990 --> 00:44:06,860
yeah we'll do that when we feel we have

00:44:04,520 --> 00:44:08,750
to but with security updates and really

00:44:06,860 --> 00:44:11,620
critical bugs there's just there's a

00:44:08,750 --> 00:44:11,620
judgment call sometimes

00:44:15,500 --> 00:44:20,290

YouTube URL: https://www.youtube.com/watch?v=v3PjmAfPchY


