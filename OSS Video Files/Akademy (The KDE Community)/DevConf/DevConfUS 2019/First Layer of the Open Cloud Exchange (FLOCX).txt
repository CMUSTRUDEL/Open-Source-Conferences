Title: First Layer of the Open Cloud Exchange (FLOCX)
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speaker: Ali Raza

FLOCX provides a marketplace for trading physical servers among co-located pools of hardware where each pool is owned and managed by independent organizations. Using FLOCX, organizations can rent nodes from their co-located neighbors in times of high demand and offer their own resources at a suitable price when others experience high demand.  This talk with describe FLOCX design and implementation, including a demonstration of FLOCX (https://cci-moc.github.io/flocx/ ) in the Mass Open Cloud (https://massopen.cloud/ ).
Captions: 
	00:00:13,360 --> 00:00:17,480
hey folks welcome once again to the

00:00:15,799 --> 00:00:21,829
conference auditorium at that current

00:00:17,480 --> 00:00:24,439
viewers today we're going to have a talk

00:00:21,829 --> 00:00:26,779
about flux that's the first layer of the

00:00:24,439 --> 00:00:30,919
open cloud exchange our presenters are

00:00:26,779 --> 00:00:35,290
ali raza Zhu min Chen Jacob Dixon and

00:00:30,919 --> 00:00:35,290
Liam again please welcome our speakers

00:00:41,020 --> 00:00:47,810
along with Jacob and Leo I will be

00:00:44,960 --> 00:00:53,090
presenting flocks which is a hardware

00:00:47,810 --> 00:00:55,280
trading system in OpenStack all right so

00:00:53,090 --> 00:00:58,100
before going into details of flocks

00:00:55,280 --> 00:01:00,860
let's take a step back to the previous

00:00:58,100 --> 00:01:04,579
damn conf we talked about the grand

00:01:00,860 --> 00:01:07,760
vision of open cloud exchange so what is

00:01:04,579 --> 00:01:10,550
open cloud exchange it's a place where

00:01:07,760 --> 00:01:13,909
multiples take on stakeholders come

00:01:10,550 --> 00:01:15,409
together and the cloud where different

00:01:13,909 --> 00:01:19,340
stakeholders can contribute in a

00:01:15,409 --> 00:01:23,840
different way for example hardware and

00:01:19,340 --> 00:01:26,810
hardware and researchers can build new

00:01:23,840 --> 00:01:29,630
algorithms or products a developer can

00:01:26,810 --> 00:01:31,880
build an application and they can deploy

00:01:29,630 --> 00:01:35,060
them in the production environment and

00:01:31,880 --> 00:01:38,570
they can get insights about their

00:01:35,060 --> 00:01:42,100
products or their approaches and also

00:01:38,570 --> 00:01:50,840
get the real life real user feedback

00:01:42,100 --> 00:01:53,479
from this cloud so moc is an active open

00:01:50,840 --> 00:01:56,270
cloud exchange where we have different

00:01:53,479 --> 00:02:00,439
hardware vendors like in the red ad and

00:01:56,270 --> 00:02:02,630
Cisco who contributed in terms of

00:02:00,439 --> 00:02:10,220
hardware and then we have researchers

00:02:02,630 --> 00:02:14,419
from Harvard MIT research projects and

00:02:10,220 --> 00:02:18,109
products in MOC we have a OpenStack

00:02:14,419 --> 00:02:21,129
OpenShift chef storage system and also

00:02:18,109 --> 00:02:23,779
ESI that I will explain in detail later

00:02:21,129 --> 00:02:26,239
these softwares and application in

00:02:23,779 --> 00:02:30,109
production there we have a lot of

00:02:26,239 --> 00:02:33,919
hardware as you can see 2500 in telcos

00:02:30,109 --> 00:02:39,590
and 1.5 petabytes of storage and 45

00:02:33,919 --> 00:02:42,219
terabyte of RAM ok so to have a

00:02:39,590 --> 00:02:44,930
functional open cloud exchange you need

00:02:42,219 --> 00:02:47,150
few components here we listed all of

00:02:44,930 --> 00:02:49,129
them first is elastic secure

00:02:47,150 --> 00:02:52,669
infrastructure what do we mean by

00:02:49,129 --> 00:02:56,419
elastic secure infrastructure is that if

00:02:52,669 --> 00:02:58,879
a user need resources and another user

00:02:56,419 --> 00:03:02,209
has access resources or free resources

00:02:58,879 --> 00:03:04,370
they can give access

00:03:02,209 --> 00:03:11,060
to these resources to the other users

00:03:04,370 --> 00:03:12,950
who want this for open cloud exchange I

00:03:11,060 --> 00:03:16,359
always get confused with those yes okay

00:03:12,950 --> 00:03:19,280
so open exchange you need protection

00:03:16,359 --> 00:03:21,079
OpenStack and safe storage system and

00:03:19,280 --> 00:03:24,680
community services available

00:03:21,079 --> 00:03:28,129
you also need single sign-on to access

00:03:24,680 --> 00:03:29,689
all the OpenStack services as we already

00:03:28,129 --> 00:03:31,760
talked about that there would be a

00:03:29,689 --> 00:03:35,030
resource sharing you want to incentivize

00:03:31,760 --> 00:03:37,909
people who want to give their resources

00:03:35,030 --> 00:03:40,849
for temporary use to others and so you

00:03:37,909 --> 00:03:43,669
need pricing and billing or incentivize

00:03:40,849 --> 00:03:46,519
in some way credit or any system like

00:03:43,669 --> 00:03:49,189
that you also need resource Federation

00:03:46,519 --> 00:03:51,590
between different OpenStack services and

00:03:49,189 --> 00:03:55,389
in the end you also need a system for

00:03:51,590 --> 00:03:55,389
onboarding and managing users

00:03:55,810 --> 00:04:01,700
okay so out of these goes we were able

00:04:00,080 --> 00:04:05,000
to heal some of them during the summer

00:04:01,700 --> 00:04:08,920
2019 we implemented elastic secure

00:04:05,000 --> 00:04:11,900
infrastructure which allows users to

00:04:08,920 --> 00:04:14,360
give access to their resources to other

00:04:11,900 --> 00:04:17,720
users who need them and then we also

00:04:14,360 --> 00:04:20,930
build a build marketplace where

00:04:17,720 --> 00:04:25,340
consumers who need resources come and

00:04:20,930 --> 00:04:26,660
record like in terms of bid or

00:04:25,340 --> 00:04:29,690
requirement they submit their

00:04:26,660 --> 00:04:32,570
requirements that hey I want these many

00:04:29,690 --> 00:04:35,540
nodes with these hardware specs for this

00:04:32,570 --> 00:04:38,360
much time and then you match them with

00:04:35,540 --> 00:04:41,060
the offers that you come that you get

00:04:38,360 --> 00:04:44,560
through ESI and then you give access to

00:04:41,060 --> 00:04:46,970
the people consumers to these nodes and

00:04:44,560 --> 00:04:47,510
we built both of them as OpenStack

00:04:46,970 --> 00:04:52,430
services

00:04:47,510 --> 00:04:55,790
so our OpenStack is also live so before

00:04:52,430 --> 00:04:57,950
going into the details of demo and flocs

00:04:55,790 --> 00:04:59,690
will just want you to get familiarized

00:04:57,950 --> 00:05:02,990
with some of the terms that we will be

00:04:59,690 --> 00:05:05,690
using a user is any person with

00:05:02,990 --> 00:05:09,380
appropriate Keystone authentication or a

00:05:05,690 --> 00:05:11,900
phlox user or OpenStack user hardware

00:05:09,380 --> 00:05:15,650
owners are the people who own the nodes

00:05:11,900 --> 00:05:21,770
in OpenStack and an offer is a record

00:05:15,650 --> 00:05:23,960
where in the phlox market place a record

00:05:21,770 --> 00:05:26,240
that comes through the ESI that says

00:05:23,960 --> 00:05:30,380
that this hardware is available for this

00:05:26,240 --> 00:05:33,260
much time or at this price which is the

00:05:30,380 --> 00:05:35,960
requirement coming from a user consumer

00:05:33,260 --> 00:05:38,300
that wants the higher wants to use the

00:05:35,960 --> 00:05:41,650
hardware and contracts are the binding

00:05:38,300 --> 00:05:44,480
between the bidders and the offer offers

00:05:41,650 --> 00:05:47,700
projects are phlox you like Keystone

00:05:44,480 --> 00:05:50,610
projects a multi-tenant iron

00:05:47,700 --> 00:05:53,620
[Music]

00:05:50,610 --> 00:05:58,300
so during the summer we wanted to build

00:05:53,620 --> 00:06:01,270
vlogs so that hardware owners can offer

00:05:58,300 --> 00:06:04,090
access to their nodes and a consumer can

00:06:01,270 --> 00:06:07,450
come and specify their needs and then

00:06:04,090 --> 00:06:12,340
our flocks will match these builds and

00:06:07,450 --> 00:06:16,060
offers and then create contracts after

00:06:12,340 --> 00:06:19,270
the contract is in place the person who

00:06:16,060 --> 00:06:23,140
won the bid who got matched they

00:06:19,270 --> 00:06:26,800
can access to the to the nodes using

00:06:23,140 --> 00:06:31,350
ironic and we also wanted a Web API to

00:06:26,800 --> 00:06:31,350
make everything functional for the users

00:06:33,720 --> 00:06:40,330
all of these goes during the summer and

00:06:36,670 --> 00:06:45,780
we have a live marketplace which we call

00:06:40,330 --> 00:06:50,770
flocks in MOC we used horizon web

00:06:45,780 --> 00:06:55,390
graphical user interface that exposes to

00:06:50,770 --> 00:06:57,880
the user the flocs api we deployed all

00:06:55,390 --> 00:06:59,740
of this in standard OpenStack using

00:06:57,880 --> 00:07:03,880
Keystone authentication service and

00:06:59,740 --> 00:07:06,610
origin user interface plugin and we made

00:07:03,880 --> 00:07:08,580
possible the access using ironic Nord

00:07:06,610 --> 00:07:11,010
properties and over filters

00:07:08,580 --> 00:07:13,530
[Music]

00:07:11,010 --> 00:07:17,880
while we were implementing we also took

00:07:13,530 --> 00:07:19,590
some assumptions all of them we assumed

00:07:17,880 --> 00:07:22,710
that there is only one single OpenStack

00:07:19,590 --> 00:07:24,990
instance all the hardware is same

00:07:22,710 --> 00:07:28,430
homogenous pools of bare metal servers

00:07:24,990 --> 00:07:30,750
and also all the nodes in the cloud are

00:07:28,430 --> 00:07:34,950
standard like they have standard storage

00:07:30,750 --> 00:07:38,960
and the network facilities so here is a

00:07:34,950 --> 00:07:42,360
like a high level view of half log work

00:07:38,960 --> 00:07:45,030
we see that there is a hardware owner

00:07:42,360 --> 00:07:47,310
this can be any project owner or anyone

00:07:45,030 --> 00:07:49,290
who owns some nodes let's say they own

00:07:47,310 --> 00:07:52,920
these server one server two and server

00:07:49,290 --> 00:07:57,000
three in an open cycle and they want to

00:07:52,920 --> 00:08:00,680
offer any of this server up for a graph

00:07:57,000 --> 00:08:00,680
for any other user who wants to use it

00:08:02,990 --> 00:08:07,410
so what they will do they will create an

00:08:05,820 --> 00:08:11,190
offer and they send it to the

00:08:07,410 --> 00:08:13,620
marketplace and they will also pull the

00:08:11,190 --> 00:08:15,660
ionic configuration and they will attach

00:08:13,620 --> 00:08:18,330
it to the often that would put it here

00:08:15,660 --> 00:08:21,240
in a marketplace so that will go into

00:08:18,330 --> 00:08:22,830
the offer record and then a hardware

00:08:21,240 --> 00:08:24,420
consumer comes in let's say it's a

00:08:22,830 --> 00:08:26,850
researcher who wants to run some

00:08:24,420 --> 00:08:30,600
algorithm on some number of nodes with

00:08:26,850 --> 00:08:33,060
particular hardware configurations so

00:08:30,600 --> 00:08:35,460
they will specify I want these many

00:08:33,060 --> 00:08:37,140
nodes with this much CPU architect out

00:08:35,460 --> 00:08:40,040
this much memory or story or whatever

00:08:37,140 --> 00:08:43,110
they want that will come here in beds

00:08:40,040 --> 00:08:45,540
then periodically we have a service

00:08:43,110 --> 00:08:48,480
called management service that would run

00:08:45,540 --> 00:08:50,910
and they will see ok how many offers I

00:08:48,480 --> 00:08:53,280
got or how many servers I have that are

00:08:50,910 --> 00:08:55,560
up for grab and then they will look at

00:08:53,280 --> 00:08:56,250
what are the builds what are people want

00:08:55,560 --> 00:08:58,890
and

00:08:56,250 --> 00:09:01,230
we'll match them and in case there is a

00:08:58,890 --> 00:09:06,540
match it will create a contract and put

00:09:01,230 --> 00:09:09,300
it in the contract record and the

00:09:06,540 --> 00:09:17,780
contract is in place this consumer can

00:09:09,300 --> 00:09:20,580
access these nodes using ionic ok

00:09:17,780 --> 00:09:22,830
example of the same thing let's say we

00:09:20,580 --> 00:09:23,250
have a hardware owner who owns the

00:09:22,830 --> 00:09:28,020
server

00:09:23,250 --> 00:09:32,040
whose nose node ID is 4 5 6 so they will

00:09:28,020 --> 00:09:35,670
come to the flocs system opens tag a

00:09:32,040 --> 00:09:38,130
keystone 10th occasion and let's say

00:09:35,670 --> 00:09:40,260
first they try to offer some other node

00:09:38,130 --> 00:09:45,870
that they don't that doesn't belong to

00:09:40,260 --> 00:09:48,270
them so because this hardware owner owns

00:09:45,870 --> 00:09:51,300
the node which is 4 5 6 but they are

00:09:48,270 --> 00:09:53,550
trying to offer 1 2 3 the opposite

00:09:51,300 --> 00:09:57,660
service will say well you can't offer

00:09:53,550 --> 00:10:01,380
this because you don't own this node but

00:09:57,660 --> 00:10:04,010
if this user try to offer the node they

00:10:01,380 --> 00:10:06,420
on OpenStack

00:10:04,010 --> 00:10:09,320
provided service will pull the ironic

00:10:06,420 --> 00:10:11,960
configuration and create an offer record

00:10:09,320 --> 00:10:14,880
and then let's say the consumer comes in

00:10:11,960 --> 00:10:18,780
consumer also logs in using Keystone

00:10:14,880 --> 00:10:22,680
authentication and then it creates a bit

00:10:18,780 --> 00:10:24,270
that I want this resource with these

00:10:22,680 --> 00:10:26,220
many configurations with this

00:10:24,270 --> 00:10:28,140
configuration let's say those

00:10:26,220 --> 00:10:31,980
configuration that the consumer wants

00:10:28,140 --> 00:10:33,949
matches the offer or 4 5 6 server so in

00:10:31,980 --> 00:10:36,350
case there is a match

00:10:33,949 --> 00:10:40,819
we'll have a contract in place and then

00:10:36,350 --> 00:10:46,779
just this consumer can access to this

00:10:40,819 --> 00:10:49,519
node you through the ironic okay so

00:10:46,779 --> 00:10:51,589
while all of these all of the these

00:10:49,519 --> 00:10:54,589
transactions are happening like offers

00:10:51,589 --> 00:10:57,259
are coming to the flux marketplace their

00:10:54,589 --> 00:10:59,839
base contracts are being created access

00:10:57,259 --> 00:11:02,989
is being granted all of this happening

00:10:59,839 --> 00:11:04,819
in flux marketplace and flocks because

00:11:02,989 --> 00:11:06,980
all of these things and we are working

00:11:04,819 --> 00:11:09,889
on a user interface that will show all

00:11:06,980 --> 00:11:12,350
of these like history or report that

00:11:09,889 --> 00:11:17,629
will show the summary of whatever

00:11:12,350 --> 00:11:20,449
happened so I explained how flocks works

00:11:17,629 --> 00:11:22,999
and how we implement it now men will

00:11:20,449 --> 00:11:24,669
talk about how we implemented flocks as

00:11:22,999 --> 00:11:30,980
a combination of two services

00:11:24,669 --> 00:11:34,279
marketplace and ESI thank you okay okay

00:11:30,980 --> 00:11:36,709
so when we implemented this we

00:11:34,279 --> 00:11:39,829
implemented to lock X OpenStack services

00:11:36,709 --> 00:11:42,499
a provider service that offers resources

00:11:39,829 --> 00:11:44,239
to the marketplace and also is in charge

00:11:42,499 --> 00:11:46,279
of giving bidders access to any

00:11:44,239 --> 00:11:47,540
contracted resources and then we also

00:11:46,279 --> 00:11:50,029
have a marketplace service which

00:11:47,540 --> 00:11:51,829
receives bids offers matches the

00:11:50,029 --> 00:11:54,169
business offers and there's a match it

00:11:51,829 --> 00:11:55,759
creates a contract so one natural

00:11:54,169 --> 00:11:58,040
question might be why do we have two

00:11:55,759 --> 00:11:59,929
different services here the answer is

00:11:58,040 --> 00:12:01,759
because although for this somewhere

00:11:59,929 --> 00:12:03,739
we're assuming both of these reside

00:12:01,759 --> 00:12:06,019
within the same OpenStack in the longer

00:12:03,739 --> 00:12:07,699
term our goal is to have individual

00:12:06,019 --> 00:12:09,379
provider services each running on

00:12:07,699 --> 00:12:11,540
separate instances of OpenStack

00:12:09,379 --> 00:12:14,169
all feeding up into a single marketplace

00:12:11,540 --> 00:12:16,789
service which manager which manages

00:12:14,169 --> 00:12:18,949
contracts for every single provider in

00:12:16,789 --> 00:12:20,739
that system so that's our long-term goal

00:12:18,949 --> 00:12:22,730
and that's what we designed around

00:12:20,739 --> 00:12:25,100
monitor play my highlight here is that

00:12:22,730 --> 00:12:27,049
we are developing these services wholly

00:12:25,100 --> 00:12:29,389
within the OpenStack ecosystem we're

00:12:27,049 --> 00:12:30,859
using Keystone for authentication this

00:12:29,389 --> 00:12:32,470
integrates with ironic the bare metal

00:12:30,859 --> 00:12:34,540
service and we're also using

00:12:32,470 --> 00:12:36,430
OpenStack Gaza

00:12:34,540 --> 00:12:38,200
libraries those libraries being like the

00:12:36,430 --> 00:12:41,610
generic libraries that openstack asked

00:12:38,200 --> 00:12:41,610
people to use for OpenStack services

00:12:42,520 --> 00:12:45,580
so I'm gonna talk about this services in

00:12:44,110 --> 00:12:47,800
a second but first I had to talk about

00:12:45,580 --> 00:12:49,210
one requirement that we do have which is

00:12:47,800 --> 00:12:53,170
a multi-tenant ironic

00:12:49,210 --> 00:12:54,880
so the mulleted ironic another stack

00:12:53,170 --> 00:12:57,400
it's not tenant aware it doesn't have

00:12:54,880 --> 00:12:59,080
the concept of this note belongs to this

00:12:57,400 --> 00:13:01,330
user and this other nodes is belongs to

00:12:59,080 --> 00:13:03,640
this other user as far as ironic is

00:13:01,330 --> 00:13:05,740
concerned it's all belongs to it's all

00:13:03,640 --> 00:13:07,420
accessible to whoever administrators

00:13:05,740 --> 00:13:10,060
OpenStack and that just doesn't work for

00:13:07,420 --> 00:13:11,770
us so what we had to do was we had to

00:13:10,060 --> 00:13:13,600
simulate a multi-tenant ironic and

00:13:11,770 --> 00:13:16,390
fortunately we found the way to do this

00:13:13,600 --> 00:13:18,730
that did not involve hacking a bunch of

00:13:16,390 --> 00:13:21,850
internal ironic code ranks like that our

00:13:18,730 --> 00:13:23,140
solution is stuff that that that you can

00:13:21,850 --> 00:13:24,580
do right now with OpenStack without

00:13:23,140 --> 00:13:27,040
changing any of their internal psych

00:13:24,580 --> 00:13:28,930
services and what we did is we took

00:13:27,040 --> 00:13:31,390
advantage of the fact that Rock nodes

00:13:28,930 --> 00:13:33,310
nodes have has an attribute that's a

00:13:31,390 --> 00:13:35,740
properties that's just a dictionary read

00:13:33,310 --> 00:13:38,290
but anything you want in it and so for

00:13:35,740 --> 00:13:40,990
us we play a project under ID which

00:13:38,290 --> 00:13:42,940
matches the owner of that hardware and

00:13:40,990 --> 00:13:45,490
the project ID which is intended to be

00:13:42,940 --> 00:13:48,490
set to whatever consumer now has access

00:13:45,490 --> 00:13:50,410
to that nodes so on the consumer side we

00:13:48,490 --> 00:13:51,820
have a custom novo filter that controls

00:13:50,410 --> 00:13:54,520
provisioning access no base another

00:13:51,820 --> 00:13:56,560
project so if you're if you're in power

00:13:54,520 --> 00:14:00,100
project a and you try provision

00:13:56,560 --> 00:14:02,860
provision instance nobody will only look

00:14:00,100 --> 00:14:05,800
for their mental notes where project ID

00:14:02,860 --> 00:14:09,250
is set to a on the flip side for

00:14:05,800 --> 00:14:10,950
hardware owners we've limited ironic API

00:14:09,250 --> 00:14:13,180
access through also policy files

00:14:10,950 --> 00:14:15,280
remember that means it's a harbor owners

00:14:13,180 --> 00:14:17,440
cannot use the harmonic API whatsoever

00:14:15,280 --> 00:14:19,720
but if they do need to administrate

00:14:17,440 --> 00:14:22,000
their notes we've created a custom mr.

00:14:19,720 --> 00:14:24,760
Halbrook flows which mirrored ironic api

00:14:22,000 --> 00:14:27,940
they do the exact same thing as ronk api

00:14:24,760 --> 00:14:30,520
except that they use project owner ID to

00:14:27,940 --> 00:14:32,920
control access so they'll check that the

00:14:30,520 --> 00:14:34,850
owners project matches the project set

00:14:32,920 --> 00:14:36,620
in project under ID

00:14:34,850 --> 00:14:39,260
[Music]

00:14:36,620 --> 00:14:41,270
so bill on top of that is our first our

00:14:39,260 --> 00:14:43,820
provider service and this allows owners

00:14:41,270 --> 00:14:45,800
great offers and publishes the solvers

00:14:43,820 --> 00:14:47,930
to the marketplace there's also a Web

00:14:45,800 --> 00:14:50,450
API for operations on offers and

00:14:47,930 --> 00:14:52,220
contracts and there's also a manager

00:14:50,450 --> 00:14:54,890
service and this manager service runs

00:14:52,220 --> 00:14:56,960
independently and it's in charge of

00:14:54,890 --> 00:14:58,910
expiring offers and contracts once the

00:14:56,960 --> 00:15:00,380
end date is reached it's also needs to

00:14:58,910 --> 00:15:02,990
be able to grab contracts from the

00:15:00,380 --> 00:15:05,210
marketplace and then once that contract

00:15:02,990 --> 00:15:07,760
start date is reached it fulfills the

00:15:05,210 --> 00:15:11,440
contracts by saying certain idrogo

00:15:07,760 --> 00:15:11,440
properties the project ID

00:15:11,650 --> 00:15:16,180
on top of that there's a monthly service

00:15:13,600 --> 00:15:18,850
and this is where consumers create bids

00:15:16,180 --> 00:15:20,680
for resources so the marketplace also

00:15:18,850 --> 00:15:23,410
manages a database of offers fits and

00:15:20,680 --> 00:15:25,570
contracts has a Web API for operations

00:15:23,410 --> 00:15:28,480
on all that stuff and it too has a

00:15:25,570 --> 00:15:30,460
manager service the service is in charge

00:15:28,480 --> 00:15:33,160
of expiring offered service and

00:15:30,460 --> 00:15:34,810
contracts and there's also a job that is

00:15:33,160 --> 00:15:37,960
in charge of matching offers for bids

00:15:34,810 --> 00:15:42,420
and offering a bid match there creates a

00:15:37,960 --> 00:15:44,710
contract I'm gonna talk a little bit a

00:15:42,420 --> 00:15:46,900
little bit more detail detail about that

00:15:44,710 --> 00:15:48,910
monthly smasher so the way that mattre

00:15:46,900 --> 00:15:50,589
works is that each offer for a note

00:15:48,910 --> 00:15:53,050
includes information about the notes

00:15:50,589 --> 00:15:57,880
attributes like the disk memory stuff

00:15:53,050 --> 00:16:00,220
like that contain a server query and

00:15:57,880 --> 00:16:01,900
that server query is an array of JMS

00:16:00,220 --> 00:16:04,180
path expressions you can see two

00:16:01,900 --> 00:16:06,550
examples there you can say CPUs as the

00:16:04,180 --> 00:16:09,760
equal to 32 or local disk has to be

00:16:06,550 --> 00:16:12,400
greater than 512 so this is a very

00:16:09,760 --> 00:16:13,810
flexible system you can you can do

00:16:12,400 --> 00:16:16,959
string matching and do a bunch of a

00:16:13,810 --> 00:16:18,730
whole bunch of stuff and the matram will

00:16:16,959 --> 00:16:20,890
match the offer against a bid and it's

00:16:18,730 --> 00:16:22,150
just a match for create a contract so

00:16:20,890 --> 00:16:23,740
the advantage of the system is that you

00:16:22,150 --> 00:16:26,260
know it handles current know the

00:16:23,740 --> 00:16:30,190
attributes and then later on if you if

00:16:26,260 --> 00:16:32,170
for whatever reason our marketplace our

00:16:30,190 --> 00:16:34,330
providers size that needs to add more

00:16:32,170 --> 00:16:37,029
attributes just to somewhat handle that

00:16:34,330 --> 00:16:39,430
and on the flip side if you want to

00:16:37,029 --> 00:16:41,709
limit the choice for a user and how they

00:16:39,430 --> 00:16:43,930
bid say like you want only my user to be

00:16:41,709 --> 00:16:45,730
able to exactly specify the amount of

00:16:43,930 --> 00:16:48,670
CPUs then you can just set in the GUI

00:16:45,730 --> 00:16:50,410
says I have a GUI for the bid say you

00:16:48,670 --> 00:16:52,420
have to specify a number of CPUs and

00:16:50,410 --> 00:16:54,310
then the GUI will just create a gem you

00:16:52,420 --> 00:16:57,020
as a path expression for you so it's a

00:16:54,310 --> 00:16:59,089
very flexible way of doing things

00:16:57,020 --> 00:17:01,700
and now I'm Jakob it's going to talk

00:16:59,089 --> 00:17:04,490
about the GUI that he worked on okay I

00:17:01,700 --> 00:17:08,770
worked on the flux user interface which

00:17:04,490 --> 00:17:11,390
allows Hardware owners and uses to

00:17:08,770 --> 00:17:13,069
create office on their nodes and then

00:17:11,390 --> 00:17:15,740
create bids and get access to those

00:17:13,069 --> 00:17:18,620
ironic nodes it was implemented using

00:17:15,740 --> 00:17:19,300
horizon which is another like part of

00:17:18,620 --> 00:17:21,770
OpenStack

00:17:19,300 --> 00:17:24,350
which means you can go to the OpenStack

00:17:21,770 --> 00:17:26,990
like horizon web-based UI and it will

00:17:24,350 --> 00:17:28,940
just be there as in one of the tabs you

00:17:26,990 --> 00:17:31,370
can see the status and all your ironic

00:17:28,940 --> 00:17:33,530
nodes and if you're a hardware owner you

00:17:31,370 --> 00:17:35,890
can create offers you can create bids if

00:17:33,530 --> 00:17:38,179
you're a consumer and then when those

00:17:35,890 --> 00:17:40,100
offers and bids are matched into a

00:17:38,179 --> 00:17:43,610
contract you can also have a tab for

00:17:40,100 --> 00:17:45,800
that to list those two important things

00:17:43,610 --> 00:17:49,280
to mention is that it's still under

00:17:45,800 --> 00:17:50,660
development so there's gonna be a lot

00:17:49,280 --> 00:17:52,760
more features which we have an

00:17:50,660 --> 00:17:54,800
influential yet but for the purposes of

00:17:52,760 --> 00:17:57,530
this demo it has all the functionality

00:17:54,800 --> 00:18:01,120
required and the other thing is that

00:17:57,530 --> 00:18:04,130
later since is the provider and the

00:18:01,120 --> 00:18:06,590
marketplace there's gonna be two plugins

00:18:04,130 --> 00:18:09,850
but again for the demo they were raised

00:18:06,590 --> 00:18:09,850
into one plugin

00:18:09,869 --> 00:18:15,830
we also added a reporting tabs so as a

00:18:12,629 --> 00:18:20,059
hardware owner or an admin you can view

00:18:15,830 --> 00:18:23,820
the offered time which you have offered

00:18:20,059 --> 00:18:26,789
various nodes and you can see how long

00:18:23,820 --> 00:18:31,320
they were contracted for and so you can

00:18:26,789 --> 00:18:34,049
see if busy score is closer to one and

00:18:31,320 --> 00:18:37,289
that means it was used for more of the

00:18:34,049 --> 00:18:39,179
time and there's also for consumer and

00:18:37,289 --> 00:18:42,029
then overall of for the marketplace you

00:18:39,179 --> 00:18:44,970
can see the marketplace ratio and that

00:18:42,029 --> 00:18:48,210
will tell you that again the closer just

00:18:44,970 --> 00:18:52,399
one the more time that is being used for

00:18:48,210 --> 00:18:52,399
the time they that is offered

00:18:55,560 --> 00:19:00,450
so looking ahead for flocks we intend to

00:18:58,320 --> 00:19:03,450
have flocks deployed over multiple

00:19:00,450 --> 00:19:05,130
OpenStack instances so we vision is to

00:19:03,450 --> 00:19:06,900
have the marketplace exist on one open

00:19:05,130 --> 00:19:08,670
second since and then a hardware owner

00:19:06,900 --> 00:19:10,800
on his own open second since with his

00:19:08,670 --> 00:19:12,840
own freaking figured ironic setup we'll

00:19:10,800 --> 00:19:13,950
be able to start up a provider service

00:19:12,840 --> 00:19:15,030
and be able to connect to the

00:19:13,950 --> 00:19:16,980
marketplace over an internet connection

00:19:15,030 --> 00:19:19,050
and then the marketplace will be able to

00:19:16,980 --> 00:19:22,650
handle some contracts spanning over

00:19:19,050 --> 00:19:24,570
multiple provider services so we also

00:19:22,650 --> 00:19:27,510
intend to have expand the matching

00:19:24,570 --> 00:19:29,910
system and the offers and bid system so

00:19:27,510 --> 00:19:31,470
we want to be able to allow hardware

00:19:29,910 --> 00:19:35,040
owners say to offer up hardware over a

00:19:31,470 --> 00:19:36,810
periodic interval say three hours

00:19:35,040 --> 00:19:39,060
everyday from this time to this time and

00:19:36,810 --> 00:19:41,130
the offer would persist every day and

00:19:39,060 --> 00:19:44,670
people can come on and make bids on it

00:19:41,130 --> 00:19:45,960
on these periodic offers we also want

00:19:44,670 --> 00:19:47,910
the marketplace to be able to support

00:19:45,960 --> 00:19:50,430
requests for network and storage

00:19:47,910 --> 00:19:52,530
resources say a consumer comes on and

00:19:50,430 --> 00:19:54,000
says they that their project is going to

00:19:52,530 --> 00:19:55,260
need this much bandwidth we want the

00:19:54,000 --> 00:19:57,840
marketplace to be able to accommodate

00:19:55,260 --> 00:20:00,450
for these needs we want to be we want to

00:19:57,840 --> 00:20:03,090
have the reporting system so the report

00:20:00,450 --> 00:20:04,830
shown in this demo is only a mock-up but

00:20:03,090 --> 00:20:07,470
we want to be able to actually create it

00:20:04,830 --> 00:20:09,210
and we need to account for different

00:20:07,470 --> 00:20:11,010
errors that might occur that might stop

00:20:09,210 --> 00:20:12,630
a contract flow being fulfilled such as

00:20:11,010 --> 00:20:15,660
say a power outage which prevents the

00:20:12,630 --> 00:20:18,610
hardware owner that prevents a consumer

00:20:15,660 --> 00:20:20,710
from connecting to the hardware

00:20:18,610 --> 00:20:23,260
and the long-term vision is to have this

00:20:20,710 --> 00:20:25,510
fully deployed on the MOC and the mg

00:20:23,260 --> 00:20:27,190
HPCC phlox was designed with

00:20:25,510 --> 00:20:29,500
universities and they're scaling needs

00:20:27,190 --> 00:20:31,330
for hardware so at different times the

00:20:29,500 --> 00:20:32,830
research group may or may not need a lot

00:20:31,330 --> 00:20:34,779
of hardware a lot of time and we want

00:20:32,830 --> 00:20:36,460
people to be able to make use of this

00:20:34,779 --> 00:20:38,799
hardware and not just have it sitting

00:20:36,460 --> 00:20:40,269
around collecting dust we also want the

00:20:38,799 --> 00:20:41,860
marketplace to support real financial

00:20:40,269 --> 00:20:43,809
transactions where people actually

00:20:41,860 --> 00:20:46,029
receive some kind of monetary

00:20:43,809 --> 00:20:47,559
compensation for putting up hardware and

00:20:46,029 --> 00:20:50,049
people can make bids they'll have to pay

00:20:47,559 --> 00:20:51,730
or to use such hardware we want to

00:20:50,049 --> 00:20:53,889
enable organizations to deploy an agent

00:20:51,730 --> 00:20:56,470
to monitor the marketplace and to act

00:20:53,889 --> 00:20:57,929
accordingly - if you say that how the

00:20:56,470 --> 00:21:01,179
marketplace is changing and how

00:20:57,929 --> 00:21:04,630
particularly hard ware is doing and we

00:21:01,179 --> 00:21:07,450
want to create a system for social

00:21:04,630 --> 00:21:09,580
welfare projects so say a nonprofit

00:21:07,450 --> 00:21:11,440
organization will be able to consume and

00:21:09,580 --> 00:21:13,520
make bids on to the marketplace at a

00:21:11,440 --> 00:21:16,309
reduced price

00:21:13,520 --> 00:21:18,410
so be a part of flux this is a link to

00:21:16,309 --> 00:21:20,600
the github it's an open-source project

00:21:18,410 --> 00:21:24,860
feel free to make a pull request to open

00:21:20,600 --> 00:21:27,980
an issue and get involved I'm gonna hand

00:21:24,860 --> 00:21:29,900
it over to min for the demo so this is a

00:21:27,980 --> 00:21:33,890
part where we see if everything actually

00:21:29,900 --> 00:21:38,570
works crash and burn that's right

00:21:33,890 --> 00:21:41,330
so live demo so we're starting horizon

00:21:38,570 --> 00:21:43,010
loggin so I'm gonna log in as a consumer

00:21:41,330 --> 00:21:45,440
who is hopefully named consumer

00:21:43,010 --> 00:21:46,490
apparently so I'm gonna follow the demo

00:21:45,440 --> 00:21:47,990
flow that we talked about the

00:21:46,490 --> 00:21:49,820
presentation but there's gonna be one or

00:21:47,990 --> 00:21:54,770
two extra sessoms I'll add just to

00:21:49,820 --> 00:21:56,630
illustrate additional points so this

00:21:54,770 --> 00:21:58,790
consumer logs in and he's an optimist

00:21:56,630 --> 00:22:01,250
and they they know that there's some

00:21:58,790 --> 00:22:03,170
that dis OpenStack instance has been

00:22:01,250 --> 00:22:04,670
milled notes available and what they're

00:22:03,170 --> 00:22:07,100
gonna try and do is they're going to try

00:22:04,670 --> 00:22:09,850
and provision no instance on top of one

00:22:07,100 --> 00:22:09,850
of those bare metal nodes

00:22:15,060 --> 00:22:19,080
this is also not quite productive

00:22:16,590 --> 00:22:22,050
hardware if you can't tell but it's all

00:22:19,080 --> 00:22:25,020
this all logged so we're gonna create an

00:22:22,050 --> 00:22:28,580
instance and the consumer is psychic so

00:22:25,020 --> 00:22:28,580
he's going to call it the instance fail

00:22:31,030 --> 00:22:33,690
so

00:22:34,170 --> 00:22:37,130
common sense

00:22:39,730 --> 00:22:46,250
volume set the image and the flavour to

00:22:44,390 --> 00:22:47,870
make it to have a provision on top of

00:22:46,250 --> 00:22:49,520
bare metal you had to select the bare

00:22:47,870 --> 00:22:51,560
metal flavor so we're going to do that

00:22:49,520 --> 00:22:53,890
select that and watch it and see what

00:22:51,560 --> 00:22:53,890
happens

00:22:54,380 --> 00:23:02,190
[Music]

00:22:59,670 --> 00:23:04,110
so the instance question scheduled and

00:23:02,190 --> 00:23:06,470
we wait a few seconds to see what

00:23:04,110 --> 00:23:06,470
happens

00:23:09,800 --> 00:23:13,940
so there's scheduling and they should

00:23:11,810 --> 00:23:15,620
failed nearly bright white and error is

00:23:13,940 --> 00:23:18,320
no value horse was found or not

00:23:15,620 --> 00:23:19,880
available there's a generic Nova error

00:23:18,320 --> 00:23:22,250
if it tries to schedule an instance

00:23:19,880 --> 00:23:24,440
Anderson they can't find a place to put

00:23:22,250 --> 00:23:26,720
it and the reason is because we're using

00:23:24,440 --> 00:23:27,350
clock X and though there are better

00:23:26,720 --> 00:23:28,790
mailed notes

00:23:27,350 --> 00:23:30,740
none of them have been made available to

00:23:28,790 --> 00:23:33,500
this user some of those issues are need

00:23:30,740 --> 00:23:35,240
to do they need to wait for an owner to

00:23:33,500 --> 00:23:38,420
offer up a node so I'm going to log out

00:23:35,240 --> 00:23:40,610
and log back into the owner and again

00:23:38,420 --> 00:23:44,450
like the owner and the consumer care are

00:23:40,610 --> 00:23:45,710
both using the same UI our goal is to

00:23:44,450 --> 00:23:47,810
eventually separate out the two you eyes

00:23:45,710 --> 00:23:49,250
because the owner is mainly interacting

00:23:47,810 --> 00:23:50,690
with the provider service and the

00:23:49,250 --> 00:23:52,910
consumer is interacting with the

00:23:50,690 --> 00:23:54,410
marketplace service so you see like kind

00:23:52,910 --> 00:23:57,550
of a mix of functionality that in

00:23:54,410 --> 00:23:57,550
reality would be separated out

00:23:57,590 --> 00:24:02,900
so here is the owner we'll go to the

00:24:00,320 --> 00:24:09,560
flock X tab

00:24:02,900 --> 00:24:11,960
[Music]

00:24:09,560 --> 00:24:14,540
here you see a whole bunch of nodes now

00:24:11,960 --> 00:24:16,460
this owner actually only owns one these

00:24:14,540 --> 00:24:18,290
nodes last one so normally they probably

00:24:16,460 --> 00:24:20,150
would not see all four these nodes but

00:24:18,290 --> 00:24:21,950
we've put it up here for the striction

00:24:20,150 --> 00:24:24,350
purposes what happens to this owner

00:24:21,950 --> 00:24:29,110
tries to offer let's say this top node

00:24:24,350 --> 00:24:29,110
that he don't own it's also for

00:24:29,430 --> 00:24:32,270
or create offer

00:24:32,539 --> 00:24:35,839
and you see a whole bunch of nothing

00:24:34,219 --> 00:24:38,929
happens what really happened behind the

00:24:35,839 --> 00:24:41,570
scenes is said the providers fearing

00:24:38,929 --> 00:24:43,219
that are saying that you that that's you

00:24:41,570 --> 00:24:45,169
try to offer up and no you don't home

00:24:43,219 --> 00:24:47,869
and just to prove that that happened I'm

00:24:45,169 --> 00:24:49,999
going to go into the base the Davis

00:24:47,869 --> 00:24:54,949
query and you can see that there's been

00:24:49,999 --> 00:24:58,449
no new offer created so now this owner

00:24:54,949 --> 00:24:58,449
is going to offer and know that they do

00:25:00,090 --> 00:25:07,099
go on in specify a fairly short period

00:25:04,139 --> 00:25:07,099
as opposed

00:25:07,400 --> 00:25:14,099
and then trade this offer

00:25:09,040 --> 00:25:14,099
[Music]

00:25:14,250 --> 00:25:18,630
and you can really see that just offer

00:25:16,590 --> 00:25:20,010
what's created because the UI is updated

00:25:18,630 --> 00:25:21,360
now there's no this mark that's

00:25:20,010 --> 00:25:24,390
available meaning that there's some

00:25:21,360 --> 00:25:26,130
buffer out for it so now that is that

00:25:24,390 --> 00:25:28,429
all free exist let's go back to the

00:25:26,130 --> 00:25:28,429
consumer

00:25:29,670 --> 00:25:32,829
[Music]

00:25:39,950 --> 00:25:44,440
[Music]

00:25:48,940 --> 00:25:57,140
so consumer will go to the flock extent

00:25:51,680 --> 00:25:57,140
[Music]

00:25:59,480 --> 00:26:02,750
and goes in the bid section and here you

00:26:01,519 --> 00:26:05,360
can see the wreckage that passed hopes

00:26:02,750 --> 00:26:08,840
and dreams all these expired bids but

00:26:05,360 --> 00:26:10,370
now they're gonna create a new bid let's

00:26:08,840 --> 00:26:13,360
just make sure it's for you small-time

00:26:10,370 --> 00:26:13,360
through the floor

00:26:13,560 --> 00:26:16,220
before

00:26:17,260 --> 00:26:25,510
so here's where the the consumer will be

00:26:21,460 --> 00:26:27,850
able to set like look what let's sort of

00:26:25,510 --> 00:26:31,510
know you're looking for so for example

00:26:27,850 --> 00:26:35,730
exactly 32 CPUs and let's say they want

00:26:31,510 --> 00:26:37,780
their local just to be over 9000 Wow

00:26:35,730 --> 00:26:40,630
so if we can create this fit and see

00:26:37,780 --> 00:26:42,250
what happens so it's visible create and

00:26:40,630 --> 00:26:44,440
it's available and behind the scenes

00:26:42,250 --> 00:26:46,870
there's I'm going to show you the log

00:26:44,440 --> 00:26:48,669
file for the Flex manager and you can

00:26:46,870 --> 00:26:51,700
see there's a period job a periodic job

00:26:48,669 --> 00:26:53,559
that matches the biz and offers so we're

00:26:51,700 --> 00:26:54,760
just going to do its I've said to run

00:26:53,559 --> 00:26:56,559
every 15 seconds so we're just gonna

00:26:54,760 --> 00:27:00,580
wait a little bit wait for it to run and

00:26:56,559 --> 00:27:02,860
see if it matched it match the bid so it

00:27:00,580 --> 00:27:04,660
just ran so let's go back to the

00:27:02,860 --> 00:27:07,350
dashboard see what happens

00:27:04,660 --> 00:27:07,350
reloads

00:27:13,860 --> 00:27:18,929
and the bid is so available that Musa

00:27:16,529 --> 00:27:21,149
hasn't matched it's so open for another

00:27:18,929 --> 00:27:22,830
to be match than or with another offer

00:27:21,149 --> 00:27:25,350
and that's because this user is

00:27:22,830 --> 00:27:26,509
specified over 9000 discs that doesn't

00:27:25,350 --> 00:27:31,530
exist

00:27:26,509 --> 00:27:34,880
don't be sad so now let's try again

00:27:31,530 --> 00:27:38,260
design the specified

00:27:34,880 --> 00:27:38,260
something more reasonable

00:27:42,790 --> 00:27:45,720
and create the bid

00:27:47,030 --> 00:27:52,280
and this vid has been created right up

00:27:49,730 --> 00:27:54,500
here so now we're going to go back and

00:27:52,280 --> 00:27:57,520
look at this log again wait for the

00:27:54,500 --> 00:27:57,520
master to run once more

00:27:59,670 --> 00:28:05,660
just ran and let's see what happens

00:28:02,570 --> 00:28:05,660
[Music]

00:28:08,170 --> 00:28:11,299
[Music]

00:28:13,060 --> 00:28:17,710
now we can see that this card is bid is

00:28:15,490 --> 00:28:21,190
multi busy meaning it's been matched and

00:28:17,710 --> 00:28:23,260
because it's a match there's a contract

00:28:21,190 --> 00:28:25,810
now that exists for it this contract

00:28:23,260 --> 00:28:29,140
which matches the which matches to start

00:28:25,810 --> 00:28:31,420
and end time of bid so what's going to

00:28:29,140 --> 00:28:33,460
happen now is the provider manager is

00:28:31,420 --> 00:28:34,960
going to try and grab this contract this

00:28:33,460 --> 00:28:37,870
contract and make a copy of it for

00:28:34,960 --> 00:28:39,610
itself and this is what happens here and

00:28:37,870 --> 00:28:42,070
you can see that it's already banned its

00:28:39,610 --> 00:28:44,170
create the contract and then there's

00:28:42,070 --> 00:28:46,390
another manager job that fulfills the

00:28:44,170 --> 00:28:47,650
contract in the start date is past and

00:28:46,390 --> 00:28:49,600
because I said the start date to the

00:28:47,650 --> 00:28:51,250
past it's already been fulfilled this

00:28:49,600 --> 00:28:53,650
contract has been filled meaning that

00:28:51,250 --> 00:28:55,750
the relevant nog nog now has that

00:28:53,650 --> 00:28:59,020
consumers project marked in this project

00:28:55,750 --> 00:29:02,050
by the field and we should be now be

00:28:59,020 --> 00:29:05,610
able to provision in that node so now

00:29:02,050 --> 00:29:05,610
this consumer is going to go back

00:29:10,730 --> 00:29:17,810
[Music]

00:29:13,710 --> 00:29:17,810
attempts to launch a successful instance

00:29:24,500 --> 00:29:27,589
[Music]

00:29:36,680 --> 00:29:41,870
so then this instance is launched and if

00:29:38,870 --> 00:29:43,220
all goes well you'll see that nobody

00:29:41,870 --> 00:29:44,300
scheduled it and it's going to start

00:29:43,220 --> 00:29:47,320
doing a whole bunch of number of things

00:29:44,300 --> 00:29:47,320
networking with stuff like that

00:29:47,820 --> 00:29:52,110
yep expelled scheduling and now it's

00:29:50,670 --> 00:29:55,740
networking meaning that it's been able

00:29:52,110 --> 00:29:59,010
to supervision on top of that mode so

00:29:55,740 --> 00:30:00,480
that concludes our demo if you guys have

00:29:59,010 --> 00:30:02,170
any questions we would be happy to

00:30:00,480 --> 00:30:06,940
answer them

00:30:02,170 --> 00:30:06,940
[Music]

00:30:09,490 --> 00:30:13,720
so I'm passing the mic for the first

00:30:12,070 --> 00:30:16,570
question but just as we could continue

00:30:13,720 --> 00:30:18,730
if anyone else has questions like like

00:30:16,570 --> 00:30:20,200
we did here raise your hand and try to

00:30:18,730 --> 00:30:23,440
move to the end of the aisle possible

00:30:20,200 --> 00:30:27,370
and I'll pass the mic to you so very

00:30:23,440 --> 00:30:28,630
cool any thought about doing the same

00:30:27,370 --> 00:30:32,620
type of thing in at openshift

00:30:28,630 --> 00:30:36,419
environment open shift versus open stack

00:30:32,620 --> 00:30:36,419
like it in Erised versus vm's

00:30:36,760 --> 00:30:41,260
so this this isn't really much bad guy

00:30:39,580 --> 00:30:43,600
I'll be sure that will be something that

00:30:41,260 --> 00:30:45,820
might run in top 11 seconds the this

00:30:43,600 --> 00:30:50,050
isn't covering that this is completely

00:30:45,820 --> 00:30:51,250
about about the about the elastic secure

00:30:50,050 --> 00:30:53,410
infrastructure about being able to

00:30:51,250 --> 00:30:56,110
manage your own in the structure being

00:30:53,410 --> 00:30:57,850
for owners to offer to resources up for

00:30:56,110 --> 00:31:00,550
others to use and for consumers to be

00:30:57,850 --> 00:31:03,540
able to grab them and be able to use

00:31:00,550 --> 00:31:03,540
them for whatever they want

00:31:06,980 --> 00:31:10,029
you better know

00:31:13,190 --> 00:31:15,879
it's been

00:31:15,940 --> 00:31:19,329
there is a proposal to extend the

00:31:17,589 --> 00:31:21,129
project so that it would actually also

00:31:19,329 --> 00:31:23,649
be able to allocate containers across

00:31:21,129 --> 00:31:25,449
multiple nodes yes in the same kind of

00:31:23,649 --> 00:31:28,109
way we would like to bear mental stuff

00:31:25,449 --> 00:31:28,109
to work first

00:31:36,310 --> 00:31:41,380
thank you is there a no they started

00:31:39,760 --> 00:31:43,900
planned to also this whole bidding and

00:31:41,380 --> 00:31:45,820
offering that I would like that to be

00:31:43,900 --> 00:31:47,740
completely automated like I don't want

00:31:45,820 --> 00:31:49,660
to sign in somewhere and see something I

00:31:47,740 --> 00:31:51,880
just want like some little program to

00:31:49,660 --> 00:31:54,700
take care of that I just want to switch

00:31:51,880 --> 00:31:57,940
like whenever there's space available or

00:31:54,700 --> 00:32:00,430
for it out or something again

00:31:57,940 --> 00:32:02,920
yeah this is part of what's meant by a

00:32:00,430 --> 00:32:05,920
more complex offering in bidding systems

00:32:02,920 --> 00:32:11,130
so and also the agents that come in into

00:32:05,920 --> 00:32:13,030
the marketplace so we want to allow the

00:32:11,130 --> 00:32:14,470
different office just be posted

00:32:13,030 --> 00:32:17,260
periodically and just exist on like a

00:32:14,470 --> 00:32:18,550
periodic interval if you want or end to

00:32:17,260 --> 00:32:19,900
be able to take bids on a periodic

00:32:18,550 --> 00:32:21,970
interval and you would be able to set up

00:32:19,900 --> 00:32:24,220
like an agent to just kind of automate

00:32:21,970 --> 00:32:25,960
that process for you so you don't have

00:32:24,220 --> 00:32:28,480
to manually go in every day and say I

00:32:25,960 --> 00:32:30,070
want this available at 3 p.m. like and

00:32:28,480 --> 00:32:31,360
then reset it up every day and check if

00:32:30,070 --> 00:32:33,610
it matched or not I'm going to take it

00:32:31,360 --> 00:32:35,080
down that a lot of these processes would

00:32:33,610 --> 00:32:37,090
be automated and the marketplace would

00:32:35,080 --> 00:32:39,510
be able to match and accommodate to

00:32:37,090 --> 00:32:39,510
these as well

00:32:41,620 --> 00:32:45,529
[Music]

00:32:44,120 --> 00:32:48,799
sorry if you couldn't tell I'm also

00:32:45,529 --> 00:32:50,270
involved in this project so we actually

00:32:48,799 --> 00:32:51,860
would like to get to even more

00:32:50,270 --> 00:32:55,010
sophisticated like full-on futures

00:32:51,860 --> 00:32:56,630
market kind of models but you know

00:32:55,010 --> 00:32:58,159
basically we were trying to do for this

00:32:56,630 --> 00:32:59,990
summer was get the groundwork laid and

00:32:58,159 --> 00:33:02,090
then we can start then will actually

00:32:59,990 --> 00:33:04,130
have something to build on and you know

00:33:02,090 --> 00:33:06,529
I think autonomous agents start to

00:33:04,130 --> 00:33:07,940
become more interesting and also looking

00:33:06,529 --> 00:33:10,610
at kind of general purpose schedulers

00:33:07,940 --> 00:33:12,890
you know that basically tolerate market

00:33:10,610 --> 00:33:15,919
fluctuations start getting interesting

00:33:12,890 --> 00:33:18,799
especially if you go to alleys other

00:33:15,919 --> 00:33:20,990
talk tomorrow which is about server

00:33:18,799 --> 00:33:23,679
lists and trying to do similar things

00:33:20,990 --> 00:33:23,679
with functions

00:33:43,600 --> 00:33:47,020
[Music]

00:33:47,090 --> 00:33:57,240
so I I know that the metal to Tennant

00:33:53,280 --> 00:34:01,320
piece of this is I think partially

00:33:57,240 --> 00:34:03,900
implemented can you describe the state

00:34:01,320 --> 00:34:08,159
of that in general so in the latest

00:34:03,900 --> 00:34:10,679
cycle they added an owner ID fields I'm

00:34:08,159 --> 00:34:12,810
sorry they added the owner ID field from

00:34:10,679 --> 00:34:15,120
the Padre gun rowdy field they didn't

00:34:12,810 --> 00:34:16,620
hook it up to anything GATS so there's

00:34:15,120 --> 00:34:18,450
interests but maybe not a ton of

00:34:16,620 --> 00:34:19,679
interest so this may be something that

00:34:18,450 --> 00:34:21,060
we also have to try and provide

00:34:19,679 --> 00:34:23,310
ourselves with an ironic together

00:34:21,060 --> 00:34:24,750
officially supported but I would like to

00:34:23,310 --> 00:34:26,940
point out that like once they do that

00:34:24,750 --> 00:34:28,679
you know the back end code that needs to

00:34:26,940 --> 00:34:30,450
change there's not that much this is

00:34:28,679 --> 00:34:31,860
saying instead of saying one property a

00:34:30,450 --> 00:34:34,590
rock will be saying a different popular

00:34:31,860 --> 00:34:36,690
mattock and things will just continue to

00:34:34,590 --> 00:34:38,399
move along smoothly so about routines

00:34:36,690 --> 00:34:41,780
they decide to do it's very easy for us

00:34:38,399 --> 00:34:41,780
to adapt to that change on our side

00:34:44,030 --> 00:34:52,429
so quick follow-up on that right now

00:34:47,560 --> 00:34:54,470
when I if I bid for a bear for a machine

00:34:52,429 --> 00:34:57,380
or a group of machines like this and I

00:34:54,470 --> 00:35:00,230
get them what's actually going on behind

00:34:57,380 --> 00:35:03,080
the scenes when you in order for me to

00:35:00,230 --> 00:35:04,670
for me the user to have the machines and

00:35:03,080 --> 00:35:05,960
be able to use them for something what's

00:35:04,670 --> 00:35:07,400
happening in the background

00:35:05,960 --> 00:35:10,190
so what's happening in the background is

00:35:07,400 --> 00:35:12,560
that there's a there's a property being

00:35:10,190 --> 00:35:14,150
set and up in the properties dictionary

00:35:12,560 --> 00:35:17,330
from wrong note that matches that

00:35:14,150 --> 00:35:19,340
bidders that bidders that bidders

00:35:17,330 --> 00:35:20,869
project I'm sure you mean once I can

00:35:19,340 --> 00:35:24,080
track a contract is fulfilled not when

00:35:20,869 --> 00:35:26,540
the bid is created and so wind up we're

00:35:24,080 --> 00:35:30,770
not privy is set we also have a nova

00:35:26,540 --> 00:35:33,170
filter and that never filter when the

00:35:30,770 --> 00:35:35,180
user tries to provision and top of these

00:35:33,170 --> 00:35:38,000
bare metal nodes there's no filter will

00:35:35,180 --> 00:35:42,010
filter out any node that whose projects

00:35:38,000 --> 00:35:42,010
ID doesn't match that user's project

00:35:44,920 --> 00:35:49,779
I'm monopolizing my concern and the Nova

00:35:47,710 --> 00:35:52,660
at that point proceeds to reboot the

00:35:49,779 --> 00:35:59,020
machine and I'm gonna give it to the

00:35:52,660 --> 00:36:00,150
user Nova at that point recedes to

00:35:59,020 --> 00:36:03,039
[Music]

00:36:00,150 --> 00:36:04,630
reboot the Machine by ironic in order to

00:36:03,039 --> 00:36:07,420
hand it off to the user and provision it

00:36:04,630 --> 00:36:09,990
with whatever actually Noah's stuff will

00:36:07,420 --> 00:36:09,990
do a provisioning

00:36:15,880 --> 00:36:19,330
great project thank you for doing all of

00:36:17,890 --> 00:36:22,240
this appreciate it

00:36:19,330 --> 00:36:25,480
my question really is if somebody has a

00:36:22,240 --> 00:36:27,820
cluster of nodes can they use the flocs

00:36:25,480 --> 00:36:31,060
software to manage them and have an

00:36:27,820 --> 00:36:33,190
internal bit and ask and provisioning

00:36:31,060 --> 00:36:37,060
set up like we just can we just take the

00:36:33,190 --> 00:36:40,150
software layer of this and use it so

00:36:37,060 --> 00:36:43,150
yeah if so you have a you have a cluster

00:36:40,150 --> 00:36:44,350
knows presumably in OpenStack understood

00:36:43,150 --> 00:36:46,990
by tronic you're asking if you use the

00:36:44,350 --> 00:36:49,960
software we just have a imagine 32 nodes

00:36:46,990 --> 00:36:52,450
powered up that's all so and so you're

00:36:49,960 --> 00:36:54,010
asking if you could do all this but not

00:36:52,450 --> 00:36:55,930
necessarily have like a cost components

00:36:54,010 --> 00:36:58,740
or anything like that yeah there's no

00:36:55,930 --> 00:36:58,740
reason why you can't

00:37:06,020 --> 00:37:09,560
yes a just without that click the cost

00:37:07,790 --> 00:37:11,990
component part you've somewhat wanted

00:37:09,560 --> 00:37:14,780
for the the audit factor but it doesn't

00:37:11,990 --> 00:37:16,040
actually have to equal money right the

00:37:14,780 --> 00:37:17,660
other thing I wanted to comment on which

00:37:16,040 --> 00:37:21,350
I don't know if you guys can open the

00:37:17,660 --> 00:37:23,600
github repo for the documentation you

00:37:21,350 --> 00:37:25,130
know both of the guys over here on the

00:37:23,600 --> 00:37:27,350
ends who talked about kind of potential

00:37:25,130 --> 00:37:30,140
enhancements if you go file issues

00:37:27,350 --> 00:37:31,820
against the project kind of talking

00:37:30,140 --> 00:37:34,070
about where you'd want to see it go

00:37:31,820 --> 00:37:35,660
those would be really useful in helping

00:37:34,070 --> 00:37:37,970
us to prioritize then we can also get

00:37:35,660 --> 00:37:39,650
outside feedback because right now right

00:37:37,970 --> 00:37:41,690
it's just a bunch of us thinking about

00:37:39,650 --> 00:37:44,360
the problem ourselves the primary driver

00:37:41,690 --> 00:37:47,990
here is around trying to do kind of

00:37:44,360 --> 00:37:50,060
academic sharing of hardware but there's

00:37:47,990 --> 00:37:52,010
a lot more here I actually think like

00:37:50,060 --> 00:37:53,810
Russians case is very interesting where

00:37:52,010 --> 00:37:55,700
you have a bunch of Yahoo's who you know

00:37:53,810 --> 00:37:57,440
I got 6 servers in my basement and I

00:37:55,700 --> 00:37:59,030
want to kind of allocate them make 5

00:37:57,440 --> 00:38:00,320
bucks here in there and be able to

00:37:59,030 --> 00:38:01,940
allocate them to this study project

00:38:00,320 --> 00:38:03,859
right

00:38:01,940 --> 00:38:08,380
so let's want to make that comment

00:38:03,859 --> 00:38:08,380
that's the project please do file issues

00:38:12,570 --> 00:38:15,380
all right

00:38:27,530 --> 00:38:29,590

YouTube URL: https://www.youtube.com/watch?v=goDpCRLhCao


