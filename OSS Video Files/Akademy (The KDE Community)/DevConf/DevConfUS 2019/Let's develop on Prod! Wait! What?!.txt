Title: Let's develop on Prod! Wait! What?!
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speaker: Aslak Knutsen

Do you have confidence that your Test and Stage environments reflect reality? Are they easy to keep up-to-date with production? Can you reproduce production failure in these environments or locally, or seeing failures in Stage not seen in Prod?

It's always been hard to test new functionality before it reaches production. Can you spin up the entire solution on your laptop to debug and test a suspicious piece of code?

Testing on production is no longer a meme. It's reality and a necessity.

Join this session to learn how to safely develop and test your services in a real production environment leveraging Istio on Kubernetes or Openshift. Leave with tools and techniques you can apply right away and with confidence!
Captions: 
	00:00:03,800 --> 00:00:09,240
I'm gonna talk about developing

00:00:06,510 --> 00:00:12,139
intelligent ducks which is always a big

00:00:09,240 --> 00:00:15,029
no-no for everyone

00:00:12,139 --> 00:00:17,279
primarily I believe it's because you

00:00:15,029 --> 00:00:22,350
will eventually affect the users that

00:00:17,279 --> 00:00:25,560
are there it's start off with a quote

00:00:22,350 --> 00:00:27,630
that I need to add to all of my

00:00:25,560 --> 00:00:29,690
talks essentially that if buggying is

00:00:27,630 --> 00:00:32,009
the process of removing it and

00:00:29,690 --> 00:00:34,700
programming is the process of adding

00:00:32,009 --> 00:00:34,700
bugs to

00:00:35,360 --> 00:00:39,560
but this is a story that starts with a

00:00:37,670 --> 00:00:47,420
project call up which at i/o if anyone

00:00:39,560 --> 00:00:50,360
knows about that before some I know know

00:00:47,420 --> 00:00:53,560
it more than others but it's essentially

00:00:50,360 --> 00:00:57,650
a project that set out to create a

00:00:53,560 --> 00:01:00,220
developer SAS in the sense that it was

00:00:57,650 --> 00:01:02,870
supposed to automate all the the

00:01:00,220 --> 00:01:05,540
processes around a project so

00:01:02,870 --> 00:01:08,690
automatically set up build pipelines

00:01:05,540 --> 00:01:10,670
hate the project for you so a simple UI

00:01:08,690 --> 00:01:12,890
working in a sense just say hey I want

00:01:10,670 --> 00:01:15,830
to make a go service that connects to

00:01:12,890 --> 00:01:19,460
this type of services and now you have a

00:01:15,830 --> 00:01:23,470
repository that repository automatically

00:01:19,460 --> 00:01:26,970
deploys to to a certain

00:01:23,470 --> 00:01:29,820
after and so on for you

00:01:26,970 --> 00:01:33,759
and in that process of building that it

00:01:29,820 --> 00:01:36,549
started out as a greenfield project

00:01:33,759 --> 00:01:39,539
in the beginning and coming out from a

00:01:36,549 --> 00:01:39,539
larger developers from

00:01:41,580 --> 00:01:51,800
from tooling from libraries and not

00:01:45,840 --> 00:01:54,240
necessarily experience how developers

00:01:51,800 --> 00:01:55,800
but the beginning is always nice in the

00:01:54,240 --> 00:01:59,810
project you can always start off with

00:01:55,800 --> 00:02:04,310
with just a service or a application

00:01:59,810 --> 00:02:06,420
that you run on your local machine and

00:02:04,310 --> 00:02:08,700
the world is kind of nice

00:02:06,420 --> 00:02:10,560
you can start you can debug it you can

00:02:08,700 --> 00:02:14,100
do whatever you want and as it starts to

00:02:10,560 --> 00:02:16,440
grow out a bit anymore

00:02:14,100 --> 00:02:19,860
you start to get into the containers and

00:02:16,440 --> 00:02:21,660
so on this was a platform or a software

00:02:19,860 --> 00:02:23,700
services that was going to run on couple

00:02:21,660 --> 00:02:25,450
of open ship so eventually would have

00:02:23,700 --> 00:02:30,390
them to

00:02:25,450 --> 00:02:33,099
to be some formal containers and still

00:02:30,390 --> 00:02:35,050
in the early days there was just a

00:02:33,099 --> 00:02:38,349
couple of containers there was a few

00:02:35,050 --> 00:02:39,880
services ace enough to run to something

00:02:38,349 --> 00:02:44,459
like

00:02:39,880 --> 00:02:50,340
I mean you shift or or some form of

00:02:44,459 --> 00:02:53,510
Oklahoma City instance you can run that

00:02:50,340 --> 00:02:53,510
you can run on your own machine

00:02:53,819 --> 00:03:00,790
and then you start to run into the kind

00:02:56,469 --> 00:03:02,590
of distributed computing fun things that

00:03:00,790 --> 00:03:05,340
you don't have to deal with when you

00:03:02,590 --> 00:03:08,079
have it on the lift or one service that

00:03:05,340 --> 00:03:10,810
the network isn't reliable and there is

00:03:08,079 --> 00:03:13,629
even see in the bandwidth its internet

00:03:10,810 --> 00:03:16,200
and so on and you started so the

00:03:13,629 --> 00:03:19,770
developer experience

00:03:16,200 --> 00:03:20,520
out the window because when it runs in

00:03:19,770 --> 00:03:23,099
openshift

00:03:20,520 --> 00:03:25,709
or in the container platform it's not as

00:03:23,099 --> 00:03:29,910
easy as it used to be there used to be

00:03:25,709 --> 00:03:32,010
that bombing process that you can deal

00:03:29,910 --> 00:03:34,740
with and if you run that database on the

00:03:32,010 --> 00:03:37,740
side and you were kind of fine

00:03:34,740 --> 00:03:39,570
so as developers we wanted to get this

00:03:37,740 --> 00:03:42,600
feedback essentially we had problems

00:03:39,570 --> 00:03:46,380
with getting this to Romney in a proper

00:03:42,600 --> 00:03:51,420
way so we were still on the lowepro

00:03:46,380 --> 00:03:53,460
cloud that he ran on your own machine so

00:03:51,420 --> 00:03:55,530
each developer had their own how the

00:03:53,460 --> 00:03:58,980
instance is essentially trying to run

00:03:55,530 --> 00:04:01,290
this whole app and it's almost we're

00:03:58,980 --> 00:04:03,570
looking at then to kind of take back

00:04:01,290 --> 00:04:05,720
some of the control we lost we're going

00:04:03,570 --> 00:04:05,720
to

00:04:05,740 --> 00:04:11,110
to the Athenian time I was things like

00:04:08,830 --> 00:04:15,030
squash should be able to debug these

00:04:11,110 --> 00:04:21,250
services as they running in the cluster

00:04:15,030 --> 00:04:24,610
which has nice tidy integration and you

00:04:21,250 --> 00:04:28,260
can essentially just select the process

00:04:24,610 --> 00:04:32,970
that or the the part that you want to

00:04:28,260 --> 00:04:37,660
debug and connect and set it up for you

00:04:32,970 --> 00:04:40,060
another was impressions what that does

00:04:37,660 --> 00:04:43,390
is essentially you tell it which

00:04:40,060 --> 00:04:48,250
deployment t1 and do you want to develop

00:04:43,390 --> 00:04:51,810
um hopefully which is out outside of the

00:04:48,250 --> 00:04:55,660
custard then it changes the deployment

00:04:51,810 --> 00:04:57,880
in the cluster install sip proxy instead

00:04:55,660 --> 00:05:01,320
and then reroute the traffic to your

00:04:57,880 --> 00:05:01,320
local machine and then

00:05:01,749 --> 00:05:07,869
I'm your local machine how back into the

00:05:03,610 --> 00:05:10,119
cluster so it becomes similar to a stick

00:05:07,869 --> 00:05:12,039
the local service was in the custard

00:05:10,119 --> 00:05:16,769
there are certain small differences but

00:05:12,039 --> 00:05:16,769
you're kind of getting somewhere closer

00:05:17,440 --> 00:05:23,240
some other tools around the same

00:05:20,919 --> 00:05:25,250
essentially squash for debugging and

00:05:23,240 --> 00:05:27,560
telepresence for kind of the local

00:05:25,250 --> 00:05:30,139
experience but still having a local

00:05:27,560 --> 00:05:32,620
clusters we have the local experience

00:05:30,139 --> 00:05:32,620
outside of

00:05:36,470 --> 00:05:42,950
and then the project grows or grew

00:05:40,160 --> 00:05:45,380
rather and became more and more services

00:05:42,950 --> 00:05:49,150
and more and more different pipelines

00:05:45,380 --> 00:05:51,380
that we're going into to the different

00:05:49,150 --> 00:05:55,250
different environments and it started to

00:05:51,380 --> 00:06:01,340
become impossible to run that up on your

00:05:55,250 --> 00:06:04,460
own machine essentially burn up when you

00:06:01,340 --> 00:06:06,440
have 30 40 50 different services that

00:06:04,460 --> 00:06:08,240
are all going to run and they're all

00:06:06,440 --> 00:06:10,400
going to have some special set up

00:06:08,240 --> 00:06:12,620
somewhere whether it's open system

00:06:10,400 --> 00:06:15,680
leadership or whatever and you end up

00:06:12,620 --> 00:06:18,920
with a complete mess essentially so to

00:06:15,680 --> 00:06:21,130
fix that you move to it to a developer

00:06:18,920 --> 00:06:24,900
cloud which is a

00:06:21,130 --> 00:06:24,900
outside of your your-your-your

00:06:28,759 --> 00:06:35,680
and then you place an ad

00:06:32,170 --> 00:06:38,890
testing clouds and a station cloud and

00:06:35,680 --> 00:06:40,960
we all probably been in project that has

00:06:38,890 --> 00:06:42,880
stage and test environments and so on

00:06:40,960 --> 00:06:47,170
and the theory is that they all look the

00:06:42,880 --> 00:06:49,840
same but didn't ever actually do so the

00:06:47,170 --> 00:06:51,970
chances that something gets deployed to

00:06:49,840 --> 00:06:56,890
the test environment works when it comes

00:06:51,970 --> 00:06:59,050
to duction miss Harrison or you you're

00:06:56,890 --> 00:07:01,890
seeing different errors in staging

00:06:59,050 --> 00:07:06,360
either because infrastructure

00:07:01,890 --> 00:07:09,000
infrastructure different or because the

00:07:06,360 --> 00:07:12,960
version of something is different or you

00:07:09,000 --> 00:07:14,580
have 50 different streams of services

00:07:12,960 --> 00:07:16,680
that are at different stages in a

00:07:14,580 --> 00:07:18,780
government cycle continuously being

00:07:16,680 --> 00:07:20,250
deployed so which version you're

00:07:18,780 --> 00:07:21,710
actually targeting in a different

00:07:20,250 --> 00:07:25,380
environment it's also it's kind of

00:07:21,710 --> 00:07:26,700
magical slated in development it doesn't

00:07:25,380 --> 00:07:29,400
mean that it's necessary to the same

00:07:26,700 --> 00:07:31,260
person even hidden stations so that

00:07:29,400 --> 00:07:34,740
doesn't really help you get a lot of

00:07:31,260 --> 00:07:37,080
moving pieces and you start to block

00:07:34,740 --> 00:07:39,120
each other because you have to wait with

00:07:37,080 --> 00:07:41,080
that first before the other service can

00:07:39,120 --> 00:07:43,750
go through though

00:07:41,080 --> 00:07:45,729
all the weighted problem before she can

00:07:43,750 --> 00:07:48,280
try to deal with contracts and so on but

00:07:45,729 --> 00:07:54,509
that's also going to be not always

00:07:48,280 --> 00:07:54,509
working still you don't have any

00:07:54,960 --> 00:07:58,190
open experience anymore

00:08:02,460 --> 00:08:07,020
challenged them to keep them in sync

00:08:04,570 --> 00:08:07,020
come in

00:08:07,280 --> 00:08:11,250
one thing is that you have the same

00:08:09,509 --> 00:08:13,650
version of the services but then you're

00:08:11,250 --> 00:08:17,169
missing the data as well and trying to

00:08:13,650 --> 00:08:19,520
keep data alive

00:08:17,169 --> 00:08:24,410
how many different environments it's

00:08:19,520 --> 00:08:26,389
even more automatic so you potentially

00:08:24,410 --> 00:08:28,850
hit something in Prague because they

00:08:26,389 --> 00:08:31,970
version ever service service returns a

00:08:28,850 --> 00:08:33,409
name with a dash in it for some reason

00:08:31,970 --> 00:08:36,680
because it's all beta that you've never

00:08:33,409 --> 00:08:37,820
seen before in the station example all

00:08:36,680 --> 00:08:40,610
these kind of small

00:08:37,820 --> 00:08:42,560
weird things happen and of course it's

00:08:40,610 --> 00:08:46,670
extra cost as well so if you're gonna

00:08:42,560 --> 00:08:48,350
run for different jobs then you're

00:08:46,670 --> 00:08:50,839
probably gonna take some shortcuts so

00:08:48,350 --> 00:08:53,000
the development cloud isn't actually a

00:08:50,839 --> 00:08:54,470
cloud cloud that's running on some

00:08:53,000 --> 00:08:57,470
bare-bones that's as insulation

00:08:54,470 --> 00:09:01,130
differences and when the stage thing has

00:08:57,470 --> 00:09:04,580
the same oscillate so whatever I'm sorry

00:09:01,130 --> 00:09:06,990
this there's no no can fix that for a

00:09:04,580 --> 00:09:10,070
week or so so you can start

00:09:06,990 --> 00:09:12,510
and this yeah

00:09:10,070 --> 00:09:14,430
uncertainty be the reason why you have

00:09:12,510 --> 00:09:17,399
all of these different environments is

00:09:14,430 --> 00:09:21,120
essentially to ensure that when you go

00:09:17,399 --> 00:09:25,860
to fraud you have gone through all the

00:09:21,120 --> 00:09:27,500
different or you ensure that it runs but

00:09:25,860 --> 00:09:29,940
if all the different environments are

00:09:27,500 --> 00:09:31,290
different then what does it matter but

00:09:29,940 --> 00:09:34,200
it actually it's fun because you're

00:09:31,290 --> 00:09:37,290
still wondering will it work when your

00:09:34,200 --> 00:09:39,510
ex again that's there so you're not

00:09:37,290 --> 00:09:41,070
anymore sure you just know that you

00:09:39,510 --> 00:09:43,700
fixed a bunch of other issues along the

00:09:41,070 --> 00:09:46,740
way that may or may not actually

00:09:43,700 --> 00:09:49,380
influence and Prada has different

00:09:46,740 --> 00:09:51,529
interests again so that's about who

00:09:49,380 --> 00:09:51,529
knows

00:09:51,980 --> 00:10:00,200
so at this point was when I left the bio

00:09:56,860 --> 00:10:02,150
project and started to realize the kind

00:10:00,200 --> 00:10:04,490
of there's a few more fundamental things

00:10:02,150 --> 00:10:08,780
in the kind of file development model

00:10:04,490 --> 00:10:11,840
that needs to be fixed before personally

00:10:08,780 --> 00:10:13,640
where all the pipelines are automated

00:10:11,840 --> 00:10:15,200
it's nice but there's a whole lot of

00:10:13,640 --> 00:10:20,720
development to being essentially that

00:10:15,200 --> 00:10:23,540
needs to go in before that so we started

00:10:20,720 --> 00:10:26,780
to make it an easy way to validate the

00:10:23,540 --> 00:10:30,010
changes that you're doing are not

00:10:26,780 --> 00:10:32,480
interfering with other services and

00:10:30,010 --> 00:10:34,310
users as I was pointed to earlier the

00:10:32,480 --> 00:10:35,780
main reason why you don't develop the

00:10:34,310 --> 00:10:37,850
pod is because you're gonna affect

00:10:35,780 --> 00:10:39,830
someone but if you could develop in

00:10:37,850 --> 00:10:42,540
production without affecting someone

00:10:39,830 --> 00:10:44,040
then it doesn't really matter

00:10:42,540 --> 00:10:47,449
we want to interact with the other

00:10:44,040 --> 00:10:50,310
services as opposed to interact with

00:10:47,449 --> 00:10:52,769
another version of a service or an

00:10:50,310 --> 00:10:56,490
another version of a service with a

00:10:52,769 --> 00:10:59,240
different dataset so actually touch the

00:10:56,490 --> 00:11:02,370
real thing as opposed to something that

00:10:59,240 --> 00:11:05,430
seems to be the real thing and then also

00:11:02,370 --> 00:11:08,220
have the ability to develop this as if

00:11:05,430 --> 00:11:09,750
you were developing a local service in

00:11:08,220 --> 00:11:11,970
the way you're doing your favorite tools

00:11:09,750 --> 00:11:15,580
and so without having to go in a Sara

00:11:11,970 --> 00:11:18,730
Lee to a cloud ID or similar

00:11:15,580 --> 00:11:20,560
so based on that and we started out with

00:11:18,730 --> 00:11:25,440
something we needed to run on top of

00:11:20,560 --> 00:11:25,440
opportunities we started looking at it

00:11:25,780 --> 00:11:32,350
and looked at telepresence

00:11:29,230 --> 00:11:36,630
and then on top of that I still I'm sure

00:11:32,350 --> 00:11:36,630
most of you know what a CEO is

00:11:36,910 --> 00:11:42,399
right everyone most people I'm not gonna

00:11:40,360 --> 00:11:45,220
go too deep into it but this is

00:11:42,399 --> 00:11:48,550
essentially online I got top-level view

00:11:45,220 --> 00:11:51,569
what it does it injects proxies into all

00:11:48,550 --> 00:11:54,569
the servers that the drums next

00:11:51,569 --> 00:11:54,569
interceptors

00:11:54,980 --> 00:12:01,160
all of the services and then the

00:11:57,530 --> 00:12:04,540
injections programmatic control over how

00:12:01,160 --> 00:12:07,270
the data flows how its how did

00:12:04,540 --> 00:12:13,010
authentication so on so you can control

00:12:07,270 --> 00:12:14,930
without touching the service and we're

00:12:13,010 --> 00:12:20,110
then wondering how can actually use this

00:12:14,930 --> 00:12:20,110
to to our advantage systems

00:12:21,480 --> 00:12:29,390
so it injects security control and

00:12:24,780 --> 00:12:29,390
injects Patrick's

00:12:30,470 --> 00:12:35,800
failure recovery but then on the

00:12:32,450 --> 00:12:41,740
interesting parts like stopping traffic

00:12:35,800 --> 00:12:45,070
mirroring and traffic splitting and also

00:12:41,740 --> 00:12:48,910
traffic routing

00:12:45,070 --> 00:12:51,550
that's more information from there so I

00:12:48,910 --> 00:12:54,190
kiss the project third prototype release

00:12:51,550 --> 00:12:59,080
all of that ID that's that's gonna try

00:12:54,190 --> 00:13:02,820
to choose analytics this thing suicide

00:12:59,080 --> 00:13:05,190
Pike is on one side it's a Canary's

00:13:02,820 --> 00:13:08,790
operator that

00:13:05,190 --> 00:13:12,270
coordinates the configuration of the

00:13:08,790 --> 00:13:14,850
cluster for you and there's a

00:13:12,270 --> 00:13:18,780
command-line tool that initiates

00:13:14,850 --> 00:13:23,480
essentially what you want the

00:13:18,780 --> 00:13:23,480
coordinator so the operator should do

00:13:24,350 --> 00:13:28,570
so let's have a look for that section

00:13:34,250 --> 00:13:41,840
so we have an application here today

00:13:36,800 --> 00:13:45,520
this is the prod you it's not a very

00:13:41,840 --> 00:13:45,520
tense application but it's essentially

00:13:45,610 --> 00:13:54,250
hold SEC so we have one service that

00:13:49,370 --> 00:13:54,250
calls to other services they call each

00:13:54,300 --> 00:14:01,580
each one on their own so I told Logan

00:13:58,100 --> 00:14:01,580
type services

00:14:03,420 --> 00:14:07,140
if we now initiate hike just to get

00:14:06,330 --> 00:14:08,620
salad

00:14:07,140 --> 00:14:12,510
[Music]

00:14:08,620 --> 00:14:12,510
this is the cream landline

00:14:18,830 --> 00:14:23,269
it's essentially saying that if we want

00:14:20,779 --> 00:14:25,640
to do a development thing this service

00:14:23,269 --> 00:14:29,420
doesn't require a local build this is

00:14:25,640 --> 00:14:32,529
just a ruby service we wanted to target

00:14:29,420 --> 00:14:35,450
this service that's deployed this code

00:14:32,529 --> 00:14:37,970
rating subversion one port mapping and

00:14:35,450 --> 00:14:40,279
we wanted to route based on this header

00:14:37,970 --> 00:14:45,190
and we want to watch this file and we

00:14:40,279 --> 00:14:45,190
call this sexy for feature X

00:14:45,890 --> 00:14:51,590
the service that we are taking over with

00:14:49,280 --> 00:14:56,540
it's fairly simple in this case is just

00:14:51,590 --> 00:15:00,010
returning some Jason but if this is the

00:14:56,540 --> 00:15:03,400
production what happened now I said I

00:15:00,010 --> 00:15:03,400
set up a

00:15:05,700 --> 00:15:11,960
in session for us so we asked it

00:15:07,380 --> 00:15:11,960
essentially to say find that one

00:15:12,480 --> 00:15:19,740
rating service then it reports perfected

00:15:15,780 --> 00:15:21,830
okay I've changed I've created Hagee so

00:15:19,740 --> 00:15:24,500
another deployment

00:15:21,830 --> 00:15:27,930
modified a virtual service and its

00:15:24,500 --> 00:15:30,470
destination rule

00:15:27,930 --> 00:15:30,470
what

00:15:32,020 --> 00:15:39,760
and it's also set up as now a special

00:15:34,959 --> 00:15:43,600
route or a special the URL for us so

00:15:39,760 --> 00:15:47,670
when we hit the teacher X automatically

00:15:43,600 --> 00:15:51,090
add the headers to the calls it goes

00:15:47,670 --> 00:15:54,300
sooo the whole stack which allows us to

00:15:51,090 --> 00:16:00,210
route just one specific part of it over

00:15:54,300 --> 00:16:02,960
to Nu - to our new service so that's now

00:16:00,210 --> 00:16:04,890
the service that we we have taken over

00:16:02,960 --> 00:16:08,820
the one that's now called

00:16:04,890 --> 00:16:10,920
that come to you instead of the

00:16:08,820 --> 00:16:13,170
locations but it's still definite the

00:16:10,920 --> 00:16:15,210
production version of qualification

00:16:13,170 --> 00:16:17,480
reviews and the others that are being

00:16:15,210 --> 00:16:17,480
called

00:16:18,600 --> 00:16:22,320
if you can see here we can now see that

00:16:20,400 --> 00:16:25,200
we have the local control over that

00:16:22,320 --> 00:16:28,230
service that service 1 so we can change

00:16:25,200 --> 00:16:30,630
its some different color just for some

00:16:28,230 --> 00:16:32,610
effects

00:16:30,630 --> 00:16:35,040
and that's silikal control now it's

00:16:32,610 --> 00:16:37,170
still running is so the whole production

00:16:35,040 --> 00:16:40,259
environment that still improv this only

00:16:37,170 --> 00:16:43,940
one certain sub subsection of it that is

00:16:40,259 --> 00:16:43,940
being taken over

00:16:46,920 --> 00:16:53,600
and also have the ability to kind of

00:16:48,480 --> 00:16:56,940
join that session so multiple developers

00:16:53,600 --> 00:16:59,780
can join in and have the same route

00:16:56,940 --> 00:17:02,760
essentially and take over a different

00:16:59,780 --> 00:17:09,260
set of services the only thing that

00:17:02,760 --> 00:17:11,730
happens is that it's it's not the

00:17:09,260 --> 00:17:14,950
the you of it

00:17:11,730 --> 00:17:18,300
so you have two subparts

00:17:14,950 --> 00:17:18,300
of the rating service

00:17:18,790 --> 00:17:24,640
one that's the plug which is TV one and

00:17:21,490 --> 00:17:27,299
then the new one there is 50 tracks just

00:17:24,640 --> 00:17:27,299
in 20

00:17:33,030 --> 00:17:35,930
it's a fun little

00:18:02,789 --> 00:18:07,440
you can see back on the problems you of

00:18:06,029 --> 00:18:11,449
course that there's nothing that has

00:18:07,440 --> 00:18:14,309
changed here that still works as it was

00:18:11,449 --> 00:18:16,199
there we go now we have two services

00:18:14,309 --> 00:18:20,399
that are up and running in the same kind

00:18:16,199 --> 00:18:24,949
of how did wait so developer one and two

00:18:20,399 --> 00:18:28,589
can you can join in on whatever changed

00:18:24,949 --> 00:18:32,749
whatever to change that they need um and

00:18:28,589 --> 00:18:32,749
then of course you can start up

00:18:36,840 --> 00:18:43,280
a second session as well that we create

00:18:39,120 --> 00:18:46,710
another full route but then runs a

00:18:43,280 --> 00:18:51,050
second version of one specific service

00:18:46,710 --> 00:18:51,050
now there's two developer versions of

00:18:52,890 --> 00:18:57,090
that service that is running in problem

00:18:55,410 --> 00:18:59,450
but they're not seeing each other and

00:18:57,090 --> 00:19:03,380
probably still not seeing any of them

00:18:59,450 --> 00:19:03,380
which gives you a copy

00:19:12,270 --> 00:19:18,710
there now you have two different

00:19:15,150 --> 00:19:18,710
versions of one of them

00:19:23,300 --> 00:19:29,110
any questions so far by the way

00:19:26,360 --> 00:19:32,409
anyone

00:19:29,110 --> 00:19:35,489
everyone in 10g generally how this time

00:19:32,409 --> 00:19:35,489
can be used it works and

00:19:38,720 --> 00:19:41,920
and of course when you

00:19:42,820 --> 00:19:49,280
the operator visitor doesn't remove the

00:19:45,500 --> 00:19:50,690
the actual external routes but we can

00:19:49,280 --> 00:19:54,290
see when we shut down the local

00:19:50,690 --> 00:19:58,180
development area that is it returns to

00:19:54,290 --> 00:19:58,180
the normal version Cineworld

00:20:05,820 --> 00:20:08,450
so

00:20:09,550 --> 00:20:14,290
so that's just kind of the beginning of

00:20:11,530 --> 00:20:21,429
what we're starting to look at some of

00:20:14,290 --> 00:20:23,980
the next steps making this not just a 92

00:20:21,429 --> 00:20:25,390
but an option to integrate identity as

00:20:23,980 --> 00:20:30,390
co-director person that kind of thing as

00:20:25,390 --> 00:20:30,390
well more more easy accessible

00:20:30,480 --> 00:20:35,630
see I see the use cases and one of the

00:20:33,210 --> 00:20:35,630
things we're gonna

00:20:36,280 --> 00:20:43,810
okay first to see when you can run a

00:20:39,940 --> 00:20:48,520
test in a CIS system and you run it to a

00:20:43,810 --> 00:20:52,060
special route with the new build of the

00:20:48,520 --> 00:20:55,300
image and only this here job actually

00:20:52,060 --> 00:20:58,090
see that and it's the CI job for

00:20:55,300 --> 00:21:00,760
instance stops to do a testing of your

00:20:58,090 --> 00:21:02,980
leaving that route off so you can join

00:21:00,760 --> 00:21:06,670
it and then debug the race in whitetails

00:21:02,980 --> 00:21:08,620
and so on have some interesting cases of

00:21:06,670 --> 00:21:10,630
course this is all fun and games when

00:21:08,620 --> 00:21:13,510
you have the stateless things but when

00:21:10,630 --> 00:21:18,250
you have state for new services you have

00:21:13,510 --> 00:21:20,320
a whole range of other issues you

00:21:18,250 --> 00:21:23,440
probably don't want to change key

00:21:20,320 --> 00:21:27,330
database of a service just because you

00:21:23,440 --> 00:21:31,380
made some fun Deb things or effect

00:21:27,330 --> 00:21:35,210
or effect the real users databases and

00:21:31,380 --> 00:21:39,000
so on so interesting things like maybe

00:21:35,210 --> 00:21:44,390
routing to alternative databases for a

00:21:39,000 --> 00:21:47,340
form of layered database where you can

00:21:44,390 --> 00:21:49,410
write and change the data but only you

00:21:47,340 --> 00:21:53,040
but in your own complex can read them

00:21:49,410 --> 00:21:55,260
and so on they're interesting problems

00:21:53,040 --> 00:21:57,660
to solve down the line essentially and

00:21:55,260 --> 00:21:59,790
whatever you guys come up with that we

00:21:57,660 --> 00:22:02,660
need to do

00:21:59,790 --> 00:22:02,660
and look at

00:22:03,380 --> 00:22:09,080
the project is at my face fuel workspace

00:22:06,920 --> 00:22:13,540
at the moment we haven't come up with

00:22:09,080 --> 00:22:13,540
any better name for it than that

00:22:19,610 --> 00:22:24,470
are we alone when definitely not

00:22:21,230 --> 00:22:27,980
unknowns this while the project is

00:22:24,470 --> 00:22:31,100
influenced by something bubble tables

00:22:27,980 --> 00:22:34,909
was the showing at Houston last year

00:22:31,100 --> 00:22:38,570
that they were doing namely which is

00:22:34,909 --> 00:22:41,659
works similarly as this actually does

00:22:38,570 --> 00:22:43,309
places and the Google helpful as well is

00:22:41,659 --> 00:22:47,080
trying to do something similar to this

00:22:43,309 --> 00:22:47,080
and not too deep

00:22:50,550 --> 00:22:55,230
and that is essentially unless anyone

00:22:53,130 --> 00:22:58,280
has any more questions or having any

00:22:55,230 --> 00:22:58,280
words what I wanted to show

00:23:06,040 --> 00:23:09,060
any questions

00:23:13,220 --> 00:23:16,090

YouTube URL: https://www.youtube.com/watch?v=nz0jGx4GfZM


