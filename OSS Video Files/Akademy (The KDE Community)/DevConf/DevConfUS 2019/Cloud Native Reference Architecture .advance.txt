Title: Cloud Native Reference Architecture .advance
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speaker: Christina Lin

Cloud native architecture more than just container or container orchestration, when it comes to designing proper agile software architecture, there are many aspect that need to be taken into account. From simple microservices runtime, orchestration of core business, interacting with legacy, connecting with external SaaS application. To a more reactive system with events driven backbone, and also avoid data silos and how to deal with routing, versioning deployment strategy. Putting everything into a big picture, guide you through what next generation of Cloud native architecture should be like and how everything works together.
Captions: 
	00:00:03,950 --> 00:00:11,039
so I think it's fine so I'm gonna get

00:00:08,040 --> 00:00:14,160
started so we can go off early so it's

00:00:11,039 --> 00:00:16,590
better to be early not to be late yes so

00:00:14,160 --> 00:00:18,060
hi everybody I'm Christina Lynn just to

00:00:16,590 --> 00:00:18,990
do a little bit of introduction to about

00:00:18,060 --> 00:00:22,710
myself

00:00:18,990 --> 00:00:24,540
so in my morning day job is I am a

00:00:22,710 --> 00:00:27,030
technical marketing manager so what a

00:00:24,540 --> 00:00:28,410
technical marketing manager does is we

00:00:27,030 --> 00:00:30,990
know how we have each half of the

00:00:28,410 --> 00:00:32,969
product so my job is to put lipstick on

00:00:30,990 --> 00:00:33,870
the pig to make the product mix pretty

00:00:32,969 --> 00:00:35,820
and good

00:00:33,870 --> 00:00:40,200
so that's presentable in front of you so

00:00:35,820 --> 00:00:42,480
that's my day job but that's fun but as

00:00:40,200 --> 00:00:44,220
a technical person I feel like my

00:00:42,480 --> 00:00:46,410
passion it's more like more on

00:00:44,220 --> 00:00:48,630
evangelizing the technical content so

00:00:46,410 --> 00:00:50,250
for me I really like to share what I've

00:00:48,630 --> 00:00:51,960
learned throughout the years of what

00:00:50,250 --> 00:00:54,239
I've been doing and things I've seen in

00:00:51,960 --> 00:00:56,550
the customer side so this is kind of a

00:00:54,239 --> 00:00:59,399
summarized view or summarized thing I've

00:00:56,550 --> 00:01:00,930
seen in the past few years on the top of

00:00:59,399 --> 00:01:02,309
the cloud native application where

00:01:00,930 --> 00:01:03,450
people are doing it and something

00:01:02,309 --> 00:01:04,469
there's some sometimes they're doing

00:01:03,450 --> 00:01:06,959
things we're all cement they're doing

00:01:04,469 --> 00:01:09,719
things right and just summarize view of

00:01:06,959 --> 00:01:10,950
what I've seen before and then just so

00:01:09,719 --> 00:01:14,639
there's not going to be a lot of demos

00:01:10,950 --> 00:01:15,780
here today but a lot of concepts on how

00:01:14,639 --> 00:01:17,969
to put things together and how

00:01:15,780 --> 00:01:20,249
everything works together right so that

00:01:17,969 --> 00:01:23,549
would be something that would be the

00:01:20,249 --> 00:01:26,429
the whole agenda of this is talk so call

00:01:23,549 --> 00:01:28,319
hated so what is so just set the base of

00:01:26,429 --> 00:01:30,539
what call native is basically we're just

00:01:28,319 --> 00:01:33,060
we're talking about all this application

00:01:30,539 --> 00:01:34,979
that's running on top of the public

00:01:33,060 --> 00:01:36,569
private and hybrid clouds and then we

00:01:34,979 --> 00:01:38,640
want to make them scalable we want them

00:01:36,569 --> 00:01:40,079
to make them flexible so these are our

00:01:38,640 --> 00:01:42,719
goals we want to make sure that their

00:01:40,079 --> 00:01:44,579
speed they can we have seeds fast speed

00:01:42,719 --> 00:01:46,020
to actually get them onto production we

00:01:44,579 --> 00:01:48,270
have quick access and we can scale them

00:01:46,020 --> 00:01:52,140
so flexibility and scalability something

00:01:48,270 --> 00:01:55,799
we're looking for and so the problem is

00:01:52,140 --> 00:01:58,409
for most of my customers or people that

00:01:55,799 --> 00:02:00,539
be using our today we have technology or

00:01:58,409 --> 00:02:03,060
people that say using other technology

00:02:00,539 --> 00:02:05,280
they always got bombarded with all this

00:02:03,060 --> 00:02:07,200
terminology from cognitive world like

00:02:05,280 --> 00:02:08,849
okay what's this micro services okay I

00:02:07,200 --> 00:02:11,190
learned micro services so what is this

00:02:08,849 --> 00:02:13,170
new service machine coming up and what

00:02:11,190 --> 00:02:14,609
is that like what is it that event

00:02:13,170 --> 00:02:16,079
sourcing that you talk about when you do

00:02:14,609 --> 00:02:18,390
like the inventing the event-driven

00:02:16,079 --> 00:02:20,549
architecture and what is this automation

00:02:18,390 --> 00:02:22,709
CICE that you're talking about all this

00:02:20,549 --> 00:02:24,959
thing gets into their heads but they

00:02:22,709 --> 00:02:26,730
don't know which to put one and so here

00:02:24,959 --> 00:02:29,040
I am I just wanted to make things

00:02:26,730 --> 00:02:31,200
straight just to actually put things in

00:02:29,040 --> 00:02:33,829
a more organized way and to make it easy

00:02:31,200 --> 00:02:37,680
for people to understand what they are

00:02:33,829 --> 00:02:39,540
so I call this day 100 BC that's their

00:02:37,680 --> 00:02:41,579
100 days before container right so

00:02:39,540 --> 00:02:43,799
that's kind of what I put it so before

00:02:41,579 --> 00:02:46,019
containers I was doing a lot of

00:02:43,799 --> 00:02:48,150
application development and application

00:02:46,019 --> 00:02:49,950
integration integration I was more on

00:02:48,150 --> 00:02:51,419
the integration side of the story so I

00:02:49,950 --> 00:02:54,130
was three applications and the

00:02:51,419 --> 00:02:56,440
application needs to talk to each other

00:02:54,130 --> 00:02:59,440
and you know I when I was doing it I was

00:02:56,440 --> 00:03:01,570
I had this excel file which contains all

00:02:59,440 --> 00:03:05,500
the application that my application

00:03:01,570 --> 00:03:07,480
talks to and whenever my bosses for my

00:03:05,500 --> 00:03:09,040
bosses you know they asked me like who

00:03:07,480 --> 00:03:10,720
do you talk to I would bring up this

00:03:09,040 --> 00:03:12,400
excel file and started reading out to

00:03:10,720 --> 00:03:14,260
them like so these are application I'm

00:03:12,400 --> 00:03:15,940
talking to and that makes things really

00:03:14,260 --> 00:03:18,340
chaotic because it's really hard to

00:03:15,940 --> 00:03:20,320
manage and you know to to actually they

00:03:18,340 --> 00:03:22,360
if I need to make a change I need to

00:03:20,320 --> 00:03:24,550
notify all the three parties and all

00:03:22,360 --> 00:03:27,550
that it makes things very complicated so

00:03:24,550 --> 00:03:30,160
that's why we started this also I yes

00:03:27,550 --> 00:03:33,280
anything right so I have this big

00:03:30,160 --> 00:03:35,650
centralized enterprise service bus and

00:03:33,280 --> 00:03:37,270
it's moving things apart at least moving

00:03:35,650 --> 00:03:41,950
things alone and then I have to find a

00:03:37,270 --> 00:03:44,170
big services right that's good but then

00:03:41,950 --> 00:03:46,330
while I was doing the solar stuff I

00:03:44,170 --> 00:03:48,760
found that I became the bottleneck of

00:03:46,330 --> 00:03:50,890
the whole

00:03:48,760 --> 00:03:52,270
the whole company because they were

00:03:50,890 --> 00:03:54,550
waiting for me to implement the

00:03:52,270 --> 00:03:56,170
integration taking the technology so

00:03:54,550 --> 00:03:58,360
that's when I started to think about you

00:03:56,170 --> 00:04:00,400
know if I can break down my integration

00:03:58,360 --> 00:04:02,080
code into smaller bits and pieces and

00:04:00,400 --> 00:04:04,690
deploy them independently

00:04:02,080 --> 00:04:07,930
wouldn't that be better so that's when I

00:04:04,690 --> 00:04:10,630
started to start to do like lightweight

00:04:07,930 --> 00:04:13,390
ESB and then that's when I got into the

00:04:10,630 --> 00:04:16,359
OSGi world because before everything was

00:04:13,390 --> 00:04:18,100
on Java the big Java EE container where

00:04:16,359 --> 00:04:20,829
everything is in a big bowl of gothic

00:04:18,100 --> 00:04:25,330
application and then we kind of started

00:04:20,829 --> 00:04:26,889
look at OSGi so SGI is this java it's

00:04:25,330 --> 00:04:28,270
also also running on just this java

00:04:26,889 --> 00:04:30,940
virtual machine but where you can

00:04:28,270 --> 00:04:32,889
isolate it modules right so you can put

00:04:30,940 --> 00:04:35,200
them into bundles so when you wanted to

00:04:32,889 --> 00:04:36,580
restart one of the one of the

00:04:35,200 --> 00:04:37,660
applications that this isn't affecting

00:04:36,580 --> 00:04:39,370
others so you don't have to restart

00:04:37,660 --> 00:04:40,900
everything so it was just creating a

00:04:39,370 --> 00:04:44,620
much lighter weight and modulized some

00:04:40,900 --> 00:04:46,750
things which is better right but then it

00:04:44,620 --> 00:04:48,790
comes along where it kind of started the

00:04:46,750 --> 00:04:51,340
whole pile native you know container

00:04:48,790 --> 00:04:53,680
world where now people are switching

00:04:51,340 --> 00:04:55,390
switching to micro synthesis so that was

00:04:53,680 --> 00:04:57,370
a big thing to us because we are kind of

00:04:55,390 --> 00:04:58,630
going on the same way but we haven't got

00:04:57,370 --> 00:05:00,880
it here because we haven't figured out

00:04:58,630 --> 00:05:02,890
what's the best way of deploying our

00:05:00,880 --> 00:05:05,320
technology what's the best way of you

00:05:02,890 --> 00:05:07,120
know automating it because we're kind of

00:05:05,320 --> 00:05:10,360
like still trying to figure everything

00:05:07,120 --> 00:05:11,979
else but then this all whole cloud world

00:05:10,360 --> 00:05:13,810
has come along and then we kind of we

00:05:11,979 --> 00:05:14,979
saw like oh this is the way we should go

00:05:13,810 --> 00:05:15,880
and this is the way we should put

00:05:14,979 --> 00:05:18,070
everything together this is how we

00:05:15,880 --> 00:05:20,380
should develop applications so that's

00:05:18,070 --> 00:05:22,710
kind of how this is so this is what the

00:05:20,380 --> 00:05:25,889
CNCs the

00:05:22,710 --> 00:05:27,870
the community of the culminated of

00:05:25,889 --> 00:05:30,289
Community Foundation this is how they

00:05:27,870 --> 00:05:33,360
define what a reference architecture

00:05:30,289 --> 00:05:35,460
should look like so you kind of see this

00:05:33,360 --> 00:05:37,020
is where you kind of this is where you

00:05:35,460 --> 00:05:38,850
kind of do your application development

00:05:37,020 --> 00:05:40,410
this is where you can orchestrate all

00:05:38,850 --> 00:05:42,150
your stuff together like your container

00:05:40,410 --> 00:05:45,270
up stripe Roca strikes prostrations

00:05:42,150 --> 00:05:47,460
storage and then provisioning that's the

00:05:45,270 --> 00:05:49,020
CIC confirmation stuff right so these

00:05:47,460 --> 00:05:51,570
are the things that define what should

00:05:49,020 --> 00:05:53,400
be in architecture right but this is all

00:05:51,570 --> 00:05:58,470
very vague what do you mean by that

00:05:53,400 --> 00:06:01,380
right so for me then I drew this diagram

00:05:58,470 --> 00:06:02,970
here that makes more sense to me I hope

00:06:01,380 --> 00:06:05,430
that makes more sense to you right so

00:06:02,970 --> 00:06:07,380
I'm gonna explain the list of lova it's

00:06:05,430 --> 00:06:09,030
a little bit small but you're going to

00:06:07,380 --> 00:06:10,470
get the slides anywhere once we did so

00:06:09,030 --> 00:06:12,539
you guys you guys would have two slides

00:06:10,470 --> 00:06:15,870
but for me I wanted to break it down

00:06:12,539 --> 00:06:18,810
into bits and pieces and I want to show

00:06:15,870 --> 00:06:21,000
you so that would be easier for you to

00:06:18,810 --> 00:06:22,509
understand how to fill a better call

00:06:21,000 --> 00:06:24,639
native

00:06:22,509 --> 00:06:27,969
reference architecture or architecture

00:06:24,639 --> 00:06:31,229
right so I broke down to four different

00:06:27,969 --> 00:06:33,639
plates right so the bottom plan is the

00:06:31,229 --> 00:06:35,979
orchestration and platform where it

00:06:33,639 --> 00:06:38,499
handles like most of the container

00:06:35,979 --> 00:06:40,270
container orchestration it contains all

00:06:38,499 --> 00:06:42,610
the basic and foundations of how things

00:06:40,270 --> 00:06:45,610
work together and then we have the top

00:06:42,610 --> 00:06:47,740
top part which is which is where we're

00:06:45,610 --> 00:06:50,379
gonna focus for more on our topics today

00:06:47,740 --> 00:06:53,139
is how to develop for your application

00:06:50,379 --> 00:06:55,389
on a container validated world or

00:06:53,139 --> 00:06:57,819
container native world right so this is

00:06:55,389 --> 00:07:00,729
how how so this is how everything should

00:06:57,819 --> 00:07:02,529
be done and then your si event events

00:07:00,729 --> 00:07:05,349
coming in in inside this plan and then

00:07:02,529 --> 00:07:07,960
you're also seen microservices here you

00:07:05,349 --> 00:07:10,689
see the data sources here and then you

00:07:07,960 --> 00:07:13,749
also have the service mesh plan where it

00:07:10,689 --> 00:07:16,419
handles a lot of the controlling of the

00:07:13,749 --> 00:07:18,129
traffic's of your your application where

00:07:16,419 --> 00:07:20,110
the where the traffic's goes right so

00:07:18,129 --> 00:07:21,669
this is the this is the traffic control

00:07:20,110 --> 00:07:23,390
plan right so it's controlling where

00:07:21,669 --> 00:07:25,270
everything goes and we know that

00:07:23,390 --> 00:07:27,800
then this is the resource of

00:07:25,270 --> 00:07:29,510
optimization plan wishes or how do i

00:07:27,800 --> 00:07:31,970
optimize my resource how do I make sure

00:07:29,510 --> 00:07:33,620
that I'm shutting my service down when

00:07:31,970 --> 00:07:36,920
it's not being used so sometimes people

00:07:33,620 --> 00:07:38,120
call that service but I think some of

00:07:36,920 --> 00:07:40,040
this is more than that right service

00:07:38,120 --> 00:07:43,160
service is not just resource

00:07:40,040 --> 00:07:45,650
optimization service is you still have

00:07:43,160 --> 00:07:47,630
to think about functions and who has

00:07:45,650 --> 00:07:49,310
been defining functions well lambda has

00:07:47,630 --> 00:07:51,290
been defining functions but nobody else

00:07:49,310 --> 00:07:53,750
has been defining functions so we serve

00:07:51,290 --> 00:07:56,360
on our way to define what the functions

00:07:53,750 --> 00:07:58,580
are so I wouldn't call service who is

00:07:56,360 --> 00:08:00,640
partially service right but I think

00:07:58,580 --> 00:08:03,170
that's kind of a resource of

00:08:00,640 --> 00:08:06,620
optimization plan right now for so

00:08:03,170 --> 00:08:08,960
that's kind of how I view this whole

00:08:06,620 --> 00:08:11,000
architecture and how they how it's being

00:08:08,960 --> 00:08:13,730
put together and then we've also got

00:08:11,000 --> 00:08:16,370
this you know technology that's related

00:08:13,730 --> 00:08:18,920
to the two different plans right so for

00:08:16,370 --> 00:08:20,120
data you have change data captures data

00:08:18,920 --> 00:08:22,730
integration how do I put they are

00:08:20,120 --> 00:08:24,320
together and then we also like for micro

00:08:22,730 --> 00:08:25,950
services we have the domain driven

00:08:24,320 --> 00:08:29,370
design right all that kind of stuff

00:08:25,950 --> 00:08:32,190
so that's my view

00:08:29,370 --> 00:08:35,610
that's overview of today so you've seen

00:08:32,190 --> 00:08:39,180
this we're done okay but I'll go to into

00:08:35,610 --> 00:08:40,650
the details of what they mean and what I

00:08:39,180 --> 00:08:44,250
mean by them and how you do them right

00:08:40,650 --> 00:08:46,530
so kind of just going deeper into what's

00:08:44,250 --> 00:08:48,270
going on right so first of all

00:08:46,530 --> 00:08:49,650
micro-services I think you've seen this

00:08:48,270 --> 00:08:51,180
like a hundred times so I'm not gonna

00:08:49,650 --> 00:08:52,140
talk people to talk to you about micro

00:08:51,180 --> 00:08:54,280
services anymore

00:08:52,140 --> 00:08:56,080
but basically

00:08:54,280 --> 00:08:58,330
breaking down your model fit well

00:08:56,080 --> 00:09:02,200
elastic into microservice is good but

00:08:58,330 --> 00:09:04,480
for me the struggle is what is the size

00:09:02,200 --> 00:09:06,700
of your micro-services and why do I need

00:09:04,480 --> 00:09:10,540
to decide the size of my microservices

00:09:06,700 --> 00:09:13,300
right should I break my micro-services

00:09:10,540 --> 00:09:14,890
into two in a role I've put you to

00:09:13,300 --> 00:09:16,480
different things in the micro services

00:09:14,890 --> 00:09:19,930
or three different things in the

00:09:16,480 --> 00:09:23,350
microservices right I how do I decide

00:09:19,930 --> 00:09:26,170
what they are how how how they should be

00:09:23,350 --> 00:09:27,940
right so the whole I think we should

00:09:26,170 --> 00:09:30,010
take a lot of cautions when we were

00:09:27,940 --> 00:09:34,960
talking binding micro-services and

00:09:30,010 --> 00:09:37,840
domains because that that hopefully when

00:09:34,960 --> 00:09:39,940
we make a decision we have to think

00:09:37,840 --> 00:09:43,300
about how we're going to deploy it right

00:09:39,940 --> 00:09:46,630
do I deployed to different functions in

00:09:43,300 --> 00:09:48,490
a services in a instance or Holidays to

00:09:46,630 --> 00:09:50,860
all how are these two communicate

00:09:48,490 --> 00:09:54,160
together so and that would also affect

00:09:50,860 --> 00:09:56,680
how we do automations right because how

00:09:54,160 --> 00:09:58,810
you deploy it is related to how you do

00:09:56,680 --> 00:10:00,720
alternations so when you're defining

00:09:58,810 --> 00:10:03,360
your

00:10:00,720 --> 00:10:04,890
your domains and things in a

00:10:03,360 --> 00:10:08,310
micro-services you have to think about

00:10:04,890 --> 00:10:10,350
it I think about is this independent

00:10:08,310 --> 00:10:11,910
piece of code that would be

00:10:10,350 --> 00:10:14,580
independently talking to each other

00:10:11,910 --> 00:10:17,370
right so some of the big mistakes that I

00:10:14,580 --> 00:10:19,590
see people when they're doing domain

00:10:17,370 --> 00:10:21,930
driven design wrong is they have this

00:10:19,590 --> 00:10:23,790
huge big services right in the middle

00:10:21,930 --> 00:10:25,680
which is very similar to what we have

00:10:23,790 --> 00:10:27,870
back in the snow are they where all the

00:10:25,680 --> 00:10:29,670
service is talking to this one and they

00:10:27,870 --> 00:10:31,200
become the bottleneck and then you

00:10:29,670 --> 00:10:32,730
should think about how do you break it

00:10:31,200 --> 00:10:35,580
down right are you putting too much

00:10:32,730 --> 00:10:37,620
tasks into the services can we make it a

00:10:35,580 --> 00:10:39,360
district can we can we separate those

00:10:37,620 --> 00:10:40,680
two and make it more distributed

00:10:39,360 --> 00:10:44,250
communication in between in between

00:10:40,680 --> 00:10:46,170
those two so things in here with micro

00:10:44,250 --> 00:10:48,450
services that I see you should even

00:10:46,170 --> 00:10:51,390
though think about reiterate and

00:10:48,450 --> 00:10:53,100
sometimes with bounded context

00:10:51,390 --> 00:10:55,050
another thing with micro services with

00:10:53,100 --> 00:10:57,240
the surrounding context so you would

00:10:55,050 --> 00:10:59,580
have you know two different you know

00:10:57,240 --> 00:11:01,050
domains that's talking to each other and

00:10:59,580 --> 00:11:02,970
sometimes when I see what people does

00:11:01,050 --> 00:11:06,140
different it does a little bit wrong is

00:11:02,970 --> 00:11:08,600
where they would define a payment here

00:11:06,140 --> 00:11:10,910
and they think okay payment is is what's

00:11:08,600 --> 00:11:12,380
what's in this domain so whenever I need

00:11:10,910 --> 00:11:15,260
a payment I'm coming back to this domain

00:11:12,380 --> 00:11:17,000
and then trying to access that here but

00:11:15,260 --> 00:11:18,800
you have to think about it when when you

00:11:17,000 --> 00:11:20,510
talk about domain do you mean when you

00:11:18,800 --> 00:11:23,150
talk about payments so you mean payment

00:11:20,510 --> 00:11:25,310
in the shopping cart domain or do you

00:11:23,150 --> 00:11:26,870
mean by the payment in assurance to me

00:11:25,310 --> 00:11:28,460
because sometimes they're very different

00:11:26,870 --> 00:11:32,120
and they should handle differently so

00:11:28,460 --> 00:11:34,790
you know and so that's that's I see a

00:11:32,120 --> 00:11:37,340
lot of like inter domain communications

00:11:34,790 --> 00:11:39,440
it's way too many so that's when you

00:11:37,340 --> 00:11:42,260
should redefine your abundance context

00:11:39,440 --> 00:11:45,200
again right so some things that I see a

00:11:42,260 --> 00:11:47,450
lot of people doing a little bit wrong

00:11:45,200 --> 00:11:49,910
here or not wrong but I think they

00:11:47,450 --> 00:11:51,530
should respect her a little bit but the

00:11:49,910 --> 00:11:53,840
good thing is like you know for

00:11:51,530 --> 00:11:57,440
micro-services is very easy to refactor

00:11:53,840 --> 00:12:01,150
right I think so the other thing I was

00:11:57,440 --> 00:12:04,130
talking about a little bit before is

00:12:01,150 --> 00:12:07,970
communication in between domains right

00:12:04,130 --> 00:12:10,340
so have people asking me so if I have

00:12:07,970 --> 00:12:13,160
micro services here and I have micro

00:12:10,340 --> 00:12:15,440
services here and they did they do they

00:12:13,160 --> 00:12:16,190
belong to different domains how do they

00:12:15,440 --> 00:12:20,450
talk to each other

00:12:16,190 --> 00:12:22,820
right so it's always clear that between

00:12:20,450 --> 00:12:26,810
domains you should set a set of

00:12:22,820 --> 00:12:28,640
contracts of boundaries so for this this

00:12:26,810 --> 00:12:30,550
particular of micro services wants to

00:12:28,640 --> 00:12:33,040
access a particular services here

00:12:30,550 --> 00:12:35,290
they have to go all the way out and then

00:12:33,040 --> 00:12:36,850
come back to the services they shouldn't

00:12:35,290 --> 00:12:38,020
do any direct communications because

00:12:36,850 --> 00:12:40,390
then you are breaking down that

00:12:38,020 --> 00:12:43,870
boundaries so then you're not doing the

00:12:40,390 --> 00:12:46,180
domain right right so the way that we're

00:12:43,870 --> 00:12:48,910
setting up the contracts is because we

00:12:46,180 --> 00:12:50,580
know these are probably the two

00:12:48,910 --> 00:12:54,160
different teams working together and

00:12:50,580 --> 00:12:55,780
whenever there's more secret passage

00:12:54,160 --> 00:12:57,520
between the domains that's not always a

00:12:55,780 --> 00:12:59,380
good thing because then you have decent

00:12:57,520 --> 00:13:01,360
you know too many tendencies between

00:12:59,380 --> 00:13:04,660
each other so it's always good to go

00:13:01,360 --> 00:13:06,490
through contracts and you know and then

00:13:04,660 --> 00:13:07,930
we when we go down to the next parts you

00:13:06,490 --> 00:13:12,040
know why I have all these different

00:13:07,930 --> 00:13:13,780
colors for my micro services but for now

00:13:12,040 --> 00:13:14,890
I was just like well micro services make

00:13:13,780 --> 00:13:17,020
sure you do your domain-driven

00:13:14,890 --> 00:13:21,070
architecture the mint urban design and

00:13:17,020 --> 00:13:24,820
set up your boundary context right

00:13:21,070 --> 00:13:27,220
and okay so now we have or

00:13:24,820 --> 00:13:29,560
micro-services created we have to find

00:13:27,220 --> 00:13:32,230
our domains it's all done it's great its

00:13:29,560 --> 00:13:34,410
small it's fast it's simple and easy to

00:13:32,230 --> 00:13:34,410
maintain

00:13:35,630 --> 00:13:42,000
now the problem about 300 different

00:13:40,200 --> 00:13:42,570
microservices and they all need to talk

00:13:42,000 --> 00:13:46,200
to each other

00:13:42,570 --> 00:13:48,480
awesome and the other thing is I have

00:13:46,200 --> 00:13:52,260
other services trying to use my micro

00:13:48,480 --> 00:13:54,660
services so in order for this particular

00:13:52,260 --> 00:13:56,640
function that needs to be get something

00:13:54,660 --> 00:13:59,370
done he needs to call 300 different

00:13:56,640 --> 00:14:01,350
micro service to get it done and okay it

00:13:59,370 --> 00:14:03,269
creates a great service mesh and they're

00:14:01,350 --> 00:14:06,630
trying to talk to each other and then I

00:14:03,269 --> 00:14:08,130
have just I have to get out my my excel

00:14:06,630 --> 00:14:09,750
sheet again and then starting to write

00:14:08,130 --> 00:14:12,720
down who is connecting to what and

00:14:09,750 --> 00:14:14,279
telling my my boss and oh I've got like

00:14:12,720 --> 00:14:17,220
300 different micro service connecting

00:14:14,279 --> 00:14:21,329
to my services right that's not a good

00:14:17,220 --> 00:14:24,120
way of doing things so that's why I came

00:14:21,329 --> 00:14:26,550
up with this HR integration concept so

00:14:24,120 --> 00:14:28,170
this is not this is not something that

00:14:26,550 --> 00:14:30,019
you've done physically but logically

00:14:28,170 --> 00:14:32,700
right so you have to think about the

00:14:30,019 --> 00:14:36,180
responsibility in your micro services

00:14:32,700 --> 00:14:39,630
right so you have I defined it in two

00:14:36,180 --> 00:14:42,089
type of different responsibilities so

00:14:39,630 --> 00:14:43,770
here this is like normal microservices

00:14:42,089 --> 00:14:47,040
where you do every single day like

00:14:43,770 --> 00:14:49,110
single business logic with this own data

00:14:47,040 --> 00:14:51,140
source right which micro services just

00:14:49,110 --> 00:14:54,570
has its own data source that was defined

00:14:51,140 --> 00:14:56,190
so you've got all this doing it here but

00:14:54,570 --> 00:14:59,190
what about these so

00:14:56,190 --> 00:15:00,990
are the controllers the microservices

00:14:59,190 --> 00:15:03,900
that you know helps you to put things

00:15:00,990 --> 00:15:05,970
together to hide the complexity from

00:15:03,900 --> 00:15:09,420
others trying to call your applications

00:15:05,970 --> 00:15:11,370
from from call your services and also

00:15:09,420 --> 00:15:14,670
helping you do some transformation of

00:15:11,370 --> 00:15:16,380
data because we know not everyone wants

00:15:14,670 --> 00:15:18,180
to use Java not everyone wants to use

00:15:16,380 --> 00:15:23,550
Python sometimes people like nodejs

00:15:18,180 --> 00:15:25,350
and sometimes their data format would

00:15:23,550 --> 00:15:27,060
look a little bit different so somebody

00:15:25,350 --> 00:15:29,490
has to come in and normalize it

00:15:27,060 --> 00:15:32,520
sometimes and so this is what this layer

00:15:29,490 --> 00:15:36,920
does and what about this one so this one

00:15:32,520 --> 00:15:39,540
I call it the more like a a facade for

00:15:36,920 --> 00:15:41,280
everybody so this one would be more

00:15:39,540 --> 00:15:44,820
related to people that's calling you

00:15:41,280 --> 00:15:49,580
right so say for instance Netflix is

00:15:44,820 --> 00:15:53,690
giving a services GPS for iPhone and

00:15:49,580 --> 00:15:56,899
maybe a your Samsung TV right the format

00:15:53,690 --> 00:15:59,089
of data the data itself is exactly the

00:15:56,899 --> 00:16:01,540
same but the way they give that data

00:15:59,089 --> 00:16:03,860
would be a little bit different because

00:16:01,540 --> 00:16:06,500
ps4 wants

00:16:03,860 --> 00:16:08,899
XML with some extra metadata and then

00:16:06,500 --> 00:16:11,660
I've has once you know your iPhone wants

00:16:08,899 --> 00:16:13,220
JSON with other data with your data with

00:16:11,660 --> 00:16:16,070
other JSON format

00:16:13,220 --> 00:16:18,800
and maybe the your Samsung TV wants a

00:16:16,070 --> 00:16:21,079
plain text who knows right they have

00:16:18,800 --> 00:16:23,029
they requested the same thing but with a

00:16:21,079 --> 00:16:25,250
different format and they want to change

00:16:23,029 --> 00:16:27,500
all the time and then you have to deal

00:16:25,250 --> 00:16:30,230
with all these changes and this is the

00:16:27,500 --> 00:16:33,200
facade this is the facade where you do

00:16:30,230 --> 00:16:35,180
all that kind of stuff so I see this one

00:16:33,200 --> 00:16:37,760
will be updated more often than the for

00:16:35,180 --> 00:16:40,370
business and the integration and this

00:16:37,760 --> 00:16:42,890
one would be more like you know updating

00:16:40,370 --> 00:16:45,079
it for quick changes so that's how you

00:16:42,890 --> 00:16:47,570
get your system voyage out that's how

00:16:45,079 --> 00:16:52,130
you get them more more free more

00:16:47,570 --> 00:16:55,460
flexible right so the core so basically

00:16:52,130 --> 00:16:57,649
the core is just build and

00:16:55,460 --> 00:17:01,070
I run it right basic he does just that

00:16:57,649 --> 00:17:02,720
they have like dinosaurs connecting to

00:17:01,070 --> 00:17:07,730
it and then you should have the runtime

00:17:02,720 --> 00:17:09,829
as easy and and then we have the the

00:17:07,730 --> 00:17:11,689
control and dispatch which is the facade

00:17:09,829 --> 00:17:13,550
which helps you to deal with all the

00:17:11,689 --> 00:17:15,410
different needs from different customers

00:17:13,550 --> 00:17:18,860
right and different users and then make

00:17:15,410 --> 00:17:21,589
it easy and faster for them right and

00:17:18,860 --> 00:17:25,750
there there's two different kinds of

00:17:21,589 --> 00:17:28,700
inputs right the first one is the

00:17:25,750 --> 00:17:30,100
request and response so you sometimes

00:17:28,700 --> 00:17:31,960
you would have

00:17:30,100 --> 00:17:33,520
requesting response I'm giving that back

00:17:31,960 --> 00:17:36,910
to them and sometimes you'll be just

00:17:33,520 --> 00:17:38,590
receiving a bunch of streaming of data

00:17:36,910 --> 00:17:41,440
so that's kind of what we see today from

00:17:38,590 --> 00:17:43,660
the control and dispatch so you have to

00:17:41,440 --> 00:17:47,700
be equipped and being able to receive

00:17:43,660 --> 00:17:47,700
all this all this kind of stuff

00:17:48,990 --> 00:17:55,679
so in order okay so coming back to this

00:17:52,380 --> 00:17:57,899
so in order for us to actually create a

00:17:55,679 --> 00:18:00,659
better way of communication between your

00:17:57,899 --> 00:18:03,809
vendors your partners we have to set up

00:18:00,659 --> 00:18:06,419
contracts and what's the best way of set

00:18:03,809 --> 00:18:09,020
up contracts today API is of course

00:18:06,419 --> 00:18:11,250
because there's a standard API

00:18:09,020 --> 00:18:12,960
documentation where you configure it

00:18:11,250 --> 00:18:17,340
small sweater right used to call Spyder

00:18:12,960 --> 00:18:20,399
with our sofas API standard so this so

00:18:17,340 --> 00:18:23,010
now how do we how do we define the api's

00:18:20,399 --> 00:18:25,679
so the old way of doing it like how I

00:18:23,010 --> 00:18:27,919
used to know is I am a developer I'm

00:18:25,679 --> 00:18:31,049
gonna go ahead and start my business

00:18:27,919 --> 00:18:35,730
development and once I finish my code I

00:18:31,049 --> 00:18:37,980
am going to tell the other guy which is

00:18:35,730 --> 00:18:40,409
talking to me SS this is my contract

00:18:37,980 --> 00:18:42,570
this is what I'm gonna do you stick with

00:18:40,409 --> 00:18:44,159
what I what I tell you to do which is

00:18:42,570 --> 00:18:46,200
kind of like a whistle right remember

00:18:44,159 --> 00:18:47,520
this also are days where you have wrists

00:18:46,200 --> 00:18:50,580
all they give you is dough and then you

00:18:47,520 --> 00:18:52,110
kind of lo the whisk oh and that would

00:18:50,580 --> 00:18:55,440
generate the code for you so you have

00:18:52,110 --> 00:18:57,659
the code ready but now that people do

00:18:55,440 --> 00:18:59,700
today and you can see that in my youtube

00:18:57,659 --> 00:19:02,880
video I have a YouTube video that shows

00:18:59,700 --> 00:19:05,870
you how to do API first so there are

00:19:02,880 --> 00:19:09,419
tools that can help you to actually

00:19:05,870 --> 00:19:12,240
create contracts so you can build your

00:19:09,419 --> 00:19:13,710
swagger document without any coding so

00:19:12,240 --> 00:19:16,500
all you need to do is just configure

00:19:13,710 --> 00:19:18,809
what are the URL I want to expect this

00:19:16,500 --> 00:19:20,220
is the this is the data format and then

00:19:18,809 --> 00:19:22,380
it's going to generate this where your

00:19:20,220 --> 00:19:24,210
documents for you and whatever you do is

00:19:22,380 --> 00:19:25,890
just you take that swagger documents and

00:19:24,210 --> 00:19:28,560
then give that to the developer and says

00:19:25,890 --> 00:19:30,540
this is the contract I just set up with

00:19:28,560 --> 00:19:33,060
the partners and just go ahead go ahead

00:19:30,540 --> 00:19:34,830
and implement it right so that's going

00:19:33,060 --> 00:19:38,130
to save you a lot of back and forth time

00:19:34,830 --> 00:19:41,280
between your partners and developers so

00:19:38,130 --> 00:19:42,720
now it's just more like the more adopted

00:19:41,280 --> 00:19:48,540
way of doing things right now

00:19:42,720 --> 00:19:50,400
this is API first development and then

00:19:48,540 --> 00:19:52,020
this is why more see more insight when

00:19:50,400 --> 00:19:53,550
you have the compounding context I see

00:19:52,020 --> 00:19:55,410
moral code first because that's how

00:19:53,550 --> 00:19:57,650
people you suspected work but with

00:19:55,410 --> 00:20:00,660
external users you have seen more like a

00:19:57,650 --> 00:20:02,370
contract first development and then once

00:20:00,660 --> 00:20:04,470
you have the API of course you need to

00:20:02,370 --> 00:20:06,570
secure it I don't want to go too deep

00:20:04,470 --> 00:20:09,330
details into API management because

00:20:06,570 --> 00:20:11,010
there's a big another big topics I can

00:20:09,330 --> 00:20:12,810
talk in three hours right so you talk

00:20:11,010 --> 00:20:14,130
about how do I secure my API is and how

00:20:12,810 --> 00:20:15,840
do I manage to all that but just

00:20:14,130 --> 00:20:18,270
remember when you have your contracts

00:20:15,840 --> 00:20:20,610
make sure you have a way to manage all

00:20:18,270 --> 00:20:22,350
this contracts it's like like a place

00:20:20,610 --> 00:20:24,690
where you can put your file and then

00:20:22,350 --> 00:20:26,130
where your when the people wants to see

00:20:24,690 --> 00:20:27,660
what the contracts are they get to see

00:20:26,130 --> 00:20:30,450
it right so it's just like that kind of

00:20:27,660 --> 00:20:33,180
management for your API contracts need

00:20:30,450 --> 00:20:36,180
to do that too and then we have the

00:20:33,180 --> 00:20:38,490
composite responsibilities we're in the

00:20:36,180 --> 00:20:42,120
middle right remember remember that

00:20:38,490 --> 00:20:45,180
layer thing we have so that's that where

00:20:42,120 --> 00:20:47,330
you're gonna have a lot of service

00:20:45,180 --> 00:20:47,330
orchestration

00:20:47,640 --> 00:20:52,240
transformation of your data you know or

00:20:50,170 --> 00:20:54,550
collecting the data sometimes data comes

00:20:52,240 --> 00:20:56,380
in in streams wanna collect them and

00:20:54,550 --> 00:20:59,110
then give that back to the big data

00:20:56,380 --> 00:21:01,210
storage or you wanna put them up into

00:20:59,110 --> 00:21:03,310
micro services because now it's more

00:21:01,210 --> 00:21:05,770
scalable so I want to firm up and then

00:21:03,310 --> 00:21:07,540
send them all over different places what

00:21:05,770 --> 00:21:08,740
you want to normalize the data because

00:21:07,540 --> 00:21:09,520
they're coming out from different

00:21:08,740 --> 00:21:11,290
devices

00:21:09,520 --> 00:21:13,680
I want to normalize it and send it back

00:21:11,290 --> 00:21:16,150
to the backend so this is what this

00:21:13,680 --> 00:21:18,790
responsibility is this layer is supposed

00:21:16,150 --> 00:21:21,220
to do in the responsibilities and then

00:21:18,790 --> 00:21:23,740
talking to external services and last

00:21:21,220 --> 00:21:25,570
but not least anti-corruption what do I

00:21:23,740 --> 00:21:27,340
mean by anti-corruption so all the

00:21:25,570 --> 00:21:29,260
application that we create today right

00:21:27,340 --> 00:21:31,450
now in a cognitive world is greenfield

00:21:29,260 --> 00:21:33,790
like it's all new it's all I'm the new

00:21:31,450 --> 00:21:37,270
shiny content but then you still have to

00:21:33,790 --> 00:21:41,110
talk to all this big IBM machines where

00:21:37,270 --> 00:21:44,740
all these big machines and then you know

00:21:41,110 --> 00:21:46,750
they're very slow sometimes and then you

00:21:44,740 --> 00:21:48,970
know because their cycles are longer so

00:21:46,750 --> 00:21:51,370
you can't really wait for three months

00:21:48,970 --> 00:21:55,540
to deploy your vocation it's not how you

00:21:51,370 --> 00:21:57,280
do things in the green field application

00:21:55,540 --> 00:21:58,930
you want to do like you know every two

00:21:57,280 --> 00:22:01,960
days every hours I wanted to like

00:21:58,930 --> 00:22:04,770
publish my code so what does this help

00:22:01,960 --> 00:22:07,300
you to do actually you can create a

00:22:04,770 --> 00:22:09,940
middle middle here where it hides away

00:22:07,300 --> 00:22:13,240
so you can implement a lot of things in

00:22:09,940 --> 00:22:15,730
between you and the legacy application

00:22:13,240 --> 00:22:17,860
so the highest way of complexity so

00:22:15,730 --> 00:22:19,600
whenever there's an update I need it

00:22:17,860 --> 00:22:21,580
will help you to transfer sense for

00:22:19,600 --> 00:22:23,560
whatever you need and then put it into a

00:22:21,580 --> 00:22:25,510
more easier way to communicate with your

00:22:23,560 --> 00:22:29,380
legacy system so that's anti-corruption

00:22:25,510 --> 00:22:31,419
there we're supposed to be so

00:22:29,380 --> 00:22:35,590
that's my supposed to do so that's the

00:22:31,419 --> 00:22:38,200
what's that's the responsibility so and

00:22:35,590 --> 00:22:41,200
then that's all the API talks and all

00:22:38,200 --> 00:22:44,919
that but then we have events so this is

00:22:41,200 --> 00:22:46,990
the diagram that I created so these two

00:22:44,919 --> 00:22:49,330
diagrams are supposed to compare next to

00:22:46,990 --> 00:22:50,799
each other so there's two way of

00:22:49,330 --> 00:22:52,149
communication a synchronous

00:22:50,799 --> 00:22:54,159
communication and synchronous

00:22:52,149 --> 00:22:56,110
communication API are synchronous

00:22:54,159 --> 00:22:58,690
communication where you have a request

00:22:56,110 --> 00:23:00,720
and response right so the way you do

00:22:58,690 --> 00:23:04,570
communication is a little bit different

00:23:00,720 --> 00:23:06,759
when you talk about a synchronous

00:23:04,570 --> 00:23:10,509
communication where when the request

00:23:06,759 --> 00:23:13,419
comes in it always expect a response to

00:23:10,509 --> 00:23:16,120
go out right and the way you actually

00:23:13,419 --> 00:23:18,370
call you wait the way you're actually

00:23:16,120 --> 00:23:21,279
calling you're triggering all of the

00:23:18,370 --> 00:23:22,750
services mostly sequential right so I'm

00:23:21,279 --> 00:23:24,340
calling this one and I've got my

00:23:22,750 --> 00:23:26,200
response and point and i'm calling this

00:23:24,340 --> 00:23:27,830
one and this one so it's mostly

00:23:26,200 --> 00:23:31,370
sequential

00:23:27,830 --> 00:23:33,500
and the way you can synchronous okay so

00:23:31,370 --> 00:23:35,870
just speak just to set the background

00:23:33,500 --> 00:23:38,270
we're doing it in the distributed

00:23:35,870 --> 00:23:40,250
environment this is no more you know all

00:23:38,270 --> 00:23:42,350
this small Norfolk internal you know

00:23:40,250 --> 00:23:44,480
memory calls I know that no this is all

00:23:42,350 --> 00:23:46,400
distributed so the communication between

00:23:44,480 --> 00:23:48,650
microservices are important right so

00:23:46,400 --> 00:23:52,430
this so this is the way that synchronous

00:23:48,650 --> 00:23:54,500
communication does right so if you so

00:23:52,430 --> 00:23:57,170
think about this all this data they are

00:23:54,500 --> 00:24:00,590
all independent data source so if I want

00:23:57,170 --> 00:24:02,600
to think of if I want to do a data I

00:24:00,590 --> 00:24:05,990
think between those two say they all

00:24:02,600 --> 00:24:08,600
have data inventory information so if I

00:24:05,990 --> 00:24:11,090
need to automate if I need to update all

00:24:08,600 --> 00:24:13,970
this I need to make two API cost to make

00:24:11,090 --> 00:24:16,330
it sink right and the way that to set up

00:24:13,970 --> 00:24:19,450
contracts in

00:24:16,330 --> 00:24:21,789
api's or synchronous call is I can do it

00:24:19,450 --> 00:24:23,679
with open that guys the Swagger's stuff

00:24:21,789 --> 00:24:25,480
I just talked about right so you can do

00:24:23,679 --> 00:24:27,789
that and then all this call can be

00:24:25,480 --> 00:24:29,950
monitored and managed to API management

00:24:27,789 --> 00:24:32,019
toolings and stuff like that and then

00:24:29,950 --> 00:24:33,850
when you talk about transactions right

00:24:32,019 --> 00:24:36,070
transactions are super important because

00:24:33,850 --> 00:24:37,720
before we have XA transactions in all

00:24:36,070 --> 00:24:40,000
those transactions but now with

00:24:37,720 --> 00:24:42,460
distributed environments we don't do we

00:24:40,000 --> 00:24:44,769
want to avoid transactions but sometimes

00:24:42,460 --> 00:24:47,500
is not voidable right so what do we do

00:24:44,769 --> 00:24:50,440
well there's a patterns where we can

00:24:47,500 --> 00:24:54,960
improvements for saga so the way thus is

00:24:50,440 --> 00:24:59,169
you can do like compensations I have a

00:24:54,960 --> 00:25:00,700
slide that shows you later on that shows

00:24:59,169 --> 00:25:02,710
you you know because it has every

00:25:00,700 --> 00:25:05,350
services would have a compensation and

00:25:02,710 --> 00:25:07,269
then if something goes wrong it's going

00:25:05,350 --> 00:25:09,519
to call that compensation basically is

00:25:07,269 --> 00:25:11,139
that you fruit if you're taking a

00:25:09,519 --> 00:25:13,090
thousand dollars out the compensation

00:25:11,139 --> 00:25:16,149
would say add a thousand dollars back

00:25:13,090 --> 00:25:17,769
right that kind of thing so if this

00:25:16,149 --> 00:25:19,480
service is calling service to service

00:25:17,769 --> 00:25:21,429
through Scoville seven three and then

00:25:19,480 --> 00:25:23,230
something is wrong with service for its

00:25:21,429 --> 00:25:25,630
going to come back into service three

00:25:23,230 --> 00:25:27,250
run your compensation and then it's

00:25:25,630 --> 00:25:30,000
going to come back and tell service one

00:25:27,250 --> 00:25:32,280
says run your compensation

00:25:30,000 --> 00:25:34,020
and then the service one will they run

00:25:32,280 --> 00:25:35,820
it like that so that's the stock pattern

00:25:34,020 --> 00:25:38,670
where you can do that's how you roll

00:25:35,820 --> 00:25:41,940
back a transaction right so basically

00:25:38,670 --> 00:25:43,830
that's what you have so with a

00:25:41,940 --> 00:25:46,620
synchronous call you'd kind of do that

00:25:43,830 --> 00:25:49,080
but in a distributed world making

00:25:46,620 --> 00:25:51,060
everything synchronous maybe it's not a

00:25:49,080 --> 00:25:53,850
good idea because it's a lot of time

00:25:51,060 --> 00:25:55,980
waiting right and because everything is

00:25:53,850 --> 00:25:58,080
cowboy condition there's many better way

00:25:55,980 --> 00:25:59,670
of doing things I'm pretty sure so that

00:25:58,080 --> 00:26:02,610
because that's why event-driven

00:25:59,670 --> 00:26:07,260
architecture have become so popular in

00:26:02,610 --> 00:26:09,510
the distributed world so instead of you

00:26:07,260 --> 00:26:11,760
know data coming in as a single request

00:26:09,510 --> 00:26:13,980
or you still have those commands type

00:26:11,760 --> 00:26:17,250
office like request and response coming

00:26:13,980 --> 00:26:19,770
in but then you can have states of

00:26:17,250 --> 00:26:22,020
streams streams of states coming in as

00:26:19,770 --> 00:26:24,240
well from those IOT devices and then you

00:26:22,020 --> 00:26:26,309
can collect them in the buffer and in

00:26:24,240 --> 00:26:29,099
the buffer and then send it through your

00:26:26,309 --> 00:26:31,799
and that is instead of creating this

00:26:29,099 --> 00:26:32,489
like service mesh compact compacting one

00:26:31,799 --> 00:26:35,999
to the other

00:26:32,489 --> 00:26:38,700
everything will be sent into this this

00:26:35,999 --> 00:26:40,649
centralized store or dispatch of your

00:26:38,700 --> 00:26:42,479
events well then people will listen to

00:26:40,649 --> 00:26:44,279
your events and if they want to hear

00:26:42,479 --> 00:26:46,349
events they will react prop them up on

00:26:44,279 --> 00:26:48,629
your events so you are creating a more

00:26:46,349 --> 00:26:51,629
reactive system right so that's kind of

00:26:48,629 --> 00:26:55,379
how you do it and and then that's so in

00:26:51,629 --> 00:26:57,509
the front you have a buffer buffering

00:26:55,379 --> 00:26:59,849
place where you can store your vents

00:26:57,509 --> 00:27:01,649
coming in and then in your bunting

00:26:59,849 --> 00:27:04,889
context right you would have something

00:27:01,649 --> 00:27:06,330
that's there and just and to have that

00:27:04,889 --> 00:27:07,859
contra you know how contracts very

00:27:06,330 --> 00:27:12,330
important between systems right

00:27:07,859 --> 00:27:15,149
so for api's it's for for restful serve

00:27:12,330 --> 00:27:16,649
for synchronous services or synchronous

00:27:15,149 --> 00:27:19,700
call it's the API start setting the

00:27:16,649 --> 00:27:22,400
contracts but for

00:27:19,700 --> 00:27:24,470
for a synchronous cost is the data is

00:27:22,400 --> 00:27:27,860
your contract the data is your contract

00:27:24,470 --> 00:27:29,930
you set you you tell the next person

00:27:27,860 --> 00:27:33,560
that this is our contract and this will

00:27:29,930 --> 00:27:35,150
be it so there's no I think there they

00:27:33,560 --> 00:27:37,180
are works and their community they're

00:27:35,150 --> 00:27:39,650
working on creating a synchronous API

00:27:37,180 --> 00:27:41,900
but I haven't really seen a lot of

00:27:39,650 --> 00:27:43,370
effort on that yet I've seen some people

00:27:41,900 --> 00:27:46,490
were doing it but I haven't seen the

00:27:43,370 --> 00:27:48,800
really strong community I think in a

00:27:46,490 --> 00:27:51,200
couple of months they will be one that

00:27:48,800 --> 00:27:53,000
would be more dominating market and that

00:27:51,200 --> 00:27:55,490
would be your synchronous API calls but

00:27:53,000 --> 00:27:57,710
now all I see right now with people how

00:27:55,490 --> 00:27:59,620
people do it is they have the data as

00:27:57,710 --> 00:28:03,010
the contract

00:27:59,620 --> 00:28:06,669
and then we have transactions so how do

00:28:03,010 --> 00:28:10,630
we do transactions in a in the event

00:28:06,669 --> 00:28:14,130
driven for in a cognitive world is that

00:28:10,630 --> 00:28:16,659
people to event sourcing so instead of

00:28:14,130 --> 00:28:18,880
like this real-time transaction rollback

00:28:16,659 --> 00:28:20,799
we do eventually rollback we do

00:28:18,880 --> 00:28:23,440
eventually consistency of the data right

00:28:20,799 --> 00:28:26,320
so when when people puts in there they

00:28:23,440 --> 00:28:28,870
would people this will listen to the

00:28:26,320 --> 00:28:31,150
state from this person and then updating

00:28:28,870 --> 00:28:35,950
it if something goes wrong they would

00:28:31,150 --> 00:28:37,360
add another say instead of - hundred and

00:28:35,950 --> 00:28:42,220
then take out that - hundred they would

00:28:37,360 --> 00:28:46,390
just say 100 you know - hundred and then

00:28:42,220 --> 00:28:48,580
+ 100 just to balance their on the image

00:28:46,390 --> 00:28:50,320
source basically you have a store where

00:28:48,580 --> 00:28:52,330
you kind of stores all the space so

00:28:50,320 --> 00:28:54,940
instead of canceling the states you add

00:28:52,330 --> 00:28:56,380
a compensation on top of states so it's

00:28:54,940 --> 00:28:58,470
very similar to stock up but it's in

00:28:56,380 --> 00:29:00,970
it's in a way of storing storing things

00:28:58,470 --> 00:29:04,779
right and then the other way of

00:29:00,970 --> 00:29:06,980
synchronizing your data is change data

00:29:04,779 --> 00:29:09,730
capture right so

00:29:06,980 --> 00:29:12,769
the way that they do it so instead of

00:29:09,730 --> 00:29:14,779
you know this services calls every

00:29:12,769 --> 00:29:18,590
single microservices and synchronized

00:29:14,779 --> 00:29:22,460
install no this one we'll any changes to

00:29:18,590 --> 00:29:26,149
any changes to this so this data well

00:29:22,460 --> 00:29:28,610
then we'll have a mechanism listen to

00:29:26,149 --> 00:29:30,950
all the changes from this data and then

00:29:28,610 --> 00:29:33,440
the people that's issued interested

00:29:30,950 --> 00:29:34,820
about this data I was changed in the

00:29:33,440 --> 00:29:37,639
database well listen to that and pick it

00:29:34,820 --> 00:29:39,740
up and then update it they're out there

00:29:37,639 --> 00:29:42,799
that they're they data for inside their

00:29:39,740 --> 00:29:44,330
data store so that's kind of what people

00:29:42,799 --> 00:29:47,000
are doing in I think they'd have

00:29:44,330 --> 00:29:49,639
synchronizes recognized world where they

00:29:47,000 --> 00:29:54,049
do to change data capture in the event

00:29:49,639 --> 00:29:55,820
Journal world and then also the all good

00:29:54,049 --> 00:29:58,010
all the inventor of architecture the

00:29:55,820 --> 00:30:00,750
thing is to share your states right the

00:29:58,010 --> 00:30:04,260
states is immutable and

00:30:00,750 --> 00:30:06,720
so is the person does not know where

00:30:04,260 --> 00:30:08,370
where their information is going out -

00:30:06,720 --> 00:30:09,990
he doesn't know who was listening to his

00:30:08,370 --> 00:30:12,330
dates all he needs to do is okay I'm

00:30:09,990 --> 00:30:14,460
giving up my space anybody wants to do

00:30:12,330 --> 00:30:17,460
my space will get my state and they can

00:30:14,460 --> 00:30:20,130
we get on top of that so that is the

00:30:17,460 --> 00:30:22,260
that's how they do that on the that's

00:30:20,130 --> 00:30:25,440
how we do it in a cloud native right so

00:30:22,260 --> 00:30:26,820
two things we can do the synchronous way

00:30:25,440 --> 00:30:28,890
and in this way

00:30:26,820 --> 00:30:33,260
right so different ways of implementing

00:30:28,890 --> 00:30:33,260
it depending on how you want to do it

00:30:36,730 --> 00:30:42,070
so this is how kind of this is one of

00:30:39,110 --> 00:30:45,380
the top topologies that we can do so

00:30:42,070 --> 00:30:49,730
normally we have did we connect database

00:30:45,380 --> 00:30:51,140
with I a technology called the Museum I

00:30:49,730 --> 00:30:53,260
don't know if you heard about the vedyam

00:30:51,140 --> 00:30:57,490
but we call it Kafka come that you read

00:30:53,260 --> 00:31:00,289
so what you do is you write a code that

00:30:57,490 --> 00:31:02,059
grabs all the tables that you wanted to

00:31:00,289 --> 00:31:03,890
listen to right and you can kind of like

00:31:02,059 --> 00:31:06,110
do a filter like I want to only want to

00:31:03,890 --> 00:31:09,470
listen to it's like super secret stuff

00:31:06,110 --> 00:31:12,529
and then listen to all the changes and

00:31:09,470 --> 00:31:14,360
this code will then detect all the so

00:31:12,529 --> 00:31:16,340
basically it's going to your database

00:31:14,360 --> 00:31:18,710
lock you know how they whenever you do a

00:31:16,340 --> 00:31:19,580
select delete it smile read it's further

00:31:18,710 --> 00:31:22,250
read from that long

00:31:19,580 --> 00:31:23,750
and it's going to write it into Kafka so

00:31:22,250 --> 00:31:27,950
we have a tough guy in the middle and

00:31:23,750 --> 00:31:29,570
then you have another similar for

00:31:27,950 --> 00:31:31,549
you another another database or another

00:31:29,570 --> 00:31:34,440
system basically that's how you do a

00:31:31,549 --> 00:31:37,690
change to your capture right

00:31:34,440 --> 00:31:41,139
all right so that's kind of like a

00:31:37,690 --> 00:31:45,190
summary of the HR integration but that's

00:31:41,139 --> 00:31:46,659
only the first top layer of off my top

00:31:45,190 --> 00:31:47,799
and it's kind of it I know it's gonna

00:31:46,659 --> 00:31:49,479
take a lot of time but I think you

00:31:47,799 --> 00:31:52,210
should spend more time on developing it

00:31:49,479 --> 00:31:54,039
because the rest of the content the rest

00:31:52,210 --> 00:31:55,830
of the stuff are built for you they're

00:31:54,039 --> 00:31:58,960
the tools that you use you want to use

00:31:55,830 --> 00:32:01,049
in order to achieve all that greatness

00:31:58,960 --> 00:32:03,609
of building that architecture right so

00:32:01,049 --> 00:32:06,129
for the continual crisis of

00:32:03,609 --> 00:32:08,649
orchestration platform which is open

00:32:06,129 --> 00:32:10,809
ship or kubernetes I'm referring to the

00:32:08,649 --> 00:32:12,429
reason why it exists is because now we

00:32:10,809 --> 00:32:15,279
have all this beautiful micro-services

00:32:12,429 --> 00:32:17,619
life flying around everywhere it creates

00:32:15,279 --> 00:32:20,739
big headaches for your office person

00:32:17,619 --> 00:32:24,279
because instead of having them to you

00:32:20,739 --> 00:32:26,169
know managing just 10 big application

00:32:24,279 --> 00:32:27,940
server now they have to manage like

00:32:26,169 --> 00:32:31,839
thousand different smaller micro

00:32:27,940 --> 00:32:34,330
services so basically what the

00:32:31,839 --> 00:32:36,969
kubernetes and open shipped us it helps

00:32:34,330 --> 00:32:39,369
you to reign in your container helps you

00:32:36,969 --> 00:32:41,649
to manage your containers so so your

00:32:39,369 --> 00:32:44,589
macro services don't go everywhere so

00:32:41,649 --> 00:32:48,279
basically you can do low balances right

00:32:44,589 --> 00:32:50,169
so any services where basically service

00:32:48,279 --> 00:32:52,570
discovery right so it kind of lets

00:32:50,169 --> 00:32:54,759
anybody about wants this little micro

00:32:52,570 --> 00:32:57,759
services right here

00:32:54,759 --> 00:32:59,559
he created kubernetes or OpenShift well

00:32:57,759 --> 00:33:00,970
then tell okay you're coming in here and

00:32:59,559 --> 00:33:02,590
then you're getting it here so it helps

00:33:00,970 --> 00:33:04,269
you with the discovery and because of

00:33:02,590 --> 00:33:06,070
the discovery helps you with all the

00:33:04,269 --> 00:33:08,499
load balancing because you can create

00:33:06,070 --> 00:33:10,570
different Microsoft scale your micro

00:33:08,499 --> 00:33:12,909
services stuff and then it does all the

00:33:10,570 --> 00:33:16,119
load balancing for you and you can do

00:33:12,909 --> 00:33:17,320
that with the scaling because it the

00:33:16,119 --> 00:33:18,519
ownership will control your micro

00:33:17,320 --> 00:33:21,009
services and they'll replicate it for

00:33:18,519 --> 00:33:23,740
you and then you can also the biggest

00:33:21,009 --> 00:33:26,830
big problem with all this container and

00:33:23,740 --> 00:33:29,200
this micro services thing I have config

00:33:26,830 --> 00:33:32,559
for my production I think for my testing

00:33:29,200 --> 00:33:33,789
I think for my new IT environments or

00:33:32,559 --> 00:33:35,320
all they have they all have different

00:33:33,789 --> 00:33:37,840
configurations they all have different

00:33:35,320 --> 00:33:40,330
secrets passwords okay you don't write

00:33:37,840 --> 00:33:41,980
your secret your passwords in the config

00:33:40,330 --> 00:33:44,080
map right that's totally wrong for doing

00:33:41,980 --> 00:33:45,759
that is you're like no because it's

00:33:44,080 --> 00:33:47,950
always you know people have that sensor

00:33:45,759 --> 00:33:50,470
so you have to find a way to secretly

00:33:47,950 --> 00:33:52,029
hide your ID and password for you know

00:33:50,470 --> 00:33:54,580
entering your database and stuff like

00:33:52,029 --> 00:33:57,240
that so there needs to way of you know

00:33:54,580 --> 00:34:00,510
managing all this and then you know

00:33:57,240 --> 00:34:02,399
I have all this container but what is in

00:34:00,510 --> 00:34:04,020
the container it's the image that you

00:34:02,399 --> 00:34:06,240
need to run right that where's the image

00:34:04,020 --> 00:34:07,679
so you need create a place where you can

00:34:06,240 --> 00:34:09,389
find all the image and put it pulling it

00:34:07,679 --> 00:34:13,109
down so it has the registry to store all

00:34:09,389 --> 00:34:15,179
your images monitoring help you to see

00:34:13,109 --> 00:34:18,839
what's going down your platform so

00:34:15,179 --> 00:34:22,080
basically that platform helps you to

00:34:18,839 --> 00:34:26,280
manage all this you know crazy flying

00:34:22,080 --> 00:34:28,290
around containers and that's what and

00:34:26,280 --> 00:34:29,760
also collects all the locks so basically

00:34:28,290 --> 00:34:33,929
that that's what it does helps you

00:34:29,760 --> 00:34:37,139
manage all your all your containers but

00:34:33,929 --> 00:34:41,280
but that's not only that doing cloud

00:34:37,139 --> 00:34:43,560
native or container native system the

00:34:41,280 --> 00:34:45,179
first thing comes into mind is whether

00:34:43,560 --> 00:34:47,250
the micro service is doing it right is

00:34:45,179 --> 00:34:49,050
automations because there's a lot more

00:34:47,250 --> 00:34:53,970
you need to do so you need to do a lot

00:34:49,050 --> 00:34:57,330
more automation stew so to do that now

00:34:53,970 --> 00:35:00,750
we have a operator anybody heard about

00:34:57,330 --> 00:35:04,320
crater pens so the operator happens

00:35:00,750 --> 00:35:05,910
helps you to actually it will spin out

00:35:04,320 --> 00:35:08,609
go operators so this operator what this

00:35:05,910 --> 00:35:10,670
operator would do is that it would help

00:35:08,609 --> 00:35:12,860
you to manage your application lifecycle

00:35:10,670 --> 00:35:15,710
right so

00:35:12,860 --> 00:35:18,140
this when you have this operator spin up

00:35:15,710 --> 00:35:20,750
it's gonna see okay so now what do we

00:35:18,140 --> 00:35:22,760
have so then you have to define okay

00:35:20,750 --> 00:35:24,530
this is the services I want to stand up

00:35:22,760 --> 00:35:26,600
or this is the image that once then

00:35:24,530 --> 00:35:28,190
happen and it's going to this it's going

00:35:26,600 --> 00:35:29,480
to go take a look at all the things you

00:35:28,190 --> 00:35:31,700
have configured in your in your

00:35:29,480 --> 00:35:34,520
application in your openshift system and

00:35:31,700 --> 00:35:37,160
then it's going to go off and then see

00:35:34,520 --> 00:35:39,500
and then create all the services and

00:35:37,160 --> 00:35:41,960
part and route that's related to these

00:35:39,500 --> 00:35:45,800
particular applications and if you make

00:35:41,960 --> 00:35:47,870
any changes or anything to the things

00:35:45,800 --> 00:35:50,030
that you have registered in your system

00:35:47,870 --> 00:35:52,310
the operator will know and then it's

00:35:50,030 --> 00:35:55,010
going to update or patch or do whatever

00:35:52,310 --> 00:35:58,940
or delete your theory that it's going to

00:35:55,010 --> 00:36:00,710
do that so it's controlling the life

00:35:58,940 --> 00:36:03,470
cycle of your services that's making

00:36:00,710 --> 00:36:04,790
yours so having that we will make your

00:36:03,470 --> 00:36:06,680
things a lot easier because it's

00:36:04,790 --> 00:36:07,780
managing your application for you

00:36:06,680 --> 00:36:10,630
importance of it

00:36:07,780 --> 00:36:15,600
but other than the whole application

00:36:10,630 --> 00:36:18,130
management so these are just some of the

00:36:15,600 --> 00:36:20,110
CR these I don't want to go into deep

00:36:18,130 --> 00:36:22,390
details so basically you know what open

00:36:20,110 --> 00:36:24,400
ship is right it's a big server and it's

00:36:22,390 --> 00:36:26,800
basically the thing API server so

00:36:24,400 --> 00:36:28,450
basically how you wanted to ask Cooper

00:36:26,800 --> 00:36:31,570
Nettie's open ship to move is you call

00:36:28,450 --> 00:36:33,720
this api's right and to actually use

00:36:31,570 --> 00:36:36,100
this API so you have to define a

00:36:33,720 --> 00:36:38,050
definition so and so that's why the

00:36:36,100 --> 00:36:41,890
developers in kubernetes efficient they

00:36:38,050 --> 00:36:44,590
would define all this all this CR DS and

00:36:41,890 --> 00:36:45,940
then when they and when you call this TR

00:36:44,590 --> 00:36:48,130
these they would go off off and then

00:36:45,940 --> 00:36:50,080
implement all the you know what you need

00:36:48,130 --> 00:36:51,720
to do with all this configure all this

00:36:50,080 --> 00:36:54,130
definitions and then go off and create

00:36:51,720 --> 00:36:55,960
create the resource against that you

00:36:54,130 --> 00:36:58,540
know things like that so that's what you

00:36:55,960 --> 00:37:00,100
do so for for operators you need to

00:36:58,540 --> 00:37:01,290
define all this and then we'll split up

00:37:00,100 --> 00:37:05,040
all that for you

00:37:01,290 --> 00:37:08,220
so the other thing for automation is

00:37:05,040 --> 00:37:11,460
pipelines pipelines are Supreme Court so

00:37:08,220 --> 00:37:15,660
these are just managing all your life

00:37:11,460 --> 00:37:19,080
cycles but this is picking it up going

00:37:15,660 --> 00:37:21,660
through a process of building it letting

00:37:19,080 --> 00:37:24,060
you see if it works and then prep and

00:37:21,660 --> 00:37:27,420
then promoting into production today I

00:37:24,060 --> 00:37:30,120
think we're still figuring things out

00:37:27,420 --> 00:37:33,300
because I think these are doing a lot of

00:37:30,120 --> 00:37:35,820
overlapping stuff so I think there there

00:37:33,300 --> 00:37:37,380
will be an effort of people seeing

00:37:35,820 --> 00:37:38,820
what's going on here and then they will

00:37:37,380 --> 00:37:40,830
make few things work together maybe I

00:37:38,820 --> 00:37:42,240
can put a pipeline into my into my

00:37:40,830 --> 00:37:44,730
operators and all my operator will do

00:37:42,240 --> 00:37:46,500
that or there's a way for me to fill in

00:37:44,730 --> 00:37:49,950
my operators into part of the pipelines

00:37:46,500 --> 00:37:53,400
I'm not sure but I think that's how the

00:37:49,950 --> 00:37:54,690
the next the next phase of technology

00:37:53,400 --> 00:37:56,220
would go through because I think we are

00:37:54,690 --> 00:37:58,740
still figuring out in the kinetic world

00:37:56,220 --> 00:38:00,450
so that's why the people are no question

00:37:58,740 --> 00:38:01,980
they have decided to create these

00:38:00,450 --> 00:38:03,720
operators and that's how they manage the

00:38:01,980 --> 00:38:04,800
lifecycle but then you still have people

00:38:03,720 --> 00:38:08,490
that wants to go through the traditional

00:38:04,800 --> 00:38:10,650
CICE pipeline right so I think in a way

00:38:08,490 --> 00:38:12,840
that we're still trying to see how those

00:38:10,650 --> 00:38:13,619
two things work together my question to

00:38:12,840 --> 00:38:15,779
the engineers

00:38:13,619 --> 00:38:17,910
that's how you know how do we make the

00:38:15,779 --> 00:38:22,019
best advantage of you know this is easy

00:38:17,910 --> 00:38:22,980
for me to do my life cycle but I need to

00:38:22,019 --> 00:38:24,749
move this around into different

00:38:22,980 --> 00:38:26,309
environments so how do I do that

00:38:24,749 --> 00:38:29,009
so can I embed it operator into my

00:38:26,309 --> 00:38:31,410
pipeline things like that so that's kind

00:38:29,009 --> 00:38:32,789
of what we have and I have Jenkins in

00:38:31,410 --> 00:38:36,210
there for the pipeline but there's also

00:38:32,789 --> 00:38:38,309
another project kicking off by with

00:38:36,210 --> 00:38:41,999
redheads called Tecton so basically what

00:38:38,309 --> 00:38:44,220
Tecton is is a smaller way of allowing

00:38:41,999 --> 00:38:48,119
to allow you to build a application a

00:38:44,220 --> 00:38:50,970
lot faster it doesn't have people always

00:38:48,119 --> 00:38:53,609
associate tactile with K native but you

00:38:50,970 --> 00:38:54,720
actually don't need can ativ to spin up

00:38:53,609 --> 00:38:59,430
fact Allen's basically you're just

00:38:54,720 --> 00:38:59,900
defining your pipeline in a in a yellow

00:38:59,430 --> 00:39:02,279
file

00:38:59,900 --> 00:39:04,380
similar to what you normally do in

00:39:02,279 --> 00:39:06,390
OpenShift and then I'll press shift for

00:39:04,380 --> 00:39:09,240
go off and kick off a pipeline for you

00:39:06,390 --> 00:39:10,560
and there are efforts in Jenkins where

00:39:09,240 --> 00:39:12,600
they're gonna build that with with

00:39:10,560 --> 00:39:14,750
tacked on so Jake and also with Tecton

00:39:12,600 --> 00:39:21,000
but they're still doing that right now

00:39:14,750 --> 00:39:25,260
okay so how long do we have

00:39:21,000 --> 00:39:29,280
we have like 10 minutes I'm only halfway

00:39:25,260 --> 00:39:34,349
there anyway so this is the next layer

00:39:29,280 --> 00:39:36,000
which is the which is the summer smash

00:39:34,349 --> 00:39:37,740
play so the simple smash I think

00:39:36,000 --> 00:39:41,250
everybody knows about super smash right

00:39:37,740 --> 00:39:43,410
so why do we need service mesh why's FTO

00:39:41,250 --> 00:39:45,660
like people like it so much well the

00:39:43,410 --> 00:39:47,400
problem is remember this one like people

00:39:45,660 --> 00:39:49,290
talk about micro-services and they say

00:39:47,400 --> 00:39:50,670
yeah when I created all this

00:39:49,290 --> 00:39:51,540
microservice is great but people talk

00:39:50,670 --> 00:39:53,640
about how do we control this

00:39:51,540 --> 00:39:56,250
microservices you know if I want to talk

00:39:53,640 --> 00:39:57,030
to service A to B how do I know they

00:39:56,250 --> 00:39:58,650
have privilege

00:39:57,030 --> 00:40:00,690
how do I know they're okay to talk to

00:39:58,650 --> 00:40:03,569
each other right and what about the

00:40:00,690 --> 00:40:05,520
versioning when I have a version 2 of

00:40:03,569 --> 00:40:08,910
this micro-services version 3 of this

00:40:05,520 --> 00:40:11,040
microservices who should I talk to you

00:40:08,910 --> 00:40:15,510
know how do i you know promote all this

00:40:11,040 --> 00:40:18,690
crazy stuff that's a lot of things that

00:40:15,510 --> 00:40:20,880
we want to do so before the service

00:40:18,690 --> 00:40:22,710
national SEO came out normally what we

00:40:20,880 --> 00:40:24,720
do is we have separate libraries and we

00:40:22,710 --> 00:40:27,300
will event that into our micro services

00:40:24,720 --> 00:40:29,430
in our code and then we define you know

00:40:27,300 --> 00:40:31,500
the circuit breaking the routing and

00:40:29,430 --> 00:40:33,540
everything you know reading the the the

00:40:31,500 --> 00:40:36,930
headers and then we redirect them to

00:40:33,540 --> 00:40:38,850
different places I do that in my code

00:40:36,930 --> 00:40:40,320
but that's not the best way of doing it

00:40:38,850 --> 00:40:42,030
because I want to have a centralized

00:40:40,320 --> 00:40:44,130
place of control I want to control the

00:40:42,030 --> 00:40:46,350
timeout time I don't want this person

00:40:44,130 --> 00:40:48,960
decide it's 10 second and then you

00:40:46,350 --> 00:40:50,670
decided to 22nd right it's everywhere no

00:40:48,960 --> 00:40:52,500
I want to have a centralized place to

00:40:50,670 --> 00:40:56,820
control everything and then knowing

00:40:52,500 --> 00:41:00,050
where everything's goes right so that's

00:40:56,820 --> 00:41:03,210
why this sto thing came alone and

00:41:00,050 --> 00:41:05,400
instead of writing all the code all that

00:41:03,210 --> 00:41:08,010
stuff in the code we don't do that

00:41:05,400 --> 00:41:09,990
anymore right so it was spin up a

00:41:08,010 --> 00:41:12,480
sidecar proxy Android proxy

00:41:09,990 --> 00:41:17,400
so we're they were run right along next

00:41:12,480 --> 00:41:21,390
to your application right and then so a

00:41:17,400 --> 00:41:23,550
centralized place and a beautiful week

00:41:21,390 --> 00:41:26,160
okey Ally so it's the management layered

00:41:23,550 --> 00:41:28,950
off the whole of SEO and then you can

00:41:26,160 --> 00:41:30,480
configure your policy say this service

00:41:28,950 --> 00:41:32,910
to this service time now all this time

00:41:30,480 --> 00:41:35,820
out time is ten seconds and then you

00:41:32,910 --> 00:41:37,410
have like this services would be the

00:41:35,820 --> 00:41:40,190
redirection to these services and

00:41:37,410 --> 00:41:42,870
they'll do this services and the

00:41:40,190 --> 00:41:44,310
production you know deployment policy

00:41:42,870 --> 00:41:47,180
and all that they can configure it here

00:41:44,310 --> 00:41:50,180
and then all this will be

00:41:47,180 --> 00:41:51,680
we direct sent a sidecar and then

00:41:50,180 --> 00:41:55,180
psychic and decide if they want to call

00:41:51,680 --> 00:41:55,180
this services here and

00:41:56,250 --> 00:42:02,280
I want you to see this one here so

00:41:59,070 --> 00:42:05,460
remember the plans I have right so this

00:42:02,280 --> 00:42:07,800
is where this request comes in and this

00:42:05,460 --> 00:42:09,599
is your services know my people in

00:42:07,800 --> 00:42:10,980
abnormal vocation they would just go and

00:42:09,599 --> 00:42:12,990
then call these services and this

00:42:10,980 --> 00:42:16,530
services in here that's what you think

00:42:12,990 --> 00:42:18,840
you would do but after you apply the

00:42:16,530 --> 00:42:21,810
service match or the sto into your

00:42:18,840 --> 00:42:23,970
system this is where the traffic goes so

00:42:21,810 --> 00:42:26,400
instead of going here and then it's

00:42:23,970 --> 00:42:28,440
going down to the sto proxy right here

00:42:26,400 --> 00:42:30,480
and the proxy decided okay if I want to

00:42:28,440 --> 00:42:33,390
go this way so this one will go here and

00:42:30,480 --> 00:42:35,220
then execute your code coming down here

00:42:33,390 --> 00:42:38,820
and that your proxy decided where to go

00:42:35,220 --> 00:42:40,980
so basically this is your logical way

00:42:38,820 --> 00:42:43,570
off you know how things move but

00:42:40,980 --> 00:42:47,830
basically all the traffic is going from

00:42:43,570 --> 00:42:50,020
in this way so that is how the

00:42:47,830 --> 00:42:52,240
traffic flows from each other and the

00:42:50,020 --> 00:42:54,070
site card becomes this gateway who helps

00:42:52,240 --> 00:42:56,440
you to redirect and decide how the

00:42:54,070 --> 00:42:57,940
policies policies are applied on top of

00:42:56,440 --> 00:43:01,030
that

00:42:57,940 --> 00:43:03,309
right so these are the size higher they

00:43:01,030 --> 00:43:05,109
are the data plan of Sto and then you

00:43:03,309 --> 00:43:08,200
have control plan where they're feeding

00:43:05,109 --> 00:43:09,910
off they're feeding off the policies

00:43:08,200 --> 00:43:11,890
back to the sidecars and then giving

00:43:09,910 --> 00:43:13,809
back the metrics back to your control

00:43:11,890 --> 00:43:15,280
plan and they're gonna send it to me yes

00:43:13,809 --> 00:43:17,049
and then you can do a profile used to

00:43:15,280 --> 00:43:20,770
find out to make pretty pictures and

00:43:17,049 --> 00:43:24,220
stuff like that so basically that's it I

00:43:20,770 --> 00:43:26,619
have a lot more slice but that's

00:43:24,220 --> 00:43:29,589
basically just to smash and then we have

00:43:26,619 --> 00:43:31,960
a clean it if I want to talk about a

00:43:29,589 --> 00:43:34,180
little bit like a native I don't want to

00:43:31,960 --> 00:43:35,470
talk about Canada build because I think

00:43:34,180 --> 00:43:37,329
people are changing stuff and we have

00:43:35,470 --> 00:43:41,940
text also I walk a little bit

00:43:37,329 --> 00:43:44,710
alternative then there's the the biggest

00:43:41,940 --> 00:43:46,270
thing about Canada is the way that you

00:43:44,710 --> 00:43:49,030
can thought they can optimize yours

00:43:46,270 --> 00:43:51,160
you're a resource right so when you know

00:43:49,030 --> 00:43:53,109
when we spin up a pot when it's still

00:43:51,160 --> 00:43:53,770
running is taking up cpus taking up

00:43:53,109 --> 00:43:55,569
memories

00:43:53,770 --> 00:43:57,910
we're gonna be best if there's no flow

00:43:55,569 --> 00:43:59,470
coming in I will just shut down and when

00:43:57,910 --> 00:44:02,049
I can flow comes back up I will just

00:43:59,470 --> 00:44:04,690
bring up again so guess what is the best

00:44:02,049 --> 00:44:05,380
architecture of doing this event driven

00:44:04,690 --> 00:44:08,200
right

00:44:05,380 --> 00:44:10,180
so basically creative is an event-driven

00:44:08,200 --> 00:44:13,630
architecture right so that's why you

00:44:10,180 --> 00:44:16,930
would have candidate venting where they

00:44:13,630 --> 00:44:18,819
have cloud events coming in in 2k native

00:44:16,930 --> 00:44:21,279
and they will wake up your services and

00:44:18,819 --> 00:44:23,950
then there's something called K native

00:44:21,279 --> 00:44:25,000
serving and the serving will then scale

00:44:23,950 --> 00:44:27,430
it up

00:44:25,000 --> 00:44:29,290
right and then when there's no more

00:44:27,430 --> 00:44:31,119
traffic's going in and serving you all

00:44:29,290 --> 00:44:32,440
say okay there's no most there's no

00:44:31,119 --> 00:44:34,450
women coming and I'm shutting down for

00:44:32,440 --> 00:44:36,790
myself down so basically there's two

00:44:34,450 --> 00:44:38,109
different places serving helps you to

00:44:36,790 --> 00:44:40,810
bring it up and down and then you have

00:44:38,109 --> 00:44:42,790
events to trigger it on and off right so

00:44:40,810 --> 00:44:46,109
basically that's the basic of serving

00:44:42,790 --> 00:44:47,410
and that kind of concludes my

00:44:46,109 --> 00:44:48,790
architecture today

00:44:47,410 --> 00:44:50,590
sorry I'll speed it up a little bit I'm

00:44:48,790 --> 00:44:53,260
a candidate but I can do another video

00:44:50,590 --> 00:44:54,760
on YouTube so I'm just a subscriber I

00:44:53,260 --> 00:44:56,470
subscribe to my youtube channel I can do

00:44:54,760 --> 00:44:58,150
a little bit more rocking it but I can

00:44:56,470 --> 00:45:00,400
do a demo on top of that but just

00:44:58,150 --> 00:45:03,190
remember today you went through all this

00:45:00,400 --> 00:45:04,780
right the platform what's going on in

00:45:03,190 --> 00:45:07,119
the penny that were in a cognitive world

00:45:04,780 --> 00:45:09,790
the networking the service mesh layer

00:45:07,119 --> 00:45:12,490
the canid the optimization of resources

00:45:09,790 --> 00:45:14,859
there and then this great big piece of

00:45:12,490 --> 00:45:16,810
how to peel your cognitive application

00:45:14,859 --> 00:45:19,420
with all these micro services and do all

00:45:16,810 --> 00:45:21,279
that and then synchronize data and

00:45:19,420 --> 00:45:23,529
how do you synchronize all this data and

00:45:21,279 --> 00:45:25,000
then the synchronous call and the

00:45:23,529 --> 00:45:29,260
synchronous call doing it differently

00:45:25,000 --> 00:45:33,539
right so yeah so thank you I have three

00:45:29,260 --> 00:45:33,539
more minutes for questions questions

00:45:34,360 --> 00:45:41,260
oh okay so uh there's tickets the party

00:45:38,680 --> 00:45:43,150
the tickets to the party is at the

00:45:41,260 --> 00:45:45,370
registration so don't forget to get them

00:45:43,150 --> 00:45:47,440
from the registration and they will be

00:45:45,370 --> 00:45:49,150
limited so don't forget to get it today

00:45:47,440 --> 00:45:50,920
and if you don't get it today I think

00:45:49,150 --> 00:45:52,510
they're holding some back tomorrow so

00:45:50,920 --> 00:45:56,070
you don't get it today try it out

00:45:52,510 --> 00:45:56,070

YouTube URL: https://www.youtube.com/watch?v=r__remREjVE


