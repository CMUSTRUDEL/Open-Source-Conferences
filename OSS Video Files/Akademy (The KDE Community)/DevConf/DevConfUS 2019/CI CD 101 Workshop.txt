Title: CI CD 101 Workshop
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speaker: Michael V Thanh

Continuous Integration and Continuous Delivery/Deployment (CI/CD) concepts are increasingly adopted by many technology organizations and teams. With a rapidly growing industry means rapidly growing teams and changing code - subsequently the industry has a growing need to increase velocity, collaboration, and quality of their codebases. CI/CD enables this, and more, as developer & operations teams break down unnecessary silos to gain deeper knowledge of how the entire pipeline flows from development to deployment.

In this workshop the participants will be introduced to the basic fundamentals of Continuous Integration and Continuous Delivery/Deployment. Participants will learn the core principles of CI/CD and have the opportunity to reinforce what they've learned in a hands on workshop featuring the CircleCI platform.

Presentation here: https://drive.google.com/open?id=1VQbs8DrNX0rqTHNwFmVzve49LNNiu1MuXs0Hu8Ppbk8
Repository here: https://github.com/mvxt/ci-cd-101-workshop
Captions: 
	00:00:02,570 --> 00:00:07,129
awesome well thank you everyone for

00:00:04,279 --> 00:00:11,090
being here this is the CI CD 101

00:00:07,129 --> 00:00:12,559
workshop I am in case you all have

00:00:11,090 --> 00:00:14,450
signed up previously a long time ago I

00:00:12,559 --> 00:00:16,939
am filling in for another representative

00:00:14,450 --> 00:00:18,649
a circle CI his name's angel he was not

00:00:16,939 --> 00:00:22,009
able to make it today so I am filling in

00:00:18,649 --> 00:00:23,899
in his place my name is Michael I am a

00:00:22,009 --> 00:00:25,970
solutions engineer with Circle C I

00:00:23,899 --> 00:00:28,669
basically it's my job to work on the

00:00:25,970 --> 00:00:30,680
pre-sales side of the sales process I

00:00:28,669 --> 00:00:33,200
help educate about CI CD as well as

00:00:30,680 --> 00:00:35,570
promote and discuss our product circle

00:00:33,200 --> 00:00:37,370
CI however I want to make it clear that

00:00:35,570 --> 00:00:39,800
although I am a representative of circle

00:00:37,370 --> 00:00:41,720
CI and I am using see a circle CI in

00:00:39,800 --> 00:00:43,880
this demo because that's obviously what

00:00:41,720 --> 00:00:46,040
I'm most familiar with this is not

00:00:43,880 --> 00:00:48,079
specifically a workshop to promote our

00:00:46,040 --> 00:00:52,070
product if that makes sense just so

00:00:48,079 --> 00:00:55,010
y'all know on the agenda today I want to

00:00:52,070 --> 00:00:56,750
discuss some CI CD basics as well as

00:00:55,010 --> 00:00:58,820
some common pitfalls in mistakes that

00:00:56,750 --> 00:01:00,890
people fall into when discussing CI CD

00:00:58,820 --> 00:01:02,540
then I'd like to open this up for a bit

00:01:00,890 --> 00:01:05,000
of a discussion I'd like to talk to all

00:01:02,540 --> 00:01:07,670
of you what you are doing today for your

00:01:05,000 --> 00:01:09,590
testing and deployment processes I'm

00:01:07,670 --> 00:01:10,880
going to discuss some common terms and

00:01:09,590 --> 00:01:13,550
concepts that you will find in common

00:01:10,880 --> 00:01:16,100
between all CI CD products tools and

00:01:13,550 --> 00:01:18,830
vendors out there and then as time

00:01:16,100 --> 00:01:20,120
allows we'll try to get through using

00:01:18,830 --> 00:01:21,950
circle CI and getting your first

00:01:20,120 --> 00:01:24,020
Greenville as much as possible so that

00:01:21,950 --> 00:01:25,460
you can get hands-on what it's like to

00:01:24,020 --> 00:01:28,040
put together one of these pipelines for

00:01:25,460 --> 00:01:29,750
a project and I've got a demo project

00:01:28,040 --> 00:01:31,400
ready for that so you don't have to put

00:01:29,750 --> 00:01:33,049
on your own project or anything you'll

00:01:31,400 --> 00:01:34,760
be able to clone this project and then

00:01:33,049 --> 00:01:36,960
finally we'll end with questions and

00:01:34,760 --> 00:01:39,270
next steps

00:01:36,960 --> 00:01:41,370
any questions or concerns before we get

00:01:39,270 --> 00:01:46,550
started

00:01:41,370 --> 00:01:49,200
cool and also just a really quick gauge

00:01:46,550 --> 00:01:54,240
how many of you are already familiar

00:01:49,200 --> 00:01:55,470
with CI CD to a certain degree okay so

00:01:54,240 --> 00:01:57,120
you are pretty familiar with it alright

00:01:55,470 --> 00:02:00,180
I won't go into too much detail on these

00:01:57,120 --> 00:02:02,460
beginning slides then so as you all know

00:02:00,180 --> 00:02:05,340
the IT industry and software in general

00:02:02,460 --> 00:02:07,260
is booming right tons of startups are

00:02:05,340 --> 00:02:09,030
popping up all over the place this this

00:02:07,260 --> 00:02:11,730
summer actually was a second year in a

00:02:09,030 --> 00:02:13,680
row that Y Combinator the people who run

00:02:11,730 --> 00:02:15,630
hacker news they just did a start-up

00:02:13,680 --> 00:02:17,220
school this summer or something like

00:02:15,630 --> 00:02:19,200
that and there's like some twenty four

00:02:17,220 --> 00:02:21,660
thousand startups that are participating

00:02:19,200 --> 00:02:23,190
in that thing so you know companies

00:02:21,660 --> 00:02:24,780
popping up all over the place and tons

00:02:23,190 --> 00:02:26,700
of companies big companies or

00:02:24,780 --> 00:02:29,460
corporations that you've all likely

00:02:26,700 --> 00:02:32,670
heard of they are all doing huge IT tech

00:02:29,460 --> 00:02:34,320
transformation etc and so what a rapidly

00:02:32,670 --> 00:02:37,080
growing industry means is that you've

00:02:34,320 --> 00:02:39,060
got rapidly growing teams and if you got

00:02:37,080 --> 00:02:42,870
rapidly growing teams you've also got

00:02:39,060 --> 00:02:45,450
rapidly changing code okay and this is

00:02:42,870 --> 00:02:47,310
in particular problematic because what

00:02:45,450 --> 00:02:49,560
happens is that with all of this can

00:02:47,310 --> 00:02:52,590
constantly change in code it gets harder

00:02:49,560 --> 00:02:54,150
to track it gets harder to maintain it

00:02:52,590 --> 00:02:55,800
gets harder to really merge in those

00:02:54,150 --> 00:02:57,450
changes and whatnot and you can

00:02:55,800 --> 00:02:59,250
introduce lots of problems and lots of

00:02:57,450 --> 00:03:00,600
hiccups in your development process and

00:02:59,250 --> 00:03:02,760
deployment process for any new

00:03:00,600 --> 00:03:05,010
applications you roll have and so the

00:03:02,760 --> 00:03:07,400
industry's response to this is something

00:03:05,010 --> 00:03:09,950
called CI CD

00:03:07,400 --> 00:03:11,810
ci is continuous integration and

00:03:09,950 --> 00:03:13,819
continuous integration is the constant

00:03:11,810 --> 00:03:15,680
integration of changing code into the

00:03:13,819 --> 00:03:17,840
main code base developers are making

00:03:15,680 --> 00:03:19,970
code changes often you run automated

00:03:17,840 --> 00:03:20,900
tests to validate those code changes and

00:03:19,970 --> 00:03:23,659
make sure that they didn't break

00:03:20,900 --> 00:03:25,340
anything and then only actual passing

00:03:23,659 --> 00:03:27,440
changes paint changes that passed all

00:03:25,340 --> 00:03:29,180
the tests are accepted and merged into

00:03:27,440 --> 00:03:30,920
the main code base and what this means

00:03:29,180 --> 00:03:33,230
is that you have a main stable branch

00:03:30,920 --> 00:03:35,690
that it always has the latest features

00:03:33,230 --> 00:03:37,610
and bug fixes and you can reasonably

00:03:35,690 --> 00:03:39,799
expect someone on your team to clone

00:03:37,610 --> 00:03:43,099
your main branch and it will be stable

00:03:39,799 --> 00:03:44,989
and not broken continuous delivery is

00:03:43,099 --> 00:03:47,090
along the same lines but on the delivery

00:03:44,989 --> 00:03:50,930
side of things you are constantly

00:03:47,090 --> 00:03:53,000
delivering that changed code deployments

00:03:50,930 --> 00:03:55,340
are automatically triggered after these

00:03:53,000 --> 00:03:57,170
tests are passed and then what this

00:03:55,340 --> 00:04:00,079
means for you is faster release cycles

00:03:57,170 --> 00:04:01,549
after you've tested these changes and

00:04:00,079 --> 00:04:02,780
then you verify that they're working you

00:04:01,549 --> 00:04:05,510
can immediately deploy your new

00:04:02,780 --> 00:04:07,220
application without any you know hiccups

00:04:05,510 --> 00:04:08,390
that you would typically take because

00:04:07,220 --> 00:04:09,680
all of the things that I'm talking about

00:04:08,390 --> 00:04:12,290
right here are things that people used

00:04:09,680 --> 00:04:13,669
to take weeks months to do right after

00:04:12,290 --> 00:04:15,829
you've deployed your applicator after

00:04:13,669 --> 00:04:17,690
you've pushed your changes to github you

00:04:15,829 --> 00:04:19,250
got this hill QA team that has to run

00:04:17,690 --> 00:04:21,320
through this giant suite of tests that

00:04:19,250 --> 00:04:23,210
they check off an Excel people are

00:04:21,320 --> 00:04:24,260
automating all that now and after

00:04:23,210 --> 00:04:26,150
running all those tests you've got a

00:04:24,260 --> 00:04:28,070
whole operations team that's responsible

00:04:26,150 --> 00:04:29,599
for spinning up infrastructure deploying

00:04:28,070 --> 00:04:31,520
the application testing things to make

00:04:29,599 --> 00:04:33,710
sure they work again all of that is

00:04:31,520 --> 00:04:36,590
being a collimated now and so with these

00:04:33,710 --> 00:04:38,990
more automated release cycles you can do

00:04:36,590 --> 00:04:41,300
more complex delivery so you can do

00:04:38,990 --> 00:04:44,570
Bluegreen deployments you can do canary

00:04:41,300 --> 00:04:47,210
deployments etc and then what this means

00:04:44,570 --> 00:04:49,039
for your teams is that by automating all

00:04:47,210 --> 00:04:53,260
this you can deliver consistently save

00:04:49,039 --> 00:04:56,100
time and reduce errors along the way

00:04:53,260 --> 00:04:59,110
see I see together culminates in

00:04:56,100 --> 00:05:01,030
essentially main principles which are

00:04:59,110 --> 00:05:03,070
number one fail fast if there is a

00:05:01,030 --> 00:05:05,110
problem you discover a sooner you can

00:05:03,070 --> 00:05:07,300
deal with it quicker you can easily find

00:05:05,110 --> 00:05:09,220
and fix these issues test them again and

00:05:07,300 --> 00:05:11,530
then run through these and then merge

00:05:09,220 --> 00:05:13,240
that stable code into your main branch

00:05:11,530 --> 00:05:15,760
because you're doing it all of this

00:05:13,240 --> 00:05:17,950
automatically and then after that you

00:05:15,760 --> 00:05:19,750
automatically deploy that latest code

00:05:17,950 --> 00:05:22,180
and with the latest changes and all of

00:05:19,750 --> 00:05:24,850
this culminates in delivering stable

00:05:22,180 --> 00:05:26,650
apps consistently and quickly which

00:05:24,850 --> 00:05:28,480
means more productivity for your team

00:05:26,650 --> 00:05:34,000
and ultimately more money for your

00:05:28,480 --> 00:05:35,200
company ideally that's the bulb so along

00:05:34,000 --> 00:05:36,850
those same lines there are some common

00:05:35,200 --> 00:05:38,890
pitfalls mistakes that people fall into

00:05:36,850 --> 00:05:40,390
when discussing CI CD right and the

00:05:38,890 --> 00:05:44,440
first one is they're believing that

00:05:40,390 --> 00:05:46,450
cheaper is better now I can understand

00:05:44,440 --> 00:05:48,310
why this would be a mindset that people

00:05:46,450 --> 00:05:50,230
fall into because ultimately what you're

00:05:48,310 --> 00:05:52,360
doing by implementing CI CD is by

00:05:50,230 --> 00:05:54,750
cutting costs right and those costs

00:05:52,360 --> 00:05:57,520
might be all you know I don't want to

00:05:54,750 --> 00:06:00,640
the mistakes in production in deployment

00:05:57,520 --> 00:06:02,950
can be very expensive and so CI CD is in

00:06:00,640 --> 00:06:05,860
a way meant to be helping reduce those

00:06:02,950 --> 00:06:07,540
costs however what that also ends up

00:06:05,860 --> 00:06:09,520
being translated to is teams like to

00:06:07,540 --> 00:06:12,130
consider with tools that are free for

00:06:09,520 --> 00:06:13,900
example Jenkins okay right now today you

00:06:12,130 --> 00:06:14,860
can download Jenkins for free and you

00:06:13,900 --> 00:06:16,390
can install it on your own

00:06:14,860 --> 00:06:19,900
infrastructure and then run your own CI

00:06:16,390 --> 00:06:20,800
CD pipeline however that's a little bit

00:06:19,900 --> 00:06:22,510
too short-sighted

00:06:20,800 --> 00:06:23,800
I think Jenkins is great Jenkins has

00:06:22,510 --> 00:06:25,660
been around for a long time and it's

00:06:23,800 --> 00:06:28,090
really a forefather to the CI CD

00:06:25,660 --> 00:06:29,650
movement in my opinion however the thing

00:06:28,090 --> 00:06:31,870
about Jenkins is that although it's open

00:06:29,650 --> 00:06:34,330
source and free you get to deal with and

00:06:31,870 --> 00:06:36,010
manage everything yourself okay you get

00:06:34,330 --> 00:06:38,050
to get your own infrastructure you get

00:06:36,010 --> 00:06:39,640
to install Jenkins yourself you get to

00:06:38,050 --> 00:06:41,320
manage all the plugins configure all the

00:06:39,640 --> 00:06:43,030
repositories configure the web posts

00:06:41,320 --> 00:06:44,560
configure the authentication etc you get

00:06:43,030 --> 00:06:46,120
to do all that yourself and whenever

00:06:44,560 --> 00:06:47,550
there are problems you also get to fix

00:06:46,120 --> 00:06:50,790
them yourself as well

00:06:47,550 --> 00:06:53,040
right and so cheaper is not necessarily

00:06:50,790 --> 00:06:55,500
better sometimes it's worth it to spend

00:06:53,040 --> 00:06:57,090
money and to use the SAS applications

00:06:55,500 --> 00:07:00,330
where everyone else is doing the heavy

00:06:57,090 --> 00:07:01,380
lifting and doing the crap work for you

00:07:00,330 --> 00:07:03,360
if that makes sense

00:07:01,380 --> 00:07:05,220
why minutes your own infrastructure if

00:07:03,360 --> 00:07:07,080
you don't need to this is also part of

00:07:05,220 --> 00:07:09,540
the same thinking behind why people are

00:07:07,080 --> 00:07:11,580
migrating over to cloud ok why would I

00:07:09,540 --> 00:07:13,800
want to deal with thousands of my own

00:07:11,580 --> 00:07:17,750
service when Amazon or Google can do

00:07:13,800 --> 00:07:17,750
that for me the same principles here

00:07:18,789 --> 00:07:24,440
second mistake people have is not having

00:07:20,720 --> 00:07:25,849
a budget along the same lines once

00:07:24,440 --> 00:07:28,280
you've kind of gotten over the hurdle

00:07:25,849 --> 00:07:29,960
really wanting everything to be free you

00:07:28,280 --> 00:07:31,940
then need to really set down a budget

00:07:29,960 --> 00:07:33,080
that you have for this project and

00:07:31,940 --> 00:07:34,880
really you should be doing this for

00:07:33,080 --> 00:07:37,160
every project you pick up you want to

00:07:34,880 --> 00:07:39,050
have a budget when you have a budget you

00:07:37,160 --> 00:07:42,229
can strictly define exactly how much

00:07:39,050 --> 00:07:44,330
money you're willing to spend and kind

00:07:42,229 --> 00:07:45,860
of will go over it later but if you have

00:07:44,330 --> 00:07:47,479
a budget then you can also start to

00:07:45,860 --> 00:07:49,940
assess the amount of value you can

00:07:47,479 --> 00:07:51,919
derive from picking up this tool okay no

00:07:49,940 --> 00:07:54,500
budget means you don't have value to

00:07:51,919 --> 00:07:56,210
find 4c icd that's like jumping into

00:07:54,500 --> 00:07:57,560
that's like jumping into doing something

00:07:56,210 --> 00:07:59,960
without really having an end goal in

00:07:57,560 --> 00:08:03,710
mind it might be fun but it's also a lot

00:07:59,960 --> 00:08:05,930
of wasted money in time and along

00:08:03,710 --> 00:08:07,400
similar lines yeah that's a little bit

00:08:05,930 --> 00:08:10,639
worse than not having a budget is not

00:08:07,400 --> 00:08:12,530
having c SED at all if you're not

00:08:10,639 --> 00:08:13,759
automating your tests and automating

00:08:12,530 --> 00:08:15,500
your deployments you're probably

00:08:13,759 --> 00:08:17,240
starting to fall behind at this point in

00:08:15,500 --> 00:08:19,069
the industry most of these software

00:08:17,240 --> 00:08:20,930
teams are delivering tons and tons of

00:08:19,069 --> 00:08:22,669
applications tons of changes and fixes

00:08:20,930 --> 00:08:25,550
to the code and I can tell you right now

00:08:22,669 --> 00:08:28,490
that they are not testing manually and

00:08:25,550 --> 00:08:30,680
they are not having big operations teams

00:08:28,490 --> 00:08:33,289
all devote a whole week or two weeks

00:08:30,680 --> 00:08:35,360
that just deploying this application

00:08:33,289 --> 00:08:37,039
everything happens automatically in

00:08:35,360 --> 00:08:38,990
pipelines now so that therefore

00:08:37,039 --> 00:08:40,520
developers and engineers can focus on

00:08:38,990 --> 00:08:43,640
the stuff that really matters

00:08:40,520 --> 00:08:45,920
ie site reliability actually engineering

00:08:43,640 --> 00:08:48,079
and develop applications in sites

00:08:45,920 --> 00:08:49,550
analytics etcetera the stuff that you

00:08:48,079 --> 00:08:51,800
can actually gain and derive

00:08:49,550 --> 00:08:54,709
intelligence and value from rather than

00:08:51,800 --> 00:08:57,100
the you know busy work of getting things

00:08:54,709 --> 00:08:57,100
up and running

00:08:57,480 --> 00:09:03,610
some more pitfalls a performative not

00:08:59,740 --> 00:09:05,769
having metrics again in order to really

00:09:03,610 --> 00:09:07,570
derive true value from picking up and

00:09:05,769 --> 00:09:10,209
adopting any kind of tool in your tool

00:09:07,570 --> 00:09:12,670
chain you have to have metrics to help

00:09:10,209 --> 00:09:14,470
you decide and figure out whether or not

00:09:12,670 --> 00:09:17,200
you're really gaining value from picking

00:09:14,470 --> 00:09:18,250
up this tool and different companies and

00:09:17,200 --> 00:09:21,130
different organizations will have

00:09:18,250 --> 00:09:23,200
different they'll have different metrics

00:09:21,130 --> 00:09:25,390
to determine how valuable a certain tool

00:09:23,200 --> 00:09:26,769
or certain paradigm is whatever it is

00:09:25,390 --> 00:09:28,810
for you you need to sit down with your

00:09:26,769 --> 00:09:31,540
team and figure it out it could be the

00:09:28,810 --> 00:09:33,940
number of releases per sprint or per

00:09:31,540 --> 00:09:36,459
cycle number of commits number of issues

00:09:33,940 --> 00:09:37,959
crossed off on 0 whatever it is you need

00:09:36,459 --> 00:09:40,149
to figure out what those metrics are and

00:09:37,959 --> 00:09:41,980
then compare those metrics before and

00:09:40,149 --> 00:09:43,990
after the adoption of new tools to

00:09:41,980 --> 00:09:46,120
really decide if adopting this new tool

00:09:43,990 --> 00:09:47,649
has improved your team's productivity

00:09:46,120 --> 00:09:49,899
and was worth the money is spent on it

00:09:47,649 --> 00:09:52,770
and then finally the last one is not

00:09:49,899 --> 00:09:54,420
having a plan of attack

00:09:52,770 --> 00:09:56,250
kind of like when you go into a new

00:09:54,420 --> 00:09:58,020
project you kind of have want to have an

00:09:56,250 --> 00:09:59,370
end goal in mind so that you can really

00:09:58,020 --> 00:10:01,050
say for sure whether or not you were

00:09:59,370 --> 00:10:04,440
successful along those same lines

00:10:01,050 --> 00:10:06,540
because see ICD is such a vast expansive

00:10:04,440 --> 00:10:08,160
thing you can automate practically

00:10:06,540 --> 00:10:09,810
everything in your tool treated by every

00:10:08,160 --> 00:10:11,910
single project that your company works

00:10:09,810 --> 00:10:14,220
on which could range from just a couple

00:10:11,910 --> 00:10:16,470
to several thousand right if you're

00:10:14,220 --> 00:10:19,080
picking up a new tool and in your chain

00:10:16,470 --> 00:10:20,880
then you want to really get the best

00:10:19,080 --> 00:10:22,050
bang for your buck and so what you're

00:10:20,880 --> 00:10:24,960
gonna want is you're gonna want to spend

00:10:22,050 --> 00:10:27,750
time automating the most valuable items

00:10:24,960 --> 00:10:30,180
first and not the least valuable items

00:10:27,750 --> 00:10:32,640
or tasks sometimes companies who enter

00:10:30,180 --> 00:10:34,140
the CI CD space and pick up new tools in

00:10:32,640 --> 00:10:35,460
their chain they don't really spend time

00:10:34,140 --> 00:10:36,900
thinking about this and what they end up

00:10:35,460 --> 00:10:38,610
doing is while they learn a lot about

00:10:36,900 --> 00:10:40,350
the tool and they end up automating some

00:10:38,610 --> 00:10:42,450
things they're not automating the most

00:10:40,350 --> 00:10:44,340
valuable things and that might have an

00:10:42,450 --> 00:10:47,490
effect on what their opinion is of the

00:10:44,340 --> 00:10:49,110
tool before they adopt it any questions

00:10:47,490 --> 00:10:51,560
or concerns about anything we've talked

00:10:49,110 --> 00:10:51,560
about thus far

00:10:52,800 --> 00:10:55,970
yeah in the back

00:11:01,130 --> 00:11:08,430
the best open source of CI solution

00:11:04,589 --> 00:11:10,079
that's a tough question it's the the

00:11:08,430 --> 00:11:11,730
word best is very subjective right

00:11:10,079 --> 00:11:14,550
because it really depends on what you're

00:11:11,730 --> 00:11:16,440
what you're after a lot of open sourcing

00:11:14,550 --> 00:11:18,480
solutions because they're open source

00:11:16,440 --> 00:11:20,519
what happens is that the logic or the

00:11:18,480 --> 00:11:22,920
tool the application itself is provided

00:11:20,519 --> 00:11:24,149
for free but then you get to manage the

00:11:22,920 --> 00:11:25,440
infrastructure and everything else

00:11:24,149 --> 00:11:27,389
surrounding it by yourself as I

00:11:25,440 --> 00:11:29,010
mentioned at the beginning as for

00:11:27,389 --> 00:11:31,800
whether as for which of the tools is

00:11:29,010 --> 00:11:34,019
best for that I'm not really I'm not

00:11:31,800 --> 00:11:35,490
really sure some open source tools that

00:11:34,019 --> 00:11:37,910
I've heard of are obviously number one

00:11:35,490 --> 00:11:40,260
Jenkins Jenkins is probably

00:11:37,910 --> 00:11:42,959
predominantly the winner in the open

00:11:40,260 --> 00:11:45,870
source CI CD space there are some

00:11:42,959 --> 00:11:47,550
probably less used tools I've heard of a

00:11:45,870 --> 00:11:50,639
concourse for example concourse yeah

00:11:47,550 --> 00:11:55,170
there's also go CD I believe those three

00:11:50,639 --> 00:11:58,500
are all open source and free I know

00:11:55,170 --> 00:12:01,260
Travis CI offers basically free usage

00:11:58,500 --> 00:12:02,790
for any open source projects but if you

00:12:01,260 --> 00:12:05,040
want to run for example builds on

00:12:02,790 --> 00:12:06,300
private projects or non open source

00:12:05,040 --> 00:12:07,740
tools on your own then you're gonna have

00:12:06,300 --> 00:12:12,269
to pay for that so I don't think they're

00:12:07,740 --> 00:12:13,740
technically considered open source yeah

00:12:12,269 --> 00:12:15,000
other than that it's it's hard for me to

00:12:13,740 --> 00:12:16,500
really give you a clear answer on this

00:12:15,000 --> 00:12:18,390
one because it depends on what you're

00:12:16,500 --> 00:12:20,850
looking for and I've only heard of three

00:12:18,390 --> 00:12:22,470
open source CI tools there are probably

00:12:20,850 --> 00:12:24,920
many others out there but I don't know

00:12:22,470 --> 00:12:24,920
about them

00:12:26,320 --> 00:12:29,640
any other questions

00:12:31,050 --> 00:12:36,040
okay

00:12:32,980 --> 00:12:37,300
so I'd like to just kind of get a little

00:12:36,040 --> 00:12:38,590
bit of information from all of you in

00:12:37,300 --> 00:12:40,090
the audience here I'd like to hear about

00:12:38,590 --> 00:12:42,340
what kinds of testing processes or

00:12:40,090 --> 00:12:43,960
deployment processes that you are

00:12:42,340 --> 00:12:45,960
currently doing today and whether or not

00:12:43,960 --> 00:12:48,490
you experience any pain points from them

00:12:45,960 --> 00:12:50,710
is any money but you anybody doing like

00:12:48,490 --> 00:12:52,780
I don't know playing web applications

00:12:50,710 --> 00:12:55,150
here for example job you might do okay

00:12:52,780 --> 00:12:58,960
got a couple got some web applications

00:12:55,150 --> 00:13:03,310
here any Java and you go okay Java and

00:12:58,960 --> 00:13:05,350
go no js' alright JavaScript JavaScript

00:13:03,310 --> 00:13:08,770
villains anybody experimenting with like

00:13:05,350 --> 00:13:10,180
a rust of mine a chance we have some

00:13:08,770 --> 00:13:11,530
people building rust projects in our

00:13:10,180 --> 00:13:14,230
platform that's actually really cool to

00:13:11,530 --> 00:13:16,630
see um it's a whole bunch of different

00:13:14,230 --> 00:13:18,430
projects out there but any pain points

00:13:16,630 --> 00:13:22,050
or struggles that you deal with in your

00:13:18,430 --> 00:13:22,050
processes for testing and deployment

00:13:23,880 --> 00:13:27,589
about running any tests

00:13:28,970 --> 00:13:34,410
so running running tests that depend on

00:13:31,890 --> 00:13:36,000
selenium all right interesting so so a

00:13:34,410 --> 00:13:39,030
lot of like our browser testing them or

00:13:36,000 --> 00:13:40,410
okay the browser testing specifically

00:13:39,030 --> 00:13:41,460
what kinds of what kinds of pain points

00:13:40,410 --> 00:13:45,330
are you experiencing around rouser

00:13:41,460 --> 00:13:48,890
testing existent see a test fail once

00:13:45,330 --> 00:13:48,890
even if laters

00:13:49,630 --> 00:13:53,199
okay inconsistencies and tests because

00:13:52,449 --> 00:13:55,030
of timeouts

00:13:53,199 --> 00:13:57,130
all right

00:13:55,030 --> 00:13:58,870
yeah that's that's a common one for sure

00:13:57,130 --> 00:14:00,310
another hard one is another hard one

00:13:58,870 --> 00:14:01,930
that I'll pitch in here is if you have

00:14:00,310 --> 00:14:04,450
like a micro-services application or

00:14:01,930 --> 00:14:06,220
something it can be really hard to get a

00:14:04,450 --> 00:14:08,020
good pipeline down for that because now

00:14:06,220 --> 00:14:09,280
you've got individual components within

00:14:08,020 --> 00:14:11,290
your application that you have to test

00:14:09,280 --> 00:14:13,060
individually and then of course you're

00:14:11,290 --> 00:14:15,430
gonna want to test one change to a

00:14:13,060 --> 00:14:17,650
component and how it affects the entire

00:14:15,430 --> 00:14:18,970
system right because just because your

00:14:17,650 --> 00:14:20,740
unit tests pass does not name your

00:14:18,970 --> 00:14:22,210
integration tests will or your

00:14:20,740 --> 00:14:26,140
end-to-end test well so that's another

00:14:22,210 --> 00:14:27,880
challenge people run into okay

00:14:26,140 --> 00:14:29,890
any other input here any other

00:14:27,880 --> 00:14:32,550
interesting things people are doing with

00:14:29,890 --> 00:14:32,550
their applications

00:14:34,990 --> 00:14:42,190
maybe make one of movies but wrong

00:14:39,350 --> 00:14:42,190
so by plane

00:14:42,970 --> 00:14:47,829
creature that is looking at all

00:14:45,320 --> 00:14:47,829
no way

00:14:49,770 --> 00:14:54,310
so

00:14:51,170 --> 00:14:57,150
how to Mars before and

00:14:54,310 --> 00:14:57,150
in follows

00:15:02,879 --> 00:15:05,839
once the hole

00:15:08,190 --> 00:15:15,090
that all is not very

00:15:10,600 --> 00:15:15,090
I say okay mmm

00:15:17,060 --> 00:15:23,150
so I guess some just too good so just to

00:15:21,800 --> 00:15:24,380
reiterate what you were saying so you've

00:15:23,150 --> 00:15:25,460
got basically you've got lots of

00:15:24,380 --> 00:15:27,800
different code changes that are

00:15:25,460 --> 00:15:29,630
happening and you merge that code to a

00:15:27,800 --> 00:15:37,300
stable branch but you're not ready to

00:15:29,630 --> 00:15:37,300
deploy necessarily I'm right okay

00:15:38,259 --> 00:15:44,370
FLORIST so

00:15:40,500 --> 00:15:46,910
we use the creature watches that was

00:15:44,370 --> 00:15:46,910
long though

00:15:48,450 --> 00:15:54,140
the chapati is not a punishment for sale

00:15:55,310 --> 00:15:58,850
that amount is

00:15:59,130 --> 00:16:05,440
and people of interest

00:16:00,520 --> 00:16:06,820
and okay gotcha um I mean it largely it

00:16:05,440 --> 00:16:08,380
largely depends on the company's

00:16:06,820 --> 00:16:10,270
policies and what you end up choosing

00:16:08,380 --> 00:16:12,610
for yourself but there's there are ways

00:16:10,270 --> 00:16:15,490
to kind of get together cohesive

00:16:12,610 --> 00:16:17,410
workflow or CICE pipeline for something

00:16:15,490 --> 00:16:18,880
like that for example as you mentioned

00:16:17,410 --> 00:16:20,589
like if you're working on a feature

00:16:18,880 --> 00:16:22,990
branch for example and it's not finished

00:16:20,589 --> 00:16:24,760
taking longer than expected etc then I

00:16:22,990 --> 00:16:27,130
don't think there's really a necessity

00:16:24,760 --> 00:16:29,920
to merge that in if it's not ready to be

00:16:27,130 --> 00:16:31,270
merged I think the idea of si sed here

00:16:29,920 --> 00:16:32,560
is to boost productivity and to help

00:16:31,270 --> 00:16:34,209
automate a lot of the testing and

00:16:32,560 --> 00:16:36,640
deployment right however that's not to

00:16:34,209 --> 00:16:38,440
say that you must always be merging in

00:16:36,640 --> 00:16:40,300
and must always be deploying at regular

00:16:38,440 --> 00:16:42,040
intervals I think that defeats the

00:16:40,300 --> 00:16:43,860
purpose of improving productivity for

00:16:42,040 --> 00:16:46,480
the sake of being consistent of

00:16:43,860 --> 00:16:48,190
consistent releases which may not

00:16:46,480 --> 00:16:49,690
necessarily be your team depending on

00:16:48,190 --> 00:16:51,720
what you're doing some companies are

00:16:49,690 --> 00:16:53,800
able to do this because no matter what

00:16:51,720 --> 00:16:55,300
they're always gonna have at least a

00:16:53,800 --> 00:16:56,920
couple bug fixes or a couple features

00:16:55,300 --> 00:16:58,779
they're delivering with every deployment

00:16:56,920 --> 00:17:00,160
but if your company is not like that if

00:16:58,779 --> 00:17:02,230
you're not pushing out that many changes

00:17:00,160 --> 00:17:05,020
that often it may not make sense to

00:17:02,230 --> 00:17:05,500
enforce a delivery for example every two

00:17:05,020 --> 00:17:08,260
weeks

00:17:05,500 --> 00:17:12,120
maybe it's erratic maybe it's a sporadic

00:17:08,260 --> 00:17:14,949
even I think the original intent of

00:17:12,120 --> 00:17:17,140
constant or consistent releases is to

00:17:14,949 --> 00:17:20,079
help increase productivity and deliver

00:17:17,140 --> 00:17:22,449
more stable code but if you feel like

00:17:20,079 --> 00:17:26,490
doing that is actually doing the

00:17:22,449 --> 00:17:26,490
opposite and obviously you don't need to

00:17:28,000 --> 00:17:35,049
alright I'll go ahead and move on so

00:17:32,700 --> 00:17:37,960
some common terms and concepts that you

00:17:35,049 --> 00:17:40,630
will find in all si sed tools if you

00:17:37,960 --> 00:17:43,900
will first is a pipeline or workflow

00:17:40,630 --> 00:17:45,850
circle see I actually uses both of these

00:17:43,900 --> 00:17:47,230
terms but you'll probably hear the terms

00:17:45,850 --> 00:17:47,740
workflow and pipeline in many other

00:17:47,230 --> 00:17:50,440
places

00:17:47,740 --> 00:17:52,090
I believe Azure DevOps uses the term

00:17:50,440 --> 00:17:53,260
pipeline or as their pipelines is

00:17:52,090 --> 00:17:56,710
actually a different thing isn't it

00:17:53,260 --> 00:17:58,659
nevermind I'm making things up so

00:17:56,710 --> 00:18:00,400
Jenkins uses pipelines I know that for

00:17:58,659 --> 00:18:02,559
sure workflow is what the circle CI

00:18:00,400 --> 00:18:04,539
calls it as but whatever it is it's

00:18:02,559 --> 00:18:07,030
basically a term indicating the

00:18:04,539 --> 00:18:09,909
overarching architecture of your CI CD

00:18:07,030 --> 00:18:11,799
process inside your pipeline or workflow

00:18:09,909 --> 00:18:14,890
you're gonna have individual jobs or

00:18:11,799 --> 00:18:17,289
tasks that are for doing one specific

00:18:14,890 --> 00:18:19,360
thing inside your pipeline or what flow

00:18:17,289 --> 00:18:21,640
this might be something like o run unit

00:18:19,360 --> 00:18:24,100
tests or run integration tests or

00:18:21,640 --> 00:18:28,240
generate documents or deployed AWS or

00:18:24,100 --> 00:18:31,270
GCP etc whatever the job or task is it's

00:18:28,240 --> 00:18:33,820
this one big atomic story if you will to

00:18:31,270 --> 00:18:35,860
accomplishing a goal inside your

00:18:33,820 --> 00:18:37,840
pipeline now the funny thing about the

00:18:35,860 --> 00:18:42,190
CI CD process here is that there's no

00:18:37,840 --> 00:18:45,970
specific hard and fast rules as to what

00:18:42,190 --> 00:18:49,120
a job must do and likewise if we go a

00:18:45,970 --> 00:18:51,789
layer deeper a job consists of

00:18:49,120 --> 00:18:53,860
individual steps or scripts or whatever

00:18:51,789 --> 00:18:56,340
commands you're running to achieve that

00:18:53,860 --> 00:18:59,799
goal right for example if you're running

00:18:56,340 --> 00:19:01,480
unit tests then individual steps inside

00:18:59,799 --> 00:19:03,429
your unit test job might be number one

00:19:01,480 --> 00:19:05,200
set up the environment number two set up

00:19:03,429 --> 00:19:06,809
the database migrate the database see

00:19:05,200 --> 00:19:08,429
the database then

00:19:06,809 --> 00:19:09,659
kick off the test suite and then do a

00:19:08,429 --> 00:19:11,940
whole this other stuff those are

00:19:09,659 --> 00:19:13,409
individual scripts or commands now as I

00:19:11,940 --> 00:19:15,419
was seeing before there are no hard and

00:19:13,409 --> 00:19:17,249
fast rules as to what you have to do and

00:19:15,419 --> 00:19:19,649
how you have to separate granularly and

00:19:17,249 --> 00:19:22,169
so you need to find what works best for

00:19:19,649 --> 00:19:25,440
your company and your team what I've

00:19:22,169 --> 00:19:27,389
found personally is that if you have

00:19:25,440 --> 00:19:28,759
more granularity if you separate

00:19:27,389 --> 00:19:31,919
individual things into individual

00:19:28,759 --> 00:19:34,379
scripts or steps it helps you debug

00:19:31,919 --> 00:19:36,029
things more easily if you jumbled

00:19:34,379 --> 00:19:37,710
together setting up the database and

00:19:36,029 --> 00:19:40,049
then seeding the database and then

00:19:37,710 --> 00:19:42,059
running the test suite all into a single

00:19:40,049 --> 00:19:44,100
step it might be a little bit hard to

00:19:42,059 --> 00:19:45,389
debug whereas if you separate them into

00:19:44,100 --> 00:19:47,970
different steps then you can tell

00:19:45,389 --> 00:19:49,499
exactly which that failed oh it's not

00:19:47,970 --> 00:19:51,779
that my tests fail this that I didn't

00:19:49,499 --> 00:19:54,749
set up a database correctly at cetera

00:19:51,779 --> 00:19:57,029
and so again it's just finding whatever

00:19:54,749 --> 00:19:58,379
works for your team and then another

00:19:57,029 --> 00:20:00,690
thing that you'll have to deal with in

00:19:58,379 --> 00:20:02,820
the ICD tools is the concept of Secrets

00:20:00,690 --> 00:20:04,980
tokens or keys these are essentially

00:20:02,820 --> 00:20:07,019
configuration parameters that are you

00:20:04,980 --> 00:20:08,519
don't want hard-coded anywhere and you

00:20:07,019 --> 00:20:10,679
don't want it just resting in your

00:20:08,519 --> 00:20:13,049
environment in a file on a hard disk

00:20:10,679 --> 00:20:14,970
right and so what you do is you abstract

00:20:13,049 --> 00:20:17,789
this configuration from the bill and

00:20:14,970 --> 00:20:20,460
it's only inserted at runtime every see

00:20:17,789 --> 00:20:22,049
ICD tool needs to have this concept in

00:20:20,460 --> 00:20:25,559
some degree otherwise it makes it

00:20:22,049 --> 00:20:26,879
inherently insecure all right and so

00:20:25,559 --> 00:20:29,450
those are some the common common

00:20:26,879 --> 00:20:32,039
concepts in terms that you will run into

00:20:29,450 --> 00:20:34,299
between all of the different various CI

00:20:32,039 --> 00:20:37,320
CD providers

00:20:34,299 --> 00:20:37,320
any questions here

00:20:39,850 --> 00:20:45,250
all right

00:20:42,370 --> 00:20:47,020
so really quickly that brings us to

00:20:45,250 --> 00:20:51,610
circle CI it's the company that I work

00:20:47,020 --> 00:20:54,880
for in case you didn't know yet so Cyril

00:20:51,610 --> 00:20:57,730
CI is a SAS tool we are running in the

00:20:54,880 --> 00:21:01,090
cloud and we manage all the

00:20:57,730 --> 00:21:03,250
infrastructure for you alongside being

00:21:01,090 --> 00:21:04,990
docker native meaning you can run all of

00:21:03,250 --> 00:21:07,630
your bills and commands in docker images

00:21:04,990 --> 00:21:11,620
as well as build docker images to deploy

00:21:07,630 --> 00:21:13,539
we also offer test parallelization which

00:21:11,620 --> 00:21:15,429
means you can take a suite of tests that

00:21:13,539 --> 00:21:17,020
you have and split them and run them in

00:21:15,429 --> 00:21:18,970
parallel between multiple containers at

00:21:17,020 --> 00:21:20,500
the same time this helps you cut down

00:21:18,970 --> 00:21:23,440
the amount of time it takes to finish

00:21:20,500 --> 00:21:25,659
your tests we have one customer who was

00:21:23,440 --> 00:21:27,820
able to migrate from another CI CD

00:21:25,659 --> 00:21:29,830
provider to our platform and between

00:21:27,820 --> 00:21:31,840
using all of the advanced features as

00:21:29,830 --> 00:21:34,240
well as the test parallelization they

00:21:31,840 --> 00:21:37,059
cut down their test suite and deployment

00:21:34,240 --> 00:21:40,059
steps from about two hours ish to down

00:21:37,059 --> 00:21:42,520
down to 20 minutes or so I can't mention

00:21:40,059 --> 00:21:44,380
their names because even if I'd like to

00:21:42,520 --> 00:21:45,610
but that's just an example that I always

00:21:44,380 --> 00:21:46,029
like to pull out because they're pretty

00:21:45,610 --> 00:21:48,429
cool

00:21:46,029 --> 00:21:49,929
I think they run a suite of some 20,000

00:21:48,429 --> 00:21:52,289
unit tests and integration tests or

00:21:49,929 --> 00:21:53,940
something like that and so

00:21:52,289 --> 00:21:55,950
I think we have a really clean and

00:21:53,940 --> 00:21:57,390
intuitive UI people all have always

00:21:55,950 --> 00:21:59,220
mentioned that they like how we separate

00:21:57,390 --> 00:22:00,780
the output my steps and commands it's

00:21:59,220 --> 00:22:03,360
very easy to get to the information that

00:22:00,780 --> 00:22:05,220
you care about immediately and then all

00:22:03,360 --> 00:22:07,200
of our functionality is built-in so

00:22:05,220 --> 00:22:09,630
unlike some other CI CD providers who

00:22:07,200 --> 00:22:10,919
use plug-in architecture basically if

00:22:09,630 --> 00:22:12,299
you want to do this you've got to

00:22:10,919 --> 00:22:14,669
install that plug-in if you want to do

00:22:12,299 --> 00:22:16,679
that you can still that plug-in etc all

00:22:14,669 --> 00:22:17,909
of our functionality is built in and so

00:22:16,679 --> 00:22:19,710
what that means is that you don't have

00:22:17,909 --> 00:22:21,690
to deal with any kind of inconsistencies

00:22:19,710 --> 00:22:23,760
between a third-party plug-in versus the

00:22:21,690 --> 00:22:25,320
main server you don't have to deal with

00:22:23,760 --> 00:22:26,429
waiting for somebody to update this one

00:22:25,320 --> 00:22:27,900
other thing in order for your whole

00:22:26,429 --> 00:22:30,539
pipeline to work all of our

00:22:27,900 --> 00:22:31,830
functionality is built in and we have a

00:22:30,539 --> 00:22:33,929
list of various other features as well

00:22:31,830 --> 00:22:35,700
but if you're interested in that you can

00:22:33,929 --> 00:22:39,809
always visit our websites documentation

00:22:35,700 --> 00:22:42,090
to find out more just like any other CI

00:22:39,809 --> 00:22:45,059
CD provider we sit in the middle in the

00:22:42,090 --> 00:22:46,470
orchestration step of your process okay

00:22:45,059 --> 00:22:47,820
at the very beginning here you're

00:22:46,470 --> 00:22:49,230
working on your application you're

00:22:47,820 --> 00:22:51,320
developing and then you're pushing your

00:22:49,230 --> 00:22:54,179
code as of right now circle CI is

00:22:51,320 --> 00:22:56,549
supports and github and vid bucket and

00:22:54,179 --> 00:22:58,500
so what happens is that in the future

00:22:56,549 --> 00:23:01,470
however we are planning on supporting a

00:22:58,500 --> 00:23:02,730
concept of VCS agnosticism and what that

00:23:01,470 --> 00:23:04,289
will mean is that you can use any

00:23:02,730 --> 00:23:07,770
version control service provider if you

00:23:04,289 --> 00:23:09,120
want to as long as it uses git whether

00:23:07,770 --> 00:23:10,830
and whether we're planning on supporting

00:23:09,120 --> 00:23:12,450
other version control systems

00:23:10,830 --> 00:23:15,150
aside from get like subversion and

00:23:12,450 --> 00:23:16,380
mercurial I am unsure but the one thing

00:23:15,150 --> 00:23:18,030
I do know for sure is that we plan to

00:23:16,380 --> 00:23:21,130
support other version control service

00:23:18,030 --> 00:23:23,830
providers as long as they use git

00:23:21,130 --> 00:23:25,929
in the middle here we are we and other

00:23:23,830 --> 00:23:28,299
CI CD tools like us are taking care of

00:23:25,929 --> 00:23:30,130
the build test and delivery portion of

00:23:28,299 --> 00:23:31,360
your pipeline there are tons of

00:23:30,130 --> 00:23:32,860
different things that we integrate with

00:23:31,360 --> 00:23:35,559
we essentially integrate with anything

00:23:32,860 --> 00:23:38,730
that has an API really and so we've got

00:23:35,559 --> 00:23:41,380
various customers doing doing builds or

00:23:38,730 --> 00:23:42,669
browser testing with sauce labs where

00:23:41,380 --> 00:23:45,340
they're doing code coverage checks

00:23:42,669 --> 00:23:47,500
they're uploading documentation de WS

00:23:45,340 --> 00:23:48,880
GCPs or etcetera there's tons of

00:23:47,500 --> 00:23:50,740
different things that they do and then

00:23:48,880 --> 00:23:52,120
finally the logistics as I kind of just

00:23:50,740 --> 00:23:54,250
mentioned a little bit

00:23:52,120 --> 00:23:55,539
we have people the point various

00:23:54,250 --> 00:23:56,740
different cloud providers or even

00:23:55,539 --> 00:23:58,210
deploying to their own internal

00:23:56,740 --> 00:23:59,559
infrastructure using different tools

00:23:58,210 --> 00:24:02,860
like ansible

00:23:59,559 --> 00:24:03,970
salt chef's etc so we kind of sit in the

00:24:02,860 --> 00:24:06,460
mill here handling kind of a

00:24:03,970 --> 00:24:08,820
orchestration of all that logic any

00:24:06,460 --> 00:24:08,820
questions

00:24:09,620 --> 00:24:16,040
okay so for this workshop portion it

00:24:14,540 --> 00:24:17,870
seems like a lot of you don't have

00:24:16,040 --> 00:24:20,090
laptops and so I'll kind of just walk

00:24:17,870 --> 00:24:21,559
through some of these things no need to

00:24:20,090 --> 00:24:23,420
no need to necessarily participate or

00:24:21,559 --> 00:24:24,920
anything like that but if you want to

00:24:23,420 --> 00:24:26,510
follow along with this workshop you can

00:24:24,920 --> 00:24:30,650
all you basically need is a text editor

00:24:26,510 --> 00:24:39,040
get your brain and actually a github

00:24:30,650 --> 00:24:39,040
account all right so

00:24:43,930 --> 00:24:51,700
all righty so the link that you see up

00:24:48,550 --> 00:24:57,220
on up here above if you go to github.com

00:24:51,700 --> 00:24:59,470
/ MV x t / a CI - CD - 101 - workshop

00:24:57,220 --> 00:25:01,930
you will see an example repository that

00:24:59,470 --> 00:25:05,050
i've put together it is a very very

00:25:01,930 --> 00:25:07,360
simple project it's it's a no js'

00:25:05,050 --> 00:25:09,400
project and it actually really doesn't

00:25:07,360 --> 00:25:11,680
even need to know jazz aspect in there

00:25:09,400 --> 00:25:13,510
the nodejs aspect in there is primarily

00:25:11,680 --> 00:25:16,060
for running the suite of tests that I've

00:25:13,510 --> 00:25:18,310
written for this for this website if you

00:25:16,060 --> 00:25:20,890
will really the actual project itself is

00:25:18,310 --> 00:25:23,110
just a bunch of static website files and

00:25:20,890 --> 00:25:24,340
so technically speaking you could deploy

00:25:23,110 --> 00:25:27,680
this and do a whole bunch of stuff with

00:25:24,340 --> 00:25:32,270
it without no js' even being present

00:25:27,680 --> 00:25:33,350
so in defining your pipeline essentially

00:25:32,270 --> 00:25:34,580
one of the most important things you're

00:25:33,350 --> 00:25:37,430
going to want to do is you're going to

00:25:34,580 --> 00:25:40,610
want to define what things you want to

00:25:37,430 --> 00:25:43,480
achieve in the pipeline so now with my

00:25:40,610 --> 00:25:43,480
notes here and

00:25:47,300 --> 00:25:52,740
we're going to find exactly what we want

00:25:49,680 --> 00:25:55,580
to do does that text readable any chance

00:25:52,740 --> 00:25:55,580
does that text too small

00:25:55,630 --> 00:26:00,960
okay one second here see if I can even

00:25:58,750 --> 00:26:00,960
do that

00:26:16,440 --> 00:26:19,640
is that big enough enough

00:26:23,190 --> 00:26:31,660
is that big enough

00:26:25,930 --> 00:26:37,750
cool all right so what what do we want

00:26:31,660 --> 00:26:39,430
to do with our CI CD pipeline for this

00:26:37,750 --> 00:26:42,190
workshop we'll keep things very simple

00:26:39,430 --> 00:26:45,880
I've written a suite of tests inside the

00:26:42,190 --> 00:26:48,820
repository I use a library called test

00:26:45,880 --> 00:26:51,340
cafe actually and all that all of this

00:26:48,820 --> 00:26:53,350
is doing is it's checking the content of

00:26:51,340 --> 00:26:55,720
certain sections of the website very

00:26:53,350 --> 00:26:58,930
rudimentary and very elementary but your

00:26:55,720 --> 00:27:01,450
use case need not be this simple all

00:26:58,930 --> 00:27:05,830
right so we're going to want to run the

00:27:01,450 --> 00:27:10,870
test suite inside this repository I've

00:27:05,830 --> 00:27:12,970
also got a docker file and so what I

00:27:10,870 --> 00:27:15,130
have essentially done here is inside

00:27:12,970 --> 00:27:17,890
this docker file I have extended nginx

00:27:15,130 --> 00:27:22,540
Alpine and I essentially run a set of

00:27:17,890 --> 00:27:24,250
steps here to put items inside this

00:27:22,540 --> 00:27:25,570
docker container so that I can serve

00:27:24,250 --> 00:27:28,300
these static assets from inside a

00:27:25,570 --> 00:27:29,920
container it's totally overkill you

00:27:28,300 --> 00:27:31,300
don't need to do this at all if you

00:27:29,920 --> 00:27:33,580
really wanted to you could just deploy

00:27:31,300 --> 00:27:36,610
static website files straight to an AWS

00:27:33,580 --> 00:27:38,410
s3 or any other any other cloud provider

00:27:36,610 --> 00:27:40,320
where you can serve content right so the

00:27:38,410 --> 00:27:42,370
docker container is totally overkill but

00:27:40,320 --> 00:27:44,740
the reason I'm doing this is to

00:27:42,370 --> 00:27:46,090
demonstrate that hey there are customers

00:27:44,740 --> 00:27:48,010
who are building actual complex

00:27:46,090 --> 00:27:50,860
applications in docker containers and

00:27:48,010 --> 00:27:53,870
you can do this without one

00:27:50,860 --> 00:27:57,440
so I'm gonna want to build the docker

00:27:53,870 --> 00:28:02,450
container and presumably push the docker

00:27:57,440 --> 00:28:04,310
container as well um just for simplicity

00:28:02,450 --> 00:28:07,190
in ease I'm going to push the docker

00:28:04,310 --> 00:28:12,920
container to docker hub because it's

00:28:07,190 --> 00:28:15,100
free and easy to set up they don't all

00:28:12,920 --> 00:28:15,100
right

00:28:18,090 --> 00:28:24,409
does this make sense this is look good

00:28:21,720 --> 00:28:24,409
cool

00:28:24,430 --> 00:28:29,729
all right so

00:28:27,419 --> 00:28:32,279
the first thing you end up doing inside

00:28:29,729 --> 00:28:33,450
your CI CD 101 workshop here is if

00:28:32,279 --> 00:28:34,379
you're following along the first thing

00:28:33,450 --> 00:28:36,629
you're gonna want to do is you're gonna

00:28:34,379 --> 00:28:38,789
want to fork this repository so that you

00:28:36,629 --> 00:28:40,799
can have it in your own get out of the

00:28:38,789 --> 00:28:42,089
counter assuming you've already done

00:28:40,799 --> 00:28:47,849
this the first thing we're going to do

00:28:42,089 --> 00:28:50,369
is we're going to create a new file at

00:28:47,849 --> 00:28:51,509
the top level different CI CD providers

00:28:50,369 --> 00:28:53,369
are going to do different things right

00:28:51,509 --> 00:28:54,629
they're going to require different files

00:28:53,369 --> 00:28:57,419
of different names or different

00:28:54,629 --> 00:28:59,909
different folders for this with circle

00:28:57,419 --> 00:29:04,019
CI you're going to create a folder

00:28:59,909 --> 00:29:05,759
called circle CI and inside the doctor

00:29:04,019 --> 00:29:09,079
will CI folder you're going to create a

00:29:05,759 --> 00:29:09,079
config doggie animal

00:29:10,470 --> 00:29:15,269
cool inside the config yeah mo what we

00:29:13,860 --> 00:29:18,539
are going to do first is we're going to

00:29:15,269 --> 00:29:21,240
start by defining workflows workflow

00:29:18,539 --> 00:29:23,220
again is the overarching socket texture

00:29:21,240 --> 00:29:25,559
of what you want your CI CD pipeline to

00:29:23,220 --> 00:29:26,940
do in general we recommend that you

00:29:25,559 --> 00:29:28,980
always defined your pipeline first

00:29:26,940 --> 00:29:30,539
whenever you're working with any CI CD

00:29:28,980 --> 00:29:32,759
tool because you want to know exactly

00:29:30,539 --> 00:29:34,259
everything that's happening and if it's

00:29:32,759 --> 00:29:35,730
at the top of your file then you know

00:29:34,259 --> 00:29:37,350
where to find it and you can get a big

00:29:35,730 --> 00:29:39,899
picture of everything that's happening

00:29:37,350 --> 00:29:43,759
alright so we're gonna do a workflows

00:29:39,899 --> 00:29:43,759
and actually let me do this

00:29:51,600 --> 00:29:58,710
all right workflows version 2 version 2

00:29:56,970 --> 00:30:00,150
is just for our platform specifically

00:29:58,710 --> 00:30:03,800
we're on version 2 of our workflows

00:30:00,150 --> 00:30:03,800
right now and jobs

00:30:05,700 --> 00:30:11,639
actually build deploy I'm going to

00:30:08,429 --> 00:30:15,450
decline a I'm going to define a workflow

00:30:11,639 --> 00:30:17,459
called test deploy you can call it

00:30:15,450 --> 00:30:22,849
whatever you want and inside this test

00:30:17,459 --> 00:30:25,219
deploy I am going to run a test and job

00:30:22,849 --> 00:30:28,229
alright looks simple enough right

00:30:25,219 --> 00:30:31,429
we got a pipeline or workflow that has

00:30:28,229 --> 00:30:31,429
one job in it called test

00:30:33,690 --> 00:30:38,700
we continue here I'm going to do job

00:30:36,510 --> 00:30:39,930
definitions after we define our work

00:30:38,700 --> 00:30:41,940
flow we're gonna obviously have to

00:30:39,930 --> 00:30:44,880
define the job that we want to run

00:30:41,940 --> 00:30:50,670
inside that workflow so first this we're

00:30:44,880 --> 00:30:53,340
going to do to that one version 2.1 here

00:30:50,670 --> 00:30:54,900
is the version of a config again this is

00:30:53,340 --> 00:30:56,640
gonna vary depending on which the sed

00:30:54,900 --> 00:30:58,470
provider you use but Cyril CI is on

00:30:56,640 --> 00:31:00,120
version 2.1 right now we've added

00:30:58,470 --> 00:31:02,670
various convenient features and

00:31:00,120 --> 00:31:03,990
functions and different configuring so

00:31:02,670 --> 00:31:06,450
you could do essentially they're really

00:31:03,990 --> 00:31:08,010
nice for writing configuration so we're

00:31:06,450 --> 00:31:08,490
at version two now one right now in my

00:31:08,010 --> 00:31:11,300
jobs

00:31:08,490 --> 00:31:13,980
I'm going to define a test job and

00:31:11,300 --> 00:31:15,660
typically in a CI CD provider you're

00:31:13,980 --> 00:31:18,210
gonna want to define the execution

00:31:15,660 --> 00:31:21,360
environment different platforms do this

00:31:18,210 --> 00:31:23,040
in different ways in circle CI you can

00:31:21,360 --> 00:31:25,950
you have a choice between a docker

00:31:23,040 --> 00:31:28,020
executor which is any docker image you

00:31:25,950 --> 00:31:30,690
want to execute your steps in you also

00:31:28,020 --> 00:31:32,820
have the choice of machine executor

00:31:30,690 --> 00:31:36,120
which is a full Linux virtual machine a

00:31:32,820 --> 00:31:38,610
Mac OS executor for Mac machines format

00:31:36,120 --> 00:31:40,470
fills and iOS builds and then finally

00:31:38,610 --> 00:31:42,690
just a few weeks ago actually we roll

00:31:40,470 --> 00:31:44,310
that Windows support and so now you can

00:31:42,690 --> 00:31:46,530
do Windows builds on sort of su-yong as

00:31:44,310 --> 00:31:50,010
well as of right now it's Windows Server

00:31:46,530 --> 00:31:51,480
2019 with Visual Studio 2019 but inside

00:31:50,010 --> 00:31:53,100
the environment you're free to configure

00:31:51,480 --> 00:31:54,660
and do a whole bunch of work to install

00:31:53,100 --> 00:31:58,500
whatever software you need for your

00:31:54,660 --> 00:32:01,140
applications for this for this thing

00:31:58,500 --> 00:32:06,830
today I am going to do a docker executor

00:32:01,140 --> 00:32:06,830
and the image is going to be

00:32:08,840 --> 00:32:17,390
Circle CI slash known : 10.2 browsers

00:32:19,620 --> 00:32:25,470
I believe that's correct let me double

00:32:22,350 --> 00:32:27,690
check here service CI we have service CI

00:32:25,470 --> 00:32:31,650
actually has a bunch of convenience to

00:32:27,690 --> 00:32:34,950
images that we create for people that

00:32:31,650 --> 00:32:38,780
they can just use so that's two here

00:32:34,950 --> 00:32:38,780
pretty build circle CI docker images

00:32:44,220 --> 00:32:50,250
all right image types here you go so

00:32:47,669 --> 00:32:54,000
we've got Android closure

00:32:50,250 --> 00:32:55,320
Lix ergo no GS open JDK etc I'm gonna go

00:32:54,000 --> 00:32:58,500
ahead and take a look at the note J s

00:32:55,320 --> 00:33:01,519
here if you all available image tags

00:32:58,500 --> 00:33:03,360
here so I was looking specifically for

00:33:01,519 --> 00:33:07,139
10.15 or something like that

00:33:03,360 --> 00:33:10,309
it ended up 15.1 - browser skip if I was

00:33:07,139 --> 00:33:10,309
right or dot -

00:33:13,330 --> 00:33:18,760
cool

00:33:15,770 --> 00:33:21,309
sort will see on node

00:33:18,760 --> 00:33:23,080
all right awesome inside this job I'm

00:33:21,309 --> 00:33:25,510
also going to define a working directory

00:33:23,080 --> 00:33:29,440
and that's going to be home slash CIC

00:33:25,510 --> 00:33:32,320
day 101 workshop here so by default in

00:33:29,440 --> 00:33:35,200
servals yeah it will automatically clone

00:33:32,320 --> 00:33:37,390
your source code into a home slash

00:33:35,200 --> 00:33:39,580
project folder if you don't define

00:33:37,390 --> 00:33:41,260
anything my recommendation to people is

00:33:39,580 --> 00:33:43,630
to always explicitly define and say that

00:33:41,260 --> 00:33:46,510
you know exactly which folder to find

00:33:43,630 --> 00:33:50,590
all of your source code and items in and

00:33:46,510 --> 00:33:53,260
then inside the test job here we define

00:33:50,590 --> 00:33:57,100
steps these steps are for doing certain

00:33:53,260 --> 00:33:58,690
things we have a built in prod we have a

00:33:57,100 --> 00:34:00,070
built in keyword called checkout which

00:33:58,690 --> 00:34:02,890
is essentially just checking out your

00:34:00,070 --> 00:34:05,530
source code and then we have a basic run

00:34:02,890 --> 00:34:07,600
step which is a free-form bash command

00:34:05,530 --> 00:34:09,580
that you can run so just to make sure

00:34:07,600 --> 00:34:12,810
everything is working correctly I'm just

00:34:09,580 --> 00:34:12,810
going to do echo hello world

00:34:17,580 --> 00:34:23,480
all right pat down circle see I come in

00:34:27,589 --> 00:34:34,870
cool then I push this

00:34:31,990 --> 00:34:39,360
all right so now

00:34:34,870 --> 00:34:41,010
if I go over to Circle C I'm calm

00:34:39,360 --> 00:34:43,590
I'm already logged into this application

00:34:41,010 --> 00:34:44,970
however if you are not logged in you can

00:34:43,590 --> 00:34:46,910
either click login if you have an

00:34:44,970 --> 00:34:50,580
account with us already or sign up

00:34:46,910 --> 00:34:53,250
basically what happens is if I just show

00:34:50,580 --> 00:34:55,380
you here because it's really quick what

00:34:53,250 --> 00:34:57,210
happens is that you actually sign into a

00:34:55,380 --> 00:34:59,850
circle see I using your github or

00:34:57,210 --> 00:35:01,650
bitbucket credentials so I'm gonna log

00:34:59,850 --> 00:35:03,900
in with github here or sign up with

00:35:01,650 --> 00:35:08,130
github whichever one I'm going to go to

00:35:03,900 --> 00:35:12,060
add projects I am on the wrong group

00:35:08,130 --> 00:35:14,730
here let's see here it is CI CD 101

00:35:12,060 --> 00:35:16,200
workshop a setup project here I click

00:35:14,730 --> 00:35:17,640
setup project I don't need to worry

00:35:16,200 --> 00:35:19,470
about any of this other stuff this other

00:35:17,640 --> 00:35:21,930
stuff is kind of just tutorial we've

00:35:19,470 --> 00:35:23,760
already gone through the we've already

00:35:21,930 --> 00:35:25,620
gone through the work of essentially

00:35:23,760 --> 00:35:26,670
creating our own little thing here so

00:35:25,620 --> 00:35:28,020
we're not gonna need to worry about that

00:35:26,670 --> 00:35:32,040
we're just gonna go ahead and click

00:35:28,020 --> 00:35:37,220
start building and that'll kick off the

00:35:32,040 --> 00:35:37,220
first build of this project here

00:35:37,970 --> 00:35:43,940
you can watch it happening in real time

00:35:39,589 --> 00:35:45,740
it's spinning up the environment also

00:35:43,940 --> 00:35:47,300
just for verification purposes we have a

00:35:45,740 --> 00:35:49,760
configuration tab here on our job

00:35:47,300 --> 00:35:51,500
details page so you can go into

00:35:49,760 --> 00:35:53,300
configuration just to verify it is

00:35:51,500 --> 00:35:55,599
running exactly what you typed in or

00:35:53,300 --> 00:35:58,190
what you checked in to the repository

00:35:55,599 --> 00:36:01,220
now you can see that it has completed

00:35:58,190 --> 00:36:02,869
running and is done so you can see that

00:36:01,220 --> 00:36:05,990
that was fairly fast right

00:36:02,869 --> 00:36:08,480
it took all of 12 seconds and that's

00:36:05,990 --> 00:36:09,920
because we used a docker executor it's

00:36:08,480 --> 00:36:11,720
very quick and easy to spin up docker

00:36:09,920 --> 00:36:13,130
images on our platform and then

00:36:11,720 --> 00:36:14,990
essentially the rest of it is just

00:36:13,130 --> 00:36:17,839
running commands inside the environment

00:36:14,990 --> 00:36:19,880
now this is great we got a green build

00:36:17,839 --> 00:36:20,359
but this is useless it's not doing

00:36:19,880 --> 00:36:22,790
anything

00:36:20,359 --> 00:36:24,020
it's just echoing hello world so we're

00:36:22,790 --> 00:36:25,160
gonna want to change our code so that

00:36:24,020 --> 00:36:27,770
it's actually doing something a little

00:36:25,160 --> 00:36:29,630
bit more important and substantial we go

00:36:27,770 --> 00:36:31,280
back into the file here we see our steps

00:36:29,630 --> 00:36:34,520
are check out and then run echo hello

00:36:31,280 --> 00:36:36,589
world right so instead of just running

00:36:34,520 --> 00:36:38,680
echo hello world we're gonna want to do

00:36:36,589 --> 00:36:42,470
something a little bit more important

00:36:38,680 --> 00:36:44,810
for example yarn I use yarn some people

00:36:42,470 --> 00:36:47,210
prefer NPM and whatever it is you can

00:36:44,810 --> 00:36:49,099
run NPM install or even or you're on

00:36:47,210 --> 00:36:51,319
whatever it is we have a package that

00:36:49,099 --> 00:36:52,579
JSON inside this project and so I'm

00:36:51,319 --> 00:36:54,920
going to use yarn to install the

00:36:52,579 --> 00:36:56,960
dependencies I'm also gonna modify this

00:36:54,920 --> 00:37:00,589
slightly I'm going to change this to

00:36:56,960 --> 00:37:03,020
name install dependencies and then the

00:37:00,589 --> 00:37:04,550
command is going to peed on and this is

00:37:03,020 --> 00:37:05,750
just a increased readability you could

00:37:04,550 --> 00:37:07,700
just have the run come in by itself

00:37:05,750 --> 00:37:09,050
followed by the command but I like to

00:37:07,700 --> 00:37:11,060
include the name and the command in

00:37:09,050 --> 00:37:13,140
there just so it's more readable all

00:37:11,060 --> 00:37:15,390
right

00:37:13,140 --> 00:37:20,480
after we install dependencies we're then

00:37:15,390 --> 00:37:20,480
going to actually run the tests

00:37:22,059 --> 00:37:27,880
and the command for that is gonna be

00:37:24,349 --> 00:37:27,880
yarn test

00:37:28,100 --> 00:37:30,700
cool

00:37:34,930 --> 00:37:40,650
all right add test commands push

00:37:41,040 --> 00:37:46,400
and it looks like it's in committing now

00:37:43,080 --> 00:37:46,400
we wait for the next job to kick off

00:37:46,920 --> 00:37:50,130
here you go

00:37:50,550 --> 00:37:54,840
now you can see here that what I'm doing

00:37:52,770 --> 00:37:58,020
here is one of the reasons why people

00:37:54,840 --> 00:38:00,060
enjoy the circle CI as a platform it's a

00:37:58,020 --> 00:38:02,340
shameless plug here and that is because

00:38:00,060 --> 00:38:04,590
it is very quick and easy to make

00:38:02,340 --> 00:38:07,020
updates to your configuration and then

00:38:04,590 --> 00:38:08,340
immediately see things running it's a

00:38:07,020 --> 00:38:10,260
little bit harder to do this on some

00:38:08,340 --> 00:38:12,270
other platforms it might take longer for

00:38:10,260 --> 00:38:14,370
an environment to spin up it might be a

00:38:12,270 --> 00:38:16,350
little bit more difficult to inherently

00:38:14,370 --> 00:38:18,690
see what's happening inside the

00:38:16,350 --> 00:38:20,460
environment etc with circle CI it's very

00:38:18,690 --> 00:38:22,800
quick and easy to make changes to your

00:38:20,460 --> 00:38:25,590
config file push it and then see what's

00:38:22,800 --> 00:38:27,810
running life alright you can see here we

00:38:25,590 --> 00:38:29,520
are installing the dependencies this is

00:38:27,810 --> 00:38:30,900
gonna take a little bit of time I don't

00:38:29,520 --> 00:38:34,850
think we have too many dependencies here

00:38:30,900 --> 00:38:34,850
but it's going to take a few seconds

00:38:36,269 --> 00:38:42,149
so this is a no js' project and so we're

00:38:40,469 --> 00:38:44,009
installing whatever is mentioned inside

00:38:42,149 --> 00:38:45,749
the package.json we have various other

00:38:44,009 --> 00:38:47,549
customers who are doing into the

00:38:45,749 --> 00:38:49,229
dependency installation for tons of

00:38:47,549 --> 00:38:51,389
other languages of frameworks for

00:38:49,229 --> 00:38:55,109
example we have people doing Python

00:38:51,389 --> 00:38:58,229
Django or flask builds and so they're

00:38:55,109 --> 00:38:59,879
installing of dependencies with pip we

00:38:58,229 --> 00:39:01,589
have people who are installing maven

00:38:59,879 --> 00:39:03,869
dependencies Gradle dependencies for

00:39:01,589 --> 00:39:06,269
Java we have people installing Ruby gems

00:39:03,869 --> 00:39:08,909
to run the Ruby projects we have people

00:39:06,269 --> 00:39:10,769
installing whatever for whatever it is

00:39:08,909 --> 00:39:13,079
they need to for whatever languages

00:39:10,769 --> 00:39:15,539
they're testing with or frameworks so

00:39:13,079 --> 00:39:18,029
you can see here that this is actually

00:39:15,539 --> 00:39:20,189
doing something real and substantial now

00:39:18,029 --> 00:39:21,989
we have installed the dependencies that

00:39:20,189 --> 00:39:24,659
we need for this container and we are

00:39:21,989 --> 00:39:29,039
now running tests for this project and

00:39:24,659 --> 00:39:31,199
so now I can essentially do anything

00:39:29,039 --> 00:39:34,279
inside the project right this is going

00:39:31,199 --> 00:39:34,279
to be a bogus change

00:39:38,660 --> 00:39:43,040
my class is able to navigate them

00:39:47,490 --> 00:39:54,880
and then I can just say a class is equal

00:39:50,050 --> 00:39:56,320
to nav link just scroll trigger hyper

00:39:54,880 --> 00:39:58,990
ref and then we're just gonna call this

00:39:56,320 --> 00:40:04,530
something right and then add like a

00:39:58,990 --> 00:40:04,530
something link here if I add this

00:40:08,560 --> 00:40:13,980
and push it

00:40:10,860 --> 00:40:15,960
now once I've set up this pipeline it'll

00:40:13,980 --> 00:40:18,540
always run these same steps that I've

00:40:15,960 --> 00:40:20,730
defined before right and so after I push

00:40:18,540 --> 00:40:23,880
my new changes here you can see a new

00:40:20,730 --> 00:40:27,900
job kick off on circle CI and it is

00:40:23,880 --> 00:40:29,400
running the same set of tests against my

00:40:27,900 --> 00:40:30,960
new change that I just introduced here

00:40:29,400 --> 00:40:32,930
now the change that I introduced

00:40:30,960 --> 00:40:36,810
shouldn't break anything I don't think

00:40:32,930 --> 00:40:38,310
fingers crossed but will be able to find

00:40:36,810 --> 00:40:40,800
out much more easily because we've got

00:40:38,310 --> 00:40:44,070
this pipeline set up and so what you're

00:40:40,800 --> 00:40:46,920
seeing here is really an end goal of

00:40:44,070 --> 00:40:49,410
using and picking up any CI CD tool and

00:40:46,920 --> 00:40:52,260
writing out these pipelines is that you

00:40:49,410 --> 00:40:53,850
want to be able to run whatever it is

00:40:52,260 --> 00:40:56,940
that you run against your application do

00:40:53,850 --> 00:40:59,190
all these tasks whenever developers make

00:40:56,940 --> 00:41:00,720
changes to the code base and this helps

00:40:59,190 --> 00:41:02,040
increase your productivity because you

00:41:00,720 --> 00:41:04,710
can always know when someone has

00:41:02,040 --> 00:41:07,050
committed breaking code whenever someone

00:41:04,710 --> 00:41:08,820
has made changes that do something weird

00:41:07,050 --> 00:41:11,580
with the system or do something weird

00:41:08,820 --> 00:41:14,220
with your code etc and so this

00:41:11,580 --> 00:41:16,380
ultimately helps your your developers be

00:41:14,220 --> 00:41:19,050
more productive because it helps them

00:41:16,380 --> 00:41:22,190
figure out what the problems are sooner

00:41:19,050 --> 00:41:22,190
so that they can address them

00:41:24,530 --> 00:41:31,079
there you don't you can see here things

00:41:29,339 --> 00:41:34,369
are running again and is running the

00:41:31,079 --> 00:41:34,369
test suite against my changes

00:41:34,520 --> 00:41:41,740
any questions or comments or anything

00:41:38,450 --> 00:41:41,740
else about what you've seen so far

00:41:42,190 --> 00:41:44,790
yeah

00:41:49,150 --> 00:41:52,150
French

00:41:54,430 --> 00:41:56,940
okay

00:42:02,099 --> 00:42:07,810
okay so the question is I'm running

00:42:04,630 --> 00:42:09,520
these builds in the master branch does

00:42:07,810 --> 00:42:10,780
our system support doing things on

00:42:09,520 --> 00:42:13,450
different branches and the answer that

00:42:10,780 --> 00:42:15,070
is yes it's I'm not demonstrating that

00:42:13,450 --> 00:42:16,750
on this I'm not demonstrating in this

00:42:15,070 --> 00:42:18,160
demo purely because of the fact that

00:42:16,750 --> 00:42:19,900
this project is so simple and doesn't

00:42:18,160 --> 00:42:22,119
really have anything else going on but

00:42:19,900 --> 00:42:25,450
yeah our configuration does allow the

00:42:22,119 --> 00:42:26,980
filtering by branches we have lots of

00:42:25,450 --> 00:42:28,990
different customers who are for example

00:42:26,980 --> 00:42:30,700
they only want to run certain jobs on

00:42:28,990 --> 00:42:32,650
certain branches for example you only

00:42:30,700 --> 00:42:34,990
want to run a deployed branch on master

00:42:32,650 --> 00:42:36,310
you only want to run nightly builds on a

00:42:34,990 --> 00:42:38,320
develop branch which is the branch

00:42:36,310 --> 00:42:40,150
that's changing every day you only want

00:42:38,320 --> 00:42:43,660
to do this on that branch we also

00:42:40,150 --> 00:42:46,690
support ignoring branches by filters as

00:42:43,660 --> 00:42:48,430
well as by tags as well you can also do

00:42:46,690 --> 00:42:50,560
certain jobs and run certain workflows

00:42:48,430 --> 00:42:52,660
only based on tags and we have some

00:42:50,560 --> 00:42:54,940
customers who for example use this

00:42:52,660 --> 00:42:56,530
functionality by saying hey we actually

00:42:54,940 --> 00:42:58,540
don't even deploy from master mesh

00:42:56,530 --> 00:43:01,510
necessarily we only deploy whenever we

00:42:58,540 --> 00:43:03,760
release a new tag or we push new tanks

00:43:01,510 --> 00:43:07,990
up to our repository and so that would

00:43:03,760 --> 00:43:10,290
be the functionality there any other

00:43:07,990 --> 00:43:10,290
questions

00:43:13,850 --> 00:43:19,730
we get on time when is this thing into

00:43:15,590 --> 00:43:21,350
oh okay so I'm glad that we got through

00:43:19,730 --> 00:43:22,640
this first portion of it it looks like

00:43:21,350 --> 00:43:24,530
we're running out of time here and so

00:43:22,640 --> 00:43:26,270
this is kind of just like the first step

00:43:24,530 --> 00:43:28,430
that we got through in terms of this

00:43:26,270 --> 00:43:29,990
workshop there were more things that I

00:43:28,430 --> 00:43:31,400
was going to cover but since we don't

00:43:29,990 --> 00:43:33,410
have time for that what I will do is

00:43:31,400 --> 00:43:35,570
sometime later today I will finish

00:43:33,410 --> 00:43:38,030
updating the tutorial section of the

00:43:35,570 --> 00:43:39,680
readme on this repository and so when

00:43:38,030 --> 00:43:42,800
that update is made you will be able to

00:43:39,680 --> 00:43:44,330
see more steps and more of the things

00:43:42,800 --> 00:43:46,910
that you could do on our platform as

00:43:44,330 --> 00:43:49,850
well as associated resource files and

00:43:46,910 --> 00:43:51,740
documentation on it as well other than

00:43:49,850 --> 00:43:53,270
that yeah I hope you get a little bit

00:43:51,740 --> 00:43:56,450
got a little bit of something out of

00:43:53,270 --> 00:43:57,710
this workshop regarding CI CD most of

00:43:56,450 --> 00:43:59,840
the stuff that you've seen today is

00:43:57,710 --> 00:44:02,270
stuff that you will find and understand

00:43:59,840 --> 00:44:03,920
now on most CI CD platforms it's just

00:44:02,270 --> 00:44:05,720
some small variations here and there in

00:44:03,920 --> 00:44:08,270
configuration and then different

00:44:05,720 --> 00:44:10,310
features ultimately what will separate

00:44:08,270 --> 00:44:12,200
different CI CD providers and tools from

00:44:10,310 --> 00:44:13,820
each other are number one the features

00:44:12,200 --> 00:44:15,740
and functionalities they offer as well

00:44:13,820 --> 00:44:18,230
as the experience that people have while

00:44:15,740 --> 00:44:21,770
using the tool and so keeping all that

00:44:18,230 --> 00:44:22,580
in mind definitely define metrics and

00:44:21,770 --> 00:44:24,590
define goals

00:44:22,580 --> 00:44:26,930
whenever you're adopting new tools and

00:44:24,590 --> 00:44:29,450
yeah you'll be able to decide for

00:44:26,930 --> 00:44:33,560
yourself and your team which tool you

00:44:29,450 --> 00:44:35,620
want to adopt in your tool chain thank

00:44:33,560 --> 00:44:35,620
you

00:44:46,480 --> 00:44:48,540
you

00:44:54,460 --> 00:44:56,520

YouTube URL: https://www.youtube.com/watch?v=zyPPbuYvurk


