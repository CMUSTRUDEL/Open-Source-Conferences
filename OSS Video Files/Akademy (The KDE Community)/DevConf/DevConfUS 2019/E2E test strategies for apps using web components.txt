Title: E2E test strategies for apps using web components
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speakers: Deepak Koul & Anuj Singla

With most of the web apps starting to use common UI libraries and web components for reusability and modularity, the impact on brittleness of already fragile UI testing or E2E testing has increased. Imagine another set of developers changing an autosearch box which two of your web apps are using and impact this change can have on your E2E tests, selenium or otherwise which use dom for identifying locators. In this session we will be presenting a strategy which prevents this impact by UI testing the component at source and then reusing the test library in app specific e2e tests.
Captions: 
	00:00:27,490 --> 00:00:30,610
[Music]

00:00:35,310 --> 00:00:38,030
Thanks

00:00:39,530 --> 00:00:46,109
welcome goddess I can talk

00:00:43,000 --> 00:00:46,109
[Music]

00:00:50,250 --> 00:00:53,840
we're going to introduce ourselves

00:00:55,170 --> 00:00:57,740
we're going to

00:00:59,430 --> 00:01:05,090
understanding

00:01:01,790 --> 00:01:05,090
very quickly

00:01:10,299 --> 00:01:15,120
who we are

00:01:12,070 --> 00:01:15,120
your highness

00:01:16,630 --> 00:01:20,770
it's just technical manager a

00:01:18,670 --> 00:01:23,310
TripAdvisor we're out of Needham mr.

00:01:20,770 --> 00:01:23,310
Kyser curious

00:01:23,689 --> 00:01:27,520
and we hear about us

00:01:28,600 --> 00:01:32,370
our early interested

00:01:36,549 --> 00:01:39,810
for comes and

00:01:43,460 --> 00:01:49,260
they're UX goes way beyond that and this

00:01:47,970 --> 00:01:52,470
being open-source conference you wanted

00:01:49,260 --> 00:01:53,610
to talk about the UX on the backend or

00:01:52,470 --> 00:01:55,470
the appearance as an open-source

00:01:53,610 --> 00:01:57,960
contributor is also just as important as

00:01:55,470 --> 00:01:59,790
the UX for the end-user you know open

00:01:57,960 --> 00:02:01,170
source software is collaborative there's

00:01:59,790 --> 00:02:04,310
not necessarily someone steering a ship

00:02:01,170 --> 00:02:04,310
all the time wants to become

00:02:06,700 --> 00:02:10,569
and if we do a better job thinking about

00:02:08,319 --> 00:02:13,300
UX upfront we can make our projects

00:02:10,569 --> 00:02:17,010
better more usable

00:02:13,300 --> 00:02:17,010
and more contributors more adoption

00:02:20,170 --> 00:02:25,800
and to install

00:02:23,050 --> 00:02:25,800
we're actually

00:02:27,459 --> 00:02:32,189
these reference you guys don't drop

00:02:34,099 --> 00:02:37,870
so our assumption

00:02:35,630 --> 00:02:37,870
you

00:02:41,610 --> 00:02:45,360
development practices

00:02:47,040 --> 00:02:51,349
they are amusing that your interest

00:02:51,450 --> 00:02:54,200
we're also

00:03:01,920 --> 00:03:04,400
dad

00:03:04,950 --> 00:03:08,270
we're also zooming

00:03:09,300 --> 00:03:12,920
you are user and

00:03:39,390 --> 00:03:44,710
to be any different

00:03:40,880 --> 00:03:44,710
each side

00:03:49,030 --> 00:03:52,099
[Music]

00:04:20,480 --> 00:04:23,800
can everyone hear me

00:05:20,810 --> 00:05:23,110
to begin

00:05:24,260 --> 00:05:29,390
we're ready whenever you are let me give

00:05:27,470 --> 00:05:32,030
you a brief introduction for thunders

00:05:29,390 --> 00:05:34,130
dive right into it I think I'm just all

00:05:32,030 --> 00:05:37,000
right

00:05:34,130 --> 00:05:37,000
all right

00:05:43,360 --> 00:05:49,900
can everyone hear me in the back

00:05:46,660 --> 00:05:53,050
alright alright so good morning everyone

00:05:49,900 --> 00:05:57,040
my name is deepak all and i am a QE

00:05:53,050 --> 00:05:59,680
manager in Red Hat and with me is my

00:05:57,040 --> 00:06:00,460
colleague who is a developer and I'm

00:05:59,680 --> 00:06:02,920
just kidding

00:06:00,460 --> 00:06:05,410
he's not here his visa application did

00:06:02,920 --> 00:06:08,010
not go through and that is why the john

00:06:05,410 --> 00:06:08,010
cena joke

00:06:08,750 --> 00:06:15,250
all right so I have been writing tests

00:06:11,990 --> 00:06:20,350
for a living from last 13 years and

00:06:15,250 --> 00:06:24,350
during those 13 years I I realized that

00:06:20,350 --> 00:06:27,680
we the test automation developers when

00:06:24,350 --> 00:06:30,920
we do things individually we who don't

00:06:27,680 --> 00:06:32,600
do things in a way we could have been

00:06:30,920 --> 00:06:34,880
done if we had done those things

00:06:32,600 --> 00:06:38,750
collectively like shared something with

00:06:34,880 --> 00:06:40,389
one another in the community of test

00:06:38,750 --> 00:06:44,439
automation

00:06:40,389 --> 00:06:46,780
and this is exactly what today's talk is

00:06:44,439 --> 00:06:50,259
based upon the end-to-end test

00:06:46,780 --> 00:06:52,919
strategies for web apps using common web

00:06:50,259 --> 00:06:52,919
components

00:06:53,150 --> 00:06:58,319
all right so normally what happens is

00:06:56,069 --> 00:07:00,180
when when we say to us it means

00:06:58,319 --> 00:07:03,180
different things to different people

00:07:00,180 --> 00:07:05,180
this is DEFCON cetera I'm expecting

00:07:03,180 --> 00:07:08,009
there are people who heard well first

00:07:05,180 --> 00:07:11,039
when when you said test to developers it

00:07:08,009 --> 00:07:13,529
usually means a unit test or integration

00:07:11,039 --> 00:07:18,169
test right it's not an end-to-end test

00:07:13,529 --> 00:07:22,770
so Martin Fowler who is a thought works

00:07:18,169 --> 00:07:26,039
agile expert he created this pyramid of

00:07:22,770 --> 00:07:29,009
testing right so right into the bottom

00:07:26,039 --> 00:07:32,039
of the unit test so which were fast and

00:07:29,009 --> 00:07:34,620
less expensive and right at the top is

00:07:32,039 --> 00:07:38,599
the end-to-end test which is slow

00:07:34,620 --> 00:07:42,240
because it runs in a browser forever and

00:07:38,599 --> 00:07:45,110
is not very reliable because so many

00:07:42,240 --> 00:07:50,039
moving components in it

00:07:45,110 --> 00:07:52,499
so this top particularly talks about the

00:07:50,039 --> 00:07:55,169
internal testing the testing for a web

00:07:52,499 --> 00:07:58,439
app which you do while invoking a

00:07:55,169 --> 00:08:00,719
browser even though it is slow but still

00:07:58,439 --> 00:08:04,020
very important because it is as close as

00:08:00,719 --> 00:08:06,229
you get to the actual user simulation

00:08:04,020 --> 00:08:06,229
right

00:08:07,000 --> 00:08:12,050
so selenium-webdriver

00:08:10,430 --> 00:08:13,580
I I don't want to give you the whole

00:08:12,050 --> 00:08:15,710
history of selenium so there were two

00:08:13,580 --> 00:08:18,080
projects to open-source project the

00:08:15,710 --> 00:08:20,000
selenium project by the Athenians and

00:08:18,080 --> 00:08:24,940
then the webdriver project which got

00:08:20,000 --> 00:08:27,940
much so it is actually an API

00:08:24,940 --> 00:08:30,610
which you with which you can talk to a

00:08:27,940 --> 00:08:34,000
browser right to run an automated test

00:08:30,610 --> 00:08:36,430
in a browser you need to modify the dog

00:08:34,000 --> 00:08:38,110
right you need to click on buttons you

00:08:36,430 --> 00:08:42,130
need to enter the text in a text box

00:08:38,110 --> 00:08:46,480
alright and this is the Eclipse and

00:08:42,130 --> 00:08:50,410
interface but the other the people the

00:08:46,480 --> 00:08:52,150
browser vendors have written api's which

00:08:50,410 --> 00:08:54,640
are very browser specific like the

00:08:52,150 --> 00:08:57,370
Firefox driver or the IE driver or the

00:08:54,640 --> 00:09:00,720
chrome driver which then you interact

00:08:57,370 --> 00:09:00,720
with that run your test

00:09:05,199 --> 00:09:10,809
all right so how did this problem start

00:09:08,049 --> 00:09:15,999
what happened was in pursuit of learning

00:09:10,809 --> 00:09:21,779
and innovation the developers the modern

00:09:15,999 --> 00:09:25,089
web developers have been you know using

00:09:21,779 --> 00:09:27,970
different kinds of UI components as well

00:09:25,089 --> 00:09:29,709
as frameworks so within a weekend there

00:09:27,970 --> 00:09:31,739
is a new JavaScript framework which is

00:09:29,709 --> 00:09:36,029
from the market right there was Android

00:09:31,739 --> 00:09:39,089
there is react right now so

00:09:36,029 --> 00:09:42,060
on the other hand the selenium community

00:09:39,089 --> 00:09:47,100
is not that strong to compete with such

00:09:42,060 --> 00:09:50,550
fast-moving front and selenium itself

00:09:47,100 --> 00:09:52,740
has an API let's say to work with the

00:09:50,550 --> 00:09:53,759
select component so have you seen a

00:09:52,740 --> 00:09:56,970
thick list

00:09:53,759 --> 00:10:02,129
on a webpage right so ideally it should

00:09:56,970 --> 00:10:05,670
be an HTML select tag selenium in itself

00:10:02,129 --> 00:10:06,569
has an out-of-the-box select library to

00:10:05,670 --> 00:10:09,089
deal with that

00:10:06,569 --> 00:10:11,519
it has methods to deal with that like

00:10:09,089 --> 00:10:13,740
you click on it you just give the

00:10:11,519 --> 00:10:16,949
locator of the Select tag you click on

00:10:13,740 --> 00:10:20,189
it you can get the size of the list you

00:10:16,949 --> 00:10:23,060
can click on an item by value or by

00:10:20,189 --> 00:10:25,379
index that's stuff like that right but

00:10:23,060 --> 00:10:27,509
there have been multiple other new

00:10:25,379 --> 00:10:30,750
frameworks which have their own versions

00:10:27,509 --> 00:10:34,920
of wickless right for example there is a

00:10:30,750 --> 00:10:38,189
chosen library by jQuery and there is a

00:10:34,920 --> 00:10:40,120
reaction IDE which does not follow the

00:10:38,189 --> 00:10:43,000
same standard

00:10:40,120 --> 00:10:46,210
which the select tag has right so in

00:10:43,000 --> 00:10:47,740
that case but in that case there is a

00:10:46,210 --> 00:10:51,670
problem with the test automation

00:10:47,740 --> 00:10:54,040
developers the selenium developers who

00:10:51,670 --> 00:10:56,050
write those tests they don't know what

00:10:54,040 --> 00:10:58,750
to do because there is no out-of-the-box

00:10:56,050 --> 00:11:02,530
library by selenium so in that case they

00:10:58,750 --> 00:11:05,080
do hard-coded clicks on first three

00:11:02,530 --> 00:11:07,710
drop-down and then select by visible tag

00:11:05,080 --> 00:11:07,710
stuff like that

00:11:08,470 --> 00:11:14,440
and another thing is that with

00:11:12,150 --> 00:11:18,010
medium-sized to large organization what

00:11:14,440 --> 00:11:20,650
happens is people are using common

00:11:18,010 --> 00:11:23,830
components to make to enable a

00:11:20,650 --> 00:11:26,740
consistency of UI in their web apps for

00:11:23,830 --> 00:11:29,640
example in that hat we mostly use the

00:11:26,740 --> 00:11:33,940
pattern fly are you aware of pattern fly

00:11:29,640 --> 00:11:36,670
pattern fly is open source library of UI

00:11:33,940 --> 00:11:38,800
components you can use like drop-down

00:11:36,670 --> 00:11:42,430
select boxes they do coffee stuff like

00:11:38,800 --> 00:11:44,350
that so you can straightaway pull that

00:11:42,430 --> 00:11:46,270
and use in your web applications to

00:11:44,350 --> 00:11:49,960
maintain the consistency let's say you

00:11:46,270 --> 00:11:52,690
have 20 different web applications in

00:11:49,960 --> 00:11:55,210
your organization some some payroll

00:11:52,690 --> 00:11:57,010
applications or maybe any other

00:11:55,210 --> 00:11:59,050
application inside your organization's

00:11:57,010 --> 00:12:01,960
or public facing to maintain that

00:11:59,050 --> 00:12:04,900
consistency of UI your brand you use

00:12:01,960 --> 00:12:08,110
similar components so what developers do

00:12:04,900 --> 00:12:10,810
is they focus folks some other libraries

00:12:08,110 --> 00:12:12,550
of the UI components and make some

00:12:10,810 --> 00:12:15,370
changes and create their own library and

00:12:12,550 --> 00:12:17,830
then reuse it everywhere in all of these

00:12:15,370 --> 00:12:20,170
web applications for

00:12:17,830 --> 00:12:22,600
what they do is they straightaway use

00:12:20,170 --> 00:12:25,080
some existing components like be the

00:12:22,600 --> 00:12:25,080
excellent

00:12:26,460 --> 00:12:34,290
and this causes problems as I said there

00:12:30,029 --> 00:12:37,170
is selenium does not support a lot of so

00:12:34,290 --> 00:12:39,140
many web components right it's not a

00:12:37,170 --> 00:12:42,089
community which is moving as fast as

00:12:39,140 --> 00:12:44,540
different and community so there is a

00:12:42,089 --> 00:12:44,540
problem

00:12:48,130 --> 00:12:51,870
let me now show you the

00:12:53,170 --> 00:12:58,480
so my colleague who could not come here

00:12:55,800 --> 00:13:02,170
due to the visa application created this

00:12:58,480 --> 00:13:03,959
demo err okay so these are three

00:13:02,170 --> 00:13:08,550
different lists

00:13:03,959 --> 00:13:13,209
the first one is jQuery chosen okay

00:13:08,550 --> 00:13:16,269
again a list of countries the second one

00:13:13,209 --> 00:13:19,240
is simple a chemical attack which is

00:13:16,269 --> 00:13:22,840
again a list of countries and third one

00:13:19,240 --> 00:13:25,150
is very excellent library

00:13:22,840 --> 00:13:26,740
so if you are if you are testing an

00:13:25,150 --> 00:13:29,370
application if you are a front-end

00:13:26,740 --> 00:13:33,190
tester or e 2e duster on an application

00:13:29,370 --> 00:13:35,830
it is using the react select then you

00:13:33,190 --> 00:13:39,610
will probably have to create your own

00:13:35,830 --> 00:13:43,480
library you I love testing library but

00:13:39,610 --> 00:13:47,380
would be reactive select component so if

00:13:43,480 --> 00:13:51,160
I do and if I open down tools you'll see

00:13:47,380 --> 00:13:54,790
that the react component is completely

00:13:51,160 --> 00:13:58,380
different because it's not a selected

00:13:54,790 --> 00:14:01,990
the first validation with selenium

00:13:58,380 --> 00:14:05,079
out-of-the-box select library makes his

00:14:01,990 --> 00:14:08,160
chapter that the HTML it is dealing with

00:14:05,079 --> 00:14:11,649
is a Select tag so you cannot use the

00:14:08,160 --> 00:14:15,639
selenium selective library here so you

00:14:11,649 --> 00:14:18,250
will have to create your own so our

00:14:15,639 --> 00:14:21,760
strategy in this case was because we

00:14:18,250 --> 00:14:25,240
were also using our own component

00:14:21,760 --> 00:14:28,750
library the developers had created a

00:14:25,240 --> 00:14:31,420
component library so as a QE member my

00:14:28,750 --> 00:14:34,120
strategy was to test the component at

00:14:31,420 --> 00:14:38,760
source ok let's say there is a component

00:14:34,120 --> 00:14:41,649
library of 5 pick lists to radio boxes

00:14:38,760 --> 00:14:44,709
text boxes text area stuff like that

00:14:41,649 --> 00:14:47,800
maybe data to type everything you need

00:14:44,709 --> 00:14:50,170
to build a web application you have your

00:14:47,800 --> 00:14:52,170
organization's component library so what

00:14:50,170 --> 00:14:56,139
should be the ideal step now is to

00:14:52,170 --> 00:14:58,230
create a simple web page a bare bone web

00:14:56,139 --> 00:15:00,420
page like this

00:14:58,230 --> 00:15:03,869
and

00:15:00,420 --> 00:15:06,360
feed it with hardcoded I sounded like I

00:15:03,869 --> 00:15:08,309
have done it is just a list of

00:15:06,360 --> 00:15:10,529
countryside I don't need to follow

00:15:08,309 --> 00:15:13,350
business logic and this is just a test

00:15:10,529 --> 00:15:17,360
page so for the library

00:15:13,350 --> 00:15:21,079
I created a stage and I write my

00:15:17,360 --> 00:15:26,029
selenium library based on this test page

00:15:21,079 --> 00:15:26,029
getting my mind any questions so far

00:15:26,030 --> 00:15:31,310
all right so

00:15:29,030 --> 00:15:33,950
once I have written my selenium library

00:15:31,310 --> 00:15:36,509
for these then I'll run some tests on it

00:15:33,950 --> 00:15:39,359
to make sure that

00:15:36,509 --> 00:15:42,149
at least this thing on the source buses

00:15:39,359 --> 00:15:45,509
then different teams which are using

00:15:42,149 --> 00:15:48,720
these components can use my test library

00:15:45,509 --> 00:15:52,079
as well instead of inventing the wheel

00:15:48,720 --> 00:15:55,529
again and a kid they can use my test

00:15:52,079 --> 00:15:59,100
libraries to in their test automation

00:15:55,529 --> 00:16:01,579
frameworks right so I'll just show you

00:15:59,100 --> 00:16:01,579
an example

00:16:03,400 --> 00:16:08,910
okay so

00:16:05,730 --> 00:16:11,660
these are three tests should I make it

00:16:08,910 --> 00:16:11,660
slightly larger

00:16:14,090 --> 00:16:21,130
about now all right so these are a

00:16:18,500 --> 00:16:24,250
different tests

00:16:21,130 --> 00:16:27,580
the first one is the chosen demo for the

00:16:24,250 --> 00:16:29,460
Preakness which uses the jQuery chosen

00:16:27,580 --> 00:16:31,990
library okay

00:16:29,460 --> 00:16:35,019
selenium does not provide anything to

00:16:31,990 --> 00:16:39,139
deal with this chosen pick list

00:16:35,019 --> 00:16:42,620
so what did we do we created a separate

00:16:39,139 --> 00:16:45,670
chosen library modeled typically on the

00:16:42,620 --> 00:16:48,730
actual selenium select library

00:16:45,670 --> 00:16:51,670
okay so it exposes and efforts like get

00:16:48,730 --> 00:16:53,950
options led by index value and it

00:16:51,670 --> 00:16:57,040
depends on you how many methods you want

00:16:53,950 --> 00:16:59,200
to expose but I let these methods to the

00:16:57,040 --> 00:17:02,910
job you just have to select let's say

00:16:59,200 --> 00:17:02,910
one country from Belize

00:17:04,449 --> 00:17:09,180
and that second one is the react

00:17:07,179 --> 00:17:12,240
selected

00:17:09,180 --> 00:17:15,680
again there is no selenium library fault

00:17:12,240 --> 00:17:19,329
reactor so we created our own

00:17:15,680 --> 00:17:24,449
it is very similar to the chosen library

00:17:19,329 --> 00:17:28,779
but there is an existing library for

00:17:24,449 --> 00:17:32,860
HTML select when a developer uses actual

00:17:28,779 --> 00:17:35,440
HTML tab to create a big list there is a

00:17:32,860 --> 00:17:39,899
selenium library so we did not need to

00:17:35,440 --> 00:17:39,899
create anything for them so I have

00:17:43,510 --> 00:17:48,679
line 25

00:17:46,400 --> 00:17:52,250
so I create an instance of the chosen

00:17:48,679 --> 00:17:55,279
library and select by index four so

00:17:52,250 --> 00:17:58,190
whatever option is on index four it

00:17:55,279 --> 00:18:06,020
would be a celebrity right and you can

00:17:58,190 --> 00:18:09,010
also select by visible text so I'll just

00:18:06,020 --> 00:18:09,010
go ahead and run them

00:18:54,020 --> 00:19:01,260
so you can see how it works right so the

00:18:58,650 --> 00:19:03,480
benefit of doing this is now any other

00:19:01,260 --> 00:19:06,090
test automation engineer in my

00:19:03,480 --> 00:19:09,090
organization who is using a react select

00:19:06,090 --> 00:19:10,730
component is testing a react select

00:19:09,090 --> 00:19:14,070
component and there there can be

00:19:10,730 --> 00:19:16,860
multiple react select components in one

00:19:14,070 --> 00:19:19,950
when their foundation okay let's say we

00:19:16,860 --> 00:19:22,950
have a customer success member in an ad

00:19:19,950 --> 00:19:25,710
and it has six different reactive

00:19:22,950 --> 00:19:27,780
components so that person that test

00:19:25,710 --> 00:19:33,480
automation engineer does not have to

00:19:27,780 --> 00:19:37,620
create a new library now he can reuse

00:19:33,480 --> 00:19:40,230
this plus since the component is tested

00:19:37,620 --> 00:19:43,620
and the source itself there are no

00:19:40,230 --> 00:19:45,420
chances of the test breakage due to the

00:19:43,620 --> 00:19:47,970
actual component developers changing

00:19:45,420 --> 00:19:52,880
something at the backend if they change

00:19:47,970 --> 00:19:52,880
something if you look at this code

00:20:01,550 --> 00:20:08,300
so it is searching elements the list of

00:20:05,570 --> 00:20:13,250
elements by class by class name option

00:20:08,300 --> 00:20:16,490
let's say tomorrow the developers of the

00:20:13,250 --> 00:20:19,610
code developers of react change it from

00:20:16,490 --> 00:20:22,309
option to let's say Li they can do it

00:20:19,610 --> 00:20:25,250
right they are the owners so if we are

00:20:22,309 --> 00:20:27,440
not testing at the source itself

00:20:25,250 --> 00:20:29,780
it would break all the 20 web

00:20:27,440 --> 00:20:31,970
applications in your organization not

00:20:29,780 --> 00:20:34,580
the American itself but they're testing

00:20:31,970 --> 00:20:37,730
frameworks are testing for the tests

00:20:34,580 --> 00:20:42,110
right you avoid that but we'll do we

00:20:37,730 --> 00:20:45,230
create a sample page put the component

00:20:42,110 --> 00:20:49,820
in it put some hard coded data in it and

00:20:45,230 --> 00:20:52,760
test it on source then every test

00:20:49,820 --> 00:20:55,700
automation engineer who is part of the

00:20:52,760 --> 00:20:59,090
teams working in different web apps in

00:20:55,700 --> 00:21:03,070
your organization is at least shielded

00:20:59,090 --> 00:21:06,350
from those beta keys the thing with

00:21:03,070 --> 00:21:10,250
testing is that there are multiple

00:21:06,350 --> 00:21:13,380
chances of breaking right there is this

00:21:10,250 --> 00:21:15,570
browser and the Syrian emergency

00:21:13,380 --> 00:21:17,700
in compatibility there are other stuff

00:21:15,570 --> 00:21:22,019
there is a lot of other stuff which can

00:21:17,700 --> 00:21:24,330
break it so actual component level chain

00:21:22,019 --> 00:21:26,750
breaking your des is something which you

00:21:24,330 --> 00:21:26,750
don't know

00:21:27,400 --> 00:21:32,580
any questions so far

00:21:29,980 --> 00:21:32,580
all right

00:21:43,120 --> 00:21:49,809
see another benefit of testing the

00:21:45,309 --> 00:21:53,169
component at source is that your desktop

00:21:49,809 --> 00:21:56,940
the purpose of testing is not just test

00:21:53,169 --> 00:21:59,590
automation right you have to find

00:21:56,940 --> 00:22:05,230
coroner cases you have to break the app

00:21:59,590 --> 00:22:07,870
stuff like that once once breakage of s

00:22:05,230 --> 00:22:11,230
this problem goes out of mind of your QE

00:22:07,870 --> 00:22:14,220
then you can focus on probably under

00:22:11,230 --> 00:22:14,220
different things right

00:22:18,060 --> 00:22:21,350
I'll let any questions

00:22:37,760 --> 00:22:40,660
hello globe

00:22:41,790 --> 00:22:45,380
should be down hello

00:22:48,150 --> 00:22:54,630
so I was just this might be the wrong

00:22:51,059 --> 00:22:57,929
question to ask but what is the benefit

00:22:54,630 --> 00:23:00,659
of this or something like using Jess

00:22:57,929 --> 00:23:02,820
testing you know like the note package

00:23:00,659 --> 00:23:05,909
that allows for things like snapchat

00:23:02,820 --> 00:23:07,860
snapshot testing and end-to-end testing

00:23:05,909 --> 00:23:09,540
on any JavaScript into the front-end

00:23:07,860 --> 00:23:12,270
framework

00:23:09,540 --> 00:23:15,510
I don't think just does Android testing

00:23:12,270 --> 00:23:17,970
you and you need to have let's say let's

00:23:15,510 --> 00:23:20,490
say you are testing reacted right for

00:23:17,970 --> 00:23:23,000
integration test you can use just for

00:23:20,490 --> 00:23:25,650
end-to-end testing you still need to use

00:23:23,000 --> 00:23:27,750
something which has the private GS

00:23:25,650 --> 00:23:31,130
associated with it either Nightwatch or

00:23:27,750 --> 00:23:33,610
webdriver I or the plain out-of-the-box

00:23:31,130 --> 00:23:35,860
webdriver GS

00:23:33,610 --> 00:23:38,279
so until and unless there is selenium in

00:23:35,860 --> 00:23:41,639
it it won't open the browser and

00:23:38,279 --> 00:23:41,639
manipulate Saddam

00:23:45,110 --> 00:23:48,309
does it answer it

00:23:58,220 --> 00:24:01,390
any other questions

00:24:11,390 --> 00:24:17,270
see I do functionally to be testing on

00:24:14,990 --> 00:24:19,040
the Ceph dashboard so hypothetically for

00:24:17,270 --> 00:24:20,510
like a code coverage standpoint how

00:24:19,040 --> 00:24:27,470
would you be calculating that or

00:24:20,510 --> 00:24:28,160
anything about sort through it this is a

00:24:27,470 --> 00:24:31,120
tricky thing

00:24:28,160 --> 00:24:34,070
so there is there is one tool called

00:24:31,120 --> 00:24:36,350
Java code coverage so there is a plugin

00:24:34,070 --> 00:24:38,780
which you put in your repo and then you

00:24:36,350 --> 00:24:41,540
run your front-end test so based on

00:24:38,780 --> 00:24:43,100
which paths you are taking while running

00:24:41,540 --> 00:24:45,640
your front-end tests it gives you some

00:24:43,100 --> 00:24:50,480
sort of code coverage but that's not

00:24:45,640 --> 00:24:51,890
something to be very that's not

00:24:50,480 --> 00:24:55,670
something which is very reliable and

00:24:51,890 --> 00:24:58,130
from C we honest so code coverage thing

00:24:55,670 --> 00:25:01,030
is mostly done on the unit test or an

00:24:58,130 --> 00:25:01,030
integration test run

00:25:14,130 --> 00:25:22,230
right then anchor1 and just to let you

00:25:18,030 --> 00:25:25,290
know that this these both this app as

00:25:22,230 --> 00:25:28,110
well as these libraries so if and if

00:25:25,290 --> 00:25:31,050
anyone of you is using react are chosen

00:25:28,110 --> 00:25:34,230
in there I know most of the erudite apps

00:25:31,050 --> 00:25:35,940
use three act as unless chosen T that

00:25:34,230 --> 00:25:39,660
had customer portal users chosen drop

00:25:35,940 --> 00:25:42,540
dogs so if you are using any of these so

00:25:39,660 --> 00:25:46,830
these things are on the hub feel free to

00:25:42,540 --> 00:25:51,060
use them I'll probably paste this in

00:25:46,830 --> 00:25:56,550
paste a link in my presentation

00:25:51,060 --> 00:25:58,610
or you do check all right thank you

00:25:56,550 --> 00:25:58,610

YouTube URL: https://www.youtube.com/watch?v=0eVXu__76Uc


