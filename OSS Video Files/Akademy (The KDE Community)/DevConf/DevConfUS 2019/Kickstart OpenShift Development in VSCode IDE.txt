Title: Kickstart OpenShift Development in VSCode IDE
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speaker: Shoubhik Bose

IDE based extension to run the instance of OpenShift on local machine. Easy to use all OpenShift related command in VSCode to create, building, and deploying an application on OpenShift.

Key points:
1. OpenShift VSCode IDE base extension and it's Dependency.
2. Ease installation of extension from VSCode Market Place.
3. How to create Project, application, component, Services, Storage and more in OpenShift VSCode extension (Demo)

Link: https://github.com/redhat-developer/vscode-openshift-tools
Captions: 
	00:00:05,149 --> 00:00:08,090
good morning I'm shopping I work for Red

00:00:07,609 --> 00:00:10,910
Hat

00:00:08,090 --> 00:00:14,030
I work as an engineering architect and

00:00:10,910 --> 00:00:16,869
lead for the Red Hat developer group my

00:00:14,030 --> 00:00:18,950
job is to lead teams to ensure that

00:00:16,869 --> 00:00:21,050
developers are empowered to build

00:00:18,950 --> 00:00:23,510
tooling and applications without having

00:00:21,050 --> 00:00:25,010
to worry about things that the students

00:00:23,510 --> 00:00:27,830
will be worrying about and should be

00:00:25,010 --> 00:00:30,320
done for them for example open shift and

00:00:27,830 --> 00:00:32,000
kubernetes we know it's powerful but

00:00:30,320 --> 00:00:35,510
it's complex there is a huge learning

00:00:32,000 --> 00:00:36,800
curve if you knew how to use it well if

00:00:35,510 --> 00:00:39,309
you have the right tools you could build

00:00:36,800 --> 00:00:42,350
really powerful applications with that

00:00:39,309 --> 00:00:44,929
my presentation will be on how you could

00:00:42,350 --> 00:00:50,659
develop on openshift using your base

00:00:44,929 --> 00:00:53,269
coat ID we'll have this problem often

00:00:50,659 --> 00:00:54,679
that hey this was fine when I run it in

00:00:53,269 --> 00:00:56,749
my local but the night when a particular

00:00:54,679 --> 00:00:57,499
container and then when I ran it on

00:00:56,749 --> 00:01:00,559
OpenShift

00:00:57,499 --> 00:01:02,719
or to Banaras it did work quite well so

00:01:00,559 --> 00:01:04,659
the problem we wanted to solve with

00:01:02,719 --> 00:01:07,700
containers and Cuban Edison openshift

00:01:04,659 --> 00:01:09,140
came back which means you still have the

00:01:07,700 --> 00:01:10,550
problem of some things working locally

00:01:09,140 --> 00:01:14,150
because you didn't have the right

00:01:10,550 --> 00:01:16,460
tooling to emulate how a deployed

00:01:14,150 --> 00:01:19,070
environment would look like and then

00:01:16,460 --> 00:01:20,780
yeah you didn't have a problem of how do

00:01:19,070 --> 00:01:24,410
how do I ensure my code changes can

00:01:20,780 --> 00:01:26,510
quickly be live on a cluster our typical

00:01:24,410 --> 00:01:29,780
method for that would be to write code

00:01:26,510 --> 00:01:31,820
locally you do a build up build or a

00:01:29,780 --> 00:01:34,370
docker bill and they recreate an image

00:01:31,820 --> 00:01:35,840
you push it somewhere and then you go

00:01:34,370 --> 00:01:38,630
and pull it and run it on your cluster

00:01:35,840 --> 00:01:40,400
so for a small code change you would

00:01:38,630 --> 00:01:41,870
actually have to do all these steps to

00:01:40,400 --> 00:01:44,680
be able to see it running live elope and

00:01:41,870 --> 00:01:48,430
shift or kubernetes for that matter

00:01:44,680 --> 00:01:49,990
but then that looks like a solution

00:01:48,430 --> 00:01:51,520
which nobody would technically use

00:01:49,990 --> 00:01:53,890
because it's too long so what they would

00:01:51,520 --> 00:01:56,440
potentially do is work on a project for

00:01:53,890 --> 00:01:58,090
three months and throw it out the DevOps

00:01:56,440 --> 00:02:04,030
folks to try it out and run it on open

00:01:58,090 --> 00:02:07,960
shave to our communities so what we do

00:02:04,030 --> 00:02:09,729
is we actually work on multiple ways to

00:02:07,960 --> 00:02:12,160
take your source code and create a

00:02:09,729 --> 00:02:14,710
container out of it one way is called a

00:02:12,160 --> 00:02:16,600
source to image which is effectively we

00:02:14,710 --> 00:02:20,350
have a nice framework to say here is my

00:02:16,600 --> 00:02:22,480
source code and this is a no J source so

00:02:20,350 --> 00:02:24,580
we can take out the node.js builder

00:02:22,480 --> 00:02:26,110
image and then we smash those two

00:02:24,580 --> 00:02:28,660
together and we say here is your

00:02:26,110 --> 00:02:31,750
application container image that we just

00:02:28,660 --> 00:02:34,000
created off for you which has which has

00:02:31,750 --> 00:02:36,160
all the checks and balances in place and

00:02:34,000 --> 00:02:39,570
that can be now deployed on your

00:02:36,160 --> 00:02:42,070
environment so this framework lets us do

00:02:39,570 --> 00:02:45,930
motion images just like you would do for

00:02:42,070 --> 00:02:45,930
anything else like your code

00:02:48,340 --> 00:02:52,540
and then what we did is we connected

00:02:50,290 --> 00:02:55,870
that with vs code so that you could

00:02:52,540 --> 00:02:58,060
potentially stay within your vs code and

00:02:55,870 --> 00:03:00,250
not have to leave your the comfort

00:02:58,060 --> 00:03:02,230
comfort of your developer tooling to be

00:03:00,250 --> 00:03:08,980
able to use this so let's see how it

00:03:02,230 --> 00:03:10,540
goes so what we effectively do is which

00:03:08,980 --> 00:03:12,819
I'm going to show you in a minute is

00:03:10,540 --> 00:03:15,880
that you could either run here open

00:03:12,819 --> 00:03:18,640
shift somewhere else which is not on

00:03:15,880 --> 00:03:22,930
your local or on mini shift which is on

00:03:18,640 --> 00:03:25,810
your laptop you could use like a cube

00:03:22,930 --> 00:03:27,790
GTL or an OC command line to talk to it

00:03:25,810 --> 00:03:29,470
and then there's another tool on top of

00:03:27,790 --> 00:03:31,690
it which we built called open shave do

00:03:29,470 --> 00:03:34,269
which abstracts out all the cuban

00:03:31,690 --> 00:03:38,140
artists and open shave troubles for you

00:03:34,269 --> 00:03:39,819
which means to create a normal route or

00:03:38,140 --> 00:03:41,830
let's say to deploy an Apple application

00:03:39,819 --> 00:03:43,630
and reach it and open shift you have to

00:03:41,830 --> 00:03:44,650
effectively do a build of that

00:03:43,630 --> 00:03:46,299
application you have to push it

00:03:44,650 --> 00:03:49,180
somewhere you have to have a deployment

00:03:46,299 --> 00:03:50,890
which is to use that image and build

00:03:49,180 --> 00:03:52,540
pods for you and then you need to create

00:03:50,890 --> 00:03:55,209
a service and then you'd create a robot

00:03:52,540 --> 00:03:56,650
fight that's really a lot of things for

00:03:55,209 --> 00:03:59,470
a developer who just wants to get

00:03:56,650 --> 00:04:01,630
started and get it running so what we

00:03:59,470 --> 00:04:04,630
did is we built a solution where we said

00:04:01,630 --> 00:04:07,120
ok you're any obvious code you just say

00:04:04,630 --> 00:04:09,519
push to open shift and we do all that

00:04:07,120 --> 00:04:12,190
for you and then you say hey get me a

00:04:09,519 --> 00:04:15,450
URL we create a service on a route and

00:04:12,190 --> 00:04:15,450
wire it up with a pod for that

00:04:16,739 --> 00:04:20,720
let's take a look at a demo for that

00:04:26,860 --> 00:04:32,830
so the OpenShift connector sits nicely

00:04:29,379 --> 00:04:35,050
on your waistcoat it's a it's a next X

00:04:32,830 --> 00:04:39,699
extension you can install for free from

00:04:35,050 --> 00:04:41,500
the marketplace it detects if you have a

00:04:39,699 --> 00:04:43,599
cluster you're already connected to if

00:04:41,500 --> 00:04:45,819
not you could connect to it using the

00:04:43,599 --> 00:04:48,460
general Q Benares openshift ways of

00:04:45,819 --> 00:04:49,810
connecting to a cluster so what I'm

00:04:48,460 --> 00:04:52,659
going to do is I'm going to start with

00:04:49,810 --> 00:04:59,319
creating a namespace or a project let's

00:04:52,659 --> 00:05:01,210
say call it Boston one then what I'm

00:04:59,319 --> 00:05:02,949
gonna do is I'm gonna say I need a new

00:05:01,210 --> 00:05:04,750
application now we get the concept of

00:05:02,949 --> 00:05:07,620
applications and components an

00:05:04,750 --> 00:05:10,930
application is effectively let's say

00:05:07,620 --> 00:05:13,300
your power circuit management

00:05:10,930 --> 00:05:15,819
application which can have tons of

00:05:13,300 --> 00:05:19,930
services inside sarita billing service a

00:05:15,819 --> 00:05:22,629
customer grievance service or

00:05:19,930 --> 00:05:24,340
maintenance services Center its own

00:05:22,629 --> 00:05:26,830
application is an aggregation of

00:05:24,340 --> 00:05:29,770
multiple micro services which together

00:05:26,830 --> 00:05:32,680
do something we look at the solve a

00:05:29,770 --> 00:05:35,349
business case I would say so let's enter

00:05:32,680 --> 00:05:38,529
in an application inside my project or

00:05:35,349 --> 00:05:40,590
namespace and kubernetes so I'll call

00:05:38,529 --> 00:05:40,590
this

00:05:45,650 --> 00:05:50,240
our circuit management so I can see I

00:05:47,510 --> 00:05:52,370
have a new application here but this is

00:05:50,240 --> 00:05:54,050
just an abstraction and aggregation that

00:05:52,370 --> 00:05:57,020
does this just nice really have anything

00:05:54,050 --> 00:05:59,290
running yet so what I do is I'll go and

00:05:57,020 --> 00:05:59,290
say hey

00:06:06,980 --> 00:06:11,630
I'd like to create a new component there

00:06:08,900 --> 00:06:15,770
which means now you'd really like to

00:06:11,630 --> 00:06:18,080
have a workload associated with it so

00:06:15,770 --> 00:06:19,550
I'd say let's go for a good repository

00:06:18,080 --> 00:06:21,170
you could do this for multiple ways but

00:06:19,550 --> 00:06:25,490
it start with a good repository and I'll

00:06:21,170 --> 00:06:30,440
say I have a node.js application which

00:06:25,490 --> 00:06:33,110
is on my washing control and I'd like to

00:06:30,440 --> 00:06:35,840
deploy that

00:06:33,110 --> 00:06:38,020
and it'll quickly ask ok which brands do

00:06:35,840 --> 00:06:40,729
you really need to deploy and I said

00:06:38,020 --> 00:06:42,770
master and then I'll come up with a nice

00:06:40,729 --> 00:06:47,710
name so let's say this is the billing

00:06:42,770 --> 00:06:47,710
service of that bigger application

00:06:48,749 --> 00:06:54,239
and the component type it automatically

00:06:50,969 --> 00:06:56,309
gives me a list of I mean in technical

00:06:54,239 --> 00:06:58,469
terms it gives me a list of possible

00:06:56,309 --> 00:07:00,869
builder images it could use to build my

00:06:58,469 --> 00:07:03,749
application so I say it's a node.js

00:07:00,869 --> 00:07:05,189
application awesome and then little

00:07:03,749 --> 00:07:06,929
further we have the option to build

00:07:05,189 --> 00:07:10,739
multiple versions of node applications I

00:07:06,929 --> 00:07:12,029
say 10 and then it also asked me on the

00:07:10,739 --> 00:07:13,499
bottom right that do you want really

00:07:12,029 --> 00:07:16,319
clone it locally or do you wanna just

00:07:13,499 --> 00:07:17,549
deploy and I said I'm fine I just go

00:07:16,319 --> 00:07:21,389
ahead with deploying the application

00:07:17,549 --> 00:07:25,159
which means so what I'm doing which

00:07:21,389 --> 00:07:25,159
printed out here in the logs below is

00:07:25,579 --> 00:07:31,739
I'm effectively creating a component

00:07:30,149 --> 00:07:34,919
what that effectively does is it checks

00:07:31,739 --> 00:07:37,319
out your code it takes the source and

00:07:34,919 --> 00:07:38,669
creates an image out of it you didn't

00:07:37,319 --> 00:07:39,899
have to worry about docker build you

00:07:38,669 --> 00:07:41,309
didn't have to worry about learning what

00:07:39,899 --> 00:07:44,129
containers do you didn't have to worry

00:07:41,309 --> 00:07:46,379
about po CI or anything else you just

00:07:44,129 --> 00:07:48,689
gave your source code you said it's a

00:07:46,379 --> 00:07:52,619
node.js source code and it's off wash

00:07:48,689 --> 00:07:55,829
and 10 and it did the rest for you so

00:07:52,619 --> 00:07:57,779
let's quickly take a look at that

00:07:55,829 --> 00:08:00,349
namespace and the project in my open

00:07:57,779 --> 00:08:00,349
chef clusters

00:08:09,120 --> 00:08:14,280
I can see it's something got deployed

00:08:11,010 --> 00:08:17,639
here and if I click here I can see that

00:08:14,280 --> 00:08:20,690
it's a billing service for it's a

00:08:17,639 --> 00:08:23,250
billing service for circuit management

00:08:20,690 --> 00:08:24,900
so it's a billing service inside this

00:08:23,250 --> 00:08:27,990
application so which is why it appended

00:08:24,900 --> 00:08:29,460
the name it has a pod it is running a

00:08:27,990 --> 00:08:32,580
deployment config if you're familiar

00:08:29,460 --> 00:08:35,460
with Cuban net is and if you see the

00:08:32,580 --> 00:08:39,750
resources yeah it has created a service

00:08:35,460 --> 00:08:41,010
as well in Cuba netis that's it so it

00:08:39,750 --> 00:08:42,770
did a bunch of things for you without

00:08:41,010 --> 00:08:45,839
you having to really tell Cuban ettus

00:08:42,770 --> 00:08:47,040
explicitly to do all these things and

00:08:45,839 --> 00:08:48,420
now I wouldn't try out how my

00:08:47,040 --> 00:08:52,080
application looks like so what I'll do

00:08:48,420 --> 00:08:54,600
is I'll say I want to I want to new URL

00:08:52,080 --> 00:08:56,490
and then what the factory does is it

00:08:54,600 --> 00:08:59,570
goes and creates a route for me so I'll

00:08:56,490 --> 00:09:02,750
say I want to call this you know

00:08:59,570 --> 00:09:02,750
customer facing

00:09:03,220 --> 00:09:08,560
URL so that I know that I I could

00:09:05,650 --> 00:09:10,810
possibly have some ports which should be

00:09:08,560 --> 00:09:12,370
specifically being used internally and

00:09:10,810 --> 00:09:16,720
not for the customer sign name it as a

00:09:12,370 --> 00:09:18,610
customer facing URL and then right here

00:09:16,720 --> 00:09:21,070
I could click here and it will take me

00:09:18,610 --> 00:09:24,160
to the deployed application which I just

00:09:21,070 --> 00:09:26,440
took from source idea all all I did was

00:09:24,160 --> 00:09:28,120
I wanted apply the source code and this

00:09:26,440 --> 00:09:30,250
is node.js project so you know and it's

00:09:28,120 --> 00:09:33,310
Washington and then I created my

00:09:30,250 --> 00:09:34,360
deployment config or deployment that

00:09:33,310 --> 00:09:36,490
deployed the pods

00:09:34,360 --> 00:09:38,260
it created a service out of it and then

00:09:36,490 --> 00:09:40,030
I said I want to be able to access it

00:09:38,260 --> 00:09:42,520
using your URL what it did is it went

00:09:40,030 --> 00:09:48,010
and created a kubernetes route for me or

00:09:42,520 --> 00:09:49,810
nobody fought for me well good and then

00:09:48,010 --> 00:09:52,170
now I can't repeat the same thing again

00:09:49,810 --> 00:09:54,550
inside the same application which is

00:09:52,170 --> 00:09:56,440
let's say I'd I do the same thing I

00:09:54,550 --> 00:09:58,680
deploy another different application

00:09:56,440 --> 00:09:58,680
here

00:10:07,680 --> 00:10:17,900
and I could keep doing this on and on

00:10:11,839 --> 00:10:17,900
let's say this is grievance

00:10:18,430 --> 00:10:21,360
service

00:10:22,140 --> 00:10:28,460
and again it's a no Jess

00:10:26,420 --> 00:10:30,350
application and then I said no I'm not

00:10:28,460 --> 00:10:32,390
interested in making changes to the code

00:10:30,350 --> 00:10:34,670
I just wanted to apply it so that's what

00:10:32,390 --> 00:10:38,000
it goes and does it creates everything

00:10:34,670 --> 00:10:39,620
coming and then I can go in and say hey

00:10:38,000 --> 00:10:42,020
there is a second application which just

00:10:39,620 --> 00:10:43,790
showed up here and then I could if I'm a

00:10:42,020 --> 00:10:44,420
developer who also knows kubernetes

00:10:43,790 --> 00:10:45,530
OpenShift

00:10:44,420 --> 00:10:47,930
but doesn't want to deal with it all day

00:10:45,530 --> 00:10:50,870
I could use vs code for deploying things

00:10:47,930 --> 00:10:52,880
and then go in here and dig deeper as

00:10:50,870 --> 00:10:56,060
much as I want in the world of cuban

00:10:52,880 --> 00:10:57,770
ettus so there you go I just

00:10:56,060 --> 00:11:00,410
demonstrated to you that you could take

00:10:57,770 --> 00:11:02,650
any source code inside your race car ID

00:11:00,410 --> 00:11:04,970
and deploy it on openshift

00:11:02,650 --> 00:11:09,110
without having to leave the comfort of

00:11:04,970 --> 00:11:11,540
your ID so this is kind of more of the

00:11:09,110 --> 00:11:13,970
outer loop development not exactly our

00:11:11,540 --> 00:11:15,440
outer loop it's so so we have two forms

00:11:13,970 --> 00:11:17,630
of development one is inner loop and

00:11:15,440 --> 00:11:19,730
outer loop inner loop is effectively

00:11:17,630 --> 00:11:21,500
you're making code changes and you want

00:11:19,730 --> 00:11:23,630
to see see the changes live in some URL

00:11:21,500 --> 00:11:26,000
outer loop is effectively you're making

00:11:23,630 --> 00:11:28,610
code commits that hits your CI solution

00:11:26,000 --> 00:11:30,410
tells you your code is good and then you

00:11:28,610 --> 00:11:32,930
choose to deploy it that becomes your CD

00:11:30,410 --> 00:11:35,840
but today we're focusing on the inner

00:11:32,930 --> 00:11:37,430
loop which means I have source code and

00:11:35,840 --> 00:11:39,500
I want to be able to quickly write rate

00:11:37,430 --> 00:11:41,090
on top of it one of the first things

00:11:39,500 --> 00:11:43,550
that I want to do is I have a nice

00:11:41,090 --> 00:11:45,530
github project I want to quickly deploy

00:11:43,550 --> 00:11:47,600
an open shape from my waistcoat and see

00:11:45,530 --> 00:11:50,000
if it works so we saw it works and now

00:11:47,600 --> 00:11:51,860
what we'll do is we'll try to wire

00:11:50,000 --> 00:11:53,660
things up make some mistakes and then

00:11:51,860 --> 00:11:56,080
see how can we come back and get it

00:11:53,660 --> 00:11:56,080
still running

00:11:57,850 --> 00:12:02,390
so let's say we create another

00:12:00,200 --> 00:12:03,800
application or let's say we have the

00:12:02,390 --> 00:12:08,570
grievant service here which we just

00:12:03,800 --> 00:12:10,760
applied and I think that needed our

00:12:08,570 --> 00:12:14,930
database so let's see we'll see how it

00:12:10,760 --> 00:12:17,600
goes here let me figure out our way to

00:12:14,930 --> 00:12:20,560
reach the application let's say again

00:12:17,600 --> 00:12:20,560
customer-facing

00:12:20,819 --> 00:12:23,819
route

00:12:29,060 --> 00:12:34,880
yeah it's a typical you know a fruit

00:12:32,900 --> 00:12:36,920
stock management app application which I

00:12:34,880 --> 00:12:42,320
try to let's let's add a future old

00:12:36,920 --> 00:12:46,280
mango for and the moment I try to save

00:12:42,320 --> 00:12:49,730
it it says a given vo deader and the fog

00:12:46,280 --> 00:12:56,180
went and dug into the logs of this so

00:12:49,730 --> 00:13:03,140
let's say this one it said that it had

00:12:56,180 --> 00:13:05,420
some trouble connecting to 127 0.1 it's

00:13:03,140 --> 00:13:07,220
5 4 3 2 so the typical guess would be

00:13:05,420 --> 00:13:09,770
trying to connect to a possible sequel

00:13:07,220 --> 00:13:11,390
database and it doesn't have one so so

00:13:09,770 --> 00:13:15,380
let's see how our developer would go

00:13:11,390 --> 00:13:18,770
about fixing this so let's say I am in

00:13:15,380 --> 00:13:20,420
my own namespace here so let's say I

00:13:18,770 --> 00:13:23,830
just got a fresh namespace where I'll

00:13:20,420 --> 00:13:23,830
deploy things from the scratch

00:13:25,959 --> 00:13:34,860
public call back Sharon let's say

00:13:29,770 --> 00:13:34,860
I have my project I did

00:13:36,940 --> 00:13:40,750
good clone so I have my source code with

00:13:39,520 --> 00:13:44,200
me now

00:13:40,750 --> 00:13:47,080
I entered here my code looks good

00:13:44,200 --> 00:13:50,100
and then as a developer I would open the

00:13:47,080 --> 00:13:50,100
code in this vs code

00:13:51,940 --> 00:13:57,510
I have it here I'll quickly look at my

00:13:54,550 --> 00:13:57,510
openshift cluster

00:13:59,930 --> 00:14:04,220
right I could access so much of cluster

00:14:02,210 --> 00:14:06,710
which I was using and the other instance

00:14:04,220 --> 00:14:08,720
obvious code and what I do is let's say

00:14:06,710 --> 00:14:12,690
I am in a developer namespace it's like

00:14:08,720 --> 00:14:14,819
dev boss for example

00:14:12,690 --> 00:14:17,940
and then I say hey I want to create a

00:14:14,819 --> 00:14:20,490
new application which is nothing but

00:14:17,940 --> 00:14:24,810
workspace for mice for my stuff to go in

00:14:20,490 --> 00:14:27,000
I said hey I want a new component and

00:14:24,810 --> 00:14:29,519
I'd like to use the workspace directory

00:14:27,000 --> 00:14:31,170
for that which means I'm not going for

00:14:29,519 --> 00:14:34,579
github jor-el I have some source code

00:14:31,170 --> 00:14:37,740
and my local and I want to use that

00:14:34,579 --> 00:14:40,199
that's how it found out the source code

00:14:37,740 --> 00:14:45,319
which we used and sent the same thing

00:14:40,199 --> 00:14:45,319
let's say fruit stock manager

00:14:48,620 --> 00:14:55,200
turned out to be an odious thing and I'd

00:14:51,270 --> 00:14:57,420
say the type version 10 and so what I'm

00:14:55,200 --> 00:14:59,100
doing is I'm actually starting with you

00:14:57,420 --> 00:15:01,500
know doing the initial deployment of my

00:14:59,100 --> 00:15:03,570
application in a separate workspace see

00:15:01,500 --> 00:15:06,140
it fail and then then as I go in going

00:15:03,570 --> 00:15:06,140
and fixing it

00:15:09,080 --> 00:15:14,450
stay slightly longer because it's

00:15:12,160 --> 00:15:16,959
starting more complex application than

00:15:14,450 --> 00:15:16,959
the first one

00:15:19,470 --> 00:15:25,339
meantime let's visit the namespace which

00:15:22,379 --> 00:15:25,339
I just created

00:15:32,580 --> 00:15:36,570
I can see things moving here and then I

00:15:35,190 --> 00:15:38,850
go to the topology and I can see

00:15:36,570 --> 00:15:39,960
something has worked out right so it

00:15:38,850 --> 00:15:41,270
looks like the application has been

00:15:39,960 --> 00:15:44,270
deployed

00:15:41,270 --> 00:15:44,270
almost

00:15:51,530 --> 00:15:56,420
in the meantime I could go and look at

00:15:53,930 --> 00:15:59,210
one of the countries where different

00:15:56,420 --> 00:16:04,460
resources associated with it there's a

00:15:59,210 --> 00:16:06,580
pod here yeah you could see a bunch of

00:16:04,460 --> 00:16:09,140
things mounted here this is this is

00:16:06,580 --> 00:16:11,060
effectively your vs code plug-in

00:16:09,140 --> 00:16:14,030
injecting a bunch of things there to

00:16:11,060 --> 00:16:15,770
actually make it quicker for you to

00:16:14,030 --> 00:16:18,920
write code locally and mount it or

00:16:15,770 --> 00:16:21,350
volume on your cluster and instead of

00:16:18,920 --> 00:16:23,420
having to really build it push it to

00:16:21,350 --> 00:16:25,610
external registry and then pull it so

00:16:23,420 --> 00:16:28,010
that's what it does right it says

00:16:25,610 --> 00:16:31,780
successfully all changes have been

00:16:28,010 --> 00:16:34,400
pushed to this component and let me

00:16:31,780 --> 00:16:37,450
simulate the production issue which we

00:16:34,400 --> 00:16:37,450
just saw and say

00:16:37,680 --> 00:16:43,770
Jeff URL and that should go in and

00:16:41,730 --> 00:16:45,540
create a way for me to access my

00:16:43,770 --> 00:16:49,790
application which I know doesn't work

00:16:45,540 --> 00:16:54,560
for now so I said this and doesn't work

00:16:49,790 --> 00:16:57,420
so what I do now so I go in and I

00:16:54,560 --> 00:16:59,040
realized that I showed you that it's

00:16:57,420 --> 00:17:01,680
probably looking for database to connect

00:16:59,040 --> 00:17:05,040
you but it doesn't have one so I'll do

00:17:01,680 --> 00:17:08,010
it from within the comfort of my ID I'm

00:17:05,040 --> 00:17:11,370
going to quickly deploy a mice possible

00:17:08,010 --> 00:17:14,280
sequel to database it's got my workspace

00:17:11,370 --> 00:17:17,580
I say new service and there are a bunch

00:17:14,280 --> 00:17:20,510
of different service templates I go for

00:17:17,580 --> 00:17:20,510
possible sequel

00:17:20,750 --> 00:17:29,799
then I'll say this is the fruit division

00:17:25,159 --> 00:17:29,799
this what we recognize what it is

00:17:32,400 --> 00:17:39,930
so what it is doing for us it is taking

00:17:35,880 --> 00:17:42,240
an image of Oscar sequel and running it

00:17:39,930 --> 00:17:45,450
on your cluster and making it available

00:17:42,240 --> 00:17:46,890
for you to bind to your application the

00:17:45,450 --> 00:17:49,530
next step what we'll do is bind it of

00:17:46,890 --> 00:17:53,490
course but we'll wait for the positive

00:17:49,530 --> 00:17:56,760
sequel service to come up we can of

00:17:53,490 --> 00:17:59,070
course monitor that in our cluster we

00:17:56,760 --> 00:18:00,690
could see there's something there's a

00:17:59,070 --> 00:18:03,240
pause Chris equal which is showing up

00:18:00,690 --> 00:18:06,390
here we could all again do some more

00:18:03,240 --> 00:18:08,070
advanced views and we can see there's a

00:18:06,390 --> 00:18:10,230
part and there's a service that is here

00:18:08,070 --> 00:18:13,100
and it's successfully created which

00:18:10,230 --> 00:18:16,050
means my database is here so I can see

00:18:13,100 --> 00:18:18,600
nice visualization here saying that this

00:18:16,050 --> 00:18:20,760
is a database it's called through DB but

00:18:18,600 --> 00:18:22,290
then fair enough I have it but that

00:18:20,760 --> 00:18:24,210
doesn't solve my problems I need to

00:18:22,290 --> 00:18:26,820
ensure that my service can talk to my

00:18:24,210 --> 00:18:30,450
database so I'm going to do is I'm gonna

00:18:26,820 --> 00:18:33,180
go go here and say I want to link a

00:18:30,450 --> 00:18:34,770
service that will say which one through

00:18:33,180 --> 00:18:39,120
DB because there's only one you have

00:18:34,770 --> 00:18:43,050
there I said yes it's effectively doing

00:18:39,120 --> 00:18:46,650
is it's creating environment variables

00:18:43,050 --> 00:18:50,100
in my pod for fruit stock manager so

00:18:46,650 --> 00:18:52,550
that it can connect to the database so

00:18:50,100 --> 00:18:54,710
what what we'll check is

00:18:52,550 --> 00:18:56,660
it says the link service so it's trying

00:18:54,710 --> 00:18:59,240
to link it on on the bottom right you

00:18:56,660 --> 00:19:01,429
can see it's in progress so behind the

00:18:59,240 --> 00:19:08,570
scenes if you are a human at its nerd

00:19:01,429 --> 00:19:13,309
what it's effectively doing is using an

00:19:08,570 --> 00:19:16,600
admission the book it is injecting your

00:19:13,309 --> 00:19:18,920
environment variables into your pod and

00:19:16,600 --> 00:19:21,470
restarting them so that next time your

00:19:18,920 --> 00:19:23,900
pod comes up that your your fruit stock

00:19:21,470 --> 00:19:28,490
manager it has all those environment

00:19:23,900 --> 00:19:30,320
variables injected in them and yeah to

00:19:28,490 --> 00:19:32,660
do so it creates a secret and then it

00:19:30,320 --> 00:19:34,730
basically mounts that secret into your

00:19:32,660 --> 00:19:37,160
container and that's how you get to get

00:19:34,730 --> 00:19:40,240
get your environment variables but then

00:19:37,160 --> 00:19:44,679
I would expect stuff to work let's say

00:19:40,240 --> 00:19:44,679
now it says the binding is done and I

00:19:49,390 --> 00:19:57,670
let me just hit the same URL again and I

00:19:53,050 --> 00:20:00,970
see still nothing shows up just a little

00:19:57,670 --> 00:20:04,870
walk let's go ahead and see what's going

00:20:00,970 --> 00:20:09,250
wrong here here is a pod I could check

00:20:04,870 --> 00:20:14,140
logs here on my cluster or I could also

00:20:09,250 --> 00:20:15,520
go in here and say show log and it could

00:20:14,140 --> 00:20:17,050
show me log writing my base coat as well

00:20:15,520 --> 00:20:19,930
I don't really have to go to cluster but

00:20:17,050 --> 00:20:22,630
then I keep going there so it tells me

00:20:19,930 --> 00:20:24,730
similar things that you know I couldn't

00:20:22,630 --> 00:20:26,470
connect to the database no I'm sorry to

00:20:24,730 --> 00:20:28,690
wonder probably I need some code changes

00:20:26,470 --> 00:20:34,960
here it's an awesome that should not be

00:20:28,690 --> 00:20:37,090
a problem so I go to my code and then I

00:20:34,960 --> 00:20:38,860
say hey this is looking for an

00:20:37,090 --> 00:20:41,230
environment variable called my database

00:20:38,860 --> 00:20:45,250
service host it's looking for DB

00:20:41,230 --> 00:20:47,320
username for DB password it's assumes

00:20:45,250 --> 00:20:49,180
that the database name is my data the

00:20:47,320 --> 00:20:51,670
title of assumptions of code is making

00:20:49,180 --> 00:20:54,070
now as a developer this is very start by

00:20:51,670 --> 00:20:55,360
creating on my code and I see changes so

00:20:54,070 --> 00:20:57,040
the first thing I'll say okay what more

00:20:55,360 --> 00:20:58,600
than my line and I mean variables that

00:20:57,040 --> 00:21:00,820
got mounted because I because they have

00:20:58,600 --> 00:21:06,190
to match with this so go to a cluster

00:21:00,820 --> 00:21:09,490
again I just quickly do an M or I do an

00:21:06,190 --> 00:21:11,760
end for squares and see you are one of

00:21:09,490 --> 00:21:11,760
the things

00:21:19,130 --> 00:21:24,049
yes oh I see a bunch of these and moment

00:21:21,980 --> 00:21:26,299
variables have been mounted here awesome

00:21:24,049 --> 00:21:29,500
so I should probably make some of my

00:21:26,299 --> 00:21:29,500
code changes based on that

00:21:32,940 --> 00:21:40,590
right so it needs a process equal

00:21:38,399 --> 00:21:43,519
service host so I'll probably go and

00:21:40,590 --> 00:21:43,519
modify this

00:21:45,510 --> 00:21:54,150
I should be good because it should be

00:21:48,120 --> 00:21:56,700
able to read it let's try it out so how

00:21:54,150 --> 00:21:58,710
do I now push my changes there

00:21:56,700 --> 00:22:00,929
in a typical world you do a dollar bill

00:21:58,710 --> 00:22:02,700
or a build up build push it somewhere

00:22:00,929 --> 00:22:04,140
and then go in there and enjoy your

00:22:02,700 --> 00:22:05,460
image get submitted into your pod and

00:22:04,140 --> 00:22:07,910
then you should run it but what I do is

00:22:05,460 --> 00:22:11,220
since I'm using Gopal ship connector I

00:22:07,910 --> 00:22:14,030
could click on and say push and that's

00:22:11,220 --> 00:22:17,400
it it's gonna take my code changes and

00:22:14,030 --> 00:22:19,590
push them into my cluster get my pod up

00:22:17,400 --> 00:22:21,330
and running and I should be able to see

00:22:19,590 --> 00:22:24,470
those changes in which may or may not

00:22:21,330 --> 00:22:24,470
work we will find out

00:22:30,669 --> 00:22:37,940
yeah you can always go back to your

00:22:33,529 --> 00:22:41,529
cluster and see things happening in real

00:22:37,940 --> 00:22:41,529
time so what this does is

00:22:42,430 --> 00:22:47,750
yeah it says it has it has successfully

00:22:45,320 --> 00:22:50,090
pushed my changes to the component so I

00:22:47,750 --> 00:22:52,540
would now expect things to be working

00:22:50,090 --> 00:22:52,540
let's see

00:22:54,560 --> 00:22:57,970
bunch of these show

00:22:59,130 --> 00:23:05,490
oops Jill doesn't work I do the same

00:23:02,760 --> 00:23:09,200
debugging dance again when I go in here

00:23:05,490 --> 00:23:09,200
and I say show me the logs

00:23:09,900 --> 00:23:15,150
it doesn't complain about not being able

00:23:13,860 --> 00:23:16,710
to read a database so now it's

00:23:15,150 --> 00:23:18,809
complaining about I can reach the

00:23:16,710 --> 00:23:22,440
database but the authentication doesn't

00:23:18,809 --> 00:23:25,020
work some say hey come on know what I do

00:23:22,440 --> 00:23:27,570
here is say yeah I'll probably again go

00:23:25,020 --> 00:23:29,789
back to my node and see hey you know

00:23:27,570 --> 00:23:32,870
what are the environment variables you

00:23:29,789 --> 00:23:32,870
have given from a username password

00:23:33,289 --> 00:23:38,400
which I say hey and then let's let's say

00:23:36,240 --> 00:23:41,240
there's something called username it

00:23:38,400 --> 00:23:41,240
does look like

00:23:41,330 --> 00:23:44,509
yeah there's something called used

00:23:42,919 --> 00:23:47,860
username and so I'm guessing there will

00:23:44,509 --> 00:23:50,389
be something like possible as well so

00:23:47,860 --> 00:23:52,539
the name of the environment variable

00:23:50,389 --> 00:23:56,450
except Fox's username and the rest is

00:23:52,539 --> 00:23:58,249
password and in my connection string I

00:23:56,450 --> 00:24:00,080
see there is another place where things

00:23:58,249 --> 00:24:06,519
can go really wrong which is the name of

00:24:00,080 --> 00:24:10,100
the database let me try to find it so

00:24:06,519 --> 00:24:13,100
let's say is name and something should

00:24:10,100 --> 00:24:14,629
oh yeah it says database name sample DB

00:24:13,100 --> 00:24:18,379
which means I need to read from this

00:24:14,629 --> 00:24:19,730
environment variable size say probably I

00:24:18,379 --> 00:24:23,749
just do something messy here I'll just

00:24:19,730 --> 00:24:24,919
copy paste a sample DB awesome the stuff

00:24:23,749 --> 00:24:27,980
you do when you're trying to get a code

00:24:24,919 --> 00:24:30,019
walking let's say awesome so I made some

00:24:27,980 --> 00:24:33,200
more changes and then I'll try to again

00:24:30,019 --> 00:24:34,820
push them instead of three five six

00:24:33,200 --> 00:24:37,489
different steps of get getting my

00:24:34,820 --> 00:24:39,679
application running on openshift so my

00:24:37,489 --> 00:24:41,809
for my focus is that my code running not

00:24:39,679 --> 00:24:44,539
to fail become an open shift x4 as part

00:24:41,809 --> 00:24:46,999
of this so what the cell again do is

00:24:44,539 --> 00:24:49,129
this will mount the changes into the

00:24:46,999 --> 00:24:51,230
same container do a build and get it

00:24:49,129 --> 00:24:53,389
running and the reason it is quicker

00:24:51,230 --> 00:24:56,059
than usual is that it doesn't actually

00:24:53,389 --> 00:24:58,369
do a build behind-the-scenes on your

00:24:56,059 --> 00:25:00,769
local system it does not do that

00:24:58,369 --> 00:25:02,570
the main reason the main reason doesn't

00:25:00,769 --> 00:25:04,460
do that is because that's time consuming

00:25:02,570 --> 00:25:06,049
which means if you receive a docker

00:25:04,460 --> 00:25:08,149
socket it has to send it to the augur

00:25:06,049 --> 00:25:10,009
socket build the code and then you need

00:25:08,149 --> 00:25:12,289
you need to push it to a registry and

00:25:10,009 --> 00:25:14,299
then that is pulled from the registry

00:25:12,289 --> 00:25:17,509
but all that didn't happen which is why

00:25:14,299 --> 00:25:20,419
this is quicker so let's see we did a

00:25:17,509 --> 00:25:21,859
bunch of changes and before getting the

00:25:20,419 --> 00:25:25,570
scare of whether it's working or not as

00:25:21,859 --> 00:25:25,570
this cookies here to a show log

00:25:25,580 --> 00:25:33,670
yeah it says database edited which means

00:25:29,860 --> 00:25:33,670
strings should ward this time

00:25:36,090 --> 00:25:39,350
I think still on work

00:25:47,650 --> 00:25:55,679
I could again going to my

00:25:51,210 --> 00:25:58,320
let's see it uses a username password it

00:25:55,679 --> 00:25:59,759
has a sample DB it has a post vesical

00:25:58,320 --> 00:26:04,639
service also yet things should work

00:25:59,759 --> 00:26:04,639
let's see refresh the logs

00:26:11,780 --> 00:26:17,810
that looks like there's still a problem

00:26:14,060 --> 00:26:24,410
with the authentication so I could go

00:26:17,810 --> 00:26:28,280
back here and say password so this is my

00:26:24,410 --> 00:26:32,590
password awesome so the username looks

00:26:28,280 --> 00:26:37,120
good the database horst looks good so

00:26:32,590 --> 00:26:37,120
probably going to make four directly

00:26:40,870 --> 00:26:44,250
then let's say

00:26:47,850 --> 00:26:54,330
I was hitting a wrong URL so I hear it

00:26:51,330 --> 00:26:56,670
and I see my data has now been picked up

00:26:54,330 --> 00:26:59,240
from the database and I can interact

00:26:56,670 --> 00:27:01,920
this as create read update delete

00:26:59,240 --> 00:27:07,980
application so let's say I don't see a

00:27:01,920 --> 00:27:11,010
mango here I'm gonna just let seventies

00:27:07,980 --> 00:27:13,530
because mangos there you go

00:27:11,010 --> 00:27:15,480
I could see stuff reflecting on my

00:27:13,530 --> 00:27:17,610
affliction so what we just did is we

00:27:15,480 --> 00:27:19,140
debug the node.js application which was

00:27:17,610 --> 00:27:22,200
having a hard time connecting to a

00:27:19,140 --> 00:27:23,730
database we push those changes as I was

00:27:22,200 --> 00:27:24,960
working on inside the ID and my

00:27:23,730 --> 00:27:27,030
application is life and now those

00:27:24,960 --> 00:27:28,530
problems are gone and I could see my

00:27:27,030 --> 00:27:31,440
node.js application talking to a

00:27:28,530 --> 00:27:33,510
possible sequel database so what we just

00:27:31,440 --> 00:27:35,460
did is in a few minutes we showed that

00:27:33,510 --> 00:27:37,620
within your OBS code you could interact

00:27:35,460 --> 00:27:39,090
with your whole bunch of clusters you

00:27:37,620 --> 00:27:41,520
could deploy applications there you

00:27:39,090 --> 00:27:43,050
could deploy services from the Service

00:27:41,520 --> 00:27:45,770
Catalog for example there and then you

00:27:43,050 --> 00:27:45,770
could link them together

00:27:46,540 --> 00:27:51,419
ducks are from my demo I'll move back to

00:27:49,210 --> 00:27:54,790
the slides

00:27:51,419 --> 00:27:57,400
so yeah the project is open source so

00:27:54,790 --> 00:28:01,870
this is basically a common combination

00:27:57,400 --> 00:28:03,940
of two projects the one is audio which

00:28:01,870 --> 00:28:06,040
is which is the short form of openshift

00:28:03,940 --> 00:28:07,480
du which is also CLI tool which means

00:28:06,040 --> 00:28:11,559
you could use it outside via Scott as

00:28:07,480 --> 00:28:13,510
well it's it's like draft when exchanged

00:28:11,559 --> 00:28:16,299
I would say but the whole point it does

00:28:13,510 --> 00:28:17,770
is as a developer who doesn't want the

00:28:16,299 --> 00:28:19,270
lone OpenShift you open areas you can

00:28:17,770 --> 00:28:21,760
avoid doing that and still deploy your

00:28:19,270 --> 00:28:23,350
applications on open chef and we have

00:28:21,760 --> 00:28:24,700
the open ship connector which

00:28:23,350 --> 00:28:26,470
effectively helps you connect oak leaf

00:28:24,700 --> 00:28:28,929
clusters and a hand underneath it uses

00:28:26,470 --> 00:28:31,150
the same open source project you could

00:28:28,929 --> 00:28:33,549
go and submit issues if you find them

00:28:31,150 --> 00:28:35,530
you could go and contribute them and you

00:28:33,549 --> 00:28:40,470
could go and see what our roadmap for

00:28:35,530 --> 00:28:40,470
the project is thank you

00:28:44,320 --> 00:28:47,860
any questions

00:28:53,100 --> 00:28:57,570
yeah

00:28:55,240 --> 00:29:00,659
thank you

00:28:57,570 --> 00:29:03,539
hi my name is Manisha so as you are

00:29:00,659 --> 00:29:05,429
updating the configuration of your bunch

00:29:03,539 --> 00:29:07,019
of cluster is it also gathering all

00:29:05,429 --> 00:29:08,820
those configuration files of the venue

00:29:07,019 --> 00:29:12,720
we need to take this to production you

00:29:08,820 --> 00:29:14,669
already have all of that yes so behind

00:29:12,720 --> 00:29:17,940
the scenes it's used a builder image

00:29:14,669 --> 00:29:21,389
which is also production friendly which

00:29:17,940 --> 00:29:23,100
means those I mean that hat provides a

00:29:21,389 --> 00:29:25,769
bunch of Builder images which are

00:29:23,100 --> 00:29:28,379
validated for and like that constantly

00:29:25,769 --> 00:29:30,749
updated which means your Builder image

00:29:28,379 --> 00:29:32,309
itself is secure and we use the same

00:29:30,749 --> 00:29:33,629
builder image to deploy hers which means

00:29:32,309 --> 00:29:35,789
if tomorrow you take the source code for

00:29:33,629 --> 00:29:37,919
production just say hey I use a node.js

00:29:35,789 --> 00:29:40,710
builder image let's just take this

00:29:37,919 --> 00:29:42,570
anyway we can deploy it what we do not

00:29:40,710 --> 00:29:44,789
have as far the configuration is here in

00:29:42,570 --> 00:29:47,249
this in this demo is we don't really

00:29:44,789 --> 00:29:49,799
export the configuration of routes and

00:29:47,249 --> 00:29:52,169
services here the only thing you can

00:29:49,799 --> 00:30:02,460
take from here is how to build an image

00:29:52,169 --> 00:30:04,349
and run the same image on production so

00:30:02,460 --> 00:30:07,249
it's actually not even a Yama father I

00:30:04,349 --> 00:30:09,809
would say I mean it's I mean in a more

00:30:07,249 --> 00:30:11,639
in a more production friendly scenario

00:30:09,809 --> 00:30:13,859
that's effectively in openshift or cuban

00:30:11,639 --> 00:30:15,809
it's basically build config where you

00:30:13,859 --> 00:30:17,999
say here's my source code here is a

00:30:15,809 --> 00:30:20,700
builder image now go build and apply

00:30:17,999 --> 00:30:22,610
this under the same thing we did here as

00:30:20,700 --> 00:30:25,730
well

00:30:22,610 --> 00:30:25,730
thank you

00:30:29,450 --> 00:30:33,530
and more questions or should we call it

00:30:31,969 --> 00:30:36,310
a day today

00:30:33,530 --> 00:30:36,310

YouTube URL: https://www.youtube.com/watch?v=uo8m2oLdOME


