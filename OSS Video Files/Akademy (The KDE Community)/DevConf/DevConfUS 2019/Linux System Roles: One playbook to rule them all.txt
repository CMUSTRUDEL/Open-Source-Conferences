Title: Linux System Roles: One playbook to rule them all
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speakers: David Lehman and Shirly Radco

APIs strive to make programmer's jobs easier by keeping stability. Less attention is perhaps being paid to stability of system configuration, where interfaces include configuration file formats and various utilities.  Linux System Roles with Ansible helps to solve playbook incompatibilities as the OS interfaces change between releases and upgrades.

Attendees will learn about new Storage and Logging roles added to the Linux System Roles project to help configure Fedora, RHEL or CentOS systems consistently across multiple releases. The audience is assumed to have a basic understanding of Ansible and experience with Linux (preferably Fedora-derived) system administration.
Captions: 
	00:00:03,979 --> 00:00:08,400
good afternoon everybody

00:00:06,029 --> 00:00:10,080
it's nice to have you all here we're

00:00:08,400 --> 00:00:12,840
going to be talking about the Linux

00:00:10,080 --> 00:00:14,730
system roles project and I think we will

00:00:12,840 --> 00:00:16,949
start out by introducing ourselves my

00:00:14,730 --> 00:00:21,960
name is david lehman I'm an associate

00:00:16,949 --> 00:00:27,329
manager at Red Hat I focus on storage

00:00:21,960 --> 00:00:29,399
management for the platform before that

00:00:27,329 --> 00:00:32,970
I was an engineer and I worked on

00:00:29,399 --> 00:00:35,060
anaconda the OS installer for many many

00:00:32,970 --> 00:00:35,060
years

00:00:39,440 --> 00:00:48,719
hi so I'm Shirley Ratko I'm from the Tel

00:00:44,640 --> 00:00:51,719
Aviv office Israel and I'm working at

00:00:48,719 --> 00:00:56,339
Red Hat Alvin yoo'd Red Hat for the past

00:00:51,719 --> 00:00:58,920
six years Studio bi software engineer

00:00:56,339 --> 00:01:01,679
working on the orbit project and also on

00:00:58,920 --> 00:01:06,180
the Linux system all so let's go over

00:01:01,679 --> 00:01:08,730
what we're going to discuss today so

00:01:06,180 --> 00:01:12,330
we're gonna give you an overview of what

00:01:08,730 --> 00:01:14,250
young system roles are and we're gonna

00:01:12,330 --> 00:01:17,250
introduce you to two new roles we've

00:01:14,250 --> 00:01:19,860
been working on the storage role and the

00:01:17,250 --> 00:01:24,740
logging role and we're gonna show you a

00:01:19,860 --> 00:01:24,740
demo how it actually works

00:01:27,320 --> 00:01:32,960
ok so I think many of us have been here

00:01:31,100 --> 00:01:36,200
before sitting pretty with some cool

00:01:32,960 --> 00:01:41,060
automation scripts and then something

00:01:36,200 --> 00:01:44,230
changes in the operating system and not

00:01:41,060 --> 00:01:44,230
so cool all of a sudden

00:01:46,090 --> 00:01:51,340
new releases with new features and new

00:01:48,549 --> 00:01:54,549
configuration tooling have a tendency to

00:01:51,340 --> 00:01:56,500
break management scripts so some

00:01:54,549 --> 00:01:59,229
examples of this do you remember when

00:01:56,500 --> 00:02:01,659
the veneks transition from system 5 in

00:01:59,229 --> 00:02:04,450
it to system D Alvaro Drake that

00:02:01,659 --> 00:02:07,630
happened then how about going from

00:02:04,450 --> 00:02:09,729
manually editing system 5 network

00:02:07,630 --> 00:02:13,560
configuration files going to network

00:02:09,729 --> 00:02:17,980
manager they recently we switched from

00:02:13,560 --> 00:02:20,830
IP tables to using fire worthy the list

00:02:17,980 --> 00:02:23,500
goes on and on but the common theme is

00:02:20,830 --> 00:02:26,560
that things are changing and it's

00:02:23,500 --> 00:02:28,630
breaking people's automation you know

00:02:26,560 --> 00:02:30,610
sometimes in the thick of it it's hard

00:02:28,630 --> 00:02:32,620
to remember that these changes could

00:02:30,610 --> 00:02:36,489
also be thought of as progress or as

00:02:32,620 --> 00:02:38,980
technological advancement because they

00:02:36,489 --> 00:02:40,840
present a you know not only a real but

00:02:38,980 --> 00:02:43,200
an ongoing problem for systems

00:02:40,840 --> 00:02:43,200
management

00:02:44,599 --> 00:02:47,599
so

00:02:47,830 --> 00:02:54,490
we set out to try to improve the

00:02:51,190 --> 00:03:01,990
situation somewhat and one thing that

00:02:54,490 --> 00:03:04,510
became clear right away is the thing

00:03:01,990 --> 00:03:07,930
that's changing is not the what it's the

00:03:04,510 --> 00:03:09,640
how so we realized that we're still

00:03:07,930 --> 00:03:12,700
doing all the same tasks right we're

00:03:09,640 --> 00:03:16,360
setting up services with configuring

00:03:12,700 --> 00:03:22,240
network interfaces firewall rules so on

00:03:16,360 --> 00:03:23,860
and so forth the thing that's changing

00:03:22,240 --> 00:03:25,930
is the tooling that's used by the

00:03:23,860 --> 00:03:29,200
operating system to manage these

00:03:25,930 --> 00:03:33,640
configurations so we realize that what

00:03:29,200 --> 00:03:35,800
we want here is a big piece of getting

00:03:33,640 --> 00:03:38,800
past this problem is a way to express

00:03:35,800 --> 00:03:42,760
the configuration essentially that

00:03:38,800 --> 00:03:45,130
conveys the essential the essentials of

00:03:42,760 --> 00:03:46,810
the configuration itself without getting

00:03:45,130 --> 00:03:48,280
bogged down with the details of the

00:03:46,810 --> 00:03:51,790
implementation that's being currently

00:03:48,280 --> 00:03:53,860
used by the OS so another way to say

00:03:51,790 --> 00:03:55,750
that and more common software

00:03:53,860 --> 00:03:58,959
terminology is that we wanted to

00:03:55,750 --> 00:04:02,980
abstract away the implementation so that

00:03:58,959 --> 00:04:05,740
the user can just express the important

00:04:02,980 --> 00:04:08,590
part that you know the pieces that

00:04:05,740 --> 00:04:11,340
transcend the current tooling of the

00:04:08,590 --> 00:04:11,340
operating system

00:04:13,990 --> 00:04:21,340
okay so for what they did they mentioned

00:04:17,800 --> 00:04:23,350
we've developed a Linux system rules so

00:04:21,340 --> 00:04:25,270
what are the really the 60 moles there

00:04:23,350 --> 00:04:27,670
are collection of ansible rules and

00:04:25,270 --> 00:04:34,300
models how many of you are familiar with

00:04:27,670 --> 00:04:36,370
ansible nice so I think at least one is

00:04:34,300 --> 00:04:41,680
not so let's quickly go over what

00:04:36,370 --> 00:04:47,080
ansible is ansible is an open source

00:04:41,680 --> 00:04:51,010
automation platform it's very simple to

00:04:47,080 --> 00:04:57,100
set up very powerful it's composed of an

00:04:51,010 --> 00:05:00,610
engine and Yama files that you can

00:04:57,100 --> 00:05:05,620
create your recipes and just call out

00:05:00,610 --> 00:05:06,790
the models from that engine it helps

00:05:05,620 --> 00:05:10,870
with configuration management

00:05:06,790 --> 00:05:13,449
application deployment the summation

00:05:10,870 --> 00:05:15,940
and like I said you can just create a

00:05:13,449 --> 00:05:20,290
recipe and deploy it on top of your

00:05:15,940 --> 00:05:24,850
environment across flavors of Linux like

00:05:20,290 --> 00:05:26,979
Santos fedora and rel and multiple hosts

00:05:24,850 --> 00:05:31,690
and get to your desired state of the

00:05:26,979 --> 00:05:37,830
machine it does not use an agent on the

00:05:31,690 --> 00:05:40,570
remote hosts like rapper to assess so

00:05:37,830 --> 00:05:43,240
the Linux system was what we did is

00:05:40,570 --> 00:05:46,330
basically created and consistent

00:05:43,240 --> 00:05:50,650
configuration interface for rel a fedora

00:05:46,330 --> 00:05:52,419
and sentence like an API basically so

00:05:50,650 --> 00:05:56,200
you don't need to be

00:05:52,419 --> 00:05:59,440
we created an abstraction layer from the

00:05:56,200 --> 00:06:02,200
implementation so you don't need to be

00:05:59,440 --> 00:06:04,900
bothered by the tooling underneath you

00:06:02,200 --> 00:06:08,100
just need to do your configuration will

00:06:04,900 --> 00:06:12,520
be the same even if they underlying

00:06:08,100 --> 00:06:15,880
technology changes it's maintained by

00:06:12,520 --> 00:06:20,710
the subject matter experts experts in

00:06:15,880 --> 00:06:23,050
networking storage and so on it evolves

00:06:20,710 --> 00:06:25,180
with the subsystems so given in the

00:06:23,050 --> 00:06:28,680
future if we are changing the technology

00:06:25,180 --> 00:06:31,180
underneath your configuration and across

00:06:28,680 --> 00:06:34,539
updates your configuration will stay the

00:06:31,180 --> 00:06:37,450
same this is the intention its

00:06:34,539 --> 00:06:41,610
compatible and tested in rel six seven

00:06:37,450 --> 00:06:44,560
and eight and also in fedora

00:06:41,610 --> 00:06:48,039
currently we have several roles that are

00:06:44,560 --> 00:06:52,509
already released and tested like the

00:06:48,039 --> 00:06:56,770
network and selinux time sync postfix

00:06:52,509 --> 00:07:00,039
Kadem and there are also a roles that

00:06:56,770 --> 00:07:02,590
are we've also started working on or

00:07:00,039 --> 00:07:04,330
planning to work on like the storage for

00:07:02,590 --> 00:07:06,550
example which is supposed to be released

00:07:04,330 --> 00:07:08,740
in relayed the logging role which is

00:07:06,550 --> 00:07:12,550
still development and other additional

00:07:08,740 --> 00:07:15,389
roles for image builder cockpit SAP HANA

00:07:12,550 --> 00:07:15,389
and so on

00:07:17,930 --> 00:07:22,370
ok so now we're going to dig in a little

00:07:20,449 --> 00:07:23,840
bit to some of the details of two of the

00:07:22,370 --> 00:07:28,520
emerging roles we're going to start out

00:07:23,840 --> 00:07:32,090
talking about the storage rule all right

00:07:28,520 --> 00:07:33,620
so the first thing that I think

00:07:32,090 --> 00:07:38,270
everybody thinks about when they think

00:07:33,620 --> 00:07:40,850
about storage is complexity and this is

00:07:38,270 --> 00:07:43,820
unfortunate because we're not all trying

00:07:40,850 --> 00:07:47,960
to optimize something to get the

00:07:43,820 --> 00:07:50,840
absolute maximum number of IOPS or

00:07:47,960 --> 00:07:53,630
whatever the truth is that for most of

00:07:50,840 --> 00:07:55,310
us storage management should be pretty

00:07:53,630 --> 00:07:57,530
simple because most of us have pretty

00:07:55,310 --> 00:07:59,360
pedestrian needs we want to create a

00:07:57,530 --> 00:08:00,860
couple of volumes for the file system on

00:07:59,360 --> 00:08:03,949
there and set it up to be mounted and

00:08:00,860 --> 00:08:07,880
that's it so when we set out to do the

00:08:03,949 --> 00:08:11,510
storage role the overarching principle

00:08:07,880 --> 00:08:13,520
or goal was to simplify local storage

00:08:11,510 --> 00:08:16,000
configuration for the vast majority of

00:08:13,520 --> 00:08:16,000
cases

00:08:17,559 --> 00:08:24,639
so within that goal there were several

00:08:21,039 --> 00:08:27,189
other principles that sort of building

00:08:24,639 --> 00:08:29,109
blocks or pillars if you will so the

00:08:27,189 --> 00:08:32,219
first one is that if you're going to

00:08:29,109 --> 00:08:34,659
make things easier on people you have to

00:08:32,219 --> 00:08:38,709
provide a nice concise way for them to

00:08:34,659 --> 00:08:41,979
express or define the configuration that

00:08:38,709 --> 00:08:46,660
they would like to see on their system a

00:08:41,979 --> 00:08:49,449
minimum of boilerplate and you know just

00:08:46,660 --> 00:08:51,550
as little typing as possible so the next

00:08:49,449 --> 00:08:53,470
thing is which is something that helps

00:08:51,550 --> 00:08:55,180
us achieve the first thing is to provide

00:08:53,470 --> 00:08:59,050
reasonable defaults when that's possible

00:08:55,180 --> 00:09:01,149
so for example the default volume type

00:08:59,050 --> 00:09:04,059
is going to be LVM the default file

00:09:01,149 --> 00:09:05,860
system type is going to be X FS that may

00:09:04,059 --> 00:09:07,420
change in the future but the interface

00:09:05,860 --> 00:09:10,149
is going to remain the same so for

00:09:07,420 --> 00:09:12,660
example who knows in Fedora 35 the

00:09:10,149 --> 00:09:15,040
default volume manager may be Stratus

00:09:12,660 --> 00:09:19,300
but that won't change the interface of

00:09:15,040 --> 00:09:21,459
the sasural for storage so the next

00:09:19,300 --> 00:09:23,620
thing is that we wanted to handle non

00:09:21,459 --> 00:09:25,899
essential details automatically so

00:09:23,620 --> 00:09:27,910
partition allocation is a perfect

00:09:25,899 --> 00:09:29,139
example of this if you're creating an

00:09:27,910 --> 00:09:31,660
LVN volume

00:09:29,139 --> 00:09:33,370
you shouldn't have to know how partition

00:09:31,660 --> 00:09:36,490
allocation works you shouldn't have to

00:09:33,370 --> 00:09:39,009
specify a disk label type a partition

00:09:36,490 --> 00:09:41,920
table type Flags start sector and sector

00:09:39,009 --> 00:09:43,809
and none of that all that's taken care

00:09:41,920 --> 00:09:45,819
of for you if you want to create an LVM

00:09:43,809 --> 00:09:49,230
volume group you tell us what disks to

00:09:45,819 --> 00:09:49,230
use we do the rest

00:09:49,880 --> 00:09:57,500
lastly we wanted to as much as possible

00:09:53,690 --> 00:09:59,180
we wanted to use existing logic to do

00:09:57,500 --> 00:10:02,120
the heavy lifting there's already

00:09:59,180 --> 00:10:05,570
storage management api's that have been

00:10:02,120 --> 00:10:07,640
tested and used for years one of those

00:10:05,570 --> 00:10:09,320
is with it it's a Python module that's

00:10:07,640 --> 00:10:13,070
been used for storage configuration

00:10:09,320 --> 00:10:15,710
during the OS installation phase since

00:10:13,070 --> 00:10:18,350
Fedora 11 it was split out into its own

00:10:15,710 --> 00:10:20,330
package in Fedora 18 so it's been tested

00:10:18,350 --> 00:10:23,590
quite a bit and that's what we're using

00:10:20,330 --> 00:10:23,590
to do the heavy lifting here

00:10:24,750 --> 00:10:30,310
all right so now we're gonna do a couple

00:10:26,830 --> 00:10:33,010
of examples the first example is I think

00:10:30,310 --> 00:10:34,600
as simple as it gets

00:10:33,010 --> 00:10:36,580
what we're talking about here is just

00:10:34,600 --> 00:10:39,910
throwing a file system on an

00:10:36,580 --> 00:10:43,030
unpartitioned disk and then setting it

00:10:39,910 --> 00:10:44,620
up to be mounted mounting it and then

00:10:43,030 --> 00:10:47,800
also setting it up to get mounted on

00:10:44,620 --> 00:10:52,300
boot and you'll see here that there's a

00:10:47,800 --> 00:10:54,520
list called storage volumes you put an

00:10:52,300 --> 00:10:56,710
item in the list you set the type to

00:10:54,520 --> 00:10:58,930
disk you specify a disk you specify a

00:10:56,710 --> 00:11:00,880
mount point and then you can optionally

00:10:58,930 --> 00:11:03,940
specify the file system but it's going

00:11:00,880 --> 00:11:07,810
to default to XFS so that's strictly

00:11:03,940 --> 00:11:09,220
optional and that's it that's all you

00:11:07,810 --> 00:11:10,960
have to do and when that's over with

00:11:09,220 --> 00:11:14,170
you'll have your filesystem will be

00:11:10,960 --> 00:11:17,500
created and you'll have an FS tab entry

00:11:14,170 --> 00:11:19,090
and you'll be ready to go okay the next

00:11:17,500 --> 00:11:22,960
example is a little more complicated

00:11:19,090 --> 00:11:25,660
this is an example creating a we're

00:11:22,960 --> 00:11:27,370
calling a pool but in this example what

00:11:25,660 --> 00:11:29,470
that translates to is an LVN volume

00:11:27,370 --> 00:11:31,660
group and we're going to use that volume

00:11:29,470 --> 00:11:33,700
group to store the data for a MongoDB

00:11:31,660 --> 00:11:36,400
installation so there's two volumes who

00:11:33,700 --> 00:11:40,540
want to have here ones for data and ones

00:11:36,400 --> 00:11:41,830
for logs so again we're creating what

00:11:40,540 --> 00:11:44,050
we're doing here is we're adding an item

00:11:41,830 --> 00:11:45,610
into the storage list there's just two

00:11:44,050 --> 00:11:48,070
lists or storage volumes and storage

00:11:45,610 --> 00:11:50,950
pools volumes are for volumes that are

00:11:48,070 --> 00:11:53,530
not in a pool and that means discs so we

00:11:50,950 --> 00:11:55,690
put an item in the pools list we give it

00:11:53,530 --> 00:11:59,410
a name we don't have to say that it's

00:11:55,690 --> 00:12:01,840
type LVM but we can if we want to we say

00:11:59,410 --> 00:12:05,430
which discs to use and then we create a

00:12:01,840 --> 00:12:05,430
list of the volumes in that pool

00:12:05,459 --> 00:12:09,819
first one is data you can see again

00:12:08,319 --> 00:12:15,100
we're commenting at the defaults here

00:12:09,819 --> 00:12:16,749
just for hopefully a visual aid really

00:12:15,100 --> 00:12:18,850
you can see that all you need to define

00:12:16,749 --> 00:12:23,829
a volume is a name amount point in the

00:12:18,850 --> 00:12:27,009
size and then the second one similarly

00:12:23,829 --> 00:12:28,540
simple okay

00:12:27,009 --> 00:12:30,850
so then one more example and this is

00:12:28,540 --> 00:12:34,600
just going to show some other options

00:12:30,850 --> 00:12:36,999
that are available to you again we're

00:12:34,600 --> 00:12:38,829
creating a pool and we are creating a

00:12:36,999 --> 00:12:41,499
one volume in that pool and we're just

00:12:38,829 --> 00:12:43,439
showing that you can specify a file

00:12:41,499 --> 00:12:47,819
system label you can also specify

00:12:43,439 --> 00:12:50,860
options to make FS and you can specify

00:12:47,819 --> 00:12:52,929
options to mount and those mount options

00:12:50,860 --> 00:12:56,379
are obviously going to go into NC FS tab

00:12:52,929 --> 00:12:59,589
as well so that should hopefully cover a

00:12:56,379 --> 00:13:02,579
good bit beyond the the absolute

00:12:59,589 --> 00:13:05,759
simplest of use cases

00:13:02,579 --> 00:13:07,709
let's see all right so now I'll give you

00:13:05,759 --> 00:13:10,380
a little bit of a feel for where we are

00:13:07,709 --> 00:13:13,100
and where we're going the current status

00:13:10,380 --> 00:13:16,589
of the project is that we just released

00:13:13,100 --> 00:13:20,880
version 1.0.0 this week it was released

00:13:16,589 --> 00:13:23,610
to galaxy on Thursday and it's currently

00:13:20,880 --> 00:13:26,880
in testing in preparation to be released

00:13:23,610 --> 00:13:29,759
in an update of rel 8 we're hoping it

00:13:26,880 --> 00:13:31,560
will hit for the r32 as well and the

00:13:29,759 --> 00:13:33,930
support there is for the whole disk

00:13:31,560 --> 00:13:36,209
example that I showed you you can also

00:13:33,930 --> 00:13:39,089
do a whole disk with a partition that

00:13:36,209 --> 00:13:40,880
spans and the hard disk and the purpose

00:13:39,089 --> 00:13:43,680
of that is if you have a multi OS

00:13:40,880 --> 00:13:45,690
situation that partition table will

00:13:43,680 --> 00:13:47,459
signal to non Linux operating systems

00:13:45,690 --> 00:13:49,310
don't clobber this thing there's

00:13:47,459 --> 00:13:52,769
something somebody put something here

00:13:49,310 --> 00:13:54,540
and then the last one is LVM now we

00:13:52,769 --> 00:13:57,720
don't support yet we don't have support

00:13:54,540 --> 00:13:59,399
for thin provisioned lbm or cache

00:13:57,720 --> 00:14:02,639
volumes or raid or anything like that

00:13:59,399 --> 00:14:06,800
but all that stuff is in the pipeline

00:14:02,639 --> 00:14:06,800
it's just not in version 1.0

00:14:06,980 --> 00:14:12,630
okay so the roadmap this is the order of

00:14:10,920 --> 00:14:17,850
this is kind of arbitrary this is

00:14:12,630 --> 00:14:20,730
subject to change but obviously we're

00:14:17,850 --> 00:14:23,070
going to want to add support for block

00:14:20,730 --> 00:14:26,250
device encryption using Lux and software

00:14:23,070 --> 00:14:30,390
raid the advanced LVM functionality like

00:14:26,250 --> 00:14:32,880
in provisioning cash and LVM raid and

00:14:30,390 --> 00:14:34,770
we're going to want to add support for

00:14:32,880 --> 00:14:36,450
compression and deduplication using

00:14:34,770 --> 00:14:38,490
video and we're gonna want to add

00:14:36,450 --> 00:14:39,900
support for Stratus and all that stuff

00:14:38,490 --> 00:14:41,850
can be added without changing the

00:14:39,900 --> 00:14:44,460
interface another thing that's good

00:14:41,850 --> 00:14:46,230
about this roadmap is that the

00:14:44,460 --> 00:14:49,860
underlying library blivet already

00:14:46,230 --> 00:14:50,520
supports all that i think two of these

00:14:49,860 --> 00:14:54,360
things

00:14:50,520 --> 00:14:57,450
so the amount of work is really limited

00:14:54,360 --> 00:15:00,170
to just the work in the role itself to

00:14:57,450 --> 00:15:02,400
plumb through to the underlying library

00:15:00,170 --> 00:15:05,450
so that means that it should be this

00:15:02,400 --> 00:15:08,010
roadmap should get it traversed quickly

00:15:05,450 --> 00:15:10,440
compared to if we had to implement our

00:15:08,010 --> 00:15:14,580
own storage library that is alright so

00:15:10,440 --> 00:15:18,020
the next slide here is some challenging

00:15:14,580 --> 00:15:20,370
possibly high-value features that are

00:15:18,020 --> 00:15:21,420
maybe they're maybe not at risk some

00:15:20,370 --> 00:15:23,670
things that seem like they would be

00:15:21,420 --> 00:15:25,950
really useful for a lot of users but

00:15:23,670 --> 00:15:27,839
there's a possibility that they're not

00:15:25,950 --> 00:15:31,350
going to fit within the constraints of

00:15:27,839 --> 00:15:33,540
an ansible role and when I say that I'm

00:15:31,350 --> 00:15:35,190
talking about some of the principles of

00:15:33,540 --> 00:15:37,650
ansible are that things should be

00:15:35,190 --> 00:15:39,970
idempotent meaning if you run it twice

00:15:37,650 --> 00:15:42,850
this you get the same result

00:15:39,970 --> 00:15:44,020
and at least I'm not totally sure about

00:15:42,850 --> 00:15:46,810
this but I think things are supposed to

00:15:44,020 --> 00:15:50,290
be deterministic as well I think that

00:15:46,810 --> 00:15:52,390
kind of is a part of the first one and

00:15:50,290 --> 00:15:53,950
so there's a we're not told we haven't

00:15:52,390 --> 00:15:57,130
looked at the details of how we can make

00:15:53,950 --> 00:15:59,530
these work but we have varying levels of

00:15:57,130 --> 00:16:03,610
optimism for varying for the various

00:15:59,530 --> 00:16:06,430
features here so I'll spare you the

00:16:03,610 --> 00:16:07,600
suspense here so automatic device names

00:16:06,430 --> 00:16:09,070
you know a lot of the time you don't

00:16:07,600 --> 00:16:10,270
care what your logical volume is called

00:16:09,070 --> 00:16:13,180
right you just care about the file

00:16:10,270 --> 00:16:14,560
system in the map point so it seems like

00:16:13,180 --> 00:16:15,790
we could make things even easier for

00:16:14,560 --> 00:16:17,950
people you could go from having to

00:16:15,790 --> 00:16:22,090
specify three pieces of information to

00:16:17,950 --> 00:16:23,830
just having to specify to another one

00:16:22,090 --> 00:16:25,510
automatic sizes if you're creating a

00:16:23,830 --> 00:16:27,160
pool and you only put one volume in the

00:16:25,510 --> 00:16:29,050
pool what stands to reason that you

00:16:27,160 --> 00:16:31,060
could make that volume occupy the whole

00:16:29,050 --> 00:16:33,970
pool if the user doesn't say otherwise

00:16:31,060 --> 00:16:35,980
right so that's another one that could

00:16:33,970 --> 00:16:39,700
be good but I'm not sure if it's gonna

00:16:35,980 --> 00:16:41,440
work or not again automatic disk

00:16:39,700 --> 00:16:42,880
selection same dealer you can go out and

00:16:41,440 --> 00:16:44,650
list the disks in the system and you can

00:16:42,880 --> 00:16:47,170
figure out which ones have something on

00:16:44,650 --> 00:16:50,950
them and you can use the ones that don't

00:16:47,170 --> 00:16:53,200
have anything on them the last one here

00:16:50,950 --> 00:16:54,970
is I think possibly the most useful of

00:16:53,200 --> 00:16:56,320
the bunch and also the one that I'm the

00:16:54,970 --> 00:16:59,320
most optimistic about and that's

00:16:56,320 --> 00:17:00,760
percentage based sizes I've been

00:16:59,320 --> 00:17:03,260
thinking about this the last few days

00:17:00,760 --> 00:17:07,959
and I think it's going to work

00:17:03,260 --> 00:17:07,959
in fact I implemented it the other day

00:17:08,020 --> 00:17:12,939
and this is like if you have a pool and

00:17:11,380 --> 00:17:15,699
that pool could be there a partition

00:17:12,939 --> 00:17:17,829
Drive or it could be a volume group if

00:17:15,699 --> 00:17:20,530
you have multiple volumes within that

00:17:17,829 --> 00:17:23,949
pool it might be nice if you don't know

00:17:20,530 --> 00:17:25,809
the exact size of the drive it might be

00:17:23,949 --> 00:17:27,670
nice to be able to specify the sizes of

00:17:25,809 --> 00:17:32,740
the volumes as percentages of the total

00:17:27,670 --> 00:17:34,450
size of the pool and so I think it's

00:17:32,740 --> 00:17:36,370
looking pretty good for that honestly I

00:17:34,450 --> 00:17:41,700
don't think that's a risk for pride and

00:17:36,370 --> 00:17:44,530
Potence at all so you know pending

00:17:41,700 --> 00:17:45,880
review and all that kind of stuff we'll

00:17:44,530 --> 00:17:48,330
see how it goes but I think that one's

00:17:45,880 --> 00:17:48,330
going to be good

00:17:48,850 --> 00:17:54,399
and that's really lit for the logging

00:17:50,559 --> 00:17:55,870
role so thanks guys and Shirley's going

00:17:54,399 --> 00:17:58,049
to tell you now all about the logging

00:17:55,870 --> 00:17:58,049
role

00:18:02,590 --> 00:18:09,050
okay so logging wrong like we said we

00:18:07,580 --> 00:18:12,890
intend to give the high level

00:18:09,050 --> 00:18:15,830
architecture and sort of an API in the

00:18:12,890 --> 00:18:18,560
log dynamic system also for logging we

00:18:15,830 --> 00:18:21,310
mean it's pretty basic what we want to

00:18:18,560 --> 00:18:25,490
do is to collect logs from different

00:18:21,310 --> 00:18:28,880
targets locations and then ship them to

00:18:25,490 --> 00:18:30,590
different destinations we want to make

00:18:28,880 --> 00:18:33,320
the configuration as simple as possible

00:18:30,590 --> 00:18:37,130
and to be able to spread them across our

00:18:33,320 --> 00:18:43,610
system to the multiple forces that we

00:18:37,130 --> 00:18:46,700
have so we want to collect multiple logs

00:18:43,610 --> 00:18:50,560
to multiple destinations and apply

00:18:46,700 --> 00:18:50,560
default settings when we can

00:18:50,720 --> 00:18:56,990
as the base of the logging role we used

00:18:53,790 --> 00:19:00,390
our syslog process log has been in rel

00:18:56,990 --> 00:19:03,870
central 6 it's almost 10 years now and

00:19:00,390 --> 00:19:09,470
it's become the basic default tool for a

00:19:03,870 --> 00:19:11,720
realm for logging it's it allows us

00:19:09,470 --> 00:19:16,020
multi-threading secure connection

00:19:11,720 --> 00:19:18,860
diverse destinations it supports it can

00:19:16,020 --> 00:19:21,840
filter any part of the syslog message

00:19:18,860 --> 00:19:23,850
fully configurable output format and

00:19:21,840 --> 00:19:30,560
it's very it's suitable for class

00:19:23,850 --> 00:19:34,440
relations by the way we did try other

00:19:30,560 --> 00:19:36,630
collectors but at least for now this one

00:19:34,440 --> 00:19:38,970
is the one that we feel the most

00:19:36,630 --> 00:19:43,350
comfortable with in regards for

00:19:38,970 --> 00:19:47,610
performance so when you run log enroll

00:19:43,350 --> 00:19:50,580
by default just like this what you'll

00:19:47,610 --> 00:19:52,260
get is that the world self will make

00:19:50,580 --> 00:19:55,260
sure that you have the latest package of

00:19:52,260 --> 00:19:56,770
a syslog it will deploy the our syslog

00:19:55,260 --> 00:19:59,230
config

00:19:56,770 --> 00:20:03,309
default one which collects journal

00:19:59,230 --> 00:20:08,190
records and send them to files or based

00:20:03,309 --> 00:20:12,220
on the application that sent them and

00:20:08,190 --> 00:20:15,580
for example for viral messages for valor

00:20:12,220 --> 00:20:19,120
Crone and based on their severity for

00:20:15,580 --> 00:20:20,740
example if you have urgent logs then

00:20:19,120 --> 00:20:25,140
you'll get identification if you have

00:20:20,740 --> 00:20:25,140
logged in users so this is the default

00:20:25,890 --> 00:20:31,720
another use case that is already

00:20:28,440 --> 00:20:34,390
implemented is if you already have your

00:20:31,720 --> 00:20:35,880
own RC slow configuration file and you

00:20:34,390 --> 00:20:39,370
want to spread it across your

00:20:35,880 --> 00:20:42,130
environment you are able to use the

00:20:39,370 --> 00:20:45,420
custom a files here you have in

00:20:42,130 --> 00:20:48,490
variables you have logging output bar

00:20:45,420 --> 00:20:51,700
which is a list of the outputs you want

00:20:48,490 --> 00:20:54,250
to configure in this case there is the

00:20:51,700 --> 00:20:57,370
custom files and you simply need to

00:20:54,250 --> 00:21:03,210
state where your file is located and it

00:20:57,370 --> 00:21:05,950
will be deployed all across your system

00:21:03,210 --> 00:21:09,040
another interesting use case is being

00:21:05,950 --> 00:21:11,650
able to ship your assets la moneda in

00:21:09,040 --> 00:21:13,809
two elasticsearch this is already

00:21:11,650 --> 00:21:16,870
implemented so we have an output to

00:21:13,809 --> 00:21:20,710
elasticsearch both these certificates

00:21:16,870 --> 00:21:22,929
without ok so you can send your journal

00:21:20,710 --> 00:21:24,810
information to elasticsearch and have

00:21:22,929 --> 00:21:29,190
your own

00:21:24,810 --> 00:21:32,430
one source of logs to ship everything in

00:21:29,190 --> 00:21:35,160
and you'll be able to get your platform

00:21:32,430 --> 00:21:38,880
to dig into your logs and see what's

00:21:35,160 --> 00:21:42,330
going on how we will do that this is an

00:21:38,880 --> 00:21:44,790
example so again we have the logging

00:21:42,330 --> 00:21:48,570
outputs in this case the type will be

00:21:44,790 --> 00:21:50,460
elasticsearch or simply need to state

00:21:48,570 --> 00:21:52,830
where is your elasticsearch instance

00:21:50,460 --> 00:21:55,170
what is the index do you want to ship it

00:21:52,830 --> 00:21:57,780
to in elasticsearch if you have

00:21:55,170 --> 00:22:02,940
certificates you can state where they

00:21:57,780 --> 00:22:07,370
are and you will mention which logs you

00:22:02,940 --> 00:22:07,370
want to collect in this case Journal

00:22:08,540 --> 00:22:13,950
already using the our syslog role in

00:22:11,220 --> 00:22:18,600
production in overt which is the

00:22:13,950 --> 00:22:21,780
virtualization management system so we

00:22:18,600 --> 00:22:24,150
are shipping it we are using it for both

00:22:21,780 --> 00:22:27,810
shipping metrics and logs to

00:22:24,150 --> 00:22:29,550
elasticsearch so for metrics we are

00:22:27,810 --> 00:22:32,940
using collect D and we added a plugin

00:22:29,550 --> 00:22:37,500
that sets the sensed metrics in syslog

00:22:32,940 --> 00:22:40,680
format to a syslog by TCP and we are

00:22:37,500 --> 00:22:43,410
also collecting the object application

00:22:40,680 --> 00:22:45,390
logs and we are sending them to elastic

00:22:43,410 --> 00:22:48,270
search this gives us a full monitor

00:22:45,390 --> 00:22:51,290
solution it provides us a way to

00:22:48,270 --> 00:22:54,840
visualize everything with cabana and

00:22:51,290 --> 00:22:56,940
creating pre-built dashboards for

00:22:54,840 --> 00:23:00,399
example and alerting

00:22:56,940 --> 00:23:05,620
we are also going another step in our

00:23:00,399 --> 00:23:09,809
next release and creating a UI based on

00:23:05,620 --> 00:23:13,659
the Linux system laws and everything so

00:23:09,809 --> 00:23:18,250
we will have the option to select the

00:23:13,659 --> 00:23:21,850
hosts list that we want to deploy Oslo

00:23:18,250 --> 00:23:24,730
could collect Dion then this kind in the

00:23:21,850 --> 00:23:26,950
underlying in the underlying

00:23:24,730 --> 00:23:30,429
infrastructure will create was for

00:23:26,950 --> 00:23:32,679
during six the further row and simply

00:23:30,429 --> 00:23:35,710
run it and all of the hosts that we've

00:23:32,679 --> 00:23:39,700
selected will be will be configured to

00:23:35,710 --> 00:23:42,279
send the logs to elasticsearch this is

00:23:39,700 --> 00:23:44,769
the result you'll get the keep on a

00:23:42,279 --> 00:23:49,110
dashboard you'll be able to drill down

00:23:44,769 --> 00:23:52,539
to your logs and do the analysis there

00:23:49,110 --> 00:23:55,870
so the status of the logging know the

00:23:52,539 --> 00:23:57,490
log of all is still in development it's

00:23:55,870 --> 00:24:00,850
still missing some of the features that

00:23:57,490 --> 00:24:02,830
we are planning to add currently we

00:24:00,850 --> 00:24:07,029
support like I said the default our

00:24:02,830 --> 00:24:08,529
syslog config the sending the journal to

00:24:07,029 --> 00:24:10,899
elasticsearch deploying custom

00:24:08,529 --> 00:24:13,990
configurations and it's already is by of

00:24:10,899 --> 00:24:17,480
it but on the roadmap we are planning to

00:24:13,990 --> 00:24:20,299
add profile based configuration

00:24:17,480 --> 00:24:22,490
so we have the general use case but we

00:24:20,299 --> 00:24:28,549
all we also want to add additional

00:24:22,490 --> 00:24:32,210
profiles for resilience and security we

00:24:28,549 --> 00:24:34,220
want to add additional inputs this is

00:24:32,210 --> 00:24:37,400
something that we are still thinking

00:24:34,220 --> 00:24:39,650
about we are not sure what will be the

00:24:37,400 --> 00:24:43,400
additional inputs and if you can think

00:24:39,650 --> 00:24:45,500
of good use cases then we will

00:24:43,400 --> 00:24:48,679
appreciate it if you go in to the

00:24:45,500 --> 00:24:52,549
project and create an RFP and this will

00:24:48,679 --> 00:24:55,760
certainly help and additional outputs

00:24:52,549 --> 00:24:58,549
currently they we plan to add remote our

00:24:55,760 --> 00:25:01,780
syslog and remote message buses like

00:24:58,549 --> 00:25:01,780
Kafka and mqp

00:25:01,840 --> 00:25:05,530
now it's name or time

00:25:05,720 --> 00:25:08,710
start falling

00:25:16,989 --> 00:25:19,989
compromise

00:25:21,300 --> 00:25:26,190
okay so this is a demo that was put

00:25:24,570 --> 00:25:29,060
together it's going to use several of

00:25:26,190 --> 00:25:31,440
the system rules to configure a system

00:25:29,060 --> 00:25:36,060
it's going to configure some of the

00:25:31,440 --> 00:25:38,670
firewall some network interfaces time

00:25:36,060 --> 00:25:45,030
sync and it's also going to set the

00:25:38,670 --> 00:25:50,970
system up to run the cockpit web client

00:25:45,030 --> 00:25:56,040
and composer the image builder so the

00:25:50,970 --> 00:25:57,450
beginning here this is not live the

00:25:56,040 --> 00:25:59,700
beginning here this is just going

00:25:57,450 --> 00:26:01,170
through some of this showing that you

00:25:59,700 --> 00:26:02,760
have to have several of the systems from

00:26:01,170 --> 00:26:04,260
a couple of packages installed you have

00:26:02,760 --> 00:26:07,670
to have several of the system rules

00:26:04,260 --> 00:26:07,670
installed via galaxy

00:26:18,340 --> 00:26:22,170
so those are some of the prerequisites

00:26:23,640 --> 00:26:26,880
and so then we're just going through

00:26:25,200 --> 00:26:29,690
these are the top level variables for

00:26:26,880 --> 00:26:29,690
the file and

00:26:30,309 --> 00:26:33,539
basically this is

00:26:34,710 --> 00:26:40,830
these variables are to set up a couple

00:26:38,400 --> 00:26:43,190
of network interfaces and set up time

00:26:40,830 --> 00:26:43,190
sync

00:26:47,500 --> 00:26:55,150
and as you see there the the way this

00:26:52,929 --> 00:26:59,159
this table can structure it is that the

00:26:55,150 --> 00:27:01,570
the time sink role is invoked up there

00:26:59,159 --> 00:27:03,610
directly and the other roles are done as

00:27:01,570 --> 00:27:04,900
tasks and that does two things one is it

00:27:03,610 --> 00:27:06,909
allows us to control the order of

00:27:04,900 --> 00:27:10,270
execution and the other one is that if

00:27:06,909 --> 00:27:14,350
one of the earlier roles / tasks fails

00:27:10,270 --> 00:27:16,480
it won't try to keep going so that one

00:27:14,350 --> 00:27:20,559
right there it's going to install the

00:27:16,480 --> 00:27:22,150
cockpit web console nice and simple the

00:27:20,559 --> 00:27:29,230
next one is going to set up the firewall

00:27:22,150 --> 00:27:35,409
for cockpit again hopefully that's the

00:27:29,230 --> 00:27:37,870
language that looks concise so then next

00:27:35,409 --> 00:27:42,539
thing is to set up a volume for image

00:27:37,870 --> 00:27:44,770
builder to use so it's going to create

00:27:42,539 --> 00:27:48,900
using the storage rule it's going to

00:27:44,770 --> 00:27:48,900
create a pool with a single volume in it

00:27:50,610 --> 00:27:58,220
and it's going to set that up to mount

00:27:52,950 --> 00:27:58,220
it at of our live Lorax composer

00:28:02,860 --> 00:28:06,490
and that's all based on the you know

00:28:04,750 --> 00:28:09,910
it's conditional eyes if you wanted to

00:28:06,490 --> 00:28:12,190
skip that for some reason so the next

00:28:09,910 --> 00:28:16,690
thing we're going to do here is set up

00:28:12,190 --> 00:28:20,200
the image builder GUI again I think that

00:28:16,690 --> 00:28:22,810
looks like less typing than other

00:28:20,200 --> 00:28:24,580
alternatives and so then this is just an

00:28:22,810 --> 00:28:26,770
example down here of setting up using

00:28:24,580 --> 00:28:29,460
the networking role to set up a bonded

00:28:26,770 --> 00:28:29,460
network interface

00:28:33,190 --> 00:28:37,160
I'm gonna level with you I don't really

00:28:35,510 --> 00:28:42,410
know the technical details of setting up

00:28:37,160 --> 00:28:47,290
a bonded network interface was an RHC

00:28:42,410 --> 00:28:47,290
for real five it's been a while

00:28:53,370 --> 00:28:59,310
yes exactly and then of course the other

00:28:58,080 --> 00:29:05,580
thing is that this is going to run on

00:28:59,310 --> 00:29:08,540
rl6 or rail 7 or rl8 or rel 25 or you

00:29:05,580 --> 00:29:08,540
know fedora 32

00:29:18,260 --> 00:29:24,100
so then it's setting up the components

00:29:20,750 --> 00:29:24,100
of the bond down there

00:29:32,420 --> 00:29:38,750
all right so then here this is just

00:29:35,960 --> 00:29:40,700
showing the initial editing and missing

00:29:38,750 --> 00:29:44,600
this mic on it this is showing the

00:29:40,700 --> 00:29:46,280
initial network interfaces you can see

00:29:44,600 --> 00:29:49,630
that there's two extras there that are

00:29:46,280 --> 00:29:49,630
not configured not being used

00:29:53,320 --> 00:29:59,050
and so then I think that the next step

00:29:55,150 --> 00:30:01,930
here is going to be to run the role or

00:29:59,050 --> 00:30:05,310
run the PlayBook rather and then sort of

00:30:01,930 --> 00:30:05,310
verify the results

00:30:11,340 --> 00:30:15,380
okay sitting at the time sink

00:30:15,809 --> 00:30:19,019
configuring that

00:30:22,370 --> 00:30:25,690
sitting up cockpit

00:30:27,530 --> 00:30:31,000
setting up its firewall

00:30:37,570 --> 00:30:46,620
okay that's doing the storage

00:30:41,530 --> 00:30:46,620
now that's setting the mounts

00:30:51,060 --> 00:30:55,070
that's sitting up image builder

00:30:57,120 --> 00:31:03,889
setting up the bonded interface and

00:31:00,059 --> 00:31:03,889
that's it you can see that

00:31:04,350 --> 00:31:10,830
succeeded six of those plays change

00:31:08,520 --> 00:31:12,480
things

00:31:10,830 --> 00:31:14,490
and now you can see that they're gonna

00:31:12,480 --> 00:31:16,820
the bonded network interface is going to

00:31:14,490 --> 00:31:16,820
show up

00:31:25,110 --> 00:31:31,739
what's next I think okay this is the

00:31:29,179 --> 00:31:34,399
image builder services running will be

00:31:31,739 --> 00:31:34,399
verified here

00:31:45,400 --> 00:31:49,090
you can see among all the other file

00:31:47,530 --> 00:31:53,070
systems you can see the new one we

00:31:49,090 --> 00:31:53,070
created for image builder composer

00:31:54,220 --> 00:31:58,929
and to get a little bit more of a

00:31:56,110 --> 00:32:01,809
detailed view on that here's a look at

00:31:58,929 --> 00:32:04,289
the LVM set up the last one there is the

00:32:01,809 --> 00:32:04,289
one we just created

00:32:10,340 --> 00:32:13,750
and incidentally

00:32:15,760 --> 00:32:19,780
they're already fixed is written they're

00:32:17,920 --> 00:32:21,280
not in the true they're not upstream yet

00:32:19,780 --> 00:32:23,620
but there are fixes that you can see

00:32:21,280 --> 00:32:26,080
there it shows to make the volume

00:32:23,620 --> 00:32:28,510
nineteen point five gigs that's because

00:32:26,080 --> 00:32:31,150
of the metadata used by LVM so if you

00:32:28,510 --> 00:32:32,860
just try to run and LV create with 20

00:32:31,150 --> 00:32:35,530
gigs it would not work because the disk

00:32:32,860 --> 00:32:37,420
is 20 gigs and this metadata usage so

00:32:35,530 --> 00:32:41,320
I've got to fix in my local tree that

00:32:37,420 --> 00:32:43,330
I've tested that we'll just trim the

00:32:41,320 --> 00:32:45,340
requested size as needed in that case

00:32:43,330 --> 00:32:47,380
and then of course the percentage based

00:32:45,340 --> 00:32:50,880
sizes will solve it even more elegantly

00:32:47,380 --> 00:32:50,880
I would say so

00:32:53,990 --> 00:33:02,679
so this is the way you can get the rolls

00:32:57,649 --> 00:33:02,679
from galaxy you simply need to call them

00:33:03,250 --> 00:33:12,049
here are the links to the landing page

00:33:06,529 --> 00:33:16,100
and documentation github repo we

00:33:12,049 --> 00:33:18,520
encourage you to go if you are an expert

00:33:16,100 --> 00:33:21,500
in your field and you want to contribute

00:33:18,520 --> 00:33:24,289
and that will be great

00:33:21,500 --> 00:33:26,149
and if you want to try it out some of

00:33:24,289 --> 00:33:30,950
the rules are already in galaxy some of

00:33:26,149 --> 00:33:37,309
them and they are under github repo give

00:33:30,950 --> 00:33:41,720
it a try and tell us what you need what

00:33:37,309 --> 00:33:44,080
other features you need try to integrate

00:33:41,720 --> 00:33:44,080
them

00:33:45,680 --> 00:33:48,640
any questions

00:33:50,230 --> 00:33:54,490
yeah yeah going

00:33:56,490 --> 00:34:01,419
my name is Alex first off let me thank

00:34:00,070 --> 00:34:03,910
you for the work that you've done a

00:34:01,419 --> 00:34:07,030
success I mean I appreciate it a lot

00:34:03,910 --> 00:34:10,450
it's gonna help us a lot in our future

00:34:07,030 --> 00:34:13,060
projects and the first question is does

00:34:10,450 --> 00:34:15,450
it currently support non-rocket Linux

00:34:13,060 --> 00:34:15,450
systems

00:34:16,010 --> 00:34:22,649
that's a good question and I think you

00:34:19,740 --> 00:34:24,980
could I could I could either be slimy

00:34:22,649 --> 00:34:27,929
and say that's unknown or I could say no

00:34:24,980 --> 00:34:31,440
I don't think that we put any effort

00:34:27,929 --> 00:34:33,889
toward running it on Debian or Ubuntu

00:34:31,440 --> 00:34:33,889
yet

00:34:36,990 --> 00:34:45,869
are there any plans to convert this

00:34:40,730 --> 00:34:49,169
redhead supported product because you

00:34:45,869 --> 00:34:52,950
know us probably knows that but we've

00:34:49,169 --> 00:34:56,159
got the equivalent say which is puppet

00:34:52,950 --> 00:34:58,920
enterprise where they encourage all the

00:34:56,159 --> 00:35:04,470
other software developers communities

00:34:58,920 --> 00:35:09,660
even proprietary companies to develop

00:35:04,470 --> 00:35:11,680
the puppet models and you know make them

00:35:09,660 --> 00:35:14,140
used

00:35:11,680 --> 00:35:16,030
great question thank you my name is

00:35:14,140 --> 00:35:19,390
Terry and I'm on the rail product

00:35:16,030 --> 00:35:23,830
management team so they do all the

00:35:19,390 --> 00:35:26,050
wonderful work so thank all of you but

00:35:23,830 --> 00:35:29,710
yeah I can answer that question so yes

00:35:26,050 --> 00:35:31,810
they are supported today so they're

00:35:29,710 --> 00:35:34,120
there in galaxy as the Linux system

00:35:31,810 --> 00:35:37,120
rolls so you can install them that way

00:35:34,120 --> 00:35:37,630
they are shipped Michael DiPaolo here

00:35:37,120 --> 00:35:40,480
with us

00:35:37,630 --> 00:35:43,750
does the fedora packaging so he packages

00:35:40,480 --> 00:35:45,400
those up as a fedora rpm called lennox

00:35:43,750 --> 00:35:49,000
system rolls in

00:35:45,400 --> 00:35:52,600
well they are in the extras repository

00:35:49,000 --> 00:35:56,140
for l7 and they are in row 8 app stream

00:35:52,600 --> 00:36:00,580
repository as the Relf system rolls and

00:35:56,140 --> 00:36:03,040
so galaxy is the native ansible native

00:36:00,580 --> 00:36:05,650
way of getting them and that's gonna

00:36:03,040 --> 00:36:07,840
match github so kind of like the latest

00:36:05,650 --> 00:36:11,190
greatest upstream as they add new

00:36:07,840 --> 00:36:14,410
functionality and then as we test it and

00:36:11,190 --> 00:36:17,590
document it and you know do all the CI

00:36:14,410 --> 00:36:19,960
testing against it we will ship them as

00:36:17,590 --> 00:36:23,110
part of the rel system rules package so

00:36:19,960 --> 00:36:24,390
fully supported and so we will fully

00:36:23,110 --> 00:36:26,980
support that

00:36:24,390 --> 00:36:30,160
fanciful is a little bit tricky we make

00:36:26,980 --> 00:36:32,440
the ansible engine accessible with your

00:36:30,160 --> 00:36:34,510
rel subscription so that it's easy to

00:36:32,440 --> 00:36:36,790
get to and we have so many layered

00:36:34,510 --> 00:36:38,860
products that depend on it now but if

00:36:36,790 --> 00:36:41,610
you want full broad and civil support

00:36:38,860 --> 00:36:45,940
you still need to buy in ansible engine

00:36:41,610 --> 00:36:48,820
subscription but we support this as like

00:36:45,940 --> 00:36:51,420
our user contract if you will because we

00:36:48,820 --> 00:36:52,840
need to make Correll consistently

00:36:51,420 --> 00:36:55,450
configurable

00:36:52,840 --> 00:36:58,180
as you move from real 6 to real 7 the

00:36:55,450 --> 00:37:00,070
ro8 and beyond so like we owe that to

00:36:58,180 --> 00:37:01,900
you so we're we're committed to

00:37:00,070 --> 00:37:04,840
supporting that for free

00:37:01,900 --> 00:37:07,320
yes that's that's one of our friends who

00:37:04,840 --> 00:37:11,380
planted the seed for this project so

00:37:07,320 --> 00:37:18,010
thank you so that's the long-winded

00:37:11,380 --> 00:37:20,920
answer I hope that helps done ansible

00:37:18,010 --> 00:37:24,070
for a long time one of the things that

00:37:20,920 --> 00:37:25,510
often frustrated me is as my code got

00:37:24,070 --> 00:37:28,660
more and more complicated

00:37:25,510 --> 00:37:31,420
I couldn't refactor it because I'm in

00:37:28,660 --> 00:37:33,250
Yambol and not in Python and the

00:37:31,420 --> 00:37:36,220
underlying mechanism for all this stuff

00:37:33,250 --> 00:37:39,010
is Python it has then thought of taking

00:37:36,220 --> 00:37:40,480
no you got it working and taking what

00:37:39,010 --> 00:37:43,300
you've got working and making it into

00:37:40,480 --> 00:37:45,490
ansible modules and then perhaps even

00:37:43,300 --> 00:37:47,590
cleaning cleaning up the internal object

00:37:45,490 --> 00:37:50,380
and model within ansible so that those

00:37:47,590 --> 00:37:52,540
are reusable components so that for

00:37:50,380 --> 00:37:54,190
example I don't have to go across the

00:37:52,540 --> 00:37:55,570
wire for each call right because that

00:37:54,190 --> 00:37:58,540
really does slow down I have to do an

00:37:55,570 --> 00:38:03,550
SSH call for each individual module to

00:37:58,540 --> 00:38:05,600
ask I also have to maintain state inside

00:38:03,550 --> 00:38:07,460
the dance floor if you look at your

00:38:05,600 --> 00:38:09,140
play books that you were specifying for

00:38:07,460 --> 00:38:12,500
these there you have global variable

00:38:09,140 --> 00:38:15,110
names which as a long time programmer

00:38:12,500 --> 00:38:16,400
makes me wince I know but that's the

00:38:15,110 --> 00:38:18,620
world that you have to work with that's

00:38:16,400 --> 00:38:20,240
what ansible puts in here but if they

00:38:18,620 --> 00:38:22,040
were danceable modules then they would

00:38:20,240 --> 00:38:24,910
be explicitly namespace via those

00:38:22,040 --> 00:38:26,630
modules has there been any thought and I

00:38:24,910 --> 00:38:28,850
understand you got something working

00:38:26,630 --> 00:38:30,650
this is the this is the reason why a

00:38:28,850 --> 00:38:33,920
school is so successful so you can share

00:38:30,650 --> 00:38:36,140
your code this way but the next step is

00:38:33,920 --> 00:38:39,800
to make this stuff maintainable is there

00:38:36,140 --> 00:38:42,310
any effort going to be going into the

00:38:39,800 --> 00:38:45,400
right abstraction level which is the

00:38:42,310 --> 00:38:48,050
financeable module not roles to these I

00:38:45,400 --> 00:38:49,280
know it's I shouldn't be asking this

00:38:48,050 --> 00:38:54,980
question is something of a sale side

00:38:49,280 --> 00:38:58,390
foot' so I think it varies from where to

00:38:54,980 --> 00:39:00,650
role what the architecture is actually I

00:38:58,390 --> 00:39:02,660
initially implemented the storage role

00:39:00,650 --> 00:39:05,480
using pure ansible using the existing

00:39:02,660 --> 00:39:07,610
ansible modules that are out there but

00:39:05,480 --> 00:39:09,440
like he described the Yamma became a

00:39:07,610 --> 00:39:10,640
nightmare and I got to the point where

00:39:09,440 --> 00:39:12,320
the next thing was block device

00:39:10,640 --> 00:39:14,540
encryption and I was just like I would

00:39:12,320 --> 00:39:18,320
rather quit my job and even try this in

00:39:14,540 --> 00:39:20,570
the ammo so because in storage right

00:39:18,320 --> 00:39:22,610
there's arbitrary stacking of the

00:39:20,570 --> 00:39:25,070
different layers and the animal just is

00:39:22,610 --> 00:39:27,110
not equipped to deal with that so what I

00:39:25,070 --> 00:39:30,140
did was and I refactored everything into

00:39:27,110 --> 00:39:32,150
a Python module so really if you were to

00:39:30,140 --> 00:39:33,890
look at the tasks the main tasks file

00:39:32,150 --> 00:39:36,320
for the storage role there's almost

00:39:33,890 --> 00:39:38,090
nothing like there's like this really

00:39:36,320 --> 00:39:38,750
embarrassing thing where I've spent 200

00:39:38,090 --> 00:39:40,550
lines

00:39:38,750 --> 00:39:42,170
filling in default values and some

00:39:40,550 --> 00:39:44,360
dictionaries because I don't know if we

00:39:42,170 --> 00:39:46,430
gamble very well and then there's one

00:39:44,360 --> 00:39:48,470
module call to a blip module called

00:39:46,430 --> 00:39:50,600
liveth and then there's another one more

00:39:48,470 --> 00:39:51,650
call to a mount of the mount module and

00:39:50,600 --> 00:39:53,300
that's it

00:39:51,650 --> 00:39:55,100
so I don't know if that's standard

00:39:53,300 --> 00:39:56,870
practice but I think that to a large

00:39:55,100 --> 00:39:59,000
extent I know that the networking module

00:39:56,870 --> 00:40:01,190
looks like that or the networking role

00:39:59,000 --> 00:40:02,660
is similar so we didn't think about that

00:40:01,190 --> 00:40:07,580
I don't know it's probably not perfect

00:40:02,660 --> 00:40:09,650
but we thought about it thank you for

00:40:07,580 --> 00:40:11,270
this and I really appreciate the fact

00:40:09,650 --> 00:40:14,150
that you've got to connect it to Red Hat

00:40:11,270 --> 00:40:17,060
fertilization that's very cool

00:40:14,150 --> 00:40:19,790
the thing about storage though is it's

00:40:17,060 --> 00:40:22,220
really scary to get right and it's

00:40:19,790 --> 00:40:23,990
really easy to screw stuff up and from

00:40:22,220 --> 00:40:25,460
what I saw here today was okay

00:40:23,990 --> 00:40:27,110
whatever's in the playbook just happens

00:40:25,460 --> 00:40:29,390
if I find a disc there I just write all

00:40:27,110 --> 00:40:31,670
over it is there any sort of safety in

00:40:29,390 --> 00:40:33,860
there that says ooh there's already a

00:40:31,670 --> 00:40:36,530
file system there or hold by the way

00:40:33,860 --> 00:40:39,140
it's already mounted somewhere

00:40:36,530 --> 00:40:42,290
that protects me against doing stupid

00:40:39,140 --> 00:40:45,260
stuff well so for example if there is

00:40:42,290 --> 00:40:48,800
already a file system there that is of

00:40:45,260 --> 00:40:52,640
the same type I think it's just gonna

00:40:48,800 --> 00:40:53,930
get used their storages it's funny

00:40:52,640 --> 00:40:56,720
because I agree with you the storage is

00:40:53,930 --> 00:40:58,940
scary but I don't agree about how it's

00:40:56,720 --> 00:41:01,400
stored is scary I don't think it's scary

00:40:58,940 --> 00:41:03,140
that when I push go it goes but what I

00:41:01,400 --> 00:41:04,730
do think is terrifying is all the

00:41:03,140 --> 00:41:07,400
different permutations of how things can

00:41:04,730 --> 00:41:09,650
be right like I can say create me an XSS

00:41:07,400 --> 00:41:12,050
file system on SDA and mounted at foo

00:41:09,650 --> 00:41:15,260
and then when I go to look at it and

00:41:12,050 --> 00:41:17,870
ansible there may be an XSS file system

00:41:15,260 --> 00:41:20,000
on SCA but it may not be mounted at foo

00:41:17,870 --> 00:41:21,200
there may be one already there and it's

00:41:20,000 --> 00:41:23,570
an amount enough food but it's got the

00:41:21,200 --> 00:41:25,520
wrong stuff on it it could be one you

00:41:23,570 --> 00:41:27,620
know like the possibilities of what you

00:41:25,520 --> 00:41:30,100
have to manage are incredibly complex

00:41:27,620 --> 00:41:30,100
and

00:41:33,010 --> 00:41:36,820
should for the most part you're gonna

00:41:34,810 --> 00:41:39,339
get what you asked for

00:41:36,820 --> 00:41:42,430
so if you for example if you have some

00:41:39,339 --> 00:41:45,400
if you have an lb m stack on VDC and

00:41:42,430 --> 00:41:47,619
then you tell us to create a file system

00:41:45,400 --> 00:41:52,570
on VDC we're going to wipe it off before

00:41:47,619 --> 00:41:54,099
we do that and you know that's the thing

00:41:52,570 --> 00:41:55,510
is everybody likes to put the safety

00:41:54,099 --> 00:41:57,640
buttons in storage right are you sure

00:41:55,510 --> 00:42:00,760
but you can't do that with automation

00:41:57,640 --> 00:42:04,240
because it's no longer automated so I

00:42:00,760 --> 00:42:07,500
would love to have a gentler response to

00:42:04,240 --> 00:42:07,500
that but I don't know what it would be

00:42:11,230 --> 00:42:15,760
so to come follow up on that actually I

00:42:14,230 --> 00:42:19,210
similar question I had to give a

00:42:15,760 --> 00:42:21,190
concrete example that concerned me you

00:42:19,210 --> 00:42:23,349
commented on having defaults firstly the

00:42:21,190 --> 00:42:34,060
file system or the volume manager and

00:42:23,349 --> 00:42:39,130
that can change oh is it so to give an

00:42:34,060 --> 00:42:41,380
example that he just brought up that so

00:42:39,130 --> 00:42:43,300
with storage for each commented on

00:42:41,380 --> 00:42:44,829
having defaults for say the file system

00:42:43,300 --> 00:42:46,210
or the volume manager something like

00:42:44,829 --> 00:42:47,650
that and that's of course the

00:42:46,210 --> 00:42:51,700
possibility that could change which is

00:42:47,650 --> 00:42:54,339
fine but looks so I run this on a system

00:42:51,700 --> 00:42:56,920
I upgrade and then I run it again

00:42:54,339 --> 00:42:59,940
and the file system changed what happens

00:42:56,920 --> 00:43:02,619
do you like do you read at my desk or

00:42:59,940 --> 00:43:05,859
what happens there that's an excellent

00:43:02,619 --> 00:43:08,680
question if you have the if it's already

00:43:05,859 --> 00:43:10,450
set this that's kind of our problem to

00:43:08,680 --> 00:43:12,070
solve if the thing is already set up and

00:43:10,450 --> 00:43:13,420
it already has the same mount point and

00:43:12,070 --> 00:43:16,450
we're gonna assume that it's what it

00:43:13,420 --> 00:43:17,980
needs to be what we'll have to do we

00:43:16,450 --> 00:43:19,569
don't have it there right now because

00:43:17,980 --> 00:43:20,710
the default hasn't changed it but what

00:43:19,569 --> 00:43:22,380
we'll just have to do is add an

00:43:20,710 --> 00:43:26,440
additional layer of logic that says

00:43:22,380 --> 00:43:29,380
it'll differentiate between you said ovm

00:43:26,440 --> 00:43:30,700
or you didn't say anything you know I

00:43:29,380 --> 00:43:32,230
mean it will be just a little more

00:43:30,700 --> 00:43:33,819
gentle if you didn't say anything we'll

00:43:32,230 --> 00:43:35,230
know to be a little more flexible and

00:43:33,819 --> 00:43:38,470
using what we found

00:43:35,230 --> 00:43:40,569
okay thanks I'm glad you come yeah I

00:43:38,470 --> 00:43:45,660
mean you know we don't know completely

00:43:40,569 --> 00:43:45,660
till we get there but we'll work it out

00:43:46,660 --> 00:43:52,490
what

00:43:49,170 --> 00:43:52,490
screen was asleep

00:43:53,310 --> 00:44:00,240
okay let my colleague here want to

00:43:56,920 --> 00:44:04,060
congratulate you on this effort as well

00:44:00,240 --> 00:44:09,910
much appreciated I have many questions

00:44:04,060 --> 00:44:18,330
where I go to most glaring for me I

00:44:09,910 --> 00:44:23,110
scuzzy for block of a wire or even NFS

00:44:18,330 --> 00:44:25,450
or not working file systems into the

00:44:23,110 --> 00:44:30,070
storage role or is there like a

00:44:25,450 --> 00:44:34,150
different structure all that take you to

00:44:30,070 --> 00:44:36,310
this this kind of technology I'm

00:44:34,150 --> 00:44:42,490
suspicious of you now because there is

00:44:36,310 --> 00:44:45,730
as it happens there is a sort of an in

00:44:42,490 --> 00:44:47,970
development a pretty nice prototype out

00:44:45,730 --> 00:44:51,460
there that is specific to remote storage

00:44:47,970 --> 00:44:53,230
and we have talked about we haven't work

00:44:51,460 --> 00:44:55,930
out the details but we have considered

00:44:53,230 --> 00:44:57,670
dedicating this role to local storage

00:44:55,930 --> 00:44:59,740
and then having a dedicated remote

00:44:57,670 --> 00:45:00,300
storage role that can manage those sorts

00:44:59,740 --> 00:45:03,450
of things

00:45:00,300 --> 00:45:03,450
thank you

00:45:10,690 --> 00:45:13,840

YouTube URL: https://www.youtube.com/watch?v=BRztwqNnruI


