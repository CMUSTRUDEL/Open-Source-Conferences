Title: Automating Stateful Apps with Kubernetes Operators
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speaker: Jan Kleinert

Kubernetes scales and manages stateless applications quite easily. Stateful applications can require more work. Databases, caching systems, and file stores are harder to dynamically manage with data intact, and sometimes come with their own notion of clustering. Operators are Kubernetes agents that know how to deploy, scale, manage, backup, and even upgrade complex, stateful applications.

This talk provides an overview of the Operator pattern introduced by CoreOS, adopted by many community projects like Rook, Prometheus, and others, and supported by the release of the Operator Framework by Red Hat. With an understanding of Operators in place, the session will go on to detail the Operator Framework and its main components, the Operator SDK and the Lifecycle management backplane.
Captions: 
	00:00:03,710 --> 00:00:06,809
[Applause]

00:00:11,559 --> 00:00:16,429
just wanna make sure the audio is

00:00:13,580 --> 00:00:17,240
connected I'm not going to use any smell

00:00:16,429 --> 00:00:19,429
it'll be okay

00:00:17,240 --> 00:00:22,730
so I'll leave this as is especially they

00:00:19,429 --> 00:00:25,929
still have their laptop oh yeah

00:00:22,730 --> 00:00:25,929
all right thank you

00:00:26,380 --> 00:00:32,740
good all right thanks so much for coming

00:00:30,400 --> 00:00:36,270
to this very first early session today

00:00:32,740 --> 00:00:38,260
can you hear me okay good all right cool

00:00:36,270 --> 00:00:40,420
so this is going to be talking about

00:00:38,260 --> 00:00:43,300
automating stateful applications with

00:00:40,420 --> 00:00:47,200
kubernetes operators to introduce myself

00:00:43,300 --> 00:00:49,480
i'm jan cleaner i got loud i am a

00:00:47,200 --> 00:00:52,000
developer advocate red hat i focus on

00:00:49,480 --> 00:00:55,750
open shift which is a distribution of

00:00:52,000 --> 00:00:57,820
kubernetes and while we're not going to

00:00:55,750 --> 00:01:00,010
be talking about just generically

00:00:57,820 --> 00:01:01,600
talking about kubernetes today I do want

00:01:00,010 --> 00:01:03,909
to lay the groundwork before we start

00:01:01,600 --> 00:01:05,440
talking about operators to make sure

00:01:03,909 --> 00:01:06,940
that everybody in the room has at least

00:01:05,440 --> 00:01:10,090
some fundamental understanding of

00:01:06,940 --> 00:01:11,530
kubernetes the community's API and some

00:01:10,090 --> 00:01:13,330
of the different types of primitive

00:01:11,530 --> 00:01:17,350
types and entities that are available

00:01:13,330 --> 00:01:18,670
right just to be sure how many folks in

00:01:17,350 --> 00:01:20,110
this room already feel like you're

00:01:18,670 --> 00:01:22,450
pretty familiar with kubernetes

00:01:20,110 --> 00:01:24,340
so if it's every single person know

00:01:22,450 --> 00:01:25,900
every single person okay we're gonna go

00:01:24,340 --> 00:01:27,220
through at least a little bit then just

00:01:25,900 --> 00:01:31,180
to make sure that you have a foundation

00:01:27,220 --> 00:01:33,640
so the rest of the talk makes sense so

00:01:31,180 --> 00:01:35,950
what is communities basically it is an

00:01:33,640 --> 00:01:37,659
open source orchestrate orchestration

00:01:35,950 --> 00:01:39,600
system for managing containerized

00:01:37,659 --> 00:01:42,369
workloads so if you are running

00:01:39,600 --> 00:01:43,840
applications services in containers and

00:01:42,369 --> 00:01:46,700
you need to do that at scale in an

00:01:43,840 --> 00:01:51,320
automated way uber entities is a great

00:01:46,700 --> 00:01:52,549
way of helping you do that so what are

00:01:51,320 --> 00:01:54,860
some of the types of things that will

00:01:52,549 --> 00:01:56,630
help you do so there's a lot of stuff

00:01:54,860 --> 00:01:58,130
written up here and that's not even half

00:01:56,630 --> 00:01:59,659
of it but some of the things that can

00:01:58,130 --> 00:02:02,689
help you with deployment that can help

00:01:59,659 --> 00:02:04,789
you simplify the process of handling

00:02:02,689 --> 00:02:06,590
networking and routing so you can access

00:02:04,789 --> 00:02:08,929
the applications that are running from

00:02:06,590 --> 00:02:10,759
outside the cluster it can do health

00:02:08,929 --> 00:02:13,519
checks and also recovery if there's

00:02:10,759 --> 00:02:15,739
failures all sorts of things can happen

00:02:13,519 --> 00:02:17,299
in a fairly automated way so that you

00:02:15,739 --> 00:02:19,430
don't have to manage all of this and

00:02:17,299 --> 00:02:23,070
kind of figure out your own systems for

00:02:19,430 --> 00:02:25,510
for taking care of it

00:02:23,070 --> 00:02:28,180
to get them a little bit more detailed I

00:02:25,510 --> 00:02:30,250
wanted to talk about some of the main

00:02:28,180 --> 00:02:31,990
object types and kubernetes and the

00:02:30,250 --> 00:02:33,850
reason for this is not because I need

00:02:31,990 --> 00:02:35,530
you to know about all of them but it's

00:02:33,850 --> 00:02:37,180
so that when we talk in a little bit

00:02:35,530 --> 00:02:39,180
more detail about operators you can

00:02:37,180 --> 00:02:42,730
understand how that relates to the

00:02:39,180 --> 00:02:45,940
primitive object types in kubernetes so

00:02:42,730 --> 00:02:48,700
you see things here listed like pod and

00:02:45,940 --> 00:02:52,390
service deployment these are some of the

00:02:48,700 --> 00:02:55,210
the core pieces and types of objects

00:02:52,390 --> 00:02:56,470
that will be in a kubernetes cluster and

00:02:55,210 --> 00:02:58,840
anytime you're interacting with

00:02:56,470 --> 00:03:01,060
basically anything in kubernetes you're

00:02:58,840 --> 00:03:02,710
using the communities API in some form

00:03:01,060 --> 00:03:04,510
whether you're using the API directly

00:03:02,710 --> 00:03:06,700
and running curl commands or if you're

00:03:04,510 --> 00:03:10,060
using cube CTL the command line

00:03:06,700 --> 00:03:11,500
interface a little I get the top of my

00:03:10,060 --> 00:03:15,400
hands a lot so I'm gonna try not to do

00:03:11,500 --> 00:03:17,950
that all of those things are using or on

00:03:15,400 --> 00:03:20,230
top of the kubernetes api so that's a

00:03:17,950 --> 00:03:22,940
really key critical piece of the whole

00:03:20,230 --> 00:03:25,850
system so

00:03:22,940 --> 00:03:27,170
when you're working in kubernetes one of

00:03:25,850 --> 00:03:30,110
the things that's kind of unique about

00:03:27,170 --> 00:03:32,570
it is that you are typically you're

00:03:30,110 --> 00:03:35,900
describing your desired state of the

00:03:32,570 --> 00:03:37,580
system and kubernetes is doing all of

00:03:35,900 --> 00:03:39,920
the work kind of behind the scenes to

00:03:37,580 --> 00:03:41,690
try to bring the actual state in line

00:03:39,920 --> 00:03:43,780
with your desired state so if you're

00:03:41,690 --> 00:03:46,400
saying I want to deploy this application

00:03:43,780 --> 00:03:48,380
here's the container image I want to use

00:03:46,400 --> 00:03:50,060
and I want three replicas of its I want

00:03:48,380 --> 00:03:54,070
three pods running with this application

00:03:50,060 --> 00:03:55,940
and whatever other things you want

00:03:54,070 --> 00:03:58,340
you're just going to put that

00:03:55,940 --> 00:03:59,810
information into a which is part of this

00:03:58,340 --> 00:04:02,000
object definition let me go ahead and

00:03:59,810 --> 00:04:05,930
show you kind of an example so this is

00:04:02,000 --> 00:04:07,730
like an excerpt of ret an object

00:04:05,930 --> 00:04:10,400
definition for a pod might look like you

00:04:07,730 --> 00:04:12,680
can see there's some metadata like the

00:04:10,400 --> 00:04:14,120
name of it what kind it is at the top

00:04:12,680 --> 00:04:16,940
you can see the kind of spot in this

00:04:14,120 --> 00:04:18,680
case and the spec is what I want to make

00:04:16,940 --> 00:04:20,570
sure that we're thinking about a little

00:04:18,680 --> 00:04:22,700
bit before we talk about operators the

00:04:20,570 --> 00:04:25,520
spec is where you're defining what your

00:04:22,700 --> 00:04:27,680
desired status and then kubernetes is

00:04:25,520 --> 00:04:29,600
constantly going through the process of

00:04:27,680 --> 00:04:33,570
trying to reconcile the actual state

00:04:29,600 --> 00:04:35,400
with with your desired State

00:04:33,570 --> 00:04:36,810
and we'll talk about that a little bit

00:04:35,400 --> 00:04:38,820
more later but I just want to at least

00:04:36,810 --> 00:04:41,880
introduce that concept before we start

00:04:38,820 --> 00:04:43,440
talking about operators but we're not

00:04:41,880 --> 00:04:44,400
here to talk just about kubernetes in

00:04:43,440 --> 00:04:46,860
general we're here to talk about

00:04:44,400 --> 00:04:49,050
operators and before getting into the

00:04:46,860 --> 00:04:51,120
details of you know what operators

00:04:49,050 --> 00:04:53,610
actually are and how they work and how

00:04:51,120 --> 00:04:55,260
to use them I wanted to first introduce

00:04:53,610 --> 00:04:57,270
why should you care about them in the

00:04:55,260 --> 00:04:58,830
first place what what is it that they're

00:04:57,270 --> 00:05:00,210
what problem are they solving what is it

00:04:58,830 --> 00:05:02,610
that they're bringing to the table that

00:05:00,210 --> 00:05:06,300
you might not have already so that's

00:05:02,610 --> 00:05:08,610
what we're going to start as you may

00:05:06,300 --> 00:05:10,710
know scaling is stateless applications

00:05:08,610 --> 00:05:11,580
and compare Nettie's is easy there's not

00:05:10,710 --> 00:05:14,220
a whole lot to it

00:05:11,580 --> 00:05:16,170
in fact there's primitive types like

00:05:14,220 --> 00:05:18,000
replica set that can handle all this for

00:05:16,170 --> 00:05:21,330
you so if you were to run this command

00:05:18,000 --> 00:05:23,640
for example keeps ETL scale and you pass

00:05:21,330 --> 00:05:25,410
in what is that your your application

00:05:23,640 --> 00:05:26,910
here and then how many replicas it's

00:05:25,410 --> 00:05:29,970
gonna handle that for you and scale it

00:05:26,910 --> 00:05:32,280
up to three so how does that work so

00:05:29,970 --> 00:05:34,020
here you can see kind of an example this

00:05:32,280 --> 00:05:36,420
would be like the starting state so

00:05:34,020 --> 00:05:38,460
you're easy cube CTR which is on top of

00:05:36,420 --> 00:05:41,010
the communities API you want to scale it

00:05:38,460 --> 00:05:42,930
up your application your desired state

00:05:41,010 --> 00:05:45,300
would be you want three currently we're

00:05:42,930 --> 00:05:47,480
over here we have one instance of that

00:05:45,300 --> 00:05:49,680
pod running when you run that command

00:05:47,480 --> 00:05:52,590
Committee's gonna do whatever it has to

00:05:49,680 --> 00:05:55,290
do to send up two additional pads with

00:05:52,590 --> 00:05:56,850
your application running and so that's

00:05:55,290 --> 00:05:59,220
just happened for you so that's pretty

00:05:56,850 --> 00:06:02,490
straightforward there's not a whole lot

00:05:59,220 --> 00:06:04,470
that you as the user have to think about

00:06:02,490 --> 00:06:06,260
or no you just say hey I want three and

00:06:04,470 --> 00:06:07,880
you get three

00:06:06,260 --> 00:06:11,540
so what about applications with store

00:06:07,880 --> 00:06:14,660
data scaling stateless applications is

00:06:11,540 --> 00:06:16,820
easy applications that store data might

00:06:14,660 --> 00:06:18,500
be a little bit more complex you can

00:06:16,820 --> 00:06:19,940
think about things like a database where

00:06:18,500 --> 00:06:22,130
you might they might have their own

00:06:19,940 --> 00:06:23,660
notion of a cluster so you're running in

00:06:22,130 --> 00:06:26,540
your kubernetes cluster but maybe you're

00:06:23,660 --> 00:06:27,920
running something like Redis Enterprise

00:06:26,540 --> 00:06:29,840
or something like that that has its own

00:06:27,920 --> 00:06:33,190
notion of a cluster as well that

00:06:29,840 --> 00:06:36,350
introduces some complexity to the system

00:06:33,190 --> 00:06:39,200
that in general in kubernetes creating a

00:06:36,350 --> 00:06:42,080
database is easy so so you have some

00:06:39,200 --> 00:06:43,760
imaginary database here all you have to

00:06:42,080 --> 00:06:45,800
do is tell it what to run past it the

00:06:43,760 --> 00:06:47,690
image for what you want to run and it

00:06:45,800 --> 00:06:50,540
will get it up and running for you and

00:06:47,690 --> 00:06:52,910
the real complexity comes in when you're

00:06:50,540 --> 00:06:54,860
trying to run and maintain things like

00:06:52,910 --> 00:06:58,310
databases or stateful applications of

00:06:54,860 --> 00:07:01,580
over time and that's where we're gonna

00:06:58,310 --> 00:07:03,140
head in that direction now so what are

00:07:01,580 --> 00:07:06,620
some of those considerations that make

00:07:03,140 --> 00:07:08,210
this harder so pretty much any complex

00:07:06,620 --> 00:07:10,340
application is going to have to deal

00:07:08,210 --> 00:07:13,040
with these type of actions as you run

00:07:10,340 --> 00:07:15,000
them and manage them over time so you

00:07:13,040 --> 00:07:16,350
know if you have something like

00:07:15,000 --> 00:07:18,510
[Music]

00:07:16,350 --> 00:07:19,800
a Redis enterprise cluster and a CD

00:07:18,510 --> 00:07:21,930
cluster or something running on

00:07:19,800 --> 00:07:23,670
kubernetes you may need to resize it

00:07:21,930 --> 00:07:26,400
over time maybe other demands on your

00:07:23,670 --> 00:07:28,080
system have changed for sure you're

00:07:26,400 --> 00:07:30,030
gonna have to upgrade or patch if

00:07:28,080 --> 00:07:31,620
there's some sort of vulnerability it

00:07:30,030 --> 00:07:33,690
comes out and you need to update the

00:07:31,620 --> 00:07:37,110
version that you're using you may need

00:07:33,690 --> 00:07:39,120
to reconfigure things if what you're

00:07:37,110 --> 00:07:42,030
running has stores data you may need to

00:07:39,120 --> 00:07:44,340
backup that data for some reason or

00:07:42,030 --> 00:07:46,320
things always go wrong so dealing with

00:07:44,340 --> 00:07:47,700
healing you know something crashes what

00:07:46,320 --> 00:07:49,440
do you do in that case when you've got

00:07:47,700 --> 00:07:51,840
this application running in a

00:07:49,440 --> 00:07:53,880
distributed system how do you handle

00:07:51,840 --> 00:07:56,370
that those types of things are a little

00:07:53,880 --> 00:07:59,280
more complex than saying creating this

00:07:56,370 --> 00:08:00,900
database and there's additional

00:07:59,280 --> 00:08:03,950
complexity that comes in when you're

00:08:00,900 --> 00:08:06,180
running them on a system like kubernetes

00:08:03,950 --> 00:08:07,560
so basically when it comes down to it

00:08:06,180 --> 00:08:10,200
what are you trying to say you may only

00:08:07,560 --> 00:08:11,190
have to install something once but

00:08:10,200 --> 00:08:13,320
you're going to have to kind of

00:08:11,190 --> 00:08:15,440
continually deal with configuration

00:08:13,320 --> 00:08:18,150
management and upgrades over time

00:08:15,440 --> 00:08:20,190
particularly as things like patches come

00:08:18,150 --> 00:08:22,020
out and you have to find some way of

00:08:20,190 --> 00:08:23,880
getting that applied in your system

00:08:22,020 --> 00:08:26,130
patching of course is critical to

00:08:23,880 --> 00:08:30,660
security and running secure applications

00:08:26,130 --> 00:08:32,130
it's critical to any business and when

00:08:30,660 --> 00:08:33,840
it comes down to it anything that's not

00:08:32,130 --> 00:08:36,030
automated is slowing you down all of

00:08:33,840 --> 00:08:38,970
those things that we described handling

00:08:36,030 --> 00:08:41,669
upgrades handling you know failures and

00:08:38,970 --> 00:08:43,050
recovery back up all of those generally

00:08:41,669 --> 00:08:44,550
you're going to take some interaction

00:08:43,050 --> 00:08:46,950
from a person right they're gonna take

00:08:44,550 --> 00:08:48,480
time from somebody's day they're going

00:08:46,950 --> 00:08:49,830
to somebody's gonna have to have noticed

00:08:48,480 --> 00:08:52,230
that that happened problem happened in

00:08:49,830 --> 00:08:54,270
the first place and then have the

00:08:52,230 --> 00:08:56,010
knowledge and the time and the skills to

00:08:54,270 --> 00:08:58,770
take care of the problem and do whatever

00:08:56,010 --> 00:09:00,930
is necessary and all of those things

00:08:58,770 --> 00:09:02,370
they do slow down the process of

00:09:00,930 --> 00:09:03,780
deploying and delivering your

00:09:02,370 --> 00:09:07,230
application whatever it is that you're

00:09:03,780 --> 00:09:09,930
trying to do so what can we do about it

00:09:07,230 --> 00:09:11,490
if only kubernetes new communities knows

00:09:09,930 --> 00:09:13,410
how to automate lots of things already

00:09:11,490 --> 00:09:17,010
right well what if it knew all of that

00:09:13,410 --> 00:09:19,680
operational knowledge for how to manage

00:09:17,010 --> 00:09:22,440
these you know say a database or your

00:09:19,680 --> 00:09:24,360
complex application in kubernetes

00:09:22,440 --> 00:09:28,280
already what if it knew how to do that

00:09:24,360 --> 00:09:31,100
for you as well so here's our imaginary

00:09:28,280 --> 00:09:32,960
coworker John she has work

00:09:31,100 --> 00:09:35,420
at your company for about five years and

00:09:32,960 --> 00:09:37,250
he knows everything there was to know

00:09:35,420 --> 00:09:39,290
about running we're gonna call it

00:09:37,250 --> 00:09:41,180
production ready database it's not just

00:09:39,290 --> 00:09:45,140
some imaginary database he knows what it

00:09:41,180 --> 00:09:47,150
takes to get it deployed on your

00:09:45,140 --> 00:09:49,040
kubernetes clusters he knows what it has

00:09:47,150 --> 00:09:50,600
to be done when you need to upgrade he's

00:09:49,040 --> 00:09:52,280
got all that operational knowledge he's

00:09:50,600 --> 00:09:53,710
experienced he's done this for a long

00:09:52,280 --> 00:09:55,910
time

00:09:53,710 --> 00:09:57,530
he is the person that everybody in your

00:09:55,910 --> 00:09:59,180
organization is going to come to if they

00:09:57,530 --> 00:10:00,980
need a database deployed or if they need

00:09:59,180 --> 00:10:02,530
some of these operational tasks done

00:10:00,980 --> 00:10:05,210
although that's going to come to John

00:10:02,530 --> 00:10:06,850
the problem is he's really good at what

00:10:05,210 --> 00:10:09,140
he does but there is only one of him

00:10:06,850 --> 00:10:10,520
everybody needs this time and some

00:10:09,140 --> 00:10:12,230
organizations aren't even going to be

00:10:10,520 --> 00:10:14,210
able to have a dedicated resource like

00:10:12,230 --> 00:10:16,460
him so they may not even be able to run

00:10:14,210 --> 00:10:18,890
applications like this because they just

00:10:16,460 --> 00:10:21,170
don't have that operational knowledge so

00:10:18,890 --> 00:10:24,110
what if we could take that knowledge and

00:10:21,170 --> 00:10:26,900
experience that John has about how to

00:10:24,110 --> 00:10:28,550
run and maintain and upgrade and manage

00:10:26,900 --> 00:10:31,820
these applications this database over

00:10:28,550 --> 00:10:33,470
time and put it in a box that's very

00:10:31,820 --> 00:10:34,340
simplistic but just imagine that we

00:10:33,470 --> 00:10:36,290
could do that you can take your

00:10:34,340 --> 00:10:38,200
operational knowledge and put it in the

00:10:36,290 --> 00:10:40,269
box all right

00:10:38,200 --> 00:10:43,000
then if we could do that then we could

00:10:40,269 --> 00:10:44,829
take that that operational knowledge the

00:10:43,000 --> 00:10:47,980
software version of basically all of

00:10:44,829 --> 00:10:50,050
this this information that he has in his

00:10:47,980 --> 00:10:52,060
brain and we could deploy that on any

00:10:50,050 --> 00:10:54,010
kubernetes cluster in any organization

00:10:52,060 --> 00:10:55,839
and any crowd and you could have that

00:10:54,010 --> 00:11:01,000
production ready database running and

00:10:55,839 --> 00:11:03,850
managed and a production suitable manner

00:11:01,000 --> 00:11:05,649
anywhere and so what we're really

00:11:03,850 --> 00:11:08,170
talking about there is what operators

00:11:05,649 --> 00:11:10,420
are trying to provide so they are

00:11:08,170 --> 00:11:12,430
basically automated software managers

00:11:10,420 --> 00:11:15,070
that handle the installation and life

00:11:12,430 --> 00:11:18,070
cycle for kubernetes applications when

00:11:15,070 --> 00:11:19,750
we say kubernetes applications after me

00:11:18,070 --> 00:11:21,910
and kind of a few different things but

00:11:19,750 --> 00:11:23,529
what I'm trying to describe here it's an

00:11:21,910 --> 00:11:26,430
application that runs on kubernetes but

00:11:23,529 --> 00:11:29,350
also has some like touch points into the

00:11:26,430 --> 00:11:30,970
kubernetes api or into you know other

00:11:29,350 --> 00:11:33,579
objects running on communities so it's

00:11:30,970 --> 00:11:36,930
kind of it's not just running but it's

00:11:33,579 --> 00:11:36,930
also like interacting with it

00:11:37,890 --> 00:11:42,839
all right so how does this all work how

00:11:40,019 --> 00:11:45,329
do I what operators made out of how do

00:11:42,839 --> 00:11:47,959
they work how do you make one that's

00:11:45,329 --> 00:11:50,610
what we'll talk about a little bit next

00:11:47,959 --> 00:11:52,019
one of the beautiful things about

00:11:50,610 --> 00:11:53,579
kubernetes is the fact that everything

00:11:52,019 --> 00:11:58,110
kind of goes to the API is that you can

00:11:53,579 --> 00:11:59,040
also extend the API and controller sorry

00:11:58,110 --> 00:12:01,950
I got a little excited there

00:11:59,040 --> 00:12:04,470
operators are evaporator pattern is

00:12:01,950 --> 00:12:06,750
basically made up of two components so

00:12:04,470 --> 00:12:08,579
there's controllers which is a thing

00:12:06,750 --> 00:12:10,829
that already exists in communities and

00:12:08,579 --> 00:12:13,800
custom resource definitions was also a

00:12:10,829 --> 00:12:18,660
thing that exists so you are going in

00:12:13,800 --> 00:12:19,980
the case of it operators it is a custom

00:12:18,660 --> 00:12:22,110
controller that's specific to your

00:12:19,980 --> 00:12:23,550
application and then a custom resource

00:12:22,110 --> 00:12:25,649
definition and we'll talk about this in

00:12:23,550 --> 00:12:27,779
a little bit more detail in a minute but

00:12:25,649 --> 00:12:29,730
that custom resource is is so kubernetes

00:12:27,779 --> 00:12:31,920
knows what a pot is knows what a service

00:12:29,730 --> 00:12:35,279
is it doesn't know what production-ready

00:12:31,920 --> 00:12:37,079
database is you can't say cube CTL get

00:12:35,279 --> 00:12:38,310
production ready databases this to be

00:12:37,079 --> 00:12:40,640
like I don't know what that is

00:12:38,310 --> 00:12:43,890
but we could tell it what it is by

00:12:40,640 --> 00:12:46,560
defining these custom resources and then

00:12:43,890 --> 00:12:48,630
we can use this controller to watch for

00:12:46,560 --> 00:12:50,550
changes to those types of resources and

00:12:48,630 --> 00:12:52,440
then handle whatever events happen and

00:12:50,550 --> 00:12:56,250
that's kind of what we're looking at

00:12:52,440 --> 00:12:59,640
here which is this operator pattern so

00:12:56,250 --> 00:13:02,640
over here on the far west side you've

00:12:59,640 --> 00:13:05,220
got your kubernetes api the custom

00:13:02,640 --> 00:13:08,160
resource is going to be whatever the

00:13:05,220 --> 00:13:09,540
instances of your your complex stateful

00:13:08,160 --> 00:13:11,400
application in our case we're gonna keep

00:13:09,540 --> 00:13:13,230
calling it production ready database and

00:13:11,400 --> 00:13:15,660
then you have the controller which is

00:13:13,230 --> 00:13:17,640
doing those two important tasks watching

00:13:15,660 --> 00:13:18,990
for events that events could be like

00:13:17,640 --> 00:13:21,330
I've asked for one of these to be

00:13:18,990 --> 00:13:23,850
created or I need to update the version

00:13:21,330 --> 00:13:25,650
or whatever else your your operators

00:13:23,850 --> 00:13:27,330
going to do and then it runs this

00:13:25,650 --> 00:13:30,120
reconciliation loop when one of those

00:13:27,330 --> 00:13:31,650
events happens it's going to say ok well

00:13:30,120 --> 00:13:33,210
show me what the current what did you

00:13:31,650 --> 00:13:35,910
ask for what's the current state of the

00:13:33,210 --> 00:13:38,310
system and now it has that operational

00:13:35,910 --> 00:13:40,890
knowledge built into it that logic of

00:13:38,310 --> 00:13:42,840
what to do when an upgrade needs to

00:13:40,890 --> 00:13:44,820
happen or when a new one of these needs

00:13:42,840 --> 00:13:47,880
to get deployed that's all built into

00:13:44,820 --> 00:13:50,370
this controller which is deployed as

00:13:47,880 --> 00:13:52,740
just a container image and so it can do

00:13:50,370 --> 00:13:55,200
whatever's necessary and I as the user

00:13:52,740 --> 00:13:56,430
who has said I'm going to use this upper

00:13:55,200 --> 00:13:58,470
tier I don't need to know any of that

00:13:56,430 --> 00:14:01,320
knowledge the operator knows so that's

00:13:58,470 --> 00:14:08,010
pretty cool and then that handles

00:14:01,320 --> 00:14:12,270
everything for you great kind of

00:14:08,010 --> 00:14:14,280
visualizing right rounded rectangle as

00:14:12,270 --> 00:14:16,050
your kubernetes cluster this thing down

00:14:14,280 --> 00:14:19,200
here on the bottom the red circle and

00:14:16,050 --> 00:14:21,330
the lightning bolt symbol is your

00:14:19,200 --> 00:14:23,630
controller so it's sitting there it's

00:14:21,330 --> 00:14:27,649
just watching and waiting

00:14:23,630 --> 00:14:29,269
and then we're going to have our custom

00:14:27,649 --> 00:14:31,190
resource so you can see here instead of

00:14:29,269 --> 00:14:33,470
kind being pod like we saw at the very

00:14:31,190 --> 00:14:35,569
beginning instead of being one of those

00:14:33,470 --> 00:14:36,949
you know built on primitive types it's a

00:14:35,569 --> 00:14:39,529
production ready database in this case

00:14:36,949 --> 00:14:41,480
we still have some metadata but it's

00:14:39,529 --> 00:14:44,750
unique and interesting and is specific

00:14:41,480 --> 00:14:46,459
to our application to our production

00:14:44,750 --> 00:14:48,529
media database is what's in the spec

00:14:46,459 --> 00:14:50,779
here so we're telling it we want this

00:14:48,529 --> 00:14:53,089
database to have a cluster size of three

00:14:50,779 --> 00:14:55,940
we want to read replicas and we want a

00:14:53,089 --> 00:15:01,149
particular version to be running so when

00:14:55,940 --> 00:15:03,829
we when we apply that then the

00:15:01,149 --> 00:15:06,079
controller which is listening is going

00:15:03,829 --> 00:15:07,550
to let the arrow in the world circle

00:15:06,079 --> 00:15:09,230
that's do whatever it takes

00:15:07,550 --> 00:15:12,560
it's gonna do whatever it takes to bring

00:15:09,230 --> 00:15:14,240
up those three instances of that

00:15:12,560 --> 00:15:18,090
production ready database so the

00:15:14,240 --> 00:15:21,150
operator is handling all that for us

00:15:18,090 --> 00:15:22,830
so I don't like to talk about things in

00:15:21,150 --> 00:15:25,050
like an abstract way I wanted to give a

00:15:22,830 --> 00:15:28,650
real example so we're going to look at

00:15:25,050 --> 00:15:30,600
kind of a demonstration of deploying and

00:15:28,650 --> 00:15:32,160
using the fcd operator if you're not

00:15:30,600 --> 00:15:34,710
familiar with @cd it's basically a

00:15:32,160 --> 00:15:37,290
distributed key-value store it's also

00:15:34,710 --> 00:15:40,740
what kubernetes is using as its primary

00:15:37,290 --> 00:15:42,690
data store so it's used for storing and

00:15:40,740 --> 00:15:47,910
replicating like information about

00:15:42,690 --> 00:15:50,490
Chester state in kubernetes all right so

00:15:47,910 --> 00:15:54,030
here's an example of what our SPD

00:15:50,490 --> 00:15:56,400
cluster recent customer resource would

00:15:54,030 --> 00:15:58,620
look like we're telling it that we want

00:15:56,400 --> 00:16:04,410
to have a size of three and a version of

00:15:58,620 --> 00:16:05,580
three point nine point zero and like we

00:16:04,410 --> 00:16:06,990
already talked about this we first I

00:16:05,580 --> 00:16:09,990
don't want to go into too much detail

00:16:06,990 --> 00:16:12,690
but here's that observe analyze and act

00:16:09,990 --> 00:16:14,310
kind of loop that's going on here so

00:16:12,690 --> 00:16:16,560
here's an example of what that might

00:16:14,310 --> 00:16:19,740
look like let's say you started off your

00:16:16,560 --> 00:16:21,810
FDD cluster a has two pods in it one of

00:16:19,740 --> 00:16:23,910
them is running version 3.0 point nine

00:16:21,810 --> 00:16:25,710
one is version three point one point

00:16:23,910 --> 00:16:27,690
zero if you remember we actually want

00:16:25,710 --> 00:16:29,790
three members and we want them all to be

00:16:27,690 --> 00:16:32,070
running three point one point zero so

00:16:29,790 --> 00:16:34,650
that's what we find out okay what's

00:16:32,070 --> 00:16:36,270
different than our desired state is that

00:16:34,650 --> 00:16:38,040
okay well the version needs to be

00:16:36,270 --> 00:16:40,560
different for one of them and we should

00:16:38,040 --> 00:16:42,030
have three members so then the operator

00:16:40,560 --> 00:16:44,910
is going it knows what

00:16:42,030 --> 00:16:46,680
to give us that additional member

00:16:44,910 --> 00:16:48,090
brought up and make sure that everything

00:16:46,680 --> 00:16:51,000
is upgraded to three point one point

00:16:48,090 --> 00:16:52,620
zero is the person who just wants that

00:16:51,000 --> 00:16:54,690
CD running on my cluster don't need to

00:16:52,620 --> 00:16:56,190
know how that works or what it's going

00:16:54,690 --> 00:16:59,100
to do it's just gonna happen for me

00:16:56,190 --> 00:17:04,050
because operator has that knowledge

00:16:59,100 --> 00:17:07,949
encoded in it okay so this I always have

00:17:04,050 --> 00:17:09,390
a hard time controlling this from the

00:17:07,949 --> 00:17:11,459
side but we'll hopefully get this right

00:17:09,390 --> 00:17:12,839
I'm going to show you this video and

00:17:11,459 --> 00:17:14,490
talk to you through what's happening and

00:17:12,839 --> 00:17:16,020
hopefully that's clear enough that you

00:17:14,490 --> 00:17:19,290
can see what's going on there but I'll

00:17:16,020 --> 00:17:20,819
I'll say it out loud anyway and I may

00:17:19,290 --> 00:17:22,380
pause it a couple points to give a

00:17:20,819 --> 00:17:25,770
little more detail on what's happening

00:17:22,380 --> 00:17:27,510
but this is an example that's also very

00:17:25,770 --> 00:17:29,850
similar to something you can find on

00:17:27,510 --> 00:17:31,200
learn bench if comm well you can go

00:17:29,850 --> 00:17:35,310
through this in an interactive way

00:17:31,200 --> 00:17:38,520
yourself of deploying a net CD operator

00:17:35,310 --> 00:17:41,990
and then actually using it once you've

00:17:38,520 --> 00:17:49,730
got it up and running using sed

00:17:41,990 --> 00:17:49,730
I'm clicking okay this right here

00:17:50,350 --> 00:17:55,049
all right so we're gonna start here

00:17:55,210 --> 00:17:58,990
but running create and we're passing and

00:17:57,460 --> 00:18:01,300
there's several Yammer files already

00:17:58,990 --> 00:18:03,790
kind of queued up for us one of them

00:18:01,300 --> 00:18:06,960
here is this CR D so that we are letting

00:18:03,790 --> 00:18:09,400
Cabernets know what a net CD cluster is

00:18:06,960 --> 00:18:10,870
then there's some Auerbach stuff that

00:18:09,400 --> 00:18:13,000
has to happen so we need a service

00:18:10,870 --> 00:18:16,630
account we need a role in a role binding

00:18:13,000 --> 00:18:18,820
these are just things that CD cluster

00:18:16,630 --> 00:18:20,560
needs in order to run so this is kind of

00:18:18,820 --> 00:18:23,020
like housekeeping stuff that has to be

00:18:20,560 --> 00:18:24,010
done first as part of the setup every

00:18:23,020 --> 00:18:27,550
operator is gonna have different

00:18:24,010 --> 00:18:29,260
requirements for what it needs to have

00:18:27,550 --> 00:18:31,390
running on the cluster before you can

00:18:29,260 --> 00:18:34,690
use it so we're getting our role and our

00:18:31,390 --> 00:18:37,240
role binding set up and then now we're

00:18:34,690 --> 00:18:40,540
going to create a deployment that has

00:18:37,240 --> 00:18:41,920
the container image for our CD operators

00:18:40,540 --> 00:18:44,980
this is that controller piece that we

00:18:41,920 --> 00:18:49,210
talked about is deployed as an image so

00:18:44,980 --> 00:18:51,820
now we've got that done we'll check that

00:18:49,210 --> 00:18:54,700
it was created I'm gonna be able to

00:18:51,820 --> 00:18:57,670
pause here when it's time okay so that's

00:18:54,700 --> 00:18:59,500
running and now we see that there the

00:18:57,670 --> 00:19:01,390
pod for that is running as well so now

00:18:59,500 --> 00:19:04,090
our controllers running now we can

00:19:01,390 --> 00:19:11,510
define an actual at CD cluster by

00:19:04,090 --> 00:19:13,400
referring the back custom resource so so

00:19:11,510 --> 00:19:16,370
you can do it like this what you're

00:19:13,400 --> 00:19:18,500
looking at here we rank out on this file

00:19:16,370 --> 00:19:20,840
here so this you can see that we've got

00:19:18,500 --> 00:19:22,460
a kind as a CD western communities is

00:19:20,840 --> 00:19:25,520
going to know what that is now because

00:19:22,460 --> 00:19:27,230
we've already defined it and we're

00:19:25,520 --> 00:19:29,150
telling it what we want in the spec we

00:19:27,230 --> 00:19:31,960
want size of three and a particular

00:19:29,150 --> 00:19:31,960
version there

00:19:33,820 --> 00:19:40,090
now let me looked at the file we can

00:19:37,090 --> 00:19:42,989
actually create it so we're passing that

00:19:40,090 --> 00:19:42,989
file in to create

00:19:44,920 --> 00:19:49,510
and what that's going to do is create

00:19:46,720 --> 00:19:53,530
that @cd cluster on our kubernetes

00:19:49,510 --> 00:19:57,400
cluster so to verify that worked now we

00:19:53,530 --> 00:20:02,110
can now we can actually run something

00:19:57,400 --> 00:20:03,460
like here cube CT I'll get at CD

00:20:02,110 --> 00:20:05,050
clusters and that's actually going to

00:20:03,460 --> 00:20:07,780
return something for us because now our

00:20:05,050 --> 00:20:09,910
ace cluster knows what an sed cluster is

00:20:07,780 --> 00:20:15,040
and it's setting up there's one it was

00:20:09,910 --> 00:20:16,140
clearly nine seconds ago and then where

00:20:15,040 --> 00:20:18,970
we'll see next

00:20:16,140 --> 00:20:20,830
the pods getting created so there should

00:20:18,970 --> 00:20:22,810
be three of them because we said we

00:20:20,830 --> 00:20:24,130
wanted the size of three and you can see

00:20:22,810 --> 00:20:26,410
it's bringing them up and eventually

00:20:24,130 --> 00:20:29,970
soon here you should see there's well

00:20:26,410 --> 00:20:29,970
there were three in running state now

00:20:30,420 --> 00:20:35,020
okay so three of them came up we want to

00:20:33,670 --> 00:20:38,160
make sure that this actually worked in

00:20:35,020 --> 00:20:40,240
it's not just like magic right so a

00:20:38,160 --> 00:20:42,070
little bit of magic because there's

00:20:40,240 --> 00:20:43,630
actually another terminal window that

00:20:42,070 --> 00:20:45,460
you can't see here in this video for

00:20:43,630 --> 00:20:48,780
couldn't do them side-by-side but from

00:20:45,460 --> 00:20:52,300
another pod and our cluster we are

00:20:48,780 --> 00:20:54,160
connecting to our fcd cluster using the

00:20:52,300 --> 00:20:56,380
the command line tool for that and then

00:20:54,160 --> 00:20:57,880
we are going to put something in the

00:20:56,380 --> 00:20:59,080
data store and then get it back out just

00:20:57,880 --> 00:21:00,520
to prove to ourselves that this thing

00:20:59,080 --> 00:21:03,120
actually works so that's what's

00:21:00,520 --> 00:21:03,120
happening now

00:21:03,330 --> 00:21:07,369
so we're right in the key in a value

00:21:11,900 --> 00:21:15,340
and then get it back out

00:21:17,380 --> 00:21:21,789
so at this point all we've really done

00:21:19,150 --> 00:21:23,410
is deployed that @cd cluster into our

00:21:21,789 --> 00:21:24,610
communities cluster using the operator

00:21:23,410 --> 00:21:27,070
and then prove to ourselves that it

00:21:24,610 --> 00:21:31,120
works so what else can we do well let's

00:21:27,070 --> 00:21:36,010
say okay let's say that we want instead

00:21:31,120 --> 00:21:37,750
of three three members in our TD cluster

00:21:36,010 --> 00:21:40,690
we actually want five we need we need

00:21:37,750 --> 00:21:44,320
that for some reason all we have to do

00:21:40,690 --> 00:21:45,850
to make that happen is change the spec

00:21:44,320 --> 00:21:47,950
tell them that we want five instead of

00:21:45,850 --> 00:21:49,299
three this command looks long but all

00:21:47,950 --> 00:21:51,010
we're doing is a patch where we

00:21:49,299 --> 00:21:53,380
basically just updating that value for

00:21:51,010 --> 00:21:56,020
spec from three to five so that's what's

00:21:53,380 --> 00:21:59,049
happening here and then we can watch as

00:21:56,020 --> 00:22:01,240
the whatever actions the operator needs

00:21:59,049 --> 00:22:05,230
to take to make that happen are being

00:22:01,240 --> 00:22:08,500
done so we can observe as those two

00:22:05,230 --> 00:22:10,570
additional new pods are created

00:22:08,500 --> 00:22:12,750
so you can see they're starting to come

00:22:10,570 --> 00:22:12,750
up

00:22:15,590 --> 00:22:19,220
there's the fourth one they're in

00:22:17,810 --> 00:22:23,090
running state and then it's going to

00:22:19,220 --> 00:22:25,250
bring up the next one as well so this is

00:22:23,090 --> 00:22:26,960
kind of a simplistic example but it kind

00:22:25,250 --> 00:22:30,650
of gets the point of course of how an

00:22:26,960 --> 00:22:32,450
operator works and what it can do we

00:22:30,650 --> 00:22:34,940
could have also gone through the process

00:22:32,450 --> 00:22:36,470
of updating the version but for the sake

00:22:34,940 --> 00:22:42,800
of not having you watch a very long

00:22:36,470 --> 00:22:44,690
video we'll stop that right there so as

00:22:42,800 --> 00:22:47,360
I mentioned before you can you can do

00:22:44,690 --> 00:22:49,040
almost the same exercise yourself if you

00:22:47,360 --> 00:22:52,760
go to learn that OpenShift comm such an

00:22:49,040 --> 00:22:55,310
operator framework there may be eight or

00:22:52,760 --> 00:22:57,260
nine different learning interactive

00:22:55,310 --> 00:23:00,050
learning scenarios related to operators

00:22:57,260 --> 00:23:01,730
that you can try out there's one I think

00:23:00,050 --> 00:23:03,800
on just like an overview the kubernetes

00:23:01,730 --> 00:23:07,610
api if you need a refresher there

00:23:03,800 --> 00:23:09,680
there's this sed operator tutorial and

00:23:07,610 --> 00:23:12,350
then there's ones using the operator SDK

00:23:09,680 --> 00:23:14,630
which we'll talk about in a minute to

00:23:12,350 --> 00:23:16,940
create app operators using ansible go I

00:23:14,630 --> 00:23:18,380
think even helm and some other things as

00:23:16,940 --> 00:23:20,540
well so it's a really great resource if

00:23:18,380 --> 00:23:22,070
you want to try it yourself and get your

00:23:20,540 --> 00:23:24,650
hands dirty a little bit with with

00:23:22,070 --> 00:23:26,690
operators

00:23:24,650 --> 00:23:27,710
and you can use operators today let's

00:23:26,690 --> 00:23:30,380
say you know you don't care so much

00:23:27,710 --> 00:23:31,760
about you know getting in the weeds that

00:23:30,380 --> 00:23:35,059
you want to see what kind of operators

00:23:31,760 --> 00:23:37,870
are out there operator head that IO is a

00:23:35,059 --> 00:23:39,800
place where you can find a bunch of

00:23:37,870 --> 00:23:42,590
kubernetes operators that have been

00:23:39,800 --> 00:23:44,480
built by the community anything you see

00:23:42,590 --> 00:23:47,690
there will also have information about

00:23:44,480 --> 00:23:50,420
how to actually deploy it on your system

00:23:47,690 --> 00:23:52,100
and there's quite a bit of stuff there

00:23:50,420 --> 00:23:54,710
so you can check it out if you're

00:23:52,100 --> 00:23:59,510
working on things that make sense to be

00:23:54,710 --> 00:24:01,460
an operator excuse me and you want to

00:23:59,510 --> 00:24:03,350
make those available to to others to be

00:24:01,460 --> 00:24:05,630
able to use there's information about

00:24:03,350 --> 00:24:07,010
how you can actually get your operators

00:24:05,630 --> 00:24:10,800
that you've developed on this list as

00:24:07,010 --> 00:24:14,070
well on that site

00:24:10,800 --> 00:24:15,540
all right so we're gonna shift gears a

00:24:14,070 --> 00:24:17,310
little bit now and talk about some of

00:24:15,540 --> 00:24:21,390
their like tools and things out there to

00:24:17,310 --> 00:24:24,750
help you if you are building operators

00:24:21,390 --> 00:24:27,090
yourself perhaps or managing them on

00:24:24,750 --> 00:24:29,310
your cluster in a slightly more advanced

00:24:27,090 --> 00:24:31,020
way so the operative framework is

00:24:29,310 --> 00:24:33,210
basically like an umbrella over some

00:24:31,020 --> 00:24:36,570
other pieces that are available to you

00:24:33,210 --> 00:24:38,880
other projects so those projects are the

00:24:36,570 --> 00:24:40,380
operator lifecycle manager which is you

00:24:38,880 --> 00:24:43,560
can think of it as kind of an operator

00:24:40,380 --> 00:24:46,200
for operators so but an operator is used

00:24:43,560 --> 00:24:47,880
for managing the instance installation

00:24:46,200 --> 00:24:51,650
and life cycle of kubernetes

00:24:47,880 --> 00:24:54,150
applications operator lifecycle manager

00:24:51,650 --> 00:24:56,850
manages the installation and life

00:24:54,150 --> 00:25:03,300
manages their lifecycle of operators so

00:24:56,850 --> 00:25:05,160
it's kind of just like removed is

00:25:03,300 --> 00:25:09,110
available to let you see kind of like

00:25:05,160 --> 00:25:12,060
usage reports and metrics and historical

00:25:09,110 --> 00:25:14,970
information over time if that's

00:25:12,060 --> 00:25:17,880
something that's useful for you and then

00:25:14,970 --> 00:25:20,010
finally the operator SDK so if you are

00:25:17,880 --> 00:25:22,770
in a situation where it makes sense for

00:25:20,010 --> 00:25:25,740
you to be building an operator the SDK

00:25:22,770 --> 00:25:27,570
can be a useful tool for you so you

00:25:25,740 --> 00:25:29,250
don't have to use the best decay in

00:25:27,570 --> 00:25:32,220
order to build an operator you can just

00:25:29,250 --> 00:25:34,660
do it however you want but the SDK is

00:25:32,220 --> 00:25:36,640
kind of nice because it's going to

00:25:34,660 --> 00:25:38,530
provide you with some scaffolding and

00:25:36,640 --> 00:25:41,260
cogeneration so that you don't have to

00:25:38,530 --> 00:25:44,200
do it all from scratch so it will have

00:25:41,260 --> 00:25:46,420
kind of scaffolding therefore some of

00:25:44,200 --> 00:25:49,150
the common use cases for operators you

00:25:46,420 --> 00:25:52,000
know installation upgrade what-have-you

00:25:49,150 --> 00:25:54,310
and then you can fill in your logic for

00:25:52,000 --> 00:25:57,010
your actual application and use case

00:25:54,310 --> 00:25:58,180
they're the SDK supports creating

00:25:57,010 --> 00:26:02,370
operators with ansible

00:25:58,180 --> 00:26:03,880
with go and I believe help as well

00:26:02,370 --> 00:26:05,470
different slightly different

00:26:03,880 --> 00:26:08,230
capabilities for some of those than

00:26:05,470 --> 00:26:10,270
others but all that support is there it

00:26:08,230 --> 00:26:11,890
also provides you a high level API is to

00:26:10,270 --> 00:26:13,300
kind of hook into some of the things in

00:26:11,890 --> 00:26:14,650
kubernetes so that you don't have to

00:26:13,300 --> 00:26:17,290
basically so you don't have to do as

00:26:14,650 --> 00:26:18,400
much of this stuff yourself but of

00:26:17,290 --> 00:26:21,190
course if you wanted to create an

00:26:18,400 --> 00:26:23,440
operator using Python or Java whatever

00:26:21,190 --> 00:26:25,630
you can do that too even though there

00:26:23,440 --> 00:26:27,370
may not be SDK support for it it's not

00:26:25,630 --> 00:26:30,480
going to stop you from doing it if

00:26:27,370 --> 00:26:30,480
that's what you wanted to accomplish

00:26:32,030 --> 00:26:35,610
something to note because when I talk to

00:26:34,290 --> 00:26:37,980
people about operators I get this

00:26:35,610 --> 00:26:40,700
question the lad is kind of like do they

00:26:37,980 --> 00:26:43,080
all have to do all of those things no

00:26:40,700 --> 00:26:48,390
there's this whole kind of capability

00:26:43,080 --> 00:26:50,310
level or maturity level continue I'm

00:26:48,390 --> 00:26:53,490
here for operators there's kind of

00:26:50,310 --> 00:26:55,080
broken into five phases it could just

00:26:53,490 --> 00:26:57,450
kind of hard to read on the fart in

00:26:55,080 --> 00:26:59,040
there but that phase one is this a basic

00:26:57,450 --> 00:27:00,630
installation so maybe you've gotten

00:26:59,040 --> 00:27:04,650
operating all it does is install

00:27:00,630 --> 00:27:07,080
whatever your application is and it

00:27:04,650 --> 00:27:10,560
moves on in complexity from their sales

00:27:07,080 --> 00:27:12,360
to its it's doing upgrades so life cycle

00:27:10,560 --> 00:27:13,830
would handle maybe backup failure

00:27:12,360 --> 00:27:16,110
recovery

00:27:13,830 --> 00:27:18,630
insights maybe that's handling some of

00:27:16,110 --> 00:27:21,120
these more like metrics logging type of

00:27:18,630 --> 00:27:23,280
stuff and then phase five which is

00:27:21,120 --> 00:27:27,180
listed as autopilot here it's doing all

00:27:23,280 --> 00:27:29,010
of this doing everything it's not

00:27:27,180 --> 00:27:31,440
necessarily the case that your operator

00:27:29,010 --> 00:27:33,090
needs to be handling saves strive to be

00:27:31,440 --> 00:27:34,860
good it's just what it would actually

00:27:33,090 --> 00:27:36,900
make sense for what you're trying to do

00:27:34,860 --> 00:27:38,580
but it's nice to know if you're on

00:27:36,900 --> 00:27:40,530
operator hub and you're using a

00:27:38,580 --> 00:27:42,510
community built operator it's nice to

00:27:40,530 --> 00:27:44,640
know kind of what which of these things

00:27:42,510 --> 00:27:46,140
is it doing so this is kind of like a

00:27:44,640 --> 00:27:48,390
nice framework for being able to talk

00:27:46,140 --> 00:27:51,360
about what capabilities does each

00:27:48,390 --> 00:27:56,290
operator have built into it

00:27:51,360 --> 00:27:58,480
all right I really flew through that

00:27:56,290 --> 00:28:01,360
there a little bit faster than I thought

00:27:58,480 --> 00:28:04,300
I would I have some resources I want to

00:28:01,360 --> 00:28:05,920
share with you so we you can go and get

00:28:04,300 --> 00:28:09,550
hub to operate a framework that will

00:28:05,920 --> 00:28:10,990
have links out to the SDK to metering

00:28:09,550 --> 00:28:13,690
and the lifecycle manager as well as

00:28:10,990 --> 00:28:16,870
some other resources as well there's a

00:28:13,690 --> 00:28:18,760
nice site here chorus has a nice like

00:28:16,870 --> 00:28:21,070
sub-site on operators it's got a lot of

00:28:18,760 --> 00:28:22,480
information particularly good if you

00:28:21,070 --> 00:28:24,100
want to share this with somebody but you

00:28:22,480 --> 00:28:26,380
don't want to send them to like a github

00:28:24,100 --> 00:28:27,970
project and get them in the weeds with

00:28:26,380 --> 00:28:31,510
the technical stuff this is got kind of

00:28:27,970 --> 00:28:34,090
a nice friendly overview of operator

00:28:31,510 --> 00:28:35,740
concepts operator had that IR we talked

00:28:34,090 --> 00:28:37,650
about is where you can go actually find

00:28:35,740 --> 00:28:40,120
operators if you want to try them out

00:28:37,650 --> 00:28:42,450
it's a nice blog post here and then of

00:28:40,120 --> 00:28:46,120
course I'm learnin open chest comm those

00:28:42,450 --> 00:28:47,590
interactive tutorials are really really

00:28:46,120 --> 00:28:51,250
good if you want to try things out and

00:28:47,590 --> 00:28:53,080
get your hands dirty so we have lots of

00:28:51,250 --> 00:28:54,660
time for questions if anybody has

00:28:53,080 --> 00:28:57,260
questions

00:28:54,660 --> 00:28:57,260
yes

00:28:57,760 --> 00:29:04,299
I think they're bringing you a mic how

00:29:02,110 --> 00:29:05,230
would you populate data in the database

00:29:04,299 --> 00:29:06,549
because if you have a stateful

00:29:05,230 --> 00:29:08,350
application you usually want to have

00:29:06,549 --> 00:29:11,049
like a starting point then you're

00:29:08,350 --> 00:29:13,590
working from right so under this setup

00:29:11,049 --> 00:29:19,090
what would you recommend is the way to

00:29:13,590 --> 00:29:21,010
populate the data in your system yeah

00:29:19,090 --> 00:29:23,350
that's an awesome question that I don't

00:29:21,010 --> 00:29:26,230
know the answer to but I will find out I

00:29:23,350 --> 00:29:29,590
can give you my card after and get back

00:29:26,230 --> 00:29:31,679
to you yeah I'm not gonna pretend I know

00:29:29,590 --> 00:29:36,700
the answer but I can definitely find out

00:29:31,679 --> 00:29:39,179
some recommendations there I'll just

00:29:36,700 --> 00:29:39,179
keep the mic

00:29:42,090 --> 00:29:44,690
yes

00:29:49,550 --> 00:29:56,710
is Q Burnett is itself using operators

00:29:52,520 --> 00:30:02,540
to manage its at Sidhu cluster the users

00:29:56,710 --> 00:30:04,640
I don't know if it's using to manage the

00:30:02,540 --> 00:30:06,890
Ltd cluster that's just always there I

00:30:04,640 --> 00:30:09,980
don't know but what I can tell you

00:30:06,890 --> 00:30:12,620
absolutely different is openshift

00:30:09,980 --> 00:30:14,780
OpenShift 4 is using operators to

00:30:12,620 --> 00:30:16,850
basically do almost everything so it's

00:30:14,780 --> 00:30:19,580
been completely changed so that you know

00:30:16,850 --> 00:30:21,290
installation is using operators managing

00:30:19,580 --> 00:30:24,140
upgrades and things like that is using

00:30:21,290 --> 00:30:26,780
operators I think there's well over 40

00:30:24,140 --> 00:30:28,730
operators just running as part of up and

00:30:26,780 --> 00:30:31,100
shift right now just as like the guts of

00:30:28,730 --> 00:30:34,130
it basically so I know that operators

00:30:31,100 --> 00:30:36,410
are used a lot there but I nobody has

00:30:34,130 --> 00:30:39,800
ever asked me and I've never looked into

00:30:36,410 --> 00:30:43,270
it to know if I'll give you my card too

00:30:39,800 --> 00:30:43,270
and we'll find out and I'll let you know

00:30:45,470 --> 00:30:51,570
so to create a those custom resource

00:30:48,540 --> 00:30:53,190
definitions do I need to be a cluster

00:30:51,570 --> 00:30:56,190
admin or can I create that on that

00:30:53,190 --> 00:30:58,740
wearable project a lot of things related

00:30:56,190 --> 00:31:05,730
to operators do have to be done as

00:30:58,740 --> 00:31:10,350
cluster admin once you have it done

00:31:05,730 --> 00:31:13,470
there's an option to deploy an operator

00:31:10,350 --> 00:31:16,070
either cluster ride or on a project

00:31:13,470 --> 00:31:18,990
level so you can kind of choose that way

00:31:16,070 --> 00:31:21,870
if you make you as a cluster admin to

00:31:18,990 --> 00:31:24,690
make an operator available for non

00:31:21,870 --> 00:31:27,030
admins to actually use if that makes

00:31:24,690 --> 00:31:29,610
sense but a lot of this the set up and

00:31:27,030 --> 00:31:32,220
getting it actually like installed and

00:31:29,610 --> 00:31:36,620
configured many of those things need to

00:31:32,220 --> 00:31:36,620
be done by cluster admin thanks

00:31:37,070 --> 00:31:40,360
any other questions

00:31:40,840 --> 00:31:45,190
all right thank you so much if anybody

00:31:43,450 --> 00:31:47,919
else does have questions I can give you

00:31:45,190 --> 00:31:50,640
my card and find those out to you so

00:31:47,919 --> 00:31:50,640

YouTube URL: https://www.youtube.com/watch?v=9BT_XFIVUxI


