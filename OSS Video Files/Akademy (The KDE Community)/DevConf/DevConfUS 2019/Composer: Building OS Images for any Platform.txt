Title: Composer: Building OS Images for any Platform
Publication date: 2019-10-02
Playlist: DevConfUS 2019
Description: 
	Speakers: Jenn Giardino and Will Woods

Introducing Cockpit Composer, a new tool that lets you create, edit, and manage customized OS images over time. Create blueprints with custom selections of packages and modules from different source repositories. Then generate images from those blueprints for physical, virtual, and cloud environments. Learn about what features are currently available in the web UI, including how to select the content you need and how to create images. As part of this session, we want to take some time to get feedback from the audience on the flow of features presented and their image building needs.
Captions: 
	00:00:06,569 --> 00:00:13,270
once again welcome

00:00:09,090 --> 00:00:16,900
right now we have will Woods and Jen

00:00:13,270 --> 00:00:21,939
Giardino presenting cockpit composure

00:00:16,900 --> 00:00:30,939
building OS images for any platform all

00:00:21,939 --> 00:00:32,950
right I'm will woods I'm uh I'm a senior

00:00:30,939 --> 00:00:36,580
software engineer apparently I am that's

00:00:32,950 --> 00:00:39,190
true that's not a lie I'm Gentry Dino

00:00:36,580 --> 00:00:45,460
senior interaction designer on the uxd

00:00:39,190 --> 00:00:48,420
team Red Hat and we also have a guest

00:00:45,460 --> 00:00:48,420
speaker Jacob

00:00:50,489 --> 00:00:57,239
so about the hotdogs so welcome to our

00:00:54,660 --> 00:01:00,510
talk image builder is tooling to enable

00:00:57,239 --> 00:01:02,790
the creation of customized OS images and

00:01:00,510 --> 00:01:07,140
includes both a graphical UI and a CLI

00:01:02,790 --> 00:01:09,600
and it takes contents like rel and

00:01:07,140 --> 00:01:12,300
fedora along with custom contents

00:01:09,600 --> 00:01:14,460
third-party contents and it enables you

00:01:12,300 --> 00:01:16,920
to create image image files for a

00:01:14,460 --> 00:01:19,800
variety of deployment types and

00:01:16,920 --> 00:01:21,780
currently we are using existing tooling

00:01:19,800 --> 00:01:23,610
for our back-end builder and we'll talk

00:01:21,780 --> 00:01:27,179
more about that and later in the

00:01:23,610 --> 00:01:28,920
presentation the image types that we

00:01:27,179 --> 00:01:31,259
initially supported were like bootable

00:01:28,920 --> 00:01:34,229
images standard Linux virtual machine

00:01:31,259 --> 00:01:36,600
images and raw disk images and then in

00:01:34,229 --> 00:01:39,600
rel8 we introduced initial support for a

00:01:36,600 --> 00:01:41,640
hybrid cloud image types and we plan to

00:01:39,600 --> 00:01:43,970
add more cloud image types in future

00:01:41,640 --> 00:01:43,970
releases

00:01:43,979 --> 00:01:49,320
the images you build with image filter

00:01:46,799 --> 00:01:51,420
are built based on these things we call

00:01:49,320 --> 00:01:53,520
blueprints so blueprints are where you

00:01:51,420 --> 00:01:55,820
define what packages you want to include

00:01:53,520 --> 00:01:59,399
in your image along with basic

00:01:55,820 --> 00:02:04,679
customizations like post name and users

00:01:59,399 --> 00:02:06,360
with passwords or SSH keys so I'm gonna

00:02:04,679 --> 00:02:08,250
take you it take you through a demo of

00:02:06,360 --> 00:02:14,010
the current functionality that we have

00:02:08,250 --> 00:02:16,799
in the UI and we just wanted to let you

00:02:14,010 --> 00:02:18,330
know that let me log out and start over

00:02:16,799 --> 00:02:25,500
so you can kind of see the full

00:02:18,330 --> 00:02:28,799
experience but on my machine I have a VM

00:02:25,500 --> 00:02:31,799
running rl8 and on that machine I have

00:02:28,799 --> 00:02:33,569
the packages for cockpit and composer

00:02:31,799 --> 00:02:37,140
already installed so I don't know if

00:02:33,569 --> 00:02:40,650
you're familiar with cockpit we refer to

00:02:37,140 --> 00:02:42,390
that as the raw web console and cockpit

00:02:40,650 --> 00:02:46,049
composer we refer to that as image

00:02:42,390 --> 00:02:47,970
builder so the web console is a way that

00:02:46,049 --> 00:02:50,730
I can access that machine using a

00:02:47,970 --> 00:02:55,950
web-based UI so I'm going to log in to

00:02:50,730 --> 00:02:57,959
the web console and because I have the

00:02:55,950 --> 00:03:00,060
packages for image builder installed I

00:02:57,959 --> 00:03:03,090
also see image builder display in my

00:03:00,060 --> 00:03:05,340
left hand navigation here and when I

00:03:03,090 --> 00:03:07,109
navigate to the image builder I first

00:03:05,340 --> 00:03:09,690
see a list of all the blueprints that I

00:03:07,109 --> 00:03:11,489
have access to the blueprints that you

00:03:09,690 --> 00:03:13,260
see that start with example our

00:03:11,489 --> 00:03:16,739
blueprints that we provide out of the

00:03:13,260 --> 00:03:18,299
box when you install image builder and

00:03:16,739 --> 00:03:20,850
then I can also create additional

00:03:18,299 --> 00:03:24,260
blueprints for the images that I want to

00:03:20,850 --> 00:03:28,139
create for this demo I'm going to modify

00:03:24,260 --> 00:03:30,690
the blueprint named example HTTP server

00:03:28,139 --> 00:03:34,800
and first I'm going to modify the

00:03:30,690 --> 00:03:37,290
packages in that blueprint

00:03:34,800 --> 00:03:39,230
so on this page you can see we have two

00:03:37,290 --> 00:03:41,910
panels the panel on the Left displays

00:03:39,230 --> 00:03:44,460
all of the contents that I have access

00:03:41,910 --> 00:03:47,070
to based on the repositories that I have

00:03:44,460 --> 00:03:48,840
defined on my system and then the panel

00:03:47,070 --> 00:03:51,450
on the right shows me what contents I

00:03:48,840 --> 00:03:53,100
will be including in the image files

00:03:51,450 --> 00:03:55,410
that I create based off of this

00:03:53,100 --> 00:03:57,540
blueprint and this panel is divided into

00:03:55,410 --> 00:03:59,340
two separate tabs so the first tab is

00:03:57,540 --> 00:04:01,770
selected components these are all the

00:03:59,340 --> 00:04:03,960
items that I have explicitly selected to

00:04:01,770 --> 00:04:06,090
be included in this image file and then

00:04:03,960 --> 00:04:08,070
the dependencies are the things that we

00:04:06,090 --> 00:04:11,280
automatically pull in based on those

00:04:08,070 --> 00:04:13,020
items that you selected so the first

00:04:11,280 --> 00:04:15,540
modification I want to make to this

00:04:13,020 --> 00:04:18,840
blueprint is to remove a couple of

00:04:15,540 --> 00:04:20,489
packages and so I don't know if you were

00:04:18,840 --> 00:04:22,770
paying attention to the numbers on these

00:04:20,489 --> 00:04:24,810
tabs but if I if I roll back those

00:04:22,770 --> 00:04:27,540
changes you can see that as I was

00:04:24,810 --> 00:04:30,690
changing the packages that I included

00:04:27,540 --> 00:04:33,120
that the number of dependencies also got

00:04:30,690 --> 00:04:34,680
updated because it's automatically

00:04:33,120 --> 00:04:37,890
resolving those dependencies as I

00:04:34,680 --> 00:04:39,750
changed those contents and the easiest

00:04:37,890 --> 00:04:42,750
way to find packages that you're looking

00:04:39,750 --> 00:04:46,230
for in the UI is to filter the list so

00:04:42,750 --> 00:04:49,710
I'm gonna filter by nodejs and I'm going

00:04:46,230 --> 00:04:53,100
to add this package to my blueprint if I

00:04:49,710 --> 00:04:55,830
click the Add icon here it will

00:04:53,100 --> 00:04:57,870
automatically pull in the latest version

00:04:55,830 --> 00:05:00,479
of that package but I could also click

00:04:57,870 --> 00:05:02,910
on that that list item and view the

00:05:00,479 --> 00:05:05,100
component details for that package to be

00:05:02,910 --> 00:05:06,960
a little more specific about which

00:05:05,100 --> 00:05:10,050
version of that package I want to pull

00:05:06,960 --> 00:05:12,090
in before this I'm just going to take

00:05:10,050 --> 00:05:14,390
the latest version of that package and

00:05:12,090 --> 00:05:16,100
add it to my blueprints

00:05:14,390 --> 00:05:18,530
and I also want to make sure that I have

00:05:16,100 --> 00:05:21,170
NPM include it in this image so I'm just

00:05:18,530 --> 00:05:25,130
going to filter the list of packages in

00:05:21,170 --> 00:05:27,020
my blue and my blueprints and you can

00:05:25,130 --> 00:05:29,930
see that I haven't explicitly selected

00:05:27,020 --> 00:05:32,660
it here but it is showing up as a

00:05:29,930 --> 00:05:36,350
dependency so when I pulled in nodejs it

00:05:32,660 --> 00:05:37,490
automatically pulled NPM in for me so as

00:05:36,350 --> 00:05:40,820
I've been making all of these changes

00:05:37,490 --> 00:05:44,270
they've been captured here and this

00:05:40,820 --> 00:05:45,320
pending changes modal so I can see these

00:05:44,270 --> 00:05:48,500
are all the changes that I have made

00:05:45,320 --> 00:05:50,270
during this current session and when I'm

00:05:48,500 --> 00:05:54,170
ready to save them I can go ahead and

00:05:50,270 --> 00:05:56,800
hit the commit button and now those

00:05:54,170 --> 00:06:01,250
changes are saved in the blueprint

00:05:56,800 --> 00:06:03,290
before I create an image with these

00:06:01,250 --> 00:06:05,240
updates and my blueprint I also want to

00:06:03,290 --> 00:06:07,880
just go and check the customizations

00:06:05,240 --> 00:06:10,670
that I have so in the slide that I

00:06:07,880 --> 00:06:12,620
shared we support more customization

00:06:10,670 --> 00:06:14,330
settings that are currently available in

00:06:12,620 --> 00:06:16,880
the UI so right now we just have the

00:06:14,330 --> 00:06:18,230
host name and the users we're currently

00:06:16,880 --> 00:06:21,380
working on adding those other

00:06:18,230 --> 00:06:24,080
customizations into the UI but here I

00:06:21,380 --> 00:06:33,740
can go ahead and

00:06:24,080 --> 00:06:36,889
hostname and I can add another user and

00:06:33,740 --> 00:06:41,120
I can either provide an SSH key or a

00:06:36,889 --> 00:06:43,699
password for this I'll just create a

00:06:41,120 --> 00:06:46,840
password and hope that I type it the

00:06:43,699 --> 00:06:46,840
same way each time

00:06:48,330 --> 00:06:53,340
and so now I have the extra user and

00:06:51,389 --> 00:06:55,740
this blueprint and when I create the

00:06:53,340 --> 00:06:58,830
image it will include those package

00:06:55,740 --> 00:07:02,490
changes and the customization settings

00:06:58,830 --> 00:07:04,680
that I included currently these are the

00:07:02,490 --> 00:07:06,810
the different image types that we

00:07:04,680 --> 00:07:09,750
support that we can create images for

00:07:06,810 --> 00:07:16,860
for this I'm just going to select the

00:07:09,750 --> 00:07:19,289
qmu image type and start that and all of

00:07:16,860 --> 00:07:21,780
the images that i've created for this

00:07:19,289 --> 00:07:25,500
blueprint get listed under the Images

00:07:21,780 --> 00:07:27,330
tab so you can see that this this image

00:07:25,500 --> 00:07:29,159
is the one that I've just now add it to

00:07:27,330 --> 00:07:31,349
the queue these are other image files

00:07:29,159 --> 00:07:36,810
that I've previously created for this

00:07:31,349 --> 00:07:40,080
blueprint so that all we're gonna show

00:07:36,810 --> 00:07:43,500
for the demo next we're gonna take you

00:07:40,080 --> 00:07:45,180
through I guess first

00:07:43,500 --> 00:07:48,810
what does image builder not do so we

00:07:45,180 --> 00:07:51,330
create those image files image builder

00:07:48,810 --> 00:07:53,370
does not deploy those images for you and

00:07:51,330 --> 00:07:55,050
an image builder is not going to manage

00:07:53,370 --> 00:07:57,120
those deployments so that's something

00:07:55,050 --> 00:07:58,860
that we're working with how image

00:07:57,120 --> 00:08:00,449
builder integrates with other products

00:07:58,860 --> 00:08:03,240
to help you with that complete workflow

00:08:00,449 --> 00:08:05,759
so I just wanted to point that out and

00:08:03,240 --> 00:08:07,430
then we wanted to talk about some of the

00:08:05,759 --> 00:08:11,130
things that we're currently working on

00:08:07,430 --> 00:08:13,650
4mh builder so including additional

00:08:11,130 --> 00:08:16,500
image types I obviously didn't update my

00:08:13,650 --> 00:08:20,340
slides removal that's one that was there

00:08:16,500 --> 00:08:23,669
during the demo but hyper-v IBM Alibaba

00:08:20,340 --> 00:08:25,860
and then also the features that we're

00:08:23,669 --> 00:08:28,199
currently working on is the ability to

00:08:25,860 --> 00:08:30,150
upload to the cloud so taking those

00:08:28,199 --> 00:08:33,080
image files that are for Amazon and

00:08:30,150 --> 00:08:34,880
Azure and being able to upload them

00:08:33,080 --> 00:08:36,320
but not deploy them just go ahead and

00:08:34,880 --> 00:08:38,330
get them there so that you can then take

00:08:36,320 --> 00:08:42,260
them further and do what you need to

00:08:38,330 --> 00:08:43,820
with them in that context and then also

00:08:42,260 --> 00:08:45,200
some of the things that we're working on

00:08:43,820 --> 00:08:48,019
in terms of how we're building those

00:08:45,200 --> 00:08:50,300
images and then some of the current

00:08:48,019 --> 00:08:53,839
challenges we have with those

00:08:50,300 --> 00:08:55,519
configurations that people currently use

00:08:53,839 --> 00:08:57,140
with kick-starts that we're trying to

00:08:55,519 --> 00:09:02,120
figure out how we can incorporate into

00:08:57,140 --> 00:09:04,490
our build process so Jacob it has been

00:09:02,120 --> 00:09:06,680
working on the feature for uploading

00:09:04,490 --> 00:09:08,120
image files to the cloud so he's going

00:09:06,680 --> 00:09:11,829
to spend some time taking you through

00:09:08,120 --> 00:09:11,829
the work that he's been doing there

00:09:12,510 --> 00:09:18,329
so as Jen just demonstrated we are

00:09:14,880 --> 00:09:20,220
currently able to create an image and

00:09:18,329 --> 00:09:21,750
that will allow you to download the

00:09:20,220 --> 00:09:23,910
image and you can handle yourself

00:09:21,750 --> 00:09:26,130
however we are currently working on

00:09:23,910 --> 00:09:28,199
allowing users to when they select an

00:09:26,130 --> 00:09:31,019
image type they will also be given the

00:09:28,199 --> 00:09:33,959
option to upload that image to the cloud

00:09:31,019 --> 00:09:35,310
providers that the image supports so in

00:09:33,959 --> 00:09:36,829
this instance we can select that we're

00:09:35,310 --> 00:09:40,079
going to upload it to asher and

00:09:36,829 --> 00:09:41,190
alongside that we will now provide the

00:09:40,079 --> 00:09:43,350
ability you will enter all your

00:09:41,190 --> 00:09:46,019
credentials and like where you want the

00:09:43,350 --> 00:09:48,810
image to go and then we'll prepare it

00:09:46,019 --> 00:09:51,329
for you and we'll upload the image and

00:09:48,810 --> 00:09:53,010
it'll be ready to run on that cloud

00:09:51,329 --> 00:09:55,079
provider we won't handle the first boot

00:09:53,010 --> 00:09:57,029
for you yet but we will allow you it

00:09:55,079 --> 00:09:58,709
will be ready to run on the provider and

00:09:57,029 --> 00:10:01,470
will be uploaded to where you set it

00:09:58,709 --> 00:10:04,170
under your user after creating an upload

00:10:01,470 --> 00:10:07,199
you'll then be able to view the uploads

00:10:04,170 --> 00:10:08,850
you've created for each image and so for

00:10:07,199 --> 00:10:11,190
instance if you have a satellite upload

00:10:08,850 --> 00:10:13,320
or like an azure upload or need a BS

00:10:11,190 --> 00:10:15,269
upload for a particular image type

00:10:13,320 --> 00:10:18,190
you'll see all those uploads that you've

00:10:15,269 --> 00:10:21,430
pushed for that image

00:10:18,190 --> 00:10:24,129
now and I believe that code is uh has

00:10:21,430 --> 00:10:26,230
I've been merged and not yet it's about

00:10:24,129 --> 00:10:29,430
to go through the PR process and should

00:10:26,230 --> 00:10:29,430
be should be live soon

00:10:30,050 --> 00:10:35,750
so here I'm going to talk a little bit

00:10:32,300 --> 00:10:38,660
about us build where we're sort of

00:10:35,750 --> 00:10:40,580
redoing the back end pieces of this

00:10:38,660 --> 00:10:42,910
because anaconda is a wonderful

00:10:40,580 --> 00:10:45,680
wonderful tool but it was designed to

00:10:42,910 --> 00:10:47,300
well Neil shaking his head does not

00:10:45,680 --> 00:10:50,750
think it's a wonderful tool apparently

00:10:47,300 --> 00:10:52,490
I'm not gonna argue with you it's very

00:10:50,750 --> 00:10:54,140
good at some of the things that it is

00:10:52,490 --> 00:10:56,900
supposed to do and it's you know it's

00:10:54,140 --> 00:10:59,600
the one thing we know can make bootable

00:10:56,900 --> 00:11:00,850
images and do it correctly we figure

00:10:59,600 --> 00:11:03,560
maybe there should be another tool

00:11:00,850 --> 00:11:05,090
because it really doesn't want to work

00:11:03,560 --> 00:11:08,090
the way we want to use it it's designed

00:11:05,090 --> 00:11:10,130
for installing a image or installing a

00:11:08,090 --> 00:11:12,320
key system it wants to run on the system

00:11:10,130 --> 00:11:15,500
that is setting up and it gets really

00:11:12,320 --> 00:11:19,280
confused and gnarly so I was filmed and

00:11:15,500 --> 00:11:21,080
this UI here is not this is Amaka

00:11:19,280 --> 00:11:25,100
but part of what we're trying to do

00:11:21,080 --> 00:11:28,220
there is make builds be reproducible

00:11:25,100 --> 00:11:30,530
so when you do your initial image field

00:11:28,220 --> 00:11:32,420
you get a you know you get a manifest

00:11:30,530 --> 00:11:33,830
out a potential or something like that

00:11:32,420 --> 00:11:36,080
you get a list of the exact package

00:11:33,830 --> 00:11:38,630
versions that were used in that build

00:11:36,080 --> 00:11:40,100
and if you know a week later you wanna

00:11:38,630 --> 00:11:42,950
you're like hey that was you know we did

00:11:40,100 --> 00:11:45,860
that qko images great now I want an ami

00:11:42,950 --> 00:11:48,560
of that there can be some problems

00:11:45,860 --> 00:11:50,690
because of the way that in fedora the

00:11:48,560 --> 00:11:52,130
way our repos work some of the packages

00:11:50,690 --> 00:11:56,990
you used in that build might have gone

00:11:52,130 --> 00:11:58,220
away so OS build is going to or part of

00:11:56,990 --> 00:12:00,470
what it needs to do is handle that

00:11:58,220 --> 00:12:03,910
problem by you know caching all the data

00:12:00,470 --> 00:12:05,810
to get used in the images and sort of

00:12:03,910 --> 00:12:07,430
associating them with one another so we

00:12:05,810 --> 00:12:11,270
have this concept of a composed which is

00:12:07,430 --> 00:12:12,830
basically it's one point in time of that

00:12:11,270 --> 00:12:15,230
blueprint and all of the things you

00:12:12,830 --> 00:12:17,810
build from it so there's some challenges

00:12:15,230 --> 00:12:21,140
around how to make that safe and

00:12:17,810 --> 00:12:22,460
reproducible and reliable so yep there's

00:12:21,140 --> 00:12:25,760
a project called OS build that we're

00:12:22,460 --> 00:12:28,880
doing that's basically a staged image

00:12:25,760 --> 00:12:30,200
builder I think yeah it's a new build

00:12:28,880 --> 00:12:32,780
system for us and it is it doesn't

00:12:30,200 --> 00:12:34,100
really change a lot of the image builder

00:12:32,780 --> 00:12:37,130
stuff that we have it's just sort of

00:12:34,100 --> 00:12:40,670
this one new back-end component so it's

00:12:37,130 --> 00:12:41,870
not super disruptive to what we have but

00:12:40,670 --> 00:12:45,740
it's going to allow us to do a lot more

00:12:41,870 --> 00:12:46,990
reliable builds probably faster and

00:12:45,740 --> 00:12:49,120
[Music]

00:12:46,990 --> 00:12:50,170
and professor easier more reliable that

00:12:49,120 --> 00:12:56,500
sort of thing

00:12:50,170 --> 00:12:58,990
I don't remember yes so the other thing

00:12:56,500 --> 00:13:00,700
that is interesting about Westfield and

00:12:58,990 --> 00:13:04,000
one of the challenges that we have here

00:13:00,700 --> 00:13:05,080
why we have our own customizations and

00:13:04,000 --> 00:13:07,810
you know we're not just using

00:13:05,080 --> 00:13:10,240
Kickstarter principle is that when

00:13:07,810 --> 00:13:11,920
you're building images you're running on

00:13:10,240 --> 00:13:14,620
you're not running on the system that's

00:13:11,920 --> 00:13:17,500
the final target so there's a lot of

00:13:14,620 --> 00:13:20,530
things that we can't do we just can't

00:13:17,500 --> 00:13:22,720
bake into your image because it's not

00:13:20,530 --> 00:13:24,730
running in its intended environment yet

00:13:22,720 --> 00:13:26,170
so we can put things in the image but

00:13:24,730 --> 00:13:29,470
they don't get set up until the first

00:13:26,170 --> 00:13:31,000
when it's actually live but the way

00:13:29,470 --> 00:13:33,610
everybody does everything these days is

00:13:31,000 --> 00:13:35,190
well you know from what I've seen and we

00:13:33,610 --> 00:13:37,510
would love if you tell us otherwise

00:13:35,190 --> 00:13:39,820
everybody has enormous Kickstarter

00:13:37,510 --> 00:13:41,830
scripts with enormous post scripts that

00:13:39,820 --> 00:13:45,490
do a million weird things to set up

00:13:41,830 --> 00:13:47,110
their images in various ways and they

00:13:45,490 --> 00:13:48,670
never really tell us what happens in

00:13:47,110 --> 00:13:51,850
there but it's very very important that

00:13:48,670 --> 00:13:54,640
we support all of it and that doesn't

00:13:51,850 --> 00:13:56,350
really work with the image build image

00:13:54,640 --> 00:13:58,510
builder model of how images should get

00:13:56,350 --> 00:14:01,390
built we want that to be reliable and

00:13:58,510 --> 00:14:03,940
you know not involve spending up an

00:14:01,390 --> 00:14:06,190
entire VM or running off this hardware

00:14:03,940 --> 00:14:08,230
we should be building images like you

00:14:06,190 --> 00:14:10,120
compile code where you take a bunch of

00:14:08,230 --> 00:14:11,740
inputs and you get

00:14:10,120 --> 00:14:15,760
but you don't have to run an entire VM

00:14:11,740 --> 00:14:17,140
to do it so the model that we have today

00:14:15,760 --> 00:14:18,430
with kick-starting ansible is that

00:14:17,140 --> 00:14:20,170
you're running a whole bunch of code in

00:14:18,430 --> 00:14:23,620
the image to build to have it sort of

00:14:20,170 --> 00:14:25,900
build itself from the inside that

00:14:23,620 --> 00:14:29,110
doesn't really work it's not predictable

00:14:25,900 --> 00:14:30,850
it's not reliable it's really hard to

00:14:29,110 --> 00:14:35,440
troubleshoot what goes on in those

00:14:30,850 --> 00:14:37,300
things and some it's just like sometimes

00:14:35,440 --> 00:14:39,220
people just do really really wild stuff

00:14:37,300 --> 00:14:41,140
in there because it's shell scripts they

00:14:39,220 --> 00:14:42,790
can do literally anything and sometimes

00:14:41,140 --> 00:14:45,339
you see very interesting things

00:14:42,790 --> 00:14:47,290
happening that like shouldn't be allowed

00:14:45,339 --> 00:14:48,820
the police should come if you're you're

00:14:47,290 --> 00:14:52,150
doing the sorts of things I've seen in

00:14:48,820 --> 00:14:54,190
people's kick-starts so one of the

00:14:52,150 --> 00:14:55,839
themes of what we're working on here is

00:14:54,190 --> 00:14:58,900
to try to make image building a

00:14:55,839 --> 00:15:03,970
first-class use case of our packaging

00:14:58,900 --> 00:15:06,190
and installation toolkit so it does kind

00:15:03,970 --> 00:15:09,250
of mean we have to lay out stages so iOS

00:15:06,190 --> 00:15:10,779
build there's very strict stages of like

00:15:09,250 --> 00:15:13,300
you get a file system you do some stuff

00:15:10,779 --> 00:15:15,510
to it and then the next stage gets you

00:15:13,300 --> 00:15:18,010
know gets a file system and some

00:15:15,510 --> 00:15:19,690
configuration but they don't share

00:15:18,010 --> 00:15:21,279
anything else between them we're not

00:15:19,690 --> 00:15:25,490
necessarily running code inside the

00:15:21,279 --> 00:15:27,740
image it's doing things to the image

00:15:25,490 --> 00:15:29,959
so that's sort of there so if there is a

00:15:27,740 --> 00:15:32,540
different model of building than the one

00:15:29,959 --> 00:15:33,889
that we're used to and so we can't just

00:15:32,540 --> 00:15:36,470
say yeah we support kick-start because

00:15:33,889 --> 00:15:38,839
that's on the you're gonna run this in

00:15:36,470 --> 00:15:40,459
place model so these are the things

00:15:38,839 --> 00:15:42,529
we're trying to figure out is how to do

00:15:40,459 --> 00:15:44,750
a good job of doing the customization

00:15:42,529 --> 00:15:47,300
things for your images what you need to

00:15:44,750 --> 00:15:48,769
get done but not just let you have like

00:15:47,300 --> 00:15:50,959
the big box where you put all of your

00:15:48,769 --> 00:15:52,339
crazy shell scripts and then like it

00:15:50,959 --> 00:15:54,769
catches fire and we don't know what

00:15:52,339 --> 00:15:56,540
happened we would like to give you good

00:15:54,769 --> 00:15:59,240
tools to do the things you need to do so

00:15:56,540 --> 00:16:02,260
yeah I think there's an activity with

00:15:59,240 --> 00:16:02,260
the UX team

00:16:02,600 --> 00:16:09,170
oh yeah we have document yeah it has

00:16:05,270 --> 00:16:12,080
documentation we did good okay this is

00:16:09,170 --> 00:16:14,390
our upstream for Lorax composer and all

00:16:12,080 --> 00:16:18,350
of this it's in Braille seven six and

00:16:14,390 --> 00:16:20,330
eight and fedora and yes if you want to

00:16:18,350 --> 00:16:21,680
try these things out you can just the

00:16:20,330 --> 00:16:24,500
enough that's all cockpit composer

00:16:21,680 --> 00:16:26,740
there's an ansible playbook that will

00:16:24,500 --> 00:16:34,220
install it for you on you know

00:16:26,740 --> 00:16:36,560
everything and yeah so if you guys are

00:16:34,220 --> 00:16:38,360
gonna be around tomorrow I don't know if

00:16:36,560 --> 00:16:40,400
you've noticed we have a uxc booth out

00:16:38,360 --> 00:16:42,260
in the lobby we have a couple of

00:16:40,400 --> 00:16:44,570
activities that we're doing related to

00:16:42,260 --> 00:16:47,630
rels so this first one is image builder

00:16:44,570 --> 00:16:49,580
it's a card sort activity we would love

00:16:47,630 --> 00:16:51,800
to have you come by and participate in

00:16:49,580 --> 00:16:54,710
that activity to help us with refining

00:16:51,800 --> 00:16:56,060
the UI also the the current challenges

00:16:54,710 --> 00:16:57,770
we have with the customizations if

00:16:56,060 --> 00:17:00,380
customizations are important to you we

00:16:57,770 --> 00:17:03,080
had also love to just talk with you and

00:17:00,380 --> 00:17:06,589
more depth about those customizations

00:17:03,080 --> 00:17:08,720
and and how you use them so just come

00:17:06,589 --> 00:17:12,260
find us and we'd love to chat with you

00:17:08,720 --> 00:17:14,120
and then also so Sarah's involved in the

00:17:12,260 --> 00:17:18,079
card sort activity and then also she has

00:17:14,120 --> 00:17:19,970
an activity not really related to image

00:17:18,079 --> 00:17:22,550
builder but just relate it to row it's a

00:17:19,970 --> 00:17:24,170
top tasks survey so if you are around

00:17:22,550 --> 00:17:28,730
tomorrow please come by and take that

00:17:24,170 --> 00:17:31,309
survey for us and that's it do you guys

00:17:28,730 --> 00:17:33,740
have any questions for us

00:17:31,309 --> 00:17:39,940
I'll take the first one I'll pass the

00:17:33,740 --> 00:17:43,250
mic around so keep your hands up okay

00:17:39,940 --> 00:17:45,080
so yeah as people raise their hands I'll

00:17:43,250 --> 00:17:47,000
be bringing the mic directly to you if

00:17:45,080 --> 00:17:48,409
you happen to be in the middle of a row

00:17:47,000 --> 00:17:50,570
it'd be helpful if you'd try to move to

00:17:48,409 --> 00:17:52,400
the end we have plenty of time for

00:17:50,570 --> 00:17:55,990
questions because this slot technically

00:17:52,400 --> 00:17:55,990
because still 535

00:17:56,180 --> 00:18:02,420
oh boy let's rap y'all so I definitely

00:18:00,740 --> 00:18:04,730
like where you're going with the OS

00:18:02,420 --> 00:18:07,700
filled thing because the the thing

00:18:04,730 --> 00:18:09,650
before was painful

00:18:07,700 --> 00:18:12,140
so what did you look at for inspiration

00:18:09,650 --> 00:18:16,310
to try to figure out the strategy and

00:18:12,140 --> 00:18:19,160
approach of how you wanted this new way

00:18:16,310 --> 00:18:21,740
of building images to work because it

00:18:19,160 --> 00:18:23,240
seems to have shades of some of the

00:18:21,740 --> 00:18:25,730
other tools that I've worked on and

00:18:23,240 --> 00:18:27,710
contributed to and some of it is kind of

00:18:25,730 --> 00:18:31,070
different so I mean where where did you

00:18:27,710 --> 00:18:34,580
draw inspiration from you know I didn't

00:18:31,070 --> 00:18:39,890
actually start the build project so I

00:18:34,580 --> 00:18:51,920
don't I think that was mostly hi and

00:18:39,890 --> 00:18:54,740
Lars so I should ask them about that but

00:18:51,920 --> 00:18:56,600
I think mostly it's just this is the

00:18:54,740 --> 00:18:58,520
obviously same way to do something like

00:18:56,600 --> 00:19:01,400
an image build is to break it down into

00:18:58,520 --> 00:19:02,630
like repeatable steps and make sure that

00:19:01,400 --> 00:19:06,260
you know exactly what the inputs and

00:19:02,630 --> 00:19:08,870
outputs are of those steps you know the

00:19:06,260 --> 00:19:14,300
inspiration was trying to make code not

00:19:08,870 --> 00:19:16,640
suck yeah I'm not I'm not working on

00:19:14,300 --> 00:19:18,860
that because I'm definitely much more of

00:19:16,640 --> 00:19:20,720
a front-end developer the main

00:19:18,860 --> 00:19:23,150
understanding I have is that anaconda

00:19:20,720 --> 00:19:26,720
wasn't built to do this type of thing

00:19:23,150 --> 00:19:29,570
and so we need a new and better image

00:19:26,720 --> 00:19:32,540
filled application or tool to do that

00:19:29,570 --> 00:19:34,550
for us and and so they they want to make

00:19:32,540 --> 00:19:36,140
it easier to troubleshoot and easier to

00:19:34,550 --> 00:19:38,240
understand like what's happening in each

00:19:36,140 --> 00:19:41,030
stage of that process so it should be

00:19:38,240 --> 00:19:43,010
like a much cleaner way of creating

00:19:41,030 --> 00:19:44,900
these images so that you can kind of and

00:19:43,010 --> 00:19:46,430
providing logs for that whole process

00:19:44,900 --> 00:19:47,990
you can understand exactly what's

00:19:46,430 --> 00:19:48,850
happening that's my understanding I

00:19:47,990 --> 00:19:51,220
can't

00:19:48,850 --> 00:19:53,320
a little bit is this so so we're

00:19:51,220 --> 00:19:55,810
compartmentalizing each stage of the

00:19:53,320 --> 00:19:57,430
image build process so that way they

00:19:55,810 --> 00:19:59,200
aren't interacting with each other and

00:19:57,430 --> 00:20:01,690
then you can kind of keep track along

00:19:59,200 --> 00:20:03,550
each stage where you are and if it

00:20:01,690 --> 00:20:05,710
errors at any point you'll be able to

00:20:03,550 --> 00:20:08,170
get logs for that particular stage and

00:20:05,710 --> 00:20:10,420
it will the errors will only be related

00:20:08,170 --> 00:20:12,580
to that stage and then if you are trying

00:20:10,420 --> 00:20:14,800
to debug it you'll be able to start

00:20:12,580 --> 00:20:17,500
again from that stage in the image build

00:20:14,800 --> 00:20:20,110
process we're kind of keeping track of

00:20:17,500 --> 00:20:22,120
the file system through tree sums which

00:20:20,110 --> 00:20:23,590
each stage will generate so the as well

00:20:22,120 --> 00:20:26,020
said you have an input and an output to

00:20:23,590 --> 00:20:27,880
each stage and you should ideally have

00:20:26,020 --> 00:20:29,320
the input if you give it the same input

00:20:27,880 --> 00:20:31,390
you'll get the same output no matter

00:20:29,320 --> 00:20:34,090
what time it is if you build it from a

00:20:31,390 --> 00:20:36,010
specific input now and a specific input

00:20:34,090 --> 00:20:37,990
in that same input a year from now it

00:20:36,010 --> 00:20:39,700
should give you the same output sensor

00:20:37,990 --> 00:20:42,190
compartmentalizing each stage if there's

00:20:39,700 --> 00:20:44,140
like package changes in some repository

00:20:42,190 --> 00:20:45,940
you use that shouldn't affect the build

00:20:44,140 --> 00:20:49,840
process outside of that one package he

00:20:45,940 --> 00:20:52,300
is right yeah we want each step of the

00:20:49,840 --> 00:20:54,310
process to be not quite deterministic

00:20:52,300 --> 00:20:56,230
but like close to deterministic and

00:20:54,310 --> 00:20:57,580
that's kind of a big problem with a lot

00:20:56,230 --> 00:20:58,900
of the existing stuff because yeah the

00:20:57,580 --> 00:21:00,340
repos changed everyday if you've run the

00:20:58,900 --> 00:21:01,860
same kickstart script two days in a row

00:21:00,340 --> 00:21:03,610
you don't get the same image out

00:21:01,860 --> 00:21:05,620
necessarily and that's something that

00:21:03,610 --> 00:21:07,840
really we need to address and it turns

00:21:05,620 --> 00:21:10,450
out there's some deep assumptions in the

00:21:07,840 --> 00:21:14,700
sort of RPM ecosystem

00:21:10,450 --> 00:21:16,779
that we have to get to rethink like

00:21:14,700 --> 00:21:18,789
don't just disappear just because

00:21:16,779 --> 00:21:22,570
there's a newer version like that's not

00:21:18,789 --> 00:21:24,700
great for it yeah I mean if it's

00:21:22,570 --> 00:21:26,980
critically broken yet we should revoke

00:21:24,700 --> 00:21:28,359
it or whatever your build should fail if

00:21:26,980 --> 00:21:29,919
we had to revoke the package because it

00:21:28,359 --> 00:21:31,090
was critically broken but in general we

00:21:29,919 --> 00:21:32,590
shouldn't be doing that so there's some

00:21:31,090 --> 00:21:34,450
things you have to do with how

00:21:32,590 --> 00:21:36,730
repositories are structured so there's

00:21:34,450 --> 00:21:40,269
some like weird deep things we need to

00:21:36,730 --> 00:21:42,519
do in and around the RPM ecosystem to

00:21:40,269 --> 00:21:44,499
make image building like reliable and

00:21:42,519 --> 00:21:47,320
predictable and so there's a lot of

00:21:44,499 --> 00:21:49,690
weird work that's a cousin to these

00:21:47,320 --> 00:21:51,220
things that we're gonna be doing but I

00:21:49,690 --> 00:21:55,840
always build this sort of where it

00:21:51,220 --> 00:21:57,970
starts and then someone in the front and

00:21:55,840 --> 00:22:00,999
some of the advantages we would get with

00:21:57,970 --> 00:22:03,940
this new OS build is in this example you

00:22:00,999 --> 00:22:05,559
can see the the first item we have is I

00:22:03,940 --> 00:22:07,450
don't know we're gonna call it like in

00:22:05,559 --> 00:22:09,009
this mock-up it's the compose but we'll

00:22:07,450 --> 00:22:11,379
head saw the manifest but it's like

00:22:09,009 --> 00:22:13,509
those those package files that are going

00:22:11,379 --> 00:22:16,149
into your ear image file so at first I

00:22:13,509 --> 00:22:19,840
create a specific image file type like

00:22:16,149 --> 00:22:22,749
for Amazon after this OS build process

00:22:19,840 --> 00:22:24,489
then like two weeks a month later I

00:22:22,749 --> 00:22:26,889
could choose to create the exact same

00:22:24,489 --> 00:22:28,149
image but for Azure and I can see like

00:22:26,889 --> 00:22:31,539
these are all the image files I have

00:22:28,149 --> 00:22:34,210
created for that that composure that

00:22:31,539 --> 00:22:36,549
manifests and then also with the work

00:22:34,210 --> 00:22:38,350
that Jacobs doing where you can take

00:22:36,549 --> 00:22:40,029
then take that image file and upload it

00:22:38,350 --> 00:22:41,919
somewhere being able to then see these

00:22:40,029 --> 00:22:44,830
are all the uploads that I've kicked off

00:22:41,919 --> 00:22:47,169
from this image file and then for each

00:22:44,830 --> 00:22:50,019
of those things being able to access the

00:22:47,169 --> 00:22:51,639
logs so for the OS build and then for

00:22:50,019 --> 00:22:53,259
the image file creation and then also

00:22:51,639 --> 00:22:54,909
for the upload so being able to know

00:22:53,259 --> 00:22:56,590
exactly like what's happening at each

00:22:54,909 --> 00:22:58,030
stage of that process

00:22:56,590 --> 00:23:00,760
[Music]

00:22:58,030 --> 00:23:03,580
next question I'm gonna pass the

00:23:00,760 --> 00:23:06,320
microphone but I've been asked to remind

00:23:03,580 --> 00:23:07,340
everyone here

00:23:06,320 --> 00:23:08,870
we still have plenty of time for

00:23:07,340 --> 00:23:10,370
questions but when we do finish

00:23:08,870 --> 00:23:13,010
questions I've been asked to remind

00:23:10,370 --> 00:23:15,920
everyone to please clear the conference

00:23:13,010 --> 00:23:17,510
room completely and also move out of the

00:23:15,920 --> 00:23:20,530
Siskind lounge basically the whole space

00:23:17,510 --> 00:23:22,610
we need to vacate for a period of time

00:23:20,530 --> 00:23:25,160
it's recommended that you maybe get

00:23:22,610 --> 00:23:26,929
dinner and the party is going to be at

00:23:25,160 --> 00:23:28,130
7:00 p.m. I believe in the terrorists

00:23:26,929 --> 00:23:30,440
lounge

00:23:28,130 --> 00:23:31,820
also it was asked to remind you that you

00:23:30,440 --> 00:23:33,350
can still sign up for lightning talks

00:23:31,820 --> 00:23:35,860
they're gonna take signups during the

00:23:33,350 --> 00:23:35,860
party I think

00:23:37,419 --> 00:23:44,139
this is great we had long discussions

00:23:40,179 --> 00:23:47,139
about this earlier a couple things

00:23:44,139 --> 00:23:49,389
occurred to me while I thought I'd like

00:23:47,139 --> 00:23:52,269
to ask if you considered the first is

00:23:49,389 --> 00:23:54,999
you talked about targeting various cloud

00:23:52,269 --> 00:23:58,479
providers and one of the trickiest parts

00:23:54,999 --> 00:24:00,609
I've found in producing images for cloud

00:23:58,479 --> 00:24:02,320
providers is the stage he kind of

00:24:00,609 --> 00:24:03,549
alluded to you talked about the problem

00:24:02,320 --> 00:24:05,469
with running Kickstarter all that the

00:24:03,549 --> 00:24:07,299
first of which is how do I configure

00:24:05,469 --> 00:24:09,339
this once it gets launched and the

00:24:07,299 --> 00:24:12,759
standard there is cloud in it whether we

00:24:09,339 --> 00:24:14,649
like it or lump it do you have like you

00:24:12,759 --> 00:24:16,239
do a live demo so I'm gonna ask you if

00:24:14,649 --> 00:24:18,489
you could actually can you pull up like

00:24:16,239 --> 00:24:20,739
what it looks like or do you have UI for

00:24:18,489 --> 00:24:25,200
customizing this specifically that cloud

00:24:20,739 --> 00:24:25,200
in it or comparable stage in an image

00:24:26,729 --> 00:24:32,889
yeah yeah we don't have UI for that yet

00:24:29,320 --> 00:24:35,440
yes consider it as part of the effort

00:24:32,889 --> 00:24:36,279
yes I know that there's I mean there's

00:24:35,440 --> 00:24:39,399
supposed to be somewhere where you can

00:24:36,279 --> 00:24:40,809
drop in a I don't know configuration or

00:24:39,399 --> 00:24:44,049
something like that it's pretty trivial

00:24:40,809 --> 00:24:45,519
to drop a file into place or - yeah

00:24:44,049 --> 00:24:47,049
we're going we're considering that and

00:24:45,519 --> 00:24:48,009
we would love for you to come and tell

00:24:47,049 --> 00:24:50,229
us what you think that should look like

00:24:48,009 --> 00:24:53,169
because we don't really have a good

00:24:50,229 --> 00:24:56,139
sense of what people expect there what

00:24:53,169 --> 00:24:58,570
they would expect - it's kind of like a

00:24:56,139 --> 00:25:01,209
contracting cloud in it it's really wide

00:24:58,570 --> 00:25:03,519
open but what it would be nice to be

00:25:01,209 --> 00:25:05,829
able to do is to look at an image at

00:25:03,519 --> 00:25:07,749
some point and say this is what the

00:25:05,829 --> 00:25:09,729
cloud in it on it expects this is the

00:25:07,749 --> 00:25:11,679
contract for what you have to fill in

00:25:09,729 --> 00:25:14,259
when you then go say you upload it to

00:25:11,679 --> 00:25:17,019
glance and for OpenStack when I deploy

00:25:14,259 --> 00:25:18,759
this image before I do I better consider

00:25:17,019 --> 00:25:21,609
these things the the standard for

00:25:18,759 --> 00:25:22,959
instance is that I'm gonna do PKI and

00:25:21,609 --> 00:25:26,919
I'm gonna SSH into the machine where

00:25:22,959 --> 00:25:28,690
it's done so I better provide a key pair

00:25:26,919 --> 00:25:31,359
right well that actually is provided by

00:25:28,690 --> 00:25:33,009
a cloud in it and it's just known that

00:25:31,359 --> 00:25:34,889
that's the way that it works whereas if

00:25:33,009 --> 00:25:38,470
there is some way of first of all

00:25:34,889 --> 00:25:41,259
specifying here on the on the VM that

00:25:38,470 --> 00:25:42,730
this is the cloud in your modules that

00:25:41,259 --> 00:25:45,100
we're putting in there and they might be

00:25:42,730 --> 00:25:47,379
that they are beyond the art just

00:25:45,100 --> 00:25:49,029
dropping rpm in there but this is this

00:25:47,379 --> 00:25:50,440
is what I'm going to actually allow and

00:25:49,029 --> 00:25:52,299
there's a configuration file what you

00:25:50,440 --> 00:25:54,279
enable or what you would ignore for the

00:25:52,299 --> 00:25:55,840
perhaps security reasons right and then

00:25:54,279 --> 00:25:57,999
to be able to query that and say this is

00:25:55,840 --> 00:26:00,429
this is what it is so that kind of

00:25:57,999 --> 00:26:01,960
information it sounds like you're

00:26:00,429 --> 00:26:02,499
thinking along those lines yeah that

00:26:01,960 --> 00:26:06,070
sounds great

00:26:02,499 --> 00:26:11,230
yeah we have right now for adding sort

00:26:06,070 --> 00:26:13,389
of arbitrary content to the image is so

00:26:11,230 --> 00:26:15,070
you may have noticed that when you're

00:26:13,389 --> 00:26:16,570
working on the blueprint it had you know

00:26:15,070 --> 00:26:18,669
you commit your changes right on the

00:26:16,570 --> 00:26:19,899
back end it's just a git repo that we're

00:26:18,669 --> 00:26:22,210
putting them in so there is actually

00:26:19,899 --> 00:26:24,249
like a timeline you can add other stuff

00:26:22,210 --> 00:26:25,840
to that get repo and during the image

00:26:24,249 --> 00:26:27,970
field we put that into an RPM and

00:26:25,840 --> 00:26:29,739
install that RPM into your image so you

00:26:27,970 --> 00:26:32,649
can just lay down whatever files you

00:26:29,739 --> 00:26:33,999
want wherever you want pretty easily so

00:26:32,649 --> 00:26:35,559
like there's a hook where you could

00:26:33,999 --> 00:26:37,029
probably do the cloud init thing you

00:26:35,559 --> 00:26:40,450
want here but we really do need better

00:26:37,029 --> 00:26:41,859
information about what common options or

00:26:40,450 --> 00:26:43,480
things people care about when they're

00:26:41,859 --> 00:26:45,369
like I use cloud init to set up these

00:26:43,480 --> 00:26:46,690
things like what that UI would look like

00:26:45,369 --> 00:26:48,429
what sort of questions we would be

00:26:46,690 --> 00:26:50,200
asking that's what we need to know more

00:26:48,429 --> 00:26:51,549
about so there's the technical

00:26:50,200 --> 00:26:54,190
feasibility of it yeah sure you can do

00:26:51,549 --> 00:26:56,379
whatever you want and like how can we

00:26:54,190 --> 00:26:59,830
help you make sense of this is the more

00:26:56,379 --> 00:27:02,919
interesting and complicated question yes

00:26:59,830 --> 00:27:04,179
very much so pretty much on the to

00:27:02,919 --> 00:27:07,210
extend that question a little bit

00:27:04,179 --> 00:27:11,470
I mentioned cloud in it but we're moving

00:27:07,210 --> 00:27:13,749
into a core OS world where edition which

00:27:11,470 --> 00:27:14,950
is earlier it's similar it's really

00:27:13,749 --> 00:27:17,610
really similar from so is the

00:27:14,950 --> 00:27:19,559
abstraction gonna be like one

00:27:17,610 --> 00:27:21,720
here's the configuration thing as

00:27:19,559 --> 00:27:23,940
opposed to clouding it have we thought

00:27:21,720 --> 00:27:25,260
in terms of multiple stages for that cuz

00:27:23,940 --> 00:27:29,640
it's kind of the same problem with the

00:27:25,260 --> 00:27:31,020
Anaconda like we've thought about it but

00:27:29,640 --> 00:27:32,490
yeah we still don't have clear ideas

00:27:31,020 --> 00:27:34,110
about like this everybody in the world

00:27:32,490 --> 00:27:36,150
use cloud in it or do they want other

00:27:34,110 --> 00:27:38,370
options so we're we're sort of

00:27:36,150 --> 00:27:40,500
approaching it from a let's see what

00:27:38,370 --> 00:27:43,679
people ask or and see how what we can do

00:27:40,500 --> 00:27:45,510
a good job of if I understand cool

00:27:43,679 --> 00:27:46,710
chloro I started off with cloud in it

00:27:45,510 --> 00:27:48,390
and then moved it to ignition because

00:27:46,710 --> 00:27:49,950
they needed more yeah they need to do

00:27:48,390 --> 00:27:51,960
smart stuff so you just think of them

00:27:49,950 --> 00:27:54,210
one other question on what you talked

00:27:51,960 --> 00:27:55,650
about and use the word manifest earlier

00:27:54,210 --> 00:27:59,010
which is interesting is he a blueprint

00:27:55,650 --> 00:28:01,799
would say this is how I want to build it

00:27:59,010 --> 00:28:04,080
right if you use the word manifest in an

00:28:01,799 --> 00:28:05,880
airplane mode it's actually who are the

00:28:04,080 --> 00:28:07,590
passengers who actually loaded the plane

00:28:05,880 --> 00:28:10,530
as opposed to the passenger list

00:28:07,590 --> 00:28:12,059
yeah and so you talked about making

00:28:10,530 --> 00:28:14,220
these things reproducible is there an

00:28:12,059 --> 00:28:16,830
artifact which says separate from like

00:28:14,220 --> 00:28:19,169
to an RPM query of it this is from from

00:28:16,830 --> 00:28:21,630
like I asked for httpd I got HTTP

00:28:19,169 --> 00:28:23,790
bah-bah-bah can I build that actual

00:28:21,630 --> 00:28:26,549
manifest and use that to rerun the

00:28:23,790 --> 00:28:30,690
blueprint more explicitly to reproduce

00:28:26,549 --> 00:28:33,960
that stage yes it's all sort of implicit

00:28:30,690 --> 00:28:35,429
in the UI but yeah we do write out a we

00:28:33,960 --> 00:28:37,559
do write out our manifest that has the

00:28:35,429 --> 00:28:39,960
exact or I think we do has the exact

00:28:37,559 --> 00:28:42,870
versions of what went in to that stage

00:28:39,960 --> 00:28:45,660
and os build that keeps yeah has it

00:28:42,870 --> 00:28:47,250
keeps its inputs so somewhere in there

00:28:45,660 --> 00:28:49,320
yes there will be an actual manifest

00:28:47,250 --> 00:28:52,080
that has the actual listing and

00:28:49,320 --> 00:28:54,900
we don't expose that in the UI anywhere

00:28:52,080 --> 00:28:56,190
right now I don't we don't expose it

00:28:54,900 --> 00:28:57,600
right but yeah it would be a thing that

00:28:56,190 --> 00:29:02,010
you could fetch and then feed into other

00:28:57,600 --> 00:29:03,180
stuff it is the intent there so you may

00:29:02,010 --> 00:29:06,570
have already mentioned this in this so I

00:29:03,180 --> 00:29:09,290
apologize but so OS fellas kind of meant

00:29:06,570 --> 00:29:11,880
to build images retro actively write

00:29:09,290 --> 00:29:13,380
reproduce filter attractively if I knew

00:29:11,880 --> 00:29:16,260
from the start that I wanted to build

00:29:13,380 --> 00:29:18,150
say an ami and a cue cow image could I

00:29:16,260 --> 00:29:19,620
do both of those in one step or what I

00:29:18,150 --> 00:29:22,400
have to build the first and then go back

00:29:19,620 --> 00:29:22,400
and build a second

00:29:22,990 --> 00:29:31,390
that's and you I anyway you do them as

00:29:27,950 --> 00:29:33,980
separate things there is a CLI for this

00:29:31,390 --> 00:29:38,180
that so you could kick off both of those

00:29:33,980 --> 00:29:39,650
at the same time and the in the problem

00:29:38,180 --> 00:29:41,750
is with anaconda they're two totally

00:29:39,650 --> 00:29:43,250
separate builds because then it kind of

00:29:41,750 --> 00:29:46,400
starts from you know basically floating

00:29:43,250 --> 00:29:48,260
up over the machine with OS filled we

00:29:46,400 --> 00:29:54,710
would be able to do both of those at the

00:29:48,260 --> 00:29:56,930
same time in theory but in practice this

00:29:54,710 --> 00:29:59,410
is one of the interesting UX problems is

00:29:56,930 --> 00:30:01,520
in what order do we ask these questions

00:29:59,410 --> 00:30:03,830
we don't ask you what kind of image

00:30:01,520 --> 00:30:05,510
you're going to build at first because

00:30:03,830 --> 00:30:07,790
it's not really relevant until you're

00:30:05,510 --> 00:30:09,050
actually building an image but in theory

00:30:07,790 --> 00:30:11,560
we could do that earlier

00:30:09,050 --> 00:30:14,030
so at this point in time like this is

00:30:11,560 --> 00:30:17,240
the work that Jacobs currently doing

00:30:14,030 --> 00:30:19,040
where we we do ask you what image type

00:30:17,240 --> 00:30:20,840
you want to create and if you choose a

00:30:19,040 --> 00:30:23,060
specific image type you might have other

00:30:20,840 --> 00:30:24,830
upload options available to it so I

00:30:23,060 --> 00:30:27,410
guess my question for you is like at the

00:30:24,830 --> 00:30:29,390
time that you are building this image it

00:30:27,410 --> 00:30:31,790
sounds like you would want to be able to

00:30:29,390 --> 00:30:33,860
kick off multiple image files from this

00:30:31,790 --> 00:30:37,100
creation process it's not do I

00:30:33,860 --> 00:30:38,240
understand you correctly yes okay yeah

00:30:37,100 --> 00:30:40,790
that's very interesting that's not

00:30:38,240 --> 00:30:42,920
something I use case that I considered

00:30:40,790 --> 00:30:44,660
but it's it's definitely an interesting

00:30:42,920 --> 00:30:47,779
one to consider for this

00:30:44,660 --> 00:30:47,779
[Music]

00:30:50,820 --> 00:30:53,910
[Music]

00:30:59,000 --> 00:31:02,809
so as I was walking I think you

00:31:01,039 --> 00:31:05,090
mentioned the prom that often you'll go

00:31:02,809 --> 00:31:07,909
to repeat a build of an image but the

00:31:05,090 --> 00:31:09,890
package is rpm package repo no longer

00:31:07,909 --> 00:31:13,820
has that old version of an RPM is that

00:31:09,890 --> 00:31:15,409
correct yes so I work on a piece of

00:31:13,820 --> 00:31:17,840
open-source software called pulp that I

00:31:15,409 --> 00:31:20,600
think it might suggest for to solve your

00:31:17,840 --> 00:31:22,760
problem what you could do is instead of

00:31:20,600 --> 00:31:25,990
directly downloading those rpms from

00:31:22,760 --> 00:31:28,669
that beep oh you would set up a pulp and

00:31:25,990 --> 00:31:30,710
papas used for his managers package

00:31:28,669 --> 00:31:34,070
repos it's commonly used to create your

00:31:30,710 --> 00:31:36,860
own or to sync or mirror one from the

00:31:34,070 --> 00:31:39,110
internet or whatever in both cases it

00:31:36,860 --> 00:31:42,140
can create ver to keep old versions or

00:31:39,110 --> 00:31:43,940
snapshots of those repos so the idea is

00:31:42,140 --> 00:31:46,490
whenever you go to reach view this rpms

00:31:43,940 --> 00:31:48,260
you'd said say hey I'll get all the

00:31:46,490 --> 00:31:51,950
metadata for those week to speed by this

00:31:48,260 --> 00:31:55,159
current time and then lazy sync other

00:31:51,950 --> 00:31:58,460
rpms that you request so for a package

00:31:55,159 --> 00:32:00,110
repo like like Apple at all its distinct

00:31:58,460 --> 00:32:03,770
the metadata for all 10,000 packages but

00:32:00,110 --> 00:32:06,200
then the fact is you requested like the

00:32:03,770 --> 00:32:09,360
200 would be kept on desk permanently in

00:32:06,200 --> 00:32:11,220
that version yeah

00:32:09,360 --> 00:32:12,750
sorry yeah there are definitely various

00:32:11,220 --> 00:32:15,870
schools that do this sort of thing that

00:32:12,750 --> 00:32:18,150
will like that will work around the fact

00:32:15,870 --> 00:32:20,850
that the RPM ecosystem we design drops

00:32:18,150 --> 00:32:22,080
packages randomly there are yeah there

00:32:20,850 --> 00:32:23,820
are a few ways to work around that hub

00:32:22,080 --> 00:32:26,490
and yeah I've heard good things about

00:32:23,820 --> 00:32:28,800
hope um but if I can transfer it just a

00:32:26,490 --> 00:32:30,630
second why don't we just fix that and

00:32:28,800 --> 00:32:33,090
not throw out packages just because

00:32:30,630 --> 00:32:34,230
they're old would be my suggestion this

00:32:33,090 --> 00:32:36,450
is one of the things I'm going to be

00:32:34,230 --> 00:32:40,050
talking about are trying to start on the

00:32:36,450 --> 00:32:41,430
Fedora develop this soon the reason that

00:32:40,050 --> 00:32:44,010
they disappear basically from the

00:32:41,430 --> 00:32:46,080
mirrors at this point is that it gets

00:32:44,010 --> 00:32:49,410
really big over time because rpm is a

00:32:46,080 --> 00:32:52,710
terrible story format for a lot of very

00:32:49,410 --> 00:32:54,960
very similar data so we might need new a

00:32:52,710 --> 00:32:57,930
new repo format but if we had a

00:32:54,960 --> 00:33:00,420
different repo format like the I've been

00:32:57,930 --> 00:33:02,220
running some tests and if you have a

00:33:00,420 --> 00:33:04,080
repo format that duplicates at the file

00:33:02,220 --> 00:33:09,120
level of the content you can store it

00:33:04,080 --> 00:33:10,200
every everything all of Fedora 29 every

00:33:09,120 --> 00:33:13,500
package has ever been released for

00:33:10,200 --> 00:33:15,630
fedora 29 takes 15% less space than the

00:33:13,500 --> 00:33:17,700
current repos do if you're duplicating

00:33:15,630 --> 00:33:20,190
at the file level so like there's no

00:33:17,700 --> 00:33:22,020
technical the only technical reason that

00:33:20,190 --> 00:33:24,180
we have to throw old packages is because

00:33:22,020 --> 00:33:26,820
it makes the metadata too big and it

00:33:24,180 --> 00:33:29,960
makes the repo itself very large and the

00:33:26,820 --> 00:33:29,960
mirrors are getting really mad at us

00:33:30,210 --> 00:33:34,649
exactly yes the the main problem that we

00:33:33,389 --> 00:33:37,679
face is the image building has a

00:33:34,649 --> 00:33:39,929
first-class use case of the RPM

00:33:37,679 --> 00:33:41,789
ecosystem and of anaconda like it wasn't

00:33:39,929 --> 00:33:44,490
really designed for this so we're having

00:33:41,789 --> 00:33:47,639
to find these places and try to fix them

00:33:44,490 --> 00:33:50,009
so yes I think I always build currently

00:33:47,639 --> 00:33:52,169
has a way of making sure that it is

00:33:50,009 --> 00:33:54,299
holding the data that it needs for the

00:33:52,169 --> 00:33:56,429
blueprints that it knows its power is

00:33:54,299 --> 00:34:01,110
that I'm not sure okay

00:33:56,429 --> 00:34:04,320
don't quote me on that that's a dream I

00:34:01,110 --> 00:34:05,700
had and please don't unfortunately I

00:34:04,320 --> 00:34:07,019
don't know my dreams don't yet turn into

00:34:05,700 --> 00:34:09,960
code automatically so you might have to

00:34:07,019 --> 00:34:11,879
wait on that one but yeah I do want to

00:34:09,960 --> 00:34:14,490
fix the sort of deeper problem of like

00:34:11,879 --> 00:34:16,050
why we get rid of packages at all you

00:34:14,490 --> 00:34:17,369
know I secretly just want to rewrite a

00:34:16,050 --> 00:34:19,169
new package manager and rust but they

00:34:17,369 --> 00:34:21,589
won't let me just do that so I'm finding

00:34:19,169 --> 00:34:24,659
an excuse this way

00:34:21,589 --> 00:34:28,080
interestingly the I'm sorry I'm going

00:34:24,659 --> 00:34:29,760
off way on a tangent here but the repo

00:34:28,080 --> 00:34:32,190
format that I'm playing with looks a lot

00:34:29,760 --> 00:34:33,600
like squash vests because squash my

00:34:32,190 --> 00:34:36,200
system

00:34:33,600 --> 00:34:36,200
No

00:34:36,250 --> 00:34:39,480
yes you know

00:34:39,490 --> 00:34:44,649
right it would be cool if our file

00:34:41,950 --> 00:34:48,520
format was like not designed for putting

00:34:44,649 --> 00:34:49,629
on the tapes yeah yeah one of the other

00:34:48,520 --> 00:34:51,070
things is that it would be nice if you

00:34:49,629 --> 00:34:53,320
could download individual files or them

00:34:51,070 --> 00:34:55,540
having to download the entire RPM

00:34:53,320 --> 00:34:57,190
payload and then install it and then

00:34:55,540 --> 00:34:58,780
frequently install the entire payload

00:34:57,190 --> 00:35:00,220
and throw all that one file because you

00:34:58,780 --> 00:35:02,109
don't want you know you only wanted one

00:35:00,220 --> 00:35:05,140
thing the amount of data the amount of

00:35:02,109 --> 00:35:06,490
time and data that we wastes in the way

00:35:05,140 --> 00:35:08,710
that we do things now is absurd

00:35:06,490 --> 00:35:10,119
something like a 95% of all the data you

00:35:08,710 --> 00:35:12,520
download when you update your system is

00:35:10,119 --> 00:35:15,099
thrown out or duplicated elsewhere it's

00:35:12,520 --> 00:35:18,280
so there's a lot to do there to make

00:35:15,099 --> 00:35:20,260
image building more reliable so like

00:35:18,280 --> 00:35:22,200
we've done really really well with the

00:35:20,260 --> 00:35:25,030
tools that we had but to make this

00:35:22,200 --> 00:35:26,890
reliable reproducible safe fast

00:35:25,030 --> 00:35:31,740
efficient we're gonna have to do some

00:35:26,890 --> 00:35:31,740
gear and stuff so thanks

00:35:33,460 --> 00:35:37,470
yeah yeah Scotch FS would do

00:35:43,480 --> 00:35:51,520
yes yes so going yes the idea is

00:35:49,900 --> 00:35:53,680
basically to may have a repo that looks

00:35:51,520 --> 00:35:55,839
sort of like a git pack file content

00:35:53,680 --> 00:35:57,820
addressable but with the small binary

00:35:55,839 --> 00:36:00,670
indexes deduplicating at the file level

00:35:57,820 --> 00:36:02,829
probably doing binary dips of files

00:36:00,670 --> 00:36:05,170
because every build is like 99 percent

00:36:02,829 --> 00:36:07,240
the same data as the previous build so

00:36:05,170 --> 00:36:09,640
why do we store a complete copy of the

00:36:07,240 --> 00:36:13,450
package every single time it adds up

00:36:09,640 --> 00:36:15,280
really quickly so yes that there's a

00:36:13,450 --> 00:36:16,720
whole lot of talk that will have to

00:36:15,280 --> 00:36:18,849
happen on Fedora to the list and Elser

00:36:16,720 --> 00:36:20,680
about these things if you're interested

00:36:18,849 --> 00:36:22,720
in attacking those sorts of problems we

00:36:20,680 --> 00:36:25,599
do come talk to me because that's yeah

00:36:22,720 --> 00:36:28,690
that's the big challenge is making those

00:36:25,599 --> 00:36:30,940
sort of systemic changes

00:36:28,690 --> 00:36:33,609
yeah so I think going wrong you're

00:36:30,940 --> 00:36:35,410
saying I think you said deduplication

00:36:33,609 --> 00:36:36,880
you mean like completely identical rpms

00:36:35,410 --> 00:36:38,710
or doing the fact that you you know this

00:36:36,880 --> 00:36:41,970
panelists newer version rpm is the

00:36:38,710 --> 00:36:45,280
contents are only changed a few percents

00:36:41,970 --> 00:36:48,609
you talked about deduplication for the

00:36:45,280 --> 00:36:50,440
fact that a cross repo I know you bring

00:36:48,609 --> 00:36:53,770
the fact that like this package got

00:36:50,440 --> 00:36:55,869
updated each 100 Meg's but only like one

00:36:53,770 --> 00:36:58,900
megabyte changed across versions right

00:36:55,869 --> 00:37:00,700
yeah I mean like you duplicating

00:36:58,900 --> 00:37:01,900
store block store it's or whatever it

00:37:00,700 --> 00:37:04,059
can help with that too much because it's

00:37:01,900 --> 00:37:07,390
all within target easy or chart out XC

00:37:04,059 --> 00:37:08,920
right yeah keeping the it's unfortunate

00:37:07,390 --> 00:37:11,230
that the way that we store the data

00:37:08,920 --> 00:37:12,640
makes that a hard problem it doesn't

00:37:11,230 --> 00:37:15,369
have to be it's not actually a hard

00:37:12,640 --> 00:37:17,349
problem if we don't store our data did

00:37:15,369 --> 00:37:18,460
in our PMS so we just need to like this

00:37:17,349 --> 00:37:20,589
written something slightly different

00:37:18,460 --> 00:37:24,520
that could be converted to and from our

00:37:20,589 --> 00:37:26,410
PMS maybe is the sort of idea but yeah

00:37:24,520 --> 00:37:28,420
deduplication at the file level isn't

00:37:26,410 --> 00:37:30,460
super hard to do you have nuts what it

00:37:28,420 --> 00:37:32,920
does it's a well-studied problem it's

00:37:30,460 --> 00:37:35,380
really pretty easy to do

00:37:32,920 --> 00:37:38,730
we can make stuff that's RPM compatible

00:37:35,380 --> 00:37:38,730
without being rpm and

00:37:42,400 --> 00:37:45,090
right

00:37:45,510 --> 00:37:50,430
yeah it's kind of amazing how much of

00:37:47,100 --> 00:37:53,700
the container world is just moving tar

00:37:50,430 --> 00:37:55,950
balls around it seems like we'd have a

00:37:53,700 --> 00:37:58,080
better story for some of these things

00:37:55,950 --> 00:37:59,460
about how you make images and construct

00:37:58,080 --> 00:38:03,380
them and put them together and we just

00:37:59,460 --> 00:38:06,470
don't so somebody's empty good anyway

00:38:03,380 --> 00:38:06,470
what's up

00:38:07,140 --> 00:38:12,619
yeah so OS tree sure he's great but it's

00:38:14,330 --> 00:38:19,440
historias designs for specifically for

00:38:17,340 --> 00:38:22,020
the use case of having multiplied it

00:38:19,440 --> 00:38:23,190
wants to be on disk it wants to use hard

00:38:22,020 --> 00:38:25,500
links and it wants to get your disk it's

00:38:23,190 --> 00:38:27,540
not a great repo format it's not

00:38:25,500 --> 00:38:29,130
something you want to put on the mirrors

00:38:27,540 --> 00:38:30,960
you know because every time you update

00:38:29,130 --> 00:38:34,140
you have to do like 15 million requests

00:38:30,960 --> 00:38:36,480
to get all because it's per file and s3

00:38:34,140 --> 00:38:38,610
candidate gets or you can try and put a

00:38:36,480 --> 00:38:40,470
coupon that's three it gets really weird

00:38:38,610 --> 00:38:42,750
because it uses you know 15 million

00:38:40,470 --> 00:38:45,060
buckets or whatever so it the current

00:38:42,750 --> 00:38:48,990
that's stuff that idea the OS tree idea

00:38:45,060 --> 00:38:51,300
is sound in how you store the data but

00:38:48,990 --> 00:38:52,740
they left out you know you got it most

00:38:51,300 --> 00:38:55,310
to get if you left it at the pack files

00:38:52,740 --> 00:38:58,890
pack files actually are a good idea and

00:38:55,310 --> 00:39:02,780
rpm that's not a good pack file format

00:38:58,890 --> 00:39:02,780
either so yeah

00:39:04,900 --> 00:39:14,559
oh yeah yeah yeah no yes and our path

00:39:11,559 --> 00:39:15,970
inspired interestingly Solaris when

00:39:14,559 --> 00:39:18,099
knavery brought their packaging system

00:39:15,970 --> 00:39:19,960
which puts all of their packages into a

00:39:18,099 --> 00:39:21,730
big content store where they address all

00:39:19,960 --> 00:39:25,269
the files by their hashes and they only

00:39:21,730 --> 00:39:27,369
download the files they need weird so

00:39:25,269 --> 00:39:30,430
yeah once again I'm stealing ideas from

00:39:27,369 --> 00:39:31,869
some to fix our packaging which is

00:39:30,430 --> 00:39:32,730
exactly how we got our p.m. twenty years

00:39:31,869 --> 00:39:36,249
ago

00:39:32,730 --> 00:39:37,630
sorry I think I don't know this one guys

00:39:36,249 --> 00:39:41,710
I have talked to her not mad at me about

00:39:37,630 --> 00:39:42,940
it so although it is funny to talk to

00:39:41,710 --> 00:39:44,109
them about like some of these things

00:39:42,940 --> 00:39:45,670
because that was a very large change

00:39:44,109 --> 00:39:48,339
they changed their entire packaging

00:39:45,670 --> 00:39:51,880
system to like this totally different

00:39:48,339 --> 00:39:54,009
thing and I said I was like did what did

00:39:51,880 --> 00:39:55,569
the customers think about that like can

00:39:54,009 --> 00:39:57,190
you just do that and they're like yeah

00:39:55,569 --> 00:39:59,499
it's fine I was like we can't really

00:39:57,190 --> 00:40:01,150
just like change the entire system in

00:39:59,499 --> 00:40:01,839
the open source world without anybody

00:40:01,150 --> 00:40:04,150
yelling at you

00:40:01,839 --> 00:40:09,849
and they're like yeah we know must be

00:40:04,150 --> 00:40:13,839
hard for you the kind of smog whatever

00:40:09,849 --> 00:40:15,369
yeah that's the thing yeah various

00:40:13,839 --> 00:40:17,140
places were there any other questions

00:40:15,369 --> 00:40:18,809
anybody else just want me to like rant

00:40:17,140 --> 00:40:21,489
about rpm

00:40:18,809 --> 00:40:24,309
can you have like 4 minutes left how

00:40:21,489 --> 00:40:27,089
much time 4 minutes 4 minutes but there

00:40:24,309 --> 00:40:27,089
was there anything else

00:40:32,349 --> 00:40:38,869
hold up here one more question yeah

00:40:35,949 --> 00:40:43,219
wasn't wouldn't Delta rpm solve this

00:40:38,869 --> 00:40:47,029
problem like when you keep old Delta RP

00:40:43,219 --> 00:40:51,499
ins I propose we not dig too deep into

00:40:47,029 --> 00:40:53,479
the theoretical challenge really that's

00:40:51,499 --> 00:41:01,939
completely different than image building

00:40:53,479 --> 00:41:04,130
yeah also luck Delta rpm it is terrible

00:41:01,939 --> 00:41:05,179
I have come find me and buy me a drink

00:41:04,130 --> 00:41:07,939
and I will rant at you about how

00:41:05,179 --> 00:41:09,199
terrible Delta RPMs conceptually yeah

00:41:07,939 --> 00:41:10,759
that would fix the problem but the

00:41:09,199 --> 00:41:14,599
implementation is so bad that I have

00:41:10,759 --> 00:41:17,979
nightmares about it anyway any other

00:41:14,599 --> 00:41:17,979
questions about image builder

00:41:20,860 --> 00:41:29,000
all right thanks thank you very much and

00:41:27,470 --> 00:41:31,910
if you're around tomorrow I'll come talk

00:41:29,000 --> 00:41:33,950
to us on the lobby yes please and a

00:41:31,910 --> 00:41:36,350
reminder again I know I Oh chill tea

00:41:33,950 --> 00:41:39,310
already but we have to clear the whole

00:41:36,350 --> 00:41:39,310

YouTube URL: https://www.youtube.com/watch?v=mZcPfIkbvbE


