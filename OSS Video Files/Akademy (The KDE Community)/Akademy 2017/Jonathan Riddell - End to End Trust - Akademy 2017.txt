Title: Jonathan Riddell - End to End Trust - Akademy 2017
Publication date: 2017-11-20
Playlist: Akademy 2017
Description: 
	Talk to explain why KDE software should be released with GPG signatures, how to add them and how we try to ensure end-to-end trust in KDE neon.

https://conf.kde.org/en/akademy2017/public/events/346
Captions: 
	00:00:07,580 --> 00:00:15,000
hello me again so it used to be not so

00:00:12,600 --> 00:00:16,920
long ago this is from 2013 this article

00:00:15,000 --> 00:00:18,449
that people asked can you trust open

00:00:16,920 --> 00:00:20,660
source software if you run it on your

00:00:18,449 --> 00:00:23,279
computer will it do something nasty

00:00:20,660 --> 00:00:24,660
these people call themselves hackers so

00:00:23,279 --> 00:00:26,339
how can you trust these people you don't

00:00:24,660 --> 00:00:29,759
know what they put in their code it

00:00:26,339 --> 00:00:31,769
might be something malicious they might

00:00:29,759 --> 00:00:33,270
be spying on me they might be wanting to

00:00:31,769 --> 00:00:35,790
blackmail me like this character from

00:00:33,270 --> 00:00:38,040
Black Mirror and I might have to end up

00:00:35,790 --> 00:00:39,899
being blackmailed and then and then in a

00:00:38,040 --> 00:00:43,649
fistfight in the forest to the finish

00:00:39,899 --> 00:00:46,289
for my very life just because I want to

00:00:43,649 --> 00:00:48,719
run Katy plasma and and this feels like

00:00:46,289 --> 00:00:50,820
quite a nasty thing to say to people but

00:00:48,719 --> 00:00:54,329
there was a genuine worry not so long

00:00:50,820 --> 00:00:55,649
ago unfortunately these days people seem

00:00:54,329 --> 00:00:58,050
to understand that actually the genuine

00:00:55,649 --> 00:01:00,780
worry is if you run commercial software

00:00:58,050 --> 00:01:02,969
which has commercial interests and

00:01:00,780 --> 00:01:07,590
companies keep trying to put in stuff

00:01:02,969 --> 00:01:09,720
which will spy on you and will will try

00:01:07,590 --> 00:01:12,660
and get some sort of edge to make them

00:01:09,720 --> 00:01:14,160
an extra little bit money or yeah get

00:01:12,660 --> 00:01:16,440
them some data that they can then sell

00:01:14,160 --> 00:01:18,300
on and that a lot of commercial software

00:01:16,440 --> 00:01:22,980
will be actively spying on you and you

00:01:18,300 --> 00:01:24,570
can't stop it and and that worth a lot

00:01:22,980 --> 00:01:26,490
of software you will end up with your

00:01:24,570 --> 00:01:28,050
with your files encrypted and

00:01:26,490 --> 00:01:30,030
blackmailed back to you and you will end

00:01:28,050 --> 00:01:31,370
up dead which is which is not a good

00:01:30,030 --> 00:01:35,610
story either

00:01:31,370 --> 00:01:37,620
and so people trust open-source people

00:01:35,610 --> 00:01:39,510
trust KDE but there's a long chain

00:01:37,620 --> 00:01:41,160
between us writing software and then

00:01:39,510 --> 00:01:43,050
getting onto people's computers and

00:01:41,160 --> 00:01:45,780
somewhere along that long chain it can

00:01:43,050 --> 00:01:47,070
be hacked so people trust that we're not

00:01:45,780 --> 00:01:48,810
going to put malicious stuff in our code

00:01:47,070 --> 00:01:50,820
because it's all peer-reviewed and it

00:01:48,810 --> 00:01:52,470
would be noticed and we don't really

00:01:50,820 --> 00:01:54,360
want to spend hours of our volunteer

00:01:52,470 --> 00:01:55,980
time only to write something that then

00:01:54,360 --> 00:01:58,890
breaks into people's computers but

00:01:55,980 --> 00:02:00,480
hackers will come along and do mess

00:01:58,890 --> 00:02:05,520
around with our stuff on somewhere on

00:02:00,480 --> 00:02:06,720
that long chain and and well people

00:02:05,520 --> 00:02:08,399
might end up in a fist fight to the

00:02:06,720 --> 00:02:12,540
death in the forest just because they

00:02:08,399 --> 00:02:14,520
want to run plasma so there's a long

00:02:12,540 --> 00:02:18,810
chain of trusts that goes between us and

00:02:14,520 --> 00:02:20,159
getting onto people's computers and we

00:02:18,810 --> 00:02:20,920
have to make sure that you can verify it

00:02:20,159 --> 00:02:23,230
every one of those

00:02:20,920 --> 00:02:24,610
that it's not been hacked and you know

00:02:23,230 --> 00:02:26,620
you're not gonna be blackmailed you're

00:02:24,610 --> 00:02:30,700
not gonna end up in that forest and a

00:02:26,620 --> 00:02:33,090
fist fight to the death so how do we do

00:02:30,700 --> 00:02:36,190
at dealing with this long chain of trust

00:02:33,090 --> 00:02:38,080
one place that people got our software

00:02:36,190 --> 00:02:40,060
is by installing it from packages and

00:02:38,080 --> 00:02:42,010
gas and yum and zipper and the rest and

00:02:40,060 --> 00:02:43,990
for quite a long time now most of these

00:02:42,010 --> 00:02:46,180
have all been digitally signed so you

00:02:43,990 --> 00:02:47,170
can authenticate the package you're

00:02:46,180 --> 00:02:48,940
downloading and installing on your

00:02:47,170 --> 00:02:50,770
computer really is the same package that

00:02:48,940 --> 00:02:53,170
has been uploaded by some developer to

00:02:50,770 --> 00:02:55,360
their archive and it's automated

00:02:53,170 --> 00:02:57,280
so it's fairly easy so for a long time

00:02:55,360 --> 00:02:59,650
that's been a mostly successful story

00:02:57,280 --> 00:03:01,739
apart from a little bit guilty as the

00:02:59,650 --> 00:03:04,870
the judge in Gotham City would say

00:03:01,739 --> 00:03:06,940
because I screwed up last year or when

00:03:04,870 --> 00:03:09,250
the kiddie uh neon server wasn't set up

00:03:06,940 --> 00:03:11,050
properly and anybody could upload stuff

00:03:09,250 --> 00:03:12,640
to that server if they knew where to

00:03:11,050 --> 00:03:13,900
find it we don't think anybody did know

00:03:12,640 --> 00:03:16,870
where to find it with no reason to think

00:03:13,900 --> 00:03:18,580
the one's a problem but it that's an

00:03:16,870 --> 00:03:20,380
example of a kind of area where issues

00:03:18,580 --> 00:03:22,840
can come on in this long chain of trust

00:03:20,380 --> 00:03:28,480
is if you have a competent sysadmin like

00:03:22,840 --> 00:03:31,959
me so people will download an ISO to get

00:03:28,480 --> 00:03:35,470
our software and these eyesores contain

00:03:31,959 --> 00:03:36,670
large amounts of code and they have to

00:03:35,470 --> 00:03:38,950
make sure that code really does come

00:03:36,670 --> 00:03:40,860
from us or come from the open source

00:03:38,950 --> 00:03:43,930
communities that they trust and

00:03:40,860 --> 00:03:45,670
typically when you download an ISO they

00:03:43,930 --> 00:03:46,840
will come with a GPG signature and

00:03:45,670 --> 00:03:48,280
typically they'll come with a checksum

00:03:46,840 --> 00:03:50,380
so you can make sure that it hasn't been

00:03:48,280 --> 00:03:52,390
hacked somewhere along the way and

00:03:50,380 --> 00:03:54,280
that's fine but there's some people who

00:03:52,390 --> 00:03:57,579
don't quite do best practice according

00:03:54,280 --> 00:03:59,980
to Judge Dredd in megacity one just

00:03:57,579 --> 00:04:01,870
picking a random example netrunner which

00:03:59,980 --> 00:04:03,190
is fine it's not actually that guilty I

00:04:01,870 --> 00:04:05,350
don't think they're going to get judge

00:04:03,190 --> 00:04:08,380
gret Dredd come along and and stand them

00:04:05,350 --> 00:04:11,769
up but they they have a checksum here

00:04:08,380 --> 00:04:13,750
it's a two five six shower checksum so

00:04:11,769 --> 00:04:17,200
it's a decent algorithm but there's no

00:04:13,750 --> 00:04:18,940
GPG signature so you can't be quite

00:04:17,200 --> 00:04:21,489
assure release from release there's

00:04:18,940 --> 00:04:23,110
nothing terribly wrong with it but

00:04:21,489 --> 00:04:27,250
actually that's that's okay it's just

00:04:23,110 --> 00:04:29,260
not quite 100 percent best practice this

00:04:27,250 --> 00:04:30,550
is coupon two and they have a whole load

00:04:29,260 --> 00:04:33,190
of files and they've got a whole load of

00:04:30,550 --> 00:04:34,850
check sums and I don't quite know why

00:04:33,190 --> 00:04:38,240
they have three different check sums so

00:04:34,850 --> 00:04:39,800
seems overly complex and if you know

00:04:38,240 --> 00:04:41,930
anything about security complexity is

00:04:39,800 --> 00:04:43,430
the enemy of security why I have three

00:04:41,930 --> 00:04:44,990
checksums when just because it could

00:04:43,430 --> 00:04:47,900
have the the best one rather than the

00:04:44,990 --> 00:04:49,430
obviously older ones and they have a GPG

00:04:47,900 --> 00:04:51,950
signature for each of those checksums

00:04:49,430 --> 00:04:54,560
so why do they do PG sign the checksum

00:04:51,950 --> 00:04:57,110
which contains a checksum for the I so

00:04:54,560 --> 00:05:00,020
rather than just GPG signing the iso

00:04:57,110 --> 00:05:01,400
directly it's not a bad thing to do is

00:05:00,020 --> 00:05:02,570
just a little bit more complex a little

00:05:01,400 --> 00:05:06,410
bit more traffic than it needs to be

00:05:02,570 --> 00:05:08,600
complexity as the enemy of security so

00:05:06,410 --> 00:05:10,640
I've written a tool or I'm in process of

00:05:08,600 --> 00:05:13,700
writing a tool iso image writer which is

00:05:10,640 --> 00:05:15,020
a fork of rosa or hopefully not a fork

00:05:13,700 --> 00:05:17,330
because i'm working with the rotate

00:05:15,020 --> 00:05:18,920
developer and that will automatically

00:05:17,330 --> 00:05:21,590
check but check some of the GPG

00:05:18,920 --> 00:05:24,650
signature forth your ISOs that people

00:05:21,590 --> 00:05:26,030
download because nobody will actually do

00:05:24,650 --> 00:05:27,620
that manually I don't think anybody

00:05:26,030 --> 00:05:29,030
actually checks the checksum and I don't

00:05:27,620 --> 00:05:30,650
think anybody a check the GPG signature

00:05:29,030 --> 00:05:33,560
so it needs to be done automatically by

00:05:30,650 --> 00:05:34,940
a program and and that means that if you

00:05:33,560 --> 00:05:36,830
trust that program then you know you can

00:05:34,940 --> 00:05:38,210
trust your your ISO and of course that

00:05:36,830 --> 00:05:39,680
isn't a solution to the problem it just

00:05:38,210 --> 00:05:42,230
moves it further upstream but that's

00:05:39,680 --> 00:05:44,960
fine because we can we can deal with

00:05:42,230 --> 00:05:46,280
that's a simple issue case where would

00:05:44,960 --> 00:05:47,600
you make sure those packages are valid

00:05:46,280 --> 00:05:50,860
and that means you can make sure what

00:05:47,600 --> 00:05:50,860
the ISO is you want to install a valid

00:05:51,010 --> 00:05:58,220
so we released ours and that's our the

00:05:56,150 --> 00:06:02,240
main output from KDE is tars for our

00:05:58,220 --> 00:06:04,040
applications and a lot of those made

00:06:02,240 --> 00:06:06,560
with release me tool which now forces

00:06:04,040 --> 00:06:08,180
GPG signatures for people who make

00:06:06,560 --> 00:06:10,900
releases using release me so if you're

00:06:08,180 --> 00:06:14,120
not really isn't using release me then

00:06:10,900 --> 00:06:14,930
you're you're not being forced to do the

00:06:14,120 --> 00:06:16,640
right thing

00:06:14,930 --> 00:06:18,500
but it's okay because frameworks and KD

00:06:16,640 --> 00:06:21,500
applications and caligula 10k develop

00:06:18,500 --> 00:06:22,670
which don't use release me never so

00:06:21,500 --> 00:06:24,920
we've managed to convince them all to

00:06:22,670 --> 00:06:28,370
use GPG signatures as well so we've

00:06:24,920 --> 00:06:30,680
found a good practice there and on the

00:06:28,370 --> 00:06:32,750
packaging side because the chain of

00:06:30,680 --> 00:06:35,060
trust there goes from KD releasing it to

00:06:32,750 --> 00:06:36,920
districts picking it up the packaging in

00:06:35,060 --> 00:06:39,110
Debian and coupon to and KD neon at

00:06:36,920 --> 00:06:41,030
least will automatically verify those

00:06:39,110 --> 00:06:42,590
GPG signatures I don't know if that's

00:06:41,030 --> 00:06:43,940
the case for other distros for other

00:06:42,590 --> 00:06:47,030
packaging formats but I hope it is

00:06:43,940 --> 00:06:48,909
either person do you know not sure who

00:06:47,030 --> 00:06:51,110
fit it

00:06:48,909 --> 00:06:53,419
but guilty according to the court

00:06:51,110 --> 00:06:55,849
session in Scotland highest court in the

00:06:53,419 --> 00:06:57,259
land we've released in this year we've

00:06:55,849 --> 00:07:02,930
released these tar balls which don't

00:06:57,259 --> 00:07:05,419
have GPG signatures so people so people

00:07:02,930 --> 00:07:06,800
could be downloading this stuff and and

00:07:05,419 --> 00:07:08,810
they will end up in the Court of Session

00:07:06,800 --> 00:07:10,639
or the release managers well because all

00:07:08,810 --> 00:07:14,029
these tar balls get released which don't

00:07:10,639 --> 00:07:19,129
have GPG signatures why is that I have

00:07:14,029 --> 00:07:20,300
no idea sysadmin doesn't require it and

00:07:19,129 --> 00:07:22,819
I think so certainly should require it

00:07:20,300 --> 00:07:24,349
and they they probably use obscure

00:07:22,819 --> 00:07:27,289
scripts they use their own scripts which

00:07:24,349 --> 00:07:29,419
don't GPG sign it and jibiji is often

00:07:27,289 --> 00:07:31,189
quite Fafi and there's some incredibly

00:07:29,419 --> 00:07:32,990
amazing intelligent people such as the

00:07:31,189 --> 00:07:35,930
critter release manager who lets gets

00:07:32,990 --> 00:07:40,729
very frustrated good GPG is obscure and

00:07:35,930 --> 00:07:42,949
Fafi to use and enemy is the complexity

00:07:40,729 --> 00:07:44,120
is the enemy of security so a lot of

00:07:42,949 --> 00:07:46,129
people just don't want to use GPG

00:07:44,120 --> 00:07:48,229
because to Fafi like Fredrik had trouble

00:07:46,129 --> 00:07:51,610
setting up yesterday but nevertheless

00:07:48,229 --> 00:07:56,029
it's what we should all get into using

00:07:51,610 --> 00:07:57,319
and for example well and sorry to become

00:07:56,029 --> 00:07:59,360
kirigami again because they had it

00:07:57,319 --> 00:08:02,029
yesterday but the release page for kill

00:07:59,360 --> 00:08:03,199
egami has checksums which is good and

00:08:02,029 --> 00:08:05,750
used a good algorithm so that's nice and

00:08:03,199 --> 00:08:07,639
it's got a link to Marco's signature so

00:08:05,750 --> 00:08:10,460
that's good as small GPG saying bits of

00:08:07,639 --> 00:08:12,620
wiki so if a hacker hacked the tarball

00:08:10,460 --> 00:08:19,909
hacker it's trivial to change the wiki

00:08:12,620 --> 00:08:21,589
and there's no security there and so oh

00:08:19,909 --> 00:08:23,779
this is another guilty party according

00:08:21,589 --> 00:08:25,279
to this beautiful court of foreign

00:08:23,779 --> 00:08:29,089
unelected judges in the European Court

00:08:25,279 --> 00:08:30,409
of Human Rights get tags so can you

00:08:29,089 --> 00:08:31,460
verify that the code you have on your

00:08:30,409 --> 00:08:33,649
computer actually goes all the way back

00:08:31,460 --> 00:08:36,199
to the git commits from the people that

00:08:33,649 --> 00:08:39,860
we trust and it turns out that you can't

00:08:36,199 --> 00:08:41,300
with this is chaos which is frameworks

00:08:39,860 --> 00:08:42,800
so for some reason the frameworks script

00:08:41,300 --> 00:08:47,110
don't push they push the tags so they

00:08:42,800 --> 00:08:50,480
don't push the signatures the tags and

00:08:47,110 --> 00:08:53,510
the same thing with applications I think

00:08:50,480 --> 00:08:55,910
so so the chain of trust should go all

00:08:53,510 --> 00:08:57,500
the way from get to your install on your

00:08:55,910 --> 00:09:00,529
computer and for some reason we don't

00:08:57,500 --> 00:09:01,760
push a lot of get tags and why is this

00:09:00,529 --> 00:09:05,810
important well that's

00:09:01,760 --> 00:09:07,550
and so it's our vision for our software

00:09:05,810 --> 00:09:09,079
you can't have freedom without privacy

00:09:07,550 --> 00:09:10,850
and you can't have privacy without

00:09:09,079 --> 00:09:13,430
control you can't control without

00:09:10,850 --> 00:09:15,110
knowing who you trust they people trust

00:09:13,430 --> 00:09:17,180
us we should make sure that we are

00:09:15,110 --> 00:09:18,589
successful II take that trust all the

00:09:17,180 --> 00:09:21,829
way through to the point of installation

00:09:18,589 --> 00:09:31,399
on people's computers that's all thank

00:09:21,829 --> 00:09:41,149
you thanks Jonathan it's a time for

00:09:31,399 --> 00:09:44,510
questions maybe one I have two questions

00:09:41,149 --> 00:09:48,410
one is how is the state of Builder

00:09:44,510 --> 00:09:52,040
produce ability for TDA projects so a

00:09:48,410 --> 00:09:54,589
mentor is a really huge issue that some

00:09:52,040 --> 00:09:56,899
districts are trying to make bills

00:09:54,589 --> 00:10:00,500
reproducible but some software have

00:09:56,899 --> 00:10:01,820
built in dates or built in stuff that

00:10:00,500 --> 00:10:05,060
every time you build the software

00:10:01,820 --> 00:10:09,199
changes so how is the state for our

00:10:05,060 --> 00:10:15,589
projects and the second thing is should

00:10:09,199 --> 00:10:17,810
we move to sign also comets on get build

00:10:15,589 --> 00:10:19,190
reproducibility I don't know I happen

00:10:17,810 --> 00:10:22,250
not to care about it maybe I should care

00:10:19,190 --> 00:10:24,790
about it but I'm not sure yes yes I do

00:10:22,250 --> 00:10:29,750
care about it yes good

00:10:24,790 --> 00:10:31,040
Scott has a comment give you a

00:10:29,750 --> 00:10:32,269
microphone to Scarlett she said she's

00:10:31,040 --> 00:10:40,880
building as she's working on

00:10:32,269 --> 00:10:44,300
reproducible builds we're not as

00:10:40,880 --> 00:10:49,069
terrible as as some projects but we do

00:10:44,300 --> 00:10:52,779
have some issues and oh should we sign

00:10:49,069 --> 00:10:55,610
old commits um I don't think we should

00:10:52,779 --> 00:10:57,980
why my Herald says thumbs up is that a

00:10:55,610 --> 00:10:59,510
wish it okay yes we sure yes absolutely

00:10:57,980 --> 00:11:02,060
we should of course we should

00:10:59,510 --> 00:11:09,260
why wouldn't we

00:11:02,060 --> 00:11:09,260
yes another question Mike's coming down

00:11:13,340 --> 00:11:18,210
so why would you want really at our bars

00:11:15,840 --> 00:11:20,100
to be signed by a GPG signature if

00:11:18,210 --> 00:11:22,800
you're downloading them from an HTTP

00:11:20,100 --> 00:11:24,690
server where you can verify the HTTPS

00:11:22,800 --> 00:11:29,610
certificate it's a lot easier to verify

00:11:24,690 --> 00:11:31,950
an HTTPS certificate or right so our

00:11:29,610 --> 00:11:33,330
turbos get put on a master server which

00:11:31,950 --> 00:11:35,250
gets pushed out a dozen or more

00:11:33,330 --> 00:11:37,080
different mirrors and anyone those

00:11:35,250 --> 00:11:38,700
mirrors could be hacked so even though

00:11:37,080 --> 00:11:40,200
your GPS connection

00:11:38,700 --> 00:11:41,400
authenticates that yes you really talk

00:11:40,200 --> 00:11:42,810
into the server you think you're talking

00:11:41,400 --> 00:11:44,370
to doesn't mean that server has not been

00:11:42,810 --> 00:11:45,750
hacked that server could easily be

00:11:44,370 --> 00:11:47,880
hacked and there's dozens of those

00:11:45,750 --> 00:11:49,400
servers so chances are one of them will

00:11:47,880 --> 00:11:51,900
get hacked before too long

00:11:49,400 --> 00:11:53,970
I would say that it has you have the

00:11:51,900 --> 00:11:56,040
exact same chance of having an HTTP

00:11:53,970 --> 00:11:59,550
server just a download server being

00:11:56,040 --> 00:12:01,320
hacked as you have of creating GPG key

00:11:59,550 --> 00:12:03,780
where your the short key collides with

00:12:01,320 --> 00:12:06,420
another it doesn't matter if they show

00:12:03,780 --> 00:12:12,270
key Clyde the long key because this

00:12:06,420 --> 00:12:13,530
trove gets the right key yeah and the

00:12:12,270 --> 00:12:15,120
verification people are packagers

00:12:13,530 --> 00:12:15,930
they're not random punters on the street

00:12:15,120 --> 00:12:17,130
they're people you should know where

00:12:15,930 --> 00:12:18,960
they're doing so packages should know

00:12:17,130 --> 00:12:20,070
how to get the correct key and that's

00:12:18,960 --> 00:12:21,660
when your release announcement you

00:12:20,070 --> 00:12:25,440
should say exactly where you to get the

00:12:21,660 --> 00:12:26,850
correct key for so that the packages

00:12:25,440 --> 00:12:31,290
will get the correct key and I'll get

00:12:26,850 --> 00:12:33,780
the wrong key take this discussion

00:12:31,290 --> 00:12:36,840
offline thank you all for the possession

00:12:33,780 --> 00:12:41,010
track so we have 20 minutes break and

00:12:36,840 --> 00:12:44,190
we'll start at 16 or 30 thank you

00:12:41,010 --> 00:12:44,190

YouTube URL: https://www.youtube.com/watch?v=63Nba0i-R-M


