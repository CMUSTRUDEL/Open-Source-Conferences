Title: Jonathan Riddell - KDE Neon Docker Images - Akademy 2017
Publication date: 2017-11-20
Playlist: Akademy 2017
Description: 
	If you need to test your fix in master but you only run releases, or ask someone else to test it, you can use KDE neon Docker images. This talk shows to do so. 

https://conf.kde.org/en/akademy2017/public/events/347
Captions: 
	00:00:08,330 --> 00:00:14,740
hello hello good afternoon everybody

00:00:13,080 --> 00:00:22,599
my name is Jonathan Riggle

00:00:14,740 --> 00:00:24,669
and I work on KDE neon so KDE neon is a

00:00:22,599 --> 00:00:27,580
continuous integration system that

00:00:24,669 --> 00:00:32,290
continuously builds packages of Katies

00:00:27,580 --> 00:00:35,019
software and it builds kiddie

00:00:32,290 --> 00:00:36,760
applications built plasma builds kiddie

00:00:35,019 --> 00:00:38,470
frameworks and it builds extra

00:00:36,760 --> 00:00:41,470
applications where they've been ported

00:00:38,470 --> 00:00:43,449
to frameworks five and the builds at

00:00:41,470 --> 00:00:45,730
several different branches built it

00:00:43,449 --> 00:00:49,269
directly from get master built it from

00:00:45,730 --> 00:00:50,949
stable branches from get and it boosts

00:00:49,269 --> 00:00:53,290
lives daily and it builds it from

00:00:50,949 --> 00:00:55,629
download Katie to org so it scans for

00:00:53,290 --> 00:00:58,150
new tires and a builds from demo doc

00:00:55,629 --> 00:01:02,320
hidetora using the long-term support

00:00:58,150 --> 00:01:04,089
additions from plasma and everybody has

00:01:02,320 --> 00:01:06,369
access to this so it's a KD project and

00:01:04,089 --> 00:01:08,950
so everybody who's a got a kiddie

00:01:06,369 --> 00:01:12,420
developer account has access to the

00:01:08,950 --> 00:01:12,420
continuous integration system

00:01:26,820 --> 00:01:31,650
so if you want to test a build of your

00:01:28,920 --> 00:01:34,560
package you can log in to build Acadia

00:01:31,650 --> 00:01:36,600
org and you can see everything's the

00:01:34,560 --> 00:01:39,630
jobs are available therefore everything

00:01:36,600 --> 00:01:42,660
that we build and you can just click

00:01:39,630 --> 00:01:45,200
build to build new package and if you

00:01:42,660 --> 00:01:47,490
want to fix something in the packaging

00:01:45,200 --> 00:01:49,410
we've got to get to archive and everyone

00:01:47,490 --> 00:01:51,630
has access to the get archive so you can

00:01:49,410 --> 00:01:53,910
change the packaging to fix whatever you

00:01:51,630 --> 00:01:56,460
need to fix or to add new packages if

00:01:53,910 --> 00:01:58,550
you have some new dependency and of

00:01:56,460 --> 00:02:03,050
course you can come along and talk to us

00:01:58,550 --> 00:02:03,050
on our rst channel mailing list

00:02:14,790 --> 00:02:19,590
so if you have a bug report somebody's

00:02:17,340 --> 00:02:21,390
reported a bug I need to test it in a

00:02:19,590 --> 00:02:22,830
stable branch but if you're a computer

00:02:21,390 --> 00:02:25,800
running master branch because that's

00:02:22,830 --> 00:02:27,540
what you develop against or maybe you

00:02:25,800 --> 00:02:30,390
need to verify a bug report based on

00:02:27,540 --> 00:02:32,400
clean setup or if you want to test that

00:02:30,390 --> 00:02:35,670
your app works with a new version of

00:02:32,400 --> 00:02:38,190
cutes we have cute 5 9 1 then kiddie

00:02:35,670 --> 00:02:39,510
neon is your friend and but you don't

00:02:38,190 --> 00:02:41,910
need to reinstall your computer you

00:02:39,510 --> 00:02:44,520
don't need to change distro you don't

00:02:41,910 --> 00:02:45,900
need to even install a virtual box or

00:02:44,520 --> 00:02:48,060
some other virtual machine which takes

00:02:45,900 --> 00:02:50,970
quite a lot of resources and time you

00:02:48,060 --> 00:02:53,430
can use docker so docker is a nifty

00:02:50,970 --> 00:02:56,910
container system and it's very popular

00:02:53,430 --> 00:02:58,470
for servers but why not on desktop - it

00:02:56,910 --> 00:03:01,650
uses the existing kernel that your

00:02:58,470 --> 00:03:03,330
computer runs and it uses a zip file

00:03:01,650 --> 00:03:05,880
system so a complete new file system to

00:03:03,330 --> 00:03:08,100
give you an isolated environment so you

00:03:05,880 --> 00:03:12,480
can download from docker servers the

00:03:08,100 --> 00:03:14,430
latest build of kdeeny on and we build

00:03:12,480 --> 00:03:17,370
this daily and it builds on hub docker

00:03:14,430 --> 00:03:19,590
comm which is their service and it just

00:03:17,370 --> 00:03:21,690
takes our packages and and builds a new

00:03:19,590 --> 00:03:24,510
image using all the k-t software that we

00:03:21,690 --> 00:03:27,630
build continuously on on our Jenkins

00:03:24,510 --> 00:03:29,340
instance and it builds it for the

00:03:27,630 --> 00:03:30,660
unstable and stable get branches and

00:03:29,340 --> 00:03:34,769
built it for the user

00:03:30,660 --> 00:03:36,300
tarah builds and it builds it both with

00:03:34,769 --> 00:03:37,739
the default selection of applications

00:03:36,300 --> 00:03:39,330
such as very few and with all the

00:03:37,739 --> 00:03:40,830
applications so if you really want to

00:03:39,330 --> 00:03:44,190
test any own application there's an

00:03:40,830 --> 00:03:51,720
image with it there so here is a

00:03:44,190 --> 00:03:54,390
screenshot and the screenshot shows my

00:03:51,720 --> 00:04:02,190
home computer here which is running some

00:03:54,390 --> 00:04:03,239
version of plasma it shows this window

00:04:02,190 --> 00:04:06,269
here which is running a version of

00:04:03,239 --> 00:04:07,980
plasma that comes with plasma 5.8 so

00:04:06,269 --> 00:04:08,910
that's the long-term support edition so

00:04:07,980 --> 00:04:10,769
I'm in the background here's a version

00:04:08,910 --> 00:04:13,080
of plasma my running developer edition

00:04:10,769 --> 00:04:16,169
and over here is just a standalone

00:04:13,080 --> 00:04:18,209
application ocular is running from

00:04:16,169 --> 00:04:19,799
developer edition as well so we've got

00:04:18,209 --> 00:04:22,530
three completely separate unrelated

00:04:19,799 --> 00:04:24,150
versions of the same thing all running

00:04:22,530 --> 00:04:28,010
on the same machine not taking any

00:04:24,150 --> 00:04:28,010
significant overhead in terms of use

00:04:28,600 --> 00:04:32,140
let me give you a demo

00:04:44,660 --> 00:04:51,500
so one simple command neon docker it's a

00:04:47,990 --> 00:04:53,030
ruby script you can run the full docker

00:04:51,500 --> 00:04:54,440
commands if you want but I've written a

00:04:53,030 --> 00:04:57,500
ruby script so you just run it as one

00:04:54,440 --> 00:05:03,590
command and it pops up this window with

00:04:57,500 --> 00:05:06,190
a z4x server and it runs a fool it runs

00:05:03,590 --> 00:05:06,190
a full instance

00:05:19,100 --> 00:05:23,180
so we can see here from system settings

00:05:21,080 --> 00:05:27,200
that's an exclusive preview of the new

00:05:23,180 --> 00:05:29,800
system settings coming in plasma 5.11 to

00:05:27,200 --> 00:05:29,800
be released shortly

00:05:38,229 --> 00:05:44,389
but another just a simple flag to that

00:05:41,180 --> 00:05:48,050
neon docker command and that will pop up

00:05:44,389 --> 00:05:50,360
another X window with another version of

00:05:48,050 --> 00:05:52,460
plasma it's an instant-on it just loads

00:05:50,360 --> 00:05:53,629
as fast as plasma loads in your normal

00:05:52,460 --> 00:05:56,050
computer so it's not like a virtual

00:05:53,629 --> 00:05:56,050
machine

00:06:05,759 --> 00:06:11,069
and you can see here this is running

00:06:07,800 --> 00:06:12,449
your the released version of of plasmon

00:06:11,069 --> 00:06:14,249
the released version of system settings

00:06:12,449 --> 00:06:15,960
that we're all familiar with so if you

00:06:14,249 --> 00:06:17,339
get a bug report that says this is

00:06:15,960 --> 00:06:19,229
broken new version of system settings

00:06:17,339 --> 00:06:21,240
you can easily compare it between the

00:06:19,229 --> 00:06:22,770
new version and the pre-existing person

00:06:21,240 --> 00:06:25,490
to see is it really a regression is it

00:06:22,770 --> 00:06:25,490
something I should care about

00:06:35,900 --> 00:06:39,539
and that's just running a standalone

00:06:38,129 --> 00:06:41,610
application so you don't need to run the

00:06:39,539 --> 00:06:43,199
fool plasma desktop if you only care

00:06:41,610 --> 00:06:45,210
about one application they need to show

00:06:43,199 --> 00:06:46,889
understands about an application that

00:06:45,210 --> 00:06:48,449
runs in an isolated environment so

00:06:46,889 --> 00:06:49,740
there's no particular security risk but

00:06:48,449 --> 00:06:52,129
if you want to use it as a full

00:06:49,740 --> 00:06:54,750
developer environment then you just bind

00:06:52,129 --> 00:06:57,000
whatever directory you need on your home

00:06:54,750 --> 00:06:58,650
system into the docker so that's one

00:06:57,000 --> 00:07:00,060
extra switching to command and then

00:06:58,650 --> 00:07:03,330
you'll have full access to your files so

00:07:00,060 --> 00:07:05,370
you can still use git or you create or

00:07:03,330 --> 00:07:07,530
okay develop or whatever you need to

00:07:05,370 --> 00:07:11,490
develop with so you can easily develop

00:07:07,530 --> 00:07:13,409
on them get master with your computer

00:07:11,490 --> 00:07:16,379
running stable and it runs on any

00:07:13,409 --> 00:07:18,389
distribution so if you don't want to

00:07:16,379 --> 00:07:21,719
change to neon that's fine you can still

00:07:18,389 --> 00:07:23,069
keep running your your whatever distro

00:07:21,719 --> 00:07:26,330
you want to run as long as it has docker

00:07:23,069 --> 00:07:26,330
then you can easily run this stuff

00:07:39,220 --> 00:07:45,160
so some examples this if you saw Josas

00:07:42,790 --> 00:07:47,020
fantastic talk about color gray day he

00:07:45,160 --> 00:07:49,540
popped up an IRC the other day and said

00:07:47,020 --> 00:07:50,830
how can I get to the gray on the state

00:07:49,540 --> 00:07:52,980
wall because I'm running a stable

00:07:50,830 --> 00:07:56,200
version so here's a screenshot from him

00:07:52,980 --> 00:07:58,150
running the state version that comes

00:07:56,200 --> 00:08:00,730
with his roof onto system and here's a

00:07:58,150 --> 00:08:02,590
screenshot running the built directly

00:08:00,730 --> 00:08:04,900
every day from git and if you want to

00:08:02,590 --> 00:08:08,050
know more about how neon docker works

00:08:04,900 --> 00:08:12,280
Yas has just published a blog on planet

00:08:08,050 --> 00:08:13,990
KD available right now it's also used in

00:08:12,280 --> 00:08:16,330
kalamarez continuous integration

00:08:13,990 --> 00:08:18,010
so the kalimera family is at the back

00:08:16,330 --> 00:08:21,100
there and they use it for daily testing

00:08:18,010 --> 00:08:23,860
so so this whole family has to work hard

00:08:21,100 --> 00:08:26,370
to test kalimera sacred day but it makes

00:08:23,860 --> 00:08:28,870
made easy by using our docker images

00:08:26,370 --> 00:08:31,540
doing the daily automated integration

00:08:28,870 --> 00:08:38,460
testing using docker to make sure that

00:08:31,540 --> 00:08:41,470
there's no bugs since the day before and

00:08:38,460 --> 00:08:44,350
this is the wiki page for you finding

00:08:41,470 --> 00:08:46,270
finding out more come on people you miss

00:08:44,350 --> 00:08:50,370
my awesome talk who's got a question

00:08:46,270 --> 00:08:50,370
thanks thanks Jonathan

00:08:53,540 --> 00:08:58,150
the time is not there's one question

00:08:58,660 --> 00:09:02,900
when you get that matter where you use

00:09:01,010 --> 00:09:05,660
Calomiris to do the Installer

00:09:02,900 --> 00:09:08,570
so that Calomiris can be tested doesn't

00:09:05,660 --> 00:09:10,310
the world like well reach the doctor

00:09:08,570 --> 00:09:12,650
images don't use the Installer because

00:09:10,310 --> 00:09:15,620
they they don't use an ISO to install

00:09:12,650 --> 00:09:17,900
from they just a file system so it just

00:09:15,620 --> 00:09:19,130
uses deep bootstrap or the existing

00:09:17,900 --> 00:09:20,630
we've gone to image and then your apps

00:09:19,130 --> 00:09:22,100
in store and then for that you've got

00:09:20,630 --> 00:09:26,350
use docker image so I'm afraid it's not

00:09:22,100 --> 00:09:29,980
that matter it is just just as it is

00:09:26,350 --> 00:09:29,980

YouTube URL: https://www.youtube.com/watch?v=MKCCdQbkBbk


