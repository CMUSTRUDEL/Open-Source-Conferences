Title: #FOSSBack 18: Sebastian Schuberth â€“ OSS Review Toolkit
Publication date: 2018-06-27
Playlist: FOSS Backstage 2018
Description: 
	OSS Review Toolkit: Automating Open Source Compliance within CI/CD

In an ideal world, FOSS reviews are automated and done early and often so that FOSS issues -  technical, licenses or security can be caught and resolved expeditiously. The FOSS community currently does not have comprehensive open-sourced tooling for highly automated FOSS reviews for their projects, lacking which, FOSS project maintainers are unable to provide clearly defined metadata for their software and its dependencies. Lack of clarity in FOSS metadata makes compliance difficult and adversely affects project adoption and growth.

Projects built using package managers automatically download dependencies. Add to it, deployment using CI/CD and they now also expect quick turnarounds with FOSS reviews and compliance.

In this talk, I present a new tool called OSS Review Toolkit (ORT), that enables highly automated FOSS reviews within CI/CD. It does this by combining a new dependency analysis tool with existing FOSS dependency and scanning tools and with the new ClearlyDefined initiative, a platform to discover, curate and share FOSS component metadata.

Read more:
https://18.foss-backstage.de/session/oss-review-toolkit-automating-open-source-compliance-within-cicd

About Sebastian Schuberth:
https://18.foss-backstage.de/member/sebastian-schuberth

Website: https://www.foss-backstage.de/
Twitter: https://twitter.com/Fossbckstg
LinkedIn: https://www.linkedin.com/groups/8653059/
Captions: 
	00:00:03,810 --> 00:00:09,309
yeah hello everybody thanks for

00:00:05,980 --> 00:00:11,440
attending this session about open source

00:00:09,309 --> 00:00:13,929
review toolkit well which is a fairly

00:00:11,440 --> 00:00:16,320
new project so which might explain that

00:00:13,929 --> 00:00:19,599
you haven't heard about it yet

00:00:16,320 --> 00:00:23,619
before we start maybe some fun facts

00:00:19,599 --> 00:00:25,359
about me so I'm working at a company

00:00:23,619 --> 00:00:27,519
called here technologies I'm located

00:00:25,359 --> 00:00:31,330
here in Berlin which is one of our

00:00:27,519 --> 00:00:34,180
biggest engineering sites I'm leading

00:00:31,330 --> 00:00:37,350
all engineering related open source

00:00:34,180 --> 00:00:40,120
efforts that we're doing in the company

00:00:37,350 --> 00:00:43,350
I'm still an active open source

00:00:40,120 --> 00:00:46,870
contributor myself to a variety of

00:00:43,350 --> 00:00:49,840
projects both privately and entering my

00:00:46,870 --> 00:00:52,020
work time and I have some background in

00:00:49,840 --> 00:00:54,610
mobile development and computer graphics

00:00:52,020 --> 00:00:58,150
my current favorite technologies if

00:00:54,610 --> 00:01:00,640
someone cares include quadlin as a

00:00:58,150 --> 00:01:03,280
language gradeless a build system and my

00:01:00,640 --> 00:01:07,539
all-time favorite is kid so I'm a total

00:01:03,280 --> 00:01:11,109
geek evangelist two of my hobbies

00:01:07,539 --> 00:01:13,570
include coding coding coding also in my

00:01:11,109 --> 00:01:17,500
spare time and off-road RC car racing

00:01:13,570 --> 00:01:21,039
and if you then think of cars like this

00:01:17,500 --> 00:01:25,450
then I have to disappoint you know my

00:01:21,039 --> 00:01:27,939
car actually looks like this so I'm

00:01:25,450 --> 00:01:32,140
really an engineer still at heart which

00:01:27,939 --> 00:01:34,630
also explains why this talk is going to

00:01:32,140 --> 00:01:37,600
be rather technical so I'm not going to

00:01:34,630 --> 00:01:39,819
talk so much about our internal

00:01:37,600 --> 00:01:43,960
processes and and governance in that

00:01:39,819 --> 00:01:47,289
sense but more about what the tool

00:01:43,960 --> 00:01:51,969
actually does why it does it this way

00:01:47,289 --> 00:01:53,679
and another way what our are the

00:01:51,969 --> 00:01:55,479
problems we are trying to solve what are

00:01:53,679 --> 00:01:57,219
our internal requirements towards the

00:01:55,479 --> 00:02:00,340
tool and finally of course the tool

00:01:57,219 --> 00:02:04,959
itself an overview over the different

00:02:00,340 --> 00:02:08,880
tools in the toolkit and also a bit

00:02:04,959 --> 00:02:10,929
about CI integration and the roadmap so

00:02:08,880 --> 00:02:16,000
what is the problem you're trying to

00:02:10,929 --> 00:02:17,700
solve well our company is not really

00:02:16,000 --> 00:02:19,930
affected with

00:02:17,700 --> 00:02:22,600
open-source governance in the sense that

00:02:19,930 --> 00:02:25,530
we don't sell consulting or products in

00:02:22,600 --> 00:02:28,810
that area so why do we even bother

00:02:25,530 --> 00:02:31,090
simply to scratch our own itch so we

00:02:28,810 --> 00:02:35,970
have the need to review our own products

00:02:31,090 --> 00:02:38,670
for license compliance and that includes

00:02:35,970 --> 00:02:41,490
identifying the transitive dependencies

00:02:38,670 --> 00:02:44,350
identify possible license

00:02:41,490 --> 00:02:47,200
incompatibilities between dependencies

00:02:44,350 --> 00:02:50,080
in the tree ensure that we follow

00:02:47,200 --> 00:02:53,110
license obligations like creating notice

00:02:50,080 --> 00:02:55,240
files in the end and all of this is of

00:02:53,110 --> 00:02:58,300
course not necessarily limited to to

00:02:55,240 --> 00:03:01,209
false dependencies right so the way we

00:02:58,300 --> 00:03:04,690
implement things is generic in the sense

00:03:01,209 --> 00:03:07,090
that as long as your metadata is fine it

00:03:04,690 --> 00:03:10,390
of course works also with commercial

00:03:07,090 --> 00:03:11,680
dependencies that you might have so if

00:03:10,390 --> 00:03:13,810
you manage to implement all of this

00:03:11,680 --> 00:03:16,900
properly you you get a bunch of side

00:03:13,810 --> 00:03:20,680
benefits which turn out to be yeah

00:03:16,900 --> 00:03:23,160
rather valuable first of all maybe some

00:03:20,680 --> 00:03:25,570
of you know for example the fort works

00:03:23,160 --> 00:03:27,730
technology radar of recommended

00:03:25,570 --> 00:03:29,620
technologies like what should you adopt

00:03:27,730 --> 00:03:33,880
what should you maybe not look into

00:03:29,620 --> 00:03:36,010
anymore and we basically by scanning all

00:03:33,880 --> 00:03:38,620
of the dependencies that we use in the

00:03:36,010 --> 00:03:41,130
company get a good overview of the tools

00:03:38,620 --> 00:03:45,519
languages and frameworks we're using

00:03:41,130 --> 00:03:48,480
also we're able to identify in quotes

00:03:45,519 --> 00:03:51,970
problematic components maybe there is

00:03:48,480 --> 00:03:55,450
real current packages that have broken

00:03:51,970 --> 00:03:57,190
bad metadata and we find out hey all of

00:03:55,450 --> 00:03:59,440
these broken bad packages come from the

00:03:57,190 --> 00:04:01,390
same maintainer maybe it's a good idea

00:03:59,440 --> 00:04:05,709
then to not use anything from that

00:04:01,390 --> 00:04:11,709
maintainer anymore also using all this

00:04:05,709 --> 00:04:14,260
data you yeah you're fairly easily able

00:04:11,709 --> 00:04:18,359
to report the current security

00:04:14,260 --> 00:04:20,739
vulnerabilities and to some extent

00:04:18,359 --> 00:04:23,229
gathering this data and analyzing your

00:04:20,739 --> 00:04:25,440
own source code for dependencies also

00:04:23,229 --> 00:04:27,430
enforces best engineering practices

00:04:25,440 --> 00:04:28,430
especially with respect to the build

00:04:27,430 --> 00:04:32,380
system and main

00:04:28,430 --> 00:04:37,250
dependencies oh come to that a bit later

00:04:32,380 --> 00:04:39,919
so what are our own requirements we have

00:04:37,250 --> 00:04:41,139
a bunch of maybe rather unique

00:04:39,919 --> 00:04:45,020
requirements

00:04:41,139 --> 00:04:46,940
one of our key requirements is we must

00:04:45,020 --> 00:04:48,740
not make any modifications to the

00:04:46,940 --> 00:04:50,690
projects or to the source code of the

00:04:48,740 --> 00:04:53,150
project we analyze we cannot go to our

00:04:50,690 --> 00:04:55,550
product teams and say hey look we need

00:04:53,150 --> 00:04:57,259
to do this open source review or license

00:04:55,550 --> 00:04:58,610
review on your product but before we can

00:04:57,259 --> 00:05:02,259
do that you need to apply this plug-in

00:04:58,610 --> 00:05:02,259
to your build system that doesn't work

00:05:02,919 --> 00:05:12,250
so the only exception then is if the

00:05:07,930 --> 00:05:15,440
build of the product depends on some

00:05:12,250 --> 00:05:17,270
magic configuration settings like some

00:05:15,440 --> 00:05:19,009
secret global configuration that you

00:05:17,270 --> 00:05:20,210
have to apply in order to even build it

00:05:19,009 --> 00:05:22,039
or query the build system for

00:05:20,210 --> 00:05:23,870
dependencies that's something that we

00:05:22,039 --> 00:05:25,849
consider a violation against best

00:05:23,870 --> 00:05:29,860
engineering practices and this is

00:05:25,849 --> 00:05:29,860
something we need to ask the team to fix

00:05:30,009 --> 00:05:37,940
we need support for common package

00:05:33,229 --> 00:05:42,139
managers so like maven for Java Gradle

00:05:37,940 --> 00:05:44,180
SBT for Scala NPM and so on and we need

00:05:42,139 --> 00:05:47,330
to be able to capture the metadata of

00:05:44,180 --> 00:05:49,940
course but like the killer license it

00:05:47,330 --> 00:05:53,330
said etcetera but just declaring or

00:05:49,940 --> 00:05:55,550
sorry just relying on the captured

00:05:53,330 --> 00:05:58,909
metadata and declared licenses is not

00:05:55,550 --> 00:06:01,030
enough so aesthetically parsing the

00:05:58,909 --> 00:06:05,270
package manager definition files like

00:06:01,030 --> 00:06:07,400
package Jason and so on it's not enough

00:06:05,270 --> 00:06:09,259
because in many cases you have things

00:06:07,400 --> 00:06:11,659
like version ranges defined in there

00:06:09,259 --> 00:06:13,159
unless you have a lock file so depending

00:06:11,659 --> 00:06:15,020
on the time you actually build or

00:06:13,159 --> 00:06:16,970
install the product you get different

00:06:15,020 --> 00:06:19,220
dependencies maybe only in a minor

00:06:16,970 --> 00:06:22,310
version but we have seen dependencies

00:06:19,220 --> 00:06:24,889
that in turn change their transitive

00:06:22,310 --> 00:06:27,050
dependencies in in a big way between

00:06:24,889 --> 00:06:29,810
minor versions so not everybody adheres

00:06:27,050 --> 00:06:33,409
to semantic versioning so what we need

00:06:29,810 --> 00:06:36,860
is the real version that gets used by

00:06:33,409 --> 00:06:39,139
the product including resolution of the

00:06:36,860 --> 00:06:40,940
version version conflict resolution like

00:06:39,139 --> 00:06:41,780
the build system would do it so really

00:06:40,940 --> 00:06:44,210
the

00:06:41,780 --> 00:06:46,040
the real thing we also need to know

00:06:44,210 --> 00:06:48,530
where the source code is located in

00:06:46,040 --> 00:06:50,390
order to scan the source code because we

00:06:48,530 --> 00:06:53,270
must not rely on the declared license

00:06:50,390 --> 00:06:55,070
maybe a project says hey I'm Apache but

00:06:53,270 --> 00:06:57,050
then if you look at the dependencies you

00:06:55,070 --> 00:07:03,890
see hey it's actually including a GPL

00:06:57,050 --> 00:07:05,900
dependency doesn't well work together we

00:07:03,890 --> 00:07:08,870
need to be able to fix a broken metadata

00:07:05,900 --> 00:07:10,970
many open source projects don't really

00:07:08,870 --> 00:07:12,770
care much about their metadata they

00:07:10,970 --> 00:07:14,870
don't declare a license at all maybe

00:07:12,770 --> 00:07:16,820
they have typos in the SPD X or a

00:07:14,870 --> 00:07:18,740
license identifier something like this

00:07:16,820 --> 00:07:21,950
they don't take their releases and get

00:07:18,740 --> 00:07:24,980
we need a way to fix this on our side at

00:07:21,950 --> 00:07:27,970
least and of course we need to support

00:07:24,980 --> 00:07:31,370
all kinds of mixed projects multiple

00:07:27,970 --> 00:07:35,060
package managers in the same tree and we

00:07:31,370 --> 00:07:37,130
want some sort of support for what we

00:07:35,060 --> 00:07:38,600
call unmanaged projects like for

00:07:37,130 --> 00:07:41,690
languages that don't have a dedicated

00:07:38,600 --> 00:07:46,060
package manager like plain C C++

00:07:41,690 --> 00:07:46,060
projects embedded Linux stuff and so on

00:07:47,320 --> 00:07:55,340
when it comes to the interchange formats

00:07:51,380 --> 00:08:00,770
we want to rely on public standards like

00:07:55,340 --> 00:08:02,600
SPD X also see me or upcoming standards

00:08:00,770 --> 00:08:04,220
like about code data because not

00:08:02,600 --> 00:08:09,919
everything that we want to document is

00:08:04,220 --> 00:08:12,680
can be captured in SPD X we want to be

00:08:09,919 --> 00:08:14,870
able to use our own scanner so we're not

00:08:12,680 --> 00:08:17,300
intending to reinvent the wheel here the

00:08:14,870 --> 00:08:21,260
toolkit is more the glue between

00:08:17,300 --> 00:08:24,380
existing tools as far as we think they

00:08:21,260 --> 00:08:27,169
can be used and for example you should

00:08:24,380 --> 00:08:30,110
be free to use as a scanner for solid GE

00:08:27,169 --> 00:08:34,089
or a scan code or Amazon recently

00:08:30,110 --> 00:08:37,460
released a scanner was called Escalona

00:08:34,089 --> 00:08:39,380
so we are just the wrapper around the

00:08:37,460 --> 00:08:42,950
scanner and unifying the input and

00:08:39,380 --> 00:08:47,089
output in that case that also avoids

00:08:42,950 --> 00:08:49,880
vendor lock-in and then in order to

00:08:47,089 --> 00:08:52,520
efficiently use the tool in CI we need

00:08:49,880 --> 00:08:55,430
fast incremental scans by reusing

00:08:52,520 --> 00:09:03,890
existing results and being able to

00:08:55,430 --> 00:09:09,380
do Delta scans finally when it comes to

00:09:03,890 --> 00:09:14,779
looking at the results we want something

00:09:09,380 --> 00:09:17,330
that is taking the work off of our legal

00:09:14,779 --> 00:09:20,990
department in the sense that we have a

00:09:17,330 --> 00:09:23,060
rules engine that's how we call it to

00:09:20,990 --> 00:09:25,270
apply license compliance rules there

00:09:23,060 --> 00:09:28,070
those so our legal department should be

00:09:25,270 --> 00:09:30,620
able to give us at least for the

00:09:28,070 --> 00:09:33,080
majority of cases some rules computable

00:09:30,620 --> 00:09:36,770
rules where we can say ok if this and

00:09:33,080 --> 00:09:40,880
that or that block release or whatever

00:09:36,770 --> 00:09:44,420
block the change to not go in taking

00:09:40,880 --> 00:09:47,330
into account of course things like the

00:09:44,420 --> 00:09:51,459
Scopes of a dependency so in maven speak

00:09:47,330 --> 00:09:54,290
you might have a test dependency and

00:09:51,459 --> 00:09:56,209
usually test code doesn't get shipped so

00:09:54,290 --> 00:09:59,029
it's not delivered it's not distributed

00:09:56,209 --> 00:10:03,890
so you probably don't care about it at

00:09:59,029 --> 00:10:05,839
all also we would like to have multiple

00:10:03,890 --> 00:10:07,580
result formats so we need some sort of

00:10:05,839 --> 00:10:09,380
graphical representation of the

00:10:07,580 --> 00:10:13,370
dependency tree to get a better overview

00:10:09,380 --> 00:10:15,589
legal people of X also give them EXO and

00:10:13,370 --> 00:10:18,500
also things like generating the notice

00:10:15,589 --> 00:10:21,140
files is something that is covered by

00:10:18,500 --> 00:10:24,860
the reporter tool that I'll talk about

00:10:21,140 --> 00:10:28,570
so last but not least all of this should

00:10:24,860 --> 00:10:30,500
be reasonably easy to setup in CI and

00:10:28,570 --> 00:10:33,560
taking all of these requirements

00:10:30,500 --> 00:10:35,150
together after some long running

00:10:33,560 --> 00:10:38,270
evaluation we came to the conclusion

00:10:35,150 --> 00:10:40,550
there is nothing on the market that we

00:10:38,270 --> 00:10:44,390
could buy or use that fulfills all of

00:10:40,550 --> 00:10:47,120
these needs so we came up with the open

00:10:44,390 --> 00:10:50,120
source review toolkit or art for short

00:10:47,120 --> 00:10:53,390
how we call it and like I said it's just

00:10:50,120 --> 00:10:56,570
a suite of tools command-line tools in

00:10:53,390 --> 00:11:00,050
this case that are supposed to be

00:10:56,570 --> 00:11:03,110
plucked together in the way of working

00:11:00,050 --> 00:11:06,339
you need them of course the tool itself

00:11:03,110 --> 00:11:09,140
is open source it's on github already

00:11:06,339 --> 00:11:12,320
it's Apache 2 licensed it

00:11:09,140 --> 00:11:14,899
it's written in kopplin who knows : by

00:11:12,320 --> 00:11:18,050
the way as a language okay so it's a

00:11:14,899 --> 00:11:21,470
fairly new language from a company

00:11:18,050 --> 00:11:24,920
called JetBrains who are most famous for

00:11:21,470 --> 00:11:28,370
their I DES I guess it's targeting the

00:11:24,920 --> 00:11:30,920
JVM so it's fully compatible with the

00:11:28,370 --> 00:11:32,600
Java world but you could also compile a

00:11:30,920 --> 00:11:35,660
quarter into native code to some extent

00:11:32,600 --> 00:11:39,560
if you wanted to from a software design

00:11:35,660 --> 00:11:42,290
perspective the toolkit is composed of

00:11:39,560 --> 00:11:45,290
libraries Java libraries and each of the

00:11:42,290 --> 00:11:47,180
libraries has a small main entry point

00:11:45,290 --> 00:11:50,450
so you could use it as a command line

00:11:47,180 --> 00:11:54,740
tool and the tool is in fact in

00:11:50,450 --> 00:11:56,779
production used by us for or since no

00:11:54,740 --> 00:11:57,140
for six months yeah and then that's

00:11:56,779 --> 00:12:01,040
correct

00:11:57,140 --> 00:12:03,829
so exactly the version that you see on

00:12:01,040 --> 00:12:06,200
github the master branch is in use by us

00:12:03,829 --> 00:12:07,850
in production in-house we don't have an

00:12:06,200 --> 00:12:14,240
internal fork we don't hide anything

00:12:07,850 --> 00:12:17,660
that is exactly what we're using the

00:12:14,240 --> 00:12:21,320
first piece in the toolkit is the so

00:12:17,660 --> 00:12:24,019
called analyzer if you were following

00:12:21,320 --> 00:12:26,510
one of the open chain talks or workshops

00:12:24,019 --> 00:12:30,050
then this is the tool you would use in

00:12:26,510 --> 00:12:34,820
the identification step that's how open

00:12:30,050 --> 00:12:36,860
chain calls it as input the analyze it

00:12:34,820 --> 00:12:40,279
just takes a local directory with source

00:12:36,860 --> 00:12:43,370
code and optional curations there is

00:12:40,279 --> 00:12:47,600
something I will talk more about in the

00:12:43,370 --> 00:12:50,839
end and what it does is it gathers all

00:12:47,600 --> 00:12:53,269
facts all data or metadata about

00:12:50,839 --> 00:12:57,130
software dependencies and currently we

00:12:53,269 --> 00:13:00,829
have eleven supported package managers

00:12:57,130 --> 00:13:03,050
and the output is at your choice a

00:13:00,829 --> 00:13:04,850
yellow JSON file with the dependency

00:13:03,050 --> 00:13:08,870
tree so that's probably not very

00:13:04,850 --> 00:13:12,800
readable from far behind but you will

00:13:08,870 --> 00:13:14,540
get the slides anyway so this is in well

00:13:12,800 --> 00:13:16,430
in all of you llamo is a good compromise

00:13:14,540 --> 00:13:19,880
between being human and machine readable

00:13:16,430 --> 00:13:22,130
and here you simply get stuff like what

00:13:19,880 --> 00:13:23,000
is the name of the dependency what is

00:13:22,130 --> 00:13:26,630
the version where

00:13:23,000 --> 00:13:30,410
it come from how do versions map to

00:13:26,630 --> 00:13:32,710
source code revisions and and this kind

00:13:30,410 --> 00:13:32,710
of stuff

00:13:33,340 --> 00:13:38,750
next in the toolkit is the downloader

00:13:37,010 --> 00:13:44,630
the downloader is a tool you would

00:13:38,750 --> 00:13:48,260
fairly yeah or probably never use on its

00:13:44,630 --> 00:13:51,290
own it's implicitly used by the scanner

00:13:48,260 --> 00:13:53,270
but I will anyway talk about it so the

00:13:51,290 --> 00:13:55,370
input for the downloader is the output

00:13:53,270 --> 00:13:56,990
of the analyzer that you just saw and

00:13:55,370 --> 00:13:59,450
it's really a pretty much dump tool

00:13:56,990 --> 00:14:01,460
right it's the only purpose is like the

00:13:59,450 --> 00:14:04,550
name says it downloads it fetches the

00:14:01,460 --> 00:14:08,630
source code but it wraps whatever

00:14:04,550 --> 00:14:11,270
underlying VCS or other protocol you're

00:14:08,630 --> 00:14:14,600
using so we're supporting good mercurial

00:14:11,270 --> 00:14:16,580
subversion and so on and the output is

00:14:14,600 --> 00:14:20,420
simply a local directory with source

00:14:16,580 --> 00:14:22,340
code of course as this is more or less

00:14:20,420 --> 00:14:25,910
just a generic download tool you could

00:14:22,340 --> 00:14:27,890
also use it to download the source code

00:14:25,910 --> 00:14:33,200
to be analyzed before running the

00:14:27,890 --> 00:14:35,120
analyzer then there is the scanner this

00:14:33,200 --> 00:14:38,270
is what you would use in the open chain

00:14:35,120 --> 00:14:42,080
audit step the scanner like I said is

00:14:38,270 --> 00:14:44,060
just a wrapper around whatever license /

00:14:42,080 --> 00:14:47,990
copyright scanner you have configured it

00:14:44,060 --> 00:14:49,790
to use so as input it can take the

00:14:47,990 --> 00:14:52,070
analyzer file directly then it does the

00:14:49,790 --> 00:14:54,500
download internally and it runs your

00:14:52,070 --> 00:14:56,810
configured scanner so we have currently

00:14:54,500 --> 00:15:00,020
four supported scanners but our scanner

00:14:56,810 --> 00:15:02,570
of choice is the next schoo sorry the

00:15:00,020 --> 00:15:05,630
scan code scanner from a company called

00:15:02,570 --> 00:15:09,560
next B which is also open source at

00:15:05,630 --> 00:15:12,890
github and written in Python output

00:15:09,560 --> 00:15:15,260
again at your choice your choice JSON

00:15:12,890 --> 00:15:16,820
file with the scan results and the scan

00:15:15,260 --> 00:15:20,920
results and that's again probably not

00:15:16,820 --> 00:15:23,420
very readable from far behind include

00:15:20,920 --> 00:15:24,890
for example the name also of the scanner

00:15:23,420 --> 00:15:26,750
the version and the way you have

00:15:24,890 --> 00:15:29,120
configured the scanner so everything

00:15:26,750 --> 00:15:30,950
that could take an influence on the scan

00:15:29,120 --> 00:15:33,170
results is captured as part of this

00:15:30,950 --> 00:15:35,150
result file and you can also have

00:15:33,170 --> 00:15:37,330
results from multiple scanners in the

00:15:35,150 --> 00:15:41,570
same result file

00:15:37,330 --> 00:15:43,760
so you can easily compare different

00:15:41,570 --> 00:15:49,160
results from different scanners for the

00:15:43,760 --> 00:15:52,970
same piece of software the last tool in

00:15:49,160 --> 00:15:56,480
the toolkit as it currently is is the

00:15:52,970 --> 00:15:59,900
reporter tool the reporter tool takes as

00:15:56,480 --> 00:16:02,330
input the scanner file and it generates

00:15:59,900 --> 00:16:02,690
a custom report of visualization out of

00:16:02,330 --> 00:16:07,250
it

00:16:02,690 --> 00:16:10,160
so like Excel for legal review like

00:16:07,250 --> 00:16:12,980
static HTML page for getting a quick

00:16:10,160 --> 00:16:15,350
overview or the notice files that you

00:16:12,980 --> 00:16:23,420
would need in case of redress rebooting

00:16:15,350 --> 00:16:27,350
your software now coming to the

00:16:23,420 --> 00:16:30,230
curations the curations are an optional

00:16:27,350 --> 00:16:32,990
input to the analyzer and they augment

00:16:30,230 --> 00:16:36,200
the packages original metadata so this

00:16:32,990 --> 00:16:38,030
is how we fix broken metadata in

00:16:36,200 --> 00:16:41,660
upstream open source projects this is

00:16:38,030 --> 00:16:46,730
also again a simple mo file key value

00:16:41,660 --> 00:16:50,090
pairs fixing up metadata entries and

00:16:46,730 --> 00:16:51,470
this is something we are where we are

00:16:50,090 --> 00:16:53,360
collaborating with the clearly-defined

00:16:51,470 --> 00:16:56,210
initiative which is mainly run by

00:16:53,360 --> 00:17:00,110
Microsoft and who aims to contribute

00:16:56,210 --> 00:17:02,000
back fixes of for metadata to open

00:17:00,110 --> 00:17:04,250
source projects so we are basically

00:17:02,000 --> 00:17:08,500
serving as an input to clearly-defined

00:17:04,250 --> 00:17:08,500
that's the aim that's the idea

00:17:11,140 --> 00:17:17,420
continuous integration is more or less a

00:17:14,209 --> 00:17:19,430
trivial topic in this case because the

00:17:17,420 --> 00:17:21,890
toolkit is compromised of command line

00:17:19,430 --> 00:17:24,680
tools and it's it's fairly easy to set

00:17:21,890 --> 00:17:27,350
this up in Jenkins and in our case we're

00:17:24,680 --> 00:17:30,740
using a Jenkins multi job and each job

00:17:27,350 --> 00:17:34,610
runs a different command line tool from

00:17:30,740 --> 00:17:36,650
the toolkit and basically the the llamÃ³

00:17:34,610 --> 00:17:41,060
input output files are just passed

00:17:36,650 --> 00:17:43,310
between the jobs you can either trigger

00:17:41,060 --> 00:17:45,170
the job based on code changes and the

00:17:43,310 --> 00:17:48,260
product you want to analyze or of course

00:17:45,170 --> 00:17:50,299
just run it on demand like you could

00:17:48,260 --> 00:17:52,340
also do things like

00:17:50,299 --> 00:17:54,890
before actually starting to use an

00:17:52,340 --> 00:17:56,899
open-source library you run the scan on

00:17:54,890 --> 00:17:59,960
demand on the library and give feedback

00:17:56,899 --> 00:18:02,210
to the team and say yes this should be

00:17:59,960 --> 00:18:05,390
fine to use there will be no bad

00:18:02,210 --> 00:18:07,520
surprises in the end of your whatever

00:18:05,390 --> 00:18:10,159
Sprint or shortly before the release

00:18:07,520 --> 00:18:11,899
with us saying oh sorry you should have

00:18:10,159 --> 00:18:17,000
asked us before this contains whatever

00:18:11,899 --> 00:18:20,210
GPL you cannot use it and then the way

00:18:17,000 --> 00:18:22,250
we use it is also by giving currently

00:18:20,210 --> 00:18:24,950
some non-blocking feedback in the code

00:18:22,250 --> 00:18:28,220
review tool we are using so you get some

00:18:24,950 --> 00:18:33,710
label past not past warning problem

00:18:28,220 --> 00:18:36,620
something like this so all of this that

00:18:33,710 --> 00:18:39,649
you've seen so far is already there and

00:18:36,620 --> 00:18:42,380
working and in production but there are

00:18:39,649 --> 00:18:46,940
a bunch of more tools we are working on

00:18:42,380 --> 00:18:49,039
to complete the toolkit the evaluator

00:18:46,940 --> 00:18:54,260
will be the tool that is using this

00:18:49,039 --> 00:18:56,779
rules engine to offload our legal

00:18:54,260 --> 00:19:00,350
department and with with the easy cases

00:18:56,779 --> 00:19:02,929
and give some early feedback before

00:19:00,350 --> 00:19:06,649
legal people even look at the scan

00:19:02,929 --> 00:19:10,100
results so this is our next big topic

00:19:06,649 --> 00:19:12,880
and we hope that this will be a really

00:19:10,100 --> 00:19:16,940
cool feature and legal will thank us for

00:19:12,880 --> 00:19:22,159
not wasting their time any more the

00:19:16,940 --> 00:19:26,570
advisor is our idea of the tool that

00:19:22,159 --> 00:19:30,500
takes the analyzers output and reports

00:19:26,570 --> 00:19:32,299
security vulnerabilities and then

00:19:30,500 --> 00:19:34,700
finally there will be something like

00:19:32,299 --> 00:19:37,220
what we currently call the document or

00:19:34,700 --> 00:19:41,510
could also be part of the the reporter

00:19:37,220 --> 00:19:43,460
maybe that is creating or documenting

00:19:41,510 --> 00:19:46,370
the outcome of the whole review process

00:19:43,460 --> 00:19:49,399
in sue including legal conclusions and

00:19:46,370 --> 00:19:52,130
creating BOMs bill of materials in as

00:19:49,399 --> 00:19:54,380
PDX format with some custom annotations

00:19:52,130 --> 00:19:56,750
maybe because currently it's not

00:19:54,380 --> 00:20:00,049
possible to capture everything in SPX

00:19:56,750 --> 00:20:01,669
that we would like to include but we are

00:20:00,049 --> 00:20:03,330
also working with the SPD ex tech

00:20:01,669 --> 00:20:05,910
community to

00:20:03,330 --> 00:20:07,820
maybe extend the specification or future

00:20:05,910 --> 00:20:17,880
specifications to include some more

00:20:07,820 --> 00:20:25,559
metadata that's about it about the tool

00:20:17,880 --> 00:20:27,420
everything that I wanted to say in case

00:20:25,559 --> 00:20:30,330
you want to reach out here is my email

00:20:27,420 --> 00:20:35,309
address the the slides will be shared

00:20:30,330 --> 00:20:37,110
later on our organization at github is

00:20:35,309 --> 00:20:40,100
called here Maps so there's where you

00:20:37,110 --> 00:20:42,809
can take a look at those as ruby toolkit

00:20:40,100 --> 00:20:46,760
also links to clearly defined initiative

00:20:42,809 --> 00:20:51,320
and the scan code scanner are included

00:20:46,760 --> 00:20:51,320
ok thanks for listening any questions

00:20:52,390 --> 00:20:57,540
[Applause]

00:20:56,330 --> 00:21:01,140
thank you

00:20:57,540 --> 00:21:04,679
so we've seen previously open chain and

00:21:01,140 --> 00:21:07,980
water master there seems to be certain

00:21:04,679 --> 00:21:12,330
overlap do you plan to merge these

00:21:07,980 --> 00:21:14,490
projects to switch over or you just

00:21:12,330 --> 00:21:17,070
invested only so much that you plan to

00:21:14,490 --> 00:21:19,700
stay on your own solution now the idea

00:21:17,070 --> 00:21:23,280
is well first of all yes you are right

00:21:19,700 --> 00:21:27,720
there is some overlap especially between

00:21:23,280 --> 00:21:30,210
quartermaster and the art toolkit the

00:21:27,720 --> 00:21:33,840
funny thing is these two tools developed

00:21:30,210 --> 00:21:35,760
roughly at the same time and we were

00:21:33,840 --> 00:21:38,070
approaching almost the same problems

00:21:35,760 --> 00:21:40,980
from two different angles so quarter

00:21:38,070 --> 00:21:45,679
master is a tiny bit more tailored

00:21:40,980 --> 00:21:48,780
towards analyzing C C++ projects and

00:21:45,679 --> 00:21:50,880
projects that are built on Linux with

00:21:48,780 --> 00:21:56,910
with make or C make and that kind of

00:21:50,880 --> 00:21:59,490
stuff also quartermaster watches the

00:21:56,910 --> 00:22:02,340
build process and and tries to find out

00:21:59,490 --> 00:22:06,540
what goes into your binary so it rather

00:22:02,340 --> 00:22:08,790
looks at the binary and to to find out

00:22:06,540 --> 00:22:11,880
what exactly is being distributed

00:22:08,790 --> 00:22:14,490
whereas our approach looks at the source

00:22:11,880 --> 00:22:16,830
code mainly to get a complete picture

00:22:14,490 --> 00:22:22,049
and then in the end we filter out

00:22:16,830 --> 00:22:25,470
data findings based on scope or also

00:22:22,049 --> 00:22:28,340
package and file levels to get to the

00:22:25,470 --> 00:22:32,039
point where only relevant data is shown

00:22:28,340 --> 00:22:34,190
that said we are in touch with the

00:22:32,039 --> 00:22:37,860
quartermaster people and endo code and

00:22:34,190 --> 00:22:39,990
we could for example envision quota

00:22:37,860 --> 00:22:43,049
master being integrated into the or tool

00:22:39,990 --> 00:22:46,140
to handle all these unmanaged projects

00:22:43,049 --> 00:22:50,519
so it would be basically just in our

00:22:46,140 --> 00:22:53,010
speak or in our view package manager if

00:22:50,519 --> 00:22:55,889
you want to say so so we for everything

00:22:53,010 --> 00:22:57,269
that we currently treat as unmanaged we

00:22:55,889 --> 00:23:00,630
would use quota master

00:22:57,269 --> 00:23:04,549
so that is the only way we could work

00:23:00,630 --> 00:23:11,370
together so you actually don't plan to

00:23:04,549 --> 00:23:14,010
switch over well it's well quarter

00:23:11,370 --> 00:23:17,010
master doesn't solve the problems that

00:23:14,010 --> 00:23:20,250
we have whereas our tool currently does

00:23:17,010 --> 00:23:22,470
fairly well it has a few caps and we

00:23:20,250 --> 00:23:25,289
could fill these gaps on our side maybe

00:23:22,470 --> 00:23:28,019
by using quartermaster but we will for

00:23:25,289 --> 00:23:42,440
sure not switch to using quartermaster

00:23:28,019 --> 00:23:44,570
that's not feasible for us currently hi

00:23:42,440 --> 00:23:47,340
if I understand correctly you're

00:23:44,570 --> 00:23:49,620
starting from the packages from the

00:23:47,340 --> 00:23:50,010
binaries in fact so you you exploring

00:23:49,620 --> 00:23:52,200
what

00:23:50,010 --> 00:23:54,809
Jemma's created or pip or whatever it's

00:23:52,200 --> 00:23:57,740
alright yeah so what we call package

00:23:54,809 --> 00:24:03,830
depends a bit on the language right so

00:23:57,740 --> 00:24:06,750
in case of NPM it would be well yeah a

00:24:03,830 --> 00:24:09,240
tarball containing the source code but

00:24:06,750 --> 00:24:12,360
we are still capturing the real source

00:24:09,240 --> 00:24:14,250
code location in terms of get URL and so

00:24:12,360 --> 00:24:17,220
ok so my real question is how do you

00:24:14,250 --> 00:24:23,010
assure yourself that what that package

00:24:17,220 --> 00:24:25,200
is telling you is the truth well when it

00:24:23,010 --> 00:24:28,860
comes to license data for example just

00:24:25,200 --> 00:24:29,990
in general we did some work trying to

00:24:28,860 --> 00:24:32,030
figure this

00:24:29,990 --> 00:24:33,950
Providence question out a few years ago

00:24:32,030 --> 00:24:36,800
and at that point we engage with say the

00:24:33,950 --> 00:24:38,720
rubygems community and said can we help

00:24:36,800 --> 00:24:39,950
ensure that the URL that you're saying

00:24:38,720 --> 00:24:40,610
is in the package is really where it

00:24:39,950 --> 00:24:43,130
came from

00:24:40,610 --> 00:24:44,300
yeah and the members of the community

00:24:43,130 --> 00:24:47,750
said Island we don't care about that

00:24:44,300 --> 00:24:51,020
we're sure it's true yeah a good point

00:24:47,750 --> 00:24:56,240
so let's take the example of our NPM

00:24:51,020 --> 00:24:58,400
again what we do is only if we cannot

00:24:56,240 --> 00:25:00,620
find the source code in a version

00:24:58,400 --> 00:25:01,970
control system we fall back to scanning

00:25:00,620 --> 00:25:04,190
the source code as it comes with a

00:25:01,970 --> 00:25:06,770
package so basically we we ignore the

00:25:04,190 --> 00:25:10,160
package content we we take the package

00:25:06,770 --> 00:25:12,200
metadata and we verify it by going

00:25:10,160 --> 00:25:13,309
actually to the source code URL

00:25:12,200 --> 00:25:15,650
mentioned as part of the package

00:25:13,309 --> 00:25:17,450
metadata and and then checking out the

00:25:15,650 --> 00:25:19,929
source code and then scanning the source

00:25:17,450 --> 00:25:19,929
code right

00:25:32,480 --> 00:25:46,390
oh okay yeah yeah so we do some cross

00:25:42,680 --> 00:25:51,320
checks too to avoid that so for example

00:25:46,390 --> 00:25:53,750
again NPM taking as an example not in

00:25:51,320 --> 00:25:56,420
the package.json file but in the

00:25:53,750 --> 00:26:01,420
registry in the NPM registry there is

00:25:56,420 --> 00:26:05,870
for some but not all packages to be fair

00:26:01,420 --> 00:26:07,600
something called git head we do trust

00:26:05,870 --> 00:26:11,750
the NPM registry yes

00:26:07,600 --> 00:26:14,300
so well yeah NPM in that cases may be a

00:26:11,750 --> 00:26:18,080
really bad example because I agree the

00:26:14,300 --> 00:26:19,610
NPM registry and the way packages are

00:26:18,080 --> 00:26:23,450
published there is completely broken

00:26:19,610 --> 00:26:26,030
because you can have things like the

00:26:23,450 --> 00:26:27,830
sha-1 pointing to even non-existing

00:26:26,030 --> 00:26:29,660
commits because the developer developer

00:26:27,830 --> 00:26:33,110
never pushed the commits to anywhere

00:26:29,660 --> 00:26:37,880
right so we have cases like this but at

00:26:33,110 --> 00:26:39,230
least we detect them because well if we

00:26:37,880 --> 00:26:40,520
clone the repository and cannot check

00:26:39,230 --> 00:26:42,830
out the commitment and we clearly know

00:26:40,520 --> 00:26:47,000
something went wrong so and this is also

00:26:42,830 --> 00:26:49,640
the case where then human labor is asked

00:26:47,000 --> 00:26:52,340
to create curations and and creating

00:26:49,640 --> 00:26:54,530
these creations is really a forensic

00:26:52,340 --> 00:26:57,290
effort right so sometimes it's really

00:26:54,530 --> 00:27:00,500
really hard to find out where does this

00:26:57,290 --> 00:27:02,660
source code really come from and in some

00:27:00,500 --> 00:27:06,350
cases we simply cannot tell sometimes it

00:27:02,660 --> 00:27:10,130
just disappeared so where possible we do

00:27:06,350 --> 00:27:12,200
some same cross checks when we run into

00:27:10,130 --> 00:27:14,660
problems then we detect them in most

00:27:12,200 --> 00:27:24,910
cases but sometimes there really is no

00:27:14,660 --> 00:27:24,910
fix to the problem any more questions

00:27:27,120 --> 00:27:33,670
you're lighting their licenses a second

00:27:29,860 --> 00:27:35,890
time so if it just says I'm an MIT are

00:27:33,670 --> 00:27:39,400
you comparing it with the original MIT

00:27:35,890 --> 00:27:40,420
or Apache or if the developer made maybe

00:27:39,400 --> 00:27:43,300
some changes

00:27:40,420 --> 00:27:45,340
there's something inside so in that case

00:27:43,300 --> 00:27:49,800
we trust the scanner that we are using

00:27:45,340 --> 00:27:52,630
we are trusting scan code from next P to

00:27:49,800 --> 00:27:55,690
correctly identify the license text and

00:27:52,630 --> 00:27:57,970
match it to MIT for example so scan code

00:27:55,690 --> 00:27:59,830
is really basically comparing the

00:27:57,970 --> 00:28:03,070
paragraphs of the of the little oral

00:27:59,830 --> 00:28:04,960
license text to MIT of course taking

00:28:03,070 --> 00:28:07,990
into account some modifications and so

00:28:04,960 --> 00:28:12,820
on so it's way more complicated than

00:28:07,990 --> 00:28:14,650
just wrapping through files but yes so

00:28:12,820 --> 00:28:16,180
in that case we trust the scanner but

00:28:14,650 --> 00:28:18,700
this is why you can swap the scanner for

00:28:16,180 --> 00:28:22,070
anything that you trust maybe more than

00:28:18,700 --> 00:28:24,990
then we would do or the other way around

00:28:22,070 --> 00:28:27,940
[Laughter]

00:28:24,990 --> 00:28:31,470
so does that answer your question

00:28:27,940 --> 00:28:31,470
okay does thanks okay

00:28:36,290 --> 00:28:45,339
okay okay thank you

00:28:39,140 --> 00:28:45,339

YouTube URL: https://www.youtube.com/watch?v=doGGU-ZPyQ0


