Title: #FOSSBack 18: Paul Burt â€“ Leeches to lidocaine: bringing empiricism to software
Publication date: 2018-06-22
Playlist: FOSS Backstage 2018
Description: 
	As software creators, we often flirt with titles that contain words like scientist, engineer, and architect. Yet, despite the empirical sounding quality of those titles, our field is still filled with mysticism, and by-the-gut models for how we believe things work.

We can do better. The book Making Software opens the door to a reasoned, proven approach to validating these beliefs. To do that, we'll start with a look at the History of the medical field. We'll compare the similarity of early science based medicine to our current situation with computer science and software engineering. Over the course of this talk we'll explore topics like:

- 10x programmers: do they exist?
- Conway's Law: does software mirror team structure, and can we exploit that fact?
- Pair programming: is it worth it?
- The Cathedral and the Bazaar: is the organization of OSS significantly different than closed source?
- Measuring code quality: are there simple, statistically backed metrics for evaluating code quality?

We'll close the talk with a look at people and places who are continuing to do this important work. This talk is aimed at anyone who has worked in tech, and has ever been curious if any of our common ideals have been backed up by more than just a feeling.

Read more:
https://18.foss-backstage.de/session/leeches-lidocaine-bringing-empiricism-software

About Paul Burt:
https://18.foss-backstage.de/member/paul-burt

Website: https://www.foss-backstage.de/
Twitter: https://twitter.com/Fossbckstg
LinkedIn: https://www.linkedin.com/groups/8653059/
Captions: 
	00:00:04,009 --> 00:00:09,240
hello Berlin good morning Faust

00:00:06,660 --> 00:00:11,190
backstage happy to be here talking to

00:00:09,240 --> 00:00:14,099
you about science today I hope you're

00:00:11,190 --> 00:00:15,389
excited about science as well if I've

00:00:14,099 --> 00:00:18,029
done my job by the end of the

00:00:15,389 --> 00:00:20,400
presentation you will be so we'll see

00:00:18,029 --> 00:00:23,489
how we do I should start this

00:00:20,400 --> 00:00:25,949
presentation by noting that I submitted

00:00:23,489 --> 00:00:29,159
this talk when core OS was core OS but

00:00:25,949 --> 00:00:30,479
now core OS is RedHat so I'm technically

00:00:29,159 --> 00:00:32,910
part of the Red Hat family and

00:00:30,479 --> 00:00:34,890
representing them but I figured I would

00:00:32,910 --> 00:00:38,960
keep my slide deck and core OS theme

00:00:34,890 --> 00:00:44,430
still you know for old times sake

00:00:38,960 --> 00:00:46,800
so my talk today is about the contrast

00:00:44,430 --> 00:00:51,750
between the early days of medicine and

00:00:46,800 --> 00:00:54,030
how we make software today you know in

00:00:51,750 --> 00:00:56,340
the old days at least as they tell it in

00:00:54,030 --> 00:00:58,370
the American tales of the West there

00:00:56,340 --> 00:01:01,079
were a lot of folks wandering around

00:00:58,370 --> 00:01:04,920
pulling teeth and putting leeches on

00:01:01,079 --> 00:01:08,880
people using some what sort of barbaric

00:01:04,920 --> 00:01:12,240
means of administering medicine but this

00:01:08,880 --> 00:01:14,159
is what they knew and a lot of what was

00:01:12,240 --> 00:01:17,369
taught to them was passed around by folk

00:01:14,159 --> 00:01:18,960
knowledge or just face-to-face people

00:01:17,369 --> 00:01:21,689
telling stories about what they think

00:01:18,960 --> 00:01:24,479
works sometimes it did work sometimes it

00:01:21,689 --> 00:01:26,520
didn't and eventually we got to today

00:01:24,479 --> 00:01:29,789
where medicine is highly science-based

00:01:26,520 --> 00:01:31,499
and I think there's an interesting

00:01:29,789 --> 00:01:35,100
parallel between that journey in the

00:01:31,499 --> 00:01:38,549
journey we're making with software today

00:01:35,100 --> 00:01:40,889
so I got interested in this originally

00:01:38,549 --> 00:01:42,389
because working at core OS with the

00:01:40,889 --> 00:01:44,759
smart folks there we make a number of

00:01:42,389 --> 00:01:46,350
open-source projects so I became

00:01:44,759 --> 00:01:49,439
interested in measuring our projects

00:01:46,350 --> 00:01:50,909
health trying to figure out if things

00:01:49,439 --> 00:01:54,779
were going well if they were going

00:01:50,909 --> 00:01:58,109
poorly how to kind of get early signals

00:01:54,779 --> 00:02:01,729
as to you know whether one or the other

00:01:58,109 --> 00:02:04,560
is happening and sort of figuring out

00:02:01,729 --> 00:02:07,380
what are the important measures to look

00:02:04,560 --> 00:02:12,360
for to figure those things out so I

00:02:07,380 --> 00:02:14,520
started writing Google bigquery's to you

00:02:12,360 --> 00:02:16,650
know piece some of that information

00:02:14,520 --> 00:02:17,430
together and like most people I started

00:02:16,650 --> 00:02:19,980
looking at

00:02:17,430 --> 00:02:23,640
a number of commits per week and source

00:02:19,980 --> 00:02:25,739
lines of code but you know as as you are

00:02:23,640 --> 00:02:28,709
probably aware those are unsatisfying

00:02:25,739 --> 00:02:31,170
metrics to work by as a developer you

00:02:28,709 --> 00:02:33,030
don't feel like those accurately capture

00:02:31,170 --> 00:02:35,069
all of the complexity that goes into

00:02:33,030 --> 00:02:39,599
making software so I thought there must

00:02:35,069 --> 00:02:44,120
be something better and indeed there was

00:02:39,599 --> 00:02:47,010
so just to fully draw this parallel out

00:02:44,120 --> 00:02:49,079
the world of medicine not so long ago

00:02:47,010 --> 00:02:51,989
went through a similar sort of process

00:02:49,079 --> 00:02:55,530
so it wasn't so long ago and say the

00:02:51,989 --> 00:02:58,560
1850s that a Hungarian doctor actually

00:02:55,530 --> 00:03:00,450
discovered that if doctors washed their

00:02:58,560 --> 00:03:02,750
hands they could greatly decrease the

00:03:00,450 --> 00:03:06,750
mortality rate of women giving birth

00:03:02,750 --> 00:03:10,790
what he noticed is that doctors who

00:03:06,750 --> 00:03:14,519
performed autopsies would then go and

00:03:10,790 --> 00:03:17,849
deliver children for women who were in

00:03:14,519 --> 00:03:20,310
labor and the women who had doctors do

00:03:17,849 --> 00:03:23,760
that versus the women who had midwives

00:03:20,310 --> 00:03:25,859
do that had starkly different outcomes

00:03:23,760 --> 00:03:27,659
and it turns out it's because the

00:03:25,859 --> 00:03:30,419
midwives never actually got the hands

00:03:27,659 --> 00:03:33,359
dirty with diseased bodies doing

00:03:30,419 --> 00:03:35,459
autopsies so he devised a little

00:03:33,359 --> 00:03:38,280
experiment and had some doctors wash the

00:03:35,459 --> 00:03:40,379
hands with chlorine after they did the

00:03:38,280 --> 00:03:42,060
work with cadavers and found this

00:03:40,379 --> 00:03:45,750
dramatically reduced the mortality rate

00:03:42,060 --> 00:03:48,780
for women giving birth despite the

00:03:45,750 --> 00:03:52,319
evidence it still took years for these

00:03:48,780 --> 00:03:53,970
findings to catch on and I found we're

00:03:52,319 --> 00:03:55,829
sort of in a similar place with software

00:03:53,970 --> 00:03:59,340
where we've done a lot of interesting

00:03:55,829 --> 00:04:01,409
research on things beyond just whether

00:03:59,340 --> 00:04:03,120
to use bubble sort or a quick sort um

00:04:01,409 --> 00:04:05,340
that stuff is very scientific in

00:04:03,120 --> 00:04:07,169
computer science but when it comes to

00:04:05,340 --> 00:04:11,220
the day to day operations of writing

00:04:07,169 --> 00:04:14,489
software actually making things we still

00:04:11,220 --> 00:04:16,470
rely on a lot of mysticism so you know

00:04:14,489 --> 00:04:20,370
we talk about things like 10x

00:04:16,470 --> 00:04:22,349
programmers and Conway's law and a lot

00:04:20,370 --> 00:04:26,219
of other of these things that are passed

00:04:22,349 --> 00:04:29,310
around similarly to leeches and pulling

00:04:26,219 --> 00:04:30,940
of the olden days we do it because we

00:04:29,310 --> 00:04:34,090
think they're right

00:04:30,940 --> 00:04:36,400
but that's all we have is we think

00:04:34,090 --> 00:04:38,860
they're right for the most part so I

00:04:36,400 --> 00:04:41,460
started to think like has someone

00:04:38,860 --> 00:04:44,650
actually tested this can someone tell me

00:04:41,460 --> 00:04:46,600
whether this actually is right and it

00:04:44,650 --> 00:04:51,460
turns out for more than a decade this

00:04:46,600 --> 00:04:53,920
book has been out almost you know we're

00:04:51,460 --> 00:04:56,560
about to you're shy I guess so

00:04:53,920 --> 00:05:00,970
I guess my maths slightly off by two

00:04:56,560 --> 00:05:02,950
maybe not off by one but yeah in any

00:05:00,970 --> 00:05:05,020
event this this book I found really

00:05:02,950 --> 00:05:08,080
enlightening it took a lot of actual

00:05:05,020 --> 00:05:11,350
empirical studies about the the the

00:05:08,080 --> 00:05:13,150
process of making software and talked

00:05:11,350 --> 00:05:16,240
about them things like Conway's law the

00:05:13,150 --> 00:05:19,830
10x engineer and those things so that's

00:05:16,240 --> 00:05:19,830
what we're gonna dive into you next year

00:05:22,080 --> 00:05:28,600
cool so this is sort of serendipitous

00:05:26,590 --> 00:05:30,490
and that there are open source cupcakes

00:05:28,600 --> 00:05:32,670
in the next room I believe so

00:05:30,490 --> 00:05:36,130
I didn't plan this with this slide but

00:05:32,670 --> 00:05:38,320
this is one of the the I think most fun

00:05:36,130 --> 00:05:40,540
things I discovered doing this research

00:05:38,320 --> 00:05:42,340
is I guess in Silicon Valley at least

00:05:40,540 --> 00:05:45,310
people like to talk about the need to

00:05:42,340 --> 00:05:47,560
hire the best developers you know when

00:05:45,310 --> 00:05:49,690
you commit something to an API people

00:05:47,560 --> 00:05:52,750
start consuming that API it sort of gets

00:05:49,690 --> 00:05:54,190
stuck in that place and everybody has to

00:05:52,750 --> 00:05:56,890
live with your poor decisions for

00:05:54,190 --> 00:05:58,540
decades so it's paramount that you have

00:05:56,890 --> 00:06:02,830
the best programmers you possibly can

00:05:58,540 --> 00:06:06,250
and part of that mythology relies on a

00:06:02,830 --> 00:06:08,710
study that was done comparing sort of

00:06:06,250 --> 00:06:10,750
the spectrum of programming talent what

00:06:08,710 --> 00:06:14,140
is the gap of skill between the best and

00:06:10,750 --> 00:06:16,419
the absolute worst programmer well the

00:06:14,140 --> 00:06:18,790
study that was originally done that most

00:06:16,419 --> 00:06:21,640
people are citing but don't actually

00:06:18,790 --> 00:06:24,780
realize was a study that was done a

00:06:21,640 --> 00:06:26,770
college campus and it was done with

00:06:24,780 --> 00:06:29,260
computers when they were still doing

00:06:26,770 --> 00:06:30,910
programming through punch cards so

00:06:29,260 --> 00:06:33,760
starkly different than how we write

00:06:30,910 --> 00:06:37,090
software today and in this study they

00:06:33,760 --> 00:06:39,220
were actually measuring people who had

00:06:37,090 --> 00:06:41,380
basically almost no knowledge of

00:06:39,220 --> 00:06:44,440
computers whatsoever so the equivalent

00:06:41,380 --> 00:06:47,170
of a parent or a relative

00:06:44,440 --> 00:06:49,750
who needs you to do everything including

00:06:47,170 --> 00:06:51,820
log them into their email for them

00:06:49,750 --> 00:06:54,460
and people who've been programming for

00:06:51,820 --> 00:06:56,400
years so you know people who were doing

00:06:54,460 --> 00:06:58,900
programming in a professional capacity

00:06:56,400 --> 00:07:00,850
and in that study they found that there

00:06:58,900 --> 00:07:03,210
was actually a 68 X difference between

00:07:00,850 --> 00:07:05,830
the absolute worst and the absolute best

00:07:03,210 --> 00:07:08,580
when it came to the output that they

00:07:05,830 --> 00:07:12,960
were able to put out and the test there

00:07:08,580 --> 00:07:15,550
this isn't too enlightening it turns out

00:07:12,960 --> 00:07:16,990
in most cases you're not hiring people

00:07:15,550 --> 00:07:18,880
to work with you and your team off the

00:07:16,990 --> 00:07:20,650
street that are the equivalent of

00:07:18,880 --> 00:07:22,390
someone who barely knows how to access

00:07:20,650 --> 00:07:25,690
their email you're you're hiring people

00:07:22,390 --> 00:07:28,900
who studied programming or have some

00:07:25,690 --> 00:07:31,900
capacity for programming and in a 2000

00:07:28,900 --> 00:07:33,730
study they found that in most workplaces

00:07:31,900 --> 00:07:35,860
where people are actually programming I

00:07:33,730 --> 00:07:38,950
think it was across more than a hundred

00:07:35,860 --> 00:07:43,240
developer or 100 code bases a thousand

00:07:38,950 --> 00:07:45,880
developers they they found that the gap

00:07:43,240 --> 00:07:47,860
was more like a 3x gap between the best

00:07:45,880 --> 00:07:49,600
and the worst programmer in the office

00:07:47,860 --> 00:07:52,240
and when you started to control for

00:07:49,600 --> 00:07:54,310
things like the amount of domain

00:07:52,240 --> 00:07:58,140
expertise and the amount of years on the

00:07:54,310 --> 00:08:01,210
job that gap starts to rapidly shrink so

00:07:58,140 --> 00:08:03,040
the idea that there's one programmer in

00:08:01,210 --> 00:08:05,919
your team who's absolutely indispensable

00:08:03,040 --> 00:08:07,390
and they know everything and you can't

00:08:05,919 --> 00:08:10,180
live without them because they're a 10x

00:08:07,390 --> 00:08:14,820
programmer is sort of a mythology that I

00:08:10,180 --> 00:08:14,820
think we need to let go as programmers

00:08:16,170 --> 00:08:22,990
cool the next most interesting thing I

00:08:19,900 --> 00:08:24,820
learned was about Conway's law so if

00:08:22,990 --> 00:08:27,160
you're unfamiliar Conway's law is the

00:08:24,820 --> 00:08:30,040
idea that code would reflect steam

00:08:27,160 --> 00:08:33,070
structure so the canonical example for

00:08:30,040 --> 00:08:35,680
Conway's law is if you have a team or

00:08:33,070 --> 00:08:37,210
say you have four teams and you're

00:08:35,680 --> 00:08:41,050
writing a compiler you'll get a four

00:08:37,210 --> 00:08:43,350
pass compiler so the idea is that the

00:08:41,050 --> 00:08:47,560
organization in your company is directly

00:08:43,350 --> 00:08:50,110
reflected on your repository this gets

00:08:47,560 --> 00:08:52,480
cited commonly but you know the question

00:08:50,110 --> 00:08:57,300
is open has it been improved and the

00:08:52,480 --> 00:09:00,430
answer is yes there was a 2006 study by

00:08:57,300 --> 00:09:02,380
Cataldo I'm probably mispronouncing that

00:09:00,430 --> 00:09:05,290
name but if you check the slides there's

00:09:02,380 --> 00:09:06,490
there's links to this research who

00:09:05,290 --> 00:09:10,480
looked at this and he found that

00:09:06,490 --> 00:09:14,830
Conway's law is actually real and it's

00:09:10,480 --> 00:09:16,720
really real it's real enough that they

00:09:14,830 --> 00:09:20,080
found that organizational factors were a

00:09:16,720 --> 00:09:23,260
better predictor of how the code turned

00:09:20,080 --> 00:09:25,050
out then things like the actual code so

00:09:23,260 --> 00:09:29,470
if you looked at cyclomatic complexity

00:09:25,050 --> 00:09:32,320
or did code analysis using static

00:09:29,470 --> 00:09:35,230
analysis type tools the organization a

00:09:32,320 --> 00:09:38,140
team structure was actually better in

00:09:35,230 --> 00:09:40,510
terms of figuring out how the code would

00:09:38,140 --> 00:09:43,600
turn out architectural e than those

00:09:40,510 --> 00:09:45,780
other things so I think that's quite

00:09:43,600 --> 00:09:45,780
interesting

00:09:46,650 --> 00:09:52,500
similarly there was another study that

00:09:49,000 --> 00:09:54,730
happened in the same sort of time period

00:09:52,500 --> 00:09:56,500
that kind of looked at the difference

00:09:54,730 --> 00:09:58,900
between open source projects and closed

00:09:56,500 --> 00:10:01,810
source projects so this is sort of the

00:09:58,900 --> 00:10:04,270
idea of the cathedral and the bazaar the

00:10:01,810 --> 00:10:07,650
the dream is that for most open source

00:10:04,270 --> 00:10:09,580
projects they act like a bazaar where

00:10:07,650 --> 00:10:12,730
programmers can come to your stall

00:10:09,580 --> 00:10:14,440
converse with you drop something off you

00:10:12,730 --> 00:10:16,330
give them something in return and then

00:10:14,440 --> 00:10:19,270
they go to another stall and they're

00:10:16,330 --> 00:10:21,670
sort of self-guided if you've actually

00:10:19,270 --> 00:10:27,460
contributed to open source at least in

00:10:21,670 --> 00:10:29,500
my experience this is not true and this

00:10:27,460 --> 00:10:31,779
study that I read

00:10:29,500 --> 00:10:34,209
in this book sort of compared the Linux

00:10:31,779 --> 00:10:37,959
codebase to the Microsoft codebase for

00:10:34,209 --> 00:10:40,240
Windows amongst a few other projects and

00:10:37,959 --> 00:10:42,870
they found when they looked at a graph

00:10:40,240 --> 00:10:46,329
of how the governance model of those

00:10:42,870 --> 00:10:49,329
programs were set up Linux is actually

00:10:46,329 --> 00:10:49,899
pretty hierarchical you have Lennis on

00:10:49,329 --> 00:10:52,120
top

00:10:49,899 --> 00:10:54,550
he has his lieutenants under him he

00:10:52,120 --> 00:10:56,410
literally calls them lieutenants and

00:10:54,550 --> 00:10:59,290
they each own certain areas of the

00:10:56,410 --> 00:11:01,029
program and you may be aware that it's

00:10:59,290 --> 00:11:03,910
actually relatively hard to do drive-by

00:11:01,029 --> 00:11:06,069
commits and open source generally some

00:11:03,910 --> 00:11:07,750
commits are helpful and you know

00:11:06,069 --> 00:11:10,480
contributors are happy to take patches

00:11:07,750 --> 00:11:13,329
but some commits are someone essentially

00:11:10,480 --> 00:11:15,100
just backing a dump truck up to your

00:11:13,329 --> 00:11:16,839
codebase dumping a bunch of code and

00:11:15,100 --> 00:11:19,779
saying you maintain this for me now all

00:11:16,839 --> 00:11:21,879
right I'm out peace and that's usually

00:11:19,779 --> 00:11:24,189
not very friendly it's usually not the

00:11:21,879 --> 00:11:27,639
sort of thing that people appreciate too

00:11:24,189 --> 00:11:31,300
much usually when you're contributing to

00:11:27,639 --> 00:11:33,100
code people tend to collaborate on teams

00:11:31,300 --> 00:11:35,019
naturally and they tend to stick with

00:11:33,100 --> 00:11:37,180
those teams if they are a good

00:11:35,019 --> 00:11:39,670
contributor and this happens naturally

00:11:37,180 --> 00:11:41,439
in open-source projects and projects

00:11:39,670 --> 00:11:43,300
that are particularly good at this today

00:11:41,439 --> 00:11:44,769
our projects like rust if you've ever

00:11:43,300 --> 00:11:46,660
contributed to rust you know what I'm

00:11:44,769 --> 00:11:48,639
talking about they have a lot of BOTS

00:11:46,660 --> 00:11:50,740
and other things that introduce you to

00:11:48,639 --> 00:11:53,050
people who have worked on similar areas

00:11:50,740 --> 00:11:54,759
of the code that you've worked on kind

00:11:53,050 --> 00:11:56,620
of guiding you through the process of

00:11:54,759 --> 00:12:03,009
getting integrated with their sort of

00:11:56,620 --> 00:12:05,259
norms and values and the the other thing

00:12:03,009 --> 00:12:07,149
is kubernetes is also very good at this

00:12:05,259 --> 00:12:09,430
kubernetes tends to orient itself around

00:12:07,149 --> 00:12:12,040
sig groups special interest groups for

00:12:09,430 --> 00:12:16,000
various areas of the codebase and you

00:12:12,040 --> 00:12:17,740
can exploit Conway's law by just knowing

00:12:16,000 --> 00:12:20,380
that people are gonna work better on

00:12:17,740 --> 00:12:22,389
teams naturally so if you want good

00:12:20,380 --> 00:12:25,329
contribution contribution model for your

00:12:22,389 --> 00:12:27,699
projects find a way to integrate new

00:12:25,329 --> 00:12:30,100
contributors into teams and that will

00:12:27,699 --> 00:12:31,930
lead to happier longer-term

00:12:30,100 --> 00:12:35,980
contributions to the work that you're

00:12:31,930 --> 00:12:39,069
doing this is sort of my takeaway on

00:12:35,980 --> 00:12:40,779
scientific as it is but if you were

00:12:39,069 --> 00:12:42,790
around yesterday there was a talk on

00:12:40,779 --> 00:12:45,790
empathy in software

00:12:42,790 --> 00:12:47,920
and this is why that sort of stuff is so

00:12:45,790 --> 00:12:50,740
important turns out software's made of

00:12:47,920 --> 00:12:53,500
people is the way I like to think of

00:12:50,740 --> 00:12:55,540
Conway's law which means all of the

00:12:53,500 --> 00:12:58,149
messy ugly things we have to deal with

00:12:55,540 --> 00:13:01,209
as people affect the code that we're

00:12:58,149 --> 00:13:03,910
deploying so figuring out how to work

00:13:01,209 --> 00:13:08,430
well in a team actually turns out to be

00:13:03,910 --> 00:13:12,190
relatively important cool next question

00:13:08,430 --> 00:13:13,779
does pair programming work so I'm going

00:13:12,190 --> 00:13:15,730
to go a little bit faster through these

00:13:13,779 --> 00:13:18,220
because it looks like I'm running a

00:13:15,730 --> 00:13:20,490
little low on time but pair programming

00:13:18,220 --> 00:13:24,459
is great when the problem is complex

00:13:20,490 --> 00:13:26,110
errors in the code are costly and the

00:13:24,459 --> 00:13:27,970
knowledge transfer lowers the bus factor

00:13:26,110 --> 00:13:30,010
on your team so the bus factor is the

00:13:27,970 --> 00:13:32,949
idea if someone gets hit by a bus

00:13:30,010 --> 00:13:34,149
tomorrow you know your team can still

00:13:32,949 --> 00:13:36,790
function they don't have everything

00:13:34,149 --> 00:13:40,899
sitting inside their head that nobody

00:13:36,790 --> 00:13:43,389
else knows a study of pair programming

00:13:40,899 --> 00:13:45,269
found that pair programming is actually

00:13:43,389 --> 00:13:48,639
best when different personalities pair

00:13:45,269 --> 00:13:50,920
it's sort of interesting it's not

00:13:48,639 --> 00:13:53,079
something you would think would be true

00:13:50,920 --> 00:13:55,660
but when an extrovert and an introvert

00:13:53,079 --> 00:13:57,819
pair together that tends to be the best

00:13:55,660 --> 00:13:59,800
combination for doing pair programming

00:13:57,819 --> 00:14:01,540
for whatever reason they're not really

00:13:59,800 --> 00:14:03,190
sure

00:14:01,540 --> 00:14:05,139
they found that pairing reduces

00:14:03,190 --> 00:14:08,170
interruptions when you're coding which I

00:14:05,139 --> 00:14:09,880
know we all suffer from and disliked by

00:14:08,170 --> 00:14:13,600
the number of memes I see floating

00:14:09,880 --> 00:14:16,600
around on Twitter and reddit so the

00:14:13,600 --> 00:14:18,160
thought here is also that they don't

00:14:16,600 --> 00:14:20,709
actually know why this is but they think

00:14:18,160 --> 00:14:22,569
it's if someone sees a group of people

00:14:20,709 --> 00:14:24,699
doing something they're much less likely

00:14:22,569 --> 00:14:27,449
to interject and ask them to help them

00:14:24,699 --> 00:14:30,519
or distract them they see they're busy

00:14:27,449 --> 00:14:32,579
collaborating so they'll go along their

00:14:30,519 --> 00:14:36,160
merry way unless it's truly important

00:14:32,579 --> 00:14:38,740
and the final thing is pair programming

00:14:36,160 --> 00:14:41,199
isn't something you can just do randomly

00:14:38,740 --> 00:14:43,839
and have it work people have to actually

00:14:41,199 --> 00:14:45,610
train to do pair programming correctly

00:14:43,839 --> 00:14:47,860
together so you need at least 12 hours

00:14:45,610 --> 00:14:49,690
of training generally before you become

00:14:47,860 --> 00:14:50,579
proficient and you start to see benefits

00:14:49,690 --> 00:14:55,149
of pair programming

00:14:50,579 --> 00:14:56,440
so some devs may be 120 are they found

00:14:55,149 --> 00:14:59,350
will just never pair well

00:14:56,440 --> 00:15:01,480
at all that's fine pair programming

00:14:59,350 --> 00:15:04,449
tends to work faster since its but since

00:15:01,480 --> 00:15:06,819
it's two coders it ultimately ends up

00:15:04,449 --> 00:15:10,000
costing you about 15% more developer

00:15:06,819 --> 00:15:13,449
hours and the ideal session is you know

00:15:10,000 --> 00:15:14,920
four hours maximum if you go longer than

00:15:13,449 --> 00:15:21,189
four hours in a day you're gonna get

00:15:14,920 --> 00:15:23,740
diminishing returns on this cool so

00:15:21,189 --> 00:15:26,819
who's who's ever tried to measure code

00:15:23,740 --> 00:15:29,410
by source lines code or commits or churn

00:15:26,819 --> 00:15:34,060
anything like that has anyone ever made

00:15:29,410 --> 00:15:36,490
that yeah I I have I think we all have

00:15:34,060 --> 00:15:38,500
when we first start looking into this

00:15:36,490 --> 00:15:40,660
stuff and we all sort of immediately

00:15:38,500 --> 00:15:43,300
realize that it's actually pretty

00:15:40,660 --> 00:15:45,970
difficult to quantify the value of code

00:15:43,300 --> 00:15:46,839
so there are some scientific measures

00:15:45,970 --> 00:15:48,819
for doing this

00:15:46,839 --> 00:15:50,800
there's mccabe's cyclomatic complexity

00:15:48,819 --> 00:15:52,920
which I'll just jump through really

00:15:50,800 --> 00:15:55,029
quickly there's hallstatt's

00:15:52,920 --> 00:15:58,089
software science metrics it looks at

00:15:55,029 --> 00:16:01,600
operators and determines complexity

00:15:58,089 --> 00:16:02,740
based off of that and then there's

00:16:01,600 --> 00:16:04,089
simpler measures there's things like

00:16:02,740 --> 00:16:07,540
source lines of code and number of

00:16:04,089 --> 00:16:09,670
functions so one study found when you

00:16:07,540 --> 00:16:12,220
look at all of these together and how

00:16:09,670 --> 00:16:14,350
they correlate in terms of telling you

00:16:12,220 --> 00:16:18,850
things about the quality or the hygiene

00:16:14,350 --> 00:16:21,579
of the code a value of one if you pair

00:16:18,850 --> 00:16:23,769
these together means they are perfectly

00:16:21,579 --> 00:16:25,839
correlated so if you look at source

00:16:23,769 --> 00:16:30,029
lines of code in the top row here and

00:16:25,839 --> 00:16:31,930
you go over to HL hang and H volume

00:16:30,029 --> 00:16:33,670
basically those are the hallstatt

00:16:31,930 --> 00:16:36,189
complexity metrics that are sort of the

00:16:33,670 --> 00:16:38,730
intuitive way to measure complexity and

00:16:36,189 --> 00:16:40,839
source lines of code has a 97 percent

00:16:38,730 --> 00:16:42,610
overlap with that in terms of

00:16:40,839 --> 00:16:46,149
correlation telling you whether your

00:16:42,610 --> 00:16:48,689
code is good or not which seems crazy to

00:16:46,149 --> 00:16:55,720
me like I would never expect that result

00:16:48,689 --> 00:16:57,160
but that's how science works so there is

00:16:55,720 --> 00:17:00,160
some healthy skepticism you should have

00:16:57,160 --> 00:17:01,509
here this study was done on C files so

00:17:00,160 --> 00:17:03,790
this may not apply to your programming

00:17:01,509 --> 00:17:05,709
language of choice science needs to do

00:17:03,790 --> 00:17:07,600
more work to sort of figure that out and

00:17:05,709 --> 00:17:09,500
they found for small files less than a

00:17:07,600 --> 00:17:11,600
hundred lines of source code

00:17:09,500 --> 00:17:13,370
this also tends to fall away as well

00:17:11,600 --> 00:17:18,079
when you're you're measuring complexity

00:17:13,370 --> 00:17:20,810
and likelihood of bugs in your code so

00:17:18,079 --> 00:17:22,699
all of this research is pulled from this

00:17:20,810 --> 00:17:25,040
wonderful book making software what

00:17:22,699 --> 00:17:27,650
really works and why we believe it this

00:17:25,040 --> 00:17:31,750
is a fantastic book I should just add

00:17:27,650 --> 00:17:34,430
one caveat and that is that science is

00:17:31,750 --> 00:17:35,960
never derived from a single study a

00:17:34,430 --> 00:17:38,840
single study never proves anything it's

00:17:35,960 --> 00:17:41,030
derived from the community opinions over

00:17:38,840 --> 00:17:43,550
that are derived from multiple studies

00:17:41,030 --> 00:17:45,290
and it's the community that is objective

00:17:43,550 --> 00:17:48,350
and all of us because we are passionate

00:17:45,290 --> 00:17:52,790
people are ultimately subjective no

00:17:48,350 --> 00:17:54,800
matter how much we try these are

00:17:52,790 --> 00:17:58,190
interesting resources that I'll just

00:17:54,800 --> 00:18:01,880
sort of jump through time there's also

00:17:58,190 --> 00:18:04,010
the chaos projects which is community

00:18:01,880 --> 00:18:05,600
metrics that are being run through by

00:18:04,010 --> 00:18:08,450
the Linux Foundation for measuring your

00:18:05,600 --> 00:18:09,890
own software projects this is very early

00:18:08,450 --> 00:18:11,450
so if this is something that interests

00:18:09,890 --> 00:18:16,700
you this is a great group to get

00:18:11,450 --> 00:18:19,610
involved with and I'll end by just

00:18:16,700 --> 00:18:21,950
saying that it's a little more complex

00:18:19,610 --> 00:18:25,250
than just adding more science to what

00:18:21,950 --> 00:18:26,960
you're doing because science generally

00:18:25,250 --> 00:18:28,490
has a limited view of the world there

00:18:26,960 --> 00:18:30,950
are things that science understands and

00:18:28,490 --> 00:18:33,050
things that science doesn't and if you

00:18:30,950 --> 00:18:35,900
were to only act upon science you would

00:18:33,050 --> 00:18:39,350
have a very limited range of action and

00:18:35,900 --> 00:18:41,450
what you do day to day so it's good to

00:18:39,350 --> 00:18:44,410
be scientifically minded but you have to

00:18:41,450 --> 00:18:47,210
get work done nonetheless so if you say

00:18:44,410 --> 00:18:49,310
this theory that we work from is broken

00:18:47,210 --> 00:18:51,020
and incomplete and it's terrible your

00:18:49,310 --> 00:18:52,610
boss may say yes it's broken and

00:18:51,020 --> 00:18:55,100
incomplete and terrible get back to work

00:18:52,610 --> 00:18:58,310
and that's fine

00:18:55,100 --> 00:19:01,190
all the same I think it's relatively

00:18:58,310 --> 00:19:03,470
important to raise those objective

00:19:01,190 --> 00:19:05,990
objections and when other people raise

00:19:03,470 --> 00:19:08,330
the objections to be supportive a

00:19:05,990 --> 00:19:09,830
interesting example of this not

00:19:08,330 --> 00:19:11,650
happening was when Einstein once

00:19:09,830 --> 00:19:14,840
published a theory of general relativity

00:19:11,650 --> 00:19:17,300
max plunk got an early review copy

00:19:14,840 --> 00:19:19,730
because he was a huge advocate for

00:19:17,300 --> 00:19:22,480
Einstein's first a kind of

00:19:19,730 --> 00:19:24,280
groundbreaking paper and Max

00:19:22,480 --> 00:19:26,710
Punk wrote back and said in the first

00:19:24,280 --> 00:19:29,950
place you won't succeed and even if you

00:19:26,710 --> 00:19:32,860
do no one will believe you which is wild

00:19:29,950 --> 00:19:36,040
considering how impactful the theory of

00:19:32,860 --> 00:19:38,049
general relativity ended up being so we

00:19:36,040 --> 00:19:41,799
should all be a little bit supportive of

00:19:38,049 --> 00:19:43,630
the crazy ideas our co-workers have it's

00:19:41,799 --> 00:19:46,780
possible to be both supportive and

00:19:43,630 --> 00:19:49,809
skeptical and that talk on empathy

00:19:46,780 --> 00:19:55,750
yesterday I think had some good points

00:19:49,809 --> 00:19:57,549
on how to do that and finally the

00:19:55,750 --> 00:19:59,980
process of science this is an

00:19:57,549 --> 00:20:02,470
unscientific thought but I like to

00:19:59,980 --> 00:20:06,130
believe it's about being agitated about

00:20:02,470 --> 00:20:07,480
the models that we build and use so you

00:20:06,130 --> 00:20:10,059
look at all good science it ends up

00:20:07,480 --> 00:20:13,210
getting overturned or proven wrong by

00:20:10,059 --> 00:20:18,460
the generation that comes next so you

00:20:13,210 --> 00:20:22,150
look at people like early psychologists

00:20:18,460 --> 00:20:25,360
Erik Erikson and Carl Jung both studied

00:20:22,150 --> 00:20:27,220
under Freud and both just totally tore

00:20:25,360 --> 00:20:29,290
apart for its theories came up with

00:20:27,220 --> 00:20:32,470
their own or way more accurate way more

00:20:29,290 --> 00:20:35,230
well received that doesn't mean what

00:20:32,470 --> 00:20:37,480
Freud did wasn't worthwhile it was just

00:20:35,230 --> 00:20:40,450
an incomplete model and most science is

00:20:37,480 --> 00:20:42,730
working from incomplete models but we

00:20:40,450 --> 00:20:45,220
are able to progress because we get

00:20:42,730 --> 00:20:47,710
agitated by those incomplete models so

00:20:45,220 --> 00:20:50,110
if there's one recommendation for sort

00:20:47,710 --> 00:20:53,679
of pushing our industry forward it's

00:20:50,110 --> 00:20:55,000
that we should continue to agitate we

00:20:53,679 --> 00:20:57,640
should remind ourselves when we're

00:20:55,000 --> 00:21:00,160
working on knowledge that is not

00:20:57,640 --> 00:21:02,049
scientific and incomplete and we should

00:21:00,160 --> 00:21:06,010
remind those around us that that is

00:21:02,049 --> 00:21:08,500
happening as well and maybe one day that

00:21:06,010 --> 00:21:11,669
theory will get tested or someone will

00:21:08,500 --> 00:21:13,870
do some reading like making software and

00:21:11,669 --> 00:21:16,780
bring that into the office and bring

00:21:13,870 --> 00:21:18,460
some science into your life so before I

00:21:16,780 --> 00:21:21,010
end this I just wanted to say thank you

00:21:18,460 --> 00:21:23,740
to my friend Diane Thompson who is a

00:21:21,010 --> 00:21:26,559
scientist herself and conversations with

00:21:23,740 --> 00:21:28,750
her helped me to formulate some of the

00:21:26,559 --> 00:21:30,610
thoughts behind this talk and she's also

00:21:28,750 --> 00:21:34,240
getting married this weekend in Sweden

00:21:30,610 --> 00:21:35,620
so to Diane it's a you and Marcus I wish

00:21:34,240 --> 00:21:37,870
you happiness and health

00:21:35,620 --> 00:21:42,140
thank you

00:21:37,870 --> 00:21:42,140

YouTube URL: https://www.youtube.com/watch?v=fIUtGkbOl8Y


