Title: #FOSSBack 18: Owen O'Malley â€“ Untangling Spaghetti - When and How to Split Projects
Publication date: 2018-06-21
Playlist: FOSS Backstage 2018
Description: 
	When creating a new system that works with an established project, an important consideration is whether to make a new project or a subproject of the established
project. The considerations include:

- How fast is the release cycle for the established project?
- How tight is the integration with the established project?
- Will the excitement of a new project bring more visibility?
- Is the community separate from the established project?
- Is the new project large enough to be self-sustaining?
- Will tighter integration with the established project be helpful or cause difficulty for integrating with external projects.

We'll cover some of the cases that we made this decision and how they turned out:

- Hadoop and RecordIO
- Hadoop and Avro
- Hive and Tez
- Hive and ORC

After making the decision, as the projects evolve the tradeoffs may change and
need to be revisited. Unfortunately we also have experience and have
pulled apart ORC from Hive and now the metastore from Hive. We'll cover the
technical challenges and the governance challenges of splitting an existing project
into two projects.

Read more:
https://18.foss-backstage.de/session/untangling-spaghetti-when-and-how-split-projects

About Owen O'Malley:
https://18.foss-backstage.de/member/owen-omalley

Website: https://www.foss-backstage.de/
Twitter: https://twitter.com/Fossbckstg
LinkedIn: https://www.linkedin.com/groups/8653059/
Captions: 
	00:00:06,300 --> 00:00:14,019
stop me with questions if you've got

00:00:09,370 --> 00:00:16,299
questions this is for you guys right Who

00:00:14,019 --> 00:00:18,760
am I I've worked on Hadoop for a very

00:00:16,299 --> 00:00:22,539
long time I've been working on it since

00:00:18,760 --> 00:00:25,259
2006 I'm an Apache member I've mentored

00:00:22,539 --> 00:00:32,590
a lot of different Apache projects and

00:00:25,259 --> 00:00:37,920
mostly I work on orc hive and to do okay

00:00:32,590 --> 00:00:40,750
so when I was thinking about this talk I

00:00:37,920 --> 00:00:42,399
wanted to talk about splitting up

00:00:40,750 --> 00:00:44,980
projects and I realized there's actually

00:00:42,399 --> 00:00:46,719
a more fundamental question of oK you've

00:00:44,980 --> 00:00:50,050
developed a new piece of code that works

00:00:46,719 --> 00:00:53,769
with some project where do you start

00:00:50,050 --> 00:00:56,859
that thing do you ask to become a part

00:00:53,769 --> 00:00:59,170
of the big project do you start a new

00:00:56,859 --> 00:01:01,899
project in Apache Incubator Apache

00:00:59,170 --> 00:01:07,240
Incubator of course is where new Apache

00:01:01,899 --> 00:01:09,790
projects go to start up where do you go

00:01:07,240 --> 00:01:15,280
in one of the trade-offs there and what

00:01:09,790 --> 00:01:16,960
if you change your mind later ok so the

00:01:15,280 --> 00:01:20,860
first thing I wanted to talk about is

00:01:16,960 --> 00:01:23,110
the Apache of the life cycle oh by the

00:01:20,860 --> 00:01:26,740
way of course a lot of this applies to a

00:01:23,110 --> 00:01:30,360
lot of open source projects I'm of

00:01:26,740 --> 00:01:33,700
course mostly familiar with the Apache

00:01:30,360 --> 00:01:37,390
methodologies since that's the projects

00:01:33,700 --> 00:01:38,890
I've mostly worked on so people often

00:01:37,390 --> 00:01:41,350
complain that there are too many

00:01:38,890 --> 00:01:43,120
different Apache projects that do the

00:01:41,350 --> 00:01:45,540
same thing right they complain oh

00:01:43,120 --> 00:01:49,570
there's work in there spark' there's

00:01:45,540 --> 00:01:52,450
meso sand yar and there are a lot of

00:01:49,570 --> 00:01:54,730
different pieces and a lot of that comes

00:01:52,450 --> 00:01:58,810
because this is really is an ecosystem

00:01:54,730 --> 00:02:02,710
that we're building and every time that

00:01:58,810 --> 00:02:05,410
there's a need multiple people see oh I

00:02:02,710 --> 00:02:07,750
want to address it like this and so they

00:02:05,410 --> 00:02:09,849
start a new piece of code and that's

00:02:07,750 --> 00:02:12,580
where it comes from

00:02:09,849 --> 00:02:15,940
these projects really are an ecosystem

00:02:12,580 --> 00:02:16,940
and so they're basically fighting each

00:02:15,940 --> 00:02:19,640
other but what

00:02:16,940 --> 00:02:22,370
competing for is community what they

00:02:19,640 --> 00:02:25,340
want people to engage they want users

00:02:22,370 --> 00:02:28,520
they want developers that's what makes

00:02:25,340 --> 00:02:30,710
them live or die but there's also a

00:02:28,520 --> 00:02:32,750
lifecycle for projects when they're

00:02:30,710 --> 00:02:34,730
young they start off very fast and then

00:02:32,750 --> 00:02:36,860
both they can adapt quickly they can

00:02:34,730 --> 00:02:40,220
shoot off and radically different

00:02:36,860 --> 00:02:43,850
directions when environment changes but

00:02:40,220 --> 00:02:46,370
if they grow up then they slow down they

00:02:43,850 --> 00:02:49,880
start valuing compatibility more than

00:02:46,370 --> 00:02:53,210
new features and eventually the the

00:02:49,880 --> 00:02:55,910
releases stop the bicycle of course is

00:02:53,210 --> 00:02:58,220
on there because open-source projects

00:02:55,910 --> 00:03:00,320
are very much like a bicycle if you

00:02:58,220 --> 00:03:06,800
aren't moving forward you're about to

00:03:00,320 --> 00:03:11,840
fall over and stop making progress okay

00:03:06,800 --> 00:03:16,310
so if often people's first inclination

00:03:11,840 --> 00:03:17,840
is to join an established project there

00:03:16,310 --> 00:03:20,000
are some advantages to that you get

00:03:17,840 --> 00:03:21,380
instant name recognition right you're

00:03:20,000 --> 00:03:25,100
like oh you're part of the Hadoop

00:03:21,380 --> 00:03:27,170
project that's great it can get you a

00:03:25,100 --> 00:03:31,090
large installed base because you'll get

00:03:27,170 --> 00:03:34,730
installed along with all of Hadoop and

00:03:31,090 --> 00:03:37,550
you get a much easier way to integrate

00:03:34,730 --> 00:03:39,290
with the code bases there are some

00:03:37,550 --> 00:03:41,630
downsides however in particular you have

00:03:39,290 --> 00:03:46,790
to wait to become committers because of

00:03:41,630 --> 00:03:50,120
course Apache is all about showing that

00:03:46,790 --> 00:03:52,730
you've done good work to become a

00:03:50,120 --> 00:03:54,560
committer and so you don't become a

00:03:52,730 --> 00:03:56,540
committer instantly especially on the

00:03:54,560 --> 00:03:58,610
large projects actually the large

00:03:56,540 --> 00:04:00,980
projects are notorious for requiring

00:03:58,610 --> 00:04:03,800
higher and higher bars as they get

00:04:00,980 --> 00:04:05,450
bigger and older and actually the

00:04:03,800 --> 00:04:07,880
biggest projects are the hardest ones to

00:04:05,450 --> 00:04:09,890
become committers in but even more

00:04:07,880 --> 00:04:13,160
importantly you tie yourself to their

00:04:09,890 --> 00:04:15,260
release cycle this is really really a

00:04:13,160 --> 00:04:17,810
huge problem because then all of a

00:04:15,260 --> 00:04:20,150
sudden instead of being able to release

00:04:17,810 --> 00:04:22,550
once every month or once every three

00:04:20,150 --> 00:04:25,479
months now you you're going once a year

00:04:22,550 --> 00:04:30,340
between releases right Hadoop and hive

00:04:25,479 --> 00:04:32,410
can easily go a year or two between

00:04:30,340 --> 00:04:36,070
new minor releases never mind major

00:04:32,410 --> 00:04:38,740
releases and so that becomes a problem

00:04:36,070 --> 00:04:41,139
obviously the pictures from Indiana

00:04:38,740 --> 00:04:47,229
Jones because he's about to merge with

00:04:41,139 --> 00:04:52,000
that Boulder now one of the examples of

00:04:47,229 --> 00:04:54,310
this was a little project called Hadoop

00:04:52,000 --> 00:04:57,010
record IO it was an early serialization

00:04:54,310 --> 00:05:00,220
library that implemented Hadoop's

00:04:57,010 --> 00:05:03,070
rideable classes for you this put int I

00:05:00,220 --> 00:05:04,419
do and no one ever made very much noise

00:05:03,070 --> 00:05:08,200
about it

00:05:04,419 --> 00:05:09,580
so basically everyone has it almost no

00:05:08,200 --> 00:05:14,080
one knows it's there it's been

00:05:09,580 --> 00:05:15,639
deprecated for however many years but we

00:05:14,080 --> 00:05:18,130
can't delete it because when we tried

00:05:15,639 --> 00:05:20,229
the uses there were some users and they

00:05:18,130 --> 00:05:22,000
started screaming at us please don't

00:05:20,229 --> 00:05:23,950
delete that we use it in production all

00:05:22,000 --> 00:05:24,250
the time and all our data is written in

00:05:23,950 --> 00:05:33,039
it

00:05:24,250 --> 00:05:37,270
so another example comes from hive we

00:05:33,039 --> 00:05:39,130
just a few years ago started the lapl ap

00:05:37,270 --> 00:05:40,720
stands for a live long and process of

00:05:39,130 --> 00:05:45,840
course it's the take off on live long

00:05:40,720 --> 00:05:49,389
and prosper but yeah our marketing team

00:05:45,840 --> 00:05:52,930
very unhappy with us they were like what

00:05:49,389 --> 00:05:55,599
the hell are you doing calling it but

00:05:52,930 --> 00:05:59,740
that's why engineers get to pick the

00:05:55,599 --> 00:06:01,810
names and not marketing team so it does

00:05:59,740 --> 00:06:04,960
a lot of cool things that basically as

00:06:01,810 --> 00:06:07,000
long living demons that can run hive

00:06:04,960 --> 00:06:10,630
queries and basically turns it into a

00:06:07,000 --> 00:06:12,310
distributed database it avoids the JDK

00:06:10,630 --> 00:06:13,990
startup cost because I don't know if you

00:06:12,310 --> 00:06:19,419
know this but every time we started a

00:06:13,990 --> 00:06:20,950
new JDK it it takes at least a second

00:06:19,419 --> 00:06:25,300
before it starts running very quickly

00:06:20,950 --> 00:06:29,289
and it'll cash the hot data in memory so

00:06:25,300 --> 00:06:32,740
the biggest thing here was that it was

00:06:29,289 --> 00:06:35,110
really just part of the hive community

00:06:32,740 --> 00:06:38,139
it was the hive community doing it it

00:06:35,110 --> 00:06:40,810
had a really tightly integrated code

00:06:38,139 --> 00:06:43,290
base and so we decided okay we're just

00:06:40,810 --> 00:06:47,370
going to put that into

00:06:43,290 --> 00:06:50,250
the project itself okay separate but

00:06:47,370 --> 00:06:52,470
together now one of the pieces that

00:06:50,250 --> 00:06:54,030
people don't often realize is that there

00:06:52,470 --> 00:06:56,390
is actually a third option

00:06:54,030 --> 00:06:59,640
Apache projects can have multiple

00:06:56,390 --> 00:07:02,820
releasable sub projects which Apache

00:06:59,640 --> 00:07:04,890
Commons is the canonical example it

00:07:02,820 --> 00:07:06,620
allows for separate release trains and

00:07:04,890 --> 00:07:09,270
bug tracking and source version control

00:07:06,620 --> 00:07:11,760
so there the question you really have to

00:07:09,270 --> 00:07:17,130
ask yourself is do the two communities

00:07:11,760 --> 00:07:19,460
overlap significantly we actually did

00:07:17,130 --> 00:07:24,210
this there's a new project coming out of

00:07:19,460 --> 00:07:26,490
HDFS team called Hadoop ozone and it's a

00:07:24,210 --> 00:07:29,720
basically a distributed key-value store

00:07:26,490 --> 00:07:33,750
it's got overlapping communities it

00:07:29,720 --> 00:07:35,790
integrates well with HDFS although in

00:07:33,750 --> 00:07:37,680
that case it actually isn't integrated

00:07:35,790 --> 00:07:40,740
tightly with HDFS they originally

00:07:37,680 --> 00:07:44,190
designed it that way and HDFS committers

00:07:40,740 --> 00:07:46,500
pushed back strongly and said no don't

00:07:44,190 --> 00:07:48,450
just destabilize our project by putting

00:07:46,500 --> 00:07:52,260
your code in here even if it's

00:07:48,450 --> 00:07:54,750
configured off we don't want to debug

00:07:52,260 --> 00:07:59,580
your code because it's messing up our

00:07:54,750 --> 00:08:01,500
code but it needed faster releases than

00:07:59,580 --> 00:08:03,470
I do so actually I worked with them and

00:08:01,500 --> 00:08:07,400
this convinced them to make a

00:08:03,470 --> 00:08:10,230
independently releasable sub project and

00:08:07,400 --> 00:08:12,330
so they're actually going to make their

00:08:10,230 --> 00:08:16,200
own release train so that instead of

00:08:12,330 --> 00:08:21,480
waiting until Hadoop 3 - they can

00:08:16,200 --> 00:08:23,220
release immediately another advantage of

00:08:21,480 --> 00:08:27,480
course is that that'll allow them to

00:08:23,220 --> 00:08:29,760
work with the older Hadoop versions ok

00:08:27,480 --> 00:08:32,430
and finally there's starting a new

00:08:29,760 --> 00:08:35,310
project that lets you control your own

00:08:32,430 --> 00:08:36,960
life cycle in terms of releases you get

00:08:35,310 --> 00:08:41,280
the excitement of a new project you get

00:08:36,960 --> 00:08:43,500
to go out and evangelize and you have to

00:08:41,280 --> 00:08:46,860
address the integration immediately

00:08:43,500 --> 00:08:48,390
right so you have to say early on this

00:08:46,860 --> 00:08:51,900
is how we're integrating we're going to

00:08:48,390 --> 00:08:56,520
consider these interfaces and how to

00:08:51,900 --> 00:08:57,160
deal with that and the one thing you do

00:08:56,520 --> 00:08:59,740
need to consume

00:08:57,160 --> 00:09:01,839
though is in the long term will your

00:08:59,740 --> 00:09:04,810
development community be big enough to

00:09:01,839 --> 00:09:07,930
actually survive you see this with some

00:09:04,810 --> 00:09:12,569
older projects where they actually have

00:09:07,930 --> 00:09:14,709
a part time getting three vote voters to

00:09:12,569 --> 00:09:20,610
validate a release so they can actually

00:09:14,709 --> 00:09:26,589
make a release AMRO was a project that

00:09:20,610 --> 00:09:30,069
started back in 2010 and it's a

00:09:26,589 --> 00:09:33,370
serialization library it started as an

00:09:30,069 --> 00:09:35,230
independent project it which allowed it

00:09:33,370 --> 00:09:36,819
to do frequent release cycles and they

00:09:35,230 --> 00:09:38,139
picked up a lot of projects outside of

00:09:36,819 --> 00:09:41,019
Hadoop so this was actually a really

00:09:38,139 --> 00:09:43,360
good use case for having a separate

00:09:41,019 --> 00:09:45,550
project the one challenge of course is

00:09:43,360 --> 00:09:47,980
that there was a really complicated

00:09:45,550 --> 00:09:52,120
dependency tree for Hadoop and only

00:09:47,980 --> 00:09:53,680
really stabilized once Hadoop and Avro

00:09:52,120 --> 00:09:55,779
both got stable enough that those

00:09:53,680 --> 00:09:57,370
interfaces stopped changing when they

00:09:55,779 --> 00:10:02,079
were both changing and made a complete

00:09:57,370 --> 00:10:06,459
mess because on the other hand was an

00:10:02,079 --> 00:10:08,290
execution engine we did four hive it was

00:10:06,459 --> 00:10:09,759
a replacement for the old MapReduce so

00:10:08,290 --> 00:10:11,889
we like okay well it started as a

00:10:09,759 --> 00:10:13,449
separate project that actually was a

00:10:11,889 --> 00:10:14,709
pretty bad call because there's

00:10:13,449 --> 00:10:17,019
basically a one-to-one correspondence

00:10:14,709 --> 00:10:19,389
between each version of hive to a

00:10:17,019 --> 00:10:21,699
version of Taz so they're releasing at

00:10:19,389 --> 00:10:23,949
the same time and they're pretty tightly

00:10:21,699 --> 00:10:27,130
integrated and actually it's a lot of

00:10:23,949 --> 00:10:32,800
the same people working on both so we

00:10:27,130 --> 00:10:34,540
could have done better there okay when

00:10:32,800 --> 00:10:37,240
we were originally coding the the work

00:10:34,540 --> 00:10:40,089
project we considered where to put it

00:10:37,240 --> 00:10:42,339
however during the decision we were

00:10:40,089 --> 00:10:47,439
watching the the hive list and we saw

00:10:42,339 --> 00:10:51,490
that another format was trying to get

00:10:47,439 --> 00:10:53,379
hive bindings into hive and the hive

00:10:51,490 --> 00:10:55,269
community pushed back in particular one

00:10:53,379 --> 00:10:57,819
particular developer was like no we

00:10:55,269 --> 00:11:01,240
don't need another file format go away

00:10:57,819 --> 00:11:02,500
and we're like oh we've got this

00:11:01,240 --> 00:11:04,470
file format what we've been working on

00:11:02,500 --> 00:11:06,939
we really want to integrate it with hive

00:11:04,470 --> 00:11:09,370
that's not good

00:11:06,939 --> 00:11:12,100
so we renamed it

00:11:09,370 --> 00:11:13,630
to ork because it's optimized our see

00:11:12,100 --> 00:11:16,630
file and the guy who was complaining was

00:11:13,630 --> 00:11:20,170
the guy who wrote our see file and we

00:11:16,630 --> 00:11:23,100
decided to become part of hive and that

00:11:20,170 --> 00:11:28,630
helped the hive work integration a lot

00:11:23,100 --> 00:11:31,330
however work being inside of hive was

00:11:28,630 --> 00:11:34,330
really hurting adoption other projects

00:11:31,330 --> 00:11:35,980
didn't want to pick up work because that

00:11:34,330 --> 00:11:39,880
meant they had to pick up all of the

00:11:35,980 --> 00:11:43,450
classes of hive as a dependency it was

00:11:39,880 --> 00:11:46,650
viewed as only useful for hive and part

00:11:43,450 --> 00:11:51,250
of the other piece was that projects

00:11:46,650 --> 00:11:53,050
viewed Orcas being so tied to hive that

00:11:51,250 --> 00:11:54,820
other projects needs wouldn't be taken

00:11:53,050 --> 00:11:58,150
seriously and that kind of naturally

00:11:54,820 --> 00:12:00,510
happens when you start looking at other

00:11:58,150 --> 00:12:02,890
projects and okay what do they need

00:12:00,510 --> 00:12:04,870
you're less likely to contain it

00:12:02,890 --> 00:12:08,920
seriously if you're buried inside of a

00:12:04,870 --> 00:12:11,650
big project another problem was that we

00:12:08,920 --> 00:12:14,230
had some new C++ code that C++ code was

00:12:11,650 --> 00:12:17,050
coming in and had its own set of

00:12:14,230 --> 00:12:20,020
committers and we wanted to keep the two

00:12:17,050 --> 00:12:22,060
code bases together and hive doesn't

00:12:20,020 --> 00:12:24,279
have any C++ and so that wasn't a good

00:12:22,060 --> 00:12:29,520
match and we wanted to release more

00:12:24,279 --> 00:12:31,959
often so we decided to split it out and

00:12:29,520 --> 00:12:34,870
in spite of all my learnings about how

00:12:31,959 --> 00:12:36,490
hard it was now my coworker is doing the

00:12:34,870 --> 00:12:38,709
same thing with the hive meta store for

00:12:36,490 --> 00:12:40,810
almost exactly the same reasons in

00:12:38,709 --> 00:12:44,650
particular he wants to boost adoption by

00:12:40,810 --> 00:12:47,339
other projects okay so what did we do

00:12:44,650 --> 00:12:50,890
the first thing that you need to do is

00:12:47,339 --> 00:12:52,540
make a module of the code and you need

00:12:50,890 --> 00:12:55,600
to decide whether you're at the top or

00:12:52,540 --> 00:12:57,580
the bottom of the dependency tree make

00:12:55,600 --> 00:13:00,330
heavy use of interfaces and plugins and

00:12:57,580 --> 00:13:03,279
minimize the amount of code duplication

00:13:00,330 --> 00:13:14,500
however with orc we were in the middle

00:13:03,279 --> 00:13:18,040
and that kind of sucks so so orc

00:13:14,500 --> 00:13:22,070
depended on 16,000 classes that's

00:13:18,040 --> 00:13:26,570
excluding all of Hadoop and protobuf

00:13:22,070 --> 00:13:28,339
and so I took a shot Abbot and failed

00:13:26,570 --> 00:13:32,089
someone else took a shot at it and

00:13:28,339 --> 00:13:34,579
failed basically things were just too

00:13:32,089 --> 00:13:37,250
tangled up so we actually built some

00:13:34,579 --> 00:13:40,550
tooling to help us and in particular it

00:13:37,250 --> 00:13:43,670
used one of the dependency analyzers to

00:13:40,550 --> 00:13:46,160
figure out which classes depend on which

00:13:43,670 --> 00:13:48,139
club which other classes and so it

00:13:46,160 --> 00:13:50,810
started from the root of the work

00:13:48,139 --> 00:13:53,839
classes excluded all the Java had you've

00:13:50,810 --> 00:13:56,360
been put above and then produced a

00:13:53,839 --> 00:13:59,959
dependency graph they told us what

00:13:56,360 --> 00:14:01,579
things were depending on now just doing

00:13:59,959 --> 00:14:03,860
that of course the sixteen thousand was

00:14:01,579 --> 00:14:07,040
a huge list and hard to work through so

00:14:03,860 --> 00:14:09,050
what we did was we sorted that list by

00:14:07,040 --> 00:14:12,610
the distance they were away from the orc

00:14:09,050 --> 00:14:15,620
classes and then the second key was how

00:14:12,610 --> 00:14:18,380
many classes they transitively depended

00:14:15,620 --> 00:14:20,720
on that actually helped us really focus

00:14:18,380 --> 00:14:23,449
the our attention on the the most

00:14:20,720 --> 00:14:29,660
problematic classes and work forward

00:14:23,449 --> 00:14:31,639
from there now part of that was we had

00:14:29,660 --> 00:14:35,630
to define some new api's in particular

00:14:31,639 --> 00:14:37,160
orc had used object hives object

00:14:35,630 --> 00:14:40,459
inspectors which was easy because we

00:14:37,160 --> 00:14:43,069
were in the middle of hive but hives

00:14:40,459 --> 00:14:47,240
object inspectors had a huge dependency

00:14:43,069 --> 00:14:51,800
set downstream and so we had to remove

00:14:47,240 --> 00:14:56,149
that now fortunately we had also put in

00:14:51,800 --> 00:15:00,050
fast vectorized methods vectorize in

00:14:56,149 --> 00:15:02,060
this case or method or the ability to

00:15:00,050 --> 00:15:06,410
process batches of a thousand rows at

00:15:02,060 --> 00:15:08,660
once instead of row by row so we decided

00:15:06,410 --> 00:15:13,459
okay we can get rid of all the object

00:15:08,660 --> 00:15:16,100
inspector methods just leave the the

00:15:13,459 --> 00:15:18,199
vectorized methods and then put it in

00:15:16,100 --> 00:15:23,899
too high of a compatibility layer so

00:15:18,199 --> 00:15:27,500
that if told users wouldn't break okay

00:15:23,899 --> 00:15:31,190
so that comets down to around 40 classes

00:15:27,500 --> 00:15:34,020
or so that was

00:15:31,190 --> 00:15:35,399
those 40 classes were actually critical

00:15:34,020 --> 00:15:36,810
for high if we couldn't just pulled them

00:15:35,399 --> 00:15:39,480
into orc because there were things like

00:15:36,810 --> 00:15:42,450
the internal memory representation that

00:15:39,480 --> 00:15:44,190
hive uses when its processing so no one

00:15:42,450 --> 00:15:48,420
would be very happy if we pulled those

00:15:44,190 --> 00:15:51,630
into it a different project we created a

00:15:48,420 --> 00:15:54,390
sub project called storage API and that

00:15:51,630 --> 00:15:58,520
releases the rest independently of hive

00:15:54,390 --> 00:16:01,440
so we can release it more often we can

00:15:58,520 --> 00:16:04,500
it has its own branches the current

00:16:01,440 --> 00:16:09,209
storage API version is 261 while hive is

00:16:04,500 --> 00:16:10,980
3.0 0 it was a little confusing while

00:16:09,209 --> 00:16:14,970
they were exactly for a while they were

00:16:10,980 --> 00:16:19,050
exactly 1 off of each other so Hadoop or

00:16:14,970 --> 00:16:24,390
sorry hive 2 3 uses storage API 2 for

00:16:19,050 --> 00:16:27,029
which confuse some people ok so after

00:16:24,390 --> 00:16:30,540
you get your project done and split

00:16:27,029 --> 00:16:34,440
apart into that separate module now you

00:16:30,540 --> 00:16:38,459
can actually copy that code to a new

00:16:34,440 --> 00:16:43,680
code repository and renamed the the

00:16:38,459 --> 00:16:47,399
projects actually in work we screwed

00:16:43,680 --> 00:16:49,950
this up we renamed the packages well was

00:16:47,399 --> 00:16:51,750
still in hive and that was a huge

00:16:49,950 --> 00:16:54,360
mistake because then we ended up with

00:16:51,750 --> 00:16:59,550
compatibility issues as we released the

00:16:54,360 --> 00:17:01,860
code then the new project needs to make

00:16:59,550 --> 00:17:05,280
a release of the code and the old

00:17:01,860 --> 00:17:17,579
project needs to come in and make the

00:17:05,280 --> 00:17:19,050
switch now for something history this is

00:17:17,579 --> 00:17:21,000
the first time we've tried to split up a

00:17:19,050 --> 00:17:24,929
project 10 years ago we tried to split

00:17:21,000 --> 00:17:27,300
up Hadoop into 3 distinct pieces common

00:17:24,929 --> 00:17:30,830
HDFS and MapReduce of course now you'd

00:17:27,300 --> 00:17:33,540
throw yarn into that list as well

00:17:30,830 --> 00:17:34,740
but part of what we screwed up is we

00:17:33,540 --> 00:17:36,780
weren't paying attention to the

00:17:34,740 --> 00:17:39,000
communities yeah those made sense from a

00:17:36,780 --> 00:17:41,700
technical point of view but there was

00:17:39,000 --> 00:17:44,250
actually no community for common right

00:17:41,700 --> 00:17:46,470
people were either HDFS devs or map

00:17:44,250 --> 00:17:48,990
new stoves there were a few of us that

00:17:46,470 --> 00:17:52,020
did both but but there was no one that

00:17:48,990 --> 00:17:54,780
was felt like they were a common

00:17:52,020 --> 00:17:57,150
developer and so we actually I think

00:17:54,780 --> 00:17:59,610
would have been better off keeping it

00:17:57,150 --> 00:18:01,770
just as to where we had HDFS and

00:17:59,610 --> 00:18:05,280
MapReduce and the common stuff was just

00:18:01,770 --> 00:18:11,250
in HDFS that would also cut down the

00:18:05,280 --> 00:18:14,250
number of cross project dependencies we

00:18:11,250 --> 00:18:17,820
were also using Anton IV which made that

00:18:14,250 --> 00:18:21,210
hard IV would pull down the the jars

00:18:17,820 --> 00:18:24,110
that you needed but it was a lot less

00:18:21,210 --> 00:18:28,110
straightforward to publish those doors

00:18:24,110 --> 00:18:32,460
compared to using maven and so it made

00:18:28,110 --> 00:18:38,580
the cross project code relatively hard

00:18:32,460 --> 00:18:41,340
and made it so basically it was hard to

00:18:38,580 --> 00:18:46,560
release this way and our failure of

00:18:41,340 --> 00:18:47,670
adequately planning made it worse and so

00:18:46,560 --> 00:18:50,310
we split it apart

00:18:47,670 --> 00:18:54,210
okay separate code repos separate jiriz

00:18:50,310 --> 00:18:56,160
everything and then a few years later we

00:18:54,210 --> 00:18:59,880
pulled them back together because it was

00:18:56,160 --> 00:19:02,820
just not working for us and so we put it

00:18:59,880 --> 00:19:06,570
back together but as a result of all

00:19:02,820 --> 00:19:07,950
this because yarn wasn't ready yet and

00:19:06,570 --> 00:19:11,670
Hadoop is something that only makes

00:19:07,950 --> 00:19:14,250
sense to release at scale then you ended

00:19:11,670 --> 00:19:18,810
up we ended up blocking the HDFS

00:19:14,250 --> 00:19:22,050
released for a few years with waiting

00:19:18,810 --> 00:19:28,650
for yarn to get releasable and that was

00:19:22,050 --> 00:19:33,150
pretty uncool actually okay so I had a

00:19:28,650 --> 00:19:36,750
boss at one point who was aware of

00:19:33,150 --> 00:19:39,480
Apache and didn't always get the finer

00:19:36,750 --> 00:19:41,670
nuances and so one of his favorite plans

00:19:39,480 --> 00:19:43,440
at one point was oh we can split apart

00:19:41,670 --> 00:19:46,140
this project and we'll just take the

00:19:43,440 --> 00:19:48,030
committers that worked on this codebase

00:19:46,140 --> 00:19:49,800
and that'll be great because there's

00:19:48,030 --> 00:19:52,710
only good guys on this list and none of

00:19:49,800 --> 00:19:55,650
the bozos over there that doesn't work

00:19:52,710 --> 00:19:57,840
at Apache at least there's just no way

00:19:55,650 --> 00:20:00,330
to pull that off

00:19:57,840 --> 00:20:02,850
what always always happens is that you

00:20:00,330 --> 00:20:04,740
end up giving everyone who has commit

00:20:02,850 --> 00:20:07,580
bits before you pull them out the commit

00:20:04,740 --> 00:20:10,559
bit after the after you pull it out and

00:20:07,580 --> 00:20:15,929
so you end up with a lot of people who

00:20:10,559 --> 00:20:17,970
haven't worked on the code with commit

00:20:15,929 --> 00:20:20,730
bits and actually I thought we were

00:20:17,970 --> 00:20:25,350
mostly going to avoid that with orc but

00:20:20,730 --> 00:20:28,020
even there the people were fighting to

00:20:25,350 --> 00:20:30,210
be committers and so we ended up just

00:20:28,020 --> 00:20:32,460
saying fine if you're a committer on

00:20:30,210 --> 00:20:34,140
hive at that point then you can

00:20:32,460 --> 00:20:38,100
automatically become a committer on on

00:20:34,140 --> 00:20:40,110
orc and so that when we split at least

00:20:38,100 --> 00:20:43,470
half of the committers on orc had no

00:20:40,110 --> 00:20:45,360
patches and the code ace which is kind

00:20:43,470 --> 00:20:47,429
of a strange place to be it also means

00:20:45,360 --> 00:20:49,049
that work has a large number of

00:20:47,429 --> 00:20:56,130
committers relative to its code base

00:20:49,049 --> 00:20:58,860
size however what you can do is start

00:20:56,130 --> 00:21:03,330
aggressively recruiting right you will

00:20:58,860 --> 00:21:05,730
need to go out and talk about your

00:21:03,330 --> 00:21:09,090
project talk about what it why it's good

00:21:05,730 --> 00:21:12,000
why people should be using it and you

00:21:09,090 --> 00:21:13,950
need to accept that and you need to be

00:21:12,000 --> 00:21:15,990
welcome and friendly like I said part of

00:21:13,950 --> 00:21:18,029
the challenge is that large projects

00:21:15,990 --> 00:21:21,929
will often be hard to become a committer

00:21:18,029 --> 00:21:23,880
well on small projects you often put the

00:21:21,929 --> 00:21:25,770
commit bar very low because you're

00:21:23,880 --> 00:21:27,570
trying to encourage people right and

00:21:25,770 --> 00:21:30,720
people get very encouraged when they

00:21:27,570 --> 00:21:33,659
become a committer after putting in some

00:21:30,720 --> 00:21:36,470
patches and and you want to be welcome

00:21:33,659 --> 00:21:36,470
and friendly and

00:21:39,380 --> 00:21:46,850
okay so large open-source projects this

00:21:44,809 --> 00:21:48,980
isn't obvious until you've lived it but

00:21:46,850 --> 00:21:53,809
large open-source projects become very

00:21:48,980 --> 00:21:56,570
very political especially I can always

00:21:53,809 --> 00:21:59,990
talk about Apache projects Apache

00:21:56,570 --> 00:22:01,669
projects because they're democracies all

00:21:59,990 --> 00:22:04,640
right act like democracies everywhere

00:22:01,669 --> 00:22:06,200
and so there gets to be a lot of okay we

00:22:04,640 --> 00:22:12,110
need to be nice to that person so that

00:22:06,200 --> 00:22:14,059
they vote with us on that and it means

00:22:12,110 --> 00:22:16,190
that you're become very very aware of it

00:22:14,059 --> 00:22:19,580
for small projects that fortunately just

00:22:16,190 --> 00:22:21,440
goes away right you can just be focused

00:22:19,580 --> 00:22:23,270
on your project focus on your community

00:22:21,440 --> 00:22:27,260
and I've got to say that it's been a

00:22:23,270 --> 00:22:29,840
really nice change faster builds right

00:22:27,260 --> 00:22:32,659
ork builds in a few minutes instead of

00:22:29,840 --> 00:22:37,220
hours actually it's close to 24 hours I

00:22:32,659 --> 00:22:41,270
think to do a build of hive and get all

00:22:37,220 --> 00:22:45,169
the unit tests passing well you get that

00:22:41,270 --> 00:22:48,080
unit test run if you get them built and

00:22:45,169 --> 00:22:52,549
passing takes much longer faster release

00:22:48,080 --> 00:22:55,010
cycle it takes months to get a hive

00:22:52,549 --> 00:22:57,980
release out the door right to go from oh

00:22:55,010 --> 00:23:01,460
we should start making a branch to make

00:22:57,980 --> 00:23:04,419
a release it takes months yeah I can

00:23:01,460 --> 00:23:09,679
roll orc release in a matter of days

00:23:04,419 --> 00:23:12,230
actually one day and so that means that

00:23:09,679 --> 00:23:15,200
you can make you can make release as

00:23:12,230 --> 00:23:18,200
much more care quickly and be much more

00:23:15,200 --> 00:23:19,820
responsive to your users now granted

00:23:18,200 --> 00:23:21,260
it's a smaller community so you need to

00:23:19,820 --> 00:23:23,390
pay attention hey we haven't at least

00:23:21,260 --> 00:23:26,390
for a while we should do that but

00:23:23,390 --> 00:23:27,860
eventually the users will say hey you've

00:23:26,390 --> 00:23:29,990
got those great features over there can

00:23:27,860 --> 00:23:32,600
we get a release and then and that'll

00:23:29,990 --> 00:23:34,940
come up it's much easier for newcomers

00:23:32,600 --> 00:23:37,039
to pick up code when we split out the

00:23:34,940 --> 00:23:38,270
first thing I noticed was people were

00:23:37,039 --> 00:23:40,400
coming in with these little small

00:23:38,270 --> 00:23:42,590
patches that did interesting things that

00:23:40,400 --> 00:23:44,480
would have never come and touched it if

00:23:42,590 --> 00:23:46,880
it was buried in the North hive because

00:23:44,480 --> 00:23:50,059
changing hive is scary right you're like

00:23:46,880 --> 00:23:52,130
oh what did I break but changing

00:23:50,059 --> 00:23:52,610
orc you've got a much smaller code base

00:23:52,130 --> 00:23:54,559
with

00:23:52,610 --> 00:23:57,530
set of unit tests that test things out

00:23:54,559 --> 00:24:00,920
and so you're much more confident making

00:23:57,530 --> 00:24:03,170
changes and you end up spending a lot

00:24:00,920 --> 00:24:06,830
more time on outreach and documentation

00:24:03,170 --> 00:24:08,270
right although it feels really good

00:24:06,830 --> 00:24:10,670
anytime someone says oh that work

00:24:08,270 --> 00:24:13,790
website is so good compared to the hive

00:24:10,670 --> 00:24:15,530
website I'm like thank you so it would

00:24:13,790 --> 00:24:17,059
be a good investment anyway but it's

00:24:15,530 --> 00:24:19,580
definitely one of the things that comes

00:24:17,059 --> 00:24:21,980
up okay

00:24:19,580 --> 00:24:23,630
challenges of small projects especially

00:24:21,980 --> 00:24:28,250
in this split out backwards

00:24:23,630 --> 00:24:30,440
compatibility is crucial right you have

00:24:28,250 --> 00:24:33,799
because now those changes are going

00:24:30,440 --> 00:24:38,450
across projects and especially with

00:24:33,799 --> 00:24:40,760
storage API we really really need to

00:24:38,450 --> 00:24:43,580
make sure that we don't break backwards

00:24:40,760 --> 00:24:47,690
compatibility another of the challenges

00:24:43,580 --> 00:24:49,640
is that at least right now - work are

00:24:47,690 --> 00:24:52,360
actually really good tests for each

00:24:49,640 --> 00:24:56,000
other and so anytime storage API

00:24:52,360 --> 00:24:57,950
releases I don't actually plus one until

00:24:56,000 --> 00:25:00,770
I've made and work release based on that

00:24:57,950 --> 00:25:03,650
and often I'll check with the older

00:25:00,770 --> 00:25:09,160
versions of work to make sure that they

00:25:03,650 --> 00:25:11,750
haven't introduced API breakages and

00:25:09,160 --> 00:25:13,820
correspondingly ork releases are tested

00:25:11,750 --> 00:25:16,340
with hive that one we actually screwed

00:25:13,820 --> 00:25:19,640
up recently which is embarrassing we

00:25:16,340 --> 00:25:22,460
didn't one-five-zero broke hive and so

00:25:19,640 --> 00:25:26,630
we needed to release one five one like

00:25:22,460 --> 00:25:30,440
two days later but but it's good to have

00:25:26,630 --> 00:25:33,110
the extra tests and cross project

00:25:30,440 --> 00:25:35,299
changes require extra work so if we make

00:25:33,110 --> 00:25:37,100
a change to storage API that is going to

00:25:35,299 --> 00:25:39,669
affect work then we need to make three

00:25:37,100 --> 00:25:44,419
releases right will you make storage API

00:25:39,669 --> 00:25:46,760
release orc release and then a hive

00:25:44,419 --> 00:25:49,520
release to get the flow all the way

00:25:46,760 --> 00:25:53,900
through now that doesn't reduce some

00:25:49,520 --> 00:25:55,850
delay Apache projects typically used 72

00:25:53,900 --> 00:26:00,500
hours for a vote although in practice

00:25:55,850 --> 00:26:03,230
we've run there's a one release or we

00:26:00,500 --> 00:26:05,570
made storage API release and an orc

00:26:03,230 --> 00:26:06,560
release concurrently so basically we

00:26:05,570 --> 00:26:09,140
started the

00:26:06,560 --> 00:26:14,210
at the same time and then they finished

00:26:09,140 --> 00:26:16,160
72 hours later so actually that it

00:26:14,210 --> 00:26:19,060
doesn't necessarily introduce extra

00:26:16,160 --> 00:26:22,220
latency it just means there's extra work

00:26:19,060 --> 00:26:24,170
okay so some final conclusions your

00:26:22,220 --> 00:26:26,480
first priority has to be the community

00:26:24,170 --> 00:26:28,820
right when you're deciding where to put

00:26:26,480 --> 00:26:30,230
this thing think about who the people

00:26:28,820 --> 00:26:31,940
are gonna be working on it who are the

00:26:30,230 --> 00:26:35,120
people who are going to be using it that

00:26:31,940 --> 00:26:37,130
has to be your first consideration all

00:26:35,120 --> 00:26:39,740
the times we've made the right call it's

00:26:37,130 --> 00:26:41,690
been about the community now as we said

00:26:39,740 --> 00:26:43,490
we also have you have to think about the

00:26:41,690 --> 00:26:45,860
size of the community if it's a to a

00:26:43,490 --> 00:26:47,780
small project then it'll be really hard

00:26:45,860 --> 00:26:49,160
to get those three plus ones you need to

00:26:47,780 --> 00:26:51,140
make a release and that becomes a

00:26:49,160 --> 00:26:53,240
problem and you're trying to get the

00:26:51,140 --> 00:26:57,590
project to this point where people just

00:26:53,240 --> 00:27:00,140
start contributing and so that you reach

00:26:57,590 --> 00:27:03,560
critical mass and you start get patches

00:27:00,140 --> 00:27:05,060
flowing in you also have to consider how

00:27:03,560 --> 00:27:07,430
tight the integration is going to be

00:27:05,060 --> 00:27:10,240
good tight integration has good

00:27:07,430 --> 00:27:13,700
properties and bad properties although

00:27:10,240 --> 00:27:15,530
after spending too many months

00:27:13,700 --> 00:27:19,010
separating work out I can definitely see

00:27:15,530 --> 00:27:21,110
the bad properties and consider the

00:27:19,010 --> 00:27:25,190
tools that are available right if you

00:27:21,110 --> 00:27:26,930
have maven that's good C++ your tools

00:27:25,190 --> 00:27:28,760
are much more limited for dependency

00:27:26,930 --> 00:27:32,330
management and so that becomes a lot

00:27:28,760 --> 00:27:34,430
more problematic and finally don't worry

00:27:32,330 --> 00:27:37,010
if you make if you decide you messed up

00:27:34,430 --> 00:27:39,080
and you need to change things or the

00:27:37,010 --> 00:27:44,500
environment change you can always change

00:27:39,080 --> 00:27:44,500
your mind okay any questions

00:27:49,630 --> 00:27:58,929
yeah Thank You Owen so are any questions

00:27:53,410 --> 00:28:01,830
well I have one yeah how do you avoid

00:27:58,929 --> 00:28:04,120
politics and what are the key signs

00:28:01,830 --> 00:28:08,289
suddenly it's a question of politics in

00:28:04,120 --> 00:28:13,210
it about code so how do you avoid

00:28:08,289 --> 00:28:14,830
politics to be fair there's I haven't

00:28:13,210 --> 00:28:17,049
found a good way of avoiding politics

00:28:14,830 --> 00:28:19,630
and in the large projects right working

00:28:17,049 --> 00:28:22,299
on making smaller projects out of the

00:28:19,630 --> 00:28:26,350
bigger projects actually does help a lot

00:28:22,299 --> 00:28:30,100
because you've made the the pool that

00:28:26,350 --> 00:28:33,190
you're fighting over much smaller where

00:28:30,100 --> 00:28:35,700
if you have a very large project than

00:28:33,190 --> 00:28:40,150
the politics get very extreme right the

00:28:35,700 --> 00:28:42,669
the projects with multiple hundreds of

00:28:40,150 --> 00:28:47,710
committers you're going to have politics

00:28:42,669 --> 00:28:50,490
there's just no way to avoid that and

00:28:47,710 --> 00:28:53,679
you just try to keep the politics clean

00:28:50,490 --> 00:28:55,960
right you don't want company based

00:28:53,679 --> 00:28:58,539
politics for example right and Apache oh

00:28:55,960 --> 00:29:01,960
that's a big no-no you never want to

00:28:58,539 --> 00:29:07,299
tell your your co-workers how they

00:29:01,960 --> 00:29:08,890
should be voting for example but you're

00:29:07,299 --> 00:29:10,450
always going to have politics and sorry

00:29:08,890 --> 00:29:13,990
what was the second piece of your

00:29:10,450 --> 00:29:16,600
question yeah it's there what are the

00:29:13,990 --> 00:29:19,270
first signs of politics like when you

00:29:16,600 --> 00:29:21,820
have a small project and you suddenly

00:29:19,270 --> 00:29:29,650
you realize well is it about code or the

00:29:21,820 --> 00:29:31,480
politics it usually comes up when there

00:29:29,650 --> 00:29:34,570
there's some discussion about adding a

00:29:31,480 --> 00:29:38,350
new feature so it becomes those kind of

00:29:34,570 --> 00:29:40,809
discussions when people either try to

00:29:38,350 --> 00:29:43,510
shut down one group because they don't

00:29:40,809 --> 00:29:48,610
like how think the direction that

00:29:43,510 --> 00:29:50,440
they're going or someone's trying to be

00:29:48,610 --> 00:29:52,980
too controlling of making new committees

00:29:50,440 --> 00:29:57,549
right so actually watching the committer

00:29:52,980 --> 00:30:00,400
in flow is actually a critical sign of a

00:29:57,549 --> 00:30:03,070
project that's working well if there's

00:30:00,400 --> 00:30:06,899
no committers being added that's a sign

00:30:03,070 --> 00:30:11,769
that the politics have gone pretty bad

00:30:06,899 --> 00:30:19,929
questions okay thank you only appreciate

00:30:11,769 --> 00:30:22,240
and I'm sorry I didn't see there yeah I

00:30:19,929 --> 00:30:25,269
wanted to know how do you increase the

00:30:22,240 --> 00:30:27,250
adoption of your project and how do you

00:30:25,269 --> 00:30:29,590
reach out to other contributors to come

00:30:27,250 --> 00:30:32,950
and take a look at your project and

00:30:29,590 --> 00:30:36,669
start contributing so actually you do a

00:30:32,950 --> 00:30:39,029
lot of things like going to meetups give

00:30:36,669 --> 00:30:42,700
talks about it try to get people excited

00:30:39,029 --> 00:30:45,340
about what's going on in your project so

00:30:42,700 --> 00:30:49,000
it it's that kind of stuff right giving

00:30:45,340 --> 00:30:54,070
talks about it talking to people and

00:30:49,000 --> 00:30:57,250
just keep the project flowing right if

00:30:54,070 --> 00:30:58,960
it's addressing new needs and actually

00:30:57,250 --> 00:31:00,730
talking to the users about what they

00:30:58,960 --> 00:31:03,070
would like to see in the project one of

00:31:00,730 --> 00:31:07,539
the pieces that I've seen a lot is that

00:31:03,070 --> 00:31:11,590
people have a big need to take these

00:31:07,539 --> 00:31:13,379
highly complex data structures and that

00:31:11,590 --> 00:31:16,679
they currently are getting is Jason and

00:31:13,379 --> 00:31:20,500
put them into a structured file format

00:31:16,679 --> 00:31:21,970
and they're doing it badly right now

00:31:20,500 --> 00:31:24,159
because there aren't very good solutions

00:31:21,970 --> 00:31:25,809
and so one of the pieces that came out

00:31:24,159 --> 00:31:28,690
at I was like oh actually we should do

00:31:25,809 --> 00:31:32,620
that and that will help drive adoption

00:31:28,690 --> 00:31:35,169
another one for example is people want

00:31:32,620 --> 00:31:37,059
protection over some columns right they

00:31:35,169 --> 00:31:39,159
want to say okay only some people are

00:31:37,059 --> 00:31:41,620
allowed to read this column because it's

00:31:39,159 --> 00:31:45,610
PII so we're in the middle of adding

00:31:41,620 --> 00:31:47,940
column encryption for example so mostly

00:31:45,610 --> 00:31:50,919
and then of course you'd give more talks

00:31:47,940 --> 00:31:53,500
about those features as they go in and

00:31:50,919 --> 00:31:55,450
try to get people excited so mostly it's

00:31:53,500 --> 00:31:58,600
that and make sure that when people come

00:31:55,450 --> 00:32:01,000
in that you're welcoming and friendly to

00:31:58,600 --> 00:32:02,529
them right that that's actually really

00:32:01,000 --> 00:32:04,570
critical right you don't want people to

00:32:02,529 --> 00:32:07,600
get disgusted with your community and go

00:32:04,570 --> 00:32:11,169
away because that percolates rather

00:32:07,600 --> 00:32:13,480
badly open source projects are our

00:32:11,169 --> 00:32:15,309
relatively small community and and the

00:32:13,480 --> 00:32:16,690
words will get around right if projects

00:32:15,309 --> 00:32:19,509
have reputations rings

00:32:16,690 --> 00:32:21,609
that's great and if they get reputations

00:32:19,509 --> 00:32:24,580
for being not friendly that that's bad

00:32:21,609 --> 00:32:31,269
oh there's another one question down

00:32:24,580 --> 00:32:34,059
there so I was wondering if you have any

00:32:31,269 --> 00:32:35,859
idea if one can use splitting projects

00:32:34,059 --> 00:32:38,039
to manage deprecation cycles of old

00:32:35,859 --> 00:32:40,419
components so as I the evil approached

00:32:38,039 --> 00:32:42,190
to begin with let's say you have some

00:32:40,419 --> 00:32:43,989
some component you don't want people to

00:32:42,190 --> 00:32:46,080
use like your record i/o right would you

00:32:43,989 --> 00:32:48,179
consider splitting that out into some

00:32:46,080 --> 00:32:53,080
project on life support

00:32:48,179 --> 00:32:55,859
not good so we've talked about that

00:32:53,080 --> 00:32:58,509
especially in the context of hadoo of

00:32:55,859 --> 00:33:02,559
splitting projects out especially ones

00:32:58,509 --> 00:33:05,099
that are not used very much although

00:33:02,559 --> 00:33:07,149
again because the community isn't there

00:33:05,099 --> 00:33:10,239
especially for the ones on life support

00:33:07,149 --> 00:33:12,249
I'd actually encourage you to go instead

00:33:10,239 --> 00:33:14,739
to the model where there are separate

00:33:12,249 --> 00:33:17,529
sub project that releases independently

00:33:14,739 --> 00:33:19,479
so for example Hadoop really should do

00:33:17,529 --> 00:33:22,299
that with MapReduce write MapReduce

00:33:19,479 --> 00:33:23,919
basically never changes actually record

00:33:22,299 --> 00:33:26,470
IO would be another great example of

00:33:23,919 --> 00:33:33,389
that and so if we just release them

00:33:26,470 --> 00:33:38,739
independently then they can can fall off

00:33:33,389 --> 00:33:40,149
into disuse at their own rate but I

00:33:38,739 --> 00:33:42,639
wouldn't split them off as a separate

00:33:40,149 --> 00:33:46,330
project because there's no community and

00:33:42,639 --> 00:33:47,970
so it'll be hard to maintain does that

00:33:46,330 --> 00:33:52,960
make sense

00:33:47,970 --> 00:33:55,599
great any more questions well thank you

00:33:52,960 --> 00:33:58,840
all for coming it's been a pleasure to

00:33:55,599 --> 00:34:01,920
be here thank you

00:33:58,840 --> 00:34:01,920

YouTube URL: https://www.youtube.com/watch?v=VW7qeECUJCg


