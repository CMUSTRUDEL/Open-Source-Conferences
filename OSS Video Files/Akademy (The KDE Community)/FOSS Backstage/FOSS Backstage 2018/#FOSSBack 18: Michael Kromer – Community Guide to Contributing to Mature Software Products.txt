Title: #FOSSBack 18: Michael Kromer – Community Guide to Contributing to Mature Software Products
Publication date: 2018-06-22
Playlist: FOSS Backstage 2018
Description: 
	Tim works for a small company. When he comes home from work in the evening he likes to code for an open source project. This project is not just any project, but part of a product used by thousands of users in professional environments like public sector companies.

Can you imagine the commit made by Tim from his family home ending up there? Yes of course! But for it to happen, some things do need to be done. Before being included in final releases and rolled out to customers, Tim's changes need to go through defined QA procedures.

In this talk, Michael Kromer from Kopano shows how communities and products work together and how Tim's commit makes it into the final release of a product: Kopano, used by thousands of users in large organizations as a replacement of Microsoft Exchange or Office365

This talk is presented by Kopano.

Website: https://www.foss-backstage.de/
Twitter: https://twitter.com/Fossbckstg
LinkedIn: https://www.linkedin.com/groups/8653059/
Captions: 
	00:00:03,550 --> 00:00:09,370
yeah I'm Mike let's just start off I am

00:00:07,210 --> 00:00:13,900
a computer geek as it gets

00:00:09,370 --> 00:00:17,140
did a lot of coding in my past now I'm

00:00:13,900 --> 00:00:19,230
officially the vice president for

00:00:17,140 --> 00:00:22,210
technology and architecture with Capano

00:00:19,230 --> 00:00:25,720
I'll get back into that later but

00:00:22,210 --> 00:00:27,850
basically this talk is about throwing a

00:00:25,720 --> 00:00:31,330
little bit more light on the coding and

00:00:27,850 --> 00:00:34,030
contributing ecosystem and basically

00:00:31,330 --> 00:00:36,150
helping you also on understanding how

00:00:34,030 --> 00:00:40,120
things come together basically

00:00:36,150 --> 00:00:42,460
so to first start off no software

00:00:40,120 --> 00:00:43,930
project is like the other right there

00:00:42,460 --> 00:00:45,520
are so many software projects in the

00:00:43,930 --> 00:00:48,430
world specifically also in a free and

00:00:45,520 --> 00:00:51,670
open-source world not every project

00:00:48,430 --> 00:00:53,290
really works like the same so this is

00:00:51,670 --> 00:00:57,120
this is really important to know that

00:00:53,290 --> 00:01:00,250
there's also a vast difference between

00:00:57,120 --> 00:01:04,890
those various interest groups that exist

00:01:00,250 --> 00:01:07,299
in these ecosystems you as a person have

00:01:04,890 --> 00:01:19,859
slightly different motivations than

00:01:07,299 --> 00:01:25,560
maybe the community test work path soda

00:01:19,859 --> 00:01:28,590
okay so so you as a person have

00:01:25,560 --> 00:01:31,479
potentially different motivations

00:01:28,590 --> 00:01:33,729
different ideas of what you want to

00:01:31,479 --> 00:01:35,799
achieve of what you personally want to

00:01:33,729 --> 00:01:37,539
do with your code then the community in

00:01:35,799 --> 00:01:39,880
general has then the company may be

00:01:37,539 --> 00:01:42,819
backing the company or a customer which

00:01:39,880 --> 00:01:45,340
uses that product commercially or even

00:01:42,819 --> 00:01:46,749
an end customer who's really using that

00:01:45,340 --> 00:01:52,240
because it's a hosted service for

00:01:46,749 --> 00:01:53,950
example but all have one shared common

00:01:52,240 --> 00:01:58,270
goal and that is really to get stable

00:01:53,950 --> 00:02:00,849
working solid trusted software right you

00:01:58,270 --> 00:02:03,099
want to have your software doing the job

00:02:00,849 --> 00:02:04,899
that it's intended to do and you want to

00:02:03,099 --> 00:02:06,609
make sure that and that's one of the key

00:02:04,899 --> 00:02:09,280
parts of free and open-source software

00:02:06,609 --> 00:02:11,950
that the transparency also provides the

00:02:09,280 --> 00:02:16,420
trust in it there there are no backdoors

00:02:11,950 --> 00:02:17,420
in there that it's working we all don't

00:02:16,420 --> 00:02:19,520
like bugs really

00:02:17,420 --> 00:02:22,250
and obviously we want to have the

00:02:19,520 --> 00:02:24,620
service up and running so the thing is

00:02:22,250 --> 00:02:28,010
I'm going to take a few examples here

00:02:24,620 --> 00:02:30,890
and many of them I'm sure you know the

00:02:28,010 --> 00:02:32,990
Linux kernel is the largest and biggest

00:02:30,890 --> 00:02:35,870
open-source software project that exists

00:02:32,990 --> 00:02:40,670
in the world Iridium browser is a

00:02:35,870 --> 00:02:43,610
chromium fork focused on privacy Capano

00:02:40,670 --> 00:02:47,450
a communication and collaboration suite

00:02:43,610 --> 00:02:51,140
which protects your data at your premise

00:02:47,450 --> 00:02:52,970
on your premise and openSUSE and SUSE

00:02:51,140 --> 00:02:55,310
Linux Enterprise Server are basically

00:02:52,970 --> 00:02:57,290
two distributions with slightly

00:02:55,310 --> 00:02:58,790
different motivations one more the

00:02:57,290 --> 00:03:02,300
community side and one more the business

00:02:58,790 --> 00:03:03,830
side so to look at these different

00:03:02,300 --> 00:03:05,330
organizational structures you will see

00:03:03,830 --> 00:03:08,450
that the Linux kernel is is really

00:03:05,330 --> 00:03:10,820
demand oriented with the typical chain

00:03:08,450 --> 00:03:13,310
of trust in development otherwise it

00:03:10,820 --> 00:03:17,269
wouldn't scale and even with that it has

00:03:13,310 --> 00:03:19,489
certain issues with scaling but

00:03:17,269 --> 00:03:21,050
generally in the Linux kernel the saying

00:03:19,489 --> 00:03:24,070
is it's done when it's done and it's

00:03:21,050 --> 00:03:26,989
done when it's good so what is good

00:03:24,070 --> 00:03:29,720
basically everything I told before it

00:03:26,989 --> 00:03:31,610
must be stable it must be secure to the

00:03:29,720 --> 00:03:35,140
knowledge of the people involved at the

00:03:31,610 --> 00:03:38,209
time it's also one of the reasons why

00:03:35,140 --> 00:03:38,660
someone like lenez really gets angry at

00:03:38,209 --> 00:03:41,750
people

00:03:38,660 --> 00:03:46,850
if it breaks any API because it says no

00:03:41,750 --> 00:03:48,019
there is no need to break API yet then

00:03:46,850 --> 00:03:50,450
we have Iridium browser

00:03:48,019 --> 00:03:54,290
it's a project oriented thing basically

00:03:50,450 --> 00:03:56,780
the the this this is a specific project

00:03:54,290 --> 00:03:59,180
with the idea we want to take the good

00:03:56,780 --> 00:04:02,150
technology of chromium but we want to

00:03:59,180 --> 00:04:05,510
enable it with privacy because since we

00:04:02,150 --> 00:04:08,390
all know Google has the interest in your

00:04:05,510 --> 00:04:10,850
data it might be that you don't have the

00:04:08,390 --> 00:04:12,920
interest in sharing your data

00:04:10,850 --> 00:04:14,570
openSUSE is really an open community

00:04:12,920 --> 00:04:16,820
where they say hey we want to get the

00:04:14,570 --> 00:04:20,539
best software together and just provide

00:04:16,820 --> 00:04:22,400
it to about anybody who wants it and so

00:04:20,539 --> 00:04:24,680
les is basically yeah

00:04:22,400 --> 00:04:26,390
openSUSE with a real customer market

00:04:24,680 --> 00:04:28,760
demand people that demand support

00:04:26,390 --> 00:04:30,830
professional services things that a

00:04:28,760 --> 00:04:32,330
company traditionally needs you know

00:04:30,830 --> 00:04:33,620
it's it's hard to ask someone in the

00:04:32,330 --> 00:04:35,690
community at 3 o'clock in the morning

00:04:33,620 --> 00:04:37,550
hey I have a problem here can you help

00:04:35,690 --> 00:04:39,440
me out so that's where you have

00:04:37,550 --> 00:04:41,690
companies behind there where people get

00:04:39,440 --> 00:04:45,229
salaries paid to to do their job

00:04:41,690 --> 00:04:47,680
essentially and Capano is also it's a

00:04:45,229 --> 00:04:50,300
community and a commercially backed

00:04:47,680 --> 00:04:51,770
project we're actually there are many

00:04:50,300 --> 00:04:54,470
projects within Capano

00:04:51,770 --> 00:04:59,590
but this is this is an example of a

00:04:54,470 --> 00:05:02,720
hybrid so as I outlined at the beginning

00:04:59,590 --> 00:05:05,509
contributors always have the thing like

00:05:02,720 --> 00:05:07,400
hey I provided you to patch why isn't

00:05:05,509 --> 00:05:10,000
this showing up now I mean it's there it

00:05:07,400 --> 00:05:13,310
works everything is cool just go for it

00:05:10,000 --> 00:05:15,500
well the thing is is it's good that

00:05:13,310 --> 00:05:18,009
things take some time because what I'm

00:05:15,500 --> 00:05:20,599
about to show you is a little bit the

00:05:18,009 --> 00:05:25,219
implications that even a one-liner can

00:05:20,599 --> 00:05:28,639
have we were referring or I was

00:05:25,219 --> 00:05:32,569
referring to major software products so

00:05:28,639 --> 00:05:35,210
major must be defined right and when you

00:05:32,569 --> 00:05:37,580
hit Google by the definition and saying

00:05:35,210 --> 00:05:41,389
hi what is matron and it says fully

00:05:37,580 --> 00:05:46,400
developed full grown so to bring that a

00:05:41,389 --> 00:05:47,930
little bit on to software my personal

00:05:46,400 --> 00:05:50,360
definition of major software is it's

00:05:47,930 --> 00:05:52,460
it's wildly deployed really production

00:05:50,360 --> 00:05:54,800
installations in at least tens of

00:05:52,460 --> 00:05:57,289
thousands it runs on a variety of

00:05:54,800 --> 00:06:01,460
platforms little onion big onion if it's

00:05:57,289 --> 00:06:05,300
power if it's 64 x86 64 or whatever

00:06:01,460 --> 00:06:07,789
platform and also downstream like we are

00:06:05,300 --> 00:06:10,069
like copán also is it's included in

00:06:07,789 --> 00:06:13,909
Debian for example Ubuntu and openSUSE

00:06:10,069 --> 00:06:14,930
so in various platforms basically so

00:06:13,909 --> 00:06:20,060
when you as a committer

00:06:14,930 --> 00:06:23,090
want to commit code you should also and

00:06:20,060 --> 00:06:26,300
this is a strong echo back in an

00:06:23,090 --> 00:06:29,659
open-source community we do regularly

00:06:26,300 --> 00:06:33,169
get contributions but they do not watch

00:06:29,659 --> 00:06:35,449
actually it's they did it's amazing how

00:06:33,169 --> 00:06:37,009
many people really send you contribution

00:06:35,449 --> 00:06:40,070
centers actually like the third or

00:06:37,009 --> 00:06:42,169
fourth iteration of the problem and

00:06:40,070 --> 00:06:44,569
sometimes even you have identical patch

00:06:42,169 --> 00:06:46,159
sets for it but they do

00:06:44,569 --> 00:06:48,529
side issues which I will get back into

00:06:46,159 --> 00:06:50,089
it so if you as a committer want to

00:06:48,529 --> 00:06:53,169
commit to any software project in the

00:06:50,089 --> 00:06:56,869
world and don't get an angry lineThe or

00:06:53,169 --> 00:06:58,639
don't have people starting to ignore you

00:06:56,869 --> 00:07:00,649
you should a little bit do your homework

00:06:58,639 --> 00:07:02,839
and just check and github it's this

00:07:00,649 --> 00:07:04,699
issue maybe already known in the Iridium

00:07:02,839 --> 00:07:07,039
browser for example we had so many bugs

00:07:04,699 --> 00:07:10,069
people complaining about h.264 for

00:07:07,039 --> 00:07:12,949
example well it's a pate patented codec

00:07:10,069 --> 00:07:16,520
which is not integrated and there are

00:07:12,949 --> 00:07:19,520
like five or six issues where we simply

00:07:16,520 --> 00:07:20,990
say guys yes and this is not going to

00:07:19,520 --> 00:07:23,089
happen because we're simply not going

00:07:20,990 --> 00:07:25,759
with this is a this is an open-source

00:07:23,089 --> 00:07:29,990
project and there's no funding for a

00:07:25,759 --> 00:07:32,020
six-digit licensing of the h.264 codec

00:07:29,990 --> 00:07:36,769
so that's why it's not going to happen

00:07:32,020 --> 00:07:40,759
next to that is license when you commit

00:07:36,769 --> 00:07:42,529
code you must agree to the terms there

00:07:40,759 --> 00:07:45,110
was a talk this morning which was quite

00:07:42,529 --> 00:07:48,409
nice from I don't know his name anymore

00:07:45,110 --> 00:07:51,499
but he was from IBM which really brought

00:07:48,409 --> 00:07:55,419
up what types of differences in specific

00:07:51,499 --> 00:07:59,629
licenses you have so there are sometimes

00:07:55,419 --> 00:08:02,029
code commits rules that you have to obey

00:07:59,629 --> 00:08:03,559
there are sometimes licenses that you

00:08:02,029 --> 00:08:06,499
have to obey sometimes contributor

00:08:03,559 --> 00:08:09,559
agreements if you don't want to agree to

00:08:06,499 --> 00:08:11,899
it well then let it be or in a different

00:08:09,559 --> 00:08:14,029
thing a developer that you're

00:08:11,899 --> 00:08:15,199
complaining about can I have this in a

00:08:14,029 --> 00:08:16,969
different license it's probably not the

00:08:15,199 --> 00:08:19,219
right guy to ask it's probably someone

00:08:16,969 --> 00:08:23,809
else like a project leader and github or

00:08:19,219 --> 00:08:26,329
whatever one of the next things is when

00:08:23,809 --> 00:08:28,399
you create a pull request or service

00:08:26,329 --> 00:08:31,729
request in OBS or whatever be

00:08:28,399 --> 00:08:34,180
descriptive one-liners are nice and it's

00:08:31,729 --> 00:08:37,399
like sometimes people have have the

00:08:34,180 --> 00:08:39,649
intention of yeah it says everything but

00:08:37,399 --> 00:08:41,870
the reality is be more descriptive and

00:08:39,649 --> 00:08:44,569
it held really helps on the other side

00:08:41,870 --> 00:08:46,339
of the aisle to understand what's going

00:08:44,569 --> 00:08:48,920
on

00:08:46,339 --> 00:08:51,050
adapt and follow the individual product

00:08:48,920 --> 00:08:54,680
project coding style this is really a

00:08:51,050 --> 00:08:56,899
very important one it's like when we

00:08:54,680 --> 00:08:58,520
when you personally would write

00:08:56,899 --> 00:09:01,940
something like right

00:08:58,520 --> 00:09:04,790
sar so everyone has its own style right

00:09:01,940 --> 00:09:07,460
and that's also encoding so based on

00:09:04,790 --> 00:09:11,060
your coding capabilities you develop

00:09:07,460 --> 00:09:13,190
your own style and it's unfortunate if

00:09:11,060 --> 00:09:15,410
if you get rejected as a committer

00:09:13,190 --> 00:09:17,510
because you're not following basic

00:09:15,410 --> 00:09:19,850
guidelines that's why you always have

00:09:17,510 --> 00:09:22,100
these project guidelines and there are

00:09:19,850 --> 00:09:24,770
many different ones Linux kernel is

00:09:22,100 --> 00:09:27,800
completely different to Python or to go

00:09:24,770 --> 00:09:29,690
or to whatever so really if you want to

00:09:27,800 --> 00:09:33,290
commit and that's a specific era a

00:09:29,690 --> 00:09:35,540
specific space keep to it and also what

00:09:33,290 --> 00:09:37,310
is the best way to get in touch so an

00:09:35,540 --> 00:09:40,730
example of a project structure is

00:09:37,310 --> 00:09:43,190
obviously the Linux kernel Linux kernel

00:09:40,730 --> 00:09:45,500
is as I already mentioned it's

00:09:43,190 --> 00:09:49,580
completely based on the trust principle

00:09:45,500 --> 00:09:51,890
and so this is actually also a little

00:09:49,580 --> 00:09:53,870
bit a system which most people think

00:09:51,890 --> 00:09:55,910
that it's built up like a democracy but

00:09:53,870 --> 00:09:58,460
it's absolutely not it's more like a

00:09:55,910 --> 00:10:00,890
monarchy where the King has been voted

00:09:58,460 --> 00:10:02,990
for basically and he's trusted life long

00:10:00,890 --> 00:10:05,590
until he passes away or whatever let's

00:10:02,990 --> 00:10:08,060
hope not not too soon but the thing is

00:10:05,590 --> 00:10:12,710
it's merit-based it's a merit-based

00:10:08,060 --> 00:10:14,480
system so obviously Luna's deserves most

00:10:12,710 --> 00:10:16,820
credit for actually inventing this

00:10:14,480 --> 00:10:20,120
project and other people like Andrew

00:10:16,820 --> 00:10:24,620
Morton or Gregor Hartman they did a

00:10:20,120 --> 00:10:27,590
great job in managing the next kernel in

00:10:24,620 --> 00:10:31,130
managing branches stable wise I mean

00:10:27,590 --> 00:10:36,650
Greg Hartmann was maintaining the stable

00:10:31,130 --> 00:10:39,320
tree for ages so this is a system for

00:10:36,650 --> 00:10:41,660
example which is actually quite unique

00:10:39,320 --> 00:10:45,200
you won't find that too often based on

00:10:41,660 --> 00:10:49,220
on this switching over to what we

00:10:45,200 --> 00:10:50,900
actually do again complete it's a

00:10:49,220 --> 00:10:52,880
complete collaboration stack it's very

00:10:50,900 --> 00:10:54,860
modular so we have a lot of separate

00:10:52,880 --> 00:10:59,030
repositories in various languages

00:10:54,860 --> 00:11:01,640
ranging from C++ Python and so on you

00:10:59,030 --> 00:11:05,060
should know that every commit that you

00:11:01,640 --> 00:11:08,180
create is joined in a life cycle

00:11:05,060 --> 00:11:10,340
so when you create a commit and that's

00:11:08,180 --> 00:11:12,350
not exclusive to us that is in the most

00:11:10,340 --> 00:11:14,180
major software prod

00:11:12,350 --> 00:11:17,480
especially when there's a company behind

00:11:14,180 --> 00:11:20,570
there that's the case so you have a

00:11:17,480 --> 00:11:23,180
commit from the commit on you get into a

00:11:20,570 --> 00:11:26,000
review from a review point on you have

00:11:23,180 --> 00:11:29,510
your continuous integration QA going on

00:11:26,000 --> 00:11:31,850
basically automated testing and from

00:11:29,510 --> 00:11:34,700
automated testing this goes to real QA

00:11:31,850 --> 00:11:35,320
and from real QA it can get into a

00:11:34,700 --> 00:11:38,510
release

00:11:35,320 --> 00:11:42,800
so let's look how it looks like so Fran

00:11:38,510 --> 00:11:45,980
in the review part it's again in a major

00:11:42,800 --> 00:11:48,640
software product it's merit-based so you

00:11:45,980 --> 00:11:52,310
trust certain people based on their

00:11:48,640 --> 00:11:55,910
experience in that product so good

00:11:52,310 --> 00:11:56,840
software systems github being one of

00:11:55,910 --> 00:11:59,360
them

00:11:56,840 --> 00:12:02,030
we personally use the atlast of but

00:11:59,360 --> 00:12:04,160
everything it's just a tool everything

00:12:02,030 --> 00:12:06,430
is based on how you implement things and

00:12:04,160 --> 00:12:10,250
how you implement the rules and for us

00:12:06,430 --> 00:12:14,150
if you create a pull request you need at

00:12:10,250 --> 00:12:16,310
least three succeeding reviews otherwise

00:12:14,150 --> 00:12:19,940
the code is not going further down the

00:12:16,310 --> 00:12:22,700
chain why is that I mean even I'm one of

00:12:19,940 --> 00:12:25,550
the at least in a core project one of

00:12:22,700 --> 00:12:29,060
the reviewers of the code and sometimes

00:12:25,550 --> 00:12:32,600
even for us things slip through right we

00:12:29,060 --> 00:12:35,120
didn't think to the end but the review

00:12:32,600 --> 00:12:38,000
process already gives a lot of potential

00:12:35,120 --> 00:12:40,220
in terms of eliminating obvious things

00:12:38,000 --> 00:12:41,510
of thinking of hey have you been

00:12:40,220 --> 00:12:43,310
thinking of this you're breaking a

00:12:41,510 --> 00:12:48,140
complete different feature here

00:12:43,310 --> 00:12:50,510
so think about that so this whole review

00:12:48,140 --> 00:12:53,180
is a very important part if you don't do

00:12:50,510 --> 00:12:55,160
reviews you don't do good code that's

00:12:53,180 --> 00:12:56,330
the reality you can be the best coder in

00:12:55,160 --> 00:12:59,330
the world but you always forget

00:12:56,330 --> 00:13:01,280
something so it helps in to quality a

00:12:59,330 --> 00:13:02,840
code quality it helps you identify

00:13:01,280 --> 00:13:05,150
potential side-effects

00:13:02,840 --> 00:13:06,080
it keeps also which is also nice for a

00:13:05,150 --> 00:13:08,450
software project

00:13:06,080 --> 00:13:10,430
it keeps the conversation going right is

00:13:08,450 --> 00:13:13,280
your people you're talking to people

00:13:10,430 --> 00:13:14,900
you're not talking to computers so it's

00:13:13,280 --> 00:13:17,450
it's really good because you also can

00:13:14,900 --> 00:13:21,650
only learn from that and therefore base

00:13:17,450 --> 00:13:24,230
your future experience also on the input

00:13:21,650 --> 00:13:26,180
that you get from other sides style

00:13:24,230 --> 00:13:27,920
guidelines obviously so

00:13:26,180 --> 00:13:30,080
especially in the beginning when you're

00:13:27,920 --> 00:13:34,010
committing to a project you get into the

00:13:30,080 --> 00:13:36,110
situation where I'm not certain maybe I

00:13:34,010 --> 00:13:37,580
didn't understand certain aspects of the

00:13:36,110 --> 00:13:39,140
of the coding guidelines because they

00:13:37,580 --> 00:13:40,580
can be very long just look at the

00:13:39,140 --> 00:13:44,090
asterisk guideline that's really

00:13:40,580 --> 00:13:47,480
humongous and yeah once in a while we

00:13:44,090 --> 00:13:50,240
all up and so it helps to do a

00:13:47,480 --> 00:13:53,720
review next part is continuous

00:13:50,240 --> 00:13:56,390
integration so I will give you some

00:13:53,720 --> 00:13:58,490
numbers in the end but every commit at

00:13:56,390 --> 00:14:00,020
least I can speak for Capano and for

00:13:58,490 --> 00:14:03,320
some other software projects as well

00:14:00,020 --> 00:14:05,510
every commit that you create just starts

00:14:03,320 --> 00:14:07,850
off continuous integration checks so

00:14:05,510 --> 00:14:10,190
automated test it our automated tests

00:14:07,850 --> 00:14:14,030
are running with hopefully a good code

00:14:10,190 --> 00:14:15,650
coverage also merge tests because

00:14:14,030 --> 00:14:17,630
specifically when we're talking about a

00:14:15,650 --> 00:14:19,940
large code base you have the issue that

00:14:17,630 --> 00:14:23,300
things need to fit in together basically

00:14:19,940 --> 00:14:26,780
also for a release generally sanity

00:14:23,300 --> 00:14:29,030
checks linting and packaging for example

00:14:26,780 --> 00:14:31,640
and also very important memory leak

00:14:29,030 --> 00:14:33,770
checks so just that I experienced like

00:14:31,640 --> 00:14:35,570
three years ago we had a heck a lot of

00:14:33,770 --> 00:14:38,000
memory leaks because we simply didn't

00:14:35,570 --> 00:14:40,430
check them intensively enough so for

00:14:38,000 --> 00:14:43,670
example we had a high speed allocation

00:14:40,430 --> 00:14:47,030
algorithm used from SGI turns out that

00:14:43,670 --> 00:14:51,980
was leaking like I leave that word out

00:14:47,030 --> 00:14:56,150
so from from code to quality code also

00:14:51,980 --> 00:14:59,570
means that you check for all kinds of

00:14:56,150 --> 00:15:02,930
regressions instabilities for example

00:14:59,570 --> 00:15:04,880
and if you have any which is also type

00:15:02,930 --> 00:15:06,530
of a regression regression of a

00:15:04,880 --> 00:15:08,960
scalability or performance or

00:15:06,530 --> 00:15:12,140
interoperability so you want to make

00:15:08,960 --> 00:15:14,570
sure for example customers trust our

00:15:12,140 --> 00:15:16,490
solution because they want to keep their

00:15:14,570 --> 00:15:18,920
data safe right and they want to have

00:15:16,490 --> 00:15:21,260
their data fast so the user experience

00:15:18,920 --> 00:15:22,640
is very important but most of all they

00:15:21,260 --> 00:15:25,370
want to make sure that their data is as

00:15:22,640 --> 00:15:27,920
safe as it gets and when you introduce

00:15:25,370 --> 00:15:30,830
new features when you introduce bug

00:15:27,920 --> 00:15:32,270
fixes whatsoever things can change so

00:15:30,830 --> 00:15:35,230
it's it's very important that you always

00:15:32,270 --> 00:15:37,970
take in mind to have good code coverage

00:15:35,230 --> 00:15:39,480
and here we are actually this is from

00:15:37,970 --> 00:15:41,819
Coverity I don't know if you

00:15:39,480 --> 00:15:45,059
if you know that solution but it helps

00:15:41,819 --> 00:15:47,220
you identify weak spots in your code

00:15:45,059 --> 00:15:50,519
basically it's a great product can only

00:15:47,220 --> 00:15:53,220
recommend it so you can see that we're

00:15:50,519 --> 00:15:55,230
actually far under the average defect

00:15:53,220 --> 00:16:01,230
density of open-source software but

00:15:55,230 --> 00:16:02,730
we've not always been that way and the

00:16:01,230 --> 00:16:06,660
last check and this is something also

00:16:02,730 --> 00:16:08,519
that's that Noah I mean I'm not talking

00:16:06,660 --> 00:16:09,929
about artificial intelligence or

00:16:08,519 --> 00:16:11,369
anything like that here now because

00:16:09,929 --> 00:16:14,730
obviously that would be a vector that

00:16:11,369 --> 00:16:16,739
can approach things like that but real

00:16:14,730 --> 00:16:19,259
QA or as real testers are still

00:16:16,739 --> 00:16:21,029
important because they know the software

00:16:19,259 --> 00:16:23,249
they know where to look at they know

00:16:21,029 --> 00:16:25,019
when certain things are in and they also

00:16:23,249 --> 00:16:26,970
often know customers right because they

00:16:25,019 --> 00:16:29,189
they are also in a group where they get

00:16:26,970 --> 00:16:31,049
feedback from from other people and say

00:16:29,189 --> 00:16:35,429
like hey why didn't we catch it last

00:16:31,049 --> 00:16:37,889
time so it's it's really good that you

00:16:35,429 --> 00:16:40,859
have QA personnel and place testers in

00:16:37,889 --> 00:16:42,720
place which can you know do the extra

00:16:40,859 --> 00:16:43,410
work even if you have a good code

00:16:42,720 --> 00:16:44,910
coverage

00:16:43,410 --> 00:16:50,309
you still need testers that can

00:16:44,910 --> 00:16:52,350
professionally yea address yea address

00:16:50,309 --> 00:16:54,289
things that that come along especially

00:16:52,350 --> 00:16:56,999
with very large commits that come around

00:16:54,289 --> 00:17:02,309
and obviously also documentation needs

00:16:56,999 --> 00:17:05,130
to be updated as well going from QA to

00:17:02,309 --> 00:17:08,370
release means what is about backwards

00:17:05,130 --> 00:17:11,010
and compatibilities api ABI obviously we

00:17:08,370 --> 00:17:13,019
never want to change api ABI as much but

00:17:11,010 --> 00:17:14,789
when you introduce new features it can

00:17:13,019 --> 00:17:17,939
be that you have to introduce the calls

00:17:14,789 --> 00:17:19,919
no calls change can require changes in

00:17:17,939 --> 00:17:22,889
existing calls and therefore can break

00:17:19,919 --> 00:17:24,779
API or ABI is the ability at least maybe

00:17:22,889 --> 00:17:27,510
not on a short-term but on the long term

00:17:24,779 --> 00:17:30,659
and therefore this is something very

00:17:27,510 --> 00:17:33,659
important that needs communication that

00:17:30,659 --> 00:17:35,370
needs testing and especially when it

00:17:33,659 --> 00:17:37,320
comes to behavioral changes this is

00:17:35,370 --> 00:17:39,330
something that needs really to be

00:17:37,320 --> 00:17:41,399
communicated out to the world this is an

00:17:39,330 --> 00:17:44,190
example of the zet push project of the

00:17:41,399 --> 00:17:49,860
checklist that we do with every even

00:17:44,190 --> 00:17:53,700
minor release yeah so I promised you

00:17:49,860 --> 00:17:56,970
some numbers so for Capano is

00:17:53,700 --> 00:17:59,640
one commit that you create for six

00:17:56,970 --> 00:18:06,210
platforms that is like CPU architecture

00:17:59,640 --> 00:18:11,610
like 64-bit or 32-bit or arm 64 AR 64 RM

00:18:06,210 --> 00:18:14,220
v 7p p CL e and s 390 X then you have

00:18:11,610 --> 00:18:16,220
eight test groups behind there we're

00:18:14,220 --> 00:18:20,100
talking about all kinds of unit tests

00:18:16,220 --> 00:18:22,620
and then we have 35 distribution targets

00:18:20,100 --> 00:18:24,090
in total so that's all the kind of

00:18:22,620 --> 00:18:26,730
distributions you can imagine from

00:18:24,090 --> 00:18:29,960
Debian Ubuntu Sousa Red Hat you name it

00:18:26,730 --> 00:18:32,970
and so one commit actually generates

00:18:29,960 --> 00:18:35,880
1680 tests per commit pulling the

00:18:32,970 --> 00:18:37,710
numbers of just what one what this is

00:18:35,880 --> 00:18:39,870
not true two repositories of us this

00:18:37,710 --> 00:18:43,590
Capano corn campano dependency created

00:18:39,870 --> 00:18:46,190
in just 2018 means that in a QA we did

00:18:43,590 --> 00:18:49,400
two thousand eight hundred thousand

00:18:46,190 --> 00:18:53,840
tasks to be done to make sure that our

00:18:49,400 --> 00:18:59,640
software has high standard and quality

00:18:53,840 --> 00:19:01,470
yeah so this is basically it I think I

00:18:59,640 --> 00:19:04,550
ran out of time anyway so if you have

00:19:01,470 --> 00:19:04,550
questions just let me know

00:19:11,550 --> 00:19:23,350
we have time for at least one question a

00:19:15,220 --> 00:19:24,420
quick one if there's any all questions

00:19:23,350 --> 00:19:28,300
asked

00:19:24,420 --> 00:19:31,900
well you can get back to Mike think he's

00:19:28,300 --> 00:19:35,190
at the Capano poof sometime spike if

00:19:31,900 --> 00:19:35,190

YouTube URL: https://www.youtube.com/watch?v=hgtkBCBu8cg


