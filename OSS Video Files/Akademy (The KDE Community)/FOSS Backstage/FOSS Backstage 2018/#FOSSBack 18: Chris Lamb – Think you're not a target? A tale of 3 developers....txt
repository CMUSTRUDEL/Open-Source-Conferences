Title: #FOSSBack 18: Chris Lamb – Think you're not a target? A tale of 3 developers...
Publication date: 2018-07-09
Playlist: FOSS Backstage 2018
Description: 
	If you develop or distribute software of any kind, you are vulnerable to whole categories of attacks upon yourself or your loved ones. This includes blackmail, extortion or "just" simple malware injection … By targeting software developers such as yourself, malicious actors, including nefarious governments, can infect and attack thousands — if not millions — of end users.
 
How can we avert this? The idea behind "reproducible" builds is to allow verification that no flaws have been introduced during build processes; this prevents against the installation of backdoor-introducing malware on developers' machines, ensuring attempts at extortion and other forms of subterfuge are quickly uncovered and thus ultimately futile.

Through a story of three different developers, this talk will engage you on this growing threat to you and how it affects everyone involved in the production lifecycle of software development, as well as how reproducible builds can help prevent against it.

Read more:
https://18.foss-backstage.de/session/think-youre-not-target-tale-3-developers

About Chris Lamb:
https://18.foss-backstage.de/member/chris-lamb

Website: https://www.foss-backstage.de/
Twitter: https://twitter.com/Fossbckstg
LinkedIn: https://www.linkedin.com/groups/8653059/
Captions: 
	00:00:04,020 --> 00:00:10,570
hey everyone hear me okay brilliant

00:00:08,379 --> 00:00:12,430
Thanks well thank you very much for

00:00:10,570 --> 00:00:17,560
inviting me here just gonna open this

00:00:12,430 --> 00:00:19,180
water away from my laptop good idea yeah

00:00:17,560 --> 00:00:24,190
lovely to be back in Berlin and see so

00:00:19,180 --> 00:00:30,490
many people here yeah I'll just one

00:00:24,190 --> 00:00:32,980
second thank you I'll just jump straight

00:00:30,490 --> 00:00:38,500
into it my name is Chris Lam

00:00:32,980 --> 00:00:40,450
I am from Cambridge not not this

00:00:38,500 --> 00:00:42,760
Cambridge they've been in the news

00:00:40,450 --> 00:00:44,739
recently I'm from this Cambridge which

00:00:42,760 --> 00:00:47,220
never looks like this by the way for

00:00:44,739 --> 00:00:51,760
about one day a year it's this sunny

00:00:47,220 --> 00:00:55,030
yeah but it can do you know punting

00:00:51,760 --> 00:00:57,250
you've not been it's very very nice but

00:00:55,030 --> 00:00:59,770
I tend to live in London these days

00:00:57,250 --> 00:01:03,100
which is a bit bit dreary ER and less

00:00:59,770 --> 00:01:04,930
photoshopped than this picture and I've

00:01:03,100 --> 00:01:09,729
been the Debian project leader since

00:01:04,930 --> 00:01:11,920
early 2017 recently reelected by second

00:01:09,729 --> 00:01:14,319
term I'm on the board of directors of

00:01:11,920 --> 00:01:16,030
the open source initiative which are

00:01:14,319 --> 00:01:18,249
sponsoring this event just hanging out

00:01:16,030 --> 00:01:21,549
there and giving another talk on that

00:01:18,249 --> 00:01:25,649
tomorrow in a free software developer in

00:01:21,549 --> 00:01:28,499
my spare time for 10 years I think now

00:01:25,649 --> 00:01:30,789
got into it sort of fell into it and

00:01:28,499 --> 00:01:34,119
found myself with too much spare time at

00:01:30,789 --> 00:01:36,579
university usual usual thing and and now

00:01:34,119 --> 00:01:38,490
I'm a freelancer I was in the London

00:01:36,579 --> 00:01:41,319
style up scene for quite a few years and

00:01:38,490 --> 00:01:43,959
then I went freelance probably about

00:01:41,319 --> 00:01:45,340
four or five years ago I'm really

00:01:43,959 --> 00:01:47,289
enjoying it mostly doing open source

00:01:45,340 --> 00:01:51,039
work and things like that it's it's

00:01:47,289 --> 00:01:53,590
really really great just stuff like that

00:01:51,039 --> 00:01:55,719
I freeze not I do rental weird hacks so

00:01:53,590 --> 00:01:57,789
for example he's a pseudo moose over

00:01:55,719 --> 00:01:59,409
that in PostScript so actually if you

00:01:57,789 --> 00:02:02,679
print it to a real PostScript printer

00:01:59,409 --> 00:02:04,119
the printer itself will solve it I'm

00:02:02,679 --> 00:02:08,410
doing that all the correct backtracking

00:02:04,119 --> 00:02:10,810
of them etc or if you render it to a PDF

00:02:08,410 --> 00:02:12,970
your PDF render will do it for you but

00:02:10,810 --> 00:02:15,760
yeah just kind of stupid stuff like this

00:02:12,970 --> 00:02:17,410
oh it's someone else once asked on IRC

00:02:15,760 --> 00:02:19,450
can you get CP

00:02:17,410 --> 00:02:21,040
if a progress bar like W get well they

00:02:19,450 --> 00:02:24,730
are probably asking quite sensibly but

00:02:21,040 --> 00:02:26,950
yeah you can if you s trace the CP and

00:02:24,730 --> 00:02:28,930
and then yeah so you can kind of see it

00:02:26,950 --> 00:02:32,080
going don't don't use this don't use it

00:02:28,930 --> 00:02:35,290
oh it also made a operating system that

00:02:32,080 --> 00:02:37,660
plays hackers on repeat it's why not

00:02:35,290 --> 00:02:40,150
good for public kiosks just put in the

00:02:37,660 --> 00:02:42,490
USB stick let it boot once and it'll

00:02:40,150 --> 00:02:45,310
play hackers on repeat because why not

00:02:42,490 --> 00:02:47,650
yeah oh in my spare time whatever that

00:02:45,310 --> 00:02:50,050
is I pretend to be a classical musician

00:02:47,650 --> 00:02:52,480
that's a lute and a viola da gamba

00:02:50,050 --> 00:02:55,360
anyway just there's more to media

00:02:52,480 --> 00:02:58,450
computers hopefully hopefully so today

00:02:55,360 --> 00:03:00,970
I'd like to talk to you about three

00:02:58,450 --> 00:03:03,160
developers hypothetical developers tell

00:03:00,970 --> 00:03:05,080
a story they say you know that kind of

00:03:03,160 --> 00:03:08,890
thing so the first of all it was Alice

00:03:05,080 --> 00:03:13,480
and she releases a she developed

00:03:08,890 --> 00:03:15,100
software on her on her Mac a my awesome

00:03:13,480 --> 00:03:17,800
software and you can either download the

00:03:15,100 --> 00:03:20,770
source or for convenience you can

00:03:17,800 --> 00:03:23,200
download free compiled binaries so an

00:03:20,770 --> 00:03:25,810
exe a Deb package an RPM or whatever

00:03:23,200 --> 00:03:29,080
blah blah blah so this is free software

00:03:25,810 --> 00:03:31,780
and the these executables are being

00:03:29,080 --> 00:03:33,700
provided for just become just for

00:03:31,780 --> 00:03:35,620
convenience because it's just handy that

00:03:33,700 --> 00:03:37,570
you know if you're something on Windows

00:03:35,620 --> 00:03:40,390
to actually compile something of a pain

00:03:37,570 --> 00:03:42,400
but even on on free software everything

00:03:40,390 --> 00:03:44,410
systems you just sometimes just I just

00:03:42,400 --> 00:03:45,070
why I install it just get it away okay

00:03:44,410 --> 00:03:48,190
cool

00:03:45,070 --> 00:03:51,700
this is great and that goes swimmingly

00:03:48,190 --> 00:03:53,560
for a few years and then you know once

00:03:51,700 --> 00:03:57,250
one day she just gets a knock on the

00:03:53,560 --> 00:04:02,050
door and this chap turns up and says wow

00:03:57,250 --> 00:04:03,670
yeah so those that sauce just just leave

00:04:02,050 --> 00:04:05,650
that exactly how it is but before you

00:04:03,670 --> 00:04:08,560
make those exe s all those Deb's or

00:04:05,650 --> 00:04:12,550
those rpms can you just you know make a

00:04:08,560 --> 00:04:13,959
few changes to them before before they

00:04:12,550 --> 00:04:15,760
go live before you upload them don't

00:04:13,959 --> 00:04:18,669
don't don't push it to your github or

00:04:15,760 --> 00:04:21,790
whatever you're hosting on now but but

00:04:18,669 --> 00:04:23,890
you know making these changes the xes or

00:04:21,790 --> 00:04:25,960
you know something might happen yeah

00:04:23,890 --> 00:04:28,000
nice house you got here nice nice

00:04:25,960 --> 00:04:30,370
children you've got nice

00:04:28,000 --> 00:04:31,750
vicen life you've got you know but yeah

00:04:30,370 --> 00:04:34,150
we'll just keep this very quiet

00:04:31,750 --> 00:04:38,380
you know just yeah just between us no

00:04:34,150 --> 00:04:41,140
not cool and so she's sort of forced

00:04:38,380 --> 00:04:42,730
blackmailed into introducing changes

00:04:41,140 --> 00:04:45,760
into the source before but generating

00:04:42,730 --> 00:04:48,070
these binaries and as I say the herb

00:04:45,760 --> 00:04:51,310
sauce on the github remains entirely the

00:04:48,070 --> 00:04:53,500
same throughout and so ya know now now

00:04:51,310 --> 00:04:55,600
the sauce and the xes don't correspond

00:04:53,500 --> 00:04:57,730
in other words if you built that source

00:04:55,600 --> 00:04:59,320
and run the program you'd be running a

00:04:57,730 --> 00:05:01,720
different program that did something

00:04:59,320 --> 00:05:03,790
different than if you were just

00:05:01,720 --> 00:05:08,100
downloading the exe s and running them

00:05:03,790 --> 00:05:11,980
which is not really that not that great

00:05:08,100 --> 00:05:14,410
second developers Bob Bob is highly

00:05:11,980 --> 00:05:18,850
computer literate as you can tell by the

00:05:14,410 --> 00:05:20,380
rather elaborate keyboards mechanical

00:05:18,850 --> 00:05:22,360
keyboards poori annoys all of his

00:05:20,380 --> 00:05:24,880
colleagues with their click eNOS you

00:05:22,360 --> 00:05:27,040
know the kind of thing and has wooden

00:05:24,880 --> 00:05:33,970
headphones some reason in the bottom

00:05:27,040 --> 00:05:37,480
left because cough hipster cough and

00:05:33,970 --> 00:05:39,450
he's a sysadmin for a large operating

00:05:37,480 --> 00:05:41,800
system and manages a whole bunch of

00:05:39,450 --> 00:05:44,230
servers and things like that in there in

00:05:41,800 --> 00:05:47,020
the cloud or as datacenters so they used

00:05:44,230 --> 00:05:50,740
to call them unfortunately he's not

00:05:47,020 --> 00:05:53,320
unaware that these datacenters were his

00:05:50,740 --> 00:05:56,080
personal computer was sort of broken

00:05:53,320 --> 00:05:58,930
into it was targeted and broken into and

00:05:56,080 --> 00:06:02,980
so now all of the build servers that

00:05:58,930 --> 00:06:05,980
make part of the of that data center are

00:06:02,980 --> 00:06:07,450
compromised and the compilers have been

00:06:05,980 --> 00:06:10,419
compromised in particular every time

00:06:07,450 --> 00:06:12,280
they generate code if you even if you

00:06:10,419 --> 00:06:13,810
put good code into it the binaries they

00:06:12,280 --> 00:06:16,270
generate how are you

00:06:13,810 --> 00:06:19,210
extras yeah like before like without

00:06:16,270 --> 00:06:21,340
this you know these are extra let's not

00:06:19,210 --> 00:06:23,290
call them backdoors that's just far too

00:06:21,340 --> 00:06:25,300
strong but yeah they're basically

00:06:23,290 --> 00:06:29,370
backdoors or or they're leaking privacy

00:06:25,300 --> 00:06:33,190
or they're sending your your you know

00:06:29,370 --> 00:06:34,720
secret keys or Bitcoin passphrases etc

00:06:33,190 --> 00:06:39,340
to someone else basically

00:06:34,720 --> 00:06:42,310
you haven't nothing you don't have

00:06:39,340 --> 00:06:44,500
this is a problem because those data

00:06:42,310 --> 00:06:46,660
centers are generating those say

00:06:44,500 --> 00:06:48,220
precompiled binaries and they're being

00:06:46,660 --> 00:06:50,020
sent to users and the users will then

00:06:48,220 --> 00:06:52,240
install them so you know happed install

00:06:50,020 --> 00:06:55,570
blah and he goes in installs all these

00:06:52,240 --> 00:06:58,090
packages and so the user has no idea

00:06:55,570 --> 00:06:58,840
that the the users own machine has not

00:06:58,090 --> 00:07:00,940
been compromised

00:06:58,840 --> 00:07:02,740
until they install one of these which

00:07:00,940 --> 00:07:04,780
has been compromised by a compromising

00:07:02,740 --> 00:07:07,810
blob which is then being able to

00:07:04,780 --> 00:07:10,000
compromise the compilers and as I say

00:07:07,810 --> 00:07:11,530
the the source code going into the into

00:07:10,000 --> 00:07:13,300
the bill farm is still completely

00:07:11,530 --> 00:07:15,700
legitimate if you looked at it you can

00:07:13,300 --> 00:07:19,389
analyze it for for any malicious flaws

00:07:15,700 --> 00:07:21,400
is nothing there but the end users you

00:07:19,389 --> 00:07:24,160
or me are still being all running code

00:07:21,400 --> 00:07:29,620
that isn't code that you don't want to

00:07:24,160 --> 00:07:31,870
run our last developers cow so this is

00:07:29,620 --> 00:07:35,850
actually not Carol because well that's

00:07:31,870 --> 00:07:39,669
Eve and so carol is just sitting in her

00:07:35,850 --> 00:07:41,470
hotel and Eve is one of these evil made

00:07:39,669 --> 00:07:44,710
attacks that you hear about this who has

00:07:41,470 --> 00:07:47,410
installed the backdoor on on on Carol's

00:07:44,710 --> 00:07:49,120
laptop so every time now Carol

00:07:47,410 --> 00:07:51,750
distributes software to her friends you

00:07:49,120 --> 00:07:55,389
know like a good piece of our citizen

00:07:51,750 --> 00:07:58,840
the this it's also been compromised or

00:07:55,389 --> 00:08:02,320
revealing privacy or week it's etc who

00:07:58,840 --> 00:08:04,030
knows who knows which is a bit of a

00:08:02,320 --> 00:08:07,450
problem if she's a good free software

00:08:04,030 --> 00:08:10,599
citizen because freedom freedom to being

00:08:07,450 --> 00:08:12,250
the third freedom on the list failure to

00:08:10,599 --> 00:08:13,930
reach 50 copies so you can help your

00:08:12,250 --> 00:08:15,940
neighbor now we all know what that kind

00:08:13,930 --> 00:08:17,500
of means in the technical sense but are

00:08:15,940 --> 00:08:20,440
you really helping your neighbor if

00:08:17,500 --> 00:08:23,080
you're giving them a rootkit well I

00:08:20,440 --> 00:08:26,169
probably wouldn't stretch that's a bit

00:08:23,080 --> 00:08:28,690
of a wider definition than the FSF and

00:08:26,169 --> 00:08:30,340
RMS were after but I don't think you're

00:08:28,690 --> 00:08:31,930
really helping your neighbor if you're

00:08:30,340 --> 00:08:36,430
infecting their computer with malware

00:08:31,930 --> 00:08:37,719
why do they call me old-fashioned so

00:08:36,430 --> 00:08:39,130
what what's the general problem here I'm

00:08:37,719 --> 00:08:40,810
outlining with these two developers so

00:08:39,130 --> 00:08:42,969
you can view the source code for

00:08:40,810 --> 00:08:44,950
malicious software for floors you can

00:08:42,969 --> 00:08:46,450
you know download the code for nginx to

00:08:44,950 --> 00:08:47,470
look through it you can hire someone to

00:08:46,450 --> 00:08:50,950
look through it for you

00:08:47,470 --> 00:08:52,270
you can etc etc you can you know analyze

00:08:50,950 --> 00:08:52,510
it you can throw it through static and

00:08:52,270 --> 00:08:54,460
ours

00:08:52,510 --> 00:08:57,190
you can do all these kind of extra

00:08:54,460 --> 00:09:01,270
checks for all sorts of things that been

00:08:57,190 --> 00:09:03,490
snuck into you or into the original

00:09:01,270 --> 00:09:05,440
source code but most users are

00:09:03,490 --> 00:09:07,870
installing precompiled binaries because

00:09:05,440 --> 00:09:10,180
you just don't have time to compile you

00:09:07,870 --> 00:09:12,180
know Gen 2 was a little while ago now

00:09:10,180 --> 00:09:17,620
right and it's still around but you know

00:09:12,180 --> 00:09:18,970
yeah whatever yeah most people

00:09:17,620 --> 00:09:20,470
installing pre compiled binaries on

00:09:18,970 --> 00:09:22,000
servers on their laptops and stuff

00:09:20,470 --> 00:09:23,650
particularly when you're doing the

00:09:22,000 --> 00:09:25,390
initial install there's all binaries

00:09:23,650 --> 00:09:26,800
because what are you gonna do in a

00:09:25,390 --> 00:09:29,770
bootstrap ok whatever

00:09:26,800 --> 00:09:31,510
and so basically are we trusting this

00:09:29,770 --> 00:09:33,970
compilation process can we trust that

00:09:31,510 --> 00:09:36,670
the binaries correspond to the original

00:09:33,970 --> 00:09:38,710
source code it's a big question if

00:09:36,670 --> 00:09:40,570
anything gets in between and interferes

00:09:38,710 --> 00:09:42,700
of that process you can't trust those

00:09:40,570 --> 00:09:44,070
binaries being run in the end big

00:09:42,700 --> 00:09:46,600
problem big problem

00:09:44,070 --> 00:09:49,110
and one that we've been sort of blind to

00:09:46,600 --> 00:09:52,510
for years I mean we can as I say we've

00:09:49,110 --> 00:09:53,470
doing a lot of work to find malicious

00:09:52,510 --> 00:09:55,420
vulnerabilities

00:09:53,470 --> 00:09:56,650
it isn't once deliberately added to the

00:09:55,420 --> 00:09:58,090
source code and ones that were

00:09:56,650 --> 00:10:01,750
inadvertently added you know just raw

00:09:58,090 --> 00:10:04,570
bugs roebucks just normal bugs in the

00:10:01,750 --> 00:10:06,070
source code but if we just can't trust

00:10:04,570 --> 00:10:06,940
that our compilers are doing what they

00:10:06,070 --> 00:10:08,950
want as well

00:10:06,940 --> 00:10:12,580
or the build farms etcetera etcetera

00:10:08,950 --> 00:10:13,840
then this is a problem and security is

00:10:12,580 --> 00:10:16,180
only as strong as what weakest link

00:10:13,840 --> 00:10:19,810
etcetera it is a big problem because in

00:10:16,180 --> 00:10:22,390
the real world things get attached so

00:10:19,810 --> 00:10:26,440
there was a little while ago now she has

00:10:22,390 --> 00:10:30,460
a ten the kennel dog was hacked actually

00:10:26,440 --> 00:10:32,410
if we BSD other things as well by going

00:10:30,460 --> 00:10:34,840
through quite a few of these over or

00:10:32,410 --> 00:10:36,280
even layer it so basically this this

00:10:34,840 --> 00:10:38,230
actually happens and these are the ones

00:10:36,280 --> 00:10:41,500
we know about because most of these

00:10:38,230 --> 00:10:43,660
people on those screenshots were kind of

00:10:41,500 --> 00:10:46,240
people who might disclose that has

00:10:43,660 --> 00:10:50,790
happened maybe some companies would just

00:10:46,240 --> 00:10:52,990
keep it very quiet so who knows this

00:10:50,790 --> 00:10:56,500
this so basically this stuff happens in

00:10:52,990 --> 00:10:59,560
the real world so what's the solution so

00:10:56,500 --> 00:11:00,940
solution is well you first we will start

00:10:59,560 --> 00:11:03,460
with the same source so we basically

00:11:00,940 --> 00:11:06,190
agree but um this is the source code for

00:11:03,460 --> 00:11:08,140
Apache great okay brilliant

00:11:06,190 --> 00:11:10,750
then we assure that the build always

00:11:08,140 --> 00:11:12,490
produces the same result and by at the

00:11:10,750 --> 00:11:14,320
same with our having identical result I

00:11:12,490 --> 00:11:17,140
mean a bit for bit identical results

00:11:14,320 --> 00:11:21,280
every time I build piece of software or

00:11:17,140 --> 00:11:25,450
you build Apache we get end up with the

00:11:21,280 --> 00:11:27,790
exact same binary as in we run sha-1

00:11:25,450 --> 00:11:29,860
some we want md5 somewhere on basically

00:11:27,790 --> 00:11:32,650
we do a bit for bit comparison between

00:11:29,860 --> 00:11:33,820
the two end up binaries and we ensure

00:11:32,650 --> 00:11:35,590
it's always the same in whatever

00:11:33,820 --> 00:11:37,840
environment we build in whether I build

00:11:35,590 --> 00:11:39,610
on my own laptop on your laptop in the

00:11:37,840 --> 00:11:41,050
bill farm and things like that so we

00:11:39,610 --> 00:11:43,330
always get the same result if we build

00:11:41,050 --> 00:11:46,450
from the same source and then we

00:11:43,330 --> 00:11:48,820
basically compare results so let me just

00:11:46,450 --> 00:11:52,240
run through this of it so David he

00:11:48,820 --> 00:11:56,050
builds say the Apache binary and just

00:11:52,240 --> 00:11:57,940
for convenience will use char one Tom he

00:11:56,050 --> 00:11:59,680
generates a binary with this particular

00:11:57,940 --> 00:12:02,860
checks on there

00:11:59,680 --> 00:12:05,290
then Aaron builds the Apache binary and

00:12:02,860 --> 00:12:08,080
ends up with this checksum here okay

00:12:05,290 --> 00:12:09,640
cool they match okay so we and we pretty

00:12:08,080 --> 00:12:14,230
much we agree we start with the same

00:12:09,640 --> 00:12:16,620
source so you know okay great then Fred

00:12:14,230 --> 00:12:19,210
builds and Fred says or how long I've

00:12:16,620 --> 00:12:21,460
I'm ending up with a different checksum

00:12:19,210 --> 00:12:24,340
here but I've started with the same

00:12:21,460 --> 00:12:27,130
source well from this we can determine

00:12:24,340 --> 00:12:30,100
that there's something up with Fred to

00:12:27,130 --> 00:12:31,600
toolchain or could compiler or library

00:12:30,100 --> 00:12:34,000
that he's using or his machine or his

00:12:31,600 --> 00:12:34,960
compiler something in there is in making

00:12:34,000 --> 00:12:37,810
sure that he's ending up with a

00:12:34,960 --> 00:12:39,460
different result and you know this could

00:12:37,810 --> 00:12:42,370
be malicious his computer may be hacked

00:12:39,460 --> 00:12:44,470
his the build farm that generated his

00:12:42,370 --> 00:12:46,360
compiler could be hacked who knows this

00:12:44,470 --> 00:12:48,580
doesn't tell you what the actual issue

00:12:46,360 --> 00:12:50,500
is but it tells you then issue which is

00:12:48,580 --> 00:12:52,390
much much better than where we are at

00:12:50,500 --> 00:12:54,130
the moment where pretty much everyone's

00:12:52,390 --> 00:12:59,440
getting a different hash and who knows

00:12:54,130 --> 00:13:03,160
yeah whatever so the other thing here is

00:12:59,440 --> 00:13:04,540
that either David and Aaron have sorry

00:13:03,160 --> 00:13:05,140
either Fred's been hacked been

00:13:04,540 --> 00:13:07,540
compromised

00:13:05,140 --> 00:13:10,120
etc or both David and Aaron have been

00:13:07,540 --> 00:13:13,000
hacked okay you don't know you know

00:13:10,120 --> 00:13:14,800
which is the legend the the proper hash

00:13:13,000 --> 00:13:17,080
you should be getting no one can

00:13:14,800 --> 00:13:18,730
there's no answer to that but if you

00:13:17,080 --> 00:13:19,660
have enough people in this web and they

00:13:18,730 --> 00:13:22,120
all pretty much agree

00:13:19,660 --> 00:13:24,790
that the hashes say that seven a for

00:13:22,120 --> 00:13:27,010
eight to be whatever then you can start

00:13:24,790 --> 00:13:28,390
to come to sort of consensus saying you

00:13:27,010 --> 00:13:31,450
know what if you build Apache this

00:13:28,390 --> 00:13:33,400
particular version of Apache you end up

00:13:31,450 --> 00:13:35,410
with this hash and you should end up

00:13:33,400 --> 00:13:38,800
with a hash if you don't look into

00:13:35,410 --> 00:13:40,630
things and see what's going on so yeah

00:13:38,800 --> 00:13:42,730
how would this help our developers so

00:13:40,630 --> 00:13:44,230
the the black bear will be uncovered so

00:13:42,730 --> 00:13:46,740
a bunch of people would download the

00:13:44,230 --> 00:13:49,450
original untampered source code and

00:13:46,740 --> 00:13:52,420
generate the exe and perhaps compare

00:13:49,450 --> 00:13:55,270
that with the website the web web sites

00:13:52,420 --> 00:13:58,390
version of that exe and say why is your

00:13:55,270 --> 00:13:59,710
exe different Alice and she would be

00:13:58,390 --> 00:14:01,030
sort of have to answer some

00:13:59,710 --> 00:14:02,220
uncomfortable questions about why there

00:14:01,030 --> 00:14:04,540
happens

00:14:02,220 --> 00:14:05,920
Bob the compromise of the service would

00:14:04,540 --> 00:14:08,110
be detected because a whole bunch of

00:14:05,920 --> 00:14:10,120
people in that distribution would for

00:14:08,110 --> 00:14:13,870
example rebuild a piece of software and

00:14:10,120 --> 00:14:16,450
say hmm Bob I see that your build farm

00:14:13,870 --> 00:14:18,280
generated the Apache binary with checks

00:14:16,450 --> 00:14:20,050
from a but when I build it on my own

00:14:18,280 --> 00:14:22,600
machine I get checks on B and if I build

00:14:20,050 --> 00:14:25,270
it on my my spare laptop I also get

00:14:22,600 --> 00:14:27,610
checks on B it doesn't match what's the

00:14:25,270 --> 00:14:31,060
deal is it me is it you start an

00:14:27,610 --> 00:14:33,370
investigation see what's going on Carol

00:14:31,060 --> 00:14:35,200
her laptop will also detect it so if

00:14:33,370 --> 00:14:38,620
anyone rebuilds the software that she's

00:14:35,200 --> 00:14:42,970
giving out to friends it won't match the

00:14:38,620 --> 00:14:44,590
the hash sums or the check sums just

00:14:42,970 --> 00:14:45,850
won't match and so they'll be like well

00:14:44,590 --> 00:14:47,830
you know what's going on

00:14:45,850 --> 00:14:48,940
I think thinks Kara think there's

00:14:47,830 --> 00:14:51,280
something up with your laptop you know

00:14:48,940 --> 00:14:53,710
you might want to check that out so it

00:14:51,280 --> 00:14:55,330
will flag up these issues and this

00:14:53,710 --> 00:14:57,430
basically reduces the incentives to

00:14:55,330 --> 00:14:59,620
attack in the first place I think one

00:14:57,430 --> 00:15:02,170
I'm no expert blackmailer but I pretty

00:14:59,620 --> 00:15:03,310
much I'm under the impression that you

00:15:02,170 --> 00:15:04,720
probably don't want to blackmail someone

00:15:03,310 --> 00:15:07,030
if you're going to be uncovered because

00:15:04,720 --> 00:15:09,220
you know the whole idea that it's it's

00:15:07,030 --> 00:15:13,450
private it's secret it's surreptitious

00:15:09,220 --> 00:15:14,980
and so in this case there'll be no point

00:15:13,450 --> 00:15:17,290
going off to Carol no point in

00:15:14,980 --> 00:15:23,110
threatening her family or her house her

00:15:17,290 --> 00:15:24,820
dog cat with you know something bad if

00:15:23,110 --> 00:15:26,200
if through your blackmails is going to

00:15:24,820 --> 00:15:29,050
be uncovered a few weeks later when

00:15:26,200 --> 00:15:31,420
someone rebuilds on the website and says

00:15:29,050 --> 00:15:38,920
Alice you've been compromised oh okay

00:15:31,420 --> 00:15:41,620
yeah sorry and so when I said

00:15:38,920 --> 00:15:44,280
reproducible builds and I has identical

00:15:41,620 --> 00:15:46,270
results I don't necessarily mean

00:15:44,280 --> 00:15:48,640
reproducible in the sense of it builds

00:15:46,270 --> 00:15:50,590
with the same dependencies or that it's

00:15:48,640 --> 00:15:52,390
a reliable build so people often use

00:15:50,590 --> 00:15:54,790
this say in the JavaScript world where

00:15:52,390 --> 00:15:57,310
oh by reproduced verbs mean that you get

00:15:54,790 --> 00:16:00,090
you know every time you build it uses

00:15:57,310 --> 00:16:02,470
the same versions of of whatever

00:16:00,090 --> 00:16:04,840
dependency chain etcetera like that or

00:16:02,470 --> 00:16:06,910
it doesn't use the internet to build I

00:16:04,840 --> 00:16:10,120
mean literally identical build results

00:16:06,910 --> 00:16:11,890
so like it literally is a sha-1 will be

00:16:10,120 --> 00:16:15,370
the same md5 would be the same if you

00:16:11,890 --> 00:16:19,210
use the CMP tool that she does the VIPRE

00:16:15,370 --> 00:16:20,980
by comparison it's yeah but wait isn't

00:16:19,210 --> 00:16:23,050
software review decibel already I mean

00:16:20,980 --> 00:16:25,060
isn't what I thought when someone told

00:16:23,050 --> 00:16:27,250
me this introduced me to repeaters were

00:16:25,060 --> 00:16:29,500
builds in a pub and I said yeah but

00:16:27,250 --> 00:16:31,300
every time we build surely if you just

00:16:29,500 --> 00:16:32,650
press up and enter again when you build

00:16:31,300 --> 00:16:34,870
you just get the same result

00:16:32,650 --> 00:16:37,810
because computers aren't magic this is

00:16:34,870 --> 00:16:39,790
just how they work but no I went home

00:16:37,810 --> 00:16:42,040
and built a piece of software and then

00:16:39,790 --> 00:16:44,950
built it again and I got a different

00:16:42,040 --> 00:16:49,450
result and this was this is really ugly

00:16:44,950 --> 00:16:51,700
you know just yeah so yeah

00:16:49,450 --> 00:16:54,040
why isn't software you be useful right

00:16:51,700 --> 00:16:55,600
now there's lots of reasons one big

00:16:54,040 --> 00:16:57,220
reason is that as part of build

00:16:55,600 --> 00:17:00,190
processes has quite a lot of

00:16:57,220 --> 00:17:03,400
non-deterministic activity so if your

00:17:00,190 --> 00:17:06,220
build process iterates over any kind of

00:17:03,400 --> 00:17:08,080
non-deterministic data structure and the

00:17:06,220 --> 00:17:10,870
results of that end up in the final

00:17:08,080 --> 00:17:14,320
binary your software won't be

00:17:10,870 --> 00:17:16,390
reproducible for example a perl hash if

00:17:14,320 --> 00:17:19,900
you iterate over the keys that's not

00:17:16,390 --> 00:17:21,730
defined to be in any particular order by

00:17:19,900 --> 00:17:23,980
default unless you have a sort intuitive

00:17:21,730 --> 00:17:27,640
result for example and if your build

00:17:23,980 --> 00:17:30,730
process is uses one of those data

00:17:27,640 --> 00:17:32,230
structures and because of that it you

00:17:30,730 --> 00:17:34,060
know put some things in different orders

00:17:32,230 --> 00:17:36,100
or in different files in different place

00:17:34,060 --> 00:17:39,490
which usually wouldn't matter presumably

00:17:36,100 --> 00:17:40,750
otherwise in debug already but if that

00:17:39,490 --> 00:17:42,730
happens as part of your build process

00:17:40,750 --> 00:17:44,710
then your software will

00:17:42,730 --> 00:17:46,419
have an identical bill resolve every

00:17:44,710 --> 00:17:48,820
time you build it and therefore it won't

00:17:46,419 --> 00:17:51,910
be reproducible and therefore you

00:17:48,820 --> 00:17:55,929
weren't gonna do the comparison hashes

00:17:51,910 --> 00:17:58,090
between Fred Aaron etc etc because you

00:17:55,929 --> 00:17:59,950
won't can't have this guarantee that you

00:17:58,090 --> 00:18:01,540
should always get the same result so

00:17:59,950 --> 00:18:04,360
therefore you don't get the same result

00:18:01,540 --> 00:18:07,000
you you can start to flag up so yeah

00:18:04,360 --> 00:18:08,620
dictionary hash database watering you

00:18:07,000 --> 00:18:12,070
know basically any non deterministic

00:18:08,620 --> 00:18:14,110
ordering parallelism inbuilt so you know

00:18:12,070 --> 00:18:16,090
multi CPUs been around for a while I

00:18:14,110 --> 00:18:18,580
think my phone even has eight CPUs or

00:18:16,090 --> 00:18:21,820
something bizarre and but basically if

00:18:18,580 --> 00:18:25,720
your build process has parallelism such

00:18:21,820 --> 00:18:27,070
that the results come in and in

00:18:25,720 --> 00:18:28,690
different orders but just because you

00:18:27,070 --> 00:18:31,270
know this CPU happened to finish first

00:18:28,690 --> 00:18:34,179
this time or etc etc this thread is a

00:18:31,270 --> 00:18:36,580
bit faster than this one this time if

00:18:34,179 --> 00:18:38,320
that means that the binary ends up with

00:18:36,580 --> 00:18:41,049
a different result at the end due to

00:18:38,320 --> 00:18:43,120
that build parallelism so for example

00:18:41,049 --> 00:18:43,960
whichever one wins it gets added to a

00:18:43,120 --> 00:18:47,290
file first

00:18:43,960 --> 00:18:49,080
just for example then your again your

00:18:47,290 --> 00:18:50,950
build will not be reproducible

00:18:49,080 --> 00:18:53,740
timestamps this is perhaps the biggest

00:18:50,950 --> 00:18:55,600
bugbear software just loves as part of

00:18:53,740 --> 00:18:58,960
the build process to add the timestamp I

00:18:55,600 --> 00:19:00,070
was built on this day oh great but it

00:18:58,960 --> 00:19:03,090
means that if you build on a different

00:19:00,070 --> 00:19:05,200
day or a time or different time zone or

00:19:03,090 --> 00:19:08,470
yeah if you will in the future if you

00:19:05,200 --> 00:19:10,090
believe it in the past it will not end

00:19:08,470 --> 00:19:11,620
up with the same result and therefore

00:19:10,090 --> 00:19:14,140
they he'll end up with a different hash

00:19:11,620 --> 00:19:17,070
and say you can't play this big the

00:19:14,140 --> 00:19:19,750
checksum comparison comparison game

00:19:17,070 --> 00:19:22,270
build parts another one quite nefarious

00:19:19,750 --> 00:19:25,960
so it's part of let me give you one

00:19:22,270 --> 00:19:29,950
example c-plus paths assertions when

00:19:25,960 --> 00:19:32,020
they fail they include the say oh I this

00:19:29,950 --> 00:19:35,200
assertion failed in this line of code on

00:19:32,020 --> 00:19:37,240
this particular line etc in this

00:19:35,200 --> 00:19:39,460
particular file great very useful to

00:19:37,240 --> 00:19:42,340
debugging unfortunately it likes to

00:19:39,460 --> 00:19:44,950
encode the actual build path so are I

00:19:42,340 --> 00:19:47,950
built in my home directory so you know

00:19:44,950 --> 00:19:50,140
stash home / Lambie and you built in you

00:19:47,950 --> 00:19:52,120
know slash home slash christelle or

00:19:50,140 --> 00:19:54,100
whatever and it would end up with a

00:19:52,120 --> 00:19:55,670
different binary between us because mine

00:19:54,100 --> 00:19:57,410
binary would say blam

00:19:55,670 --> 00:19:59,000
in it somewhere and yours would say

00:19:57,410 --> 00:20:00,770
we're still in it

00:19:59,000 --> 00:20:04,100
it beats basically saying the same thing

00:20:00,770 --> 00:20:06,620
but because we built on our own separate

00:20:04,100 --> 00:20:10,370
machines and the binary ended up with

00:20:06,620 --> 00:20:12,500
the with our particular user names in

00:20:10,370 --> 00:20:14,450
them we won't be reproducible between

00:20:12,500 --> 00:20:17,060
builds and so therefore we can't play

00:20:14,450 --> 00:20:18,320
the our beloved even hash etc and so

00:20:17,060 --> 00:20:21,080
weak again can't play the hash

00:20:18,320 --> 00:20:23,540
comparison game non-deterministic foul

00:20:21,080 --> 00:20:27,680
ordering by this I mean that a UNIX file

00:20:23,540 --> 00:20:30,290
system is not actually defined to return

00:20:27,680 --> 00:20:32,330
files in a sorted order when you do an

00:20:30,290 --> 00:20:35,450
LS there's actually LS sorting them for

00:20:32,330 --> 00:20:38,120
you so if you do the underlying read

00:20:35,450 --> 00:20:42,440
system call it is not it's providing

00:20:38,120 --> 00:20:44,360
them in any order it likes in X M in the

00:20:42,440 --> 00:20:46,220
X to file systems that usually ends up

00:20:44,360 --> 00:20:49,220
with the same ordering each time you do

00:20:46,220 --> 00:20:51,230
it - and it 4x generally and the all you

00:20:49,220 --> 00:20:55,820
added them to the directory but that's

00:20:51,230 --> 00:20:57,950
not guaranteed other file systems can

00:20:55,820 --> 00:21:01,640
will and sometimes are they completely

00:20:57,950 --> 00:21:03,400
valid to return directory items in when

00:21:01,640 --> 00:21:06,520
you ask for them in any order it likes

00:21:03,400 --> 00:21:08,930
it's good to be implementation agnostic

00:21:06,520 --> 00:21:11,510
but this meets that any build process

00:21:08,930 --> 00:21:13,490
that does a naive reader call and for

00:21:11,510 --> 00:21:16,010
example concatenates all these text

00:21:13,490 --> 00:21:18,290
files into one and it relies on the

00:21:16,010 --> 00:21:19,790
underlying file systems ordering of

00:21:18,290 --> 00:21:22,040
these files it's going to be

00:21:19,790 --> 00:21:23,870
non-deterministic and so if I built it

00:21:22,040 --> 00:21:26,390
once and then you built it once we may

00:21:23,870 --> 00:21:29,630
end up with different result dot we

00:21:26,390 --> 00:21:31,430
can't play the hash comparison game so

00:21:29,630 --> 00:21:33,350
you often just need up a bit of sorting

00:21:31,430 --> 00:21:36,800
to ensure that it's always the same each

00:21:33,350 --> 00:21:39,170
time and also to other stuff uses groups

00:21:36,800 --> 00:21:41,360
you marketing viral so not only do we

00:21:39,170 --> 00:21:43,610
have build processes saying I always

00:21:41,360 --> 00:21:46,370
built this particular time you have them

00:21:43,610 --> 00:21:49,700
saying I was built on the 486 machine

00:21:46,370 --> 00:21:51,790
great and my machine is called you know

00:21:49,700 --> 00:21:54,230
keyboard Pat or whatever it is called

00:21:51,790 --> 00:21:55,850
great that's not actually that very

00:21:54,230 --> 00:21:57,410
useful and it means that if you build on

00:21:55,850 --> 00:21:58,250
a machine that's not that you end up

00:21:57,410 --> 00:22:02,180
with a different result

00:21:58,250 --> 00:22:03,710
not good can't play the game brother any

00:22:02,180 --> 00:22:06,680
other advantages for reproducible builds

00:22:03,710 --> 00:22:08,840
turns out there are one great thing is

00:22:06,680 --> 00:22:09,320
that if you do make a deliberate change

00:22:08,840 --> 00:22:12,620
do so

00:22:09,320 --> 00:22:15,799
code you should see a resultant change

00:22:12,620 --> 00:22:17,870
in the output binaries but as your as

00:22:15,799 --> 00:22:19,490
you've removed all these non determinism

00:22:17,870 --> 00:22:20,960
all the other changes that might just

00:22:19,490 --> 00:22:24,049
happen as part of rebuilding once

00:22:20,960 --> 00:22:25,639
building twice as I say as you've

00:22:24,049 --> 00:22:28,340
removed those as part of having a

00:22:25,639 --> 00:22:30,740
generally reproducible build when you do

00:22:28,340 --> 00:22:32,929
make changes the actual deliberate

00:22:30,740 --> 00:22:35,120
changes that you've made should be the

00:22:32,929 --> 00:22:36,620
only changes you see in that binary so

00:22:35,120 --> 00:22:38,809
if you just changed one particular

00:22:36,620 --> 00:22:42,320
conditional from a you know you're

00:22:38,809 --> 00:22:44,570
replaceable an if conditional with an if

00:22:42,320 --> 00:22:47,629
not conditional you should just see that

00:22:44,570 --> 00:22:48,740
tiny change in the final code you know

00:22:47,629 --> 00:22:50,059
and if you don't that means that

00:22:48,740 --> 00:22:52,220
something else is screwed up which is

00:22:50,059 --> 00:22:54,889
great so you just get minimal diffs

00:22:52,220 --> 00:22:57,769
minimal binary diffs and meaning and

00:22:54,889 --> 00:22:59,149
minimal meaningful dips as well on the

00:22:57,769 --> 00:23:00,590
deliberate changes you're making to

00:22:59,149 --> 00:23:02,870
source code

00:23:00,590 --> 00:23:07,279
you also get about a cache hit ratio if

00:23:02,870 --> 00:23:09,019
your your dependency chain is you know

00:23:07,279 --> 00:23:11,360
you as part of a build you're building

00:23:09,019 --> 00:23:12,559
all these also extra things before if

00:23:11,360 --> 00:23:14,779
you didn't have a reproducible build

00:23:12,559 --> 00:23:16,220
then because the time stamp has changed

00:23:14,779 --> 00:23:17,179
it's gonna have to rebuild all this

00:23:16,220 --> 00:23:18,440
other stuff which means you have to

00:23:17,179 --> 00:23:20,120
rebuild all this other stuff and then

00:23:18,440 --> 00:23:21,620
blah blah blah blah but if a build is

00:23:20,120 --> 00:23:23,509
reproducible it should always be the

00:23:21,620 --> 00:23:27,080
same you're gonna get a better cache hit

00:23:23,509 --> 00:23:30,580
ratio on these pre requisites for your

00:23:27,080 --> 00:23:32,629
current build which saves time money co2

00:23:30,580 --> 00:23:34,549
because you're not like burning through

00:23:32,629 --> 00:23:38,389
the atmosphere just to build something

00:23:34,549 --> 00:23:39,710
with a slightly different timestamp you

00:23:38,389 --> 00:23:41,419
can also use this to remove build

00:23:39,710 --> 00:23:45,169
dependencies again when you have minimal

00:23:41,419 --> 00:23:47,539
diffs if you remove a build dependency

00:23:45,169 --> 00:23:50,299
or you build it an environment without a

00:23:47,539 --> 00:23:52,190
particular library and you end up with

00:23:50,299 --> 00:23:54,470
the exact same result binary at the end

00:23:52,190 --> 00:23:56,690
well it probably means that you aren't

00:23:54,470 --> 00:23:58,159
needing that particular bill dependency

00:23:56,690 --> 00:24:01,340
so you can remove it from your build

00:23:58,159 --> 00:24:03,590
chain which may again save on build time

00:24:01,340 --> 00:24:05,779
etc or installation and just having a

00:24:03,590 --> 00:24:07,490
minimal said that bill dependencies is

00:24:05,779 --> 00:24:11,419
always kind of just kind of nice and

00:24:07,490 --> 00:24:13,340
clean you also can find bugs I mean to

00:24:11,419 --> 00:24:15,950
run through some examples so as a

00:24:13,340 --> 00:24:18,200
security bug I found there was a

00:24:15,950 --> 00:24:20,360
particular piece of software that during

00:24:18,200 --> 00:24:21,950
the build process it would generate a

00:24:20,360 --> 00:24:23,120
configuration file a default

00:24:21,950 --> 00:24:28,790
configuration problem

00:24:23,120 --> 00:24:32,390
and it will do this by using the rand

00:24:28,790 --> 00:24:34,820
function and being like okay grates in

00:24:32,390 --> 00:24:38,059
the build store something called an open

00:24:34,820 --> 00:24:39,860
ID consumer secret using a random let's

00:24:38,059 --> 00:24:43,970
just assume that sly secure understand

00:24:39,860 --> 00:24:45,860
words and this ended up on your file

00:24:43,970 --> 00:24:49,059
system at user share pal fiber or a

00:24:45,860 --> 00:24:52,309
problem related p.m. they're like that

00:24:49,059 --> 00:24:54,890
Basu so anyone who installs this build

00:24:52,309 --> 00:24:56,360
will end up with the same secret every

00:24:54,890 --> 00:24:58,370
time you built it you got a different

00:24:56,360 --> 00:25:00,830
secret because every time you bought it

00:24:58,370 --> 00:25:02,179
the build up PL file was being wrong but

00:25:00,830 --> 00:25:05,690
it means that anyone who shares that

00:25:02,179 --> 00:25:07,940
particular binary of this the end up

00:25:05,690 --> 00:25:10,160
resulting build will end up with the

00:25:07,940 --> 00:25:13,490
same secret and I'm no security expert

00:25:10,160 --> 00:25:15,320
but I reckon that's not very secure when

00:25:13,490 --> 00:25:20,300
everyone has the same one and I know

00:25:15,320 --> 00:25:21,770
what yours is yeah it's not that cool it

00:25:20,300 --> 00:25:24,530
also finds other weak bugs aren't

00:25:21,770 --> 00:25:28,370
security ones so here was a very old bug

00:25:24,530 --> 00:25:30,350
in a man page generator what was

00:25:28,370 --> 00:25:32,840
happening is that sometimes when you ran

00:25:30,350 --> 00:25:34,970
it instead of saying for example this

00:25:32,840 --> 00:25:38,540
manual page document usage of Wikipedia

00:25:34,970 --> 00:25:42,400
FS it would say you said you with a PDF

00:25:38,540 --> 00:25:45,290
s thing what you looked at the original

00:25:42,400 --> 00:25:47,540
original text for this and it will just

00:25:45,290 --> 00:25:50,179
say the usage or wicked PDF s and you're

00:25:47,540 --> 00:25:54,050
like what where's this extra oh coming

00:25:50,179 --> 00:25:56,410
from well someone got tracked it down

00:25:54,050 --> 00:25:59,990
and it was at this mem copy call and

00:25:56,410 --> 00:26:01,730
great and we look it up and it says mem

00:25:59,990 --> 00:26:04,309
copy the M memory errors must not

00:26:01,730 --> 00:26:06,050
overlap and they were overlapping so we

00:26:04,309 --> 00:26:08,150
basically just changed to a mem move and

00:26:06,050 --> 00:26:09,800
this fixed the bug and this was

00:26:08,150 --> 00:26:12,200
discovered by me producible builds

00:26:09,800 --> 00:26:13,880
because we would build once and we build

00:26:12,200 --> 00:26:15,830
again and they were build again and we'd

00:26:13,880 --> 00:26:18,620
see that this is variation every time we

00:26:15,830 --> 00:26:21,110
built and so they hashes the checksums

00:26:18,620 --> 00:26:23,120
weren't the same over time so therefore

00:26:21,110 --> 00:26:25,130
we were like there's some weird bug

00:26:23,120 --> 00:26:27,530
going on here and to manage to fix it it

00:26:25,130 --> 00:26:30,170
was great and you'll still get some

00:26:27,530 --> 00:26:33,790
weird things like here's a as part of

00:26:30,170 --> 00:26:36,930
the build process of this random number

00:26:33,790 --> 00:26:41,600
generator and intest generator fort

00:26:36,930 --> 00:26:44,790
and in its own test suite it would do a

00:26:41,600 --> 00:26:50,910
you means generate a string of that etc

00:26:44,790 --> 00:26:53,430
etc etc and basically the the every so

00:26:50,910 --> 00:26:56,280
often it would build and instead of

00:26:53,430 --> 00:26:58,290
generating a a text string which

00:26:56,280 --> 00:27:00,810
contained all three letters it would

00:26:58,290 --> 00:27:02,760
sometimes generate one with just two of

00:27:00,810 --> 00:27:04,290
those letters and you could calculate

00:27:02,760 --> 00:27:06,780
that using maths

00:27:04,290 --> 00:27:09,480
that that would happen nor point four

00:27:06,780 --> 00:27:13,050
six percent of the time and so we

00:27:09,480 --> 00:27:15,930
managed to fix this yeah you get some

00:27:13,050 --> 00:27:17,370
weird things like that let me talk

00:27:15,930 --> 00:27:20,730
briefly about Debian and reproducible

00:27:17,370 --> 00:27:23,070
builds we have a we found those previous

00:27:20,730 --> 00:27:25,200
box in what we call well ice I call all

00:27:23,070 --> 00:27:27,330
sort of torture chests test environment

00:27:25,200 --> 00:27:30,720
so this is where we build will have an a

00:27:27,330 --> 00:27:32,460
build and a be built and we vary as much

00:27:30,720 --> 00:27:35,460
as possible deliberately between these

00:27:32,460 --> 00:27:37,370
two this is to flush out reproducible

00:27:35,460 --> 00:27:40,350
issues that we kind of know about

00:27:37,370 --> 00:27:43,140
concepts so on the a build we might

00:27:40,350 --> 00:27:45,870
build with two in with a clock just set

00:27:43,140 --> 00:27:48,240
to today and then on the B build will

00:27:45,870 --> 00:27:50,070
set will have a system set up

00:27:48,240 --> 00:27:50,640
deliberately with the clock 18 months in

00:27:50,070 --> 00:27:52,620
the future

00:27:50,640 --> 00:27:55,110
so anything that encodes the build time

00:27:52,620 --> 00:27:57,660
the build year etc it will always vary

00:27:55,110 --> 00:28:00,210
between them and so if the build process

00:27:57,660 --> 00:28:04,050
does encode those things it'll flag them

00:28:00,210 --> 00:28:06,030
up when and also changes between these

00:28:04,050 --> 00:28:08,220
environments includes changing the host

00:28:06,030 --> 00:28:10,200
name domain name we have our own file

00:28:08,220 --> 00:28:14,370
system that deliberately returns things

00:28:10,200 --> 00:28:17,160
in a random order and so that Flags up

00:28:14,370 --> 00:28:19,350
any build process that relies on the

00:28:17,160 --> 00:28:20,790
underlying file system watering could

00:28:19,350 --> 00:28:23,520
also change we also change the time zone

00:28:20,790 --> 00:28:28,620
locale the you had geared all sort of on

00:28:23,520 --> 00:28:30,870
the nonsense etc etc we did our first

00:28:28,620 --> 00:28:35,670
rebuild of the inside Debian archive in

00:28:30,870 --> 00:28:39,660
2013 and 24 percent not too bad and as a

00:28:35,670 --> 00:28:42,110
March 2018 it were at 93 percent when we

00:28:39,660 --> 00:28:45,120
build of our packages are reproducible

00:28:42,110 --> 00:28:49,860
it using our tour to test framework and

00:28:45,120 --> 00:28:51,270
using some experimental chain changes

00:28:49,860 --> 00:28:52,230
this shows the graph of our progress

00:28:51,270 --> 00:28:58,050
over time

00:28:52,230 --> 00:29:01,620
that's 2015 things like that green this

00:28:58,050 --> 00:29:06,210
is the reproducible packages by buying

00:29:01,620 --> 00:29:08,340
number so higher is better and orange is

00:29:06,210 --> 00:29:09,720
the number of reproducible packages you

00:29:08,340 --> 00:29:11,430
can kind of ignore the red and the black

00:29:09,720 --> 00:29:12,720
ones because they're you know packages

00:29:11,430 --> 00:29:15,540
that fail to build so they aren't really

00:29:12,720 --> 00:29:17,520
relevant here I guess two things you can

00:29:15,540 --> 00:29:20,040
notice is that the total number of

00:29:17,520 --> 00:29:23,360
packages in Debian is going up or

00:29:20,040 --> 00:29:27,360
surprise we always add in more packages

00:29:23,360 --> 00:29:30,810
you also see that some spikes and some

00:29:27,360 --> 00:29:32,400
dips so for example here's where we

00:29:30,810 --> 00:29:33,150
probably just screwed something up so

00:29:32,400 --> 00:29:35,160
that can be ignored

00:29:33,150 --> 00:29:37,680
here is where we introduced a new

00:29:35,160 --> 00:29:39,750
variation into our torture test

00:29:37,680 --> 00:29:42,930
environment particularly we introduced

00:29:39,750 --> 00:29:45,210
build path variation where I in the the

00:29:42,930 --> 00:29:47,970
a build we might build in you know such

00:29:45,210 --> 00:29:50,400
temp a slash a and the B build we might

00:29:47,970 --> 00:29:52,830
build in slash temp slash B and this

00:29:50,400 --> 00:29:55,470
resulted in all packages that encoded

00:29:52,830 --> 00:29:59,520
that build path into the final binary

00:29:55,470 --> 00:30:03,360
would now go from being reproducible to

00:29:59,520 --> 00:30:05,160
UM reproducible in yeah and then we see

00:30:03,360 --> 00:30:07,980
a service ila fixing them and then

00:30:05,160 --> 00:30:11,310
here's a patch to GCC that we added

00:30:07,980 --> 00:30:12,780
etcetra etcetra etcetra etcetra made a

00:30:11,310 --> 00:30:16,460
bunch of changes so you can kind of see

00:30:12,780 --> 00:30:19,800
slow but steady progress to 100% but

00:30:16,460 --> 00:30:23,250
still not there as you can see from the

00:30:19,800 --> 00:30:25,140
variation there you can see our current

00:30:23,250 --> 00:30:27,540
status that is Debbie and reproducible

00:30:25,140 --> 00:30:30,390
yet calm which is kind of one of those

00:30:27,540 --> 00:30:32,370
silly one-page websites like the how

00:30:30,390 --> 00:30:34,350
many people are in space but it just

00:30:32,370 --> 00:30:35,880
basically tells you how many what

00:30:34,350 --> 00:30:39,630
percentage of packages are reproducible

00:30:35,880 --> 00:30:41,790
in debian right now while stick you've

00:30:39,630 --> 00:30:43,500
started perhaps as a Debian related

00:30:41,790 --> 00:30:45,200
project it's now way beyond Debian

00:30:43,500 --> 00:30:50,640
so it's now are completely a

00:30:45,200 --> 00:30:53,490
distribution agnostic endeavor we also

00:30:50,640 --> 00:30:55,560
don't necessarily care a concern

00:30:53,490 --> 00:30:57,420
ourselves only with distributions so we

00:30:55,560 --> 00:31:00,740
have a bunch of compilers a whole bunch

00:30:57,420 --> 00:31:02,280
of package managers and things like that

00:31:00,740 --> 00:31:04,680
bootstrap income

00:31:02,280 --> 00:31:07,290
and all sorts of other things as well so

00:31:04,680 --> 00:31:09,890
anyone who's interested in interested in

00:31:07,290 --> 00:31:13,010
reproducible builds as a general concept

00:31:09,890 --> 00:31:14,970
he's now he's not completely on board

00:31:13,010 --> 00:31:17,460
we'll also have a whole bunch of other

00:31:14,970 --> 00:31:18,900
people using our testing framework so

00:31:17,460 --> 00:31:25,830
for example we're now building arch

00:31:18,900 --> 00:31:31,140
linux packages coreboot open wrt who

00:31:25,830 --> 00:31:33,690
else who else leads basically using our

00:31:31,140 --> 00:31:37,140
torch s to flush out reproducible issues

00:31:33,690 --> 00:31:39,030
in our in our to be flushed out

00:31:37,140 --> 00:31:45,090
reproducible issues in their own code

00:31:39,030 --> 00:31:47,700
etc we've also had two summits in one in

00:31:45,090 --> 00:31:48,990
Athens one in Berlin where we guess you

00:31:47,700 --> 00:31:51,570
basically get get together for three

00:31:48,990 --> 00:31:53,700
days and without our laptops and work on

00:31:51,570 --> 00:31:56,610
issues about reproducible bill to try

00:31:53,700 --> 00:31:59,900
and work out what the next steps are you

00:31:56,610 --> 00:32:05,310
know try and do some cross distribution

00:31:59,900 --> 00:32:08,280
collaboration etc etc as part of this we

00:32:05,310 --> 00:32:12,360
also as have created some tools that are

00:32:08,280 --> 00:32:15,600
useful here we well if you want to

00:32:12,360 --> 00:32:18,540
compare two binaries you can of or

00:32:15,600 --> 00:32:21,000
compare any two files you can use the

00:32:18,540 --> 00:32:22,500
normal UNIX diff tool so I'm not sure

00:32:21,000 --> 00:32:24,990
that's visible here but that says this

00:32:22,500 --> 00:32:28,050
is the first file and then this and then

00:32:24,990 --> 00:32:29,970
it says this is the second file so if

00:32:28,050 --> 00:32:33,330
you just run diff on follow on and file

00:32:29,970 --> 00:32:35,910
two you get the differences between the

00:32:33,330 --> 00:32:37,170
files this is great but if you want to

00:32:35,910 --> 00:32:39,390
do that with a binaries that you're

00:32:37,170 --> 00:32:41,280
producing from a compiler you don't

00:32:39,390 --> 00:32:44,340
really end up with anything that's

00:32:41,280 --> 00:32:47,670
readable so here are the result of

00:32:44,340 --> 00:32:51,690
running diff on to dr. Deb files okay

00:32:47,670 --> 00:32:55,040
yeah what are the differences well I'm

00:32:51,690 --> 00:32:57,090
not really sure there's some sort of

00:32:55,040 --> 00:33:00,419
yeah

00:32:57,090 --> 00:33:01,710
yanari what's going on yeah so we should

00:33:00,419 --> 00:33:04,110
build a better death that's what we

00:33:01,710 --> 00:33:07,259
thought and so we did and we called it

00:33:04,110 --> 00:33:08,549
differs cope and differ scope well the

00:33:07,259 --> 00:33:09,659
diff escape will try and get to the

00:33:08,549 --> 00:33:10,679
bottom of what make us files or

00:33:09,659 --> 00:33:12,749
directories different it will

00:33:10,679 --> 00:33:14,399
recursively unpack archives are many

00:33:12,749 --> 00:33:16,889
kinds and transform various binary

00:33:14,399 --> 00:33:20,100
formats into more human human readable

00:33:16,889 --> 00:33:21,629
form to compare them so particularly

00:33:20,100 --> 00:33:24,899
binary files and things like that

00:33:21,629 --> 00:33:27,120
so if you then compared these to Deb's

00:33:24,899 --> 00:33:28,649
again you'll unpack them and it'll say

00:33:27,120 --> 00:33:30,450
oh yeah

00:33:28,649 --> 00:33:33,720
so there's actual differences in the

00:33:30,450 --> 00:33:35,129
files inside the Deb inside here there's

00:33:33,720 --> 00:33:38,340
a--there's inside this Deb there's a

00:33:35,129 --> 00:33:39,869
file called control doxology said and in

00:33:38,340 --> 00:33:42,330
there also there's a file called data

00:33:39,869 --> 00:33:45,059
and in there there's a data tough hard

00:33:42,330 --> 00:33:47,999
or exit and in that excel file there's a

00:33:45,059 --> 00:33:51,090
dated Akhtar and inside that in that tar

00:33:47,999 --> 00:33:53,610
file there's a file called D a fixed apt

00:33:51,090 --> 00:33:57,119
and inside that there's a difference and

00:33:53,610 --> 00:33:57,600
it's just one byte change so if you

00:33:57,119 --> 00:34:02,909
remember

00:33:57,600 --> 00:34:04,590
oh that one bytes check what one byte of

00:34:02,909 --> 00:34:07,710
meaningful change ended up with all this

00:34:04,590 --> 00:34:09,869
garbage here please it's compressed so

00:34:07,710 --> 00:34:12,780
you get sort of runaway changes things

00:34:09,869 --> 00:34:15,409
like that and what differ scope has

00:34:12,780 --> 00:34:17,760
managed to go the right way this time

00:34:15,409 --> 00:34:21,060
what diff escape was managed to show is

00:34:17,760 --> 00:34:23,250
that it's basically just just one byte

00:34:21,060 --> 00:34:26,609
of meaningful change and from this you

00:34:23,250 --> 00:34:29,700
can say well if it's DEA fixed that you

00:34:26,609 --> 00:34:30,210
can in most cases just go right to the

00:34:29,700 --> 00:34:33,000
source

00:34:30,210 --> 00:34:34,980
search for de effects that worked out

00:34:33,000 --> 00:34:38,669
why that is changing between there and

00:34:34,980 --> 00:34:40,679
that turns a you know 20-hour debugging

00:34:38,669 --> 00:34:42,389
session into basically a twenty second

00:34:40,679 --> 00:34:43,950
one where you're just like oh it's just

00:34:42,389 --> 00:34:47,250
adding a version for no reason

00:34:43,950 --> 00:34:48,990
cool oh that looks like a date so yeah

00:34:47,250 --> 00:34:51,359
it's adding the current date to it let's

00:34:48,990 --> 00:34:54,450
just ignore that okay great fix done

00:34:51,359 --> 00:34:56,339
next it's cool you can also see that

00:34:54,450 --> 00:34:59,520
differ scope is showing different bits

00:34:56,339 --> 00:35:03,000
of metadata between the files so gzip

00:34:59,520 --> 00:35:06,869
files you can in the headers they can

00:35:03,000 --> 00:35:09,599
actually encode when it was actually the

00:35:06,869 --> 00:35:10,550
original file was last modified in the

00:35:09,599 --> 00:35:12,140
header

00:35:10,550 --> 00:35:13,880
and if that varies between the files

00:35:12,140 --> 00:35:16,730
then of course your building not be

00:35:13,880 --> 00:35:18,770
reproducible etc etc and so differ scope

00:35:16,730 --> 00:35:20,360
will helpfully say oh yeah in the

00:35:18,770 --> 00:35:24,020
metadata for this file in this

00:35:20,360 --> 00:35:26,480
particular CD overlooked GZ the last

00:35:24,020 --> 00:35:28,010
modified header in the metadata of that

00:35:26,480 --> 00:35:31,070
file not the file itself but the

00:35:28,010 --> 00:35:33,230
metadata is different and it's and it's

00:35:31,070 --> 00:35:35,360
in this particular bit here there so

00:35:33,230 --> 00:35:37,520
again you can go from that all the way

00:35:35,360 --> 00:35:40,270
back to the source and say ok brilliant

00:35:37,520 --> 00:35:45,080
this is easy way of fixing it a

00:35:40,270 --> 00:35:46,760
difficult HTML output so you when you

00:35:45,080 --> 00:35:48,800
have these big nested trees that becomes

00:35:46,760 --> 00:35:51,080
very useful because HTML is a bit nicer

00:35:48,800 --> 00:35:53,840
than this sort of text output there and

00:35:51,080 --> 00:35:55,610
this feature also demonstrates how it

00:35:53,840 --> 00:35:57,950
has supports many many different file

00:35:55,610 --> 00:36:01,040
formats so for example here is me

00:35:57,950 --> 00:36:02,570
comparing to sequin like databases now

00:36:01,040 --> 00:36:04,130
normally if you just ran a diff on a

00:36:02,570 --> 00:36:05,960
sequel I'd database it's gonna come up

00:36:04,130 --> 00:36:09,230
with although some binary nonsense that

00:36:05,960 --> 00:36:10,160
won't be very useful but if you run

00:36:09,230 --> 00:36:13,250
differ scope on it

00:36:10,160 --> 00:36:16,520
it'll run a dump of a sequel dump on

00:36:13,250 --> 00:36:18,530
this database and recreate the exact

00:36:16,520 --> 00:36:20,480
sequel commands that we use to generate

00:36:18,530 --> 00:36:23,600
it in the first place and then run the

00:36:20,480 --> 00:36:28,460
diff on that so you can immediately tell

00:36:23,600 --> 00:36:31,850
that in the first in test 134 like 3 it

00:36:28,460 --> 00:36:35,480
was created by someone adding the value

00:36:31,850 --> 00:36:36,110
1 into the table test and in the second

00:36:35,480 --> 00:36:39,170
file

00:36:36,110 --> 00:36:42,110
testitude at sequel Lite someone added

00:36:39,170 --> 00:36:43,610
the value 2 into the same table and so

00:36:42,110 --> 00:36:45,320
from that you can always certainly go

00:36:43,610 --> 00:36:47,480
back to original source and worked out

00:36:45,320 --> 00:36:49,790
why someone's put one in there and 2 in

00:36:47,480 --> 00:36:52,430
there basically great and you don't get

00:36:49,790 --> 00:36:56,870
this big garbage of binary diff between

00:36:52,430 --> 00:36:58,610
the two also supports quite a few other

00:36:56,870 --> 00:37:01,640
for four months I won't read them

00:36:58,610 --> 00:37:03,170
because that'll just be boring but some

00:37:01,640 --> 00:37:08,210
weird stuff as well it's like if you

00:37:03,170 --> 00:37:11,870
compare OpenSSH public keys or file

00:37:08,210 --> 00:37:13,100
systems or TCP dump capture files you

00:37:11,870 --> 00:37:16,640
know so forth

00:37:13,100 --> 00:37:19,340
all sorts of bizarre file formats that

00:37:16,640 --> 00:37:20,690
you might want to run you can also try

00:37:19,340 --> 00:37:23,540
it immediately online there's a

00:37:20,690 --> 00:37:23,869
web-based version where you can just

00:37:23,540 --> 00:37:26,599
upload

00:37:23,869 --> 00:37:28,009
too fast at a vaguely similar and road

00:37:26,599 --> 00:37:30,680
if escaped on them and see what's going

00:37:28,009 --> 00:37:32,180
on it's very useful just for you know

00:37:30,680 --> 00:37:35,869
throwaway usages and you don't have to

00:37:32,180 --> 00:37:38,839
install any of the file format supports

00:37:35,869 --> 00:37:41,569
because on the some of these for example

00:37:38,839 --> 00:37:43,160
if you wanted to compare mono files you

00:37:41,569 --> 00:37:45,049
might need to install the mono build

00:37:43,160 --> 00:37:47,630
environment which would suck if you

00:37:45,049 --> 00:37:53,029
don't want install that so yeah you can

00:37:47,630 --> 00:37:54,499
try to online tips coke yeah so while

00:37:53,029 --> 00:37:57,259
using difference clip all the time for

00:37:54,499 --> 00:38:00,950
showing the differences in for example

00:37:57,259 --> 00:38:04,400
Security uploads oh sorry so for example

00:38:00,950 --> 00:38:06,289
these are under the banner of it

00:38:04,400 --> 00:38:08,630
deliberately changes to code so for

00:38:06,289 --> 00:38:10,999
example if the security vulnerability

00:38:08,630 --> 00:38:13,420
was that it said if blah instead of if

00:38:10,999 --> 00:38:16,519
not blah and I just want to change that

00:38:13,420 --> 00:38:19,130
I'll make that change and then run diffa

00:38:16,519 --> 00:38:21,769
scope on the previous vulnerable binary

00:38:19,130 --> 00:38:24,380
and run diffa scope on the hopefully

00:38:21,769 --> 00:38:26,749
fixed binary and I should only see that

00:38:24,380 --> 00:38:29,059
change between these two files which is

00:38:26,749 --> 00:38:30,680
great because then I can rely on it not

00:38:29,059 --> 00:38:35,359
changing any other other stuff at the

00:38:30,680 --> 00:38:37,190
same time just highlight the difference

00:38:35,359 --> 00:38:40,279
cope is not the definition reproducible

00:38:37,190 --> 00:38:42,230
it's just a way of comparing binaries so

00:38:40,279 --> 00:38:44,390
that's often a source of confusion that

00:38:42,230 --> 00:38:46,160
oh if I run diffa scope does that mean

00:38:44,390 --> 00:38:48,200
it's reproducible that's like well no

00:38:46,160 --> 00:38:51,710
it's just a it's just a better DIF just

00:38:48,200 --> 00:38:54,619
you know just save you time I also use

00:38:51,710 --> 00:39:00,230
differ scope on binary blobs so a bunch

00:38:54,619 --> 00:39:01,759
of unnamed router etc will just throw a

00:39:00,230 --> 00:39:03,559
whole bunch of oh he's a new firmware

00:39:01,759 --> 00:39:06,410
you should install on your new router

00:39:03,559 --> 00:39:07,849
device well it's all free software ever

00:39:06,410 --> 00:39:09,859
great I want to actually compare that

00:39:07,849 --> 00:39:11,089
with the previous one throw that differ

00:39:09,859 --> 00:39:12,519
scope and you'll say yeah the

00:39:11,089 --> 00:39:16,970
differences are here here here here

00:39:12,519 --> 00:39:20,140
quite interesting great so what's left

00:39:16,970 --> 00:39:22,400
to do in the reproducible build space so

00:39:20,140 --> 00:39:25,329
the source code it will still remains

00:39:22,400 --> 00:39:30,019
vulnerable so if there are actual bugs

00:39:25,329 --> 00:39:31,609
emissions bad backdoors etc that have

00:39:30,019 --> 00:39:33,859
been introduced into the original source

00:39:31,609 --> 00:39:35,749
code a reproducible builder won't help

00:39:33,859 --> 00:39:37,700
you so if someone's managed to sneak in

00:39:35,749 --> 00:39:41,420
to your upstream get

00:39:37,700 --> 00:39:43,580
repository a backdoor or a bug or

00:39:41,420 --> 00:39:45,230
anything a reproducible build won't help

00:39:43,580 --> 00:39:46,430
you because you just basically

00:39:45,230 --> 00:39:49,490
everyone's gonna end up with the same

00:39:46,430 --> 00:39:51,830
vulnerable spit of source code or if he

00:39:49,490 --> 00:39:53,750
sees weak algorithms if it the security

00:39:51,830 --> 00:39:56,480
algorithm is just dodgy or you know uses

00:39:53,750 --> 00:39:57,250
a deprecated hash function cetera et

00:39:56,480 --> 00:39:59,900
cetera

00:39:57,250 --> 00:40:02,870
then a reproducible won't magically

00:39:59,900 --> 00:40:05,750
bless you with magical security pop

00:40:02,870 --> 00:40:09,830
properties yeah and if your code has a

00:40:05,750 --> 00:40:15,200
testing mode for example made famous by

00:40:09,830 --> 00:40:17,810
some German vehicle manufacturer if if

00:40:15,200 --> 00:40:20,990
it runs under testing mode where it has

00:40:17,810 --> 00:40:23,000
different results if you ended up with

00:40:20,990 --> 00:40:24,440
the same source code so if you start

00:40:23,000 --> 00:40:26,270
with the same source code that's not

00:40:24,440 --> 00:40:27,980
really gonna help you and reproducible

00:40:26,270 --> 00:40:33,770
builds won't necessarily help you in

00:40:27,980 --> 00:40:36,470
this case let me help you if Volkswagen

00:40:33,770 --> 00:40:38,150
were providing binaries to someone and

00:40:36,470 --> 00:40:39,830
then providing different binary to

00:40:38,150 --> 00:40:42,980
someone else and also providing the

00:40:39,830 --> 00:40:46,640
source code and you get to compare the

00:40:42,980 --> 00:40:48,500
two by using reproducible builds the

00:40:46,640 --> 00:40:51,260
other issues how to do how to explain

00:40:48,500 --> 00:40:53,270
this concept to end-users so you could

00:40:51,260 --> 00:40:56,360
go through this story etc etc but when

00:40:53,270 --> 00:40:58,040
they go to install something if a piece

00:40:56,360 --> 00:40:59,960
of software is not reproducible how

00:40:58,040 --> 00:41:03,680
should that be exposed I mean do they

00:40:59,960 --> 00:41:06,620
care should they care so for example

00:41:03,680 --> 00:41:09,380
this is this is not in act right now but

00:41:06,620 --> 00:41:10,610
there is code to do it these foreign

00:41:09,380 --> 00:41:14,990
packages are not reproducible you

00:41:10,610 --> 00:41:16,850
uninstall them anyway well this works in

00:41:14,990 --> 00:41:20,210
a sense but I'm not sure that's very

00:41:16,850 --> 00:41:22,630
meaningful for end-users and will they

00:41:20,210 --> 00:41:26,780
just hit and end up hitting yes because

00:41:22,630 --> 00:41:28,760
you know yeah kind of sucks or do they

00:41:26,780 --> 00:41:30,620
hit no and not install the software it's

00:41:28,760 --> 00:41:34,280
all of it like it's just not a great

00:41:30,620 --> 00:41:37,460
interface so having this actually

00:41:34,280 --> 00:41:42,260
meaningful to end-users is another step

00:41:37,460 --> 00:41:44,780
that needs to be done so anyway yeah all

00:41:42,260 --> 00:41:46,330
that changes to be done we still need to

00:41:44,780 --> 00:41:48,530
do quite a bit of work on tool chains

00:41:46,330 --> 00:41:50,560
there are we still need to get our patch

00:41:48,530 --> 00:41:53,140
to GCC merged

00:41:50,560 --> 00:41:55,869
golang currently has issues with build

00:41:53,140 --> 00:41:57,910
path variation i think the same with the

00:41:55,869 --> 00:41:59,560
our statistical database things like

00:41:57,910 --> 00:42:02,980
that and this whole bunch of other tool

00:41:59,560 --> 00:42:04,630
change as well that suffer a lot making

00:42:02,980 --> 00:42:08,230
changes to tool changes obviously great

00:42:04,630 --> 00:42:10,060
because if you fix a problem that's

00:42:08,230 --> 00:42:13,119
being introduced to a lot of packages at

00:42:10,060 --> 00:42:14,830
once if i fix in their tool chain fixing

00:42:13,119 --> 00:42:17,470
that problem means that you immediately

00:42:14,830 --> 00:42:21,369
make a whole swathe of packages and

00:42:17,470 --> 00:42:22,900
software reproducible which is great in

00:42:21,369 --> 00:42:24,580
debian there's a large number of

00:42:22,900 --> 00:42:27,130
infrastructure changes that need to be

00:42:24,580 --> 00:42:29,349
done to support reproducible builds and

00:42:27,130 --> 00:42:32,980
support some of the metadata that goes

00:42:29,349 --> 00:42:35,950
around them we also need to continue to

00:42:32,980 --> 00:42:37,930
improve our metadata and developer tools

00:42:35,950 --> 00:42:41,910
say for example differ scope and things

00:42:37,930 --> 00:42:45,099
like that oh I'm being our own time yeah

00:42:41,910 --> 00:42:45,540
okay thank you limit the end so yeah

00:42:45,099 --> 00:42:48,460
great

00:42:45,540 --> 00:42:51,310
so differs code could still use support

00:42:48,460 --> 00:42:54,460
for more file formats and things like

00:42:51,310 --> 00:42:56,080
that and it also had some policy changes

00:42:54,460 --> 00:43:00,880
that could be made so we could for

00:42:56,080 --> 00:43:03,040
example solve the the user interface

00:43:00,880 --> 00:43:05,310
problem by just saying by definition all

00:43:03,040 --> 00:43:07,510
Debian packages must be reproducible and

00:43:05,310 --> 00:43:09,820
if they aren't then they aren't in the

00:43:07,510 --> 00:43:12,220
archive so no user would see this

00:43:09,820 --> 00:43:13,210
because it just wouldn't exist there

00:43:12,220 --> 00:43:16,510
won't be such a thing as a

00:43:13,210 --> 00:43:18,550
unreproducible package so therefore so

00:43:16,510 --> 00:43:21,520
these are questions and things to be

00:43:18,550 --> 00:43:23,410
still be done and also we can start to

00:43:21,520 --> 00:43:24,910
use reproducible builds to attack some

00:43:23,410 --> 00:43:27,099
age-old problems in computer science

00:43:24,910 --> 00:43:30,760
like trusting trust which is kind of a

00:43:27,099 --> 00:43:32,560
nice thing to read on Wikipedia all day

00:43:30,760 --> 00:43:35,740
and to get very worried about about

00:43:32,560 --> 00:43:38,200
compilers things like that it get

00:43:35,740 --> 00:43:41,290
involved and visit our website booties

00:43:38,200 --> 00:43:45,609
were built org and follow us on Twitter

00:43:41,290 --> 00:43:48,280
join us on our IRC we starting to

00:43:45,609 --> 00:43:51,190
strategy of restart our IRC meetings

00:43:48,280 --> 00:43:55,320
we're pretty friendly folk so just

00:43:51,190 --> 00:43:57,580
coming hangout good good stuff so yeah

00:43:55,320 --> 00:44:00,520
danke Schon and if I've got any

00:43:57,580 --> 00:44:03,130
questions maybe we'll thank you very

00:44:00,520 --> 00:44:04,180
much for the presentation but we run or

00:44:03,130 --> 00:44:06,849
we over

00:44:04,180 --> 00:44:09,490
took our time slot so okay would

00:44:06,849 --> 00:44:14,470
postpone the questions - maybe the lunch

00:44:09,490 --> 00:44:16,420
time or some more personal conversations

00:44:14,470 --> 00:44:19,569
during the conference in the sponsors

00:44:16,420 --> 00:44:22,210
area for instance but thanks anyway for

00:44:19,569 --> 00:44:25,440
the presentation and our next talk will

00:44:22,210 --> 00:44:25,440
be about labyrinth

00:44:25,810 --> 00:44:29,170

YouTube URL: https://www.youtube.com/watch?v=m0FudIwSuzM


