Title: Mark Struberg: The Cool and the Cruel of MicroService
Publication date: 2018-12-05
Playlist: Apache EU Roadshow 2018
Description: 
	Over the last few years everyone has been raving about MicroServices and how they will make any developers life so much better. Did this promise deliver? What was the reason we invented MicroService in the first place? Where are the barriers and for which scenarios does it pay off to use MicroServices? And in which situations do you better resist the temptation to always use the latest and greatest new hyped tools like MicroServices? Let's find out!
Captions: 
	                              my name is Mark Zuckerberg um I'm from                               Vienna                               I'm Apache Software Foundation members                               in quite a few years and I applied at                               the company in Vienna and my a day job                               is usually I get applied to customers                               and help them getting their stuff done                               and my personal definition of done is to                               have an application running in                                production for at least three months and                                users are happy not the customers                                because those are the people who pay me                                but the users that the people who really                                work with this application they have to                                be happy and satisfied and sometimes a                                little bit different so I'm not a                                consultant in the sense that I just go                                to customers talk about things and I'm                                off the scene again but I really into                                doing those things and in the last few                                years I've seen quite a few micro                                service applications and so kind of                                seven out of ten applications you see                                nowadays they start as micro services so                                it's kind of trending and probably reach                                the peak micro service already but it's                                a thing and the question is why that                                especially in Europe market or if it's                                how it is in the US but in Europe is                                really trending and my interpretation is                                that we have a lot of conferences where                                people every second talk was about micro                                services and raving and if you don't do                                micro services you do it wrong and you                                should throw away your old application                                and then we have computer magazine                                articles about micro services and it's                                so cool it's so great it's the best ever                                and if you don't do micro services you                                do it wrong so um this reminds me a                                little bit about the old story you                                probably notice on if you have a hammer                                every problem seems to be a nail and in                                German there is an even better proverb                                the link to the English people are for                                each screw there is a hammer which fits                                and if you're a little bit that Tim                                Taylor and then to homeworking and you                                imagine a wooden board and                                and a hammer then you quickly figured                                that it's not that the good idea so                                screw will get noodled it will not hold                                in the wood the wood gear will get                                grained and your finger will up end up                                being blue because you hit your finger                                with the hammer and not the screw so                                what how should it be used to right tool                                for the right job and the question now                                is is micro-services the right tool for                                every job as many conference talks make                                us believe or want to make us believe                                for computer magazine articles well in                                my opinion and I've been the IT since                                and in the industry working industry                                since the early nineties there have                                always been such kind of pipes and buses                                and they are kind well the industry                                needs this we need to sell our services                                we want to do new things we would want                                to try out new things but if we are                                really honest to ourselves then in a lot                                of cases it doesn't deliver so there is                                this kind of hype cycle and let's go                                just back a few years what what hap stid                                we have in the last few years                                cloud would you use cloud for every                                project I mean if you have kind of                                Netflix and you're kind of in the                                Christmas if you have thousand times the                                traffic like on some random Tuesday                                morning then it's probably a good idea                                to do cloud because they can DT if they                                need the traffic if T they have kind of                                the customers then they scale up the                                servers and if Christmas is over the                                kind of shutting down again and it only                                to pay for them because they don't use                                them and it only if they would host                                their own operating system well then                                they would have the need for                                       boxes so they just rent a few for kind                                of dystopia fings those peak hours and                                then the shut them down again                                really good use case if you are an                                insurance company for example with                                thousand employees and they enter your                                office at                                                               and they leave the office in the                                afternoon at five o'clock and you have                                 this Monday to Friday                                                                                                                      exactly what your traffic is                                 exact the same traffic every day there                                 is no peak hours I mean it's kind of                                 straight                                 you don't need scaling that much because                                 you have your boxes and they easily                                 deliver the payload and the load on the                                 systems it's enough you don't need to                                 scale up                                                                 so this there are other reasons why you                                 probably want to do cloud for example if                                 you're really really small dish but for                                 some cases it's not that a good fit                                 what's the next so messages for some                                 problems a good fit know exactly what                                 the problem is and for others it's                                 completely so I usually it's a                                           what is the next hype let's go back in                                 the hype cycles what was before that big                                 data talk yesterday with own and I told                                 him a nice thing in my opinion or my                                 experience                                                         installations we had seen over the last                                 four or five years are completely                                 nonsense people just said oh we have two                                 million customers it's so many customers                                 we need big later well two million                                 customers is a hell of a lot but it's                                 nowhere near big data so just kind of                                 restore your production database to some                                 other box you have tested your backup                                 strategy and restore strategy and you                                 can create a temporary indexes and every                                 relational database can easily handle                                 those things now there is a nice use                                 case which I want to kind of give you                                 that you so that it doesn't appear that                                 big data is complete nonsense a                                 colleagues of mine did for a Krankenhaus                                 footprint which is a bunch of hospitals                                 working together and you have a computer                                 tomography scans you have magnetic                                 resonance scans hard EKGs and all those                                 files between                                                         and you have a few hundreds of them a                                 day which makes a few hundred terabytes                                 a year and you you need about five                                 petabytes of disk space so try to                                 purchase a at a box with five petabyte                                 of disk it's not possible so what we did                                 is just purchase                                                     back then they were we're about five six                                 thousand euros                                 sixteen three-and-a-half inch eight                                 terabyte disks and install Apache Hadoop                                 on it so you had about fourteen                                 petabytes of rawl storage and via the                                 replication you of course lose something                                 so we had about four and a half                                 petabytes off of net storage which you                                 could use and then you have                                           each CPU cores six                                                     the university is using those thousand                                 six hundred cores to do oncologic                                 research the Duke answer algorithm on                                 those data so they can use the disk from                                 HDFS and they can use all the thousand                                 six hundred CPU cores for doing cancer                                 research on those boxes and that's a                                 really nice use case for a dope so for                                                                                                       which purchased and installed some big                                 data or Hadoop installation it                                 completely nonsense but there are really                                 good use cases where it's a perfect fit                                 what else do we have no sequel did no                                 sequel back in                                                           the magazines wrote no sequel will                                 replace standard relational databases                                 did this happen I have not seen this                                 happen                                 the reality is relational databases are                                 still around all over but does this make                                 no sequel useless no definitely not and                                 using no sequel every day the domain                                 name System DNS is kind of a new sequel                                 database l-dub is basically error                                 distributed no sequel database and there                                 are if you are a kind of a mobile phone                                 operator and you need to store billions                                 of connection informations each week                                 then of course using Apache Cassandra is                                 perfect but it was a lot of business                                 applications it just doesn't make any                                 sense to replace your relational                                 database so same rule applies                                          even less and my prediction is well with                                 microservices it's probably the same no                                 your weapons no your problems and nowhen                                 as                                 cific tool is good for a specific                                 problem and which downsides it also                                 brings because there is always a                                 trade-off every technical tool you would                                 use has benefits but also trade-offs and                                 it's not just about tools it's about                                 kind of basic principles you apply to a                                 problem so what about micro-services                                 when does it end to talk exactly                                 Catherine at four okay so just for                                 getting me mentally set up so what about                                 micro services if micro services are the                                 answer what was the problem because                                 everybody else you can solve it with                                 micro services go micro services but                                 what to solve and usually people have                                 mono Leafs and this is a problem because                                 most of the times people have badly                                 designed and kind of historic grow and                                 naturally growing monoliths which are                                 inherently kind of well people over the                                 time of the many years to get maintains                                 they add some parts here and some parts                                 there they have very kind of not really                                 a clear design pieces cuts added all                                 over the place so you have in the                                 dependencies all over the place I mean                                 probably most of you know or have seen                                 better designs big monoliths right who                                 has not seen to academics Mabi so it                                 they're also not easy to scale not in a                                 technical sense because technically you                                 just drop in and you know then and and                                 fire it up and you're done but in a                                 business sense if kind of your company                                 acquires some other company and you want                                 to grow your business well adding this                                 business to your monolith is sometimes                                 not easy because it has no clear                                 structure it's not that you can just add                                 another module and be done and it                                 clearly interacts with the other parts                                 but most of the times you kind of have                                 to patch pieces here and there and and                                 kind of add something to the customer                                 and add something to the building and                                 whatever because those monoliths are                                 usually bad designed and have no they                                 have no clear design                                 in the it also had to roll out also not                                 in the technicals meant in a tactical                                 sense because in a technical sense a                                 roll out is dropping the war a year file                                 to a server restarting the server and                                 the rollout is done but for me                                 personally a roll out means I have an                                 old functionality it works in production                                 and my target is to have the new from                                 the old functionality blast new                                 functionality in production without                                 trashing the data having all running                                 having guaranteed that it operates and                                 this is what I understand with roll out                                 it's not just starting the engine and                                 well sometimes the operation teams say                                 oh I've restarted application                                 well it didn't even react on my clicks                                 so and with this with mono lifts you                                 have the problem that you add some new                                 functionality over there and you use the                                 leg and the wheel in the left down                                 corner so you can't be sure that it                                 still works because you didn't touch                                 your code locally in this module but                                 it's all over the place and guaranteeing                                 that functionality still works in the                                 model if is a tons of work because your                                 changes are not applied to one single                                 module but you're kind of inherently                                 affect all the system so amana lives if                                 they are vet assigned or kind of                                 historically grown are really hard to                                 handle usually so the solution micro                                 services let's find out what the micro                                 services let's go to Google and this is                                 just the first link which pops up and                                 this is from smart bear it's just a                                 random link there is no clear definition                                 what a micro service is doesn't exist                                 are still not the micro services have                                 been around for now five years or so but                                 this comes really close to what most                                 people understand                                 so essentially micro service                                 architecture so whoever claims micro                                 services is not an architecture can                                 argue with smart there is a method of                                 developing software applications as a                                 suit of independently deployable small                                 modular systems so your micro service                                 application is kind of the whole thing                                 you designed the whole thing as one suit                                 of smallish applications but your goal                                 is to have the whole business stuff in                                 which each service runs in a unique                                 process so they are usually started in                                 their own virtual machine on their own                                 tucker instance or cube kubernetes                                 instance or whatever and communicate                                 through each other communicate for a                                 well-defined light with mechanism with                                 each other so most of the times is HTTP                                 was chasing people say rest but actually                                 most of the time they don't do rest                                 because rest means resource oriented                                 treating something is resource and as                                 about                                                                   seen in in reality is to just use HTTP                                 Plus chasing but imperative do this do                                 that                                 it's like remote procedure calls over                                 HTTP plus chasing it had nothing to do                                 with rest from the from the real                                 understanding of what was restiess or in                                 Roy is not here this year but well you                                 could talk with him about this to serve                                 a business goal so again the whole                                 application is one business goal let's                                 look at the the single parts over there                                 how big is a micro service well it                                 should be micro what is there what was a                                 method of development sort of                                 independent the point is small modular                                 services I mean this is the name what                                 what gives the name to this whole                                 architecture micro services how small is                                 it how do I measure it how would you                                 measure Micro any is the code size                                 number of classes complexity binary size                                 what do we take as micro services and to                                 give you some feedback let's just look                                 at the hard facts most of the micro                                 services I've seen around                                               of megabytes that's actually huge so if                                 you go to the spring generator that                                 spring boot generator and click a few                                 things then you end up with                                              of                                 microservice yeah that's the point okay                                 you you spoiled it a complete Apache                                 Tommy which is an a complete java                                 enterprise application server has                                       so Java Enterprise is dead and it's so                                 fat and so ugly of course old                                 application servers in the old days like                                 old kind of I don't say names but you                                 know that the big errands they have been                                 in the gigabyte range but those times a                                 long time passed it's not true anymore I                                 mean what what tables why Allah has                                 about                                                                    Tommy is really small                                             profile of Tommy has about                                              and we have a pedometer wave which I                                 talked about a little bit yesterday and                                 showcased it it has nine megabytes and                                 this is CDI + Chuck's RS plus Jason                                 peach isn't binding and look for che and                                 so the core technologies which make the                                 micro profile to a platform well and                                 this is what I call so if even if you                                 bundle your whole application to it it's                                 a it's probably                                                         is rather micro but actually I wouldn't                                 even measure it in encode size in binary                                 size but I would measure it in in                                 complexity and just as we started with                                 spoiling already I would not go from                                 really being micro I would rather not                                 cut your your business to smallish but                                 rather large I explain this later why                                 the other okay let's go next this should                                 be independent services micro service is                                 really independent yeah in theory so one                                 is what they are independently                                 deployable yeah but it doesn't matter I                                 mean that they are from business aspect                                 independent of course if you have                                 natural boundary in between then it                                 happens less frequently that people just                                 add functionality it just over there and                                 over the end over there                                 because you have network boundary in the                                 middle so it's less common and it's most                                 of the times the different repository                                 and so on so it's less common that                                 people just commit code to some foreign                                 module which they don't own or don't                                 belong to and it's not their business                                 they don't understand what they're doing                                 on the other hand it's possible and                                 often if you have can do it also depends                                 if people always compare this with                                 Netflix and Netflix that the business                                 model of Netflix is completely simple                                 dead simple if they have one use case                                 basically of course in the back office                                 they have more and the most complex part                                 of net means is not the content delivery                                 it's the content provision and the                                 payment calculation the clearing with                                 the content providers because those are                                 really complex contracts well and this                                 is what a lot of business is into and a                                 lot of complexity but the actual                                 delivery of Netflix is dead simple it's                                 just a hell lot it's gigabytes per                                 second with                                                              the same time that's technically huge                                 but from a business aspect it's so much                                 more simple than insurance company a                                 bank or whatever because they have                                     dialogues and and                                                   cases which are you need to tackle                                 independently so the business use cases                                 of most of the applications I'm - mostly                                 - boring applications like you know old                                 classic applications most of those                                 customers have much more complicated                                 business use cases than Netflix so and                                 in in this business use cases you're                                 often if the problem that the business                                 use case has cross-links and has                                 dependencies on each other and if the                                 business you need to kind of implement                                 has interdependencies well then you have                                 to implement them somehow                                 there is no way around this it's not                                 technically possible so the next thing                                 is what about version Ingram Micro                                 Service is cool and if you do a new                                 version                                 the good news is that if you kind of                                 want to improve the customer part you                                 only touch the customer part so this                                 argument really delivers you are                                 localized you're working in your local                                 module the problem is if you want you                                 need to kind of add additional features                                 but some stuff is still used by another                                 micro service so you have                                              micro services running and some parts of                                 your customer micro service are still                                 used by the building or whatever so you                                 can't remove it without also having to                                 kind of redeploy and re update your                                 you're building out whatever you don't                                 even know what's with using your stuff                                 most of the times and that's one of the                                 problems so you need to add a new                                 version so what can you do you can kind                                 of create a new resident point with                                 version two or you can add a parameter                                 and if the parameters now it got called                                 from the old version and if it's filled                                 and you'll probably have to new but if                                 what if you for the dinner generate data                                 protection regulation you have to remove                                 functionality like for example having to                                 remove the functionality that you can                                 that you can serve an Access historic                                 data of a customer probably this is                                 probably required by law so you can't                                 just leave it and until nobody uses it                                 anymore you have to switch it off and                                 it's kind of problematic and the other                                 thing is writing software or writing                                 micro services is completely easy                                 maintaining is a little bit harder                                 because if you have a micro service and                                 we had the larger that the longest one                                 is kind of about three years and they                                 get into real troubles because it's easy                                 to add no new functionality                                 it's really hard to get rid of old                                 functionality so maintenance doesn't                                 always doesn't only mean to add new                                 features it also means to get rid of old                                 unused features so how do you detect you                                 have                                                                   cloud somewhere how do you tact which                                 micro services actually unused any ideas                                 logging logging network traffic analysis                                 funny things happened and I'd let it                                 blow up yeah mmm it works it's yeah most                                 of them know of a few funny stories so                                 network observing the network traffic                                 while logging or wire kind of a sniffer                                 or something like that or east to mesh                                 works rather well ish but only if the                                 functions you want to remove for really                                 frequently used so we had the lovely use                                 cast as that the annual end if you                                 calculation got removed well it had no                                 traffic the whole year and you cut me                                 and the other thing was that the arrow                                 so there was a kind of you know will a                                 guide source is in Germany yeah I think                                 this was a hazard is it awesome and take                                 some other example some service and from                                 from external vendor and you access this                                 service and you have a fallback case so                                 if the external vendors a service is not                                 available you kind of switch back and                                 show your own recommendations so your                                 own recommendation system this fallback                                 solution will not get hit for a month                                 but once the external vendor is down                                 well then you need it yes too bad we                                 remove this because we didn't see any                                 traffic for months so that code                                 elimination is really a really                                 problematic topic because you                                 essentially have to go through all the                                 micro services you can do the first                                 guest network traffic analyzes log                                 analyzes and stuff like that but                                 eventually you have to go through all                                 the other micro services and you don't                                 even know them because you're done of it                                 in a different operation in a different                                 country or whatever and you have go                                 through them then you can be sure how do                                 you do this in Monell it I go on the                                 method find usage that's it job done                                 we have your reflection sometimes but                                 most of it times the ideas are really                                 good and all this stuff so having a                                 monolith and I can't                                 they could be externally used but then                                 you have a rest em when there's                                 something like that but if it's just                                 Java code find usage and you're done and                                 it's your kind of                                                       part is much easier in the monolith and                                 really hard in the micro service                                 independent data is also cool what does                                 it mean so a recommendation or kind of                                 basic rule is if you have a services has                                 its own data if you have a customer                                 service is it has its own data if you                                 have a billing service is has its own                                 data means its own database okay there                                 that's really nice and it's a real                                 benefit for our kind of micro services                                 because often in in biggish monolithic                                 applications your database is just like                                 spaghetti you try to grab one table and                                 then you have cross queries and and kind                                 of links and all over the place                                 how it isn't a must but it's it often                                 happens and monoliths what you should do                                 is kind of always only reference the                                 main entity of a foreign domain and most                                 of the times that's okay but if you have                                 a kind of links from again from the                                 medical system to some cross-table which                                 would only technically use then                                 something should appear to you that it's                                 wrong so the argument is independent                                 programming languages and frameworks                                 that's true in theory and it works                                 really well if you have HTTP and JSON as                                 transport layer if you go into a kind of                                 messaging which is also because you                                 don't always it's the traffic is only                                 defined to be lightweight so it could be                                 HTTP was chasing but it could also be                                 messaging like Apache Kafka but then I'm                                 not quite sure a colleague of mine is a                                 lot into Haskell I'm not quite sure if                                 there is a Haskell client for Kafka I                                 don't know but                                 but most of the times you're pretty safe                                 if you're in Java our some jvm language                                 at least and the other thing with                                 messaging is that basically if you do                                 messaging you're actually from the                                 architectural point back to kind of                                 having an Enterprise Service bus again                                 but you replaced your old cruddy XML                                 service bus with messaging service bus                                 but it's basically the same from a                                 architectural style but at least it                                 works a lot better than the old age AES                                 piece so and the other thing is data                                 consistency and transactions if you have                                 a customer service one database one                                 service and you have an address service                                 one database one table on service this                                 is this pattern is called entity service                                 so whenever you hear it run but I've                                 seen this and now what happens I create                                 I'm kind of data users your M service                                 and I create a customer one call and                                 then I create address one second call                                 and then I want to create address - boom                                 Network failure whatever blows up so                                 what do we have now we have one customer                                 and one address but actually he has riad                                 races bad we create a trash data and                                 what happens in the model if if you're                                 properly set up so you if you're either                                 using spring or properly set of Java                                 Enterprise you have a transaction                                 interceptor usually most of the people                                 are not aware I mean you're the good                                 guys or ladies you know all this stuff                                 but still it is kind of oh yeah there                                 was a transaction usually don't take                                 care because what happens the outermost                                 kind of transactional class whether it's                                 spring or it's it's Java Enterprise kind                                 of looks                                 is there a transaction open if no I                                 create one                                 I started transaction and then you can                                 kind of nest all those service calls and                                 call themselves and whatever                                 and on each layer the check is the same                                 is the return section open oh yeah it's                                 already open so I do nothing I'm                                 completely transparent and then the                                 mascot goes down does something the                                 database updates the user updates the                                 addresses and so on                                 and it goes back back back back back up                                 and on exactly that layer where you                                 create it or open the transaction you                                 either commit it if there was no problem                                 so no no exception gods from the trend                                 where the transaction got opened on this                                 layer you either commit the transaction                                 or you rolled it back if there was a                                 exception happening so if some                                 colleagues didn't care or if you                                 yourself from happening to me as well I                                 didn't care as much as I should and I                                 did some stupid things                                 and while creating the address I                                 overlooked that there is a mandatory                                 field and I didn't have it and boom                                 exception is blowing up what happens a                                 rollback so all the stuff is rolled back                                 your data is clean of course your your                                 your clients will complain that the                                 application isn't probably working but                                 your application is clean and again                                 depending on the business for Netflix                                 they told oh it's on here but in on the                                 if your insurance company or a leasing                                 company like doing leasing for houses so                                 one damn entry in the database might                                 represent a value of ten millions of                                 euros so you better make sure it is                                 really good data in the database and you                                 don't trash your data but it completely                                 depends in a business case sometimes                                 it's okay to not always have the correct                                 state till depends on the use case but                                 doing boring applications like I do I'd                                 rather have it on the safe side and my                                 number one priority is keeping the data                                 safe so how do you do exception handling                                 or failure handling let's call it that                                 way in micro-services do it everyone                                 anyone did program see low level see                                 yeah okay so how did this look like you                                 have one call to a method                                 it does something and then you get a                                 return value and then you have kind of                                                                                                         cleanup and and doing rolling back or                                 whatever and in the Microsoft world you                                 have to do exactly the same for each and                                 every method called outgoing there is no                                 I don't know do you know by the way yes                                 yeah sorry                                 we are currently migrating to some state                                 machine stuff there is a command and                                 then use persisted and then yeah you go                                 step by step by step and you could                                 recover all the steps whenever is fair                                 welcome back to                                                         big change which happened in                                                                                                                databases transactions got introduced                                 and since then we are used to just doing                                 stupid thing and if it blows up well                                 then it blows up the data safe if not                                 then we are back to what we had to do                                 and I know oldish banking applications                                 written in COBOL and the attacks like                                 the same thing word use for each for                                 each table they had two fields status in                                 the sub status and so if you create kind                                 of you have to use entry you create the                                 user then you store I created the user                                 status one status to is I'm about to                                 create the addresses and then the sub                                 status is kind of a counter how many                                 addresses you added okay and you have to                                 store this away with the transaction                                 with a go to database with committing                                 every day or every single step because                                 you did an external call and then if                                 something happens on your local side and                                 you blow up and you do a roll back                                 because of locally blowing up then your                                 status is gone so you have to kind of                                 for every out pounding interaction you                                 do you have to properly commit your data                                 and update the status in every damn                                 table this is possible or you can go the                                 message way it's a completely different                                 way of thinking be aware it's possible                                 you kind of use                                 like a process engine like a Munda or                                 something like that we're kind of the                                 proces ancient does the state tracking                                 for you but it's essentially the same                                 you have to do steady state tracking for                                 every outgoing step because if you call                                 multiple other services and something                                 blows up then you are in totally                                 undefined state you blow up the external                                 system blows up with some                                               even have a clue whether the address got                                 stored or not because you don't get an                                 information whether the storing did work                                 in the database and only done the                                 response blew up or where it blew up                                 before it should simply have no idea                                 okay so it's it's a little bit more                                 complicated failure handling is really a                                 huge part usually it's                                                 functional code really productive code                                                                                                      it's possible right but be aware and so                                 that that was my recommendation why I                                 recommend to rather cut large services                                 because inside your service all the                                 things they do inside your service there                                 you can still use a commit rollback and                                 automated front section handing but once                                 you do a remote call well then you have                                 to do state handling you can also do                                 this is also a reason why a lot of those                                 things lately they fell on the knees                                 because you don't see this it works                                 really great until you have the first                                 problem and then you kind of try to                                 repair your data for weeks so I saw many                                 applications or many micro services                                 which kind of after two years the                                 completely rewrote that stuff and switch                                 to two messaging so okay next one                                 because running out of time                                 Netflix does all that haha Netflix                                 doesn't do this because they don't need                                 to the business is different if they                                 lose a transaction who cares what                                 happens if you click on the play button                                 and Netflix doesn't play nothing exactly                                 nothing except that you will probably                                 after                                                      what's going on press again and if it                                 still doesn't work then you've fridge a                                 beer from the fridge you grab a beer                                 from the fridge and then you try it                                 again or you go to sleep so ok giving up                                 so it's not important for them because                                 nothing happens yeah you think about                                 banking or insurance companies or                                 medical applications yeah oh my heart                                 please make a pacemaker well had held an                                 arrow so probably not a good him                                 smallish other parts the fallacies of                                 distributed computing we all heard this                                 in university and I just want to go I                                 mean probably notice if not read it up I                                 don't have time enough time to explain                                 him because there you can read write                                 books about it but the latency is zero                                 how much time does it take to make                                     million invocations to a java method no                                 not not not zero but kind of you are in                                 the                                                                     area if you do this concurrently                                     threads how many seconds does it take to                                 do                                                                      many hours so slight difference so don't                                 do n plus one where you kind of iterate                                 over a list of thousand entries and two                                 shows come say a for loop in the service                                 way there you need an additional service                                 method on your target where it kind of                                 takes a list of IDs or whatever so you                                 have to kind of you can't do it in a for                                 loop anymore well that that's obvious                                 once you hit it and you wonder why this                                 thing takes                                                        change it but yeah it's anyway I read                                 this up if you didn't know it that's                                 pretty good testing is also funny                                 because how can you test all those                                 things what I've seen so far is most of                                 the kinds have a big installation of                                 basically applicated the production to                                 smallish boxes or virtual machines but                                 it's one-to-one                                                          and then if you want to test your                                 customer service update well then you                                 deploy your customer service your                                 updated new customer service to this                                 test installation and if it's green you                                 can deploy it to production that's great                                 except if the other team you don't know                                 about at the same time updates to                                 address service and your test is just                                 green because the address service also                                 got updated or you get failures and you                                 wonder what is wrong but actually you                                 did nothing wrong but someone else is                                 concurrently testing on the server                                 because not every developer is having or                                 you can't boot up                                                      docker it's not not possible so it's a                                 bit complicated and the communication                                 overhead is quite large also the other                                 thing you could do is locally mock away                                 things                                 the smaller you cut your micro services                                 the kind of smaller you have to do your                                 mocks and then you have kind of you have                                                                                                      mock of user service' and kind of every                                 after a while every dime of them behaves                                 different of the mocks because it's not                                 a reality it's just the mocks and they                                 probably have been okay at the start but                                 over two years they kind of diverged                                 from the reality so the mock doesn't                                 reflect reality anymore                                 but you will test against the mock and                                 in production it behaves completely                                 different you mock the hell of the                                 autofit project capture and replay is                                 okay to some degree you have to replace                                 things what I've seen is h                                       interesting project is kind of but also                                 has a lot of overhead it's kind of for                                 every micro service for every box you                                 kind of have a proxy in the middle which                                 gets all your traffic in coming out                                 coming and you can kind of like a fiber                                 split split it out so you get your data                                 directly from your production system                                 kind of duplicated                                 to your test box and this is also                                 sometimes really okay but of course also                                 has limitations so what's the take away                                 problems with monoliths can be solved                                 between micro-services this promise is                                 completely true definitely sadly the                                 other thing around is also true it's                                 basically it's two coins of the two                                 sides of the same coin and this has been                                 forever since because from the                                 architectural style the the soul which                                 we had in                                                             exactly the same except that they're                                 using different tools soap and an XML                                 and now it should be rest or messaging                                 but the architectural style is almost                                 the same actually even remotely GPS are                                 the same architectural style and it'll                                 work out well okay                                 for some problems it's to do but for                                 others not really so there are a lot of                                 takeaways for micro services this is                                 knowledge we've built up in the last few                                 years about Microsoft is not lost                                 because actually you also have those                                 problems in monoliths whenever you go                                 out to a different system for example                                 you have a document archive and you scan                                 in a document are too bad the first is                                 the birth certificate the second page                                 was some medical document and you see                                 this and say oh I should split this in                                 the middle and actually my one scan PF                                 is actually two PDFs so how do we do it                                 you delete the original document you                                 split it you upload the first site as a                                 single PDF and the second page is a                                 single seed pdf okay so three steps okay                                 speak with me I'm kind of to model it                                 and I talk to my document archive                                 okay removed the original document first                                 step upload the first page second step                                 upload the second page third document                                 boom inconsistent data                                 so whenever you go outside your own box                                 if you kind of leave your transaction                                 guarantees behind then you have to apply                                 the same tricks then you deal with                                 micro-services and this also happens if                                 it will among all it we can use circuit                                 breakers what is the circuit breaker for                                 in it's really really useful I consider                                 our document archive is down and we use                                 a lot of data from a document archive                                 like viewing contracts and whatever so                                 what happens if some thread some user                                 requests clicks all I want is this                                 documents like an electron shocked in                                 luck this is a thing in Germany so you                                 kind of basically almost every third                                 page invokes something from the document                                 archive and you hit it what happens oh                                 it will request your document archive                                 this is temporary unavailable but I                                 don't kind of blow up immediately but I                                 kind of only blow up off the time out of                                 five minutes                                 so this Fred is gone because it's taxing                                 the request to the end server okay and                                 the second user clicks and inside a                                 minim in a minute every                                            Fred's you had on your box are blocked                                 waiting for the document archive for                                 five minutes so how can this be sold why                                 a circuit breaker in the spring world                                 you know you use a I forgotten name                                 Akasha anyway I basically it's a map on                                 every outgoing call you remember oh I                                 have this connection I started it there                                 and then kind of if the next call goes                                 out of the system you know how many                                 calls are open and if it's a more than                                 five calls of them already I look at the                                 average times they are pending and if                                 this is too high then I immediately                                 throw because before I even connect to                                 the remote system so if the threshold                                 gets to hold too high                                 I immediately blow up ruins and and                                 throw a remote system busy exception or                                 something like that and the business                                 code can then catch it of course he can                                 then present to the user all the                                 document archive is temporarily not                                 unavailable blah blah but you don't                                 block it it's not nice it's a failure                                 situation but you don't block and                                 and get down your whole application at                                 least it's still working they can do                                 other stuff where they don't need                                 documents so XA is the same thing and                                 yes you can do nicely build modular                                 monoliths as well and Excel fontaine                                 that the maintainer fly with the base                                 did a nice talk and it will probably                                 find it in Google onion YouTube                                 questions yeah has anyone is there any                                 question you would like to ask now                                 before we get to go into the break no no                                 questions come on no questions okay                                 so then it's time for a coffee break now                                 and we will see each other again in                                    minutes at                                                             again so thank you very much                                 [Applause]
YouTube URL: https://www.youtube.com/watch?v=7Z6sgrMgy9k


