Title: Berlin Buzzwords 2014: Martijn van Groningen - ElasticSearch - Percolator #bbuzz
Publication date: 2014-05-28
Playlist: Berlin Buzzwords 2014 #bbuzz
Description: 
	One of ElasticSearch's core feature is the ability to do search in reverse with the percolator. The idea is that you ask your search engine if a document matches a set of stored queries rather than submit the query against your stored documents. This feature is very effective for things like classification, data aware routing, even alerting and monitoring of events. This session will focus on how to use the percolator, its features and how it internally works.

Read more:
https://2014.berlinbuzzwords.de/session/elasticsearch-percolator

About Martijn van Groningen:
https://2014.berlinbuzzwords.de/user/189/event/1

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	                              okay uh let's begin                               hi I am Martin I work for lastic search                               and I'm going                               talk about the percolator so in this                               talk I'm going to give you overview of                               what the percolator is where you for                               what you can use it for how it works                               some tips and tricks oh yeah what is                               happing okay this is I'm not sure why                                this is happening                                come on not funny                                I am hopefully                                you see when I'm okay why is it okay                                thanks                                this is a very bad start I had no idea                                why is but some that settings so I will                                talk about the percolator what it is                                what you can do with its its features                                and how it works and some tips tips and                                tricks so before we talk about the                                percolator let's talk about the less                                exerts less research we index data we                                search that's what we're used to this is                                an example where we use the index and                                documents you see we do a puts we index                                in the name index in the index called my                                index with with the type and mapping my                                type and                                                                is the actual document with its fuels                                and values so if you add a document fine                                you can define query you say okay I want                                to search an index my index we use the                                search endpoints and we define a query                                as the payload in this case we define a                                match query which is it's the most most                                common use query in elasticsearch and                                used to match the document and we define                                the filled body with the with the value                                coffee and you know hopefully we get                                something back and obviously we can send                                it back so we we have index document to                                assert and we get we get back hits which                                are the documents we just have indexed                                but that was different now let's let's                                percolate so instead of                                of indexing and document we're going to                                index a query and if you come if you                                look at this this call it looks similar                                to the index call now in difference here                                is that we index into a dedicated type                                called dot percolator and we define the                                body of that of that called the payload                                is the query and not the data itself a                                document here we also defined the query                                the match query the similar query we saw                                in the Search API when we've added a                                query we can use the percolator                                percolate API in order to figure out if                                a query match with documents we want to                                percolate we want to verify and this is                                an different API than the Search API but                                it looks similar I mean the the URI is                                so we have to fire the index we want to                                we don't want to percolate the type and                                we used to percolate endpoints but as                                the the the payload of that of that call                                is not a query but the documents and if                                we run that we get back a match and it's                                the query that it matched with this                                document so we do the reverse it so                                instead of of searching for data we are                                looking for if our documents match with                                queries we have registered now if you                                look at this response we it's it tells                                you how many how many queries have                                matched how many how many matches there                                are so this is we only I only show the                                first match but in but by default it                                just returns the ID of a query that has                                matched and it returns from some general                                header information how long it took and                                how many shards that request Wenzhou                                which I will talk about a bit later but                                the essence is we Mets queries so what                                we did is we did the opposite we                                reversed our flow effectively of finding                                stuff and the reason why it works is                                that both data and documents and queries                                are defined                                Jason so for elasticsearch deaf                                community might as well has been the                                beam document but it just follows the                                structure of of the queer dsl alice                                absurd has and that's why it happens to                                use to to store it and because we put it                                in this special percolated type it gets                                treated as in special ways in that so                                that that query effectively gets loaded                                and when you percolate that korea gets                                 checked with the document you motor                                 purple eyes so that's in essence what                                 the percolator is what question is why                                 would you want to do this what what is                                 useful for so let's look at some use                                 cases the most obvious use case for the                                 percolator is monitoring or alerting you                                 you store queries you want to view you                                 want to be alert alert it off and once                                 data gets indexed you want to be                                 notified by that it's the most obvious                                 use case and you know that can be a lot                                 of concrete examples for its price                                 monitoring news monitoring weather                                 monitoring stock alerts alert me when                                 this particular stock is below or above                                 a certain value that's that's the use                                 case okay it's a big query i mean                                 relatively big so here what we did here                                 we i'm going to register a certain alert                                 something i want to be notified of and                                 i'm interested in certain TVs i I have                                 my own a special a TV that I want to buy                                 but I don't want to paid you know six or                                 seven euros I want pay up to it for up                                 to five hundred euros so we we in this                                 case with an alerts index where we store                                 the percolate Aquila scene it can be any                                 index you don't are not any index can                                 can contain the percolator type and we                                 define the in this case a boolean query                                 and we should be from notified if the                                 price is lower than or equal to than                                     and the product name is smile atrophy or                                 something else I don't want to putting                                 any brands here attractive stay turned                                 out Tobias myself so you see we've                                 arranged query and a match community and                                 if you not familiar with like a that's                                 asserts that the mask we just mentioned                                 specific terms and arranged query just                                 between a certain range it will it will                                 you know match a document in this case                                 they both need to match because we                                 combine them in a bullying query with                                 most mass classes okay where this query                                 registered and now the document gets                                 indexed at happens to have this Latifi                                 below the specific price so this                                 products with a name and price and yeah                                 but now it's it's indexed but you know                                 you know notified bias so you need to                                 use the need to use the percolate API in                                 order to get notified by it so we and                                 this this case with index documents and                                 now I'm actually sending the data twice                                 but now to the percolator by in order to                                 get notified when it's called returns it                                 will it will obviously match by the                                 query so I could have have logic in my                                 application that I then notify the                                 specific users send an email or send a                                 private message in my application so                                 that he is notified by the fact that                                 there are that there is something that                                 he's interested in but we are you know                                 it's we are sending it twice                                 so maybe the amended there's a better                                 way to do this whenever you index                                 something interested in returns response                                 so we've indexed that the fact that you                                 know we we update the document we index                                 it again and the price is now four                                 hundred ninety nine in this case it will                                 return and what in there a nice response                                 it contains the idea of documents and                                 that can be used by the by a variant of                                 the percolate API is called percolate                                 existing document API apparently it's                                 not you know it's not a very creative                                 name but in this case I effectively say                                 use this document as in this                                 the index and use that to to percolate                                 and it says in this case effective what                                 happens is that to get API in a                                 percolator APR emerge to get API in                                 lastik certs is an API tells you that                                 that allows you to retrieve a document                                 ID and you know this you Scott's                                 embedded with this API so in these cases                                 we we index into the prices index so and                                 put and with the tie price and I t                                     that's the the the first index we define                                 and then a spirit index we define the                                 alerts index which is where the query is                                 stored and when we when we bring that it                                 will obviously also be returned positive                                 so it will tell that it match but the                                 key is here that you don't need to                                 specify it twice so the idea is that                                 whenever you index your application                                 index data into less desserts you get                                 back the response and it folk one post                                 post call effectively to figure out if                                 any of of the saved searches or user                                 saved queries to match without have to                                 sending it twice and that is effectively                                 how another sub search you can implement                                 the the monitoring or the alerting use                                 case with the percolator there's also no                                 unused if you can use the last where you                                 can use to percolate for and I like to                                 refer to this the query feedback use                                 case it's a bit cryptic but idea is that                                 you are going to you know you kind of                                 see you're storing the queries that                                 users are executing on your system you                                 store them nice obsess with some                                 pre-processing I presume and by storing                                 those queries you effectively are                                 capturing valuable information you're                                 capturing how users are searching in                                 your site what they are interested                                 interesting that is very important                                 information not for you but also for                                 users are using a system and in the use                                 case of in this use case we're talking                                 about                                 like a marketplace or in and kind of                                 ecommerce site where where consumers can                                 sell products but obviously when you've                                 when a consumer is going to sell                                 products it's going to fill in some                                 properties about it and a price of how                                 much is cost but it's you know it can                                 submit this advertisement and hoping                                 that someone will find it but but if you                                 are storing users users queries you can                                 expectedly tell the user before you know                                 before actually saving the advertisement                                 is this going to match with something so                                 by effectively in the Edit form by if                                 someone changes the property on                                 attribute if you learn the percolate API                                 that whole edit from formation turned                                 into a document you percolate against                                 the users queries and it will tell how                                 many queries have matched and that's                                 very information so you can for example                                 pick a price range where you know at                                 least people are looking at your                                 products looking at you know at the car                                 you're selling at at at a real estate                                 object you're selling something like                                 that so this is a really practical use                                 case where you can use the percolator                                 and another use case of I don't have                                 examples of the previous one but how to                                 use it but it's similar how you use use                                 to percolate that I you just have to                                 store a queries another use case is a                                 classification use case where you like                                 to automatically categorize tag                                 documents that are going into last                                 exerts a factly what what a workflow is                                 is that before you index it you you Pro                                 collect the documents and the returned                                 the IDS queries that match it uses IDs                                 to categorize a document for example you                                 can have a percolator community stored                                 that they say h                                                         to do some geo tagging that is custom to                                 your to your to your application                                 and automatically you know categorizing                                 taking documents for example if you                                 store percolate the queries that have                                 certain terms that are unique to a                                 specific category we just have to rent                                 the document in the percolate API and                                 you will know you can tell what what tax                                 that don't get me need need to have this                                 is a pre-processing step you obviously                                 need to implement an application but you                                 can use to percolate API in order to                                 enrich your document before before                                 saving it into elasticsearch obviously                                 how to identify patterns that is                                 something the pro guide doesn't do you                                 need to store queries that identify                                 patterns and you know you may need need                                 to you know do some do some resource                                 what are the appropriate terms or words                                 that encapsulate certain certain                                 categories of tax you you can I mean                                 what I've seen is that you can you can                                 use aggregations in order to find out                                 for specific keywords or categories what                                 are important values important terms and                                 and and put that I will save that as a                                 percolator query so let's not another                                 use case when you can use the percolator                                 form okay so we find out what what the                                 percolator is what for what is useful                                 for now let's let's dive into the                                 percolator let's dive into how it                                 actually works so the the percolator                                 when you index a query what it does it's                                 it stores that which effective document                                 it stores a document on their skates                                 there but it takes the whole the query                                 you have to find in a document parses it                                 and and saves the stores the first                                 version of it in memory and and that                                 happens in real time so whenever you                                 you're adding queries you change the                                 queries that happens in real time                                 there's like a collection of quick of                                 queries that that's that that's around                                 when you then execute the percolate API                                 a single dog that single donkey make                                 you've defined in a percolate API gets                                 index into a special in-memory inverted                                 index one sets have happens all the                                 queries that are stored                                 are you actually are used linear I in in                                 in serial are executed on this in memory                                 index and it will use safe water it                                 matches or heated matches that is in in                                 you know what what it does after you've                                 executed the prototype IDs in memory in                                 it's the third up and you can do the                                 next execution but the important thing                                 is that you know on the shore level the                                 execution is is linear because it                                 evaluates its q                                                         special data structure that somehow can                                 decide if it matches with this query                                 then I don't need to execute these                                 communities or something like that                                 that's not not the case but ProGlide                                 there is a distributed feature API when                                 you store queries in the index they                                 catch take it effectively physically                                 stored in in shorts each index analysis                                 has a number of charts partitions where                                 the data gets divided between and the                                 pro-qadhafi are executed in parallel                                 across those charts and that's obviously                                 very useful aspect and both can and does                                 speed up the time it takes to percolate                                 documents especially when you have a lot                                 of queries also any index can never                                 percolate index is not something                                 something special so you can if if                                 you're if you're queer sort of fighter                                 between multiple indexes you you can use                                 egg you can use percolate across                                 multiple axes                                 any elastic search there's a feature or                                 like a distributed feature called                                 routing which allows you to control you                                 know what partition is not really what                                 partition but what part of                                 of the data set is being executed                                 routing is something you use all the way                                 from indexing till searching or or                                 percolating and that that can can reduce                                 the execution so here an small ID you                                 know this is let's say with three nodes                                 with three three shards and each each                                 shard has a observe replica in this case                                 green is a it's a primary short and and                                 a wide small square in size a replica                                 short the period API the small clients                                 Quine square or is the client excuse me                                 percolate request and that that                                 privilege request gets divided across                                 all your all your nodes in a cluster                                 that that you know your programs with                                 Chris was a target as for so the this                                 does that mean how you how you can scale                                 out with with a percolator this I can                                 examples of the multi-tenancy of the                                 percolate API you're going to find                                 multiple indexes I can define aliases                                 and percolate your your documents again                                 against your registered queries you can                                 define routing on top that's what I                                 talked about routing obviously you need                                 to use it an index time as well because                                 what you need to route your queries with                                 the same values you will route the pro                                 credit request for or if you searching                                 your search requests and if you if you                                 do routing then effectively the                                 percolate values need to go to one short                                 an execute their it doesn't need to to                                 look at all the queries and this is how                                 you can reduce the amount of queries                                 being executed during percolation time                                 and you know this because it's a linear                                 execution if you if you be smart with                                 how you how you route what indexes you                                 you send a program okay so you can it                                 can be released                                 you know first operation and not to say                                 that you know if you have                                                don't need to mean then this is you know                                 doesn't matter but let's say you have                                 five million queries something in that                                 in us those in those numbers that's                                 something that you should take an                                 account because if executing one is you                                 saying some members one executing one                                 query on on the on the in memory index                                 takes one milliseconds if we have fifty                                 million queries it takes                                                 more time than that                                 so that's the distribute aspect act                                 about that's that's you know how you how                                 you can scale scale out with it                                 the perkele yes so another aspect I                                 talked about is death percolate the                                 computer are stored in a special type a                                 percolator type it's it's prefixed with                                 dots percolate and that's emphasize the                                 fact that it's a hidden type and and                                 here in edit time means that if you by                                 default search because any index can                                 contain procreate the queries but can                                 also contain normal data your documents                                 and normally in if you use the                                 percolator then those Procurator                                 documents almost sorry                                 that's I'm quickly dehydrating here so                                 those those those percolator documents                                 with our queries in memory eventually                                 are not being being taken into cow into                                 account in normal search operations                                 because usually don't care about that                                 like you care about you document where                                 you search when percolating you only                                 care about the percolator queries that                                 are stored in the index so they're not                                 returns so it can be surprising it I                                 live in X a lot of documents which I                                 provide but I'm not seeing them because                                 they are hidden away by default if you                                 want to see them you need to be specific                                 about that and included in the site when                                 you search in a search search request                                 you know if you want everything also the                                 hidden types you can you say type and no                                 score all coma                                 does percolator and you get all the                                 results back but that's justice that                                 that let's use the current                                 case it's because queries and data can                                 coexist in the same index if one if                                 that's chosen a protractor also has a a                                 civic mapping that prevents the query                                 from being indexed into the inverted                                 index it is available in the in a in the                                 document in the JSON you sent to elastic                                 search it remains in the JSON when you                                 get back but on the query and all its                                 subfields you cannot you you cannot                                 search because that doesn't make sense                                 to build infrared indices on top of this                                 obviously you care about it you change                                 the mapping and you know up to you but                                 but if what we don't do this because                                 it's not it's not needed they they are                                 there are queries they are not document                                 so that's why we disable that by default                                 something else when you set a perk ID                                 the query like I said it's just a                                 document and the query field and also                                 fields in a diskette treated differently                                 but you're free to associate any other                                 field with it and those tools do get                                 indexed so in this case I add a fuel                                 organization ID to it - eh - my                                 percolate the query those fuels are met                                 like I said to get index and there are                                 certain features on top of the percolate                                 API that can interact with those                                 metadata fields in this case I told the                                 percolator to percolate apical document                                 but only progressive queries that have                                 to feel organization ID with this XY set                                 value also this can reduce the amount of                                 queries being evaluated because in the                                 end is a linear process it's very nice                                 also if you don't care about other                                 queries being evaluated just because you                                 don't want I don't know                                 organisation ABC to all those queries                                 should not run on this particular                                 document you can use filtering for that                                 percolating is a CPU intensive process                                 can take a lot of CPU I mean my                                 experience this this this MacBook Air                                 goes on fire when I evaluates millions                                 of queries on a particular document                                 there's no way of stopping them display                                 this beast then but yeah so that's the                                 important thing to remember so there are                                 specific storing strategies you should                                 keep in mind when when you see a                                 percolator                                 like I said locate data and documents                                 can can coexist in the same index if the                                 number of queries are small that's the                                 way to go I mean it doesn't matter I                                 mean it's fast but I think my experience                                 when you know have growing over a                                 hundred thousand two hundred thousand                                 depending on your hardware of course                                 queries then it will it start to take                                 significant resources of the notes                                 you're running with so then it's time to                                 think about a dedicated percolator index                                 where only the queries are in the the up                                 side of hits you can have dedicated                                 storing configurations for it you can                                 even allocate specific notes and make                                 sure that those percolator indexes are                                 only allocated on those notes so to                                 separate the resources being used                                 between your normal search and your                                 percolating and obviously you can just                                 start up a second cluster I mean it's                                 also possible when you go with a                                 dedicated per Kleenex I haven't written                                 it down here but it's important that the                                 mapping that is in the regular index is                                 also in in a dedicated percolate index                                 because when those queries when you                                 register a percolator query a lot of                                 queries lie on settings in their                                 mappings and if those mappings are not                                 there it will it will assume a lot of                                 defaults and your queries are not parsed                                 as you expect them to be parsed so                                 that's something to keep in mind when                                 going with a dedicated percolator index                                 okay                                 let's talk about the progressive                                 features                                 on top of the you know to percolate API                                 there's also a specific ape specific API                                 used for counting it's called the                                 percolate account API and the difference                                 is that instead of inner scope regulator                                 you to percolate underscore per ablators                                 let's count and it you will just tell                                 you how many percolator queries have                                 matched in the case you only care about                                 that obviously use this API evil you                                 know obviously do things that you thank                                 you that you don't need I mean it what                                 poor friend doing thing she don't need                                 to in the end I you showed that you can                                 filter by a filter but you can also                                 filter by query I can on the metadata of                                 the author of the of the percolator                                 query and yeah the the only editing on                                 top of up top of the stuff using filter                                 is that queries day they can be scored                                 if he if you want to so that allows that                                 that allows me to go to the next slide                                 because there is some sorting scoring                                 mechanism in the percolator api it's                                 limited oh but it's there and it allows                                 you to score the queries based on its                                 method you define a query in this case                                 click ID maybe not it's like a filter                                 but let's say you just do another query                                 which I'm going to show you here let's                                 let's do something funky let's use the                                 functions functions Co query which is                                 really really cool and in this case what                                 is functions really does is giving a                                 relevance on owner on the only create                                 date of a of a cooling being registered                                 and in this case we have in this case we                                 have metadata in the in a query called                                 create and we want                                 recent queries to be shown before the                                 less recent queries                                 and we do this in exponential skill and                                 that starts from today and three years                                 ago which is roughly                                                   course the queries of mean the queries                                 of last month will end up on the top and                                 that's nice when wait am i mean because                                 the percolator api can't skill it                                 doesn't it's I mean you there's no time                                 to evaluate all those queries I mean if                                 you are going to show something if                                 there's not a machine consuming all the                                 matching queries but a human located it                                 it might be useful to have some some                                 kind of ordering sorting on it then you                                 can do it firefighter function score                                 query and this is why why it's that's                                 useful a normal query wouldn't match                                 wouldn't match swell because in in in a                                 security and of seen there's tf-idf when                                 you have queries and documents it's fine                                 but in a percolator case we and what                                 this one documents is in is in memory                                 index obviously the the text property                                 steve idea there they don't make sense                                 then that much TF may make sense but the                                 IDF doesn't it definitely doesn't make                                 sense when you ask you this the the                                 matches also include score so that's you                                 know make sense you can even do                                 applications on top of the metadata of                                 the queries in this case what what                                 happens here we create a terms education                                 on the click ID so it will show the top                                 the top click IDs of all the queries                                 that have matched it's for the terms                                 aggregation does showing top terms based                                 on on documents as match in this case                                 documents our queries                                 there's also highlighting support in                                 this case we are we're registering two                                 queries and I made a mistake here it                                 should be does percolator instead of                                 underscore percolator                                 silly mistake and in this case we we                                 have brown fox a lazy dog as to                                 percolate the queries when we percolate                                 the document with has a body field                                 called quick brown fox jumps over the                                 lazy dog and we tell the program to                                 highlight on the body field it will                                 highlight each match what highlight each                                 each match so it will tell you how the                                 documents or actually understand how the                                 query will highlight the documents and                                 in the first case it's it will highlight                                 brown fox in the second case it will                                 highlight the lazy dog                                 and finally there's also API called a                                 multi percolate API which allows you to                                 combine multiple percolate requests into                                 a single API call and double read you'd                                 use the network overhead you have to a                                 cluster so instead of is invoking                                 hundreds of requests you can invoke one                                 chromecast with one big body effectively                                 and the way you send a request to the                                 multi percolate endpoints is in in in                                 such a way that each each line each line                                 in the in the request body tells                                 effectively instruction this case                                 percolates and in the next line contains                                 the document want to percolate the                                 second the third line tells to procreate                                 in existing documents so that you don't                                 need to specify the body again in the                                 next line it's just an empty bracket but                                 should be line separated all the                                 commands and it's just one one call to                                 elasticsearch and this is it this is                                 what I have talked about a percolator                                 and its features and there is time for                                 questions                                 Thank You Martine for your talk if you                                 have any questions please wait for the                                 microphone raise your hand                                 hi thank you                                 how does replication of the percolate                                 queries work does it follow the indexes                                 themselves or how does replication work                                 with so if one if one node fails for                                 instance it's not those the percolate                                 queries are held on another node yes a                                 replica node yes so what a moment and                                 and and an initial question Enterprise                                 not used for percolator but using X                                 requests this returns its indexed on                                 both copies so so then another could say                                 we go down and you know your your                                 percolate the query still in your honor                                 and your another available on that chart                                 and yeah let's if it doesn't answer your                                 question question okay okay I don't see                                 anything on the lights so can you use a                                 query to do a multi percolate so query                                 for documents and do percolate on those                                 documents yes yeah it's it's use the                                 document right and you you can use query                                 for it as well and a Search API okay so                                 using a query to produce a list of                                 documents in peril a dos I mean I didn't                                 fill the last part so basically if I do                                 a query for say every document indexed                                 in the last five minutes and I want to                                 percolate those with the work yes yes I                                 mean sorry                                 yeah the query part or the filter part                                 you can make sure that you only Avella                                 bite those documents in a time frame                                 only your only the queries are only the                                 queries are being evaluated in a time                                 frame                                 oh no no no okay then I'd misunderstood                                 the questions yeah so the reason I was                                 it was because you can percolate on a                                 document ID so I was like okay what if I                                 use the query to produce multiple                                 document IDs no that's that's not okay                                 no not anything might be icon right                                 thank you we are an advertisement                                 company and we have lots of keywords we                                 have to match you know brands against                                 those keywords is there a way like as                                 data is indexed and if we percolate let                                 against a brand like adidas or like to                                 somehow get the results streamed like                                 you know                                 so you percolate against a query like                                 you know all the cubes which have brand                                 adidas but as indexing happens is there                                 a way to actually get that by post or                                 you have to do always pulling you have                                 all you have to check it's nothing it's                                 not pushed now now so if you want to                                 know if something matches in assembly                                 you need to invoke an API call so I did                                 I have to like a percolate call and then                                 again for each of my queries again query                                 yeah if you want to do it after each in                                 next call you should invoke the the                                 percolate API okay so in and you know                                 you can use the index response in order                                 to to basically construct the percolate                                 next prototype I call it should be cheap                                 because you only have to find the ID                                 okay                                 so just a little follow-up on that                                 question is there a reason why you can't                                 just set a flag to say I want to index                                 this but in the response I'd also like                                 the the percolate                                 I'd like you to percolate it well why do                                 I need to make the second call                                 II mean as as are you talking about part                                 of the yeah I mean you mean as part of                                 the index request is it a conscious                                 design decision that that it's a concert                                 design decision yes                                 so because the percolator by itself is a                                 distributed operation I mean it feels                                 wrong to forcefully bind those two so                                 let's find a post call I mean yeah so I                                 mean but it it's as you know the pain is                                 is less as little as possible                                 yeah time is up so thank you very much                                 for your talk Martine and one question                                 if you guys are using Ferg later I'm how                                 many not so many okay okay I should have                                 asked it in the beginning but I wanted                                 to know                                 you
YouTube URL: https://www.youtube.com/watch?v=ETxJO2FQ_jw


