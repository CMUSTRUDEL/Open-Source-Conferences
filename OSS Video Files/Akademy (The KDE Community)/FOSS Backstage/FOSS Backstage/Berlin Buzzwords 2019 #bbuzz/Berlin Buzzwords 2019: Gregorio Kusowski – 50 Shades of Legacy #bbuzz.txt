Title: Berlin Buzzwords 2019: Gregorio Kusowski â€“ 50 Shades of Legacy #bbuzz
Publication date: 2019-06-28
Playlist: Berlin Buzzwords 2019 #bbuzz
Description: 
	What defines a Legacy System and why is it considered Legacy? Perhaps you are writing one right now, it's just a matter of time to figure it out.

Do buzzwords also become Legacy? In this talk we are going to review one historical buzzword Episode, see how trends repeat over and over, and what can be done to avoid pitfalls. Our behaviour is also related to it, so how are we doing on overall when compared to other areas?

This talk is presented by heycar.

Read more:
https://2019.berlinbuzzwords.de/19/session/50-shades-legacy

About Gregorio Kusowski:
https://2019.berlinbuzzwords.de/users/gregorio-kusowski

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	                              so thank you very much it's a pleasure                               to be here as we know we are going to                               talk                               two shades of Legacy the original idea                               for the name of this talk was actually                               something more that's a negative it was                               like death by buzz words                                            legacy but let's try to keep everything                               more positive so this is the agenda that                                we are going to present today so                                basically a quick introduction about a                                car the company I'm working at hey car                                is a used car market place we are here                                from Berlin we are joining the market to                                bring like different solutions so we are                                not help sorry we are not happy by just                                helping the customer to connect to the                                dealer but we want to go further and we                                want actually to achieve success from a                                customer perspective so we actually want                                to achieve transactions between the                                customers and the dealers but since in                                the context of Berlin buzzwords we have                                this like okay I'm wearing this hat or                                that other hat today I'm not wearing the                                hey car hat I'm wearing more like the                                community hat so I'm from November go                                the name may sound familiar it's like my                                Hamburg or New Hamburg it's a small city                                from Brazil I'm living here in Berlin                                already for two and a half years some of                                my hobbies so just you know a bit about                                myself I'm into cycling mechanical                                keyboards software engineering                                distributed programming so my free time                                is basically mixing around those topics                                next topic then we are going to talk                                about the definitions so we are going to                                cover buzzwords and also what legacy                                systems are so when we talk about legacy                                usually what comes to our heads like                                considering the software engineering                                background is usually linked to                                something bad but if we think on a more                                general way we are going to think like                                okay what I'm leaving for the future                                like are we being good at ancestors                                so if we talk only about legacy systems                                usually and this term is not a very                                accurate because legacy is a bit                                arbitrary to know if a system is a                                legacy or not maybe if we ask like the                                maintainer of Lucine they are going to                                say okay I'm working on a legacy system                                maybe they are going to say no it's not                                legacy but usually it's a system that is                                out of date it's not using the latest                                architecture the latest languages the                                latest frameworks and libraries and                                usually and I mean usually because                                sometimes it's legacy and it also                                doesn't work so it's the time that we                                need to touch the legacy but let's                                consider it usually works some examples                                about this my previous bank in Brazil                                they are still running on COBOL maybe                                some banks here in Germany as well at                                least my current bank I know it's using                                a more JVM stack so I'm quite happy with                                that but also we have some cron tasks                                they are keeping our systems running                                sometimes we don't even know they exist                                but someone wrote them and put it there                                they are keeping the website or the                                system running I also I imagine a good                                part of us here have like a blog and                                probably we implemented this blog a few                                years ago it was using jQuery it's not                                like the buzzword of the moment anymore                                but today since it's not the buzzword                                some people would say okay it's legacy                                now let's think about what we are doing                                right now so let's say I'm writing a new                                micro service I'm using Swift I don't                                use personally but I just try to pick                                one of the language that are coming to                                let's say back-end development so let's                                say I'm writing a new micro service in                                Swift using Kafka and it's like my best                                work so far I'm super happy and                                confident with that is that the legacy                                I'm not really sure a few weeks ago I                                had to fix one                                in production and actually I discovered                                that the data was being generated wrong                                and I I don't have a clear idea on how                                to fix the generation of data I know how                                to fix the wrong data so I wrote the                                script every few days I go there I run                                 the script I fix the data is that legacy                                 like two weeks old and like my new micro                                 front-end I think that that's the the                                 latest term regarding architecture that                                 we are talking about is it legacy let's                                 take a look at this later so now let's                                 think about birth words both words are                                 usually words that are tied or they are                                 fashionable and by fashionable we can                                 also relate with trends that are also                                 time related to one specific time or one                                 specific context so that's what we get                                 from buzzwords getting the hype cycle                                 from Gartner we know how the technology                                 trends they usually work so we have like                                 this over expectation on top of                                 technologies and after some time we have                                 like this pushback where we are not so                                 happy not so confident and after the                                 spirit comes destabilization so as they                                 say it's a cycle and by cycle it means                                 it can repeat also just one quick                                 overview regarding hypes and key words I                                 just got all of them from this blog post                                 hype driven development so there are                                 there is a set of keywords and a set of                                 pipes that are coming and usually they                                 follow the same trend also if you want                                 to check more about this Gartner has                                 this technology quadrant it's pretty                                 interesting to see how what is coming                                 what is hot what is not so hot regarding                                 technology we don't have much time to                                 talk about history and this is actually                                 what was going to give the name of death                                 by buzzwords to the talk it's the AI                                 winter I think for this conference it                                 makes a lot of sense because                                 we had two episodes basically the first                                 AI winter it lasted for around six years                                 in the second one as well basically                                 there was this over expectation on top                                 of artificial intelligence and with over                                 expectation there is a time that we are                                 going to have the disillusion of seeing                                 okay we are not getting the value from                                 that so we invested a lot of money there                                 is no return now let's compare a bit                                 regarding software engineering and other                                 areas regarding legacy so if if I talk                                 to someone that is not coming from the                                 IT background and I try to talk about                                 legacy probably art is something that is                                 going to show up but when we talk about                                 legacy we are not only talking about bad                                 legacy so we have work on computer                                 science from ad from Alan Turing on                                 software engineering when it's not                                 exactly linked together with languages                                 and frameworks we have some work from                                 Kent back with extreme programming work                                 from Martin Fowler                                 on architecture also methodologies so                                 agile I consider as part of software                                 engineering so it's a process and it's                                 something that is a good legacy we still                                 use today there's also one initiative                                 from from Paul Graham from Y Combinator                                 and he wants to design a language it's                                 called art language and actually they                                 run a hacker news on top of that for for                                 a while the idea of the language is                                 actually to be designed to last for a                                 century so he wanted to design a                                 language that is going to last for a                                 century it's a pre interesting approach                                 the language system not ready but the                                 thing is like his giving time to it                                 until he finds the best solution it's                                 worth the the read I never used the                                 language but it's super interesting                                 interesting                                 now thinking when we go to language so                                 art language is not trending yet                                 probably you heard about CoffeeScript                                 and Jeremy is the outer the creator of                                 CoffeeScript then he posted this photo                                 on Instagram and well this is the tweet                                 where he's mentioning the the photon                                 Instagram and he got this comment I                                 don't know if you everyone can read it                                 but basically someone is wishing him and                                 his project owner hot days in hell                                 because of the language like is this the                                 legacy we want to build as software                                 engineers as data scientist data                                 engineers and basically we see this                                 behavior of like people acting in a                                 negative way now let's get back to our                                 legacy systems or not so legacy our                                 recent systems so my new micro service                                 that I was super super proud of what                                 happens when the requirements are being                                 changed or new requirements are coming                                 and what is going to happen if we are                                 talking about this let's say two years                                 from now probably I will look back at my                                 code and I've see I will say like okay                                 now it's legacy like I need to upgrade                                 the dependencies I need it's not the                                 latest architecture or we don't use cafe                                 anymore who knows                                 well I don't need to mention the other                                 ones but then I remember after a meet up                                 I was talking to a CTO he was mentioning                                 like oh we create micro services that                                 are so small that instead of bugging                                 fixing bugs we can just drop the micro                                 service and write it again and I was                                 like okay how how people are actually                                 happy that they can write something that                                 is going to last and we are reliving                                 really this mary condom syndrome that                                 withdraw things away we are not                                 satisfied by them                                 and then we just throw away and rewrite                                 from scratch the impact it has to                                 business is huge and now let's compare                                 with other industries so let's say I                                 have a flat tire                                 should I go to the mechanic and or                                 actually not to the mechanic to a new                                 store or since I'm from hey car should I                                 buy a new car because I got a flat tire                                 I don't think we are getting it wrong                                 sorry we are getting it right and then                                 there's a crack in the basement of my                                 house should I buy a new house                                 build a new house well we can go deep                                 into like health care but then like just                                 imagine like replacing everything or I                                 don't know user creativity for this so                                 what I can see from that we are just too                                 young as an industry so basically how                                 many years of software software                                 engineering we have compared to for                                 example civil engineering or healthcare                                 now let's talk about post legacy                                 basically the moment you are getting a                                 legacy let's say you are receiving or                                 taking over a legacy I have this case                                 was a company in Brazil I worked at they                                 selected one mobile application                                 framework it was giving this cross                                 compilation feature and it was using                                 Java when one point to that means Java                                 without generics Java without                                 annotations as well                                 proprietary firm framework also a very                                 specific UI kit that you could not                                 relate with anything available in the                                 market they made the choice that people                                 were looking at like oh what what is                                 this but then comes like let's try to                                 understand what was the context so the                                 year was                                                                the top one was Symbian OS so the                                 operating system from Nokia the second                                 one was iOS and it was not performing so                                 well Android was you                                 like starting and Blackberry was                                 ascending so what let's say you are a                                 player in mobility what can you do to                                 proceed with that and you need to take a                                 decision and then if you join a company                                 and you get just the first requirements                                 like the first not requirements but the                                 first picture of the system you look at                                 this in what but then you start to                                 understand the context and ok it makes                                 sense I don't know what is going to to                                 happen in this market also iOS was kind                                 of ok but in Brazil it's it's not                                 affordable for one enterprise as one                                 enterprise solution to to have iOS                                 devices for everyone then comes the part                                 of understanding so if you want to take                                 our legacy it's very good if you                                 understand the context of that why the                                 decisions were made when where and so on                                 you can use this more framework to ask                                 the right questions also regarding                                 empathy think about yourself like how do                                 you react to pressure how you deal with                                 deadlines how you deal with unexpected                                 things that happen in your project and                                 also what is your technical and even                                 your family background when we have a                                 project usually we try to deal with this                                 triangle so we try to play with that but                                 it's not only about that like does                                 anyone here never got affected by the                                 things that are now outside the triangle                                 I was affected and unfortunately I left                                 this affect the project but it happens                                 it's like it's my life as well so trying                                 to think about the people that wrote the                                 project that took the decisions so                                 basically how they would react to all                                 the situations and also from a more                                 technical perspective you can also                                 tackle the codebase directly so there                                 are resources those two books regarding                                 refactoring and testing they can be very                                 very useful for dealing with flag                                 sykov basis so just wrap up this post                                 legacy try to understand the context be                                 empathetic with the developers the                                 project project product managers that                                 working in our in your company before or                                 in the product you are working and also                                 consider the the resources like books                                 blog posts whatever is available to                                 support you when dealing with the                                 codebase                                 now the pre legacy I know it's a bit                                 inverted but basically usually we we                                 take over the legacy from other people                                 but sometimes we are writing new things                                 so the pre legacy means the part that we                                 are writing new software so there's this                                 famous quote from Alan Perlis about list                                 programmers and rich Ricci changed a bit                                 so basically programmers know the                                 benefits or the value of everything                                 without knowing the costs so basically                                 try to align expectations with your                                 stakeholders your colleagues everyone in                                 your team about the value that you are                                 bringing with the solutions that you are                                 taking and also the cost also learning                                 and hiring should also be considered and                                 it's also related with the multi-armed                                 bandit problem where the bandit has so                                 many different weapons to use that he                                 gets lost and cannot finish his job so                                 try to think about that also when                                 evaluating tools consider a framework so                                 try to evaluate multiple tools to solve                                 the same problem there are many of them                                 out there experiment so get your choice                                 or your choices experiment with                                 hackathons try to have a time with your                                 team where you are going to work with                                 that without touching production                                 directly and also when considering the                                 MVP try also to consider the are a team                                 or riskiest assumption tests where you                                 are going not to tackle the simple                                 problem that you have but you are going                                 to tackle a problem that is more                                 difficult but you are going to validate                                 your idea bet in a bed                                 also when experimentation avoid the the                                 beer Trappe of following the Spotify                                 model like blindly usually we see this                                 model every time I see this I'm afraid                                 of having this happening like as soon as                                 you ship something people will ask to                                 ship something else and no no we don't                                 need to drop that it's working fine just                                 what is your beam or something else and                                 there is also this this other context                                 for the same approach where you try to                                 build incrementally without discarding                                 what you build before it so there's a                                 very good blog post about this as well                                 so regarding implementation every time                                 it's possible try to isolate                                 dependencies and avoid bringing                                 buzzwords into your domain so try to                                 keep your business domain clear of                                 buzzwords I also be skeptical about                                 frameworks and try to use more libraries                                 basically from object orientation like                                 try to keep things not so couple                                 together regarding documentation don't                                 be afraid of expressing what you want to                                 do with the project even if you don't                                 have time to finish it may help someone                                 later also there's the ad ours                                 they are basically records that you can                                 write for every decision you are taking                                 if you consider it's a very valid point                                 to explain to someone later or even to                                 yourself your future self it's very good                                 to take notes of that also document                                 incidents it's also important for                                 learning so now just to wrap up legacies                                 are usually time-sensitive and some                                 buzzwords too we know that artificial                                 intelligence is it's still there and                                 some people if you search for it some                                 people are mentioning that there will be                                 like a third AI winter we don't know                                 exactly what is going to happen and I                                 don't I don't have a clear idea yet to                                 make my bets                                 software engineer is this to a young                                 industry                                 when dealing with legacies that you are                                 taking over from other teams or from                                 other people understand the context                                 being pathetic use resources that you                                 have available for you like the books I                                 mentioned when building new stuff align                                 expectation evaluate your choices                                 experiment implement and document so                                 just one quick message understanding is                                 key for dealing with legacies that are                                 coming to you and also to deliver                                 legacies for the future so be a good                                 ancestor thank you
YouTube URL: https://www.youtube.com/watch?v=gqmBVfNXJQc


