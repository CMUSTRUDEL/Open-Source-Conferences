Title: Lightning Talk: Elias Nema: Your way into better product development
Publication date: 2020-07-02
Playlist: MICES - Joint Virtual Event 2020
Description: 
	Lightning talk from Berlin Buzzwords | MICES | Haystack â€“ Joint Event 2020
Captions: 
	                              and we have the next talk from alias                               Nimmo who would be talking about better                               product development                               hello Elias over to you yeah hi everyone                               my talk is gonna be more matter compared                               to previously more technical talks so                               I'm gonna talking about how                               hypothesizing can help you in a better                               product development and speaking about                                our use case and leading personalization                                and conditions at Oleg's group which is                                an online marketplace operating in like                                more than                                                              of our monthly diffusers and that's how                                a typical development flow looked for us                                so it all started with the idea and went                                to the implementation obviously we sound                                like a cycles and iterations in-between                                for fast feedback and so on but                                generally you take an idea you implement                                it and like we started noticing that                                it's kind of bad for data products                                because like we're doing personalization                                organizations and it's a our bread and                                butter                                so in data product success doesn't                                depend on like a code system quality so                                much but in it's hard to predict results                                from the initial project planning and                                also we notice that it's kind of                                optimizes for wrong things so often                                customers is being ignored and like only                                included in the process of Revelation                                only when the implementation is done so                                like okay we need to solve it what do we                                do obviously go on Twitter and like very                                so that actually we're not alone and                                people are really struggling with it as                                well and you can see that it's kind of                                really scary to spend six to twelve                                months on building something that is                                wrong and then in another case we see                                that company has learned about the                                project from the other company                                announcement and still was able to ship                                this project faster than the initial                                company so something is definitely wrong                                here and like we okay what do we do we                                try to optimize it to introduce more                                steps obviously and make it more                                colorful which is also equally important                                so this flow starts with a hypothesis Y                                hypothesis because the hypothesis is                                something                                doesn't have certainty in itself it can                                be right it can be wrong well like as                                opposite of that idea is something that                                if you say I D is good or bad because                                you will need to identify ideas to work                                on so you will need to somehow judge                                them and it might hurt your openness                                openness in your team as well as like                                user story like presumes that we know                                our users which is kind of not even                                humble to say but it's a often that                                doesn't happen then you take your                                hypothesis from the first step and you                                try to design a prototype with these                                hypotheses as fast as possible                                so and buy this like it you really                                really really cut all the features it                                doesn't help you to improve things to                                prove things that you want with your                                hypothesis and here are some kind of                                famous prototypes like Apple one Google                                glass for example yeah it was literally                                made of tape and netbook and the                                interesting case here for example is the                                Onyx navigator where instead of like                                developing features in an application it                                was cheaper to put a person with a stick                                and with a paper and then run                                appropriately to pull these papers on                                top of the application to see if for                                example these notifications were useful                                then when you have a prototype which is                                really really like a fast and small one                                you don't want to have this prototype in                                your ivory tower you really want to go                                to the real world and cure it collect                                real feedback from your real users                                because I cannot code in systems and                                infrastructure in a medium but actually                                real people and this one like everybody                                talks about like a Lorraine's we need to                                optimize for learnings but not only                                learning this like a allows you to avoid                                costly mistakes and how exactly so                                because like an every step at every step                                 at prototype at experiment you can go                                 back to the hypothesis you don't need to                                 finish your flow you need you can go                                 back and adjust your hypothesis for                                 example if prototype didn't work and                                 prove that it's gonna be too costly to                                 implement or experiment the improve much                                 results ok you just go and adjust your                                 hypothesis and this short circuit                                 is actually like one of the greatest                                 features of this flow that it kind of                                 allows you to improve your time to value                                 and improve with these potential savings                                 where you can short-circuit something                                 that is not useful for users you can                                 short-circuit from the beginning but                                 then the ones that will go to                                 productions or ones that you will invest                                 in would be really features that user                                 need and like it there you can really                                 double down having all the results from                                 your experiments having all the                                 information like a considering cost of                                 maintenance you can really see if you're                                 gonna like proceed with this feature                                 up until then to put in production or                                 you will go for another hypothesis and                                 repeat the cycle again and this one also                                 allows you to hedge your risk in this                                 sense because each consequent step is                                 it's kind of more expensive and bigger                                 and like avoiding this unnecessary steps                                 will allow you like allow to save some                                 money so this flow doesn't tell you how                                 to build your project instead of guide                                 you into like what is the most                                 meaningful thing to work at any                                 particular moment yeah and we found that                                 it allowed us to maximize learning build                                 a common dictionary within a team and                                 also optimize our time to value yeah if                                 you have any questions or just want to                                 chat here like drop me a message on                                 slack or LinkedIn or whatever and thank                                 you very much                                 you
YouTube URL: https://www.youtube.com/watch?v=2Vw4Di9AWJ4


