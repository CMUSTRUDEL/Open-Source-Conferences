Title: Berlin Buzzwords 2016: Georgi Knox - Shipping at Scale: ChatOps at GitHub #bbuzz
Publication date: 2016-06-12
Playlist: Berlin Buzzwords 2016 #bbuzz
Description: 
	Hubot, GitHub's open source chat bot, is completely revolutionizing how we build, ship and operate software at scale. As a widely distributed company, we rely on online chat as one of our primary communication tools. ChatOps helps us improve situational awareness during incidents, to share knowledge, to ship software, and much more. We'll look at some concrete examples and talk about the cultural implications embracing ChatOps has had at GitHub.

Read more:
https://2016.berlinbuzzwords.de/session/shipping-scale-chatops-github

About Georgi Knox:
https://2016.berlinbuzzwords.de/users/georgi-knox

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	                              buddy you can find me on twitter and                               github as at Georgie codes so what is                               github being an engineering conference                               i'm guessing that most people in this                               room probably know about github but                               essentially we're a platform that helps                               teams and individuals collaborate to                               build software there are currently over                                                                                                                                                                        million juice and all of this we host on                                hundreds of servers most of it are bare                                metal so who is github github has been                                around now for about eight years and                                there are now over                                                     the name we call ourselves and of that                                about                                                                 side of the organization this is the                                screenshot of an internal application                                and on this particular day it says that                                                                                                  hopefully you can read that are                                currently working remotely outside of                                our San Francisco San Francisco                                headquarters and this image of the world                                map shows just how spread out we are all                                across the world at github we need                                communication tools that enable our                                highly distributed engineering teams to                                work better together across time zones                                and for us this means being able to                                build and ship whenever and and                                front-end whenever so before we talk                                about chat ops I'd like to introduce you                                to this very dapper looking robot his                                name is Hugh BOTS and who bought is                                hands down the hardest working hubba and                                I thought this photo of balloon who                                bought with laser eyes was particularly                                rad and it was taken quite recently at                                the github satellite conference in                                Amsterdam so Hugh bot was built at                                github and is an open source project                                that's written in CoffeeScript and oj s                                and it can run anywhere node can run                                most people deploy it to Heroku so here                                what's a chatbot                                and you can invite him to any room or                                channel in chat chat applications like                                slack and and hip chat and who bought                                was built at github to help automate a                                lot of manual tasks and also as a source                                of fun and silliness he bought ships                                with a small number of course Crips                                things like translating languages                                integrating with maps displaying images                                that type of thing but the real power of                                you bought comes when you extend him                                yourself by creating your own scripts so                                our two primary tools of communication                                at github firstly github no surprises                                there which we use for project write-ups                                issue tracking code commits and the                                second one is slack for chat we have a                                social contract that you're not expected                                to reply to add mentions straightaway we                                see both of those tools as being                                asynchronous communication tools chat                                and more specifically how we use chat                                ops have had a really dramatic impact on                                how we work and ship software as a                                company so in this talk I'm going to run                                through some examples of how we use chat                                ops at github and how it really helps to                                shape our culture so again no surprises                                that we've written some hue BOTS groups                                to integrate really tightly with github                                a few helpful things that you can do ask                                you bot to subscribe a channel to a                                specific repository or repositories                                whenever an issue is opened or closed a                                pull request merge Hubert will drop the                                description and link to it and chat if                                you drop a link to an issue in chat then                                Hubert will go and make a comment on                                that issue and link back to that exact                                chat line in slack and this is really                                good for my teammate who lives in Sydney                                for example she won't have missed out on                                any chat that occurred while she was                                asleep due to time zone differences repo                                commit messages appear in chat to then                                linked to the diff when you push to your                                feature branch in one of our repos a                                number of CI checks will run and if                                these checks pass                                then you and your click merge then from                                there the project will be deployed                                automatically and again who bought is                                 going to chat to us every step of the                                 way so all of this is really helpful to                                 build up a context about what your                                 teammates are working on and what's                                 being shipped at any given point in time                                 and this is all really especially                                 helpful for distributed teams not all of                                 our repositories allowed for automatic                                 deploys even if CI checks pass so for                                 example github com is just a really big                                 rails up and it includes the github API                                 and deployment for that requires some                                 extra care so here is a graph of how                                 many deploys we do over the course of a                                 couple of weeks you can see it kind of                                 ranges anywhere from                                                     per day and as a company we really value                                 shipping frequent increment incremental                                 updates I mentioned before that it's                                 important for us to be able to ship                                 building ship whenever from wherever so                                 now going to walk through an example of                                 how we use who you want to help us                                 achieve this so we can initially test                                 our changes in a staging environment                                 staging environments are spun up on a                                 per branch basis and as needed and this                                 means there's no contention for staging                                 you never have to wait on anyone else                                 which i think is really great the less                                 assumed we've already tested our branch                                 it's totally good to go and we're set to                                 ship the first thing we need to do is                                 ask you bus to Hugh bot to put us in the                                 prod deployment queue and with we do                                 this with the command who bought q me to                                 deploy my branch hubert will now stick                                 us in a queue and we can go away and do                                 other things when we get to the front of                                 the queue who but we'll just add mention                                 us in slack so to deploy we just run                                 Hugh bot deploy my branch to prod and                                 you but will now ensure our branches up                                 to date with master and run all of the                                 required see I checks when the CH x pass                                 Hugh bot will perform the deployment and                                 when it's done respond reminding me that                                 it's now a good time to check haystack                                 and graph me and these are both into                                 Colonel exception and performance                                 monitoring applications and by having                                 Hubert linked to these apps in chat                                 we're really trying to nurture a culture                                 of performance we're saying it's not                                 good enough to that you've just deployed                                 your code you need to go and make sure                                 that you didn't break anything and they                                 haven't introduced any new performance                                 issues we really see performance as                                 being every engineers responsibility and                                 not something that falls to just one                                 team so haystack is our internal                                 exception monitoring system and the                                 Hubert the link that Hubert linked to                                 will link to a fire hose view which is                                 only shows the exceptions that have                                 occurred since your changes have gone                                 live so this makes it really easy to see                                 if I broken something in this particular                                 release and I can quickly take steps to                                 roll back the change if I need to and                                 I'll usually keep an eye on this fire                                 hose for a few minutes but if I'm not                                 doing my job properly and start go                                 looking at how can you use something                                 like that hey sarcasm plays some simple                                 rules for anomaly detection if a number                                 of exceptions if the number of                                 exceptions like exceeds some kind of                                 threshold then Hubert will ping me again                                 in chat and to let me know that there's                                 anomaly occurring and I can go and check                                 it out the second link cubot chats                                 post-deployment reminds me to check the                                 graph me app and this is a screenshot of                                 graph me a little bit hard to see there                                 but it's basically an app the tracks                                 performance of all of the different                                 parts of github com and it's just a                                 really good place to start to see if my                                 deployment has caused any performance                                 issues so one of the areas that he what                                 really shines in is incident management                                 without chitchat ops when stuff goes                                 wrong each person on a team might query                                 Splunk and graphite in their own                                 browsers and do their own digging to try                                 to figure out what's going on maybe                                 someone will SSH into a box and run some                                 commands the collaboration is really                                 difficult because you can't see what the                                 other person is                                 but and so dealing with incidents in                                 this way is kind of really ineffective                                 and doesn't work well at all for                                 distributed teams so it get help when                                 something goes wrong people grab some                                 popcorn pile into the ops channel and                                 help or watch as the problem is solved                                 so rather than list out a whole bunch of                                 you bot commands which I thought would                                 be kind of boring I'm going to run                                 through a little bit of a scenario about                                 an incident that occurred recently and                                 just to demonstrate how chat ups made                                 diagnosing and fixing this issue rather                                 simple so let's say that I'm on the                                 on-call rotation and receive a pager                                 alert about unicorn listeners so the                                 first thing that I'm going to do is jump                                 into the ops channel and type hubert ack                                 followed by the incident number to                                 acknowledge the page that I just got so                                 the low we got is about unicorn                                 listeners and for those of you who                                 haven't heard of unicorn it's just a                                 HTTP server for a ruby so the unicorn                                 master spins up a bunch of workers and                                 the workers serve HTTP requests to your                                 rails application so the second thing                                 that I might want to do is ask cubot to                                 graph us to show us a graph of the                                 unicorn listeners on our front end boxes                                 and this graph me command here makes                                 calls to graphite which is an                                 open-source real-time graphing                                 application so we notice I notice at the                                 end that the blue line the number of                                 workers active seems to rapidly be                                 reaching the unicorn worker limit which                                 is the red line at the top of the graph                                 and when this happens we're not really                                 going to properly be able to serve                                 github.com page requests so I'm going to                                 drop a comment and slack to that effect                                 and all of these yellow lines here just                                 indicate deployments and given sometimes                                 deployments are responsible for                                 performance degradation they can be                                 helpful to add to your graph so now my                                 team member Amy jumps on line and she                                 acknowledges the pages the page also she                                 can of course just see the graph that I                                 put in in chat and so she adds a new                                 graph and she asked you about your graph                                 to produce a graph to compare the number                                 of unicorn listeners queued for the API                                 versus the website and these graphite                                 graphs can be pre saved like we have                                 here with the apt symbol name or you can                                 just use a royal graphite query both                                 will work so seeing that the blue line                                 hasn't increased like the green comm                                 line here amy charts whatever it is it                                 doesn't seem to be impacting the API so                                 given that we can rule the api out let's                                 get Hubert to graph as a choice a graph                                 of the most requested pages on github                                 com in the response we can see that                                 there's this blue line and it's for the                                 issues index page and then a red line                                 which is for releases don't index are                                 both experiencing a noticeable uptick so                                 we're still tracking down the cause so                                 Aimee decides it's best to add                                         front-end boxes in the meantime so she                                 uses the command cubot G panel host bulk                                 install our pickles github roller calls                                 Fe count equals                                                          is a rails application that we built                                 about four years ago it's our inventory                                 and provisioning management system that                                 keeps track of all of our physical and                                 cloud hosts and we built do panel                                 because we needed the ability to track                                 physical components of data centers                                 cabinet speedy use Tracy's which is                                 loose pieces of hardware and in addition                                 to that it allows us to take some bare                                 metal install a particular operating                                 system and then provision it with puppet                                 so in one simple command amy can spin up                                                                                                        minutes they're going to be serving                                 traffic so I think that's pretty rad so                                 when the boxes of spun up amy is going                                 to graph a similar graph from before                                 which displays the number of unicorn                                 workers available on for the past hour                                 and we can now see towards the end there                                 that there's a nice gap between workers                                 active in blue and workers available in                                 red so we're kind of where we're safe                                 for now and I'm not going to play up the                                 rest of this scenario of how we                                 uncovered and fix the issue because I                                 think you're starting to see the flow of                                 how                                 chat ops really works here but in case                                 you're curious we found out that there                                 was a community built Chrome extension                                 which when installed displayed desktop                                 notifications every time a new release                                 or issue or pull request was issued was                                 created but the Ascension didn't use the                                 github API instead it issued thousands                                 of requests per second to the github                                 website so we were able to contact the                                 extension developer they released to fix                                 really quickly and on our end we put in                                 place some browser session rate-limiting                                 so that a rogue extension couldn't do                                 this cause us any pain in the future so                                 that example shows us how using chat ops                                 solving problems is a highly coordinated                                 effort that can easily be tackled by                                 distributed teams by having everything                                 in chat there's a shared context so                                 anyone can jump in and lend a hand                                 what's more unlike a command line Hubert                                 provides an easy to access log of all                                 past messages team members who are                                 asleep when when this will happen can                                 easily catch up the next day in fact                                 it's easy to return to any point in time                                 so I've only been working at github for                                 about six months and I found chat ops to                                 be a really excellent way for engineers                                 new to the team to learn how things are                                 done when you first start out there are                                 a lot of things to take in and chat ops                                 means that you don't have to remember                                 everything you can sit back and watch                                 those incidents play out and see other                                 people's thought processes and watch our                                 team members coordinate to solve                                 problems Chad ops has made the discovery                                 and learning process that much faster                                 and better and aided onboarding as the                                 engineering team has scaled do i only                                 have zero minutes is that what you're                                 saying so I have run out of time so                                 we're always working to make cubot                                 better and as you saw before we really                                 rely on it for incident management so                                 one of the biggest things that we've                                 shipped recently                                 is improvements to make Cuba a highly                                 available distributed system so one who                                 bot know goes down the others can can                                 still function and we will be able to                                 continue to field incident requests if                                 your team's not currently using chat ops                                 I really encourage you to give you about                                 a try it's super easy to get set up and                                 there's a whole bunch of community                                 scripts that people have shared to help                                 get started thank you thank you thanks a                                 lot Linda do you have question so I work                                 with dispersed teams to somebody                                 interested in how it is can this can                                 help our team to do each of your                                 incidents have their own slack room or                                 something how do you make sure that if                                 there are                                                            time they don't all interfere with each                                 other or if they want they can listen in                                 but if they don't want to locate a new                                 select room for every incident um so we                                 have a we have a hubert command when an                                 incident starts I can't remember what                                 the exact command is but something like                                 you bought incident and here but we'll                                 go and create a new slap channel and you                                 add a new issue on github and you just                                 click into that channel and all of that                                 funnels through the ops channel                                 how do you do how do you deal with like                                 permission in terms of like people doing                                 deploys and that kind of stuff yeah so                                 mostly we just trust everyone to do the                                 right thing which sounds crazy I guess                                 but yeah so some some deployments the                                 scope to specific rooms but that's                                 mostly just for readability so you know                                 if you go into like the puppet room all                                 the public deployments are happening                                 there um and you wouldn't be able to                                 deploy something from another room but                                 because and I ran out of time it because                                 all of the hue bot commands are written                                 by subject matter experts they're really                                 safe commands to run and people can see                                 what you're doing so if you restart my                                 sequel cluster everyone knows you                                 restarted it so I think you know yeah                                 you'll think about what you're doing
YouTube URL: https://www.youtube.com/watch?v=3nD73CigtVg


