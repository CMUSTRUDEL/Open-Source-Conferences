Title: Berlin Buzzwords 2018: Ted Dunning – Big News for Big Data in Kubernetes #bbuzz
Publication date: 2018-06-13
Playlist: Berlin Buzzwords 2018 #bbuzz
Description: 
	The folk wisdom has always been that when running stateful applications inside containers that the only viable choice was to externalize the state so that the containers themselves are stateless or nearly so. Keeping large amounts of state inside containers is possible, but it is considered a problem because stateful containers generally can’t preserve that state across restarts.

In practice, this complicates the management of large-scale Kubernetes-based infrastructure because these high-performance storage systems require separate management. In terms of overall system management, it would be ideal if we could run a software-defined storage system directly in containers managed by Kubernetes, but that has been hampered by lack of direct device access and difficult questions about what happens to the state on container restarts.

I will describe recent developments that make it possible for Kubernetes to manage both compute and storage tiers in the same cluster. Container restarts can be handled gracefully without loss of data or a requirement to rebuild storage structures and access to storage from compute containers is extremely fast. In some environments it is even possible to implement elastic storage frameworks that can fold data onto just a few containers during quiescent periods or explode it in just a few seconds across a large number of machines when higher speed access is required.

The benefits of systems like this extends beyond management simplicity because applications can be more agile precisely because the storage layer is more stable and can be uniformly accessed from any container host. Even better, it makes it a snap to configure and deploy a full-scale compute and storage infrastructure.

Read more:
https://2018.berlinbuzzwords.de/18/session/big-news-big-data-kubernetes

About Ted Dunning:
https://2018.berlinbuzzwords.de/users/ted-dunning

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	                              [Applause]                               you can see the intermittency of the                               traffic you can measure the capacity of                               the elevator I think if we just kept                               that data that's a problem that we keep                               discarding data we could have known                               something there so I'm gonna talk today                               about kubernetes and the first big fact                               about kubernetes is my clickers not                                turned on is there we go                                kubernetes is coming it's coming in a                                very very dramatic fashion I don't think                                I've seen quite such a switch in a                                marketplace as quickly in a long time                                why do we say that but what is it                                well for one thing there's enormous                                community support there there's enormous                                corporate support but there's enormous                                community support as well we see a lot                                of people adopting it a lot of people                                contributing we see support from all                                three of the major clouds and in fact                                others as well see massive customer                                adoption rate of words of                                         percent among our customers and I hear                                                                                                       vendors so it's happening very very fast                                which raises of course the question for                                all of us either one year ago or now or                                five minutes from now all of us are                                going to be asking what is kubernetes                                besides a really cool Greek word you                                know it's the word that we got                                cybernetics from know about vino came up                                with that hibernate ease is the the                                pilot the one who steers the ship and it                                started his life as the Omega scheduler                                and and systems around that as the                                successor to the Borg at at Google the                                board was the system that Google used                                for a long time to scheduled processes                                and containers and it was a core                                competitive advantage for them for quite                                some time to be able to schedule                                so quickly and so effectively but                                kubernetes                                is as we mentioned earlier an entire                                ecosystem with enormous numbers of                                products there to support it and it is a                                container orchestration machine but                                there are others of those but the the                                orchestration war is effectively over                                almost before people realized it was                                beginning it was just a few years ago                                that a friend of mine was saying that at                                their big cloud                                                    being started in production were Miso's                                and now the number two years later is                                over                                                                   the actual number of clusters running in                                the cloud lags that of course because                                some big clusters continue to operate                                and probably will continue to operate                                for years but the adoption rate in terms                                of new clusters it's all one way and                                those are the similar numbers especially                                interestingly in Europe we've seen                                faster corporate adoption of kubernetes                                among large corporations in Europe than                                in the u.s. kind of a reverse trend but                                it makes a lot of sense friends at a                                very large German corporation near                                Heidelberg said that they started eight                                different technology evaluation groups                                to decide how to deal with containers                                informally they say they've never had                                two such groups agree in the past and                                all eight groups from different                                competing parts of the company came up                                with the answer that kubernetes was the                                only solution that they could use and                                they've now adopted it full-fledged and                                that took place over a period of months                                last year and this is in a company that                                more normally makes decisions over a                                period of years the pace is amazing but                                but again what is kubernetes kubernetes                                runs containers what are containers the                                best answer there is that they are not a                                VM that's a little bit of a negative                                answer                                but it's really the important thing                                because people think when you start                                saying what the advantages of a                                container are in terms of isolation and                                an apparently independent operation that                                oh that sounds like a VM but importantly                                it's not there's technical at reasons                                that here with a VM you have an extra OS                                 layer you have multiple copies not just                                 to running you have to in the pathway to                                 the hardware but you could have dozens                                 of copies of the OS running it might                                 take advantage of virtual memory or if                                 you want to avoid specter and meltdown                                 it probably won't you have a hypervisor                                 running as well with containers a lot of                                 that overhead a lot of that replication                                 is gone so you could very often around                                 hundreds of containers where you could                                 only run a dozen or two VMs but the                                 really really core difference is not                                 these technical details it has to do                                 with kittens and cows think about it                                 well you know friend of mine has a farm                                 and he denies this he says this is                                 nothing like what happens because he                                 names his cows but if you think about it                                 if you have a pet you feed it you name                                 it                                 you cuddle it you take cute pictures of                                 it ok and if you get sick you pay                                 enormous amounts of money to make it                                 better if you have a cow you don't name                                 them you give them numbers and if they                                 get sick you feel bad you really you do                                 but not nearly as bad and it's all                                 economics at that point now anybody                                 remember naming each new server that you                                 got I named them after the stops in the                                 iliad friends of mine named them after                                 mountains and hobbits and things like                                 that remember naming machines those are                                 pets and then people say vm's well                                 that's just a way be more flexible                                 those are pets containers or cows and                                 not the pretty nice cows that people put                                 in advertisements these are the                                 industrial                                 number on them don't name them because                                 then you'll feel bad when they go away                                 sort of cows okay                                 so aside from people who live on for who                                 he lives on a farm or lived on a farm                                 okay I'm safe okay when I talked like                                 this in Wisconsin it's not so good                                 maybe Austria I don't know Switzerland                                 so they give us isolation and they give                                 it to us through two mechanisms one is                                 to do with namespaces files shared                                 memory and things like that the other is                                 ephemeral resources like memory and CPU                                 the core idea is that we build images up                                 from multiple read-only layers and a                                 final writable layer so that we have                                 what appears to be an entire file system                                 without actually necessarily copying all                                 those files then we use change route                                 which allows us to tell the processes                                 inside the container that that virtual                                 file system is all that exists and we do                                 things like see groups and and other                                 names face things to convince it that                                 everything is independent but in fact                                 it's really just ordinary processes                                 running under the same OS with just a                                 little bit of magic trick to make it                                 appear more independent it is nothing                                 like as isolated as a VM but it is                                 nothing like as expensive as a VM either                                 now these are wonderful people talk                                 about them people love them it's it's a                                 great way to do this because you                                 combined all of the environmental                                 dependencies into a container so if he                                 wants one version of live C and I want a                                 different version and he wants Java                                 eight and I want Java nine and we just                                 put them in our container we're all                                 happy but there's a big big problem and                                 that is if you aren't careful you find                                 yourself SSH into your container and                                 fixing something                                 the problem is that this becomes a pet                                 not account and pets will not let you go                                 they own you                                 just as much as you on them you can                                 never get away from them                                 you've got to figure out some way to                                 support them in a nameless fashion and                                 things have been built up from the                                 bottom to try to do some of this but                                 docker itself is really built up around                                 managing a few of these really built up                                 around managing pets and what we want to                                 do is have something that is much more                                 industrial about how containers are                                 managed I do not want to talk about how                                 many web servers I have well how many                                 I'm happy to talk about but I don't want                                 to talk about any given one of them I                                 want them just to exist out there and                                 some unnamed masse the magical view here                                 is we want kubernetes to live there                                 it starts processes and we don't really                                 care it starts them somewhere it decides                                 it starts another application and it may                                 be associated because of affinities it                                 may be isolated because of anti                                 infinities it may be near a GPU because                                 of that same sort of thing it may have                                 more or less requirements it should deal                                 with them we should think of our                                 applications as groups of these things                                 not as single single machines and it                                 provides naming and things like that so                                 that it could be really really fast to                                 refer to things by name which we do not                                 know where they are we don't think about                                 which machine it's running on at all at                                 that point and we don't if we do it well                                 even think about what IP address it has                                 or which container we might be talking                                 to no more names from The Hobbit there                                 are going to be no containers named                                 Frodo it's just not going to be that way                                 now the impact here                                 is that we can do real software                                 engineering and if you think about it                                 the process of software engineering is                                 the process of freezing away variability                                 well some people kind of view it as you                                 know expressing the potential but I feel                                 it much more like sculpture we're                                 cutting away all of the potential of the                                 Machine all of the things it could do                                 and we're leaving only things we wanted                                 to do now a little bit of history is                                 useful here a long time ago if I wanted                                 a file in my application we would have a                                 meeting seriously and I would be asked                                 questions like do you have hardware                                 authority for your file budget because                                 you're gonna need Hardware aren't you                                 this is crazy and then they would say do                                 you have somebody to call after hours if                                 the file breaks this is crazy                                 they would say do you have a contingency                                 plan if your file grows bigger than you                                 say it will and and so we would go in                                 and we would change things we would fix                                 things we would have a program running                                 and to avoid having another meeting we                                 would do things like we would change the                                 bits of the running program as it's                                 running because hey you had to do it you                                 couldn't afford to run this on another                                 machine for a little bit you couldn't                                 afford to stop it you had to change it                                 hot these are all crazy                                 by today's standards and so if it's                                 crazy to reach in and change the bits of                                 a running program you guys don't seem to                                 be reacting quite as strongly to that as                                 I expect who here thinks that's a good                                 idea okay good                                 see I cleverly put it so that the                                 sensible thing is no action because it's                                 after lunch so anytime I want you to                                 agree that will be the no action side of                                 the things so it's crazy to change the                                 bits of a running program okay people                                 also didn't use source couldn't                                 roll they would just change the source                                 whatever and it was on some machine                                 somewhere and if they were good they                                 would remind somebody else did they                                 change something that was crazy but if                                 you think about it these are about                                 freezing the state once the program runs                                 we don't mess with it once we declared                                 this is the version of source code we're                                 going to run we don't mess with it                                 the same sort of place where I started                                 had a program that was written on an IBM                                                                                                       emulator which was running on an IBM                                     emulator on an IBM                                                    had written the code had lost the source                                 code and then died and so nobody had                                 ever even seen an                                                       was coded for they had never seen the                                 computer language that that was written                                 for and yet it was a fight vital                                 fundraising application for the hospital                                 I was in and so what they did is to                                 maintain this program they hired a woman                                 back then of course to draw a red line                                 through columns of output that are                                 always wrong and to draw a wavy blue                                 line through columns that were sometimes                                 wrong that was how they maintained the                                 software that's crazy that's crazy so we                                 we have version control now so that if a                                 person does die or leave or whatever we                                 can figure out what happened we compile                                 the code to a binary state and that's                                 what we run you don't patch it you don't                                 change it the code is the code the                                 output of the compiler is what we run we                                 have removed potential there we have                                 frozen away variability the code could                                 have been anything at all we have frozen                                 it to be what we want the binary could                                 be anything we want the compiler is just                                 a suggestion we have frozen it to what                                 the compiler produces                                 but that's not enough the idea of                                 freezing the source code freezing the                                 output of the of the compiler and the                                 linking is not enough we need to freeze                                 some more we need to freeze the                                 environment which version of libraries                                 do we use which version of the operating                                 system do we use which resources which                                 configurations those should be frozen                                 and packaged together this is where                                 containers work but there's more that we                                 need to do we need to be able to say                                 here's the shape of the system I want to                                 build I want to have some servers here I                                 don't know how many I want them to talk                                 to these other servers through a load                                 balancer I want those to talk to some                                 kind of data now there's parts of that I                                 still wave my hands I don't want to                                 commit to how many of the different                                 kinds of services yet I don't want to                                 commit to exactly which load balancer or                                 exactly where the data is but I do want                                 to commit to these are the functions                                 that go here and here and this is the                                 shape of the service I want to freeze                                 away possibilities and make it so I can                                 make it do what I want it to do and                                 that's what helm does helm is part of                                 kubernetes it lets me build a template a                                 shape of a service as an artifact that I                                 conversion control and I can now build                                 that system and then ultimately I can                                 deploy it and when I deploy it I will                                 insert keys and DNS records as necessary                                 to actually connect it so you know you                                 can't run anything unless it has                                 certificates and ands tickets and things                                 like that and you can't really run it                                 unless you know how many there are                                 perhaps you could change that later but                                 you have to know how many to start and                                 you can't really run it unless you have                                 the load balancer and the data elements                                 actually attached so that final part is                                 kubernetes running that system                                 and at each stage we have removed                                 changes and variability and frozen down                                 the configuration so that's what                                 kubernetes in essence is doing is taking                                 us from                                                              years ago or something like that docker                                 is the last few years but we're now                                 taking the next few steps of how we can                                 build repeatable things how we can                                 deployed repeatable things that do what                                 we intend and that we don't go in and                                 mess with at runtime we want to change                                 those kubernetes will let us do it                                 upgrade and it'll do a rolling upgrade                                 it will replace every one of those                                 containers with a new completely                                 controlled packaged container                                 this is absolutely glorious if you lived                                 through the dark ages it's even more                                 glorious imagine about five times more                                 brilliant than then you see it as that's                                 the way I see it it's just fabulous we                                 can actually say what we meant and the                                 computers will do it as opposed to                                 waking up in the middle of the night and                                 messing with stuff but there is one huge                                 glaring omission intentional but it's a                                 thing that kubernetes doesn't do pretty                                 much at all and that's state state data                                 gets in the way the assumption here is I                                 could just stop this container here and                                 start it over there and and all that                                 well that that's totally implausible if                                 it's carrying around                                                  data or more and so we're not done yet                                 this this idea of this little system                                 that we built we froze and we configure                                 it and we deployed the big big problem                                 still is how do we deal with that state                                 there it really messes up the                                 assumptions of a sea of container                                 it messes up the assumptions that                                 they're portable it messes with the                                 assumptions that we could just restart                                 them somewhere else                                 well if they're talking to disks on one                                 machine and they just start up on some                                 other that's just all gone so that that                                 just doesn't work if we try to put into                                 the applications replication of state                                 that becomes complex very very quickly                                 and that requires systems types of                                 skills which application developers                                 notoriously lack at least from the point                                 of view of the systems developers it                                 goes the other way too like human skills                                 are notoriously lacking in systems                                 people so they just don't build you eyes                                 like users oh and but that mismatch that                                 cultural mismatch means that application                                 developers never build data replication                                 that's very good it's always kind of                                 broken and that's not what they're                                 focused on it's like the system                                 developers UI and the state lifecycle                                 doesn't really match the app lifecycle                                 the state should last a long time the                                 app could come up and go down but we                                 don't want them to match we want the                                 state to have an existence independent                                 of the containers we want it to persist                                 I mean that's the whole point right with                                 why we call it persistence is so it does                                 well let's let's think about this what                                 is a service service is something you                                 asked to serve you right                                 you give it like an RPC and this is the                                 i synchronous idea hey you do something                                 and you go yes sir and and and you do                                 something for me that's the way we like                                 to think about servers they don't always                                 do that but I'd like to pretend they do                                 that's one way but there's an                                 asynchronous way as well we could make                                 all of our calls have to complete before                                 we get on we could pretend that we're                                 not really waiting for them with some                                 sort of callback mechanism but in fact                                 we are waiting for them to finish that's                                 a synchronous call                                 call and return but we can defer some                                 work to it that's very common like you                                 know what color is the sky you tell me                                 blue and you make a note yeah somebody                                 asked what color it is again and that                                 note then becomes deferred work later                                 somebody will analyze how often do they                                 ask certain questions and then they'll                                 start cashing the answers to certain                                 things so this is a very common pattern                                 I ask you to do something and you do the                                 minimum amount of work so you can give                                 me an answer fast and then you defer                                 some work that doesn't have to happen                                 right now do some defer some is a very                                 very common measure of idiom so there's                                 a RPC that comes in and a little bit of                                 deferred work that comes out the other                                 end and somebody will we trust read that                                 stream of deferred work and do it later                                 when we have some more time but we'll                                 get the answer to the RPC very quickly                                 so this idea gives us the possibility to                                 isolate things this is the essence of                                 what a service is if I ask you to do                                 something and you give me an answer in                                 such a wonderful spirited way I don't                                 care how you did it                                 really I shouldn't I probably do but I                                 shouldn't I should let you do that I                                 shouldn't look inside the kitchen when                                 they first feed me lunch I'm sure it's                                 lovely but I shouldn't look and that's                                 the idea is that an RPC lets me isolate                                 that implementation from the fact that I                                 need the response but there's more                                 isolation then we can have if my service                                 and the other service can be                                 independently deployed taken up take it                                 down that's the definition of a micro                                 service well some people say micro                                 service but I've heard about somebody                                 who has a database they take the changes                                 out of the database they process it                                 through ten different things and then it                                 goes back in the database and                                 causes more things to go around the                                 circle's and they can only restart                                 things in the right order                                 first the database then the first thing                                 then the second thing and so on                                 otherwise it doesn't work those are not                                 micro services those are a big mistake                                 don't do that and so this idea of I                                 could just independently redeploy it                                 means I would be able to start those                                 things in any order and if they were                                 done as good Micra services it would be                                 ok there would be no interlocking state                                 of what's pending and so on                                 if I can hide the details of exactly                                 when something is being done I have                                 something more than just a micro service                                 I have a streaming micro service that's                                 really really a powerful extension of                                 this idea of service and micro service                                 it's a streaming micro service I don't                                 really care if you give me the answer                                 now I just ask you something and I move                                 on you will do it I trust you that's a                                 streaming micro service and that gives                                 me all kinds of power so a producer of                                 some work like the deferred work we saw                                 earlier produces the work into a stream                                 and the consumer is not even running                                 remember I said temporal isolation they                                 don't have to be running at the same                                 time they don't have to do the work when                                 the work is requested the consumer may                                 not have been written yet that's the                                 ultimate implementation detail I                                 sometimes invoke that detail I just                                 don't bother me it's just some details                                 missing like I haven't done it ok so                                 then the consumer could run later                                 excellent that would be a deferred sort                                 of thing but we can actually hide other                                 details like the consumer could be an                                 entire ocean away doesn't really matter                                 if it's deferred this is the kind of                                 freedom that a streaming service should                                 give us now unfortunately all of this                                 leads to persistence all of this leads                                 to state which is exactly the stuff that                                 kubernetes isn't solving we have files                                 many people use files machine learning                                 configuration files very very useful not                                 always right                                 tables are sometimes much better we can                                 delete the middle of a table by rows by                                 so on streams are very important we saw                                 an example of that from the streaming                                 micro service point of view all of those                                 are important we want to build those                                 kubernetes applications like we talked                                 about before with lots of things we want                                 them to connect with files and streams                                 and tables and and even direct RPC now                                 kubernetes is going to help us with the                                 RPC because it does load balancers but                                 it's not going to do us any good at all                                 on the bottom part we need something                                 there for all of that state all of that                                 persistence and we don't want it to be                                 here and it's emphatically not here we                                 need something else we need a data                                 platform that can hide all of those                                 pieces that can abstract away state and                                 persistence the same way kubernetes                                 abstracts away which machine are you                                 running on just tell me what you need                                 I'll get it for you same thing with data                                 we should be able to say tell me what                                 you need and I'll get it for you and as                                 I see it this is now going from                                 reporting to opinion as I see it these                                 are the requirements that we absolutely                                 need in a data platform we need to be                                 able to name things that's obviously                                 true of services but we need to be able                                 to name data a certain right look                                 appears on this man's face we need to be                                 able to name them between clusters so we                                 can refer to data far away we need to                                 have all of those forms not just files                                 files tables and streams they should all                                 be there and naming and the three kinds                                 of persistence should be orthogonal I                                 should be able to have a directory with                                 all three kinds of persistence in it why                                 not why is it named good for a file but                                 not good for a stream do you remember                                 the crazy conversation about the file he                                 does                                 but we still have those crazy                                 conversations about streams                                 you say you want streams I say with my                                 authoritarian voice do you have hardware                                 authority for your cluster that you want                                 why do I assume that he wants a cluster                                 why doesn't he just create the stream                                 the same way he would create a file he                                 shouldn't need to come to me I mean I'd                                 love being an authority figure and all                                 that but shouldn't need to happen if you                                 want a file touch create the file                                 whatever you know we have some                                 generalized budget requirements you want                                 to stream create a stream it should be                                 just like that all of them should be                                 inherently scalable we should be                                 abstracting away these details of server                                 addresses and things like that you                                 should name something you should                                 organize it with directories and you                                 should have uniform access to all of                                 this and uniform control at that data                                 level are you allowed to even write to                                 that stuff                                 no give me a break you're a developer no                                 way I would let you write to production                                 data I should be able to say that and                                 mean it so turns out I don't have my map                                 our hat anymore because of certain other                                 considerations but I used to wear a map                                 art had a lot I still do you just can't                                 see it and as it happens we have that                                 right now we can inside the yamo                                 configuration for a pod this is a very                                 simple one all of this stuff is the the                                 process itself but down here we say what                                 about volumes and we can mount a volume                                 directly inside the containers pathname                                 so that it can see all the other data                                 elements across an entire data platform                                 cluster look I guess magnifying doesn't                                 really help Stephanie so the idea here                                 is cubelet is the element of kubernetes                                 that actually invokes a container on a                                 machine it would normally invoke docker                                 docker would run                                 the pod pod they had to have yet another                                 buzzword you know so pod is several                                 containers glued together that live on                                 the single machine and the pod is run by                                 docker and normally the pod would                                 interact with machine resources directly                                 all we have to do is add one plug-in                                 this is a new capability like four                                 months old in kubernetes just I guess                                 medium old by kubernetes pace and that                                 can then drive a fuse driver to access                                 this data layer what that gives us is                                 the ability to have data that spans the                                 globe we can have files that exist                                 wherever we want them we're going to                                 have files of any scale we'd like we're                                 going to have streams that come from a                                 hundred data centers to one that live in                                 all these places and we can build                                 applications using the full power of                                 kubernetes and now with the full power                                 of the comparable state abstraction                                 below it the plugin is a kubernetes                                 operation no per node attention is                                 required no pod changes are required you                                 can take a standard my sequel pod out of                                 the repository and run it against this                                 state layer transparently with zero                                 changes and we can scale compute and                                 storage completely independently and                                 they can Co reside so state is no longer                                 a dirty word for kubernetes even                                 high-performance computing can be done                                 at its level things like gigabytes tens                                 of gigabytes per second per node and we                                 can do the boring things as well on                                 kubernetes without having storage                                 appliances we can integrate that                                 directly into the computation cluster                                 and previously crazy things now become                                 mundane and hopefully certain aspects of                                 computing become boring now we've got                                 some additional resources books Ellen                                 and I are there's Ellen co-author                                 have written a number of books about                                 deployment and production considerations                                 in machine learning                                 streaming architecture machine learning                                 recommendations and anomaly detection                                 there's other things like blogs and so                                 on and we have a new one about to come                                 out about this idea of data systems in                                 production now I'd like to point out                                 that when I was in Malaysia last year                                 the audience was roughly half women this                                 is an Islamic country presumably not so                                 advanced Here I am in Germany much more                                 advanced and where we got a quarter we                                 got a road to hoe we can do better so                                 anyway let's engage questions we still                                 have several minutes not a whole lot but                                 enough yeah if there are questions let's                                 talk about it                                 yeah large so could you comment on the                                 differences to other solutions for state                                 income bananas for example there is                                 something called like persistent sets or                                 yeah and also you have if you're in the                                 cloud you have the option of light                                 mounting of a volume into your                                 containers for example if you in Google                                 Cloud you can say I want this more                                 volume mounted yeah and related that do                                 you support multiple writers because I                                 guess that's yeah I know the difference                                 and very good question there are other                                 options for state so you can build                                 things that are transmitted to all of                                 the containers or all of the containers                                 part of the cluster in a read-only                                 fashion that's that's a very nice thing                                 and those can be these volume sets or                                 they can be secrets or they can be                                 configured if uhrin twice depending on                                 what scale they are you could also have                                 a classic storage appliance a San or or                                 an ass that you just access and and you                                 would have a fixed size and very limited                                 bandwidth type of tool there you can                                 also if you are in Google's cloud access                                 Google's tables and Google's blobs you                                 don't usually get access to                                 honest-to-god files you couldn't                                 normally run for instance on a page blob                                 in Microsoft Azure you can't run my                                 sequel for instance because those are                                 single large blobs that are immutable                                 and those are also accessible and this                                 is you alluded to that in the last part                                 of your question those are accessible                                 typically from one part one system only                                 whereas what we're talking about here is                                 a completely distributed data system so                                 the differences are typically very                                 limited semantics usually for                                 large-scale things right once readable                                 many limited semantics in that if they                                 are updatable they're almost always                                 updatable only from one machine or only                                 slowly and limited semantics in that                                 they're almost always just file like or                                 blob like very rarely are they                                 integrated with streams files and tables                                 those are the three life cycles of bytes                                 that I see in real applications and I                                 don't see any reason that they shouldn't                                 all be primitive when we have a                                 transient state right now where people                                 implement their own so that's the big                                 difference                                 and the results are geo distribution and                                 the ability to be cloud neutral we have                                 a humongous battle of the gods forming                                 right now as to who will own the future                                 of computing and as you're fighting                                 against the other Easter you know Amazon                                 and the key question there is can they                                 lock in computing or can people make                                 them be commodity providers where they                                 can switch easily and so the key                                 question there is cloud neutrality can I                                 run exactly the same code in multiple                                 clouds and that is something you get                                 with this approach that's a big deal if                                 you've ever bought Oracle you understand                                 that the future is going to be much                                 worse if we don't commoditize                                 other questions                                 the man is twitting you know this is                                 like an auction                                 if you twitch it you you may have to ask                                 a question even if you didn't know what                                 to question you would have here's one                                 buddy who's really asking ya remember an                                 original Hadoop that people always like                                 data locality can you elaborate a little                                 bit on how this is supposed to work now                                 that and everything is even more                                 distributed it's like you know you                                 wanted to to run your computations about                                 your data boys and so on so let's talk                                 about this right there and the question                                 was about data locality and that's a                                 classic thing in Hadoop now in Hadoop                                 with HDFS there's a very large ratio                                 between the speed local and the speed                                 distant it because being local you can                                 actually be passed a file descriptor for                                 the blocks it's called the read bypass                                 it bypasses a lot of the abstraction                                 layers and most importantly it bypasses                                 about three copies that's a pretty                                 cheesy way to build a file system                                 frankly and that ratio if you build a                                 file system well is much smaller so off                                 system we can maintain                                                  second reads from a system if you have                                 enough network obviously on system we                                 can only go about                                                        that so that's if the network is fast                                 enough obviously if you have                                             network and you have                                                     pretty stupid to try to do anything off                                 of that machine because it's it's worse                                 than your home network                                 I suppose that's being done pretty often                                 and then people wonder why things get                                 slow so so so you have to balance the                                 hardware so you you have something like                                                                                                      links if you have                                                      then you have                                                   you balance the hardware when you buy it                                 and and that stays pretty well balanced                                 later and then if you have good software                                 it doesn't matter as much now in the                                 meantime kubernetes can be given hints                                 about which machines have which data                                 assets and then the applications when                                 they run can give hints back about which                                 data assets they would like to be near                                 and a good data platform before I have                                 one I'm trying not to say that too much                                 can also control where things live so I                                 can say private things live here machine                                 learning training sets live next to the                                 GPUs and we can control that so similar                                 mechanism similar considerations as with                                 a dupe but the numbers are all different                                 the ratios have changed and so we have                                 to reanalyze what we need but we also                                 have to give knobs and controls to                                 manage that yeah thank you very much                                 that thank you and I hope you enjoyed it                                 it I'll be around                                 [Applause]                                 you
YouTube URL: https://www.youtube.com/watch?v=0UaC1tGdDe4


