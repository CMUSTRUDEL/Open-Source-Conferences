Title: Berlin Buzzwords 2018: Maximilian Michels – CrateDB: A Search Engine or a Database? Both! #bbuzz
Publication date: 2018-06-18
Playlist: Berlin Buzzwords 2018 #bbuzz
Description: 
	Search engines are databases that specialize in retrieving information from a data corpus. Compared to traditional databases like PostgreSQL, search engines allow to work with text and other unstructured data more efficiently. Projects like Xapian and Apache Lucene can perform efficient indexing and querying of large amounts of documents. Apache Solr and Elasticsearch have added clustering and distributed query execution to scale out the search features.

The most obvious gap between traditional databases and search engines is the query language. Whereas relational databases can typically be queried with SQL, search engines usually implement a custom API.

At CrateDB, we don’t think you should have to give up SQL just because you’re using search engine features. That’s why we created a fully-functional SQL interface on top of Elasticsearch and Apache Lucene. You get all the benefits of traditional databases, as well as the features of a distributed search engine.

Do you want to store huge amounts of data and search it in real time? Do you have unstructured and structured data? Do you want to run distributed joins? Do you want to add nodes and scale your cluster horizontally? Do you want to leverage the power of SQL? If so, CrateDB is a great match.

In this talk, I will give an introduction to CrateDB, its architecture, and show what people have built with it.

Read more:

About Maximilian Michels:
https://2018.berlinbuzzwords.de/users/maximilian-michels-0

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	                              Thank You Martin so yeah thank you all                               for coming                               so my name is Max as you already know                               and I'm a software engineer at great IO                               and today today I would like to present                               to you create EB it's an open-source                               real-time sequel database and it's                               actually built on top of elastic search                               and the scene and you might wonder if                                you know a life search or the scene why                                would you even do that and does that                                work and well I wouldn't be here if it                                if it didn't but well I can give you a                                hint it works like a charm and let's see                                and find out how it works and and why                                this is a good idea so and why are we                                talking about cry TB so we have on the                                one side we have the traditional                                databases which are very well researched                                they have been running in production for                                centuries and we have open source                                candidates like Postgres my sequel and                                also close ones like Oracle but these                                are not really meant for for search I                                mean you can do full-text search in                                Postgres of course but to do it at this                                in a scalable way and can be quite                                tricky and search engines on the other                                end are like similar kind of like                                specialized databases which are                                optimized for search and the prominent                                of them source ones are a leucine which                                is just well a search library and then                                we have solar or less exert which are                                like search servers search databases and                                these all have like their own career                                languages so they don't use sequel and                                really the question is why why are they                                not using sequel and why do we like                                diverge from from sequel so much just to                                solve like a more specialized database                                problem and well I'm just going to give                                you a brief history of sequel so the                                first sequel draft is actually from                                     and ladies's from                                     so that means sequel is actually                                   years old                                I don't know about so much technology or                                software especially which survived that                                long so I think it's fair to say it's                                very mature standard and it is actually                                a great tree specification language so                                why why did we drop it so and the reason                                for that is when no sequel came about                                which is sort of like I mean I would                                consider elasticsearch in no sequel                                database so people basically engineers                                focused on an entirely different problem                                and the problem was more like yeah how                                do we distributed data how do we find it                                again make sure it's not lost the whole                                cap theorem with consistency                                availability petition tolerance I came                                into place and the truth is implementing                                sequel especially distributed sequel is                                very complex it's it's not an easy task                                and and it's way easier to say well                                let's focus on on something on some                                distributed technology and well we can                                just build an API that is well better                                because it's much simpler than sequel                                and after all put and get should be                                enough right I mean everything else you                                can handle in your application and we                                can leave all this old                                              behind right and well not quite so easy                                because we actually see sequel returning                                in a lot of places we just saw in the                                Nico's talk about flink about the fling                                sequel API so the truth is that there                                are millions of developers and data                                scientists out there who know sequel                                very well and there are just endless                                tools which which you can use for sequel                                and also it is just very hard to to if                                you have something that does have you                                have sophisticated query it's very hard                                to model it just with some simple key                                value no sequel API and well it just                                moves the complexity to the application                                layer instead of giving you like well                                thought-through query syntax which                                you can use to retrieve your data so I                                think sequel makes sense I don't know if                                you if you disagreed at all but thought                                it would be good to give you this short                                introduction so with that being said let                                me show you a database called cry TV and                                I believe it's it's a very scalable                                 sequel database which is optimized for                                 search we will see a little bit later                                 what that means and it doesn't have all                                 the no sequel which makes it                                 really really easy to use for people who                                 just want to write the sequel and yeah                                 it's a very powerful tool to tell you a                                 bit more about creativity right give you                                 a rough overview it's been around since                                                                                                         the community edition and it is built                                 using elasticsearch leucine Nettie                                 antler a bunch of other open-source                                 libraries its sequel                                                     sounds like really old but it's probably                                 all the sequel you you ever want to use                                 and it has a bunch of ways to interface                                 so we have rest endpoint to submit your                                 queries and we also are compatible with                                 the post crosswire protocol which is                                 really cool feature because lets you                                 pretty much replace crazy be with any                                 like post Chris if you have a capo stris                                 adapter and connect with Postgres you                                 can just pretty much plug in creative be                                 there and it and it works perfectly                                 because while sequel is a standard they                                 are certainly two extensions to it like                                 for post Chris with some special tables                                 and and so if if you replace a post card                                 it works really easy and of course we                                 have JDBC and Python and PHP and                                 whatever a bunch of adapters so what is                                 great about creepy because I started off                                 with a bit like like a magnum marketing                                 talk now but I want to be honest with                                 you so I think it's it's really easy to                                 set up it it's just sequel and it has                                 great performance great scale out and a                                 great documentation you can use it with                                 docker really easily because                                 actually it's you don't need a dedicated                                 master and it just any note can be a                                 master so it makes it really easy to use                                 with containers what is not so great                                 about it it isn't supports transactions                                 because so if you need a highly highly                                 consistent data store for your bank                                 transactions don't use crazy B so maybe                                 it would be interesting to take a look                                 now at how you would use crazy B since                                 creative is the sequel database not                                 surprising that you write sequel so if                                 you have your table definitions here                                 create table where you have the speakers                                 passwords table and the talks table with                                 speaker name and the talk names then you                                 can just insert your data like you would                                 with any other sequel DB and you can                                 then join for example these two tables                                 so we have full full support for joins                                 that's that's really nice a lot of times                                 what people do though is because the                                 join after all is comes at some expense                                 expense they store their data and                                 denormalized so they have the same table                                 here but they well it basically this is                                 a combination of the two tables so you                                 have the the speaker name there and you                                 have a talk object so create supports                                 sort of unstructured data but so you                                 have the talk with the title and the                                 abstract but the really cool thing is                                 once you insert it your data you can                                 just select the title from the speaker's                                 table inside this object and it doesn't                                 it doesn't come comment a performance                                 impact so it's it's creatively handles                                 all the indexing inside these objects so                                 it really just makes doesn't make it                                 different whether you select from this                                 object or you have a dedicated column so                                 that makes it really flexible in use                                 cases where you have unstructured data                                 and you want to                                 we insert and query it because we are                                 just a real database we need some way to                                 to partition our tables in a cluster so                                 if we have like a four node cluster here                                 and we can petition by name by the name                                 column with this clustered by syntax and                                 for shards means for petitions and we                                 can also add some replication for for                                 torrents and also to increase our search                                 speed with this number of replicas and                                 of course then you have the replicas                                 stored not on the same note as the the                                 primary but the creativity takes care of                                 handling that and then also what you can                                 do which is really useful for time                                 series data you can basically petition                                 your table so it's a bit confusing I                                 mean clustering is like the parts that                                 that you're you divide your data and you                                 distribute it in the cluster and then                                 you have additionally partitioning which                                 is basically creates if we here want to                                 create a petition by year of that table                                 which basically creates a new entity of                                 that table so all the all the data of                                 one year is grouped together which again                                 if you have if you have time series data                                 makes it really quick to to aggregate                                 data from a year or a day if you have                                 that petition set up so it's basically                                 way to co-locate your data and we have                                 many more features which I don't have                                 time to go into I mention the post risk                                 go to call we have analyzers for texts                                 for full-text search we have user                                 defined function geo search where you                                 can backup your data with snapshots we                                 have a bunch of authentication                                 encryption built in and yeah and really                                 cool web interface which I will show you                                 a bit later                                 so to make this talk a bit more                                 interesting I wanted to give you like an                                 overview of how creative works and how                                 it's sort of layered and well this is                                 the the RAF create EP tech spec so so we                                 have the scene at the very bottom which                                 is our document store because that's                                 what what lucina is in the end and it                                 managed all the indexing the the end                                 which which gives you really fast lookup                                 performance to define to find you find                                 data and the column storage gives you                                 very fast way to aggregate data once you                                 once you found your data and um yeah                                 basically you seen this does the the raw                                 data handling and then on top of this we                                 have elastic search which is we only use                                 a part of elastic search obviously it's                                 not the full copy but and we use it for                                 for networking for the transport between                                 the nodes for figuring out which row                                 which node receive which data for                                 snapshots and for routing through the                                 Lucine requests and then on top of                                 create eb not on top of trade on top of                                 elastic search we have crative itself                                 which is basically this sequel layer so                                 it it does the query processing                                 obviously but it also does compile                                 leucine queries which which basically                                 create an optimized version for leucine                                 of your sequel query and sends it                                 through through the elastic search layer                                 and down to leucine and then of course                                 we have the distributed query execution                                 so for joins for for sap selects and all                                 kinds of sequel statements we have                                 optimized and this optimized layer which                                 which creates operations and sends them                                 down through from the scene and in the                                 end so this is a very big part of our                                 work and yeah I mentioned post Chris                                 respite already                                 and we have a very nice weapon to face                                 on top of it which I will show you in a                                 bit                                 so leucine if you if you haven't heard                                 about it just a quick introduction if                                 you probably know what it is but I mean                                 the scene stores documents and in crazy                                 B we have rose so a document always                                 corresponds to a row in creativi and                                 this document has like fields which you                                 which you define and you can also add                                 more fields of course and the way                                 leucine is just really fast is that it                                 has this inverted index so if you if you                                 want to if you're searching for the                                 document which has the name a Bob you                                 have you just look in the inverted index                                 and you find your document really                                 quickly and also if you then want for                                 example aggregate sum up all the prices                                 here of this talk of all the documents                                 like this then you have this column                                 storage which has basic stores your                                 columns in a row so you can really                                 quickly aggregate the data so yeah that                                 makes queries just super fast and the                                 elastic search layer and so an elastic                                 search we have basically indeed in it                                 sis charts and replicas these are like                                 the main concepts and how you how you                                 structure your data and again so Alexis                                 search basically uses Lucine and creates                                 this this index which is basically a                                 leucine store store M or more                                 specifically N and n times in the scene                                 store and call charts and these charts                                 have replicas and yeah replicas are                                 actually not only useful for just                                 replicating data and for alterans but                                 also for increasing the search                                 performance                                 so how do tables then relay to images                                 and charts so a table and create it be                                 in the end is like like an index mapping                                 which looks a bit like cryptic Jason                                 stuff like like on the right and the                                 good thing is you don't really need to                                 deal with this with all the json api and                                 when you use creativi and so actually                                 and if you create a petition for foreign                                 table then this actually becomes a                                 separate index so the way this works is                                 basically takes your your petition value                                 for example the year or the day that we                                 had previously and it encodes that into                                 the index and name and then you you get                                 just a new index from it so you can see                                 here on the right you have for example                                 two three tables T                                                       a t                                                                      called t                                                                 has also has basically separate indexes                                 for every day for so you have like t                                  day                                                                     it corresponds to so elastic search                                 indexes so what actually happens when                                 when you run a query with kratie B so                                 here we we have a select statements                                 where you group by the speaker name and                                 M want to get the the the number of                                 talks by by each speaker from this years                                 passwords in the castle room and yeah                                 when when when you execute a query like                                 this we basically run through like these                                 four phases and each phase has like                                 different question on our problem to                                 solve                                 I try to formulate that so the first one                                 is like the parser and it first looks at                                 your query and divides it into                                 two components so we know what what                                 parts the curry is composed of so here                                 we have a select which has a from and                                 and in the way I pad group by in an                                 order by and then then the analyzer                                 comes into play and asks you know what                                 these parts did you give me what what do                                 they actually mean when what do they                                 refer to so you so you basically                                 annotate what you have from the parlor                                 with so with what you know what you find                                 in in creativity about it so you know                                 okay                                 in the from class the speaker's is a                                 table and that exists in creative be it                                 has and you actually try to select the                                 name from the name from it to name field                                 and you're doing a count aggregation and                                 similarly also in the group by its order                                 by its or the same field and the where                                 clause it's all that you are actually                                 you're looking for as a type of                                 therefore the room castle and the year                                                                                                         does is and it figures out how do we                                 this is this how do we plan how do we                                 get results if we take this logical                                 representation of the query and put it                                 in to prepare it basically before the                                 execution create a plan how to to select                                 that data and here in this case it will                                 will collect basically the the name from                                 from the notes and then it will run a                                 hash aggregate to group by the name and                                 then in the end of will sort so and if                                 we have this plan we need to somehow                                 execute it also and this is what what                                 the executor is for so if we look at the                                 bigger picture here we can see that each                                 node has these components built in and                                 on top of this                                 create distributed query execution                                 runtime or                                 actually Beneatha's we have the the                                 transport layer of elastic search and                                 the starch and so if you receive a quest                                 request from any client you will go                                 through and not any note can accept this                                 request and you will go through these                                 phases and distributed request the                                 request in the cluster and and collect                                 your results so what are the highlights                                 of this architecture so obviously it's                                 it's fully distributed and you also have                                 this distributed execution which gives                                 you really fast results and it's it's                                 master list so you can just connect to                                 any node in your cluster and execute                                 your query yeah it's it's due to the                                 replication we also have the end of the                                 advantage that you don't need fixed                                 durable storage so you can use a                                 ephemeral storage and if you if a node                                 goes down then the the data will still                                 be replicated in the cluster and this                                 makes it really good for containers                                 actually where you might not always have                                 access to durable storage but you rather                                 take snapshots from time to time yeah                                 and then actually all fields in in is                                 assumable but all fields in creativi are                                 indexed by default so you don't need to                                 think about whether it's fast to create                                 that data because it's it's it will be                                 because it's indexed of course this is                                 this is tunable it takes a bit more                                 storage but it's what most people                                 actually want so I want to show you a                                 bit night next what people build with                                 kratie B so the main use case for                                 creative B is what we see a lot of                                 people doing it with it is monitoring                                 with real-time analysis especially                                 in in in the IT industry you know                                      many surveilling network events having                                 sensors and factories which which sends                                 like thousands of records a second and                                 you want to be able to to have and gain                                 an in real-time insight into what's                                 happening obviously data signs because                                 you can just run sequel and you don't                                 need to know anything about databases                                 otherwise and some people also doing                                 stream analysis with it it's it's well                                 not maybe not exactly stimulus is like                                 flink but you can do a fairly amount of                                 interesting cases where you where you                                 take part where you extract data from a                                 table on a regular basis and of course                                 due to full-text search it's really                                 useful for text analysis time series are                                 due to the petition table it's really                                 useful                                 we have also people who use it to for                                 example track their vehicle fleet and                                 they need this geospatial career support                                 there this comes in really handy just to                                 give you an example of one one of great                                 iOS customers it's called al play and                                 it's manufacturers bottles for all kinds                                 of purposes like food cosmetic or                                 cleaning stuff and they are quite the                                 company I would say so                                                                                                     world and yeah so they also use crazy be                                 for real-time insight into the manage of                                 manufacturing process so the measure of                                 throughput failure rates they can see if                                 a machine is about to go to die and it's                                 maintenance they can just add really                                 real-time see what is going on their                                 manufacturing process and they were                                 previously doing that or starting to do                                 that as well but it came as a much                                 higher operational cost because they                                 were basically had like this really big                                 databases and to which with expensive                                 software                                 we've created be it yeah they can just                                 run on commodity hardware and yeah                                 that's it                                 or yeah actually previously they would                                 would run like nightly analysis which                                 would give them like much later insights                                 into their data okay this is how I don't                                 know why it's written demo there I can                                 give it to you as well but this is the                                 creativi web interface so this is the                                 overview page where you can give a get a                                 quick overview of what's happening in                                 your class or whether all your data is                                 replicated you can see the load and um                                 there's more of course we have also a                                 table overview which gives you the                                 number of records stored and an overview                                 what petitions exists for a table and                                 also there's an overview page for the                                 notes where you can see how every note                                 is doing we even have like a fancy a                                 sharp overview table where you can see                                 how your data is distributed for every                                 table and yeah I I'm already at the end                                 I feel like I maybe spoke too fast                                 because it took me like                                            longer when I practice talk but okay so                                 what have we learned                                 obviously elasticsearch built this                                 search engine on top of leucine and                                 kratie b took it well one step further                                 and I built a sequel database on top of                                 elastic search and leucine and I think                                 creativity is perfect for you when you                                 when you want to use yeah or have to use                                 sequel and it's just scales out really                                 well and you can store large amounts of                                 data and now at the end of my talk so I                                 just want you to encourage to try it out                                 it's really easy so go to the download                                 page or if you if you fancy and bash                                 just pay                                 and trust us that it runs the right                                 thing so are you use docker docker run                                 create mmm or built from source it's                                 also possible if you are interested in                                 the Ducks they're really good check them                                 out and also contributions of course are                                 welcome it's an open source project you                                 can look at the developer documentation                                 there are getting up issues Stack                                 Overflow questions please ask or join                                 our at slack Channel thank you very much                                 so we have time for questions                                 hello I actually have two questions so                                 first one is about the JDBC driver that                                 elastic released so they have also a way                                 to launch sequel queries on top of                                 elastic recently so how how does it                                 compare to that I I've only actually                                 recently they're open source their                                 sequel layer so I took a look at it I                                 have not played around with it much but                                 as of now it's very basic so it lets you                                 run simple select queries with with a                                 where class it it seems to be more                                 difficult or impossible to do more                                 complex aggregation sub queries joints                                 as far as I know it's not supported yet                                 fair enough                                 and so second question about joins what                                 are the limitations that you have with                                 joints on top of credi B because I guess                                 there are some limitations of course so                                 we recently did a lot of work there to                                 improve joint performance so if you we                                 have basically the the well we have an                                 early times we just had like the nested                                 loop joints which we're kind of is                                 really slow way to do joints nowadays we                                 have hashed joins so this is typically                                 if you run like a equi-join this is this                                 is very fast and in terms of limitations                                 you are of course limited a bit by the                                 RAM on your machine so if you for                                 example in a hash join and you kind of                                 need to need one of the side of your                                 join to fit in memory so if you if that                                 is not the case then of course great                                 will not crash but you won't be able to                                 execute the query so this is basically                                 the only limitation that I'm aware of                                 but yeah otherwise you can really join                                 like huge data sets with like millions                                 of rows yeah try it out okay I just                                 started playing around with the elk                                 stack and I was wondering does cabaña                                 for example work on top of creative be                                 good question                                 in theory I mean I don't know is it's it                                 doesn't just use the elastic search API                                 I would assume right so it if that's the                                 only if that's the case then actually                                 you you can enable the elastic search                                 API also with creative e so that might                                 be an option if you really want to use                                 Cabana and you also want the sequel part                                 so that's theoretically I mean I don't                                 know who I don't know somebody who does                                 it but it's possible I've Nev I have                                 leave a question for you when you're                                 just great a DP and                                                    to your talk at your pass and four years                                 ago and was pretty cool at that time                                 because what's the first database which                                 basically probably using a sequel                                 nowadays we have you can scale Postgres                                 with clusters we have stuff like                                 cockroach TB pit provides just Richter's                                 actions across data centers we have                                 stuff like Arango DB which provides                                 mighty mortal database with document                                 store graph                                 and so on we have lately ever released                                 foundation DB which provides students oh                                 what's the selling point                                 how do you compare it with these surveys                                 and what would be a key feature for                                 making the decision use credit be                                 compared or others yeah I think the key                                 feature is probably that we have fairly                                 complete sequel support so a lot of                                 other solutions out there I think they                                 implement only like a part of sequel and                                 you run into a lot of limitations                                 another advantage is I think that is                                 it's really easy to set up and to scale                                 you don't need to do much there you just                                 add more notes and this behavior that                                 everything is like index and file                                 searchable really quickly I think makes                                 it a very good use for just very good                                 tool for analytics and I think it's                                 generally bit harder to use it with the                                 others I haven't                                 honest to be honest I use Arango to be                                 and I've used cockroach I know cockroach                                 is just very for example due to the                                 transaction support much slower than cry                                 TB I've seen that so I mean I mean don't                                 get me wrong a cockroach EP is great                                 product but if you don't require                                 transactions I think you're much better                                 off with cry TB and for the yeah for the                                 elastic sequel layer I mean I can only                                 say it's it's not as complete yet so so                                 I mean really what we've done the past                                 years at creatively a crate i/o is to                                 focus on the sequel part and we could do                                 that really well due to the ice exerting                                 the scene being kind of provided to us                                 and building distributes equal layer is                                 not so easy and to get it right so I                                 think creatively does it does it very                                 well hi I have a question regarding also                                 which elasticsearch version are you                                 using today and                                 a few experienced also challenges across                                 the versions about scalability so for                                 example how about scaling or what trendy                                 notes we you currently use elasticsearch                                 version six one two or something in that                                 yeah so I think is it later than almost                                 the latest version we usually we track                                 the elasticsearch written to to also get                                 advantage of the improved performance                                 improvements so it is true I think that                                 scaling elasticsearch clusters so and                                 that's also creative you clusters add to                                 more than or to hundreds of nodes can be                                 a bit challenging because it is it's not                                 if I think the the network layer system                                 meant to do that                                 because every node stays connected with                                 every other node so the number of                                 connections really grow and just can get                                 somewhere yeah but I and I've heard                                 actually people using like                                          cluster I know that it definitely                                 doesn't stale to thousands of nodes or                                 so most of our customers use actually                                 rather small clusters like up to                                    nodes or so and and they're really happy                                 with it and but yeah I mean for huge                                 clusters it can be challenging but we                                 might do some summer work there in the                                 future if more people ask for it and and                                 have I understood you correctly so                                 previously someone asked about joints so                                 you are if the one of the data sites is                                 you need a small data site right so that                                 you can create this join in memory so to                                 say and if one side is or if this sides                                 get too big then you would somehow stop                                 execution and say to your users know                                 your data set is to pick your joining                                 this is correct yeah that's correct                                 okay                                 thank you any other question and that is                                 thank you very much we will continue                                 from                                                        thank you                                 [Music]                                 [Applause]
YouTube URL: https://www.youtube.com/watch?v=7gjaY9SIZqQ


