Title: #FOSSBack 18: Paul Sherwood â€“ Failing fast and often in FOSS communities
Publication date: 2018-06-27
Playlist: FOSS Backstage 2018
Description: 
	Codethink has been active in sponsoring and contributing to various FOSS communities since 2007. This talk will highlight some of the key traps Codethink and our people have fallen into, lessons we have learned along the way, and a few itches we are still trying to scratch.

This talk is presented by Codethink.

Read more:
https://18.foss-backstage.de/session/failing-fast-and-often-foss-communities

About Paul Sherwood:
https://18.foss-backstage.de/member/paul-sherwood

Website: https://www.foss-backstage.de/
Twitter: https://twitter.com/Fossbckstg
LinkedIn: https://www.linkedin.com/groups/8653059/
Captions: 
	                              normally I don't introduce myself but                               then I saw Lamia introduce himself and                               oh I'm gonna do that                               so I sing in a band I'm in award-winning                               feature film producer which means                               absolutely nothing because I lost a                               significant amount of money making a                               feature film                               I wrote the software Commandments                                   years ago and that kind of sets the tone                                for the rest of what I'm about to talk                                about I'm very opinionated about                                software so over                                                       I already pretty much understood what                                went into software engineering and I was                                very clear to explain all of that to                                customers and in general I tend to agree                                with me recently for better or worse I                                wrote some software in the open mainly                                to prove to some colleagues that I could                                still write software that's called ybd                                my blog posts such as they are I blog                                about once a year on something that                                really annoys me typically is a dev                                conversion I'm Python Ruby get C and vie                                in spite of people saying that these                                days we should all use IDs                                why is fine for me thank you very much I                                have trust issues I really don't trust                                most software I care deeply about that                                because I've got young children and                                working in the automotive industry and                                we're about to do autonomous vehicles                                and I'm thinking what can possibly go                                wrong I've spent some years now working                                with various automotive companies and as                                I have been known to say to them and to                                say in public in other venues a lot of                                those projects are bordering on chaos                                we're not sure exactly what's landing up                                in the cars let alone what decisions we                                might make based on that so I am deeply                                worried about the quality of software                                engineering I'm I'm trying to fix that                                and I compensate for the opinionated                                nurse and grumpiness by being strictly                                honest so I do not lie in business and                                I've held to that line for over                                         this pisses some people off because I                                tell the truth about things and as one                                of my colleagues said a trouble is Paul                                you make people look bad and you don't                                apologize so you get what you get so                                coding is a much friendlier organisation                                than I am but I am the                                Oh of code think coding specializes in                                embedded system software and primarily                                we help much larger companies tackle                                hard projects around open source                                embedded Linux that kind of thing now we                                have failed hundreds of times in the                                open and I recently realized that                                actually it's been a key factor in what                                we've learned so I've been involved in                                the open source arena now since about                                                                                                     ever since then so I now know a whole                                load of stuff I didn't know                                             because of what I've learned working                                with open source people so I'm very                                positive about the open source                                communities in general but in the course                                of the last few years I've had some                                really disastrous experiences and I'm                                going to share one of them in detail but                                all of those I could talk for days about                                the problems that we've exposed there                                often to do with politics to do with the                                actual people and the agendas of the                                organizations that are involved in                                large-scale open-source projects these                                days it's no longer a hobby kind of                                scale environment I don't think it                                husband for a lot of a lot of years but                                what may not be obvious to contributors                                on the ground is just how much                                machination and politics and company                                stuff is going on behind the scenes of                                their favorite projects so in spite of                                all the failures and if you were to                                google and read some of the emails                                change that I've been involved in                                although other people be involved in                                from coding you'll see we've managed to                                frustrate and upset quite a lot of                                people but here's one specific example a                                few years ago we were heavily involved                                in a thing called Geneva and that's                                around the taut emotive software and I                                 tried really hard this is five years ago                                 to explain to them that security was                                 going to be a problem so this is the                                 deck I started trying to show and I                                 prepared pretty well better than I                                 preferred for this talk I had detailed                                 discussion with Greg Troy Hartman about                                 LTS an LTS I and the I was wrestling                                 with what do we do to upgrade the Linux                                 kernel over the                                 term so I had this whole slide deck and                                 I started presenting it to the greater                                 good in Geneva which is notionally open                                 source expert coming up with the core                                 Linux solution for cars so I was                                 explaining how security coupled with the                                 amount of software that we have in cars                                 now and yadda-yadda-yadda                                 and how fast linux is changing and the                                 fact that we're connected meant that we                                 have a load of changes happening as time                                 goes by in the kernel and even the                                 stable stuff is changing a lot and                                 everybody's going to have to upgrade                                 over and over again I got about halfway                                 through my talk I got to about this                                 stuff and then the room on maths pretty                                 much told me Paul you don't know what                                 you're talking about security in                                 automotive is not a problem you're                                 exaggerating it we've been doing                                 security and other domains for decades                                 and I was heckled now that wasn't the                                 first time I was heckled in Geneva thank                                 you for being so polite and quiet and                                 not heckling me it's quite often the                                 people literally don't like my slides                                 enough that they start shouting at me                                 from the floor to derail me so you've                                 been very friendly so far hopefully I                                 won't annoy you guys so literally I                                 struggled through about half of this and                                 then gave up I was trying to explain how                                 complicated LTS I was and how stupid it                                 was because actually it meant that                                 silicon vendors were going to land their                                 stuff in the wrong place they were not                                 going to land it in main line and                                 therefore in some cases it was literally                                 just going to create chaos but I got                                 stopped so it ended up with obviously I                                 wasn't positive I wasn't popular but I                                 ended up writing that in public now bear                                 in mind I'm a small representative of a                                 small company we're about                                 well now we're approaching                                            but this time we're about                                               I pretty much wrote to Geneva in public                                 and said look you're just around                                 now that email sat on that list now for                                 a couple years no one bothered replying                                 in public but you can imagine all kinds                                 of things went on in private so what                                 I've discovered my opinions are my own                                 different people encode think it                                 disagree                                 with me via McLeish I have arguments in                                 coding as well as with customers and                                 with open source projects so it's                                 probably me                                 but what I've concluded is that Foss is                                 not a community and anyone that talks                                 about the community is misunderstanding                                 the scale and complexity of the                                 situation I mean if you check my timing                                 its thousands of communities lots of                                 them overlap there's lots of different                                 ways that people interact you knows tiny                                 projects huge projects some of the                                 larger communities in effect are members                                 only clubs now the Geneva is one example                                 but I could point to lots of other                                 organizations and say it's the same kind                                 of thing if you're not paying the fees                                 to be part of the club you're not                                 getting in in effect if you're not                                 following the rules that they set for                                 you you're not getting in so one example                                 Lynne ro                                 arms stated official open source                                 organization we tried to contribute to                                 non-linearity wanted to do open sourcing                                 open source development including if                                 necessary reverse engineering of their                                 graphics stack and we started a project                                 called or we helped one of our engineers                                 start a project called Lima                                 unfortunately arm did not like that very                                 much dinero certainly didn't like that                                 very much and we were told that actually                                 no if we wanted to contribute inland ro                                 a we would have to pay B we would have                                 to provide the engineer and see our                                 engineer would have to do only what they                                 told them to do by then so in some cases                                 it's very much a situation of our rules                                 our game okay and the lesson that I                                 learned from that and other experiences                                 is make sure you know what the game is                                 and whether the rules that they're                                 playing by are things you want to                                 actually play by now here's the thing                                 don't you dare call my baby ugly if you                                 turn up as I have done in multiple                                 open-source projects that said you know                                 this is pretty rubbish isn't it can we                                 can we do better                                 it tends not to go down very well                                 unfortunately I've done that to at least                                 one project where coding was primarily                                 driving the development                                 and how that played with my colleagues                                 the upstream folks almost certainly in                                 most of the established projects are                                 relatively good at what they do that's                                 one of the things that is really quite                                 exciting about open source that there                                 are lots of projects where there are                                 amazing engineers working it on upstream                                 that does not mean they're right all the                                 time and it does not mean that they're                                 thinking about the changes that have                                 happened since they started this thing                                 and in some cases when you turn up and                                 say look it's                                                        could do something different it can be                                 extremely disruptive for all that                                 community in the sense of it literally                                 changes or it could have an effect on                                 the world view so that's not a very                                 productive way of being either I've                                 learned that on multiple projects now                                 and in the end the reason I brought the                                 ybd thing was to literally prove to an                                 open source project that their stuff was                                 not good enough and that I on my own                                 could do it better                                 and sadly I succeeded and in the process                                 I caused at least one of my colleagues                                 to resign saying actually that's a bit                                 unfriendly anyway right shouldn't have                                 done it anyway it's hard to collaborate                                 in a snake pit let me just spell it out                                 wind river I'm sorry there are lots of                                 great people working in Wind River but                                 in my personal experience trying to                                 collaborate with Wind River absolutely                                 disastrous because they're just the in                                 practice were always happening was they                                 were trying to sabotage what we were                                 doing we're offering work for free we're                                 bringing software into the open for free                                 and trying to advance the state of the                                 art trying to advance the industry and                                 literally they were hell-bent on holding                                 things back and making it worse now very                                 risky naming a name like that but Wind                                 River already know that I hate them so                                 it doesn't really make any difference                                 this is not the first time I've said                                 this and as I said there are some good                                 people in Wind River and at least most                                 of the people I used to have to fight                                 with are no longer there one other thing                                 I've discovered is it's there's just so                                 much hype and nonsense in Foss there is                                 in the rest of the world we learned the                                 hard way that just because some big                                 companies present that they're doing is                                 fantastic project and spending a fortune                                 on                                 creating the next big embedded distro                                 let's call it I don't know me go that                                 does not mean that they're going to                                 follow through and when they rename it                                 and call it Tizen that doesn't mean                                 they're gonna follow through either when                                 you look at the long game                                 I have deep-seated trust issues I'm                                 trying now to work out which                                 organizations which projects could we                                 actually trust for the kind of                                 super-heavy software that we're talking                                 about in autonomous vehicles and other                                 industries and these problems are not                                 really getting sorted properly yet we're                                 right now in discussions with a part of                                 one of the Linux Foundation's                                 organizations where because we are                                 relatively expert in long-term Linux we                                 were invited to work on civil                                 infrastructure platform which is                                 software for power stations and trains                                 and you know really serious stuff and                                 then at the moment what we'll locked                                 with is that one guy in the world                                 that has been prepared to maintain a                                 single learnt Linux kernel for ten years                                 and he happens to work at Ko tink and                                 CIP in effect needs to maintain a kernel                                 for the rest of eternity and it's really                                 struggling to find anyone to do that so                                 it's hard and I philosophically would                                 say it's it's actually just a mistake to                                 even try that because Ben who is the the                                 chap in question as categorically said                                 having done it once he would never do it                                 again it's it's the wrong way to do it                                 if you build it they will not come                                 necessarily I've certainly learned this                                 multiple times but this is not just open                                 source just having a better mousetrap                                 does not lead to a community and you're                                 probably thinking I can see my no one                                 wants to be in a community with Pauli                                 pisses everybody off it's not quite that                                 simple I think you need to get all of                                 your ducks in a row you need to have                                 great software and you need to have the                                 right outreach and you have have to have                                 the right attitude in the project and                                 for better or worse although I really do                                 respect and love great engineers at                                 times engineers are not the best                                 advocates for the work they're doing in                                 my own person                                 experience so key let's not want to                                 leave you with I'm still on time it's                                 pretty good up streams are not generic                                 you know that it really does come down                                 to specific people on a specific project                                 and specific organizations if you get to                                 the kind of scale I'm talking about with                                 some of these examples so understanding                                 who the people are and why they're doing                                 what they're doing                                 understanding the organization and why                                 it is doing what it is doing is crucial                                 to working out whether there's any real                                 merit in spending any time aligning with                                 or working with a specific project and                                 often the agendas as far as I can see in                                 some of these very large                                 organizationally sponsored projects is                                 not what is being stated in public every                                 day on the mailing list I'm sure I'm not                                 alone in having discovered this so it's                                 not necessarily the case that the                                 software that's market or the project                                 that's marketed biggest is even remotely                                 successful market marketing is not                                 connected to engineering some of the                                 most successful open-source projects                                 were and were developed by one                                 individual person and are still being                                 heavily relied on                                 there's loads of software in pretty much                                 every Linux stack that most software                                 people will not recognize because it's                                 too low down but it's absolutely crucial                                 to everything else that sits on top of                                 it so success is not necessarily what                                 people are saying with their their fancy                                 slides and one thing I definitely                                 learned over the years is that                                 engineering takes way longer than people                                 think so when the market is sayo next                                 release is going to do this that doesn't                                 necessarily mean it's true in spite of                                 upsetting so many people I and code                                 things are still very positive in it                                 about a range of projects and we're                                 actively involved in a range of things                                 so as you can see we've been sponsoring                                 this event and I'm I was a bit less                                 convinced yesterday but I've been I                                 think it's simply down to which talks                                 and who you talk to in any conference                                 and I've had a very positive dated                                 Everland learned quite a lot of things                                 I'm actually glad very glad that I came                                 the two witches that we're still                                 scratching and I will mention this                                 mainly because it's it's not that we're                                 trying to kind of cult it cultivate                                 branding around it it's trying to get                                 people to understand that we're not just                                 doing this for whimsy if we're going to                                 rely on software to the level that                                 everybody is because most of you drive                                 and most you get into airplanes and get                                 on trains and all that kind of stuff I                                 don't care so much about the games on                                 your phone and I've given up on the                                 privacy thing because we're all screwed                                 for that but I do believe that we need                                 to know what software is running in the                                 devices that we that actually matter to                                 our lives and to our community's lives                                 and our children's lives so build stream                                 is part of a multi-year activity that we                                 and others have been involved in trying                                 to get to completely guaranteed custom                                 systems where we can be sure that this                                 is what's in the system so it may sound                                 a bit like the reproducible builds                                 project and certainly we're very                                 interested in that work also but trying                                 to describe a complete system and know                                 for sure that that is what is landing on                                 an ongoing basis forever is is a crucial                                 thing for us and then the trust a bill                                 if softer engineering in itself is a big                                 topic for me I do not trust NPM or gems                                 or any of the package managers and I                                 don't trust docker images you it's kind                                 of naive to be installing all of that                                 stuff and then thinking you've got a                                 safe production system so one of the                                 areas that I'm trying to drive and trust                                 of all is is certainly something I'm                                 personally nailed to so if and when it                                 fails it'll be me failing again in                                 public I'm trying to get more people to                                 understand that we do need to understand                                 fully where software comes from who                                 wrote it                                 why they wrote it how it was reviewed                                 how it was tested the whole works sort                                 of a full supply chain for all of the                                 Foss software that we are going to be                                 increasingly rely on relying on so                                 that's it thank you very much indeed                                 [Music]                                 yeah thank you to Paul sure but we still                                 have a couple of minutes anyone has                                 questions before breaking to the coffee                                 break no no questions may be over there                                 is one suddenly I understand that the                                 Aeronautics industry developed software                                 in a very different I'm sorry I can't                                 quite hear can we get him turned up                                 please                                 sorry he's still gonna I understand that                                 the Aeronautics industry develops                                 software in a very different context yes                                 can you comment yes I believe that                                 overall historically the Aeronautics                                 industry has done pretty well at                                 software but they achieve that by                                 methods which are relatively labor                                 intensive so there's a lot of paperwork                                 and it's relatively expensive to do and                                 they are also coming up against some of                                 the same things that automotive is                                 hitting so one their devices are                                 increasingly connected which means they                                 are at risk and to the pressure on their                                 costs is much more significant than it                                 than it has used to be so there I think                                 there's a clear need for more automation                                 of how they do their validation and                                 their review and all of that kind of                                 process and we've had interesting                                 discussions with parties in those                                 industries around that so all I would                                 say is yes they're relatively good but                                 arguably some of their constraints have                                 been less than other industries and I                                 think it's gonna get worse it you know                                 I've said elsewhere that until more                                 people start dying as a result of direct                                 software mistakes the the governments                                 around the world are corrington aren't                                 going to raise the bar enough but I                                 think that's going to happen over the                                 next five years I'm very confident it                                 will be much more regulation of all                                 software okay thanks very much                                 you
YouTube URL: https://www.youtube.com/watch?v=xEfjFcBsegg


