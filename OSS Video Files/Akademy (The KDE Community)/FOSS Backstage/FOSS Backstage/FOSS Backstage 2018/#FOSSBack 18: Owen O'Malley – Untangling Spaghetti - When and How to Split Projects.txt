Title: #FOSSBack 18: Owen O'Malley â€“ Untangling Spaghetti - When and How to Split Projects
Publication date: 2018-06-21
Playlist: FOSS Backstage 2018
Description: 
	When creating a new system that works with an established project, an important consideration is whether to make a new project or a subproject of the established
project. The considerations include:

- How fast is the release cycle for the established project?
- How tight is the integration with the established project?
- Will the excitement of a new project bring more visibility?
- Is the community separate from the established project?
- Is the new project large enough to be self-sustaining?
- Will tighter integration with the established project be helpful or cause difficulty for integrating with external projects.

We'll cover some of the cases that we made this decision and how they turned out:

- Hadoop and RecordIO
- Hadoop and Avro
- Hive and Tez
- Hive and ORC

After making the decision, as the projects evolve the tradeoffs may change and
need to be revisited. Unfortunately we also have experience and have
pulled apart ORC from Hive and now the metastore from Hive. We'll cover the
technical challenges and the governance challenges of splitting an existing project
into two projects.

Read more:
https://18.foss-backstage.de/session/untangling-spaghetti-when-and-how-split-projects

About Owen O'Malley:
https://18.foss-backstage.de/member/owen-omalley

Website: https://www.foss-backstage.de/
Twitter: https://twitter.com/Fossbckstg
LinkedIn: https://www.linkedin.com/groups/8653059/
Captions: 
	                              stop me with questions if you've got                               questions this is for you guys right Who                               am I I've worked on Hadoop for a very                               long time I've been working on it since                                                                                                     a lot of different Apache projects and                               mostly I work on orc hive and to do okay                               so when I was thinking about this talk I                               wanted to talk about splitting up                                projects and I realized there's actually                                a more fundamental question of oK you've                                developed a new piece of code that works                                with some project where do you start                                that thing do you ask to become a part                                of the big project do you start a new                                project in Apache Incubator Apache                                Incubator of course is where new Apache                                projects go to start up where do you go                                in one of the trade-offs there and what                                if you change your mind later ok so the                                first thing I wanted to talk about is                                the Apache of the life cycle oh by the                                way of course a lot of this applies to a                                lot of open source projects I'm of                                course mostly familiar with the Apache                                methodologies since that's the projects                                I've mostly worked on so people often                                complain that there are too many                                different Apache projects that do the                                same thing right they complain oh                                there's work in there spark' there's                                meso sand yar and there are a lot of                                different pieces and a lot of that comes                                because this is really is an ecosystem                                that we're building and every time that                                there's a need multiple people see oh I                                want to address it like this and so they                                start a new piece of code and that's                                where it comes from                                these projects really are an ecosystem                                and so they're basically fighting each                                other but what                                competing for is community what they                                want people to engage they want users                                they want developers that's what makes                                them live or die but there's also a                                lifecycle for projects when they're                                young they start off very fast and then                                both they can adapt quickly they can                                shoot off and radically different                                directions when environment changes but                                if they grow up then they slow down they                                start valuing compatibility more than                                new features and eventually the the                                releases stop the bicycle of course is                                on there because open-source projects                                are very much like a bicycle if you                                aren't moving forward you're about to                                fall over and stop making progress okay                                so if often people's first inclination                                is to join an established project there                                are some advantages to that you get                                instant name recognition right you're                                like oh you're part of the Hadoop                                project that's great it can get you a                                large installed base because you'll get                                installed along with all of Hadoop and                                you get a much easier way to integrate                                with the code bases there are some                                downsides however in particular you have                                to wait to become committers because of                                course Apache is all about showing that                                you've done good work to become a                                committer and so you don't become a                                committer instantly especially on the                                large projects actually the large                                projects are notorious for requiring                                higher and higher bars as they get                                bigger and older and actually the                                biggest projects are the hardest ones to                                become committers in but even more                                importantly you tie yourself to their                                release cycle this is really really a                                huge problem because then all of a                                sudden instead of being able to release                                once every month or once every three                                months now you you're going once a year                                between releases right Hadoop and hive                                can easily go a year or two between                                new minor releases never mind major                                releases and so that becomes a problem                                obviously the pictures from Indiana                                Jones because he's about to merge with                                that Boulder now one of the examples of                                this was a little project called Hadoop                                record IO it was an early serialization                                library that implemented Hadoop's                                rideable classes for you this put int I                                do and no one ever made very much noise                                 about it                                 so basically everyone has it almost no                                 one knows it's there it's been                                 deprecated for however many years but we                                 can't delete it because when we tried                                 the uses there were some users and they                                 started screaming at us please don't                                 delete that we use it in production all                                 the time and all our data is written in                                 it                                 so another example comes from hive we                                 just a few years ago started the lapl ap                                 stands for a live long and process of                                 course it's the take off on live long                                 and prosper but yeah our marketing team                                 very unhappy with us they were like what                                 the hell are you doing calling it but                                 that's why engineers get to pick the                                 names and not marketing team so it does                                 a lot of cool things that basically as                                 long living demons that can run hive                                 queries and basically turns it into a                                 distributed database it avoids the JDK                                 startup cost because I don't know if you                                 know this but every time we started a                                 new JDK it it takes at least a second                                 before it starts running very quickly                                 and it'll cash the hot data in memory so                                 the biggest thing here was that it was                                 really just part of the hive community                                 it was the hive community doing it it                                 had a really tightly integrated code                                 base and so we decided okay we're just                                 going to put that into                                 the project itself okay separate but                                 together now one of the pieces that                                 people don't often realize is that there                                 is actually a third option                                 Apache projects can have multiple                                 releasable sub projects which Apache                                 Commons is the canonical example it                                 allows for separate release trains and                                 bug tracking and source version control                                 so there the question you really have to                                 ask yourself is do the two communities                                 overlap significantly we actually did                                 this there's a new project coming out of                                 HDFS team called Hadoop ozone and it's a                                 basically a distributed key-value store                                 it's got overlapping communities it                                 integrates well with HDFS although in                                 that case it actually isn't integrated                                 tightly with HDFS they originally                                 designed it that way and HDFS committers                                 pushed back strongly and said no don't                                 just destabilize our project by putting                                 your code in here even if it's                                 configured off we don't want to debug                                 your code because it's messing up our                                 code but it needed faster releases than                                 I do so actually I worked with them and                                 this convinced them to make a                                 independently releasable sub project and                                 so they're actually going to make their                                 own release train so that instead of                                 waiting until Hadoop                                              release immediately another advantage of                                 course is that that'll allow them to                                 work with the older Hadoop versions ok                                 and finally there's starting a new                                 project that lets you control your own                                 life cycle in terms of releases you get                                 the excitement of a new project you get                                 to go out and evangelize and you have to                                 address the integration immediately                                 right so you have to say early on this                                 is how we're integrating we're going to                                 consider these interfaces and how to                                 deal with that and the one thing you do                                 need to consume                                 though is in the long term will your                                 development community be big enough to                                 actually survive you see this with some                                 older projects where they actually have                                 a part time getting three vote voters to                                 validate a release so they can actually                                 make a release AMRO was a project that                                 started back in                                                 serialization library it started as an                                 independent project it which allowed it                                 to do frequent release cycles and they                                 picked up a lot of projects outside of                                 Hadoop so this was actually a really                                 good use case for having a separate                                 project the one challenge of course is                                 that there was a really complicated                                 dependency tree for Hadoop and only                                 really stabilized once Hadoop and Avro                                 both got stable enough that those                                 interfaces stopped changing when they                                 were both changing and made a complete                                 mess because on the other hand was an                                 execution engine we did four hive it was                                 a replacement for the old MapReduce so                                 we like okay well it started as a                                 separate project that actually was a                                 pretty bad call because there's                                 basically a one-to-one correspondence                                 between each version of hive to a                                 version of Taz so they're releasing at                                 the same time and they're pretty tightly                                 integrated and actually it's a lot of                                 the same people working on both so we                                 could have done better there okay when                                 we were originally coding the the work                                 project we considered where to put it                                 however during the decision we were                                 watching the the hive list and we saw                                 that another format was trying to get                                 hive bindings into hive and the hive                                 community pushed back in particular one                                 particular developer was like no we                                 don't need another file format go away                                 and we're like oh we've got this                                 file format what we've been working on                                 we really want to integrate it with hive                                 that's not good                                 so we renamed it                                 to ork because it's optimized our see                                 file and the guy who was complaining was                                 the guy who wrote our see file and we                                 decided to become part of hive and that                                 helped the hive work integration a lot                                 however work being inside of hive was                                 really hurting adoption other projects                                 didn't want to pick up work because that                                 meant they had to pick up all of the                                 classes of hive as a dependency it was                                 viewed as only useful for hive and part                                 of the other piece was that projects                                 viewed Orcas being so tied to hive that                                 other projects needs wouldn't be taken                                 seriously and that kind of naturally                                 happens when you start looking at other                                 projects and okay what do they need                                 you're less likely to contain it                                 seriously if you're buried inside of a                                 big project another problem was that we                                 had some new C++ code that C++ code was                                 coming in and had its own set of                                 committers and we wanted to keep the two                                 code bases together and hive doesn't                                 have any C++ and so that wasn't a good                                 match and we wanted to release more                                 often so we decided to split it out and                                 in spite of all my learnings about how                                 hard it was now my coworker is doing the                                 same thing with the hive meta store for                                 almost exactly the same reasons in                                 particular he wants to boost adoption by                                 other projects okay so what did we do                                 the first thing that you need to do is                                 make a module of the code and you need                                 to decide whether you're at the top or                                 the bottom of the dependency tree make                                 heavy use of interfaces and plugins and                                 minimize the amount of code duplication                                 however with orc we were in the middle                                 and that kind of sucks so so orc                                 depended on                                                       excluding all of Hadoop and protobuf                                 and so I took a shot Abbot and failed                                 someone else took a shot at it and                                 failed basically things were just too                                 tangled up so we actually built some                                 tooling to help us and in particular it                                 used one of the dependency analyzers to                                 figure out which classes depend on which                                 club which other classes and so it                                 started from the root of the work                                 classes excluded all the Java had you've                                 been put above and then produced a                                 dependency graph they told us what                                 things were depending on now just doing                                 that of course the sixteen thousand was                                 a huge list and hard to work through so                                 what we did was we sorted that list by                                 the distance they were away from the orc                                 classes and then the second key was how                                 many classes they transitively depended                                 on that actually helped us really focus                                 the our attention on the the most                                 problematic classes and work forward                                 from there now part of that was we had                                 to define some new api's in particular                                 orc had used object hives object                                 inspectors which was easy because we                                 were in the middle of hive but hives                                 object inspectors had a huge dependency                                 set downstream and so we had to remove                                 that now fortunately we had also put in                                 fast vectorized methods vectorize in                                 this case or method or the ability to                                 process batches of a thousand rows at                                 once instead of row by row so we decided                                 okay we can get rid of all the object                                 inspector methods just leave the the                                 vectorized methods and then put it in                                 too high of a compatibility layer so                                 that if told users wouldn't break okay                                 so that comets down to around                                            or so that was                                 those                                                                   for high if we couldn't just pulled them                                 into orc because there were things like                                 the internal memory representation that                                 hive uses when its processing so no one                                 would be very happy if we pulled those                                 into it a different project we created a                                 sub project called storage API and that                                 releases the rest independently of hive                                 so we can release it more often we can                                 it has its own branches the current                                 storage API version is                                                                                                                         they were exactly for a while they were                                 exactly                                                                  sorry hive                                                            which confuse some people ok so after                                 you get your project done and split                                 apart into that separate module now you                                 can actually copy that code to a new                                 code repository and renamed the the                                 projects actually in work we screwed                                 this up we renamed the packages well was                                 still in hive and that was a huge                                 mistake because then we ended up with                                 compatibility issues as we released the                                 code then the new project needs to make                                 a release of the code and the old                                 project needs to come in and make the                                 switch now for something history this is                                 the first time we've tried to split up a                                 project                                                                up Hadoop into                                                          HDFS and MapReduce of course now you'd                                 throw yarn into that list as well                                 but part of what we screwed up is we                                 weren't paying attention to the                                 communities yeah those made sense from a                                 technical point of view but there was                                 actually no community for common right                                 people were either HDFS devs or map                                 new stoves there were a few of us that                                 did both but but there was no one that                                 was felt like they were a common                                 developer and so we actually I think                                 would have been better off keeping it                                 just as to where we had HDFS and                                 MapReduce and the common stuff was just                                 in HDFS that would also cut down the                                 number of cross project dependencies we                                 were also using Anton IV which made that                                 hard IV would pull down the the jars                                 that you needed but it was a lot less                                 straightforward to publish those doors                                 compared to using maven and so it made                                 the cross project code relatively hard                                 and made it so basically it was hard to                                 release this way and our failure of                                 adequately planning made it worse and so                                 we split it apart                                 okay separate code repos separate jiriz                                 everything and then a few years later we                                 pulled them back together because it was                                 just not working for us and so we put it                                 back together but as a result of all                                 this because yarn wasn't ready yet and                                 Hadoop is something that only makes                                 sense to release at scale then you ended                                 up we ended up blocking the HDFS                                 released for a few years with waiting                                 for yarn to get releasable and that was                                 pretty uncool actually okay so I had a                                 boss at one point who was aware of                                 Apache and didn't always get the finer                                 nuances and so one of his favorite plans                                 at one point was oh we can split apart                                 this project and we'll just take the                                 committers that worked on this codebase                                 and that'll be great because there's                                 only good guys on this list and none of                                 the bozos over there that doesn't work                                 at Apache at least there's just no way                                 to pull that off                                 what always always happens is that you                                 end up giving everyone who has commit                                 bits before you pull them out the commit                                 bit after the after you pull it out and                                 so you end up with a lot of people who                                 haven't worked on the code with commit                                 bits and actually I thought we were                                 mostly going to avoid that with orc but                                 even there the people were fighting to                                 be committers and so we ended up just                                 saying fine if you're a committer on                                 hive at that point then you can                                 automatically become a committer on on                                 orc and so that when we split at least                                 half of the committers on orc had no                                 patches and the code ace which is kind                                 of a strange place to be it also means                                 that work has a large number of                                 committers relative to its code base                                 size however what you can do is start                                 aggressively recruiting right you will                                 need to go out and talk about your                                 project talk about what it why it's good                                 why people should be using it and you                                 need to accept that and you need to be                                 welcome and friendly like I said part of                                 the challenge is that large projects                                 will often be hard to become a committer                                 well on small projects you often put the                                 commit bar very low because you're                                 trying to encourage people right and                                 people get very encouraged when they                                 become a committer after putting in some                                 patches and and you want to be welcome                                 and friendly and                                 okay so large open-source projects this                                 isn't obvious until you've lived it but                                 large open-source projects become very                                 very political especially I can always                                 talk about Apache projects Apache                                 projects because they're democracies all                                 right act like democracies everywhere                                 and so there gets to be a lot of okay we                                 need to be nice to that person so that                                 they vote with us on that and it means                                 that you're become very very aware of it                                 for small projects that fortunately just                                 goes away right you can just be focused                                 on your project focus on your community                                 and I've got to say that it's been a                                 really nice change faster builds right                                 ork builds in a few minutes instead of                                 hours actually it's close to                                            think to do a build of hive and get all                                 the unit tests passing well you get that                                 unit test run if you get them built and                                 passing takes much longer faster release                                 cycle it takes months to get a hive                                 release out the door right to go from oh                                 we should start making a branch to make                                 a release it takes months yeah I can                                 roll orc release in a matter of days                                 actually one day and so that means that                                 you can make you can make release as                                 much more care quickly and be much more                                 responsive to your users now granted                                 it's a smaller community so you need to                                 pay attention hey we haven't at least                                 for a while we should do that but                                 eventually the users will say hey you've                                 got those great features over there can                                 we get a release and then and that'll                                 come up it's much easier for newcomers                                 to pick up code when we split out the                                 first thing I noticed was people were                                 coming in with these little small                                 patches that did interesting things that                                 would have never come and touched it if                                 it was buried in the North hive because                                 changing hive is scary right you're like                                 oh what did I break but changing                                 orc you've got a much smaller code base                                 with                                 set of unit tests that test things out                                 and so you're much more confident making                                 changes and you end up spending a lot                                 more time on outreach and documentation                                 right although it feels really good                                 anytime someone says oh that work                                 website is so good compared to the hive                                 website I'm like thank you so it would                                 be a good investment anyway but it's                                 definitely one of the things that comes                                 up okay                                 challenges of small projects especially                                 in this split out backwards                                 compatibility is crucial right you have                                 because now those changes are going                                 across projects and especially with                                 storage API we really really need to                                 make sure that we don't break backwards                                 compatibility another of the challenges                                 is that at least right now - work are                                 actually really good tests for each                                 other and so anytime storage API                                 releases I don't actually plus one until                                 I've made and work release based on that                                 and often I'll check with the older                                 versions of work to make sure that they                                 haven't introduced API breakages and                                 correspondingly ork releases are tested                                 with hive that one we actually screwed                                 up recently which is embarrassing we                                 didn't one-five-zero broke hive and so                                 we needed to release one five one like                                 two days later but but it's good to have                                 the extra tests and cross project                                 changes require extra work so if we make                                 a change to storage API that is going to                                 affect work then we need to make three                                 releases right will you make storage API                                 release orc release and then a hive                                 release to get the flow all the way                                 through now that doesn't reduce some                                 delay Apache projects typically used                                    hours for a vote although in practice                                 we've run there's a one release or we                                 made storage API release and an orc                                 release concurrently so basically we                                 started the                                 at the same time and then they finished                                                                                                    doesn't necessarily introduce extra                                 latency it just means there's extra work                                 okay so some final conclusions your                                 first priority has to be the community                                 right when you're deciding where to put                                 this thing think about who the people                                 are gonna be working on it who are the                                 people who are going to be using it that                                 has to be your first consideration all                                 the times we've made the right call it's                                 been about the community now as we said                                 we also have you have to think about the                                 size of the community if it's a to a                                 small project then it'll be really hard                                 to get those three plus ones you need to                                 make a release and that becomes a                                 problem and you're trying to get the                                 project to this point where people just                                 start contributing and so that you reach                                 critical mass and you start get patches                                 flowing in you also have to consider how                                 tight the integration is going to be                                 good tight integration has good                                 properties and bad properties although                                 after spending too many months                                 separating work out I can definitely see                                 the bad properties and consider the                                 tools that are available right if you                                 have maven that's good C++ your tools                                 are much more limited for dependency                                 management and so that becomes a lot                                 more problematic and finally don't worry                                 if you make if you decide you messed up                                 and you need to change things or the                                 environment change you can always change                                 your mind okay any questions                                 yeah Thank You Owen so are any questions                                 well I have one yeah how do you avoid                                 politics and what are the key signs                                 suddenly it's a question of politics in                                 it about code so how do you avoid                                 politics to be fair there's I haven't                                 found a good way of avoiding politics                                 and in the large projects right working                                 on making smaller projects out of the                                 bigger projects actually does help a lot                                 because you've made the the pool that                                 you're fighting over much smaller where                                 if you have a very large project than                                 the politics get very extreme right the                                 the projects with multiple hundreds of                                 committers you're going to have politics                                 there's just no way to avoid that and                                 you just try to keep the politics clean                                 right you don't want company based                                 politics for example right and Apache oh                                 that's a big no-no you never want to                                 tell your your co-workers how they                                 should be voting for example but you're                                 always going to have politics and sorry                                 what was the second piece of your                                 question yeah it's there what are the                                 first signs of politics like when you                                 have a small project and you suddenly                                 you realize well is it about code or the                                 politics it usually comes up when there                                 there's some discussion about adding a                                 new feature so it becomes those kind of                                 discussions when people either try to                                 shut down one group because they don't                                 like how think the direction that                                 they're going or someone's trying to be                                 too controlling of making new committees                                 right so actually watching the committer                                 in flow is actually a critical sign of a                                 project that's working well if there's                                 no committers being added that's a sign                                 that the politics have gone pretty bad                                 questions okay thank you only appreciate                                 and I'm sorry I didn't see there yeah I                                 wanted to know how do you increase the                                 adoption of your project and how do you                                 reach out to other contributors to come                                 and take a look at your project and                                 start contributing so actually you do a                                 lot of things like going to meetups give                                 talks about it try to get people excited                                 about what's going on in your project so                                 it it's that kind of stuff right giving                                 talks about it talking to people and                                 just keep the project flowing right if                                 it's addressing new needs and actually                                 talking to the users about what they                                 would like to see in the project one of                                 the pieces that I've seen a lot is that                                 people have a big need to take these                                 highly complex data structures and that                                 they currently are getting is Jason and                                 put them into a structured file format                                 and they're doing it badly right now                                 because there aren't very good solutions                                 and so one of the pieces that came out                                 at I was like oh actually we should do                                 that and that will help drive adoption                                 another one for example is people want                                 protection over some columns right they                                 want to say okay only some people are                                 allowed to read this column because it's                                 PII so we're in the middle of adding                                 column encryption for example so mostly                                 and then of course you'd give more talks                                 about those features as they go in and                                 try to get people excited so mostly it's                                 that and make sure that when people come                                 in that you're welcoming and friendly to                                 them right that that's actually really                                 critical right you don't want people to                                 get disgusted with your community and go                                 away because that percolates rather                                 badly open source projects are our                                 relatively small community and and the                                 words will get around right if projects                                 have reputations rings                                 that's great and if they get reputations                                 for being not friendly that that's bad                                 oh there's another one question down                                 there so I was wondering if you have any                                 idea if one can use splitting projects                                 to manage deprecation cycles of old                                 components so as I the evil approached                                 to begin with let's say you have some                                 some component you don't want people to                                 use like your record i/o right would you                                 consider splitting that out into some                                 project on life support                                 not good so we've talked about that                                 especially in the context of hadoo of                                 splitting projects out especially ones                                 that are not used very much although                                 again because the community isn't there                                 especially for the ones on life support                                 I'd actually encourage you to go instead                                 to the model where there are separate                                 sub project that releases independently                                 so for example Hadoop really should do                                 that with MapReduce write MapReduce                                 basically never changes actually record                                 IO would be another great example of                                 that and so if we just release them                                 independently then they can can fall off                                 into disuse at their own rate but I                                 wouldn't split them off as a separate                                 project because there's no community and                                 so it'll be hard to maintain does that                                 make sense                                 great any more questions well thank you                                 all for coming it's been a pleasure to                                 be here thank you                                 [Applause]
YouTube URL: https://www.youtube.com/watch?v=VW7qeECUJCg


