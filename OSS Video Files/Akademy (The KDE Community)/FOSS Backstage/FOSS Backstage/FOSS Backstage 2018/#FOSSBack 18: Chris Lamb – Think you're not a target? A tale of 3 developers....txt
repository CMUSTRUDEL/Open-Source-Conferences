Title: #FOSSBack 18: Chris Lamb – Think you're not a target? A tale of 3 developers...
Publication date: 2018-07-09
Playlist: FOSS Backstage 2018
Description: 
	If you develop or distribute software of any kind, you are vulnerable to whole categories of attacks upon yourself or your loved ones. This includes blackmail, extortion or "just" simple malware injection … By targeting software developers such as yourself, malicious actors, including nefarious governments, can infect and attack thousands — if not millions — of end users.
 
How can we avert this? The idea behind "reproducible" builds is to allow verification that no flaws have been introduced during build processes; this prevents against the installation of backdoor-introducing malware on developers' machines, ensuring attempts at extortion and other forms of subterfuge are quickly uncovered and thus ultimately futile.

Through a story of three different developers, this talk will engage you on this growing threat to you and how it affects everyone involved in the production lifecycle of software development, as well as how reproducible builds can help prevent against it.

Read more:
https://18.foss-backstage.de/session/think-youre-not-target-tale-3-developers

About Chris Lamb:
https://18.foss-backstage.de/member/chris-lamb

Website: https://www.foss-backstage.de/
Twitter: https://twitter.com/Fossbckstg
LinkedIn: https://www.linkedin.com/groups/8653059/
Captions: 
	                              hey everyone hear me okay brilliant                               Thanks well thank you very much for                               inviting me here just gonna open this                               water away from my laptop good idea yeah                               lovely to be back in Berlin and see so                               many people here yeah I'll just one                               second thank you I'll just jump straight                               into it my name is Chris Lam                               I am from Cambridge not not this                                Cambridge they've been in the news                                recently I'm from this Cambridge which                                never looks like this by the way for                                about one day a year it's this sunny                                yeah but it can do you know punting                                you've not been it's very very nice but                                I tend to live in London these days                                which is a bit bit dreary ER and less                                photoshopped than this picture and I've                                been the Debian project leader since                                early                                                                  term I'm on the board of directors of                                the open source initiative which are                                sponsoring this event just hanging out                                there and giving another talk on that                                tomorrow in a free software developer in                                my spare time for                                                     got into it sort of fell into it and                                found myself with too much spare time at                                university usual usual thing and and now                                I'm a freelancer I was in the London                                style up scene for quite a few years and                                then I went freelance probably about                                four or five years ago I'm really                                enjoying it mostly doing open source                                work and things like that it's it's                                really really great just stuff like that                                I freeze not I do rental weird hacks so                                for example he's a pseudo moose over                                that in PostScript so actually if you                                print it to a real PostScript printer                                the printer itself will solve it I'm                                doing that all the correct backtracking                                of them etc or if you render it to a PDF                                your PDF render will do it for you but                                yeah just kind of stupid stuff like this                                oh it's someone else once asked on IRC                                can you get CP                                if a progress bar like W get well they                                are probably asking quite sensibly but                                yeah you can if you s trace the CP and                                and then yeah so you can kind of see it                                going don't don't use this don't use it                                oh it also made a operating system that                                plays hackers on repeat it's why not                                good for public kiosks just put in the                                USB stick let it boot once and it'll                                play hackers on repeat because why not                                yeah oh in my spare time whatever that                                is I pretend to be a classical musician                                that's a lute and a viola da gamba                                anyway just there's more to media                                computers hopefully hopefully so today                                I'd like to talk to you about three                                developers hypothetical developers tell                                a story they say you know that kind of                                thing so the first of all it was Alice                                and she releases a she developed                                software on her on her Mac a my awesome                                software and you can either download the                                source or for convenience you can                                download free compiled binaries so an                                exe a Deb package an RPM or whatever                                blah blah blah so this is free software                                and the these executables are being                                provided for just become just for                                convenience because it's just handy that                                you know if you're something on Windows                                to actually compile something of a pain                                but even on on free software everything                                systems you just sometimes just I just                                why I install it just get it away okay                                cool                                this is great and that goes swimmingly                                for a few years and then you know once                                one day she just gets a knock on the                                door and this chap turns up and says wow                                yeah so those that sauce just just leave                                that exactly how it is but before you                                make those exe s all those Deb's or                                those rpms can you just you know make a                                few changes to them before before they                                go live before you upload them don't                                don't don't push it to your github or                                whatever you're hosting on now but but                                you know making these changes the xes or                                you know something might happen yeah                                nice house you got here nice nice                                children you've got nice                                vicen life you've got you know but yeah                                 we'll just keep this very quiet                                 you know just yeah just between us no                                 not cool and so she's sort of forced                                 blackmailed into introducing changes                                 into the source before but generating                                 these binaries and as I say the herb                                 sauce on the github remains entirely the                                 same throughout and so ya know now now                                 the sauce and the xes don't correspond                                 in other words if you built that source                                 and run the program you'd be running a                                 different program that did something                                 different than if you were just                                 downloading the exe s and running them                                 which is not really that not that great                                 second developers Bob Bob is highly                                 computer literate as you can tell by the                                 rather elaborate keyboards mechanical                                 keyboards poori annoys all of his                                 colleagues with their click eNOS you                                 know the kind of thing and has wooden                                 headphones some reason in the bottom                                 left because cough hipster cough and                                 he's a sysadmin for a large operating                                 system and manages a whole bunch of                                 servers and things like that in there in                                 the cloud or as datacenters so they used                                 to call them unfortunately he's not                                 unaware that these datacenters were his                                 personal computer was sort of broken                                 into it was targeted and broken into and                                 so now all of the build servers that                                 make part of the of that data center are                                 compromised and the compilers have been                                 compromised in particular every time                                 they generate code if you even if you                                 put good code into it the binaries they                                 generate how are you                                 extras yeah like before like without                                 this you know these are extra let's not                                 call them backdoors that's just far too                                 strong but yeah they're basically                                 backdoors or or they're leaking privacy                                 or they're sending your your you know                                 secret keys or Bitcoin passphrases etc                                 to someone else basically                                 you haven't nothing you don't have                                 this is a problem because those data                                 centers are generating those say                                 precompiled binaries and they're being                                 sent to users and the users will then                                 install them so you know happed install                                 blah and he goes in installs all these                                 packages and so the user has no idea                                 that the the users own machine has not                                 been compromised                                 until they install one of these which                                 has been compromised by a compromising                                 blob which is then being able to                                 compromise the compilers and as I say                                 the the source code going into the into                                 the bill farm is still completely                                 legitimate if you looked at it you can                                 analyze it for for any malicious flaws                                 is nothing there but the end users you                                 or me are still being all running code                                 that isn't code that you don't want to                                 run our last developers cow so this is                                 actually not Carol because well that's                                 Eve and so carol is just sitting in her                                 hotel and Eve is one of these evil made                                 attacks that you hear about this who has                                 installed the backdoor on on on Carol's                                 laptop so every time now Carol                                 distributes software to her friends you                                 know like a good piece of our citizen                                 the this it's also been compromised or                                 revealing privacy or week it's etc who                                 knows who knows which is a bit of a                                 problem if she's a good free software                                 citizen because freedom freedom to being                                 the third freedom on the list failure to                                 reach                                                                neighbor now we all know what that kind                                 of means in the technical sense but are                                 you really helping your neighbor if                                 you're giving them a rootkit well I                                 probably wouldn't stretch that's a bit                                 of a wider definition than the FSF and                                 RMS were after but I don't think you're                                 really helping your neighbor if you're                                 infecting their computer with malware                                 why do they call me old-fashioned so                                 what what's the general problem here I'm                                 outlining with these two developers so                                 you can view the source code for                                 malicious software for floors you can                                 you know download the code for nginx to                                 look through it you can hire someone to                                 look through it for you                                 you can etc etc you can you know analyze                                 it you can throw it through static and                                 ours                                 you can do all these kind of extra                                 checks for all sorts of things that been                                 snuck into you or into the original                                 source code but most users are                                 installing precompiled binaries because                                 you just don't have time to compile you                                 know Gen                                                              right and it's still around but you know                                 yeah whatever yeah most people                                 installing pre compiled binaries on                                 servers on their laptops and stuff                                 particularly when you're doing the                                 initial install there's all binaries                                 because what are you gonna do in a                                 bootstrap ok whatever                                 and so basically are we trusting this                                 compilation process can we trust that                                 the binaries correspond to the original                                 source code it's a big question if                                 anything gets in between and interferes                                 of that process you can't trust those                                 binaries being run in the end big                                 problem big problem                                 and one that we've been sort of blind to                                 for years I mean we can as I say we've                                 doing a lot of work to find malicious                                 vulnerabilities                                 it isn't once deliberately added to the                                 source code and ones that were                                 inadvertently added you know just raw                                 bugs roebucks just normal bugs in the                                 source code but if we just can't trust                                 that our compilers are doing what they                                 want as well                                 or the build farms etcetera etcetera                                 then this is a problem and security is                                 only as strong as what weakest link                                 etcetera it is a big problem because in                                 the real world things get attached so                                 there was a little while ago now she has                                 a ten the kennel dog was hacked actually                                 if we BSD other things as well by going                                 through quite a few of these over or                                 even layer it so basically this this                                 actually happens and these are the ones                                 we know about because most of these                                 people on those screenshots were kind of                                 people who might disclose that has                                 happened maybe some companies would just                                 keep it very quiet so who knows this                                 this so basically this stuff happens in                                 the real world so what's the solution so                                 solution is well you first we will start                                 with the same source so we basically                                 agree but um this is the source code for                                 Apache great okay brilliant                                 then we assure that the build always                                 produces the same result and by at the                                 same with our having identical result I                                 mean a bit for bit identical results                                 every time I build piece of software or                                 you build Apache we get end up with the                                 exact same binary as in we run sha-                                  some we want md                                                         we do a bit for bit comparison between                                 the two end up binaries and we ensure                                 it's always the same in whatever                                 environment we build in whether I build                                 on my own laptop on your laptop in the                                 bill farm and things like that so we                                 always get the same result if we build                                 from the same source and then we                                 basically compare results so let me just                                 run through this of it so David he                                 builds say the Apache binary and just                                 for convenience will use char one Tom he                                 generates a binary with this particular                                 checks on there                                 then Aaron builds the Apache binary and                                 ends up with this checksum here okay                                 cool they match okay so we and we pretty                                 much we agree we start with the same                                 source so you know okay great then Fred                                 builds and Fred says or how long I've                                 I'm ending up with a different checksum                                 here but I've started with the same                                 source well from this we can determine                                 that there's something up with Fred to                                 toolchain or could compiler or library                                 that he's using or his machine or his                                 compiler something in there is in making                                 sure that he's ending up with a                                 different result and you know this could                                 be malicious his computer may be hacked                                 his the build farm that generated his                                 compiler could be hacked who knows this                                 doesn't tell you what the actual issue                                 is but it tells you then issue which is                                 much much better than where we are at                                 the moment where pretty much everyone's                                 getting a different hash and who knows                                 yeah whatever so the other thing here is                                 that either David and Aaron have sorry                                 either Fred's been hacked been                                 compromised                                 etc or both David and Aaron have been                                 hacked okay you don't know you know                                 which is the legend the the proper hash                                 you should be getting no one can                                 there's no answer to that but if you                                 have enough people in this web and they                                 all pretty much agree                                 that the hashes say that seven a for                                 eight to be whatever then you can start                                 to come to sort of consensus saying you                                 know what if you build Apache this                                 particular version of Apache you end up                                 with this hash and you should end up                                 with a hash if you don't look into                                 things and see what's going on so yeah                                 how would this help our developers so                                 the the black bear will be uncovered so                                 a bunch of people would download the                                 original untampered source code and                                 generate the exe and perhaps compare                                 that with the website the web web sites                                 version of that exe and say why is your                                 exe different Alice and she would be                                 sort of have to answer some                                 uncomfortable questions about why there                                 happens                                 Bob the compromise of the service would                                 be detected because a whole bunch of                                 people in that distribution would for                                 example rebuild a piece of software and                                 say hmm Bob I see that your build farm                                 generated the Apache binary with checks                                 from a but when I build it on my own                                 machine I get checks on B and if I build                                 it on my my spare laptop I also get                                 checks on B it doesn't match what's the                                 deal is it me is it you start an                                 investigation see what's going on Carol                                 her laptop will also detect it so if                                 anyone rebuilds the software that she's                                 giving out to friends it won't match the                                 the hash sums or the check sums just                                 won't match and so they'll be like well                                 you know what's going on                                 I think thinks Kara think there's                                 something up with your laptop you know                                 you might want to check that out so it                                 will flag up these issues and this                                 basically reduces the incentives to                                 attack in the first place I think one                                 I'm no expert blackmailer but I pretty                                 much I'm under the impression that you                                 probably don't want to blackmail someone                                 if you're going to be uncovered because                                 you know the whole idea that it's it's                                 private it's secret it's surreptitious                                 and so in this case there'll be no point                                 going off to Carol no point in                                 threatening her family or her house her                                 dog cat with you know something bad if                                 if through your blackmails is going to                                 be uncovered a few weeks later when                                 someone rebuilds on the website and says                                 Alice you've been compromised oh okay                                 yeah sorry and so when I said                                 reproducible builds and I has identical                                 results I don't necessarily mean                                 reproducible in the sense of it builds                                 with the same dependencies or that it's                                 a reliable build so people often use                                 this say in the JavaScript world where                                 oh by reproduced verbs mean that you get                                 you know every time you build it uses                                 the same versions of of whatever                                 dependency chain etcetera like that or                                 it doesn't use the internet to build I                                 mean literally identical build results                                 so like it literally is a sha-                                          the same md                                                           use the CMP tool that she does the VIPRE                                 by comparison it's yeah but wait isn't                                 software review decibel already I mean                                 isn't what I thought when someone told                                 me this introduced me to repeaters were                                 builds in a pub and I said yeah but                                 every time we build surely if you just                                 press up and enter again when you build                                 you just get the same result                                 because computers aren't magic this is                                 just how they work but no I went home                                 and built a piece of software and then                                 built it again and I got a different                                 result and this was this is really ugly                                 you know just yeah so yeah                                 why isn't software you be useful right                                 now there's lots of reasons one big                                 reason is that as part of build                                 processes has quite a lot of                                 non-deterministic activity so if your                                 build process iterates over any kind of                                 non-deterministic data structure and the                                 results of that end up in the final                                 binary your software won't be                                 reproducible for example a perl hash if                                 you iterate over the keys that's not                                 defined to be in any particular order by                                 default unless you have a sort intuitive                                 result for example and if your build                                 process is uses one of those data                                 structures and because of that it you                                 know put some things in different orders                                 or in different files in different place                                 which usually wouldn't matter presumably                                 otherwise in debug already but if that                                 happens as part of your build process                                 then your software will                                 have an identical bill resolve every                                 time you build it and therefore it won't                                 be reproducible and therefore you                                 weren't gonna do the comparison hashes                                 between Fred Aaron etc etc because you                                 won't can't have this guarantee that you                                 should always get the same result so                                 therefore you don't get the same result                                 you you can start to flag up so yeah                                 dictionary hash database watering you                                 know basically any non deterministic                                 ordering parallelism inbuilt so you know                                 multi CPUs been around for a while I                                 think my phone even has eight CPUs or                                 something bizarre and but basically if                                 your build process has parallelism such                                 that the results come in and in                                 different orders but just because you                                 know this CPU happened to finish first                                 this time or etc etc this thread is a                                 bit faster than this one this time if                                 that means that the binary ends up with                                 a different result at the end due to                                 that build parallelism so for example                                 whichever one wins it gets added to a                                 file first                                 just for example then your again your                                 build will not be reproducible                                 timestamps this is perhaps the biggest                                 bugbear software just loves as part of                                 the build process to add the timestamp I                                 was built on this day oh great but it                                 means that if you build on a different                                 day or a time or different time zone or                                 yeah if you will in the future if you                                 believe it in the past it will not end                                 up with the same result and therefore                                 they he'll end up with a different hash                                 and say you can't play this big the                                 checksum comparison comparison game                                 build parts another one quite nefarious                                 so it's part of let me give you one                                 example c-plus paths assertions when                                 they fail they include the say oh I this                                 assertion failed in this line of code on                                 this particular line etc in this                                 particular file great very useful to                                 debugging unfortunately it likes to                                 encode the actual build path so are I                                 built in my home directory so you know                                 stash home / Lambie and you built in you                                 know slash home slash christelle or                                 whatever and it would end up with a                                 different binary between us because mine                                 binary would say blam                                 in it somewhere and yours would say                                 we're still in it                                 it beats basically saying the same thing                                 but because we built on our own separate                                 machines and the binary ended up with                                 the with our particular user names in                                 them we won't be reproducible between                                 builds and so therefore we can't play                                 the our beloved even hash etc and so                                 weak again can't play the hash                                 comparison game non-deterministic foul                                 ordering by this I mean that a UNIX file                                 system is not actually defined to return                                 files in a sorted order when you do an                                 LS there's actually LS sorting them for                                 you so if you do the underlying read                                 system call it is not it's providing                                 them in any order it likes in X M in the                                 X to file systems that usually ends up                                 with the same ordering each time you do                                 it - and it                                                              added them to the directory but that's                                 not guaranteed other file systems can                                 will and sometimes are they completely                                 valid to return directory items in when                                 you ask for them in any order it likes                                 it's good to be implementation agnostic                                 but this meets that any build process                                 that does a naive reader call and for                                 example concatenates all these text                                 files into one and it relies on the                                 underlying file systems ordering of                                 these files it's going to be                                 non-deterministic and so if I built it                                 once and then you built it once we may                                 end up with different result dot we                                 can't play the hash comparison game so                                 you often just need up a bit of sorting                                 to ensure that it's always the same each                                 time and also to other stuff uses groups                                 you marketing viral so not only do we                                 have build processes saying I always                                 built this particular time you have them                                 saying I was built on the                                             great and my machine is called you know                                 keyboard Pat or whatever it is called                                 great that's not actually that very                                 useful and it means that if you build on                                 a machine that's not that you end up                                 with a different result                                 not good can't play the game brother any                                 other advantages for reproducible builds                                 turns out there are one great thing is                                 that if you do make a deliberate change                                 do so                                 code you should see a resultant change                                 in the output binaries but as your as                                 you've removed all these non determinism                                 all the other changes that might just                                 happen as part of rebuilding once                                 building twice as I say as you've                                 removed those as part of having a                                 generally reproducible build when you do                                 make changes the actual deliberate                                 changes that you've made should be the                                 only changes you see in that binary so                                 if you just changed one particular                                 conditional from a you know you're                                 replaceable an if conditional with an if                                 not conditional you should just see that                                 tiny change in the final code you know                                 and if you don't that means that                                 something else is screwed up which is                                 great so you just get minimal diffs                                 minimal binary diffs and meaning and                                 minimal meaningful dips as well on the                                 deliberate changes you're making to                                 source code                                 you also get about a cache hit ratio if                                 your your dependency chain is you know                                 you as part of a build you're building                                 all these also extra things before if                                 you didn't have a reproducible build                                 then because the time stamp has changed                                 it's gonna have to rebuild all this                                 other stuff which means you have to                                 rebuild all this other stuff and then                                 blah blah blah blah but if a build is                                 reproducible it should always be the                                 same you're gonna get a better cache hit                                 ratio on these pre requisites for your                                 current build which saves time money co                                  because you're not like burning through                                 the atmosphere just to build something                                 with a slightly different timestamp you                                 can also use this to remove build                                 dependencies again when you have minimal                                 diffs if you remove a build dependency                                 or you build it an environment without a                                 particular library and you end up with                                 the exact same result binary at the end                                 well it probably means that you aren't                                 needing that particular bill dependency                                 so you can remove it from your build                                 chain which may again save on build time                                 etc or installation and just having a                                 minimal said that bill dependencies is                                 always kind of just kind of nice and                                 clean you also can find bugs I mean to                                 run through some examples so as a                                 security bug I found there was a                                 particular piece of software that during                                 the build process it would generate a                                 configuration file a default                                 configuration problem                                 and it will do this by using the rand                                 function and being like okay grates in                                 the build store something called an open                                 ID consumer secret using a random let's                                 just assume that sly secure understand                                 words and this ended up on your file                                 system at user share pal fiber or a                                 problem related p.m. they're like that                                 Basu so anyone who installs this build                                 will end up with the same secret every                                 time you built it you got a different                                 secret because every time you bought it                                 the build up PL file was being wrong but                                 it means that anyone who shares that                                 particular binary of this the end up                                 resulting build will end up with the                                 same secret and I'm no security expert                                 but I reckon that's not very secure when                                 everyone has the same one and I know                                 what yours is yeah it's not that cool it                                 also finds other weak bugs aren't                                 security ones so here was a very old bug                                 in a man page generator what was                                 happening is that sometimes when you ran                                 it instead of saying for example this                                 manual page document usage of Wikipedia                                 FS it would say you said you with a PDF                                 s thing what you looked at the original                                 original text for this and it will just                                 say the usage or wicked PDF s and you're                                 like what where's this extra oh coming                                 from well someone got tracked it down                                 and it was at this mem copy call and                                 great and we look it up and it says mem                                 copy the M memory errors must not                                 overlap and they were overlapping so we                                 basically just changed to a mem move and                                 this fixed the bug and this was                                 discovered by me producible builds                                 because we would build once and we build                                 again and they were build again and we'd                                 see that this is variation every time we                                 built and so they hashes the checksums                                 weren't the same over time so therefore                                 we were like there's some weird bug                                 going on here and to manage to fix it it                                 was great and you'll still get some                                 weird things like here's a as part of                                 the build process of this random number                                 generator and intest generator fort                                 and in its own test suite it would do a                                 you means generate a string of that etc                                 etc etc and basically the the every so                                 often it would build and instead of                                 generating a a text string which                                 contained all three letters it would                                 sometimes generate one with just two of                                 those letters and you could calculate                                 that using maths                                 that that would happen nor point four                                 six percent of the time and so we                                 managed to fix this yeah you get some                                 weird things like that let me talk                                 briefly about Debian and reproducible                                 builds we have a we found those previous                                 box in what we call well ice I call all                                 sort of torture chests test environment                                 so this is where we build will have an a                                 build and a be built and we vary as much                                 as possible deliberately between these                                 two this is to flush out reproducible                                 issues that we kind of know about                                 concepts so on the a build we might                                 build with two in with a clock just set                                 to today and then on the B build will                                 set will have a system set up                                 deliberately with the clock                                              the future                                 so anything that encodes the build time                                 the build year etc it will always vary                                 between them and so if the build process                                 does encode those things it'll flag them                                 up when and also changes between these                                 environments includes changing the host                                 name domain name we have our own file                                 system that deliberately returns things                                 in a random order and so that Flags up                                 any build process that relies on the                                 underlying file system watering could                                 also change we also change the time zone                                 locale the you had geared all sort of on                                 the nonsense etc etc we did our first                                 rebuild of the inside Debian archive in                                                                                                          March                                                                    build of our packages are reproducible                                 it using our tour to test framework and                                 using some experimental chain changes                                 this shows the graph of our progress                                 over time                                 that's                                                                  is the reproducible packages by buying                                 number so higher is better and orange is                                 the number of reproducible packages you                                 can kind of ignore the red and the black                                 ones because they're you know packages                                 that fail to build so they aren't really                                 relevant here I guess two things you can                                 notice is that the total number of                                 packages in Debian is going up or                                 surprise we always add in more packages                                 you also see that some spikes and some                                 dips so for example here's where we                                 probably just screwed something up so                                 that can be ignored                                 here is where we introduced a new                                 variation into our torture test                                 environment particularly we introduced                                 build path variation where I in the the                                 a build we might build in you know such                                 temp a slash a and the B build we might                                 build in slash temp slash B and this                                 resulted in all packages that encoded                                 that build path into the final binary                                 would now go from being reproducible to                                 UM reproducible in yeah and then we see                                 a service ila fixing them and then                                 here's a patch to GCC that we added                                 etcetra etcetra etcetra etcetra made a                                 bunch of changes so you can kind of see                                 slow but steady progress to                                          still not there as you can see from the                                 variation there you can see our current                                 status that is Debbie and reproducible                                 yet calm which is kind of one of those                                 silly one-page websites like the how                                 many people are in space but it just                                 basically tells you how many what                                 percentage of packages are reproducible                                 in debian right now while stick you've                                 started perhaps as a Debian related                                 project it's now way beyond Debian                                 so it's now are completely a                                 distribution agnostic endeavor we also                                 don't necessarily care a concern                                 ourselves only with distributions so we                                 have a bunch of compilers a whole bunch                                 of package managers and things like that                                 bootstrap income                                 and all sorts of other things as well so                                 anyone who's interested in interested in                                 reproducible builds as a general concept                                 he's now he's not completely on board                                 we'll also have a whole bunch of other                                 people using our testing framework so                                 for example we're now building arch                                 linux packages coreboot open wrt who                                 else who else leads basically using our                                 torch s to flush out reproducible issues                                 in our in our to be flushed out                                 reproducible issues in their own code                                 etc we've also had two summits in one in                                 Athens one in Berlin where we guess you                                 basically get get together for three                                 days and without our laptops and work on                                 issues about reproducible bill to try                                 and work out what the next steps are you                                 know try and do some cross distribution                                 collaboration etc etc as part of this we                                 also as have created some tools that are                                 useful here we well if you want to                                 compare two binaries you can of or                                 compare any two files you can use the                                 normal UNIX diff tool so I'm not sure                                 that's visible here but that says this                                 is the first file and then this and then                                 it says this is the second file so if                                 you just run diff on follow on and file                                 two you get the differences between the                                 files this is great but if you want to                                 do that with a binaries that you're                                 producing from a compiler you don't                                 really end up with anything that's                                 readable so here are the result of                                 running diff on to dr. Deb files okay                                 yeah what are the differences well I'm                                 not really sure there's some sort of                                 yeah                                 yanari what's going on yeah so we should                                 build a better death that's what we                                 thought and so we did and we called it                                 differs cope and differ scope well the                                 diff escape will try and get to the                                 bottom of what make us files or                                 directories different it will                                 recursively unpack archives are many                                 kinds and transform various binary                                 formats into more human human readable                                 form to compare them so particularly                                 binary files and things like that                                 so if you then compared these to Deb's                                 again you'll unpack them and it'll say                                 oh yeah                                 so there's actual differences in the                                 files inside the Deb inside here there's                                 a--there's inside this Deb there's a                                 file called control doxology said and in                                 there also there's a file called data                                 and in there there's a data tough hard                                 or exit and in that excel file there's a                                 dated Akhtar and inside that in that tar                                 file there's a file called D a fixed apt                                 and inside that there's a difference and                                 it's just one byte change so if you                                 remember                                 oh that one bytes check what one byte of                                 meaningful change ended up with all this                                 garbage here please it's compressed so                                 you get sort of runaway changes things                                 like that and what differ scope has                                 managed to go the right way this time                                 what diff escape was managed to show is                                 that it's basically just just one byte                                 of meaningful change and from this you                                 can say well if it's DEA fixed that you                                 can in most cases just go right to the                                 source                                 search for de effects that worked out                                 why that is changing between there and                                 that turns a you know                                                   session into basically a twenty second                                 one where you're just like oh it's just                                 adding a version for no reason                                 cool oh that looks like a date so yeah                                 it's adding the current date to it let's                                 just ignore that okay great fix done                                 next it's cool you can also see that                                 differ scope is showing different bits                                 of metadata between the files so gzip                                 files you can in the headers they can                                 actually encode when it was actually the                                 original file was last modified in the                                 header                                 and if that varies between the files                                 then of course your building not be                                 reproducible etc etc and so differ scope                                 will helpfully say oh yeah in the                                 metadata for this file in this                                 particular CD overlooked GZ the last                                 modified header in the metadata of that                                 file not the file itself but the                                 metadata is different and it's and it's                                 in this particular bit here there so                                 again you can go from that all the way                                 back to the source and say ok brilliant                                 this is easy way of fixing it a                                 difficult HTML output so you when you                                 have these big nested trees that becomes                                 very useful because HTML is a bit nicer                                 than this sort of text output there and                                 this feature also demonstrates how it                                 has supports many many different file                                 formats so for example here is me                                 comparing to sequin like databases now                                 normally if you just ran a diff on a                                 sequel I'd database it's gonna come up                                 with although some binary nonsense that                                 won't be very useful but if you run                                 differ scope on it                                 it'll run a dump of a sequel dump on                                 this database and recreate the exact                                 sequel commands that we use to generate                                 it in the first place and then run the                                 diff on that so you can immediately tell                                 that in the first in test                                               was created by someone adding the value                                                                                                         file                                 testitude at sequel Lite someone added                                 the value                                                              from that you can always certainly go                                 back to original source and worked out                                 why someone's put one in there and                                      there basically great and you don't get                                 this big garbage of binary diff between                                 the two also supports quite a few other                                 for four months I won't read them                                 because that'll just be boring but some                                 weird stuff as well it's like if you                                 compare OpenSSH public keys or file                                 systems or TCP dump capture files you                                 know so forth                                 all sorts of bizarre file formats that                                 you might want to run you can also try                                 it immediately online there's a                                 web-based version where you can just                                 upload                                 too fast at a vaguely similar and road                                 if escaped on them and see what's going                                 on it's very useful just for you know                                 throwaway usages and you don't have to                                 install any of the file format supports                                 because on the some of these for example                                 if you wanted to compare mono files you                                 might need to install the mono build                                 environment which would suck if you                                 don't want install that so yeah you can                                 try to online tips coke yeah so while                                 using difference clip all the time for                                 showing the differences in for example                                 Security uploads oh sorry so for example                                 these are under the banner of it                                 deliberately changes to code so for                                 example if the security vulnerability                                 was that it said if blah instead of if                                 not blah and I just want to change that                                 I'll make that change and then run diffa                                 scope on the previous vulnerable binary                                 and run diffa scope on the hopefully                                 fixed binary and I should only see that                                 change between these two files which is                                 great because then I can rely on it not                                 changing any other other stuff at the                                 same time just highlight the difference                                 cope is not the definition reproducible                                 it's just a way of comparing binaries so                                 that's often a source of confusion that                                 oh if I run diffa scope does that mean                                 it's reproducible that's like well no                                 it's just a it's just a better DIF just                                 you know just save you time I also use                                 differ scope on binary blobs so a bunch                                 of unnamed router etc will just throw a                                 whole bunch of oh he's a new firmware                                 you should install on your new router                                 device well it's all free software ever                                 great I want to actually compare that                                 with the previous one throw that differ                                 scope and you'll say yeah the                                 differences are here here here here                                 quite interesting great so what's left                                 to do in the reproducible build space so                                 the source code it will still remains                                 vulnerable so if there are actual bugs                                 emissions bad backdoors etc that have                                 been introduced into the original source                                 code a reproducible builder won't help                                 you so if someone's managed to sneak in                                 to your upstream get                                 repository a backdoor or a bug or                                 anything a reproducible build won't help                                 you because you just basically                                 everyone's gonna end up with the same                                 vulnerable spit of source code or if he                                 sees weak algorithms if it the security                                 algorithm is just dodgy or you know uses                                 a deprecated hash function cetera et                                 cetera                                 then a reproducible won't magically                                 bless you with magical security pop                                 properties yeah and if your code has a                                 testing mode for example made famous by                                 some German vehicle manufacturer if if                                 it runs under testing mode where it has                                 different results if you ended up with                                 the same source code so if you start                                 with the same source code that's not                                 really gonna help you and reproducible                                 builds won't necessarily help you in                                 this case let me help you if Volkswagen                                 were providing binaries to someone and                                 then providing different binary to                                 someone else and also providing the                                 source code and you get to compare the                                 two by using reproducible builds the                                 other issues how to do how to explain                                 this concept to end-users so you could                                 go through this story etc etc but when                                 they go to install something if a piece                                 of software is not reproducible how                                 should that be exposed I mean do they                                 care should they care so for example                                 this is this is not in act right now but                                 there is code to do it these foreign                                 packages are not reproducible you                                 uninstall them anyway well this works in                                 a sense but I'm not sure that's very                                 meaningful for end-users and will they                                 just hit and end up hitting yes because                                 you know yeah kind of sucks or do they                                 hit no and not install the software it's                                 all of it like it's just not a great                                 interface so having this actually                                 meaningful to end-users is another step                                 that needs to be done so anyway yeah all                                 that changes to be done we still need to                                 do quite a bit of work on tool chains                                 there are we still need to get our patch                                 to GCC merged                                 golang currently has issues with build                                 path variation i think the same with the                                 our statistical database things like                                 that and this whole bunch of other tool                                 change as well that suffer a lot making                                 changes to tool changes obviously great                                 because if you fix a problem that's                                  being introduced to a lot of packages at                                  once if i fix in their tool chain fixing                                  that problem means that you immediately                                  make a whole swathe of packages and                                  software reproducible which is great in                                  debian there's a large number of                                  infrastructure changes that need to be                                  done to support reproducible builds and                                  support some of the metadata that goes                                  around them we also need to continue to                                  improve our metadata and developer tools                                  say for example differ scope and things                                  like that oh I'm being our own time yeah                                  okay thank you limit the end so yeah                                  great                                  so differs code could still use support                                  for more file formats and things like                                  that and it also had some policy changes                                  that could be made so we could for                                  example solve the the user interface                                  problem by just saying by definition all                                  Debian packages must be reproducible and                                  if they aren't then they aren't in the                                  archive so no user would see this                                  because it just wouldn't exist there                                  won't be such a thing as a                                  unreproducible package so therefore so                                  these are questions and things to be                                  still be done and also we can start to                                  use reproducible builds to attack some                                  age-old problems in computer science                                  like trusting trust which is kind of a                                  nice thing to read on Wikipedia all day                                  and to get very worried about about                                  compilers things like that it get                                  involved and visit our website booties                                  were built org and follow us on Twitter                                  join us on our IRC we starting to                                  strategy of restart our IRC meetings                                  we're pretty friendly folk so just                                  coming hangout good good stuff so yeah                                  danke Schon and if I've got any                                  questions maybe we'll thank you very                                  much for the presentation but we run or                                  we over                                  took our time slot so okay would                                  postpone the questions - maybe the lunch                                  time or some more personal conversations                                  during the conference in the sponsors                                  area for instance but thanks anyway for                                  the presentation and our next talk will                                  be about labyrinth                                  [Applause]
YouTube URL: https://www.youtube.com/watch?v=m0FudIwSuzM


