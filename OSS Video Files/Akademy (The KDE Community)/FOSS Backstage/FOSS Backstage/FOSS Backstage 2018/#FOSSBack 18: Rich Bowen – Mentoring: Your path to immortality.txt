Title: #FOSSBack 18: Rich Bowen â€“ Mentoring: Your path to immortality
Publication date: 2018-06-25
Playlist: FOSS Backstage 2018
Description: 
	Open source needs people to write the code today, but, even more important, is those that will write the code tomorrow. Investing in the people who will replace you is the only way to ensure immortality, both for yourself, and for the project you care so much about. In this session, you'll learn you practical ways to invest in people, and about why, sometimes, *not* fixing a bug is a better choice than fixing it.

Read more:
https://18.foss-backstage.de/session/mentoring-your-path-immortality

About Rich Bowen:
https://18.foss-backstage.de/member/rich-bowen

Website: https://www.foss-backstage.de/
Twitter: https://twitter.com/Fossbckstg
LinkedIn: https://www.linkedin.com/groups/8653059/
Captions: 
	                              thank you so much for coming I know                               there's a lot of great content of this                               event you could be listening to so I                               appreciate you coming to listen to me                               I've been doing open source for several                               years and I'm here because people took                               the opportunity to mentor me and teach                               me how to do things and I'm hoping to to                               share some of these practical tips with                                you there's been some content already in                                the event about various tools you can                                use and you know people that have done                                research on this these are my                                observations over the last                                              been largely making it up as I go along                                but I have been doing it for a while so                                hopefully some of this is not far off                                the mark something that I've observed                                over the years is that people have many                                different reasons for getting involved                                in open source software and often the                                first one of these is to solve problems                                to solve your own problems to work on                                something that's not working quite the                                way you anticipated another reason is                                that it's a lot of fun people do it                                because it's a hobby people do it                                because they want to make the world a                                better place                                one of the reasons that people stay in                                open-source is often the the possibility                                of leaving a legacy leaving something                                that people will remember and so my my                                premise here is that your way to achieve                                immortality and open-source is to mentor                                people to come behind you and this is a                                this is something that has that has                                proven out in my own experience so I                                want to start with this photograph here                                well it's not a photograph obviously                                this painting here does anyone know who                                this is                                alright this is a famous painting by                                Titian of Socrates and in this painting                                Socrates is sitting on his bed                                expounding great truths and in fact in                                the picture he's about to drink some                                poison and commit suicide Socrates is                                fascinating to                                me because he was the the original you                                know that the programmer who thinks that                                his code should speak for himself he he                                never wrote anything down he never                                documented in fact he believed that                                writing stuff down was antithetical to                                teaching philosophy and so he never                                wrote anything down we we know what he                                said because his his disciples wrote it                                down                                so in particular Aristotle wrote down                                most of what he said and that's that's                                how we even know that this guy existed                                and so the lesson here is that if you                                want to be immortal have disciples that                                write down everything you say and hang                                on your every word right and that's                                that's a great dream how about this guy                                anybody know who this guy is I see that                                most of you know that this is Vincent                                van Gogh and he achieved immortality not                                by having disciples or even by being a                                nice person I've been reading a book                                called dear Theo which is a collection                                of his letters to his brother Theo and                                every single letter sounds like I'm a                                genius nobody understands that I'm a                                genius                                please send me more money and every                                letter is like that he's apparently a                                very unpleasant man and also throughout                                his life he felt that he wasn't terribly                                successful because he didn't get the                                recognition he deserved but this this                                feeling of not being successful he                                channeled into hard work and he created                                an enormous body of of work and so now                                you can go into most major museums in                                the world and you'll find at least one                                picture that he painted because he was                                so prolific he did in fact have one                                friend that he kind of mentored and that                                was Paul Gauguin who's my favorite                                painter but primarily we remember him                                because he painted so much so that's                                lesson two if you want to be remembered                                do a lot of work and                                come back to that in a minute how about                                this guy anybody know who aqaq or T's is                                unless you are a PhD student in                                 philosophy you've probably never heard                                 of this guy he was one of Aristotle's                                 friends possibly maybe maybe he was a                                 just a co student it's it's really                                 unclear who he was he's mentioned once                                 in the writings of Aristotle and he's                                 mentioned as though he was an important                                 character but we don't know anything                                 about him because he didn't write                                 anything down and didn't have any                                 disciples to write anything down                                 so now you've heard his name which puts                                 you above you know most of the rest of                                 the world so here's what we learned if                                 you want to be immortal you can either                                 leave an extensive body of work or you                                 can leave students who are even more                                 intelligent than yourself and both of                                 these are are challenging things to do                                 let's start with option number one leave                                 an extensive body of work one thing that                                 you find ok so this is another painting                                 by Titian and it it is a picture of a                                 guy by the name of Sisyphus and Sisyphus                                 was punished by the gods his punishment                                 was to carry a rock up to up a hill and                                 every single time he got to the top of                                 the hill he would accidentally drop the                                 rock and would roll to the bottom of the                                 hill now if you read a lot of Greek                                 mythology you'll notice that the                                 punishment always fits the crime always                                 in kind of an ironic cruel way                                 Sisyphus his crime was being extremely                                 self-important he was very fond of                                 himself he he did all of this                                 magnificent stuff and was always telling                                 somebody about it but the funny thing                                 about doing hard work is that as soon as                                 you stop people start to forget you you                                 know you can you can contribute to a to                                 an open-source project for years and                                 years but as soon as you stop eventually                                 your patches are overwritten by other                                 patches and your effect goes away and so                                 hard work is just                                 it's just too much hard work so I                                 recommend option number two which is to                                 leave impressive students to mentor                                 people to come behind you                                 doing hard work means you actually have                                 to do that hard work so Plato Aristotle                                 Socrates I see we don't have any                                 Princess Bride fans here all right                                 Plato Aristotle Socrates because                                 Socrates invested his life in his                                 disciples his student his student Plato                                 wrote down a lot of this I got the names                                 wrong a little while back and none of                                 the philosophy students in the audience                                 called me out on it Plato was was                                 Socrates his disciple and one of Plato's                                 disciples was Aristotle in between the                                 three of these people they form the                                 basis for what we consider modern                                 philosophy and each one down the line                                 learned from from their their instructor                                 and we see the chain of mentoring now                                 I'll give you one word of caution and                                 that is be careful who you mentor                                 because one of Aristotle's mentors was                                 Alexander the Great who killed much of                                 the world at the time you know he swept                                 across the world and destroyed nations                                 and so you know be careful who you                                 mentor they might destroy the world but                                 here's some some practical tips about                                 mentoring that that that I think that                                 you can apply immediately these don't                                 these don't take years of practice these                                 are things that you can apply                                 immediately the first and I think the                                 most important thing that you can do as                                 a mentor is to give permission now we                                 have this notion that because it's open                                 source everybody has permission and they                                 know it and that is not the case you                                 need to explicitly give permission for                                 people to                                 feel that they have permission and this                                 this may seem unintuitive if you've just                                 been doing this for years but it is a                                 common theme among beginners that they                                 don't feel like they're it's not I'm not                                 one of the core developers I can't do                                 that I don't really feel like I have the                                 rights to do that now there's two                                 different ways that you can give                                 permission the first one is simply                                 giving technical permission giving                                 people right access to the repository                                 giving people right access to the wiki                                 to the documentation to the the Google                                 Doc where you're developing your                                 marketing presentation giving people the                                 technical permission to do the work is                                 the first step here and you need to make                                 that as easy as possible if people have                                 to jump through a lot of Hoops in order                                 to contribute a change they're gonna go                                 away now I'm I'm one of the                                 administrators on the Apache Software                                 Foundation Facebook page and we got a                                 message from some user some Cassandra                                 user a couple days ago that said hey you                                 have a typo on the front page of your                                 website and one of the other                                 administrators responded with well in                                 order to fix a problem on the front page                                 of the cassandra site you need to                                 subscribe to this mailing list and then                                 you need to send them a patch and and                                 they'll apply to that patch so here's                                 how you subscribe to the mailing list                                 and here's how you post to it and the                                 guy was like that's way too much trouble                                 just just fix your typo can you do that                                 it'll take you five seconds it'll take                                 me all day and so that was a clear                                 example of putting roadblocks in in                                 someone's way rather than saying you                                 know thanks for the contribution and if                                 you want to get more involved here's                                 these other things that you can do I am                                 frequently heard to say that you should                                 give out commits rights like candy our                                 open source projects are in revision                                 control all of them if they're not                                 you're doing something wrong but you                                 already know that you know                                              not everybody used revision control now                                 everyone does and the purpose of                                 revision can                                 is largely if somebody makes this                                 mistake it's easy to fix                                 so there is no risk in giving somebody                                 commit rights the the risk the risk of                                 giving somebody commit rights too early                                 is that they'll make a mistake right the                                 risk of giving them commit light rights                                 too late is that they'll go away and                                 never come back which it to me is                                 clearly the larger the larger risk and                                 so I always encourage projects to give                                 away commit rights as though there was                                 no cost because there's no cost if                                 somebody's passionate give them commit                                 rights and let them play along you know                                 make sure you have a rollback plan but                                 you do because you're using revision                                 control now often when I say this I get                                 a couple of objections people saying we                                 can't give out commit rights because and                                 these may be legitimate concerns but I                                 think that they are all fixable so the                                 first one is they're not trusted yet and                                 I have encountered in my years of open                                 source people I can count on one hand                                 who legitimate gave me legitimate                                 reasons for not trusting their                                 contributions to a project people that                                 were actively malicious people that were                                 committing out of ill will and it's                                 incredibly uncommon for somebody to come                                 to contribute to your project and be                                 fundamentally untrustworthy on the other                                 side of this the best way to make                                 someone trustworthy is to trust them if                                 you give trust to somebody they will                                 generally speaking reciprocate                                 withholding trust being suspicious                                 communicating that you're suspicious is                                 a great way to tell somebody that                                 they're not welcome and to make them                                 feel like they're they're not ever going                                 to be a full member of your of your                                 little Club                                 the other risk you know I already                                 mentioned is that they might break                                 something and that's why we have                                 revision control that's why we have CI                                 that's why we have a review a code                                 review process if your project lacks any                                 of those things that I just mentioned                                 then fix that rather than trying to                                 chase people away now there there are                                 legitimate cases where you don't want to                                 hand out commit rights if you're running                                 the infrastructure that supports your                                 organization you don't want to give                                 route to everybody that that comes up                                 and offers to help there are things that                                 are in fact very expensive to break if                                 somebody screws up your backups or takes                                 down your mail server or does anything                                 to any of your production services then                                 perhaps you need a development and test                                 server to run this stuff on and that is                                 a situation where it's legitimately good                                 thing to to hold back on what rights you                                 give but if it's code you know maybe                                 give them a branch or actually have a CI                                 process within the Apache Software                                 Foundation we have these terms review                                 then commit or commit then review in                                 modern software development review then                                 commit is becoming more and more common                                 where your your patches have to go                                 through a review and CI process before                                 they'll ever hit the source tree for the                                 last five years I've been working on the                                 OpenStack project and every time you                                 submit a patch to OpenStack it spins up                                 thousands of virtual machines to test                                 this thing and it runs it through all                                 their I mean even when you're changing                                 the documentation it goes through the                                 entire test suite and and that that's a                                 way when you have code that is truly                                 sensitive and complex that's a way that                                 things can be thoroughly tested before                                 they're ever committed the the                                 commitment review model makes sense for                                 things that aren't quite as sensitive                                 perhaps you don't really need a full                                 review cycle on documentation changes                                 perhaps you don't need a full review                                 cycle when you're updating the the test                                 infrastructure but it's it's a good                                 thing to have it's a good thing to have                                 these sort of commit hooks that that put                                 everything through the through their                                 paces before it gets committed it's a                                 little bit of a sidetrack from my main                                 topic getting back to it social                                 permission is often a lot harder to give                                 than technical permission because you                                 know we've been working on this code and                                 these are the newcomers and they don't                                 know anything and they don't have our                                 experience and they're that we tend to                                 hold on very tightly to the things that                                 we hold dear but giving this permission                                 is a critical step in in welcoming new                                 members this social permission that says                                 you are allowed to do this so one of the                                 first ways that you can do this is give                                 people time when you see a bug don't fix                                 it right away if it's not critical if it                                 is not breaking the world give somebody                                 else a chance to fix this go out of your                                 way to document this problem maybe even                                 a suggestion of how to fix it                                 this is gonna take more time than just                                 fixing it a lot of the time and that's                                 why a lot of people don't do this but                                 remember that you are investing in the                                 future of your project and so it is                                 worthwhile taking that time to encourage                                 someone else to fix that problem because                                 the next time around they're gonna fix                                 it and you won't have to and you'll have                                 saved that much time so think long term                                 rather than short term and give people                                 the time to fix a problem even though                                 you already know the right way to do it                                 give them a chance to try and fail give                                 them gentle encouragement towards a good                                 solution now when tasks get done really                                 quickly it can be very discouraging to                                 beginners and I found over the last                                    years or so                                 that this is amplified by increased                                 corporate involvement in open-source and                                 I've noticed this even more at Red Hat                                 where you have where you have projects                                 that have a an overwhelming number of                                 the contributors are from Red Hat and                                 they're working forty hours a week on it                                 and then you have the folks that are                                 working on their weekend so Sunday                                 afternoon they look at the code they                                 identify a problem they work on it for                                 an hour and then you know they go to                                 their real job on Monday Friday evening                                 they come back that problem has already                                 been fixed by someone else in a                                 different way and committed and all of                                 their work was wasted and they have                                 wasted their weekend and their wife's                                 mad at them and their kids are irritated                                 that they didn't take them to the park                                 and the next weekend I'm not going to                                 spend my time doing that and so you have                                 the the big corporate monster chasing                                 crushing the hobbyist and this is not an                                 easy problem to solve if you have a                                 solution to this I want to hear about it                                 because it's a problem that I face every                                 day in my day job where the hobbyist                                 contributor is actively discouraged not                                 because people are being unkind people                                 are doing a good job they're doing the                                 job that they're paid to do                                 but that contributor is made to feel                                 useless so this is a hard problem the                                 next thing that I would ask you to do is                                 explicitly ask people to do things and                                 and this goes with code it also goes                                 with you know I run a number of small                                 events and I'll throw a call for papers                                 out on the mailing list and nothing                                 happens but if you approach an                                 individual and say I've been watching                                 the work that you're doing in this                                 project I would like a talk from you on                                 this topic you'll have an abstract                                 within a half an hour asking people is                                 much asking people personally                                 individually to do specific things it                                 does a number of different things one is                                 it                                 lets them know that they're allowed so                                 this goes back to the giving permission                                                                                                     directly to submit a talk for a                                 conference their first response is I                                 really don't have anything to say and I                                 feel stupid up on stage and do you know                                 if you if you walk them through this and                                 show them that in fact what they're                                 doing is really cool and everybody wants                                 to know about it                                 that gives them permission and you know                                 we think I said it on the mailing list                                 of course they know that they have                                 permission but that's not always the                                 case                                 the second thing that it does is a                                 slightly nuanced difference it lets them                                 know that you believe that they can do                                 it I am standing here today on this                                 stage because someone told me that I                                 could give a conference presentation and                                 my response was I have nothing to say                                 and I would feel stupid up on stage and                                 he said you've been doing these things                                 and I want you to come to my event and                                 talk about them that was                                              and I speak at a dozen conferences every                                 year and and it's because of that one                                 moment and it it told me that ken                                 believed that I could do it even though                                 you know he probably didn't and he was                                 just being nice but I did it right                                 another nuance on that is it lets them                                 know that they are trusted it lets them                                 know that the community trusts them it                                 lets them know that what they're going                                 to produce is going to be accepted and                                 trusted as good enough telling somebody                                 that they're trusted makes them trust                                 themselves more now here's another                                 nuance on the same concept this is kind                                 of playing the guilt card a little bit                                 it lets them know that the community is                                 counting on them and if they don't step                                 up something's going to break now                                 different ones of these work better with                                 different people but this this tells                                 them that you know maybe they need to                                 step out of what they've been doing and                                 action                                 doing something that they're not                                 terribly comfortable with because the                                 community is counting on them and it's                                 not going to get done otherwise and then                                 the last thing in this particular train                                 of thought is that it shows them what                                 they should do the next time and this                                 this is really rewarding for me as a                                 mentor where I will say to somebody I                                 need you to step up and do this thing                                 and then a year later I see them doing                                 that same thing to another junior                                 developer saying you should step up and                                 do this thing and knowing myself that                                 that person could do a better job                                 they're handing it off to their junior                                 in order to to model what we've done and                                 so it's it's extremely rewarding to                                 watch this now this is Ken I mentioned                                 Ken earlier Ken core is one of my oldest                                 friends in                                                          submit a conference paper to this new                                 event that we're doing called Apache con                                 and I did that and Apache con has become                                 in in many ways my life work I've been                                 I've been producing Apache con for                                    years now because Ken asked me to submit                                 this paper that I knew that I had                                 nothing to speak about this is my wall                                 in my office these are conferences that                                 I've spoken at and and I'm not saying                                 this to say look at me I'm wonderful and                                 I'm saying this to say can invested his                                 time in me so that I can can be here                                 investing my time in other people here's                                 here's another individual he's actually                                 sitting in the back of the room here in                                                                                                  documentation of an open source project                                 called the Apache web server and he said                                 well then go fix it and I thought huh I                                 never thought of that                                 maybe maybe I'll go do that over the                                 course of the next                                                       dozen other people completely rewrote                                 all of the documentation and we're darn                                 proud of it we think that it is amazing                                 documentation                                 I wrote these books and I owe this to a                                 moment where Jim said go fix it yourself                                 here's the here's the commit bit just                                 just go do it this is Sally ku dari she                                 is the marketing director of the Apache                                 Software Foundation a little over ten                                 years ago she said you should run for                                 the Board of Directors of the Apache                                 Software Foundation and I said there is                                 no way I'm going to do that that's so                                 far out of what I'm comfortable doing                                 I'm now serving on my fifth term I think                                 on the board it took me a few years to                                 get around to it but I did eventually                                 run for the board and and was was                                 elected now once again I'm not trying to                                 say these things to say look at me look                                 how wonderful I am what I'm saying is                                 that you have the opportunity to unlock                                 potential in people who think they don't                                 have any and you have the opportunity to                                 to change someone's life by encouraging                                 them to do things mentoring is really                                 truly a path to immortality you are you                                 are creating the future by encouraging                                 somebody to do something that that they                                 didn't think they could do my wife is                                 she's a silversmith among other things                                 she is a a very talented artist and this                                 is a poster that's on her wall Pablo                                 Picasso said I'm always doing the things                                 I can't do in order to be able to do                                 them and so you know my wife has taken                                 this to heart and whenever she feels                                 that she's pretty good at a particular                                 medium in art she abandons it and starts                                 something else and so she has all of                                 these different all of these different                                 arts that she has that she's mastered by                                 just going and doing them so she made                                 all the the rings that I'm wearing by                                 the way if you want to if you want to                                 buy them I can give you her busy                                 card but all that to say encouraging                                 people into things that they're not                                 comfortable with will very much change                                 their lives there's there's a video                                 linked down here I'll give you the link                                 to my slides later Casey Neistat                                 is a YouTube movie maker and he has this                                 wonderful short film called do what you                                 can't                                 about doing the things that people tell                                 you you can't do people say there's                                 there's no way you're gonna succeed at                                 that and that is the thing that you                                 should grasp and and try to do so                                 alright back to asking people how to do                                 things there's a couple a couple ways                                 that you should ask one is to be very                                 specific don't tell people come help me                                 on my project because they will be                                 overwhelmed and they'll come look at                                 your project and they will don't know                                 they won't know where to start tell                                 people I want you to work on this task                                 be as specific as possible in in one                                 regard this is what this is what you're                                 ticketing system is about but if you                                 have a thousand open tickets in your                                 ticket system it's extremely                                 overwhelming giving people a I'll come                                 back to the thing later about specifying                                 what are good starter tickets but that's                                 that's one thing you can do another                                 thing that you can do is encourage                                 people to answer questions this is this                                 is my primary way of mentoring over the                                 last                                                                     that are that are clearly asking good                                 questions and maybe answering some of                                 them and when someone asks a frequently                                 asked question I don't answer it I say                                 why don't you ask this person who has                                 demonstrated some some knowledge and                                 they'll answer that and then gradually                                 they they build their confidence I've                                 heard this referred to as micro                                 mentoring it takes                                                      it has a lasting impact on somebody's                                 sense of their own ability                                 geez another way to ask is to set                                 specific expectations you need to not                                 just let people stomp all over your code                                 you have code standards you have style                                 standards you want to make sure that                                 those are met tell people when you are                                 asking them to do something tell them                                 this is due on Tuesday and you need to                                 meet our style guidelines now this has a                                 number of side effects it's not just                                 it's not just making it harder for them                                 in fact it's making them making it                                 easier for them it shows them exactly                                 what standard they have to rise to it                                 lets them know when they're done and                                 also if you say it's due on Tuesday then                                 you should check in with them on Sunday                                 and say how's it going because if                                 they're not making any progress maybe                                 you need to give them more time or give                                 the task to somebody else another thing                                 that you need to do when you ask is to                                 offer to help make sure you explicitly                                 say I can help you in these ways don't                                 do it for them don't help them so much                                 that they're not doing it themselves but                                 make it clear that they have a safety                                 net make it clear that if they can't get                                 it done by Tuesday the world's not going                                 to fall apart but that that's your                                 expectation never ever be condescending                                 assume competence and and and only offer                                 help when it's needed don't jump in and                                 help somebody just because they're                                 they're not doing it to your standards                                 or as fast as you would have thought                                 because that communicates a lack of                                 trust and then when they're done make                                 sure you give them credit                                 don't take the credit for yourself even                                 if you did                                                               credit and praise them publicly and that                                 goes a long way towards making people                                 feel ownership of the code several of                                 the projects that I've been involved                                 with over the last few years                                 list every single contributor to a new                                 release OpenStack listed                                      contributors to the latest release                                 I named on their in the release notes                                 and my name's on their and I feel really                                 good about that the world doesn't have                                 to know that I changed two lines of                                 documentation but my name is in the                                 release notes and that's really cool                                 WordPress does this too I it's it's a                                 habit I think we should all get into and                                 once again even if you helped make sure                                 that they get the credit for their                                 change even if you commit their patch                                 for them make sure that you put their                                 name in the commit message now when                                 you're asking it's a good idea to have a                                 list of things to ask them to do and you                                 do this by identifying good starter                                 tasks tasks that are good for a beginner                                 often people will tag these in their                                 ticket systems as easy fix or good first                                 bug or beginner so that somebody can                                 look at your ticket system and                                 immediately pick out something that                                 won't take them three weeks that they                                 have a chance of doing and will help                                 them learn more about the codebase                                 here's an example of this from the from                                 the WordPress ticket tracker and what I                                 want you to notice on this is how much                                 work this person went into to document a                                 problem that could literally they could                                 have fixed in a minute and a half they                                 took a screenshot                                 they put a call-out arrow on it and they                                 described the problem in detail and that                                 is so that a beginner can come and fix                                 this and learn more about the plug-in                                 system and go away with a feeling of                                 accomplishment even though this                                 individual knows the code inside and out                                 could have fixed it in no time                                 this is the easy fix cue in in OpenStack                                 and it's a list of bugs that that art                                 exhaustively documented step-by-step how                                 to reproduce the problem and how to fix                                 it and you know Chandan is another guy                                 that that knows the code inside and out                                 he could have done this in less time                                 than it took him to write this up but                                 because he wrote this                                 we have two new contributors on the                                 project so this is this is a big win                                 here's a couple websites again I'll give                                 you my slide URL at the end these are                                 some websites that are that I've used in                                 the examples now you may think that                                 contributing to your project is is                                 intuitive it's not nobody knows how to                                 do it every project is different has                                 unique quirks and irritations and you                                 need to document that process and then                                 watch somebody go through your                                 documentation and every time they pull                                 their hair out make sure that you                                 clarify that point that was irritating I                                 I did a podcast interview yesterday with                                 some people from the open source                                 diversity org project and the front and                                 center on their website is this article                                 called your first pull request and it                                 walks you through step by step your                                 first pull request because you know if                                 you've been doing it for a few years it                                 seems obvious but it's not I'm close to                                 running out of time I want to talk about                                 one more thing and which is who you                                 should mentor once again if you mentor                                 Alexander the Great and he destroys the                                 world that's on you so be careful one                                 category of people that I recommend                                 mentoring is the ones who ask good                                 questions the the irritating questions                                 that make you actually go back and think                                 why on earth did we do it that way these                                 are the people that are going to take                                 your product in to your project in the                                 next step because they're asking these                                 deep questions that you've stopped                                 thinking about and documentation is is a                                 great way a great place for those people                                 say why did you describe it that way and                                 your answer is not because that's how it                                 works your answer is help me understand                                 how you would have understood that                                 better the people that are they're                                 especially irritating and always argue                                 about things tell you that the way                                 you've done it is really stupid these                                 are good people to mentor as well push                                 down your irritation push down your your                                 sense of wounded pride and and mentor                                 those people                                 also recognize that your mailing list is                                 not the only place where conversations                                 happen and watching conversations other                                 places is a great way to identify people                                 that you should be mentoring and bring                                 into the community we have two people on                                 the Apache web server documentation IRC                                 channel that that we brought over from                                 Stack Overflow because they were                                 answering questions brilliantly there                                 and we're trying to bring them into the                                 documentation project people that                                 contribute a lot to peripheral things                                 plugins modules etc are often good                                 people to mentor because they understand                                 an aspect of your product that that you                                 may not everyone else you know we have                                 limited time we have very limited time                                 who we can choose to mentor but there                                 are some people that I would encourage                                 you to avoid I hate the word mentees it                                 always makes me think of of the aquatic                                 mammal manatee but some people are                                 looking for something to put on their                                 resume and that's the only reason that                                 they're participating and these people                                 are often hard to identify but once you                                 identify them you may not want to invest                                 your life in them some people are trying                                 to achieve the fame and adulation that I                                 have standing up here on stage you know                                 everybody loves me right so they want                                 they want to skip that process and jump                                 to the end and and it's hard work and                                 you you might not want to invest your                                 life in those people another thing that                                 we find a lot on on support channels is                                 people that are asking you to do their                                 homework and these are often easy to to                                 spot because they ask their question in                                 a way that clearly comes from a take                                 home exam and this is probably not                                 somebody that you want to invest a great                                 deal of time into so to conclude the the                                 best way to amplify yourself is by                                 mentoring other people to follow after                                 you and so you you want to clone your                                 effort                                 now I've chosen this picture here                                 intentionally and ironically because as                                 you can obviously tell it's a bunch of                                 white men and I I want to especially                                 encourage us those of us in the audience                                 who are white men not to simply clone                                 ourselves identify people that think                                 differently from yourself and invest                                 your life in them because they will in                                 turn make you a better person if if you                                 just go looking for people that are just                                 like you then your community will always                                 be just like you and you won't ever have                                 any new ideas so I used the term cloning                                 here extremely ironically do not clone                                 yourself expand your pool of ideas or                                 you'll just be a stagnant pond mentoring                                 is a way to influence the future it's a                                 way to extend your impact years beyond                                 your life and you know none of us are                                 getting any younger                                 so thank you so much for your time I                                 hope I've left enough time for questions                                 if there are any these are ways to get                                 in touch with me all of my slides are at                                 box of clue com                                 thank you yeah please thank for rich                                 [Music]                                 we don't really have much time for                                 questions unless like very quick one                                 otherwise after the coffee break we'll                                 have extra time so is there a quick                                 question thank you rich just have a                                 question about you asked about what were                                 some of the ways that you could have a                                 better balance and contributing time                                 between work and home and and your                                 personal time and and one of the things                                 I just wanted to share with you is that                                 as an engineering manager one of the                                 things I have tried to do is in order to                                 encourage everybody on the team every                                 engineer on the team to contribute to                                 actually factor in                                                       to be able to work on you know their                                 projects or areas that they're                                 contributing to an open source and that                                 seems to work quite well so it's about                                 one one day a week and I know that                                 sounds you know like a lot of time but                                 it is actually very rewarding because                                 that circles back around into everybody                                 being too able to contribute to other                                 aspects of their feature or development                                 - that's a good point to it so hopefully                                 that you know adds back to you so if                                 you're if you're a manager and you have                                 that opportunity yes do that anyway that                                 was just I just wanted to add that Thank                                 You Ella we go thank you very much thank                                 you all again                                 you                                 [Music]
YouTube URL: https://www.youtube.com/watch?v=FtKE5M2LBWQ


