Title: #bbuzz: Lars Albertson & Christopher Bergh – The lean principles of DataOps
Publication date: 2020-06-23
Playlist: Berlin Buzzwords | MICES | Haystack – Joint Virtual Event 2020
Description: 
	More: https://berlinbuzzwords.de/session/lean-principles-dataops

Modern data processing environments resemble factory lines, transforming raw data to valuable data products. The lean principles that have successfully transformed manufacturing are equally applicable to data processing, and are well aligned with the new trend known as DataOps. In this presentation, we will explain how applying lean and DataOps principles can be implemented as technical data processing solutions and processes in order to eliminate waste and improve data innovation speed. We will go through how to eliminate the following types of waste in data processing systems:

* Cognitive waste - unclear source of truth, dependency sprawl, duplication, ambiguity.
* Operational waste - overhead for deployment, upgrades, and incident recovery.
* Delivery waste - friction and delay in development, testing, and deployment.
* Product waste - misalignment to business value, detach from use cases, push driven development, vanity quality assurance.

We will primarily focus on technical solutions, but some of the waste mentioned requires organisational refactoring to eliminate.
Captions: 
	                              hello everybody                               i have the pleasure to announce to you                               this                               the speaker of the first session of the                               streaming tracks the speakers are                               lars albertson and christopher burke and                               the talk will be about the lean                               principles of data ops which                               will cover the topic of how                                manufacturing transformations can be                                applied                                to data operations                                and then i would like to hand over to                                lars albertson who is                                the founder of skling they are providing                                a data                                value extraction as a service and                                christopher bork                                who will give the second part of the                                presentation                                thank you very much looking forward to                                it thank you                                and hi everyone i'm sorry not to be able                                to be there                                in berlin and person it's a wonderful                                conference and i                                definitely miss the atmosphere                                um i i'm running a                                small startup called skling and we                                provide                                data processing as a service essentially                                we                                build and run data pipelines and uh                                and host data for customers as well and                                what we essentially sell is operational                                efficiency and that is                                that is a deep passion of mine and                                that's why i'm                                here trying to share my knowledge in in                                the area                                and unless i'm mistaken our                                business model of spling overlaps to                                some degree with the data kitchen                                which uh chris is running uh but here                                they are running it they have a much                                more mature and established                                startup based in boston i'm based in                                stockholm                                is that a fair description chris sure                                that sounds good yeah and i think we                                both identify that um                                there's a lot of pain and problems in                                data and analytics and that there                                is some things that you would think are                                not technological but                                uh that really apply in these principles                                from from lean or agile or devops or                                manufacturing                                really can make an impact on your                                day-to-day life and i think that's what                                uh                                what lars is going to start to talk to                                you about and i'll bring it home                                and as you notice we're trying to do                                this more as a dynamic discussion rather                                than                                me speaking into scream for                                           uh so we'll do a bit of back and forth                                and this is the first time i try this                                uh mode of presenting at a conference so                                we'll see how it works                                uh i started in my computing career at                                ibm here in                                in stockholm uh and uh this was mid                                     i was                                like a teenager i was running windows at                                home and                                when when you work with windows                                computers at the time you had this pile                                of floppy disks and you installed them                                install the software and you you sort of                                cuddle it that's your pet                                if something went wrong you had to go                                there and fix it and so forth                                at ibm i got to work with os                                      which i probably none of you remember by                                now                                there was a significant difference                                however in the way that we installed                                and managed the machines and the                                applications installed of them                                because when we installed the new                                machine like for for a customer                                and we went to the machine and we booted                                it from a flop it is                                now this is machine number                                            everything was pre-configured in a                                in an installation server and those two                                machine were like                                 go to that server fetch all of the                                 the uh applications that were to be                                 installed                                 and reboot like eight times in the                                 process and after half an hour it was                                 completely installed uh some of my one                                 of my colleagues he at                                 point forgot about this new mode of                                 operation worked on his machine                                 and then you know the next morning                                 somebody had reinstalled it                                 so this is a this was i only thought of                                 it as automation at the time                                 this actually was a significant                                 difference we had gone from working with                                 a                                 craft you know working with the thing                                 that was in front of us                                 to work over the process the process of                                 installing machines                                 and if you look at uh the rest of the                                 itu world this is a trend                                 that we see we we move from traditional                                 infrastructure                                 to infrastructure this progress code                                 from traditional ops to devops and from                                 from doing quality assurance on a piece                                 of uh sort of a new release that we're                                 going to bless                                 because it is good enough to                                 continuously doing this and working with                                 improving the quality process with ci cd                                 and likewise with the app we're                                 installing applications versus building                                 containers                                 uh from scratch all the time                                 and data ops and data factories                                 essentially is essentially taking this                                 principle of                                 going from a craft to a process                                 uh but with data we're we're so used                                 this way back to our                                 our database center centric systems                                 which essentially                                 is the database is a pet that we cuddle                                 and                                 we write careful code and so as not to                                 destroy the structures                                 whereas the big data revolution                                 essentially brought a new way of                                 thinking where we                                 store the raw data and then we have                                 pipelines refining that data                                 and we no longer work with the data                                 itself directly we work through the                                 process of creating valuable artifacts                                 in our pipelines                                 and the book that has                                 inspired me most in my career is                                 is the toyota way which                                 sort of explained the principles of lean                                 to me                                 there are lots of relevant principles                                 that we that                                 are applicable for for data                                 engineering and working with data but                                 i've highlighted a few of them                                 the process i mentioned but also                                 eliminating waste                                 getting rid of things that shouldn't be                                 there to make a focus on the right                                 things                                 yeah and lars i came at this a bit of a                                 different way growing up in the                                                                                                        of america and seeing                                 um the japanese beat in milwaukee the                                 small                                 engine manufacturers and the auto                                 manufacturers and they made better cars                                 and they lasted longer and my dad was in                                 a union and he                                 used to take a lot of crap from his                                 union buddies for driving a toyota car                                 but he said it was and it was true it                                 was cheaper and it lasted longer                                 and so a book called the machine that                                 changed the world that came out in the                                 late                                               actually drove me to this that you know                                 that there's something about                                 the factory something about the process                                 in which we work                                 that has a real effect and and you know                                 that's in a lot of ways why                                 american motors which was in kenosha                                 wisconsin went out of business and                                 toyota became one of the largest uh                                 if not the largest auto manufacturer in                                 the world                                 yeah and uh as far as i understand the                                 american                                 uh korean industry reinvented itself to                                 some degree with the help of toyota if                                 i'm if i'm not mistaken                                 uh yeah yeah and some of the ideas came                                 came from dr deming and it's american                                 but i think                                 the idea of this sort of lean and toyota                                 way                                 has become a standard way of                                 manufacturing and as opposed to sort of                                 taylorism as a way to sort of you know                                 think of                                 you know try to break each piece down                                 yeah so we're going to look at some of                                 these principles                                 and some of them will be occurring                                 throughout the presentation                                 like starting to fix problems instead of                                 go letting                                 letting problems uh wait until runtime                                 and                                 standardizing tasks and processes and                                 we'll see how these                                 uh during the presentation how these uh                                 come in                                 in data processing data factories we're                                 going to look at                                 four different pieces or types of waste                                 one is the cognitive waste the thing                                 that steals your attention                                 instead of you steals time from you                                 doing deliver                                 valuable work then there's delivery ways                                 the                                 uh things that prevent you from throwing                                 from getting things out into production                                 and then operational waste things that                                 steal your time once                                 things are in production and then last                                 uh                                 product waste which is things that                                 uh things you do that do not actually                                 help create product value or end user                                 value                                 so looking first at cognitive waste uh                                 if you've been in a large-scale data                                 lake environment you've probably seen a                                 lot of this i was in one company which                                 is very mature very skilled                                 and i think i counted to like                                    different ways to                                 to write down time and some of them were                                 like really weird                                 uh and they were hard to get rid of                                 because of of fear of changing things                                 which we will look at later                                 but this happens this type of cognitive                                 erase this not only in the in the                                 format of things but also in the in the                                 naming of things                                 and definition of common things like                                 orders or users or transactions and so                                 forth                                 and also if you have to ask for yourself                                 where's the truth                                 for this type of data is it in the                                 database is it in the lake or is it in                                 the stream somewhere                                 then that adds to your cognitive waste                                 yeah and plus we're building just really                                 complicated distributed systems                                 that have lots of data and lots of tools                                 and just to understand the complexity of                                 the                                 the server infrastructure and then the                                 process view is                                 is quite complicated and so i think data                                 and analytics is not just about                                 you know one process running on one                                 machine with one user it's a team sport                                 across a distributed system                                 yeah completely aggressive it's this                                 team sport that makes it difficult right                                 if there was only one person thinks                                 everything would be coherent                                 well that movie that's the way you write                                 code but not i don't                                 [Music]                                 so where does this cognitive waste come                                 from well                                 one one thing which uh                                 chris mentioned is this the we have                                 number of teams that are that are                                 collaborating                                 and if we have a culture where you don't                                 have to ask for permission                                 to to and have to uh synchronize                                 everything                                 with everyone then we can choose freely                                 and in that choice                                 uh although it enables us it has the                                 uh the side effect of creating uh                                 diversity                                 harmful the harmful type of diversity                                 and creating heterogeneity                                 and also if you if you favor throwing                                 things out right now                                 rather than coming to a consensus on                                 what the semantics should be and in                                 most of the companies where i worked                                 these throwing things out right now                                 have been much higher rewarded                                 than trying to make ensure that things                                 are homogeneous                                 coordinated and that we don't have waste                                 yes there's the opposite lars where                                 you've got rigid companies who are                                 trying to not have                                 uh um they're trying to make change                                 hard in order to reduce the risk of                                 error                                 and so in some ways their this idea of                                 lean                                 or data ops is the happy medium right                                 between                                 potential chaos by having autonomy                                 and freedom and the boot on your neck of                                 control                                 and how do you mix and last between                                 those two                                 yeah and the being rigid and                                 making it hard to change things making                                 it                                 is making it difficult to address                                 uh the waste uh so in order to                                 avoid waste what what what can you do in                                 order to not get it in in                                 from the beginning well reuse of course                                 if someone else has defined                                 the way to store time or define                                 semantics and so forth                                 uh it should if it's easy to reuse that                                 definition then then                                 you will have less waste but in order                                 for things to be easy to reuse you must                                 be able to find them                                 and find the documentation about them                                 and also be able to change them                                 be able to change them so that they fit                                 your needs so if you have a read only                                 sharing that's that's not sufficient you                                 need to have right capacity                                 and in order to have right capacity it                                 needs to be                                 easy to change things                                 uh which brings us to how to eliminate                                 waste                                 if if you already have the cognitive                                 waste then the way to eliminate him is                                 to harmonize                                 things right but if you're scared about                                 harmonizing things                                 changing the time form and so forth then                                 i obviously you will never take the                                 effort                                 to make that uh change to harmonize                                 things and the you remember the the                                 pipeline the                                 the redundant parallel pipeline that i                                 mentioned a couple of slides earlier                                 when we finally years later we're about                                 to remove that pipeline                                 it turned out that it took us a year and                                 a half to                                 to remove that pipeline and replace it                                 with something new                                 because we didn't know what we would                                 break downstream                                 there's a high risk of removing things                                 yeah and i think that's also a bit of                                 cognitive waste on teams because                                 a lot of teams get sort of locked in                                 fear of change because                                 data and analytic teams have to                                 deal with their customers complaining                                 very upfront about if it's wrong or if                                 it's late or if it's incorrect                                 and we build these sort of very                                 crystalline                                 sets of code that we don't want to                                 change we don't want to work we don't                                 want to touch once it's working                                 and so it is very true you create a                                 pipeline and it can live forever                                 and so partly the reason it's                                 crystalline i think has to do with                                 testing and partly i think it has to do                                 with what lars said is that we                                 we're in a complexity business and how                                 do you tame complexity well there's                                 ideas that came from software                                 engineering about encapsulation                                 and reuse and sharing and partly                                 um as a data scientist you think you do                                 think your job                                 is to get insight to your customer but                                 the way that you get insight                                 is to build a system that delivers                                 insight and in order to build a good                                 system you've got to deal with the                                 complexity                                 of that system and that and the                                 complexity is is everyone's                                 creating and when you start off as a                                 software engineer                                 you get hit up in the head with um uh                                 the complexity of the system                                 and i think this is coming back to bite                                 us in data science and engineering                                 because we're building very complicated                                 you know ten thousand hundred thousand                                 line of code systems across multiple                                 tools and teams and and we need to                                 handle it                                 and they should be distributed and super                                 scalable and                                 fault resilient and everything and                                 things go complex                                 um so coming on to a different type of                                 waste                                 um the friction to get things                                 out the door uh to get                                 from your the idea that you have in your                                 head to                                 uh to writing code and getting it out to                                 production and in                                 in an ideal world there will be an idea                                 some research                                 on figure learning things and then                                 writing codes and then in                                 production and then repeat the learning                                 coding production and so forth                                 anything else that you do is friction                                 and waste                                 and we do tend to do lots of things here                                 that are                                 uh waste this also in the                                 in the lean world there is something                                 called inventory one form of waste which                                 is                                 things that you have done but have not                                 yet reached out                                 to end users and have had effect and                                 in in data processing we have both code                                 inventory like code that is not yet in                                 production                                 as well as data inventory uh                                 data that has not yet been fully                                 processed                                 so zooming in on things here we must                                 remember that                                 in for data driven products                                 we cannot if we assess quality in order                                 to put it in production we cannot just                                 look at the code                                 we need to look at both the code and the                                 data so no matter how much                                 we polish the code the uh                                 we don't know the quality until it                                 reaches real production data                                 therefore we have to test things in                                 production                                 and throw things out and get feedback                                 right away                                 from real production data and perhaps                                 the best                                 illustrative example here is when apple                                 launched apple maps i mean apple are                                 super good at polishing things to                                 perfection so that the code is                                 absolutely perfect                                 but when the products whose heavily                                 depend on data                                 actually hit the real world it turned                                 out that the data quality was not good                                 enough and this was                                 caused some interesting headlines so                                 yeah and i think                                 that that sense that you're building a                                 product that is                                 consumable by an end customer and you                                 may be the etl engineer or the data                                 scientist                                 on it and yeah you may be part of it but                                 your                                 end goal is to deliver value to a                                 customer                                 and that value comes from the code the                                 data the infrastructure it runs on                                 and that's your goal your goal isn't to                                 just fulfill the fact that you've got a                                 set of requirements from a jira ticket                                 and then you're done                                 and so owning the results and owning the                                 fact that your customers success and                                 seeing what you do as a product as                                 opposed to                                 you're just part of this you know                                 overall                                 process that you've got to do step by                                 step because these are                                 this is the way your organization gets                                 done and it's harder for people i think                                 to take that                                 customer first product i own the result                                 work but it's actually much more                                 satisfying way to work                                 i completely agree yeah                                 i'm a very holistic person i i prefer                                 the you know working                                 working with products end-to-end and                                 it's much more rewarding                                 so if you look at uh how to eliminate                                 uh delivery waste                                 it's in in theory it's simple just                                 question                                 everything that you do but this is                                 actually more difficult in practice than                                 it sounds because you will be                                 uh you will be hindered by the                                 assumptions that you make of what is                                 necessary and what is not necessary                                 and i'd like to highlight this book in                                 the state of                                 devops report because they                                 can they throw away some of the missed                                 or dispel some of the myths in                                 particular the most important method                                 there is some kind of trade-off between                                 speed and reliability and quality it                                 turns out that                                 that the teams with the highest                                 reliability and quality products in the                                 end they're also the teams that move the                                 fastest                                 so codimentory which it code that we are                                 not yet fully utilized                                 and uh this is prevalent in many                                 computer systems in                                 it is particularly prevalent in in data                                 processing where                                 we're cultivating notebooks or in                                 experimental                                 uh pipelines that never make it out to                                 production                                 and so forth for ages                                 and uh it's mostly common that a problem                                 is not specific to data                                 and uh likewise a good great resource                                 for avoiding this type of waste here is                                 is the site truck-based development                                 which actually has                                 scope much more than than trunk based                                 but it gives you a                                 it makes you think about what you need                                 and what you don't                                 actually really need                                 so i mentioned data inventory and this                                 is also something that we                                 have taken for granted for so long that                                 there has to be invent                                 inventory in unprocessed data because in                                 the database centric world                                 we have this idea that we put the data                                 in our databases                                 in a normalized manner and then at                                 runtime when the user requested some                                 data                                 uh we did the processing and joined the                                 data                                 uh so that we presented a list of the                                 user's orders or whatever he was                                 requesting                                 turns out that if there's a problem in                                 that join or the processing we will                                 notice at runtime and we will have a                                 a bad user experience or an outage so in                                 when we're shifting to working with data                                 pipelines and data factories                                 we do eager processing instead we strive                                 to process the data                                 in advance and denormalize it so it's                                 prepared for the user and if something                                 goes wrong you're not processing                                 the data pipeline will crash but that's                                 fine uh because we                                 we know how to make the impact of that                                 crash                                 uh low which we'll come to later and                                 so this is the equivalent of what is in                                 lean it's called an                                 andon core in in in manufacturing                                 pipelines they have a core that they                                 pull                                 whenever something goes wrong and then                                 they stop the pipeline and figure out                                 the problem and solve the problem                                 because                                 before the pipeline continues yeah and                                 in most organizations                                 they have a huge amount of data that                                 they have yet to analyze                                 and so um you know there's a sense of                                 humbleness here that you don't know what                                 your customer wants and if you can get                                 something                                 into your customers hands first you can                                 learn what they want                                 and one of the biggest ways uh beyond                                 the ones that lars have said is the fact                                 that people spend months                                 doing the wrong thing and they build                                 something that is not useful to a                                 customer                                 and the most important way to make sure                                 that you have something                                 that is useful to the customer is to get                                 and push feedback as                                 early and often in the process and so uh                                 that way when you're building a a model                                 or a data set or a visualization                                 having customer feedback keeps you from                                 wandering off in the wrong direction for                                 months and believe me i've done it and                                 it's no fun to spend months i mean                                 perhaps it's fun that you get to go and                                 live in your                                 write code by yourself or with the one                                 or two people but the                                 reality is it's uh you would rather much                                 rather have something done and useful to                                 your customer and getting                                 feedback on that and you know there's a                                 lot of companies have a lot of data and                                 they assume                                 that if i build a bunch of data and put                                 it all together                                 um people will come it's as if i've                                 gotten all my data together                                 it's the what we call the field of                                 dreams you know you build it and they                                 will come                                 and so uh just the fact that you have a                                 lot of data inventory doesn't mean it's                                 useful                                 you're trying to find the useful data                                 and the way to make it useful                                 and an iterative development methodology                                 combined with lean principles is the way                                 to go                                 which touches on one of the other lean                                 principles you know                                 uh pull workload rather than push i mean                                 we've i've seen many examples where                                 your data is just poured into a lake in                                 the hope that something                                 good will happen later whereas the                                 there's a lean principle that you should                                 only pull the data and do the work                                 that's actually needed for it for a use                                 case                                 taking us to the third type of ways the                                 operational ways the                                 the things that take your steal your                                 time and cause you harm when things are                                 in production                                 so it comes in a couple of variants one                                 is                                 friction when you are want to do                                 operational maneuvers when you want to                                 deploy something you want to                                 to change a pipeline or upgrade and so                                 forth                                 and that friction is very often caused                                 by fear                                 fear of breaking things you're doing the                                 wrong thing                                 which ties to the costs of things going                                 wrong right if                                 if the things go wrong or very costly                                 then you need to be afraid or people                                 become afraid                                 to change things so let's look                                 at how we can cut down the cost                                 of incidents the key                                 principle here is to separate online                                 environments from offline environments                                 in the online world                                 you have your production database to                                 serve users if they go wrong                                 if something happened here uh you you                                 will have very many                                 unhappy customers uh whereas much of the                                 data processing can be done in offline                                 world so you                                 take your data out take copies and dump                                 dump your databases collective guns and                                 so forth                                 to do the processing offline nobody's                                 hurt                                 if things go wrong and when you have                                 finally made an artifact of value like a                                 new fraud model                                 that you want to uh throw out into the                                 online                                 world you say oh you you sort of moved                                 very carefully to the online world                                 without disrupting production                                 and then you have a principle of you                                 apply principle of having multiple                                 all the copies of that same fraud model                                 so if something goes wrong in the                                 offline world and you have an outage for                                 hours or a day you still have some old                                 copies around it that you can use so the                                 careful handovers between offline your                                 my world and then                                 you can lower the cost of incidents                                 you have low customer incidents in                                 offline world which means that you can                                 move much much faster                                 so let's let's zoom in a little on on                                 how                                 uh different how there can be                                 differences in costs between the                                 uh online offline world and also between                                 data traditional data                                 uh traditional architectures and                                 data factories so in this case we have                                 we have a typical microservice                                 architecture let's say one of your                                 uh one of your services goes wrong and                                 it spits out some valid data now                                 you don't know it's hard to figure out                                 where that data has has gone if you go                                 discover the problem like two days later                                 who has asked for this data where                                 who where has it propagated from the                                 source of the error                                 to out to the different services you                                 have a                                 if this is important data you have a                                 very painful                                 operational procedure ahead of you in                                 order to                                 to recover from there                                 whereas if you switch here to do to                                 apply                                 functional pro principles instead of the                                 object oriented microservices you apply                                 functional                                 principles and do stream processing so                                 you regard all the events                                 in the streams as immutable you don't                                 touch and you                                 just transform them to new streams then                                 you it's easier to reason                                 which data is now corrupt because it's                                 all                                 everything downstream from a particular                                 point in time                                 so this cuts down the operational                                 overhead in case you have                                 uh software bugs you can cut it down                                 even more by not having                                 unbounded streams of of millions events                                 per day                                 and instead lump them into boxes batches                                 and you say okay here's                                 today's event and her tomorrow's events                                 and so forth and then when something                                 goes wrong                                 you have uh not three million events                                 that that were bad you have                                 three boxes of three batches                                 of events and you can say hey these                                 three days the batches were wrong                                 sorry can you please record from there                                 and that takes things to human time                                 scale                                 makes it much easier to uh                                 to efficiently operate yeah and i think                                 a lot of organizations have inherited                                 this idea of a data warehouse which is                                 this                                 it's built on more of a non-functional                                 or a stateful architecture where                                 you're constantly appending things and                                 it's not                                 it's like a object in software where you                                 can't reason about its internal state                                 and just like functional programming and                                 in software i think functional                                 principles apply to                                 data operations where you can if you can                                 always start                                 with an immutable data you can always                                 start with your base data and get to                                 where you are again by a process and a                                 series of steps                                 it becomes easier as lars says to reason                                 about your system                                 it becomes easier to run parallel                                 versions of your system                                 and it's not any more expensive because                                 we live in a cloud world we're having                                 where disc and cpu are cheap and so                                 functional architectures where you can                                 go you can always go back to the base                                 data the immutable data and start over                                 again                                 are another easier way to handle the                                 complexity of these systems when stuff                                 goes wrong                                 and in fact they're probably easier to                                 build with the from the beginning                                 and so these design patterns of of how                                 you think about these complicated                                 multi-team multi-cpu multi-processing                                 engine types i think are actually very                                 important in how people design things                                 and i think the                                 the pattern that was taught through the                                                                                           a data warehouse and patching it                                 patching and patching it every day until                                 you're                                 right i think actually makes things more                                 complicated and harder to change                                 so the operational cost here of the                                 of the traditional object oriented                                 online systems is                                 usually hidden waste and one of my pet                                 peeves is that there's                                 uh way too much trend towards online and                                 near lines past the stream processing                                 that disregards the operational cost                                 so i tend to tell all my clients to to                                 think about their use case can you live                                 with a few minutes latency                                 then batch will save you operational                                 time that you can use for data                                 innovation                                 it's all about eliminating waste which                                 takes us to the last                                 form of waste the product ways where you                                 do work that's not actually                                 driven by a need from a user customer                                 and so forth                                 or where you have value in your data                                 that you cannot release due to some kind                                 of friction and so forth                                 and this unrealized value uh                                 is i usually uh talk about                                 demo data democratization the as a                                 solution here the the                                 importance of making your data                                 accessible                                 and well formatted and so forth and and                                 i cut in a bit                                 a small little quote here from adam                                 kinney my                                 ex manager now at next panel                                 that tends to yield making the data                                 accessible valuable usable                                 it tends to yield much more value than                                 all of the shiny and fancy things in                                 my experience and with that                                 i leave the uh token                                 to christopher for the rest of the                                 presentation yeah                                 yeah thanks lara so i'm gonna uh                                 hopefully you can see my screen                                 so um you know one of the biggest if you                                 can see my screen and i'm presenting                                 this sort of bar graph                                 you know one of the biggest things is                                 that people are not spending time                                 on doing the cool stuff that they want                                 to do new features and data sets for                                 customers they're spending a lot of time                                 in a reactive mode reacting to errors                                 reacting to the complexity of the                                 organization                                 and some of that complexity comes from                                 the fact that                                 data in analytics itself is not owned by                                 one team                                 the rise of self-service tools like                                 tableau and trifacta have made                                 the collaboration part between a central                                 team and a decentralized team very                                 um very complicated and so we've got                                 these complex roles and complex                                 organizations                                 complex tool chains and data and                                 collaboration and as a result                                 we're not spending enough time doing the                                 things that really matter to add value                                 to                                 the data products that we deliver to our                                 customers and so                                 in a lot of ways i you know i brought up                                 at the beginning the                                                    and i think it's uh                                 i think that's the case where you know                                 our ability to put something into                                 production in the cycle time at which we                                 could do                                 new models and change of cars is very                                 very slow weeks or months                                 and the amount of errors that we have in                                 production not just from poor data                                 quality but from                                 processing errors or timeliness errors                                 is huge and actually it's really                                 untracked                                 um and i find a lot of data and                                 analytics teams                                 start with promise and they end up being                                 very frustrated because                                 um and we found a lot of cdos have us                                 chief data officers have a short tenure                                 people are leaving the data                                 analytics profession which is                                 unfortunate because they're frustrated                                 and so um you know and i've got a bunch                                 of gray hair because                                 for many years i ran data in analytics                                 teams and i suffered under the                                 the fact that if you had a data error                                 and lars and mars and i were talking                                 about our big data errors and                                 you know my thousands of sales reps all                                 yelling at me because something was                                 wrong and                                 um that can really you know it can                                 really uh cause you to                                 uh have a very painful life                                 and so um if we look at this one source                                 of pain                                 is the fact that these pipelines                                 themselves                                 um follow what's called conway's law and                                 that means that they're designed based                                 on the way the organization is                                 structured                                 and in a lot of organizations a customer                                 is at one point                                 and there may be a self-service team                                 using tools like tableau                                 or alteryx there may be a data science                                 team there may be a back                                 end data pipeline team and all three of                                 these teams                                 may or may not work for the same boss                                 and they may or may not sit in the same                                 building or they may or                                 they may work in have completely                                 different organization structures                                 and what conway realized is that how you                                 engineer something is actually                                 reflective of that organization                                 structure                                 and if you were you know as as i am a                                 software engineer you'd realize that                                 that's probably not a                                 a great way to um may not be the best                                 and optimal way to organize your                                 your team and so let's look at how that                                 looks in some organizations and this is                                 a bit of an eye chart but let me                                 let me let me talk to you and if we go                                 to the left the left column that says                                 centralized development and the d                                 is a a development team and it contains                                 a data engineer a data scientist and                                 someone doing bi and maybe governance                                 and they're all a team                                 and the question then becomes if they                                 all work for the same boss well how does                                 the data engineer                                 who does the data work coordinate with                                 the data scientist who does the model                                 and the person who does the                                 visualization                                 you know how do they work together on                                 the same team but                                  normally that team also does their work                                  and then hands it off to a production                                  team so they deploy to production and                                  someone else                                  monitors that production analytics for                                  errors                                  and so you've got this collaboration in                                  the second column between development                                  teams and production                                  and if we go to the third column in this                                  a lot                                  of organizations have decentralized                                  development maybe they have                                  a one team that does a data warehouse                                  and then in one line of business they                                  have a team that does                                  analytics with tableau another team has                                  click in a different part of the                                  organization a third team has                                  has cognos and so you have this                                  decentralized development model                                  and on top of that those teams                                  themselves may push the production to a                                  separate team                                  and so you have this mesh or network of                                  centralized production and and                                  centralized development and                                  decentralized production                                  and decentralized development and so how                                  do we collaborate between this and                                  the column on the right is actually i                                  think the state of most large companies                                  today                                  where um this sort of collaboration                                  complexity starts to override everyone                                  and makes it very very hard to for                                  customers to understand                                  well something's wrong who do i call                                  well well do i call                                  the production team who works in the                                  line of business do i call the                                  centralized production team                                  and even just finding a data error it                                  can take a full day to figure out                                  which part of the pie it came from who                                  owns it and then for them to diagnose it                                  and that's just too short for the speed                                  of business and it has too many                                  people involved i think so let's think                                  about the result                                  i think this could worse as we will move                                  to data                                  driven products because it used to be                                  the case that we were developing                                  and and then through over the wall to                                  operations that put it in production and                                  then                                  sort of develop devops sort of addressed                                  that but now we have data scientists                                  that sit in the corner with with                                  a pile of static data they built a model                                  in python and they threw it over the                                  wall to the                                  developers who rewrite it in java and                                  and                                  then they when they put it on on fresh                                  data it behaves differently and then                                  they throw it over the wall to the to                                  the operations and so forth so we have                                  an even worse situation                                  uh yeah yeah it's almost like devon ops                                  was a nice one-to-one problem                                  but data ops is sort of a many-to-many                                  problem where you have many developers                                  and many production and they've all got                                  to work together                                  and even these teams who are normally                                  building software like if you're                                  building a website for your company                                  well what if you're going to put a new                                  attribute on a table in that                                  for that website how does that attribute                                  on that table actually show up in a data                                  warehouse and then                                  in a model and in a visualization of                                  that and coordinating the deployment                                  from when you've got a devops team                                  building software and when you've got a                                  data team following data ops that's also                                  another                                  point of collaboration here and and                                  all these things i think are contentions                                  i mean there's been plenty of times and                                  i think everyone who's done data for a                                  career has been surprised                                  when their data feed changes all of a                                  sudden and they didn't know                                  um columns are added drops are added and                                  so collaborating between your data                                  providers                                  is even another case and so this                                  many-to-many problem                                  this uh disjoint discombobulated value                                  chain i think is inherent in data and                                  analytics and in a way that's                                  much more painful than than in software                                  development                                  um and and so i think at least my                                  experience                                  is that a lot of data teams are                                  suffering because they're caught between                                  data providers who don't care about them                                  data customers who think                                  they should get everything the next day                                  and this                                  collaboration problem between teams and                                  so i run into a lot of teams who are                                  kind of actually beaten down and                                  distraught and feeling disempowered                                  and they can't create and innovate and                                  you know i felt that way                                  when i ran a data team starting in                                       to about                                  uh to in the                                                       was why is this why does my life suck so                                  much why do i hate to come into work and                                  find there's a problem or i can't seem                                  to go fast enough or                                  if i go fast i break things and how do i                                  let people try out new tools                                  and so um having lived that life for a                                  year                                  for years and and suffering from it i                                  think there's a better way and i think                                  the ideas in lean the ideas and data ops                                  are a way for people                                  um to reclaim control and not be sort of                                  beaten down by this                                  and and because just buying another tool                                  or applying a new algorithm                                  isn't going to save you you need to                                  really fundamentally rethink your                                  process and that's                                  similar to car makers in the u.s you                                  know at a big time in the                                                all thinking about doing                                  industrial robots would save them and it                                  didn't it's all about the system                                  and the process that you work in and so                                  um                                  you know i define data ops as kind of a                                  set of technical practices and cultural                                  norms and architecture patterns                                  that really enable this rapid cycle of                                  innovation to get feedback from your                                  customer                                  that allow you to produce analytics and                                  data sets at a very very low error rate                                  so you don't have a lot of problems                                  and then allow you to collaborate across                                  complex sets of people                                  and technology and environments so if                                  you think about these three things you                                  could almost see they're all opposite                                  i want to go fast i'm going to not break                                  things and i want to get everybody in                                  the organization who                                  touches the data value chain involved                                  most people would think that that's                                  laughable                                  right and so if you look at the lessons                                  from accelerate that                                  in in software they were able to bring                                  cycle time and error rates high up                                  and i think in data ops we're seeing                                  that you can bring cycle times and error                                  rates and collaboration high up                                  and all those things can happen together                                  it takes some work but it also takes a                                  different perspective that comes in from                                  lean                                  and so um you know what we've seen for                                  people who adopt these ideas and data                                  ops and we wrote a                                  manifesto and a book on it um is that                                  the time that they spent doing this                                  crappy errors and operational tasks go                                  down                                  so they end up having both time to do                                  cool new things                                  but also because you're a believer in                                  iterative development you have a time to                                  go fast and you need to do                                  um process improvement and technical                                  debt as lars talked about being able to                                  change things and refactor and improve                                  because                                  you know you're you're dealing with a                                  complex distributed system and lots of                                  code and lots of people                                  and you know if you apply these ideas                                  then you can start                                  getting your deployment latency tap down                                  you can start                                  minimizing the time that it takes from                                  the ideas in your head                                  as a data scientist or a data engineer                                  until you get it in a product that your                                  customer can react to                                  and you can do it in a way that's low                                  errors and your team                                  can be happier and i think more                                  efficient and so i think all these                                  benefits are there from data ops                                  and so um let's talk about one last                                  thing before i finish up and there's                                  been a lot of talk about                                  devops and data ops and all these ops                                  words out there and like what do they                                  mean                                  there's ai ops and ml apps and model ops                                  and                                  data secops and so i just wanted to like                                  clear it up so i think                                  basically there's a bus basically i                                  think whether you run a manufacturing                                  line or build software                                  or do data and analytics there's a                                  common set of business management                                  concepts                                  that come from lean or learning                                  organizations                                  or deming and it's really focused on                                  error rates                                  and cycle time and flow and                                  collaboration                                  and measurement they're all kind of the                                  same concepts at a high level                                  because you know there's a shared                                  technical thing that this team is                                  helping run or build                                  assembly line software analytics and so                                  if you look at it how that team is                                  organized how the people talk to each                                  other                                  there's different methods and there's                                  team management methods like                                  agile and kanban and scrum um there's                                  lots of                                  different ways and then in manufacturing                                  there's six sigma and total quality                                  management there's books out there you                                  can go                                  to any library and find                                                   one of these things on how you should                                  manage teams and                                  the people but and that's fine but i                                  also think                                  in a lot of what we're talking about is                                  more um                                  what people do you align this to and                                  we've been speaking today                                  particularly in the middle column the                                  data science engineering and analytic                                  teams and not so much about                                  industrial teams or software teams and                                  if you look at it from a                                  technical environment how do you                                  actually do this for it teams there's a                                  well-developed thing about devops or                                  devsecops                                  get ops or ai ops and all these terms                                  really apply to it and software teams                                  and how to have them go fast                                  how to be a learning organization and i                                  think the ideas of data ops and some                                  people call it model ops or ml apps are                                  the same except they're just the same                                  ideas applied to data science                                  engineering and analytic teams                                  and so um and i think this technical                                  environment is essential you can't just                                  do                                  quick iterative development without                                  building the factory that enables you to                                  do it                                  and so you can't focus on customers and                                  focus on products important but we're                                  talking about the system the process the                                  factory that makes it work                                  and so to conclude my talk it's when i                                  have two thoughts                                  one is that they're all related around                                  this idea that what you do                                  is much less important than how you do                                  it so what you do                                  the model the um schema the                                  visualization                                  is much less important than the system                                  that you work in and so here's a quote                                  from elon musk he said                                  we realized the true problem the true                                  difficulty and where the greatest                                  potential is                                  is in building the machine that makes                                  the machine the factory                                  and so another case and dr deming and                                  many of you have problems and errors and                                                                                            were in the system not in the person and                                  so instead of blaming your team members                                  for the problem build a system build a                                  factory                                  around it and in fact i think the most                                  talented people in the organization                                  should be working on this factory                                  so uh because i think the factory of                                  insight                                  the lean principles can actually                                  accelerate the way you do work make it                                  much more enjoyable                                  and give more value to your customers                                  and so that's the purpose of our talk is                                  there's something beyond what you're                                  currently doing in data science and                                  engineering that's actually really                                  important                                  and think about the system and the                                  process around it and you'll be uh                                  you'll be successful                                  so that's it in terms of my our                                  presentation                                  i think we uh targeted liars is that                                  right that we targeted                                             yeah that seems to be all right um                                  i i'm back on i would like to thank you                                  lars and christopher for the great                                  presentation and                                  also for this uh kind of format to                                  combine a talk and giving it more like a                                  conversational style i liked it very                                  much                                  thank you for that and i think we have                                  just time for just one more question                                  before we have to                                  uh leave into the breakout room that we                                  can ask                                  a few more questions so i will check the                                  slack once more and there's the first                                  question from christoph                                  who's asking considering lean and agile                                  principles shouldn't we strive for                                  cross-functional                                  autonomous teams with deaths and data                                  people                                  focusing on solving customer needs                                  incrementally                                  the uh read the question here                                  yeah absolutely uh perhaps it wasn't                                  clear but                                  that's one of the solutions to uh                                  to make sure that the work that you do                                  results                                  in product value i've i've been in                                  in organizations where we would uh you                                  know there was a data collection team                                  who handed the data over to a                                  cleaning team who handed the data over                                  to a user modeling team who handed the                                  data over to the like the                                  recommendations team                                  and there was tons of waste because they                                  were we were doing                                  the wrong thing so so in successful                                  organizations i've seen                                  teams that are are cross functional as                                  you say have                                  all the skills necessary to do the                                  cleaning and do do                                  all of the things that take you from raw                                  data essentially to                                  to end user value and that that might                                  very well                                  include things like ux and so forth so                                  so as close as possible to to align with                                  the use case                                  uh but if you have if if you just let                                  the the autonomy lose                                  then you will get too much cognitive                                  waste in the end so you have to                                  counterbalance it with something right                                  so so there's a there's a balance here                                  yeah and i also think the um you know                                  autonomous teams are great but it's also                                  it's also about really getting the teams                                  to emotionally understand and own                                  the result because sometimes it's easier                                  to have a little bit of cognitive                                  distance and say oh i'm                                  you know i'm just doing even with agile                                  i can say well i'm doing agile and i'm                                  on a                                  cross-functional team i don't really                                  care if my customers getting value from                                  this                                  i don't really care if they're using it                                  so i think the care in which you                                  feel that it's important that your                                  customer gets value from it                                  um and actually uses it i think is                                  really important and honestly                                  that's hard sometimes it's hard to hear                                  negative feedback that i didn't find you                                  know you spent                                  a week or a month on something and your                                  customer looks at it goes ah that's not                                  what i wanted                                  and it's hard but it's actually part of                                  you know                                  the sort of loving failure and having a                                  safety culture                                  where you can fail and fail forward and                                  learn from failure i think is a is also                                  also an important part of how you run                                  the team                                  okay thank you so time is up                                  i think we need to switch to the                                  breakout room which is advertised in the                                  screen below so it's berlin bus was the                                  dot d e                                  slash v bus two and we can continue the                                  conversation on the great talk by alas                                  and christopher                                  and i would like to thank you once more                                  for your presentation                                  and just will announce that in just                                  about                                                                  continuing                                  you
YouTube URL: https://www.youtube.com/watch?v=fYJspPFo2jU


