Title: Berlin Buzzwords 2013: Robert Muir & Simon Willnauer - Query Suggestions with Lucene #bbuzz
Publication date: 2013-06-19
Playlist: Berlin Buzzwords 2013 #bbuzz
Description: 
	Query suggestions are a key component of nearly all search applications. Google has set a high bar for user expectations: So how can you make your application deliver?

A major advantage of Lucene-based search solutions is the ability to tailor the search behavior to meet your specific application needs ... how can you do the same with query suggestions?

This talk will introduce Lucene's suggester implementations and how to use their features efficiently. We will walk through pitfalls, real world experiences and running applications serving large amounts of suggestions. This is a "must attend" if you wanna work with suggestions.

Read more:
https://2013.berlinbuzzwords.de/sessions/query-suggestions-lucene

About Robert Muir:
https://2013.berlinbuzzwords.de/users/rmuir

About Simon Willnauer:
https://2013.berlinbuzzwords.de/users/simon

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	                              hey hello hello can you hear me okay                               great before we start to talk well a                               quick introduction I'm Simon I run his                               conference i'm allison commuter this is                               i'm robert muir i work on the scene and                               we wanted to actually encourage you to                               ask questions during the talk and I'll                               afterwards and we bought eight beers and                               each person who asked a question gets to                                be right away so they're cold come on so                                when do you get your beer now it needs                                to be relevant to the topic ok ok good                                like Ryan has to be right here and don't                                worry the Ryan doesn't drink beer so                                you're you're good you're good okay                                let's go ah yeah another quick                                introduction I i work for elasticsearch                                and Robert works for a nine you you                                probably find us on Twitter those are                                the tax and if you if you want to find                                us for in terms of like we've seen work                                I think that should be easy just a                                school what's this we have technical                                difficulty sorry                                munition yeah this is not good all empty                                PDF export awesome can we just run it                                from here sure oops this work okay yeah                                okay cool hey there's an agenda so no                                six it cool I'm so we're gonna introduce                                first what we gonna talk about there's a                                lot of talk so you usually see where                                people just you dive in the topic and                                and you doing what they talking about so                                we try to introduce this here so                                everybody uses Google right and you                                you're one of my favorite features is                                the searches to type so you type                                something and you get search results as                                well this is not what we're going to                                talk about sometimes you mistype                                something you get did you mean this is                                not what we're going to talk about what                                we're going to talk about it is up there                                it's the courage suggestion you type                                something and you get a crew suggested                                it would keep eventually executed                                against the search engine and this is                                something we spend a lot of time lately                                in lucene to build software that is                                specialized for this case and this is                                what we hopefully gonna give you guys an                                idea today how this works and how you                                can make use of it okay when the next                                thing okay so what is the big deal here                                the problem with search is that well it                                on the one hand needs to be good in                                terms of quality and on the other hand                                it needs to be fast but fast is a                                totally different story when we talking                                about suggestions right you first of all                                you're getting a lot more queries so you                                need to handle a lot more load you need                                to serve super super quickly you you                                better return your result instantly like                                less than                                                               you really want if you if you like you                                look at the average search query I've                                seen in my consulting life it's about                                like a hundred milliseconds we                                        this is this is not work with                                suggestions this is too slow and the                                user experience you're super important                                if the suggestion comes for for the                                first character while i'm done with                                typing it's useless right so you need to                                be really quick here so bottom line is                                be                                superfast this is the big problem domain                                here what you essentially do is you                                fighting the speed of light when you                                when you have a server sitting in                                Amsterdam and somebody from the u.s.                                sends a request like it types the first                                character it goes all across the ocean                                and back right this is roughly about                                                                                                                                                                              right you can easily double this and                                this like wait gets realistic so the                                only real solution this is you know use                                amazon cloud or some other cloud and                                deploy well white what you what do you                                really want to if you what if you want                                to get when you want to deliver really                                really good suggestions is something                                like                                                                    frequency you want to get here um yeah                                we try to build something in the scene                                that helps you to do this that actually                                 allows you to go there um but the                                 software as its own it doesn't doesn't                                 bring you that far you really need to                                 think about what you what you want to                                 deliver here there's a couple of things                                 I want to let you know like what you                                 really need to pay attention to when you                                 build something like this as especially                                 the ranking what what makes a string a                                 good suggestion why is Barcelona better                                 than Berlin for depth curry bee bee or                                 something else right why is this a                                 different why is this something you want                                 to suggest rather than something else so                                 ranking here you new thing is very Des                                 Moines specific you want to filter trash                                 like there might be misspellings in your                                 data you don't want to suggest something                                 like this you probably know you are we                                 going to retrieve something but the                                 results will be not really good right                                 and on the other hand it's very demain                                 specific but if you let's say you                                 searched about you search for songs and                                 our bands you type who you borrow you                                 want to suggest the who it's probably                                 gonna be much better for your relevance                                 eventually if the curry is the who                                 because it gets more context the band or                                 somebody types kept the u.s. you want to                                 suggest captain america                                 this is probably what it is right or you                                 have food whatever you want to pronounce                                 this like you missed i def Angie and you                                 want to you want to suggest to fighters                                 and everything is like up k is written                                 and it's not lower case then you you are                                 basically apply fuzziness analysis                                 synonyms all this kind of stuff you want                                 to do in your full text search                                 application as well um here is a use                                 case that actually uses the leucine                                 suggester xand the stuff we're going to                                 talk about today as a very interesting                                 feature it's the soundcloud website and                                 when you type something like foo good                                 whatever you get actually Foo Fighters                                 suggested right so it applies all these                                 kind of analysis but the interesting                                 part about this is this is not actually                                 a curry at the end of the day this is a                                 navigation so it's some kind of you                                 suggestions as navigation and a lot of                                 websites have this kind of behavior                                 where yous go and just type in a query                                 and press the first result to get to a                                 landing page the interesting part here                                 is that you can actually take a lot of                                 traffic off your search engine by using                                 suggestions as a diet navigation tool                                 right this is something that is really                                 interesting but at the end of the day s                                 am glad also uses this as crazy                                 suggestions we go further here in the in                                 the lower bar you can go and try it out                                 it should be reasonably fast from from                                 here this is the this is the exact same                                 thing what we're going to present today                                 how do you build something like this                                 roughly the interesting part is for for                                 the for navigation part it soundcloud                                 there's there's more information coming                                 back than just the string right there's                                 highlighting another highlighting                                 information coming back offsets there is                                 information about the actual suggestion                                 so each unique string points to an                                 entity and this allows you to actually                                 point the user directly to the landing                                 page or even use this in your search                                 engine because at the end of the day if                                 you get a suggestion you also want to if                                 somebody searches for a suggestion you                                 also one percent results if you don't                                 get results that's kind of odd yeah so                                 some interesting facts I got from some                                 soundcloud people is that the the                                 suggest cure is to second is were free                                 three times more than what they see on                                 the under search engine infrastructure                                 but there's um there's more load that                                 than just from the web from and coming                                 in here and that the suggestions                                 actually improve search position like                                 you if you get the user to type in what                                 what he actually meant you your it's                                 easier for you to give him a good result                                 the result at the the suggestions here                                 are actually waited with some                                 interesting scheme Peter Bergen was                                 talking about yesterday as well it's                                 similar to the search engine waiting but                                 I'm gonna amid some details some of you                                 have seen the talk yesterday that's a                                 SoundCloud so infrastructure you can                                 watch it on the under video and it's                                 probably no but the the more about the                                 details benchmark wise these the                                 suggester 'he's they're running they're                                 running roughly like                                                    second and a benchmark they can do way                                 more this doesn't mean that they                                 actually run at this rate at this point                                 but this is still what they can do in                                 theory hi so this is another use case I                                 don't know if you're familiar with Yelp                                 it's very popular in the US it's just a                                 website you use to look up things like                                 restaurants get reviews and it's very                                 popular for like if I want to find                                 something nearby I want to go eat Thai                                 food then i would go to yelp and find a                                 good place with good reviews you know                                 look at the price do some comparisons                                 and then and I'd see the location know                                 the times and everything like that so                                 they actually give a talk at the scene                                 revolution I think one year ago talking                                 about how they wrote their suggest ER                                 with the scene and it's like it's open                                 source on github actually but um the                                 interesting thing I thought that they                                 have is their suggest errs influenced by                                 your location so you have this idea that                                 they may have                                 many restaurants but I only I don't care                                 about restaurants in Berlin if I'm in                                 the US I want ones that are close to me                                 so how can we make the suggester you                                 know use this information and what they                                 do is they use geo hashing and they put                                 their suggestions into their suggester                                 multiple times with varying degrees of                                 precision and this allows them to                                 basically maybe double or triple the                                 size of their suggester but who cares                                 because now they have you know                                 auto-suggest right so this is an example                                 right this is what a GOI she looks like                                 if you're not familiar with them it's                                 just a string that kind of represents                                 that place and as you take off                                 characters it becomes less precise so                                 maybe you have something like a city                                 county state and so uh that's                                 essentially what they would put in their                                 suggest er is they add these prefixes                                 and when they go to run their queries                                 they do the exact same thing and so you                                 can kind of figure out how this would                                 allow you to influence ranking based on                                 location I'd say I don't know arm you                                 know their exact formula but I suspect                                 it's a huge part of the suggestive                                 ranking you know location so I think                                 that's a good example but what can they                                 seem to in general like what do we                                 provide because they obviously have                                 their code on github that they built off                                 of leucine what you know why did they                                 decide to use loose teens framework and                                 why did some cloud use it as well and so                                 this is the idea is to tell you a kind                                 of the features we provide one word of                                 warning about our suggester is it's kind                                 of new stuff and so I mean I have the                                 best API and a lot of cases the way to                                 go about it is to take a suggested it's                                 close to what you want and just take the                                 code and modify its open source so                                 eventually I think we will have a good                                 evolved API where we have you know it's                                 extensible and you have like a normal                                 package you would use in Java but                                 currently you may have to do some                                 hacking so but what we give you the main                                 thing is the top in most relevant                                 suggestions right so it's based on                                 ranking and in its efficient so this is                                 sort of like search                                 user what's the top end results we we                                 like to use the text analysis chain that                                 you would use with solar or                                 elasticsearch or leucine it's basically                                 listin has many many analysis components                                 already built to do things like remove                                 stop words remove accent marks things                                 like that and so being able to reuse                                 that for auto-suggest gives you a lot of                                 power already you know that you already                                 know how to use we can correct spelling                                 so that's the idea of like the example                                 from soundcloud is the user made make a                                 typo and one way you can do that is with                                 did you mean but another way you can try                                 to do it is to actually handle it in                                 august adjust itself to so it's even                                 better as far as our implementation is                                 optimized for you know a high volume                                 website so it's not a toy this is                                 something where you build your suggests                                 it's kind of you can think of it like a                                 model and you build it and then it's                                 totally immutable it's very fast and                                 it's essentially a byte array in ram so                                 f st you know what is this why do we                                 care well i'm not going to explain what                                 it is i'm just going to you know say why                                 we care and this is a nice blog post                                 that went out this week from aaron he                                 worked at internet archive and what they                                 have is they have a list of kind of                                 every URL they've ever seen because they                                 take the Wayback Machine what it does is                                 allows you to look at old copies of web                                 pages so they're sort of archiving the                                 internet and they have a somewhere on                                 the order of hundreds of billions of                                 these URLs but um instead of trying to                                 build an FST of that which would be many                                 terabytes they started with well let's                                 just do all the host names that we have                                 right this is something more reasonable                                 only a little over a billion so they                                 built this FST and it shows you that                                 it's only slightly bigger than if you                                 were to gzip that list of host names                                 except you have the ability to do you                                 know over a hundred thousand queries per                                 second on this thing so this is very                                 powerful it's it's small it's efficient                                 and it's fast so that's what we want for                                 auto-suggest and that's why we used it                                 so now we're going to talk about we have                                 a few suggestions to talk about and it's                                 kind of like a timeline like we started                                 here and we've seen and then we move                                 forward and it                                 dance them and so I'm going to kind of                                 show you the timeline so you have the                                 idea these all these suggests are still                                 there so the simpler earlier ones you                                 can still use but of course I'll                                 recommend you know we use the most                                 recent one with all the greatest goodies                                 so we started with this one it's called                                 FST suggest er this is very simple one                                 they made the major weird thing about it                                 is it you can only have                                              weight because the weight is a single                                 bite so you cannot really have fine                                 grain waiting but other than that it's                                 very fast and the way that it works is                                 it puts the weight in front of the term                                 in the data structure so when we do look                                 up we just do                                                         that's how we get results in ranked                                 order so extremely fast no you know                                 stuff like priority queues or any of                                 that but the disadvantage is again you                                 you don't really have good control over                                 weights and                                                              for to get the quality you need so what                                 we decide to do was can we improve this                                 you know and give you a little bit                                 better waiting and we come out next with                                 the weighted fsd suggest ur so this one                                 is good because you can use                                             your weights that's the main the main                                 advantage of it over the previous one                                 it's a little bit fancier and how it                                 works because what it does is it builds                                 a weighted FST so the weight is part of                                 the data structure and it can do a                                 shortest path search is what it does so                                 it walks your input in this case WEA and                                 then does shortest path from there and                                 so it gets the end shortest past and                                 that's the end top end suggestions so a                                 little bit more complicated more math                                 but you know more powerful so one issue                                 with that one is it's still am not very                                 good some limitations for example                                 the matching is exact though we would                                 like for you to be able to maybe be                                 insensitive to accent marks or even case                                 you may want to present the case in                                 mixed case the way it's supposed to be                                 but still allow for a case-insensitive                                 correction and things like this so what                                 we decide to do is can we use the scenes                                 analyzer chain which already can do all                                 these things and plug it in to suggest                                 because in this this would give you                                 something even more powerful and you                                 already know how to use it                                 so that's what we did and so this is a                                 crazy example it's Japanese but you                                 actually cannot do obviously just for                                 this language without having you know                                 something like this setup because it                                 works on this completely different                                 analyzed for them it looks nothing like                                 the text you see anyway so the idea here                                 is if you want to remove some accents or                                 something like that and still and still                                 have an insensitive but show the                                 original term you can use analyzing                                 suggester and you just give it leucine                                 analyzer so there's a little story                                 Bantus the latest and greatest I would                                 say it's a fuzzy suggester and last year                                 last week when we started preparing this                                 talk we were like how are we going to                                 regionalize this this is this is really                                 complicated and we figured out we can't                                 so we just put this up wet what's going                                 on no to give you actually a little bit                                 of information about this how this works                                 it's it's a suggested is essentially an                                 analyzing suggester it's a subclass a                                 pirate subclass and it extends analyzing                                 suggester by adding roughly about                                    lines of code right so it's just                                    lines of code more complex than                                 analyzing to tester but those                                          of code do actually a lot of things it's                                 based on                                                               data structure that we use for a fuzzy                                 searches in do seen since the scene for                                 some of you might have heard about it                                 there's a lot of people have talked                                 about it is the the automata in invasion                                 in lucene broader several thousand                                 percent in performance improvement for                                 for a fuzzy search and we we figured                                 that actually we can use the same                                 technique to do suggestions as well what                                 we basically look at is there's two                                 finite state machines right it's an                                 atomic on that it represents a prefix                                 with and and accepts all the terms that                                 within the levenshtein distance of one                                 or two of this prefix and we have an FST                                 which is our index here essentially that                                 we want to suggest from so we can                                 intersect them                                 we can build another automaton that                                 accepts all the possible prefixes here                                 and this is what we do and extract the                                 prefixes out of these out of this                                 intersection and built the top and based                                 on them it's basically you could think                                 of as you entering multiple prefix                                 queries and use use your use your the                                 bladders you just typed and and mutate                                 them in a way that they accept all                                    side distances wait but what is                                    steinitz ha Mata like this is I want to                                 really give you an idea why this is hard                                 to to visualize this is a lemon slant                                 automata for the term dog so                                         this is a                                                            simple one right if you if you really                                 look at production ones there's no way                                 that we could put this up here but what                                 essentially this is is like when you                                 think about the term dogs do g s right                                 right up there this this is how mota                                 accepts all the terms that written                                 within                                                                   a really efficient data structure                                 because this is this way we can use the                                 power of the analyzing suggester and due                                 to the intersection we can also fix the                                 spelling errors on the fly speed speed                                 is a big question here um well it turned                                 out that there are still pretty fast                                 it's                                                                     gesture but as mike McCandless said                                 before we committed it said you know                                    times slower than crazy fast is still                                 crazy fast which is which is kind of                                 true but I want to get over to Robert                                 and tell you why these suggestions                                 actually asked fast as they are today                                 there's a funny story behind it yeah                                 this actually is a funny story so we had                                 a benchmark for to suggest errs from the                                 very beginning and we're working on                                 suggester 'he's the benchmark actually                                 had a bug so we're working on this                                 problem where can we correct spellings                                 and I thought you know this is too slow                                 what we're trying to do is to slow its                                 only                                                                    we would like it's got to be at least                                 you know                                                               to be useful now we're doing these                                 benchmarks the                                 and the benchmark was all of our                                 suggester xin leucine were a thousand                                 times faster than we thought they were                                 because someone calculated it wrong so                                 that was a pretty cool day to figure                                 that out and to say oh wait                                              who cares cuz                                                          like question we have a question here                                 awesome a beer here the question is how                                 long do we build that to be down long                                 does it take to build the automaton you                                 mean the Levenstein automaton at curry                                 time um it depends depends on the length                                 of the word and it depends on the length                                 of their word and it depends on how                                 complex your analysis chain is if it is                                 if you have a very complex query time                                 analysis chain where you have synonyms                                 and stop where it's all this kind of                                 stuff and there's a commanding the code                                 that is that says how slow can is be                                 actually I don't know our recommendation                                 is use a simple curry analysis chain and                                 do more work at indexing then you you're                                 pretty pretty much at at least                                        curries a second so the building the                                 automata is usually pretty fast yeah did                                 you get a beer yea Sheila beer okay very                                 good ah                                 okay so um we we use the same technology                                 for the inverted index the same like                                 finite state machines we're talking                                 about here they're used in various                                 places for example the term dictionary                                 we store the terms this way actually and                                 we execute things like regular                                 expression wildcard queries we we use                                 the same technique here but um I guess                                 the differences is that suggests errs                                 have to be much faster than the inverted                                 index so there we do things a little bit                                 differently we load everything up in RAM                                 and things like that so it's kind of a                                 little bit of a different story you know                                 it takes a lot you you think I I'm going                                 to spend two hours to build the                                 suggester and you know use it for a                                 couple days and then build another one                                 and load it all up in RAM and serve you                                 know I don't want to have garbage                                 collection and I don't have anything                                 that would cause someone to have you                                 know a                                                                 something like that because they're                                 their fingers are waiting you know they                                 type the key in May they want stuff                                 coming back fast so yeah we do things a                                 little bit differently sometimes a                                 little more hacks but in general it's                                 the same there's a lot of same code we                                 use in the inverted index I want to add                                 to this wise addresses are actually fast                                 story a little bit there was something                                 going if somebody added a feature like                                 it was I think it was analyzing                                 suggester and the curry benchmark draft                                 but like                                                               were like oh this is a lot right like                                 going from                                                         eventually turn out like we tried so                                 hard to get these five thousand Korea's                                 the second back but it turned actually                                 out there is a thousand five hundred                                 thousand times more that so we actually                                 spend so much time optimizing this code                                 to get this                                                              we would have never spend we would know                                 there's actually not                                                                                                                        at that point is crazy but yeah that                                 does you know who you get the good code                                 from that some of it is kind of crazy                                 but um yeah what's in the pipeline so we                                 described kind of where we are in the                                 scene the different suggest errs kind of                                 a timeline and lay the latest one is                                 fuzzy suggester so that gives you all of                                 the goodies it's the all the stuff we                                 can do but you know these are kind of                                 limited to a                                 few use cases of suggestions like the                                 idea here is your suggestions are                                 phrases so you have this list of phrases                                 and maybe there are products or                                 something like that or maybe the                                 restaurants or maybe there are songs and                                 artists but there's other use cases for                                 suggest that we don't do well and so one                                 idea is that you know this called infix                                 suggestions and that's where the order                                 of the words doesn't necessarily matter                                 right so we want to correct someone if                                 they put the words out of order so it's                                 kind of like a fuzzy correction too but                                 this is a different there's different                                 approaches for this there's actually a                                 jury issue and we've seen you can search                                 for it and there's two patches already                                 with two different algorithms for it so                                 I think this will land in lucene pretty                                 soon and then we have what we call                                 predictive suggestions so this is more                                 sort of like Google so if you have full                                 text search where you you know you have                                 a lot of users issuing queries that have                                 never been issued before you have this                                 long tail then how can you do that how                                 can you suggest something that's never                                 been searched before well the idea is                                 that not trying to predict the whole                                 suggestion you're not trying to complete                                 their entire search box you're just                                 going to try to complete the next word                                 and then they're going to keep typing                                 and you complete the next word after                                 that so something like this can only                                 work can work on like pairs of words so                                 given the previous word i'm just going                                 to guess and predict the next one                                 they're going to type and given that you                                 can suggest things that no one has ever                                 searched before but you can also suggest                                 things that make no sense at all and                                 maybe don't return any good results so                                 that's the downside some recommendations                                 if you start really working on this the                                 maybe one of the best recommendations                                 are the most important recommendations I                                 think is that renders in a different                                 piece of infrastructure you will be                                 hitting this service is much more                                 traffic as your search and you will get                                 I'll also take off traffic of research                                 of your search engine but the request                                 patterns are different if you you can                                 easily think of this as it's it's the                                 it's the it's the number of course the                                 second your search engine gets times the                                 average string length right the average                                 squealing if your average query                                 languages like                                                        get                                                                search engine roughly if you plan like                                 this then it should work quite fine I                                 say I suggest to use some something that                                 it's non blocking                                 we went driven web server or something                                 like this for that this should actually                                 this should probably give you a really                                 good infrastructure here in West time in                                 your weights it's this is really really                                 important it's not like you like a                                 search engine will you just trash you                                 data and you do a search and it's doing                                 reasonably well you really need to think                                 about what makes one query what makes                                 one string a better suggestion then                                 another force forgiven prefix like when                                 you think of restaurants you probably                                 want to use ratings right or some other                                 factors that you want to put in there                                 all right how popular is is a certain                                 string you can use click logs but it's                                 it's a it's important that you think                                 about this before you doing this pruning                                 the data you probably have a lot of                                 strings that will never be searched for                                 right if let's say you have a rating for                                 restaurants would wear well like the                                 restaurants with the rating                                            like to have a hundred thousand clicks                                 but that never got a good rating you                                 probably don't need to suggest them at                                 all so you can trust this it helps you                                 do reduce bill times reduce the size of                                 the FST it it helps you get better                                 better better suggestions at the end of                                 the day detecting is very                                 important this is something that I                                 personally figured out that there's                                 super super important you know imagine                                 somebody types HTTP and you're                                 suggesting the hottest porn website this                                 is probably not good because you're                                 dealing with user input like somebody                                 types in something in a bot in a forum                                 and safe sit in his profile and you want                                 to suggest on the profile there's always                                 trolls so you want to detect this this                                 is this is something that comes out                                 immediately it's not like that you need                                 to enter the entire relevant curry like                                 the characters enough right to get                                 something out this is also why waiting                                 is very important um yep does the                                 question how do you detect so                                 there's a couple of techniques this what                                 what what I've been using in production                                 is classifying algorithms like you you                                 tag things that is typically                                 in as spammy and then pre-filter strings                                 at a time this is this is                                 domain-specific but machine learning can                                 help here is you can do easy things                                 regular expressions that match a URL for                                 instance you know something if some user                                 name start with HTTP that I'm calling                                 double slash it's probably not a good                                 user name you want to filter these kind                                 of things yeah this is a hard thing to                                 do certainly not easy I mean like all                                 the pruning the data and the wades is                                 not an easy task but it's it's important                                 that you think about it at a time and                                 simply simplify your query analyzer set                                 before because it could cause very long                                 otama Tarbell times yep questions                                 you
YouTube URL: https://www.youtube.com/watch?v=XrssyUPQcG4


