Title: Tzu-Li (Gordon) Tai – Stateful Functions 3.0: Towards a Cross-Platform Stateful Serverless Stack
Publication date: 2021-07-01
Playlist: Berlin Buzzwords 2021 #bbuzz
Description: 
	Stateful Functions (StateFun), a project developed under the umbrella of Apache Flink, provides consistent messaging and distributed state management for stateful serverless applications. It does so in a vendor, platform and language agnostic manner - applications are composed of inter-messaging, polyglot functions that can be deployed on a mixture of your preferred FaaS platforms, as a Spring Boot application on Kubernetes, or really any deployment method typically used in modern cloud-native architectures.

In this session, you will learn about the core concepts behind the project and the abstractions that developers would work with, all up to date to the latest upcoming 3.0 release. For new users, the content of this talk will be a perfect place to get started with StateFun. For existing users, this will be a great opportunity to catch up with the latest advancements in the project, including improved ergonomics around zero-downtime upgrade capabilities of StateFun applications, type system for messages and function state, as well as an extended array of new language SDKs.

Speaker:
Tzu-Li (Gordon) Tai – https://2021.berlinbuzzwords.de/member/tzu-li-gordon-tai

More: https://2021.berlinbuzzwords.de/session/stateful-functions-30-towards-cross-platform-stateful-serverless-stack
Captions: 
	                              welcome                               to this talk um about stifle functions                               um                               this is as fabian already mentioned this                               is                               a sub project under the apache flink                               umbrella                               it's heading more or less in a new                               direction for                                what stream processing can be used for                                beyond data streaming analytics                                so we just released the                                           version of stateful functions with some                                major changes                                but this talk will be more or less a                                introductory talk for                                new users in general to give you an idea                                of what exactly still for functions is                                and because of we have around                                           or                                                 so we wouldn't be able to go into too                                much into detail but                                the major takeaways would be you would                                know what a simple function                                application looks like and how you can                                maybe start                                with trying out po singing poc                                with stateful functions um you can just                                call me gordon                                um i'm currently a flink pmc member in                                the                                apache fling community and for the past                                few years i've been working on                                various areas in the flink project                                including ecosystem connectors the type                                sterilization stack                                upgradability of stateful streaming                                applications and most importantly                                um in the recent one or two years or so                                working on the staff of functions                                project exclusively                                okay um right                                so the agenda for today um we'll just be                                covering                                covering three major topics first of all                                is what exactly is                                stateful functions and the big idea                                behind it                                stuff functions is actually targeted                                towards more general application                                developers                                but this being the stock being in stream                                track                                it actually has some relevance with                                stream processing because                                we are borrowing some big ideas from                                stream processing                                into the application development space                                second of all we'll give we'll take a                                quick                                brief overview of what code you would                                write with a stateful function                                application                                and how you would maybe deploy it for                                quick examples                                and last of all we can take a quick                                overview                                of what you might be able to expect in                                some upcoming major versions let's say                                                                          but don't uh but it would be an                                estimation because this would all be                                based on                                what exactly some user feedback is                                asking for                                in the patch of link mailing lists for                                for stateful functions                                okay so let's start with what exactly is                                stateful functions                                if you've read our documentation before                                there is one very simple sentence to put                                it                                it is a stack consisting of various                                language sdks                                and a runtime for user developers                                for users to develop to more easily                                develop                                distributed stateful applications and                                also                                more easily operate these distributed                                stateful applications                                but what exactly does that mean um i                                think                                this would be most easiest to to explain                                by actually going through an overview of                                the architecture of what a stateful                                function application actually looks like                                so what is set for the functions say for                                functions well                                 right off the bat you would build state                                 fund                                 applications using functions now these                                 functions are essentially a small piece                                 of logic                                 that represents entities within your                                 application                                 now to to motivate this let's um                                 the previous talk actually use a similar                                 uh example                                 so i think this is a good follow-up so                                 let's say                                 let's imagine you have a shopping cart                                 application right and what entities                                 would be for in this application you                                 would have user cards                                 you would have an inventory function and                                 you might also have                                 a fraud detection service in charge of                                 detecting any fraudulent activities                                 payment activities from from some user                                 from some specific user                                 right and let's say that this                                 application                                 sits behind some front-end web ui                                 to actually drive these the shopping                                 cart                                 um back end now these                                 individual functions it would be                                 implemented with various language as the                                 case                                 now save a function provides                                 officially supports two sdks one is java                                 and one is python and these would be                                 running behind standalone http services                                 now i'll go through the code some code                                 snippets                                 in a sec to actually show you what that                                 exactly means how to expose these                                 functions                                 through an actual http server but for                                 now                                 you just need to picture that these are                                 your separate processes                                 exposed exposing their functions and for                                 function logic                                 behind a http service endpoint that's                                 all you need to know for the time being                                 okay now to                                 actually express your logic for your                                 shopping cart application                                 what you would do is actually define                                 messages                                 that are being passed from the outside                                 world which is let's say our web                                 front-end web ui into this application                                 and also                                 in between functions in between these                                 entities of our application                                 so let's picture that you have a web ui                                 and                                 the user the user clicks                                 i want to add a specific item to let's                                 say                                 joe's user card okay joe does this                                 he wants to add a pair of socks to to                                 his card                                 this event being sent to the user card                                 function                                 it would um resolve into                                 several follow-up functions being sent                                 from the user card to                                 follow-up messages sorry from usercard                                 to let's say the inventory function                                 so let's say the usercard function of                                 joe now sends                                 a message to inventory function sucks                                 but i want to reserve some amount of                                 songs                                 okay now the inventory function might do                                 some things like it checks its                                 state do i actually have enough quantity                                 uh to to fulfill this reservation                                 if i do i acknowledge this reservation                                 send a message back to user joe                                 and say okay you can go ahead and add                                 this to your user card                                 okay and let's imagine now that the web                                 ui has a follow-up click event                                 to say proceed to checkout                                 this is sent to the user card function                                 which in turn also sends an event a                                 checkout event maybe                                 to a fraud detection service                                 to handle this specific checkout which                                 might then                                 result in this checkout                                 succeeds or based on some user history                                 activity                                 for user joe this this payment                                 is is not allowed so this is just a very                                 oversimplified                                 idea of what entities mean in in your                                 application                                 and how logic is is implemented via                                 message parsing                                 message passing okay now                                 one thing we can already mention um with                                 this                                 we would even be more tangible once we                                 see uh what the code looks like is that                                 messaging between functions is                                 completely transparent                                 now what that means is we don't for                                 example use the card                                 function sending a message to the                                 inventory function we don't need to know                                 the physical                                 address of the inventory function where                                 it is actually deployed                                 we just need to know the logical address                                 of                                 where we want our messages to be sent to                                 so                                 application developers of let's have a                                 user card function you just need to know                                 the logical address which is consists of                                 two information                                 one is the type of a function the second                                 is the id of the instance of that                                 function                                 it wants to invoke okay so in this                                 example                                 one logical address would be inventory                                 socks                                 and stocks being the id and inventory                                 being the type of function                                 that is a logical address and that is                                 all you need to know in order to send                                 a message to another function okay so                                 every over routing of the messages is                                 completely transparent                                 in user code space                                 now the next uh which you might have                                 already observed is that this whole                                 logic                                 is it is stateful right for computation                                 is stateful                                 for example the user card the state is                                 obviously                                 what items are already reserved in a                                 user's cart                                 and for the inventory function the state                                 would be                                 how many um socks how many how many of                                 each inventory do i have                                 for each uh do i have left right i have                                 a fraud detection function                                 for state it could be the history                                 of user activity okay so this                                 is the state of this application now                                 this is where things gets interesting                                 right                                 because we all know um that                                 handling distributed applications with                                 state                                 it gets much much more complex beyond                                 is as if if it were stateless right                                 now to actually explain how staple                                 functions handles this for the user so                                 that is completely transparent                                 and the user does not need to worry                                 about it the application developer does                                 not need to worry about it                                 i want to slightly branch out a bit                                 into this slide here so let's quickly go                                 through how                                 normally um nowadays for applications                                 how do they actually handle messaging                                 and consistency of state                                 so let's say you have an application                                 which this this diagram is just                                 a abstraction of what we're going                                 through with our shopping cart where                                 one application might be broken up into                                 several independent services                                 and each service would have their own                                 database                                 to to maintain the state of that                                 individual service                                 right and when one service gets invoked                                 it could do a few separate a few um                                 several things for one it could update                                 its own                                 state in the database second it might                                 invoke                                 another service to receive some                                 information                                 and invoking that other service it might                                 in turn                                 also let that service update its own                                 state                                 okay so it's pretty straightforward and                                 this is nice because                                 in the computer what happens in this                                 architecture is that in the                                 computer it doesn't contain any state                                 state is                                 all kept in the database layer                                 but of course we know that in reality                                 it's never just that simple                                 it gets much more complex when you start                                 considering                                 what happens in the case of some failure                                 right                                 let's say the message invocation from                                 service                                                actually fails now what exactly do the                                 application tier                                 needs to consider now for example                                 application                                   it needs to consider should i re                                 should i read send a send a nervous                                 retry request to application                                    if i do that does application                                            handle                                 this duplicate invocations                                 item potent and this is all concerns                                 that needs to be considered                                 that makes this scenario more complex                                 than we really wanted to be right                                 now this is the point where safer                                 functions                                 is actually a technique that                                 we've been using in stream processing                                 for several years                                 up to now already which is bundling                                 handling messaging and state updates                                 coherently within a single system                                 okay so that's the basic idea um so you                                 can picture this                                 let's say we hand over message not in                                 the application tier                                 but actually and let me actually see if                                 i can bring out my laser pointer                                 so we don't have we don't handle the                                 messaging in the computer but we handle                                 it in the storage tier                                 now what that means is um abstraction                                 wise                                 what that means is let's say one                                 database handles the input event                                 it knows that this input event should be                                 routed to                                 some service computer compute process                                 now with this routing of that input                                 message to that service                                 it also carries state that is relevant                                 for that specific input event okay now                                 the computer                                 receives the message and the state that                                 goes with it                                 it does a few things it has some side                                 effects these side effects                                 more concretely concretely speaking it                                 would be updating maybe updating the                                 state and also                                 sending also some um extra outgoing                                 messages                                 or invoking other other applications                                 okay                                 all of the side effect is encoded                                 embodied                                 in the response of this computer sent                                 back to the database layer                                 and the database layer handles this                                 outgoing messages and state updates of                                 this service atomically                                 it sends it to the other database uh for                                 service two to be handled and let's say                                 now something                                 happens in between an error also still                                 occurs right                                 if that occurs everything is rolled back                                 to a consistent point in time                                 before and we re-invoke from that                                 consistent point of time                                 re-invoke each individual service okay                                 now because each invocation                                 from the database to the service layer                                 is now encapsulated                                 encapsulated meaning that the recast                                 contains everything                                 the computation needs and response                                 contains oversight effects                                 this retry is effectively idempotent                                 so this is the big idea might sound very                                 complicated but this is all handled by                                 safer functions                                 so that the computer does not need to                                 worry about a failures at                                 all in the application code and this                                 exactly is the approach that circle                                 functions is taking with what                                 distributed stable application                                 architecture should look like so apart                                 from the separate                                 function processes we also have now                                 a state fund cluster and this system                                 cluster is in charge of messaging                                 and state handling okay and because                                 we're borrowing a lot of techniques from                                 stream processing                                 the runtime of safer functions is built                                 exactly on top of apache flink                                 and as i mentioned or messages sent to                                 and from functions                                 as well as functions they can use a                                 routed throughput cluster using the                                 simple http request reply protocol                                 now this protocol makes sure that the                                 computer these functions                                 still remain stateless or be able to do                                 stateless                                 stateful logic okay now                                 if you come from flink you would also                                 know that uh with stream processing                                 handle these interactions between                                 services as a data flow                                 we we no longer need a database to                                 actually provide this consistency                                 and durability what therefore function                                 actually does is that periodically                                 and asynchronously it snapshots                                 overstayed across                                 all the functions consistently to mass                                 storage let's say aws                                 as free okay so this is done                                 periodically now                                 what is really really cool here is that                                 out of box we have messaging and state                                 consistency                                 as if all messages are processed exactly                                 once by all services                                 as if there were no failures and there                                 is no database intervening in this                                 architecture                                 so this is pretty nice now for the                                 remaining                                 uh oh sorry one last thing is that uh we                                 also mentioned that the invocation                                 itself this protocol                                 makes the computer remain stateless                                 right operation-wise it is stateless                                 so operation is very flexible function                                 deployments are stateless processes                                 so it is still straightforward to deploy                                 and elastically scale them                                 on any modern cloud native                                 infrastructure so kubernetes                                 api gateways or on some functional                                 service                                 popular functionality service let's say                                 um                                 aws lumber okay and it's super easy to                                 do rolling upgrades of these individual                                 functions                                 and also adding new functions to the                                 application as we have a new service                                 that needs to participate in the logic                                 and existing functions need to start                                 sending messages to that new function                                 all this can be done without any                                 downtime with the state phone cluster                                 which is super nice okay so you still                                 retain the benefits of                                 what a serve what a stateless                                 application look like                                 but with the safe and cluster in place                                 now                                 actually having stateful logic is much                                 more easier to                                 to maintain so for the remaining                                 um five minutes or so i want to quickly                                 skim through                                 what code function code would look like                                 and what you would need to do to                                 actually deploy your application                                 so again an overview as a developer                                 you would write several functions and                                 you would also                                 run the statement cluster to help manage                                 your messaging and sit between all of                                 these functions                                 so one thing you would do is develop                                 functions using a language sdk                                 okay so without going too much into                                 detail                                 you can see here that this is the java                                 sdk but                                 python sdk side would be almost                                 identical to                                 to this in terms of concepts and                                 syntax wise it also looks pretty similar                                 so                                 you would receive a message and you                                 would see whether or not it is a message                                 it's let's say we're looking at the                                 inventory function now and the inventory                                 function from our                                 data flow that we just described is it                                 expecting reserve messages                                 if it isn't then something must have                                 been wrong okay so referral basically                                 will say the exception                                 otherwise it should be a reserve if it                                 is a reserve                                 we access our state now from the                                 function code                                 user space it would be as if you would                                 actually be working with a storage                                 to process to to manipulate and store                                 your state but of course we know that                                 this storage                                 actually is on the staple function site                                 nothing is readily cached or maintained                                 as state in the computer of the function                                 side okay                                 so you would access storage now here is                                 called address scope storage                                 meaning that let's say this invocation                                 is actually for                                 inventory socks which is the id socks                                 what you would see in the storage is                                 specifically for the infantry stocks                                 so you would see okay i still have x                                 number of stocks inventory i do a check                                 of the stock and reserve                                 and maybe also update the storage                                 that i have left in this in this for                                 stocks                                 and after this stateful logic you would                                 do                                 um you want to send back a message to                                 the caller which is the user function                                 which which send out this reservation                                 say okay                                 um this is the acknowledgement of your                                 reserve                                 um go ahead right now here i'm                                 simplifying things                                 uh the address the destination address                                 of this message                                 is the caller of this co of this of this                                 implication which would be that user                                 function right                                 but you could you could also do um                                 address this directly using logical                                 addresses to                                 let's say another new function just like                                 i said using a function type and also                                 the id                                 of that function instance you're trying                                 to invoke okay                                 now last of all after you've implemented                                 the stateful function                                 um you would you would want to expose                                 this function via some http service                                 right                                 so it's also pretty simple um                                 for each function that you want to                                 participate in this specific service                                 you would do inventory you would you                                 would define a stable function                                 spec specs defines a few things                                 including                                 what state participates for this                                 specific function what i what said i                                 want to be declared                                 and also how to                                 create new instances of this of this                                 inventory function                                 okay you will register the spec with a                                 save for functions registry                                 which in turn provides you with a                                 request reply handler now this handler                                 is                                 where the request reply protocol which i                                 mentioned before                                 is actually implemented okay you could                                 you just need to expose this handler                                 with                                 an http server start the server and now                                 you have a function                                 that is invokable from cellphone                                 function the save a function cluster                                 now the next step obviously would be to                                 actually make this visible                                 in the cellphone cluster right and the                                 way you would do that                                 is compose a module specification yaml                                 file                                 um to a specific                                 specification yammer file to define the                                 service endpoints                                 of the participating functions okay so                                 that's the second step                                 now this is just a example of what that                                 yaml file might look like                                 you define endpoints and one endpoint                                 would be this thing                                 so you would say all functions oh by the                                 way something that i might have not                                 been clear about clear about before is                                 that all functions                                 are identified by a namespace and a name                                 so for example                                 this infantry function here it is                                 identified by the namespace com.my.org                                 and then the name of function is called                                 inventory okay so it has namespace                                 and a name now the way you would define                                 this                                 in the yaml spec is so all functions                                 under this specific namespace                                 should go to this url with a templated                                 format so this actually works quite nice                                 with                                 some um for example nginx or let's say                                 um aws api gateway where you can now                                 dynamically add functions under a given                                 namespace                                 if you actually still need to add new                                 name spaces                                 to your application you still need to                                 restart                                 your save for function cluster because                                 this is where this yaml                                 would need to be provided it needs                                 that's                                 it needs to be provided to the safer                                 function cluster                                 but under um non-changing constant                                 namespaces                                 you can just add functions into your                                 application as you                                 as you wish okay so this all is always                                 dynamic without any downtime on the save                                 for function cluster                                 and that best match is basically it                                 there is some more details                                 on also how to define ingresses and                                 egresses for your functions                                 but this is the majority of what the                                 application                                 developer for stateful functions um                                 would need to                                 develop functions and then configure the                                 statement cluster                                 to be able to connect to these function                                 endpoints                                 so finally uh just very quickly let's go                                 through a future                                 roadmap um right now                                 uh one thing that i find most important                                 is actually providing ideals                                 or interface to finish languages for                                 functions                                 right now as you can see it's based on                                 just raw message passing                                 from functions to other functions it                                 would be nice if we actually have some                                 ideas in place                                 to provide a more easily understandable                                 abstraction                                 of how functions or services interact                                 with each other                                 right you can think of this more or less                                 somewhat similar to what grpc provides                                 like you can just write an idl with text                                 and that automatically generates uh                                 the server code for you this is somewhat                                 um                                 what we're thinking about in terms of                                 making it easier to develop                                 simple function applications and also                                 more higher level messaging primitives                                 this goes hand in hand with the idls                                 right                                 now it is just one asynchronous fire and                                 forget messages between functions but                                 i'm thinking about actually expanding                                 that a bit more and                                 also very importantly is to introduce                                 more language sdks into                                 the what we currently provide um we                                 already have                                 already have a golang sdk on the                                 pipeline um to be contributed                                 and may be available in the upcoming                                 release                                 okay um i oh one last thing uh here are                                 some                                 links i'm pretty sure that the this uh                                 slides would be available to download                                 after uh the conference so here are some                                 links for you to check out if you want                                 to further understand what                                 read about therefore functions i would                                 personally                                 recommend starting with the tutorials                                 examples at the flink statement                                 playground repository                                 there's a lot of examples there for                                 patterns of how you would design staple                                 function applications                                 and also for example how you would                                 deploy on let's say aws under or                                 kubernetes                                 okay i think that covers up this talk                                 and thank you i don't think we have um                                 time for questions but um                                 i'm pretty excited to hear from you in                                 the breakout session                                 currently there are also not no                                 questions from the audience yet                                 but let's give them a little bit of time                                 um so                                 what kind of use cases is this um can                                 you talk a little bit more about the use                                 cases that                                 this uh framework is designed for are                                 they                                 are you aware of any users or projects                                 that have that that are                                 being built with the stapler functions                                 yeah one thing i can                                 confidently say about is it is a natural                                 match for um that's a digital twin                                 pattern type of applications um in this                                 in the shopping cart scenario that is                                 one example of what a digital twin                                 means right you would have a entity                                 which is a function a user or inventory                                 or let's say                                 it's a ride sharing application you                                 would have a ride coordinator you had a                                 driver tracking the locations all of                                 this                                 it's a pretty natural programming match                                 model wise                                 for central function applications and                                 it's also what we're seeing                                 quite a lot for our first few users                                 you
YouTube URL: https://www.youtube.com/watch?v=vw0q4Sm4XvI


