Title: Elias Nema – Building Data-Intensive Teams
Publication date: 2021-06-29
Playlist: Berlin Buzzwords 2021 #bbuzz
Description: 
	Nowadays, users expect your app to be not only fast and reliable but also smart. As a consequence, more and more teams are becoming data-intensive — relying on data to build their solutions. And it’s a common belief that putting models into production is one of the biggest bottlenecks in a journey of becoming more data-driven. While true, this step is only the beginning of the journey.

I believe that a much broader transformation is required in how we think about product development lifecycle as well as communication flows between business, engineering, and data. 
In this talk, I’ll show how we are building data-grounded solutions in the domain of search and recommendations and instilling an experimental culture in one of the biggest online marketplaces.

Speaker:
Elias Nema – https://2021.berlinbuzzwords.de/member/elias-nema

More: https://2021.berlinbuzzwords.de/session/building-data-intensive-teams
Captions: 
	                              good good evening                               have a good day everybody around the                               globe                               and uh yeah thank you very much for                               introducing me today i'm gonna                               be talking about data intensive teams uh                               whatever that means hopefully we'll also                               uh be able to understand it                               uh so basically i'm uh working at the                                olex group and leading search and                                recommendations there                                and alex group for those of you who                                don't know uh this is an online                                marketplace that is present in                                more than                                                                                                       most active users uh the biggest company                                they                                uh that you don't know they say on the                                internet                                so uh but yeah recently actually you                                might have heard of us                                because our parent company process have                                bought stack overflow                                and decreasing new so maybe we will also                                be                                more visible right now but today                                it's uh not really not really about                                business but about data                                and uh to start talking about data                                intensive teams                                i'd like to start by by                                first trying to understand the term data                                intensive and                                it was actually coined by uh martin                                klepman like                                five six months already seven years ago                                uh when he wrote his                                amazing book designing data intensive                                applications                                uh highly recommended but i mean of                                course uh                                many of you have uh probably already                                heard about it and                                doesn't need introduction uh so                                he writes that an application is data                                intensive if                                data is its primary challenge the                                quality                                the complexity the speed so like                                basically everything                                around the data is a challenge that                                means that it's a data intensive                                application                                and uh he in                                in his book he basically talks quite a                                lot about the history                                of uh how we ended up with data                                intensive applications                                uh from the technological point of view                                like quite quite a fascinating read but                                today like zooming out a little bit and                                today                                really trying to understand and to debug                                these                                teams that are working on this data                                intensive application so                                if uh an application is intensive if if                                it deals with data that means that                                teams that are building this and running                                this data intensive application                                uh and managing data products are the                                data intensive teams                                and so how do we cook these teams how do                                we                                deal with these teams how do we                                do like the best practices dealing with                                this                                data intensive applications in the teams                                to learn how to do it                                we actually need to also go a little bit                                back and to see                                the history of of the development of                                basically applications and data                                applications                                and going back                                like                                                                bring you to                                two seminal papers uh on the left                                in the left corner uh you see the unix                                time sharing system                                which is like a seminal paper that                                introduced the unix                                system in                                     on the right you see system r which                                actually                                introduced the first relational database                                that has                                influenced almost all the existing                                 relational and then non-relational also                                 databases                                 and introduced so many concepts that                                 were reused                                 later on and uh it was introduced in                                                                                                  it's actually like very very similar so                                 basically                                 both of them were information management                                 systems                                 uh and they have like different                                 approaches though so for example                                 operation operating systems viewed                                 its role as presenting hardware to                                 computer programmers while actually                                 database management system dbms                                 got its role as managing data for                                 application programmers so                                 taking a bit of a higher level of                                 abstraction and then                                 dealing with all the complexity of the                                 data and hiding it behind so that                                 you can do the select star and then it                                 will return                                 the data to you while you will not need                                 to manage pointers and and                                 just search uh for the data in different                                 places                                 and you can you can say that uh the unix                                 approach was more of a                                 toolbox approach so basically giving the                                 pay a                                 box of tools to developers so that they                                 can                                 build things themselves while actually                                 system r approach was more of a                                 closed box approach uh where                                 you you put something in a box and then                                 you query to get the                                 result without uh like doing                                 too too much complexity on top of that                                 so and                                 and this world's coexisted really really                                 well                                 in this state however there was a kind                                 of a                                 dwelling wall between them uh and and                                 these communities have developed                                 maybe unnecessarily uh far from each                                 other                                 uh but yeah it all coexisted well until                                 the internet until the internet happened                                 this is a mosaic browser the beautiful                                 uh back then uh browser now now looks                                 retro of course                                 uh still it was the first bird                                 uh that that kind of trained people to                                 desire more                                 from the internet to desire uh images to                                 desire                                 some fancy websites these are links                                 and and then this all of course was fine                                 back in the mosaic era but then internet                                 started spread                                 uh and like a spread around the globe                                 and finally                                 the the poor box wasn't able to handle                                 this anymore                                 so basically uh what was happening in                                                                               that actually this boxes like                                 as always closed box cannot be easily                                 extended                                 right so but but the good part of that                                 is that actually at the first time these                                 two communities                                 of application developers and database                                 developers were starting to come                                 together and so basically during these                                 times                                 people starting using tools to actually                                 decompose the box                                 and introduce many many uh                                 standardized and open tools it it                                 brought the beginning of whole                                 no sequel but then which converts to                                 new sql like there is something really                                 really magical about the sql language uh                                 so that                                 all the new nosql databases are                                 implementing sql interfaces right now                                 but                                 yeah this is a different conversation                                 but it brought like this                                 this really pieces of this box                                 that we're doing one particular thing uh                                 for example                                 database internal transactional log was                                 was brought into kafka                                 and and this is uh you can use with with                                 all the many data sources right now                                 and uh one of the benefits there was                                 also                                 uh open source in the file format for                                 example avro parking                                 these are right now industry standards                                 as opposed to                                 uh like this closed systems of like                                 oracle                                 sql server that had their own                                 proprietary                                 data standards it wasn't easy to get                                 data in and out                                 so basically this is uh what happened                                 from the technological perspective and                                 i'm super                                 pleased that that happened and and this                                 kind of                                 merge of these two paradigms happened                                 and uh application developers and                                 database developers started working                                 closer together it didn't happen like uh                                 uh                                 in a fairy tale of course there was lots                                 of hey we're implementing uh                                 the flat tire approach and then all the                                 old systems are uses but then at the end                                 what we came up with                                 is is really great great tool of                                 technologies but what was happening                                 on the consumer side which is uh                                 also also super interesting you can see                                 the netflix website for example                                 uh                                                                   right now on the right and and you can                                 see that                                 actually well there were images before                                 now you also see images                                 uh but it's definitely                                 couldn't be more different but uh                                 like conceptually not that                                 unless you start looking into details                                 right                                 so you can see that all the styles that                                 you see here                                 are actually ranked for you then you see                                 the ranking by location by your location                                 where you are                                 in right now and then you also have this                                 personalized lanes                                 and then in each of the lanes you even                                 have                                 personalized images from the movie so                                 that                                 netflix find the best match of the image                                 for you                                 for each of the movies this is this is                                 insane so                                 uh where i'm heading here is that                                 actually                                 or every lane here all the website here                                 is                                 is literally a data product like every                                 piece of their website                                 is a data product and somehow you need                                 to uh do it and you need to display it                                 and to show to the user in a proper                                 order uh                                 another example is amazon amazon                                    years ago on amazon                                                                                                      is very different and uh you can see                                 actually                                 on the left uh that i don't know if they                                 has                                 much less information                                 like it has much bigger images much more                                 visuals                                 well you can say this is it's more                                 fashionable or something                                 but then on the other hand for example                                 you don't even they don't even show your                                 catalog                                 uh like a categories that they have                                 because they now rely much more on                                 search                                 and this is the thing so uh like                                 expectations                                 user expectations if                                              it was expected for you to to go to the                                 website and then to                                 to search for something to dig deeper                                 into                                 into the information right now it's it's                                 not like that                                 right now it's expected uh from you to                                 to go to the website and see something                                 that is relevant to you                                 so you expect the site or the                                 application the software product                                 not to be only functional but actually                                 to be very smart about                                 what to show you what to display and                                 imagine that                                 netflix wouldn't show me uh like                                 recommendations for myself but                                 would show like i don't know uh their                                 catalog in alphabetical order                                 so this would be a little bit uh crazy                                 same for amazon for example you enter                                 and then you see like hey                                 all the all the products also basically                                 like yeah this this doesn't make sense                                 it doesn't scale but then                                 uh this this is what happened during                                 this year so information abundance                                 and this is what we expect right now is                                 users so that                                 applications are actually smart and how                                 do we build these smart applications                                 and uh yeah like usually generally                                 there are two things that we need to                                 consider to kind of pain point here is                                 that                                 usually they require larger development                                 investment which is obvious because                                 i mean building data application itself                                 is more                                 uh costly just because you need to                                 manage data you need to manage state                                 uh it's costlier to build stateful                                 obligations rather than stateless right                                 uh but then the second one is probably                                 like even harder                                 to tackle because uh it brings                                 uncertainty                                 on this return on investment and then uh                                 let me                                 let me demonstrate this uh so for                                 for the costs for example this is this                                 is uh                                 the data from the facebook's paper                                 where they say that actually                                    of the ai inference cycles goes for                                 recommendations                                 so one single application of data                                 recommendations                                 is taking                                                        which is like uh just you can think                                 about this as cost for their                                 ai investment goes for recommendations                                 which is                                 quite crazy it's uh it's a lot of money                                 but then uncertainty of results is even                                 trickier                                 and i have a very very interesting use                                 case from bing                                 here um and for example                                 on the left uh you can see                                 the before and after of the bing search                                 for example you search for flowers and                                 then                                  is making money of course from                                 showing the ads                                 to you and then you have some ads that                                 are promoted on top                                 and then you see the description uh                                 on the first line uh under                                 the link and then in the experiment they                                 actually                                 decided to take this first line of                                 description and put it into the link                                 okay so basically uh it's really hard to                                 evaluate an idea like that it thinks                                 like                                 uh it might bring some positive results                                 it might not like                                 you never know by the way this example                                 is coming from amazing book uh                                 trustworthiness line                                 controlled experiments there is a link                                 there highly recommended                                 but so just guess for yourself uh                                 because                                 we're all uh online right now just guess                                 for yourself like                                 how how much do you think this idea will                                 bring uh with                                 such a small front-end change and i will                                 not                                 keep you for long this idea alone                                 brought                                 more than                                                              to bing uh which is crazy like it's                                 it's insane amount of money and of                                 course like bing is a huge company                                 and uh earns a lot of money but                                 but the thing is that it probably took a                                 couple of days of development time                                 to develop such an idea and then the                                 return on this investment                                 was just staggering and                                 and if you think like that uh                                 this is this is the idea that took two                                 days to implement and and brought huge                                 result and then                                 the uh the big uh for example                                 recommendation systems that are deployed                                 on at scale                                 and require like machine learning                                 platform and so on so                                 so you don't want to go into any of the                                 extremes here you don't want to develop                                 only fancy                                 complicated systems that are built                                 for for ages or you also don't want to                                 do only the small                                 changes you want to go in both                                 directions                                 and if you if you go also on the                                 source of truth uh for many of us                                 uh which is twitter uh and you see like                                 many of the                                 much much more important figures in tech                                 are saying                                 the same thing that it's really scary to                                 spend                                 uh six to                                                                and then                                 uh building the wrong thing and then uh                                 steven sinovsky also says that uh the                                 dreaming goods to market is costly                                 but before now like we we didn't really                                 know how much of that cost was                                 trying to guess if it was the right                                 thing uh                                 to build because the change was                                 impossible and now                                 uh we are actually in a phase where                                 change is very much possible so                                 if you think about this typical                                 development flow of like really really                                 zoomed out development flow                                 it has ideas and it has implementations                                 right                                 uh so you start with an idea you                                 implement something                                 and then uh like it either works or not                                 and uh right now for for this modern                                 products for this modern                                 uh applications it really doesn't make                                 much sense because here success doesn't                                 depend                                 only on the code quality on the system                                 quality so basically                                 it your your success of your idea                                 doesn't depend                                 on the quality of the implementation                                 only as you have seen                                 uh in in the previous bing example it's                                 literally                                 small ideas can have huge impact and                                 then it also optimizes for the wrong                                 metrics that                                 user is actually being included into the                                 loop                                 very very late right now right now i                                 want you to pay attention because i'm                                 bringing two of my                                 friends here to solve this problem                                 basically i'm bringing as a chameleon                                 and an elephant as chameleon                                 will represent their volatile uh                                 idea space and then elephant will                                 represent of course                                 uh implementation phase uh we start with                                 this idea                                 and uh we we decompose basically the                                 idea into many steps                                 we start with the hypothesis uh because                                 it doesn't have certainty in it the idea                                 can be good can be bad implies judgment                                 you don't want to be an author                                 of a bad idea right but uh also there                                 are like different                                 uh ways to call it a user story which                                 which presumes that we know our users                                 and i highly recommend the twitter                                 account                                 about user stories there is also a link                                 there                                 it has lots of fun parodies                                 on on user stories so cool                                 uh we we take the hypothesis and what do                                 we do with the hypothesis                                 we try to do the prototype of it                                 and the the kind of important thing here                                 is that we always build it as fast as                                 possible                                 and we decompose to the minimum effort                                 to test our assumptions my favorite                                 example                                 is a yandex navigator with kind of uh                                 analog of google maps                                 in in russia so you can see on the left                                 frozen literally has a metal rod to                                 which he put stickies                                 and then he put his collec in a car and                                 then he started driving like                                 hey and then whenever the time is right                                 he wants to test                                 if some pop-up in the application will                                 be useful for the user or not and of                                 course of course it's not                                 the same as building it into the code                                 and displaying it on in the app                                 for sure not but then to implement it                                 into the code it will take a couple of                                 months and then to release it                                 and then to uh like see the user                                 feedback it will take                                 at least like a three four months right                                 in here you can just                                 take it in in hours and this is this is                                 what we're aiming for                                 we are aiming for collecting the                                 feedback and and this example is also                                 great because                                 you're you're not only prototyping                                 you're also collecting the feedback from                                 the person                                 in real time by just driving with him                                 uh so and this brings us here to this                                 next stage                                 where we actually want to uh                                 go to the real world and collect this                                 feedback so basically                                 we don't want to build a prototype and                                 then to to productionize it no we want                                 to launch an experiment with it                                 it can be a b test but then it can be                                 also as you just                                 saw in the previous example uh just just                                 testing it with your colleagues with                                 your friends with your family                                 and the main ideas here is to avoid                                 costly mistakes right                                 uh like because you're not developing                                 something that is                                 not gonna fly from the very first test                                 uh right                                 and then finally we got to our elephant                                 where we can                                 go all in on the implementation once we                                 collected all the data that we have                                 before and uh                                 yeah like or actually we can go for                                 another hypothesis and                                 let me show you uh for example imagine                                 that prototype or experiment has shown                                 that                                 okay it's not enough uh return on the                                 investment uh or like                                 the prototype has shown that yeah the                                 idea doesn't actually make                                 much sense at all so we we just go and                                 adjust our hypothesis so we don't need                                 to                                 go full production uh and this is the                                 beauty of uh                                 of the system so that basically you can                                 short circuit                                 and you can see the potential savings                                 are                                 quite huge here and your time to value                                 is                                 maximized to that and actually it's even                                 more because                                 each of the following steps usually is                                 bigger                                 than the previous ones so i can                                 potentially save                                 even more and uh like this is uh you                                 know like                                 the silicon valley jargon of hey like a                                 yeah yeah or not an entrepreneur until                                 you failed and and this is taken                                 up to extreme there of course but then                                 there is something there right because                                 basically this lowers the variance of                                 the outcome                                 uh because you're converging to a                                 working solution faster you                                 like you see something is not working                                 you're not uh                                 insisting on that you're trying                                 different things and you're investing                                 into something that                                 is working so to recap chameleon                                 uh to make him green have a constant                                 flow hypothesis                                 minimize investment into your first                                 prototype collect                                 feedback from real users and only invest                                 into something that has proven                                 uh its initial potential so chameleon                                 is about moving fast right what's wrong                                 with                                 moving fast only right we can ask a                                 person who knows a thing or two                                 about moving fast and breaking things                                 and facebook's motto was actually more                                 fast and great things                                 but not many people know that a couple                                 of years ago it was actually changed                                 to move fast with stable infrastructure                                 and uh yeah if circa is not a                                 big of a figure for that for you i'm                                 considering going into the football                                 pitch and                                 let's let's learn uh something from                                 there uh                                 i want to refer one of my favorite                                 coaches                                 uh thomas tuchel uh and and if you don't                                 know                                 who he is let me just show you in a                                 couple of slides okay but                                 uh he's he's a famous football coach                                 and he just won uh the champions league                                 with chelsea                                 so uh but yeah but uh look here                                 so this is uh he's potentially the most                                 expensive player in the world he's a                                 great attacker                                 uh playing for uh psg and praying                                 playing for france                                 uh great footballer and this is thomas                                 tuchel so                                 a person who is not afraid to do things                                 like that to the most expensive                                 footballer                                 uh is really worth listening to at least                                 so the quote we provide                                 those attacking patterns and show them                                 on video                                 but we don't practice them much we                                 almost exclusively                                 concentrate on our defensive movements                                 in training                                 so again like this is at first when i                                 when i've heard that                                 read that it didn't make much sense to                                 me but then it                                 kind of really really because i                                 translated it into into                                 our work so basically                                 not to be afraid to experiment in attack                                 so                                 exploring our new opportunities like                                 going                                 full chameleon you need to have your                                 defense                                 solved so basically infrastructure knobs                                 needs to be stable and operational so                                 that you can go                                 and experiment and and of course                                 you still you still start with                                 experimenting like you still start with                                 something that makes sense                                 you still start with exploration right                                 um for example like if you imagine                                 uh or if you remember like this netflix                                 example                                 uh from the above where we we saw                                 the most popular movies in the location                                 where i am                                 so it doesn't require a                                 sophisticated machine learning model                                 from the beginning right                                 start with a sql query but                                 go through the full cycle meaning get                                 user feedback                                 uh and then like while you'll be                                 implementing this you'll learn                                 so many uh hacks that you have to do                                 you'll learn so many components that are                                 missing in your system                                 you learn so much about monitoring that                                 needs to be added and                                 and tracking and things like                                 uh infrastructure things like operations                                 you learn all of that                                 by just implementing a simple sql query                                 but getting the input and then putting                                 the output to the user and collecting                                 the feedback from                                 them you also know what's force                                 investment and what's not uh                                 and basically                                 when you are ready like when you have                                 something that is                                 running and you've built a couple of                                 applications like that                                 uh think                                           uh write your applications write your                                 system so that they can grow                                 a one uh basically                                 uh one                                 uh uh what like                                          that you can scale them so                                         magical empirical number                                 mentioned often in the industry and then                                 basically you want to build systems that                                 survive this one magnitude of growth                                 and then when you're it will take time                                 to build the system it will take time to                                 build this foundational layer                                 but then you don't need to stop                                 experimenting at the same time you can                                 continue                                 grasping this low-hanging fruits                                 experimenting with smaller things                                 and hopefully by the time that you                                 implement                                 your foundational layer you have already                                 seen                                 that you have from your experimentation                                 that will require                                 your foundational layer to grow even                                 more right                                 so and you already invest into another                                 order of magnitude of growth                                 and then again like this all will come                                 from                                 real requirements from real users that                                 you'll be serving                                 and you will not be building uh                                 something just because                                 facebook or or google has built it you                                 will not be building                                 feature stores you will not be building                                 machine learning platforms                                 you will if you will need and if you                                 will grow to that and hopefully you will                                 but you will not start with that you                                 will not start implementing the whole                                 system from the beginning not knowing if                                 it's good for                                 your users not somebody else's users but                                 your users                                 and hopefully uh with this one you can                                 scale and scale and go                                 to the infinity and beyond and you can                                 start                                 reinventing yourself you can                                 pivot when the time comes and you can                                 learn to experiment and                                 cross the easy leaves                                 and also the like build the great                                 engineering                                 systems so to recap the elephant                                 uh we have our infrastructure and                                 operations                                 as the most important things for the                                 innovation this is like a                                 counterintuitive thought as as an                                 example from thomas tuchel that                                 you think about defense if you want to                                 go to the attack                                 uh also build systems that survive at                                 least                                 an order of my negative growth because                                 if you basically build more                                 then you're wasting the investment                                 if you build less then you'll need to                                 rebuild                                 too often so that you don't want to do                                 that and then                                 build only for your needs and when those                                 need arise                                 from your experimentation from your                                 iterations on the platform from your                                 learnings                                 from your software and with this one                                 thank you very much i hope this tactics                                 can help you                                 uh to marry your chameleon and an                                 elephant                                 and uh let's keep the conversation you                                 can find me on twitter or                                 on linkedin or anywhere else thank you                                 thank you so much for that elias that                                 was very interesting                                 um i really like your approach of just                                 being experimental with these kinds of                                 changes that you want to bring about to                                 your solutions to                                 start the process of seeing what works                                 and what doesn't                                 for a company that doesn't have let's                                 say                                 some baseline measurements or doesn't                                 even know where to start                                 in terms of what to measure are there                                 any kind of                                 rules or best practices you might have                                 so let's say someone wants to start on                                 this journey but doesn't know how to                                 compare it as they start doing this type                                 of prototyping                                 do you have any kind of advice for how                                 to formulate what kind of things that                                 they should be looking for                                 as they start this process yeah that's                                 that's a great question and uh                                 i think that the most important thing is                                 not to                                 especially from the beginning not to                                 look into                                 like many other examples but actually                                 start from your                                 uh initial idea and from your                                 uh like desired point of where you want                                 to be                                 and then like build things for yourself                                 don't look at                                 the state of the art don't look at uh                                 what's being built in big corporations                                 like just just start for yourself                                 try to figure out things as you go and                                 then like                                 but but yeah again like don't don't uh                                 do it uh for for developers for your own                                 like put put it out for the user and                                 collect their feedback and                                 and from their own like incorporating                                 this one uh                                 you can go forward like you can yeah                                 you can continuously iterate all day                                 long but as long as you                                 you you're not bringing the users then                                 your like                                 iterations are worthless basically so                                 like bring the user                                 uh learn from from the user uh make your                                 product better for your users because                                 yeah honestly like                                 you can have uh very very different                                 users with facebook with amazon with                                 everybody else and uh hopefully you do                                 that's a great point um i have a                                 follow-up question to that                                 which is um how do you go about                                 things that are hard to measure so                                 this is kind of a little off the path                                 here but                                 coming from developer relations that's                                 kind of the biggest problem we have                                 right is                                 how do you measure things that are                                 meaningful or impactful how do you                                 measure things that are hard to measure                                 and i was wondering if you had any type                                 of                                 advice that is in this realm because i'm                                 sure there's some things that as you're                                 prototyping you're like well how do we                                 you know accurately measure something                                 that is hard to measure                                 yeah i think this is this is a great                                 great question                                 as well because straight to the point                                 we as humans have a tendency of uh like                                 whenever we collect                                 their test results or any data                                 whatsoever                                 whenever the data is proven that we are                                 good we're like hey yeah this is great                                 whenever the data shows that something                                 is bad we're like no no we need to                                 investigate that this is like                                 this is a super common bias where we                                 actually underestimate the potential                                 like flows in our uh thinking so i think                                 that the most important                                 uh like in in this unmeasurable uh                                 metrics is is to constantly try to                                 challenge yourself                                 constantly trying to see hey is it                                 something                                 to prove myself or actually to make                                 something better for the users                                 to make something better for the                                 customer so really always asking this                                 question                                 and then not not stopping to ask this                                 like basically                                 collecting the feedback from the users                                 uh incorporating                                 their real feedback from uh like from                                 forums from the applications from the                                 internet uh just the fishing for this                                 feedback                                 not being uh not not trying to find the                                 good feedback and just stopping on that                                 you know                                 but actually trying to fish for all the                                 kind of diverse feedback from all the                                 kind of                                 diverse uh platforms and then yeah                                 wonderful i agree with that it's just                                 it's very difficult                                 when you apply these things to certain                                 industries and i completely agree with                                 you about the                                 the bias right there's even the others                                 where it's like throw away the data if                                 it doesn't agree with what you want it                                 to say                                 right yeah unfortunately                                 yeah let me just double check and then                                 also                                 yeah go ahead yeah sorry uh yeah so                                 basically it's like                                 whenever you have some data always uh                                 try to                                 try to yeah negate it like try to think                                 like what what might have                                 gone wrong when you when you were                                 collecting it not try to                                 sell it first that's a                                 that's also a really good point thanks                                 for that                                 um i think we'll have a few more minutes                                 if there's i know you had some really                                 good resources in                                 your slides are there any other pieces                                 of resources either books or websites                                 that                                 you may want to share if people are                                 interested in learning more                                 aside from the really good book                                 recommendations you've already shown                                 yeah i think that i i can share many but                                 related to this talk                                 like a two two books uh that i was                                 sharing there like trustworthy online                                 experiments                                 and uh data in this application so i                                 think these are like                                 very much related uh to to what i was                                 talking about so                                 i'll share like the presentation later                                 and there are links to these books there                                 you
YouTube URL: https://www.youtube.com/watch?v=yol9za6kqkk


