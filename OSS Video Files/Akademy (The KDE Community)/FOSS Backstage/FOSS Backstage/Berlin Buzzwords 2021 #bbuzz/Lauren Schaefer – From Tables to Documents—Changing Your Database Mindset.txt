Title: Lauren Schaefer – From Tables to Documents—Changing Your Database Mindset
Publication date: 2021-06-24
Playlist: Berlin Buzzwords 2021 #bbuzz
Description: 
	Did you grow up on relational databases? Are document-based databases a bit of a mystery to you? This is the session for you! We’ll compare terms and concepts, explain the benefits of document-based databases, and walk through the 3 key ways you need to change your mindset to successfully use document-based databases.

Speaker:
Lauren Schaefer – https://2021.berlinbuzzwords.de/member/lauren-schaefer

More: https://2021.berlinbuzzwords.de/session/tables-documents-changing-your-database-mindset
Captions: 
	                              welcome everyone                               i don't know about you but i've been                               eating a lot of comfort food                               and watching a lot of comfort tv lately                               my favorite comfort tv is the show parks                               and recreation                               one of the things that makes the show so                               amazing is the characters                               i want to introduce you to ron swanson                                this is ron he's an old school guy                                he's a bit set in his ways he likes his                                privacy                                and he likes to stay kind of off the                                grid                                now in season six episode                                       discovers                                yelp he loves the idea of being able to                                review places he's been                                however yelp is way too on the grid                                for ron so ron uses the internet to look                                up the physical addresses of where he                                wants to snail mail                                his reviews and then he pulls out his                                big old typewriter                                and he starts typing his reviews now                                ron writes some pretty great reviews                                here's one of my favorites                                dear frozen yogurt you are the celery of                                desserts                                be ice cream or be nothing zero stars                                now this is a pretty great review but i                                see three problems with this approach                                number one snail mail is way slower than                                posting the review to yelp                                where it will be instantly available                                number two                                the businesses he's reviewing may never                                open the review because they may just                                assume it's junk mail                                and number three no one else is going to                                benefit from the review                                i don't know about you but i live for                                these kinds of reviews online                                i love to see this sort of thing on                                amazon                                now ron was inspired by yelp and he saw                                the value in the technology                                but he didn't change his old school                                mindset in order to really get the value                                out of it                                and this is what we see sometimes as                                people move from tabular databases                                to document databases they see the value                                of document databases                                and are inspired by the technology but                                they bring with them their old mindsets                                so they don't get the full value of                                document databases                                now i don't want this to happen to you i                                want to see you be really successful                                as you work with document databases                                so before we dive in let me introduce                                myself my name is lauren shafer                                now i took a database course in college                                that was all about best practices for                                relational databases                                i began my career at ibm where i spent                                eight years as a software engineer                                for a lot of that time i used db                                 toward the end of my time there my team                                started getting flexibility in what                                database we wanted to use                                so i started trying out nosql databases                                to be honest with you i didn't really                                get the hype                                without a doubt nosql databases were                                easy to get started using                                but i brought with me my relational                                database mindset so i kept thinking                                about my data                                in rows and columns even though i wasn't                                using rows and columns anymore                                it worked but it wasn't great                                i joined mongodb about a year and a half                                ago and i've worked through the process                                of changing my mindset and how i think                                about storing data                                and i'm so happy i did because it's                                really easy to work with data                                in the apps that i build now so today                                i'm going to share with you what i've                                learned as i've gone on the journey                                of moving from tables to documents                                when i say tables i mean a tabular or                                relational database                                for example you might have experience                                using something like mysql                                or oracle we'll dive into what document                                databases are in just a few minutes                                 so if you're here i'm going to assume                                 one you have experience with relational                                 databases                                 and two you have minimal to no                                 experience with document databases                                 so today we're going to go on a mental                                 journey from tables to documents                                 i'm going to kick things off by mapping                                 the terms and concepts you're familiar                                 with                                 in tabular databases to similar terms                                 and concepts in document databases                                 then i'll talk about the four major                                 advantages of document databases                                 and finally we'll wrap up with the three                                 key ways you need to change your mindset                                 when you move from tables to documents                                 all right so let's jump in with terms                                 and concepts                                 let's talk about documents                                 no i'm not talking about word documents                                 i'm talking about json documents                                 json stands for javascript object                                 notation                                 if you if you've used any of the c                                 family of programming languages                                 such as c c sharp go                                 java javascript php or python                                 documents will probably feel pretty                                 comfortable to you                                 documents typically store information                                 about one object                                 as well as any information related to                                 that object                                 every document begins and ends with                                 curly braces                                 inside of those curly braces are field                                 value                                 pairs the great thing about documents is                                 they can be                                 incredibly rich values can be a variety                                 of types including strings numbers                                 arrays                                 dates timestamps or even objects                                 so you can have objects within a                                 document and you'll see what that looks                                 like in just a moment                                 now when people talk about document                                 databases they'll often use the term                                 non-relational but that doesn't mean                                 document databases                                 don't store relationships okay that was                                 a double negative stick with me                                 document databases store relationships                                 really well                                 it's just different than the way                                 relational databases do                                 so let's walk through an example of how                                 you would model the same data in a                                 relational                                 tabular database versus a document                                 database so let's say we need to store                                 information about a user named leslie                                 so let's begin with her contact                                 information in a relational database                                 we'll create a table named users                                 we can create columns for each piece of                                 contact information we need to store                                 so as you can see we've got columns for                                 first name last name                                 cell phone number and city to ensure we                                 have a unique way to identify each row                                 we'll include an id column                                 now let's store that same information in                                 a document                                 we can create a new document for leslie                                 where we'll add field value pairs for                                 each piece of contact information we                                 need to store                                 as you can see we have field value pairs                                 for first name                                 last name cell and city                                 we'll use underscore id to uniquely                                 identify each document                                 we'll store this document in a                                 collection named                                 users so now that we've stored leslie's                                 contact information                                 let's store the coordinates of her                                 current location                                 when using a relational database we'll                                 need to split the latitude and longitude                                 between                                 two columns document databases support                                 arrays so we can store the latitude and                                 longitude together                                 in a single field we'll call that field                                 location                                 we're successfully storing leslie's                                 contact information in                                 current location now let's store her                                 hobbies                                 when using a relational database we                                 could choose to add                                 more columns to the users table                                 however since a single user could have                                 many hobbies                                 meaning we need to represent a                                 one-to-many relationship                                 we're more likely to create a separate                                 table just for hobbies                                 each row in the table will contain                                 information about one hobby                                 for one user when we need to retrieve                                 lesley's hobbies we're going to join the                                 users table and our new hobbies table                                 together                                 since document databases support arrays                                 we can simply add a new field                                 named hobbies to our existing document                                 for leslie                                 the array can contain as many or as few                                 hobbies as we need                                 when we need to retrieve leslie's                                 hobbies we don't need to do an expensive                                 join to bring the data together                                 we simply retrieve her document from the                                 user's collection and we're good to go                                 so let's say we also need to store                                 leslie's job history                                 how are we going to do that well just as                                 we did with hobbies we're likely to                                 create a separate table                                 just for job history information                                 each row in the table will contain                                 information about one job                                 for one user so far                                 we've used arrays to store geolocation                                 data and a list of strings                                 arrays can contain values of any type                                 including objects                                 so let's create an object for each job                                 leslie is held                                 and store those objects in an array                                 as you can see we have a job history                                 field that stores an array                                 inside of that array you have an object                                 for when she was the deputy director                                 an object for when she was a city                                 councilor and an object for when she was                                 director                                 of the national park services midwest                                 branch                                 now that we've decided how we'll store                                 information about our users in both                                 tables and documents                                 let's store information about ron                                 now ron will have almost all the same                                 information as leslie                                 however as i mentioned earlier ron likes                                 to stay                                 off the grid so he's not going to be                                 storing his location in the system                                 let's begin by examining how we would                                 store ron's information                                 in the same tables that we used for                                 leslie's when using a relational                                 database we are required to input a                                 value for                                 every cell in the table so we'll                                 represent                                 ron's lack of location data with null                                 the problem with using null is that it's                                 unclear whether the data does not exist                                 or the data is just unknown so many                                 people actually discourage the use of                                 null                                 in document databases we have the option                                 of representing ron's lack of location                                 data                                 in two ways so one way is we can omit                                 the location field from the document                                 the second way is we can set the                                 location to null                                 best practices suggest that we omit the                                 location field to save space                                 you can choose if you want omitted                                 fields and fields set to null to                                 represent different things in your                                 applications                                 you've got a little extra flexibility                                 there                                 ron has some hobbies in job history so                                 let's add his information to those                                 tables                                 and we can add that information to his                                 document as well                                 so the structure of ron's document looks                                 pretty similar to leslie's at this point                                 so let's say we're feeling pretty good                                 about our data models and we decide to                                 launch our apps using them                                 then requirements change we discover we                                 need to store information                                 about a new user lauren lauren is a                                 fourth grade student who ron teaches                                 about government we need to store a lot                                 of the same information about leslie as                                 we                                 as with about lauren let me start again                                 we need to store a lot of the same                                 information about lauren as we did with                                 leslie and ron                                 things like her first name last name                                 city and hobbies                                 however lauren doesn't have a cell phone                                 location data or job history                                 we also discover that we need to store a                                 new piece of information                                 for school so let's begin by storing                                 lauren's information in the tables as                                 they already exist                                 we can create a new document for lauren                                 and include the data we have for her                                 in it                                 now let's talk about how to store                                 information about lauren's school in our                                 tables                                 we've got two options we can choose to                                 add a column to the existing users table                                 or we can create a new table named                                 schools                                 so let's say we choose to add a column                                 named school to the users table                                 depending on our access rights to the                                 database we may need to talk to the dba                                 and do a little convincing to get them                                 to add the column                                 maybe we have to do a little begging to                                 get our dba to add the column                                 maybe we have to do a little bribing                                 maybe we need to bring them                                 their favorite donut or maybe we need to                                 bring our manager along to really                                 pressure the dba into agreeing                                 if our dba agrees the database will                                 likely need to be taken down                                 the school column will need to be added                                 null values will be stored in                                 every row in the user's table where a                                 user does not have a school                                 and then the database will need to be                                 brought back up it's doable                                 it just can be you know a little painful                                 now let's talk about how to store                                 lauren's school in documents                                 we can simply add a new field named                                 school to lauren's document                                 we do not need to make any modifications                                 to leslie's document                                 or ron's document when we add the new                                 school fields to lauren's document                                 document databases have a flexible                                 schema                                 so every document in a collection does                                 not need to have the same                                 fields now for those of you with years                                 of experience using relational databases                                 you might be starting to panic at the                                 idea of a flexible schema                                 i know i started to panic a little when                                 i was introduced to the idea                                 don't panic this flexibility can be                                 hugely valuable as your application's                                 requirements                                 evolve and change also some document                                 databases provide schema validation                                 so you can lock down your schema as much                                 or as little                                 as you'd like when you're ready now that                                 we're starting to get the idea of how                                 tables and documents are similar and                                 different                                 let's do some explicit term mapping on                                 the left side of the screen you'll see                                 tabular or relational database terms                                 and on the right side of the screen                                 you'll see document database terms                                 so first up we saw this a little bit in                                 our earlier example                                 a row maps to a document                                 or depending on how you've normalized                                 your data rows from multiple tables                                 could map to a single document                                 a column maps roughly to a field                                 in a relational database groups of rows                                 are stored in tables                                 in a document database groups of                                 documents are stored in collections                                 so tables map to collections                                 the next few terms will probably feel                                 pretty comfortable to those of you with                                 relational database backgrounds                                 as the terminology is basically the same                                 between the two                                 just like you store groups of tables in                                 a relational database                                 you store groups of collections in a                                 document database                                 indexes are fairly similar between the                                 two                                 indexes help speed up your read queries                                 views are pretty similar in both                                 now there are a few different ways to                                 handle joins in document databases                                 the general recommendation is that if                                 you have related information that you                                 would typically put in a separate table                                 in a relational database                                 you should actually just embed that                                 information in a single document                                 when working in a document database the                                 rule                                 of thumb you're going to hear me say it                                 multiple times today                                 is that data that is accessed together                                 should be stored together                                 so let me just say it again right now                                 data that is accessed together                                 should be stored together so if you'll                                 be frequently accessing information                                 together that you would have put in                                 separate tables                                 you should likely just embed it in a                                 document                                 depending on the document database                                 you're using there are other options for                                 joins as well some databases support                                 references between the documents                                 similar to how you would use a foreign                                 key some databases also have special                                 operations to support                                 a left outer join these options for                                 joins get specific to the database                                 you're using                                 so i'm not going to go any deeper into                                 it here today                                 all right finally let's talk about acid                                 transactions                                 transactions group database operations                                 together so they either all succeed or                                 none succeed                                 now if you did some research online                                 about relational databases versus                                 document databases before coming here                                 today                                 you probably saw something about                                 document databases                                 not supporting transactions as a major                                 drawback                                 if you care about data integrity and                                 really who doesn't                                 that's a pretty scary sounding drawback                                 now some document databases support acid                                 transactions                                 while others do not in relational                                 databases                                 we call these multi-record acid                                 transactions                                 in document databases we call these                                 multi-document asset transactions                                 however when you model your data for                                 document databases                                 you'll find that most of the time you                                 don't actually need to use a transaction                                 now i'll explain why that is at the end                                 of the presentation so                                 what i want you to know now is don't get                                 freaked out if you're looking at                                 drawbacks                                 of document databases and see no                                 transactions listed                                 some document databases support                                 transactions but chances are good that                                 either way                                 you won't actually need them                                 so to wrap up this section i created                                 this term mapping summary for you                                 it's way too much information for you to                                 read now but                                 go ahead take a screenshot feel free to                                 tweet it                                 um you can print it hang it up at your                                 desk whatever you want to do                                 but before we go on i want you to                                 internalize the first three term                                 mappings                                 a row maps to a document a column                                 maps to a field and a table                                 maps to a collection all right so now                                 that we have an understanding of the                                 terms and concepts                                 let's talk about the four major                                 advantages of document databases                                 let's jump back to ron for a moment ron                                 loves his typewriter                                 and unless you convince him otherwise                                 there is no way he's going to change his                                 mindset                                 maybe that's you maybe you've been                                 successful with relational databases                                 you're comfortable with them maybe they                                 aren't always the easiest but you've                                 learned how to get the job done                                 so let's answer the question is it worth                                 changing your mindset from tables to                                 documents                                 so i'm going to walk you through the                                 four advantages to using document                                 databases                                 so here they are no particular order                                 let's begin by talking about scaling                                 let's say ron has an app where he sells                                 the chairs he makes in his workshop                                 he's using a relational database behind                                 the scenes                                 when one of ron's chairs is nominated                                 for an award from the indiana fine                                 woodworking association                                 orders start pouring in he desperately                                 needs to scale his database                                 now typically relational databases scale                                 vertically when his database becomes too                                 big for its server                                 he has to migrate it to a larger server                                 when ron's chair appears in blush                                 magazine his chairs go viral                                 and he needs to migrate to an even                                 larger server                                 now there are a few key problems with                                 vertical scaling                                 large servers tend to be more expensive                                 than two smaller servers with the same                                 total capacity                                 large servers may not be available due                                 to cost limitations                                 cloud provider limitations and sometimes                                 even technology limitations                                 also migrating to a larger server may                                 require                                 application downtime all right let's                                 take another example                                 let's say tom has an app for his                                 restaurant called                                 tom's bistro he uses a document database                                 behind the scenes                                 after a feature in the pawnee journal                                 his restaurant surges in popularity and                                 he needs more space for his database                                 since tom is using a document database                                 he has the flexibility to scale                                 horizontally through sharding                                 sharding is a method for distributing                                 data across multiple servers                                 when his database exceeds the capacity                                 of its current server                                 he can be in sharding and split it over                                 two servers                                 when the shelter in place orders hit                                 pawn e and everyone has to order food                                 online                                 tom can continue to add more servers                                 the advantage is that these new servers                                 don't need to be big expensive machines                                 they can be cheaper commodity hardware                                 plus no downtime is required                                 so with document databases you can scale                                 cheaper as the size of your database                                 grows                                 you can scale horizontally                                 all right query faster your queries will                                 typically be faster with document                                 databases                                 let's examine why even in our simple                                 example that we worked through earlier                                 where we modeled leslie's data in both                                 tables and documents                                 we saw that her information was spread                                 across three tables                                 whenever we want to query for leslie's                                 information we're gonna have to join                                 those three tables together                                 now on these three small tables the join                                 is going to be very fast                                 however as the tables grow when our                                 queries become more complex                                 joining tables together can become very                                 expensive                                 so recall that rule of thumb i talked                                 about earlier                                 data that is accessed together should be                                 stored together                                 when you follow this rule of thumb most                                 queries will not require you to join any                                 day together                                 any data together continuing with our                                 earlier example                                 if we want to retrieve leslie's                                 information from a document database                                 we can simply query for a single                                 document in the user's collection                                 as a result our query will be very fast                                 as our collections grow larger we don't                                 have to worry about queries slowing down                                 as long as we are using indexes and                                 continuing following                                 that rule of thumb data that is accessed                                 together                                 should be stored together                                 all right pivot easier requirements                                 change                                 it's a regular part of the software                                 development life cycle                                 sometimes the changes are simple and                                 require only a few tweaks to the user                                 interface                                 but sometimes changes go all the way                                 down to the database                                 let's think back to our earlier example                                 where we needed to update our database                                 to store information about lauren's                                 school                                 to add a new school column in our                                 relational database we're going to have                                 to alter the users table                                 executing the alter table command could                                 take a couple of hours depending on how                                 much data is in the table                                 the performance of our application could                                 be decreased while the table is being                                 altered and we may need to schedule down                                 time for                                 our application now let's examine how we                                 can do something similar in document                                 databases                                 when our requirements change and we need                                 to begin storing the name of a user's                                 school                                 in a user document we can simply begin                                 doing so                                 we can choose if and when to update                                 existing documents in the collection                                 if we had implemented schema validation                                 we would have the option of applying the                                 validation to all                                 inserts and updates or only to inserts                                 and updates to documents that already                                 meet the schema requirements                                 we would also have the choice of                                 throwing an error or a warning if a                                 validation rule is violated                                 with document databases you can easily                                 change the shape of your data                                 as your app evolves                                 all right finally you can program faster                                 now to be honest with you this advantage                                 is one of the biggest surprises to me                                 i figured that it didn't really matter                                 what you used as your backend database                                 the code that interacts with it would be                                 basically the same                                 i was wrong documents mapped data                                 structures in most popular programming                                 languages                                 now this sounds like such a simple thing                                 but it can make a huge difference when                                 you're writing code                                 a friend encouraged me to test this out                                 so i did                                 i implemented the code to retrieve and                                 update user profile information                                 now my code has some simplifications in                                 it to enable me to focus on the                                 interactions with the database                                 rather than the user interface i also                                 limited the user profile information to                                 just contact information and hobbies                                 so let's walk through my implementation                                 i used mysql from my relational database                                 and mongodb as my document database                                 now i wrote the code in python but don't                                 worry if you're not familiar with python                                 i'll walk you through it step by step                                 the concepts will be applicable no                                 matter what your programming language of                                 choice is                                 so before i show you the code let's do a                                 quick refresh of the data we're going to                                 retrieve and update                                 on the left we have a table for users                                 and a table for hobbies                                 on the right we have a document for our                                 user that contains both contact                                 information                                 and hobbies                                 so let's begin with that typical top of                                 the file stuff we're going to import                                 what we need                                 connect the database and declare our                                 variables                                 i'm going to simplify things by hard                                 coding the user id                                 of the user whose profile we will be                                 retrieving                                 rather than pulling it dynamically from                                 the front end code                                 now if we look at the mongodb code it's                                 basically the same                                 importing connecting and setting the new                                 user id variable                                 so now that we have our database                                 connections ready let's use them to                                 retrieve our user profile information                                 we'll store the profile information in a                                 python dictionary                                 dictionaries are a common data structure                                 in python and provide an easy way to                                 work with your data                                 so let's begin by implementing the code                                 for mysql                                 since the user profile information is                                 spread across the users table                                 and the hobbies table we need to join                                 them in our query                                 so we'll say select everything from                                 users                                 left join hobbies we can use prepared                                 statements to ensure our data stays safe                                 we'll set the values in our prepared                                 statement execute the query                                 and fetch our result                                 because we joined the users in the                                 hobbies table we have a result for                                 each hobby this user has to retrieve all                                 the hobbies we need to iterate the                                 cursor                                 we'll append each hobby to a new hobbies                                 array and then                                 add the hobbies array to our user                                 dictionary                                 all right let's implement that same                                 functionality from mongodb                                 since we stored all of the user profile                                 information in the user document                                 we don't have to do any joins we can                                 simply retrieve a single document                                 in our collection here is where that big                                 advantage                                 that documents mapped to data structures                                 in most popular programming language                                 comes in i don't have to do any work to                                 get my data into an easy to work with                                 python dictionary                                 i get all of the results in a python                                 dictionary automatically                                 and i don't need to manipulate the                                 results i'm done                                 our user dictionaries are now pretty                                 similar in both pieces of code                                 the one exception is how we're storing                                 location data but this is really a                                 pretty minor difference                                 now that we've retrieved the user's                                 profile information we'd likely send                                 that information back                                 up the stack to the front-end ui code                                 when leslie views her profile                                 information in our application                                 she may discover she needs to update her                                 profile information                                 the front-end ui code would send that                                 updated information in a python                                 dictionary                                 to the python files we've been writing                                 so to simulate leslie updating your                                 profile information i'm just going to                                 manually update the python dictionary                                 myself for both mysql and mongodb                                 now these updates are basically the same                                 with the exception of how the location                                 data is being stored                                 all right so now that our user                                 dictionary is updated let's push that                                 updated information down to our database                                 so let's begin with mysql                                 first we need to update the information                                 that is stored in the users table                                 we'll say update users set first name                                 equal to this string last name equal to                                 this string cell equivalent string                                 all the way through then we'll set the                                 values of all those strings                                 is this complicated no not really                                 is this error prone yep                                 you have to make sure you get every                                 string in just the right spot now to be                                 honest with you                                 i did not unit test this code i know i                                 know                                 so it's possible i've made a mistake                                 without realizing it                                 this is a pretty simple example so i                                 probably got it right                                 but sql queries can get really long so                                 you can imagine this getting much more                                 complicated                                 next we need to update our hobbies for                                 simplicity we'll delete any existing                                 hobbies in the hobbies table for this                                 user                                 and then we'll insert the new hobbies                                 into the hobbies table                                 now let's update the user profile                                 information in mongodb                                 since the user's profile information is                                 stored in a single document                                 we only have to do a single update so                                 once again we're going to benefit from                                 documents mapping to data structures in                                 most popular programming languages                                 we can send our user python dictionary                                 when we call                                 update                                                                  our code                                 in this example we write we wrote                                    lines of code                                 to interact with our data in mysql and                                 two lines of code to interact with our                                 data in mongodb                                 now fewer lines of code does not always                                 indicate better code                                 but in this case we can probably agree                                 that fewer lines of code                                 will likely lead to easier maintenance                                 and fewer bugs                                 this example was relatively simple with                                 small queries                                 imagine how much bigger the differences                                 would be for larger more complex queries                                 documents mapping to data structures in                                 most popular programming languages                                 can be a huge advantage in terms of time                                 to write                                 debug and maintain code                                 so is it worth changing your mindset and                                 learning how to work with a document                                 database                                 i think so with a document database you                                 can                                 scale cheaper query faster                                 pivot easier and program faster                                 all right let's move on to our final                                 section let's talk about the three key                                 ways to change your mindset                                 as you move from tables to documents                                 people who pick up a document database                                 and try to use it as a relational                                 database                                 are the ones who typically struggle and                                 fail                                 you can't keep doing things in the same                                 way so let's talk about three key ways                                 to change your mindset                                 first up embrace document diversity                                 let's think back to when we modeled                                 documents for leslie                                 ron and lauren we saw that not all                                 documents in a collection                                 need to have the same fields now for                                 those of us with relational database                                 backgrounds this is going to feel                                 really uncomfortable and probably a                                 little odd at first                                 i promise it will be okay                                 embrace document diversity it gives us                                 so much flexibility and power to model                                 our data                                 in fact there's a schema design pattern                                 that specifically focuses on documents                                 not having the same                                 fields it's called the polymorphic                                 pattern                                 we use the polymorphic pattern when                                 documents in a collection                                 are of similar but not identical                                 structures                                 so embrace document diversity resist the                                 urge to force                                 all of your documents to have identical                                 structures just because it's what you've                                 always done                                 second way to change your mindset data                                 that is accessed together should be                                 stored together                                 we've probably all heard over and over                                 that you should normalize your data                                 but why historically there are a couple                                 different reasons for this                                 one of them is that when relational                                 databases became popular                                 disk space was extremely expensive                                 financially it made sense to reduce data                                 duplication                                 and save disk space as you can see from                                 this chart                                 and you probably know from buying flash                                 drives if you even buy those anymore                                 the price of storage has dramatically                                 decreased                                 our phones tablets laptops and flash                                 drives have more storage capacity today                                 than they did even five to ten years ago                                 for a fraction of the cost                                 when was the last time you deleted a                                 photo                                 i mean i can't even remember when i did                                 i keep even the really horribly                                 unflattering photos and i currently back                                 up                                 all my photos on two external hard                                 drives and multiple cloud services                                 storage is super cheap                                 storage has become so cheap that we've                                 seen a shift in the cost of software                                 development                                                                                                       cost in software development                                 and developers were relatively cheap                                 today                                 the costs have flipped storage is a                                 small cost of software development                                 and developers are expensive instead of                                 optimizing for storage                                 we need to optimize for developers time                                 and productivity                                 now as a developer i like this shift i                                 want to be able to focus on                                 implementing business logic and iterate                                 quickly                                 those are the things that matter to the                                 business and move developers careers                                 forward                                 i don't want to be dragged down by data                                 storage specifics                                 think back to the early example where i                                 coded retrieving and updating a user's                                 profile information                                 even in that simple example i was able                                 to write fewer lines of code and move                                 quicker when i used a document database                                 so leverage embedding consider how you                                 can use                                 objects arrays                                 and arrays of objects to store your data                                 together                                 resist that temptation to break up your                                 data                                 data that is accessed together should be                                 stored together                                 if you end up repeating data in your                                 database that's okay                                 especially if you won't be updating it                                 very often                                 all right last way to change your                                 mindset tread                                 carefully with transactions some                                 document databases support acid                                 transactions                                 while others don't but here's the thing                                 if you're modeling your data for the                                 document model you're probably not going                                 to need a transaction                                 in fact relying on transactions is a bad                                 design smell                                 okay why is that well this really builds                                 on our first two points in this section                                 first not all documents need to have the                                 same fields                                 perhaps you're breaking up data between                                 multiple collections because it's not                                 all of identical structure                                 if that's the only reason you've broken                                 the data up you can probably put it back                                 together in a single collection                                 second data that is accessed together                                 should be stored together                                 if you're following this principle you                                 actually won't need to use transactions                                 some use cases call for transactions                                 most do not                                  if you find yourself frequently using                                  transactions take a look at your data                                  model                                  and consider if you need to restructure                                  it                                  all right so to summarize the three key                                  ways you need to change your mindset                                  embrace document diversity                                  data that is accessed together should be                                  stored together                                  tread carefully with transactions                                  all right let's wrap up this                                  presentation today we went on a mental                                  journey from tables                                  to documents we began by mapping terms                                  and concepts from tables to documents                                  the three that are most important are                                  those first three                                  rows mapped to documents columns mapped                                  to fields                                  tables map to collections                                  then we talked about the four major                                  advantages of documents                                  you can scale cheaper because you can                                  scale horizontally                                  you can query faster because you aren't                                  having to do expensive joins to bring                                  your data together                                  you can pivot easier because you have a                                  flexible schema                                  and finally you can program faster                                  because documents map to objects in most                                  popular programming languages                                  alright we wrap things up with the three                                  key ways you need to change your mindset                                  first embrace document diversity not all                                  of your documents need to be the same                                  shape                                  and that's perfectly okay                                  second data that is accessed together                                  should be stored together                                  and third tread carefully with                                  transactions                                  relying on transactions when you're                                  using a document database                                  is a bad design smell                                  so if i just sum this presentation up in                                  one idea i would say this                                  don't be ron swanson i mean in this                                  particular case because ron swanson is                                  amazing in so many other ways                                  but don't be ron swanson change your                                  mindset and get the full value of                                  document databases                                  you
YouTube URL: https://www.youtube.com/watch?v=IkjgiWYmUTI


