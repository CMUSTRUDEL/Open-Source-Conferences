Title: #FOSSBack: Panel discussion -  Frontiers in Securing the Open Source Ecosystem
Publication date: 2021-03-01
Playlist: FOSS Backstage 2021 #FOSSBack
Description: 
	Panel discussion with: Jennifer Fernick, Rao Lakkakula, Christopher Robinson and Kay Williams 

Slides: http://bit.ly/openssf_fossback21

Open source software provides a tremendous public good - but proportional to its’ social and technical importance, the open source ecosystem also presents an enticing attack surface for adversaries. The combination of deobfuscated and public-facing source code, distributed community-driven development, a lack of consistently-deployed security reviews and tooling, and the prominence of many key FOSS projects as the core infrastructure of enterprises around the world and of the internet itself means that the unique model that has made open source software projects and development lifecycles so impactful is also that which has historically made them difficult to secure. In this presentation, we discuss the present challenges and opportunities for securing open source projects, and discuss a roadmap to a future where we can all help to secure open source software at massive scale.


We will explore challenges and opportunities in securing the open source software ecosystem against a range of threat actors through a variety of interventions at all phases of the software development lifecycle. Part 1 of this presentation will give a brief overview of the mission, priorities, and current work within the Open Source Security Foundation (openssf.org), including an end-to-end threat model of the open source ecosystem. Part 2, which will comprise the majority of the presentation, will be a panel discussion amongst open source maintainers, tool developers, and security researchers regarding some of the most pressing issues in the security of open source software.


###########

Follow us on Social Media and join the Community!

Twitter: https://twitter.com/Fossbckstg
LinkedIn: https://www.linkedin.com/groups/8653059/​

FOSS Backstage is an event by Plain Schwarz – https://plainschwarz.com
Captions: 
	00:00:03,600 --> 00:00:06,000
okay

00:00:04,080 --> 00:00:07,440
yeah good morning so we'll start off uh

00:00:06,000 --> 00:00:08,960
this morning i'd love to

00:00:07,440 --> 00:00:11,200
share with you some information about

00:00:08,960 --> 00:00:13,679
the open source security foundation

00:00:11,200 --> 00:00:14,639
the open source security foundation got

00:00:13,679 --> 00:00:18,080
started in

00:00:14,639 --> 00:00:18,960
uh august of last year and the reasons

00:00:18,080 --> 00:00:21,600
for

00:00:18,960 --> 00:00:22,400
our creating this foundation is that we

00:00:21,600 --> 00:00:25,119
believe that

00:00:22,400 --> 00:00:25,519
open source software is a common good um

00:00:25,119 --> 00:00:28,560
it

00:00:25,519 --> 00:00:30,400
powers the world's most uh critical

00:00:28,560 --> 00:00:33,840
infrastructure today

00:00:30,400 --> 00:00:34,800
um there are security issues in open

00:00:33,840 --> 00:00:37,680
source software

00:00:34,800 --> 00:00:38,480
and um we believe that you know creating

00:00:37,680 --> 00:00:40,559
a secure

00:00:38,480 --> 00:00:42,320
ecosystem end to end including the

00:00:40,559 --> 00:00:45,039
supply chain all the way from

00:00:42,320 --> 00:00:46,000
open source components to you know

00:00:45,039 --> 00:00:49,440
services that

00:00:46,000 --> 00:00:52,800
get delivered on cloud operating systems

00:00:49,440 --> 00:00:56,640
requires all of us to participate and

00:00:52,800 --> 00:00:58,879
no one organization can do it alone

00:00:56,640 --> 00:00:59,840
so for that reason we got together with

00:00:58,879 --> 00:01:02,480
a bunch of

00:00:59,840 --> 00:01:03,680
other companies so we've got um i i'm

00:01:02,480 --> 00:01:07,439
from microsoft but

00:01:03,680 --> 00:01:10,400
so we've got microsoft ibm um google

00:01:07,439 --> 00:01:10,960
github uh and you know and a bunch more

00:01:10,400 --> 00:01:14,240
and

00:01:10,960 --> 00:01:15,600
red hat and some others that um

00:01:14,240 --> 00:01:17,520
you know from the folks that are on the

00:01:15,600 --> 00:01:18,640
call today we'll tell you more when we

00:01:17,520 --> 00:01:20,960
introduce ourselves

00:01:18,640 --> 00:01:22,080
so um so it's quite a group that's come

00:01:20,960 --> 00:01:25,119
together

00:01:22,080 --> 00:01:25,439
the uh the mission for the foundation is

00:01:25,119 --> 00:01:27,600
to

00:01:25,439 --> 00:01:28,960
inspire enable the community to come

00:01:27,600 --> 00:01:31,040
together to

00:01:28,960 --> 00:01:32,960
secure the open source that that we all

00:01:31,040 --> 00:01:35,840
depend on

00:01:32,960 --> 00:01:37,600
uh in our first few months we've been

00:01:35,840 --> 00:01:38,000
really growing a bunch we started off

00:01:37,600 --> 00:01:40,400
with

00:01:38,000 --> 00:01:41,360
six member organizations or maybe it was

00:01:40,400 --> 00:01:45,360
eight and

00:01:41,360 --> 00:01:48,720
um now we are you know up to 36

00:01:45,360 --> 00:01:50,960
we have 250 people who are active

00:01:48,720 --> 00:01:52,399
um and you know we're getting i'll tell

00:01:50,960 --> 00:01:54,399
you some more about some

00:01:52,399 --> 00:01:58,240
some cool things that we're doing that

00:01:54,399 --> 00:01:58,240
are getting some good traction

00:01:58,640 --> 00:02:03,200
in the open source security foundation

00:02:00,960 --> 00:02:06,320
we do have a number of working groups

00:02:03,200 --> 00:02:07,280
and they work on different aspects of

00:02:06,320 --> 00:02:09,440
security

00:02:07,280 --> 00:02:10,800
so one deals with identifying security

00:02:09,440 --> 00:02:13,920
threats we've got

00:02:10,800 --> 00:02:16,720
a group that's working on um creating

00:02:13,920 --> 00:02:19,120
uh uh you know the best security tools

00:02:16,720 --> 00:02:21,840
and making them available to everyone

00:02:19,120 --> 00:02:24,080
uh we've got a group work focusing on

00:02:21,840 --> 00:02:27,920
best practices and vulnerability

00:02:24,080 --> 00:02:28,800
vulnerabilities another we're looking at

00:02:27,920 --> 00:02:32,480
how we

00:02:28,800 --> 00:02:34,879
ensure how we allow

00:02:32,480 --> 00:02:36,319
identities in the open source ecosystem

00:02:34,879 --> 00:02:38,560
to attest themselves

00:02:36,319 --> 00:02:39,519
um and then we've got another group that

00:02:38,560 --> 00:02:41,840
is looking at

00:02:39,519 --> 00:02:43,680
uh how we go about securing providing

00:02:41,840 --> 00:02:45,599
hands-on help for securing critical

00:02:43,680 --> 00:02:47,920
projects

00:02:45,599 --> 00:02:48,720
so that's that's you know some of the

00:02:47,920 --> 00:02:51,680
background

00:02:48,720 --> 00:02:52,640
for the organization there are i wanted

00:02:51,680 --> 00:02:55,840
to share with you all

00:02:52,640 --> 00:02:57,280
some resources that are available to the

00:02:55,840 --> 00:02:59,440
community today

00:02:57,280 --> 00:03:01,280
that we provide through the open source

00:02:59,440 --> 00:03:04,319
security foundation

00:03:01,280 --> 00:03:07,519
and those include

00:03:04,319 --> 00:03:10,480
an edx course which is a

00:03:07,519 --> 00:03:11,920
a training course that is free for

00:03:10,480 --> 00:03:15,840
anyone to take

00:03:11,920 --> 00:03:18,879
and it includes three sessions

00:03:15,840 --> 00:03:20,239
related to that and there's more

00:03:18,879 --> 00:03:24,000
information

00:03:20,239 --> 00:03:25,680
on edx and you know there are links to

00:03:24,000 --> 00:03:26,959
it in this slide so we'll be sharing

00:03:25,680 --> 00:03:28,959
that later

00:03:26,959 --> 00:03:30,640
it focuses on practical steps that

00:03:28,959 --> 00:03:34,319
anyone can do

00:03:30,640 --> 00:03:36,319
even with limited resources

00:03:34,319 --> 00:03:38,640
another thing another resource that we

00:03:36,319 --> 00:03:39,680
have available is our best practices

00:03:38,640 --> 00:03:43,120
badge

00:03:39,680 --> 00:03:46,319
so what this is is it allows

00:03:43,120 --> 00:03:47,120
open source software maintainers to go

00:03:46,319 --> 00:03:49,920
through

00:03:47,120 --> 00:03:51,120
a set of best practices and indicate for

00:03:49,920 --> 00:03:53,439
each one of those

00:03:51,120 --> 00:03:55,680
if they're following those some of those

00:03:53,439 --> 00:03:59,120
best practices might include things like

00:03:55,680 --> 00:04:01,439
having two reviewers using multi-factor

00:03:59,120 --> 00:04:04,640
authentication for code commits

00:04:01,439 --> 00:04:05,519
setting up a ci cd system for ongoing

00:04:04,640 --> 00:04:08,879
testing

00:04:05,519 --> 00:04:10,480
things like that and at the end of going

00:04:08,879 --> 00:04:11,599
through those series of questions then

00:04:10,480 --> 00:04:15,920
there's a badge

00:04:11,599 --> 00:04:19,199
that that the project is able to qualify

00:04:15,920 --> 00:04:20,639
for anything from um uh i forget what

00:04:19,199 --> 00:04:23,759
the starting level is

00:04:20,639 --> 00:04:26,960
um up to up to gold and silver

00:04:23,759 --> 00:04:28,800
so um and then that badge is something

00:04:26,960 --> 00:04:31,280
that people can display on their website

00:04:28,800 --> 00:04:33,120
and also it's a great place where um

00:04:31,280 --> 00:04:35,360
developers can go when they're

00:04:33,120 --> 00:04:36,720
trying to look at maybe projects that

00:04:35,360 --> 00:04:38,479
they're

00:04:36,720 --> 00:04:40,000
intending to use and incorporate in

00:04:38,479 --> 00:04:40,880
their own project to understand the

00:04:40,000 --> 00:04:44,000
security

00:04:40,880 --> 00:04:46,720
profile of those projects

00:04:44,000 --> 00:04:48,320
another resource that we have is the

00:04:46,720 --> 00:04:49,840
security scorecard

00:04:48,320 --> 00:04:51,600
scorecard and this is something that

00:04:49,840 --> 00:04:52,960
developers can run against their own

00:04:51,600 --> 00:04:56,800
projects or against

00:04:52,960 --> 00:05:00,960
other projects and get a quick look at

00:04:56,800 --> 00:05:02,160
this um this security profile for that

00:05:00,960 --> 00:05:04,800
project and

00:05:02,160 --> 00:05:05,440
the badge currently includes information

00:05:04,800 --> 00:05:08,639
like

00:05:05,440 --> 00:05:10,800
number of contributors um if there are

00:05:08,639 --> 00:05:14,000
ci tests being run against it

00:05:10,800 --> 00:05:17,120
if there are um uh

00:05:14,000 --> 00:05:17,759
uh you know if there's a security policy

00:05:17,120 --> 00:05:20,240
file

00:05:17,759 --> 00:05:20,800
et cetera so um and that's something

00:05:20,240 --> 00:05:22,800
that

00:05:20,800 --> 00:05:24,160
you can learn more about um from the

00:05:22,800 --> 00:05:27,919
open ssf

00:05:24,160 --> 00:05:31,919
github location just a couple more

00:05:27,919 --> 00:05:33,840
one is we do partner with openssf does

00:05:31,919 --> 00:05:35,680
partner with a number of other security

00:05:33,840 --> 00:05:39,360
related organizations

00:05:35,680 --> 00:05:41,919
and one of those is owasp and

00:05:39,360 --> 00:05:43,280
an interesting project there that we're

00:05:41,919 --> 00:05:46,000
working on

00:05:43,280 --> 00:05:47,680
jointly working on is the zap project

00:05:46,000 --> 00:05:49,600
and this is something that developers

00:05:47,680 --> 00:05:53,759
who are creating

00:05:49,600 --> 00:05:57,199
web applications can use to

00:05:53,759 --> 00:06:00,560
so they connect through this um they can

00:05:57,199 --> 00:06:03,600
connect to the zap proxy and then

00:06:00,560 --> 00:06:06,560
have their you know a server

00:06:03,600 --> 00:06:08,800
um kind of uh work against their

00:06:06,560 --> 00:06:09,360
application to identify security threats

00:06:08,800 --> 00:06:11,600
so

00:06:09,360 --> 00:06:13,440
um that's a great project and then the

00:06:11,600 --> 00:06:14,400
last one to share with you is another

00:06:13,440 --> 00:06:17,919
one that we're doing

00:06:14,400 --> 00:06:19,759
in cooperation with owasp and um there

00:06:17,919 --> 00:06:20,000
they have a security knowledge framework

00:06:19,759 --> 00:06:23,120
and

00:06:20,000 --> 00:06:24,400
so this is a place where developers can

00:06:23,120 --> 00:06:27,520
go to to get code

00:06:24,400 --> 00:06:29,759
examples for how to to

00:06:27,520 --> 00:06:30,720
do certain tasks and implement them in a

00:06:29,759 --> 00:06:33,280
secure way

00:06:30,720 --> 00:06:34,639
and also checklists for developing

00:06:33,280 --> 00:06:36,880
projects

00:06:34,639 --> 00:06:38,400
in a secure way and knowledge base for

00:06:36,880 --> 00:06:40,720
looking up

00:06:38,400 --> 00:06:42,560
additional information so those are a

00:06:40,720 --> 00:06:44,960
few of the resources that are currently

00:06:42,560 --> 00:06:46,880
available

00:06:44,960 --> 00:06:48,800
we are encouraging people to get

00:06:46,880 --> 00:06:50,400
involved it's a great community it's an

00:06:48,800 --> 00:06:55,360
open and friendly community

00:06:50,400 --> 00:06:57,840
and um we do have again from the slide

00:06:55,360 --> 00:06:58,880
if you or if you go to the openssf.org

00:06:57,840 --> 00:07:01,120
website you can

00:06:58,880 --> 00:07:02,160
you can find out more we've got a github

00:07:01,120 --> 00:07:05,759
mailing list

00:07:02,160 --> 00:07:08,319
slack channel um blogs and and all those

00:07:05,759 --> 00:07:08,319
great things

00:07:08,880 --> 00:07:15,440
all right so that's that's it about the

00:07:12,160 --> 00:07:17,759
open ssf back to you jennifer

00:07:15,440 --> 00:07:19,039
great thank you kay um and for those

00:07:17,759 --> 00:07:19,440
that were unable to see the slides

00:07:19,039 --> 00:07:20,639
because

00:07:19,440 --> 00:07:23,000
we might have had some technical

00:07:20,639 --> 00:07:24,240
difficulties there you can go to

00:07:23,000 --> 00:07:25,919
openssf.org

00:07:24,240 --> 00:07:27,360
and we will post the slides from today's

00:07:25,919 --> 00:07:29,039
presentation for everyone and there's a

00:07:27,360 --> 00:07:31,280
bunch of links to resources in there as

00:07:29,039 --> 00:07:32,720
well um so for the remainder of the time

00:07:31,280 --> 00:07:34,720
that we have with you we wanted to do a

00:07:32,720 --> 00:07:36,560
panel where we were going to talk about

00:07:34,720 --> 00:07:38,080
many interesting things as it relates to

00:07:36,560 --> 00:07:39,599
open source and security

00:07:38,080 --> 00:07:40,800
so we want to talk about threat modeling

00:07:39,599 --> 00:07:42,400
we want to talk about historical

00:07:40,800 --> 00:07:42,960
examples where things have gone terribly

00:07:42,400 --> 00:07:45,520
wrong

00:07:42,960 --> 00:07:46,879
or sometimes right but usually wrong we

00:07:45,520 --> 00:07:49,039
want to talk about the different ways

00:07:46,879 --> 00:07:50,319
of developers and maintainers um the

00:07:49,039 --> 00:07:52,000
things they can do to make their

00:07:50,319 --> 00:07:53,039
projects more secure

00:07:52,000 --> 00:07:54,639
we're going to talk a little bit about

00:07:53,039 --> 00:07:56,000
coordinated disclosure because it's kind

00:07:54,639 --> 00:07:57,520
of mysterious

00:07:56,000 --> 00:07:59,440
and some other tips and tricks along the

00:07:57,520 --> 00:08:01,599
way um so before

00:07:59,440 --> 00:08:03,120
before we get right into that um maybe

00:08:01,599 --> 00:08:04,720
we'll give a quick introduction of each

00:08:03,120 --> 00:08:06,800
of us for about a minute or so to give

00:08:04,720 --> 00:08:08,319
you a bit of an idea of our backgrounds

00:08:06,800 --> 00:08:10,639
um to start out my name is jennifer

00:08:08,319 --> 00:08:11,759
fernick i am the global head of research

00:08:10,639 --> 00:08:13,599
at ncc group

00:08:11,759 --> 00:08:15,360
ncc group is the largest or one of the

00:08:13,599 --> 00:08:16,000
largest security testing companies in

00:08:15,360 --> 00:08:18,240
the world

00:08:16,000 --> 00:08:19,599
so i lead a team of um a few hundred

00:08:18,240 --> 00:08:21,360
people that are

00:08:19,599 --> 00:08:22,960
both consultants and researchers and we

00:08:21,360 --> 00:08:23,840
just try to hack everything we possibly

00:08:22,960 --> 00:08:25,280
can

00:08:23,840 --> 00:08:27,440
my background is i trained as a

00:08:25,280 --> 00:08:29,199
cryptographer and as a mathematician

00:08:27,440 --> 00:08:31,759
so i kind of grew up thinking mostly

00:08:29,199 --> 00:08:34,000
about the math of secret codes and

00:08:31,759 --> 00:08:34,880
um ultimately how quantum computers can

00:08:34,000 --> 00:08:36,640
break those

00:08:34,880 --> 00:08:38,479
but then i ran a big security team at a

00:08:36,640 --> 00:08:42,560
bank and now i'm at ncc group and really

00:08:38,479 --> 00:08:42,560
excited to be a part of openssf

00:08:45,200 --> 00:08:48,480
i could go next thanks jennifer first of

00:08:48,080 --> 00:08:50,959
all

00:08:48,480 --> 00:08:52,240
thank you everyone for tuning in to our

00:08:50,959 --> 00:08:54,720
panel discussion

00:08:52,240 --> 00:08:55,279
also thanks a fast backstage for hosting

00:08:54,720 --> 00:08:58,160
us

00:08:55,279 --> 00:08:59,279
um super glad to be here my name is

00:08:58,160 --> 00:09:01,600
rawla kakula

00:08:59,279 --> 00:09:03,200
i'm an executive director in jp morgan

00:09:01,600 --> 00:09:05,600
chase

00:09:03,200 --> 00:09:07,440
i do run application security and mobile

00:09:05,600 --> 00:09:10,240
security groups they're

00:09:07,440 --> 00:09:11,440
part of my responsibilities for that

00:09:10,240 --> 00:09:13,519
role is

00:09:11,440 --> 00:09:14,720
securing the open source usage in the

00:09:13,519 --> 00:09:17,440
form and also

00:09:14,720 --> 00:09:18,720
securing the open source contributions

00:09:17,440 --> 00:09:20,959
back to the community

00:09:18,720 --> 00:09:22,000
so part of the job is also encouraging

00:09:20,959 --> 00:09:23,440
the teams to be more

00:09:22,000 --> 00:09:25,920
involved in open source security

00:09:23,440 --> 00:09:29,200
community and helping them

00:09:25,920 --> 00:09:31,120
do it properly right um i've been using

00:09:29,200 --> 00:09:34,320
and developing open source security for

00:09:31,120 --> 00:09:36,560
almost like 20 to 23 years now early

00:09:34,320 --> 00:09:39,440
versions of linux php

00:09:36,560 --> 00:09:40,480
all kinds of good stuff uh i'm i was

00:09:39,440 --> 00:09:42,560
lucky to

00:09:40,480 --> 00:09:44,240
work on open source technology for my

00:09:42,560 --> 00:09:46,800
career too most of the time

00:09:44,240 --> 00:09:49,120
except i think couple of years i had to

00:09:46,800 --> 00:09:53,040
work in a hardcore.net and

00:09:49,120 --> 00:09:54,800
sql server shop but hey after one year i

00:09:53,040 --> 00:09:57,440
was successfully able to convince them

00:09:54,800 --> 00:10:00,240
move to my sequel and mono framework so

00:09:57,440 --> 00:10:02,640
i did my job evangelizing the open

00:10:00,240 --> 00:10:04,880
source software

00:10:02,640 --> 00:10:06,240
after working for a 10 years in the

00:10:04,880 --> 00:10:09,279
development i

00:10:06,240 --> 00:10:12,800
after a few security mishaps uh

00:10:09,279 --> 00:10:14,000
some are my own um i i got interested in

00:10:12,800 --> 00:10:16,399
security and last

00:10:14,000 --> 00:10:18,720
10 years i've been mostly focusing on

00:10:16,399 --> 00:10:20,959
running the security engineering teams

00:10:18,720 --> 00:10:23,120
on the other side and how do we help the

00:10:20,959 --> 00:10:24,399
developers secure the the software and

00:10:23,120 --> 00:10:26,800
code there right so

00:10:24,399 --> 00:10:28,240
i'm not as actively developing as much i

00:10:26,800 --> 00:10:30,079
used to be

00:10:28,240 --> 00:10:31,519
because i'm running these teams but i'm

00:10:30,079 --> 00:10:34,480
super interested

00:10:31,519 --> 00:10:35,839
still in in the overall securing the

00:10:34,480 --> 00:10:39,120
ecosystem and

00:10:35,839 --> 00:10:41,760
i also serve on the open source uh

00:10:39,120 --> 00:10:42,640
security foundation as a governing board

00:10:41,760 --> 00:10:44,959
member

00:10:42,640 --> 00:10:46,480
and that's how i got the privilege to

00:10:44,959 --> 00:10:48,160
work with these awesome guys on the

00:10:46,480 --> 00:10:50,880
screen

00:10:48,160 --> 00:10:50,880
glad to be here

00:10:52,959 --> 00:10:59,920
okay i can go next so i'm k williams i

00:10:56,640 --> 00:11:00,480
work at microsoft i'm in the azure

00:10:59,920 --> 00:11:04,480
office

00:11:00,480 --> 00:11:05,360
of the cto and my role at microsoft is

00:11:04,480 --> 00:11:08,720
to work

00:11:05,360 --> 00:11:11,680
on our industry

00:11:08,720 --> 00:11:12,240
efforts related to supply chain security

00:11:11,680 --> 00:11:14,800
so

00:11:12,240 --> 00:11:16,320
i am the chair of the governing board at

00:11:14,800 --> 00:11:18,800
the open ssf

00:11:16,320 --> 00:11:20,399
i also am the co-chair of an

00:11:18,800 --> 00:11:23,360
organization that's working on

00:11:20,399 --> 00:11:24,480
a software bill of materials uh

00:11:23,360 --> 00:11:26,800
specification

00:11:24,480 --> 00:11:30,320
and um and then inside of microsoft i

00:11:26,800 --> 00:11:33,360
work with a lot of

00:11:30,320 --> 00:11:37,440
our teams um looking at their

00:11:33,360 --> 00:11:39,440
practices for how they ingest um

00:11:37,440 --> 00:11:42,320
open source but not just open source you

00:11:39,440 --> 00:11:46,000
know in just external artifacts

00:11:42,320 --> 00:11:47,839
scan them we try to clone

00:11:46,000 --> 00:11:49,839
to clone everything so we've got a copy

00:11:47,839 --> 00:11:53,279
we can use in case something

00:11:49,839 --> 00:11:55,760
goes down from an external partner

00:11:53,279 --> 00:11:56,959
and and we even try to rebuild this

00:11:55,760 --> 00:11:59,839
image

00:11:56,959 --> 00:12:01,519
excuse me as much as we can so um so you

00:11:59,839 --> 00:12:04,959
know that whole process of

00:12:01,519 --> 00:12:05,920
um supply chain and um uh consuming and

00:12:04,959 --> 00:12:08,399
using software

00:12:05,920 --> 00:12:10,639
are things that i look at for azure but

00:12:08,399 --> 00:12:11,600
for for microsoft and then i'm excited

00:12:10,639 --> 00:12:13,600
to be working

00:12:11,600 --> 00:12:15,920
at the industry level to partner with

00:12:13,600 --> 00:12:15,920
others

00:12:17,040 --> 00:12:20,639
and i guess i'll round up the

00:12:18,480 --> 00:12:23,839
introductions hi everybody i'm krobe

00:12:20,639 --> 00:12:25,600
uh thanks again to the foss backstage

00:12:23,839 --> 00:12:27,120
team for allowing us to have this

00:12:25,600 --> 00:12:29,360
opportunity to talk to you all

00:12:27,120 --> 00:12:30,480
and to my peers here from the open ssf

00:12:29,360 --> 00:12:32,639
in the industry

00:12:30,480 --> 00:12:34,240
i am the program architect for red hat

00:12:32,639 --> 00:12:35,839
product security

00:12:34,240 --> 00:12:38,720
red hat is a company that has been

00:12:35,839 --> 00:12:41,440
involved in the open source

00:12:38,720 --> 00:12:43,760
movement for well over 25 years uh

00:12:41,440 --> 00:12:44,560
product security has been securing open

00:12:43,760 --> 00:12:48,079
source

00:12:44,560 --> 00:12:51,200
for this is our 20th year

00:12:48,079 --> 00:12:51,200
i look so young i know

00:12:51,279 --> 00:12:54,320
right we're responsible for the

00:12:52,720 --> 00:12:57,279
vulnerability management

00:12:54,320 --> 00:12:59,519
um the governance and sdlc activities

00:12:57,279 --> 00:13:01,839
for all the products in the portfolio

00:12:59,519 --> 00:13:03,040
as well as overseeing governance for our

00:13:01,839 --> 00:13:05,600
supply chain

00:13:03,040 --> 00:13:07,440
which absolutely is deeply embedded

00:13:05,600 --> 00:13:08,800
within the oss community

00:13:07,440 --> 00:13:11,200
before that i've worked in several

00:13:08,800 --> 00:13:13,040
fortune 500 companies

00:13:11,200 --> 00:13:14,800
i've been in banking medical and

00:13:13,040 --> 00:13:16,320
insurance i have a lot of experience

00:13:14,800 --> 00:13:19,200
with regulation

00:13:16,320 --> 00:13:20,000
and looking forward to our exciting and

00:13:19,200 --> 00:13:23,040
engaging panel

00:13:20,000 --> 00:13:25,360
i hope you all enjoy it awesome and on

00:13:23,040 --> 00:13:27,760
that note we may as well get started

00:13:25,360 --> 00:13:28,399
um so let's just start off like why do

00:13:27,760 --> 00:13:30,240
we care

00:13:28,399 --> 00:13:31,839
um why does securing the open source

00:13:30,240 --> 00:13:33,600
ecosystem matter and why should we care

00:13:31,839 --> 00:13:36,320
about security

00:13:33,600 --> 00:13:37,600
i'll throw down some stats and then i'll

00:13:36,320 --> 00:13:40,800
let my esteemed

00:13:37,600 --> 00:13:41,440
friends here add on to that the linux

00:13:40,800 --> 00:13:44,560
foundation

00:13:41,440 --> 00:13:47,760
did a report last year um called

00:13:44,560 --> 00:13:50,880
the uh census of vulnerabilities in

00:13:47,760 --> 00:13:54,800
in the core and their

00:13:50,880 --> 00:13:57,839
analysis showed that approximately

00:13:54,800 --> 00:14:00,639
between 80 and 90 of all

00:13:57,839 --> 00:14:01,600
commercial software has leveraged open

00:14:00,639 --> 00:14:04,560
source components

00:14:01,600 --> 00:14:06,480
so the exposure is very broad and then i

00:14:04,560 --> 00:14:08,320
went over to my pals at github

00:14:06,480 --> 00:14:10,320
and they are one of the largest uh

00:14:08,320 --> 00:14:12,079
source code management tools on the web

00:14:10,320 --> 00:14:13,760
not the only but one of the large ones

00:14:12,079 --> 00:14:16,959
and just some stats there is

00:14:13,760 --> 00:14:20,560
last year alone there were over

00:14:16,959 --> 00:14:23,760
60 million new repositories added

00:14:20,560 --> 00:14:25,680
they have they track about 56 million

00:14:23,760 --> 00:14:28,399
individual developers that contribute

00:14:25,680 --> 00:14:30,079
both directly to upstream or through

00:14:28,399 --> 00:14:32,240
private projects or corporate sponsored

00:14:30,079 --> 00:14:35,440
projects and last year they said they

00:14:32,240 --> 00:14:37,760
had about on the order of 1.9 billion

00:14:35,440 --> 00:14:38,800
contributions to code so from my

00:14:37,760 --> 00:14:41,680
perspective the

00:14:38,800 --> 00:14:45,839
volume and importance of open source is

00:14:41,680 --> 00:14:45,839
huge now

00:14:48,399 --> 00:14:55,040
um yeah and so i can uh speak to it for

00:14:51,440 --> 00:14:56,639
um you know really why microsoft is

00:14:55,040 --> 00:14:58,240
involved in this effort we

00:14:56,639 --> 00:15:00,320
you know we just understand that it's

00:14:58,240 --> 00:15:01,920
not that you know in order to provide

00:15:00,320 --> 00:15:03,680
high quality products to our end

00:15:01,920 --> 00:15:06,800
customers we have to

00:15:03,680 --> 00:15:09,440
um you know we have to

00:15:06,800 --> 00:15:10,320
help the help and be engaged in the

00:15:09,440 --> 00:15:13,360
ecosystem

00:15:10,320 --> 00:15:14,720
to you know to to raise the quality of

00:15:13,360 --> 00:15:17,040
the products for

00:15:14,720 --> 00:15:20,079
of the software that that's produced for

00:15:17,040 --> 00:15:20,079
that everyone produces

00:15:20,480 --> 00:15:24,240
yeah i could i could bring in the

00:15:22,480 --> 00:15:27,839
consumer perspective to here

00:15:24,240 --> 00:15:31,920
in my opinion um the two

00:15:27,839 --> 00:15:35,519
most critical element for any company

00:15:31,920 --> 00:15:38,320
however big or small to be succeed are

00:15:35,519 --> 00:15:39,680
innovation and build and maintain the

00:15:38,320 --> 00:15:42,720
customer trust

00:15:39,680 --> 00:15:44,560
right and open source software fuels the

00:15:42,720 --> 00:15:47,120
innovation there's no doubt about it

00:15:44,560 --> 00:15:48,560
if you look at any modern application

00:15:47,120 --> 00:15:50,399
stack

00:15:48,560 --> 00:15:52,880
we have hundreds of open source

00:15:50,399 --> 00:15:54,160
components it allows the teams to build

00:15:52,880 --> 00:15:56,880
on huge ecosystem

00:15:54,160 --> 00:15:58,880
already exists it allows to keep the

00:15:56,880 --> 00:16:01,040
teams to focus on the business problem

00:15:58,880 --> 00:16:02,880
rather than the scaffolding right so

00:16:01,040 --> 00:16:05,199
there's no doubt about it on the other

00:16:02,880 --> 00:16:06,399
hand building customer trust is actually

00:16:05,199 --> 00:16:08,959
very hard

00:16:06,399 --> 00:16:10,320
maintaining it is actually harder and

00:16:08,959 --> 00:16:13,759
losing it is actually

00:16:10,320 --> 00:16:14,880
a lot easier very simple data breach is

00:16:13,759 --> 00:16:18,480
what it takes right

00:16:14,880 --> 00:16:19,920
so in my for me securing the open source

00:16:18,480 --> 00:16:23,519
ecosystem is

00:16:19,920 --> 00:16:26,160
very crucial to sustain the innovation

00:16:23,519 --> 00:16:27,519
for the companies to succeed while

00:16:26,160 --> 00:16:30,880
maintaining

00:16:27,519 --> 00:16:34,079
the customer trust that they need

00:16:30,880 --> 00:16:35,120
and that's a mandatory so and as crop

00:16:34,079 --> 00:16:38,240
mentioned like

00:16:35,120 --> 00:16:41,279
open source software development is

00:16:38,240 --> 00:16:43,120
growing tremendously i mean you see the

00:16:41,279 --> 00:16:45,600
numbers like how big

00:16:43,120 --> 00:16:47,199
that makes it lot more important to

00:16:45,600 --> 00:16:50,720
secure it

00:16:47,199 --> 00:16:51,519
to achieve these yeah i guess to build

00:16:50,720 --> 00:16:53,440
on that point

00:16:51,519 --> 00:16:55,920
i mean um we know that open source

00:16:53,440 --> 00:16:57,519
software is what underlies you know our

00:16:55,920 --> 00:16:58,959
core internet infrastructure

00:16:57,519 --> 00:17:00,720
all of the enterprises around the world

00:16:58,959 --> 00:17:03,279
they're dependent upon open source

00:17:00,720 --> 00:17:05,039
i imagine like a day without open source

00:17:03,279 --> 00:17:06,000
um i think every company would shut down

00:17:05,039 --> 00:17:08,079
right so

00:17:06,000 --> 00:17:10,400
um it's foundational to everything that

00:17:08,079 --> 00:17:12,559
we do in a tech driven society

00:17:10,400 --> 00:17:14,079
and technology increasingly takes over

00:17:12,559 --> 00:17:14,880
our lives so if we think about those

00:17:14,079 --> 00:17:16,480
ripple effects

00:17:14,880 --> 00:17:18,240
the security of these things really

00:17:16,480 --> 00:17:19,919
matters um and it

00:17:18,240 --> 00:17:21,679
security is my life's work and will

00:17:19,919 --> 00:17:22,319
continue to be hopefully for a very long

00:17:21,679 --> 00:17:24,559
time

00:17:22,319 --> 00:17:26,480
um but there's a lot of i think unique

00:17:24,559 --> 00:17:28,880
problems that we can think about

00:17:26,480 --> 00:17:29,600
in the space of open source um so ways

00:17:28,880 --> 00:17:31,200
that make it

00:17:29,600 --> 00:17:32,880
different from securing enterprise

00:17:31,200 --> 00:17:34,480
software um there's many of these

00:17:32,880 --> 00:17:36,240
examples but a couple things would be

00:17:34,480 --> 00:17:37,840
like that it's de-obfuscated

00:17:36,240 --> 00:17:39,760
public-facing source code

00:17:37,840 --> 00:17:40,880
um so it's easier for attackers to take

00:17:39,760 --> 00:17:42,640
a look they don't actually have to

00:17:40,880 --> 00:17:45,440
reverse engineer any binaries

00:17:42,640 --> 00:17:46,960
that reduces um you know the obstacles

00:17:45,440 --> 00:17:48,720
for an attacker to take a look at the

00:17:46,960 --> 00:17:50,799
source code and find vulnerabilities

00:17:48,720 --> 00:17:52,400
on top of that um one of the other

00:17:50,799 --> 00:17:53,840
strengths of open source that is

00:17:52,400 --> 00:17:55,760
actually one of the things we have to

00:17:53,840 --> 00:17:57,760
cope with differently in security

00:17:55,760 --> 00:17:59,360
is that it's you've got this distributed

00:17:57,760 --> 00:18:01,039
community driven development

00:17:59,360 --> 00:18:02,960
you don't necessarily know all of the

00:18:01,039 --> 00:18:04,400
other contributors you don't necessarily

00:18:02,960 --> 00:18:06,480
know their motivations

00:18:04,400 --> 00:18:07,440
um and we can't always assume that they

00:18:06,480 --> 00:18:08,799
are our friends

00:18:07,440 --> 00:18:10,799
often they are and they feel like our

00:18:08,799 --> 00:18:12,559
friends and so many of our best friends

00:18:10,799 --> 00:18:14,000
we've all met within open source but we

00:18:12,559 --> 00:18:16,000
also have to keep in mind

00:18:14,000 --> 00:18:17,679
that on a planet with billions of people

00:18:16,000 --> 00:18:18,880
perhaps there will be malicious actors

00:18:17,679 --> 00:18:20,720
that want to introduce

00:18:18,880 --> 00:18:22,240
subtle dangerous things into our code

00:18:20,720 --> 00:18:23,039
bases and we need to be able to cope

00:18:22,240 --> 00:18:24,720
with that

00:18:23,039 --> 00:18:26,160
um beyond that i think there's this

00:18:24,720 --> 00:18:28,640
tragedy of the commons

00:18:26,160 --> 00:18:30,320
um where we feel like just because

00:18:28,640 --> 00:18:31,919
people can look at the source code that

00:18:30,320 --> 00:18:32,799
they necessarily have looked at the

00:18:31,919 --> 00:18:34,559
source code

00:18:32,799 --> 00:18:36,640
and time and again we've seen examples

00:18:34,559 --> 00:18:38,240
where there are code bases that support

00:18:36,640 --> 00:18:39,679
billions or trillions of dollars of

00:18:38,240 --> 00:18:41,919
industry activity

00:18:39,679 --> 00:18:43,679
that underlie all kinds of important

00:18:41,919 --> 00:18:44,320
like public service and non-profit

00:18:43,679 --> 00:18:46,480
projects

00:18:44,320 --> 00:18:47,840
that are just important across the board

00:18:46,480 --> 00:18:50,240
that at the end of the day

00:18:47,840 --> 00:18:51,520
were sustained by a thousand dollars and

00:18:50,240 --> 00:18:52,880
a couple of volunteers

00:18:51,520 --> 00:18:55,120
and we'll even talk about some of those

00:18:52,880 --> 00:18:56,000
examples in this panel beyond that i

00:18:55,120 --> 00:18:57,600
mean when i think about

00:18:56,000 --> 00:18:59,360
why security matters security is a

00:18:57,600 --> 00:19:00,799
prerequisite to so many things that we

00:18:59,360 --> 00:19:03,120
value in our society

00:19:00,799 --> 00:19:04,960
um security is a prerequisite to privacy

00:19:03,120 --> 00:19:07,520
it's not a trade-off as is

00:19:04,960 --> 00:19:09,200
commonly said um without security you

00:19:07,520 --> 00:19:10,080
can't make assurances about what your

00:19:09,200 --> 00:19:12,000
system does

00:19:10,080 --> 00:19:13,520
and that includes how private it is and

00:19:12,000 --> 00:19:15,440
how the data is protected

00:19:13,520 --> 00:19:16,559
um and privacy is important to all kinds

00:19:15,440 --> 00:19:18,240
of civil liberty

00:19:16,559 --> 00:19:19,840
civil liberties and other things that we

00:19:18,240 --> 00:19:22,160
care about within our society

00:19:19,840 --> 00:19:24,320
and wish to advance further um security

00:19:22,160 --> 00:19:26,160
is also prerequisite to safety you can't

00:19:24,320 --> 00:19:28,400
guarantee that a system will behave

00:19:26,160 --> 00:19:29,840
in a way that is safe for the users or

00:19:28,400 --> 00:19:31,440
those impacted by the system

00:19:29,840 --> 00:19:33,440
if you can't make assurances about what

00:19:31,440 --> 00:19:34,880
it actually does and you can't guarantee

00:19:33,440 --> 00:19:37,520
that the code isn't being

00:19:34,880 --> 00:19:38,240
uh played with to do dangerous things

00:19:37,520 --> 00:19:39,840
and

00:19:38,240 --> 00:19:42,559
security is a prerequisite to ethical

00:19:39,840 --> 00:19:45,039
technology so a popular topic in the

00:19:42,559 --> 00:19:48,960
last few years has been ethical ai

00:19:45,039 --> 00:19:51,919
and how um it's important to build

00:19:48,960 --> 00:19:53,919
inclusive ai systems that um you know

00:19:51,919 --> 00:19:56,880
lack bias and that are more

00:19:53,919 --> 00:19:57,280
um equitable and representative and that

00:19:56,880 --> 00:19:59,760
don't

00:19:57,280 --> 00:20:00,799
propagate discriminatory behavior but we

00:19:59,760 --> 00:20:04,000
can't actually

00:20:00,799 --> 00:20:05,600
assure anything about an ai system or

00:20:04,000 --> 00:20:07,360
any computational system

00:20:05,600 --> 00:20:09,360
if we don't have control and assurance

00:20:07,360 --> 00:20:11,120
around that system so security is really

00:20:09,360 --> 00:20:12,000
a prerequisite to making any kind of

00:20:11,120 --> 00:20:15,039
guarantees

00:20:12,000 --> 00:20:16,960
that are so important in in society

00:20:15,039 --> 00:20:19,520
um so maybe let's go into some of the

00:20:16,960 --> 00:20:21,520
historical examples we had mentioned

00:20:19,520 --> 00:20:24,000
i'm wondering if anyone wants to point

00:20:21,520 --> 00:20:25,360
us to some historical examples where

00:20:24,000 --> 00:20:28,080
vulnerabilities and open source

00:20:25,360 --> 00:20:30,559
components have had a large scale impact

00:20:28,080 --> 00:20:32,159
and maybe krog do you want to start

00:20:30,559 --> 00:20:34,720
absolutely i can do that

00:20:32,159 --> 00:20:35,679
i'll kick us off with granddaddy of them

00:20:34,720 --> 00:20:38,320
all

00:20:35,679 --> 00:20:39,440
uh one of my least favorite topics are

00:20:38,320 --> 00:20:42,559
branded

00:20:39,440 --> 00:20:43,440
laws uh vanity or celebrity flaws and

00:20:42,559 --> 00:20:46,080
the

00:20:43,440 --> 00:20:47,120
incident that caused this trend within

00:20:46,080 --> 00:20:50,000
the industry

00:20:47,120 --> 00:20:52,480
was a heartbleed which was a flaw within

00:20:50,000 --> 00:20:55,840
openssl

00:20:52,480 --> 00:20:57,840
and this technology helps secure

00:20:55,840 --> 00:20:59,200
and make a transmission between

00:20:57,840 --> 00:21:00,000
different elements on a network in

00:20:59,200 --> 00:21:03,200
between

00:21:00,000 --> 00:21:05,200
systems confidential and it

00:21:03,200 --> 00:21:06,240
the technology was so good it got

00:21:05,200 --> 00:21:08,159
embedded

00:21:06,240 --> 00:21:09,520
virtually everywhere in the networking

00:21:08,159 --> 00:21:11,840
world and on the internet

00:21:09,520 --> 00:21:13,840
and unfortunately it was discovered back

00:21:11,840 --> 00:21:16,960
in

00:21:13,840 --> 00:21:17,840
2012 or 2013 that there was a flaw that

00:21:16,960 --> 00:21:21,280
allowed

00:21:17,840 --> 00:21:23,039
uh the exposure of more data and as

00:21:21,280 --> 00:21:24,880
the world dug into the problem and was

00:21:23,039 --> 00:21:26,240
working to fix it

00:21:24,880 --> 00:21:28,080
you they discovered there was

00:21:26,240 --> 00:21:30,320
legitimately like two people

00:21:28,080 --> 00:21:31,120
that were maintaining the project that

00:21:30,320 --> 00:21:33,200
millions

00:21:31,120 --> 00:21:34,720
on the globe depended on and they did

00:21:33,200 --> 00:21:36,400
not have any

00:21:34,720 --> 00:21:37,760
funding or any backing to really help

00:21:36,400 --> 00:21:39,760
them and that's where

00:21:37,760 --> 00:21:42,320
uh you know organizations like the linux

00:21:39,760 --> 00:21:44,799
foundation and other groups started to

00:21:42,320 --> 00:21:46,320
start to fix this problem yeah i heard

00:21:44,799 --> 00:21:46,799
something about heartbleed that it was

00:21:46,320 --> 00:21:48,880
like

00:21:46,799 --> 00:21:50,240
they had a handful of volunteers and one

00:21:48,880 --> 00:21:51,760
person that worked full-time

00:21:50,240 --> 00:21:53,120
and like two thousand dollars in

00:21:51,760 --> 00:21:54,480
donations the year that the

00:21:53,120 --> 00:21:56,799
vulnerability was found

00:21:54,480 --> 00:21:57,679
and like this was for openssl a crypto

00:21:56,799 --> 00:21:59,360
library that

00:21:57,679 --> 00:22:01,280
underlies all kinds of like banking and

00:21:59,360 --> 00:22:02,799
secure communications and all kinds of

00:22:01,280 --> 00:22:05,919
things like that

00:22:02,799 --> 00:22:08,400
yeah and actually my former boss mark

00:22:05,919 --> 00:22:09,520
cox was on the security team for openssl

00:22:08,400 --> 00:22:10,320
and that's the whole reason i came back

00:22:09,520 --> 00:22:12,080
to red hat

00:22:10,320 --> 00:22:13,360
was because of this heartbleed was the

00:22:12,080 --> 00:22:15,440
incident that

00:22:13,360 --> 00:22:17,120
made us understand we need to focus on

00:22:15,440 --> 00:22:18,799
these big things or

00:22:17,120 --> 00:22:21,200
more closely that's awesome i didn't

00:22:18,799 --> 00:22:21,200
know that

00:22:21,760 --> 00:22:25,440
yeah another example is i believe it was

00:22:23,919 --> 00:22:29,120
the eslint

00:22:25,440 --> 00:22:30,880
project and so there

00:22:29,120 --> 00:22:32,400
in this case there was a project that

00:22:30,880 --> 00:22:35,280
had you know one

00:22:32,400 --> 00:22:37,039
maintainer and you know a lot of usage

00:22:35,280 --> 00:22:40,480
and i forget the exact numbers

00:22:37,039 --> 00:22:41,120
but one maintainer and um and he was you

00:22:40,480 --> 00:22:42,559
know

00:22:41,120 --> 00:22:45,520
kind of he'd been doing it for a long

00:22:42,559 --> 00:22:47,840
time was moving off to something else

00:22:45,520 --> 00:22:48,880
someone who had been somewhat active in

00:22:47,840 --> 00:22:51,200
the project

00:22:48,880 --> 00:22:52,799
volunteered to take over and become the

00:22:51,200 --> 00:22:56,080
maintainer and he said

00:22:52,799 --> 00:22:57,520
great yes thank you and then it turned

00:22:56,080 --> 00:23:00,799
out that that person

00:22:57,520 --> 00:23:02,720
um uh then committed code that

00:23:00,799 --> 00:23:03,840
you know that got distributed everywhere

00:23:02,720 --> 00:23:06,640
that um

00:23:03,840 --> 00:23:08,640
used the that you know set it up so that

00:23:06,640 --> 00:23:11,120
there was bitcoin mining being done

00:23:08,640 --> 00:23:12,240
through or made available through that

00:23:11,120 --> 00:23:15,679
code so

00:23:12,240 --> 00:23:18,480
there's another example yeah

00:23:15,679 --> 00:23:19,039
the one interesting to me was the shell

00:23:18,480 --> 00:23:22,720
shock

00:23:19,039 --> 00:23:26,080
in 2014 it was like

00:23:22,720 --> 00:23:28,400
impacting uh bash obviously bashes

00:23:26,080 --> 00:23:29,200
everywhere and pretty much every mission

00:23:28,400 --> 00:23:32,480
you can

00:23:29,200 --> 00:23:33,120
get to right uh was actually attacked as

00:23:32,480 --> 00:23:35,280
a

00:23:33,120 --> 00:23:38,000
privileged escalation attack so the

00:23:35,280 --> 00:23:42,080
attacker can send a well-crafted

00:23:38,000 --> 00:23:43,840
request modifying uh the server to run

00:23:42,080 --> 00:23:47,039
the commands what they want to

00:23:43,840 --> 00:23:47,760
so which is it actually high impacted

00:23:47,039 --> 00:23:50,080
attack

00:23:47,760 --> 00:23:51,200
what's interesting about this attack was

00:23:50,080 --> 00:23:54,400
the original bug

00:23:51,200 --> 00:23:57,039
was introduced

00:23:54,400 --> 00:24:00,320
accidentally or unintentionally back in

00:23:57,039 --> 00:24:02,720
i think it's 1989

00:24:00,320 --> 00:24:03,520
and shell shock was found in 2014 so you

00:24:02,720 --> 00:24:06,960
can see

00:24:03,520 --> 00:24:08,240
it took 25 years to find it and by the

00:24:06,960 --> 00:24:11,919
time

00:24:08,240 --> 00:24:14,880
millions and millions of the the host

00:24:11,919 --> 00:24:15,440
got impacted so that made this really

00:24:14,880 --> 00:24:18,320
what the

00:24:15,440 --> 00:24:20,159
attack is so simple anyone with like few

00:24:18,320 --> 00:24:23,200
lines of the command

00:24:20,159 --> 00:24:24,799
can now bring down the host to

00:24:23,200 --> 00:24:26,480
distributed denial of service because

00:24:24,799 --> 00:24:30,000
you simply do sleep

00:24:26,480 --> 00:24:33,279
100 sleep 200 commands with this

00:24:30,000 --> 00:24:34,320
parameters as the request and so within

00:24:33,279 --> 00:24:36,720
hours you see like

00:24:34,320 --> 00:24:38,480
thousands of servers being attacked and

00:24:36,720 --> 00:24:42,960
i think the numbers were like within a

00:24:38,480 --> 00:24:44,880
week you see 1.5 million attacks per day

00:24:42,960 --> 00:24:46,559
um being carried out and this was like

00:24:44,880 --> 00:24:49,520
2014 and

00:24:46,559 --> 00:24:50,799
sad thing is it's still relevant here

00:24:49,520 --> 00:24:54,159
because there's so

00:24:50,799 --> 00:24:55,919
so many hosts impacted there

00:24:54,159 --> 00:24:57,360
quite a number of them are unpatched

00:24:55,919 --> 00:24:59,440
still so

00:24:57,360 --> 00:25:01,760
that makes this this open source

00:24:59,440 --> 00:25:03,520
security is kind of tricky is because

00:25:01,760 --> 00:25:06,720
it's so prevalent

00:25:03,520 --> 00:25:07,679
and it the patching is involved fixing

00:25:06,720 --> 00:25:10,799
the issue and

00:25:07,679 --> 00:25:13,520
also improving the awareness office is

00:25:10,799 --> 00:25:15,600
all the part of this kind of that makes

00:25:13,520 --> 00:25:17,200
it challenging and interesting

00:25:15,600 --> 00:25:18,559
yeah i think what's really wild about

00:25:17,200 --> 00:25:19,760
all of this when we talk through these

00:25:18,559 --> 00:25:22,320
examples is that

00:25:19,760 --> 00:25:23,760
if you look at the cve databases so the

00:25:22,320 --> 00:25:25,919
places where we track

00:25:23,760 --> 00:25:27,679
known vulnerabilities in known systems

00:25:25,919 --> 00:25:28,320
there's tens of thousands like i think

00:25:27,679 --> 00:25:31,760
there was

00:25:28,320 --> 00:25:33,279
16 000 reported in 2018 alone

00:25:31,760 --> 00:25:35,039
and a thousand of those were critical

00:25:33,279 --> 00:25:36,559
like game over vulnerabilities

00:25:35,039 --> 00:25:39,039
so these examples that we're talking

00:25:36,559 --> 00:25:40,720
about now that is across proprietary and

00:25:39,039 --> 00:25:42,320
open source software but still

00:25:40,720 --> 00:25:44,000
these these examples that we're talking

00:25:42,320 --> 00:25:46,720
about they're not rare um

00:25:44,000 --> 00:25:47,120
we can assume safely i think that there

00:25:46,720 --> 00:25:49,760
are

00:25:47,120 --> 00:25:51,200
many several dozens hundreds maybe even

00:25:49,760 --> 00:25:52,720
thousands of vulnerabilities being

00:25:51,200 --> 00:25:54,960
committed into code bases

00:25:52,720 --> 00:25:56,080
today alone like just today and that's

00:25:54,960 --> 00:25:57,919
happening every day

00:25:56,080 --> 00:25:59,760
so finding scalable ways to deal with

00:25:57,919 --> 00:26:01,279
all this stuff and working closer with

00:25:59,760 --> 00:26:02,559
maintainers with a respect for what

00:26:01,279 --> 00:26:03,360
maintainers are trying to do for their

00:26:02,559 --> 00:26:05,120
projects

00:26:03,360 --> 00:26:06,720
is absolutely essential for us from a

00:26:05,120 --> 00:26:08,400
security perspective

00:26:06,720 --> 00:26:10,320
um i'd love to talk a little bit more

00:26:08,400 --> 00:26:11,840
about threat modeling because like

00:26:10,320 --> 00:26:13,600
security is often thought of as

00:26:11,840 --> 00:26:14,720
vulnerabilities in source code like we

00:26:13,600 --> 00:26:16,480
were just talking about

00:26:14,720 --> 00:26:18,080
but it's actually a much broader

00:26:16,480 --> 00:26:18,880
spectrum of things that we can think

00:26:18,080 --> 00:26:21,120
about

00:26:18,880 --> 00:26:21,919
um you know in the software development

00:26:21,120 --> 00:26:24,159
life cycle

00:26:21,919 --> 00:26:26,400
so i would ask like what other end to

00:26:24,159 --> 00:26:28,320
end or like sdlc

00:26:26,400 --> 00:26:29,919
life cycle things do open source

00:26:28,320 --> 00:26:33,440
maintainers need to think about

00:26:29,919 --> 00:26:33,440
to help secure their projects better

00:26:33,840 --> 00:26:38,480
since i run that working group as part

00:26:36,080 --> 00:26:40,320
of the open ssf i can kick us off again

00:26:38,480 --> 00:26:41,600
and i know rao has a lot of experience

00:26:40,320 --> 00:26:43,840
with this um

00:26:41,600 --> 00:26:46,080
from my perspective when you're talking

00:26:43,840 --> 00:26:48,799
about an open source maintainer

00:26:46,080 --> 00:26:50,640
this is they are men and women and they

00:26:48,799 --> 00:26:53,679
it's a broad spectrum of folks

00:26:50,640 --> 00:26:56,960
you'll have a one or two person project

00:26:53,679 --> 00:26:59,600
maybe it's two ladies in peoria illinois

00:26:56,960 --> 00:27:00,320
that are working on a graduate project

00:26:59,600 --> 00:27:02,559
and they

00:27:00,320 --> 00:27:04,640
push it up to a source code repo and it

00:27:02,559 --> 00:27:06,640
could be very large corporations like

00:27:04,640 --> 00:27:08,640
microsoft or intel or red hat that

00:27:06,640 --> 00:27:11,440
sponsor a project because it's

00:27:08,640 --> 00:27:12,960
critical to their core portfolio but

00:27:11,440 --> 00:27:16,159
it's just a broad spectrum

00:27:12,960 --> 00:27:17,600
and not all of these maintainers a have

00:27:16,159 --> 00:27:19,520
security training

00:27:17,600 --> 00:27:20,720
they might not be formally schooled in

00:27:19,520 --> 00:27:22,320
security defensive

00:27:20,720 --> 00:27:24,320
coding techniques and they might not

00:27:22,320 --> 00:27:27,440
have access to tools

00:27:24,320 --> 00:27:29,279
or infrastructure to be able to uh

00:27:27,440 --> 00:27:30,880
execute on their journey they have a lot

00:27:29,279 --> 00:27:31,840
of different motivations go into why

00:27:30,880 --> 00:27:33,679
someone

00:27:31,840 --> 00:27:35,120
donates software to the world to make

00:27:33,679 --> 00:27:37,120
the world a better place

00:27:35,120 --> 00:27:38,640
and you know right off the bat some

00:27:37,120 --> 00:27:41,039
simple things you can do and again the

00:27:38,640 --> 00:27:44,080
linux foundation has a really good paper

00:27:41,039 --> 00:27:45,360
that kind of spoke to securing the open

00:27:44,080 --> 00:27:47,200
source supply chain

00:27:45,360 --> 00:27:48,720
and you can implement things like you

00:27:47,200 --> 00:27:51,039
know val verifying

00:27:48,720 --> 00:27:52,799
your maintainers using things like

00:27:51,039 --> 00:27:54,960
two-factor authentication

00:27:52,799 --> 00:27:57,279
implementing automated testing into your

00:27:54,960 --> 00:27:59,200
cicd pipeline you know just just doing

00:27:57,279 --> 00:28:00,799
very basic like dependency checks or

00:27:59,200 --> 00:28:03,520
known vulnerability checks will help

00:28:00,799 --> 00:28:07,520
eliminate broad swaths of problems

00:28:03,520 --> 00:28:09,279
before they get propagated downstream uh

00:28:07,520 --> 00:28:11,360
yeah and i know rao has some thoughts on

00:28:09,279 --> 00:28:14,159
this yeah i think you covered actually

00:28:11,360 --> 00:28:16,559
really good points crap yeah the other

00:28:14,159 --> 00:28:19,360
areas is not just about the code

00:28:16,559 --> 00:28:21,440
it has the vulnerabilities right like

00:28:19,360 --> 00:28:24,240
even the developer

00:28:21,440 --> 00:28:25,039
local infrastructure itself is a attack

00:28:24,240 --> 00:28:28,720
vector

00:28:25,039 --> 00:28:31,039
your workstations your network your ides

00:28:28,720 --> 00:28:32,559
attackers can compromise them and get

00:28:31,039 --> 00:28:34,480
hold of

00:28:32,559 --> 00:28:36,159
some of the source code which is not

00:28:34,480 --> 00:28:38,000
released to public yet

00:28:36,159 --> 00:28:40,080
they can get hold of the zero-day

00:28:38,000 --> 00:28:40,559
vulnerabilities researchers reported to

00:28:40,080 --> 00:28:42,880
you

00:28:40,559 --> 00:28:45,039
so that they could exploit them they

00:28:42,880 --> 00:28:46,960
could even commit code on behalf of you

00:28:45,039 --> 00:28:49,760
without you realizing so there's a

00:28:46,960 --> 00:28:51,200
there's a lot of danger within that and

00:28:49,760 --> 00:28:54,399
also once the code is

00:28:51,200 --> 00:28:55,760
completed you're pushing to github okay

00:28:54,399 --> 00:28:57,279
mentioned about multi-factor

00:28:55,760 --> 00:28:58,399
authentication for the source code

00:28:57,279 --> 00:29:00,559
repository

00:28:58,399 --> 00:29:01,760
attacker can actually target that and

00:29:00,559 --> 00:29:04,720
get hold of your

00:29:01,760 --> 00:29:06,720
credentials and then publishing to the

00:29:04,720 --> 00:29:09,120
the package managers

00:29:06,720 --> 00:29:10,000
they can publish a a different version

00:29:09,120 --> 00:29:12,000
of the package

00:29:10,000 --> 00:29:13,360
obviously get hold of that your

00:29:12,000 --> 00:29:17,360
credentials

00:29:13,360 --> 00:29:18,720
and then interestingly um

00:29:17,360 --> 00:29:20,399
one other thing i forgot to mention is

00:29:18,720 --> 00:29:22,240
that the developer

00:29:20,399 --> 00:29:24,480
build and ci environment is another

00:29:22,240 --> 00:29:26,640
threat attacker attacker can get hold of

00:29:24,480 --> 00:29:27,360
your bill configuration they can modify

00:29:26,640 --> 00:29:30,720
for example

00:29:27,360 --> 00:29:33,200
mpmrc file and then point it to their

00:29:30,720 --> 00:29:34,799
control registry and then could do

00:29:33,200 --> 00:29:38,000
damage right so

00:29:34,799 --> 00:29:40,000
i think monitoring all these systems not

00:29:38,000 --> 00:29:41,360
just the looking for vulnerabilities the

00:29:40,000 --> 00:29:44,480
code is very important

00:29:41,360 --> 00:29:46,799
to keep your security one of the things

00:29:44,480 --> 00:29:49,840
i would like to point is open ssf

00:29:46,799 --> 00:29:50,559
in the initial stages when we started we

00:29:49,840 --> 00:29:53,440
started with

00:29:50,559 --> 00:29:55,120
collecting all the threats possible in

00:29:53,440 --> 00:29:58,240
open source

00:29:55,120 --> 00:30:00,559
ecosystem and ways to remediate

00:29:58,240 --> 00:30:02,080
so we published a paper michael from

00:30:00,559 --> 00:30:04,000
microsoft uh

00:30:02,080 --> 00:30:06,720
published a paper with which is like a

00:30:04,000 --> 00:30:10,159
45 pages but it's interesting read

00:30:06,720 --> 00:30:12,480
is published on the open ssf.org website

00:30:10,159 --> 00:30:13,840
uh please check it out i mean we only

00:30:12,480 --> 00:30:17,279
touched a few of them

00:30:13,840 --> 00:30:19,520
it goes over every step of the sdlc yeah

00:30:17,279 --> 00:30:20,399
threats risks and vulnerabilities in the

00:30:19,520 --> 00:30:23,039
ecosystem

00:30:20,399 --> 00:30:23,840
and it's michael scaveta who wrote great

00:30:23,039 --> 00:30:25,919
paper

00:30:23,840 --> 00:30:27,279
really good paper and that term that

00:30:25,919 --> 00:30:28,640
thing that we're talking about right now

00:30:27,279 --> 00:30:29,760
for those that are not familiar is

00:30:28,640 --> 00:30:31,520
called threat modeling

00:30:29,760 --> 00:30:33,120
so when we're thinking about what are

00:30:31,520 --> 00:30:33,600
all the threats that are impacting this

00:30:33,120 --> 00:30:35,039
thing

00:30:33,600 --> 00:30:36,720
not just what are the potential

00:30:35,039 --> 00:30:37,279
vulnerabilities in the source code

00:30:36,720 --> 00:30:39,120
itself

00:30:37,279 --> 00:30:41,360
that we may have made mistakes that lead

00:30:39,120 --> 00:30:43,200
to exploitable vulnerabilities or

00:30:41,360 --> 00:30:45,039
that someone may have inserted malicious

00:30:43,200 --> 00:30:46,880
code into a specific code base

00:30:45,039 --> 00:30:49,039
when we think about that whole space of

00:30:46,880 --> 00:30:50,320
like someone reading your emails where

00:30:49,039 --> 00:30:52,880
you might be receiving

00:30:50,320 --> 00:30:54,480
a vulnerability report or someone taking

00:30:52,880 --> 00:30:55,279
over your account because you don't have

00:30:54,480 --> 00:30:56,480
2fa

00:30:55,279 --> 00:30:58,320
that's all when we think about our

00:30:56,480 --> 00:30:59,679
threat model we're trying to think about

00:30:58,320 --> 00:31:00,799
what are the things we actually need to

00:30:59,679 --> 00:31:02,960
worry about here

00:31:00,799 --> 00:31:04,000
and it's an important exercise because

00:31:02,960 --> 00:31:05,679
um

00:31:04,000 --> 00:31:07,440
often we assume that people are thinking

00:31:05,679 --> 00:31:09,039
the exact same way we are or that

00:31:07,440 --> 00:31:09,600
they're motivated in the same ways that

00:31:09,039 --> 00:31:12,240
we are

00:31:09,600 --> 00:31:13,360
so we might neglect other motivations of

00:31:12,240 --> 00:31:15,279
these threat actors

00:31:13,360 --> 00:31:17,279
but also we have to think about like if

00:31:15,279 --> 00:31:19,120
you're using dodgy airport wi-fi

00:31:17,279 --> 00:31:20,880
or if you haven't patched the laptop you

00:31:19,120 --> 00:31:22,480
use to commit code in a long time

00:31:20,880 --> 00:31:23,760
those things can be really dangerous so

00:31:22,480 --> 00:31:24,399
we have to always think about those

00:31:23,760 --> 00:31:26,480
things

00:31:24,399 --> 00:31:27,840
um but let's get back to vols i love

00:31:26,480 --> 00:31:29,519
talking about vulnerabilities so let's

00:31:27,840 --> 00:31:31,120
do a little bit more of that

00:31:29,519 --> 00:31:32,720
what are the different ways of going

00:31:31,120 --> 00:31:33,360
about finding vulnerabilities in

00:31:32,720 --> 00:31:35,279
software

00:31:33,360 --> 00:31:37,120
okay i know you think a lot about supply

00:31:35,279 --> 00:31:38,880
chain um can you talk to us like what

00:31:37,120 --> 00:31:40,640
that means in a security context and how

00:31:38,880 --> 00:31:43,519
we should think about that

00:31:40,640 --> 00:31:46,080
um yeah so in the you know when you

00:31:43,519 --> 00:31:48,480
think about supply chain there are any

00:31:46,080 --> 00:31:51,360
piece of software that you

00:31:48,480 --> 00:31:53,840
use or that you write has dependencies

00:31:51,360 --> 00:31:55,679
on other components and the dependencies

00:31:53,840 --> 00:31:57,840
you know spread out into a very large

00:31:55,679 --> 00:32:00,559
tree pretty quickly

00:31:57,840 --> 00:32:02,080
so um you know when you're thinking

00:32:00,559 --> 00:32:03,760
about vulnerabilities it's not just

00:32:02,080 --> 00:32:05,360
vulnerabilities in your code but

00:32:03,760 --> 00:32:08,080
vulnerabilities and all the

00:32:05,360 --> 00:32:09,200
code that you bring in so you know there

00:32:08,080 --> 00:32:12,559
are some tools and

00:32:09,200 --> 00:32:14,799
a lot of the um you know systems that

00:32:12,559 --> 00:32:16,559
the developers use for creating software

00:32:14,799 --> 00:32:18,320
now are starting to provide tools and

00:32:16,559 --> 00:32:21,440
some automatic ways to

00:32:18,320 --> 00:32:23,279
to let developers know about um about

00:32:21,440 --> 00:32:26,399
issues in their dependencies

00:32:23,279 --> 00:32:30,559
so with github for example there are

00:32:26,399 --> 00:32:32,720
there's a dependency trackers um uh

00:32:30,559 --> 00:32:34,080
dependency trap excuse me graph i think

00:32:32,720 --> 00:32:36,080
is what it is um

00:32:34,080 --> 00:32:37,840
which you know lets you see all of the

00:32:36,080 --> 00:32:38,720
dependence dependencies that you're

00:32:37,840 --> 00:32:40,240
consuming

00:32:38,720 --> 00:32:43,360
there are a number of commercial

00:32:40,240 --> 00:32:45,600
resources that will um

00:32:43,360 --> 00:32:47,200
you know do scanning of your code and

00:32:45,600 --> 00:32:50,799
show you what your dependencies are

00:32:47,200 --> 00:32:52,960
and what cbes exists in your code

00:32:50,799 --> 00:32:54,240
so you know so one aspect of

00:32:52,960 --> 00:32:56,320
vulnerabilities is just

00:32:54,240 --> 00:32:57,600
understanding that you know the things

00:32:56,320 --> 00:32:59,760
that you bring in can bring

00:32:57,600 --> 00:33:01,760
vulnerabilities with them

00:32:59,760 --> 00:33:03,679
in the open ssf we're also looking at

00:33:01,760 --> 00:33:06,880
doing um

00:33:03,679 --> 00:33:08,720
some work where we're sharing uh

00:33:06,880 --> 00:33:11,200
some analysis that different companies

00:33:08,720 --> 00:33:12,559
have done microsoft and ncc group and

00:33:11,200 --> 00:33:15,440
others

00:33:12,559 --> 00:33:16,399
that talk about the quality of various

00:33:15,440 --> 00:33:17,919
components

00:33:16,399 --> 00:33:19,600
and so you know one thing that's really

00:33:17,919 --> 00:33:22,080
good to do is just understanding

00:33:19,600 --> 00:33:22,799
what what components you're making bets

00:33:22,080 --> 00:33:24,720
on

00:33:22,799 --> 00:33:26,480
and doing a little bit of research to to

00:33:24,720 --> 00:33:28,399
make sure that the um

00:33:26,480 --> 00:33:30,080
that there aren't serious issues with

00:33:28,399 --> 00:33:32,480
those

00:33:30,080 --> 00:33:34,080
yeah that's great thanks kay um and in

00:33:32,480 --> 00:33:36,080
thinking about those vulnerabilities

00:33:34,080 --> 00:33:38,000
that can come up in our own code bases

00:33:36,080 --> 00:33:40,000
or in the dependencies that we're making

00:33:38,000 --> 00:33:41,440
use of um sometimes it's interesting to

00:33:40,000 --> 00:33:42,399
talk about like how do people find bugs

00:33:41,440 --> 00:33:43,519
in the first place

00:33:42,399 --> 00:33:45,840
and that's really what my team

00:33:43,519 --> 00:33:46,159
specializes in so um maybe i'll spend a

00:33:45,840 --> 00:33:48,000
few

00:33:46,159 --> 00:33:49,519
a few moments talking a bit about how do

00:33:48,000 --> 00:33:50,799
we actually find bugs

00:33:49,519 --> 00:33:52,480
um and there's a bunch of different ways

00:33:50,799 --> 00:33:53,120
of doing this so we've talked a little

00:33:52,480 --> 00:33:55,600
bit about

00:33:53,120 --> 00:33:57,919
tooling and what do we mean by tooling

00:33:55,600 --> 00:33:59,360
some of the common categories of basic

00:33:57,919 --> 00:34:00,960
tools that people can use

00:33:59,360 --> 00:34:02,799
you can think of them as code scanners

00:34:00,960 --> 00:34:04,880
because basically they are

00:34:02,799 --> 00:34:06,720
static analysis is one where we look at

00:34:04,880 --> 00:34:07,840
a piece of or a computer looks at a

00:34:06,720 --> 00:34:09,520
piece of code for us

00:34:07,840 --> 00:34:10,960
and it looks for dangerous patterns

00:34:09,520 --> 00:34:13,200
within um

00:34:10,960 --> 00:34:14,639
the this code that has been committed

00:34:13,200 --> 00:34:16,159
and this varies from programming

00:34:14,639 --> 00:34:18,000
language to programming language

00:34:16,159 --> 00:34:19,440
because some programming languages are

00:34:18,000 --> 00:34:20,399
safer and they don't let you do

00:34:19,440 --> 00:34:23,520
dangerous things

00:34:20,399 --> 00:34:24,639
whereas other ones see let you do very

00:34:23,520 --> 00:34:26,879
dangerous things

00:34:24,639 --> 00:34:28,560
so um for example if you were to talk to

00:34:26,879 --> 00:34:30,560
case colleagues at microsoft

00:34:28,560 --> 00:34:31,679
in the security response center and you

00:34:30,560 --> 00:34:33,200
asked them

00:34:31,679 --> 00:34:35,280
like what are these different categories

00:34:33,200 --> 00:34:36,720
of vulnerabilities which ones have the

00:34:35,280 --> 00:34:38,800
biggest impact on

00:34:36,720 --> 00:34:39,919
your systems and everyone else's systems

00:34:38,800 --> 00:34:41,679
they would probably say

00:34:39,919 --> 00:34:43,280
memory corruption where something weird

00:34:41,679 --> 00:34:44,720
goes wrong in the memory and you can

00:34:43,280 --> 00:34:45,839
actually have malicious behavior that

00:34:44,720 --> 00:34:47,440
was not intended

00:34:45,839 --> 00:34:49,760
um that's a bit of a hand wavy

00:34:47,440 --> 00:34:52,000
explanation but i suppose like

00:34:49,760 --> 00:34:53,679
my overall point is that there's many

00:34:52,000 --> 00:34:55,119
different types of vulnerabilities we

00:34:53,679 --> 00:34:56,560
can categorize them

00:34:55,119 --> 00:34:58,560
and then when you have these tools they

00:34:56,560 --> 00:34:59,359
can look for how those vulnerabilities

00:34:58,560 --> 00:35:01,760
show up

00:34:59,359 --> 00:35:03,520
within different programming languages

00:35:01,760 --> 00:35:04,800
so static analysis is really powerful

00:35:03,520 --> 00:35:06,640
and there's a lot of like free static

00:35:04,800 --> 00:35:08,640
analysis tools that people can use

00:35:06,640 --> 00:35:11,359
um there's also fuzzing so this is a fun

00:35:08,640 --> 00:35:14,079
one you're basically throwing randomness

00:35:11,359 --> 00:35:15,599
at something until a program will crash

00:35:14,079 --> 00:35:17,440
and you're trying to just see where

00:35:15,599 --> 00:35:19,520
things don't exactly behave as you would

00:35:17,440 --> 00:35:20,880
have expected and sometimes when you

00:35:19,520 --> 00:35:22,640
find those crashes

00:35:20,880 --> 00:35:24,320
you can actually find vulnerabilities

00:35:22,640 --> 00:35:25,359
that are exploitable that an attacker

00:35:24,320 --> 00:35:27,440
could use to

00:35:25,359 --> 00:35:28,880
do dangerous things um so there's a lot

00:35:27,440 --> 00:35:30,079
of ways that we can use tooling as

00:35:28,880 --> 00:35:33,119
researchers

00:35:30,079 --> 00:35:34,720
to find bugs and also as defenders or as

00:35:33,119 --> 00:35:37,040
maintainers can use tooling

00:35:34,720 --> 00:35:39,520
to get rid of bugs before people on my

00:35:37,040 --> 00:35:41,520
team can exploit them basically

00:35:39,520 --> 00:35:42,720
the the other more manual ways of

00:35:41,520 --> 00:35:44,480
thinking about this

00:35:42,720 --> 00:35:45,680
are doing things like code review so in

00:35:44,480 --> 00:35:46,880
the same way that you would do a code

00:35:45,680 --> 00:35:50,160
review for quality

00:35:46,880 --> 00:35:51,839
within um a project we would do it for

00:35:50,160 --> 00:35:52,480
security and we would look manually

00:35:51,839 --> 00:35:54,240
through it

00:35:52,480 --> 00:35:55,839
we might have tools that guide us as to

00:35:54,240 --> 00:35:57,760
where we should look more

00:35:55,839 --> 00:35:58,960
but it's often a manual kind of bespoke

00:35:57,760 --> 00:36:01,040
expert process

00:35:58,960 --> 00:36:02,880
um the thing that ncc group specializes

00:36:01,040 --> 00:36:03,520
in is security testing or penetration

00:36:02,880 --> 00:36:05,200
testing

00:36:03,520 --> 00:36:07,520
which is basically you come to ncc group

00:36:05,200 --> 00:36:09,599
and you go i want to get hacked but i

00:36:07,520 --> 00:36:10,160
want the hackers that do it to be on my

00:36:09,599 --> 00:36:12,400
side

00:36:10,160 --> 00:36:14,400
so can you guys hack it and then please

00:36:12,400 --> 00:36:16,800
tell us how you hacked it

00:36:14,400 --> 00:36:18,560
and how we can fix the hacking um and

00:36:16,800 --> 00:36:20,720
and that's what we we all do

00:36:18,560 --> 00:36:22,160
so um in our client we do this because

00:36:20,720 --> 00:36:25,119
companies hire us to do it

00:36:22,160 --> 00:36:26,880
in our research we do it on both

00:36:25,119 --> 00:36:28,160
proprietary and open source software and

00:36:26,880 --> 00:36:29,839
then what we do is something called

00:36:28,160 --> 00:36:31,359
vulnerability disclosure

00:36:29,839 --> 00:36:32,800
so we find something dangerous in a

00:36:31,359 --> 00:36:34,640
piece of software we need to tell the

00:36:32,800 --> 00:36:36,320
person so that they can fix it before

00:36:34,640 --> 00:36:37,680
someone that has maybe more evil

00:36:36,320 --> 00:36:40,079
intentions than we do

00:36:37,680 --> 00:36:41,520
finds that same vulnerability and maybe

00:36:40,079 --> 00:36:41,920
that's that's something we can talk

00:36:41,520 --> 00:36:44,560
about

00:36:41,920 --> 00:36:46,640
next um so there's this idea of

00:36:44,560 --> 00:36:48,240
coordinated disclosure or coordinated

00:36:46,640 --> 00:36:50,560
vulnerability disclosure

00:36:48,240 --> 00:36:51,520
and it's probably one of the least well

00:36:50,560 --> 00:36:54,720
understood

00:36:51,520 --> 00:36:56,960
most confusing and contentious issues

00:36:54,720 --> 00:36:57,839
in security people working with like

00:36:56,960 --> 00:36:59,359
developers

00:36:57,839 --> 00:37:00,960
um so i wanted to talk a little bit more

00:36:59,359 --> 00:37:02,000
about like what makes coordinated

00:37:00,960 --> 00:37:05,440
disclosure difficult

00:37:02,000 --> 00:37:07,280
how does it work um how is it different

00:37:05,440 --> 00:37:09,520
or how does it work within

00:37:07,280 --> 00:37:10,800
open source software specifically so

00:37:09,520 --> 00:37:12,640
maybe i'll just start with a couple of

00:37:10,800 --> 00:37:13,760
examples to get us on the same page and

00:37:12,640 --> 00:37:16,320
then we'll share our different

00:37:13,760 --> 00:37:17,760
perspectives on vulnerability disclosure

00:37:16,320 --> 00:37:19,760
um so what do i mean when i say

00:37:17,760 --> 00:37:20,960
vulnerability i mean that there's some

00:37:19,760 --> 00:37:22,800
flaw in software

00:37:20,960 --> 00:37:24,480
intended or unintended a lot of them are

00:37:22,800 --> 00:37:25,280
committed by mistake because they're

00:37:24,480 --> 00:37:27,280
really

00:37:25,280 --> 00:37:28,480
hard to spot even if you're an expert

00:37:27,280 --> 00:37:30,079
developer

00:37:28,480 --> 00:37:31,920
a vulnerability is some flaw in a

00:37:30,079 --> 00:37:32,880
software that could be exploited or it

00:37:31,920 --> 00:37:35,520
could not

00:37:32,880 --> 00:37:36,079
an exploit is when researchers for

00:37:35,520 --> 00:37:39,200
example

00:37:36,079 --> 00:37:41,280
hackers um malicious actors

00:37:39,200 --> 00:37:43,280
will write something that interacts with

00:37:41,280 --> 00:37:43,520
the vulnerability to take advantage of

00:37:43,280 --> 00:37:46,320
it

00:37:43,520 --> 00:37:47,040
to for example get more permissions in a

00:37:46,320 --> 00:37:49,520
system

00:37:47,040 --> 00:37:50,079
or to do some other kind of like not

00:37:49,520 --> 00:37:51,920
intended

00:37:50,079 --> 00:37:53,200
behavior on the behalf of the developers

00:37:51,920 --> 00:37:55,119
so to do something

00:37:53,200 --> 00:37:56,880
dangerous and when we talk about

00:37:55,119 --> 00:37:59,119
coordinated disclosure that is when the

00:37:56,880 --> 00:38:01,119
person who has found the vulnerability

00:37:59,119 --> 00:38:02,800
doesn't want to exploit it and like mine

00:38:01,119 --> 00:38:04,240
bitcoin or do something evil

00:38:02,800 --> 00:38:06,240
instead want to come back to the

00:38:04,240 --> 00:38:08,560
developer and say hey like

00:38:06,240 --> 00:38:10,079
security is my thing i found this bug i

00:38:08,560 --> 00:38:12,320
want to help you fix this bug

00:38:10,079 --> 00:38:14,079
um so coordinated disclosure is a really

00:38:12,320 --> 00:38:15,680
powerful kind of construct that we have

00:38:14,079 --> 00:38:18,640
in the security community

00:38:15,680 --> 00:38:20,400
where um you know a vast majority of the

00:38:18,640 --> 00:38:22,240
people that do security and that find

00:38:20,400 --> 00:38:24,079
these exploitable vulnerabilities

00:38:22,240 --> 00:38:25,760
don't go and sell them on the dark web

00:38:24,079 --> 00:38:27,119
don't solvent governments don't

00:38:25,760 --> 00:38:27,599
personally exploit them for their own

00:38:27,119 --> 00:38:30,000
gain

00:38:27,599 --> 00:38:31,359
but instead they knock on the doors of

00:38:30,000 --> 00:38:32,079
whoever has been developing that

00:38:31,359 --> 00:38:34,160
software

00:38:32,079 --> 00:38:35,839
and they try to coordinate a way of

00:38:34,160 --> 00:38:37,920
communicating about this

00:38:35,839 --> 00:38:39,839
um and and of fixing the bug and

00:38:37,920 --> 00:38:40,800
ultimately reporting it to users so that

00:38:39,839 --> 00:38:42,720
typical flow

00:38:40,800 --> 00:38:44,400
is like we'll find a bug in something

00:38:42,720 --> 00:38:46,079
we'll go to them and we'll say hey

00:38:44,400 --> 00:38:47,520
we're researchers we have this bug we

00:38:46,079 --> 00:38:49,680
want to tell you about it we need a

00:38:47,520 --> 00:38:52,000
secure way of communicating with you

00:38:49,680 --> 00:38:53,680
so that you know an actual adversary

00:38:52,000 --> 00:38:54,160
can't see the report we're sending you

00:38:53,680 --> 00:38:55,599
and then

00:38:54,160 --> 00:38:57,520
exploit the vulnerability we're trying

00:38:55,599 --> 00:38:59,520
to fix um often

00:38:57,520 --> 00:39:01,520
the recipient will say great like here's

00:38:59,520 --> 00:39:02,720
our secure communication maybe pgp

00:39:01,520 --> 00:39:04,160
encryption

00:39:02,720 --> 00:39:05,920
send us the report and then there's a

00:39:04,160 --> 00:39:07,040
back and forth explaining like how it

00:39:05,920 --> 00:39:08,960
works how to fix it

00:39:07,040 --> 00:39:10,800
all of that and the ultimate goal is

00:39:08,960 --> 00:39:13,119
that the developer and this can be

00:39:10,800 --> 00:39:14,480
proprietary software open source will

00:39:13,119 --> 00:39:17,280
patch the vulnerability

00:39:14,480 --> 00:39:19,200
issue an update and then often both the

00:39:17,280 --> 00:39:20,960
developer and the researcher will issue

00:39:19,200 --> 00:39:23,680
something called a technical advisory

00:39:20,960 --> 00:39:24,800
that explains what happened why like

00:39:23,680 --> 00:39:26,880
what is the impact

00:39:24,800 --> 00:39:28,720
how we fixed it and all of that but we

00:39:26,880 --> 00:39:30,079
only make it public after it's fixed

00:39:28,720 --> 00:39:32,000
so that people that have up-to-date

00:39:30,079 --> 00:39:33,520
software are safe um

00:39:32,000 --> 00:39:35,760
and i guess from a researcher

00:39:33,520 --> 00:39:37,680
perspective this is challenging

00:39:35,760 --> 00:39:38,960
with vendors and with open source

00:39:37,680 --> 00:39:40,079
projects but perhaps for different

00:39:38,960 --> 00:39:42,880
reasons

00:39:40,079 --> 00:39:44,240
um one of the things that we have to

00:39:42,880 --> 00:39:46,000
worry about is that

00:39:44,240 --> 00:39:47,839
um especially with small open source

00:39:46,000 --> 00:39:49,440
projects not all projects have people

00:39:47,839 --> 00:39:51,119
that necessarily understand the bug

00:39:49,440 --> 00:39:52,560
reports that we're reporting because it

00:39:51,119 --> 00:39:54,000
is a super niche thing

00:39:52,560 --> 00:39:56,320
and it's not something we should expect

00:39:54,000 --> 00:39:57,920
all developers to know um and

00:39:56,320 --> 00:39:59,920
they can't necessarily write the patches

00:39:57,920 --> 00:40:00,800
either if this just isn't an area

00:39:59,920 --> 00:40:02,320
they've thought about

00:40:00,800 --> 00:40:04,319
memory corruption isn't their thing but

00:40:02,320 --> 00:40:06,160
they can build amazing systems at scale

00:40:04,319 --> 00:40:07,359
um they might struggle with like what do

00:40:06,160 --> 00:40:08,960
i do now and

00:40:07,359 --> 00:40:10,240
how should i why should i trust this

00:40:08,960 --> 00:40:11,040
random hacker on the internet that's

00:40:10,240 --> 00:40:12,720
telling me to push

00:40:11,040 --> 00:40:14,880
changes to my code right like why should

00:40:12,720 --> 00:40:16,800
anyone trust me or someone from my team

00:40:14,880 --> 00:40:18,640
um so that's a huge challenge um

00:40:16,800 --> 00:40:21,040
sometimes as well maintainers won't see

00:40:18,640 --> 00:40:22,480
the danger in a particular vulnerability

00:40:21,040 --> 00:40:25,200
and they'll say oh that's not a security

00:40:22,480 --> 00:40:26,880
issue and we'll say believe us it is

00:40:25,200 --> 00:40:28,319
so that's a challenge right because

00:40:26,880 --> 00:40:30,720
we're speaking different languages

00:40:28,319 --> 00:40:32,240
we have different areas of expertise and

00:40:30,720 --> 00:40:33,680
um we can't necessarily expect

00:40:32,240 --> 00:40:35,440
developers maintainers to

00:40:33,680 --> 00:40:37,440
be able to understand all this nuanced

00:40:35,440 --> 00:40:39,520
security stuff right out of the box

00:40:37,440 --> 00:40:41,280
um sometimes patching isn't a priority

00:40:39,520 --> 00:40:43,359
um open source is

00:40:41,280 --> 00:40:45,280
often done for free by people out of the

00:40:43,359 --> 00:40:47,680
goodness of their heart trying to build

00:40:45,280 --> 00:40:48,560
really important interesting innovations

00:40:47,680 --> 00:40:50,720
in software

00:40:48,560 --> 00:40:52,000
maybe writing a patch to some obscure

00:40:50,720 --> 00:40:54,560
bug that we report to them

00:40:52,000 --> 00:40:56,319
is not a priority and i get that um and

00:40:54,560 --> 00:40:57,920
also like projects can go unmaintained

00:40:56,319 --> 00:40:58,720
and sometimes we just can't even find

00:40:57,920 --> 00:41:01,280
anyone

00:40:58,720 --> 00:41:02,960
to report the bug to and there isn't any

00:41:01,280 --> 00:41:05,040
clear way of getting it fixed

00:41:02,960 --> 00:41:06,560
there's no way of necessarily getting a

00:41:05,040 --> 00:41:07,359
patch pushed out and those are all

00:41:06,560 --> 00:41:10,720
concerns

00:41:07,359 --> 00:41:12,640
um so i think a common misconception

00:41:10,720 --> 00:41:13,760
that researchers get from open source

00:41:12,640 --> 00:41:16,800
projects but also from

00:41:13,760 --> 00:41:18,400
some less security mature enterprise

00:41:16,800 --> 00:41:20,000
software companies as well

00:41:18,400 --> 00:41:22,000
is that vulnerability disclosure is

00:41:20,000 --> 00:41:22,560
adversarial like that we're coming to

00:41:22,000 --> 00:41:24,480
like

00:41:22,560 --> 00:41:26,400
prove that you did something bad or

00:41:24,480 --> 00:41:28,720
whatever and in fact um

00:41:26,400 --> 00:41:30,640
it's it's it's pretty much never that

00:41:28,720 --> 00:41:32,160
that way if someone had a vulnerability

00:41:30,640 --> 00:41:33,440
and they wanted to be evil they would be

00:41:32,160 --> 00:41:34,000
exploiting it in the wild and not

00:41:33,440 --> 00:41:35,280
telling you

00:41:34,000 --> 00:41:37,440
the people that are knocking at your

00:41:35,280 --> 00:41:38,480
door do have your best intentions at

00:41:37,440 --> 00:41:40,000
heart in general

00:41:38,480 --> 00:41:41,599
and we're just trying to communicate in

00:41:40,000 --> 00:41:43,520
a way that works for everybody

00:41:41,599 --> 00:41:44,960
um so we're really just saying here's

00:41:43,520 --> 00:41:46,319
something dangerous and here's how we

00:41:44,960 --> 00:41:47,760
think you can fix it

00:41:46,319 --> 00:41:50,160
um but anyway i feel like i've been

00:41:47,760 --> 00:41:51,599
talking for a long time rao krobe i'd

00:41:50,160 --> 00:41:53,359
love to hear like a developer

00:41:51,599 --> 00:41:54,560
perspective and open source maintainer

00:41:53,359 --> 00:41:57,119
perspective on

00:41:54,560 --> 00:41:57,599
vulnerability disclosure right i think

00:41:57,119 --> 00:42:01,440
it is

00:41:57,599 --> 00:42:03,599
a really good point uh jennifer and then

00:42:01,440 --> 00:42:05,599
at in my opinion vulnerability

00:42:03,599 --> 00:42:08,720
disclosures are actually

00:42:05,599 --> 00:42:10,720
a good learning opportunities for

00:42:08,720 --> 00:42:12,400
open source developers and maintainers

00:42:10,720 --> 00:42:14,480
right um

00:42:12,400 --> 00:42:16,240
so it's important i think when when the

00:42:14,480 --> 00:42:18,560
research reached out to them like

00:42:16,240 --> 00:42:20,160
to the developer our maintainer is to

00:42:18,560 --> 00:42:22,480
provide more details on

00:42:20,160 --> 00:42:25,040
what is the problem provide more details

00:42:22,480 --> 00:42:26,960
on how to be exploited and also suggest

00:42:25,040 --> 00:42:30,319
on how to fix it

00:42:26,960 --> 00:42:32,800
and maybe even offer the help

00:42:30,319 --> 00:42:34,160
to validate the fix right that because

00:42:32,800 --> 00:42:36,400
you know how

00:42:34,160 --> 00:42:37,440
this is exploited that's very important

00:42:36,400 --> 00:42:38,880
that would help

00:42:37,440 --> 00:42:41,359
the developers to actually get

00:42:38,880 --> 00:42:43,040
interested in security also i mean

00:42:41,359 --> 00:42:44,640
i'll tell you a quick story like not

00:42:43,040 --> 00:42:45,359
going to take much time i was with one

00:42:44,640 --> 00:42:47,440
of the

00:42:45,359 --> 00:42:48,480
recent conferences and talking to this

00:42:47,440 --> 00:42:51,599
awesome

00:42:48,480 --> 00:42:53,280
security leader and she

00:42:51,599 --> 00:42:55,520
she's running a product security

00:42:53,280 --> 00:42:58,560
division for this security firm

00:42:55,520 --> 00:43:00,800
and few years back she was one of the

00:42:58,560 --> 00:43:02,640
open source maintainer for a package and

00:43:00,800 --> 00:43:04,480
no idea about security

00:43:02,640 --> 00:43:06,960
and one weekend she got an email from

00:43:04,480 --> 00:43:08,640
this random guy on internet

00:43:06,960 --> 00:43:10,480
in a very little bit of threatening

00:43:08,640 --> 00:43:11,839
email saying oh you got a big problem in

00:43:10,480 --> 00:43:13,359
your package you got to fix it

00:43:11,839 --> 00:43:16,000
immediately

00:43:13,359 --> 00:43:17,760
so she got up like a little bit like

00:43:16,000 --> 00:43:18,480
frightened and was like going through

00:43:17,760 --> 00:43:20,960
the code

00:43:18,480 --> 00:43:21,680
multiple times and couldn't find the

00:43:20,960 --> 00:43:24,480
problem

00:43:21,680 --> 00:43:25,280
it looks good to me so after a couple of

00:43:24,480 --> 00:43:27,920
hours

00:43:25,280 --> 00:43:29,119
she ended up reaching out to the whoever

00:43:27,920 --> 00:43:30,480
contacted her

00:43:29,119 --> 00:43:32,400
and saying hey actually i couldn't find

00:43:30,480 --> 00:43:33,599
the problem can you explain me where is

00:43:32,400 --> 00:43:37,920
the problem

00:43:33,599 --> 00:43:39,680
so and luckily this guy was actually

00:43:37,920 --> 00:43:40,960
gone through the code explained where

00:43:39,680 --> 00:43:43,520
the problem is and

00:43:40,960 --> 00:43:44,480
helped fix the issue and they were able

00:43:43,520 --> 00:43:47,119
to fix the issue

00:43:44,480 --> 00:43:47,839
that saturday and she was telling me the

00:43:47,119 --> 00:43:50,079
story

00:43:47,839 --> 00:43:52,480
what they made was she got interested in

00:43:50,079 --> 00:43:54,880
security and realized oh they actually

00:43:52,480 --> 00:43:55,520
can my code do that which is a kind of

00:43:54,880 --> 00:43:58,319
relation

00:43:55,520 --> 00:43:59,119
right like this is interesting and that

00:43:58,319 --> 00:44:01,280
led her

00:43:59,119 --> 00:44:03,040
interested in security learn more about

00:44:01,280 --> 00:44:06,240
it now she's running a

00:44:03,040 --> 00:44:08,720
a big role in the security form so

00:44:06,240 --> 00:44:09,599
as you can see i think that good nature

00:44:08,720 --> 00:44:11,760
of it

00:44:09,599 --> 00:44:12,720
wonderful disclosure kind of made her

00:44:11,760 --> 00:44:14,319
career

00:44:12,720 --> 00:44:16,480
you could have actually broke her kid

00:44:14,319 --> 00:44:17,680
and probably like made her leave the

00:44:16,480 --> 00:44:20,240
open source because oh

00:44:17,680 --> 00:44:21,680
this is too much work for me right

00:44:20,240 --> 00:44:22,000
because i'm not getting any recognition

00:44:21,680 --> 00:44:24,400
or not

00:44:22,000 --> 00:44:26,240
help so i think you realize it at a good

00:44:24,400 --> 00:44:28,640
point i think that most of the

00:44:26,240 --> 00:44:30,640
when researchers actually are there to

00:44:28,640 --> 00:44:32,640
help they're not really finding problems

00:44:30,640 --> 00:44:34,640
in your code for sake of

00:44:32,640 --> 00:44:36,480
blaming you or telling you something

00:44:34,640 --> 00:44:39,359
wrong instead they're helping you

00:44:36,480 --> 00:44:41,119
i think uh it's it's a good good point

00:44:39,359 --> 00:44:43,040
yeah absolutely and i mean like i think

00:44:41,119 --> 00:44:43,680
we're just really deeply curious about

00:44:43,040 --> 00:44:45,680
systems

00:44:43,680 --> 00:44:47,520
in in in a way that i think we share

00:44:45,680 --> 00:44:49,440
with developers and with maintainers

00:44:47,520 --> 00:44:50,800
um but perhaps from a different angle

00:44:49,440 --> 00:44:52,480
and and there's so many ways of

00:44:50,800 --> 00:44:53,920
specializing in computing that it makes

00:44:52,480 --> 00:44:55,680
sense that some people would

00:44:53,920 --> 00:44:57,599
be able to find these like super niche

00:44:55,680 --> 00:44:59,520
vulnerabilities in code but that that's

00:44:57,599 --> 00:45:01,760
not a universal skill set

00:44:59,520 --> 00:45:03,119
um i know that we are coming upon our

00:45:01,760 --> 00:45:03,520
time we've got like four five minutes

00:45:03,119 --> 00:45:05,280
left

00:45:03,520 --> 00:45:06,720
so i have two questions that i want to

00:45:05,280 --> 00:45:09,599
ask we're gonna try and fit them in

00:45:06,720 --> 00:45:11,359
um so the next one um i just love maybe

00:45:09,599 --> 00:45:12,400
krobe if you could just run through like

00:45:11,359 --> 00:45:13,920
a whirlwind

00:45:12,400 --> 00:45:15,599
like as an open source developer or

00:45:13,920 --> 00:45:17,520
maintainer what can you do to improve

00:45:15,599 --> 00:45:19,520
the security of your project

00:45:17,520 --> 00:45:21,280
aside from listening to and

00:45:19,520 --> 00:45:22,560
participating in the open source

00:45:21,280 --> 00:45:25,359
security foundation

00:45:22,560 --> 00:45:27,280
yeah openssf.org there's a couple really

00:45:25,359 --> 00:45:29,280
practical things you could take away

00:45:27,280 --> 00:45:31,200
and first off implementing things like

00:45:29,280 --> 00:45:32,079
multi-factor two-factor authentication

00:45:31,200 --> 00:45:35,040
in your project

00:45:32,079 --> 00:45:36,800
for commits can greatly reduce the

00:45:35,040 --> 00:45:37,119
attack surface an attacker could come in

00:45:36,800 --> 00:45:40,720
and

00:45:37,119 --> 00:45:42,480
impersonate you doing things like having

00:45:40,720 --> 00:45:44,480
implementing change control and change

00:45:42,480 --> 00:45:46,480
tracking in your project that as

00:45:44,480 --> 00:45:48,480
commits are made that's recorded who

00:45:46,480 --> 00:45:50,160
what when where

00:45:48,480 --> 00:45:52,319
doing things making sure that you have a

00:45:50,160 --> 00:45:53,040
unique identifier for each release that

00:45:52,319 --> 00:45:55,040
helps

00:45:53,040 --> 00:45:56,480
the downstream folks that come in and do

00:45:55,040 --> 00:45:58,319
the vulnerability response or the

00:45:56,480 --> 00:46:00,400
scanning of the pen testing later

00:45:58,319 --> 00:46:01,359
to identify this vulnerability was

00:46:00,400 --> 00:46:05,040
introduced at the

00:46:01,359 --> 00:46:05,520
x version x release integrating security

00:46:05,040 --> 00:46:08,319
testing

00:46:05,520 --> 00:46:10,000
into your pipeline critical the more

00:46:08,319 --> 00:46:13,839
automation the better

00:46:10,000 --> 00:46:15,200
unfortunately tooling is great but it's

00:46:13,839 --> 00:46:17,200
a lot of this is going to come down to

00:46:15,200 --> 00:46:19,760
you're going to get the best review

00:46:17,200 --> 00:46:20,880
by a manual peer review with a qualified

00:46:19,760 --> 00:46:23,920
security person

00:46:20,880 --> 00:46:24,640
but tooling you can automate the thing

00:46:23,920 --> 00:46:26,560
to a point

00:46:24,640 --> 00:46:28,480
where you can pass off quality

00:46:26,560 --> 00:46:29,680
information to that person that might

00:46:28,480 --> 00:46:32,560
help you out

00:46:29,680 --> 00:46:33,119
um thinking about uh your dependencies

00:46:32,560 --> 00:46:34,640
you know

00:46:33,119 --> 00:46:36,480
you write some software it has some

00:46:34,640 --> 00:46:38,720
functionality and you require

00:46:36,480 --> 00:46:40,240
other software outside of your scope

00:46:38,720 --> 00:46:42,160
understanding what dependencies you

00:46:40,240 --> 00:46:44,800
interact with that you require

00:46:42,160 --> 00:46:46,079
and listening to any vulnerabilities or

00:46:44,800 --> 00:46:47,680
reports or problems

00:46:46,079 --> 00:46:49,920
with those dependencies so you can

00:46:47,680 --> 00:46:51,200
potentially make changes if you need to

00:46:49,920 --> 00:46:52,880
um you know doing things like

00:46:51,200 --> 00:46:54,000
cryptography where you're digitally

00:46:52,880 --> 00:46:56,240
signing

00:46:54,000 --> 00:46:57,520
and having being able to prove that a

00:46:56,240 --> 00:46:58,319
certain commit was made by a certain

00:46:57,520 --> 00:47:00,240
person

00:46:58,319 --> 00:47:01,359
um a lot of different ways you can do

00:47:00,240 --> 00:47:03,760
that and then

00:47:01,359 --> 00:47:05,680
uh just paying attention just in general

00:47:03,760 --> 00:47:07,599
tracking or mediating vulnerabilities

00:47:05,680 --> 00:47:09,280
in your code and again your your

00:47:07,599 --> 00:47:11,760
dependent projects that's important

00:47:09,280 --> 00:47:13,520
as both you know a good steward but also

00:47:11,760 --> 00:47:15,599
to protect your project

00:47:13,520 --> 00:47:16,880
your software is you need to understand

00:47:15,599 --> 00:47:18,319
kind of who else could

00:47:16,880 --> 00:47:20,160
come in there and ruin your day because

00:47:18,319 --> 00:47:22,880
of the dependency you're using that is

00:47:20,160 --> 00:47:24,000
faulty thank you so much yeah and i

00:47:22,880 --> 00:47:25,680
think i think these are some

00:47:24,000 --> 00:47:27,040
great suggestions and it's things we're

00:47:25,680 --> 00:47:27,520
trying to formalize in openness and

00:47:27,040 --> 00:47:29,680
stuff

00:47:27,520 --> 00:47:31,119
so if you are a maintainer developer

00:47:29,680 --> 00:47:32,640
listening to this talk right now

00:47:31,119 --> 00:47:34,319
and there's a gap between what we're

00:47:32,640 --> 00:47:35,599
saying and resources you need

00:47:34,319 --> 00:47:37,200
let us know because we're trying to

00:47:35,599 --> 00:47:37,839
create the educational materials the

00:47:37,200 --> 00:47:39,920
courses

00:47:37,839 --> 00:47:41,440
all of that if you can identify gaps

00:47:39,920 --> 00:47:43,040
between what we're offering here

00:47:41,440 --> 00:47:44,640
and what we really need to build this

00:47:43,040 --> 00:47:46,160
bridge between these communities please

00:47:44,640 --> 00:47:48,079
do let us know

00:47:46,160 --> 00:47:50,880
to finish off and we might run like a

00:47:48,079 --> 00:47:52,319
couple of minutes over sorry

00:47:50,880 --> 00:47:53,920
i would love to talk about what happens

00:47:52,319 --> 00:47:55,280
if we don't intervene so if we ignore

00:47:53,920 --> 00:47:57,119
security totally

00:47:55,280 --> 00:47:58,880
um will security and open source get

00:47:57,119 --> 00:48:00,480
better or worse what will be the

00:47:58,880 --> 00:48:02,240
consequence and and maybe

00:48:00,480 --> 00:48:03,839
i'll i'll kick off with my thoughts but

00:48:02,240 --> 00:48:04,480
i'd love to hear from from the entire

00:48:03,839 --> 00:48:05,920
panel

00:48:04,480 --> 00:48:07,920
um from my view i guess from the

00:48:05,920 --> 00:48:09,760
research review there's a growing number

00:48:07,920 --> 00:48:11,760
of vulnerabilities in the wild right

00:48:09,760 --> 00:48:13,440
every day we can expect that the number

00:48:11,760 --> 00:48:14,880
of lines of code that's being committed

00:48:13,440 --> 00:48:15,760
on average is probably more than the

00:48:14,880 --> 00:48:16,960
previous day

00:48:15,760 --> 00:48:18,720
and we have no reason to believe that

00:48:16,960 --> 00:48:19,280
there's less vulnerabilities in that

00:48:18,720 --> 00:48:20,960
code

00:48:19,280 --> 00:48:22,640
actually we have good reasons to believe

00:48:20,960 --> 00:48:23,200
there's more vulnerabilities in that

00:48:22,640 --> 00:48:25,680
code

00:48:23,200 --> 00:48:27,680
as code bases get more and more complex

00:48:25,680 --> 00:48:29,680
it gets harder and harder to filter out

00:48:27,680 --> 00:48:31,599
phones just through doing scanning so

00:48:29,680 --> 00:48:33,680
like as crowbed mentioned

00:48:31,599 --> 00:48:35,359
it's not just about tooling if the tools

00:48:33,680 --> 00:48:37,359
can't find the bugs because they involve

00:48:35,359 --> 00:48:38,400
these magical abstractions that require

00:48:37,359 --> 00:48:39,839
some analysts

00:48:38,400 --> 00:48:41,440
thinking about several different pieces

00:48:39,839 --> 00:48:42,559
of the code base at one time

00:48:41,440 --> 00:48:45,280
those are actually going to be even

00:48:42,559 --> 00:48:47,280
harder to find with just the basic tools

00:48:45,280 --> 00:48:48,559
so we're seeing an increased number of

00:48:47,280 --> 00:48:50,400
like lines of code

00:48:48,559 --> 00:48:52,640
um you know open source projects every

00:48:50,400 --> 00:48:54,640
day and consequently a growing

00:48:52,640 --> 00:48:56,160
number of exploitable vulnerabilities

00:48:54,640 --> 00:48:58,160
that are likely in that code

00:48:56,160 --> 00:48:59,599
security as its practice right now does

00:48:58,160 --> 00:49:01,440
not necessarily scale

00:48:59,599 --> 00:49:03,680
there are some scalable things but like

00:49:01,440 --> 00:49:05,359
in general it doesn't super scale well

00:49:03,680 --> 00:49:07,119
um and we think that it'll probably get

00:49:05,359 --> 00:49:09,760
harder and harder for defenders

00:49:07,119 --> 00:49:11,359
um especially as advancements in

00:49:09,760 --> 00:49:14,079
automated bug fun

00:49:11,359 --> 00:49:15,599
bug finding unfold so when we talk about

00:49:14,079 --> 00:49:17,680
tooling not being very good

00:49:15,599 --> 00:49:18,640
tooling is going to get better over time

00:49:17,680 --> 00:49:20,720
and the real thing

00:49:18,640 --> 00:49:22,480
is who's using that tooling is it the

00:49:20,720 --> 00:49:24,559
defenders and the maintainers finding

00:49:22,480 --> 00:49:27,520
the bugs before they commit stuff or

00:49:24,559 --> 00:49:29,440
or very early on or is it that you know

00:49:27,520 --> 00:49:30,000
people with malicious intent perhaps out

00:49:29,440 --> 00:49:32,480
in the wild

00:49:30,000 --> 00:49:34,240
on the internet are making use of these

00:49:32,480 --> 00:49:34,880
tools and that's that's the big tension

00:49:34,240 --> 00:49:36,960
i think

00:49:34,880 --> 00:49:38,559
um so some of the things that we worry

00:49:36,960 --> 00:49:40,480
about when we think about

00:49:38,559 --> 00:49:42,319
attackers getting really good would be

00:49:40,480 --> 00:49:43,920
like large-scale fuzzing

00:49:42,319 --> 00:49:45,760
um innovations in something called

00:49:43,920 --> 00:49:47,200
program analysis wiki that if you've

00:49:45,760 --> 00:49:48,720
never seen it it's um

00:49:47,200 --> 00:49:50,800
a ways of looking at code for

00:49:48,720 --> 00:49:52,559
vulnerabilities but we've also seen

00:49:50,800 --> 00:49:54,160
query languages like codeql where you

00:49:52,559 --> 00:49:54,880
can find classes of vulnerabilities

00:49:54,160 --> 00:49:57,359
across

00:49:54,880 --> 00:49:58,880
many code bases we've also seen some

00:49:57,359 --> 00:50:00,240
good work with machine learning over

00:49:58,880 --> 00:50:01,280
source code to identify

00:50:00,240 --> 00:50:03,359
certain patterns in which

00:50:01,280 --> 00:50:04,960
vulnerabilities tend to show up

00:50:03,359 --> 00:50:07,040
there's even a field in security known

00:50:04,960 --> 00:50:10,079
as automated exploit generation

00:50:07,040 --> 00:50:11,119
aeg which is all about if you find a bug

00:50:10,079 --> 00:50:13,119
how to chain stuff

00:50:11,119 --> 00:50:14,800
together in an efficient way so that you

00:50:13,119 --> 00:50:16,480
can start exploiting it quickly so

00:50:14,800 --> 00:50:17,760
there's a lot of things that will scale

00:50:16,480 --> 00:50:20,400
up that are scary for

00:50:17,760 --> 00:50:21,040
offenders and i think that it's all it's

00:50:20,400 --> 00:50:23,119
all about

00:50:21,040 --> 00:50:25,359
understanding and making use of those in

00:50:23,119 --> 00:50:27,520
a defensive capacity over time

00:50:25,359 --> 00:50:29,680
and by having interfaith interventions

00:50:27,520 --> 00:50:32,240
like what we're working on at openssf

00:50:29,680 --> 00:50:33,760
we're trying to create a um you know

00:50:32,240 --> 00:50:35,440
body of knowledge and body of work where

00:50:33,760 --> 00:50:37,280
we're able to scalably

00:50:35,440 --> 00:50:39,040
make use of these innovations to help

00:50:37,280 --> 00:50:41,200
make open source software

00:50:39,040 --> 00:50:43,599
more secure but it's always that tension

00:50:41,200 --> 00:50:45,599
between the dual use nature of using it

00:50:43,599 --> 00:50:47,200
for defense or using it for attack

00:50:45,599 --> 00:50:49,520
um but i think there's reasons for hope

00:50:47,200 --> 00:50:52,240
and and i think open ssf is

00:50:49,520 --> 00:50:53,440
trying to to build those reasons um

00:50:52,240 --> 00:50:55,119
otherwise what are your thoughts what

00:50:53,440 --> 00:50:56,480
what will happen will security get

00:50:55,119 --> 00:50:59,599
better or worse

00:50:56,480 --> 00:51:00,960
well i i think if you don't intervene i

00:50:59,599 --> 00:51:03,440
mean it's not going to get better

00:51:00,960 --> 00:51:04,720
unless you're talking about bitcoin

00:51:03,440 --> 00:51:08,079
right then yeah it always got better

00:51:04,720 --> 00:51:10,880
without doing anything

00:51:08,079 --> 00:51:12,720
jobs aside i think you we all i think

00:51:10,880 --> 00:51:14,800
you raised good point and

00:51:12,720 --> 00:51:15,920
everyone writes good point not

00:51:14,800 --> 00:51:19,280
technically two

00:51:15,920 --> 00:51:20,720
i think as we all know the open source

00:51:19,280 --> 00:51:22,400
is tremendously growing

00:51:20,720 --> 00:51:24,880
vulnerabilities are growing and also

00:51:22,400 --> 00:51:26,240
we're seeing highly complex

00:51:24,880 --> 00:51:28,480
not well-known vulnerabilities

00:51:26,240 --> 00:51:30,400
introduced every year so

00:51:28,480 --> 00:51:32,160
i think we all need to work as a group

00:51:30,400 --> 00:51:34,720
maintainers researchers

00:51:32,160 --> 00:51:37,040
and corporations to address the problem

00:51:34,720 --> 00:51:39,040
and if we don't do it we lose this

00:51:37,040 --> 00:51:41,520
opportunity to fix in the beginning

00:51:39,040 --> 00:51:43,520
before it's uncontrollable right and

00:51:41,520 --> 00:51:45,520
alright i'll finish with one thought

00:51:43,520 --> 00:51:48,400
it's not always technical though and

00:51:45,520 --> 00:51:50,640
most of the maintainers and developers

00:51:48,400 --> 00:51:51,839
actually are employed by other companies

00:51:50,640 --> 00:51:54,480
and they have a day job

00:51:51,839 --> 00:51:56,319
so you have to work on other stuff other

00:51:54,480 --> 00:51:58,720
than these projects so

00:51:56,319 --> 00:52:00,079
we can't put a button on these develop

00:51:58,720 --> 00:52:01,040
developers and contributors and

00:52:00,079 --> 00:52:03,599
maintainers

00:52:01,040 --> 00:52:04,079
to keep up the software so for that i

00:52:03,599 --> 00:52:06,000
would say

00:52:04,079 --> 00:52:07,440
talk to your employer talk to your

00:52:06,000 --> 00:52:10,319
employer and

00:52:07,440 --> 00:52:12,480
convince them that why this software is

00:52:10,319 --> 00:52:14,240
helping the other corporations and why

00:52:12,480 --> 00:52:16,079
how we are actually taking help from

00:52:14,240 --> 00:52:18,240
that corporation so that

00:52:16,079 --> 00:52:19,680
you get a dedicated time to work on

00:52:18,240 --> 00:52:21,599
these open source projects

00:52:19,680 --> 00:52:23,440
i've been doing in the companies i've

00:52:21,599 --> 00:52:25,359
been working on leading is all my

00:52:23,440 --> 00:52:28,240
developers get a certain time of

00:52:25,359 --> 00:52:30,319
time of the week to work on contribute

00:52:28,240 --> 00:52:32,000
back to the open source projects

00:52:30,319 --> 00:52:34,240
i think every corporation like that

00:52:32,000 --> 00:52:35,119
because it's changing and i see the

00:52:34,240 --> 00:52:36,720
trends in

00:52:35,119 --> 00:52:38,559
they're realizing the value of the open

00:52:36,720 --> 00:52:39,599
source so they are okay to contribute

00:52:38,559 --> 00:52:42,160
back

00:52:39,599 --> 00:52:44,319
so i would say use that and that's the

00:52:42,160 --> 00:52:48,400
only way we can scale up i mean

00:52:44,319 --> 00:52:50,160
researchers cannot help single-handedly

00:52:48,400 --> 00:52:52,800
our developers cannot have that that

00:52:50,160 --> 00:52:55,839
much burden working on multiple jobs so

00:52:52,800 --> 00:52:55,839
that's my final thought

00:52:56,960 --> 00:53:00,079
yeah so i i you know i'm an optimist in

00:52:59,520 --> 00:53:02,319
that i

00:53:00,079 --> 00:53:03,440
i think that there are you know changes

00:53:02,319 --> 00:53:06,640
coming along and

00:53:03,440 --> 00:53:08,800
um you know things being automated

00:53:06,640 --> 00:53:10,400
um that that will help us i don't think

00:53:08,800 --> 00:53:12,480
that this will happen

00:53:10,400 --> 00:53:14,800
on its own i think that you know without

00:53:12,480 --> 00:53:15,920
concerted effort um the security doesn't

00:53:14,800 --> 00:53:18,800
get better

00:53:15,920 --> 00:53:20,880
um but i think that you know we are

00:53:18,800 --> 00:53:23,200
putting that concerted effort in

00:53:20,880 --> 00:53:24,400
um i think that there's there's kind of

00:53:23,200 --> 00:53:26,880
a carrot and a stick

00:53:24,400 --> 00:53:27,680
aspect to this that will make it you

00:53:26,880 --> 00:53:30,720
know really

00:53:27,680 --> 00:53:32,480
better over time one is that developer

00:53:30,720 --> 00:53:35,520
tooling will get better about

00:53:32,480 --> 00:53:37,520
having security by default requiring

00:53:35,520 --> 00:53:39,920
security as developers create new

00:53:37,520 --> 00:53:42,640
new projects providing information to

00:53:39,920 --> 00:53:44,319
developers about vulnerabilities and

00:53:42,640 --> 00:53:45,920
steps that they can take and best

00:53:44,319 --> 00:53:48,400
practices

00:53:45,920 --> 00:53:49,119
another piece i think that we'll see

00:53:48,400 --> 00:53:51,520
happening

00:53:49,119 --> 00:53:52,880
is some automated infrastructure that

00:53:51,520 --> 00:53:54,480
allows

00:53:52,880 --> 00:53:56,559
capturing information about what was

00:53:54,480 --> 00:53:59,119
done during the creation of software

00:53:56,559 --> 00:53:59,839
and then applying policy about what will

00:53:59,119 --> 00:54:02,160
you know what

00:53:59,839 --> 00:54:03,200
can be accepted on the other end and

00:54:02,160 --> 00:54:05,440
with that

00:54:03,200 --> 00:54:07,599
cycle of somebody's setting policy that

00:54:05,440 --> 00:54:09,920
says i i will only take software

00:54:07,599 --> 00:54:11,440
that's been committed where the code

00:54:09,920 --> 00:54:12,400
commits are done using two-factor

00:54:11,440 --> 00:54:14,720
authentication

00:54:12,400 --> 00:54:16,480
then all of a sudden you know the system

00:54:14,720 --> 00:54:18,720
starts to build you know even more than

00:54:16,480 --> 00:54:21,119
it is already starts to build that in

00:54:18,720 --> 00:54:23,040
so with this you know automated system

00:54:21,119 --> 00:54:23,520
of providing information about what was

00:54:23,040 --> 00:54:26,400
done

00:54:23,520 --> 00:54:28,319
um having policy this is what will be

00:54:26,400 --> 00:54:32,319
accepted and some verification

00:54:28,319 --> 00:54:33,359
of policy um that's some some fun stuff

00:54:32,319 --> 00:54:35,760
that we're looking forward

00:54:33,359 --> 00:54:39,119
well from a corporate point of view that

00:54:35,760 --> 00:54:42,160
we're looking forward to in the future

00:54:39,119 --> 00:54:44,720
from my perspective we have a boggle

00:54:42,160 --> 00:54:46,880
where the ecosystem is getting

00:54:44,720 --> 00:54:48,960
exponentially more complex

00:54:46,880 --> 00:54:50,079
you look at vulnerabilities like spectre

00:54:48,960 --> 00:54:52,720
and meltdown

00:54:50,079 --> 00:54:53,839
where it re it was a incredibly

00:54:52,720 --> 00:54:56,400
technically difficult

00:54:53,839 --> 00:54:58,559
problem to find and then solve and it

00:54:56,400 --> 00:54:59,119
involved a lot of different stakeholders

00:54:58,559 --> 00:55:01,839
across

00:54:59,119 --> 00:55:02,559
the industry ecosystem it was a both a

00:55:01,839 --> 00:55:04,880
hardware

00:55:02,559 --> 00:55:06,079
and a software problem it was a hardware

00:55:04,880 --> 00:55:08,000
problem that had

00:55:06,079 --> 00:55:10,400
um the software was had the ability to

00:55:08,000 --> 00:55:11,839
help correct and so we're seeing more of

00:55:10,400 --> 00:55:13,200
these blended attacks

00:55:11,839 --> 00:55:15,520
things are more complex as that

00:55:13,200 --> 00:55:18,319
dependency tree branches out

00:55:15,520 --> 00:55:20,000
um but i am very optimistic about it you

00:55:18,319 --> 00:55:23,599
know we've been involved in the

00:55:20,000 --> 00:55:24,480
community for decades and i think this

00:55:23,599 --> 00:55:28,319
is the most

00:55:24,480 --> 00:55:30,400
exciting passionate talented group of

00:55:28,319 --> 00:55:32,400
developers and practitioners that i've

00:55:30,400 --> 00:55:34,559
ever had the opportunity to work with

00:55:32,400 --> 00:55:35,599
and you know initiatives like um the

00:55:34,559 --> 00:55:37,040
open ssf

00:55:35,599 --> 00:55:38,880
um things like the forum of incident

00:55:37,040 --> 00:55:40,400
response and security teams we're all

00:55:38,880 --> 00:55:42,559
starting to talk to each other and

00:55:40,400 --> 00:55:44,720
how we're gonna solve this problem of

00:55:42,559 --> 00:55:47,680
this complexity and this

00:55:44,720 --> 00:55:49,440
kind of snowballing of the potential for

00:55:47,680 --> 00:55:52,000
vulnerabilities and threats

00:55:49,440 --> 00:55:53,680
is communication having these good

00:55:52,000 --> 00:55:54,720
practices like coordinated vulnerability

00:55:53,680 --> 00:55:56,720
disclosure

00:55:54,720 --> 00:55:58,400
um having policies or setting

00:55:56,720 --> 00:56:00,240
expectations and be able to communicate

00:55:58,400 --> 00:56:02,079
between the different types of people

00:56:00,240 --> 00:56:03,599
involved in this process and a lot of

00:56:02,079 --> 00:56:06,480
the breakdown

00:56:03,599 --> 00:56:07,280
um when things go poorly it's it's a

00:56:06,480 --> 00:56:09,520
mismatch

00:56:07,280 --> 00:56:10,559
of perception that the researcher

00:56:09,520 --> 00:56:12,079
doesn't understand

00:56:10,559 --> 00:56:14,000
the developer and the developer doesn't

00:56:12,079 --> 00:56:15,760
understand the researcher and the more

00:56:14,000 --> 00:56:16,079
we talk the more we have these forums

00:56:15,760 --> 00:56:18,160
and

00:56:16,079 --> 00:56:19,920
have resources to help each other out

00:56:18,160 --> 00:56:22,960
and kind of educate each other

00:56:19,920 --> 00:56:22,960
the better off we're all going to be

00:56:23,760 --> 00:56:27,920
all right on that note i think that

00:56:26,079 --> 00:56:29,119
mostly summarizes what we wanted to talk

00:56:27,920 --> 00:56:30,880
about today

00:56:29,119 --> 00:56:32,240
thank you everyone so much for joining

00:56:30,880 --> 00:56:34,000
us for this panel

00:56:32,240 --> 00:56:35,920
um for staying a little bit late because

00:56:34,000 --> 00:56:37,599
we had more thoughts we wanted to share

00:56:35,920 --> 00:56:39,680
and especially to foss backstage for

00:56:37,599 --> 00:56:41,200
hosting us today um we're happy to take

00:56:39,680 --> 00:56:43,359
questions here or

00:56:41,200 --> 00:56:44,880
in the question meeting room or

00:56:43,359 --> 00:56:59,839
something that i think exists

00:56:44,880 --> 00:56:59,839
so thanks everyone

00:57:05,440 --> 00:57:07,520

YouTube URL: https://www.youtube.com/watch?v=i0D29XXXSBc


