Title: Berlin Buzzwords 2018: Varun Thacker – Practical Use-Cases of Solr's AutoScaling Framework #bbuzz
Publication date: 2018-06-13
Playlist: Berlin Buzzwords 2018 #bbuzz
Description: 
	The goal of Solr's AutoScaling framework is for search clusters to be able to grow to a trillion documents without much human intervention. The first part of the talk covers AutoScaling framework concepts. We'll talk about AutoScaling Policies and Preferences, the AutoScaling API and event triggers. 

Further, we’ll discuss practical use-cases to keep the cluster healthy and performing optimally, complete with fault tolerance. For example, we'll cover how to achieve these scenarios by utilizing the framework.

Effectively managing disk space by setting triggers and sending out alerts. Maintaining a minimum replication factor when nodes go down. We'll also use rules to make sure the replicas are spread out, thus maximizing fault tolerance.

Scaling out replicas to serve more traffic by setting thresholds. The thresholds could be latency or QPS based. We could also run it as schedulers to better serve peak load. Move replicas around to balance load across the cluster. Indexing triggers: Are shards getting too large? Support for auto shard splits etc.

Read more:
https://2018.berlinbuzzwords.de/18/session/practical-use-cases-solrs-autoscaling-framework

About Varun Thacker:
https://2018.berlinbuzzwords.de/users/varun-thacker

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:04,509 --> 00:00:11,110
hi I'm Varun and we are representing

00:00:08,320 --> 00:00:13,689
lucid works giving a talk on our Soler's

00:00:11,110 --> 00:00:17,230
auto-scaling framework and essentially

00:00:13,689 --> 00:00:19,480
what we are going to learn is how how

00:00:17,230 --> 00:00:22,960
the Soler's new auto-scaling framework

00:00:19,480 --> 00:00:24,910
help you build out abstractions so that

00:00:22,960 --> 00:00:29,080
you don't need to deal with lower-level

00:00:24,910 --> 00:00:32,439
api's to make life easier for you to do

00:00:29,080 --> 00:00:34,210
operations within a solar cluster so the

00:00:32,439 --> 00:00:36,399
agenda being we cannot discuss briefly

00:00:34,210 --> 00:00:39,069
about what is auto-scaling

00:00:36,399 --> 00:00:40,870
then go through concepts like what is

00:00:39,069 --> 00:00:43,929
auto scaling policies what is a

00:00:40,870 --> 00:00:48,069
preference how does the API work and

00:00:43,929 --> 00:00:51,339
then how does this tie into asking solar

00:00:48,069 --> 00:00:54,639
to trigger and do actions on behalf of

00:00:51,339 --> 00:00:57,039
the cluster so while discussing these

00:00:54,639 --> 00:00:58,989
concepts we are going to learn and come

00:00:57,039 --> 00:01:03,309
up with examples of how to use this

00:00:58,989 --> 00:01:05,560
within your cluster so the goal of when

00:01:03,309 --> 00:01:08,140
like the team started working with auto

00:01:05,560 --> 00:01:10,690
scaling was you want to auto scale a

00:01:08,140 --> 00:01:14,320
solar cluster to a trillion documents

00:01:10,690 --> 00:01:16,960
with minimal human intervention by that

00:01:14,320 --> 00:01:19,120
you do not need to build deep solar

00:01:16,960 --> 00:01:22,660
expertise or have like a huge solar

00:01:19,120 --> 00:01:25,330
DevOps team to reach this goal right so

00:01:22,660 --> 00:01:27,550
solar should help you build this out of

00:01:25,330 --> 00:01:31,390
the box so that was the goal we started

00:01:27,550 --> 00:01:33,550
building this framework with why do we

00:01:31,390 --> 00:01:35,980
need auto scaling operations is hard to

00:01:33,550 --> 00:01:37,480
scale right like an Jung who's been

00:01:35,980 --> 00:01:40,180
working on the operations or the

00:01:37,480 --> 00:01:41,440
platform side of things you get sucked

00:01:40,180 --> 00:01:43,600
into this and sometimes it's

00:01:41,440 --> 00:01:47,260
time-consuming it's stuff to build

00:01:43,600 --> 00:01:49,750
expertise and you always require tooling

00:01:47,260 --> 00:01:51,490
around so that you can manage your solar

00:01:49,750 --> 00:01:54,400
cluster right you or not you can't

00:01:51,490 --> 00:01:56,680
manually go start moving replicas around

00:01:54,400 --> 00:02:00,220
that's just not a scalable model right

00:01:56,680 --> 00:02:02,740
so till like the auto scaling framework

00:02:00,220 --> 00:02:05,170
you would get very low-level api is from

00:02:02,740 --> 00:02:07,840
solar so you could have a ps2 move a

00:02:05,170 --> 00:02:09,610
replica from machine 1 to Machine 2 but

00:02:07,840 --> 00:02:12,879
it wouldn't tell you which is the best

00:02:09,610 --> 00:02:15,010
machine I should move the replica to so

00:02:12,879 --> 00:02:16,740
those are the things that we wanted to

00:02:15,010 --> 00:02:20,280
build out in the auto scaling

00:02:16,740 --> 00:02:24,060
framework so how in in a nutshell

00:02:20,280 --> 00:02:27,120
essentially you provide some constraints

00:02:24,060 --> 00:02:29,280
and assumptions about your cluster so

00:02:27,120 --> 00:02:32,930
you define some rules you define what's

00:02:29,280 --> 00:02:36,270
important for me you say is CPU disk

00:02:32,930 --> 00:02:37,890
search latency or update throughput what

00:02:36,270 --> 00:02:41,550
are the constraints that are important

00:02:37,890 --> 00:02:44,160
to you and solar will help you with what

00:02:41,550 --> 00:02:48,690
operations are required to reach that

00:02:44,160 --> 00:02:51,510
desired state now how would you describe

00:02:48,690 --> 00:02:54,120
the cluster right if I want to describe

00:02:51,510 --> 00:02:57,210
the cluster it's going to be a two-part

00:02:54,120 --> 00:02:59,280
process the first part is how do I lay

00:02:57,210 --> 00:03:02,400
out my cluster so some basic assumptions

00:02:59,280 --> 00:03:06,240
about my cluster I want replicas on

00:03:02,400 --> 00:03:09,330
unique nodes people hosting say multiple

00:03:06,240 --> 00:03:12,090
JVMs on the same node you don't want

00:03:09,330 --> 00:03:14,130
solar to add replicas such that both the

00:03:12,090 --> 00:03:17,010
replicas sit on the same physical

00:03:14,130 --> 00:03:20,820
machine right so solar can be Noda where

00:03:17,010 --> 00:03:24,750
things like that all replicas of a shard

00:03:20,820 --> 00:03:27,030
must be on the same rack so if you can

00:03:24,750 --> 00:03:29,910
utilize that at query time then you make

00:03:27,030 --> 00:03:32,100
sure that you improve Layton sees at

00:03:29,910 --> 00:03:34,050
least two replicas must be on the same

00:03:32,100 --> 00:03:37,380
rack and these are just a few examples

00:03:34,050 --> 00:03:39,480
of how you want to define these clusters

00:03:37,380 --> 00:03:42,840
right you don't you want to make sure

00:03:39,480 --> 00:03:45,930
that no particular solar JVM contains

00:03:42,840 --> 00:03:47,370
more than say for solar nodes so what

00:03:45,930 --> 00:03:50,430
that'll ensure is you're never

00:03:47,370 --> 00:03:53,460
overloading one particular JVM right you

00:03:50,430 --> 00:03:56,340
are maxing it out at four cores or four

00:03:53,460 --> 00:03:58,860
replicas the second part about

00:03:56,340 --> 00:04:01,470
describing of cluster is you want solar

00:03:58,860 --> 00:04:04,920
to provide some tools or some ways to

00:04:01,470 --> 00:04:07,440
understand if I reach a state where I

00:04:04,920 --> 00:04:08,340
have more machines or I want to move

00:04:07,440 --> 00:04:11,880
things around

00:04:08,340 --> 00:04:13,800
what is important to me so you want to

00:04:11,880 --> 00:04:17,359
be able to define whether system load

00:04:13,800 --> 00:04:19,950
average say free disk space heap usage

00:04:17,359 --> 00:04:21,900
number of existing solar codes so you

00:04:19,950 --> 00:04:24,510
want to provided some intrinsic values

00:04:21,900 --> 00:04:28,410
where you basically say now I'm going to

00:04:24,510 --> 00:04:30,900
use these to then move things around and

00:04:28,410 --> 00:04:31,249
we're going to talk about exactly this

00:04:30,900 --> 00:04:33,499
this

00:04:31,249 --> 00:04:38,169
driving your cluster in terms of

00:04:33,499 --> 00:04:40,249
auto-scaling policies and preferences so

00:04:38,169 --> 00:04:42,829
let's start with auto-scaling

00:04:40,249 --> 00:04:45,109
policies so auto-scaling policies are

00:04:42,829 --> 00:04:48,199
nothing but it defines the desired layer

00:04:45,109 --> 00:04:50,119
layout of the cluster essentially it can

00:04:48,199 --> 00:04:53,179
be done at the cluster level or a per

00:04:50,119 --> 00:04:56,839
collection level think of it as how many

00:04:53,179 --> 00:04:59,119
people use the old replica base like the

00:04:56,839 --> 00:05:00,979
rule based placement strategy where you

00:04:59,119 --> 00:05:03,949
want to define some rules for the

00:05:00,979 --> 00:05:07,489
cluster so this encompasses that in a

00:05:03,949 --> 00:05:09,499
more holistic way within solar so the

00:05:07,489 --> 00:05:13,099
example that I gave you right you want

00:05:09,499 --> 00:05:17,449
to set a rule in the cluster where no

00:05:13,099 --> 00:05:18,919
two replicas sit on the same node that

00:05:17,449 --> 00:05:20,419
could happen if you have multiple

00:05:18,919 --> 00:05:23,149
jaebeum's running on the same physical

00:05:20,419 --> 00:05:25,699
machine right so you want to provide

00:05:23,149 --> 00:05:30,709
rules such that so some examples that

00:05:25,699 --> 00:05:32,419
for auto scaling policies would be here

00:05:30,709 --> 00:05:35,329
is the syntax where you would go ahead

00:05:32,419 --> 00:05:38,029
and say any node in the solar cluster

00:05:35,329 --> 00:05:40,309
must not have more than five solar cores

00:05:38,029 --> 00:05:42,679
of Phi replicas right so you would say

00:05:40,309 --> 00:05:47,239
for any node I want to make sure that

00:05:42,679 --> 00:05:48,979
the replicas count is less than five now

00:05:47,239 --> 00:05:51,259
if you want to do that at a pearl

00:05:48,979 --> 00:05:54,619
collection basis so now you wanna say

00:05:51,259 --> 00:05:58,909
for each collection I want to make sure

00:05:54,619 --> 00:06:00,709
that replicas sit on unique nodes so by

00:05:58,909 --> 00:06:02,929
saying this I am making sure that my

00:06:00,709 --> 00:06:06,079
collection is spread out across the

00:06:02,929 --> 00:06:09,409
cluster the second example basically

00:06:06,079 --> 00:06:14,449
says do not place more than one replica

00:06:09,409 --> 00:06:18,469
of a shard on unknown now if you remove

00:06:14,449 --> 00:06:21,649
the shard like if without the shard each

00:06:18,469 --> 00:06:23,360
clause in the syntax this rule would

00:06:21,649 --> 00:06:26,269
apply to the entire collection so you

00:06:23,360 --> 00:06:33,229
can say for each collection offer each

00:06:26,269 --> 00:06:35,479
shard now I have a use case where say

00:06:33,229 --> 00:06:38,779
you want to spread out replicas across

00:06:35,479 --> 00:06:41,110
availability zones right so if you have

00:06:38,779 --> 00:06:43,200
hosting solar on AWS or whatever

00:06:41,110 --> 00:06:45,660
provider that you use

00:06:43,200 --> 00:06:49,110
I want to spread it spread my replicas

00:06:45,660 --> 00:06:51,600
across availability zones so all you

00:06:49,110 --> 00:06:54,390
need to do now is when you start a solar

00:06:51,600 --> 00:06:56,280
noon you give it a system property just

00:06:54,390 --> 00:06:58,470
a tag right so you want to give it a tag

00:06:56,280 --> 00:07:01,290
saying this is availability zone 1 or

00:06:58,470 --> 00:07:03,750
this is availability zone 2 while

00:07:01,290 --> 00:07:06,510
starting up a solar known and then you

00:07:03,750 --> 00:07:09,030
can define two rules where you're saying

00:07:06,510 --> 00:07:11,910
basically for each shard make sure that

00:07:09,030 --> 00:07:15,660
the replicas count is always less than 2

00:07:11,910 --> 00:07:18,420
so if I'm creating a to a collection

00:07:15,660 --> 00:07:20,730
which has two replicas I want to make

00:07:18,420 --> 00:07:23,070
sure spread across the two availability

00:07:20,730 --> 00:07:25,350
zones so I'm creating a rule to say on

00:07:23,070 --> 00:07:27,930
the first availability zone make sure

00:07:25,350 --> 00:07:30,540
you only have one replicas and do the

00:07:27,930 --> 00:07:32,810
same for the other availability zone so

00:07:30,540 --> 00:07:35,850
in this example I'm spreading it across

00:07:32,810 --> 00:07:38,730
two availability zones and this is

00:07:35,850 --> 00:07:40,260
essentially morph this nicely morphs

00:07:38,730 --> 00:07:43,440
into the same example that I've been

00:07:40,260 --> 00:07:45,210
talking about where multiple JVMs you

00:07:43,440 --> 00:07:47,490
could start up and you could say this is

00:07:45,210 --> 00:07:50,310
belonging to a system property where you

00:07:47,490 --> 00:07:54,870
say this is node 1 right and you want to

00:07:50,310 --> 00:07:58,170
ensure that they're on unique nodes now

00:07:54,870 --> 00:08:00,810
how does the policy EPA look like it's

00:07:58,170 --> 00:08:03,120
basically saying you define this Jason

00:08:00,810 --> 00:08:05,550
where you say set my cluster property

00:08:03,120 --> 00:08:07,800
your policy and essentially you give it

00:08:05,550 --> 00:08:10,830
all the rules that you want the cluster

00:08:07,800 --> 00:08:13,170
to obey so every action that you now do

00:08:10,830 --> 00:08:15,810
on the cluster will obey these rules and

00:08:13,170 --> 00:08:21,680
if it can't be satisfied you will not be

00:08:15,810 --> 00:08:25,320
able to complete that operation so

00:08:21,680 --> 00:08:27,570
policies went and said these are my

00:08:25,320 --> 00:08:31,170
heart rules that I want to define for my

00:08:27,570 --> 00:08:34,860
cluster the second aspect was I want to

00:08:31,170 --> 00:08:37,979
be able to define some preferences which

00:08:34,860 --> 00:08:40,979
is basically a language to define load

00:08:37,979 --> 00:08:45,120
is how I look at it what you're telling

00:08:40,979 --> 00:08:49,560
solar is within you have multiple knowns

00:08:45,120 --> 00:08:53,320
how do I say which one is more active so

00:08:49,560 --> 00:08:56,320
if I want if I get more resources which

00:08:53,320 --> 00:08:58,990
is more burdened and which replica from

00:08:56,320 --> 00:09:01,839
those nodes can I move to some extra

00:08:58,990 --> 00:09:04,029
hardware right so you want to define a

00:09:01,839 --> 00:09:08,050
language where you can specify what's

00:09:04,029 --> 00:09:10,899
important in your case so preferences

00:09:08,050 --> 00:09:13,690
since the defined load is essentially

00:09:10,899 --> 00:09:15,399
only at a cluster level the policies

00:09:13,690 --> 00:09:17,709
could be at a cluster level or it could

00:09:15,399 --> 00:09:21,250
have been at a per collection level but

00:09:17,709 --> 00:09:25,029
preferences always apply to the cluster

00:09:21,250 --> 00:09:27,790
level these aren't hard conditions so a

00:09:25,029 --> 00:09:29,670
policy was a hard condition where you

00:09:27,790 --> 00:09:32,079
said make sure that they're never

00:09:29,670 --> 00:09:35,380
violating a rule where availability

00:09:32,079 --> 00:09:38,589
zones can have more all my replicas

00:09:35,380 --> 00:09:41,319
right but preferences is not a hard rule

00:09:38,589 --> 00:09:46,060
we are saying how do I sort that how do

00:09:41,319 --> 00:09:47,889
i define the cluster load so a few

00:09:46,060 --> 00:09:50,110
metrics that you could say define your

00:09:47,889 --> 00:09:53,350
cluster load on would be saying the

00:09:50,110 --> 00:09:55,389
number of solo course if free disk is a

00:09:53,350 --> 00:09:58,209
concern you can define it on the disk

00:09:55,389 --> 00:10:00,120
space that I have left on my nodes the

00:09:58,209 --> 00:10:02,680
heap usage so if you're using a lot of

00:10:00,120 --> 00:10:04,510
caching in solar then like maybe you

00:10:02,680 --> 00:10:07,870
have more replicas sitting on the node

00:10:04,510 --> 00:10:10,300
and the heap usage is high so you want

00:10:07,870 --> 00:10:14,649
to make sure that you want to control

00:10:10,300 --> 00:10:16,269
have control over that or like load

00:10:14,649 --> 00:10:18,399
average right so you could pick these

00:10:16,269 --> 00:10:22,149
metrics and say what is important to me

00:10:18,399 --> 00:10:25,240
and once you define this essentially it

00:10:22,149 --> 00:10:30,220
will tell solar if it has to move things

00:10:25,240 --> 00:10:35,440
around which replicas from which node to

00:10:30,220 --> 00:10:39,130
pick right so the syntax and how you

00:10:35,440 --> 00:10:42,939
would define a preference is essentially

00:10:39,130 --> 00:10:47,769
what you tell solar is minimize encores

00:10:42,939 --> 00:10:50,110
or do you want to maximize on free disks

00:10:47,769 --> 00:10:53,259
right so you spread you basically give

00:10:50,110 --> 00:10:56,709
it the sort order where you say minimize

00:10:53,259 --> 00:10:59,380
or maximize and then you say the metric

00:10:56,709 --> 00:11:02,170
or the condition that you want to define

00:10:59,380 --> 00:11:05,860
it on so I want to minimize on course I

00:11:02,170 --> 00:11:06,490
want to maximize free disk minimize the

00:11:05,860 --> 00:11:10,510
load on

00:11:06,490 --> 00:11:15,089
system obviously and essentially this is

00:11:10,510 --> 00:11:19,779
the syntax how you would define it okay

00:11:15,089 --> 00:11:23,350
so there were criterias in this syntax

00:11:19,779 --> 00:11:25,660
where like you don't wanna judge - so

00:11:23,350 --> 00:11:28,060
learn owns if that disk space there

00:11:25,660 --> 00:11:30,330
first were like a gigabyte or like five

00:11:28,060 --> 00:11:33,730
gigabytes read that might be some

00:11:30,330 --> 00:11:36,610
intermediary proceeded like that's not

00:11:33,730 --> 00:11:40,420
enough reason to say node one is more

00:11:36,610 --> 00:11:43,510
important than node 2 so we also have

00:11:40,420 --> 00:11:45,520
this option called precision where you

00:11:43,510 --> 00:11:49,390
basically tell solo that if it's within

00:11:45,520 --> 00:11:53,529
a precision level of in this case 10 so

00:11:49,390 --> 00:11:55,810
both nodes treat them equally right so

00:11:53,529 --> 00:11:59,110
if the difference between the values of

00:11:55,810 --> 00:12:01,510
free disks for to solar nodes is within

00:11:59,110 --> 00:12:05,430
this precision level they are considered

00:12:01,510 --> 00:12:08,950
equivalent now you can define multiple

00:12:05,430 --> 00:12:13,360
preferences and what you can then tell

00:12:08,950 --> 00:12:15,520
is that the precision can have you can

00:12:13,360 --> 00:12:18,130
have multiple preferences and if you

00:12:15,520 --> 00:12:20,290
have the same disk space then you move

00:12:18,130 --> 00:12:22,209
on to the next choice right you move on

00:12:20,290 --> 00:12:25,570
to the next preference that you've

00:12:22,209 --> 00:12:28,779
defined so you can define a list of

00:12:25,570 --> 00:12:34,630
references that solo will sort solar

00:12:28,779 --> 00:12:37,209
like the nodes on the EPR to do such a

00:12:34,630 --> 00:12:41,260
thing would be you would say defines

00:12:37,209 --> 00:12:43,270
cluster preferences you would define the

00:12:41,260 --> 00:12:45,490
rules that you care about so here I'm

00:12:43,270 --> 00:12:49,209
saying I want to minimize the solar

00:12:45,490 --> 00:12:52,180
course on each node and if the solar

00:12:49,209 --> 00:12:56,740
nodes happen to have the same number of

00:12:52,180 --> 00:12:59,649
course then Pig disk space as the metric

00:12:56,740 --> 00:13:02,170
to say this machine is more loaded than

00:12:59,649 --> 00:13:07,690
the second machine right she's defining

00:13:02,170 --> 00:13:09,220
multiple preferences in this case if you

00:13:07,690 --> 00:13:11,260
just want to play around with this and

00:13:09,220 --> 00:13:15,130
understand once you have defined this

00:13:11,260 --> 00:13:18,380
how this actually works and how is it

00:13:15,130 --> 00:13:20,930
picking one solar node over the other

00:13:18,380 --> 00:13:23,150
there is a Diagnostics endpoint where

00:13:20,930 --> 00:13:27,560
you are basically it's giving you the

00:13:23,150 --> 00:13:29,990
sorted order of how it assumed that

00:13:27,560 --> 00:13:34,330
solon old one was more important than

00:13:29,990 --> 00:13:36,590
solar node 2 right so define it

00:13:34,330 --> 00:13:37,940
obviously this is something that's new

00:13:36,590 --> 00:13:39,590
you're gonna start playing around with

00:13:37,940 --> 00:13:41,900
it so you want to understand how the

00:13:39,590 --> 00:13:43,970
feature works and the diagnostic API

00:13:41,900 --> 00:13:48,590
here can be very useful because you want

00:13:43,970 --> 00:13:52,940
to be telling solo that sorted on these

00:13:48,590 --> 00:13:55,640
criterias and understand how it works so

00:13:52,940 --> 00:13:58,210
there is a sort node sorted nodes order

00:13:55,640 --> 00:14:00,980
and then essentially if you were

00:13:58,210 --> 00:14:05,810
violating right remember how I said a

00:14:00,980 --> 00:14:09,650
preferences is not a hard criteria right

00:14:05,810 --> 00:14:12,560
so but if you were still over the limit

00:14:09,650 --> 00:14:15,320
you would see these violations that you

00:14:12,560 --> 00:14:19,670
would then go ahead and be able to act

00:14:15,320 --> 00:14:22,280
on so can you see how these tools can

00:14:19,670 --> 00:14:25,040
help you build or make life for DevOps

00:14:22,280 --> 00:14:28,010
easier right you are using these tools

00:14:25,040 --> 00:14:31,340
to now visualize how my cluster is

00:14:28,010 --> 00:14:34,340
performing you don't need to row longer

00:14:31,340 --> 00:14:37,550
right EPS to figure these out you are

00:14:34,340 --> 00:14:40,520
just defining a language and saying this

00:14:37,550 --> 00:14:43,100
is what I care about you tell me how is

00:14:40,520 --> 00:14:45,740
my cluster behaving so these were the

00:14:43,100 --> 00:14:49,190
building blocks where policies and

00:14:45,740 --> 00:14:53,180
preferences can be used to figure out

00:14:49,190 --> 00:14:55,760
what to do on a solar cluster now when

00:14:53,180 --> 00:14:58,690
we added these features they were added

00:14:55,760 --> 00:15:01,280
so that all the collection api's

00:14:58,690 --> 00:15:03,500
automatically used these policies and

00:15:01,280 --> 00:15:05,990
preferences so if you go to create a

00:15:03,500 --> 00:15:08,660
collection your create collection might

00:15:05,990 --> 00:15:11,540
fail if one of the policies that you had

00:15:08,660 --> 00:15:15,170
defined is not met by the criteria right

00:15:11,540 --> 00:15:17,810
so if it's an impossible task solar will

00:15:15,170 --> 00:15:20,360
stop and say you know what you cannot do

00:15:17,810 --> 00:15:23,030
this so the policies will be violated

00:15:20,360 --> 00:15:25,460
and you'll be getting a hard error and

00:15:23,030 --> 00:15:28,910
creating the collection when you add a

00:15:25,460 --> 00:15:31,420
replica today you would need to build

00:15:28,910 --> 00:15:33,640
some smarts and be able to say

00:15:31,420 --> 00:15:36,580
when I'm adding a replica where should

00:15:33,640 --> 00:15:39,490
the replica decide today solo might just

00:15:36,580 --> 00:15:42,760
pick a node randomly right what you want

00:15:39,490 --> 00:15:45,640
to do is you want to use the preferences

00:15:42,760 --> 00:15:48,130
and policies to now just say add a

00:15:45,640 --> 00:15:51,850
replica and solar will go figure out

00:15:48,130 --> 00:15:53,320
which node to add it on so the smart

00:15:51,850 --> 00:15:55,570
that you have to build in to figure out

00:15:53,320 --> 00:15:58,660
which node it had to go to is now

00:15:55,570 --> 00:16:00,880
abstracted away similarly when you split

00:15:58,660 --> 00:16:03,220
shards or you create a shards so if

00:16:00,880 --> 00:16:06,280
you're doing manual routing you can keep

00:16:03,220 --> 00:16:08,590
adding shards over time you can use

00:16:06,280 --> 00:16:12,010
these to figure out where should the

00:16:08,590 --> 00:16:13,600
shards land up and when you back up and

00:16:12,010 --> 00:16:16,570
restore collections while doing a

00:16:13,600 --> 00:16:18,910
restore you need to figure out where is

00:16:16,570 --> 00:16:21,850
the ideal place to restore a solar

00:16:18,910 --> 00:16:26,080
collection so the restore API also taps

00:16:21,850 --> 00:16:28,680
into this so this section of the talk

00:16:26,080 --> 00:16:32,020
was essentially defining policies

00:16:28,680 --> 00:16:34,690
defining preferences so that when you do

00:16:32,020 --> 00:16:36,870
these low-level I would how I define

00:16:34,690 --> 00:16:39,280
low-level commands is an ad replica

00:16:36,870 --> 00:16:39,910
today in solar when you said add

00:16:39,280 --> 00:16:42,610
replicas

00:16:39,910 --> 00:16:45,040
I have to manually say which node should

00:16:42,610 --> 00:16:47,830
it go to so its abstracting all of these

00:16:45,040 --> 00:16:54,130
away and just helping you improve the

00:16:47,830 --> 00:16:56,890
experience so with this now that we had

00:16:54,130 --> 00:17:01,000
all of this in place we could tell solar

00:16:56,890 --> 00:17:04,060
add a feature where whenever you create

00:17:01,000 --> 00:17:07,420
a collection maintain my replication

00:17:04,060 --> 00:17:10,120
factor so it might not be obvious to a

00:17:07,420 --> 00:17:12,640
lot of people who started solar like

00:17:10,120 --> 00:17:15,220
newly that when you add a collection or

00:17:12,640 --> 00:17:17,380
create a collection and you say I want

00:17:15,220 --> 00:17:20,920
three copies of a shard right you say

00:17:17,380 --> 00:17:25,360
give me three replicas if a node was to

00:17:20,920 --> 00:17:27,940
go down solar would not maintain its

00:17:25,360 --> 00:17:30,100
replication factor so you could be down

00:17:27,940 --> 00:17:33,040
to two replicas and you would not

00:17:30,100 --> 00:17:36,340
realize this right so solar would not

00:17:33,040 --> 00:17:39,430
automatically add the third replica on

00:17:36,340 --> 00:17:41,740
nodes that were remaining so that the

00:17:39,430 --> 00:17:44,170
replication factor was continued through

00:17:41,740 --> 00:17:45,250
the life cycle of your cluster you

00:17:44,170 --> 00:17:47,020
needed to build two

00:17:45,250 --> 00:17:50,470
to make sure that if a node went down

00:17:47,020 --> 00:17:53,910
figure out which replicas resided on

00:17:50,470 --> 00:17:58,720
that and to add them to the other nodes

00:17:53,910 --> 00:18:02,500
so now you can enable something called

00:17:58,720 --> 00:18:05,530
Auto add replicas where essentially it

00:18:02,500 --> 00:18:07,120
will auto create these triggers we'll

00:18:05,530 --> 00:18:10,240
talk about triggers in just a minute

00:18:07,120 --> 00:18:12,210
where the replicas will get added to

00:18:10,240 --> 00:18:16,060
maintain the replication factor

00:18:12,210 --> 00:18:19,240
obviously this uses the defined policies

00:18:16,060 --> 00:18:21,940
and preferences while adding the new

00:18:19,240 --> 00:18:24,640
replicas all you need to do is while

00:18:21,940 --> 00:18:27,370
creating a collection pass auto add

00:18:24,640 --> 00:18:29,230
replicas equal to true while creating

00:18:27,370 --> 00:18:32,650
the collection and this feature will be

00:18:29,230 --> 00:18:34,990
enabled by default so the experiment

00:18:32,650 --> 00:18:38,800
that I did while present like making

00:18:34,990 --> 00:18:41,230
these slides was I had multiple nodes on

00:18:38,800 --> 00:18:44,230
different availability zones and what I

00:18:41,230 --> 00:18:47,830
was able to achieve was if I killed a

00:18:44,230 --> 00:18:50,200
node on one availability zone solar

00:18:47,830 --> 00:18:53,620
would go maintain the replication factor

00:18:50,200 --> 00:18:55,840
so it would add a replica and it would

00:18:53,620 --> 00:18:59,380
also respect the fact that I had defined

00:18:55,840 --> 00:19:02,380
rules to say maintain replication factor

00:18:59,380 --> 00:19:05,350
such that availability zones the concept

00:19:02,380 --> 00:19:08,200
well not more than two replicas should

00:19:05,350 --> 00:19:10,330
be on each availability zones so while

00:19:08,200 --> 00:19:13,090
adding the replicas it wouldn't go and

00:19:10,330 --> 00:19:15,700
create it on the other availability zone

00:19:13,090 --> 00:19:18,880
and now you'll have both my replicas on

00:19:15,700 --> 00:19:22,180
the other side of the other zone right

00:19:18,880 --> 00:19:24,910
so all of these this API or this feature

00:19:22,180 --> 00:19:27,550
now works with the policies and

00:19:24,910 --> 00:19:30,220
preferences that you define so this was

00:19:27,550 --> 00:19:32,350
the task that I kind of just tried out

00:19:30,220 --> 00:19:37,660
as an example so that we can speak about

00:19:32,350 --> 00:19:40,720
it now that this was added this feature

00:19:37,660 --> 00:19:43,390
kind of leverages internally something

00:19:40,720 --> 00:19:47,200
called solar auto scaling triggers and

00:19:43,390 --> 00:19:49,120
then event listeners so essentially till

00:19:47,200 --> 00:19:52,780
now you were defining rules till now you

00:19:49,120 --> 00:19:55,000
were defining preferences but solar was

00:19:52,780 --> 00:19:57,250
just giving your Diagnostics API red

00:19:55,000 --> 00:19:58,440
hood till now what we learned was you

00:19:57,250 --> 00:20:00,870
just got to see

00:19:58,440 --> 00:20:03,960
how is my cluster behaving at the

00:20:00,870 --> 00:20:07,320
current point of time but what if now

00:20:03,960 --> 00:20:10,290
you want to go and say do something with

00:20:07,320 --> 00:20:12,570
it right so act on it so which is why

00:20:10,290 --> 00:20:15,630
solo or alike auto-scaling

00:20:12,570 --> 00:20:18,720
triggers were added so triggers once

00:20:15,630 --> 00:20:21,270
activated perform actions such as

00:20:18,720 --> 00:20:23,880
evaluating the system against the

00:20:21,270 --> 00:20:27,900
configurations that you have defined so

00:20:23,880 --> 00:20:30,270
in solar 7.1 there were two triggers

00:20:27,900 --> 00:20:33,840
that were introduced the two triggers

00:20:30,270 --> 00:20:37,200
mean if a node leaves the cluster or if

00:20:33,840 --> 00:20:39,810
a node joins the cluster what do you do

00:20:37,200 --> 00:20:42,060
when these two events happen so by

00:20:39,810 --> 00:20:46,050
default what happens is in both cases

00:20:42,060 --> 00:20:49,710
you move replicas around to balance the

00:20:46,050 --> 00:20:51,420
load so if a node comes up you want to

00:20:49,710 --> 00:20:54,930
say oh you know what I have an on new

00:20:51,420 --> 00:20:58,350
node I want to balance my cluster so

00:20:54,930 --> 00:21:00,060
there was a node that had more cores or

00:20:58,350 --> 00:21:03,270
more replicas you want to move them

00:21:00,060 --> 00:21:05,670
around so you would set them add node

00:21:03,270 --> 00:21:08,700
added trigger and it would go and do

00:21:05,670 --> 00:21:10,980
this thing in solar seven three more

00:21:08,700 --> 00:21:13,800
triggers were added so you could add a

00:21:10,980 --> 00:21:16,320
search rate trigger that means anytime

00:21:13,800 --> 00:21:19,560
you cross a certain threshold of queries

00:21:16,320 --> 00:21:22,890
per second you could do like operations

00:21:19,560 --> 00:21:26,280
on it you could set our schedule trigger

00:21:22,890 --> 00:21:29,840
to do something if on a periodic basis

00:21:26,280 --> 00:21:34,730
all you could use solar metrics so solar

00:21:29,840 --> 00:21:38,010
has a matrix endpoint which has over 250

00:21:34,730 --> 00:21:40,890
metrics that it captures on each solar

00:21:38,010 --> 00:21:43,380
noon so you could leverage these metrics

00:21:40,890 --> 00:21:47,850
like a search it or an index throughput

00:21:43,380 --> 00:21:50,430
or requests per second or high CPU

00:21:47,850 --> 00:21:52,920
volume or high GC all of these metrics

00:21:50,430 --> 00:21:55,380
that solar collects you want to utilize

00:21:52,920 --> 00:21:58,530
that and say now do something based on

00:21:55,380 --> 00:22:01,980
this metric so it was very generic and

00:21:58,530 --> 00:22:04,980
could allow you to do that here is how

00:22:01,980 --> 00:22:08,980
you would define a node loss trigger so

00:22:04,980 --> 00:22:11,950
I say define a trigger called node loss

00:22:08,980 --> 00:22:15,310
and you basically say wait for 10

00:22:11,950 --> 00:22:17,440
minutes so don't just go as soon as this

00:22:15,310 --> 00:22:20,140
event happens start moving things around

00:22:17,440 --> 00:22:21,790
maybe I actually provision this node

00:22:20,140 --> 00:22:23,770
because I wanted to create a new

00:22:21,790 --> 00:22:28,000
collection or I wanted to do something

00:22:23,770 --> 00:22:30,130
that I wanted solar to not move things

00:22:28,000 --> 00:22:31,030
around because I there was something

00:22:30,130 --> 00:22:33,400
else I had in mind

00:22:31,030 --> 00:22:35,890
so you basically define a wait for and

00:22:33,400 --> 00:22:38,050
triggers can be suspended they can be

00:22:35,890 --> 00:22:40,180
paused and it can be resumed so it's not

00:22:38,050 --> 00:22:43,350
like once you define a trigger like you

00:22:40,180 --> 00:22:46,240
need to delete them to get solar to stop

00:22:43,350 --> 00:22:48,340
doing any actions on it and like we

00:22:46,240 --> 00:22:50,530
covered in this slide if you do a node

00:22:48,340 --> 00:22:52,900
lost or a node added sugar

00:22:50,530 --> 00:22:54,760
it was just move replicas around since

00:22:52,900 --> 00:22:59,140
that seemed like the logical step to do

00:22:54,760 --> 00:23:01,540
when you define these triggers similarly

00:22:59,140 --> 00:23:08,140
you say a node added trigger the same

00:23:01,540 --> 00:23:10,300
syntax you now the the one that kind of

00:23:08,140 --> 00:23:14,020
caught my attention was this search read

00:23:10,300 --> 00:23:18,490
trigger right what you wanted to see is

00:23:14,020 --> 00:23:21,340
how do I tell solar during peak ours I

00:23:18,490 --> 00:23:24,880
want to expand or I want to be able to

00:23:21,340 --> 00:23:27,700
add replicas so that my search volume

00:23:24,880 --> 00:23:30,790
once it goes high through the day it can

00:23:27,700 --> 00:23:33,610
expand and serve traffic in a more

00:23:30,790 --> 00:23:36,270
graceful manner so the search rate

00:23:33,610 --> 00:23:39,190
trigger was added in solar 7 3 there

00:23:36,270 --> 00:23:42,250
essentially it monitors the 1-minute

00:23:39,190 --> 00:23:44,410
average search rate so it sees the

00:23:42,250 --> 00:23:47,590
average search rate for a minute and

00:23:44,410 --> 00:23:50,710
then you can define what to do in that

00:23:47,590 --> 00:23:54,280
case you can define the search trigger

00:23:50,710 --> 00:23:58,300
on a pearl collection basis a pearl

00:23:54,280 --> 00:24:01,780
shard basis or a pearl on a node basis

00:23:58,300 --> 00:24:04,570
so you can say have a hundred QPS on a

00:24:01,780 --> 00:24:07,600
solar node and then I want to do an

00:24:04,570 --> 00:24:09,880
action on it or you can say if a

00:24:07,600 --> 00:24:12,100
collection gets more than 30 requests a

00:24:09,880 --> 00:24:15,540
second I think that's reaching a point

00:24:12,100 --> 00:24:18,250
where I need to add more replicas so

00:24:15,540 --> 00:24:20,770
since it provided you options to do it

00:24:18,250 --> 00:24:23,410
on a per node or on a more

00:24:20,770 --> 00:24:25,900
Lepore collection bases the default

00:24:23,410 --> 00:24:29,590
actions that come with it were different

00:24:25,900 --> 00:24:31,840
so when we define it for each node right

00:24:29,590 --> 00:24:36,610
so when you say it doesn't cross more

00:24:31,840 --> 00:24:38,770
than 100 QPS on each solar node what you

00:24:36,610 --> 00:24:41,920
want solar to do is at that point move

00:24:38,770 --> 00:24:48,040
things around and make the load on that

00:24:41,920 --> 00:24:50,200
node less so it moves to the default

00:24:48,040 --> 00:24:52,960
action your is it moves the replica

00:24:50,200 --> 00:24:56,560
which has the highest search it to

00:24:52,960 --> 00:24:59,140
another noon now if you define it on a

00:24:56,560 --> 00:25:01,960
pearl collection basis right so now when

00:24:59,140 --> 00:25:04,330
you see if it doesn't go more than 30

00:25:01,960 --> 00:25:07,990
coop queries per second for a shard or

00:25:04,330 --> 00:25:09,610
for a collection the default action that

00:25:07,990 --> 00:25:12,520
solar will take when you define this

00:25:09,610 --> 00:25:15,000
trigger is it will add a replica for

00:25:12,520 --> 00:25:19,210
this shot that goes above this threshold

00:25:15,000 --> 00:25:20,980
so the default actions vary based on if

00:25:19,210 --> 00:25:24,990
you define it on a pearl collection

00:25:20,980 --> 00:25:30,700
basis or on a pearl shard basis or upper

00:25:24,990 --> 00:25:32,620
node basis the API that you would define

00:25:30,700 --> 00:25:35,800
this would be you would say I want to

00:25:32,620 --> 00:25:39,490
create a search rate trigger wait for 10

00:25:35,800 --> 00:25:41,050
minutes so capture the matrix and by

00:25:39,490 --> 00:25:43,240
default in this case since it's on the

00:25:41,050 --> 00:25:46,450
node level it would go and move things

00:25:43,240 --> 00:25:50,260
around from that node to make the

00:25:46,450 --> 00:25:52,540
queries even distribute out evenly so

00:25:50,260 --> 00:25:55,990
when I now though when I tried this

00:25:52,540 --> 00:25:59,100
exercise out I looked at this and I said

00:25:55,990 --> 00:26:01,750
oh ad queries I said like 80 queries and

00:25:59,100 --> 00:26:04,750
the metric that it was capturing was the

00:26:01,750 --> 00:26:07,360
1-minute metric so I'm like you know

00:26:04,750 --> 00:26:10,120
what if I fire 80 queries in one minute

00:26:07,360 --> 00:26:13,900
like I will achieve this and solar will

00:26:10,120 --> 00:26:15,520
do something but like the documentation

00:26:13,900 --> 00:26:18,280
clearly stated and I had missed this

00:26:15,520 --> 00:26:21,220
part was essentially it means you need

00:26:18,280 --> 00:26:24,010
to have a ATS queries per second so it's

00:26:21,220 --> 00:26:26,400
not per minute although the metric that

00:26:24,010 --> 00:26:29,020
it's capturing is the 1 minute average

00:26:26,400 --> 00:26:32,260
so it wasn't really obvious to me like

00:26:29,020 --> 00:26:35,080
but seems silly at that point

00:26:32,260 --> 00:26:39,870
but when you say a tu what you mean is

00:26:35,080 --> 00:26:39,870
80 queries per second okay

00:26:41,220 --> 00:26:48,520
now that these triggers were added the

00:26:45,910 --> 00:26:50,170
trigger has an action related to it

00:26:48,520 --> 00:26:53,500
right so all these actions that I'm

00:26:50,170 --> 00:26:56,530
talking to you about is because solar by

00:26:53,500 --> 00:26:58,540
default says if you define a trigger you

00:26:56,530 --> 00:27:01,000
can act on it because that's why you

00:26:58,540 --> 00:27:03,220
want to define this trigger so the two

00:27:01,000 --> 00:27:05,200
actions that it supports is a compute

00:27:03,220 --> 00:27:07,390
plan so it looks at the trigger that

00:27:05,200 --> 00:27:09,160
you've defined and it says oh you've

00:27:07,390 --> 00:27:11,410
created a search a trigger and you

00:27:09,160 --> 00:27:14,350
define it on a per node basis so the

00:27:11,410 --> 00:27:17,560
compute plan will say move a replica

00:27:14,350 --> 00:27:20,950
sale of a collection that had the most

00:27:17,560 --> 00:27:23,590
queries to some other known so the

00:27:20,950 --> 00:27:25,630
compute plan generates this list of

00:27:23,590 --> 00:27:28,660
actions that you want solar to perform

00:27:25,630 --> 00:27:32,350
and the execute plan obviously carries

00:27:28,660 --> 00:27:33,900
out the operations so if I was to take

00:27:32,350 --> 00:27:37,540
the whole thing and put it in an example

00:27:33,900 --> 00:27:40,420
here is how I would say I would define a

00:27:37,540 --> 00:27:42,430
node added trigger so when you define a

00:27:40,420 --> 00:27:46,300
node added trigger you want to wait for

00:27:42,430 --> 00:27:49,900
say 60 seconds and then perform an

00:27:46,300 --> 00:27:53,910
action so you've explicitly said compute

00:27:49,900 --> 00:27:57,730
a plan and then execute it right now

00:27:53,910 --> 00:28:00,040
what I thought is III won't know at this

00:27:57,730 --> 00:28:02,890
point I'm like thinking from a DevOps

00:28:00,040 --> 00:28:05,110
hat right I'm like you know what I don't

00:28:02,890 --> 00:28:08,470
trust this just yet what I want to do is

00:28:05,110 --> 00:28:10,900
I want solar to definitely know that a

00:28:08,470 --> 00:28:13,240
node was added or the example that I

00:28:10,900 --> 00:28:15,310
played around with was the search rate

00:28:13,240 --> 00:28:16,330
trigger right as soon as Serge goes

00:28:15,310 --> 00:28:19,270
above a threshold

00:28:16,330 --> 00:28:22,330
I don't want solar to execute the plan

00:28:19,270 --> 00:28:24,310
so I don't want solar to actually go and

00:28:22,330 --> 00:28:26,740
start adding replicas moving things

00:28:24,310 --> 00:28:28,660
around but I want a notification I know

00:28:26,740 --> 00:28:30,720
that something needs to be performed on

00:28:28,660 --> 00:28:34,930
the cluster something's not right

00:28:30,720 --> 00:28:37,000
so if you remove the execute plan like

00:28:34,930 --> 00:28:38,590
solar will not actually do anything with

00:28:37,000 --> 00:28:42,180
the plan it will just compute it and

00:28:38,590 --> 00:28:46,230
tell you oh you need to move replicas

00:28:42,180 --> 00:28:47,850
X from machine 1 to machine - right so

00:28:46,230 --> 00:28:50,370
you look at it you're like ah that makes

00:28:47,850 --> 00:28:52,710
sense let's go and execute them right so

00:28:50,370 --> 00:28:55,080
it's like a manual validation process

00:28:52,710 --> 00:28:57,720
that you might want to do if like you

00:28:55,080 --> 00:28:59,910
want to be more paranoid and like you

00:28:57,720 --> 00:29:02,250
probably want to when you're starting to

00:28:59,910 --> 00:29:05,490
try out a feature new so you could

00:29:02,250 --> 00:29:07,790
remove this and one thing to keep in

00:29:05,490 --> 00:29:11,010
mind if you don't define any actions

00:29:07,790 --> 00:29:13,650
this actions will be performed by

00:29:11,010 --> 00:29:15,840
default so unless explicitly defined and

00:29:13,650 --> 00:29:19,080
said you know what only do the compute

00:29:15,840 --> 00:29:21,230
action plan and not the execute it will

00:29:19,080 --> 00:29:24,870
go ahead and do both the plans so

00:29:21,230 --> 00:29:26,810
explicit using the explicit API and say

00:29:24,870 --> 00:29:27,990
exactly what you want out of the

00:29:26,810 --> 00:29:31,920
auto-scaling

00:29:27,990 --> 00:29:36,270
trigger ray now once this trigger was

00:29:31,920 --> 00:29:38,700
implemented the last section was can I

00:29:36,270 --> 00:29:41,280
act on it in different ways right

00:29:38,700 --> 00:29:44,190
apart from executing the plan can I have

00:29:41,280 --> 00:29:45,270
a listener can I have solo do certain

00:29:44,190 --> 00:29:48,450
events with it

00:29:45,270 --> 00:29:51,060
so you're basically I'm saying trigger

00:29:48,450 --> 00:29:53,490
listeners are nothing but are attached

00:29:51,060 --> 00:29:57,060
to a trigger to notify important

00:29:53,490 --> 00:29:59,760
lifecycle events now example of a

00:29:57,060 --> 00:30:03,240
lifecycle includes a trigger being

00:29:59,760 --> 00:30:05,550
activated when you abort overall success

00:30:03,240 --> 00:30:08,190
so when you're moving replicas around

00:30:05,550 --> 00:30:11,250
you will get notifications that you know

00:30:08,190 --> 00:30:14,450
what node was added started moving

00:30:11,250 --> 00:30:17,640
replicas done or failed so you would get

00:30:14,450 --> 00:30:20,540
notifications now with these listeners

00:30:17,640 --> 00:30:23,880
today solar has two listeners with it

00:30:20,540 --> 00:30:26,570
one is it just writes out what

00:30:23,880 --> 00:30:30,110
operations it's doing to the underlying

00:30:26,570 --> 00:30:30,110
system collection

00:30:33,549 --> 00:30:38,090
so it writes this out to the system

00:30:36,139 --> 00:30:40,610
collection so you define the underscore

00:30:38,090 --> 00:30:43,539
system collection and every time this

00:30:40,610 --> 00:30:46,999
trigger is activated you basically

00:30:43,539 --> 00:30:50,330
create document document saying node

00:30:46,999 --> 00:30:52,820
added starting operation aborted field

00:30:50,330 --> 00:30:54,409
success all these events so you can

00:30:52,820 --> 00:30:56,840
scroll through it and even get a

00:30:54,409 --> 00:30:58,789
visualization or something if you want

00:30:56,840 --> 00:31:01,399
to play around and make design a

00:30:58,789 --> 00:31:03,950
handcrafted solar query to see what was

00:31:01,399 --> 00:31:07,759
happening the other event listener that

00:31:03,950 --> 00:31:10,190
solar added was a HTTP listener so an

00:31:07,759 --> 00:31:14,059
example of the HTTP listener is

00:31:10,190 --> 00:31:17,690
basically you're saying I want on the

00:31:14,059 --> 00:31:20,419
trigger that I define on stages aborted

00:31:17,690 --> 00:31:25,970
succeeded or failed on these three

00:31:20,419 --> 00:31:30,499
stages of the trigger send out this hit

00:31:25,970 --> 00:31:33,710
this URL right so the experiment that I

00:31:30,499 --> 00:31:37,789
did for this talk was I created a search

00:31:33,710 --> 00:31:40,789
rate trigger I said you know what I

00:31:37,789 --> 00:31:43,249
don't want solar to go add replicas

00:31:40,789 --> 00:31:45,889
I just want to define this trigger and

00:31:43,249 --> 00:31:49,149
then I want to define this HTTP listener

00:31:45,889 --> 00:31:52,279
to send out alerts to a system right so

00:31:49,149 --> 00:31:54,860
define the trigger define this alert and

00:31:52,279 --> 00:31:57,230
you can get maybe an email notification

00:31:54,860 --> 00:32:00,139
you can integrate this with your cloud

00:31:57,230 --> 00:32:02,509
provider so that if the search goes

00:32:00,139 --> 00:32:04,639
above a threshold this will send out a

00:32:02,509 --> 00:32:08,720
notification to the cloud providers to

00:32:04,639 --> 00:32:12,499
start spinning up more instances so you

00:32:08,720 --> 00:32:15,019
can use listeners in that sense so

00:32:12,499 --> 00:32:17,779
that's all I had for the talk we covered

00:32:15,019 --> 00:32:20,299
the basics of auto scaling and like

00:32:17,779 --> 00:32:23,509
hopefully these use cases will help you

00:32:20,299 --> 00:32:25,610
start using them in ways to help your

00:32:23,509 --> 00:32:28,330
management of your cluster

00:32:25,610 --> 00:32:28,330
yeah thank you

00:32:30,480 --> 00:32:37,780
Thank You bell ringing yeah I see

00:32:33,090 --> 00:32:40,900
Henry's hello thank you for the talk I

00:32:37,780 --> 00:32:44,050
wondering if for example you have

00:32:40,900 --> 00:32:47,020
specified some rule to move your replica

00:32:44,050 --> 00:32:52,560
to another note if you reach some QP s

00:32:47,020 --> 00:32:58,030
yeah but well these note reached this

00:32:52,560 --> 00:33:01,870
level of QPS you moved the replica shirt

00:32:58,030 --> 00:33:07,120
then this note will reach this solovki P

00:33:01,870 --> 00:33:12,400
we could be s so you move it back so all

00:33:07,120 --> 00:33:14,140
the time so we'll just move which is

00:33:12,400 --> 00:33:15,970
when you want to start off it is you

00:33:14,140 --> 00:33:17,800
want to create an alert so that you see

00:33:15,970 --> 00:33:19,150
what's happening in the system right you

00:33:17,800 --> 00:33:21,790
might not want to trust this in the

00:33:19,150 --> 00:33:24,370
beginning but what I assume what happens

00:33:21,790 --> 00:33:27,280
under the hood is since it's moving to

00:33:24,370 --> 00:33:31,060
the other noon solar also captures the

00:33:27,280 --> 00:33:34,210
metrics on the other node so if this is

00:33:31,060 --> 00:33:38,610
not I'm not 100% sure but it should not

00:33:34,210 --> 00:33:40,900
move the replica to this node if it's

00:33:38,610 --> 00:33:43,630
essentially going to violate it there

00:33:40,900 --> 00:33:46,420
right like so when you use the

00:33:43,630 --> 00:33:48,340
Diagnostics API it would come under the

00:33:46,420 --> 00:33:50,410
violation section so it's gonna say you

00:33:48,340 --> 00:33:51,970
know what there's something wrong but

00:33:50,410 --> 00:33:55,210
I'm not I can't do anything about it

00:33:51,970 --> 00:33:58,300
because like it's not going to be a good

00:33:55,210 --> 00:34:01,780
action anyways so those come under the

00:33:58,300 --> 00:34:03,940
Diagnostics violations yeah but you have

00:34:01,780 --> 00:34:06,910
enough resources to move it so there

00:34:03,940 --> 00:34:11,020
yeah so you do not violate the rules so

00:34:06,910 --> 00:34:14,409
it's throw its way and every node will

00:34:11,020 --> 00:34:16,419
just throw it right so so it wouldn't it

00:34:14,409 --> 00:34:18,370
should not perform the operation and say

00:34:16,419 --> 00:34:22,030
you know what I'm above the threshold

00:34:18,370 --> 00:34:24,639
but there's no good action to it you see

00:34:22,030 --> 00:34:28,690
what I'm saying so you can either

00:34:24,639 --> 00:34:29,169
specify to move it or just to send it an

00:34:28,690 --> 00:34:34,030
alert

00:34:29,169 --> 00:34:36,550
yes No so but if what I'm saying is the

00:34:34,030 --> 00:34:39,159
move is not mandatory right in this case

00:34:36,550 --> 00:34:41,710
so it will say it when it goes to move

00:34:39,159 --> 00:34:44,649
it realizes that the move operation

00:34:41,710 --> 00:34:48,220
will lead to the other node going above

00:34:44,649 --> 00:34:50,409
the metric rate trigger right so it will

00:34:48,220 --> 00:34:52,480
say this operation was aborted right

00:34:50,409 --> 00:34:55,540
that's where this there were stages in

00:34:52,480 --> 00:34:58,210
that operation so it will actually not

00:34:55,540 --> 00:35:00,520
perform the mood and it will come under

00:34:58,210 --> 00:35:08,440
the violations section when you use the

00:35:00,520 --> 00:35:14,680
Diagnostics API you know why - it's a

00:35:08,440 --> 00:35:16,420
violator are you ok we'll take this

00:35:14,680 --> 00:35:18,490
offline but I'll like maybe it's not

00:35:16,420 --> 00:35:22,240
very clear I can't have a similar

00:35:18,490 --> 00:35:25,960
question on that there's a a similar

00:35:22,240 --> 00:35:28,240
concept when you use a thing called

00:35:25,960 --> 00:35:30,490
hysteresis to make sure that you don't

00:35:28,240 --> 00:35:33,130
bounce something between two states to

00:35:30,490 --> 00:35:33,880
again and again and it's I think that's

00:35:33,130 --> 00:35:41,050
what you're asking

00:35:33,880 --> 00:35:42,640
yeah maximum yeah move a replica offer

00:35:41,050 --> 00:35:44,380
off a node and all there's lots more

00:35:42,640 --> 00:35:45,609
displaced now all I can now who's about

00:35:44,380 --> 00:35:49,030
to get back home to this nodes lots of

00:35:45,609 --> 00:35:52,750
disk space now you need it's not in its

00:35:49,030 --> 00:35:59,170
infinite set of actions to satisfy the

00:35:52,750 --> 00:36:01,150
cluster right ok right yeah the other

00:35:59,170 --> 00:36:03,040
question here it's also going in that

00:36:01,150 --> 00:36:05,530
direction so before I touch something

00:36:03,040 --> 00:36:08,230
like moving it so for example if I have

00:36:05,530 --> 00:36:12,130
something like system load in here in

00:36:08,230 --> 00:36:14,890
your wheels it does it also figure out

00:36:12,130 --> 00:36:16,810
if I to that action that maybe on the

00:36:14,890 --> 00:36:18,910
other machines the system load then goes

00:36:16,810 --> 00:36:20,650
too high so because it's not easy to

00:36:18,910 --> 00:36:24,010
calculate in that case but are there

00:36:20,650 --> 00:36:26,109
some assumptions in it that so just does

00:36:24,010 --> 00:36:28,810
it just add the statistics and figure

00:36:26,109 --> 00:36:32,710
out because it would not make any sense

00:36:28,810 --> 00:36:34,180
if it would make it worse and yeah I'm

00:36:32,710 --> 00:36:37,030
not sure that system load but I'd

00:36:34,180 --> 00:36:38,650
definitely imagine that like we want to

00:36:37,030 --> 00:36:40,690
do something if I'm not a hundred

00:36:38,650 --> 00:36:43,000
percent sure if you already do it where

00:36:40,690 --> 00:36:45,880
if it goes above the search rate that

00:36:43,000 --> 00:36:47,920
you can actually calculate if you hang

00:36:45,880 --> 00:36:49,720
with to the other unknown then you can

00:36:47,920 --> 00:36:51,790
whether it will go above the threshold

00:36:49,720 --> 00:36:55,360
or when you move it and the disk space

00:36:51,790 --> 00:36:57,550
issue right so solo might abort

00:36:55,360 --> 00:36:58,900
their operation in that case I don't

00:36:57,550 --> 00:37:01,150
know whether it's already there or

00:36:58,900 --> 00:37:02,410
something that's in the plan I can check

00:37:01,150 --> 00:37:04,540
that offline and get back to you but

00:37:02,410 --> 00:37:09,040
like system load average will definitely

00:37:04,540 --> 00:37:11,470
be like another challenge because you

00:37:09,040 --> 00:37:13,600
it's not easy to go and say you know

00:37:11,470 --> 00:37:15,730
what I have five replicas on a note but

00:37:13,600 --> 00:37:19,150
which node is taking the actual

00:37:15,730 --> 00:37:24,040
resources right so that's probably like

00:37:19,150 --> 00:37:25,180
a tough one there yeah like those are

00:37:24,040 --> 00:37:27,460
some things that you can calculate

00:37:25,180 --> 00:37:29,590
before you actually do the operation I

00:37:27,460 --> 00:37:31,780
think won't be useful to add to this

00:37:29,590 --> 00:37:33,790
would be some sort of limit like go and

00:37:31,780 --> 00:37:36,130
do this operation a maximum of three

00:37:33,790 --> 00:37:38,170
times okay that's what I'd like so that

00:37:36,130 --> 00:37:39,880
it doesn't bounce infinitely right like

00:37:38,170 --> 00:37:42,760
so maybe that's a clearer ticket that

00:37:39,880 --> 00:37:55,750
we've got to create yeah that's already

00:37:42,760 --> 00:37:57,280
working on it like absolutely so and by

00:37:55,750 --> 00:37:58,690
putting a limit in there maybe having a

00:37:57,280 --> 00:38:00,910
that secondary trigger where it can

00:37:58,690 --> 00:38:03,730
notify you you know you can alarm off of

00:38:00,910 --> 00:38:06,580
that and say I've reached a maximum

00:38:03,730 --> 00:38:08,470
amount of actions that I can take let me

00:38:06,580 --> 00:38:09,970
notify an operator so that we can now

00:38:08,470 --> 00:38:12,490
get a human involved but I've done

00:38:09,970 --> 00:38:14,740
everything I've yeah so that's and like

00:38:12,490 --> 00:38:17,710
in his case it gets even worse where if

00:38:14,740 --> 00:38:21,130
you move replicas to the other node and

00:38:17,710 --> 00:38:23,350
that node starts this trigger and picks

00:38:21,130 --> 00:38:24,940
some other replicas right so then even

00:38:23,350 --> 00:38:26,410
this limits might not come into play

00:38:24,940 --> 00:38:28,390
because you're like it's picking

00:38:26,410 --> 00:38:36,930
something else right it's not doing the

00:38:28,390 --> 00:38:36,930
operation on the same replica round

00:38:37,650 --> 00:38:42,820
well-like the good thing about is I'm

00:38:40,690 --> 00:38:43,540
not a hunt like you should definitely

00:38:42,820 --> 00:38:46,600
try it out

00:38:43,540 --> 00:38:48,490
remove the execute plan let it compute

00:38:46,600 --> 00:38:51,580
gain some confidence see what it's doing

00:38:48,490 --> 00:38:54,220
send out alerts start getting your feet

00:38:51,580 --> 00:38:55,510
wet with that and feedbacks always

00:38:54,220 --> 00:38:57,940
welcome like stuff like this I'm sure

00:38:55,510 --> 00:39:01,360
these are concerns that we want to

00:38:57,940 --> 00:39:02,950
address and I'm like couple of them

00:39:01,360 --> 00:39:07,630
might already be there I'll have to

00:39:02,950 --> 00:39:12,220
check and another question yeah if the

00:39:07,630 --> 00:39:15,370
trigger triggers action right which is

00:39:12,220 --> 00:39:18,960
unlikely but you noticed so that it

00:39:15,370 --> 00:39:26,070
begins it's beginning to afraid this

00:39:18,960 --> 00:39:26,070
action do you have an API to cancel it

00:39:26,310 --> 00:39:37,450
so you know it's wrong yeah you might

00:39:34,870 --> 00:39:39,970
like like you can't undo that operation

00:39:37,450 --> 00:39:41,560
right because like it's a set of

00:39:39,970 --> 00:39:44,080
collection API calls so you're saying

00:39:41,560 --> 00:39:48,130
add replicas and like that's all in

00:39:44,080 --> 00:39:50,110
process so to roll that back like it

00:39:48,130 --> 00:39:53,580
would need to store state of the whole

00:39:50,110 --> 00:39:57,340
action right through the whole lifecycle

00:39:53,580 --> 00:39:59,830
so you'd rather wanted to either do

00:39:57,340 --> 00:40:03,220
nothing or to trust it and then like

00:39:59,830 --> 00:40:09,220
completely it's like like just compute

00:40:03,220 --> 00:40:12,010
it right okay I'm sorry I'm the Qun a

00:40:09,220 --> 00:40:14,140
because of your honor of time and thank

00:40:12,010 --> 00:40:14,850
you very much Varun give him a big hand

00:40:14,140 --> 00:40:20,770
again

00:40:14,850 --> 00:40:20,770

YouTube URL: https://www.youtube.com/watch?v=D4bi8Pfc4Ts


