Title: Berlin Buzzwords 2018: Philipp Krenn – ElasticSearch (R)Evolution — You Know, for Search ... #bbuzz
Publication date: 2018-06-13
Playlist: Berlin Buzzwords 2018 #bbuzz
Description: 
	After the initial release in 2010 ElasticSearch has become the most widely used full-text search engine, but it is not stopping there. The revolution happened and now it is time for evolution. We dive into the following questions:

- How did leniency help the initial adoption, but why and how do we lean more on strictness today?
- How can upgrades be improved to avoid any downtime even when changing major versions?
- How can new resiliency features improve recovery scenarios and add totally new features?
- Why are types finally disappearing and how are we are trying to avoid the upgrade pain as much as possible?
- What are examples for some clever performance improvements?
- How can you shrink and (finally) split shards in a highly efficient way?

Read more:
https://2018.berlinbuzzwords.de/18/session/elasticsearch-revolution-you-know-search

About Philipp Krenn:
https://2018.berlinbuzzwords.de/users/philipp-krenn

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:04,630 --> 00:00:08,300
good morning everybody everybody's still

00:00:07,790 --> 00:00:11,900
awake

00:00:08,300 --> 00:00:13,430
let's see I have a lot of demos so there

00:00:11,900 --> 00:00:18,789
should be kind of some interaction in

00:00:13,430 --> 00:00:23,570
there so can I have some slides please

00:00:18,789 --> 00:00:26,620
maybe otherwise the demos will be very

00:00:23,570 --> 00:00:26,620
hand wavy

00:00:35,309 --> 00:00:42,100
so I will talk about the revolution part

00:00:39,820 --> 00:00:45,010
which will be very short and will then

00:00:42,100 --> 00:00:47,170
mainly spend time on the evolution like

00:00:45,010 --> 00:00:58,350
what has happened in the past few

00:00:47,170 --> 00:01:04,449
versions okay I did not touch any cables

00:00:58,350 --> 00:01:08,350
hey okay cool thank you so this is my

00:01:04,449 --> 00:01:10,179
official role then developer advocate

00:01:08,350 --> 00:01:12,640
I mostly do conferences meetups and just

00:01:10,179 --> 00:01:16,060
speak about the stuff that we do as

00:01:12,640 --> 00:01:18,429
company if you have any questions and

00:01:16,060 --> 00:01:21,490
and you either forget or you don't want

00:01:18,429 --> 00:01:24,220
to ask in public come to me afterwards

00:01:21,490 --> 00:01:26,380
or just use slide or just throw in many

00:01:24,220 --> 00:01:28,479
questions there if I have time at the

00:01:26,380 --> 00:01:30,580
end I will answer them on stage if I

00:01:28,479 --> 00:01:33,759
don't I will tweet out the answers so

00:01:30,580 --> 00:01:36,310
slide or do slash my twitter handle is

00:01:33,759 --> 00:01:38,439
where you can just end or add any

00:01:36,310 --> 00:01:41,799
questions and I'll try to add them or

00:01:38,439 --> 00:01:44,469
answer them at the end so starting with

00:01:41,799 --> 00:01:48,729
the revolution what was the revolution

00:01:44,469 --> 00:01:50,590
like where are we I use DB engines that

00:01:48,729 --> 00:01:52,270
come to say like ok this is where we are

00:01:50,590 --> 00:01:55,869
with data stores today who knows that

00:01:52,270 --> 00:01:58,899
site ok this is surprisingly small

00:01:55,869 --> 00:02:00,310
number so they have like that TOB index

00:01:58,899 --> 00:02:02,619
for programming languages they do the

00:02:00,310 --> 00:02:04,780
same thing for data stores so they

00:02:02,619 --> 00:02:06,219
basically have a ranking you can always

00:02:04,780 --> 00:02:08,799
argue and discuss is this the right

00:02:06,219 --> 00:02:10,570
ranking or how should this be for data

00:02:08,799 --> 00:02:12,579
stores and currently it looks something

00:02:10,570 --> 00:02:14,530
like this so you can see the relational

00:02:12,579 --> 00:02:16,470
databases are still on top but MoMA DB

00:02:14,530 --> 00:02:20,470
is the top no sequel datastore and

00:02:16,470 --> 00:02:22,299
elasticsearch is now on number 8 we're

00:02:20,470 --> 00:02:25,450
pretty happy about that so that was kind

00:02:22,299 --> 00:02:27,100
of the revolution and I guess everybody

00:02:25,450 --> 00:02:29,650
is familiar with what elasticsearch is I

00:02:27,100 --> 00:02:31,359
will spare you any introduction by the

00:02:29,650 --> 00:02:32,889
way the only system I think should not

00:02:31,359 --> 00:02:36,519
be in there is the one right below

00:02:32,889 --> 00:02:38,739
elasticsearch which is access and I I

00:02:36,519 --> 00:02:41,170
don't think this should be on any proper

00:02:38,739 --> 00:02:42,489
datastore list but it's still number 9

00:02:41,170 --> 00:02:44,920
and we are very happy that we have

00:02:42,489 --> 00:02:46,720
finally overtaken access because that

00:02:44,920 --> 00:02:48,280
was kind of one of the goals we really

00:02:46,720 --> 00:02:50,500
wanted to achieve over time

00:02:48,280 --> 00:02:53,350
and probably it can fade out somewhere

00:02:50,500 --> 00:02:55,240
okay coming to the evolution what is

00:02:53,350 --> 00:02:56,980
kind of what are the trends what are we

00:02:55,240 --> 00:02:58,959
trying to do what are we up dating and

00:02:56,980 --> 00:03:01,420
doing so the first thing is about

00:02:58,959 --> 00:03:03,250
strictness which is basically when you

00:03:01,420 --> 00:03:05,020
are a young project you want to be very

00:03:03,250 --> 00:03:06,550
forgiving and you want to be easy to use

00:03:05,020 --> 00:03:08,739
and people just get started

00:03:06,550 --> 00:03:11,530
when you are getting more mature you

00:03:08,739 --> 00:03:14,140
kind of want to avoid bad stuff because

00:03:11,530 --> 00:03:15,910
bad stuff is not that bad when you're in

00:03:14,140 --> 00:03:18,040
development but it will be very bad in

00:03:15,910 --> 00:03:20,920
production afterwards so we would rather

00:03:18,040 --> 00:03:23,320
fail early and be kind of a pain early

00:03:20,920 --> 00:03:25,870
on then have like that big outage

00:03:23,320 --> 00:03:27,880
afterwards so what we have is we have

00:03:25,870 --> 00:03:29,230
these bootstrap checks did anybody run

00:03:27,880 --> 00:03:33,459
into bootstrap checks and had issues

00:03:29,230 --> 00:03:35,319
with those one not that many we have

00:03:33,459 --> 00:03:37,750
some of these checks these are just

00:03:35,319 --> 00:03:40,660
things where we know this will break at

00:03:37,750 --> 00:03:43,330
some point in production probably and we

00:03:40,660 --> 00:03:46,030
will not start up a node if you're in a

00:03:43,330 --> 00:03:48,010
cluster Abell state and will actually

00:03:46,030 --> 00:03:49,930
fail the node immediately and will not

00:03:48,010 --> 00:03:53,200
let it come up and I can actually show

00:03:49,930 --> 00:03:54,610
that I have three docker containers

00:03:53,200 --> 00:03:56,799
running and one of them is badly

00:03:54,610 --> 00:03:59,019
configured and you can see here I have

00:03:56,799 --> 00:04:00,700
an elasticsearch one node and this is

00:03:59,019 --> 00:04:04,299
the actual bootstrap check that has

00:04:00,700 --> 00:04:07,060
failed and you can see here so on the

00:04:04,299 --> 00:04:09,070
top line you can see we bound to a non

00:04:07,060 --> 00:04:11,019
local host interface and that's when we

00:04:09,070 --> 00:04:13,750
assume this is production mode you could

00:04:11,019 --> 00:04:14,829
form a cluster if you're just binding to

00:04:13,750 --> 00:04:16,840
localhost we assume you're in

00:04:14,829 --> 00:04:18,310
development mode and we will just issue

00:04:16,840 --> 00:04:20,590
a warning we will tell you okay this

00:04:18,310 --> 00:04:22,030
might need fixing but we will still let

00:04:20,590 --> 00:04:23,950
you continue as soon as you're in a

00:04:22,030 --> 00:04:25,690
cluster Abell state will actually fail

00:04:23,950 --> 00:04:27,789
the node because we saw something that

00:04:25,690 --> 00:04:30,400
is not right for example here you can

00:04:27,789 --> 00:04:32,169
see the bootstrap check failed and we

00:04:30,400 --> 00:04:33,520
did not activate memory locking even

00:04:32,169 --> 00:04:34,960
though we requested that in the

00:04:33,520 --> 00:04:37,479
configuration and also that

00:04:34,960 --> 00:04:38,800
elasticsearch just stops we actually

00:04:37,479 --> 00:04:43,210
stopped the node you're not able to use

00:04:38,800 --> 00:04:46,060
it let's quickly fix that so I have

00:04:43,210 --> 00:04:49,150
explicitly commented out these memory

00:04:46,060 --> 00:04:50,530
locking settings let's quickly kill the

00:04:49,150 --> 00:04:53,650
node I will show you my doctor set up

00:04:50,530 --> 00:04:58,060
while the nodes are actually coming up

00:04:53,650 --> 00:05:00,669
again so that's basically what I have

00:04:58,060 --> 00:05:02,200
here is I have three elasticsearch nodes

00:05:00,669 --> 00:05:03,520
and this is one of these

00:05:02,200 --> 00:05:06,040
three elasticsearch notes that you can

00:05:03,520 --> 00:05:11,050
see so it has the name elasticsearch one

00:05:06,040 --> 00:05:13,810
I use some version in the background so

00:05:11,050 --> 00:05:16,600
right now I'm using five six nine will

00:05:13,810 --> 00:05:20,370
do a life upgrade to the upcoming 6.3

00:05:16,600 --> 00:05:23,260
version so I have set some settings

00:05:20,370 --> 00:05:25,470
basically the usual stuff since it's

00:05:23,260 --> 00:05:28,870
just my laptop it's half a click of heap

00:05:25,470 --> 00:05:31,660
and then I have the same setting for the

00:05:28,870 --> 00:05:33,460
node 2 and node 3 the one thing that you

00:05:31,660 --> 00:05:35,650
might need afterwards or that we come

00:05:33,460 --> 00:05:38,650
back to is that I bind so elasticsearch

00:05:35,650 --> 00:05:40,660
is on port 9000 200 minding

00:05:38,650 --> 00:05:42,790
elasticsearch one binds to nine thousand

00:05:40,660 --> 00:05:44,680
two hundred one less research to nine

00:05:42,790 --> 00:05:46,810
thousand two hundred two and three to

00:05:44,680 --> 00:05:48,700
nine thousand three hundred three and

00:05:46,810 --> 00:05:50,260
then I have cabana running as well just

00:05:48,700 --> 00:05:51,820
to make the interaction a bit easier and

00:05:50,260 --> 00:05:54,640
then I have my data volumes and that's

00:05:51,820 --> 00:05:58,060
it so this is my entire setup and if

00:05:54,640 --> 00:06:00,670
you're lucky it has started up in the

00:05:58,060 --> 00:06:10,060
background already that's not what I

00:06:00,670 --> 00:06:16,510
wanted so okay it's still starting up

00:06:10,060 --> 00:06:18,130
and probably somewhere in here we have

00:06:16,510 --> 00:06:20,340
all the notes started hopefully at some

00:06:18,130 --> 00:06:20,340
point

00:06:20,610 --> 00:06:29,190
let's see because there should not be

00:06:24,790 --> 00:06:29,190
any logging okay cool

00:06:29,800 --> 00:06:36,280
we have elasticsearch five running to

00:06:33,699 --> 00:06:37,930
make them slightly larger is that large

00:06:36,280 --> 00:06:41,520
enough for everybody to read or let's

00:06:37,930 --> 00:06:44,800
simply change the form setting a bit

00:06:41,520 --> 00:06:47,289
okay so we have the latest version of

00:06:44,800 --> 00:06:50,020
five six running you can see we have

00:06:47,289 --> 00:06:51,759
three notes altogether so we have

00:06:50,020 --> 00:06:54,190
elasticsearch one two three

00:06:51,759 --> 00:06:57,280
elasticsearch three is the master node

00:06:54,190 --> 00:06:59,889
right now and my cluster is green and

00:06:57,280 --> 00:07:02,650
healthy so let's go back to strictness

00:06:59,889 --> 00:07:04,539
um the one strictness that we had were

00:07:02,650 --> 00:07:06,039
bootstrap checks the other one are that

00:07:04,539 --> 00:07:07,960
we're now checking configurations and

00:07:06,039 --> 00:07:10,060
parameters and if you have any type of

00:07:07,960 --> 00:07:12,639
in there in previous versions if you had

00:07:10,060 --> 00:07:14,560
a typo would simply ignore that type or

00:07:12,639 --> 00:07:16,270
in ignore that parameter which made

00:07:14,560 --> 00:07:17,680
debugging very hard because even for us

00:07:16,270 --> 00:07:19,090
it was hard you have a 100 line

00:07:17,680 --> 00:07:20,440
configuration file you have a type of

00:07:19,090 --> 00:07:22,479
somewhere and we'll simply ignore that

00:07:20,440 --> 00:07:25,060
parameter this is probably not what you

00:07:22,479 --> 00:07:26,500
want by now we will also fail if your

00:07:25,060 --> 00:07:28,870
configuration is bad we will fail a

00:07:26,500 --> 00:07:30,940
starter process or if you have a

00:07:28,870 --> 00:07:32,139
parameter that we don't recognize we

00:07:30,940 --> 00:07:34,120
will actually tell you instead of

00:07:32,139 --> 00:07:40,150
ignoring it does anybody see the typo

00:07:34,120 --> 00:07:43,090
here what is missing in that command yes

00:07:40,150 --> 00:07:44,380
there is a an e missing here in type so

00:07:43,090 --> 00:07:46,419
if you run that it will actually tell

00:07:44,380 --> 00:07:48,219
you okay illegal argument I don't know

00:07:46,419 --> 00:07:49,719
what you're trying to do and but it will

00:07:48,219 --> 00:07:52,029
actually try to help you out so you can

00:07:49,719 --> 00:07:55,300
say this is what you type and then it

00:07:52,029 --> 00:07:56,500
says well maybe you meant this thanks to

00:07:55,300 --> 00:07:58,060
the little mints and distance we can

00:07:56,500 --> 00:07:59,800
very easily guess what might be a

00:07:58,060 --> 00:08:01,120
similar command if you're using it on a

00:07:59,800 --> 00:08:03,370
command line you're seeing something

00:08:01,120 --> 00:08:05,529
similar where it will suggest oh you

00:08:03,370 --> 00:08:08,020
missed type status or whatever maybe you

00:08:05,529 --> 00:08:11,590
meant this other command so if you

00:08:08,020 --> 00:08:13,509
correct that your command will then work

00:08:11,590 --> 00:08:15,310
as expected this is one of the changes

00:08:13,509 --> 00:08:17,650
that we added in 5-0 already just to

00:08:15,310 --> 00:08:19,690
fail early be a bit more of a pain in

00:08:17,650 --> 00:08:22,479
the beginning but make your life

00:08:19,690 --> 00:08:25,330
afterwards a bit easier the next one are

00:08:22,479 --> 00:08:26,889
rolling upgrades that we have added this

00:08:25,330 --> 00:08:28,300
was one of the main point pain points

00:08:26,889 --> 00:08:29,800
people had because as soon as you had a

00:08:28,300 --> 00:08:31,180
major version upgrade basically you

00:08:29,800 --> 00:08:34,060
would shut down the entire cluster

00:08:31,180 --> 00:08:35,709
update all the nodes then update all the

00:08:34,060 --> 00:08:38,380
installations and then hope that your

00:08:35,709 --> 00:08:40,120
cluster would come back up for some

00:08:38,380 --> 00:08:41,469
people who downtime was acceptable for a

00:08:40,120 --> 00:08:43,659
lot of people downtime was not really

00:08:41,469 --> 00:08:45,370
acceptable we are trying to work around

00:08:43,659 --> 00:08:47,649
that and we support rolling upwards now

00:08:45,370 --> 00:08:49,180
which probably feel a bit like this and

00:08:47,649 --> 00:08:50,920
you hope that your little train is not a

00:08:49,180 --> 00:08:52,959
railing while you're riding it and you

00:08:50,920 --> 00:08:56,110
just hopefully keep going and keep going

00:08:52,959 --> 00:09:01,000
and we'll actually try to do that live

00:08:56,110 --> 00:09:03,310
now so I will need these three documents

00:09:01,000 --> 00:09:04,870
with three different types we will need

00:09:03,310 --> 00:09:08,740
them afterwards so I will insert them

00:09:04,870 --> 00:09:11,379
now we'll come back to those what we're

00:09:08,740 --> 00:09:13,389
doing first is we want to check how is

00:09:11,379 --> 00:09:16,209
my cluster doing can I even upgrade and

00:09:13,389 --> 00:09:17,920
for that in five six or the latest

00:09:16,209 --> 00:09:20,110
version of the five branch we have added

00:09:17,920 --> 00:09:22,300
this upgrade assistant and that upgrade

00:09:20,110 --> 00:09:25,540
assistant will first tell you back up

00:09:22,300 --> 00:09:27,250
your indices now I will not do that but

00:09:25,540 --> 00:09:30,129
please for your production use case

00:09:27,250 --> 00:09:32,740
don't skip the warning or don't blame us

00:09:30,129 --> 00:09:34,149
that you have lost all your data so back

00:09:32,740 --> 00:09:35,949
up your data if you have any meaningful

00:09:34,149 --> 00:09:37,480
data in there and then we have a checker

00:09:35,949 --> 00:09:38,949
which will basically tell you okay we

00:09:37,480 --> 00:09:41,139
have one error we could go to the

00:09:38,949 --> 00:09:43,629
documentation to actually fix that but

00:09:41,139 --> 00:09:45,430
we also have a helper which can do that

00:09:43,629 --> 00:09:46,839
for you so basically you can see here my

00:09:45,430 --> 00:09:49,269
toad Cabana index something in our

00:09:46,839 --> 00:09:51,910
configuration format changed if I

00:09:49,269 --> 00:09:54,399
reindex that it will basically create

00:09:51,910 --> 00:09:56,769
that in the right format for me and then

00:09:54,399 --> 00:09:58,300
I can do my upgrade so if I head over to

00:09:56,769 --> 00:10:00,130
my cluster check you can see now I just

00:09:58,300 --> 00:10:01,870
have notes I don't even have errors or

00:10:00,130 --> 00:10:06,310
warnings now I can actually do my

00:10:01,870 --> 00:10:08,920
upgrade so what we want to do now is we

00:10:06,310 --> 00:10:10,959
want to basically rotate out one node by

00:10:08,920 --> 00:10:14,769
the net the others so what I need to do

00:10:10,959 --> 00:10:17,110
is in my environment file I want to

00:10:14,769 --> 00:10:20,649
comment out five six and I want to

00:10:17,110 --> 00:10:24,069
switch that over to 6.3 which will be

00:10:20,649 --> 00:10:27,579
released soon but yeah we like to test

00:10:24,069 --> 00:10:29,170
stuff and I just try to test the

00:10:27,579 --> 00:10:31,240
upcoming release here as well so

00:10:29,170 --> 00:10:34,480
basically I'm killing elasticsearch

00:10:31,240 --> 00:10:36,430
three and replace it by six version of

00:10:34,480 --> 00:10:38,259
the same node since this was the master

00:10:36,430 --> 00:10:39,970
node it might take some time until the

00:10:38,259 --> 00:10:42,550
cluster figures out oh okay the master

00:10:39,970 --> 00:10:44,470
is gone I need to vote for a new master

00:10:42,550 --> 00:10:46,800
then the elasticsearch three node will

00:10:44,470 --> 00:10:49,209
come back up you can actually see

00:10:46,800 --> 00:10:51,250
somewhere pretty much at the end now

00:10:49,209 --> 00:10:56,079
probably you can see that elasticsearch

00:10:51,250 --> 00:10:58,320
three has exited somewhere if I would

00:10:56,079 --> 00:11:00,520
see it

00:10:58,320 --> 00:11:02,950
so here you can see we have kill

00:11:00,520 --> 00:11:05,230
elasticsearch 3 it has exited here in

00:11:02,950 --> 00:11:07,720
that closed statement basically we have

00:11:05,230 --> 00:11:09,610
killed that note the custard keeps

00:11:07,720 --> 00:11:13,510
running and hopefully it has already

00:11:09,610 --> 00:11:15,100
elected a new master note and it was

00:11:13,510 --> 00:11:17,530
quick enough that it has actually joined

00:11:15,100 --> 00:11:20,770
and this now looks very simple but this

00:11:17,530 --> 00:11:22,300
is like a big change from what we had in

00:11:20,770 --> 00:11:24,100
previous versions you can see we have

00:11:22,300 --> 00:11:26,710
mixed major version numbers we have two

00:11:24,100 --> 00:11:28,420
notes and five six and one note on six

00:11:26,710 --> 00:11:30,880
point three already and you can still

00:11:28,420 --> 00:11:32,530
unclear your data and keep doing

00:11:30,880 --> 00:11:35,620
whatever you have been doing or want to

00:11:32,530 --> 00:11:38,970
do with your cluster so let's quickly do

00:11:35,620 --> 00:11:38,970
the same thing for the other two nodes

00:11:39,060 --> 00:11:43,420
so you can see okay we have killed

00:11:41,260 --> 00:11:45,610
another node elasticsearch one is now

00:11:43,420 --> 00:11:47,290
the master node elasticsearch two is

00:11:45,610 --> 00:11:49,990
currently being replaced you can keep

00:11:47,290 --> 00:11:52,030
reading and also writing your data and

00:11:49,990 --> 00:11:53,440
what i'm talking it will take about I

00:11:52,030 --> 00:11:55,410
don't know 20 seconds or something like

00:11:53,440 --> 00:11:59,520
that until my note comes back up

00:11:55,410 --> 00:12:02,560
hopefully you can also watch it live

00:11:59,520 --> 00:12:05,080
here you can see elasticsearch 2 is

00:12:02,560 --> 00:12:07,360
starting it's bound to public interface

00:12:05,080 --> 00:12:10,960
it is in the state started so it should

00:12:07,360 --> 00:12:13,150
join my cluster any moment now and it is

00:12:10,960 --> 00:12:15,910
back so we can actually do the same

00:12:13,150 --> 00:12:18,550
thing for elasticsearch 1 before I do

00:12:15,910 --> 00:12:21,670
that let me quickly cheat and copy out

00:12:18,550 --> 00:12:25,840
one curl command so I'm killing my

00:12:21,670 --> 00:12:32,850
elasticsearch 1 what will happen to

00:12:25,840 --> 00:12:35,320
Cubana its erroring out why is that

00:12:32,850 --> 00:12:37,240
because Cubana right now can only talk

00:12:35,320 --> 00:12:39,940
to single elasticsearch instance and i

00:12:37,240 --> 00:12:41,470
have set that to elasticsearch 1 so for

00:12:39,940 --> 00:12:43,540
now we will need to fall back to the

00:12:41,470 --> 00:12:45,460
command line so basically i do around

00:12:43,540 --> 00:12:47,350
the same command with curl just to say

00:12:45,460 --> 00:12:49,930
like okay give me all the nodes and what

00:12:47,350 --> 00:12:52,330
we have so we can see elasticsearch 3 is

00:12:49,930 --> 00:12:53,890
now the new master node i elasticsearch

00:12:52,330 --> 00:12:56,170
one is still starting up and trying to

00:12:53,890 --> 00:12:58,150
join and now it has actually come back

00:12:56,170 --> 00:13:00,550
up the one thing that we still need to

00:12:58,150 --> 00:13:02,260
replace is Cubana and for those of you

00:13:00,550 --> 00:13:04,450
who have ever complained about java

00:13:02,260 --> 00:13:06,760
taking a long time to start up wait

00:13:04,450 --> 00:13:08,530
until that node process comes up because

00:13:06,760 --> 00:13:10,840
that will be the slowest thing here this

00:13:08,530 --> 00:13:11,020
will be like a minute or so while I kind

00:13:10,840 --> 00:13:13,270
of

00:13:11,020 --> 00:13:14,500
need to keep talking nothing is

00:13:13,270 --> 00:13:19,270
happening because well there is nothing

00:13:14,500 --> 00:13:21,310
there so yeah nothing is reachable and

00:13:19,270 --> 00:13:23,200
in the background somewhere

00:13:21,310 --> 00:13:26,470
my little note process okay it has

00:13:23,200 --> 00:13:28,630
exited but it will try to climb up again

00:13:26,470 --> 00:13:31,720
and it will yeah it will take a while

00:13:28,630 --> 00:13:33,100
until cabana is back up but we have life

00:13:31,720 --> 00:13:34,840
migrated you can still run your queries

00:13:33,100 --> 00:13:37,240
right now your cluster is in a healthy

00:13:34,840 --> 00:13:39,460
state already so no downtime upgrades

00:13:37,240 --> 00:13:41,260
anymore everything worked out pretty

00:13:39,460 --> 00:13:43,540
much as expected

00:13:41,260 --> 00:13:45,430
while Cubana is coming up let's talk

00:13:43,540 --> 00:13:48,990
about the next topic and I'll show you

00:13:45,430 --> 00:13:52,630
that cubanos up afterwards watermarks

00:13:48,990 --> 00:13:55,090
who is aware of watermarks quick show of

00:13:52,630 --> 00:13:57,550
hands okay not everybody so we have

00:13:55,090 --> 00:13:59,050
various watermarks normally when you

00:13:57,550 --> 00:14:00,820
don't see stuff or stuff is overflowing

00:13:59,050 --> 00:14:03,730
bad stuff might happen and you basically

00:14:00,820 --> 00:14:07,120
want to stop from falling over if there

00:14:03,730 --> 00:14:08,680
is flooding so we had the first to the

00:14:07,120 --> 00:14:10,710
low and the high watermark we had in

00:14:08,680 --> 00:14:13,420
previous versions low basically meant

00:14:10,710 --> 00:14:15,730
stop allocating new charts if you have

00:14:13,420 --> 00:14:19,000
hit more than 85% of this space usage

00:14:15,730 --> 00:14:21,010
and if you're at 90% actually actively

00:14:19,000 --> 00:14:23,890
try to migrate charts away from that

00:14:21,010 --> 00:14:26,800
node if you have space anywhere else now

00:14:23,890 --> 00:14:31,150
we have added a new high flood stage or

00:14:26,800 --> 00:14:33,250
flood stage watermark for at 95% default

00:14:31,150 --> 00:14:35,680
values which will basically block write

00:14:33,250 --> 00:14:38,290
operations so if you have 5% or less of

00:14:35,680 --> 00:14:39,880
disk space left we will actively reject

00:14:38,290 --> 00:14:42,730
your write operations you can still

00:14:39,880 --> 00:14:45,130
retailer you can delete data but rather

00:14:42,730 --> 00:14:47,230
than writing data and probably being not

00:14:45,130 --> 00:14:49,450
able to write it everywhere or write it

00:14:47,230 --> 00:14:51,400
in the right way or corrupting your data

00:14:49,450 --> 00:14:55,990
somewhere we will just reject the write

00:14:51,400 --> 00:15:00,160
operations entirely so ideally Cubana

00:14:55,990 --> 00:15:01,050
has can come back up now and yes looks

00:15:00,160 --> 00:15:07,840
like we're in luck today

00:15:01,050 --> 00:15:10,360
I don't want to send statistics now so

00:15:07,840 --> 00:15:12,820
by the way the coloring scheme changed

00:15:10,360 --> 00:15:15,760
if you've never seen cabana 6 I always

00:15:12,820 --> 00:15:18,250
say 4 was black no authorities 3 was

00:15:15,760 --> 00:15:21,610
black 4 was white 5 was colorful 6 is

00:15:18,250 --> 00:15:22,870
blue why blue because it's easier to

00:15:21,610 --> 00:15:24,190
read if you're colorblind like the

00:15:22,870 --> 00:15:24,780
colorful stuff was not very good for

00:15:24,190 --> 00:15:28,040
colorblind

00:15:24,780 --> 00:15:30,600
people but now it should be better so

00:15:28,040 --> 00:15:32,730
yeah we're on six three the upcoming

00:15:30,600 --> 00:15:34,350
version which should come out very soon

00:15:32,730 --> 00:15:37,920
let's hope we don't find any more

00:15:34,350 --> 00:15:41,340
blockers and well we've upgraded all the

00:15:37,920 --> 00:15:43,230
nodes that should all be fine back two

00:15:41,340 --> 00:15:45,270
or three nodes so let's head over to the

00:15:43,230 --> 00:15:47,310
flood stages I create a new index which

00:15:45,270 --> 00:15:50,070
I call my flood and I insert one

00:15:47,310 --> 00:15:52,020
document and afterwards I check how much

00:15:50,070 --> 00:15:55,200
disk space do I have in my containers

00:15:52,020 --> 00:15:57,540
and you will see here we have thirty

00:15:55,200 --> 00:16:01,620
point one gig of this space available

00:15:57,540 --> 00:16:03,510
here in total and 24 gigs free I will

00:16:01,620 --> 00:16:06,060
actually set you can either set it to

00:16:03,510 --> 00:16:10,320
percent or an absolute value so I will

00:16:06,060 --> 00:16:11,880
set my watermarks to 150 and 30 gigs so

00:16:10,320 --> 00:16:15,650
I will hit the flood stage watermark

00:16:11,880 --> 00:16:18,360
immediately immediately after I had this

00:16:15,650 --> 00:16:20,670
interval that the update intervals so

00:16:18,360 --> 00:16:23,280
around every 10 seconds or so we will

00:16:20,670 --> 00:16:25,680
check did you hit any of the floods day

00:16:23,280 --> 00:16:28,530
or of the watermarks and will then try

00:16:25,680 --> 00:16:30,240
to act accordingly so now it should lock

00:16:28,530 --> 00:16:33,090
up my write operations immediately

00:16:30,240 --> 00:16:35,010
because well I only have 24 gigs of this

00:16:33,090 --> 00:16:35,580
space available and I set that limit to

00:16:35,010 --> 00:16:37,800
30 weeks

00:16:35,580 --> 00:16:40,170
you can still read documents this is the

00:16:37,800 --> 00:16:41,700
document I've just inserted but my write

00:16:40,170 --> 00:16:43,860
operation should be rejected because

00:16:41,700 --> 00:16:46,170
we've already hit the high flood stage

00:16:43,860 --> 00:16:47,820
at the flood stage watermark and you can

00:16:46,170 --> 00:16:50,150
see this is exactly the arrow operation

00:16:47,820 --> 00:16:52,980
or the response that you will get an

00:16:50,150 --> 00:16:57,930
index is read-only and allows deletes

00:16:52,980 --> 00:16:59,880
this is what all you can do so that

00:16:57,930 --> 00:17:02,010
works as expected let's revert it and I

00:16:59,880 --> 00:17:03,750
think it was version 5 where we added

00:17:02,010 --> 00:17:05,220
that if you want to reset something to

00:17:03,750 --> 00:17:07,920
the default value you don't want to set

00:17:05,220 --> 00:17:09,810
a specific value or not even that the

00:17:07,920 --> 00:17:11,370
value that is the default but reset the

00:17:09,810 --> 00:17:14,790
value you can actually set something to

00:17:11,370 --> 00:17:17,970
now now this will revert all these three

00:17:14,790 --> 00:17:21,990
settings to the default settings so 85

00:17:17,970 --> 00:17:24,390
90 and 95 percent will take some time to

00:17:21,990 --> 00:17:27,290
update and once it has been updated then

00:17:24,390 --> 00:17:31,700
I can run my write operations or can i

00:17:27,290 --> 00:17:31,700
it is expected that this fails

00:17:32,720 --> 00:17:38,120
it is it's maybe just a bit not what you

00:17:35,900 --> 00:17:40,309
were expecting because once an index is

00:17:38,120 --> 00:17:41,840
locked so once we had a shard and we

00:17:40,309 --> 00:17:43,760
tried to write to a shard where we hit

00:17:41,840 --> 00:17:45,830
the flood stage watermark we will lock

00:17:43,760 --> 00:17:48,289
that index and you currently need to

00:17:45,830 --> 00:17:51,679
manually unlock that index so what you

00:17:48,289 --> 00:17:54,049
need to do is on the index my flood you

00:17:51,679 --> 00:17:56,929
need to actually set the read only allow

00:17:54,049 --> 00:17:58,130
delete to null as well so that you don't

00:17:56,929 --> 00:18:00,470
write to that anymore

00:17:58,130 --> 00:18:02,870
and once you've reset that now you can

00:18:00,470 --> 00:18:05,900
happily write to your index again but

00:18:02,870 --> 00:18:07,640
you manually need to unset that we might

00:18:05,900 --> 00:18:09,559
change it in the future that we

00:18:07,640 --> 00:18:11,450
automatically we see you hit the the

00:18:09,559 --> 00:18:12,830
flood stage watermark and then you see

00:18:11,450 --> 00:18:14,630
your K there is more this space now we

00:18:12,830 --> 00:18:15,980
might unlock that automatically we're

00:18:14,630 --> 00:18:17,870
not sure what we want to avoid is that

00:18:15,980 --> 00:18:21,530
we have like a toggling state where you

00:18:17,870 --> 00:18:23,270
add that 95% limit and sometimes you can

00:18:21,530 --> 00:18:25,610
get a write-in and sometimes you cannot

00:18:23,270 --> 00:18:28,880
if you delete a few documents again for

00:18:25,610 --> 00:18:30,830
example so we're not sure right now

00:18:28,880 --> 00:18:35,200
there is no automatisms you will need to

00:18:30,830 --> 00:18:35,200
manually actually change and fix that

00:18:37,600 --> 00:18:41,840
sequence numbers that was one of the big

00:18:40,549 --> 00:18:43,640
things that we have added as well

00:18:41,840 --> 00:18:45,200
because sometimes keeping track of what

00:18:43,640 --> 00:18:46,669
is going on is kind of hard and

00:18:45,200 --> 00:18:50,480
sometimes you need more than your

00:18:46,669 --> 00:18:51,980
fingers to count so this is to show you

00:18:50,480 --> 00:18:54,080
how a sequence numbers work so you have

00:18:51,980 --> 00:18:56,179
a primary shot and two replicas charts

00:18:54,080 --> 00:18:58,700
we have a write operation zero which is

00:18:56,179 --> 00:19:00,380
being replicated to my replicas you have

00:18:58,700 --> 00:19:01,760
a local checkpoint what you have locally

00:19:00,380 --> 00:19:03,559
written and then you have these global

00:19:01,760 --> 00:19:05,390
checkpoints so whenever you do a write

00:19:03,559 --> 00:19:06,740
operation and the response we will

00:19:05,390 --> 00:19:07,970
actually tell you okay we're at this

00:19:06,740 --> 00:19:10,159
local checkpoint and then you can

00:19:07,970 --> 00:19:13,220
forward the global checkpoint we

00:19:10,159 --> 00:19:14,900
basically piggyback on the requester you

00:19:13,220 --> 00:19:16,490
can see we're doing to write operations

00:19:14,900 --> 00:19:18,409
if they're in the wrong order we know

00:19:16,490 --> 00:19:20,450
that since there is sequential number

00:19:18,409 --> 00:19:22,460
only if we have all the rights we can

00:19:20,450 --> 00:19:24,409
forward the local checkpoint and then

00:19:22,460 --> 00:19:26,630
tell the primary that we have received

00:19:24,409 --> 00:19:29,059
all the or replicated all the day then

00:19:26,630 --> 00:19:32,960
we can forward the global checkpoint now

00:19:29,059 --> 00:19:35,630
my primary shot will die and you can see

00:19:32,960 --> 00:19:37,460
right operation four and six has gone

00:19:35,630 --> 00:19:40,250
through replicas too and the new primary

00:19:37,460 --> 00:19:42,289
shot has not received that for operation

00:19:40,250 --> 00:19:44,059
and basically since it's the new primary

00:19:42,289 --> 00:19:45,980
it will tell the other shot well roll

00:19:44,059 --> 00:19:46,700
back your fourth right operation because

00:19:45,980 --> 00:19:48,200
I didn't see

00:19:46,700 --> 00:19:51,200
I'm setting what is kind of the real

00:19:48,200 --> 00:19:54,260
estate throat it out and now kind of my

00:19:51,200 --> 00:19:55,940
state is what you need to get and then

00:19:54,260 --> 00:19:57,710
they will just sync up on all the the

00:19:55,940 --> 00:19:59,480
sequence numbers and transactions or the

00:19:57,710 --> 00:20:01,220
operations that you have had in between

00:19:59,480 --> 00:20:02,900
so these are the sequence numbers that

00:20:01,220 --> 00:20:04,480
we have added to keep track of what is

00:20:02,900 --> 00:20:06,830
going on

00:20:04,480 --> 00:20:11,930
so secrets numbers look something like

00:20:06,830 --> 00:20:14,840
this so let's say I'm creating a new

00:20:11,930 --> 00:20:17,360
index called sequences sequence numbers

00:20:14,840 --> 00:20:19,460
with one primary shot one replica shot

00:20:17,360 --> 00:20:21,290
and I'm excluding the elasticsearch one

00:20:19,460 --> 00:20:24,380
instance why am i excluding the

00:20:21,290 --> 00:20:26,420
elasticsearch one instance because

00:20:24,380 --> 00:20:28,880
Cubana is talking to it and i will need

00:20:26,420 --> 00:20:30,380
to kill notes again and otherwise that

00:20:28,880 --> 00:20:32,420
we need to fall back on the command line

00:20:30,380 --> 00:20:33,950
again and i don't want that so these

00:20:32,420 --> 00:20:36,680
charts can be allocated to the

00:20:33,950 --> 00:20:40,070
elasticsearch two in three nodes if we

00:20:36,680 --> 00:20:42,230
check that we can see we have the

00:20:40,070 --> 00:20:45,490
primary shot is elasticsearch three and

00:20:42,230 --> 00:20:47,330
the replica shot is elasticsearch to

00:20:45,490 --> 00:20:48,950
remember that the primary shot is

00:20:47,330 --> 00:20:51,290
elasticsearch three we will need that

00:20:48,950 --> 00:20:53,990
information in a few moments so now you

00:20:51,290 --> 00:20:55,970
can start inserting documents and this

00:20:53,990 --> 00:20:58,400
looks very familiar or at least this

00:20:55,970 --> 00:21:02,090
party looks very familiar this part here

00:20:58,400 --> 00:21:03,830
is what is new the sequence number let's

00:21:02,090 --> 00:21:05,420
insert a few more documents to see what

00:21:03,830 --> 00:21:06,860
is happening here so you can see the

00:21:05,420 --> 00:21:09,170
sequence number is basically an

00:21:06,860 --> 00:21:11,210
increment for every operation and at the

00:21:09,170 --> 00:21:14,210
primary term that will change every time

00:21:11,210 --> 00:21:15,650
the primary shot changes so we can keep

00:21:14,210 --> 00:21:17,510
track of who is received with write

00:21:15,650 --> 00:21:21,230
operations we need both of these

00:21:17,510 --> 00:21:23,420
counters you can write one specific

00:21:21,230 --> 00:21:25,100
document even if you do an update since

00:21:23,420 --> 00:21:26,990
I'm writing to the same document ID here

00:21:25,100 --> 00:21:29,210
even if it's an update it will increment

00:21:26,990 --> 00:21:31,400
that number if I delete that document

00:21:29,210 --> 00:21:35,120
will it be another operation will my

00:21:31,400 --> 00:21:37,400
sequence number increment yes it does

00:21:35,120 --> 00:21:39,380
so I've deleted a document what if I try

00:21:37,400 --> 00:21:42,160
to delete the document again will it

00:21:39,380 --> 00:21:48,640
still increment the sequence number

00:21:42,160 --> 00:21:48,640
guesses who says yes who says no

00:21:49,340 --> 00:21:56,220
it does it doesn't change anything but

00:21:54,840 --> 00:21:59,970
we were keeping track of all the right

00:21:56,220 --> 00:22:02,639
operations that we do and okay so what

00:21:59,970 --> 00:22:05,700
we will do now is and we have kind of

00:22:02,639 --> 00:22:08,639
like the basically three was the primary

00:22:05,700 --> 00:22:10,350
shot we will kill that node and I think

00:22:08,639 --> 00:22:11,639
that was also the master node now by

00:22:10,350 --> 00:22:13,440
accident so this is kind of the worst

00:22:11,639 --> 00:22:15,750
case scenario we need to vote for

00:22:13,440 --> 00:22:17,340
another master node and then the nodes

00:22:15,750 --> 00:22:20,279
need to figure out okay what data do I

00:22:17,340 --> 00:22:22,470
have where is my new primary copy what

00:22:20,279 --> 00:22:24,120
do I do here so if you look at that you

00:22:22,470 --> 00:22:26,490
probably see okay elasticsearch three

00:22:24,120 --> 00:22:28,679
exited and then my other nodes might be

00:22:26,490 --> 00:22:31,740
shortly confused but hopefully they will

00:22:28,679 --> 00:22:35,730
figure out what they need to do so let's

00:22:31,740 --> 00:22:38,370
see they are still trying to get a new

00:22:35,730 --> 00:22:40,769
master node so right now they're in a

00:22:38,370 --> 00:22:42,570
slightly confused state let's see there

00:22:40,769 --> 00:22:46,769
is a slight timeout for which we need to

00:22:42,570 --> 00:22:47,399
wait which was thirty seconds you can

00:22:46,769 --> 00:22:50,580
see okay

00:22:47,399 --> 00:22:52,350
very scary SEC traces but this is kind

00:22:50,580 --> 00:22:53,820
of expected they're figuring out that

00:22:52,350 --> 00:22:55,860
they need to vote for a new master node

00:22:53,820 --> 00:22:58,649
and then they will also figure out that

00:22:55,860 --> 00:23:01,019
the primary shot is gone so this might

00:22:58,649 --> 00:23:03,990
take I don't know a few more seconds

00:23:01,019 --> 00:23:06,090
hopefully only this will repeat a few

00:23:03,990 --> 00:23:08,429
times where elasticsearch one and two

00:23:06,090 --> 00:23:10,980
will try to ping the master node the

00:23:08,429 --> 00:23:13,080
elastic to three node and after a few

00:23:10,980 --> 00:23:17,460
pings they give up and then will elect a

00:23:13,080 --> 00:23:20,100
new master node between themselves so

00:23:17,460 --> 00:23:22,490
here you can see primary replicas resync

00:23:20,100 --> 00:23:26,549
so they seem to have figured out that

00:23:22,490 --> 00:23:30,059
only those two are left now and you can

00:23:26,549 --> 00:23:31,760
see here they have not figured out that

00:23:30,059 --> 00:23:35,220
elasticsearch three is actually gone

00:23:31,760 --> 00:23:39,059
that will take another few moments come

00:23:35,220 --> 00:23:40,679
on because right now you would try to

00:23:39,059 --> 00:23:42,299
send your search request to your right

00:23:40,679 --> 00:23:43,710
operations to a shot that doesn't exist

00:23:42,299 --> 00:23:46,380
or is not part of the cluster right now

00:23:43,710 --> 00:23:49,519
it would timeout then your client needs

00:23:46,380 --> 00:23:51,630
to handle that but in a few moments now

00:23:49,519 --> 00:23:54,149
they have actually figured it out and

00:23:51,630 --> 00:23:56,309
here you can see my primary shot now is

00:23:54,149 --> 00:24:00,470
the elastic search to node my replica

00:23:56,309 --> 00:24:00,470
shot is unassigned why is it unassigned

00:24:01,130 --> 00:24:03,860
basically because it couldn't go

00:24:02,120 --> 00:24:05,810
anywhere else because elasticsearch

00:24:03,860 --> 00:24:08,930
three is down why does it not go to

00:24:05,810 --> 00:24:10,550
elasticsearch one because we said

00:24:08,930 --> 00:24:12,500
explicitly that this index can only be

00:24:10,550 --> 00:24:14,090
go to elasticsearch two and three why

00:24:12,500 --> 00:24:17,360
does it not replicate to elasticsearch

00:24:14,090 --> 00:24:19,610
two because there is no point in having

00:24:17,360 --> 00:24:21,140
the replica on the same note so there is

00:24:19,610 --> 00:24:24,200
basically no place where this can

00:24:21,140 --> 00:24:29,210
replicate so what state will our cluster

00:24:24,200 --> 00:24:31,340
be in now yellow because all the data is

00:24:29,210 --> 00:24:32,690
there you can read and write it but you

00:24:31,340 --> 00:24:34,220
don't have all the replicas that you

00:24:32,690 --> 00:24:35,300
want to have in your clustering will

00:24:34,220 --> 00:24:37,400
tell you in the cluster state that is

00:24:35,300 --> 00:24:39,890
yellow now let's insert a few more

00:24:37,400 --> 00:24:42,380
documents so you can see my sequence

00:24:39,890 --> 00:24:43,850
number is counting up and once we're

00:24:42,380 --> 00:24:46,810
satisfied with that we can actually

00:24:43,850 --> 00:24:49,400
restart the elasticsearch 3 node again

00:24:46,810 --> 00:24:51,320
and well it will take another 20 seconds

00:24:49,400 --> 00:24:55,630
or so let's keep doing some write

00:24:51,320 --> 00:24:57,740
operations of the 20 seconds or whatever

00:24:55,630 --> 00:24:59,510
elasticsearch 3 will join the culture

00:24:57,740 --> 00:25:01,220
again will that be a primary or a

00:24:59,510 --> 00:25:05,780
replica shot for this index now

00:25:01,220 --> 00:25:07,910
afterwards replica because we don't

00:25:05,780 --> 00:25:09,740
change the primaries it will see okay

00:25:07,910 --> 00:25:11,660
there is an existing primary shot I will

00:25:09,740 --> 00:25:13,370
become a replica shot and then it will

00:25:11,660 --> 00:25:19,520
try to sync up all the data that it

00:25:13,370 --> 00:25:21,140
missed so let's see okay you can see it

00:25:19,520 --> 00:25:23,690
has joined again we have the primary

00:25:21,140 --> 00:25:25,970
shot now is elasticsearch 2 and the

00:25:23,690 --> 00:25:28,280
replica shot is elasticsearch 3 so that

00:25:25,970 --> 00:25:31,480
worked as expected and now to one of the

00:25:28,280 --> 00:25:35,870
very nice side effects of this we have

00:25:31,480 --> 00:25:37,970
bless you we have here based on the

00:25:35,870 --> 00:25:41,000
sequence numbers we have these trans

00:25:37,970 --> 00:25:43,250
lock ups recovered basically in previous

00:25:41,000 --> 00:25:45,170
versions we were comparing the leucine

00:25:43,250 --> 00:25:46,640
segments that we were writing and since

00:25:45,170 --> 00:25:47,900
they were written independently often

00:25:46,640 --> 00:25:49,730
these leucine segments were slightly

00:25:47,900 --> 00:25:52,040
different and then we had to replicate a

00:25:49,730 --> 00:25:55,430
lot of data everything that was

00:25:52,040 --> 00:25:57,530
different on disk with this transaction

00:25:55,430 --> 00:25:59,990
lock that we have we can basically just

00:25:57,530 --> 00:26:02,990
replay the missed out transactions and

00:25:59,990 --> 00:26:06,020
here you can see elasticsearch 2

00:26:02,990 --> 00:26:08,780
replicated 18 changes to elasticsearch 3

00:26:06,020 --> 00:26:10,550
because those world where the 18 changes

00:26:08,780 --> 00:26:13,160
that it missed while it was down and it

00:26:10,550 --> 00:26:15,020
has done those so any recovery will be

00:26:13,160 --> 00:26:22,520
much more efficient now since we only

00:26:15,020 --> 00:26:24,620
to replay those changes okay no we don't

00:26:22,520 --> 00:26:26,810
want to see that and what do you think

00:26:24,620 --> 00:26:30,470
happens if we run out of sequence

00:26:26,810 --> 00:26:35,690
numbers do we have any mechanism to roll

00:26:30,470 --> 00:26:39,050
those over we don't so our assumption is

00:26:35,690 --> 00:26:41,680
pretty much this is a long and the long

00:26:39,050 --> 00:26:45,200
should be enough for pretty much forever

00:26:41,680 --> 00:26:46,700
also because it's on a per shot level

00:26:45,200 --> 00:26:48,770
and I can demonstrate that first shot

00:26:46,700 --> 00:26:51,290
level quite easily so let's throw away

00:26:48,770 --> 00:26:54,590
the index that we have let's say we have

00:26:51,290 --> 00:26:57,230
ten primary shots one replica shot you

00:26:54,590 --> 00:26:59,690
can see lots of shards let's make this

00:26:57,230 --> 00:27:01,760
slightly smaller so lots of shards and

00:26:59,690 --> 00:27:03,770
then you can do your write operations

00:27:01,760 --> 00:27:06,560
for example here I don't provide an ID

00:27:03,770 --> 00:27:08,510
so it will go to any random chart

00:27:06,560 --> 00:27:10,370
because we will generate a random ID and

00:27:08,510 --> 00:27:12,560
you can see okay sequence number zero

00:27:10,370 --> 00:27:14,510
zero at some point we will have a 1 and

00:27:12,560 --> 00:27:16,400
then it will fall back to zero or two or

00:27:14,510 --> 00:27:17,810
whatever since it is on a per shot level

00:27:16,400 --> 00:27:21,320
so this is a write operation on a per

00:27:17,810 --> 00:27:24,590
shot level if you write to the same in

00:27:21,320 --> 00:27:28,040
chart because here I have a specific ID

00:27:24,590 --> 00:27:29,390
it will always hash to the same hash for

00:27:28,040 --> 00:27:31,220
the writing information so this will go

00:27:29,390 --> 00:27:33,770
to the same chart so here we have a

00:27:31,220 --> 00:27:34,850
nicely incrementing counter basically

00:27:33,770 --> 00:27:40,790
since it's always going to the same

00:27:34,850 --> 00:27:42,710
chart this is mainly a question coming

00:27:40,790 --> 00:27:45,140
from Postgres people because they have

00:27:42,710 --> 00:27:47,600
this global transaction ID which is an

00:27:45,140 --> 00:27:49,430
integer and if you don't run auto vacuum

00:27:47,600 --> 00:27:51,170
on a frequent basis and it rolls over

00:27:49,430 --> 00:27:53,270
you will not be able to do any write

00:27:51,170 --> 00:27:55,310
operations anymore we don't really have

00:27:53,270 --> 00:27:57,470
that problem because if I if I

00:27:55,310 --> 00:27:59,900
calculated that correctly with 2 to the

00:27:57,470 --> 00:28:02,360
power of 63 you if you do like a million

00:27:59,900 --> 00:28:04,970
write operations per second you still

00:28:02,360 --> 00:28:06,800
have something like 300,000 years on a

00:28:04,970 --> 00:28:08,300
per shot level or something like that so

00:28:06,800 --> 00:28:11,180
this is not a real problem that you will

00:28:08,300 --> 00:28:13,460
run into we don't have any mechanism to

00:28:11,180 --> 00:28:16,010
roll it over but it will not happen or

00:28:13,460 --> 00:28:19,190
if it happens something is very weird in

00:28:16,010 --> 00:28:20,780
your system there's one trade-off I ever

00:28:19,190 --> 00:28:23,300
we need to keep track of all these

00:28:20,780 --> 00:28:26,750
transactions so this is again on a per

00:28:23,300 --> 00:28:28,700
shot level we will keep up to half a gig

00:28:26,750 --> 00:28:30,800
of transactions

00:28:28,700 --> 00:28:32,780
or up to 12 hours so whatever hits first

00:28:30,800 --> 00:28:34,880
we will throw out the data but you will

00:28:32,780 --> 00:28:37,130
need to keep up to half a gig of disk

00:28:34,880 --> 00:28:39,500
space in addition to every single shot

00:28:37,130 --> 00:28:42,020
that you have on a server so this is

00:28:39,500 --> 00:28:44,150
just more disk space that you might have

00:28:42,020 --> 00:28:46,040
and you need to keep track of that so

00:28:44,150 --> 00:28:48,830
you won't run into for example the flood

00:28:46,040 --> 00:28:51,740
stage watermark at some point and be not

00:28:48,830 --> 00:28:54,050
allowed to write anymore and this will

00:28:51,740 --> 00:28:56,570
allow some more features so we might or

00:28:54,050 --> 00:28:58,520
we're currently trying to get to cross

00:28:56,570 --> 00:29:00,050
data center replication where you have

00:28:58,520 --> 00:29:01,160
basically independent clusters in

00:29:00,050 --> 00:29:03,200
different regions and we will just

00:29:01,160 --> 00:29:05,240
replay operations to another cluster

00:29:03,200 --> 00:29:07,130
since we have the transaction log we can

00:29:05,240 --> 00:29:10,340
do that in an async fashion we're just

00:29:07,130 --> 00:29:12,620
fixing some stuff in or adding features

00:29:10,340 --> 00:29:13,730
we need on a leucine level and once we

00:29:12,620 --> 00:29:15,740
have those we will add them in

00:29:13,730 --> 00:29:17,990
elasticsearch we're not sure about the

00:29:15,740 --> 00:29:20,390
version maybe some later six to the X

00:29:17,990 --> 00:29:21,770
version or sometimes in seven only but

00:29:20,390 --> 00:29:25,550
we're working on that so that will come

00:29:21,770 --> 00:29:29,180
as well types are going away who knew

00:29:25,550 --> 00:29:31,670
that types are going away who who is

00:29:29,180 --> 00:29:33,920
very surprised okay

00:29:31,670 --> 00:29:36,080
there is still one or two hands and so

00:29:33,920 --> 00:29:39,050
first off why are we getting rid of

00:29:36,080 --> 00:29:41,560
types um kind of because we lied and

00:29:39,050 --> 00:29:46,910
okay something is falling down

00:29:41,560 --> 00:29:49,460
why multiple types don't really exist on

00:29:46,910 --> 00:29:51,230
a leucine level and a half like if you

00:29:49,460 --> 00:29:52,730
have different types you would assume

00:29:51,230 --> 00:29:54,500
they're kind of independent but they are

00:29:52,730 --> 00:29:56,420
not because for leucine they still map

00:29:54,500 --> 00:29:57,830
to the same field so for example if you

00:29:56,420 --> 00:30:00,110
have two different types and you have

00:29:57,830 --> 00:30:01,910
the field disabled on two of them and

00:30:00,110 --> 00:30:03,680
you might think one of these fields is a

00:30:01,910 --> 00:30:06,560
boolean because I disabled somebody and

00:30:03,680 --> 00:30:08,690
the other field is a timestamp because

00:30:06,560 --> 00:30:10,160
that's when I disabled somebody this

00:30:08,690 --> 00:30:12,770
will not work out because it needs to

00:30:10,160 --> 00:30:14,330
map to the same data type sparsity even

00:30:12,770 --> 00:30:16,460
though improved in leucine seven is

00:30:14,330 --> 00:30:18,740
still not a great thing and also scoring

00:30:16,460 --> 00:30:21,340
is not on a per type level but within

00:30:18,740 --> 00:30:23,630
the index which is kind of confusing and

00:30:21,340 --> 00:30:25,610
the elasticsearch team wants to get rid

00:30:23,630 --> 00:30:28,490
of types for a long time so what are we

00:30:25,610 --> 00:30:31,490
doing in five you could opt in to having

00:30:28,490 --> 00:30:33,440
a single type in six by default you can

00:30:31,490 --> 00:30:35,390
only have a single type anymore you can

00:30:33,440 --> 00:30:37,040
change it in a configuration but don't

00:30:35,390 --> 00:30:40,460
do that because it will only be more

00:30:37,040 --> 00:30:42,530
pain later on you can still use multiple

00:30:40,460 --> 00:30:45,110
types if you have imported data from

00:30:42,530 --> 00:30:48,380
five that is why I have inserted those

00:30:45,110 --> 00:30:50,240
documents at the beginning in seven you

00:30:48,380 --> 00:30:52,190
cannot create multiple types anymore and

00:30:50,240 --> 00:30:54,560
the type will actually be optional in

00:30:52,190 --> 00:30:56,510
the API and in eight basically there are

00:30:54,560 --> 00:30:58,460
no more types so this will take quite a

00:30:56,510 --> 00:31:00,470
few years but this ensures that we don't

00:30:58,460 --> 00:31:03,370
have any breaking changes and you don't

00:31:00,470 --> 00:31:07,970
have any major upgrading pains there so

00:31:03,370 --> 00:31:10,670
what does this look like you remember I

00:31:07,970 --> 00:31:12,170
have created that index types with three

00:31:10,670 --> 00:31:15,830
different types so you can see I have

00:31:12,170 --> 00:31:17,840
here type 1 type 2 and type 3 and all of

00:31:15,830 --> 00:31:20,870
them have the ID one by the way just to

00:31:17,840 --> 00:31:22,850
make it a bit more tricky now I want to

00:31:20,870 --> 00:31:26,230
create a new type with the underscore

00:31:22,850 --> 00:31:30,380
doc type which is the one we recommend

00:31:26,230 --> 00:31:32,960
in 6 0 & 6 1 women recommended doc

00:31:30,380 --> 00:31:36,530
without the underscore we changed it we

00:31:32,960 --> 00:31:38,330
are sorry use underscore doc now that is

00:31:36,530 --> 00:31:40,160
the one we recommend unfortunately on 6

00:31:38,330 --> 00:31:44,480
0 & 6 1 if you try to use the type

00:31:40,160 --> 00:31:46,430
underscore doc it doesn't work go to 6 2

00:31:44,480 --> 00:31:49,340
directly and then use underscore doc to

00:31:46,430 --> 00:31:50,750
avoid any upgrading pains around that we

00:31:49,340 --> 00:31:52,850
just figured out like underscore is

00:31:50,750 --> 00:31:54,290
normally what we use for internal stuff

00:31:52,850 --> 00:31:56,660
so this is the one we want to use now

00:31:54,290 --> 00:31:58,700
though you can pick any type as long as

00:31:56,660 --> 00:32:00,530
this there is only a single one so I'm

00:31:58,700 --> 00:32:02,180
inserting one document with this type

00:32:00,530 --> 00:32:05,240
then I try to insert another document

00:32:02,180 --> 00:32:06,920
with another type what will happen it

00:32:05,240 --> 00:32:08,600
will fail of course and it will actually

00:32:06,920 --> 00:32:11,780
tell me you were trying to have two

00:32:08,600 --> 00:32:13,370
different types which we don't allow how

00:32:11,780 --> 00:32:14,930
do you migrate your data I mean this

00:32:13,370 --> 00:32:17,390
squares okay you need to change the type

00:32:14,930 --> 00:32:19,370
how do you migrate your data data I'm

00:32:17,390 --> 00:32:21,470
using the reindex API and basically

00:32:19,370 --> 00:32:23,720
taking the data from the types index

00:32:21,470 --> 00:32:26,270
with multiple types and play it into the

00:32:23,720 --> 00:32:28,400
node types index and then I'm changing

00:32:26,270 --> 00:32:31,190
with this script here I'm saying the ID

00:32:28,400 --> 00:32:32,600
is a concatenation of the type and the

00:32:31,190 --> 00:32:34,130
ID since all my documents in the

00:32:32,600 --> 00:32:36,470
different types at the ID 1

00:32:34,130 --> 00:32:38,540
I need the concatenation I set the

00:32:36,470 --> 00:32:41,720
underscore type field this internal one

00:32:38,540 --> 00:32:43,700
to my custom field type and then I said

00:32:41,720 --> 00:32:47,090
the underscore type field to underscore

00:32:43,700 --> 00:32:49,040
doc and if I play that it will actually

00:32:47,090 --> 00:32:51,860
take my three documents and put them

00:32:49,040 --> 00:32:53,570
into the no types index and you can see

00:32:51,860 --> 00:32:55,220
I have all of them here all of them have

00:32:53,570 --> 00:32:56,269
to type underscore doc and you can see

00:32:55,220 --> 00:32:58,190
this one was the one

00:32:56,269 --> 00:33:00,339
insert it directly and these are the

00:32:58,190 --> 00:33:03,679
ones that I've replayed with this ID and

00:33:00,339 --> 00:33:05,450
with a filter you can get back to pretty

00:33:03,679 --> 00:33:07,519
much the same behavior that you have if

00:33:05,450 --> 00:33:09,589
you were using multiple types you just

00:33:07,519 --> 00:33:11,869
need to have well the filter to filter

00:33:09,589 --> 00:33:12,889
down on the type one for example here

00:33:11,869 --> 00:33:15,139
and then you should get a single

00:33:12,889 --> 00:33:23,330
document back with that custom type

00:33:15,139 --> 00:33:26,330
field - kind of more performance

00:33:23,330 --> 00:33:28,129
optimizations are automatically resizing

00:33:26,330 --> 00:33:30,349
we've added that which is kind of clever

00:33:28,129 --> 00:33:32,209
you can set my target response time for

00:33:30,349 --> 00:33:34,009
searches for example is two seconds and

00:33:32,209 --> 00:33:36,950
elasticsearch will figure out that right

00:33:34,009 --> 00:33:39,979
now it is serving 50 search requests per

00:33:36,950 --> 00:33:43,399
second so your queue size is a hundred

00:33:39,979 --> 00:33:45,919
and and if you try to add 100 first

00:33:43,399 --> 00:33:47,690
element it will actually be rejected and

00:33:45,919 --> 00:33:49,129
then your client can figure out do I

00:33:47,690 --> 00:33:50,690
want to try a different node or do I

00:33:49,129 --> 00:33:53,179
want to take some other action but

00:33:50,690 --> 00:33:54,829
rather than queuing up search requests

00:33:53,179 --> 00:33:57,379
for longer than those two seconds or

00:33:54,829 --> 00:33:59,749
approximately two seconds then we'll try

00:33:57,379 --> 00:34:02,450
to actively reject operations to have

00:33:59,749 --> 00:34:04,070
avoid that the other one is adaptive

00:34:02,450 --> 00:34:06,200
replica selection so right now we are

00:34:04,070 --> 00:34:08,119
doing round robin in between primary and

00:34:06,200 --> 00:34:11,240
any replica shots to do read operations

00:34:08,119 --> 00:34:12,799
what we are so it was added in six one

00:34:11,240 --> 00:34:16,250
needs to be enabled explicitly it will

00:34:12,799 --> 00:34:19,609
be on by default in seven it's based on

00:34:16,250 --> 00:34:21,020
yeah a funky paper what we're trying to

00:34:19,609 --> 00:34:22,460
do is basically we're figuring out

00:34:21,020 --> 00:34:25,129
trying to figure out which is the least

00:34:22,460 --> 00:34:27,200
busy node and then we'll try to go to

00:34:25,129 --> 00:34:30,139
that node so we're not trying to go to a

00:34:27,200 --> 00:34:32,059
node that has already a very queued up a

00:34:30,139 --> 00:34:33,710
lot of requests and might be slow or

00:34:32,059 --> 00:34:35,629
that is I don't know experience some

00:34:33,710 --> 00:34:37,700
garbage collection we'll just try to

00:34:35,629 --> 00:34:41,000
route around busy nodes and go to the

00:34:37,700 --> 00:34:43,129
less busy node for faster requests if

00:34:41,000 --> 00:34:45,139
you have a busy cluster this will help a

00:34:43,129 --> 00:34:48,520
lot if you have a not very busy cluster

00:34:45,139 --> 00:34:51,740
the change is still not hurting you

00:34:48,520 --> 00:34:53,990
shrink and split those are two of the

00:34:51,740 --> 00:34:57,289
API so people have requested for a long

00:34:53,990 --> 00:34:58,819
time so well shrink is kind of obvious

00:34:57,289 --> 00:35:02,289
you try to combine multiple shots

00:34:58,819 --> 00:35:04,579
together which will look something or

00:35:02,289 --> 00:35:07,009
yeah which will look something like this

00:35:04,579 --> 00:35:10,099
so I have a shrink index where I insert

00:35:07,009 --> 00:35:15,650
one document so you can see

00:35:10,099 --> 00:35:19,249
many shots will I have five primary five

00:35:15,650 --> 00:35:23,029
replicas what I didn't say is I want to

00:35:19,249 --> 00:35:25,640
have one primary or shot replica shot on

00:35:23,029 --> 00:35:28,849
the elasticsearch 3-node so I'll make

00:35:25,640 --> 00:35:32,690
sure that I have at least one shot or

00:35:28,849 --> 00:35:34,880
one of the shots on one note and then so

00:35:32,690 --> 00:35:37,099
if you show that you could we could see

00:35:34,880 --> 00:35:39,410
that elastic so three has now one copy

00:35:37,099 --> 00:35:41,599
each and now I take my shrink index

00:35:39,410 --> 00:35:45,400
called the underscore shrink API and

00:35:41,599 --> 00:35:49,819
store the result in the shrunk index

00:35:45,400 --> 00:35:52,670
which only has one shot and if you run

00:35:49,819 --> 00:35:54,440
that you can see now we only have two

00:35:52,670 --> 00:35:56,720
shots one primary and one replica and

00:35:54,440 --> 00:35:58,130
this is very fast because this is hard

00:35:56,720 --> 00:36:00,319
linking the files on the file system

00:35:58,130 --> 00:36:02,390
that is why we needed to have one copy

00:36:00,319 --> 00:36:04,130
on the s exert three instance of every

00:36:02,390 --> 00:36:06,200
short so we could hard link them

00:36:04,130 --> 00:36:09,109
together and from now on you can just

00:36:06,200 --> 00:36:11,539
work with this one copy the other

00:36:09,109 --> 00:36:14,119
operation so the document is still there

00:36:11,539 --> 00:36:16,219
the other operation is split so what I'm

00:36:14,119 --> 00:36:18,920
doing here is I'm saying I want to

00:36:16,219 --> 00:36:21,499
create and split index with one shot but

00:36:18,920 --> 00:36:23,239
I want to have a routing shot a number

00:36:21,499 --> 00:36:26,180
of routing shots up to 20 and I can

00:36:23,239 --> 00:36:32,749
split into any number of or any factor

00:36:26,180 --> 00:36:35,180
of that so let's create those if I enter

00:36:32,749 --> 00:36:36,710
the document you have one primary one

00:36:35,180 --> 00:36:37,339
replica shot this is pretty much what

00:36:36,710 --> 00:36:40,219
you expect

00:36:37,339 --> 00:36:42,049
you can block write operations and then

00:36:40,219 --> 00:36:45,410
I basically say take the split index

00:36:42,049 --> 00:36:47,210
called the underscore split API endpoint

00:36:45,410 --> 00:36:48,650
on that I couldn't find a better name

00:36:47,210 --> 00:36:50,869
unfortunately but this is called split

00:36:48,650 --> 00:36:54,920
in five now and I'll split this one shot

00:36:50,869 --> 00:36:56,630
into five primary shots which is also

00:36:54,920 --> 00:36:58,430
hard linking those and then you can see

00:36:56,630 --> 00:37:00,229
okay now we have five primary and five

00:36:58,430 --> 00:37:03,140
replica shots again you get the same

00:37:00,229 --> 00:37:04,789
data back and if you run the underscore

00:37:03,140 --> 00:37:08,150
settings API on that one it will

00:37:04,789 --> 00:37:11,319
actually tell you where this data has

00:37:08,150 --> 00:37:16,339
been coming from and has been split out

00:37:11,319 --> 00:37:18,920
okay so we have covered those things the

00:37:16,339 --> 00:37:20,989
one thing I still wanted to mention

00:37:18,920 --> 00:37:23,210
we're changing the default number of

00:37:20,989 --> 00:37:25,640
sharks because

00:37:23,210 --> 00:37:27,410
is not a good number you know if I want

00:37:25,640 --> 00:37:29,780
to shrink I need to split our shrink

00:37:27,410 --> 00:37:31,250
into a factor and 5 is a prime number so

00:37:29,780 --> 00:37:33,620
any prime number is not a very good

00:37:31,250 --> 00:37:35,600
choice what do you think would be a good

00:37:33,620 --> 00:37:38,600
number of primary shots and we've had

00:37:35,600 --> 00:37:41,000
this discussion for years internally any

00:37:38,600 --> 00:37:44,740
guesses or any guesses which number of

00:37:41,000 --> 00:37:48,830
shots we will pick as a default for now

00:37:44,740 --> 00:37:51,320
it will be 1 so 1 will be the new

00:37:48,830 --> 00:37:54,310
default because where we have teen

00:37:51,320 --> 00:37:57,470
seeing too much over shouting and also

00:37:54,310 --> 00:38:00,470
someone says that use 1 index or one

00:37:57,470 --> 00:38:03,940
chart until it blows up and the Jewish

00:38:00,470 --> 00:38:07,130
diamond is here but oh yeah hi Simon

00:38:03,940 --> 00:38:09,890
yes he will actually say that to you if

00:38:07,130 --> 00:38:12,110
you ask so yeah we're getting there and

00:38:09,890 --> 00:38:13,700
the other thing that we're adding or

00:38:12,110 --> 00:38:16,880
probably do this is still under

00:38:13,700 --> 00:38:21,590
discussion we might do JDK 11 minimum

00:38:16,880 --> 00:38:23,780
version for the upcoming set 7 question

00:38:21,590 --> 00:38:25,940
are can't use this upgrade and what

00:38:23,780 --> 00:38:27,830
versions of the Java client do we

00:38:25,940 --> 00:38:29,570
require then which will basically mean

00:38:27,830 --> 00:38:31,760
transport client is deprecated so we

00:38:29,570 --> 00:38:32,660
don't care anymore the low-level client

00:38:31,760 --> 00:38:34,790
doesn't have an elastic search

00:38:32,660 --> 00:38:37,070
dependency so that can stay on 7 and we

00:38:34,790 --> 00:38:39,140
want to keep that on 7 for the

00:38:37,070 --> 00:38:41,300
high-level rest client to use the

00:38:39,140 --> 00:38:44,450
elastic search 7 version you will need

00:38:41,300 --> 00:38:47,000
the JDK 11 as well there you can still

00:38:44,450 --> 00:38:49,670
use the high-level client in version 6

00:38:47,000 --> 00:38:52,310
and get all the features from 6 if you

00:38:49,670 --> 00:38:54,680
need the newer versions or new features

00:38:52,310 --> 00:38:56,150
you will need to fall or fall back to

00:38:54,680 --> 00:38:58,460
the low-level client to actually run

00:38:56,150 --> 00:39:01,940
those queries but that is what we had in

00:38:58,460 --> 00:39:04,270
mind this is pretty much it and I think

00:39:01,940 --> 00:39:06,500
we're out of time

00:39:04,270 --> 00:39:08,060
if you haven't seen enough elasticsearch

00:39:06,500 --> 00:39:09,920
stuff we have a meet-up here

00:39:08,060 --> 00:39:12,080
organized by the community we will have

00:39:09,920 --> 00:39:15,230
one on Thursday so if you want to dive

00:39:12,080 --> 00:39:17,900
more into search things I will do some

00:39:15,230 --> 00:39:20,030
workshop style search thingy on Thursday

00:39:17,900 --> 00:39:23,050
even though I think it's pretty full by

00:39:20,030 --> 00:39:25,520
now um yeah you might still get a space

00:39:23,050 --> 00:39:26,870
with that do we have any questions

00:39:25,520 --> 00:39:29,810
oh and before you run off I always try

00:39:26,870 --> 00:39:30,890
to take a picture normally so that I can

00:39:29,810 --> 00:39:33,230
prove to my colleagues that I've been

00:39:30,890 --> 00:39:35,920
working I guess this is not necessary

00:39:33,230 --> 00:39:39,910
today smile everybody

00:39:35,920 --> 00:39:40,539
you may even wave awesome do we have

00:39:39,910 --> 00:39:44,470
time for questions

00:39:40,539 --> 00:39:46,630
oh thank you for the first and uh let's

00:39:44,470 --> 00:39:52,269
take one short question and then we'll

00:39:46,630 --> 00:39:53,859
have a short break together is there a

00:39:52,269 --> 00:39:56,799
short question I don't take questions

00:39:53,859 --> 00:40:02,829
from my coworkers there's one here are

00:39:56,799 --> 00:40:04,630
your coworker no he's fine just a quick

00:40:02,829 --> 00:40:07,480
question you were talking about types

00:40:04,630 --> 00:40:09,789
and like the fact that each change and

00:40:07,480 --> 00:40:15,069
you have only one type and it's the

00:40:09,789 --> 00:40:16,930
underscore dog now so what's what advice

00:40:15,069 --> 00:40:18,999
would you have for those that have

00:40:16,930 --> 00:40:21,700
indices that have more types so what

00:40:18,999 --> 00:40:24,279
should I do and will there be some

00:40:21,700 --> 00:40:26,710
helpers on top of elastic to help

00:40:24,279 --> 00:40:30,690
migrating that yes basically run the

00:40:26,710 --> 00:40:32,859
reindex that I have shown where was it

00:40:30,690 --> 00:40:35,109
something like this I mean this might be

00:40:32,859 --> 00:40:37,420
slightly simplistic but this should give

00:40:35,109 --> 00:40:40,210
you the idea basically take your old

00:40:37,420 --> 00:40:42,940
index with multiple types play it into a

00:40:40,210 --> 00:40:45,249
new index with one type and then you

00:40:42,940 --> 00:40:47,739
probably need to change the ID if you

00:40:45,249 --> 00:40:51,009
have like shared IDs or overlapping IDs

00:40:47,739 --> 00:40:52,779
between the types remove the type

00:40:51,009 --> 00:40:54,819
underscore type field and set it to

00:40:52,779 --> 00:40:56,799
whatever you want and probably keep that

00:40:54,819 --> 00:40:58,140
type information as a separate field if

00:40:56,799 --> 00:41:00,730
you need to keep that information

00:40:58,140 --> 00:41:02,410
something like this just through the

00:41:00,730 --> 00:41:05,799
replay reindex API

00:41:02,410 --> 00:41:09,720
I hope that answers it thanks a lot

00:41:05,799 --> 00:41:09,720
all right speaker again

00:41:11,510 --> 00:41:13,570

YouTube URL: https://www.youtube.com/watch?v=oYDrWDHeHTk


