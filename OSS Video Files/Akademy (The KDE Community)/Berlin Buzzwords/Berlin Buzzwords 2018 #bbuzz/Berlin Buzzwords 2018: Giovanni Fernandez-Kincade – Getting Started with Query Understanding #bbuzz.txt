Title: Berlin Buzzwords 2018: Giovanni Fernandez-Kincade – Getting Started with Query Understanding #bbuzz
Publication date: 2018-06-18
Playlist: Berlin Buzzwords 2018 #bbuzz
Description: 
	A user types "black clutch" into your search engine. Do they mean the handbag, the automobile part, or something else entirely?

Search is about matching the intent of the user with the information they need. For decades, "relevance" in information retrieval systems has meant things like BM25, TF-IDF, field boosting, document boosting, etc. These simple heuristics and strategies have served us well, but ultimately fall short because they fail to semantically model intent. Our systems don’t actually understand what users want, they just hope a few magic numbers will get us close enough.

Query Understanding is about using real intelligence to put users first. In this session, we’ll talk about what Query Understanding is, why it’s important, and some practical strategies for making your search experience smarter.

Read more:
https://2018.berlinbuzzwords.de/18/session/getting-started-query-understanding

About Giovanni Fernandez-Kincade:
https://2018.berlinbuzzwords.de/users/giovanni-fernandez-kincade-0

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:04,759 --> 00:00:11,070
hi how are you you can call me Geo and

00:00:09,540 --> 00:00:11,950
I'm very excited to talk to you about

00:00:11,070 --> 00:00:13,630
coriander

00:00:11,950 --> 00:00:16,630
and to open up the search track at

00:00:13,630 --> 00:00:17,650
Berlin buzzwords before I get started

00:00:16,630 --> 00:00:21,340
let me tell you a little bit about

00:00:17,650 --> 00:00:23,050
myself I spent probably five or six

00:00:21,340 --> 00:00:25,180
years in the finance industry working

00:00:23,050 --> 00:00:28,720
for a subsidiary of Standard & Poor's

00:00:25,180 --> 00:00:30,250
and there I built a database real time

00:00:28,720 --> 00:00:33,000
processing system and a search engine

00:00:30,250 --> 00:00:35,530
for globally sourced financial documents

00:00:33,000 --> 00:00:37,300
my life there was just like endless data

00:00:35,530 --> 00:00:39,430
gymnastics and it was challenging and

00:00:37,300 --> 00:00:42,610
fun to work but eventually I made a

00:00:39,430 --> 00:00:45,190
break for it and moved on to Etsy which

00:00:42,610 --> 00:00:48,220
is a marketplace for handmade goods not

00:00:45,190 --> 00:00:49,810
unlike eBay for example and at Etsy I

00:00:48,220 --> 00:00:51,610
spent six and a half years focused

00:00:49,810 --> 00:00:54,190
mostly on search and on data-driven

00:00:51,610 --> 00:00:55,660
product development I led the search

00:00:54,190 --> 00:00:57,670
experience team which was sort of

00:00:55,660 --> 00:01:00,040
responsible for more or less anything

00:00:57,670 --> 00:01:01,329
the user would interact with when they

00:01:00,040 --> 00:01:03,390
were dealing with search so stuff like

00:01:01,329 --> 00:01:04,680
facets the result presentation

00:01:03,390 --> 00:01:09,399
autosuggest

00:01:04,680 --> 00:01:11,259
mobile our taxonomy you name it and then

00:01:09,399 --> 00:01:12,820
I went on to lead the search ranking

00:01:11,259 --> 00:01:14,590
team which was responsible for the

00:01:12,820 --> 00:01:17,049
fairness and effectiveness of Etsy's

00:01:14,590 --> 00:01:18,999
core search algorithm and then about a

00:01:17,049 --> 00:01:21,369
year ago I left to start my own company

00:01:18,999 --> 00:01:23,590
called related works and we're a small

00:01:21,369 --> 00:01:25,359
consultancy that tries to sort of bring

00:01:23,590 --> 00:01:28,090
a human touch to search and data

00:01:25,359 --> 00:01:29,200
problems so if you would like to work

00:01:28,090 --> 00:01:32,159
with us or are interested in speaking

00:01:29,200 --> 00:01:34,719
about that please see me afterwards and

00:01:32,159 --> 00:01:37,929
today what I really want to do is give

00:01:34,719 --> 00:01:39,369
you a great mental model for how to

00:01:37,929 --> 00:01:40,990
think about query understanding and how

00:01:39,369 --> 00:01:43,899
to apply that to the search engines that

00:01:40,990 --> 00:01:45,609
you probably all know and love we're

00:01:43,899 --> 00:01:46,869
gonna do that by first talking about why

00:01:45,609 --> 00:01:48,639
you might be interested in query

00:01:46,869 --> 00:01:50,469
understanding you know why this is a

00:01:48,639 --> 00:01:54,189
strategy that that should be appealing

00:01:50,469 --> 00:01:55,929
to you then we're going to set a

00:01:54,189 --> 00:01:59,109
foundation and a definition for the

00:01:55,929 --> 00:02:00,729
approach before applying that definition

00:01:59,109 --> 00:02:03,009
to a series of user problems that you

00:02:00,729 --> 00:02:04,569
may encounter and we'll use this to sort

00:02:03,009 --> 00:02:06,729
of really get familiar and get the nuts

00:02:04,569 --> 00:02:08,410
and bolts of query understanding and

00:02:06,729 --> 00:02:10,090
then before finishing up we'll talk

00:02:08,410 --> 00:02:15,310
about what's at stake when you do this

00:02:10,090 --> 00:02:17,380
sort of work so why query understanding

00:02:15,310 --> 00:02:18,910
well what are we trying to do you're

00:02:17,380 --> 00:02:20,620
probably at the search track because you

00:02:18,910 --> 00:02:21,670
have some search engine that you care

00:02:20,620 --> 00:02:24,819
about and that you want to make better

00:02:21,670 --> 00:02:25,780
and I would argue that as architects of

00:02:24,819 --> 00:02:27,880
information retrieval

00:02:25,780 --> 00:02:30,100
systems you know our goal has

00:02:27,880 --> 00:02:31,990
historically been this mystical notion

00:02:30,100 --> 00:02:33,819
of relevance and it's probably been

00:02:31,990 --> 00:02:35,410
defined dozens of times and you've

00:02:33,819 --> 00:02:36,880
probably heard this a lot but just so

00:02:35,410 --> 00:02:39,400
we're all on the same page let's sort of

00:02:36,880 --> 00:02:42,730
go back to information retrieval 101 and

00:02:39,400 --> 00:02:45,069
kind of formally define the problem so

00:02:42,730 --> 00:02:46,780
we start with a user that has some

00:02:45,069 --> 00:02:48,730
information need right maybe it's a

00:02:46,780 --> 00:02:51,160
student that wants to understand why

00:02:48,730 --> 00:02:52,900
Pluto is no longer a planet and there's

00:02:51,160 --> 00:02:54,700
some information out in the universe

00:02:52,900 --> 00:02:56,770
maybe it's in a teacher's brain maybe

00:02:54,700 --> 00:02:58,150
it's on a website that can satisfy that

00:02:56,770 --> 00:03:00,519
need that can help them answer that

00:02:58,150 --> 00:03:01,870
question and so our task the task of

00:03:00,519 --> 00:03:03,700
relevance is to really bridge this

00:03:01,870 --> 00:03:06,190
divide between the information in the

00:03:03,700 --> 00:03:07,660
universe and the user but one thing I

00:03:06,190 --> 00:03:09,850
want you to really focus on throughout

00:03:07,660 --> 00:03:11,470
this talk is that unfortunately we're

00:03:09,850 --> 00:03:13,540
not dealing with users and information

00:03:11,470 --> 00:03:16,390
we're sort of dealing with a proxy

00:03:13,540 --> 00:03:18,340
battle right on the user side instead of

00:03:16,390 --> 00:03:19,569
the user what we have is typically some

00:03:18,340 --> 00:03:22,330
sort of keywords that they may have

00:03:19,569 --> 00:03:23,890
typed into a text box or that a question

00:03:22,330 --> 00:03:26,260
they may have asked their home assistant

00:03:23,890 --> 00:03:27,880
and on the information side the systems

00:03:26,260 --> 00:03:30,160
that we build typically represent

00:03:27,880 --> 00:03:32,290
information as documents so on Google

00:03:30,160 --> 00:03:34,510
Doc you mine might be a website on Etsy

00:03:32,290 --> 00:03:37,950
it might be a dress that someone's

00:03:34,510 --> 00:03:40,989
trying to sell so relevance in this case

00:03:37,950 --> 00:03:43,120
becomes finding the document that

00:03:40,989 --> 00:03:45,640
satisfies the underlying information

00:03:43,120 --> 00:03:46,989
need but we have to infer that the

00:03:45,640 --> 00:03:50,709
document has that information and we

00:03:46,989 --> 00:03:52,480
have to infer what the user means so

00:03:50,709 --> 00:03:54,459
query understanding is a tool that we

00:03:52,480 --> 00:03:56,440
can use to achieve relevance and so a

00:03:54,459 --> 00:03:58,690
natural question is what are other tools

00:03:56,440 --> 00:04:01,420
that we might be able to use and and why

00:03:58,690 --> 00:04:02,950
is query understanding any better so as

00:04:01,420 --> 00:04:05,290
motivating context we're going to talk

00:04:02,950 --> 00:04:06,609
about two alternatives and the first is

00:04:05,290 --> 00:04:08,470
something I'm going to call statistical

00:04:06,609 --> 00:04:11,980
relevance and the idea is pretty

00:04:08,470 --> 00:04:13,690
straightforward so given a document and

00:04:11,980 --> 00:04:15,280
a query we're going to do a little bit

00:04:13,690 --> 00:04:17,890
of simple math and we're going to come

00:04:15,280 --> 00:04:20,229
up with a number for how relevant this

00:04:17,890 --> 00:04:21,729
document is to this query and the key

00:04:20,229 --> 00:04:23,680
insight for a lot of statistical

00:04:21,729 --> 00:04:26,229
relevance methods is that we can use our

00:04:23,680 --> 00:04:28,960
corpus to infer the importance of a

00:04:26,229 --> 00:04:31,450
specific document and the most sort of

00:04:28,960 --> 00:04:33,820
canonical example of this is tf-idf and

00:04:31,450 --> 00:04:35,349
and here's a gross simplification of

00:04:33,820 --> 00:04:37,270
tf-idf that looks nothing like what

00:04:35,349 --> 00:04:39,289
you'll find on Wikipedia and I've added

00:04:37,270 --> 00:04:40,460
the terms that are in square brackets

00:04:39,289 --> 00:04:42,050
and of course there's tons of other

00:04:40,460 --> 00:04:44,689
examples of statistical relevance

00:04:42,050 --> 00:04:47,379
there's info gain BM 25 which is now the

00:04:44,689 --> 00:04:50,749
default and leucine but they all share

00:04:47,379 --> 00:04:52,909
sort of common traits and I want you to

00:04:50,749 --> 00:04:55,580
notice that if we look at this

00:04:52,909 --> 00:04:58,279
definition of tf-idf it's it's hyper

00:04:55,580 --> 00:05:00,319
focused on documents right but what if

00:04:58,279 --> 00:05:03,349
your documents are actually misleading

00:05:00,319 --> 00:05:05,960
you and what's more where's the user in

00:05:03,349 --> 00:05:07,639
this equation now you could argue that

00:05:05,960 --> 00:05:09,740
the user is providing a set of keywords

00:05:07,639 --> 00:05:11,839
that we use for retrieval right to get a

00:05:09,740 --> 00:05:14,539
set of candidates and then we use this

00:05:11,839 --> 00:05:19,129
math to score those candidates but is

00:05:14,539 --> 00:05:21,289
that enough let's look at an example so

00:05:19,129 --> 00:05:23,389
this is Flipkart any commerce company

00:05:21,289 --> 00:05:25,099
from india that recently just got

00:05:23,389 --> 00:05:28,669
acquired by Walmart and I'm searching

00:05:25,099 --> 00:05:30,259
for fanny packs and for the British

00:05:28,669 --> 00:05:32,149
folks in the audience that this may be

00:05:30,259 --> 00:05:33,860
really confusing to you but I want to

00:05:32,149 --> 00:05:36,379
highlight that there are almost no

00:05:33,860 --> 00:05:39,289
results and I can assure you those are

00:05:36,379 --> 00:05:42,529
not fanny packs but if you search for

00:05:39,289 --> 00:05:45,219
bum bags you will find what US Americans

00:05:42,529 --> 00:05:47,300
like to refer to as fanny packs and

00:05:45,219 --> 00:05:49,009
there's tons of them there and I think

00:05:47,300 --> 00:05:51,589
this highlights a very very common

00:05:49,009 --> 00:05:54,169
problem which is that users and

00:05:51,589 --> 00:05:56,959
documents almost always are speaking

00:05:54,169 --> 00:06:00,019
different languages the content in our

00:05:56,959 --> 00:06:02,659
search engines are often is often you

00:06:00,019 --> 00:06:04,430
know lovingly and and and arduously

00:06:02,659 --> 00:06:06,080
crafted by people that are specialists

00:06:04,430 --> 00:06:08,569
right people like the folks in this room

00:06:06,080 --> 00:06:10,610
that live and breathe their subject

00:06:08,569 --> 00:06:12,649
matter every single day and so they have

00:06:10,610 --> 00:06:15,259
a tendency to use very very specific

00:06:12,649 --> 00:06:16,939
nomenclature and so the layperson that

00:06:15,259 --> 00:06:19,759
comes to a search engine almost always

00:06:16,939 --> 00:06:21,740
is going to use much simpler words that

00:06:19,759 --> 00:06:24,199
that don't really line up and what's

00:06:21,740 --> 00:06:25,939
more demographically those two sets of

00:06:24,199 --> 00:06:28,879
humans may be very different right an

00:06:25,939 --> 00:06:30,949
American consumer may be approaching an

00:06:28,879 --> 00:06:32,209
Indian e-commerce site and so naturally

00:06:30,949 --> 00:06:34,819
we're gonna have very different language

00:06:32,209 --> 00:06:37,159
and of course maybe your documents are

00:06:34,819 --> 00:06:40,099
being produced by automated systems or

00:06:37,159 --> 00:06:42,800
robots and and then we can almost

00:06:40,099 --> 00:06:44,330
assuredly find differences in the

00:06:42,800 --> 00:06:45,949
language that these two uses and so

00:06:44,330 --> 00:06:48,680
these differences are sort of

00:06:45,949 --> 00:06:52,399
fundamental problems for statistical

00:06:48,680 --> 00:06:53,190
relevance methods so alternative is

00:06:52,399 --> 00:06:55,740
machine learned

00:06:53,190 --> 00:06:58,560
once are learning to rank and learning

00:06:55,740 --> 00:07:02,400
to rank frames relevance as a supervised

00:06:58,560 --> 00:07:04,470
learning problem so we'll take an give a

00:07:02,400 --> 00:07:06,210
document and a query to a model and that

00:07:04,470 --> 00:07:08,580
model will give us back a number this is

00:07:06,210 --> 00:07:10,110
called a point wise model and it's sort

00:07:08,580 --> 00:07:12,030
of the simplest incarnation of learning

00:07:10,110 --> 00:07:13,530
to rank and the way that we train a

00:07:12,030 --> 00:07:14,880
point wise model are the way that we

00:07:13,530 --> 00:07:17,640
train a learning to rank model is by

00:07:14,880 --> 00:07:19,950
showing it examples the examples might

00:07:17,640 --> 00:07:21,920
take the form of a document a query and

00:07:19,950 --> 00:07:24,690
then a yes/no right is this document

00:07:21,920 --> 00:07:26,010
relevant for this query and if we show

00:07:24,690 --> 00:07:27,750
the model enough examples

00:07:26,010 --> 00:07:31,920
hopefully the model will learn how to

00:07:27,750 --> 00:07:33,720
show us the relevant stuff now learning

00:07:31,920 --> 00:07:35,220
to rank will suffer from a lot of the

00:07:33,720 --> 00:07:37,560
same problems that other machine

00:07:35,220 --> 00:07:39,690
learning techniques will suffer from

00:07:37,560 --> 00:07:40,740
that you'll probably hear a lot of at

00:07:39,690 --> 00:07:43,560
this conference right

00:07:40,740 --> 00:07:46,860
acquiring training data is is difficult

00:07:43,560 --> 00:07:48,390
understanding the biases and the quality

00:07:46,860 --> 00:07:50,910
of your training data is tremendously

00:07:48,390 --> 00:07:52,770
difficult training itself is a subtle

00:07:50,910 --> 00:07:54,690
art form and then even if you get lucky

00:07:52,770 --> 00:07:56,460
and you are successfully trained to

00:07:54,690 --> 00:07:58,290
model putting that thing in production

00:07:56,460 --> 00:07:59,910
right and having confidence at it and

00:07:58,290 --> 00:08:02,790
feeling like you have an operable system

00:07:59,910 --> 00:08:04,020
these are all tremendous challenges but

00:08:02,790 --> 00:08:05,940
these are not even the challenges I want

00:08:04,020 --> 00:08:08,070
to focus on today there's a far more

00:08:05,940 --> 00:08:10,230
insidious problem and I call it the

00:08:08,070 --> 00:08:12,000
poisoned result set so here I'm

00:08:10,230 --> 00:08:13,470
searching for dress shirt and you can

00:08:12,000 --> 00:08:16,500
see that one of these things is clearly

00:08:13,470 --> 00:08:19,050
not a dress shirt if a user searches

00:08:16,500 --> 00:08:21,180
your search engine and finds sort of

00:08:19,050 --> 00:08:23,850
viscerally irrelevant items even one or

00:08:21,180 --> 00:08:25,650
two at that point they often lose faith

00:08:23,850 --> 00:08:28,020
in the ability of your search engine to

00:08:25,650 --> 00:08:29,580
interpret their queries right and at

00:08:28,020 --> 00:08:31,440
that point they're sort of going to do

00:08:29,580 --> 00:08:33,630
one of two things they're either going

00:08:31,440 --> 00:08:36,719
to hack around you either by faceting

00:08:33,630 --> 00:08:38,910
using the user experience or crafting

00:08:36,719 --> 00:08:40,310
really complex queries or they're just

00:08:38,910 --> 00:08:43,140
gonna decide to go somewhere else and

00:08:40,310 --> 00:08:44,580
let's be honest if you're Amazon if

00:08:43,140 --> 00:08:46,910
you're not Amazon they're probably going

00:08:44,580 --> 00:08:49,310
to go somewhere else

00:08:46,910 --> 00:08:52,050
now the interesting thing about

00:08:49,310 --> 00:08:53,730
viscerally irrelevant items as you can

00:08:52,050 --> 00:08:56,640
sort of think of it as akin to filtering

00:08:53,730 --> 00:08:58,890
spam and we've been filtering spam as an

00:08:56,640 --> 00:09:01,260
industry for decades and one thing I

00:08:58,890 --> 00:09:04,050
want you to notice is nobody uses

00:09:01,260 --> 00:09:07,050
ranking models to filter spam they use

00:09:04,050 --> 00:09:09,630
binary classifiers because class

00:09:07,050 --> 00:09:11,370
vacation and filtering is fundamentally

00:09:09,630 --> 00:09:13,830
very very different than ordering result

00:09:11,370 --> 00:09:15,660
sets and if you put your faith in a

00:09:13,830 --> 00:09:17,160
learning to rank model and hope that if

00:09:15,660 --> 00:09:18,779
you showed enough examples it'll get rid

00:09:17,160 --> 00:09:21,480
of the irrelevant stuff you're probably

00:09:18,779 --> 00:09:22,920
not gonna see very great results and I

00:09:21,480 --> 00:09:28,829
myself have personally wasted a lot of

00:09:22,920 --> 00:09:31,170
time going down this path so having

00:09:28,829 --> 00:09:34,500
talked about why these other strategies

00:09:31,170 --> 00:09:36,810
for relevance are sort of not up to the

00:09:34,500 --> 00:09:38,610
task or or have significant drawbacks we

00:09:36,810 --> 00:09:41,269
arrived at the star of the show query

00:09:38,610 --> 00:09:44,459
understanding and query understanding is

00:09:41,269 --> 00:09:47,399
about focusing on queries rather than

00:09:44,459 --> 00:09:48,959
focusing on documents but to be more

00:09:47,399 --> 00:09:50,610
precise I would say that query

00:09:48,959 --> 00:09:52,680
understanding is about focusing on

00:09:50,610 --> 00:09:55,079
intent because as we learned in that

00:09:52,680 --> 00:09:56,610
fanny-pack example language is not

00:09:55,079 --> 00:09:58,320
sufficient right language can be

00:09:56,610 --> 00:10:00,420
tremendously misleading so we sort of

00:09:58,320 --> 00:10:02,670
have to unpack what the user is getting

00:10:00,420 --> 00:10:07,170
at and try to figure out that underlying

00:10:02,670 --> 00:10:08,540
information need the holy grail of query

00:10:07,170 --> 00:10:11,040
understanding is something like this

00:10:08,540 --> 00:10:12,959
given a query we can break it up into

00:10:11,040 --> 00:10:14,550
its components and then we can

00:10:12,959 --> 00:10:17,310
understand what each of those components

00:10:14,550 --> 00:10:19,680
mean and you can get extra credit if you

00:10:17,310 --> 00:10:20,880
can tie each of these pieces to some

00:10:19,680 --> 00:10:25,529
entity in your database

00:10:20,880 --> 00:10:27,870
if you zoom out a little bit query

00:10:25,529 --> 00:10:30,720
understanding is sort of like mapping a

00:10:27,870 --> 00:10:33,029
query on to a set of facts and often

00:10:30,720 --> 00:10:34,890
those facts are can be arranged in

00:10:33,029 --> 00:10:36,300
hierarchical or directed relationships

00:10:34,890 --> 00:10:38,490
right so here we're mapping the query

00:10:36,300 --> 00:10:40,800
dress shirt into the category dress

00:10:38,490 --> 00:10:42,690
shirts which is a subcategory of shirts

00:10:40,800 --> 00:10:44,130
than a subcategory of clothing and so

00:10:42,690 --> 00:10:45,959
you can think of these facts as making

00:10:44,130 --> 00:10:49,290
up a graph right a knowledge graph and

00:10:45,959 --> 00:10:51,870
if you map your documents onto the same

00:10:49,290 --> 00:10:54,959
set of knowledge you've built a bridge

00:10:51,870 --> 00:10:59,520
from your documents to your users based

00:10:54,959 --> 00:11:01,589
on semantics now before you go back to

00:10:59,520 --> 00:11:02,850
your boss and tell them that geo told

00:11:01,589 --> 00:11:06,560
you that the solution all your problems

00:11:02,850 --> 00:11:08,459
is a knowledge graph let's take a break

00:11:06,560 --> 00:11:09,779
knowledge graphs are a thing people

00:11:08,459 --> 00:11:12,000
build them they use them they're

00:11:09,779 --> 00:11:14,339
tremendously effective but also complex

00:11:12,000 --> 00:11:16,020
tools and really what I'm talking about

00:11:14,339 --> 00:11:18,660
right now is I'm using knowledge graphs

00:11:16,020 --> 00:11:20,850
as a metaphor for how I think about

00:11:18,660 --> 00:11:21,150
knowledge knowledge how I think about

00:11:20,850 --> 00:11:23,880
query

00:11:21,150 --> 00:11:26,279
standing and let's roll with that

00:11:23,880 --> 00:11:27,690
metaphor for a second and the

00:11:26,279 --> 00:11:31,620
interesting thing about knowledge is

00:11:27,690 --> 00:11:33,270
that there's a lot of it in October of

00:11:31,620 --> 00:11:35,910
00:11:33,270 --> 00:11:38,970
Google's knowledge graph supposedly had

00:11:35,910 --> 00:11:41,160
around 70 billion facts and chances are

00:11:38,970 --> 00:11:42,690
good that nobody in this room has the

00:11:41,160 --> 00:11:45,450
resources that they can throw at the

00:11:42,690 --> 00:11:47,430
problem that googled us so the rest of

00:11:45,450 --> 00:11:49,529
us have to sort of pick and choose we

00:11:47,430 --> 00:11:53,430
have to figure out what's the right

00:11:49,529 --> 00:11:56,010
knowledge to focus on chances are good

00:11:53,430 --> 00:11:58,529
that your distribution of queries looks

00:11:56,010 --> 00:12:00,240
something like this there are some head

00:11:58,529 --> 00:12:01,890
of queries that are issued quite

00:12:00,240 --> 00:12:03,630
frequently and make up a sizable portion

00:12:01,890 --> 00:12:05,339
of your traffic so on etsy this might be

00:12:03,630 --> 00:12:06,870
something like Harry Potter and then

00:12:05,339 --> 00:12:09,630
there's this long tail of queries that

00:12:06,870 --> 00:12:12,270
are issued very infrequently like if it

00:12:09,630 --> 00:12:13,710
goes gorgeous t-shirt red and a natural

00:12:12,270 --> 00:12:15,660
place to start in your query

00:12:13,710 --> 00:12:18,000
understanding journey is to focus on the

00:12:15,660 --> 00:12:19,380
head right there's not that many queries

00:12:18,000 --> 00:12:23,430
here and we can sort of have a huge

00:12:19,380 --> 00:12:25,650
impact on our users and when you move

00:12:23,430 --> 00:12:27,150
beyond the head it might make sense to

00:12:25,650 --> 00:12:29,670
focus on cases like this fanny pack

00:12:27,150 --> 00:12:31,260
example where users are clearly having

00:12:29,670 --> 00:12:34,080
difficulty right where there's there's

00:12:31,260 --> 00:12:36,390
gaps to be made up but regardless of how

00:12:34,080 --> 00:12:38,610
you proceed what I really want you to

00:12:36,390 --> 00:12:40,529
take away from this is there's too much

00:12:38,610 --> 00:12:42,450
knowledge out in the universe so we have

00:12:40,529 --> 00:12:44,100
to focus on figuring out what the most

00:12:42,450 --> 00:12:46,110
important knowledge to imbue in our

00:12:44,100 --> 00:12:47,730
systems is and the right way of doing

00:12:46,110 --> 00:12:49,709
that is by taking a look at your query

00:12:47,730 --> 00:12:51,690
logs and closely scrutinizing what users

00:12:49,709 --> 00:12:54,330
are doing and of course if you want to

00:12:51,690 --> 00:12:56,310
do that in a gbbr gdpr compliant way you

00:12:54,330 --> 00:12:58,680
should be asking for permission so and

00:12:56,310 --> 00:13:02,250
so and so and so but taking that for

00:12:58,680 --> 00:13:05,580
granted the rest of this talk will be

00:13:02,250 --> 00:13:08,279
focused on what sorts of problems you

00:13:05,580 --> 00:13:10,170
may encounter as you closely scrutinize

00:13:08,279 --> 00:13:15,360
your query logs and how you might fix

00:13:10,170 --> 00:13:16,589
them using query understanding so we're

00:13:15,360 --> 00:13:18,480
going to talk about two types of

00:13:16,589 --> 00:13:19,980
problems precision and recall and you

00:13:18,480 --> 00:13:21,600
may be familiar with those two concepts

00:13:19,980 --> 00:13:24,180
but here's my two sort of intuitive

00:13:21,600 --> 00:13:25,770
explanations of each precision is

00:13:24,180 --> 00:13:28,280
garbage results right like that

00:13:25,770 --> 00:13:30,510
viscerally viscerally irrelevant dress

00:13:28,280 --> 00:13:32,040
and recall problems are cases where

00:13:30,510 --> 00:13:33,760
we're just now seeing enough stuff so

00:13:32,040 --> 00:13:37,780
more akin to the the fanny pack

00:13:33,760 --> 00:13:40,180
exemple on the precision front you can

00:13:37,780 --> 00:13:42,010
usually find these cases by looking for

00:13:40,180 --> 00:13:43,570
situations where users aren't engaging

00:13:42,010 --> 00:13:45,550
right they're not clicking they're not

00:13:43,570 --> 00:13:47,560
exploring they're just sort of issuing

00:13:45,550 --> 00:13:48,970
Aquarion leaving there are caveats to

00:13:47,560 --> 00:13:53,260
that definition by the way but we'll

00:13:48,970 --> 00:13:55,330
sort of you know glaze over that so it's

00:13:53,260 --> 00:13:58,060
late 2016 and you just got home from the

00:13:55,330 --> 00:14:00,460
Beyonce concert and you're so hopped up

00:13:58,060 --> 00:14:03,130
on lemonade that you decide to search

00:14:00,460 --> 00:14:05,950
for formation as in formation world tour

00:14:03,130 --> 00:14:08,500
and this is an e-commerce site called

00:14:05,950 --> 00:14:10,300
spring and instead of Beyonce stuff you

00:14:08,500 --> 00:14:13,420
find a bunch of medium format cameras

00:14:10,300 --> 00:14:16,000
it's a little disappointing you search

00:14:13,420 --> 00:14:18,400
for Beyonce and find a bunch of beyond

00:14:16,000 --> 00:14:19,990
the beach apparel and you make one

00:14:18,400 --> 00:14:22,080
last-ditch effort in search for Solange

00:14:19,990 --> 00:14:24,220
and find a bunch of solana sandals

00:14:22,080 --> 00:14:29,110
you've somehow discovered the Knowles

00:14:24,220 --> 00:14:30,880
family Bermuda Triangle B because you're

00:14:29,110 --> 00:14:32,740
all search folks you probably are

00:14:30,880 --> 00:14:34,420
getting some glimmer of what's happening

00:14:32,740 --> 00:14:36,820
here we have some very aggressive

00:14:34,420 --> 00:14:39,520
stemming right so beyond and Beyonce are

00:14:36,820 --> 00:14:41,430
both stemming to be on format and

00:14:39,520 --> 00:14:44,350
formation are both stemming to format

00:14:41,430 --> 00:14:46,450
but this is a very specific instance of

00:14:44,350 --> 00:14:48,460
a more general problem which is that

00:14:46,450 --> 00:14:51,310
we're not handling proper nouns

00:14:48,460 --> 00:14:53,680
correctly right Beyonce Solange these

00:14:51,310 --> 00:14:55,690
are examples of people places and things

00:14:53,680 --> 00:14:57,670
and and those are very very different

00:14:55,690 --> 00:14:59,500
than your average nouns or verbs we

00:14:57,670 --> 00:15:00,970
shouldn't be treating them the same we

00:14:59,500 --> 00:15:03,730
need our system to be more intelligent

00:15:00,970 --> 00:15:05,800
than that so the easiest thing that you

00:15:03,730 --> 00:15:08,380
could possibly do to solve this problem

00:15:05,800 --> 00:15:09,520
is go through your query logs and find a

00:15:08,380 --> 00:15:11,170
list of things that people care about

00:15:09,520 --> 00:15:12,870
that are entities that shouldn't be

00:15:11,170 --> 00:15:15,070
stamped and make a list of exceptions

00:15:12,870 --> 00:15:17,050
now you might be saying to yourself is

00:15:15,070 --> 00:15:19,090
she oh really suggesting that we go

00:15:17,050 --> 00:15:21,640
through our query logs and manually put

00:15:19,090 --> 00:15:23,290
together a list of entities and that's

00:15:21,640 --> 00:15:25,990
absolutely what I'm suggesting because

00:15:23,290 --> 00:15:28,090
your users really don't care how smart

00:15:25,990 --> 00:15:30,670
you are and if we think back to that

00:15:28,090 --> 00:15:32,290
query distribution right if you work on

00:15:30,670 --> 00:15:33,580
the head there's not that many queries

00:15:32,290 --> 00:15:35,260
there right you can sit down with a

00:15:33,580 --> 00:15:37,090
spreadsheet and and sort of figure out

00:15:35,260 --> 00:15:39,190
the important entities in an hour maybe

00:15:37,090 --> 00:15:43,060
two and that will have sort of outsized

00:15:39,190 --> 00:15:44,770
effects on your search engine but you

00:15:43,060 --> 00:15:47,769
don't have to stop there right we can do

00:15:44,770 --> 00:15:50,050
more so a sort of medium level salu

00:15:47,769 --> 00:15:52,569
is to start using data to help you find

00:15:50,050 --> 00:15:55,600
these entities so maybe you're lucky and

00:15:52,569 --> 00:15:57,369
you have an artist field in your

00:15:55,600 --> 00:15:58,779
database so you can sort of select

00:15:57,369 --> 00:16:00,279
distinct from your artist field and get

00:15:58,779 --> 00:16:05,499
a list of things that you should never

00:16:00,279 --> 00:16:08,920
treat as allowing to be stamped or maybe

00:16:05,499 --> 00:16:10,600
you can consult external data sources so

00:16:08,920 --> 00:16:12,730
for instance if R&B artists were

00:16:10,600 --> 00:16:15,309
particularly important Wikipedia has a

00:16:12,730 --> 00:16:16,420
nice list of them and depending on your

00:16:15,309 --> 00:16:18,549
domain I'm sure there are other

00:16:16,420 --> 00:16:20,350
resources that will be tremendously

00:16:18,549 --> 00:16:23,470
useful for you to find the proper nouns

00:16:20,350 --> 00:16:24,970
in your space and then of course the

00:16:23,470 --> 00:16:26,499
hardest possible solution is to use

00:16:24,970 --> 00:16:28,649
something like a part of speech tagger

00:16:26,499 --> 00:16:31,299
or named entity recognition system

00:16:28,649 --> 00:16:33,040
thankfully there are tons of these that

00:16:31,299 --> 00:16:34,360
you can sort of use off-the-shelf some

00:16:33,040 --> 00:16:36,639
of them are software that you're install

00:16:34,360 --> 00:16:40,059
some of them some of them are cloud

00:16:36,639 --> 00:16:42,699
hosted api's but one thing I want to

00:16:40,059 --> 00:16:45,480
caution you about is that remember that

00:16:42,699 --> 00:16:47,679
a lot of these systems are trained on

00:16:45,480 --> 00:16:49,540
natural language right they're trained

00:16:47,679 --> 00:16:51,540
on prose they're trained on text that's

00:16:49,540 --> 00:16:54,309
arranged in pages and sentences and

00:16:51,540 --> 00:16:55,990
proper nouns are usually capitalized and

00:16:54,309 --> 00:16:58,240
well it turns out that that's really not

00:16:55,990 --> 00:17:01,299
what queries are like so for instance

00:16:58,240 --> 00:17:03,399
here's Google's cloud NLP API just

00:17:01,299 --> 00:17:07,120
failing miserably to understand what

00:17:03,399 --> 00:17:08,740
Beyonce is so a better strategy is to

00:17:07,120 --> 00:17:12,309
use one of these systems on your

00:17:08,740 --> 00:17:13,959
documents and so we can use them to find

00:17:12,309 --> 00:17:16,139
the list of entities and if you want to

00:17:13,959 --> 00:17:18,610
be extra sure about what you're

00:17:16,139 --> 00:17:20,679
exempting from stemming you can have a

00:17:18,610 --> 00:17:22,480
human being review that and give you a

00:17:20,679 --> 00:17:26,110
really high quality set of energies that

00:17:22,480 --> 00:17:28,449
you're going to respect let's talk about

00:17:26,110 --> 00:17:30,549
this dress problem we searched for a

00:17:28,449 --> 00:17:32,470
dress shirt and we we ended up with a

00:17:30,549 --> 00:17:34,929
dress that's made out of t-shirt

00:17:32,470 --> 00:17:36,880
material now the problem here is we're

00:17:34,929 --> 00:17:38,230
not respecting phrases right when I when

00:17:36,880 --> 00:17:40,240
I say dress shirt I don't mean a thing

00:17:38,230 --> 00:17:42,130
that is a dress and a shirt I mean

00:17:40,240 --> 00:17:43,950
literally a dress shirt right that's a

00:17:42,130 --> 00:17:46,990
phrase that we should be respecting and

00:17:43,950 --> 00:17:48,549
again the easiest possible solution is

00:17:46,990 --> 00:17:51,690
go through your query logs and figure

00:17:48,549 --> 00:17:54,789
out the phrases can't say this enough

00:17:51,690 --> 00:17:57,580
but a more sophisticated solution is

00:17:54,789 --> 00:18:00,250
some simple heuristics so for instance

00:17:57,580 --> 00:18:01,510
we could use something like point wise

00:18:00,250 --> 00:18:03,340
mutual information

00:18:01,510 --> 00:18:05,020
so you can go through your query logs or

00:18:03,340 --> 00:18:06,490
your documents and you can calculate the

00:18:05,020 --> 00:18:08,980
probability of seeing dress shirt

00:18:06,490 --> 00:18:10,840
together as a phrase and compare that to

00:18:08,980 --> 00:18:12,700
the denominator in this case which is

00:18:10,840 --> 00:18:14,800
the probabilities of dress and shirt

00:18:12,700 --> 00:18:17,560
appearing independently and you can

00:18:14,800 --> 00:18:20,230
calculate this number for each set of

00:18:17,560 --> 00:18:22,390
pair of words in your corpus and then

00:18:20,230 --> 00:18:24,250
decide you know anything with a PMI

00:18:22,390 --> 00:18:26,200
above 5 we're gonna call that a phrase

00:18:24,250 --> 00:18:28,960
that we're gonna respect and this is

00:18:26,200 --> 00:18:32,290
tremendously simple very effective sort

00:18:28,960 --> 00:18:35,080
of no excuse to try to try it no excuse

00:18:32,290 --> 00:18:37,720
to not try it another very popular

00:18:35,080 --> 00:18:39,400
technique which might seem funny is you

00:18:37,720 --> 00:18:41,440
can actually just check Wikipedia and

00:18:39,400 --> 00:18:43,990
this is sort of state-of-the-art when it

00:18:41,440 --> 00:18:46,630
comes to heuristic approaches to

00:18:43,990 --> 00:18:48,820
detecting phrases if a phrase exists in

00:18:46,630 --> 00:18:50,170
a database like Wikipedia it's probably

00:18:48,820 --> 00:18:54,490
a real thing and you should probably

00:18:50,170 --> 00:18:57,190
treat it as a phrase and then of course

00:18:54,490 --> 00:19:01,060
the hardest possible path is supervised

00:18:57,190 --> 00:19:03,640
learning so we can train a model given

00:19:01,060 --> 00:19:06,960
two tokens to decide whether or not that

00:19:03,640 --> 00:19:09,760
token is a phrase folks will often use

00:19:06,960 --> 00:19:11,920
features like frequency in the query

00:19:09,760 --> 00:19:14,770
logs both independent and together

00:19:11,920 --> 00:19:17,080
they'll use PMI like we discussed

00:19:14,770 --> 00:19:19,030
earlier and folks will also use stuff

00:19:17,080 --> 00:19:23,140
like you know did this phrase appear in

00:19:19,030 --> 00:19:25,570
Wikipedia or some other domain source I

00:19:23,140 --> 00:19:27,220
want to let you know though that if

00:19:25,570 --> 00:19:30,310
you're looking for more literature on

00:19:27,220 --> 00:19:33,460
the subject you'll find that folks talk

00:19:30,310 --> 00:19:35,170
about this as query segmentation so

00:19:33,460 --> 00:19:37,390
instead of deciding whether or not to

00:19:35,170 --> 00:19:39,730
tokens are a phrase you're really

00:19:37,390 --> 00:19:42,100
talking about should we divide the query

00:19:39,730 --> 00:19:43,960
at in the line between these two tokens

00:19:42,100 --> 00:19:45,640
and that's confusing in this

00:19:43,960 --> 00:19:48,250
conversation but it makes sense when you

00:19:45,640 --> 00:19:50,380
think about that holy grail of query

00:19:48,250 --> 00:19:52,030
understanding where we need to first

00:19:50,380 --> 00:19:53,830
kind of break up the query into pieces

00:19:52,030 --> 00:19:58,150
and then understand each of those pieces

00:19:53,830 --> 00:20:00,250
so you can start as simple as something

00:19:58,150 --> 00:20:02,680
like a logistic regression but things

00:20:00,250 --> 00:20:04,660
get much more complicated folks also use

00:20:02,680 --> 00:20:07,000
recurrent neural networks here's a

00:20:04,660 --> 00:20:09,580
diagram of a linear chain conditional

00:20:07,000 --> 00:20:11,350
random fields model needless to say I

00:20:09,580 --> 00:20:12,850
think you can get started and sort of

00:20:11,350 --> 00:20:14,740
have outside effects without getting

00:20:12,850 --> 00:20:16,890
this complicated but but folks take it

00:20:14,740 --> 00:20:19,900
all the way

00:20:16,890 --> 00:20:23,680
all right and so for our last precision

00:20:19,900 --> 00:20:25,690
example I'm going to search at sea for

00:20:23,680 --> 00:20:27,610
dress and you can notice that one of

00:20:25,690 --> 00:20:29,860
these things is not a dress it's

00:20:27,610 --> 00:20:32,080
actually a pattern that you can use to

00:20:29,860 --> 00:20:34,480
sew your own dress and one thing that

00:20:32,080 --> 00:20:39,400
you may not realize about Etsy is that

00:20:34,480 --> 00:20:47,320
we have or that Etsy has both alright my

00:20:39,400 --> 00:20:50,680
slides are not moving sorry there we go

00:20:47,320 --> 00:20:53,190
so Etsy has both finished goods and

00:20:50,680 --> 00:20:55,240
craft supplies like fabric and scissors

00:20:53,190 --> 00:20:58,840
and the sorts of things that you might

00:20:55,240 --> 00:21:00,910
use to craft your own goods and so the

00:20:58,840 --> 00:21:03,010
problem in this case is that we have

00:21:00,910 --> 00:21:05,170
very ambiguous keywords right dress

00:21:03,010 --> 00:21:07,600
appears in the finished goods but it

00:21:05,170 --> 00:21:09,550
also appears in the craft supplies and

00:21:07,600 --> 00:21:11,980
if we knew if the query was one of those

00:21:09,550 --> 00:21:13,960
two things we might be able to do better

00:21:11,980 --> 00:21:16,240
and so the solution here is something

00:21:13,960 --> 00:21:18,340
called query classification which really

00:21:16,240 --> 00:21:20,530
just means we're gonna take our query

00:21:18,340 --> 00:21:22,330
and we're gonna map it to a set of

00:21:20,530 --> 00:21:23,710
buckets right is this query a craft

00:21:22,330 --> 00:21:27,190
supply query or is it a finished goods

00:21:23,710 --> 00:21:30,430
query and it often makes sense to start

00:21:27,190 --> 00:21:33,760
with very broad categories like this and

00:21:30,430 --> 00:21:35,500
if these categories solve the problem

00:21:33,760 --> 00:21:37,030
right if filtering out all the craft

00:21:35,500 --> 00:21:38,740
supplies would really just fix those

00:21:37,030 --> 00:21:41,170
results that's definitely the place to

00:21:38,740 --> 00:21:43,150
start but folks also get a lot deeper

00:21:41,170 --> 00:21:45,600
right so instead of just those two

00:21:43,150 --> 00:21:47,890
buckets it's not uncommon to see people

00:21:45,600 --> 00:21:49,840
classifying things into a deep hierarchy

00:21:47,890 --> 00:21:51,940
right so in this case we would classify

00:21:49,840 --> 00:21:53,460
dress as the category dresses which is

00:21:51,940 --> 00:21:56,740
under women's which is under clothing

00:21:53,460 --> 00:21:58,270
but I would only go here if the first

00:21:56,740 --> 00:21:59,470
sort of broad set of categories doesn't

00:21:58,270 --> 00:22:01,240
solve your problem because as you go

00:21:59,470 --> 00:22:05,830
more granular it's gonna get harder and

00:22:01,240 --> 00:22:07,930
harder and the easiest possible solution

00:22:05,830 --> 00:22:10,090
is just have a human being provide some

00:22:07,930 --> 00:22:11,800
mappings right and that may be you know

00:22:10,090 --> 00:22:14,710
something as simple as always treat this

00:22:11,800 --> 00:22:16,060
query as finished goods or it might be a

00:22:14,710 --> 00:22:17,890
little bit more sophisticated like

00:22:16,060 --> 00:22:19,780
here's some heuristics right if they

00:22:17,890 --> 00:22:24,190
mention fabrics or patterns then let's

00:22:19,780 --> 00:22:26,890
treat that as craft supplies then a

00:22:24,190 --> 00:22:29,400
medium level solution is to start using

00:22:26,890 --> 00:22:30,930
data so for instance we could

00:22:29,400 --> 00:22:32,490
start took taking a look at our query

00:22:30,930 --> 00:22:35,010
logs and look at what people are

00:22:32,490 --> 00:22:37,110
engaging with and even though there are

00:22:35,010 --> 00:22:38,820
craft supplies and the results I can

00:22:37,110 --> 00:22:41,670
almost guarantee you that most people

00:22:38,820 --> 00:22:44,190
are engaging with the actual dresses and

00:22:41,670 --> 00:22:45,480
so if 90% of the time people are

00:22:44,190 --> 00:22:47,700
clicking on finished goods this is

00:22:45,480 --> 00:22:50,520
probably a finished goods query though I

00:22:47,700 --> 00:22:52,140
should caution you can only do this for

00:22:50,520 --> 00:22:53,940
queries that actually get a reasonable

00:22:52,140 --> 00:22:55,860
amount of traffic right if a query only

00:22:53,940 --> 00:22:57,150
has like one or two searches or one or

00:22:55,860 --> 00:23:00,870
two clicks like this is just totally

00:22:57,150 --> 00:23:02,309
unreasonable another very simple

00:23:00,870 --> 00:23:05,550
technique is just lexical similarity

00:23:02,309 --> 00:23:08,010
right how close is the query in terms of

00:23:05,550 --> 00:23:10,470
its text to the text of one of your

00:23:08,010 --> 00:23:11,910
categories so in this case dress if you

00:23:10,470 --> 00:23:13,860
Steinman is basically identical to

00:23:11,910 --> 00:23:15,390
dresses and there may not be any other

00:23:13,860 --> 00:23:17,309
category that it's close to in which

00:23:15,390 --> 00:23:18,990
case it's it's fairly unambiguous and

00:23:17,309 --> 00:23:20,550
it's fairly obvious and this by the way

00:23:18,990 --> 00:23:22,260
is one of the things that I'm most

00:23:20,550 --> 00:23:23,700
embarrassed about as an industry right

00:23:22,260 --> 00:23:25,710
like how many search engines have you

00:23:23,700 --> 00:23:27,630
gone to we're clicking on dress and

00:23:25,710 --> 00:23:29,550
searching for the keyword dress give you

00:23:27,630 --> 00:23:32,309
completely different things and then

00:23:29,550 --> 00:23:34,350
it's like it's inexcusable right like we

00:23:32,309 --> 00:23:36,059
have like autonomous vehicles but we

00:23:34,350 --> 00:23:37,830
can't like facet and search by the same

00:23:36,059 --> 00:23:42,540
token it's crazy

00:23:37,830 --> 00:23:44,820
so anyways then of course the hardest

00:23:42,540 --> 00:23:49,800
possible path is supervised learning

00:23:44,820 --> 00:23:51,510
again here we're mapping we're training

00:23:49,800 --> 00:23:54,990
a model to put things into one of these

00:23:51,510 --> 00:23:57,809
buckets for us people often start with a

00:23:54,990 --> 00:23:59,640
simple bag of words representation but

00:23:57,809 --> 00:24:01,170
well you know it's also common these

00:23:59,640 --> 00:24:04,710
days to use word embeddings from

00:24:01,170 --> 00:24:07,050
something like word Tyvek a natural

00:24:04,710 --> 00:24:08,220
extension of the probability ideas that

00:24:07,050 --> 00:24:10,020
we talked about earlier is to use

00:24:08,220 --> 00:24:12,120
something like a naive Bayes classifier

00:24:10,020 --> 00:24:14,700
so instead of calculating the

00:24:12,120 --> 00:24:16,320
probability of a class given a query we

00:24:14,700 --> 00:24:18,600
can calculate the probability of each

00:24:16,320 --> 00:24:20,580
token of a class given each token and

00:24:18,600 --> 00:24:22,080
then we can combine those into a query

00:24:20,580 --> 00:24:24,510
level probability so this will kind of

00:24:22,080 --> 00:24:27,870
let you cover more queries than the

00:24:24,510 --> 00:24:29,610
system we talked about earlier but you

00:24:27,870 --> 00:24:32,370
know it gets real bananas from there so

00:24:29,610 --> 00:24:34,650
here's an example of some research where

00:24:32,370 --> 00:24:36,809
folks are taking word embeddings for

00:24:34,650 --> 00:24:38,730
more Tyvek combining them using a

00:24:36,809 --> 00:24:40,350
convolutional neural network and then

00:24:38,730 --> 00:24:42,960
feeding those to a tree based classifier

00:24:40,350 --> 00:24:46,409
so a full spectrum of approach

00:24:42,960 --> 00:24:48,870
that you can take so that's it for

00:24:46,409 --> 00:24:50,220
recall precision and we're gonna spend a

00:24:48,870 --> 00:24:53,460
little bit of time talking about recall

00:24:50,220 --> 00:24:55,289
you can usually find these cases by

00:24:53,460 --> 00:24:57,600
looking for instances where users really

00:24:55,289 --> 00:24:59,429
just aren't seeing enough results and

00:24:57,600 --> 00:25:01,409
and I think that definition needs to be

00:24:59,429 --> 00:25:03,840
a little bit more expansive than zero

00:25:01,409 --> 00:25:07,320
results like zero is bad but like two is

00:25:03,840 --> 00:25:10,010
also bad so so let's look at some of

00:25:07,320 --> 00:25:12,390
these first the fanny pack example and

00:25:10,010 --> 00:25:15,120
if we think back to our knowledge craft

00:25:12,390 --> 00:25:17,820
metaphor the problem here is you know

00:25:15,120 --> 00:25:19,110
we're missing this mapping on the left

00:25:17,820 --> 00:25:20,640
hand side right we know what our

00:25:19,110 --> 00:25:22,409
documents are but we don't know what our

00:25:20,640 --> 00:25:25,080
queries are and how they map into that

00:25:22,409 --> 00:25:27,120
so what we really need is we need to

00:25:25,080 --> 00:25:28,669
understand that fanny packs are a thing

00:25:27,120 --> 00:25:32,370
that exists in the universe and that

00:25:28,669 --> 00:25:36,029
that this fact is synonymous with the

00:25:32,370 --> 00:25:37,529
idea of bum bags in our database so I'm

00:25:36,029 --> 00:25:39,779
really just talking about synonyms and

00:25:37,529 --> 00:25:42,690
you all have probably used synonyms

00:25:39,779 --> 00:25:44,100
before and in fact the synonyms in by

00:25:42,690 --> 00:25:46,649
default and things like elastic search

00:25:44,100 --> 00:25:48,750
and solar are human-powered so we have

00:25:46,649 --> 00:25:50,429
great evidence of smart people coming

00:25:48,750 --> 00:25:53,250
before us and using their their manual

00:25:50,429 --> 00:25:55,500
labor and so continuing on that trend

00:25:53,250 --> 00:25:56,760
going through your query logs and

00:25:55,500 --> 00:26:00,799
figuring out the importance Internet's

00:25:56,760 --> 00:26:03,059
is a totally reasonable thing to do a

00:26:00,799 --> 00:26:06,179
medium level solution is to again

00:26:03,059 --> 00:26:07,860
consult data sources like word net so

00:26:06,179 --> 00:26:09,360
word Nets a lexical database you can use

00:26:07,860 --> 00:26:12,450
it to look up relationships between

00:26:09,360 --> 00:26:13,980
words you can look use Wikipedia or

00:26:12,450 --> 00:26:16,020
whatever domain source may be

00:26:13,980 --> 00:26:18,330
particularly useful for your search

00:26:16,020 --> 00:26:20,789
engine here's an example of me using

00:26:18,330 --> 00:26:24,049
word net and it you know it's accurate

00:26:20,789 --> 00:26:27,659
but not tremendously useful but

00:26:24,049 --> 00:26:30,390
Wikipedia comes to the rescue and again

00:26:27,659 --> 00:26:32,399
it's sort of surprising how how easily

00:26:30,390 --> 00:26:33,960
you can harvest a number of really good

00:26:32,399 --> 00:26:35,880
synonyms and other facts to add to your

00:26:33,960 --> 00:26:36,960
system if you just take half an hour and

00:26:35,880 --> 00:26:40,770
look through some of these domain

00:26:36,960 --> 00:26:42,960
sources and then the most sophisticated

00:26:40,770 --> 00:26:45,690
possible approach is trying to

00:26:42,960 --> 00:26:47,309
automatically detect synonyms so for

00:26:45,690 --> 00:26:49,500
instance you might pass your query logs

00:26:47,309 --> 00:26:50,909
through something like word Tyvek and

00:26:49,500 --> 00:26:53,070
then look at the nearest neighbors for

00:26:50,909 --> 00:26:54,360
each word here I'm looking it's a little

00:26:53,070 --> 00:26:56,820
hard to see but I'm looking at the word

00:26:54,360 --> 00:27:00,360
probable and the nearest name

00:26:56,820 --> 00:27:03,779
is likely but I'll be honest I very much

00:27:00,360 --> 00:27:06,659
hand-picked this example the results are

00:27:03,779 --> 00:27:08,370
like stupendously terrible and jaren

00:27:06,659 --> 00:27:09,960
general and after having read a number

00:27:08,370 --> 00:27:12,120
of papers about automatic synonym

00:27:09,960 --> 00:27:13,320
detection I can very confidently tell

00:27:12,120 --> 00:27:17,610
you that the state of the art is pretty

00:27:13,320 --> 00:27:20,190
bad so this might be one of those

00:27:17,610 --> 00:27:22,019
examples where it might make sense to

00:27:20,190 --> 00:27:23,490
kind of use these systems to identify a

00:27:22,019 --> 00:27:25,110
set of candidates right there they're

00:27:23,490 --> 00:27:26,429
not good at being accurate but they're

00:27:25,110 --> 00:27:28,679
good at highlighting possible

00:27:26,429 --> 00:27:30,240
relationships and it's very easy for

00:27:28,679 --> 00:27:31,440
someone to review those relationships

00:27:30,240 --> 00:27:37,409
and kind of pick and choose the good

00:27:31,440 --> 00:27:40,409
ones so for last recall example I

00:27:37,409 --> 00:27:43,139
searched red NASCAR at the digital

00:27:40,409 --> 00:27:45,120
Public Library of America this is a site

00:27:43,139 --> 00:27:47,549
that aggregates digital collections from

00:27:45,120 --> 00:27:48,659
libraries all over the US it's a great

00:27:47,549 --> 00:27:51,149
set if you're looking for like sort of

00:27:48,659 --> 00:27:52,409
archival photographs and all sorts of

00:27:51,149 --> 00:27:54,899
like interesting stuff that no one's

00:27:52,409 --> 00:27:57,000
ever seen and you can see that there's

00:27:54,899 --> 00:27:58,559
almost no results for NASCAR there's

00:27:57,000 --> 00:27:59,429
almost no results and none of them are

00:27:58,559 --> 00:28:01,649
read right

00:27:59,429 --> 00:28:04,350
tremendous bummer but if we search for

00:28:01,649 --> 00:28:06,720
NASCAR there's tons of results and the

00:28:04,350 --> 00:28:11,240
top ones are red and really could this

00:28:06,720 --> 00:28:14,070
guy get any redder or any more NASCAR so

00:28:11,240 --> 00:28:16,590
the red NASCAR stuff is there somewhere

00:28:14,070 --> 00:28:18,840
we're just we're missing it right even

00:28:16,590 --> 00:28:22,169
if we got good even if we were really

00:28:18,840 --> 00:28:24,149
good at understanding the query our

00:28:22,169 --> 00:28:25,769
documents aren't being mapped until that

00:28:24,149 --> 00:28:29,399
same space where we don't know the color

00:28:25,769 --> 00:28:31,950
of our documents so the easiest possible

00:28:29,399 --> 00:28:33,960
solution is to ask you mean beings and

00:28:31,950 --> 00:28:35,639
maybe you have the sort of search engine

00:28:33,960 --> 00:28:38,429
where people are submitting data to your

00:28:35,639 --> 00:28:40,409
system on an iOS app or on a web form

00:28:38,429 --> 00:28:42,330
that's a great place to ask for more and

00:28:40,409 --> 00:28:44,070
you'll oftentimes be surprised by how

00:28:42,330 --> 00:28:47,250
willing people are to give you this

00:28:44,070 --> 00:28:48,629
information but there's tons of

00:28:47,250 --> 00:28:51,539
heuristics and off-the-shelf software

00:28:48,629 --> 00:28:54,990
you could use as well so for instance

00:28:51,539 --> 00:28:56,460
here is a Python library called color

00:28:54,990 --> 00:28:58,649
thief that you can use to get the

00:28:56,460 --> 00:29:00,840
dominant color of an image or the color

00:28:58,649 --> 00:29:02,210
palette of course this leaves as an

00:29:00,840 --> 00:29:05,100
exercise to everyone in the audience

00:29:02,210 --> 00:29:07,200
mapping these RGB values to human

00:29:05,100 --> 00:29:09,299
readable names if you're trying to do

00:29:07,200 --> 00:29:11,350
like high level colors like English

00:29:09,299 --> 00:29:13,090
black blue it's that

00:29:11,350 --> 00:29:15,100
that's very straightforward but if you

00:29:13,090 --> 00:29:17,590
want to get to like periwinkle salmon

00:29:15,100 --> 00:29:21,280
level that's a much harder problem and

00:29:17,590 --> 00:29:23,140
maybe a little crazy another thing I

00:29:21,280 --> 00:29:25,450
want to highlight is a lot of times when

00:29:23,140 --> 00:29:27,190
we're missing data right when we're

00:29:25,450 --> 00:29:29,470
missing that mapping the data may be

00:29:27,190 --> 00:29:31,059
somewhere in your system so for instance

00:29:29,470 --> 00:29:32,679
here I'm looking at the tags for an item

00:29:31,059 --> 00:29:35,289
and there's clearly sizing information

00:29:32,679 --> 00:29:37,419
there but maybe you haven't extracted or

00:29:35,289 --> 00:29:39,940
index that sizing information and really

00:29:37,419 --> 00:29:42,130
some healthy amount of regex and sort of

00:29:39,940 --> 00:29:44,020
data munging can kind of get you 80% of

00:29:42,130 --> 00:29:47,890
the way there and that's what this work

00:29:44,020 --> 00:29:49,690
often looks like and then of course the

00:29:47,890 --> 00:29:52,659
hardest possible path is to use machine

00:29:49,690 --> 00:29:54,789
learning so for instance we might train

00:29:52,659 --> 00:29:56,860
a convolutional neural network to sort

00:29:54,789 --> 00:29:59,380
of place our images into specific color

00:29:56,860 --> 00:30:00,700
bands you probably don't want to train

00:29:59,380 --> 00:30:02,110
your own from scratch you may want to

00:30:00,700 --> 00:30:05,770
transfer learn from an existing

00:30:02,110 --> 00:30:07,450
architecture again needless to say I

00:30:05,770 --> 00:30:09,669
don't think you have to go all the way

00:30:07,450 --> 00:30:11,380
here in order to fill in these gaps or

00:30:09,669 --> 00:30:15,100
do it or in order to make some some

00:30:11,380 --> 00:30:18,190
headway so by now I hope you've noticed

00:30:15,100 --> 00:30:20,830
some patterns the easiest possible

00:30:18,190 --> 00:30:24,340
solution whether it's you know dealing

00:30:20,830 --> 00:30:26,950
with entities synonyms color tags for

00:30:24,340 --> 00:30:28,750
images is just to leverage human beings

00:30:26,950 --> 00:30:32,409
right it turns out we're pretty damn

00:30:28,750 --> 00:30:35,320
good at stuff so you know don't don't be

00:30:32,409 --> 00:30:37,120
afraid to utilize humans and one thing I

00:30:35,320 --> 00:30:38,890
want to make clear is I think you'll

00:30:37,120 --> 00:30:41,110
find that human beings are going to be

00:30:38,890 --> 00:30:43,270
exceptionally fantastic at helping you

00:30:41,110 --> 00:30:45,909
with that head of the distribution but

00:30:43,270 --> 00:30:47,799
they will also have effects on the long

00:30:45,909 --> 00:30:50,950
tail right because often long tail

00:30:47,799 --> 00:30:52,480
queries are variations on the head so if

00:30:50,950 --> 00:30:55,390
I get good at understanding that Harry

00:30:52,480 --> 00:30:57,130
Potter is a phrase the head query Harry

00:30:55,390 --> 00:30:59,530
Potter will do better but also the tail

00:30:57,130 --> 00:31:02,020
query Harry Potter t-shirt read that'll

00:30:59,530 --> 00:31:04,630
do just as well

00:31:02,020 --> 00:31:06,820
the medium-level solution is usually

00:31:04,630 --> 00:31:09,220
something like using data probabilities

00:31:06,820 --> 00:31:12,100
using simple heuristics or off-the-shelf

00:31:09,220 --> 00:31:13,809
software and what's great about these

00:31:12,100 --> 00:31:16,539
approaches is they're usually very

00:31:13,809 --> 00:31:18,909
straightforward they are usually quite

00:31:16,539 --> 00:31:19,510
performant and they're very easy to

00:31:18,909 --> 00:31:22,480
understand

00:31:19,510 --> 00:31:23,710
which are all fantastic elements for a

00:31:22,480 --> 00:31:25,809
production system

00:31:23,710 --> 00:31:28,960
so please don't underestimate this class

00:31:25,809 --> 00:31:30,309
of solutions and then the hardest

00:31:28,960 --> 00:31:31,750
possible thing that you could do is try

00:31:30,309 --> 00:31:34,360
to train your own AI our machine

00:31:31,750 --> 00:31:36,640
learning systems and what I think you'll

00:31:34,360 --> 00:31:38,470
find is that while the human beings are

00:31:36,640 --> 00:31:41,950
great at the head if you really want to

00:31:38,470 --> 00:31:43,149
make some some headway on the tail right

00:31:41,950 --> 00:31:44,770
if you want to make the tail better

00:31:43,149 --> 00:31:46,779
you're really going to have to start

00:31:44,770 --> 00:31:51,279
leveraging data-driven or machine

00:31:46,779 --> 00:31:53,529
learning techniques so another pattern

00:31:51,279 --> 00:31:55,630
that I want to highlight is it's very

00:31:53,529 --> 00:31:58,240
very common for folks to use data-driven

00:31:55,630 --> 00:32:00,159
methods or machine learning systems to

00:31:58,240 --> 00:32:01,450
identify candidates of pieces of

00:32:00,159 --> 00:32:04,179
knowledge that you want to add to your

00:32:01,450 --> 00:32:05,710
system and then having human beings sort

00:32:04,179 --> 00:32:07,630
of pick and choose what are really the

00:32:05,710 --> 00:32:09,880
best pieces of knowledge before adding

00:32:07,630 --> 00:32:12,370
them to the system and this is

00:32:09,880 --> 00:32:15,220
tremendously important and very common

00:32:12,370 --> 00:32:17,830
because it turns out that query

00:32:15,220 --> 00:32:21,159
understanding is of super high stakes

00:32:17,830 --> 00:32:24,010
game right if I search for clutch and

00:32:21,159 --> 00:32:26,080
you show me automobile parts this is a

00:32:24,010 --> 00:32:28,870
catastrophic failure right like if I if

00:32:26,080 --> 00:32:30,909
I really wanted handbags so we need to

00:32:28,870 --> 00:32:34,779
be sure about our interpretation of

00:32:30,909 --> 00:32:36,640
queries but this also highlights sort of

00:32:34,779 --> 00:32:38,200
the intersection between query

00:32:36,640 --> 00:32:40,210
understanding and the user experience

00:32:38,200 --> 00:32:42,399
right if I don't have a lot of

00:32:40,210 --> 00:32:44,740
confidence in my query understanding

00:32:42,399 --> 00:32:46,419
rather than filter the results I could

00:32:44,740 --> 00:32:49,000
just suggest that to you and autosuggest

00:32:46,419 --> 00:32:50,830
right and if you agree with that

00:32:49,000 --> 00:32:53,470
classification you'll click on it and

00:32:50,830 --> 00:32:55,440
have a good time but if you don't it's

00:32:53,470 --> 00:32:58,210
it's really not the end of the world and

00:32:55,440 --> 00:33:01,600
you can really think of this as creating

00:32:58,210 --> 00:33:03,580
a spectrum from low confidence to high

00:33:01,600 --> 00:33:06,399
confidence right on the low confidence

00:33:03,580 --> 00:33:08,799
end are a lot of user experience

00:33:06,399 --> 00:33:11,230
features like auto suggests you can mess

00:33:08,799 --> 00:33:12,850
with faceting you can suggest

00:33:11,230 --> 00:33:15,100
refinements within the body of the

00:33:12,850 --> 00:33:17,049
results and even before we get to

00:33:15,100 --> 00:33:19,809
filtering right you can give a slight

00:33:17,049 --> 00:33:21,250
preference right if we think that this

00:33:19,809 --> 00:33:22,960
is a handbag query let's give the

00:33:21,250 --> 00:33:24,159
handbags a little bit of a boost but

00:33:22,960 --> 00:33:26,080
let's not completely change everything

00:33:24,159 --> 00:33:28,090
right so it's really a question of how

00:33:26,080 --> 00:33:30,340
confident you are in your system and

00:33:28,090 --> 00:33:31,690
this is a very precision oriented

00:33:30,340 --> 00:33:36,880
spectrum by the way but you can imagine

00:33:31,690 --> 00:33:37,570
a similar spectrum for recall so that's

00:33:36,880 --> 00:33:39,580
it

00:33:37,570 --> 00:33:43,450
I hope this was helpful this is really

00:33:39,580 --> 00:33:45,070
just like the tip of the iceberg the few

00:33:43,450 --> 00:33:47,440
things I want you to take home today are

00:33:45,070 --> 00:33:48,900
that query understanding it allows us to

00:33:47,440 --> 00:33:51,700
achieve a baseline of relevance and

00:33:48,900 --> 00:33:52,960
earlier I contrasted query understanding

00:33:51,700 --> 00:33:55,450
with machine learning relevant and

00:33:52,960 --> 00:33:57,190
statistical relevance but really they

00:33:55,450 --> 00:33:59,170
can all live in harmony right we can use

00:33:57,190 --> 00:34:00,730
query understanding to kind of remove

00:33:59,170 --> 00:34:02,740
all the irrelevant stuff and get us to

00:34:00,730 --> 00:34:04,180
like a reasonable spot and then we can

00:34:02,740 --> 00:34:05,890
use statistics and machine learning to

00:34:04,180 --> 00:34:09,250
like fine-tune what's happening on top

00:34:05,890 --> 00:34:11,230
of that query understanding achieves

00:34:09,250 --> 00:34:12,880
that by focusing on intent right we have

00:34:11,230 --> 00:34:15,010
to try to discern what the user is

00:34:12,880 --> 00:34:16,450
getting at and fix those problems and we

00:34:15,010 --> 00:34:19,270
do that by imbuing our search engine

00:34:16,450 --> 00:34:20,860
with knowledge and unfortunately the

00:34:19,270 --> 00:34:22,240
only reasonable approach is to sort of

00:34:20,860 --> 00:34:24,670
figure out what knowledge is most

00:34:22,240 --> 00:34:29,080
important and use data and analytics to

00:34:24,670 --> 00:34:30,910
do so so one very quick plug this is my

00:34:29,080 --> 00:34:32,530
company or a small consultancy and we'd

00:34:30,910 --> 00:34:34,930
love to help you get started with query

00:34:32,530 --> 00:34:37,960
understanding there's my Twitter medium

00:34:34,930 --> 00:34:40,120
LinkedIn website and there's our blog I

00:34:37,960 --> 00:34:42,430
actually recently just wrote a series

00:34:40,120 --> 00:34:43,510
about autosuggest if you found this talk

00:34:42,430 --> 00:34:47,940
interesting you may find that

00:34:43,510 --> 00:34:47,940
interesting as well so thank you

00:34:55,510 --> 00:35:05,770
any questions hi thanks for the talk was

00:35:02,500 --> 00:35:08,710
really nice yeah and most of the tips

00:35:05,770 --> 00:35:10,359
you gave I think we're like at index

00:35:08,710 --> 00:35:12,520
time could you maybe comment a bit on

00:35:10,359 --> 00:35:14,980
which of those you would execute it

00:35:12,520 --> 00:35:16,990
index or query time something like that

00:35:14,980 --> 00:35:18,670
that's a good question I didn't get into

00:35:16,990 --> 00:35:21,430
the mechanics of this but actually a lot

00:35:18,670 --> 00:35:24,550
of query understanding happens at both

00:35:21,430 --> 00:35:25,150
of those stages so at index time let's

00:35:24,550 --> 00:35:26,710
say that you're dealing with

00:35:25,150 --> 00:35:28,810
classifications you need to know that

00:35:26,710 --> 00:35:30,850
you know this is a document that belongs

00:35:28,810 --> 00:35:32,260
to finished goods we're assuming there

00:35:30,850 --> 00:35:34,090
that that's already something that you

00:35:32,260 --> 00:35:36,369
know in your system or that's a piece of

00:35:34,090 --> 00:35:37,780
data that you're missing in but then a

00:35:36,369 --> 00:35:40,000
lot of query understanding happens

00:35:37,780 --> 00:35:42,010
before you even talk to a retrieval

00:35:40,000 --> 00:35:44,290
system so often it looks like you know

00:35:42,010 --> 00:35:46,060
we'll have a set of systems that will

00:35:44,290 --> 00:35:48,880
spit us back a classification or a

00:35:46,060 --> 00:35:50,290
segmentation for a query and after query

00:35:48,880 --> 00:35:52,150
understanding gives us those results

00:35:50,290 --> 00:35:54,700
will then issue a query to solder

00:35:52,150 --> 00:36:07,540
elasticsearch that you know you that

00:35:54,700 --> 00:36:09,970
leverages those those pieces I was

00:36:07,540 --> 00:36:11,650
curious about if you've used query

00:36:09,970 --> 00:36:14,470
understanding features in a learning to

00:36:11,650 --> 00:36:16,300
rank model yeah that's actually

00:36:14,470 --> 00:36:19,510
something I didn't get to really talk

00:36:16,300 --> 00:36:20,650
about but as I mentioned at the end all

00:36:19,510 --> 00:36:21,940
of these things can sort of Libet

00:36:20,650 --> 00:36:25,359
harmony but it's beyond that right

00:36:21,940 --> 00:36:26,770
because you're learning to rank models

00:36:25,359 --> 00:36:28,630
can leverage the query understanding

00:36:26,770 --> 00:36:30,400
right so if your learn to rank model can

00:36:28,630 --> 00:36:32,170
understand that this is a clothing query

00:36:30,400 --> 00:36:33,940
right it may pick up on completely

00:36:32,170 --> 00:36:36,480
different features then than if it just

00:36:33,940 --> 00:36:39,160
didn't know anything about the query so

00:36:36,480 --> 00:36:40,960
yeah it's tremendously common to to sort

00:36:39,160 --> 00:36:42,580
of start by using query understanding to

00:36:40,960 --> 00:36:43,960
kind of like get you the baseline but

00:36:42,580 --> 00:36:46,990
then also incorporating those features

00:36:43,960 --> 00:36:48,880
into learning to rank models um and the

00:36:46,990 --> 00:36:51,220
way to think about it is it gives you

00:36:48,880 --> 00:36:52,900
like a remove sparsity right so then

00:36:51,220 --> 00:36:54,670
like rather than dealing with like an

00:36:52,900 --> 00:36:56,260
individual query or the intersection of

00:36:54,670 --> 00:36:58,450
an individual query or a document now

00:36:56,260 --> 00:37:03,600
you can intersect a class of queries or

00:36:58,450 --> 00:37:07,119
an attribute of course hi Kirsten about

00:37:03,600 --> 00:37:08,619
LTR and data you you said for the

00:37:07,119 --> 00:37:09,220
machine learning problems sometimes the

00:37:08,619 --> 00:37:10,750
hard part is

00:37:09,220 --> 00:37:12,609
is actually getting good data and I

00:37:10,750 --> 00:37:14,710
certainly agree with that it's hard to

00:37:12,609 --> 00:37:16,960
show people all of your is possible

00:37:14,710 --> 00:37:19,240
results and then get them to rank it but

00:37:16,960 --> 00:37:22,390
maybe you have an idea where a

00:37:19,240 --> 00:37:24,910
particular user data you can use are

00:37:22,390 --> 00:37:26,859
more helpful is there in your experience

00:37:24,910 --> 00:37:28,990
a class of problems but it's easy to get

00:37:26,859 --> 00:37:30,880
data for machine learning from user

00:37:28,990 --> 00:37:33,520
interactions on your site in this whole

00:37:30,880 --> 00:37:35,410
area I think in general it's always a

00:37:33,520 --> 00:37:36,640
very very subtle thing you know everyone

00:37:35,410 --> 00:37:38,109
basically starts with like looking at

00:37:36,640 --> 00:37:40,510
cliques but cliques are a very very

00:37:38,109 --> 00:37:44,680
ambiguous signal and then it really

00:37:40,510 --> 00:37:46,180
depends on you know understanding what

00:37:44,680 --> 00:37:48,190
behavior looks like on your on your

00:37:46,180 --> 00:37:49,780
system and what success is right and

00:37:48,190 --> 00:37:51,190
that's that's really why training data

00:37:49,780 --> 00:37:52,720
when you're harvesting training data

00:37:51,190 --> 00:37:54,760
from behavior becomes very hard because

00:37:52,720 --> 00:37:56,800
often times it's very difficult for even

00:37:54,760 --> 00:37:58,900
us to define in this room what success

00:37:56,800 --> 00:38:00,790
is right success on an e-commerce site

00:37:58,900 --> 00:38:03,070
is revenue right but that's a

00:38:00,790 --> 00:38:04,780
comparatively very rare events

00:38:03,070 --> 00:38:07,030
throughout the course of a website right

00:38:04,780 --> 00:38:09,760
so conversions and are simply not enough

00:38:07,030 --> 00:38:11,080
it must use most e-commerce settings but

00:38:09,760 --> 00:38:12,220
if you're looking at other sort of

00:38:11,080 --> 00:38:14,320
search engines like let's talk about

00:38:12,220 --> 00:38:16,240
Pinterest or something like that then

00:38:14,320 --> 00:38:19,180
success is even more sort of ambiguous

00:38:16,240 --> 00:38:21,430
right and so that ambiguity makes it

00:38:19,180 --> 00:38:23,760
very very hard to derive like meaningful

00:38:21,430 --> 00:38:26,920
signal out of out of your training data

00:38:23,760 --> 00:38:28,630
what I will say is I often find from an

00:38:26,920 --> 00:38:31,270
analytics perspective that it's easier

00:38:28,630 --> 00:38:32,830
to define failure right like I may not

00:38:31,270 --> 00:38:34,119
know if you're having a good time but I

00:38:32,830 --> 00:38:35,619
can almost certainly tell you you're

00:38:34,119 --> 00:38:37,089
having a bad time right like if you

00:38:35,619 --> 00:38:38,560
spent 10 seconds on the site unless

00:38:37,089 --> 00:38:39,790
we're talking about like Google and you

00:38:38,560 --> 00:38:41,830
got like a knowledge graph call out of

00:38:39,790 --> 00:38:43,869
like you know I search for like Obama's

00:38:41,830 --> 00:38:45,490
birthday and I got Obama's birthday as

00:38:43,869 --> 00:38:47,950
the answer which is probably no one's

00:38:45,490 --> 00:38:49,720
problem in this room unless we're

00:38:47,950 --> 00:38:50,830
talking about that it's it's fairly

00:38:49,720 --> 00:38:56,760
straightforward to understand

00:38:50,830 --> 00:38:56,760
abandonment and that's question

00:39:05,349 --> 00:39:11,329
hi my name is mano Saiga's from 904 labs

00:39:09,109 --> 00:39:13,790
we provide self learning search engine

00:39:11,329 --> 00:39:14,540
for e-commerce so what what you've been

00:39:13,790 --> 00:39:18,470
saying

00:39:14,540 --> 00:39:19,700
I very much with it one of the things

00:39:18,470 --> 00:39:21,560
that I'd like to ask perhaps from your

00:39:19,700 --> 00:39:24,410
experience at related works but also

00:39:21,560 --> 00:39:26,660
earlier from Etsy is about evaluation of

00:39:24,410 --> 00:39:30,680
these many components that are involved

00:39:26,660 --> 00:39:32,450
in search and also individual components

00:39:30,680 --> 00:39:36,190
but also an end-to-end evaluation and

00:39:32,450 --> 00:39:40,730
how would that relate to make a decision

00:39:36,190 --> 00:39:43,460
to go from easy to medium to hard to

00:39:40,730 --> 00:39:45,470
answer a particular question so you're

00:39:43,460 --> 00:39:47,510
asking when do you move from from each

00:39:45,470 --> 00:39:49,849
of these kind of grades that is one

00:39:47,510 --> 00:39:54,260
question and the second question is do

00:39:49,849 --> 00:39:58,400
you do evaluation per components overall

00:39:54,260 --> 00:39:59,810
or both in general I would you know for

00:39:58,400 --> 00:40:01,160
folks that have enough traffic and that

00:39:59,810 --> 00:40:02,960
have the expertise I would recommend

00:40:01,160 --> 00:40:05,060
running a BA experiments and when you're

00:40:02,960 --> 00:40:06,589
running a BA experiments you should

00:40:05,060 --> 00:40:08,510
always prefer to run the most

00:40:06,589 --> 00:40:09,680
fine-grained experiment possible right

00:40:08,510 --> 00:40:12,050
because that's gonna give you the clear

00:40:09,680 --> 00:40:13,490
signal for what's for what's working but

00:40:12,050 --> 00:40:15,319
a B experimentation is itself like a

00:40:13,490 --> 00:40:17,599
very subtle art form and oftentimes what

00:40:15,319 --> 00:40:18,920
you'll find is you know if we add five

00:40:17,599 --> 00:40:20,720
synonyms to our system that's going to

00:40:18,920 --> 00:40:21,890
affect like a handful of queries right

00:40:20,720 --> 00:40:23,329
and so you really won't have enough

00:40:21,890 --> 00:40:25,460
traffic to get a meaningful signal out

00:40:23,329 --> 00:40:29,270
of it so sometimes out of necessity you

00:40:25,460 --> 00:40:32,329
need to make bigger you know tests but

00:40:29,270 --> 00:40:34,760
in general I would I would say get is

00:40:32,329 --> 00:40:35,690
incremental as you possibly can unless

00:40:34,760 --> 00:40:37,700
you're forced in the other direction

00:40:35,690 --> 00:40:39,890
right because if you're testing a giant

00:40:37,700 --> 00:40:41,630
system when it doesn't work which that's

00:40:39,890 --> 00:40:43,339
what's going to happen the first like

00:40:41,630 --> 00:40:47,720
dozen or so times you're gonna have no

00:40:43,339 --> 00:40:48,900
idea why it didn't work okay thank you

00:40:47,720 --> 00:40:50,950
very much

00:40:48,900 --> 00:40:53,010
[Applause]

00:40:50,950 --> 00:40:53,010

YouTube URL: https://www.youtube.com/watch?v=STvz1gGtSw8


