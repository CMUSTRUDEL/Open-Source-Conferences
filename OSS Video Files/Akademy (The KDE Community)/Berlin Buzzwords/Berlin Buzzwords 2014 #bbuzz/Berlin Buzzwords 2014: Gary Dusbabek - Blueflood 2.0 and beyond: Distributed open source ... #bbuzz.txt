Title: Berlin Buzzwords 2014: Gary Dusbabek - Blueflood 2.0 and beyond: Distributed open source ... #bbuzz
Publication date: 2014-05-28
Playlist: Berlin Buzzwords 2014 #bbuzz
Description: 
	Gary Dusbabek talking about "Blueflood 2.0 and beyond: Distributed open source metrics processing"

The Blueflood distributed metrics engine was released as open source software by Rackspace in August 2012.  Since then the Blueflood team as been hard at work adding features to make this an even more exciting and compelling metrics platform. 

New features include:
- Aggregate metric ingestion mode, including statsD ingestion
- Histograms
- Kafka queue ingestion
- Pluggable search integration
- Batch read & write operations
- Graphite integration

In this presentation you will learn how you can use Blueflood as part of your metrics/monitoring tool chain, and how it compares to some of the other leading open source metrics solutions.

Read more:
https://2014.berlinbuzzwords.de/session/blueflood-20-and-beyond-distributed-open-source-metrics-processing

About Gary Dusbabek:
https://2014.berlinbuzzwords.de/user/203/event/1

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:05,750 --> 00:00:10,740
great everybody we're going to go ahead

00:00:08,340 --> 00:00:12,690
and get started if you notice that

00:00:10,740 --> 00:00:15,480
they've turned the blowers on in the

00:00:12,690 --> 00:00:16,890
room so it's not so hot anymore earlier

00:00:15,480 --> 00:00:19,320
I thought that they should change the

00:00:16,890 --> 00:00:21,960
name from machine house to bath house

00:00:19,320 --> 00:00:24,750
because it was like a sauna in here but

00:00:21,960 --> 00:00:27,359
thanks for coming today my name is Gary

00:00:24,750 --> 00:00:29,789
deuce Babic and I work for rackspace on

00:00:27,359 --> 00:00:32,369
the cloud metrics team and we're

00:00:29,789 --> 00:00:34,739
building an API so that we have a common

00:00:32,369 --> 00:00:36,600
system in house for dealing and managing

00:00:34,739 --> 00:00:38,879
time series metrics that come from our

00:00:36,600 --> 00:00:42,049
cloud monitoring system before that I

00:00:38,879 --> 00:00:44,489
worked on the cloud monitoring team and

00:00:42,049 --> 00:00:46,920
did different things for that team and

00:00:44,489 --> 00:00:49,500
our team spun out of that so as I said

00:00:46,920 --> 00:00:51,059
our primary job is to manage the metrics

00:00:49,500 --> 00:00:52,890
that come out of that system we're

00:00:51,059 --> 00:00:55,350
currently ingesting data that comes from

00:00:52,890 --> 00:00:57,000
thousands of nodes most of them inside

00:00:55,350 --> 00:00:58,680
Rackspace but we're starting to get more

00:00:57,000 --> 00:01:00,989
data coming from outside Rackspace and

00:00:58,680 --> 00:01:03,449
once it's an API will be getting data

00:01:00,989 --> 00:01:05,570
from all over the place and so that's

00:01:03,449 --> 00:01:08,070
pretty exciting blue fled is a

00:01:05,570 --> 00:01:10,859
distributed system that we created to

00:01:08,070 --> 00:01:14,009
manage that time series data blue flood

00:01:10,859 --> 00:01:16,320
will ingest it will roll it up so that

00:01:14,009 --> 00:01:18,600
the data is easier to manage and it will

00:01:16,320 --> 00:01:21,179
then make it available for query blue

00:01:18,600 --> 00:01:23,520
flood was optimized and designed to do

00:01:21,179 --> 00:01:25,710
two things really well one is ingest

00:01:23,520 --> 00:01:28,950
data quite quickly and the other thing

00:01:25,710 --> 00:01:30,899
is to make it available for reads very

00:01:28,950 --> 00:01:33,299
quickly with the idea that it's going to

00:01:30,899 --> 00:01:35,399
be used to generate graphs and so it

00:01:33,299 --> 00:01:38,340
works best when you're retrieving

00:01:35,399 --> 00:01:40,170
roughly between 300 to 400 data points

00:01:38,340 --> 00:01:41,579
at a time performance is a little bit

00:01:40,170 --> 00:01:44,340
slower once you get beyond that but

00:01:41,579 --> 00:01:46,679
we've optimized the read path for a

00:01:44,340 --> 00:01:49,979
sweet spot of about 300 to 400 data

00:01:46,679 --> 00:01:51,810
points blue flood was introduced last

00:01:49,979 --> 00:01:53,700
year at Berlin buzzwords and we've been

00:01:51,810 --> 00:01:56,039
busy making it better software since

00:01:53,700 --> 00:01:57,240
then you've probably come here to hear

00:01:56,039 --> 00:01:58,829
about some of the new features that

00:01:57,240 --> 00:02:01,829
we've added as part of blue flood

00:01:58,829 --> 00:02:03,389
version 2 and I promise you that I'm

00:02:01,829 --> 00:02:05,789
going to talk about those features but

00:02:03,389 --> 00:02:07,469
there's a really easy way for you to get

00:02:05,789 --> 00:02:09,539
at that information and that's just to

00:02:07,469 --> 00:02:11,220
take a look at our changes file and look

00:02:09,539 --> 00:02:13,590
for all the awesome stuff that we've

00:02:11,220 --> 00:02:15,060
added what I really want to spend time

00:02:13,590 --> 00:02:16,830
talking about today are some of the

00:02:15,060 --> 00:02:18,900
things that we've learned as we've added

00:02:16,830 --> 00:02:19,410
those features because I think we have

00:02:18,900 --> 00:02:21,060
some interest

00:02:19,410 --> 00:02:24,390
seeing things to share about building

00:02:21,060 --> 00:02:26,760
distributed systems about managing time

00:02:24,390 --> 00:02:29,880
series data and about the time series

00:02:26,760 --> 00:02:32,190
space or set of software that we see a

00:02:29,880 --> 00:02:34,590
open source and commercial providers in

00:02:32,190 --> 00:02:37,170
general we've learned a lot so I think

00:02:34,590 --> 00:02:38,850
this will plan to you what I think this

00:02:37,170 --> 00:02:40,890
information will apply to you whether

00:02:38,850 --> 00:02:43,350
you plan on using blue flood or not

00:02:40,890 --> 00:02:46,470
least I hope so so in short I'd like to

00:02:43,350 --> 00:02:47,700
focus on what comes next okay so I'm

00:02:46,470 --> 00:02:49,530
going to proceed along with this basic

00:02:47,700 --> 00:02:50,790
outline I'm first going to talk about

00:02:49,530 --> 00:02:52,200
the current state of blue flood

00:02:50,790 --> 00:02:53,810
including the new features that we've

00:02:52,200 --> 00:02:56,220
added since we've released the source

00:02:53,810 --> 00:02:57,900
we've made a lot of improvements making

00:02:56,220 --> 00:03:00,570
it better then I'm going to spend some

00:02:57,900 --> 00:03:02,510
time talking about the I guess the state

00:03:00,570 --> 00:03:04,830
of affairs with metrics software and

00:03:02,510 --> 00:03:07,050
some observations that we've made and

00:03:04,830 --> 00:03:09,120
then I'm going to make an invitation to

00:03:07,050 --> 00:03:10,650
all of you there are things that you can

00:03:09,120 --> 00:03:12,360
do to help blue flood to help some of

00:03:10,650 --> 00:03:14,430
the other projects and I want to make

00:03:12,360 --> 00:03:16,350
some specific invitations and then

00:03:14,430 --> 00:03:18,840
finish by set is setting some goals for

00:03:16,350 --> 00:03:19,980
us all because I think that we're just

00:03:18,840 --> 00:03:22,020
getting started and there's a wonderful

00:03:19,980 --> 00:03:25,440
place that we can hopefully end up at

00:03:22,020 --> 00:03:29,070
someday so we decided to release blue

00:03:25,440 --> 00:03:30,870
flood in a March of last year we thought

00:03:29,070 --> 00:03:32,459
it would be a quick process maybe take

00:03:30,870 --> 00:03:35,220
us a month to end up taking us almost

00:03:32,459 --> 00:03:37,770
five months we've been working really

00:03:35,220 --> 00:03:40,200
hard since then to to make it better

00:03:37,770 --> 00:03:42,660
that was a big learning process for us

00:03:40,200 --> 00:03:44,459
because we we thought that it would be

00:03:42,660 --> 00:03:46,500
just a simple act of moving code from

00:03:44,459 --> 00:03:48,360
one repository to another but if you've

00:03:46,500 --> 00:03:50,160
ever done that you know that that's not

00:03:48,360 --> 00:03:52,050
the case there's problems with

00:03:50,160 --> 00:03:54,030
dependencies there's coupling that you

00:03:52,050 --> 00:03:55,800
didn't think about there's assumptions

00:03:54,030 --> 00:03:57,690
that you've made in the code that make

00:03:55,800 --> 00:04:00,600
it difficult and so that process ended

00:03:57,690 --> 00:04:02,730
up taking us quite a bit longer we

00:04:00,600 --> 00:04:04,680
realized it quite simply it would have

00:04:02,730 --> 00:04:07,170
been better for us to start as an open

00:04:04,680 --> 00:04:09,180
source software for two main reasons one

00:04:07,170 --> 00:04:11,160
this would have given a chance for the

00:04:09,180 --> 00:04:14,130
community around the software to start

00:04:11,160 --> 00:04:16,709
up organically or naturally and it would

00:04:14,130 --> 00:04:18,660
be more more active as the project

00:04:16,709 --> 00:04:20,850
matured and we would have cut our

00:04:18,660 --> 00:04:24,120
dependencies and coupling and and and

00:04:20,850 --> 00:04:26,010
relations correct from the beginning so

00:04:24,120 --> 00:04:27,750
in case you might be thinking about open

00:04:26,010 --> 00:04:28,919
sourcing some software some projects

00:04:27,750 --> 00:04:31,620
that you working on those are some

00:04:28,919 --> 00:04:33,750
things to consider time it takes longer

00:04:31,620 --> 00:04:35,850
and ways that you can

00:04:33,750 --> 00:04:37,560
you can get the community growing the

00:04:35,850 --> 00:04:39,360
process of producing open-source

00:04:37,560 --> 00:04:40,850
software is quite a bit different than

00:04:39,360 --> 00:04:44,610
producing close to our software

00:04:40,850 --> 00:04:46,290
specifically every mistake or a good

00:04:44,610 --> 00:04:48,960
thing that you do is quite visible and

00:04:46,290 --> 00:04:50,940
transparent to others when we had

00:04:48,960 --> 00:04:55,820
production issues well we had to

00:04:50,940 --> 00:04:58,860
sometimes make quick code changes github

00:04:55,820 --> 00:04:59,970
github reviews in pull requests and it

00:04:58,860 --> 00:05:01,320
was happening you know in front of

00:04:59,970 --> 00:05:02,700
everybody so they got to see some of the

00:05:01,320 --> 00:05:04,350
drama that we might be having in our own

00:05:02,700 --> 00:05:05,880
production cluster but that's a good

00:05:04,350 --> 00:05:08,940
thing I think transparency and open

00:05:05,880 --> 00:05:11,130
source projects is very important last

00:05:08,940 --> 00:05:13,260
year we were ingesting about fifteen

00:05:11,130 --> 00:05:15,600
thousand metric points per second and

00:05:13,260 --> 00:05:18,150
this was as much data as our production

00:05:15,600 --> 00:05:20,370
environment could put in we were we were

00:05:18,150 --> 00:05:23,100
we didn't have time to write proper load

00:05:20,370 --> 00:05:24,570
testing tools and so we would just send

00:05:23,100 --> 00:05:26,130
as much data as we could gather into our

00:05:24,570 --> 00:05:28,740
system and then that's how much we were

00:05:26,130 --> 00:05:30,600
doing last year this year we've roughly

00:05:28,740 --> 00:05:33,210
doubled that we're doing about 30,000

00:05:30,600 --> 00:05:35,550
points and we see burst up to 40,000

00:05:33,210 --> 00:05:37,710
points a second as far as huge

00:05:35,550 --> 00:05:39,960
distributed systems go this is this is

00:05:37,710 --> 00:05:42,390
not much but as we've monitored the the

00:05:39,960 --> 00:05:43,920
servers and the processes we know that

00:05:42,390 --> 00:05:45,330
there's room for a lot more growth and

00:05:43,920 --> 00:05:47,790
we expect it to be able to handle more

00:05:45,330 --> 00:05:49,980
but still we're limited by how fast

00:05:47,790 --> 00:05:53,340
cloud monitoring can send data into our

00:05:49,980 --> 00:05:55,620
system in this time we've also made the

00:05:53,340 --> 00:05:57,780
switch from physical hardware to virtual

00:05:55,620 --> 00:06:00,570
hardware and so really we're actually

00:05:57,780 --> 00:06:02,640
doing more with less this gives us an

00:06:00,570 --> 00:06:04,470
elastic capability that we did not have

00:06:02,640 --> 00:06:06,600
before and we think it's important

00:06:04,470 --> 00:06:08,280
because as an open source project we

00:06:06,600 --> 00:06:10,110
want to be using our software the way we

00:06:08,280 --> 00:06:11,600
expect other people to be using software

00:06:10,110 --> 00:06:14,670
as well and we don't expect people to

00:06:11,600 --> 00:06:17,460
provision massive clusters of you know

00:06:14,670 --> 00:06:18,930
100 real live pieces of hardware we

00:06:17,460 --> 00:06:21,750
expect people to use amazon web services

00:06:18,930 --> 00:06:24,690
or Rackspace cloud servers or any

00:06:21,750 --> 00:06:26,250
virtual system and so that's important

00:06:24,690 --> 00:06:27,660
we've tested higher loads but they

00:06:26,250 --> 00:06:29,820
haven't been sustained test but we feel

00:06:27,660 --> 00:06:31,350
confident that once we once we get the

00:06:29,820 --> 00:06:33,000
the time and the resources to do

00:06:31,350 --> 00:06:36,420
sustained tests that will be happy with

00:06:33,000 --> 00:06:39,300
the ingestion performance we've also

00:06:36,420 --> 00:06:41,850
spent quite a bit of time expanding the

00:06:39,300 --> 00:06:44,280
capabilities within blue flood there are

00:06:41,850 --> 00:06:47,070
two big features that lay the groundwork

00:06:44,280 --> 00:06:49,050
for a lot of future improvement

00:06:47,070 --> 00:06:51,870
far as what blue flood is capable of

00:06:49,050 --> 00:06:53,910
doing and enabling blue fled to work

00:06:51,870 --> 00:06:55,260
better with external systems those are

00:06:53,910 --> 00:06:58,530
two things that we think are going to be

00:06:55,260 --> 00:07:00,810
important moving on when blue flood was

00:06:58,530 --> 00:07:03,720
first released we basically handled only

00:07:00,810 --> 00:07:05,820
simple gauges now a gauge is just a

00:07:03,720 --> 00:07:08,700
snapshot of date of data at a point in

00:07:05,820 --> 00:07:10,680
time and then that data would then those

00:07:08,700 --> 00:07:12,330
gauges would then get rolled up we would

00:07:10,680 --> 00:07:14,280
do a little bit of analysis on them

00:07:12,330 --> 00:07:16,950
compute the minimum the maximum the

00:07:14,280 --> 00:07:19,080
average standard deviation and a few

00:07:16,950 --> 00:07:21,330
other things we knew from the beginning

00:07:19,080 --> 00:07:24,150
that we were going to want to integrate

00:07:21,330 --> 00:07:25,650
blue flood with other tools and other

00:07:24,150 --> 00:07:27,990
kinds of data so we kind of planned

00:07:25,650 --> 00:07:30,060
ahead as far as how we serialize the

00:07:27,990 --> 00:07:31,820
data in the database knowing that these

00:07:30,060 --> 00:07:34,200
other data types are going to come along

00:07:31,820 --> 00:07:36,120
also we had internal customers who are

00:07:34,200 --> 00:07:37,920
asking for these things and so we knew

00:07:36,120 --> 00:07:40,260
that it was going to be important we

00:07:37,920 --> 00:07:43,080
expected to put the work in to do it to

00:07:40,260 --> 00:07:45,270
do this and so we've added the

00:07:43,080 --> 00:07:48,150
capabilities for counters timers and

00:07:45,270 --> 00:07:50,550
sets and as I said this gives us some

00:07:48,150 --> 00:07:52,650
influx some flexibility on the kind of

00:07:50,550 --> 00:07:54,180
data that we can ingest and lays the

00:07:52,650 --> 00:07:55,920
groundwork some for some important

00:07:54,180 --> 00:07:58,100
integrations and features that we're

00:07:55,920 --> 00:08:00,300
going to be able to do in the future

00:07:58,100 --> 00:08:02,520
some other things that we've done is

00:08:00,300 --> 00:08:05,190
we've added integration points in blue

00:08:02,520 --> 00:08:08,100
flood that allow us to get data out of

00:08:05,190 --> 00:08:10,080
our system in bulk specifically we've

00:08:08,100 --> 00:08:12,240
added implementations that allow you to

00:08:10,080 --> 00:08:15,180
export roll-ups as they happen in real

00:08:12,240 --> 00:08:16,950
time to Kafka cues as well as export

00:08:15,180 --> 00:08:21,390
roll-ups as they happen into long-term

00:08:16,950 --> 00:08:23,790
storage like cloud files or s3 things

00:08:21,390 --> 00:08:25,680
like that the main purpose of doing this

00:08:23,790 --> 00:08:28,230
was is to allow you to do bulk

00:08:25,680 --> 00:08:30,630
operations on your data offline from

00:08:28,230 --> 00:08:32,160
your cluster we realize that this is an

00:08:30,630 --> 00:08:33,990
important use case we wanted to be able

00:08:32,160 --> 00:08:35,760
to service it just for ourselves which

00:08:33,990 --> 00:08:37,410
is why we implemented it but also for

00:08:35,760 --> 00:08:41,550
people who might be thinking about using

00:08:37,410 --> 00:08:43,620
blue flood in their own systems when

00:08:41,550 --> 00:08:45,830
blue flood was first released there was

00:08:43,620 --> 00:08:48,000
only a primitive kind of indexing before

00:08:45,830 --> 00:08:49,890
basically the only question we could

00:08:48,000 --> 00:08:51,780
answer was what are all of my metrics

00:08:49,890 --> 00:08:53,340
you know for a given tenant or user and

00:08:51,780 --> 00:08:55,380
it would return a list of metrics and so

00:08:53,340 --> 00:08:57,810
that was the only kind of index that we

00:08:55,380 --> 00:08:59,910
had at that point we knew that we wanted

00:08:57,810 --> 00:09:00,870
to be able to answer more difficult

00:08:59,910 --> 00:09:03,570
questions we want

00:09:00,870 --> 00:09:06,570
to be able to tag metrics we wanted to

00:09:03,570 --> 00:09:08,550
be able to associate key value metadata

00:09:06,570 --> 00:09:10,200
with metrics and so we knew that we were

00:09:08,550 --> 00:09:12,870
going to have to have either some kind

00:09:10,200 --> 00:09:16,230
of index or some kind of indexing API to

00:09:12,870 --> 00:09:18,150
do this so we specified an interface in

00:09:16,230 --> 00:09:20,540
our code and created one concrete

00:09:18,150 --> 00:09:23,610
implementation that uses elasticsearch

00:09:20,540 --> 00:09:25,410
we've been pretty excited with the the

00:09:23,610 --> 00:09:27,600
thought of using other index other

00:09:25,410 --> 00:09:30,210
indexes as well and we've implemented

00:09:27,600 --> 00:09:33,120
one but there are potentials to to

00:09:30,210 --> 00:09:35,130
implement a few others from the

00:09:33,120 --> 00:09:38,160
beginning we knew that we wanted to have

00:09:35,130 --> 00:09:40,110
very granular access to metric data so

00:09:38,160 --> 00:09:42,120
what that means is we knew that we

00:09:40,110 --> 00:09:44,730
wanted to mainly look up metrics by

00:09:42,120 --> 00:09:47,040
their key name one metric at a time not

00:09:44,730 --> 00:09:49,080
groups of metrics and so there was there

00:09:47,040 --> 00:09:51,270
was nothing built into group metrics

00:09:49,080 --> 00:09:53,700
together indexing will allow you to do

00:09:51,270 --> 00:09:56,070
this because you can associate a certain

00:09:53,700 --> 00:09:58,110
tag with a set of metrics and then

00:09:56,070 --> 00:10:00,630
eventually be able to query blue flood

00:09:58,110 --> 00:10:05,160
using that tag to return a set of

00:10:00,630 --> 00:10:07,410
metrics back over space and time also

00:10:05,160 --> 00:10:09,510
the same thing goes for querying with

00:10:07,410 --> 00:10:11,550
with key value metadata as well so

00:10:09,510 --> 00:10:13,440
there's two parts to this interface one

00:10:11,550 --> 00:10:15,540
is the part that's currently implemented

00:10:13,440 --> 00:10:17,370
is just how we index the metrics when

00:10:15,540 --> 00:10:19,290
they get ingested the other parts really

00:10:17,370 --> 00:10:21,690
unimplemented its to how we search for

00:10:19,290 --> 00:10:23,730
those so it's kind of a a moving target

00:10:21,690 --> 00:10:25,620
the main reason we're moving slow on

00:10:23,730 --> 00:10:28,680
this is we really want to avoid adding

00:10:25,620 --> 00:10:30,390
extra dependencies to blue flood adding

00:10:28,680 --> 00:10:32,370
extra dependencies will complicate the

00:10:30,390 --> 00:10:34,529
process that we use to that you go

00:10:32,370 --> 00:10:36,690
through to install and setup we want to

00:10:34,529 --> 00:10:37,860
make it as simple as possible so as much

00:10:36,690 --> 00:10:39,570
functionality that we can bring into

00:10:37,860 --> 00:10:41,130
blue flood we will but for things like

00:10:39,570 --> 00:10:44,510
this we realize we're going to have to

00:10:41,130 --> 00:10:46,950
have interfaces into external systems

00:10:44,510 --> 00:10:49,110
we've also increased the performance of

00:10:46,950 --> 00:10:51,209
blue flood previously as I said before

00:10:49,110 --> 00:10:54,120
we it was important for us to be able to

00:10:51,209 --> 00:10:56,459
address metrics individually and so the

00:10:54,120 --> 00:10:58,740
way you got a metric was one call and

00:10:56,459 --> 00:11:00,810
you got one metric the way you inserted

00:10:58,740 --> 00:11:01,830
metric was one call on you inserted one

00:11:00,810 --> 00:11:03,180
metric at a time so if you had a

00:11:01,830 --> 00:11:05,060
thousand metrics well you've got to do a

00:11:03,180 --> 00:11:08,070
thousand different database operations

00:11:05,060 --> 00:11:09,990
this doesn't scale well especially with

00:11:08,070 --> 00:11:13,380
Cassandra which is what we are using for

00:11:09,990 --> 00:11:14,279
our back-end database the the overhead

00:11:13,380 --> 00:11:16,079
of crea

00:11:14,279 --> 00:11:17,610
a network round trip talking to

00:11:16,079 --> 00:11:19,199
Cassandra was just a little too much and

00:11:17,610 --> 00:11:21,749
it was causing us a lot of performance

00:11:19,199 --> 00:11:23,430
degradation and so we reduced this this

00:11:21,749 --> 00:11:26,009
bottleneck by just taking it out and

00:11:23,430 --> 00:11:28,649
introducing batch operations to both our

00:11:26,009 --> 00:11:30,740
ingest and roll up pipelines and this

00:11:28,649 --> 00:11:33,509
overnight increased our throughput and

00:11:30,740 --> 00:11:36,149
decrease the mean time to create a roll

00:11:33,509 --> 00:11:37,860
up so it give us additional keep well it

00:11:36,149 --> 00:11:39,660
did not give us additional capability

00:11:37,860 --> 00:11:43,259
but it made the system a lot more

00:11:39,660 --> 00:11:45,059
efficient I think we are going to be

00:11:43,259 --> 00:11:47,490
able to improve this more as we start

00:11:45,059 --> 00:11:49,350
experiencing as we start experimenting

00:11:47,490 --> 00:11:53,370
with the Cassandra native protocol which

00:11:49,350 --> 00:11:55,740
we still we still haven't done cassandra

00:11:53,370 --> 00:11:57,329
has changed a lot in the last two years

00:11:55,740 --> 00:11:59,850
which is how long we've been building

00:11:57,329 --> 00:12:00,870
this software specifically you've

00:11:59,850 --> 00:12:03,629
probably observed that they've been

00:12:00,870 --> 00:12:06,059
moving more towards using cql for data

00:12:03,629 --> 00:12:08,279
access and distinct distancing

00:12:06,059 --> 00:12:11,939
themselves or encouraging people to stop

00:12:08,279 --> 00:12:15,329
using thrift at the same time they've

00:12:11,939 --> 00:12:18,329
also also been rapidly deprecating old

00:12:15,329 --> 00:12:20,160
versions of cql and so your your best

00:12:18,329 --> 00:12:21,930
bet is to stay on the cutting edge of

00:12:20,160 --> 00:12:23,790
cassandra and not get behind because

00:12:21,930 --> 00:12:26,189
once you get behind it becomes very

00:12:23,790 --> 00:12:29,129
difficult to move forward and get caught

00:12:26,189 --> 00:12:30,870
up well at blue on the blue flood team

00:12:29,129 --> 00:12:33,870
we happen to be very early adopters of

00:12:30,870 --> 00:12:37,470
cql when we first we first released the

00:12:33,870 --> 00:12:40,350
code we were using cassandra 10 with the

00:12:37,470 --> 00:12:43,050
c ql too and as you may or may not know

00:12:40,350 --> 00:12:48,439
the difference between cql 2 and c ql

00:12:43,050 --> 00:12:50,939
three are huge not just semantically but

00:12:48,439 --> 00:12:53,309
syntactically as well there was some big

00:12:50,939 --> 00:12:55,230
differences there this made it hard for

00:12:53,309 --> 00:12:56,819
us to start taking advantage of the

00:12:55,230 --> 00:12:58,470
features in newer versions of cassandra

00:12:56,819 --> 00:13:00,179
and so we found that we had to swap out

00:12:58,470 --> 00:13:04,079
that database layer with a different one

00:13:00,179 --> 00:13:06,750
we ended up using a ste annex which is a

00:13:04,079 --> 00:13:08,579
client library provided by netflix that

00:13:06,750 --> 00:13:10,470
still use this drift so we haven't been

00:13:08,579 --> 00:13:12,839
able to take full advantage of cql

00:13:10,470 --> 00:13:14,610
version 3 yet but we definitely want to

00:13:12,839 --> 00:13:16,259
get to that point and it's allowed us to

00:13:14,610 --> 00:13:18,110
benefit from a lot of the new features

00:13:16,259 --> 00:13:20,670
that we see happening in Cassandra

00:13:18,110 --> 00:13:24,059
specifically the favor one that that

00:13:20,670 --> 00:13:26,459
I've been a most appreciative of is the

00:13:24,059 --> 00:13:28,030
way that Cassandra I believe is 1.2

00:13:26,459 --> 00:13:30,100
allows you to

00:13:28,030 --> 00:13:32,620
put certain column families on different

00:13:30,100 --> 00:13:35,170
mount points so for instance we have a

00:13:32,620 --> 00:13:37,600
full resolution a metrics column family

00:13:35,170 --> 00:13:40,290
that gets a lot of Rights that gets a

00:13:37,600 --> 00:13:43,000
lot of reeds and so we move that to SSD

00:13:40,290 --> 00:13:45,010
was able to benefit from the performance

00:13:43,000 --> 00:13:46,720
improvements but meanwhile we're able to

00:13:45,010 --> 00:13:48,790
keep all of our other column families

00:13:46,720 --> 00:13:52,360
which don't receive as much traffic on

00:13:48,790 --> 00:13:55,990
spinning disks so that was it saved us

00:13:52,360 --> 00:13:58,120
some money we're happy about that when

00:13:55,990 --> 00:14:01,180
we first released blue flood we did that

00:13:58,120 --> 00:14:04,030
without any API we used thrift

00:14:01,180 --> 00:14:05,890
internally to access the data and we

00:14:04,030 --> 00:14:08,860
didn't want to share that interface with

00:14:05,890 --> 00:14:12,070
the public because quite frankly it was

00:14:08,860 --> 00:14:14,650
a little embarrassing it it contains

00:14:12,070 --> 00:14:16,210
some internals into our cloud monitoring

00:14:14,650 --> 00:14:17,980
infrastructure that would have looked

00:14:16,210 --> 00:14:19,900
confusing to anybody you're looking at

00:14:17,980 --> 00:14:22,600
it from the outside and so we

00:14:19,900 --> 00:14:24,190
rationalize to ourself that if we just

00:14:22,600 --> 00:14:26,530
made it easy for other people to

00:14:24,190 --> 00:14:28,600
implement api's on top of blue flood

00:14:26,530 --> 00:14:30,550
that they would do it but this turned

00:14:28,600 --> 00:14:32,740
out to be a bad assumption for us and so

00:14:30,550 --> 00:14:35,350
it was a lesson that we learned people

00:14:32,740 --> 00:14:37,120
prefer to have self-contained systems if

00:14:35,350 --> 00:14:39,220
if they're going to install it they want

00:14:37,120 --> 00:14:42,550
an API to access it not to have to

00:14:39,220 --> 00:14:45,490
create an API themselves and so we spent

00:14:42,550 --> 00:14:47,920
some time we spent some time and created

00:14:45,490 --> 00:14:50,470
HTTP endpoints we have to reference

00:14:47,920 --> 00:14:52,660
endpoints right now you still have the

00:14:50,470 --> 00:14:56,950
ability to put in your own API endpoint

00:14:52,660 --> 00:15:00,010
but we have to http endpoints that you

00:14:56,950 --> 00:15:01,810
can use one is a synchronous that uses a

00:15:00,010 --> 00:15:03,670
traditional thread perk reaction model

00:15:01,810 --> 00:15:07,750
and the other is asynchronous which you

00:15:03,670 --> 00:15:09,700
can use for to exploit concurrency along

00:15:07,750 --> 00:15:11,910
those same lines we've improved the

00:15:09,700 --> 00:15:13,630
experience for multi tenant customers

00:15:11,910 --> 00:15:15,610
specifically we knew that we would have

00:15:13,630 --> 00:15:17,680
one huge customer which is Rackspace

00:15:15,610 --> 00:15:20,140
cloud monitoring who would be sending

00:15:17,680 --> 00:15:21,490
data in for lots of other tenants and we

00:15:20,140 --> 00:15:23,590
still had to respect that each of those

00:15:21,490 --> 00:15:27,340
tenants were different they may have

00:15:23,590 --> 00:15:29,470
different retention constraints they may

00:15:27,340 --> 00:15:32,280
have vastly different kinds of data that

00:15:29,470 --> 00:15:35,230
they send in and we we made that

00:15:32,280 --> 00:15:36,640
experience a lot better the controls

00:15:35,230 --> 00:15:38,500
that we've exposed for that will happen

00:15:36,640 --> 00:15:39,940
at the at the proxy layer which we

00:15:38,500 --> 00:15:42,460
encourage people to use if they're going

00:15:39,940 --> 00:15:44,680
to be sending data into blue flood

00:15:42,460 --> 00:15:46,360
we've also simplified how we manage the

00:15:44,680 --> 00:15:50,380
metadata that you can associate with a

00:15:46,360 --> 00:15:53,170
metric as I as I talked about before we

00:15:50,380 --> 00:15:56,020
are this is this happens via the search

00:15:53,170 --> 00:15:58,420
interface that we're adding previously

00:15:56,020 --> 00:16:00,940
we relied on this clunky internal API

00:15:58,420 --> 00:16:02,200
this I'm sorry this clunky internally

00:16:00,940 --> 00:16:03,910
interface that you would have to

00:16:02,200 --> 00:16:06,280
implement that would fetch metric made

00:16:03,910 --> 00:16:07,960
of data out of your external system we

00:16:06,280 --> 00:16:10,240
didn't support bringing it in with the

00:16:07,960 --> 00:16:11,980
metrics but we've decided we're going to

00:16:10,240 --> 00:16:14,050
make it simple so you can just send in

00:16:11,980 --> 00:16:16,030
all the metadata with your metrics will

00:16:14,050 --> 00:16:18,790
handle it and things will be just fine

00:16:16,030 --> 00:16:20,410
so we've simplified that problem it end

00:16:18,790 --> 00:16:22,900
up removing a lot of code making things

00:16:20,410 --> 00:16:25,990
easier to install we've added lots of

00:16:22,900 --> 00:16:28,120
other features too but our team is kind

00:16:25,990 --> 00:16:31,360
of small we have only three engineers

00:16:28,120 --> 00:16:33,790
and one operations person who well we

00:16:31,360 --> 00:16:36,160
developed blue flood for a lot of our

00:16:33,790 --> 00:16:37,840
time we're also tasked with managing a

00:16:36,160 --> 00:16:40,060
production cluster of blue flood and

00:16:37,840 --> 00:16:43,720
cassandra and making sure that we have

00:16:40,060 --> 00:16:46,360
good uptime there and so we haven't had

00:16:43,720 --> 00:16:49,030
quite the resources or the time to

00:16:46,360 --> 00:16:51,130
develop to develop the community of blue

00:16:49,030 --> 00:16:54,040
flood it's it's an open source project

00:16:51,130 --> 00:16:55,360
and open source projects thrive when

00:16:54,040 --> 00:16:57,430
there's a community and we realize that

00:16:55,360 --> 00:16:59,140
this is going to take time and this is

00:16:57,430 --> 00:17:01,870
going to this is going to take effort

00:16:59,140 --> 00:17:05,800
and this is something that as engineers

00:17:01,870 --> 00:17:07,570
we are not really good at is is a this

00:17:05,800 --> 00:17:09,160
is I think a perennial problem with with

00:17:07,570 --> 00:17:11,530
open source software and with engineers

00:17:09,160 --> 00:17:15,670
growing a community is the hard things

00:17:11,530 --> 00:17:17,890
is a hard thing so the fact that the

00:17:15,670 --> 00:17:20,650
fact that remains is blue LED is still a

00:17:17,890 --> 00:17:22,810
young project there are lots of problems

00:17:20,650 --> 00:17:24,610
that come with being such a young and

00:17:22,810 --> 00:17:27,400
immature project this is really easy to

00:17:24,610 --> 00:17:29,340
illustrate this is a picture of me it

00:17:27,400 --> 00:17:32,920
was taken I don't know two years ago

00:17:29,340 --> 00:17:34,420
obviously I'm an adult I'm dressed

00:17:32,920 --> 00:17:36,160
pretty sharply normally I'll walk around

00:17:34,420 --> 00:17:38,320
in a t-shirt and a pair of shorts but I

00:17:36,160 --> 00:17:41,980
I look sharp in this picture it's

00:17:38,320 --> 00:17:43,840
because I Know Who I am I know what I

00:17:41,980 --> 00:17:48,280
want to do and I know how to do it

00:17:43,840 --> 00:17:51,340
because I have experience now this is

00:17:48,280 --> 00:17:53,820
also a picture of me it's taken its okay

00:17:51,340 --> 00:17:56,440
to laugh it's okay go ahead get it out

00:17:53,820 --> 00:18:00,010
it's taken when I was 12 years old

00:17:56,440 --> 00:18:02,740
I was not very experienced I was

00:18:00,010 --> 00:18:06,220
definitely not confident and you're

00:18:02,740 --> 00:18:08,410
probably questioning my taste I've

00:18:06,220 --> 00:18:10,480
changed a lot over time I went through

00:18:08,410 --> 00:18:11,610
an awkward phase and I imagine a lot of

00:18:10,480 --> 00:18:14,620
you in here went through an awkward

00:18:11,610 --> 00:18:17,100
awkward phase as well because trust me

00:18:14,620 --> 00:18:20,560
you all weren't as cool as you are now

00:18:17,100 --> 00:18:23,860
this is the way it works software is

00:18:20,560 --> 00:18:25,990
that I was immature software's is the

00:18:23,860 --> 00:18:28,780
same way software has to be given a

00:18:25,990 --> 00:18:30,370
chance to grow up to think about some of

00:18:28,780 --> 00:18:33,070
the tools some of the software that

00:18:30,370 --> 00:18:35,920
you've been using for a long time was it

00:18:33,070 --> 00:18:38,020
always as good as it is now probably not

00:18:35,920 --> 00:18:40,600
hopefully it's changed and gotten better

00:18:38,020 --> 00:18:42,070
over time some of the systems that I

00:18:40,600 --> 00:18:43,540
have a lot of experience with one of

00:18:42,070 --> 00:18:46,030
them is Cassandra I first became

00:18:43,540 --> 00:18:49,570
involved with Cassandra between four and

00:18:46,030 --> 00:18:52,900
five years ago and at the time Cassandra

00:18:49,570 --> 00:18:55,630
didn't have indexes Cassandra didn't

00:18:52,900 --> 00:18:57,880
have caches no in-memory caches

00:18:55,630 --> 00:19:00,610
Cassandra did not have a query language

00:18:57,880 --> 00:19:03,010
and if you wanted to change the schema

00:19:00,610 --> 00:19:05,260
of your cassandra cluster you had to

00:19:03,010 --> 00:19:08,980
edit an xml file and then do a rolling

00:19:05,260 --> 00:19:10,720
restart of your whole cluster so if you

00:19:08,980 --> 00:19:12,250
were to take a look at cassandra today

00:19:10,720 --> 00:19:14,290
and it was missing those fourth for

00:19:12,250 --> 00:19:16,990
things you would think to yourself my

00:19:14,290 --> 00:19:20,410
goodness what a primitive tool i cannot

00:19:16,990 --> 00:19:23,080
use this stuff the fact is that software

00:19:20,410 --> 00:19:26,410
evolves and becomes better over time as

00:19:23,080 --> 00:19:30,820
it matures so we end up demanding more

00:19:26,410 --> 00:19:33,310
of it and relying on it more well how

00:19:30,820 --> 00:19:35,410
mature is blue flood i created a handy

00:19:33,310 --> 00:19:37,510
graph and at the left-hand side we have

00:19:35,410 --> 00:19:39,810
the twelve-year-old me and at the other

00:19:37,510 --> 00:19:42,040
side we have the very handsome adult me

00:19:39,810 --> 00:19:44,950
boo flood I think is right about here

00:19:42,040 --> 00:19:48,700
we're we're firmly on the immature side

00:19:44,950 --> 00:19:51,880
of software development good thing bad

00:19:48,700 --> 00:19:53,530
thing the biggest thing is that you

00:19:51,880 --> 00:19:55,750
definitely have an opportunity to help

00:19:53,530 --> 00:19:58,870
the code base for blue flood is

00:19:55,750 --> 00:20:00,550
relatively small we've taken some time

00:19:58,870 --> 00:20:03,220
to make it understandable we've divided

00:20:00,550 --> 00:20:06,670
up into modules that should be easy to

00:20:03,220 --> 00:20:09,220
understand independently and the core

00:20:06,670 --> 00:20:10,000
code base probably is a little bit to

00:20:09,220 --> 00:20:13,930
complicate

00:20:10,000 --> 00:20:16,390
did but the core contributors are active

00:20:13,930 --> 00:20:20,170
on IRC or active on our mailing list we

00:20:16,390 --> 00:20:23,080
are willing in and and happy to help out

00:20:20,170 --> 00:20:25,270
whenever we can there's a lot of

00:20:23,080 --> 00:20:27,670
potential I think to turn the corner a

00:20:25,270 --> 00:20:30,100
little bit in the metrics ecosystem in

00:20:27,670 --> 00:20:32,920
general blue flood is only part of a

00:20:30,100 --> 00:20:37,420
larger group of software we see from the

00:20:32,920 --> 00:20:39,700
open source world kyros DB we see open

00:20:37,420 --> 00:20:42,760
TS DB and on the commercial side we have

00:20:39,700 --> 00:20:46,300
some API providers like librado like

00:20:42,760 --> 00:20:49,000
tempo DB and there are others this is

00:20:46,300 --> 00:20:50,890
the whole environment is young they're

00:20:49,000 --> 00:20:53,650
just getting started if you look at

00:20:50,890 --> 00:20:55,630
where the metrics scene was 12 months

00:20:53,650 --> 00:20:58,180
ago versus what it is now you'll see a

00:20:55,630 --> 00:21:00,520
lot of growth and I expect continuing on

00:20:58,180 --> 00:21:01,990
for the next 12 months 24 months things

00:21:00,520 --> 00:21:04,420
are going to be looking completely

00:21:01,990 --> 00:21:07,210
different our software is advancing

00:21:04,420 --> 00:21:09,970
we're getting better quickly because the

00:21:07,210 --> 00:21:10,840
software is so immature I think it's

00:21:09,970 --> 00:21:13,030
really hard to predict the future

00:21:10,840 --> 00:21:15,250
there's a simple illustration for this I

00:21:13,030 --> 00:21:16,840
don't know when this was drawn but

00:21:15,250 --> 00:21:19,390
obviously the illustrator got a few

00:21:16,840 --> 00:21:21,520
things right and a few things wrong he

00:21:19,390 --> 00:21:23,080
knew that we'd be talking on devices but

00:21:21,520 --> 00:21:25,300
he didn't know how good the future would

00:21:23,080 --> 00:21:27,850
really be we're doing that right now on

00:21:25,300 --> 00:21:30,520
things like this so from that

00:21:27,850 --> 00:21:33,180
perspective the future is way better

00:21:30,520 --> 00:21:35,500
than he envisioned it on the other hand

00:21:33,180 --> 00:21:38,800
we're still not flying around our

00:21:35,500 --> 00:21:41,530
awesome awesome private airplanes so

00:21:38,800 --> 00:21:47,560
obviously the future is not as good as

00:21:41,530 --> 00:21:49,780
he expected it I think that we can get

00:21:47,560 --> 00:21:51,250
to a point with our metrics software and

00:21:49,780 --> 00:21:53,590
not talking just about blue flood I'm

00:21:51,250 --> 00:21:55,990
talking about the open source systems

00:21:53,590 --> 00:21:57,970
the external API of providers where we

00:21:55,990 --> 00:21:59,790
can be ingesting a million points per

00:21:57,970 --> 00:22:02,170
second per node that's currently

00:21:59,790 --> 00:22:04,270
probably an order of magnitude different

00:22:02,170 --> 00:22:07,660
from from what any system is capable of

00:22:04,270 --> 00:22:09,160
now the databases that we use can handle

00:22:07,660 --> 00:22:12,070
that and so I don't think there's any

00:22:09,160 --> 00:22:13,630
reason that the api api is or any of the

00:22:12,070 --> 00:22:15,910
open source software can't get to that

00:22:13,630 --> 00:22:18,250
point as well so i think that this is a

00:22:15,910 --> 00:22:20,530
goal that we could shoot for we're

00:22:18,250 --> 00:22:22,810
probably not very far from getting there

00:22:20,530 --> 00:22:23,950
there are some technical challenges I

00:22:22,810 --> 00:22:26,919
think there are some

00:22:23,950 --> 00:22:28,330
social challenges as well I think that

00:22:26,919 --> 00:22:32,409
we need to start thinking together more

00:22:28,330 --> 00:22:34,389
it's we see a lot of different projects

00:22:32,409 --> 00:22:36,610
coming along to solve very specific

00:22:34,389 --> 00:22:38,139
problems or general problems but too

00:22:36,610 --> 00:22:39,940
much work in this space goes on

00:22:38,139 --> 00:22:42,159
independently we need to put our heads

00:22:39,940 --> 00:22:44,110
together all it's going to take I think

00:22:42,159 --> 00:22:45,820
are a few champions in each project or

00:22:44,110 --> 00:22:47,919
champions at a few different communities

00:22:45,820 --> 00:22:49,570
who are willing to communicate and to

00:22:47,919 --> 00:22:51,370
collaborate and make this a better space

00:22:49,570 --> 00:22:53,260
in general I think that we could all

00:22:51,370 --> 00:22:55,659
benefit when our when our ideas start

00:22:53,260 --> 00:22:58,330
mixing together there are some things

00:22:55,659 --> 00:23:01,600
believe it or not that you can do right

00:22:58,330 --> 00:23:03,039
now to help get us there first off help

00:23:01,600 --> 00:23:05,049
us with our glaring lack of

00:23:03,039 --> 00:23:07,240
documentation this has always been a

00:23:05,049 --> 00:23:09,580
problem with open source software some

00:23:07,240 --> 00:23:12,250
projects do it well others I'd say most

00:23:09,580 --> 00:23:14,919
do it very poorly better documentation

00:23:12,250 --> 00:23:16,870
will enable a whole bunch of other

00:23:14,919 --> 00:23:18,429
improvements there's going to be better

00:23:16,870 --> 00:23:19,539
adoption because people are going to

00:23:18,429 --> 00:23:21,399
understand it when they have good

00:23:19,539 --> 00:23:23,200
references to go to it's going to help

00:23:21,399 --> 00:23:25,090
with the community because it's going to

00:23:23,200 --> 00:23:26,620
require people to work on the work on

00:23:25,090 --> 00:23:29,019
the documentation when people talk

00:23:26,620 --> 00:23:30,159
people solve problems it's going to help

00:23:29,019 --> 00:23:33,539
with the installation and configuration

00:23:30,159 --> 00:23:36,519
of the software anyone here use graphite

00:23:33,539 --> 00:23:38,889
yeah what thumbs up or thumbs down easy

00:23:36,519 --> 00:23:40,929
or hard to set up and get going be

00:23:38,889 --> 00:23:42,519
honest there we go okay there might have

00:23:40,929 --> 00:23:43,929
been a thumbs up I don't know I hope

00:23:42,519 --> 00:23:45,940
there are no graphite people like

00:23:43,929 --> 00:23:49,110
workers in here but it's still good

00:23:45,940 --> 00:23:51,490
software it's the best at what it does I

00:23:49,110 --> 00:23:53,529
would also invite you to give bluefly to

00:23:51,490 --> 00:23:56,049
try I have a personal barometer for

00:23:53,529 --> 00:23:57,970
software and that is if I can install it

00:23:56,049 --> 00:24:00,010
and get it running in 10 minutes I'll

00:23:57,970 --> 00:24:02,340
continue to give it a try but if not I'm

00:24:00,010 --> 00:24:05,260
going to walk away until I can do that

00:24:02,340 --> 00:24:07,240
blue flood may or may not be that kind

00:24:05,260 --> 00:24:09,700
of software for you we've taken some

00:24:07,240 --> 00:24:11,380
time to try and create a 10 minute guide

00:24:09,700 --> 00:24:13,240
that will get you there but if it

00:24:11,380 --> 00:24:15,340
doesn't and you walk away from blue

00:24:13,240 --> 00:24:17,350
flood that's fine but I would ask for

00:24:15,340 --> 00:24:19,029
you to let us know let us know where the

00:24:17,350 --> 00:24:21,039
pain points were for you so that we can

00:24:19,029 --> 00:24:22,960
make it better for the next person that

00:24:21,039 --> 00:24:25,450
would be that would help us even if you

00:24:22,960 --> 00:24:26,980
don't end up using it our goal is to

00:24:25,450 --> 00:24:28,659
make people happy and make good software

00:24:26,980 --> 00:24:30,610
for them so keep blue flare to try

00:24:28,659 --> 00:24:33,760
another thing you can do is contribute

00:24:30,610 --> 00:24:35,799
code as I said before it's modular it

00:24:33,760 --> 00:24:37,330
should be simple to understand and we

00:24:35,799 --> 00:24:37,910
want to help you we will make this

00:24:37,330 --> 00:24:42,110
happen if you

00:24:37,910 --> 00:24:44,030
want to use blue flood you can also make

00:24:42,110 --> 00:24:45,500
the tooling around blue flood better we

00:24:44,030 --> 00:24:47,690
haven't had the resources to devote a

00:24:45,500 --> 00:24:49,070
lot of time into this specifically one

00:24:47,690 --> 00:24:51,890
thing that I'd like to see is a load

00:24:49,070 --> 00:24:53,870
testing suite this will help us to know

00:24:51,890 --> 00:24:55,430
where blue flood eventually falls falls

00:24:53,870 --> 00:24:57,740
over and we expect that there is a place

00:24:55,430 --> 00:24:59,780
where it will fall over if you're good

00:24:57,740 --> 00:25:02,170
at making system packages for different

00:24:59,780 --> 00:25:04,790
operating systems help us out with that

00:25:02,170 --> 00:25:06,530
the installation and configuration is

00:25:04,790 --> 00:25:08,330
something that we know that our team

00:25:06,530 --> 00:25:11,240
won't get to for a long time we

00:25:08,330 --> 00:25:13,160
currently use chef to deploy and bundle

00:25:11,240 --> 00:25:14,810
blue flood and we're happy with that but

00:25:13,160 --> 00:25:16,430
I think that would help with the

00:25:14,810 --> 00:25:18,440
10-minute test if you were able just to

00:25:16,430 --> 00:25:22,010
apt-get install blue flood and be on

00:25:18,440 --> 00:25:23,630
your way we could also use help with

00:25:22,010 --> 00:25:28,430
integrating blue fled with with other

00:25:23,630 --> 00:25:30,260
tools and software's example if any of

00:25:28,430 --> 00:25:31,730
you program use Java and you use code

00:25:30,260 --> 00:25:34,220
'hail metrics well we could write an

00:25:31,730 --> 00:25:36,710
output a reporter that would get your

00:25:34,220 --> 00:25:39,470
data from Kota hell metrics into into

00:25:36,710 --> 00:25:41,870
blue flood to demonstrate how easy or

00:25:39,470 --> 00:25:43,820
maybe how hard it is to get blue flood

00:25:41,870 --> 00:25:46,490
integrated with some other software I

00:25:43,820 --> 00:25:49,430
just want to show you a few things we'll

00:25:46,490 --> 00:25:52,490
see how easy this is this is a a

00:25:49,430 --> 00:25:54,560
graphite web server that can everyone

00:25:52,490 --> 00:25:57,890
see that that is talking directly to

00:25:54,560 --> 00:26:01,520
blue flood there is no carbon demon

00:25:57,890 --> 00:26:03,710
there is no whisper database all there

00:26:01,520 --> 00:26:05,390
is is graphite web that's been slightly

00:26:03,710 --> 00:26:07,310
modified talking directly to the blue

00:26:05,390 --> 00:26:08,930
flood this makes it so that you can do

00:26:07,310 --> 00:26:11,360
some really cool things so for example

00:26:08,930 --> 00:26:13,670
in the green line here I'm charting the

00:26:11,360 --> 00:26:15,680
temperature in san antonio texas where I

00:26:13,670 --> 00:26:17,660
am from and in the blue line here I've

00:26:15,680 --> 00:26:19,910
been charting the weather in Berlin

00:26:17,660 --> 00:26:22,280
where I am at now this has just scraped

00:26:19,910 --> 00:26:24,320
off the internet from a public API as

00:26:22,280 --> 00:26:28,250
you can see the temperatures here are in

00:26:24,320 --> 00:26:31,250
Fahrenheit which I'm told only Americans

00:26:28,250 --> 00:26:32,990
use at least we drive on the right side

00:26:31,250 --> 00:26:39,170
of the road right any anyone from

00:26:32,990 --> 00:26:41,300
England in here yeah fix that ok so this

00:26:39,170 --> 00:26:43,010
so the fact that we're using graphite

00:26:41,300 --> 00:26:44,500
web lets us take advantage of a lot of

00:26:43,010 --> 00:26:47,030
the features of graphite web

00:26:44,500 --> 00:26:49,280
specifically I can call the ah I can

00:26:47,030 --> 00:26:52,540
convert this these Fahrenheit sin to

00:26:49,280 --> 00:26:54,830
Celsius is fairly easy there's an offset

00:26:52,540 --> 00:26:57,620
function and i'm going to say take away

00:26:54,830 --> 00:27:03,710
32 degrees and i'm going to say scale it

00:26:57,620 --> 00:27:07,610
by about that much which is 59 all of a

00:27:03,710 --> 00:27:10,970
sudden the berlin temperature disappears

00:27:07,610 --> 00:27:15,140
i forgot a parenthesis as you can tell

00:27:10,970 --> 00:27:16,520
i'm an excellent programmer ok and so

00:27:15,140 --> 00:27:24,430
there you see it i'll do the same thing

00:27:16,520 --> 00:27:24,430
to san antonio we call this copypasta

00:27:24,670 --> 00:27:30,080
sometimes it works it sounds it you

00:27:29,090 --> 00:27:36,710
don't know what you're copying or

00:27:30,080 --> 00:27:39,020
pasting there we go so now we have the

00:27:36,710 --> 00:27:40,220
same graph in Fahrenheit I have some

00:27:39,020 --> 00:27:43,040
other graphs in here that just shows

00:27:40,220 --> 00:27:45,470
some some different things this this

00:27:43,040 --> 00:27:48,890
this graph here shows how much warmer it

00:27:45,470 --> 00:27:51,200
is in San Antonio than Berlin so 20

00:27:48,890 --> 00:27:56,390
degrees Fahrenheit during some points of

00:27:51,200 --> 00:27:59,390
the day come from a hot place people so

00:27:56,390 --> 00:28:01,730
that's the demo the code that I used to

00:27:59,390 --> 00:28:04,580
have a graphite web talk to blue flood

00:28:01,730 --> 00:28:06,290
is only about 150 lines and it could use

00:28:04,580 --> 00:28:10,730
some improvement but it's just a

00:28:06,290 --> 00:28:12,500
demonstration at this this point some

00:28:10,730 --> 00:28:15,710
other some other integrations that we've

00:28:12,500 --> 00:28:17,840
done our with stats d stats t is a

00:28:15,710 --> 00:28:19,310
JavaScript application written in using

00:28:17,840 --> 00:28:20,840
the node.js framework and it gives you a

00:28:19,310 --> 00:28:23,210
common ingestion point that then lets

00:28:20,840 --> 00:28:24,830
you fan your data out there's support

00:28:23,210 --> 00:28:26,600
for different backends and we went ahead

00:28:24,830 --> 00:28:28,310
and created a blue fled back end and

00:28:26,600 --> 00:28:30,020
this is nice because it gives you the

00:28:28,310 --> 00:28:31,970
ability to try blue flood without

00:28:30,020 --> 00:28:33,680
changing your whole metrics pipeline all

00:28:31,970 --> 00:28:35,960
you do is add the configuration for blue

00:28:33,680 --> 00:28:37,760
flood and you should be off often going

00:28:35,960 --> 00:28:39,470
assuming we don't change our API

00:28:37,760 --> 00:28:41,000
endpoints or anything like that I've

00:28:39,470 --> 00:28:46,100
already demonstrated how we how we do

00:28:41,000 --> 00:28:48,140
that with with graphite so at some point

00:28:46,100 --> 00:28:51,140
we're going to know that we have

00:28:48,140 --> 00:28:53,780
succeeded and this is going to be when

00:28:51,140 --> 00:28:55,790
there's a community and not just a

00:28:53,780 --> 00:28:57,740
community around blue flood but a better

00:28:55,790 --> 00:28:59,350
and healthier and vibrant community

00:28:57,740 --> 00:29:01,340
around the metric space in general

00:28:59,350 --> 00:29:04,550
specifically the software is going to be

00:29:01,340 --> 00:29:05,630
easy to set up the technology is just

00:29:04,550 --> 00:29:07,310
going to be better because

00:29:05,630 --> 00:29:09,110
it will have matured it will have

00:29:07,310 --> 00:29:11,390
improved it's going to become super

00:29:09,110 --> 00:29:12,920
reliable it's going to be something that

00:29:11,390 --> 00:29:14,780
we think about but something that we

00:29:12,920 --> 00:29:16,310
don't worry about there will be less

00:29:14,780 --> 00:29:18,680
dependencies because the software will

00:29:16,310 --> 00:29:20,270
be capable of doing more things there

00:29:18,680 --> 00:29:23,450
are some things I think that will get in

00:29:20,270 --> 00:29:26,000
the way of us getting there what I see

00:29:23,450 --> 00:29:27,410
happening is as open source systems are

00:29:26,000 --> 00:29:29,900
starting to be bottlenecked by their

00:29:27,410 --> 00:29:32,180
databases think about it each of the

00:29:29,900 --> 00:29:34,460
time series open source times three

00:29:32,180 --> 00:29:37,130
systems uses a database to actually

00:29:34,460 --> 00:29:38,840
store the time series data there are

00:29:37,130 --> 00:29:40,970
some overhead they're just getting the

00:29:38,840 --> 00:29:42,320
data into a separate data system we've

00:29:40,970 --> 00:29:44,630
reached the point with cloud metrics

00:29:42,320 --> 00:29:46,790
that cassandra is our biggest bottleneck

00:29:44,630 --> 00:29:48,880
and so there's several different ways

00:29:46,790 --> 00:29:51,440
that this could be solved in the future

00:29:48,880 --> 00:29:53,840
but this goes to speak of the immaturity

00:29:51,440 --> 00:29:56,150
of the holes hold metrics seen in

00:29:53,840 --> 00:29:59,000
general this is almost a benefit though

00:29:56,150 --> 00:30:01,220
because the fact that this that the the

00:29:59,000 --> 00:30:03,140
scene is so immature means that we're

00:30:01,220 --> 00:30:05,720
going to be able to improve it quickly

00:30:03,140 --> 00:30:08,420
that's great many of the problems that

00:30:05,720 --> 00:30:10,460
we have in the metrics scene are not

00:30:08,420 --> 00:30:12,230
technical there are problems that can be

00:30:10,460 --> 00:30:15,560
solved with a better community with

00:30:12,230 --> 00:30:18,320
people working together so where do we

00:30:15,560 --> 00:30:21,260
go from here when you think about it

00:30:18,320 --> 00:30:24,260
metric systems like blue flood or kyros

00:30:21,260 --> 00:30:26,000
or open STS DB or just a means to an end

00:30:24,260 --> 00:30:28,220
you use them either for getting pretty

00:30:26,000 --> 00:30:30,350
graphs or use them for feeding Hadoop

00:30:28,220 --> 00:30:32,420
clusters that you do different kinds of

00:30:30,350 --> 00:30:34,430
intelligence and analysis with and if

00:30:32,420 --> 00:30:36,110
you've ever used these systems you know

00:30:34,430 --> 00:30:38,150
that we're just scratching the tip when

00:30:36,110 --> 00:30:40,010
it comes to efficiency Hadoop is a

00:30:38,150 --> 00:30:42,590
general solution and it's not

00:30:40,010 --> 00:30:44,540
necessarily very efficient in English we

00:30:42,590 --> 00:30:46,730
have a figure of speech that when your

00:30:44,540 --> 00:30:48,790
only tool is a hammer everything that

00:30:46,730 --> 00:30:51,230
needs to be fixed looks like a nail

00:30:48,790 --> 00:30:52,910
likewise I've heard it said of Hadoop

00:30:51,230 --> 00:30:54,800
that when all you have is a Hadoop

00:30:52,910 --> 00:30:57,530
cluster everything looks like a

00:30:54,800 --> 00:30:59,690
MapReduce job we've got to be smarter

00:30:57,530 --> 00:31:01,970
with how we do analytics on our data

00:30:59,690 --> 00:31:04,130
we've waited years for our data stores

00:31:01,970 --> 00:31:06,380
to get here and now they're finally here

00:31:04,130 --> 00:31:08,630
we can't squander this opportunity to

00:31:06,380 --> 00:31:10,250
make some awesome systems there's lots

00:31:08,630 --> 00:31:12,620
of work to do all you have to do is

00:31:10,250 --> 00:31:14,690
start pitching in writing code working

00:31:12,620 --> 00:31:16,790
on documentation it doesn't have to be

00:31:14,690 --> 00:31:18,260
this project it can be any project we're

00:31:16,790 --> 00:31:19,279
all going to benefit when we start

00:31:18,260 --> 00:31:22,529
getting better

00:31:19,279 --> 00:31:23,669
if we execute well enough we're going to

00:31:22,529 --> 00:31:26,249
be riding around in those freaking

00:31:23,669 --> 00:31:27,119
airplanes driving around talking on our

00:31:26,249 --> 00:31:29,220
phones it's going to be an awesome

00:31:27,119 --> 00:31:31,860
awesome place I think in the future

00:31:29,220 --> 00:31:34,139
there's a native distributed time series

00:31:31,860 --> 00:31:35,879
data store there's lots of optimizations

00:31:34,139 --> 00:31:37,919
that you can do when you know that your

00:31:35,879 --> 00:31:39,090
data is going to be a pent only when you

00:31:37,919 --> 00:31:41,100
know that it's going to be arriving

00:31:39,090 --> 00:31:42,779
mostly in order and when you know that

00:31:41,100 --> 00:31:44,759
most of it's going to be expiring all at

00:31:42,779 --> 00:31:46,409
once with my experience with Cassandra

00:31:44,759 --> 00:31:48,539
happened to be a committer I know that a

00:31:46,409 --> 00:31:49,529
lot of operations would be a lot simpler

00:31:48,539 --> 00:31:51,899
if you knew that you were only going to

00:31:49,529 --> 00:31:54,649
be dealing with range queries and you

00:31:51,899 --> 00:31:56,309
could collect tombstones in bulk

00:31:54,649 --> 00:31:58,609
multi-tenant systems will be a little

00:31:56,309 --> 00:32:02,340
bit harder but we'll tackle that problem

00:31:58,609 --> 00:32:04,230
what if kyros open s TS DB and all those

00:32:02,340 --> 00:32:08,070
other databases and API providers

00:32:04,230 --> 00:32:09,450
adopted a common API it would help the

00:32:08,070 --> 00:32:10,769
community because there wouldn't be so

00:32:09,450 --> 00:32:13,080
much problems with switching between

00:32:10,769 --> 00:32:15,239
different vendors or implementations and

00:32:13,080 --> 00:32:17,070
we would all benefit from speaking the

00:32:15,239 --> 00:32:19,200
same language those are two things that

00:32:17,070 --> 00:32:20,580
I would love to see that I think we

00:32:19,200 --> 00:32:22,859
should we should definitely shoot for

00:32:20,580 --> 00:32:25,559
the time series community the time

00:32:22,859 --> 00:32:27,419
series database community needs to start

00:32:25,559 --> 00:32:30,869
working together sharing our success

00:32:27,419 --> 00:32:34,489
stories d duplicating our own effort we

00:32:30,869 --> 00:32:36,779
solve the same problems multiple times

00:32:34,489 --> 00:32:38,369
thank you for your time I wanted to

00:32:36,779 --> 00:32:39,929
point out just a few other presentations

00:32:38,369 --> 00:32:41,820
eric evans is going to give a time

00:32:39,929 --> 00:32:43,889
series database presentation tomorrow

00:32:41,820 --> 00:32:45,389
and if you're interested in data

00:32:43,889 --> 00:32:46,499
modeling on Cassandra i'm sure they're

00:32:45,389 --> 00:32:48,299
going to talk about time series data

00:32:46,499 --> 00:32:51,239
that's going to happen tomorrow

00:32:48,299 --> 00:32:52,679
afternoon as well but thanks for your

00:32:51,239 --> 00:32:55,580
time everybody I think we might have a

00:32:52,679 --> 00:32:55,580
minute or two for questions

00:33:08,070 --> 00:33:12,279
in dealing with time series data

00:33:10,240 --> 00:33:13,929
particularly with matrix you showed a

00:33:12,279 --> 00:33:15,940
lot of numbers which show throughput and

00:33:13,929 --> 00:33:17,409
your targeted numbers with throughput

00:33:15,940 --> 00:33:20,999
what are the latency is your targeting

00:33:17,409 --> 00:33:24,129
it with those through words on our our

00:33:20,999 --> 00:33:25,990
right lane Cesar obviously lower we want

00:33:24,129 --> 00:33:27,759
to keep things with underneath

00:33:25,990 --> 00:33:28,840
underneath five seconds because anything

00:33:27,759 --> 00:33:31,539
bigger than that it's going to be just

00:33:28,840 --> 00:33:32,710
unacceptable reads we can tolerate a

00:33:31,539 --> 00:33:34,330
little bit more because we know that

00:33:32,710 --> 00:33:36,759
we're reading a finite number of data

00:33:34,330 --> 00:33:38,350
points I don't I can't recall numbers

00:33:36,759 --> 00:33:39,909
off the top of my head what performance

00:33:38,350 --> 00:33:41,830
are Cassandra cluster is doing now but

00:33:39,909 --> 00:33:43,720
it's within acceptable parameters for us

00:33:41,830 --> 00:33:45,039
and the people who consume our graphs

00:33:43,720 --> 00:33:46,779
because we would hear complaints from

00:33:45,039 --> 00:33:49,330
them is it an expedition to have real

00:33:46,779 --> 00:33:50,830
time graphs coming in like what's real

00:33:49,330 --> 00:33:52,779
time for you five seconds you said is

00:33:50,830 --> 00:33:54,279
right so real time must be more than

00:33:52,779 --> 00:33:57,730
that so what's your words are acceptable

00:33:54,279 --> 00:33:59,320
limit for your time I would say it

00:33:57,730 --> 00:34:01,330
depends on how many how many grafts are

00:33:59,320 --> 00:34:03,490
pulling data in front but if you can get

00:34:01,330 --> 00:34:06,100
one graph in less than half a second or

00:34:03,490 --> 00:34:07,690
even faster that's probably fine if

00:34:06,100 --> 00:34:09,429
you've used graphite you realize once

00:34:07,690 --> 00:34:13,119
you get a certain amount of data and you

00:34:09,429 --> 00:34:14,349
have 15 or 20 graphs if it crawls this

00:34:13,119 --> 00:34:16,119
is one of the things that blue floods

00:34:14,349 --> 00:34:17,710
actually good at and why we think that

00:34:16,119 --> 00:34:19,299
it's going to be fun to have it talking

00:34:17,710 --> 00:34:23,260
directly or to have graphite talking

00:34:19,299 --> 00:34:24,970
directly to it let's look like one more

00:34:23,260 --> 00:34:26,649
thing how close are you guys with the

00:34:24,970 --> 00:34:28,569
OpenStack teams and is there any

00:34:26,649 --> 00:34:30,990
integration point looking for the future

00:34:28,569 --> 00:34:33,639
so OpenStack has a salamat er API and

00:34:30,990 --> 00:34:36,280
they're mostly focused on dealing with

00:34:33,639 --> 00:34:38,950
events and not necessarily time series

00:34:36,280 --> 00:34:40,359
data and so we're aware of what they're

00:34:38,950 --> 00:34:41,940
doing and we're monitoring what they're

00:34:40,359 --> 00:34:44,649
doing and if there's ever a way to

00:34:41,940 --> 00:34:46,329
either put the projects together or to

00:34:44,649 --> 00:34:48,839
make sure we support their API will end

00:34:46,329 --> 00:34:48,839
up doing that

00:34:57,970 --> 00:35:01,910
the first part is I have to say I don't

00:35:00,110 --> 00:35:03,680
know much about your blue flat by we are

00:35:01,910 --> 00:35:04,940
using kayo sleepy so how do you distinct

00:35:03,680 --> 00:35:06,830
your self except for example

00:35:04,940 --> 00:35:09,590
multi-tenancy in terms of storage

00:35:06,830 --> 00:35:12,470
efficiency and speed so if i recall

00:35:09,590 --> 00:35:16,130
kyros DB there is a single column family

00:35:12,470 --> 00:35:18,050
for metrics data we split roll-ups up

00:35:16,130 --> 00:35:20,030
into their own column families and so

00:35:18,050 --> 00:35:25,130
that's one key difference is is the data

00:35:20,030 --> 00:35:28,130
store are you referring to open st open

00:35:25,130 --> 00:35:31,970
TS DB or kyros I'm sorry ok kyros at

00:35:28,130 --> 00:35:34,340
first only supported HBase if I remember

00:35:31,970 --> 00:35:36,020
correctly and and we we've always used

00:35:34,340 --> 00:35:37,520
Cassandra and so it was important for us

00:35:36,020 --> 00:35:39,520
to be able to use Cassandra so that's

00:35:37,520 --> 00:35:42,200
one reason we kind of didn't didn't

00:35:39,520 --> 00:35:43,220
start working with them earlier on but I

00:35:42,200 --> 00:35:47,450
know that I know that they support

00:35:43,220 --> 00:35:49,850
Cassandra now though that's about it i

00:35:47,450 --> 00:35:53,740
mean that's as bad as familiar as i can

00:35:49,850 --> 00:35:53,740
can go off the top of my head sorry

00:35:55,060 --> 00:35:59,080
great thanks for your time everybody

00:36:02,140 --> 00:36:04,200

YouTube URL: https://www.youtube.com/watch?v=NmZTdWzX5v8


