Title: Berlin Buzzwords 2014: Florian Pfeiffer - Scalable Continuous Delivery with Scala on Mesos&Marathon
Publication date: 2014-05-28
Playlist: Berlin Buzzwords 2014 #bbuzz
Description: 
	At one point a big blob of PHP doesn't fit your needs anymore. In this session you will hear everything about the pain we had at gutefrage.net when we decided to move from a monolithic php application to a service orientated scala/finagle infrastructure. 

You'll hear about our great idea to scale with VMs on our private cloud and you'll hear why we realized that this idea was crap. But you will also see how we've moved from VMs to Mesos&Marathon and how we now manage to get our stuff on production in a fully automated continuous delivery environment.

Read more:
https://2014.berlinbuzzwords.de/session/scalable-continuous-delivery-scala-mesosmarathon

About Florian Pfeiffer:
https://2014.berlinbuzzwords.de/user/310/event/1

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:06,790 --> 00:00:15,019
virtualization is dead that might be a

00:00:11,930 --> 00:00:17,270
little bit an acceleration but yeah

00:00:15,019 --> 00:00:22,099
let's see at the end how much truth

00:00:17,270 --> 00:00:24,829
there's in this sentence so let me back

00:00:22,099 --> 00:00:26,270
you let me take you back to the time for

00:00:24,829 --> 00:00:32,149
the internet was still black and white

00:00:26,270 --> 00:00:34,520
so actually not to 99 but to 2006 when

00:00:32,149 --> 00:00:38,570
our company was was still a little

00:00:34,520 --> 00:00:40,640
startup and yeah we did what most

00:00:38,570 --> 00:00:45,470
startups are doing we build an

00:00:40,640 --> 00:00:48,440
application and it was a small PHP

00:00:45,470 --> 00:00:51,800
application back then I mean we didn't

00:00:48,440 --> 00:00:56,660
have much traffic and yeah scaling

00:00:51,800 --> 00:01:01,430
wasn't important it was just yeah a

00:00:56,660 --> 00:01:05,649
small PHP application and luckily we had

00:01:01,430 --> 00:01:08,780
some success so we got some traffic and

00:01:05,649 --> 00:01:11,630
then you come to the point where you

00:01:08,780 --> 00:01:14,930
need to scale and what are you doing

00:01:11,630 --> 00:01:19,090
with PHP and scaling yeah you just put

00:01:14,930 --> 00:01:23,060
some more yeah more machines to them and

00:01:19,090 --> 00:01:27,400
in this set up with four machines it's

00:01:23,060 --> 00:01:30,530
still fine because you don't you don't I

00:01:27,400 --> 00:01:32,750
have to take care about yet a deployment

00:01:30,530 --> 00:01:36,369
process I mean we did back then with an

00:01:32,750 --> 00:01:43,549
svn app on each machine so it was yeah

00:01:36,369 --> 00:01:45,619
life was kind of easy and but then you

00:01:43,549 --> 00:01:50,510
get more traffic and you have to scale

00:01:45,619 --> 00:01:54,320
again so on and from someone you will

00:01:50,510 --> 00:01:57,950
reach this and then you're thinking

00:01:54,320 --> 00:02:01,610
about okay now deployment isn't that

00:01:57,950 --> 00:02:04,909
cool anymore bye bye doing SSH into the

00:02:01,610 --> 00:02:08,030
machines and and doing an svn up you are

00:02:04,909 --> 00:02:09,769
you're thinking about okay maybe you

00:02:08,030 --> 00:02:12,620
should now start to use something like

00:02:09,769 --> 00:02:16,939
chef or puppet for for taking care of

00:02:12,620 --> 00:02:19,040
the machines and we decided to use chef

00:02:16,939 --> 00:02:22,670
for whatever reason

00:02:19,040 --> 00:02:25,909
not sure and we decided to use

00:02:22,670 --> 00:02:32,750
Capistrano for deployments so life was

00:02:25,909 --> 00:02:35,930
better now somehow and then we came to

00:02:32,750 --> 00:02:38,569
the point where we had about 100 million

00:02:35,930 --> 00:02:43,069
unique users a month so we are thinking

00:02:38,569 --> 00:02:45,590
out again about okay what now I mean PHP

00:02:43,069 --> 00:02:51,319
isn't that scalable unless you're

00:02:45,590 --> 00:02:57,560
Facebook and yeah what what can we do

00:02:51,319 --> 00:03:00,650
now and an idea that that came up yeah

00:02:57,560 --> 00:03:05,209
let's let's do it and a service

00:03:00,650 --> 00:03:09,290
orientated raid so we thought about yeah

00:03:05,209 --> 00:03:12,099
why why should we split up this big PHP

00:03:09,290 --> 00:03:14,870
application with which we deployed the

00:03:12,099 --> 00:03:19,359
where we deployed the whole application

00:03:14,870 --> 00:03:22,639
on each machine and we couldn't scale it

00:03:19,359 --> 00:03:27,290
enough more fine granulated way why

00:03:22,639 --> 00:03:33,109
don't we split it up and so so we did it

00:03:27,290 --> 00:03:37,090
and this is now a small example of how

00:03:33,109 --> 00:03:41,419
it might look forces quite simply cated

00:03:37,090 --> 00:03:44,569
simplified and we are a question-answer

00:03:41,419 --> 00:03:47,180
platform so of course we have a question

00:03:44,569 --> 00:03:49,099
service and an answer service and a user

00:03:47,180 --> 00:03:51,440
service so these are these are the

00:03:49,099 --> 00:03:55,760
domain model the entities we are using

00:03:51,440 --> 00:03:58,099
and we still have PHP and a frontal so

00:03:55,760 --> 00:04:02,239
because we didn't want to do a big bang

00:03:58,099 --> 00:04:06,500
migration so we just slowly carving out

00:04:02,239 --> 00:04:09,859
the stuff of our PHP application and

00:04:06,500 --> 00:04:12,620
when we are finished in about one year

00:04:09,859 --> 00:04:15,650
maybe we can even throw a later the old

00:04:12,620 --> 00:04:19,340
PHP front end and can do something like

00:04:15,650 --> 00:04:23,000
play on Scala as a front end for our

00:04:19,340 --> 00:04:26,599
services and with this kind of

00:04:23,000 --> 00:04:30,910
architecture we now can can take a

00:04:26,599 --> 00:04:33,430
simple a single service and

00:04:30,910 --> 00:04:37,150
set up an instance of the service so

00:04:33,430 --> 00:04:39,550
yeah now we have one service but one

00:04:37,150 --> 00:04:42,970
service isn't or one instance of the

00:04:39,550 --> 00:04:46,450
service isn't enough because yeah it's

00:04:42,970 --> 00:04:49,300
not H a so you might want to have to

00:04:46,450 --> 00:04:52,000
service or two instances and if you're

00:04:49,300 --> 00:04:54,580
doing something like like and can

00:04:52,000 --> 00:04:59,020
redeployment where you are having tests

00:04:54,580 --> 00:05:01,690
and senses with live traffic you might

00:04:59,020 --> 00:05:05,620
want to have even a third instance but

00:05:01,690 --> 00:05:10,510
yeah that's you can scale it as much as

00:05:05,620 --> 00:05:12,610
you like and the question else okay

00:05:10,510 --> 00:05:17,020
where where should we run the services I

00:05:12,610 --> 00:05:23,080
mean the obvious ideas ok let's go cloud

00:05:17,020 --> 00:05:25,060
and who of you is using ec2 instances ok

00:05:23,080 --> 00:05:31,390
so who is using something like a private

00:05:25,060 --> 00:05:35,200
cloud on on vm there ok so yeah we

00:05:31,390 --> 00:05:40,090
choose or Charles VMware because the

00:05:35,200 --> 00:05:42,550
German data privacy loss it's it's

00:05:40,090 --> 00:05:44,920
always better to have our the sensible

00:05:42,550 --> 00:05:49,690
data on our premise so we built

00:05:44,920 --> 00:05:52,050
something like a private cloud and we we

00:05:49,690 --> 00:05:56,020
came up with this kind of solution so we

00:05:52,050 --> 00:05:59,080
somehow integrated chef into vml so that

00:05:56,020 --> 00:06:01,330
with a singer but the knife at the

00:05:59,080 --> 00:06:04,390
command line tune of chef we could start

00:06:01,330 --> 00:06:08,890
easily a new instance on our vmware

00:06:04,390 --> 00:06:12,310
cluster and and assigned roles on on

00:06:08,890 --> 00:06:14,830
this new machine so with this single

00:06:12,310 --> 00:06:16,780
command everything was what happened in

00:06:14,830 --> 00:06:19,380
the background was ok well now we set

00:06:16,780 --> 00:06:23,140
them a pixie pre-boot environment and

00:06:19,380 --> 00:06:26,770
then the command line tool creates the

00:06:23,140 --> 00:06:30,190
vm and the vm boots gets data from the

00:06:26,770 --> 00:06:33,850
pixie server installs the operating

00:06:30,190 --> 00:06:35,860
system and then chef kicks in and starts

00:06:33,850 --> 00:06:38,470
the application or install certification

00:06:35,860 --> 00:06:40,690
and and everything is fine because then

00:06:38,470 --> 00:06:44,800
our service which is just based on

00:06:40,690 --> 00:06:48,759
finagle announces have fun zookeeper

00:06:44,800 --> 00:06:52,180
and everything is done so but with this

00:06:48,759 --> 00:06:53,919
kind of setup it was like if someone

00:06:52,180 --> 00:06:56,229
from from the development team came and

00:06:53,919 --> 00:06:59,500
like air we need a new service it was

00:06:56,229 --> 00:07:01,930
like like a one command line or one

00:06:59,500 --> 00:07:04,330
command that set up the whole

00:07:01,930 --> 00:07:07,330
infrastructure so we we put some more

00:07:04,330 --> 00:07:11,500
stuff into it like create a Champions

00:07:07,330 --> 00:07:13,389
environment do do a confluence entry

00:07:11,500 --> 00:07:18,520
with all the information about this kind

00:07:13,389 --> 00:07:20,830
of service start three instances and do

00:07:18,520 --> 00:07:23,770
do everything you need so a new service

00:07:20,830 --> 00:07:27,909
was like it took five minutes to for us

00:07:23,770 --> 00:07:32,860
to set everything up and okay this was

00:07:27,909 --> 00:07:37,719
kind of okay now so we could lean back

00:07:32,860 --> 00:07:39,969
and enjoy life but you have some you

00:07:37,719 --> 00:07:46,560
have some some downsides with this is

00:07:39,969 --> 00:07:51,120
kind of of VMs and here free of them and

00:07:46,560 --> 00:07:55,479
the first thing is the hypervisor and it

00:07:51,120 --> 00:07:58,979
doesn't add so much overhead to two-year

00:07:55,479 --> 00:08:01,779
to your VMS but it's notable so like

00:07:58,979 --> 00:08:03,699
depending on which which artist readers

00:08:01,779 --> 00:08:08,520
like three to five percent of overhead

00:08:03,699 --> 00:08:14,169
and yeah of course it's let him see you

00:08:08,520 --> 00:08:17,590
didn't want or don't want and another

00:08:14,169 --> 00:08:22,240
point administration so normally you

00:08:17,590 --> 00:08:24,550
want to keep it simple and we are aiming

00:08:22,240 --> 00:08:27,250
to have someone like like about 100

00:08:24,550 --> 00:08:29,169
services if you multiply it by 3 because

00:08:27,250 --> 00:08:31,599
that's the the lowest number of

00:08:29,169 --> 00:08:35,500
instances we have per service we will

00:08:31,599 --> 00:08:38,050
end up someone with about 300 VMs and we

00:08:35,500 --> 00:08:41,500
have to manage it somehow it's it's

00:08:38,050 --> 00:08:45,850
quite fine with the chef but still you

00:08:41,500 --> 00:08:51,040
have 300 machines where you should do

00:08:45,850 --> 00:08:54,760
monitoring and yeah that's that's not so

00:08:51,040 --> 00:08:58,540
great and another pointers is cost

00:08:54,760 --> 00:09:02,680
because either you you're paying

00:08:58,540 --> 00:09:04,870
easy two for the instances or you have

00:09:02,680 --> 00:09:09,730
to pay vmware the license costs which

00:09:04,870 --> 00:09:15,780
are ya both isn't that great so what

00:09:09,730 --> 00:09:15,780
comes to the rescue missiles yes and

00:09:16,230 --> 00:09:36,010
have a have a short time to read it now

00:09:33,370 --> 00:09:41,970
you know what what they say what Maysles

00:09:36,010 --> 00:09:44,830
is but yeah basically it's just an a

00:09:41,970 --> 00:09:47,620
system where where slave says yeah here

00:09:44,830 --> 00:09:50,260
i have 10 CPUs and this amount of ram

00:09:47,620 --> 00:09:53,910
and then you have frameworks which can

00:09:50,260 --> 00:09:56,380
request those resources so a service as

00:09:53,910 --> 00:09:59,050
request from from air some some

00:09:56,380 --> 00:10:02,320
resources I need one cpu where can I run

00:09:59,050 --> 00:10:06,340
and then means of mass at hazard yeah

00:10:02,320 --> 00:10:08,620
here run on this machine so that's

00:10:06,340 --> 00:10:14,170
that's the theory but but I will tell

00:10:08,620 --> 00:10:19,390
you why why I love it what'swhat's why

00:10:14,170 --> 00:10:23,020
it has really yeah enlightened our days

00:10:19,390 --> 00:10:25,270
at work and before I can't that I will

00:10:23,020 --> 00:10:29,710
tell you a little bit about the history

00:10:25,270 --> 00:10:33,700
of of mazes so it's inspired by Google

00:10:29,710 --> 00:10:41,500
Borg which Google is using for for their

00:10:33,700 --> 00:10:44,170
classes and then this this idea was was

00:10:41,500 --> 00:10:47,910
developed in at UC Berkeley and the red

00:10:44,170 --> 00:10:52,440
labs we're also spark comes from and

00:10:47,910 --> 00:10:55,240
some some companies then adopted and and

00:10:52,440 --> 00:10:58,060
developed it further so you might know

00:10:55,240 --> 00:11:02,410
this company and they are using it for

00:10:58,060 --> 00:11:06,130
for some kind of request response type

00:11:02,410 --> 00:11:11,620
of applications like yeah services like

00:11:06,130 --> 00:11:12,339
we are using it and you might also know

00:11:11,620 --> 00:11:15,040
this company

00:11:12,339 --> 00:11:18,610
they're using it primarily for for batch

00:11:15,040 --> 00:11:21,939
jobs like running Hadoop or or spark on

00:11:18,610 --> 00:11:24,569
on a Meadows cluster and another

00:11:21,939 --> 00:11:27,639
interesting interesting thing is that

00:11:24,569 --> 00:11:31,360
twitter is using it on on bare metal

00:11:27,639 --> 00:11:34,980
machines and our B&B is using it on on

00:11:31,360 --> 00:11:39,480
ec2 instances so it doesn't have to be

00:11:34,980 --> 00:11:42,699
mutually exclusive you you can even run

00:11:39,480 --> 00:11:46,930
mezzos on on VMS if you if you want to

00:11:42,699 --> 00:11:51,670
have the advantage of of this cluster

00:11:46,930 --> 00:11:53,920
management and there's quite a lot of

00:11:51,670 --> 00:11:57,550
things that can run on meses currently

00:11:53,920 --> 00:12:02,139
so this is just a short overview of the

00:11:57,550 --> 00:12:06,189
current ecosystem and you might have

00:12:02,139 --> 00:12:08,620
seen this but I won't talk about it

00:12:06,189 --> 00:12:13,749
sorry to disappoint you I will talk

00:12:08,620 --> 00:12:16,600
about Chronos and marathon and let's

00:12:13,749 --> 00:12:20,259
start with coronas so Cronus if you if

00:12:16,600 --> 00:12:23,100
you're taking the basic linux system

00:12:20,259 --> 00:12:27,009
Kronos as a replacement for foreign

00:12:23,100 --> 00:12:31,449
Omicron demon so you can run

00:12:27,009 --> 00:12:35,589
periodically tasks and the the nice

00:12:31,449 --> 00:12:38,829
thing with Cronus's you have tolerance

00:12:35,589 --> 00:12:41,920
so you can run it in and then h a mode

00:12:38,829 --> 00:12:44,790
and the the coronal's master can just

00:12:41,920 --> 00:12:47,920
died and another one takes over so

00:12:44,790 --> 00:12:51,069
Cronus also takes care of of the

00:12:47,920 --> 00:12:53,829
distribution of your tasks so it asks

00:12:51,069 --> 00:12:57,550
mrs. yeah where can I run this kind of

00:12:53,829 --> 00:12:59,620
of job and mazal cells yet run on this

00:12:57,550 --> 00:13:01,480
machine so you don't have to take care

00:12:59,620 --> 00:13:04,749
about like if you're using the old style

00:13:01,480 --> 00:13:10,769
cron this task only ones on this machine

00:13:04,749 --> 00:13:14,970
and yeah whatever it's chrono stores

00:13:10,769 --> 00:13:18,370
order the state data in zookeeper so

00:13:14,970 --> 00:13:23,250
even yeah for example if the master dies

00:13:18,370 --> 00:13:25,660
and another takes over the data gets

00:13:23,250 --> 00:13:29,530
repack from

00:13:25,660 --> 00:13:31,360
from zookeeper another thing now so

00:13:29,530 --> 00:13:34,030
these are the interesting things that

00:13:31,360 --> 00:13:39,880
the next things are nice to have I would

00:13:34,030 --> 00:13:45,400
say and you have dependencies so in an

00:13:39,880 --> 00:13:47,470
ETL job you can say yet this job should

00:13:45,400 --> 00:13:49,360
run only if the other one is

00:13:47,470 --> 00:13:53,640
successfully or has successfully

00:13:49,360 --> 00:13:56,530
finished you have nice statistics and

00:13:53,640 --> 00:13:58,600
they don't give just average run times

00:13:56,530 --> 00:14:02,770
because yeah we all know averages sucks

00:13:58,600 --> 00:14:08,110
and they give % eyes so you can see how

00:14:02,770 --> 00:14:10,150
long you chop taking or some if there's

00:14:08,110 --> 00:14:13,500
some something bad on your classif if a

00:14:10,150 --> 00:14:16,270
chop takes long a little bit and

00:14:13,500 --> 00:14:20,500
something you don't have in your normal

00:14:16,270 --> 00:14:22,900
cron demon is also a resolution below

00:14:20,500 --> 00:14:25,870
one minute so you can schedule jobs for

00:14:22,900 --> 00:14:30,580
like running every second or 10 seconds

00:14:25,870 --> 00:14:32,830
and we are using toronto's for our ETA

00:14:30,580 --> 00:14:37,300
job so we run some cascading or scaling

00:14:32,830 --> 00:14:39,250
chops on on Kronos and that was other

00:14:37,300 --> 00:14:42,630
interesting thing in the mezzos

00:14:39,250 --> 00:14:46,210
ecosystem is marathon and marathon is

00:14:42,630 --> 00:14:51,940
basically your control panel to get your

00:14:46,210 --> 00:14:55,630
chops running you can you can put their

00:14:51,940 --> 00:14:57,700
your application you providin and uri

00:14:55,630 --> 00:15:00,490
where yah where your application can be

00:14:57,700 --> 00:15:03,280
downloaded and you say okay i want to

00:15:00,490 --> 00:15:09,730
have ten instances of of this

00:15:03,280 --> 00:15:15,460
application i want to cpu spins per

00:15:09,730 --> 00:15:17,980
instance and 1 gig of ram and there's

00:15:15,460 --> 00:15:22,750
another yeah new new kid on the block

00:15:17,980 --> 00:15:27,670
which is quite cool stalker and measles

00:15:22,750 --> 00:15:31,960
can or marathon can easily run docker

00:15:27,670 --> 00:15:36,510
containers on on your marathon or your

00:15:31,960 --> 00:15:39,260
mazes infrastructure for for running

00:15:36,510 --> 00:15:41,960
applications on this kind of

00:15:39,260 --> 00:15:44,030
cluster you will also have or you will

00:15:41,960 --> 00:15:46,520
also love the constraints that marathon

00:15:44,030 --> 00:15:52,010
provides or messes in general you can

00:15:46,520 --> 00:15:55,100
say this kind of application should only

00:15:52,010 --> 00:15:58,550
run on on separate machine so because of

00:15:55,100 --> 00:16:00,830
on one machine there there might be

00:15:58,550 --> 00:16:03,440
enough resources and I have a service

00:16:00,830 --> 00:16:05,660
with five instances it might happen that

00:16:03,440 --> 00:16:07,940
these five instances are on one machine

00:16:05,660 --> 00:16:10,490
which is kind of that when this machine

00:16:07,940 --> 00:16:13,790
fails because it will take a little

00:16:10,490 --> 00:16:18,890
longer for fold over for disaster

00:16:13,790 --> 00:16:22,040
recovery and now coming to how we do

00:16:18,890 --> 00:16:24,230
continuous delivery on this ecosystem so

00:16:22,040 --> 00:16:26,540
you might not be surprised of the first

00:16:24,230 --> 00:16:30,670
step is commit your code and push it to

00:16:26,540 --> 00:16:34,220
the master then Cheng and kicks in and

00:16:30,670 --> 00:16:37,220
that's the usual locally tests and

00:16:34,220 --> 00:16:39,770
builds a fetch a file and loads it up to

00:16:37,220 --> 00:16:42,740
some some kind of storage and by the way

00:16:39,770 --> 00:16:45,680
we are using Jenkins still on our on VMS

00:16:42,740 --> 00:16:48,770
and enslaves and if you're interested in

00:16:45,680 --> 00:16:52,100
running jenkins on mrs. talk to Reba

00:16:48,770 --> 00:16:56,300
guys because they have Cheng goons

00:16:52,100 --> 00:16:58,610
running on mazey so for every developer

00:16:56,300 --> 00:17:02,330
has some kind of private Jenkins and

00:16:58,610 --> 00:17:05,350
sense so just talk to them or do some

00:17:02,330 --> 00:17:07,820
search on a net so the next step is

00:17:05,350 --> 00:17:11,570
start a test instance on Maysles we are

00:17:07,820 --> 00:17:14,570
talking two marathons yeah just start a

00:17:11,570 --> 00:17:17,870
new instance the instance is done

00:17:14,570 --> 00:17:19,760
started in a test mode so we can we can

00:17:17,870 --> 00:17:22,550
do some integration tests so for example

00:17:19,760 --> 00:17:25,610
if you are deploying the user service we

00:17:22,550 --> 00:17:28,610
will regress the question service with a

00:17:25,610 --> 00:17:31,690
kind of special header that fetches data

00:17:28,610 --> 00:17:37,730
exactly from the new version of the user

00:17:31,690 --> 00:17:40,550
service so that we can detect some some

00:17:37,730 --> 00:17:42,920
incompatible and the new versions if

00:17:40,550 --> 00:17:46,130
there is everything fine we will start

00:17:42,920 --> 00:17:50,000
the service and a cannery mode so at

00:17:46,130 --> 00:17:52,730
this stage this new version is already

00:17:50,000 --> 00:17:55,460
running in the production cluster and

00:17:52,730 --> 00:17:58,669
gets already production traffic so at

00:17:55,460 --> 00:18:00,710
this stage state we have we have two

00:17:58,669 --> 00:18:03,500
versions actually running at the same

00:18:00,710 --> 00:18:07,340
time so it's quite important to have it

00:18:03,500 --> 00:18:10,010
backward compatible and then it's

00:18:07,340 --> 00:18:12,620
running for a couple of minutes or hours

00:18:10,010 --> 00:18:16,130
depends on how much traffic we are

00:18:12,620 --> 00:18:18,620
having and we observe the error read on

00:18:16,130 --> 00:18:23,000
this cannery and if everything is fine

00:18:18,620 --> 00:18:28,179
we will start the deployment on the

00:18:23,000 --> 00:18:32,330
protection on the whole cluster so i

00:18:28,179 --> 00:18:34,370
hope i have ignited you now to have a

00:18:32,330 --> 00:18:39,380
deeper look into a new medicine marathon

00:18:34,370 --> 00:18:42,410
so I recom recommend to you these two

00:18:39,380 --> 00:18:44,840
pages so of course Apache page and then

00:18:42,410 --> 00:18:48,740
the guys at mesosphere are currently

00:18:44,840 --> 00:18:51,290
quite active and developing measles and

00:18:48,740 --> 00:18:53,720
marathon and all the frameworks and if

00:18:51,290 --> 00:18:56,419
you if you have questions because

00:18:53,720 --> 00:19:00,200
there's not so much time just grab one

00:18:56,419 --> 00:19:02,809
of the guys and blue t-shirts and let's

00:19:00,200 --> 00:19:06,640
have a talk outside or you can contact

00:19:02,809 --> 00:19:10,850
me on Twitter or write me an email so

00:19:06,640 --> 00:19:14,120
coming back to the beginning I don't

00:19:10,850 --> 00:19:16,820
think virtualization is dead but for our

00:19:14,120 --> 00:19:22,280
service infrastructure measles is the

00:19:16,820 --> 00:19:26,000
right thing to have and even if we are

00:19:22,280 --> 00:19:30,850
having VMs for like Jenkins I'm I'm so

00:19:26,000 --> 00:19:30,850
happy that marathon and meadows exist

00:19:34,250 --> 00:19:36,310

YouTube URL: https://www.youtube.com/watch?v=rB-wrCGygy0


