Title: Berlin Buzzwords 2017: Varun Thacker - Road to Auto-Scaling #bbuzz
Publication date: 2017-06-15
Playlist: Berlin Buzzwords 2017
Description: 
	Solr exposes low level internal metrics which applications may consume in their monitoring tools. The talk describes various key metrics which a user should monitor carefully to maintain SLAs, both in terms of ingestion rates and query latency.

The second part of the talk presents a cookbook of recipes for admins to use by acting on the metrics. The recipes utilize a set of Solr APIs that will help expand your collection(s) to more nodes, re-shard, add more replicas etc.

The third part of this talk covers the work being done in Solr to help users scale their cluster in an automated fashion. Ultimately, upon completion of the talk, the user should be able to define a set of rules and provide recipes on which Solr may take action when thresholds are hit.

Read more:
https://2017.berlinbuzzwords.de/17/session/road-auto-scaling

About Varun Thacker:
https://2017.berlinbuzzwords.de/users/varun-thacker

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:05,600 --> 00:00:12,260
so hi I'm Burton have been working on

00:00:09,260 --> 00:00:14,240
solar for like five or six years loosely

00:00:12,260 --> 00:00:16,910
been part of the Lucene solar project I

00:00:14,240 --> 00:00:19,480
work at a company called lucid works

00:00:16,910 --> 00:00:23,119
we're like part of my job is helping

00:00:19,480 --> 00:00:26,000
develop solar and implementing solar for

00:00:23,119 --> 00:00:28,789
our clients what I'm going to I'm a

00:00:26,000 --> 00:00:31,570
loose in solar committer as well and in

00:00:28,789 --> 00:00:34,900
this talk what I plan on talking is

00:00:31,570 --> 00:00:38,030
solar Road to auto-scaling that means

00:00:34,900 --> 00:00:40,489
back in solar for we build solar cloud

00:00:38,030 --> 00:00:43,309
which means it built distributed

00:00:40,489 --> 00:00:47,360
capabilities into solar and how we added

00:00:43,309 --> 00:00:49,640
api's but with ApS we needed more things

00:00:47,360 --> 00:00:52,160
like metrics to get more insights into

00:00:49,640 --> 00:00:55,219
your system based on that you could

00:00:52,160 --> 00:00:57,109
stitch up some common recipes to make

00:00:55,219 --> 00:00:59,510
sure that your cluster is always healthy

00:00:57,109 --> 00:01:02,210
and how solar can take all these

00:00:59,510 --> 00:01:04,699
experiences and build for it going

00:01:02,210 --> 00:01:08,990
forward to help you manage your cluster

00:01:04,699 --> 00:01:11,030
in a easier fashion so that was my

00:01:08,990 --> 00:01:12,860
agenda for the talk and I'm going to

00:01:11,030 --> 00:01:16,659
start with just a quick introduction of

00:01:12,860 --> 00:01:19,939
solar cloud so Solar cloud is a set of

00:01:16,659 --> 00:01:22,579
features which add distributed

00:01:19,939 --> 00:01:24,229
capabilities to solar so in this example

00:01:22,579 --> 00:01:27,280
like I am showing you you have like a

00:01:24,229 --> 00:01:30,740
two node solar installation which has

00:01:27,280 --> 00:01:34,070
two shots and like replicas for each

00:01:30,740 --> 00:01:36,259
shot and zookeeper is used for

00:01:34,070 --> 00:01:39,770
coordination between the solar servers

00:01:36,259 --> 00:01:42,290
now the key design aspects here were

00:01:39,770 --> 00:01:45,439
there was like solar cloud doesn't have

00:01:42,290 --> 00:01:48,290
a master node that means there is no one

00:01:45,439 --> 00:01:51,740
single node which accepts all the rights

00:01:48,290 --> 00:01:54,530
the way it works is every shard has its

00:01:51,740 --> 00:01:58,149
own leader which is in charge of

00:01:54,530 --> 00:02:01,939
accepting rights but for query time all

00:01:58,149 --> 00:02:04,610
replicas or all shots are the same so

00:02:01,939 --> 00:02:06,860
anyone is capable of serving queries to

00:02:04,610 --> 00:02:08,899
you so this is like a quick introduction

00:02:06,860 --> 00:02:12,140
of solar cloud I'm assuming most of us

00:02:08,899 --> 00:02:15,560
Europe familiar with it what I'm going

00:02:12,140 --> 00:02:18,170
to now do is move on to what our API is

00:02:15,560 --> 00:02:20,740
that solar supports and what's this

00:02:18,170 --> 00:02:23,480
new things that we built into it

00:02:20,740 --> 00:02:26,440
essentially what we did is we built a

00:02:23,480 --> 00:02:29,660
lot of ApS to help you build your cake

00:02:26,440 --> 00:02:32,330
cluster so it was more like we added

00:02:29,660 --> 00:02:35,000
collections api's to add make

00:02:32,330 --> 00:02:36,170
collections like to delete replicas to

00:02:35,000 --> 00:02:38,989
add shots

00:02:36,170 --> 00:02:43,760
stuff like that right so now we have a

00:02:38,989 --> 00:02:47,780
more regularized API everything is like

00:02:43,760 --> 00:02:49,580
sort of REST API so you have HTTP like

00:02:47,780 --> 00:02:53,780
you can configure most things in your

00:02:49,580 --> 00:02:56,140
solar cluster over api's we have a v2

00:02:53,780 --> 00:02:59,569
API which got released in solar

00:02:56,140 --> 00:03:01,430
six-five that means you have your new

00:02:59,569 --> 00:03:05,000
JSON compliant I'm going to show you an

00:03:01,430 --> 00:03:08,870
example in just a minute with the v2 API

00:03:05,000 --> 00:03:11,150
is we have introspection you have a PS

00:03:08,870 --> 00:03:14,569
for your schema and you have api's for

00:03:11,150 --> 00:03:16,430
your configs so slowly we've added

00:03:14,569 --> 00:03:19,459
support for most things in your cluster

00:03:16,430 --> 00:03:22,820
to be driven by ApS and you don't need

00:03:19,459 --> 00:03:26,030
to handle it XML or finger-like mess

00:03:22,820 --> 00:03:28,900
around with zookeeper a lot here's an

00:03:26,030 --> 00:03:32,090
example of a API write with the v2 stuff

00:03:28,900 --> 00:03:34,870
so you have your endpoint which is like

00:03:32,090 --> 00:03:36,799
the slash we do then you specify

00:03:34,870 --> 00:03:39,350
collections because you want to know

00:03:36,799 --> 00:03:41,870
what are my collection API is and I'm

00:03:39,350 --> 00:03:45,170
saying introspect so what this gives out

00:03:41,870 --> 00:03:47,620
is all the ApS that all the collection

00:03:45,170 --> 00:03:50,750
EP is what are the parameters it

00:03:47,620 --> 00:03:52,220
describes the API and it tells you how

00:03:50,750 --> 00:03:55,160
to use it so it's very self

00:03:52,220 --> 00:03:57,350
understanding API if you are interesting

00:03:55,160 --> 00:04:00,079
more about these v2 ApS there's a talk

00:03:57,350 --> 00:04:02,950
later today just specifically on it so

00:04:00,079 --> 00:04:05,299
I'd recommend you to go for that one and

00:04:02,950 --> 00:04:07,609
here's an example of how you would

00:04:05,299 --> 00:04:10,130
create a collection with the v2 API is

00:04:07,609 --> 00:04:12,769
right so you would say create and then

00:04:10,130 --> 00:04:14,810
you would give it a name a config num

00:04:12,769 --> 00:04:17,780
shot so the parameter stay the same but

00:04:14,810 --> 00:04:21,109
it's JSON structure more friendly and

00:04:17,780 --> 00:04:23,660
more de self described in like I said

00:04:21,109 --> 00:04:26,270
Solar has a lot of ApS that we built

00:04:23,660 --> 00:04:29,240
right so you can add replicas you can

00:04:26,270 --> 00:04:31,129
call a backup collection you can restore

00:04:29,240 --> 00:04:33,830
a collection you can delete an

00:04:31,129 --> 00:04:36,349
Lia's you can create an alias you can

00:04:33,830 --> 00:04:39,050
add the shard you can delete a shard you

00:04:36,349 --> 00:04:41,959
can do a lot of things right but it's

00:04:39,050 --> 00:04:43,939
not that easy to use them like when I

00:04:41,959 --> 00:04:47,089
say it's not that easy what I mean is

00:04:43,939 --> 00:04:49,249
you can call add replicas it's a command

00:04:47,089 --> 00:04:52,129
which supports a few parameters so it's

00:04:49,249 --> 00:04:53,929
straightforward to use but when you

00:04:52,129 --> 00:04:56,479
design a cluster and you have to

00:04:53,929 --> 00:04:58,699
maintain your own cluster you need to

00:04:56,479 --> 00:05:01,039
have intelligence built in to figure out

00:04:58,699 --> 00:05:01,459
where should the replicas be sitting

00:05:01,039 --> 00:05:04,129
right

00:05:01,459 --> 00:05:06,429
I can't simply tell solo add a replica

00:05:04,129 --> 00:05:09,019
because then it could pick any node in

00:05:06,429 --> 00:05:12,080
from your cluster right for all you know

00:05:09,019 --> 00:05:13,879
it ends up on the same host which is

00:05:12,080 --> 00:05:15,580
hosting your other replicas so you

00:05:13,879 --> 00:05:17,569
actually don't get that much of

00:05:15,580 --> 00:05:18,649
redundancy right so if you're hosting

00:05:17,569 --> 00:05:22,219
multiple JVMs

00:05:18,649 --> 00:05:25,669
on the same host so people needed to

00:05:22,219 --> 00:05:28,339
build these tools to figure out when you

00:05:25,669 --> 00:05:30,469
call add replicas how do i smartly

00:05:28,339 --> 00:05:31,999
figure out based on my cluster topology

00:05:30,469 --> 00:05:37,069
where should it go to right

00:05:31,999 --> 00:05:39,139
so these api is are there but we have

00:05:37,069 --> 00:05:41,449
like soullow is working towards like

00:05:39,139 --> 00:05:46,159
with the auto scaling that i'm gonna

00:05:41,449 --> 00:05:48,289
like lead to with how this helps you

00:05:46,159 --> 00:05:53,169
manage your cluster in a better fashion

00:05:48,289 --> 00:05:56,149
so this is like the aps that we have now

00:05:53,169 --> 00:05:59,240
another thing with the aps is we don't

00:05:56,149 --> 00:06:03,439
have much insight as to when to use them

00:05:59,240 --> 00:06:05,539
so do we know like at what trigger are

00:06:03,439 --> 00:06:07,579
at what point should we add more

00:06:05,539 --> 00:06:11,929
replicas because we are getting a lot of

00:06:07,579 --> 00:06:14,719
queries so solar always had like some

00:06:11,929 --> 00:06:18,499
metrics that it was exposed through gmx

00:06:14,719 --> 00:06:21,499
and a rest endpoint but in the six three

00:06:18,499 --> 00:06:24,349
through six five releases we kind of

00:06:21,499 --> 00:06:26,719
overhauled how the metrics work so we

00:06:24,349 --> 00:06:30,349
collect a lot more metrics we use a

00:06:26,719 --> 00:06:32,679
library called drop Wizard metrics so it

00:06:30,349 --> 00:06:35,179
helps us collect a lot more information

00:06:32,679 --> 00:06:37,249
which you can then consume in your

00:06:35,179 --> 00:06:40,069
monitoring tools you can hit solar with

00:06:37,249 --> 00:06:42,110
a rest endpoint to figure out what

00:06:40,069 --> 00:06:43,900
metrics expose and I will show you some

00:06:42,110 --> 00:06:47,260
of it in just a minute

00:06:43,900 --> 00:06:52,900
the way job wizard EPS work it has like

00:06:47,260 --> 00:06:54,430
five types of would you say counter so

00:06:52,900 --> 00:06:56,200
it has something called counters which

00:06:54,430 --> 00:06:59,350
are basically just telling you

00:06:56,200 --> 00:07:01,600
long values right how many times was my

00:06:59,350 --> 00:07:04,840
how many times did a search requests

00:07:01,600 --> 00:07:07,780
come in you have meters which basically

00:07:04,840 --> 00:07:09,850
is like a exponential time decay so

00:07:07,780 --> 00:07:11,680
tells you within the one minute the five

00:07:09,850 --> 00:07:14,320
minutes like it's like load average so

00:07:11,680 --> 00:07:16,810
within the one five 15-minute time

00:07:14,320 --> 00:07:18,940
intervals how many queries or how many

00:07:16,810 --> 00:07:21,280
update requests came into my system

00:07:18,940 --> 00:07:23,260
right then you have meters which is

00:07:21,280 --> 00:07:26,770
basically telling you you're mean your

00:07:23,260 --> 00:07:30,400
max your median your percentiles so the

00:07:26,770 --> 00:07:32,590
meter the histograms give you that with

00:07:30,400 --> 00:07:37,020
your timers you get stuff like a

00:07:32,590 --> 00:07:39,520
snapshot of well like the current

00:07:37,020 --> 00:07:42,310
statistics of your system are and

00:07:39,520 --> 00:07:44,200
similarly you have gorgeous so all of

00:07:42,310 --> 00:07:47,800
these are basically terminologies the

00:07:44,200 --> 00:07:50,680
dropper xored uses to expose all your

00:07:47,800 --> 00:07:53,140
metrics now the way solar designed it it

00:07:50,680 --> 00:07:57,430
designed it so that it grouped metrics

00:07:53,140 --> 00:08:00,580
into so called for registries so what we

00:07:57,430 --> 00:08:03,640
did is we classified some things as JVM

00:08:00,580 --> 00:08:05,620
metrics that means whatever like your

00:08:03,640 --> 00:08:08,380
HTTP thread pools your garbage

00:08:05,620 --> 00:08:10,210
collection metrics your CPU load

00:08:08,380 --> 00:08:12,820
averages stuff like that went into your

00:08:10,210 --> 00:08:16,450
JVM metrics then you have a node level

00:08:12,820 --> 00:08:18,700
metric registry you have your core level

00:08:16,450 --> 00:08:22,570
that means for each replica in your

00:08:18,700 --> 00:08:27,490
index what are my metrics and then you

00:08:22,570 --> 00:08:31,390
have a jetty level so let's I move back

00:08:27,490 --> 00:08:33,010
instead of forward so what is a GVM

00:08:31,390 --> 00:08:36,520
registry right it tells you information

00:08:33,010 --> 00:08:39,070
about your OS memory it tells you GC

00:08:36,520 --> 00:08:42,190
statistics it tells you what I of

00:08:39,070 --> 00:08:45,970
physical memory set starts right now you

00:08:42,190 --> 00:08:48,580
have your node level metrics which is

00:08:45,970 --> 00:08:50,290
basically telling you how many like

00:08:48,580 --> 00:08:52,900
Soler has authentication and

00:08:50,290 --> 00:08:54,760
authorization so for people hitting your

00:08:52,900 --> 00:08:55,660
authorization endpoint and how many were

00:08:54,760 --> 00:08:57,850
failures on

00:08:55,660 --> 00:09:00,129
your success so maybe you know that the

00:08:57,850 --> 00:09:02,769
DDoS happen attack happening or someone

00:09:00,129 --> 00:09:04,959
just internally in our system trying to

00:09:02,769 --> 00:09:06,790
hit your endpoint and he doesn't know

00:09:04,959 --> 00:09:09,310
the password or something like that

00:09:06,790 --> 00:09:13,569
it tells you API request time so it

00:09:09,310 --> 00:09:15,250
gives you updates and selects how how

00:09:13,569 --> 00:09:19,949
are they performing what is the

00:09:15,250 --> 00:09:22,569
percentiles it gives you counts the core

00:09:19,949 --> 00:09:25,629
registry gives you request handler

00:09:22,569 --> 00:09:29,319
metrics and it gives you indexing

00:09:25,629 --> 00:09:31,660
statistics the jetty level registry it

00:09:29,319 --> 00:09:34,209
gives you thread pool counts so tells

00:09:31,660 --> 00:09:36,310
you currently in my system how many

00:09:34,209 --> 00:09:37,990
search requests are going on at that

00:09:36,310 --> 00:09:41,550
point of time right these level of

00:09:37,990 --> 00:09:46,060
insights we never had it in the past so

00:09:41,550 --> 00:09:48,910
along with it being exposed as a gmx and

00:09:46,060 --> 00:09:51,699
a rest endpoint with the drop result a

00:09:48,910 --> 00:09:54,279
pfv also has something called reporters

00:09:51,699 --> 00:09:57,670
what reporters are basically it helps

00:09:54,279 --> 00:09:59,709
you push these metrics to external

00:09:57,670 --> 00:10:01,810
systems so if you have your own

00:09:59,709 --> 00:10:05,139
monitoring tool or if you are using any

00:10:01,810 --> 00:10:08,740
third-party tool it can reporters api

00:10:05,139 --> 00:10:11,170
can help you push data to these systems

00:10:08,740 --> 00:10:12,790
now solar already ships with a few

00:10:11,170 --> 00:10:15,310
reporters built-in so if i using

00:10:12,790 --> 00:10:17,139
graphite or if you want to just log it

00:10:15,310 --> 00:10:21,550
out to a file and then you have a tool

00:10:17,139 --> 00:10:25,810
to ship that to your own reporting API

00:10:21,550 --> 00:10:27,699
you can use it that way and what you can

00:10:25,810 --> 00:10:30,819
also do is you can write a custom

00:10:27,699 --> 00:10:34,089
reporter so with this plugin what you

00:10:30,819 --> 00:10:38,259
can do now is you want to push data to

00:10:34,089 --> 00:10:41,309
your own reporting tool so drop wizard

00:10:38,259 --> 00:10:45,430
itself comes with like third-party

00:10:41,309 --> 00:10:47,589
libraries so to save for these reporting

00:10:45,430 --> 00:10:49,689
tools a lot of them come in built so

00:10:47,589 --> 00:10:52,389
they're like 10 plus reporter databases

00:10:49,689 --> 00:10:55,029
that are already there if you just go to

00:10:52,389 --> 00:10:57,189
the drop fizzer third-party library

00:10:55,029 --> 00:10:58,809
website so what I did as a proof of

00:10:57,189 --> 00:11:01,269
experiment when I was preparing for the

00:10:58,809 --> 00:11:04,389
slides is I was like I'm just going to

00:11:01,269 --> 00:11:05,920
push this to influx TV because I found

00:11:04,389 --> 00:11:08,290
this tool called graph on ax which was

00:11:05,920 --> 00:11:11,290
easy to visualize and I was actually

00:11:08,290 --> 00:11:12,999
like I got it set up and it just took

00:11:11,290 --> 00:11:15,609
like a few lines of code to write a

00:11:12,999 --> 00:11:17,769
custom report oh so if you follow the

00:11:15,609 --> 00:11:20,679
github project there it's it shows you

00:11:17,769 --> 00:11:24,369
it has instructions and it's like just a

00:11:20,679 --> 00:11:28,239
hundred or lines of code to glue it into

00:11:24,369 --> 00:11:32,139
the solar reporter API so it's very easy

00:11:28,239 --> 00:11:35,859
now to even push it to your system so

00:11:32,139 --> 00:11:38,559
till now now we've shown how the metrics

00:11:35,859 --> 00:11:41,289
come in and why do we need metrics right

00:11:38,559 --> 00:11:44,859
so now that we have metrics your tools

00:11:41,289 --> 00:11:48,129
can consume these metrics and use the

00:11:44,859 --> 00:11:50,259
solar api's to now say in more

00:11:48,129 --> 00:11:54,189
intelligently decide when should I add a

00:11:50,259 --> 00:11:58,589
replica when should i shard my system

00:11:54,189 --> 00:12:02,009
more much in sites like that right so

00:11:58,589 --> 00:12:06,609
now what I'm going to talk about is a

00:12:02,009 --> 00:12:09,399
few recipes so how can I take a matrix X

00:12:06,609 --> 00:12:11,289
X and then say I want to increase a

00:12:09,399 --> 00:12:13,119
throughput of my system or something

00:12:11,289 --> 00:12:15,579
like that right so I'm going to talk a

00:12:13,119 --> 00:12:17,350
little bit about that just before I do

00:12:15,579 --> 00:12:20,319
that I want to bring out this one

00:12:17,350 --> 00:12:23,199
concept of solar cloud because I'm going

00:12:20,319 --> 00:12:26,319
to like use a recipe which kind of

00:12:23,199 --> 00:12:28,809
relates to this so I'm going to talk a

00:12:26,319 --> 00:12:31,449
little bit about the solar replication

00:12:28,809 --> 00:12:42,309
mode what that means is how does

00:12:31,449 --> 00:12:44,679
replication work in solar cloud right so

00:12:42,309 --> 00:12:47,559
SOLAS default replication model is

00:12:44,679 --> 00:12:49,779
designed for consistency what that means

00:12:47,559 --> 00:12:53,619
is when you add a document to the index

00:12:49,779 --> 00:12:56,529
it goes to the shard leader now that

00:12:53,619 --> 00:12:59,649
shard leader writes the document to the

00:12:56,529 --> 00:13:01,470
transaction log once it has written the

00:12:59,649 --> 00:13:04,929
document to the transaction log it

00:13:01,470 --> 00:13:08,499
writes it to its own local Lucene index

00:13:04,929 --> 00:13:11,499
and it forwards the request to all the

00:13:08,499 --> 00:13:14,259
other replicas that the shard could have

00:13:11,499 --> 00:13:17,949
right so you will have many replicas for

00:13:14,259 --> 00:13:19,600
each shot now all the replicas also

00:13:17,949 --> 00:13:21,370
write to the transaction log at this

00:13:19,600 --> 00:13:24,700
point and then decide

00:13:21,370 --> 00:13:27,070
to the index now the client which well

00:13:24,700 --> 00:13:29,560
or the port like if you manually send

00:13:27,070 --> 00:13:32,110
the document to index will only get back

00:13:29,560 --> 00:13:35,560
success once all the replicas have

00:13:32,110 --> 00:13:37,450
acknowledged success or failure but like

00:13:35,560 --> 00:13:39,880
it's a synchronous call you wait till

00:13:37,450 --> 00:13:42,640
all of them reply back obviously if a

00:13:39,880 --> 00:13:45,370
replica fails to write solar will put

00:13:42,640 --> 00:13:47,800
that node into recovery but it's a block

00:13:45,370 --> 00:13:52,080
like it so it's you're bounded by your

00:13:47,800 --> 00:13:54,640
slowest replicas right now with solar

00:13:52,080 --> 00:13:57,550
7.0 which will be out in a couple of

00:13:54,640 --> 00:14:01,750
months what we added is more replication

00:13:57,550 --> 00:14:04,000
modes so basically we said we'll bring

00:14:01,750 --> 00:14:07,540
back like a pull model so people use

00:14:04,000 --> 00:14:09,250
cases where you don't have say a new

00:14:07,540 --> 00:14:12,070
real-time use case where you don't want

00:14:09,250 --> 00:14:14,589
documents to be searchable instantly or

00:14:12,070 --> 00:14:17,170
where you want to separate reads from

00:14:14,589 --> 00:14:20,140
writes you're going to be able to create

00:14:17,170 --> 00:14:23,529
a new type of replication for a replica

00:14:20,140 --> 00:14:26,170
so and where you only tell that replica

00:14:23,529 --> 00:14:28,209
to pull from your leader you are not

00:14:26,170 --> 00:14:31,870
never going to forward the document to

00:14:28,209 --> 00:14:33,640
that so you're isolating a read from a

00:14:31,870 --> 00:14:35,920
right so these are application modes

00:14:33,640 --> 00:14:38,380
that are going to be there in seven oh

00:14:35,920 --> 00:14:41,110
and there will be talks and blogs about

00:14:38,380 --> 00:14:43,529
this in the following weeks because a

00:14:41,110 --> 00:14:45,700
lot of this work is already in there

00:14:43,529 --> 00:14:49,029
with that I'm going to talk about a

00:14:45,700 --> 00:14:51,730
three like styles of recipes using our

00:14:49,029 --> 00:14:54,720
API sand the metrics that we now collect

00:14:51,730 --> 00:14:58,330
so the first tile is how do we increase

00:14:54,720 --> 00:15:00,790
query throughput right so how do we know

00:14:58,330 --> 00:15:05,290
when our queries are not performing well

00:15:00,790 --> 00:15:08,320
so the syntax I'm using your is the top

00:15:05,290 --> 00:15:11,110
in the top box is basically the metrics

00:15:08,320 --> 00:15:14,200
I've just taken three example metrics

00:15:11,110 --> 00:15:17,620
here that were exposed and the names of

00:15:14,200 --> 00:15:21,339
these metrics and maybe we should use

00:15:17,620 --> 00:15:23,680
this to judge when like are we not being

00:15:21,339 --> 00:15:26,200
able to like avi bottlenecking on

00:15:23,680 --> 00:15:29,800
something right so the first is our

00:15:26,200 --> 00:15:32,920
query dot select request times so this

00:15:29,800 --> 00:15:34,060
gives you stuff like my percentiles your

00:15:32,920 --> 00:15:37,149
Max and

00:15:34,060 --> 00:15:38,829
statistics like that you can find the

00:15:37,149 --> 00:15:42,129
system load average so this is pretty

00:15:38,829 --> 00:15:45,370
cool now you can even know the solar JVM

00:15:42,129 --> 00:15:47,769
what how much CPU is it or load averages

00:15:45,370 --> 00:15:50,980
is consuming and you can also find out

00:15:47,769 --> 00:15:53,949
through the metrics the GC activity for

00:15:50,980 --> 00:15:56,110
the process right so these seem like

00:15:53,949 --> 00:15:58,480
fairly straightforward things you should

00:15:56,110 --> 00:16:00,850
be monitoring and with this if you want

00:15:58,480 --> 00:16:01,689
to increase query throughput what would

00:16:00,850 --> 00:16:05,829
one do right

00:16:01,689 --> 00:16:10,149
you could simply add replicas and just

00:16:05,829 --> 00:16:12,550
scale out horizontally if you scale add

00:16:10,149 --> 00:16:15,550
more replicas you are reducing the load

00:16:12,550 --> 00:16:18,069
on each server so in turn it might even

00:16:15,550 --> 00:16:23,319
help you with your query latency as well

00:16:18,069 --> 00:16:26,139
and what you can also do or like if you

00:16:23,319 --> 00:16:28,649
don't want to add a new replica if you

00:16:26,139 --> 00:16:31,870
don't have near real-time requirements

00:16:28,649 --> 00:16:33,579
some of your replicas can use the new

00:16:31,870 --> 00:16:36,250
replication model that I just spoke

00:16:33,579 --> 00:16:38,529
about so they are just serving query

00:16:36,250 --> 00:16:40,720
traffic that means they are not indexing

00:16:38,529 --> 00:16:43,180
documents they are fetching indexes from

00:16:40,720 --> 00:16:45,730
the leader so there is a delay but if

00:16:43,180 --> 00:16:49,300
you don't care about like it being one

00:16:45,730 --> 00:16:52,269
minute or still then your leader you can

00:16:49,300 --> 00:16:56,790
isolate these reads and that way you can

00:16:52,269 --> 00:16:59,949
increase your query throughput now

00:16:56,790 --> 00:17:03,399
switching gears how do we improve a

00:16:59,949 --> 00:17:05,589
query latency right so you can measure

00:17:03,399 --> 00:17:09,069
stuff like again in the select the

00:17:05,589 --> 00:17:12,640
request times you will get out the like

00:17:09,069 --> 00:17:15,130
this is the 95 percentile you get the 5

00:17:12,640 --> 00:17:18,159
minute rate you get the 15 minute rate

00:17:15,130 --> 00:17:21,339
and you also get statistics like your

00:17:18,159 --> 00:17:23,530
thread pool how many threads are being

00:17:21,339 --> 00:17:26,079
used right now in the system so you know

00:17:23,530 --> 00:17:30,190
how many concurrent queries are running

00:17:26,079 --> 00:17:34,090
now how do we improve latency one thing

00:17:30,190 --> 00:17:39,010
to understand here is a search for that

00:17:34,090 --> 00:17:43,270
shot is single threaded that means if a

00:17:39,010 --> 00:17:46,580
search is for that shot takes 5 seconds

00:17:43,270 --> 00:17:49,310
we cannot do anything to optimize that

00:17:46,580 --> 00:17:52,100
so the one way we could go about it to

00:17:49,310 --> 00:17:55,250
reduce query latency is you could add

00:17:52,100 --> 00:17:58,190
more shots or you could split existing

00:17:55,250 --> 00:18:01,100
shots right so that way if a shot was

00:17:58,190 --> 00:18:02,960
taking five seconds to query now since

00:18:01,100 --> 00:18:05,570
you have two shots you're going to be

00:18:02,960 --> 00:18:07,640
using more parallelism and you're going

00:18:05,570 --> 00:18:09,950
to be getting faster response times

00:18:07,640 --> 00:18:12,590
obviously there's always a trade-off

00:18:09,950 --> 00:18:16,820
between throughput and latency but

00:18:12,590 --> 00:18:18,860
that's a strategy one could use oh and

00:18:16,820 --> 00:18:20,840
there are other downsides to this like I

00:18:18,860 --> 00:18:23,330
was pointed out while I was talking

00:18:20,840 --> 00:18:26,450
about the strategies if you are using

00:18:23,330 --> 00:18:28,340
like say faceting which is you're using

00:18:26,450 --> 00:18:31,040
your having lots of shards and your

00:18:28,340 --> 00:18:34,310
facets are very complicated since you

00:18:31,040 --> 00:18:36,730
have to merge facets across shards and

00:18:34,310 --> 00:18:39,830
you have to like calculate more

00:18:36,730 --> 00:18:43,520
sometimes that overhead could be more

00:18:39,830 --> 00:18:46,160
than what a splitting like could give

00:18:43,520 --> 00:18:48,650
benefit you could benefit out of so

00:18:46,160 --> 00:18:52,430
something worth trying the simplest

00:18:48,650 --> 00:18:55,220
thing that I ask people to do is create

00:18:52,430 --> 00:18:58,420
a collection which is one shard in an

00:18:55,220 --> 00:19:01,910
environment keep adding documents to it

00:18:58,420 --> 00:19:05,570
till you see query SL is that you would

00:19:01,910 --> 00:19:07,160
expect it solar can keep right so if you

00:19:05,570 --> 00:19:09,710
want queries to be under 500

00:19:07,160 --> 00:19:13,130
milliseconds keep pumping documents into

00:19:09,710 --> 00:19:16,100
a one shot collection and querying run a

00:19:13,130 --> 00:19:19,070
test to see at what point at how many

00:19:16,100 --> 00:19:21,830
documents does it start getting slower

00:19:19,070 --> 00:19:23,780
than 500 milliseconds right and then you

00:19:21,830 --> 00:19:25,310
can simply take that and correlate with

00:19:23,780 --> 00:19:28,100
the number of documents you plan on

00:19:25,310 --> 00:19:30,620
having inner system eventually or the

00:19:28,100 --> 00:19:33,050
current like how much you plan on having

00:19:30,620 --> 00:19:35,720
right now and decide your sharding

00:19:33,050 --> 00:19:38,690
strategy so that's just like that so

00:19:35,720 --> 00:19:42,160
that's the way I tell users to go about

00:19:38,690 --> 00:19:47,870
sorting and improving your query latency

00:19:42,160 --> 00:19:50,660
now what about indexing right so if you

00:19:47,870 --> 00:19:53,120
add a lot of documents with index like

00:19:50,660 --> 00:19:55,790
I've seen people like add a couple of

00:19:53,120 --> 00:19:58,650
million documents a second how do we

00:19:55,790 --> 00:20:00,600
achieve those type of throughputs

00:19:58,650 --> 00:20:02,610
what we do is you could obviously

00:20:00,600 --> 00:20:05,930
measure stuff like your system load

00:20:02,610 --> 00:20:09,780
average you would see GC activity

00:20:05,930 --> 00:20:12,840
another indication of when can a system

00:20:09,780 --> 00:20:16,200
not handle so much indexing throughput

00:20:12,840 --> 00:20:18,510
is because of heavy GC or the system

00:20:16,200 --> 00:20:21,150
always being pegged nodes are going into

00:20:18,510 --> 00:20:23,130
recovery because you're rights aren't

00:20:21,150 --> 00:20:25,170
being acknowledged within a particular

00:20:23,130 --> 00:20:27,390
time all the nodes are going into

00:20:25,170 --> 00:20:29,700
recovery and you're seeing lots of

00:20:27,390 --> 00:20:31,770
merges happening in your system so it

00:20:29,700 --> 00:20:36,090
even exposes statistics like merges

00:20:31,770 --> 00:20:38,580
through the matrix so if you see like

00:20:36,090 --> 00:20:43,020
cases like this and if you really want

00:20:38,580 --> 00:20:45,840
to push your indexing more what could we

00:20:43,020 --> 00:20:48,270
do right we could simply add more shards

00:20:45,840 --> 00:20:50,760
again that way we are also scaling out

00:20:48,270 --> 00:20:53,910
rights and if you have like more disks

00:20:50,760 --> 00:20:57,300
that you can attach discharge to or like

00:20:53,910 --> 00:21:00,750
that way is a common practice where

00:20:57,300 --> 00:21:04,470
people can then scale out their eyes if

00:21:00,750 --> 00:21:08,430
you are doing bulk indexing you could

00:21:04,470 --> 00:21:11,220
like reduce the number of replicas for

00:21:08,430 --> 00:21:13,770
that period of bulk ingestion so you can

00:21:11,220 --> 00:21:16,830
like you've indexed like 100 few hundred

00:21:13,770 --> 00:21:19,320
million documents and then you add the

00:21:16,830 --> 00:21:22,380
replication factor back up to three or

00:21:19,320 --> 00:21:26,250
whatever you would want to so that would

00:21:22,380 --> 00:21:28,200
lead to faster bulk injection times you

00:21:26,250 --> 00:21:31,070
can also use the combination of these

00:21:28,200 --> 00:21:35,100
new replication types that I spoke about

00:21:31,070 --> 00:21:37,140
to increase indexing throughput right so

00:21:35,100 --> 00:21:40,260
if you want to keep three replicas or

00:21:37,140 --> 00:21:42,600
ten replicas but if you don't have your

00:21:40,260 --> 00:21:45,150
near-real-time requirements why should

00:21:42,600 --> 00:21:47,370
you write to all ten of them if they can

00:21:45,150 --> 00:21:50,520
catch up after a few minutes well and

00:21:47,370 --> 00:21:55,100
good right so another way you could

00:21:50,520 --> 00:21:58,820
improve indexing throughput like this so

00:21:55,100 --> 00:22:03,330
now that we've understood how to use

00:21:58,820 --> 00:22:06,330
metrics combine them with epi is what is

00:22:03,330 --> 00:22:10,740
solar doing starting solar 7 to help

00:22:06,330 --> 00:22:12,240
make this easy for you right so these

00:22:10,740 --> 00:22:12,419
are the set of features we are going to

00:22:12,240 --> 00:22:14,999
be

00:22:12,419 --> 00:22:19,379
calling it like auto-scaling so to say

00:22:14,999 --> 00:22:23,869
so I will help you manage your cluster

00:22:19,379 --> 00:22:27,059
design your cluster better it replaces

00:22:23,869 --> 00:22:30,090
sollars existing replica placement

00:22:27,059 --> 00:22:33,869
strategy with a more generic policy

00:22:30,090 --> 00:22:37,379
engine so you can this like write your

00:22:33,869 --> 00:22:39,659
own policies and so with auto scaling

00:22:37,379 --> 00:22:43,619
there will be concepts like an event and

00:22:39,659 --> 00:22:45,450
a trigger so you can act on events with

00:22:43,619 --> 00:22:47,580
triggers and stuff like that so I'm

00:22:45,450 --> 00:22:50,960
going to be talking about it in general

00:22:47,580 --> 00:22:50,960
like you know just a second

00:22:58,440 --> 00:23:05,420
so the first concept is what is a policy

00:23:01,500 --> 00:23:08,970
a policy is essentially a set of rules

00:23:05,420 --> 00:23:11,700
that you can use at a cluster and a

00:23:08,970 --> 00:23:14,640
selection level let's take an example

00:23:11,700 --> 00:23:17,550
that you can Solar has a concept of an

00:23:14,640 --> 00:23:20,100
overseer node this overseer node is in

00:23:17,550 --> 00:23:22,860
charge of operations like admin

00:23:20,100 --> 00:23:25,560
operations so when you add a replica the

00:23:22,860 --> 00:23:29,310
overseer node actually takes the request

00:23:25,560 --> 00:23:31,910
and like finds it out to the actual node

00:23:29,310 --> 00:23:34,590
that should be adding the replicas so

00:23:31,910 --> 00:23:37,200
what if you want to see say that I have

00:23:34,590 --> 00:23:40,500
a very big cluster and the overseer

00:23:37,200 --> 00:23:42,750
should get its own dedicated node so

00:23:40,500 --> 00:23:45,600
what you could simply say is for node

00:23:42,750 --> 00:23:47,640
rule as which is not an overseer make

00:23:45,600 --> 00:23:50,730
sure you have you don't have any

00:23:47,640 --> 00:23:55,170
replicas on that so you can say don't

00:23:50,730 --> 00:23:57,780
have replicas on my overseer node you

00:23:55,170 --> 00:24:00,780
can you can design another policy by

00:23:57,780 --> 00:24:04,770
saying for a collection for every

00:24:00,780 --> 00:24:09,000
replicas or for every shot make sure

00:24:04,770 --> 00:24:11,790
that no single node has more than two of

00:24:09,000 --> 00:24:14,820
them right so it will be able to figure

00:24:11,790 --> 00:24:18,060
out when when you call an add replicas

00:24:14,820 --> 00:24:20,190
you don't like its now if even if you

00:24:18,060 --> 00:24:22,920
don't specify the node it you can go to

00:24:20,190 --> 00:24:26,610
a you can give it sensible defaults like

00:24:22,920 --> 00:24:28,590
this right this is part of solo seven

00:24:26,610 --> 00:24:31,890
this is rather going to be part of solo

00:24:28,590 --> 00:24:33,780
seven and what you can do is when you

00:24:31,890 --> 00:24:36,480
create up or when you call the

00:24:33,780 --> 00:24:39,930
collections API you can specify these

00:24:36,480 --> 00:24:44,910
policies so that the collections EPS

00:24:39,930 --> 00:24:47,130
will respect these policies now comes

00:24:44,910 --> 00:24:51,540
these concepts called events and

00:24:47,130 --> 00:24:55,650
triggers so what is an event an event

00:24:51,540 --> 00:24:59,460
can be like a node loss or a node got

00:24:55,650 --> 00:25:03,270
added into the system or my search rate

00:24:59,460 --> 00:25:06,750
went over 1500 QPS right so these are

00:25:03,270 --> 00:25:11,280
events that so you could define in the

00:25:06,750 --> 00:25:12,100
solar auto-scaling api's with an event

00:25:11,280 --> 00:25:15,820
what you would

00:25:12,100 --> 00:25:21,130
is you could perform actions based on

00:25:15,820 --> 00:25:23,830
triggers so what would what would the

00:25:21,130 --> 00:25:26,140
trigger do it would compute a plan and

00:25:23,830 --> 00:25:26,500
set of actions that need to be carried

00:25:26,140 --> 00:25:30,490
out

00:25:26,500 --> 00:25:34,720
let's say like what you had asked the

00:25:30,490 --> 00:25:38,220
system was on a node added event make

00:25:34,720 --> 00:25:40,960
sure that I add more replicas so that I

00:25:38,220 --> 00:25:45,130
make sure that that node automatically

00:25:40,960 --> 00:25:47,650
gets filled up right so when a node gets

00:25:45,130 --> 00:25:50,740
actually added a trigger will computer

00:25:47,650 --> 00:25:53,200
plan saying for these collections you

00:25:50,740 --> 00:25:55,990
had asked that I maintain a replication

00:25:53,200 --> 00:25:59,500
factor of something so your are the N

00:25:55,990 --> 00:26:03,370
add replicas calls that I need to make

00:25:59,500 --> 00:26:06,039
on this new node it can carry it out for

00:26:03,370 --> 00:26:09,100
you or it could like by default just

00:26:06,039 --> 00:26:11,350
give you this plan by saying your are

00:26:09,100 --> 00:26:13,990
the API calls you should be making in

00:26:11,350 --> 00:26:16,390
the system so it's not gonna like you

00:26:13,990 --> 00:26:19,030
have the option to just have it printed

00:26:16,390 --> 00:26:20,799
out and an operator then says here this

00:26:19,030 --> 00:26:24,549
makes sense I'm going to go execute it

00:26:20,799 --> 00:26:27,789
say this is still a work in progress so

00:26:24,549 --> 00:26:30,520
it's been worked upon like if you follow

00:26:27,789 --> 00:26:31,960
this zero you will see all the work

00:26:30,520 --> 00:26:36,100
that's been happening in the community

00:26:31,960 --> 00:26:37,870
with this and looks like by the way this

00:26:36,100 --> 00:26:41,620
is turning out it's probably not going

00:26:37,870 --> 00:26:44,530
to be in seven Oh a lot of this events

00:26:41,620 --> 00:26:47,440
and triggers and how to act on them will

00:26:44,530 --> 00:26:49,150
be part of solar seven one which will

00:26:47,440 --> 00:26:54,570
follow seven Oh in a few couple of

00:26:49,150 --> 00:26:59,440
months so that's the rough plan now

00:26:54,570 --> 00:27:03,309
what's next we feel like using solar

00:26:59,440 --> 00:27:05,890
will probably be releasing 7.0 over the

00:27:03,309 --> 00:27:08,860
next month or so like in a couple of

00:27:05,890 --> 00:27:11,590
months all of these that I spoke about

00:27:08,860 --> 00:27:15,010
right like et eyes then I spoke about

00:27:11,590 --> 00:27:17,380
matrix I spoke about some recipes and

00:27:15,010 --> 00:27:20,049
then the auto scaling all of them will

00:27:17,380 --> 00:27:22,510
have more detailed and multiple talks at

00:27:20,049 --> 00:27:25,060
leucine revolution and over the coming

00:27:22,510 --> 00:27:27,490
months since they'll start at

00:27:25,060 --> 00:27:30,120
being used in practice and like the

00:27:27,490 --> 00:27:34,930
auto-scaling stuff will be part of solar

00:27:30,120 --> 00:27:38,680
7 dot X and like watch out for this

00:27:34,930 --> 00:27:50,730
space and see what's upcoming so that's

00:27:38,680 --> 00:27:54,690
all I had to pretend thank you yeah okay

00:27:50,730 --> 00:27:54,690
do you have some questions

00:28:06,980 --> 00:28:12,690
will there be any metrics on replica

00:28:10,200 --> 00:28:15,480
historic replicas failure in terms of

00:28:12,690 --> 00:28:17,160
fencing of the note that's starting to

00:28:15,480 --> 00:28:20,370
have problems would you need to be

00:28:17,160 --> 00:28:23,070
stirring kind of recovery history

00:28:20,370 --> 00:28:24,120
separately defense of note sword reckon

00:28:23,070 --> 00:28:26,910
that's going to be something that would

00:28:24,120 --> 00:28:29,820
be in okay so what they're saying is if

00:28:26,910 --> 00:28:32,340
and at any question what asking is when

00:28:29,820 --> 00:28:34,710
lots of replicas are going into recovery

00:28:32,340 --> 00:28:39,350
or if they've gone in the past or undo

00:28:34,710 --> 00:28:39,350
the metrics capture that information I

00:28:39,590 --> 00:28:45,960
don't know as far as I know that's not

00:28:42,750 --> 00:28:48,090
something we've added so it doesn't all

00:28:45,960 --> 00:28:51,030
these metrics right are they not

00:28:48,090 --> 00:28:53,940
persisted so they can go beyond solo

00:28:51,030 --> 00:28:57,900
reloads but if you restart a JVM they're

00:28:53,940 --> 00:29:00,480
gone but at least we could probably

00:28:57,900 --> 00:29:03,150
expose them that's like worth something

00:29:00,480 --> 00:29:06,510
you could at least create a JIRA like

00:29:03,150 --> 00:29:08,550
just show in the last ten minutes how

00:29:06,510 --> 00:29:18,660
many nodes have gone into recovery or

00:29:08,550 --> 00:29:21,240
seven sorry yes that's that's a fair

00:29:18,660 --> 00:29:24,000
enough point so yeah I would say like if

00:29:21,240 --> 00:29:26,850
you're at least point this out create a

00:29:24,000 --> 00:29:28,320
JIRA and if if you have like if you have

00:29:26,850 --> 00:29:31,350
time or if you are inclined to like

00:29:28,320 --> 00:29:33,830
patches always welcome so another

00:29:31,350 --> 00:29:33,830
question

00:29:39,830 --> 00:29:44,750
yeah I thank you for the talk what I

00:29:42,920 --> 00:29:46,550
want to ask you is the rest our piece

00:29:44,750 --> 00:29:49,430
you were actually present here do they

00:29:46,550 --> 00:29:52,550
are available also for solo slave

00:29:49,430 --> 00:29:55,610
architecture and solar or do their other

00:29:52,550 --> 00:29:58,670
some recipes you can't use in solo slave

00:29:55,610 --> 00:30:01,310
are so so your question is all these

00:29:58,670 --> 00:30:04,010
events triggers are recipes would they

00:30:01,310 --> 00:30:07,190
be for solo master slave or are these

00:30:04,010 --> 00:30:09,380
just for solo cloud yes okay so all of

00:30:07,190 --> 00:30:12,010
these recipes that I spoke about are for

00:30:09,380 --> 00:30:15,020
solo cloud because these are like

00:30:12,010 --> 00:30:17,510
sharding and replicas like i guess you

00:30:15,020 --> 00:30:20,930
could translate a replica to just adding

00:30:17,510 --> 00:30:23,690
more slaves but i don't know whether you

00:30:20,930 --> 00:30:25,190
chard with master slave currently in

00:30:23,690 --> 00:30:28,820
your architecture technically it does

00:30:25,190 --> 00:30:31,640
supported but otherwise a lot of these

00:30:28,820 --> 00:30:36,430
concepts were like based on solar cloud

00:30:31,640 --> 00:30:39,050
people were using like master slave ah

00:30:36,430 --> 00:30:41,090
please check out the new replication

00:30:39,050 --> 00:30:44,990
mode which I spoke about such God we

00:30:41,090 --> 00:30:47,300
called holy replicas which basically

00:30:44,990 --> 00:30:49,850
integrates this master slave concept

00:30:47,300 --> 00:30:52,310
because these these pull replicas are

00:30:49,850 --> 00:30:55,460
essentially like slaves always pulling

00:30:52,310 --> 00:30:57,530
indexes of the leader so you can then

00:30:55,460 --> 00:30:59,870
start using the solar cloud management

00:30:57,530 --> 00:31:02,690
capabilities and all those sharding and

00:30:59,870 --> 00:31:06,200
the cluster capabilities that is

00:31:02,690 --> 00:31:11,090
built-in with your solar cloud with your

00:31:06,200 --> 00:31:13,010
master slave architecture so to say the

00:31:11,090 --> 00:31:17,750
matrix rasathi

00:31:13,010 --> 00:31:19,850
is it or will it work for muscles like

00:31:17,750 --> 00:31:21,500
yes metrics are definitely part of

00:31:19,850 --> 00:31:24,800
master slave because these are at each

00:31:21,500 --> 00:31:29,230
jetty level so you will get exposed all

00:31:24,800 --> 00:31:29,230
of these metrics okay thank you

00:31:34,519 --> 00:31:41,179
regarding the the pool note level you

00:31:38,370 --> 00:31:43,710
you are talking about the pool

00:31:41,179 --> 00:31:47,700
hopeful a trick you can yeah and is

00:31:43,710 --> 00:31:50,820
there any thing like you can define if

00:31:47,700 --> 00:31:53,250
it's what's the state of the index it's

00:31:50,820 --> 00:31:57,139
pulling like for example only fully

00:31:53,250 --> 00:32:01,110
optimized index or all kinds of merges

00:31:57,139 --> 00:32:03,539
so is there a way to specify that or is

00:32:01,110 --> 00:32:05,309
it just a general replication will it

00:32:03,539 --> 00:32:10,230
take the complete transaction look at

00:32:05,309 --> 00:32:12,330
anytime and from what I've seen the way

00:32:10,230 --> 00:32:15,750
it works like this is a new feature

00:32:12,330 --> 00:32:18,809
going to be released in 7o is it's

00:32:15,750 --> 00:32:22,500
basically always periodically syncing

00:32:18,809 --> 00:32:25,049
indexes with the leader so enormously

00:32:22,500 --> 00:32:27,659
like you could say sink on commit or

00:32:25,049 --> 00:32:30,630
sink on optimize I don't know whether

00:32:27,659 --> 00:32:34,320
those triggers are particularly built in

00:32:30,630 --> 00:32:36,799
just yet I'm not aware of it maybe if he

00:32:34,320 --> 00:32:39,840
said offline I'll show you but in my

00:32:36,799 --> 00:32:42,269
what I know the law is you can set up a

00:32:39,840 --> 00:32:45,720
poll interval and it's consistently

00:32:42,269 --> 00:32:47,730
sinking the indexes like which got

00:32:45,720 --> 00:32:49,559
changed in that period of time so if

00:32:47,730 --> 00:32:52,649
segments were merged or segments were

00:32:49,559 --> 00:33:04,350
added it's going to pull those and sync

00:32:52,649 --> 00:33:06,600
up ok so suppose so ok also channel I'll

00:33:04,350 --> 00:33:09,240
be around and like I think a bunch of us

00:33:06,600 --> 00:33:12,929
like from the Lucine solo people lawyer

00:33:09,240 --> 00:33:14,580
so like feel free to ask us questions ok

00:33:12,929 --> 00:33:16,710
so thanks Lauren

00:33:14,580 --> 00:33:19,990
and now we have the lunch break and

00:33:16,710 --> 00:33:23,859
we're estar soft bus - okay sanction

00:33:19,990 --> 00:33:23,859

YouTube URL: https://www.youtube.com/watch?v=w0WtKKxr-eQ


