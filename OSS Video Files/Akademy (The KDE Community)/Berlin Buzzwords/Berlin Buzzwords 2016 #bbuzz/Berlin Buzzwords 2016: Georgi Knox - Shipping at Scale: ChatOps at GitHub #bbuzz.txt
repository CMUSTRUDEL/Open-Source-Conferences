Title: Berlin Buzzwords 2016: Georgi Knox - Shipping at Scale: ChatOps at GitHub #bbuzz
Publication date: 2016-06-12
Playlist: Berlin Buzzwords 2016 #bbuzz
Description: 
	Hubot, GitHub's open source chat bot, is completely revolutionizing how we build, ship and operate software at scale. As a widely distributed company, we rely on online chat as one of our primary communication tools. ChatOps helps us improve situational awareness during incidents, to share knowledge, to ship software, and much more. We'll look at some concrete examples and talk about the cultural implications embracing ChatOps has had at GitHub.

Read more:
https://2016.berlinbuzzwords.de/session/shipping-scale-chatops-github

About Georgi Knox:
https://2016.berlinbuzzwords.de/users/georgi-knox

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:02,120 --> 00:00:09,840
buddy you can find me on twitter and

00:00:05,400 --> 00:00:12,150
github as at Georgie codes so what is

00:00:09,840 --> 00:00:13,530
github being an engineering conference

00:00:12,150 --> 00:00:15,960
i'm guessing that most people in this

00:00:13,530 --> 00:00:17,760
room probably know about github but

00:00:15,960 --> 00:00:20,550
essentially we're a platform that helps

00:00:17,760 --> 00:00:22,800
teams and individuals collaborate to

00:00:20,550 --> 00:00:26,189
build software there are currently over

00:00:22,800 --> 00:00:29,400
14 million developers collaborating on

00:00:26,189 --> 00:00:32,940
35 million repositories and over 30

00:00:29,400 --> 00:00:35,730
million juice and all of this we host on

00:00:32,940 --> 00:00:40,590
hundreds of servers most of it are bare

00:00:35,730 --> 00:00:42,510
metal so who is github github has been

00:00:40,590 --> 00:00:45,930
around now for about eight years and

00:00:42,510 --> 00:00:48,329
there are now over 550 hubbers which is

00:00:45,930 --> 00:00:51,719
the name we call ourselves and of that

00:00:48,329 --> 00:00:54,449
about 250 of us make up the technology

00:00:51,719 --> 00:00:56,840
side of the organization this is the

00:00:54,449 --> 00:01:00,379
screenshot of an internal application

00:00:56,840 --> 00:01:04,220
and on this particular day it says that

00:01:00,379 --> 00:01:07,020
312 or fifty six percent of hovers

00:01:04,220 --> 00:01:09,000
hopefully you can read that are

00:01:07,020 --> 00:01:10,950
currently working remotely outside of

00:01:09,000 --> 00:01:13,530
our San Francisco San Francisco

00:01:10,950 --> 00:01:15,840
headquarters and this image of the world

00:01:13,530 --> 00:01:20,490
map shows just how spread out we are all

00:01:15,840 --> 00:01:22,799
across the world at github we need

00:01:20,490 --> 00:01:25,710
communication tools that enable our

00:01:22,799 --> 00:01:27,780
highly distributed engineering teams to

00:01:25,710 --> 00:01:31,020
work better together across time zones

00:01:27,780 --> 00:01:33,659
and for us this means being able to

00:01:31,020 --> 00:01:37,409
build and ship whenever and and

00:01:33,659 --> 00:01:39,960
front-end whenever so before we talk

00:01:37,409 --> 00:01:42,990
about chat ops I'd like to introduce you

00:01:39,960 --> 00:01:45,030
to this very dapper looking robot his

00:01:42,990 --> 00:01:48,329
name is Hugh BOTS and who bought is

00:01:45,030 --> 00:01:50,880
hands down the hardest working hubba and

00:01:48,329 --> 00:01:53,460
I thought this photo of balloon who

00:01:50,880 --> 00:01:56,490
bought with laser eyes was particularly

00:01:53,460 --> 00:01:57,990
rad and it was taken quite recently at

00:01:56,490 --> 00:02:00,719
the github satellite conference in

00:01:57,990 --> 00:02:03,619
Amsterdam so Hugh bot was built at

00:02:00,719 --> 00:02:06,390
github and is an open source project

00:02:03,619 --> 00:02:08,910
that's written in CoffeeScript and oj s

00:02:06,390 --> 00:02:12,360
and it can run anywhere node can run

00:02:08,910 --> 00:02:13,350
most people deploy it to Heroku so here

00:02:12,360 --> 00:02:15,870
what's a chatbot

00:02:13,350 --> 00:02:18,600
and you can invite him to any room or

00:02:15,870 --> 00:02:22,140
channel in chat chat applications like

00:02:18,600 --> 00:02:24,630
slack and and hip chat and who bought

00:02:22,140 --> 00:02:27,570
was built at github to help automate a

00:02:24,630 --> 00:02:30,300
lot of manual tasks and also as a source

00:02:27,570 --> 00:02:33,570
of fun and silliness he bought ships

00:02:30,300 --> 00:02:36,680
with a small number of course Crips

00:02:33,570 --> 00:02:39,240
things like translating languages

00:02:36,680 --> 00:02:41,790
integrating with maps displaying images

00:02:39,240 --> 00:02:43,980
that type of thing but the real power of

00:02:41,790 --> 00:02:48,930
you bought comes when you extend him

00:02:43,980 --> 00:02:50,580
yourself by creating your own scripts so

00:02:48,930 --> 00:02:54,420
our two primary tools of communication

00:02:50,580 --> 00:02:56,970
at github firstly github no surprises

00:02:54,420 --> 00:03:01,020
there which we use for project write-ups

00:02:56,970 --> 00:03:03,810
issue tracking code commits and the

00:03:01,020 --> 00:03:06,030
second one is slack for chat we have a

00:03:03,810 --> 00:03:08,790
social contract that you're not expected

00:03:06,030 --> 00:03:10,590
to reply to add mentions straightaway we

00:03:08,790 --> 00:03:13,890
see both of those tools as being

00:03:10,590 --> 00:03:15,930
asynchronous communication tools chat

00:03:13,890 --> 00:03:18,660
and more specifically how we use chat

00:03:15,930 --> 00:03:21,360
ops have had a really dramatic impact on

00:03:18,660 --> 00:03:24,030
how we work and ship software as a

00:03:21,360 --> 00:03:26,970
company so in this talk I'm going to run

00:03:24,030 --> 00:03:29,400
through some examples of how we use chat

00:03:26,970 --> 00:03:34,380
ops at github and how it really helps to

00:03:29,400 --> 00:03:36,060
shape our culture so again no surprises

00:03:34,380 --> 00:03:38,190
that we've written some hue BOTS groups

00:03:36,060 --> 00:03:41,430
to integrate really tightly with github

00:03:38,190 --> 00:03:43,800
a few helpful things that you can do ask

00:03:41,430 --> 00:03:45,650
you bot to subscribe a channel to a

00:03:43,800 --> 00:03:48,810
specific repository or repositories

00:03:45,650 --> 00:03:51,690
whenever an issue is opened or closed a

00:03:48,810 --> 00:03:53,700
pull request merge Hubert will drop the

00:03:51,690 --> 00:03:57,870
description and link to it and chat if

00:03:53,700 --> 00:03:59,370
you drop a link to an issue in chat then

00:03:57,870 --> 00:04:01,710
Hubert will go and make a comment on

00:03:59,370 --> 00:04:04,740
that issue and link back to that exact

00:04:01,710 --> 00:04:06,780
chat line in slack and this is really

00:04:04,740 --> 00:04:09,150
good for my teammate who lives in Sydney

00:04:06,780 --> 00:04:11,550
for example she won't have missed out on

00:04:09,150 --> 00:04:15,030
any chat that occurred while she was

00:04:11,550 --> 00:04:17,520
asleep due to time zone differences repo

00:04:15,030 --> 00:04:20,910
commit messages appear in chat to then

00:04:17,520 --> 00:04:22,740
linked to the diff when you push to your

00:04:20,910 --> 00:04:26,040
feature branch in one of our repos a

00:04:22,740 --> 00:04:27,060
number of CI checks will run and if

00:04:26,040 --> 00:04:30,150
these checks pass

00:04:27,060 --> 00:04:31,410
then you and your click merge then from

00:04:30,150 --> 00:04:33,600
there the project will be deployed

00:04:31,410 --> 00:04:35,160
automatically and again who bought is

00:04:33,600 --> 00:04:38,820
going to chat to us every step of the

00:04:35,160 --> 00:04:41,100
way so all of this is really helpful to

00:04:38,820 --> 00:04:43,200
build up a context about what your

00:04:41,100 --> 00:04:44,820
teammates are working on and what's

00:04:43,200 --> 00:04:47,190
being shipped at any given point in time

00:04:44,820 --> 00:04:51,780
and this is all really especially

00:04:47,190 --> 00:04:53,460
helpful for distributed teams not all of

00:04:51,780 --> 00:04:57,000
our repositories allowed for automatic

00:04:53,460 --> 00:04:59,310
deploys even if CI checks pass so for

00:04:57,000 --> 00:05:02,460
example github com is just a really big

00:04:59,310 --> 00:05:06,000
rails up and it includes the github API

00:05:02,460 --> 00:05:08,520
and deployment for that requires some

00:05:06,000 --> 00:05:11,970
extra care so here is a graph of how

00:05:08,520 --> 00:05:13,950
many deploys we do over the course of a

00:05:11,970 --> 00:05:16,710
couple of weeks you can see it kind of

00:05:13,950 --> 00:05:19,650
ranges anywhere from 10 up to around 100

00:05:16,710 --> 00:05:22,260
per day and as a company we really value

00:05:19,650 --> 00:05:24,810
shipping frequent increment incremental

00:05:22,260 --> 00:05:26,430
updates I mentioned before that it's

00:05:24,810 --> 00:05:29,850
important for us to be able to ship

00:05:26,430 --> 00:05:31,860
building ship whenever from wherever so

00:05:29,850 --> 00:05:33,660
now going to walk through an example of

00:05:31,860 --> 00:05:38,250
how we use who you want to help us

00:05:33,660 --> 00:05:39,979
achieve this so we can initially test

00:05:38,250 --> 00:05:42,300
our changes in a staging environment

00:05:39,979 --> 00:05:45,479
staging environments are spun up on a

00:05:42,300 --> 00:05:47,220
per branch basis and as needed and this

00:05:45,479 --> 00:05:49,500
means there's no contention for staging

00:05:47,220 --> 00:05:52,110
you never have to wait on anyone else

00:05:49,500 --> 00:05:53,880
which i think is really great the less

00:05:52,110 --> 00:05:55,889
assumed we've already tested our branch

00:05:53,880 --> 00:05:57,900
it's totally good to go and we're set to

00:05:55,889 --> 00:06:00,120
ship the first thing we need to do is

00:05:57,900 --> 00:06:03,030
ask you bus to Hugh bot to put us in the

00:06:00,120 --> 00:06:05,729
prod deployment queue and with we do

00:06:03,030 --> 00:06:08,580
this with the command who bought q me to

00:06:05,729 --> 00:06:10,770
deploy my branch hubert will now stick

00:06:08,580 --> 00:06:13,680
us in a queue and we can go away and do

00:06:10,770 --> 00:06:15,240
other things when we get to the front of

00:06:13,680 --> 00:06:20,460
the queue who but we'll just add mention

00:06:15,240 --> 00:06:22,889
us in slack so to deploy we just run

00:06:20,460 --> 00:06:25,050
Hugh bot deploy my branch to prod and

00:06:22,889 --> 00:06:27,479
you but will now ensure our branches up

00:06:25,050 --> 00:06:31,740
to date with master and run all of the

00:06:27,479 --> 00:06:34,320
required see I checks when the CH x pass

00:06:31,740 --> 00:06:36,840
Hugh bot will perform the deployment and

00:06:34,320 --> 00:06:39,030
when it's done respond reminding me that

00:06:36,840 --> 00:06:41,340
it's now a good time to check haystack

00:06:39,030 --> 00:06:43,590
and graph me and these are both into

00:06:41,340 --> 00:06:46,050
Colonel exception and performance

00:06:43,590 --> 00:06:48,240
monitoring applications and by having

00:06:46,050 --> 00:06:50,250
Hubert linked to these apps in chat

00:06:48,240 --> 00:06:52,500
we're really trying to nurture a culture

00:06:50,250 --> 00:06:54,150
of performance we're saying it's not

00:06:52,500 --> 00:06:55,680
good enough to that you've just deployed

00:06:54,150 --> 00:06:57,449
your code you need to go and make sure

00:06:55,680 --> 00:06:59,220
that you didn't break anything and they

00:06:57,449 --> 00:07:02,010
haven't introduced any new performance

00:06:59,220 --> 00:07:04,169
issues we really see performance as

00:07:02,010 --> 00:07:06,060
being every engineers responsibility and

00:07:04,169 --> 00:07:10,320
not something that falls to just one

00:07:06,060 --> 00:07:13,440
team so haystack is our internal

00:07:10,320 --> 00:07:15,200
exception monitoring system and the

00:07:13,440 --> 00:07:18,780
Hubert the link that Hubert linked to

00:07:15,200 --> 00:07:20,940
will link to a fire hose view which is

00:07:18,780 --> 00:07:24,840
only shows the exceptions that have

00:07:20,940 --> 00:07:27,720
occurred since your changes have gone

00:07:24,840 --> 00:07:31,380
live so this makes it really easy to see

00:07:27,720 --> 00:07:33,570
if I broken something in this particular

00:07:31,380 --> 00:07:35,250
release and I can quickly take steps to

00:07:33,570 --> 00:07:38,190
roll back the change if I need to and

00:07:35,250 --> 00:07:40,560
I'll usually keep an eye on this fire

00:07:38,190 --> 00:07:42,060
hose for a few minutes but if I'm not

00:07:40,560 --> 00:07:43,229
doing my job properly and start go

00:07:42,060 --> 00:07:47,220
looking at how can you use something

00:07:43,229 --> 00:07:49,710
like that hey sarcasm plays some simple

00:07:47,220 --> 00:07:51,510
rules for anomaly detection if a number

00:07:49,710 --> 00:07:53,130
of exceptions if the number of

00:07:51,510 --> 00:07:55,950
exceptions like exceeds some kind of

00:07:53,130 --> 00:07:59,310
threshold then Hubert will ping me again

00:07:55,950 --> 00:08:01,740
in chat and to let me know that there's

00:07:59,310 --> 00:08:05,270
anomaly occurring and I can go and check

00:08:01,740 --> 00:08:08,849
it out the second link cubot chats

00:08:05,270 --> 00:08:11,729
post-deployment reminds me to check the

00:08:08,849 --> 00:08:14,910
graph me app and this is a screenshot of

00:08:11,729 --> 00:08:16,590
graph me a little bit hard to see there

00:08:14,910 --> 00:08:19,260
but it's basically an app the tracks

00:08:16,590 --> 00:08:21,720
performance of all of the different

00:08:19,260 --> 00:08:24,810
parts of github com and it's just a

00:08:21,720 --> 00:08:26,669
really good place to start to see if my

00:08:24,810 --> 00:08:31,860
deployment has caused any performance

00:08:26,669 --> 00:08:33,440
issues so one of the areas that he what

00:08:31,860 --> 00:08:36,959
really shines in is incident management

00:08:33,440 --> 00:08:39,870
without chitchat ops when stuff goes

00:08:36,959 --> 00:08:42,870
wrong each person on a team might query

00:08:39,870 --> 00:08:44,700
Splunk and graphite in their own

00:08:42,870 --> 00:08:47,640
browsers and do their own digging to try

00:08:44,700 --> 00:08:49,770
to figure out what's going on maybe

00:08:47,640 --> 00:08:52,050
someone will SSH into a box and run some

00:08:49,770 --> 00:08:54,329
commands the collaboration is really

00:08:52,050 --> 00:08:55,230
difficult because you can't see what the

00:08:54,329 --> 00:08:58,060
other person is

00:08:55,230 --> 00:08:59,620
but and so dealing with incidents in

00:08:58,060 --> 00:09:01,720
this way is kind of really ineffective

00:08:59,620 --> 00:09:04,360
and doesn't work well at all for

00:09:01,720 --> 00:09:06,279
distributed teams so it get help when

00:09:04,360 --> 00:09:08,380
something goes wrong people grab some

00:09:06,279 --> 00:09:11,250
popcorn pile into the ops channel and

00:09:08,380 --> 00:09:13,839
help or watch as the problem is solved

00:09:11,250 --> 00:09:15,040
so rather than list out a whole bunch of

00:09:13,839 --> 00:09:16,600
you bot commands which I thought would

00:09:15,040 --> 00:09:19,800
be kind of boring I'm going to run

00:09:16,600 --> 00:09:23,560
through a little bit of a scenario about

00:09:19,800 --> 00:09:26,080
an incident that occurred recently and

00:09:23,560 --> 00:09:28,180
just to demonstrate how chat ups made

00:09:26,080 --> 00:09:31,120
diagnosing and fixing this issue rather

00:09:28,180 --> 00:09:33,760
simple so let's say that I'm on the

00:09:31,120 --> 00:09:36,279
on-call rotation and receive a pager

00:09:33,760 --> 00:09:37,750
alert about unicorn listeners so the

00:09:36,279 --> 00:09:39,910
first thing that I'm going to do is jump

00:09:37,750 --> 00:09:42,850
into the ops channel and type hubert ack

00:09:39,910 --> 00:09:45,730
followed by the incident number to

00:09:42,850 --> 00:09:47,920
acknowledge the page that I just got so

00:09:45,730 --> 00:09:49,720
the low we got is about unicorn

00:09:47,920 --> 00:09:51,490
listeners and for those of you who

00:09:49,720 --> 00:09:55,690
haven't heard of unicorn it's just a

00:09:51,490 --> 00:09:57,820
HTTP server for a ruby so the unicorn

00:09:55,690 --> 00:10:01,000
master spins up a bunch of workers and

00:09:57,820 --> 00:10:03,880
the workers serve HTTP requests to your

00:10:01,000 --> 00:10:05,890
rails application so the second thing

00:10:03,880 --> 00:10:08,410
that I might want to do is ask cubot to

00:10:05,890 --> 00:10:11,220
graph us to show us a graph of the

00:10:08,410 --> 00:10:13,839
unicorn listeners on our front end boxes

00:10:11,220 --> 00:10:16,300
and this graph me command here makes

00:10:13,839 --> 00:10:18,010
calls to graphite which is an

00:10:16,300 --> 00:10:23,290
open-source real-time graphing

00:10:18,010 --> 00:10:25,480
application so we notice I notice at the

00:10:23,290 --> 00:10:28,420
end that the blue line the number of

00:10:25,480 --> 00:10:30,700
workers active seems to rapidly be

00:10:28,420 --> 00:10:32,440
reaching the unicorn worker limit which

00:10:30,700 --> 00:10:34,630
is the red line at the top of the graph

00:10:32,440 --> 00:10:35,980
and when this happens we're not really

00:10:34,630 --> 00:10:39,339
going to properly be able to serve

00:10:35,980 --> 00:10:40,930
github.com page requests so I'm going to

00:10:39,339 --> 00:10:44,350
drop a comment and slack to that effect

00:10:40,930 --> 00:10:47,560
and all of these yellow lines here just

00:10:44,350 --> 00:10:48,930
indicate deployments and given sometimes

00:10:47,560 --> 00:10:50,890
deployments are responsible for

00:10:48,930 --> 00:10:53,860
performance degradation they can be

00:10:50,890 --> 00:10:56,200
helpful to add to your graph so now my

00:10:53,860 --> 00:10:58,750
team member Amy jumps on line and she

00:10:56,200 --> 00:11:00,310
acknowledges the pages the page also she

00:10:58,750 --> 00:11:05,530
can of course just see the graph that I

00:11:00,310 --> 00:11:08,430
put in in chat and so she adds a new

00:11:05,530 --> 00:11:10,740
graph and she asked you about your graph

00:11:08,430 --> 00:11:13,560
to produce a graph to compare the number

00:11:10,740 --> 00:11:16,080
of unicorn listeners queued for the API

00:11:13,560 --> 00:11:18,510
versus the website and these graphite

00:11:16,080 --> 00:11:21,930
graphs can be pre saved like we have

00:11:18,510 --> 00:11:23,790
here with the apt symbol name or you can

00:11:21,930 --> 00:11:27,170
just use a royal graphite query both

00:11:23,790 --> 00:11:29,790
will work so seeing that the blue line

00:11:27,170 --> 00:11:32,279
hasn't increased like the green comm

00:11:29,790 --> 00:11:35,130
line here amy charts whatever it is it

00:11:32,279 --> 00:11:37,050
doesn't seem to be impacting the API so

00:11:35,130 --> 00:11:39,450
given that we can rule the api out let's

00:11:37,050 --> 00:11:42,029
get Hubert to graph as a choice a graph

00:11:39,450 --> 00:11:44,610
of the most requested pages on github

00:11:42,029 --> 00:11:46,950
com in the response we can see that

00:11:44,610 --> 00:11:49,920
there's this blue line and it's for the

00:11:46,950 --> 00:11:52,470
issues index page and then a red line

00:11:49,920 --> 00:11:55,860
which is for releases don't index are

00:11:52,470 --> 00:11:58,380
both experiencing a noticeable uptick so

00:11:55,860 --> 00:12:00,120
we're still tracking down the cause so

00:11:58,380 --> 00:12:03,420
Aimee decides it's best to add 10 more

00:12:00,120 --> 00:12:06,930
front-end boxes in the meantime so she

00:12:03,420 --> 00:12:09,420
uses the command cubot G panel host bulk

00:12:06,930 --> 00:12:13,260
install our pickles github roller calls

00:12:09,420 --> 00:12:15,270
Fe count equals 10 to do this so G panel

00:12:13,260 --> 00:12:17,820
is a rails application that we built

00:12:15,270 --> 00:12:19,740
about four years ago it's our inventory

00:12:17,820 --> 00:12:21,360
and provisioning management system that

00:12:19,740 --> 00:12:23,970
keeps track of all of our physical and

00:12:21,360 --> 00:12:26,040
cloud hosts and we built do panel

00:12:23,970 --> 00:12:27,930
because we needed the ability to track

00:12:26,040 --> 00:12:30,630
physical components of data centers

00:12:27,930 --> 00:12:33,540
cabinet speedy use Tracy's which is

00:12:30,630 --> 00:12:35,790
loose pieces of hardware and in addition

00:12:33,540 --> 00:12:37,890
to that it allows us to take some bare

00:12:35,790 --> 00:12:40,170
metal install a particular operating

00:12:37,890 --> 00:12:43,410
system and then provision it with puppet

00:12:40,170 --> 00:12:47,010
so in one simple command amy can spin up

00:12:43,410 --> 00:12:48,750
10 new front-end boxes and in about 15

00:12:47,010 --> 00:12:52,800
minutes they're going to be serving

00:12:48,750 --> 00:12:55,320
traffic so I think that's pretty rad so

00:12:52,800 --> 00:12:58,260
when the boxes of spun up amy is going

00:12:55,320 --> 00:12:59,910
to graph a similar graph from before

00:12:58,260 --> 00:13:04,050
which displays the number of unicorn

00:12:59,910 --> 00:13:06,180
workers available on for the past hour

00:13:04,050 --> 00:13:08,640
and we can now see towards the end there

00:13:06,180 --> 00:13:10,529
that there's a nice gap between workers

00:13:08,640 --> 00:13:13,440
active in blue and workers available in

00:13:10,529 --> 00:13:16,470
red so we're kind of where we're safe

00:13:13,440 --> 00:13:18,810
for now and I'm not going to play up the

00:13:16,470 --> 00:13:20,250
rest of this scenario of how we

00:13:18,810 --> 00:13:21,720
uncovered and fix the issue because I

00:13:20,250 --> 00:13:22,410
think you're starting to see the flow of

00:13:21,720 --> 00:13:25,019
how

00:13:22,410 --> 00:13:26,850
chat ops really works here but in case

00:13:25,019 --> 00:13:29,339
you're curious we found out that there

00:13:26,850 --> 00:13:31,949
was a community built Chrome extension

00:13:29,339 --> 00:13:34,860
which when installed displayed desktop

00:13:31,949 --> 00:13:38,879
notifications every time a new release

00:13:34,860 --> 00:13:41,279
or issue or pull request was issued was

00:13:38,879 --> 00:13:45,930
created but the Ascension didn't use the

00:13:41,279 --> 00:13:47,759
github API instead it issued thousands

00:13:45,930 --> 00:13:51,449
of requests per second to the github

00:13:47,759 --> 00:13:54,600
website so we were able to contact the

00:13:51,449 --> 00:13:57,839
extension developer they released to fix

00:13:54,600 --> 00:13:59,339
really quickly and on our end we put in

00:13:57,839 --> 00:14:02,370
place some browser session rate-limiting

00:13:59,339 --> 00:14:06,720
so that a rogue extension couldn't do

00:14:02,370 --> 00:14:10,589
this cause us any pain in the future so

00:14:06,720 --> 00:14:13,589
that example shows us how using chat ops

00:14:10,589 --> 00:14:16,259
solving problems is a highly coordinated

00:14:13,589 --> 00:14:18,569
effort that can easily be tackled by

00:14:16,259 --> 00:14:21,149
distributed teams by having everything

00:14:18,569 --> 00:14:23,209
in chat there's a shared context so

00:14:21,149 --> 00:14:27,029
anyone can jump in and lend a hand

00:14:23,209 --> 00:14:29,610
what's more unlike a command line Hubert

00:14:27,029 --> 00:14:32,579
provides an easy to access log of all

00:14:29,610 --> 00:14:35,160
past messages team members who are

00:14:32,579 --> 00:14:37,829
asleep when when this will happen can

00:14:35,160 --> 00:14:40,639
easily catch up the next day in fact

00:14:37,829 --> 00:14:43,110
it's easy to return to any point in time

00:14:40,639 --> 00:14:45,959
so I've only been working at github for

00:14:43,110 --> 00:14:47,880
about six months and I found chat ops to

00:14:45,959 --> 00:14:50,730
be a really excellent way for engineers

00:14:47,880 --> 00:14:52,949
new to the team to learn how things are

00:14:50,730 --> 00:14:55,439
done when you first start out there are

00:14:52,949 --> 00:14:56,850
a lot of things to take in and chat ops

00:14:55,439 --> 00:14:58,500
means that you don't have to remember

00:14:56,850 --> 00:15:00,870
everything you can sit back and watch

00:14:58,500 --> 00:15:03,449
those incidents play out and see other

00:15:00,870 --> 00:15:04,860
people's thought processes and watch our

00:15:03,449 --> 00:15:08,250
team members coordinate to solve

00:15:04,860 --> 00:15:09,839
problems Chad ops has made the discovery

00:15:08,250 --> 00:15:13,139
and learning process that much faster

00:15:09,839 --> 00:15:16,980
and better and aided onboarding as the

00:15:13,139 --> 00:15:18,389
engineering team has scaled do i only

00:15:16,980 --> 00:15:26,730
have zero minutes is that what you're

00:15:18,389 --> 00:15:29,189
saying so I have run out of time so

00:15:26,730 --> 00:15:31,230
we're always working to make cubot

00:15:29,189 --> 00:15:33,120
better and as you saw before we really

00:15:31,230 --> 00:15:34,199
rely on it for incident management so

00:15:33,120 --> 00:15:35,760
one of the biggest things that we've

00:15:34,199 --> 00:15:38,970
shipped recently

00:15:35,760 --> 00:15:41,400
is improvements to make Cuba a highly

00:15:38,970 --> 00:15:44,820
available distributed system so one who

00:15:41,400 --> 00:15:46,950
bot know goes down the others can can

00:15:44,820 --> 00:15:51,090
still function and we will be able to

00:15:46,950 --> 00:15:52,680
continue to field incident requests if

00:15:51,090 --> 00:15:54,630
your team's not currently using chat ops

00:15:52,680 --> 00:15:56,520
I really encourage you to give you about

00:15:54,630 --> 00:15:58,740
a try it's super easy to get set up and

00:15:56,520 --> 00:16:00,360
there's a whole bunch of community

00:15:58,740 --> 00:16:13,620
scripts that people have shared to help

00:16:00,360 --> 00:16:24,690
get started thank you thank you thanks a

00:16:13,620 --> 00:16:26,400
lot Linda do you have question so I work

00:16:24,690 --> 00:16:27,900
with dispersed teams to somebody

00:16:26,400 --> 00:16:29,820
interested in how it is can this can

00:16:27,900 --> 00:16:31,500
help our team to do each of your

00:16:29,820 --> 00:16:32,580
incidents have their own slack room or

00:16:31,500 --> 00:16:34,110
something how do you make sure that if

00:16:32,580 --> 00:16:35,940
there are 20 x incidents at the same

00:16:34,110 --> 00:16:37,770
time they don't all interfere with each

00:16:35,940 --> 00:16:39,630
other or if they want they can listen in

00:16:37,770 --> 00:16:44,310
but if they don't want to locate a new

00:16:39,630 --> 00:16:46,680
select room for every incident um so we

00:16:44,310 --> 00:16:49,380
have a we have a hubert command when an

00:16:46,680 --> 00:16:50,730
incident starts I can't remember what

00:16:49,380 --> 00:16:52,860
the exact command is but something like

00:16:50,730 --> 00:16:55,800
you bought incident and here but we'll

00:16:52,860 --> 00:16:58,080
go and create a new slap channel and you

00:16:55,800 --> 00:17:01,010
add a new issue on github and you just

00:16:58,080 --> 00:17:05,780
click into that channel and all of that

00:17:01,010 --> 00:17:05,780
funnels through the ops channel

00:17:11,980 --> 00:17:17,480
how do you do how do you deal with like

00:17:15,409 --> 00:17:21,010
permission in terms of like people doing

00:17:17,480 --> 00:17:24,140
deploys and that kind of stuff yeah so

00:17:21,010 --> 00:17:27,380
mostly we just trust everyone to do the

00:17:24,140 --> 00:17:31,010
right thing which sounds crazy I guess

00:17:27,380 --> 00:17:32,990
but yeah so some some deployments the

00:17:31,010 --> 00:17:35,299
scope to specific rooms but that's

00:17:32,990 --> 00:17:37,220
mostly just for readability so you know

00:17:35,299 --> 00:17:38,480
if you go into like the puppet room all

00:17:37,220 --> 00:17:40,760
the public deployments are happening

00:17:38,480 --> 00:17:42,679
there um and you wouldn't be able to

00:17:40,760 --> 00:17:45,289
deploy something from another room but

00:17:42,679 --> 00:17:47,840
because and I ran out of time it because

00:17:45,289 --> 00:17:49,909
all of the hue bot commands are written

00:17:47,840 --> 00:17:52,399
by subject matter experts they're really

00:17:49,909 --> 00:17:54,950
safe commands to run and people can see

00:17:52,399 --> 00:17:56,510
what you're doing so if you restart my

00:17:54,950 --> 00:18:00,190
sequel cluster everyone knows you

00:17:56,510 --> 00:18:03,940
restarted it so I think you know yeah

00:18:00,190 --> 00:18:03,940

YouTube URL: https://www.youtube.com/watch?v=3nD73CigtVg


