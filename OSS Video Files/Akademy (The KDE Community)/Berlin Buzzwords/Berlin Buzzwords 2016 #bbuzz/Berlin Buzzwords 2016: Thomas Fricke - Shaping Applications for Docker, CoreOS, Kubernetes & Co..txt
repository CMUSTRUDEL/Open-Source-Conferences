Title: Berlin Buzzwords 2016: Thomas Fricke - Shaping Applications for Docker, CoreOS, Kubernetes & Co.
Publication date: 2016-06-11
Playlist: Berlin Buzzwords 2016 #bbuzz
Description: 
	The buzz around containers has not yet reached it climax. Rolling out big scale heterogeneous applications has just started. This talk is about real customer projects, which use docker to deploy applications in a rapidly environment changing by Kubernetes and CoreOS. We followed a very strict approach, separating persistent and stateless applications and run everything in small units orchestrated by Kubernetes. 

With our own tools we could create descriptions of environments very rapidly, creating full complex environments with a single command. Examples in Java, Python and Ruby are shown. Security has been addressed to pass an extensive security audit. Using the latest feature of systemd on Linux on CoreOS, we could move the configuration management into the Kubernetes domain.

Read more:
https://2016.berlinbuzzwords.de/session/shaping-applications-docker-coreos-kubernetes-and-co

About Thomas Fricke:
https://2016.berlinbuzzwords.de/users/thomas-fricke

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:00,000 --> 00:00:11,460
I was starving view it okay hello

00:00:05,759 --> 00:00:13,200
everybody and yeah I hope at this one of

00:00:11,460 --> 00:00:17,039
the confidence I bring you as a buzz of

00:00:13,200 --> 00:00:19,710
the next year so in the last session I

00:00:17,039 --> 00:00:22,830
noticed nothing which I talk about it

00:00:19,710 --> 00:00:26,010
all of in three years some tools are

00:00:22,830 --> 00:00:31,080
only two years and one year so this

00:00:26,010 --> 00:00:33,590
might be the next bus that's me we are

00:00:31,080 --> 00:00:36,780
from a no code berlin-based company I'm

00:00:33,590 --> 00:00:39,950
the CTO and I'm doing system automation

00:00:36,780 --> 00:00:44,640
DevOps we all do the cloud database and

00:00:39,950 --> 00:00:46,920
same stuff not really big data but we

00:00:44,640 --> 00:00:49,770
are working in the cloud and building

00:00:46,920 --> 00:00:54,180
clothes for customers these are our

00:00:49,770 --> 00:00:57,300
typical requests so normally we work for

00:00:54,180 --> 00:00:59,640
core as for people who really have

00:00:57,300 --> 00:01:02,370
problems with all these new technology

00:00:59,640 --> 00:01:05,250
we present and do consulting on that so

00:01:02,370 --> 00:01:10,650
typically we fix problems in co benitez

00:01:05,250 --> 00:01:16,939
and then find stuff somewhere in the

00:01:10,650 --> 00:01:23,490
linux system so yeah everything we

00:01:16,939 --> 00:01:25,320
republish is pushed up stream so we

00:01:23,490 --> 00:01:27,780
found a bug in the Google SSH

00:01:25,320 --> 00:01:31,110
implementation and this is a discussion

00:01:27,780 --> 00:01:34,979
how we pushed it upstream so it's a

00:01:31,110 --> 00:01:38,729
security bug and public now typical

00:01:34,979 --> 00:01:42,479
things some of the epically applications

00:01:38,729 --> 00:01:44,250
of breaking when we find it's not an

00:01:42,479 --> 00:01:46,170
application problem the systemd problem

00:01:44,250 --> 00:01:49,290
no it's not a system d problem it's a

00:01:46,170 --> 00:01:52,170
general problem know something in the

00:01:49,290 --> 00:01:55,530
kernel buffer is too small we fix it in

00:01:52,170 --> 00:01:58,890
the linux kernel and push the fixed to

00:01:55,530 --> 00:02:02,700
the upstream so this is our daily

00:01:58,890 --> 00:02:05,880
business and yep the agenda of this talk

00:02:02,700 --> 00:02:10,170
is what can we do with containers beyond

00:02:05,880 --> 00:02:12,599
talker and as I've heard a lot of wrong

00:02:10,170 --> 00:02:13,350
things about what-what containerization

00:02:12,599 --> 00:02:16,950
is

00:02:13,350 --> 00:02:20,040
I edit one sheet containers versus

00:02:16,950 --> 00:02:22,050
virtualization so this is not the same

00:02:20,040 --> 00:02:24,360
and should not be mixed at least if you

00:02:22,050 --> 00:02:27,000
want to do real stuff in production

00:02:24,360 --> 00:02:30,810
environments and I will talk a little

00:02:27,000 --> 00:02:33,110
bit about communities chorus is our

00:02:30,810 --> 00:02:36,750
partners they are based in the Bay Area

00:02:33,110 --> 00:02:41,000
make a new version of the Linux

00:02:36,750 --> 00:02:43,680
operating system which is explicitly

00:02:41,000 --> 00:02:46,080
dedicated to run containers only so they

00:02:43,680 --> 00:02:48,000
skipped everything from tech edge

00:02:46,080 --> 00:02:52,260
management to configuration management

00:02:48,000 --> 00:02:55,050
and have containers only then I will

00:02:52,260 --> 00:03:02,190
show you what you should start if you

00:02:55,050 --> 00:03:05,820
plan to put an application into a micro

00:03:02,190 --> 00:03:07,830
service so containerization is done a

00:03:05,820 --> 00:03:09,510
lot at the moment some people do it in

00:03:07,830 --> 00:03:12,270
development some people do it only in

00:03:09,510 --> 00:03:15,210
production for some reason and I don't

00:03:12,270 --> 00:03:16,890
know why people didn't get it into a

00:03:15,210 --> 00:03:18,810
full deployment pipeline because the

00:03:16,890 --> 00:03:21,510
diploma pipeline itself is a complete

00:03:18,810 --> 00:03:25,080
complexity I will show you what you have

00:03:21,510 --> 00:03:27,180
to do if you want to migrate from the

00:03:25,080 --> 00:03:30,870
typical virtual machine or operating

00:03:27,180 --> 00:03:33,450
system starpoint we have a case study

00:03:30,870 --> 00:03:36,150
where it exactly did this is this image

00:03:33,450 --> 00:03:39,570
this is a berlin-based subsidiary of dr.

00:03:36,150 --> 00:03:42,090
telecom they have been buzzed at Mobile

00:03:39,570 --> 00:03:46,440
World corn in Barcelona as a so-called

00:03:42,090 --> 00:03:48,570
what's up killer I don't know if it's

00:03:46,440 --> 00:03:50,480
true but they are doing serious business

00:03:48,570 --> 00:03:54,450
and they are using all the stake in

00:03:50,480 --> 00:03:56,820
production then I will summarize it what

00:03:54,450 --> 00:03:59,940
what is the success story what have been

00:03:56,820 --> 00:04:03,030
the real challenges and of course what's

00:03:59,940 --> 00:04:07,580
missing in the circle system so this is

00:04:03,030 --> 00:04:09,450
the table virtualization versus

00:04:07,580 --> 00:04:11,220
containerization so the containers are

00:04:09,450 --> 00:04:13,020
in the middle and you see it's

00:04:11,220 --> 00:04:18,510
completely different on the isolation

00:04:13,020 --> 00:04:20,460
level and typically you can run

00:04:18,510 --> 00:04:23,540
containers only on the Linux operating

00:04:20,460 --> 00:04:26,540
system some people say no we have a

00:04:23,540 --> 00:04:26,540
native

00:04:26,700 --> 00:04:32,550
native taco on mac OS or on Windows no

00:04:29,460 --> 00:04:34,350
they inject a small hypervisor which is

00:04:32,550 --> 00:04:37,650
too small to notice under normal

00:04:34,350 --> 00:04:40,560
conditions but it is not native only can

00:04:37,650 --> 00:04:44,010
one native in on a Linux system because

00:04:40,560 --> 00:04:47,790
it makes heavily use of Linux namespaces

00:04:44,010 --> 00:04:49,350
and therefore you cannot run form Carol

00:04:47,790 --> 00:04:52,920
colonel so you have to use the same

00:04:49,350 --> 00:04:56,010
kernel as a the hosting system you don't

00:04:52,920 --> 00:04:59,280
need to emulate devices you can simply

00:04:56,010 --> 00:05:01,020
use a native devices which makes it big

00:04:59,280 --> 00:05:02,700
different if you have for example fast

00:05:01,020 --> 00:05:07,610
Network software-defined Network works

00:05:02,700 --> 00:05:11,010
well and without any performance losses

00:05:07,610 --> 00:05:15,290
you don't need this video thing which

00:05:11,010 --> 00:05:17,520
slows down your big big load

00:05:15,290 --> 00:05:23,640
applications and you simply have

00:05:17,520 --> 00:05:25,650
everything native and one thing is the

00:05:23,640 --> 00:05:27,530
root isolation refers very poor and the

00:05:25,650 --> 00:05:30,000
older versions of Dhaka is no

00:05:27,530 --> 00:05:33,270
implemented as a user name space or the

00:05:30,000 --> 00:05:36,120
root user inside your container is not

00:05:33,270 --> 00:05:39,210
the root user outside the container

00:05:36,120 --> 00:05:41,280
which is a security feature the only

00:05:39,210 --> 00:05:45,900
thing which I have marked red is if you

00:05:41,280 --> 00:05:48,930
have a hard crypto or your private keys

00:05:45,900 --> 00:05:52,170
inside the CPU all you have a CPU cache

00:05:48,930 --> 00:05:56,100
it will be easier than on virtualization

00:05:52,170 --> 00:06:03,240
because you only have to avoid one mm OH

00:05:56,100 --> 00:06:05,880
instead of 222 leaked private keys from

00:06:03,240 --> 00:06:07,710
one container to another one but there

00:06:05,880 --> 00:06:10,050
has not been a proof of concept I did

00:06:07,710 --> 00:06:11,580
not have the time to do it but all the

00:06:10,050 --> 00:06:14,490
proof of concepts you see for

00:06:11,580 --> 00:06:22,200
virtualization should also work with

00:06:14,490 --> 00:06:24,440
containers so the next big thing if you

00:06:22,200 --> 00:06:26,700
believe in google cloud computing and

00:06:24,440 --> 00:06:29,600
google's and we have partnered with

00:06:26,700 --> 00:06:34,040
google so this is small as a disclaimer

00:06:29,600 --> 00:06:38,340
is cubanita xin KU vanitas is something

00:06:34,040 --> 00:06:40,380
you know you want to address it it's a

00:06:38,340 --> 00:06:43,110
container orchestration

00:06:40,380 --> 00:06:47,040
framework it's made simple you simply

00:06:43,110 --> 00:06:49,950
can say a start container you have

00:06:47,040 --> 00:06:54,360
replication controllers where you can

00:06:49,950 --> 00:06:56,310
start containers at large scale with one

00:06:54,360 --> 00:06:59,220
single command line is a group control

00:06:56,310 --> 00:07:03,420
command and you can run a lot of things

00:06:59,220 --> 00:07:08,070
go Benitez is enzmann or governor now it

00:07:03,420 --> 00:07:12,510
is the same route from linguistically as

00:07:08,070 --> 00:07:16,560
in cabinets a cybernetic and the main

00:07:12,510 --> 00:07:20,580
goal is that you manage applications you

00:07:16,560 --> 00:07:23,070
don't want to manage nodes this is a

00:07:20,580 --> 00:07:25,320
problem which you always have if you

00:07:23,070 --> 00:07:29,460
have developers and testers you should

00:07:25,320 --> 00:07:31,980
not be backed by by setting up notes

00:07:29,460 --> 00:07:36,060
installing help disks installing 20

00:07:31,980 --> 00:07:38,630
disks for for something and and then one

00:07:36,060 --> 00:07:41,280
at you you don't have to care about it

00:07:38,630 --> 00:07:47,520
you only have to care about your

00:07:41,280 --> 00:07:50,040
application so this is a big picture

00:07:47,520 --> 00:07:52,610
here is a simple API which can be a

00:07:50,040 --> 00:07:55,920
command-line interfaces cube control and

00:07:52,610 --> 00:07:57,810
on the other side you have the cubelets

00:07:55,920 --> 00:08:00,810
on your note and all the things in the

00:07:57,810 --> 00:08:03,990
middle is done that your applications

00:08:00,810 --> 00:08:05,730
run seamlessly they have a key value

00:08:03,990 --> 00:08:08,490
stores this is the most important things

00:08:05,730 --> 00:08:11,310
as a second form above it ctc demon and

00:08:08,490 --> 00:08:16,230
the EGC demon is a distributed key value

00:08:11,310 --> 00:08:20,190
store and is guaranteeing that the the

00:08:16,230 --> 00:08:23,850
state is unique in the entire cluster

00:08:20,190 --> 00:08:27,330
but you can forget all the things you

00:08:23,850 --> 00:08:31,020
have simply a client communicating to an

00:08:27,330 --> 00:08:37,770
API and it's communicating to the

00:08:31,020 --> 00:08:41,160
container cluster and it's run or nearly

00:08:37,770 --> 00:08:42,870
every linux distribution it's running on

00:08:41,160 --> 00:08:46,070
a bunt 0 I use it on a bun to every day

00:08:42,870 --> 00:08:49,110
and you can run it on every major the

00:08:46,070 --> 00:08:52,010
newer distribution even the older ones

00:08:49,110 --> 00:08:54,000
have it now but there are some

00:08:52,010 --> 00:08:57,330
distributions which have been

00:08:54,000 --> 00:09:00,930
lined to run containers only one of them

00:08:57,330 --> 00:09:03,320
is Korres the mission statement is they

00:09:00,930 --> 00:09:06,480
want to make the internet secure again

00:09:03,320 --> 00:09:09,960
which means that they need a lot of

00:09:06,480 --> 00:09:13,770
stuff to secure the applications the

00:09:09,960 --> 00:09:18,990
hardware containers and everything in

00:09:13,770 --> 00:09:22,140
between and this is a typical stack the

00:09:18,990 --> 00:09:24,180
hardware is at the very bottom so you

00:09:22,140 --> 00:09:26,700
can ensure that the hardware has a

00:09:24,180 --> 00:09:30,330
trusted platform module you can start a

00:09:26,700 --> 00:09:34,950
secure signed colonel then you have an

00:09:30,330 --> 00:09:39,870
interim yours integrity chorus chorus is

00:09:34,950 --> 00:09:43,530
a kind of immutable operating system so

00:09:39,870 --> 00:09:46,380
you cannot change the system disks of

00:09:43,530 --> 00:09:50,130
course this is a feature so you cannot

00:09:46,380 --> 00:09:53,490
install software the ordinary a you have

00:09:50,130 --> 00:09:56,460
to use a container one time and besides

00:09:53,490 --> 00:10:01,260
doc Isaiah is rocket which is another

00:09:56,460 --> 00:10:04,350
container one time which is not even a

00:10:01,260 --> 00:10:06,410
year old I think and on top of that you

00:10:04,350 --> 00:10:10,020
have the container management software

00:10:06,410 --> 00:10:12,870
rocket could be replaced if you don't

00:10:10,020 --> 00:10:14,850
trust everything on this picture by dr.

00:10:12,870 --> 00:10:18,030
sources as I met rocket mall as

00:10:14,850 --> 00:10:20,640
comfortable to Dhaka even the

00:10:18,030 --> 00:10:24,600
repositories or registries hole they

00:10:20,640 --> 00:10:28,500
call it are the same and this is the

00:10:24,600 --> 00:10:32,270
entire ecosystem selves is a complete

00:10:28,500 --> 00:10:36,600
sheet of new buzz words with symbols I

00:10:32,270 --> 00:10:39,089
mentioned core as rocket they have clear

00:10:36,600 --> 00:10:41,520
this is a registry a registry is where

00:10:39,089 --> 00:10:45,240
you put your images so docker hub is the

00:10:41,520 --> 00:10:50,040
most known registry but as a public

00:10:45,240 --> 00:10:51,810
registry Claire which is has implemented

00:10:50,040 --> 00:10:54,780
the feature that it scans every

00:10:51,810 --> 00:10:58,280
container against the cve records so it

00:10:54,780 --> 00:11:02,900
scans every container for security bugs

00:10:58,280 --> 00:11:05,310
this is important for secure for for

00:11:02,900 --> 00:11:07,320
container lifecycle management because

00:11:05,310 --> 00:11:10,470
if you look into the docker hub

00:11:07,320 --> 00:11:13,710
and put the things into clay of you find

00:11:10,470 --> 00:11:16,950
that sixty percent of the images yet

00:11:13,710 --> 00:11:21,750
have the ghost bug installed so this is

00:11:16,950 --> 00:11:26,670
a quite a heavy back in the DNS system

00:11:21,750 --> 00:11:28,950
of the G lipsy and can be can be

00:11:26,670 --> 00:11:32,310
exploited from outside and sixty percent

00:11:28,950 --> 00:11:35,670
of buggy images on a on the registry it

00:11:32,310 --> 00:11:40,230
creates a lot of distrust on the entire

00:11:35,670 --> 00:11:43,650
ecosystem so the recommendation is not

00:11:40,230 --> 00:11:47,250
to use under no circumstances some

00:11:43,650 --> 00:11:49,080
unknown images from any registry but we

00:11:47,250 --> 00:11:52,620
built them from the document which is

00:11:49,080 --> 00:11:54,540
also all the ways possible it's a little

00:11:52,620 --> 00:11:56,970
bit time consuming but you can then

00:11:54,540 --> 00:12:00,240
check that everything is up to date

00:11:56,970 --> 00:12:03,960
don't use unknown images you would not

00:12:00,240 --> 00:12:07,860
start an unknown exer on your system if

00:12:03,960 --> 00:12:10,260
you would use this crappy operating

00:12:07,860 --> 00:12:14,190
system and you should not use unknown

00:12:10,260 --> 00:12:16,670
control containers on your on in your

00:12:14,190 --> 00:12:20,840
infrastructure or on your laptop I

00:12:16,670 --> 00:12:23,700
mentioned the etcd this is a distributed

00:12:20,840 --> 00:12:26,280
key value store it's very similar I

00:12:23,700 --> 00:12:30,380
think like the CAF car key value store

00:12:26,280 --> 00:12:33,270
and has the same philosophy in mind so

00:12:30,380 --> 00:12:36,480
I'm not don't ask me about Kafka's all

00:12:33,270 --> 00:12:38,460
this is a very simple key value store

00:12:36,480 --> 00:12:44,100
then you have canal canal is a joint

00:12:38,460 --> 00:12:46,800
project less than four weeks old there

00:12:44,100 --> 00:12:49,860
was a OpenStack project with this little

00:12:46,800 --> 00:12:52,890
cap this is calico and there was a

00:12:49,860 --> 00:12:55,080
network layer flannel directly building

00:12:52,890 --> 00:13:00,420
to co by natives and they merged into

00:12:55,080 --> 00:13:02,670
canal so this is open stack power for

00:13:00,420 --> 00:13:06,990
networking joined with the simplicity of

00:13:02,670 --> 00:13:09,900
Leonard I mention cubanita this is a

00:13:06,990 --> 00:13:12,060
sign of tomatoes tomatoes is also from

00:13:09,900 --> 00:13:17,210
Berlin so soundcloud started it and

00:13:12,060 --> 00:13:21,270
chorus took over so they are doing it

00:13:17,210 --> 00:13:24,480
now on their own stack and

00:13:21,270 --> 00:13:27,720
yeah there is another thing a little

00:13:24,480 --> 00:13:31,740
thing openstack can be run in

00:13:27,720 --> 00:13:34,310
Combinator's if you use call s on your

00:13:31,740 --> 00:13:37,350
bare metal hardware it takes 15 minutes

00:13:34,310 --> 00:13:39,600
not 15 weeks or 15 months to set up a

00:13:37,350 --> 00:13:42,150
complete olmstead cluster from the

00:13:39,600 --> 00:13:45,030
container so this project doesn't even

00:13:42,150 --> 00:13:47,820
have a logo with the 2nd ed this is open

00:13:45,030 --> 00:13:53,340
stack inside technology tectonic which

00:13:47,820 --> 00:13:56,190
is a cuales project and last week they

00:13:53,340 --> 00:13:59,130
announced toes which is a storage

00:13:56,190 --> 00:14:00,660
product so they address the problem of

00:13:59,130 --> 00:14:03,960
these two beauties storage and data

00:14:00,660 --> 00:14:09,410
centers and toes so new it does not even

00:14:03,960 --> 00:14:15,120
have a logo no so this was a bad thing

00:14:09,410 --> 00:14:18,330
and now what real world applications can

00:14:15,120 --> 00:14:22,140
you do this coordinators and what you

00:14:18,330 --> 00:14:26,130
have to address in the real world and as

00:14:22,140 --> 00:14:28,560
you know almost no projects starts in

00:14:26,130 --> 00:14:32,550
greenfield even even if you are start up

00:14:28,560 --> 00:14:35,460
or spin off of a big company you have

00:14:32,550 --> 00:14:37,740
something to respect you always have

00:14:35,460 --> 00:14:39,800
some kind of technical depth the

00:14:37,740 --> 00:14:42,050
environments are not made for

00:14:39,800 --> 00:14:46,290
microservices everywhere at the moment

00:14:42,050 --> 00:14:50,160
and this means you have to do something

00:14:46,290 --> 00:14:52,560
that your application is really a micro

00:14:50,160 --> 00:14:54,870
service that through that your

00:14:52,560 --> 00:14:57,300
application fits into containers I

00:14:54,870 --> 00:14:58,890
assume you have several layers of an

00:14:57,300 --> 00:15:00,870
application normally you think you have

00:14:58,890 --> 00:15:04,020
a three-tier system but you actually

00:15:00,870 --> 00:15:07,470
have at minimum five or even more tier

00:15:04,020 --> 00:15:09,360
system and starting from the top

00:15:07,470 --> 00:15:11,990
normally you see something for web

00:15:09,360 --> 00:15:16,800
application which the load balancer and

00:15:11,990 --> 00:15:18,600
then you have your web page the web

00:15:16,800 --> 00:15:21,270
portal which looks to the outside which

00:15:18,600 --> 00:15:24,330
is completely state leasing then you

00:15:21,270 --> 00:15:26,700
have some cash like memcache or here it

00:15:24,330 --> 00:15:29,640
is and then you have the business layer

00:15:26,700 --> 00:15:32,220
where the web where main applications

00:15:29,640 --> 00:15:33,660
are notifications user profile

00:15:32,220 --> 00:15:35,050
everything which is processed which

00:15:33,660 --> 00:15:40,149
makes your business logic

00:15:35,050 --> 00:15:42,190
and then you have something which you

00:15:40,149 --> 00:15:44,620
really care about this is your storage

00:15:42,190 --> 00:15:47,529
layer so so you're persistent state

00:15:44,620 --> 00:15:50,709
where keeps your state storage the SQL

00:15:47,529 --> 00:15:53,230
is a no secretly bees but also are the

00:15:50,709 --> 00:15:56,579
messaging systems or doesn't matter if

00:15:53,230 --> 00:16:01,630
it is rabbitmq or Kafka you have some

00:15:56,579 --> 00:16:04,720
stayed inside here and you should if you

00:16:01,630 --> 00:16:07,140
start designing microservices separate

00:16:04,720 --> 00:16:10,630
this very clear for carefully so only

00:16:07,140 --> 00:16:13,180
the upper four layers are completely

00:16:10,630 --> 00:16:15,820
stateless you should not have a database

00:16:13,180 --> 00:16:21,130
in your web may nap this is something

00:16:15,820 --> 00:16:23,320
the lamp stack tries to to force on you

00:16:21,130 --> 00:16:26,970
that you have a database and apache and

00:16:23,320 --> 00:16:30,700
PHP applications the same thing this is

00:16:26,970 --> 00:16:35,769
on scale this is fatal you cannot really

00:16:30,700 --> 00:16:38,200
use it the cash can be reconstructed so

00:16:35,769 --> 00:16:40,540
I consider their the ready sketch or any

00:16:38,200 --> 00:16:43,149
other case more or less I stateless the

00:16:40,540 --> 00:16:45,250
web portal does only view to the outside

00:16:43,149 --> 00:16:47,920
world and should be stateless the load

00:16:45,250 --> 00:16:50,290
balancer should be stateless and this is

00:16:47,920 --> 00:16:53,490
a little bit contradiction of some old

00:16:50,290 --> 00:16:56,980
philosophies you need if we will have

00:16:53,490 --> 00:16:59,020
egb servers where the session was so

00:16:56,980 --> 00:17:01,990
expensive that you had to stick a user

00:16:59,020 --> 00:17:06,339
to a specially gb server this is not a

00:17:01,990 --> 00:17:09,329
good choice anymore so the result of the

00:17:06,339 --> 00:17:14,199
thing is you should try to make

00:17:09,329 --> 00:17:16,839
everything which changes rapidly so your

00:17:14,199 --> 00:17:19,660
application if you want to do deployment

00:17:16,839 --> 00:17:24,309
every every 20 minutes should be

00:17:19,660 --> 00:17:28,990
stateless and you should be should care

00:17:24,309 --> 00:17:32,590
about things in your database if you are

00:17:28,990 --> 00:17:37,679
running it in a cloud amazon google

00:17:32,590 --> 00:17:41,530
cloud whatever you should use at least

00:17:37,679 --> 00:17:43,510
where it is possible the storage

00:17:41,530 --> 00:17:47,010
services of the cloud provider this

00:17:43,510 --> 00:17:50,210
makes much less effort

00:17:47,010 --> 00:17:54,270
then then put in setting up your own

00:17:50,210 --> 00:17:57,270
let's say mon woody be server and use it

00:17:54,270 --> 00:17:59,610
in in production but if for some reason

00:17:57,270 --> 00:18:03,390
you have a very special database if you

00:17:59,610 --> 00:18:05,130
need some tweaked performance or if you

00:18:03,390 --> 00:18:07,440
have to run your own MongoDB because the

00:18:05,130 --> 00:18:09,150
Mon would be in your cloud providers

00:18:07,440 --> 00:18:12,150
learn is too expensive or you need

00:18:09,150 --> 00:18:15,900
special features have your own thing you

00:18:12,150 --> 00:18:19,140
can put it into dedicated machines run

00:18:15,900 --> 00:18:22,770
it under coburn it is with without

00:18:19,140 --> 00:18:25,920
replicating all the the application on

00:18:22,770 --> 00:18:27,630
top of it and run it as a container in a

00:18:25,920 --> 00:18:29,610
replication controller with a

00:18:27,630 --> 00:18:32,790
replication number of one the

00:18:29,610 --> 00:18:35,760
disadvantage of these databases is every

00:18:32,790 --> 00:18:38,580
database has its own way of replicating

00:18:35,760 --> 00:18:42,210
data therefore you have to care about

00:18:38,580 --> 00:18:45,300
every database individually it's a

00:18:42,210 --> 00:18:48,180
little bit of work so our recommendation

00:18:45,300 --> 00:18:50,940
first recommendation will shrink the

00:18:48,180 --> 00:18:52,590
number of databases to the minimum there

00:18:50,940 --> 00:18:55,980
is no real need why you should have a

00:18:52,590 --> 00:18:59,070
postgres ending mysql and a lot of other

00:18:55,980 --> 00:19:03,210
sequel databases in parallel so is

00:18:59,070 --> 00:19:12,120
always a good advice to minimize the

00:19:03,210 --> 00:19:14,100
external dependencies yeah and what it

00:19:12,120 --> 00:19:16,770
is what you see here is you have

00:19:14,100 --> 00:19:19,530
normally a heterogeneous environment

00:19:16,770 --> 00:19:21,780
every real application has different

00:19:19,530 --> 00:19:25,850
things different messaging service so

00:19:21,780 --> 00:19:28,740
you have normally a full stack of

00:19:25,850 --> 00:19:31,860
different things and you can isolate

00:19:28,740 --> 00:19:34,920
them in different containers what you

00:19:31,860 --> 00:19:39,210
also should think about that docker is

00:19:34,920 --> 00:19:43,680
if you really look into it it's a kind

00:19:39,210 --> 00:19:45,420
of stacked archive and you can use this

00:19:43,680 --> 00:19:49,680
archive as your standard deployment

00:19:45,420 --> 00:19:52,380
format there is no need to do rpms and

00:19:49,680 --> 00:19:56,670
configuration management in parallel to

00:19:52,380 --> 00:19:58,920
two containers microservices the only

00:19:56,670 --> 00:20:00,690
people who want configuration management

00:19:58,920 --> 00:20:04,590
in containers are from company

00:20:00,690 --> 00:20:07,920
we want to use make you use their tools

00:20:04,590 --> 00:20:12,200
and this is not necessary so think about

00:20:07,920 --> 00:20:18,390
your deployment chain automation if you

00:20:12,200 --> 00:20:20,220
have not done many things in this area

00:20:18,390 --> 00:20:23,970
where you say I want to automate my

00:20:20,220 --> 00:20:27,900
deployment probably containers will not

00:20:23,970 --> 00:20:31,500
solve your problem and will it there's

00:20:27,900 --> 00:20:33,750
no need that you at containers if you

00:20:31,500 --> 00:20:36,090
did not do this single right because it

00:20:33,750 --> 00:20:38,250
then you have another toy to play and do

00:20:36,090 --> 00:20:41,040
to fiddle with and this does not make

00:20:38,250 --> 00:20:43,620
your life easier you should first at

00:20:41,040 --> 00:20:49,920
least plan to run everything in an

00:20:43,620 --> 00:20:54,270
automated system so I mentioned these

00:20:49,920 --> 00:20:58,340
things already migration what is a

00:20:54,270 --> 00:21:01,170
typical thing of a migration normally

00:20:58,340 --> 00:21:05,280
dr. and all the other recommend we have

00:21:01,170 --> 00:21:07,740
only a single process in a container but

00:21:05,280 --> 00:21:13,650
what if your application consists of a

00:21:07,740 --> 00:21:16,380
dozen process or more than one then both

00:21:13,650 --> 00:21:19,110
darker and also coronitas have a concept

00:21:16,380 --> 00:21:22,830
of aggregating containers that they can

00:21:19,110 --> 00:21:26,730
share the network that they have common

00:21:22,830 --> 00:21:30,240
file system and that they have the same

00:21:26,730 --> 00:21:32,640
fate so they are created together they

00:21:30,240 --> 00:21:36,080
are running on the same node which is a

00:21:32,640 --> 00:21:39,590
guarantee they are terminated together

00:21:36,080 --> 00:21:43,430
they have a singer network address end

00:21:39,590 --> 00:21:47,250
as interestingly they can share volumes

00:21:43,430 --> 00:21:50,820
so everything and in volumes also means

00:21:47,250 --> 00:21:54,780
for example circles you can expose an

00:21:50,820 --> 00:21:59,430
HDFS filesystem as a socket to a

00:21:54,780 --> 00:22:02,190
different container this way and so you

00:21:59,430 --> 00:22:05,850
change your via virtual machine cluster

00:22:02,190 --> 00:22:08,580
into pots running into Combinator's and

00:22:05,850 --> 00:22:10,130
then important I started again you

00:22:08,580 --> 00:22:11,960
separate the kettle

00:22:10,130 --> 00:22:16,400
your pets so the stateless containers

00:22:11,960 --> 00:22:18,260
from your databases and your

00:22:16,400 --> 00:22:19,880
configuration management is not

00:22:18,260 --> 00:22:23,060
completely gone away but you should

00:22:19,880 --> 00:22:25,190
separate built time and one time that

00:22:23,060 --> 00:22:28,700
you simply build containers on a machine

00:22:25,190 --> 00:22:32,270
test them automatically push them to a

00:22:28,700 --> 00:22:36,620
repository where they are scanned for

00:22:32,270 --> 00:22:44,330
security packs and then you can roll

00:22:36,620 --> 00:22:46,790
them out automatically in production so

00:22:44,330 --> 00:22:49,130
if you have stayed you have to care

00:22:46,790 --> 00:22:52,730
about it but the general mindset should

00:22:49,130 --> 00:22:56,450
be that everything should be an

00:22:52,730 --> 00:23:00,530
ephemeral deployment unit even the

00:22:56,450 --> 00:23:03,790
database could be ephemeral but the

00:23:00,530 --> 00:23:05,840
storage below together with replication

00:23:03,790 --> 00:23:13,880
guarantees that you do not lose your

00:23:05,840 --> 00:23:17,180
data okay you can more or less if you if

00:23:13,880 --> 00:23:22,370
everything is stateless internally you

00:23:17,180 --> 00:23:26,240
talk talk with REST API and you can

00:23:22,370 --> 00:23:31,070
connect all the front ends and to the

00:23:26,240 --> 00:23:34,850
rest of the application and the

00:23:31,070 --> 00:23:39,730
deployment pipeline takes care of that

00:23:34,850 --> 00:23:43,580
you can give environment variables and

00:23:39,730 --> 00:23:46,520
configurations like database password is

00:23:43,580 --> 00:23:48,530
secrets into the into the container so

00:23:46,520 --> 00:23:50,150
normally you have a big problem if you

00:23:48,530 --> 00:23:53,030
want to run production with different

00:23:50,150 --> 00:23:56,150
database passwords then testing and

00:23:53,030 --> 00:24:00,770
development co benitez has a concept of

00:23:56,150 --> 00:24:02,780
a secret where you simply can put a

00:24:00,770 --> 00:24:04,400
secret into the coup benitez classes

00:24:02,780 --> 00:24:06,590
completely encrypted it will be

00:24:04,400 --> 00:24:11,000
encrypted in the running container and

00:24:06,590 --> 00:24:14,600
it will expose will be exposed as a file

00:24:11,000 --> 00:24:17,780
system but it is not written to hardest

00:24:14,600 --> 00:24:21,710
it sits on a run disk so that you never

00:24:17,780 --> 00:24:24,370
expose your your passwords to a file

00:24:21,710 --> 00:24:24,370
system outside

00:24:25,299 --> 00:24:29,629
you're your crew benitez clusterware

00:24:27,679 --> 00:24:34,729
whether somebody could find it in a

00:24:29,629 --> 00:24:37,970
casual something else yeah you could use

00:24:34,729 --> 00:24:42,799
normal logging and for for large-scale

00:24:37,970 --> 00:24:45,799
things we recommend primito s and this

00:24:42,799 --> 00:24:47,779
is because normally you need / meters is

00:24:45,799 --> 00:24:50,059
a very simple monitoring system you

00:24:47,779 --> 00:24:53,299
cannot put very sophisticated things you

00:24:50,059 --> 00:24:56,539
do only any values but with a huge

00:24:53,299 --> 00:25:01,279
number of containers it's a sec exactly

00:24:56,539 --> 00:25:03,470
what you want so I already mentioned

00:25:01,279 --> 00:25:06,979
this and again this is a desired

00:25:03,470 --> 00:25:08,929
architecture so try in the first step to

00:25:06,979 --> 00:25:11,989
identify all your applications that they

00:25:08,929 --> 00:25:16,580
fit into this picture and make them

00:25:11,989 --> 00:25:20,059
available as stateless containers case

00:25:16,580 --> 00:25:21,559
study here is emo illiteracy new

00:25:20,059 --> 00:25:26,119
messaging service it's bound to your

00:25:21,559 --> 00:25:29,690
telephone number you can take a normal

00:25:26,119 --> 00:25:33,379
phone call in on your one completely

00:25:29,690 --> 00:25:36,080
different device it can be a web web RTC

00:25:33,379 --> 00:25:39,679
device so in your browser you can use it

00:25:36,080 --> 00:25:47,599
on on your phone you can use it on an

00:25:39,679 --> 00:25:50,929
iPad or wherever and it's coming it's

00:25:47,599 --> 00:25:52,429
going productive this summer and will be

00:25:50,929 --> 00:25:56,389
rolled out in different european

00:25:52,429 --> 00:25:58,729
countries this is a telecom subsidiary

00:25:56,389 --> 00:26:01,429
using google technology in the Amazon

00:25:58,729 --> 00:26:06,950
Cloud and it's kind of you see

00:26:01,429 --> 00:26:13,549
everything is spread best practice if

00:26:06,950 --> 00:26:16,039
you have the main parts open source so

00:26:13,549 --> 00:26:18,440
what did we do with the application so

00:26:16,039 --> 00:26:20,659
we had found every programming language

00:26:18,440 --> 00:26:22,869
we heard about it so Java is very

00:26:20,659 --> 00:26:25,820
popular pison is very popular no chairs

00:26:22,869 --> 00:26:30,109
will be they have different challenges

00:26:25,820 --> 00:26:34,429
easy thing we found was Java with spring

00:26:30,109 --> 00:26:36,930
boot and why is it so easy because

00:26:34,429 --> 00:26:39,690
spring boot has a unique

00:26:36,930 --> 00:26:41,970
a that you can overwrite the

00:26:39,690 --> 00:26:44,400
properties in property files on the

00:26:41,970 --> 00:26:47,280
command line of the Java Virtual Machine

00:26:44,400 --> 00:26:49,530
so you can definitely pass parameters

00:26:47,280 --> 00:26:53,010
quite easily from the KU Benitez

00:26:49,530 --> 00:26:58,050
environment to to Java Python also works

00:26:53,010 --> 00:27:00,420
well packaging box and yeah a little bit

00:26:58,050 --> 00:27:03,210
hard was Ruby because the Ruby gems have

00:27:00,420 --> 00:27:04,920
never problems at you they always try to

00:27:03,210 --> 00:27:07,440
install a compiler on the system so we

00:27:04,920 --> 00:27:10,890
are a bit fighting with it but there is

00:27:07,440 --> 00:27:12,750
a solution on the horizon that you can

00:27:10,890 --> 00:27:18,030
use traveling would be to create a

00:27:12,750 --> 00:27:20,460
static binary that you can run without

00:27:18,030 --> 00:27:24,090
even having an operating system in a

00:27:20,460 --> 00:27:26,700
container so the ruby version hillis is

00:27:24,090 --> 00:27:29,160
a vm stuff so it bloats your containers

00:27:26,700 --> 00:27:32,550
it's never up to date installed a lot of

00:27:29,160 --> 00:27:42,950
things and we try to fiddle around with

00:27:32,550 --> 00:27:46,650
this so what did we learn so we are

00:27:42,950 --> 00:27:48,150
preparing for security audit and in the

00:27:46,650 --> 00:27:53,520
telecom environment we have to do this

00:27:48,150 --> 00:27:57,300
anyway separation is very easy to do we

00:27:53,520 --> 00:28:00,810
had a little bit learning with daca

00:27:57,300 --> 00:28:02,880
files so effectively dhaka creates a new

00:28:00,810 --> 00:28:04,890
image for every line in blocker file if

00:28:02,880 --> 00:28:06,990
you don't do it right then you wait

00:28:04,890 --> 00:28:10,440
forever until a docker file build is

00:28:06,990 --> 00:28:12,630
done so it's kind of inheritance if you

00:28:10,440 --> 00:28:15,900
do it right then you only change the

00:28:12,630 --> 00:28:18,030
last line in your application and then

00:28:15,900 --> 00:28:20,100
it's quite fast if you do it wrong you

00:28:18,030 --> 00:28:25,470
have to install the entire operating

00:28:20,100 --> 00:28:28,080
system and and this takes forever and k

00:28:25,470 --> 00:28:30,050
io is a commercial version of clays or

00:28:28,080 --> 00:28:34,200
clay is completely open so this is a

00:28:30,050 --> 00:28:36,810
registry scanning for the ve against

00:28:34,200 --> 00:28:39,780
easy database for security and this is

00:28:36,810 --> 00:28:41,430
is good for a container lifecycle

00:28:39,780 --> 00:28:43,440
monitoring if you don't have container

00:28:41,430 --> 00:28:45,990
lives or any lifecycle monitoring for

00:28:43,440 --> 00:28:49,380
your applications and you probably have

00:28:45,990 --> 00:28:53,640
some security problems

00:28:49,380 --> 00:28:58,410
okay outcome walls we have Noah scalable

00:28:53,640 --> 00:29:01,020
and Cuba fide application and this was a

00:28:58,410 --> 00:29:04,680
service architecture they always want

00:29:01,020 --> 00:29:08,430
way I wanted to have and in now using it

00:29:04,680 --> 00:29:10,680
in a new project it was quite quite easy

00:29:08,430 --> 00:29:14,940
to enforce it and to implement it

00:29:10,680 --> 00:29:18,900
everything in standardized yeah we have

00:29:14,940 --> 00:29:24,840
used everything as if we had influenced

00:29:18,900 --> 00:29:28,920
enough to use cloud providers databases

00:29:24,840 --> 00:29:31,740
and everything seems to work for

00:29:28,920 --> 00:29:34,910
business value we are deploying now

00:29:31,740 --> 00:29:37,950
quite fast or update takes only minutes

00:29:34,910 --> 00:29:40,440
and not ours and we don't have to call

00:29:37,950 --> 00:29:44,990
anybody so at the moment we are passing

00:29:40,440 --> 00:29:53,150
it to the very small operations team

00:29:44,990 --> 00:29:53,150
it's simple and yeah I managed all this

00:29:55,160 --> 00:30:00,930
hey I country us again about

00:29:58,280 --> 00:30:03,780
conformational let's time war let's talk

00:30:00,930 --> 00:30:05,490
about what's what's missing oh you

00:30:03,780 --> 00:30:09,300
always want to have leaner containers

00:30:05,490 --> 00:30:11,340
and lean makes in a container normally

00:30:09,300 --> 00:30:15,780
you have parts of the operating system

00:30:11,340 --> 00:30:18,060
so this is a kind of heritage of the

00:30:15,780 --> 00:30:20,250
thinking that it was intended like a

00:30:18,060 --> 00:30:23,250
veteran machine but you don't actually

00:30:20,250 --> 00:30:25,800
need an operating system in a container

00:30:23,250 --> 00:30:28,020
you can most people don't even notice

00:30:25,800 --> 00:30:30,870
that they you can define a container

00:30:28,020 --> 00:30:32,780
from scratch and if you can create a

00:30:30,870 --> 00:30:35,340
static binary which does all your

00:30:32,780 --> 00:30:37,770
requests and you can have a single

00:30:35,340 --> 00:30:40,320
application without even at G lipsy

00:30:37,770 --> 00:30:43,550
inside the container we have an example

00:30:40,320 --> 00:30:47,210
of how to do with this goal it's quite

00:30:43,550 --> 00:30:48,960
quite straightforward with Ruby

00:30:47,210 --> 00:30:53,970
straightforward if you fight with all

00:30:48,960 --> 00:30:56,550
the games and yeah this is where we

00:30:53,970 --> 00:30:58,350
intend to go and if you don't have plans

00:30:56,550 --> 00:31:00,390
of the operating system the containers

00:30:58,350 --> 00:31:02,759
containers are more secure than was also

00:31:00,390 --> 00:31:06,329
it's quite hard to imagine

00:31:02,759 --> 00:31:08,820
something where you have a problem where

00:31:06,329 --> 00:31:17,419
only one single static process as a

00:31:08,820 --> 00:31:17,419
security problem in the container yeah

00:31:20,359 --> 00:31:26,789
yeah oh one last thing about the data

00:31:23,639 --> 00:31:29,099
bases best practice if you do everything

00:31:26,789 --> 00:31:31,349
automatically you should notice that

00:31:29,099 --> 00:31:33,929
some frameworks and false database

00:31:31,349 --> 00:31:36,779
integrations so you have to handle it

00:31:33,929 --> 00:31:39,839
you have to tell it to the team there is

00:31:36,779 --> 00:31:42,089
no rollback in this philosophy so the

00:31:39,839 --> 00:31:43,859
mindset always rolls forward this

00:31:42,089 --> 00:31:45,839
implies that you have to test it

00:31:43,859 --> 00:31:49,169
carefully with a right database scheme

00:31:45,839 --> 00:31:53,639
if you are on our SQL side and you have

00:31:49,169 --> 00:31:55,799
to look how how to get it there are

00:31:53,639 --> 00:31:58,319
solutions behind it for example use

00:31:55,799 --> 00:32:00,649
different databases so great I o is an

00:31:58,319 --> 00:32:04,229
sequel database based on elastic search

00:32:00,649 --> 00:32:08,699
which is very simple and could handle it

00:32:04,229 --> 00:32:15,059
without having a scheme inside the

00:32:08,699 --> 00:32:20,579
actual data so yeah container focus

00:32:15,059 --> 00:32:23,249
languages I would recommend yes and does

00:32:20,579 --> 00:32:25,190
it really scale actually we will see i

00:32:23,249 --> 00:32:27,599
think we will scale it by country

00:32:25,190 --> 00:32:29,969
starting in eastern europe of smaller

00:32:27,599 --> 00:32:34,440
countries and roll it out if it is

00:32:29,969 --> 00:32:37,049
successful in germany you have to be a

00:32:34,440 --> 00:32:39,899
little bit careful about single tenant

00:32:37,049 --> 00:32:42,690
and multi-talent use cases because if

00:32:39,899 --> 00:32:44,819
you run some if you have private keys

00:32:42,690 --> 00:32:46,529
involved then running an application

00:32:44,819 --> 00:32:48,659
from different teams or different

00:32:46,529 --> 00:32:56,190
countries on the same hardware could be

00:32:48,659 --> 00:32:58,859
a leak but if you really need it and

00:32:56,190 --> 00:33:01,379
want to use rocket rocket has in unique

00:32:58,859 --> 00:33:04,639
feature if you want to improve the

00:33:01,379 --> 00:33:07,469
isolation rocket can even like the

00:33:04,639 --> 00:33:10,709
versions for other operating systems can

00:33:07,469 --> 00:33:15,599
start a tiny virtual machine which gives

00:33:10,709 --> 00:33:18,389
you another level of isolation yeah and

00:33:15,599 --> 00:33:19,919
the good thing is if you don't trust all

00:33:18,389 --> 00:33:21,809
these cloud providers you can't run it

00:33:19,919 --> 00:33:25,319
on your own hardware this is our example

00:33:21,809 --> 00:33:28,440
for first con so we had four raspberry

00:33:25,319 --> 00:33:30,299
PI's and the only problem was to get it

00:33:28,440 --> 00:33:33,529
into an airplane and explain to the

00:33:30,299 --> 00:33:36,539
people that this is not a time bump and

00:33:33,529 --> 00:33:39,479
communities is terribly slow but it

00:33:36,539 --> 00:33:42,179
works on raspberry PI's you can look it

00:33:39,479 --> 00:33:44,009
up if you want to run it in your data

00:33:42,179 --> 00:33:46,169
center there is there are even data

00:33:44,009 --> 00:33:49,529
center providers at the moment who

00:33:46,169 --> 00:33:53,190
offering in Europe koo benitez on bare

00:33:49,529 --> 00:33:54,809
metal we can connect value with them and

00:33:53,190 --> 00:33:59,249
you have to implement providers for

00:33:54,809 --> 00:34:01,139
storage which is quite quite easy

00:33:59,249 --> 00:34:03,809
because you can use I scalzi and sings

00:34:01,139 --> 00:34:06,149
Lexus network network very depends on

00:34:03,809 --> 00:34:10,079
your local environment firewall provide

00:34:06,149 --> 00:34:14,069
us examples for firewall providers where

00:34:10,079 --> 00:34:16,980
you could use I think that zalando has

00:34:14,069 --> 00:34:19,619
an example how to configure f5s with a

00:34:16,980 --> 00:34:22,379
queuing system and then it works but you

00:34:19,619 --> 00:34:24,839
have to do it it will not give you the

00:34:22,379 --> 00:34:28,500
same comfort as in the clouds if you

00:34:24,839 --> 00:34:30,450
don't implement these providers so if

00:34:28,500 --> 00:34:32,129
you want to have more from us we have a

00:34:30,450 --> 00:34:36,389
github account where we publish

00:34:32,129 --> 00:34:39,089
everything we give trainings we do quite

00:34:36,389 --> 00:34:41,009
regular blocks on everything which is

00:34:39,089 --> 00:34:45,869
open source related in our company and

00:34:41,009 --> 00:34:51,470
the world and yeah if you want to test

00:34:45,869 --> 00:34:55,379
it without hassle and and quite easily

00:34:51,470 --> 00:34:57,869
you can easily use it on the Google

00:34:55,379 --> 00:35:03,150
cloud platform and with these links you

00:34:57,869 --> 00:35:07,200
gave get some 300 bucks on a cloud time

00:35:03,150 --> 00:35:10,859
and computing time and you can get have

00:35:07,200 --> 00:35:13,470
even 200 more if you test it it does not

00:35:10,859 --> 00:35:15,450
influence where you run it later so most

00:35:13,470 --> 00:35:16,950
customers of us are using it in the

00:35:15,450 --> 00:35:18,839
Amazon Cloud which is a little bit set

00:35:16,950 --> 00:35:20,880
for google but they don't have a data

00:35:18,839 --> 00:35:23,549
center in germany and most customers

00:35:20,880 --> 00:35:27,779
require a data center in germany by law

00:35:23,549 --> 00:35:28,230
or by the internal politics and maybe we

00:35:27,779 --> 00:35:31,290
will

00:35:28,230 --> 00:35:34,230
have silax that we see a data center we

00:35:31,290 --> 00:35:36,900
will cloud data center in Germany so

00:35:34,230 --> 00:35:41,330
thank you very much and if you have

00:35:36,900 --> 00:35:41,330
questions please eat two things Thomas

00:35:44,210 --> 00:35:52,350
do we have questions yeah thanks for the

00:35:50,580 --> 00:35:54,869
talk could you explain hurts a little

00:35:52,350 --> 00:35:56,580
bit how you in the best case handle

00:35:54,869 --> 00:35:58,770
configuration for the containers so

00:35:56,580 --> 00:36:00,810
let's say for example a passport or a

00:35:58,770 --> 00:36:03,119
private key which you need inside the

00:36:00,810 --> 00:36:05,010
containers you should not bake it into

00:36:03,119 --> 00:36:07,770
the container I assume but where does it

00:36:05,010 --> 00:36:11,220
come from it comes from the cubanita

00:36:07,770 --> 00:36:12,960
secrets so this is a special concept and

00:36:11,220 --> 00:36:14,760
you should not put it into the

00:36:12,960 --> 00:36:17,220
configuration itself you shouldn't put

00:36:14,760 --> 00:36:20,190
it into an environment variable you

00:36:17,220 --> 00:36:23,700
should put it in a way in any city in

00:36:20,190 --> 00:36:25,910
the thicket in its cubanita secret is

00:36:23,700 --> 00:36:28,830
yummo file you can have a different

00:36:25,910 --> 00:36:30,510
secret with the same name in testing and

00:36:28,830 --> 00:36:33,840
production and then you pass a secret

00:36:30,510 --> 00:36:35,670
and get access to the database and from

00:36:33,840 --> 00:36:40,890
inside the container it looks like a

00:36:35,670 --> 00:36:43,410
bunch of files in the file system or if

00:36:40,890 --> 00:36:46,560
you on a big scale you can use solutions

00:36:43,410 --> 00:36:48,210
like forward if you want to solve the

00:36:46,560 --> 00:36:54,350
authentification problem but this is

00:36:48,210 --> 00:36:54,350
complete bigger story more questions

00:37:00,980 --> 00:37:07,359
alright let's think Thomas again okay

00:37:04,310 --> 00:37:07,359

YouTube URL: https://www.youtube.com/watch?v=_XqkfL5IopM


