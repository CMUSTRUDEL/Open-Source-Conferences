Title: Lightning Talk: Elias Nema: Your way into better product development
Publication date: 2020-07-02
Playlist: Haystack - Joint Virtual Event 2020
Description: 
	Lightning talk from Berlin Buzzwords | MICES | Haystack â€“ Joint Event 2020
Captions: 
	00:00:08,140 --> 00:00:15,460
and we have the next talk from alias

00:00:12,970 --> 00:00:16,750
Nimmo who would be talking about better

00:00:15,460 --> 00:00:21,189
product development

00:00:16,750 --> 00:00:23,410
hello Elias over to you yeah hi everyone

00:00:21,189 --> 00:00:25,390
my talk is gonna be more matter compared

00:00:23,410 --> 00:00:28,779
to previously more technical talks so

00:00:25,390 --> 00:00:31,540
I'm gonna talking about how

00:00:28,779 --> 00:00:34,630
hypothesizing can help you in a better

00:00:31,540 --> 00:00:36,400
product development and speaking about

00:00:34,630 --> 00:00:38,290
our use case and leading personalization

00:00:36,400 --> 00:00:40,899
and conditions at Oleg's group which is

00:00:38,290 --> 00:00:44,469
an online marketplace operating in like

00:00:40,899 --> 00:00:48,250
more than 25 countries with 350 million

00:00:44,469 --> 00:00:50,609
of our monthly diffusers and that's how

00:00:48,250 --> 00:00:53,440
a typical development flow looked for us

00:00:50,609 --> 00:00:56,230
so it all started with the idea and went

00:00:53,440 --> 00:00:58,059
to the implementation obviously we sound

00:00:56,230 --> 00:00:59,289
like a cycles and iterations in-between

00:00:58,059 --> 00:01:01,570
for fast feedback and so on but

00:00:59,289 --> 00:01:04,180
generally you take an idea you implement

00:01:01,570 --> 00:01:06,250
it and like we started noticing that

00:01:04,180 --> 00:01:08,440
it's kind of bad for data products

00:01:06,250 --> 00:01:10,330
because like we're doing personalization

00:01:08,440 --> 00:01:10,810
organizations and it's a our bread and

00:01:10,330 --> 00:01:13,450
butter

00:01:10,810 --> 00:01:16,000
so in data product success doesn't

00:01:13,450 --> 00:01:18,270
depend on like a code system quality so

00:01:16,000 --> 00:01:20,790
much but in it's hard to predict results

00:01:18,270 --> 00:01:22,990
from the initial project planning and

00:01:20,790 --> 00:01:24,820
also we notice that it's kind of

00:01:22,990 --> 00:01:27,970
optimizes for wrong things so often

00:01:24,820 --> 00:01:29,950
customers is being ignored and like only

00:01:27,970 --> 00:01:32,530
included in the process of Revelation

00:01:29,950 --> 00:01:34,600
only when the implementation is done so

00:01:32,530 --> 00:01:38,770
like okay we need to solve it what do we

00:01:34,600 --> 00:01:41,110
do obviously go on Twitter and like very

00:01:38,770 --> 00:01:43,090
so that actually we're not alone and

00:01:41,110 --> 00:01:45,100
people are really struggling with it as

00:01:43,090 --> 00:01:48,219
well and you can see that it's kind of

00:01:45,100 --> 00:01:49,570
really scary to spend six to twelve

00:01:48,219 --> 00:01:51,579
months on building something that is

00:01:49,570 --> 00:01:54,130
wrong and then in another case we see

00:01:51,579 --> 00:01:56,320
that company has learned about the

00:01:54,130 --> 00:01:57,969
project from the other company

00:01:56,320 --> 00:02:00,789
announcement and still was able to ship

00:01:57,969 --> 00:02:03,009
this project faster than the initial

00:02:00,789 --> 00:02:06,490
company so something is definitely wrong

00:02:03,009 --> 00:02:10,720
here and like we okay what do we do we

00:02:06,490 --> 00:02:12,370
try to optimize it to introduce more

00:02:10,720 --> 00:02:16,510
steps obviously and make it more

00:02:12,370 --> 00:02:19,390
colorful which is also equally important

00:02:16,510 --> 00:02:21,580
so this flow starts with a hypothesis Y

00:02:19,390 --> 00:02:21,970
hypothesis because the hypothesis is

00:02:21,580 --> 00:02:23,800
something

00:02:21,970 --> 00:02:27,160
doesn't have certainty in itself it can

00:02:23,800 --> 00:02:29,500
be right it can be wrong well like as

00:02:27,160 --> 00:02:31,930
opposite of that idea is something that

00:02:29,500 --> 00:02:34,240
if you say I D is good or bad because

00:02:31,930 --> 00:02:36,370
you will need to identify ideas to work

00:02:34,240 --> 00:02:38,800
on so you will need to somehow judge

00:02:36,370 --> 00:02:41,050
them and it might hurt your openness

00:02:38,800 --> 00:02:43,810
openness in your team as well as like

00:02:41,050 --> 00:02:46,180
user story like presumes that we know

00:02:43,810 --> 00:02:51,070
our users which is kind of not even

00:02:46,180 --> 00:02:53,200
humble to say but it's a often that

00:02:51,070 --> 00:02:55,030
doesn't happen then you take your

00:02:53,200 --> 00:02:57,430
hypothesis from the first step and you

00:02:55,030 --> 00:02:59,590
try to design a prototype with these

00:02:57,430 --> 00:03:03,010
hypotheses as fast as possible

00:02:59,590 --> 00:03:04,810
so and buy this like it you really

00:03:03,010 --> 00:03:07,090
really really cut all the features it

00:03:04,810 --> 00:03:08,620
doesn't help you to improve things to

00:03:07,090 --> 00:03:11,380
prove things that you want with your

00:03:08,620 --> 00:03:15,070
hypothesis and here are some kind of

00:03:11,380 --> 00:03:17,410
famous prototypes like Apple one Google

00:03:15,070 --> 00:03:22,660
glass for example yeah it was literally

00:03:17,410 --> 00:03:24,010
made of tape and netbook and the

00:03:22,660 --> 00:03:26,230
interesting case here for example is the

00:03:24,010 --> 00:03:29,739
Onyx navigator where instead of like

00:03:26,230 --> 00:03:31,420
developing features in an application it

00:03:29,739 --> 00:03:34,150
was cheaper to put a person with a stick

00:03:31,420 --> 00:03:36,459
and with a paper and then run

00:03:34,150 --> 00:03:39,760
appropriately to pull these papers on

00:03:36,459 --> 00:03:41,459
top of the application to see if for

00:03:39,760 --> 00:03:45,010
example these notifications were useful

00:03:41,459 --> 00:03:48,040
then when you have a prototype which is

00:03:45,010 --> 00:03:49,989
really really like a fast and small one

00:03:48,040 --> 00:03:52,000
you don't want to have this prototype in

00:03:49,989 --> 00:03:53,799
your ivory tower you really want to go

00:03:52,000 --> 00:03:55,330
to the real world and cure it collect

00:03:53,799 --> 00:03:57,670
real feedback from your real users

00:03:55,330 --> 00:03:59,650
because I cannot code in systems and

00:03:57,670 --> 00:04:04,239
infrastructure in a medium but actually

00:03:59,650 --> 00:04:05,890
real people and this one like everybody

00:04:04,239 --> 00:04:07,660
talks about like a Lorraine's we need to

00:04:05,890 --> 00:04:11,440
optimize for learnings but not only

00:04:07,660 --> 00:04:15,209
learning this like a allows you to avoid

00:04:11,440 --> 00:04:17,979
costly mistakes and how exactly so

00:04:15,209 --> 00:04:20,590
because like an every step at every step

00:04:17,979 --> 00:04:22,360
at prototype at experiment you can go

00:04:20,590 --> 00:04:24,010
back to the hypothesis you don't need to

00:04:22,360 --> 00:04:25,840
finish your flow you need you can go

00:04:24,010 --> 00:04:27,520
back and adjust your hypothesis for

00:04:25,840 --> 00:04:29,229
example if prototype didn't work and

00:04:27,520 --> 00:04:31,930
prove that it's gonna be too costly to

00:04:29,229 --> 00:04:33,729
implement or experiment the improve much

00:04:31,930 --> 00:04:35,980
results ok you just go and adjust your

00:04:33,729 --> 00:04:37,240
hypothesis and this short circuit

00:04:35,980 --> 00:04:39,970
is actually like one of the greatest

00:04:37,240 --> 00:04:41,740
features of this flow that it kind of

00:04:39,970 --> 00:04:44,290
allows you to improve your time to value

00:04:41,740 --> 00:04:47,440
and improve with these potential savings

00:04:44,290 --> 00:04:49,060
where you can short-circuit something

00:04:47,440 --> 00:04:50,680
that is not useful for users you can

00:04:49,060 --> 00:04:52,480
short-circuit from the beginning but

00:04:50,680 --> 00:04:54,430
then the ones that will go to

00:04:52,480 --> 00:04:56,620
productions or ones that you will invest

00:04:54,430 --> 00:04:59,170
in would be really features that user

00:04:56,620 --> 00:05:02,380
need and like it there you can really

00:04:59,170 --> 00:05:03,640
double down having all the results from

00:05:02,380 --> 00:05:05,590
your experiments having all the

00:05:03,640 --> 00:05:07,930
information like a considering cost of

00:05:05,590 --> 00:05:09,910
maintenance you can really see if you're

00:05:07,930 --> 00:05:13,350
gonna like proceed with this feature

00:05:09,910 --> 00:05:16,590
up until then to put in production or

00:05:13,350 --> 00:05:19,600
you will go for another hypothesis and

00:05:16,590 --> 00:05:21,610
repeat the cycle again and this one also

00:05:19,600 --> 00:05:24,490
allows you to hedge your risk in this

00:05:21,610 --> 00:05:27,760
sense because each consequent step is

00:05:24,490 --> 00:05:31,720
it's kind of more expensive and bigger

00:05:27,760 --> 00:05:34,750
and like avoiding this unnecessary steps

00:05:31,720 --> 00:05:36,790
will allow you like allow to save some

00:05:34,750 --> 00:05:38,920
money so this flow doesn't tell you how

00:05:36,790 --> 00:05:40,270
to build your project instead of guide

00:05:38,920 --> 00:05:41,740
you into like what is the most

00:05:40,270 --> 00:05:43,900
meaningful thing to work at any

00:05:41,740 --> 00:05:46,960
particular moment yeah and we found that

00:05:43,900 --> 00:05:48,730
it allowed us to maximize learning build

00:05:46,960 --> 00:05:51,460
a common dictionary within a team and

00:05:48,730 --> 00:05:53,350
also optimize our time to value yeah if

00:05:51,460 --> 00:05:56,500
you have any questions or just want to

00:05:53,350 --> 00:05:59,530
chat here like drop me a message on

00:05:56,500 --> 00:06:01,950
slack or LinkedIn or whatever and thank

00:05:59,530 --> 00:06:01,950
you very much

00:06:08,420 --> 00:06:10,480

YouTube URL: https://www.youtube.com/watch?v=2Vw4Di9AWJ4


