Title: Myrle Krantz – Observability with Prometheus and beyond
Publication date: 2021-06-25
Playlist: Berlin Buzzwords 2021 #bbuzz
Description: 
	If you're running a system at scale, you need tools to maintain it. This talk gives a high level overview of what observability and monitoring mean, and how to use Prometheus, Loki, Cortex, and Tempo to monitor your stack. 

Speaker:
Myrle Krantz – https://2021.berlinbuzzwords.de/member/myrle-krantz

More: https://2021.berlinbuzzwords.de/session/observability-prometheus-and-beyond
Captions: 
	00:00:07,520 --> 00:00:10,400
good evening

00:00:08,400 --> 00:00:12,480
and good morning to those of you not in

00:00:10,400 --> 00:00:14,320
germany

00:00:12,480 --> 00:00:16,400
so this is going to be a beginner level

00:00:14,320 --> 00:00:18,880
talk about observability and

00:00:16,400 --> 00:00:20,800
uh prometheus and some of the other

00:00:18,880 --> 00:00:21,359
tools that we also have available for

00:00:20,800 --> 00:00:23,520
this

00:00:21,359 --> 00:00:23,520
so

00:00:25,199 --> 00:00:28,720
we're at berlin buzzwords so i figured

00:00:26,800 --> 00:00:30,000
i'd start off with a slightly unrelated

00:00:28,720 --> 00:00:32,800
topic which is

00:00:30,000 --> 00:00:33,840
what is a buzzword so a buzzword is a

00:00:32,800 --> 00:00:35,760
phrase that has become

00:00:33,840 --> 00:00:38,160
fashionable sometimes they lose their

00:00:35,760 --> 00:00:40,079
meaning because they became fashionable

00:00:38,160 --> 00:00:41,840
so i don't think i know what strategy

00:00:40,079 --> 00:00:43,200
means anymore nor do i have any clue

00:00:41,840 --> 00:00:45,680
what synergy means

00:00:43,200 --> 00:00:47,120
they've been put in so many places

00:00:45,680 --> 00:00:48,800
people don't really know what they mean

00:00:47,120 --> 00:00:50,239
anymore when you say them

00:00:48,800 --> 00:00:52,079
but the best buzzwords got to be

00:00:50,239 --> 00:00:53,440
fashionable because they they're about

00:00:52,079 --> 00:00:55,760
something that's important

00:00:53,440 --> 00:00:57,360
and that's kind of where the word

00:00:55,760 --> 00:01:00,160
observability has gotten to

00:00:57,360 --> 00:01:01,280
nowadays that's not useful for beginners

00:01:00,160 --> 00:01:04,559
so

00:01:01,280 --> 00:01:06,080
this topic is meant to build up some of

00:01:04,559 --> 00:01:08,000
that knowledge to help you understand

00:01:06,080 --> 00:01:11,200
why exactly this is a buzzword

00:01:08,000 --> 00:01:14,479
and to start applying it the way in ways

00:01:11,200 --> 00:01:14,479
that are actually useful to you

00:01:15,600 --> 00:01:20,640
so first you may be wondering who i am i

00:01:18,720 --> 00:01:23,439
am a senior software engineering manager

00:01:20,640 --> 00:01:25,600
at grafana labs my name is merle krantz

00:01:23,439 --> 00:01:27,520
i've worked for 18 years as a c plus

00:01:25,600 --> 00:01:29,520
plus and java programmer as a software

00:01:27,520 --> 00:01:30,960
architect

00:01:29,520 --> 00:01:33,439
all of that time as an individual

00:01:30,960 --> 00:01:35,360
contributor

00:01:33,439 --> 00:01:36,720
i'm also very active at the apache

00:01:35,360 --> 00:01:38,840
software foundation i've made

00:01:36,720 --> 00:01:41,360
contributions to the incubator

00:01:38,840 --> 00:01:41,920
conferences to the community committee

00:01:41,360 --> 00:01:45,439
to

00:01:41,920 --> 00:01:47,119
diversity i'm also very active in around

00:01:45,439 --> 00:01:48,799
financial management of the apache

00:01:47,119 --> 00:01:50,479
soccer foundation and a little open

00:01:48,799 --> 00:01:52,840
source project called apache finrac

00:01:50,479 --> 00:01:54,640
where i contributed to the microservices

00:01:52,840 --> 00:01:56,399
architecture

00:01:54,640 --> 00:01:57,840
i got into software development because

00:01:56,399 --> 00:01:58,880
i think that software can make the world

00:01:57,840 --> 00:02:01,200
a better place

00:01:58,880 --> 00:02:03,119
these are incredibly powerful tools and

00:02:01,200 --> 00:02:04,960
software developers are using them

00:02:03,119 --> 00:02:06,560
to solve or help solve some of the

00:02:04,960 --> 00:02:09,280
hardest the most beautiful

00:02:06,560 --> 00:02:11,280
the most ugly problems that humanity has

00:02:09,280 --> 00:02:13,840
and i went to work for grafana

00:02:11,280 --> 00:02:17,680
because i wanted to enable software

00:02:13,840 --> 00:02:17,680
developers to do this more effectively

00:02:20,319 --> 00:02:23,840
now in today's systems in today's worlds

00:02:23,280 --> 00:02:25,760
there's

00:02:23,840 --> 00:02:27,680
there are a lot of different kinds of

00:02:25,760 --> 00:02:28,640
systems that people put together to try

00:02:27,680 --> 00:02:30,560
to understand

00:02:28,640 --> 00:02:31,920
uh what's going on in their software

00:02:30,560 --> 00:02:35,519
systems

00:02:31,920 --> 00:02:38,160
they look at databases they try to apply

00:02:35,519 --> 00:02:39,040
tribal knowledge people do look at

00:02:38,160 --> 00:02:41,680
prometheus

00:02:39,040 --> 00:02:42,800
they look at logs but when you're

00:02:41,680 --> 00:02:44,400
dealing with a

00:02:42,800 --> 00:02:45,920
problem that just just occurred and that

00:02:44,400 --> 00:02:48,840
needs to be solved quickly this can be

00:02:45,920 --> 00:02:51,360
especially frustrating because it's so

00:02:48,840 --> 00:02:54,800
fragmented this is going to be about

00:02:51,360 --> 00:02:57,200
uh tools that help us to solve this in a

00:02:54,800 --> 00:02:57,920
slightly less fragmented more holistic

00:02:57,200 --> 00:02:59,680
way

00:02:57,920 --> 00:03:02,840
first we actually need to understand

00:02:59,680 --> 00:03:04,080
what are we trying to solve what is

00:03:02,840 --> 00:03:05,920
observability

00:03:04,080 --> 00:03:08,480
we need to get some definitions of some

00:03:05,920 --> 00:03:10,720
of these buzzwords in place

00:03:08,480 --> 00:03:12,159
so monitoring versus observability well

00:03:10,720 --> 00:03:14,879
monitoring is something that people

00:03:12,159 --> 00:03:16,480
do um people go and they examine system

00:03:14,879 --> 00:03:19,120
behavior people go and they look for

00:03:16,480 --> 00:03:20,959
explanations for that system behavior

00:03:19,120 --> 00:03:22,560
they're looking at the system behavior

00:03:20,959 --> 00:03:23,920
because they're responding to an alert

00:03:22,560 --> 00:03:25,519
or they're looking at the system

00:03:23,920 --> 00:03:26,640
behavior because they made a fix and

00:03:25,519 --> 00:03:27,840
they want to make sure it works so

00:03:26,640 --> 00:03:29,920
they're examining

00:03:27,840 --> 00:03:33,200
the the response of the system now with

00:03:29,920 --> 00:03:35,920
these new conditions

00:03:33,200 --> 00:03:37,120
in order to do that people need to be

00:03:35,920 --> 00:03:40,239
enabled to do that

00:03:37,120 --> 00:03:41,920
via efficient and relevant data

00:03:40,239 --> 00:03:44,959
collection

00:03:41,920 --> 00:03:47,280
they need to be able to store the data

00:03:44,959 --> 00:03:48,799
in a way that enables fast querying they

00:03:47,280 --> 00:03:50,400
need alerting

00:03:48,799 --> 00:03:51,840
and but they need that not within simple

00:03:50,400 --> 00:03:54,239
systems because

00:03:51,840 --> 00:03:55,680
i mean monitoring a simple system is

00:03:54,239 --> 00:03:56,400
simple you don't need a big system for

00:03:55,680 --> 00:04:00,959
that

00:03:56,400 --> 00:04:02,879
they need it within complex systems

00:04:00,959 --> 00:04:04,799
but the work the meaning of some of

00:04:02,879 --> 00:04:07,840
these words has been diluted over time

00:04:04,799 --> 00:04:08,799
um there's a fair bit of cargo cultin

00:04:07,840 --> 00:04:12,480
going on so

00:04:08,799 --> 00:04:14,080
um the kernel of the idea about

00:04:12,480 --> 00:04:15,680
observability it's about changing the

00:04:14,080 --> 00:04:17,040
behavior it's actually changing the

00:04:15,680 --> 00:04:19,199
companies in which

00:04:17,040 --> 00:04:20,160
in which these systems are applied

00:04:19,199 --> 00:04:22,160
monitoring is

00:04:20,160 --> 00:04:23,600
taken on in some some places it's taken

00:04:22,160 --> 00:04:25,840
on just the meaning of collecting the

00:04:23,600 --> 00:04:30,240
data and not using it so you've got like

00:04:25,840 --> 00:04:32,160
a data lake or full text indexing

00:04:30,240 --> 00:04:35,040
and these are all cool technologies but

00:04:32,160 --> 00:04:35,040
what are they for

00:04:35,600 --> 00:04:38,960
observability should be about enabling

00:04:37,680 --> 00:04:41,600
humans to understand

00:04:38,960 --> 00:04:42,960
complex systems it's not just about

00:04:41,600 --> 00:04:44,320
finding out that something's broken

00:04:42,960 --> 00:04:46,320
although that's pretty useful too

00:04:44,320 --> 00:04:47,840
it's about digging in and understanding

00:04:46,320 --> 00:04:51,040
why it's broken and understanding that

00:04:47,840 --> 00:04:51,040
as quickly as possible

00:04:51,280 --> 00:04:54,560
now i mentioned earlier that this isn't

00:04:52,800 --> 00:04:56,160
particularly useful for simple systems

00:04:54,560 --> 00:04:58,320
because simple systems

00:04:56,160 --> 00:05:00,639
can be understood without uh without

00:04:58,320 --> 00:05:02,880
extra trial allah

00:05:00,639 --> 00:05:04,080
this is about complex systems and i'm

00:05:02,880 --> 00:05:05,520
not talking about

00:05:04,080 --> 00:05:07,520
just any kind of complexity there are

00:05:05,520 --> 00:05:10,080
kinds of complexity that can be

00:05:07,520 --> 00:05:11,120
removed or reduced for example fixing a

00:05:10,080 --> 00:05:12,560
bad design

00:05:11,120 --> 00:05:14,400
or removing code that you don't need

00:05:12,560 --> 00:05:17,600
anymore

00:05:14,400 --> 00:05:19,120
but some some complexity is inherent

00:05:17,600 --> 00:05:20,639
and you'll hear this a lot when you when

00:05:19,120 --> 00:05:22,160
you hear teams talking about having

00:05:20,639 --> 00:05:24,160
moved something from a monolith to

00:05:22,160 --> 00:05:26,080
microservices and they're like all we

00:05:24,160 --> 00:05:28,000
did is get different problems

00:05:26,080 --> 00:05:29,680
um or the same problems but in a

00:05:28,000 --> 00:05:31,520
different context well that's because

00:05:29,680 --> 00:05:32,960
the system was complex and moving it

00:05:31,520 --> 00:05:34,080
from one place to another isn't going to

00:05:32,960 --> 00:05:36,000
change that

00:05:34,080 --> 00:05:38,800
that can however make it easier to com

00:05:36,000 --> 00:05:41,680
compartmentalize the complexity

00:05:38,800 --> 00:05:42,639
to place boundaries around it so that it

00:05:41,680 --> 00:05:45,600
can be understood

00:05:42,639 --> 00:05:46,960
in a smaller context it should be

00:05:45,600 --> 00:05:49,039
possible to distill

00:05:46,960 --> 00:05:50,240
certain aspects of a complex system

00:05:49,039 --> 00:05:51,759
meaningfully

00:05:50,240 --> 00:05:54,000
in order to be able to observe it and

00:05:51,759 --> 00:05:56,400
this brings us to the next question is

00:05:54,000 --> 00:05:58,560
who is observing it well the sres are

00:05:56,400 --> 00:06:00,319
observing it your site reliability

00:05:58,560 --> 00:06:03,440
engineers

00:06:00,319 --> 00:06:07,600
another buzzword right

00:06:03,440 --> 00:06:10,639
so what uh what is a site reliability

00:06:07,600 --> 00:06:13,199
reliability engineer well

00:06:10,639 --> 00:06:14,240
we mentioned earlier that any setter

00:06:13,199 --> 00:06:16,960
well we didn't but

00:06:14,240 --> 00:06:17,919
uh this is this is sort of what software

00:06:16,960 --> 00:06:20,639
is about

00:06:17,919 --> 00:06:22,639
any set of tasks or any tasks that's

00:06:20,639 --> 00:06:26,080
repeated often enough

00:06:22,639 --> 00:06:26,080
is a potential software problem

00:06:26,639 --> 00:06:32,720
so google does a lot of operations

00:06:30,560 --> 00:06:35,840
because they do a lot of operations it's

00:06:32,720 --> 00:06:35,840
a software problem

00:06:36,240 --> 00:06:40,240
so how do they distill that software

00:06:38,400 --> 00:06:42,319
problem out well one of the

00:06:40,240 --> 00:06:44,160
one of the tools they use there and that

00:06:42,319 --> 00:06:47,039
have spread to the rest of the software

00:06:44,160 --> 00:06:49,280
world is something called slis slos and

00:06:47,039 --> 00:06:52,960
soas well what is an sli

00:06:49,280 --> 00:06:55,840
this sli is a service level indicator

00:06:52,960 --> 00:06:58,240
and that's a carefully defined

00:06:55,840 --> 00:07:00,560
quantitative not qualitative

00:06:58,240 --> 00:07:01,599
measure of some aspect of the level of

00:07:00,560 --> 00:07:04,479
service

00:07:01,599 --> 00:07:06,639
that is provided so once you have a

00:07:04,479 --> 00:07:08,960
measure once you have an indicator

00:07:06,639 --> 00:07:11,039
then you can also set objectives a

00:07:08,960 --> 00:07:13,199
target that you want that indicator to

00:07:11,039 --> 00:07:15,919
reach

00:07:13,199 --> 00:07:16,880
and once you have a target then you can

00:07:15,919 --> 00:07:20,080
also start to

00:07:16,880 --> 00:07:22,400
make agreements externally or internally

00:07:20,080 --> 00:07:23,120
saying that if we don't achieve this

00:07:22,400 --> 00:07:26,639
target

00:07:23,120 --> 00:07:29,599
then we will pay a fine take an action

00:07:26,639 --> 00:07:31,360
whatever for a lot of organizations the

00:07:29,599 --> 00:07:32,880
service level objective is as far as you

00:07:31,360 --> 00:07:34,160
need to go

00:07:32,880 --> 00:07:35,280
sometimes you need a service level

00:07:34,160 --> 00:07:38,240
agreement you don't always need a

00:07:35,280 --> 00:07:38,240
service level agreement

00:07:38,639 --> 00:07:45,759
in this context sres are trying to

00:07:42,000 --> 00:07:48,240
align incentives across the organization

00:07:45,759 --> 00:07:49,599
and they're trying to do this across

00:07:48,240 --> 00:07:51,759
four services

00:07:49,599 --> 00:07:53,280
um each of which may have different

00:07:51,759 --> 00:07:55,919
owners different teams but have

00:07:53,280 --> 00:07:58,000
contracts that define their interfaces

00:07:55,919 --> 00:07:59,759
um and they're doing this across

00:07:58,000 --> 00:08:00,960
organizations that include developers

00:07:59,759 --> 00:08:02,879
that include

00:08:00,960 --> 00:08:04,639
operational people that include product

00:08:02,879 --> 00:08:05,840
managers and each of these people may be

00:08:04,639 --> 00:08:09,520
focused on different

00:08:05,840 --> 00:08:10,800
aspects um of the performance of their

00:08:09,520 --> 00:08:13,520
system

00:08:10,800 --> 00:08:15,199
so what uh putting out these common

00:08:13,520 --> 00:08:15,599
indicators does is it helps to align

00:08:15,199 --> 00:08:17,599
these

00:08:15,599 --> 00:08:18,800
incentives if you get the right

00:08:17,599 --> 00:08:20,720
indicators

00:08:18,800 --> 00:08:22,240
and then once you have an indicator you

00:08:20,720 --> 00:08:24,160
can get everybody looking

00:08:22,240 --> 00:08:25,599
kind of through the same window they

00:08:24,160 --> 00:08:27,280
need a shared view

00:08:25,599 --> 00:08:28,639
so that they can all be seeing the same

00:08:27,280 --> 00:08:31,280
thing and reacting to the same

00:08:28,639 --> 00:08:31,280
information

00:08:32,479 --> 00:08:35,599
so what actually should they be

00:08:33,919 --> 00:08:38,080
measuring what actually should you be

00:08:35,599 --> 00:08:39,360
measuring in your services

00:08:38,080 --> 00:08:40,959
well you need to be careful to pick

00:08:39,360 --> 00:08:42,719
something to measure that relates as

00:08:40,959 --> 00:08:44,159
directly as possible to what your users

00:08:42,719 --> 00:08:46,640
care about

00:08:44,159 --> 00:08:48,480
so one good example is latency users

00:08:46,640 --> 00:08:51,440
care about the speed with which your

00:08:48,480 --> 00:08:51,440
website responds

00:08:52,839 --> 00:08:56,399
uh it's also true though that measures

00:08:55,360 --> 00:09:00,640
affect each other

00:08:56,399 --> 00:09:02,959
so for example if you improve latency

00:09:00,640 --> 00:09:04,640
by making your website respond faster

00:09:02,959 --> 00:09:07,680
you might do that by

00:09:04,640 --> 00:09:08,000
failing out more quickly if a service

00:09:07,680 --> 00:09:09,839
doesn't

00:09:08,000 --> 00:09:12,080
respond so you could actually increase

00:09:09,839 --> 00:09:13,680
your error rate

00:09:12,080 --> 00:09:15,120
that might be an acceptable trade-off

00:09:13,680 --> 00:09:15,600
for you it depends on what your business

00:09:15,120 --> 00:09:17,040
is

00:09:15,600 --> 00:09:18,800
so what you need to be doing when you're

00:09:17,040 --> 00:09:19,839
defining your service level objectives

00:09:18,800 --> 00:09:22,320
is you need to avoid

00:09:19,839 --> 00:09:23,920
absolutes so if you were to try to

00:09:22,320 --> 00:09:26,959
examine for example to set

00:09:23,920 --> 00:09:28,399
an error rate of zero percent error rate

00:09:26,959 --> 00:09:31,200
well then you're probably going to end

00:09:28,399 --> 00:09:35,040
up paying a heavy price in other areas

00:09:31,200 --> 00:09:37,360
if instead you can can think more

00:09:35,040 --> 00:09:38,720
carefully about what your error rate is

00:09:37,360 --> 00:09:40,480
then you can exchange

00:09:38,720 --> 00:09:42,640
a slight increase in the number of

00:09:40,480 --> 00:09:44,560
errors for something else that might

00:09:42,640 --> 00:09:46,080
also be important to you so this is kind

00:09:44,560 --> 00:09:48,959
of what error budgets or

00:09:46,080 --> 00:09:50,240
other slos are about is making it so

00:09:48,959 --> 00:09:52,959
that you can

00:09:50,240 --> 00:09:55,600
think about all of these pieces together

00:09:52,959 --> 00:09:59,040
and the way they affect each other

00:09:55,600 --> 00:10:00,720
and achieve more than one objective uh

00:09:59,040 --> 00:10:01,839
customers do care about their services

00:10:00,720 --> 00:10:04,240
being up they don't care about the

00:10:01,839 --> 00:10:06,640
individual components

00:10:04,240 --> 00:10:08,399
and they don't necessarily they're not

00:10:06,640 --> 00:10:10,000
necessarily concerned if they're if

00:10:08,399 --> 00:10:13,440
there's any

00:10:10,000 --> 00:10:13,440
once in a week if there's an error

00:10:16,480 --> 00:10:20,399
so once you have a measure then you also

00:10:18,399 --> 00:10:23,120
have to ask yourself what to alert on in

00:10:20,399 --> 00:10:23,120
your services

00:10:23,360 --> 00:10:28,000
well this one's both complex and simple

00:10:25,839 --> 00:10:30,160
at the same time the symbol of it is

00:10:28,000 --> 00:10:32,480
you only alert on things that are

00:10:30,160 --> 00:10:34,240
impacting your customer service

00:10:32,480 --> 00:10:36,959
that are either now impacting your

00:10:34,240 --> 00:10:38,560
customer service or will be very soon

00:10:36,959 --> 00:10:40,160
don't alert on anything else because

00:10:38,560 --> 00:10:43,839
you're going to wear people out and

00:10:40,160 --> 00:10:43,839
people will start ignoring your alerts

00:10:44,000 --> 00:10:48,880
and here's another aside um what is

00:10:46,800 --> 00:10:49,839
black box monitoring versus white box

00:10:48,880 --> 00:10:53,279
monitoring

00:10:49,839 --> 00:10:55,519
well um rather than escalate one of the

00:10:53,279 --> 00:10:56,480
elevate one or the other above the other

00:10:55,519 --> 00:10:58,800
um

00:10:56,480 --> 00:11:00,240
just consider that both have advantages

00:10:58,800 --> 00:11:02,079
but we will be focusing more on white

00:11:00,240 --> 00:11:03,600
box monitoring in this talk

00:11:02,079 --> 00:11:05,519
the white box monitoring looks more at

00:11:03,600 --> 00:11:08,560
the parts so it actually looks

00:11:05,519 --> 00:11:11,120
into a component and

00:11:08,560 --> 00:11:11,920
captures out metrics or logs black box

00:11:11,120 --> 00:11:13,440
monitoring

00:11:11,920 --> 00:11:17,519
looks at it from the outside based on

00:11:13,440 --> 00:11:21,360
behavior or does it respond

00:11:17,519 --> 00:11:22,880
now typically some aspects of black box

00:11:21,360 --> 00:11:24,320
monitoring are covered by white box

00:11:22,880 --> 00:11:25,760
monitoring if you can get the metrics

00:11:24,320 --> 00:11:29,360
from a service then it's at least

00:11:25,760 --> 00:11:32,000
responding to your request for metrics

00:11:29,360 --> 00:11:34,640
so let's cover briefly what prometheus

00:11:32,000 --> 00:11:34,640
does in this

00:11:34,800 --> 00:11:37,839
prometheus was inspired by google's borg

00:11:37,120 --> 00:11:41,279
mom

00:11:37,839 --> 00:11:44,399
it's a time series database

00:11:41,279 --> 00:11:46,000
um that saves basically a time stamp and

00:11:44,399 --> 00:11:49,680
a float64 value

00:11:46,000 --> 00:11:51,839
um to a set of labels

00:11:49,680 --> 00:11:53,600
that allow you to locate it so maybe you

00:11:51,839 --> 00:11:55,440
have a service and you have a whole

00:11:53,600 --> 00:11:57,200
bunch of instances of that service you

00:11:55,440 --> 00:11:59,920
have it in a region

00:11:57,200 --> 00:12:01,120
so you can query based on those labels

00:11:59,920 --> 00:12:03,600
now it's very common

00:12:01,120 --> 00:12:06,160
to do dashboarding of prometheus via

00:12:03,600 --> 00:12:06,160
grafana

00:12:08,639 --> 00:12:11,839
prometheus is not for event logging and

00:12:10,399 --> 00:12:13,680
we'll be covering event logging in just

00:12:11,839 --> 00:12:16,800
a little bit

00:12:13,680 --> 00:12:18,800
so what is prometheus saving well

00:12:16,800 --> 00:12:22,160
prometheus is persisting a time

00:12:18,800 --> 00:12:23,920
series um that is a set of recorded

00:12:22,160 --> 00:12:25,600
values that change over time for each of

00:12:23,920 --> 00:12:26,880
the services or each of the components

00:12:25,600 --> 00:12:30,720
of the services that

00:12:26,880 --> 00:12:32,399
that you are observing individual events

00:12:30,720 --> 00:12:36,399
can be merged into counters

00:12:32,399 --> 00:12:39,120
within the service or they can be

00:12:36,399 --> 00:12:39,519
they can be captured or and aggregated

00:12:39,120 --> 00:12:41,600
um

00:12:39,519 --> 00:12:43,200
outside of the service in prometheus

00:12:41,600 --> 00:12:44,880
there's typically

00:12:43,200 --> 00:12:47,120
uh there's typically the counter the

00:12:44,880 --> 00:12:48,000
gauge and the histogram are are the ways

00:12:47,120 --> 00:12:49,360
in which data is

00:12:48,000 --> 00:12:52,480
typically saved so a counter is

00:12:49,360 --> 00:12:55,360
something that continually rises

00:12:52,480 --> 00:12:57,040
um you just add to a counter you can

00:12:55,360 --> 00:12:59,120
derive rates from counters

00:12:57,040 --> 00:13:02,399
for example by saying it increased by

00:12:59,120 --> 00:13:04,959
this much in this amount of time

00:13:02,399 --> 00:13:07,680
a gauge is something that can change

00:13:04,959 --> 00:13:10,399
over time um the disadvantage to gauges

00:13:07,680 --> 00:13:11,200
is you might have a time time that you

00:13:10,399 --> 00:13:12,800
capture

00:13:11,200 --> 00:13:14,320
um and there might be an event in

00:13:12,800 --> 00:13:16,560
between there that you miss so let's say

00:13:14,320 --> 00:13:18,959
you have a temperature and a data center

00:13:16,560 --> 00:13:19,600
um and it looks fairly cool but if

00:13:18,959 --> 00:13:22,240
you're

00:13:19,600 --> 00:13:23,760
if the rate at which you're capturing it

00:13:22,240 --> 00:13:26,320
is slow enough there might be a spike in

00:13:23,760 --> 00:13:28,959
between that you just didn't see

00:13:26,320 --> 00:13:30,800
nonetheless gauges can cancer important

00:13:28,959 --> 00:13:34,079
purposes

00:13:30,800 --> 00:13:37,360
another important case is histogram

00:13:34,079 --> 00:13:39,839
so maybe you want to see the

00:13:37,360 --> 00:13:43,120
the data bucketed service latency is a

00:13:39,839 --> 00:13:44,800
really good example because

00:13:43,120 --> 00:13:46,000
some of your customers are going to see

00:13:44,800 --> 00:13:46,959
a very small percentage of your

00:13:46,000 --> 00:13:49,440
customers are going to see

00:13:46,959 --> 00:13:50,720
very slow response times and they're

00:13:49,440 --> 00:13:52,320
going to remember it

00:13:50,720 --> 00:13:53,920
more than the customers who see your

00:13:52,320 --> 00:13:55,199
average response time so

00:13:53,920 --> 00:13:56,880
just because it's a very small

00:13:55,199 --> 00:13:59,519
percentage of customers does not mean

00:13:56,880 --> 00:14:02,480
that it's not important

00:13:59,519 --> 00:14:03,440
and you can visualize all of this using

00:14:02,480 --> 00:14:06,800
grafana

00:14:03,440 --> 00:14:09,600
which is fun uh and because

00:14:06,800 --> 00:14:11,760
the querying via prom prom q a

00:14:09,600 --> 00:14:14,639
prometheusql is so flexible

00:14:11,760 --> 00:14:15,120
uh this makes it very that this using

00:14:14,639 --> 00:14:18,959
this

00:14:15,120 --> 00:14:20,399
ql within grafana makes it possible to

00:14:18,959 --> 00:14:22,959
do all kinds of interesting things with

00:14:20,399 --> 00:14:24,959
your data after it's been captured

00:14:22,959 --> 00:14:27,120
so what are the main selling points of

00:14:24,959 --> 00:14:29,199
prometheus well one it's highly dynamic

00:14:27,120 --> 00:14:30,560
so you have built-in service discovery

00:14:29,199 --> 00:14:33,279
which means that

00:14:30,560 --> 00:14:35,279
you can add components into your into

00:14:33,279 --> 00:14:38,000
your architecture into your landscape

00:14:35,279 --> 00:14:40,560
without having to manually register them

00:14:38,000 --> 00:14:42,240
with your prometheus server it

00:14:40,560 --> 00:14:44,000
automatically gets added via the same

00:14:42,240 --> 00:14:46,000
service discovery mechanism

00:14:44,000 --> 00:14:49,120
that you use also for your for for

00:14:46,000 --> 00:14:49,120
answering customer requests

00:14:49,279 --> 00:14:53,360
there's no hierarchical model so it's

00:14:51,279 --> 00:14:56,800
just in-dimensional label set

00:14:53,360 --> 00:14:58,399
um again i mentioned from ql just a

00:14:56,800 --> 00:14:59,920
second ago you can use prom ql for

00:14:58,399 --> 00:15:00,720
processing you can use it for graphing

00:14:59,920 --> 00:15:02,560
you can use it for

00:15:00,720 --> 00:15:04,160
learning and you can use it for for

00:15:02,560 --> 00:15:05,199
exporting so you're using the same query

00:15:04,160 --> 00:15:07,360
language for

00:15:05,199 --> 00:15:08,720
for everything um and it's very simple

00:15:07,360 --> 00:15:12,880
to operate i

00:15:08,720 --> 00:15:16,160
basically just start it up uh it's also

00:15:12,880 --> 00:15:17,279
really fast it's a part of the reason

00:15:16,160 --> 00:15:18,560
it's really fast is because it's a

00:15:17,279 --> 00:15:21,279
pull-based system

00:15:18,560 --> 00:15:23,279
um it's not event-based and it's

00:15:21,279 --> 00:15:25,040
primarily white box monitoring however

00:15:23,279 --> 00:15:26,880
there is a black box monitoring

00:15:25,040 --> 00:15:28,720
aspect which is basically if it hits

00:15:26,880 --> 00:15:29,600
your metrics endpoint requests you know

00:15:28,720 --> 00:15:32,880
polls

00:15:29,600 --> 00:15:35,600
uh your your metrics endpoint

00:15:32,880 --> 00:15:36,000
uh and you don't get a response then

00:15:35,600 --> 00:15:39,120
that's

00:15:36,000 --> 00:15:41,199
a simple form of black box monitoring

00:15:39,120 --> 00:15:42,880
in addition prometheus makes hard api

00:15:41,199 --> 00:15:43,920
commitments within major versions so it

00:15:42,880 --> 00:15:47,759
remains uh

00:15:43,920 --> 00:15:47,759
compatible within major versions

00:15:49,519 --> 00:15:54,560
so here's some examples some simple

00:15:51,839 --> 00:15:57,519
simple examples of

00:15:54,560 --> 00:15:58,240
of the um of the measures that you can

00:15:57,519 --> 00:16:01,120
capture so

00:15:58,240 --> 00:16:02,880
you can look for example at http http

00:16:01,120 --> 00:16:04,399
requests

00:16:02,880 --> 00:16:06,079
and then you can look at different

00:16:04,399 --> 00:16:07,360
environments production or test

00:16:06,079 --> 00:16:09,040
environment you can look at different

00:16:07,360 --> 00:16:10,560
methods post or get

00:16:09,040 --> 00:16:12,320
you can look at it by code and then you

00:16:10,560 --> 00:16:14,399
can see the number

00:16:12,320 --> 00:16:17,040
of requests within each of these

00:16:14,399 --> 00:16:17,040
categories

00:16:19,360 --> 00:16:26,720
so is it scalable well

00:16:23,839 --> 00:16:28,480
kubernetes is the borg prometheus is

00:16:26,720 --> 00:16:31,680
basically borgbon

00:16:28,480 --> 00:16:31,680
within this context

00:16:32,720 --> 00:16:36,560
and google couldn't have run the borg

00:16:35,839 --> 00:16:38,240
that is

00:16:36,560 --> 00:16:40,560
their kubernetes clusters without

00:16:38,240 --> 00:16:42,240
borgmon kubernetes and prometheus are

00:16:40,560 --> 00:16:43,120
designed and written with each other in

00:16:42,240 --> 00:16:45,360
mind

00:16:43,120 --> 00:16:46,560
uh they absolutely if google can run

00:16:45,360 --> 00:16:51,680
them at scale then you

00:16:46,560 --> 00:16:54,079
probably can too

00:16:51,680 --> 00:16:56,720
one prometheus instance has been seen to

00:16:54,079 --> 00:17:00,560
have as many as 125

00:16:56,720 --> 00:17:00,560
million active time series at once

00:17:01,199 --> 00:17:05,839
so it can take on a lot of data

00:17:06,000 --> 00:17:10,160
now prometheus is less optimized for

00:17:08,160 --> 00:17:11,839
long-term data storage

00:17:10,160 --> 00:17:13,520
so there are a couple of projects

00:17:11,839 --> 00:17:14,160
working to sort of pick up the back end

00:17:13,520 --> 00:17:17,679
of that

00:17:14,160 --> 00:17:20,160
you can connect prometheus with thanos

00:17:17,679 --> 00:17:21,360
which is historically used easier to run

00:17:20,160 --> 00:17:24,079
but slower

00:17:21,360 --> 00:17:26,480
and it scales storage horizontally

00:17:24,079 --> 00:17:29,280
cortex which is catching up on

00:17:26,480 --> 00:17:30,880
how easy it is to run you can scale

00:17:29,280 --> 00:17:32,400
storage you can scale the adjuster you

00:17:30,880 --> 00:17:35,600
can scale the query or

00:17:32,400 --> 00:17:36,559
horizontally as well so that's just

00:17:35,600 --> 00:17:38,400
metrics but

00:17:36,559 --> 00:17:40,000
observability typically has three

00:17:38,400 --> 00:17:43,039
pillars

00:17:40,000 --> 00:17:47,200
that is metrics logs

00:17:43,039 --> 00:17:50,720
and traces so let's think about logs

00:17:47,200 --> 00:17:51,840
let's move on to loki loki is an open

00:17:50,720 --> 00:17:56,799
source project

00:17:51,840 --> 00:17:58,400
under the agpl license at grafana labs

00:17:56,799 --> 00:18:00,320
which follows the same label-based

00:17:58,400 --> 00:18:04,480
system as prometheus

00:18:00,320 --> 00:18:06,240
so you can query your logs on

00:18:04,480 --> 00:18:08,320
any of the same metrics that you're that

00:18:06,240 --> 00:18:10,080
you're querying them on in prometheus

00:18:08,320 --> 00:18:11,600
especially if they're if you're putting

00:18:10,080 --> 00:18:12,799
them into the same system if it comes

00:18:11,600 --> 00:18:15,280
from the same

00:18:12,799 --> 00:18:17,039
uh from the same service then it will

00:18:15,280 --> 00:18:18,320
have the same labels

00:18:17,039 --> 00:18:20,080
this makes the information

00:18:18,320 --> 00:18:21,039
cross-referenceable which can be very

00:18:20,080 --> 00:18:23,200
very useful

00:18:21,039 --> 00:18:24,720
in the middle of an incident so let's

00:18:23,200 --> 00:18:26,320
say you see a spike and now you want to

00:18:24,720 --> 00:18:27,600
look for all of the logs within the time

00:18:26,320 --> 00:18:30,160
frame around that spike

00:18:27,600 --> 00:18:33,120
you can do that by using the same query

00:18:30,160 --> 00:18:35,200
that you used to look at the spike

00:18:33,120 --> 00:18:38,559
it's also very efficient because it is

00:18:35,200 --> 00:18:41,520
not creating a full text index

00:18:38,559 --> 00:18:43,039
it's only indexing on the timestamp and

00:18:41,520 --> 00:18:44,559
on the label

00:18:43,039 --> 00:18:47,120
this means that you can work with logs

00:18:44,559 --> 00:18:49,840
at scale without having a huge cost of a

00:18:47,120 --> 00:18:52,640
very large index

00:18:49,840 --> 00:18:54,160
you can turn the logs into metrics too

00:18:52,640 --> 00:18:55,600
to make it easier to work with them

00:18:54,160 --> 00:18:57,919
i'll show you an example just a

00:18:55,600 --> 00:19:00,400
screenshot of an example in a little bit

00:18:57,919 --> 00:19:02,880
and because you're pulling the data out

00:19:00,400 --> 00:19:06,160
of the system basically via prom tail

00:19:02,880 --> 00:19:06,160
it's very simple to set up

00:19:07,520 --> 00:19:11,360
so this is an example of pulling metrics

00:19:10,160 --> 00:19:13,120
out of your logs

00:19:11,360 --> 00:19:14,799
if you look closely at the query you'll

00:19:13,120 --> 00:19:16,160
see that it's querying for the errors

00:19:14,799 --> 00:19:17,840
you can actually look at the number of

00:19:16,160 --> 00:19:21,280
log messages

00:19:17,840 --> 00:19:22,799
that contain an error over time and then

00:19:21,280 --> 00:19:25,039
you'll see

00:19:22,799 --> 00:19:26,799
you'll see a progression you'll see the

00:19:25,039 --> 00:19:30,080
the tendencies and

00:19:26,799 --> 00:19:31,520
the changes over time

00:19:30,080 --> 00:19:34,080
let's take a closer look what i was

00:19:31,520 --> 00:19:37,360
mentioning before about what a log

00:19:34,080 --> 00:19:39,280
log entry looks at looks like remember i

00:19:37,360 --> 00:19:40,080
said you have index data and unindexed

00:19:39,280 --> 00:19:41,600
data

00:19:40,080 --> 00:19:43,840
and part of the key part of the trick

00:19:41,600 --> 00:19:44,400
here is that you're not indexing all of

00:19:43,840 --> 00:19:47,520
it

00:19:44,400 --> 00:19:49,600
you're only indexing the time stamp and

00:19:47,520 --> 00:19:51,600
the specific labels the prometheus file

00:19:49,600 --> 00:19:53,520
labels

00:19:51,600 --> 00:19:55,200
you're not indexing the rest of the log

00:19:53,520 --> 00:19:56,480
line which does not mean you cannot

00:19:55,200 --> 00:19:57,600
search on the rest of the log line you

00:19:56,480 --> 00:19:59,760
can

00:19:57,600 --> 00:20:00,880
uh what that means is in order to scale

00:19:59,760 --> 00:20:03,440
out search what

00:20:00,880 --> 00:20:04,799
loki does is first you search on the

00:20:03,440 --> 00:20:06,640
labels

00:20:04,799 --> 00:20:08,240
you return those parts of logs and then

00:20:06,640 --> 00:20:10,720
it just does a full text search

00:20:08,240 --> 00:20:13,039
massively parallelized across the rest

00:20:10,720 --> 00:20:13,039
of that

00:20:15,039 --> 00:20:19,760
so that gets us logs remember i said we

00:20:17,840 --> 00:20:20,559
have three pillars of observability we

00:20:19,760 --> 00:20:22,880
have

00:20:20,559 --> 00:20:24,559
metrics we have logs and we have traces

00:20:22,880 --> 00:20:27,919
and for traces there's another

00:20:24,559 --> 00:20:31,039
this is the newest child of grafana labs

00:20:27,919 --> 00:20:32,400
also an open source project also agpl

00:20:31,039 --> 00:20:35,440
licensed

00:20:32,400 --> 00:20:37,440
tempo is uh there for traces so

00:20:35,440 --> 00:20:40,400
um this includes this is an object store

00:20:37,440 --> 00:20:44,159
only um it's 100 compatible

00:20:40,400 --> 00:20:46,240
with uh open telemetry tracing

00:20:44,159 --> 00:20:47,520
it's not a sampling this is all of your

00:20:46,240 --> 00:20:50,080
traces that are getting

00:20:47,520 --> 00:20:50,880
stored however it is exemplar based for

00:20:50,080 --> 00:20:51,919
those of you who don't know what

00:20:50,880 --> 00:20:54,880
exemplar means

00:20:51,919 --> 00:20:56,400
exemplar is basically like if you have a

00:20:54,880 --> 00:20:58,720
progression of data

00:20:56,400 --> 00:20:59,440
but you have too much data to save all

00:20:58,720 --> 00:21:03,120
of it

00:20:59,440 --> 00:21:06,080
you can save individual points over time

00:21:03,120 --> 00:21:06,559
and then go to those samples if some if

00:21:06,080 --> 00:21:08,000
you if

00:21:06,559 --> 00:21:09,440
your data shows that there's a problem

00:21:08,000 --> 00:21:10,720
you can pick out one of the examples

00:21:09,440 --> 00:21:12,320
that was saved from that time so that's

00:21:10,720 --> 00:21:14,400
what's an exemplar is

00:21:12,320 --> 00:21:16,400
this is exemplar based but again it's

00:21:14,400 --> 00:21:18,880
not sampling because 100 of your traces

00:21:16,400 --> 00:21:18,880
are saved

00:21:19,200 --> 00:21:23,280
it also because it it's based on the

00:21:22,000 --> 00:21:27,280
same

00:21:23,280 --> 00:21:30,000
label set you can move easily from

00:21:27,280 --> 00:21:32,559
from prometheus to loki to tempo and

00:21:30,000 --> 00:21:32,559
back again

00:21:35,200 --> 00:21:38,960
so bringing that together you can move i

00:21:37,600 --> 00:21:40,320
mentioned it just now you can move from

00:21:38,960 --> 00:21:42,480
your logs to your faces you can move

00:21:40,320 --> 00:21:45,200
from your metrics to your traces

00:21:42,480 --> 00:21:46,799
you can move from your traces to your

00:21:45,200 --> 00:21:48,799
logs any which way you want to go you

00:21:46,799 --> 00:21:50,480
can go with this because it all

00:21:48,799 --> 00:21:52,400
lives sort of within the same query

00:21:50,480 --> 00:21:54,400
language and

00:21:52,400 --> 00:21:55,760
because this is all open source you can

00:21:54,400 --> 00:21:57,760
also run it yourself

00:21:55,760 --> 00:21:59,760
so i mean i'm out here of course i work

00:21:57,760 --> 00:22:03,120
for grafana labs i would love if you

00:21:59,760 --> 00:22:05,360
pay us to run it and we would be happy

00:22:03,120 --> 00:22:07,280
to run it for you

00:22:05,360 --> 00:22:09,120
for small installations we'll even run

00:22:07,280 --> 00:22:11,919
it for you for free

00:22:09,120 --> 00:22:12,640
for free forever you get a 14-day

00:22:11,919 --> 00:22:15,120
grafana

00:22:12,640 --> 00:22:16,159
cloud pro trial and then after that you

00:22:15,120 --> 00:22:18,000
have

00:22:16,159 --> 00:22:20,320
limitations on the the number of active

00:22:18,000 --> 00:22:21,039
series but again you can run it for free

00:22:20,320 --> 00:22:23,020
with us

00:22:21,039 --> 00:22:24,880
in our cloud um

00:22:23,020 --> 00:22:28,320
[Music]

00:22:24,880 --> 00:22:29,600
and if you're uh if you're interested in

00:22:28,320 --> 00:22:31,360
setting up the stack

00:22:29,600 --> 00:22:32,559
as i said it's open source if there's

00:22:31,360 --> 00:22:34,000
something that you want to change you

00:22:32,559 --> 00:22:35,520
can look at it you can

00:22:34,000 --> 00:22:37,120
figure out little improvements that you

00:22:35,520 --> 00:22:39,280
want to make or big improvements

00:22:37,120 --> 00:22:40,240
is one of the the advantages of open

00:22:39,280 --> 00:22:43,440
source

00:22:40,240 --> 00:22:46,640
so with that let me say thank you and

00:22:43,440 --> 00:22:46,640
are there any questions

00:22:51,200 --> 00:22:55,360
thanks to the talk i think it's a great

00:22:53,440 --> 00:23:00,240
uh

00:22:55,360 --> 00:23:03,600
introduction to all things monitoring

00:23:00,240 --> 00:23:05,039
i haven't seen any questions

00:23:03,600 --> 00:23:07,360
i guess if there's not a question i'm

00:23:05,039 --> 00:23:10,400
curious at grafana labs

00:23:07,360 --> 00:23:13,679
um do you provide like the

00:23:10,400 --> 00:23:16,880
solution for all three like metrics

00:23:13,679 --> 00:23:19,280
logs and pieces or just for metrics uh

00:23:16,880 --> 00:23:21,600
like traditionally i thought of grafana

00:23:19,280 --> 00:23:22,080
as grafana labs but i guess i'm learning

00:23:21,600 --> 00:23:25,200
something

00:23:22,080 --> 00:23:29,039
as well yes we offer hosted prometheus

00:23:25,200 --> 00:23:31,600
um we offer a hosted loki and we offer

00:23:29,039 --> 00:23:33,919
hosted tempo which is traces

00:23:31,600 --> 00:23:35,440
and of course we have a beautiful ui

00:23:33,919 --> 00:23:38,799
that we can put on top of all of that so

00:23:35,440 --> 00:23:42,320
you can access all of that via our ui

00:23:38,799 --> 00:23:43,120
you got it sounds good all right i guess

00:23:42,320 --> 00:23:45,440
um

00:23:43,120 --> 00:23:46,960
maybe oh there's a question that just

00:23:45,440 --> 00:23:50,320
came in um

00:23:46,960 --> 00:23:53,520
let me read it out to you

00:23:50,320 --> 00:23:57,760
um then

00:23:53,520 --> 00:24:01,120
sam the like the fact that we don't have

00:23:57,760 --> 00:24:04,880
sampling concerns

00:24:01,120 --> 00:24:07,279
uh somebody like in terms of cost uh so

00:24:04,880 --> 00:24:08,720
is there sampling i guess i guess the

00:24:07,279 --> 00:24:09,279
question comes down to like do you all

00:24:08,720 --> 00:24:12,159
provide

00:24:09,279 --> 00:24:13,840
sampling if not like the costs could get

00:24:12,159 --> 00:24:17,120
expensive

00:24:13,840 --> 00:24:21,200
it is possible to do sampling but we

00:24:17,120 --> 00:24:22,720
charge by the series um rather than

00:24:21,200 --> 00:24:24,400
well i mean there are there are gigabyte

00:24:22,720 --> 00:24:24,799
limits on some of the services but most

00:24:24,400 --> 00:24:26,720
of the

00:24:24,799 --> 00:24:27,760
services we provide by the number of

00:24:26,720 --> 00:24:29,520
series that you're that you're

00:24:27,760 --> 00:24:32,320
persisting

00:24:29,520 --> 00:24:33,600
um so if you're using the free tier

00:24:32,320 --> 00:24:34,799
you're not going to get charged anyways

00:24:33,600 --> 00:24:36,240
you don't even have to put in your

00:24:34,799 --> 00:24:37,840
credit card so you're not going to get

00:24:36,240 --> 00:24:38,880
accidentally charged like amazon does

00:24:37,840 --> 00:24:41,840
sometimes

00:24:38,880 --> 00:24:45,600
um so if you're concerned about that

00:24:41,840 --> 00:24:47,760
then try it out and see what happens

00:24:45,600 --> 00:24:50,000
experiment with it uh under the free

00:24:47,760 --> 00:24:50,000
tier

00:24:52,240 --> 00:24:56,880
uh i guess the second question coming in

00:24:56,559 --> 00:24:58,960
is

00:24:56,880 --> 00:25:00,320
would you recommend this for small

00:24:58,960 --> 00:25:04,080
setups or

00:25:00,320 --> 00:25:07,840
is there a minimum size making it

00:25:04,080 --> 00:25:09,279
worthwhile but even there are some small

00:25:07,840 --> 00:25:09,840
studies you might even want to do it on

00:25:09,279 --> 00:25:11,679
i've seen

00:25:09,840 --> 00:25:13,039
uh some really interesting write-offs

00:25:11,679 --> 00:25:15,760
where people

00:25:13,039 --> 00:25:17,360
monitored an aquarium with prometheus

00:25:15,760 --> 00:25:18,480
now you probably don't need log files

00:25:17,360 --> 00:25:20,240
for that one you probably don't need

00:25:18,480 --> 00:25:22,799
traces for that one either

00:25:20,240 --> 00:25:23,279
but i think prometheus at very least

00:25:22,799 --> 00:25:25,760
it's

00:25:23,279 --> 00:25:27,440
it's easy to set up prometheus and it's

00:25:25,760 --> 00:25:29,520
fun too

00:25:27,440 --> 00:25:30,960
and grafana also is very easy so just

00:25:29,520 --> 00:25:32,480
putting that on top of prometheus you

00:25:30,960 --> 00:25:36,480
can look at the data

00:25:32,480 --> 00:25:37,760
excuse me uh yeah i mean it's

00:25:36,480 --> 00:25:39,520
it's not the problem i was talking about

00:25:37,760 --> 00:25:41,919
in my talk here but

00:25:39,520 --> 00:25:43,600
uh i certainly i really think that

00:25:41,919 --> 00:25:46,400
prometheus is easy enough to use that

00:25:43,600 --> 00:25:48,559
you can even use it for small problems

00:25:46,400 --> 00:25:50,080
and then i guess there's one more

00:25:48,559 --> 00:25:53,520
question that just came in

00:25:50,080 --> 00:25:54,559
it says i'm new to prometheus are there

00:25:53,520 --> 00:25:58,480
any clients

00:25:54,559 --> 00:26:01,760
out there that play well with prometheus

00:25:58,480 --> 00:26:04,240
other than graffana

00:26:01,760 --> 00:26:05,520
so prometheus does come with a kind of a

00:26:04,240 --> 00:26:08,880
very simple

00:26:05,520 --> 00:26:11,760
default web interface um

00:26:08,880 --> 00:26:12,400
there yeah but i think really griffana

00:26:11,760 --> 00:26:14,559
is the best

00:26:12,400 --> 00:26:15,600
thing out there for it up until very

00:26:14,559 --> 00:26:16,880
recently uh

00:26:15,600 --> 00:26:19,360
prometheus was actually delivering

00:26:16,880 --> 00:26:22,080
graffana with their releases

00:26:19,360 --> 00:26:24,320
um so the prometheus team also uh

00:26:22,080 --> 00:26:39,840
clearly sees grafana as the best way to

00:26:24,320 --> 00:26:39,840
examine their data

00:26:46,000 --> 00:26:48,080

YouTube URL: https://www.youtube.com/watch?v=SmX9HWBJL2o


