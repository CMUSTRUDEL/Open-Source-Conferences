Title: Ricardo Ferreira â€“ Building Observable Streaming Systems with OpenTelemetry
Publication date: 2021-06-25
Playlist: Berlin Buzzwords 2021 #bbuzz
Description: 
	Building streaming systems is a popular way for developers to implement applications that react to data changes and process events as they happen. It is an exciting new world that technologies like Apache Pulsar made available for anyone to use. But all this goodness doesnâ€™t come for free. One of the challenges of this type of architecture is that its distributed nature makes it hard and sometimes even impossible to identify the root cause of problems quickly.  

That is why distributed tracing technologies are so important. By gluing together disparate services into a single and cohesive transaction, developers can provide to the operations team a way to pragmatically observe the system and to quickly identify the root cause of problems such as slowness and unavailability. This talk will explain how to implement distributed tracing in Pulsar applications using OpenTelemetryâ€”an observability framework for cloud-native software. A demo will be used to clarify the concepts.

Speaker:
Ricardo Ferreira â€“ https://2021.berlinbuzzwords.de/member/ricardo-ferreira

More: https://2021.berlinbuzzwords.de/session/building-observable-streaming-systems-opentelemetry
Captions: 
	00:00:07,759 --> 00:00:12,400
thanks everybody that is

00:00:10,160 --> 00:00:14,080
with us today and i'm looking forward

00:00:12,400 --> 00:00:15,679
that everybody is enjoying this

00:00:14,080 --> 00:00:17,279
amazing conference which is berlin

00:00:15,679 --> 00:00:19,199
buzzwords um

00:00:17,279 --> 00:00:20,720
i'm pretty sure that uh there are a lot

00:00:19,199 --> 00:00:22,960
of content that

00:00:20,720 --> 00:00:24,640
uh this year the conference is providing

00:00:22,960 --> 00:00:26,960
for the t attendees and

00:00:24,640 --> 00:00:28,880
the objective here is always to not only

00:00:26,960 --> 00:00:32,160
to provide but also to share

00:00:28,880 --> 00:00:35,280
ideas so um feel free to

00:00:32,160 --> 00:00:36,800
after this presentation to uh reach out

00:00:35,280 --> 00:00:38,079
and i'm more than available for

00:00:36,800 --> 00:00:39,440
answering any questions you might have

00:00:38,079 --> 00:00:42,480
regarding the subject or

00:00:39,440 --> 00:00:43,200
anything that has to do with technology

00:00:42,480 --> 00:00:44,960
right

00:00:43,200 --> 00:00:46,640
so for those of you that don't know me

00:00:44,960 --> 00:00:48,160
uh my name is oh

00:00:46,640 --> 00:00:50,079
for those of you that don't know me my

00:00:48,160 --> 00:00:52,079
name is ricardo ferreira and uh i'm

00:00:50,079 --> 00:00:53,520
working as a developer advocate in this

00:00:52,079 --> 00:00:54,480
company that pretty sure that you might

00:00:53,520 --> 00:00:57,600
have heard of

00:00:54,480 --> 00:00:59,120
which is elastic right so in elastic i'm

00:00:57,600 --> 00:01:01,760
part of the community

00:00:59,120 --> 00:01:03,520
and um for elastic i used to work for

00:01:01,760 --> 00:01:04,080
other software vendors as well such as

00:01:03,520 --> 00:01:06,400
confluent

00:01:04,080 --> 00:01:07,119
oracle and red hat and uh if you want to

00:01:06,400 --> 00:01:09,040
reach out

00:01:07,119 --> 00:01:11,040
to discuss anything like i mentioned

00:01:09,040 --> 00:01:13,520
before uh

00:01:11,040 --> 00:01:14,400
you can send me an email i brought here

00:01:13,520 --> 00:01:16,320
my both my

00:01:14,400 --> 00:01:18,479
email from elastic and my personal one

00:01:16,320 --> 00:01:21,040
and if you happen to use twitter

00:01:18,479 --> 00:01:22,880
i'm also on twitter available so feel

00:01:21,040 --> 00:01:25,200
free to reach out and i will be

00:01:22,880 --> 00:01:26,000
on the conversation right next the uh

00:01:25,200 --> 00:01:29,200
the presentation

00:01:26,000 --> 00:01:32,000
as well right so uh

00:01:29,200 --> 00:01:32,560
if you read the description of the

00:01:32,000 --> 00:01:34,159
session

00:01:32,560 --> 00:01:36,000
right uh the main purpose of this

00:01:34,159 --> 00:01:39,040
presentation is to

00:01:36,000 --> 00:01:42,320
show you how can you use first of all

00:01:39,040 --> 00:01:45,759
open telemetry apis to

00:01:42,320 --> 00:01:46,640
stitch together services that somehow

00:01:45,759 --> 00:01:49,680
communicate

00:01:46,640 --> 00:01:51,439
using apache pulsar or i would say

00:01:49,680 --> 00:01:53,119
we're going to use apache pusher as an

00:01:51,439 --> 00:01:55,119
example here but

00:01:53,119 --> 00:01:57,680
what i'm going to show here today cannot

00:01:55,119 --> 00:01:59,759
can be applied for anything right so

00:01:57,680 --> 00:02:00,880
and when i was thinking about how i'm

00:01:59,759 --> 00:02:02,240
going to actually deliver this

00:02:00,880 --> 00:02:04,399
presentation i thought all right

00:02:02,240 --> 00:02:05,840
i'm going to talk about apis but it

00:02:04,399 --> 00:02:08,399
makes no sense

00:02:05,840 --> 00:02:10,160
to use slides to explain apis right

00:02:08,399 --> 00:02:11,840
because apis these the building block

00:02:10,160 --> 00:02:12,560
the developer used to build applications

00:02:11,840 --> 00:02:15,520
so

00:02:12,560 --> 00:02:16,160
why not show an application for them

00:02:15,520 --> 00:02:17,760
right so

00:02:16,160 --> 00:02:20,080
and this is what i've basically done

00:02:17,760 --> 00:02:22,480
here so what i'm gonna do today

00:02:20,080 --> 00:02:23,360
i brought this um let's call

00:02:22,480 --> 00:02:26,400
minimalistic

00:02:23,360 --> 00:02:29,680
application right where i'm going to

00:02:26,400 --> 00:02:32,400
um okay

00:02:29,680 --> 00:02:34,800
i'm going to explain what i'm going to

00:02:32,400 --> 00:02:36,000
do step by step right so the application

00:02:34,800 --> 00:02:37,200
right now is up and running

00:02:36,000 --> 00:02:38,800
i'm going to give you an overview about

00:02:37,200 --> 00:02:40,720
what the application does but

00:02:38,800 --> 00:02:42,800
essentially tldr

00:02:40,720 --> 00:02:44,000
it is a simple api right that i've

00:02:42,800 --> 00:02:46,959
constructed using

00:02:44,000 --> 00:02:48,879
java and spring boot right and the

00:02:46,959 --> 00:02:50,239
purpose of this api is to provide

00:02:48,879 --> 00:02:52,160
estimates

00:02:50,239 --> 00:02:54,720
so for example you want to estimate how

00:02:52,160 --> 00:02:57,360
much is the cost of a

00:02:54,720 --> 00:02:59,519
given car brand such as a nissan or

00:02:57,360 --> 00:03:01,840
toyota or a ferrari right

00:02:59,519 --> 00:03:04,000
and then what this api does is to query

00:03:01,840 --> 00:03:05,760
those like skull estimates into

00:03:04,000 --> 00:03:07,519
a database which is employment using

00:03:05,760 --> 00:03:10,080
radis right so

00:03:07,519 --> 00:03:10,720
typical microservice that you would see

00:03:10,080 --> 00:03:14,239
everywhere

00:03:10,720 --> 00:03:16,159
right um and uh

00:03:14,239 --> 00:03:18,560
what we what we are going to do here

00:03:16,159 --> 00:03:21,280
today is to make

00:03:18,560 --> 00:03:23,120
this application that is currently not

00:03:21,280 --> 00:03:25,840
only accessing reddit but also is

00:03:23,120 --> 00:03:27,599
publishing a message into apache pulsar

00:03:25,840 --> 00:03:29,840
right so the first step we're going to

00:03:27,599 --> 00:03:34,159
do is to make this

00:03:29,840 --> 00:03:36,640
let's call transaction lag observable

00:03:34,159 --> 00:03:38,000
right so everybody in the upside that is

00:03:36,640 --> 00:03:39,680
currently monitoring this whole

00:03:38,000 --> 00:03:40,640
transaction can see this operation

00:03:39,680 --> 00:03:42,400
because currently

00:03:40,640 --> 00:03:44,720
this is not being shown right i'm going

00:03:42,400 --> 00:03:45,760
to show what is the current state of the

00:03:44,720 --> 00:03:49,280
architecture

00:03:45,760 --> 00:03:49,599
as well as any downstream consumers that

00:03:49,280 --> 00:03:52,720
are

00:03:49,599 --> 00:03:55,360
pulling messages out of pulsar this one

00:03:52,720 --> 00:03:56,000
specifically i have written in using go

00:03:55,360 --> 00:03:58,080
right

00:03:56,000 --> 00:03:59,360
so that microservice over there pulls

00:03:58,080 --> 00:04:01,519
messages from pulsar

00:03:59,360 --> 00:04:02,640
to do some analytics like counting the

00:04:01,519 --> 00:04:05,360
number of times

00:04:02,640 --> 00:04:05,840
uh an estimate was given to toyota for

00:04:05,360 --> 00:04:08,560
example

00:04:05,840 --> 00:04:10,000
right a very simple estimate but the

00:04:08,560 --> 00:04:12,080
focus is more like

00:04:10,000 --> 00:04:13,760
not how to do it but what is the

00:04:12,080 --> 00:04:16,000
plumbing that is behind it

00:04:13,760 --> 00:04:17,759
but the key thing here is that this

00:04:16,000 --> 00:04:19,519
whole interaction over here the

00:04:17,759 --> 00:04:20,639
publishing part as well as the

00:04:19,519 --> 00:04:22,720
consumption part

00:04:20,639 --> 00:04:24,000
is not being shown right and you might

00:04:22,720 --> 00:04:26,240
be asking about right

00:04:24,000 --> 00:04:28,080
why not being shown here and everything

00:04:26,240 --> 00:04:30,960
else it is being shown because

00:04:28,080 --> 00:04:33,680
uh the open telemetry framework in sdk

00:04:30,960 --> 00:04:34,400
and setup apis allows you to expose

00:04:33,680 --> 00:04:35,759
pretty much

00:04:34,400 --> 00:04:37,600
everything that you currently have in

00:04:35,759 --> 00:04:39,440
your applications right

00:04:37,600 --> 00:04:41,680
but there are some gotchas right for

00:04:39,440 --> 00:04:43,120
example uh if you're dealing with uh

00:04:41,680 --> 00:04:44,320
in this case over here if you are

00:04:43,120 --> 00:04:46,400
dealing with something that is

00:04:44,320 --> 00:04:49,040
inherently synchronous like a

00:04:46,400 --> 00:04:50,720
spring boot or microservices reading in

00:04:49,040 --> 00:04:52,479
any programming language you are dealing

00:04:50,720 --> 00:04:53,520
with a protocol called http which is

00:04:52,479 --> 00:04:56,160
synchronous right so

00:04:53,520 --> 00:04:57,360
you can kind of auto magically

00:04:56,160 --> 00:04:59,600
instrument design

00:04:57,360 --> 00:05:00,639
this api but the same doesn't happen if

00:04:59,600 --> 00:05:04,240
you are using

00:05:00,639 --> 00:05:06,240
non-blocking asynchronous technologies

00:05:04,240 --> 00:05:08,080
such as for example apache pulsar and

00:05:06,240 --> 00:05:09,600
that could apply for anything that

00:05:08,080 --> 00:05:12,639
happens to have to behave the same way

00:05:09,600 --> 00:05:14,000
like you name it uh wrapped mq activemq

00:05:12,639 --> 00:05:16,560
apache kafka or

00:05:14,000 --> 00:05:17,280
any other messaging technology where all

00:05:16,560 --> 00:05:19,199
the

00:05:17,280 --> 00:05:20,560
transactions spread over multiple

00:05:19,199 --> 00:05:22,639
threads right

00:05:20,560 --> 00:05:24,240
uh there's not a single thread that

00:05:22,639 --> 00:05:25,120
provides the continuation of the

00:05:24,240 --> 00:05:27,120
transaction so

00:05:25,120 --> 00:05:29,199
we got to come up with the strategies

00:05:27,120 --> 00:05:31,680
using open telemetry to

00:05:29,199 --> 00:05:32,639
make sure although it doesn't behave

00:05:31,680 --> 00:05:35,039
like this

00:05:32,639 --> 00:05:36,479
but it looks like it is the same

00:05:35,039 --> 00:05:37,759
transaction and this is what we are

00:05:36,479 --> 00:05:41,680
going to do here today

00:05:37,759 --> 00:05:43,440
right so um let me start sharing like i

00:05:41,680 --> 00:05:44,960
mentioned before um

00:05:43,440 --> 00:05:46,560
it's not a very good idea to explain

00:05:44,960 --> 00:05:48,240
apis using slides so

00:05:46,560 --> 00:05:49,600
probably this is going to be the only

00:05:48,240 --> 00:05:50,840
set of slides that you're going to see

00:05:49,600 --> 00:05:54,720
here today

00:05:50,840 --> 00:05:55,680
um let me show the current state of what

00:05:54,720 --> 00:05:57,919
i have here

00:05:55,680 --> 00:05:58,800
all right so i'm gonna pull here my

00:05:57,919 --> 00:06:01,440
postman

00:05:58,800 --> 00:06:03,280
which is the ui that i used to send some

00:06:01,440 --> 00:06:06,400
requests to this api that i've got

00:06:03,280 --> 00:06:09,600
here right so you can see how it works

00:06:06,400 --> 00:06:12,240
um but first of all let me

00:06:09,600 --> 00:06:13,280
ask you this what if if i increase the

00:06:12,240 --> 00:06:16,560
font size to

00:06:13,280 --> 00:06:18,000
this is everybody able to see my screen

00:06:16,560 --> 00:06:21,199
you can actually

00:06:18,000 --> 00:06:24,720
put this on a chat so i can see

00:06:21,199 --> 00:06:25,680
um maybe max not sure if you're

00:06:24,720 --> 00:06:27,680
following me there but

00:06:25,680 --> 00:06:29,520
can you see that this font size over

00:06:27,680 --> 00:06:31,919
here is good for everybody to see what's

00:06:29,520 --> 00:06:31,919
going on

00:06:32,000 --> 00:06:36,479
i'm gonna while you are answering this

00:06:34,160 --> 00:06:39,120
i'm gonna issue a request here

00:06:36,479 --> 00:06:40,479
and oh the microservice is not running

00:06:39,120 --> 00:06:42,240
so that's good

00:06:40,479 --> 00:06:44,000
can i i got a connection refusal here

00:06:42,240 --> 00:06:45,840
which means that the microservice is not

00:06:44,000 --> 00:06:47,840
currently running which is good

00:06:45,840 --> 00:06:48,880
so this is the proof that it is

00:06:47,840 --> 00:06:51,759
everything alive

00:06:48,880 --> 00:06:53,840
right okay so what i'm gonna do is to

00:06:51,759 --> 00:06:55,280
start up my micro services right so i

00:06:53,840 --> 00:06:57,360
have two scripts here

00:06:55,280 --> 00:06:59,120
one of them is uh let me increase the

00:06:57,360 --> 00:07:00,560
font size over here

00:06:59,120 --> 00:07:02,240
this is the spring boot application that

00:07:00,560 --> 00:07:04,639
i mentioned before so basically i'm

00:07:02,240 --> 00:07:07,280
going to force a maven build in this

00:07:04,639 --> 00:07:08,160
microservice application and here's the

00:07:07,280 --> 00:07:10,319
interesting part

00:07:08,160 --> 00:07:13,039
i'm going to download from the open

00:07:10,319 --> 00:07:14,720
telemeter project the java agent right

00:07:13,039 --> 00:07:16,319
so if you're a java developer and you

00:07:14,720 --> 00:07:17,360
want to instrument automatically all

00:07:16,319 --> 00:07:20,560
your microservices

00:07:17,360 --> 00:07:22,639
applications all you got to do is to use

00:07:20,560 --> 00:07:24,000
this java agent along with your

00:07:22,639 --> 00:07:27,440
application right

00:07:24,000 --> 00:07:29,520
obviously you have to provide how your

00:07:27,440 --> 00:07:31,360
let's call telemetry data is going to be

00:07:29,520 --> 00:07:32,800
sent to the backend system so

00:07:31,360 --> 00:07:34,639
this is what i'm doing here i am

00:07:32,800 --> 00:07:36,960
exporting these variables

00:07:34,639 --> 00:07:38,560
and this endpoint over here is pointing

00:07:36,960 --> 00:07:40,479
to my elastic apm

00:07:38,560 --> 00:07:42,080
which is my observability platform that

00:07:40,479 --> 00:07:44,879
i'm going to use here today for

00:07:42,080 --> 00:07:45,759
demonstration purposes right so with

00:07:44,879 --> 00:07:49,120
that said

00:07:45,759 --> 00:07:52,240
i'm going to start my uh

00:07:49,120 --> 00:07:54,479
brand estimator right and

00:07:52,240 --> 00:07:56,160
meanwhile i'm going to actually start as

00:07:54,479 --> 00:07:58,720
well my

00:07:56,160 --> 00:08:00,879
analytics layer which as i mentioned

00:07:58,720 --> 00:08:01,360
before is a go application so this is a

00:08:00,879 --> 00:08:03,440
script

00:08:01,360 --> 00:08:04,800
let me show you again so since this is

00:08:03,440 --> 00:08:06,639
written in go

00:08:04,800 --> 00:08:08,479
basically what i'm doing is exporting

00:08:06,639 --> 00:08:08,960
some environment variables and then i'm

00:08:08,479 --> 00:08:11,199
running

00:08:08,960 --> 00:08:12,479
the single go file over here right which

00:08:11,199 --> 00:08:14,639
is going to generate

00:08:12,479 --> 00:08:16,800
a native application and probably in the

00:08:14,639 --> 00:08:19,199
temporary folder if i remember correctly

00:08:16,800 --> 00:08:20,080
and then it's going to be executed right

00:08:19,199 --> 00:08:23,280
so both of them

00:08:20,080 --> 00:08:26,400
now are executed now let's issue

00:08:23,280 --> 00:08:28,080
one more time the request to make an

00:08:26,400 --> 00:08:30,000
estimate for this app so i'm going to

00:08:28,080 --> 00:08:32,159
click send right

00:08:30,000 --> 00:08:34,080
and now since the microservice is up and

00:08:32,159 --> 00:08:36,399
running you can send here this is the

00:08:34,080 --> 00:08:39,120
brand and this is the price so

00:08:36,399 --> 00:08:40,880
right as expected right and if you look

00:08:39,120 --> 00:08:43,120
to the analytics leader there's a cow

00:08:40,880 --> 00:08:45,360
here for the brand nissan so

00:08:43,120 --> 00:08:46,480
the whole architecture is the end-to-end

00:08:45,360 --> 00:08:48,640
architecture is

00:08:46,480 --> 00:08:49,600
working but here's the problem here is

00:08:48,640 --> 00:08:53,040
the gotcha

00:08:49,600 --> 00:08:53,680
right if we look to the observability

00:08:53,040 --> 00:08:55,279
platform

00:08:53,680 --> 00:08:56,959
right now right and this is the

00:08:55,279 --> 00:08:59,120
observability platform which is the

00:08:56,959 --> 00:09:02,720
elastic atm if we go to

00:08:59,120 --> 00:09:03,760
the apm tab and i'm going to increase a

00:09:02,720 --> 00:09:06,800
little bit

00:09:03,760 --> 00:09:08,560
this inside so everybody can see it

00:09:06,800 --> 00:09:10,240
right so you're going to see that here

00:09:08,560 --> 00:09:11,519
on the apm there is this microservice

00:09:10,240 --> 00:09:13,120
called brand estimator

00:09:11,519 --> 00:09:14,560
that if we look to the service map

00:09:13,120 --> 00:09:15,839
you're going to see that oh

00:09:14,560 --> 00:09:17,120
all the interactions that the

00:09:15,839 --> 00:09:18,800
microservices does has been

00:09:17,120 --> 00:09:20,959
automatically discovered so yeah

00:09:18,800 --> 00:09:22,640
the microservice is written in java and

00:09:20,959 --> 00:09:24,720
access radis database

00:09:22,640 --> 00:09:25,760
but more importantly if we click on this

00:09:24,720 --> 00:09:27,360
microservice

00:09:25,760 --> 00:09:28,800
you're going to see that there are some

00:09:27,360 --> 00:09:30,800
transactions right

00:09:28,800 --> 00:09:32,720
that has been executed in the last i

00:09:30,800 --> 00:09:33,920
think this is 15 minutes let me double

00:09:32,720 --> 00:09:36,560
check yep

00:09:33,920 --> 00:09:38,560
actually let me decrease this for the

00:09:36,560 --> 00:09:41,600
last five minutes so we can have a more

00:09:38,560 --> 00:09:44,480
focused uh observability right

00:09:41,600 --> 00:09:45,200
and then in the last five minutes we've

00:09:44,480 --> 00:09:48,080
had

00:09:45,200 --> 00:09:49,360
this invocation right here that if we

00:09:48,080 --> 00:09:52,320
scroll down

00:09:49,360 --> 00:09:54,160
we're gonna see that this is the

00:09:52,320 --> 00:09:56,160
breakdown of the transaction

00:09:54,160 --> 00:09:59,279
everything that you were looking here

00:09:56,160 --> 00:10:00,240
right it was automatically discovered by

00:09:59,279 --> 00:10:02,160
that

00:10:00,240 --> 00:10:04,000
agent that we've downloaded from the

00:10:02,160 --> 00:10:05,279
open telemetry that's the beauty if

00:10:04,000 --> 00:10:06,000
you're a java developer that's the

00:10:05,279 --> 00:10:09,200
beauty of

00:10:06,000 --> 00:10:10,720
building applications in java that are

00:10:09,200 --> 00:10:13,040
automatically instrument because

00:10:10,720 --> 00:10:14,640
in the java world open telemetry provide

00:10:13,040 --> 00:10:16,560
this agent so

00:10:14,640 --> 00:10:18,480
it discovered for example that this is a

00:10:16,560 --> 00:10:20,399
spring boot application it discovered

00:10:18,480 --> 00:10:21,519
they interacted with the radius database

00:10:20,399 --> 00:10:24,320
as you can see here

00:10:21,519 --> 00:10:25,760
over here so everything was discovered

00:10:24,320 --> 00:10:28,399
automatic except

00:10:25,760 --> 00:10:28,800
for this invocation to this method

00:10:28,399 --> 00:10:32,560
called

00:10:28,800 --> 00:10:35,680
feed analytics that i actually

00:10:32,560 --> 00:10:38,800
create i actually made this happen uh

00:10:35,680 --> 00:10:42,240
let me show you the code here of the

00:10:38,800 --> 00:10:44,880
controller so let me so

00:10:42,240 --> 00:10:46,880
this is the endpoint that's invoked when

00:10:44,880 --> 00:10:48,800
you call the api and

00:10:46,880 --> 00:10:50,160
if let me increase the phone signs over

00:10:48,800 --> 00:10:52,720
here one more time

00:10:50,160 --> 00:10:53,680
and if we see here we're gonna see that

00:10:52,720 --> 00:10:55,519
as i

00:10:53,680 --> 00:10:57,519
fulfill that request i'm actually call

00:10:55,519 --> 00:10:58,399
this method called feed analytics which

00:10:57,519 --> 00:11:00,959
in turn

00:10:58,399 --> 00:11:01,680
basically sends a message to pusar right

00:11:00,959 --> 00:11:03,279
however

00:11:01,680 --> 00:11:04,959
how i made this available in the

00:11:03,279 --> 00:11:06,240
observability platform because i've used

00:11:04,959 --> 00:11:09,440
this annotation called

00:11:06,240 --> 00:11:12,880
act with spam so this is how why this

00:11:09,440 --> 00:11:14,560
feed analytics annotation here ended up

00:11:12,880 --> 00:11:17,200
being shown here on the observable

00:11:14,560 --> 00:11:19,839
platform but what matters is that

00:11:17,200 --> 00:11:20,720
as you can see here the where is the

00:11:19,839 --> 00:11:22,720
part where

00:11:20,720 --> 00:11:24,480
the application is sending a message to

00:11:22,720 --> 00:11:26,079
pulsar it's not being shown

00:11:24,480 --> 00:11:27,519
and that's the problem right this is

00:11:26,079 --> 00:11:28,000
what we are going to fix right now

00:11:27,519 --> 00:11:31,279
because

00:11:28,000 --> 00:11:33,040
we we have to make this interaction that

00:11:31,279 --> 00:11:33,360
is fundamentally part of the transaction

00:11:33,040 --> 00:11:35,200
right

00:11:33,360 --> 00:11:36,640
it's part of the architecture we have to

00:11:35,200 --> 00:11:39,519
make this interaction

00:11:36,640 --> 00:11:40,320
observable visible to the operators so

00:11:39,519 --> 00:11:43,200
let's see

00:11:40,320 --> 00:11:44,480
how we can actually fix this right so

00:11:43,200 --> 00:11:47,040
what we're going to do

00:11:44,480 --> 00:11:48,000
right i'm going to show here the what i

00:11:47,040 --> 00:11:50,160
call in the

00:11:48,000 --> 00:11:51,680
spring boot world right the pulsar

00:11:50,160 --> 00:11:52,800
configuration right the pulsar

00:11:51,680 --> 00:11:55,839
configuration

00:11:52,800 --> 00:11:59,040
is the beam that is being used for

00:11:55,839 --> 00:12:00,800
instantiate the producer that

00:11:59,040 --> 00:12:02,240
is going to be injected and all the

00:12:00,800 --> 00:12:03,360
other beans on my spring boot

00:12:02,240 --> 00:12:06,320
application that can

00:12:03,360 --> 00:12:07,839
interact with pulsars so specifically i

00:12:06,320 --> 00:12:09,600
am creating here and the spools are

00:12:07,839 --> 00:12:12,000
client right so this is a beam

00:12:09,600 --> 00:12:14,160
right and then from that client i'm

00:12:12,000 --> 00:12:14,880
creating a producer right and as you can

00:12:14,160 --> 00:12:18,399
see here

00:12:14,880 --> 00:12:20,240
this producer is uh using json as schema

00:12:18,399 --> 00:12:21,839
right and basically it's connecting to

00:12:20,240 --> 00:12:24,959
this topic called estimates

00:12:21,839 --> 00:12:26,959
and then i'm creating but uh if you are

00:12:24,959 --> 00:12:28,399
working with pulsar and you want to

00:12:26,959 --> 00:12:30,000
bring instrumentation

00:12:28,399 --> 00:12:32,000
and open telemetry to the pulsar

00:12:30,000 --> 00:12:34,000
applications the best thing you can do

00:12:32,000 --> 00:12:36,160
is actually use interceptors so

00:12:34,000 --> 00:12:37,760
i'm going to uncomment this right so

00:12:36,160 --> 00:12:39,760
this is a java class that i've already

00:12:37,760 --> 00:12:40,399
created it's empty right now we're gonna

00:12:39,760 --> 00:12:43,200
fill

00:12:40,399 --> 00:12:44,079
uh together but if you create an

00:12:43,200 --> 00:12:46,639
interceptor

00:12:44,079 --> 00:12:48,240
in uh from pulsar right you can simply

00:12:46,639 --> 00:12:49,120
as you create your producer and

00:12:48,240 --> 00:12:50,720
consumers

00:12:49,120 --> 00:12:53,360
you can simply call the method dot

00:12:50,720 --> 00:12:55,360
intercept and then provide an instance

00:12:53,360 --> 00:12:57,920
of your intercept it's that simple right

00:12:55,360 --> 00:13:00,160
so now that we've seen

00:12:57,920 --> 00:13:01,279
how we can hook up into the our producer

00:13:00,160 --> 00:13:03,200
and consumers

00:13:01,279 --> 00:13:05,839
let's check into this interceptor right

00:13:03,200 --> 00:13:07,360
now so an interceptor as you can see

00:13:05,839 --> 00:13:09,600
here is essentially a class that

00:13:07,360 --> 00:13:12,160
implements producer interceptor oh

00:13:09,600 --> 00:13:12,800
right very simple and then there are

00:13:12,160 --> 00:13:14,560
pretty much

00:13:12,800 --> 00:13:16,800
four methods that you have callback

00:13:14,560 --> 00:13:18,959
methods that you have to implement like

00:13:16,800 --> 00:13:20,160
the one that checks if the uh

00:13:18,959 --> 00:13:22,800
instrumentation

00:13:20,160 --> 00:13:24,800
applies or not to a given message in our

00:13:22,800 --> 00:13:26,560
case it's gonna be always true right

00:13:24,800 --> 00:13:28,880
the actual instrumentation that's gonna

00:13:26,560 --> 00:13:31,440
happen before the message is sent

00:13:28,880 --> 00:13:32,480
to pulsar and if you wanna hook up some

00:13:31,440 --> 00:13:34,880
specifically

00:13:32,480 --> 00:13:36,480
uh like all right i'm gonna do something

00:13:34,880 --> 00:13:38,959
in their exact moment that i receive an

00:13:36,480 --> 00:13:41,519
acknowledgement from pulsar so i can use

00:13:38,959 --> 00:13:43,199
this callback over here and if i spin up

00:13:41,519 --> 00:13:45,440
resources in my java class

00:13:43,199 --> 00:13:47,360
i can use the callback close to you know

00:13:45,440 --> 00:13:50,560
close those resources right

00:13:47,360 --> 00:13:54,480
so uh the first thing we got to do here

00:13:50,560 --> 00:13:56,800
is um let me open up

00:13:54,480 --> 00:13:56,800
my

00:13:58,320 --> 00:14:04,639
kit here first thing we got to do is to

00:14:02,240 --> 00:14:06,480
come up with a tracer right so i'm going

00:14:04,639 --> 00:14:09,360
to put here a tracer

00:14:06,480 --> 00:14:10,160
right so let me show here one more time

00:14:09,360 --> 00:14:12,480
uh

00:14:10,160 --> 00:14:14,160
why we are so easily being able to

00:14:12,480 --> 00:14:15,760
create a tracer here using the open

00:14:14,160 --> 00:14:18,079
telemetry sdk because

00:14:15,760 --> 00:14:20,399
again you are instrumenting using the

00:14:18,079 --> 00:14:23,040
agent so the agent behind scenes is

00:14:20,399 --> 00:14:24,720
kind of a making the tracer available

00:14:23,040 --> 00:14:26,639
for you automatically all you got to do

00:14:24,720 --> 00:14:28,399
is to retrieve it right and you give a

00:14:26,639 --> 00:14:30,720
unique name for it so that's what we are

00:14:28,399 --> 00:14:32,240
doing here right and then as i mentioned

00:14:30,720 --> 00:14:36,160
before we have to

00:14:32,240 --> 00:14:39,199
feel the before send um method so

00:14:36,160 --> 00:14:42,240
this method we are going to use

00:14:39,199 --> 00:14:44,639
this approach over here right i'm gonna

00:14:42,240 --> 00:14:45,600
before returning the message to the

00:14:44,639 --> 00:14:47,760
caller

00:14:45,600 --> 00:14:48,639
we are going to do this let me show you

00:14:47,760 --> 00:14:54,000
here

00:14:48,639 --> 00:14:54,000
how this implementation works oops

00:14:54,959 --> 00:14:58,560
i think if you do this you are going to

00:14:56,639 --> 00:14:59,920
be able to see so pretty much what we

00:14:58,560 --> 00:15:02,160
are doing here is right

00:14:59,920 --> 00:15:03,920
we are creating a spam here's the tracer

00:15:02,160 --> 00:15:05,120
for the tracer you create a span right

00:15:03,920 --> 00:15:07,680
so for those of you that know open

00:15:05,120 --> 00:15:09,680
telemetry this is how the api works

00:15:07,680 --> 00:15:11,440
and then there are some annotations that

00:15:09,680 --> 00:15:12,000
you can use to specify if this is a

00:15:11,440 --> 00:15:14,639
producer

00:15:12,000 --> 00:15:16,720
a consumer or things like that and then

00:15:14,639 --> 00:15:17,199
everything in the open telemetry order

00:15:16,720 --> 00:15:19,680
is

00:15:17,199 --> 00:15:20,560
boils down into the concept of context

00:15:19,680 --> 00:15:22,880
right you have to

00:15:20,560 --> 00:15:24,560
be aware that everything you do you have

00:15:22,880 --> 00:15:26,000
to put it back into a context or you

00:15:24,560 --> 00:15:28,480
have to extract from the context

00:15:26,000 --> 00:15:30,480
right so because the context is the

00:15:28,480 --> 00:15:32,320
entity that is propagated over all the

00:15:30,480 --> 00:15:32,720
layers and services of your architecture

00:15:32,320 --> 00:15:34,959
right

00:15:32,720 --> 00:15:36,800
so you have to build up a context right

00:15:34,959 --> 00:15:37,680
and here we are retrieving the current

00:15:36,800 --> 00:15:40,720
context

00:15:37,680 --> 00:15:42,880
context sorry and then we are

00:15:40,720 --> 00:15:44,399
inserting this new span that we've

00:15:42,880 --> 00:15:45,680
created over here and then we are

00:15:44,399 --> 00:15:48,639
decorating this

00:15:45,680 --> 00:15:49,920
span with some labels or annotations

00:15:48,639 --> 00:15:51,680
that uh just to make it

00:15:49,920 --> 00:15:53,360
like a visible for the operating

00:15:51,680 --> 00:15:54,959
operators to better understand what's

00:15:53,360 --> 00:15:56,480
going on behind the scenes right

00:15:54,959 --> 00:15:58,000
and then like i mentioned before

00:15:56,480 --> 00:15:59,759
everything is about the context so you

00:15:58,000 --> 00:16:03,120
have to come up with a way to

00:15:59,759 --> 00:16:05,759
give him the message from pulsar right

00:16:03,120 --> 00:16:06,720
put that context into the message

00:16:05,759 --> 00:16:10,079
because think about it

00:16:06,720 --> 00:16:12,240
right uh how a producer fundamentally

00:16:10,079 --> 00:16:14,000
communicates with a consumer right

00:16:12,240 --> 00:16:15,600
uh it's not about it's not with the

00:16:14,000 --> 00:16:18,399
broker the message

00:16:15,600 --> 00:16:19,040
acts as we call as the carrier because

00:16:18,399 --> 00:16:20,959
it's going to

00:16:19,040 --> 00:16:22,560
carry the context from one point to

00:16:20,959 --> 00:16:25,600
another right so

00:16:22,560 --> 00:16:28,880
what we need to do here is to store

00:16:25,600 --> 00:16:29,759
this context into the message which is

00:16:28,880 --> 00:16:31,600
going to be

00:16:29,759 --> 00:16:32,880
act as our carrier so that's why i

00:16:31,600 --> 00:16:35,759
created this method called

00:16:32,880 --> 00:16:36,880
store context on message so what we're

00:16:35,759 --> 00:16:39,279
going to do here

00:16:36,880 --> 00:16:40,639
i'm going to save it and then let me

00:16:39,279 --> 00:16:42,320
explain the code

00:16:40,639 --> 00:16:44,160
so pretty much what we are doing here

00:16:42,320 --> 00:16:46,240
the message is the carrier right so

00:16:44,160 --> 00:16:48,720
here's the context here's the carrier

00:16:46,240 --> 00:16:50,240
i have to provide a way using the open

00:16:48,720 --> 00:16:53,920
telemetry sdk

00:16:50,240 --> 00:16:56,160
to set that information right because

00:16:53,920 --> 00:16:57,600
again uh you can use this approach here

00:16:56,160 --> 00:16:59,680
this technique that i'm showing you for

00:16:57,600 --> 00:17:00,959
pretty much virtually any technology so

00:16:59,680 --> 00:17:02,959
you have to come up with your

00:17:00,959 --> 00:17:06,160
implementation in our case here

00:17:02,959 --> 00:17:09,199
to a seller that knows

00:17:06,160 --> 00:17:11,039
how to put data into a

00:17:09,199 --> 00:17:12,319
message and message is the building

00:17:11,039 --> 00:17:14,160
block from pulsar but

00:17:12,319 --> 00:17:16,319
if we're dealing with uh let's say

00:17:14,160 --> 00:17:17,760
records for an apache kafka

00:17:16,319 --> 00:17:19,199
that would be the same approach and

00:17:17,760 --> 00:17:20,720
that's the beauty of what i'm showing

00:17:19,199 --> 00:17:21,919
here today because you can use the same

00:17:20,720 --> 00:17:24,079
approach over here

00:17:21,919 --> 00:17:26,240
to come up with any strategy right for

00:17:24,079 --> 00:17:27,039
any technology that is asynchronous and

00:17:26,240 --> 00:17:28,640
non-blocking

00:17:27,039 --> 00:17:29,840
so pretty much what i'm doing here is to

00:17:28,640 --> 00:17:31,120
come up with this callback

00:17:29,840 --> 00:17:34,720
implementation called

00:17:31,120 --> 00:17:37,840
set that teaches how to set the message

00:17:34,720 --> 00:17:40,960
sorry the context into the message right

00:17:37,840 --> 00:17:43,520
with that change in place right

00:17:40,960 --> 00:17:44,400
i'm going to pause my microservice one

00:17:43,520 --> 00:17:47,120
more time

00:17:44,400 --> 00:17:47,440
and i'm going to simply execute it again

00:17:47,120 --> 00:17:49,520
so

00:17:47,440 --> 00:17:51,039
because we've made some changes right we

00:17:49,520 --> 00:17:51,919
with let's recap we created the

00:17:51,039 --> 00:17:54,160
interceptor

00:17:51,919 --> 00:17:55,520
and then we curl the interceptor to

00:17:54,160 --> 00:17:57,919
create a span

00:17:55,520 --> 00:18:00,160
decorate the span and put the span into

00:17:57,919 --> 00:18:01,440
a context and save this context into the

00:18:00,160 --> 00:18:03,440
message so now

00:18:01,440 --> 00:18:04,880
the message has been carrying this

00:18:03,440 --> 00:18:07,679
context over

00:18:04,880 --> 00:18:09,520
the poster broker and whenever any

00:18:07,679 --> 00:18:10,320
consumers downstream speaks up that

00:18:09,520 --> 00:18:12,559
message

00:18:10,320 --> 00:18:14,799
guess what they're going to be able to

00:18:12,559 --> 00:18:16,320
continue the transaction

00:18:14,799 --> 00:18:18,720
so that's the magic that we're going to

00:18:16,320 --> 00:18:19,360
build here so the microsoft is up and

00:18:18,720 --> 00:18:21,840
running

00:18:19,360 --> 00:18:22,400
good so what we are going to do here

00:18:21,840 --> 00:18:24,960
right now

00:18:22,400 --> 00:18:26,840
is come up with a new invocation let's

00:18:24,960 --> 00:18:31,600
change the the brand right now

00:18:26,840 --> 00:18:34,240
um instead of nissan let's

00:18:31,600 --> 00:18:36,320
i don't know let's make an estimate for

00:18:34,240 --> 00:18:37,679
a ferrari for example so yeah ferrari is

00:18:36,320 --> 00:18:38,640
a little bit more expensive than a

00:18:37,679 --> 00:18:42,000
nissan so

00:18:38,640 --> 00:18:44,320
but the estimate has been given good a

00:18:42,000 --> 00:18:46,400
new transaction has been executed

00:18:44,320 --> 00:18:47,360
now let's see in our observability

00:18:46,400 --> 00:18:50,480
platform right

00:18:47,360 --> 00:18:52,480
uh that's too big yeah

00:18:50,480 --> 00:18:54,160
let's see in our observability platform

00:18:52,480 --> 00:18:57,200
in the last five minutes what's going on

00:18:54,160 --> 00:18:57,760
so yep we have a new transaction that

00:18:57,200 --> 00:18:59,600
happens

00:18:57,760 --> 00:19:01,679
so let's see what's the difference in

00:18:59,600 --> 00:19:03,200
this new version of the transaction

00:19:01,679 --> 00:19:05,679
if we look at here right now you're

00:19:03,200 --> 00:19:06,799
gonna see yeah everything else that was

00:19:05,679 --> 00:19:09,360
being shown before

00:19:06,799 --> 00:19:10,559
is being shown here again however and

00:19:09,360 --> 00:19:13,840
that's the trick

00:19:10,559 --> 00:19:16,080
here it here is the we call in the open

00:19:13,840 --> 00:19:19,280
telemetry work we call this a span

00:19:16,080 --> 00:19:21,280
right there is a new span a child span

00:19:19,280 --> 00:19:22,799
that happened on behalf of this method

00:19:21,280 --> 00:19:24,400
over here field analytics

00:19:22,799 --> 00:19:26,559
right there was the trigger for that

00:19:24,400 --> 00:19:29,760
span if we click here on that new

00:19:26,559 --> 00:19:32,000
span and check the metadata this is the

00:19:29,760 --> 00:19:32,640
decoration or the information that we've

00:19:32,000 --> 00:19:34,320
put

00:19:32,640 --> 00:19:36,840
into the message right which is pretty

00:19:34,320 --> 00:19:39,919
cool right

00:19:36,840 --> 00:19:41,440
um okay um i'm gonna see here that the

00:19:39,919 --> 00:19:43,120
zoom is a little slow so

00:19:41,440 --> 00:19:45,919
i'm gonna zoom up a little bit more

00:19:43,120 --> 00:19:49,200
right sorry thanks for the heads up

00:19:45,919 --> 00:19:50,480
and uh so as you can see here we have

00:19:49,200 --> 00:19:52,160
everything ready for

00:19:50,480 --> 00:19:54,000
the decoration so let's do the

00:19:52,160 --> 00:19:56,240
consumption part right now

00:19:54,000 --> 00:19:58,320
because again the microservices that

00:19:56,240 --> 00:20:00,400
actually pull the message out of pulsar

00:19:58,320 --> 00:20:02,240
is written and go so we have to do

00:20:00,400 --> 00:20:04,559
provide the same process and go

00:20:02,240 --> 00:20:06,960
so we can see everything up and running

00:20:04,559 --> 00:20:08,240
right so let's do this right now

00:20:06,960 --> 00:20:10,720
so the first thing i'm going to do is

00:20:08,240 --> 00:20:13,120
actually to pause my microservice and go

00:20:10,720 --> 00:20:14,320
right so we're done with the java part

00:20:13,120 --> 00:20:17,360
let's now check

00:20:14,320 --> 00:20:20,080
the analytics and go the code here

00:20:17,360 --> 00:20:20,799
is pretty much done the only thing we

00:20:20,080 --> 00:20:24,080
have to do

00:20:20,799 --> 00:20:26,640
is create a tracer so in the go ward

00:20:24,080 --> 00:20:28,080
it it looks like almost the same with a

00:20:26,640 --> 00:20:29,840
few differences so

00:20:28,080 --> 00:20:32,080
first you have to come up with a tracer

00:20:29,840 --> 00:20:36,240
so this is part one

00:20:32,080 --> 00:20:39,440
and then you have to uh fundamentally

00:20:36,240 --> 00:20:42,960
create a span that is going to

00:20:39,440 --> 00:20:44,880
where's the span here we go

00:20:42,960 --> 00:20:46,799
yep we have to come up with a span

00:20:44,880 --> 00:20:49,039
that's going to

00:20:46,799 --> 00:20:50,880
demark that part of the transaction so

00:20:49,039 --> 00:20:51,679
after we consume the message we are

00:20:50,880 --> 00:20:54,720
going to

00:20:51,679 --> 00:20:56,480
let me zoom up again so after we consume

00:20:54,720 --> 00:20:57,520
the message from pulsar we're going to

00:20:56,480 --> 00:20:59,679
create a span

00:20:57,520 --> 00:21:00,880
right so but here's the interesting part

00:20:59,679 --> 00:21:03,760
first of all we have to

00:21:00,880 --> 00:21:05,280
use that span so right after we

00:21:03,760 --> 00:21:05,919
acknowledge the consumption of the

00:21:05,280 --> 00:21:09,120
message

00:21:05,919 --> 00:21:11,840
we can simply receive the span dot

00:21:09,120 --> 00:21:13,440
end right so right now we are the

00:21:11,840 --> 00:21:15,919
marking the end of the transaction

00:21:13,440 --> 00:21:17,600
good but more importantly we have to

00:21:15,919 --> 00:21:19,039
come up with a way just like we had to

00:21:17,600 --> 00:21:21,200
come up with a way to

00:21:19,039 --> 00:21:22,480
put the context into the message now

00:21:21,200 --> 00:21:26,559
have to extract it

00:21:22,480 --> 00:21:26,880
right so uh how we are going to extract

00:21:26,559 --> 00:21:30,559
this

00:21:26,880 --> 00:21:33,120
in the goal word so we have this some

00:21:30,559 --> 00:21:34,960
functionalities in the go api that

00:21:33,120 --> 00:21:38,000
allows us to do this so

00:21:34,960 --> 00:21:39,840
i'm going to show you right here let me

00:21:38,000 --> 00:21:41,919
zoom in and then i can continue

00:21:39,840 --> 00:21:43,760
so if you call this package open

00:21:41,919 --> 00:21:46,320
telemetry and get the text map

00:21:43,760 --> 00:21:49,039
propagator and call the function shrek

00:21:46,320 --> 00:21:49,440
you can provide your current context and

00:21:49,039 --> 00:21:51,600
then

00:21:49,440 --> 00:21:53,280
just like we build a remember that in

00:21:51,600 --> 00:21:55,919
java word we created a

00:21:53,280 --> 00:21:57,039
setter right now we have to come up with

00:21:55,919 --> 00:21:59,360
a gather

00:21:57,039 --> 00:22:01,760
right an implementation of a callback

00:21:59,360 --> 00:22:04,640
that teaches the open telemetry sdk

00:22:01,760 --> 00:22:04,960
how to get data from the carrier and

00:22:04,640 --> 00:22:06,880
this

00:22:04,960 --> 00:22:08,320
in this case the carrier is the actual

00:22:06,880 --> 00:22:12,159
message so

00:22:08,320 --> 00:22:16,480
let's see the implementation of this

00:22:12,159 --> 00:22:18,320
getter right so um let me copy here

00:22:16,480 --> 00:22:19,600
i'm going to put here right in the end

00:22:18,320 --> 00:22:22,720
of my

00:22:19,600 --> 00:22:23,600
code and let me zoom up one more time so

00:22:22,720 --> 00:22:26,320
you can see it

00:22:23,600 --> 00:22:28,240
right so what is a care what is a gather

00:22:26,320 --> 00:22:29,520
and go right so basically i create a

00:22:28,240 --> 00:22:31,679
stretch right here

00:22:29,520 --> 00:22:32,799
that takes a message as a parameter and

00:22:31,679 --> 00:22:34,720
a constructor

00:22:32,799 --> 00:22:36,720
and then those are the callbacks that

00:22:34,720 --> 00:22:39,039
i've created from that

00:22:36,720 --> 00:22:40,400
strict right so there's three of them

00:22:39,039 --> 00:22:41,360
that have to implement right

00:22:40,400 --> 00:22:43,679
uh you don't have to provide

00:22:41,360 --> 00:22:46,559
implementation for all of them but uh

00:22:43,679 --> 00:22:48,320
at least in our case years the key is

00:22:46,559 --> 00:22:49,360
fundamental right so it you have to

00:22:48,320 --> 00:22:52,000
teach how to

00:22:49,360 --> 00:22:53,039
retrieve given a key how to retrieve the

00:22:52,000 --> 00:22:55,760
message from the key

00:22:53,039 --> 00:22:57,120
and also the set and also the keys right

00:22:55,760 --> 00:23:00,080
so now that we have

00:22:57,120 --> 00:23:02,000
right now that we have our goal link

00:23:00,080 --> 00:23:05,200
working as expected

00:23:02,000 --> 00:23:06,960
let's execute our analytics layer

00:23:05,200 --> 00:23:08,559
one more time because we've made the

00:23:06,960 --> 00:23:11,039
changes right uh

00:23:08,559 --> 00:23:13,120
we are we have probably about six

00:23:11,039 --> 00:23:17,120
minutes to the end so it's we're on time

00:23:13,120 --> 00:23:17,120
which is good um

00:23:17,919 --> 00:23:25,200
okay all right good good good good

00:23:21,120 --> 00:23:26,960
and let's make another invocation

00:23:25,200 --> 00:23:28,799
to the microservice right it can be a

00:23:26,960 --> 00:23:30,960
ferrari no problem

00:23:28,799 --> 00:23:32,880
i'm going to call an estimate for a

00:23:30,960 --> 00:23:35,120
ferrari one more time

00:23:32,880 --> 00:23:36,080
it works as expected right because it

00:23:35,120 --> 00:23:38,400
should

00:23:36,080 --> 00:23:40,400
presumably but now let's take a look on

00:23:38,400 --> 00:23:42,320
the observability platform and see

00:23:40,400 --> 00:23:44,240
what's what's different this time right

00:23:42,320 --> 00:23:46,320
so let's refresh

00:23:44,240 --> 00:23:47,760
to see the transaction so the here's the

00:23:46,320 --> 00:23:48,960
new transaction that happened in the

00:23:47,760 --> 00:23:51,600
last five minutes

00:23:48,960 --> 00:23:53,120
after the chains in both the java and go

00:23:51,600 --> 00:23:55,360
length work microservice

00:23:53,120 --> 00:23:56,720
and now if we look this transaction that

00:23:55,360 --> 00:23:57,600
was for the ferrari the whole

00:23:56,720 --> 00:24:00,240
transaction took

00:23:57,600 --> 00:24:01,039
23 milliseconds pretty fast but now you

00:24:00,240 --> 00:24:04,320
can see that

00:24:01,039 --> 00:24:06,960
voila right now by the time the

00:24:04,320 --> 00:24:08,320
feed analytics method executes on the

00:24:06,960 --> 00:24:11,840
java microserver side

00:24:08,320 --> 00:24:14,960
it sends the message to pulsar and then

00:24:11,840 --> 00:24:17,919
uh i'm terrible in math but probably

00:24:14,960 --> 00:24:20,559
like a less than 80 micro microservices

00:24:17,919 --> 00:24:22,799
microsecond microseconds after

00:24:20,559 --> 00:24:24,640
the consumer which is written and going

00:24:22,799 --> 00:24:27,039
post a message from pulsar

00:24:24,640 --> 00:24:27,919
and continues the transaction and as you

00:24:27,039 --> 00:24:30,159
can see here

00:24:27,919 --> 00:24:31,039
all of this both the producer and the

00:24:30,159 --> 00:24:34,320
consumer

00:24:31,039 --> 00:24:36,240
happens on the context

00:24:34,320 --> 00:24:38,480
of the microservice and this is the

00:24:36,240 --> 00:24:40,400
beauty of you making the

00:24:38,480 --> 00:24:42,480
the whole transaction now observable

00:24:40,400 --> 00:24:46,159
because an operator

00:24:42,480 --> 00:24:48,240
thinks mike an operator can now see that

00:24:46,159 --> 00:24:50,000
okay now it makes sense right now now i

00:24:48,240 --> 00:24:50,880
can see the whole transaction and then i

00:24:50,000 --> 00:24:52,799
can see that

00:24:50,880 --> 00:24:54,240
by the time i call the feed analytics

00:24:52,799 --> 00:24:56,400
and the java microservice

00:24:54,240 --> 00:24:59,039
it sends a message to pulsar what's

00:24:56,400 --> 00:25:01,360
topic so the operator can click here and

00:24:59,039 --> 00:25:03,919
see the topic which is the topic

00:25:01,360 --> 00:25:04,799
estimates right and then you can also

00:25:03,919 --> 00:25:06,960
see that oh

00:25:04,799 --> 00:25:08,880
there's a consumer here that receives

00:25:06,960 --> 00:25:09,919
from the estimate and if you click here

00:25:08,880 --> 00:25:11,600
on metadata

00:25:09,919 --> 00:25:13,760
it's going to say oh this is a topic

00:25:11,600 --> 00:25:15,679
this is from pulsar and this is a topic

00:25:13,760 --> 00:25:18,159
called the estimate right

00:25:15,679 --> 00:25:19,600
uh we could also decorate with a bunch

00:25:18,159 --> 00:25:21,679
of more information but

00:25:19,600 --> 00:25:23,200
i choose to be a little minimalist here

00:25:21,679 --> 00:25:26,320
right uh

00:25:23,200 --> 00:25:30,080
so before we continue let me do this

00:25:26,320 --> 00:25:32,080
right i'm going to provide to my dear

00:25:30,080 --> 00:25:32,880
friend mike here that's helped me on the

00:25:32,080 --> 00:25:36,400
backstage

00:25:32,880 --> 00:25:39,120
a url of my of the github repository

00:25:36,400 --> 00:25:40,400
that has the whole code already

00:25:39,120 --> 00:25:42,880
implemented for you

00:25:40,400 --> 00:25:44,720
all you got to do is to clone the apple

00:25:42,880 --> 00:25:46,159
docker compose up yeah you have to start

00:25:44,720 --> 00:25:47,840
docker sorry about that but

00:25:46,159 --> 00:25:49,360
you have to docker compose up and then

00:25:47,840 --> 00:25:51,200
everything we all been running so you

00:25:49,360 --> 00:25:54,080
can study the code

00:25:51,200 --> 00:25:55,600
with more like uh because here i'm i'm

00:25:54,080 --> 00:25:56,799
doing things a little bit fast because

00:25:55,600 --> 00:25:59,120
we are time constrained

00:25:56,799 --> 00:26:00,000
right but you can study the code right

00:25:59,120 --> 00:26:02,159
and mikey

00:26:00,000 --> 00:26:04,480
if you could or uh provide this link for

00:26:02,159 --> 00:26:07,520
the uh my friends that are

00:26:04,480 --> 00:26:07,840
are watching this session please and

00:26:07,520 --> 00:26:10,320
then

00:26:07,840 --> 00:26:11,360
before we actually finish right since

00:26:10,320 --> 00:26:12,960
we've

00:26:11,360 --> 00:26:14,880
we have probably three minutes left i

00:26:12,960 --> 00:26:18,320
would like to show you something really

00:26:14,880 --> 00:26:20,480
really interesting uh okay

00:26:18,320 --> 00:26:22,960
which is there is something that you can

00:26:20,480 --> 00:26:25,840
also do with open telemetry and

00:26:22,960 --> 00:26:27,360
i'm gonna do this on the microservice

00:26:25,840 --> 00:26:30,960
written in

00:26:27,360 --> 00:26:34,320
bo which is matrix pretty awesome so

00:26:30,960 --> 00:26:36,640
what i'm gonna do is to

00:26:34,320 --> 00:26:38,480
use the api for an open telemetry to

00:26:36,640 --> 00:26:40,960
actually come up with metric

00:26:38,480 --> 00:26:42,240
so i'm going to create pretty quick here

00:26:40,960 --> 00:26:45,840
because we are

00:26:42,240 --> 00:26:49,039
almost running out of time uh

00:26:45,840 --> 00:26:51,679
where are my tracer here first after the

00:26:49,039 --> 00:26:54,799
tracer you have to come up with a metric

00:26:51,679 --> 00:26:56,640
and then you have to use the metric

00:26:54,799 --> 00:26:58,159
i'm gonna copy the code and then i'll

00:26:56,640 --> 00:26:59,840
explain later

00:26:58,159 --> 00:27:01,600
all right let me put it here the code

00:26:59,840 --> 00:27:04,480
first and then

00:27:01,600 --> 00:27:06,000
we can simply see the code so yeah let

00:27:04,480 --> 00:27:07,039
me zoom in and then show you what i've

00:27:06,000 --> 00:27:09,279
done here

00:27:07,039 --> 00:27:11,200
so just like you create a mat you create

00:27:09,279 --> 00:27:12,720
a tracer you can also create a meter

00:27:11,200 --> 00:27:14,320
and then from the meter you create how

00:27:12,720 --> 00:27:15,520
many metrics you wanted so here i'm

00:27:14,320 --> 00:27:18,080
creating a counter

00:27:15,520 --> 00:27:21,120
that is an integer right and the name of

00:27:18,080 --> 00:27:23,039
this counter is custom.metric.brand.com

00:27:21,120 --> 00:27:24,320
right and then what i'm doing here in

00:27:23,039 --> 00:27:27,520
the code is

00:27:24,320 --> 00:27:28,159
after i actually consume the message i

00:27:27,520 --> 00:27:31,200
am

00:27:28,159 --> 00:27:32,399
adding a plus one into that counter

00:27:31,200 --> 00:27:33,679
right so pretty much that's what i'm

00:27:32,399 --> 00:27:36,320
doing here on this code

00:27:33,679 --> 00:27:37,520
it's in the code that is on the github

00:27:36,320 --> 00:27:40,559
so

00:27:37,520 --> 00:27:42,559
uh i'm going to execute this

00:27:40,559 --> 00:27:44,559
microservice one more time so and we're

00:27:42,559 --> 00:27:47,679
gonna i'm gonna execute the

00:27:44,559 --> 00:27:49,919
estimate call probably three times so we

00:27:47,679 --> 00:27:53,600
can see the counter going on

00:27:49,919 --> 00:27:55,760
um here is where my postman here we go

00:27:53,600 --> 00:27:56,799
so here on pulse man i'm going to call

00:27:55,760 --> 00:28:00,080
this api

00:27:56,799 --> 00:28:03,520
one two three times right

00:28:00,080 --> 00:28:05,360
so presumably if everything is working

00:28:03,520 --> 00:28:06,559
i have to have a new metric on my

00:28:05,360 --> 00:28:08,880
observability platform

00:28:06,559 --> 00:28:09,760
with a given name that the current count

00:28:08,880 --> 00:28:12,720
is three

00:28:09,760 --> 00:28:13,679
right so let's check if this is true

00:28:12,720 --> 00:28:17,440
right

00:28:13,679 --> 00:28:19,360
uh all right so let me jump into my

00:28:17,440 --> 00:28:23,360
discover on kibana

00:28:19,360 --> 00:28:25,520
and um let me just minimize

00:28:23,360 --> 00:28:27,840
a tiny bit of the ui so i can see

00:28:25,520 --> 00:28:30,880
everything so yeah i have a

00:28:27,840 --> 00:28:33,279
let me filter to see all the documents

00:28:30,880 --> 00:28:35,200
so i have three documents over here let

00:28:33,279 --> 00:28:36,000
me show an example of this document that

00:28:35,200 --> 00:28:38,399
is currently

00:28:36,000 --> 00:28:39,039
indexed on elasticsearch so as you can

00:28:38,399 --> 00:28:40,880
see here

00:28:39,039 --> 00:28:42,559
the current count is three and then i

00:28:40,880 --> 00:28:44,960
have a ferrari brand

00:28:42,559 --> 00:28:46,159
right and since we have everything here

00:28:44,960 --> 00:28:48,640
up and running

00:28:46,159 --> 00:28:50,640
right we can do things like this in

00:28:48,640 --> 00:28:52,640
kibana let me show real quick

00:28:50,640 --> 00:28:54,000
because we are probably running out of

00:28:52,640 --> 00:28:55,840
time ricardo

00:28:54,000 --> 00:28:57,919
so there's a still called lens that we

00:28:55,840 --> 00:28:58,880
can use it let me create real quick here

00:28:57,919 --> 00:29:01,200
on cabana

00:28:58,880 --> 00:29:02,320
so i'm not here i'm going to use a time

00:29:01,200 --> 00:29:05,440
stamp

00:29:02,320 --> 00:29:07,840
in uh one minute thank you thanks

00:29:05,440 --> 00:29:08,640
and then i'm going to create calculate

00:29:07,840 --> 00:29:12,080
the maximum

00:29:08,640 --> 00:29:17,360
of that and then i'm going to

00:29:12,080 --> 00:29:17,360
group by group by where's the group by

00:29:18,399 --> 00:29:21,919
group by by the name of the brand right

00:29:21,039 --> 00:29:23,919
so here we go

00:29:21,919 --> 00:29:25,279
i have a ferrari which is currently

00:29:23,919 --> 00:29:28,320
count is three

00:29:25,279 --> 00:29:30,159
so that's the proof that now we can have

00:29:28,320 --> 00:29:32,080
stateful counters using the open

00:29:30,159 --> 00:29:33,840
telemetry api so

00:29:32,080 --> 00:29:35,360
we have to wrap it up i'm sorry for

00:29:33,840 --> 00:29:36,880
rushing things up i don't like to do

00:29:35,360 --> 00:29:38,960
this to be honest but

00:29:36,880 --> 00:29:40,000
i have to be respectful both with the

00:29:38,960 --> 00:29:41,520
conferences my dear

00:29:40,000 --> 00:29:44,080
friend max that's helping me on the

00:29:41,520 --> 00:29:46,399
backstage and the other speakers that

00:29:44,080 --> 00:29:49,440
are probably waiting for this conference

00:29:46,399 --> 00:29:55,840
for the session to be done so thank you

00:29:49,440 --> 00:29:55,840
very much

00:30:09,520 --> 00:30:11,600

YouTube URL: https://www.youtube.com/watch?v=XpEQTqaawyk


