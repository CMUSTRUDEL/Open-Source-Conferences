Title: Patrick John Chia – "Are You Sure?": blending product comparisons and recommendations with A.I.
Publication date: 2021-06-29
Playlist: Berlin Buzzwords 2021 #bbuzz
Description: 
	How do shoppers pick a single product out of the vast number presented to them? One part of their decision making is to compare between the different products by weighing the pros and cons of their features for a given price: for shops with a huge inventory, this can no doubt be a challenging task.

Explicit comparison features (i.e. “click on product X and Y to see them side-by-side”) are a classical way of easing the shopping cognitive load, and recently eCommerce giants started incorporating this concept into a new type of recommendation. However, scaling this approach to huge inventories and a variety of verticals is a daunting task for traditional retailers: explicit comparisons are limited to manual 1:1 interfaces, and detailed comparison tables require a lot of manual work and often presuppose a well structured product catalogue.

In this talk, we present our pipeline to generate comparisons-as-recs at scale in a multi-tenant setting, with minimal assumptions about catalog size and web traffic. Our approach leverages both product meta-data (image, text) and behavioural data, and a combination of neural inference and decision-making principles. In particular, we show how to break down the problem into two main steps. First, for a given product we use dense representations to perform substitute identification, which determines a group of alternative products of the same category. Then, based on how their features and price vary, we select the final set of products and determine which features to display for comparison. Compared to existing, single-tenant literature, our experiments highlight the need for further improvements in dealing with noisy data and the adoption of data augmentation techniques: we conclude by sharing some practical tips for practitioners, and highlighting our testing and product roadmap.

Speaker:
Patrick John Chia – https://2021.berlinbuzzwords.de/member/patrick-john-chia

More: https://2021.berlinbuzzwords.de/session/are-you-sure-blending-product-comparisons-and-recommendations-ai
Captions: 
	00:00:07,279 --> 00:00:10,719
uh so

00:00:08,320 --> 00:00:12,719
uh good evening to everyone uh or good

00:00:10,719 --> 00:00:14,000
morning uh depending on where you are in

00:00:12,719 --> 00:00:17,279
the world

00:00:14,000 --> 00:00:19,680
uh my name is patrick and i'm an ml

00:00:17,279 --> 00:00:21,520
developer at coveo

00:00:19,680 --> 00:00:23,199
and i really appreciate uh this

00:00:21,520 --> 00:00:25,039
opportunity i have today to

00:00:23,199 --> 00:00:27,119
share some of the work we've done at

00:00:25,039 --> 00:00:30,160
coveo with everyone here

00:00:27,119 --> 00:00:32,719
and today i'll be talking about

00:00:30,160 --> 00:00:33,840
blending product comparisons uh with

00:00:32,719 --> 00:00:36,399
recommendations

00:00:33,840 --> 00:00:38,480
uh and we'll get more into it uh along

00:00:36,399 --> 00:00:40,559
the way

00:00:38,480 --> 00:00:42,960
and here's just uh some quick

00:00:40,559 --> 00:00:46,079
information about uh coveo

00:00:42,960 --> 00:00:49,280
we are as software as a service company

00:00:46,079 --> 00:00:52,719
providing ai power services in various

00:00:49,280 --> 00:00:56,320
domains such as commerce and service

00:00:52,719 --> 00:00:59,280
and we are the leading ai platform in

00:00:56,320 --> 00:00:59,920
canada and we have a global presence uh

00:00:59,280 --> 00:01:02,160
in

00:00:59,920 --> 00:01:03,600
throughout the world in north america

00:01:02,160 --> 00:01:06,400
europe and uh

00:01:03,600 --> 00:01:06,400
australia as well

00:01:07,439 --> 00:01:10,960
and before i begin i also like to give

00:01:09,760 --> 00:01:14,560
thanks to

00:01:10,960 --> 00:01:17,040
my collaborators jacobo and christine

00:01:14,560 --> 00:01:18,400
who've like pretty much worked through

00:01:17,040 --> 00:01:21,040
with me

00:01:18,400 --> 00:01:21,040
in this project

00:01:21,520 --> 00:01:24,640
and so today i'll be talking about

00:01:23,680 --> 00:01:28,000
comparisons

00:01:24,640 --> 00:01:30,159
as a type of recommendation but

00:01:28,000 --> 00:01:33,520
first i think it's important to ask you

00:01:30,159 --> 00:01:37,280
know why is this even important

00:01:33,520 --> 00:01:39,840
and i'm sure we all know that e-commerce

00:01:37,280 --> 00:01:41,119
has been a driving force uh over the

00:01:39,840 --> 00:01:44,799
last couple of years

00:01:41,119 --> 00:01:45,439
and in fact uh there's like little to no

00:01:44,799 --> 00:01:49,040
sign that

00:01:45,439 --> 00:01:49,600
uh it is slowing down yet and as a

00:01:49,040 --> 00:01:52,159
result

00:01:49,600 --> 00:01:53,759
uh you know there's like a trend where

00:01:52,159 --> 00:01:55,040
even like traditional brick-and-mortar

00:01:53,759 --> 00:01:57,600
shops are

00:01:55,040 --> 00:01:59,439
adopting or transitioning to e-commerce

00:01:57,600 --> 00:02:01,600
to get online presents

00:01:59,439 --> 00:02:04,159
uh the number of retailers available

00:02:01,600 --> 00:02:06,479
online is increasing

00:02:04,159 --> 00:02:08,000
and also like just because it's uh you

00:02:06,479 --> 00:02:10,800
know a digital shop

00:02:08,000 --> 00:02:11,440
it's easy to expose uh the full catalog

00:02:10,800 --> 00:02:14,080
uh

00:02:11,440 --> 00:02:15,200
of products to consumers and so now

00:02:14,080 --> 00:02:18,239
consumers uh

00:02:15,200 --> 00:02:22,239
are faced with a high number of products

00:02:18,239 --> 00:02:23,120
available to them and uh if you're

00:02:22,239 --> 00:02:26,160
familiar with

00:02:23,120 --> 00:02:29,599
the paradox of choice uh

00:02:26,160 --> 00:02:31,360
pretty much it points at um how

00:02:29,599 --> 00:02:33,920
actually being presented with more

00:02:31,360 --> 00:02:38,160
options makes decision making

00:02:33,920 --> 00:02:40,720
more difficult and for online shops uh

00:02:38,160 --> 00:02:41,920
you know this is a pretty big problem

00:02:40,720 --> 00:02:44,560
because uh

00:02:41,920 --> 00:02:48,000
decision making uh of the consumers

00:02:44,560 --> 00:02:51,840
essentially drives uh their revenues

00:02:48,000 --> 00:02:53,760
and um i think even more so this is a

00:02:51,840 --> 00:02:56,959
problem uh in an online setting

00:02:53,760 --> 00:02:58,720
uh because because uh unlike traditional

00:02:56,959 --> 00:03:02,319
shops uh

00:02:58,720 --> 00:03:05,040
like the presence of say uh shop

00:03:02,319 --> 00:03:06,239
assistant it's not available to guide

00:03:05,040 --> 00:03:09,920
shoppers

00:03:06,239 --> 00:03:11,040
uh through the sort of advanced space of

00:03:09,920 --> 00:03:13,840
available products

00:03:11,040 --> 00:03:13,840
available to them

00:03:14,159 --> 00:03:21,440
and so one way in which

00:03:17,840 --> 00:03:23,920
e-commerce as a industry kind of tackles

00:03:21,440 --> 00:03:26,959
uh this information overload

00:03:23,920 --> 00:03:28,319
is through recommender systems and you

00:03:26,959 --> 00:03:30,319
know

00:03:28,319 --> 00:03:32,000
to say the least uh recommended systems

00:03:30,319 --> 00:03:35,120
are ubiquitous

00:03:32,000 --> 00:03:38,560
and you know such as

00:03:35,120 --> 00:03:40,640
uh being you know suggested like oh

00:03:38,560 --> 00:03:42,239
this is a similar product uh as the the

00:03:40,640 --> 00:03:44,879
current product that you're viewing

00:03:42,239 --> 00:03:46,000
um but we think that retailers can go a

00:03:44,879 --> 00:03:48,400
step further

00:03:46,000 --> 00:03:50,799
and provide even more comprehensive and

00:03:48,400 --> 00:03:53,040
meaningful recommendations

00:03:50,799 --> 00:03:54,480
such as in the form of a comparison

00:03:53,040 --> 00:03:57,760
table

00:03:54,480 --> 00:04:00,720
and this allows for explicit comparison

00:03:57,760 --> 00:04:02,239
over various dimensions such as price

00:04:00,720 --> 00:04:04,080
and the various properties of the

00:04:02,239 --> 00:04:07,360
products

00:04:04,080 --> 00:04:11,200
and i'm sure you can kind of guess where

00:04:07,360 --> 00:04:13,840
the image on the right come from

00:04:11,200 --> 00:04:15,200
but i think it goes to show that even

00:04:13,840 --> 00:04:17,600
the big players

00:04:15,200 --> 00:04:18,799
are uh leveraging on on these like

00:04:17,600 --> 00:04:22,639
comparison engines

00:04:18,799 --> 00:04:25,520
uh in in their shops and the fact that

00:04:22,639 --> 00:04:26,639
uh even for them uh they're not able to

00:04:25,520 --> 00:04:30,080
always get it right

00:04:26,639 --> 00:04:30,560
it goes to show that um this this

00:04:30,080 --> 00:04:33,280
problem

00:04:30,560 --> 00:04:34,400
is is non-trivial uh even if you have

00:04:33,280 --> 00:04:36,479
like

00:04:34,400 --> 00:04:38,720
almost like full ownership of your data

00:04:36,479 --> 00:04:38,720
chain

00:04:39,120 --> 00:04:46,160
so the question we set out to answer is

00:04:42,320 --> 00:04:51,199
can we kaveo offer this same experience

00:04:46,160 --> 00:04:51,199
of a comparison engine to mid-size shops

00:04:51,680 --> 00:04:58,800
and as a multi-tenant sas company

00:04:54,800 --> 00:05:01,919
we're faced with unique challenges

00:04:58,800 --> 00:05:05,199
for one we have minimal control

00:05:01,919 --> 00:05:08,400
over the catalogs which we receive

00:05:05,199 --> 00:05:08,960
from our clients and between clients

00:05:08,400 --> 00:05:12,479
there

00:05:08,960 --> 00:05:14,800
is a wide gamut of quality

00:05:12,479 --> 00:05:15,840
in addition we operate in multiple

00:05:14,800 --> 00:05:19,280
verticals

00:05:15,840 --> 00:05:21,680
of commerce such as fashion pet products

00:05:19,280 --> 00:05:24,479
and home improvement

00:05:21,680 --> 00:05:24,800
and the combination of these two factors

00:05:24,479 --> 00:05:26,800
uh

00:05:24,800 --> 00:05:28,479
kind of puts us in a space where you

00:05:26,800 --> 00:05:30,639
know we we don't have a lot of uh

00:05:28,479 --> 00:05:31,759
data to work with uh that is uh

00:05:30,639 --> 00:05:35,759
so-called label

00:05:31,759 --> 00:05:39,039
or you know supervised and so

00:05:35,759 --> 00:05:41,440
for us a good solution would be

00:05:39,039 --> 00:05:42,560
one that makes as little assumption as

00:05:41,440 --> 00:05:46,160
possible about

00:05:42,560 --> 00:05:48,560
the data and also and and therefore

00:05:46,160 --> 00:05:53,520
allows us to scale our solution uh

00:05:48,560 --> 00:05:55,840
frictionlessly across all our clients

00:05:53,520 --> 00:05:57,840
so today i'll be walking you through our

00:05:55,840 --> 00:06:01,759
pipeline

00:05:57,840 --> 00:06:04,240
for generating these conversion tables

00:06:01,759 --> 00:06:05,120
as well as sharing some of the design

00:06:04,240 --> 00:06:06,960
decisions

00:06:05,120 --> 00:06:08,800
that we made and some of the insights

00:06:06,960 --> 00:06:10,240
that we have through the experiments

00:06:08,800 --> 00:06:12,319
that we run

00:06:10,240 --> 00:06:13,520
and first i'll be giving an overview of

00:06:12,319 --> 00:06:16,560
the pipeline

00:06:13,520 --> 00:06:17,919
before going into more detail about each

00:06:16,560 --> 00:06:19,280
stage

00:06:17,919 --> 00:06:21,039
and in the end i'll present you know

00:06:19,280 --> 00:06:25,039
some of the experimental results

00:06:21,039 --> 00:06:28,960
uh that we that we collected

00:06:25,039 --> 00:06:31,520
and just like an overview

00:06:28,960 --> 00:06:32,000
i guess like in in the generation of

00:06:31,520 --> 00:06:35,360
these

00:06:32,000 --> 00:06:37,600
comparison tables um essentially what we

00:06:35,360 --> 00:06:39,840
aim to do is to present customers uh

00:06:37,600 --> 00:06:41,280
with uh what what is called like

00:06:39,840 --> 00:06:45,039
substitutable products

00:06:41,280 --> 00:06:46,880
uh in a you know economic terms and uh

00:06:45,039 --> 00:06:48,560
you know just a heads up because i'll be

00:06:46,880 --> 00:06:51,520
using like the term substitute

00:06:48,560 --> 00:06:53,919
product uh a lot in in in the coming

00:06:51,520 --> 00:06:53,919
slides

00:06:54,319 --> 00:06:58,000
yeah and so now we take a look at the

00:06:57,280 --> 00:07:01,039
pipeline

00:06:58,000 --> 00:07:02,240
and i'll walk you through it so you know

00:07:01,039 --> 00:07:05,039
at the beginning just

00:07:02,240 --> 00:07:07,039
you know imagine uh a shopper is

00:07:05,039 --> 00:07:09,840
currently viewing a fridge

00:07:07,039 --> 00:07:10,960
for example and what we do in our

00:07:09,840 --> 00:07:13,759
pipeline is

00:07:10,960 --> 00:07:14,240
first we perform a course search uh

00:07:13,759 --> 00:07:17,280
using

00:07:14,240 --> 00:07:17,840
key nearest neighbors in order to

00:07:17,280 --> 00:07:21,759
retrieve

00:07:17,840 --> 00:07:23,680
a candidate set of substitute products

00:07:21,759 --> 00:07:25,039
and you know notice that like in this

00:07:23,680 --> 00:07:28,319
set uh

00:07:25,039 --> 00:07:29,360
there may also be um non-substitute

00:07:28,319 --> 00:07:32,319
products such as like

00:07:29,360 --> 00:07:32,319
this shelf over here

00:07:33,280 --> 00:07:37,520
and therefore uh you know we want to use

00:07:35,680 --> 00:07:38,639
a neural network that we train to

00:07:37,520 --> 00:07:42,000
predict whether

00:07:38,639 --> 00:07:45,360
pairs of products are substitutes or not

00:07:42,000 --> 00:07:48,479
in order to refine the set

00:07:45,360 --> 00:07:51,440
and once we refine the set uh

00:07:48,479 --> 00:07:53,520
then we we we head over to uh more of

00:07:51,440 --> 00:07:56,160
the product aspect

00:07:53,520 --> 00:07:56,879
of the pipeline where um you apply some

00:07:56,160 --> 00:08:00,080
heuristics

00:07:56,879 --> 00:08:01,599
in order to you know determine which

00:08:00,080 --> 00:08:03,360
properties

00:08:01,599 --> 00:08:05,039
that we want to display on our

00:08:03,360 --> 00:08:08,240
comparison table to

00:08:05,039 --> 00:08:11,599
choppers and once we

00:08:08,240 --> 00:08:12,080
we pick those properties then we want to

00:08:11,599 --> 00:08:14,960
sample

00:08:12,080 --> 00:08:16,240
from the set of available uh substitutes

00:08:14,960 --> 00:08:17,520
uh

00:08:16,240 --> 00:08:19,840
you know to construct a good

00:08:17,520 --> 00:08:20,479
representation of the space of available

00:08:19,840 --> 00:08:23,759
products

00:08:20,479 --> 00:08:23,759
uh to the shopper

00:08:24,080 --> 00:08:28,000
so you know diving into the various

00:08:27,360 --> 00:08:30,879
stages

00:08:28,000 --> 00:08:31,840
um the first step we have the fast

00:08:30,879 --> 00:08:35,519
retrieval step

00:08:31,840 --> 00:08:37,519
uh where we have this uh product space

00:08:35,519 --> 00:08:40,719
uh which is which we build in an

00:08:37,519 --> 00:08:43,200
unsupervised manner and

00:08:40,719 --> 00:08:44,080
you know we there's more detail i think

00:08:43,200 --> 00:08:47,200
if i can share

00:08:44,080 --> 00:08:47,760
like the slides uh after the talk that

00:08:47,200 --> 00:08:51,279
you can

00:08:47,760 --> 00:08:54,640
read up on but essentially um we use the

00:08:51,279 --> 00:08:55,279
historical shopper sessions uh in order

00:08:54,640 --> 00:08:58,800
to give

00:08:55,279 --> 00:09:02,320
a dense representation for each

00:08:58,800 --> 00:09:04,160
product sku and

00:09:02,320 --> 00:09:06,640
we use k-nearest neighbors in this

00:09:04,160 --> 00:09:10,640
product space to retrieve candidates

00:09:06,640 --> 00:09:11,120
and by the kind of how how it how it is

00:09:10,640 --> 00:09:14,160
trained

00:09:11,120 --> 00:09:17,920
um products in this space are

00:09:14,160 --> 00:09:22,000
already very likely to be substitutes

00:09:17,920 --> 00:09:24,160
but uh at the same time uh we

00:09:22,000 --> 00:09:25,279
we are aware that you know there there's

00:09:24,160 --> 00:09:27,680
there is there are going to be

00:09:25,279 --> 00:09:28,720
like non-substitutes in this step uh but

00:09:27,680 --> 00:09:31,600
um for us the

00:09:28,720 --> 00:09:32,480
the focus is on recall and you know the

00:09:31,600 --> 00:09:35,360
fact that

00:09:32,480 --> 00:09:36,240
uh this step is very cheap for us to

00:09:35,360 --> 00:09:40,000
compute

00:09:36,240 --> 00:09:41,760
uh and therefore we we head over to the

00:09:40,000 --> 00:09:44,560
next step

00:09:41,760 --> 00:09:45,360
whereby we want to do like a more fine

00:09:44,560 --> 00:09:48,480
grain filtering

00:09:45,360 --> 00:09:50,959
where we take uh this candidate set

00:09:48,480 --> 00:09:51,600
and use a neural network to predict

00:09:50,959 --> 00:09:54,240
whether

00:09:51,600 --> 00:09:57,279
uh you know the the products are

00:09:54,240 --> 00:09:57,279
substitutes or not

00:09:57,360 --> 00:10:02,000
but um you know i think in machine

00:10:00,640 --> 00:10:04,160
learning today

00:10:02,000 --> 00:10:06,480
it's fair to say that you're only as

00:10:04,160 --> 00:10:09,360
good as your data

00:10:06,480 --> 00:10:11,200
and as alluded to earlier we are sort of

00:10:09,360 --> 00:10:14,320
in a regime where

00:10:11,200 --> 00:10:17,440
we do not have much label data

00:10:14,320 --> 00:10:20,320
available at our disposal

00:10:17,440 --> 00:10:21,440
and so you know i'll be you know going

00:10:20,320 --> 00:10:24,640
into a bit more detail

00:10:21,440 --> 00:10:29,120
as to how we built uh an unsupervised

00:10:24,640 --> 00:10:29,120
data set for training this classifier

00:10:29,920 --> 00:10:33,920
so it's it's common in in our domain uh

00:10:32,800 --> 00:10:36,959
to utilize

00:10:33,920 --> 00:10:40,079
uh co-occurrence data as a proxy uh

00:10:36,959 --> 00:10:43,279
to to label our data

00:10:40,079 --> 00:10:44,079
in our case uh we want positive label uh

00:10:43,279 --> 00:10:46,240
for items

00:10:44,079 --> 00:10:47,839
which are substitutes and a negative

00:10:46,240 --> 00:10:49,839
label for items which are not

00:10:47,839 --> 00:10:52,399
substituted

00:10:49,839 --> 00:10:53,120
and here we see a typical shopping

00:10:52,399 --> 00:10:56,160
session

00:10:53,120 --> 00:10:59,120
uh where this guy is you know looking at

00:10:56,160 --> 00:11:00,160
running shoes and then starts looking at

00:10:59,120 --> 00:11:03,519
some

00:11:00,160 --> 00:11:06,480
some pants and and after that

00:11:03,519 --> 00:11:07,120
like sweaters and along the way he also

00:11:06,480 --> 00:11:10,480
adds

00:11:07,120 --> 00:11:10,480
items to his cart

00:11:11,440 --> 00:11:15,760
and we extract our products which are

00:11:13,680 --> 00:11:17,920
viewed consecutively and call them

00:11:15,760 --> 00:11:18,800
you know cold view products and use this

00:11:17,920 --> 00:11:23,519
as a proxy

00:11:18,800 --> 00:11:23,519
for products which should be substitutes

00:11:23,680 --> 00:11:30,320
on the other hand we take sessions with

00:11:27,120 --> 00:11:32,480
with a purchase and we look at the

00:11:30,320 --> 00:11:33,920
consecutive items that were added to the

00:11:32,480 --> 00:11:36,640
carbs

00:11:33,920 --> 00:11:39,120
and we use these as a proxy for products

00:11:36,640 --> 00:11:41,279
which are not substitutes

00:11:39,120 --> 00:11:42,240
so taking the this co view and

00:11:41,279 --> 00:11:45,440
co-purchase

00:11:42,240 --> 00:11:48,959
uh coconuts data

00:11:45,440 --> 00:11:50,560
we're able to form uh you know

00:11:48,959 --> 00:11:52,079
two sets of data one positive one

00:11:50,560 --> 00:11:55,600
negative uh where

00:11:52,079 --> 00:11:57,360
positive is you know examples

00:11:55,600 --> 00:11:59,120
of pairs of products which are

00:11:57,360 --> 00:12:02,720
substitutes and negatives

00:11:59,120 --> 00:12:05,600
are not substitutes but

00:12:02,720 --> 00:12:05,920
i think it's uh quick to like easy to

00:12:05,600 --> 00:12:09,519
see

00:12:05,920 --> 00:12:12,639
that noise can very easily be introduced

00:12:09,519 --> 00:12:14,320
into the data set where for example

00:12:12,639 --> 00:12:16,560
if two products that are viewed

00:12:14,320 --> 00:12:18,800
consecutively are not substitutes

00:12:16,560 --> 00:12:19,760
and you know based on the you know

00:12:18,800 --> 00:12:22,639
previous

00:12:19,760 --> 00:12:23,519
example of the session uh if if a

00:12:22,639 --> 00:12:25,680
shopper

00:12:23,519 --> 00:12:26,639
goes from looking at shoes to looking at

00:12:25,680 --> 00:12:28,399
shirts uh

00:12:26,639 --> 00:12:31,279
you know this sort of noise can be

00:12:28,399 --> 00:12:34,480
injected into into the data

00:12:31,279 --> 00:12:37,040
and so most prior work uh

00:12:34,480 --> 00:12:37,680
what they do is you know use count based

00:12:37,040 --> 00:12:41,760
methods

00:12:37,680 --> 00:12:45,440
to denoise the data set for example

00:12:41,760 --> 00:12:47,680
to set a threshold to say that okay

00:12:45,440 --> 00:12:48,639
i would only you know keep a pair of

00:12:47,680 --> 00:12:51,760
products

00:12:48,639 --> 00:12:53,440
within my data set if they occur uh

00:12:51,760 --> 00:12:56,240
or if they've been co-viewed or

00:12:53,440 --> 00:12:58,880
co-purchased uh like 10 times

00:12:56,240 --> 00:12:59,920
and to also you know remove pairs of

00:12:58,880 --> 00:13:02,399
products which

00:12:59,920 --> 00:13:03,360
occur in both the positive set and the

00:13:02,399 --> 00:13:06,399
negative set

00:13:03,360 --> 00:13:08,959
which uh pretty much will be useless for

00:13:06,399 --> 00:13:12,240
for training

00:13:08,959 --> 00:13:14,639
um but you know following the idea that

00:13:12,240 --> 00:13:16,480
uh you're only as good as your data we

00:13:14,639 --> 00:13:19,839
we wanted to investigate further

00:13:16,480 --> 00:13:22,639
if we could do a better job in this data

00:13:19,839 --> 00:13:22,639
preparation step

00:13:23,040 --> 00:13:29,519
and so we added an additional step uh

00:13:26,320 --> 00:13:32,800
to our data denoising

00:13:29,519 --> 00:13:35,120
and the intuition uh was that substitute

00:13:32,800 --> 00:13:37,040
products should a priory be visually

00:13:35,120 --> 00:13:39,279
similar

00:13:37,040 --> 00:13:40,480
and you know just in this example uh you

00:13:39,279 --> 00:13:43,360
know a shoe should look

00:13:40,480 --> 00:13:45,519
more like a shoe than it does uh to pair

00:13:43,360 --> 00:13:48,079
of pants

00:13:45,519 --> 00:13:50,000
and so in order to capture uh this like

00:13:48,079 --> 00:13:52,480
visual similarity

00:13:50,000 --> 00:13:54,240
what we did was to use the cosine

00:13:52,480 --> 00:13:57,600
similarity between

00:13:54,240 --> 00:14:00,160
pre-trained image vectors uh that

00:13:57,600 --> 00:14:01,120
you know were generated by yeah a

00:14:00,160 --> 00:14:04,399
pre-trained uh

00:14:01,120 --> 00:14:06,560
convolutional network and

00:14:04,399 --> 00:14:10,480
we we take this cosine similarity score

00:14:06,560 --> 00:14:13,600
as a proxy for visual similarity

00:14:10,480 --> 00:14:15,120
in this case you know um just like

00:14:13,600 --> 00:14:17,760
hypothetically speaking

00:14:15,120 --> 00:14:20,079
the the shoe and the pair of hands has

00:14:17,760 --> 00:14:23,279
like consistent right here of 0.3

00:14:20,079 --> 00:14:25,519
and what we do is we set a threshold

00:14:23,279 --> 00:14:27,680
to remove products which are not

00:14:25,519 --> 00:14:29,839
visually similar enough

00:14:27,680 --> 00:14:31,839
from the positive set and remove

00:14:29,839 --> 00:14:35,600
products from the negative set which are

00:14:31,839 --> 00:14:35,600
you know too visually similar

00:14:37,120 --> 00:14:42,880
and on top of data clinging

00:14:40,320 --> 00:14:45,040
we were interested in also exploring

00:14:42,880 --> 00:14:48,480
data augmentation

00:14:45,040 --> 00:14:51,760
and here the main idea is to exploit the

00:14:48,480 --> 00:14:54,399
transitive property of substitutability

00:14:51,760 --> 00:14:56,800
in order to generate more synthetic

00:14:54,399 --> 00:14:59,839
pairs of products

00:14:56,800 --> 00:15:04,160
so to do this first we form a graph

00:14:59,839 --> 00:15:07,120
um from from the positive uh

00:15:04,160 --> 00:15:08,959
set of of pair of a pair of products and

00:15:07,120 --> 00:15:10,320
what we do is we we add an edge between

00:15:08,959 --> 00:15:15,279
products if they appear

00:15:10,320 --> 00:15:18,240
in a positive set and then we can

00:15:15,279 --> 00:15:18,720
basically find disconnected sub graphs

00:15:18,240 --> 00:15:22,160
and

00:15:18,720 --> 00:15:24,959
kind of use these uh sub graphs

00:15:22,160 --> 00:15:28,240
as clusters of uh substitute

00:15:24,959 --> 00:15:28,240
substitutable products

00:15:28,639 --> 00:15:31,839
then what we do is we take an original

00:15:31,040 --> 00:15:33,519
pair from

00:15:31,839 --> 00:15:35,360
from the data set such as like a

00:15:33,519 --> 00:15:37,759
positive one or a negative one

00:15:35,360 --> 00:15:39,440
and replace one of the products by

00:15:37,759 --> 00:15:42,720
sampling from its uh

00:15:39,440 --> 00:15:45,120
corresponding subgraph

00:15:42,720 --> 00:15:46,560
and you know this allows us to create a

00:15:45,120 --> 00:15:50,160
synthetic pairs where

00:15:46,560 --> 00:15:52,880
uh in this example we replace you know

00:15:50,160 --> 00:15:54,000
the pink pair of hands with the black

00:15:52,880 --> 00:15:58,720
one and here we

00:15:54,000 --> 00:15:58,720
replace the asic shoe with a nike one

00:16:00,160 --> 00:16:06,480
and finally um we also need a way to

00:16:03,440 --> 00:16:08,480
represent our products uh as an input to

00:16:06,480 --> 00:16:12,160
our neural network

00:16:08,480 --> 00:16:15,440
so we went with dense representations

00:16:12,160 --> 00:16:18,160
of our products firstly

00:16:15,440 --> 00:16:18,959
what we call like protruvec is the

00:16:18,160 --> 00:16:22,000
product space

00:16:18,959 --> 00:16:25,120
which we already trained in

00:16:22,000 --> 00:16:29,279
the first step of the of the pipeline

00:16:25,120 --> 00:16:33,279
and we also take the textual metadata

00:16:29,279 --> 00:16:36,560
and kind of use word to back

00:16:33,279 --> 00:16:40,800
uh to get a dance representation

00:16:36,560 --> 00:16:40,800
for the name category description

00:16:42,880 --> 00:16:48,240
and so now like

00:16:45,920 --> 00:16:49,600
once we have all the data our model is

00:16:48,240 --> 00:16:52,800
fairly simple

00:16:49,600 --> 00:16:55,600
it's just a assignments network where

00:16:52,800 --> 00:16:57,279
for each product we have we take the

00:16:55,600 --> 00:16:59,600
desk representations

00:16:57,279 --> 00:17:02,240
and put it through a fusion network

00:16:59,600 --> 00:17:05,360
which will produce

00:17:02,240 --> 00:17:07,760
a single representation and

00:17:05,360 --> 00:17:08,959
for each product we take this uh fused

00:17:07,760 --> 00:17:11,280
representation and

00:17:08,959 --> 00:17:15,520
pass it through another network which

00:17:11,280 --> 00:17:17,520
produces the binary classification score

00:17:15,520 --> 00:17:19,039
and then you know like you know train

00:17:17,520 --> 00:17:20,959
training training it with uh

00:17:19,039 --> 00:17:24,400
the unsupervised data set with back

00:17:20,959 --> 00:17:24,400
propagation uh that kind of thing

00:17:25,600 --> 00:17:29,520
and so you know once we use our train

00:17:28,720 --> 00:17:32,400
neural network

00:17:29,520 --> 00:17:33,440
and generate uh our you know refined

00:17:32,400 --> 00:17:37,360
candidate set

00:17:33,440 --> 00:17:38,960
we come to sort of the the last stage of

00:17:37,360 --> 00:17:41,280
our pipeline

00:17:38,960 --> 00:17:42,480
and here we make uh the main assumption

00:17:41,280 --> 00:17:45,280
about our data

00:17:42,480 --> 00:17:47,840
which is that um you know there exists

00:17:45,280 --> 00:17:50,960
some structured information about

00:17:47,840 --> 00:17:54,000
the products and their properties and

00:17:50,960 --> 00:17:57,600
while you know such information is not

00:17:54,000 --> 00:17:59,520
uniform across uh different verticals we

00:17:57,600 --> 00:18:02,080
find it to be more common in

00:17:59,520 --> 00:18:05,039
diy and electronics where products tend

00:18:02,080 --> 00:18:05,039
to be more technical

00:18:06,000 --> 00:18:09,520
and for this step we want to select

00:18:07,600 --> 00:18:14,559
properties to display

00:18:09,520 --> 00:18:17,360
which would be important to shoppers

00:18:14,559 --> 00:18:18,400
and to do this we invert property

00:18:17,360 --> 00:18:20,080
importance uh

00:18:18,400 --> 00:18:21,919
using a weighted combination of three

00:18:20,080 --> 00:18:25,039
factors

00:18:21,919 --> 00:18:26,400
the first is a number of times in which

00:18:25,039 --> 00:18:29,200
a property and its

00:18:26,400 --> 00:18:29,919
values appear in search queries the

00:18:29,200 --> 00:18:32,480
second is

00:18:29,919 --> 00:18:34,160
the amount of time the number of times

00:18:32,480 --> 00:18:36,080
the property and this attribute

00:18:34,160 --> 00:18:38,000
appear in the product page and product

00:18:36,080 --> 00:18:40,640
description

00:18:38,000 --> 00:18:41,600
and the last is to look at the entropy

00:18:40,640 --> 00:18:44,240
of the

00:18:41,600 --> 00:18:44,960
property distribution uh which kind of

00:18:44,240 --> 00:18:48,400
kind of says

00:18:44,960 --> 00:18:48,400
uh like

00:18:48,559 --> 00:18:53,120
how many products uh or what's the

00:18:50,799 --> 00:18:57,280
variation in in the property values

00:18:53,120 --> 00:19:00,320
for for the set of products and so

00:18:57,280 --> 00:19:03,440
uh you know one and two kind of measures

00:19:00,320 --> 00:19:04,640
uh how important uh the product uh sorry

00:19:03,440 --> 00:19:07,200
the property is to

00:19:04,640 --> 00:19:07,840
shoppers and three looking at the

00:19:07,200 --> 00:19:10,160
entropy

00:19:07,840 --> 00:19:11,760
uh you know allows us to bias the

00:19:10,160 --> 00:19:14,080
results to

00:19:11,760 --> 00:19:15,280
two properties uh at least with some

00:19:14,080 --> 00:19:17,679
some variation

00:19:15,280 --> 00:19:17,679
in them

00:19:19,760 --> 00:19:25,679
and once we select the properties which

00:19:22,880 --> 00:19:28,320
are important

00:19:25,679 --> 00:19:29,039
we get to the final step where we want

00:19:28,320 --> 00:19:31,679
to select

00:19:29,039 --> 00:19:33,600
the products to actually display uh on

00:19:31,679 --> 00:19:36,720
the comparison table

00:19:33,600 --> 00:19:39,120
and here the goal is to form a

00:19:36,720 --> 00:19:39,840
good representation of uh what is

00:19:39,120 --> 00:19:43,919
available

00:19:39,840 --> 00:19:46,799
uh you know in in the shop and

00:19:43,919 --> 00:19:47,280
to do this we fix the price as one of

00:19:46,799 --> 00:19:48,880
the

00:19:47,280 --> 00:19:50,640
one of the dimensions that we want to

00:19:48,880 --> 00:19:53,440
vary

00:19:50,640 --> 00:19:54,000
and to get a representative range of uh

00:19:53,440 --> 00:19:56,480
price

00:19:54,000 --> 00:19:58,080
we we split the price into different

00:19:56,480 --> 00:20:01,520
bins based on their log

00:19:58,080 --> 00:20:02,400
on their log value um and we sample

00:20:01,520 --> 00:20:05,120
three products

00:20:02,400 --> 00:20:06,480
uh one from the same bin as the query

00:20:05,120 --> 00:20:08,799
product

00:20:06,480 --> 00:20:09,840
one from a lower bin and one from higher

00:20:08,799 --> 00:20:11,840
bin so that

00:20:09,840 --> 00:20:13,360
you know this gives us or gives the

00:20:11,840 --> 00:20:17,200
shopper uh

00:20:13,360 --> 00:20:20,799
a spectrum of of price ranges and

00:20:17,200 --> 00:20:24,000
how we sample from these bins uh

00:20:20,799 --> 00:20:27,440
is is is done in a in a greedy manner

00:20:24,000 --> 00:20:30,640
and we basically

00:20:27,440 --> 00:20:33,679
prefer variation in properties which

00:20:30,640 --> 00:20:37,520
are not completely uniform or

00:20:33,679 --> 00:20:37,520
quasi uniform so that

00:20:37,760 --> 00:20:43,120
we we believe that this allows us to uh

00:20:41,039 --> 00:20:45,600
capture more uh more interesting

00:20:43,120 --> 00:20:45,600
properties

00:20:45,840 --> 00:20:49,679
and yeah so like once we sample the

00:20:48,000 --> 00:20:51,760
products uh

00:20:49,679 --> 00:20:53,919
from these bins we are able to construct

00:20:51,760 --> 00:20:57,120
the final uh

00:20:53,919 --> 00:21:01,039
comparison table and this is

00:20:57,120 --> 00:21:03,039
pretty much the end of the pipeline

00:21:01,039 --> 00:21:04,240
and uh so like now you might be

00:21:03,039 --> 00:21:07,840
wondering uh

00:21:04,240 --> 00:21:07,840
does all of this work um

00:21:08,400 --> 00:21:14,960
so we we ran several experiments

00:21:11,600 --> 00:21:16,960
um one was to see how good the binary

00:21:14,960 --> 00:21:20,320
classifier was

00:21:16,960 --> 00:21:22,480
and how much effect the different

00:21:20,320 --> 00:21:23,440
like data cleaning and data augmentation

00:21:22,480 --> 00:21:26,720
steps we

00:21:23,440 --> 00:21:30,480
introduced were

00:21:26,720 --> 00:21:33,520
and we we tested on two different shops

00:21:30,480 --> 00:21:36,720
and here our focus is mainly uh

00:21:33,520 --> 00:21:39,840
on precision uh because ultimately we

00:21:36,720 --> 00:21:42,720
we you know uh we don't want to like

00:21:39,840 --> 00:21:44,640
show shoppers uh a product which is not

00:21:42,720 --> 00:21:47,520
a substitute or generate a

00:21:44,640 --> 00:21:48,640
comparison table which has like

00:21:47,520 --> 00:21:52,480
non-substitutes

00:21:48,640 --> 00:21:56,240
in them and as a baseline

00:21:52,480 --> 00:21:59,840
we take the cosine similarity of images

00:21:56,240 --> 00:21:59,840
as the binary classification score

00:22:00,080 --> 00:22:06,480
and what we found is that

00:22:03,840 --> 00:22:08,320
you know cleaning with the data sorry

00:22:06,480 --> 00:22:11,840
cleaning the data with the image vectors

00:22:08,320 --> 00:22:15,760
uh was you know the the most uh

00:22:11,840 --> 00:22:19,360
contributor to the performance

00:22:15,760 --> 00:22:22,559
and we can see this over here

00:22:19,360 --> 00:22:25,440
in in the pr curve for shop a

00:22:22,559 --> 00:22:26,080
where you know over this region of

00:22:25,440 --> 00:22:28,559
recall

00:22:26,080 --> 00:22:29,600
uh we see about like a seven to ten

00:22:28,559 --> 00:22:32,640
point

00:22:29,600 --> 00:22:35,679
uh increase in precision um

00:22:32,640 --> 00:22:36,880
where you know these lines are so the

00:22:35,679 --> 00:22:39,200
purple line is

00:22:36,880 --> 00:22:40,240
uh the baseline and these other two

00:22:39,200 --> 00:22:43,280
lines are

00:22:40,240 --> 00:22:46,720
when we did not uh perform

00:22:43,280 --> 00:22:49,520
uh cleaning of the data and whereas like

00:22:46,720 --> 00:22:50,159
these two lines on top uh were when when

00:22:49,520 --> 00:22:54,480
we did

00:22:50,159 --> 00:22:57,280
uh like the extra cleaning step um

00:22:54,480 --> 00:22:57,760
but we also noticed that the performance

00:22:57,280 --> 00:23:00,080
boost

00:22:57,760 --> 00:23:01,360
kind of varies between shops uh you can

00:23:00,080 --> 00:23:05,280
see here in shop a

00:23:01,360 --> 00:23:07,840
shop b um that

00:23:05,280 --> 00:23:08,640
there is still like an increase in in

00:23:07,840 --> 00:23:12,080
performance

00:23:08,640 --> 00:23:15,360
although uh that's pronounced

00:23:12,080 --> 00:23:19,520
and uh you know looking at the baseline

00:23:15,360 --> 00:23:21,440
performance for shot b uh which

00:23:19,520 --> 00:23:24,240
like uh just to remind you is equal

00:23:21,440 --> 00:23:25,200
signs similarity of the preaching image

00:23:24,240 --> 00:23:27,200
vectors

00:23:25,200 --> 00:23:28,640
it sort of like gives us a hint as to

00:23:27,200 --> 00:23:31,200
why uh maybe

00:23:28,640 --> 00:23:33,440
we do not see such a significant boost

00:23:31,200 --> 00:23:36,240
in performance

00:23:33,440 --> 00:23:37,520
and we can kind of like hypothesize uh

00:23:36,240 --> 00:23:40,159
two possible reasons

00:23:37,520 --> 00:23:41,600
uh first could be that uh you know the

00:23:40,159 --> 00:23:44,720
assumption that we make about

00:23:41,600 --> 00:23:46,799
like a priory visual similarity

00:23:44,720 --> 00:23:48,960
does not really hold well for shot b

00:23:46,799 --> 00:23:50,640
which is in the home improvement

00:23:48,960 --> 00:23:53,760
vertical

00:23:50,640 --> 00:23:54,320
or it'll is it could also be that these

00:23:53,760 --> 00:23:57,520
pre-chain

00:23:54,320 --> 00:23:58,640
image vectors are not as effective or

00:23:57,520 --> 00:24:02,799
fine-tuned

00:23:58,640 --> 00:24:06,080
to to this specific particular vertical

00:24:02,799 --> 00:24:09,679
and therefore uh our like kind of

00:24:06,080 --> 00:24:13,120
cleaning things that

00:24:09,679 --> 00:24:13,120
is not as effective

00:24:13,200 --> 00:24:20,000
um another thing which we uh

00:24:16,480 --> 00:24:23,520
wanted to like study or explore

00:24:20,000 --> 00:24:25,840
uh was whether or not our

00:24:23,520 --> 00:24:27,120
our ranking of uh property importance

00:24:25,840 --> 00:24:30,559
aligned aligned well

00:24:27,120 --> 00:24:33,600
with humans so we ran a small

00:24:30,559 --> 00:24:36,880
user study on mechanical turk

00:24:33,600 --> 00:24:40,080
and the results generally show that

00:24:36,880 --> 00:24:43,600
our algorithm has better agreement for

00:24:40,080 --> 00:24:46,880
products which are more popular

00:24:43,600 --> 00:24:49,600
and common and less so for extremely

00:24:46,880 --> 00:24:52,880
technical products like skis

00:24:49,600 --> 00:24:54,640
um but it's interesting to note uh you

00:24:52,880 --> 00:24:55,679
know here that like running shoes had

00:24:54,640 --> 00:25:00,080
the highest

00:24:55,679 --> 00:25:03,279
uh similarity in ranking

00:25:00,080 --> 00:25:05,760
and you know we believe that

00:25:03,279 --> 00:25:06,400
perhaps this is because like running

00:25:05,760 --> 00:25:10,080
shoes is

00:25:06,400 --> 00:25:12,960
at an intersection where it is you know

00:25:10,080 --> 00:25:14,000
commonly known and therefore crowd

00:25:12,960 --> 00:25:16,640
workers are able

00:25:14,000 --> 00:25:17,440
to give good responses and at the same

00:25:16,640 --> 00:25:20,720
time

00:25:17,440 --> 00:25:21,440
has like properties which are technical

00:25:20,720 --> 00:25:24,720
enough uh

00:25:21,440 --> 00:25:27,840
such that there actually exists a strong

00:25:24,720 --> 00:25:28,720
strong ordering in these like property

00:25:27,840 --> 00:25:32,080
uh

00:25:28,720 --> 00:25:34,880
importance but uh definitely

00:25:32,080 --> 00:25:36,240
we we acknowledge that like this is

00:25:34,880 --> 00:25:38,799
still kind of preliminary

00:25:36,240 --> 00:25:40,240
uh as a study and we're looking forward

00:25:38,799 --> 00:25:43,279
to being able to test

00:25:40,240 --> 00:25:46,480
uh this pipeline in an online setting

00:25:43,279 --> 00:25:51,440
and uh you know measure uh

00:25:46,480 --> 00:25:54,480
you know statistical uh differences

00:25:51,440 --> 00:25:56,720
and just to give uh

00:25:54,480 --> 00:25:58,720
an example uh are real examples

00:25:56,720 --> 00:26:02,080
generated by our pipeline

00:25:58,720 --> 00:26:05,120
uh we built like a mock ui api

00:26:02,080 --> 00:26:08,159
and here we can see uh

00:26:05,120 --> 00:26:08,840
like reasonable like proposals by our

00:26:08,159 --> 00:26:13,679
pipeline

00:26:08,840 --> 00:26:17,360
which is completely unsupervised

00:26:13,679 --> 00:26:20,799
and yeah i think like looking at

00:26:17,360 --> 00:26:23,200
uh these like ski boots uh

00:26:20,799 --> 00:26:24,799
i think you can appreciate how like for

00:26:23,200 --> 00:26:28,880
more technical products

00:26:24,799 --> 00:26:28,880
these comparison tables can really help

00:26:30,320 --> 00:26:36,559
and that kind of brings me to to like

00:26:33,440 --> 00:26:38,720
the end of the pipeline overview

00:26:36,559 --> 00:26:39,760
and um you know just like looking

00:26:38,720 --> 00:26:43,200
forward uh

00:26:39,760 --> 00:26:44,240
into you know next steps uh like i said

00:26:43,200 --> 00:26:46,960
we're

00:26:44,240 --> 00:26:47,919
excited to perform uh online

00:26:46,960 --> 00:26:51,200
experimentation

00:26:47,919 --> 00:26:54,559
uh this pipeline we're also looking

00:26:51,200 --> 00:26:57,520
uh as a as a team more in like

00:26:54,559 --> 00:26:58,400
human in the loop machine learning uh

00:26:57,520 --> 00:27:02,080
and

00:26:58,400 --> 00:27:02,559
i guess with regards to like the binary

00:27:02,080 --> 00:27:05,120
model

00:27:02,559 --> 00:27:06,559
itself i think kind of the results show

00:27:05,120 --> 00:27:10,000
that uh there is

00:27:06,559 --> 00:27:12,400
some room for some self-supervised

00:27:10,000 --> 00:27:14,720
fine-tuning uh two different verticals

00:27:12,400 --> 00:27:14,720
as well

00:27:15,919 --> 00:27:20,159
yep and you know uh if you're interested

00:27:18,880 --> 00:27:23,120
to find out more

00:27:20,159 --> 00:27:24,080
about cavao and what we're doing at the

00:27:23,120 --> 00:27:27,679
ai labs

00:27:24,080 --> 00:27:30,880
we have a blog available and we're also

00:27:27,679 --> 00:27:33,919
um like my colleagues have

00:27:30,880 --> 00:27:34,960
published extensively in various

00:27:33,919 --> 00:27:37,840
conferences

00:27:34,960 --> 00:27:38,399
academic conferences uh actually most

00:27:37,840 --> 00:27:41,440
recently

00:27:38,399 --> 00:27:42,399
uh they they won the best paper uh in

00:27:41,440 --> 00:27:46,159
the industry track

00:27:42,399 --> 00:27:48,559
in the inaugural 2021 conference

00:27:46,159 --> 00:27:50,080
so i've added links for that we're also

00:27:48,559 --> 00:27:52,880
hosting the

00:27:50,080 --> 00:27:54,080
cigar data challenge this year uh so if

00:27:52,880 --> 00:27:58,000
you're interested uh

00:27:54,080 --> 00:28:02,799
in a e-commerce data set um

00:27:58,000 --> 00:28:05,600
yeah do check it out

00:28:02,799 --> 00:28:06,240
so yeah uh you know thank you everyone

00:28:05,600 --> 00:28:08,559
for

00:28:06,240 --> 00:28:09,919
uh listening uh and you know i'll be

00:28:08,559 --> 00:28:13,840
happy to

00:28:09,919 --> 00:28:13,840
answer any questions uh coming up

00:28:15,039 --> 00:28:18,559
thank you for your talk really great

00:28:16,640 --> 00:28:19,919
pipeline and uh many great ideas that

00:28:18,559 --> 00:28:21,360
can i think can be used even for

00:28:19,919 --> 00:28:21,919
different topics right it's like idea

00:28:21,360 --> 00:28:24,080
this uh

00:28:21,919 --> 00:28:25,760
uh disentangle graphs right and sampling

00:28:24,080 --> 00:28:27,360
from there i already kind of like see it

00:28:25,760 --> 00:28:28,640
like happening for contrastive learning

00:28:27,360 --> 00:28:32,640
and like other things right yeah

00:28:28,640 --> 00:28:33,039
it's pretty good idea yes uh so while

00:28:32,640 --> 00:28:34,799
people

00:28:33,039 --> 00:28:36,799
writing some questions uh i guess we

00:28:34,799 --> 00:28:38,080
have like a a time for

00:28:36,799 --> 00:28:39,360
just like a few questions like one

00:28:38,080 --> 00:28:40,640
question is what you already kind of

00:28:39,360 --> 00:28:42,320
like mentioned like at the end of your

00:28:40,640 --> 00:28:44,399
presentations that um

00:28:42,320 --> 00:28:46,480
the notion of similarity right is quite

00:28:44,399 --> 00:28:48,320
like heavily influencing what

00:28:46,480 --> 00:28:49,840
you're filtering out right like how do

00:28:48,320 --> 00:28:51,520
you mind like positive and negative

00:28:49,840 --> 00:28:53,360
samples like and everything else right

00:28:51,520 --> 00:28:55,039
how do you think like if suddenly you

00:28:53,360 --> 00:28:56,159
know you would like to extend it to have

00:28:55,039 --> 00:28:58,159
not only like

00:28:56,159 --> 00:29:00,240
exact visually similar right but i don't

00:28:58,159 --> 00:29:01,440
know let's say like add style right say

00:29:00,240 --> 00:29:03,279
i don't know shoes like in the same

00:29:01,440 --> 00:29:05,279
styles like fitting to like

00:29:03,279 --> 00:29:07,440
you know like item from other style

00:29:05,279 --> 00:29:08,880
would it be kind of rewriting it from

00:29:07,440 --> 00:29:10,240
zero right because you know like it's

00:29:08,880 --> 00:29:11,039
kind of like a changing completely like

00:29:10,240 --> 00:29:13,039
a notion

00:29:11,039 --> 00:29:14,240
of what's similar what is not right an

00:29:13,039 --> 00:29:18,720
entire pipeline or

00:29:14,240 --> 00:29:22,880
how do you think about this one uh

00:29:18,720 --> 00:29:25,279
so i think it is possible um

00:29:22,880 --> 00:29:26,080
to do some like sorry like just to

00:29:25,279 --> 00:29:27,360
clarify

00:29:26,080 --> 00:29:29,760
like your question are you saying that

00:29:27,360 --> 00:29:31,120
like maybe this person is like looking

00:29:29,760 --> 00:29:34,159
at boots

00:29:31,120 --> 00:29:37,120
uh and then uh

00:29:34,159 --> 00:29:37,520
you know like like maybe like high boots

00:29:37,120 --> 00:29:39,440
although

00:29:37,520 --> 00:29:40,880
like he only wants to look at like you

00:29:39,440 --> 00:29:42,559
know like exactly

00:29:40,880 --> 00:29:44,240
yeah so you have i don't know some like

00:29:42,559 --> 00:29:45,760
a style i don't know smart casual for

00:29:44,240 --> 00:29:47,279
example right or classic right and you

00:29:45,760 --> 00:29:49,279
would like to see the items that

00:29:47,279 --> 00:29:50,799
belongs to a different categories right

00:29:49,279 --> 00:29:52,320
but they still have like this notion of

00:29:50,799 --> 00:29:53,919
similarities that

00:29:52,320 --> 00:29:56,159
are similar you know what i mean so it's

00:29:53,919 --> 00:29:58,080
not really shoes that look exactly the

00:29:56,159 --> 00:29:59,840
same right but basically something that

00:29:58,080 --> 00:30:01,600
for the human is similar right but for

00:29:59,840 --> 00:30:03,279
your approach is going to be completely

00:30:01,600 --> 00:30:04,960
like you know orthogonal to each other

00:30:03,279 --> 00:30:07,200
right oh okay

00:30:04,960 --> 00:30:08,159
so do you mean similar like style like

00:30:07,200 --> 00:30:10,960
yeah you know like

00:30:08,159 --> 00:30:12,640
the whole like outfit yeah okay yeah

00:30:10,960 --> 00:30:13,120
yeah i mean that definitely i think like

00:30:12,640 --> 00:30:15,919
uh

00:30:13,120 --> 00:30:17,760
our pipeline uh isn't it it isn't really

00:30:15,919 --> 00:30:21,039
like targeted uh towards this

00:30:17,760 --> 00:30:23,679
uh like i do agree like that is uh

00:30:21,039 --> 00:30:24,559
sort of like a different form of like

00:30:23,679 --> 00:30:28,640
recommendation

00:30:24,559 --> 00:30:30,799
uh that we're also seeing uh where um

00:30:28,640 --> 00:30:31,840
like shops are proposing that like oh

00:30:30,799 --> 00:30:34,679
you buy this

00:30:31,840 --> 00:30:36,399
you can kind of match it with like these

00:30:34,679 --> 00:30:37,840
uh

00:30:36,399 --> 00:30:40,240
yeah i think that there are some work i

00:30:37,840 --> 00:30:43,279
always try to tackle this like

00:30:40,240 --> 00:30:44,000
thyristic uh similarity nice nice and

00:30:43,279 --> 00:30:45,600
another question

00:30:44,000 --> 00:30:47,440
so you i guess you mentioned it like

00:30:45,600 --> 00:30:49,600
with the furniture right i'm not sure

00:30:47,440 --> 00:30:51,120
uh if you uh validate validated like

00:30:49,600 --> 00:30:53,039
with the backgrounds right because i can

00:30:51,120 --> 00:30:54,960
imagine for like many of uh

00:30:53,039 --> 00:30:56,720
very fashion items right they're like

00:30:54,960 --> 00:30:58,559
always i mean most of the times gonna

00:30:56,720 --> 00:30:59,279
have like very wide backgrounds right

00:30:58,559 --> 00:31:01,840
and you're only

00:30:59,279 --> 00:31:03,679
picking up like this similarity of the

00:31:01,840 --> 00:31:04,960
item itself right and for furniture in

00:31:03,679 --> 00:31:06,640
many cases it's going to be like more

00:31:04,960 --> 00:31:08,480
surrounding of the room right

00:31:06,640 --> 00:31:10,399
did you consider the kind of like this

00:31:08,480 --> 00:31:12,640
one to be like a factor of

00:31:10,399 --> 00:31:14,240
what your feature extractor from image

00:31:12,640 --> 00:31:15,679
site gonna be picking up like on this

00:31:14,240 --> 00:31:18,640
image just because it can be like

00:31:15,679 --> 00:31:19,840
unrelated right yeah yeah definitely uh

00:31:18,640 --> 00:31:22,320
i think

00:31:19,840 --> 00:31:23,760
like in the domain of like fashion like

00:31:22,320 --> 00:31:26,080
like most of the times the

00:31:23,760 --> 00:31:27,279
the images are already like very clean

00:31:26,080 --> 00:31:29,360
uh and

00:31:27,279 --> 00:31:31,519
like you know like the form factor of a

00:31:29,360 --> 00:31:35,919
shirt can't vary that much

00:31:31,519 --> 00:31:37,760
but uh like if you look like at a table

00:31:35,919 --> 00:31:40,320
there are like a wide range of like

00:31:37,760 --> 00:31:43,039
possible like configurations uh

00:31:40,320 --> 00:31:43,760
to to kind of like have an image for for

00:31:43,039 --> 00:31:46,960
a table

00:31:43,760 --> 00:31:50,480
or like a shelf and so i think

00:31:46,960 --> 00:31:52,880
uh for i think for these like

00:31:50,480 --> 00:31:54,080
verticals uh it's worth like exploring

00:31:52,880 --> 00:31:56,480
uh

00:31:54,080 --> 00:31:57,279
some like self-supervised methods uh to

00:31:56,480 --> 00:31:59,679
fine-tune

00:31:57,279 --> 00:32:01,360
um where like i think you alluded to

00:31:59,679 --> 00:32:02,559
like you know contrastive learning that

00:32:01,360 --> 00:32:04,799
kind of thing

00:32:02,559 --> 00:32:05,600
uh you know i think there's some work in

00:32:04,799 --> 00:32:07,679
the past year

00:32:05,600 --> 00:32:08,799
where you you can only need like

00:32:07,679 --> 00:32:10,640
positive sample

00:32:08,799 --> 00:32:13,600
uh and you know rely on like data

00:32:10,640 --> 00:32:29,840
augmentation uh in order to

00:32:13,600 --> 00:32:29,840
build better representations

00:32:36,000 --> 00:32:38,080

YouTube URL: https://www.youtube.com/watch?v=nlhlrvE-UlE


