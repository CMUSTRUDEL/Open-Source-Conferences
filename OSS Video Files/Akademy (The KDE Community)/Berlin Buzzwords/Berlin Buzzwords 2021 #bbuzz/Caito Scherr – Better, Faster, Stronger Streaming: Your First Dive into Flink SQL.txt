Title: Caito Scherr – Better, Faster, Stronger Streaming: Your First Dive into Flink SQL
Publication date: 2021-06-30
Playlist: Berlin Buzzwords 2021 #bbuzz
Description: 
	For the most flexible, powerful stream processing engines, it seems like the barrier to entry has never been higher than it is now. If you’ve tried, or have been interested in leveraging the strengths of real-time data processing - maybe for machine learning, IoT, anomaly detection or data analysis - but you’ve been held back: I’ve been there, and it’s frustrating. And that’s why this talk is for you. 

That being said, this talk is also for you if you ARE experienced with stream processing but you want an easy (and if I say so myself, pretty fun) way to add some of the newest, bleeding edge features to your toolbelt.

This session will be about getting started with Flink SQL. Apache Flink’s high level SQL language has the familiarity of the SQL you know and love (or at least, know…), but with some powerful new functionality, and of course, the benefit of being able to be used with Flink and PyFlink. 

More specifically, this will be a pragmatic entry into creating data pipelines with Flink SQL, as well as a sneak peek into some of its newest and most interesting features.

Speaker:
Caito Scherr – https://2021.berlinbuzzwords.de/member/caito-scherr

More: https://2021.berlinbuzzwords.de/session/better-faster-stronger-streaming-your-first-dive-flink-sql
Captions: 
	00:00:08,080 --> 00:00:10,400
all right

00:00:08,639 --> 00:00:12,719
it is so good to be back at berlin

00:00:10,400 --> 00:00:14,240
buzzwords good to see you all here

00:00:12,719 --> 00:00:15,839
for those of you who don't know me my

00:00:14,240 --> 00:00:19,039
name is kato sher

00:00:15,839 --> 00:00:21,359
and i'm a developer advocate and i work

00:00:19,039 --> 00:00:22,000
at viverica which is a berlin-based tech

00:00:21,359 --> 00:00:23,920
company

00:00:22,000 --> 00:00:25,920
and they built and maintained the open

00:00:23,920 --> 00:00:28,000
source project apache flink

00:00:25,920 --> 00:00:29,439
as well as a related integrated platform

00:00:28,000 --> 00:00:30,000
called the vaverica platform which

00:00:29,439 --> 00:00:32,160
provides

00:00:30,000 --> 00:00:34,399
analytics and streamlines deployments

00:00:32,160 --> 00:00:36,079
and other operations for flink

00:00:34,399 --> 00:00:37,600
i live in portland oregon so nice and

00:00:36,079 --> 00:00:39,600
early here

00:00:37,600 --> 00:00:41,280
and i got started with stream processing

00:00:39,600 --> 00:00:43,280
back in 2017

00:00:41,280 --> 00:00:45,360
when i was a software engineer at a

00:00:43,280 --> 00:00:47,280
large data analytics company

00:00:45,360 --> 00:00:49,120
and my team there built that company's

00:00:47,280 --> 00:00:49,840
first stream processing data pipeline in

00:00:49,120 --> 00:00:52,480
production

00:00:49,840 --> 00:00:54,000
using flink there was very little stream

00:00:52,480 --> 00:00:56,160
processing in general there

00:00:54,000 --> 00:00:57,600
so it was a pretty steep learning curve

00:00:56,160 --> 00:01:00,079
but also of course

00:00:57,600 --> 00:01:01,280
very worth it you know i'm here now and

00:01:00,079 --> 00:01:03,039
it also means though that i have a

00:01:01,280 --> 00:01:04,799
particular soft spot for hearing about

00:01:03,039 --> 00:01:06,560
people's early adoption stories

00:01:04,799 --> 00:01:08,640
and having been through some of the pain

00:01:06,560 --> 00:01:09,840
points i'm very focused on trying to

00:01:08,640 --> 00:01:12,400
make all that a bit easier

00:01:09,840 --> 00:01:13,119
and hopefully a little bit more fun too

00:01:12,400 --> 00:01:15,040
and

00:01:13,119 --> 00:01:17,119
i got to know my current co-workers when

00:01:15,040 --> 00:01:18,159
i became a fairly regular speaker at

00:01:17,119 --> 00:01:20,560
their conferences

00:01:18,159 --> 00:01:21,280
and i got just completely hooked once i

00:01:20,560 --> 00:01:23,920
met that

00:01:21,280 --> 00:01:25,439
open source community around it really

00:01:23,920 --> 00:01:27,040
the only downside of working for them is

00:01:25,439 --> 00:01:28,320
i guess i have to like squirrels now as

00:01:27,040 --> 00:01:29,759
that's our mascot

00:01:28,320 --> 00:01:32,479
which of course in all fairness is

00:01:29,759 --> 00:01:33,920
pretty cute so i know we have a lot of

00:01:32,479 --> 00:01:35,680
a large german speaking audience today

00:01:33,920 --> 00:01:37,280
but for anyone who's not uh the rough

00:01:35,680 --> 00:01:38,799
translation of the word flink

00:01:37,280 --> 00:01:40,640
in german means nimble so really

00:01:38,799 --> 00:01:42,720
highlighting the flexibility and speed

00:01:40,640 --> 00:01:44,720
of the framework

00:01:42,720 --> 00:01:46,640
and since this is meant to be a very

00:01:44,720 --> 00:01:48,000
beginner friendly talk

00:01:46,640 --> 00:01:49,840
i'll start with some very quick

00:01:48,000 --> 00:01:52,079
introduction uh on flink

00:01:49,840 --> 00:01:53,119
for anyone's unfamiliar and i promise

00:01:52,079 --> 00:01:54,880
it'll be fast and then

00:01:53,119 --> 00:01:56,240
i'll i'll mainly be highlighting just

00:01:54,880 --> 00:01:58,079
the parts that are going to pertain to

00:01:56,240 --> 00:02:00,640
today's topic

00:01:58,079 --> 00:02:01,200
so next i'll discuss why to use sling

00:02:00,640 --> 00:02:03,040
sql

00:02:01,200 --> 00:02:05,040
so why it's a good starting point and

00:02:03,040 --> 00:02:06,960
what some of its strengths are

00:02:05,040 --> 00:02:08,080
and then lastly our demo will include

00:02:06,960 --> 00:02:10,160
just the most straightforward

00:02:08,080 --> 00:02:11,200
process possible for jumping right in

00:02:10,160 --> 00:02:13,120
and being able to just

00:02:11,200 --> 00:02:16,640
build your own data pipelines in just a

00:02:13,120 --> 00:02:19,760
couple quick steps with link sql

00:02:16,640 --> 00:02:21,520
so firstly what even is flink on the

00:02:19,760 --> 00:02:24,000
highest level it is a stateful

00:02:21,520 --> 00:02:26,239
fully distributed processing engine for

00:02:24,000 --> 00:02:28,160
both batch and stream processing

00:02:26,239 --> 00:02:30,959
and more precisely you know for bounded

00:02:28,160 --> 00:02:33,519
and unbounded data streams

00:02:30,959 --> 00:02:35,599
its strengths are in its scalability its

00:02:33,519 --> 00:02:37,599
high performance so think computations

00:02:35,599 --> 00:02:39,599
done at in-memory speed

00:02:37,599 --> 00:02:40,800
and various features like exactly-once

00:02:39,599 --> 00:02:42,959
guarantees and

00:02:40,800 --> 00:02:44,720
robust high-availability options that

00:02:42,959 --> 00:02:48,160
allow for just those really high levels

00:02:44,720 --> 00:02:50,000
of data accuracy and reliability

00:02:48,160 --> 00:02:51,680
additionally there is an ever-growing

00:02:50,000 --> 00:02:54,239
ecosystem around flink of

00:02:51,680 --> 00:02:55,360
libraries connectors other features and

00:02:54,239 --> 00:02:57,280
partnerships with different

00:02:55,360 --> 00:02:58,959
complementary tools and software

00:02:57,280 --> 00:03:00,560
that have really enabled it to fit into

00:02:58,959 --> 00:03:03,120
a pretty wide variety of different use

00:03:00,560 --> 00:03:05,599
cases and pre-existing systems

00:03:03,120 --> 00:03:07,599
um specifically it can be run on pretty

00:03:05,599 --> 00:03:10,480
much any common clustered environment so

00:03:07,599 --> 00:03:12,800
hadoop yarn mesos kubernetes can also be

00:03:10,480 --> 00:03:15,360
run up as a standalone cluster

00:03:12,800 --> 00:03:17,040
and its uh timing and state features are

00:03:15,360 --> 00:03:18,239
really where it shines so it allows kind

00:03:17,040 --> 00:03:20,400
of that extra

00:03:18,239 --> 00:03:23,360
extra flexibility for what kinds of

00:03:20,400 --> 00:03:25,760
applications it can be run on

00:03:23,360 --> 00:03:27,519
and as part of this ecosystem flink has

00:03:25,760 --> 00:03:30,239
a series of apis

00:03:27,519 --> 00:03:32,000
so the higher level api the more concise

00:03:30,239 --> 00:03:35,040
but the less expressive and vice

00:03:32,000 --> 00:03:37,280
versa so the most expressive is our

00:03:35,040 --> 00:03:39,040
lowest level process functions

00:03:37,280 --> 00:03:41,040
and that's going to support flink's

00:03:39,040 --> 00:03:43,200
precision timing event and any

00:03:41,040 --> 00:03:45,360
state-related functionality

00:03:43,200 --> 00:03:47,599
and on the mid-level is the data stream

00:03:45,360 --> 00:03:48,720
api which powers the unified batch and

00:03:47,599 --> 00:03:51,440
streaming functions

00:03:48,720 --> 00:03:52,799
so anything related to windowing exactly

00:03:51,440 --> 00:03:54,959
once etc

00:03:52,799 --> 00:03:56,480
and this is where your maps reduces

00:03:54,959 --> 00:03:58,640
aggregations anything like that's going

00:03:56,480 --> 00:04:00,799
to take place

00:03:58,640 --> 00:04:02,239
the table api and the sql client are

00:04:00,799 --> 00:04:04,879
going to make up that highest level

00:04:02,239 --> 00:04:06,480
the relational apis here and that's of

00:04:04,879 --> 00:04:08,480
course what i'll be getting into later

00:04:06,480 --> 00:04:10,319
and both of these are really optimized

00:04:08,480 --> 00:04:11,200
for unified batch and streaming

00:04:10,319 --> 00:04:12,720
processing

00:04:11,200 --> 00:04:15,120
so the queries are just going to be the

00:04:12,720 --> 00:04:16,160
same regardless of which processing type

00:04:15,120 --> 00:04:18,720
you're using

00:04:16,160 --> 00:04:19,359
and they're also both based on apache

00:04:18,720 --> 00:04:21,680
calcite

00:04:19,359 --> 00:04:23,840
so they are also ansi or standard sql

00:04:21,680 --> 00:04:25,919
compliant

00:04:23,840 --> 00:04:28,080
taking a little quick step back though

00:04:25,919 --> 00:04:29,840
so why is it important to have

00:04:28,080 --> 00:04:31,759
and provide this unified batch and

00:04:29,840 --> 00:04:33,759
streaming solution

00:04:31,759 --> 00:04:35,360
so unifying this allows users to be able

00:04:33,759 --> 00:04:36,880
to reuse code and logic

00:04:35,360 --> 00:04:38,960
across both batch and streaming

00:04:36,880 --> 00:04:40,160
processing so you know it's just going

00:04:38,960 --> 00:04:40,639
to make a lot easier to integrate

00:04:40,160 --> 00:04:42,880
different

00:04:40,639 --> 00:04:44,880
applications different systems but it

00:04:42,880 --> 00:04:45,840
also it helps ensure that semantics are

00:04:44,880 --> 00:04:47,919
going to be consistent

00:04:45,840 --> 00:04:50,160
so you don't have to learn a totally new

00:04:47,919 --> 00:04:51,919
api for each processing mode or for each

00:04:50,160 --> 00:04:53,520
layer of abstraction

00:04:51,919 --> 00:04:55,919
and it means you can just simplify your

00:04:53,520 --> 00:04:57,680
operations and keep your configs keep

00:04:55,919 --> 00:04:58,800
your processes the same across

00:04:57,680 --> 00:05:00,560
all these different systems so

00:04:58,800 --> 00:05:01,360
especially for any distributed system

00:05:00,560 --> 00:05:03,759
it's just

00:05:01,360 --> 00:05:05,440
it's all about that simplification and

00:05:03,759 --> 00:05:09,039
of course it enables you to mix your

00:05:05,440 --> 00:05:09,039
historical and your real-time data

00:05:09,520 --> 00:05:13,120
as for the architecture it will look a

00:05:11,440 --> 00:05:15,840
little bit different depending on

00:05:13,120 --> 00:05:17,759
what use case it's for and whether it's

00:05:15,840 --> 00:05:20,000
a batch or streaming scenario

00:05:17,759 --> 00:05:20,800
but these are pretty common examples for

00:05:20,000 --> 00:05:22,560
both a batch

00:05:20,800 --> 00:05:24,560
on the left i assume it's left depending

00:05:22,560 --> 00:05:26,240
on the mirroring here um

00:05:24,560 --> 00:05:28,479
and then of course for our streaming

00:05:26,240 --> 00:05:30,479
scenario on the other side

00:05:28,479 --> 00:05:32,639
so in our batch example we have our

00:05:30,479 --> 00:05:33,919
recorded or historical events

00:05:32,639 --> 00:05:36,720
and although these are queried

00:05:33,919 --> 00:05:38,479
periodically flank's really precision

00:05:36,720 --> 00:05:40,000
timing capabilities enabled this to be

00:05:38,479 --> 00:05:42,240
done pretty efficiently

00:05:40,000 --> 00:05:43,919
and on the streaming scenario it's going

00:05:42,240 --> 00:05:46,160
to rely a bit more heavily on flink's

00:05:43,919 --> 00:05:48,400
internal state functionality

00:05:46,160 --> 00:05:50,560
and the most typical use cases for all

00:05:48,400 --> 00:05:52,479
this is event driven applications

00:05:50,560 --> 00:05:54,400
data analytics applications and data

00:05:52,479 --> 00:05:56,560
pipeline apps

00:05:54,400 --> 00:05:58,240
and as for its state it uses a very

00:05:56,560 --> 00:05:59,360
unique checkpointing and safe pointing

00:05:58,240 --> 00:06:01,039
mechanism system

00:05:59,360 --> 00:06:02,319
that i won't really have time to go into

00:06:01,039 --> 00:06:03,039
here but there's a lot of great talks on

00:06:02,319 --> 00:06:04,880
that

00:06:03,039 --> 00:06:06,240
uh the main benefit of that or at least

00:06:04,880 --> 00:06:07,600
my favorite benefit because i really

00:06:06,240 --> 00:06:09,199
like geeking out about it is

00:06:07,600 --> 00:06:11,280
that it enables that exactly once

00:06:09,199 --> 00:06:12,960
guarantees on the data

00:06:11,280 --> 00:06:14,319
but moreover that it's it's actually

00:06:12,960 --> 00:06:16,000
scalable

00:06:14,319 --> 00:06:17,919
with very minimal performance overhead

00:06:16,000 --> 00:06:21,759
because of that checkpointing mechanism

00:06:17,919 --> 00:06:23,919
system um and then even if you're using

00:06:21,759 --> 00:06:25,520
the more abstracted sql version i do

00:06:23,919 --> 00:06:27,919
think it's kind of nice just so you have

00:06:25,520 --> 00:06:29,039
an idea of what a typical

00:06:27,919 --> 00:06:30,880
code block for this is going to look

00:06:29,039 --> 00:06:31,919
like and kind of know what's going on

00:06:30,880 --> 00:06:35,759
under the hood here

00:06:31,919 --> 00:06:38,000
so this is a typical but very simplified

00:06:35,759 --> 00:06:39,120
code version for just a really basic

00:06:38,000 --> 00:06:41,280
flank data pipeline

00:06:39,120 --> 00:06:42,720
this is not using the sql client again

00:06:41,280 --> 00:06:44,080
just to kind of

00:06:42,720 --> 00:06:46,240
show you the code version of that

00:06:44,080 --> 00:06:48,639
architecture we just looked at

00:06:46,240 --> 00:06:49,520
so starting off with reading it from a

00:06:48,639 --> 00:06:51,440
source uh

00:06:49,520 --> 00:06:52,800
kafka topic is the most common along

00:06:51,440 --> 00:06:55,840
with pulsar

00:06:52,800 --> 00:06:56,880
um next is this very very simplified

00:06:55,840 --> 00:06:58,400
representation of

00:06:56,880 --> 00:07:00,319
business logic for in the flink app

00:06:58,400 --> 00:07:01,440
itself so doing a couple basic

00:07:00,319 --> 00:07:03,039
transforms

00:07:01,440 --> 00:07:04,560
maps and reduces being the most common

00:07:03,039 --> 00:07:07,039
to start with

00:07:04,560 --> 00:07:07,840
and then moving on to specifying what

00:07:07,039 --> 00:07:09,440
you want by

00:07:07,840 --> 00:07:11,360
key buy and configuring for your

00:07:09,440 --> 00:07:13,120
windowing settings

00:07:11,360 --> 00:07:14,639
and obviously there's a lot more in

00:07:13,120 --> 00:07:18,479
between typically

00:07:14,639 --> 00:07:19,759
but um you're you know so dot dot dot

00:07:18,479 --> 00:07:21,280
and then uh but then you're going to be

00:07:19,759 --> 00:07:21,680
designating your sinks as the last bit

00:07:21,280 --> 00:07:23,520
there

00:07:21,680 --> 00:07:26,560
so that again is just typically what

00:07:23,520 --> 00:07:26,560
that process looks like

00:07:26,639 --> 00:07:31,440
so with all that so sounds you know

00:07:29,680 --> 00:07:34,319
there's all of these great benefits um

00:07:31,440 --> 00:07:35,759
why are we focusing on flake sql and not

00:07:34,319 --> 00:07:37,599
everything else in flink

00:07:35,759 --> 00:07:39,360
and uh for me that actually kind of

00:07:37,599 --> 00:07:41,280
answers itself for this talk because

00:07:39,360 --> 00:07:43,199
um with everything else in flank there

00:07:41,280 --> 00:07:45,039
is so much going on there

00:07:43,199 --> 00:07:46,639
and that is what makes it such a

00:07:45,039 --> 00:07:48,240
powerful and flexible tool

00:07:46,639 --> 00:07:50,479
but it also means it's really nice to

00:07:48,240 --> 00:07:52,080
have an option that allows you to just

00:07:50,479 --> 00:07:53,520
really jump right in and start building

00:07:52,080 --> 00:07:54,319
something that can leverage those

00:07:53,520 --> 00:07:56,479
strengths

00:07:54,319 --> 00:07:58,400
without having to learn the entire thing

00:07:56,479 --> 00:08:00,160
learn the ecosystem learn the code

00:07:58,400 --> 00:08:01,919
and the framework and do with that whole

00:08:00,160 --> 00:08:03,759
deep dive so

00:08:01,919 --> 00:08:05,039
that code example you know as i said was

00:08:03,759 --> 00:08:06,800
very simplified

00:08:05,039 --> 00:08:09,039
there's going to be more going on there

00:08:06,800 --> 00:08:11,680
um it's going to be a bit language

00:08:09,039 --> 00:08:13,840
dependent and requires more dependencies

00:08:11,680 --> 00:08:14,879
and on a basic level you know having a

00:08:13,840 --> 00:08:18,160
powerful ide

00:08:14,879 --> 00:08:20,720
and build tools and everything so for

00:08:18,160 --> 00:08:22,319
flink sql um i will go into some of its

00:08:20,720 --> 00:08:25,440
strengths in a moment but

00:08:22,319 --> 00:08:26,879
um really i want to emphasize it's all

00:08:25,440 --> 00:08:30,000
about simplifying your development

00:08:26,879 --> 00:08:32,800
so that is our theme keeping it simple

00:08:30,000 --> 00:08:33,760
and the uh its capability is actually

00:08:32,800 --> 00:08:36,320
very stable too

00:08:33,760 --> 00:08:38,159
so it's we've been adding flink sql

00:08:36,320 --> 00:08:40,399
features for about six years

00:08:38,159 --> 00:08:42,399
and as i mentioned it's based on calcite

00:08:40,399 --> 00:08:43,599
so it does support that regular sql so

00:08:42,399 --> 00:08:45,360
the learning curve is

00:08:43,599 --> 00:08:46,880
just absolutely minimal if you have any

00:08:45,360 --> 00:08:48,240
other sql experience or database

00:08:46,880 --> 00:08:50,000
experience

00:08:48,240 --> 00:08:51,920
um as for the actual benefits of

00:08:50,000 --> 00:08:53,279
combining sql with a powerful streaming

00:08:51,920 --> 00:08:55,200
engine

00:08:53,279 --> 00:08:57,040
so we've covered you know batch and

00:08:55,200 --> 00:08:58,160
streaming distributed systems that's

00:08:57,040 --> 00:09:00,560
really great

00:08:58,160 --> 00:09:02,399
um really it's you know users can focus

00:09:00,560 --> 00:09:02,959
now on the business logic of being able

00:09:02,399 --> 00:09:05,839
to still

00:09:02,959 --> 00:09:06,720
do a powerful streaming system but not

00:09:05,839 --> 00:09:08,640
have to worry about all those

00:09:06,720 --> 00:09:11,040
implementation details

00:09:08,640 --> 00:09:12,000
and along with the fact that it's just

00:09:11,040 --> 00:09:13,920
sql

00:09:12,000 --> 00:09:15,440
your your developers don't have to be

00:09:13,920 --> 00:09:17,040
java or scala experts

00:09:15,440 --> 00:09:18,959
they don't have to worry about switching

00:09:17,040 --> 00:09:20,560
your code over to java or scala or

00:09:18,959 --> 00:09:21,040
python if that's not what you're working

00:09:20,560 --> 00:09:23,120
in

00:09:21,040 --> 00:09:24,880
so it makes it just incredibly

00:09:23,120 --> 00:09:26,640
lightweight and gives developers a bit

00:09:24,880 --> 00:09:28,160
more autonomy so they can just jump in

00:09:26,640 --> 00:09:30,560
without any of that

00:09:28,160 --> 00:09:32,000
and for some of the real world use cases

00:09:30,560 --> 00:09:33,360
i've got a couple examples here

00:09:32,000 --> 00:09:36,320
of some companies that are using clink

00:09:33,360 --> 00:09:38,240
sql we see a lot of people building

00:09:36,320 --> 00:09:40,000
more unified pipelines for online and

00:09:38,240 --> 00:09:41,519
offline model training

00:09:40,000 --> 00:09:43,200
uh independently building end-to-end

00:09:41,519 --> 00:09:45,279
streaming analytics pipelines

00:09:43,200 --> 00:09:46,240
and and specifically without having to

00:09:45,279 --> 00:09:49,279
depend on

00:09:46,240 --> 00:09:50,480
a specific engineering or operations

00:09:49,279 --> 00:09:53,360
team just for

00:09:50,480 --> 00:09:54,720
your pipeline building and also just

00:09:53,360 --> 00:09:56,240
being able to more easily generate

00:09:54,720 --> 00:09:58,959
features for machine learning model

00:09:56,240 --> 00:10:00,160
training in general

00:09:58,959 --> 00:10:02,240
and one thing i like is kind of

00:10:00,160 --> 00:10:04,640
comparing the difference between

00:10:02,240 --> 00:10:06,480
a regular sql engine versus a streaming

00:10:04,640 --> 00:10:07,839
one so regular one

00:10:06,480 --> 00:10:09,519
a regular database you're going to

00:10:07,839 --> 00:10:10,320
execute your query at a certain point in

00:10:09,519 --> 00:10:12,079
time

00:10:10,320 --> 00:10:14,480
the engine then takes a snapshot of the

00:10:12,079 --> 00:10:16,240
table at the time the query is run

00:10:14,480 --> 00:10:17,680
and then computes the results based on

00:10:16,240 --> 00:10:20,240
that static snapshot

00:10:17,680 --> 00:10:21,839
and then the query terminates so pretty

00:10:20,240 --> 00:10:24,000
straightforward there

00:10:21,839 --> 00:10:25,040
but with the sql one the query is

00:10:24,000 --> 00:10:27,600
continuous

00:10:25,040 --> 00:10:29,600
so you first deploy your query then

00:10:27,600 --> 00:10:31,600
whenever the data is added to the table

00:10:29,600 --> 00:10:33,279
the changes are continuously ingested

00:10:31,600 --> 00:10:34,480
and the results are also continuously

00:10:33,279 --> 00:10:36,000
updated

00:10:34,480 --> 00:10:37,440
the query keeps running and it never

00:10:36,000 --> 00:10:37,920
finishes until you actually cancel the

00:10:37,440 --> 00:10:40,480
job

00:10:37,920 --> 00:10:42,640
so it just you know it's streaming so it

00:10:40,480 --> 00:10:44,880
just keeps going

00:10:42,640 --> 00:10:47,440
and uh keeping with that level of

00:10:44,880 --> 00:10:49,920
simplicity so

00:10:47,440 --> 00:10:50,880
i wanted to include this example this is

00:10:49,920 --> 00:10:53,279
an example of

00:10:50,880 --> 00:10:54,640
sessionizing a click stream and count on

00:10:53,279 --> 00:10:55,360
counting on the number of clicks per

00:10:54,640 --> 00:10:57,440
session

00:10:55,360 --> 00:11:00,480
and we've got on one side here the

00:10:57,440 --> 00:11:02,880
regular flink using the data stream api

00:11:00,480 --> 00:11:03,839
versus the exact same thing using flink

00:11:02,880 --> 00:11:05,440
sql

00:11:03,839 --> 00:11:07,279
so i think this is a pretty powerful

00:11:05,440 --> 00:11:09,519
comparison and

00:11:07,279 --> 00:11:11,120
with you know links other apis as i said

00:11:09,519 --> 00:11:11,519
their queries are going to be dependent

00:11:11,120 --> 00:11:13,600
on

00:11:11,519 --> 00:11:14,880
a table program written either in java

00:11:13,600 --> 00:11:16,000
or scala so

00:11:14,880 --> 00:11:17,600
you're going to have those build tool

00:11:16,000 --> 00:11:18,560
dependencies for submitting to the

00:11:17,600 --> 00:11:20,800
cluster

00:11:18,560 --> 00:11:21,839
whereas filling sql all writing

00:11:20,800 --> 00:11:24,240
debugging

00:11:21,839 --> 00:11:24,880
submitting any sort of table program to

00:11:24,240 --> 00:11:26,880
a flink

00:11:24,880 --> 00:11:28,720
cluster is just done you you barely even

00:11:26,880 --> 00:11:30,959
notice the flint cluster honestly

00:11:28,720 --> 00:11:32,959
um plus you get some nice visualizations

00:11:30,959 --> 00:11:35,600
just on the command line

00:11:32,959 --> 00:11:37,680
so just to recap so basically you get

00:11:35,600 --> 00:11:39,040
this high-level relation-like way to

00:11:37,680 --> 00:11:40,880
query your data streams

00:11:39,040 --> 00:11:42,959
and it's more likely you're already

00:11:40,880 --> 00:11:44,560
going to know it you've got this unified

00:11:42,959 --> 00:11:47,120
batch and streaming option

00:11:44,560 --> 00:11:48,640
and you can process so yeah processing

00:11:47,120 --> 00:11:49,839
historical and real-time data

00:11:48,640 --> 00:11:52,959
without having to change any of your

00:11:49,839 --> 00:11:54,800
logic there and

00:11:52,959 --> 00:11:56,079
you've got this super super simple

00:11:54,800 --> 00:11:59,040
option you can build all

00:11:56,079 --> 00:12:00,880
these complicated applications with that

00:11:59,040 --> 00:12:01,760
same performance scalability and

00:12:00,880 --> 00:12:04,399
consistency

00:12:01,760 --> 00:12:05,200
of any other flink program without

00:12:04,399 --> 00:12:08,639
having to

00:12:05,200 --> 00:12:10,880
do all the implementation overhead so

00:12:08,639 --> 00:12:12,399
now we can get on to the fun part so for

00:12:10,880 --> 00:12:14,320
the demo

00:12:12,399 --> 00:12:15,680
um i again i wanted to keep this as

00:12:14,320 --> 00:12:18,160
simple as possible

00:12:15,680 --> 00:12:20,079
and uh hopefully you can follow along if

00:12:18,160 --> 00:12:21,440
you want i know sometimes the download

00:12:20,079 --> 00:12:25,040
can take a moment here

00:12:21,440 --> 00:12:27,040
so don't feel sad if it does but

00:12:25,040 --> 00:12:28,560
i believe these will be up after the

00:12:27,040 --> 00:12:31,600
conference as well so

00:12:28,560 --> 00:12:32,320
um firstly the prereqs are extremely

00:12:31,600 --> 00:12:34,639
simple so

00:12:32,320 --> 00:12:36,240
you do not need to write any java code

00:12:34,639 --> 00:12:38,480
but you do need to make sure that you

00:12:36,240 --> 00:12:39,360
have java 8 or 11 installed on your

00:12:38,480 --> 00:12:41,600
machine

00:12:39,360 --> 00:12:43,440
so then just make sure you've got that

00:12:41,600 --> 00:12:45,200
make sure you've on the right version

00:12:43,440 --> 00:12:47,120
download the current stable snapshot

00:12:45,200 --> 00:12:48,720
release of flink so there's a link in

00:12:47,120 --> 00:12:51,760
the docs there and then you unturr it

00:12:48,720 --> 00:12:54,000
and cd in there and that's it so that is

00:12:51,760 --> 00:12:56,399
all of your prereqs

00:12:54,000 --> 00:12:58,720
and then you can jump in so all you have

00:12:56,399 --> 00:13:01,200
to do start a cluster

00:12:58,720 --> 00:13:01,760
and at this point you'll be able to open

00:13:01,200 --> 00:13:03,839
up

00:13:01,760 --> 00:13:06,320
i'll wait for it to uh yeah so then you

00:13:03,839 --> 00:13:08,959
can open up your the flink ui so

00:13:06,320 --> 00:13:09,600
just here on localhost ignore all my

00:13:08,959 --> 00:13:11,839
tabs and

00:13:09,600 --> 00:13:13,680
things there and this just comes out of

00:13:11,839 --> 00:13:15,680
the box of links so

00:13:13,680 --> 00:13:17,760
again it's just localhost everything is

00:13:15,680 --> 00:13:20,639
just right there it's super fast

00:13:17,760 --> 00:13:21,120
and then you can get started on your sql

00:13:20,639 --> 00:13:23,360
client

00:13:21,120 --> 00:13:24,639
so all of this is in real time so it's

00:13:23,360 --> 00:13:27,680
very fast

00:13:24,639 --> 00:13:30,240
um so once oh and also

00:13:27,680 --> 00:13:31,519
i'm just using the most basic uh way to

00:13:30,240 --> 00:13:33,279
start up the sql client

00:13:31,519 --> 00:13:35,839
you can also explicitly use embedded

00:13:33,279 --> 00:13:35,839
mode as well

00:13:35,920 --> 00:13:40,160
so you are not going to miss that you

00:13:38,639 --> 00:13:42,399
are in the sql client

00:13:40,160 --> 00:13:44,000
there's definitely no did this work

00:13:42,399 --> 00:13:45,440
because you will immediately see this

00:13:44,000 --> 00:13:48,000
gigantic squirrel

00:13:45,440 --> 00:13:50,399
it doesn't even scroll all the way so if

00:13:48,000 --> 00:13:52,959
you do not see a gigantic squirrel

00:13:50,399 --> 00:13:54,639
then something is wrong so uh it's a

00:13:52,959 --> 00:13:56,399
very quick way to know that

00:13:54,639 --> 00:13:58,639
you know either you're in or you aren't

00:13:56,399 --> 00:14:00,160
so as a side note too

00:13:58,639 --> 00:14:02,000
the client does support a couple

00:14:00,160 --> 00:14:04,480
different modes for maintaining

00:14:02,000 --> 00:14:05,440
and visualizing your results so you can

00:14:04,480 --> 00:14:06,880
also

00:14:05,440 --> 00:14:08,720
add some different configurations while

00:14:06,880 --> 00:14:10,639
you're starting it up so

00:14:08,720 --> 00:14:12,880
there's a table mode so that

00:14:10,639 --> 00:14:14,560
materializes results in memory

00:14:12,880 --> 00:14:16,480
and the visualization is going to be in

00:14:14,560 --> 00:14:19,279
a regular just paginated

00:14:16,480 --> 00:14:20,720
table the changelog mode does not

00:14:19,279 --> 00:14:24,399
actually materialize

00:14:20,720 --> 00:14:26,240
results and visualizes the result stream

00:14:24,399 --> 00:14:28,240
and but it consists of these insertions

00:14:26,240 --> 00:14:30,320
and retractions so that's one option

00:14:28,240 --> 00:14:32,320
one note with that is in order for that

00:14:30,320 --> 00:14:33,920
mode to stay really responsive

00:14:32,320 --> 00:14:36,720
since those results are stored in the

00:14:33,920 --> 00:14:38,000
java heap that change log mode uh will

00:14:36,720 --> 00:14:39,920
only show the latest

00:14:38,000 --> 00:14:41,199
thousand changes so there's other things

00:14:39,920 --> 00:14:41,839
you can do to configure that but that's

00:14:41,199 --> 00:14:44,959
just kind of

00:14:41,839 --> 00:14:47,360
the default there and the last mode is

00:14:44,959 --> 00:14:48,240
tableau mode so this is more like your

00:14:47,360 --> 00:14:49,680
traditional way

00:14:48,240 --> 00:14:53,199
that will display the results on the

00:14:49,680 --> 00:14:54,560
screen just directly in tableau format

00:14:53,199 --> 00:14:56,800
and the displaying content is going to

00:14:54,560 --> 00:14:57,199
be influenced by the query execution

00:14:56,800 --> 00:15:00,720
type

00:14:57,199 --> 00:15:03,920
for that one um so

00:15:00,720 --> 00:15:06,800
then this is really basic

00:15:03,920 --> 00:15:08,560
but this is my like my big psa is that i

00:15:06,800 --> 00:15:09,120
always check the built-in hello world

00:15:08,560 --> 00:15:11,279
function

00:15:09,120 --> 00:15:13,120
because it is a really fast way to find

00:15:11,279 --> 00:15:15,279
out if something is wrong so

00:15:13,120 --> 00:15:16,800
you've gotten into the sql client that's

00:15:15,279 --> 00:15:18,240
super easy you got your gigantic

00:15:16,800 --> 00:15:20,160
squirrel you know you're in

00:15:18,240 --> 00:15:21,680
but you could potentially there could

00:15:20,160 --> 00:15:23,360
potentially still be something else and

00:15:21,680 --> 00:15:25,680
before you throw a bunch of

00:15:23,360 --> 00:15:27,120
queries in there that you care about um

00:15:25,680 --> 00:15:28,639
i like to check this just to make sure

00:15:27,120 --> 00:15:30,720
that you don't for instance

00:15:28,639 --> 00:15:32,639
have you know you've overridden your

00:15:30,720 --> 00:15:35,120
your default port somewhere

00:15:32,639 --> 00:15:35,920
or um you know if you're doing all this

00:15:35,120 --> 00:15:37,120
from scratch

00:15:35,920 --> 00:15:39,120
you are probably not going to have any

00:15:37,120 --> 00:15:40,560
of these issues but if you already have

00:15:39,120 --> 00:15:41,920
an older version of flink downloaded

00:15:40,560 --> 00:15:44,240
somewhere

00:15:41,920 --> 00:15:45,360
your cluster version and your client

00:15:44,240 --> 00:15:48,320
version

00:15:45,360 --> 00:15:49,120
may not be the same so you just want to

00:15:48,320 --> 00:15:51,040
make sure

00:15:49,120 --> 00:15:52,880
and i i really do just like doing this

00:15:51,040 --> 00:15:54,880
little test real fast just to make sure

00:15:52,880 --> 00:15:56,480
that like okay this is going to work and

00:15:54,880 --> 00:15:58,639
it's not just some silly

00:15:56,480 --> 00:16:00,639
thing that you know versioning or ports

00:15:58,639 --> 00:16:02,160
or something

00:16:00,639 --> 00:16:04,800
and again trying to make just the

00:16:02,160 --> 00:16:07,040
absolutely most basic example here

00:16:04,800 --> 00:16:08,800
so in this one i'm creating a table and

00:16:07,040 --> 00:16:11,120
reading just from a local csv

00:16:08,800 --> 00:16:12,800
file i picked something i was already

00:16:11,120 --> 00:16:15,120
using in my personal life this is

00:16:12,800 --> 00:16:15,839
um a bunch of friends contributed to

00:16:15,120 --> 00:16:18,000
this fake

00:16:15,839 --> 00:16:19,759
journal or diary titles for their

00:16:18,000 --> 00:16:21,360
experiences during quarantine we wanted

00:16:19,759 --> 00:16:22,399
to keep it funny but also still really

00:16:21,360 --> 00:16:24,320
inclusive

00:16:22,399 --> 00:16:25,440
and just have kind of a relatable way to

00:16:24,320 --> 00:16:28,079
share feelings that

00:16:25,440 --> 00:16:29,600
came up this past year and people got so

00:16:28,079 --> 00:16:31,680
into it i

00:16:29,600 --> 00:16:32,639
wait within like a week i had over 100

00:16:31,680 --> 00:16:35,920
submissions

00:16:32,639 --> 00:16:37,759
back in like april may of last year uh

00:16:35,920 --> 00:16:39,440
from friends and family and coworkers

00:16:37,759 --> 00:16:40,800
and it spread all over slack spaces and

00:16:39,440 --> 00:16:41,519
text messages so i was like you know

00:16:40,800 --> 00:16:43,279
what

00:16:41,519 --> 00:16:44,639
i just want to create an easy pipeline

00:16:43,279 --> 00:16:46,720
so that anyone can just add it

00:16:44,639 --> 00:16:48,480
themselves into this pipeline

00:16:46,720 --> 00:16:50,000
and in this case i'm just doing it as a

00:16:48,480 --> 00:16:51,199
csv they can add to you and then i can

00:16:50,000 --> 00:16:54,639
just continuously read

00:16:51,199 --> 00:16:57,120
from it um and then i can start to

00:16:54,639 --> 00:16:57,680
quickly sort and determine and do you

00:16:57,120 --> 00:16:59,920
know

00:16:57,680 --> 00:17:01,199
use some more interesting uh things with

00:16:59,920 --> 00:17:04,240
sql on it

00:17:01,199 --> 00:17:04,720
and uh you know determine which ones

00:17:04,240 --> 00:17:06,079
have been

00:17:04,720 --> 00:17:08,079
produced we're making these like fake

00:17:06,079 --> 00:17:09,039
book covers and which ones will work

00:17:08,079 --> 00:17:11,439
safe for people to

00:17:09,039 --> 00:17:12,799
to share work and things like that so

00:17:11,439 --> 00:17:15,760
just a nice kind of real world

00:17:12,799 --> 00:17:17,679
uh but very basic example here um so

00:17:15,760 --> 00:17:19,839
that's it so then you enter that

00:17:17,679 --> 00:17:21,120
you get this nice display here and as i

00:17:19,839 --> 00:17:22,400
mentioned there's a bunch of different

00:17:21,120 --> 00:17:24,559
modes to

00:17:22,400 --> 00:17:26,640
make this look a little bit nicer so uh

00:17:24,559 --> 00:17:28,000
next time around i will

00:17:26,640 --> 00:17:29,600
have that in the demo too where you'll

00:17:28,000 --> 00:17:30,240
actually be able to see the full the

00:17:29,600 --> 00:17:32,880
full

00:17:30,240 --> 00:17:34,080
titles there for some of those um so

00:17:32,880 --> 00:17:35,760
again a lot of different

00:17:34,080 --> 00:17:37,520
options for configuring your visuals

00:17:35,760 --> 00:17:40,160
there which is nice

00:17:37,520 --> 00:17:40,799
and then one note is that the sql client

00:17:40,160 --> 00:17:42,640
provides

00:17:40,799 --> 00:17:44,480
output in this you know real-time but

00:17:42,640 --> 00:17:46,480
read-only fashion so

00:17:44,480 --> 00:17:47,840
if you want to store results for you

00:17:46,480 --> 00:17:49,360
know report or dashboard

00:17:47,840 --> 00:17:51,760
you do need to write out to another

00:17:49,360 --> 00:17:53,760
table so this can be achieved really

00:17:51,760 --> 00:17:56,880
easily just with an insert into

00:17:53,760 --> 00:17:57,679
statement and once submitted there this

00:17:56,880 --> 00:17:59,280
will just run

00:17:57,679 --> 00:18:00,960
and store the results into that sync

00:17:59,280 --> 00:18:02,960
table directly

00:18:00,960 --> 00:18:04,559
and that is really nice because it does

00:18:02,960 --> 00:18:07,039
that instead of loading

00:18:04,559 --> 00:18:08,720
the results into the system memory so

00:18:07,039 --> 00:18:10,720
again all of this is optimized for

00:18:08,720 --> 00:18:13,760
simplicity and performance

00:18:10,720 --> 00:18:14,080
so just keeping that super easy so with

00:18:13,760 --> 00:18:15,840
that

00:18:14,080 --> 00:18:18,240
since we're a bit limited on time i

00:18:15,840 --> 00:18:20,080
actually grabbed this um

00:18:18,240 --> 00:18:21,919
these images from my one of my old

00:18:20,080 --> 00:18:23,360
co-workers who has done an amazing job

00:18:21,919 --> 00:18:26,320
contributing to this

00:18:23,360 --> 00:18:27,280
there is a really awesome flink sequel

00:18:26,320 --> 00:18:29,200
cookbook

00:18:27,280 --> 00:18:30,400
that my co-workers put together so this

00:18:29,200 --> 00:18:33,520
is where we

00:18:30,400 --> 00:18:34,559
regularly share hands-on examples and

00:18:33,520 --> 00:18:37,919
patterns and

00:18:34,559 --> 00:18:38,799
use cases for filling sql and there is

00:18:37,919 --> 00:18:40,240
so much in there

00:18:38,799 --> 00:18:42,000
i think people were contributing almost

00:18:40,240 --> 00:18:44,400
on a weekly basis for a while

00:18:42,000 --> 00:18:45,039
so you can find examples of just about

00:18:44,400 --> 00:18:48,240
everything

00:18:45,039 --> 00:18:49,760
from the most basic things to

00:18:48,240 --> 00:18:51,520
all different configurations for each

00:18:49,760 --> 00:18:52,400
different basic thing you can do to more

00:18:51,520 --> 00:18:54,240
advanced things

00:18:52,400 --> 00:18:55,760
so i definitely recommend it and i will

00:18:54,240 --> 00:18:59,039
actually have a

00:18:55,760 --> 00:19:01,120
links to that at the end as well

00:18:59,039 --> 00:19:02,799
uh just one more example there's also

00:19:01,120 --> 00:19:04,559
some really nice little demos so

00:19:02,799 --> 00:19:06,480
there's some demos in the flink sql

00:19:04,559 --> 00:19:08,640
cookbook most of them using the uh the

00:19:06,480 --> 00:19:12,080
bavaria platform there

00:19:08,640 --> 00:19:13,120
and with that um please feel free to

00:19:12,080 --> 00:19:15,520
reach out to me

00:19:13,120 --> 00:19:16,960
um i've got my my twitter i'm actually

00:19:15,520 --> 00:19:18,480
going to be taking a little bit of time

00:19:16,960 --> 00:19:20,160
off of social media just next week but i

00:19:18,480 --> 00:19:21,200
will respond this week and the week

00:19:20,160 --> 00:19:23,840
after

00:19:21,200 --> 00:19:24,640
and i've got some other mostly stream

00:19:23,840 --> 00:19:27,679
processing

00:19:24,640 --> 00:19:31,039
and nerding out on data analytics things

00:19:27,679 --> 00:19:32,559
on my medium account and website there

00:19:31,039 --> 00:19:34,080
feel free to also email me if you have

00:19:32,559 --> 00:19:36,320
questions about this

00:19:34,080 --> 00:19:38,320
and i know there's a lot on here so i

00:19:36,320 --> 00:19:41,679
actually have an easier way to grab this

00:19:38,320 --> 00:19:44,640
um here

00:19:41,679 --> 00:19:45,120
there we go i promised uh so easy way to

00:19:44,640 --> 00:19:47,440
grab it

00:19:45,120 --> 00:19:48,320
um i actually am still uploading the

00:19:47,440 --> 00:19:52,080
links right now

00:19:48,320 --> 00:19:53,840
but uh so i save save the qr code

00:19:52,080 --> 00:19:55,120
and then uh that'll send you to my

00:19:53,840 --> 00:19:56,559
website and then all of those links will

00:19:55,120 --> 00:20:00,240
be available by end of the week

00:19:56,559 --> 00:20:00,640
so and with that um thank you all oh an

00:20:00,240 --> 00:20:02,559
extra

00:20:00,640 --> 00:20:04,159
shout out to my my old co-worker marta

00:20:02,559 --> 00:20:06,400
who did some of the um

00:20:04,159 --> 00:20:07,440
all of the sql cookbook um things there

00:20:06,400 --> 00:20:09,760
so

00:20:07,440 --> 00:20:11,600
huge thank you to all of you for coming

00:20:09,760 --> 00:20:14,640
and it's been so great to see you all

00:20:11,600 --> 00:20:17,120
um in virtually anyway

00:20:14,640 --> 00:20:18,080
and a huge thank you to nina and all of

00:20:17,120 --> 00:20:21,840
the um

00:20:18,080 --> 00:20:21,840
all the conference staff as well

00:20:23,679 --> 00:20:27,120
okay thanks for your talk it's really

00:20:25,520 --> 00:20:28,880
interesting uh

00:20:27,120 --> 00:20:31,600
i want to check just the questions to

00:20:28,880 --> 00:20:36,320
see what we have there uh

00:20:31,600 --> 00:20:38,559
okay so since we have only one question

00:20:36,320 --> 00:20:39,679
it says how rich are the querying

00:20:38,559 --> 00:20:44,000
capabilities

00:20:39,679 --> 00:20:45,679
compared with normal sql

00:20:44,000 --> 00:20:47,440
what was it i missed the first part

00:20:45,679 --> 00:20:49,840
that's right how rich are the

00:20:47,440 --> 00:20:51,679
capabilities of playing sql versus

00:20:49,840 --> 00:20:54,240
normal sql

00:20:51,679 --> 00:20:55,840
oh so because it's all and if i'm

00:20:54,240 --> 00:20:56,880
understanding the question correctly um

00:20:55,840 --> 00:20:58,320
because it's all

00:20:56,880 --> 00:21:00,640
as i mentioned earlier like based on

00:20:58,320 --> 00:21:01,600
apache calcite it's

00:21:00,640 --> 00:21:03,760
it's going gonna be you're gonna have

00:21:01,600 --> 00:21:07,120
the same capabilities there as

00:21:03,760 --> 00:21:08,240
uh just ansi and standard sql so it's

00:21:07,120 --> 00:21:10,240
uh that was something that was really

00:21:08,240 --> 00:21:11,840
important is to be able to keep that um

00:21:10,240 --> 00:21:12,880
keep all of that as similar as possible

00:21:11,840 --> 00:21:13,600
on all different all those different

00:21:12,880 --> 00:21:16,400
levels

00:21:13,600 --> 00:21:17,440
so yeah and if i if i misunderstood that

00:21:16,400 --> 00:21:19,840
too feel free to

00:21:17,440 --> 00:21:21,440
um feel free to also like ping me too

00:21:19,840 --> 00:21:24,080
and i can give you more detailed

00:21:21,440 --> 00:21:24,880
uh example of that as well if you want

00:21:24,080 --> 00:21:26,720
okay

00:21:24,880 --> 00:21:29,840
uh i'm going to ask one question that i

00:21:26,720 --> 00:21:32,159
have that maybe uh

00:21:29,840 --> 00:21:33,600
can we mix these like steps in the

00:21:32,159 --> 00:21:35,679
middle let's say i want to clean

00:21:33,600 --> 00:21:37,360
some initial data just with sql and then

00:21:35,679 --> 00:21:40,320
do more stuff or in the middle

00:21:37,360 --> 00:21:42,000
or yeah yeah you should be able to and

00:21:40,320 --> 00:21:42,840
there's actually um i would definitely

00:21:42,000 --> 00:21:44,799
recommend

00:21:42,840 --> 00:21:46,640
the i'm trying to think if there's a

00:21:44,799 --> 00:21:48,480
specific example

00:21:46,640 --> 00:21:50,400
i think there is some examples of that

00:21:48,480 --> 00:21:53,120
in the cookbook

00:21:50,400 --> 00:21:54,400
but don't quote me on that yet um but

00:21:53,120 --> 00:21:55,919
that's something i can post

00:21:54,400 --> 00:21:57,520
um i'll try to find that maybe post it

00:21:55,919 --> 00:22:00,799
to twitter later

00:21:57,520 --> 00:22:03,919
um and there's also there's a couple

00:22:00,799 --> 00:22:04,240
other really good talks that do a bunch

00:22:03,919 --> 00:22:05,600
more

00:22:04,240 --> 00:22:07,280
things like that a bunch more deep dives

00:22:05,600 --> 00:22:10,400
into flink sql so

00:22:07,280 --> 00:22:11,679
there's a couple um i can also

00:22:10,400 --> 00:22:13,760
is there a good place for me to to add

00:22:11,679 --> 00:22:15,039
some of those links

00:22:13,760 --> 00:22:18,159
because i think i'm only in the private

00:22:15,039 --> 00:22:18,159
chat here so i don't think i can

00:22:18,559 --> 00:22:22,159
well i suppose but well anyway people

00:22:20,640 --> 00:22:24,000
can't follow you

00:22:22,159 --> 00:22:25,440
okay okay cool yeah because i can i can

00:22:24,000 --> 00:22:41,840
try to link you to some

00:22:25,440 --> 00:22:41,840
some more resources on that yeah

00:22:46,799 --> 00:22:48,880

YouTube URL: https://www.youtube.com/watch?v=d7q1WbLudEg


