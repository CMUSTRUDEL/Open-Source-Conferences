Title: Francesco Tisiot – Kickstart your Kafka with Faker Data
Publication date: 2021-06-24
Playlist: Berlin Buzzwords 2021 #bbuzz
Description: 
	We all love to play with the shiny toys, but an event stream with no events is a sorry sight. In this session you’ll see how to create your own streaming dataset for Apache Kafka using Python and the Faker library. You’ll learn how to create a random data producer and define the structure and rate of its message delivery. Randomly-generated data is often hilarious in its own right, and it adds just the right amount of fun to any Kafka and its integrations!

Speaker: 
Francesco Tisiot – https://2021.berlinbuzzwords.de/member/francesco-tisiot

More: https://2021.berlinbuzzwords.de/session/kickstart-your-kafka-faker-data
Captions: 
	00:00:08,480 --> 00:00:12,080
you want to start your

00:00:09,920 --> 00:00:13,599
kafka journey and the first thing that

00:00:12,080 --> 00:00:16,640
you do usually is

00:00:13,599 --> 00:00:18,480
either you install by yourself

00:00:16,640 --> 00:00:20,560
kafka on premises or in the cloud of

00:00:18,480 --> 00:00:21,199
your choice or for example user managed

00:00:20,560 --> 00:00:23,760
service

00:00:21,199 --> 00:00:25,439
like the one that my company ivan offers

00:00:23,760 --> 00:00:27,599
no matter what

00:00:25,439 --> 00:00:29,279
on-premise installed by yourself or

00:00:27,599 --> 00:00:31,119
manage at a certain point you will

00:00:29,279 --> 00:00:33,680
arrive to the situation where

00:00:31,119 --> 00:00:34,960
your kafka environment is up and running

00:00:33,680 --> 00:00:37,520
congratulations but

00:00:34,960 --> 00:00:38,320
now you may start questioning yourself

00:00:37,520 --> 00:00:41,680
well what

00:00:38,320 --> 00:00:44,640
should i do now what's my next step

00:00:41,680 --> 00:00:45,760
well if you are an experienced kafka

00:00:44,640 --> 00:00:48,320
developer

00:00:45,760 --> 00:00:49,280
you will have the perfect use case that

00:00:48,320 --> 00:00:51,920
you will

00:00:49,280 --> 00:00:54,239
use in order to feed kafka where the

00:00:51,920 --> 00:00:56,239
perfect streaming data set

00:00:54,239 --> 00:00:58,000
but on the other side if you're new to

00:00:56,239 --> 00:01:01,280
kafka we will probably

00:00:58,000 --> 00:01:04,960
end up in a situation like this

00:01:01,280 --> 00:01:05,600
white zero kafka as many other data

00:01:04,960 --> 00:01:07,360
platforms

00:01:05,600 --> 00:01:10,640
after you install or you create an

00:01:07,360 --> 00:01:13,119
instance it's empty by default

00:01:10,640 --> 00:01:15,040
and it makes really complex to

00:01:13,119 --> 00:01:16,479
understand the beauty of kafka or the

00:01:15,040 --> 00:01:19,360
beauty of any data platform

00:01:16,479 --> 00:01:20,240
if you don't have any data with kafka

00:01:19,360 --> 00:01:22,479
this is even

00:01:20,240 --> 00:01:25,280
worse because it's streaming platform so

00:01:22,479 --> 00:01:26,000
it requires a continuous flow of data in

00:01:25,280 --> 00:01:29,119
order to understand

00:01:26,000 --> 00:01:31,680
its beauty and trust me

00:01:29,119 --> 00:01:34,240
finding that kind of input data source

00:01:31,680 --> 00:01:35,920
is not easy at all

00:01:34,240 --> 00:01:38,000
so if you're new to kafka you could be

00:01:35,920 --> 00:01:40,880
in a situation where you don't have

00:01:38,000 --> 00:01:42,079
any data to test the platform with or on

00:01:40,880 --> 00:01:44,799
the other side you could be

00:01:42,079 --> 00:01:46,640
part of a company with kind of the

00:01:44,799 --> 00:01:48,799
perfect data set the perfect streaming

00:01:46,640 --> 00:01:51,840
data center could fit kafka where

00:01:48,799 --> 00:01:52,799
well but because you are trying a new

00:01:51,840 --> 00:01:55,439
technology

00:01:52,799 --> 00:01:57,280
a new vendor a new cloud provider you

00:01:55,439 --> 00:01:58,479
could have rules within your company

00:01:57,280 --> 00:02:01,360
that stop you

00:01:58,479 --> 00:02:03,119
from using that data set still i believe

00:02:01,360 --> 00:02:05,119
a lot of people in here will be

00:02:03,119 --> 00:02:06,240
programmers and the beauty of being a

00:02:05,119 --> 00:02:08,160
programmer is that

00:02:06,240 --> 00:02:10,000
we can solve this kind of problems by

00:02:08,160 --> 00:02:12,879
kind of choosing our here

00:02:10,000 --> 00:02:13,520
depending on our knowledge or our

00:02:12,879 --> 00:02:15,440
history

00:02:13,520 --> 00:02:17,599
or the history of our company we will be

00:02:15,440 --> 00:02:19,680
able to select the programming language

00:02:17,599 --> 00:02:21,280
that will help us solving the problem

00:02:19,680 --> 00:02:22,400
and i'm listing here three programming

00:02:21,280 --> 00:02:24,879
languages which

00:02:22,400 --> 00:02:26,239
have similar libraries to solve the

00:02:24,879 --> 00:02:29,760
missing data problem

00:02:26,239 --> 00:02:31,040
perl go and python we will use python

00:02:29,760 --> 00:02:33,519
today because it's

00:02:31,040 --> 00:02:35,920
widely adopted in the data world but

00:02:33,519 --> 00:02:37,120
also because it has a nice kafka python

00:02:35,920 --> 00:02:39,120
library

00:02:37,120 --> 00:02:40,319
that we can use in order to interact

00:02:39,120 --> 00:02:42,560
with kafka

00:02:40,319 --> 00:02:44,720
in order to produce data to kafka all we

00:02:42,560 --> 00:02:47,920
need to do is to install the library

00:02:44,720 --> 00:02:51,120
create a kafka producer and then

00:02:47,920 --> 00:02:51,519
tell where my kafka instance is so i'm

00:02:51,120 --> 00:02:54,000
telling

00:02:51,519 --> 00:02:55,760
look that my kafka is in broker abc

00:02:54,000 --> 00:02:56,720
broker one in this case port one two

00:02:55,760 --> 00:02:58,800
three four

00:02:56,720 --> 00:02:59,920
now it's just time to send some data so

00:02:58,800 --> 00:03:02,159
i can send

00:02:59,920 --> 00:03:04,000
a message to kafka and if i want to be

00:03:02,159 --> 00:03:07,120
sure that the message arrives on kafka

00:03:04,000 --> 00:03:09,440
i just flush it okay we know to push

00:03:07,120 --> 00:03:10,800
data to kafka but we still don't have

00:03:09,440 --> 00:03:13,840
any data

00:03:10,800 --> 00:03:16,159
but let me introduce you to faker

00:03:13,840 --> 00:03:17,440
faker is a python library that allows us

00:03:16,159 --> 00:03:19,200
to create fake data

00:03:17,440 --> 00:03:21,840
all we need to do is to install it with

00:03:19,200 --> 00:03:24,400
ppinstall faker and then start using it

00:03:21,840 --> 00:03:26,799
so we create an instance of faker and

00:03:24,400 --> 00:03:29,840
now if we need for example

00:03:26,799 --> 00:03:32,640
a fake name we just call the name method

00:03:29,840 --> 00:03:33,120
and you can see lucy it's a nice fake

00:03:32,640 --> 00:03:36,480
name

00:03:33,120 --> 00:03:37,200
if we need a fake address well address

00:03:36,480 --> 00:03:41,120
method

00:03:37,200 --> 00:03:43,200
and there we have a nice address

00:03:41,120 --> 00:03:44,159
this is just the surface of what faker

00:03:43,200 --> 00:03:47,680
can do

00:03:44,159 --> 00:03:49,760
as you can guess i'm italian so i may

00:03:47,680 --> 00:03:52,080
want to produce italian something name

00:03:49,760 --> 00:03:53,280
and addresses well i can simply localize

00:03:52,080 --> 00:03:55,760
the faker instance

00:03:53,280 --> 00:03:57,599
passing the italian parameter and now

00:03:55,760 --> 00:04:00,879
every time i call the name function

00:03:57,599 --> 00:04:02,000
i will create an italian name severino

00:04:00,879 --> 00:04:03,760
zacca nini

00:04:02,000 --> 00:04:06,319
it's an italian sunday name and the

00:04:03,760 --> 00:04:11,360
others there it's encroach milanese

00:04:06,319 --> 00:04:13,439
olivia palermo it sounds italian enough

00:04:11,360 --> 00:04:15,120
faker also has methods in order to

00:04:13,439 --> 00:04:17,440
control its behavior

00:04:15,120 --> 00:04:18,560
so for example if i want always

00:04:17,440 --> 00:04:20,959
different names

00:04:18,560 --> 00:04:22,320
i just have to prefix the name function

00:04:20,959 --> 00:04:24,639
with unique

00:04:22,320 --> 00:04:25,840
this will make faker create every time

00:04:24,639 --> 00:04:28,240
they invoke the same

00:04:25,840 --> 00:04:29,600
function a different name if on the

00:04:28,240 --> 00:04:32,080
other side

00:04:29,600 --> 00:04:33,520
i want to use fake data to for example

00:04:32,080 --> 00:04:36,240
test my platform

00:04:33,520 --> 00:04:38,000
and every time i do a test i will i want

00:04:36,240 --> 00:04:41,520
always to provide the same kind of

00:04:38,000 --> 00:04:43,199
input data set i can also obtain with

00:04:41,520 --> 00:04:46,000
faker repeatable results

00:04:43,199 --> 00:04:47,680
i just need to to fix the seed of the

00:04:46,000 --> 00:04:50,160
random of fake randomizer

00:04:47,680 --> 00:04:52,000
and faker will generate the same kind of

00:04:50,160 --> 00:04:55,520
path every time i will

00:04:52,000 --> 00:04:56,320
re-execute the same code as of now we

00:04:55,520 --> 00:04:58,479
saw just

00:04:56,320 --> 00:05:00,240
name and addresses and it's pretty poor

00:04:58,479 --> 00:05:00,960
example of fake data because it's just

00:05:00,240 --> 00:05:03,919
limited

00:05:00,960 --> 00:05:05,759
however faker has a huge list of

00:05:03,919 --> 00:05:07,759
pre-built providers and you

00:05:05,759 --> 00:05:08,960
have the url here that you can use to

00:05:07,759 --> 00:05:11,759
find the providers

00:05:08,960 --> 00:05:12,960
so we can for example create automotive

00:05:11,759 --> 00:05:17,199
data

00:05:12,960 --> 00:05:17,199
geographical data country states

00:05:18,000 --> 00:05:22,639
zip codes and whatever if we are into

00:05:20,639 --> 00:05:24,960
banking we can create a lot of

00:05:22,639 --> 00:05:26,800
for example banking transactions or

00:05:24,960 --> 00:05:30,960
stuff similar to that

00:05:26,800 --> 00:05:33,840
and we can even create fake python code

00:05:30,960 --> 00:05:34,400
but of course we cannot expect faker to

00:05:33,840 --> 00:05:37,440
cover

00:05:34,400 --> 00:05:40,560
all the possible use cases you can

00:05:37,440 --> 00:05:43,360
still film my shock when i saw

00:05:40,560 --> 00:05:44,960
that faker couldn't create fake pizza

00:05:43,360 --> 00:05:48,639
data

00:05:44,960 --> 00:05:51,600
but still faker is really easy to extend

00:05:48,639 --> 00:05:52,800
all we need to do is to import the base

00:05:51,600 --> 00:05:55,759
provider

00:05:52,800 --> 00:05:57,680
and to start declaring how we want to

00:05:55,759 --> 00:05:59,039
generate the fake data so in my case i

00:05:57,680 --> 00:06:02,240
want to create fake pizza

00:05:59,039 --> 00:06:04,160
so i need a fake pizza name array once

00:06:02,240 --> 00:06:07,840
that i declare which are the valid

00:06:04,160 --> 00:06:10,080
fake pizza names i can just create

00:06:07,840 --> 00:06:11,120
a pizza provider class which extends the

00:06:10,080 --> 00:06:13,360
base provider

00:06:11,120 --> 00:06:15,520
and within the class it's now time to

00:06:13,360 --> 00:06:18,800
define a pizza name

00:06:15,520 --> 00:06:22,080
method which returns a random choice

00:06:18,800 --> 00:06:23,759
between the available in the array now

00:06:22,080 --> 00:06:25,840
that i created the extension it's time

00:06:23,759 --> 00:06:27,759
to use it so i just add the pizza

00:06:25,840 --> 00:06:30,160
provider to my faker instance

00:06:27,759 --> 00:06:31,120
i create five pizzas like in this case

00:06:30,160 --> 00:06:34,000
by calling

00:06:31,120 --> 00:06:35,919
the fake pizza name in an array and then

00:06:34,000 --> 00:06:38,160
the beauty of

00:06:35,919 --> 00:06:40,319
python or any other language is that i

00:06:38,160 --> 00:06:41,360
can compose a complex message like a

00:06:40,319 --> 00:06:44,000
pizza order

00:06:41,360 --> 00:06:44,800
containing the id of the order the shop

00:06:44,000 --> 00:06:47,840
receiving

00:06:44,800 --> 00:06:48,960
the order itself the name of the person

00:06:47,840 --> 00:06:51,199
with the unique

00:06:48,960 --> 00:06:53,039
the same with phone number with unique

00:06:51,199 --> 00:06:54,080
and also the address where the pizza has

00:06:53,039 --> 00:06:56,080
to be sent

00:06:54,080 --> 00:06:58,160
and then the last line is adding the

00:06:56,080 --> 00:07:00,960
five pizzas that i created on top

00:06:58,160 --> 00:07:03,039
to my pizza order if everything works

00:07:00,960 --> 00:07:03,599
well you will end up with something like

00:07:03,039 --> 00:07:06,560
this

00:07:03,599 --> 00:07:08,400
where you have the id of the order the

00:07:06,560 --> 00:07:10,000
shop name receiving the order is luigi's

00:07:08,400 --> 00:07:12,720
pizza the name of the person

00:07:10,000 --> 00:07:14,080
arsenio pizzeroni boccaccio italian one

00:07:12,720 --> 00:07:15,199
and we have to deliver the pizza to

00:07:14,080 --> 00:07:18,560
novara

00:07:15,199 --> 00:07:20,800
and as you can see i didn't only create

00:07:18,560 --> 00:07:21,919
an extension to enable the creation of

00:07:20,800 --> 00:07:24,880
fake pizza names

00:07:21,919 --> 00:07:25,759
but i also added an extension to add

00:07:24,880 --> 00:07:28,400
fake

00:07:25,759 --> 00:07:30,080
additional toppings and i let this guy

00:07:28,400 --> 00:07:32,319
arseni pizzaroni boccaccio

00:07:30,080 --> 00:07:35,360
to order a nice diavola pizza with a

00:07:32,319 --> 00:07:38,319
nice banana topping on top

00:07:35,360 --> 00:07:39,199
as you can understand if we now take

00:07:38,319 --> 00:07:42,240
this code

00:07:39,199 --> 00:07:43,759
and we create a for loop around it we

00:07:42,240 --> 00:07:47,280
have a streaming data source

00:07:43,759 --> 00:07:50,400
and we can use it to feed kafka

00:07:47,280 --> 00:07:53,039
and in this case it's pizza that's silly

00:07:50,400 --> 00:07:54,479
i'm italian i can do that if you have

00:07:53,039 --> 00:07:56,400
another use case if you

00:07:54,479 --> 00:07:58,240
are working in a company you have your

00:07:56,400 --> 00:08:00,639
data set that you cannot work with

00:07:58,240 --> 00:08:02,560
but you still know which fields and what

00:08:00,639 --> 00:08:05,680
data types you want to push to kafka

00:08:02,560 --> 00:08:09,520
you can achieve the same with using

00:08:05,680 --> 00:08:11,759
faker some resources now to finish off

00:08:09,520 --> 00:08:13,199
first one faker documentation it's

00:08:11,759 --> 00:08:15,039
amazing go there

00:08:13,199 --> 00:08:16,960
check it out because it's worth your

00:08:15,039 --> 00:08:18,879
time you will learn in few minutes how

00:08:16,960 --> 00:08:19,840
to start using faker and how to extend

00:08:18,879 --> 00:08:22,800
it

00:08:19,840 --> 00:08:24,000
second thing if you want to understand

00:08:22,800 --> 00:08:27,680
how to create

00:08:24,000 --> 00:08:29,360
a fake producer for kafka using faker

00:08:27,680 --> 00:08:31,759
well i've wrote a blog post about that

00:08:29,360 --> 00:08:33,120
so you can go to ivan what's website and

00:08:31,759 --> 00:08:35,039
check it out

00:08:33,120 --> 00:08:37,120
if you don't like reading blog posts but

00:08:35,039 --> 00:08:39,039
you write you like some running code

00:08:37,120 --> 00:08:40,880
there is a public github repository that

00:08:39,039 --> 00:08:43,440
you can use in order to

00:08:40,880 --> 00:08:44,240
have in minutes a fake pizza order

00:08:43,440 --> 00:08:48,720
producer

00:08:44,240 --> 00:08:52,000
pointing to your kafka environment and

00:08:48,720 --> 00:08:54,080
last thing if you want to try kafka but

00:08:52,000 --> 00:08:56,080
you don't have kafka as i said ivan

00:08:54,080 --> 00:08:57,519
my company offers that as a managed

00:08:56,080 --> 00:09:00,000
service so i hope

00:08:57,519 --> 00:09:01,839
that in like 5-10 minutes i share with

00:09:00,000 --> 00:09:04,560
you some knowledge about

00:09:01,839 --> 00:09:06,399
kafka faker and pizzas if you have any

00:09:04,560 --> 00:09:08,880
questions regarding those i'm here to

00:09:06,399 --> 00:09:10,720
help you out

00:09:08,880 --> 00:09:12,080
thank you francesco i've never been

00:09:10,720 --> 00:09:13,839
honestly i've never been so excited

00:09:12,080 --> 00:09:15,440
about fake pizza in my life and uh

00:09:13,839 --> 00:09:16,560
streaming pizza is a concept i just

00:09:15,440 --> 00:09:18,640
never imagined

00:09:16,560 --> 00:09:20,399
uh looks uh yeah super easy to get

00:09:18,640 --> 00:09:22,640
started with i have one question for you

00:09:20,399 --> 00:09:24,959
which is about tooling around

00:09:22,640 --> 00:09:26,399
uh managing of that streaming data so

00:09:24,959 --> 00:09:28,320
you mentioned a for loop

00:09:26,399 --> 00:09:30,240
is there something you could recommend

00:09:28,320 --> 00:09:33,760
or is there is there a natural

00:09:30,240 --> 00:09:35,519
uh yeah complementary tool for

00:09:33,760 --> 00:09:37,279
controlling the flow the quantity and

00:09:35,519 --> 00:09:38,000
the timing of generating streaming data

00:09:37,279 --> 00:09:41,360
from faker

00:09:38,000 --> 00:09:43,279
well i believe you can add as many

00:09:41,360 --> 00:09:44,720
complexity as you want once you have the

00:09:43,279 --> 00:09:48,839
basic provider

00:09:44,720 --> 00:09:51,680
and uh i cannot suggest any tooling

00:09:48,839 --> 00:09:53,360
because

00:09:51,680 --> 00:09:55,279
usually it depends on what you are

00:09:53,360 --> 00:09:57,120
already using in your company

00:09:55,279 --> 00:09:58,800
the beauty of this solution is that it

00:09:57,120 --> 00:10:01,120
can be adapted to almost

00:09:58,800 --> 00:10:02,959
any solution that you have in ours so if

00:10:01,120 --> 00:10:04,959
you are building your applications

00:10:02,959 --> 00:10:06,880
using some sort of framework just add

00:10:04,959 --> 00:10:07,519
the extra dependency of faker and there

00:10:06,880 --> 00:10:12,720
you go

00:10:07,519 --> 00:10:12,720
and you can start using also kafka so

00:10:12,880 --> 00:10:16,880
since the this set of libraries doesn't

00:10:15,920 --> 00:10:18,800
impose anything

00:10:16,880 --> 00:10:21,839
i don't want to limit your imagination

00:10:18,800 --> 00:10:25,600
in what you can put on top

00:10:21,839 --> 00:10:25,600
understood thanks for that sounds very

00:10:30,839 --> 00:10:33,839
flexible

00:10:44,079 --> 00:10:46,160

YouTube URL: https://www.youtube.com/watch?v=n00rAxPSqcA


