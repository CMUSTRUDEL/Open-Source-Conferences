Title: Lightning Talk: Elias Nema - Walking Around Your Nearest Neighbors
Publication date: 2020-07-02
Playlist: Lightning Talks -  Berlin Buzzwords | MICES | Haystack – Joint Virtual Event 2020
Description: 
	Lightning talk from Berlin Buzzwords | MICES | Haystack – Joint Event 2020
Captions: 
	00:00:08,170 --> 00:00:12,670
I'm gonna be talking about nearest

00:00:11,020 --> 00:00:15,610
neighbors and we a spoiler alerts with

00:00:12,670 --> 00:00:17,590
lambda architecture but first I want to

00:00:15,610 --> 00:00:20,950
start with hi Cosette I like to post

00:00:17,590 --> 00:00:23,260
yesterday and it starts like that dense

00:00:20,950 --> 00:00:25,210
vectors or embeddings are the new oil I

00:00:23,260 --> 00:00:27,820
mean you can see how many people are

00:00:25,210 --> 00:00:29,739
talking about them but sometimes

00:00:27,820 --> 00:00:33,070
refinement costs are too high because

00:00:29,739 --> 00:00:34,360
dense vectors are dense and stirring

00:00:33,070 --> 00:00:36,160
them and searching through them might

00:00:34,360 --> 00:00:40,360
put an excessive load on your search

00:00:36,160 --> 00:00:41,950
engine so why this matters again we are

00:00:40,360 --> 00:00:45,940
doing recommendations at Oleg's group

00:00:41,950 --> 00:00:48,240
and this comes like at the price was our

00:00:45,940 --> 00:00:51,280
platform because like our platform

00:00:48,240 --> 00:00:52,720
content is fully generated by users we

00:00:51,280 --> 00:00:55,480
don't have a standard catalogue and even

00:00:52,720 --> 00:00:58,360
if it's the same item we're gonna have

00:00:55,480 --> 00:01:00,700
to esky used for the same item because

00:00:58,360 --> 00:01:02,590
they created by two different users and

00:01:00,700 --> 00:01:04,299
then we have millions of items that are

00:01:02,590 --> 00:01:07,840
added and removed daily to our platform

00:01:04,299 --> 00:01:10,420
and in recommendations we want as soon

00:01:07,840 --> 00:01:12,700
as items post it want to have

00:01:10,420 --> 00:01:15,850
recommendations for it obviously but

00:01:12,700 --> 00:01:17,469
also we want to recommend this item to

00:01:15,850 --> 00:01:21,819
the other items that's already in the

00:01:17,469 --> 00:01:25,389
catalog so our constraints is it we have

00:01:21,819 --> 00:01:27,670
embeddings for our items but it's not

00:01:25,389 --> 00:01:30,429
feasible to store this item embeddings

00:01:27,670 --> 00:01:33,460
in our search engine for many reasons it

00:01:30,429 --> 00:01:36,270
mostly technical but it's also about

00:01:33,460 --> 00:01:39,880
implementation cost and so on so we

00:01:36,270 --> 00:01:42,789
still want to use this item embeddings

00:01:39,880 --> 00:01:43,030
for our conditions which options do we

00:01:42,789 --> 00:01:47,770
have

00:01:43,030 --> 00:01:50,590
and to to see what do we need to do

00:01:47,770 --> 00:01:53,319
actually how can we avoid putting them

00:01:50,590 --> 00:01:55,359
into solar let's see what do we need to

00:01:53,319 --> 00:01:58,990
do with them I will put them into two

00:01:55,359 --> 00:02:01,450
dimensions because ok embeddings are

00:01:58,990 --> 00:02:03,100
multi-dimensional but obviously we need

00:02:01,450 --> 00:02:05,049
to have a good story here so imagine we

00:02:03,100 --> 00:02:07,869
have some embedding space with 4 items

00:02:05,049 --> 00:02:11,680
in it and then new item comes to this

00:02:07,869 --> 00:02:12,849
space ok and then obviously it it says

00:02:11,680 --> 00:02:14,980
first hey neighbor

00:02:12,849 --> 00:02:18,340
and everybody answers hey neighbor and

00:02:14,980 --> 00:02:19,890
it finds it closest neighbors so close

00:02:18,340 --> 00:02:21,990
the second third and fourth

00:02:19,890 --> 00:02:23,670
neighbors and this this would be like as

00:02:21,990 --> 00:02:26,069
the most similar items the closer is a

00:02:23,670 --> 00:02:29,370
more similar and the better the

00:02:26,069 --> 00:02:32,760
recommendation is but when this item

00:02:29,370 --> 00:02:34,920
entered this space it actually ruined

00:02:32,760 --> 00:02:37,410
this space because if we look at the

00:02:34,920 --> 00:02:39,480
previous items for the previous item

00:02:37,410 --> 00:02:42,000
without the new items the closest one

00:02:39,480 --> 00:02:43,890
was the left top left one then there was

00:02:42,000 --> 00:02:46,950
a second and a third one but actually

00:02:43,890 --> 00:02:50,910
the new one becomes now the second

00:02:46,950 --> 00:02:52,709
closest item to there to this item and

00:02:50,910 --> 00:02:54,690
then the second item because it becomes

00:02:52,709 --> 00:02:57,360
a third one and the third because the

00:02:54,690 --> 00:02:59,820
fourth one so actually this space

00:02:57,360 --> 00:03:03,660
constantly changes and we need to find

00:02:59,820 --> 00:03:07,440
some smart way to adopt to this changes

00:03:03,660 --> 00:03:09,870
in this space and I kept on high level

00:03:07,440 --> 00:03:12,239
what we do with this flow we we get the

00:03:09,870 --> 00:03:14,310
new item we calculate the neighbors for

00:03:12,239 --> 00:03:17,459
it we calculate the closest neighbors

00:03:14,310 --> 00:03:19,980
but then we take these closest neighbors

00:03:17,459 --> 00:03:21,570
and we update the neighborhood we call

00:03:19,980 --> 00:03:24,060
it neighborhood so it's it's the closest

00:03:21,570 --> 00:03:25,980
neighbors but then we recalculate the

00:03:24,060 --> 00:03:28,650
similar items for these items as well

00:03:25,980 --> 00:03:31,769
and then you can see in the bottom that

00:03:28,650 --> 00:03:33,630
the green item gets red items its

00:03:31,769 --> 00:03:36,360
recommendations for the new item but

00:03:33,630 --> 00:03:38,790
also this green item started being

00:03:36,360 --> 00:03:41,100
recommended to sum all the items in a

00:03:38,790 --> 00:03:43,230
platform and then we can actually

00:03:41,100 --> 00:03:46,260
proceed with it and store this all these

00:03:43,230 --> 00:03:49,410
items in a fast cache which we can

00:03:46,260 --> 00:03:52,739
quickly access and then speaking about

00:03:49,410 --> 00:03:57,000
the morph architectural flow we have a

00:03:52,739 --> 00:03:59,280
stream of item updates that we listen to

00:03:57,000 --> 00:04:01,950
so if the item was posted or updated or

00:03:59,280 --> 00:04:04,170
something else and then we have this

00:04:01,950 --> 00:04:07,980
application that constantly listens to

00:04:04,170 --> 00:04:10,350
the stream and it's a it's a simple

00:04:07,980 --> 00:04:12,959
application let's say and it does a job

00:04:10,350 --> 00:04:15,900
that you saw on a previous slide it

00:04:12,959 --> 00:04:17,910
calculates the nearest embeddings as a

00:04:15,900 --> 00:04:20,880
nearest neighbors and it uses Feist and

00:04:17,910 --> 00:04:23,310
it's sicko light in our case and then it

00:04:20,880 --> 00:04:25,860
actually stores these items in a fast

00:04:23,310 --> 00:04:28,050
cache and then we also have a daily bad

00:04:25,860 --> 00:04:29,640
job tour were drifting both model

00:04:28,050 --> 00:04:32,190
drifting and this embedding space

00:04:29,640 --> 00:04:33,610
drifting because like obviously this is

00:04:32,190 --> 00:04:38,409
not this or not

00:04:33,610 --> 00:04:40,479
sighs calculations and actually if you

00:04:38,409 --> 00:04:44,020
take a step back and look at all of

00:04:40,479 --> 00:04:46,479
these steps it becomes clear that it's a

00:04:44,020 --> 00:04:48,219
very classical lambda architecture that

00:04:46,479 --> 00:04:52,889
we built here with a speed layer a

00:04:48,219 --> 00:04:56,889
bachelor and seven layer that's

00:04:52,889 --> 00:04:58,719
basically it so the learnings from it is

00:04:56,889 --> 00:05:01,060
that embeddings is like it's really a

00:04:58,719 --> 00:05:02,620
great way to present information as

00:05:01,060 --> 00:05:05,349
that's probably where the field is going

00:05:02,620 --> 00:05:08,379
and the more and more people are talking

00:05:05,349 --> 00:05:10,750
about the Maddox's and more companies

00:05:08,379 --> 00:05:13,270
are using them the more products I get

00:05:10,750 --> 00:05:16,870
an embedding support and so on but still

00:05:13,270 --> 00:05:18,400
it's not a commodity and you can still

00:05:16,870 --> 00:05:20,020
find a way to use them and for that

00:05:18,400 --> 00:05:22,779
action for example with like caching and

00:05:20,020 --> 00:05:24,460
lambda architectures of course like a

00:05:22,779 --> 00:05:25,930
dis approach you will have some limited

00:05:24,460 --> 00:05:28,830
to ranking capabilities and everything

00:05:25,930 --> 00:05:33,189
else but at least you can use them and

00:05:28,830 --> 00:05:35,439
like or actually one of our companies

00:05:33,189 --> 00:05:35,800
like one of the companies in our group I

00:05:35,439 --> 00:05:40,060
Vito

00:05:35,800 --> 00:05:43,500
it actually uses things and they are

00:05:40,060 --> 00:05:46,240
storing their embeddings instincts and

00:05:43,500 --> 00:05:48,159
they they're able to produce a brute

00:05:46,240 --> 00:05:50,860
force of up to five million records

00:05:48,159 --> 00:05:53,520
usually like 1/2 million up to 5 million

00:05:50,860 --> 00:05:56,169
the brute force of this and ranking

00:05:53,520 --> 00:05:58,210
afterwards in under 10 milliseconds

00:05:56,169 --> 00:06:00,279
there is a link there but sorry it's in

00:05:58,210 --> 00:06:03,849
Russian but I'll be happy to chat about

00:06:00,279 --> 00:06:06,150
this offline and answering questions if

00:06:03,849 --> 00:06:06,150
you have

00:06:11,840 --> 00:06:13,900

YouTube URL: https://www.youtube.com/watch?v=fmi-nQRV-oA


