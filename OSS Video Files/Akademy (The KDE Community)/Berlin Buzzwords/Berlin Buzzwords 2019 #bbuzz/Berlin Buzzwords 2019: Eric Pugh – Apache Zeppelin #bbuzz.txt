Title: Berlin Buzzwords 2019: Eric Pugh – Apache Zeppelin #bbuzz
Publication date: 2019-06-20
Playlist: Berlin Buzzwords 2019 #bbuzz
Description: 
	Eric Pugh talking about "It’s a Balloon! A Blimp! No, a Dirigible! Apache Zeppelin: An ETL Engine and Data Science Notebook That Connects Programmers to Data Scientists and Business Analysts!".

Data Scientists using one set of tools, predominantly in Python or R with lots of file based data.  Engineers deploying production systems using different programming languages and primarily online databases. This is a common pattern, and leads to silos between these two groups.

In this talk, Eric will share what he’s learned in creating a project structure that will feel at home for both Data Scientists and Engineers using Apache Zeppelin and Docker. The project structure he’ll share is heavily influenced by the Cookie Cutter Data Science Project that is “A logical, reasonably standardized, but flexible project structure for doing and sharing data science work”, but embracing the richness of 20+ programming languages and data stores that Apache Zeppelin connects to.

He’ll demonstrate using Zeppelin to expose web analytics rollups, to do ETL processing, and to enrich datasets with NLP processing.

This talk will serve as as a great intro to Apache Zeppelin, and if you are already using Jupyter, will encourage you to take a look at this competitor! If you are already using Zeppelin, then you’ll be interested in how to use Zeppelin for more than just the core task of interactive data analytics, and indeed it is a great environment for rapid prototyping of the backend of many intensive data processing projects.   

Read more:
https://2019.berlinbuzzwords.de/19/session/its-balloon-blimp-no-dirigible-apache-zeppelin-etl-engine-and-data-science-notebook

About Eric Pugh:
https://2019.berlinbuzzwords.de/users/eric-pugh

Website: https://berlinbuzzwords.de/
Twitter: https://twitter.com/berlinbuzzwords
LinkedIn: https://www.linkedin.com/showcase/berlin-buzzwords/ 
Reddit: https://www.reddit.com/r/berlinbuzzwords/
Captions: 
	00:00:06,870 --> 00:00:11,950
excellent all right thank you everybody

00:00:09,099 --> 00:00:13,690
for joining me it's tough being right

00:00:11,950 --> 00:00:15,580
after

00:00:13,690 --> 00:00:18,070
our and I know it's a little warm in

00:00:15,580 --> 00:00:21,310
here but I really appreciate you guys

00:00:18,070 --> 00:00:24,490
coming I looked at my title and I

00:00:21,310 --> 00:00:25,599
realized I must seem very excited to be

00:00:24,490 --> 00:00:30,189
here because there's a lot of

00:00:25,599 --> 00:00:32,050
explanation points in my slide title so

00:00:30,189 --> 00:00:35,410
excited to kind of spend the next 40

00:00:32,050 --> 00:00:39,070
minutes with you guys so so this is

00:00:35,410 --> 00:00:41,230
Apache Zeppelin and I want to thank you

00:00:39,070 --> 00:00:44,530
all for sort of going out a little bit

00:00:41,230 --> 00:00:47,199
on a flyer and looking at learning about

00:00:44,530 --> 00:00:51,489
a technology that I think is a really

00:00:47,199 --> 00:00:55,629
exciting Apache project that is bringing

00:00:51,489 --> 00:01:00,579
some new ideas to the open source data

00:00:55,629 --> 00:01:03,579
notebook field and so and that's Apache

00:01:00,579 --> 00:01:04,900
Zeppelin I think I also really like

00:01:03,579 --> 00:01:08,380
Apache Zeppelin because I thought they

00:01:04,900 --> 00:01:10,240
had a great logo so always like that so

00:01:08,380 --> 00:01:13,900
I want to jump into the presentation but

00:01:10,240 --> 00:01:17,140
before I do briefly let you know who I

00:01:13,900 --> 00:01:20,530
am so I work at open source connections

00:01:17,140 --> 00:01:23,530
and we're a search consultancy whose

00:01:20,530 --> 00:01:26,410
mission is empowering search teams and

00:01:23,530 --> 00:01:28,420
what that means a lot of the time is

00:01:26,410 --> 00:01:29,650
that we're working with search teams and

00:01:28,420 --> 00:01:31,720
we're working on trying to get them to

00:01:29,650 --> 00:01:33,880
collaborate with each other better and

00:01:31,720 --> 00:01:36,040
we're often working to try and break

00:01:33,880 --> 00:01:39,550
down some of the barriers that exist

00:01:36,040 --> 00:01:41,740
inside of organizations because as I'm

00:01:39,550 --> 00:01:42,670
sure you know search is very much a team

00:01:41,740 --> 00:01:46,000
sport

00:01:42,670 --> 00:01:48,850
it's not an individual sport and so

00:01:46,000 --> 00:01:52,900
trying to break down barriers is part of

00:01:48,850 --> 00:01:54,640
what made me find Apache Zeppelin I was

00:01:52,900 --> 00:01:56,650
just adding it up I've been a member of

00:01:54,640 --> 00:01:59,710
the Apache Software Foundation for more

00:01:56,650 --> 00:02:01,800
than a decade and I co-authored the

00:01:59,710 --> 00:02:05,800
first book on solar back in the

00:02:01,800 --> 00:02:08,560
mid-2000s if you can imagine that this

00:02:05,800 --> 00:02:11,050
is my first time to Berlin buzzwords and

00:02:08,560 --> 00:02:13,900
I'm very excited to be here because I

00:02:11,050 --> 00:02:16,180
love that the themes of scale and stream

00:02:13,900 --> 00:02:18,909
are a big part of building a really

00:02:16,180 --> 00:02:21,310
great search experience so thank you

00:02:18,909 --> 00:02:23,080
very much for coming I'll be here for

00:02:21,310 --> 00:02:25,810
the my seas conference on Wednesday as

00:02:23,080 --> 00:02:27,930
well so look forward to meeting more of

00:02:25,810 --> 00:02:27,930
you

00:02:29,470 --> 00:02:36,170
so why should you look at Apache

00:02:33,590 --> 00:02:39,080
Zeppelin right if you look at that

00:02:36,170 --> 00:02:42,380
Google Trends analysis between Jupiter

00:02:39,080 --> 00:02:46,489
and Apache Zeppelin it appears to sell a

00:02:42,380 --> 00:02:48,250
very daunting story right quick show of

00:02:46,489 --> 00:02:50,930
hands how many people use Jupiter

00:02:48,250 --> 00:02:52,340
alright how many people are all is

00:02:50,930 --> 00:02:54,890
everybody familiar with the data

00:02:52,340 --> 00:02:58,610
notebook what that means okay

00:02:54,890 --> 00:03:02,500
mostly I'll give a real quick intro to

00:02:58,610 --> 00:03:06,350
it in a moment but Jupiter is the

00:03:02,500 --> 00:03:08,810
800-pound gorilla of the open source

00:03:06,350 --> 00:03:10,910
data notebooks right and you could see

00:03:08,810 --> 00:03:13,310
that there's been a lot of interest in

00:03:10,910 --> 00:03:15,019
it while Zeppelin has been a challenger

00:03:13,310 --> 00:03:17,959
has sort of been bumping around with a

00:03:15,019 --> 00:03:19,340
little bit of interest both projects

00:03:17,959 --> 00:03:22,910
have actually been around for quite a

00:03:19,340 --> 00:03:24,650
few years and so I'm hoping to kind of

00:03:22,910 --> 00:03:27,650
show you some reasons that you might

00:03:24,650 --> 00:03:31,609
want to go take a chance on the red line

00:03:27,650 --> 00:03:33,980
instead of the blue line I think that

00:03:31,609 --> 00:03:36,230
one of the so one of the things that

00:03:33,980 --> 00:03:39,500
really led me to Zeppelin is I feel like

00:03:36,230 --> 00:03:43,400
Jupiter has maybe missed a little bit

00:03:39,500 --> 00:03:47,109
the point of data notebooks right it's a

00:03:43,400 --> 00:03:49,100
very powerful tool for letting

00:03:47,109 --> 00:03:53,150
non-programmers start interacting with

00:03:49,100 --> 00:03:56,750
data right able to load CSV able to step

00:03:53,150 --> 00:03:59,389
right some basic code share things right

00:03:56,750 --> 00:04:02,690
working in a working sort of a friendly

00:03:59,389 --> 00:04:05,780
web environment but I think that that

00:04:02,690 --> 00:04:08,060
mentality that I am a data scientist or

00:04:05,780 --> 00:04:11,139
a business analyst or I'm doing some

00:04:08,060 --> 00:04:15,170
sort of data project in isolation is

00:04:11,139 --> 00:04:20,450
really thinking from 10 years ago not

00:04:15,170 --> 00:04:22,760
thinking of today right where the value

00:04:20,450 --> 00:04:24,470
of a data notebook is not just in

00:04:22,760 --> 00:04:27,560
organizing your thoughts and making

00:04:24,470 --> 00:04:30,889
things reproducible but really in the

00:04:27,560 --> 00:04:32,870
sharing your ideas and facilitating

00:04:30,889 --> 00:04:36,919
discussions across multiple groups of

00:04:32,870 --> 00:04:38,659
people in a world where typically we

00:04:36,919 --> 00:04:39,800
don't all work together in the same

00:04:38,659 --> 00:04:41,750
office we might

00:04:39,800 --> 00:04:43,940
be in different locations we might be in

00:04:41,750 --> 00:04:45,800
different time zones we have different

00:04:43,940 --> 00:04:48,560
sets of skills and we need a way of

00:04:45,800 --> 00:04:51,110
coming together sort of on the same

00:04:48,560 --> 00:04:55,310
level to talk about data and what we're

00:04:51,110 --> 00:04:57,319
trying to accomplish so so the value of

00:04:55,310 --> 00:05:01,520
these data mote notebooks is breaking

00:04:57,319 --> 00:05:04,310
down those barriers so standard clipart

00:05:01,520 --> 00:05:07,610
type image right there but you know I

00:05:04,310 --> 00:05:11,930
can personally attest having visited

00:05:07,610 --> 00:05:15,470
many organizations where I see the data

00:05:11,930 --> 00:05:18,919
science data scientist data science team

00:05:15,470 --> 00:05:21,319
very much separated off in one corner

00:05:18,919 --> 00:05:23,900
over here and the rest of the

00:05:21,319 --> 00:05:27,409
organization somewhere else your search

00:05:23,900 --> 00:05:29,419
team your data engineering team the

00:05:27,409 --> 00:05:32,960
people managing the ETL pipelines

00:05:29,419 --> 00:05:34,789
they're very very separated and what

00:05:32,960 --> 00:05:37,610
happens that I often see is your data

00:05:34,789 --> 00:05:38,960
science team builds capabilities and

00:05:37,610 --> 00:05:42,289
skills and technologies and platforms

00:05:38,960 --> 00:05:45,860
that go in one direction say lots of

00:05:42,289 --> 00:05:47,990
Python lots of are right lots of those

00:05:45,860 --> 00:05:51,259
sorts of tools whereas maybe the

00:05:47,990 --> 00:05:55,819
engineering team is using Java or Scala

00:05:51,259 --> 00:05:58,669
or maybe lots of dotnet or other other

00:05:55,819 --> 00:06:01,279
languages right and so what happens is

00:05:58,669 --> 00:06:04,039
when the data science team comes up with

00:06:01,279 --> 00:06:06,289
a great new algorithm change or maybe a

00:06:04,039 --> 00:06:09,139
way of enriching our data to make it

00:06:06,289 --> 00:06:11,779
more usable to solve problems they'll

00:06:09,139 --> 00:06:13,699
come up with those designs but then we

00:06:11,779 --> 00:06:16,190
basically throw them over the wall and

00:06:13,699 --> 00:06:18,590
have to rebuild them from scratch as

00:06:16,190 --> 00:06:20,509
part of the engineering team and I think

00:06:18,590 --> 00:06:25,819
it's because these two groups are so

00:06:20,509 --> 00:06:29,719
separated and Jupiter by virtue of sort

00:06:25,819 --> 00:06:32,120
of being a very Python specific very I

00:06:29,719 --> 00:06:34,490
just kind of run it in my laptop or in

00:06:32,120 --> 00:06:37,630
my little environment not really meant

00:06:34,490 --> 00:06:42,110
with sharing as a first-class concern

00:06:37,630 --> 00:06:43,880
continues that bad habit of separating

00:06:42,110 --> 00:06:51,919
different teams instead of helping

00:06:43,880 --> 00:06:53,360
people collaborate so here's you what I

00:06:51,919 --> 00:06:56,259
hope is part of the saloon

00:06:53,360 --> 00:06:58,789
so Zeppelin helps me foster

00:06:56,259 --> 00:07:02,330
collaboration because it removes some of

00:06:58,789 --> 00:07:04,550
the barriers between teams to sharing

00:07:02,330 --> 00:07:07,460
and today I want to show you a couple of

00:07:04,550 --> 00:07:10,729
different features and spend some time

00:07:07,460 --> 00:07:12,830
talking about them and then see if maybe

00:07:10,729 --> 00:07:13,490
any of this is a good fit for your team

00:07:12,830 --> 00:07:14,900
okay

00:07:13,490 --> 00:07:16,430
I'm going to try and make sure to leave

00:07:14,900 --> 00:07:18,800
plenty of time at the end for questions

00:07:16,430 --> 00:07:24,319
but you're also welcome to shout them

00:07:18,800 --> 00:07:25,639
out as we go okay said I wasn't sure how

00:07:24,319 --> 00:07:27,830
many people would show up at this

00:07:25,639 --> 00:07:31,639
conference with laptops but I went ahead

00:07:27,830 --> 00:07:35,780
and put up a Zeppelin instance that is

00:07:31,639 --> 00:07:38,300
public it's shared with everybody so be

00:07:35,780 --> 00:07:39,770
kind and don't delete things I'll leave

00:07:38,300 --> 00:07:42,620
that up for a couple of days and I'll

00:07:39,770 --> 00:07:44,810
tweet the URL after this if anyone wants

00:07:42,620 --> 00:07:45,289
to play with some Zeppelin and interact

00:07:44,810 --> 00:07:49,580
with it

00:07:45,289 --> 00:07:53,270
okay so we're gonna look at a couple of

00:07:49,580 --> 00:07:55,759
things this morning so we're gonna do

00:07:53,270 --> 00:07:57,409
the spark hello world which for those of

00:07:55,759 --> 00:07:59,560
you who aren't familiar with what a data

00:07:57,409 --> 00:08:02,150
notebook is it's pretty self-explanatory

00:07:59,560 --> 00:08:05,240
you'll you'll you'll understand it and

00:08:02,150 --> 00:08:07,699
for those who've used Jupiter right

00:08:05,240 --> 00:08:10,580
it'll show you sort of how similar in

00:08:07,699 --> 00:08:15,050
many ways these two technologies are but

00:08:10,580 --> 00:08:16,849
then I want to show you how Sepp 'ln was

00:08:15,050 --> 00:08:19,190
built with the idea that there's many

00:08:16,849 --> 00:08:21,650
different coding languages that people

00:08:19,190 --> 00:08:23,509
want to use and so it supports sort of a

00:08:21,650 --> 00:08:27,199
variety of different languages for

00:08:23,509 --> 00:08:30,469
manipulating data and then of course for

00:08:27,199 --> 00:08:32,449
anyone who is a hardcore data scientist

00:08:30,469 --> 00:08:35,029
right they're gonna say I'm not gonna

00:08:32,449 --> 00:08:38,120
shift my platform until you give me

00:08:35,029 --> 00:08:41,659
Panda right so will them I'll

00:08:38,120 --> 00:08:45,140
demonstrate how pandas works well inside

00:08:41,659 --> 00:08:46,459
of Zeppelin cron to automate some

00:08:45,140 --> 00:08:50,510
features is one of my favorite things

00:08:46,459 --> 00:08:52,190
and then touch on how do we manage our

00:08:50,510 --> 00:08:54,260
notebooks if we're starting to share

00:08:52,190 --> 00:08:56,089
them in a more team environment how do

00:08:54,260 --> 00:08:58,610
we do revisions and manage them and

00:08:56,089 --> 00:09:01,399
share them around and then I'm gonna

00:08:58,610 --> 00:09:03,110
show off the solar interpreter and then

00:09:01,399 --> 00:09:05,360
show you some examples of some

00:09:03,110 --> 00:09:06,750
visualizations like what you might have

00:09:05,360 --> 00:09:08,189
done in Jupiter

00:09:06,750 --> 00:09:13,319
Zeppelin just to kind of whet your

00:09:08,189 --> 00:09:21,720
appetite alright so let's go ahead and

00:09:13,319 --> 00:09:24,839
hopefully live coding will work how's

00:09:21,720 --> 00:09:25,500
that screen okay excellent thank you

00:09:24,839 --> 00:09:29,670
very much

00:09:25,500 --> 00:09:32,430
all right so so okay so let's go ahead

00:09:29,670 --> 00:09:35,069
and I'm just gonna go ahead and grab the

00:09:32,430 --> 00:09:35,639
basic hello world demo that comes with

00:09:35,069 --> 00:09:38,519
Zeppelin

00:09:35,639 --> 00:09:41,399
alright so Zeppelin unlike Jupiter

00:09:38,519 --> 00:09:43,589
Zeppelin was originally built with the

00:09:41,399 --> 00:09:46,199
idea that we need a better interface for

00:09:43,589 --> 00:09:48,810
doing spark people use spark here right

00:09:46,199 --> 00:09:51,839
and spark can be kind of a pain to

00:09:48,810 --> 00:09:54,300
submit the job edit it right it could be

00:09:51,839 --> 00:09:58,160
a little bit cumbersome so Zeppelin

00:09:54,300 --> 00:10:02,790
really was started with the idea that

00:09:58,160 --> 00:10:05,250
you would be running spark right as a

00:10:02,790 --> 00:10:06,959
first-class citizen and so I'll go ahead

00:10:05,250 --> 00:10:10,230
and I'm just gonna run all these

00:10:06,959 --> 00:10:11,670
paragraphs and this may look very

00:10:10,230 --> 00:10:13,949
similar to those of you who've used

00:10:11,670 --> 00:10:15,600
Jupiter which is here is a paragraph a

00:10:13,949 --> 00:10:19,199
text that gets rendered and displayed

00:10:15,600 --> 00:10:22,319
and I've already run this so it runs

00:10:19,199 --> 00:10:24,149
pretty fast but you can kind of see do

00:10:22,319 --> 00:10:27,360
you see that the code is actually being

00:10:24,149 --> 00:10:30,149
submitted to spark being run and we're

00:10:27,360 --> 00:10:34,019
displaying the output right and I can

00:10:30,149 --> 00:10:42,839
actually go ahead and change this code

00:10:34,019 --> 00:10:45,059
right here on the fly so I'm gonna go

00:10:42,839 --> 00:10:50,579
ahead and resubmit that change and we

00:10:45,059 --> 00:10:52,620
should see you know debugging because

00:10:50,579 --> 00:10:54,629
the print statement ran inside of spark

00:10:52,620 --> 00:10:56,910
of course if that's what I get for

00:10:54,629 --> 00:10:59,790
translation on the fly so we're running

00:10:56,910 --> 00:11:03,600
right here just a simple spark job to

00:10:59,790 --> 00:11:06,720
grab a data file of banking information

00:11:03,600 --> 00:11:08,370
right and we build a data frame sort of

00:11:06,720 --> 00:11:12,300
standard data frame and make it

00:11:08,370 --> 00:11:16,290
available now what's nice is that often

00:11:12,300 --> 00:11:18,630
the person who is creating these complex

00:11:16,290 --> 00:11:19,810
data frames and loading the data from

00:11:18,630 --> 00:11:22,630
CSV or

00:11:19,810 --> 00:11:25,350
we're getting the data is not the person

00:11:22,630 --> 00:11:27,970
who wants to look at that data and

00:11:25,350 --> 00:11:30,820
visually work with it and identify it

00:11:27,970 --> 00:11:33,250
right so the great thing about Zeppelin

00:11:30,820 --> 00:11:35,380
is it gives us an environment where we

00:11:33,250 --> 00:11:39,339
can bring together multiple techniques

00:11:35,380 --> 00:11:43,120
together so here is an example I'm gonna

00:11:39,339 --> 00:11:45,610
go ahead and in in the Zeppelin world

00:11:43,120 --> 00:11:49,150
you have this sort of percent SQL or a

00:11:45,610 --> 00:11:52,150
percent spark or percent JA Python or

00:11:49,150 --> 00:11:54,670
percent sequel that tells you hey this

00:11:52,150 --> 00:11:57,610
block of text is all sequel so I'm gonna

00:11:54,670 --> 00:12:01,080
go ahead and run it and you can see it

00:11:57,610 --> 00:12:03,970
ran and there goes my sequel queries and

00:12:01,080 --> 00:12:07,120
obviously we can build some basic

00:12:03,970 --> 00:12:09,370
analytics capabilities er inputs and

00:12:07,120 --> 00:12:14,110
forms right let's say I'm only

00:12:09,370 --> 00:12:19,600
interested in EM I'm only interested in

00:12:14,110 --> 00:12:21,040
looking at people up to age 25 and there

00:12:19,600 --> 00:12:24,280
you can see I've changed around my

00:12:21,040 --> 00:12:27,130
report I can also look at my data in

00:12:24,280 --> 00:12:31,839
various ways so here is a tabular format

00:12:27,130 --> 00:12:34,089
right there's a bar chart pie chart all

00:12:31,839 --> 00:12:36,339
sorts of different ways of visualizing

00:12:34,089 --> 00:12:39,040
them and this is one of the things that

00:12:36,339 --> 00:12:42,190
I liked about Zeppelin was that the idea

00:12:39,040 --> 00:12:44,740
of visualizations was was sort of came

00:12:42,190 --> 00:12:47,230
as part of the package right you can

00:12:44,740 --> 00:12:48,730
extend it with matplotlib and all of the

00:12:47,230 --> 00:12:51,610
other sort of tools that you may have

00:12:48,730 --> 00:12:54,250
used in out of Jupiter but Zeppelin says

00:12:51,610 --> 00:12:57,580
hey we understand how to visualize

00:12:54,250 --> 00:12:59,500
things and many different sources of

00:12:57,580 --> 00:13:02,110
data can be visualized through these

00:12:59,500 --> 00:13:03,640
tools and so there's lots of different

00:13:02,110 --> 00:13:06,250
I'll show you some great visualizations

00:13:03,640 --> 00:13:10,180
at the end of this here's another little

00:13:06,250 --> 00:13:12,550
example right I can go ahead and you

00:13:10,180 --> 00:13:14,080
know put in some structured data so

00:13:12,550 --> 00:13:16,450
that's cool right that's kind of

00:13:14,080 --> 00:13:21,130
jupiter-like and kind of basically what

00:13:16,450 --> 00:13:22,630
a data notebook typically does but you

00:13:21,130 --> 00:13:25,360
know it could be nice to help me share

00:13:22,630 --> 00:13:27,040
in share information alright so I'm

00:13:25,360 --> 00:13:32,280
going to go back to my bar chart here

00:13:27,040 --> 00:13:32,280
and so link this paragraph

00:13:32,389 --> 00:13:39,259
and now I've got a unique link right

00:13:35,660 --> 00:13:41,959
here that I can deploy so Zeppelin is

00:13:39,259 --> 00:13:43,790
definitely heavier than Jupiter right

00:13:41,959 --> 00:13:46,220
like there it you know you wouldn't

00:13:43,790 --> 00:13:48,589
necessarily run it on your laptop right

00:13:46,220 --> 00:13:50,989
if it's just you so there's a little

00:13:48,589 --> 00:13:53,420
more work to deploying it but it also

00:13:50,989 --> 00:13:55,999
means that it makes it really easy I can

00:13:53,420 --> 00:13:58,339
take this URL I can tweet it I can email

00:13:55,999 --> 00:14:01,279
it to it and someone else can jump in

00:13:58,339 --> 00:14:03,860
and come and see this at this report and

00:14:01,279 --> 00:14:05,749
they can manipulate and mess around with

00:14:03,860 --> 00:14:08,749
it you can see here we're changing the

00:14:05,749 --> 00:14:11,029
data right right there and it's querying

00:14:08,749 --> 00:14:14,779
underneath and this could be great if

00:14:11,029 --> 00:14:16,910
you want to expose some knobs and dials

00:14:14,779 --> 00:14:18,949
for playing with the data to somebody

00:14:16,910 --> 00:14:21,259
but maybe you don't want to give them

00:14:18,949 --> 00:14:25,879
the raw sequel statements to manipulate

00:14:21,259 --> 00:14:28,249
right makes sense folks sad so yeah so

00:14:25,879 --> 00:14:31,459
that's one of the things that I really

00:14:28,249 --> 00:14:34,369
like about Zeppelin is this idea that I

00:14:31,459 --> 00:14:36,919
could share individual reports drop them

00:14:34,369 --> 00:14:40,699
into an iframe you can also go ahead and

00:14:36,919 --> 00:14:42,949
you know take the entire report and make

00:14:40,699 --> 00:14:45,589
it you know the entire webpage and make

00:14:42,949 --> 00:14:47,660
it a report and then just share the link

00:14:45,589 --> 00:14:52,669
of the entire webpage and people can

00:14:47,660 --> 00:14:55,100
pull that up as well Sam so sharing so

00:14:52,669 --> 00:14:57,709
that's kind of the quick hello world for

00:14:55,100 --> 00:15:01,549
Zeppelin me there we go we'll go back to

00:14:57,709 --> 00:15:05,569
default that's sort of the quick hello

00:15:01,549 --> 00:15:08,689
world on Zeppelin sim so I earlier

00:15:05,569 --> 00:15:10,999
talked about the fact that Zeppelin

00:15:08,689 --> 00:15:13,549
supports multiple languages right right

00:15:10,999 --> 00:15:16,069
here you're looking at scala right this

00:15:13,549 --> 00:15:19,189
is just gala code right here but just to

00:15:16,069 --> 00:15:22,699
prove to you that we can run multiple

00:15:19,189 --> 00:15:26,720
languages here is hello war hello world

00:15:22,699 --> 00:15:29,149
in four different languages so I'll go

00:15:26,720 --> 00:15:31,160
ahead and write there's my groovy right

00:15:29,149 --> 00:15:34,579
so I can write code in groovy I can

00:15:31,160 --> 00:15:37,189
write code obviously in Python I even

00:15:34,579 --> 00:15:40,249
have a shell interpreter which is always

00:15:37,189 --> 00:15:41,929
fun I can do LS - al H and you know look

00:15:40,249 --> 00:15:43,579
at your keys and there's a bunch of

00:15:41,929 --> 00:15:44,350
security credentials you can add to that

00:15:43,579 --> 00:15:46,690
and

00:15:44,350 --> 00:15:48,640
and there is and you'll notice it runs a

00:15:46,690 --> 00:15:51,010
little slower because there is my spark

00:15:48,640 --> 00:15:55,780
job right so that's like four different

00:15:51,010 --> 00:15:57,430
languages that you can play with and you

00:15:55,780 --> 00:16:00,010
know as I mentioned earlier Zeppelin

00:15:57,430 --> 00:16:02,500
really started out focusing on the spark

00:16:00,010 --> 00:16:04,990
and being a near face of Skaar spark but

00:16:02,500 --> 00:16:09,670
then lots of people wanted Python and

00:16:04,990 --> 00:16:11,020
are so those are both sort of languages

00:16:09,670 --> 00:16:14,290
that have full support throughout

00:16:11,020 --> 00:16:17,710
Zeppelin okay and then there's a bunch

00:16:14,290 --> 00:16:21,370
of other languages sim so so that that

00:16:17,710 --> 00:16:24,850
that that's okay right let's go ahead

00:16:21,370 --> 00:16:28,660
and let's look at that original hello

00:16:24,850 --> 00:16:31,180
world that I showed you in the spark

00:16:28,660 --> 00:16:35,620
version right let's go ahead and

00:16:31,180 --> 00:16:39,490
reimplemented in in in in Python using

00:16:35,620 --> 00:16:41,980
pandas right so I'm running this as a

00:16:39,490 --> 00:16:43,900
docker image so I have no data in it so

00:16:41,980 --> 00:16:47,290
I'm gonna go ahead and just run a shell

00:16:43,900 --> 00:16:50,410
command and go and grab some date off

00:16:47,290 --> 00:16:54,550
the internet and drop it into my local

00:16:50,410 --> 00:16:57,550
environment and then you guys can see

00:16:54,550 --> 00:16:59,740
that yeah so and then we'll go ahead and

00:16:57,550 --> 00:17:01,780
we're loading all of the data

00:16:59,740 --> 00:17:04,150
independence right so this should look

00:17:01,780 --> 00:17:07,660
very familiar to those of you who've

00:17:04,150 --> 00:17:10,860
worked with Jupiter and pytho use pandas

00:17:07,660 --> 00:17:14,260
a lot all of that is acceptable to here

00:17:10,860 --> 00:17:17,950
but you notice here's sort of a not

00:17:14,260 --> 00:17:20,320
particularly pretty output right I sort

00:17:17,950 --> 00:17:22,990
of just the print to the the console

00:17:20,320 --> 00:17:28,650
that pad that Python does but we can go

00:17:22,990 --> 00:17:32,680
ahead and because we're because Zeppelin

00:17:28,650 --> 00:17:35,890
understands that a Python or a panda's

00:17:32,680 --> 00:17:38,920
data frame is a data frame we can go

00:17:35,890 --> 00:17:40,630
ahead and we can use sequel statements

00:17:38,920 --> 00:17:43,260
against it so I'm going to go ahead and

00:17:40,630 --> 00:17:46,120
just run some sequel statements and

00:17:43,260 --> 00:17:48,720
they're my data comes back in a nice

00:17:46,120 --> 00:17:48,720
pretty way

00:17:51,540 --> 00:17:57,330
so there's a whole bunch of data right

00:17:53,490 --> 00:18:01,560
so technically what I was running was

00:17:57,330 --> 00:18:04,200
the Python sequel interpreter under the

00:18:01,560 --> 00:18:06,390
covers but it's smart enough to figure

00:18:04,200 --> 00:18:10,230
out yes that's a sequel statement I know

00:18:06,390 --> 00:18:12,090
what the rates object is and that rates

00:18:10,230 --> 00:18:14,820
object was created above and now

00:18:12,090 --> 00:18:19,200
accessible to here and so if I scroll

00:18:14,820 --> 00:18:21,810
down here you can see do these two

00:18:19,200 --> 00:18:24,000
sequel statements look pretty familiar

00:18:21,810 --> 00:18:26,580
right they're the same one from the

00:18:24,000 --> 00:18:28,920
spark one however instead of selecting

00:18:26,580 --> 00:18:31,080
from the bank data structure I'm

00:18:28,920 --> 00:18:35,190
grabbing the one that I loaded in pandas

00:18:31,080 --> 00:18:44,610
the Python one so let's go ahead and let

00:18:35,190 --> 00:18:46,230
me prove to you that it works and so

00:18:44,610 --> 00:18:50,160
there we're loading up data there and

00:18:46,230 --> 00:18:52,380
again the same sequel syntax here but

00:18:50,160 --> 00:18:55,350
instead of going against our spark

00:18:52,380 --> 00:18:57,360
cluster with sparks equal over that big

00:18:55,350 --> 00:19:03,270
data frame we're just working with our

00:18:57,360 --> 00:19:05,400
local data so the point of this is to

00:19:03,270 --> 00:19:07,560
sort of highlight that you know no

00:19:05,400 --> 00:19:09,720
matter how you approach data whether you

00:19:07,560 --> 00:19:11,550
approach it from the Python CSV and I'm

00:19:09,720 --> 00:19:14,430
gonna use pandas and numpy and tools

00:19:11,550 --> 00:19:17,250
like that to be manipulating it or if I

00:19:14,430 --> 00:19:20,370
need to bring out the big guns and go to

00:19:17,250 --> 00:19:25,650
spark I can do that in the same data

00:19:20,370 --> 00:19:28,640
science notebook okay so this probably

00:19:25,650 --> 00:19:32,940
though brings up some questions like

00:19:28,640 --> 00:19:37,380
security and like access to data etc

00:19:32,940 --> 00:19:39,150
right so I'm not gonna go super deep

00:19:37,380 --> 00:19:42,810
into it but you notice that I'm logged

00:19:39,150 --> 00:19:45,270
in to this version of Zeppelin as an

00:19:42,810 --> 00:19:47,550
anonymous user so one of the things that

00:19:45,270 --> 00:19:49,170
I liked about Zeppelin over Jupiter was

00:19:47,550 --> 00:19:52,410
the idea that in a lot of environments

00:19:49,170 --> 00:19:54,870
setting up access controls right we want

00:19:52,410 --> 00:19:58,560
these people in this LDAP Group to have

00:19:54,870 --> 00:20:01,110
access to this database right and you

00:19:58,560 --> 00:20:02,970
know in the Jupiter world you're often

00:20:01,110 --> 00:20:04,680
just giving people like here's the

00:20:02,970 --> 00:20:05,460
here's the connection string and just

00:20:04,680 --> 00:20:07,950
make your own

00:20:05,460 --> 00:20:10,289
connection to the database but in the

00:20:07,950 --> 00:20:12,809
Zeppelin world we can go ahead and set

00:20:10,289 --> 00:20:15,240
up credentials for people that are

00:20:12,809 --> 00:20:18,179
backed by Active Directory we can set up

00:20:15,240 --> 00:20:20,039
single sign-on you can have access to

00:20:18,179 --> 00:20:22,440
different interpreters or different

00:20:20,039 --> 00:20:24,270
notebooks depending on who you are you

00:20:22,440 --> 00:20:26,039
can have private notebooks you can have

00:20:24,270 --> 00:20:29,520
public notebooks that you share around

00:20:26,039 --> 00:20:32,190
so all of the like who is messing what

00:20:29,520 --> 00:20:34,799
what data and how are they messing with

00:20:32,190 --> 00:20:37,770
it is sort of thought about in this in

00:20:34,799 --> 00:20:40,080
the Zeppelin environment the other thing

00:20:37,770 --> 00:20:42,270
that is also thought about in the

00:20:40,080 --> 00:20:44,460
Zeppelin environment is that in this

00:20:42,270 --> 00:20:49,799
sort of very simple demo that I'm giving

00:20:44,460 --> 00:20:52,200
right when I create a REITs object right

00:20:49,799 --> 00:20:54,240
here it's accessible from all my other

00:20:52,200 --> 00:20:56,159
notebooks right and it's actually

00:20:54,240 --> 00:20:59,730
accessible from anyone who messes it's a

00:20:56,159 --> 00:21:03,270
global variable right but I can set it

00:20:59,730 --> 00:21:04,649
up where my objects are specific to me

00:21:03,270 --> 00:21:07,500
so if we're in a shared environment

00:21:04,649 --> 00:21:09,659
where you're loading up a rates object

00:21:07,500 --> 00:21:11,610
I'm loading up my own rates data we

00:21:09,659 --> 00:21:14,100
wouldn't want them to Clyde together and

00:21:11,610 --> 00:21:21,029
so it takes care of all of all of that

00:21:14,100 --> 00:21:23,220
so so so authentication authorization is

00:21:21,029 --> 00:21:27,600
sort of a first-class citizen and it's

00:21:23,220 --> 00:21:30,299
all carefully thought-out and you know

00:21:27,600 --> 00:21:33,240
it addresses a lot of people's concerns

00:21:30,299 --> 00:21:37,919
about hey here's all the data go explore

00:21:33,240 --> 00:21:39,929
and do what you want to do so so let me

00:21:37,919 --> 00:21:43,409
show you something else that I find that

00:21:39,929 --> 00:21:44,850
I find often very useful so Krong right

00:21:43,409 --> 00:21:45,990
we all remember do you have question

00:21:44,850 --> 00:21:48,179
okay

00:21:45,990 --> 00:21:52,710
we all remember cron right it's a great

00:21:48,179 --> 00:21:56,010
tool right for running processes so I'm

00:21:52,710 --> 00:22:00,059
gonna go ahead and turn cron back on and

00:21:56,010 --> 00:22:04,140
so ceptin supports a very simple cron

00:22:00,059 --> 00:22:08,250
way of running a notebook on a periodic

00:22:04,140 --> 00:22:10,140
basis okay and so I'm gonna go ahead and

00:22:08,250 --> 00:22:15,679
run this guy and we'll see what our

00:22:10,140 --> 00:22:15,679
counter says ooh sigh

00:22:21,270 --> 00:22:31,770
this was working some Python and who

00:22:28,110 --> 00:22:39,200
could tell me what my typo is invalid

00:22:31,770 --> 00:22:42,720
syntax to this version of Zeppelin is

00:22:39,200 --> 00:22:48,090
2.7 the new version coming out is 3 and

00:22:42,720 --> 00:22:50,450
I am looking forward to that so what did

00:22:48,090 --> 00:22:50,450
I do wrong

00:23:01,389 --> 00:23:05,240
all right I think I know what I did

00:23:03,350 --> 00:23:07,519
wrong so these are all the interpreters

00:23:05,240 --> 00:23:09,889
that Python that the Zeppelin knows

00:23:07,519 --> 00:23:13,490
about right spark and markdown and

00:23:09,889 --> 00:23:15,590
angular and you know Cassandra and

00:23:13,490 --> 00:23:18,860
elasticsearch and JDBC these are all the

00:23:15,590 --> 00:23:23,509
things that I can connect to right and

00:23:18,860 --> 00:23:25,190
so I think I maybe didn't know I don't

00:23:23,509 --> 00:23:27,409
know why that's not working but I don't

00:23:25,190 --> 00:23:29,960
want to drag you through it so I'll just

00:23:27,409 --> 00:23:31,429
go ahead and leave that in so so let's

00:23:29,960 --> 00:23:35,600
go ahead and try one more thing

00:23:31,429 --> 00:23:36,919
which is let's go ahead and look at some

00:23:35,600 --> 00:23:38,899
revision control

00:23:36,919 --> 00:23:43,039
so here's let's just say here I'm

00:23:38,899 --> 00:23:45,110
pulling down this bank file right one of

00:23:43,039 --> 00:23:47,240
the things is a challenge in Jupiter is

00:23:45,110 --> 00:23:49,639
how do I track my changes because

00:23:47,240 --> 00:23:53,090
unfortunately all of this code that

00:23:49,639 --> 00:23:56,450
lives inside these notebooks is in a big

00:23:53,090 --> 00:24:00,860
JSON blob right and it's nice because I

00:23:56,450 --> 00:24:04,100
can do things like download or export

00:24:00,860 --> 00:24:05,570
this this notebook and Metin send it to

00:24:04,100 --> 00:24:07,070
somebody and they can load it up into

00:24:05,570 --> 00:24:10,309
another Zeppelin and get their data

00:24:07,070 --> 00:24:12,830
right but it makes sort of dipping in

00:24:10,309 --> 00:24:17,350
eco changes very difficult if you're

00:24:12,830 --> 00:24:20,659
just using git on the file system so

00:24:17,350 --> 00:24:29,330
let's say version control so I'm gonna

00:24:20,659 --> 00:24:32,570
go ahead and so Zeppelin supports get

00:24:29,330 --> 00:24:37,669
right but it also supports just pointing

00:24:32,570 --> 00:24:40,279
at s3 and MongoDB and up flights five or

00:24:37,669 --> 00:24:43,009
seven other different systems to store

00:24:40,279 --> 00:24:47,090
the notebooks in as a source control

00:24:43,009 --> 00:24:49,519
system because it ends up doing and

00:24:47,090 --> 00:24:51,009
you'll see it so go ahead and make a

00:24:49,519 --> 00:24:53,539
change

00:24:51,009 --> 00:24:58,159
let's say we want to only look at the

00:24:53,539 --> 00:25:01,029
top 10 right right like that so I'll go

00:24:58,159 --> 00:25:01,029
ahead and commit that

00:25:05,340 --> 00:25:09,190
and if you're a developer you're

00:25:07,960 --> 00:25:11,020
probably looking at that little

00:25:09,190 --> 00:25:13,659
interface and thinking it's not like

00:25:11,020 --> 00:25:17,080
what I get out of get but it's a lot

00:25:13,659 --> 00:25:20,500
better than not having any revision

00:25:17,080 --> 00:25:24,399
control right and I can go ahead and

00:25:20,500 --> 00:25:27,120
let's see where's my compare so I'm

00:25:24,399 --> 00:25:29,799
gonna go ahead and compare these two and

00:25:27,120 --> 00:25:32,289
scroll down and what it's going to show

00:25:29,799 --> 00:25:34,330
me is every single paragraph that's in

00:25:32,289 --> 00:25:36,970
my notebook and then tell me if there's

00:25:34,330 --> 00:25:41,380
differences and then it shows me they're

00:25:36,970 --> 00:25:46,149
sort of a diff okay it's it's not great

00:25:41,380 --> 00:25:48,190
right it could be better but it's a lot

00:25:46,149 --> 00:25:50,440
better than trying to diff these

00:25:48,190 --> 00:25:54,640
notebooks without any sort of visual

00:25:50,440 --> 00:25:56,710
help so so that's that's that's the

00:25:54,640 --> 00:25:59,620
version control and I can kind of jump

00:25:56,710 --> 00:26:02,039
back and forth and look at you know this

00:25:59,620 --> 00:26:04,720
was the version with the top ten and

00:26:02,039 --> 00:26:06,760
then this should be putting me back at

00:26:04,720 --> 00:26:10,899
there it is my version with the top 20

00:26:06,760 --> 00:26:12,820
okay so the more you want to share these

00:26:10,899 --> 00:26:14,620
notebooks the more you want lots of

00:26:12,820 --> 00:26:16,720
people to play with them obviously the

00:26:14,620 --> 00:26:18,789
more important version control comes so

00:26:16,720 --> 00:26:24,370
that you know who's got the latest and

00:26:18,789 --> 00:26:26,919
which one to work with so all right so

00:26:24,370 --> 00:26:29,500
let me go ahead and pull up one of the

00:26:26,919 --> 00:26:32,559
interpreters so some are so far I pretty

00:26:29,500 --> 00:26:34,539
much just showed you code running in a

00:26:32,559 --> 00:26:38,679
notebook right and that's pretty much

00:26:34,539 --> 00:26:41,649
what Jupiter has as well so the other

00:26:38,679 --> 00:26:45,360
idea that they have is I briefly showed

00:26:41,649 --> 00:26:47,830
you a list of all the different

00:26:45,360 --> 00:26:51,309
interpreters that you can use with

00:26:47,830 --> 00:26:53,529
Zepplin here's sort of a long list of

00:26:51,309 --> 00:26:57,580
them right bigquery

00:26:53,529 --> 00:27:00,039
Cassandra JDBC the more you work with a

00:26:57,580 --> 00:27:01,929
disparate set of systems that you want

00:27:00,039 --> 00:27:04,539
to get data and pull from the more

00:27:01,929 --> 00:27:06,520
interesting Zepplin becomes because you

00:27:04,539 --> 00:27:09,700
could centrally manage all the

00:27:06,520 --> 00:27:12,549
connections to all your data stores via

00:27:09,700 --> 00:27:14,169
zeppelin and the people who are working

00:27:12,549 --> 00:27:16,240
with the data don't need to know that

00:27:14,169 --> 00:27:18,460
don't need to understand how you

00:27:16,240 --> 00:27:20,740
actually get to the data they just

00:27:18,460 --> 00:27:23,110
to know that it's available and so let

00:27:20,740 --> 00:27:25,960
me show you an example so this is a

00:27:23,110 --> 00:27:29,580
solar that's out on a hosted provider

00:27:25,960 --> 00:27:33,910
has a very long complex URL and that URL

00:27:29,580 --> 00:27:38,020
periodically changes but because I only

00:27:33,910 --> 00:27:41,950
have to update my my interpreter

00:27:38,020 --> 00:27:43,540
settings right then then anyone using

00:27:41,950 --> 00:27:46,390
this doesn't need to know about those

00:27:43,540 --> 00:27:49,750
changes to the connection strings so and

00:27:46,390 --> 00:27:52,180
then I'm going to go ahead and this is a

00:27:49,750 --> 00:27:54,430
streaming query out of solar not sure if

00:27:52,180 --> 00:27:57,420
Amy's looked at that I know that there's

00:27:54,430 --> 00:28:01,660
another talk today Amrit is providing on

00:27:57,420 --> 00:28:04,750
streaming solar queries but I'm sending

00:28:01,660 --> 00:28:07,810
this big block of text which is going

00:28:04,750 --> 00:28:11,050
out and looking over what is that a

00:28:07,810 --> 00:28:13,210
million rows of data and aggregating

00:28:11,050 --> 00:28:15,010
them to find duplicate records I'm

00:28:13,210 --> 00:28:17,920
basically looking for duplicate records

00:28:15,010 --> 00:28:20,020
and so and show me anyone who has a

00:28:17,920 --> 00:28:22,180
duplicate record it's gonna take a while

00:28:20,020 --> 00:28:25,090
because it's sort of a big intense

00:28:22,180 --> 00:28:27,250
streaming job but I can mess around with

00:28:25,090 --> 00:28:29,470
that inside my web notebook here I

00:28:27,250 --> 00:28:31,900
didn't have to install solar locally I

00:28:29,470 --> 00:28:34,510
didn't have to install any of the client

00:28:31,900 --> 00:28:36,880
libraries or anything else locally right

00:28:34,510 --> 00:28:40,060
I could just pull this tool up and there

00:28:36,880 --> 00:28:42,490
we go I got fifteen hundred and forty

00:28:40,060 --> 00:28:44,410
four nulls and then a couple of records

00:28:42,490 --> 00:28:49,360
with three you know and so I can mess

00:28:44,410 --> 00:28:54,750
around with my data here say any of

00:28:49,360 --> 00:28:57,190
these interesting yeah so you could see

00:28:54,750 --> 00:29:01,840
no stack just gonna be a little more

00:28:57,190 --> 00:29:05,460
interesting there we go

00:29:01,840 --> 00:29:05,460
right I keep

00:29:08,169 --> 00:29:19,210
got watch how much I click in the UI now

00:29:17,260 --> 00:29:22,450
you can see that there's a visualization

00:29:19,210 --> 00:29:24,490
so so the idea behind these different

00:29:22,450 --> 00:29:26,140
interpreters is I can just from this

00:29:24,490 --> 00:29:28,269
tool here go out and write a sequel

00:29:26,140 --> 00:29:29,830
statement against the database I can

00:29:28,269 --> 00:29:31,390
connect to an elastic search to do

00:29:29,830 --> 00:29:34,360
elastic search queries I can do

00:29:31,390 --> 00:29:36,399
Cassandra queries right and all of the

00:29:34,360 --> 00:29:41,200
interpreters basically implement the

00:29:36,399 --> 00:29:45,610
basic syntax of any of those tools to do

00:29:41,200 --> 00:29:49,169
their query sim so that's an example of

00:29:45,610 --> 00:29:51,789
a slightly unusual interpreter solar

00:29:49,169 --> 00:29:55,779
JDBC and those are what people typically

00:29:51,789 --> 00:29:58,929
use Sam so lastly and then just to kind

00:29:55,779 --> 00:30:11,320
of tell you a use case of using at this

00:29:58,929 --> 00:30:15,190
tool let me see there we go so I'm going

00:30:11,320 --> 00:30:16,529
to go ahead and import an example there

00:30:15,190 --> 00:30:20,159
we go

00:30:16,529 --> 00:30:20,159
yep the wrong one

00:30:28,170 --> 00:30:34,380
so I just imported a blob of JSON from

00:30:32,100 --> 00:30:37,770
another Zeppelin that from a project we

00:30:34,380 --> 00:30:40,890
did two years ago and in this project

00:30:37,770 --> 00:30:42,120
right we had built a search index and we

00:30:40,890 --> 00:30:44,070
didn't really have a good logging

00:30:42,120 --> 00:30:45,930
platform and we didn't really have a

00:30:44,070 --> 00:30:47,730
good reporting but we knew we wanted to

00:30:45,930 --> 00:30:50,700
start looking at what are the slow

00:30:47,730 --> 00:30:53,220
queries and you know over the last 30

00:30:50,700 --> 00:30:55,710
days over the last seven days right and

00:30:53,220 --> 00:30:58,110
so the thing that I found really useful

00:30:55,710 --> 00:31:02,010
about Zeppelin was that we were able to

00:30:58,110 --> 00:31:04,350
point it at in this particular case it

00:31:02,010 --> 00:31:06,690
was a solar index which was where we

00:31:04,350 --> 00:31:08,430
were just touring that data and I was

00:31:06,690 --> 00:31:09,900
able to put together very quickly a

00:31:08,430 --> 00:31:12,300
bunch of different queries and

00:31:09,900 --> 00:31:14,220
dashboards and then we shared this

00:31:12,300 --> 00:31:17,300
around and so we were able to look and

00:31:14,220 --> 00:31:21,150
understand what the query behavior was

00:31:17,300 --> 00:31:23,160
we had some pretty charts about how long

00:31:21,150 --> 00:31:26,700
the query times were taking on average

00:31:23,160 --> 00:31:28,380
what our clique rank position was right

00:31:26,700 --> 00:31:30,090
so we kind of put this all together in

00:31:28,380 --> 00:31:31,290
Zeppelin and then worked with the

00:31:30,090 --> 00:31:33,240
business say okay is this the

00:31:31,290 --> 00:31:35,280
information you're looking for or can we

00:31:33,240 --> 00:31:37,770
fix this or what do you want to do right

00:31:35,280 --> 00:31:39,900
so it worked great we used it for about

00:31:37,770 --> 00:31:42,710
three weeks and then they said okay this

00:31:39,900 --> 00:31:45,960
looks great we're gonna re-implemented

00:31:42,710 --> 00:31:48,390
low environment right what was great was

00:31:45,960 --> 00:31:50,850
that the people who were building the

00:31:48,390 --> 00:31:53,430
reports in tableau weren't starting out

00:31:50,850 --> 00:31:55,260
from scratch we could point them to what

00:31:53,430 --> 00:31:57,240
we've done in Zeppelin and they were

00:31:55,260 --> 00:32:00,180
like oh great now I know exactly how to

00:31:57,240 --> 00:32:01,500
build my reports in tableau at a you

00:32:00,180 --> 00:32:03,750
know integrated with their entire

00:32:01,500 --> 00:32:05,640
enterprise with all the roll-ups and

00:32:03,750 --> 00:32:09,030
other things that they wanted to do sim

00:32:05,640 --> 00:32:11,160
so this was a really really you know

00:32:09,030 --> 00:32:14,400
this was a really quick and fast way of

00:32:11,160 --> 00:32:17,490
prototyping something and then you know

00:32:14,400 --> 00:32:19,260
we built the production system later so

00:32:17,490 --> 00:32:24,200
the last thing I just want to leave you

00:32:19,260 --> 00:32:27,570
with and let's see if this link comes up

00:32:24,200 --> 00:32:29,910
so I've showed you pretty much the basic

00:32:27,570 --> 00:32:33,630
out-of-the-box ones but there's actually

00:32:29,910 --> 00:32:37,620
a lot of other visualizations that are

00:32:33,630 --> 00:32:40,200
available so Zeppelin has a package

00:32:37,620 --> 00:32:42,119
management library called helium that

00:32:40,200 --> 00:32:43,949
actually packages up interpreter

00:32:42,119 --> 00:32:45,799
and visualizations and all the

00:32:43,949 --> 00:32:48,299
JavaScript and you can install them and

00:32:45,799 --> 00:32:51,269
so Joel Bernstein has been doing a lot

00:32:48,299 --> 00:32:53,099
of interesting work to take those solar

00:32:51,269 --> 00:32:55,499
streaming expressions and build

00:32:53,099 --> 00:32:58,469
visualizations on top of them so those

00:32:55,499 --> 00:33:00,659
there's some basic ones right but

00:32:58,469 --> 00:33:02,459
there's some more interesting ones we

00:33:00,659 --> 00:33:05,369
can go ahead and do visualization based

00:33:02,459 --> 00:33:08,009
on mapping we can do some really

00:33:05,369 --> 00:33:08,789
sophisticated scatter plots and vector

00:33:08,009 --> 00:33:11,369
plots

00:33:08,789 --> 00:33:14,399
there's our pretty sequel aggregations

00:33:11,369 --> 00:33:15,749
maybe some you know heat map kind of

00:33:14,399 --> 00:33:19,079
stuff in here

00:33:15,749 --> 00:33:21,149
linear regression so so I think the what

00:33:19,079 --> 00:33:23,569
I'm trying to leave you with here is the

00:33:21,149 --> 00:33:26,309
idea that there's a you know pretty

00:33:23,569 --> 00:33:28,889
significant depth of the types of

00:33:26,309 --> 00:33:30,329
visualizations that you can do and if

00:33:28,889 --> 00:33:31,949
you notice there's these just little

00:33:30,329 --> 00:33:35,879
extra boxes here these were all

00:33:31,949 --> 00:33:39,599
installed into the running zeppelin via

00:33:35,879 --> 00:33:42,329
this helium package management tool that

00:33:39,599 --> 00:33:44,069
they've been working on Sam so there's

00:33:42,329 --> 00:33:48,569
lots of interesting analytics inside

00:33:44,069 --> 00:33:53,729
their sim so to kind of wrap up where's

00:33:48,569 --> 00:33:56,909
my to kind of wrap up or recap so

00:33:53,729 --> 00:34:00,569
Zeppelin is meant for teams that want to

00:33:56,909 --> 00:34:03,179
share ideas right for a one-person

00:34:00,569 --> 00:34:07,709
project maybe a little heavier right for

00:34:03,179 --> 00:34:09,839
that and it is really interesting when

00:34:07,709 --> 00:34:11,279
you have lots of different in by

00:34:09,839 --> 00:34:14,819
languages that you want to work with

00:34:11,279 --> 00:34:16,470
right are and Python and Scala and

00:34:14,819 --> 00:34:20,669
groovy and all these other different

00:34:16,470 --> 00:34:22,649
languages and multi data sorcery

00:34:20,669 --> 00:34:24,569
environments multi data source

00:34:22,649 --> 00:34:26,789
environments where there's information

00:34:24,569 --> 00:34:29,069
locked up in a lot of different data

00:34:26,789 --> 00:34:30,929
stores and you want to get access to

00:34:29,069 --> 00:34:33,869
them and you want to be able to manage

00:34:30,929 --> 00:34:35,819
that access put permissions on them put

00:34:33,869 --> 00:34:40,079
limitations on how much data they might

00:34:35,819 --> 00:34:42,450
be allowed to access there's a big

00:34:40,079 --> 00:34:46,169
release that's been bubbling around for

00:34:42,450 --> 00:34:49,739
probably a year now ODOT nine I showed

00:34:46,169 --> 00:34:51,450
you Oh dot eight and in this big release

00:34:49,739 --> 00:34:53,730
there's much more sophisticated

00:34:51,450 --> 00:34:55,640
clustering so you can have a cluster of

00:34:53,730 --> 00:34:58,630
Zeppelin servers and doesn't

00:34:55,640 --> 00:35:01,100
which one you're working on the helium

00:34:58,630 --> 00:35:05,360
visualization stuff is I think gonna be

00:35:01,100 --> 00:35:08,120
really finally baked baked right and

00:35:05,360 --> 00:35:11,960
then I've heard room there's some new

00:35:08,120 --> 00:35:14,120
interpreters like a terminal so you can

00:35:11,960 --> 00:35:15,410
jump onto a box and just it's like

00:35:14,120 --> 00:35:16,550
you're working on the terminal but

00:35:15,410 --> 00:35:20,090
you're just doing it through a webpage

00:35:16,550 --> 00:35:22,150
or the other feature that I've heard is

00:35:20,090 --> 00:35:24,890
is that that there's some work on

00:35:22,150 --> 00:35:27,380
potentially to people editing the same

00:35:24,890 --> 00:35:30,080
note at the same time and being able to

00:35:27,380 --> 00:35:34,610
see who's working on that so those are

00:35:30,080 --> 00:35:49,550
kind of the big things so thank you so

00:35:34,610 --> 00:35:52,640
thank you very much other questions okay

00:35:49,550 --> 00:35:55,220
just more curiosity let's consider that

00:35:52,640 --> 00:35:59,480
they have spark that process is part of

00:35:55,220 --> 00:36:02,660
the of the data and they create a crypto

00:35:59,480 --> 00:36:05,510
table I have my pandas that also create

00:36:02,660 --> 00:36:10,940
some variables can ideal mix the both

00:36:05,510 --> 00:36:12,710
sources together or not yes sorta so the

00:36:10,940 --> 00:36:14,210
thing that got me excited about Zeppelin

00:36:12,710 --> 00:36:16,640
was when I was like oh I'll query

00:36:14,210 --> 00:36:18,800
elasticsearch get the data back and then

00:36:16,640 --> 00:36:20,630
I'll write it to Cassandra right but

00:36:18,800 --> 00:36:24,050
what you have to remember is Ellen

00:36:20,630 --> 00:36:26,060
itself is just a web app right so the

00:36:24,050 --> 00:36:27,860
interpreters and things that go get that

00:36:26,060 --> 00:36:30,260
data and bring it back you're working in

00:36:27,860 --> 00:36:33,500
that environment right now

00:36:30,260 --> 00:36:35,270
zeppelins got a lot of hooks where as

00:36:33,500 --> 00:36:38,090
long as you're working through spark

00:36:35,270 --> 00:36:40,250
right you can use both languages and in

00:36:38,090 --> 00:36:42,410
fact in here and this in the tutorial

00:36:40,250 --> 00:36:46,540
they have a little demo here I think

00:36:42,410 --> 00:36:52,160
it's in this R which demonstrates

00:36:46,540 --> 00:36:55,040
creating a data frame yes so right down

00:36:52,160 --> 00:36:58,820
here we're creating a data frame using

00:36:55,040 --> 00:37:01,490
scalar or spark right and in our we're

00:36:58,820 --> 00:37:04,460
reading back from it right so as long as

00:37:01,490 --> 00:37:09,290
both languages are speaking data frames

00:37:04,460 --> 00:37:11,780
and spark so PI spark and spark are or

00:37:09,290 --> 00:37:14,510
you know something like that then you're

00:37:11,780 --> 00:37:17,030
manipulating it and all of that work is

00:37:14,510 --> 00:37:23,690
happening in your spark cluster not in

00:37:17,030 --> 00:37:28,280
your little Zeppelin webapp Sam and how

00:37:23,690 --> 00:37:31,190
is the Jupiter you are very nice way to

00:37:28,280 --> 00:37:33,530
do graphs and prepare everything how is

00:37:31,190 --> 00:37:36,740
it integrated in here yeah so pretty

00:37:33,530 --> 00:37:40,460
much there was been a big push to kind

00:37:36,740 --> 00:37:42,590
of support Python in the most recent one

00:37:40,460 --> 00:37:47,350
so I think I can you know so here's

00:37:42,590 --> 00:37:52,070
matplotlib again I guys save that so

00:37:47,350 --> 00:37:54,200
there is right there's my matplotlib all

00:37:52,070 --> 00:37:56,720
of these sort of plotting tools that you

00:37:54,200 --> 00:38:00,619
can use in Jupiter also run in here and

00:37:56,720 --> 00:38:03,830
in fact we're using the same ipython

00:38:00,619 --> 00:38:11,030
interpreter in the back to render

00:38:03,830 --> 00:38:13,480
everything so they're doing more

00:38:11,030 --> 00:38:13,480
questions

00:38:25,050 --> 00:38:31,450
so since we now hurt what is all the

00:38:29,980 --> 00:38:33,730
ways in which sapling is better than

00:38:31,450 --> 00:38:36,970
Jupiter why do you think it's not used

00:38:33,730 --> 00:38:40,810
that much so I think one reason why it's

00:38:36,970 --> 00:38:43,750
not used a lot was that I don't think

00:38:40,810 --> 00:38:46,300
it's particularly well known and it was

00:38:43,750 --> 00:38:49,660
primarily distributed as part of Horton

00:38:46,300 --> 00:38:53,950
data platform or ant cloud both Horton

00:38:49,660 --> 00:38:56,560
and cloud era did some work on it and it

00:38:53,950 --> 00:39:00,390
was part of their distributions and it

00:38:56,560 --> 00:39:02,590
was all wired into you know all of that

00:39:00,390 --> 00:39:06,820
authentication everything that those

00:39:02,590 --> 00:39:09,460
products gave right I think that most

00:39:06,820 --> 00:39:11,260
people though are saying well if I'm a

00:39:09,460 --> 00:39:13,990
data scientist and I go to school I

00:39:11,260 --> 00:39:16,540
learned Jupiter I learned Python you

00:39:13,990 --> 00:39:20,230
know they're not really exposed to some

00:39:16,540 --> 00:39:23,920
of these other big data type Bo type

00:39:20,230 --> 00:39:26,560
tools I don't know why it's not more

00:39:23,920 --> 00:39:29,200
widely used I mean I think that it

00:39:26,560 --> 00:39:32,050
didn't support Python until sort of last

00:39:29,200 --> 00:39:36,010
year really well right and I think that

00:39:32,050 --> 00:39:37,450
was a big barrier to entry I know that

00:39:36,010 --> 00:39:39,850
there's a fair number of companies that

00:39:37,450 --> 00:39:42,070
actually bundle Zeppelin in as part of

00:39:39,850 --> 00:39:43,990
their product so you may be using

00:39:42,070 --> 00:39:46,330
Zeppelin as part of a product you just

00:39:43,990 --> 00:39:50,470
don't know it because they've sort of

00:39:46,330 --> 00:39:52,420
wrapped it and white labeled it so but

00:39:50,470 --> 00:39:55,530
yeah I mean it's it's it's meant with

00:39:52,420 --> 00:39:59,650
that like team orientation and

00:39:55,530 --> 00:40:01,420
enterprise access controls right and I

00:39:59,650 --> 00:40:03,100
think most people when they're thinking

00:40:01,420 --> 00:40:04,990
I'm a data scientists are like well just

00:40:03,100 --> 00:40:07,180
give me the CSV files and I'll go work

00:40:04,990 --> 00:40:11,520
in the corner over here and Jupiter does

00:40:07,180 --> 00:40:11,520
that really well so Thanks

00:40:12,270 --> 00:40:17,910
yeah yeah another question in the center

00:40:18,540 --> 00:40:25,420
I remember you I have used the staff

00:40:23,260 --> 00:40:28,330
thing like two years ago and that time

00:40:25,420 --> 00:40:31,450
when we want to integrate something with

00:40:28,330 --> 00:40:34,510
spark we have to install like Tory to

00:40:31,450 --> 00:40:37,210
enable this integration does it know now

00:40:34,510 --> 00:40:39,330
like integrated automatically or we

00:40:37,210 --> 00:40:41,950
still have to do that this kind of setup

00:40:39,330 --> 00:40:44,320
so they definitely there's definitely

00:40:41,950 --> 00:40:46,660
the documentation has gotten better and

00:40:44,320 --> 00:40:51,040
there's a lot more packaging and

00:40:46,660 --> 00:40:54,520
separate processes so I haven't had any

00:40:51,040 --> 00:40:58,090
problems with docker run Zeppelin and

00:40:54,520 --> 00:41:01,600
then going into the interpreter and

00:40:58,090 --> 00:41:05,620
putting in my spark master right and

00:41:01,600 --> 00:41:07,060
it's worked perfectly fine so yeah

00:41:05,620 --> 00:41:10,090
there's the interpreter you can see it's

00:41:07,060 --> 00:41:11,850
set up for local use right but messing

00:41:10,090 --> 00:41:15,010
around with that has worked out well

00:41:11,850 --> 00:41:16,870
they've done a lot to like separate all

00:41:15,010 --> 00:41:19,240
the packages so you could support all

00:41:16,870 --> 00:41:20,710
the variations of spark and I think

00:41:19,240 --> 00:41:22,990
they've gotten rid of some of the older

00:41:20,710 --> 00:41:25,990
ones as well which has helped thee

00:41:22,990 --> 00:41:27,850
stability because that was something

00:41:25,990 --> 00:41:30,190
that I experienced a little bit when I

00:41:27,850 --> 00:41:32,860
first started using Zeppelin was like

00:41:30,190 --> 00:41:34,750
package management dependency hell and

00:41:32,860 --> 00:41:37,000
getting all the right versions of

00:41:34,750 --> 00:41:39,580
everything to work together that I think

00:41:37,000 --> 00:41:41,650
has gotten better maybe also cuz spark

00:41:39,580 --> 00:41:46,390
maybe isn't changing quite as quickly as

00:41:41,650 --> 00:41:48,760
well so another question is let's let's

00:41:46,390 --> 00:41:50,680
take the wrist offline we've used up the

00:41:48,760 --> 00:41:52,150
time things have the questions I'm sure

00:41:50,680 --> 00:41:54,130
because around yep

00:41:52,150 --> 00:41:57,340
we'll be happy I'll be around so thank

00:41:54,130 --> 00:42:00,670
you very much everybody and I will tweet

00:41:57,340 --> 00:42:03,190
that URL and if you want to kind of play

00:42:00,670 --> 00:42:05,080
with Zeppelin and yeah take a look-see

00:42:03,190 --> 00:42:07,570
at it might be the tool you need to

00:42:05,080 --> 00:42:09,000
collaborate better with thank you go

00:42:07,570 --> 00:42:12,420
didn't thank you Eric

00:42:09,000 --> 00:42:12,420

YouTube URL: https://www.youtube.com/watch?v=SO171ucwM5c


