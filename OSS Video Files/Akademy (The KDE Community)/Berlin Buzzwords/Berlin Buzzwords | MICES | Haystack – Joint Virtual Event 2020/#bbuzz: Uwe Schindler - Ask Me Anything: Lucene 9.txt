Title: #bbuzz: Uwe Schindler - Ask Me Anything: Lucene 9
Publication date: 2020-06-24
Playlist: Berlin Buzzwords | MICES | Haystack â€“ Joint Virtual Event 2020
Description: 
	More: https://berlinbuzzwords.de/session/ask-me-anything-lucene-9

Uwe Schindler is deeply involved in the development of Apache Lucene and is happy to answer all your questions about the upcoming Lucene 9.
Captions: 
	00:00:08,639 --> 00:00:13,200
hi everyone

00:00:09,920 --> 00:00:16,240
uh welcome to the ama session

00:00:13,200 --> 00:00:19,600
with uber schindler uh about

00:00:16,240 --> 00:00:22,000
what's new in lucie 9. um

00:00:19,600 --> 00:00:22,720
ube is a committer and pmc member of the

00:00:22,000 --> 00:00:26,119
apache

00:00:22,720 --> 00:00:30,000
lucene and solar project he's worked on

00:00:26,119 --> 00:00:31,920
a lot of interesting leucine features

00:00:30,000 --> 00:00:33,520
like the fast numerical search and is

00:00:31,920 --> 00:00:37,440
maintaining the new attribute

00:00:33,520 --> 00:00:39,920
based uh text analysis api

00:00:37,440 --> 00:00:41,920
he works as the managing director for sd

00:00:39,920 --> 00:00:43,680
data solutions in bremen

00:00:41,920 --> 00:00:47,600
that provides consulting and support for

00:00:43,680 --> 00:00:49,600
apache lucien solar and elasticsearch

00:00:47,600 --> 00:00:51,680
he also works for pangaea uh where he

00:00:49,600 --> 00:00:53,199
implemented the portal's geospatial

00:00:51,680 --> 00:00:56,080
retrieval functions

00:00:53,199 --> 00:00:57,199
with uh with lucy so

00:00:56,080 --> 00:01:01,039
[Music]

00:00:57,199 --> 00:01:03,760
welcome hi

00:01:01,039 --> 00:01:04,799
uh so thank you for the introduction and

00:01:03,760 --> 00:01:07,280
i'm glad

00:01:04,799 --> 00:01:08,560
to answer all your questions today that

00:01:07,280 --> 00:01:12,080
you could imagine

00:01:08,560 --> 00:01:15,119
about um

00:01:12,080 --> 00:01:18,320
lucy nine so in general

00:01:15,119 --> 00:01:19,920
um maybe the first thing that i want to

00:01:18,320 --> 00:01:21,920
start with is before

00:01:19,920 --> 00:01:23,119
the questions i hope they are coming in

00:01:21,920 --> 00:01:26,880
already

00:01:23,119 --> 00:01:30,640
um is to talk and give you some some

00:01:26,880 --> 00:01:31,520
short overview what will come with lucie

00:01:30,640 --> 00:01:33,920
00:01:31,520 --> 00:01:36,640
and maybe also some a little bit of

00:01:33,920 --> 00:01:40,240
short background of losing

00:01:36,640 --> 00:01:41,280
8 because um the interesting thing with

00:01:40,240 --> 00:01:44,000
lucie 9

00:01:41,280 --> 00:01:44,799
in short if you would say it there are

00:01:44,000 --> 00:01:48,320
two

00:01:44,799 --> 00:01:51,759
new main features which uh

00:01:48,320 --> 00:01:54,960
which are the important changes one is

00:01:51,759 --> 00:01:56,079
moving to java 11 yeah and the second

00:01:54,960 --> 00:01:59,439
one is

00:01:56,079 --> 00:02:03,200
they are currently going on to implement

00:01:59,439 --> 00:02:04,640
gradle as um as the build system

00:02:03,200 --> 00:02:06,240
so that's something which is more

00:02:04,640 --> 00:02:10,800
interesting for the

00:02:06,240 --> 00:02:13,840
for the developers so that are the most

00:02:10,800 --> 00:02:14,239
often seen new features the other ones

00:02:13,840 --> 00:02:18,000
which

00:02:14,239 --> 00:02:19,680
are also included in most cases also

00:02:18,000 --> 00:02:23,120
backported to the lucian

00:02:19,680 --> 00:02:23,920
8.6 series and in general to losing

00:02:23,120 --> 00:02:26,400
eight

00:02:23,920 --> 00:02:28,160
so in most cases when we have a new

00:02:26,400 --> 00:02:32,239
using version it's just

00:02:28,160 --> 00:02:34,879
uh the breaking changes coming in and

00:02:32,239 --> 00:02:37,360
more or less the breaking change here is

00:02:34,879 --> 00:02:39,760
that you have to switch to java 11

00:02:37,360 --> 00:02:41,440
and for the developers it's great but we

00:02:39,760 --> 00:02:44,800
also updated a lot of stuff

00:02:41,440 --> 00:02:47,840
like for example analyzers

00:02:44,800 --> 00:02:50,080
we have new snowball analyzers

00:02:47,840 --> 00:02:52,160
for new languages and although the old

00:02:50,080 --> 00:02:53,040
ones were updated so they should be

00:02:52,160 --> 00:02:55,680
faster now

00:02:53,040 --> 00:02:56,800
because the auto generated code was

00:02:55,680 --> 00:02:58,480
updated

00:02:56,800 --> 00:02:59,519
and that are some changes but because

00:02:58,480 --> 00:03:00,720
they are breaking backwards

00:02:59,519 --> 00:03:02,640
compatibility

00:03:00,720 --> 00:03:05,519
they are new but most of the other stuff

00:03:02,640 --> 00:03:08,720
was already back ported

00:03:05,519 --> 00:03:11,440
to java 8

00:03:08,720 --> 00:03:12,720
and one of the main features and no

00:03:11,440 --> 00:03:14,480
sorry lucien 8

00:03:12,720 --> 00:03:15,920
and one of the main features so there

00:03:14,480 --> 00:03:19,040
are three things

00:03:15,920 --> 00:03:22,159
that you can ask questions today too

00:03:19,040 --> 00:03:25,760
about the

00:03:22,159 --> 00:03:27,840
the so-called early circuits of queries

00:03:25,760 --> 00:03:31,680
which is called the block max

00:03:27,840 --> 00:03:33,680
round which is

00:03:31,680 --> 00:03:34,879
if you don't need the exact number of

00:03:33,680 --> 00:03:37,360
results

00:03:34,879 --> 00:03:39,280
of a query you can short circuit if you

00:03:37,360 --> 00:03:40,400
know that some of the documents will

00:03:39,280 --> 00:03:42,400
never match

00:03:40,400 --> 00:03:44,400
because they cannot be in the top ten so

00:03:42,400 --> 00:03:45,599
that's a new feature which is steadily

00:03:44,400 --> 00:03:49,200
involved

00:03:45,599 --> 00:03:52,319
to affect more queries and

00:03:49,200 --> 00:03:54,959
that's very very important

00:03:52,319 --> 00:03:56,159
the second step is which is an ongoing

00:03:54,959 --> 00:04:00,480
process in losing

00:03:56,159 --> 00:04:04,640
eight is step by step moving away

00:04:00,480 --> 00:04:06,959
the index parts that are currently

00:04:04,640 --> 00:04:07,920
mostly or in previous versions were

00:04:06,959 --> 00:04:10,400
mostly

00:04:07,920 --> 00:04:12,159
located on the heap to move them off

00:04:10,400 --> 00:04:14,480
heap so that means

00:04:12,159 --> 00:04:15,280
the index files are only memory mapped

00:04:14,480 --> 00:04:17,199
and

00:04:15,280 --> 00:04:18,720
to run for example your solar or

00:04:17,199 --> 00:04:22,560
elasticsearch cluster

00:04:18,720 --> 00:04:25,759
you only need very few heat space

00:04:22,560 --> 00:04:28,560
mainly you only need the heat space for

00:04:25,759 --> 00:04:30,479
for managing your cluster like the the

00:04:28,560 --> 00:04:33,600
cluster state and all that stuff

00:04:30,479 --> 00:04:36,639
but for executing queries and um

00:04:33,600 --> 00:04:39,360
doing aggregations or faceting the

00:04:36,639 --> 00:04:40,240
the amount of heap it gets reduced and

00:04:39,360 --> 00:04:42,800
another

00:04:40,240 --> 00:04:43,440
new feature in scene 8 are the interval

00:04:42,800 --> 00:04:46,639
trends

00:04:43,440 --> 00:04:48,479
so and um

00:04:46,639 --> 00:04:49,919
i also have something because there are

00:04:48,479 --> 00:04:53,600
also some zola

00:04:49,919 --> 00:04:57,199
users here so the next version

00:04:53,600 --> 00:05:00,880
of solar will not be solar 9 it will be

00:04:57,199 --> 00:05:04,960
solar in resin 8.6 and there are some

00:05:00,880 --> 00:05:05,600
smaller changes as said before the block

00:05:04,960 --> 00:05:08,320
max

00:05:05,600 --> 00:05:09,600
indexing is now finally also coming to

00:05:08,320 --> 00:05:12,960
zola so

00:05:09,600 --> 00:05:15,199
the short secreting of queries is coming

00:05:12,960 --> 00:05:17,520
and you also have some minor stuff like

00:05:15,199 --> 00:05:19,840
a security info panel in the admin

00:05:17,520 --> 00:05:22,080
ui which is now important because we got

00:05:19,840 --> 00:05:25,199
a lot of security requests

00:05:22,080 --> 00:05:27,440
for non-secured solar cluster so

00:05:25,199 --> 00:05:29,600
you see a little bit more information

00:05:27,440 --> 00:05:31,840
and there are also some streaming api

00:05:29,600 --> 00:05:35,120
improvements coming

00:05:31,840 --> 00:05:38,160
and um

00:05:35,120 --> 00:05:40,160
so here yeah sorry i forgot about that

00:05:38,160 --> 00:05:42,479
but i think we are now

00:05:40,160 --> 00:05:44,000
with the introduction that's almost all

00:05:42,479 --> 00:05:46,800
and now i want to get

00:05:44,000 --> 00:05:50,479
some queries from you and i hope i'm

00:05:46,800 --> 00:05:50,479
already have detected some in the

00:05:50,840 --> 00:05:55,360
section yeah

00:05:52,560 --> 00:05:56,479
so uh we're i'm gonna get back to the

00:05:55,360 --> 00:05:59,199
new features

00:05:56,479 --> 00:06:00,000
in a bit uh and all of them look really

00:05:59,199 --> 00:06:03,199
interesting

00:06:00,000 --> 00:06:05,840
uh but uh with the new version

00:06:03,199 --> 00:06:07,120
what does it really mean for uh for

00:06:05,840 --> 00:06:08,720
existing users

00:06:07,120 --> 00:06:10,240
is there something that they should look

00:06:08,720 --> 00:06:12,080
out for uh

00:06:10,240 --> 00:06:15,120
prepare themselves for is there

00:06:12,080 --> 00:06:15,120
something you want to highlight

00:06:15,199 --> 00:06:21,280
yes so when you're upgrading to a new

00:06:18,560 --> 00:06:23,360
new lucine version but it's same applies

00:06:21,280 --> 00:06:26,319
to zola in elasticsearch

00:06:23,360 --> 00:06:27,840
um there are of course some breaking

00:06:26,319 --> 00:06:30,240
changes and one of those

00:06:27,840 --> 00:06:31,280
is of course you have to upgrade to java

00:06:30,240 --> 00:06:34,960
11.

00:06:31,280 --> 00:06:38,560
i hope most of you already did that um

00:06:34,960 --> 00:06:40,720
for for the current clusters because

00:06:38,560 --> 00:06:41,680
that's the last uh last chance to do

00:06:40,720 --> 00:06:43,680
that but you

00:06:41,680 --> 00:06:45,520
have to also keep in mind some other

00:06:43,680 --> 00:06:48,319
stuff so for example

00:06:45,520 --> 00:06:50,880
if you have older indexes that you

00:06:48,319 --> 00:06:52,800
haven't re-indexed for a longer time

00:06:50,880 --> 00:06:54,560
it might happen that you can use them

00:06:52,800 --> 00:06:57,680
with the new

00:06:54,560 --> 00:06:59,759
versions of solar or lucien

00:06:57,680 --> 00:07:01,520
because the backwards compatibility

00:06:59,759 --> 00:07:04,560
layer only allows

00:07:01,520 --> 00:07:07,120
to beat indexes from previous versions

00:07:04,560 --> 00:07:08,080
so that means once you have mic once you

00:07:07,120 --> 00:07:11,840
migrate to

00:07:08,080 --> 00:07:12,479
c9 or zola 9 you can only read an index

00:07:11,840 --> 00:07:14,479
which was

00:07:12,479 --> 00:07:16,800
originally created and that's very

00:07:14,479 --> 00:07:20,080
important originally created

00:07:16,800 --> 00:07:23,520
with java 8 that's something which is

00:07:20,080 --> 00:07:26,960
new uh since lucien seven

00:07:23,520 --> 00:07:27,280
and made hot and somehow we using eight

00:07:26,960 --> 00:07:30,080
so

00:07:27,280 --> 00:07:31,280
actually uh previously it was possible

00:07:30,080 --> 00:07:33,919
to simply

00:07:31,280 --> 00:07:34,560
merge some index or optimize it to get

00:07:33,919 --> 00:07:37,039
it to the

00:07:34,560 --> 00:07:38,240
almost latest version but there were

00:07:37,039 --> 00:07:40,880
some changes

00:07:38,240 --> 00:07:42,160
between losing six and blue seven and

00:07:40,880 --> 00:07:45,199
cuisine eight

00:07:42,160 --> 00:07:47,520
that had some internal statistics uh

00:07:45,199 --> 00:07:48,960
that were used for the scoring and so on

00:07:47,520 --> 00:07:51,120
and also offsets

00:07:48,960 --> 00:07:53,280
which were partly negative in older

00:07:51,120 --> 00:07:56,400
indexes and because of that

00:07:53,280 --> 00:07:58,400
um we have to put some

00:07:56,400 --> 00:08:00,479
some stopping in it you cannot upgrade

00:07:58,400 --> 00:08:03,039
those old indexes you you can still

00:08:00,479 --> 00:08:05,440
upgrade them to lucien version 8

00:08:03,039 --> 00:08:07,280
but the problem is lucy 9 will still

00:08:05,440 --> 00:08:10,720
reject to open that index

00:08:07,280 --> 00:08:12,720
because uh somewhere in the indexes also

00:08:10,720 --> 00:08:15,440
the original version

00:08:12,720 --> 00:08:16,479
with which it was created stored in the

00:08:15,440 --> 00:08:19,520
index

00:08:16,479 --> 00:08:20,639
and if lucine on opening the index

00:08:19,520 --> 00:08:23,440
figures out that

00:08:20,639 --> 00:08:25,520
the index was created and with a very

00:08:23,440 --> 00:08:28,240
old version and just upgraded

00:08:25,520 --> 00:08:29,039
sequentially from conversion to version

00:08:28,240 --> 00:08:32,240
it

00:08:29,039 --> 00:08:34,159
it will complain to open it

00:08:32,240 --> 00:08:36,320
there are some workarounds available but

00:08:34,159 --> 00:08:40,000
that need manual

00:08:36,320 --> 00:08:42,880
work so you have to somehow

00:08:40,000 --> 00:08:44,560
change the index files uh on your own by

00:08:42,880 --> 00:08:46,080
hacking something into zine but in

00:08:44,560 --> 00:08:47,519
general that sort of supported

00:08:46,080 --> 00:08:50,959
configuration so

00:08:47,519 --> 00:08:54,959
you should be prepared to update and

00:08:50,959 --> 00:08:57,360
um that's that's mainly uh

00:08:54,959 --> 00:08:58,880
what affects all the major museum

00:08:57,360 --> 00:09:00,240
versions and then you have to install

00:08:58,880 --> 00:09:03,839
the other 11 or

00:09:00,240 --> 00:09:04,880
possibly later and when you're upgrading

00:09:03,839 --> 00:09:08,000
solar

00:09:04,880 --> 00:09:11,680
you should you you

00:09:08,000 --> 00:09:14,399
should yeah the steps from losing

00:09:11,680 --> 00:09:15,760
uh from zola a to lusoder 9 are not so

00:09:14,399 --> 00:09:18,800
complicated

00:09:15,760 --> 00:09:22,480
like they were from um

00:09:18,800 --> 00:09:26,080
solar 7 to solar 8 where you also had to

00:09:22,480 --> 00:09:29,040
take care of the hdp version 2 changes

00:09:26,080 --> 00:09:29,760
so you can easily do a holding upgrade

00:09:29,040 --> 00:09:33,839
if i'm not

00:09:29,760 --> 00:09:37,600
right here i'm sure you may correct me

00:09:33,839 --> 00:09:39,920
that sounds absolutely right uh but

00:09:37,600 --> 00:09:42,080
just to summarize there's no easy way to

00:09:39,920 --> 00:09:45,600
do this but anyone who's on solar

00:09:42,080 --> 00:09:48,240
or lucien or elastic version

00:09:45,600 --> 00:09:49,279
elasticsearch version that uses prior to

00:09:48,240 --> 00:09:53,200
a lucien

00:09:49,279 --> 00:09:55,279
7 release right other than reindexing

00:09:53,200 --> 00:09:58,320
everything

00:09:55,279 --> 00:09:58,320
and making it work

00:09:58,640 --> 00:10:02,720
i yeah as i said there are some other

00:10:01,200 --> 00:10:06,320
possibilities

00:10:02,720 --> 00:10:08,079
but it needs hacking and um writing some

00:10:06,320 --> 00:10:12,240
lucien code on your own

00:10:08,079 --> 00:10:14,240
so it's very funny you sometimes have

00:10:12,240 --> 00:10:16,320
customers which have really really old

00:10:14,240 --> 00:10:18,720
indexes they still want to

00:10:16,320 --> 00:10:19,760
to get into newer versions and then it

00:10:18,720 --> 00:10:23,200
really gets funny

00:10:19,760 --> 00:10:27,600
so yeah that's uh that's something

00:10:23,200 --> 00:10:27,600
we can talk another time about that yes

00:10:29,040 --> 00:10:34,160
so we were getting questions on the

00:10:32,240 --> 00:10:36,640
channel so

00:10:34,160 --> 00:10:37,440
the question says hey i was attending

00:10:36,640 --> 00:10:39,600
ecir

00:10:37,440 --> 00:10:41,680
this year and they discussed about how

00:10:39,600 --> 00:10:44,079
great it is to see block max band

00:10:41,680 --> 00:10:44,720
implemented in lucine but they also

00:10:44,079 --> 00:10:47,040
discussed

00:10:44,720 --> 00:10:48,240
on why it takes so long for researchers

00:10:47,040 --> 00:10:50,399
to see their ideas

00:10:48,240 --> 00:10:53,440
implemented in real-world products or

00:10:50,399 --> 00:10:53,440
what's your take on this

00:10:53,920 --> 00:10:57,279
that's an interesting question i was

00:10:55,680 --> 00:11:00,800
expecting i should explain

00:10:57,279 --> 00:11:04,480
how that works

00:11:00,800 --> 00:11:07,839
feel free to we can take that offline

00:11:04,480 --> 00:11:11,120
i can do that later so but basically um

00:11:07,839 --> 00:11:15,839
basically uh it started already

00:11:11,120 --> 00:11:19,040
um in i think loser 2011 or 2012.

00:11:15,839 --> 00:11:21,839
i'm not 100 2 in vga boss

00:11:19,040 --> 00:11:22,160
he had a talk here at berlin buzzwords

00:11:21,839 --> 00:11:25,760
uh

00:11:22,160 --> 00:11:30,800
where there was a first version

00:11:25,760 --> 00:11:33,760
of of blog max already proposed

00:11:30,800 --> 00:11:34,880
and and that was already before lucy

00:11:33,760 --> 00:11:37,279
[Music]

00:11:34,880 --> 00:11:39,680
what i think it was with lucene 3.6 or

00:11:37,279 --> 00:11:42,399
maybe at the early time of louisiana 4

00:11:39,680 --> 00:11:44,480
and yet those new codex at that time so

00:11:42,399 --> 00:11:45,920
there were already some ideas how to

00:11:44,480 --> 00:11:48,480
implement that

00:11:45,920 --> 00:11:49,360
but the biggest problem was as always

00:11:48,480 --> 00:11:53,360
with

00:11:49,360 --> 00:11:55,839
theoretical stuff

00:11:53,360 --> 00:11:57,920
in theory it's in most cases it's quite

00:11:55,839 --> 00:12:00,560
easy to implement because you have

00:11:57,920 --> 00:12:04,240
something like an iso-related problem

00:12:00,560 --> 00:12:06,240
uh that that

00:12:04,240 --> 00:12:07,760
where you can create your index just

00:12:06,240 --> 00:12:10,399
based on

00:12:07,760 --> 00:12:11,360
on the requirements for that features

00:12:10,399 --> 00:12:14,000
but because you know

00:12:11,360 --> 00:12:14,480
lucine has a lot of more features than

00:12:14,000 --> 00:12:17,760
only

00:12:14,480 --> 00:12:20,160
scoring documents um so so you

00:12:17,760 --> 00:12:21,360
you know you have numeric fields and all

00:12:20,160 --> 00:12:25,760
that stuff

00:12:21,360 --> 00:12:28,639
that also are used in the scoring

00:12:25,760 --> 00:12:30,000
and the other thing is in lucine it's

00:12:28,639 --> 00:12:33,200
possible to easily

00:12:30,000 --> 00:12:34,639
change uh the scoring model that you're

00:12:33,200 --> 00:12:38,000
using so for example

00:12:34,639 --> 00:12:40,800
in the past we were using tf ief but now

00:12:38,000 --> 00:12:41,200
the default is pm25 but there are also

00:12:40,800 --> 00:12:44,000
other

00:12:41,200 --> 00:12:45,360
scoring algorithms that you can exchange

00:12:44,000 --> 00:12:48,000
and that works without

00:12:45,360 --> 00:12:49,839
reindexing the whole index and because

00:12:48,000 --> 00:12:52,480
of that

00:12:49,839 --> 00:12:53,040
the encoding of the index so the

00:12:52,480 --> 00:12:55,760
approach

00:12:53,040 --> 00:12:58,160
at that time was called max score so

00:12:55,760 --> 00:12:59,760
that was to store the maximum score of

00:12:58,160 --> 00:13:02,399
every document

00:12:59,760 --> 00:13:03,600
somehow in the in the posting list and

00:13:02,399 --> 00:13:05,680
the idea was

00:13:03,600 --> 00:13:06,639
unfortunately to calculate the score you

00:13:05,680 --> 00:13:09,360
need to know

00:13:06,639 --> 00:13:10,240
the the scoring algorithm that you want

00:13:09,360 --> 00:13:12,880
to use

00:13:10,240 --> 00:13:14,959
and if you save that statistics in the

00:13:12,880 --> 00:13:15,839
index you cannot switch it afterwards

00:13:14,959 --> 00:13:19,519
and that

00:13:15,839 --> 00:13:22,079
was something what we have to change and

00:13:19,519 --> 00:13:24,079
also from the index file format if you

00:13:22,079 --> 00:13:25,519
wanted to create the max score index you

00:13:24,079 --> 00:13:28,560
had to do that globally

00:13:25,519 --> 00:13:30,079
so merging was not working because there

00:13:28,560 --> 00:13:33,200
was no easy way

00:13:30,079 --> 00:13:35,360
to save that information and so

00:13:33,200 --> 00:13:36,959
that's basically the reason why it took

00:13:35,360 --> 00:13:39,760
so long and then

00:13:36,959 --> 00:13:40,639
uh i think it was adrian grant and some

00:13:39,760 --> 00:13:43,519
other people

00:13:40,639 --> 00:13:45,279
a few uh two or three years ago were

00:13:43,519 --> 00:13:48,000
reading some newer papers

00:13:45,279 --> 00:13:49,040
about that where people trying that old

00:13:48,000 --> 00:13:52,240
block max

00:13:49,040 --> 00:13:54,320
stuff and tried

00:13:52,240 --> 00:13:56,160
uh to implement it but actually the

00:13:54,320 --> 00:13:58,240
implementation in lucien

00:13:56,160 --> 00:13:59,600
is still different than what was

00:13:58,240 --> 00:14:01,920
originally proposed

00:13:59,600 --> 00:14:03,279
there because they were still using

00:14:01,920 --> 00:14:05,760
something like scores

00:14:03,279 --> 00:14:07,440
and and to store them in the index and

00:14:05,760 --> 00:14:09,519
our approach was

00:14:07,440 --> 00:14:11,600
uh to make it easier and also we figured

00:14:09,519 --> 00:14:12,800
out that the index file for microfluid

00:14:11,600 --> 00:14:15,279
is perfectly

00:14:12,800 --> 00:14:17,199
to put a second step on top of this

00:14:15,279 --> 00:14:20,480
maxscore algorithm

00:14:17,199 --> 00:14:20,959
which is those block stuff and because

00:14:20,480 --> 00:14:24,160
of that

00:14:20,959 --> 00:14:27,839
it's a block max and the block max

00:14:24,160 --> 00:14:30,079
algorithms were proposed much later than

00:14:27,839 --> 00:14:32,880
the max score so

00:14:30,079 --> 00:14:33,600
but we now implemented that and it's

00:14:32,880 --> 00:14:35,839
it's

00:14:33,600 --> 00:14:37,680
part of the russian code base and

00:14:35,839 --> 00:14:39,680
because the russian index already has

00:14:37,680 --> 00:14:41,279
something like a block structure in the

00:14:39,680 --> 00:14:44,399
postings

00:14:41,279 --> 00:14:46,720
so it was very very easy to add that the

00:14:44,399 --> 00:14:47,920
more complicated work was to change the

00:14:46,720 --> 00:14:50,720
queries

00:14:47,920 --> 00:14:51,199
and yes it's still ongoing work to

00:14:50,720 --> 00:14:54,480
change

00:14:51,199 --> 00:14:58,480
more and more queries uh to to use

00:14:54,480 --> 00:15:00,240
the block marks stuff so there's this

00:14:58,480 --> 00:15:03,920
fun quest and all that stuff which are

00:15:00,240 --> 00:15:07,440
still have to be reflected and changed

00:15:03,920 --> 00:15:10,639
great thank you so much um so

00:15:07,440 --> 00:15:13,920
uh maya sharipova uh is also the

00:15:10,639 --> 00:15:17,440
newest uh the scene computer now

00:15:13,920 --> 00:15:19,279
has a question uh has a question

00:15:17,440 --> 00:15:20,720
can you discuss how lucid is taking

00:15:19,279 --> 00:15:25,120
advantages of

00:15:20,720 --> 00:15:25,120
simd and processors that support this

00:15:25,199 --> 00:15:30,000
uh what type of roses ah okay ah yeah

00:15:28,160 --> 00:15:33,279
that's also something new

00:15:30,000 --> 00:15:35,440
you can uh that's something new

00:15:33,279 --> 00:15:37,600
unfortunately it's uh it's still not a

00:15:35,440 --> 00:15:38,160
new feature you can already try it out i

00:15:37,600 --> 00:15:41,600
think

00:15:38,160 --> 00:15:43,600
i'm not sure in which version it came so

00:15:41,600 --> 00:15:44,639
maybe she can answer the question on her

00:15:43,600 --> 00:15:49,120
own but

00:15:44,639 --> 00:15:49,759
um so the new instructions in the cpus

00:15:49,120 --> 00:15:52,800
we can

00:15:49,759 --> 00:15:55,839
use them in louisian but

00:15:52,800 --> 00:15:59,120
at the moment we cannot do that directly

00:15:55,839 --> 00:16:00,959
that's one of the back sides of using

00:15:59,120 --> 00:16:03,680
java as

00:16:00,959 --> 00:16:05,440
your your back-end system because we

00:16:03,680 --> 00:16:09,199
don't have any

00:16:05,440 --> 00:16:12,320
any possibilities to control how the

00:16:09,199 --> 00:16:16,720
how the how the compilation of the

00:16:12,320 --> 00:16:19,759
java code um in the hotspot built

00:16:16,720 --> 00:16:20,839
engine is doing when it creates machine

00:16:19,759 --> 00:16:25,120
code out of it

00:16:20,839 --> 00:16:28,480
so um but recently in your

00:16:25,120 --> 00:16:29,680
new java versions there were significant

00:16:28,480 --> 00:16:31,519
improvements

00:16:29,680 --> 00:16:33,199
i'm not sure about which java version

00:16:31,519 --> 00:16:35,279
you have minimally used

00:16:33,199 --> 00:16:36,320
so it might be that it don't work with

00:16:35,279 --> 00:16:40,720
java 8 i'm

00:16:36,320 --> 00:16:44,000
quite sure about that but with java 11

00:16:40,720 --> 00:16:45,839
you can be sure that the code is

00:16:44,000 --> 00:16:47,040
combined in a better way and the trick

00:16:45,839 --> 00:16:50,560
here was

00:16:47,040 --> 00:16:51,120
to the usual lucien trick i don't want

00:16:50,560 --> 00:16:54,480
to get

00:16:51,120 --> 00:16:57,920
too much into the details uh so

00:16:54,480 --> 00:17:00,000
it was also adrian grant um i i'm

00:16:57,920 --> 00:17:01,040
not sure if he's also here on the berlin

00:17:00,000 --> 00:17:05,039
buzzwords

00:17:01,040 --> 00:17:08,400
but he started to work together

00:17:05,039 --> 00:17:12,160
and try to optimize the

00:17:08,400 --> 00:17:15,199
code the index format a little bit

00:17:12,160 --> 00:17:18,000
and also the algorithms so the virtual

00:17:15,199 --> 00:17:20,640
machine the java virtual machine is able

00:17:18,000 --> 00:17:23,280
based on the structure of the other code

00:17:20,640 --> 00:17:26,400
to convert that into

00:17:23,280 --> 00:17:28,079
into those new instructions so

00:17:26,400 --> 00:17:30,080
we have to look at our compression

00:17:28,079 --> 00:17:30,880
algorithms that they are compatible to

00:17:30,080 --> 00:17:34,400
that

00:17:30,880 --> 00:17:38,480
sometimes uh the vp had to

00:17:34,400 --> 00:17:41,440
to uh to to uh change a little bit the

00:17:38,480 --> 00:17:43,360
encoding on disk uh to need a little bit

00:17:41,440 --> 00:17:45,360
more space so if longs and all that

00:17:43,360 --> 00:17:48,480
stuff and also in memory

00:17:45,360 --> 00:17:51,600
we are using now bytebuffers to to

00:17:48,480 --> 00:17:52,400
in to to load those posting lists but in

00:17:51,600 --> 00:17:54,640
that case

00:17:52,400 --> 00:17:56,640
you can parallelize a lot of stuff this

00:17:54,640 --> 00:17:57,440
is something like an ongoing process it

00:17:56,640 --> 00:18:00,799
doesn't

00:17:57,440 --> 00:18:03,520
work this oil cpus

00:18:00,799 --> 00:18:05,440
that are currently on market but luckily

00:18:03,520 --> 00:18:06,480
we don't need to compile our code we are

00:18:05,440 --> 00:18:09,440
hoping that

00:18:06,480 --> 00:18:12,000
the jdk is doing that and in the past

00:18:09,440 --> 00:18:14,799
this was already done for example

00:18:12,000 --> 00:18:16,559
a lot of code like filters where we are

00:18:14,799 --> 00:18:19,760
working with split sets

00:18:16,559 --> 00:18:20,160
is already highly optimized to work with

00:18:19,760 --> 00:18:22,720
those

00:18:20,160 --> 00:18:24,720
new instructions also in older versions

00:18:22,720 --> 00:18:28,400
it started with java 7

00:18:24,720 --> 00:18:30,559
and just some funny backgrounds

00:18:28,400 --> 00:18:32,160
those horrible bugs in java 7 were

00:18:30,559 --> 00:18:34,160
exactly caused by

00:18:32,160 --> 00:18:35,360
the virtual machine doing the wrong

00:18:34,160 --> 00:18:38,000
stuff in that

00:18:35,360 --> 00:18:39,280
regard and creating assembly code which

00:18:38,000 --> 00:18:42,080
was not correct

00:18:39,280 --> 00:18:44,400
so and this happened to lead to those

00:18:42,080 --> 00:18:46,720
crashes on some platforms or

00:18:44,400 --> 00:18:48,000
corrupt indexes and all that stuff so

00:18:46,720 --> 00:18:50,720
that's something we need

00:18:48,000 --> 00:18:52,160
two parts we need to optimize our code

00:18:50,720 --> 00:18:55,600
and the new code

00:18:52,160 --> 00:18:57,440
but there's also something else which

00:18:55,600 --> 00:19:01,840
might come a little bit later

00:18:57,440 --> 00:19:05,200
and that's going into project panama

00:19:01,840 --> 00:19:09,679
um that's a new project of the

00:19:05,200 --> 00:19:09,679
of open jdk that allows to have

00:19:09,840 --> 00:19:15,120
to call non-java methods from inside

00:19:12,960 --> 00:19:16,720
java so it's possible to create a method

00:19:15,120 --> 00:19:17,840
handle to call something like a

00:19:16,720 --> 00:19:20,320
librarian

00:19:17,840 --> 00:19:21,039
that is compiled in c code and that

00:19:20,320 --> 00:19:23,760
might be

00:19:21,039 --> 00:19:25,840
another possibility so we can ship

00:19:23,760 --> 00:19:28,960
lucine optionally with some

00:19:25,840 --> 00:19:31,440
pre-compiled binary blocks

00:19:28,960 --> 00:19:34,160
in the char file that can be directly

00:19:31,440 --> 00:19:36,000
accessed without speed

00:19:34,160 --> 00:19:37,520
so the problems you can still do that at

00:19:36,000 --> 00:19:40,080
the moment with

00:19:37,520 --> 00:19:41,120
java but the problem is the switch from

00:19:40,080 --> 00:19:44,640
the java

00:19:41,120 --> 00:19:46,960
to um to the c code is very very slow

00:19:44,640 --> 00:19:48,160
at the moment and with the new apis like

00:19:46,960 --> 00:19:51,120
metal tenders

00:19:48,160 --> 00:19:52,559
on c code looks like promising in that

00:19:51,120 --> 00:19:55,919
case and this

00:19:52,559 --> 00:19:58,880
i also talked about that already on on

00:19:55,919 --> 00:20:01,200
on the backhand this will also improve

00:19:58,880 --> 00:20:04,400
the memory map directory hopefully

00:20:01,200 --> 00:20:07,440
but this is something which is may take

00:20:04,400 --> 00:20:10,799
one year more i think i would expect

00:20:07,440 --> 00:20:15,280
java 17 may have that features

00:20:10,799 --> 00:20:17,520
coming in um

00:20:15,280 --> 00:20:20,159
there's a question with the new panama

00:20:17,520 --> 00:20:23,200
new java abilities to call c code uh

00:20:20,159 --> 00:20:27,120
just a curious question and when can

00:20:23,200 --> 00:20:27,120
we see lucine on gpu

00:20:27,440 --> 00:20:34,640
um i i didn't can you repeat

00:20:32,000 --> 00:20:35,760
with the new panorama java abilities to

00:20:34,640 --> 00:20:38,000
call c code

00:20:35,760 --> 00:20:39,039
uh yeah the question is like when can we

00:20:38,000 --> 00:20:42,159
see the scene

00:20:39,039 --> 00:20:45,280
uh working on gpus

00:20:42,159 --> 00:20:48,640
oh god yeah i

00:20:45,280 --> 00:20:50,559
i think there are some issues open but

00:20:48,640 --> 00:20:52,799
as always the answer to all these

00:20:50,559 --> 00:20:54,799
questions is

00:20:52,799 --> 00:20:56,400
nobody's working at the moment for it

00:20:54,799 --> 00:20:58,240
but if you're interested

00:20:56,400 --> 00:21:00,480
and you have the infrastructure to do

00:20:58,240 --> 00:21:03,679
that with your younger versions

00:21:00,480 --> 00:21:06,159
then just step in and

00:21:03,679 --> 00:21:07,360
i hope if you have some good ideas in

00:21:06,159 --> 00:21:11,200
your experience

00:21:07,360 --> 00:21:13,760
in using gpus

00:21:11,200 --> 00:21:16,720
then write some code which is the c code

00:21:13,760 --> 00:21:20,320
layer that we might use and then

00:21:16,720 --> 00:21:20,320
we can see how to include that

00:21:20,400 --> 00:21:24,640
perfect yes uh i would have guessed so i

00:21:22,720 --> 00:21:27,039
just asked that question because it

00:21:24,640 --> 00:21:27,679
it just came up and had like a ton of

00:21:27,039 --> 00:21:29,440
interest

00:21:27,679 --> 00:21:31,039
a lot of people just said yes we want to

00:21:29,440 --> 00:21:34,159
ask the same question

00:21:31,039 --> 00:21:36,880
um so okay now

00:21:34,159 --> 00:21:38,400
i already posted uh the lucine issue

00:21:36,880 --> 00:21:40,720
with the gpu

00:21:38,400 --> 00:21:43,440
yeah it's a long discussion issue it has

00:21:40,720 --> 00:21:46,400
lucine 7754 so it needs

00:21:43,440 --> 00:21:47,200
it seems to be four or five years old

00:21:46,400 --> 00:21:50,400
yeah

00:21:47,200 --> 00:21:53,679
um so the next question

00:21:50,400 --> 00:21:58,640
is from matteo uh please explain bm

00:21:53,679 --> 00:22:02,320
of beer man

00:21:58,640 --> 00:22:04,480
so um i i think i can do

00:22:02,320 --> 00:22:05,840
that because i have some slides for that

00:22:04,480 --> 00:22:08,480
already prepared

00:22:05,840 --> 00:22:09,919
because that's not so easy to explain

00:22:08,480 --> 00:22:13,600
this just talking so

00:22:09,919 --> 00:22:16,000
okay the slides are coming in so

00:22:13,600 --> 00:22:17,679
that's ten times faster queries so

00:22:16,000 --> 00:22:20,159
what's going on there i

00:22:17,679 --> 00:22:21,039
i will not go too much into the details

00:22:20,159 --> 00:22:24,080
because i think

00:22:21,039 --> 00:22:27,200
most people here will stop uh thinking

00:22:24,080 --> 00:22:30,320
and just touching their beers and

00:22:27,200 --> 00:22:33,520
drinking too much of that so

00:22:30,320 --> 00:22:36,880
um uh the

00:22:33,520 --> 00:22:38,720
the main changes as said before uh

00:22:36,880 --> 00:22:41,039
but what what's the background of be

00:22:38,720 --> 00:22:43,760
happy of the block marks

00:22:41,039 --> 00:22:44,960
run this the idea is to short circuit

00:22:43,760 --> 00:22:48,159
all the queries

00:22:44,960 --> 00:22:50,480
where the total count is not needed so

00:22:48,159 --> 00:22:52,320
you might know that already from google

00:22:50,480 --> 00:22:53,200
so for example if you're searching in

00:22:52,320 --> 00:22:56,320
google

00:22:53,200 --> 00:22:58,960
you see on top of your documents

00:22:56,320 --> 00:22:59,919
some information like we found a lot of

00:22:58,960 --> 00:23:02,480
documents sometimes

00:22:59,919 --> 00:23:04,240
it's an exact number like we found 100

00:23:02,480 --> 00:23:06,000
documents which is very seldom in most

00:23:04,240 --> 00:23:06,960
cases but if you're very specific with

00:23:06,000 --> 00:23:09,120
keywords

00:23:06,960 --> 00:23:10,559
it works but at some point it will

00:23:09,120 --> 00:23:12,640
simply tell you

00:23:10,559 --> 00:23:14,240
we found a lot of documents we don't

00:23:12,640 --> 00:23:18,000
tell you exactly how many there

00:23:14,240 --> 00:23:21,280
are and the reason for that is because

00:23:18,000 --> 00:23:24,240
currently when luzine is running

00:23:21,280 --> 00:23:25,360
and executing a query the problem is to

00:23:24,240 --> 00:23:28,240
actually get

00:23:25,360 --> 00:23:29,840
the top documents the top 10 documents

00:23:28,240 --> 00:23:31,600
that you're displaying in your search

00:23:29,840 --> 00:23:34,720
results it has to process

00:23:31,600 --> 00:23:36,799
all the hits because it has to calculate

00:23:34,720 --> 00:23:40,000
the score and put

00:23:36,799 --> 00:23:43,120
the document into a priority queue

00:23:40,000 --> 00:23:44,880
and the priority queue so whenever a new

00:23:43,120 --> 00:23:46,640
document comes in it just puts it into

00:23:44,880 --> 00:23:49,200
the priority queue and at the end

00:23:46,640 --> 00:23:50,960
only the top ranking documents are left

00:23:49,200 --> 00:23:52,000
over because everything that's not part

00:23:50,960 --> 00:23:55,039
of the priority

00:23:52,000 --> 00:23:56,880
key eq is falling out

00:23:55,039 --> 00:23:58,960
at the end there are already something

00:23:56,880 --> 00:24:00,640
some optimizations in that process so

00:23:58,960 --> 00:24:02,960
for example if it figures out

00:24:00,640 --> 00:24:04,000
the calculated score is too low already

00:24:02,960 --> 00:24:07,200
it doesn't even

00:24:04,000 --> 00:24:09,919
try to insert it into the priority queue

00:24:07,200 --> 00:24:11,840
and just throws it away immediately but

00:24:09,919 --> 00:24:13,039
you still have to calculate the score of

00:24:11,840 --> 00:24:16,320
the document

00:24:13,039 --> 00:24:20,240
and the idea here is how can we

00:24:16,320 --> 00:24:22,960
make losing ignore

00:24:20,240 --> 00:24:24,960
and not ignore ignore those hits which

00:24:22,960 --> 00:24:28,080
are not competitive at all

00:24:24,960 --> 00:24:30,799
and the idea as told before was

00:24:28,080 --> 00:24:32,000
to put some additional information into

00:24:30,799 --> 00:24:35,120
the index

00:24:32,000 --> 00:24:37,520
so during execution of the query you can

00:24:35,120 --> 00:24:39,840
figure out without actually calculating

00:24:37,520 --> 00:24:43,200
the score and collecting the hit

00:24:39,840 --> 00:24:45,360
er that that a bunch of documents

00:24:43,200 --> 00:24:46,960
which in most cases somehow in a block

00:24:45,360 --> 00:24:48,880
together in your index

00:24:46,960 --> 00:24:51,520
so you see something like the posting

00:24:48,880 --> 00:24:52,559
list consists of blocks of 100 documents

00:24:51,520 --> 00:24:54,400
for example

00:24:52,559 --> 00:24:56,559
you can say okay the next one of the

00:24:54,400 --> 00:24:58,159
documents are not interesting at all

00:24:56,559 --> 00:25:00,400
because the score that would be

00:24:58,159 --> 00:25:03,039
calculated based on the statistics

00:25:00,400 --> 00:25:03,520
of that block is too low and though i

00:25:03,039 --> 00:25:06,799
can

00:25:03,520 --> 00:25:10,000
just jump over the block and

00:25:06,799 --> 00:25:10,960
this new change was implemented for some

00:25:10,000 --> 00:25:14,960
queries

00:25:10,960 --> 00:25:17,200
like the term query uh which is

00:25:14,960 --> 00:25:19,440
easy you're just jumping into a term and

00:25:17,200 --> 00:25:22,559
then you're consuming the posting list

00:25:19,440 --> 00:25:25,600
but all the other stuff like uh the w

00:25:22,559 --> 00:25:27,919
in the one block marks is then

00:25:25,600 --> 00:25:29,840
related to boolean query and that's very

00:25:27,919 --> 00:25:33,279
important for these junctions

00:25:29,840 --> 00:25:36,799
if you have a conjunction in most cases

00:25:33,279 --> 00:25:38,400
it's not so bad because um yeah

00:25:36,799 --> 00:25:39,840
you're just ending together in your

00:25:38,400 --> 00:25:42,799
terms but if you are having an

00:25:39,840 --> 00:25:42,799
awkward value

00:25:42,960 --> 00:25:46,799
it's enough to have something like a

00:25:44,559 --> 00:25:48,320
stop word in your query

00:25:46,799 --> 00:25:50,159
and that's also the reason why in the

00:25:48,320 --> 00:25:51,760
past most people said you don't want to

00:25:50,159 --> 00:25:52,559
have stock words software's in your

00:25:51,760 --> 00:25:55,679
index

00:25:52,559 --> 00:25:57,760
because on an awkwary uh that gets

00:25:55,679 --> 00:25:59,840
horrible horrible slow because you have

00:25:57,760 --> 00:26:00,960
to iterate the posting list of all those

00:25:59,840 --> 00:26:04,000
gravies

00:26:00,960 --> 00:26:05,919
and then it takes very very long time so

00:26:04,000 --> 00:26:08,240
you have queries taking two three four

00:26:05,919 --> 00:26:10,240
seconds sometimes for large indexes if

00:26:08,240 --> 00:26:13,120
you're asking for a stop word

00:26:10,240 --> 00:26:15,360
and also for phrase queries and there

00:26:13,120 --> 00:26:17,039
was also recently addition of consensual

00:26:15,360 --> 00:26:19,919
ways but how

00:26:17,039 --> 00:26:21,279
uh how does it work now so what we are

00:26:19,919 --> 00:26:24,159
doing is we

00:26:21,279 --> 00:26:24,799
we add not something like this score to

00:26:24,159 --> 00:26:27,840
our

00:26:24,799 --> 00:26:31,120
um to our um

00:26:27,840 --> 00:26:32,799
to our uh posting lists so that was the

00:26:31,120 --> 00:26:35,279
original proposal

00:26:32,799 --> 00:26:37,120
uh and this is why it took a little bit

00:26:35,279 --> 00:26:38,880
longer to do that the idea here is

00:26:37,120 --> 00:26:42,159
because we still want to have

00:26:38,880 --> 00:26:44,000
the information and change uh

00:26:42,159 --> 00:26:46,480
change for example the scoring model

00:26:44,000 --> 00:26:48,880
like from t from tf idf we want to

00:26:46,480 --> 00:26:50,000
switch to pm25 or something completely

00:26:48,880 --> 00:26:52,480
different

00:26:50,000 --> 00:26:54,799
and because of that we did not store

00:26:52,480 --> 00:26:57,679
something like a single value

00:26:54,799 --> 00:26:58,880
in the in in our posting list but

00:26:57,679 --> 00:27:01,200
instead via score

00:26:58,880 --> 00:27:02,240
is storing the maximum term frequency

00:27:01,200 --> 00:27:05,520
for block

00:27:02,240 --> 00:27:08,400
in the posting list and we are

00:27:05,520 --> 00:27:10,559
putting in the norm and with that

00:27:08,400 --> 00:27:12,240
information for our role block you can

00:27:10,559 --> 00:27:14,640
of course calculate

00:27:12,240 --> 00:27:16,480
the score the maximum score of that

00:27:14,640 --> 00:27:18,880
block and then can say okay

00:27:16,480 --> 00:27:19,520
those documents are not interesting and

00:27:18,880 --> 00:27:23,360
we just

00:27:19,520 --> 00:27:25,440
skip over them and because of that

00:27:23,360 --> 00:27:27,279
there are still some requirements on

00:27:25,440 --> 00:27:29,279
that so for example

00:27:27,279 --> 00:27:31,279
you are not completely free with your

00:27:29,279 --> 00:27:35,440
scoring algorithm so for example

00:27:31,279 --> 00:27:36,720
if the tf raises so if the tf goes up

00:27:35,440 --> 00:27:38,960
monotone

00:27:36,720 --> 00:27:40,480
it must the score must also go up

00:27:38,960 --> 00:27:41,840
monotone so if you have something like a

00:27:40,480 --> 00:27:44,960
scoring algorithm

00:27:41,840 --> 00:27:46,880
which uh which has uh

00:27:44,960 --> 00:27:48,240
it was interestingly yesterday in the

00:27:46,880 --> 00:27:50,159
evening in the talk there was some

00:27:48,240 --> 00:27:53,120
discussion about that maybe people

00:27:50,159 --> 00:27:55,039
having putting repeating their words

00:27:53,120 --> 00:27:57,600
should be

00:27:55,039 --> 00:27:58,640
should get a bad score at the end

00:27:57,600 --> 00:28:00,480
because you know in

00:27:58,640 --> 00:28:02,720
in some shops this bed but if you have

00:28:00,480 --> 00:28:06,000
something like that you cannot use

00:28:02,720 --> 00:28:06,799
that approach so that if it if it goes

00:28:06,000 --> 00:28:09,200
up

00:28:06,799 --> 00:28:10,320
uh the that must be same and for the

00:28:09,200 --> 00:28:13,360
norm

00:28:10,320 --> 00:28:15,360
it's very similar um to do that so

00:28:13,360 --> 00:28:17,200
the document frequency and all that

00:28:15,360 --> 00:28:20,080
stuff need to be somehow

00:28:17,200 --> 00:28:21,840
predictable so it must be monotone so

00:28:20,080 --> 00:28:23,840
the score is expectable

00:28:21,840 --> 00:28:26,159
because otherwise the algorithm would

00:28:23,840 --> 00:28:26,640
not work and the cool thing now with the

00:28:26,159 --> 00:28:30,000
block

00:28:26,640 --> 00:28:31,840
stuff is that is um

00:28:30,000 --> 00:28:33,600
this can also be done on a multi

00:28:31,840 --> 00:28:36,559
multi-level approach

00:28:33,600 --> 00:28:38,960
and if you see that multi level you can

00:28:36,559 --> 00:28:40,960
think of story as doing that

00:28:38,960 --> 00:28:43,679
in the skip list and that was a great

00:28:40,960 --> 00:28:47,840
idea that

00:28:43,679 --> 00:28:51,919
that we had at that time

00:28:47,840 --> 00:28:52,399
um so the original paper for that was i

00:28:51,919 --> 00:28:57,200
think

00:28:52,399 --> 00:29:01,600
not long ago i think it was in cigar 11

00:28:57,200 --> 00:29:01,600
using block max indexes and

00:29:01,919 --> 00:29:06,240
so how does it work at all so basically

00:29:04,880 --> 00:29:10,240
what is a skip list

00:29:06,240 --> 00:29:12,399
so then and that's the main slide

00:29:10,240 --> 00:29:13,520
which hopefully explains what what is

00:29:12,399 --> 00:29:15,760
happening so

00:29:13,520 --> 00:29:17,760
uh what you see here you have a you have

00:29:15,760 --> 00:29:20,240
for example a skip list for lucien

00:29:17,760 --> 00:29:22,240
and for search so we do you have a

00:29:20,240 --> 00:29:24,320
lucien search that's your favorite

00:29:22,240 --> 00:29:26,240
and you're searching uh then you're

00:29:24,320 --> 00:29:26,720
first looking up lucine and search in

00:29:26,240 --> 00:29:28,799
your

00:29:26,720 --> 00:29:30,000
dictionary and then you get a list the

00:29:28,799 --> 00:29:32,799
posting list

00:29:30,000 --> 00:29:35,279
and in the posting list it's just a list

00:29:32,799 --> 00:29:38,399
of numbers so in that case lucine is

00:29:35,279 --> 00:29:42,000
included in documents 3

00:29:38,399 --> 00:29:45,279
7 8 15 16 19 32

00:29:42,000 --> 00:29:48,080
49 51 56 and

00:29:45,279 --> 00:29:50,000
something like that and as the same is

00:29:48,080 --> 00:29:53,039
for the search query

00:29:50,000 --> 00:29:54,799
for search for the search term you also

00:29:53,039 --> 00:29:56,159
have some document numbers so there are

00:29:54,799 --> 00:29:58,399
two possibilities

00:29:56,159 --> 00:29:59,360
a lot of people know for end queries you

00:29:58,399 --> 00:30:01,919
have uh

00:29:59,360 --> 00:30:04,320
those deep rock approach so you're

00:30:01,919 --> 00:30:06,559
jumping going forward in the list

00:30:04,320 --> 00:30:07,520
and that's why the skip list is there so

00:30:06,559 --> 00:30:09,840
for example for an

00:30:07,520 --> 00:30:11,279
end query you want to find the overlap

00:30:09,840 --> 00:30:14,320
so that means the first

00:30:11,279 --> 00:30:15,120
hit is the number seven where both are

00:30:14,320 --> 00:30:18,240
inside so

00:30:15,120 --> 00:30:20,559
that means you are you're first moving

00:30:18,240 --> 00:30:22,000
the lucine iterator forward and then you

00:30:20,559 --> 00:30:24,480
are one on seven

00:30:22,000 --> 00:30:26,399
but then you are asking the other

00:30:24,480 --> 00:30:28,960
iterator please go

00:30:26,399 --> 00:30:30,880
forward but the minimum document i'm

00:30:28,960 --> 00:30:31,279
interested in would be document number

00:30:30,880 --> 00:30:33,919
seven

00:30:31,279 --> 00:30:35,440
and then the second iterator which is

00:30:33,919 --> 00:30:39,120
positioned on search

00:30:35,440 --> 00:30:42,399
is moving forward and um

00:30:39,120 --> 00:30:45,840
so it skips already the four uh the four

00:30:42,399 --> 00:30:48,480
five uh the four and the five document

00:30:45,840 --> 00:30:50,720
so for example and then once they both

00:30:48,480 --> 00:30:52,880
landed on seven

00:30:50,720 --> 00:30:54,640
the next one is a 15 and so they're

00:30:52,880 --> 00:30:55,679
jumping sometimes it would help with

00:30:54,640 --> 00:30:58,240
that jumping

00:30:55,679 --> 00:31:00,240
you have those skid lists so when

00:30:58,240 --> 00:31:01,279
something is in the first block which is

00:31:00,240 --> 00:31:03,679
on three

00:31:01,279 --> 00:31:05,760
there is information that you can jump

00:31:03,679 --> 00:31:08,080
to document number fifth and by just

00:31:05,760 --> 00:31:09,200
going there and so it can skip over all

00:31:08,080 --> 00:31:11,120
those documents

00:31:09,200 --> 00:31:12,880
because they are somehow compressed and

00:31:11,120 --> 00:31:13,519
the size of this compression is not

00:31:12,880 --> 00:31:16,080
known

00:31:13,519 --> 00:31:18,240
so it knows where to go and then it uh

00:31:16,080 --> 00:31:21,360
it's it's on the 15 document

00:31:18,240 --> 00:31:24,640
and um the idea here now is

00:31:21,360 --> 00:31:26,480
uh to add to that skip list

00:31:24,640 --> 00:31:28,880
although that information and now from

00:31:26,480 --> 00:31:30,880
the multi skip list levels this also be

00:31:28,880 --> 00:31:33,760
offered in multiple levels

00:31:30,880 --> 00:31:36,559
so if somebody's on the first block he

00:31:33,760 --> 00:31:39,840
can also say okay i need to go to

00:31:36,559 --> 00:31:42,320
document 49

00:31:39,840 --> 00:31:46,080
so it can just jump over everything and

00:31:42,320 --> 00:31:48,000
then it lands on 33 or maybe on 46

00:31:46,080 --> 00:31:50,159
and then from there it can iterate

00:31:48,000 --> 00:31:51,600
further and you see here that's an easy

00:31:50,159 --> 00:31:54,080
way to skip

00:31:51,600 --> 00:31:56,399
and now what's coming on here is what we

00:31:54,080 --> 00:31:59,039
are doing here is we are simply storing

00:31:56,399 --> 00:32:00,799
the term frequency the maximum term

00:31:59,039 --> 00:32:04,720
frequency

00:32:00,799 --> 00:32:05,760
for those information lie inside that

00:32:04,720 --> 00:32:08,480
skip list

00:32:05,760 --> 00:32:09,279
so we know that the maximum term

00:32:08,480 --> 00:32:13,519
frequency

00:32:09,279 --> 00:32:17,039
of the leucine in documents 3 7 8 and 15

00:32:13,519 --> 00:32:19,760
no 3 3 7 and 8 is 3.

00:32:17,039 --> 00:32:21,519
so that means if we are already during

00:32:19,760 --> 00:32:24,399
collecting the documents

00:32:21,519 --> 00:32:26,000
we know that the score is for example

00:32:24,399 --> 00:32:28,880
the current score is something

00:32:26,000 --> 00:32:31,840
25 and be based on the norm we know we

00:32:28,880 --> 00:32:34,960
need a minimum term frequency of three

00:32:31,840 --> 00:32:38,159
then we can say okay i'm asking this uh

00:32:34,960 --> 00:32:40,799
there's the skip list and say

00:32:38,159 --> 00:32:41,679
okay let's jump forward get me to a

00:32:40,799 --> 00:32:44,240
document

00:32:41,679 --> 00:32:44,960
where the term frequency is greater than

00:32:44,240 --> 00:32:46,880
three

00:32:44,960 --> 00:32:48,640
and in that case it can also use the

00:32:46,880 --> 00:32:51,039
multi-level skip list in that case it

00:32:48,640 --> 00:32:55,519
can jump to document 33

00:32:51,039 --> 00:32:58,880
and jump over two blocks already and

00:32:55,519 --> 00:33:02,720
in that case it's then uh possible

00:32:58,880 --> 00:33:04,880
to uh to skip over those documents the

00:33:02,720 --> 00:33:07,120
only information that you lose of course

00:33:04,880 --> 00:33:08,480
is the total number of documents that

00:33:07,120 --> 00:33:11,519
were hit

00:33:08,480 --> 00:33:12,399
and that's why uh by sometimes you

00:33:11,519 --> 00:33:14,080
cannot use

00:33:12,399 --> 00:33:15,760
that at all but for example if you are

00:33:14,080 --> 00:33:19,440
not interested in the top number

00:33:15,760 --> 00:33:22,880
of documents you can quickly uh

00:33:19,440 --> 00:33:24,880
go over them yeah so

00:33:22,880 --> 00:33:27,679
um if there are any other questions we

00:33:24,880 --> 00:33:31,519
can also think about that later

00:33:27,679 --> 00:33:34,799
so thanks uv for that great explanation

00:33:31,519 --> 00:33:37,600
uh super useful uh

00:33:34,799 --> 00:33:38,320
there is a question about do you have to

00:33:37,600 --> 00:33:41,600
change

00:33:38,320 --> 00:33:44,799
uh the version in config.xml for

00:33:41,600 --> 00:33:48,559
solar to 9.0 or 8.6

00:33:44,799 --> 00:33:52,240
in order to use uh

00:33:48,559 --> 00:33:52,799
this feature does the config and solar

00:33:52,240 --> 00:33:56,000
require

00:33:52,799 --> 00:33:57,440
any changes uh in terms of explicitly

00:33:56,000 --> 00:34:01,279
specifying the version

00:33:57,440 --> 00:34:04,720
to use that um no not necessarily

00:34:01,279 --> 00:34:06,799
um so so basically this in most cases a

00:34:04,720 --> 00:34:09,599
problem with upgrading zola

00:34:06,799 --> 00:34:10,480
so that's maybe some addendum to what i

00:34:09,599 --> 00:34:13,839
said before

00:34:10,480 --> 00:34:17,040
and i think um i think uh

00:34:13,839 --> 00:34:19,040
anshum you will confirm that so whenever

00:34:17,040 --> 00:34:20,399
you are upgrading zola you should look

00:34:19,040 --> 00:34:23,200
into the version numbers

00:34:20,399 --> 00:34:24,879
of your schema xml because sometimes if

00:34:23,200 --> 00:34:27,119
you're keeping the old version

00:34:24,879 --> 00:34:28,240
you get very very bad defaults so i have

00:34:27,119 --> 00:34:31,200
a lot of customers

00:34:28,240 --> 00:34:33,679
with very very old schemas and where the

00:34:31,200 --> 00:34:35,200
default is to not enable dock values on

00:34:33,679 --> 00:34:36,240
their indexes and then they are

00:34:35,200 --> 00:34:39,839
complaining

00:34:36,240 --> 00:34:42,000
that their heap space overflows because

00:34:39,839 --> 00:34:43,679
they just upgraded lucien they're hoping

00:34:42,000 --> 00:34:45,599
that dog values are enabled and

00:34:43,679 --> 00:34:48,720
everything works and then

00:34:45,599 --> 00:34:50,879
they get get a deep space out of memory

00:34:48,720 --> 00:34:52,560
and all that stuff so basically but for

00:34:50,879 --> 00:34:54,560
that features you don't need to change

00:34:52,560 --> 00:34:58,400
anything you just need to upgrade

00:34:54,560 --> 00:34:59,440
the new loosened version and so for the

00:34:58,400 --> 00:35:02,640
block max

00:34:59,440 --> 00:35:05,680
stuff to get that feature in

00:35:02,640 --> 00:35:07,280
zola you have to wait for 8.6 coming out

00:35:05,680 --> 00:35:09,760
hopefully soon

00:35:07,280 --> 00:35:10,960
and then it will be enabled i think the

00:35:09,760 --> 00:35:13,119
default is still

00:35:10,960 --> 00:35:15,440
that all the results are counted and the

00:35:13,119 --> 00:35:19,280
runner wasn't sure about that

00:35:15,440 --> 00:35:21,040
but the result format will also change a

00:35:19,280 --> 00:35:23,040
little bit so you get the information

00:35:21,040 --> 00:35:23,359
about the number of hits collected and

00:35:23,040 --> 00:35:25,520
some

00:35:23,359 --> 00:35:28,000
information if it's an exact exact

00:35:25,520 --> 00:35:29,359
number or if it's not exact so it's

00:35:28,000 --> 00:35:32,160
something like a boolean

00:35:29,359 --> 00:35:32,720
and i think you can only also tell him

00:35:32,160 --> 00:35:35,200
during

00:35:32,720 --> 00:35:36,400
the 20 execution by a 20 parameter i'm

00:35:35,200 --> 00:35:38,240
not sure if this is yet

00:35:36,400 --> 00:35:39,920
implemented already i think the default

00:35:38,240 --> 00:35:43,520
is one thousand

00:35:39,920 --> 00:35:45,280
uh so yeah yeah

00:35:43,520 --> 00:35:46,800
i don't yeah i i think that it was

00:35:45,280 --> 00:35:47,920
supposed it's supposed to be done it's

00:35:46,800 --> 00:35:49,599
not done yet

00:35:47,920 --> 00:35:51,599
it's not that done yet yeah so so

00:35:49,599 --> 00:35:53,440
basically you can simply say i want to

00:35:51,599 --> 00:35:56,880
get exact numbers up to

00:35:53,440 --> 00:35:59,280
maybe 10 000 documents and then once

00:35:56,880 --> 00:36:00,320
the ten thousand documents are collected

00:35:59,280 --> 00:36:04,160
it simply

00:36:00,320 --> 00:36:05,440
stops uh stops uh counting exactly and

00:36:04,160 --> 00:36:08,240
then it will use

00:36:05,440 --> 00:36:09,440
the skip list to jump over uh the

00:36:08,240 --> 00:36:11,440
documents

00:36:09,440 --> 00:36:12,960
so but that's something you have to

00:36:11,440 --> 00:36:15,280
explicitly enable

00:36:12,960 --> 00:36:16,160
and you need to explicitly enable that

00:36:15,280 --> 00:36:18,400
because

00:36:16,160 --> 00:36:20,480
it doesn't work with all types of query

00:36:18,400 --> 00:36:21,440
so for example if you enable faceting on

00:36:20,480 --> 00:36:23,760
your queries

00:36:21,440 --> 00:36:25,599
it won't work because then you will also

00:36:23,760 --> 00:36:27,040
get incomplete fuzz accounts and all

00:36:25,599 --> 00:36:30,480
that stuff

00:36:27,040 --> 00:36:32,720
so which is not really wanted but

00:36:30,480 --> 00:36:34,320
in that case you have to think a little

00:36:32,720 --> 00:36:36,800
bit about how to do that

00:36:34,320 --> 00:36:39,200
in your code so one recommendation would

00:36:36,800 --> 00:36:40,079
be to just execute the query without

00:36:39,200 --> 00:36:42,079
facets

00:36:40,079 --> 00:36:43,680
show the results very very early and

00:36:42,079 --> 00:36:46,960
then in the background

00:36:43,680 --> 00:36:47,680
calculate the facets and deliver it to

00:36:46,960 --> 00:36:49,119
your website

00:36:47,680 --> 00:36:51,680
might be there's an ayax caller

00:36:49,119 --> 00:36:53,680
something like that and

00:36:51,680 --> 00:36:54,960
that would be some possibility how to do

00:36:53,680 --> 00:36:58,480
that but in general

00:36:54,960 --> 00:37:01,599
i think everything keeps the default

00:36:58,480 --> 00:37:04,960
yep um

00:37:01,599 --> 00:37:05,599
we have another question i remember some

00:37:04,960 --> 00:37:08,640
discussion

00:37:05,599 --> 00:37:11,200
about vector a n search in

00:37:08,640 --> 00:37:13,920
a jira issue is there anything in the

00:37:11,200 --> 00:37:16,560
works for lucy 9.0

00:37:13,920 --> 00:37:18,640
or is this still being discussed uh

00:37:16,560 --> 00:37:20,240
happy to get an update about the ongoing

00:37:18,640 --> 00:37:23,280
discussions as well

00:37:20,240 --> 00:37:23,280
oh no vector

00:37:28,320 --> 00:37:33,200
so basically the discussions are still

00:37:32,000 --> 00:37:36,800
going on

00:37:33,200 --> 00:37:37,599
um and it's very very funny the issue is

00:37:36,800 --> 00:37:39,599
open one

00:37:37,599 --> 00:37:42,000
year and there's recently came in the

00:37:39,599 --> 00:37:44,320
new approach to do the same

00:37:42,000 --> 00:37:46,480
and i know for example that

00:37:44,320 --> 00:37:47,599
elasticsearch has its own approach at

00:37:46,480 --> 00:37:48,960
the moment they

00:37:47,599 --> 00:37:50,800
so they are also doing

00:37:48,960 --> 00:37:53,599
[Music]

00:37:50,800 --> 00:37:55,200
doing doing something like indexing of

00:37:53,599 --> 00:37:56,720
vectors but they have a different

00:37:55,200 --> 00:37:58,640
approach and everything is somehow

00:37:56,720 --> 00:37:59,680
waiting for a leucine internal

00:37:58,640 --> 00:38:01,680
implementation

00:37:59,680 --> 00:38:03,839
but currently people are discussing so

00:38:01,680 --> 00:38:05,920
there's an issue of monsola

00:38:03,839 --> 00:38:08,160
on the solar issue there's a proposal to

00:38:05,920 --> 00:38:11,280
implement it only in zola

00:38:08,160 --> 00:38:14,640
which is somehow similar to what happens

00:38:11,280 --> 00:38:17,920
in elasticsearch and then

00:38:14,640 --> 00:38:18,560
the people from from around nightmare

00:38:17,920 --> 00:38:22,320
candles

00:38:18,560 --> 00:38:26,400
and mike the two bikes from

00:38:22,320 --> 00:38:28,480
amazon are looking into that issue and

00:38:26,400 --> 00:38:31,760
they already implemented something

00:38:28,480 --> 00:38:34,800
and the final step now is as always

00:38:31,760 --> 00:38:37,200
it sounds cool in in

00:38:34,800 --> 00:38:39,359
in isolation but at the end you want to

00:38:37,200 --> 00:38:42,640
have something like genetic how we

00:38:39,359 --> 00:38:46,079
how we want to index those

00:38:42,640 --> 00:38:48,560
vectors and the newest issue now opened

00:38:46,079 --> 00:38:49,760
i think on may 20 or something like that

00:38:48,560 --> 00:38:52,400
was about

00:38:49,760 --> 00:38:54,240
we need something like an abstract api

00:38:52,400 --> 00:38:56,960
for the posting format

00:38:54,240 --> 00:38:57,599
and an api and something like a standard

00:38:56,960 --> 00:38:59,520
interface

00:38:57,599 --> 00:39:01,359
to access posting formats so we can

00:38:59,520 --> 00:39:04,320
implement both proposals

00:39:01,359 --> 00:39:05,920
of posting formats and so we need to see

00:39:04,320 --> 00:39:08,960
something in the overlap so

00:39:05,920 --> 00:39:11,599
we don't have to be that too much

00:39:08,960 --> 00:39:13,359
glued into the queries somehow so we

00:39:11,599 --> 00:39:15,359
need something like the queries

00:39:13,359 --> 00:39:17,200
and so they need to be something like

00:39:15,359 --> 00:39:20,240
that because the current approach

00:39:17,200 --> 00:39:23,599
that was posted on regime is

00:39:20,240 --> 00:39:26,480
is not a new index format the

00:39:23,599 --> 00:39:27,760
the original version i think that was

00:39:26,480 --> 00:39:30,560
one year ago

00:39:27,760 --> 00:39:31,839
was using payloads and dock values but

00:39:30,560 --> 00:39:33,680
i'm not going to message you i think

00:39:31,839 --> 00:39:35,920
because payloads or top values

00:39:33,680 --> 00:39:37,920
i think dock values in that case and i

00:39:35,920 --> 00:39:40,320
think the the elasticsearch version is

00:39:37,920 --> 00:39:43,839
also using top values for that

00:39:40,320 --> 00:39:45,920
um which is which is just a workaround

00:39:43,839 --> 00:39:48,000
to store that information but it has

00:39:45,920 --> 00:39:50,400
some overhead on the credit time

00:39:48,000 --> 00:39:51,920
so in that case uh we would need

00:39:50,400 --> 00:39:55,200
something like a special

00:39:51,920 --> 00:39:56,000
index format um so something that

00:39:55,200 --> 00:39:58,880
describes

00:39:56,000 --> 00:40:00,000
the index format and then api to access

00:39:58,880 --> 00:40:03,040
those structures

00:40:00,000 --> 00:40:04,319
on the lower level so it's hot at the

00:40:03,040 --> 00:40:07,760
moment again

00:40:04,319 --> 00:40:08,079
but um i would not expect that to come

00:40:07,760 --> 00:40:11,520
for

00:40:08,079 --> 00:40:15,040
lucien 9.0 but as always

00:40:11,520 --> 00:40:17,280
help us help us with that and

00:40:15,040 --> 00:40:18,400
i think there are a lot of problems to

00:40:17,280 --> 00:40:21,040
solve

00:40:18,400 --> 00:40:23,680
like for example luzine is using this

00:40:21,040 --> 00:40:25,680
segmented index structure so merging

00:40:23,680 --> 00:40:27,440
gets it gets very very expensive and all

00:40:25,680 --> 00:40:29,680
that stuff so

00:40:27,440 --> 00:40:31,680
we have to find solutions for that so

00:40:29,680 --> 00:40:35,430
and we were also discussing yesterday

00:40:31,680 --> 00:40:37,280
in the other question round

00:40:35,430 --> 00:40:39,520
[Music]

00:40:37,280 --> 00:40:40,960
where it was already discussed so it

00:40:39,520 --> 00:40:42,960
would be good to have the

00:40:40,960 --> 00:40:44,880
the vectors in leucine but you cannot

00:40:42,960 --> 00:40:46,400
simply carry only on the vector so you

00:40:44,880 --> 00:40:49,200
always need something like a

00:40:46,400 --> 00:40:51,119
combined approach so that looks like

00:40:49,200 --> 00:40:52,720
learning learning to rank or something

00:40:51,119 --> 00:40:54,400
like that so you're first getting

00:40:52,720 --> 00:40:56,640
something like 1000

00:40:54,400 --> 00:40:57,760
top ranking results by conventional

00:40:56,640 --> 00:41:00,880
search and then

00:40:57,760 --> 00:41:01,599
the top 1000 results you would go and

00:41:00,880 --> 00:41:04,400
use

00:41:01,599 --> 00:41:06,640
the vectors in the index to get the

00:41:04,400 --> 00:41:09,040
final top 10 or something like that so

00:41:06,640 --> 00:41:11,040
doing that on the whole index is likely

00:41:09,040 --> 00:41:15,680
to blow up you

00:41:11,040 --> 00:41:15,680
i think does this explain a little bit

00:41:15,760 --> 00:41:21,920
yes yes sounds good to me um

00:41:18,880 --> 00:41:23,440
i'm gonna switch some track and uh ask

00:41:21,920 --> 00:41:25,520
you about the build system

00:41:23,440 --> 00:41:26,880
considering a lot of effort has gone

00:41:25,520 --> 00:41:28,880
into switching over

00:41:26,880 --> 00:41:30,319
from and that's something that we've

00:41:28,880 --> 00:41:34,000
been using forever

00:41:30,319 --> 00:41:36,640
uh over to cradle uh where does it stand

00:41:34,000 --> 00:41:38,560
right now uh and what does it mean for

00:41:36,640 --> 00:41:41,280
the users

00:41:38,560 --> 00:41:42,319
yeah as i said i hope it will come to

00:41:41,280 --> 00:41:46,079
losing nine

00:41:42,319 --> 00:41:50,400
they are really uh very very info

00:41:46,079 --> 00:41:51,599
very they putting that in because

00:41:50,400 --> 00:41:53,119
there are some other questions i have

00:41:51,599 --> 00:41:54,720
seen another question coming a little

00:41:53,119 --> 00:41:56,560
bit later

00:41:54,720 --> 00:41:57,920
which is also related to that and it

00:41:56,560 --> 00:42:02,240
also

00:41:57,920 --> 00:42:03,280
somehow links together so in in very

00:42:02,240 --> 00:42:05,680
short

00:42:03,280 --> 00:42:06,800
we have a working gradle build at the

00:42:05,680 --> 00:42:10,240
moment so

00:42:06,800 --> 00:42:12,720
um the only thing that doesn't work yet

00:42:10,240 --> 00:42:14,640
is you cannot build a release out of it

00:42:12,720 --> 00:42:17,200
but a lot of other stuff is already

00:42:14,640 --> 00:42:18,880
working so it is for the daily work of a

00:42:17,200 --> 00:42:22,160
developer so for example

00:42:18,880 --> 00:42:23,040
if you want to submit a new feature into

00:42:22,160 --> 00:42:25,599
losing

00:42:23,040 --> 00:42:26,400
and you have a patch and a pull request

00:42:25,599 --> 00:42:28,079
and

00:42:26,400 --> 00:42:29,680
when you're developing that i would

00:42:28,079 --> 00:42:32,480
really recommend you

00:42:29,680 --> 00:42:33,280
to use the new gradle build so you just

00:42:32,480 --> 00:42:36,560
have to

00:42:33,280 --> 00:42:39,359
call it gradle w um

00:42:36,560 --> 00:42:41,440
and then you you can run everything we

00:42:39,359 --> 00:42:41,839
already have pre-commit and all that

00:42:41,440 --> 00:42:44,800
stuff

00:42:41,839 --> 00:42:45,599
and you will see a significant

00:42:44,800 --> 00:42:48,880
improvement

00:42:45,599 --> 00:42:51,599
in test running times because you know

00:42:48,880 --> 00:42:53,359
great also the lucine bull was doing a

00:42:51,599 --> 00:42:56,079
lot of stuff in parallel when

00:42:53,359 --> 00:42:57,839
executing the tests but if you have

00:42:56,079 --> 00:42:59,680
looked at the lucy builds especially

00:42:57,839 --> 00:43:01,520
when you're doing zola

00:42:59,680 --> 00:43:04,480
it takes something like two minutes

00:43:01,520 --> 00:43:06,000
until it starts to compile zola

00:43:04,480 --> 00:43:07,920
although it does nothing on the

00:43:06,000 --> 00:43:11,280
louisiana at all it just

00:43:07,920 --> 00:43:14,240
iterates all the ant projects

00:43:11,280 --> 00:43:16,560
which all find out there's nothing to do

00:43:14,240 --> 00:43:19,119
and compile and then it starts to

00:43:16,560 --> 00:43:21,119
maybe take compile one file and zola so

00:43:19,119 --> 00:43:24,160
this should be really really fast

00:43:21,119 --> 00:43:27,520
because and does not really work so

00:43:24,160 --> 00:43:30,079
um developing this radar should be a fun

00:43:27,520 --> 00:43:32,000
now again we also have some new checks

00:43:30,079 --> 00:43:32,880
already which are only implemented in

00:43:32,000 --> 00:43:35,680
greater

00:43:32,880 --> 00:43:37,359
so for example in zola if you have wrong

00:43:35,680 --> 00:43:39,520
locker usage

00:43:37,359 --> 00:43:41,599
so eric erickson committed something

00:43:39,520 --> 00:43:43,599
that immediately wants you like with a

00:43:41,599 --> 00:43:46,400
forbidden apis

00:43:43,599 --> 00:43:47,599
for example to not contact strings in

00:43:46,400 --> 00:43:51,760
your log messages

00:43:47,599 --> 00:43:54,720
and instead use those curly brackets

00:43:51,760 --> 00:43:56,480
and parameters or you sort of never ever

00:43:54,720 --> 00:43:58,880
call a method in those

00:43:56,480 --> 00:44:00,400
logging parameters and all that stuff so

00:43:58,880 --> 00:44:02,480
that's something

00:44:00,400 --> 00:44:04,000
because that was already slowing down so

00:44:02,480 --> 00:44:05,520
that's something which is a new check

00:44:04,000 --> 00:44:07,280
only working with greater

00:44:05,520 --> 00:44:10,079
but you cannot do a release at the

00:44:07,280 --> 00:44:11,520
moment so because the packaging is not

00:44:10,079 --> 00:44:14,560
yet working

00:44:11,520 --> 00:44:18,319
but i was working on the javadocs

00:44:14,560 --> 00:44:20,560
for something like two uh two weeks ago

00:44:18,319 --> 00:44:21,359
or three weeks ago and that's already

00:44:20,560 --> 00:44:23,680
very very

00:44:21,359 --> 00:44:24,960
fine so i think the packaging is more or

00:44:23,680 --> 00:44:27,920
less the last step

00:44:24,960 --> 00:44:27,920
and then we can release

00:44:28,319 --> 00:44:32,560
so okay i would would suggest just try

00:44:31,359 --> 00:44:34,319
it out

00:44:32,560 --> 00:44:36,160
there's also the other problem is with

00:44:34,319 --> 00:44:39,200
back porting patches to

00:44:36,160 --> 00:44:41,680
earlier versions and that's something

00:44:39,200 --> 00:44:44,480
because at some point we want to change

00:44:41,680 --> 00:44:44,960
the build infrastructure a little bit so

00:44:44,480 --> 00:44:48,160
this

00:44:44,960 --> 00:44:48,800
directory structure so we to be more

00:44:48,160 --> 00:44:51,119
aligned

00:44:48,800 --> 00:44:52,160
to greater builds which we cannot do at

00:44:51,119 --> 00:44:54,160
the moment because

00:44:52,160 --> 00:44:56,160
process at the same time in the build

00:44:54,160 --> 00:44:57,839
system so there's a lot of customization

00:44:56,160 --> 00:45:01,040
in gradle at the moment

00:44:57,839 --> 00:45:04,079
so if you import it into your

00:45:01,040 --> 00:45:08,640
into your favorite ide you might get

00:45:04,079 --> 00:45:12,240
some problems with it so yeah

00:45:08,640 --> 00:45:13,359
okay great um i have two questions on my

00:45:12,240 --> 00:45:16,240
mind right now

00:45:13,359 --> 00:45:16,800
uh and one of them is the hard one the

00:45:16,240 --> 00:45:19,440
other one

00:45:16,800 --> 00:45:21,119
not so much uh i'll put the hard one out

00:45:19,440 --> 00:45:22,880
there first so that we can use

00:45:21,119 --> 00:45:25,599
all of the rest of the time for the

00:45:22,880 --> 00:45:27,440
other one um

00:45:25,599 --> 00:45:28,800
so what is the background behind the

00:45:27,440 --> 00:45:32,079
plan to take up with

00:45:28,800 --> 00:45:33,760
lucien with solar is this now the simple

00:45:32,079 --> 00:45:36,000
or the hard one

00:45:33,760 --> 00:45:38,960
this is the hard one the other one is a

00:45:36,000 --> 00:45:42,800
nice little one yes

00:45:38,960 --> 00:45:46,240
okay yeah so that's really

00:45:42,800 --> 00:45:49,119
some something so um i can

00:45:46,240 --> 00:45:51,119
i can only so please excuse in some

00:45:49,119 --> 00:45:51,760
cases i'm also a little bit biased

00:45:51,119 --> 00:45:53,920
because

00:45:51,760 --> 00:45:55,839
uh everybody has its own personal

00:45:53,920 --> 00:45:59,040
opinion about that

00:45:55,839 --> 00:46:00,720
so actually if i i'm quite open and i

00:45:59,040 --> 00:46:03,359
also voted plus one

00:46:00,720 --> 00:46:04,240
for the split of louisiana and zola but

00:46:03,359 --> 00:46:06,800
actually

00:46:04,240 --> 00:46:08,480
i'm somehow in between to me i was

00:46:06,800 --> 00:46:11,119
working on the greater bill

00:46:08,480 --> 00:46:12,000
it doesn't matter to me but actually the

00:46:11,119 --> 00:46:15,200
whole thing

00:46:12,000 --> 00:46:16,960
started like that so you could also ask

00:46:15,200 --> 00:46:19,119
why was new zealand's all are put

00:46:16,960 --> 00:46:22,480
together

00:46:19,119 --> 00:46:25,280
half a year now 10 years ago and now

00:46:22,480 --> 00:46:27,200
we are suddenly trying to split from

00:46:25,280 --> 00:46:28,480
each other that's very very hard to

00:46:27,200 --> 00:46:31,119
explain to somebody

00:46:28,480 --> 00:46:32,160
so i was already expecting that this

00:46:31,119 --> 00:46:35,440
question

00:46:32,160 --> 00:46:38,560
will come here and i can tell you

00:46:35,440 --> 00:46:40,079
uh one thing it won't happen the split

00:46:38,560 --> 00:46:43,119
before

00:46:40,079 --> 00:46:45,920
zola 9 will come out

00:46:43,119 --> 00:46:48,160
and losing 9 will come out because that

00:46:45,920 --> 00:46:48,720
will make it even more complicated and i

00:46:48,160 --> 00:46:50,720
think it

00:46:48,720 --> 00:46:52,720
will also wait a little bit until the

00:46:50,720 --> 00:46:55,040
gradle build is finished

00:46:52,720 --> 00:46:56,400
so that's but that's only my personal

00:46:55,040 --> 00:46:58,079
opinion of that case

00:46:56,400 --> 00:47:00,160
but most of the other committers agree

00:46:58,079 --> 00:47:02,640
with that but how did it happen so

00:47:00,160 --> 00:47:04,400
the reason for that by the question came

00:47:02,640 --> 00:47:07,599
up again so it came up

00:47:04,400 --> 00:47:08,960
already in 2014 i remember when we were

00:47:07,599 --> 00:47:11,839
sitting in the restaurant

00:47:08,960 --> 00:47:14,400
after some earlier burning buzzwords in

00:47:11,839 --> 00:47:17,680
2014 and 2015

00:47:14,400 --> 00:47:20,960
and we were discussing about

00:47:17,680 --> 00:47:22,400
that lucine and zola might split or

00:47:20,960 --> 00:47:24,240
might not split

00:47:22,400 --> 00:47:26,640
so of course there are always some

00:47:24,240 --> 00:47:29,200
people who don't like solar

00:47:26,640 --> 00:47:30,079
so they they want to split on the other

00:47:29,200 --> 00:47:32,559
hand

00:47:30,079 --> 00:47:33,119
uh zola is really something which is

00:47:32,559 --> 00:47:35,680
also

00:47:33,119 --> 00:47:37,839
good for using because we do have more

00:47:35,680 --> 00:47:39,440
extensive testing so there were always

00:47:37,839 --> 00:47:40,000
those conflicting parties and i was

00:47:39,440 --> 00:47:42,160
saying

00:47:40,000 --> 00:47:43,119
i would would have lucine and zola

00:47:42,160 --> 00:47:46,319
together

00:47:43,119 --> 00:47:48,400
but what happened is when we started to

00:47:46,319 --> 00:47:50,800
do the grader build which is already

00:47:48,400 --> 00:47:53,040
working on lucine and zola

00:47:50,800 --> 00:47:55,280
perfectly so i have no problem i see no

00:47:53,040 --> 00:47:57,440
reason to split because of the gradable

00:47:55,280 --> 00:47:58,800
but the griddle build very very clearly

00:47:57,440 --> 00:48:01,359
showed

00:47:58,800 --> 00:48:03,359
that lucine and zola although they are

00:48:01,359 --> 00:48:04,000
the same project have a completely

00:48:03,359 --> 00:48:07,440
different

00:48:04,000 --> 00:48:09,760
style of first building the project so

00:48:07,440 --> 00:48:10,800
there was nothing so in in fact what

00:48:09,760 --> 00:48:12,559
happens that's

00:48:10,800 --> 00:48:14,960
also one reason why the aunt will take

00:48:12,559 --> 00:48:18,000
so long the first thing that happens is

00:48:14,960 --> 00:48:20,400
and is iterating all their projects

00:48:18,000 --> 00:48:22,480
generates all the char files and then

00:48:20,400 --> 00:48:23,920
the char files are copied over to the

00:48:22,480 --> 00:48:26,079
solar directory

00:48:23,920 --> 00:48:27,920
and then they are consumed from there to

00:48:26,079 --> 00:48:30,240
build um

00:48:27,920 --> 00:48:31,119
to build solar so that really looks on

00:48:30,240 --> 00:48:34,400
the first

00:48:31,119 --> 00:48:36,160
thing like yeah that's somehow separate

00:48:34,400 --> 00:48:37,280
and when you look closer into the

00:48:36,160 --> 00:48:39,119
greater build

00:48:37,280 --> 00:48:41,040
and when you're doing a lot of stuff you

00:48:39,119 --> 00:48:43,119
see there are other checks in it

00:48:41,040 --> 00:48:44,800
so it's really separate and then there

00:48:43,119 --> 00:48:48,800
were also some

00:48:44,800 --> 00:48:50,960
some some statistics done a little bit

00:48:48,800 --> 00:48:53,839
later like the number of persons

00:48:50,960 --> 00:48:54,880
who are working on that and figured out

00:48:53,839 --> 00:48:56,880
there a lot of the

00:48:54,880 --> 00:48:58,079
a lot of committers working on both

00:48:56,880 --> 00:49:00,480
projects

00:48:58,079 --> 00:49:02,559
some of them are only for us for us to

00:49:00,480 --> 00:49:04,160
work on both projects so

00:49:02,559 --> 00:49:06,000
in that case if you do a backwards

00:49:04,160 --> 00:49:07,839
incompatible change in routine of course

00:49:06,000 --> 00:49:11,760
you have to touch the solar code

00:49:07,839 --> 00:49:15,200
so um so this is not really an argument

00:49:11,760 --> 00:49:17,280
but it has shown that now in the newer

00:49:15,200 --> 00:49:19,200
time most develops

00:49:17,280 --> 00:49:21,280
meant are really separate from each

00:49:19,200 --> 00:49:24,960
other so

00:49:21,280 --> 00:49:27,920
so solar and solar has its own

00:49:24,960 --> 00:49:28,240
uh iteration of new features you also

00:49:27,920 --> 00:49:30,240
see

00:49:28,240 --> 00:49:32,960
for example as i said before the block

00:49:30,240 --> 00:49:36,400
max one was first there in business

00:49:32,960 --> 00:49:38,640
came out with version 8.0 and

00:49:36,400 --> 00:49:40,000
i would have wished that with version

00:49:38,640 --> 00:49:42,800
8.1

00:49:40,000 --> 00:49:44,559
a 8.0 although the block mark stuff

00:49:42,800 --> 00:49:46,000
would have been appeared in zola

00:49:44,559 --> 00:49:47,760
because if you look at the patch it's

00:49:46,000 --> 00:49:51,280
not really complicated

00:49:47,760 --> 00:49:53,440
so but unfortunately it took till 8.6

00:49:51,280 --> 00:49:56,240
and it's still not out

00:49:53,440 --> 00:49:58,400
to get that very short circuit stuff

00:49:56,240 --> 00:50:00,640
into zola so you see here

00:49:58,400 --> 00:50:02,720
if it would really be one project that

00:50:00,640 --> 00:50:04,960
would have been one single commit uh

00:50:02,720 --> 00:50:07,040
changing louisiana and zola at once

00:50:04,960 --> 00:50:08,720
somehow okay that's a little bit ideal

00:50:07,040 --> 00:50:12,000
but

00:50:08,720 --> 00:50:15,440
in in that case but now the question why

00:50:12,000 --> 00:50:17,520
did we move together in 2011. so the

00:50:15,440 --> 00:50:19,680
reason for that was a little bit

00:50:17,520 --> 00:50:20,960
different contrary the problem at that

00:50:19,680 --> 00:50:24,400
time was

00:50:20,960 --> 00:50:26,240
that uh solar and bluezine were from two

00:50:24,400 --> 00:50:28,559
completely different persons and they

00:50:26,240 --> 00:50:32,640
had a completely different

00:50:28,559 --> 00:50:34,480
history and before solar even joined

00:50:32,640 --> 00:50:36,280
the apache software foundation they have

00:50:34,480 --> 00:50:38,880
a lot of

00:50:36,280 --> 00:50:40,800
implementations that should have been

00:50:38,880 --> 00:50:44,480
better placed in louisiana

00:50:40,800 --> 00:50:47,760
at that time they were going to zola

00:50:44,480 --> 00:50:50,000
and this didn't stop at that time it was

00:50:47,760 --> 00:50:52,079
all the time so it was starting to

00:50:50,000 --> 00:50:54,240
we only developed that in zola but it

00:50:52,079 --> 00:50:55,200
was not somehow merged or not even

00:50:54,240 --> 00:50:58,240
thought of

00:50:55,200 --> 00:51:00,240
to do that in lucine because of the

00:50:58,240 --> 00:51:02,640
release schedule because you seen at a

00:51:00,240 --> 00:51:04,079
very very slow release schedule i think

00:51:02,640 --> 00:51:05,680
and zula was faster

00:51:04,079 --> 00:51:07,119
could also be the other way around i

00:51:05,680 --> 00:51:10,720
don't remember that

00:51:07,119 --> 00:51:12,720
and because of that some of the stuff

00:51:10,720 --> 00:51:16,160
was implemented in zola

00:51:12,720 --> 00:51:16,640
mostly and one famous example is in zola

00:51:16,160 --> 00:51:18,960
there was

00:51:16,640 --> 00:51:19,839
tons of analyzers for different

00:51:18,960 --> 00:51:22,559
languages

00:51:19,839 --> 00:51:25,760
and one example is worth the limited

00:51:22,559 --> 00:51:29,280
filter which you see people still hate

00:51:25,760 --> 00:51:32,720
but um and because of that

00:51:29,280 --> 00:51:34,480
so at some point and of course all those

00:51:32,720 --> 00:51:37,839
stuff was not usable for

00:51:34,480 --> 00:51:37,839
for projects outside of

00:51:37,920 --> 00:51:41,520
although it's only loosing internal

00:51:39,760 --> 00:51:42,800
features because an analyzer has nothing

00:51:41,520 --> 00:51:44,960
to do with zola

00:51:42,800 --> 00:51:46,160
so the idea here was to clean up the

00:51:44,960 --> 00:51:48,000
whole code base

00:51:46,160 --> 00:51:51,040
move the stuff where it belongs so for

00:51:48,000 --> 00:51:53,839
example function queries

00:51:51,040 --> 00:51:56,800
were moved to luzine analyzers were

00:51:53,839 --> 00:51:59,200
moved to luzine

00:51:56,800 --> 00:52:00,240
and that really helped to clean up the

00:51:59,200 --> 00:52:03,040
whole project

00:52:00,240 --> 00:52:04,000
and it also was a great success for

00:52:03,040 --> 00:52:07,040
other people

00:52:04,000 --> 00:52:08,480
using new scenes or a lot of customers

00:52:07,040 --> 00:52:11,520
of mine were really happy

00:52:08,480 --> 00:52:14,559
to not no longer need to import

00:52:11,520 --> 00:52:16,240
solar dependencies just for your own

00:52:14,559 --> 00:52:18,000
museum implementation just to get the

00:52:16,240 --> 00:52:20,720
analyzers and of course

00:52:18,000 --> 00:52:21,040
also for this was a good step forward

00:52:20,720 --> 00:52:23,839
for

00:52:21,040 --> 00:52:25,119
elasticsearch because elasticsearch was

00:52:23,839 --> 00:52:28,160
able to use

00:52:25,119 --> 00:52:29,200
all those analyzers so you can see that

00:52:28,160 --> 00:52:33,599
from both cases

00:52:29,200 --> 00:52:36,960
so um yeah vertically better filter

00:52:33,599 --> 00:52:40,559
wdf it means vdf

00:52:36,960 --> 00:52:43,839
in german yeah funny uh yeah

00:52:40,559 --> 00:52:47,680
so um but ellen also hates it i think

00:52:43,839 --> 00:52:50,319
yeah i was just looking here into there

00:52:47,680 --> 00:52:51,440
yes so that that's some reasons and now

00:52:50,319 --> 00:52:53,760
we are at a state

00:52:51,440 --> 00:52:55,440
where the whole thing is really good of

00:52:53,760 --> 00:52:59,119
course there are still the risk

00:52:55,440 --> 00:53:02,160
that it can diverge anyways so

00:52:59,119 --> 00:53:04,240
the same can happen but um

00:53:02,160 --> 00:53:05,920
there's also the other thing because now

00:53:04,240 --> 00:53:07,839
the lucy the committee

00:53:05,920 --> 00:53:10,240
committers we're getting more and more

00:53:07,839 --> 00:53:13,200
committers it's a good time to split

00:53:10,240 --> 00:53:15,200
but it's not only splitting the projects

00:53:13,200 --> 00:53:15,680
so we could do the same we could just

00:53:15,200 --> 00:53:19,200
fork

00:53:15,680 --> 00:53:21,200
and both will be under the same loosen

00:53:19,200 --> 00:53:22,400
top level project but the idea here is

00:53:21,200 --> 00:53:26,079
to make it a

00:53:22,400 --> 00:53:28,160
own apache software foundation top level

00:53:26,079 --> 00:53:29,280
project so at the end it will also be

00:53:28,160 --> 00:53:32,480
solar dot

00:53:29,280 --> 00:53:33,040
org and all that stuff so that's a good

00:53:32,480 --> 00:53:35,760
way

00:53:33,040 --> 00:53:37,839
forward and about the dependencies i

00:53:35,760 --> 00:53:39,200
think the approach will be very similar

00:53:37,839 --> 00:53:41,839
to

00:53:39,200 --> 00:53:43,280
what what elasticsearch is currently

00:53:41,839 --> 00:53:44,640
doing so

00:53:43,280 --> 00:53:46,640
uh because a lot of people were

00:53:44,640 --> 00:53:48,160
complaining about yeah if

00:53:46,640 --> 00:53:50,559
not everything from lucine is

00:53:48,160 --> 00:53:53,200
immediately tested in zola

00:53:50,559 --> 00:53:53,680
uh that will be very very hard so that

00:53:53,200 --> 00:53:55,440
means

00:53:53,680 --> 00:53:57,839
in contrast to the early versions of

00:53:55,440 --> 00:54:01,520
solar where this was not the case

00:53:57,839 --> 00:54:04,880
we must go some wood to say okay

00:54:01,520 --> 00:54:07,359
we are using snapshot versions from some

00:54:04,880 --> 00:54:09,200
shared repository like the apache

00:54:07,359 --> 00:54:11,119
snapshot repository

00:54:09,200 --> 00:54:12,880
just with some date code and it's

00:54:11,119 --> 00:54:13,200
regularly updated and something like

00:54:12,880 --> 00:54:15,040
that

00:54:13,200 --> 00:54:16,480
so that's approach which elasticsearch

00:54:15,040 --> 00:54:20,160
is doing and i think

00:54:16,480 --> 00:54:22,000
uh that might also happen with solar and

00:54:20,160 --> 00:54:24,720
the other thing is if we want to align

00:54:22,000 --> 00:54:28,000
major releases or not

00:54:24,720 --> 00:54:30,960
my personal opinion is we won't align

00:54:28,000 --> 00:54:32,000
minor releases anymore because if

00:54:30,960 --> 00:54:35,040
there's a

00:54:32,000 --> 00:54:36,559
new zealand version 8.1 8.2 8.3 it

00:54:35,040 --> 00:54:39,599
doesn't matter at all

00:54:36,559 --> 00:54:42,559
it can still be zoola 8.5

00:54:39,599 --> 00:54:44,720
8.6 8.7 it doesn't matter but whenever

00:54:42,559 --> 00:54:46,559
the major version changes

00:54:44,720 --> 00:54:48,400
there needs to be a communication

00:54:46,559 --> 00:54:50,640
because you remember from my

00:54:48,400 --> 00:54:51,599
earlier talks we are only backwards

00:54:50,640 --> 00:54:54,960
convertible

00:54:51,599 --> 00:54:56,720
to the major version before so that

00:54:54,960 --> 00:54:57,280
means with the loose e9 you can only

00:54:56,720 --> 00:55:00,000
leave

00:54:57,280 --> 00:55:01,520
losing eight indexes and so there's

00:55:00,000 --> 00:55:05,119
somehow a problem so

00:55:01,520 --> 00:55:06,880
it this means we also at least need

00:55:05,119 --> 00:55:09,040
at least and need at least need

00:55:06,880 --> 00:55:10,240
something like as major version update

00:55:09,040 --> 00:55:12,799
also in zola

00:55:10,240 --> 00:55:13,280
some point so i would think of it will

00:55:12,799 --> 00:55:15,520
stay

00:55:13,280 --> 00:55:17,520
the same major versions will stay

00:55:15,520 --> 00:55:19,440
aligned but the minor version is not

00:55:17,520 --> 00:55:21,680
so i think that's everything i can say

00:55:19,440 --> 00:55:24,799
about say about

00:55:21,680 --> 00:55:28,160
the split here and i would tend

00:55:24,799 --> 00:55:31,920
to wait a little bit until

00:55:28,160 --> 00:55:32,720
lucie 9 is released and the development

00:55:31,920 --> 00:55:36,079
of losing

00:55:32,720 --> 00:55:36,880
8 and solar 8 stops or at least it's

00:55:36,079 --> 00:55:38,799
only

00:55:36,880 --> 00:55:40,880
backwards compatible changes at that

00:55:38,799 --> 00:55:46,480
point i think the split will happen

00:55:40,880 --> 00:55:46,480
so that's my best guess but as always

00:55:47,359 --> 00:55:50,160
it's never true

00:55:55,520 --> 00:56:02,880
you are silenced oh sorry

00:55:58,799 --> 00:56:06,000
yeah um

00:56:02,880 --> 00:56:07,760
so the last question that uh you covered

00:56:06,000 --> 00:56:11,599
the previous one pretty well

00:56:07,760 --> 00:56:13,839
uh so do you have

00:56:11,599 --> 00:56:14,799
considering lucine is a rather complex

00:56:13,839 --> 00:56:17,839
system

00:56:14,799 --> 00:56:19,920
uh do you have any pointers or

00:56:17,839 --> 00:56:22,960
suggestions on how

00:56:19,920 --> 00:56:26,000
new contributors could engage

00:56:22,960 --> 00:56:29,440
and contribute

00:56:26,000 --> 00:56:32,559
to the project and to the community

00:56:29,440 --> 00:56:34,960
um yeah so so i

00:56:32,559 --> 00:56:37,359
i i think for for some new contributors

00:56:34,960 --> 00:56:41,359
it's really really hard because

00:56:37,359 --> 00:56:43,599
there is not too much going on on the

00:56:41,359 --> 00:56:44,000
development mailing list mostly is done

00:56:43,599 --> 00:56:45,920
in

00:56:44,000 --> 00:56:47,280
tierra tickets and you're flooded by

00:56:45,920 --> 00:56:50,000
cheera tickets

00:56:47,280 --> 00:56:51,359
we split those mailing lists not long

00:56:50,000 --> 00:56:54,000
ago

00:56:51,359 --> 00:56:56,079
because of that so the real discussions

00:56:54,000 --> 00:56:58,000
are now going on on the development list

00:56:56,079 --> 00:57:00,400
and the theory issues are all

00:56:58,000 --> 00:57:01,920
going and the github requests are going

00:57:00,400 --> 00:57:04,160
to another mailing list so

00:57:01,920 --> 00:57:05,359
that helps a little bit so it makes it

00:57:04,160 --> 00:57:08,720
easier for our new

00:57:05,359 --> 00:57:12,160
uh new committees but

00:57:08,720 --> 00:57:12,720
there's still the problem that most

00:57:12,160 --> 00:57:14,960
people

00:57:12,720 --> 00:57:16,960
uh because it's a huge really huge

00:57:14,960 --> 00:57:18,480
project you don't know where to start

00:57:16,960 --> 00:57:20,559
and because of that

00:57:18,480 --> 00:57:22,240
and we have something like tagging on

00:57:20,559 --> 00:57:24,880
our cheer issues

00:57:22,240 --> 00:57:26,400
which are useful for beginners and

00:57:24,880 --> 00:57:29,520
mostly this is

00:57:26,400 --> 00:57:30,319
this was done also for uh for google

00:57:29,520 --> 00:57:33,200
summer of

00:57:30,319 --> 00:57:33,599
uh code but something similar so there

00:57:33,200 --> 00:57:36,799
are some

00:57:33,599 --> 00:57:40,000
issues which are a little bit easier

00:57:36,799 --> 00:57:42,720
to start with and just start and submit

00:57:40,000 --> 00:57:43,680
the pull request which which is much

00:57:42,720 --> 00:57:46,240
easier than

00:57:43,680 --> 00:57:47,839
before now that apache software

00:57:46,240 --> 00:57:50,400
foundation has included

00:57:47,839 --> 00:57:50,960
full support for github so you don't

00:57:50,400 --> 00:57:54,480
need to

00:57:50,960 --> 00:57:56,559
mark with git repositories by the asf

00:57:54,480 --> 00:57:57,839
just call it on github and send a pull

00:57:56,559 --> 00:58:00,319
request and

00:57:57,839 --> 00:58:01,599
and we can also merge it for you then

00:58:00,319 --> 00:58:04,160
the committers

00:58:01,599 --> 00:58:06,559
very very easily so i think it's much

00:58:04,160 --> 00:58:08,559
easier to do that so just come there

00:58:06,559 --> 00:58:10,319
and submit a pull request but of course

00:58:08,559 --> 00:58:15,040
don't forget to

00:58:10,319 --> 00:58:15,040
register for the mailing list and

00:58:15,440 --> 00:58:18,880
and ask your questions there though you

00:58:17,520 --> 00:58:21,599
can also talk

00:58:18,880 --> 00:58:23,359
the talk in discussions or maybe go to

00:58:21,599 --> 00:58:26,240
other issues and talk with us

00:58:23,359 --> 00:58:27,920
so that's that should be something and

00:58:26,240 --> 00:58:29,440
if you have something which was really

00:58:27,920 --> 00:58:32,799
useful for you

00:58:29,440 --> 00:58:36,079
just give it to us we are happy

00:58:32,799 --> 00:58:38,640
uh to see something like the recent

00:58:36,079 --> 00:58:39,760
contributions like they talked before

00:58:38,640 --> 00:58:42,799
about those

00:58:39,760 --> 00:58:45,359
um about those new posting formats

00:58:42,799 --> 00:58:46,720
for those indexes with many many fields

00:58:45,359 --> 00:58:49,599
and that

00:58:46,720 --> 00:58:50,000
which is really something a few people

00:58:49,599 --> 00:58:53,119
need

00:58:50,000 --> 00:58:54,880
but that was really something and the

00:58:53,119 --> 00:58:56,720
person is now also committed who

00:58:54,880 --> 00:59:00,079
proposed it originally so

00:58:56,720 --> 00:59:01,119
that's also something you can keep in

00:59:00,079 --> 00:59:02,839
mind if you are

00:59:01,119 --> 00:59:04,319
working together with us we are all

00:59:02,839 --> 00:59:06,240
friendly

00:59:04,319 --> 00:59:08,319
sometimes we are a little bit harsh and

00:59:06,240 --> 00:59:11,520
the policeman is arguing this

00:59:08,319 --> 00:59:16,079
is about the bad code you are writing

00:59:11,520 --> 00:59:16,079
but don't take that too serious

00:59:17,119 --> 00:59:22,720
great yes that uh i hope that

00:59:20,799 --> 00:59:24,640
that's gonna motivate enough people to

00:59:22,720 --> 00:59:28,720
come in and start contributing

00:59:24,640 --> 00:59:32,000
uh to the projects uh let me try to see

00:59:28,720 --> 00:59:33,680
um okay uh i think

00:59:32,000 --> 00:59:35,760
we don't have any more questions we're

00:59:33,680 --> 00:59:37,839
also out of time so thank you so much

00:59:35,760 --> 00:59:40,640
away for answering all those

00:59:37,839 --> 00:59:41,920
hard and not so hard questions uh all

00:59:40,640 --> 00:59:47,839
sorts of them

00:59:41,920 --> 00:59:47,839
uh so yes thank you so much

01:00:04,880 --> 01:00:06,960

YouTube URL: https://www.youtube.com/watch?v=RvoH_pVvXz0


