Title: #bbuzz: Lars Albertson & Christopher Bergh â€“ The lean principles of DataOps
Publication date: 2020-06-23
Playlist: Berlin Buzzwords | MICES | Haystack â€“ Joint Virtual Event 2020
Description: 
	More: https://berlinbuzzwords.de/session/lean-principles-dataops

Modern data processing environments resemble factory lines, transforming raw data to valuable data products. The lean principles that have successfully transformed manufacturing are equally applicable to data processing, and are well aligned with the new trend known as DataOps. In this presentation, we will explain how applying lean and DataOps principles can be implemented as technical data processing solutions and processes in order to eliminate waste and improve data innovation speed. We will go through how to eliminate the following types of waste in data processing systems:

* Cognitive waste - unclear source of truth, dependency sprawl, duplication, ambiguity.
* Operational waste - overhead for deployment, upgrades, and incident recovery.
* Delivery waste - friction and delay in development, testing, and deployment.
* Product waste - misalignment to business value, detach from use cases, push driven development, vanity quality assurance.

We will primarily focus on technical solutions, but some of the waste mentioned requires organisational refactoring to eliminate.
Captions: 
	00:00:08,000 --> 00:00:12,240
hello everybody

00:00:08,960 --> 00:00:12,719
i have the pleasure to announce to you

00:00:12,240 --> 00:00:15,679
this

00:00:12,719 --> 00:00:18,400
the speaker of the first session of the

00:00:15,679 --> 00:00:21,359
streaming tracks the speakers are

00:00:18,400 --> 00:00:23,439
lars albertson and christopher burke and

00:00:21,359 --> 00:00:27,359
the talk will be about the lean

00:00:23,439 --> 00:00:29,199
principles of data ops which

00:00:27,359 --> 00:00:31,439
will cover the topic of how

00:00:29,199 --> 00:00:32,480
manufacturing transformations can be

00:00:31,439 --> 00:00:36,000
applied

00:00:32,480 --> 00:00:39,440
to data operations

00:00:36,000 --> 00:00:42,559
and then i would like to hand over to

00:00:39,440 --> 00:00:46,079
lars albertson who is

00:00:42,559 --> 00:00:47,360
the founder of skling they are providing

00:00:46,079 --> 00:00:49,600
a data

00:00:47,360 --> 00:00:51,360
value extraction as a service and

00:00:49,600 --> 00:00:54,239
christopher bork

00:00:51,360 --> 00:00:56,879
who will give the second part of the

00:00:54,239 --> 00:00:58,320
presentation

00:00:56,879 --> 00:01:00,320
thank you very much looking forward to

00:00:58,320 --> 00:01:03,120
it thank you

00:01:00,320 --> 00:01:04,080
and hi everyone i'm sorry not to be able

00:01:03,120 --> 00:01:06,479
to be there

00:01:04,080 --> 00:01:07,600
in berlin and person it's a wonderful

00:01:06,479 --> 00:01:11,439
conference and i

00:01:07,600 --> 00:01:15,360
definitely miss the atmosphere

00:01:11,439 --> 00:01:17,759
um i i'm running a

00:01:15,360 --> 00:01:18,640
small startup called skling and we

00:01:17,759 --> 00:01:21,520
provide

00:01:18,640 --> 00:01:21,840
data processing as a service essentially

00:01:21,520 --> 00:01:25,680
we

00:01:21,840 --> 00:01:29,040
build and run data pipelines and uh

00:01:25,680 --> 00:01:32,159
and host data for customers as well and

00:01:29,040 --> 00:01:33,680
what we essentially sell is operational

00:01:32,159 --> 00:01:36,000
efficiency and that is

00:01:33,680 --> 00:01:37,040
that is a deep passion of mine and

00:01:36,000 --> 00:01:40,000
that's why i'm

00:01:37,040 --> 00:01:40,720
here trying to share my knowledge in in

00:01:40,000 --> 00:01:45,200
the area

00:01:40,720 --> 00:01:47,680
and unless i'm mistaken our

00:01:45,200 --> 00:01:49,759
business model of spling overlaps to

00:01:47,680 --> 00:01:53,119
some degree with the data kitchen

00:01:49,759 --> 00:01:55,200
which uh chris is running uh but here

00:01:53,119 --> 00:01:56,960
they are running it they have a much

00:01:55,200 --> 00:02:00,320
more mature and established

00:01:56,960 --> 00:02:01,360
startup based in boston i'm based in

00:02:00,320 --> 00:02:03,600
stockholm

00:02:01,360 --> 00:02:05,119
is that a fair description chris sure

00:02:03,600 --> 00:02:08,000
that sounds good yeah and i think we

00:02:05,119 --> 00:02:10,319
both identify that um

00:02:08,000 --> 00:02:12,879
there's a lot of pain and problems in

00:02:10,319 --> 00:02:14,720
data and analytics and that there

00:02:12,879 --> 00:02:16,239
is some things that you would think are

00:02:14,720 --> 00:02:18,400
not technological but

00:02:16,239 --> 00:02:21,200
uh that really apply in these principles

00:02:18,400 --> 00:02:22,319
from from lean or agile or devops or

00:02:21,200 --> 00:02:23,680
manufacturing

00:02:22,319 --> 00:02:25,200
really can make an impact on your

00:02:23,680 --> 00:02:25,760
day-to-day life and i think that's what

00:02:25,200 --> 00:02:27,360
uh

00:02:25,760 --> 00:02:30,400
what lars is going to start to talk to

00:02:27,360 --> 00:02:30,400
you about and i'll bring it home

00:02:30,560 --> 00:02:35,920
and as you notice we're trying to do

00:02:33,440 --> 00:02:36,239
this more as a dynamic discussion rather

00:02:35,920 --> 00:02:39,680
than

00:02:36,239 --> 00:02:41,840
me speaking into scream for 40 minutes

00:02:39,680 --> 00:02:44,239
uh so we'll do a bit of back and forth

00:02:41,840 --> 00:02:48,080
and this is the first time i try this

00:02:44,239 --> 00:02:51,200
uh mode of presenting at a conference so

00:02:48,080 --> 00:02:53,920
we'll see how it works

00:02:51,200 --> 00:02:55,040
uh i started in my computing career at

00:02:53,920 --> 00:02:59,040
ibm here in

00:02:55,040 --> 00:02:59,519
in stockholm uh and uh this was mid 90's

00:02:59,040 --> 00:03:01,760
i was

00:02:59,519 --> 00:03:03,599
like a teenager i was running windows at

00:03:01,760 --> 00:03:06,480
home and

00:03:03,599 --> 00:03:08,159
when when you work with windows

00:03:06,480 --> 00:03:10,000
computers at the time you had this pile

00:03:08,159 --> 00:03:12,000
of floppy disks and you installed them

00:03:10,000 --> 00:03:13,519
install the software and you you sort of

00:03:12,000 --> 00:03:14,959
cuddle it that's your pet

00:03:13,519 --> 00:03:17,120
if something went wrong you had to go

00:03:14,959 --> 00:03:20,239
there and fix it and so forth

00:03:17,120 --> 00:03:22,400
at ibm i got to work with os2 warp

00:03:20,239 --> 00:03:23,280
which i probably none of you remember by

00:03:22,400 --> 00:03:24,879
now

00:03:23,280 --> 00:03:26,799
there was a significant difference

00:03:24,879 --> 00:03:28,319
however in the way that we installed

00:03:26,799 --> 00:03:30,239
and managed the machines and the

00:03:28,319 --> 00:03:32,000
applications installed of them

00:03:30,239 --> 00:03:34,400
because when we installed the new

00:03:32,000 --> 00:03:36,239
machine like for for a customer

00:03:34,400 --> 00:03:37,440
and we went to the machine and we booted

00:03:36,239 --> 00:03:40,080
it from a flop it is

00:03:37,440 --> 00:03:41,920
now this is machine number 45 and then

00:03:40,080 --> 00:03:44,400
everything was pre-configured in a

00:03:41,920 --> 00:03:45,360
in an installation server and those two

00:03:44,400 --> 00:03:49,200
machine were like

00:03:45,360 --> 00:03:51,360
go to that server fetch all of the

00:03:49,200 --> 00:03:52,319
the uh applications that were to be

00:03:51,360 --> 00:03:54,799
installed

00:03:52,319 --> 00:03:56,879
and reboot like eight times in the

00:03:54,799 --> 00:03:59,840
process and after half an hour it was

00:03:56,879 --> 00:04:01,200
completely installed uh some of my one

00:03:59,840 --> 00:04:03,360
of my colleagues he at

00:04:01,200 --> 00:04:05,040
point forgot about this new mode of

00:04:03,360 --> 00:04:06,640
operation worked on his machine

00:04:05,040 --> 00:04:08,560
and then you know the next morning

00:04:06,640 --> 00:04:11,599
somebody had reinstalled it

00:04:08,560 --> 00:04:13,200
so this is a this was i only thought of

00:04:11,599 --> 00:04:14,720
it as automation at the time

00:04:13,200 --> 00:04:16,320
this actually was a significant

00:04:14,720 --> 00:04:16,720
difference we had gone from working with

00:04:16,320 --> 00:04:19,120
a

00:04:16,720 --> 00:04:20,239
craft you know working with the thing

00:04:19,120 --> 00:04:23,520
that was in front of us

00:04:20,239 --> 00:04:26,320
to work over the process the process of

00:04:23,520 --> 00:04:28,960
installing machines

00:04:26,320 --> 00:04:30,800
and if you look at uh the rest of the

00:04:28,960 --> 00:04:33,040
itu world this is a trend

00:04:30,800 --> 00:04:34,080
that we see we we move from traditional

00:04:33,040 --> 00:04:36,000
infrastructure

00:04:34,080 --> 00:04:38,800
to infrastructure this progress code

00:04:36,000 --> 00:04:42,320
from traditional ops to devops and from

00:04:38,800 --> 00:04:45,840
from doing quality assurance on a piece

00:04:42,320 --> 00:04:46,880
of uh sort of a new release that we're

00:04:45,840 --> 00:04:48,800
going to bless

00:04:46,880 --> 00:04:50,720
because it is good enough to

00:04:48,800 --> 00:04:53,600
continuously doing this and working with

00:04:50,720 --> 00:04:55,120
improving the quality process with ci cd

00:04:53,600 --> 00:04:57,040
and likewise with the app we're

00:04:55,120 --> 00:04:57,840
installing applications versus building

00:04:57,040 --> 00:05:01,199
containers

00:04:57,840 --> 00:05:03,840
uh from scratch all the time

00:05:01,199 --> 00:05:06,000
and data ops and data factories

00:05:03,840 --> 00:05:07,919
essentially is essentially taking this

00:05:06,000 --> 00:05:11,199
principle of

00:05:07,919 --> 00:05:14,160
going from a craft to a process

00:05:11,199 --> 00:05:15,520
uh but with data we're we're so used

00:05:14,160 --> 00:05:18,639
this way back to our

00:05:15,520 --> 00:05:19,600
our database center centric systems

00:05:18,639 --> 00:05:22,479
which essentially

00:05:19,600 --> 00:05:23,120
is the database is a pet that we cuddle

00:05:22,479 --> 00:05:26,240
and

00:05:23,120 --> 00:05:27,840
we write careful code and so as not to

00:05:26,240 --> 00:05:29,360
destroy the structures

00:05:27,840 --> 00:05:31,120
whereas the big data revolution

00:05:29,360 --> 00:05:32,160
essentially brought a new way of

00:05:31,120 --> 00:05:33,759
thinking where we

00:05:32,160 --> 00:05:36,080
store the raw data and then we have

00:05:33,759 --> 00:05:39,039
pipelines refining that data

00:05:36,080 --> 00:05:40,639
and we no longer work with the data

00:05:39,039 --> 00:05:43,520
itself directly we work through the

00:05:40,639 --> 00:05:46,560
process of creating valuable artifacts

00:05:43,520 --> 00:05:46,560
in our pipelines

00:05:46,960 --> 00:05:53,520
and the book that has

00:05:50,080 --> 00:05:57,280
inspired me most in my career is

00:05:53,520 --> 00:05:59,919
is the toyota way which

00:05:57,280 --> 00:06:00,639
sort of explained the principles of lean

00:05:59,919 --> 00:06:02,479
to me

00:06:00,639 --> 00:06:03,680
there are lots of relevant principles

00:06:02,479 --> 00:06:06,800
that we that

00:06:03,680 --> 00:06:08,639
are applicable for for data

00:06:06,800 --> 00:06:10,639
engineering and working with data but

00:06:08,639 --> 00:06:12,240
i've highlighted a few of them

00:06:10,639 --> 00:06:13,680
the process i mentioned but also

00:06:12,240 --> 00:06:16,000
eliminating waste

00:06:13,680 --> 00:06:17,440
getting rid of things that shouldn't be

00:06:16,000 --> 00:06:18,319
there to make a focus on the right

00:06:17,440 --> 00:06:20,560
things

00:06:18,319 --> 00:06:22,160
yeah and lars i came at this a bit of a

00:06:20,560 --> 00:06:24,720
different way growing up in the

00:06:22,160 --> 00:06:26,479
80s in the former industrial heartland

00:06:24,720 --> 00:06:28,960
of america and seeing

00:06:26,479 --> 00:06:29,919
um the japanese beat in milwaukee the

00:06:28,960 --> 00:06:31,360
small

00:06:29,919 --> 00:06:33,360
engine manufacturers and the auto

00:06:31,360 --> 00:06:35,680
manufacturers and they made better cars

00:06:33,360 --> 00:06:37,039
and they lasted longer and my dad was in

00:06:35,680 --> 00:06:38,400
a union and he

00:06:37,039 --> 00:06:40,960
used to take a lot of crap from his

00:06:38,400 --> 00:06:42,639
union buddies for driving a toyota car

00:06:40,960 --> 00:06:44,960
but he said it was and it was true it

00:06:42,639 --> 00:06:46,960
was cheaper and it lasted longer

00:06:44,960 --> 00:06:48,560
and so a book called the machine that

00:06:46,960 --> 00:06:50,240
changed the world that came out in the

00:06:48,560 --> 00:06:52,479
late 80s early 90s

00:06:50,240 --> 00:06:54,160
actually drove me to this that you know

00:06:52,479 --> 00:06:56,479
that there's something about

00:06:54,160 --> 00:06:57,520
the factory something about the process

00:06:56,479 --> 00:06:59,759
in which we work

00:06:57,520 --> 00:07:01,599
that has a real effect and and you know

00:06:59,759 --> 00:07:03,360
that's in a lot of ways why

00:07:01,599 --> 00:07:04,800
american motors which was in kenosha

00:07:03,360 --> 00:07:06,800
wisconsin went out of business and

00:07:04,800 --> 00:07:08,639
toyota became one of the largest uh

00:07:06,800 --> 00:07:10,960
if not the largest auto manufacturer in

00:07:08,639 --> 00:07:10,960
the world

00:07:12,240 --> 00:07:16,479
yeah and uh as far as i understand the

00:07:15,599 --> 00:07:18,960
american

00:07:16,479 --> 00:07:20,639
uh korean industry reinvented itself to

00:07:18,960 --> 00:07:22,240
some degree with the help of toyota if

00:07:20,639 --> 00:07:24,319
i'm if i'm not mistaken

00:07:22,240 --> 00:07:26,080
uh yeah yeah and some of the ideas came

00:07:24,319 --> 00:07:26,960
came from dr deming and it's american

00:07:26,080 --> 00:07:29,680
but i think

00:07:26,960 --> 00:07:30,000
the idea of this sort of lean and toyota

00:07:29,680 --> 00:07:31,759
way

00:07:30,000 --> 00:07:34,319
has become a standard way of

00:07:31,759 --> 00:07:36,240
manufacturing and as opposed to sort of

00:07:34,319 --> 00:07:37,360
taylorism as a way to sort of you know

00:07:36,240 --> 00:07:40,560
think of

00:07:37,360 --> 00:07:43,120
you know try to break each piece down

00:07:40,560 --> 00:07:44,160
yeah so we're going to look at some of

00:07:43,120 --> 00:07:45,759
these principles

00:07:44,160 --> 00:07:47,520
and some of them will be occurring

00:07:45,759 --> 00:07:49,840
throughout the presentation

00:07:47,520 --> 00:07:50,720
like starting to fix problems instead of

00:07:49,840 --> 00:07:53,840
go letting

00:07:50,720 --> 00:07:54,800
letting problems uh wait until runtime

00:07:53,840 --> 00:07:56,879
and

00:07:54,800 --> 00:07:58,160
standardizing tasks and processes and

00:07:56,879 --> 00:08:00,639
we'll see how these

00:07:58,160 --> 00:08:01,280
uh during the presentation how these uh

00:08:00,639 --> 00:08:04,319
come in

00:08:01,280 --> 00:08:05,440
in data processing data factories we're

00:08:04,319 --> 00:08:09,120
going to look at

00:08:05,440 --> 00:08:10,879
four different pieces or types of waste

00:08:09,120 --> 00:08:13,599
one is the cognitive waste the thing

00:08:10,879 --> 00:08:16,479
that steals your attention

00:08:13,599 --> 00:08:17,599
instead of you steals time from you

00:08:16,479 --> 00:08:20,240
doing deliver

00:08:17,599 --> 00:08:21,039
valuable work then there's delivery ways

00:08:20,240 --> 00:08:23,599
the

00:08:21,039 --> 00:08:25,440
uh things that prevent you from throwing

00:08:23,599 --> 00:08:27,759
from getting things out into production

00:08:25,440 --> 00:08:29,199
and then operational waste things that

00:08:27,759 --> 00:08:31,919
steal your time once

00:08:29,199 --> 00:08:32,560
things are in production and then last

00:08:31,919 --> 00:08:35,680
uh

00:08:32,560 --> 00:08:40,159
product waste which is things that

00:08:35,680 --> 00:08:42,479
uh things you do that do not actually

00:08:40,159 --> 00:08:44,800
help create product value or end user

00:08:42,479 --> 00:08:48,080
value

00:08:44,800 --> 00:08:50,240
so looking first at cognitive waste uh

00:08:48,080 --> 00:08:52,240
if you've been in a large-scale data

00:08:50,240 --> 00:08:54,000
lake environment you've probably seen a

00:08:52,240 --> 00:08:56,080
lot of this i was in one company which

00:08:54,000 --> 00:08:58,160
is very mature very skilled

00:08:56,080 --> 00:08:59,200
and i think i counted to like 25

00:08:58,160 --> 00:09:01,360
different ways to

00:08:59,200 --> 00:09:03,360
to write down time and some of them were

00:09:01,360 --> 00:09:06,720
like really weird

00:09:03,360 --> 00:09:09,120
uh and they were hard to get rid of

00:09:06,720 --> 00:09:10,880
because of of fear of changing things

00:09:09,120 --> 00:09:12,800
which we will look at later

00:09:10,880 --> 00:09:15,040
but this happens this type of cognitive

00:09:12,800 --> 00:09:17,600
erase this not only in the in the

00:09:15,040 --> 00:09:19,279
format of things but also in the in the

00:09:17,600 --> 00:09:22,800
naming of things

00:09:19,279 --> 00:09:25,120
and definition of common things like

00:09:22,800 --> 00:09:25,920
orders or users or transactions and so

00:09:25,120 --> 00:09:29,279
forth

00:09:25,920 --> 00:09:30,399
and also if you have to ask for yourself

00:09:29,279 --> 00:09:32,160
where's the truth

00:09:30,399 --> 00:09:34,160
for this type of data is it in the

00:09:32,160 --> 00:09:35,600
database is it in the lake or is it in

00:09:34,160 --> 00:09:39,120
the stream somewhere

00:09:35,600 --> 00:09:40,959
then that adds to your cognitive waste

00:09:39,120 --> 00:09:43,040
yeah and plus we're building just really

00:09:40,959 --> 00:09:45,279
complicated distributed systems

00:09:43,040 --> 00:09:47,200
that have lots of data and lots of tools

00:09:45,279 --> 00:09:47,839
and just to understand the complexity of

00:09:47,200 --> 00:09:49,600
the

00:09:47,839 --> 00:09:51,519
the server infrastructure and then the

00:09:49,600 --> 00:09:53,680
process view is

00:09:51,519 --> 00:09:55,680
is quite complicated and so i think data

00:09:53,680 --> 00:09:57,360
and analytics is not just about

00:09:55,680 --> 00:09:59,680
you know one process running on one

00:09:57,360 --> 00:10:02,959
machine with one user it's a team sport

00:09:59,680 --> 00:10:02,959
across a distributed system

00:10:03,760 --> 00:10:07,519
yeah completely aggressive it's this

00:10:05,680 --> 00:10:09,200
team sport that makes it difficult right

00:10:07,519 --> 00:10:12,160
if there was only one person thinks

00:10:09,200 --> 00:10:13,680
everything would be coherent

00:10:12,160 --> 00:10:15,170
well that movie that's the way you write

00:10:13,680 --> 00:10:17,680
code but not i don't

00:10:15,170 --> 00:10:20,480
[Music]

00:10:17,680 --> 00:10:21,040
so where does this cognitive waste come

00:10:20,480 --> 00:10:24,079
from well

00:10:21,040 --> 00:10:26,160
one one thing which uh

00:10:24,079 --> 00:10:27,519
chris mentioned is this the we have

00:10:26,160 --> 00:10:28,480
number of teams that are that are

00:10:27,519 --> 00:10:30,640
collaborating

00:10:28,480 --> 00:10:32,079
and if we have a culture where you don't

00:10:30,640 --> 00:10:35,680
have to ask for permission

00:10:32,079 --> 00:10:36,320
to to and have to uh synchronize

00:10:35,680 --> 00:10:38,240
everything

00:10:36,320 --> 00:10:39,920
with everyone then we can choose freely

00:10:38,240 --> 00:10:42,959
and in that choice

00:10:39,920 --> 00:10:45,839
uh although it enables us it has the

00:10:42,959 --> 00:10:47,440
uh the side effect of creating uh

00:10:45,839 --> 00:10:50,320
diversity

00:10:47,440 --> 00:10:52,880
harmful the harmful type of diversity

00:10:50,320 --> 00:10:55,279
and creating heterogeneity

00:10:52,880 --> 00:10:56,399
and also if you if you favor throwing

00:10:55,279 --> 00:11:00,160
things out right now

00:10:56,399 --> 00:11:03,279
rather than coming to a consensus on

00:11:00,160 --> 00:11:05,120
what the semantics should be and in

00:11:03,279 --> 00:11:08,160
most of the companies where i worked

00:11:05,120 --> 00:11:11,200
these throwing things out right now

00:11:08,160 --> 00:11:14,320
have been much higher rewarded

00:11:11,200 --> 00:11:15,519
than trying to make ensure that things

00:11:14,320 --> 00:11:18,800
are homogeneous

00:11:15,519 --> 00:11:21,680
coordinated and that we don't have waste

00:11:18,800 --> 00:11:23,200
yes there's the opposite lars where

00:11:21,680 --> 00:11:24,480
you've got rigid companies who are

00:11:23,200 --> 00:11:28,560
trying to not have

00:11:24,480 --> 00:11:30,880
uh um they're trying to make change

00:11:28,560 --> 00:11:31,600
hard in order to reduce the risk of

00:11:30,880 --> 00:11:34,560
error

00:11:31,600 --> 00:11:35,040
and so in some ways their this idea of

00:11:34,560 --> 00:11:37,839
lean

00:11:35,040 --> 00:11:38,880
or data ops is the happy medium right

00:11:37,839 --> 00:11:42,000
between

00:11:38,880 --> 00:11:44,959
potential chaos by having autonomy

00:11:42,000 --> 00:11:45,760
and freedom and the boot on your neck of

00:11:44,959 --> 00:11:48,160
control

00:11:45,760 --> 00:11:50,320
and how do you mix and last between

00:11:48,160 --> 00:11:53,360
those two

00:11:50,320 --> 00:11:55,680
yeah and the being rigid and

00:11:53,360 --> 00:11:56,480
making it hard to change things making

00:11:55,680 --> 00:12:00,000
it

00:11:56,480 --> 00:12:05,120
is making it difficult to address

00:12:00,000 --> 00:12:07,440
uh the waste uh so in order to

00:12:05,120 --> 00:12:09,120
avoid waste what what what can you do in

00:12:07,440 --> 00:12:11,519
order to not get it in in

00:12:09,120 --> 00:12:13,279
from the beginning well reuse of course

00:12:11,519 --> 00:12:15,200
if someone else has defined

00:12:13,279 --> 00:12:17,040
the way to store time or define

00:12:15,200 --> 00:12:20,000
semantics and so forth

00:12:17,040 --> 00:12:21,920
uh it should if it's easy to reuse that

00:12:20,000 --> 00:12:24,480
definition then then

00:12:21,920 --> 00:12:26,639
you will have less waste but in order

00:12:24,480 --> 00:12:28,000
for things to be easy to reuse you must

00:12:26,639 --> 00:12:31,120
be able to find them

00:12:28,000 --> 00:12:34,160
and find the documentation about them

00:12:31,120 --> 00:12:36,399
and also be able to change them

00:12:34,160 --> 00:12:38,240
be able to change them so that they fit

00:12:36,399 --> 00:12:40,000
your needs so if you have a read only

00:12:38,240 --> 00:12:41,839
sharing that's that's not sufficient you

00:12:40,000 --> 00:12:44,240
need to have right capacity

00:12:41,839 --> 00:12:45,040
and in order to have right capacity it

00:12:44,240 --> 00:12:48,160
needs to be

00:12:45,040 --> 00:12:51,040
easy to change things

00:12:48,160 --> 00:12:53,040
uh which brings us to how to eliminate

00:12:51,040 --> 00:12:55,200
waste

00:12:53,040 --> 00:12:56,880
if if you already have the cognitive

00:12:55,200 --> 00:12:58,240
waste then the way to eliminate him is

00:12:56,880 --> 00:13:00,480
to harmonize

00:12:58,240 --> 00:13:01,440
things right but if you're scared about

00:13:00,480 --> 00:13:04,720
harmonizing things

00:13:01,440 --> 00:13:07,680
changing the time form and so forth then

00:13:04,720 --> 00:13:08,399
i obviously you will never take the

00:13:07,680 --> 00:13:10,720
effort

00:13:08,399 --> 00:13:12,320
to make that uh change to harmonize

00:13:10,720 --> 00:13:13,440
things and the you remember the the

00:13:12,320 --> 00:13:15,760
pipeline the

00:13:13,440 --> 00:13:17,519
the redundant parallel pipeline that i

00:13:15,760 --> 00:13:19,760
mentioned a couple of slides earlier

00:13:17,519 --> 00:13:21,200
when we finally years later we're about

00:13:19,760 --> 00:13:22,800
to remove that pipeline

00:13:21,200 --> 00:13:24,320
it turned out that it took us a year and

00:13:22,800 --> 00:13:26,720
a half to

00:13:24,320 --> 00:13:28,160
to remove that pipeline and replace it

00:13:26,720 --> 00:13:29,680
with something new

00:13:28,160 --> 00:13:31,519
because we didn't know what we would

00:13:29,680 --> 00:13:35,680
break downstream

00:13:31,519 --> 00:13:37,440
there's a high risk of removing things

00:13:35,680 --> 00:13:40,480
yeah and i think that's also a bit of

00:13:37,440 --> 00:13:42,079
cognitive waste on teams because

00:13:40,480 --> 00:13:43,920
a lot of teams get sort of locked in

00:13:42,079 --> 00:13:47,360
fear of change because

00:13:43,920 --> 00:13:49,519
data and analytic teams have to

00:13:47,360 --> 00:13:51,920
deal with their customers complaining

00:13:49,519 --> 00:13:53,920
very upfront about if it's wrong or if

00:13:51,920 --> 00:13:56,800
it's late or if it's incorrect

00:13:53,920 --> 00:13:58,880
and we build these sort of very

00:13:56,800 --> 00:14:00,959
crystalline

00:13:58,880 --> 00:14:02,800
sets of code that we don't want to

00:14:00,959 --> 00:14:04,639
change we don't want to work we don't

00:14:02,800 --> 00:14:06,000
want to touch once it's working

00:14:04,639 --> 00:14:08,079
and so it is very true you create a

00:14:06,000 --> 00:14:09,920
pipeline and it can live forever

00:14:08,079 --> 00:14:11,440
and so partly the reason it's

00:14:09,920 --> 00:14:13,040
crystalline i think has to do with

00:14:11,440 --> 00:14:14,959
testing and partly i think it has to do

00:14:13,040 --> 00:14:17,120
with what lars said is that we

00:14:14,959 --> 00:14:19,440
we're in a complexity business and how

00:14:17,120 --> 00:14:20,959
do you tame complexity well there's

00:14:19,440 --> 00:14:22,959
ideas that came from software

00:14:20,959 --> 00:14:26,480
engineering about encapsulation

00:14:22,959 --> 00:14:29,360
and reuse and sharing and partly

00:14:26,480 --> 00:14:30,240
um as a data scientist you think you do

00:14:29,360 --> 00:14:32,639
think your job

00:14:30,240 --> 00:14:34,399
is to get insight to your customer but

00:14:32,639 --> 00:14:37,760
the way that you get insight

00:14:34,399 --> 00:14:39,199
is to build a system that delivers

00:14:37,760 --> 00:14:40,560
insight and in order to build a good

00:14:39,199 --> 00:14:41,680
system you've got to deal with the

00:14:40,560 --> 00:14:43,360
complexity

00:14:41,680 --> 00:14:45,519
of that system and that and the

00:14:43,360 --> 00:14:47,440
complexity is is everyone's

00:14:45,519 --> 00:14:48,560
creating and when you start off as a

00:14:47,440 --> 00:14:51,279
software engineer

00:14:48,560 --> 00:14:52,880
you get hit up in the head with um uh

00:14:51,279 --> 00:14:55,600
the complexity of the system

00:14:52,880 --> 00:14:57,199
and i think this is coming back to bite

00:14:55,600 --> 00:14:59,279
us in data science and engineering

00:14:57,199 --> 00:15:00,880
because we're building very complicated

00:14:59,279 --> 00:15:02,720
you know ten thousand hundred thousand

00:15:00,880 --> 00:15:04,399
line of code systems across multiple

00:15:02,720 --> 00:15:06,720
tools and teams and and we need to

00:15:04,399 --> 00:15:08,880
handle it

00:15:06,720 --> 00:15:09,839
and they should be distributed and super

00:15:08,880 --> 00:15:11,519
scalable and

00:15:09,839 --> 00:15:14,560
fault resilient and everything and

00:15:11,519 --> 00:15:14,560
things go complex

00:15:15,120 --> 00:15:19,440
um so coming on to a different type of

00:15:18,639 --> 00:15:23,279
waste

00:15:19,440 --> 00:15:26,720
um the friction to get things

00:15:23,279 --> 00:15:28,880
out the door uh to get

00:15:26,720 --> 00:15:30,000
from your the idea that you have in your

00:15:28,880 --> 00:15:32,160
head to

00:15:30,000 --> 00:15:33,440
uh to writing code and getting it out to

00:15:32,160 --> 00:15:35,600
production and in

00:15:33,440 --> 00:15:36,639
in an ideal world there will be an idea

00:15:35,600 --> 00:15:38,959
some research

00:15:36,639 --> 00:15:40,399
on figure learning things and then

00:15:38,959 --> 00:15:42,399
writing codes and then in

00:15:40,399 --> 00:15:44,399
production and then repeat the learning

00:15:42,399 --> 00:15:46,880
coding production and so forth

00:15:44,399 --> 00:15:47,759
anything else that you do is friction

00:15:46,880 --> 00:15:49,680
and waste

00:15:47,759 --> 00:15:50,800
and we do tend to do lots of things here

00:15:49,680 --> 00:15:54,000
that are

00:15:50,800 --> 00:15:55,839
uh waste this also in the

00:15:54,000 --> 00:15:57,759
in the lean world there is something

00:15:55,839 --> 00:15:58,079
called inventory one form of waste which

00:15:57,759 --> 00:16:00,320
is

00:15:58,079 --> 00:16:02,880
things that you have done but have not

00:16:00,320 --> 00:16:06,000
yet reached out

00:16:02,880 --> 00:16:08,320
to end users and have had effect and

00:16:06,000 --> 00:16:10,320
in in data processing we have both code

00:16:08,320 --> 00:16:11,360
inventory like code that is not yet in

00:16:10,320 --> 00:16:15,279
production

00:16:11,360 --> 00:16:19,759
as well as data inventory uh

00:16:15,279 --> 00:16:19,759
data that has not yet been fully

00:16:20,839 --> 00:16:25,680
processed

00:16:22,880 --> 00:16:28,000
so zooming in on things here we must

00:16:25,680 --> 00:16:31,519
remember that

00:16:28,000 --> 00:16:34,240
in for data driven products

00:16:31,519 --> 00:16:35,839
we cannot if we assess quality in order

00:16:34,240 --> 00:16:37,120
to put it in production we cannot just

00:16:35,839 --> 00:16:39,440
look at the code

00:16:37,120 --> 00:16:41,519
we need to look at both the code and the

00:16:39,440 --> 00:16:44,639
data so no matter how much

00:16:41,519 --> 00:16:46,560
we polish the code the uh

00:16:44,639 --> 00:16:48,880
we don't know the quality until it

00:16:46,560 --> 00:16:51,360
reaches real production data

00:16:48,880 --> 00:16:52,240
therefore we have to test things in

00:16:51,360 --> 00:16:55,199
production

00:16:52,240 --> 00:16:56,000
and throw things out and get feedback

00:16:55,199 --> 00:16:58,480
right away

00:16:56,000 --> 00:16:59,279
from real production data and perhaps

00:16:58,480 --> 00:17:02,000
the best

00:16:59,279 --> 00:17:04,079
illustrative example here is when apple

00:17:02,000 --> 00:17:06,480
launched apple maps i mean apple are

00:17:04,079 --> 00:17:08,079
super good at polishing things to

00:17:06,480 --> 00:17:10,160
perfection so that the code is

00:17:08,079 --> 00:17:13,120
absolutely perfect

00:17:10,160 --> 00:17:14,240
but when the products whose heavily

00:17:13,120 --> 00:17:16,000
depend on data

00:17:14,240 --> 00:17:18,480
actually hit the real world it turned

00:17:16,000 --> 00:17:20,480
out that the data quality was not good

00:17:18,480 --> 00:17:22,720
enough and this was

00:17:20,480 --> 00:17:23,679
caused some interesting headlines so

00:17:22,720 --> 00:17:25,439
yeah and i think

00:17:23,679 --> 00:17:26,959
that that sense that you're building a

00:17:25,439 --> 00:17:29,360
product that is

00:17:26,959 --> 00:17:31,440
consumable by an end customer and you

00:17:29,360 --> 00:17:32,000
may be the etl engineer or the data

00:17:31,440 --> 00:17:34,400
scientist

00:17:32,000 --> 00:17:35,120
on it and yeah you may be part of it but

00:17:34,400 --> 00:17:37,280
your

00:17:35,120 --> 00:17:38,160
end goal is to deliver value to a

00:17:37,280 --> 00:17:40,480
customer

00:17:38,160 --> 00:17:42,559
and that value comes from the code the

00:17:40,480 --> 00:17:44,799
data the infrastructure it runs on

00:17:42,559 --> 00:17:46,480
and that's your goal your goal isn't to

00:17:44,799 --> 00:17:48,240
just fulfill the fact that you've got a

00:17:46,480 --> 00:17:49,280
set of requirements from a jira ticket

00:17:48,240 --> 00:17:51,760
and then you're done

00:17:49,280 --> 00:17:53,520
and so owning the results and owning the

00:17:51,760 --> 00:17:55,200
fact that your customers success and

00:17:53,520 --> 00:17:56,160
seeing what you do as a product as

00:17:55,200 --> 00:17:58,160
opposed to

00:17:56,160 --> 00:17:59,360
you're just part of this you know

00:17:58,160 --> 00:18:01,280
overall

00:17:59,360 --> 00:18:02,559
process that you've got to do step by

00:18:01,280 --> 00:18:04,240
step because these are

00:18:02,559 --> 00:18:06,559
this is the way your organization gets

00:18:04,240 --> 00:18:07,760
done and it's harder for people i think

00:18:06,559 --> 00:18:10,640
to take that

00:18:07,760 --> 00:18:12,000
customer first product i own the result

00:18:10,640 --> 00:18:15,760
work but it's actually much more

00:18:12,000 --> 00:18:19,520
satisfying way to work

00:18:15,760 --> 00:18:19,520
i completely agree yeah

00:18:19,679 --> 00:18:23,039
i'm a very holistic person i i prefer

00:18:21,840 --> 00:18:24,640
the you know working

00:18:23,039 --> 00:18:29,600
working with products end-to-end and

00:18:24,640 --> 00:18:33,520
it's much more rewarding

00:18:29,600 --> 00:18:36,720
so if you look at uh how to eliminate

00:18:33,520 --> 00:18:39,120
uh delivery waste

00:18:36,720 --> 00:18:39,760
it's in in theory it's simple just

00:18:39,120 --> 00:18:42,320
question

00:18:39,760 --> 00:18:44,160
everything that you do but this is

00:18:42,320 --> 00:18:46,160
actually more difficult in practice than

00:18:44,160 --> 00:18:49,440
it sounds because you will be

00:18:46,160 --> 00:18:51,120
uh you will be hindered by the

00:18:49,440 --> 00:18:53,679
assumptions that you make of what is

00:18:51,120 --> 00:18:55,679
necessary and what is not necessary

00:18:53,679 --> 00:18:56,720
and i'd like to highlight this book in

00:18:55,679 --> 00:18:59,840
the state of

00:18:56,720 --> 00:19:02,320
devops report because they

00:18:59,840 --> 00:19:03,919
can they throw away some of the missed

00:19:02,320 --> 00:19:06,000
or dispel some of the myths in

00:19:03,919 --> 00:19:08,000
particular the most important method

00:19:06,000 --> 00:19:10,480
there is some kind of trade-off between

00:19:08,000 --> 00:19:12,080
speed and reliability and quality it

00:19:10,480 --> 00:19:14,960
turns out that

00:19:12,080 --> 00:19:17,039
that the teams with the highest

00:19:14,960 --> 00:19:20,880
reliability and quality products in the

00:19:17,039 --> 00:19:20,880
end they're also the teams that move the

00:19:22,840 --> 00:19:28,000
fastest

00:19:24,160 --> 00:19:29,600
so codimentory which it code that we are

00:19:28,000 --> 00:19:32,160
not yet fully utilized

00:19:29,600 --> 00:19:33,280
and uh this is prevalent in many

00:19:32,160 --> 00:19:36,320
computer systems in

00:19:33,280 --> 00:19:37,520
it is particularly prevalent in in data

00:19:36,320 --> 00:19:40,240
processing where

00:19:37,520 --> 00:19:41,760
we're cultivating notebooks or in

00:19:40,240 --> 00:19:44,160
experimental

00:19:41,760 --> 00:19:44,880
uh pipelines that never make it out to

00:19:44,160 --> 00:19:48,160
production

00:19:44,880 --> 00:19:51,840
and so forth for ages

00:19:48,160 --> 00:19:53,520
and uh it's mostly common that a problem

00:19:51,840 --> 00:19:56,880
is not specific to data

00:19:53,520 --> 00:19:59,039
and uh likewise a good great resource

00:19:56,880 --> 00:20:01,280
for avoiding this type of waste here is

00:19:59,039 --> 00:20:02,320
is the site truck-based development

00:20:01,280 --> 00:20:04,799
which actually has

00:20:02,320 --> 00:20:07,280
scope much more than than trunk based

00:20:04,799 --> 00:20:09,280
but it gives you a

00:20:07,280 --> 00:20:10,880
it makes you think about what you need

00:20:09,280 --> 00:20:14,000
and what you don't

00:20:10,880 --> 00:20:14,000
actually really need

00:20:15,840 --> 00:20:19,360
so i mentioned data inventory and this

00:20:17,679 --> 00:20:21,200
is also something that we

00:20:19,360 --> 00:20:22,480
have taken for granted for so long that

00:20:21,200 --> 00:20:24,559
there has to be invent

00:20:22,480 --> 00:20:26,640
inventory in unprocessed data because in

00:20:24,559 --> 00:20:29,280
the database centric world

00:20:26,640 --> 00:20:30,400
we have this idea that we put the data

00:20:29,280 --> 00:20:32,720
in our databases

00:20:30,400 --> 00:20:34,720
in a normalized manner and then at

00:20:32,720 --> 00:20:35,679
runtime when the user requested some

00:20:34,720 --> 00:20:38,480
data

00:20:35,679 --> 00:20:39,360
uh we did the processing and joined the

00:20:38,480 --> 00:20:42,000
data

00:20:39,360 --> 00:20:43,600
uh so that we presented a list of the

00:20:42,000 --> 00:20:44,400
user's orders or whatever he was

00:20:43,600 --> 00:20:46,000
requesting

00:20:44,400 --> 00:20:48,000
turns out that if there's a problem in

00:20:46,000 --> 00:20:50,000
that join or the processing we will

00:20:48,000 --> 00:20:53,600
notice at runtime and we will have a

00:20:50,000 --> 00:20:55,200
a bad user experience or an outage so in

00:20:53,600 --> 00:20:56,960
when we're shifting to working with data

00:20:55,200 --> 00:20:59,200
pipelines and data factories

00:20:56,960 --> 00:21:01,200
we do eager processing instead we strive

00:20:59,200 --> 00:21:03,360
to process the data

00:21:01,200 --> 00:21:04,960
in advance and denormalize it so it's

00:21:03,360 --> 00:21:06,880
prepared for the user and if something

00:21:04,960 --> 00:21:08,799
goes wrong you're not processing

00:21:06,880 --> 00:21:10,960
the data pipeline will crash but that's

00:21:08,799 --> 00:21:14,000
fine uh because we

00:21:10,960 --> 00:21:15,200
we know how to make the impact of that

00:21:14,000 --> 00:21:19,200
crash

00:21:15,200 --> 00:21:21,600
uh low which we'll come to later and

00:21:19,200 --> 00:21:22,480
so this is the equivalent of what is in

00:21:21,600 --> 00:21:24,799
lean it's called an

00:21:22,480 --> 00:21:26,159
andon core in in in manufacturing

00:21:24,799 --> 00:21:26,559
pipelines they have a core that they

00:21:26,159 --> 00:21:27,840
pull

00:21:26,559 --> 00:21:29,760
whenever something goes wrong and then

00:21:27,840 --> 00:21:31,360
they stop the pipeline and figure out

00:21:29,760 --> 00:21:32,000
the problem and solve the problem

00:21:31,360 --> 00:21:34,320
because

00:21:32,000 --> 00:21:35,919
before the pipeline continues yeah and

00:21:34,320 --> 00:21:38,480
in most organizations

00:21:35,919 --> 00:21:40,559
they have a huge amount of data that

00:21:38,480 --> 00:21:43,600
they have yet to analyze

00:21:40,559 --> 00:21:45,360
and so um you know there's a sense of

00:21:43,600 --> 00:21:47,200
humbleness here that you don't know what

00:21:45,360 --> 00:21:47,679
your customer wants and if you can get

00:21:47,200 --> 00:21:50,159
something

00:21:47,679 --> 00:21:51,520
into your customers hands first you can

00:21:50,159 --> 00:21:54,400
learn what they want

00:21:51,520 --> 00:21:56,320
and one of the biggest ways uh beyond

00:21:54,400 --> 00:21:57,520
the ones that lars have said is the fact

00:21:56,320 --> 00:22:00,159
that people spend months

00:21:57,520 --> 00:22:02,000
doing the wrong thing and they build

00:22:00,159 --> 00:22:02,880
something that is not useful to a

00:22:02,000 --> 00:22:05,120
customer

00:22:02,880 --> 00:22:06,559
and the most important way to make sure

00:22:05,120 --> 00:22:08,880
that you have something

00:22:06,559 --> 00:22:10,320
that is useful to the customer is to get

00:22:08,880 --> 00:22:13,440
and push feedback as

00:22:10,320 --> 00:22:16,000
early and often in the process and so uh

00:22:13,440 --> 00:22:18,320
that way when you're building a a model

00:22:16,000 --> 00:22:21,840
or a data set or a visualization

00:22:18,320 --> 00:22:23,840
having customer feedback keeps you from

00:22:21,840 --> 00:22:25,760
wandering off in the wrong direction for

00:22:23,840 --> 00:22:27,280
months and believe me i've done it and

00:22:25,760 --> 00:22:28,960
it's no fun to spend months i mean

00:22:27,280 --> 00:22:29,840
perhaps it's fun that you get to go and

00:22:28,960 --> 00:22:31,520
live in your

00:22:29,840 --> 00:22:32,960
write code by yourself or with the one

00:22:31,520 --> 00:22:36,159
or two people but the

00:22:32,960 --> 00:22:38,880
reality is it's uh you would rather much

00:22:36,159 --> 00:22:40,480
rather have something done and useful to

00:22:38,880 --> 00:22:42,880
your customer and getting

00:22:40,480 --> 00:22:44,960
feedback on that and you know there's a

00:22:42,880 --> 00:22:46,080
lot of companies have a lot of data and

00:22:44,960 --> 00:22:47,919
they assume

00:22:46,080 --> 00:22:49,200
that if i build a bunch of data and put

00:22:47,919 --> 00:22:52,480
it all together

00:22:49,200 --> 00:22:54,240
um people will come it's as if i've

00:22:52,480 --> 00:22:55,840
gotten all my data together

00:22:54,240 --> 00:22:58,000
it's the what we call the field of

00:22:55,840 --> 00:22:58,880
dreams you know you build it and they

00:22:58,000 --> 00:23:01,120
will come

00:22:58,880 --> 00:23:02,960
and so uh just the fact that you have a

00:23:01,120 --> 00:23:03,760
lot of data inventory doesn't mean it's

00:23:02,960 --> 00:23:05,760
useful

00:23:03,760 --> 00:23:07,520
you're trying to find the useful data

00:23:05,760 --> 00:23:10,880
and the way to make it useful

00:23:07,520 --> 00:23:12,720
and an iterative development methodology

00:23:10,880 --> 00:23:14,880
combined with lean principles is the way

00:23:12,720 --> 00:23:16,720
to go

00:23:14,880 --> 00:23:17,919
which touches on one of the other lean

00:23:16,720 --> 00:23:20,840
principles you know

00:23:17,919 --> 00:23:23,360
uh pull workload rather than push i mean

00:23:20,840 --> 00:23:25,200
we've i've seen many examples where

00:23:23,360 --> 00:23:27,039
your data is just poured into a lake in

00:23:25,200 --> 00:23:29,600
the hope that something

00:23:27,039 --> 00:23:32,000
good will happen later whereas the

00:23:29,600 --> 00:23:34,000
there's a lean principle that you should

00:23:32,000 --> 00:23:36,159
only pull the data and do the work

00:23:34,000 --> 00:23:37,840
that's actually needed for it for a use

00:23:36,159 --> 00:23:39,919
case

00:23:37,840 --> 00:23:41,360
taking us to the third type of ways the

00:23:39,919 --> 00:23:43,120
operational ways the

00:23:41,360 --> 00:23:45,120
the things that take your steal your

00:23:43,120 --> 00:23:47,200
time and cause you harm when things are

00:23:45,120 --> 00:23:50,240
in production

00:23:47,200 --> 00:23:50,559
so it comes in a couple of variants one

00:23:50,240 --> 00:23:52,080
is

00:23:50,559 --> 00:23:53,600
friction when you are want to do

00:23:52,080 --> 00:23:55,039
operational maneuvers when you want to

00:23:53,600 --> 00:23:57,919
deploy something you want to

00:23:55,039 --> 00:23:58,799
to change a pipeline or upgrade and so

00:23:57,919 --> 00:24:01,440
forth

00:23:58,799 --> 00:24:02,159
and that friction is very often caused

00:24:01,440 --> 00:24:04,159
by fear

00:24:02,159 --> 00:24:05,200
fear of breaking things you're doing the

00:24:04,159 --> 00:24:07,840
wrong thing

00:24:05,200 --> 00:24:09,039
which ties to the costs of things going

00:24:07,840 --> 00:24:11,840
wrong right if

00:24:09,039 --> 00:24:13,440
if the things go wrong or very costly

00:24:11,840 --> 00:24:14,559
then you need to be afraid or people

00:24:13,440 --> 00:24:17,760
become afraid

00:24:14,559 --> 00:24:20,960
to change things so let's look

00:24:17,760 --> 00:24:24,480
at how we can cut down the cost

00:24:20,960 --> 00:24:27,840
of incidents the key

00:24:24,480 --> 00:24:30,320
principle here is to separate online

00:24:27,840 --> 00:24:32,320
environments from offline environments

00:24:30,320 --> 00:24:33,840
in the online world

00:24:32,320 --> 00:24:36,159
you have your production database to

00:24:33,840 --> 00:24:39,279
serve users if they go wrong

00:24:36,159 --> 00:24:40,320
if something happened here uh you you

00:24:39,279 --> 00:24:43,520
will have very many

00:24:40,320 --> 00:24:45,360
unhappy customers uh whereas much of the

00:24:43,520 --> 00:24:46,080
data processing can be done in offline

00:24:45,360 --> 00:24:48,720
world so you

00:24:46,080 --> 00:24:50,880
take your data out take copies and dump

00:24:48,720 --> 00:24:51,600
dump your databases collective guns and

00:24:50,880 --> 00:24:54,559
so forth

00:24:51,600 --> 00:24:54,960
to do the processing offline nobody's

00:24:54,559 --> 00:24:56,799
hurt

00:24:54,960 --> 00:24:58,960
if things go wrong and when you have

00:24:56,799 --> 00:25:00,320
finally made an artifact of value like a

00:24:58,960 --> 00:25:02,799
new fraud model

00:25:00,320 --> 00:25:03,440
that you want to uh throw out into the

00:25:02,799 --> 00:25:06,799
online

00:25:03,440 --> 00:25:08,320
world you say oh you you sort of moved

00:25:06,799 --> 00:25:10,159
very carefully to the online world

00:25:08,320 --> 00:25:13,360
without disrupting production

00:25:10,159 --> 00:25:15,440
and then you have a principle of you

00:25:13,360 --> 00:25:17,520
apply principle of having multiple

00:25:15,440 --> 00:25:18,880
all the copies of that same fraud model

00:25:17,520 --> 00:25:20,880
so if something goes wrong in the

00:25:18,880 --> 00:25:23,039
offline world and you have an outage for

00:25:20,880 --> 00:25:25,120
hours or a day you still have some old

00:25:23,039 --> 00:25:27,520
copies around it that you can use so the

00:25:25,120 --> 00:25:29,200
careful handovers between offline your

00:25:27,520 --> 00:25:33,039
my world and then

00:25:29,200 --> 00:25:34,480
you can lower the cost of incidents

00:25:33,039 --> 00:25:36,159
you have low customer incidents in

00:25:34,480 --> 00:25:42,320
offline world which means that you can

00:25:36,159 --> 00:25:45,279
move much much faster

00:25:42,320 --> 00:25:45,760
so let's let's zoom in a little on on

00:25:45,279 --> 00:25:47,679
how

00:25:45,760 --> 00:25:49,279
uh different how there can be

00:25:47,679 --> 00:25:51,679
differences in costs between the

00:25:49,279 --> 00:25:53,279
uh online offline world and also between

00:25:51,679 --> 00:25:56,880
data traditional data

00:25:53,279 --> 00:26:00,159
uh traditional architectures and

00:25:56,880 --> 00:26:02,240
data factories so in this case we have

00:26:00,159 --> 00:26:04,000
we have a typical microservice

00:26:02,240 --> 00:26:06,559
architecture let's say one of your

00:26:04,000 --> 00:26:09,200
uh one of your services goes wrong and

00:26:06,559 --> 00:26:10,880
it spits out some valid data now

00:26:09,200 --> 00:26:12,960
you don't know it's hard to figure out

00:26:10,880 --> 00:26:15,200
where that data has has gone if you go

00:26:12,960 --> 00:26:16,960
discover the problem like two days later

00:26:15,200 --> 00:26:19,360
who has asked for this data where

00:26:16,960 --> 00:26:20,799
who where has it propagated from the

00:26:19,360 --> 00:26:24,000
source of the error

00:26:20,799 --> 00:26:24,880
to out to the different services you

00:26:24,000 --> 00:26:26,960
have a

00:26:24,880 --> 00:26:28,400
if this is important data you have a

00:26:26,960 --> 00:26:30,400
very painful

00:26:28,400 --> 00:26:31,679
operational procedure ahead of you in

00:26:30,400 --> 00:26:35,440
order to

00:26:31,679 --> 00:26:38,400
to recover from there

00:26:35,440 --> 00:26:38,799
whereas if you switch here to do to

00:26:38,400 --> 00:26:41,360
apply

00:26:38,799 --> 00:26:43,600
functional pro principles instead of the

00:26:41,360 --> 00:26:44,400
object oriented microservices you apply

00:26:43,600 --> 00:26:46,320
functional

00:26:44,400 --> 00:26:48,080
principles and do stream processing so

00:26:46,320 --> 00:26:50,000
you regard all the events

00:26:48,080 --> 00:26:51,200
in the streams as immutable you don't

00:26:50,000 --> 00:26:53,760
touch and you

00:26:51,200 --> 00:26:55,919
just transform them to new streams then

00:26:53,760 --> 00:26:58,720
you it's easier to reason

00:26:55,919 --> 00:26:59,039
which data is now corrupt because it's

00:26:58,720 --> 00:27:01,600
all

00:26:59,039 --> 00:27:02,720
everything downstream from a particular

00:27:01,600 --> 00:27:04,799
point in time

00:27:02,720 --> 00:27:06,400
so this cuts down the operational

00:27:04,799 --> 00:27:08,720
overhead in case you have

00:27:06,400 --> 00:27:10,159
uh software bugs you can cut it down

00:27:08,720 --> 00:27:12,720
even more by not having

00:27:10,159 --> 00:27:13,440
unbounded streams of of millions events

00:27:12,720 --> 00:27:16,799
per day

00:27:13,440 --> 00:27:18,080
and instead lump them into boxes batches

00:27:16,799 --> 00:27:20,159
and you say okay here's

00:27:18,080 --> 00:27:21,679
today's event and her tomorrow's events

00:27:20,159 --> 00:27:22,640
and so forth and then when something

00:27:21,679 --> 00:27:25,600
goes wrong

00:27:22,640 --> 00:27:27,279
you have uh not three million events

00:27:25,600 --> 00:27:31,039
that that were bad you have

00:27:27,279 --> 00:27:33,200
three boxes of three batches

00:27:31,039 --> 00:27:35,120
of events and you can say hey these

00:27:33,200 --> 00:27:36,799
three days the batches were wrong

00:27:35,120 --> 00:27:38,480
sorry can you please record from there

00:27:36,799 --> 00:27:39,039
and that takes things to human time

00:27:38,480 --> 00:27:42,640
scale

00:27:39,039 --> 00:27:45,600
makes it much easier to uh

00:27:42,640 --> 00:27:47,679
to efficiently operate yeah and i think

00:27:45,600 --> 00:27:49,520
a lot of organizations have inherited

00:27:47,679 --> 00:27:51,120
this idea of a data warehouse which is

00:27:49,520 --> 00:27:53,760
this

00:27:51,120 --> 00:27:56,000
it's built on more of a non-functional

00:27:53,760 --> 00:27:58,000
or a stateful architecture where

00:27:56,000 --> 00:27:59,200
you're constantly appending things and

00:27:58,000 --> 00:28:01,440
it's not

00:27:59,200 --> 00:28:03,679
it's like a object in software where you

00:28:01,440 --> 00:28:05,919
can't reason about its internal state

00:28:03,679 --> 00:28:07,279
and just like functional programming and

00:28:05,919 --> 00:28:08,720
in software i think functional

00:28:07,279 --> 00:28:11,120
principles apply to

00:28:08,720 --> 00:28:12,480
data operations where you can if you can

00:28:11,120 --> 00:28:14,559
always start

00:28:12,480 --> 00:28:16,320
with an immutable data you can always

00:28:14,559 --> 00:28:18,399
start with your base data and get to

00:28:16,320 --> 00:28:20,320
where you are again by a process and a

00:28:18,399 --> 00:28:22,799
series of steps

00:28:20,320 --> 00:28:23,840
it becomes easier as lars says to reason

00:28:22,799 --> 00:28:25,760
about your system

00:28:23,840 --> 00:28:27,520
it becomes easier to run parallel

00:28:25,760 --> 00:28:30,240
versions of your system

00:28:27,520 --> 00:28:32,159
and it's not any more expensive because

00:28:30,240 --> 00:28:35,200
we live in a cloud world we're having

00:28:32,159 --> 00:28:37,039
where disc and cpu are cheap and so

00:28:35,200 --> 00:28:39,039
functional architectures where you can

00:28:37,039 --> 00:28:40,880
go you can always go back to the base

00:28:39,039 --> 00:28:41,520
data the immutable data and start over

00:28:40,880 --> 00:28:44,880
again

00:28:41,520 --> 00:28:47,120
are another easier way to handle the

00:28:44,880 --> 00:28:48,240
complexity of these systems when stuff

00:28:47,120 --> 00:28:50,000
goes wrong

00:28:48,240 --> 00:28:52,000
and in fact they're probably easier to

00:28:50,000 --> 00:28:54,159
build with the from the beginning

00:28:52,000 --> 00:28:56,159
and so these design patterns of of how

00:28:54,159 --> 00:28:59,679
you think about these complicated

00:28:56,159 --> 00:29:01,360
multi-team multi-cpu multi-processing

00:28:59,679 --> 00:29:03,039
engine types i think are actually very

00:29:01,360 --> 00:29:03,919
important in how people design things

00:29:03,039 --> 00:29:05,919
and i think the

00:29:03,919 --> 00:29:08,559
the pattern that was taught through the

00:29:05,919 --> 00:29:10,240
90s and 2010s of building

00:29:08,559 --> 00:29:11,760
a data warehouse and patching it

00:29:10,240 --> 00:29:12,000
patching and patching it every day until

00:29:11,760 --> 00:29:13,760
you're

00:29:12,000 --> 00:29:17,120
right i think actually makes things more

00:29:13,760 --> 00:29:17,120
complicated and harder to change

00:29:17,200 --> 00:29:22,240
so the operational cost here of the

00:29:20,559 --> 00:29:23,760
of the traditional object oriented

00:29:22,240 --> 00:29:26,159
online systems is

00:29:23,760 --> 00:29:27,760
usually hidden waste and one of my pet

00:29:26,159 --> 00:29:31,760
peeves is that there's

00:29:27,760 --> 00:29:34,399
uh way too much trend towards online and

00:29:31,760 --> 00:29:37,440
near lines past the stream processing

00:29:34,399 --> 00:29:40,799
that disregards the operational cost

00:29:37,440 --> 00:29:42,480
so i tend to tell all my clients to to

00:29:40,799 --> 00:29:44,000
think about their use case can you live

00:29:42,480 --> 00:29:47,440
with a few minutes latency

00:29:44,000 --> 00:29:48,880
then batch will save you operational

00:29:47,440 --> 00:29:49,600
time that you can use for data

00:29:48,880 --> 00:29:52,159
innovation

00:29:49,600 --> 00:29:53,520
it's all about eliminating waste which

00:29:52,159 --> 00:29:55,679
takes us to the last

00:29:53,520 --> 00:29:58,000
form of waste the product ways where you

00:29:55,679 --> 00:30:00,799
do work that's not actually

00:29:58,000 --> 00:30:02,799
driven by a need from a user customer

00:30:00,799 --> 00:30:06,159
and so forth

00:30:02,799 --> 00:30:08,080
or where you have value in your data

00:30:06,159 --> 00:30:09,440
that you cannot release due to some kind

00:30:08,080 --> 00:30:12,559
of friction and so forth

00:30:09,440 --> 00:30:15,600
and this unrealized value uh

00:30:12,559 --> 00:30:18,399
is i usually uh talk about

00:30:15,600 --> 00:30:19,760
demo data democratization the as a

00:30:18,399 --> 00:30:22,240
solution here the the

00:30:19,760 --> 00:30:23,120
importance of making your data

00:30:22,240 --> 00:30:25,440
accessible

00:30:23,120 --> 00:30:26,399
and well formatted and so forth and and

00:30:25,440 --> 00:30:28,320
i cut in a bit

00:30:26,399 --> 00:30:29,440
a small little quote here from adam

00:30:28,320 --> 00:30:32,960
kinney my

00:30:29,440 --> 00:30:36,240
ex manager now at next panel

00:30:32,960 --> 00:30:37,760
that tends to yield making the data

00:30:36,240 --> 00:30:39,679
accessible valuable usable

00:30:37,760 --> 00:30:42,320
it tends to yield much more value than

00:30:39,679 --> 00:30:45,360
all of the shiny and fancy things in

00:30:42,320 --> 00:30:48,559
my experience and with that

00:30:45,360 --> 00:30:49,919
i leave the uh token

00:30:48,559 --> 00:30:51,600
to christopher for the rest of the

00:30:49,919 --> 00:30:53,279
presentation yeah

00:30:51,600 --> 00:30:55,679
yeah thanks lara so i'm gonna uh

00:30:53,279 --> 00:30:58,559
hopefully you can see my screen

00:30:55,679 --> 00:31:00,000
so um you know one of the biggest if you

00:30:58,559 --> 00:31:01,440
can see my screen and i'm presenting

00:31:00,000 --> 00:31:02,880
this sort of bar graph

00:31:01,440 --> 00:31:05,279
you know one of the biggest things is

00:31:02,880 --> 00:31:06,799
that people are not spending time

00:31:05,279 --> 00:31:09,039
on doing the cool stuff that they want

00:31:06,799 --> 00:31:11,200
to do new features and data sets for

00:31:09,039 --> 00:31:14,320
customers they're spending a lot of time

00:31:11,200 --> 00:31:16,080
in a reactive mode reacting to errors

00:31:14,320 --> 00:31:17,679
reacting to the complexity of the

00:31:16,080 --> 00:31:19,600
organization

00:31:17,679 --> 00:31:20,799
and some of that complexity comes from

00:31:19,600 --> 00:31:23,360
the fact that

00:31:20,799 --> 00:31:24,799
data in analytics itself is not owned by

00:31:23,360 --> 00:31:26,880
one team

00:31:24,799 --> 00:31:29,120
the rise of self-service tools like

00:31:26,880 --> 00:31:31,760
tableau and trifacta have made

00:31:29,120 --> 00:31:33,760
the collaboration part between a central

00:31:31,760 --> 00:31:36,240
team and a decentralized team very

00:31:33,760 --> 00:31:38,159
um very complicated and so we've got

00:31:36,240 --> 00:31:39,360
these complex roles and complex

00:31:38,159 --> 00:31:41,440
organizations

00:31:39,360 --> 00:31:43,360
complex tool chains and data and

00:31:41,440 --> 00:31:44,880
collaboration and as a result

00:31:43,360 --> 00:31:46,880
we're not spending enough time doing the

00:31:44,880 --> 00:31:47,200
things that really matter to add value

00:31:46,880 --> 00:31:48,799
to

00:31:47,200 --> 00:31:50,880
the data products that we deliver to our

00:31:48,799 --> 00:31:52,799
customers and so

00:31:50,880 --> 00:31:55,440
in a lot of ways i you know i brought up

00:31:52,799 --> 00:31:56,799
at the beginning the 1970s car industry

00:31:55,440 --> 00:31:58,960
and i think it's uh

00:31:56,799 --> 00:32:01,039
i think that's the case where you know

00:31:58,960 --> 00:32:02,799
our ability to put something into

00:32:01,039 --> 00:32:03,360
production in the cycle time at which we

00:32:02,799 --> 00:32:05,519
could do

00:32:03,360 --> 00:32:07,519
new models and change of cars is very

00:32:05,519 --> 00:32:09,360
very slow weeks or months

00:32:07,519 --> 00:32:10,880
and the amount of errors that we have in

00:32:09,360 --> 00:32:11,919
production not just from poor data

00:32:10,880 --> 00:32:14,320
quality but from

00:32:11,919 --> 00:32:15,760
processing errors or timeliness errors

00:32:14,320 --> 00:32:16,880
is huge and actually it's really

00:32:15,760 --> 00:32:18,960
untracked

00:32:16,880 --> 00:32:20,080
um and i find a lot of data and

00:32:18,960 --> 00:32:22,559
analytics teams

00:32:20,080 --> 00:32:24,159
start with promise and they end up being

00:32:22,559 --> 00:32:28,159
very frustrated because

00:32:24,159 --> 00:32:30,960
um and we found a lot of cdos have us

00:32:28,159 --> 00:32:32,240
chief data officers have a short tenure

00:32:30,960 --> 00:32:33,760
people are leaving the data

00:32:32,240 --> 00:32:35,840
analytics profession which is

00:32:33,760 --> 00:32:38,080
unfortunate because they're frustrated

00:32:35,840 --> 00:32:39,440
and so um you know and i've got a bunch

00:32:38,080 --> 00:32:41,679
of gray hair because

00:32:39,440 --> 00:32:43,840
for many years i ran data in analytics

00:32:41,679 --> 00:32:46,080
teams and i suffered under the

00:32:43,840 --> 00:32:47,440
the fact that if you had a data error

00:32:46,080 --> 00:32:49,120
and lars and mars and i were talking

00:32:47,440 --> 00:32:50,960
about our big data errors and

00:32:49,120 --> 00:32:52,159
you know my thousands of sales reps all

00:32:50,960 --> 00:32:53,120
yelling at me because something was

00:32:52,159 --> 00:32:54,799
wrong and

00:32:53,120 --> 00:32:56,240
um that can really you know it can

00:32:54,799 --> 00:32:59,600
really uh cause you to

00:32:56,240 --> 00:33:02,640
uh have a very painful life

00:32:59,600 --> 00:33:03,360
and so um if we look at this one source

00:33:02,640 --> 00:33:05,120
of pain

00:33:03,360 --> 00:33:06,399
is the fact that these pipelines

00:33:05,120 --> 00:33:10,000
themselves

00:33:06,399 --> 00:33:11,919
um follow what's called conway's law and

00:33:10,000 --> 00:33:13,440
that means that they're designed based

00:33:11,919 --> 00:33:14,240
on the way the organization is

00:33:13,440 --> 00:33:16,960
structured

00:33:14,240 --> 00:33:18,640
and in a lot of organizations a customer

00:33:16,960 --> 00:33:20,720
is at one point

00:33:18,640 --> 00:33:22,240
and there may be a self-service team

00:33:20,720 --> 00:33:24,720
using tools like tableau

00:33:22,240 --> 00:33:26,000
or alteryx there may be a data science

00:33:24,720 --> 00:33:28,480
team there may be a back

00:33:26,000 --> 00:33:29,279
end data pipeline team and all three of

00:33:28,480 --> 00:33:31,120
these teams

00:33:29,279 --> 00:33:32,799
may or may not work for the same boss

00:33:31,120 --> 00:33:34,080
and they may or may not sit in the same

00:33:32,799 --> 00:33:36,320
building or they may or

00:33:34,080 --> 00:33:38,320
they may work in have completely

00:33:36,320 --> 00:33:40,960
different organization structures

00:33:38,320 --> 00:33:42,399
and what conway realized is that how you

00:33:40,960 --> 00:33:44,000
engineer something is actually

00:33:42,399 --> 00:33:45,039
reflective of that organization

00:33:44,000 --> 00:33:48,640
structure

00:33:45,039 --> 00:33:50,159
and if you were you know as as i am a

00:33:48,640 --> 00:33:51,440
software engineer you'd realize that

00:33:50,159 --> 00:33:54,480
that's probably not a

00:33:51,440 --> 00:33:56,640
a great way to um may not be the best

00:33:54,480 --> 00:33:58,799
and optimal way to organize your

00:33:56,640 --> 00:34:00,480
your team and so let's look at how that

00:33:58,799 --> 00:34:02,159
looks in some organizations and this is

00:34:00,480 --> 00:34:03,760
a bit of an eye chart but let me

00:34:02,159 --> 00:34:05,600
let me let me talk to you and if we go

00:34:03,760 --> 00:34:07,200
to the left the left column that says

00:34:05,600 --> 00:34:09,440
centralized development and the d

00:34:07,200 --> 00:34:11,839
is a a development team and it contains

00:34:09,440 --> 00:34:14,320
a data engineer a data scientist and

00:34:11,839 --> 00:34:15,520
someone doing bi and maybe governance

00:34:14,320 --> 00:34:17,280
and they're all a team

00:34:15,520 --> 00:34:18,960
and the question then becomes if they

00:34:17,280 --> 00:34:20,159
all work for the same boss well how does

00:34:18,960 --> 00:34:21,760
the data engineer

00:34:20,159 --> 00:34:23,280
who does the data work coordinate with

00:34:21,760 --> 00:34:24,399
the data scientist who does the model

00:34:23,280 --> 00:34:25,359
and the person who does the

00:34:24,399 --> 00:34:26,960
visualization

00:34:25,359 --> 00:34:28,639
you know how do they work together on

00:34:26,960 --> 00:34:31,280
the same team but

00:34:28,639 --> 00:34:33,280
normally that team also does their work

00:34:31,280 --> 00:34:35,760
and then hands it off to a production

00:34:33,280 --> 00:34:36,560
team so they deploy to production and

00:34:35,760 --> 00:34:39,119
someone else

00:34:36,560 --> 00:34:39,839
monitors that production analytics for

00:34:39,119 --> 00:34:41,599
errors

00:34:39,839 --> 00:34:43,280
and so you've got this collaboration in

00:34:41,599 --> 00:34:45,119
the second column between development

00:34:43,280 --> 00:34:47,520
teams and production

00:34:45,119 --> 00:34:48,240
and if we go to the third column in this

00:34:47,520 --> 00:34:50,399
a lot

00:34:48,240 --> 00:34:52,240
of organizations have decentralized

00:34:50,399 --> 00:34:54,240
development maybe they have

00:34:52,240 --> 00:34:55,760
a one team that does a data warehouse

00:34:54,240 --> 00:34:56,720
and then in one line of business they

00:34:55,760 --> 00:34:59,760
have a team that does

00:34:56,720 --> 00:35:01,440
analytics with tableau another team has

00:34:59,760 --> 00:35:03,599
click in a different part of the

00:35:01,440 --> 00:35:05,760
organization a third team has

00:35:03,599 --> 00:35:08,000
has cognos and so you have this

00:35:05,760 --> 00:35:09,920
decentralized development model

00:35:08,000 --> 00:35:11,839
and on top of that those teams

00:35:09,920 --> 00:35:13,200
themselves may push the production to a

00:35:11,839 --> 00:35:16,560
separate team

00:35:13,200 --> 00:35:19,520
and so you have this mesh or network of

00:35:16,560 --> 00:35:20,720
centralized production and and

00:35:19,520 --> 00:35:22,480
centralized development and

00:35:20,720 --> 00:35:24,480
decentralized production

00:35:22,480 --> 00:35:26,320
and decentralized development and so how

00:35:24,480 --> 00:35:28,400
do we collaborate between this and

00:35:26,320 --> 00:35:30,160
the column on the right is actually i

00:35:28,400 --> 00:35:30,960
think the state of most large companies

00:35:30,160 --> 00:35:34,079
today

00:35:30,960 --> 00:35:36,880
where um this sort of collaboration

00:35:34,079 --> 00:35:39,200
complexity starts to override everyone

00:35:36,880 --> 00:35:40,560
and makes it very very hard to for

00:35:39,200 --> 00:35:43,119
customers to understand

00:35:40,560 --> 00:35:44,960
well something's wrong who do i call

00:35:43,119 --> 00:35:48,160
well well do i call

00:35:44,960 --> 00:35:49,520
the production team who works in the

00:35:48,160 --> 00:35:51,040
line of business do i call the

00:35:49,520 --> 00:35:53,040
centralized production team

00:35:51,040 --> 00:35:55,520
and even just finding a data error it

00:35:53,040 --> 00:35:57,440
can take a full day to figure out

00:35:55,520 --> 00:35:59,680
which part of the pie it came from who

00:35:57,440 --> 00:36:01,440
owns it and then for them to diagnose it

00:35:59,680 --> 00:36:02,880
and that's just too short for the speed

00:36:01,440 --> 00:36:05,760
of business and it has too many

00:36:02,880 --> 00:36:08,079
people involved i think so let's think

00:36:05,760 --> 00:36:10,160
about the result

00:36:08,079 --> 00:36:11,280
i think this could worse as we will move

00:36:10,160 --> 00:36:12,960
to data

00:36:11,280 --> 00:36:14,400
driven products because it used to be

00:36:12,960 --> 00:36:16,160
the case that we were developing

00:36:14,400 --> 00:36:18,000
and and then through over the wall to

00:36:16,160 --> 00:36:18,400
operations that put it in production and

00:36:18,000 --> 00:36:20,640
then

00:36:18,400 --> 00:36:22,480
sort of develop devops sort of addressed

00:36:20,640 --> 00:36:23,920
that but now we have data scientists

00:36:22,480 --> 00:36:26,880
that sit in the corner with with

00:36:23,920 --> 00:36:28,400
a pile of static data they built a model

00:36:26,880 --> 00:36:29,119
in python and they threw it over the

00:36:28,400 --> 00:36:31,760
wall to the

00:36:29,119 --> 00:36:33,599
developers who rewrite it in java and

00:36:31,760 --> 00:36:36,079
and

00:36:33,599 --> 00:36:37,599
then they when they put it on on fresh

00:36:36,079 --> 00:36:39,200
data it behaves differently and then

00:36:37,599 --> 00:36:40,960
they throw it over the wall to the to

00:36:39,200 --> 00:36:42,640
the operations and so forth so we have

00:36:40,960 --> 00:36:45,200
an even worse situation

00:36:42,640 --> 00:36:47,200
uh yeah yeah it's almost like devon ops

00:36:45,200 --> 00:36:49,119
was a nice one-to-one problem

00:36:47,200 --> 00:36:50,800
but data ops is sort of a many-to-many

00:36:49,119 --> 00:36:52,400
problem where you have many developers

00:36:50,800 --> 00:36:54,160
and many production and they've all got

00:36:52,400 --> 00:36:56,560
to work together

00:36:54,160 --> 00:36:58,000
and even these teams who are normally

00:36:56,560 --> 00:37:00,160
building software like if you're

00:36:58,000 --> 00:37:01,680
building a website for your company

00:37:00,160 --> 00:37:03,920
well what if you're going to put a new

00:37:01,680 --> 00:37:06,000
attribute on a table in that

00:37:03,920 --> 00:37:08,000
for that website how does that attribute

00:37:06,000 --> 00:37:09,440
on that table actually show up in a data

00:37:08,000 --> 00:37:11,280
warehouse and then

00:37:09,440 --> 00:37:13,280
in a model and in a visualization of

00:37:11,280 --> 00:37:15,359
that and coordinating the deployment

00:37:13,280 --> 00:37:17,119
from when you've got a devops team

00:37:15,359 --> 00:37:19,760
building software and when you've got a

00:37:17,119 --> 00:37:20,640
data team following data ops that's also

00:37:19,760 --> 00:37:23,839
another

00:37:20,640 --> 00:37:25,920
point of collaboration here and and

00:37:23,839 --> 00:37:27,520
all these things i think are contentions

00:37:25,920 --> 00:37:29,119
i mean there's been plenty of times and

00:37:27,520 --> 00:37:30,800
i think everyone who's done data for a

00:37:29,119 --> 00:37:32,560
career has been surprised

00:37:30,800 --> 00:37:34,160
when their data feed changes all of a

00:37:32,560 --> 00:37:36,560
sudden and they didn't know

00:37:34,160 --> 00:37:38,240
um columns are added drops are added and

00:37:36,560 --> 00:37:39,119
so collaborating between your data

00:37:38,240 --> 00:37:41,520
providers

00:37:39,119 --> 00:37:42,960
is even another case and so this

00:37:41,520 --> 00:37:46,960
many-to-many problem

00:37:42,960 --> 00:37:48,880
this uh disjoint discombobulated value

00:37:46,960 --> 00:37:50,640
chain i think is inherent in data and

00:37:48,880 --> 00:37:53,040
analytics and in a way that's

00:37:50,640 --> 00:37:54,079
much more painful than than in software

00:37:53,040 --> 00:37:57,119
development

00:37:54,079 --> 00:37:58,079
um and and so i think at least my

00:37:57,119 --> 00:37:59,440
experience

00:37:58,079 --> 00:38:01,839
is that a lot of data teams are

00:37:59,440 --> 00:38:03,760
suffering because they're caught between

00:38:01,839 --> 00:38:05,119
data providers who don't care about them

00:38:03,760 --> 00:38:07,200
data customers who think

00:38:05,119 --> 00:38:08,400
they should get everything the next day

00:38:07,200 --> 00:38:10,960
and this

00:38:08,400 --> 00:38:12,480
collaboration problem between teams and

00:38:10,960 --> 00:38:13,839
so i run into a lot of teams who are

00:38:12,480 --> 00:38:16,079
kind of actually beaten down and

00:38:13,839 --> 00:38:18,320
distraught and feeling disempowered

00:38:16,079 --> 00:38:19,839
and they can't create and innovate and

00:38:18,320 --> 00:38:22,400
you know i felt that way

00:38:19,839 --> 00:38:23,280
when i ran a data team starting in 2005

00:38:22,400 --> 00:38:28,720
to about

00:38:23,280 --> 00:38:31,200
uh to in the 2005 to about 2010 i

00:38:28,720 --> 00:38:32,880
was why is this why does my life suck so

00:38:31,200 --> 00:38:34,640
much why do i hate to come into work and

00:38:32,880 --> 00:38:36,160
find there's a problem or i can't seem

00:38:34,640 --> 00:38:38,079
to go fast enough or

00:38:36,160 --> 00:38:40,160
if i go fast i break things and how do i

00:38:38,079 --> 00:38:42,960
let people try out new tools

00:38:40,160 --> 00:38:43,440
and so um having lived that life for a

00:38:42,960 --> 00:38:45,440
year

00:38:43,440 --> 00:38:47,280
for years and and suffering from it i

00:38:45,440 --> 00:38:49,839
think there's a better way and i think

00:38:47,280 --> 00:38:51,359
the ideas in lean the ideas and data ops

00:38:49,839 --> 00:38:54,560
are a way for people

00:38:51,359 --> 00:38:55,920
um to reclaim control and not be sort of

00:38:54,560 --> 00:38:59,200
beaten down by this

00:38:55,920 --> 00:39:01,119
and and because just buying another tool

00:38:59,200 --> 00:39:02,640
or applying a new algorithm

00:39:01,119 --> 00:39:04,400
isn't going to save you you need to

00:39:02,640 --> 00:39:05,440
really fundamentally rethink your

00:39:04,400 --> 00:39:07,680
process and that's

00:39:05,440 --> 00:39:09,200
similar to car makers in the u.s you

00:39:07,680 --> 00:39:10,240
know at a big time in the 80s they were

00:39:09,200 --> 00:39:12,240
all thinking about doing

00:39:10,240 --> 00:39:14,560
industrial robots would save them and it

00:39:12,240 --> 00:39:17,440
didn't it's all about the system

00:39:14,560 --> 00:39:18,480
and the process that you work in and so

00:39:17,440 --> 00:39:20,720
um

00:39:18,480 --> 00:39:23,040
you know i define data ops as kind of a

00:39:20,720 --> 00:39:25,119
set of technical practices and cultural

00:39:23,040 --> 00:39:27,200
norms and architecture patterns

00:39:25,119 --> 00:39:28,720
that really enable this rapid cycle of

00:39:27,200 --> 00:39:29,599
innovation to get feedback from your

00:39:28,720 --> 00:39:32,640
customer

00:39:29,599 --> 00:39:34,880
that allow you to produce analytics and

00:39:32,640 --> 00:39:36,720
data sets at a very very low error rate

00:39:34,880 --> 00:39:39,680
so you don't have a lot of problems

00:39:36,720 --> 00:39:41,119
and then allow you to collaborate across

00:39:39,680 --> 00:39:43,359
complex sets of people

00:39:41,119 --> 00:39:44,720
and technology and environments so if

00:39:43,359 --> 00:39:46,480
you think about these three things you

00:39:44,720 --> 00:39:48,240
could almost see they're all opposite

00:39:46,480 --> 00:39:49,520
i want to go fast i'm going to not break

00:39:48,240 --> 00:39:50,560
things and i want to get everybody in

00:39:49,520 --> 00:39:52,960
the organization who

00:39:50,560 --> 00:39:54,160
touches the data value chain involved

00:39:52,960 --> 00:39:54,800
most people would think that that's

00:39:54,160 --> 00:39:57,119
laughable

00:39:54,800 --> 00:39:59,280
right and so if you look at the lessons

00:39:57,119 --> 00:40:01,599
from accelerate that

00:39:59,280 --> 00:40:03,599
in in software they were able to bring

00:40:01,599 --> 00:40:05,200
cycle time and error rates high up

00:40:03,599 --> 00:40:07,040
and i think in data ops we're seeing

00:40:05,200 --> 00:40:09,119
that you can bring cycle times and error

00:40:07,040 --> 00:40:11,200
rates and collaboration high up

00:40:09,119 --> 00:40:12,800
and all those things can happen together

00:40:11,200 --> 00:40:14,720
it takes some work but it also takes a

00:40:12,800 --> 00:40:15,520
different perspective that comes in from

00:40:14,720 --> 00:40:18,160
lean

00:40:15,520 --> 00:40:20,319
and so um you know what we've seen for

00:40:18,160 --> 00:40:21,520
people who adopt these ideas and data

00:40:20,319 --> 00:40:24,400
ops and we wrote a

00:40:21,520 --> 00:40:25,920
manifesto and a book on it um is that

00:40:24,400 --> 00:40:28,160
the time that they spent doing this

00:40:25,920 --> 00:40:28,800
crappy errors and operational tasks go

00:40:28,160 --> 00:40:30,960
down

00:40:28,800 --> 00:40:32,160
so they end up having both time to do

00:40:30,960 --> 00:40:34,400
cool new things

00:40:32,160 --> 00:40:36,000
but also because you're a believer in

00:40:34,400 --> 00:40:38,240
iterative development you have a time to

00:40:36,000 --> 00:40:40,160
go fast and you need to do

00:40:38,240 --> 00:40:42,160
um process improvement and technical

00:40:40,160 --> 00:40:44,079
debt as lars talked about being able to

00:40:42,160 --> 00:40:44,880
change things and refactor and improve

00:40:44,079 --> 00:40:46,160
because

00:40:44,880 --> 00:40:47,920
you know you're you're dealing with a

00:40:46,160 --> 00:40:49,760
complex distributed system and lots of

00:40:47,920 --> 00:40:52,079
code and lots of people

00:40:49,760 --> 00:40:53,040
and you know if you apply these ideas

00:40:52,079 --> 00:40:55,200
then you can start

00:40:53,040 --> 00:40:56,240
getting your deployment latency tap down

00:40:55,200 --> 00:40:58,000
you can start

00:40:56,240 --> 00:40:59,599
minimizing the time that it takes from

00:40:58,000 --> 00:41:01,680
the ideas in your head

00:40:59,599 --> 00:41:03,280
as a data scientist or a data engineer

00:41:01,680 --> 00:41:04,960
until you get it in a product that your

00:41:03,280 --> 00:41:06,480
customer can react to

00:41:04,960 --> 00:41:08,000
and you can do it in a way that's low

00:41:06,480 --> 00:41:09,359
errors and your team

00:41:08,000 --> 00:41:11,119
can be happier and i think more

00:41:09,359 --> 00:41:13,920
efficient and so i think all these

00:41:11,119 --> 00:41:17,440
benefits are there from data ops

00:41:13,920 --> 00:41:19,040
and so um let's talk about one last

00:41:17,440 --> 00:41:20,079
thing before i finish up and there's

00:41:19,040 --> 00:41:22,800
been a lot of talk about

00:41:20,079 --> 00:41:24,240
devops and data ops and all these ops

00:41:22,800 --> 00:41:24,960
words out there and like what do they

00:41:24,240 --> 00:41:27,839
mean

00:41:24,960 --> 00:41:28,560
there's ai ops and ml apps and model ops

00:41:27,839 --> 00:41:31,040
and

00:41:28,560 --> 00:41:32,640
data secops and so i just wanted to like

00:41:31,040 --> 00:41:34,800
clear it up so i think

00:41:32,640 --> 00:41:37,200
basically there's a bus basically i

00:41:34,800 --> 00:41:39,040
think whether you run a manufacturing

00:41:37,200 --> 00:41:40,720
line or build software

00:41:39,040 --> 00:41:42,880
or do data and analytics there's a

00:41:40,720 --> 00:41:43,839
common set of business management

00:41:42,880 --> 00:41:46,000
concepts

00:41:43,839 --> 00:41:47,520
that come from lean or learning

00:41:46,000 --> 00:41:50,079
organizations

00:41:47,520 --> 00:41:51,040
or deming and it's really focused on

00:41:50,079 --> 00:41:54,160
error rates

00:41:51,040 --> 00:41:55,200
and cycle time and flow and

00:41:54,160 --> 00:41:56,880
collaboration

00:41:55,200 --> 00:41:59,119
and measurement they're all kind of the

00:41:56,880 --> 00:42:00,720
same concepts at a high level

00:41:59,119 --> 00:42:02,319
because you know there's a shared

00:42:00,720 --> 00:42:03,839
technical thing that this team is

00:42:02,319 --> 00:42:06,960
helping run or build

00:42:03,839 --> 00:42:08,960
assembly line software analytics and so

00:42:06,960 --> 00:42:10,640
if you look at it how that team is

00:42:08,960 --> 00:42:11,040
organized how the people talk to each

00:42:10,640 --> 00:42:13,040
other

00:42:11,040 --> 00:42:14,960
there's different methods and there's

00:42:13,040 --> 00:42:18,240
team management methods like

00:42:14,960 --> 00:42:19,200
agile and kanban and scrum um there's

00:42:18,240 --> 00:42:21,920
lots of

00:42:19,200 --> 00:42:23,760
different ways and then in manufacturing

00:42:21,920 --> 00:42:25,359
there's six sigma and total quality

00:42:23,760 --> 00:42:26,079
management there's books out there you

00:42:25,359 --> 00:42:28,240
can go

00:42:26,079 --> 00:42:29,280
to any library and find 50 books on each

00:42:28,240 --> 00:42:30,480
one of these things on how you should

00:42:29,280 --> 00:42:33,280
manage teams and

00:42:30,480 --> 00:42:33,920
the people but and that's fine but i

00:42:33,280 --> 00:42:35,680
also think

00:42:33,920 --> 00:42:37,200
in a lot of what we're talking about is

00:42:35,680 --> 00:42:39,359
more um

00:42:37,200 --> 00:42:40,640
what people do you align this to and

00:42:39,359 --> 00:42:42,319
we've been speaking today

00:42:40,640 --> 00:42:44,160
particularly in the middle column the

00:42:42,319 --> 00:42:45,599
data science engineering and analytic

00:42:44,160 --> 00:42:48,319
teams and not so much about

00:42:45,599 --> 00:42:49,920
industrial teams or software teams and

00:42:48,319 --> 00:42:51,760
if you look at it from a

00:42:49,920 --> 00:42:53,839
technical environment how do you

00:42:51,760 --> 00:42:55,760
actually do this for it teams there's a

00:42:53,839 --> 00:42:57,280
well-developed thing about devops or

00:42:55,760 --> 00:43:00,800
devsecops

00:42:57,280 --> 00:43:03,359
get ops or ai ops and all these terms

00:43:00,800 --> 00:43:05,599
really apply to it and software teams

00:43:03,359 --> 00:43:08,560
and how to have them go fast

00:43:05,599 --> 00:43:10,560
how to be a learning organization and i

00:43:08,560 --> 00:43:12,720
think the ideas of data ops and some

00:43:10,560 --> 00:43:14,240
people call it model ops or ml apps are

00:43:12,720 --> 00:43:17,119
the same except they're just the same

00:43:14,240 --> 00:43:19,119
ideas applied to data science

00:43:17,119 --> 00:43:22,480
engineering and analytic teams

00:43:19,119 --> 00:43:24,480
and so um and i think this technical

00:43:22,480 --> 00:43:25,520
environment is essential you can't just

00:43:24,480 --> 00:43:27,520
do

00:43:25,520 --> 00:43:29,920
quick iterative development without

00:43:27,520 --> 00:43:30,560
building the factory that enables you to

00:43:29,920 --> 00:43:33,680
do it

00:43:30,560 --> 00:43:35,520
and so you can't focus on customers and

00:43:33,680 --> 00:43:37,760
focus on products important but we're

00:43:35,520 --> 00:43:39,280
talking about the system the process the

00:43:37,760 --> 00:43:42,000
factory that makes it work

00:43:39,280 --> 00:43:43,599
and so to conclude my talk it's when i

00:43:42,000 --> 00:43:46,400
have two thoughts

00:43:43,599 --> 00:43:49,359
one is that they're all related around

00:43:46,400 --> 00:43:51,760
this idea that what you do

00:43:49,359 --> 00:43:53,440
is much less important than how you do

00:43:51,760 --> 00:43:56,720
it so what you do

00:43:53,440 --> 00:43:58,000
the model the um schema the

00:43:56,720 --> 00:43:59,839
visualization

00:43:58,000 --> 00:44:01,920
is much less important than the system

00:43:59,839 --> 00:44:03,839
that you work in and so here's a quote

00:44:01,920 --> 00:44:05,520
from elon musk he said

00:44:03,839 --> 00:44:07,119
we realized the true problem the true

00:44:05,520 --> 00:44:08,079
difficulty and where the greatest

00:44:07,119 --> 00:44:09,920
potential is

00:44:08,079 --> 00:44:12,720
is in building the machine that makes

00:44:09,920 --> 00:44:16,160
the machine the factory

00:44:12,720 --> 00:44:19,119
and so another case and dr deming and

00:44:16,160 --> 00:44:20,880
many of you have problems and errors and

00:44:19,119 --> 00:44:23,760
94 percent of the causes

00:44:20,880 --> 00:44:25,760
were in the system not in the person and

00:44:23,760 --> 00:44:28,000
so instead of blaming your team members

00:44:25,760 --> 00:44:28,960
for the problem build a system build a

00:44:28,000 --> 00:44:31,680
factory

00:44:28,960 --> 00:44:33,280
around it and in fact i think the most

00:44:31,680 --> 00:44:35,280
talented people in the organization

00:44:33,280 --> 00:44:37,920
should be working on this factory

00:44:35,280 --> 00:44:38,640
so uh because i think the factory of

00:44:37,920 --> 00:44:40,319
insight

00:44:38,640 --> 00:44:42,400
the lean principles can actually

00:44:40,319 --> 00:44:43,760
accelerate the way you do work make it

00:44:42,400 --> 00:44:45,839
much more enjoyable

00:44:43,760 --> 00:44:47,599
and give more value to your customers

00:44:45,839 --> 00:44:48,800
and so that's the purpose of our talk is

00:44:47,599 --> 00:44:50,400
there's something beyond what you're

00:44:48,800 --> 00:44:51,680
currently doing in data science and

00:44:50,400 --> 00:44:52,560
engineering that's actually really

00:44:51,680 --> 00:44:54,000
important

00:44:52,560 --> 00:44:56,000
and think about the system and the

00:44:54,000 --> 00:44:58,960
process around it and you'll be uh

00:44:56,000 --> 00:45:01,359
you'll be successful

00:44:58,960 --> 00:45:02,319
so that's it in terms of my our

00:45:01,359 --> 00:45:04,720
presentation

00:45:02,319 --> 00:45:08,160
i think we uh targeted liars is that

00:45:04,720 --> 00:45:08,160
right that we targeted 45 minutes

00:45:10,560 --> 00:45:18,000
yeah that seems to be all right um

00:45:14,400 --> 00:45:20,240
i i'm back on i would like to thank you

00:45:18,000 --> 00:45:21,280
lars and christopher for the great

00:45:20,240 --> 00:45:25,280
presentation and

00:45:21,280 --> 00:45:27,920
also for this uh kind of format to

00:45:25,280 --> 00:45:29,440
combine a talk and giving it more like a

00:45:27,920 --> 00:45:29,760
conversational style i liked it very

00:45:29,440 --> 00:45:33,040
much

00:45:29,760 --> 00:45:35,280
thank you for that and i think we have

00:45:33,040 --> 00:45:36,160
just time for just one more question

00:45:35,280 --> 00:45:39,040
before we have to

00:45:36,160 --> 00:45:39,680
uh leave into the breakout room that we

00:45:39,040 --> 00:45:42,640
can ask

00:45:39,680 --> 00:45:44,720
a few more questions so i will check the

00:45:42,640 --> 00:45:47,920
slack once more and there's the first

00:45:44,720 --> 00:45:51,200
question from christoph

00:45:47,920 --> 00:45:52,800
who's asking considering lean and agile

00:45:51,200 --> 00:45:53,839
principles shouldn't we strive for

00:45:52,800 --> 00:45:57,520
cross-functional

00:45:53,839 --> 00:45:58,480
autonomous teams with deaths and data

00:45:57,520 --> 00:46:00,400
people

00:45:58,480 --> 00:46:03,200
focusing on solving customer needs

00:46:00,400 --> 00:46:03,200
incrementally

00:46:03,839 --> 00:46:09,920
the uh read the question here

00:46:07,119 --> 00:46:10,720
yeah absolutely uh perhaps it wasn't

00:46:09,920 --> 00:46:15,040
clear but

00:46:10,720 --> 00:46:17,920
that's one of the solutions to uh

00:46:15,040 --> 00:46:18,640
to make sure that the work that you do

00:46:17,920 --> 00:46:21,760
results

00:46:18,640 --> 00:46:24,560
in product value i've i've been in

00:46:21,760 --> 00:46:26,079
in organizations where we would uh you

00:46:24,560 --> 00:46:28,079
know there was a data collection team

00:46:26,079 --> 00:46:30,319
who handed the data over to a

00:46:28,079 --> 00:46:32,400
cleaning team who handed the data over

00:46:30,319 --> 00:46:33,520
to a user modeling team who handed the

00:46:32,400 --> 00:46:34,960
data over to the like the

00:46:33,520 --> 00:46:37,200
recommendations team

00:46:34,960 --> 00:46:38,400
and there was tons of waste because they

00:46:37,200 --> 00:46:40,640
were we were doing

00:46:38,400 --> 00:46:42,319
the wrong thing so so in successful

00:46:40,640 --> 00:46:45,520
organizations i've seen

00:46:42,319 --> 00:46:46,160
teams that are are cross functional as

00:46:45,520 --> 00:46:48,160
you say have

00:46:46,160 --> 00:46:49,280
all the skills necessary to do the

00:46:48,160 --> 00:46:51,440
cleaning and do do

00:46:49,280 --> 00:46:53,599
all of the things that take you from raw

00:46:51,440 --> 00:46:56,640
data essentially to

00:46:53,599 --> 00:46:57,359
to end user value and that that might

00:46:56,640 --> 00:47:00,400
very well

00:46:57,359 --> 00:47:03,040
include things like ux and so forth so

00:47:00,400 --> 00:47:04,319
so as close as possible to to align with

00:47:03,040 --> 00:47:06,720
the use case

00:47:04,319 --> 00:47:09,200
uh but if you have if if you just let

00:47:06,720 --> 00:47:11,440
the the autonomy lose

00:47:09,200 --> 00:47:12,640
then you will get too much cognitive

00:47:11,440 --> 00:47:15,280
waste in the end so you have to

00:47:12,640 --> 00:47:18,800
counterbalance it with something right

00:47:15,280 --> 00:47:20,559
so so there's a there's a balance here

00:47:18,800 --> 00:47:22,800
yeah and i also think the um you know

00:47:20,559 --> 00:47:24,880
autonomous teams are great but it's also

00:47:22,800 --> 00:47:27,280
it's also about really getting the teams

00:47:24,880 --> 00:47:29,760
to emotionally understand and own

00:47:27,280 --> 00:47:30,960
the result because sometimes it's easier

00:47:29,760 --> 00:47:32,480
to have a little bit of cognitive

00:47:30,960 --> 00:47:34,480
distance and say oh i'm

00:47:32,480 --> 00:47:36,160
you know i'm just doing even with agile

00:47:34,480 --> 00:47:36,559
i can say well i'm doing agile and i'm

00:47:36,160 --> 00:47:38,559
on a

00:47:36,559 --> 00:47:40,079
cross-functional team i don't really

00:47:38,559 --> 00:47:40,400
care if my customers getting value from

00:47:40,079 --> 00:47:42,000
this

00:47:40,400 --> 00:47:44,000
i don't really care if they're using it

00:47:42,000 --> 00:47:46,160
so i think the care in which you

00:47:44,000 --> 00:47:48,079
feel that it's important that your

00:47:46,160 --> 00:47:50,400
customer gets value from it

00:47:48,079 --> 00:47:51,599
um and actually uses it i think is

00:47:50,400 --> 00:47:54,000
really important and honestly

00:47:51,599 --> 00:47:55,680
that's hard sometimes it's hard to hear

00:47:54,000 --> 00:47:56,400
negative feedback that i didn't find you

00:47:55,680 --> 00:47:57,920
know you spent

00:47:56,400 --> 00:47:59,359
a week or a month on something and your

00:47:57,920 --> 00:48:00,240
customer looks at it goes ah that's not

00:47:59,359 --> 00:48:02,800
what i wanted

00:48:00,240 --> 00:48:03,280
and it's hard but it's actually part of

00:48:02,800 --> 00:48:05,839
you know

00:48:03,280 --> 00:48:06,960
the sort of loving failure and having a

00:48:05,839 --> 00:48:09,520
safety culture

00:48:06,960 --> 00:48:12,480
where you can fail and fail forward and

00:48:09,520 --> 00:48:13,920
learn from failure i think is a is also

00:48:12,480 --> 00:48:16,079
also an important part of how you run

00:48:13,920 --> 00:48:19,200
the team

00:48:16,079 --> 00:48:21,920
okay thank you so time is up

00:48:19,200 --> 00:48:25,200
i think we need to switch to the

00:48:21,920 --> 00:48:27,839
breakout room which is advertised in the

00:48:25,200 --> 00:48:28,559
screen below so it's berlin bus was the

00:48:27,839 --> 00:48:33,359
dot d e

00:48:28,559 --> 00:48:36,079
slash v bus two and we can continue the

00:48:33,359 --> 00:48:37,680
conversation on the great talk by alas

00:48:36,079 --> 00:48:41,200
and christopher

00:48:37,680 --> 00:48:42,640
and i would like to thank you once more

00:48:41,200 --> 00:48:45,440
for your presentation

00:48:42,640 --> 00:48:49,839
and just will announce that in just

00:48:45,440 --> 00:48:49,839
about 20 minutes the sessions will be

00:49:00,839 --> 00:49:03,839
continuing

00:49:12,000 --> 00:49:14,079

YouTube URL: https://www.youtube.com/watch?v=fYJspPFo2jU


