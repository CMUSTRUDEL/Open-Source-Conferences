Title: Meet MariaDB 10.3
Publication date: 2017-12-05
Playlist: DebConf 17
Description: 
	by VicenÈ›iu-Marian Ciorbaru

At: DebConf17
https://debconf17.debconf.org/
Room: Rex
Scheduled start: 2017-08-06 17:00:00
Captions: 
	00:00:05,210 --> 00:00:11,850
alright let's get started so thank you

00:00:09,600 --> 00:00:14,790
everybody for coming

00:00:11,850 --> 00:00:18,480
I am Li Chen - I am a software engineer

00:00:14,790 --> 00:00:21,480
for the MariaDB foundation and today I'm

00:00:18,480 --> 00:00:25,800
going to talk to you about more ADB what

00:00:21,480 --> 00:00:28,829
it is we hope to accomplish and give you

00:00:25,800 --> 00:00:33,960
us a preview of what is up to come in

00:00:28,829 --> 00:00:35,850
our next release so briefly about Mary

00:00:33,960 --> 00:00:40,500
ADB how many of you have heard of more

00:00:35,850 --> 00:00:42,600
ADP before okay how many of you have

00:00:40,500 --> 00:00:43,250
heard of MySQL I guess pretty much

00:00:42,600 --> 00:00:48,630
everybody

00:00:43,250 --> 00:00:52,530
okay so Murray DB is a fork of MySQL the

00:00:48,630 --> 00:00:55,590
naming goes after Monty's daughter Maria

00:00:52,530 --> 00:01:01,710
this was the same for a MySQL his first

00:00:55,590 --> 00:01:05,189
daughter was called my so MySQL we had

00:01:01,710 --> 00:01:10,200
our first release in October 2009 and

00:01:05,189 --> 00:01:12,840
the reason former ADP's birth was to as

00:01:10,200 --> 00:01:15,869
a response to Oracle's acquisition of

00:01:12,840 --> 00:01:23,759
MySQL at that time it wasn't clear what

00:01:15,869 --> 00:01:25,979
the direction for MySQL will be so we

00:01:23,759 --> 00:01:30,990
try to maintain the spirit of MySQL

00:01:25,979 --> 00:01:34,259
which was to keep development through

00:01:30,990 --> 00:01:36,719
the community so all our work has done

00:01:34,259 --> 00:01:39,869
as a response to what the community

00:01:36,719 --> 00:01:44,670
needs and what the community asks of us

00:01:39,869 --> 00:01:47,659
and due to this approach we've now

00:01:44,670 --> 00:01:52,319
actually been accepted as the default

00:01:47,659 --> 00:01:54,749
MySQL variant in debian 9 there may be

00:01:52,319 --> 00:01:58,380
questions about compatibility between

00:01:54,749 --> 00:02:01,529
previous MySQL version and Murray DB if

00:01:58,380 --> 00:02:05,939
you have any concerns we can discuss

00:02:01,529 --> 00:02:09,990
them now or after the presentation I'll

00:02:05,939 --> 00:02:11,910
do my best to answer them another thing

00:02:09,990 --> 00:02:14,400
to note is that we do hold developer

00:02:11,910 --> 00:02:16,440
conferences and if you want to give you

00:02:14,400 --> 00:02:17,290
your input on what you think Murray DB

00:02:16,440 --> 00:02:20,049
should do

00:02:17,290 --> 00:02:23,349
forward they are free to attend

00:02:20,049 --> 00:02:26,200
everybody is invited the next one is in

00:02:23,349 --> 00:02:31,859
China it is announced on marietv org so

00:02:26,200 --> 00:02:31,859
you can look to see if you can attend

00:02:33,329 --> 00:02:38,560
okay so let's just go through a brief

00:02:35,859 --> 00:02:42,519
history of all our versions each version

00:02:38,560 --> 00:02:46,030
tends to have one flagship feature or a

00:02:42,519 --> 00:02:49,720
theme if you like Marie to be 5-1 was

00:02:46,030 --> 00:02:53,829
the first version to guarantee that

00:02:49,720 --> 00:02:56,049
Marie DB is a free database and then

00:02:53,829 --> 00:03:00,639
we've added progressively more complex

00:02:56,049 --> 00:03:03,549
features our most recent stable version

00:03:00,639 --> 00:03:05,620
is 10 - which brings advanced screening

00:03:03,549 --> 00:03:10,480
features which other databases did have

00:03:05,620 --> 00:03:13,150
but MySQL and it's ecosystem did not we

00:03:10,480 --> 00:03:16,030
can examples are window functions and

00:03:13,150 --> 00:03:18,760
common table expressions if anyone is

00:03:16,030 --> 00:03:21,549
interested about this I also have a talk

00:03:18,760 --> 00:03:22,959
prepared for this we can give me

00:03:21,549 --> 00:03:24,340
feedback if you'd be interested I am

00:03:22,959 --> 00:03:29,349
more than happy to talk about them as

00:03:24,340 --> 00:03:31,930
well and Marie db10 frame is now focused

00:03:29,349 --> 00:03:34,150
on compatibility so we're trying to make

00:03:31,930 --> 00:03:37,209
it as easy as possible for people to

00:03:34,150 --> 00:03:42,400
migrate from other database systems to

00:03:37,209 --> 00:03:46,720
more ADB and in particular we're talking

00:03:42,400 --> 00:03:49,199
about Oracle database so not MySQL but

00:03:46,720 --> 00:03:57,750
the Oracle database which supports

00:03:49,199 --> 00:04:01,269
pl/sql programming language so in

00:03:57,750 --> 00:04:03,819
generally we can say that migrating from

00:04:01,269 --> 00:04:07,269
MySQL to Maria DB is a relatively

00:04:03,819 --> 00:04:10,299
painless process - a few exceptions here

00:04:07,269 --> 00:04:12,370
and there we've tried to play as nice as

00:04:10,299 --> 00:04:14,709
possible with whatever MySQL tries to

00:04:12,370 --> 00:04:16,720
throw at us and we are generally

00:04:14,709 --> 00:04:21,970
compatible with almost all of their

00:04:16,720 --> 00:04:24,340
features and we wanted to also tackle

00:04:21,970 --> 00:04:28,060
the prepared that they the proprietary

00:04:24,340 --> 00:04:29,960
database market how can you convince

00:04:28,060 --> 00:04:32,270
people who are using

00:04:29,960 --> 00:04:35,240
proprietary databases to switch over to

00:04:32,270 --> 00:04:37,040
an open-source one well it's not easy to

00:04:35,240 --> 00:04:40,970
just tell them rewrite everything make

00:04:37,040 --> 00:04:43,520
it work instead why don't we try to

00:04:40,970 --> 00:04:46,250
provide as good of a compatibility as

00:04:43,520 --> 00:04:50,240
possible using the minimum amount of

00:04:46,250 --> 00:04:53,120
effort so we believe that 20% of our of

00:04:50,240 --> 00:04:57,560
work is needed to get about 80% of

00:04:53,120 --> 00:05:02,780
use-cases working and this is how we've

00:04:57,560 --> 00:05:05,150
guided our decision to support pl/sql so

00:05:02,780 --> 00:05:07,760
I'm just going to go through most of the

00:05:05,150 --> 00:05:10,340
features which are already in the alpha

00:05:07,760 --> 00:05:12,260
release of ten free if you have any

00:05:10,340 --> 00:05:16,430
questions feel free to interrupt me at a

00:05:12,260 --> 00:05:19,040
new point so one of the one of the

00:05:16,430 --> 00:05:22,940
interesting features is sequences so you

00:05:19,040 --> 00:05:25,190
can create a sequence which act is kind

00:05:22,940 --> 00:05:29,120
like a table and whenever you query a

00:05:25,190 --> 00:05:31,910
column in it it will give you a number

00:05:29,120 --> 00:05:33,410
which always increases there's multiple

00:05:31,910 --> 00:05:37,090
parameters you can make it loop around

00:05:33,410 --> 00:05:39,260
make it skip elements in the sequence

00:05:37,090 --> 00:05:43,130
this was something that a lot of people

00:05:39,260 --> 00:05:48,530
requested and it was implemented it was

00:05:43,130 --> 00:05:52,420
actually not that complex to do we also

00:05:48,530 --> 00:05:56,320
added support for intersect and accept

00:05:52,420 --> 00:05:59,390
so you probably heard of Union which

00:05:56,320 --> 00:06:02,650
merges rows from two selects well

00:05:59,390 --> 00:06:04,730
intersect and accept are the

00:06:02,650 --> 00:06:07,400
counterparts when it comes to set

00:06:04,730 --> 00:06:10,430
arithmetic so intersect will give you

00:06:07,400 --> 00:06:14,030
rows that are in both selects but not

00:06:10,430 --> 00:06:15,680
rows that are in just one of them whilst

00:06:14,030 --> 00:06:18,680
accept will give you all the rows from

00:06:15,680 --> 00:06:25,190
the first select that are not in the

00:06:18,680 --> 00:06:30,140
second select any question so far I'm

00:06:25,190 --> 00:06:32,810
not really sure how how first you are in

00:06:30,140 --> 00:06:37,700
sequel the second language so if there's

00:06:32,810 --> 00:06:39,530
something unclear please interrupt me we

00:06:37,700 --> 00:06:43,070
also added support for the row data type

00:06:39,530 --> 00:06:43,930
which acts like a structure from C or

00:06:43,070 --> 00:06:48,400
C++

00:06:43,930 --> 00:06:52,039
you can declare it and it has members

00:06:48,400 --> 00:06:56,150
here we have a row with one integer

00:06:52,039 --> 00:06:57,469
column and one text column and then we

00:06:56,150 --> 00:07:04,870
can access the members with the dot

00:06:57,469 --> 00:07:09,610
notation you can also get the type of

00:07:04,870 --> 00:07:13,159
you can create a data type based on

00:07:09,610 --> 00:07:16,669
already existing tables so here for

00:07:13,159 --> 00:07:20,000
example on the second on the second

00:07:16,669 --> 00:07:22,669
example here you can get the data type

00:07:20,000 --> 00:07:24,500
from the table row itself or if you have

00:07:22,669 --> 00:07:27,469
a cursor you can get the data type from

00:07:24,500 --> 00:07:30,349
the cursor so it's very easy now to work

00:07:27,469 --> 00:07:37,520
with rows as opposed to just column

00:07:30,349 --> 00:07:41,029
values you can also now declare cursors

00:07:37,520 --> 00:07:44,229
with parameters so before this you could

00:07:41,029 --> 00:07:47,810
select you could create a cursor and

00:07:44,229 --> 00:07:51,259
then open it but the way the cursor

00:07:47,810 --> 00:07:54,110
would go for the table would be fixed on

00:07:51,259 --> 00:07:56,180
how you've initially created but now you

00:07:54,110 --> 00:07:59,810
can actually have some sort of factory

00:07:56,180 --> 00:08:01,939
of cursors which have parameters so here

00:07:59,810 --> 00:08:04,370
this cursor will go for this table but

00:08:01,939 --> 00:08:07,939
it will only return the values between

00:08:04,370 --> 00:08:10,819
minimum and maximum and these can be

00:08:07,939 --> 00:08:15,289
created using expressions as well so

00:08:10,819 --> 00:08:17,740
this gives you a lot more flexibility

00:08:15,289 --> 00:08:20,740
when it comes to editing your

00:08:17,740 --> 00:08:20,740
application

00:08:22,960 --> 00:08:32,110
if you have a lot of data in in a table

00:08:27,400 --> 00:08:35,620
it may make sense to split it up an

00:08:32,110 --> 00:08:38,620
example from I think booking is one of

00:08:35,620 --> 00:08:41,139
them the largest corporations who make

00:08:38,620 --> 00:08:43,389
use of mariadb and they have a lot of

00:08:41,139 --> 00:08:44,860
bookings from all over the world it

00:08:43,389 --> 00:08:47,980
makes it makes sense for them to split

00:08:44,860 --> 00:08:51,910
the data by country by continent and

00:08:47,980 --> 00:08:54,519
this is what partition does it splits

00:08:51,910 --> 00:09:01,240
your table into multiple tables each

00:08:54,519 --> 00:09:06,329
with certain certain rows which match a

00:09:01,240 --> 00:09:10,449
condition we did not have this default

00:09:06,329 --> 00:09:13,389
case before so you had to enumerate all

00:09:10,449 --> 00:09:15,190
the possible combinations now you just

00:09:13,389 --> 00:09:16,600
add the default here and it will catch

00:09:15,190 --> 00:09:20,290
everything else which was not caught in

00:09:16,600 --> 00:09:23,110
the previous rules here we have odd and

00:09:20,290 --> 00:09:31,120
even and if in case you allow values

00:09:23,110 --> 00:09:36,459
this goes into the third partition now

00:09:31,120 --> 00:09:39,639
whenever you do a transaction you need

00:09:36,459 --> 00:09:41,649
to lock either rows from a table or the

00:09:39,639 --> 00:09:45,010
metadata from a table if you want to

00:09:41,649 --> 00:09:47,440
alter that table if there are multiple

00:09:45,010 --> 00:09:51,750
transactions they have to wait until the

00:09:47,440 --> 00:09:54,040
previous one finishes with its work and

00:09:51,750 --> 00:09:57,490
you may not want to have it wait forever

00:09:54,040 --> 00:10:01,000
so you can set a time out previously you

00:09:57,490 --> 00:10:04,329
could set this time out with a session

00:10:01,000 --> 00:10:06,430
or global variable in the server but you

00:10:04,329 --> 00:10:08,980
would have to always set it and unset it

00:10:06,430 --> 00:10:12,130
if you wanted to change this for certain

00:10:08,980 --> 00:10:14,410
queries well now this is integrated into

00:10:12,130 --> 00:10:16,660
queries which require locking so you can

00:10:14,410 --> 00:10:18,690
just specify this here and it will only

00:10:16,660 --> 00:10:25,500
affect that query

00:10:18,690 --> 00:10:25,500
it's basically variable value per query

00:10:27,170 --> 00:10:30,540
now this one's interesting

00:10:29,100 --> 00:10:37,350
this was actually contributed by a

00:10:30,540 --> 00:10:39,120
student I work with last summer so there

00:10:37,350 --> 00:10:41,370
may be functions that are in other

00:10:39,120 --> 00:10:45,149
databases that are not available in

00:10:41,370 --> 00:10:48,019
mariadb implicitly and you can use

00:10:45,149 --> 00:10:50,819
user-defined functions to simulate

00:10:48,019 --> 00:10:55,860
regular functions however the problem is

00:10:50,819 --> 00:10:59,370
with aggregate ones it's hard to have

00:10:55,860 --> 00:11:03,000
them behave well when you have groupings

00:10:59,370 --> 00:11:05,190
and other modifiers added to them you

00:11:03,000 --> 00:11:09,019
can now actually specify custom

00:11:05,190 --> 00:11:12,060
aggregates using regular sequel syntax

00:11:09,019 --> 00:11:14,569
so the way you do this is you define the

00:11:12,060 --> 00:11:18,480
function with the aggregate keyword here

00:11:14,569 --> 00:11:20,970
and you need to think about it in in a

00:11:18,480 --> 00:11:22,800
couple of steps so first what should the

00:11:20,970 --> 00:11:26,160
function return once it finishes going

00:11:22,800 --> 00:11:28,829
through all the rows this is covered

00:11:26,160 --> 00:11:30,680
here so whenever we're finished with

00:11:28,829 --> 00:11:35,970
that group we're going to return

00:11:30,680 --> 00:11:39,480
whatever is here now the logic in the

00:11:35,970 --> 00:11:41,720
function has to be in a loop because you

00:11:39,480 --> 00:11:46,079
need to go through multiple rows and

00:11:41,720 --> 00:11:49,350
whenever you want the next row in the in

00:11:46,079 --> 00:11:53,579
that group you have to call fetch group

00:11:49,350 --> 00:11:57,180
next row so when after this call here

00:11:53,579 --> 00:12:00,440
the parameters which are here are going

00:11:57,180 --> 00:12:02,730
to be set to the next value in the group

00:12:00,440 --> 00:12:05,010
so this allows you to define quite

00:12:02,730 --> 00:12:07,740
interesting functions one which is very

00:12:05,010 --> 00:12:10,290
useful and is frequently requested is

00:12:07,740 --> 00:12:13,199
actually median we have plans on

00:12:10,290 --> 00:12:15,870
supporting that natively but right now

00:12:13,199 --> 00:12:18,689
this is an alternative on how you can

00:12:15,870 --> 00:12:20,819
get it to work it is not currently

00:12:18,689 --> 00:12:22,470
available in the first alpha release but

00:12:20,819 --> 00:12:26,630
it's coming up in the next one which is

00:12:22,470 --> 00:12:26,630
probably in a couple of weeks at most

00:12:28,010 --> 00:12:34,770
and now let's talk about Oracle

00:12:31,230 --> 00:12:37,080
compatibility so this is the main focus

00:12:34,770 --> 00:12:40,770
of on this release we're trying to make

00:12:37,080 --> 00:12:43,110
more EDB work with oracle style syntax

00:12:40,770 --> 00:12:46,650
in order to enable the syntax you have

00:12:43,110 --> 00:12:48,990
to set SQL mode equals oracle and then

00:12:46,650 --> 00:12:52,920
all sorts of syntax constructs from

00:12:48,990 --> 00:12:54,900
pl/sql are available in MariaDB the

00:12:52,920 --> 00:12:57,390
reason why you need this mode here is

00:12:54,900 --> 00:13:00,390
that a few syntax constructs are

00:12:57,390 --> 00:13:02,040
incompatible with more ADB syntax so you

00:13:00,390 --> 00:13:05,660
cannot support both at the same time

00:13:02,040 --> 00:13:05,660
it's either one or the other

00:13:06,020 --> 00:13:13,370
for example labels in MariaDB they

00:13:09,860 --> 00:13:16,080
resemble C style labels while Oracle has

00:13:13,370 --> 00:13:21,330
greater and lesser signs between the

00:13:16,080 --> 00:13:25,830
label also Oracle needs a different

00:13:21,330 --> 00:13:29,520
order for out and in and out parameter

00:13:25,830 --> 00:13:35,880
types this is supported in Oracle syntax

00:13:29,520 --> 00:13:38,730
this is it Maria Oracle also requires a

00:13:35,880 --> 00:13:40,620
mandatory as keyword when you are

00:13:38,730 --> 00:13:43,800
creating a function Marie Jimmy does not

00:13:40,620 --> 00:13:48,630
if you do not specify the as keyword or

00:13:43,800 --> 00:13:55,460
is it will return an error if the oracle

00:13:48,630 --> 00:13:57,810
mode is activated there is a

00:13:55,460 --> 00:14:02,810
correspondence for the exit statement

00:13:57,810 --> 00:14:06,660
which oracle allows so if you want to

00:14:02,810 --> 00:14:09,780
exit a certain block you can use leave

00:14:06,660 --> 00:14:16,410
in Mary DB syntax or exit in the oracle

00:14:09,780 --> 00:14:18,810
syntax you can also set variables using

00:14:16,410 --> 00:14:23,990
Mary DB syntax with with equals or

00:14:18,810 --> 00:14:26,340
Oracle with dot equal this works with

00:14:23,990 --> 00:14:29,430
system variables too so if you have

00:14:26,340 --> 00:14:32,870
something which is not only using store

00:14:29,430 --> 00:14:32,870
procedures this will also work

00:14:34,240 --> 00:14:43,430
you can define exceptions in Murray DB

00:14:39,230 --> 00:14:45,020
and in Oracle but the where you define

00:14:43,430 --> 00:14:47,150
these exceptions and how they're handled

00:14:45,020 --> 00:14:51,050
is different so Maury DB has them

00:14:47,150 --> 00:14:53,480
initially in the top Oracle has them at

00:14:51,050 --> 00:15:00,080
the at the end with Oracle mode this

00:14:53,480 --> 00:15:02,900
works also the there's a difference

00:15:00,080 --> 00:15:06,170
between in out and in out this is Murray

00:15:02,900 --> 00:15:09,320
DB this is Oracle this is this was a

00:15:06,170 --> 00:15:12,890
simple change in the parser but without

00:15:09,320 --> 00:15:17,870
this it would not have worked also the

00:15:12,890 --> 00:15:20,330
null can is not no longer just a value

00:15:17,870 --> 00:15:29,000
it can also be a statement so you can

00:15:20,330 --> 00:15:31,430
have it not to do anything now there is

00:15:29,000 --> 00:15:36,350
also a problem with return so Oracle

00:15:31,430 --> 00:15:39,530
requires you to do return as a when you

00:15:36,350 --> 00:15:41,960
create a function Murray DB required

00:15:39,530 --> 00:15:46,550
returns instead so it was great function

00:15:41,960 --> 00:15:50,720
f1 returns in Oracle has returned end we

00:15:46,550 --> 00:15:53,720
now support both and also you can now

00:15:50,720 --> 00:15:56,300
use returns in stored procedures as well

00:15:53,720 --> 00:15:57,800
so before you could only return in from

00:15:56,300 --> 00:16:00,950
a function it's only a function can

00:15:57,800 --> 00:16:02,390
return a value but now it also works to

00:16:00,950 --> 00:16:09,730
finish execution of a pressed or

00:16:02,390 --> 00:16:13,090
procedure in MariaDB while loops you

00:16:09,730 --> 00:16:15,980
could execute continue like in a regular

00:16:13,090 --> 00:16:20,300
programming language with Murray ADB but

00:16:15,980 --> 00:16:22,340
the statement was a bit confusing we now

00:16:20,300 --> 00:16:23,980
support the continue statement so it

00:16:22,340 --> 00:16:28,810
tells you to basically go through

00:16:23,980 --> 00:16:28,810
another loop of the wire loop

00:16:29,810 --> 00:16:35,870
and there's also this matching between

00:16:33,170 --> 00:16:38,449
data types so varchar' 2 is Synanon 2

00:16:35,870 --> 00:16:40,959
varchar' number to decimal date to that

00:16:38,449 --> 00:16:44,389
date time and so on

00:16:40,959 --> 00:16:48,800
so all these were necessary in order to

00:16:44,389 --> 00:16:49,999
support pl/sql syntax the good part is

00:16:48,800 --> 00:16:53,720
that these were not actually too

00:16:49,999 --> 00:16:57,860
complicated to do and this is a list of

00:16:53,720 --> 00:17:00,350
multiple different features which we had

00:16:57,860 --> 00:17:02,749
to add one of the key ones is we now

00:17:00,350 --> 00:17:04,819
support for loops so we could use while

00:17:02,749 --> 00:17:09,650
to simulate a for loop but now there is

00:17:04,819 --> 00:17:16,730
for loop syntax available and all these

00:17:09,650 --> 00:17:18,110
are oracle attributes for cursors i'm

00:17:16,730 --> 00:17:19,939
not going to go through all of these I

00:17:18,110 --> 00:17:21,890
will have this presentation available so

00:17:19,939 --> 00:17:23,750
if there's anything that you think

00:17:21,890 --> 00:17:27,159
you're missing from this you will be

00:17:23,750 --> 00:17:27,159
able to find a presentation no problem

00:17:28,330 --> 00:17:44,750
I've also already mentioned go to

00:17:30,710 --> 00:17:47,090
statements here and now so these are

00:17:44,750 --> 00:17:50,419
mostly details I don't go into too much

00:17:47,090 --> 00:17:53,510
about those but let's look at things

00:17:50,419 --> 00:17:56,950
that are not yet in 10 3 but will be

00:17:53,510 --> 00:17:59,960
before this release freezes its features

00:17:56,950 --> 00:18:03,020
so package is basically like a namespace

00:17:59,960 --> 00:18:05,450
for functions and procedures it's

00:18:03,020 --> 00:18:09,679
currently supported in Oracle we will

00:18:05,450 --> 00:18:11,210
support it in Mari DB as well and hidden

00:18:09,679 --> 00:18:14,750
columns this is one of the more

00:18:11,210 --> 00:18:17,809
interesting aspects so how do hidden

00:18:14,750 --> 00:18:19,429
columns work well for a regular column

00:18:17,809 --> 00:18:23,840
if you do select star it's going to show

00:18:19,429 --> 00:18:27,950
up in in the data results if you hide

00:18:23,840 --> 00:18:30,320
the column you can hide it depending on

00:18:27,950 --> 00:18:32,450
how hidden you want it and in various

00:18:30,320 --> 00:18:34,429
ways so you can have them a little bit

00:18:32,450 --> 00:18:36,740
hidden and that if we do select star

00:18:34,429 --> 00:18:39,740
it's not going to be visible to the

00:18:36,740 --> 00:18:42,080
application so in case you have a legacy

00:18:39,740 --> 00:18:43,340
application which does select star you

00:18:42,080 --> 00:18:49,310
can hide columns which are

00:18:43,340 --> 00:18:51,020
adding in your newer applications but if

00:18:49,310 --> 00:18:54,460
you want to use them you just have to

00:18:51,020 --> 00:19:00,110
query them explicitly and it will work

00:18:54,460 --> 00:19:03,650
more hidden columns are hidden if

00:19:00,110 --> 00:19:06,230
they're not explicitly queried but this

00:19:03,650 --> 00:19:09,550
also effects create create and alter

00:19:06,230 --> 00:19:12,050
statements you can think of them like a

00:19:09,550 --> 00:19:15,440
pseudo column these are quite frequent

00:19:12,050 --> 00:19:18,320
in Oracle so if you specifically mention

00:19:15,440 --> 00:19:22,180
that column it gets generated for that

00:19:18,320 --> 00:19:25,460
particular query or very hidden this is

00:19:22,180 --> 00:19:28,130
mostly oriented for performance if you

00:19:25,460 --> 00:19:30,590
know that a certain column if computed

00:19:28,130 --> 00:19:34,520
will speed up queries based on how the

00:19:30,590 --> 00:19:37,400
optimizer will find query plans you may

00:19:34,520 --> 00:19:41,480
want to just create this column and have

00:19:37,400 --> 00:19:43,580
it only on the database side ok so the

00:19:41,480 --> 00:19:51,950
key word here is that this very hidden

00:19:43,580 --> 00:19:54,590
column may be indexed also we do support

00:19:51,950 --> 00:19:56,960
compression but you can now also

00:19:54,590 --> 00:19:58,070
compress individual columns so maybe you

00:19:56,960 --> 00:19:59,320
want to have some which are not

00:19:58,070 --> 00:20:01,940
compressed for performance reasons

00:19:59,320 --> 00:20:04,940
whilst you want to compress others for

00:20:01,940 --> 00:20:06,890
storage space reasons and then spider

00:20:04,940 --> 00:20:11,200
storage which is a distributed storage

00:20:06,890 --> 00:20:16,040
engine is going to be updated to the

00:20:11,200 --> 00:20:17,540
newest release things which you would

00:20:16,040 --> 00:20:19,310
want to have but we're not sure if it's

00:20:17,540 --> 00:20:21,560
gonna if they're going to make it is an

00:20:19,310 --> 00:20:25,370
update for Galera for I think we're

00:20:21,560 --> 00:20:29,230
still waiting on them to provide it data

00:20:25,370 --> 00:20:32,540
types arrays support for time zones and

00:20:29,230 --> 00:20:34,250
sub partitioning this may come in it's

00:20:32,540 --> 00:20:36,920
not really that complicated as well as

00:20:34,250 --> 00:20:38,810
table functions which are a natural

00:20:36,920 --> 00:20:45,160
progression following the raw data type

00:20:38,810 --> 00:20:47,690
which we have which we now have alright

00:20:45,160 --> 00:20:51,230
that's about it when it comes to

00:20:47,690 --> 00:20:54,560
features I hope this was not just a full

00:20:51,230 --> 00:20:56,810
just a long list of things so now if you

00:20:54,560 --> 00:20:57,200
have any questions particularly about

00:20:56,810 --> 00:20:59,779
Murray

00:20:57,200 --> 00:21:03,019
be even a 10:1 version which is now in

00:20:59,779 --> 00:21:05,200
Debian I am more than happy to take any

00:21:03,019 --> 00:21:05,200
questions

00:21:15,800 --> 00:21:18,430
sure

00:21:49,330 --> 00:21:52,389
so let me see if I understand the

00:21:51,039 --> 00:21:55,440
question so the question is if there is

00:21:52,389 --> 00:22:02,590
a big difference between mysql 5 7 and

00:21:55,440 --> 00:22:05,470
10 1 so there are differences when it

00:22:02,590 --> 00:22:08,559
comes to the data directory so MySQL has

00:22:05,470 --> 00:22:10,239
done backwards incompatible changes in

00:22:08,559 --> 00:22:14,529
the data directory so where it stores

00:22:10,239 --> 00:22:21,159
metadata about users procedures etc but

00:22:14,529 --> 00:22:23,919
we have tried to make it work as much as

00:22:21,159 --> 00:22:27,480
possible so you should not have any

00:22:23,919 --> 00:22:27,480
immediate problems when you're migrating

00:22:27,539 --> 00:22:33,009
the potential problems are on the

00:22:30,970 --> 00:22:36,429
replication side so if you're using a

00:22:33,009 --> 00:22:38,230
master-slave replication the

00:22:36,429 --> 00:22:40,539
implementation for global transaction

00:22:38,230 --> 00:22:42,940
IDs are completely different they are

00:22:40,539 --> 00:22:47,139
not compatible with each other we try to

00:22:42,940 --> 00:22:51,039
support murid MySQL replication

00:22:47,139 --> 00:22:53,950
statements but we do not support their

00:22:51,039 --> 00:22:55,869
full set of features there and it

00:22:53,950 --> 00:22:59,169
doesn't work the other way around so my

00:22:55,869 --> 00:23:04,749
sq L will complain horribly if we try to

00:22:59,169 --> 00:23:08,169
use more a DB as a master the thing that

00:23:04,749 --> 00:23:10,450
I can suggest to you is to first make a

00:23:08,169 --> 00:23:14,649
backup that's that's the sensible thing

00:23:10,450 --> 00:23:17,769
to do try it out see if it works for you

00:23:14,649 --> 00:23:19,570
we've had large corporations switch but

00:23:17,769 --> 00:23:24,399
from MySQL to Murray DB so it is

00:23:19,570 --> 00:23:26,169
possible if you have big problems you

00:23:24,399 --> 00:23:30,519
can always ask on the mailing list we

00:23:26,169 --> 00:23:33,489
are very active and responsive it's just

00:23:30,519 --> 00:23:36,179
that for the regular user this should

00:23:33,489 --> 00:23:36,179
not be a problem

00:23:40,190 --> 00:23:45,960
if we have one question from ILC

00:23:43,350 --> 00:23:48,750
actually okay I'm not sure what he means

00:23:45,960 --> 00:23:51,830
by that just my why do you have any

00:23:48,750 --> 00:23:51,830
plans today

00:23:53,750 --> 00:23:59,429
[Music]

00:23:55,370 --> 00:24:01,559
yes so not quite sure so how does this

00:23:59,429 --> 00:24:05,309
IRC thing work they're basically looking

00:24:01,559 --> 00:24:09,840
at the live stream right or okay so

00:24:05,309 --> 00:24:14,100
there are Mario DB is trying to move

00:24:09,840 --> 00:24:16,169
towards the data warehouse market this

00:24:14,100 --> 00:24:17,880
is mostly driven by the amoeba

00:24:16,169 --> 00:24:21,270
corporation at the moment so not in

00:24:17,880 --> 00:24:23,130
m'lady foundation but if you are

00:24:21,270 --> 00:24:26,070
interested you can look up columnstore

00:24:23,130 --> 00:24:29,960
which is a storage engine specifically

00:24:26,070 --> 00:24:34,169
aimed at analytical queries so that's

00:24:29,960 --> 00:24:37,790
probably the thing to look at it's still

00:24:34,169 --> 00:24:40,020
open source so it's still available and

00:24:37,790 --> 00:24:42,480
probably the version 10 2 is where

00:24:40,020 --> 00:24:44,220
you're interested in because that's

00:24:42,480 --> 00:24:46,500
where we support window functions and

00:24:44,220 --> 00:24:50,120
common table expressions things which

00:24:46,500 --> 00:24:50,120
are very used in analytical queries

00:24:54,300 --> 00:25:00,150
what about using Python with Maria

00:24:57,330 --> 00:25:03,300
doesn't work similarity to the Python

00:25:00,150 --> 00:25:06,990
interfaces to MySQL are there particular

00:25:03,300 --> 00:25:10,170
libraries that this is the connector for

00:25:06,990 --> 00:25:11,550
my for Python Maya skill works from

00:25:10,170 --> 00:25:13,290
ready be sorry

00:25:11,550 --> 00:25:16,500
so the connector that the Python

00:25:13,290 --> 00:25:21,120
connector for MySQL plays nicely with

00:25:16,500 --> 00:25:23,490
Maria DB okay so anything that works for

00:25:21,120 --> 00:25:27,930
MySQL should work for my ID B in this

00:25:23,490 --> 00:25:30,660
case I personally have created a few

00:25:27,930 --> 00:25:33,420
websites using Django and they are

00:25:30,660 --> 00:25:37,530
running on the MySQL back-end but

00:25:33,420 --> 00:25:39,980
running my ready beam as a server and it

00:25:37,530 --> 00:25:39,980
was just fine

00:25:43,780 --> 00:25:49,540
so in converting from Oracle you know an

00:25:47,140 --> 00:25:51,460
Oracle database I'm thinking of a

00:25:49,540 --> 00:25:53,380
specific database that has lots of

00:25:51,460 --> 00:25:56,380
stored procedures and things like that

00:25:53,380 --> 00:26:00,150
and can you talk about you know the

00:25:56,380 --> 00:26:05,110
process of coming from that database to

00:26:00,150 --> 00:26:09,490
mariah DB and i don't have personal

00:26:05,110 --> 00:26:11,260
experience with migrating directly but i

00:26:09,490 --> 00:26:12,820
know that there are companies who are

00:26:11,260 --> 00:26:19,270
doing this right now

00:26:12,820 --> 00:26:21,160
i I think the best approach is to

00:26:19,270 --> 00:26:22,390
actually ask on the mailing list and see

00:26:21,160 --> 00:26:25,330
if there's there are people who have

00:26:22,390 --> 00:26:28,300
direct experience with migrating there

00:26:25,330 --> 00:26:32,590
probably will be the way I would tackle

00:26:28,300 --> 00:26:35,590
the problem is to slowly add the stored

00:26:32,590 --> 00:26:37,450
procedures directly but you should copy

00:26:35,590 --> 00:26:39,700
paste whatever code you have to create

00:26:37,450 --> 00:26:42,580
your database in Oracle move them to my

00:26:39,700 --> 00:26:47,020
ODBC if everything you don't get any

00:26:42,580 --> 00:26:49,480
syntax errors and then see if we can how

00:26:47,020 --> 00:27:02,190
you can port the data itself from Oracle

00:26:49,480 --> 00:27:02,190
to my ID okay

00:27:02,430 --> 00:27:09,670
so the foundation has is a nonprofit

00:27:07,030 --> 00:27:13,360
organization the corporation is a

00:27:09,670 --> 00:27:17,500
for-profit organization the foundation

00:27:13,360 --> 00:27:23,050
is has copyright over the more a DB

00:27:17,500 --> 00:27:26,620
server code and the movie Foundation has

00:27:23,050 --> 00:27:28,810
the final say when a release happens and

00:27:26,620 --> 00:27:30,190
what it contains if we think that's

00:27:28,810 --> 00:27:31,930
something the corporation really wants

00:27:30,190 --> 00:27:34,300
is not in the best interest of the

00:27:31,930 --> 00:27:37,570
community the Murray DB foundation has

00:27:34,300 --> 00:27:39,640
the final say in this and now if

00:27:37,570 --> 00:27:42,340
somebody is concerned about the

00:27:39,640 --> 00:27:44,110
independence of the foundation it is

00:27:42,340 --> 00:27:46,030
true that they found the corporation

00:27:44,110 --> 00:27:48,400
does sponsor the foundation it is one of

00:27:46,030 --> 00:27:51,370
these sponsors but it is not one of the

00:27:48,400 --> 00:27:53,350
largest sponsors so there isn't there

00:27:51,370 --> 00:27:55,690
isn't the financial incentive if you're

00:27:53,350 --> 00:27:57,159
worried about that there was an

00:27:55,690 --> 00:27:59,739
announcement about this I think

00:27:57,159 --> 00:28:03,059
in April where the corporation is

00:27:59,739 --> 00:28:06,009
funding about one-sixth of the

00:28:03,059 --> 00:28:07,539
Foundation's financial resources I think

00:28:06,009 --> 00:28:12,879
now it may be even less because we've

00:28:07,539 --> 00:28:15,519
we've had larger sponsors come up what

00:28:12,879 --> 00:28:20,049
the corporation does provide however is

00:28:15,519 --> 00:28:22,359
development resources so the corporation

00:28:20,049 --> 00:28:24,369
is one of the major providers of

00:28:22,359 --> 00:28:28,929
software engineers that will work on the

00:28:24,369 --> 00:28:31,450
more ADB server but then again if these

00:28:28,929 --> 00:28:33,190
developers are doing the wrong thing the

00:28:31,450 --> 00:28:37,450
foundation can just say no this is not

00:28:33,190 --> 00:28:39,659
what we want okay I hope that answers

00:28:37,450 --> 00:28:39,659
your question

00:28:47,630 --> 00:28:50,230
okay

00:28:53,010 --> 00:28:59,310
just curious you can feel free to refuse

00:28:56,460 --> 00:29:02,420
to answer but I I'm just curious how

00:28:59,310 --> 00:29:04,350
Oracle may perceive the the

00:29:02,420 --> 00:29:06,570
compatibility I'm not aware of any other

00:29:04,350 --> 00:29:09,780
products or any other projects that have

00:29:06,570 --> 00:29:11,970
taken on that kind of directly saying

00:29:09,780 --> 00:29:17,700
that we would like this piece of the

00:29:11,970 --> 00:29:19,770
market so I'm not going to sure I

00:29:17,700 --> 00:29:25,830
understand the question my question is

00:29:19,770 --> 00:29:29,400
do you or do you know or do you feel

00:29:25,830 --> 00:29:31,830
that the Oracle will have strong

00:29:29,400 --> 00:29:34,770
thoughts about about this compatibility

00:29:31,830 --> 00:29:39,030
being added to marae dB

00:29:34,770 --> 00:29:41,550
I tend not to think about the commercial

00:29:39,030 --> 00:29:47,970
aspect because I'm not I don't have any

00:29:41,550 --> 00:29:50,270
stake in this commercially but our view

00:29:47,970 --> 00:29:53,640
is that we want people to make use of

00:29:50,270 --> 00:29:55,500
open-source software and the barrier is

00:29:53,640 --> 00:29:57,480
the transition between proprietary

00:29:55,500 --> 00:30:00,330
solutions and open-source solutions and

00:29:57,480 --> 00:30:04,280
if we can help ease this transition then

00:30:00,330 --> 00:30:04,280
it's a win for everybody

00:30:11,300 --> 00:30:19,520
okay if there are no other questions I

00:30:14,600 --> 00:30:23,060
also held reddit ask me anything around

00:30:19,520 --> 00:30:26,660
March so if anybody is interested in

00:30:23,060 --> 00:30:29,650
hearing more of my view on how my DB

00:30:26,660 --> 00:30:32,710
works you can find it on reddit slash

00:30:29,650 --> 00:30:36,980
Mario TV I think right now it's about

00:30:32,710 --> 00:30:40,370
page second page of the list of topics

00:30:36,980 --> 00:30:44,290
but I do provide a few points especially

00:30:40,370 --> 00:30:44,290
when it comes to open source development

00:30:44,620 --> 00:30:52,670
all right well I thank you everybody for

00:30:49,580 --> 00:30:54,860
joining my talk and if you have any

00:30:52,670 --> 00:30:58,440
questions I am around I'll be around

00:30:54,860 --> 00:31:04,660
till the end of that conf thank you

00:30:58,440 --> 00:31:04,660

YouTube URL: https://www.youtube.com/watch?v=HJWN-fR_da0


