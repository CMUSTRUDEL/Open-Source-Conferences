Title: Managing build infrastructure of a Debian derivative
Publication date: 2017-12-06
Playlist: DebConf 17
Description: 
	by Andrew Shadura

At: DebConf17
https://debconf17.debconf.org/
Room: Rex
Scheduled start: 2017-08-08 15:30:00
Captions: 
	00:00:04,480 --> 00:00:12,840
my name is Andrew and well this is I'm

00:00:09,790 --> 00:00:15,250
going to talk to talk about how I worked

00:00:12,840 --> 00:00:20,160
managing build and integration

00:00:15,250 --> 00:00:24,210
infrastructure of Deb and derivative so

00:00:20,160 --> 00:00:27,910
first of all some bit about myself I

00:00:24,210 --> 00:00:31,000
started contributing to Debian in 2007

00:00:27,910 --> 00:00:33,970
um some years later in 2013 I became a

00:00:31,000 --> 00:00:38,440
Debian developer and three years later I

00:00:33,970 --> 00:00:40,690
became I started working for kelabra a

00:00:38,440 --> 00:00:42,460
company which does open source

00:00:40,690 --> 00:00:48,460
consultancy basically and responsive

00:00:42,460 --> 00:00:51,640
this conference so um I only started

00:00:48,460 --> 00:00:55,140
doing doing actual packaging in 2010 and

00:00:51,640 --> 00:00:58,269
it was basically it started as a joke a

00:00:55,140 --> 00:01:00,339
friend of mine I claimed I you cannot

00:00:58,269 --> 00:01:03,280
package something for Debian in half an

00:01:00,339 --> 00:01:06,159
hour and I tried to prove him wrong what

00:01:03,280 --> 00:01:09,189
I didn't manage to package that package

00:01:06,159 --> 00:01:10,990
in half an hour but still I've got into

00:01:09,189 --> 00:01:14,859
well they've been packaging

00:01:10,990 --> 00:01:18,759
I never attempted to run any bits of

00:01:14,859 --> 00:01:22,719
real dev an infrastructure I've only

00:01:18,759 --> 00:01:26,159
used mini D install to publish binary

00:01:22,719 --> 00:01:30,729
packages to for my users to test so I

00:01:26,159 --> 00:01:38,200
barely know how to properly manage real

00:01:30,729 --> 00:01:40,479
Devon infrastructure but then I started

00:01:38,200 --> 00:01:46,420
working on a project in Cobra called a

00:01:40,479 --> 00:01:49,090
purchase this is Devon derivative which

00:01:46,420 --> 00:01:54,429
is tail to automotive needs

00:01:49,090 --> 00:01:57,340
and basically originally it was

00:01:54,429 --> 00:02:01,960
developed to run on infotainment systems

00:01:57,340 --> 00:02:05,950
basically machines which are do the

00:02:01,960 --> 00:02:08,530
navigation and play radio for you but it

00:02:05,950 --> 00:02:10,539
is it is in fact fit for quite a wide

00:02:08,530 --> 00:02:17,090
variety of electronic devices in

00:02:10,539 --> 00:02:19,849
automotive area so this project

00:02:17,090 --> 00:02:23,120
it provides quite a lot of

00:02:19,849 --> 00:02:24,940
infrastructure for our code hosting it

00:02:23,120 --> 00:02:28,190
provides its own code review tools

00:02:24,940 --> 00:02:31,640
package build services image generation

00:02:28,190 --> 00:02:35,959
services and also automatic taste

00:02:31,640 --> 00:02:38,150
testing infrastructure and well even

00:02:35,959 --> 00:02:40,430
though it is a Debian derivative it is

00:02:38,150 --> 00:02:43,370
based mostly on the bun - not directly

00:02:40,430 --> 00:02:45,440
on Debian even though or it takes

00:02:43,370 --> 00:02:49,819
several packages directly from Debian

00:02:45,440 --> 00:02:53,110
for example system D and on top of all

00:02:49,819 --> 00:02:57,079
of that it provides a set of its own

00:02:53,110 --> 00:03:03,200
software frameworks packages and api's

00:02:57,079 --> 00:03:06,670
for automotive needs so we as I

00:03:03,200 --> 00:03:13,040
mentioned we use system D for process

00:03:06,670 --> 00:03:17,019
tracking we heavily use up-armored to

00:03:13,040 --> 00:03:20,870
enforce policies on applications and

00:03:17,019 --> 00:03:23,329
even we take a Palmer from Ubuntu but we

00:03:20,870 --> 00:03:25,100
extend it with policies for lots of

00:03:23,329 --> 00:03:27,799
applications already on Ubuntu and

00:03:25,100 --> 00:03:35,599
Debian and also to our own applications

00:03:27,799 --> 00:03:41,810
and packages mmm we use flat pack thanks

00:03:35,599 --> 00:03:43,489
to Simon democracy for safe and

00:03:41,810 --> 00:03:48,859
efficient deployments of applications in

00:03:43,489 --> 00:03:51,109
there we use Whalen for graphics so

00:03:48,859 --> 00:03:54,739
there's no more exo-k's since I think

00:03:51,109 --> 00:03:59,660
last year and well obviously we just

00:03:54,739 --> 00:04:02,359
rima for multimedia so well some people

00:03:59,660 --> 00:04:06,290
may say why do we use Ubuntu and some

00:04:02,359 --> 00:04:10,370
bits of Debian and not just Debian which

00:04:06,290 --> 00:04:12,739
is well a universal person system and it

00:04:10,370 --> 00:04:14,120
is entirely free software and it has

00:04:12,739 --> 00:04:16,729
been developed by committee of

00:04:14,120 --> 00:04:20,030
individuals and not companies which

00:04:16,729 --> 00:04:24,979
often happens or all of those things are

00:04:20,030 --> 00:04:28,430
great but unfortunately stable moves a

00:04:24,979 --> 00:04:30,759
bit too slowly for us and the once it's

00:04:28,430 --> 00:04:36,979
released the changes to there to stay

00:04:30,759 --> 00:04:41,690
minimal and it quickly becomes a very

00:04:36,979 --> 00:04:43,910
outdated and then when the new release

00:04:41,690 --> 00:04:46,580
is out the changes are often quite

00:04:43,910 --> 00:04:50,930
significant on the other hand unstable

00:04:46,580 --> 00:04:58,220
brakes a bit too often for us to base on

00:04:50,930 --> 00:05:02,419
it whereas Ubuntu they do release is

00:04:58,220 --> 00:05:05,419
more often and even in LCS they push up

00:05:02,419 --> 00:05:07,910
the updates more often and it moves

00:05:05,419 --> 00:05:11,780
slightly faster than Devon Devon stable

00:05:07,910 --> 00:05:16,190
and even then they have quite a large

00:05:11,780 --> 00:05:24,380
install base so it they have lots of

00:05:16,190 --> 00:05:29,889
testing Oh yep so now be a bit about

00:05:24,380 --> 00:05:29,889
infrastructure we have in a purchase so

00:05:31,180 --> 00:05:38,120
the core of this infrastructure is open

00:05:34,639 --> 00:05:39,889
build service OBS which is thanks to

00:05:38,120 --> 00:05:46,789
under lease package for Debian by the

00:05:39,889 --> 00:05:51,289
way so we store a purchase specific

00:05:46,789 --> 00:05:53,539
sources in git and at the moment we seek

00:05:51,289 --> 00:05:58,789
it but there is plenty is github for

00:05:53,539 --> 00:06:02,180
this from gates a purchase specific

00:05:58,789 --> 00:06:05,630
sources go into OBS where the rest of of

00:06:02,180 --> 00:06:08,449
packages are stored mostly its packages

00:06:05,630 --> 00:06:10,039
from Ubuntu and from Debian which got it

00:06:08,449 --> 00:06:13,880
there directly all with some

00:06:10,039 --> 00:06:16,909
modifications obvious builds packages

00:06:13,880 --> 00:06:21,020
built binary packages and they go into

00:06:16,909 --> 00:06:23,750
opt compatible package repositories then

00:06:21,020 --> 00:06:27,710
they get installed into images which can

00:06:23,750 --> 00:06:34,389
be used directly on the devices we use

00:06:27,710 --> 00:06:34,389
Jenkins to manage image builds and other

00:06:35,110 --> 00:06:41,960
continuous integration parts and we

00:06:38,779 --> 00:06:43,159
heavily rely in fabricator for project

00:06:41,960 --> 00:06:44,389
management and

00:06:43,159 --> 00:06:47,960
backtracking

00:06:44,389 --> 00:06:52,360
and we also use lava for testing the

00:06:47,960 --> 00:06:56,990
actual images on actual devices so

00:06:52,360 --> 00:07:03,020
something about open build service just

00:06:56,990 --> 00:07:08,090
like or as built OBS uses its own code

00:07:03,020 --> 00:07:09,729
to create routes in which they the

00:07:08,090 --> 00:07:14,949
package is being built in a clean

00:07:09,729 --> 00:07:18,909
well-defined environment so OBS resolves

00:07:14,949 --> 00:07:21,560
dependencies every time from scratch and

00:07:18,909 --> 00:07:25,939
installs build dependencies and build

00:07:21,560 --> 00:07:28,729
the package it stores all packages in

00:07:25,939 --> 00:07:32,509
the version revision controlled manner

00:07:28,729 --> 00:07:34,159
so you can see how the package has

00:07:32,509 --> 00:07:37,400
evolved you can check out any older

00:07:34,159 --> 00:07:40,460
version if it's needed to revert and

00:07:37,400 --> 00:07:42,500
build again and actually it's resembles

00:07:40,460 --> 00:07:48,620
subversion in many many ways this

00:07:42,500 --> 00:07:55,129
package storage it provides access

00:07:48,620 --> 00:07:59,300
control so basically for every project

00:07:55,129 --> 00:08:01,940
every package you can choose whether it

00:07:59,300 --> 00:08:04,520
is accessible for read in writing and so

00:08:01,940 --> 00:08:10,759
on packages may have maintained a role

00:08:04,520 --> 00:08:16,099
assigned to them so one user can manage

00:08:10,759 --> 00:08:23,990
it in manage this package similar to

00:08:16,099 --> 00:08:26,060
what we have in Debian and even if a

00:08:23,990 --> 00:08:29,150
user doesn't have a right access to a

00:08:26,060 --> 00:08:32,510
certain package there's a branching

00:08:29,150 --> 00:08:37,070
feature so or a user can clone the

00:08:32,510 --> 00:08:39,320
package entity his own sandbox develop

00:08:37,070 --> 00:08:40,029
the package there and then submit merge

00:08:39,320 --> 00:08:44,510
request

00:08:40,029 --> 00:08:50,180
so even non maintenance can contribute

00:08:44,510 --> 00:08:52,730
changes and test them and well this

00:08:50,180 --> 00:08:55,160
branch and feature very much also

00:08:52,730 --> 00:08:58,240
resembles the subversion branch in

00:08:55,160 --> 00:09:06,680
emerging because it is based on

00:08:58,240 --> 00:09:09,010
directory like namespaces so in OBS a

00:09:06,680 --> 00:09:11,870
participate into multiple components

00:09:09,010 --> 00:09:14,570
unlike Debian there's no mine contrib

00:09:11,870 --> 00:09:18,769
non-free are displayed is done

00:09:14,570 --> 00:09:22,449
differently every component is in its

00:09:18,769 --> 00:09:26,050
own obvious project so the the

00:09:22,449 --> 00:09:29,329
components plate is target development

00:09:26,050 --> 00:09:33,589
HMI SDK in snapshots and there's also

00:09:29,329 --> 00:09:34,790
help ellipse so target are packages

00:09:33,589 --> 00:09:39,100
which are getting installed on the

00:09:34,790 --> 00:09:41,540
device itself development are mostly

00:09:39,100 --> 00:09:45,139
additional packages which needed to be

00:09:41,540 --> 00:09:47,600
build what's in target SDK are tools

00:09:45,139 --> 00:09:49,910
which aren't needed only for development

00:09:47,600 --> 00:09:54,949
and they are installed into special SDK

00:09:49,910 --> 00:09:57,699
images where users can also install

00:09:54,949 --> 00:10:01,670
additional packages from helper leaves

00:09:57,699 --> 00:10:05,779
HMI is a special component with a

00:10:01,670 --> 00:10:10,820
software for human machine interface

00:10:05,779 --> 00:10:13,490
packages which is what is used for

00:10:10,820 --> 00:10:15,769
infant infotainment systems and finally

00:10:13,490 --> 00:10:20,449
snapshots is a special component which

00:10:15,769 --> 00:10:22,220
is used to store and build development

00:10:20,449 --> 00:10:28,610
versus virtual versions of packages

00:10:22,220 --> 00:10:30,949
right from the gate so in OBS you can

00:10:28,610 --> 00:10:33,560
specify dependencies between components

00:10:30,949 --> 00:10:36,050
so when packages from one of the

00:10:33,560 --> 00:10:38,510
components are built they may depend on

00:10:36,050 --> 00:10:42,319
packages from other components so for

00:10:38,510 --> 00:10:45,069
example development use this target or

00:10:42,319 --> 00:10:47,839
actually its other way around this

00:10:45,069 --> 00:10:51,709
well in fact development can use of

00:10:47,839 --> 00:10:54,470
packages from Target but a target uses

00:10:51,709 --> 00:10:59,899
package from development to be built and

00:10:54,470 --> 00:11:01,790
SDK depends on development so you can

00:10:59,899 --> 00:11:08,449
select multiple components when you are

00:11:01,790 --> 00:11:10,640
a on the live system but the SDK sort of

00:11:08,449 --> 00:11:13,089
assumes you have also development and

00:11:10,640 --> 00:11:13,089
target

00:11:17,320 --> 00:11:26,300
so when OBS builds a package it is

00:11:24,200 --> 00:11:28,910
getting published into internal obvious

00:11:26,300 --> 00:11:33,020
repositories which are normally you have

00:11:28,910 --> 00:11:35,390
just one project those projects the

00:11:33,020 --> 00:11:38,330
repositories involved in aft formats so

00:11:35,390 --> 00:11:43,130
we is reap reap roll to make them

00:11:38,330 --> 00:11:46,220
accessible to up those internal

00:11:43,130 --> 00:11:48,110
repositories are used by OBS to build

00:11:46,220 --> 00:11:51,170
other packages within the same project

00:11:48,110 --> 00:11:53,690
so when a package is being built and

00:11:51,170 --> 00:11:55,250
published into this repository it can be

00:11:53,690 --> 00:12:01,070
used as a Bill dependency for other

00:11:55,250 --> 00:12:03,560
packages in the same project and this

00:12:01,070 --> 00:12:05,510
makes it very easy to do full rebuilds

00:12:03,560 --> 00:12:08,270
you just add an additional repository

00:12:05,510 --> 00:12:13,280
which is not published into up

00:12:08,270 --> 00:12:17,420
depositories and a which depends on the

00:12:13,280 --> 00:12:20,210
main reporter repository so packages can

00:12:17,420 --> 00:12:25,930
be rebuilt and the results of the build

00:12:20,210 --> 00:12:25,930
can be discarded so it's easy to detect

00:12:26,200 --> 00:12:30,530
when the text is agents when some

00:12:29,240 --> 00:12:32,960
packages stop the building after some

00:12:30,530 --> 00:12:35,300
time because of changes in their

00:12:32,960 --> 00:12:42,440
dependencies or and build order or some

00:12:35,300 --> 00:12:45,020
other for some other reasons right so to

00:12:42,440 --> 00:12:48,140
work with packages we've we've developed

00:12:45,020 --> 00:12:50,150
a number of workflows which are

00:12:48,140 --> 00:12:53,540
different for packages imported from

00:12:50,150 --> 00:12:58,730
Ubuntu and Debian and for our own

00:12:53,540 --> 00:13:00,890
packages so while packages from abundant

00:12:58,730 --> 00:13:04,760
Debian to which we don't do any changes

00:13:00,890 --> 00:13:08,870
at all they are imported to obvious

00:13:04,760 --> 00:13:10,580
either manually or using obvious feature

00:13:08,870 --> 00:13:14,900
basically you can copy packages from

00:13:10,580 --> 00:13:16,820
elsewhere if the package the changes to

00:13:14,900 --> 00:13:18,950
the packages are quite minimal which

00:13:16,820 --> 00:13:25,640
happens often we just commit changes

00:13:18,950 --> 00:13:29,030
directly in OBS keeping patches in depth

00:13:25,640 --> 00:13:30,440
three format and well all of those

00:13:29,030 --> 00:13:32,420
modified versions they have a prefix

00:13:30,440 --> 00:13:36,200
similar to similar to what I wanted us

00:13:32,420 --> 00:13:41,720
but instead of ubuntu 10.10 three and we

00:13:36,200 --> 00:13:44,060
get we put co one co 2 and so on and we

00:13:41,720 --> 00:13:47,690
also use the fork of ubuntu s-- merge

00:13:44,060 --> 00:13:52,100
automatic tool called merge all misc to

00:13:47,690 --> 00:13:54,320
pull new updates from ubuntu LTS so it

00:13:52,100 --> 00:13:56,450
can handle simple merges and

00:13:54,320 --> 00:14:00,440
automatically rebase our changes on top

00:13:56,450 --> 00:14:03,380
of water punter has and certain packages

00:14:00,440 --> 00:14:12,250
are kept in get to make the merge is

00:14:03,380 --> 00:14:15,920
easier and then in gate we use both

00:14:12,250 --> 00:14:16,310
debian our standards and our own

00:14:15,920 --> 00:14:18,650
approach

00:14:16,310 --> 00:14:23,030
so our for non approaches packages we

00:14:18,650 --> 00:14:27,100
use the dep 14 and we keep upstream code

00:14:23,030 --> 00:14:30,340
in upstream branches and purchase

00:14:27,100 --> 00:14:34,070
specific branches for our packaging of

00:14:30,340 --> 00:14:35,900
the for a purchase packaging and one

00:14:34,070 --> 00:14:40,070
will release a new version of package we

00:14:35,900 --> 00:14:44,030
add in a purchase version tag and we use

00:14:40,070 --> 00:14:48,170
google a get bill package and it's GBP

00:14:44,030 --> 00:14:50,000
epic you command to manage patches but

00:14:48,170 --> 00:14:51,980
for native are purchased by coaches we

00:14:50,000 --> 00:14:58,340
use slightly different approach

00:14:51,980 --> 00:15:00,530
so the we don't keep debian packaging

00:14:58,340 --> 00:15:07,640
and the source code separate we keep the

00:15:00,530 --> 00:15:13,520
boat on on master branch and when we

00:15:07,640 --> 00:15:16,420
create a new release to be able to push

00:15:13,520 --> 00:15:18,980
updates for the previous released

00:15:16,420 --> 00:15:21,950
distribution we create a release

00:15:18,980 --> 00:15:28,040
specific branch on which we put changes

00:15:21,950 --> 00:15:31,190
specific only to that release and we use

00:15:28,040 --> 00:15:34,910
two sets of tags a purchase specific

00:15:31,190 --> 00:15:38,950
tags for changes specific to the

00:15:34,910 --> 00:15:41,200
packaging and just a version tags so you

00:15:38,950 --> 00:15:44,800
releases of the extreme code so our

00:15:41,200 --> 00:15:46,960
normal upstream release is usually two

00:15:44,800 --> 00:15:49,570
tags one just version number and the

00:15:46,960 --> 00:15:55,060
other is a purchase version number Co

00:15:49,570 --> 00:15:57,690
one and if later on we need to do some

00:15:55,060 --> 00:16:01,510
changes in packaging only we just add

00:15:57,690 --> 00:16:04,900
Debian package and tags and if we change

00:16:01,510 --> 00:16:12,490
the actual code or apply patches we bump

00:16:04,900 --> 00:16:17,040
the upstream version number so we have a

00:16:12,490 --> 00:16:20,110
junk in this instance which every time

00:16:17,040 --> 00:16:23,710
something is committed to get it picks

00:16:20,110 --> 00:16:25,030
the the top commit of our branch and

00:16:23,710 --> 00:16:29,620
builds it in a controlled environment

00:16:25,030 --> 00:16:32,230
which is not the same as OBS this

00:16:29,620 --> 00:16:33,970
environment is updated more at the

00:16:32,230 --> 00:16:37,440
moment is that it's manually from time

00:16:33,970 --> 00:16:40,210
to time when the build dependency change

00:16:37,440 --> 00:16:45,610
because we we use this approach because

00:16:40,210 --> 00:16:49,390
we didn't want potential unrelated build

00:16:45,610 --> 00:16:52,660
failures to cause failures to build our

00:16:49,390 --> 00:16:55,930
code well if for example bash becomes

00:16:52,660 --> 00:16:59,950
uninstalled ball we don't want our code

00:16:55,930 --> 00:17:05,020
to fail to build because of that so when

00:16:59,950 --> 00:17:07,810
the bid succeeds Jenkins generates sauce

00:17:05,020 --> 00:17:09,690
package which is submitted to OBS and is

00:17:07,810 --> 00:17:13,680
committed to the snapshot component

00:17:09,690 --> 00:17:17,800
obvious builds the package once again in

00:17:13,680 --> 00:17:23,079
any clinch root and if the build

00:17:17,800 --> 00:17:25,660
succeeds and it was a release which

00:17:23,079 --> 00:17:29,470
means it was tagged as a release it

00:17:25,660 --> 00:17:31,150
submits major quest on OBS to the

00:17:29,470 --> 00:17:38,530
component from which the package

00:17:31,150 --> 00:17:44,320
originally came Jenkins uses build

00:17:38,530 --> 00:17:47,230
snapshot script written by Simon mostly

00:17:44,320 --> 00:17:50,200
this script has been used to wall to

00:17:47,230 --> 00:17:52,690
build packages and to create source

00:17:50,200 --> 00:17:56,619
packages for uploads to the

00:17:52,690 --> 00:17:58,169
obs this script is probably going to get

00:17:56,619 --> 00:18:01,210
packaged for the event as well because

00:17:58,169 --> 00:18:04,749
it is useful not only for a purchase and

00:18:01,210 --> 00:18:12,720
it has many other uses but so far it's

00:18:04,749 --> 00:18:16,960
not yet been submitted so and we also

00:18:12,720 --> 00:18:19,570
have see a procedure for new patches

00:18:16,960 --> 00:18:23,259
which are submitted at fabricator so

00:18:19,570 --> 00:18:27,190
after four or they they are being

00:18:23,259 --> 00:18:29,649
reviewed by actual humans Jenkins

00:18:27,190 --> 00:18:31,539
applies them to the top of the branch

00:18:29,649 --> 00:18:34,210
and builds them in the same environment

00:18:31,539 --> 00:18:36,609
and if the build the build fails the

00:18:34,210 --> 00:18:38,169
Semitic can immediately see that there's

00:18:36,609 --> 00:18:45,369
something wrong and they need to change

00:18:38,169 --> 00:18:50,379
the code and that's basically about

00:18:45,369 --> 00:18:53,799
packaging now image builds also

00:18:50,379 --> 00:18:56,590
controlled by Jenkins the same Jenkins

00:18:53,799 --> 00:19:02,200
instance as for easiest for packages and

00:18:56,590 --> 00:19:04,509
the rest we use in our image tools which

00:19:02,200 --> 00:19:07,960
build images in a multi-stage process

00:19:04,509 --> 00:19:11,129
and we should separate hardware

00:19:07,960 --> 00:19:14,729
component how do specific components of

00:19:11,129 --> 00:19:17,440
hardware independent components if

00:19:14,729 --> 00:19:19,570
there's someone familiar with how linear

00:19:17,440 --> 00:19:25,479
image tools work basically this means

00:19:19,570 --> 00:19:28,059
that first of all we have something

00:19:25,479 --> 00:19:31,419
called all specs and huddle parks so Oz

00:19:28,059 --> 00:19:34,359
Park is basically part of the root

00:19:31,419 --> 00:19:36,099
filesystem with packages which are

00:19:34,359 --> 00:19:38,499
specific to this architecture but not

00:19:36,099 --> 00:19:40,179
this specific device so they can be

00:19:38,499 --> 00:19:43,149
shared by multiple devices running on

00:19:40,179 --> 00:19:48,429
the same architecture for example MX SiC

00:19:43,149 --> 00:19:51,789
6q sublight and raspberry pi and the

00:19:48,429 --> 00:19:55,059
hardware park is also part of routes

00:19:51,789 --> 00:19:58,509
file system where device specific files

00:19:55,059 --> 00:20:02,109
installed like firmware or device

00:19:58,509 --> 00:20:05,129
specific you boot or maybe device

00:20:02,109 --> 00:20:05,129
specific kernel and

00:20:05,480 --> 00:20:12,720
they get combined are producing a set of

00:20:09,390 --> 00:20:16,140
images based on this architecture for

00:20:12,720 --> 00:20:19,680
every device so we we create multiple

00:20:16,140 --> 00:20:22,860
aspects for different types of images it

00:20:19,680 --> 00:20:25,080
is well as you can see only on this

00:20:22,860 --> 00:20:28,890
slide is at least target and development

00:20:25,080 --> 00:20:32,430
there's also SDK image and a number of

00:20:28,890 --> 00:20:34,370
other images and since we support three

00:20:32,430 --> 00:20:41,580
architectures at the moment which is

00:20:34,370 --> 00:20:46,200
amd64 I'm 64 and 32-bit ARM arm HF we

00:20:41,580 --> 00:20:49,290
produce quite a lot of them so image

00:20:46,200 --> 00:20:53,330
build process they builds hardware parks

00:20:49,290 --> 00:20:55,770
and OS box and then combines them into

00:20:53,330 --> 00:21:00,060
actual images which can be run on the

00:20:55,770 --> 00:21:03,390
devices generates these routes for for

00:21:00,060 --> 00:21:06,120
the SDK SDK is based at the moment on

00:21:03,390 --> 00:21:09,350
Eclipse and it allows users what

00:21:06,120 --> 00:21:12,960
developers develop applications in a

00:21:09,350 --> 00:21:16,830
more user-friendly way so they need six

00:21:12,960 --> 00:21:19,100
routes of of the system for this so

00:21:16,830 --> 00:21:22,320
after six routes are built

00:21:19,100 --> 00:21:24,630
Jenkins triggers tests on the lava image

00:21:22,320 --> 00:21:26,880
or the love of instance so the images

00:21:24,630 --> 00:21:28,410
are installed onto the devices and being

00:21:26,880 --> 00:21:34,170
tested and verified that they actually

00:21:28,410 --> 00:21:37,410
boot and do something useful we are in

00:21:34,170 --> 00:21:41,100
fact we use alter package test

00:21:37,410 --> 00:21:42,630
infrastructure for fall oh not only this

00:21:41,100 --> 00:21:47,010
informs actually what do we also use it

00:21:42,630 --> 00:21:50,820
for certain packages and well and then

00:21:47,010 --> 00:21:53,640
as a special job scans the package

00:21:50,820 --> 00:21:55,500
change logs in the image and closes the

00:21:53,640 --> 00:21:59,970
box which are fixed by new package

00:21:55,500 --> 00:22:05,010
versions so the lots of challenges are

00:21:59,970 --> 00:22:08,760
and maintaining all of that without and

00:22:05,010 --> 00:22:13,560
using something else than a standard

00:22:08,760 --> 00:22:16,410
evanesce infrastructure I'm going to

00:22:13,560 --> 00:22:18,640
start from from the bottom because first

00:22:16,410 --> 00:22:20,350
of all OBS is

00:22:18,640 --> 00:22:21,880
quite like s built and it builds

00:22:20,350 --> 00:22:27,460
packages in a slightly different way

00:22:21,880 --> 00:22:30,520
which often doesn't matter but at times

00:22:27,460 --> 00:22:32,890
our there's some difference which make

00:22:30,520 --> 00:22:34,840
some packages to fail to build from from

00:22:32,890 --> 00:22:40,060
source at the same time those the same

00:22:34,840 --> 00:22:42,700
packages build quite fine in Debian one

00:22:40,060 --> 00:22:45,160
one of the differences is that OBS

00:22:42,700 --> 00:22:46,750
ignores essential flag and it needs

00:22:45,160 --> 00:22:48,870
manual overrides to specify which

00:22:46,750 --> 00:22:51,700
packages are needed to be pre-installed

00:22:48,870 --> 00:22:57,300
before any build dependencies are

00:22:51,700 --> 00:23:00,310
installed sometimes we mess up those and

00:22:57,300 --> 00:23:05,950
packages bill failed to built in very

00:23:00,310 --> 00:23:09,400
funny and interesting ways well next

00:23:05,950 --> 00:23:11,890
thing which is sometimes difficult is

00:23:09,400 --> 00:23:16,240
that mathematic can handle simple

00:23:11,890 --> 00:23:18,610
package merges when changes do not

00:23:16,240 --> 00:23:22,690
conflict with each other but when they

00:23:18,610 --> 00:23:25,570
do it fails and and it forces the user

00:23:22,690 --> 00:23:27,610
to or the maintainer to or resolve

00:23:25,570 --> 00:23:31,390
conflicts manually and this is quite

00:23:27,610 --> 00:23:34,810
difficult because it doesn't provide any

00:23:31,390 --> 00:23:37,240
meaningful conflict description or it

00:23:34,810 --> 00:23:40,930
provides something to start with but

00:23:37,240 --> 00:23:43,000
it's quite difficult using it helps

00:23:40,930 --> 00:23:46,630
because it can solve many of the

00:23:43,000 --> 00:23:49,000
conflicts can't but then you can put the

00:23:46,630 --> 00:23:54,100
whole distribution into gate well you

00:23:49,000 --> 00:23:57,760
can but is quite difficult and we don't

00:23:54,100 --> 00:23:59,800
have many packages get it's about a

00:23:57,760 --> 00:24:04,030
couple of thousands packages which will

00:23:59,800 --> 00:24:06,040
maintain well changes well

00:24:04,030 --> 00:24:10,990
packages from Debian and a bundle with

00:24:06,040 --> 00:24:15,070
our own changes but we can put

00:24:10,990 --> 00:24:18,340
everything there and then when packages

00:24:15,070 --> 00:24:22,300
are removed from Debian Ubuntu it's bit

00:24:18,340 --> 00:24:25,780
difficult to keep track of packages

00:24:22,300 --> 00:24:27,960
removed and remove them in a purchase as

00:24:25,780 --> 00:24:27,960
well

00:24:28,990 --> 00:24:41,270
so yeah we as I mentioned previously we

00:24:35,120 --> 00:24:46,550
plan to provide gitlab to make it easier

00:24:41,270 --> 00:24:47,810
for potential contributors to to

00:24:46,550 --> 00:24:52,840
contribute because at the moment is just

00:24:47,810 --> 00:24:52,840
a ciggy instance and it's not easy to

00:24:53,320 --> 00:24:58,220
basically it's not easy for you for

00:24:56,600 --> 00:25:00,230
contributors to create their own folks

00:24:58,220 --> 00:25:03,380
of packages do work then submit it back

00:25:00,230 --> 00:25:08,750
they need to go through all official

00:25:03,380 --> 00:25:11,030
ways of contributing e there's now

00:25:08,750 --> 00:25:13,700
working progress to automate the release

00:25:11,030 --> 00:25:16,210
creation because it involves quite a lot

00:25:13,700 --> 00:25:19,310
of manual work updating packages are

00:25:16,210 --> 00:25:21,490
creating new branches and this is

00:25:19,310 --> 00:25:23,420
something I'm going to automate and

00:25:21,490 --> 00:25:24,890
there's also working progress they

00:25:23,420 --> 00:25:28,130
stopped using the narrow image tools

00:25:24,890 --> 00:25:35,210
because they are quite difficult to

00:25:28,130 --> 00:25:37,970
maintain they sometimes fail in in part

00:25:35,210 --> 00:25:39,950
because of specific bugs in Linux kernel

00:25:37,970 --> 00:25:45,140
which are very difficult to trace and

00:25:39,950 --> 00:25:48,110
fix so now we have a custom tool which

00:25:45,140 --> 00:25:52,520
is much simpler and handles image

00:25:48,110 --> 00:25:54,350
creation much better yeah and yeah

00:25:52,520 --> 00:25:57,230
basically we're going to shift focus to

00:25:54,350 --> 00:25:59,240
become a common platform for more

00:25:57,230 --> 00:26:02,440
automated systems not just entertainment

00:25:59,240 --> 00:26:05,620
as it was until now

00:26:02,440 --> 00:26:12,950
so that approaches can be used for a

00:26:05,620 --> 00:26:15,200
wide range of devices and basically this

00:26:12,950 --> 00:26:18,590
is it if you are interested in a

00:26:15,200 --> 00:26:24,530
purchase there's the web page you can go

00:26:18,590 --> 00:26:26,650
and learn more about it and well this is

00:26:24,530 --> 00:26:26,650
it

00:26:27,400 --> 00:26:34,659
[Applause]

00:26:37,700 --> 00:26:44,919
questions answers proposals

00:26:54,830 --> 00:26:58,970
have you considered using that testing

00:26:57,320 --> 00:27:00,800
is the middle ground between stable and

00:26:58,970 --> 00:27:02,300
unstable sorry brother

00:27:00,800 --> 00:27:03,650
have you considered using testing as a

00:27:02,300 --> 00:27:04,670
sort of rolling release between those

00:27:03,650 --> 00:27:06,830
tables around stable

00:27:04,670 --> 00:27:10,220
well testing is better than unstable

00:27:06,830 --> 00:27:12,350
definitely but well first of all the

00:27:10,220 --> 00:27:15,170
decision of what wasn't mine please

00:27:12,350 --> 00:27:16,460
Devon - well I can see certain

00:27:15,170 --> 00:27:20,210
challenges in using testing as well

00:27:16,460 --> 00:27:24,640
because well is in many ways it's

00:27:20,210 --> 00:27:27,860
basically unstable delayed slightly so

00:27:24,640 --> 00:27:31,010
still changes the things changed there

00:27:27,860 --> 00:27:33,230
quite often and quite a lot we need

00:27:31,010 --> 00:27:39,250
something more stable than testing but

00:27:33,230 --> 00:27:39,250
more lively than stable fair enough I

00:27:41,350 --> 00:27:48,220
can expand on that a bit

00:27:43,670 --> 00:27:51,410
for a while we were using non LTS Ubuntu

00:27:48,220 --> 00:27:55,760
so it was updating like every six months

00:27:51,410 --> 00:27:59,630
and we decided that was essentially

00:27:55,760 --> 00:28:02,360
spending too much time rebasing it was

00:27:59,630 --> 00:28:04,370
too much of a moving target and we

00:28:02,360 --> 00:28:06,290
weren't getting enough benefit from them

00:28:04,370 --> 00:28:08,360
though more from the more frequent

00:28:06,290 --> 00:28:12,710
updates to justify it so we dropped down

00:28:08,360 --> 00:28:15,710
to using only the LTS releases yeah

00:28:12,710 --> 00:28:18,800
that's another another reason

00:28:15,710 --> 00:28:20,720
yeah basing to new releases and or not

00:28:18,800 --> 00:28:25,070
even new releases just pulling updates

00:28:20,720 --> 00:28:28,310
from the same release within its support

00:28:25,070 --> 00:28:30,650
cycle is quite a lot of work and with

00:28:28,310 --> 00:28:33,130
testing it would be quite quite a

00:28:30,650 --> 00:28:39,670
constant work which needs to be done and

00:28:33,130 --> 00:28:39,670
doesn't often bring benefit benefits

00:28:45,720 --> 00:28:54,000
a beautiful thing hi alright so I'm

00:28:50,550 --> 00:28:55,980
working on a bun - sometimes I'm

00:28:54,000 --> 00:28:57,270
interested in some of this thing you

00:28:55,980 --> 00:29:01,110
need to stand up I'm sorry I don't know

00:28:57,270 --> 00:29:02,670
you're trying to film me so it sounds

00:29:01,110 --> 00:29:05,010
like you do most of your testing on the

00:29:02,670 --> 00:29:06,810
on the images that you produce and on

00:29:05,010 --> 00:29:08,790
the packages like the individual package

00:29:06,810 --> 00:29:10,440
uploads is that right sorry

00:29:08,790 --> 00:29:12,780
most of the testing you do is based on

00:29:10,440 --> 00:29:14,550
the actual like produced image product

00:29:12,780 --> 00:29:16,200
rather than packages on the packaging

00:29:14,550 --> 00:29:17,970
level wondering if you've thought about

00:29:16,200 --> 00:29:19,860
using something like Brittany and/or

00:29:17,970 --> 00:29:21,450
like running auto package tests on the

00:29:19,860 --> 00:29:25,110
packages as you upload them or if you've

00:29:21,450 --> 00:29:27,300
ever done that before we so as a bit of

00:29:25,110 --> 00:29:29,550
history in a buncha we introduced these

00:29:27,300 --> 00:29:32,400
like maybe maybe four years ago or so

00:29:29,550 --> 00:29:34,080
and so previous to that we were

00:29:32,400 --> 00:29:35,520
developers would just upload their stuff

00:29:34,080 --> 00:29:36,870
straight to the development release you

00:29:35,520 --> 00:29:38,460
know kind of like kind of like we still

00:29:36,870 --> 00:29:41,040
have an unstable in Debian now right and

00:29:38,460 --> 00:29:42,990
you get problems with like arch skew or

00:29:41,040 --> 00:29:44,700
just like random broken packages or like

00:29:42,990 --> 00:29:46,770
half-ton transitions making it through

00:29:44,700 --> 00:29:48,000
to your you know essentially the product

00:29:46,770 --> 00:29:49,410
you're trying to give to your users

00:29:48,000 --> 00:29:51,360
thrust the development release for you

00:29:49,410 --> 00:29:52,530
like maybe you get broken images from

00:29:51,360 --> 00:29:54,570
this from time to time if you have

00:29:52,530 --> 00:29:56,400
transitions half done wondering if you

00:29:54,570 --> 00:29:58,080
ever thought about like introducing more

00:29:56,400 --> 00:30:00,390
of the kind of Debian like testing like

00:29:58,080 --> 00:30:04,110
release management stuff into your into

00:30:00,390 --> 00:30:07,400
your workflow well we first of all well

00:30:04,110 --> 00:30:11,450
we also run the package test the well

00:30:07,400 --> 00:30:15,030
they've been rules test basically and

00:30:11,450 --> 00:30:20,190
since we've done integration of all the

00:30:15,030 --> 00:30:22,470
package tests into our well test

00:30:20,190 --> 00:30:25,020
infrastructure recently we can

00:30:22,470 --> 00:30:27,810
technically run test for the whole or

00:30:25,020 --> 00:30:29,160
already existing tests in other packages

00:30:27,810 --> 00:30:31,350
which come from a bunch of Debian and

00:30:29,160 --> 00:30:35,180
there was a plan to do that but it is

00:30:31,350 --> 00:30:38,930
just we basically need to somehow

00:30:35,180 --> 00:30:43,740
separate those tests from the rest of

00:30:38,930 --> 00:30:47,070
what we have so that it's just quite a

00:30:43,740 --> 00:30:49,920
lot of work to deal with you know

00:30:47,070 --> 00:30:52,350
failures in fact in which happened due

00:30:49,920 --> 00:30:55,740
to changes which were introduced in a

00:30:52,350 --> 00:30:58,500
bunch of Debian so yeah we there were

00:30:55,740 --> 00:30:59,670
plans to do this just I think it's it's

00:30:58,500 --> 00:31:01,860
been implemented but

00:30:59,670 --> 00:31:03,810
we haven't switched it on so we do this

00:31:01,860 --> 00:31:05,910
in Avanti we when we introduced this we

00:31:03,810 --> 00:31:08,550
started redirecting uploads to a new

00:31:05,910 --> 00:31:10,050
suite so sort of like 4e we started

00:31:08,550 --> 00:31:11,190
redirecting uploads to a new Suites and

00:31:10,050 --> 00:31:13,290
in winter us what we call them so

00:31:11,190 --> 00:31:14,730
instead of developers uploading directly

00:31:13,290 --> 00:31:16,350
to the development release said the

00:31:14,730 --> 00:31:18,690
uploads are automatically redirected to

00:31:16,350 --> 00:31:20,880
a staging area and then we have Britney

00:31:18,690 --> 00:31:22,620
sort of running and and only once

00:31:20,880 --> 00:31:24,090
Brittany thinks the packages are good

00:31:22,620 --> 00:31:26,130
enough are they then copied into the

00:31:24,090 --> 00:31:28,620
into the amp thing that we build the

00:31:26,130 --> 00:31:31,080
release from so I mean for you that

00:31:28,620 --> 00:31:33,150
would be like when somebody uploads to

00:31:31,080 --> 00:31:35,250
an OBS you upload it into some other

00:31:33,150 --> 00:31:36,600
area and then you would when the autumn

00:31:35,250 --> 00:31:37,920
ate the test so Percy would then migrate

00:31:36,600 --> 00:31:39,290
them into another repository which is

00:31:37,920 --> 00:31:43,320
the one that you build your product from

00:31:39,290 --> 00:31:44,370
if someone fails the test it and then

00:31:43,320 --> 00:31:45,660
you can see the results and then

00:31:44,370 --> 00:31:47,250
somebody has to fix it before it makes

00:31:45,660 --> 00:31:48,480
it through to the state to the would

00:31:47,250 --> 00:31:49,920
place you build the products form I

00:31:48,480 --> 00:31:51,990
don't know if that's interesting to you

00:31:49,920 --> 00:31:53,400
but for us I mean I think if you feel

00:31:51,990 --> 00:31:54,660
like it's given us a lot more confidence

00:31:53,400 --> 00:31:56,010
in the things that we're producing oh

00:31:54,660 --> 00:31:57,420
yeah especially in the printing you know

00:31:56,010 --> 00:31:58,530
in the presence of tests like good least

00:31:57,420 --> 00:31:59,700
we know that they've gone green or

00:31:58,530 --> 00:32:01,560
somebody has looked to them and

00:31:59,700 --> 00:32:06,440
overridden them it's just interesting

00:32:01,560 --> 00:32:06,440
okay okay anybody else want a mic

00:32:13,010 --> 00:32:21,080
if I can just respond to that point we

00:32:17,570 --> 00:32:24,049
had so we started we started running

00:32:21,080 --> 00:32:27,440
more we started running more Auto

00:32:24,049 --> 00:32:28,850
packaged tests and things like that for

00:32:27,440 --> 00:32:31,640
the further stuff we pull in from Debian

00:32:28,850 --> 00:32:33,860
and Ubuntu but the problem with that is

00:32:31,640 --> 00:32:35,510
not all test failures they're equal you

00:32:33,860 --> 00:32:38,299
know we have a lot of packages in the

00:32:35,510 --> 00:32:41,390
distribution that some of them if they

00:32:38,299 --> 00:32:43,850
fail it's like well now the product is

00:32:41,390 --> 00:32:45,400
broken and some of them if the tests

00:32:43,850 --> 00:32:48,590
fail it's like well do we even care

00:32:45,400 --> 00:32:51,130
we're using like 1% of this package if

00:32:48,590 --> 00:32:54,350
the test failure is in the other 99%

00:32:51,130 --> 00:32:57,260
it's it's really not not even worth our

00:32:54,350 --> 00:33:01,040
time to identify it let alone fix it so

00:32:57,260 --> 00:33:03,890
we have to be quite we have we have to

00:33:01,040 --> 00:33:07,880
be quite careful about making sure that

00:33:03,890 --> 00:33:10,040
we only test things that we would even

00:33:07,880 --> 00:33:12,169
want to fix and that would that we that

00:33:10,040 --> 00:33:14,600
we don't waste developer time on

00:33:12,169 --> 00:33:16,210
debugging things that don't actually

00:33:14,600 --> 00:33:18,700
have a significant impact yeah I

00:33:16,210 --> 00:33:21,260
personally spent quite a lot of time

00:33:18,700 --> 00:33:24,350
trying to figure out why certain

00:33:21,260 --> 00:33:27,280
packages failed oh there are some build

00:33:24,350 --> 00:33:29,870
dependencies of packages we use but

00:33:27,280 --> 00:33:33,260
basically they are part of SDK image

00:33:29,870 --> 00:33:35,720
only those were basically basically

00:33:33,260 --> 00:33:39,740
packages written in Java and some of

00:33:35,720 --> 00:33:44,690
them would randomly fail because of test

00:33:39,740 --> 00:33:46,820
failures so after spending quite a lot

00:33:44,690 --> 00:33:48,860
of time and figuring out why the tests

00:33:46,820 --> 00:33:50,809
failed and they failed because one of

00:33:48,860 --> 00:33:54,169
the packages started failing because it

00:33:50,809 --> 00:33:57,110
is suddenly 2017 and the package was

00:33:54,169 --> 00:33:59,929
designed to well it was not designed to

00:33:57,110 --> 00:34:02,600
fail in 2017 but they never thought it

00:33:59,929 --> 00:34:05,330
will live that long and some test was

00:34:02,600 --> 00:34:08,179
not expecting the new unix time or

00:34:05,330 --> 00:34:11,080
something like this so uh sometimes

00:34:08,179 --> 00:34:17,679
disabling tests in some leaf packages

00:34:11,080 --> 00:34:20,119
helps in fact yeah because we we don't

00:34:17,679 --> 00:34:22,070
need to test all of the packages which I

00:34:20,119 --> 00:34:25,639
just build dependencies for something we

00:34:22,070 --> 00:34:26,659
don't use all the time if we had enough

00:34:25,639 --> 00:34:28,010
developer time

00:34:26,659 --> 00:34:30,409
to make all the tests for all the

00:34:28,010 --> 00:34:33,559
packages pass it would be amazing yeah

00:34:30,409 --> 00:34:39,429
but we just don't so we have to

00:34:33,559 --> 00:34:39,429
prioritize so anything else

00:34:48,460 --> 00:34:57,980
okay thank you then

00:34:51,079 --> 00:35:05,400
thanks for coming and that's it

00:34:57,980 --> 00:35:05,400

YouTube URL: https://www.youtube.com/watch?v=fpHAowKEmeQ


