Title: Debian Science BoF
Publication date: 2017-12-05
Playlist: DebConf 17
Description: 
	by Andreas Tille

At: DebConf17
https://debconf17.debconf.org/
Room: Rex
Scheduled start: 2017-08-06 15:30:00
Captions: 
	00:00:04,520 --> 00:00:10,940
so welcome to the

00:00:06,440 --> 00:00:14,570
science buff I admit it's better if you

00:00:10,940 --> 00:00:15,210
seen my talk before because I laid out

00:00:14,570 --> 00:00:17,070
some

00:00:15,210 --> 00:00:19,670
I do not want to repeat these problems

00:00:17,070 --> 00:00:22,350
here but I just want to show you

00:00:19,670 --> 00:00:24,750
something what about the Debian science

00:00:22,350 --> 00:00:29,610
team statistics and then would like to

00:00:24,750 --> 00:00:33,330
discuss some problems which exists to my

00:00:29,610 --> 00:00:38,550
perception so who is the Debian science

00:00:33,330 --> 00:00:41,879
team I met these graphs every year I'm

00:00:38,550 --> 00:00:45,150
just updating and we see some some

00:00:41,879 --> 00:00:48,420
people who are somehow leaving the team

00:00:45,150 --> 00:00:52,350
because you have some some missing

00:00:48,420 --> 00:00:54,540
things here so at MC power is so somehow

00:00:52,350 --> 00:00:57,329
leaving the team and Christophe put home

00:00:54,540 --> 00:00:59,730
it's also leaving but others really

00:00:57,329 --> 00:01:04,020
coming so the deviant science team has

00:00:59,730 --> 00:01:07,259
some quite active people and somehow

00:01:04,020 --> 00:01:10,800
somehow view people who are not showing

00:01:07,259 --> 00:01:13,229
off up anymore and the team statistic

00:01:10,800 --> 00:01:16,830
just helps us to detective the people

00:01:13,229 --> 00:01:18,000
who are leaving us this is about the

00:01:16,830 --> 00:01:20,610
discussion this is a little bit

00:01:18,000 --> 00:01:23,159
different but you see is common names

00:01:20,610 --> 00:01:25,409
which obviously and obviously I'm

00:01:23,159 --> 00:01:27,180
chatting too much right I'm just

00:01:25,409 --> 00:01:30,119
chatting and even the science I do not

00:01:27,180 --> 00:01:33,090
do so much because it's I'm talking more

00:01:30,119 --> 00:01:34,860
than a via medium but if there's

00:01:33,090 --> 00:01:37,560
something to discuss the other acidemia

00:01:34,860 --> 00:01:40,020
science my mailing list and they have

00:01:37,560 --> 00:01:42,750
also a developer's mailing list which is

00:01:40,020 --> 00:01:44,369
more related to the package that it's

00:01:42,750 --> 00:01:45,630
science this is more for general

00:01:44,369 --> 00:01:50,250
discussion and this is about the

00:01:45,630 --> 00:01:52,229
packages people like real car Nussbaum

00:01:50,250 --> 00:01:54,740
and Matias clothes are not members of

00:01:52,229 --> 00:01:57,840
the science teams they are just

00:01:54,740 --> 00:02:00,240
reminding us about parks nice that you

00:01:57,840 --> 00:02:04,920
are here what else guess you will tell

00:02:00,240 --> 00:02:09,479
something we have some pack hunters it's

00:02:04,920 --> 00:02:12,750
the information is drawn from the u DD

00:02:09,479 --> 00:02:15,750
this is about the people who are fixing

00:02:12,750 --> 00:02:19,079
bugs in Debian science packages it would

00:02:15,750 --> 00:02:22,950
be nice if we have would have some more

00:02:19,079 --> 00:02:25,360
of them have seen this Adam C power is

00:02:22,950 --> 00:02:27,460
leaving the team somehow

00:02:25,360 --> 00:02:30,220
and he has filed a lot of bucks maybe

00:02:27,460 --> 00:02:34,780
two ounce packages and has closed them

00:02:30,220 --> 00:02:38,290
and we have the committers to the world

00:02:34,780 --> 00:02:43,770
control system which is also showing

00:02:38,290 --> 00:02:46,690
that we have quite a large team if the

00:02:43,770 --> 00:02:48,940
person who has a ten list commits has

00:02:46,690 --> 00:02:51,910
more than thousand commits so you can

00:02:48,940 --> 00:02:53,530
assume we have 50 or more people who are

00:02:51,910 --> 00:02:55,630
working in the Debian science team

00:02:53,530 --> 00:03:01,780
because we have a lot of packages about

00:02:55,630 --> 00:03:05,110
1,000 packages and yeah my definition of

00:03:01,780 --> 00:03:06,700
a team is its you wake up in the morning

00:03:05,110 --> 00:03:09,100
and realize that somebody else has done

00:03:06,700 --> 00:03:11,110
has soft your problem from yesterday

00:03:09,100 --> 00:03:12,880
this is my experience from the Debian

00:03:11,110 --> 00:03:15,670
made team I'm really happy that I'm in

00:03:12,880 --> 00:03:17,380
the team and I have thrown problems into

00:03:15,670 --> 00:03:19,810
the mailing list and really after waking

00:03:17,380 --> 00:03:21,160
up this way all soft I wished it would

00:03:19,810 --> 00:03:24,670
be the case in the day beyond science

00:03:21,160 --> 00:03:28,900
team as well but my theory why it

00:03:24,670 --> 00:03:31,230
doesn't work that good is that in Debian

00:03:28,900 --> 00:03:33,820
science is quite a diversity of topics

00:03:31,230 --> 00:03:38,680
in Debian made we are closed over the

00:03:33,820 --> 00:03:45,400
topics and so my proposal and in my talk

00:03:38,680 --> 00:03:47,860
was to care for well close our topics

00:03:45,400 --> 00:03:51,010
inside the blends and split off some

00:03:47,860 --> 00:03:52,660
upstream up some off springs from Debian

00:03:51,010 --> 00:03:59,560
science to different things like

00:03:52,660 --> 00:04:01,510
devianart also and this is quite for me

00:03:59,560 --> 00:04:04,030
this graph is the most important one if

00:04:01,510 --> 00:04:11,019
I want to evaluate a team because you

00:04:04,030 --> 00:04:13,450
see here we have a lot of people or this

00:04:11,019 --> 00:04:16,109
this number of packages are touched only

00:04:13,450 --> 00:04:20,019
by one person so the majority of package

00:04:16,109 --> 00:04:23,919
packages is done by one person that

00:04:20,019 --> 00:04:25,680
means well we have it give a common team

00:04:23,919 --> 00:04:28,270
mailing list we have a common repository

00:04:25,680 --> 00:04:30,130
but we have a single maintain a

00:04:28,270 --> 00:04:33,550
relationship to the packages which we

00:04:30,130 --> 00:04:37,210
really want to avoid so only a few

00:04:33,550 --> 00:04:38,920
packages are maintained by two people on

00:04:37,210 --> 00:04:41,890
this this is crying too

00:04:38,920 --> 00:04:43,840
relation and in my talk in my other talk

00:04:41,890 --> 00:04:45,850
I've shown you for the Debian pro team

00:04:43,840 --> 00:04:47,800
they have very few packages on

00:04:45,850 --> 00:04:51,700
maintained by somebody else and then it

00:04:47,800 --> 00:04:53,440
goes up and you have a package three to

00:04:51,700 --> 00:04:55,650
four committees and this is the state I

00:04:53,440 --> 00:04:59,110
really want to reach for Debian science

00:04:55,650 --> 00:05:02,730
but to repeat what I said before I think

00:04:59,110 --> 00:05:05,920
we can only reach if we focus on more on

00:05:02,730 --> 00:05:11,470
smaller topics inside science and create

00:05:05,920 --> 00:05:13,210
more blend sort of out of it well for

00:05:11,470 --> 00:05:15,670
some history we had this competing

00:05:13,210 --> 00:05:18,820
packaging teams it is now fully merged

00:05:15,670 --> 00:05:21,430
this piggy piggy ji sky comm didn't

00:05:18,820 --> 00:05:22,930
exist anymore and the maintained as I

00:05:21,430 --> 00:05:27,160
can tell contributing to the event

00:05:22,930 --> 00:05:29,530
science and I have the usual above ends

00:05:27,160 --> 00:05:33,820
with a link to the wiki page the copy

00:05:29,530 --> 00:05:40,060
doesn't work now oh it works with VC

00:05:33,820 --> 00:05:43,030
string so we can do some notes it would

00:05:40,060 --> 00:05:46,990
be great if somebody would do notes

00:05:43,030 --> 00:05:51,280
about this if we have some some ideas

00:05:46,990 --> 00:05:54,580
how we could work together even better I

00:05:51,280 --> 00:05:58,510
have set up this wiki page this is

00:05:54,580 --> 00:06:02,140
always the same for every debconf what

00:05:58,510 --> 00:06:04,750
tasks we should work on this is the

00:06:02,140 --> 00:06:07,240
result of some previous copied

00:06:04,750 --> 00:06:15,160
discussions or add some copy protocols

00:06:07,240 --> 00:06:17,020
and I took over into the wiki yeah what

00:06:15,160 --> 00:06:19,720
do we want to do now any suggestions

00:06:17,020 --> 00:06:22,540
anybody wants to make a suggestion

00:06:19,720 --> 00:06:28,080
what's the most urgent problem what

00:06:22,540 --> 00:06:33,100
could be done even better if not I have

00:06:28,080 --> 00:06:35,560
spoiled in more questions but hope all

00:06:33,100 --> 00:06:43,000
in this room familiar with TV on science

00:06:35,560 --> 00:06:45,090
and see new faces here about you can't I

00:06:43,000 --> 00:06:45,090
don't

00:06:48,860 --> 00:06:58,890
okay anybody else do we have general

00:06:53,010 --> 00:07:01,850
questions well could can be can we take

00:06:58,890 --> 00:07:01,850
your mic so

00:07:13,420 --> 00:07:16,629
[Music]

00:07:19,660 --> 00:07:25,400
I doesn't know where there beyond

00:07:22,580 --> 00:07:31,370
science before it is a Linux

00:07:25,400 --> 00:07:34,340
distribution no okay okay this is well

00:07:31,370 --> 00:07:37,550
funny that in my talk before which you

00:07:34,340 --> 00:07:41,120
have not seen I have one slide and this

00:07:37,550 --> 00:07:44,570
slide says Debian science is integrated

00:07:41,120 --> 00:07:46,880
into into Debian it's no fork and

00:07:44,570 --> 00:07:49,220
usually after my talks

00:07:46,880 --> 00:07:50,630
I will ask why are you doing a different

00:07:49,220 --> 00:07:52,760
distribution and now it comes a little

00:07:50,630 --> 00:07:55,820
bit delayed two or three hours later so

00:07:52,760 --> 00:07:58,610
funny funny or not no it's just a team

00:07:55,820 --> 00:08:01,430
inside a beyond team of scientists or

00:07:58,610 --> 00:08:03,940
packages of scientific software which is

00:08:01,430 --> 00:08:07,880
somehow organized in the mailing list in

00:08:03,940 --> 00:08:11,240
using some common repository and trying

00:08:07,880 --> 00:08:14,060
to integrate scientific software as best

00:08:11,240 --> 00:08:18,440
as possible inside Arian this is Debian

00:08:14,060 --> 00:08:24,650
sign with two sentences and you can

00:08:18,440 --> 00:08:31,130
contribute if you are scientist what

00:08:24,650 --> 00:08:36,010
that good any other questions who's the

00:08:31,130 --> 00:08:36,010
scientists in here hands up

00:08:39,770 --> 00:08:42,490
okay

00:08:43,500 --> 00:08:52,650
well actually what I consider a one of

00:08:47,160 --> 00:08:56,180
an urgent problem is scientists rely on

00:08:52,650 --> 00:08:58,920
some publications on certain versions of

00:08:56,180 --> 00:09:01,170
programs which we can't guarantee with

00:08:58,920 --> 00:09:04,200
our packaging system because we update

00:09:01,170 --> 00:09:06,420
packages and then it's a new version or

00:09:04,200 --> 00:09:09,750
a version which was not used for the

00:09:06,420 --> 00:09:15,800
publication what is your take on this in

00:09:09,750 --> 00:09:19,620
your experience well we have snapshots

00:09:15,800 --> 00:09:23,310
yes we have snapshots but one user is

00:09:19,620 --> 00:09:26,820
using the current version from stable

00:09:23,310 --> 00:09:29,130
and one other needs the snapshots their

00:09:26,820 --> 00:09:32,160
docker images that's the obvious

00:09:29,130 --> 00:09:35,490
solution yeah actually there's a there's

00:09:32,160 --> 00:09:40,370
a science-based container thing what's

00:09:35,490 --> 00:09:40,370
the name again singularity right hmm

00:09:41,480 --> 00:09:47,220
please always to the mic because we are

00:09:44,460 --> 00:09:49,500
on video recording people inside will

00:09:47,220 --> 00:09:51,840
understand you but not outside most

00:09:49,500 --> 00:10:01,410
clusters I don't think there are any

00:09:51,840 --> 00:10:05,040
known clusters that so

00:10:01,410 --> 00:10:07,290
if docker or some other container

00:10:05,040 --> 00:10:11,520
technique is the answer to the question

00:10:07,290 --> 00:10:14,850
what can we do to help users to easily

00:10:11,520 --> 00:10:17,990
create this kind of containers who do

00:10:14,850 --> 00:10:21,110
you think it should make some sense to

00:10:17,990 --> 00:10:24,830
craft some scripts which drawers

00:10:21,110 --> 00:10:27,810
corrects versions from snapshots and

00:10:24,830 --> 00:10:33,050
created docker image ads because oh is

00:10:27,810 --> 00:10:33,050
it should users just do it manually

00:10:34,710 --> 00:10:39,690
so singularity when you make a debian

00:10:37,260 --> 00:10:42,210
container you can you put them the

00:10:39,690 --> 00:10:45,839
mirror URL and so instead of just

00:10:42,210 --> 00:10:49,050
putting you know your FTP or your HDTV

00:10:45,839 --> 00:10:51,720
reader Debian org you just put snapshot

00:10:49,050 --> 00:10:54,180
Debian org and then that date and it

00:10:51,720 --> 00:10:56,700
will build your container with whatever

00:10:54,180 --> 00:10:57,930
was in Debian at that date and that will

00:10:56,700 --> 00:11:01,230
be a mirror from where you're at real

00:10:57,930 --> 00:11:04,040
all your packages so just to explain it

00:11:01,230 --> 00:11:07,560
to me which I might add a little bit

00:11:04,040 --> 00:11:14,720
slow with sinking so a user comes and

00:11:07,560 --> 00:11:19,010
says to me I need PW a version 2.1 and

00:11:14,720 --> 00:11:22,140
create the docker image for me and what

00:11:19,010 --> 00:11:27,510
do I need to do to provide cu the with

00:11:22,140 --> 00:11:30,029
this version yeah but what I would I

00:11:27,510 --> 00:11:35,279
would like to support this user what

00:11:30,029 --> 00:11:36,870
what the user needs to do or what's so

00:11:35,279 --> 00:11:39,500
first to make clear we're not talking

00:11:36,870 --> 00:11:42,420
about docker just because docker is not

00:11:39,500 --> 00:11:46,200
reused on HPC systems but so for

00:11:42,420 --> 00:11:48,180
singularity I think it's easier if you

00:11:46,200 --> 00:11:50,400
come from the point of view as I'm

00:11:48,180 --> 00:11:53,250
starting a project today and I want to

00:11:50,400 --> 00:11:55,770
you I want to keep whatever I'm using

00:11:53,250 --> 00:11:58,230
today for the entire duration of the

00:11:55,770 --> 00:12:00,990
project and so for that situation

00:11:58,230 --> 00:12:02,730
snapshots is easy to implement but then

00:12:00,990 --> 00:12:06,330
if you're looking for a specific version

00:12:02,730 --> 00:12:07,890
you would have to find you would have to

00:12:06,330 --> 00:12:09,779
find out when that version was present

00:12:07,890 --> 00:12:11,520
in the repositories this is what what I

00:12:09,779 --> 00:12:13,890
mean the user can do it as a part is you

00:12:11,520 --> 00:12:16,080
don't need to know snapshots you need to

00:12:13,890 --> 00:12:19,260
know how to create the docker image you

00:12:16,080 --> 00:12:23,339
need to know whatever and I were to like

00:12:19,260 --> 00:12:27,360
would like to make it not brain that

00:12:23,339 --> 00:12:31,800
easy but at least easy to say please

00:12:27,360 --> 00:12:34,140
call a program which the arguments are

00:12:31,800 --> 00:12:36,570
the name of the package the version of

00:12:34,140 --> 00:12:39,120
the package and presenter and then the

00:12:36,570 --> 00:12:42,570
docker image will be created for you

00:12:39,120 --> 00:12:45,180
this is something this is I'm not using

00:12:42,570 --> 00:12:46,060
docker or any other container techniques

00:12:45,180 --> 00:12:49,000
but it's

00:12:46,060 --> 00:12:58,390
you think it's feasible to do and it's

00:12:49,000 --> 00:13:04,510
sensible to do any other opinions about

00:12:58,390 --> 00:13:07,030
this container techniques I in wofford

00:13:04,510 --> 00:13:09,100
single airship packaging are you

00:13:07,030 --> 00:13:19,870
involved with singularity packaging or

00:13:09,100 --> 00:13:22,300
something okay so there's also flat back

00:13:19,870 --> 00:13:24,280
and snappy packages which is kind of

00:13:22,300 --> 00:13:26,740
useful if you want to drop a specific

00:13:24,280 --> 00:13:28,450
version of something on a machine but I

00:13:26,740 --> 00:13:30,640
haven't looked into either yet myself

00:13:28,450 --> 00:13:32,470
but I've been meaning to because they're

00:13:30,640 --> 00:13:39,520
very lightweight they're not as big as a

00:13:32,470 --> 00:13:41,430
containing the package it's almost like

00:13:39,520 --> 00:13:44,500
they've been packaged in some way but

00:13:41,430 --> 00:13:46,720
hmm yeah there's talks about that

00:13:44,500 --> 00:13:48,520
Angele but the point is that I mean

00:13:46,720 --> 00:13:52,030
that's good for desktop but it's really

00:13:48,520 --> 00:13:54,520
not useful probably for HPC cluster hmm

00:13:52,030 --> 00:13:57,250
yeah I think well the flat pack is it's

00:13:54,520 --> 00:14:00,460
just another way to create kind of

00:13:57,250 --> 00:14:03,490
virtual machine ish docker container

00:14:00,460 --> 00:14:06,070
with things it's I don't kill much so

00:14:03,490 --> 00:14:08,800
much about the technique below but it is

00:14:06,070 --> 00:14:12,690
possible to provide the user which is an

00:14:08,800 --> 00:14:17,770
easy way to create create this stuff I

00:14:12,690 --> 00:14:19,690
work I work with topic and actually it

00:14:17,770 --> 00:14:23,860
is relatively easy after you've worked

00:14:19,690 --> 00:14:25,720
around a few well differences in and how

00:14:23,860 --> 00:14:27,310
is relatively easy to create one of

00:14:25,720 --> 00:14:29,650
these bundles in order to run your for

00:14:27,310 --> 00:14:32,290
you for me at the moment and yeah I

00:14:29,650 --> 00:14:34,270
think it's it's super simple yet for for

00:14:32,290 --> 00:14:36,550
like especially for scientist it's super

00:14:34,270 --> 00:14:38,470
hard because it involves knowing how to

00:14:36,550 --> 00:14:42,040
how to compile applications and how to

00:14:38,470 --> 00:14:43,870
make absolutely like how to require to

00:14:42,040 --> 00:14:46,540
know how to how the system works and how

00:14:43,870 --> 00:14:48,430
you can how you can create this bundle

00:14:46,540 --> 00:14:50,710
which is not something Sciences which

00:14:48,430 --> 00:14:54,460
actually like to deal with and want to

00:14:50,710 --> 00:14:56,560
learn but I think is actually in this

00:14:54,460 --> 00:14:57,690
case a good idea to look in this

00:14:56,560 --> 00:15:00,870
direction

00:14:57,690 --> 00:15:03,000
like specifically flat-pack in itself is

00:15:00,870 --> 00:15:04,500
at the moment only for desktop

00:15:03,000 --> 00:15:06,360
applications and it doesn't really

00:15:04,500 --> 00:15:09,990
handle the case of console applications

00:15:06,360 --> 00:15:11,820
well and most at least most applications

00:15:09,990 --> 00:15:15,030
I deal with in the scientific field our

00:15:11,820 --> 00:15:17,250
console apps I'm thinking about actually

00:15:15,030 --> 00:15:20,130
making some changes to flat pack and

00:15:17,250 --> 00:15:21,600
submitting a few a few pull requests to

00:15:20,130 --> 00:15:25,440
make console applications work a bit

00:15:21,600 --> 00:15:28,770
better that could help in the sense of

00:15:25,440 --> 00:15:32,990
snappy creating snaps is actually really

00:15:28,770 --> 00:15:35,910
easy because you can base on existing

00:15:32,990 --> 00:15:37,800
deb packages but snappy has another

00:15:35,910 --> 00:15:40,110
problem that is very tied to canonical

00:15:37,800 --> 00:15:41,790
and its canonical stores so I'm not sure

00:15:40,110 --> 00:15:45,150
how well this would work for debian in

00:15:41,790 --> 00:15:47,340
this case at this current time so I do

00:15:45,150 --> 00:15:49,590
think long term those bundling solutions

00:15:47,340 --> 00:15:52,140
any one of them would be great for this

00:15:49,590 --> 00:15:54,960
specific problem in the short term we

00:15:52,140 --> 00:15:56,790
might need to need to work on them to

00:15:54,960 --> 00:15:58,650
get them to a point where they are as

00:15:56,790 --> 00:16:01,790
useful for scientific software as they

00:15:58,650 --> 00:16:01,790
currently are for desktop applications

00:16:02,600 --> 00:16:09,780
well as I try to expand I do not mind

00:16:06,840 --> 00:16:13,050
about it is conflict fed pack with its

00:16:09,780 --> 00:16:15,890
advantage and disadvantages or other

00:16:13,050 --> 00:16:18,510
container techniques for me it's it's

00:16:15,890 --> 00:16:20,070
important to say well we know what

00:16:18,510 --> 00:16:22,350
scientists will do if they need to

00:16:20,070 --> 00:16:25,740
specific versions they download from

00:16:22,350 --> 00:16:27,300
upstream compiled themselves put it in

00:16:25,740 --> 00:16:31,020
their home directory and they do it

00:16:27,300 --> 00:16:34,920
wrong this is and I want to prevent this

00:16:31,020 --> 00:16:38,790
that word wrong thingy because I've seen

00:16:34,920 --> 00:16:43,110
it and it's just doesn't work this way

00:16:38,790 --> 00:16:46,350
and I try to make sure we can provide

00:16:43,110 --> 00:16:49,560
the users with something which is less

00:16:46,350 --> 00:16:51,570
error prone than the this process what

00:16:49,560 --> 00:16:53,760
is simple change route Sushruta

00:16:51,570 --> 00:16:57,120
environment yeah whatever change routes

00:16:53,760 --> 00:16:59,850
flat-pack doko it's all the same they

00:16:57,120 --> 00:17:04,590
read some kind of virtualization and put

00:16:59,850 --> 00:17:06,840
but how can we do it easy to well you

00:17:04,590 --> 00:17:10,199
know how to create a change field I know

00:17:06,840 --> 00:17:14,249
it but how can we do

00:17:10,199 --> 00:17:18,509
say or create me this technique with

00:17:14,249 --> 00:17:21,779
package X version Epsilon and do it for

00:17:18,509 --> 00:17:25,079
me and run question is what is easy

00:17:21,779 --> 00:17:27,899
actually what level of easy are we

00:17:25,079 --> 00:17:31,679
aiming for is it like something like for

00:17:27,899 --> 00:17:33,899
pythons were sure and usually easy my

00:17:31,679 --> 00:17:39,330
definition of easy is my mother can do

00:17:33,899 --> 00:17:42,289
it okay there are different definitions

00:17:39,330 --> 00:17:45,629
of easy but yeah something like this I

00:17:42,289 --> 00:17:49,889
always explain my mother on the phone

00:17:45,629 --> 00:17:52,590
how to do it this is easy I think we

00:17:49,889 --> 00:17:55,230
could craft a script to make creating

00:17:52,590 --> 00:17:56,970
schrutes easy for scientific stuff or to

00:17:55,230 --> 00:17:59,789
create or images or to create flap yeah

00:17:56,970 --> 00:18:01,980
anything but yeah we would need to

00:17:59,789 --> 00:18:03,899
investigate which system works best and

00:18:01,980 --> 00:18:05,759
what the advantages and disadvantages

00:18:03,899 --> 00:18:08,879
are and then test whether scientist was

00:18:05,759 --> 00:18:13,619
actually used this stuff so yeah lots of

00:18:08,879 --> 00:18:16,230
exploration to be done I guess mmm hope

00:18:13,619 --> 00:18:18,659
but I also saw a lot these days there

00:18:16,230 --> 00:18:22,129
upstream or at least from the ones I

00:18:18,659 --> 00:18:24,779
packages they use condom package --is

00:18:22,129 --> 00:18:26,669
kano's also some technique I'm not so

00:18:24,779 --> 00:18:29,669
deep maybe if if you can explain a

00:18:26,669 --> 00:18:33,539
little bit but it's some kind of

00:18:29,669 --> 00:18:35,700
alternative to to maintain parallel

00:18:33,539 --> 00:18:38,759
packing the packaging system in your

00:18:35,700 --> 00:18:45,840
home directory this correctly also maybe

00:18:38,759 --> 00:18:48,960
you could talk in the phone I'm not an

00:18:45,840 --> 00:18:50,309
expert on Kanta but I know it's like you

00:18:48,960 --> 00:18:52,919
can select the prefix and you can

00:18:50,309 --> 00:18:54,090
install into a into a specific prefix so

00:18:52,919 --> 00:18:56,399
you can be your home directory you can

00:18:54,090 --> 00:18:57,899
also do it system-wide or you can set up

00:18:56,399 --> 00:19:00,919
a new environment and have a set of

00:18:57,899 --> 00:19:00,919
packages installed there

00:19:01,789 --> 00:19:06,799
that's it's it's a new package manager'

00:19:03,919 --> 00:19:09,139
and it's a new packaging format and it's

00:19:06,799 --> 00:19:13,279
supposed to be operating system

00:19:09,139 --> 00:19:15,710
independent hmm so I proposed Konami

00:19:13,279 --> 00:19:19,940
there is some effort to package condor

00:19:15,710 --> 00:19:22,779
for positive you and me team but we it's

00:19:19,940 --> 00:19:25,519
kind of some work because some

00:19:22,779 --> 00:19:28,759
dependencies I think constant did some

00:19:25,519 --> 00:19:31,190
research about 50 Python modules a

00:19:28,759 --> 00:19:33,019
package also but it's it's doable in

00:19:31,190 --> 00:19:35,869
principle and if condom would be the

00:19:33,019 --> 00:19:38,149
answer for for biologists I would try to

00:19:35,869 --> 00:19:39,679
implement it all right well now the

00:19:38,149 --> 00:19:44,049
point is that the upstream would have

00:19:39,679 --> 00:19:46,879
their corner recipes it kind of like

00:19:44,049 --> 00:19:47,809
it's right steps Debian yes that that's

00:19:46,879 --> 00:19:49,519
that's right

00:19:47,809 --> 00:19:52,489
it's the same with singularity I guess

00:19:49,519 --> 00:19:56,599
yeah single Larry would be a solution

00:19:52,489 --> 00:19:59,119
for somebody to like mail container to a

00:19:56,599 --> 00:20:02,299
research partner and they can just run

00:19:59,119 --> 00:20:03,919
mmm thing the same way that the guy did

00:20:02,299 --> 00:20:09,320
on their HPC cluster and had

00:20:03,919 --> 00:20:11,419
reproducible results from the thing yeah

00:20:09,320 --> 00:20:17,419
but we needed single Erica's in Debian

00:20:11,419 --> 00:20:20,450
and yeah I don't think singularity

00:20:17,419 --> 00:20:22,159
sidesteps daily and actually it it

00:20:20,450 --> 00:20:25,309
expends it because you can if someone

00:20:22,159 --> 00:20:26,690
has a non debian cluster you have your

00:20:25,309 --> 00:20:27,950
you can actually create a debian

00:20:26,690 --> 00:20:29,989
container and take advantage of the

00:20:27,950 --> 00:20:32,179
Debian packages that are there so if

00:20:29,989 --> 00:20:34,309
somebody who's running like like how we

00:20:32,179 --> 00:20:36,169
do at our site we have a Red Hat cluster

00:20:34,309 --> 00:20:38,239
but people are making a bunch of

00:20:36,169 --> 00:20:39,710
containers they can they can take

00:20:38,239 --> 00:20:41,809
advantage of the Debian packages so

00:20:39,710 --> 00:20:43,609
otherwise that packages we make for

00:20:41,809 --> 00:20:45,129
Debian only get installed on Debian

00:20:43,609 --> 00:20:48,340
systems where people have root access

00:20:45,129 --> 00:20:51,340
but here you can use them elsewhere and

00:20:48,340 --> 00:20:54,289
and the nice thing with singularity is

00:20:51,340 --> 00:20:56,440
you make your definition file you just

00:20:54,289 --> 00:21:00,859
install the packages you want you have a

00:20:56,440 --> 00:21:04,239
environment setup that is that you you

00:21:00,859 --> 00:21:04,239
preserve just for your project

00:21:06,029 --> 00:21:10,590
that's

00:21:08,700 --> 00:21:12,570
one what an interesting thing about

00:21:10,590 --> 00:21:17,970
singularities so I actually listen to a

00:21:12,570 --> 00:21:19,980
talk by I don't remember the name and

00:21:17,970 --> 00:21:23,759
was it the German music group meeting

00:21:19,980 --> 00:21:25,799
and I'm shot and he's a he was a

00:21:23,759 --> 00:21:27,690
old-time x11 developer and he's not

00:21:25,799 --> 00:21:30,690
working for the HPC division and Sousa

00:21:27,690 --> 00:21:33,649
and he's seem package singularity and he

00:21:30,690 --> 00:21:36,389
said that he a lot of trouble with the

00:21:33,649 --> 00:21:40,409
security team because it's set user ID

00:21:36,389 --> 00:21:42,419
and so they don't allow it but so that's

00:21:40,409 --> 00:21:44,159
an interesting point that in Debian just

00:21:42,419 --> 00:21:46,830
got through FTP master and everybody's

00:21:44,159 --> 00:21:49,649
fine with it but there's no no that's a

00:21:46,830 --> 00:21:53,100
huge attack surface we we don't allow it

00:21:49,649 --> 00:21:55,440
just as a command it's nothing

00:21:53,100 --> 00:21:58,169
comparable to FTP mother for users also

00:21:55,440 --> 00:22:01,109
can just upload or sorry again

00:21:58,169 --> 00:22:03,659
there is no ftp master thingy photos so

00:22:01,109 --> 00:22:06,239
you can upload and knowing the Sousa

00:22:03,659 --> 00:22:08,909
security team blacklist or like refused

00:22:06,239 --> 00:22:12,149
to let it through because it's set user

00:22:08,909 --> 00:22:14,100
ID okay okay so that's a problem with

00:22:12,149 --> 00:22:17,429
the same thing you said yeah you need a

00:22:14,100 --> 00:22:18,720
docker route run daemon for docker that

00:22:17,429 --> 00:22:23,389
you don't need it for singularity but

00:22:18,720 --> 00:22:23,389
singularity itself is that user ID okay

00:22:24,470 --> 00:22:27,929
well it's the same thing with change

00:22:26,309 --> 00:22:29,429
with right you mean you need something

00:22:27,929 --> 00:22:33,470
to actually get in there at least on

00:22:29,429 --> 00:22:36,299
Linux you need to be route or some

00:22:33,470 --> 00:22:38,549
similar some capability to get into

00:22:36,299 --> 00:22:45,029
there yes change route can help with

00:22:38,549 --> 00:22:48,419
that but still singularity is site user

00:22:45,029 --> 00:22:53,070
ID but it's only for the mounting and

00:22:48,419 --> 00:22:55,590
creating images and for for actually to

00:22:53,070 --> 00:22:57,269
create the image file but to actually

00:22:55,590 --> 00:22:59,359
bootstrap the image you need to be route

00:22:57,269 --> 00:23:01,769
and so the idea is that you have a

00:22:59,359 --> 00:23:02,999
workstation where you are rude and you

00:23:01,769 --> 00:23:04,200
do that you build your container then

00:23:02,999 --> 00:23:08,789
you move the container over and you

00:23:04,200 --> 00:23:11,929
don't run it so that basically is the

00:23:08,789 --> 00:23:11,929
author being careful

00:23:13,989 --> 00:23:21,049
as it still say you idea but it's some

00:23:18,700 --> 00:23:23,029
right but I think it's only set you idea

00:23:21,049 --> 00:23:24,590
to be able to mount the foul system but

00:23:23,029 --> 00:23:26,269
it's so that basically the developer is

00:23:24,590 --> 00:23:28,429
being careful about minimizing what gets

00:23:26,269 --> 00:23:31,820
done with the escalate privileges but

00:23:28,429 --> 00:23:33,710
still young it's well maybe Zeus is

00:23:31,820 --> 00:23:35,599
working on I'm minimizing and using

00:23:33,710 --> 00:23:37,929
capabilities or something and would be

00:23:35,599 --> 00:23:37,929
useful

00:23:41,260 --> 00:23:49,070
what about two and I don't think that we

00:23:44,809 --> 00:23:53,050
can continue or we should continue on

00:23:49,070 --> 00:23:55,400
this topic what about test Suites we

00:23:53,050 --> 00:23:57,860
just reported about the Debian made

00:23:55,400 --> 00:24:03,190
effort to put test suite is there

00:23:57,860 --> 00:24:05,770
anybody who would volunteer to to mentor

00:24:03,190 --> 00:24:09,559
outreach fee Google some of quotes

00:24:05,770 --> 00:24:12,110
student who run to create tests sweets

00:24:09,559 --> 00:24:13,850
for the deviant science packages this

00:24:12,110 --> 00:24:17,660
would be also interesting it's for me

00:24:13,850 --> 00:24:18,500
it's fun to mentor somebody who was

00:24:17,660 --> 00:24:20,750
doing this

00:24:18,500 --> 00:24:24,770
I mean it's it's a little bit generic

00:24:20,750 --> 00:24:28,520
with the deviant science so you maybe

00:24:24,770 --> 00:24:32,690
see what do you mean with test you well

00:24:28,520 --> 00:24:35,330
as notch is writing all topic HHS for

00:24:32,690 --> 00:24:38,750
all the deviant made packages all she

00:24:35,330 --> 00:24:41,570
will manage sorted by popcorn so we get

00:24:38,750 --> 00:24:43,850
the most used packages

00:24:41,570 --> 00:24:45,860
equipped with Auto bigotry test and I

00:24:43,850 --> 00:24:48,020
think it would is really valuable and

00:24:45,860 --> 00:24:50,150
you should have it for for other

00:24:48,020 --> 00:24:52,220
sciences what is the scope is the scope

00:24:50,150 --> 00:24:54,920
that the program or maybe you just talk

00:24:52,220 --> 00:24:56,929
later about it but is it the scope that

00:24:54,920 --> 00:24:59,330
the program just runs correctly or are

00:24:56,929 --> 00:25:03,679
you actually at least it is a minimum

00:24:59,330 --> 00:25:05,120
requirement yes sure okay and if there's

00:25:03,679 --> 00:25:05,870
an upstream test you do you integrate

00:25:05,120 --> 00:25:08,510
that yes

00:25:05,870 --> 00:25:10,580
it's yes but if there's not yeah well

00:25:08,510 --> 00:25:12,920
well the thing is you need if she has an

00:25:10,580 --> 00:25:15,470
upstream main test repeat it says

00:25:12,920 --> 00:25:17,420
absolute test which we use it as out to

00:25:15,470 --> 00:25:20,780
bigotry test if there is no upstream

00:25:17,420 --> 00:25:23,990
test suite roger has written one okay

00:25:20,780 --> 00:25:25,970
I'm actually so I started doing it for

00:25:23,990 --> 00:25:27,440
other packages that I maintain but it's

00:25:25,970 --> 00:25:30,980
it's actually one of the two do's I

00:25:27,440 --> 00:25:32,750
forgot to Devi cam as yeah we should I

00:25:30,980 --> 00:25:36,280
mean we run all the tests you during

00:25:32,750 --> 00:25:38,929
baggage bill yeah but it's certainly I

00:25:36,280 --> 00:25:41,690
think very useful for researchers to

00:25:38,929 --> 00:25:43,850
know that actually the packages as they

00:25:41,690 --> 00:25:46,880
are installed working correctly and

00:25:43,850 --> 00:25:48,980
that's I'm a believer or converted now

00:25:46,880 --> 00:25:51,440
and I just didn't have the time yeah

00:25:48,980 --> 00:25:53,650
sure you don't have the time the same

00:25:51,440 --> 00:25:57,340
for us and so try to

00:25:53,650 --> 00:26:01,150
involve interns because it is fun

00:25:57,340 --> 00:26:04,180
internets in optimal tasks because you

00:26:01,150 --> 00:26:07,600
work down a list of packages and you can

00:26:04,180 --> 00:26:10,270
if you in terms trip ends you just stop

00:26:07,600 --> 00:26:12,820
with it and then it's it's some amount

00:26:10,270 --> 00:26:17,050
of work it's done this is quite a good

00:26:12,820 --> 00:26:19,809
task very fit for this job and what I

00:26:17,050 --> 00:26:22,120
wanted to say yeah well in in Debian

00:26:19,809 --> 00:26:25,380
mate we are doing the auto bigotry test

00:26:22,120 --> 00:26:30,520
it that way that we also provide a

00:26:25,380 --> 00:26:33,040
script in user sharedoc package name run

00:26:30,520 --> 00:26:35,650
tests also something like this and put

00:26:33,040 --> 00:26:37,450
also a readme to test how the user who

00:26:35,650 --> 00:26:39,340
insults a package can run the suite as

00:26:37,450 --> 00:26:43,929
well as Wendy Haven as an example how to

00:26:39,340 --> 00:26:45,910
run the program I just don't I D about

00:26:43,929 --> 00:26:48,220
how this idea of running out a package

00:26:45,910 --> 00:26:51,850
test would play in with the problem of

00:26:48,220 --> 00:26:54,940
pinning versions so just a couple of

00:26:51,850 --> 00:26:58,120
days ago I had a problem where a test

00:26:54,940 --> 00:26:59,679
suit would break because bwa get updated

00:26:58,120 --> 00:27:01,660
to a newer version right because the

00:26:59,679 --> 00:27:04,410
upstream author of the package that

00:27:01,660 --> 00:27:08,230
broke the tests decided to include

00:27:04,410 --> 00:27:11,370
reference data for his own programs

00:27:08,230 --> 00:27:16,390
output in into the test right so

00:27:11,370 --> 00:27:18,880
couldn't that be an approach to think

00:27:16,390 --> 00:27:23,200
about to write out a package tests that

00:27:18,880 --> 00:27:25,990
do this check for changes in the output

00:27:23,200 --> 00:27:28,510
and then give upstream some kind of

00:27:25,990 --> 00:27:30,550
indication when something's going to

00:27:28,510 --> 00:27:35,080
break so they can adjust their own code

00:27:30,550 --> 00:27:38,470
for so you might you mean include if if

00:27:35,080 --> 00:27:41,710
fails and mail it does need to be

00:27:38,470 --> 00:27:45,270
automated in just you need to know when

00:27:41,710 --> 00:27:49,090
an upgrade in a dependency for example

00:27:45,270 --> 00:27:51,250
would would break the results or change

00:27:49,090 --> 00:27:53,890
the results of of Asante a package yeah

00:27:51,250 --> 00:27:56,860
sure there's a sense of just two to

00:27:53,890 --> 00:27:58,720
notice when the I mean if if that would

00:27:56,860 --> 00:28:00,250
be a viable option to to just let

00:27:58,720 --> 00:28:03,190
upstream know and work with them and

00:28:00,250 --> 00:28:04,800
maybe even provide some kind of usually

00:28:03,190 --> 00:28:07,740
if it test suite

00:28:04,800 --> 00:28:10,680
brakes and you get a back report and you

00:28:07,740 --> 00:28:13,260
follow the back end to to upstream so

00:28:10,680 --> 00:28:16,560
I'm not sure if I understand the problem

00:28:13,260 --> 00:28:18,900
correctly my day would be make sure that

00:28:16,560 --> 00:28:21,330
auto package tests test if the results

00:28:18,900 --> 00:28:23,190
change and if the results change because

00:28:21,330 --> 00:28:26,220
the auto package that's also get run and

00:28:23,190 --> 00:28:28,890
if a dependency is updated then then you

00:28:26,220 --> 00:28:32,610
can find out what dependency broke the

00:28:28,890 --> 00:28:34,820
results or change the results can you

00:28:32,610 --> 00:28:34,820
please

00:28:35,180 --> 00:28:41,730
we have several mic so please to make

00:28:39,180 --> 00:28:43,800
sure the test is another one if the

00:28:41,730 --> 00:28:45,510
results change so it's not about making

00:28:43,800 --> 00:28:46,950
sure that the program runs it doesn't

00:28:45,510 --> 00:28:48,510
need to do the same thing that the

00:28:46,950 --> 00:28:50,960
previous version did or that the same

00:28:48,510 --> 00:28:53,910
version did with a different dependency

00:28:50,960 --> 00:28:55,830
well isn't that just making sure that

00:28:53,910 --> 00:28:58,440
test is run again when the dependencies

00:28:55,830 --> 00:28:59,640
change well I was I was under the

00:28:58,440 --> 00:29:03,300
impression that that have what happen

00:28:59,640 --> 00:29:05,190
anyway so if they know just if if the

00:29:03,300 --> 00:29:08,490
package is not changed in Debian and

00:29:05,190 --> 00:29:12,300
just the dependencies change then in

00:29:08,490 --> 00:29:14,520
general that's not okay run right then

00:29:12,300 --> 00:29:18,960
disregard anything I just said no no but

00:29:14,520 --> 00:29:20,700
I mean the dependencies changed and at

00:29:18,960 --> 00:29:22,980
least the Debian auto builders will not

00:29:20,700 --> 00:29:25,200
rebuild automatically reverse

00:29:22,980 --> 00:29:26,880
dependencies of after an upload sure

00:29:25,200 --> 00:29:28,080
unless of course it's the library and

00:29:26,880 --> 00:29:29,610
the library name change then they'll

00:29:28,080 --> 00:29:31,280
show but that's well the build piece I

00:29:29,610 --> 00:29:34,080
was talking about auto package tests and

00:29:31,280 --> 00:29:36,180
Pepsi I and I'm not sure whether they've

00:29:34,080 --> 00:29:38,600
said as that is it doing it just does

00:29:36,180 --> 00:29:38,600
anyone know

00:29:40,800 --> 00:29:44,980
yeah

00:29:42,880 --> 00:29:47,370
just just as crazy idea thrown in

00:29:44,980 --> 00:29:47,370
Minnesota

00:29:53,660 --> 00:30:01,040
hi I just have a comment about these

00:29:56,630 --> 00:30:04,550
auto tests when they fail does that mean

00:30:01,040 --> 00:30:07,670
that the package fails to build well at

00:30:04,550 --> 00:30:12,260
least the tested part is fails maybe the

00:30:07,670 --> 00:30:15,020
package to work for 95% but these five

00:30:12,260 --> 00:30:18,020
percenter contests fail but you can try

00:30:15,020 --> 00:30:20,930
but it's it's back anyway sometimes

00:30:18,020 --> 00:30:22,820
sometimes these back box pop up in in

00:30:20,930 --> 00:30:26,690
the test Suites themselves for example

00:30:22,820 --> 00:30:30,500
in the new scientific library when there

00:30:26,690 --> 00:30:34,820
was a transition from GCC six to seven

00:30:30,500 --> 00:30:38,480
the tests just failed because the optima

00:30:34,820 --> 00:30:40,070
optimizer changed and the some of the

00:30:38,480 --> 00:30:42,620
tests and end up failing on some

00:30:40,070 --> 00:30:47,270
architectures and so so we end up with

00:30:42,620 --> 00:30:50,900
case of fake flaky tests yes it's it's

00:30:47,270 --> 00:30:52,850
possibly it's quite a common thing that

00:30:50,900 --> 00:30:57,410
not the program is broken but the test

00:30:52,850 --> 00:30:59,600
is broken so yeah but then the test has

00:30:57,410 --> 00:31:05,690
to be in fixed and which means the

00:30:59,600 --> 00:31:12,440
package is buggy because it tests all

00:31:05,690 --> 00:31:15,520
the cheese's here so for example and

00:31:12,440 --> 00:31:18,380
they became we do have the tendency of

00:31:15,520 --> 00:31:21,920
running the test suit but not failing

00:31:18,380 --> 00:31:23,600
the package bill if there's failures

00:31:21,920 --> 00:31:27,770
depending on the package because there's

00:31:23,600 --> 00:31:29,750
some packages where there's failures so

00:31:27,770 --> 00:31:32,330
you depends on how to pack how the

00:31:29,750 --> 00:31:35,000
packaging is done whether you fail on

00:31:32,330 --> 00:31:37,520
the test and then all the package tests

00:31:35,000 --> 00:31:40,310
as far as I understand independent of

00:31:37,520 --> 00:31:41,900
that but you would run the same test it

00:31:40,310 --> 00:31:44,720
during back to build and then you would

00:31:41,900 --> 00:31:46,700
run well you can run them and then you

00:31:44,720 --> 00:31:49,240
run it again after the package both br-2

00:31:46,700 --> 00:31:49,240
package tests

00:31:53,700 --> 00:32:02,369
just more common for GSL in that case it

00:31:58,709 --> 00:32:04,379
was all the tests passing for number of

00:32:02,369 --> 00:32:06,690
months and everything was perfect and

00:32:04,379 --> 00:32:08,399
then this is the update and GSL is

00:32:06,690 --> 00:32:10,559
fading and not building anymore

00:32:08,399 --> 00:32:13,019
yeah well that this is the sense of the

00:32:10,559 --> 00:32:16,259
test to know that things are failing

00:32:13,019 --> 00:32:18,329
because you realize it I mean that you

00:32:16,259 --> 00:32:19,950
upload to yourself or somebody to upload

00:32:18,329 --> 00:32:22,799
a juice out and there did fans build or

00:32:19,950 --> 00:32:24,419
was Deb CII telling you oh jesus you got

00:32:22,799 --> 00:32:28,349
updated and now it's not working anymore

00:32:24,419 --> 00:32:35,839
and then Debbie I automatically rebuilt

00:32:28,349 --> 00:32:35,839
gzhel or I was obvious okay oh yes

00:32:40,120 --> 00:32:45,039
well this that's why we I'm so keen on

00:32:43,029 --> 00:32:49,809
having test Suites on all the packages

00:32:45,039 --> 00:32:52,299
to know when this fails right because if

00:32:49,809 --> 00:32:54,549
if you don't run the test suite because

00:32:52,299 --> 00:32:57,640
it has no tests you assume everything is

00:32:54,549 --> 00:32:59,289
ok and it's it's not no more no matter

00:32:57,640 --> 00:33:02,190
what packages are responsible but we

00:32:59,289 --> 00:33:05,890
need to answer we will package for

00:33:02,190 --> 00:33:08,010
keeping sync yeah we have the problem

00:33:05,890 --> 00:33:11,440
that it's really difficult sometimes to

00:33:08,010 --> 00:33:19,270
to get all the tests run ok on all

00:33:11,440 --> 00:33:21,460
architectures I guess it would be a lot

00:33:19,270 --> 00:33:23,679
of work to get everything green and then

00:33:21,460 --> 00:33:26,140
being at that point saying ok now we

00:33:23,679 --> 00:33:29,500
will check whenever it fails we get back

00:33:26,140 --> 00:33:33,130
report or we see it's failing but I had

00:33:29,500 --> 00:33:35,740
packages which failed to test you

00:33:33,130 --> 00:33:39,070
because I was running them on one thread

00:33:35,740 --> 00:33:40,630
or one Co only and they would they

00:33:39,070 --> 00:33:42,730
didn't even think about somebody only

00:33:40,630 --> 00:33:46,990
running at a 1 cos they only run it on

00:33:42,730 --> 00:33:51,220
1000 course a parallel right so and then

00:33:46,990 --> 00:33:52,870
well what what I'm saying is that okay

00:33:51,220 --> 00:33:54,039
well maybe we disabled that test or

00:33:52,870 --> 00:33:55,539
something but it's always a lot of

00:33:54,039 --> 00:34:02,620
manual work to get though it the whole

00:33:55,539 --> 00:34:04,630
tested green but yeah it's certainly the

00:34:02,620 --> 00:34:06,610
thing that it should be but maybe it's

00:34:04,630 --> 00:34:09,600
more easy for some packages there for us

00:34:06,610 --> 00:34:09,600
yeah

00:34:10,669 --> 00:34:15,679
what is as as I said in the end somebody

00:34:13,190 --> 00:34:23,389
has to write the test in the first place

00:34:15,679 --> 00:34:27,740
and then you know so how much time 10

00:34:23,389 --> 00:34:31,039
minutes yeah maybe I can continue a bit

00:34:27,740 --> 00:34:35,539
in in this duplicate names issue because

00:34:31,039 --> 00:34:37,909
um upstream has a tendency to use quite

00:34:35,539 --> 00:34:42,500
generic names which are in conflict with

00:34:37,909 --> 00:34:45,829
other packages and I implemented for the

00:34:42,500 --> 00:34:47,659
Debian made plan well it's for

00:34:45,829 --> 00:34:50,960
implemented for all but not not realized

00:34:47,659 --> 00:34:54,169
and other things that we put a copy with

00:34:50,960 --> 00:34:58,369
the original name under user live blends

00:34:54,169 --> 00:35:02,450
in this case made pin and if the user

00:34:58,369 --> 00:35:04,250
sets this in his past and he can use the

00:35:02,450 --> 00:35:07,519
generic name because some scripts are

00:35:04,250 --> 00:35:09,349
relying on it it's very maybe it's a

00:35:07,519 --> 00:35:12,380
little bit a quiche but it works like

00:35:09,349 --> 00:35:15,589
this because in user pin we have a non

00:35:12,380 --> 00:35:19,490
conflicting name which it's not that

00:35:15,589 --> 00:35:22,490
generic but users really won't want to

00:35:19,490 --> 00:35:23,410
have this so what do you think about

00:35:22,490 --> 00:35:31,250
this solution

00:35:23,410 --> 00:35:33,710
oh it's implemented you can use it it

00:35:31,250 --> 00:35:37,789
sends a P link package phone for

00:35:33,710 --> 00:35:40,609
instance P link as a it's connected to

00:35:37,789 --> 00:35:42,950
putty and it existed and peeling is also

00:35:40,609 --> 00:35:47,000
biological program at that we have it in

00:35:42,950 --> 00:35:49,759
here in which may it's peeling and and

00:35:47,000 --> 00:35:52,789
user bin it's some other name and if the

00:35:49,759 --> 00:35:55,579
user puts this or this this is put in

00:35:52,789 --> 00:36:00,650
the past and if the user sets a variable

00:35:55,579 --> 00:36:04,730
in his environment then this path will

00:36:00,650 --> 00:36:06,920
be prepended system possible then he

00:36:04,730 --> 00:36:09,950
needs to know that the original peeling

00:36:06,920 --> 00:36:12,140
will not work but this is user decision

00:36:09,950 --> 00:36:14,690
but that wouldn't protect you against

00:36:12,140 --> 00:36:20,029
blame duplications within the same blend

00:36:14,690 --> 00:36:23,260
would it well yes well yeah if you have

00:36:20,029 --> 00:36:25,990
a name crash inside one plant

00:36:23,260 --> 00:36:33,100
it doesn't help but yeah he has this

00:36:25,990 --> 00:36:36,700
problem anyway so yeah it's just to make

00:36:33,100 --> 00:36:39,640
sure that all packages are in silico

00:36:36,700 --> 00:36:42,640
installable so we had the situation at

00:36:39,640 --> 00:36:45,010
first that that's pootie and peeling

00:36:42,640 --> 00:36:49,530
couldn't be installed together pootie

00:36:45,010 --> 00:36:51,970
was first and so it winds and so it's a

00:36:49,530 --> 00:36:53,740
policy not okay to make a conflict

00:36:51,970 --> 00:36:56,560
between these packages because it do not

00:36:53,740 --> 00:37:00,119
really conflict and so we found a

00:36:56,560 --> 00:37:03,310
solution this solution enables users to

00:37:00,119 --> 00:37:12,540
keep the old no-name to Quran there are

00:37:03,310 --> 00:37:14,770
old known scripts well users who said

00:37:12,540 --> 00:37:17,530
what would the user have to do I mean

00:37:14,770 --> 00:37:20,700
the user needs to do what wait I think I

00:37:17,530 --> 00:37:20,700
have an example yeah

00:37:26,800 --> 00:37:33,610
the user puts a final home dot plants

00:37:30,750 --> 00:37:37,240
and says I'm a member of the Debian mid

00:37:33,610 --> 00:37:40,510
team that's what the EULA has to do and

00:37:37,240 --> 00:37:43,060
it should do because we couldn't I could

00:37:40,510 --> 00:37:51,210
not write into any home directories and

00:37:43,060 --> 00:37:56,280
this had the effect that in a TC profile

00:37:51,210 --> 00:37:56,280
the well this

00:38:05,610 --> 00:38:13,440
in DBM meter so there is a deviant mid s

00:38:11,190 --> 00:38:17,790
ha installed by the mid comment package

00:38:13,440 --> 00:38:21,200
and so if in home of the user is a dot

00:38:17,790 --> 00:38:24,720
plants and it will be passed for for the

00:38:21,200 --> 00:38:29,030
blend string and you get a blend pass

00:38:24,720 --> 00:38:31,790
and the blend men pass and this is

00:38:29,030 --> 00:38:40,730
prepended before your user fully a

00:38:31,790 --> 00:38:45,290
normal player yes no other users is

00:38:40,730 --> 00:38:49,080
affected but this user who actively sets

00:38:45,290 --> 00:38:51,540
this is maybe this is the solution I

00:38:49,080 --> 00:39:00,750
came up with maybe you know better

00:38:51,540 --> 00:39:03,090
solutions but it sounds ok yeah I think

00:39:00,750 --> 00:39:04,890
nobody really knows about but I put it

00:39:03,090 --> 00:39:11,910
initially some user documentation for

00:39:04,890 --> 00:39:19,340
plans yeah I would love for somebody

00:39:11,910 --> 00:39:22,200
would document this so any other things

00:39:19,340 --> 00:39:25,920
depth-x is also a running effort which

00:39:22,200 --> 00:39:26,760
is yeah we should find a better design

00:39:25,920 --> 00:39:28,380
for depth-x

00:39:26,760 --> 00:39:30,270
I started with this for Libyan me it

00:39:28,380 --> 00:39:35,750
opened and I stopped at some point in

00:39:30,270 --> 00:39:35,750
time and yeah didn't continue it

00:39:37,359 --> 00:39:44,140
these are basically the problems I have

00:39:39,489 --> 00:39:48,239
seen in the wiki any other problems if

00:39:44,140 --> 00:39:48,239
not we might stop here

00:39:55,610 --> 00:40:01,120
Floria and that's it stop thanks for

00:39:58,820 --> 00:40:01,120

YouTube URL: https://www.youtube.com/watch?v=5PWXFXRATO4


