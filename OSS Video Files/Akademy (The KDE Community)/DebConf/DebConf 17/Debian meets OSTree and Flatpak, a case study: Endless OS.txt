Title: Debian meets OSTree and Flatpak, a case study: Endless OS
Publication date: 2017-12-06
Playlist: DebConf 17
Description: 
	by Cosimo Cecchi

At: DebConf17
https://debconf17.debconf.org/
Room: Buzz
Scheduled start: 2017-08-07 11:00:00
Captions: 
	00:00:04,410 --> 00:00:19,230
good morning everybody stop me

00:00:15,470 --> 00:00:20,160
good morning everybody this is my first

00:00:19,230 --> 00:00:22,980
ballot count

00:00:20,160 --> 00:00:25,230
my name is Cosima shaky and I'm going to

00:00:22,980 --> 00:00:28,169
be talking to you about something that

00:00:25,230 --> 00:00:34,250
we did with data and the company that I

00:00:28,169 --> 00:00:36,390
work at endless would build a derivative

00:00:34,250 --> 00:00:40,140
different data distribution

00:00:36,390 --> 00:00:42,960
they uses some technologies that are

00:00:40,140 --> 00:00:49,190
typically not exactly what you think

00:00:42,960 --> 00:00:49,190
when you think of that maybe we go so

00:00:53,300 --> 00:00:59,790
all right so a little bit about me you

00:00:57,210 --> 00:01:07,140
can find me on Twitter or other places

00:00:59,790 --> 00:01:09,319
with the EOC handle I know contributor

00:01:07,140 --> 00:01:11,759
know aficionado

00:01:09,319 --> 00:01:14,069
so I've been maintaining a lot of

00:01:11,759 --> 00:01:16,380
modules know the thought of a silo

00:01:14,069 --> 00:01:18,659
manager or bunch of other things now I

00:01:16,380 --> 00:01:22,109
don't do that as much anymore but I

00:01:18,659 --> 00:01:24,090
serve on the board of directors and for

00:01:22,109 --> 00:01:26,520
any related inquiries and Tommy

00:01:24,090 --> 00:01:28,439
impression received on that order and my

00:01:26,520 --> 00:01:31,139
day job is managing the engineering team

00:01:28,439 --> 00:01:36,179
and analysts that build this operating

00:01:31,139 --> 00:01:37,770
system so basically three things that I

00:01:36,179 --> 00:01:40,649
would like you to get at the end of this

00:01:37,770 --> 00:01:43,249
talk first of all what endless list is

00:01:40,649 --> 00:01:45,780
if you don't know what it is so

00:01:43,249 --> 00:01:51,179
hopefully you'll know that at the end of

00:01:45,780 --> 00:01:53,399
it how to deploy well first of all what

00:01:51,179 --> 00:01:56,159
is gorgeously and how to deploy in denim

00:01:53,399 --> 00:02:01,259
denim by the system tree using good

00:01:56,159 --> 00:02:02,549
Street and then finally I have a super

00:02:01,259 --> 00:02:06,740
modest Strama

00:02:02,549 --> 00:02:10,520
for how that you can adopt boys

00:02:06,740 --> 00:02:13,220
a little bit more and widened useful to

00:02:10,520 --> 00:02:14,959
a bunch of people so but before

00:02:13,220 --> 00:02:16,580
everything a little bit about analysts

00:02:14,959 --> 00:02:18,890
and a little bit of month endless less I

00:02:16,580 --> 00:02:21,860
wanna talk just for a few moment about

00:02:18,890 --> 00:02:24,349
the company this is you know not to talk

00:02:21,860 --> 00:02:27,650
about analysts at all endless was

00:02:24,349 --> 00:02:30,680
founded or by the time years ago now to

00:02:27,650 --> 00:02:33,110
bring technology to people that don't

00:02:30,680 --> 00:02:35,510
have it so to kind of the next billion

00:02:33,110 --> 00:02:39,230
computer users so we target really

00:02:35,510 --> 00:02:41,780
people like this you know maybe people

00:02:39,230 --> 00:02:46,940
in Indonesia people that are first-time

00:02:41,780 --> 00:02:51,140
computer buyer and you know this is a

00:02:46,940 --> 00:02:53,269
slide that my our CEO always uses this

00:02:51,140 --> 00:02:55,250
is uh you know and it looks a bit

00:02:53,269 --> 00:02:58,190
Photoshop but it's a matter that we

00:02:55,250 --> 00:03:00,230
actually find in San Francisco so you

00:02:58,190 --> 00:03:02,480
know it's an ad by Mozilla the Internet

00:03:00,230 --> 00:03:06,470
should be accessible to all what army

00:03:02,480 --> 00:03:08,870
you know in 2017 were before really

00:03:06,470 --> 00:03:11,299
fundamental needs of human beings food

00:03:08,870 --> 00:03:13,820
water shelter and editor and you know

00:03:11,299 --> 00:03:16,850
Mozilla a friend motility if economic

00:03:13,820 --> 00:03:20,239
SIL will love them for that but the

00:03:16,850 --> 00:03:22,579
realities that the Internet is just not

00:03:20,239 --> 00:03:24,590
the thing for most people in the world

00:03:22,579 --> 00:03:29,390
actually for about half of the world

00:03:24,590 --> 00:03:31,640
population and you know mobile Internet

00:03:29,390 --> 00:03:35,660
and mobile penetration has helped a lot

00:03:31,640 --> 00:03:36,920
with getting some data to places that

00:03:35,660 --> 00:03:40,069
previously there have it

00:03:36,920 --> 00:03:44,690
however there is a big disparity between

00:03:40,069 --> 00:03:47,810
what somebody can afford in terms of an

00:03:44,690 --> 00:03:50,930
internet plan on their phone

00:03:47,810 --> 00:03:54,200
I think it's the average data plant

00:03:50,930 --> 00:03:56,599
science in emerging countries and 60

00:03:54,200 --> 00:03:59,120
gigabytes which you know 200 megabytes

00:03:56,599 --> 00:04:02,060
which 60 killers doesn't even show on

00:03:59,120 --> 00:04:06,200
the graph right is actually how much

00:04:02,060 --> 00:04:09,980
data a typical desktop laptop computer

00:04:06,200 --> 00:04:12,110
consumes so endless you know the product

00:04:09,980 --> 00:04:15,860
that we build wants to solve this

00:04:12,110 --> 00:04:18,620
problem solving the availability of

00:04:15,860 --> 00:04:22,610
internet and effectively this is a very

00:04:18,620 --> 00:04:25,639
very simplifying you know diagram what

00:04:22,610 --> 00:04:27,650
we do but we preload a lot of content on

00:04:25,639 --> 00:04:29,840
the device itself when you buy it so

00:04:27,650 --> 00:04:33,320
when you buy it on a Windows computer or

00:04:29,840 --> 00:04:35,240
a you know Chromebook or whatever other

00:04:33,320 --> 00:04:37,250
computer most of the things that you

00:04:35,240 --> 00:04:39,380
have on the computer will need internet

00:04:37,250 --> 00:04:43,610
so it's pretty much useless actually I

00:04:39,380 --> 00:04:46,729
went to a shop a few few weeks ago and

00:04:43,610 --> 00:04:49,160
try to brand new windows panel of the

00:04:46,729 --> 00:04:52,310
laptop the only application that I was

00:04:49,160 --> 00:04:56,289
able to run was camera I think even

00:04:52,310 --> 00:04:59,570
solitaire in Windows 10 which is insane

00:04:56,289 --> 00:05:03,500
so what we do is we preload a lot of

00:04:59,570 --> 00:05:05,660
content on the device itself we refresh

00:05:03,500 --> 00:05:08,419
this content whenever Internet is

00:05:05,660 --> 00:05:10,100
available or really whenever anything

00:05:08,419 --> 00:05:11,990
that can refresh the content is

00:05:10,100 --> 00:05:16,190
available so we can refresh content

00:05:11,990 --> 00:05:18,410
using a USB key or using you know other

00:05:16,190 --> 00:05:20,060
computers in your local network if they

00:05:18,410 --> 00:05:22,220
have content that we are interested in

00:05:20,060 --> 00:05:25,250
and then it will be start there is

00:05:22,220 --> 00:05:29,210
access through native applications that

00:05:25,250 --> 00:05:32,030
will ship on the device itself so yeah

00:05:29,210 --> 00:05:32,389
it's this is another way of looking at

00:05:32,030 --> 00:05:35,090
it

00:05:32,389 --> 00:05:38,389
everything is searchable it is very very

00:05:35,090 --> 00:05:39,800
intuitive like for people that have not

00:05:38,389 --> 00:05:42,020
typically used a computer

00:05:39,800 --> 00:05:44,870
cominius to the tablet or a smartphone

00:05:42,020 --> 00:05:48,349
this was very familiar apps are front

00:05:44,870 --> 00:05:50,030
and center and the way that you install

00:05:48,349 --> 00:05:52,039
the removal patience is through an

00:05:50,030 --> 00:05:54,560
application store that kind of takes

00:05:52,039 --> 00:05:59,449
care of everything so you know we are

00:05:54,560 --> 00:06:02,629
really aiming Naumann obviously you know

00:05:59,449 --> 00:06:04,789
this is this population of very experts

00:06:02,629 --> 00:06:09,139
this from builders and you know

00:06:04,789 --> 00:06:11,090
operating system engineers but we have

00:06:09,139 --> 00:06:13,430
tested this user interface and we built

00:06:11,090 --> 00:06:15,440
it over you know a few years of research

00:06:13,430 --> 00:06:17,569
on the field and we found that it

00:06:15,440 --> 00:06:21,710
behaves very well for people that are

00:06:17,569 --> 00:06:25,340
used to handheld device which is you

00:06:21,710 --> 00:06:30,020
know primarily it's not Windows anymore

00:06:25,340 --> 00:06:34,969
the you know the contender for for our

00:06:30,020 --> 00:06:36,889
software it's actually Android and what

00:06:34,969 --> 00:06:38,629
we started doing at endless very

00:06:36,889 --> 00:06:42,289
recently is we started shipping with

00:06:38,629 --> 00:06:44,360
this two big names in many regions of

00:06:42,289 --> 00:06:49,279
the world so you can buy right now in

00:06:44,360 --> 00:06:52,400
Indonesia in Thailand or Vietnam an

00:06:49,279 --> 00:06:54,380
endless but it's a sloth operating so a

00:06:52,400 --> 00:06:56,539
lot of the has endless little bit so you

00:06:54,380 --> 00:06:58,460
know this is telling to give you the

00:06:56,539 --> 00:07:00,440
context of the users that we try to

00:06:58,460 --> 00:07:01,880
address and what we have made certain

00:07:00,440 --> 00:07:05,960
decisions for our concept in the

00:07:01,880 --> 00:07:09,199
operating system so as I mentioned this

00:07:05,960 --> 00:07:10,729
is an operating system based on them so

00:07:09,199 --> 00:07:15,020
the first to finish you can have

00:07:10,729 --> 00:07:19,400
gremlins it is a uses of various stock

00:07:15,020 --> 00:07:24,289
known 3.22 base has a custom shell on

00:07:19,400 --> 00:07:27,560
other pieces of of interface on top such

00:07:24,289 --> 00:07:30,800
as richness a very simplified initial

00:07:27,560 --> 00:07:32,360
setup for people that you know don't

00:07:30,800 --> 00:07:33,830
want to spend too much time configuring

00:07:32,360 --> 00:07:37,219
their computer when they first get it

00:07:33,830 --> 00:07:38,900
kind of works out of the box as I said

00:07:37,219 --> 00:07:42,169
before no software so an application

00:07:38,900 --> 00:07:44,000
senator kind of experiences the main way

00:07:42,169 --> 00:07:45,440
that you get other software that's not

00:07:44,000 --> 00:07:46,229
on the device or domain whether you

00:07:45,440 --> 00:07:49,349
manage

00:07:46,229 --> 00:07:52,050
the software of the device and you know

00:07:49,349 --> 00:07:53,639
the technology stuff is just not very

00:07:52,050 --> 00:07:56,939
interesting because it's the same thing

00:07:53,639 --> 00:07:58,889
that a modern that man or any other

00:07:56,939 --> 00:08:01,560
distribution really uses subsisted be

00:07:58,889 --> 00:08:04,139
hilarious use your power you disks

00:08:01,560 --> 00:08:06,439
bluesy we'll saw do a lot in that kind

00:08:04,139 --> 00:08:06,439
of stuff

00:08:06,529 --> 00:08:14,999
endless is also the Linux distribution

00:08:08,849 --> 00:08:17,159
based on Debian so are baseless is that

00:08:14,999 --> 00:08:19,620
we ingest a fourth version that we have

00:08:17,159 --> 00:08:24,150
released right now we are in the process

00:08:19,620 --> 00:08:28,409
of updating to stretch right now in for

00:08:24,150 --> 00:08:31,589
our next release and of course you don't

00:08:28,409 --> 00:08:33,870
take everything stock from that and we

00:08:31,589 --> 00:08:36,269
have our custom set of packages that we

00:08:33,870 --> 00:08:39,899
overlaid on top of that in itself and

00:08:36,269 --> 00:08:43,589
those are managed within obeisance so we

00:08:39,899 --> 00:08:46,680
use the think it's open bill server it's

00:08:43,589 --> 00:08:50,220
a it's an open source project that also

00:08:46,680 --> 00:08:52,880
works very well with packages the

00:08:50,220 --> 00:08:55,680
kernels right now is based on Bluetooth

00:08:52,880 --> 00:08:57,240
this is the decision that we made a

00:08:55,680 --> 00:08:59,250
while ago and it's kind of hard to

00:08:57,240 --> 00:09:04,170
change once you have it but it also has

00:08:59,250 --> 00:09:07,890
a lot more support or more you know

00:09:04,170 --> 00:09:10,019
other kind of hardware so we don't mind

00:09:07,890 --> 00:09:14,089
that and we're available right now for

00:09:10,019 --> 00:09:17,100
x86 64 and also for our would be seven

00:09:14,089 --> 00:09:19,380
because one of the first I didn't

00:09:17,100 --> 00:09:22,610
mention it but we used to make hardware

00:09:19,380 --> 00:09:25,709
devices and one of them still do is

00:09:22,610 --> 00:09:28,079
based on and logic SCO five so we have a

00:09:25,709 --> 00:09:33,480
whole version of the distribution that

00:09:28,079 --> 00:09:35,279
just built for any seven and right now

00:09:33,480 --> 00:09:37,740
we have a predictable reading cycle this

00:09:35,279 --> 00:09:42,180
is you know kind of a difference with

00:09:37,740 --> 00:09:45,150
dannion so we follow a little bit more

00:09:42,180 --> 00:09:47,670
or less one you know other reason

00:09:45,150 --> 00:09:50,279
do we try to align without see such as

00:09:47,670 --> 00:09:52,260
no so we have a major version every six

00:09:50,279 --> 00:09:54,930
months that you know releases the whole

00:09:52,260 --> 00:09:57,990
staff on top of you version of known and

00:09:54,930 --> 00:09:59,970
every month we make a minor release that

00:09:57,990 --> 00:10:04,710
is just butter fixes or you know other

00:09:59,970 --> 00:10:06,029
minor features and you know we don't go

00:10:04,710 --> 00:10:08,190
into that it won't be till if you're

00:10:06,029 --> 00:10:12,240
interested later but it's really hard to

00:10:08,190 --> 00:10:15,480
get it less than a month sorry more than

00:10:12,240 --> 00:10:17,970
a month so many times we know our hand

00:10:15,480 --> 00:10:21,930
is forced to make produce very often

00:10:17,970 --> 00:10:24,420
because of hardware support on the other

00:10:21,930 --> 00:10:25,950
connects of this stills pretty standard

00:10:24,420 --> 00:10:30,120
so far but it's not a traditional

00:10:25,950 --> 00:10:31,650
distribution because the I think the

00:10:30,120 --> 00:10:33,470
main difference is what a considerate

00:10:31,650 --> 00:10:36,930
traditional distribution is that

00:10:33,470 --> 00:10:38,970
packages are not exposed to the end-user

00:10:36,930 --> 00:10:41,400
at all there is no package manager

00:10:38,970 --> 00:10:44,339
available if you try to use up up again

00:10:41,400 --> 00:10:46,220
it will say no even I'll do that if you

00:10:44,339 --> 00:10:48,570
try to use the package you can you know

00:10:46,220 --> 00:10:50,250
search for things because we're ship to

00:10:48,570 --> 00:10:53,040
be packaged that amazing about it so

00:10:50,250 --> 00:10:54,620
anything you like that's kind of its

00:10:53,040 --> 00:10:56,880
kind of weird

00:10:54,620 --> 00:11:00,779
so the POS is really a simple

00:10:56,880 --> 00:11:04,020
deliverable it is a set of this kind of

00:11:00,779 --> 00:11:07,950
how it is on android or iOS and you take

00:11:04,020 --> 00:11:11,459
it as it is it goes forward forever and

00:11:07,950 --> 00:11:14,310
you cannot change so you do not have a

00:11:11,459 --> 00:11:16,320
user have fine control over what system

00:11:14,310 --> 00:11:17,970
in the operating system you can install

00:11:16,320 --> 00:11:21,810
applications you can remove applications

00:11:17,970 --> 00:11:25,290
you can install maybe other small things

00:11:21,810 --> 00:11:27,540
like printer drivers or codecs but you

00:11:25,290 --> 00:11:31,140
do not control the operating system

00:11:27,540 --> 00:11:32,730
itself illusion big difference and you

00:11:31,140 --> 00:11:35,160
know as a corollary on that OS

00:11:32,730 --> 00:11:39,630
applications are settlement so the

00:11:35,160 --> 00:11:42,000
operating system above that a little bit

00:11:39,630 --> 00:11:44,370
later but the implications are vanished

00:11:42,000 --> 00:11:47,250
through flat back and the original

00:11:44,370 --> 00:11:51,699
system is managed with all three these

00:11:47,250 --> 00:11:53,769
two teens have really no relationship to

00:11:51,699 --> 00:11:58,410
each other in a way they're just

00:11:53,769 --> 00:12:00,699
different layers so the u.s. can update

00:11:58,410 --> 00:12:02,769
independently of their patience

00:12:00,699 --> 00:12:06,759
independently of the runtimes that the

00:12:02,769 --> 00:12:08,679
applications use and almost everybody is

00:12:06,759 --> 00:12:10,299
delivered like that so there are a few

00:12:08,679 --> 00:12:16,660
exceptions as I mentioned printer

00:12:10,299 --> 00:12:20,249
drivers but pretty much so so how do we

00:12:16,660 --> 00:12:24,910
do that how do we do it

00:12:20,249 --> 00:12:26,259
and mostly why did we choose first of

00:12:24,910 --> 00:12:28,239
all why they would choose to do that

00:12:26,259 --> 00:12:30,970
that's a pretty you know different

00:12:28,239 --> 00:12:33,790
decision that what most that's the

00:12:30,970 --> 00:12:39,429
distributions do and the first reason is

00:12:33,790 --> 00:12:43,299
that packages are hard to test all the

00:12:39,429 --> 00:12:45,489
configurations that a given system can

00:12:43,299 --> 00:12:47,619
be especially given the number of

00:12:45,489 --> 00:12:50,410
packages that are available in

00:12:47,619 --> 00:12:53,100
distributions like that again makes it

00:12:50,410 --> 00:12:56,919
effectively impossible to test all

00:12:53,100 --> 00:13:01,329
especially with a small QA team so you

00:12:56,919 --> 00:13:05,470
know the first reason is kind of is to

00:13:01,329 --> 00:13:08,559
test or we kind of you know the cited

00:13:05,470 --> 00:13:10,949
paper the the quality of the bits that

00:13:08,559 --> 00:13:14,109
we're shipping over the number of bits

00:13:10,949 --> 00:13:16,869
the second reason is that we really want

00:13:14,109 --> 00:13:20,739
to deliver the same bits to an every

00:13:16,869 --> 00:13:24,160
user so we do not want to you know think

00:13:20,739 --> 00:13:25,899
oh do you have this version of this

00:13:24,160 --> 00:13:28,359
package is that a version of the sponge

00:13:25,899 --> 00:13:30,939
it's something happened before did you

00:13:28,359 --> 00:13:35,589
upgrade from you know old version and

00:13:30,939 --> 00:13:37,989
the my gracious 50 the word this you

00:13:35,589 --> 00:13:39,699
know it if your requirement if you

00:13:37,989 --> 00:13:41,199
actually have to deliver always the same

00:13:39,699 --> 00:13:44,919
pistol everybody these are not problems

00:13:41,199 --> 00:13:47,289
you can you know first composer system

00:13:44,919 --> 00:13:49,380
on our end and then deliver it to

00:13:47,289 --> 00:13:51,390
everybody in the same way you're here

00:13:49,380 --> 00:13:54,810
ensure that everybody gets exactly the

00:13:51,390 --> 00:13:57,210
same thing that you have tested also

00:13:54,810 --> 00:14:01,130
upgrade separate easily I mean I can

00:13:57,210 --> 00:14:04,260
answer that at least some of you here

00:14:01,130 --> 00:14:05,700
ahead of myself experience where you

00:14:04,260 --> 00:14:08,640
know you installed a new version of a

00:14:05,700 --> 00:14:11,100
package it just doesn't work with brace

00:14:08,640 --> 00:14:13,230
you have to resort to the terminal you

00:14:11,100 --> 00:14:16,020
have to do some magic you have to remove

00:14:13,230 --> 00:14:19,170
the ladder the hexamine it's it's fine

00:14:16,020 --> 00:14:20,670
if you are a somebody that meat or

00:14:19,170 --> 00:14:23,220
somebody like you know probably most of

00:14:20,670 --> 00:14:30,450
you in the audience but it's really not

00:14:23,220 --> 00:14:33,630
good if you are power loss is also a

00:14:30,450 --> 00:14:35,850
real issue right and as we deploy

00:14:33,630 --> 00:14:37,590
computers in situations that don't have

00:14:35,850 --> 00:14:40,310
great power supply and you know maybe

00:14:37,590 --> 00:14:43,530
powers intermittent we really wanted a

00:14:40,310 --> 00:14:45,450
system where we had delivered this you

00:14:43,530 --> 00:14:48,410
can deliver updates that is very

00:14:45,450 --> 00:14:52,620
resilient very resistant to things just

00:14:48,410 --> 00:14:54,960
exploding at any time and packages are

00:14:52,620 --> 00:14:57,750
really not atomic in a way so you know

00:14:54,960 --> 00:15:00,330
you have you mean stolen maybe the power

00:14:57,750 --> 00:15:02,250
goes out during your the middle of your

00:15:00,330 --> 00:15:05,460
like posting still screwed or something

00:15:02,250 --> 00:15:08,750
and you know who knows what state it is

00:15:05,460 --> 00:15:13,200
at that point it's also very easy to

00:15:08,750 --> 00:15:16,890
shoot yourself in the feet like if you

00:15:13,200 --> 00:15:22,110
remove the wrong thing man you're kind

00:15:16,890 --> 00:15:26,730
of sweet and mostly just enough familiar

00:15:22,110 --> 00:15:29,190
concept for new users so you know there

00:15:26,730 --> 00:15:29,700
are many cases what many cases the one

00:15:29,190 --> 00:15:32,550
kidney

00:15:29,700 --> 00:15:35,910
why is that a great idea for these

00:15:32,550 --> 00:15:39,300
reasons we chose not to use that for

00:15:35,910 --> 00:15:42,300
this particular deployment what we

00:15:39,300 --> 00:15:47,120
should extend is asleep so I took this

00:15:42,300 --> 00:15:49,650
kind of from the website so it's a

00:15:47,120 --> 00:15:50,240
technically it's a gift like model for

00:15:49,650 --> 00:15:52,550
buyer

00:15:50,240 --> 00:15:55,820
select that I think that's uh that's the

00:15:52,550 --> 00:15:59,980
easiest way to describe it so you take a

00:15:55,820 --> 00:16:03,980
whole file system tree big binary blobs

00:15:59,980 --> 00:16:05,870
you commit it to a repository or project

00:16:03,980 --> 00:16:07,670
we can have many branches and held many

00:16:05,870 --> 00:16:11,720
you know remotes and things like that

00:16:07,670 --> 00:16:14,830
and then you download those bits

00:16:11,720 --> 00:16:21,050
together on the client side and this

00:16:14,830 --> 00:16:22,490
happens so you know not a chance that

00:16:21,050 --> 00:16:27,709
it's part of the project Department

00:16:22,490 --> 00:16:30,200
which is a red hat fedora base way of

00:16:27,709 --> 00:16:34,459
using this that is kind of where it

00:16:30,200 --> 00:16:36,950
originated a Hamid means that you are

00:16:34,459 --> 00:16:39,620
guaranteed by the system that you are

00:16:36,950 --> 00:16:42,589
either at any given time you are either

00:16:39,620 --> 00:16:44,720
fully in the old version of the system

00:16:42,589 --> 00:16:46,670
or fully in the new version of the

00:16:44,720 --> 00:16:50,660
system there are no in-betweens so you

00:16:46,670 --> 00:16:53,720
can go forward you can roll back at any

00:16:50,660 --> 00:16:57,440
point you are completely ill one or

00:16:53,720 --> 00:16:59,180
completely new one which you know fits

00:16:57,440 --> 00:17:03,290
exactly the kind of requirements that we

00:16:59,180 --> 00:17:06,709
wanted the data itself is it also has

00:17:03,290 --> 00:17:11,120
you know a way of it can be distributed

00:17:06,709 --> 00:17:14,740
pretty simply so all you need is an HTTP

00:17:11,120 --> 00:17:18,589
server it has kind of thing it like

00:17:14,740 --> 00:17:21,319
object repository behind the scenes so

00:17:18,589 --> 00:17:23,569
if you look at it you know the files are

00:17:21,319 --> 00:17:25,670
not stored by the filesystem but they

00:17:23,569 --> 00:17:26,319
are kind of content hashed in that

00:17:25,670 --> 00:17:28,029
content

00:17:26,319 --> 00:17:32,950
this repository and that's why you've

00:17:28,029 --> 00:17:36,460
served your clients and each kind of who

00:17:32,950 --> 00:17:38,980
makes the humane to this binary tree it

00:17:36,460 --> 00:17:41,409
can immediately decide which can also of

00:17:38,980 --> 00:17:44,169
course be verified once you download it

00:17:41,409 --> 00:17:49,019
so you are sure that you get the same

00:17:44,169 --> 00:17:52,090
bits you know as the vendor indented

00:17:49,019 --> 00:17:55,269
something that kind kinda comes from

00:17:52,090 --> 00:17:58,649
what I mentioned before about the object

00:17:55,269 --> 00:18:02,679
model repository is that the data is

00:17:58,649 --> 00:18:05,529
d-double mated so each file you know

00:18:02,679 --> 00:18:07,629
traditionally it's the same file occurs

00:18:05,529 --> 00:18:12,850
two packages may be in different

00:18:07,629 --> 00:18:17,429
directories that really occupies spices

00:18:12,850 --> 00:18:20,230
based on this here is little belated so

00:18:17,429 --> 00:18:21,940
being content address means that there's

00:18:20,230 --> 00:18:26,169
only one copy of it that and there are

00:18:21,940 --> 00:18:28,149
hard links from that copy to the various

00:18:26,169 --> 00:18:30,820
actual locations on the final file

00:18:28,149 --> 00:18:34,269
system tree once it's deploy that also

00:18:30,820 --> 00:18:37,000
means that you can very cheaply store

00:18:34,269 --> 00:18:39,850
different versions of the same tree

00:18:37,000 --> 00:18:42,519
right because you know you change a

00:18:39,850 --> 00:18:44,320
package maybe you change a program in

00:18:42,519 --> 00:18:47,230
there you will change the whole file

00:18:44,320 --> 00:18:49,750
system you can make effectively two

00:18:47,230 --> 00:18:52,000
versions of it that whose only

00:18:49,750 --> 00:18:54,490
difference is this new file or district

00:18:52,000 --> 00:18:57,610
setup files all the other files will not

00:18:54,490 --> 00:18:59,950
be store twice and this even though you

00:18:57,610 --> 00:19:03,309
can choose to boot in one or the other

00:18:59,950 --> 00:19:05,889
plans so it's very powerful and another

00:19:03,309 --> 00:19:07,480
way of delivering updates is doing

00:19:05,889 --> 00:19:10,360
deltas between committee this is

00:19:07,480 --> 00:19:12,669
supported as a native operation you know

00:19:10,360 --> 00:19:13,940
three so instead of delivering the files

00:19:12,669 --> 00:19:16,879
individually and

00:19:13,940 --> 00:19:19,389
blaah in a single request which is a lot

00:19:16,879 --> 00:19:21,919
more efficient that's also compressed

00:19:19,389 --> 00:19:24,500
and it's just a binary differences

00:19:21,919 --> 00:19:27,620
between the old commit and the new

00:19:24,500 --> 00:19:28,789
committee report to the block so that's

00:19:27,620 --> 00:19:31,009
really good

00:19:28,789 --> 00:19:33,440
it supports integration with boot

00:19:31,009 --> 00:19:35,950
loaders such as grab a new boot which is

00:19:33,440 --> 00:19:40,789
perfect for us because your support our

00:19:35,950 --> 00:19:57,769
x64 and finally built in a way that

00:19:40,789 --> 00:20:02,600
makes it easy so because Simon has a

00:19:57,769 --> 00:20:03,830
flat back right after this is done but I

00:20:02,600 --> 00:20:07,789
just want to mention it here because

00:20:03,830 --> 00:20:13,610
it's what we used to deploy applications

00:20:07,789 --> 00:20:15,759
so you can build is a building and

00:20:13,610 --> 00:20:19,159
distribution system for apps on linux

00:20:15,759 --> 00:20:24,950
similar to snappy similar to up image

00:20:19,159 --> 00:20:26,480
it's that kind of you know myself each

00:20:24,950 --> 00:20:27,799
application is a bundle that is

00:20:26,480 --> 00:20:30,080
independent from all the other bundles

00:20:27,799 --> 00:20:33,649
you can install them remove them kind of

00:20:30,080 --> 00:20:37,809
independently and if you know it

00:20:33,649 --> 00:20:41,090
supports a very secure model of

00:20:37,809 --> 00:20:43,789
application compliant through the use of

00:20:41,090 --> 00:20:46,690
technology such as namespaces and C

00:20:43,789 --> 00:20:50,059
groups in the kernel that really are you

00:20:46,690 --> 00:20:53,029
give the developer of the app very

00:20:50,059 --> 00:21:00,230
fine-grained control over what

00:20:53,029 --> 00:21:04,250
implication can so I was making you know

00:21:00,230 --> 00:21:08,740
the case before so case before as to why

00:21:04,250 --> 00:21:10,580
not use packages for a district but

00:21:08,740 --> 00:21:12,320
everybody

00:21:10,580 --> 00:21:14,179
they're building a destroyer for good

00:21:12,320 --> 00:21:19,220
reasons because they're a very

00:21:14,179 --> 00:21:21,080
established concept there are very high

00:21:19,220 --> 00:21:23,539
quality teams that maintain a

00:21:21,080 --> 00:21:25,549
statistically including most of it here

00:21:23,539 --> 00:21:28,399
and thank you for that

00:21:25,549 --> 00:21:30,500
there are lots of tooling around how to

00:21:28,399 --> 00:21:32,539
build a package how to deploy a package

00:21:30,500 --> 00:21:34,580
how to install it so there's tons of

00:21:32,539 --> 00:21:38,169
documentation is really the perfect

00:21:34,580 --> 00:21:40,880
system to build a district in my mind

00:21:38,169 --> 00:21:45,919
you know there's others that have tried

00:21:40,880 --> 00:21:49,370
doing you know your the style stop Jason

00:21:45,919 --> 00:21:51,529
stuff but I mean this is this works very

00:21:49,370 --> 00:21:55,490
very well for it for who is building the

00:21:51,529 --> 00:21:57,799
district so we really in our goal when

00:21:55,490 --> 00:21:59,659
thinking about this tool was really to

00:21:57,799 --> 00:22:02,840
bridge these two these two worlds we

00:21:59,659 --> 00:22:05,870
would like to deploy packages that in

00:22:02,840 --> 00:22:07,880
style 2003 and then use that as an input

00:22:05,870 --> 00:22:11,750
to create a nice tree to deliver that

00:22:07,880 --> 00:22:13,730
for users it has to be about available

00:22:11,750 --> 00:22:15,320
operations so we don't want to be typing

00:22:13,730 --> 00:22:19,730
commands ever exactly we want to do it

00:22:15,320 --> 00:22:23,600
it has to be reproducible you know this

00:22:19,730 --> 00:22:26,899
is kind of a loaded term but if you're

00:22:23,600 --> 00:22:29,389
running twice it has to you know support

00:22:26,899 --> 00:22:33,019
every tile effectively and ideally not

00:22:29,389 --> 00:22:35,539
add any complications by the process

00:22:33,019 --> 00:22:38,210
itself I know that not all the packages

00:22:35,539 --> 00:22:40,190
are sort of perfectly reproducible so to

00:22:38,210 --> 00:22:42,440
our pocket package spice maybe you'll

00:22:40,190 --> 00:22:45,169
get slightly proud because of five cents

00:22:42,440 --> 00:22:47,480
or whatnot but within those bounds it

00:22:45,169 --> 00:22:48,919
should be reproducible you should work

00:22:47,480 --> 00:22:51,730
with existing packages like they're

00:22:48,919 --> 00:22:53,929
saying and they should support

00:22:51,730 --> 00:22:55,070
customizations outside of the package

00:22:53,929 --> 00:22:59,419
system itself

00:22:55,070 --> 00:23:04,050
and you'll see why and this is the

00:22:59,419 --> 00:23:06,290
project that we've built to to do

00:23:04,050 --> 00:23:09,930
so a little bit of a history to this

00:23:06,290 --> 00:23:14,670
this is we use it mostly as an internal

00:23:09,930 --> 00:23:16,860
tool this is a public version of the

00:23:14,670 --> 00:23:20,220
tools that I that a colleague of mine

00:23:16,860 --> 00:23:23,820
made last year I updated it for this

00:23:20,220 --> 00:23:26,310
conference so you you know please try it

00:23:23,820 --> 00:23:30,510
and some loaded check it out however it

00:23:26,310 --> 00:23:32,310
is kind of untested in this specific

00:23:30,510 --> 00:23:35,010
configuration because we have our own

00:23:32,310 --> 00:23:38,700
hooks and our own you know internal

00:23:35,010 --> 00:23:44,870
add-ons to that so I haven't tried it

00:23:38,700 --> 00:23:48,870
food but I think it's a good start so

00:23:44,870 --> 00:23:52,740
that was a builder what is it it's

00:23:48,870 --> 00:23:56,610
designed in stages and it's mostly like

00:23:52,740 --> 00:23:59,670
we need four stages they you need to do

00:23:56,610 --> 00:24:02,370
to deploy the system the first one has a

00:23:59,670 --> 00:24:04,740
check for a big soap shoot many of us

00:24:02,370 --> 00:24:09,750
read we build even the set of packages

00:24:04,740 --> 00:24:12,540
that I can give you right now if so

00:24:09,750 --> 00:24:13,950
let's assume that the answer is yes the

00:24:12,540 --> 00:24:16,800
first time yes for sure

00:24:13,950 --> 00:24:21,000
there's the last stage which creates

00:24:16,800 --> 00:24:23,670
using the bootstrap and then basically

00:24:21,000 --> 00:24:26,460
taking a meta package which is the list

00:24:23,670 --> 00:24:29,490
of dependencies just simply a list of

00:24:26,460 --> 00:24:32,460
dependencies that should go in the

00:24:29,490 --> 00:24:33,660
filesystem it deploys everything so it

00:24:32,460 --> 00:24:35,730
makes it people struggling to a

00:24:33,660 --> 00:24:37,260
temporary directory that is tools all

00:24:35,730 --> 00:24:40,470
these other packages into a temporary

00:24:37,260 --> 00:24:43,230
directory as well that effectively will

00:24:40,470 --> 00:24:45,840
have the fully deployed file system tree

00:24:43,230 --> 00:24:50,370
as if it was you know a regular disrobe

00:24:45,840 --> 00:24:53,310
days that creates a commit to a local

00:24:50,370 --> 00:24:55,980
waspy repository during the OS 3 stage

00:24:53,310 --> 00:24:58,590
and then science it with the GPT either

00:24:55,980 --> 00:25:01,530
you give it and that finally it

00:24:58,590 --> 00:25:04,740
publishes that void stream to another

00:25:01,530 --> 00:25:08,290
server or a set of different servers and

00:25:04,740 --> 00:25:11,970
reality the publish stage like in

00:25:08,290 --> 00:25:14,920
listen to copy that if there is

00:25:11,970 --> 00:25:16,750
basically empty like up to you where do

00:25:14,920 --> 00:25:18,520
you want to publish it if you don't want

00:25:16,750 --> 00:25:21,160
to publish it anywhere you have the

00:25:18,520 --> 00:25:22,660
local copy in this and you know of

00:25:21,160 --> 00:25:24,280
course you have an error stage something

00:25:22,660 --> 00:25:28,450
was wrong maybe you want a good you know

00:25:24,280 --> 00:25:31,600
a notification to your Jenkins through

00:25:28,450 --> 00:25:34,030
your github to your you know whatever CI

00:25:31,600 --> 00:25:38,290
thing you have to notify that something

00:25:34,030 --> 00:25:40,720
went wrong so each stage here can be

00:25:38,290 --> 00:25:43,210
customized there is a poor logic to the

00:25:40,720 --> 00:25:44,770
stage so you know how you deploy the

00:25:43,210 --> 00:25:47,860
Dickens how do you do the double strap

00:25:44,770 --> 00:25:49,840
how you deploy the meta package those

00:25:47,860 --> 00:25:53,350
are core logic and that there's a number

00:25:49,840 --> 00:25:57,340
of folks that you can you you know the

00:25:53,350 --> 00:25:59,500
distribution builder can add to each

00:25:57,340 --> 00:26:01,480
stage so things like I want to publish

00:25:59,500 --> 00:26:05,110
to these other server and one you know

00:26:01,480 --> 00:26:10,330
to add these new files that are custom

00:26:05,110 --> 00:26:13,870
or I want to yeah like maybe change and

00:26:10,330 --> 00:26:18,730
configuration in a specific things like

00:26:13,870 --> 00:26:21,340
that the configuration of how old these

00:26:18,730 --> 00:26:24,550
things are put together is separate in

00:26:21,340 --> 00:26:27,280
the codebase and you can you know it has

00:26:24,550 --> 00:26:33,700
usable defaults but you can customize it

00:26:27,280 --> 00:26:35,740
per product which is effectively that

00:26:33,700 --> 00:26:37,300
kind of the top-level configuration of

00:26:35,740 --> 00:26:40,720
where you're building like I could build

00:26:37,300 --> 00:26:44,590
a Debian stretch or C product and the

00:26:40,720 --> 00:26:46,570
Debian see those three those would be

00:26:44,590 --> 00:26:49,110
likely to different products because

00:26:46,570 --> 00:26:51,640
they have different packages a branch

00:26:49,110 --> 00:26:54,970
which is you know different versions of

00:26:51,640 --> 00:26:57,529
the same for architecture for platform

00:26:54,970 --> 00:27:00,169
platform is kind of a weird concept

00:26:57,529 --> 00:27:01,820
I won't go into it and it should be six

00:27:00,169 --> 00:27:10,940
can be customized so it's very very

00:27:01,820 --> 00:27:15,620
flexible but kind of useful just as an

00:27:10,940 --> 00:27:17,779
aside making these trees has a cost so

00:27:15,620 --> 00:27:20,419
especially one thing that has a cost so

00:27:17,779 --> 00:27:22,009
you know one could be inclined looking

00:27:20,419 --> 00:27:24,500
at this saying oh I'm gonna make you

00:27:22,009 --> 00:27:27,980
know a hundred different version of the

00:27:24,500 --> 00:27:29,779
voice fee well making an OSC is not

00:27:27,980 --> 00:27:32,750
exactly like maintaining your district

00:27:29,779 --> 00:27:34,659
but it's similar because you own you you

00:27:32,750 --> 00:27:37,190
know

00:27:34,659 --> 00:27:38,690
you'll end up being you're not facing

00:27:37,190 --> 00:27:39,200
the same problems they are trying to

00:27:38,690 --> 00:27:41,379
solve

00:27:39,200 --> 00:27:43,879
as in too many configurations to test

00:27:41,379 --> 00:27:48,049
combinatorial explosions and stuff like

00:27:43,879 --> 00:27:51,289
that so we have limited you know kind of

00:27:48,049 --> 00:27:54,230
intentionally try to limit ourselves to

00:27:51,289 --> 00:27:58,490
just making or trees one needed so per

00:27:54,230 --> 00:28:01,879
architecture for product or platform and

00:27:58,490 --> 00:28:03,769
next hardware is I don't see that we

00:28:01,879 --> 00:28:05,779
make especially for people to have

00:28:03,769 --> 00:28:07,990
leading-edge hardware so just has like a

00:28:05,779 --> 00:28:11,480
different kernel or something like that

00:28:07,990 --> 00:28:15,100
and people can opt into it it it doesn't

00:28:11,480 --> 00:28:19,460
work doesn't work with the regular one

00:28:15,100 --> 00:28:23,509
so again very simple the genican Cir

00:28:19,460 --> 00:28:26,179
honor calls this demo SP builder evokes

00:28:23,509 --> 00:28:29,840
this on a timer for instance every night

00:28:26,179 --> 00:28:34,909
if you want to build a no it's not shot

00:28:29,840 --> 00:28:38,289
of your distribution every night it

00:28:34,909 --> 00:28:41,179
pulls the panelists remove yes builds it

00:28:38,289 --> 00:28:44,659
permits it to the OSB server this can

00:28:41,179 --> 00:28:51,950
you know iran manually on a timer

00:28:44,659 --> 00:28:53,870
however why what happens the be not

00:28:51,950 --> 00:28:55,820
appointment I know this is this you can

00:28:53,870 --> 00:28:56,720
do it pretty much forever you wanted in

00:28:55,820 --> 00:29:01,429
our deployment we have

00:28:56,720 --> 00:29:03,530
three stage server policy basically when

00:29:01,429 --> 00:29:06,320
you build an Austin's first publish to a

00:29:03,530 --> 00:29:10,340
staging server that is internal so we

00:29:06,320 --> 00:29:13,179
use that to do our QA we push from the

00:29:10,340 --> 00:29:16,120
staging to a tree that we call demo

00:29:13,179 --> 00:29:20,679
which is public beta

00:29:16,120 --> 00:29:23,480
whenever bi-weekly or roughly bi-weekly

00:29:20,679 --> 00:29:26,150
never really a release time when you

00:29:23,480 --> 00:29:29,240
know the beta passes the public leeway

00:29:26,150 --> 00:29:31,010
the staging passing turn of the way we

00:29:29,240 --> 00:29:33,620
would share it into production and this

00:29:31,010 --> 00:29:37,100
happens again once a month for mine or

00:29:33,620 --> 00:29:39,710
once every six months for major releases

00:29:37,100 --> 00:29:41,780
updates are installed automatically

00:29:39,710 --> 00:29:43,610
applying machine so we feel so confident

00:29:41,780 --> 00:29:47,090
that this won't break that we just

00:29:43,610 --> 00:29:48,679
install it on users machines provided

00:29:47,090 --> 00:29:52,760
that they are not connected with

00:29:48,679 --> 00:29:55,700
expensive connections or mobile kind of

00:29:52,760 --> 00:29:57,650
Internet that would upset people because

00:29:55,700 --> 00:29:59,150
it costs their data but if you're

00:29:57,650 --> 00:30:00,950
connected to like higher tuition and we

00:29:59,150 --> 00:30:03,049
just download it and install it and then

00:30:00,950 --> 00:30:06,710
we ask you to reboot whatever you like

00:30:03,049 --> 00:30:08,570
to get it into the new version of the US

00:30:06,710 --> 00:30:11,659
and of course you can manually install

00:30:08,570 --> 00:30:14,059
it so this is how it works on the client

00:30:11,659 --> 00:30:17,020
you have this component us updater who

00:30:14,059 --> 00:30:20,330
is responsible to kind of like Paul and

00:30:17,020 --> 00:30:23,360
you know fash the latest data from the

00:30:20,330 --> 00:30:25,100
USB server and then again you are either

00:30:23,360 --> 00:30:28,309
in the new deployment if everything goes

00:30:25,100 --> 00:30:31,549
well for your same deal there's never an

00:30:28,309 --> 00:30:33,919
in-between broken situation and you know

00:30:31,549 --> 00:30:37,610
it actually never happened so far that's

00:30:33,919 --> 00:30:42,500
good that that this didn't work so it

00:30:37,610 --> 00:30:45,289
it's very reliable however sometimes you

00:30:42,500 --> 00:30:47,460
really need packages and this is you

00:30:45,289 --> 00:30:50,340
know one of the one of the things that

00:30:47,460 --> 00:30:53,250
the stuffs at the end to develop the

00:30:50,340 --> 00:30:55,050
distribution we we begin of endless

00:30:53,250 --> 00:30:58,230
developers we still use vanities

00:30:55,050 --> 00:31:01,980
internally so we have kind of you know a

00:30:58,230 --> 00:31:04,470
few hacks that we build to make this

00:31:01,980 --> 00:31:07,320
possible one is your standard system

00:31:04,470 --> 00:31:09,180
which basically takes everything that

00:31:07,320 --> 00:31:11,280
I've told you what Allah Street trashes

00:31:09,180 --> 00:31:14,940
it completely and restores the vaults

00:31:11,280 --> 00:31:17,130
normal package system so you can use out

00:31:14,940 --> 00:31:18,810
that's voice free atom in unlocked which

00:31:17,130 --> 00:31:23,630
is a really interesting thing

00:31:18,810 --> 00:31:28,230
it makes your user temporarily rewrite

00:31:23,630 --> 00:31:31,370
and overlays some file system on top of

00:31:28,230 --> 00:31:35,310
it so that you can actually slow things

00:31:31,370 --> 00:31:41,130
temporarily until you reboot and I think

00:31:35,310 --> 00:31:43,410
you can even pass it a fly but anyway

00:31:41,130 --> 00:31:47,670
it's still a bit like what am I doing

00:31:43,410 --> 00:31:50,040
here overlay assess feel about it and

00:31:47,670 --> 00:31:52,800
right now this is strictly for internal

00:31:50,040 --> 00:31:54,360
use so we don't advertise this I mean of

00:31:52,800 --> 00:31:58,040
course like we ship this command so if

00:31:54,360 --> 00:32:00,960
you find it on under system you know

00:31:58,040 --> 00:32:03,990
good job we know we don't tell you to

00:32:00,960 --> 00:32:09,570
use it so like this doesn't really feel

00:32:03,990 --> 00:32:11,520
like the right solution to me yeah I

00:32:09,570 --> 00:32:13,950
said I'm not gonna talk about flat back

00:32:11,520 --> 00:32:16,830
but the one thing I want to mention is

00:32:13,950 --> 00:32:21,750
that we try to build flat backs using a

00:32:16,830 --> 00:32:25,400
very similar kind of database builder it

00:32:21,750 --> 00:32:27,960
didn't go very well it's complicated

00:32:25,400 --> 00:32:32,340
yeah if you're interested later and we

00:32:27,960 --> 00:32:36,770
have time in the Q&A so how can we

00:32:32,340 --> 00:32:39,570
improve this I think you know before

00:32:36,770 --> 00:32:42,690
before I go to that I think I had I have

00:32:39,570 --> 00:32:44,389
a simple idea but some of the lessons

00:32:42,690 --> 00:32:48,059
that we have

00:32:44,389 --> 00:32:50,610
one is that softer can only really be

00:32:48,059 --> 00:32:54,779
tested Isabel like many times we have

00:32:50,610 --> 00:32:56,730
you know trying to change the way we

00:32:54,779 --> 00:32:59,460
test things to just test individual

00:32:56,730 --> 00:33:02,100
changed individual package things like

00:32:59,460 --> 00:33:04,769
that he never really worked play there

00:33:02,100 --> 00:33:12,419
are many places where the integration is

00:33:04,769 --> 00:33:15,289
really the difficult part terminals are

00:33:12,419 --> 00:33:18,539
94 for users so anything that requires

00:33:15,289 --> 00:33:19,889
going to determine all basically for the

00:33:18,539 --> 00:33:20,700
kind of users that we're trying to

00:33:19,889 --> 00:33:24,779
target

00:33:20,700 --> 00:33:26,330
we lost already as smartphone OS is the

00:33:24,779 --> 00:33:30,210
gold standard because what people

00:33:26,330 --> 00:33:33,240
compared the software that you put in in

00:33:30,210 --> 00:33:38,370
front of them to because you know we

00:33:33,240 --> 00:33:42,600
grew up with that sauce or laptops or

00:33:38,370 --> 00:33:45,210
wanna many people in other areas of the

00:33:42,600 --> 00:33:47,460
world they just grow up with phones

00:33:45,210 --> 00:33:48,659
tablets and that's that's the digital

00:33:47,460 --> 00:33:52,080
experience that they care that that's

00:33:48,659 --> 00:33:55,200
what their comparative another lesson

00:33:52,080 --> 00:33:57,120
decoupling deliverables has atomic value

00:33:55,200 --> 00:34:00,120
for us as well like the moment that we

00:33:57,120 --> 00:34:02,759
were able to say you know all the other

00:34:00,120 --> 00:34:04,590
nations don't need to follow the u.s. we

00:34:02,759 --> 00:34:06,330
don't need to keep them up-to-date and

00:34:04,590 --> 00:34:08,010
working with the libraries that are

00:34:06,330 --> 00:34:10,079
provided by the operating system they

00:34:08,010 --> 00:34:12,720
can move at their own pace they can be

00:34:10,079 --> 00:34:14,940
released whenever and you know and do a

00:34:12,720 --> 00:34:16,560
scannable this other way once you have a

00:34:14,940 --> 00:34:19,730
figure out interfaces they need to do

00:34:16,560 --> 00:34:24,659
that that is absolutely super valuable I

00:34:19,730 --> 00:34:27,829
think it would be valuable for you know

00:34:24,659 --> 00:34:30,060
for other distributions as well

00:34:27,829 --> 00:34:32,399
predictable quick release cycles

00:34:30,060 --> 00:34:36,270
especially if you work with hardware

00:34:32,399 --> 00:34:38,790
manufacturers are very very important so

00:34:36,270 --> 00:34:40,649
you know for us the ability to you know

00:34:38,790 --> 00:34:45,569
make releases of the operating system

00:34:40,649 --> 00:34:48,389
especially very quickly has has a lot of

00:34:45,569 --> 00:34:52,919
money and working with hardware is hard

00:34:48,389 --> 00:34:53,920
you know not a it's not just a fun it's

00:34:52,919 --> 00:34:56,200
true

00:34:53,920 --> 00:34:59,850
there are many requirements that come

00:34:56,200 --> 00:35:02,080
from working with hardware vendors and

00:34:59,850 --> 00:35:05,230
yeah there's always something else they

00:35:02,080 --> 00:35:08,950
have done so it's it's quite it's quite

00:35:05,230 --> 00:35:10,990
a comment so you know the amount of

00:35:08,950 --> 00:35:11,860
people of this what I'm about to say

00:35:10,990 --> 00:35:13,360
with a grain of salt

00:35:11,860 --> 00:35:14,890
I don't know really help that it works

00:35:13,360 --> 00:35:17,710
as I mentioned this is my first step

00:35:14,890 --> 00:35:20,500
comp but I'm not a Debian developer so

00:35:17,710 --> 00:35:26,080
you know I don't know how things work

00:35:20,500 --> 00:35:28,870
but for me the main issue with the setup

00:35:26,080 --> 00:35:32,050
at least for how I see with the setup

00:35:28,870 --> 00:35:34,780
that I describe if I seriously wanted to

00:35:32,050 --> 00:35:36,730
propose it to Devon audience is the you

00:35:34,780 --> 00:35:40,330
knowledge so packet of slightly you know

00:35:36,730 --> 00:35:43,030
all of us all of you will want to

00:35:40,330 --> 00:35:45,880
install packages there this is actually

00:35:43,030 --> 00:35:48,520
problem that sold on Fedora so Fedora

00:35:45,880 --> 00:35:51,790
another working on a system called

00:35:48,520 --> 00:35:53,950
Fedora atomic which tries to bring some

00:35:51,790 --> 00:35:56,260
of this technology into the main line of

00:35:53,950 --> 00:35:58,510
the distribution and David about this

00:35:56,260 --> 00:36:03,010
ecological our EMR see that allows you

00:35:58,510 --> 00:36:06,130
to layer packages on top of the district

00:36:03,010 --> 00:36:08,290
cell so you have some tuning to rebase

00:36:06,130 --> 00:36:11,980
the package of top of the tree whenever

00:36:08,290 --> 00:36:14,110
you update the tree or upgrade the

00:36:11,980 --> 00:36:17,140
package together with the tree

00:36:14,110 --> 00:36:21,190
that's all you know fairly transparent

00:36:17,140 --> 00:36:23,650
and mostly it doesn't lose some of the

00:36:21,190 --> 00:36:26,710
guarantees and nice things that always

00:36:23,650 --> 00:36:30,730
forgives you for instance that updates

00:36:26,710 --> 00:36:33,040
are still guaranteed to be a time so my

00:36:30,730 --> 00:36:37,090
I don't know it feels like I'm not I'm

00:36:33,040 --> 00:36:39,370
an expert in the package or data format

00:36:37,090 --> 00:36:42,280
but this feels like it should be

00:36:39,370 --> 00:36:46,720
something achievable especially you know

00:36:42,280 --> 00:36:49,780
if it was not without Ian fedora and I

00:36:46,720 --> 00:36:50,840
think that with this you know if you

00:36:49,780 --> 00:36:52,670
have

00:36:50,840 --> 00:36:56,600
perfectly personally my head something

00:36:52,670 --> 00:36:58,520
like like this where you know where the

00:36:56,600 --> 00:37:00,590
system is managed by our street I have

00:36:58,520 --> 00:37:02,870
something like that boys tree to allow

00:37:00,590 --> 00:37:06,470
installing in packages on top or any did

00:37:02,870 --> 00:37:08,960
I don't want my that subsystem to be

00:37:06,470 --> 00:37:11,510
managed like that you know now I'm I'm

00:37:08,960 --> 00:37:12,980
running I'm running to the door on this

00:37:11,510 --> 00:37:14,660
because they needed virtual machines

00:37:12,980 --> 00:37:16,130
that we don't have a virtual machine up

00:37:14,660 --> 00:37:18,710
on endless but when I used to run

00:37:16,130 --> 00:37:20,780
endless on it it was amazing listen

00:37:18,710 --> 00:37:23,030
either me to care about anything like

00:37:20,780 --> 00:37:26,990
you know us always gets updated its

00:37:23,030 --> 00:37:28,790
tested many people use exactly the same

00:37:26,990 --> 00:37:33,230
thing I'm using so if I have a problem

00:37:28,790 --> 00:37:35,830
for sure others will if I don't it's

00:37:33,230 --> 00:37:38,960
very nice it's hard to go back to

00:37:35,830 --> 00:37:42,020
managing your own package after that so

00:37:38,960 --> 00:37:43,970
I don't loved anything to create a noise

00:37:42,020 --> 00:37:49,670
free version of the base that's no

00:37:43,970 --> 00:37:51,950
system basically you know very similar

00:37:49,670 --> 00:37:53,540
meta package definition to the one that

00:37:51,950 --> 00:37:57,560
we have at the end of they have this is

00:37:53,540 --> 00:38:00,700
a desktop as well and you know that men

00:37:57,560 --> 00:38:04,190
could build a reference or Street for

00:38:00,700 --> 00:38:05,780
base that subsystem just like that there

00:38:04,190 --> 00:38:10,850
could even be different meta packages

00:38:05,780 --> 00:38:12,680
for different assets I don't know if

00:38:10,850 --> 00:38:14,390
that it has concept of package groups

00:38:12,680 --> 00:38:17,000
this is something that they have a

00:38:14,390 --> 00:38:18,680
fedora where you know these are there

00:38:17,000 --> 00:38:20,720
are already instead of meta packages

00:38:18,680 --> 00:38:22,070
that you install and it grabs all the

00:38:20,720 --> 00:38:25,610
dependencies like you know you do

00:38:22,070 --> 00:38:33,080
install Katie just has everything you

00:38:25,610 --> 00:38:34,730
don't need to know also if I know that

00:38:33,080 --> 00:38:40,220
that may incite them in there is a

00:38:34,730 --> 00:38:43,760
project for there is a project for

00:38:40,220 --> 00:38:45,680
reproducible builds and with that you

00:38:43,760 --> 00:38:47,970
could really help share the bottom

00:38:45,680 --> 00:38:52,080
layers right because whenever

00:38:47,970 --> 00:38:54,119
you basically all this different desktop

00:38:52,080 --> 00:38:56,099
configurations would use the

00:38:54,119 --> 00:38:58,890
dilapidation technology of our street

00:38:56,099 --> 00:39:00,240
and share the same data and users would

00:38:58,890 --> 00:39:03,210
even very easily switch between

00:39:00,240 --> 00:39:06,720
different trees without the combination

00:39:03,210 --> 00:39:09,180
of oh how does the TV package interact

00:39:06,720 --> 00:39:11,180
with the non package whenever I have

00:39:09,180 --> 00:39:14,550
both of them installed which always

00:39:11,180 --> 00:39:16,320
opens like huge discussions and I'm you

00:39:14,550 --> 00:39:18,750
know I've seen it from the perspective

00:39:16,320 --> 00:39:25,290
of a up3 developer and this for

00:39:18,750 --> 00:39:28,170
developer and you know if if Devin did

00:39:25,290 --> 00:39:30,960
this then there's a good chance that how

00:39:28,170 --> 00:39:33,540
to build and deploy this deleon trees

00:39:30,960 --> 00:39:35,430
push-to-talk to annoy Street would

00:39:33,540 --> 00:39:41,520
become a standard and not something that

00:39:35,430 --> 00:39:43,080
you know made of bananas and for us or

00:39:41,520 --> 00:39:45,660
somebody else building on top of that

00:39:43,080 --> 00:39:48,390
here there will be many advantages for

00:39:45,660 --> 00:39:50,220
instance you know we wouldn't need to do

00:39:48,390 --> 00:39:52,080
most of the things that we do but we

00:39:50,220 --> 00:39:54,180
would just host our binary meals and

00:39:52,080 --> 00:39:56,730
adding our packages on top of you know

00:39:54,180 --> 00:39:58,530
database that is shared with the rest of

00:39:56,730 --> 00:40:05,520
them here so we would actually do most

00:39:58,530 --> 00:40:08,940
of the package development work so few

00:40:05,520 --> 00:40:12,599
conclusions I think you know the the

00:40:08,940 --> 00:40:15,030
world of our streets it's very flexible

00:40:12,599 --> 00:40:19,170
the world of distributions it's very

00:40:15,030 --> 00:40:22,500
flexible but I think that we can we can

00:40:19,170 --> 00:40:24,300
find a good middle ground where we get

00:40:22,500 --> 00:40:27,900
the best of both worlds so I think that

00:40:24,300 --> 00:40:31,859
we can learn something from each other

00:40:27,900 --> 00:40:35,490
and teach something to each other right

00:40:31,859 --> 00:40:38,990
now integrators the vendor users would

00:40:35,490 --> 00:40:42,060
be those who would benefit the most from

00:40:38,990 --> 00:40:45,359
you know a tree based approach writing

00:40:42,060 --> 00:40:49,190
them in but I think that with something

00:40:45,359 --> 00:40:50,690
else on top like demo Street this

00:40:49,190 --> 00:40:54,890
a lot of essential counterproductive

00:40:50,690 --> 00:40:56,690
users as well and you know distributing

00:40:54,890 --> 00:41:00,290
OS the binary simply achieve quite

00:40:56,690 --> 00:41:02,030
easily like be on the server style you

00:41:00,290 --> 00:41:04,160
know infrastructure required but that is

00:41:02,030 --> 00:41:06,859
not really a big deal and I'm sure that

00:41:04,160 --> 00:41:14,660
you know that it has a lot more

00:41:06,859 --> 00:41:17,150
complicated infrastructure and you know

00:41:14,660 --> 00:41:21,410
if there is interest for a project like

00:41:17,150 --> 00:41:22,910
this in the community we are here you

00:41:21,410 --> 00:41:24,859
know we as a as an endless

00:41:22,910 --> 00:41:27,319
we're here to help like we would like to

00:41:24,859 --> 00:41:32,260
get involved in a project like that if

00:41:27,319 --> 00:41:32,260
there is a dangerous so

00:41:43,830 --> 00:41:51,540
hi there thanks for your presentation I

00:41:47,800 --> 00:41:51,540
find it pretty interesting

00:41:51,610 --> 00:42:00,070
I like your overall approach one thing

00:41:54,730 --> 00:42:02,730
that I'd like to see from you is I've

00:42:00,070 --> 00:42:06,190
read a lot of what seems to me like

00:42:02,730 --> 00:42:10,150
overheated advocacy in favor of savvy

00:42:06,190 --> 00:42:11,950
flat-pack things like this it sounds to

00:42:10,150 --> 00:42:14,830
me like you've identified pretty much

00:42:11,950 --> 00:42:17,080
three different types or three different

00:42:14,830 --> 00:42:19,450
approaches to system integration the

00:42:17,080 --> 00:42:22,300
package model the OS tree model and

00:42:19,450 --> 00:42:24,610
let's call it the flat-pack model and I

00:42:22,300 --> 00:42:29,140
think your presentation goes a long way

00:42:24,610 --> 00:42:30,940
towards shedding light on this issue

00:42:29,140 --> 00:42:32,230
because it's not like well one of these

00:42:30,940 --> 00:42:34,140
systems is just going to kill the other

00:42:32,230 --> 00:42:37,180
two people off

00:42:34,140 --> 00:42:39,520
so could you distinguish in particular I

00:42:37,180 --> 00:42:42,460
know you wanted to leave some space for

00:42:39,520 --> 00:42:45,520
assignments talk on flat back but you

00:42:42,460 --> 00:42:47,350
very nicely contrasted where OS treating

00:42:45,520 --> 00:42:50,050
is useful versus where packages are

00:42:47,350 --> 00:42:53,080
useful could you shed some light on

00:42:50,050 --> 00:42:57,420
where you think the flat pack app

00:42:53,080 --> 00:42:58,960
distribution model has advantages and

00:42:57,420 --> 00:43:01,180
disadvantages relative

00:42:58,960 --> 00:43:03,640
to the package orientation because that

00:43:01,180 --> 00:43:09,369
seems to me like the real point of

00:43:03,640 --> 00:43:13,060
friction right now yeah and you know

00:43:09,369 --> 00:43:15,750
this is my complexion is much better be

00:43:13,060 --> 00:43:20,650
sure but this is like we're stuck I

00:43:15,750 --> 00:43:22,540
think black basically right now if you

00:43:20,650 --> 00:43:24,220
want to develop an application you want

00:43:22,540 --> 00:43:27,400
to distribute it to as many users as you

00:43:24,220 --> 00:43:30,099
can there's really no way around it no

00:43:27,400 --> 00:43:32,380
way around you going to every

00:43:30,099 --> 00:43:34,060
distribution and on this system that

00:43:32,380 --> 00:43:36,580
they have to distribute your application

00:43:34,060 --> 00:43:38,619
so either they will do it because they

00:43:36,580 --> 00:43:40,630
like application or you have to do kind

00:43:38,619 --> 00:43:42,580
of a debate for your app to go there

00:43:40,630 --> 00:43:45,910
that's actually not how it works on

00:43:42,580 --> 00:43:48,250
pretty much any other platform that I

00:43:45,910 --> 00:43:52,330
know like usually people you know there

00:43:48,250 --> 00:43:54,520
are you know it just just exists

00:43:52,330 --> 00:43:56,530
somewhere and the inner exists in a

00:43:54,520 --> 00:43:59,859
store or days it's on a website of

00:43:56,530 --> 00:44:02,710
people download them for that flat pack

00:43:59,859 --> 00:44:05,940
makes both of these things possible in a

00:44:02,710 --> 00:44:09,280
way that is not dependent on any

00:44:05,940 --> 00:44:12,460
distribution so that is a big deal

00:44:09,280 --> 00:44:14,589
because you know it hasn't it hasn't

00:44:12,460 --> 00:44:19,150
been done before and I think it's

00:44:14,589 --> 00:44:21,040
something that in general would you know

00:44:19,150 --> 00:44:23,349
incentivizes of the production and

00:44:21,040 --> 00:44:25,510
distribution of applications on Linux it

00:44:23,349 --> 00:44:29,099
doesn't do that for freedom it does that

00:44:25,510 --> 00:44:31,660
by taking away some of the things that

00:44:29,099 --> 00:44:33,580
distributions are really good at and

00:44:31,660 --> 00:44:36,310
then right now they're in charge of

00:44:33,580 --> 00:44:39,369
further obligations such as you know

00:44:36,310 --> 00:44:42,250
making sure that security updates are

00:44:39,369 --> 00:44:44,890
always there be control of the binaries

00:44:42,250 --> 00:44:46,900
that are distributed being control of

00:44:44,890 --> 00:44:48,700
the version of the library that you know

00:44:46,900 --> 00:44:50,950
something links to making sure that

00:44:48,700 --> 00:44:53,230
there's no peanut location of libraries

00:44:50,950 --> 00:44:58,450
between different applications that may

00:44:53,230 --> 00:45:01,810
require it's a trade-off personally I am

00:44:58,450 --> 00:45:03,820
you know amazed and kind of mind blown

00:45:01,810 --> 00:45:06,490
by the fact that that it

00:45:03,820 --> 00:45:08,500
can manage such a large selection of

00:45:06,490 --> 00:45:10,600
packages and always rebates all the

00:45:08,500 --> 00:45:14,740
applications that they have to work with

00:45:10,600 --> 00:45:17,470
all these other libraries but you know

00:45:14,740 --> 00:45:22,270
it comes at a huge cost and I personally

00:45:17,470 --> 00:45:25,660
think that you know if if if those

00:45:22,270 --> 00:45:28,630
efforts were focused on something like

00:45:25,660 --> 00:45:30,250
you know making these flat box for

00:45:28,630 --> 00:45:32,920
instance the whole community would

00:45:30,250 --> 00:45:34,690
benefit not just the people day they use

00:45:32,920 --> 00:45:38,170
that because you would work across

00:45:34,690 --> 00:45:41,170
across so you know it depends really in

00:45:38,170 --> 00:46:03,280
my mind on how much value you put on the

00:45:41,170 --> 00:46:07,600
things that I mentioned good question I

00:46:03,280 --> 00:46:11,200
didn't talk about that we take us we

00:46:07,600 --> 00:46:13,000
make images so that's how you know if

00:46:11,200 --> 00:46:17,470
you go to the endless website and

00:46:13,000 --> 00:46:20,860
download an ISO image and install it we

00:46:17,470 --> 00:46:24,640
have two installers effectively one for

00:46:20,860 --> 00:46:26,800
Windows and one for Linux so the one for

00:46:24,640 --> 00:46:33,250
Linux is super super simple we don't

00:46:26,800 --> 00:46:35,350
actually do any you know dual boot or

00:46:33,250 --> 00:46:37,170
partitioning or anything like that we

00:46:35,350 --> 00:46:39,880
just basically take the filesystem

00:46:37,170 --> 00:46:43,480
overwrite your whole Drive that you

00:46:39,880 --> 00:46:45,040
decide to use endlessly and that's

00:46:43,480 --> 00:46:48,370
mostly because like you know a lot of

00:46:45,040 --> 00:46:50,620
endless users won't come from Linux so

00:46:48,370 --> 00:46:53,520
if they come from Linux they probably

00:46:50,620 --> 00:46:55,510
don't care about keeping both the

00:46:53,520 --> 00:46:59,350
windows a store is actually a lot more

00:46:55,510 --> 00:47:01,240
interesting because it doesn't touch the

00:46:59,350 --> 00:47:01,990
partition scheme of your heart directly

00:47:01,240 --> 00:47:04,000
if

00:47:01,990 --> 00:47:08,140
from many other windows installers in

00:47:04,000 --> 00:47:11,530
the past it instead installs endless in

00:47:08,140 --> 00:47:15,580
a single file in a windows directory and

00:47:11,530 --> 00:47:18,520
then it has a driver in the basically

00:47:15,580 --> 00:47:23,950
invaded Rd on the other side to create a

00:47:18,520 --> 00:47:25,300
device mapper device inside of the you

00:47:23,950 --> 00:47:28,840
know inside the system when you boot it

00:47:25,300 --> 00:47:32,860
the knows where that file is inside the

00:47:28,840 --> 00:47:34,510
NTFS file system they have windows so it

00:47:32,860 --> 00:47:37,600
basically mass or the accepts of the

00:47:34,510 --> 00:47:39,820
file and recreates the device and by

00:47:37,600 --> 00:47:42,130
doing that you can install or uninstall

00:47:39,820 --> 00:47:44,140
and the metadata is like in a little yet

00:47:42,130 --> 00:47:47,530
file holder thing to the window folder

00:47:44,140 --> 00:47:50,410
for job boot and by doing that in

00:47:47,530 --> 00:47:52,210
commissioning sauron extol endless st

00:47:50,410 --> 00:48:08,710
was an alcohol was like it was stolen

00:47:52,210 --> 00:48:11,130
you can boot into it if you want and one

00:48:08,710 --> 00:48:13,570
problem I'm struggling with though is

00:48:11,130 --> 00:48:15,130
basically getting around the concepts of

00:48:13,570 --> 00:48:17,020
history and get finding enough

00:48:15,130 --> 00:48:19,869
documentation on how to build things

00:48:17,020 --> 00:48:22,090
properly and what I do at the moment is

00:48:19,869 --> 00:48:23,950
just look at how Fedora did it and try

00:48:22,090 --> 00:48:26,830
to figure out how they managed to build

00:48:23,950 --> 00:48:29,670
this system and yeah this is hard so I

00:48:26,830 --> 00:48:29,670
think you're wrong

00:48:33,740 --> 00:48:38,040
yeah Phil freaks are finally here today

00:48:37,050 --> 00:48:41,970
and tomorrow for sure

00:48:38,040 --> 00:48:45,800
yeah the project that I linked to he has

00:48:41,970 --> 00:48:48,390
you know the way that we use our street

00:48:45,800 --> 00:48:50,160
you know you're right the documentation

00:48:48,390 --> 00:48:53,400
control would be improved you know I

00:48:50,160 --> 00:48:56,930
know the maintainer Colin is always very

00:48:53,400 --> 00:48:56,930
open to improvements

00:49:38,510 --> 00:49:47,820
yeah so bar is it's basically taken as

00:49:45,300 --> 00:49:50,370
it is and always fountain as it is with

00:49:47,820 --> 00:49:52,410
your deployment so that's actually

00:49:50,370 --> 00:49:55,740
useful for us because it's where they

00:49:52,410 --> 00:50:00,180
work where they go into bottling the

00:49:55,740 --> 00:50:01,980
flat back and you know other things like

00:50:00,180 --> 00:50:04,440
drivers that are below that a long time

00:50:01,980 --> 00:50:07,170
we haven't really had you know something

00:50:04,440 --> 00:50:09,900
you need to be mindful not to send out

00:50:07,170 --> 00:50:13,560
an update that would not work with some

00:50:09,900 --> 00:50:15,090
stuff too heavy bar but another thing

00:50:13,560 --> 00:50:18,690
that we do is we have this little

00:50:15,090 --> 00:50:23,400
package for us and helper that system

00:50:18,690 --> 00:50:26,750
allows you to run certain units after an

00:50:23,400 --> 00:50:28,850
update so but before the echo system

00:50:26,750 --> 00:50:30,500
so there is a way for us that we have

00:50:28,850 --> 00:50:33,800
had situations in the past where we

00:50:30,500 --> 00:50:37,220
actually had to do some surgery on a

00:50:33,800 --> 00:50:40,250
directory or on a file before the new

00:50:37,220 --> 00:50:44,240
update could actually you know be booted

00:50:40,250 --> 00:50:47,960
and we have used the system v units for

00:50:44,240 --> 00:50:50,720
effort that is worth more tau and UTC so

00:50:47,960 --> 00:50:52,640
OS we does something which is a so we

00:50:50,720 --> 00:50:55,430
don't expect people to manually change

00:50:52,640 --> 00:50:58,040
stuff in EQC but if they do is three

00:50:55,430 --> 00:50:59,780
thousand three-way merge so it will take

00:50:58,040 --> 00:51:04,340
the new version the one you have the old

00:50:59,780 --> 00:51:07,180
one and try to make the most of it

00:51:04,340 --> 00:51:10,520
I think it's scenario where you know

00:51:07,180 --> 00:51:12,050
there are other solutions there and you

00:51:10,520 --> 00:51:14,630
know it's an area that may need

00:51:12,050 --> 00:51:16,460
improvement in our sweet self but so far

00:51:14,630 --> 00:51:32,060
it hasn't it hasn't given us you know

00:51:16,460 --> 00:51:35,780
paired with basically emptying me to see

00:51:32,060 --> 00:51:38,150
directory isn't it right in fact in

00:51:35,780 --> 00:51:39,640
normal situations that directory ideally

00:51:38,150 --> 00:51:40,840
would be completely

00:51:39,640 --> 00:51:41,800
anything that's can taken there would

00:51:40,840 --> 00:51:43,030
actually be stuff that the user

00:51:41,800 --> 00:51:47,020
themselves has changed and then

00:51:43,030 --> 00:51:51,330
presumably if they changed it they know

00:51:47,020 --> 00:51:54,790
what was going on there so you know

00:51:51,330 --> 00:51:57,010
ideally this you know that's basically

00:51:54,790 --> 00:51:58,750
what we don't never become special all

00:51:57,010 --> 00:52:01,410
the way over time if we have we go down

00:51:58,750 --> 00:52:01,410
this direction

00:52:05,480 --> 00:52:08,619
any other questions

00:52:12,380 --> 00:52:17,269
I wanted to get clarification on what

00:52:14,900 --> 00:52:20,950
person you just spoke mentioned so the

00:52:17,269 --> 00:52:24,430
idea I guess would be something like

00:52:20,950 --> 00:52:29,420
since so many applications look into

00:52:24,430 --> 00:53:00,549
files and Etsy for configuration the

00:52:29,420 --> 00:53:04,309
idea would be to and there's another

00:53:00,549 --> 00:53:08,089
thing that somebody has tried to do

00:53:04,309 --> 00:53:10,549
which is to separate the like versus

00:53:08,089 --> 00:53:13,759
work for users and groups right like you

00:53:10,549 --> 00:53:18,049
can see see shadow possibility and all

00:53:13,759 --> 00:53:20,089
that those can actually be generated

00:53:18,049 --> 00:53:22,640
like so you have your definition of the

00:53:20,089 --> 00:53:26,210
users somewhere else like you know in

00:53:22,640 --> 00:53:29,180
don't be snippets or whatever and then

00:53:26,210 --> 00:53:31,700
those files are composed with what you

00:53:29,180 --> 00:53:35,210
meet if something has changed in this

00:53:31,700 --> 00:53:36,890
configuration pieces and I think it's

00:53:35,210 --> 00:53:42,140
the like user generator or something

00:53:36,890 --> 00:53:44,479
it's a systemd concept and yeah

00:53:42,140 --> 00:53:45,680
otherwise if you have a problem like one

00:53:44,479 --> 00:53:48,019
problem that we had with groups

00:53:45,680 --> 00:53:52,849
specifically specifically is that if you

00:53:48,019 --> 00:53:54,559
deploy the CD bootstrap twice maybe the

00:53:52,849 --> 00:53:57,529
same group will get a different giv

00:53:54,559 --> 00:53:59,630
depending on whether other packages got

00:53:57,529 --> 00:54:01,130
explode before or after and that was a

00:53:59,630 --> 00:54:02,140
big headache precedent we cut this

00:54:01,130 --> 00:54:03,760
bundle in the corner

00:54:02,140 --> 00:54:07,960
kind of like a wave like oh these are

00:54:03,760 --> 00:54:10,690
here you know the group change ID so we

00:54:07,960 --> 00:54:13,299
right now have just a static list of all

00:54:10,690 --> 00:54:15,579
the groups that we expect to be created

00:54:13,299 --> 00:54:17,019
and we gave them static babies but using

00:54:15,579 --> 00:54:21,279
something like a generator would be much

00:54:17,019 --> 00:54:32,140
much nicer more upstream way of doing it

00:54:21,279 --> 00:54:35,460
yes all right there are no more

00:54:32,140 --> 00:54:35,460

YouTube URL: https://www.youtube.com/watch?v=XNDlCADG4ws


