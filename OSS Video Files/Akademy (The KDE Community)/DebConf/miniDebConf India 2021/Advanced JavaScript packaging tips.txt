Title: Advanced JavaScript packaging tips
Publication date: 2021-03-20
Playlist: miniDebConf India 2021
Description: 
	by Praveen Arimbrathodiyil

At: MiniDebConf India 2021
https://in2021.mini.debconf.org/talks/19-advanced-javascript-packaging-tips/

When packaging nodejs modules, often you face some complexities with the build process. I will try to cover some common cases like

1. Manually downloading a git commit snapshot when the repo does not have tags matching with npmjs.com releases
2. Exclude generated files from the source package (repacking)
3. Embed a simple dependency as a component (ignore, group and checksum options in watch file)
4. Simple case of circular self build dependency (babel-plugin-lodash build depends on itself)
5. Using extlinks and extcopies options of pkg-js-tools for creating node_modules directory with symlinks or copies of modules installed in /usr/share/nodejs

This workshop is going to be intermediate level. You should have some experience with creating debian packages.

You can learn the basics from https://wiki.debian.org/SimplePackagingTutorial

Room: Buzz
Scheduled start: 2021-01-23 18:00:00
Captions: 
	00:00:05,359 --> 00:00:09,679
hello

00:00:05,920 --> 00:00:12,880
everyone my name is praveen

00:00:09,679 --> 00:00:16,880
i'm a debian developer and

00:00:12,880 --> 00:00:19,680
i maintain a large number of

00:00:16,880 --> 00:00:19,680
javascript

00:00:20,480 --> 00:00:27,199
ruby and golang packages

00:00:23,760 --> 00:00:30,400
in debian mostly these

00:00:27,199 --> 00:00:34,000
are our dependencies of gitlab

00:00:30,400 --> 00:00:34,000
which is a web-based

00:00:34,480 --> 00:00:42,079
source code management and collaboration

00:00:38,399 --> 00:00:42,079
software based on git

00:00:42,399 --> 00:00:50,800
today we will uh go through some of the

00:00:47,520 --> 00:00:55,920
advanced techniques or more complicated

00:00:50,800 --> 00:01:00,320
uh node.js modules and how to

00:00:55,920 --> 00:01:00,320
deal with those cases

00:01:05,439 --> 00:01:13,840
so first i'll switch to

00:01:08,799 --> 00:01:13,840
the debian seed root

00:01:14,080 --> 00:01:23,680
and i will create

00:01:18,720 --> 00:01:23,680
a directory for this

00:01:25,759 --> 00:01:34,640
and today we are going to look at a

00:01:29,200 --> 00:01:34,640
node module called magic string

00:01:36,640 --> 00:01:38,960
and

00:01:39,759 --> 00:01:46,799
we will use in pm2dub to

00:01:43,759 --> 00:01:51,439
create the initial packaging

00:01:46,799 --> 00:01:53,680
so in pmt dev create magic string

00:01:51,439 --> 00:01:56,159
this will create the initial packaging

00:01:53,680 --> 00:01:56,159
files

00:01:58,479 --> 00:02:03,040
using the metadata available from

00:02:01,479 --> 00:02:07,040
npmjs.com

00:02:03,040 --> 00:02:11,599
also available in the package.json file

00:02:07,040 --> 00:02:14,879
once we download the

00:02:11,599 --> 00:02:14,879
the source files

00:02:20,720 --> 00:02:28,640
so the url uh to download the tar

00:02:24,800 --> 00:02:28,640
ball is

00:02:29,360 --> 00:02:37,760
uh is detected or is it found

00:02:32,879 --> 00:02:40,160
from the metadata in npm.npm.js

00:02:37,760 --> 00:02:41,360
and then we construct a watch file and

00:02:40,160 --> 00:02:46,560
then i use

00:02:41,360 --> 00:02:46,560
use scan to download the

00:02:47,519 --> 00:02:52,160
source star ball all of this is

00:02:49,680 --> 00:02:56,160
automated

00:02:52,160 --> 00:02:56,160
in npm two and now

00:02:56,400 --> 00:03:03,519
we also use another tool called pkg.js

00:03:00,159 --> 00:03:07,680
tools which will

00:03:03,519 --> 00:03:11,040
automate some common tasks for us so

00:03:07,680 --> 00:03:11,040
you can see it will try to

00:03:12,319 --> 00:03:19,599
check you know whether the module

00:03:16,000 --> 00:03:21,599
can be module is working does it have

00:03:19,599 --> 00:03:23,680
all the required files so

00:03:21,599 --> 00:03:25,120
we run a require on the current

00:03:23,680 --> 00:03:29,440
directory

00:03:25,120 --> 00:03:29,440
and node is saying

00:03:29,519 --> 00:03:38,799
uh you know this slash

00:03:33,680 --> 00:03:42,959
magic string.cjs.js is not found

00:03:38,799 --> 00:03:46,640
uh and this is the file mentioned in the

00:03:42,959 --> 00:03:50,799
as the main entry point to our module

00:03:46,640 --> 00:03:53,599
in the package.json if we look at the

00:03:50,799 --> 00:03:53,599
package

00:03:55,360 --> 00:03:59,280
okay first we need to go to the

00:03:57,439 --> 00:04:02,720
directory

00:03:59,280 --> 00:04:04,879
so if you have used 10 bmw before you

00:04:02,720 --> 00:04:07,280
know we will have to go to this

00:04:04,879 --> 00:04:12,239
directory

00:04:07,280 --> 00:04:15,200
and if you see the pk package.json file

00:04:12,239 --> 00:04:16,400
then you will see there is a main

00:04:15,200 --> 00:04:19,840
section

00:04:16,400 --> 00:04:24,880
or field which says this slash

00:04:19,840 --> 00:04:24,880
magic string.cjs.js and

00:04:25,360 --> 00:04:29,040
our package just tools automatically

00:04:27,680 --> 00:04:32,479
tries to see

00:04:29,040 --> 00:04:35,759
if the require call will work

00:04:32,479 --> 00:04:38,160
so it found that this file is missing

00:04:35,759 --> 00:04:39,199
uh so we need to create this file

00:04:38,160 --> 00:04:41,440
usually

00:04:39,199 --> 00:04:42,639
the files in the disk directory are

00:04:41,440 --> 00:04:45,919
generated

00:04:42,639 --> 00:04:48,960
from the other files in the source code

00:04:45,919 --> 00:04:53,199
other source files in the directory

00:04:48,960 --> 00:04:57,120
and there will be a set of

00:04:53,199 --> 00:05:02,240
commands mentioned under the scripts

00:04:57,120 --> 00:05:02,240
section and usually it is the build

00:05:04,240 --> 00:05:10,560
build entry which will

00:05:07,440 --> 00:05:14,800
tell us how to build uh the required

00:05:10,560 --> 00:05:17,039
files so in this case uh this

00:05:14,800 --> 00:05:18,479
we need to run this command called

00:05:17,039 --> 00:05:21,520
rollup

00:05:18,479 --> 00:05:22,880
so if you look at the files you can see

00:05:21,520 --> 00:05:26,080
there is a rollup dot

00:05:22,880 --> 00:05:27,479
config so usually

00:05:26,080 --> 00:05:29,199
you know when there is a role of the

00:05:27,479 --> 00:05:32,160
config.js

00:05:29,199 --> 00:05:33,840
most of the time uh we need to just run

00:05:32,160 --> 00:05:35,919
roll up minus c but

00:05:33,840 --> 00:05:38,840
uh just to be sure it's always a good

00:05:35,919 --> 00:05:41,759
idea to check the

00:05:38,840 --> 00:05:44,400
package.json file so that

00:05:41,759 --> 00:05:44,400
we are note

00:05:44,960 --> 00:05:49,919
we don't have to guess or it may have

00:05:47,440 --> 00:05:53,120
other options or maybe other

00:05:49,919 --> 00:05:55,880
steps that are required uh so

00:05:53,120 --> 00:05:57,039
now uh we know we need to run

00:05:55,880 --> 00:06:00,479
rollup.config.js

00:05:57,039 --> 00:06:05,360
and we know this

00:06:00,479 --> 00:06:05,360
uh in vmt dev has already

00:06:05,520 --> 00:06:14,319
configured this package to use

00:06:08,560 --> 00:06:17,840
package.js tools so for package.js tools

00:06:14,319 --> 00:06:21,520
uh we need to tell it to

00:06:17,840 --> 00:06:22,560
run the rollup minus c command during

00:06:21,520 --> 00:06:26,479
build

00:06:22,560 --> 00:06:29,600
so for that we can use a file called

00:06:26,479 --> 00:06:30,639
debian slash node.js slash build but we

00:06:29,600 --> 00:06:33,360
need to first

00:06:30,639 --> 00:06:35,280
create the directory debian slash

00:06:33,360 --> 00:06:39,039
node.js

00:06:35,280 --> 00:06:40,160
and then we create a debian node.js

00:06:39,039 --> 00:06:43,919
slash build

00:06:40,160 --> 00:06:49,840
file and in that we add rollup

00:06:43,919 --> 00:06:49,840
minus c and then uh

00:06:50,720 --> 00:06:59,520
on the build dependencies we need to

00:06:54,080 --> 00:06:59,520
add product

00:07:00,880 --> 00:07:06,000
okay now uh let's see if it builds

00:07:10,800 --> 00:07:17,440
okay this is probably

00:07:14,240 --> 00:07:20,400
a bug in the package.js tools that

00:07:17,440 --> 00:07:21,680
doesn't clean the node modules directly

00:07:20,400 --> 00:07:24,639
correctly

00:07:21,680 --> 00:07:24,639
so we need to

00:07:24,720 --> 00:07:32,880
remove this

00:07:28,560 --> 00:07:32,880
node modules directory

00:07:33,599 --> 00:07:37,230
uh

00:07:34,130 --> 00:07:37,230
[Music]

00:07:38,000 --> 00:07:42,080
so with the node modules given in debian

00:07:40,400 --> 00:07:44,960
search screen it went

00:07:42,080 --> 00:07:46,560
on to run the rollup command now you can

00:07:44,960 --> 00:07:48,960
see it's

00:07:46,560 --> 00:07:50,400
actually running the debian node.js

00:07:48,960 --> 00:07:53,039
build script

00:07:50,400 --> 00:07:54,720
uh and then it's running rule of mine c

00:07:53,039 --> 00:07:57,280
and it says

00:07:54,720 --> 00:07:59,840
cannot find module rollout plugin node

00:07:57,280 --> 00:07:59,840
result

00:08:00,000 --> 00:08:06,240
okay uh so

00:08:03,199 --> 00:08:09,680
probably let's see if that is already

00:08:06,240 --> 00:08:13,440
available so you can say add policy

00:08:09,680 --> 00:08:13,840
node clicking note result and you can

00:08:13,440 --> 00:08:17,520
see

00:08:13,840 --> 00:08:21,680
this is already installed but then

00:08:17,520 --> 00:08:22,160
uh this uh this particular module magic

00:08:21,680 --> 00:08:25,440
string

00:08:22,160 --> 00:08:28,560
is using a legacy version of the

00:08:25,440 --> 00:08:31,039
roll-up plug-in node result uh the

00:08:28,560 --> 00:08:31,680
modern versions the maintained versions

00:08:31,039 --> 00:08:35,279
now

00:08:31,680 --> 00:08:38,479
uh would need at roll-up slash

00:08:35,279 --> 00:08:42,080
plug-in hyphen node hyphen resolve

00:08:38,479 --> 00:08:42,080
so uh we need to

00:08:43,360 --> 00:08:46,800
uh modify this file the roll-up

00:08:45,760 --> 00:08:50,320
configuration

00:08:46,800 --> 00:08:52,720
and use the modern versions of

00:08:50,320 --> 00:08:55,519
the these plural plugins instead of

00:08:52,720 --> 00:09:00,000
their legacy plugin so now

00:08:55,519 --> 00:09:04,000
for this we need to use quilt

00:09:00,000 --> 00:09:07,040
uh usually quilt is what

00:09:04,000 --> 00:09:11,279
i recommend for modifying

00:09:07,040 --> 00:09:13,839
upstream files so

00:09:11,279 --> 00:09:15,839
so you will need to create a quilt rc

00:09:13,839 --> 00:09:19,440
file

00:09:15,839 --> 00:09:22,560
and you can just see uh

00:09:19,440 --> 00:09:24,720
using quilt wiki page

00:09:22,560 --> 00:09:24,720
in

00:09:27,040 --> 00:09:30,880
in wikido debut.org

00:09:32,080 --> 00:09:39,920
slash using quilt uh

00:09:36,480 --> 00:09:44,800
i have already uh configured quilt so

00:09:39,920 --> 00:09:48,839
i will go ahead and create a patch

00:09:44,800 --> 00:09:52,160
so i will say quilt

00:09:48,839 --> 00:09:55,360
new use

00:09:52,160 --> 00:09:58,720
modern roll-up

00:09:55,360 --> 00:10:02,000
plug-in stock patch

00:09:58,720 --> 00:10:05,839
you know we add

00:10:02,000 --> 00:10:09,440
product to now we can edit

00:10:05,839 --> 00:10:13,839
this file and we will

00:10:09,440 --> 00:10:16,880
change this to roll up

00:10:13,839 --> 00:10:16,880
again bubble

00:10:17,040 --> 00:10:24,560
and it roll up plug in no drizzle

00:10:21,519 --> 00:10:29,680
at roll up slash

00:10:24,560 --> 00:10:33,839
legging replace and now

00:10:29,680 --> 00:10:33,839
we need to do kilty fish and

00:10:37,600 --> 00:10:49,440
let's build the package now

00:10:46,320 --> 00:10:49,440
so far so good

00:10:49,760 --> 00:10:52,480
it built

00:10:54,880 --> 00:11:03,839
these files i think for es and

00:11:00,720 --> 00:11:06,240
uh common js files you know even if the

00:11:03,839 --> 00:11:09,600
module is not resolved it's fine it

00:11:06,240 --> 00:11:13,040
just does the required thing but i think

00:11:09,600 --> 00:11:16,160
when you create a umd file

00:11:13,040 --> 00:11:19,680
you expect to you know bundle every

00:11:16,160 --> 00:11:21,279
dependency inside the umd thing so you

00:11:19,680 --> 00:11:24,399
need to

00:11:21,279 --> 00:11:26,399
resolve uh this

00:11:24,399 --> 00:11:29,040
particular dependency in this case you

00:11:26,399 --> 00:11:30,399
can see and resolve dependency source

00:11:29,040 --> 00:11:33,440
map code of

00:11:30,399 --> 00:11:38,160
codec imported by

00:11:33,440 --> 00:11:43,680
uh source src slash source map.js

00:11:38,160 --> 00:11:46,959
so now we need to tell

00:11:43,680 --> 00:11:49,519
uh roll up or the node resolve plugin

00:11:46,959 --> 00:11:50,880
to find the source map product so let's

00:11:49,519 --> 00:11:54,079
see if this is actually

00:11:50,880 --> 00:11:55,120
installed or not so you can say i have

00:11:54,079 --> 00:11:57,440
to

00:11:55,120 --> 00:11:59,760
note i can source correct so it's

00:11:57,440 --> 00:12:03,440
actually installed

00:11:59,760 --> 00:12:05,360
uh that is a new version but uh

00:12:03,440 --> 00:12:07,839
it should be able to find the old

00:12:05,360 --> 00:12:11,360
version just fine

00:12:07,839 --> 00:12:15,200
for this workshop purpose

00:12:11,360 --> 00:12:19,360
so now okay we need to create another

00:12:15,200 --> 00:12:23,040
patch again say with new

00:12:19,360 --> 00:12:23,040
use system

00:12:23,120 --> 00:12:30,399
this one modules

00:12:26,560 --> 00:12:33,839
and system dot patch

00:12:30,399 --> 00:12:37,519
and sequence add

00:12:33,839 --> 00:12:37,519
okay and

00:12:37,760 --> 00:12:41,680
uh and this we need to

00:12:41,920 --> 00:12:48,880
uh tell the

00:12:45,600 --> 00:12:52,880
node resolve plugin to also look in

00:12:48,880 --> 00:12:56,959
the system directories

00:12:52,880 --> 00:13:00,720
like user share.js

00:12:56,959 --> 00:13:04,240
for user lib node.js in the old

00:13:00,720 --> 00:13:06,240
the old directory so

00:13:04,240 --> 00:13:08,720
sometimes you know the module if it's

00:13:06,240 --> 00:13:12,000
not upgraded for a long time it might be

00:13:08,720 --> 00:13:16,639
in your lymph node tray so

00:13:12,000 --> 00:13:21,839
keep that in mind uh so we need to turn

00:13:16,639 --> 00:13:24,320
module directories

00:13:21,839 --> 00:13:24,320
as

00:13:26,560 --> 00:13:35,839
slash users share your change

00:13:36,000 --> 00:13:39,519
okay and

00:13:39,920 --> 00:13:46,639
for this to work this particular option

00:13:43,199 --> 00:13:46,639
is introduced from

00:13:46,720 --> 00:13:51,680
uh roll up plugin node resolve

00:13:53,680 --> 00:13:57,920
you know the plugin

00:13:56,180 --> 00:14:03,199
[Music]

00:13:57,920 --> 00:14:05,199
greater than or equal to 11.

00:14:03,199 --> 00:14:06,320
in older versions uh there is a

00:14:05,199 --> 00:14:08,639
different option

00:14:06,320 --> 00:14:11,279
called custom resolve options and then

00:14:08,639 --> 00:14:15,120
module directory

00:14:11,279 --> 00:14:18,480
and we also need node prolog

00:14:15,120 --> 00:14:21,760
like in bubble as well as

00:14:18,480 --> 00:14:25,199
no no not like in

00:14:21,760 --> 00:14:29,199
replace to build this

00:14:25,199 --> 00:14:29,199
okay now let's see

00:14:29,519 --> 00:14:36,160
that's works not okay

00:14:33,040 --> 00:14:40,320
so it has generated files in this so

00:14:36,160 --> 00:14:43,680
we need to clean that up so we will

00:14:40,320 --> 00:14:48,160
need to keep this also

00:14:43,680 --> 00:14:48,160
in the davinci

00:14:53,360 --> 00:14:59,760
okay so now we can see the umd file

00:14:56,399 --> 00:15:02,079
is built without any warnings because

00:14:59,760 --> 00:15:04,399
it's able to resolve

00:15:02,079 --> 00:15:05,199
a source map codec from user share

00:15:04,399 --> 00:15:08,240
node.js

00:15:05,199 --> 00:15:13,600
and then bundle it

00:15:08,240 --> 00:15:17,040
in the um magixteen.umd

00:15:13,600 --> 00:15:17,040
dot js

00:15:23,199 --> 00:15:31,680
now uh let's look at some uh

00:15:27,839 --> 00:15:31,680
typescript related

00:15:32,079 --> 00:15:34,800
concept

00:15:38,639 --> 00:15:47,920
we will use the package cosmic config

00:15:44,399 --> 00:15:51,600
which is written in typescript and

00:15:47,920 --> 00:15:54,639
it needs some typescript definitions

00:15:51,600 --> 00:15:56,800
during build and

00:15:54,639 --> 00:15:56,800
uh

00:15:58,240 --> 00:16:02,160
the typescript package with the upstream

00:16:00,639 --> 00:16:05,920
uh does not provide

00:16:02,160 --> 00:16:10,480
an easy method to actually configure

00:16:05,920 --> 00:16:10,480
it to look uh in user

00:16:12,720 --> 00:16:18,320
share node.js or the old user lib

00:16:15,600 --> 00:16:18,320
node.js

00:16:18,959 --> 00:16:23,519
to look for type definition so we need

00:16:22,560 --> 00:16:25,759
to use uh

00:16:23,519 --> 00:16:28,240
some other techniques so that you know

00:16:25,759 --> 00:16:31,360
we create a symbolic link

00:16:28,240 --> 00:16:35,839
in node underscore modules directory

00:16:31,360 --> 00:16:36,240
uh so that you know typescript can find

00:16:35,839 --> 00:16:39,920
the

00:16:36,240 --> 00:16:45,360
type definitions so

00:16:39,920 --> 00:16:51,839
i'll start with creating uh this

00:16:45,360 --> 00:16:51,839
initial packaging with npm to dev

00:16:52,000 --> 00:16:56,800
and you can see it has dependency on

00:16:55,759 --> 00:17:00,959
types parts

00:16:56,800 --> 00:17:04,640
jason and then import fresh and

00:17:00,959 --> 00:17:07,600
not packaged and

00:17:04,640 --> 00:17:09,520
this is actually not built when it just

00:17:07,600 --> 00:17:10,079
tries to run the required it doesn't

00:17:09,520 --> 00:17:12,959
have

00:17:10,079 --> 00:17:13,760
the required files so for example it

00:17:12,959 --> 00:17:17,679
needs this

00:17:13,760 --> 00:17:20,640
index.js which is not present

00:17:17,679 --> 00:17:21,439
this index.js is the main entry

00:17:20,640 --> 00:17:24,720
mentioned

00:17:21,439 --> 00:17:28,240
in the package.json file so if we

00:17:24,720 --> 00:17:30,080
go to course we config not firstly

00:17:28,240 --> 00:17:32,799
config

00:17:30,080 --> 00:17:33,440
in package.json you will see the main

00:17:32,799 --> 00:17:36,240
entry

00:17:33,440 --> 00:17:37,120
is this index.js and also you can see

00:17:36,240 --> 00:17:40,480
that as

00:17:37,120 --> 00:17:43,600
type definitions uh types

00:17:40,480 --> 00:17:47,039
uh which should be this index.d ds

00:17:43,600 --> 00:17:49,039
but you can see that so this directory

00:17:47,039 --> 00:17:52,000
because it's only the source we need to

00:17:49,039 --> 00:17:54,640
generate this directory

00:17:52,000 --> 00:17:56,640
and uh let's see how to generate the

00:17:54,640 --> 00:18:02,080
dist uh directory so

00:17:56,640 --> 00:18:03,919
let's see how this package is built

00:18:02,080 --> 00:18:05,919
so you can see there are under the

00:18:03,919 --> 00:18:06,559
script session you can see there's a

00:18:05,919 --> 00:18:09,760
build

00:18:06,559 --> 00:18:13,360
and then it has you know first it

00:18:09,760 --> 00:18:13,360
npmd and clean and then

00:18:13,679 --> 00:18:21,120
the clean uh field says dell cli

00:18:19,039 --> 00:18:22,320
through this basically just removes

00:18:21,120 --> 00:18:24,960
everything in the disk

00:18:22,320 --> 00:18:24,960
directory

00:18:25,520 --> 00:18:31,360
so we can just do a debian clean

00:18:28,640 --> 00:18:33,280
file instead so we can ignore this part

00:18:31,360 --> 00:18:34,320
and then we come to the npm build

00:18:33,280 --> 00:18:38,240
combine part

00:18:34,320 --> 00:18:39,600
and which is actually cross and vehicles

00:18:38,240 --> 00:18:42,720
northern

00:18:39,600 --> 00:18:42,720
production and

00:18:44,559 --> 00:18:52,240
and then verbose exceptions and so on so

00:18:49,120 --> 00:18:53,360
uh the northern nuclear prediction and

00:18:52,240 --> 00:18:56,080
the crossing thing

00:18:53,360 --> 00:18:59,679
i think we can ignore that for now

00:18:56,080 --> 00:19:03,520
because it doesn't actually

00:18:59,679 --> 00:19:03,520
use any of the

00:19:09,600 --> 00:19:15,039
or any of the environment specific

00:19:12,919 --> 00:19:18,640
configurations so

00:19:15,039 --> 00:19:22,400
we copy the in there command and since

00:19:18,640 --> 00:19:25,440
we are using pkgis

00:19:22,400 --> 00:19:29,520
tools so we can just create

00:19:25,440 --> 00:19:33,760
a debian node.js directory and then

00:19:29,520 --> 00:19:37,919
inside that you can create a script

00:19:33,760 --> 00:19:40,559
called build and then i just say

00:19:37,919 --> 00:19:41,840
the command that you want to run to

00:19:40,559 --> 00:19:44,960
build

00:19:41,840 --> 00:19:47,760
the in in this case the barbell command

00:19:44,960 --> 00:19:49,039
is available as power injects in debian

00:19:47,760 --> 00:19:50,960
because

00:19:49,039 --> 00:19:52,960
i think there is some other bubble

00:19:50,960 --> 00:19:56,000
command already taken

00:19:52,960 --> 00:19:59,440
by another package now we have only one

00:19:56,000 --> 00:20:01,679
name space for commands in debian so

00:19:59,440 --> 00:20:03,200
usually uh one or the other package has

00:20:01,679 --> 00:20:05,200
to rename

00:20:03,200 --> 00:20:06,799
you should need the second package the

00:20:05,200 --> 00:20:11,600
first package is to keep

00:20:06,799 --> 00:20:14,640
the command so now we did a

00:20:11,600 --> 00:20:14,640
uh you know

00:20:16,880 --> 00:20:21,039
we mentioned the build command and then

00:20:19,120 --> 00:20:22,960
now the parking space tools will

00:20:21,039 --> 00:20:27,440
actually take this and build it and

00:20:22,960 --> 00:20:27,440
uh we need to

00:20:28,000 --> 00:20:31,440
mention the build dependency for

00:20:30,480 --> 00:20:35,520
bubble.js

00:20:31,440 --> 00:20:38,960
is actually no

00:20:35,520 --> 00:20:43,120
cli and

00:20:38,960 --> 00:20:43,120
let's see if we can print this

00:20:43,840 --> 00:20:51,039
okay so that is first it says there is a

00:20:47,760 --> 00:20:54,640
node module slash cosmic config probably

00:20:51,039 --> 00:20:57,760
that is a bug in ptd js tools

00:20:54,640 --> 00:21:00,840
it doesn't actually clean it properly

00:20:57,760 --> 00:21:02,080
i'll show we have to manually clean it

00:21:00,840 --> 00:21:06,799
now

00:21:02,080 --> 00:21:11,840
so we create a debian slash clean

00:21:06,799 --> 00:21:14,840
uh file and since micro doesn't add a

00:21:11,840 --> 00:21:16,240
new layer the end of file we added

00:21:14,840 --> 00:21:19,280
manually

00:21:16,240 --> 00:21:20,480
then now if we run it would actually

00:21:19,280 --> 00:21:25,440
remove the node

00:21:20,480 --> 00:21:25,440
modules and between then bobbin and

00:21:25,520 --> 00:21:29,120
okay it has to build but then okay then

00:21:27,919 --> 00:21:33,600
say can pass

00:21:29,120 --> 00:21:38,320
dependency it's actually a bug in

00:21:33,600 --> 00:21:38,320
npm to dev it doesn't actually

00:21:38,480 --> 00:21:44,240
you know convert this module name to

00:21:41,679 --> 00:21:45,919
the package name properly when you know

00:21:44,240 --> 00:21:49,039
there is another range

00:21:45,919 --> 00:21:50,640
in the module name this doesn't used to

00:21:49,039 --> 00:21:55,200
be very common early so

00:21:50,640 --> 00:21:55,200
in bmt that doesn't handle it well

00:21:56,000 --> 00:22:00,640
you need to update paint it up and then

00:21:58,080 --> 00:22:05,760
you can see okay this is already created

00:22:00,640 --> 00:22:09,200
so uh we need to clean that again

00:22:05,760 --> 00:22:12,240
uh before we start building

00:22:09,200 --> 00:22:14,960
we specify this them in clean

00:22:12,240 --> 00:22:17,280
so that will get removed before the

00:22:14,960 --> 00:22:17,280
build

00:22:17,440 --> 00:22:21,120
so this code build but then it doesn't

00:22:20,320 --> 00:22:24,080
actually

00:22:21,120 --> 00:22:24,080
include the

00:22:24,559 --> 00:22:30,799
type definitions are not included so we

00:22:28,720 --> 00:22:33,280
still need to

00:22:30,799 --> 00:22:35,679
see how to generate the type definition

00:22:33,280 --> 00:22:39,520
so we again go

00:22:35,679 --> 00:22:40,640
to package.json so after will compile it

00:22:39,520 --> 00:22:43,679
needs to run

00:22:40,640 --> 00:22:44,159
build column types and then if you see

00:22:43,679 --> 00:22:47,600
build

00:22:44,159 --> 00:22:48,640
column types again it has to cross end

00:22:47,600 --> 00:22:51,919
with the node and

00:22:48,640 --> 00:22:51,919
thing which we can

00:22:53,679 --> 00:23:01,039
the ign variable but

00:22:57,120 --> 00:23:02,400
now we do the command this is the dse

00:23:01,039 --> 00:23:04,960
minus minus project

00:23:02,400 --> 00:23:07,200
it's going to be types to json so that

00:23:04,960 --> 00:23:11,280
is the command to actually

00:23:07,200 --> 00:23:11,280
generate the types so we will

00:23:11,360 --> 00:23:20,240
give this in the debian node.js build

00:23:16,240 --> 00:23:20,240
and now let's see what happens

00:23:20,880 --> 00:23:23,840
uh

00:23:24,000 --> 00:23:29,600
tsc will need the type definitions and

00:23:27,120 --> 00:23:33,120
which it cannot find and then

00:23:29,600 --> 00:23:36,080
it actually says no uh

00:23:33,120 --> 00:23:38,960
cannot find name required do you need to

00:23:36,080 --> 00:23:41,840
install type definition for node

00:23:38,960 --> 00:23:42,960
this and here minus i types node so

00:23:41,840 --> 00:23:46,080
let's see if

00:23:42,960 --> 00:23:46,720
that is already available or not we can

00:23:46,080 --> 00:23:51,840
see

00:23:46,720 --> 00:23:51,840
at file

00:23:56,400 --> 00:24:02,480
we can limit this so that

00:23:59,520 --> 00:24:02,480
you know we only

00:24:02,840 --> 00:24:08,799
get uh the actual package name and not

00:24:05,919 --> 00:24:11,679
the whole list uh so you can see this is

00:24:08,799 --> 00:24:15,840
actually included in the node.js package

00:24:11,679 --> 00:24:15,840
so you know we don't really have to

00:24:16,840 --> 00:24:19,840
uh

00:24:20,799 --> 00:24:24,320
specify any additional uh build

00:24:23,039 --> 00:24:27,760
dependency

00:24:24,320 --> 00:24:31,279
node.js is already mentioned in

00:24:27,760 --> 00:24:34,400
the field dependency but then

00:24:31,279 --> 00:24:35,360
typescript cannot search in usage

00:24:34,400 --> 00:24:39,039
node.js

00:24:35,360 --> 00:24:40,960
or there is no easy way we could uh

00:24:39,039 --> 00:24:45,039
successfully software we could

00:24:40,960 --> 00:24:47,520
patch typescript but then lastly when we

00:24:45,039 --> 00:24:50,960
tried it didn't actually work

00:24:47,520 --> 00:24:54,080
we have a past i think baby

00:24:50,960 --> 00:24:56,320
grant gulp

00:24:54,080 --> 00:24:58,240
uh these tools to automatically look a

00:24:56,320 --> 00:24:59,520
new session not just and obviously

00:24:58,240 --> 00:25:01,679
node.js itself

00:24:59,520 --> 00:25:02,960
looks in these directories by default

00:25:01,679 --> 00:25:06,240
with typescript

00:25:02,960 --> 00:25:09,840
we have not been able to do this

00:25:06,240 --> 00:25:11,200
until now we have requested upstream to

00:25:09,840 --> 00:25:14,240
provide an option

00:25:11,200 --> 00:25:17,440
to say this to pass this

00:25:14,240 --> 00:25:20,720
variable but it doesn't actually

00:25:17,440 --> 00:25:24,240
exist as of now so what we need to do is

00:25:20,720 --> 00:25:29,039
we need to create a symbolic link

00:25:24,240 --> 00:25:31,039
to this directory uh

00:25:29,039 --> 00:25:32,240
you know inside the node modules

00:25:31,039 --> 00:25:34,960
directory so

00:25:32,240 --> 00:25:35,760
that you know types you can find it so

00:25:34,960 --> 00:25:38,320
you have

00:25:35,760 --> 00:25:39,360
you can actually manually add that in

00:25:38,320 --> 00:25:43,120
the debian

00:25:39,360 --> 00:25:45,600
js build a file but there is an easier

00:25:43,120 --> 00:25:49,200
way provided by

00:25:45,600 --> 00:25:52,320
pkgis tools that is you create

00:25:49,200 --> 00:25:53,679
debian node.js and then a file called xt

00:25:52,320 --> 00:25:58,240
links

00:25:53,679 --> 00:26:02,880
and then you mentioned which

00:25:58,240 --> 00:26:02,880
module from the system should be

00:26:03,760 --> 00:26:11,440
added as a symbolic link inside the

00:26:08,400 --> 00:26:13,360
you know debian underscore inside the

00:26:11,440 --> 00:26:16,960
node and the square module so now

00:26:13,360 --> 00:26:20,080
let's try to fill this game

00:26:16,960 --> 00:26:22,240
and you can see inside the dh underscore

00:26:20,080 --> 00:26:24,159
configure it actually now creates node

00:26:22,240 --> 00:26:26,960
modules directly and then

00:26:24,159 --> 00:26:29,679
types directory and then create a

00:26:26,960 --> 00:26:30,159
symbolic link or usage node.js types

00:26:29,679 --> 00:26:34,640
node

00:26:30,159 --> 00:26:38,559
to your underscore module slash types

00:26:34,640 --> 00:26:41,600
so you can see the number of errors has

00:26:38,559 --> 00:26:43,360
decreased but still it has three more

00:26:41,600 --> 00:26:46,000
errors

00:26:43,360 --> 00:26:46,880
you know it says it cannot find module

00:26:46,000 --> 00:26:50,080
path

00:26:46,880 --> 00:26:53,679
type or its corresponding type

00:26:50,080 --> 00:26:58,080
declaration so again now we can use

00:26:53,679 --> 00:27:00,960
app file filed

00:26:58,080 --> 00:27:02,080
uh we need to find path type slash

00:27:00,960 --> 00:27:04,640
package to

00:27:02,080 --> 00:27:07,200
json if there is a module like that so

00:27:04,640 --> 00:27:10,159
actually you can say

00:27:07,200 --> 00:27:11,840
you know there is a node path type and

00:27:10,159 --> 00:27:15,360
also this is

00:27:11,840 --> 00:27:15,360
embedded in girl

00:27:15,520 --> 00:27:22,480
okay so we can use the node path type

00:27:20,000 --> 00:27:22,480
and then

00:27:23,919 --> 00:27:29,600
it needs to be in the bin dependency

00:27:29,760 --> 00:27:40,480
in my system it is already installed

00:27:35,600 --> 00:27:40,480
use social not just but

00:27:40,960 --> 00:27:45,679
type is somebody there and you can see

00:27:43,600 --> 00:27:49,600
downloading includes the type definition

00:27:45,679 --> 00:27:54,000
so we don't need

00:27:49,600 --> 00:27:59,520
uh type slash

00:27:54,000 --> 00:27:59,520
path type separately so now we need to

00:28:00,840 --> 00:28:05,520
tell

00:28:02,880 --> 00:28:08,640
uh pkg.js tools to create another

00:28:05,520 --> 00:28:12,559
symbolic link

00:28:08,640 --> 00:28:17,520
for pop type then now let's say

00:28:12,559 --> 00:28:22,159
it was three errors earlier let's see

00:28:17,520 --> 00:28:22,159
if it improves the situation

00:28:22,880 --> 00:28:28,080
okay now we only have two errors the

00:28:25,919 --> 00:28:31,600
next one is cannot find module

00:28:28,080 --> 00:28:35,279
pass json uh so let's

00:28:31,600 --> 00:28:38,559
again do an apt file find

00:28:35,279 --> 00:28:41,679
uh pause jason slash package to

00:28:38,559 --> 00:28:45,840
jason yes

00:28:41,679 --> 00:28:48,960
there is a node pulsation which

00:28:45,840 --> 00:28:49,840
includes you know types parts json as

00:28:48,960 --> 00:28:52,880
well as

00:28:49,840 --> 00:28:54,880
you know partition so we are interested

00:28:52,880 --> 00:28:57,840
in the type definition here so

00:28:54,880 --> 00:29:00,080
we need uh to create a symbolic link for

00:28:57,840 --> 00:29:03,360
this

00:29:00,080 --> 00:29:05,919
because the in this case type definition

00:29:03,360 --> 00:29:06,640
and the module these are two separate

00:29:05,919 --> 00:29:12,000
modules

00:29:06,640 --> 00:29:15,200
not a single module so we again tell

00:29:12,000 --> 00:29:18,240
pkg.js tools to

00:29:15,200 --> 00:29:20,480
create another symbolic link

00:29:18,240 --> 00:29:23,840
so if you look at the node modules you

00:29:20,480 --> 00:29:28,480
can see these two are already simulate

00:29:23,840 --> 00:29:28,480
now we run the print again

00:29:32,000 --> 00:29:36,080
okay now that is the final error it

00:29:35,039 --> 00:29:39,919
cannot find

00:29:36,080 --> 00:29:41,039
a type definition for import fresh so

00:29:39,919 --> 00:29:45,760
again let's say

00:29:41,039 --> 00:29:48,880
art file right import first slash

00:29:45,760 --> 00:29:51,919
quickly statistic okay this

00:29:48,880 --> 00:29:52,399
is uh that's interesting uh this is

00:29:51,919 --> 00:29:55,919
actually

00:29:52,399 --> 00:29:57,039
embedded in resolve from package but

00:29:55,919 --> 00:30:00,880
it's available

00:29:57,039 --> 00:30:03,200
in recession or js import fish

00:30:00,880 --> 00:30:05,440
let's see if it has a type definition as

00:30:03,200 --> 00:30:05,440
well

00:30:07,200 --> 00:30:12,480
okay there is index.d.t.s so that is the

00:30:10,399 --> 00:30:16,640
type definition so we just need to

00:30:12,480 --> 00:30:20,000
create a symbolic link for import fresh

00:30:16,640 --> 00:30:22,960
again tell next links

00:30:20,000 --> 00:30:25,039
packages tool create a symbolic link for

00:30:22,960 --> 00:30:29,039
import first and then

00:30:25,039 --> 00:30:29,039
the dpkgp package

00:30:33,679 --> 00:30:42,399
okay now it build fine and to

00:30:37,679 --> 00:30:42,399
confirm we can say debian node

00:30:42,960 --> 00:30:50,080
uh cosmic config user share

00:30:46,080 --> 00:30:51,120
node.js specifically and it has this a

00:30:50,080 --> 00:30:54,559
list has

00:30:51,120 --> 00:30:57,760
the types to t to ts and

00:30:54,559 --> 00:31:01,840
another the js file index.d

00:30:57,760 --> 00:31:01,840
to ts and all the files

00:31:02,080 --> 00:31:07,360
so now we

00:31:05,360 --> 00:31:08,720
learned how to search for type

00:31:07,360 --> 00:31:12,240
definitions and

00:31:08,720 --> 00:31:14,880
uh find out which package

00:31:12,240 --> 00:31:15,360
includes the type definition sometimes

00:31:14,880 --> 00:31:19,200
you know

00:31:15,360 --> 00:31:22,880
the same module has

00:31:19,200 --> 00:31:23,760
uh the type definition as well as the

00:31:22,880 --> 00:31:26,559
javascript

00:31:23,760 --> 00:31:28,720
uh files but sometimes it's a separate

00:31:26,559 --> 00:31:31,279
module but it could still be part of the

00:31:28,720 --> 00:31:35,600
same debian package because

00:31:31,279 --> 00:31:39,279
we embed the type definitions inside the

00:31:35,600 --> 00:31:39,279
debian package so

00:31:40,480 --> 00:31:46,399
and that is how we find the module and

00:31:43,440 --> 00:31:47,600
then we use the package.js tools x links

00:31:46,399 --> 00:31:50,880
uh trick

00:31:47,600 --> 00:31:54,640
so that you know it creates a symbolic

00:31:50,880 --> 00:31:58,320
link inside the node modules directory

00:31:54,640 --> 00:32:01,519
uh so that typescript can find the type

00:31:58,320 --> 00:32:04,799
of definition so that's it

00:32:01,519 --> 00:32:04,799
for this particular

00:32:04,960 --> 00:32:07,360
topic

00:32:08,399 --> 00:32:16,240
okay now uh let's see how do we actually

00:32:11,919 --> 00:32:16,240
embed some modules

00:32:17,120 --> 00:32:22,159
inside another module because when

00:32:23,679 --> 00:32:31,840
we looked at uh

00:32:28,799 --> 00:32:31,840
path type

00:32:35,120 --> 00:32:39,279
earlier you can see

00:32:41,120 --> 00:32:50,640
uh it had some bought some

00:32:45,919 --> 00:32:53,760
type definitions already uh part of

00:32:50,640 --> 00:32:56,720
the package because the masters

00:32:53,760 --> 00:32:58,080
doesn't really like small packages so we

00:32:56,720 --> 00:33:01,440
try to

00:32:58,080 --> 00:33:04,480
bundle how many small modules

00:33:01,440 --> 00:33:08,240
inside the one

00:33:04,480 --> 00:33:08,559
uh module also all the type definitions

00:33:08,240 --> 00:33:11,440
uh

00:33:08,559 --> 00:33:11,840
if there a separate module we combine

00:33:11,440 --> 00:33:15,120
that

00:33:11,840 --> 00:33:18,480
into the main module so we will look at

00:33:15,120 --> 00:33:21,919
uh uh

00:33:18,480 --> 00:33:22,480
like a module called simba this is used

00:33:21,919 --> 00:33:25,440
for

00:33:22,480 --> 00:33:26,000
semantic versioning and it has a

00:33:25,440 --> 00:33:28,960
separate

00:33:26,000 --> 00:33:29,600
module called type same word so we will

00:33:28,960 --> 00:33:33,919
actually

00:33:29,600 --> 00:33:39,840
embed a type somewhere

00:33:33,919 --> 00:33:39,840
as part of

00:33:41,519 --> 00:33:44,399
package itself

00:33:47,039 --> 00:33:53,519
okay you can see uh we have got

00:33:51,360 --> 00:33:54,960
you the somewhere package here it's a

00:33:53,519 --> 00:33:58,080
simple package

00:33:54,960 --> 00:33:59,919
it doesn't have any pin steps so that

00:33:58,080 --> 00:34:03,200
require

00:33:59,919 --> 00:34:07,200
worked so we go to

00:34:03,200 --> 00:34:11,119
symbol okay now uh

00:34:07,200 --> 00:34:14,560
we need to add uh type sim word

00:34:11,119 --> 00:34:17,839
as a component so uh package.js

00:34:14,560 --> 00:34:22,639
tool has a very nice

00:34:17,839 --> 00:34:25,679
command which is add node component

00:34:22,639 --> 00:34:29,200
then say which component you want

00:34:25,679 --> 00:34:29,200
to want to add

00:34:31,599 --> 00:34:35,839
okay now

00:34:37,599 --> 00:34:40,800
you can see it added component type

00:34:40,159 --> 00:34:44,159
somewhere

00:34:40,800 --> 00:34:48,960
so this will actually uh change

00:34:44,159 --> 00:34:53,040
three files debian slash copyright

00:34:48,960 --> 00:34:53,040
which actually only adds the

00:34:53,119 --> 00:34:58,400
url where we downloaded this to the

00:34:56,000 --> 00:35:00,839
source of the copyright part we still

00:34:58,400 --> 00:35:03,040
need to

00:35:00,839 --> 00:35:07,280
add and

00:35:03,040 --> 00:35:10,880
all type definitions are

00:35:07,280 --> 00:35:14,839
copyright microsoft

00:35:10,880 --> 00:35:19,920
and its license

00:35:14,839 --> 00:35:23,040
is expat so you need to specify

00:35:19,920 --> 00:35:26,240
types same word

00:35:23,040 --> 00:35:31,839
star and then

00:35:26,240 --> 00:35:31,839
copyright is microsoft

00:35:31,960 --> 00:35:39,839
corporation then

00:35:35,880 --> 00:35:41,839
license please expand

00:35:39,839 --> 00:35:44,720
and then uh below you need to give the

00:35:41,839 --> 00:35:47,040
full text of expat

00:35:44,720 --> 00:35:48,079
that is how you do the copyright file

00:35:47,040 --> 00:35:51,440
but i'm not

00:35:48,079 --> 00:35:53,280
going into detail that right now because

00:35:51,440 --> 00:35:55,119
we are interested to see how to add the

00:35:53,280 --> 00:35:58,480
component

00:35:55,119 --> 00:36:00,640
and the gpp.config will either be

00:35:58,480 --> 00:36:03,359
modified if it's already there or it'll

00:36:00,640 --> 00:36:05,680
be created and then you can see

00:36:03,359 --> 00:36:06,880
i it tells gbp that you know there will

00:36:05,680 --> 00:36:09,760
be a component

00:36:06,880 --> 00:36:10,839
uh type somewhere that should be

00:36:09,760 --> 00:36:16,320
imported

00:36:10,839 --> 00:36:16,320
when i test an import or an export

00:36:16,880 --> 00:36:24,960
so and then the most important

00:36:21,200 --> 00:36:29,920
part debian slash watch

00:36:24,960 --> 00:36:32,720
you can see this part is actually added

00:36:29,920 --> 00:36:32,720
and uh

00:36:33,520 --> 00:36:39,359
you will see what this ignore means

00:36:36,800 --> 00:36:41,599
later and there are other options like

00:36:39,359 --> 00:36:42,960
group and checksum but i will start with

00:36:41,599 --> 00:36:45,040
the ignore option

00:36:42,960 --> 00:36:46,079
and then you can see the component so

00:36:45,040 --> 00:36:50,400
the name you

00:36:46,079 --> 00:36:54,640
give here in the watch file has to match

00:36:50,400 --> 00:36:56,560
the name given in the gbp.com

00:36:54,640 --> 00:36:59,200
this is automatically generated by our

00:36:56,560 --> 00:37:02,400
door component but you could

00:36:59,200 --> 00:37:06,320
as well create this manually

00:37:02,400 --> 00:37:09,920
uh there's something magic about it

00:37:06,320 --> 00:37:14,320
now we have uh this

00:37:09,920 --> 00:37:18,079
uh so or if since this is an ignore

00:37:14,320 --> 00:37:21,200
uh it doesn't take the version of

00:37:18,079 --> 00:37:23,760
the component uh yeah the

00:37:21,200 --> 00:37:25,280
number are into the actual debian

00:37:23,760 --> 00:37:27,200
package version

00:37:25,280 --> 00:37:29,680
so the debian package version will

00:37:27,200 --> 00:37:29,680
remain

00:37:30,079 --> 00:37:40,160
uh 7.3.4

00:37:37,119 --> 00:37:42,640
which can be problematic uh

00:37:40,160 --> 00:37:44,640
you know if uh we need to you know

00:37:42,640 --> 00:37:47,359
change

00:37:44,640 --> 00:37:48,320
uh the versions of the components later

00:37:47,359 --> 00:37:51,839
it kind of

00:37:48,320 --> 00:37:54,560
makes the git maintenance ugly

00:37:51,839 --> 00:37:55,839
because you will not be able to import

00:37:54,560 --> 00:37:58,480
another upstream

00:37:55,839 --> 00:38:00,640
uh version with the same tag so you will

00:37:58,480 --> 00:38:03,040
have to remove the

00:38:00,640 --> 00:38:03,680
you know existing tag and then import

00:38:03,040 --> 00:38:05,680
and

00:38:03,680 --> 00:38:09,760
stuff like that so the important part

00:38:05,680 --> 00:38:13,040
here is it created a component turbo

00:38:09,760 --> 00:38:16,960
you know uh node somewhere

00:38:13,040 --> 00:38:19,040
and underscore seven point three point

00:38:16,960 --> 00:38:20,400
four dot orange and then hyphen then

00:38:19,040 --> 00:38:23,040
name of the component

00:38:20,400 --> 00:38:24,960
you can type somewhere then dot other g

00:38:23,040 --> 00:38:28,960
said

00:38:24,960 --> 00:38:30,079
uh this is not yet included in our

00:38:28,960 --> 00:38:35,040
source directory

00:38:30,079 --> 00:38:36,880
so we need to do a gbp import or

00:38:35,040 --> 00:38:38,640
since we don't have a github yet

00:38:36,880 --> 00:38:41,760
probably we need to

00:38:38,640 --> 00:38:41,760
generate a

00:38:42,240 --> 00:38:50,160
source package minus v dot

00:38:46,400 --> 00:38:53,920
which will actually include probably

00:38:50,160 --> 00:39:01,839
the type somewhere as well as

00:38:53,920 --> 00:39:01,839
let's see

00:39:02,160 --> 00:39:08,800
if it includes the

00:39:05,440 --> 00:39:08,800
yeah it has the

00:39:08,960 --> 00:39:14,000
uh both the star balls the dsc file is

00:39:12,960 --> 00:39:16,960
generated with two

00:39:14,000 --> 00:39:16,960
tar balls so now

00:39:21,920 --> 00:39:29,440
we could do 30 kg

00:39:25,040 --> 00:39:34,400
source minus x

00:39:29,440 --> 00:39:37,599
stem version exe so

00:39:34,400 --> 00:39:42,880
that is already target access so

00:39:37,599 --> 00:39:46,320
let's remove

00:39:42,880 --> 00:39:51,280
and extract now if we go to node symbol

00:39:46,320 --> 00:39:51,280
you will see type somewhere also and

00:39:54,839 --> 00:40:01,680
this

00:39:56,160 --> 00:40:01,680
okay so now uh if we do a build package

00:40:01,760 --> 00:40:09,680
uh you will see the you know

00:40:04,800 --> 00:40:12,960
pkgst tool trying to copy this

00:40:09,680 --> 00:40:15,520
type some word into uh you say share

00:40:12,960 --> 00:40:19,040
note json word node modules

00:40:15,520 --> 00:40:22,640
so unless debian

00:40:19,040 --> 00:40:25,200
node december user share node.js

00:40:22,640 --> 00:40:25,920
you will see there's no modules and then

00:40:25,200 --> 00:40:29,280
say that

00:40:25,920 --> 00:40:32,480
there is a type somewhere so

00:40:29,280 --> 00:40:35,760
we have embedded uh uh

00:40:32,480 --> 00:40:37,839
the module inside node symbol uh this

00:40:35,760 --> 00:40:38,960
is usually enough for i know simple

00:40:37,839 --> 00:40:41,119
modules

00:40:38,960 --> 00:40:42,400
if it was not for the type definition

00:40:41,119 --> 00:40:45,760
and

00:40:42,400 --> 00:40:48,880
you don't expect other packages to

00:40:45,760 --> 00:40:50,839
use this directly but since we would

00:40:48,880 --> 00:40:54,240
want to expose

00:40:50,839 --> 00:40:57,760
this into

00:40:54,240 --> 00:41:02,319
four other packages so that we will

00:40:57,760 --> 00:41:05,440
now let's say uh pkg.js tool has

00:41:02,319 --> 00:41:07,760
another shortcut to actually install it

00:41:05,440 --> 00:41:10,960
in the root directory

00:41:07,760 --> 00:41:13,839
of node.js that is just a node.js ins

00:41:10,960 --> 00:41:17,280
instead of the lower underscore module

00:41:13,839 --> 00:41:20,319
subdirectory for that particular module

00:41:17,280 --> 00:41:24,319
so we can actually create a file

00:41:20,319 --> 00:41:27,040
debian nodejs

00:41:24,319 --> 00:41:28,560
okay we haven't created the directory

00:41:27,040 --> 00:41:31,599
yet so

00:41:28,560 --> 00:41:32,720
first we create apn slash node.js and

00:41:31,599 --> 00:41:37,760
then

00:41:32,720 --> 00:41:37,760
we create debian node.js and then

00:41:38,640 --> 00:41:43,680
we say root underscore modules

00:41:44,000 --> 00:41:50,319
inside that we need to specify which

00:41:47,440 --> 00:41:51,599
directory we want to include and do just

00:41:50,319 --> 00:41:53,680
uh remember that

00:41:51,599 --> 00:41:54,800
this should not be the name of the

00:41:53,680 --> 00:41:57,839
module but

00:41:54,800 --> 00:41:59,520
the directory in the source tree that

00:41:57,839 --> 00:42:01,680
should be installed because sometimes

00:41:59,520 --> 00:42:04,160
you know you have a

00:42:01,680 --> 00:42:06,000
where you have packages slash x for

00:42:04,160 --> 00:42:09,280
example barbell

00:42:06,000 --> 00:42:11,200
cli would be slash packages cli but the

00:42:09,280 --> 00:42:14,400
actual module name would be at

00:42:11,200 --> 00:42:17,440
bobby and slash cli so

00:42:14,400 --> 00:42:19,520
pkg.js tools is smart enough to look uh

00:42:17,440 --> 00:42:22,480
inside uh

00:42:19,520 --> 00:42:23,200
the directory uh in this case type

00:42:22,480 --> 00:42:26,160
symbol

00:42:23,200 --> 00:42:27,520
and package.json and see what is actual

00:42:26,160 --> 00:42:30,160
name

00:42:27,520 --> 00:42:30,640
and then it gets installed under this

00:42:30,160 --> 00:42:34,000
name

00:42:30,640 --> 00:42:37,040
in the node.js root uh directory or

00:42:34,000 --> 00:42:40,960
global modules directory

00:42:37,040 --> 00:42:44,800
uh so now if we do a dpkg in the package

00:42:40,960 --> 00:42:46,560
and then you will see

00:42:44,800 --> 00:42:49,119
uh this is actually now getting

00:42:46,560 --> 00:42:50,400
installed in new session node.json type

00:42:49,119 --> 00:42:55,359
somewhere

00:42:50,400 --> 00:42:59,440
and also vidify here node symbol

00:42:55,359 --> 00:43:01,760
you say share

00:42:59,440 --> 00:43:03,200
notepads and then we have now two

00:43:01,760 --> 00:43:06,720
modules types

00:43:03,200 --> 00:43:09,920
somewhere and this number here okay

00:43:06,720 --> 00:43:13,520
and another thing to remember is

00:43:09,920 --> 00:43:16,000
the for other packages to actually

00:43:13,520 --> 00:43:16,000
easily

00:43:16,400 --> 00:43:21,359
declare a dependency against uh

00:43:21,839 --> 00:43:27,520
node type somewhere instead of node

00:43:24,839 --> 00:43:31,440
symbol uh we need to provide

00:43:27,520 --> 00:43:31,440
node type symbol uh that

00:43:31,839 --> 00:43:35,440
we can either do manually but then if we

00:43:34,560 --> 00:43:38,560
have a

00:43:35,440 --> 00:43:42,400
you know a lot of modules

00:43:38,560 --> 00:43:44,800
the package js tools

00:43:42,400 --> 00:43:47,280
has a shortcut that will automatically

00:43:44,800 --> 00:43:50,800
generate the

00:43:47,280 --> 00:43:55,839
uh provides the lines for us

00:43:50,800 --> 00:43:55,839
so let's see uh

00:43:55,920 --> 00:44:01,760
this is provides now our dollar.js colon

00:43:59,359 --> 00:44:06,839
provides this will be filled in by

00:44:01,760 --> 00:44:08,800
the pkg.js

00:44:06,839 --> 00:44:11,200
tools

00:44:08,800 --> 00:44:11,200
so

00:44:12,079 --> 00:44:15,680
you can see now it populate your js

00:44:14,640 --> 00:44:20,319
colon provides

00:44:15,680 --> 00:44:22,720
us node type somewhere equal to 7.3.4

00:44:20,319 --> 00:44:24,480
yeah so we don't really have to worry

00:44:22,720 --> 00:44:26,480
about you know manually looking at the

00:44:24,480 --> 00:44:27,359
versions and stuff like that so this is

00:44:26,480 --> 00:44:31,839
also a pretty

00:44:27,359 --> 00:44:33,200
neat feature that uh pkg.js tools

00:44:31,839 --> 00:44:36,480
provide thanks to

00:44:33,200 --> 00:44:40,640
savior guimard nicknamed yard

00:44:36,480 --> 00:44:40,640
for his awesome work this is made

00:44:40,720 --> 00:44:49,599
node.js packaging uh very very simple

00:44:45,680 --> 00:44:54,000
uh he has automated a lot of stuff

00:44:49,599 --> 00:44:57,760
and he maintains a lot of

00:44:54,000 --> 00:45:01,680
videos a big thank you to savior

00:44:57,760 --> 00:45:04,000
and so now we have the provides

00:45:01,680 --> 00:45:04,880
as well so this would be the same even

00:45:04,000 --> 00:45:06,960
if it's

00:45:04,880 --> 00:45:09,440
not a type definition and some other

00:45:06,960 --> 00:45:12,319
module it's the same process

00:45:09,440 --> 00:45:13,200
you do the add node modules component

00:45:12,319 --> 00:45:16,720
and then you

00:45:13,200 --> 00:45:20,480
check the debian watch

00:45:16,720 --> 00:45:23,200
okay so now uh let's see

00:45:20,480 --> 00:45:23,520
some other options that you can use now

00:45:23,200 --> 00:45:25,440
this

00:45:23,520 --> 00:45:27,760
in this case the upstream version

00:45:25,440 --> 00:45:31,200
reminds or the padding package version

00:45:27,760 --> 00:45:34,800
reminds 7.3.4

00:45:31,200 --> 00:45:37,599
which can make

00:45:34,800 --> 00:45:38,560
you know maintaining the git repository

00:45:37,599 --> 00:45:40,319
kind of

00:45:38,560 --> 00:45:42,079
difficult because you will not be able

00:45:40,319 --> 00:45:44,880
to import

00:45:42,079 --> 00:45:46,160
in case you know your component version

00:45:44,880 --> 00:45:48,400
changes

00:45:46,160 --> 00:45:50,240
because you know the effective upstream

00:45:48,400 --> 00:45:52,160
version would still remain seven point

00:45:50,240 --> 00:45:55,520
three point four

00:45:52,160 --> 00:45:59,280
uh so uh you scan uh

00:45:55,520 --> 00:46:02,400
provides another option uh called group

00:45:59,280 --> 00:46:07,200
so the main module

00:46:02,400 --> 00:46:11,280
also you need to specify group and then

00:46:07,200 --> 00:46:15,839
uh for ignoring also say group

00:46:11,280 --> 00:46:15,839
so it will count you know both

00:46:18,720 --> 00:46:22,319
both versions of the main module as well

00:46:22,000 --> 00:46:28,160
as

00:46:22,319 --> 00:46:30,880
the component as part of

00:46:28,160 --> 00:46:31,440
part of the package version this should

00:46:30,880 --> 00:46:35,680
be

00:46:31,440 --> 00:46:35,680
scan minus minus variables

00:46:36,319 --> 00:46:43,839
and yeah

00:46:39,440 --> 00:46:43,839
we just

00:46:45,040 --> 00:46:52,560
so now you can see uh

00:46:49,119 --> 00:46:56,480
you scan actually now generated

00:46:52,560 --> 00:46:58,319
abstraction 7.3.4 plus tilde

00:46:56,480 --> 00:46:59,520
seven point three point four this is the

00:46:58,319 --> 00:47:03,200
version of the

00:46:59,520 --> 00:47:05,920
component in this case type symbol

00:47:03,200 --> 00:47:07,119
uh so uh for example if there is a new

00:47:05,920 --> 00:47:11,280
type definition

00:47:07,119 --> 00:47:13,440
uh uh but absolute version remains seven

00:47:11,280 --> 00:47:16,160
point three point four so it could be

00:47:13,440 --> 00:47:17,760
it could have been become seven point

00:47:16,160 --> 00:47:21,200
three point four things

00:47:17,760 --> 00:47:23,599
seven point three point five

00:47:21,200 --> 00:47:24,640
uh so that you know it's easier for us

00:47:23,599 --> 00:47:27,200
to maintain

00:47:24,640 --> 00:47:28,960
tax hit reports and stuff like that so

00:47:27,200 --> 00:47:32,160
now

00:47:28,960 --> 00:47:32,160
uh let's

00:47:35,200 --> 00:47:39,839
uh let's do the

00:47:41,040 --> 00:47:46,400
change we need to edit the change log

00:47:47,520 --> 00:47:56,000
or to specify this particular version

00:47:51,280 --> 00:47:56,000
instead of 7.3.4

00:47:57,680 --> 00:48:08,319
and then let's generate the dsc file

00:48:06,000 --> 00:48:09,599
okay probably you need to run it clean

00:48:08,319 --> 00:48:13,280
and then

00:48:09,599 --> 00:48:16,480
generate so it actually now

00:48:13,280 --> 00:48:18,880
used this orange jar

00:48:16,480 --> 00:48:20,640
and then now let's go back and then now

00:48:18,880 --> 00:48:24,240
let's try the pkg

00:48:20,640 --> 00:48:27,440
source minus extract

00:48:24,240 --> 00:48:27,440
the dsc file

00:48:30,000 --> 00:48:38,880
okay this led target exists

00:48:34,319 --> 00:48:38,880
so prevent if that is a little thing

00:48:42,079 --> 00:48:44,640
okay

00:48:45,200 --> 00:48:51,119
it's already there so let's see the pkg

00:48:48,160 --> 00:48:51,119
print package

00:48:56,480 --> 00:49:01,520
now so you can see now the debian

00:48:59,280 --> 00:49:02,800
package version also covers the

00:49:01,520 --> 00:49:06,640
component

00:49:02,800 --> 00:49:09,680
so this is kind of uh neat uh

00:49:06,640 --> 00:49:12,319
when you know you have just two

00:49:09,680 --> 00:49:16,160
components but when you

00:49:12,319 --> 00:49:19,599
have a lot of components this becomes

00:49:16,160 --> 00:49:23,200
ugly kind of let's say if you see

00:49:19,599 --> 00:49:27,440
no oh no

00:49:23,200 --> 00:49:27,440
this is not question

00:49:29,440 --> 00:49:31,839
think

00:49:36,000 --> 00:49:42,880
oh and i think this is not worse

00:49:39,760 --> 00:49:47,760
you see yeah not this system

00:49:42,880 --> 00:49:50,160
okay this is no web

00:49:47,760 --> 00:49:51,359
partial conversion okay this is another

00:49:50,160 --> 00:49:54,640
example where

00:49:51,359 --> 00:49:58,559
you have uh at least i think

00:49:54,640 --> 00:50:01,440
three components uh and

00:49:58,559 --> 00:50:02,079
the debian package version is huge and

00:50:01,440 --> 00:50:05,760
it's

00:50:02,079 --> 00:50:09,599
very ugly and it's not easy to remember

00:50:05,760 --> 00:50:13,359
or track so there is

00:50:09,599 --> 00:50:15,760
another option that is

00:50:13,359 --> 00:50:15,760
kind of

00:50:16,880 --> 00:50:24,240
neat uh which

00:50:20,880 --> 00:50:27,440
will allow us to you know have a new

00:50:24,240 --> 00:50:29,440
package version a new upstream version

00:50:27,440 --> 00:50:33,200
but at the same time

00:50:29,440 --> 00:50:37,200
uh the version number doesn't grow

00:50:33,200 --> 00:50:40,880
so big and agree so we can use this

00:50:37,200 --> 00:50:43,280
option called checksum instead of group

00:50:40,880 --> 00:50:45,680
so it will actually add all the

00:50:43,280 --> 00:50:48,800
component versions together

00:50:45,680 --> 00:50:52,000
and then you will get you know

00:50:48,800 --> 00:50:56,319
a very uh one version

00:50:52,000 --> 00:51:00,160
for all the components let's see

00:50:56,319 --> 00:51:03,040
u scan minus minus purpose

00:51:00,160 --> 00:51:03,040
minus dt

00:51:07,359 --> 00:51:23,839
okay now you can see this has you know

00:51:11,760 --> 00:51:23,839
checksum component and then fcs 7.3.4

00:51:25,359 --> 00:51:31,839
and as usual

00:51:28,800 --> 00:51:31,839
now you do

00:51:32,480 --> 00:51:37,839
a dc pitch minus e

00:51:38,079 --> 00:51:42,960
so it becomes check sum seven point

00:51:41,359 --> 00:51:46,880
three point four and then

00:51:42,960 --> 00:51:50,559
say tpk jesus minus v

00:51:46,880 --> 00:51:54,319
dot after the clean

00:51:50,559 --> 00:51:57,440
so we got the dse file and probably this

00:51:54,319 --> 00:52:00,000
is foundation okay it's only there

00:51:57,440 --> 00:52:01,680
it's going to do the extracting so this

00:52:00,000 --> 00:52:05,680
is kind of neat and now let's

00:52:01,680 --> 00:52:10,880
for the fun of it let's try to add

00:52:05,680 --> 00:52:10,880
the component uh say for example

00:52:11,200 --> 00:52:18,640
a symbol module that you can

00:52:14,800 --> 00:52:21,839
invert so i think this

00:52:18,640 --> 00:52:24,960
v8 compile

00:52:21,839 --> 00:52:27,200
cache is actually embedded in webpack i

00:52:24,960 --> 00:52:27,680
just remembered the name so let's try

00:52:27,200 --> 00:52:30,960
this

00:52:27,680 --> 00:52:33,680
what happens to this

00:52:30,960 --> 00:52:34,480
so it actually added v8 compile cache so

00:52:33,680 --> 00:52:37,839
if you see

00:52:34,480 --> 00:52:38,960
the gbp.com you can see now you have two

00:52:37,839 --> 00:52:44,480
components

00:52:38,960 --> 00:52:47,440
and if you see debian watch

00:52:44,480 --> 00:52:48,319
it actually does i think uh ignored by

00:52:47,440 --> 00:52:51,920
default

00:52:48,319 --> 00:52:53,440
but uh i can actually pass an option i

00:52:51,920 --> 00:52:57,280
think it's minus c

00:52:53,440 --> 00:52:57,280
or something uh for uh

00:52:58,319 --> 00:53:05,040
passing checksum directly but we could

00:53:01,520 --> 00:53:08,640
edit this to check some uh if we do a

00:53:05,040 --> 00:53:08,640
man and

00:53:09,119 --> 00:53:16,160
no component you can see minus c is the

00:53:11,839 --> 00:53:19,599
checksum so if you actually did a

00:53:16,160 --> 00:53:22,800
minus c it would actually create

00:53:19,599 --> 00:53:23,280
it with the checksum option so now let's

00:53:22,800 --> 00:53:26,960
see

00:53:23,280 --> 00:53:29,280
what happens to the version

00:53:26,960 --> 00:53:32,079
of the components of the tap stream

00:53:29,280 --> 00:53:36,000
version now

00:53:32,079 --> 00:53:38,480
uh it's actually now you can see

00:53:36,000 --> 00:53:40,839
it actually did seven point three point

00:53:38,480 --> 00:53:43,839
four twisting that

00:53:40,839 --> 00:53:43,839
zero

00:53:45,119 --> 00:53:52,800
but it didn't actually i think download

00:53:49,040 --> 00:53:56,000
uh or redeem force the download so

00:53:52,800 --> 00:53:58,160
let's do a dd so

00:53:56,000 --> 00:54:02,000
that it actually downloads from the

00:53:58,160 --> 00:54:02,000
components and region trades

00:54:04,559 --> 00:54:08,720
yeah so now you can see we can have

00:54:07,559 --> 00:54:11,920
7.3.4

00:54:08,720 --> 00:54:13,520
plus c is nine point five point four so

00:54:11,920 --> 00:54:17,520
the nine point five point

00:54:13,520 --> 00:54:19,760
four the calculation is actually

00:54:17,520 --> 00:54:22,400
uh i know seven point three point four

00:54:19,760 --> 00:54:24,480
plus two point two point zero so seven

00:54:22,400 --> 00:54:25,040
plus two become nine thickness two

00:54:24,480 --> 00:54:29,040
become

00:54:25,040 --> 00:54:32,240
five and then popular zero become four

00:54:29,040 --> 00:54:35,200
uh so you know this

00:54:32,240 --> 00:54:36,720
uh is now the version so similarly now

00:54:35,200 --> 00:54:39,839
we can

00:54:36,720 --> 00:54:39,839
do this

00:54:45,440 --> 00:54:51,200
so this way you know uh if we add

00:54:48,880 --> 00:54:52,480
or remove components you know the

00:54:51,200 --> 00:54:55,040
upstream version

00:54:52,480 --> 00:54:55,040
actually

00:54:57,920 --> 00:55:01,040
changes so we don't have to remove the

00:55:00,319 --> 00:55:04,160
tag

00:55:01,040 --> 00:55:08,319
when we do a gbp import

00:55:04,160 --> 00:55:11,520
so i think the italian has been

00:55:08,319 --> 00:55:11,520
renamed so

00:55:12,720 --> 00:55:20,400
say tpkg source

00:55:16,079 --> 00:55:23,599
minus b dot then

00:55:20,400 --> 00:55:26,640
probably just for the safety

00:55:23,599 --> 00:55:26,640
we would remove

00:55:26,880 --> 00:55:33,520
node symbol dash

00:55:30,319 --> 00:55:34,400
on the versions and just do the extract

00:55:33,520 --> 00:55:40,240
typically

00:55:34,400 --> 00:55:40,240
source 96

00:55:46,839 --> 00:56:02,400
boom

00:55:49,599 --> 00:56:07,200
okay what did i remove

00:56:02,400 --> 00:56:10,240
okay yeah this was actually a symbolic

00:56:07,200 --> 00:56:10,240
link uh so

00:56:14,839 --> 00:56:22,400
but

00:56:17,680 --> 00:56:22,400
all the directory is already there

00:56:22,720 --> 00:56:45,839
and then they could do scan minus

00:56:26,640 --> 00:56:45,839
when instantly it again

00:56:47,280 --> 00:56:50,640
let's download this remove this and then

00:56:50,160 --> 00:56:54,319
now

00:56:50,640 --> 00:56:59,839
to an extract okay

00:56:54,319 --> 00:56:59,839
so now we got the correct directory

00:57:02,799 --> 00:57:10,319
you see this v8 combine cache

00:57:05,839 --> 00:57:13,599
and type same word both of them are now

00:57:10,319 --> 00:57:17,520
added as a component and if we do

00:57:13,599 --> 00:57:17,520
dppg build package

00:57:18,640 --> 00:57:27,839
you will see

00:57:38,839 --> 00:57:45,040
yes slash

00:57:42,480 --> 00:57:47,760
types and when this is only installed in

00:57:45,040 --> 00:57:51,200
root because we only mentioned this

00:57:47,760 --> 00:57:54,480
to be installed in the node.js root

00:57:51,200 --> 00:57:57,599
under node no

00:57:54,480 --> 00:57:59,599
the under root modules

00:57:57,599 --> 00:58:01,520
but we at compile cache is just

00:57:59,599 --> 00:58:03,760
installed as a sub module

00:58:01,520 --> 00:58:03,760
uh

00:58:05,359 --> 00:58:10,400
for the somewhere module so you see

00:58:12,079 --> 00:58:18,400
if you want to also uh install

00:58:15,839 --> 00:58:20,160
v8 compile cache as well in the node.js

00:58:18,400 --> 00:58:23,760
root you can just add that

00:58:20,160 --> 00:58:26,240
to root and restore modules and it also

00:58:23,760 --> 00:58:26,240
takes

00:58:27,599 --> 00:58:35,359
a checksum it also takes a while

00:58:30,799 --> 00:58:38,799
card so if we just do a star

00:58:35,359 --> 00:58:38,799
and all the components

00:58:40,000 --> 00:58:47,680
will get installed as root

00:58:43,440 --> 00:58:50,319
and provides will be generated

00:58:47,680 --> 00:58:51,200
for all the modules so you can see now

00:58:50,319 --> 00:58:53,280
this

00:58:51,200 --> 00:58:54,960
this now provides you know types number

00:58:53,280 --> 00:58:59,680
seven point three point four

00:58:54,960 --> 00:59:03,040
and uh node v8 compare cash to

00:58:59,680 --> 00:59:06,400
point two point zero

00:59:03,040 --> 00:59:07,839
so that's kind of neat uh thinking about

00:59:06,400 --> 00:59:10,799
the components so

00:59:07,839 --> 00:59:13,520
what you need to remember is odd node

00:59:10,799 --> 00:59:15,839
component

00:59:13,520 --> 00:59:15,839
and

00:59:16,839 --> 00:59:22,000
debian uh watch options

00:59:22,319 --> 00:59:28,960
uh especially the checksum ignore or

00:59:25,440 --> 00:59:33,119
group even for checksum are the main

00:59:28,960 --> 00:59:35,440
module should have group

00:59:33,119 --> 00:59:35,440
and

00:59:36,960 --> 00:59:41,839
you need to remember to do you scan also

00:59:40,079 --> 00:59:45,359
do the changelog thing

00:59:41,839 --> 00:59:48,000
and also remember to to

00:59:45,359 --> 00:59:48,000
add the

00:59:49,520 --> 00:59:53,280
copyright for the embedded component for

00:59:52,000 --> 00:59:58,079
example let's see

00:59:53,280 --> 01:00:01,760
if the license for need complaint cache

00:59:58,079 --> 01:00:05,359
is andreas and it's in

01:00:01,760 --> 01:00:09,200
mit so probably we need to

01:00:05,359 --> 01:00:09,200
do debian copyright

01:00:10,240 --> 01:00:15,839
files calling we

01:00:25,359 --> 01:00:29,839
would be expat

01:00:31,200 --> 01:00:38,400
so that's it for different ways of

01:00:35,359 --> 01:00:41,440
embedding module and tracking their

01:00:38,400 --> 01:00:43,839
component versions in the debian

01:00:41,440 --> 01:00:45,760
package version this is kind of now the

01:00:43,839 --> 01:00:48,240
new default

01:00:45,760 --> 01:00:50,079
we tried to embed as many small and

01:00:48,240 --> 01:00:54,319
simple modules

01:00:50,079 --> 01:00:58,799
it's possible but remember not to

01:00:54,319 --> 01:01:01,839
embed any complicated modules or large

01:00:58,799 --> 01:01:02,880
modules they should still be packaged as

01:01:01,839 --> 01:01:05,280
separate modules

01:01:02,880 --> 01:01:06,240
complicated modules are usually mean

01:01:05,280 --> 01:01:09,440
they

01:01:06,240 --> 01:01:12,720
have other build systems like barbie

01:01:09,440 --> 01:01:14,079
or roll up a webpack or tight script

01:01:12,720 --> 01:01:16,640
you know which you would need to

01:01:14,079 --> 01:01:17,680
generate if you try to complain so many

01:01:16,640 --> 01:01:19,520
things then your

01:01:17,680 --> 01:01:21,839
bundle package will have so many build

01:01:19,520 --> 01:01:25,119
dependencies and you know

01:01:21,839 --> 01:01:25,520
it get pulled into so many uh transition

01:01:25,119 --> 01:01:28,319
so

01:01:25,520 --> 01:01:30,040
it would make things much complicated

01:01:28,319 --> 01:01:32,480
but if it's a simple

01:01:30,040 --> 01:01:34,799
straightforward package that doesn't

01:01:32,480 --> 01:01:36,960
need any build it's just it just needs

01:01:34,799 --> 01:01:39,760
to you know stay

01:01:36,960 --> 01:01:40,640
in that inside that package just just

01:01:39,760 --> 01:01:45,040
filed

01:01:40,640 --> 01:01:49,839
then go ahead and embed it

01:01:45,040 --> 01:01:49,839
so that's it for this particular

01:01:50,839 --> 01:01:54,690
tip

01:01:52,400 --> 01:01:56,720
hi uh let's uh look at uh

01:01:54,690 --> 01:02:00,720
[Music]

01:01:56,720 --> 01:02:03,839
uh repacking the source

01:02:00,720 --> 01:02:07,599
turbo or the origi star ball because

01:02:03,839 --> 01:02:11,039
we want to exclude some files from the

01:02:07,599 --> 01:02:14,880
upstream provided tarball

01:02:11,039 --> 01:02:18,480
usually because it contains generated

01:02:14,880 --> 01:02:22,000
files which

01:02:18,480 --> 01:02:23,119
they've been uh a free software

01:02:22,000 --> 01:02:26,480
guidelines uh

01:02:23,119 --> 01:02:28,079
doesn't allow uh to be part of the

01:02:26,480 --> 01:02:30,640
source star ball which should only

01:02:28,079 --> 01:02:32,960
contain the actual source code

01:02:30,640 --> 01:02:34,160
uh the generated file should be actually

01:02:32,960 --> 01:02:37,920
generated from

01:02:34,160 --> 01:02:40,960
the source files

01:02:37,920 --> 01:02:42,160
using the tools available in debian at

01:02:40,960 --> 01:02:45,280
least for packages

01:02:42,160 --> 01:02:45,280
in the main section

01:02:46,480 --> 01:02:50,480
so let's look at this module called

01:02:49,359 --> 01:02:54,240
jseputil

01:02:50,480 --> 01:02:54,240
so let's create

01:02:58,160 --> 01:03:01,520
this file and it has some generated

01:03:00,960 --> 01:03:05,039
files

01:03:01,520 --> 01:03:09,920
in the disk directory which is

01:03:05,039 --> 01:03:14,240
the generated by browserify

01:03:09,920 --> 01:03:14,240
and using grand file

01:03:15,440 --> 01:03:22,799
uh so you can go to the

01:03:19,119 --> 01:03:24,559
directory then if you inspect you will

01:03:22,799 --> 01:03:27,359
see there's a dist

01:03:24,559 --> 01:03:28,240
and then if you look at the package.json

01:03:27,359 --> 01:03:31,839
you can see

01:03:28,240 --> 01:03:35,440
there is in the script session

01:03:31,839 --> 01:03:38,240
uh the test browser actually

01:03:35,440 --> 01:03:38,720
i run the gun build and then grind test

01:03:38,240 --> 01:03:42,240
and

01:03:38,720 --> 01:03:44,079
uh there is a grand file.js if you look

01:03:42,240 --> 01:03:47,520
at the greenfile.js

01:03:44,079 --> 01:03:51,039
you can see there is

01:03:47,520 --> 01:03:53,760
a browserify task and

01:03:51,039 --> 01:03:53,760
which does

01:03:54,079 --> 01:04:01,400
generate the disk to jsp2.js from lib

01:03:57,839 --> 01:04:04,480
index features and that has the options

01:04:01,400 --> 01:04:07,520
standalone js buttons and

01:04:04,480 --> 01:04:11,920
sponsor with other files also

01:04:07,520 --> 01:04:13,359
similarly from the other files in lib

01:04:11,920 --> 01:04:16,400
and then you have

01:04:13,359 --> 01:04:19,760
more options in grand file but we are

01:04:16,400 --> 01:04:24,079
only interested in this directory

01:04:19,760 --> 01:04:28,319
and so we need to remove the directory

01:04:24,079 --> 01:04:31,520
test uh so we can use

01:04:28,319 --> 01:04:33,920
a combination of debian slash

01:04:31,520 --> 01:04:35,119
copyright file and then the debian

01:04:33,920 --> 01:04:39,520
search watch file

01:04:35,119 --> 01:04:40,000
and then uh use scan we can exclude this

01:04:39,520 --> 01:04:43,359
file

01:04:40,000 --> 01:04:47,520
so you can create

01:04:43,359 --> 01:04:48,559
a field called files excluded and then

01:04:47,520 --> 01:04:50,559
you provide

01:04:48,559 --> 01:04:54,640
which of the files you want to be

01:04:50,559 --> 01:04:59,839
excluded from the

01:04:54,640 --> 01:04:59,839
source store ball and then in the

01:05:00,000 --> 01:05:02,799
watch file

01:05:03,359 --> 01:05:06,480
you specify

01:05:07,520 --> 01:05:10,720
uh an option called the pack which will

01:05:10,160 --> 01:05:14,000
tell

01:05:10,720 --> 01:05:17,200
you scan to you know uh look at

01:05:14,000 --> 01:05:19,039
the copyright file and that there is the

01:05:17,200 --> 01:05:22,319
files excluded uh

01:05:19,039 --> 01:05:25,760
field uh it tells you scan to you know

01:05:22,319 --> 01:05:27,760
remove that and then

01:05:25,760 --> 01:05:30,079
while we are at it uh this isn't

01:05:27,760 --> 01:05:33,039
mandatory but it's nice to have you can

01:05:30,079 --> 01:05:35,039
say compression is it to exit because

01:05:33,039 --> 01:05:36,240
i usually you know exit is more

01:05:35,039 --> 01:05:39,200
efficient than g

01:05:36,240 --> 01:05:41,599
said and well uh we are already you know

01:05:39,200 --> 01:05:44,480
changing that stream source so

01:05:41,599 --> 01:05:45,599
so star ball so we could as well use a

01:05:44,480 --> 01:05:48,400
more efficient

01:05:45,599 --> 01:05:49,760
compression algorithm and then you need

01:05:48,400 --> 01:05:53,200
to also

01:05:49,760 --> 01:05:56,400
select a repack suffix

01:05:53,200 --> 01:05:59,280
which can be you know usually

01:05:56,400 --> 01:05:59,280
you know uh

01:05:59,920 --> 01:06:06,640
dfst or a plus

01:06:03,520 --> 01:06:07,119
debian or the plus debian source or the

01:06:06,640 --> 01:06:10,640
short

01:06:07,119 --> 01:06:13,520
ds or plus repack

01:06:10,640 --> 01:06:15,359
or tilde repack so here we're using

01:06:13,520 --> 01:06:18,559
tilde dfsg

01:06:15,359 --> 01:06:22,400
so you know you can have

01:06:18,559 --> 01:06:25,520
efst debian

01:06:22,400 --> 01:06:29,039
repack a debian source and and

01:06:25,520 --> 01:06:32,440
many such options for repacking and then

01:06:29,039 --> 01:06:37,039
you could also use surplus

01:06:32,440 --> 01:06:39,839
dfst or tinda dfsg

01:06:37,039 --> 01:06:41,680
uh usually plus means you know if it's

01:06:39,839 --> 01:06:46,000
for example the upstream version

01:06:41,680 --> 01:06:50,400
is 0.1.0 then 0.1.0 plus

01:06:46,000 --> 01:06:54,240
dfsg is higher than

01:06:50,400 --> 01:06:58,240
uh 0.1.0

01:06:54,240 --> 01:07:04,400
or whereas 0.1.0 tilde

01:06:58,240 --> 01:07:06,880
fsg is actually less than 0.1.0

01:07:04,400 --> 01:07:07,440
uh so it's up to you uh which one you

01:07:06,880 --> 01:07:10,559
prefer

01:07:07,440 --> 01:07:11,280
depending on the situation probably if

01:07:10,559 --> 01:07:14,400
you still

01:07:11,280 --> 01:07:14,799
dfst and later for some reason you don't

01:07:14,400 --> 01:07:17,760
have

01:07:14,799 --> 01:07:17,760
one to repack

01:07:17,920 --> 01:07:25,280
uh then uh you know usually

01:07:22,000 --> 01:07:27,920
uh it's a good idea to use tilda but

01:07:25,280 --> 01:07:29,599
usually for dfst reasons it's unlikely

01:07:27,920 --> 01:07:34,799
to change

01:07:29,599 --> 01:07:34,799
so plus tfst would also be good

01:07:35,039 --> 01:07:40,079
and and you can actually see

01:07:40,400 --> 01:07:46,640
this particular url

01:07:43,520 --> 01:07:50,480
uh where all these things are

01:07:46,640 --> 01:07:54,000
well documented and

01:07:50,480 --> 01:07:54,000
you will also need to

01:07:54,480 --> 01:08:01,599
you know edit the version

01:07:57,520 --> 01:08:04,079
in changelog accordingly whatever was

01:08:01,599 --> 01:08:04,720
your feedback suffix you're given the

01:08:04,079 --> 01:08:07,039
same

01:08:04,720 --> 01:08:08,400
effects subject you need to add to the

01:08:07,039 --> 01:08:10,640
change log

01:08:08,400 --> 01:08:14,319
so if we look at the debian watch we

01:08:10,640 --> 01:08:16,880
added tinder dfs gf3 pack suffix

01:08:14,319 --> 01:08:17,839
and then uh now we need to you know tell

01:08:16,880 --> 01:08:21,520
you scan

01:08:17,839 --> 01:08:24,799
to you know uh download

01:08:21,520 --> 01:08:29,359
these and then probably

01:08:24,799 --> 01:08:29,359
repack this and then now we will see

01:08:30,799 --> 01:08:37,279
uh you can see this has been repacked as

01:08:34,239 --> 01:08:40,560
i knows your point

01:08:37,279 --> 01:08:43,199
in the dfpc dot polly store type

01:08:40,560 --> 01:08:43,199
reset

01:08:43,679 --> 01:08:52,239
and then if we do a dpkg build package

01:08:47,520 --> 01:08:53,359
it will not have the dist but it already

01:08:52,239 --> 01:08:56,799
has a disk so

01:08:53,359 --> 01:08:58,239
uh we need to create a debian slash

01:08:56,799 --> 01:09:07,839
screen

01:08:58,239 --> 01:09:07,839
then say test so

01:09:08,080 --> 01:09:14,799
it will not include this and but still

01:09:11,679 --> 01:09:19,040
it's in case

01:09:14,799 --> 01:09:21,600
uh you want to actually see the

01:09:19,040 --> 01:09:22,799
uh distance in case now this is the new

01:09:21,600 --> 01:09:26,640
average star

01:09:22,799 --> 01:09:28,400
are you if you're using gbp uh usually

01:09:26,640 --> 01:09:35,839
you would do a gpp

01:09:28,400 --> 01:09:35,839
import orange minus pristine tar

01:09:38,799 --> 01:09:44,400
and then the tarball but since we are

01:09:42,480 --> 01:09:48,560
not

01:09:44,400 --> 01:09:49,279
using a git a repo here i would skip

01:09:48,560 --> 01:09:52,799
this step

01:09:49,279 --> 01:09:57,040
uh so that's all uh for the

01:09:52,799 --> 01:09:59,679
you know the packing part uh you need uh

01:09:57,040 --> 01:10:00,840
debian search copyright you need the

01:09:59,679 --> 01:10:04,239
files

01:10:00,840 --> 01:10:05,440
excluded and then you need the debian

01:10:04,239 --> 01:10:09,199
smash watch

01:10:05,440 --> 01:10:13,280
where you add feedback compression

01:10:09,199 --> 01:10:16,400
and the repack suffix and then

01:10:13,280 --> 01:10:19,440
and debian change log the version should

01:10:16,400 --> 01:10:25,440
be updated accordingly

01:10:19,440 --> 01:10:25,440
so that's it for the repacking part

01:10:27,120 --> 01:10:34,320
okay in this part we will actually see

01:10:31,840 --> 01:10:36,880
the case where a particular module you

01:10:34,320 --> 01:10:40,880
know it source repository doesn't

01:10:36,880 --> 01:10:44,080
have any any uh

01:10:40,880 --> 01:10:46,880
tags or it may only have very old

01:10:44,080 --> 01:10:49,520
tags the recent versions on npm

01:10:46,880 --> 01:10:52,320
chase.com is newer

01:10:49,520 --> 01:10:54,480
the git repository has only all the tags

01:10:52,320 --> 01:10:57,679
so what do we do

01:10:54,480 --> 01:11:02,159
so the example package here

01:10:57,679 --> 01:11:05,520
is called tsp it's a typescript

01:11:02,159 --> 01:11:09,199
plugin for the girl

01:11:05,520 --> 01:11:12,719
and we will just do npm to the

01:11:09,199 --> 01:11:13,920
create run tsp so that you know we get

01:11:12,719 --> 01:11:16,960
the

01:11:13,920 --> 01:11:21,040
initial packaging files

01:11:16,960 --> 01:11:21,040
but then uh we don't

01:11:23,199 --> 01:11:27,840
have the

01:11:28,400 --> 01:11:35,280
uh recent tag let's just verify this

01:11:32,080 --> 01:11:35,280
we can go to

01:11:38,840 --> 01:11:43,919
npmjs.com

01:11:40,850 --> 01:11:43,919
[Music]

01:11:44,640 --> 01:11:49,199
and you can see the latest version is

01:11:52,840 --> 01:11:55,840
4.0.5

01:11:57,440 --> 01:12:02,320
and if you go to the home page

01:12:04,960 --> 01:12:14,000
we will actually see i just 27

01:12:08,880 --> 01:12:18,640
releases and 27 tags

01:12:14,000 --> 01:12:18,640
let's look at the tags with the

01:12:18,719 --> 01:12:26,159
but the most recent tag is actually

01:12:22,760 --> 01:12:29,360
2.0.7 and

01:12:26,159 --> 01:12:32,320
sometimes the releases and tags may be

01:12:29,360 --> 01:12:33,199
different but uh here we have both tags

01:12:32,320 --> 01:12:36,880
and releases

01:12:33,199 --> 01:12:40,880
uh we have only 2.0.7

01:12:36,880 --> 01:12:45,280
but we need 4.0.5

01:12:40,880 --> 01:12:45,280
why do we need that we can just see

01:12:45,360 --> 01:12:55,360
we can just see the

01:12:51,679 --> 01:12:59,520
i need to switch the screen

01:12:55,360 --> 01:12:59,520
uh we need to see uh

01:12:59,840 --> 01:13:06,960
this is actually a generated file

01:13:03,600 --> 01:13:08,880
which has labelly build and rebuild all

01:13:06,960 --> 01:13:12,080
those things but

01:13:08,880 --> 01:13:14,640
it doesn't have a source directory or

01:13:12,080 --> 01:13:18,080
you know it doesn't have a gulp file or

01:13:14,640 --> 01:13:20,159
it doesn't have a ts config.json

01:13:18,080 --> 01:13:21,120
uh if it's a simple case of you know

01:13:20,159 --> 01:13:24,880
just the dist

01:13:21,120 --> 01:13:26,880
uh directory extra then probably we

01:13:24,880 --> 01:13:30,239
could just uh you know exclude

01:13:26,880 --> 01:13:30,880
uh the dist uh using the packing

01:13:30,239 --> 01:13:34,320
techniques

01:13:30,880 --> 01:13:36,480
that we learned earlier but in this case

01:13:34,320 --> 01:13:38,080
it's uh there are so many things and

01:13:36,480 --> 01:13:40,560
even the required files

01:13:38,080 --> 01:13:41,840
uh it's not just that there are extra

01:13:40,560 --> 01:13:44,159
generated files but

01:13:41,840 --> 01:13:45,520
it's that the source files are actually

01:13:44,159 --> 01:13:47,760
missing

01:13:45,520 --> 01:13:49,040
uh and the build files the files

01:13:47,760 --> 01:13:52,080
required to build

01:13:49,040 --> 01:13:54,000
the source is also missing so we have to

01:13:52,080 --> 01:13:57,840
anyway get the

01:13:54,000 --> 01:13:59,840
github uh tarball or

01:13:57,840 --> 01:14:03,679
in this case the upstream is in

01:13:59,840 --> 01:14:03,679
github.com but otherwise the

01:14:03,920 --> 01:14:11,760
tarball or the git snapshot

01:14:09,360 --> 01:14:12,800
sometimes the you know the commit

01:14:11,760 --> 01:14:15,520
message

01:14:12,800 --> 01:14:17,360
might have you know release 4.0 or

01:14:15,520 --> 01:14:20,320
something if they have that

01:14:17,360 --> 01:14:20,880
but only forward to you know uh to

01:14:20,320 --> 01:14:24,239
actually

01:14:20,880 --> 01:14:25,679
create the tag and push so probably we

01:14:24,239 --> 01:14:28,560
could just uh

01:14:25,679 --> 01:14:30,320
you know go to that particular commits

01:14:28,560 --> 01:14:33,120
uh

01:14:30,320 --> 01:14:35,360
repository history and then you see the

01:14:33,120 --> 01:14:36,560
download link the download slip link you

01:14:35,360 --> 01:14:42,080
will get you can

01:14:36,560 --> 01:14:46,400
copy the link location and

01:14:42,080 --> 01:14:49,120
oh i think i need to switch this

01:14:46,400 --> 01:14:49,120
to the

01:14:52,800 --> 01:15:01,520
browse thing so you can see that again

01:14:56,719 --> 01:15:05,199
i'll just go back and

01:15:01,520 --> 01:15:08,159
uh you can actually see the commits page

01:15:05,199 --> 01:15:08,640
and in the comments page if you look at

01:15:08,159 --> 01:15:11,920
the

01:15:08,640 --> 01:15:16,880
commit comments you might be able to see

01:15:11,920 --> 01:15:16,880
this is version 4.0.5 or something but

01:15:17,120 --> 01:15:20,719
if you're lucky and you support the

01:15:19,440 --> 01:15:24,640
correct commit

01:15:20,719 --> 01:15:27,840
then you go and browse that commit

01:15:24,640 --> 01:15:31,280
that the the uh

01:15:27,840 --> 01:15:32,080
git project three that particular commit

01:15:31,280 --> 01:15:35,679
and then

01:15:32,080 --> 01:15:38,880
you just you know find out the snapshot

01:15:35,679 --> 01:15:40,960
url this is usually the sip you do the

01:15:38,880 --> 01:15:43,760
copy link address

01:15:40,960 --> 01:15:46,239
then if you just uh you know uh change

01:15:43,760 --> 01:15:48,239
the dot ship to dot target reset you get

01:15:46,239 --> 01:15:49,600
the dot or g set file but in this case

01:15:48,239 --> 01:15:54,000
maybe you cannot

01:15:49,600 --> 01:15:56,480
find the corresponding commits because

01:15:54,000 --> 01:15:57,040
uh they maintain it under the separate

01:15:56,480 --> 01:16:01,040
release

01:15:57,040 --> 01:16:04,719
branch so that is release 4.0

01:16:01,040 --> 01:16:06,719
so that's a branch so we go to the

01:16:04,719 --> 01:16:09,760
release branch and then

01:16:06,719 --> 01:16:13,199
we take the uh

01:16:09,760 --> 01:16:15,760
head for that commit so here it's

01:16:13,199 --> 01:16:19,040
four three one five zero b f as the

01:16:15,760 --> 01:16:24,400
commit id and it was

01:16:19,040 --> 01:16:27,840
a committed on october 2nd 2019

01:16:24,400 --> 01:16:31,280
uh so we would just use the

01:16:27,840 --> 01:16:36,719
download ship link and we would

01:16:31,280 --> 01:16:36,719
change that to and also

01:16:40,400 --> 01:16:44,719
i will do the w get thing

01:16:45,199 --> 01:16:49,679
so i actually have the w get command i

01:16:49,120 --> 01:16:53,120
tried

01:16:49,679 --> 01:16:54,960
before uh so you can see

01:16:53,120 --> 01:16:56,800
the delegate and then the output file

01:16:54,960 --> 01:17:00,080
name probably we need to add

01:16:56,800 --> 01:17:01,520
plus gate and then tilde if you know

01:17:00,080 --> 01:17:03,679
someone actually

01:17:01,520 --> 01:17:05,600
have if there are multiple commits in

01:17:03,679 --> 01:17:07,920
the same day probably you need to do a

01:17:05,600 --> 01:17:11,360
dot uh

01:17:07,920 --> 01:17:15,520
commit or probably a matinder this

01:17:11,360 --> 01:17:18,239
or dot or plus based on your requirement

01:17:15,520 --> 01:17:20,400
probably don't ask the highest sorting

01:17:18,239 --> 01:17:22,320
order so probably it's wiser to use

01:17:20,400 --> 01:17:24,880
tilde

01:17:22,320 --> 01:17:27,280
in case you know the commit hash is

01:17:24,880 --> 01:17:27,280
lower

01:17:28,400 --> 01:17:32,400
so this we downloaded

01:17:32,640 --> 01:17:35,920
and then what we need to do is we just

01:17:35,280 --> 01:17:38,800
need to

01:17:35,920 --> 01:17:40,640
rename this i also did this before so i

01:17:38,800 --> 01:17:42,000
have it in my history but you can

01:17:40,640 --> 01:17:44,719
manually do it

01:17:42,000 --> 01:17:47,920
you rename this into node hyphen girl

01:17:44,719 --> 01:17:50,480
underscore version.store.json this is

01:17:47,920 --> 01:17:55,760
usually the format that the debian tool

01:17:50,480 --> 01:17:58,960
expect the original tar to be

01:17:55,760 --> 01:18:01,679
and now we go into the node

01:17:58,960 --> 01:18:04,159
and now if we need to update uh this to

01:18:01,679 --> 01:18:06,640
consider this as a new upstream version

01:18:04,159 --> 01:18:08,880
and then uh we could use the update

01:18:06,640 --> 01:18:10,640
response so i tried before so i have it

01:18:08,880 --> 01:18:13,280
in my history

01:18:10,640 --> 01:18:13,679
i minus v the version that you want and

01:18:13,280 --> 01:18:17,120
then

01:18:13,679 --> 01:18:19,040
the uh the actual tarball uh this may be

01:18:17,120 --> 01:18:21,120
because the version is a bit complicated

01:18:19,040 --> 01:18:23,040
and it couldn't automatically detect the

01:18:21,120 --> 01:18:24,159
version so you'd manually specify the

01:18:23,040 --> 01:18:27,600
version

01:18:24,159 --> 01:18:31,360
so it did and now if you actually

01:18:27,600 --> 01:18:31,360
switch to the directory

01:18:32,000 --> 01:18:37,520
okay now if you do an ls you can see the

01:18:35,280 --> 01:18:40,080
files have changed you can see the ts

01:18:37,520 --> 01:18:41,360
config the source directory the gulf

01:18:40,080 --> 01:18:44,880
file

01:18:41,360 --> 01:18:49,679
and the change log file is also there

01:18:44,880 --> 01:18:51,760
so now you can do a dpkg so it's minus b

01:18:49,679 --> 01:18:55,199
and then you would the dse file which

01:18:51,760 --> 01:18:58,159
now you can import into grid

01:18:55,199 --> 01:18:59,840
and then do the regular linden clean and

01:18:58,159 --> 01:19:04,560
other

01:18:59,840 --> 01:19:07,679
bin tasks to make a proper package

01:19:04,560 --> 01:19:11,360
so just to give it

01:19:07,679 --> 01:19:14,239
a recap you need to find the

01:19:11,360 --> 01:19:15,840
git to commit the snapshot and then you

01:19:14,239 --> 01:19:19,120
download the snapshot

01:19:15,840 --> 01:19:22,239
and then you

01:19:19,120 --> 01:19:26,400
rename it and then you

01:19:22,239 --> 01:19:28,480
use the update to you know update uh

01:19:26,400 --> 01:19:29,600
your working directory and the change

01:19:28,480 --> 01:19:32,960
log so that

01:19:29,600 --> 01:19:36,640
you know you can work on that

01:19:32,960 --> 01:19:38,080
and i think that would be it for now and

01:19:36,640 --> 01:19:42,320
probably that

01:19:38,080 --> 01:19:45,520
would be all the tips for this workshop

01:19:42,320 --> 01:19:49,120
or maybe i'll try to

01:19:45,520 --> 01:19:53,280
include one more tip so

01:19:49,120 --> 01:19:57,040
one more uh tip that i'm going to cover

01:19:53,280 --> 01:20:00,320
now is the case when

01:19:57,040 --> 01:20:02,840
you have you know you have some

01:20:00,320 --> 01:20:04,960
build dependencies you know that are not

01:20:02,840 --> 01:20:08,719
packaged

01:20:04,960 --> 01:20:12,800
or uh you know it has it's a self

01:20:08,719 --> 01:20:15,199
build dependency that

01:20:12,800 --> 01:20:16,560
i know it's hard for you to actually

01:20:15,199 --> 01:20:19,600
build it without

01:20:16,560 --> 01:20:22,840
actually using

01:20:19,600 --> 01:20:26,400
uh you know a version from npm

01:20:22,840 --> 01:20:27,040
js.com to bootstrap we actually do that

01:20:26,400 --> 01:20:29,920
for barbie

01:20:27,040 --> 01:20:32,639
7 because whatever we tried to build it

01:20:29,920 --> 01:20:35,440
with bob m6

01:20:32,639 --> 01:20:35,840
uh didn't work but earlier uh for roll

01:20:35,440 --> 01:20:38,000
up

01:20:35,840 --> 01:20:38,960
what we did was it was actually using

01:20:38,000 --> 01:20:41,520
roll up itself

01:20:38,960 --> 01:20:42,239
to build but then we managed to you know

01:20:41,520 --> 01:20:45,280
directly

01:20:42,239 --> 01:20:48,560
just attach the

01:20:45,280 --> 01:20:53,520
roll-up thing to you know directly

01:20:48,560 --> 01:20:57,360
uh create or like create a

01:20:53,520 --> 01:20:59,760
patch so the uh es module is converted

01:20:57,360 --> 01:21:02,880
to cjs so you don't need any build at

01:20:59,760 --> 01:21:05,199
all uh you could directly run it with

01:21:02,880 --> 01:21:07,199
node but then it had some problems then

01:21:05,199 --> 01:21:09,520
we realized then when they changed

01:21:07,199 --> 01:21:11,840
typescript we used directly use the

01:21:09,520 --> 01:21:14,320
typescript compiler

01:21:11,840 --> 01:21:16,000
uh without using our roll-up but i think

01:21:14,320 --> 01:21:20,080
finally yard

01:21:16,000 --> 01:21:25,600
made it to use all of itself to build

01:21:20,080 --> 01:21:25,600
uh but in this case now we are using

01:21:27,840 --> 01:21:34,719
like in low dash

01:21:31,120 --> 01:21:35,280
ah the funny part is or it's not really

01:21:34,719 --> 01:21:38,320
funny

01:21:35,280 --> 01:21:41,520
the it's quite usual

01:21:38,320 --> 01:21:44,560
that you know people use the

01:21:41,520 --> 01:21:47,840
same project

01:21:44,560 --> 01:21:49,520
as a build dependency uh to build uh so

01:21:47,840 --> 01:21:51,760
you need uh

01:21:49,520 --> 01:21:53,280
yeah but it's even if you know it's it

01:21:51,760 --> 01:21:53,840
works with the older version that we

01:21:53,280 --> 01:21:56,719
still

01:21:53,840 --> 01:21:58,480
find somewhere like after first

01:21:56,719 --> 01:22:00,320
bootstrap

01:21:58,480 --> 01:22:02,159
you could use the old version but the

01:22:00,320 --> 01:22:02,639
most of the time you know it does it

01:22:02,159 --> 01:22:05,679
needs

01:22:02,639 --> 01:22:06,880
a very close to the version that it

01:22:05,679 --> 01:22:09,360
needs

01:22:06,880 --> 01:22:11,280
it wouldn't work with the like probably

01:22:09,360 --> 01:22:13,280
seven you know it wouldn't build with

01:22:11,280 --> 01:22:16,080
barbie six

01:22:13,280 --> 01:22:19,199
so you know you had to use power seven

01:22:16,080 --> 01:22:23,040
from npmjs.com to build bubble seven

01:22:19,199 --> 01:22:26,159
and then you again rebuild with the

01:22:23,040 --> 01:22:29,360
binary package that you got

01:22:26,159 --> 01:22:32,320
uh so in this case uh you can see uh

01:22:29,360 --> 01:22:32,719
it's it needs some build steps so it's

01:22:32,320 --> 01:22:36,159
not

01:22:32,719 --> 01:22:38,760
uh having lib index.js

01:22:36,159 --> 01:22:41,280
which is mentioned as the main entry in

01:22:38,760 --> 01:22:43,600
package.json so we need to create lib

01:22:41,280 --> 01:22:46,719
index but then now

01:22:43,600 --> 01:22:49,440
uh uh first we go to barbie plugin

01:22:46,719 --> 01:22:49,440
loaders

01:22:49,760 --> 01:22:57,840
and then if we

01:22:52,960 --> 01:22:57,840
do this

01:23:04,639 --> 01:23:12,400
you can see the build command is

01:23:09,840 --> 01:23:20,320
just the bubble thing but then you know

01:23:12,400 --> 01:23:23,600
it would actually

01:23:20,320 --> 01:23:24,000
it would actually use itself we can see

01:23:23,600 --> 01:23:28,880
that

01:23:24,000 --> 01:23:31,679
in wind dependencies it has

01:23:28,880 --> 01:23:33,840
uh bubble plug-in loader as a

01:23:31,679 --> 01:23:37,360
independency

01:23:33,840 --> 01:23:42,480
so first let's try this debian slash

01:23:37,360 --> 01:23:42,480
small chair slash build

01:23:44,719 --> 01:23:50,080
okay so you need to create this and then

01:23:50,400 --> 01:23:53,440
to an address field and then let's try

01:23:52,880 --> 01:23:56,480
to do

01:23:53,440 --> 01:23:59,840
the bubble command and here

01:23:56,480 --> 01:24:00,719
in the bin we have available js and then

01:23:59,840 --> 01:24:03,920
let's see

01:24:00,719 --> 01:24:03,920
if it prints

01:24:05,199 --> 01:24:17,840
okay we need to actually remove

01:24:08,239 --> 01:24:17,840
another modules

01:24:20,480 --> 01:24:25,040
and now if we do the build

01:24:25,120 --> 01:24:30,960
okay now it says the

01:24:28,400 --> 01:24:31,520
cannot find module bubble plugin lower

01:24:30,960 --> 01:24:34,320
dash

01:24:31,520 --> 01:24:35,920
because it is you know itself so

01:24:34,320 --> 01:24:39,040
actually

01:24:35,920 --> 01:24:42,080
uh we could do a trick uh let's say

01:24:39,040 --> 01:24:45,840
let it use a link

01:24:42,080 --> 01:24:51,440
itself so let's say mkdir minus p

01:24:45,840 --> 01:24:56,320
node underscore modules

01:24:51,440 --> 01:24:56,320
and then you could say

01:24:57,199 --> 01:25:04,880
and then minus s total

01:25:00,480 --> 01:25:08,560
as known as called module slash

01:25:04,880 --> 01:25:11,679
barbie like him

01:25:08,560 --> 01:25:27,840
no dash let's see if it

01:25:11,679 --> 01:25:27,840
will find itself

01:25:33,280 --> 01:25:45,120
okay oh this should be ln minus is

01:25:41,600 --> 01:25:48,400
under the symbolic link okay

01:25:45,120 --> 01:25:51,679
so now uh we see this

01:25:48,400 --> 01:25:53,120
found it actually found and built but

01:25:51,679 --> 01:25:56,639
then

01:25:53,120 --> 01:26:01,920
you know when we actually try this

01:25:56,639 --> 01:26:01,920
it still doesn't have the lib index.js

01:26:06,719 --> 01:26:11,679
because it only has source you know and

01:26:10,320 --> 01:26:14,560
the

01:26:11,679 --> 01:26:17,360
main entry is probably we could do

01:26:14,560 --> 01:26:22,480
change the main to module and all but

01:26:17,360 --> 01:26:24,719
i found an easier way to do

01:26:22,480 --> 01:26:26,560
we could use you know another tool to

01:26:24,719 --> 01:26:30,480
actually generate the lib

01:26:26,560 --> 01:26:34,480
uh us the bootstrapping tool and

01:26:30,480 --> 01:26:38,080
you know we just need to uh convert

01:26:34,480 --> 01:26:40,000
i think the import statement the es

01:26:38,080 --> 01:26:43,600
module to common js one

01:26:40,000 --> 01:26:47,280
so we could use uh a rollup to do just

01:26:43,600 --> 01:26:52,960
that and then later do bubble to do the

01:26:47,280 --> 01:26:52,960
you know full transpiling so i would say

01:26:54,639 --> 01:26:57,199
roll up

01:26:59,840 --> 01:27:08,080
minus format common js

01:27:04,639 --> 01:27:11,679
source slash index.js

01:27:08,080 --> 01:27:14,960
will be saved as a slash

01:27:11,679 --> 01:27:19,440
index address

01:27:14,960 --> 01:27:21,520
let's see if it's actually index.js okay

01:27:19,440 --> 01:27:25,760
name doesn't have anything so now let's

01:27:21,520 --> 01:27:25,760
do a dpkg package

01:27:26,000 --> 01:27:33,520
okay so now you can see it actually did

01:27:31,199 --> 01:27:34,800
roll up and then leave index searches

01:27:33,520 --> 01:27:40,000
and then it has

01:27:34,800 --> 01:27:44,639
the unresolved dependencies to load ash

01:27:40,000 --> 01:27:44,639
bubble types okay this are all

01:27:44,719 --> 01:27:51,280
and then yeah it needs to do

01:27:48,560 --> 01:27:51,760
uh cannot find modules require package

01:27:51,280 --> 01:27:55,360
name

01:27:51,760 --> 01:28:01,600
so probably i need to embed that

01:27:55,360 --> 01:28:03,440
so i would say

01:28:01,600 --> 01:28:05,760
these uh warnings you could ignore

01:28:03,440 --> 01:28:09,199
because it's a cjs thing and when

01:28:05,760 --> 01:28:11,920
we do the uh

01:28:09,199 --> 01:28:13,199
cjs even if it doesn't find you know

01:28:11,920 --> 01:28:16,000
during run time if

01:28:13,199 --> 01:28:16,639
they require low dash works that would

01:28:16,000 --> 01:28:20,560
be

01:28:16,639 --> 01:28:24,800
fine enough and

01:28:20,560 --> 01:28:29,840
we need this so we say add

01:28:24,800 --> 01:28:29,840
node component

01:28:34,000 --> 01:28:38,239
okay and then say u scan minus minus 12

01:28:37,760 --> 01:28:43,840
plus

01:28:38,239 --> 01:28:43,840
minus 3d

01:28:47,280 --> 01:28:52,080
uh so the required package name is

01:28:53,040 --> 01:28:57,840
are downloaded now let's

01:28:58,960 --> 01:29:01,120
to

01:29:03,120 --> 01:29:08,080
we don't need to change the version to

01:29:08,239 --> 01:29:12,800
create this then i think uh

01:29:13,040 --> 01:29:20,040
we need to do it clean

01:29:16,639 --> 01:29:22,840
and then create the source okay the lib

01:29:20,040 --> 01:29:26,000
index.jss also should be

01:29:22,840 --> 01:29:30,480
cleaned because we generated

01:29:26,000 --> 01:29:30,480
this type in green

01:29:31,120 --> 01:29:36,159
as this so we came to three

01:29:36,239 --> 01:29:43,760
dbg source minus v okay we got the

01:29:39,280 --> 01:29:48,080
dsc file and

01:29:43,760 --> 01:29:52,800
now let's uh

01:29:48,080 --> 01:29:55,840
remove this directory first

01:29:52,800 --> 01:29:58,239
and then do a dp kids this is minus

01:29:55,840 --> 01:29:58,239
x

01:30:00,320 --> 01:30:05,840
okay now if we go to double click

01:30:03,679 --> 01:30:07,360
as you can see require package name it's

01:30:05,840 --> 01:30:10,800
there as a component

01:30:07,360 --> 01:30:13,840
and now if we do dpkt

01:30:10,800 --> 01:30:13,840
build package

01:30:15,840 --> 01:30:21,840
uh it's now actually able to do

01:30:19,120 --> 01:30:21,840
a

01:30:22,560 --> 01:30:26,960
are this we already created so that's

01:30:24,639 --> 01:30:30,880
fine it actually do a required

01:30:26,960 --> 01:30:33,040
thing works and so we did a

01:30:30,880 --> 01:30:34,400
bootstrapping and yeah i think this

01:30:33,040 --> 01:30:38,080
particular thing

01:30:34,400 --> 01:30:41,600
know how to fix as well

01:30:38,080 --> 01:30:44,880
but this is a bug in the npm

01:30:41,600 --> 01:30:44,880
twitter probably

01:30:45,780 --> 01:30:49,600
[Music]

01:30:47,199 --> 01:30:50,480
so if you fix that then the package

01:30:49,600 --> 01:30:53,120
would build

01:30:50,480 --> 01:30:53,840
fine okay so the entire lead directory

01:30:53,120 --> 01:30:57,360
should be

01:30:53,840 --> 01:31:03,840
cleaned let's just index

01:30:57,360 --> 01:31:03,840
stitches so

01:31:05,280 --> 01:31:11,600
so now we we would start using

01:31:08,800 --> 01:31:14,400
another tool uh just to do the

01:31:11,600 --> 01:31:17,840
conversion from

01:31:14,400 --> 01:31:17,840
uh you know uh

01:31:17,920 --> 01:31:21,280
ps modules to common js and then you

01:31:20,800 --> 01:31:24,480
know

01:31:21,280 --> 01:31:26,960
uh just uh did the transparent with

01:31:24,480 --> 01:31:26,960
bobbin

01:31:27,360 --> 01:31:33,600
and uh yeah so that's

01:31:30,480 --> 01:31:36,560
it for i think all the tips

01:31:33,600 --> 01:31:36,960
for this particular series so workshop

01:31:36,560 --> 01:31:40,080
uh

01:31:36,960 --> 01:31:44,880
thanks for listening

01:31:40,080 --> 01:31:48,000
and if you are uh listening to this

01:31:44,880 --> 01:31:51,520
as part of minitepcon

01:31:48,000 --> 01:31:55,280
india online then you would have a

01:31:51,520 --> 01:31:58,880
you'd have a chance to ask questions

01:31:55,280 --> 01:32:01,280
and thank you

01:31:58,880 --> 01:32:01,280
2-1

01:32:02,560 --> 01:32:09,360
i think that was a very intense workshop

01:32:06,400 --> 01:32:10,560
i tried to follow but i'm pretty sure i

01:32:09,360 --> 01:32:13,840
dropped in between

01:32:10,560 --> 01:32:16,880
many times yeah i think

01:32:13,840 --> 01:32:19,040
my intention was mainly to you know keep

01:32:16,880 --> 01:32:19,520
it as a document as a reference and this

01:32:19,040 --> 01:32:22,719
actually

01:32:19,520 --> 01:32:25,280
split into i think five

01:32:22,719 --> 01:32:27,040
small parts so each of the time when

01:32:25,280 --> 01:32:29,760
someone asks me a doubt

01:32:27,040 --> 01:32:31,360
i can give a link to this video and then

01:32:29,760 --> 01:32:34,480
they can see that so

01:32:31,360 --> 01:32:36,560
my main cons like main motivation to

01:32:34,480 --> 01:32:38,719
record this was to you know

01:32:36,560 --> 01:32:39,760
keep it as a reference because people

01:32:38,719 --> 01:32:41,679
keep asking me

01:32:39,760 --> 01:32:44,000
this again and again and then i have to

01:32:41,679 --> 01:32:46,080
explain it again and again so

01:32:44,000 --> 01:32:49,040
if i have something to show them that's

01:32:46,080 --> 01:32:49,040
that's better so

01:32:50,880 --> 01:32:54,639
so i mean actually that brings me to

01:32:53,520 --> 01:32:58,239
that that question

01:32:54,639 --> 01:32:59,520
in the pad maybe you can

01:32:58,239 --> 01:33:01,120
i mean maybe you can talk about the

01:32:59,520 --> 01:33:02,560
other things we discussed already in the

01:33:01,120 --> 01:33:06,480
arc but

01:33:02,560 --> 01:33:09,920
how much of this uh tips

01:33:06,480 --> 01:33:13,679
the tools and the commands you show them

01:33:09,920 --> 01:33:15,120
are going to be the same in the future

01:33:13,679 --> 01:33:16,320
like in six months will there be a

01:33:15,120 --> 01:33:19,679
rewrite of

01:33:16,320 --> 01:33:21,520
the packages and then all of this

01:33:19,679 --> 01:33:23,440
are going to change is it going to be

01:33:21,520 --> 01:33:26,719
that way or

01:33:23,440 --> 01:33:30,080
is it worth learning all this uh

01:33:26,719 --> 01:33:32,960
i think i don't know from uh

01:33:30,080 --> 01:33:33,920
working with you know so much of node.js

01:33:32,960 --> 01:33:36,639
sometimes

01:33:33,920 --> 01:33:38,400
you feel optimistic when you know new

01:33:36,639 --> 01:33:42,159
things come up like i think

01:33:38,400 --> 01:33:44,800
the es es modules thing

01:33:42,159 --> 01:33:46,880
uh you know uh where you know you can do

01:33:44,800 --> 01:33:48,880
tree shaping and stuff like that so you

01:33:46,880 --> 01:33:50,800
don't really have to create small

01:33:48,880 --> 01:33:52,880
modules anymore

01:33:50,800 --> 01:33:54,719
because probably you know the motivation

01:33:52,880 --> 01:33:57,600
for creating you know

01:33:54,719 --> 01:33:59,679
one module for function or you know very

01:33:57,600 --> 01:34:01,760
small functionality was probably to

01:33:59,679 --> 01:34:04,000
reduce the size because the common js

01:34:01,760 --> 01:34:05,520
would you know include your whole module

01:34:04,000 --> 01:34:07,679
there is no option to you know

01:34:05,520 --> 01:34:09,679
selectively use one function but with

01:34:07,679 --> 01:34:11,600
the es module thing

01:34:09,679 --> 01:34:13,280
you know even if your library is too big

01:34:11,600 --> 01:34:13,920
when you build it you know you can just

01:34:13,280 --> 01:34:16,000
select

01:34:13,920 --> 01:34:18,560
the function that you need so probably

01:34:16,000 --> 01:34:22,159
you know the small modules was

01:34:18,560 --> 01:34:25,679
a result of you know an imitation

01:34:22,159 --> 01:34:26,960
in common js but at the same time i

01:34:25,679 --> 01:34:29,280
don't know es module

01:34:26,960 --> 01:34:30,560
it has been there for a long time but i

01:34:29,280 --> 01:34:33,199
think even now it

01:34:30,560 --> 01:34:34,400
is not supported by default in node.js

01:34:33,199 --> 01:34:36,880
so

01:34:34,400 --> 01:34:38,320
eventually probably the small modules

01:34:36,880 --> 01:34:41,760
will not be an issue

01:34:38,320 --> 01:34:44,000
but i don't know how long it would take

01:34:41,760 --> 01:34:46,080
for it to be default and you know

01:34:44,000 --> 01:34:48,320
adopted by most people

01:34:46,080 --> 01:34:49,440
then like that you know comment i

01:34:48,320 --> 01:34:52,560
mentioned about

01:34:49,440 --> 01:34:53,840
in irc like in the other part about the

01:34:52,560 --> 01:34:55,600
chat systems

01:34:53,840 --> 01:34:57,760
you know there will be one person who

01:34:55,600 --> 01:35:00,320
will be chatting in irc after

01:34:57,760 --> 01:35:03,280
you know 50 years something there was

01:35:00,320 --> 01:35:06,159
something about irc

01:35:03,280 --> 01:35:08,320
uh i don't know if there was try to

01:35:06,159 --> 01:35:11,760
share my screen

01:35:08,320 --> 01:35:13,520
i think yeah okay yes this comment right

01:35:11,760 --> 01:35:15,920
now probably

01:35:13,520 --> 01:35:16,960
anyway uh basically i think even when

01:35:15,920 --> 01:35:20,880
you know in their uh

01:35:16,960 --> 01:35:21,600
uh the community the underworld moves to

01:35:20,880 --> 01:35:23,199
us

01:35:21,600 --> 01:35:25,440
probably you know some people would

01:35:23,199 --> 01:35:26,560
still you know say you know we are proud

01:35:25,440 --> 01:35:28,960
of the lego

01:35:26,560 --> 01:35:30,800
blog concept and we'll make small things

01:35:28,960 --> 01:35:33,920
for everything

01:35:30,800 --> 01:35:37,119
so but it wouldn't probably need

01:35:33,920 --> 01:35:39,440
us often at least that is my hope but

01:35:37,119 --> 01:35:41,440
i don't think how often like how soon

01:35:39,440 --> 01:35:44,880
that would happen

01:35:41,440 --> 01:35:47,760
and regarding typescript uh probably

01:35:44,880 --> 01:35:49,760
i think it would be an improvement in

01:35:47,760 --> 01:35:52,560
the sense that you know for

01:35:49,760 --> 01:35:54,800
i think the older javascript older

01:35:52,560 --> 01:35:55,199
node.js versions probably a lot of

01:35:54,800 --> 01:35:57,440
things

01:35:55,199 --> 01:35:59,280
had to be you know part of the module

01:35:57,440 --> 01:36:02,400
the standard node.js

01:35:59,280 --> 01:36:04,239
apa was very limited but now you know

01:36:02,400 --> 01:36:06,960
the typescript itself i think support

01:36:04,239 --> 01:36:10,320
es6 or es7 a really recent

01:36:06,960 --> 01:36:12,480
you know syntaxes and

01:36:10,320 --> 01:36:14,080
uh probably you know you wouldn't need

01:36:12,480 --> 01:36:16,719
as many modules as

01:36:14,080 --> 01:36:18,560
you know older uh like the javascript

01:36:16,719 --> 01:36:22,560
that you wrote for

01:36:18,560 --> 01:36:24,719
note 0.2 or you know older node 4 or 5.

01:36:22,560 --> 01:36:26,239
probably typescript wouldn't need as

01:36:24,719 --> 01:36:29,119
many

01:36:26,239 --> 01:36:30,400
uh i know extra modules to build and

01:36:29,119 --> 01:36:32,480
also you know

01:36:30,400 --> 01:36:34,159
uh currently at least for now there is

01:36:32,480 --> 01:36:35,920
only one typescript controller to

01:36:34,159 --> 01:36:38,480
complete ice cream

01:36:35,920 --> 01:36:39,119
but you know es6 you have baby you have

01:36:38,480 --> 01:36:40,719
bubble

01:36:39,119 --> 01:36:43,760
and for module bundlers you have

01:36:40,719 --> 01:36:46,080
browserify webspace roller

01:36:43,760 --> 01:36:48,480
and even the package managers you know

01:36:46,080 --> 01:36:50,000
there is npm there is the yarn and now

01:36:48,480 --> 01:36:52,719
they have pnpm

01:36:50,000 --> 01:36:53,360
and okay it's fine you have multiple

01:36:52,719 --> 01:36:55,679
tools but

01:36:53,360 --> 01:36:57,600
they don't you know support the same

01:36:55,679 --> 01:36:59,600
format you know at least you know agree

01:36:57,600 --> 01:37:01,679
on some common format you innovate

01:36:59,600 --> 01:37:04,159
whatever you want to innovate

01:37:01,679 --> 01:37:05,360
but at least in the formats should be

01:37:04,159 --> 01:37:07,360
interoperable you know

01:37:05,360 --> 01:37:08,560
okay and you want to implement so much

01:37:07,360 --> 01:37:10,480
features but

01:37:08,560 --> 01:37:12,080
at least you know agree on the you know

01:37:10,480 --> 01:37:14,560
log file format

01:37:12,080 --> 01:37:16,880
uh so at least for typescript probably

01:37:14,560 --> 01:37:19,520
we would only need to do the typescript

01:37:16,880 --> 01:37:21,440
one single tool to combine typescript

01:37:19,520 --> 01:37:22,560
but i already seen you know roll up

01:37:21,440 --> 01:37:24,719
plugins that is

01:37:22,560 --> 01:37:26,560
plugin typescript there is roller

01:37:24,719 --> 01:37:28,480
plug-in typescript too

01:37:26,560 --> 01:37:30,880
which would print more warnings of

01:37:28,480 --> 01:37:34,080
typescript and then there is i think

01:37:30,880 --> 01:37:36,560
some roll-up plug-in hyphen

01:37:34,080 --> 01:37:37,440
ps so there's already three type script

01:37:36,560 --> 01:37:39,760
plug-in for

01:37:37,440 --> 01:37:41,520
you know for now that is some webpack so

01:37:39,760 --> 01:37:42,000
probably plug-ins would be multiple

01:37:41,520 --> 01:37:43,840
things but

01:37:42,000 --> 01:37:46,239
hopefully at least the typescript main

01:37:43,840 --> 01:37:48,400
compiler would just be one

01:37:46,239 --> 01:37:49,440
so hopefully we would have to maintain

01:37:48,400 --> 01:37:52,480
less

01:37:49,440 --> 01:37:55,920
number of build tools uh that is just

01:37:52,480 --> 01:37:59,119
my hope so

01:37:55,920 --> 01:38:02,320
i think uh yeah so

01:37:59,119 --> 01:38:04,639
i mean you mentioned in irc

01:38:02,320 --> 01:38:06,320
i mean i'm changing the question back to

01:38:04,639 --> 01:38:09,760
the thing about

01:38:06,320 --> 01:38:12,480
various tools that have been used so

01:38:09,760 --> 01:38:13,119
you mentioned the git packaging survey

01:38:12,480 --> 01:38:16,320
and

01:38:13,119 --> 01:38:20,080
i went through it very quickly there are

01:38:16,320 --> 01:38:23,600
like many many tools that are

01:38:20,080 --> 01:38:25,600
kind of there so for

01:38:23,600 --> 01:38:27,119
for someone who is trying to get into

01:38:25,600 --> 01:38:30,480
javascript packaging you know

01:38:27,119 --> 01:38:34,560
that you i saw you were using

01:38:30,480 --> 01:38:38,080
dpkg build package and packages

01:38:34,560 --> 01:38:41,119
and npm to depth uh these are the ones

01:38:38,080 --> 01:38:41,119
to start with or

01:38:42,400 --> 01:38:45,440
yeah i think to start see i think uh

01:38:44,880 --> 01:38:48,159
these

01:38:45,440 --> 01:38:49,280
uh dpkg bill package you know that would

01:38:48,159 --> 01:38:52,719
be

01:38:49,280 --> 01:38:55,280
uh common for every package and uh

01:38:52,719 --> 01:38:56,560
npm two for all the node things package

01:38:55,280 --> 01:38:59,119
their stores but the git

01:38:56,560 --> 01:38:59,679
layout you know probably quilt you could

01:38:59,119 --> 01:39:01,600
get

01:38:59,679 --> 01:39:04,080
two away without using quilt you could

01:39:01,600 --> 01:39:07,760
do you know git dpm wherein you

01:39:04,080 --> 01:39:09,920
create a separate branch uh

01:39:07,760 --> 01:39:12,239
so that you know you just make the

01:39:09,920 --> 01:39:15,280
changes directly and then you know

01:39:12,239 --> 01:39:18,639
uh git tpm will generate the you know

01:39:15,280 --> 01:39:20,960
patches automatically from the commits

01:39:18,639 --> 01:39:22,320
and you know there are more uh you know

01:39:20,960 --> 01:39:25,840
git like uh

01:39:22,320 --> 01:39:27,440
workflows like digit those kind of

01:39:25,840 --> 01:39:30,000
things so

01:39:27,440 --> 01:39:32,239
if you find this you know that the

01:39:30,000 --> 01:39:35,040
regular git workflow more comfortable

01:39:32,239 --> 01:39:39,040
you can give it a try git tpm

01:39:35,040 --> 01:39:41,119
or dig it and you know then you probably

01:39:39,040 --> 01:39:41,840
wouldn't have to do a lot of debian

01:39:41,119 --> 01:39:44,560
specific

01:39:41,840 --> 01:39:46,239
at least the patch part uh you don't

01:39:44,560 --> 01:39:48,000
have to learn quilt and

01:39:46,239 --> 01:39:49,600
do the debian patches that could be

01:39:48,000 --> 01:39:51,520
generated automatically

01:39:49,600 --> 01:39:52,639
and i think even the uploading part you

01:39:51,520 --> 01:39:55,679
know digit

01:39:52,639 --> 01:39:56,320
can when you do it i think just start i

01:39:55,679 --> 01:39:58,639
think

01:39:56,320 --> 01:39:59,600
i don't know if it's actually in live

01:39:58,639 --> 01:40:01,119
but

01:39:59,600 --> 01:40:03,360
you know they were discussing and

01:40:01,119 --> 01:40:04,880
probably they were planning to implement

01:40:03,360 --> 01:40:07,040
if you just you know push a git

01:40:04,880 --> 01:40:08,960
tag it would actually upload the package

01:40:07,040 --> 01:40:12,000
so people are actually you know

01:40:08,960 --> 01:40:13,840
looking to create those kind of

01:40:12,000 --> 01:40:16,400
workflows and even you know

01:40:13,840 --> 01:40:17,440
earlier you know we had the old git

01:40:16,400 --> 01:40:20,400
workflow as in

01:40:17,440 --> 01:40:22,480
you know centralized thing uh the world

01:40:20,400 --> 01:40:23,280
source forge or savannah kind of thing

01:40:22,480 --> 01:40:25,360
you know where

01:40:23,280 --> 01:40:26,960
someone has to be added as a member of

01:40:25,360 --> 01:40:28,880
the project and they know they would

01:40:26,960 --> 01:40:31,840
push directly

01:40:28,880 --> 01:40:34,159
you know the merge request flow was

01:40:31,840 --> 01:40:37,360
missing but i think in last few years

01:40:34,159 --> 01:40:39,440
we had we created and we

01:40:37,360 --> 01:40:42,239
have our own you know gitlab instance

01:40:39,440 --> 01:40:45,760
also and you can just do the

01:40:42,239 --> 01:40:48,400
git merge request workflow so

01:40:45,760 --> 01:40:49,119
onboarding of new contributors has

01:40:48,400 --> 01:40:52,159
become

01:40:49,119 --> 01:40:54,480
much simpler but yeah i think

01:40:52,159 --> 01:40:55,760
there are still more things that we can

01:40:54,480 --> 01:40:57,600
do to make things

01:40:55,760 --> 01:40:58,960
easier for new contributors i think

01:40:57,600 --> 01:41:02,800
digit and

01:40:58,960 --> 01:41:04,800
the git gpm kind of workflows would make

01:41:02,800 --> 01:41:06,560
it easy for the newbies but since i

01:41:04,800 --> 01:41:08,639
think i am more used to the you know

01:41:06,560 --> 01:41:10,719
tarballs and the

01:41:08,639 --> 01:41:12,560
import workflow i was just following

01:41:10,719 --> 01:41:15,679
that but i think some people already

01:41:12,560 --> 01:41:17,280
use these other tools so i think there

01:41:15,679 --> 01:41:20,320
are documentation you can check

01:41:17,280 --> 01:41:23,520
and if it's you know if it feels easier

01:41:20,320 --> 01:41:26,560
then you can choose that

01:41:23,520 --> 01:41:28,320
nice so uh i think there are like

01:41:26,560 --> 01:41:30,000
two minutes left so is there anything

01:41:28,320 --> 01:41:33,840
that you have left in the

01:41:30,000 --> 01:41:33,840
workshop that you want to add

01:41:33,920 --> 01:41:38,960
uh no i think this uh

01:41:37,040 --> 01:41:40,239
like i said i think this i want to keep

01:41:38,960 --> 01:41:42,800
it as a reference

01:41:40,239 --> 01:41:44,639
that you know when people ask doubts

01:41:42,800 --> 01:41:48,080
commonly i can

01:41:44,639 --> 01:41:49,199
show them so i think if any of you who

01:41:48,080 --> 01:41:51,520
are you know new to

01:41:49,199 --> 01:41:53,520
packaging and want to learn i would say

01:41:51,520 --> 01:41:55,760
just you know you go

01:41:53,520 --> 01:41:57,679
uh you know each of these you know one

01:41:55,760 --> 01:42:00,320
by one in the wiki link

01:41:57,679 --> 01:42:00,719
in the pad you can see there is each of

01:42:00,320 --> 01:42:03,840
these

01:42:00,719 --> 01:42:05,840
is you know separately explained and

01:42:03,840 --> 01:42:09,600
also the video is also shorter one

01:42:05,840 --> 01:42:11,040
is for one uh one tip and then you try

01:42:09,600 --> 01:42:14,000
it out and then

01:42:11,040 --> 01:42:16,880
you know you can ask questions anytime

01:42:14,000 --> 01:42:20,000
in the irc channel or the metrics group

01:42:16,880 --> 01:42:23,360
i have mentioned it in the other part

01:42:20,000 --> 01:42:24,560
it's debian iphone js from mendes collin

01:42:23,360 --> 01:42:27,840
powdery.com

01:42:24,560 --> 01:42:29,920
uh or has debian iphone browserify on

01:42:27,840 --> 01:42:33,600
oftc

01:42:29,920 --> 01:42:38,560
uh so that's all uh that's all

01:42:33,600 --> 01:42:41,679
okay thank you so much praveen for that

01:42:38,560 --> 01:42:42,960
i don't know very intense and dance

01:42:41,679 --> 01:42:45,520
workshop

01:42:42,960 --> 01:42:46,719
i hope a lot of people find this a

01:42:45,520 --> 01:42:49,280
valuable resource

01:42:46,719 --> 01:42:50,159
to keep coming back and refer and learn

01:42:49,280 --> 01:42:57,840
from

01:42:50,159 --> 01:42:57,840

YouTube URL: https://www.youtube.com/watch?v=1aApXsxP524


