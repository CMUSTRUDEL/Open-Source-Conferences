Title: Workshop: CI CD essentials from scratch with Gitlab.
Publication date: 2021-03-20
Playlist: miniDebConf India 2021
Description: 
	by Rajasekhar
by Ravalisri

At: MiniDebConf India 2021
https://in2021.mini.debconf.org/talks/45-workshop-cicd-essentials-from-scratch-with-gitlab/

Time : 60 Minutes

In Software Industry, the developer team puts their efforts on the deployments for small minute code changes. There are multiple stages involved in deployment as clean, build, test, deploy it which requires all your attention and intimate the dev team about the failures if so in between. The CI/CD(Continuous Integration/Continuous Deployment) helps the developer team to make changes automatically by reducing the man power.





Let's learn how to write gitlab-ci.yml file and then debian-salsa-ci.yml file

Room: Rex
Scheduled start: 2021-01-24 14:00:00
Captions: 
	00:00:05,440 --> 00:00:10,240
i am here to introduce uh

00:00:07,200 --> 00:00:10,800
two of our speakers uh raja shaker and

00:00:10,240 --> 00:00:12,960
rugby

00:00:10,800 --> 00:00:14,480
raj shaker is one of the coordination

00:00:12,960 --> 00:00:17,359
committee members of switcha and a

00:00:14,480 --> 00:00:19,279
debian packager ravi is a hacktivist at

00:00:17,359 --> 00:00:30,720
switzha and she's part of the debian

00:00:19,279 --> 00:00:32,800
telugu localization team

00:00:30,720 --> 00:00:34,719
hi everyone welcome to the mini depth

00:00:32,800 --> 00:00:37,440
conference india 2021

00:00:34,719 --> 00:00:39,520
thanks for attending the workshop i am

00:00:37,440 --> 00:00:41,200
ravulishri hacktivist switcher

00:00:39,520 --> 00:00:42,800
i completed my master of technology in

00:00:41,200 --> 00:00:45,280
software engineering

00:00:42,800 --> 00:00:47,200
my co-speaker is a coordination

00:00:45,280 --> 00:00:48,879
committee member at switzer

00:00:47,200 --> 00:00:51,920
and he works as a system administrator

00:00:48,879 --> 00:00:53,280
in newsclick.n

00:00:51,920 --> 00:00:55,120
so today we're going to share our

00:00:53,280 --> 00:00:58,640
knowledge on ci cd

00:00:55,120 --> 00:00:59,280
present in the gitlab and how it has

00:00:58,640 --> 00:01:04,320
changed

00:00:59,280 --> 00:01:04,320
the production of software in

00:01:09,280 --> 00:01:12,880
today we're gonna discuss on ci cd

00:01:11,439 --> 00:01:16,320
present in the gitlab

00:01:12,880 --> 00:01:19,520
and what are the changes made by it in

00:01:16,320 --> 00:01:19,520
the software industry

00:01:19,600 --> 00:01:23,600
ci cd are named as continuous

00:01:22,799 --> 00:01:26,479
integration

00:01:23,600 --> 00:01:27,280
and continuous deployment continuous

00:01:26,479 --> 00:01:30,880
integration

00:01:27,280 --> 00:01:32,400
can be explained as it runs automatic

00:01:30,880 --> 00:01:36,560
build and test steps

00:01:32,400 --> 00:01:40,000
to ensure the code changes reliably

00:01:36,560 --> 00:01:41,439
when we develop a software we follow to

00:01:40,000 --> 00:01:45,280
the stages like

00:01:41,439 --> 00:01:48,240
plan create test deploy

00:01:45,280 --> 00:01:50,479
many developers make the manual changes

00:01:48,240 --> 00:01:53,680
and the mini changes

00:01:50,479 --> 00:01:57,600
into the scripts of

00:01:53,680 --> 00:02:01,759
create build and deploy ca makes it

00:01:57,600 --> 00:02:05,439
automatic which makes less manpower

00:02:01,759 --> 00:02:08,080
and in less time we can deliver a

00:02:05,439 --> 00:02:11,520
reliable product

00:02:08,080 --> 00:02:13,840
all the changes we make in ci cd

00:02:11,520 --> 00:02:15,200
and we can match into the central

00:02:13,840 --> 00:02:17,440
repository

00:02:15,200 --> 00:02:18,800
we can view the status of the project

00:02:17,440 --> 00:02:21,440
and how the

00:02:18,800 --> 00:02:25,120
changes are to be done within a less

00:02:21,440 --> 00:02:27,520
time and within a less human effort

00:02:25,120 --> 00:02:29,040
cd is described as a continuous

00:02:27,520 --> 00:02:31,840
deployment

00:02:29,040 --> 00:02:35,440
which is a quick and seamless method of

00:02:31,840 --> 00:02:38,560
delivering the code to the end users

00:02:35,440 --> 00:02:39,680
it can be mentioned as the whatever the

00:02:38,560 --> 00:02:41,840
way developers

00:02:39,680 --> 00:02:44,800
choose to push the core into the

00:02:41,840 --> 00:02:44,800
deployment stage

00:02:45,280 --> 00:02:49,200
here we can meet the ci cd overview in

00:02:48,480 --> 00:02:52,800
continuous

00:02:49,200 --> 00:02:54,239
integration we can see many methods to

00:02:52,800 --> 00:02:57,519
be followed

00:02:54,239 --> 00:02:59,280
and few of them are code quality we need

00:02:57,519 --> 00:03:02,959
to check the code quality

00:02:59,280 --> 00:03:05,599
when we write a ci which means

00:03:02,959 --> 00:03:07,040
we have to follow the rules of the

00:03:05,599 --> 00:03:09,519
language

00:03:07,040 --> 00:03:12,080
we need to check the intendation we need

00:03:09,519 --> 00:03:15,280
to check the syntax

00:03:12,080 --> 00:03:18,959
and how qualified code you have written

00:03:15,280 --> 00:03:21,120
which means within a less number of code

00:03:18,959 --> 00:03:22,400
within less number of code we need to

00:03:21,120 --> 00:03:25,840
deliver a good

00:03:22,400 --> 00:03:25,840
non script

00:03:26,799 --> 00:03:31,680
and the next is performance testing

00:03:29,840 --> 00:03:34,239
which is we need to test the performance

00:03:31,680 --> 00:03:35,519
of the code how it gonna run how it

00:03:34,239 --> 00:03:38,159
gonna help

00:03:35,519 --> 00:03:39,280
thus the code is compatible in all the

00:03:38,159 --> 00:03:43,120
browsers

00:03:39,280 --> 00:03:45,760
present in our software

00:03:43,120 --> 00:03:46,640
other is the junit which is the kind of

00:03:45,760 --> 00:03:50,080
unit testing

00:03:46,640 --> 00:03:53,760
we need to when we develop a software

00:03:50,080 --> 00:03:55,920
we it is necessary to break the code

00:03:53,760 --> 00:04:00,080
into the unit wise

00:03:55,920 --> 00:04:03,439
so when we test the unit twice code

00:04:00,080 --> 00:04:07,280
it helps in finding the errors quickly

00:04:03,439 --> 00:04:11,280
and it helps in resolving the errors

00:04:07,280 --> 00:04:14,480
with the less human effort

00:04:11,280 --> 00:04:15,760
which means if we can find the error in

00:04:14,480 --> 00:04:18,959
the first

00:04:15,760 --> 00:04:21,840
stage uh we can solve it there only

00:04:18,959 --> 00:04:23,120
otherwise uh we need to check like

00:04:21,840 --> 00:04:26,320
whereas the error is

00:04:23,120 --> 00:04:27,520
and for the end product we can't deliver

00:04:26,320 --> 00:04:29,840
the

00:04:27,520 --> 00:04:29,840
on time

00:04:30,560 --> 00:04:36,479
so other is the package which is

00:04:33,680 --> 00:04:38,880
container registry we can mention like

00:04:36,479 --> 00:04:42,160
whatever the core changes we have done

00:04:38,880 --> 00:04:45,040
we can make it into a package so that

00:04:42,160 --> 00:04:47,120
other can also make use of it for that

00:04:45,040 --> 00:04:49,680
development

00:04:47,120 --> 00:04:50,479
here is continuous deployment as i

00:04:49,680 --> 00:04:53,440
mentioned it is

00:04:50,479 --> 00:04:55,520
automatically deployed to production it

00:04:53,440 --> 00:04:57,840
releases

00:04:55,520 --> 00:04:57,840
the

00:05:00,000 --> 00:05:11,840
the product is really the product is

00:05:02,880 --> 00:05:11,840
deployed in a gitlab releases

00:05:16,000 --> 00:05:19,280
here we can see the continuous

00:05:17,520 --> 00:05:23,360
deployment where

00:05:19,280 --> 00:05:26,160
the product we can view a new gitlab

00:05:23,360 --> 00:05:26,160
releases way

00:05:29,039 --> 00:05:32,639
here we can see the continuous

00:05:30,400 --> 00:05:39,840
deployment where we can view

00:05:32,639 --> 00:05:39,840
the auto deployment

00:05:41,840 --> 00:05:45,360
here we can see the continuous

00:05:43,120 --> 00:05:47,120
deployment

00:05:45,360 --> 00:05:52,000
where we can see the automatic

00:05:47,120 --> 00:05:55,199
deployment to the production

00:05:52,000 --> 00:05:57,520
cacd can be written to see a ml

00:05:55,199 --> 00:05:57,520
file

00:06:04,880 --> 00:06:11,600
to write it is ci cd there are many

00:06:08,400 --> 00:06:13,520
file extensions are present as you can

00:06:11,600 --> 00:06:16,880
see that one is a yaml

00:06:13,520 --> 00:06:19,840
which is the ant markup language the xml

00:06:16,880 --> 00:06:22,960
extensible markup language json

00:06:19,840 --> 00:06:26,560
javascript object notation

00:06:22,960 --> 00:06:29,840
so emil is a human readable

00:06:26,560 --> 00:06:33,199
syntax where we can view the

00:06:29,840 --> 00:06:35,759
code and we can read it

00:06:33,199 --> 00:06:37,680
helps to understand very easily and

00:06:35,759 --> 00:06:40,720
quickly

00:06:37,680 --> 00:06:43,759
the indentation here helps to know

00:06:40,720 --> 00:06:46,880
like whatever the changes are made

00:06:43,759 --> 00:06:47,680
and how each step is gonna work what are

00:06:46,880 --> 00:06:51,280
present in

00:06:47,680 --> 00:06:55,440
each step here uh xml

00:06:51,280 --> 00:06:58,720
uh as we know in a html here we use

00:06:55,440 --> 00:07:00,880
tags like you know micro services

00:06:58,720 --> 00:07:02,639
and we need to close the tag so that it

00:07:00,880 --> 00:07:06,240
can function very

00:07:02,639 --> 00:07:08,160
effectively and javascript object

00:07:06,240 --> 00:07:13,199
notation here is the syntax we

00:07:08,160 --> 00:07:15,280
use i go for the yaml because

00:07:13,199 --> 00:07:16,240
it is easy to understand and easy to

00:07:15,280 --> 00:07:19,280
read and

00:07:16,240 --> 00:07:21,440
every step is easily uh

00:07:19,280 --> 00:07:22,479
understood by the other users who want

00:07:21,440 --> 00:07:26,080
to

00:07:22,479 --> 00:07:27,360
use uh the pml file we have created or

00:07:26,080 --> 00:07:31,039
someone has created

00:07:27,360 --> 00:07:34,639
using the dot yaml extension

00:07:31,039 --> 00:07:35,039
so these three file formats can be saved

00:07:34,639 --> 00:07:36,960
as

00:07:35,039 --> 00:07:38,080
like gamma file thing we have the

00:07:36,960 --> 00:07:41,360
extension

00:07:38,080 --> 00:07:43,599
dot yaml or dot by ml

00:07:41,360 --> 00:07:44,479
ex extensible markup language have the

00:07:43,599 --> 00:07:47,680
extension of

00:07:44,479 --> 00:07:52,160
dot xml the javascript

00:07:47,680 --> 00:07:52,160
object notation has dot json

00:07:53,440 --> 00:08:00,639
so to use the cacd we need to enable it

00:07:57,599 --> 00:08:04,080
so when we use the get

00:08:00,639 --> 00:08:08,800
instance we need to create a repository

00:08:04,080 --> 00:08:11,759
in git then we need to add a dot gitlab

00:08:08,800 --> 00:08:12,080
say yaml file where we write the script

00:08:11,759 --> 00:08:15,199
to

00:08:12,080 --> 00:08:17,199
it and we need to set up a runner so

00:08:15,199 --> 00:08:19,759
that we can see what is going on how

00:08:17,199 --> 00:08:21,199
the pipeline is going to run and how the

00:08:19,759 --> 00:08:26,160
jobs gonna

00:08:21,199 --> 00:08:29,599
do their work and then

00:08:26,160 --> 00:08:29,599
cei pipeline is

00:08:35,760 --> 00:08:42,320
so here we have to know about the ci cd

00:08:39,839 --> 00:08:42,959
a pipeline is a runnable step-by-step

00:08:42,320 --> 00:08:44,800
path

00:08:42,959 --> 00:08:46,880
all software follows during its

00:08:44,800 --> 00:08:50,080
development life cycle

00:08:46,880 --> 00:08:53,120
so a ca3d pipeline shows

00:08:50,080 --> 00:08:55,680
what is going on a background

00:08:53,120 --> 00:08:57,680
so whenever we write a script mentioning

00:08:55,680 --> 00:09:00,800
the different stages

00:08:57,680 --> 00:09:04,000
it shows in a job wise

00:09:00,800 --> 00:09:05,760
so the pipeline are to be passed when

00:09:04,000 --> 00:09:09,200
the script is written

00:09:05,760 --> 00:09:11,360
in a good way when the

00:09:09,200 --> 00:09:13,920
pipeline is successful we can see a

00:09:11,360 --> 00:09:16,720
green tick mark

00:09:13,920 --> 00:09:17,440
and when the job fails we will get the

00:09:16,720 --> 00:09:20,560
red

00:09:17,440 --> 00:09:37,839
we can view in a red the blue color

00:09:20,560 --> 00:09:37,839
uh week

00:09:48,839 --> 00:09:51,839
so

00:10:04,640 --> 00:10:09,680
let's know about the cicd pipeline a csv

00:10:07,839 --> 00:10:12,000
pipeline is a runnable step-by-step

00:10:09,680 --> 00:10:13,680
path all software follows during its

00:10:12,000 --> 00:10:17,120
development life cycle

00:10:13,680 --> 00:10:20,240
a typical cicd pipeline bills code

00:10:17,120 --> 00:10:23,519
runs tests and safely deploys a

00:10:20,240 --> 00:10:26,160
new version of the applications we can

00:10:23,519 --> 00:10:28,079
see a step wise process what is going on

00:10:26,160 --> 00:10:29,600
and how the pipeline is going to be

00:10:28,079 --> 00:10:34,320
passed

00:10:29,600 --> 00:10:37,600
so the advantages of ci cd pipeline are

00:10:34,320 --> 00:10:40,640
we can deliver the prod

00:10:37,600 --> 00:10:40,640
software in a

00:10:41,440 --> 00:10:49,040
fast deployment of new software updates

00:10:45,760 --> 00:10:51,920
and transparent logs of all code build

00:10:49,040 --> 00:10:54,640
test and deployments are can be viewed

00:10:51,920 --> 00:10:59,040
like half the log gonna be passed

00:10:54,640 --> 00:11:03,279
and what are the code changes have done

00:10:59,040 --> 00:11:03,279
like half the tests are going to be

00:11:12,839 --> 00:11:17,040
passed

00:11:14,720 --> 00:11:19,279
let's know about the cicd pipeline a

00:11:17,040 --> 00:11:20,000
cacd pipeline is a runnable step-by-step

00:11:19,279 --> 00:11:21,839
path all

00:11:20,000 --> 00:11:23,440
software follows during its development

00:11:21,839 --> 00:11:27,600
life cycle

00:11:23,440 --> 00:11:30,800
a typical cacd pipeline builds code

00:11:27,600 --> 00:11:33,440
runs tests and safely deploy a new

00:11:30,800 --> 00:11:36,560
version of the application so the

00:11:33,440 --> 00:11:38,480
advantages of using cicd pipeline are

00:11:36,560 --> 00:11:40,240
fast deployment of a new software

00:11:38,480 --> 00:11:42,240
updates

00:11:40,240 --> 00:11:44,880
and the transparent locks of all code

00:11:42,240 --> 00:11:47,279
changes steps and deployments

00:11:44,880 --> 00:11:48,560
whatever the many changes we have made

00:11:47,279 --> 00:11:51,680
in the script

00:11:48,560 --> 00:11:52,560
we can view in the pipeline does the

00:11:51,680 --> 00:11:55,440
changes

00:11:52,560 --> 00:11:56,959
are helpful for the project does the

00:11:55,440 --> 00:11:59,760
pipeline got success

00:11:56,959 --> 00:12:00,639
or do any errors are occurred so that we

00:11:59,760 --> 00:12:03,360
can fix

00:12:00,639 --> 00:12:03,360
there itself

00:12:05,200 --> 00:12:12,000
so to know more about cicd pipeline

00:12:10,000 --> 00:12:13,360
let's create a repository in our git

00:12:12,000 --> 00:12:18,240
instance and check

00:12:13,360 --> 00:12:18,240
how the pipeline works so

00:12:22,320 --> 00:12:27,680
here i am creating a project a new

00:12:25,279 --> 00:12:27,680
project

00:12:30,240 --> 00:12:41,040
so let the project name be

00:12:38,160 --> 00:12:41,040
new ci

00:12:50,839 --> 00:12:55,920
cd

00:12:52,160 --> 00:12:59,360
so to run the ci cd

00:12:55,920 --> 00:13:00,399
in our repository uh there should be an

00:12:59,360 --> 00:13:03,519
existing file

00:13:00,399 --> 00:13:06,880
or it may be single commit let's create

00:13:03,519 --> 00:13:11,519
a new file

00:13:06,880 --> 00:13:11,519
call index.html let's write something in

00:13:18,839 --> 00:13:21,839
it

00:13:23,920 --> 00:13:28,160
so here i write like something welcome

00:13:29,680 --> 00:13:36,240
let's commit it comment from the

00:13:33,279 --> 00:13:36,240
matchster branch

00:13:37,360 --> 00:13:41,120
so go to the repository

00:13:47,279 --> 00:13:54,079
to create a ci cd file we

00:13:50,880 --> 00:13:56,079
need to create a new file with the

00:13:54,079 --> 00:13:59,360
extension dot gitlab

00:13:56,079 --> 00:13:59,360
ci dot yaml

00:14:00,560 --> 00:14:17,839
i create a new file here

00:14:36,639 --> 00:14:45,839
here i create a new file

00:14:51,279 --> 00:14:56,000
let's select this um template as dot

00:14:54,040 --> 00:14:59,440
gitlab.com

00:14:56,000 --> 00:15:02,560
so here i write a single script

00:14:59,440 --> 00:15:09,440
as see

00:15:02,560 --> 00:15:09,440
hello intention to be followed must

00:15:10,839 --> 00:15:17,920
script uh sorry

00:15:13,360 --> 00:15:17,920
uh the script has to be in

00:15:18,240 --> 00:15:20,959
small letters

00:15:22,720 --> 00:15:29,360
let's give an echo of

00:15:26,240 --> 00:15:29,360
high wall

00:15:31,120 --> 00:15:41,839
so let's run this pipeline

00:15:46,480 --> 00:15:55,839
so let's check the pipeline here we can

00:15:49,600 --> 00:15:55,839
see ci cd pipelines

00:16:06,839 --> 00:16:09,839
um

00:16:34,839 --> 00:16:37,839
so

00:17:32,960 --> 00:17:47,840
let's create a new file with the

00:17:35,360 --> 00:17:47,840
extension dot gitlab ci dot yami

00:17:49,120 --> 00:18:01,840
so we can write the yaml file as

00:18:20,880 --> 00:18:27,280
so the syntax has to be followed in yaml

00:18:24,080 --> 00:18:30,400
as we need to mention the job name

00:18:27,280 --> 00:18:32,960
and the script and the echo of like

00:18:30,400 --> 00:18:36,000
whatever the changes you have made like

00:18:32,960 --> 00:18:43,840
whatever the comments you want to do

00:18:36,000 --> 00:18:43,840
let's commit this and check the pipeline

00:18:45,360 --> 00:18:48,799
let's go to the pipeline

00:18:52,480 --> 00:19:00,480
so as i mentioned here we

00:18:56,000 --> 00:19:00,480
can view the blue which is a job running

00:19:01,600 --> 00:19:10,160
so here you can see the

00:19:06,240 --> 00:19:13,440
number which is a pipeline id

00:19:10,160 --> 00:19:16,400
so by clicking it we can view

00:19:13,440 --> 00:19:18,240
what is going on in the background here

00:19:16,400 --> 00:19:21,520
is the

00:19:18,240 --> 00:19:25,840
test is going on as i mentioned the job

00:19:21,520 --> 00:19:25,840
name i say hello

00:19:30,320 --> 00:19:36,720
the pipeline takes time to run

00:19:33,520 --> 00:19:41,600
and to give the status as a success

00:19:36,720 --> 00:19:41,600
let's wait for some time so

00:19:48,000 --> 00:19:55,200
you can see the python has passed

00:19:51,360 --> 00:19:58,400
which is say hello or we can see a

00:19:55,200 --> 00:20:01,200
tick mark in a green color passed

00:19:58,400 --> 00:20:01,919
the status is passed if we had any

00:20:01,200 --> 00:20:07,840
errors

00:20:01,919 --> 00:20:07,840
it gives us the pipeline has failed

00:20:22,799 --> 00:20:28,480
this is the single pipeline i have

00:20:26,159 --> 00:20:28,480
written

00:20:28,640 --> 00:20:35,840
we can mention many jobs

00:20:36,640 --> 00:20:39,679
this is the single job script i have

00:20:38,480 --> 00:20:42,880
written

00:20:39,679 --> 00:20:43,360
we can use multiple jobs uh it may be or

00:20:42,880 --> 00:20:47,440
two

00:20:43,360 --> 00:20:50,880
or more than two let's get into the four

00:20:47,440 --> 00:20:54,080
stages ci yaml file

00:20:50,880 --> 00:20:55,840
so as it takes time i have written

00:20:54,080 --> 00:21:00,799
somewhere

00:20:55,840 --> 00:21:00,799
in my pc and now i'm gonna do

00:21:01,440 --> 00:21:07,039
i'm going to copy this script and paste

00:21:04,640 --> 00:21:07,039
it here

00:21:11,280 --> 00:21:15,120
so here are the different stages

00:21:15,840 --> 00:21:31,840
the indentation is must in the ml file

00:21:19,679 --> 00:21:31,840
otherwise it gives the syntax error

00:21:43,440 --> 00:21:46,320
let's commit this

00:21:51,120 --> 00:22:02,640
so here we can view the pipelines

00:21:58,720 --> 00:22:06,400
so it's gonna run from the initial stage

00:22:02,640 --> 00:22:06,400
one two three four stages

00:22:07,360 --> 00:22:13,840
in mean time let me discuss about the

00:22:10,840 --> 00:22:13,840
script

00:22:24,240 --> 00:22:27,679
here i have mentioned four stages as

00:22:26,799 --> 00:22:30,720
clean

00:22:27,679 --> 00:22:32,640
build test and deploy

00:22:30,720 --> 00:22:34,720
let's get into the first job as job

00:22:32,640 --> 00:22:38,320
cleaning the stage is clean

00:22:34,720 --> 00:22:40,880
and the script is echo cleaning the code

00:22:38,320 --> 00:22:42,320
similarly uh we mentioned to the other

00:22:40,880 --> 00:22:45,600
jobs also as

00:22:42,320 --> 00:22:48,159
job building the stage is built and

00:22:45,600 --> 00:22:50,400
a script for job testing and job

00:22:48,159 --> 00:22:54,000
deploying

00:22:50,400 --> 00:22:57,520
for the yammer script is to be

00:22:54,000 --> 00:23:00,000
in this way has a job name the stage

00:22:57,520 --> 00:23:01,600
and the script and we mentioned the

00:23:00,000 --> 00:23:04,880
comic changes or the

00:23:01,600 --> 00:23:06,159
whatever it may be in echo form here i

00:23:04,880 --> 00:23:09,440
mentioned the

00:23:06,159 --> 00:23:12,960
comments to know what is going on

00:23:09,440 --> 00:23:12,960
and have it gonna work

00:23:14,320 --> 00:23:19,360
so here it says let's define a job with

00:23:17,840 --> 00:23:22,480
every stage

00:23:19,360 --> 00:23:26,080
as i mentioned the four stages

00:23:22,480 --> 00:23:28,559
so in when we write the stage clean and

00:23:26,080 --> 00:23:30,000
next we write the script this stack

00:23:28,559 --> 00:23:33,600
tells gitlab to run

00:23:30,000 --> 00:23:36,320
the job for clean stage so

00:23:33,600 --> 00:23:37,520
as well as for the job bill in a job

00:23:36,320 --> 00:23:41,120
building

00:23:37,520 --> 00:23:44,480
also it says the gitlab to run

00:23:41,120 --> 00:23:48,240
build stage for the in testing

00:23:44,480 --> 00:23:50,799
it runs it says to run the test stage

00:23:48,240 --> 00:23:52,480
it tells the gitlab to run the deploy

00:23:50,799 --> 00:23:53,919
stage

00:23:52,480 --> 00:23:56,880
so we can check the status of the

00:23:53,919 --> 00:23:59,360
pipeline as it takes more time

00:23:56,880 --> 00:24:00,320
let's see here we can mute the two jobs

00:23:59,360 --> 00:24:02,840
have

00:24:00,320 --> 00:24:04,240
passed and the third one is going to

00:24:02,840 --> 00:24:07,039
pass

00:24:04,240 --> 00:24:08,880
so as i said you can get into the

00:24:07,039 --> 00:24:12,159
pipeline id

00:24:08,880 --> 00:24:13,360
and check what's going on so these two

00:24:12,159 --> 00:24:16,840
have passed and

00:24:13,360 --> 00:24:18,000
it says the job is running for the

00:24:16,840 --> 00:24:21,360
testing

00:24:18,000 --> 00:24:23,279
cacd we can get into the jobs uh so the

00:24:21,360 --> 00:24:25,840
third one also passed and fourth one is

00:24:23,279 --> 00:24:28,240
still have to pass

00:24:25,840 --> 00:24:30,240
here we can view the ci link whatever

00:24:28,240 --> 00:24:31,039
the script i have written in a gitlab ci

00:24:30,240 --> 00:24:35,200
dot yaml

00:24:31,039 --> 00:24:39,200
file you can check the code

00:24:35,200 --> 00:24:42,640
linking here so

00:24:39,200 --> 00:24:42,640
here we have to give the code

00:24:43,840 --> 00:24:52,240
and let's validate it uh it sees the

00:24:48,880 --> 00:24:54,640
does the syntax is right or a wrong one

00:24:52,240 --> 00:24:56,480
so that uh we can paste it in our ciamel

00:24:54,640 --> 00:25:00,400
file if we have any dots

00:24:56,480 --> 00:25:03,600
so as i worked on it i directly

00:25:00,400 --> 00:25:03,600
return the yaml file

00:25:03,919 --> 00:25:07,840
so it's time to check the pipelines

00:25:13,440 --> 00:25:29,840
the last stage has to be passed

00:25:34,799 --> 00:25:43,279
so there are different scripts are

00:25:37,120 --> 00:25:47,679
present with different languages

00:25:43,279 --> 00:25:47,679
i can see my files as

00:25:50,400 --> 00:25:54,799
so the four jobs have run every stage

00:25:53,520 --> 00:25:57,840
has passed

00:25:54,799 --> 00:26:01,039
so we can see the four stages here

00:25:57,840 --> 00:26:04,559
and here we can know the timing

00:26:01,039 --> 00:26:04,559
how much time it took to pass

00:26:06,880 --> 00:26:13,679
so this is about the ci ci pipelines and

00:26:10,880 --> 00:26:16,960
the multiple jobs we have run

00:26:13,679 --> 00:26:18,159
this is the picture i have me i have

00:26:16,960 --> 00:26:21,200
kept

00:26:18,159 --> 00:26:21,200
i worked earlier

00:26:21,360 --> 00:26:26,480
so now my co-speaker gonna introduce you

00:26:24,799 --> 00:26:29,600
about the salsa ca

00:26:26,480 --> 00:26:33,120
and have the scripts gonna work

00:26:29,600 --> 00:26:37,120
further thank you

00:26:33,120 --> 00:26:40,159
hi thanks rolly uh it's a very nice uh

00:26:37,120 --> 00:26:42,159
broad outlook on how ci and cd

00:26:40,159 --> 00:26:44,080
really work and the pipelines and the

00:26:42,159 --> 00:26:50,000
jobs and and the project

00:26:44,080 --> 00:26:53,919
outflow on salsa or any gitlab instance

00:26:50,000 --> 00:26:56,960
so gitlab is a very uh

00:26:53,919 --> 00:27:00,000
uh a very powerful platform uh

00:26:56,960 --> 00:27:03,200
uh uh utilizing this

00:27:00,000 --> 00:27:06,400
devops life cycle in the production in

00:27:03,200 --> 00:27:09,919
very convenient way likewise uh

00:27:06,400 --> 00:27:13,600
in debian what we usually do is we

00:27:09,919 --> 00:27:17,440
make things uh available to loan

00:27:13,600 --> 00:27:20,960
uh like uh contributors like

00:27:17,440 --> 00:27:25,039
me or like contributors like you um

00:27:20,960 --> 00:27:27,120
we all together work on bringing

00:27:25,039 --> 00:27:28,799
up several kind of applications into the

00:27:27,120 --> 00:27:33,039
debian

00:27:28,799 --> 00:27:37,760
so that is called what is packaging

00:27:33,039 --> 00:27:40,880
so um in debian

00:27:37,760 --> 00:27:42,159
uh there is a larger group of social

00:27:40,880 --> 00:27:44,640
construct

00:27:42,159 --> 00:27:45,200
you know uh people from all around the

00:27:44,640 --> 00:27:48,480
world

00:27:45,200 --> 00:27:50,240
uh always do package on

00:27:48,480 --> 00:27:52,480
javascript libraries and python

00:27:50,240 --> 00:27:55,039
libraries php libraries

00:27:52,480 --> 00:27:56,559
and and all the programming language

00:27:55,039 --> 00:28:00,080
libraries which is

00:27:56,559 --> 00:28:02,880
need of the hour for example

00:28:00,080 --> 00:28:04,000
if you work on uh if you you find

00:28:02,880 --> 00:28:06,559
something

00:28:04,000 --> 00:28:07,679
uh that needed should be in the debian

00:28:06,559 --> 00:28:11,600
uh

00:28:07,679 --> 00:28:13,120
i think you want to do the package so

00:28:11,600 --> 00:28:15,279
you can do it there's no problem it's

00:28:13,120 --> 00:28:18,320
just a amount of time

00:28:15,279 --> 00:28:20,399
maybe in an hour in half an hour uh you

00:28:18,320 --> 00:28:23,840
can do that

00:28:20,399 --> 00:28:25,279
so there are different um processes

00:28:23,840 --> 00:28:29,279
involved here

00:28:25,279 --> 00:28:31,760
uh i'm not going to every detail of

00:28:29,279 --> 00:28:33,120
the process uh that involved in the

00:28:31,760 --> 00:28:36,559
packages i am

00:28:33,120 --> 00:28:37,840
covering the uh salsa ci especially

00:28:36,559 --> 00:28:41,600
these pipelines

00:28:37,840 --> 00:28:45,760
um in the talk

00:28:41,600 --> 00:28:49,520
um so

00:28:45,760 --> 00:28:52,640
while before going to that uh

00:28:49,520 --> 00:28:56,240
um let's see uh

00:28:52,640 --> 00:29:00,960
how a package uh looked like you know

00:28:56,240 --> 00:29:00,960
our package look like in debian so uh

00:29:01,360 --> 00:29:04,399
for example uh

00:29:04,720 --> 00:29:08,640
this is the salsa group this is this is

00:29:07,760 --> 00:29:12,399
what the

00:29:08,640 --> 00:29:16,880
debian gitlab instance called salsa

00:29:12,399 --> 00:29:19,360
don't ask me why it is named salsa

00:29:16,880 --> 00:29:20,480
you can you can ask you can you can

00:29:19,360 --> 00:29:23,840
maybe

00:29:20,480 --> 00:29:27,039
you can ask people and irc

00:29:23,840 --> 00:29:28,980
or matrix if you are around

00:29:27,039 --> 00:29:30,480
maybe you can type

00:29:28,980 --> 00:29:34,480
[Music]

00:29:30,480 --> 00:29:41,600
a fun question on q and a as well

00:29:34,480 --> 00:29:43,840
so okay let me see this for example

00:29:41,600 --> 00:29:45,010
so for example take a look at this

00:29:43,840 --> 00:29:48,200
package

00:29:45,010 --> 00:29:48,200
[Music]

00:29:50,399 --> 00:29:57,840
take a look at this package

00:29:54,000 --> 00:30:02,240
so uh there is something called upstream

00:29:57,840 --> 00:30:04,720
uh which is uh not which is a package

00:30:02,240 --> 00:30:06,840
uh not in the debian we called as

00:30:04,720 --> 00:30:08,880
upstream

00:30:06,840 --> 00:30:11,279
and

00:30:08,880 --> 00:30:12,720
so what we usually do is we get the

00:30:11,279 --> 00:30:16,640
upstream package

00:30:12,720 --> 00:30:19,919
and uh we use tools to demonize the

00:30:16,640 --> 00:30:23,039
project uh meaning adding the debian

00:30:19,919 --> 00:30:24,799
uh related stuff to that so in

00:30:23,039 --> 00:30:26,080
for debian related stuff we actually

00:30:24,799 --> 00:30:30,240
have all these things

00:30:26,080 --> 00:30:33,760
upstream uh copyright control compact

00:30:30,240 --> 00:30:34,559
rules watch file uh link if there are

00:30:33,760 --> 00:30:37,760
any linkedin

00:30:34,559 --> 00:30:39,679
errors you want to override it say that

00:30:37,760 --> 00:30:41,679
to the dating people yes this needs to

00:30:39,679 --> 00:30:45,120
be done you can do that

00:30:41,679 --> 00:30:46,640
and we'll go for a meanwhile we'll go

00:30:45,120 --> 00:30:48,640
with phenomenal why is this

00:30:46,640 --> 00:30:50,399
amalfi this here we're going we'll go in

00:30:48,640 --> 00:30:53,520
a bit there's no problem

00:30:50,399 --> 00:30:55,679
um so yeah

00:30:53,520 --> 00:30:57,840
this is how a package looks like so this

00:30:55,679 --> 00:31:00,000
is some dependency to some other

00:30:57,840 --> 00:31:01,440
uh project i think there's no blue

00:31:00,000 --> 00:31:05,039
social i guess okay

00:31:01,440 --> 00:31:08,559
so yeah

00:31:05,039 --> 00:31:12,720
um so what's next

00:31:08,559 --> 00:31:17,360
now now

00:31:12,720 --> 00:31:17,360
what if i want to package

00:31:17,679 --> 00:31:22,159
something that is outside the tv

00:31:22,320 --> 00:31:26,000
let's say i found no uh javascript

00:31:24,559 --> 00:31:29,039
module uh

00:31:26,000 --> 00:31:30,320
which is note framework uh i want to

00:31:29,039 --> 00:31:33,600
bring it to debian so

00:31:30,320 --> 00:31:37,679
what i have to do uh

00:31:33,600 --> 00:31:41,200
you you can i think you can see my uh

00:31:37,679 --> 00:31:41,200
console or terminal

00:31:42,960 --> 00:31:46,960
so there is a tool for

00:31:47,600 --> 00:31:52,559
searching there's a tool for searching

00:31:49,440 --> 00:31:55,039
independence you're making projects uh

00:31:52,559 --> 00:31:56,880
to devianize the project call this as

00:31:55,039 --> 00:32:01,120
npm

00:31:56,880 --> 00:32:02,799
to tab so you have to install this uh

00:32:01,120 --> 00:32:06,080
npm to tab

00:32:02,799 --> 00:32:06,080
it's like sudo

00:32:08,080 --> 00:32:11,120
apt install

00:32:11,360 --> 00:32:18,000
encrypted app

00:32:15,679 --> 00:32:21,039
so i already have it i already installed

00:32:18,000 --> 00:32:25,919
it so it's the latest version i have

00:32:21,039 --> 00:32:25,919
so now let me guess my

00:32:26,840 --> 00:32:29,840
commands

00:32:37,279 --> 00:32:43,840
huh so i

00:32:44,720 --> 00:32:51,440
i did uh did something around some

00:32:48,000 --> 00:32:52,240
projects so for example if i take this

00:32:51,440 --> 00:32:56,640
one

00:32:52,240 --> 00:32:59,919
uh npm do that

00:32:56,640 --> 00:32:59,919
i want to search for

00:33:00,080 --> 00:33:03,519
node six

00:33:04,000 --> 00:33:10,000
node six so let's see

00:33:07,279 --> 00:33:10,720
uh are there any packages or depends on

00:33:10,000 --> 00:33:13,120
it so

00:33:10,720 --> 00:33:14,880
awesome there are no module note 6 has

00:33:13,120 --> 00:33:18,159
no dependencies that is good right

00:33:14,880 --> 00:33:22,480
that is awesome so now

00:33:18,159 --> 00:33:26,320
uh let's see if it's already available

00:33:22,480 --> 00:33:26,320
in somewhere else or maybe deviant

00:33:26,480 --> 00:33:29,120
excuse me

00:33:33,200 --> 00:33:39,840
search lipsticks

00:33:40,159 --> 00:33:45,840
huh found http but that's okay

00:33:43,919 --> 00:33:47,039
it doesn't matter at this point of time

00:33:45,840 --> 00:33:49,360
so here

00:33:47,039 --> 00:33:51,279
uh there are no similar packages left so

00:33:49,360 --> 00:33:54,080
next is to

00:33:51,279 --> 00:33:55,200
let's uh let's see what is new six i

00:33:54,080 --> 00:33:57,120
mean where it is

00:33:55,200 --> 00:33:59,279
who is the uh maintaining it who is the

00:33:57,120 --> 00:34:02,000
author of the note 6 project

00:33:59,279 --> 00:34:02,000
so let's see that

00:34:03,200 --> 00:34:06,480
that's a simple http error there is some

00:34:05,600 --> 00:34:10,320
problem with my

00:34:06,480 --> 00:34:12,480
uh internet connection i could guess

00:34:10,320 --> 00:34:13,440
maybe we'll look at it no problem

00:34:12,480 --> 00:34:17,599
meanwhile we'll

00:34:13,440 --> 00:34:20,720
see this ha

00:34:17,599 --> 00:34:21,599
so there's a version 1.0.9 here's the

00:34:20,720 --> 00:34:25,599
home page

00:34:21,599 --> 00:34:28,480
license is expat and there is no

00:34:25,599 --> 00:34:29,119
this package in debian so now what we

00:34:28,480 --> 00:34:33,040
can do

00:34:29,119 --> 00:34:37,599
is npm to debian

00:34:33,040 --> 00:34:37,599
create loop 6

00:34:39,239 --> 00:34:48,320
[Music]

00:34:42,879 --> 00:34:50,560
that's it

00:34:48,320 --> 00:34:50,560
wow

00:34:52,560 --> 00:34:58,320
nice so

00:34:56,000 --> 00:35:01,599
there are some things that i have to fix

00:34:58,320 --> 00:35:04,480
asking it asking me to fix me okay

00:35:01,599 --> 00:35:06,880
so what it will do is i'll go to this

00:35:04,480 --> 00:35:06,880
folder

00:35:12,720 --> 00:35:20,640
then it gave me a debian nice

00:35:17,440 --> 00:35:21,760
version of the package which is debian

00:35:20,640 --> 00:35:26,160
folder

00:35:21,760 --> 00:35:26,160
and this now i have to change

00:35:27,680 --> 00:35:35,440
change log so i'll tell you

00:35:31,680 --> 00:35:38,960
what is that so usually if you set

00:35:35,440 --> 00:35:42,640
your global username uh

00:35:38,960 --> 00:35:44,320
with the with your with your preferred

00:35:42,640 --> 00:35:46,320
email you should get this

00:35:44,320 --> 00:35:47,440
as i didn't do it so i have to do it

00:35:46,320 --> 00:35:51,680
manually

00:35:47,440 --> 00:35:54,240
so here it is an initial release um

00:35:51,680 --> 00:35:54,240
so i'm

00:35:56,960 --> 00:36:02,010
so i'm using a kde enron

00:35:58,950 --> 00:36:02,010
[Music]

00:36:02,720 --> 00:36:13,839
so that's why uh

00:36:05,839 --> 00:36:13,839
okay i know why

00:36:14,000 --> 00:36:19,920
so here um

00:36:17,280 --> 00:36:20,320
first of all uh we have to tell debian

00:36:19,920 --> 00:36:23,520
that

00:36:20,320 --> 00:36:27,839
i'm going to uh i intend

00:36:23,520 --> 00:36:30,640
uh do this package so that you know uh

00:36:27,839 --> 00:36:32,320
you can start working on it um no one

00:36:30,640 --> 00:36:33,119
else in the class with it maybe someone

00:36:32,320 --> 00:36:34,560
wants to do it

00:36:33,119 --> 00:36:36,320
you can collaborate with them they are

00:36:34,560 --> 00:36:36,720
they can collaborate with you so that's

00:36:36,320 --> 00:36:40,000
why

00:36:36,720 --> 00:36:44,160
uh you need to raise an itp

00:36:40,000 --> 00:36:47,520
issue uh we'll talk on it here

00:36:44,160 --> 00:36:50,240
um uh we'll just uh

00:36:47,520 --> 00:36:50,720
just focus on the ci but i really want

00:36:50,240 --> 00:36:54,640
you to

00:36:50,720 --> 00:36:58,720
uh go through the work in me needed and

00:36:54,640 --> 00:36:59,760
uh working in perspective packages page

00:36:58,720 --> 00:37:02,960
i'll i'll

00:36:59,760 --> 00:37:04,000
share the link uh with all of you with

00:37:02,960 --> 00:37:07,119
the

00:37:04,000 --> 00:37:07,599
the dipcon you can search online on the

00:37:07,119 --> 00:37:10,079
web

00:37:07,599 --> 00:37:12,400
there's no problem so for the main

00:37:10,079 --> 00:37:16,079
reason uh

00:37:12,400 --> 00:37:18,640
regarding this is just a minute this is

00:37:16,079 --> 00:37:22,240
how the version should be

00:37:18,640 --> 00:37:23,359
um as i'm using a kde version that's why

00:37:22,240 --> 00:37:25,680
it gave me

00:37:23,359 --> 00:37:26,480
one zero over to one so it doesn't

00:37:25,680 --> 00:37:28,960
matter

00:37:26,480 --> 00:37:30,160
uh that for debian releases we have to

00:37:28,960 --> 00:37:34,240
do this

00:37:30,160 --> 00:37:35,920
one and so if if you raise an itp it

00:37:34,240 --> 00:37:38,240
will give you a bug number you have to

00:37:35,920 --> 00:37:41,119
put here and you have to close it here

00:37:38,240 --> 00:37:42,640
or if this package uh is closing some

00:37:41,119 --> 00:37:45,760
issue for example there's some

00:37:42,640 --> 00:37:48,880
there's a bug with saying that uh no

00:37:45,760 --> 00:37:50,800
no six package is this is isn't its

00:37:48,880 --> 00:37:53,599
dependency someone should fix it so

00:37:50,800 --> 00:37:54,800
you can mention that bug number here it

00:37:53,599 --> 00:37:58,240
will close this

00:37:54,800 --> 00:37:58,240
so that's the process

00:37:58,880 --> 00:38:05,280
so i didn't raise an itp

00:38:02,320 --> 00:38:07,440
and just joins how to do these things

00:38:05,280 --> 00:38:10,720
and

00:38:07,440 --> 00:38:14,000
so yeah change logistics

00:38:10,720 --> 00:38:15,200
and next is there is a control saying

00:38:14,000 --> 00:38:19,040
that fixed book so

00:38:15,200 --> 00:38:22,160
let me go to the fix me

00:38:19,040 --> 00:38:23,119
um see this is all game by the given by

00:38:22,160 --> 00:38:27,280
the new

00:38:23,119 --> 00:38:33,839
npm to dab tool and

00:38:27,280 --> 00:38:33,839
so let's say put your name here

00:38:35,839 --> 00:38:49,419
i'll put your main id in the aux

00:38:46,340 --> 00:38:49,419
[Music]

00:38:49,440 --> 00:38:56,880
so standard version is 1.5

00:38:52,800 --> 00:38:59,920
i'll tell you why and this is deprecated

00:38:56,880 --> 00:39:02,000
so we're not using this anyway we are

00:38:59,920 --> 00:39:03,359
using salsa this is older version of the

00:39:02,000 --> 00:39:15,839
date that

00:39:03,359 --> 00:39:15,839
all all of debian folks use that

00:39:24,800 --> 00:39:32,560
oh let me check it just give me a moment

00:39:28,240 --> 00:39:32,560
let me check the jst in there

00:39:40,880 --> 00:39:43,920
yeah javascript

00:39:46,320 --> 00:39:49,040
maintainers

00:39:51,440 --> 00:39:57,839
you know like don't search again

00:39:58,800 --> 00:40:11,839
um yes

00:40:02,079 --> 00:40:11,839
js hyphen team it's correct

00:40:17,010 --> 00:40:22,839
[Music]

00:40:19,680 --> 00:40:25,440
so here so it should build for all the

00:40:22,839 --> 00:40:28,720
architectures

00:40:25,440 --> 00:40:28,720
so here

00:40:28,800 --> 00:40:36,400
we have to change

00:40:32,240 --> 00:40:37,200
old description so for that let me get

00:40:36,400 --> 00:40:42,800
back here

00:40:37,200 --> 00:40:42,800
again some description here

00:40:42,880 --> 00:40:45,520
where is it

00:40:49,680 --> 00:40:56,560
okay maybe i'll go to the source

00:40:54,000 --> 00:40:56,560
url

00:41:05,359 --> 00:41:11,839
um so i you all are seeing my

00:41:08,800 --> 00:41:14,640
console uh i'm just searching on

00:41:11,839 --> 00:41:14,640
my browser

00:41:15,119 --> 00:41:19,040
the link that i found

00:41:19,119 --> 00:41:24,000
so i'll just show you in a while till i

00:41:21,920 --> 00:41:27,200
complete here

00:41:24,000 --> 00:41:31,200
now in control file what we do is

00:41:27,200 --> 00:41:31,200
we will add a description here

00:41:33,520 --> 00:41:41,040
so this is what i found for uh

00:41:37,440 --> 00:41:42,079
and and there is for home page in that

00:41:41,040 --> 00:41:45,839
github

00:41:42,079 --> 00:41:50,000
and write something

00:41:45,839 --> 00:41:50,000
like it is a

00:41:52,319 --> 00:41:58,960
knowledge module

00:41:55,599 --> 00:41:58,960
dependency module

00:42:01,280 --> 00:42:03,839
because

00:42:06,800 --> 00:42:09,839
the first line in the description should

00:42:08,480 --> 00:42:12,960
be empty

00:42:09,839 --> 00:42:15,599
so that's the key and yes

00:42:12,960 --> 00:42:17,440
we learn the control and what else have

00:42:15,599 --> 00:42:20,480
to fix

00:42:17,440 --> 00:42:24,560
copyright nice

00:42:20,480 --> 00:42:24,560
copy right

00:42:28,839 --> 00:42:33,680
here

00:42:30,160 --> 00:42:37,200
else yes uh here we have to give our

00:42:33,680 --> 00:42:41,359
name on melanie so i'm writing that

00:42:37,200 --> 00:42:41,359
my name arx

00:42:42,839 --> 00:42:48,560
and

00:42:45,680 --> 00:42:48,560
that that's it

00:42:53,200 --> 00:42:59,440
so nothing left

00:42:56,240 --> 00:43:03,119
so this is how we do things

00:42:59,440 --> 00:43:06,400
now i did this before and

00:43:03,119 --> 00:43:07,440
uh to instruct any connections while i'm

00:43:06,400 --> 00:43:12,960
doing this

00:43:07,440 --> 00:43:16,160
so let's go to that

00:43:12,960 --> 00:43:18,960
and you can see

00:43:16,160 --> 00:43:20,240
all the things here but one thing i

00:43:18,960 --> 00:43:21,450
added is

00:43:20,240 --> 00:43:24,400
this one

00:43:21,450 --> 00:43:28,400
[Music]

00:43:24,400 --> 00:43:33,359
salsa hyphen ci so i'll open that

00:43:28,400 --> 00:43:33,359
you can sorry

00:43:33,440 --> 00:43:37,680
that's it so you have to tell your

00:43:36,319 --> 00:43:41,040
pipeline now you have to

00:43:37,680 --> 00:43:44,720
write your your ci job

00:43:41,040 --> 00:43:48,079
to use this pipelines one is this also

00:43:44,720 --> 00:43:50,960
ci and uh pipeline jobs yeah

00:43:48,079 --> 00:43:51,520
we'll go we'll go uh through these files

00:43:50,960 --> 00:43:54,640
in a while

00:43:51,520 --> 00:43:56,960
let's see uh no

00:43:54,640 --> 00:43:57,839
what can we do with this files now i'll

00:43:56,960 --> 00:44:09,839
change to

00:43:57,839 --> 00:44:09,839
my browser

00:44:11,359 --> 00:44:18,319
yeah i came here before searched for

00:44:14,880 --> 00:44:20,160
javascript team and then i look at

00:44:18,319 --> 00:44:21,520
the description of this package that's

00:44:20,160 --> 00:44:24,560
it

00:44:21,520 --> 00:44:29,040
and so i did

00:44:24,560 --> 00:44:29,040
push this to my profile

00:44:34,839 --> 00:44:37,839
um

00:44:39,119 --> 00:44:47,200
so the rule is you have to add sa file

00:44:43,599 --> 00:44:51,839
here whatever uh the

00:44:47,200 --> 00:44:51,839
changes you say

00:44:53,359 --> 00:45:00,000
whatever the information or the jobs

00:44:56,880 --> 00:45:01,280
for what what jobs are to have to run

00:45:00,000 --> 00:45:02,400
what are the stages that you have to

00:45:01,280 --> 00:45:05,760
define here

00:45:02,400 --> 00:45:06,960
and you have to tell here so i included

00:45:05,760 --> 00:45:10,160
these two

00:45:06,960 --> 00:45:11,280
um pythons here so let's see uh so they

00:45:10,160 --> 00:45:12,960
already ran around

00:45:11,280 --> 00:45:16,640
and just go through there i'll just go

00:45:12,960 --> 00:45:16,640
through the pipelines head jobs

00:45:17,599 --> 00:45:21,200
i hope you're following me

00:45:22,720 --> 00:45:24,960
so

00:45:25,920 --> 00:45:33,839
i'll go here i'll just uh see this one

00:45:35,839 --> 00:45:41,200
so this is how uh the pipelines work

00:45:38,960 --> 00:45:42,480
it will extract the source uh which is a

00:45:41,200 --> 00:45:45,119
provisioning state

00:45:42,480 --> 00:45:46,079
and it will build the uh for different

00:45:45,119 --> 00:45:48,079
architectures

00:45:46,079 --> 00:45:49,839
and to build the source packages as well

00:45:48,079 --> 00:45:50,960
now these are different tests this david

00:45:49,839 --> 00:45:52,640
intends to test

00:45:50,960 --> 00:45:54,480
on your on your package and our

00:45:52,640 --> 00:45:55,359
practices that we do or before coming

00:45:54,480 --> 00:45:59,040
into the debian

00:45:55,359 --> 00:46:01,599
project so each of this test

00:45:59,040 --> 00:46:02,480
defines various levels uh auto package

00:46:01,599 --> 00:46:04,800
test

00:46:02,480 --> 00:46:05,680
uh we'll run it right on an entire

00:46:04,800 --> 00:46:09,040
package

00:46:05,680 --> 00:46:11,119
uh we shall see lint linton is like uh

00:46:09,040 --> 00:46:12,319
it will check entire code repository

00:46:11,119 --> 00:46:14,640
we'll say lint errors

00:46:12,319 --> 00:46:16,079
spacing white spacing filing or maybe a

00:46:14,640 --> 00:46:18,560
syntax

00:46:16,079 --> 00:46:19,760
syntax uh promising errors if there are

00:46:18,560 --> 00:46:23,599
any found in the

00:46:19,760 --> 00:46:25,839
debian folder uh or you are missing

00:46:23,599 --> 00:46:27,280
you will you are lagging behind a newer

00:46:25,839 --> 00:46:28,960
version of deviant things

00:46:27,280 --> 00:46:30,480
into them i'll show you i'll show you

00:46:28,960 --> 00:46:34,480
what are this pr

00:46:30,480 --> 00:46:38,800
pr parts popularity contexts uh

00:46:34,480 --> 00:46:40,800
um tests and uh uh referenceable tests

00:46:38,800 --> 00:46:42,160
build all tests building it as different

00:46:40,800 --> 00:46:43,119
types there's a lot of different type of

00:46:42,160 --> 00:46:45,839
tests

00:46:43,119 --> 00:46:46,480
that these pipelines will do are good

00:46:45,839 --> 00:46:50,640
for you

00:46:46,480 --> 00:46:52,560
so this is

00:46:50,640 --> 00:46:54,839
also the word is done so there are a

00:46:52,560 --> 00:46:57,680
couple of linten errors

00:46:54,839 --> 00:47:00,800
i there are confrontations on errors

00:46:57,680 --> 00:47:04,319
uh so these are the linkedin errors

00:47:00,800 --> 00:47:06,720
i know that i don't so these are little

00:47:04,319 --> 00:47:06,720
errors

00:47:08,079 --> 00:47:12,000
now so what do you how do you know what

00:47:11,680 --> 00:47:14,160
else

00:47:12,000 --> 00:47:15,200
are these in these uh birds in these

00:47:14,160 --> 00:47:18,480
jobs so

00:47:15,200 --> 00:47:21,520
there we are we have this artifacts and

00:47:18,480 --> 00:47:23,200
uh you can find for every fire for every

00:47:21,520 --> 00:47:26,240
job for example

00:47:23,200 --> 00:47:29,280
i go to the i'm in the linkedin now

00:47:26,240 --> 00:47:31,280
i'm in the linkedin now

00:47:29,280 --> 00:47:34,800
this is the job artifacts you can

00:47:31,280 --> 00:47:34,800
download it or you can browse it

00:47:37,359 --> 00:47:42,480
and go here and then output

00:47:42,640 --> 00:47:48,720
and you see this html

00:47:45,680 --> 00:47:52,000
so this is what the system is

00:47:48,720 --> 00:47:54,160
so it's saying couple of warnings uh

00:47:52,000 --> 00:47:55,920
intense pedantic so these are different

00:47:54,160 --> 00:47:58,240
type of different types of

00:47:55,920 --> 00:48:00,480
uh limited linkedin tags that i have to

00:47:58,240 --> 00:48:01,920
fix before going to debian or before any

00:48:00,480 --> 00:48:04,160
and every node will have to

00:48:01,920 --> 00:48:06,079
see these things so there are white

00:48:04,160 --> 00:48:09,040
spaces are there there's something

00:48:06,079 --> 00:48:10,319
uh this is an error so i have to fix it

00:48:09,040 --> 00:48:13,359
uh

00:48:10,319 --> 00:48:13,680
extended description in which i took

00:48:13,359 --> 00:48:18,240
this

00:48:13,680 --> 00:48:21,680
just a while just a just a moment ago so

00:48:18,240 --> 00:48:24,800
um yeah this is

00:48:21,680 --> 00:48:25,839
so fine uh yeah we have to build these

00:48:24,800 --> 00:48:28,000
things uh

00:48:25,839 --> 00:48:29,359
uh manually and go back to that and we

00:48:28,000 --> 00:48:32,160
have to come back here

00:48:29,359 --> 00:48:33,520
and we have to give the same pipeline

00:48:32,160 --> 00:48:36,720
again

00:48:33,520 --> 00:48:37,440
so this is how uh uh ci works so let's

00:48:36,720 --> 00:48:39,359
see

00:48:37,440 --> 00:48:41,920
what exactly are there in the pipelines

00:48:39,359 --> 00:48:44,240
there are very large pipelines

00:48:41,920 --> 00:48:45,119
because uh there's a very a very high

00:48:44,240 --> 00:48:48,559
tech job

00:48:45,119 --> 00:48:51,599
that all those things that are automated

00:48:48,559 --> 00:48:55,680
in the in the debian uh icos

00:48:51,599 --> 00:48:55,680
ecosystem packaging ecosystem

00:48:57,119 --> 00:49:06,559
and see a long stay built stages

00:49:00,480 --> 00:49:06,559
no worries we're gonna come by one more

00:49:08,319 --> 00:49:14,079
so here it is

00:49:11,520 --> 00:49:15,520
there are a couple of uh variables so

00:49:14,079 --> 00:49:16,240
don't have we don't have to worry about

00:49:15,520 --> 00:49:18,400
it so

00:49:16,240 --> 00:49:20,880
github usually have this run of shared

00:49:18,400 --> 00:49:23,040
ramx which is a container registries

00:49:20,880 --> 00:49:24,079
uh where you all share these darker

00:49:23,040 --> 00:49:26,800
images there

00:49:24,079 --> 00:49:27,920
so it will do the job for you so that's

00:49:26,800 --> 00:49:30,160
what the

00:49:27,920 --> 00:49:31,599
strategy behind this so here the rules

00:49:30,160 --> 00:49:34,559
that we have to define here

00:49:31,599 --> 00:49:34,559
so these are owner

00:49:34,640 --> 00:49:38,880
you know variables that there is entire

00:49:37,040 --> 00:49:41,520
uses this entire ammo

00:49:38,880 --> 00:49:43,119
uses uh the different stages that we

00:49:41,520 --> 00:49:45,200
have just

00:49:43,119 --> 00:49:47,200
we have just seen this provisioning

00:49:45,200 --> 00:49:50,240
build publish and test

00:49:47,200 --> 00:49:54,240
so uh but i haven't go to the

00:49:50,240 --> 00:49:54,240
public stages tell me right let's see

00:49:56,079 --> 00:50:00,720
i'm just uh neglecting

00:50:03,680 --> 00:50:13,839
hmm i'll do the public publish right

00:50:14,079 --> 00:50:20,559
so way too the artifacts have to say

00:50:18,160 --> 00:50:24,960
here you have to go define here

00:50:20,559 --> 00:50:28,079
and this is the provisioning steps um

00:50:24,960 --> 00:50:30,240
so this is how uh i can just

00:50:28,079 --> 00:50:31,920
so this is how the scripts will build

00:50:30,240 --> 00:50:34,400
the package

00:50:31,920 --> 00:50:36,480
uh you don't have to usually we have to

00:50:34,400 --> 00:50:39,040
worry about our source systems if

00:50:36,480 --> 00:50:40,559
if we don't use the ch root see it's

00:50:39,040 --> 00:50:44,319
just a way back uh

00:50:40,559 --> 00:50:44,319
many long days ago

00:50:45,920 --> 00:50:51,920
we used this uh seashores to have a

00:50:49,920 --> 00:50:53,680
environment telematics environment

00:50:51,920 --> 00:50:54,559
entire linux environment within the

00:50:53,680 --> 00:50:56,160
shell

00:50:54,559 --> 00:50:59,520
i like that maybe virtualization

00:50:56,160 --> 00:50:59,520
basically yeah

00:50:59,760 --> 00:51:04,400
so this is how we build the packages you

00:51:02,880 --> 00:51:08,960
know this will

00:51:04,400 --> 00:51:11,040
give you exactly what they want

00:51:08,960 --> 00:51:12,400
so go through it go through it you'll

00:51:11,040 --> 00:51:13,359
understand if you are familiar with the

00:51:12,400 --> 00:51:22,160
shell scripts

00:51:13,359 --> 00:51:23,920
uh if you understand

00:51:22,160 --> 00:51:25,680
what we call this bosch bart's rc

00:51:23,920 --> 00:51:27,200
profiles and scripting on that

00:51:25,680 --> 00:51:28,880
you'll be easy to understand that

00:51:27,200 --> 00:51:32,000
there's nothing in complex here

00:51:28,880 --> 00:51:34,720
uh this couple of rules to

00:51:32,000 --> 00:51:35,200
get to the system and everything will do

00:51:34,720 --> 00:51:40,720
so

00:51:35,200 --> 00:51:40,720
this is how this uh done let's go to the

00:51:48,839 --> 00:51:53,760
publish

00:51:51,520 --> 00:51:53,760
okay

00:51:56,640 --> 00:52:04,559
so this taste requires couple of uh

00:52:00,319 --> 00:52:07,839
key assignments so you do remember uh

00:52:04,559 --> 00:52:10,880
you you you should be having a gpg case

00:52:07,839 --> 00:52:11,520
where you sign the package and uh you

00:52:10,880 --> 00:52:14,640
send to

00:52:11,520 --> 00:52:16,800
uh mentors with the change store changes

00:52:14,640 --> 00:52:20,720
file so when you have a whole artic

00:52:16,800 --> 00:52:23,839
artifact for example let me show it

00:52:20,720 --> 00:52:23,839
so go to this build

00:52:26,319 --> 00:52:33,839
this browser

00:52:34,559 --> 00:52:39,520
so here you see this one which is

00:52:40,800 --> 00:52:47,839
this one you have to commit this to

00:52:44,839 --> 00:52:50,319
mentors you have to commit this file to

00:52:47,839 --> 00:52:50,319
mentors

00:52:50,800 --> 00:52:54,079
mentors will do the process to get into

00:52:53,119 --> 00:52:58,880
vb

00:52:54,079 --> 00:53:02,319
so the process is very simple

00:52:58,880 --> 00:53:04,640
you fetch for a project you

00:53:02,319 --> 00:53:06,319
do the you figure out which module it is

00:53:04,640 --> 00:53:07,040
whether it is a javascript or python or

00:53:06,319 --> 00:53:09,119
php

00:53:07,040 --> 00:53:10,960
use appropriate tool that appropriate

00:53:09,119 --> 00:53:13,680
tool for that for php

00:53:10,960 --> 00:53:14,480
there are peer prepared module is there

00:53:13,680 --> 00:53:16,480
we can

00:53:14,480 --> 00:53:17,920
use that python there are different type

00:53:16,480 --> 00:53:19,680
of packaging is there

00:53:17,920 --> 00:53:21,599
it will just create an even file for you

00:53:19,680 --> 00:53:23,359
you just have to or do the manual things

00:53:21,599 --> 00:53:26,000
that the things that i have just shown

00:53:23,359 --> 00:53:29,200
to you so

00:53:26,000 --> 00:53:32,640
uh um so this is how

00:53:29,200 --> 00:53:35,680
uh it can be done and other

00:53:32,640 --> 00:53:39,839
other there is one more pipeline

00:53:35,680 --> 00:53:39,839
that we have just saw i'm i'll just go

00:53:40,839 --> 00:53:43,839
there

00:53:45,280 --> 00:53:50,319
i'm sure you're following me

00:53:52,960 --> 00:53:57,280
there's a c q a you can ask there at the

00:53:55,680 --> 00:53:58,160
end of the session there's a 10 minutes

00:53:57,280 --> 00:54:02,079
q a

00:53:58,160 --> 00:54:02,079
are we gonna answer the questions there

00:54:05,920 --> 00:54:13,200
so this is another uh

00:54:10,240 --> 00:54:14,319
thing that uh a provisioning way to

00:54:13,200 --> 00:54:18,160
extract this uh

00:54:14,319 --> 00:54:21,280
protein shorts uh what to do is build

00:54:18,160 --> 00:54:24,400
where it will go i mean just extending

00:54:21,280 --> 00:54:27,680
this extending the

00:54:24,400 --> 00:54:28,640
pipelines so i'm not i'm not going

00:54:27,680 --> 00:54:32,880
through this rather

00:54:28,640 --> 00:54:36,400
though dragon's time so you will have to

00:54:32,880 --> 00:54:39,200
you have to just uh so the main focus

00:54:36,400 --> 00:54:39,760
on you is to get the demonized folder

00:54:39,200 --> 00:54:43,680
and

00:54:39,760 --> 00:54:45,680
just add this uh include these two

00:54:43,680 --> 00:54:47,920
arnold scripts that's it package the

00:54:45,680 --> 00:54:49,440
student for you

00:54:47,920 --> 00:54:51,520
and if there are any linkedin texts to

00:54:49,440 --> 00:54:54,720
dissolve them uh to resolve these

00:54:51,520 --> 00:54:57,359
linkedin tags uh uh

00:54:54,720 --> 00:54:58,000
you can decide if for example if i click

00:54:57,359 --> 00:55:00,559
here

00:54:58,000 --> 00:55:00,559
where is it

00:55:01,839 --> 00:55:05,200
where is it where is it where is it

00:55:05,359 --> 00:55:10,640
for example if i click here so it is

00:55:08,640 --> 00:55:14,160
suggesting me that

00:55:10,640 --> 00:55:17,119
uh something else pointing there

00:55:14,160 --> 00:55:20,559
after may 1st 2018 created after hosting

00:55:17,119 --> 00:55:20,559
universal gate with our youth and

00:55:25,359 --> 00:55:28,799
so yeah so i should change that to

00:55:27,599 --> 00:55:30,160
gitlab

00:55:28,799 --> 00:55:32,880
sounds like in the talk because that's

00:55:30,160 --> 00:55:34,319
what i did so i'll do that just for a

00:55:32,880 --> 00:55:36,079
while i'll do it again commentator

00:55:34,319 --> 00:55:37,450
let's see i'll push into it again no

00:55:36,079 --> 00:55:39,920
problem with that

00:55:37,450 --> 00:55:49,839
[Music]

00:55:39,920 --> 00:55:49,839
so what else

00:55:51,680 --> 00:55:57,359
[Applause]

00:55:53,599 --> 00:56:00,319
um so

00:55:57,359 --> 00:56:03,839
i'll be sharing some links with you uh

00:56:00,319 --> 00:56:03,839
you can take a none of it

00:56:06,480 --> 00:56:12,960
so here you find the

00:56:09,839 --> 00:56:16,480
all the things that you want to do for

00:56:12,960 --> 00:56:19,040
packaging things i said uh propose a

00:56:16,480 --> 00:56:22,319
package father doesn't preview bad

00:56:19,040 --> 00:56:24,240
uh uh you know for example

00:56:22,319 --> 00:56:25,680
uh we have to look for the maintainer we

00:56:24,240 --> 00:56:28,640
have to uh

00:56:25,680 --> 00:56:30,559
to upload the debian uh just go to it

00:56:28,640 --> 00:56:32,000
you can understand it

00:56:30,559 --> 00:56:34,400
and now we have to publish it with the

00:56:32,000 --> 00:56:38,079
package using this tools

00:56:34,400 --> 00:56:38,079
um next mentors

00:56:40,720 --> 00:56:44,160
but we have to sign up an account first

00:56:42,720 --> 00:56:47,520
and this is how we have to do

00:56:44,160 --> 00:56:50,880
the things there

00:56:47,520 --> 00:56:53,359
so you know i'm gonna read this section

00:56:50,880 --> 00:56:59,839
uh for a while i'll show you the table

00:56:53,359 --> 00:56:59,839
and pp also

00:57:07,280 --> 00:57:12,640
so just go through you'll understand

00:57:10,000 --> 00:57:13,760
more type of uh reports are there

00:57:12,640 --> 00:57:15,760
there's an idb

00:57:13,760 --> 00:57:17,280
signing in the package or fan pictures

00:57:15,760 --> 00:57:18,640
for option request for help requests for

00:57:17,280 --> 00:57:19,839
packages these are these are things to

00:57:18,640 --> 00:57:22,799
operate in the table

00:57:19,839 --> 00:57:26,000
uh you have to check for a bug use view

00:57:22,799 --> 00:57:28,400
you have to use report tools

00:57:26,000 --> 00:57:28,400
that's it

00:57:29,680 --> 00:57:35,040
so i should i said uh in the change log

00:57:32,960 --> 00:57:36,799
that we have to change above number uh

00:57:35,040 --> 00:57:39,680
depending upon the

00:57:36,799 --> 00:57:41,280
buck type for example you if i want to

00:57:39,680 --> 00:57:42,799
do up by this package which is not a

00:57:41,280 --> 00:57:44,400
debian we have to file an itp

00:57:42,799 --> 00:57:46,720
by using this report but here you can

00:57:44,400 --> 00:57:55,839
find a uh

00:57:46,720 --> 00:57:55,839
template wpbp template just there it is

00:57:59,119 --> 00:58:02,400
so anyway you can find many more

00:58:01,119 --> 00:58:06,480
templates here

00:58:02,400 --> 00:58:10,160
um and then you will see how things go

00:58:06,480 --> 00:58:12,240
there uh if you want any kind of help

00:58:10,160 --> 00:58:14,559
like for example you you were struck on

00:58:12,240 --> 00:58:18,240
something on the packaging so

00:58:14,559 --> 00:58:23,839
before you go you can go to this channel

00:58:18,240 --> 00:58:23,839
uh where you can type i'll just uh

00:58:24,799 --> 00:58:29,359
i'll just type here you have to go to

00:58:26,880 --> 00:58:29,359
this uh

00:58:32,480 --> 00:58:39,359
demian hyphen methods

00:58:35,680 --> 00:58:41,280
so either on irc or matrix you have to

00:58:39,359 --> 00:58:43,520
join this channel

00:58:41,280 --> 00:58:43,520
and

00:58:46,079 --> 00:58:50,160
you can ask the questions there so

00:58:48,160 --> 00:58:54,480
anyone can help this and uh

00:58:50,160 --> 00:58:57,520
yep this is what the salsa ci is so

00:58:54,480 --> 00:58:57,520
ready for qa

00:58:57,680 --> 00:59:00,880
thank you so yeah i put the differences

00:58:59,839 --> 00:59:03,119
here already

00:59:00,880 --> 00:59:05,839
i'll put some more that i will share

00:59:03,119 --> 00:59:05,839

YouTube URL: https://www.youtube.com/watch?v=LLu4ex-nO6o


