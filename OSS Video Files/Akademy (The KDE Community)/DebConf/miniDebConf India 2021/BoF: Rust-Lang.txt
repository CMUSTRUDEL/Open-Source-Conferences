Title: BoF: Rust-Lang
Publication date: 2021-03-20
Playlist: miniDebConf India 2021
Description: 
	by Devdutt Shenoi

At: MiniDebConf India 2021
https://in2021.mini.debconf.org/talks/17-bof-rust-lang/

Rust-lang is now gaining immense popularity in the world of systems programming, with all kinds of software, be it game engines or network utilities. With code that is written in a beautiful and articulate manner, building on years of research and technical expertise from it's inception at Mozilla Research and now being organized under it's own foundation, with influences from some of the greatest minds in computing.

In this BoF session, we intend to introduce the language to new comers who have some exposure to programming languages in general(like C, Python, JavaScript) and would want to become proper Rustaceans. We also intend to provide a platform for programmers who have been experimenting with the language to share with us their story.

This event will be a team effort, organized mainly by members of the Kerala Rustaceans(t.me/keralars) telegram group. We would really love to get more hands on board from genuinely interested Rust community members to organize the event, join us now!

Room: Rex
Scheduled start: 2021-01-24 18:00:00
Captions: 
	00:00:05,359 --> 00:00:08,639
so

00:00:06,000 --> 00:00:09,519
hi guys uh today we have a small

00:00:08,639 --> 00:00:13,920
discussion

00:00:09,519 --> 00:00:16,800
on the rust language and we are amateur

00:00:13,920 --> 00:00:19,279
trustations as they say we work with the

00:00:16,800 --> 00:00:21,359
rust language to create software

00:00:19,279 --> 00:00:23,439
and that's a lot of reasons why we do it

00:00:21,359 --> 00:00:25,039
one of the main reasons is community and

00:00:23,439 --> 00:00:26,000
today we'll be discussing about the rust

00:00:25,039 --> 00:00:29,199
community

00:00:26,000 --> 00:00:32,399
and our experiences with trust

00:00:29,199 --> 00:00:34,800
the programming language uh yeah so

00:00:32,399 --> 00:00:35,680
we'll start by introducing our panelists

00:00:34,800 --> 00:00:38,719
here so

00:00:35,680 --> 00:00:45,840
today we have with us uh vibhuti can you

00:00:38,719 --> 00:00:45,840
introduce yourself

00:00:47,600 --> 00:00:51,280
vibhuti seems like you're not audible

00:00:52,239 --> 00:00:55,440
all right sorry is it no better yeah

00:00:54,879 --> 00:00:58,239
yeah

00:00:55,440 --> 00:01:00,239
sorry my microphone was turned off so hi

00:00:58,239 --> 00:01:02,239
so myself is vibhuti

00:01:00,239 --> 00:01:03,680
i do work with various multimeter

00:01:02,239 --> 00:01:06,080
related things mostly

00:01:03,680 --> 00:01:08,320
with the video lens projects and also

00:01:06,080 --> 00:01:11,760
our zip organization project

00:01:08,320 --> 00:01:14,720
so in that i do some rust related things

00:01:11,760 --> 00:01:16,479
like one of our project is there called

00:01:14,720 --> 00:01:20,159
ravi which is an

00:01:16,479 --> 00:01:21,119
trust av1 encoder so i am one of the

00:01:20,159 --> 00:01:24,159
collaborator and

00:01:21,119 --> 00:01:24,880
developer for the encoder so in that we

00:01:24,159 --> 00:01:28,240
do

00:01:24,880 --> 00:01:30,159
a lot of things like we had to do from

00:01:28,240 --> 00:01:32,000
this class for build system

00:01:30,159 --> 00:01:34,479
making the architecture support for

00:01:32,000 --> 00:01:36,640
various including r64

00:01:34,479 --> 00:01:37,759
and test suite like that so i have been

00:01:36,640 --> 00:01:41,200
engaged

00:01:37,759 --> 00:01:43,360
with av1 related stuff in rust

00:01:41,200 --> 00:01:45,119
and also we have other projects called

00:01:43,360 --> 00:01:45,840
rust tv which is called rusty audio

00:01:45,119 --> 00:01:48,799
video

00:01:45,840 --> 00:01:51,280
so we have a lot of wrappers for like

00:01:48,799 --> 00:01:52,640
with the ffmpeg or vlc or some audio

00:01:51,280 --> 00:01:55,280
video codec

00:01:52,640 --> 00:01:56,640
support written in the rest so i do

00:01:55,280 --> 00:01:59,200
maintain some of them

00:01:56,640 --> 00:02:00,960
so i think that's pretty much in draw of

00:01:59,200 --> 00:02:04,399
me related to rust

00:02:00,960 --> 00:02:07,280
yeah yeah okay thanks for that now uh

00:02:04,399 --> 00:02:08,160
moving on to let's move to akshay so

00:02:07,280 --> 00:02:10,720
akshay is also

00:02:08,160 --> 00:02:13,280
one of our panelists today uh it's great

00:02:10,720 --> 00:02:16,480
to know that one of the organizers of uh

00:02:13,280 --> 00:02:19,920
mini dev con themselves is like uh

00:02:16,480 --> 00:02:23,440
such uh a great part of says

00:02:19,920 --> 00:02:24,319
how large is yeah can you introduce

00:02:23,440 --> 00:02:26,560
yourself

00:02:24,319 --> 00:02:28,160
actually yeah during mozilla i mean i

00:02:26,560 --> 00:02:29,920
used to volunteer for mozilla in the

00:02:28,160 --> 00:02:32,959
past and that's when i first heard about

00:02:29,920 --> 00:02:35,920
rest and then i back then i didn't know

00:02:32,959 --> 00:02:37,680
c c plus plus any of it and so i was

00:02:35,920 --> 00:02:39,840
like why learn all of those

00:02:37,680 --> 00:02:41,519
old languages so why not learn rust and

00:02:39,840 --> 00:02:43,440
then i'm still a

00:02:41,519 --> 00:02:44,560
learner in rush i'm trying to learn more

00:02:43,440 --> 00:02:47,519
refreshed

00:02:44,560 --> 00:02:47,519
awesome and required

00:02:47,920 --> 00:02:54,720
awesome another part of our panel

00:02:51,440 --> 00:02:55,120
uh is swarnam so any maroon uh who's

00:02:54,720 --> 00:02:57,280
also

00:02:55,120 --> 00:02:59,680
who also goes by the name of min ross uh

00:02:57,280 --> 00:03:02,840
surname can you introduce yourself

00:02:59,680 --> 00:03:06,159
uh yeah uh so i currently work

00:03:02,840 --> 00:03:07,360
uh as like a contributing multiple open

00:03:06,159 --> 00:03:10,560
source projects

00:03:07,360 --> 00:03:13,440
uh some of them do include rust

00:03:10,560 --> 00:03:14,159
and i have mostly been a part of rust

00:03:13,440 --> 00:03:18,239
community

00:03:14,159 --> 00:03:19,440
as a person who has interest in rust and

00:03:18,239 --> 00:03:22,640
has been working with c

00:03:19,440 --> 00:03:27,040
plus plus for uh over half a decade

00:03:22,640 --> 00:03:27,599
so uh that's where i started with trust

00:03:27,040 --> 00:03:31,040
because

00:03:27,599 --> 00:03:34,159
uh c plus plus has been having a pretty

00:03:31,040 --> 00:03:37,280
pretty uh weak support for aggressive

00:03:34,159 --> 00:03:39,200
or strong type systems like uh that are

00:03:37,280 --> 00:03:41,280
available in haskell and like

00:03:39,200 --> 00:03:42,319
functional programming languages which

00:03:41,280 --> 00:03:45,519
are quite

00:03:42,319 --> 00:03:46,239
essential to good programming and good

00:03:45,519 --> 00:03:49,360
programming

00:03:46,239 --> 00:03:51,440
patterns that i find useful so that's

00:03:49,360 --> 00:03:54,080
how i got introduced to rust

00:03:51,440 --> 00:03:54,799
and now just contribute to some projects

00:03:54,080 --> 00:03:57,280
here and there

00:03:54,799 --> 00:03:58,000
my work with rust is limited to

00:03:57,280 --> 00:04:01,040
currently

00:03:58,000 --> 00:04:03,439
open source that's about it

00:04:01,040 --> 00:04:05,439
yeah uh the same goes with me uh i'm

00:04:03,439 --> 00:04:06,239
also like an amateur developer and i'm

00:04:05,439 --> 00:04:07,760
like

00:04:06,239 --> 00:04:09,519
uh doing a lot of open source

00:04:07,760 --> 00:04:11,280
contributions nowadays uh

00:04:09,519 --> 00:04:13,040
especially on my own repositories

00:04:11,280 --> 00:04:15,120
because i'm a bit scared of like going

00:04:13,040 --> 00:04:18,400
on to other repositories and

00:04:15,120 --> 00:04:18,799
putting up yes but otherwise rust has

00:04:18,400 --> 00:04:22,639
been

00:04:18,799 --> 00:04:25,840
really a very cooperative kind of

00:04:22,639 --> 00:04:27,040
community where people are exchanging a

00:04:25,840 --> 00:04:29,040
lot of ideas

00:04:27,040 --> 00:04:30,400
uh gaining a lot of knowledge and

00:04:29,040 --> 00:04:33,120
probably one of the

00:04:30,400 --> 00:04:34,000
greatest parts of rush community is the

00:04:33,120 --> 00:04:36,639
streamers

00:04:34,000 --> 00:04:38,560
who are like streaming their uh rust

00:04:36,639 --> 00:04:42,160
exploits on a regular basis and

00:04:38,560 --> 00:04:45,360
uh yeah i really have to like uh

00:04:42,160 --> 00:04:47,919
name a lot of people so i just say

00:04:45,360 --> 00:04:48,720
rather just go on to twitch or youtube

00:04:47,919 --> 00:04:51,120
or

00:04:48,720 --> 00:04:52,160
any other platform to find out uh about

00:04:51,120 --> 00:04:54,639
all of these people

00:04:52,160 --> 00:04:56,000
like an example would be john who uh

00:04:54,639 --> 00:04:59,280
john meng sat

00:04:56,000 --> 00:05:01,759
and uh another would be ryan levick

00:04:59,280 --> 00:05:03,120
yeah so just find out more about these

00:05:01,759 --> 00:05:06,080
people they are really like

00:05:03,120 --> 00:05:08,320
they are going into the core of systems

00:05:06,080 --> 00:05:11,840
programming

00:05:08,320 --> 00:05:15,440
distributed and other fields of

00:05:11,840 --> 00:05:17,600
computing and that's a lot of

00:05:15,440 --> 00:05:19,759
thinking that goes into it and that's

00:05:17,600 --> 00:05:21,919
how i came into the rush community

00:05:19,759 --> 00:05:23,919
uh yeah the main reason would probably

00:05:21,919 --> 00:05:24,880
because i was a pythonista that is a

00:05:23,919 --> 00:05:27,919
python developer

00:05:24,880 --> 00:05:31,039
and this as

00:05:27,919 --> 00:05:34,000
the academic outreach that's going on

00:05:31,039 --> 00:05:36,000
within the rush community also is a

00:05:34,000 --> 00:05:38,080
substantial part of

00:05:36,000 --> 00:05:39,680
why i am part of the rest community yeah

00:05:38,080 --> 00:05:42,720
that that be my introduction

00:05:39,680 --> 00:05:43,440
of myself yeah uh so let's get started

00:05:42,720 --> 00:05:46,720
with a small

00:05:43,440 --> 00:05:49,919
uh uh description of what the

00:05:46,720 --> 00:05:53,600
trust language is and uh yeah

00:05:49,919 --> 00:05:57,440
so anyone wants to like describe their

00:05:53,600 --> 00:05:57,440
uh thought of what trust is

00:05:58,720 --> 00:06:05,360
i think uh surname can do that right

00:06:01,759 --> 00:06:08,960
okay uh yeah so i'm going to give

00:06:05,360 --> 00:06:11,440
a perspective of rust from the side of

00:06:08,960 --> 00:06:12,960
someone who has worked with both uh web

00:06:11,440 --> 00:06:14,400
projects such as javascript and

00:06:12,960 --> 00:06:17,360
typescript and

00:06:14,400 --> 00:06:19,360
lower level projects i've not worked in

00:06:17,360 --> 00:06:22,479
a lot of the gray area

00:06:19,360 --> 00:06:23,600
uh of software programming like uh the

00:06:22,479 --> 00:06:25,919
devops and side

00:06:23,600 --> 00:06:27,120
so i'm not sure if i can have a

00:06:25,919 --> 00:06:29,199
perspective but

00:06:27,120 --> 00:06:30,319
uh here's a general idea of what rust

00:06:29,199 --> 00:06:33,280
represents to me

00:06:30,319 --> 00:06:34,639
at least rust is at core a systems

00:06:33,280 --> 00:06:37,919
programming language

00:06:34,639 --> 00:06:38,479
that allows you flexibility of any of

00:06:37,919 --> 00:06:40,960
the

00:06:38,479 --> 00:06:42,880
more popular low level of systems

00:06:40,960 --> 00:06:46,720
programming language such as c

00:06:42,880 --> 00:06:48,800
uh c plus plus or any other

00:06:46,720 --> 00:06:50,560
system programming language that you can

00:06:48,800 --> 00:06:53,440
think of

00:06:50,560 --> 00:06:54,400
and while maintaining a type system that

00:06:53,440 --> 00:06:56,400
is expressive

00:06:54,400 --> 00:06:58,240
enough to represent some of the critical

00:06:56,400 --> 00:07:03,120
patterns that are required

00:06:58,240 --> 00:07:06,160
in modern programming uh

00:07:03,120 --> 00:07:09,039
architectures such as you have

00:07:06,160 --> 00:07:10,240
some types or they are called enums they

00:07:09,039 --> 00:07:13,520
are match patterns for

00:07:10,240 --> 00:07:16,000
pattern matching and then there

00:07:13,520 --> 00:07:17,440
is different things such as traits over

00:07:16,000 --> 00:07:20,880
inheritance

00:07:17,440 --> 00:07:23,440
and it is it is a form of uh

00:07:20,880 --> 00:07:24,880
you can think of it like object-oriented

00:07:23,440 --> 00:07:28,400
programming but better

00:07:24,880 --> 00:07:32,000
in the form that you have a diff

00:07:28,400 --> 00:07:35,120
description of uh what

00:07:32,000 --> 00:07:37,520
something is rather than uh

00:07:35,120 --> 00:07:40,080
uh inheritance-based approach of having

00:07:37,520 --> 00:07:42,160
sub and superclasses

00:07:40,080 --> 00:07:43,599
so those are some of the key things that

00:07:42,160 --> 00:07:46,639
i find important with

00:07:43,599 --> 00:07:48,560
rust in general other than its

00:07:46,639 --> 00:07:50,800
de facto standard of having a borrow

00:07:48,560 --> 00:07:53,840
checker verify your code

00:07:50,800 --> 00:07:57,680
enough memory safe

00:07:53,840 --> 00:07:59,360
it's sort of memory safe and completely

00:07:57,680 --> 00:08:00,879
and something that is called fearless

00:07:59,360 --> 00:08:03,919
concurrency

00:08:00,879 --> 00:08:07,120
insider trust uh that make sure that

00:08:03,919 --> 00:08:07,520
uh the type system can uh verify that

00:08:07,120 --> 00:08:10,720
your

00:08:07,520 --> 00:08:13,919
code will always be uh

00:08:10,720 --> 00:08:17,199
free from some of the uh common issues

00:08:13,919 --> 00:08:20,080
that one might face during say

00:08:17,199 --> 00:08:21,759
uh writing uh async and con current

00:08:20,080 --> 00:08:24,879
currency based programs

00:08:21,759 --> 00:08:26,639
so that's extremely helpful uh coming

00:08:24,879 --> 00:08:30,400
from something say javascript

00:08:26,639 --> 00:08:34,399
where you can uh go into various

00:08:30,400 --> 00:08:36,880
uh edge cases while writing async code

00:08:34,399 --> 00:08:39,680
so that's my perspective for us of how

00:08:36,880 --> 00:08:42,719
it improves the life of someone

00:08:39,680 --> 00:08:45,279
who is working with it or working with

00:08:42,719 --> 00:08:48,160
different languages

00:08:45,279 --> 00:08:49,839
so uh my description would be the same

00:08:48,160 --> 00:08:52,560
would be similar

00:08:49,839 --> 00:08:54,880
i have really loved the expressivity of

00:08:52,560 --> 00:08:56,880
the programming language as such

00:08:54,880 --> 00:08:58,480
how expressive you can write your

00:08:56,880 --> 00:09:01,519
software

00:08:58,480 --> 00:09:04,000
and all of the features that meshes

00:09:01,519 --> 00:09:05,519
very well together probably some of the

00:09:04,000 --> 00:09:08,160
best

00:09:05,519 --> 00:09:09,920
testing tools built into the language

00:09:08,160 --> 00:09:12,959
the package manager

00:09:09,920 --> 00:09:15,040
all of those contribute very well uh

00:09:12,959 --> 00:09:16,880
to the entire ecosystem and then there's

00:09:15,040 --> 00:09:18,720
the community for of course yeah

00:09:16,880 --> 00:09:20,399
that's something that we have to always

00:09:18,720 --> 00:09:23,040
talk about uh

00:09:20,399 --> 00:09:24,320
then uh i think uh vibhuti might have a

00:09:23,040 --> 00:09:27,200
very good uh

00:09:24,320 --> 00:09:30,320
better probably than mine uh an

00:09:27,200 --> 00:09:30,320
introduction to the language

00:09:30,720 --> 00:09:32,959
hi

00:09:33,839 --> 00:09:39,120
sorry so i'm not really sure how

00:09:36,880 --> 00:09:40,959
can we define a rust language so the

00:09:39,120 --> 00:09:43,200
main reason why we

00:09:40,959 --> 00:09:44,080
went for having a rust encoder instead

00:09:43,200 --> 00:09:46,240
of a c

00:09:44,080 --> 00:09:48,000
like when we have a c or c plus plus

00:09:46,240 --> 00:09:48,640
base encoder instead of trustees like

00:09:48,000 --> 00:09:50,640
that

00:09:48,640 --> 00:09:51,839
one of the reason is the language that

00:09:50,640 --> 00:09:54,240
we all know like

00:09:51,839 --> 00:09:55,200
one reason which we find the rest is

00:09:54,240 --> 00:09:57,839
very much

00:09:55,200 --> 00:10:00,000
helpful is that it can help the new

00:09:57,839 --> 00:10:03,120
people to contribute to a

00:10:00,000 --> 00:10:04,959
very complex domain and secondly one of

00:10:03,120 --> 00:10:05,839
the res like the new contributors in the

00:10:04,959 --> 00:10:08,959
sense there is a

00:10:05,839 --> 00:10:10,800
very vast user friendly documentation

00:10:08,959 --> 00:10:13,680
available for the rus language

00:10:10,800 --> 00:10:15,839
while c or c plus plus it's there but

00:10:13,680 --> 00:10:17,680
it's not quite modern and

00:10:15,839 --> 00:10:19,519
not very much community driven that's

00:10:17,680 --> 00:10:22,160
one thing

00:10:19,519 --> 00:10:23,440
secondly the reason why we of forest is

00:10:22,160 --> 00:10:25,839
like the

00:10:23,440 --> 00:10:27,120
the management of the whole project is

00:10:25,839 --> 00:10:29,839
really much easy

00:10:27,120 --> 00:10:31,600
like we have a definition we can define

00:10:29,839 --> 00:10:33,040
what our packages we are going to have

00:10:31,600 --> 00:10:35,920
what all dependencies are we

00:10:33,040 --> 00:10:36,959
going to have and we can enable multiple

00:10:35,920 --> 00:10:39,120
architecture

00:10:36,959 --> 00:10:42,079
and one one of the great thing which i

00:10:39,120 --> 00:10:44,839
felt was great about trust is that if we

00:10:42,079 --> 00:10:46,560
build a target with a specific

00:10:44,839 --> 00:10:49,680
architecture

00:10:46,560 --> 00:10:51,600
so we could have like for both linux and

00:10:49,680 --> 00:10:53,920
android also we can have a single binary

00:10:51,600 --> 00:10:56,240
we can generate a single binary

00:10:53,920 --> 00:10:58,000
and for like we just need to define what

00:10:56,240 --> 00:10:59,839
are the targets we are going to have

00:10:58,000 --> 00:11:01,040
and then done so we just need to build

00:10:59,839 --> 00:11:05,200
it and we can get

00:11:01,040 --> 00:11:07,040
multiple targets in the flight so

00:11:05,200 --> 00:11:09,519
like even in the case of a wheeler and

00:11:07,040 --> 00:11:10,320
clc we have started having rust inside

00:11:09,519 --> 00:11:12,720
the code

00:11:10,320 --> 00:11:14,800
so right now the goal is that we will be

00:11:12,720 --> 00:11:16,959
having some parts of the

00:11:14,800 --> 00:11:18,079
like we can't migrate the whole code

00:11:16,959 --> 00:11:20,720
base to rest

00:11:18,079 --> 00:11:23,040
so we'll be having some dependencies and

00:11:20,720 --> 00:11:25,680
like some modules in rust slowly

00:11:23,040 --> 00:11:29,360
having the alternative ocean for example

00:11:25,680 --> 00:11:29,760
parsing the i mean what to say q is

00:11:29,360 --> 00:11:32,240
there

00:11:29,760 --> 00:11:34,000
so i can say the parsing some some of

00:11:32,240 --> 00:11:36,560
the dvd information

00:11:34,000 --> 00:11:38,399
is now being done in rust in vlc's

00:11:36,560 --> 00:11:41,760
latest nightlys

00:11:38,399 --> 00:11:43,279
so that's part of our last tier g sub

00:11:41,760 --> 00:11:46,240
projecting 2020 one

00:11:43,279 --> 00:11:48,640
person was there to integrate trust so

00:11:46,240 --> 00:11:51,440
so we have like what we do is that we

00:11:48,640 --> 00:11:53,360
have a c wrapper over the rest code so

00:11:51,440 --> 00:11:55,760
which is quite easy in the restaurant

00:11:53,360 --> 00:11:57,440
we just need to define how we are going

00:11:55,760 --> 00:11:59,680
to generate the header files

00:11:57,440 --> 00:12:01,519
and we just need like it's only a few

00:11:59,680 --> 00:12:03,600
lines of code

00:12:01,519 --> 00:12:05,760
for having another language full support

00:12:03,600 --> 00:12:07,519
for a rust so which is a great thing

00:12:05,760 --> 00:12:09,279
interest so at the same time if we try

00:12:07,519 --> 00:12:12,320
to do in a python or c

00:12:09,279 --> 00:12:14,240
it might not be the same case

00:12:12,320 --> 00:12:16,399
yeah one more thing before i end up is

00:12:14,240 --> 00:12:18,720
that one thing which we found just

00:12:16,399 --> 00:12:20,720
quite amusing is how we can manage the

00:12:18,720 --> 00:12:23,279
memory and multi-threading

00:12:20,720 --> 00:12:26,399
both things are quite really fast and

00:12:23,279 --> 00:12:29,760
amazing in the case of rust

00:12:26,399 --> 00:12:33,360
yeah that's it all right

00:12:29,760 --> 00:12:36,160
yeah so uh probably i think uh vibhuti

00:12:33,360 --> 00:12:38,639
can also like talk about the

00:12:36,160 --> 00:12:39,760
rust ecosystem and it's meshing with the

00:12:38,639 --> 00:12:42,800
risk

00:12:39,760 --> 00:12:45,440
risk 5 open source kind of hardware

00:12:42,800 --> 00:12:47,200
ecosystem aspect right yeah to be fair i

00:12:45,440 --> 00:12:48,880
haven't done anything related to risk

00:12:47,200 --> 00:12:51,279
fight till now my friends are doing

00:12:48,880 --> 00:12:54,480
nothing so mostly i do with the stuff

00:12:51,279 --> 00:12:54,480
related to art 64.

00:12:56,800 --> 00:13:01,040
so they think that was sworn and then

00:12:58,639 --> 00:13:01,040
was it

00:13:01,760 --> 00:13:04,800
was it swarnam who was working with risk

00:13:03,920 --> 00:13:07,120
pi

00:13:04,800 --> 00:13:09,279
yeah i started working with risk five

00:13:07,120 --> 00:13:09,760
but uh my work was currently mostly with

00:13:09,279 --> 00:13:12,880
the

00:13:09,760 --> 00:13:15,839
emulator uh risk higher employers

00:13:12,880 --> 00:13:17,040
because uh currently i do not have a

00:13:15,839 --> 00:13:20,000
rust board at hand

00:13:17,040 --> 00:13:20,399
that i can play with regularly yeah so

00:13:20,000 --> 00:13:23,279
uh

00:13:20,399 --> 00:13:24,560
i mean like yeah i have arm boards and

00:13:23,279 --> 00:13:28,399
mips boards but

00:13:24,560 --> 00:13:31,839
yeah no uh risk boards yeah

00:13:28,399 --> 00:13:34,720
hopefully five will find that profession

00:13:31,839 --> 00:13:36,000
yeah there's a new boat called beagle 5

00:13:34,720 --> 00:13:38,320
it's in

00:13:36,000 --> 00:13:39,760
it it's going to be in risk architecture

00:13:38,320 --> 00:13:41,519
it will probably solve that so

00:13:39,760 --> 00:13:43,199
i do not have a lot of experience with

00:13:41,519 --> 00:13:46,480
risk but yeah there is

00:13:43,199 --> 00:13:47,040
uh like risk is one of the second tie i

00:13:46,480 --> 00:13:49,360
believe

00:13:47,040 --> 00:13:50,240
targets for trust now so it has been

00:13:49,360 --> 00:13:52,720
moved up

00:13:50,240 --> 00:13:53,279
so it is available at least as a third

00:13:52,720 --> 00:13:55,680
time

00:13:53,279 --> 00:13:56,639
it's more than definitely there that you

00:13:55,680 --> 00:14:00,839
can get it

00:13:56,639 --> 00:14:03,600
working uh let me just make sure that it

00:14:00,839 --> 00:14:03,600
is and yes

00:14:03,839 --> 00:14:07,839
architecture lately like it became last

00:14:06,160 --> 00:14:11,279
month if i remember correctly

00:14:07,839 --> 00:14:14,079
yeah and also like m1 support is also

00:14:11,279 --> 00:14:14,399
uh very much in the pipeline right yes

00:14:14,079 --> 00:14:17,519
like

00:14:14,399 --> 00:14:18,959
r64 is the arm architecture is quite the

00:14:17,519 --> 00:14:20,000
cutting edge thing for the next few

00:14:18,959 --> 00:14:22,560
years at least

00:14:20,000 --> 00:14:23,839
till the risk 5 becomes more commonly

00:14:22,560 --> 00:14:25,839
available

00:14:23,839 --> 00:14:27,839
yeah so that's also something that's

00:14:25,839 --> 00:14:28,560
like building up and the reason why i

00:14:27,839 --> 00:14:30,079
brought it up

00:14:28,560 --> 00:14:32,079
it's like it's more like a chicken and

00:14:30,079 --> 00:14:33,839
egg problem where the content producers

00:14:32,079 --> 00:14:36,480
are waiting for the

00:14:33,839 --> 00:14:38,399
people to adapt s5 and s5 are waiting

00:14:36,480 --> 00:14:41,839
for content producers to take this thing

00:14:38,399 --> 00:14:42,639
yeah that's true it's mostly a problem

00:14:41,839 --> 00:14:45,040
of uh

00:14:42,639 --> 00:14:45,839
in unavailability in availability of

00:14:45,040 --> 00:14:48,720
hardware

00:14:45,839 --> 00:14:49,040
like risk 5 hardware is hard to come by

00:14:48,720 --> 00:14:51,360
like

00:14:49,040 --> 00:14:54,000
it's either too expensive or it's not

00:14:51,360 --> 00:14:55,920
you complete it's completely unavailable

00:14:54,000 --> 00:14:57,839
yeah the indian government trying to

00:14:55,920 --> 00:14:58,720
have some competitions relation to the

00:14:57,839 --> 00:15:00,560
spy

00:14:58,720 --> 00:15:03,199
yeah there's also shakti processor in

00:15:00,560 --> 00:15:06,480
india that is yeah

00:15:03,199 --> 00:15:09,279
it is yeah it is on risk 5. i i

00:15:06,480 --> 00:15:10,079
i think i know someone there but uh yeah

00:15:09,279 --> 00:15:12,959
there's one

00:15:10,079 --> 00:15:12,959
startup called in

00:15:15,920 --> 00:15:20,000
like they are getting huge funded from

00:15:17,839 --> 00:15:23,360
isis

00:15:20,000 --> 00:15:26,880
sro and yeah yeah

00:15:23,360 --> 00:15:26,880
they are having some

00:15:38,839 --> 00:15:44,399
huh all right uh

00:15:41,440 --> 00:15:44,399
so the reason why

00:15:46,000 --> 00:15:51,440
yeah yeah go ahead yeah the reason why i

00:15:49,920 --> 00:15:54,720
brought it up was because of

00:15:51,440 --> 00:15:56,560
how rust is also taking place uh a lot

00:15:54,720 --> 00:15:56,880
of developments in the embedded space

00:15:56,560 --> 00:15:59,839
and

00:15:56,880 --> 00:16:01,839
uh yeah so let's move on from that uh we

00:15:59,839 --> 00:16:04,480
have akshay with us who's a hacker

00:16:01,839 --> 00:16:05,279
probably one of his exploits with rust

00:16:04,480 --> 00:16:07,440
was

00:16:05,279 --> 00:16:09,920
uh yeah he shared about it today only

00:16:07,440 --> 00:16:12,320
with us so that's how i know of it

00:16:09,920 --> 00:16:14,399
it's a hacker kind of thing that i want

00:16:12,320 --> 00:16:18,079
him to talk about now

00:16:14,399 --> 00:16:19,199
say go ahead see uh rest may i think one

00:16:18,079 --> 00:16:21,199
of the things

00:16:19,199 --> 00:16:22,480
you you've been trying to point out is

00:16:21,199 --> 00:16:24,560
the community and

00:16:22,480 --> 00:16:25,600
for me how that helped was the

00:16:24,560 --> 00:16:28,240
documentation

00:16:25,600 --> 00:16:28,959
around a lot of things so just last week

00:16:28,240 --> 00:16:30,720
hacker news

00:16:28,959 --> 00:16:32,399
there was a top link which was about

00:16:30,720 --> 00:16:35,120
learn russian half an hour which

00:16:32,399 --> 00:16:36,480
was like lots of examples of all kinds

00:16:35,120 --> 00:16:39,360
of

00:16:36,480 --> 00:16:41,120
features of rest in actual code so you

00:16:39,360 --> 00:16:42,720
can learn rush very quickly

00:16:41,120 --> 00:16:44,399
because there's lots of documentation in

00:16:42,720 --> 00:16:47,839
large community so

00:16:44,399 --> 00:16:48,560
uh a very good example of that is how i

00:16:47,839 --> 00:16:51,279
learned

00:16:48,560 --> 00:16:52,800
like maybe i'll talk about it later but

00:16:51,279 --> 00:16:55,600
essentially the rest book

00:16:52,800 --> 00:16:57,519
allows you to learn it very quickly and

00:16:55,600 --> 00:17:00,880
the the entire paradigm of

00:16:57,519 --> 00:17:02,480
memory management which i mean the the

00:17:00,880 --> 00:17:05,280
borrow checker and

00:17:02,480 --> 00:17:06,079
you have to use immutable variables a

00:17:05,280 --> 00:17:07,839
lot

00:17:06,079 --> 00:17:09,199
that makes you really think about how

00:17:07,839 --> 00:17:11,199
you program

00:17:09,199 --> 00:17:13,439
and so as a learner and i learned

00:17:11,199 --> 00:17:16,559
different programming languages for fun

00:17:13,439 --> 00:17:18,319
uh i find that a really powerful concept

00:17:16,559 --> 00:17:20,160
in rush that

00:17:18,319 --> 00:17:22,400
may be other languages can also benefit

00:17:20,160 --> 00:17:22,400
from

00:17:24,079 --> 00:17:27,919
yeah i also have to say something about

00:17:27,039 --> 00:17:30,320
that

00:17:27,919 --> 00:17:32,080
my experiences with russ have all been

00:17:30,320 --> 00:17:33,039
related to the documentation thing

00:17:32,080 --> 00:17:35,600
because

00:17:33,039 --> 00:17:37,520
personally i am not a fan of like

00:17:35,600 --> 00:17:39,840
knowing things by heart i won't

00:17:37,520 --> 00:17:41,280
go into the documentations find things

00:17:39,840 --> 00:17:43,520
learn it and then forget

00:17:41,280 --> 00:17:44,799
after i have implemented it and so most

00:17:43,520 --> 00:17:45,919
of my projects have been like that in

00:17:44,799 --> 00:17:48,880
past interest

00:17:45,919 --> 00:17:49,600
and yeah one of my exploits is probably

00:17:48,880 --> 00:17:51,360
uh

00:17:49,600 --> 00:17:52,679
one of the greatest examples of however

00:17:51,360 --> 00:17:56,160
i have taken

00:17:52,679 --> 00:17:57,039
documentations from the rust ecosystem

00:17:56,160 --> 00:18:00,799
like

00:17:57,039 --> 00:18:04,240
that's one on basim binding and yeah

00:18:00,799 --> 00:18:07,280
that has been very helpful in writing my

00:18:04,240 --> 00:18:10,240
program yeah now moving on

00:18:07,280 --> 00:18:10,880
i think it will be a good idea to like

00:18:10,240 --> 00:18:14,720
discuss

00:18:10,880 --> 00:18:17,679
the reasons why rust is

00:18:14,720 --> 00:18:18,960
shaping up to be what it is right now

00:18:17,679 --> 00:18:22,160
and that is the community

00:18:18,960 --> 00:18:25,600
so yeah uh any opinions on that

00:18:22,160 --> 00:18:25,600
from your side swernan

00:18:25,919 --> 00:18:30,080
what were you saying i didn't hear

00:18:27,520 --> 00:18:32,480
properly on the community side

00:18:30,080 --> 00:18:33,200
uh what do you think is yeah the

00:18:32,480 --> 00:18:36,400
foundation

00:18:33,200 --> 00:18:36,960
and all yeah yeah the trust community's

00:18:36,400 --> 00:18:39,120
idea

00:18:36,960 --> 00:18:41,200
of having uh an open and clear

00:18:39,120 --> 00:18:43,679
discussions about features

00:18:41,200 --> 00:18:44,720
while having the people uh the key

00:18:43,679 --> 00:18:48,000
people in the

00:18:44,720 --> 00:18:51,280
design teams handle the final decisions

00:18:48,000 --> 00:18:53,919
is something that i find quite nice

00:18:51,280 --> 00:18:55,039
and i think probably better than having

00:18:53,919 --> 00:18:58,720
a closed

00:18:55,039 --> 00:19:01,919
uh drafting process of proposals

00:18:58,720 --> 00:19:04,000
uh here uh rfcs can be

00:19:01,919 --> 00:19:05,520
discussed in forums uh which is all

00:19:04,000 --> 00:19:07,120
which is also which has always been

00:19:05,520 --> 00:19:10,160
there with cnc plus plus

00:19:07,120 --> 00:19:13,039
but it has never quite felt as open

00:19:10,160 --> 00:19:13,919
with uh other languages as cnc plus

00:19:13,039 --> 00:19:16,000
because

00:19:13,919 --> 00:19:17,120
of the media the form of media that they

00:19:16,000 --> 00:19:19,039
were using

00:19:17,120 --> 00:19:20,640
i would say at least for the modern

00:19:19,039 --> 00:19:22,400
systems like uh

00:19:20,640 --> 00:19:24,000
most of the things about c and c plus

00:19:22,400 --> 00:19:26,240
plus was not well indexed

00:19:24,000 --> 00:19:27,679
on the internet that that is probably

00:19:26,240 --> 00:19:30,000
the main problem

00:19:27,679 --> 00:19:31,039
and having platforms that are well

00:19:30,000 --> 00:19:35,200
indexed has

00:19:31,039 --> 00:19:36,559
made rust uh has actually made rust a

00:19:35,200 --> 00:19:39,600
better place or better

00:19:36,559 --> 00:19:40,960
community for discussions like if you

00:19:39,600 --> 00:19:42,400
have something that you discuss on the

00:19:40,960 --> 00:19:44,720
forums or github

00:19:42,400 --> 00:19:46,080
then you will be able to find them if

00:19:44,720 --> 00:19:48,559
you do some searching

00:19:46,080 --> 00:19:49,760
and it has led to being able to find

00:19:48,559 --> 00:19:52,720
answers to you

00:19:49,760 --> 00:19:54,160
to your problems even without actually

00:19:52,720 --> 00:19:57,440
knowing

00:19:54,160 --> 00:19:59,200
uh where to find them like in actual

00:19:57,440 --> 00:20:00,559
channels for the compilers you do not

00:19:59,200 --> 00:20:03,600
have to search them

00:20:00,559 --> 00:20:07,200
manually so uh this has led

00:20:03,600 --> 00:20:09,120
for much easier access to information

00:20:07,200 --> 00:20:10,480
which has been much harder to acquire in

00:20:09,120 --> 00:20:12,960
other languages

00:20:10,480 --> 00:20:14,400
which is not to say that those languages

00:20:12,960 --> 00:20:16,080
don't have better resources

00:20:14,400 --> 00:20:17,919
it's just that they are a lot more

00:20:16,080 --> 00:20:19,120
mature so they definitely have better

00:20:17,919 --> 00:20:21,600
resources but

00:20:19,120 --> 00:20:22,320
rust even with being lacking resources

00:20:21,600 --> 00:20:23,679
like

00:20:22,320 --> 00:20:25,360
i can say that rust has good

00:20:23,679 --> 00:20:27,520
documentations but they are very limited

00:20:25,360 --> 00:20:30,480
they have very limited scope

00:20:27,520 --> 00:20:32,000
uh they are not as full as say c and c

00:20:30,480 --> 00:20:35,200
plus plus

00:20:32,000 --> 00:20:37,520
so uh they're not as rich but

00:20:35,200 --> 00:20:39,840
having those conversations being well

00:20:37,520 --> 00:20:41,600
indexed on the internet and google

00:20:39,840 --> 00:20:43,200
has helped a lot for the community to

00:20:41,600 --> 00:20:45,280
grow and especially the fact that the

00:20:43,200 --> 00:20:48,480
community is extremely helpful towards

00:20:45,280 --> 00:20:51,520
each other uh has made

00:20:48,480 --> 00:20:54,720
uh uh made a lot of progress

00:20:51,520 --> 00:20:56,960
uh towards fostering better people and

00:20:54,720 --> 00:20:58,480
uh helping the newer people from

00:20:56,960 --> 00:20:59,039
different communities come and learn

00:20:58,480 --> 00:21:02,320
like

00:20:59,039 --> 00:21:05,520
you do not have to have a background in

00:21:02,320 --> 00:21:06,320
maths type systems or low level

00:21:05,520 --> 00:21:10,799
programming

00:21:06,320 --> 00:21:13,440
you just need enough knowledge

00:21:10,799 --> 00:21:14,640
to get started with trust like you just

00:21:13,440 --> 00:21:16,559
need to read the book

00:21:14,640 --> 00:21:18,880
if you do not find something you can go

00:21:16,559 --> 00:21:21,039
to one of the communities of rust and

00:21:18,880 --> 00:21:23,280
almost always you will find someone

00:21:21,039 --> 00:21:25,600
there to help you out with

00:21:23,280 --> 00:21:26,320
rather than getting the book thrown at

00:21:25,600 --> 00:21:31,120
you and

00:21:26,320 --> 00:21:34,480
someone shouting rtfm

00:21:31,120 --> 00:21:37,760
so that has been a better experience

00:21:34,480 --> 00:21:39,760
for someone who is learning uh rust uh

00:21:37,760 --> 00:21:41,280
from the perspective of not knowing

00:21:39,760 --> 00:21:43,520
anything um

00:21:41,280 --> 00:21:46,640
means at least from what i have seen

00:21:43,520 --> 00:21:46,640
happen with people

00:21:47,360 --> 00:21:51,280
yeah one more thing i can add toward

00:21:49,200 --> 00:21:53,760
that see that in the coc

00:21:51,280 --> 00:21:54,720
plus we had to do a lot of things for

00:21:53,760 --> 00:21:56,720
generating

00:21:54,720 --> 00:21:58,080
the documents documentation with the

00:21:56,720 --> 00:22:00,880
help of oxygen

00:21:58,080 --> 00:22:02,559
yeah the oxygen was a pain there so at

00:22:00,880 --> 00:22:04,799
the same time in the rust case

00:22:02,559 --> 00:22:06,400
so it's quite more straightforward to do

00:22:04,799 --> 00:22:09,120
the documentation and

00:22:06,400 --> 00:22:10,480
a nice html page i'm not sure like so

00:22:09,120 --> 00:22:13,600
it's a markdown thing

00:22:10,480 --> 00:22:16,640
i mean docs dot rs would be generated

00:22:13,600 --> 00:22:18,559
if we do the command so like it will be

00:22:16,640 --> 00:22:19,280
a lot more easier for the people to read

00:22:18,559 --> 00:22:21,039
the

00:22:19,280 --> 00:22:23,600
package instructions and what are the

00:22:21,039 --> 00:22:26,000
things so that did help

00:22:23,600 --> 00:22:27,280
quite a lot of newbies in our community

00:22:26,000 --> 00:22:29,679
in our projects

00:22:27,280 --> 00:22:30,880
to get started bootstrap the program so

00:22:29,679 --> 00:22:33,280
we don't need to

00:22:30,880 --> 00:22:35,360
give each and every instructions for the

00:22:33,280 --> 00:22:38,480
people how to use the public api

00:22:35,360 --> 00:22:41,840
so that was a good thing which

00:22:38,480 --> 00:22:41,840
trust did sold for us

00:22:42,000 --> 00:22:45,679
i think you are meaning uh to say about

00:22:44,400 --> 00:22:50,000
cargo dock

00:22:45,679 --> 00:22:50,880
yes yeah the entire tooling of rust has

00:22:50,000 --> 00:22:53,520
helped a lot

00:22:50,880 --> 00:22:54,960
for the community to grow rust dock uh

00:22:53,520 --> 00:22:58,880
cargo

00:22:54,960 --> 00:23:02,320
uh and uh now rush analyzer

00:22:58,880 --> 00:23:04,080
uh rsls yeah which was

00:23:02,320 --> 00:23:05,679
and everything and i think that is a

00:23:04,080 --> 00:23:07,280
contract yeah

00:23:05,679 --> 00:23:08,960
yeah yeah i think that was a

00:23:07,280 --> 00:23:12,080
contribution of like uh

00:23:08,960 --> 00:23:13,679
npm people like uh like they

00:23:12,080 --> 00:23:16,320
became a part of the russian community

00:23:13,679 --> 00:23:19,840
uh steve

00:23:16,320 --> 00:23:21,840
was there i believe uh

00:23:19,840 --> 00:23:23,679
uh there were a lot of people involved

00:23:21,840 --> 00:23:24,320
in yeah a lot of people came from the

00:23:23,679 --> 00:23:28,080
web

00:23:24,320 --> 00:23:31,760
side uh from ruby and javascript

00:23:28,080 --> 00:23:33,280
and they actually made it a much nicer

00:23:31,760 --> 00:23:35,919
place like now cargo

00:23:33,280 --> 00:23:37,039
and having crates uh crates are like

00:23:35,919 --> 00:23:40,400
packages in

00:23:37,039 --> 00:23:43,520
uh javascript uh

00:23:40,400 --> 00:23:46,320
node and it's

00:23:43,520 --> 00:23:47,679
it's much better than having to do

00:23:46,320 --> 00:23:50,640
having to actually write

00:23:47,679 --> 00:23:51,279
all the code for uh linking to different

00:23:50,640 --> 00:23:54,640
libraries

00:23:51,279 --> 00:23:57,279
in say cmake and stuff

00:23:54,640 --> 00:23:59,039
so it has been much better of an

00:23:57,279 --> 00:24:00,400
experience user experience

00:23:59,039 --> 00:24:02,159
the language has a much better use

00:24:00,400 --> 00:24:05,520
experience in short so

00:24:02,159 --> 00:24:07,200
it it is much much easier for someone to

00:24:05,520 --> 00:24:10,480
get into

00:24:07,200 --> 00:24:10,480
rather than cnc plus plus

00:24:11,919 --> 00:24:16,240
true uh yeah uh anything to share about

00:24:15,679 --> 00:24:19,440
this

00:24:16,240 --> 00:24:20,480
uh from your side actually about the

00:24:19,440 --> 00:24:22,159
documentation

00:24:20,480 --> 00:24:24,559
other than what you talked about yeah i

00:24:22,159 --> 00:24:28,080
was just going to type in irc channel

00:24:24,559 --> 00:24:30,799
a stack overflow survey every time uh

00:24:28,080 --> 00:24:32,000
keeps saying rest is the most loud

00:24:30,799 --> 00:24:35,279
programming language by

00:24:32,000 --> 00:24:38,320
people who work with rest so essentially

00:24:35,279 --> 00:24:41,840
uh people who like let me see what's the

00:24:38,320 --> 00:24:46,159
least loud vba objective see people who

00:24:41,840 --> 00:24:48,880
work in these

00:24:46,159 --> 00:24:50,480
yeah but essentially uh once you start

00:24:48,880 --> 00:24:51,760
using it you will love it that's the

00:24:50,480 --> 00:24:52,960
thing about rest and i think

00:24:51,760 --> 00:24:55,120
documentation and

00:24:52,960 --> 00:24:56,799
all the tools and all of that has a

00:24:55,120 --> 00:24:58,559
great role to play in that

00:24:56,799 --> 00:25:00,320
yeah i can comment something about

00:24:58,559 --> 00:25:02,400
object pc because i did

00:25:00,320 --> 00:25:03,440
quite some time with object ac for mac

00:25:02,400 --> 00:25:06,400
os vlc

00:25:03,440 --> 00:25:07,279
so like if you see closely the mac

00:25:06,400 --> 00:25:10,960
objective c

00:25:07,279 --> 00:25:13,440
code base has a quite immense

00:25:10,960 --> 00:25:14,400
read me thing stuff like that like it

00:25:13,440 --> 00:25:16,960
has good

00:25:14,400 --> 00:25:18,320
resources for learning in the x code

00:25:16,960 --> 00:25:20,559
itself if you do

00:25:18,320 --> 00:25:22,080
so the thing which i felt the most

00:25:20,559 --> 00:25:23,760
complicated

00:25:22,080 --> 00:25:25,360
so the comparing objective c with the

00:25:23,760 --> 00:25:28,159
rusty is like it's

00:25:25,360 --> 00:25:30,320
very different the the complications of

00:25:28,159 --> 00:25:33,440
having a class and an object

00:25:30,320 --> 00:25:35,520
and a function in objective c is like

00:25:33,440 --> 00:25:37,440
you need to do with multiple files and

00:25:35,520 --> 00:25:39,600
multiple classes and multiple

00:25:37,440 --> 00:25:41,279
like it's a lot more static typed and we

00:25:39,600 --> 00:25:42,880
need to follow a lot of cases

00:25:41,279 --> 00:25:44,640
and after doing everything we will be

00:25:42,880 --> 00:25:46,960
knowing that it's an error

00:25:44,640 --> 00:25:48,000
so after doing like has spending like

00:25:46,960 --> 00:25:49,919
hour and two

00:25:48,000 --> 00:25:52,000
and then understanding a functional

00:25:49,919 --> 00:25:53,520
class then writing them

00:25:52,000 --> 00:25:55,600
it would result like one one and a half

00:25:53,520 --> 00:25:57,919
hours for a simple trivial thing

00:25:55,600 --> 00:25:59,600
for a beginner i mean and after that at

00:25:57,919 --> 00:26:02,320
the same time for a rest it would take

00:25:59,600 --> 00:26:04,720
hardly 10 to 15 minutes at the same time

00:26:02,320 --> 00:26:06,240
so the complications like it's

00:26:04,720 --> 00:26:09,440
straightforward it's like if

00:26:06,240 --> 00:26:10,559
my it's writing a c program but in an

00:26:09,440 --> 00:26:13,279
easier and safe way

00:26:10,559 --> 00:26:13,760
interest so at the same time objective c

00:26:13,279 --> 00:26:16,320
people

00:26:13,760 --> 00:26:18,720
sound it sounds like c only but it's way

00:26:16,320 --> 00:26:21,200
too complicated

00:26:18,720 --> 00:26:22,840
yeah uh the i i have worked with some of

00:26:21,200 --> 00:26:25,200
some of the objective c

00:26:22,840 --> 00:26:27,279
libraries uh in just class

00:26:25,200 --> 00:26:28,080
cross-platform applications during some

00:26:27,279 --> 00:26:31,279
of the times

00:26:28,080 --> 00:26:34,159
in game development and it has

00:26:31,279 --> 00:26:34,400
been a lot more cumbersome to work with

00:26:34,159 --> 00:26:37,840
it

00:26:34,400 --> 00:26:38,880
like it has extremely different mindset

00:26:37,840 --> 00:26:41,039
but it is

00:26:38,880 --> 00:26:42,159
c so it feels like it should come

00:26:41,039 --> 00:26:45,440
naturally

00:26:42,159 --> 00:26:47,200
but it it somehow has a feeling it it

00:26:45,440 --> 00:26:48,720
has a feeling of familiarity while

00:26:47,200 --> 00:26:50,960
having completely

00:26:48,720 --> 00:26:53,279
different semantics which makes it

00:26:50,960 --> 00:26:56,640
extremely hard for someone

00:26:53,279 --> 00:26:58,640
uh to it makes it extremely easy to make

00:26:56,640 --> 00:26:59,679
a mistake and extremely hard to use it

00:26:58,640 --> 00:27:01,919
properly

00:26:59,679 --> 00:27:02,960
when you're using it for the first time

00:27:01,919 --> 00:27:05,520
maybe after

00:27:02,960 --> 00:27:07,760
some after years of experience it might

00:27:05,520 --> 00:27:10,640
get better

00:27:07,760 --> 00:27:12,080
but not quite sure about that yeah after

00:27:10,640 --> 00:27:15,840
one year also it was

00:27:12,080 --> 00:27:15,840
a bit better but not so great

00:27:16,240 --> 00:27:20,159
right like that's why the mac os things

00:27:19,679 --> 00:27:22,640
are

00:27:20,159 --> 00:27:23,600
not so friendly with the people like

00:27:22,640 --> 00:27:25,679
there are only few

00:27:23,600 --> 00:27:27,440
people who are doing mac os development

00:27:25,679 --> 00:27:30,799
because

00:27:27,440 --> 00:27:33,200
the main problem with uh objective c and

00:27:30,799 --> 00:27:34,240
yeah swift is a good language though but

00:27:33,200 --> 00:27:36,559
the main problem with

00:27:34,240 --> 00:27:37,600
objective c is that it is a language

00:27:36,559 --> 00:27:39,919
that almost

00:27:37,600 --> 00:27:41,520
nobody uses every day it is a language

00:27:39,919 --> 00:27:43,120
that you only use when you're porting

00:27:41,520 --> 00:27:44,799
something to mac os

00:27:43,120 --> 00:27:46,720
like if you have a project and you're

00:27:44,799 --> 00:27:47,600
generally not writing it in objective c

00:27:46,720 --> 00:27:50,320
and you're not using

00:27:47,600 --> 00:27:52,240
objective c in your daily work and that

00:27:50,320 --> 00:27:53,440
is probably the main reason why people

00:27:52,240 --> 00:27:55,440
dislike it

00:27:53,440 --> 00:27:56,640
because as a language it probably has

00:27:55,440 --> 00:27:59,279
some uh

00:27:56,640 --> 00:28:00,480
okay and decent features there are

00:27:59,279 --> 00:28:04,480
arguably worse

00:28:00,480 --> 00:28:06,080
languages but it has the problem that

00:28:04,480 --> 00:28:08,000
most of the people who are using it use

00:28:06,080 --> 00:28:10,960
it for very specific niche case of

00:28:08,000 --> 00:28:12,640
a case of porting things to mac os while

00:28:10,960 --> 00:28:15,600
swift feels a lot like like

00:28:12,640 --> 00:28:17,279
somehow it it is like python but better

00:28:15,600 --> 00:28:20,399
types and everything

00:28:17,279 --> 00:28:22,799
uh yeah swift is just a very nice

00:28:20,399 --> 00:28:25,440
language to work in computer objectives

00:28:22,799 --> 00:28:27,440
yeah in the case of vlc like the code

00:28:25,440 --> 00:28:28,960
base is written in the vlc's mac os is

00:28:27,440 --> 00:28:31,360
written in object pc

00:28:28,960 --> 00:28:33,279
and it's like nearly impossible and it

00:28:31,360 --> 00:28:35,039
takes lots of manpower to convert to

00:28:33,279 --> 00:28:36,240
shift or any modern language because the

00:28:35,039 --> 00:28:38,080
code base is

00:28:36,240 --> 00:28:39,440
quite huge that and there are only

00:28:38,080 --> 00:28:42,399
volunteers to do that

00:28:39,440 --> 00:28:45,520
so we are out of options only ways to

00:28:42,399 --> 00:28:45,520
suffer with the objective

00:28:45,919 --> 00:28:49,840
okay so it's i think it'll be better to

00:28:48,559 --> 00:28:53,760
not bash

00:28:49,840 --> 00:28:57,279
another language yeah so i think that

00:28:53,760 --> 00:28:59,520
yeah yeah

00:28:57,279 --> 00:29:00,559
so moving forward i think we have to

00:28:59,520 --> 00:29:02,799
discuss

00:29:00,559 --> 00:29:04,159
huh i mean i was asking what's the next

00:29:02,799 --> 00:29:06,159
thing in our agenda

00:29:04,159 --> 00:29:08,000
yeah yeah yeah we have to talk about how

00:29:06,159 --> 00:29:10,399
rust can contribute to debian

00:29:08,000 --> 00:29:12,480
so i think uh uh one thing that we

00:29:10,399 --> 00:29:15,679
should discuss before we go any forward

00:29:12,480 --> 00:29:18,000
is linux and how like rust is

00:29:15,679 --> 00:29:19,600
going to start becoming a part of the

00:29:18,000 --> 00:29:22,640
linux code base hopefully

00:29:19,600 --> 00:29:24,559
hopefully yeah so what are your takes on

00:29:22,640 --> 00:29:27,919
that

00:29:24,559 --> 00:29:30,240
yeah uh i was uh uh

00:29:27,919 --> 00:29:31,120
at the beginning a few years ago looking

00:29:30,240 --> 00:29:33,279
at

00:29:31,120 --> 00:29:35,440
uh the kernel module development and

00:29:33,279 --> 00:29:37,360
rust uh the complete scene of the kernel

00:29:35,440 --> 00:29:40,640
module development in russ because

00:29:37,360 --> 00:29:42,159
i didn't want to do anything in cnc plus

00:29:40,640 --> 00:29:45,120
plus because yeah i

00:29:42,159 --> 00:29:46,880
i was just not sure how much how many

00:29:45,120 --> 00:29:50,399
mistakes will i make

00:29:46,880 --> 00:29:52,399
so overall i was going for much of a

00:29:50,399 --> 00:29:54,559
safe approach and trying to find if i

00:29:52,399 --> 00:29:56,960
can use just for that

00:29:54,559 --> 00:29:58,880
in the process i have understood that

00:29:56,960 --> 00:30:00,640
there are people pushing for it and

00:29:58,880 --> 00:30:03,760
there is work happening in it

00:30:00,640 --> 00:30:07,039
uh and even the maintainers have agreed

00:30:03,760 --> 00:30:10,240
to uh having rust

00:30:07,039 --> 00:30:12,880
part of uh say

00:30:10,240 --> 00:30:14,000
linux but the main problem currently is

00:30:12,880 --> 00:30:18,159
with the fact that

00:30:14,000 --> 00:30:22,000
uh russ c only supports llvm

00:30:18,159 --> 00:30:24,480
uh which makes uh which basically makes

00:30:22,000 --> 00:30:25,039
a pretty big hole in security if you are

00:30:24,480 --> 00:30:28,320
using

00:30:25,039 --> 00:30:29,440
compiling kernel with gcc and rust with

00:30:28,320 --> 00:30:31,279
lbm

00:30:29,440 --> 00:30:33,039
though the kernel is now compatible with

00:30:31,279 --> 00:30:37,440
lil uh or clang

00:30:33,039 --> 00:30:40,799
uh i suppose so it is possible to do it

00:30:37,440 --> 00:30:42,640
uh but uh there's an ongoing effort

00:30:40,799 --> 00:30:44,080
the like it has started picking up

00:30:42,640 --> 00:30:47,279
stream late last year

00:30:44,080 --> 00:30:49,679
like in late 2020

00:30:47,279 --> 00:30:51,120
i do not want to take the name of 2020

00:30:49,679 --> 00:30:53,919
over again though

00:30:51,120 --> 00:30:57,760
so yeah let's forget that it ever

00:30:53,919 --> 00:30:57,760
existed everything started in 2021

00:30:58,880 --> 00:31:04,880
yeah so that's that's coming up yeah

00:31:02,640 --> 00:31:06,799
we can change the compeller quite

00:31:04,880 --> 00:31:08,000
efficiently like not so complicated to

00:31:06,799 --> 00:31:08,880
change the compiler and build the

00:31:08,000 --> 00:31:10,960
program

00:31:08,880 --> 00:31:12,159
i tried to do with various compilers so

00:31:10,960 --> 00:31:15,840
it's fine i think but

00:31:12,159 --> 00:31:15,840
yeah we need to explicitly mention

00:31:17,760 --> 00:31:22,240
at the moment yeah if i had to say that

00:31:20,320 --> 00:31:23,200
russ is probably not mature enough to be

00:31:22,240 --> 00:31:26,559
part of

00:31:23,200 --> 00:31:28,480
linux at this very exact moment

00:31:26,559 --> 00:31:30,000
hopefully things will be extremely

00:31:28,480 --> 00:31:32,720
different after six months or

00:31:30,000 --> 00:31:34,080
one year uh when people have actual

00:31:32,720 --> 00:31:36,399
working code inside of

00:31:34,080 --> 00:31:37,919
uh the linux kernel at least the

00:31:36,399 --> 00:31:38,640
mainline kernel that is what i'm trying

00:31:37,919 --> 00:31:41,760
to say like

00:31:38,640 --> 00:31:43,440
probably not within a year but soon yeah

00:31:41,760 --> 00:31:44,880
not quite sure what timeline is going to

00:31:43,440 --> 00:31:47,200
be there

00:31:44,880 --> 00:31:49,120
so in the case of plc i can explain that

00:31:47,200 --> 00:31:51,600
very quickly how we are handling the

00:31:49,120 --> 00:31:53,760
rest program inside the vlc media player

00:31:51,600 --> 00:31:54,720
so what we do is that we write the rs

00:31:53,760 --> 00:31:56,480
code

00:31:54,720 --> 00:31:58,799
and after that what we have is that we

00:31:56,480 --> 00:32:01,919
generate the ce headers for that

00:31:58,799 --> 00:32:04,399
and with the help of c headers he'll be

00:32:01,919 --> 00:32:06,480
calling the c rush like the rest will be

00:32:04,399 --> 00:32:08,720
generated and the c headers will be made

00:32:06,480 --> 00:32:10,399
and based on the c header we are just

00:32:08,720 --> 00:32:12,720
having that in the c code

00:32:10,399 --> 00:32:13,440
so we in short we are having the rest

00:32:12,720 --> 00:32:16,320
code

00:32:13,440 --> 00:32:18,240
as such but it will be converted to c

00:32:16,320 --> 00:32:21,600
using the c binder

00:32:18,240 --> 00:32:22,240
and then we are having the api calls

00:32:21,600 --> 00:32:24,960
back

00:32:22,240 --> 00:32:25,279
for the and like it will be using the

00:32:24,960 --> 00:32:28,480
rest

00:32:25,279 --> 00:32:31,039
things for com having the operations

00:32:28,480 --> 00:32:32,559
while it will be done in the cnu on my

00:32:31,039 --> 00:32:35,919
right

00:32:32,559 --> 00:32:38,240
so that's how yeah so yeah

00:32:35,919 --> 00:32:39,120
one of my experiences with rust probably

00:32:38,240 --> 00:32:40,960
would be

00:32:39,120 --> 00:32:42,480
with the cabi that is the application

00:32:40,960 --> 00:32:44,159
binary interfaces

00:32:42,480 --> 00:32:45,519
yeah so i was working with this

00:32:44,159 --> 00:32:48,640
organization known as

00:32:45,519 --> 00:32:51,919
ti kv and yeah i have to say that

00:32:48,640 --> 00:32:53,279
a lot of it is it's still in the works

00:32:51,919 --> 00:32:55,039
and

00:32:53,279 --> 00:32:56,720
even if you are writing like cpp

00:32:55,039 --> 00:32:58,720
libraries that's this c

00:32:56,720 --> 00:32:59,840
plus i forget the name i think it's c

00:32:58,720 --> 00:33:01,279
plus plus rs

00:32:59,840 --> 00:33:04,640
yes something like that so that is also

00:33:01,279 --> 00:33:07,919
coming up hopefully it will help a lot

00:33:04,640 --> 00:33:07,919
what's your take on that surname

00:33:09,360 --> 00:33:13,760
uh uh i couldn't hear it properly what

00:33:12,000 --> 00:33:17,360
were you trying to say

00:33:13,760 --> 00:33:21,039
the c plus plus abi kind of thing right

00:33:17,360 --> 00:33:24,080
c plus plus yeah the the rust and c

00:33:21,039 --> 00:33:25,039
plus plus uh intercompatibilities the

00:33:24,080 --> 00:33:27,279
scene is

00:33:25,039 --> 00:33:29,360
fine i mean i would like to say it's

00:33:27,279 --> 00:33:31,200
quite decent when you're using clang

00:33:29,360 --> 00:33:33,279
and that's the only thing that i have

00:33:31,200 --> 00:33:37,360
experience with i've never tried

00:33:33,279 --> 00:33:39,919
uh to have a cross compiling

00:33:37,360 --> 00:33:40,559
something like with gcc and all

00:33:39,919 --> 00:33:44,000
everything

00:33:40,559 --> 00:33:47,760
different in the mix but it can it is

00:33:44,000 --> 00:33:51,279
quite well optimized like it you can

00:33:47,760 --> 00:33:54,880
have lto across the source code

00:33:51,279 --> 00:33:57,919
like rusco code can have lto across

00:33:54,880 --> 00:33:58,720
uh the binaries even with when you're

00:33:57,919 --> 00:34:00,559
using

00:33:58,720 --> 00:34:02,640
uh the across the binary even when

00:34:00,559 --> 00:34:04,480
you're using c plus plus and c plus plus

00:34:02,640 --> 00:34:06,559
can have lto and other

00:34:04,480 --> 00:34:08,240
optimizations even when you're using

00:34:06,559 --> 00:34:11,520
rust code within it

00:34:08,240 --> 00:34:11,520
and uh

00:34:12,399 --> 00:34:16,079
i do not have a lot of experience with

00:34:14,320 --> 00:34:18,639
using both of them together

00:34:16,079 --> 00:34:20,240
uh in a format where they are both

00:34:18,639 --> 00:34:22,879
directly or statically linked

00:34:20,240 --> 00:34:23,919
so uh you guys might have more

00:34:22,879 --> 00:34:26,480
experience for that

00:34:23,919 --> 00:34:27,119
i've mostly done it with dynamic linking

00:34:26,480 --> 00:34:30,159
because

00:34:27,119 --> 00:34:33,359
uh rust has extremely good cffi

00:34:30,159 --> 00:34:34,560
which has allowed us even in godot we

00:34:33,359 --> 00:34:36,879
have a

00:34:34,560 --> 00:34:37,839
gd native layer which works quite well

00:34:36,879 --> 00:34:41,599
with the

00:34:37,839 --> 00:34:43,679
we have a rust bindings for it

00:34:41,599 --> 00:34:45,440
which allows us to dynamic link rust

00:34:43,679 --> 00:34:48,560
code and

00:34:45,440 --> 00:34:51,040
which we can use to write the

00:34:48,560 --> 00:34:51,679
entire games in rust language rather

00:34:51,040 --> 00:34:54,720
than

00:34:51,679 --> 00:34:58,240
c sharp or gd script which is

00:34:54,720 --> 00:35:00,560
the usual for a godot so it is also

00:34:58,240 --> 00:35:02,160
occasionally maintained so you anyone

00:35:00,560 --> 00:35:07,200
can try that

00:35:02,160 --> 00:35:07,200
a lot of videos about it as well so

00:35:07,520 --> 00:35:14,640
yeah uh so i think the rust ecosystem

00:35:11,119 --> 00:35:17,200
it's mostly about like the acceptance of

00:35:14,640 --> 00:35:20,160
the concept of an ffi that's the foreign

00:35:17,200 --> 00:35:22,160
uh function i forget the name it's

00:35:20,160 --> 00:35:23,920
foreign function interface yeah

00:35:22,160 --> 00:35:26,000
so that's something that's growing and i

00:35:23,920 --> 00:35:26,960
think it's going to be a lot helpful

00:35:26,000 --> 00:35:29,599
when you're like pi

00:35:26,960 --> 00:35:30,000
oxide is there which interfaces with the

00:35:29,599 --> 00:35:32,800
python

00:35:30,000 --> 00:35:33,200
interfaces uh that's also like c plus

00:35:32,800 --> 00:35:36,480
plus

00:35:33,200 --> 00:35:38,320
uh interfaces c ffi yeah so

00:35:36,480 --> 00:35:40,000
that's something that's growing and it's

00:35:38,320 --> 00:35:42,240
going to be a lot helpful

00:35:40,000 --> 00:35:44,079
uh and i think one of the main reasons

00:35:42,240 --> 00:35:46,160
why these have like caught on is because

00:35:44,079 --> 00:35:47,119
of the documentation so otherwise it

00:35:46,160 --> 00:35:49,920
won't uh

00:35:47,119 --> 00:35:51,599
it would have been a hell lot of work to

00:35:49,920 --> 00:35:54,560
work with an ffi i think

00:35:51,599 --> 00:35:56,640
from my experience yeah uh moving on i

00:35:54,560 --> 00:36:00,240
think we have to discuss about uh

00:35:56,640 --> 00:36:03,200
debian and debian as a whole and

00:36:00,240 --> 00:36:03,680
the rest packaging so any experiences to

00:36:03,200 --> 00:36:05,760
share

00:36:03,680 --> 00:36:08,079
in that space because i am not packaged

00:36:05,760 --> 00:36:10,839
debian package myself till date

00:36:08,079 --> 00:36:13,839
so that's something that's that only

00:36:10,839 --> 00:36:13,839
packages

00:36:16,640 --> 00:36:21,200
so what happened is that i so when i

00:36:19,359 --> 00:36:23,040
realized that debian packaging has quite

00:36:21,200 --> 00:36:25,599
a lot of rules

00:36:23,040 --> 00:36:27,440
like we need to have the license headers

00:36:25,599 --> 00:36:28,240
for almost all files and the license

00:36:27,440 --> 00:36:30,720
declaration

00:36:28,240 --> 00:36:32,400
inside the olds also to mention for the

00:36:30,720 --> 00:36:33,920
sub modules also we need to make sure

00:36:32,400 --> 00:36:34,720
there's license headers and things like

00:36:33,920 --> 00:36:37,599
that

00:36:34,720 --> 00:36:38,800
so at some we had something like some

00:36:37,599 --> 00:36:42,320
modules within their

00:36:38,800 --> 00:36:44,400
project itself which was having that but

00:36:42,320 --> 00:36:45,359
we it was maintained by someone else so

00:36:44,400 --> 00:36:47,839
we had to

00:36:45,359 --> 00:36:49,440
have a fork of it and make a our own

00:36:47,839 --> 00:36:51,280
version to make sure it

00:36:49,440 --> 00:36:52,640
fails i mean it falls to the

00:36:51,280 --> 00:36:56,000
compatibility suit and

00:36:52,640 --> 00:36:56,320
passes so it was quite pain to make sure

00:36:56,000 --> 00:37:01,200
that

00:36:56,320 --> 00:37:01,200
all was having the headers intact

00:37:03,040 --> 00:37:06,160
yeah that's one big pain that we have to

00:37:05,520 --> 00:37:08,800
like

00:37:06,160 --> 00:37:10,800
work on uh yeah i haven't done much with

00:37:08,800 --> 00:37:12,400
the debian packaging as such i was just

00:37:10,800 --> 00:37:14,320
verifying a

00:37:12,400 --> 00:37:15,599
preview i was reviewing the code that's

00:37:14,320 --> 00:37:17,359
it maybe

00:37:15,599 --> 00:37:19,280
i would be having a lot more experience

00:37:17,359 --> 00:37:22,240
i believe yeah

00:37:19,280 --> 00:37:24,400
uh actually any to be honest i am newer

00:37:22,240 --> 00:37:27,119
to debian than i am to rest so

00:37:24,400 --> 00:37:29,359
uh i just looked at the debian wiki for

00:37:27,119 --> 00:37:34,320
rest packaging and there seems to be

00:37:29,359 --> 00:37:37,760
a team who are doing it already uh like

00:37:34,320 --> 00:37:38,240
very well coordinated and they seems to

00:37:37,760 --> 00:37:41,359
have

00:37:38,240 --> 00:37:42,400
a easy way to do all crates in a single

00:37:41,359 --> 00:37:44,480
git repo so

00:37:42,400 --> 00:37:46,079
all right okay it's probably going to be

00:37:44,480 --> 00:37:49,119
much more easier than

00:37:46,079 --> 00:37:51,839
uh javascript and other

00:37:49,119 --> 00:37:53,280
other languages where i go for example

00:37:51,839 --> 00:37:54,960
where it is very complicated different

00:37:53,280 --> 00:37:57,359
different tool chains and all of that

00:37:54,960 --> 00:37:58,240
okay so i just put that link in the chat

00:37:57,359 --> 00:38:00,880
maybe

00:37:58,240 --> 00:38:01,440
yeah i think it's like like two years

00:38:00,880 --> 00:38:04,560
back

00:38:01,440 --> 00:38:06,160
my story oh yeah that's

00:38:04,560 --> 00:38:08,480
yeah most of our experiences are from

00:38:06,160 --> 00:38:10,079
the past so that's it yeah so i think it

00:38:08,480 --> 00:38:13,359
will be a lot more matured and

00:38:10,079 --> 00:38:15,040
grown enough at the moment yeah

00:38:13,359 --> 00:38:16,340
and 2020 helped a lot even though

00:38:15,040 --> 00:38:17,680
surname says it was bad

00:38:16,340 --> 00:38:20,560
[Music]

00:38:17,680 --> 00:38:22,560
yeah that's that more people were having

00:38:20,560 --> 00:38:25,760
a lot more free time probably

00:38:22,560 --> 00:38:29,359
in some days the start yeah so

00:38:25,760 --> 00:38:31,359
yeah now moving on like

00:38:29,359 --> 00:38:34,160
researched being of the mozilla got laid

00:38:31,359 --> 00:38:36,480
off and the project was stopped funding

00:38:34,160 --> 00:38:38,320
so we lost all of our right full-time

00:38:36,480 --> 00:38:40,880
employees who was doing the

00:38:38,320 --> 00:38:43,760
gravy development got lost their jobs

00:38:40,880 --> 00:38:45,280
and they are still hunting for some jobs

00:38:43,760 --> 00:38:47,040
that's true that's true that's that's

00:38:45,280 --> 00:38:49,599
something bad that happened but

00:38:47,040 --> 00:38:51,599
i think like the rust ecosystem as a

00:38:49,599 --> 00:38:54,160
whole moved away from being yeah

00:38:51,599 --> 00:38:55,200
so yeah yeah restaurant rust is now

00:38:54,160 --> 00:38:59,520
looking to establish

00:38:55,200 --> 00:39:02,079
a rust foundation yeah foundation for

00:38:59,520 --> 00:39:03,520
for managing like yeah it did have a

00:39:02,079 --> 00:39:06,320
short-term impact i would say

00:39:03,520 --> 00:39:07,040
but uh and long-term it is better and

00:39:06,320 --> 00:39:08,960
probably

00:39:07,040 --> 00:39:10,800
nothing will happen to rust in the long

00:39:08,960 --> 00:39:11,760
term because now even companies like

00:39:10,800 --> 00:39:14,640
microsoft

00:39:11,760 --> 00:39:16,079
and facebook and google are involved

00:39:14,640 --> 00:39:19,359
with trust so

00:39:16,079 --> 00:39:19,359
like it there's no

00:39:19,760 --> 00:39:23,200
like it's not going away

00:39:24,400 --> 00:39:28,000
yeah that's true it's not going away and

00:39:26,800 --> 00:39:29,520
it's probably going to get

00:39:28,000 --> 00:39:30,640
stronger but at the same time you have

00:39:29,520 --> 00:39:32,000
to make sure that it's not going to

00:39:30,640 --> 00:39:33,760
become another

00:39:32,000 --> 00:39:35,599
of those corporate languages like cc

00:39:33,760 --> 00:39:38,240
plus plus or something yeah no but

00:39:35,599 --> 00:39:38,960
uh all the languages are corporate

00:39:38,240 --> 00:39:40,480
language

00:39:38,960 --> 00:39:42,560
there is no way for a language to

00:39:40,480 --> 00:39:45,280
survive without corporate support like

00:39:42,560 --> 00:39:46,400
developing a language is not cheap yeah

00:39:45,280 --> 00:39:48,960
that's right

00:39:46,400 --> 00:39:50,480
it's not like uh we all can say like

00:39:48,960 --> 00:39:51,920
donate 10 bucks and say

00:39:50,480 --> 00:39:54,320
this language is going to become the

00:39:51,920 --> 00:39:57,040
next billion dollar language

00:39:54,320 --> 00:39:58,320
yeah that is something that's happening

00:39:57,040 --> 00:40:01,119
right now i think with uh

00:39:58,320 --> 00:40:03,119
nim and uh all those other derivative

00:40:01,119 --> 00:40:05,920
languages that are popping up nowadays

00:40:03,119 --> 00:40:06,480
yeah there's a nim and ziggy as well

00:40:05,920 --> 00:40:08,800
those are

00:40:06,480 --> 00:40:10,160
fun languages to work with nem is more

00:40:08,800 --> 00:40:13,520
along the side of like

00:40:10,160 --> 00:40:16,720
it is like more towards

00:40:13,520 --> 00:40:17,520
uh transpilation to cnc plus plus and

00:40:16,720 --> 00:40:20,560
has

00:40:17,520 --> 00:40:21,920
sort of some run time for scheduling and

00:40:20,560 --> 00:40:25,040
garbage collection

00:40:21,920 --> 00:40:28,079
and while zig is completely like

00:40:25,040 --> 00:40:31,920
a cnc plus plus like rust and

00:40:28,079 --> 00:40:33,920
lacks any kind of run time yeah

00:40:31,920 --> 00:40:34,960
so that's that uh i think we have very

00:40:33,920 --> 00:40:37,680
little time left

00:40:34,960 --> 00:40:38,400
so what we'll do now is we'll go into

00:40:37,680 --> 00:40:41,040
some

00:40:38,400 --> 00:40:42,240
project uh like let's mention our

00:40:41,040 --> 00:40:44,480
projects as a whole

00:40:42,240 --> 00:40:45,280
so uh would you like to start with

00:40:44,480 --> 00:40:47,119
attack share

00:40:45,280 --> 00:40:49,200
would you like to start with your

00:40:47,119 --> 00:40:52,480
introduction of your project

00:40:49,200 --> 00:40:54,319
okay i i don't have a active project as

00:40:52,480 --> 00:40:56,240
such i wanted to learn

00:40:54,319 --> 00:40:57,760
fresh and at the same time mozilla

00:40:56,240 --> 00:40:59,760
kicked me kicked my

00:40:57,760 --> 00:41:01,280
extension out out of their add-ons

00:40:59,760 --> 00:41:04,079
website so

00:41:01,280 --> 00:41:05,040
i learned rest as well as built a

00:41:04,079 --> 00:41:07,680
project in rest

00:41:05,040 --> 00:41:10,640
and uh looking back at it it was okay

00:41:07,680 --> 00:41:13,040
reasonable i had unit testing and uh

00:41:10,640 --> 00:41:15,200
there were no bugs i mean no no big bugs

00:41:13,040 --> 00:41:17,920
as such and then i used a lot of

00:41:15,200 --> 00:41:20,000
good libraries and all of that so the

00:41:17,920 --> 00:41:23,920
the process of how i went through

00:41:20,000 --> 00:41:26,079
learning and what all the revelations

00:41:23,920 --> 00:41:27,599
i had while fighting with the boro

00:41:26,079 --> 00:41:29,920
checker

00:41:27,599 --> 00:41:32,319
that i have documented in a blog post

00:41:29,920 --> 00:41:34,640
which i'll share in the channel

00:41:32,319 --> 00:41:36,480
i think people who are using rush now

00:41:34,640 --> 00:41:39,839
can talk about their

00:41:36,480 --> 00:41:43,119
projects yeah so my experience was a

00:41:39,839 --> 00:41:46,960
lot more recent probably uh i worked on

00:41:43,119 --> 00:41:50,079
a vassam application it's qrs

00:41:46,960 --> 00:41:53,280
so it's also on my website i'll just put

00:41:50,079 --> 00:41:54,480
it down there anyways so it's uh it was

00:41:53,280 --> 00:41:57,599
how i learned

00:41:54,480 --> 00:41:59,200
what vasm as a whole is and yeah i think

00:41:57,599 --> 00:42:00,079
there's a lot of work to be done with

00:41:59,200 --> 00:42:01,760
wasm

00:42:00,079 --> 00:42:03,119
probably one thing that i have to say

00:42:01,760 --> 00:42:05,599
about the vassam

00:42:03,119 --> 00:42:07,119
rust ecosystem is that it still does not

00:42:05,599 --> 00:42:09,440
support many of the

00:42:07,119 --> 00:42:11,520
uh promised features that wazi is

00:42:09,440 --> 00:42:14,400
supposed to feature so that's

00:42:11,520 --> 00:42:16,480
something that should be working on but

00:42:14,400 --> 00:42:18,560
otherwise yeah i'll just post my

00:42:16,480 --> 00:42:20,079
uh experiences also in a blog post

00:42:18,560 --> 00:42:22,560
probably that will be faster

00:42:20,079 --> 00:42:24,400
for all of us to understand yeah moving

00:42:22,560 --> 00:42:25,680
on yeah about the

00:42:24,400 --> 00:42:28,160
one thing i need to add is that it

00:42:25,680 --> 00:42:30,240
breaks a lot

00:42:28,160 --> 00:42:31,200
it breaks the ca and it breaks the build

00:42:30,240 --> 00:42:33,680
system a lot

00:42:31,200 --> 00:42:35,599
that's the one painting about the vasam

00:42:33,680 --> 00:42:38,880
so we had the js api

00:42:35,599 --> 00:42:40,560
and today like 20 minutes ago we just

00:42:38,880 --> 00:42:43,520
bought it out of the tree due to the

00:42:40,560 --> 00:42:45,920
breakage of the cei and these things

00:42:43,520 --> 00:42:47,839
i just completed so it's the main thing

00:42:45,920 --> 00:42:49,839
with the awesome api is that it breaks a

00:42:47,839 --> 00:42:51,920
lot of the ci and all those stuff

00:42:49,839 --> 00:42:54,560
so it's quite painful to maintain an

00:42:51,920 --> 00:42:57,119
awesome thing within a production thing

00:42:54,560 --> 00:42:58,240
so that's one thing which is the main

00:42:57,119 --> 00:43:00,960
issue with the awesome

00:42:58,240 --> 00:43:03,599
i personally felt it requires some time

00:43:00,960 --> 00:43:06,000
to make it more mature for usage

00:43:03,599 --> 00:43:07,760
yeah uh so yeah awesome is currently

00:43:06,000 --> 00:43:09,920
most of the rfcs are currently

00:43:07,760 --> 00:43:11,359
work in progress and most of them are

00:43:09,920 --> 00:43:13,520
only implemented for

00:43:11,359 --> 00:43:14,480
the desktop and the system level

00:43:13,520 --> 00:43:17,760
libraries of

00:43:14,480 --> 00:43:19,839
awesome like the wazima and stuff

00:43:17,760 --> 00:43:21,280
rather than having an implementation in

00:43:19,839 --> 00:43:23,680
their browsers the browser

00:43:21,280 --> 00:43:26,160
implementations are much more stable

00:43:23,680 --> 00:43:27,359
yeah that's true that's that uh i'll

00:43:26,160 --> 00:43:29,920
share it in the

00:43:27,359 --> 00:43:31,040
links and yeah uh what about your

00:43:29,920 --> 00:43:34,319
projects uh

00:43:31,040 --> 00:43:38,880
probably we'll start with swarner uh

00:43:34,319 --> 00:43:41,520
only like 40 seconds more yeah so yeah

00:43:38,880 --> 00:43:42,079
i i do not have a serious project in

00:43:41,520 --> 00:43:44,880
rust

00:43:42,079 --> 00:43:47,119
personal project but we have uh in gurat

00:43:44,880 --> 00:43:49,359
we have a rust bindings that we maintain

00:43:47,119 --> 00:43:51,040
and if you like to check them out uh

00:43:49,359 --> 00:43:53,359
help with maintenance you can

00:43:51,040 --> 00:43:55,359
go there and there is there are a couple

00:43:53,359 --> 00:43:56,160
of game engines in rust amethyst and

00:43:55,359 --> 00:43:59,119
bevy

00:43:56,160 --> 00:44:00,480
that i tend to follow they are also cool

00:43:59,119 --> 00:44:04,480
and there is a ruffle

00:44:00,480 --> 00:44:07,839
project which is about a flash emulator

00:44:04,480 --> 00:44:09,040
for web which allows emulation of flash

00:44:07,839 --> 00:44:12,160
in

00:44:09,040 --> 00:44:14,240
uh rust wire wasm so that's cool as well

00:44:12,160 --> 00:44:15,599
so go ahead and check those things out

00:44:14,240 --> 00:44:18,720
and hopefully

00:44:15,599 --> 00:44:20,720
hope everybody has a good day yeah

00:44:18,720 --> 00:44:22,400
uh we i think two three minutes extra

00:44:20,720 --> 00:44:26,079
will take up anyway so

00:44:22,400 --> 00:44:29,280
yeah uh mind freeze

00:44:26,079 --> 00:44:32,480
like i mentioned i was bashing about the

00:44:29,280 --> 00:44:32,960
awesome so apart from that how to say do

00:44:32,480 --> 00:44:36,800
star

00:44:32,960 --> 00:44:38,720
projects you just need some more stars

00:44:36,800 --> 00:44:40,079
that's true the ecosystem requires a lot

00:44:38,720 --> 00:44:42,079
more love

00:44:40,079 --> 00:44:44,240
i mean getting a lot more love compared

00:44:42,079 --> 00:44:47,440
to other projects at least

00:44:44,240 --> 00:44:48,319
yeah that's and like there's a lot more

00:44:47,440 --> 00:44:50,079
interest

00:44:48,319 --> 00:44:51,920
that's growing up in the rush community

00:44:50,079 --> 00:44:54,400
yeah the only thing is that indus won't

00:44:51,920 --> 00:44:56,960
be long lived that's the only thing

00:44:54,400 --> 00:44:58,640
it will be short-lived like once they

00:44:56,960 --> 00:45:00,079
start their rest is fine they will start

00:44:58,640 --> 00:45:02,880
contributing then realize

00:45:00,079 --> 00:45:03,359
it's quite complicated i mean like he

00:45:02,880 --> 00:45:06,319
you

00:45:03,359 --> 00:45:06,800
yourself tried to contribute some parts

00:45:06,319 --> 00:45:08,480
and you

00:45:06,800 --> 00:45:11,599
and stop that right so it's a

00:45:08,480 --> 00:45:11,599
complicated story

00:45:11,680 --> 00:45:16,800
it's it gets complicated as a whole uh

00:45:14,800 --> 00:45:18,960
yeah i think with that uh

00:45:16,800 --> 00:45:20,160
before we end the discussion and the

00:45:18,960 --> 00:45:21,599
bureau of panelia

00:45:20,160 --> 00:45:23,760
i think we need to like mention

00:45:21,599 --> 00:45:24,400
something that's coming up so next week

00:45:23,760 --> 00:45:27,599
we uh

00:45:24,400 --> 00:45:29,040
not us sun chain and some people from

00:45:27,599 --> 00:45:31,680
bangalore rust are

00:45:29,040 --> 00:45:32,240
organizing a meet up so hopefully uh

00:45:31,680 --> 00:45:35,359
we'll

00:45:32,240 --> 00:45:35,760
meet up again during that yeah so it's

00:45:35,359 --> 00:45:38,880
uh

00:45:35,760 --> 00:45:40,319
it's up on meetup.org i think uh yeah

00:45:38,880 --> 00:45:42,720
i don't know i'll probably share the

00:45:40,319 --> 00:45:45,040
link in the ether pad later on

00:45:42,720 --> 00:45:46,880
so with that any other closing

00:45:45,040 --> 00:45:49,359
statements yes

00:45:46,880 --> 00:45:50,240
yeah thanks for the mini deathcon team

00:45:49,359 --> 00:45:52,720
for having this

00:45:50,240 --> 00:45:54,240
session apart from that i would like to

00:45:52,720 --> 00:45:55,359
also thank the other people who

00:45:54,240 --> 00:45:57,359
organized the event

00:45:55,359 --> 00:45:58,560
and it was i'm not sure who all are

00:45:57,359 --> 00:46:00,640
watching it live

00:45:58,560 --> 00:46:01,920
so i'm not sure how apart from that it

00:46:00,640 --> 00:46:04,079
was a nice event

00:46:01,920 --> 00:46:07,520
and i hope this might go online in

00:46:04,079 --> 00:46:07,520
youtube or some other places

00:46:07,680 --> 00:46:11,200
not sure yeah yeah thanks

00:46:13,200 --> 00:46:21,839

YouTube URL: https://www.youtube.com/watch?v=AxGmaDVz208


