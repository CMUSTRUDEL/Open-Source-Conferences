Title: autoforwardportergit, automating the merging of downstream changes
Publication date: 2019-06-07
Playlist: MiniDebConf Marseille 2019
Description: 
	by Peter Michael Green

At: Mini-DebConf Marseille 2019
https://minidebconf-mrs.debian.net/

I co-founded the Raspbian project, to provide an armv6 hard-float variant of Debian, to do this local changes were needed in a number of packages and manually bringing these forward to the new versions from Debian rapidly became a drag.
Therefore I developed the autoforwardporter tool to automate this process, initially it was based around debdiff and patch, but after some discussions with Ian Jackson I decided it was a good idea to rebuild it around dgit. I later took steps to generalise the tool so it would be useable by projects other than Raspbian.

Room: main
Scheduled start: 2019-05-25 10:40:00
Captions: 
	00:00:05,640 --> 00:00:12,670
hello i'm peter green co-founder of the

00:00:10,719 --> 00:00:14,889
raspbian project and i'm going to talk

00:00:12,670 --> 00:00:18,279
about a bit of infrastructure software

00:00:14,889 --> 00:00:21,009
we wrote to serve one of our needs that

00:00:18,279 --> 00:00:23,619
may be useful to other down streams it's

00:00:21,009 --> 00:00:27,309
called auto forward Porter get its job

00:00:23,619 --> 00:00:30,820
is to automate the really tedious job of

00:00:27,309 --> 00:00:37,740
keeping your slightly modified packages

00:00:30,820 --> 00:00:40,740
up to date with new stuff from Debian so

00:00:37,740 --> 00:00:44,680
ok it's often necessary to modify

00:00:40,740 --> 00:00:49,300
packages that we get from Debian for

00:00:44,680 --> 00:00:51,730
various reasons changing compiler flags

00:00:49,300 --> 00:00:54,370
disabling test Suites and that sort of

00:00:51,730 --> 00:00:56,500
thing occasionally actual code changes

00:00:54,370 --> 00:01:00,550
but mostly it's just changes to make

00:00:56,500 --> 00:01:07,659
files and things debian update stuff

00:01:00,550 --> 00:01:09,729
quite a bit and merging that manually it

00:01:07,659 --> 00:01:11,530
gets tedious about after about the fifth

00:01:09,729 --> 00:01:17,590
or sixth time you've updated the same

00:01:11,530 --> 00:01:21,580
package so we we aim to automate this

00:01:17,590 --> 00:01:23,500
process we can't automate every single

00:01:21,580 --> 00:01:27,580
case but we can automate most of the

00:01:23,500 --> 00:01:30,280
routine ones so the first generation of

00:01:27,580 --> 00:01:34,150
the autiful Porter was written in 2015

00:01:30,280 --> 00:01:38,170
it was based on diff and patch had a lot

00:01:34,150 --> 00:01:40,240
of raspbian specific assumptions was

00:01:38,170 --> 00:01:45,100
difficult to extend it to some of the

00:01:40,240 --> 00:01:47,650
slightly more complicated cases because

00:01:45,100 --> 00:01:51,460
of the way patch kind of either succeeds

00:01:47,650 --> 00:01:53,140
or fails and when it fails you don't

00:01:51,460 --> 00:01:56,799
really have a good working point for the

00:01:53,140 --> 00:02:00,040
next bit of automation to pick up on and

00:01:56,799 --> 00:02:04,360
also patch tends to fail if if your

00:02:00,040 --> 00:02:08,590
changes be merged upstream it doesn't

00:02:04,360 --> 00:02:13,439
like that so we had some discussions

00:02:08,590 --> 00:02:13,439
with the in Jackson creator of D get I

00:02:13,620 --> 00:02:19,019
decided to re-engineer the system

00:02:19,270 --> 00:02:27,770
around egit and in 2017 I decided to try

00:02:26,300 --> 00:02:31,250
and make this more useful for other

00:02:27,770 --> 00:02:34,489
people moving the raspbian specific

00:02:31,250 --> 00:02:38,450
stuff out of the code itself adding to a

00:02:34,489 --> 00:02:40,040
config file and now I'm hoping to

00:02:38,450 --> 00:02:46,220
convince some other people to try it out

00:02:40,040 --> 00:02:49,820
and tell me what they think of it so

00:02:46,220 --> 00:02:52,580
some terminology that we use an upstream

00:02:49,820 --> 00:02:54,500
project here is a project that supplies

00:02:52,580 --> 00:02:58,130
their packing different packages that

00:02:54,500 --> 00:03:01,220
you modify so for us that's Debian for

00:02:58,130 --> 00:03:09,860
another do for another one it might be

00:03:01,220 --> 00:03:11,239
Ubuntu the downstream project is the

00:03:09,860 --> 00:03:15,140
project that's distribute and the

00:03:11,239 --> 00:03:17,810
packages you modify again that could be

00:03:15,140 --> 00:03:24,250
anything from a handful of packages you

00:03:17,810 --> 00:03:30,500
use personally to a major derivative and

00:03:24,250 --> 00:03:32,750
a version marker is a string within the

00:03:30,500 --> 00:03:35,510
version number normally at the end

00:03:32,750 --> 00:03:38,150
although not always for reasons of

00:03:35,510 --> 00:03:41,239
maintaining version ordering which is

00:03:38,150 --> 00:03:43,820
used to identify your downstream

00:03:41,239 --> 00:03:45,680
packages so generally it starts with a

00:03:43,820 --> 00:03:48,500
plus and followed by a number something

00:03:45,680 --> 00:03:52,310
like plus our PI is what we use in

00:03:48,500 --> 00:04:01,790
raspbian plus Ubuntu is what Ubuntu uses

00:03:52,310 --> 00:04:04,150
and so on now in order to work with

00:04:01,790 --> 00:04:06,470
stuff and get we got to get it into get

00:04:04,150 --> 00:04:08,870
we've got to get it into get with you

00:04:06,470 --> 00:04:15,350
with a history of a shape that makes

00:04:08,870 --> 00:04:17,750
sense for the merge so the first thing

00:04:15,350 --> 00:04:21,729
we do is we pull both the upstream and

00:04:17,750 --> 00:04:27,310
the downstream packages into a local

00:04:21,729 --> 00:04:30,860
repository we use rep retro for this and

00:04:27,310 --> 00:04:31,590
also for poor to get has some code to

00:04:30,860 --> 00:04:35,160
convert

00:04:31,590 --> 00:04:38,820
it package whitelist into a ret prep pro

00:04:35,160 --> 00:04:47,550
package whitelist so the retro can

00:04:38,820 --> 00:04:50,460
import very relevant packages once we've

00:04:47,550 --> 00:04:52,890
got them in that local repo that's when

00:04:50,460 --> 00:04:59,190
a tool I wrote called pool to get takes

00:04:52,890 --> 00:05:01,380
over I say big it's big it supports

00:04:59,190 --> 00:05:05,580
converting between debian sauce packages

00:05:01,380 --> 00:05:08,280
and get package and get commits but it

00:05:05,580 --> 00:05:16,260
can't it by itself build a sane history

00:05:08,280 --> 00:05:18,570
for this task Paul to get takes DSCs in

00:05:16,260 --> 00:05:21,420
a pull style structure ie what rep rep

00:05:18,570 --> 00:05:25,020
row has import something to get

00:05:21,420 --> 00:05:27,210
repositories building US history with

00:05:25,020 --> 00:05:30,780
structure about history for downstream

00:05:27,210 --> 00:05:33,450
packages than upstream packages for

00:05:30,780 --> 00:05:36,000
downs for downstream packages we insist

00:05:33,450 --> 00:05:41,580
on having the immediate parent version

00:05:36,000 --> 00:05:44,820
whereas for upstream packages we'll

00:05:41,580 --> 00:05:47,160
import history if we've got it but

00:05:44,820 --> 00:05:54,650
ultimately we'll skip versions all will

00:05:47,160 --> 00:06:01,140
import with an orphan history now

00:05:54,650 --> 00:06:03,870
there's an option that if if a package

00:06:01,140 --> 00:06:08,280
we need for our history is not in the

00:06:03,870 --> 00:06:14,400
pool we're importing from we'll go and

00:06:08,280 --> 00:06:17,850
get it from snapshot debian dot org this

00:06:14,400 --> 00:06:19,800
is quite important because when you're

00:06:17,850 --> 00:06:21,810
going to merge some your downstream

00:06:19,800 --> 00:06:23,550
version which is a bit out of date with

00:06:21,810 --> 00:06:25,670
your up new up-to-date version from

00:06:23,550 --> 00:06:29,070
debian you need that common ancestor

00:06:25,670 --> 00:06:34,740
version otherwise the merge won't go

00:06:29,070 --> 00:06:37,350
same lis so and especially when you

00:06:34,740 --> 00:06:39,900
first add a package to the whitelist you

00:06:37,350 --> 00:06:42,870
likely won't have that common ancestor

00:06:39,900 --> 00:06:45,180
version either in your poll or in your

00:06:42,870 --> 00:06:47,310
git repositories so

00:06:45,180 --> 00:06:50,610
pull to get we'll go and get it from

00:06:47,310 --> 00:07:02,070
snapshot Debian dot org import it and

00:06:50,610 --> 00:07:08,100
include it in the history so now we've

00:07:02,070 --> 00:07:13,380
got very stuffing get gets a pretty good

00:07:08,100 --> 00:07:15,169
merge tool so most of the files will

00:07:13,380 --> 00:07:19,710
usually merge okay

00:07:15,169 --> 00:07:23,900
but there are some problem files Debian

00:07:19,710 --> 00:07:28,639
slash change log will always conflict

00:07:23,900 --> 00:07:30,900
and we have a tool that handles that and

00:07:28,639 --> 00:07:33,150
basically groups all the downstream

00:07:30,900 --> 00:07:35,940
changes into a single change log entry

00:07:33,150 --> 00:07:38,370
that's on top you could use merge change

00:07:35,940 --> 00:07:41,070
logs instead that's mostly a matter of

00:07:38,370 --> 00:07:43,199
style more than anything in terms of

00:07:41,070 --> 00:07:47,240
what you want your diff from your

00:07:43,199 --> 00:07:47,240
downstream to upstream to look like

00:07:49,880 --> 00:07:59,419
Debian slash patches slash series that

00:07:53,789 --> 00:07:59,419
also fails quite often not always but

00:08:01,010 --> 00:08:06,380
basically for a merging point of view we

00:08:03,479 --> 00:08:09,419
treat that like a weekly ordered set

00:08:06,380 --> 00:08:13,130
we'd like to preserve order but we don't

00:08:09,419 --> 00:08:13,130
fail if we can't preserve order

00:08:16,250 --> 00:08:23,140
I spent quite a bit of effort writing a

00:08:20,030 --> 00:08:25,460
tool for merging Debian slash control

00:08:23,140 --> 00:08:27,830
because that was a place we were getting

00:08:25,460 --> 00:08:29,960
quite a few conflicts particularly

00:08:27,830 --> 00:08:31,550
things like if we were removing a

00:08:29,960 --> 00:08:34,479
feature from a package which we

00:08:31,550 --> 00:08:37,099
sometimes have to do we'd remove build

00:08:34,479 --> 00:08:38,840
dependencies but then Debian goes and

00:08:37,099 --> 00:08:44,260
bumps the version in those build

00:08:38,840 --> 00:08:53,630
dependencies we removed merge conflict

00:08:44,260 --> 00:08:56,440
so we automated that and symbols files

00:08:53,630 --> 00:08:59,810
are another big one for us

00:08:56,440 --> 00:09:04,990
you know symbols don't come out quite

00:08:59,810 --> 00:09:08,540
the same on all architectures and then

00:09:04,990 --> 00:09:10,670
Debian goes in rather than something say

00:09:08,540 --> 00:09:12,410
architecture not our miele they change

00:09:10,670 --> 00:09:25,790
it to architecture not our miele not

00:09:12,410 --> 00:09:27,860
risk lee 64 or something so that those

00:09:25,790 --> 00:09:31,010
fix ups and there's a few others I

00:09:27,860 --> 00:09:36,280
haven't mentioned get the vast majority

00:09:31,010 --> 00:09:39,890
of merges to succeed automatically but

00:09:36,280 --> 00:09:41,990
sometimes there are conflicts that we

00:09:39,890 --> 00:09:43,940
can't reasonably automate the solution

00:09:41,990 --> 00:09:47,690
of particularly conflicts in Debian

00:09:43,940 --> 00:09:49,370
slash roles tends to be a big one we

00:09:47,690 --> 00:09:52,250
don't want to lose all the work the

00:09:49,370 --> 00:09:53,960
automation did we want the manual work

00:09:52,250 --> 00:10:02,210
to be able to start where the automation

00:09:53,960 --> 00:10:05,030
left off so if the image fails we do

00:10:02,210 --> 00:10:07,130
something slightly ugly we take a list

00:10:05,030 --> 00:10:10,370
of files with conflicts in we put it at

00:10:07,130 --> 00:10:12,290
the top of Debian slash changelog which

00:10:10,370 --> 00:10:14,330
ensures that things can't be built from

00:10:12,290 --> 00:10:15,770
until someone fix until someone deletes

00:10:14,330 --> 00:10:17,630
it from Debian so let's change load

00:10:15,770 --> 00:10:19,970
because it makes it a format violation

00:10:17,630 --> 00:10:27,440
and then we push that to a special

00:10:19,970 --> 00:10:29,780
branch in a private git repository yeah

00:10:27,440 --> 00:10:30,080
so we add files with conflict markers in

00:10:29,780 --> 00:10:32,180
them too

00:10:30,080 --> 00:10:37,690
get commit which is dirty as heck but it

00:10:32,180 --> 00:10:42,500
works and then someone can pick that up

00:10:37,690 --> 00:10:47,380
fix things manually and then do a git

00:10:42,500 --> 00:10:47,380
commit - - amend so no one sees the mess

00:10:55,420 --> 00:11:01,910
okay so we've now got a merge that looks

00:10:58,910 --> 00:11:03,530
okay according to get and by the way for

00:11:01,910 --> 00:11:07,430
those who aren't familiar with diga diga

00:11:03,530 --> 00:11:09,140
does patch is applied get trays so

00:11:07,430 --> 00:11:16,100
upstream changes will also have been

00:11:09,140 --> 00:11:18,110
merged by this process but we've also

00:11:16,100 --> 00:11:20,240
got the quilt series which needs to be

00:11:18,110 --> 00:11:23,660
consistent with the tree as I say it's a

00:11:20,240 --> 00:11:26,810
patches applied tray and sometimes it's

00:11:23,660 --> 00:11:30,620
not there's a couple of reasons for this

00:11:26,810 --> 00:11:33,170
one is because of git merge can handle

00:11:30,620 --> 00:11:34,910
situations that patch can't as I say a

00:11:33,170 --> 00:11:47,810
big one is when your change has been

00:11:34,910 --> 00:11:50,060
accepted upstream or sometimes the patch

00:11:47,810 --> 00:11:54,200
is won't apply sometimes they'll apply

00:11:50,060 --> 00:11:57,410
but give the wrong results we need to

00:11:54,200 --> 00:11:59,960
fix that up and the way we do that again

00:11:57,410 --> 00:12:02,300
pretty hacky I need I could probably

00:11:59,960 --> 00:12:03,920
improve this but it doesn't come up van

00:12:02,300 --> 00:12:08,690
off most of the time the patches do

00:12:03,920 --> 00:12:10,250
actually apply but we go through we go

00:12:08,690 --> 00:12:12,770
through all the patches we try and apply

00:12:10,250 --> 00:12:18,140
them to the upstream source if they're

00:12:12,770 --> 00:12:20,090
fuzzy we do fuzz them because dpkg -

00:12:18,140 --> 00:12:24,830
sauce won't apply a patch with any fuzz

00:12:20,090 --> 00:12:26,690
in it whereas quilt well and if we can't

00:12:24,830 --> 00:12:32,030
apply at all we just remove it from the

00:12:26,690 --> 00:12:34,340
patch series and then after that big it

00:12:32,030 --> 00:12:36,290
generates a new patch with any remaining

00:12:34,340 --> 00:12:39,790
changes to make the git series

00:12:36,290 --> 00:12:39,790
consistent with the source tree

00:12:47,470 --> 00:12:58,489
this torts gone way quicker than I

00:12:49,610 --> 00:13:02,259
thought it would so we use D get to

00:12:58,489 --> 00:13:04,970
actually build the sauce packages

00:13:02,259 --> 00:13:06,980
optionally we can then go on and call s

00:13:04,970 --> 00:13:09,860
bill to turn those source packages into

00:13:06,980 --> 00:13:11,540
a button turbine erase this is important

00:13:09,860 --> 00:13:14,899
for raspbian because raspbian doesn't

00:13:11,540 --> 00:13:16,639
have any actual auto builders so we need

00:13:14,899 --> 00:13:19,009
changes files that have at least the are

00:13:16,639 --> 00:13:23,209
chiral packages in and may as well have

00:13:19,009 --> 00:13:26,449
the art specific ones in we also have

00:13:23,209 --> 00:13:29,269
the option to use d get Porsche so that

00:13:26,449 --> 00:13:32,389
people import our BSC's can get real get

00:13:29,269 --> 00:13:34,610
history reason that's not enabled by

00:13:32,389 --> 00:13:37,009
default is that d get push needs a

00:13:34,610 --> 00:13:40,339
server set up which is a bit of a pain

00:13:37,009 --> 00:13:42,079
to do we do it for raspbian but i can't

00:13:40,339 --> 00:13:44,989
expect people just trying out the

00:13:42,079 --> 00:13:50,049
software to have that infrastructure set

00:13:44,989 --> 00:13:50,049
up so that option is disabled by default

00:13:51,699 --> 00:13:58,299
ok now i've talked you about i'm going

00:13:54,559 --> 00:13:58,299
to try and do a live demo of it

00:14:10,570 --> 00:14:14,259
if one read that

00:14:46,589 --> 00:14:53,170
so first of all we need something for it

00:14:49,330 --> 00:14:54,880
to work on so I'm gonna run some

00:14:53,170 --> 00:14:58,990
commands that are gonna grab an old

00:14:54,880 --> 00:15:02,350
version of a package from Deb before we

00:14:58,990 --> 00:15:06,220
do that let's just run the clean script

00:15:02,350 --> 00:15:07,959
I've got in here V so we're going to

00:15:06,220 --> 00:15:10,029
download an old version of a package

00:15:07,959 --> 00:15:12,490
from Debian and we're going to apply a

00:15:10,029 --> 00:15:15,640
patch to it to basically turn it into

00:15:12,490 --> 00:15:18,959
our a surrogate for what would be an old

00:15:15,640 --> 00:15:18,959
downstream package

00:15:58,180 --> 00:16:09,470
okay he's working now I just had an

00:16:01,910 --> 00:16:17,210
internet connection problem so now we've

00:16:09,470 --> 00:16:20,750
told it to get an old version of the

00:16:17,210 --> 00:16:25,810
hello package from snapshot Debbie and

00:16:20,750 --> 00:16:25,810
org you hear me okay

00:16:39,010 --> 00:16:41,940
hmm

00:17:01,709 --> 00:17:08,939
yep

00:17:03,179 --> 00:17:08,939
there we go it's it's got it now

00:17:57,600 --> 00:18:05,980
so we've got our rep rep fro set up

00:18:00,929 --> 00:18:07,690
pretty simple this isn't a rep rep row

00:18:05,980 --> 00:18:14,530
talk so we're going to details about

00:18:07,690 --> 00:18:16,690
that but it's and see we've got

00:18:14,530 --> 00:18:18,940
something to pull our packages from our

00:18:16,690 --> 00:18:28,210
upstream district for this demo is

00:18:18,940 --> 00:18:30,610
Debian said and we've got a config file

00:18:28,210 --> 00:18:33,309
for toe forward Porter get itself which

00:18:30,610 --> 00:18:41,830
is entailed Slashdot auto full report to

00:18:33,309 --> 00:18:46,120
get so mostly file paths they so path to

00:18:41,830 --> 00:18:53,230
the working where after where we want to

00:18:46,120 --> 00:18:57,850
put the get Rea pose path to the auto

00:18:53,230 --> 00:19:00,820
full report a temporary direct ray path

00:18:57,850 --> 00:19:03,580
to the output direct ray what our local

00:19:00,820 --> 00:19:12,159
version marker is for these tests it's

00:19:03,580 --> 00:19:15,340
plus test rather be in it plus our PI so

00:19:12,159 --> 00:19:18,070
on what we call a revert marker

00:19:15,340 --> 00:19:23,289
sometimes we modify packages and we

00:19:18,070 --> 00:19:25,059
revert those modifications occasionally

00:19:23,289 --> 00:19:27,190
due to versioning order we need to

00:19:25,059 --> 00:19:29,320
forward Porter reversion I mean I know

00:19:27,190 --> 00:19:31,450
that sounds odd but it happens with

00:19:29,320 --> 00:19:36,309
particularly when you're doing patches

00:19:31,450 --> 00:19:39,250
to things in stable whether we want to

00:19:36,309 --> 00:19:41,080
invoke s build on our results whether we

00:19:39,250 --> 00:19:47,280
want to invoke do git push on our

00:19:41,080 --> 00:19:47,280
results names and emails to use

00:20:04,890 --> 00:20:10,150
we've got another option to push some of

00:20:07,840 --> 00:20:13,120
our get repost to get hub again that's

00:20:10,150 --> 00:20:18,240
disabled by default but that's

00:20:13,120 --> 00:20:20,800
configuration for that whether we want

00:20:18,240 --> 00:20:25,390
pull to get which used to be known as

00:20:20,800 --> 00:20:27,460
DSC der to get things got restructured

00:20:25,390 --> 00:20:30,070
slightly whether we want that to pull

00:20:27,460 --> 00:20:34,900
packages from snapshot Debian dog or not

00:20:30,070 --> 00:20:41,890
you usually do and the names of the

00:20:34,900 --> 00:20:44,230
suede so there's the option to have a

00:20:41,890 --> 00:20:45,910
split main and staging suite in your

00:20:44,230 --> 00:20:47,500
downstream we're not using that for the

00:20:45,910 --> 00:20:52,210
demo but that's why the option is called

00:20:47,500 --> 00:20:59,250
staging suite and what our upstream

00:20:52,210 --> 00:21:01,990
suite is called in our local repo and

00:20:59,250 --> 00:21:03,970
finally the name of I mentioned the

00:21:01,990 --> 00:21:06,940
working branch before where we push

00:21:03,970 --> 00:21:08,500
stuff so that we can work on failed so

00:21:06,940 --> 00:21:12,130
we can continue where the auto for

00:21:08,500 --> 00:21:19,030
Porter fail that okay so that's our

00:21:12,130 --> 00:21:27,660
config I made over time time is not

00:21:19,030 --> 00:21:27,660
working plenty of time so

00:21:31,250 --> 00:21:35,210
where's my mouse pointer yeah

00:21:50,049 --> 00:21:58,070
so the next thing I'm going to do is

00:21:52,730 --> 00:22:02,289
that that test package we built which

00:21:58,070 --> 00:22:06,039
represents an old downstream package I

00:22:02,289 --> 00:22:08,539
need to import it into the repository

00:22:06,039 --> 00:22:12,620
that's the next thing I'm going to do

00:22:08,539 --> 00:22:14,450
all these commands I'm pasting are

00:22:12,620 --> 00:22:20,919
coming from a tutorial file that's

00:22:14,450 --> 00:22:20,919
included with autofill reporter get

00:22:42,630 --> 00:22:48,880
we also have a whitelist file that lists

00:22:46,000 --> 00:22:50,799
the packages we we want auto full report

00:22:48,880 --> 00:22:53,140
to get to work on so that's entailed

00:22:50,799 --> 00:22:59,830
Slashdot auto full report to get slash

00:22:53,140 --> 00:23:04,740
whitelist start and then the sweet name

00:22:59,830 --> 00:23:08,500
so whitelist on Sid

00:23:04,740 --> 00:23:10,480
and there's also white list dot import

00:23:08,500 --> 00:23:12,309
which is a list of stuff to import and

00:23:10,480 --> 00:23:17,320
that's automatically updated from the

00:23:12,309 --> 00:23:18,909
other whitelist see we've got one

00:23:17,320 --> 00:23:30,549
package in here at the moment which is

00:23:18,909 --> 00:23:36,130
hello now we've got everything in place

00:23:30,549 --> 00:23:39,029
for the auto forward Porter to run run

00:23:36,130 --> 00:23:39,029
it where's my mouse

00:24:05,039 --> 00:24:19,330
so you see RepRap road running then pull

00:24:08,470 --> 00:24:24,090
to get running downloading the base

00:24:19,330 --> 00:24:24,090
versions the common ancestor version

00:24:34,030 --> 00:24:42,090
and it's failed for some reason it

00:24:39,820 --> 00:24:42,090
worked

00:25:08,090 --> 00:25:17,570
try running again it worked when I when

00:25:14,279 --> 00:25:17,570
I tested this earlier

00:26:13,230 --> 00:26:19,320
I know what step I produce I forgot the

00:26:17,519 --> 00:26:40,130
temporary directory actually has to

00:26:19,320 --> 00:26:40,130
exist okay so it succeeded this time ah

00:26:44,899 --> 00:26:52,230
okay so we it's exceedingly actually

00:26:50,490 --> 00:27:03,000
also for reporting that hasn't managed

00:26:52,230 --> 00:27:05,510
to copy it to the output directory if it

00:27:03,000 --> 00:27:05,510
works this time

00:27:13,840 --> 00:27:18,970
[Applause]

00:27:23,410 --> 00:27:28,640
so as you can see it's pulled the sauces

00:27:26,120 --> 00:27:30,710
the changes forward from the old version

00:27:28,640 --> 00:27:34,480
of the Hello package to the latest

00:27:30,710 --> 00:27:34,480
version of the Hello package from said

00:27:39,130 --> 00:27:53,740
so any questions you're all being very

00:27:51,230 --> 00:27:53,740
quiet

00:28:28,789 --> 00:28:34,619
hey thanks for the talk a whole

00:28:31,019 --> 00:28:38,210
widespread is the use of this tool I'm

00:28:34,619 --> 00:28:40,710
not aware of anyone else using it yet

00:28:38,210 --> 00:28:42,269
this is partly why I've come to give a

00:28:40,710 --> 00:28:44,159
talk about it because I want to convince

00:28:42,269 --> 00:28:49,859
other people to use it and tell me what

00:28:44,159 --> 00:28:54,239
I'm doing that's good or bad with it it

00:28:49,859 --> 00:28:57,659
serves raspbian needs as I say I'm not

00:28:54,239 --> 00:29:00,019
aware of anyone else using it which I

00:28:57,659 --> 00:29:02,609
quite like to change

00:29:00,019 --> 00:29:04,980
I'm also musing whether or not I should

00:29:02,609 --> 00:29:07,230
package it in and upload it to Debian

00:29:04,980 --> 00:29:09,929
and if so how exactly I should structure

00:29:07,230 --> 00:29:12,299
that packaging should I go with doing

00:29:09,929 --> 00:29:15,029
what gate does this idea of having a

00:29:12,299 --> 00:29:18,619
master command that then runs runs all

00:29:15,029 --> 00:29:18,619
the different scripts of sub commands

00:29:19,879 --> 00:29:24,509
because at the moment it basically just

00:29:22,320 --> 00:29:27,210
runs from a get from a get check out so

00:29:24,509 --> 00:29:30,119
you just check it out and you run it

00:29:27,210 --> 00:29:32,369
from there I don't think I want to put

00:29:30,119 --> 00:29:34,679
all my commands on the path that will

00:29:32,369 --> 00:29:37,639
pollute path quite a bit so not exactly

00:29:34,679 --> 00:29:43,549
sure what direction to go in with that

00:29:37,639 --> 00:29:53,100
and whether it's worth say packaging it

00:29:43,549 --> 00:29:57,179
or not I already spoke to you yesterday

00:29:53,100 --> 00:30:01,080
about this but I'm interested in this

00:29:57,179 --> 00:30:04,139
tool if it could be enhanced to also

00:30:01,080 --> 00:30:06,359
merge with upstream sources because well

00:30:04,139 --> 00:30:10,919
Debian is an upstream but Debian has its

00:30:06,359 --> 00:30:16,470
own upstream and one of my main use case

00:30:10,919 --> 00:30:19,049
is automating the update of dependencies

00:30:16,470 --> 00:30:20,730
I mean sometimes I packaged something

00:30:19,049 --> 00:30:23,789
for Cali and it has thousands of

00:30:20,730 --> 00:30:25,710
dependencies which are easy package but

00:30:23,789 --> 00:30:31,100
the manual work to update them is

00:30:25,710 --> 00:30:35,879
tedious just like yours and if it could

00:30:31,100 --> 00:30:39,179
either user and directly the upstream

00:30:35,879 --> 00:30:41,519
git branch to update packages or

00:30:39,179 --> 00:30:45,059
possibly download troubles and build a

00:30:41,519 --> 00:30:47,909
fake upstream and use that for merging

00:30:45,059 --> 00:30:50,730
it would be interesting yeah I think

00:30:47,909 --> 00:30:53,190
that could be made to work I'd have to

00:30:50,730 --> 00:30:57,509
have possibly a bit more of a look at

00:30:53,190 --> 00:30:59,759
how big it imports work and you need the

00:30:57,509 --> 00:31:02,809
thing is to make a merge work right you

00:30:59,759 --> 00:31:06,809
need to get the right common ancestor

00:31:02,809 --> 00:31:13,470
which for a new upstream version is the

00:31:06,809 --> 00:31:17,659
old upstream source and there are quite

00:31:13,470 --> 00:31:22,200
a few tools in with get build package to

00:31:17,659 --> 00:31:24,299
build well to create fake make match

00:31:22,200 --> 00:31:25,649
points between what you get from a

00:31:24,299 --> 00:31:29,609
trouble and what you get from a git

00:31:25,649 --> 00:31:32,129
repository yeah it would just be a

00:31:29,609 --> 00:31:34,230
matter of tweaking I think I'll be the

00:31:32,129 --> 00:31:36,570
main thing tweaking the tooling so it

00:31:34,230 --> 00:31:40,529
gets the right common ancestor version

00:31:36,570 --> 00:31:43,830
in place so that then get can do a

00:31:40,529 --> 00:31:46,679
sensible merge with whatever new

00:31:43,830 --> 00:31:48,749
upstream you've got I think most of the

00:31:46,679 --> 00:31:50,730
rest of the stuff would more or less

00:31:48,749 --> 00:31:53,759
just work as long as the right common

00:31:50,730 --> 00:31:55,169
ancestor was in place you might also

00:31:53,759 --> 00:31:58,099
need to think about what you're going to

00:31:55,169 --> 00:32:02,190
put in there me and slash changelog

00:31:58,099 --> 00:32:06,349
but again that's as much an issue of

00:32:02,190 --> 00:32:06,349
status of style of substance

00:32:07,799 --> 00:32:11,309
those would be the two main issues

00:32:09,179 --> 00:32:13,799
change log generation and getting the

00:32:11,309 --> 00:32:18,090
right common ancestor point I think

00:32:13,799 --> 00:32:19,169
other than that I think a lot of the

00:32:18,090 --> 00:32:21,480
scripts I've written wouldn't actually

00:32:19,169 --> 00:32:24,149
be doing anything in that case because a

00:32:21,480 --> 00:32:26,429
lot of the stuff life a lot of the

00:32:24,149 --> 00:32:28,710
scripting is about dealing with merge

00:32:26,429 --> 00:32:30,570
conflicts in the chat in the Debian tree

00:32:28,710 --> 00:32:32,129
and if you don't have a date every entry

00:32:30,570 --> 00:32:38,249
on one side there's gonna be no merge

00:32:32,129 --> 00:32:40,799
conflicts there the other thing that I

00:32:38,249 --> 00:32:44,849
wanted to mention is well obviously

00:32:40,799 --> 00:32:47,129
prepare a new source package for what in

00:32:44,849 --> 00:32:48,520
your case a new version for your

00:32:47,129 --> 00:32:52,030
derivative

00:32:48,520 --> 00:32:56,890
but the all the time consuming part is

00:32:52,030 --> 00:33:00,040
ensuring that package works well you

00:32:56,890 --> 00:33:02,140
hope it will but we have tools nowadays

00:33:00,040 --> 00:33:05,020
we Soto package test to ensure that it

00:33:02,140 --> 00:33:08,050
at least does that to some point and it

00:33:05,020 --> 00:33:12,150
would be interesting as well to have

00:33:08,050 --> 00:33:12,150
your infrastructure run those tests and

00:33:13,770 --> 00:33:19,360
just to ensure it and a flag package

00:33:16,420 --> 00:33:21,880
which might have issue even if they

00:33:19,360 --> 00:33:24,280
build even if there could be installed

00:33:21,880 --> 00:33:26,560
directly in the repository maybe it's

00:33:24,280 --> 00:33:29,380
interesting to flag them saying oh so

00:33:26,560 --> 00:33:30,880
the test no longer work so maybe you

00:33:29,380 --> 00:33:37,900
want to double-check because before I

00:33:30,880 --> 00:33:40,240
upload it that kind of thing yeah I'll

00:33:37,900 --> 00:33:42,790
be brutally honest raspbian is run only

00:33:40,240 --> 00:33:45,250
the way I've managed to run now you fool

00:33:42,790 --> 00:33:48,400
a more or less full rebuild derivative

00:33:45,250 --> 00:33:52,530
on one person part time is by running on

00:33:48,400 --> 00:33:52,530
the philosophy of if it compiled ship it

00:33:56,520 --> 00:34:05,460
may or may not be the best way to run a

00:33:59,230 --> 00:34:09,460
project I understand I just wanted to

00:34:05,460 --> 00:34:11,590
share it with others to give ideas of

00:34:09,460 --> 00:34:14,890
where you could go and where they could

00:34:11,590 --> 00:34:21,270
help you to make it more useable to

00:34:14,890 --> 00:34:21,270
other persons because you're looking for

00:34:21,540 --> 00:34:25,870
the issue I always run into with test

00:34:24,190 --> 00:34:28,780
suite is unless you're intimately

00:34:25,870 --> 00:34:31,090
familiar with the software it's

00:34:28,780 --> 00:34:33,820
difficult to tell what a test suite

00:34:31,090 --> 00:34:36,040
failure actually means does it mean that

00:34:33,820 --> 00:34:40,330
some bit of corner case functionality we

00:34:36,040 --> 00:34:47,740
don't care about is broken does it mean

00:34:40,330 --> 00:34:50,020
the package is totally broken there was

00:34:47,740 --> 00:34:53,220
a generic problem I mean you can always

00:34:50,020 --> 00:34:56,080
keep your philosophy but at least you

00:34:53,220 --> 00:34:57,810
you have a supplementary data point to

00:34:56,080 --> 00:35:00,420
make your decisions

00:34:57,810 --> 00:35:02,640
and I mean well the tests are built by

00:35:00,420 --> 00:35:04,950
Debian and UK the tests are written by

00:35:02,640 --> 00:35:07,920
Debian developers so this you don't have

00:35:04,950 --> 00:35:11,040
the work to create the test just to run

00:35:07,920 --> 00:35:13,770
them and when we run it in raspbian we

00:35:11,040 --> 00:35:16,830
do we do run it with the do s build

00:35:13,770 --> 00:35:21,060
option which means that any build time

00:35:16,830 --> 00:35:25,530
test will have been run before we upload

00:35:21,060 --> 00:35:27,720
the results so if there's a build time

00:35:25,530 --> 00:35:31,080
test that fails unless we've disabled

00:35:27,720 --> 00:35:33,270
set build time tests that will result in

00:35:31,080 --> 00:35:54,840
a build failure in the modified package

00:35:33,270 --> 00:36:01,620
won't ever get uploaded anyone else got

00:35:54,840 --> 00:36:05,780
5 minutes left how usable is it without

00:36:01,620 --> 00:36:05,780
a separate instance of digit

00:36:12,130 --> 00:36:23,060
it'll all work you just won't get nice

00:36:14,960 --> 00:36:27,020
get histories is basically basically the

00:36:23,060 --> 00:36:30,620
possession so it'll mean that every

00:36:27,020 --> 00:36:33,470
every time you create a pack you every

00:36:30,620 --> 00:36:35,900
time your patch is updated then deed

00:36:33,470 --> 00:36:39,080
then when that goes so it'll go from

00:36:35,900 --> 00:36:41,240
also for poor to get to your your

00:36:39,080 --> 00:36:43,820
repository whatever that is and then

00:36:41,240 --> 00:36:46,610
it'll be really important by also full

00:36:43,820 --> 00:36:48,800
report to get to use to produce the next

00:36:46,610 --> 00:36:51,430
one and if you don't have a bigot

00:36:48,800 --> 00:36:56,630
infrastructure bad import will be a

00:36:51,430 --> 00:36:58,760
import from DSA building which works

00:36:56,630 --> 00:37:06,860
fine but it just means you get a very

00:36:58,760 --> 00:37:08,780
messy get history but the DSCs that come

00:37:06,860 --> 00:37:10,850
out and still be fine the merge process

00:37:08,780 --> 00:37:17,840
doesn't really care what the get history

00:37:10,850 --> 00:37:19,430
looks like so yeah it will work fine

00:37:17,840 --> 00:37:21,080
without do you get infrastructure you'll

00:37:19,430 --> 00:37:24,490
just get nice-looking get histories if

00:37:21,080 --> 00:37:24,490
you have big it infrastructure

00:37:35,789 --> 00:37:39,679
anyone else you got three minutes left

00:37:51,880 --> 00:38:04,260
okay thank you

00:37:54,850 --> 00:38:04,260

YouTube URL: https://www.youtube.com/watch?v=Bh0ZTvtdtFo


