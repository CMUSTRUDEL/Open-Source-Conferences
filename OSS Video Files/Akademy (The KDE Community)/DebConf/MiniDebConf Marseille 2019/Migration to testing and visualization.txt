Title: Migration to testing and visualization
Publication date: 2019-06-07
Playlist: MiniDebConf Marseille 2019
Description: 
	by Cyril Brulebois

At: Mini-DebConf Marseille 2019
https://minidebconf-mrs.debian.net/

It might take some efforts to make sure a package and all of its dependencies are candidates for migration to testing; instead of checking individual packages (time-consuming, likely mistakes or omissions), consuming britney's excuses file makes it easy to extract clusters/graphs of related packages.

Room: main
Scheduled start: 2019-05-25 10:00:00
Captions: 
	00:00:04,570 --> 00:00:12,090
so hi everyone I'm going to talk to you

00:00:08,350 --> 00:00:14,800
to you about migration to testing and

00:00:12,090 --> 00:00:17,380
visualization or how do I beat the

00:00:14,800 --> 00:00:21,489
freeze deadlines that was basically my

00:00:17,380 --> 00:00:23,890
main issue I didn't intend to work on

00:00:21,489 --> 00:00:27,910
release team tools but in the end that's

00:00:23,890 --> 00:00:31,180
what I did so I'm going to split this in

00:00:27,910 --> 00:00:33,579
short part the first quick one is just

00:00:31,180 --> 00:00:36,160
what context then I'm going to talk

00:00:33,579 --> 00:00:39,430
about migration to testing which is like

00:00:36,160 --> 00:00:42,310
the core of this district and how we can

00:00:39,430 --> 00:00:46,210
visualize what's happening and what's

00:00:42,310 --> 00:00:49,120
holding back some migration of packages

00:00:46,210 --> 00:00:55,360
through testing and then some openings

00:00:49,120 --> 00:00:59,130
as usual so just a show of hands who

00:00:55,360 --> 00:01:03,610
maintains at least one package in Debian

00:00:59,130 --> 00:01:06,250
not quite everyone but almost and who

00:01:03,610 --> 00:01:09,720
keeps an eye on the status of the

00:01:06,250 --> 00:01:11,560
migration of this package to testing or

00:01:09,720 --> 00:01:19,330
the other way around

00:01:11,560 --> 00:01:21,970
who doesn't care okay no one okay we did

00:01:19,330 --> 00:01:25,049
not that the package was blocked from

00:01:21,970 --> 00:01:30,250
migration because of another package

00:01:25,049 --> 00:01:32,830
okay so still people and we had troubles

00:01:30,250 --> 00:01:36,460
understanding why and how many packages

00:01:32,830 --> 00:01:40,510
were included is this migration problem

00:01:36,460 --> 00:01:41,830
Oh still some people the other ones you

00:01:40,510 --> 00:01:47,470
can stay here

00:01:41,830 --> 00:01:50,020
maybe we learn some anyway and I'm

00:01:47,470 --> 00:01:52,140
not going to talk a lot about my company

00:01:50,020 --> 00:01:58,119
but basically I'm doing different work

00:01:52,140 --> 00:02:01,659
as a volunteer but also as a consultant

00:01:58,119 --> 00:02:04,140
and I'm mentioning this because when I'm

00:02:01,659 --> 00:02:07,930
doing systems administration I tend to

00:02:04,140 --> 00:02:11,140
not do manual work so I automate stuff

00:02:07,930 --> 00:02:13,779
and you can do that with ansible I know

00:02:11,140 --> 00:02:17,250
abadox people already use it quite a lot

00:02:13,779 --> 00:02:21,330
but there's also profit that I'm using

00:02:17,250 --> 00:02:23,850
for the centralization aspects that

00:02:21,330 --> 00:02:25,830
makes it possible to automate many tasks

00:02:23,850 --> 00:02:29,540
and keep track of everything happening

00:02:25,830 --> 00:02:33,780
on some infrastructure but one of the

00:02:29,540 --> 00:02:36,330
tiny little issue I'm getting is out why

00:02:33,780 --> 00:02:42,330
monitor possible issues with the

00:02:36,330 --> 00:02:45,440
infrastructure and I deployed and there

00:02:42,330 --> 00:02:48,450
are many ways to address this problem

00:02:45,440 --> 00:02:53,220
you can use a full-blown solution like

00:02:48,450 --> 00:02:56,640
Foreman which can be plugged with with

00:02:53,220 --> 00:02:59,460
pipette but comes with DHCP server pixie

00:02:56,640 --> 00:03:02,490
server and many other capabilities so

00:02:59,460 --> 00:03:05,880
maybe it's a bit too much you can switch

00:03:02,490 --> 00:03:08,340
to puppet enterprise which has some web

00:03:05,880 --> 00:03:11,630
interface to look at reports and so on

00:03:08,340 --> 00:03:16,130
but I don't want to pass on some

00:03:11,630 --> 00:03:19,260
subscription just for that so on the

00:03:16,130 --> 00:03:23,160
other end of the spectrum you can just

00:03:19,260 --> 00:03:24,840
look at the Yamal report yourself past

00:03:23,160 --> 00:03:28,440
them and then maybe send some

00:03:24,840 --> 00:03:31,410
notification so I started with that it's

00:03:28,440 --> 00:03:35,640
not really reasonable to ask people to

00:03:31,410 --> 00:03:38,239
look at reports themselves and the the

00:03:35,640 --> 00:03:42,360
middle ground is purple board which

00:03:38,239 --> 00:03:46,500
replaces puppet dashboard using pepper

00:03:42,360 --> 00:03:48,900
DB Papa DB will collect many information

00:03:46,500 --> 00:03:49,170
about your puppet setups you note and so

00:03:48,900 --> 00:03:53,340
on

00:03:49,170 --> 00:03:57,150
and Papa pod will just be a web

00:03:53,340 --> 00:03:59,910
interface to Papa D B but my new problem

00:03:57,150 --> 00:04:02,550
is that Papa DB was not in testing so

00:03:59,910 --> 00:04:09,390
that's the starting point of my little

00:04:02,550 --> 00:04:12,180
journey with really stuff so what can

00:04:09,390 --> 00:04:14,190
prevent the migration of a package from

00:04:12,180 --> 00:04:16,919
unstable to testing there are many

00:04:14,190 --> 00:04:17,280
possible reasons maybe it's not old

00:04:16,919 --> 00:04:21,570
enough

00:04:17,280 --> 00:04:24,180
it hasn't spent enough time in unstable

00:04:21,570 --> 00:04:27,000
so maybe there are some underlying bugs

00:04:24,180 --> 00:04:30,180
that were not discovered yet it can has

00:04:27,000 --> 00:04:30,880
ink it can have a new release critical

00:04:30,180 --> 00:04:35,290
bugs compare

00:04:30,880 --> 00:04:38,020
to the version in testing it can come

00:04:35,290 --> 00:04:40,990
with dependencies that are not satisfied

00:04:38,020 --> 00:04:44,020
in testing maybe some bit dependencies

00:04:40,990 --> 00:04:48,790
that are not satisfied in testing and

00:04:44,020 --> 00:04:52,000
many more issues we have over time we've

00:04:48,790 --> 00:04:55,060
put some efforts into testing packages

00:04:52,000 --> 00:04:57,690
and not letting users only test packages

00:04:55,060 --> 00:05:00,430
so we've got two parts that test

00:04:57,690 --> 00:05:03,160
installation upgrade and removal of

00:05:00,430 --> 00:05:05,080
packages on some automated fashion

00:05:03,160 --> 00:05:07,660
and we've got some continuous

00:05:05,080 --> 00:05:10,620
integration with CI the Debian dotnet

00:05:07,660 --> 00:05:15,280
which makes it possible to run some

00:05:10,620 --> 00:05:18,760
automated package tests so Auto pkg test

00:05:15,280 --> 00:05:21,190
is something that you can put into your

00:05:18,760 --> 00:05:23,440
source packages so that they get tested

00:05:21,190 --> 00:05:25,560
automatically if there are some

00:05:23,440 --> 00:05:28,600
regression your package might be blocked

00:05:25,560 --> 00:05:31,270
but if you've got some automated tests

00:05:28,600 --> 00:05:33,670
maybe you've got some bonus like you

00:05:31,270 --> 00:05:37,570
migrate early because it was tested by

00:05:33,670 --> 00:05:40,630
some infrastructure bits anyway some

00:05:37,570 --> 00:05:42,430
other possibilities your package might

00:05:40,630 --> 00:05:46,480
be blocked because somebody's manager

00:05:42,430 --> 00:05:48,520
but an explicit block on it though so

00:05:46,480 --> 00:05:52,030
that's basically what the freeze is we

00:05:48,520 --> 00:05:55,060
block all packages and it can be kept

00:05:52,030 --> 00:05:56,440
out of testing because the will the

00:05:55,060 --> 00:05:59,020
Debian installer with this manager

00:05:56,440 --> 00:06:00,610
decided that oh I'm working on a Debian

00:05:59,020 --> 00:06:02,620
installer release oh I'm going to freeze

00:06:00,610 --> 00:06:05,710
all packages that might have some

00:06:02,620 --> 00:06:09,660
impacts on the Installer so that's the

00:06:05,710 --> 00:06:14,440
block you Deb hint which prevents some

00:06:09,660 --> 00:06:16,690
some more migration or it can be many if

00:06:14,440 --> 00:06:20,920
not all of the above we've got some

00:06:16,690 --> 00:06:25,990
really not bad package but packages that

00:06:20,920 --> 00:06:28,540
are in non-releasable state so they are

00:06:25,990 --> 00:06:30,250
kept out of testing or maybe even we

00:06:28,540 --> 00:06:34,270
move from testing if they if they

00:06:30,250 --> 00:06:39,090
migrated before and trying to understand

00:06:34,270 --> 00:06:42,960
which part is blocking might be a bit

00:06:39,090 --> 00:06:44,580
a bit tricky to understand what's

00:06:42,960 --> 00:06:47,310
happening we've got the package tracker

00:06:44,580 --> 00:06:49,950
so you can use tracker dot DB n dot org

00:06:47,310 --> 00:06:52,560
slash PKG slash the name of your soft

00:06:49,950 --> 00:06:56,790
package to get some information but

00:06:52,560 --> 00:06:59,400
we've got the excuses page as well that

00:06:56,790 --> 00:07:02,160
one lives under Melissa DB n dot org

00:06:59,400 --> 00:07:05,760
it's related to Brittney which is our

00:07:02,160 --> 00:07:09,570
tool which automates computations what

00:07:05,760 --> 00:07:12,060
can be migrated which package must go

00:07:09,570 --> 00:07:17,870
together with another one and so and so

00:07:12,060 --> 00:07:21,330
on so as we'll see in some screenshots

00:07:17,870 --> 00:07:23,160
right after that you might have to

00:07:21,330 --> 00:07:25,110
follow some links to get more

00:07:23,160 --> 00:07:30,050
information because some more packages

00:07:25,110 --> 00:07:36,240
can be involved so for example here

00:07:30,050 --> 00:07:41,930
relatively easy packages Arel as you can

00:07:36,240 --> 00:07:45,210
see it's migrating after another one so

00:07:41,930 --> 00:07:48,600
maybe that other one might need some

00:07:45,210 --> 00:07:52,110
other package in turn and so on it's too

00:07:48,600 --> 00:07:55,640
young it just got uploaded so it's it

00:07:52,110 --> 00:07:58,080
has no opportunity to get widely tested

00:07:55,640 --> 00:08:02,610
Pugh part is okay so it can be installed

00:07:58,080 --> 00:08:06,270
upgraded and removed but in the end

00:08:02,610 --> 00:08:08,700
because it was taken a few days ago it's

00:08:06,270 --> 00:08:12,120
blocked because we are in deep freeze

00:08:08,700 --> 00:08:17,419
anyway but I'm going to concentrate on

00:08:12,120 --> 00:08:17,419
the first bit the my grades after a bit

00:08:17,870 --> 00:08:24,780
here we have basically the same

00:08:20,370 --> 00:08:28,950
information but on the Williston side so

00:08:24,780 --> 00:08:31,560
that's the excuse page as you can

00:08:28,950 --> 00:08:36,839
imagine we basically a copy/paste from

00:08:31,560 --> 00:08:40,770
one to the other one and a little less

00:08:36,839 --> 00:08:44,850
easy case is github which migrates after

00:08:40,770 --> 00:08:48,980
many gitlab - something package or go

00:08:44,850 --> 00:08:48,980
long packages or ruby packages

00:08:49,110 --> 00:08:56,490
plus it introduces some new bugs and so

00:08:53,340 --> 00:09:01,260
there are many reason not to to let it

00:08:56,490 --> 00:09:05,420
migrate right now and that's another

00:09:01,260 --> 00:09:07,770
part of the excuses page for gitlab so

00:09:05,420 --> 00:09:10,470
everything in blue is a link so you can

00:09:07,770 --> 00:09:12,690
click and move around in the page and

00:09:10,470 --> 00:09:15,120
get more information about your your

00:09:12,690 --> 00:09:17,220
package but basically it's a bit

00:09:15,120 --> 00:09:19,290
cumbersome to keep track in your head

00:09:17,220 --> 00:09:21,510
that oh okay there's this package and

00:09:19,290 --> 00:09:23,610
also that one or maybe I'm forgetting

00:09:21,510 --> 00:09:29,220
that one because the name are close but

00:09:23,610 --> 00:09:31,290
and so so basically what do we do how

00:09:29,220 --> 00:09:35,450
does it scale when you've got too many

00:09:31,290 --> 00:09:39,420
packages involved so that's where

00:09:35,450 --> 00:09:43,040
visualization comes into play the first

00:09:39,420 --> 00:09:46,920
solution is pen and paper I'm no artist

00:09:43,040 --> 00:09:52,080
really no I can barely read back my own

00:09:46,920 --> 00:09:56,340
handwriting and it might be a bit hard

00:09:52,080 --> 00:09:58,760
to like start drawing something and then

00:09:56,340 --> 00:10:01,680
figure out that oh but I need some more

00:09:58,760 --> 00:10:06,270
place to put this and that in that

00:10:01,680 --> 00:10:09,780
package and so on so I basically didn't

00:10:06,270 --> 00:10:14,310
work at all for me the second solution

00:10:09,780 --> 00:10:16,410
is manual gravis which is a piece of

00:10:14,310 --> 00:10:19,920
software which makes it possible to

00:10:16,410 --> 00:10:24,810
describe a graph like I want to draw a

00:10:19,920 --> 00:10:32,390
graph which is or isn't directed so with

00:10:24,810 --> 00:10:35,690
like transition between two two edges

00:10:32,390 --> 00:10:38,580
the direction is important or not and

00:10:35,690 --> 00:10:41,280
you just described with a specific

00:10:38,580 --> 00:10:45,090
language which is called dot which is

00:10:41,280 --> 00:10:49,410
also the name of one of the graphics

00:10:45,090 --> 00:10:54,510
tool and you run a command that will

00:10:49,410 --> 00:10:57,090
pass your graph source and generate some

00:10:54,510 --> 00:10:58,860
picture so basically you just have to

00:10:57,090 --> 00:11:01,920
describe your graph and it's going to

00:10:58,860 --> 00:11:02,790
compute some layout that makes sense for

00:11:01,920 --> 00:11:09,540
this

00:11:02,790 --> 00:11:14,130
a set of nodes and edges and so on so

00:11:09,540 --> 00:11:19,290
that was basically the the quickest way

00:11:14,130 --> 00:11:22,440
to get some information and maybe it can

00:11:19,290 --> 00:11:26,250
be automated but let's look at the

00:11:22,440 --> 00:11:28,110
manual graph this part the algorithm is

00:11:26,250 --> 00:11:30,570
really simple yourself with the package

00:11:28,110 --> 00:11:33,060
you're interested in so in my case that

00:11:30,570 --> 00:11:36,390
was Pepe DB you look at all the packages

00:11:33,060 --> 00:11:39,600
that are involved so with the migrates

00:11:36,390 --> 00:11:43,020
after that we saw earlier you would

00:11:39,600 --> 00:11:45,840
register a relationship between Papa DB

00:11:43,020 --> 00:11:46,080
and package 1 package 2 packet 3 and so

00:11:45,840 --> 00:11:49,050
on

00:11:46,080 --> 00:11:50,820
and then you look at package 1 and then

00:11:49,050 --> 00:11:52,560
figure out whether there are some other

00:11:50,820 --> 00:11:55,710
package involved and you do that

00:11:52,560 --> 00:11:59,880
recursively it's really easy except you

00:11:55,710 --> 00:12:03,870
need to be really focused and not miss

00:11:59,880 --> 00:12:07,980
any package and not look at the same

00:12:03,870 --> 00:12:13,920
package twice here's what it can look

00:12:07,980 --> 00:12:17,340
like so we've got I'm not going to to

00:12:13,920 --> 00:12:20,190
look too deep into the dot language

00:12:17,340 --> 00:12:24,110
specification but basically we've got a

00:12:20,190 --> 00:12:26,880
directed graph I'm going to be

00:12:24,110 --> 00:12:29,580
organizing the loud from left to right

00:12:26,880 --> 00:12:32,310
it can be top to bottom or some other

00:12:29,580 --> 00:12:34,470
stuff and I want the nodes who have the

00:12:32,310 --> 00:12:36,750
shape of a box because by default that's

00:12:34,470 --> 00:12:41,370
some kind of ellipses and it's not

00:12:36,750 --> 00:12:44,640
really wondering to - good and the first

00:12:41,370 --> 00:12:46,500
step was perfectly be migrated after

00:12:44,640 --> 00:12:50,580
this and that and that in that order

00:12:46,500 --> 00:12:52,650
package each link can be given a

00:12:50,580 --> 00:12:56,400
different color so that was blue for all

00:12:52,650 --> 00:13:00,000
of them for unrelated reasons and then

00:12:56,400 --> 00:13:02,490
once you've got that first part done you

00:13:00,000 --> 00:13:07,350
look at du jour via some check closure

00:13:02,490 --> 00:13:09,810
and then horny SQL closure and so on but

00:13:07,350 --> 00:13:12,930
looking at do reversion check closure oh

00:13:09,810 --> 00:13:15,220
it depends on puppet labs HTTP client

00:13:12,930 --> 00:13:17,050
closure which in turn depends

00:13:15,220 --> 00:13:19,930
on this other package and that other

00:13:17,050 --> 00:13:24,730
package which then self depend on other

00:13:19,930 --> 00:13:30,040
packages so it's really annoying to go

00:13:24,730 --> 00:13:32,230
and do some really manual work and make

00:13:30,040 --> 00:13:35,620
sure that you're not forgetting anything

00:13:32,230 --> 00:13:38,889
so that was step 2 or at least part of

00:13:35,620 --> 00:13:40,600
step 2 and when you're all done I didn't

00:13:38,889 --> 00:13:47,759
count the number of steps but they were

00:13:40,600 --> 00:13:52,389
way too many transitions so 36 total and

00:13:47,759 --> 00:13:54,100
I was glad I didn't try to to do that by

00:13:52,389 --> 00:13:56,740
hand because I wouldn't have enough

00:13:54,100 --> 00:13:59,709
paper anyway so that's the set of

00:13:56,740 --> 00:14:02,649
packages that were preventing Papa DB

00:13:59,709 --> 00:14:04,899
from migrating to testing so that was

00:14:02,649 --> 00:14:07,300
all the packages I needed to fix or to

00:14:04,899 --> 00:14:11,199
look at to get Papa DB possibly in shape

00:14:07,300 --> 00:14:13,209
before the freeze deadline because at

00:14:11,199 --> 00:14:19,660
some point we don't allow any new

00:14:13,209 --> 00:14:23,019
package in testing so basically at this

00:14:19,660 --> 00:14:26,740
point I had a good idea which packages

00:14:23,019 --> 00:14:30,160
might be involved in in this issue so I

00:14:26,740 --> 00:14:31,569
checked release critical bugs failure to

00:14:30,160 --> 00:14:34,809
build from sauce

00:14:31,569 --> 00:14:37,180
so basically many closure packages had

00:14:34,809 --> 00:14:42,610
test failures that were depending on

00:14:37,180 --> 00:14:45,879
file ordering so depending on the order

00:14:42,610 --> 00:14:49,029
in which tests were run so called unit

00:14:45,879 --> 00:14:51,610
tests were depending on some other unit

00:14:49,029 --> 00:14:54,579
tests and that could work or not work

00:14:51,610 --> 00:14:57,069
depending on fire ordering on the file

00:14:54,579 --> 00:14:59,529
system so it was a bit tricky but

00:14:57,069 --> 00:15:02,860
basically the same kind the same class

00:14:59,529 --> 00:15:05,439
of bugs so once you figure out what what

00:15:02,860 --> 00:15:07,959
is happening you just run them in some

00:15:05,439 --> 00:15:11,170
specific order which makes it work and

00:15:07,959 --> 00:15:14,350
you fix many bugs and you get some

00:15:11,170 --> 00:15:18,339
packages reviewed uploaded and stuff

00:15:14,350 --> 00:15:23,139
should be better but then how do you

00:15:18,339 --> 00:15:25,600
check where we add like may ARF of the

00:15:23,139 --> 00:15:28,300
packages in the previous graph were

00:15:25,600 --> 00:15:29,070
fixed some of them might have migrated

00:15:28,300 --> 00:15:31,920
to testing

00:15:29,070 --> 00:15:34,680
but then how do I check what the current

00:15:31,920 --> 00:15:37,740
situation is do i redo the steps before

00:15:34,680 --> 00:15:43,320
like go through all packages again I

00:15:37,740 --> 00:15:46,590
don't want to do that so the my next

00:15:43,320 --> 00:15:49,620
step was oK we've got the ball rolling

00:15:46,590 --> 00:15:52,380
we've got purple TV people closure

00:15:49,620 --> 00:15:55,290
people involved we've got some packages

00:15:52,380 --> 00:15:57,660
fixed so I'm going to take a step back

00:15:55,290 --> 00:16:00,410
and try and automate what I did manually

00:15:57,660 --> 00:16:03,510
the first time because once you do

00:16:00,410 --> 00:16:07,620
something manually you can understand

00:16:03,510 --> 00:16:11,700
every especially when it's repetitive

00:16:07,620 --> 00:16:13,830
you know exactly what step must be done

00:16:11,700 --> 00:16:19,650
in which order when do you stop and so

00:16:13,830 --> 00:16:22,110
on so I look back at some some

00:16:19,650 --> 00:16:25,880
preliminary work I did years ago when I

00:16:22,110 --> 00:16:29,700
joined the release team in 2013 I guess

00:16:25,880 --> 00:16:32,640
at the time I was looking at the excuses

00:16:29,700 --> 00:16:37,650
page the HTML version and I was passing

00:16:32,640 --> 00:16:40,730
HTML so that's a recipe for not Reda's

00:16:37,650 --> 00:16:44,640
astir but you've got to update because

00:16:40,730 --> 00:16:47,430
the your your scripts and reg X and so

00:16:44,640 --> 00:16:50,040
on because the HTML version was not

00:16:47,430 --> 00:16:55,800
stable you could have some strings that

00:16:50,040 --> 00:16:57,600
were edited slightly so what worked back

00:16:55,800 --> 00:17:02,700
in was not working

00:16:57,600 --> 00:17:06,209
after a while and basically that was a

00:17:02,700 --> 00:17:08,310
really nice idea to get grass at the

00:17:06,209 --> 00:17:12,150
time to understand what was going on

00:17:08,310 --> 00:17:15,570
with packages but in the long run we

00:17:12,150 --> 00:17:17,220
don't want to do that anymore so it was

00:17:15,570 --> 00:17:21,000
time to switch to machine readable

00:17:17,220 --> 00:17:23,760
things and fortunately we've got machine

00:17:21,000 --> 00:17:27,480
readable excuses so instead of looking

00:17:23,760 --> 00:17:27,689
at HTML files there's also an excuse is

00:17:27,480 --> 00:17:33,680
that

00:17:27,689 --> 00:17:40,440
Yaman file that you can like paths with

00:17:33,680 --> 00:17:42,900
real tools and they are also saved and

00:17:40,440 --> 00:17:45,330
archived for later use so you

00:17:42,900 --> 00:17:47,910
can look at exactly what happened on the

00:17:45,330 --> 00:17:50,640
very first Brittany run on the first of

00:17:47,910 --> 00:17:54,120
February this year but also you can look

00:17:50,640 --> 00:17:58,530
back into previous years and so on so

00:17:54,120 --> 00:18:03,150
here it's just an accept on the package

00:17:58,530 --> 00:18:06,060
EB entry back in early February we see

00:18:03,150 --> 00:18:09,180
there's non-free with dependencies so

00:18:06,060 --> 00:18:12,000
the migrates after with all the packages

00:18:09,180 --> 00:18:17,190
we've seen before we've got an excuse

00:18:12,000 --> 00:18:21,660
this item which oh very much looks like

00:18:17,190 --> 00:18:25,020
what's in the HTML page we see that not

00:18:21,660 --> 00:18:27,270
that this package is not a candidate

00:18:25,020 --> 00:18:29,190
because it's being blocked for whatever

00:18:27,270 --> 00:18:33,780
reason it's not going to be considered

00:18:29,190 --> 00:18:37,790
for migration to testing we've got some

00:18:33,780 --> 00:18:41,100
initiative like version and so on and

00:18:37,790 --> 00:18:43,490
under police info we've got the many

00:18:41,100 --> 00:18:47,520
reasons why this package was not

00:18:43,490 --> 00:18:52,340
candidate the age requirement was okay

00:18:47,520 --> 00:18:57,450
it's it's been in unstable for more than

00:18:52,340 --> 00:19:01,350
100 days and it only needed five so that

00:18:57,450 --> 00:19:05,130
part was really ok the auto package test

00:19:01,350 --> 00:19:07,650
was failing but it has always failed so

00:19:05,130 --> 00:19:12,750
that's not a regression so the verdict

00:19:07,650 --> 00:19:15,650
is passed so that was not a blocker and

00:19:12,750 --> 00:19:19,170
then we've got some other checks on

00:19:15,650 --> 00:19:22,830
block I guess is there block hint or

00:19:19,170 --> 00:19:25,260
something like that and bill dependents

00:19:22,830 --> 00:19:27,930
some other stuff I'm not going to look

00:19:25,260 --> 00:19:30,390
into all of them I'm just going to note

00:19:27,930 --> 00:19:33,450
that there was a release critical bug

00:19:30,390 --> 00:19:35,880
anyway basically the package was not

00:19:33,450 --> 00:19:38,610
working at all so it was not a good idea

00:19:35,880 --> 00:19:45,390
to to try and push it into testing at

00:19:38,610 --> 00:19:48,090
this point anyway so based on this Yama

00:19:45,390 --> 00:19:51,120
file it's really easy to iterate over

00:19:48,090 --> 00:19:54,100
all the packages maybe limit yourself to

00:19:51,120 --> 00:19:57,360
one set of package that you want to

00:19:54,100 --> 00:20:01,060
to look specifically into or to generate

00:19:57,360 --> 00:20:03,850
not one graph but as many graphs as

00:20:01,060 --> 00:20:06,160
there are clusters so sets of packages

00:20:03,850 --> 00:20:14,350
that are depending on each other and

00:20:06,160 --> 00:20:16,480
then look at the big picture for so the

00:20:14,350 --> 00:20:19,150
big picture is split into many graphs

00:20:16,480 --> 00:20:24,370
but you've got a clear picture for all

00:20:19,150 --> 00:20:30,370
of the of the set of packages so I'm

00:20:24,370 --> 00:20:33,430
going to switch to a browser so that's a

00:20:30,370 --> 00:20:37,690
page that was generated with what's in

00:20:33,430 --> 00:20:39,250
the archive today one might argue it

00:20:37,690 --> 00:20:42,070
doesn't really make sense because we are

00:20:39,250 --> 00:20:44,020
all frozen and so on but looking back a

00:20:42,070 --> 00:20:46,600
few months ago that was looking

00:20:44,020 --> 00:20:49,030
basically the same way because packages

00:20:46,600 --> 00:20:51,400
that were ready or getting ready on a

00:20:49,030 --> 00:20:55,060
regular basis were migrating to testing

00:20:51,400 --> 00:21:01,030
anyway so it was basically looking the

00:20:55,060 --> 00:21:04,000
same so we've got many packages involved

00:21:01,030 --> 00:21:06,220
and a really really really really big

00:21:04,000 --> 00:21:11,710
picture so I'm not going to look at that

00:21:06,220 --> 00:21:14,080
one specifically but the the idea of

00:21:11,710 --> 00:21:17,080
this page was to have some kind of

00:21:14,080 --> 00:21:20,470
overview for for example release team

00:21:17,080 --> 00:21:22,930
members to have a feeling what is going

00:21:20,470 --> 00:21:25,720
on what is blocking what are the big set

00:21:22,930 --> 00:21:28,960
of packages and so on it was an easy way

00:21:25,720 --> 00:21:32,110
to search for a package and get the

00:21:28,960 --> 00:21:35,340
appropriate graph I'm going to look at

00:21:32,110 --> 00:21:39,910
some other specific graphs that I picked

00:21:35,340 --> 00:21:43,000
earlier the first one is again

00:21:39,910 --> 00:21:46,450
Averell I said that was a really easy

00:21:43,000 --> 00:21:49,600
case at first I thought there was only a

00:21:46,450 --> 00:21:53,680
Lanka boy but in turn there's also a

00:21:49,600 --> 00:21:58,270
long ranch so it's really like look at

00:21:53,680 --> 00:22:00,010
the base or something but still pretty

00:21:58,270 --> 00:22:03,600
easy to figure out you could have

00:22:00,010 --> 00:22:03,600
clicked through two packages

00:22:05,040 --> 00:22:13,560
here we have an example of specific

00:22:09,210 --> 00:22:16,170
topic which is Android Android tools you

00:22:13,560 --> 00:22:18,150
see that packages can depend on some

00:22:16,170 --> 00:22:20,490
other package that itself depend on the

00:22:18,150 --> 00:22:24,300
first one you you can have circular

00:22:20,490 --> 00:22:32,130
dependencies and on the left side I try

00:22:24,300 --> 00:22:35,220
to to inject some some extra information

00:22:32,130 --> 00:22:39,510
which is looking into not only source

00:22:35,220 --> 00:22:41,820
packages which we have seen all the time

00:22:39,510 --> 00:22:45,140
but also look at the binary packages

00:22:41,820 --> 00:22:49,700
because one of the reason for packages

00:22:45,140 --> 00:22:52,730
not to be candidate for migration is

00:22:49,700 --> 00:22:56,420
dependencies between binary packages and

00:22:52,730 --> 00:23:00,750
sometimes you can have dependencies on

00:22:56,420 --> 00:23:03,900
package a or package B or package C and

00:23:00,750 --> 00:23:06,990
you can also have provides so a package

00:23:03,900 --> 00:23:11,130
is provided by another one so I've tried

00:23:06,990 --> 00:23:14,490
to work on implementing some binary

00:23:11,130 --> 00:23:20,520
lookup so that's why there are gray gray

00:23:14,490 --> 00:23:23,930
boxes on some words that was that one is

00:23:20,520 --> 00:23:28,290
another specific ecosystem which is Cody

00:23:23,930 --> 00:23:30,600
previous previously known as XBMC which

00:23:28,290 --> 00:23:34,560
is basically a TV station of some sort

00:23:30,600 --> 00:23:38,400
you can see that some add-ons package

00:23:34,560 --> 00:23:42,210
depends on many many many packages which

00:23:38,400 --> 00:23:47,660
themselves depend on a common package

00:23:42,210 --> 00:23:47,660
which which is some platform package

00:23:47,750 --> 00:23:56,880
that other one is kind of outlines the

00:23:54,480 --> 00:24:00,420
link we can have between different tool

00:23:56,880 --> 00:24:05,570
chains so here we have octave which is

00:24:00,420 --> 00:24:09,570
math oriented which depends on GCC and

00:24:05,570 --> 00:24:14,810
we see some two chain cross two chains

00:24:09,570 --> 00:24:14,810
packages which also depends on GCC

00:24:15,500 --> 00:24:22,970
that one is about per packages so

00:24:19,450 --> 00:24:28,340
apparently all of them depend in some

00:24:22,970 --> 00:24:33,559
way on some HTML parser that one is for

00:24:28,340 --> 00:24:38,929
PHP that one is for Ruby that one is a

00:24:33,559 --> 00:24:41,600
bit larger because apparently some

00:24:38,929 --> 00:24:44,240
people don't really care about like the

00:24:41,600 --> 00:24:47,000
release schedule in Debian and upload

00:24:44,240 --> 00:24:49,039
the package anyway too unstable even if

00:24:47,000 --> 00:24:51,320
there is no way they are going to

00:24:49,039 --> 00:24:53,720
migrate to testing we try to convince

00:24:51,320 --> 00:24:57,799
people not to do that apparently we fail

00:24:53,720 --> 00:25:00,200
with some people so R is a prime

00:24:57,799 --> 00:25:03,559
candidate for a look everyone depends on

00:25:00,200 --> 00:25:06,230
our base and everyone is blocked because

00:25:03,559 --> 00:25:08,809
of this specific dependency but we're in

00:25:06,230 --> 00:25:11,450
freeze anyway but still you can have

00:25:08,809 --> 00:25:14,390
some really big graph like that but that

00:25:11,450 --> 00:25:17,179
one really is really really really small

00:25:14,390 --> 00:25:20,450
when you compare to a scale packages we

00:25:17,179 --> 00:25:23,809
have many rebuilds and package name

00:25:20,450 --> 00:25:26,120
changes and so on and it's not going to

00:25:23,809 --> 00:25:29,330
to render in my favor fox is going to be

00:25:26,120 --> 00:25:31,270
eating all one and so I'm not going to

00:25:29,330 --> 00:25:36,169
complain about that anymore

00:25:31,270 --> 00:25:40,250
that one is for updating your firmware

00:25:36,169 --> 00:25:43,909
on your on your machine which is some

00:25:40,250 --> 00:25:49,100
sign packages which depend on the sauce

00:25:43,909 --> 00:25:53,299
package they were originating from a

00:25:49,100 --> 00:25:57,070
similar package is shim which is the

00:25:53,299 --> 00:26:02,559
really small part that we try to to use

00:25:57,070 --> 00:26:05,750
for secure boot before we switch to grab

00:26:02,559 --> 00:26:08,679
if you want to read more about sign

00:26:05,750 --> 00:26:13,010
stuff and so on I've got blog article

00:26:08,679 --> 00:26:16,760
detailing some some bits but basically

00:26:13,010 --> 00:26:19,130
the same is happening with Linux but we

00:26:16,760 --> 00:26:21,470
don't tend to block Linux for too long

00:26:19,130 --> 00:26:26,090
so it already migrated either at this

00:26:21,470 --> 00:26:28,159
point and if you wonder why kubernetes

00:26:26,090 --> 00:26:30,370
didn't make it into testing that might

00:26:28,159 --> 00:26:30,370
be

00:26:32,030 --> 00:26:37,799
one or many of those packages that were

00:26:34,980 --> 00:26:39,480
not in shape and maybe kubernetes itself

00:26:37,799 --> 00:26:43,710
that was not in shape

00:26:39,480 --> 00:26:47,640
but those other parts we are missing in

00:26:43,710 --> 00:26:49,980
testing to to get kubernetes but again

00:26:47,640 --> 00:26:59,669
we're frozen right now so it wouldn't

00:26:49,980 --> 00:27:05,970
migrate anyway so getting back to my

00:26:59,669 --> 00:27:09,870
papa TB treasure and or something like

00:27:05,970 --> 00:27:12,809
that that's a slightly different graph

00:27:09,870 --> 00:27:18,659
where I took some notes I ended it with

00:27:12,809 --> 00:27:23,730
my dot file to mention release critical

00:27:18,659 --> 00:27:28,350
bugs like the depends on the left bottom

00:27:23,730 --> 00:27:31,110
side or DB Ephesus so the failure to

00:27:28,350 --> 00:27:36,570
build from source or security issues

00:27:31,110 --> 00:27:39,419
with CBE and so on so if we would be

00:27:36,570 --> 00:27:39,840
better to have more information on the

00:27:39,419 --> 00:27:42,150
graph

00:27:39,840 --> 00:27:44,820
not just the set of packages involved

00:27:42,150 --> 00:27:47,789
but for each and every one of them get

00:27:44,820 --> 00:27:50,669
an idea whether their age is okay

00:27:47,789 --> 00:27:54,870
whether they are asked bugs whether they

00:27:50,669 --> 00:27:58,020
are dependency issues and so on but one

00:27:54,870 --> 00:27:59,880
of my issue right now is how do we get

00:27:58,020 --> 00:28:02,549
that into the graph because there are

00:27:59,880 --> 00:28:06,059
already possibly many packages involved

00:28:02,549 --> 00:28:09,000
and I would like very much to have some

00:28:06,059 --> 00:28:11,370
maybe input during questions or later in

00:28:09,000 --> 00:28:14,970
the day regarding some kind of image

00:28:11,370 --> 00:28:17,940
format that would let me have more

00:28:14,970 --> 00:28:20,400
information I've a bird's eye view right

00:28:17,940 --> 00:28:24,419
now and then make it possible to click

00:28:20,400 --> 00:28:27,690
on some item or figure out some color

00:28:24,419 --> 00:28:30,720
code to figure out which package could

00:28:27,690 --> 00:28:33,480
be ready with just like one day or two

00:28:30,720 --> 00:28:40,770
of waiting or maybe with just one bug

00:28:33,480 --> 00:28:45,870
fix or something like that so

00:28:40,770 --> 00:28:49,230
I was anticipating a little so more more

00:28:45,870 --> 00:28:51,660
data on the graphs we I did not mention

00:28:49,230 --> 00:28:54,720
it but we could have the hints by

00:28:51,660 --> 00:29:01,080
release manager for example the unblock

00:28:54,720 --> 00:29:03,420
that we that we use during this time we

00:29:01,080 --> 00:29:05,610
can change we can change the age

00:29:03,420 --> 00:29:09,059
requirements as well we can say hey this

00:29:05,610 --> 00:29:12,090
package is urgently needed in testing so

00:29:09,059 --> 00:29:17,460
we don't care about its actual age we

00:29:12,090 --> 00:29:20,250
want it right now I mentioned a block

00:29:17,460 --> 00:29:24,270
you Deb and so on but basically every

00:29:20,250 --> 00:29:26,490
hint we can give Whitney to which can

00:29:24,270 --> 00:29:30,150
impact a package would be welcomed on

00:29:26,490 --> 00:29:32,130
those graphs and as I said some some way

00:29:30,150 --> 00:29:37,080
to make that clickable zoomable

00:29:32,130 --> 00:29:38,580
expandable or foldable and like I need

00:29:37,080 --> 00:29:42,080
some input because I don't know anything

00:29:38,580 --> 00:29:45,600
about visualization anyway and

00:29:42,080 --> 00:29:50,720
everything is good except those graphs

00:29:45,600 --> 00:29:55,740
are PNG or SVG but I'm not sure how

00:29:50,720 --> 00:29:58,770
accessible an SVG with relationships is

00:29:55,740 --> 00:30:02,370
so maybe it would be good to have some

00:29:58,770 --> 00:30:06,120
way of getting the dot language and then

00:30:02,370 --> 00:30:08,730
transform it into some like text be it

00:30:06,120 --> 00:30:11,490
in English maybe localizable and so on

00:30:08,730 --> 00:30:15,710
so we don't need to actually see the

00:30:11,490 --> 00:30:19,590
graphs to understand what's going on and

00:30:15,710 --> 00:30:21,780
on the infrastructure side I would like

00:30:19,590 --> 00:30:24,390
to integrate that on to release adamian

00:30:21,780 --> 00:30:27,600
dot org also in the Brittany area but

00:30:24,390 --> 00:30:32,010
also maybe on the tracker pages so that

00:30:27,600 --> 00:30:35,700
we can click on on a given package and

00:30:32,010 --> 00:30:40,770
then get the appropriate graph generated

00:30:35,700 --> 00:30:43,620
from for this specific package and as I

00:30:40,770 --> 00:30:46,770
mentioned I try to work on source and

00:30:43,620 --> 00:30:50,220
binary mapping but then you need

00:30:46,770 --> 00:30:54,140
the sources.file from the archive to

00:30:50,220 --> 00:30:57,210
actually get the the mapping so I wanted

00:30:54,140 --> 00:31:01,290
especially when looking back at some all

00:30:57,210 --> 00:31:05,790
excuse dodgy ml file automate grabbing

00:31:01,290 --> 00:31:07,620
the relevant source file directly from

00:31:05,790 --> 00:31:10,740
snapshot that they'd be under dog so

00:31:07,620 --> 00:31:12,750
that we can have the the appropriate

00:31:10,740 --> 00:31:18,120
mapping between source and binary

00:31:12,750 --> 00:31:19,440
packages at the time so thank you so

00:31:18,120 --> 00:31:22,320
much for your attention

00:31:19,440 --> 00:31:26,460
you can read more but some stuff I do

00:31:22,320 --> 00:31:28,920
with my company and for example I

00:31:26,460 --> 00:31:32,450
mentioned the sign packages this the

00:31:28,920 --> 00:31:34,710
secure boot stuff my company's blog and

00:31:32,450 --> 00:31:37,160
questions are welcome we've got eight

00:31:34,710 --> 00:31:37,160
minutes

00:31:37,850 --> 00:31:46,019
[Applause]

00:31:54,240 --> 00:32:00,500
about Bill dependencies so I understand

00:31:56,760 --> 00:32:00,500
that you check bill dependencies only

00:32:09,980 --> 00:32:18,150
okay so I understand that you checked

00:32:15,240 --> 00:32:31,620
bill dependencies only on amd64 is that

00:32:18,150 --> 00:32:36,690
what the bill dependencies for arch

00:32:31,620 --> 00:32:38,580
specific binaries so the bill

00:32:36,690 --> 00:32:41,040
dependencies and the bill depends March

00:32:38,580 --> 00:32:43,550
are checked on all the architectures

00:32:41,040 --> 00:32:46,860
where the binaries are available and

00:32:43,550 --> 00:32:47,910
Bill depends in depth or first checked

00:32:46,860 --> 00:32:50,070
on amd64

00:32:47,910 --> 00:32:51,810
if that doesn't work they are checked on

00:32:50,070 --> 00:32:53,610
all the architectures where there are

00:32:51,810 --> 00:32:58,020
binaries and if that doesn't work on any

00:32:53,610 --> 00:33:01,590
other ones so that should find a

00:32:58,020 --> 00:33:04,470
solution if there is one so that means

00:33:01,590 --> 00:33:08,130
if these are not satisfied interesting

00:33:04,470 --> 00:33:11,150
on at least one architecture then the

00:33:08,130 --> 00:33:13,890
package will not migrate okay that was

00:33:11,150 --> 00:33:17,100
implemented fairly recently so at the

00:33:13,890 --> 00:33:19,410
beginning of the best early cycle only

00:33:17,100 --> 00:33:21,000
our specific ones were checked so there

00:33:19,410 --> 00:33:23,610
were some packages that migrated to

00:33:21,000 --> 00:33:25,470
testing that were not where the bill

00:33:23,610 --> 00:33:27,300
dependencies were not available so that

00:33:25,470 --> 00:33:31,520
problem should be solved now but it

00:33:27,300 --> 00:33:31,520
wasn't a a year ago

00:33:37,720 --> 00:33:43,720
thanks for your red talk and you walk in

00:33:40,180 --> 00:33:47,500
Libyan it could be also interesting to

00:33:43,720 --> 00:33:53,200
do back port packages to know if a

00:33:47,500 --> 00:33:57,340
package is in stable do you it is a

00:33:53,200 --> 00:34:00,010
possible to have for example with the

00:33:57,340 --> 00:34:08,920
color box to know if a package is in

00:34:00,010 --> 00:34:13,390
stable you mean when preparing some

00:34:08,920 --> 00:34:16,390
package for back pods yeah I guess it's

00:34:13,390 --> 00:34:22,390
feasible basically the idea is just

00:34:16,390 --> 00:34:24,610
looking at other excuses or maybe you

00:34:22,390 --> 00:34:27,030
can basically do the same with the

00:34:24,610 --> 00:34:29,770
archive itself and just look at

00:34:27,030 --> 00:34:32,620
dependencies and so on and establish

00:34:29,770 --> 00:34:36,580
some graph it's really flexible and

00:34:32,620 --> 00:34:40,450
really dumb actually you might run into

00:34:36,580 --> 00:34:43,540
issues with version different version

00:34:40,450 --> 00:34:46,750
dependencies and provides and so on but

00:34:43,540 --> 00:34:48,280
I guess you could just use apps to

00:34:46,750 --> 00:34:51,910
figure out the build append the

00:34:48,280 --> 00:34:55,750
dependencies and then render that in on

00:34:51,910 --> 00:34:58,930
some graph I believe at even as some dot

00:34:55,750 --> 00:35:05,080
command or had at some point so it

00:34:58,930 --> 00:35:07,720
should be feasible just one short

00:35:05,080 --> 00:35:09,820
comment you mentioned that you want to

00:35:07,720 --> 00:35:12,360
look up sources on the snapshot that

00:35:09,820 --> 00:35:15,250
Devon a dog for to find out binary

00:35:12,360 --> 00:35:17,590
mapping yeahbsolutely mapping actually

00:35:15,250 --> 00:35:20,710
what you really want to check is the

00:35:17,590 --> 00:35:22,600
binary package because sometimes you can

00:35:20,710 --> 00:35:24,790
have a binary package built by multiple

00:35:22,600 --> 00:35:26,950
source package and to find out which one

00:35:24,790 --> 00:35:29,620
which source is really responsible for

00:35:26,950 --> 00:35:32,650
it you have to look up to everything I

00:35:29,620 --> 00:35:36,010
wanted to keep the talk short so I

00:35:32,650 --> 00:35:38,470
didn't dwell into the specifics of multi

00:35:36,010 --> 00:35:41,650
sources and multi packages but yeah okay

00:35:38,470 --> 00:35:44,680
so I had a question also the graph

00:35:41,650 --> 00:35:48,340
includes the all the relationships based

00:35:44,680 --> 00:35:50,970
on the my grades after and blocked by I

00:35:48,340 --> 00:35:54,300
didn't do mention the distinction

00:35:50,970 --> 00:35:55,980
as well keep it short but does this list

00:35:54,300 --> 00:35:58,349
include all dependencies or only

00:35:55,980 --> 00:36:01,650
dependencies where there are different

00:35:58,349 --> 00:36:04,109
versions in testing and in unstable it's

00:36:01,650 --> 00:36:05,190
all packages mentioned in the excuses

00:36:04,109 --> 00:36:08,760
okay

00:36:05,190 --> 00:36:09,540
so then you would have to ask evokes

00:36:08,760 --> 00:36:13,109
okay

00:36:09,540 --> 00:36:16,500
that means the graph might expand if

00:36:13,109 --> 00:36:19,700
other packages get too bloated it might

00:36:16,500 --> 00:36:19,700
light later okay

00:36:23,240 --> 00:36:28,890
excuses file lists either blocked by or

00:36:26,700 --> 00:36:30,569
migrates after that means that it can

00:36:28,890 --> 00:36:31,650
only migrate if the other package

00:36:30,569 --> 00:36:34,079
migrates as well

00:36:31,650 --> 00:36:36,390
if there's a dependency that is already

00:36:34,079 --> 00:36:38,369
satisfied in testing then it won't be

00:36:36,390 --> 00:36:41,010
mansions so if it's mentioned in the

00:36:38,369 --> 00:36:45,470
excuses file then it's really something

00:36:41,010 --> 00:36:45,470
that needs to be fixed for it to migrate

00:36:51,440 --> 00:36:55,069
two minutes till

00:37:02,100 --> 00:37:12,040
we have to just one point two minutes

00:37:05,170 --> 00:37:14,470
for the latest question okay feel free

00:37:12,040 --> 00:37:17,860
to grab me for any more question during

00:37:14,470 --> 00:37:23,860
the day or tomorrow morning and again

00:37:17,860 --> 00:37:27,150
thank you so much thank you thank you

00:37:23,860 --> 00:37:27,150

YouTube URL: https://www.youtube.com/watch?v=rn9advuRNBk


