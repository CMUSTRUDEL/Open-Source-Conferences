Title: Why Debian should (or should not) make systemd the default
Publication date: 2017-11-29
Playlist: DebConf 13
Description: 
	by Lennart Poettering
by Kay Sievers

At: DebConf13
https://debconf13.debconf.org/
Room: Main talk room
Scheduled start: 2013-08-12 16:30:00
Captions: 
	00:00:00,030 --> 00:00:07,500
okay hi I'm Leonard paddling and I'm

00:00:05,220 --> 00:00:11,550
going to do a talk today together with

00:00:07,500 --> 00:00:12,990
Kai who hid there in the first row where

00:00:11,550 --> 00:00:16,460
they're guys behind systemd

00:00:12,990 --> 00:00:19,380
or at least two guys behind systemd and

00:00:16,460 --> 00:00:23,609
yeah the the topic of the talk is going

00:00:19,380 --> 00:00:27,000
to be like the thought that we have made

00:00:23,609 --> 00:00:28,890
ourselves about why daddy and sugar

00:00:27,000 --> 00:00:30,840
should not adopt system me as a default

00:00:28,890 --> 00:00:33,059
of course it's not really our decision

00:00:30,840 --> 00:00:35,610
and we are after all Fedora guys

00:00:33,059 --> 00:00:39,079
ourselves but of course we are always

00:00:35,610 --> 00:00:41,879
interested in in healthy community and

00:00:39,079 --> 00:00:43,230
cooperating with everybody else so yeah

00:00:41,879 --> 00:00:46,469
the first part of the talk is going to

00:00:43,230 --> 00:00:48,180
be about the why and the second part of

00:00:46,469 --> 00:00:50,760
about the talk is going to be about the

00:00:48,180 --> 00:00:52,829
why not and yeah we have a lot of ground

00:00:50,760 --> 00:00:54,360
to cover but still if you guys have any

00:00:52,829 --> 00:00:56,100
questions I would really prefer if we

00:00:54,360 --> 00:00:58,260
could make this interactive and you're

00:00:56,100 --> 00:01:00,030
awesome right away in the worst case I

00:00:58,260 --> 00:01:03,030
might just say let's just cut that

00:01:00,030 --> 00:01:05,220
particular thing later but hopefully we

00:01:03,030 --> 00:01:08,689
can make this more interactive than just

00:01:05,220 --> 00:01:11,630
me talking and you guys listening so

00:01:08,689 --> 00:01:14,310
yeah let's get started with the why oh

00:01:11,630 --> 00:01:17,310
by the way I know I tend to speak quite

00:01:14,310 --> 00:01:19,560
slow if it's just quite fast if it's too

00:01:17,310 --> 00:01:23,100
fast for anybody just tell me and I'll

00:01:19,560 --> 00:01:26,000
try to be slower okay so the why let's

00:01:23,100 --> 00:01:30,000
first start was a little bit mother

00:01:26,000 --> 00:01:31,920
superficialities of the project it is it

00:01:30,000 --> 00:01:33,090
is a very healthy open-source project we

00:01:31,920 --> 00:01:35,400
believe that it has a very large

00:01:33,090 --> 00:01:37,290
community if you look at the statistics

00:01:35,400 --> 00:01:40,890
we have six and forty one mailing list

00:01:37,290 --> 00:01:43,049
members 424 get contributors of those

00:01:40,890 --> 00:01:45,329
240 ones we're already from you deaf

00:01:43,049 --> 00:01:46,500
of course you cannot just sub if you're

00:01:45,329 --> 00:01:48,500
just interested in the ones that are

00:01:46,500 --> 00:01:51,450
only committed to system you cannot just

00:01:48,500 --> 00:01:53,790
subtract the 241 from the phone in there

00:01:51,450 --> 00:01:56,070
24 because there are quite a few who

00:01:53,790 --> 00:01:57,659
contributed to both we have 17 different

00:01:56,070 --> 00:02:02,159
good committers from a couple of

00:01:57,659 --> 00:02:04,979
different companies we have 253

00:02:02,159 --> 00:02:06,329
committees or 30 contributors per month

00:02:04,979 --> 00:02:10,110
of course

00:02:06,329 --> 00:02:12,000
the 17 good committers um like there's

00:02:10,110 --> 00:02:13,630
no denying most of the stuff that's done

00:02:12,000 --> 00:02:15,970
is done by me and by

00:02:13,630 --> 00:02:18,670
Khai and by speaking if and by Mikah and

00:02:15,970 --> 00:02:20,490
a couple of others most of them work for

00:02:18,670 --> 00:02:23,080
Red Hat with some exceptions but

00:02:20,490 --> 00:02:25,060
actually among those 17 good committers

00:02:23,080 --> 00:02:26,980
we even have people from canonical we

00:02:25,060 --> 00:02:28,180
have people from from Intel I don't

00:02:26,980 --> 00:02:29,680
think the canonical people actually

00:02:28,180 --> 00:02:36,490
realize that they have commit access to

00:02:29,680 --> 00:02:37,540
system deep hmm well it's assistant me

00:02:36,490 --> 00:02:38,920
part anyway

00:02:37,540 --> 00:02:41,800
but you guys have chromatics access to

00:02:38,920 --> 00:02:43,750
everything in theory anyway

00:02:41,800 --> 00:02:45,790
so yeah I think if you if you read it

00:02:43,750 --> 00:02:46,990
from that it's a very healthy project

00:02:45,790 --> 00:02:50,110
I'll leave it to you to figure out how

00:02:46,990 --> 00:02:52,720
that compares to that other competitor

00:02:50,110 --> 00:02:55,420
we have no CLI no copyright assignment

00:02:52,720 --> 00:02:58,930
we just the real open source project we

00:02:55,420 --> 00:03:00,310
are LGPL three a two plus basically like

00:02:58,930 --> 00:03:01,840
we don't want to have anything to do

00:03:00,310 --> 00:03:03,820
with politics so we choose something

00:03:01,840 --> 00:03:05,500
that everybody can agree on and that is

00:03:03,820 --> 00:03:08,980
while still copyleft the most liberal

00:03:05,500 --> 00:03:12,340
form of copyleft it's inherently cross

00:03:08,980 --> 00:03:13,900
distribution we have of course a lot of

00:03:12,340 --> 00:03:16,150
people from fedora working on it but the

00:03:13,900 --> 00:03:17,470
our clinics people have adopted it so it

00:03:16,150 --> 00:03:18,820
has a lot of support for that there's

00:03:17,470 --> 00:03:20,020
some patches coming from the Debian

00:03:18,820 --> 00:03:22,030
people from the Susi people who have

00:03:20,020 --> 00:03:23,500
adopted as well um everybody is

00:03:22,030 --> 00:03:25,210
important and tries to pull into one

00:03:23,500 --> 00:03:27,520
direction and of course has mentioned

00:03:25,210 --> 00:03:29,530
there multiple vendors like you have

00:03:27,520 --> 00:03:32,050
rehab behind it Souza behind it you have

00:03:29,530 --> 00:03:33,190
Intel behind it you have quite a few

00:03:32,050 --> 00:03:34,570
other companies you have a lot of

00:03:33,190 --> 00:03:37,810
embedded companies you have the car

00:03:34,570 --> 00:03:40,060
companies there's a lot of of a

00:03:37,810 --> 00:03:41,800
commercial power behind it and

00:03:40,060 --> 00:03:43,540
everybody's welcome and we mean that

00:03:41,800 --> 00:03:45,400
right like we will if you send us a

00:03:43,540 --> 00:03:47,020
patch we will consider it in the worst

00:03:45,400 --> 00:03:49,690
case you will get an explanation why not

00:03:47,020 --> 00:03:53,770
but usually we'll try to to accommodate

00:03:49,690 --> 00:03:56,860
for your needs and we use git actually

00:03:53,770 --> 00:03:58,780
for our community stuff so we try to be

00:03:56,860 --> 00:04:00,550
like how an open-source project should

00:03:58,780 --> 00:04:01,870
be just the thing that you can

00:04:00,550 --> 00:04:05,380
contribute to without sinking because

00:04:01,870 --> 00:04:07,209
everybody knows good anyway yeah we do

00:04:05,380 --> 00:04:09,310
like community a lot we have multiple

00:04:07,209 --> 00:04:11,860
hackfest for year and we try to get

00:04:09,310 --> 00:04:14,410
everybody to attend that sometimes even

00:04:11,860 --> 00:04:16,150
include some that we sponsor people to

00:04:14,410 --> 00:04:18,780
come to our hackfest like the last one

00:04:16,150 --> 00:04:21,609
we actually had last weekend and Brunell

00:04:18,780 --> 00:04:23,470
like we even got like in the previous

00:04:21,609 --> 00:04:24,910
one we got a couple of people from our

00:04:23,470 --> 00:04:25,870
clinics attending actually this one as

00:04:24,910 --> 00:04:27,470
well

00:04:25,870 --> 00:04:29,630
and so yeah we

00:04:27,470 --> 00:04:31,580
truly want to be healthy projects there

00:04:29,630 --> 00:04:33,500
and the hack fists are awesome like a

00:04:31,580 --> 00:04:35,840
lot of really constructive stuff always

00:04:33,500 --> 00:04:37,100
comes out of that yeah of course we

00:04:35,840 --> 00:04:39,380
participate in numerous conferences over

00:04:37,100 --> 00:04:40,940
the year we attend all the conference

00:04:39,380 --> 00:04:43,760
and try to make sure that everybody

00:04:40,940 --> 00:04:45,470
understands where we are going and I can

00:04:43,760 --> 00:04:47,780
make themselves hurt to drive it into

00:04:45,470 --> 00:04:49,430
the direction that they want we make

00:04:47,780 --> 00:04:51,050
sure that we always present at the

00:04:49,430 --> 00:04:53,210
developer conferences that matter matter

00:04:51,050 --> 00:04:55,490
like I don't know plumbers control Lake

00:04:53,210 --> 00:04:57,440
like this one so that people can talk to

00:04:55,490 --> 00:04:59,540
us and we can talk to them and we kind

00:04:57,440 --> 00:05:02,720
of kind of figure out what people

00:04:59,540 --> 00:05:05,480
actually want from this stuff our focus

00:05:02,720 --> 00:05:07,820
is service desktop cloud and metod like

00:05:05,480 --> 00:05:10,640
Linux itself basically right we don't

00:05:07,820 --> 00:05:12,170
focus on one specific part and we're

00:05:10,640 --> 00:05:14,060
strong on those of course as you might

00:05:12,170 --> 00:05:16,790
know rel 7 is going to ship system nee

00:05:14,060 --> 00:05:19,160
rel 7 is like most famous for being a

00:05:16,790 --> 00:05:21,200
server operating system it's relevant

00:05:19,160 --> 00:05:23,330
for the desktop as you know genome and

00:05:21,200 --> 00:05:24,890
to things like you like that used a lot

00:05:23,330 --> 00:05:26,540
of system new functionality simply

00:05:24,890 --> 00:05:28,610
because we provided a lot of

00:05:26,540 --> 00:05:32,210
functionality that others don't really

00:05:28,610 --> 00:05:33,919
do cloud the same embedded it's it's

00:05:32,210 --> 00:05:35,690
it's it's actually very popular and

00:05:33,919 --> 00:05:38,600
embedded like there are companies who do

00:05:35,690 --> 00:05:40,550
do build it into two wind turbines and

00:05:38,600 --> 00:05:42,919
of course the car companies who build it

00:05:40,550 --> 00:05:46,700
into cars and there's built into toys

00:05:42,919 --> 00:05:48,770
and it's built into like a telescopes

00:05:46,700 --> 00:05:50,810
that look into the sky and all of that

00:05:48,770 --> 00:05:55,130
already now there's a question over

00:05:50,810 --> 00:05:57,020
there yes so I'll try I'll probably

00:05:55,130 --> 00:06:01,550
forget it in five minutes but then tell

00:05:57,020 --> 00:06:04,720
me again yeah it has more than three

00:06:01,550 --> 00:06:07,750
years of development we started it even

00:06:04,720 --> 00:06:11,210
more a little bit over three years ago

00:06:07,750 --> 00:06:13,010
nowadays it's use in production as soon

00:06:11,210 --> 00:06:15,440
yeah and we're currently working on

00:06:13,010 --> 00:06:17,330
including it in and rel seven so you

00:06:15,440 --> 00:06:21,440
probably see it on all your service very

00:06:17,330 --> 00:06:23,540
soon - yeah so much about the

00:06:21,440 --> 00:06:25,760
superficial stuff right about the

00:06:23,540 --> 00:06:27,350
community things and how we we do things

00:06:25,760 --> 00:06:29,090
and are we yeah

00:06:27,350 --> 00:06:32,300
let's now focus a little bit more on

00:06:29,090 --> 00:06:33,680
technical things so one thing that is

00:06:32,300 --> 00:06:34,550
actually I think one of the most

00:06:33,680 --> 00:06:36,740
important things

00:06:34,550 --> 00:06:38,210
it's we believe that system nee is

00:06:36,740 --> 00:06:40,580
technically the right seeing the right

00:06:38,210 --> 00:06:41,330
design of course it will have bugs like

00:06:40,580 --> 00:06:43,849
any software

00:06:41,330 --> 00:06:47,599
but at least phenomenally our designers

00:06:43,849 --> 00:06:48,889
right of course you can only say that

00:06:47,599 --> 00:06:50,900
this design is right if you look at the

00:06:48,889 --> 00:06:52,939
other designs before like there's of

00:06:50,900 --> 00:06:54,680
course a system five-minute which I'm

00:06:52,939 --> 00:06:56,479
belief and most people probably believe

00:06:54,680 --> 00:06:58,789
at this point is systematically flawed

00:06:56,479 --> 00:07:00,710
because it doesn't react to the actual

00:06:58,789 --> 00:07:02,750
things that happen on the system right

00:07:00,710 --> 00:07:07,039
it assumes that hardware's mostly static

00:07:02,750 --> 00:07:09,379
that device is like like how does show

00:07:07,039 --> 00:07:12,439
up at a very specific point in time and

00:07:09,379 --> 00:07:14,770
then are there and never change and the

00:07:12,439 --> 00:07:18,050
ordering is very simplistic I guess

00:07:14,770 --> 00:07:19,819
we're systemd all of that is not true

00:07:18,050 --> 00:07:21,590
we actually can listen to devices

00:07:19,819 --> 00:07:23,360
showing up and when we boot up the

00:07:21,590 --> 00:07:25,430
Machine we will actually um wait for

00:07:23,360 --> 00:07:27,379
device to show up run the file system

00:07:25,430 --> 00:07:30,080
checks on them and mount them and things

00:07:27,379 --> 00:07:31,669
like that so yeah system D is about this

00:07:30,080 --> 00:07:33,500
dynamic thing that can adjust to what's

00:07:31,669 --> 00:07:35,870
actually happening on the system because

00:07:33,500 --> 00:07:37,759
system systems work very different

00:07:35,870 --> 00:07:39,680
nowadays and they worked 30 years ago

00:07:37,759 --> 00:07:41,569
because everything is dynamic and you

00:07:39,680 --> 00:07:44,419
add this and that and everything like

00:07:41,569 --> 00:07:46,729
that of course if you compare it to the

00:07:44,419 --> 00:07:48,770
other contender which is upstart we

00:07:46,729 --> 00:07:50,569
believe that I mean the reason we

00:07:48,770 --> 00:07:51,919
initially created system me actually is

00:07:50,569 --> 00:07:54,680
because we believe that the offset

00:07:51,919 --> 00:07:58,580
design was wrong a little bit about the

00:07:54,680 --> 00:08:00,979
history there we started like I played

00:07:58,580 --> 00:08:02,870
around with with a little project I

00:08:00,979 --> 00:08:04,069
called baby kit you know it was back at

00:08:02,870 --> 00:08:07,789
the time where everything had to be a

00:08:04,069 --> 00:08:09,589
kit this baby kid thing was supposed to

00:08:07,789 --> 00:08:10,279
be like an experiment how we think that

00:08:09,589 --> 00:08:12,650
should work

00:08:10,279 --> 00:08:14,150
and then upstart came along and then I

00:08:12,650 --> 00:08:16,069
put that aside because we actually

00:08:14,150 --> 00:08:19,879
believed that upset would be the the big

00:08:16,069 --> 00:08:22,819
in great future however over over a year

00:08:19,879 --> 00:08:24,560
or so and after talk is seeing Scott and

00:08:22,819 --> 00:08:25,909
couple of times the the plumbers con

00:08:24,560 --> 00:08:27,500
we've eventually figured out that

00:08:25,909 --> 00:08:29,750
Scott's probably not giving us what we

00:08:27,500 --> 00:08:32,479
want and we believe that inherently it

00:08:29,750 --> 00:08:35,659
had the wrong design the reason what

00:08:32,479 --> 00:08:38,539
exactly is broken there is basically

00:08:35,659 --> 00:08:39,919
what up stirred does is you have a you

00:08:38,539 --> 00:08:41,599
have a language how you can express how

00:08:39,919 --> 00:08:43,550
events happen and what's supposed to be

00:08:41,599 --> 00:08:46,010
done that way what system he does

00:08:43,550 --> 00:08:50,420
instead is you express relations between

00:08:46,010 --> 00:08:52,940
things now one is a lot more more

00:08:50,420 --> 00:08:54,920
flexible and powerful than the other

00:08:52,940 --> 00:08:55,250
because in one thing you basically have

00:08:54,920 --> 00:08:56,900
the

00:08:55,250 --> 00:08:58,730
- try to figure out what should happen

00:08:56,900 --> 00:09:00,980
or the developer what should happen in

00:08:58,730 --> 00:09:03,440
which case you write that down and then

00:09:00,980 --> 00:09:04,790
upstart will just execute it however in

00:09:03,440 --> 00:09:06,920
the system you design why you have to

00:09:04,790 --> 00:09:08,840
dependency tree basic you just say these

00:09:06,920 --> 00:09:10,780
are the dependencies and then the system

00:09:08,840 --> 00:09:13,280
will figure out what to do at what place

00:09:10,780 --> 00:09:16,010
this has a couple of effects like for

00:09:13,280 --> 00:09:17,420
example and system D if you want to have

00:09:16,010 --> 00:09:19,160
a minimal boot you want to just start

00:09:17,420 --> 00:09:21,320
that and that and that it's relatively

00:09:19,160 --> 00:09:23,450
easy thing to do because you simply look

00:09:21,320 --> 00:09:25,820
at the dependency graph figure out what

00:09:23,450 --> 00:09:26,840
you want pull in all the dependency and

00:09:25,820 --> 00:09:28,280
run it in the right order

00:09:26,840 --> 00:09:29,900
this of course systematically more

00:09:28,280 --> 00:09:31,580
different and more difficult was after

00:09:29,900 --> 00:09:32,900
because the after of rules in the first

00:09:31,580 --> 00:09:34,790
place have to express what actually

00:09:32,900 --> 00:09:37,190
happens on the system

00:09:34,790 --> 00:09:39,110
this eventually becomes even more

00:09:37,190 --> 00:09:41,630
problematic like for example something

00:09:39,110 --> 00:09:43,550
very recent is the rearrangement of C

00:09:41,630 --> 00:09:45,530
groups I'm not sure if you guys have

00:09:43,550 --> 00:09:48,920
follow that C groups are they saying how

00:09:45,530 --> 00:09:51,110
you can attach a label to a set of

00:09:48,920 --> 00:09:55,250
processes and then optionally said a

00:09:51,110 --> 00:09:56,930
couple of resource values should like

00:09:55,250 --> 00:10:00,260
for example you can say Apache it gets

00:09:56,930 --> 00:10:02,810
as much CPU time as my secret regardless

00:10:00,260 --> 00:10:06,950
how many processes Apache starts and how

00:10:02,810 --> 00:10:09,200
few my sequel where start and yeah so

00:10:06,950 --> 00:10:11,600
with the resource handling with C groups

00:10:09,200 --> 00:10:13,580
you suddenly have this problem that if

00:10:11,600 --> 00:10:16,220
you have multiple services which are

00:10:13,580 --> 00:10:18,500
basically should be handled the same way

00:10:16,220 --> 00:10:20,900
you need to propagate certain syncs

00:10:18,500 --> 00:10:22,670
between these services right for example

00:10:20,900 --> 00:10:24,890
if you have a patchy and you have my

00:10:22,670 --> 00:10:26,510
sequel running in the same slice as we

00:10:24,890 --> 00:10:28,550
call it and you need to make sure that

00:10:26,510 --> 00:10:31,070
either both of them have CPU limits

00:10:28,550 --> 00:10:32,839
applied on neither of them so and this

00:10:31,070 --> 00:10:34,370
case gets more complex as there's entire

00:10:32,839 --> 00:10:36,650
and an entire dependence tree where you

00:10:34,370 --> 00:10:38,720
have to walk up the the tree to the root

00:10:36,650 --> 00:10:40,430
and do enable and things like that

00:10:38,720 --> 00:10:42,140
now we're system Lee was the designs

00:10:40,430 --> 00:10:43,700
it's very very easy because we have the

00:10:42,140 --> 00:10:46,310
dependency tree so you can just walk it

00:10:43,700 --> 00:10:48,290
an offset again this dependency tree

00:10:46,310 --> 00:10:50,030
doesn't exist and this the the you you

00:10:48,290 --> 00:10:51,589
cannot just do that I don't know I I'm

00:10:50,030 --> 00:10:52,820
figure the upstart people will

00:10:51,589 --> 00:10:55,940
eventually figure that out in themselves

00:10:52,820 --> 00:10:57,260
but yeah this summary of it all is I can

00:10:55,940 --> 00:10:59,030
talk about that for a long long time I

00:10:57,260 --> 00:11:00,589
figure if you if you haven't looked at

00:10:59,030 --> 00:11:02,480
the details of what app stunts system to

00:11:00,589 --> 00:11:04,220
do there you probably can't really deal

00:11:02,480 --> 00:11:06,920
with much of what I say in this regard

00:11:04,220 --> 00:11:09,050
but inherently we believe the upstart

00:11:06,920 --> 00:11:11,420
design was in the system five minutes

00:11:09,050 --> 00:11:13,490
designed for before it was inherently

00:11:11,420 --> 00:11:15,140
flawed at its core it's not how we

00:11:13,490 --> 00:11:16,970
should do these things we should have a

00:11:15,140 --> 00:11:19,220
dependency tree so that we can figure

00:11:16,970 --> 00:11:21,320
out all the right things and yeah that's

00:11:19,220 --> 00:11:22,760
the reason why system nee was invented

00:11:21,320 --> 00:11:25,100
and that why we believe that it

00:11:22,760 --> 00:11:26,300
technically is the right thing and none

00:11:25,100 --> 00:11:28,520
of the current contenders other

00:11:26,300 --> 00:11:30,680
contenders can do that be themselves in

00:11:28,520 --> 00:11:32,780
five minute I'll start open RC or

00:11:30,680 --> 00:11:35,210
whatever else you prefer

00:11:32,780 --> 00:11:37,070
yeah it's used as API by other projects

00:11:35,210 --> 00:11:39,200
I know that some people don't like that

00:11:37,070 --> 00:11:41,330
fact but the simple thing is like the

00:11:39,200 --> 00:11:43,160
lower levels of operating systems they

00:11:41,330 --> 00:11:45,320
exist to provide services to

00:11:43,160 --> 00:11:46,640
applications making use of them and that

00:11:45,320 --> 00:11:51,050
of course means that these applications

00:11:46,640 --> 00:11:52,640
need to use those things yeah this like

00:11:51,050 --> 00:11:55,850
a couple of different API is of course

00:11:52,640 --> 00:11:57,320
PID one's own API so there's a couple of

00:11:55,850 --> 00:11:59,690
other things like little mechanisms to

00:11:57,320 --> 00:12:01,280
change the time to change locale

00:11:59,690 --> 00:12:01,940
settings to change hostname of these

00:12:01,280 --> 00:12:04,520
kind of things

00:12:01,940 --> 00:12:06,140
there's one little bit larger one which

00:12:04,520 --> 00:12:08,360
maintains user session these kind of

00:12:06,140 --> 00:12:10,190
stuff it's all the things that we need

00:12:08,360 --> 00:12:12,560
nowadays and the desktop interface is

00:12:10,190 --> 00:12:15,620
actually in to interface with so yeah

00:12:12,560 --> 00:12:17,030
projects use our api's desktop project

00:12:15,620 --> 00:12:19,490
as much as server projects actually

00:12:17,030 --> 00:12:21,470
because we haven't have these things in

00:12:19,490 --> 00:12:23,060
there called socket activation I'm not

00:12:21,470 --> 00:12:25,700
going to go into much detail about what

00:12:23,060 --> 00:12:27,920
socket activation is suffice to say it's

00:12:25,700 --> 00:12:30,860
wonderful technology to make your system

00:12:27,920 --> 00:12:33,500
faster more reliable and then things

00:12:30,860 --> 00:12:34,970
like that so about how ever to make use

00:12:33,500 --> 00:12:36,500
of this kind of socket activation you

00:12:34,970 --> 00:12:38,540
need to patch your project in a certain

00:12:36,500 --> 00:12:41,600
way of course and those are system the

00:12:38,540 --> 00:12:44,930
IP is anyway so yeah it's it's something

00:12:41,600 --> 00:12:47,150
why you want system D of course um yeah

00:12:44,930 --> 00:12:49,640
simply to make to be able to run these

00:12:47,150 --> 00:12:51,940
things on system II and we actually

00:12:49,640 --> 00:12:54,560
believe that unification is a good thing

00:12:51,940 --> 00:12:56,330
of course you can say it's a weird way

00:12:54,560 --> 00:12:59,030
to unify things by starting at another

00:12:56,330 --> 00:13:00,710
project if all you wanted to is making

00:12:59,030 --> 00:13:02,150
sure that everybody uses the same but

00:13:00,710 --> 00:13:05,240
yeah we believe that unification is the

00:13:02,150 --> 00:13:06,980
same is a good thing we don't need a

00:13:05,240 --> 00:13:08,840
thousand different implementations of

00:13:06,980 --> 00:13:10,460
course well this is the worst the goal

00:13:08,840 --> 00:13:12,380
we of course quite far of that because

00:13:10,460 --> 00:13:14,300
well the most popular Linux distribution

00:13:12,380 --> 00:13:16,790
doesn't use it why do we still believe

00:13:14,300 --> 00:13:18,500
that that is helpful for application

00:13:16,790 --> 00:13:20,840
developers if they just have to focus on

00:13:18,500 --> 00:13:23,570
one API instead of thousand

00:13:20,840 --> 00:13:25,970
yeah then what's also interesting

00:13:23,570 --> 00:13:27,770
specifically for Debian is sometimes we

00:13:25,970 --> 00:13:29,690
push or quite often probably more than

00:13:27,770 --> 00:13:31,730
from any other distribution we push

00:13:29,690 --> 00:13:33,560
Debian designs insistently defaults this

00:13:31,730 --> 00:13:36,290
can be various different things like for

00:13:33,560 --> 00:13:37,970
example in many many distributions the

00:13:36,290 --> 00:13:39,230
way how the local host name was

00:13:37,970 --> 00:13:42,350
configured was a completely different

00:13:39,230 --> 00:13:44,990
like Devi news acetc hostname Fedora

00:13:42,350 --> 00:13:47,390
used something like e TC sis config

00:13:44,990 --> 00:13:48,620
network or something like that another

00:13:47,390 --> 00:13:49,850
distribution you use something

00:13:48,620 --> 00:13:52,160
completely different for the most

00:13:49,850 --> 00:13:53,450
trivial setting of the system at all and

00:13:52,160 --> 00:13:56,690
we looked at all of that and said okay

00:13:53,450 --> 00:13:58,700
if system nee has to configure the

00:13:56,690 --> 00:14:00,260
hostname at boot then let's do that but

00:13:58,700 --> 00:14:02,420
let's not support 20 different

00:14:00,260 --> 00:14:05,089
configuration formers of which 19 are

00:14:02,420 --> 00:14:06,860
completely moronic so yeah in this case

00:14:05,089 --> 00:14:08,779
for example we decided yeah the Debian

00:14:06,860 --> 00:14:10,250
one which just etc' hostname is the

00:14:08,779 --> 00:14:12,020
prettiest one the simplest one the most

00:14:10,250 --> 00:14:14,510
logic one let's just make this the

00:14:12,020 --> 00:14:16,100
default this doesn't mean that we

00:14:14,510 --> 00:14:17,480
immediately broke compatibility with all

00:14:16,100 --> 00:14:21,260
the other distributions including our

00:14:17,480 --> 00:14:23,089
own this just meant that yeah the Debian

00:14:21,260 --> 00:14:25,100
why how this was done was the best

00:14:23,089 --> 00:14:26,480
supported is the one that just works out

00:14:25,100 --> 00:14:27,620
of the box but if people want to use

00:14:26,480 --> 00:14:30,170
something else they can still plug in

00:14:27,620 --> 00:14:31,790
whatever they want anyway so ultimately

00:14:30,170 --> 00:14:33,500
we do that all the time like that there

00:14:31,790 --> 00:14:35,000
are specific Debian choices or from

00:14:33,500 --> 00:14:36,589
other distributions coming in to them I

00:14:35,000 --> 00:14:38,120
sing in a summer you probably adopted

00:14:36,589 --> 00:14:40,570
more Debian sings than any from any

00:14:38,120 --> 00:14:42,560
other distribution well yeah

00:14:40,570 --> 00:14:47,150
so yeah this might be something

00:14:42,560 --> 00:14:48,920
sympathetic already yeah this is the

00:14:47,150 --> 00:14:50,570
different thing used everywhere anyway

00:14:48,920 --> 00:14:53,600
like long anytime that the locality

00:14:50,570 --> 00:14:56,240
hostname D you death as it turns out

00:14:53,600 --> 00:14:57,800
system D we had this little bit of a

00:14:56,240 --> 00:15:00,710
focus change like originally we started

00:14:57,800 --> 00:15:02,660
out as purely an in system and then we

00:15:00,710 --> 00:15:04,580
figured out well during boot there's are

00:15:02,660 --> 00:15:06,230
quite a few other things involved and we

00:15:04,580 --> 00:15:09,020
turned it into this basic building block

00:15:06,230 --> 00:15:11,420
to build an operating system from and

00:15:09,020 --> 00:15:13,190
then we added log in D time did the lock

00:15:11,420 --> 00:15:16,970
ald hostname we already mentioned them

00:15:13,190 --> 00:15:18,740
in unity we merge into that these tools

00:15:16,970 --> 00:15:20,180
are generally all read also used by

00:15:18,740 --> 00:15:22,360
other distributions like Ubuntu for

00:15:20,180 --> 00:15:25,310
example recently adopted log in D and

00:15:22,360 --> 00:15:26,930
yeah and simply because of them the

00:15:25,310 --> 00:15:29,750
desktops like to use these things and

00:15:26,930 --> 00:15:31,640
because they're saying it clean now yeah

00:15:29,750 --> 00:15:33,950
if you use all that stuff anyway you

00:15:31,640 --> 00:15:34,790
might as well just use the the real

00:15:33,950 --> 00:15:37,490
thing

00:15:34,790 --> 00:15:41,060
right if you look at upstart like or ad

00:15:37,490 --> 00:15:42,770
Boone - how they use how how they use

00:15:41,060 --> 00:15:44,960
all the system D components they have

00:15:42,770 --> 00:15:46,760
all of these in there and then they have

00:15:44,960 --> 00:15:48,410
the system use shimmed even so that

00:15:46,760 --> 00:15:52,820
there's a couple of the other API is are

00:15:48,410 --> 00:15:55,790
provided so I don't know anyway so this

00:15:52,820 --> 00:15:59,930
is about more like the technical overall

00:15:55,790 --> 00:16:01,940
things but a big thing we believe my

00:15:59,930 --> 00:16:04,070
system you should be default they simply

00:16:01,940 --> 00:16:05,360
features simply because there are a lot

00:16:04,070 --> 00:16:09,140
of features that we can do that that

00:16:05,360 --> 00:16:11,060
nobody else can really do it's like hot

00:16:09,140 --> 00:16:12,260
plug hot like meaning like everything I

00:16:11,060 --> 00:16:15,320
already mentioned that is dynamic and

00:16:12,260 --> 00:16:16,910
system D and you can wecan can run the

00:16:15,320 --> 00:16:19,250
entire boot up at the right time and

00:16:16,910 --> 00:16:20,810
then in spawn FS check when the device

00:16:19,250 --> 00:16:22,220
shows up and things like that which by

00:16:20,810 --> 00:16:23,810
the way is an action interesting thing

00:16:22,220 --> 00:16:25,370
we're also beliefs head up start shows

00:16:23,810 --> 00:16:28,100
that it's a little bit too short in

00:16:25,370 --> 00:16:30,200
design like for example the the phase at

00:16:28,100 --> 00:16:31,430
boot up which is like probably the most

00:16:30,200 --> 00:16:33,650
interesting part of this is where all

00:16:31,430 --> 00:16:36,260
the file systems show up a file system

00:16:33,650 --> 00:16:37,940
checked and mounted right in the system

00:16:36,260 --> 00:16:40,430
we model we can actually express that

00:16:37,940 --> 00:16:42,830
with dependencies right we can say these

00:16:40,430 --> 00:16:44,570
devices have to show up you have to run

00:16:42,830 --> 00:16:46,340
these file system checkers on it then

00:16:44,570 --> 00:16:49,910
you assemble them and that's it an

00:16:46,340 --> 00:16:52,160
upstart they should be tool called Monty

00:16:49,910 --> 00:16:53,570
Hall which implements that at sea which

00:16:52,160 --> 00:16:55,160
is some I don't know it's chickening out

00:16:53,570 --> 00:16:57,020
it's like we they have this dependency

00:16:55,160 --> 00:16:59,480
system like not not dependency system

00:16:57,020 --> 00:17:00,860
this event system and ultimately it's

00:16:59,480 --> 00:17:04,330
not sufficient to actually make this

00:17:00,860 --> 00:17:04,330
very very basic thing work

00:17:09,720 --> 00:17:15,010
hi I'm maintaining by the way my name is

00:17:13,180 --> 00:17:17,770
James Hunt mount all is a helper

00:17:15,010 --> 00:17:20,170
application that upstart makes use of to

00:17:17,770 --> 00:17:21,420
avoid polluting bid one with additional

00:17:20,170 --> 00:17:23,950
complexity there's no library

00:17:21,420 --> 00:17:25,210
dependencies it does a fantastic job it

00:17:23,950 --> 00:17:26,620
can express everything you've just

00:17:25,210 --> 00:17:28,720
you've just described somebody can do in

00:17:26,620 --> 00:17:30,910
terms of mounting with events

00:17:28,720 --> 00:17:32,710
yeah well the system who doesn't pollute

00:17:30,910 --> 00:17:35,020
pretty one was that ERISA but anyway I

00:17:32,710 --> 00:17:37,900
think it's it's a bit of chickening out

00:17:35,020 --> 00:17:39,310
you have this this this nice thing you

00:17:37,900 --> 00:17:41,140
can express events with them but you

00:17:39,310 --> 00:17:42,580
can't can't even express the most core

00:17:41,140 --> 00:17:45,040
bit of it that's something you do in a

00:17:42,580 --> 00:17:46,870
completely different binary we run

00:17:45,040 --> 00:17:48,610
certain certain helpers out a process

00:17:46,870 --> 00:17:50,760
that's not chickening out that's that's

00:17:48,610 --> 00:17:53,200
to ensure system resilience to failure

00:17:50,760 --> 00:17:54,880
well I mean but you have already one

00:17:53,200 --> 00:17:57,610
event player but anyway let's discuss us

00:17:54,880 --> 00:17:59,950
maybe later but it's like Adam so

00:17:57,610 --> 00:18:02,650
multi-seat multi-seat is something that

00:17:59,950 --> 00:18:04,180
isn't very like the core of what

00:18:02,650 --> 00:18:06,520
traditional unix used to be right the

00:18:04,180 --> 00:18:08,320
entire terminal scheme that we have is

00:18:06,520 --> 00:18:10,300
something about multiple seats of course

00:18:08,320 --> 00:18:12,070
mostly taxi like you have a keyboard and

00:18:10,300 --> 00:18:13,300
a screen and that's about it like the

00:18:12,070 --> 00:18:14,410
other odd way you have is basically a

00:18:13,300 --> 00:18:15,700
bell

00:18:14,410 --> 00:18:17,320
where's multi seat support that's

00:18:15,700 --> 00:18:19,510
building system you get all of all of

00:18:17,320 --> 00:18:21,250
that back but in a modern way right so

00:18:19,510 --> 00:18:23,020
you get graphical stuff and you kept all

00:18:21,250 --> 00:18:25,870
the fanciness that we actually tags

00:18:23,020 --> 00:18:28,210
through the device tree of you death -

00:18:25,870 --> 00:18:30,220
which seed this particular vice belongs

00:18:28,210 --> 00:18:31,810
where's the effect that you can have one

00:18:30,220 --> 00:18:33,820
machine with multiple seats and then

00:18:31,810 --> 00:18:35,560
even if you plug in a USB stick or your

00:18:33,820 --> 00:18:37,030
sound card into one specific seat it

00:18:35,560 --> 00:18:40,030
will only show up on that seat and not

00:18:37,030 --> 00:18:41,890
the other ones resource management which

00:18:40,030 --> 00:18:43,390
i think is absolutely at the core of

00:18:41,890 --> 00:18:46,030
everything that service management is

00:18:43,390 --> 00:18:48,430
about resource management being that you

00:18:46,030 --> 00:18:52,870
can say that apache gets as much CPU as

00:18:48,430 --> 00:18:55,420
as apache or that you can pin i don't

00:18:52,870 --> 00:18:57,460
know oracle to one cpu and something

00:18:55,420 --> 00:18:59,020
else to three different CPUs or that he

00:18:57,460 --> 00:19:00,940
can limit the memory of third and things

00:18:59,020 --> 00:19:02,590
that's very much at the core of what

00:19:00,940 --> 00:19:04,540
minute administrators need to do about

00:19:02,590 --> 00:19:06,100
services and system lee all of that is

00:19:04,540 --> 00:19:07,290
built in you have them as high-level

00:19:06,100 --> 00:19:10,660
properties

00:19:07,290 --> 00:19:13,390
logging and system the everything is

00:19:10,660 --> 00:19:15,250
logged from the first moment of the boot

00:19:13,390 --> 00:19:16,690
meaning like like if you use a system

00:19:15,250 --> 00:19:18,820
lee enabled in the ground just like we

00:19:16,690 --> 00:19:20,530
do it fedora dragged for example like

00:19:18,820 --> 00:19:22,990
Harold

00:19:20,530 --> 00:19:25,870
then you actually get logging the same

00:19:22,990 --> 00:19:28,500
way as for later services already from

00:19:25,870 --> 00:19:30,460
the very earliest bits of user space and

00:19:28,500 --> 00:19:33,370
this is actually incredibly useful

00:19:30,460 --> 00:19:34,960
because usually um it's a hardest thing

00:19:33,370 --> 00:19:36,370
to debug if your machine doesn't boot up

00:19:34,960 --> 00:19:38,620
because it hangs them or in the inner

00:19:36,370 --> 00:19:40,510
diary so yeah and the other thing is

00:19:38,620 --> 00:19:42,970
like consistently every single service

00:19:40,510 --> 00:19:44,890
gets connected to - to the journal by

00:19:42,970 --> 00:19:47,169
default I think that's true faster as

00:19:44,890 --> 00:19:49,600
well nowadays but we had to doll for a

00:19:47,169 --> 00:19:52,059
long long time already but anyway so the

00:19:49,600 --> 00:19:54,130
the general theme here is everything's

00:19:52,059 --> 00:19:56,409
locked regardless like as soon as user

00:19:54,130 --> 00:20:00,640
space is up everything is nicely split

00:19:56,409 --> 00:20:03,760
up nicely indexed and ends up in the log

00:20:00,640 --> 00:20:05,110
files we have nice things like watchdog

00:20:03,760 --> 00:20:07,659
support right

00:20:05,110 --> 00:20:09,820
we believe it's inherently important for

00:20:07,659 --> 00:20:11,080
service management if you have a have a

00:20:09,820 --> 00:20:12,789
service you need to make sure that it

00:20:11,080 --> 00:20:14,559
keeps running and if it stops responding

00:20:12,789 --> 00:20:16,270
then you probably should restart it and

00:20:14,559 --> 00:20:18,370
on the same thing and the hardware is

00:20:16,270 --> 00:20:20,140
like if you have hardware like watchdog

00:20:18,370 --> 00:20:22,090
Hardware like almost all modern

00:20:20,140 --> 00:20:25,090
computers have like even my laptop has

00:20:22,090 --> 00:20:27,190
hardware and how it will watchdog we

00:20:25,090 --> 00:20:28,809
should make use of that in system ly we

00:20:27,190 --> 00:20:30,820
have that all built in right there's a

00:20:28,809 --> 00:20:33,280
hierarchical watchdog support basically

00:20:30,820 --> 00:20:35,559
systemd will watch your services while

00:20:33,280 --> 00:20:37,720
the hardware watches systemd and it's in

00:20:35,559 --> 00:20:39,610
the in the inner loop like our system

00:20:37,720 --> 00:20:41,260
you write built-in it's something that

00:20:39,610 --> 00:20:42,340
came from the amorite people but

00:20:41,260 --> 00:20:43,900
actually on the other end of the

00:20:42,340 --> 00:20:46,630
spectrum on the on the high availability

00:20:43,900 --> 00:20:48,100
server side it's also incredibly useful

00:20:46,630 --> 00:20:53,350
because that's how you actually reach

00:20:48,100 --> 00:20:55,900
you 99.999 percent reliability cgroups i

00:20:53,350 --> 00:20:57,909
think it's that's kind of related to the

00:20:55,900 --> 00:21:01,090
resource management thing cgroups is

00:20:57,909 --> 00:21:03,059
something that nowadays is used by all

00:21:01,090 --> 00:21:05,740
kinds of thing like containers for by

00:21:03,059 --> 00:21:07,059
virtualization like like other kind of

00:21:05,740 --> 00:21:10,030
virtualization for service management

00:21:07,059 --> 00:21:11,799
and so on with system me it's built-in

00:21:10,030 --> 00:21:13,900
right we use it in every possible way

00:21:11,799 --> 00:21:16,600
which is really really nice because

00:21:13,900 --> 00:21:18,820
actually services are tracked on the

00:21:16,600 --> 00:21:20,919
kernel level and we attach labels about

00:21:18,820 --> 00:21:22,480
which service that is to the processes

00:21:20,919 --> 00:21:24,970
in the kernel will actually inherit them

00:21:22,480 --> 00:21:26,620
natively inside this has nice effects

00:21:24,970 --> 00:21:28,690
like on none of them modern fedora

00:21:26,620 --> 00:21:30,460
system you can actually type yes we're

00:21:28,690 --> 00:21:32,500
with a special parameter and will

00:21:30,460 --> 00:21:32,710
actually show you for each process to

00:21:32,500 --> 00:21:34,809
wait

00:21:32,710 --> 00:21:38,890
service that belongs and this is thing

00:21:34,809 --> 00:21:40,720
like it's actually incredibly um was

00:21:38,890 --> 00:21:42,429
incredibly missing from traditional unix

00:21:40,720 --> 00:21:44,230
because if you had Apache for example

00:21:42,429 --> 00:21:46,360
Apache would fork off a lot of workers

00:21:44,230 --> 00:21:47,830
Fred processes and those worker

00:21:46,360 --> 00:21:50,559
processes would fork off a lot of CGI

00:21:47,830 --> 00:21:52,539
scripts then you lost track about the

00:21:50,559 --> 00:21:55,720
the relation of these worker process

00:21:52,539 --> 00:21:56,980
CGI's processes to his original Apache

00:21:55,720 --> 00:21:58,240
because they could double fork and

00:21:56,980 --> 00:22:00,010
completely detached from the original

00:21:58,240 --> 00:22:01,750
session which system D that's not

00:22:00,010 --> 00:22:03,640
possible because we you see groups and

00:22:01,750 --> 00:22:06,809
everything like the definition of water

00:22:03,640 --> 00:22:10,450
services in transcends the entire stack

00:22:06,809 --> 00:22:12,700
from the desktop to the to the servers

00:22:10,450 --> 00:22:14,620
to services all the way to the kernel

00:22:12,700 --> 00:22:16,659
later on this will probably enable us to

00:22:14,620 --> 00:22:18,130
do all kinds of new more amazing things

00:22:16,659 --> 00:22:22,330
like hooking it up as a firewall and

00:22:18,130 --> 00:22:24,460
things like that yeah there's really

00:22:22,330 --> 00:22:27,370
nice chrome support it's like um all

00:22:24,460 --> 00:22:29,500
these things um um just work like the

00:22:27,370 --> 00:22:31,690
genome can currently log to to to the

00:22:29,500 --> 00:22:33,880
journals have it in next genome can make

00:22:31,690 --> 00:22:35,049
use of this time date hostname D blah

00:22:33,880 --> 00:22:36,510
blah blah there's things that already

00:22:35,049 --> 00:22:38,890
mentioned quite a few of other things

00:22:36,510 --> 00:22:40,539
green room is also very likely to move

00:22:38,890 --> 00:22:42,460
through system D as a session manager

00:22:40,539 --> 00:22:44,230
because much of the problem said that

00:22:42,460 --> 00:22:46,809
you need to boot up the system is

00:22:44,230 --> 00:22:48,309
actually um equally useful to boot up

00:22:46,809 --> 00:22:50,080
the session the problems are the same

00:22:48,309 --> 00:22:52,360
you need to start a couple of process in

00:22:50,080 --> 00:22:55,110
the short time and you need to wait for

00:22:52,360 --> 00:22:58,090
them to do to happen the right time

00:22:55,110 --> 00:23:01,390
there's nice features like FSS FSS is

00:22:58,090 --> 00:23:06,580
something called forwards secure ceiling

00:23:01,390 --> 00:23:07,990
it's it's a technology I'm like which is

00:23:06,580 --> 00:23:10,600
built-ins a logging system system we

00:23:07,990 --> 00:23:12,279
call term Journal it basically allows

00:23:10,600 --> 00:23:14,350
you to that if your machine is hacked

00:23:12,279 --> 00:23:15,730
right and you traditionally have the

00:23:14,350 --> 00:23:18,010
problem that the attacker will try to

00:23:15,730 --> 00:23:20,260
remove that change the log files like

00:23:18,010 --> 00:23:21,490
remove his traces from the log files so

00:23:20,260 --> 00:23:24,700
that you have no chance to actually

00:23:21,490 --> 00:23:26,140
figure out that it was broken into the

00:23:24,700 --> 00:23:27,520
usual the traditional way to deal with

00:23:26,140 --> 00:23:29,590
that is that you immediately log

00:23:27,520 --> 00:23:32,049
everything to a central lock server so

00:23:29,590 --> 00:23:35,350
if the attacker attacks your your single

00:23:32,049 --> 00:23:37,120
server then yeah all the traces of that

00:23:35,350 --> 00:23:39,039
are already at the safe location

00:23:37,120 --> 00:23:41,409
somewhere else so that it can actually

00:23:39,039 --> 00:23:44,289
try that back at us as is supposed to be

00:23:41,409 --> 00:23:46,600
an alternative solution to them won't

00:23:44,289 --> 00:23:48,940
solve the exact same problem

00:23:46,600 --> 00:23:51,940
but it basically was with cryptography

00:23:48,940 --> 00:23:54,549
it will make sure that through

00:23:51,940 --> 00:23:56,970
constantly changing sealing keys that

00:23:54,549 --> 00:23:59,410
after the tack I broke into your system

00:23:56,970 --> 00:24:00,940
he can change he can basically delete

00:23:59,410 --> 00:24:02,980
all the log files but he cannot change

00:24:00,940 --> 00:24:05,470
them anymore simply because the old keys

00:24:02,980 --> 00:24:08,020
that the stuff was sealed was are

00:24:05,470 --> 00:24:10,210
forgotten right so it's a it's a it's a

00:24:08,020 --> 00:24:12,010
very useful technology that just dances

00:24:10,210 --> 00:24:14,049
to me we're profiling and debugging

00:24:12,010 --> 00:24:16,900
built-in writing system five-minute most

00:24:14,049 --> 00:24:18,730
people use shell in a way or another to

00:24:16,900 --> 00:24:20,700
actually debug the system and system Lee

00:24:18,730 --> 00:24:23,049
that's actually core part of what we do

00:24:20,700 --> 00:24:25,270
so for example we have interactive booed

00:24:23,049 --> 00:24:27,340
app we have a tool called system we

00:24:25,270 --> 00:24:29,200
analyzed was actually like it can give

00:24:27,340 --> 00:24:31,840
you entire dump of what the state is it

00:24:29,200 --> 00:24:34,179
will give you output that you can put

00:24:31,840 --> 00:24:36,010
through goo dot or is not renewed up but

00:24:34,179 --> 00:24:37,840
so that graph is thing that will show

00:24:36,010 --> 00:24:40,030
you the dependencies it includes a

00:24:37,840 --> 00:24:41,440
Bouchard implementation so that you can

00:24:40,030 --> 00:24:44,320
actually figure out what's actually slow

00:24:41,440 --> 00:24:46,330
in my boot and so on and so on it's all

00:24:44,320 --> 00:24:50,289
built in and it's all accessible as API

00:24:46,330 --> 00:24:51,549
applications socket activation I already

00:24:50,289 --> 00:24:52,960
mentioned that problem not going to in

00:24:51,549 --> 00:24:54,970
too much detail but it's a wonderful

00:24:52,960 --> 00:24:57,179
thing to make things more reliable it

00:24:54,970 --> 00:24:59,500
allows you to do things like like

00:24:57,179 --> 00:25:00,909
restarting a service without having to

00:24:59,500 --> 00:25:03,130
close the socket without losing

00:25:00,909 --> 00:25:05,740
connectivity it does even stuff nowadays

00:25:03,130 --> 00:25:08,710
that you can can have 20 containers

00:25:05,740 --> 00:25:10,570
listen on 20 IP addresses and ports but

00:25:08,710 --> 00:25:13,330
instead of starting this containers

00:25:10,570 --> 00:25:14,799
right away you can totally delay that

00:25:13,330 --> 00:25:16,960
until the first connection comes in

00:25:14,799 --> 00:25:18,549
which is a wonderful technique to drive

00:25:16,960 --> 00:25:20,650
up your your density on the server

00:25:18,549 --> 00:25:22,690
because you have and can have a lot of

00:25:20,650 --> 00:25:24,610
containers and they take up very little

00:25:22,690 --> 00:25:27,250
little little CPU as long as they're not

00:25:24,610 --> 00:25:29,020
running but to the to the user side is

00:25:27,250 --> 00:25:30,610
completely invisible that they're not

00:25:29,020 --> 00:25:31,900
running and as soon as it goes says

00:25:30,610 --> 00:25:38,500
first connection comes in they're

00:25:31,900 --> 00:25:41,080
automatically started security is built

00:25:38,500 --> 00:25:43,720
in like this for our security matters so

00:25:41,080 --> 00:25:45,130
in system D of course everything in the

00:25:43,720 --> 00:25:46,630
system he does itself always runs at

00:25:45,130 --> 00:25:48,130
minimal privileges with no care

00:25:46,630 --> 00:25:50,140
abilities and things like that but also

00:25:48,130 --> 00:25:53,340
for all the services we provide really

00:25:50,140 --> 00:25:56,559
nice settings you can set for example

00:25:53,340 --> 00:25:59,110
you can also change the capabilities of

00:25:56,559 --> 00:26:00,250
certain services you can you can adapt

00:25:59,110 --> 00:26:02,680
like you can make

00:26:00,250 --> 00:26:04,450
directory is invisible for services you

00:26:02,680 --> 00:26:06,760
can make directories read-only for

00:26:04,450 --> 00:26:09,700
services and there's quite a few other

00:26:06,760 --> 00:26:11,350
things but I just built in and not made

00:26:09,700 --> 00:26:14,140
I made use of default like for example

00:26:11,350 --> 00:26:15,850
in all the fedora we nowadays ship

00:26:14,140 --> 00:26:19,000
things so that every service gets its

00:26:15,850 --> 00:26:21,070
own instance of /tmp which solves a huge

00:26:19,000 --> 00:26:23,230
amount of security problems regarding

00:26:21,070 --> 00:26:25,210
certain people so yeah for us it matters

00:26:23,230 --> 00:26:27,010
that security is built-in and is

00:26:25,210 --> 00:26:28,570
actually we considered part of service

00:26:27,010 --> 00:26:31,240
management and not an optional

00:26:28,570 --> 00:26:34,000
functionality something yeah those are

00:26:31,240 --> 00:26:35,350
these are completely random features

00:26:34,000 --> 00:26:39,070
that we just picked there's a lot more

00:26:35,350 --> 00:26:40,390
in system D actually so let's focus on

00:26:39,070 --> 00:26:43,000
three small things that are coming up

00:26:40,390 --> 00:26:46,540
very soon as one of them is apps apps in

00:26:43,000 --> 00:26:47,680
the sense having a parameters that are

00:26:46,540 --> 00:26:49,480
basically you can run on every

00:26:47,680 --> 00:26:51,280
distribution and they will just work in

00:26:49,480 --> 00:26:52,660
a secure container which we have been

00:26:51,280 --> 00:26:54,430
working on with your own people it's not

00:26:52,660 --> 00:26:57,790
quite right yet and we'll still take a

00:26:54,430 --> 00:26:59,350
while but it's a it's a it's will

00:26:57,790 --> 00:27:01,510
integrate very closely with system ly

00:26:59,350 --> 00:27:03,400
simply because we believe much of the

00:27:01,510 --> 00:27:05,920
enforcement of the sandboxing needs to

00:27:03,400 --> 00:27:07,210
actually live in the kernel layer and

00:27:05,920 --> 00:27:08,410
needs to be facilitated by the lower

00:27:07,210 --> 00:27:11,200
levels of the stack and shouldn't be

00:27:08,410 --> 00:27:13,570
something it's just bolted on top of

00:27:11,200 --> 00:27:15,370
course apps are something like like we

00:27:13,570 --> 00:27:16,750
believe it's actually an important that

00:27:15,370 --> 00:27:18,610
if we do apps we need to do them right

00:27:16,750 --> 00:27:20,860
so that they work through all the

00:27:18,610 --> 00:27:23,050
distribution and not just one and yeah

00:27:20,860 --> 00:27:24,610
so the next thing is Kady bus katieb is

00:27:23,050 --> 00:27:26,290
something we have been working on for

00:27:24,610 --> 00:27:28,240
the last months and it's actually really

00:27:26,290 --> 00:27:29,590
nice shape already but not not British

00:27:28,240 --> 00:27:31,060
ship yet

00:27:29,590 --> 00:27:32,950
Katie versus they actually pulled of

00:27:31,060 --> 00:27:35,170
Daevas into the kernel

00:27:32,950 --> 00:27:38,620
there's traditionally this weirdness in

00:27:35,170 --> 00:27:40,690
UNIX that that most operating system

00:27:38,620 --> 00:27:42,100
started out with a good IPC system and

00:27:40,690 --> 00:27:44,020
then later built everything on top of

00:27:42,100 --> 00:27:45,790
that this is different was UNIX because

00:27:44,020 --> 00:27:48,640
we never had a good IPC system we had a

00:27:45,790 --> 00:27:50,830
couple of IPC primitives like fifa's and

00:27:48,640 --> 00:27:52,660
then later on sockets but we never had a

00:27:50,830 --> 00:27:54,040
real IPC system was method call these

00:27:52,660 --> 00:27:55,600
kind of things like I mean there

00:27:54,040 --> 00:27:57,610
probably hurt people around here they

00:27:55,600 --> 00:27:59,620
probably are fully aware that the way

00:27:57,610 --> 00:28:04,210
herd started out it was a very good IPC

00:27:59,620 --> 00:28:08,260
now our approach to make Linux can have

00:28:04,210 --> 00:28:10,870
one standard m AP either four four four

00:28:08,260 --> 00:28:13,030
IPC is KD bars katieb especially

00:28:10,870 --> 00:28:14,240
translates as the semantics that that

00:28:13,030 --> 00:28:17,510
user space caddy

00:28:14,240 --> 00:28:18,679
had into the kernel and as it is really

00:28:17,510 --> 00:28:20,870
nice design if you're if you're

00:28:18,679 --> 00:28:23,330
interested and we can talk to you later

00:28:20,870 --> 00:28:26,000
about that it's zero copy and you get

00:28:23,330 --> 00:28:28,400
you get yeah it's it's really nice it's

00:28:26,000 --> 00:28:30,080
it's highly efficient it's it's even

00:28:28,400 --> 00:28:31,670
security like you basically opened up

00:28:30,080 --> 00:28:32,990
the reason we want to have that this is

00:28:31,670 --> 00:28:34,940
also for the app stuff because we

00:28:32,990 --> 00:28:36,320
believe it's like their primary way in

00:28:34,940 --> 00:28:37,790
and out of there should be the primary

00:28:36,320 --> 00:28:40,130
way in and out of the sandbox of a

00:28:37,790 --> 00:28:41,990
container and it has policy attached to

00:28:40,130 --> 00:28:43,760
it and you can actually use it to not

00:28:41,990 --> 00:28:45,800
only do control but you can actually

00:28:43,760 --> 00:28:49,160
pass real data and these kind of things

00:28:45,800 --> 00:28:50,840
it's a fun fundamental step ahead yeah

00:28:49,160 --> 00:28:52,220
Katie bus of course this is something

00:28:50,840 --> 00:28:53,990
that is inherently the user space

00:28:52,220 --> 00:28:55,850
inherently built in system Lea because

00:28:53,990 --> 00:28:57,050
we used to things like socket activation

00:28:55,850 --> 00:28:59,330
share a lot of code it's things like

00:28:57,050 --> 00:29:01,309
that so M it's unlikely that anybody

00:28:59,330 --> 00:29:04,100
what system be systems will have this

00:29:01,309 --> 00:29:05,900
ever then we work with the Weiland and

00:29:04,100 --> 00:29:08,570
people who has this login D come along

00:29:05,900 --> 00:29:10,490
in log in D component was already

00:29:08,570 --> 00:29:13,940
manages seats and devices attached to

00:29:10,490 --> 00:29:15,380
seats and sessions things like that with

00:29:13,940 --> 00:29:17,030
the Weiland people we have been working

00:29:15,380 --> 00:29:19,640
or making sure that Weiland if it runs

00:29:17,030 --> 00:29:21,050
can run entirely in privileged but then

00:29:19,640 --> 00:29:22,820
it still needs a component that can

00:29:21,050 --> 00:29:24,620
actually give access to the actual

00:29:22,820 --> 00:29:27,350
physical device as the device notes and

00:29:24,620 --> 00:29:28,910
the way we do like we came to agreement

00:29:27,350 --> 00:29:30,110
with Sue Ellen people in this regardless

00:29:28,910 --> 00:29:31,490
that Locke and II will just hand the

00:29:30,110 --> 00:29:33,410
mouse because it keeps track of that

00:29:31,490 --> 00:29:35,330
anyway and the code to actually open

00:29:33,410 --> 00:29:37,250
this would be very simple and logger

00:29:35,330 --> 00:29:39,110
India's privilege and Weiland I wouldn't

00:29:37,250 --> 00:29:42,679
then have to be which of course is yeah

00:29:39,110 --> 00:29:45,710
it's really nice for for robustness and

00:29:42,679 --> 00:29:47,780
security then we have integration with

00:29:45,710 --> 00:29:50,360
containers within already in EFI which

00:29:47,780 --> 00:29:52,220
are all kinds of nice things like which

00:29:50,360 --> 00:29:55,370
containers for example we we have to

00:29:52,220 --> 00:29:57,800
find a makasian that most container

00:29:55,370 --> 00:30:00,020
managers nowadays follow how containers

00:29:57,800 --> 00:30:01,760
can pass the UAD into it and a couple of

00:30:00,020 --> 00:30:03,620
other things like how they have to set

00:30:01,760 --> 00:30:05,660
up the environment for assistant system

00:30:03,620 --> 00:30:07,010
so that everything just works because

00:30:05,660 --> 00:30:09,020
traditionally if you ran something

00:30:07,010 --> 00:30:11,660
inside of container you had to change

00:30:09,020 --> 00:30:13,700
the operating system first like we had

00:30:11,660 --> 00:30:15,350
to remove a couple things of from FS to

00:30:13,700 --> 00:30:18,830
having this kind of stuff and remove a

00:30:15,350 --> 00:30:20,600
couple of init scripts with system D it

00:30:18,830 --> 00:30:23,030
is our absolute intention that things

00:30:20,600 --> 00:30:24,890
just work right so that we carefully

00:30:23,030 --> 00:30:27,740
made sure that that net on fedora at

00:30:24,890 --> 00:30:30,830
least we can boot the same image

00:30:27,740 --> 00:30:32,900
and on a bare-metal I think a VM and in

00:30:30,830 --> 00:30:34,970
a container and it will just work and

00:30:32,900 --> 00:30:36,350
always boot up cleanly and there's

00:30:34,970 --> 00:30:39,200
integration within authorities which is

00:30:36,350 --> 00:30:40,850
something that we did for for Dracut so

00:30:39,200 --> 00:30:42,740
yeah you can run the system the inside

00:30:40,850 --> 00:30:44,960
of the energy which is incredibly useful

00:30:42,740 --> 00:30:46,940
it's is it's one of the results actually

00:30:44,960 --> 00:30:49,100
Hara is going to do talk tomorrow about

00:30:46,940 --> 00:30:51,710
breaking about this specific stuff but

00:30:49,100 --> 00:30:54,380
um it actually has this nice effect that

00:30:51,710 --> 00:30:56,120
nowadays Drake wood is faster in in in

00:30:54,380 --> 00:30:59,570
transitioning to the host OS like it

00:30:56,120 --> 00:31:01,850
shortens the the overall boot time over

00:30:59,570 --> 00:31:04,550
the colonel doing it was out in a ready

00:31:01,850 --> 00:31:08,420
at all right which is an amazing result

00:31:04,550 --> 00:31:10,190
and it allows analysis in its systems to

00:31:08,420 --> 00:31:12,470
even do without shell scripts in the

00:31:10,190 --> 00:31:15,230
common cases which is yeah it's how

00:31:12,470 --> 00:31:17,030
housings become fast there's integration

00:31:15,230 --> 00:31:18,830
with EFI boot loaders and things like

00:31:17,030 --> 00:31:20,690
that surpassed performance data around

00:31:18,830 --> 00:31:22,400
so actually system D already mentioned

00:31:20,690 --> 00:31:24,320
that has all these profiling tools built

00:31:22,400 --> 00:31:25,970
in so after boot up you can actually

00:31:24,320 --> 00:31:28,220
type system D analyzed and will tell you

00:31:25,970 --> 00:31:30,080
ok your boot up was slow because so much

00:31:28,220 --> 00:31:32,300
time was was spending the bias in his

00:31:30,080 --> 00:31:33,920
citizen so much time in the boot loader

00:31:32,300 --> 00:31:35,810
so much time in the kernel

00:31:33,920 --> 00:31:38,230
initialization so much time the inner ID

00:31:35,810 --> 00:31:40,610
and so much time a system needs a host

00:31:38,230 --> 00:31:42,680
so yeah it's nicely integrated of call

00:31:40,610 --> 00:31:45,830
of this all of this is the kind of

00:31:42,680 --> 00:31:47,090
optional lose integration so um there

00:31:45,830 --> 00:31:48,950
are no requirements made or anything

00:31:47,090 --> 00:31:52,010
like that and system Lee will boot in

00:31:48,950 --> 00:31:54,710
any case anyway we have integration with

00:31:52,010 --> 00:31:56,330
security frameworks ima as a Linux Mac

00:31:54,710 --> 00:31:59,600
everything that that that people want to

00:31:56,330 --> 00:32:00,980
use they just work right and they have

00:31:59,600 --> 00:32:02,540
written in a way that that all the

00:32:00,980 --> 00:32:05,780
security transitions happen at the

00:32:02,540 --> 00:32:06,860
earliest um like policy loading things

00:32:05,780 --> 00:32:10,070
like that happen at the earliest

00:32:06,860 --> 00:32:12,260
possible point so that every user space

00:32:10,070 --> 00:32:15,470
code that runs will only run with the

00:32:12,260 --> 00:32:17,300
policy applied we have comprehensive

00:32:15,470 --> 00:32:19,250
documentation like we have a huge body

00:32:17,300 --> 00:32:21,680
of man pages and usually people um

00:32:19,250 --> 00:32:23,600
figure that out like because most most

00:32:21,680 --> 00:32:24,800
people say it's badly documented but if

00:32:23,600 --> 00:32:26,720
they actually look they will notice that

00:32:24,800 --> 00:32:29,510
we have man pages for almost like really

00:32:26,720 --> 00:32:31,310
everything and we have a series of blog

00:32:29,510 --> 00:32:33,740
stories and there's lots of community

00:32:31,310 --> 00:32:35,840
documentation there's there's even like

00:32:33,740 --> 00:32:36,400
articles and tapers whatever else you

00:32:35,840 --> 00:32:40,040
want

00:32:36,400 --> 00:32:41,299
and there's actually user friendly since

00:32:40,040 --> 00:32:43,610
we have been doing development of

00:32:41,299 --> 00:32:45,350
three years like for example Journal

00:32:43,610 --> 00:32:46,610
control like you might as might have

00:32:45,350 --> 00:32:48,049
heard of the journal like this logging

00:32:46,610 --> 00:32:50,809
framework or system name some people

00:32:48,049 --> 00:32:53,480
hate it just idea but actually if people

00:32:50,809 --> 00:32:54,799
actually ever touch the the interface

00:32:53,480 --> 00:32:56,960
now they can actually access a journal

00:32:54,799 --> 00:32:58,999
which is general control and will notice

00:32:56,960 --> 00:33:00,710
it's an incredibly user-friendly saying

00:32:58,999 --> 00:33:03,049
because you can filter very very easily

00:33:00,710 --> 00:33:05,480
you can you get colors you could auto

00:33:03,049 --> 00:33:07,639
page and you get you get like separators

00:33:05,480 --> 00:33:09,529
when the reboots happened you get them

00:33:07,639 --> 00:33:12,710
everything it's just really nice to use

00:33:09,529 --> 00:33:14,629
and most people who automatically say oh

00:33:12,710 --> 00:33:16,279
my god is an awful idea doing binary

00:33:14,629 --> 00:33:18,289
logs and things like that as soon as

00:33:16,279 --> 00:33:20,059
they get into touch with journal control

00:33:18,289 --> 00:33:21,320
notice it's actually friendly this

00:33:20,059 --> 00:33:23,239
doesn't mean that people wouldn't have

00:33:21,320 --> 00:33:24,830
to learn anything right it's user

00:33:23,239 --> 00:33:26,330
friendly but it's of course different

00:33:24,830 --> 00:33:29,029
from the stuff that was in there before

00:33:26,330 --> 00:33:31,369
there's a certain learning curve there's

00:33:29,029 --> 00:33:33,080
a learning curve in everything we do

00:33:31,369 --> 00:33:35,659
believe though that the learning curve

00:33:33,080 --> 00:33:38,509
for the processor new tools oh it's much

00:33:35,659 --> 00:33:40,879
much lower than the learning curve is

00:33:38,509 --> 00:33:43,879
for actually dealing with a classic

00:33:40,879 --> 00:33:45,559
system five-minute script the thing of

00:33:43,879 --> 00:33:47,570
course is that people currently most

00:33:45,559 --> 00:33:51,169
people no system five-minute scripts and

00:33:47,570 --> 00:33:52,970
system needs less now so yeah you should

00:33:51,169 --> 00:33:54,799
try it if you will figure out that it's

00:33:52,970 --> 00:33:56,210
actually much nicer now fraction al'lat

00:33:54,799 --> 00:33:58,359
did you see it in every possible way

00:33:56,210 --> 00:34:00,590
like for example system control status

00:33:58,359 --> 00:34:03,109
shows you the current status of a

00:34:00,590 --> 00:34:04,609
service now the most interesting thing

00:34:03,109 --> 00:34:06,230
about that is what we believe is that

00:34:04,609 --> 00:34:08,419
you actually see the log output of that

00:34:06,230 --> 00:34:10,069
service right what is it good knowing

00:34:08,419 --> 00:34:11,599
that the service is still running if you

00:34:10,069 --> 00:34:13,790
don't know anything of what what it's

00:34:11,599 --> 00:34:15,200
doing usually what services are doing

00:34:13,790 --> 00:34:16,819
they log to the log files the system

00:34:15,200 --> 00:34:18,710
control status will always show you the

00:34:16,819 --> 00:34:22,159
taught last ten log lines of everything

00:34:18,710 --> 00:34:24,349
it did so yeah it's it's incredibly

00:34:22,159 --> 00:34:28,639
useful you should really try it if you

00:34:24,349 --> 00:34:30,559
haven't something to say is and we

00:34:28,639 --> 00:34:34,159
provide compatibility with system five

00:34:30,559 --> 00:34:37,339
to fairly a large degree I can't read

00:34:34,159 --> 00:34:39,470
that okay

00:34:37,339 --> 00:34:41,089
we provide compatibility to a fairly

00:34:39,470 --> 00:34:42,799
large degree with ninety five percent

00:34:41,089 --> 00:34:44,960
there's five percent we do not support

00:34:42,799 --> 00:34:47,030
and generally those are init scripts

00:34:44,960 --> 00:34:49,460
that do weird things like for example

00:34:47,030 --> 00:34:51,559
accepting additional parameters after

00:34:49,460 --> 00:34:54,829
the start thing and so on the system

00:34:51,559 --> 00:34:55,010
five-minute command-line basically which

00:34:54,829 --> 00:34:57,350
is

00:34:55,010 --> 00:35:00,200
outside of LSB so our approach there's

00:34:57,350 --> 00:35:03,200
yes we will admit we are not 100%

00:35:00,200 --> 00:35:05,390
compatible very few things are which are

00:35:03,200 --> 00:35:08,290
not system 5 minute but we will document

00:35:05,390 --> 00:35:10,580
them in detail and we can say well

00:35:08,290 --> 00:35:13,100
analysis was already not supported so

00:35:10,580 --> 00:35:14,750
don't really have like mass the net

00:35:13,100 --> 00:35:16,370
effect of that is in fedora we currently

00:35:14,750 --> 00:35:18,050
have more than 80 percent of the package

00:35:16,370 --> 00:35:19,700
is converted to system D but basically

00:35:18,050 --> 00:35:22,190
everything that matters is converted

00:35:19,700 --> 00:35:25,670
system D and so this is really proven to

00:35:22,190 --> 00:35:27,560
actually work really nicely yeah I only

00:35:25,670 --> 00:35:29,540
got 10 minutes so let's get blur so a

00:35:27,560 --> 00:35:31,010
little bit faster UNIX and not Unix I

00:35:29,540 --> 00:35:32,870
know that a lot of people think UNIX is

00:35:31,010 --> 00:35:36,200
the only thing there in religion that is

00:35:32,870 --> 00:35:38,510
worth living for I don't know if you say

00:35:36,200 --> 00:35:40,280
it's not a UNIX and I can tell you 10

00:35:38,510 --> 00:35:42,320
reasons why it is UNIX like for example

00:35:40,280 --> 00:35:44,410
I don't know UNIX means this thing that

00:35:42,320 --> 00:35:46,490
everything is a file in the file system

00:35:44,410 --> 00:35:48,350
system is that much more because we

00:35:46,490 --> 00:35:49,730
actually turn turn all the services into

00:35:48,350 --> 00:35:51,320
actual file like dude I have

00:35:49,730 --> 00:35:53,120
representations of the file system and

00:35:51,320 --> 00:35:54,770
the cgroups stuff and there's a lot of

00:35:53,120 --> 00:35:56,510
other things like for example they the

00:35:54,770 --> 00:35:58,640
multi seat stuff is something a truly

00:35:56,510 --> 00:36:00,110
UNIX idea this was built into the

00:35:58,640 --> 00:36:02,660
terminals that have been invented like

00:36:00,110 --> 00:36:04,280
30 years ago they kind of fell to the

00:36:02,660 --> 00:36:06,200
wayside people only use them for

00:36:04,280 --> 00:36:08,480
debugging service but that was about

00:36:06,200 --> 00:36:10,280
that that we bring them bad was actually

00:36:08,480 --> 00:36:12,770
native a multi seed support it just

00:36:10,280 --> 00:36:16,520
works so yeah anyway I can give you some

00:36:12,770 --> 00:36:18,170
reasons why I'm system knee is more

00:36:16,520 --> 00:36:21,050
unique than everything that came before

00:36:18,170 --> 00:36:23,390
it anyway but then again I don't think

00:36:21,050 --> 00:36:26,090
that the question actually matters right

00:36:23,390 --> 00:36:27,530
I'm this UNIX for us is an inspiration

00:36:26,090 --> 00:36:30,050
it's probably the biggest inspiration we

00:36:27,530 --> 00:36:32,030
have but ultimately our goal is not to

00:36:30,050 --> 00:36:34,550
be the best UNIX our goal is to be the

00:36:32,030 --> 00:36:35,840
to write the best operating system so we

00:36:34,550 --> 00:36:38,030
look actually everywhere you look to

00:36:35,840 --> 00:36:40,310
Solaris we look to to Apple like like

00:36:38,030 --> 00:36:41,510
macros we look to Windows even and if

00:36:40,310 --> 00:36:44,150
they have something that is nice that

00:36:41,510 --> 00:36:46,790
people are alike then we should actually

00:36:44,150 --> 00:36:48,290
think about adding something similar to

00:36:46,790 --> 00:36:50,660
our stuff if it's really good and if

00:36:48,290 --> 00:36:51,920
it's what people want so yeah I don't

00:36:50,660 --> 00:36:54,410
think the question whether something is

00:36:51,920 --> 00:36:56,420
UNIX or not matters but again I'm happy

00:36:54,410 --> 00:36:58,670
to fly this out with you if you still

00:36:56,420 --> 00:37:00,650
believe it's not UNIX anyway there were

00:36:58,670 --> 00:37:03,260
supposed to the block story a couple of

00:37:00,650 --> 00:37:05,660
months ago about 30 myths about any UNIX

00:37:03,260 --> 00:37:07,340
about Linux one of them about system D

00:37:05,660 --> 00:37:08,390
one of them was about the unique thing

00:37:07,340 --> 00:37:11,000
or not and

00:37:08,390 --> 00:37:15,619
want you to have a look at that so the

00:37:11,000 --> 00:37:17,930
why not for us Linux is wealth matters

00:37:15,619 --> 00:37:19,609
that means them yes it is true we do not

00:37:17,930 --> 00:37:21,920
care about the portability to other

00:37:19,609 --> 00:37:23,630
operating systems meaning a free beastie

00:37:21,920 --> 00:37:25,640
or what not we care about portability to

00:37:23,630 --> 00:37:29,269
other architectures absolutely but not

00:37:25,640 --> 00:37:30,589
about the other kernels yeah this is

00:37:29,269 --> 00:37:32,089
this is the thing that you get the

00:37:30,589 --> 00:37:33,410
reason we do this because we expose so

00:37:32,089 --> 00:37:36,140
much functionality that hasn't been

00:37:33,410 --> 00:37:37,279
exposed before like cgroups and and all

00:37:36,140 --> 00:37:41,750
the properties and all these kind of

00:37:37,279 --> 00:37:44,779
things we can't do that if we wouldn't

00:37:41,750 --> 00:37:46,010
decide on which kernel did because much

00:37:44,779 --> 00:37:48,019
as functionality is simply not available

00:37:46,010 --> 00:37:49,069
on other kernels and I know that if

00:37:48,019 --> 00:37:51,200
people say cgroups

00:37:49,069 --> 00:37:53,059
oh you could just use bsd jails it's

00:37:51,200 --> 00:37:54,650
just complete you can't please

00:37:53,059 --> 00:37:58,490
details are something very very

00:37:54,650 --> 00:38:00,260
different anyway so by like we actually

00:37:58,490 --> 00:38:01,519
have his girl to empower the

00:38:00,260 --> 00:38:03,200
administrator with all the

00:38:01,519 --> 00:38:05,510
functionalities that Linux provides him

00:38:03,200 --> 00:38:07,670
with and that's a lot of stuff and

00:38:05,510 --> 00:38:10,039
previously that was not visible because

00:38:07,670 --> 00:38:12,950
everybody tried to to use the minimal

00:38:10,039 --> 00:38:14,329
set of UNIX earning like POSIX but POSIX

00:38:12,950 --> 00:38:17,779
is a standard that is by definition

00:38:14,329 --> 00:38:19,549
minimal and always out-of-date so yeah

00:38:17,779 --> 00:38:20,900
for us Linux this was matters we

00:38:19,549 --> 00:38:24,529
actually want to give you the features

00:38:20,900 --> 00:38:27,589
and yeah the other thing is we work on

00:38:24,529 --> 00:38:30,349
one foundation of an OS not on hundred

00:38:27,589 --> 00:38:32,240
different foundations this means that we

00:38:30,349 --> 00:38:34,430
actually do remove options from time to

00:38:32,240 --> 00:38:35,690
time it doesn't mean that I mean most of

00:38:34,430 --> 00:38:39,410
the time these options really don't

00:38:35,690 --> 00:38:41,450
matter like for example in system D we

00:38:39,410 --> 00:38:43,160
have my support for the Utah Linux

00:38:41,450 --> 00:38:44,900
version of Getty then of any other

00:38:43,160 --> 00:38:46,309
version of Getty like you know Getty is

00:38:44,900 --> 00:38:48,440
this weird thing that just asked for

00:38:46,309 --> 00:38:51,079
password on the serial or on any kind of

00:38:48,440 --> 00:38:53,359
tty it's one of the most trivial

00:38:51,079 --> 00:38:54,980
programs in the entire stack right it

00:38:53,359 --> 00:38:56,900
just ask for password and starts a

00:38:54,980 --> 00:38:58,579
session but there were so many different

00:38:56,900 --> 00:39:01,490
implementations like min Getty and so on

00:38:58,579 --> 00:39:03,710
we just saying from a system decide ok

00:39:01,490 --> 00:39:05,809
we ship you everything so that again he

00:39:03,710 --> 00:39:07,730
just works out of the box if you want to

00:39:05,809 --> 00:39:09,230
do something else it's up to you can do

00:39:07,730 --> 00:39:10,279
that this is how you do it go ahead

00:39:09,230 --> 00:39:12,440
knock yourself out

00:39:10,279 --> 00:39:13,759
however we will only support like one

00:39:12,440 --> 00:39:16,430
because we think this one is the best

00:39:13,759 --> 00:39:18,109
one and this one is yeah because it's a

00:39:16,430 --> 00:39:21,230
boring question nobody cares about what

00:39:18,109 --> 00:39:22,160
Gettys used because it's so trivial so

00:39:21,230 --> 00:39:24,770
yeah answers

00:39:22,160 --> 00:39:26,330
is not a ready product right system is

00:39:24,770 --> 00:39:27,650
something you have to build an operating

00:39:26,330 --> 00:39:29,810
system from like you have to build

00:39:27,650 --> 00:39:32,090
debian from or fedora from or whatnot

00:39:29,810 --> 00:39:33,950
it's nothing that will it's nothing that

00:39:32,090 --> 00:39:35,810
you can install an existing system will

00:39:33,950 --> 00:39:37,730
just work it's not supposed to be it's

00:39:35,810 --> 00:39:40,190
something like this basic building block

00:39:37,730 --> 00:39:42,380
and not the house that you can build an

00:39:40,190 --> 00:39:45,670
operating system from and we are fast

00:39:42,380 --> 00:39:48,170
yeah there's the progress of system is

00:39:45,670 --> 00:39:49,790
there's a quick pace to it like we do

00:39:48,170 --> 00:39:54,560
releases frequently and we add new stuff

00:39:49,790 --> 00:39:56,840
all the time we make decisions right

00:39:54,560 --> 00:39:58,160
because I mean often frequently in

00:39:56,840 --> 00:40:00,340
open-source people are incapable of

00:39:58,160 --> 00:40:03,290
making decisions that they instead of

00:40:00,340 --> 00:40:04,400
saying this is the way it goes they say

00:40:03,290 --> 00:40:06,140
well let's do everything to make

00:40:04,400 --> 00:40:08,570
everybody happy we're not like that we

00:40:06,140 --> 00:40:10,880
will make decisions yeah all of our

00:40:08,570 --> 00:40:13,160
upstream releases are focused on

00:40:10,880 --> 00:40:15,260
development right if you take the system

00:40:13,160 --> 00:40:17,090
new thing you get a series of religious

00:40:15,260 --> 00:40:19,040
and I will always bring new features

00:40:17,090 --> 00:40:22,040
usually smaller ones now you usually

00:40:19,040 --> 00:40:24,140
slightly quite incremental but they are

00:40:22,040 --> 00:40:26,480
not the versions are ultimately stable

00:40:24,140 --> 00:40:29,330
however we help you with QA

00:40:26,480 --> 00:40:31,640
right like for example we will adopt and

00:40:29,330 --> 00:40:33,650
system you now that for every commit

00:40:31,640 --> 00:40:34,790
that we make we will actually tagged it

00:40:33,650 --> 00:40:36,830
with whether this is something to back

00:40:34,790 --> 00:40:38,600
prod or not the reason why we do it that

00:40:36,830 --> 00:40:40,430
way instead of actually having a stable

00:40:38,600 --> 00:40:43,220
branch like most other projects do is

00:40:40,430 --> 00:40:44,300
because this is after all this basic

00:40:43,220 --> 00:40:45,830
building block that you built an

00:40:44,300 --> 00:40:48,020
operating system from it's not the stuff

00:40:45,830 --> 00:40:49,340
you install on top this means basically

00:40:48,020 --> 00:40:51,140
that all the distributions have to

00:40:49,340 --> 00:40:52,880
incorporate it anyway and they should

00:40:51,140 --> 00:40:54,710
pick a version they think is relatively

00:40:52,880 --> 00:40:56,180
stable and this will fall the

00:40:54,710 --> 00:40:58,880
distribution usually be different one

00:40:56,180 --> 00:41:00,860
however we want all of them have the the

00:40:58,880 --> 00:41:02,390
chance to integrate the patches so

00:41:00,860 --> 00:41:06,170
instead of doing the QA entirely

00:41:02,390 --> 00:41:08,000
upstream we will help you to do doing a

00:41:06,170 --> 00:41:10,760
downstream like for example map I mean

00:41:08,000 --> 00:41:12,980
we support this now in round 7 so we

00:41:10,760 --> 00:41:15,020
will have a lot of them that just

00:41:12,980 --> 00:41:16,760
flowing into that we will tell you that

00:41:15,020 --> 00:41:18,800
upstream the ones whether we back port

00:41:16,760 --> 00:41:20,270
it but most likely you running a

00:41:18,800 --> 00:41:22,040
different version anyway because Fedora

00:41:20,270 --> 00:41:25,700
froze it there because Debian froze is a

00:41:22,040 --> 00:41:27,020
different time than fedora or Rao yes so

00:41:25,700 --> 00:41:29,180
we do remove options from time to time

00:41:27,020 --> 00:41:30,920
some of the ICS because we don't find

00:41:29,180 --> 00:41:34,250
them interesting but there's always the

00:41:30,920 --> 00:41:34,950
like the chance to reality okely or or

00:41:34,250 --> 00:41:37,740
do something

00:41:34,950 --> 00:41:40,380
else yeah so you won't get everything

00:41:37,740 --> 00:41:42,780
you might want but it will get a lot of

00:41:40,380 --> 00:41:44,040
it and if you get something if you don't

00:41:42,780 --> 00:41:45,720
get something will you at least get at

00:41:44,040 --> 00:41:47,099
an explanation from us why that is the

00:41:45,720 --> 00:41:50,579
way we will help you to find maybe a

00:41:47,099 --> 00:41:52,380
different solution or yeah make try to

00:41:50,579 --> 00:41:54,630
find something how we can make this work

00:41:52,380 --> 00:41:56,220
so I already mentioned this there's a

00:41:54,630 --> 00:41:58,530
learning curve system D is different

00:41:56,220 --> 00:42:00,210
from system five however ultimately I

00:41:58,530 --> 00:42:02,970
believe the coming from zero the

00:42:00,210 --> 00:42:05,160
learning curve to system D is lower

00:42:02,970 --> 00:42:07,380
substantially lower than coming from

00:42:05,160 --> 00:42:09,869
system five in it they're coming from a

00:42:07,380 --> 00:42:11,460
going to system five minute anyway this

00:42:09,869 --> 00:42:14,010
is my last slide we're really happy

00:42:11,460 --> 00:42:15,810
about that means specific participation

00:42:14,010 --> 00:42:17,359
and this is a new project we hope this

00:42:15,810 --> 00:42:20,670
will continue even closer than before

00:42:17,359 --> 00:42:23,280
most importantly we invite this is the

00:42:20,670 --> 00:42:26,910
the diving community to contribute more

00:42:23,280 --> 00:42:28,079
and join the project so that system you

00:42:26,910 --> 00:42:30,420
can actually be driven the direction

00:42:28,079 --> 00:42:32,400
that Debian wants right and open-source

00:42:30,420 --> 00:42:34,349
it's generally the way that let the

00:42:32,400 --> 00:42:36,530
people who write stuff usually decide

00:42:34,349 --> 00:42:39,329
more than others they're where things go

00:42:36,530 --> 00:42:41,220
we want system need to be this generic

00:42:39,329 --> 00:42:42,030
thing that everybody can use and drive

00:42:41,220 --> 00:42:43,440
in the direction

00:42:42,030 --> 00:42:45,180
currently there are people from ratted

00:42:43,440 --> 00:42:46,920
driving that couple their people from

00:42:45,180 --> 00:42:48,810
enteral driving in the direction they're

00:42:46,920 --> 00:42:51,300
people from our clinics and pushing into

00:42:48,810 --> 00:42:53,460
the direction that they wanted yeah we

00:42:51,300 --> 00:42:55,619
would invite David even more than they

00:42:53,460 --> 00:42:58,380
already do to make it work for them the

00:42:55,619 --> 00:43:00,300
way they want and we'll make sure that

00:42:58,380 --> 00:43:02,280
we do the best make the best out of it

00:43:00,300 --> 00:43:03,839
so yeah we want you in the project and

00:43:02,280 --> 00:43:06,810
we want your influence in the project

00:43:03,839 --> 00:43:09,780
and that's all I have for now I see my

00:43:06,810 --> 00:43:11,220
time is over but do we have to leave the

00:43:09,780 --> 00:43:20,369
room immediately otherwise we could

00:43:11,220 --> 00:43:22,579
still do questions okay then let's do a

00:43:20,369 --> 00:43:25,880
couple of questions I see somebody

00:43:22,579 --> 00:43:25,880
raising his arm

00:43:30,630 --> 00:43:34,930
I'm I was just saying Thank You Leonard

00:43:33,190 --> 00:43:37,570
for all your body of work on system II

00:43:34,930 --> 00:43:39,130
and everything and my question is when

00:43:37,570 --> 00:43:41,109
I've tried system D and ran into a

00:43:39,130 --> 00:43:43,390
failure mode where the system wouldn't

00:43:41,109 --> 00:43:45,280
boot and would say hang with a blank

00:43:43,390 --> 00:43:47,230
screen or without much information you

00:43:45,280 --> 00:43:49,420
can go off and look at the wiki and see

00:43:47,230 --> 00:43:52,359
various workarounds to figure out the

00:43:49,420 --> 00:43:55,420
bug but the all these workarounds seem

00:43:52,359 --> 00:43:57,070
like things that a inexperienced system

00:43:55,420 --> 00:43:59,680
and might have trouble with say if they

00:43:57,070 --> 00:44:02,290
were my mom being helped over the phone

00:43:59,680 --> 00:44:04,960
with a problem so is there any work on

00:44:02,290 --> 00:44:06,460
getting system D to boot to say a root

00:44:04,960 --> 00:44:08,230
shell if it's booted with an emergency

00:44:06,460 --> 00:44:10,330
parameter or something and always work

00:44:08,230 --> 00:44:11,770
and be able to let you debug it so in

00:44:10,330 --> 00:44:13,900
general that's what happens actually

00:44:11,770 --> 00:44:16,330
right you know if you if for example an

00:44:13,900 --> 00:44:18,250
artist doesn't show up and we have run

00:44:16,330 --> 00:44:20,349
into timeout waiting for it we will put

00:44:18,250 --> 00:44:22,060
you in a shell we will give you a little

00:44:20,349 --> 00:44:23,530
bit of an explanation that yes I'm

00:44:22,060 --> 00:44:25,170
seeing time out of please go to you're

00:44:23,530 --> 00:44:27,190
talking about the five-minute timeout

00:44:25,170 --> 00:44:29,080
yeah this I don't know what the current

00:44:27,190 --> 00:44:31,090
time actually is and then they're there

00:44:29,080 --> 00:44:32,950
well actually is a hint given now type

00:44:31,090 --> 00:44:34,750
Journal control and you could actually

00:44:32,950 --> 00:44:36,280
the logs and what's nice again about

00:44:34,750 --> 00:44:38,200
system needs that even if this happens

00:44:36,280 --> 00:44:39,609
in the end Rd you get logs right because

00:44:38,200 --> 00:44:41,260
traditionally or if it happens during

00:44:39,609 --> 00:44:42,580
early boot before so it's not where

00:44:41,260 --> 00:44:43,960
starter because in traditional unix

00:44:42,580 --> 00:44:46,210
systems this look would be started

00:44:43,960 --> 00:44:47,680
relatively late and then only that then

00:44:46,210 --> 00:44:48,880
you get logging and before that you were

00:44:47,680 --> 00:44:50,970
a bit on your own and there were people

00:44:48,880 --> 00:44:53,619
scraping screens and things like that

00:44:50,970 --> 00:44:55,510
and the system the world it's it's if we

00:44:53,619 --> 00:44:57,580
managed to detect the error properly and

00:44:55,510 --> 00:45:00,430
usually we do because their timeouts on

00:44:57,580 --> 00:45:01,930
everything that we do then we also give

00:45:00,430 --> 00:45:04,300
you in one line when you've got the

00:45:01,930 --> 00:45:05,890
shell type this and you see what

00:45:04,300 --> 00:45:07,750
actually happens and you get the entire

00:45:05,890 --> 00:45:09,880
stream of logs from the kernel from the

00:45:07,750 --> 00:45:11,170
inner rd from early boot interleaved

00:45:09,880 --> 00:45:14,680
nicely and and hopefully gives you an

00:45:11,170 --> 00:45:16,720
idea and of course looking at log files

00:45:14,680 --> 00:45:18,450
is nice thing it's not always what

00:45:16,720 --> 00:45:20,710
people want because it's it's it's

00:45:18,450 --> 00:45:23,920
usually turns english language that

00:45:20,710 --> 00:45:25,450
people have a hard time to understand we

00:45:23,920 --> 00:45:28,119
have a project there that to make this

00:45:25,450 --> 00:45:30,730
more more more user friendly which is

00:45:28,119 --> 00:45:33,550
the demons can actually touch a message

00:45:30,730 --> 00:45:35,980
ID to to to the messages basically they

00:45:33,550 --> 00:45:37,599
would say okay if it bear the sector is

00:45:35,980 --> 00:45:39,820
bad the kernel consent of a message ID

00:45:37,599 --> 00:45:41,339
for all messages that well which say

00:45:39,820 --> 00:45:43,109
that sector is bad

00:45:41,339 --> 00:45:45,509
and then general control will actually

00:45:43,109 --> 00:45:47,009
already link that app with a catalog

00:45:45,509 --> 00:45:48,900
entry which explains in more detail

00:45:47,009 --> 00:45:49,410
what's going on and includes hints what

00:45:48,900 --> 00:45:51,089
to do

00:45:49,410 --> 00:45:53,400
currently this catalog is relatively

00:45:51,089 --> 00:45:55,410
empty still I mean a basic text in there

00:45:53,400 --> 00:45:57,329
but it's not not super useful but I

00:45:55,410 --> 00:45:58,859
figure as we go overhead with RAL this

00:45:57,329 --> 00:46:01,200
would probably be be covering more

00:45:58,859 --> 00:46:02,880
ground and insistently many of the

00:46:01,200 --> 00:46:05,369
errors I actually already quit equipped

00:46:02,880 --> 00:46:07,739
with message IDs and so yeah I figure

00:46:05,369 --> 00:46:09,119
that that over time things will be much

00:46:07,739 --> 00:46:10,589
more nice in that way of course we will

00:46:09,119 --> 00:46:11,940
never be able to catch all errors like

00:46:10,589 --> 00:46:23,309
this always saying that you cannot catch

00:46:11,940 --> 00:46:25,079
but so like the thing is that as

00:46:23,309 --> 00:46:26,009
mentioned already a profiling and

00:46:25,079 --> 00:46:27,930
debugging and all these things are built

00:46:26,009 --> 00:46:30,960
in and there's you can boot with on the

00:46:27,930 --> 00:46:32,430
kernel command line with debug right and

00:46:30,960 --> 00:46:34,109
I will turn on kernel debugging will

00:46:32,430 --> 00:46:36,479
turn on system you debugger will get a

00:46:34,109 --> 00:46:38,489
really really elaborate thing on what's

00:46:36,479 --> 00:46:40,200
actually happening why system lis

00:46:38,489 --> 00:46:42,630
starting that and what's it doing now

00:46:40,200 --> 00:46:44,910
there and things like that so tracing

00:46:42,630 --> 00:46:46,890
profiling debugging is all built-in by

00:46:44,910 --> 00:46:48,329
default and easy to reach and for

00:46:46,890 --> 00:46:50,009
example in the debug case because the

00:46:48,329 --> 00:46:51,660
current already used that that string

00:46:50,009 --> 00:46:52,890
key back on the current command line we

00:46:51,660 --> 00:46:54,509
just hooked up a little bit more to it

00:46:52,890 --> 00:46:55,979
so that people should actually be able

00:46:54,509 --> 00:46:57,839
to discover that without having to

00:46:55,979 --> 00:46:59,190
actually check the documents if they are

00:46:57,839 --> 00:47:06,029
lucky enough to know the kernel debug

00:46:59,190 --> 00:47:09,960
option of course because Debian want to

00:47:06,029 --> 00:47:12,869
be the universal operating system and

00:47:09,960 --> 00:47:16,019
they are now other kernels coming for

00:47:12,869 --> 00:47:21,089
instance k freebsd or i saw some

00:47:16,019 --> 00:47:25,079
activity into the home and there are a

00:47:21,089 --> 00:47:29,339
lot of things so i to appreciate for the

00:47:25,079 --> 00:47:35,099
start to restrict on linux on linux

00:47:29,339 --> 00:47:38,549
kernel but is it compatible on the long

00:47:35,099 --> 00:47:39,809
term to offer an operating system we

00:47:38,549 --> 00:47:42,690
want to be universal

00:47:39,809 --> 00:47:45,719
so i don't think that it makes sense to

00:47:42,690 --> 00:47:47,670
port linux s to me to other kernels it's

00:47:45,719 --> 00:47:49,469
not i mean we use so much functionality

00:47:47,670 --> 00:47:50,819
makes things really really nice I don't

00:47:49,469 --> 00:47:51,420
think though that's much of a problem

00:47:50,819 --> 00:47:54,269
right

00:47:51,420 --> 00:47:55,140
if debian managed to support the entire

00:47:54,269 --> 00:47:56,910
distribution to

00:47:55,140 --> 00:47:59,760
two different kernels I'm like you know

00:47:56,910 --> 00:48:02,070
having two different kernels is way more

00:47:59,760 --> 00:48:03,720
work like because you have the big tool

00:48:02,070 --> 00:48:05,790
chain you have to have to build a system

00:48:03,720 --> 00:48:07,050
and everything else than just supporting

00:48:05,790 --> 00:48:11,670
two different init systems so my

00:48:07,050 --> 00:48:12,990
recommendation for debian anyway my de

00:48:11,670 --> 00:48:14,340
my recommendation was dabbing with

00:48:12,990 --> 00:48:15,780
simply just I mean you have the system

00:48:14,340 --> 00:48:17,550
five-minute scripts and all the packages

00:48:15,780 --> 00:48:18,960
anyway it should so just leave them in

00:48:17,550 --> 00:48:20,580
and that's how you can support your

00:48:18,960 --> 00:48:22,800
other operating system but honestly I

00:48:20,580 --> 00:48:25,020
mean it's it's it's it's it's not my

00:48:22,800 --> 00:48:27,810
personal province distribution so I

00:48:25,020 --> 00:48:29,430
don't know I think we should we should

00:48:27,810 --> 00:48:31,260
really give people the chance to make

00:48:29,430 --> 00:48:34,350
use of Linux with all the functionality

00:48:31,260 --> 00:48:36,840
that has and not not limit us to it to

00:48:34,350 --> 00:48:42,270
to more minimal thing just because some

00:48:36,840 --> 00:48:44,130
people use something else so one point

00:48:42,270 --> 00:48:48,540
that you made one point that you made in

00:48:44,130 --> 00:48:50,340
your talk you you said that the that

00:48:48,540 --> 00:48:53,520
that socket based activation would allow

00:48:50,340 --> 00:48:59,220
you to improve tell that in some density

00:48:53,520 --> 00:49:01,470
density for containers that assumes

00:48:59,220 --> 00:49:03,330
delayed activation now one of the

00:49:01,470 --> 00:49:05,610
arguments that was made in discussions

00:49:03,330 --> 00:49:07,080
on Debian develop a stacked evasion is

00:49:05,610 --> 00:49:09,780
not intended to lead to delayed

00:49:07,080 --> 00:49:10,260
activation and I think you can't have it

00:49:09,780 --> 00:49:12,690
both ways

00:49:10,260 --> 00:49:15,150
oh you can either well you you can't

00:49:12,690 --> 00:49:18,750
have it both ways simultaneously oh you

00:49:15,150 --> 00:49:21,720
can either either you are allowing

00:49:18,750 --> 00:49:23,840
delayed activation to enable to enable

00:49:21,720 --> 00:49:26,520
your improved density as you say or

00:49:23,840 --> 00:49:29,250
you're spending things up immediately

00:49:26,520 --> 00:49:30,810
and if you have any kind of high

00:49:29,250 --> 00:49:33,450
availability any kind of service

00:49:30,810 --> 00:49:36,660
monitoring your services have to spin up

00:49:33,450 --> 00:49:38,760
you can't simultaneously have have you

00:49:36,660 --> 00:49:40,020
know the improved density from from not

00:49:38,760 --> 00:49:40,320
having things spun up until they're

00:49:40,020 --> 00:49:41,790
needed

00:49:40,320 --> 00:49:43,170
yeah if you care about them being

00:49:41,790 --> 00:49:45,390
available improving than eating because

00:49:43,170 --> 00:49:47,250
in any sort of internet-based service

00:49:45,390 --> 00:49:49,620
the most important metric is time to

00:49:47,250 --> 00:49:51,810
response not just whether or not you can

00:49:49,620 --> 00:49:53,250
get a connection and obviously delayed

00:49:51,810 --> 00:49:55,470
activation means you you don't have

00:49:53,250 --> 00:49:56,910
you're going to have delays while things

00:49:55,470 --> 00:49:59,490
are being swapped so my question to you

00:49:56,910 --> 00:50:01,980
is do you have anybody actually using

00:49:59,490 --> 00:50:03,780
this kind of density in production and

00:50:01,980 --> 00:50:06,120
what is their use case for that so

00:50:03,780 --> 00:50:07,950
there's a couple of people like who do

00:50:06,120 --> 00:50:08,790
do those servers like there's for

00:50:07,950 --> 00:50:09,990
example the company called

00:50:08,790 --> 00:50:12,050
Pantheon which uses a lot of socket

00:50:09,990 --> 00:50:14,640
activation like that Pantheon it does

00:50:12,050 --> 00:50:16,410
drupal service where they basically

00:50:14,640 --> 00:50:17,730
socket activates everything it started

00:50:16,410 --> 00:50:20,970
as it's needed because they have this

00:50:17,730 --> 00:50:22,380
thing that you have a one-click sign up

00:50:20,970 --> 00:50:24,660
on the website where you can say I want

00:50:22,380 --> 00:50:25,980
to have my own Drupal service 99 percent

00:50:24,660 --> 00:50:27,780
of those people never actually started

00:50:25,980 --> 00:50:29,790
up right or if they do they started up

00:50:27,780 --> 00:50:31,680
once and never do that again so this is

00:50:29,790 --> 00:50:33,870
about of course if you do the delayed

00:50:31,680 --> 00:50:37,470
activation then you can do that only if

00:50:33,870 --> 00:50:39,750
you have very uneven profile about who

00:50:37,470 --> 00:50:41,280
use what but as it turns out this is

00:50:39,750 --> 00:50:44,730
probably what most churches have right

00:50:41,280 --> 00:50:46,530
because websites are yeah so it in

00:50:44,730 --> 00:50:48,060
general like like system D like the

00:50:46,530 --> 00:50:50,670
system your services can have multiple

00:50:48,060 --> 00:50:52,890
triggers right they have kind of a bust

00:50:50,670 --> 00:50:54,660
trigger a socket trigger a hardware

00:50:52,890 --> 00:50:57,240
trigger they can be started at Buddha

00:50:54,660 --> 00:50:59,460
and system you will will combine all

00:50:57,240 --> 00:51:01,380
that and spawn spawn syncs on the first

00:50:59,460 --> 00:51:03,450
one that comes in so it's completely up

00:51:01,380 --> 00:51:05,190
to you if you use socket activation and

00:51:03,450 --> 00:51:06,780
it's a an amazing prioritization

00:51:05,190 --> 00:51:08,910
technique that allows you to drop all

00:51:06,780 --> 00:51:11,310
the dependencies between services or if

00:51:08,910 --> 00:51:13,140
you use it as lazy activation to to to

00:51:11,310 --> 00:51:16,470
take benefit of the fact that people

00:51:13,140 --> 00:51:19,140
only sell them use some services okay

00:51:16,470 --> 00:51:21,240
thank you okay then let me say one last

00:51:19,140 --> 00:51:22,800
thing if you guys have any questions and

00:51:21,240 --> 00:51:24,990
we probably be out sign down there on

00:51:22,800 --> 00:51:27,720
the green lawn and to be happy to answer

00:51:24,990 --> 00:51:28,800
anything we have you might have so thank

00:51:27,720 --> 00:51:30,180
you very much for your time I hope this

00:51:28,800 --> 00:51:32,820
will see how helpful

00:51:30,180 --> 00:51:32,820

YouTube URL: https://www.youtube.com/watch?v=BXHCeWiQz9E


