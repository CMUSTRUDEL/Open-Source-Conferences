Title: Why Debian needs Upstart
Publication date: 2017-11-29
Playlist: DebConf 13
Description: 
	by James Hunt
by Steve Langasek

At: DebConf13
https://debconf13.debconf.org/
Room: Main talk room
Scheduled start: 2013-08-13 10:30:00
Captions: 
	00:00:00,060 --> 00:00:03,449
[Music]

00:00:00,800 --> 00:00:07,710
so a second session this morning about

00:00:03,449 --> 00:00:10,440
vote will involve James Hunt who's been

00:00:07,710 --> 00:00:12,960
walking for cannon core on the upstart

00:00:10,440 --> 00:00:16,049
for the past three years and also

00:00:12,960 --> 00:00:17,940
stevelegassick who also is working for

00:00:16,049 --> 00:00:20,250
canonical but is a most of us knows him

00:00:17,940 --> 00:00:23,640
for his long time commitment for the on

00:00:20,250 --> 00:00:25,680
gbn for the past 13 years this morning

00:00:23,640 --> 00:00:27,750
together they're going to tell us why he

00:00:25,680 --> 00:00:36,600
began needs to have start please what

00:00:27,750 --> 00:00:37,290
come down yeah thanks very much thanks

00:00:36,600 --> 00:00:40,260
for the introduction

00:00:37,290 --> 00:00:41,850
yeah as lunr mentioned I'm Steve many of

00:00:40,260 --> 00:00:44,450
you know me already I've been around

00:00:41,850 --> 00:00:50,149
here and there in Debian for a few years

00:00:44,450 --> 00:00:52,980
for lon yeah and James Hunt is the

00:00:50,149 --> 00:00:54,059
upstream maintainer for upstart so we've

00:00:52,980 --> 00:00:56,399
come here today to tell you about

00:00:54,059 --> 00:00:58,890
everything upstart and why we should

00:00:56,399 --> 00:01:00,539
have upstart in Debian and why we should

00:00:58,890 --> 00:01:03,000
be using upstart in Debian we had

00:01:00,539 --> 00:01:04,350
discussions yesterday about system D and

00:01:03,000 --> 00:01:07,010
what it has to offer and so we'd like to

00:01:04,350 --> 00:01:10,799
show you today a little bit about

00:01:07,010 --> 00:01:12,659
upstart and why why it is the thing you

00:01:10,799 --> 00:01:14,310
should use a set of system B for PID 1

00:01:12,659 --> 00:01:16,590
and with that I'll turn it over to James

00:01:14,310 --> 00:01:17,850
for the first sprint great thanks yeah

00:01:16,590 --> 00:01:20,369
apologies sir we've got a 45 minute

00:01:17,850 --> 00:01:21,990
session I'll be talking for the first 15

00:01:20,369 --> 00:01:24,060
given IV design architecture and some

00:01:21,990 --> 00:01:26,360
examples of service eases up so that as

00:01:24,060 --> 00:01:28,650
allowed we've had a pack a lot in today

00:01:26,360 --> 00:01:31,380
like the fact of us being said of course

00:01:28,650 --> 00:01:33,810
if we're talking too fast please slow us

00:01:31,380 --> 00:01:34,950
down and have a chat afterwards please

00:01:33,810 --> 00:01:39,090
cup grabbers because there's a lot more

00:01:34,950 --> 00:01:43,200
we could be saying but okay so what did

00:01:39,090 --> 00:01:44,549
start it's it's a mic it's a revolution

00:01:43,200 --> 00:01:47,100
event based in his system

00:01:44,549 --> 00:01:49,110
it was written by key buck it's now

00:01:47,100 --> 00:01:51,180
maintained by canonical and developed by

00:01:49,110 --> 00:01:52,770
ourselves in the community it's being

00:01:51,180 --> 00:01:53,869
paid won every system everybody systems

00:01:52,770 --> 00:01:56,040
it's 2006

00:01:53,869 --> 00:01:58,979
of course it handles boot shutdown

00:01:56,040 --> 00:02:00,810
service supervision we also provide

00:01:58,979 --> 00:02:03,450
support for sis 5 jobs

00:02:00,810 --> 00:02:07,680
transparent and of course upstart it's

00:02:03,450 --> 00:02:08,940
now a first clock in Debian as you can

00:02:07,680 --> 00:02:11,849
see it's an open reading out the names

00:02:08,940 --> 00:02:13,110
here but it runs on pretty much all the

00:02:11,849 --> 00:02:16,440
major players all the major

00:02:13,110 --> 00:02:19,530
systems right now and the appointment of

00:02:16,440 --> 00:02:20,730
course is model one it has excellent

00:02:19,530 --> 00:02:22,410
platform presence

00:02:20,730 --> 00:02:25,080
it runs on desktop service embedded

00:02:22,410 --> 00:02:29,190
devices in client's cloud tablets and

00:02:25,080 --> 00:02:30,990
most recently phones just touching on

00:02:29,190 --> 00:02:32,460
cloud for a second I mean upstart is the

00:02:30,990 --> 00:02:34,680
number one in it system in the cloud

00:02:32,460 --> 00:02:37,740
due to abilities dominance in that realm

00:02:34,680 --> 00:02:39,480
and its name you get names but there's

00:02:37,740 --> 00:02:42,090
some examples of big companies that are

00:02:39,480 --> 00:02:46,320
using up empty in the cloud and up into

00:02:42,090 --> 00:02:47,730
on service it's very important for us to

00:02:46,320 --> 00:02:49,950
point out that upstarts a very simple

00:02:47,730 --> 00:02:53,580
program it's simple but it's also very

00:02:49,950 --> 00:02:55,350
versatile very flexible the Union team

00:02:53,580 --> 00:02:57,420
itself really understands two concepts

00:02:55,350 --> 00:03:01,200
only two concepts events and processes

00:02:57,420 --> 00:03:04,160
so it doesn't dictate one level policy

00:03:01,200 --> 00:03:08,340
Dena team even though the one level is

00:03:04,160 --> 00:03:09,690
well show example this later on so when

00:03:08,340 --> 00:03:13,459
we talk about run levels this is

00:03:09,690 --> 00:03:17,459
currently specific to Ubuntu and Debian

00:03:13,459 --> 00:03:18,900
so I heard a funny room yesterday just

00:03:17,459 --> 00:03:22,890
clarify upstart it's actually written in

00:03:18,900 --> 00:03:24,450
C not by them we attempt to hit here to

00:03:22,890 --> 00:03:26,820
the UNIX philosophy of doing what

00:03:24,450 --> 00:03:29,400
anything well as I said the core of

00:03:26,820 --> 00:03:31,320
upstart is well it does include a diva

00:03:29,400 --> 00:03:33,959
server as well and we'll see why that is

00:03:31,320 --> 00:03:37,370
later on and but we only provide methods

00:03:33,959 --> 00:03:39,570
that is the core to management

00:03:37,370 --> 00:03:42,060
additional functionality is handled by

00:03:39,570 --> 00:03:43,920
bridges they run out of process they

00:03:42,060 --> 00:03:46,320
enhance the facilities the abilities of

00:03:43,920 --> 00:03:48,959
upstart and we do that to provide

00:03:46,320 --> 00:03:50,610
resilience again system failure will

00:03:48,959 --> 00:03:52,890
cover bridges in a little bit in a few

00:03:50,610 --> 00:03:56,580
suffice time the way they're handling is

00:03:52,890 --> 00:03:57,900
very elegant very simple very Scott of

00:03:56,580 --> 00:03:59,519
course where the unique selling points

00:03:57,900 --> 00:04:03,200
all that start is the fact that it's

00:03:59,519 --> 00:04:05,900
event based this is revolutionary okay

00:04:03,200 --> 00:04:08,880
again we'll come on to that in a minute

00:04:05,900 --> 00:04:11,310
but if seeing this this bottom point

00:04:08,880 --> 00:04:14,400
here upstart makes use of the NIH

00:04:11,310 --> 00:04:17,070
library yes it might might stand for not

00:04:14,400 --> 00:04:22,590
invented here is a very cut-down safe

00:04:17,070 --> 00:04:24,479
small library you can it was written

00:04:22,590 --> 00:04:28,250
specifically for early boot systems such

00:04:24,479 --> 00:04:28,250
as upstart thank you

00:04:29,180 --> 00:04:33,630
so the the column upstart itself really

00:04:32,340 --> 00:04:35,250
apart from the init daemon is one

00:04:33,630 --> 00:04:37,020
command in its ETL

00:04:35,250 --> 00:04:39,360
so with that you can actually control

00:04:37,020 --> 00:04:45,000
jobs you can query certain aspects of

00:04:39,360 --> 00:04:46,680
the jobs themselves and in its ETL

00:04:45,000 --> 00:04:48,930
itself being a d-bus client that

00:04:46,680 --> 00:04:52,009
basically talks directly to in it which

00:04:48,930 --> 00:04:53,840
runs a d-bus protocol on its on endpoint

00:04:52,009 --> 00:04:56,160
right

00:04:53,840 --> 00:04:57,330
the the d-bus in place is very well to

00:04:56,160 --> 00:04:59,009
find them you can write you know your

00:04:57,330 --> 00:05:01,380
own your own applications to make use of

00:04:59,009 --> 00:05:03,150
that after i had the same declarative

00:05:01,380 --> 00:05:05,460
jaws dropped in tanks i will see examine

00:05:03,150 --> 00:05:11,190
to that a second we read job files make

00:05:05,460 --> 00:05:13,770
ec in it it's a common weed off again we

00:05:11,190 --> 00:05:15,389
support override cycles which are video

00:05:13,770 --> 00:05:17,190
TW news i'm sure so we can actually

00:05:15,389 --> 00:05:19,020
change the behavior of a job without

00:05:17,190 --> 00:05:22,889
touching the pristine files that's a

00:05:19,020 --> 00:05:24,419
very very powerful facility fastest are

00:05:22,889 --> 00:05:26,039
mounting yep it says it's handled by

00:05:24,419 --> 00:05:27,569
another helper it's not a bridge per se

00:05:26,039 --> 00:05:31,680
but it's not a helper application called

00:05:27,569 --> 00:05:34,889
mount or mount fast the parallel this is

00:05:31,680 --> 00:05:37,289
by design this was not a mistake again

00:05:34,889 --> 00:05:40,469
it's out its out of out of the call hid

00:05:37,289 --> 00:05:41,400
one namespace when mounting these file

00:05:40,469 --> 00:05:45,870
systems that haven't there so in

00:05:41,400 --> 00:05:48,380
parallel we have a very rich palette

00:05:45,870 --> 00:05:50,639
vents that are available to jobs and

00:05:48,380 --> 00:05:53,099
we've got some reference to demand pages

00:05:50,639 --> 00:05:58,969
so you can find an ability sim take a

00:05:53,099 --> 00:06:01,770
look at those so i'll start event based

00:05:58,969 --> 00:06:04,050
jobs as we'll see start very naturally

00:06:01,770 --> 00:06:06,300
they start at the right time to start

00:06:04,050 --> 00:06:10,199
when it's time for that the job when all

00:06:06,300 --> 00:06:14,340
of its its its its its its start

00:06:10,199 --> 00:06:16,800
conditions are satisfied so it's very

00:06:14,340 --> 00:06:18,659
much it's unlike system 5 where you know

00:06:16,800 --> 00:06:21,210
you have a sequential start to assign a

00:06:18,659 --> 00:06:24,539
number set the order it doesn't have

00:06:21,210 --> 00:06:27,270
complex with dependency resolvers and

00:06:24,539 --> 00:06:29,340
one further point out out there is

00:06:27,270 --> 00:06:31,289
you're probably used to thinking of sis

00:06:29,340 --> 00:06:33,810
5 in it as a thing that runs at boot

00:06:31,289 --> 00:06:38,009
time boots the system and then gets out

00:06:33,810 --> 00:06:39,630
of the way well that's ok if you have a

00:06:38,009 --> 00:06:40,620
very static system but if you're in a

00:06:39,630 --> 00:06:42,479
dynamic environment where you have

00:06:40,620 --> 00:06:43,770
hardware that comes and goes if you have

00:06:42,479 --> 00:06:45,389
network devices that come and go you

00:06:43,770 --> 00:06:47,759
want something more dynamic you want a

00:06:45,389 --> 00:06:49,349
system that will continue to you know

00:06:47,759 --> 00:06:50,669
understand what the state of the system

00:06:49,349 --> 00:06:53,880
should be overall throughout the

00:06:50,669 --> 00:06:55,020
lifecycle of the of the system and so

00:06:53,880 --> 00:06:56,970
the fact that it's event based rather

00:06:55,020 --> 00:06:58,440
than dependency based means that it

00:06:56,970 --> 00:07:02,180
responds to events that happen anytime

00:06:58,440 --> 00:07:05,099
during the system systems boot time and

00:07:02,180 --> 00:07:09,419
throughout throughout the the uptime of

00:07:05,099 --> 00:07:13,080
the system so it's not just a job starts

00:07:09,419 --> 00:07:14,729
once and runs forever and that's it it's

00:07:13,080 --> 00:07:16,770
a very expressive language where you can

00:07:14,729 --> 00:07:19,190
have jobs that come and go in response

00:07:16,770 --> 00:07:21,659
to Hardware events throughout the time

00:07:19,190 --> 00:07:23,300
yeah that kind of leads to one of

00:07:21,659 --> 00:07:25,830
Scott's favorite phrase I think we're

00:07:23,300 --> 00:07:28,530
driving up starters it's a system where

00:07:25,830 --> 00:07:30,180
the system just keeps on booting it

00:07:28,530 --> 00:07:32,280
effectively it keeps on reacting to

00:07:30,180 --> 00:07:33,630
events as they're emitted keeps on

00:07:32,280 --> 00:07:36,630
reacting starting and stopping jobs as

00:07:33,630 --> 00:07:38,909
appropriate so here's a very simple job

00:07:36,630 --> 00:07:42,210
in the box here we have four lines four

00:07:38,909 --> 00:07:45,060
lines account we specify when the

00:07:42,210 --> 00:07:48,479
started so here we're saying start when

00:07:45,060 --> 00:07:50,280
the d-bus services started you can guess

00:07:48,479 --> 00:07:51,570
what the stop online is doing stop and

00:07:50,280 --> 00:07:55,139
system shutdown I think we use mode

00:07:51,570 --> 00:07:57,539
reboot exact line what running here what

00:07:55,139 --> 00:07:58,800
is the service and expect demon well

00:07:57,539 --> 00:08:03,509
we're saying that my demon here is a

00:07:58,800 --> 00:08:04,770
real double forking demon so the start

00:08:03,509 --> 00:08:07,229
and stop on conditions here very very

00:08:04,770 --> 00:08:09,599
simple they should only be very simple

00:08:07,229 --> 00:08:11,610
however we do support you know object

00:08:09,599 --> 00:08:13,919
complexity logical operators and that

00:08:11,610 --> 00:08:16,020
kind of thing but overall thermos you've

00:08:13,919 --> 00:08:17,729
got more than three three events because

00:08:16,020 --> 00:08:22,740
this is worth pointing out the started

00:08:17,729 --> 00:08:23,849
event the started there's an event on

00:08:22,740 --> 00:08:25,199
three events in a startle stopping

00:08:23,849 --> 00:08:27,030
condition you need to think quite

00:08:25,199 --> 00:08:30,180
carefully because all job should be

00:08:27,030 --> 00:08:31,650
simple I this so what does that actually

00:08:30,180 --> 00:08:33,570
give you well it also tells helps to how

00:08:31,650 --> 00:08:35,250
to start to stop the service it also

00:08:33,570 --> 00:08:38,070
allows it an administrator to manually

00:08:35,250 --> 00:08:39,120
forcibly stop will start the job what

00:08:38,070 --> 00:08:40,830
isn't shown at the fact that upstart

00:08:39,120 --> 00:08:42,990
provides automatic logging that's

00:08:40,830 --> 00:08:44,220
handles kind of transparently and of

00:08:42,990 --> 00:08:48,270
course in a minimal environments

00:08:44,220 --> 00:08:49,740
provided for for each job it's very

00:08:48,270 --> 00:08:51,810
human readable I mean this is upstart

00:08:49,740 --> 00:08:53,910
specific syntax but you can guess what

00:08:51,810 --> 00:08:55,920
that's doing right but there's no you

00:08:53,910 --> 00:08:58,260
know there's no magic and understanding

00:08:55,920 --> 00:08:59,610
what they're saying and of course

00:08:58,260 --> 00:09:02,460
crucially unlike system five you don't

00:08:59,610 --> 00:09:04,380
have huge chunks of boilerplate LSB code

00:09:02,460 --> 00:09:08,310
you know you let upstart do the heavy

00:09:04,380 --> 00:09:09,420
lifting so this is what I'm not gonna

00:09:08,310 --> 00:09:11,370
come across very well to you guys at the

00:09:09,420 --> 00:09:13,500
back there but this is attempting to

00:09:11,370 --> 00:09:15,810
show some of the events that are emitted

00:09:13,500 --> 00:09:18,090
when a job is start at the start so I'll

00:09:15,810 --> 00:09:19,560
just run through it briefly the sort of

00:09:18,090 --> 00:09:24,810
purpley boxes here are showing the event

00:09:19,560 --> 00:09:26,700
so when a service is starting we omit an

00:09:24,810 --> 00:09:29,790
event called starting and that event

00:09:26,700 --> 00:09:33,140
confused by other start on starting -

00:09:29,790 --> 00:09:35,850
and you can have a job react to that

00:09:33,140 --> 00:09:37,800
further down you then you see the pit

00:09:35,850 --> 00:09:41,490
box and right here we run the exact line

00:09:37,800 --> 00:09:45,690
so we go back to the example we set my

00:09:41,490 --> 00:09:47,520
demon focus bar when that beam is

00:09:45,690 --> 00:09:49,080
running we omit the started exactly what

00:09:47,520 --> 00:09:51,450
you know we we've realized that that's

00:09:49,080 --> 00:09:53,820
that that's their state now but again

00:09:51,450 --> 00:09:56,970
when you when you stop the demon up done

00:09:53,820 --> 00:09:59,270
it's a stopping event and a stopped the

00:09:56,970 --> 00:10:03,450
other black boxes are sort of optional

00:09:59,270 --> 00:10:05,100
job processes as they're called so in

00:10:03,450 --> 00:10:07,020
example we support we're showing it Zek

00:10:05,100 --> 00:10:09,090
here you can have a script you can

00:10:07,020 --> 00:10:09,510
actually have some shell code if you

00:10:09,090 --> 00:10:12,450
like

00:10:09,510 --> 00:10:15,930
so the in fact that stanza the key word

00:10:12,450 --> 00:10:17,400
is called script so you can have a

00:10:15,930 --> 00:10:19,950
script on exact that's known as the main

00:10:17,400 --> 00:10:21,450
process but optionally you can have

00:10:19,950 --> 00:10:24,150
these other types of probe that pre

00:10:21,450 --> 00:10:26,340
start so you can run something before

00:10:24,150 --> 00:10:28,560
the main job starts you can do whatever

00:10:26,340 --> 00:10:31,440
you like you can run something after the

00:10:28,560 --> 00:10:34,200
main process post up and again pre stop

00:10:31,440 --> 00:10:36,390
post-op they're all in fact they're all

00:10:34,200 --> 00:10:38,010
optional in fact even the main exec and

00:10:36,390 --> 00:10:39,450
script is optional you can have a

00:10:38,010 --> 00:10:42,120
legitimate job that doesn't actually

00:10:39,450 --> 00:10:43,620
fork anything at all and they're very

00:10:42,120 --> 00:10:45,240
useful they're called abstract jobs but

00:10:43,620 --> 00:10:49,830
we can't you know to have time to

00:10:45,240 --> 00:10:52,260
discuss this today unfortunately so we

00:10:49,830 --> 00:10:54,000
mentioned early on upstart supports this

00:10:52,260 --> 00:10:54,610
five you have to modify jobs anyway all

00:10:54,000 --> 00:10:56,470
your services

00:10:54,610 --> 00:10:59,740
way it reads the past in the user

00:10:56,470 --> 00:11:01,810
location it provides the usual set of

00:10:59,740 --> 00:11:04,000
commands shut down reboot telling it and

00:11:01,810 --> 00:11:06,940
so on but what's really interesting

00:11:04,000 --> 00:11:09,670
about upstarts the fact that it emulates

00:11:06,940 --> 00:11:11,709
the one level the commands will do

00:11:09,670 --> 00:11:14,350
exactly what you expect it to do but if

00:11:11,709 --> 00:11:16,839
we just look at how that works it's

00:11:14,350 --> 00:11:18,579
quite fascinating I think so to

00:11:16,839 --> 00:11:20,079
reiterate the init daemon knows nothing

00:11:18,579 --> 00:11:22,180
about run levels okay it just knows

00:11:20,079 --> 00:11:24,250
about events so how does this all work

00:11:22,180 --> 00:11:26,500
well it's actually very simple there are

00:11:24,250 --> 00:11:27,940
two jobs there's an RC - this init job

00:11:26,500 --> 00:11:30,730
and this is pretty much it in the first

00:11:27,940 --> 00:11:32,500
pop and you can kind of guess again you

00:11:30,730 --> 00:11:34,180
know it's human readable start on file

00:11:32,500 --> 00:11:35,620
system and static they look up there's

00:11:34,180 --> 00:11:37,990
actually saying start with all the file

00:11:35,620 --> 00:11:41,829
systems mounted and that actually that

00:11:37,990 --> 00:11:42,850
that event fast remount all so basically

00:11:41,829 --> 00:11:45,670
start you know when your system to this

00:11:42,850 --> 00:11:46,600
have a reasonable you know state you've

00:11:45,670 --> 00:11:49,390
got you've got networking you've got

00:11:46,600 --> 00:11:53,170
writable discs and so on and then exact

00:11:49,390 --> 00:11:56,320
telling it default level - ok so telling

00:11:53,170 --> 00:11:59,050
it runs parsing a parameter to telling

00:11:56,320 --> 00:12:02,230
it itself emits an event called run

00:11:59,050 --> 00:12:04,180
level pretty obvious but natural and

00:12:02,230 --> 00:12:07,600
then we have another job good RC which

00:12:04,180 --> 00:12:08,829
starts on one level this is actually a

00:12:07,600 --> 00:12:11,050
sort of map up because of a pattern

00:12:08,829 --> 00:12:13,540
match here we can do so this RC job will

00:12:11,050 --> 00:12:16,360
only start in you know recognized one

00:12:13,540 --> 00:12:18,190
levels and what that does is it execs

00:12:16,360 --> 00:12:20,709
etz you need D arcy

00:12:18,190 --> 00:12:23,589
part and run of all so that that

00:12:20,709 --> 00:12:25,720
basically is it that allows upstart

00:12:23,589 --> 00:12:26,410
support system v init daemon knows

00:12:25,720 --> 00:12:29,320
nothing about it

00:12:26,410 --> 00:12:30,970
nothing about my levels you want more

00:12:29,320 --> 00:12:34,810
details look at the man page one level

00:12:30,970 --> 00:12:36,579
seven so Bridget they're really cool

00:12:34,810 --> 00:12:39,130
they're one of my favorite aspects right

00:12:36,579 --> 00:12:41,079
now they allow you to extend up starting

00:12:39,130 --> 00:12:44,019
whatever way you want they've run out of

00:12:41,079 --> 00:12:45,519
process what's really cool about bridges

00:12:44,019 --> 00:12:48,130
is that they actually runners up start

00:12:45,519 --> 00:12:51,209
jobs so the extending up start and then

00:12:48,130 --> 00:12:53,529
running as a job manage my upstart so

00:12:51,209 --> 00:12:55,360
heaven forbid but I mean if a bridge

00:12:53,529 --> 00:12:59,199
were to crash that's not a problem

00:12:55,360 --> 00:13:00,959
because upstart restarted and the whole

00:12:59,199 --> 00:13:04,300
point of a bridge is that it basically

00:13:00,959 --> 00:13:06,490
enriches the Tally's of events in some

00:13:04,300 --> 00:13:08,080
way it injects new events into the

00:13:06,490 --> 00:13:09,700
system so

00:13:08,080 --> 00:13:11,170
unfortunately I have any time to talk

00:13:09,700 --> 00:13:12,700
through all this stuff but here's some

00:13:11,170 --> 00:13:15,070
examples of the bridges we have so we

00:13:12,700 --> 00:13:17,290
have a unit bridge so all you'd ever

00:13:15,070 --> 00:13:19,420
vent subjected into upstart so you have

00:13:17,290 --> 00:13:20,769
jobs which do crazy cool things back to

00:13:19,420 --> 00:13:22,930
think Steve got an example is coming up

00:13:20,769 --> 00:13:25,540
but a far bridge we can we can react to

00:13:22,930 --> 00:13:28,899
have jobs start on when a files modified

00:13:25,540 --> 00:13:29,920
the directory and when addy bus signals

00:13:28,899 --> 00:13:36,220
that is emitted or something like that

00:13:29,920 --> 00:13:40,240
is very very clever and the there's a

00:13:36,220 --> 00:13:42,490
very very detailed manual page called up

00:13:40,240 --> 00:13:46,209
star events which summarizes the

00:13:42,490 --> 00:13:48,100
well-known the well-known events they

00:13:46,209 --> 00:13:50,980
there's there's actually a lot of parity

00:13:48,100 --> 00:13:54,790
between those events and sort of the LSB

00:13:50,980 --> 00:13:57,490
defined conditions I guess it there's no

00:13:54,790 --> 00:14:00,519
magic LSB headers it's worth looking

00:13:57,490 --> 00:14:01,660
that page but if you can't find what you

00:14:00,519 --> 00:14:04,360
what you want if you don't know what

00:14:01,660 --> 00:14:06,310
what a job that reacts to some specific

00:14:04,360 --> 00:14:07,600
part of the system it's not detailed

00:14:06,310 --> 00:14:09,310
enough star events what do you do well

00:14:07,600 --> 00:14:11,560
you can talk to us we're quite

00:14:09,310 --> 00:14:13,270
approachable we're happy to write right

00:14:11,560 --> 00:14:14,620
near bridges if you'd like to write a

00:14:13,270 --> 00:14:16,870
bridge yourself it's not it's not a

00:14:14,620 --> 00:14:18,870
major piece of piece of work it's Kevin

00:14:16,870 --> 00:14:21,220
twenty-three hundred lines of code you

00:14:18,870 --> 00:14:23,050
can actually write a program which just

00:14:21,220 --> 00:14:25,959
makes use of live upstart we can that

00:14:23,050 --> 00:14:28,149
will just lie to generate events or you

00:14:25,959 --> 00:14:31,500
can just call in its ETA emit event and

00:14:28,149 --> 00:14:33,459
that is in no way a second-class citizen

00:14:31,500 --> 00:14:35,529
you know you can legitimately write a

00:14:33,459 --> 00:14:37,959
break and shell scripts you like just

00:14:35,529 --> 00:14:40,540
have a loop that emits the calls in its

00:14:37,959 --> 00:14:41,560
each element and that's all being you

00:14:40,540 --> 00:14:43,390
know that's that's creating new events

00:14:41,560 --> 00:14:46,450
put them into the system there's one

00:14:43,390 --> 00:14:50,680
event namespace so all jobs have access

00:14:46,450 --> 00:14:52,000
to all of these these events and so just

00:14:50,680 --> 00:14:54,670
briefly we've got some utilities that

00:14:52,000 --> 00:14:57,850
the upstart provides there's a graph is

00:14:54,670 --> 00:15:01,360
utility so you can see how events relate

00:14:57,850 --> 00:15:02,440
to start and stop on conditions which is

00:15:01,360 --> 00:15:05,769
actually quite interesting you know you

00:15:02,440 --> 00:15:07,329
look at the weather system boot-up start

00:15:05,769 --> 00:15:08,410
monitor with I said D bus monitor you

00:15:07,329 --> 00:15:10,870
understand it's pretty much the same

00:15:08,410 --> 00:15:14,019
thing you can watch event flows in real

00:15:10,870 --> 00:15:17,199
time that's the GUI shoot screenshot it

00:15:14,019 --> 00:15:20,649
runs on the console as well and the you

00:15:17,199 --> 00:15:21,490
know the only port in it check on so the

00:15:20,649 --> 00:15:23,110
basic syntax

00:15:21,490 --> 00:15:25,480
check your job it also checked the cat

00:15:23,110 --> 00:15:26,760
the source code so the the shell code if

00:15:25,480 --> 00:15:29,830
there as it is any in there as well

00:15:26,760 --> 00:15:33,070
so run that run it check off check comp

00:15:29,830 --> 00:15:37,450
before kind of deploying your your job

00:15:33,070 --> 00:15:39,130
for testing so just briefly we can give

00:15:37,450 --> 00:15:40,930
you some examples of some enablement

00:15:39,130 --> 00:15:44,680
some of the things that upstarts allowed

00:15:40,930 --> 00:15:46,690
sort of and due to its design really the

00:15:44,680 --> 00:15:48,600
first one cloud in it I think it was

00:15:46,690 --> 00:15:50,740
mentioned at the Google talk yesterday

00:15:48,600 --> 00:15:53,010
it's written by Scott Scott Scott maze

00:15:50,740 --> 00:15:55,240
of canonical it's a very clever

00:15:53,010 --> 00:15:57,520
application which sort of solved the

00:15:55,240 --> 00:16:00,220
problem of how do you how do you

00:15:57,520 --> 00:16:02,320
configure a generic cloud guest because

00:16:00,220 --> 00:16:04,270
these guests are extremely minimal there

00:16:02,320 --> 00:16:08,020
are a server image minimal packets

00:16:04,270 --> 00:16:09,790
package set as it says here initially

00:16:08,020 --> 00:16:11,500
you can't log in to them they didn't do

00:16:09,790 --> 00:16:14,410
anything they're just they'll boot and

00:16:11,500 --> 00:16:17,140
that's it so cloud and it kind of fills

00:16:14,410 --> 00:16:18,700
that that space if you imagine you

00:16:17,140 --> 00:16:21,160
wanted to sort of deploy a hundred

00:16:18,700 --> 00:16:23,050
guests twenty-five web servers ten

00:16:21,160 --> 00:16:24,880
database back-end as proxies caches and

00:16:23,050 --> 00:16:26,350
that kind of thing cladding it will do

00:16:24,880 --> 00:16:29,079
that for you so it's not just doing it

00:16:26,350 --> 00:16:30,579
so the same boiler print setup or for

00:16:29,079 --> 00:16:32,290
every single clap every single guest

00:16:30,579 --> 00:16:33,670
yeah where people here for the the talk

00:16:32,290 --> 00:16:36,510
I think it was yesterday morning James

00:16:33,670 --> 00:16:38,649
bromberger was talking about AWS and

00:16:36,510 --> 00:16:40,600
unclouded are people familiar with cloud

00:16:38,649 --> 00:16:42,640
in it and and what that enables and then

00:16:40,600 --> 00:16:44,620
have you guys seen that so it's it's

00:16:42,640 --> 00:16:46,899
it's been kind of an issue with getting

00:16:44,620 --> 00:16:49,540
Debian enabled and Amazon on account of

00:16:46,899 --> 00:16:51,250
the fact that cloud in it was written to

00:16:49,540 --> 00:16:53,709
leverage upstart very heavily and it has

00:16:51,250 --> 00:16:55,750
been ported now into Debian Tomek where

00:16:53,709 --> 00:16:58,450
on has done a port of cloud in it to

00:16:55,750 --> 00:17:00,880
work with cs5 in it systems

00:16:58,450 --> 00:17:01,690
I am personally I'm somewhat skeptical

00:17:00,880 --> 00:17:03,610
that it's gonna provide the same

00:17:01,690 --> 00:17:06,220
functionality because cloud in it very

00:17:03,610 --> 00:17:07,480
heavily leverages some of the

00:17:06,220 --> 00:17:10,959
functionality of upstart in terms of

00:17:07,480 --> 00:17:12,100
being able to interpose jobs that hook

00:17:10,959 --> 00:17:13,780
into different points in the boot

00:17:12,100 --> 00:17:16,750
sequence and stick themselves in between

00:17:13,780 --> 00:17:17,650
on arbitrary events which you know to a

00:17:16,750 --> 00:17:19,360
certain degree you can do the same kind

00:17:17,650 --> 00:17:21,579
of thing with sis 5 in it with LSB

00:17:19,360 --> 00:17:23,050
sequencing I don't think it actually

00:17:21,579 --> 00:17:25,390
gives us the same flexibility that we

00:17:23,050 --> 00:17:27,130
have in upstart and cloud in it and so I

00:17:25,390 --> 00:17:28,059
it will be interesting to see how well

00:17:27,130 --> 00:17:30,400
that actually works for people in

00:17:28,059 --> 00:17:32,890
practice but cloud in it is a huge

00:17:30,400 --> 00:17:35,780
deleverage is upstart very well and and

00:17:32,890 --> 00:17:38,280
really speaks to upstart strength

00:17:35,780 --> 00:17:39,240
yes he's examples pretty blocks and I

00:17:38,280 --> 00:17:41,490
hope it's showing how cladding is

00:17:39,240 --> 00:17:43,440
actually working the box the top shows

00:17:41,490 --> 00:17:44,669
you that main clouded it job the way

00:17:43,440 --> 00:17:47,100
cloud and it does work as it deploys a

00:17:44,669 --> 00:17:49,320
number of up star jobs and they're there

00:17:47,100 --> 00:17:52,650
they're there within the saduak package

00:17:49,320 --> 00:17:54,000
in this cut down guest that those three

00:17:52,650 --> 00:17:56,340
lines extremely important extremely

00:17:54,000 --> 00:17:57,720
clever so again you know it's pretty

00:17:56,340 --> 00:17:59,280
readable start on mounted mount point

00:17:57,720 --> 00:18:02,820
equals slash so this job is to start on

00:17:59,280 --> 00:18:04,290
the rooftop mounted task means run this

00:18:02,820 --> 00:18:06,750
is kind of a single-shot program sort of

00:18:04,290 --> 00:18:09,179
demon it's gonna run an exit that's it

00:18:06,750 --> 00:18:11,100
um what are you gonna wear do before the

00:18:09,179 --> 00:18:13,620
exits gonna run the cloud in it program

00:18:11,100 --> 00:18:15,000
especially the parameter there the point

00:18:13,620 --> 00:18:18,260
is though well there two important

00:18:15,000 --> 00:18:22,470
points one mounted is a blocking event

00:18:18,260 --> 00:18:23,970
okay so the upstart will not kind of a

00:18:22,470 --> 00:18:27,540
free up that event they were not

00:18:23,970 --> 00:18:30,780
discarded until this this job has

00:18:27,540 --> 00:18:31,860
finished ok until this task has actually

00:18:30,780 --> 00:18:34,440
finished running

00:18:31,860 --> 00:18:36,030
so what cloud is actually doing is it

00:18:34,440 --> 00:18:37,530
saying you know well upstart is going to

00:18:36,030 --> 00:18:39,900
start this this job very early in the

00:18:37,530 --> 00:18:43,380
boot cladding it's ain't gonna set the

00:18:39,900 --> 00:18:45,480
hostname so I've SSH talk securely to

00:18:43,380 --> 00:18:48,330
you know management servers and

00:18:45,480 --> 00:18:50,280
determine what type of guests they

00:18:48,330 --> 00:18:53,400
should be what what package set what

00:18:50,280 --> 00:18:55,080
configuration it needs handle installing

00:18:53,400 --> 00:18:59,010
all those packaging and configuring them

00:18:55,080 --> 00:19:00,960
and instantly enough one thing cloud and

00:18:59,010 --> 00:19:04,080
it does is it actually apt-get upgrades

00:19:00,960 --> 00:19:06,780
in early boot because that could result

00:19:04,080 --> 00:19:08,370
in upstart itself being upgraded you

00:19:06,780 --> 00:19:10,530
know they bleep but that's fine because

00:19:08,370 --> 00:19:15,270
upstart support stay for exec he just

00:19:10,530 --> 00:19:17,549
works so once cloud in at the top that

00:19:15,270 --> 00:19:20,280
the job has finished the system is now

00:19:17,549 --> 00:19:22,860
date way server he started off as a

00:19:20,280 --> 00:19:24,030
clean slate vanilla server the job run

00:19:22,860 --> 00:19:27,150
suddenly it's a database server and the

00:19:24,030 --> 00:19:29,730
boot continues absolutely brilliant I

00:19:27,150 --> 00:19:31,740
think this is again some references to

00:19:29,730 --> 00:19:34,080
you to man pages there to look at but

00:19:31,740 --> 00:19:35,910
yeah what's up Scott Moser have a look

00:19:34,080 --> 00:19:40,410
at the documentation of clad in very

00:19:35,910 --> 00:19:44,940
clever this is very clever friends

00:19:40,410 --> 00:19:48,330
recovery ok here it is friendly recovery

00:19:44,940 --> 00:19:49,830
allows even a naive user to fix this

00:19:48,330 --> 00:19:51,960
some users might log in his route and

00:19:49,830 --> 00:19:53,909
delete letter files whoops so what do

00:19:51,960 --> 00:19:55,830
you do well a Bunty provides us this

00:19:53,909 --> 00:19:59,009
facility so if you select recovery from

00:19:55,830 --> 00:20:00,690
the the grub big menu you weren't being

00:19:59,009 --> 00:20:03,960
dropped into this menu you can select an

00:20:00,690 --> 00:20:09,240
appropriate option F SEK or you know fix

00:20:03,960 --> 00:20:11,490
D package or something and yeah it'll

00:20:09,240 --> 00:20:13,860
all just work it makes basically clever

00:20:11,490 --> 00:20:16,230
use of upstart to temporarily subvert

00:20:13,860 --> 00:20:19,740
the system boot so let's see how it does

00:20:16,230 --> 00:20:22,950
that so the user selects recovery from

00:20:19,740 --> 00:20:24,840
me in it the the grub boot menu that

00:20:22,950 --> 00:20:26,210
results in the new trap profess starting

00:20:24,840 --> 00:20:28,409
up start and the box the top they're

00:20:26,210 --> 00:20:31,169
specifying this option to face the

00:20:28,409 --> 00:20:33,360
change the initial event normally

00:20:31,169 --> 00:20:36,149
upstart will omit the startup event that

00:20:33,360 --> 00:20:38,250
is the first that's the way that the

00:20:36,149 --> 00:20:40,320
system starts to beat that one event has

00:20:38,250 --> 00:20:43,320
to be reacted to but here were changing

00:20:40,320 --> 00:20:45,080
it to recovery and unsurprising have got

00:20:43,320 --> 00:20:48,960
there's a job called friend recovery

00:20:45,080 --> 00:20:50,389
which specifies start on recovery so the

00:20:48,960 --> 00:20:54,029
user select recovery from the grab menu

00:20:50,389 --> 00:20:57,500
up start starts it meets that event runs

00:20:54,029 --> 00:21:00,299
the friendly recovery job whoops right

00:20:57,500 --> 00:21:03,539
which drops the user into the the menu

00:21:00,299 --> 00:21:06,750
they fix their system they fab down to

00:21:03,539 --> 00:21:09,750
ok pressure turn and then what happens

00:21:06,750 --> 00:21:12,509
is at the end of the the job we want a

00:21:09,750 --> 00:21:14,669
post-op here the post-op runs in it's

00:21:12,509 --> 00:21:17,429
each elements startup which I was just

00:21:14,669 --> 00:21:20,190
said is normally the way the system

00:21:17,429 --> 00:21:23,669
boots so the overall result being the

00:21:20,190 --> 00:21:27,000
user is dropped into me they say they

00:21:23,669 --> 00:21:29,100
fix their system the menu exits now hope

00:21:27,000 --> 00:21:35,879
with a fixed system and the system could

00:21:29,100 --> 00:21:39,090
be normal right this is Steve's own so I

00:21:35,879 --> 00:21:40,980
get to talk about this one I couldn't

00:21:39,090 --> 00:21:42,120
resist putting this together in in

00:21:40,980 --> 00:21:42,960
preparation with the presentation this

00:21:42,120 --> 00:21:45,269
is actually something I've been meaning

00:21:42,960 --> 00:21:46,769
to do with my own GPG setup for a while

00:21:45,269 --> 00:21:48,509
now and since there were some some

00:21:46,769 --> 00:21:50,730
questions coming up on the the mailing

00:21:48,509 --> 00:21:53,940
list just before dev comp about best

00:21:50,730 --> 00:21:55,350
practices for GPG I thought this would

00:21:53,940 --> 00:21:58,860
be the opportune time to do something

00:21:55,350 --> 00:22:01,560
about that so you know nowadays lots of

00:21:58,860 --> 00:22:03,360
people use with their GPG keys they have

00:22:01,560 --> 00:22:05,340
keys and you you know you might put your

00:22:03,360 --> 00:22:07,350
sub key for your daily use on your

00:22:05,340 --> 00:22:10,440
laptop or on a different machine so that

00:22:07,350 --> 00:22:11,610
you you you it's it's always online it's

00:22:10,440 --> 00:22:13,470
convenient for you but it's also

00:22:11,610 --> 00:22:15,210
revocable without too much hassle well

00:22:13,470 --> 00:22:16,910
then that means that you have a master

00:22:15,210 --> 00:22:20,430
key somewhere that you're putting

00:22:16,910 --> 00:22:21,690
somewhere more secure well what is what

00:22:20,430 --> 00:22:24,000
is more secure mean it means it's

00:22:21,690 --> 00:22:28,200
offline but it also means it should be

00:22:24,000 --> 00:22:30,240
resilient to failure and not stealable

00:22:28,200 --> 00:22:32,640
and so the best way to actually have

00:22:30,240 --> 00:22:35,190
your your master key offline is if you

00:22:32,640 --> 00:22:37,890
do who here has actually used GF share

00:22:35,190 --> 00:22:40,320
you familiar with this few people few

00:22:37,890 --> 00:22:43,710
people yeah it's a great little tool

00:22:40,320 --> 00:22:44,910
that Daniel Silverstone I don't think

00:22:43,710 --> 00:22:46,590
he's currently active in Debian but he

00:22:44,910 --> 00:22:49,230
is a he at one time was a Debian

00:22:46,590 --> 00:22:51,630
developer which he wrote which allows

00:22:49,230 --> 00:22:57,120
you to take you know an arbitrary piece

00:22:51,630 --> 00:22:59,160
of data and split it into well split it

00:22:57,120 --> 00:23:04,460
into different pieces any one of which

00:22:59,160 --> 00:23:07,350
or any you can split it into M pieces

00:23:04,460 --> 00:23:09,750
requiring n of them to reconstitute the

00:23:07,350 --> 00:23:12,450
thing and if you have n minus one pieces

00:23:09,750 --> 00:23:13,650
it gives you no information so I mean

00:23:12,450 --> 00:23:16,400
the math behind this is actually fairly

00:23:13,650 --> 00:23:19,020
simple but I won't go into that here but

00:23:16,400 --> 00:23:22,590
what I really want is okay I have a

00:23:19,020 --> 00:23:24,600
master key I want to split it into say

00:23:22,590 --> 00:23:27,150
three parts I put one part in escrow

00:23:24,600 --> 00:23:28,500
somewhere safe that I don't touch but

00:23:27,150 --> 00:23:29,910
it's there as a backup in case I have a

00:23:28,500 --> 00:23:33,060
hardware failure on one of the other

00:23:29,910 --> 00:23:34,560
pieces I put one on my laptop and I put

00:23:33,060 --> 00:23:36,600
one on a USB key so that when I need to

00:23:34,560 --> 00:23:40,770
reconstitute it I just plugged my USB

00:23:36,600 --> 00:23:41,610
key into my laptop and and reconstituted

00:23:40,770 --> 00:23:42,990
there well I don't want to have to

00:23:41,610 --> 00:23:45,500
reconstitute it by hand because that's

00:23:42,990 --> 00:23:48,540
just annoying so here for example is a

00:23:45,500 --> 00:23:51,000
simple upstart job which were a lot

00:23:48,540 --> 00:23:53,280
which leverages the fact that this is

00:23:51,000 --> 00:23:55,440
currently Ubuntu specific Ubuntu in 1310

00:23:53,280 --> 00:23:57,390
is using upstart not just for managing

00:23:55,440 --> 00:23:59,100
the system but also managing user

00:23:57,390 --> 00:24:02,370
sessions so when you do a graphical

00:23:59,100 --> 00:24:05,040
login into one two 13 10 upstart runs as

00:24:02,370 --> 00:24:07,350
a user session manager starts all that

00:24:05,040 --> 00:24:08,970
all the the related processes instead of

00:24:07,350 --> 00:24:11,310
using you know gnome session and running

00:24:08,970 --> 00:24:13,380
desktop files it makes use of the fact

00:24:11,310 --> 00:24:14,970
that upstart has it's it's process

00:24:13,380 --> 00:24:18,299
supervision and everything

00:24:14,970 --> 00:24:20,220
to run through the jobs start them in

00:24:18,299 --> 00:24:21,840
the correct order and also ensure that

00:24:20,220 --> 00:24:23,250
they shut down correctly when the

00:24:21,840 --> 00:24:24,720
session ends so that's actually one of

00:24:23,250 --> 00:24:27,270
the things we saw certainly with Noma

00:24:24,720 --> 00:24:27,809
session is sometimes jobs would not get

00:24:27,270 --> 00:24:30,539
shut down

00:24:27,809 --> 00:24:32,010
and I think system D has has dealt with

00:24:30,539 --> 00:24:34,730
this problem in a similar way I mean so

00:24:32,010 --> 00:24:37,230
you guys use C groups to make sure that

00:24:34,730 --> 00:24:39,510
the processes don't escape the end of

00:24:37,230 --> 00:24:42,480
the session in this case we're not using

00:24:39,510 --> 00:24:43,890
C groups it hasn't been necessary for

00:24:42,480 --> 00:24:45,510
the the things we're trying to

00:24:43,890 --> 00:24:47,549
accomplish but just the fact that we

00:24:45,510 --> 00:24:49,409
have process supervision means we're

00:24:47,549 --> 00:24:50,549
we're successfully capturing things and

00:24:49,409 --> 00:24:53,070
shutting them down at the end of session

00:24:50,549 --> 00:24:54,960
that weren't being shut down before but

00:24:53,070 --> 00:24:57,990
it also means that you can easily extend

00:24:54,960 --> 00:25:00,210
the behavior of your user session keying

00:24:57,990 --> 00:25:01,679
on hardware level events because using

00:25:00,210 --> 00:25:03,659
upstart in the user session means you

00:25:01,679 --> 00:25:04,860
have basically the same view of system

00:25:03,659 --> 00:25:07,350
events all the way through the stack

00:25:04,860 --> 00:25:09,210
from from the kernel to you dev to the

00:25:07,350 --> 00:25:11,429
system upstart to the user upstart so

00:25:09,210 --> 00:25:14,130
for example here we have a job which

00:25:11,429 --> 00:25:16,409
starts on colon cysts block - device

00:25:14,130 --> 00:25:20,100
added which is just a the upstart

00:25:16,409 --> 00:25:23,070
translation of the event equals event

00:25:20,100 --> 00:25:24,270
equals ad etc etc that you would see if

00:25:23,070 --> 00:25:25,380
you were if you were you know don't

00:25:24,270 --> 00:25:28,830
running you dev at a monitor or

00:25:25,380 --> 00:25:30,570
something and we we pattern match and

00:25:28,830 --> 00:25:32,970
say well look for the first partition

00:25:30,570 --> 00:25:34,950
that shows up on the device that has the

00:25:32,970 --> 00:25:36,990
serial number because I want to specify

00:25:34,950 --> 00:25:39,600
to only do this one my particular USB

00:25:36,990 --> 00:25:41,580
stick is installed and then we want it

00:25:39,600 --> 00:25:43,799
to go ahead and combine things now this

00:25:41,580 --> 00:25:46,230
is not ideal here this this one you know

00:25:43,799 --> 00:25:48,809
we have a timeout in here I'm saying

00:25:46,230 --> 00:25:50,760
wait five seconds because we're not

00:25:48,809 --> 00:25:52,650
getting events for for you disks when

00:25:50,760 --> 00:25:54,330
you just mounts the device in the user

00:25:52,650 --> 00:25:55,500
session we're don't we're not getting

00:25:54,330 --> 00:25:56,669
any events off of that so we get the

00:25:55,500 --> 00:25:59,070
u-dub event but we don't actually get

00:25:56,669 --> 00:26:02,100
anything telling us that the filesystem

00:25:59,070 --> 00:26:04,770
is mounted so that's not ideal but in

00:26:02,100 --> 00:26:06,390
terms of implementation difficulty it's

00:26:04,770 --> 00:26:09,570
not too shabby

00:26:06,390 --> 00:26:14,100
and so we just have this here that you

00:26:09,570 --> 00:26:17,640
know called GF combined with targeting

00:26:14,100 --> 00:26:19,080
this is xyg runtime der which is if

00:26:17,640 --> 00:26:21,510
you're using upstart in the user session

00:26:19,080 --> 00:26:28,270
upstart respects the xdg spec to ensure

00:26:21,510 --> 00:26:30,289
that that's a a user only writable share

00:26:28,270 --> 00:26:32,899
basically a ramdisk

00:26:30,289 --> 00:26:34,610
so it's not persistent across boots so

00:26:32,899 --> 00:26:36,140
that's safe for us to write this kind of

00:26:34,610 --> 00:26:39,559
data to without it getting getting

00:26:36,140 --> 00:26:40,010
written to disk I mean it may be swapped

00:26:39,559 --> 00:26:42,279
out

00:26:40,010 --> 00:26:45,080
but in for the most part this is safe

00:26:42,279 --> 00:26:45,860
safer than writing it out to a disk

00:26:45,080 --> 00:26:47,960
somewhere and having to worry about

00:26:45,860 --> 00:26:50,179
deleting it later and we also have a

00:26:47,960 --> 00:26:51,740
post stop script so this shows this

00:26:50,179 --> 00:26:53,000
shows both the example of this is an

00:26:51,740 --> 00:26:56,090
example of a job that has a pre start

00:26:53,000 --> 00:26:58,130
script a post stop script and no no main

00:26:56,090 --> 00:27:00,320
exec line in between so the job is

00:26:58,130 --> 00:27:01,970
considered running with no process

00:27:00,320 --> 00:27:04,580
associated with it once the pre start

00:27:01,970 --> 00:27:06,529
script has completed and then this job

00:27:04,580 --> 00:27:08,480
is running and upstart keeps track of

00:27:06,529 --> 00:27:10,220
that so when it gets the event that

00:27:08,480 --> 00:27:13,159
triggers the stop which is you pull the

00:27:10,220 --> 00:27:14,510
USB stick out it goes ahead and runs the

00:27:13,159 --> 00:27:16,039
post op script and make sure it cleans

00:27:14,510 --> 00:27:20,059
up your your data automatically for you

00:27:16,039 --> 00:27:21,620
so it's a it's a clean little way to you

00:27:20,059 --> 00:27:23,149
know it's it's a nice little trick for

00:27:21,620 --> 00:27:25,399
managing gbg keys so I figured I'd show

00:27:23,149 --> 00:27:27,890
this here and you know the key thing

00:27:25,399 --> 00:27:29,390
here you can key on any YouTube event at

00:27:27,890 --> 00:27:33,200
all any attributes to the event that's

00:27:29,390 --> 00:27:35,210
all exposed the upstart monitor helper

00:27:33,200 --> 00:27:37,399
which which James showed earlier it's a

00:27:35,210 --> 00:27:40,399
nice GUI that you can just run it and

00:27:37,399 --> 00:27:42,710
see what events come through you know

00:27:40,399 --> 00:27:45,260
plug your USB stick in for a test see

00:27:42,710 --> 00:27:47,270
what events happen cut and paste you

00:27:45,260 --> 00:27:49,130
know copy paste from the GUI and and

00:27:47,270 --> 00:27:54,470
build some upstart jobs around whichever

00:27:49,130 --> 00:27:57,020
events you want to so so just to finish

00:27:54,470 --> 00:27:59,990
up my section the enables mints we've

00:27:57,020 --> 00:28:01,460
covered really or allowed they

00:27:59,990 --> 00:28:04,580
facilitated by the fact that upstart

00:28:01,460 --> 00:28:06,740
allows any job to hook into any part of

00:28:04,580 --> 00:28:10,059
the boot process and that yeah just

00:28:06,740 --> 00:28:13,070
think about that I mean you know

00:28:10,059 --> 00:28:16,159
whatever your use case is this will do

00:28:13,070 --> 00:28:19,220
it for you but also the fact that we

00:28:16,159 --> 00:28:23,260
have blocking events this is all

00:28:19,220 --> 00:28:28,610
documented the man pages so we can pause

00:28:23,260 --> 00:28:30,260
essentially pause an event and finally a

00:28:28,610 --> 00:28:32,450
friend recovery makes use the fact that

00:28:30,260 --> 00:28:34,760
you can essentially subvert the system

00:28:32,450 --> 00:28:39,049
boot temporarily as long as the startup

00:28:34,760 --> 00:28:40,310
event is emitted at some point you know

00:28:39,049 --> 00:28:42,320
your system good so

00:28:40,310 --> 00:28:45,020
friendly recovery switches to a recovery

00:28:42,320 --> 00:28:50,420
pass does its recovery and then switches

00:28:45,020 --> 00:28:53,360
back to the main blue pass and yeah as

00:28:50,420 --> 00:28:55,190
we've got the last point here the fact

00:28:53,360 --> 00:28:56,780
that with with 1310 you know you can

00:28:55,190 --> 00:28:59,180
make you sum up start running as a user

00:28:56,780 --> 00:29:00,350
as well and as Steve's example showed

00:28:59,180 --> 00:29:05,780
you get the Cisco dance it's kind of a

00:29:00,350 --> 00:29:07,520
preview prefix so you can write write a

00:29:05,780 --> 00:29:10,550
job which makes use of system level

00:29:07,520 --> 00:29:11,600
events that's kind of namespace talks

00:29:10,550 --> 00:29:13,820
you can have your own events as well of

00:29:11,600 --> 00:29:15,260
course your level but you can react to

00:29:13,820 --> 00:29:18,740
any system level event you'd have

00:29:15,260 --> 00:29:27,590
identify whatever you want d-bus and

00:29:18,740 --> 00:29:29,450
with that I'll positive Steve follow-up

00:29:27,590 --> 00:29:31,490
coming on that on the GPG job that I

00:29:29,450 --> 00:29:32,990
showed there and of course I say that

00:29:31,490 --> 00:29:34,340
this is something that I wrote just in

00:29:32,990 --> 00:29:35,780
preparation for this talk interesting

00:29:34,340 --> 00:29:37,250
story in the process of that I had

00:29:35,780 --> 00:29:39,710
previously been keeping my master key on

00:29:37,250 --> 00:29:42,140
a USB stick which when I went to go

00:29:39,710 --> 00:29:46,520
prepare this talk I found that the media

00:29:42,140 --> 00:29:48,950
had degraded so I only just managed to

00:29:46,520 --> 00:29:51,110
recover my master GPG off of off of that

00:29:48,950 --> 00:29:54,020
media and and implement this for it just

00:29:51,110 --> 00:29:55,370
in time for the talk so this is a good

00:29:54,020 --> 00:29:57,290
idea to do this don't just keep your

00:29:55,370 --> 00:29:58,370
master GPG key on a USB stick and expect

00:29:57,290 --> 00:30:00,290
the media will last forever

00:29:58,370 --> 00:30:05,510
apparently the lifespan of some of these

00:30:00,290 --> 00:30:06,410
is you know six years or so so we've

00:30:05,510 --> 00:30:08,660
shown you a little bit of the

00:30:06,410 --> 00:30:11,410
architecture of upstart and and some of

00:30:08,660 --> 00:30:11,410
its features and

00:30:18,510 --> 00:30:21,880
[Laughter]

00:30:25,290 --> 00:30:29,610
so yes it's an unexpected event I'm not

00:30:28,290 --> 00:30:31,530
handling that I have no chance to start

00:30:29,610 --> 00:30:33,180
on that um so we've looked at the

00:30:31,530 --> 00:30:34,920
architecture of upstart showing some of

00:30:33,180 --> 00:30:36,690
its features some of some of what makes

00:30:34,920 --> 00:30:38,580
it distinct from from other init systems

00:30:36,690 --> 00:30:40,200
but really the question we want to

00:30:38,580 --> 00:30:43,500
address here is why should Debian use

00:30:40,200 --> 00:30:48,450
upstart what is it about why is upstart

00:30:43,500 --> 00:30:50,880
the right system for Debian so the first

00:30:48,450 --> 00:30:51,780
point is that your system is in fact the

00:30:50,880 --> 00:30:53,820
event-based

00:30:51,780 --> 00:30:55,290
whether you like it or not this is how

00:30:53,820 --> 00:30:56,910
the kernel has been working for the past

00:30:55,290 --> 00:30:58,200
decade this is how you dev works any

00:30:56,910 --> 00:30:59,730
system that runs you dev is an

00:30:58,200 --> 00:31:01,800
event-based system there are events

00:30:59,730 --> 00:31:04,650
related to hardware there are events

00:31:01,800 --> 00:31:07,530
related to network changes all of this

00:31:04,650 --> 00:31:11,100
is event based and so what upstart does

00:31:07,530 --> 00:31:14,520
is it provides a system that's that's

00:31:11,100 --> 00:31:17,910
low impedance with respect to how the

00:31:14,520 --> 00:31:20,220
underlying kernel and you dev

00:31:17,910 --> 00:31:21,660
architecture works it provides an init

00:31:20,220 --> 00:31:23,340
system that works along with that and

00:31:21,660 --> 00:31:25,200
provides a consistent view all the way

00:31:23,340 --> 00:31:26,790
up the stack even up in the case of

00:31:25,200 --> 00:31:28,380
upstart user sessions all the way up to

00:31:26,790 --> 00:31:30,720
the to the user session where users can

00:31:28,380 --> 00:31:35,160
can write jobs without any privileges

00:31:30,720 --> 00:31:38,460
and you know react to hardware events so

00:31:35,160 --> 00:31:40,050
you know it's it's symmetric it the

00:31:38,460 --> 00:31:43,320
Linux kernel is event based you Devi's

00:31:40,050 --> 00:31:44,880
event based d-bus anything that happens

00:31:43,320 --> 00:31:49,320
on d-bus these are events we live in an

00:31:44,880 --> 00:31:51,820
event based universe and this is the the

00:31:49,320 --> 00:31:54,110
init system for an event base universe

00:31:51,820 --> 00:32:01,200
[Music]

00:31:54,110 --> 00:32:03,540
furthermore where's the I yes it's all

00:32:01,200 --> 00:32:05,550
so it's simple it doesn't require a

00:32:03,540 --> 00:32:07,290
dependency solver like dependency based

00:32:05,550 --> 00:32:08,910
systems it means that there is obviously

00:32:07,290 --> 00:32:11,670
complexity in the system we move that

00:32:08,910 --> 00:32:15,140
complexity out of pit one we're not

00:32:11,670 --> 00:32:17,880
doing dependency resolution in pit one

00:32:15,140 --> 00:32:19,230
well granted so for sis five in it the

00:32:17,880 --> 00:32:22,200
dependency resolution doesn't happen in

00:32:19,230 --> 00:32:24,240
pit one either you have start par and in

00:32:22,200 --> 00:32:25,890
serve versus five and it has an overlay

00:32:24,240 --> 00:32:27,000
that provides that functionality but it

00:32:25,890 --> 00:32:29,760
doesn't mean that

00:32:27,000 --> 00:32:31,860
we provide an awful lot of power in kid

00:32:29,760 --> 00:32:33,390
1 without having to have a whole lot of

00:32:31,860 --> 00:32:35,309
complexity upstart just deals with

00:32:33,390 --> 00:32:37,559
events and it deals with processes and

00:32:35,309 --> 00:32:39,750
and there's some you know so nice

00:32:37,559 --> 00:32:42,539
features around that regarding how you

00:32:39,750 --> 00:32:45,330
start the processes and and you know

00:32:42,539 --> 00:32:46,590
routing set UID limits those kinds of

00:32:45,330 --> 00:32:49,880
things but it's all its managing

00:32:46,590 --> 00:32:52,740
processes handling events and that's it

00:32:49,880 --> 00:32:54,470
so any any complexity about building up

00:32:52,740 --> 00:32:57,840
chains of events just requires you to

00:32:54,470 --> 00:33:01,320
write jobs that key on events it's also

00:32:57,840 --> 00:33:03,270
reliable mount all there was there there

00:33:01,320 --> 00:33:05,429
I believe we have a philosophical

00:33:03,270 --> 00:33:06,809
disagreement with the systemd developers

00:33:05,429 --> 00:33:08,700
regarding whether Mount Hall was a hack

00:33:06,809 --> 00:33:10,200
I did have a look at system DS source

00:33:08,700 --> 00:33:12,299
code and I do see there are references

00:33:10,200 --> 00:33:15,990
to FS check in the system deep in one

00:33:12,299 --> 00:33:17,610
source code so you know the fact that FS

00:33:15,990 --> 00:33:19,110
check has handled somewhat specially and

00:33:17,610 --> 00:33:21,419
in the case of upstart happens to be

00:33:19,110 --> 00:33:23,520
handled out of process it's a design

00:33:21,419 --> 00:33:26,419
decision but in terms of what Mount Hall

00:33:23,520 --> 00:33:29,460
gives you it's a lot of power that

00:33:26,419 --> 00:33:33,090
manages to successfully handle all kinds

00:33:29,460 --> 00:33:37,049
of boot scenarios we have correct

00:33:33,090 --> 00:33:42,140
implementations for LVM crypt setup you

00:33:37,049 --> 00:33:44,490
know software raid NFS is handled fine

00:33:42,140 --> 00:33:47,400
was tricky to get right I'll be honest

00:33:44,490 --> 00:33:52,159
but it is implemented and and that code

00:33:47,400 --> 00:33:52,159
is available and tested today in Ubuntu

00:33:53,030 --> 00:33:58,350
yeah jobs can react immediately they

00:33:56,280 --> 00:33:59,340
will block the boot so when we say the

00:33:58,350 --> 00:34:00,960
block the boot one of the things is

00:33:59,340 --> 00:34:03,630
mount I'll will mount file systems in

00:34:00,960 --> 00:34:04,860
parallel we are running over time so I'm

00:34:03,630 --> 00:34:06,659
just gonna actually speed this along

00:34:04,860 --> 00:34:11,089
here so we can take some questions at

00:34:06,659 --> 00:34:14,760
the end so Mount Hall will block

00:34:11,089 --> 00:34:15,869
emitting general file system events so

00:34:14,760 --> 00:34:18,210
like there's an event in the mountain

00:34:15,869 --> 00:34:22,050
limits which is local file systems and

00:34:18,210 --> 00:34:23,580
file system and virtual file systems and

00:34:22,050 --> 00:34:25,589
a few other things like that remote file

00:34:23,580 --> 00:34:26,760
systems which are events that say yes

00:34:25,589 --> 00:34:29,010
I'm done mounting the local file system

00:34:26,760 --> 00:34:30,990
and those events don't happen until all

00:34:29,010 --> 00:34:32,849
anything that keys on a mounted event is

00:34:30,990 --> 00:34:34,589
finished but the only nice thing is that

00:34:32,849 --> 00:34:36,179
you can trigger on mounting so one of

00:34:34,589 --> 00:34:37,260
the things about like I mentioned NFS

00:34:36,179 --> 00:34:39,300
specifically one of the problems is

00:34:37,260 --> 00:34:40,290
getting all of the RPC related services

00:34:39,300 --> 00:34:42,389
to start up in the right or

00:34:40,290 --> 00:34:44,280
and also startup quickly so you're not

00:34:42,389 --> 00:34:46,500
waiting around so if your network

00:34:44,280 --> 00:34:48,120
happens to be racing your file system

00:34:46,500 --> 00:34:49,290
and the network comes up in something

00:34:48,120 --> 00:34:50,399
that says I've got a network let's go

00:34:49,290 --> 00:34:51,659
ahead and start all the network file

00:34:50,399 --> 00:34:53,580
systems and you don't have your RPC

00:34:51,659 --> 00:34:55,560
services ready to go and you're trying

00:34:53,580 --> 00:34:56,880
to mount NFS on boot everything falls

00:34:55,560 --> 00:34:59,070
over in a heap was this five minute in

00:34:56,880 --> 00:35:02,070
fact there's you know there's there's

00:34:59,070 --> 00:35:03,930
some some lovely hacks in the the NFS

00:35:02,070 --> 00:35:06,930
common package in Debian right now which

00:35:03,930 --> 00:35:08,610
I just learned don't work with start par

00:35:06,930 --> 00:35:10,380
because start part outsmarts the NFS

00:35:08,610 --> 00:35:13,440
common package and so it's not actually

00:35:10,380 --> 00:35:15,090
doing what it's meant to do mount all

00:35:13,440 --> 00:35:17,780
avoids all that it makes sure that we

00:35:15,090 --> 00:35:21,510
run everything once in the right order

00:35:17,780 --> 00:35:24,150
and you know flexibility so you can you

00:35:21,510 --> 00:35:30,420
can stick another job in in front behind

00:35:24,150 --> 00:35:31,590
whatever wherever it might go but you

00:35:30,420 --> 00:35:33,450
know that talks in general terms about

00:35:31,590 --> 00:35:35,340
why we think upstarts design is good I

00:35:33,450 --> 00:35:38,220
also wanted to point out specifically

00:35:35,340 --> 00:35:40,050
this solves real problems including some

00:35:38,220 --> 00:35:42,930
very long-standing problems in Debian

00:35:40,050 --> 00:35:44,970
there are some very old bugs that we

00:35:42,930 --> 00:35:47,580
have never dealt with we keep papering

00:35:44,970 --> 00:35:49,650
on layer after layer of workarounds and

00:35:47,580 --> 00:35:52,550
if you've ever actually looked under the

00:35:49,650 --> 00:35:54,720
hood at things like Etsy Network if up D

00:35:52,550 --> 00:35:57,570
some of the crazy stuff that's in there

00:35:54,720 --> 00:35:59,070
at CRC ESD the stuff that's that's in

00:35:57,570 --> 00:36:00,840
these directories that's papering over

00:35:59,070 --> 00:36:02,850
race conditions that's dealing with

00:36:00,840 --> 00:36:05,190
restarting things it's really quite

00:36:02,850 --> 00:36:06,930
messy an upstart lets us get away from

00:36:05,190 --> 00:36:09,780
all of that it's a simple system that

00:36:06,930 --> 00:36:11,640
does the right thing once instead of

00:36:09,780 --> 00:36:16,740
having races including races that have

00:36:11,640 --> 00:36:19,530
gone unsolved for years you know here's

00:36:16,740 --> 00:36:21,690
a few examples that we have here I have

00:36:19,530 --> 00:36:23,760
a few more here for instance apparently

00:36:21,690 --> 00:36:25,350
upstart improves Debian's competitively

00:36:23,760 --> 00:36:27,000
with token ring interfaces so it's not

00:36:25,350 --> 00:36:36,420
just about new it's not about new

00:36:27,000 --> 00:36:37,710
hardware it's about old hardware - you

00:36:36,420 --> 00:36:42,390
got rid of token ring in the kernel

00:36:37,710 --> 00:36:44,130
didn't you yeah so regardless I mean the

00:36:42,390 --> 00:36:46,410
point is it's not just this is not a new

00:36:44,130 --> 00:36:48,530
problem it's not a it's it's not a

00:36:46,410 --> 00:36:50,700
problem that's specific to - you know

00:36:48,530 --> 00:36:51,960
futuristic corner cases this solves a

00:36:50,700 --> 00:36:53,290
lot of problems we've had for a lot of

00:36:51,960 --> 00:36:58,840
time and solves them in an elegant

00:36:53,290 --> 00:37:01,390
fashion yeah this one in particular the

00:36:58,840 --> 00:37:03,130
the the how we start interfaces network

00:37:01,390 --> 00:37:04,960
interfaces on boot-up is a real ongoing

00:37:03,130 --> 00:37:07,150
problem here's a bug that's been open

00:37:04,960 --> 00:37:09,220
for seven years last touched four years

00:37:07,150 --> 00:37:11,170
ago and this is a problem that using sis

00:37:09,220 --> 00:37:13,240
five in it just is not getting solved

00:37:11,170 --> 00:37:16,810
upstart solves it this is a non issue

00:37:13,240 --> 00:37:19,060
whatsoever with upstart a couple more

00:37:16,810 --> 00:37:21,610
can'tcan't unmount file systems cleanly

00:37:19,060 --> 00:37:24,690
getting the the ordering right wrong on

00:37:21,610 --> 00:37:27,370
shutdown where you know we're trying to

00:37:24,690 --> 00:37:28,720
unmount file systems that narrow file

00:37:27,370 --> 00:37:30,250
systems after we've already torn out the

00:37:28,720 --> 00:37:32,200
network doesn't work so well with some

00:37:30,250 --> 00:37:33,880
of our network file systems that's a

00:37:32,200 --> 00:37:35,770
problem that the upstart solves not I

00:37:33,880 --> 00:37:37,090
wouldn't say that it's all dan haren

00:37:35,770 --> 00:37:38,680
tlie it's just that upstart gets the

00:37:37,090 --> 00:37:41,170
ordering right in a way that has been

00:37:38,680 --> 00:37:42,730
difficult to do with sus v in it and I

00:37:41,170 --> 00:37:47,950
even found while I was traveling the BTS

00:37:42,730 --> 00:37:50,530
there was an example of yeah system G

00:37:47,950 --> 00:37:52,600
bugs so the the the system D

00:37:50,530 --> 00:38:00,490
implementation still has some issues in

00:37:52,600 --> 00:38:02,650
Debian l vm crypt boot hangs so but also

00:38:00,490 --> 00:38:04,000
I mean upstart shares Debian values the

00:38:02,650 --> 00:38:06,400
principle of doing one thing and doing

00:38:04,000 --> 00:38:08,800
it well is core to the design of upstart

00:38:06,400 --> 00:38:11,200
we only put in pit one what has to be

00:38:08,800 --> 00:38:14,380
there and we also we always support

00:38:11,200 --> 00:38:16,060
upgrades we will not implement features

00:38:14,380 --> 00:38:17,950
in upstart we will not make upstart

00:38:16,060 --> 00:38:19,990
depend on features that are not

00:38:17,950 --> 00:38:21,910
available in the previous kernel for the

00:38:19,990 --> 00:38:23,800
previous release we're very conservative

00:38:21,910 --> 00:38:25,510
about extending features we want to make

00:38:23,800 --> 00:38:27,670
sure that upgrades continue to work

00:38:25,510 --> 00:38:29,650
they're important to to abun to just as

00:38:27,670 --> 00:38:32,940
they are to Debian and this is a this is

00:38:29,650 --> 00:38:36,430
a guarantee we will make it also is is

00:38:32,940 --> 00:38:38,200
coming from a Debian Ubuntu mindset it

00:38:36,430 --> 00:38:40,210
the its handling of configuration files

00:38:38,200 --> 00:38:43,690
is actually very natural for for Debian

00:38:40,210 --> 00:38:45,790
and so we have the config files

00:38:43,690 --> 00:38:47,710
themselves are editable and so you can

00:38:45,790 --> 00:38:49,420
use traditional comp file handling there

00:38:47,710 --> 00:38:51,670
if you need to but it also supports this

00:38:49,420 --> 00:38:53,350
override mechanism where you can support

00:38:51,670 --> 00:38:54,730
user configuration in a separate file

00:38:53,350 --> 00:38:56,020
and an overlay and we've had some

00:38:54,730 --> 00:39:01,690
philosophical discussions on debian

00:38:56,020 --> 00:39:03,190
develop you have an overlay that means

00:39:01,690 --> 00:39:03,550
you have a silent conflict that you've

00:39:03,190 --> 00:39:05,380
not

00:39:03,550 --> 00:39:06,790
with an upgrade time but the

00:39:05,380 --> 00:39:07,960
functionality is there the capability is

00:39:06,790 --> 00:39:11,860
there where you can you can do that both

00:39:07,960 --> 00:39:13,750
ways and it's proven technology you know

00:39:11,860 --> 00:39:17,050
it's used in millions of systems already

00:39:13,750 --> 00:39:20,350
it's been shipped in three long term

00:39:17,050 --> 00:39:22,270
support releases for a bun to the the

00:39:20,350 --> 00:39:26,020
first one was in sis five kapap mode the

00:39:22,270 --> 00:39:28,210
second one had some bugs that managed to

00:39:26,020 --> 00:39:30,130
make it into the LTS and so upstart kind

00:39:28,210 --> 00:39:32,560
of you know had that reputation for

00:39:30,130 --> 00:39:35,050
being new new code that was not quite

00:39:32,560 --> 00:39:38,620
battle-hardened but we've shipped Ubuntu

00:39:35,050 --> 00:39:40,330
1204 now and in 1204 the kinks have been

00:39:38,620 --> 00:39:42,430
worked out this is proven technology

00:39:40,330 --> 00:39:43,930
there's no no question about whether and

00:39:42,430 --> 00:39:46,390
this is gonna meet the needs of anybody

00:39:43,930 --> 00:39:47,770
who's running Debian to use this as a

00:39:46,390 --> 00:39:52,750
system it will handle all the corner

00:39:47,770 --> 00:39:55,810
cases just fine so other than that we

00:39:52,750 --> 00:39:57,610
have some links up here which we are now

00:39:55,810 --> 00:40:00,130
short on time the slides will be posted

00:39:57,610 --> 00:40:01,540
on the Pinta they're not posted yet but

00:40:00,130 --> 00:40:04,410
we are down to less than five minutes so

00:40:01,540 --> 00:40:04,410
I think it's time for questions

00:40:11,520 --> 00:40:16,720
so just one thing is a the one thing I

00:40:15,190 --> 00:40:21,660
want to comment on is your example with

00:40:16,720 --> 00:40:23,800
the with the DBT key on the USB key

00:40:21,660 --> 00:40:25,060
you're hooking into the wrong event

00:40:23,800 --> 00:40:26,830
there right you're not hooking into the

00:40:25,060 --> 00:40:28,990
mounting and you hook into the device

00:40:26,830 --> 00:40:31,030
event and then yes to sleep five yes I

00:40:28,990 --> 00:40:32,770
mean that's better than indication that

00:40:31,030 --> 00:40:34,510
you're not doing things right because

00:40:32,770 --> 00:40:35,560
you have all these sleep lives no no it

00:40:34,510 --> 00:40:37,120
doesn't it doesn't okay we're not doing

00:40:35,560 --> 00:40:37,930
things right it it's you discs isn't

00:40:37,120 --> 00:40:40,000
doing things right because it's not

00:40:37,930 --> 00:40:41,530
talking about all right so if you if you

00:40:40,000 --> 00:40:43,480
look at what system B does in that area

00:40:41,530 --> 00:40:45,430
it's two totally sufficient to just like

00:40:43,480 --> 00:40:47,290
there's an event generated and in system

00:40:45,430 --> 00:40:49,930
Li for the mounting and you can just

00:40:47,290 --> 00:40:51,790
drop in a snippet into the top mount you

00:40:49,930 --> 00:40:54,010
know in the whatever your month all

00:40:51,790 --> 00:40:55,810
thought wants a directory and then it's

00:40:54,010 --> 00:40:57,760
executed as soon as that happened sure

00:40:55,810 --> 00:41:00,700
but I mean the mounting is not handled

00:40:57,760 --> 00:41:02,620
by by upstart in this case because we're

00:41:00,700 --> 00:41:04,750
using new discs which is upstream free

00:41:02,620 --> 00:41:06,400
desktop shortcut Knology and you discs

00:41:04,750 --> 00:41:11,650
it's gonna require that that's the nice

00:41:06,400 --> 00:41:13,390
thing you would you would argue the init

00:41:11,650 --> 00:41:15,260
system should synthesize events in

00:41:13,390 --> 00:41:16,610
response to you just taking the

00:41:15,260 --> 00:41:19,790
now assistant Lee doesn't know nothing

00:41:16,610 --> 00:41:21,320
about you discs it's about like you talk

00:41:19,790 --> 00:41:22,850
about all the events stuff but you don't

00:41:21,320 --> 00:41:25,010
actually generate those events right

00:41:22,850 --> 00:41:26,390
because it's you get a kernel event if

00:41:25,010 --> 00:41:29,450
you mount the stuff so you should be

00:41:26,390 --> 00:41:30,950
hooking into that but anyway if you if

00:41:29,450 --> 00:41:32,210
you look at from the other way you have

00:41:30,950 --> 00:41:34,610
this mount all thing that we already

00:41:32,210 --> 00:41:35,990
talked about yesterday right and the

00:41:34,610 --> 00:41:37,910
problem about mount all is that it only

00:41:35,990 --> 00:41:41,900
runs at boot time right that is a

00:41:37,910 --> 00:41:44,000
problem yes yes so I'm the event system

00:41:41,900 --> 00:41:45,920
the actual event system of upstart is

00:41:44,000 --> 00:41:48,170
it's not useful for either the the

00:41:45,920 --> 00:41:51,650
latest stuff like like your triggers

00:41:48,170 --> 00:41:54,740
like the best case knowledge of

00:41:51,650 --> 00:41:55,940
limitations of the example that I have

00:41:54,740 --> 00:41:57,320
there I think there's more work to be

00:41:55,940 --> 00:41:59,090
done regarding the event system

00:41:57,320 --> 00:42:00,290
especially relating to two mounting

00:41:59,090 --> 00:42:03,020
events and mount mount and unmount

00:42:00,290 --> 00:42:05,390
handling throughout the system mount all

00:42:03,020 --> 00:42:07,220
your write it is currently a one time at

00:42:05,390 --> 00:42:08,630
boot solution so any sort of anything

00:42:07,220 --> 00:42:09,770
that gets mounted later it's not

00:42:08,630 --> 00:42:11,150
currently headed through mount all and

00:42:09,770 --> 00:42:12,620
so there is a disconnect there where we

00:42:11,150 --> 00:42:14,600
do not have a consistent vision and that

00:42:12,620 --> 00:42:19,880
is something that I want to correct so I

00:42:14,600 --> 00:42:21,740
think I like to you know systemd had

00:42:19,880 --> 00:42:23,630
their promo talk yesterday this is up

00:42:21,740 --> 00:42:26,120
starts promo talk so I think there are

00:42:23,630 --> 00:42:29,420
other things that I want to to talk

00:42:26,120 --> 00:42:31,310
about the most significant obstacle it

00:42:29,420 --> 00:42:34,640
seems to me from a debian point of view

00:42:31,310 --> 00:42:37,640
is the contributor agreement I noticed

00:42:34,640 --> 00:42:38,930
you didn't mention that at all is there

00:42:37,640 --> 00:42:40,400
any possibility of movement on that

00:42:38,930 --> 00:42:42,320
because that's going to be a big problem

00:42:40,400 --> 00:42:44,160
for Debian I think I'm speaking for many

00:42:42,320 --> 00:42:49,160
people here

00:42:44,160 --> 00:42:53,359
[Applause]

00:42:49,160 --> 00:42:53,359
always about the licenses with you in

00:42:55,190 --> 00:42:59,760
what is it with definite licenses I

00:42:57,510 --> 00:43:02,430
don't understand you bloody well old

00:42:59,760 --> 00:43:07,109
team sorry you bloody well old to buy

00:43:02,430 --> 00:43:09,720
now I didn't see you on deputy and legal

00:43:07,109 --> 00:43:14,520
helping out that's not the place that

00:43:09,720 --> 00:43:15,869
decision has been made isn't no so to

00:43:14,520 --> 00:43:18,630
make sure everybody understands the the

00:43:15,869 --> 00:43:21,869
status of upstart canonical has a policy

00:43:18,630 --> 00:43:23,460
of requiring a contributor License

00:43:21,869 --> 00:43:24,690
Agreement which is not the same thing as

00:43:23,460 --> 00:43:27,080
copyright assignment but we do require

00:43:24,690 --> 00:43:28,950
in terms of upstream contributions

00:43:27,080 --> 00:43:30,630
anything that's going to be contributed

00:43:28,950 --> 00:43:34,260
upstream to upstart does have to be

00:43:30,630 --> 00:43:37,470
granted the contribute license agreement

00:43:34,260 --> 00:43:40,140
has to be signed giving canonical as the

00:43:37,470 --> 00:43:43,200
copyright holder of the overall work the

00:43:40,140 --> 00:43:44,640
right to for instance real license you

00:43:43,200 --> 00:43:46,320
know it provides for certain

00:43:44,640 --> 00:43:48,300
capabilities of making sure they can

00:43:46,320 --> 00:43:53,550
deal with any litigation that might come

00:43:48,300 --> 00:43:55,440
up and various other aspects it's not

00:43:53,550 --> 00:43:57,210
something that is actually negotiable in

00:43:55,440 --> 00:43:58,440
terms of whether upstart as an upstream

00:43:57,210 --> 00:44:02,099
is going to change that License

00:43:58,440 --> 00:44:04,109
Agreement this is not actually

00:44:02,099 --> 00:44:07,470
altogether different from lots of other

00:44:04,109 --> 00:44:09,810
projects that Debian ships of course we

00:44:07,470 --> 00:44:13,200
can compare and contrast with the FSF's

00:44:09,810 --> 00:44:16,230
position particularly in that FSF is of

00:44:13,200 --> 00:44:18,000
course a nonprofit dedicated to free

00:44:16,230 --> 00:44:20,369
software whereas canonical is a is a

00:44:18,000 --> 00:44:22,740
corporation and so I know I recognize

00:44:20,369 --> 00:44:23,490
that people are not necessarily okay

00:44:22,740 --> 00:44:24,900
with this

00:44:23,490 --> 00:44:28,430
but I will point out there's lots of

00:44:24,900 --> 00:44:28,430
other people in the ecosystem doing this

00:44:30,200 --> 00:44:38,099
and sorry but we are running out of time

00:44:34,230 --> 00:44:40,830
so I suggest we continue this hallway

00:44:38,099 --> 00:44:43,230
trying the FSF's contributor agreement

00:44:40,830 --> 00:44:45,330
the copyright license the FSF legally

00:44:43,230 --> 00:44:47,880
binding lis promise not to take anything

00:44:45,330 --> 00:44:51,150
that you sign over to them in that way

00:44:47,880 --> 00:44:53,490
non free canonical specifically intend

00:44:51,150 --> 00:44:55,170
to be able to do that we've heard Mark

00:44:53,490 --> 00:44:56,630
Shuttleworth tell us but that's the

00:44:55,170 --> 00:44:59,070
purpose and that this is a thing that

00:44:56,630 --> 00:44:59,290
you know companies like canonical should

00:44:59,070 --> 00:45:02,080
be

00:44:59,290 --> 00:45:03,850
allowed to do so I think he was speaking

00:45:02,080 --> 00:45:06,760
in a general philosophical sense that

00:45:03,850 --> 00:45:07,870
but Co lay there companies that it is

00:45:06,760 --> 00:45:09,520
something that companies should be

00:45:07,870 --> 00:45:11,530
allowed to do well it's a thing that the

00:45:09,520 --> 00:45:14,140
canonical contributor agreement allows

00:45:11,530 --> 00:45:15,700
canonical to do because in mark who's in

00:45:14,140 --> 00:45:17,140
terms of canonical tells us he thinks

00:45:15,700 --> 00:45:20,110
companies should be allowed to do it and

00:45:17,140 --> 00:45:21,580
when the FSF tell us not only do they

00:45:20,110 --> 00:45:23,620
not think it's a good idea they also

00:45:21,580 --> 00:45:26,470
promise in a legally binding way not to

00:45:23,620 --> 00:45:28,720
so that's a very clear distinction okay

00:45:26,470 --> 00:45:30,130
so submit your patches for upstart don't

00:45:28,720 --> 00:45:34,120
you don't sign the CLA and we'll see

00:45:30,130 --> 00:45:37,000
what happens well let's well submit them

00:45:34,120 --> 00:45:38,340
to the Debian maintainer so we're out of

00:45:37,000 --> 00:45:43,480
time

00:45:38,340 --> 00:45:45,220
Thanks please please thank miss Frank

00:45:43,480 --> 00:45:46,960
Steven and James for their presentation

00:45:45,220 --> 00:45:48,660
and we'll continue the discussion later

00:45:46,960 --> 00:45:56,820
I'm pretty here

00:45:48,660 --> 00:45:56,820

YouTube URL: https://www.youtube.com/watch?v=o5Ev6wrfoCo


