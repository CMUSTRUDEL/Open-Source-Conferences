Title: Secure Boot for Debian Linux
Publication date: 2017-11-29
Playlist: DebConf 13
Description: 
	by Ben Hutchings

At: DebConf13
https://debconf13.debconf.org/
Room: Second talk room
Scheduled start: 2013-08-13 14:30:00
Captions: 
	00:00:00,350 --> 00:00:06,270
hi so welcome to our afternoon session

00:00:03,020 --> 00:00:09,870
we've been hatchings about secure boot

00:00:06,270 --> 00:00:11,460
for Debian and if you have probably you

00:00:09,870 --> 00:00:15,839
have many questions so I have to tie to

00:00:11,460 --> 00:00:18,930
micros so as your hand I will try to end

00:00:15,839 --> 00:00:21,359
to give you the micros thank you

00:00:18,930 --> 00:00:23,640
well I don't actually have very much to

00:00:21,359 --> 00:00:25,980
say I don't want be able to ask

00:00:23,640 --> 00:00:27,539
questions because I don't know a lot of

00:00:25,980 --> 00:00:29,160
this just trying to bring people

00:00:27,539 --> 00:00:33,420
together so we actually have some sort

00:00:29,160 --> 00:00:37,070
of a discussion between people who do

00:00:33,420 --> 00:00:40,160
have plans who have looked into the

00:00:37,070 --> 00:00:45,390
various components but only used to make

00:00:40,160 --> 00:00:47,489
needed to support secure boot and amazed

00:00:45,390 --> 00:01:01,680
maybe start making some progress on that

00:00:47,489 --> 00:01:04,769
again so they don't want start : Watson

00:01:01,680 --> 00:01:12,869
I did proportion of the secure boot

00:01:04,769 --> 00:01:14,729
enablement and davinci the so you have

00:01:12,869 --> 00:01:19,830
to have a number of elements in stock

00:01:14,729 --> 00:01:22,229
obviously we we started with within the

00:01:19,830 --> 00:01:27,020
the things you need in grub to be able

00:01:22,229 --> 00:01:30,420
to boot insecure of a motor soul

00:01:27,020 --> 00:01:32,220
obviously you need a signed image which

00:01:30,420 --> 00:01:34,409
is not terribly difficult in themselves

00:01:32,220 --> 00:01:39,030
but you do also need to make sure that

00:01:34,409 --> 00:01:42,780
you disable module loading the the main

00:01:39,030 --> 00:01:44,909
constraint in secure boats assign secure

00:01:42,780 --> 00:01:48,270
boots that's enforced by the spec is

00:01:44,909 --> 00:01:51,420
that you must not load unsigned code

00:01:48,270 --> 00:01:53,579
before exit boot services which is the

00:01:51,420 --> 00:01:56,610
firmware call that you make at the end

00:01:53,579 --> 00:02:00,090
of the summer on the end of the boot

00:01:56,610 --> 00:02:02,640
loader sequence so so we have a set of

00:02:00,090 --> 00:02:08,640
patches which we put together with

00:02:02,640 --> 00:02:10,580
Federer to to try to effectively harden

00:02:08,640 --> 00:02:12,530
grub for the US

00:02:10,580 --> 00:02:14,270
those work fine those are in Debian

00:02:12,530 --> 00:02:17,060
their turret they're currently turned

00:02:14,270 --> 00:02:20,420
off by a Debian real switch but it's

00:02:17,060 --> 00:02:23,840
trivial to enable there is a few other

00:02:20,420 --> 00:02:25,760
things around that you have to have

00:02:23,840 --> 00:02:30,050
corresponding changes to a couple of

00:02:25,760 --> 00:02:32,990
bits for the Installer and you also have

00:02:30,050 --> 00:02:35,470
to somehow but you have to arrange the

00:02:32,990 --> 00:02:41,870
the signing to to happen and write this

00:02:35,470 --> 00:02:44,720
so we we patched our archive software to

00:02:41,870 --> 00:02:47,240
accept custom upload type which is kind

00:02:44,720 --> 00:02:52,250
of the same as the way installer images

00:02:47,240 --> 00:02:55,730
are produced when it when it sees an

00:02:52,250 --> 00:02:59,960
upload of this upload type then it asks

00:02:55,730 --> 00:03:03,200
a human for confirmation and if it gets

00:02:59,960 --> 00:03:07,310
that then it will sign that with a sign

00:03:03,200 --> 00:03:10,010
the upload with an object stored or the

00:03:07,310 --> 00:03:13,940
key that's that's stored on the archive

00:03:10,010 --> 00:03:16,130
master system so after he master we'd

00:03:13,940 --> 00:03:18,740
have to we'd have to port that Kodak I

00:03:16,130 --> 00:03:20,180
guess but it doesn't I had a brief look

00:03:18,740 --> 00:03:28,910
and it doesn't look terribly difficult

00:03:20,180 --> 00:03:33,170
to do so the the last piece or the last

00:03:28,910 --> 00:03:35,900
most important pieces that you in in

00:03:33,170 --> 00:03:37,610
practice secure while it is it is

00:03:35,900 --> 00:03:40,190
possible and it's very important that as

00:03:37,610 --> 00:03:42,740
possible for users to be able to install

00:03:40,190 --> 00:03:44,990
their own keys on a security system if

00:03:42,740 --> 00:03:50,450
you if you can't do that then really is

00:03:44,990 --> 00:03:53,600
horrendously non free however we don't

00:03:50,450 --> 00:03:56,210
it's not really very nice to for users

00:03:53,600 --> 00:03:58,720
to have to install their own keys simply

00:03:56,210 --> 00:04:02,390
in order to install an operating system

00:03:58,720 --> 00:04:05,030
it's it's possible you can certainly do

00:04:02,390 --> 00:04:07,280
that but it means that you have to go

00:04:05,030 --> 00:04:10,100
through all these very norm standards

00:04:07,280 --> 00:04:15,740
kernel mode move current firmware menus

00:04:10,100 --> 00:04:17,540
to - you often have to type in strings

00:04:15,740 --> 00:04:20,530
of hexadecimal know us or thing it's

00:04:17,540 --> 00:04:25,210
it's not very much fun

00:04:20,530 --> 00:04:29,200
so we slightly reluctantly accepted that

00:04:25,210 --> 00:04:33,580
we were going to need to sign our images

00:04:29,200 --> 00:04:35,650
with Microsoft's key Mathieu Garrity's

00:04:33,580 --> 00:04:37,240
blog pretty extensively about the the

00:04:35,650 --> 00:04:39,490
reasons for and against us if you want

00:04:37,240 --> 00:04:46,330
to go read his blog warning may contain

00:04:39,490 --> 00:04:48,640
profanity so the effect of this that we

00:04:46,330 --> 00:04:56,080
have a we have a package of Matic Eric

00:04:48,640 --> 00:04:57,310
Shem the software which is basically

00:04:56,080 --> 00:05:00,880
this is something that you can sign

00:04:57,310 --> 00:05:05,530
which contains its own key or don't

00:05:00,880 --> 00:05:09,760
keyring if it is asked to if it finds a

00:05:05,530 --> 00:05:13,810
looter that it's that it trusts then it

00:05:09,760 --> 00:05:15,790
will chain through to that and it also

00:05:13,810 --> 00:05:18,700
provides services to that looter which

00:05:15,790 --> 00:05:23,230
it can use to verify other things like

00:05:18,700 --> 00:05:24,880
the colonel so the the only the only

00:05:23,230 --> 00:05:27,520
signature we had to acquire from

00:05:24,880 --> 00:05:31,390
Microsoft is one on our package of this

00:05:27,520 --> 00:05:34,330
shim so this does mean there's only time

00:05:31,390 --> 00:05:36,010
we we read that shim we have to go back

00:05:34,330 --> 00:05:37,570
to Microsoft and say pretty please could

00:05:36,010 --> 00:05:42,130
you could you sign this new key of this

00:05:37,570 --> 00:05:44,410
new object for us and so far we've not

00:05:42,130 --> 00:05:46,600
had a major problem with that alors it's

00:05:44,410 --> 00:05:48,930
sometimes a little slow but fortunately

00:05:46,600 --> 00:05:51,610
the the shim is revved only very rarely

00:05:48,930 --> 00:05:54,430
for Debian I guess there is the there is

00:05:51,610 --> 00:05:58,660
a essentially political question of do

00:05:54,430 --> 00:06:00,760
we think that signal that this signature

00:05:58,660 --> 00:06:04,260
which we can reproduce ourselves is

00:06:00,760 --> 00:06:07,510
something that we can put in Debian men

00:06:04,260 --> 00:06:11,320
I'm not going to take a position not but

00:06:07,510 --> 00:06:13,330
I expect the project might want to the

00:06:11,320 --> 00:06:18,190
the obvious the obvious outcome so

00:06:13,330 --> 00:06:20,410
whether you you have this shame in men

00:06:18,190 --> 00:06:26,229
and on our default CD images or whether

00:06:20,410 --> 00:06:28,030
we say that that's booting on these

00:06:26,229 --> 00:06:30,280
systems which only have the Microsoft

00:06:28,030 --> 00:06:32,020
key available which it's going to be a

00:06:30,280 --> 00:06:33,539
lot of modern systems is something that

00:06:32,020 --> 00:06:40,559
should be relegated to the

00:06:33,539 --> 00:06:41,699
- the non-free CD don't know I there are

00:06:40,559 --> 00:06:43,229
some other things I can bring up but

00:06:41,699 --> 00:06:45,919
I'll talk for long enough just anybody

00:06:43,229 --> 00:06:45,919
else want to say something

00:06:53,470 --> 00:07:08,200
nobody really okay the sign colonel

00:07:03,850 --> 00:07:10,030
which I guess we go into right Ben and I

00:07:08,200 --> 00:07:12,060
talked about this bit over over dinner

00:07:10,030 --> 00:07:16,030
last night

00:07:12,060 --> 00:07:19,230
the so Ben mentioned you mentioned in

00:07:16,030 --> 00:07:26,050
your talk on Monday and Sunday that's

00:07:19,230 --> 00:07:29,140
that you felts module signing was yes

00:07:26,050 --> 00:07:31,330
you seem to think that because of the

00:07:29,140 --> 00:07:33,160
because the spec refers only to code

00:07:31,330 --> 00:07:35,560
loaded before execute services that that

00:07:33,160 --> 00:07:37,000
wouldn't be necessary so it's it's

00:07:35,560 --> 00:07:40,600
certainly not necessary per the letter

00:07:37,000 --> 00:07:44,170
of the spec as you say the spec of new

00:07:40,600 --> 00:07:46,330
cars code that's executed in a basically

00:07:44,170 --> 00:07:50,920
in a bootloader context to be to be

00:07:46,330 --> 00:07:53,320
signed and the I should I should point

00:07:50,920 --> 00:07:56,020
out the this kind of misunderstood

00:07:53,320 --> 00:07:59,560
sometimes that the the security model of

00:07:56,020 --> 00:08:02,440
secure boot is not to it's not supposed

00:07:59,560 --> 00:08:04,750
to be to make it impossible to execute

00:08:02,440 --> 00:08:07,300
an untrusted operating system somehow if

00:08:04,750 --> 00:08:10,510
you want that that's more likely to be

00:08:07,300 --> 00:08:12,910
something like trusted bit where you

00:08:10,510 --> 00:08:15,280
have complete recorded things through a

00:08:12,910 --> 00:08:18,400
TPM or complete recorded execution 30

00:08:15,280 --> 00:08:20,980
p.m. that's not supposed to be well

00:08:18,400 --> 00:08:24,460
secure bit as for the point of it is to

00:08:20,980 --> 00:08:26,950
protect the firmware from abuse by the

00:08:24,460 --> 00:08:30,970
operating system which is which is quite

00:08:26,950 --> 00:08:33,250
different so supposedly you should only

00:08:30,970 --> 00:08:36,550
have to avoid just execution of an

00:08:33,250 --> 00:08:43,000
unsigned code in in firmware context in

00:08:36,550 --> 00:08:45,310
boot services context various people

00:08:43,000 --> 00:08:50,500
have exhibited things that you can even

00:08:45,310 --> 00:08:54,490
things that you can do with with an

00:08:50,500 --> 00:08:56,350
unsigned kernel so I think the the usual

00:08:54,490 --> 00:09:01,410
attack boils down to something like you

00:08:56,350 --> 00:09:01,410
can you can you can construct

00:09:01,810 --> 00:09:10,240
feck ufi framework that makes windows

00:09:05,080 --> 00:09:12,250
think that it's executed right so I mean

00:09:10,240 --> 00:09:15,190
my position not is that that amounts to

00:09:12,250 --> 00:09:17,830
trying to avoid execution of an

00:09:15,190 --> 00:09:19,510
untrusted operating system which i think

00:09:17,830 --> 00:09:22,510
is completely backwards from what

00:09:19,510 --> 00:09:24,150
Security's intended to achieve but it's

00:09:22,510 --> 00:09:29,770
not care for the agrees with me and us

00:09:24,150 --> 00:09:33,190
in any case the so far Ubuntu has has

00:09:29,770 --> 00:09:35,950
only used we permit booting unsigned

00:09:33,190 --> 00:09:37,930
kernels uh we do actually sign our

00:09:35,950 --> 00:09:39,910
kernels in order that we can jump into

00:09:37,930 --> 00:09:43,360
them in boot services context to run

00:09:39,910 --> 00:09:47,710
some quirks code in the efi step and

00:09:43,360 --> 00:09:49,230
this is I think the I think the kernel

00:09:47,710 --> 00:09:51,520
has a couple of bits near the start that

00:09:49,230 --> 00:09:53,680
that allow it to handle a couple of

00:09:51,520 --> 00:09:55,480
firmware quirks and we'd like to make

00:09:53,680 --> 00:09:58,029
use of that so so we do use a signed

00:09:55,480 --> 00:10:01,930
kernel for that but if the if you

00:09:58,029 --> 00:10:04,360
present the Ubuntu grub with a with an

00:10:01,930 --> 00:10:06,040
unsigned kernel it will it will happily

00:10:04,360 --> 00:10:08,440
boot it it'll just make sure to call

00:10:06,040 --> 00:10:11,700
exit web services first so that so that

00:10:08,440 --> 00:10:14,320
you're in runtime services context I

00:10:11,700 --> 00:10:20,110
personally feel that for Debian this

00:10:14,320 --> 00:10:22,150
kind of thing is very important the okay

00:10:20,110 --> 00:10:24,520
I'm boot loaded maintainer so I'd like

00:10:22,150 --> 00:10:29,589
people to be able to to install new boot

00:10:24,520 --> 00:10:33,760
loader as well but lots more people have

00:10:29,589 --> 00:10:35,830
to install their own kernel and I would

00:10:33,760 --> 00:10:37,839
be pretty uncomfortable with solution

00:10:35,830 --> 00:10:41,170
that made that's impossible for people

00:10:37,839 --> 00:10:45,459
to do without turning off security

00:10:41,170 --> 00:10:47,020
features in their firmware so so I

00:10:45,459 --> 00:10:50,650
personally think it's quite important to

00:10:47,020 --> 00:10:54,820
be able to do that but I think we

00:10:50,650 --> 00:10:56,589
probably also need the the ability to do

00:10:54,820 --> 00:11:00,490
the whole signing stack so that those

00:10:56,589 --> 00:11:03,040
people who do yes I think software yes

00:11:00,490 --> 00:11:04,120
and I think having module signing is

00:11:03,040 --> 00:11:07,779
probably useful feature but it's

00:11:04,120 --> 00:11:10,030
actually separate from some supporting

00:11:07,779 --> 00:11:11,709
SEC secure boot it's it's part of secure

00:11:10,030 --> 00:11:15,339
boot but it's separate from the process

00:11:11,709 --> 00:11:15,820
of enabling the sort of default out of

00:11:15,339 --> 00:11:17,230
the box

00:11:15,820 --> 00:11:19,740
situation where you only have the

00:11:17,230 --> 00:11:22,330
Microsoft key available yeah I think yep

00:11:19,740 --> 00:11:23,920
so so far we've had no indication that

00:11:22,330 --> 00:11:26,650
Microsoft we're going to revoke our key

00:11:23,920 --> 00:11:28,870
for this I guess more news as it happens

00:11:26,650 --> 00:11:37,450
because it's not really in our control

00:11:28,870 --> 00:11:39,130
but so far indications seem good so what

00:11:37,450 --> 00:11:42,340
I would wonder is whether anyone's

00:11:39,130 --> 00:11:45,730
prepared to do the work in so just one

00:11:42,340 --> 00:11:48,550
thing else I wanted I also wanted to

00:11:45,730 --> 00:11:50,440
mention is so as Colleen mentioned there

00:11:48,550 --> 00:11:53,530
are advantages of actually putting the

00:11:50,440 --> 00:11:55,840
camel in sign mode one thing the new

00:11:53,530 --> 00:11:57,820
shame that should do is machine on or

00:11:55,840 --> 00:11:59,980
key so you can actually with the new

00:11:57,820 --> 00:12:02,290
shame you can actually create a local

00:11:59,980 --> 00:12:04,480
kid that you basically tell the shame in

00:12:02,290 --> 00:12:06,370
setup mode that we trust that key on top

00:12:04,480 --> 00:12:08,140
of the one that's pedo dated in it then

00:12:06,370 --> 00:12:10,690
you can use that locally for your own

00:12:08,140 --> 00:12:13,360
current and just sign it sanctum and you

00:12:10,690 --> 00:12:16,620
can actually put them in sign mode even

00:12:13,360 --> 00:12:16,620
if they're not coming from the occur

00:12:17,940 --> 00:12:24,010
your regarding the the signatures of the

00:12:20,560 --> 00:12:26,440
CDs I agree that in having the ability

00:12:24,010 --> 00:12:27,730
to ship CDs that people can install

00:12:26,440 --> 00:12:30,190
without having to install an extra key

00:12:27,730 --> 00:12:31,600
would be clearly a plus so I wonder if

00:12:30,190 --> 00:12:34,150
there is a way to have some sort of

00:12:31,600 --> 00:12:36,280
detected signature so that we distribute

00:12:34,150 --> 00:12:38,080
this the images from the main demand

00:12:36,280 --> 00:12:39,820
archive without signatures but we also

00:12:38,080 --> 00:12:41,290
put somewhere else the things signature

00:12:39,820 --> 00:12:43,230
so that people can like separately

00:12:41,290 --> 00:12:48,550
download the Scimitar or something such

00:12:43,230 --> 00:12:50,950
yeah the the signature is it simple I

00:12:48,550 --> 00:12:53,050
can't remember how this the signatures

00:12:50,950 --> 00:12:56,440
are embedded in an AFI executable they

00:12:53,050 --> 00:12:58,840
are embedded but the there's a tool part

00:12:56,440 --> 00:13:01,120
of SB sign tool allows you to detach and

00:12:58,840 --> 00:13:05,200
reattach the signatures so it's a

00:13:01,120 --> 00:13:06,850
separate separate cuff part I think you

00:13:05,200 --> 00:13:12,070
you can or a separate cross section you

00:13:06,850 --> 00:13:17,320
come to us it's it's a kind of elaborate

00:13:12,070 --> 00:13:21,220
procedure and yes that would be possible

00:13:17,320 --> 00:13:24,330
I'm I guess I guess my main concern is

00:13:21,220 --> 00:13:24,330
making sure that

00:13:24,779 --> 00:13:30,190
Debian doesn't become something that you

00:13:27,550 --> 00:13:31,540
have to do all sorts of I mean we've

00:13:30,190 --> 00:13:32,860
made great strides forward and making

00:13:31,540 --> 00:13:36,459
the Installer easier and I'm sort of

00:13:32,860 --> 00:13:39,250
worried about the situation where people

00:13:36,459 --> 00:13:42,760
are put off Debian because you have to

00:13:39,250 --> 00:13:46,329
do this really strange procedure that's

00:13:42,760 --> 00:13:54,730
got that almost looks like an exploits

00:13:46,329 --> 00:13:57,550
in order to why why would it be more

00:13:54,730 --> 00:13:59,170
non-free to include a Microsoft

00:13:57,550 --> 00:14:01,269
signature than to include a debian

00:13:59,170 --> 00:14:03,430
signature no one else can reproduce the

00:14:01,269 --> 00:14:07,510
Debian archive signatures this this is

00:14:03,430 --> 00:14:09,519
doing CV signatures there's a freeness

00:14:07,510 --> 00:14:13,149
issue there i'm proxying other people's

00:14:09,519 --> 00:14:15,160
concerns really and i knew in jackson i

00:14:13,149 --> 00:14:17,279
think raised a concern about it I don't

00:14:15,160 --> 00:14:21,459
know if he's here

00:14:17,279 --> 00:14:22,600
evidently not but I can I can follow up

00:14:21,459 --> 00:14:28,540
with the N and see if we can work

00:14:22,600 --> 00:14:31,240
something I've you're from my point of

00:14:28,540 --> 00:14:33,100
view your points well-taken but it does

00:14:31,240 --> 00:14:35,440
mean that the Debian projects kind of

00:14:33,100 --> 00:14:41,260
has less freedom yes it doesn't make any

00:14:35,440 --> 00:14:43,300
difference to our users you're right so

00:14:41,260 --> 00:14:45,040
personally I think that as long as you

00:14:43,300 --> 00:14:46,410
as long as we make sure that you can

00:14:45,040 --> 00:14:48,970
[Music]

00:14:46,410 --> 00:14:51,190
construct something equivalent yourself

00:14:48,970 --> 00:14:54,550
the important thing for me is that it's

00:14:51,190 --> 00:14:56,890
essentially there I suppose the GPL

00:14:54,550 --> 00:14:59,970
statement v 3 puts it well that you you

00:14:56,890 --> 00:15:02,200
must be able to you must have enough

00:14:59,970 --> 00:15:03,579
installation information and keys to be

00:15:02,200 --> 00:15:10,510
able to install your own modified

00:15:03,579 --> 00:15:13,690
version and this is essentially under

00:15:10,510 --> 00:15:17,010
the control of the firmware I think once

00:15:13,690 --> 00:15:21,360
the if somebody if somebody distributed

00:15:17,010 --> 00:15:21,360
a system which

00:15:21,630 --> 00:15:27,540
had a lot only had Microsoft key did not

00:15:25,259 --> 00:15:30,660
allow you to install your own key and

00:15:27,540 --> 00:15:34,860
pre installed Debian then I think that

00:15:30,660 --> 00:15:40,290
person would be in breach of the LV 3

00:15:34,860 --> 00:15:44,339
somewhere I'm not obviously not a lawyer

00:15:40,290 --> 00:15:46,649
and I'm not sure I have lawyers backing

00:15:44,339 --> 00:15:49,649
for that that's but that would be my

00:15:46,649 --> 00:15:51,870
plain reading of the GPL and it seems

00:15:49,649 --> 00:15:54,990
kind of it seems at least make moral

00:15:51,870 --> 00:15:56,490
sense but like that you know I think I

00:15:54,990 --> 00:15:58,139
think that's up to the distributor of

00:15:56,490 --> 00:16:00,480
the system as long as we have systems

00:15:58,139 --> 00:16:04,050
that do let you to install your own case

00:16:00,480 --> 00:16:05,910
I think as long as we let you make full

00:16:04,050 --> 00:16:06,810
use of that yourself then we're not in

00:16:05,910 --> 00:16:10,829
breach yep

00:16:06,810 --> 00:16:12,300
but others may disagree so I did ask and

00:16:10,829 --> 00:16:14,370
I think you were starting to answer

00:16:12,300 --> 00:16:17,610
who's going to work on they who would

00:16:14,370 --> 00:16:19,410
work on the DAC changes I'm willing to

00:16:17,610 --> 00:16:22,440
port that stuff I did for a launchpad in

00:16:19,410 --> 00:16:24,810
stock it doesn't look desperately hard

00:16:22,440 --> 00:16:28,649
it's it's a hundred and forty lines of

00:16:24,810 --> 00:16:38,240
Python not cheap at Sur well plus all of

00:16:28,649 --> 00:16:38,240
the stuff I did for it but right

00:16:40,700 --> 00:16:48,920
are there any FTP masters here father

00:16:45,890 --> 00:16:58,990
any Fe Buster's on IRC not as conference

00:16:48,920 --> 00:16:58,990
even okay no Marcy

00:17:03,669 --> 00:17:13,429
hmm nope no okay okay pasa possibly you

00:17:11,510 --> 00:17:17,179
and I ban should corner Steve McIntyre

00:17:13,429 --> 00:17:19,730
and Cambridge yes well actually Steve

00:17:17,179 --> 00:17:23,899
said something here to me in fact I

00:17:19,730 --> 00:17:27,199
should I should corner Steve Larrick and

00:17:23,899 --> 00:17:29,870
ask him why why the Shem isn't in India

00:17:27,199 --> 00:17:31,610
I think members you'll probably get her

00:17:29,870 --> 00:17:33,669
slightly guilty looking recess I think

00:17:31,610 --> 00:17:37,130
that I don't think there's any

00:17:33,669 --> 00:17:38,720
particular reason the probably it's just

00:17:37,130 --> 00:17:42,230
that it wasn't useful without the

00:17:38,720 --> 00:17:44,690
Microsoft's yeah sure guns we had a

00:17:42,230 --> 00:17:48,649
night standing political question rather

00:17:44,690 --> 00:17:51,140
than where that was large so I guess the

00:17:48,649 --> 00:17:55,390
answer is just that we try job losses

00:17:51,140 --> 00:18:00,169
you see what after you master says yeah

00:17:55,390 --> 00:18:05,960
but that's the idea is they it's a still

00:18:00,169 --> 00:18:07,940
a two-stage bill there is that right so

00:18:05,960 --> 00:18:14,450
certainly the first for the first stage

00:18:07,940 --> 00:18:17,270
of that there's no for the first stage

00:18:14,450 --> 00:18:19,580
there's no key involved and then right

00:18:17,270 --> 00:18:21,590
for it so we we have all of our all of

00:18:19,580 --> 00:18:25,220
our signed objects we split into two

00:18:21,590 --> 00:18:29,090
pieces we have one source package Shem

00:18:25,220 --> 00:18:33,710
say that that does the normal unsigned

00:18:29,090 --> 00:18:35,840
bills we have second stage sign that

00:18:33,710 --> 00:18:39,500
downloads the signature from wherever

00:18:35,840 --> 00:18:42,610
and it's also aha

00:18:39,500 --> 00:18:42,610
we had a question for you

00:18:42,790 --> 00:18:51,669
I gathered that you had concern about

00:18:46,360 --> 00:18:54,250
the men's suitability of something like

00:18:51,669 --> 00:18:56,710
shin signed the the thing in have been

00:18:54,250 --> 00:19:00,870
to that herd that has Microsoft

00:18:56,710 --> 00:19:05,320
signature on the first edge shim for

00:19:00,870 --> 00:19:07,000
secure boots would you is that a correct

00:19:05,320 --> 00:19:12,270
representation if so would you care to

00:19:07,000 --> 00:19:15,480
elaborate right so he put you in a spot

00:19:12,270 --> 00:19:19,030
remember exactly what was proposed but

00:19:15,480 --> 00:19:21,940
so I can't really be sure to comment

00:19:19,030 --> 00:19:24,040
accurately on on a real situation shall

00:19:21,940 --> 00:19:25,360
they just expend quickly or it's

00:19:24,040 --> 00:19:28,419
probably easiest if I deal with the

00:19:25,360 --> 00:19:29,950
hypothetical including I have a problem

00:19:28,419 --> 00:19:33,160
with the idea that there's a package in

00:19:29,950 --> 00:19:36,429
Maine that contains signatures that we

00:19:33,160 --> 00:19:40,660
can't regenerate it's okay in my view if

00:19:36,429 --> 00:19:42,970
the signature if the the places where

00:19:40,660 --> 00:19:45,669
the public key is installed our places

00:19:42,970 --> 00:19:48,340
that are also controlled by the user so

00:19:45,669 --> 00:19:51,429
for example I don't have a problem with

00:19:48,340 --> 00:19:53,140
the archive key also the you know the

00:19:51,429 --> 00:19:55,030
user cannot generate their own signed

00:19:53,140 --> 00:19:56,230
release files but on the other hand if

00:19:55,030 --> 00:19:58,390
they want to do that they can just

00:19:56,230 --> 00:20:01,179
change the public key on their system so

00:19:58,390 --> 00:20:05,830
if the user can't change the public key

00:20:01,179 --> 00:20:09,390
then there's a problem if they can't you

00:20:05,830 --> 00:20:12,520
know do the signature themselves so I

00:20:09,390 --> 00:20:15,549
yeah I agree that's that situation would

00:20:12,520 --> 00:20:18,850
be a problem at present all systems that

00:20:15,549 --> 00:20:23,200
I know of that this required by

00:20:18,850 --> 00:20:28,049
Microsoft guidelines that contend the

00:20:23,200 --> 00:20:30,520
Microsoft key for secure boot on x86

00:20:28,049 --> 00:20:34,690
also have the ability for users to

00:20:30,520 --> 00:20:36,820
install their own key right and if

00:20:34,690 --> 00:20:38,380
that's the case then that's alright

00:20:36,820 --> 00:20:39,880
although I understand the situation is a

00:20:38,380 --> 00:20:41,650
bit more difficult than arm the

00:20:39,880 --> 00:20:46,650
situation is indeed more difficult in

00:20:41,650 --> 00:20:51,620
arm and that's personally on arm I would

00:20:46,650 --> 00:20:57,110
be rather reluctant to distribute

00:20:51,620 --> 00:20:59,450
a system that included grub because I'm

00:20:57,110 --> 00:21:01,490
not at all clear that that system as the

00:20:59,450 --> 00:21:04,220
woods comply with the gplv3

00:21:01,490 --> 00:21:06,559
but but I mean arm is you know Windows

00:21:04,220 --> 00:21:09,950
is an irrelevance on arm Linux owns arm

00:21:06,559 --> 00:21:12,500
right so sort of indeed whether anybody

00:21:09,950 --> 00:21:14,230
whether anybody feels that it's remotely

00:21:12,500 --> 00:21:16,580
important to comply with the Windows

00:21:14,230 --> 00:21:22,540
guidelines on arm unless they're

00:21:16,580 --> 00:21:27,020
Microsoft Surface is unclear us yes I

00:21:22,540 --> 00:21:28,370
don't know the I guess from my point of

00:21:27,020 --> 00:21:30,140
view this is a property of the system

00:21:28,370 --> 00:21:33,760
that you're installing it on rather than

00:21:30,140 --> 00:21:39,890
a property of the Debian can control

00:21:33,760 --> 00:21:41,990
well yes but the thing is that there are

00:21:39,890 --> 00:21:43,520
certain things where we know that the

00:21:41,990 --> 00:21:44,840
user is able to change the public key

00:21:43,520 --> 00:21:46,670
because it's part of the system that we

00:21:44,840 --> 00:21:48,650
ship in that case there's definitely no

00:21:46,670 --> 00:21:51,620
problem if we have some good assurance

00:21:48,650 --> 00:21:54,559
that there's some other means social

00:21:51,620 --> 00:21:56,900
means some legal means who knows that

00:21:54,559 --> 00:21:58,340
means that in practice the user will

00:21:56,900 --> 00:22:00,950
almost always be able to replace that

00:21:58,340 --> 00:22:03,620
key then that's probably okay too

00:22:00,950 --> 00:22:06,200
if in practice we expect that the user

00:22:03,620 --> 00:22:08,480
isn't able to replace the key then

00:22:06,200 --> 00:22:11,059
that's a problem and there's a sort of

00:22:08,480 --> 00:22:12,559
huge gray area in between right so it's

00:22:11,059 --> 00:22:15,710
so it's essentially a judgement : well

00:22:12,559 --> 00:22:20,059
my firm we think the Microsoft Windows 8

00:22:15,710 --> 00:22:22,160
logo requirements are well that's the

00:22:20,059 --> 00:22:23,960
thing that we're relying on right also

00:22:22,160 --> 00:22:25,850
we could see whether the systems that

00:22:23,960 --> 00:22:28,370
are shipped in practice do in fact have

00:22:25,850 --> 00:22:31,309
this feature enabled we could go ahead

00:22:28,370 --> 00:22:32,780
and make the signatures now and then if

00:22:31,309 --> 00:22:35,450
we discover that in fact it's a problem

00:22:32,780 --> 00:22:37,010
we could stop signing things when we you

00:22:35,450 --> 00:22:39,740
know if we decide that that it's not

00:22:37,010 --> 00:22:43,280
performant to our principles that makes

00:22:39,740 --> 00:22:46,160
sense okay thanks for elaborating I for

00:22:43,280 --> 00:22:48,200
Stephan can probably say more think you

00:22:46,160 --> 00:22:50,780
have we actually have we seen any that

00:22:48,200 --> 00:22:53,610
any systems as yet do not permit the

00:22:50,780 --> 00:22:57,980
user to install or own key

00:22:53,610 --> 00:23:01,290
so no currently quite a few machines

00:22:57,980 --> 00:23:03,540
specifically Lenovo make don't of the

00:23:01,290 --> 00:23:05,670
the firmware options who said well you

00:23:03,540 --> 00:23:07,500
can actually type in type it in but they

00:23:05,670 --> 00:23:09,930
all have the option to switch to setup

00:23:07,500 --> 00:23:11,910
mode and then you can use something like

00:23:09,930 --> 00:23:13,830
the binary generated by the EFI tool

00:23:11,910 --> 00:23:15,900
package which lets you generate the

00:23:13,830 --> 00:23:18,540
local PKI on your machine generates a

00:23:15,900 --> 00:23:20,520
lock down that efi binary with that one

00:23:18,540 --> 00:23:22,410
in there then you boot that binary and

00:23:20,520 --> 00:23:24,300
it isn't recreates all of the nvm

00:23:22,410 --> 00:23:26,160
variable and it locks down the system

00:23:24,300 --> 00:23:28,290
with keys that are not the Microsoft

00:23:26,160 --> 00:23:30,690
case like my country Nova laptop doesn't

00:23:28,290 --> 00:23:31,530
have the windows case on the on it it

00:23:30,690 --> 00:23:33,780
instead ours

00:23:31,530 --> 00:23:36,510
keys at Argentan myself so I can

00:23:33,780 --> 00:23:38,990
actually test new seems the other thing

00:23:36,510 --> 00:23:42,180
I wanted to mention was we forgot to the

00:23:38,990 --> 00:23:43,910
Windows RT stuff as far as I know the

00:23:42,180 --> 00:23:46,200
current requirement on those is that

00:23:43,910 --> 00:23:47,850
indeed it doesn't that you switch to

00:23:46,200 --> 00:23:49,530
setup mode at all doesn't turn off

00:23:47,850 --> 00:23:51,150
secure boot but it doesn't even let you

00:23:49,530 --> 00:23:53,250
boot any other thing system that

00:23:51,150 --> 00:23:54,690
currently is signed by Microsoft because

00:23:53,250 --> 00:23:57,870
it's a different key than the one that

00:23:54,690 --> 00:24:00,060
we are for UEFA on for example for

00:23:57,870 --> 00:24:03,810
Ubuntu so they don't sign third-party

00:24:00,060 --> 00:24:07,260
reporting systems at all on those so

00:24:03,810 --> 00:24:08,850
there is a question with with you know I

00:24:07,260 --> 00:24:12,210
I'm not sure I followed everything you

00:24:08,850 --> 00:24:13,350
said there the question is you know when

00:24:12,210 --> 00:24:15,390
we say the user needs to be able to

00:24:13,350 --> 00:24:17,610
change the key we don't necessarily mean

00:24:15,390 --> 00:24:21,450
that the user can change the key if they

00:24:17,610 --> 00:24:22,830
spend all afternoon write it right if

00:24:21,450 --> 00:24:24,300
there's some kind of relatively

00:24:22,830 --> 00:24:26,490
straightforward process by which the key

00:24:24,300 --> 00:24:27,930
can be changed and that is also

00:24:26,490 --> 00:24:30,870
important yeah we actually missed

00:24:27,930 --> 00:24:33,150
discuss that with Steve and in theory we

00:24:30,870 --> 00:24:35,430
can package a feature which is a kind

00:24:33,150 --> 00:24:36,870
tools to generate those keys to so that

00:24:35,430 --> 00:24:38,220
you can just install the package it

00:24:36,870 --> 00:24:40,500
generates a new pic here I at that point

00:24:38,220 --> 00:24:42,090
then you can just use SB sign to sign

00:24:40,500 --> 00:24:44,160
any binary that you want right it's

00:24:42,090 --> 00:24:46,890
awesome at us right so it's basically

00:24:44,160 --> 00:24:49,260
you need to boot to go to get into your

00:24:46,890 --> 00:24:51,450
BIOS once set it to setup mode button to

00:24:49,260 --> 00:24:53,250
the Debian run dots thing it's going to

00:24:51,450 --> 00:24:54,810
populate the case with the ones it just

00:24:53,250 --> 00:24:59,100
generates and from that point on you can

00:24:54,810 --> 00:25:00,330
have books into I suppose the shame or

00:24:59,100 --> 00:25:02,010
something to it so that it signs them

00:25:00,330 --> 00:25:04,410
whenever you install the new anyway

00:25:02,010 --> 00:25:05,400
so you you mentioned earlier the shim

00:25:04,410 --> 00:25:07,500
machine on ok

00:25:05,400 --> 00:25:11,970
thing which I think Sousa did originally

00:25:07,500 --> 00:25:13,530
and ended up in gym the does so your

00:25:11,970 --> 00:25:14,970
your system doesn't have the Microsoft

00:25:13,530 --> 00:25:17,510
keys a toll on it but if you're prepared

00:25:14,970 --> 00:25:21,420
to leave the Microsoft keys there does

00:25:17,510 --> 00:25:24,720
the machine owner key system help can

00:25:21,420 --> 00:25:27,360
you use that to register you own key

00:25:24,720 --> 00:25:28,860
yes except that was testing the shame so

00:25:27,360 --> 00:25:34,710
would have I would have needed the first

00:25:28,860 --> 00:25:37,050
shim to put the second shamed yeah okay

00:25:34,710 --> 00:25:39,540
that's that's a specialized case that I

00:25:37,050 --> 00:25:40,770
think is going to affect news people if

00:25:39,540 --> 00:25:43,560
I think most people will be fine

00:25:40,770 --> 00:25:46,500
essentially poets well by default going

00:25:43,560 --> 00:25:48,360
shoe Windows scientist top designed shim

00:25:46,500 --> 00:25:51,720
and then just put whatever they want by

00:25:48,360 --> 00:25:53,930
adding keys in the machine owner key in

00:25:51,720 --> 00:25:53,930
there

00:26:02,260 --> 00:26:14,040
okay so so the next step is opposes is

00:26:10,360 --> 00:26:21,040
is that is the deck changes and then

00:26:14,040 --> 00:26:25,240
after that people can work on the grab

00:26:21,040 --> 00:26:29,679
and shim packages and so they easily

00:26:25,240 --> 00:26:33,730
billing so dark as I say I'm willing to

00:26:29,679 --> 00:26:36,450
sort out always assuming that after he

00:26:33,730 --> 00:26:41,740
master doesn't hit the approach I took

00:26:36,450 --> 00:26:43,179
the I can deal with grub I'd like

00:26:41,740 --> 00:26:47,620
somebody who news it better deal with

00:26:43,179 --> 00:26:53,380
shim but I guess Steve or Stefan could

00:26:47,620 --> 00:26:54,460
do that perhaps CD image it's probably

00:26:53,380 --> 00:26:58,059
best to somebody who knows that better

00:26:54,460 --> 00:26:59,890
do this I think Steve is probably mostly

00:26:58,059 --> 00:27:03,090
wedding for their bits in the archives

00:26:59,890 --> 00:27:03,090
you ready yep

00:27:10,299 --> 00:27:19,730
so we seem to have something like a plan

00:27:14,559 --> 00:27:21,200
that seems roughly coherent do you you

00:27:19,730 --> 00:27:23,480
you mentioned in your talk and Monday

00:27:21,200 --> 00:27:26,890
that you were that there was a question

00:27:23,480 --> 00:27:29,899
of what we do with out of tree modules

00:27:26,890 --> 00:27:32,990
yes if we could if we were to require

00:27:29,899 --> 00:27:40,269
module signing in some insecure mode or

00:27:32,990 --> 00:27:45,039
in some as an optional I mean even

00:27:40,269 --> 00:27:47,630
McMunn necessarily requiring it but if

00:27:45,039 --> 00:27:49,460
associated to me the module sign is

00:27:47,630 --> 00:27:51,350
something that you might wish to enable

00:27:49,460 --> 00:27:54,440
on a system where you're in control of

00:27:51,350 --> 00:27:56,539
the keys and you want to make sure that

00:27:54,440 --> 00:27:59,299
you you know basically a beefed-up

00:27:56,539 --> 00:28:01,279
version of the traditional system in

00:27:59,299 --> 00:28:04,399
practice of disabling module looting if

00:28:01,279 --> 00:28:06,200
you if you if you want to avoid a

00:28:04,399 --> 00:28:08,630
certain class of attacks and it seemed

00:28:06,200 --> 00:28:15,200
reasonable to require module signing for

00:28:08,630 --> 00:28:17,179
that but we know how to deal with this

00:28:15,200 --> 00:28:20,179
right of tree bills so I had the

00:28:17,179 --> 00:28:26,000
impression that I used for signing there

00:28:20,179 --> 00:28:27,919
was there was this Matthew Garrett was

00:28:26,000 --> 00:28:31,100
working on something to add keys into

00:28:27,919 --> 00:28:33,529
the kernel where in fact the key point

00:28:31,100 --> 00:28:38,149
was going to be key and bedded into a

00:28:33,529 --> 00:28:39,289
signed EFI blob but the assigned to EFI

00:28:38,149 --> 00:28:41,539
executive all because that's what

00:28:39,289 --> 00:28:43,519
Microsoft signs and then that would be

00:28:41,539 --> 00:28:47,539
the web delivering just a key into the

00:28:43,519 --> 00:28:53,000
kernel and leanness was extremely blunt

00:28:47,539 --> 00:28:55,039
in rejecting this along the lines of why

00:28:53,000 --> 00:28:56,630
should we care what Microsoft's key

00:28:55,039 --> 00:29:00,019
signing for exactly yes

00:28:56,630 --> 00:29:03,289
not to mention that as I I don't think I

00:29:00,019 --> 00:29:07,220
mentioned this but I think that the the

00:29:03,289 --> 00:29:11,149
the requirement for the for the signing

00:29:07,220 --> 00:29:15,470
key that's fine shim is that it has to

00:29:11,149 --> 00:29:18,710
be a toothy a 2048-bit RSA key that's

00:29:15,470 --> 00:29:22,190
right so it has some rather odd

00:29:18,710 --> 00:29:22,850
limitations in inventory we arranged to

00:29:22,190 --> 00:29:25,610
have a

00:29:22,850 --> 00:29:28,130
a separate for it actually to go through

00:29:25,610 --> 00:29:30,320
a separate master key so we keep the

00:29:28,130 --> 00:29:34,970
master key offline and have that sign

00:29:30,320 --> 00:29:38,780
the actual operational signing key so at

00:29:34,970 --> 00:29:41,330
least we have some recourse if in the

00:29:38,780 --> 00:29:43,580
event that the arc that the ftp master

00:29:41,330 --> 00:29:45,260
system is compromised yeah I think that

00:29:43,580 --> 00:29:48,310
would be I think I would be sensible for

00:29:45,260 --> 00:29:54,050
Debian Stu but I don't know who would

00:29:48,310 --> 00:29:57,130
deal with master key ascribe entrance

00:29:54,050 --> 00:29:57,130
[Music]

00:30:06,340 --> 00:30:13,150
do you use this plane also have all

00:30:10,179 --> 00:30:15,070
that's needed for the I I'm sorry could

00:30:13,150 --> 00:30:19,270
you say that again I was thinking about

00:30:15,070 --> 00:30:23,590
di and deep in life and how that feeling

00:30:19,270 --> 00:30:26,650
right so you need a couple of changes to

00:30:23,590 --> 00:30:30,130
the later parts of to the later parts of

00:30:26,650 --> 00:30:32,920
di you need to change I think it was the

00:30:30,130 --> 00:30:35,980
kernel installation code and obviously

00:30:32,920 --> 00:30:37,870
grub installer there are relatively

00:30:35,980 --> 00:30:42,070
minor changes there essentially to

00:30:37,870 --> 00:30:44,460
install the signed respective signed

00:30:42,070 --> 00:30:47,350
packages as well

00:30:44,460 --> 00:30:49,360
those are straightforward enough the you

00:30:47,350 --> 00:30:53,049
also have to obviously arrange to boot

00:30:49,360 --> 00:30:56,440
things am i what I did in what I didn't

00:30:53,049 --> 00:31:00,160
have been to was I had our grub package

00:30:56,440 --> 00:31:03,010
spit art to two different signed objects

00:31:00,160 --> 00:31:06,570
one of them is intended for use on

00:31:03,010 --> 00:31:11,710
normal systems so you basically have to

00:31:06,570 --> 00:31:13,990
build monolithic grub images analogous

00:31:11,710 --> 00:31:15,700
to monolithic kernel that have all of

00:31:13,990 --> 00:31:16,600
the all of the bits that you think you

00:31:15,700 --> 00:31:21,250
might need

00:31:16,600 --> 00:31:22,390
so I generated one image that was that

00:31:21,250 --> 00:31:24,669
contained all of the stuff that you

00:31:22,390 --> 00:31:27,340
might need to build a normal system and

00:31:24,669 --> 00:31:29,440
another image that contains all of the

00:31:27,340 --> 00:31:32,850
things you might need to boot from from

00:31:29,440 --> 00:31:36,280
removable media the removable media kiss

00:31:32,850 --> 00:31:38,140
in it startup sequence it hunts through

00:31:36,280 --> 00:31:39,910
all of the devices attached to the

00:31:38,140 --> 00:31:44,220
system for things that have dot disk

00:31:39,910 --> 00:31:47,620
slash whatever it is in DI it's not

00:31:44,220 --> 00:31:51,450
particularly elegant but it seems to get

00:31:47,620 --> 00:31:54,549
the job done I think that I knew that

00:31:51,450 --> 00:31:57,820
that Steve McIntyre cargo quilted some

00:31:54,549 --> 00:32:00,580
of the code that I did for EFI images in

00:31:57,820 --> 00:32:02,260
DI so I think it's probably not very

00:32:00,580 --> 00:32:05,679
difficult at this point to put the rest

00:32:02,260 --> 00:32:08,740
of it over we diet also applies you'd

00:32:05,679 --> 00:32:14,140
you've been live good yeah well Debian

00:32:08,740 --> 00:32:16,300
Ivers it's best for di unit Rd with the

00:32:14,140 --> 00:32:21,940
live installer you dev isn't it

00:32:16,300 --> 00:32:22,900
unless that's changed okay I'm so yeah

00:32:21,940 --> 00:32:25,120
I've read of lie to them as well

00:32:22,900 --> 00:32:26,200
assuming that they have the only the

00:32:25,120 --> 00:32:30,160
only assumption would be that they have

00:32:26,200 --> 00:32:33,690
the dot desk subdirectory of the other

00:32:30,160 --> 00:32:37,240
top-level images with I think it's info

00:32:33,690 --> 00:32:39,360
insiders if they don't dentist reveal to

00:32:37,240 --> 00:32:39,360
us

00:33:01,650 --> 00:33:16,230
anyone else no no no I see okay and then

00:33:12,420 --> 00:33:19,330
shortly think we're done thanks everyone

00:33:16,230 --> 00:33:25,820
for coming thanks Ben

00:33:19,330 --> 00:33:25,820

YouTube URL: https://www.youtube.com/watch?v=2tp2q_IokxA


