Title: Making your package work with systemd
Publication date: 2017-11-29
Playlist: DebConf 13
Description: 
	by Michael Stapelberg

At: DebConf13
https://debconf13.debconf.org/
Room: Second talk room
Scheduled start: 2013-08-12 17:30:00
Captions: 
	00:00:00,030 --> 00:00:05,339
Hey so first of all the type of this

00:00:03,929 --> 00:00:07,529
lecture said it's going to be a workshop

00:00:05,339 --> 00:00:09,269
just to make the expectations clear I

00:00:07,529 --> 00:00:12,269
have a few slides prepared that should

00:00:09,269 --> 00:00:14,219
give you a general introduction and they

00:00:12,269 --> 00:00:15,949
will take probably about half of the

00:00:14,219 --> 00:00:17,789
time we have allocated for the slot and

00:00:15,949 --> 00:00:20,609
afterwards we can answer your questions

00:00:17,789 --> 00:00:24,539
or have some hands down hacking on

00:00:20,609 --> 00:00:26,400
actual packages my name is Michael

00:00:24,539 --> 00:00:27,810
Steinberg just a quick show of hand so

00:00:26,400 --> 00:00:29,640
that I know my audience who a few

00:00:27,810 --> 00:00:32,910
maintains the debian package in debian

00:00:29,640 --> 00:00:35,130
or derivatives ok that's almost

00:00:32,910 --> 00:00:38,190
everybody perfect how many have actually

00:00:35,130 --> 00:00:41,850
added systemd support to their packages

00:00:38,190 --> 00:00:45,660
already ok a couple who of you are

00:00:41,850 --> 00:00:48,960
looking into doing that ok perfect

00:00:45,660 --> 00:00:50,789
you're exactly the right audience great

00:00:48,960 --> 00:00:53,010
so the topics I want to cover with my

00:00:50,789 --> 00:00:55,379
slides are first of all how system D

00:00:53,010 --> 00:00:58,079
works for package maintainer that means

00:00:55,379 --> 00:01:00,359
I'm not going to cover all of it and

00:00:58,079 --> 00:01:02,100
also it's not so much of a user

00:01:00,359 --> 00:01:04,530
standpoint but just what you need to

00:01:02,100 --> 00:01:07,260
know to get you started on testing your

00:01:04,530 --> 00:01:09,000
stuff in system D we will then have a

00:01:07,260 --> 00:01:10,729
look at an example service file where I

00:01:09,000 --> 00:01:13,590
will make clear what all the different

00:01:10,729 --> 00:01:15,930
directives are supposed to mean we will

00:01:13,590 --> 00:01:19,020
look at the temp files mechanism and at

00:01:15,930 --> 00:01:20,939
D H system D a debhelper plugin we will

00:01:19,020 --> 00:01:23,400
consider a few more advanced examples

00:01:20,939 --> 00:01:27,479
and then finally we will answer your

00:01:23,400 --> 00:01:29,759
questions hopefully so non topics for

00:01:27,479 --> 00:01:31,170
this presentation are system D sucks

00:01:29,759 --> 00:01:33,060
let's just use something else instead

00:01:31,170 --> 00:01:34,680
when will there be an finally switch to

00:01:33,060 --> 00:01:36,210
default and essentially anything that

00:01:34,680 --> 00:01:38,009
ever came up on debian devil I'm not

00:01:36,210 --> 00:01:39,390
going to talk about that right this is

00:01:38,009 --> 00:01:40,799
just about how to make it work if you're

00:01:39,390 --> 00:01:43,439
already accepted that that's something

00:01:40,799 --> 00:01:46,530
you want to do so how does system do you

00:01:43,439 --> 00:01:48,770
work essentially where we previously had

00:01:46,530 --> 00:01:51,479
init scripts we now have service files

00:01:48,770 --> 00:01:53,729
service files are just a special kind of

00:01:51,479 --> 00:01:55,950
unit files so the more generic term is

00:01:53,729 --> 00:01:57,750
unit files and that what corresponds to

00:01:55,950 --> 00:02:01,530
an init script is a service file right

00:01:57,750 --> 00:02:04,140
so previously you would have /e TC in it

00:02:01,530 --> 00:02:06,270
D slash Apache 2 as an init script and

00:02:04,140 --> 00:02:08,160
the corresponding file would be slash

00:02:06,270 --> 00:02:11,099
lips large system D slash system /

00:02:08,160 --> 00:02:13,860
Apache to that service now what's

00:02:11,099 --> 00:02:16,110
important here to notice is that the

00:02:13,860 --> 00:02:18,270
basename so to say apart from the dot

00:02:16,110 --> 00:02:20,550
service suffix needs to be the same

00:02:18,270 --> 00:02:23,220
because what will happen is that system

00:02:20,550 --> 00:02:25,140
D when booting on on a machine will look

00:02:23,220 --> 00:02:27,450
at all these services in slash et Cie

00:02:25,140 --> 00:02:30,180
slash in addy and use them if they're

00:02:27,450 --> 00:02:32,730
available but if there is also a service

00:02:30,180 --> 00:02:34,410
file that will take proceedings so in

00:02:32,730 --> 00:02:36,150
order to make sure that system D uses

00:02:34,410 --> 00:02:38,160
your service file and not your service

00:02:36,150 --> 00:02:39,510
file plus the old init script make sure

00:02:38,160 --> 00:02:41,430
that the name is correct

00:02:39,510 --> 00:02:43,380
before you ask yes there's also

00:02:41,430 --> 00:02:44,820
mechanisms to make sure that when you

00:02:43,380 --> 00:02:46,620
have a name transition because you've

00:02:44,820 --> 00:02:48,780
adopted the upstream name for a service

00:02:46,620 --> 00:02:50,790
file or something like that then you can

00:02:48,780 --> 00:02:51,480
have a comfortability symlink we can

00:02:50,790 --> 00:02:54,720
cover that later

00:02:51,480 --> 00:02:57,720
and essentially systemctl does what

00:02:54,720 --> 00:02:59,910
service did so if you had service apache

00:02:57,720 --> 00:03:02,340
to start then you would use systemctl

00:02:59,910 --> 00:03:04,080
start apache to that service in recent

00:03:02,340 --> 00:03:05,550
versions you can even skip the dot

00:03:04,080 --> 00:03:09,180
service prefix so it would just be

00:03:05,550 --> 00:03:11,489
systemctl start apache to the systemctl

00:03:09,180 --> 00:03:14,520
tool is mostly for the actual users or

00:03:11,489 --> 00:03:17,220
for you when testing and just like you

00:03:14,520 --> 00:03:20,040
would usually use a TC in at the Apache

00:03:17,220 --> 00:03:21,720
to start as an actual user but service

00:03:20,040 --> 00:03:26,940
inside your maintenance crypts we have

00:03:21,720 --> 00:03:29,489
something for that now what we had in

00:03:26,940 --> 00:03:31,320
system 5-minute were run levels and they

00:03:29,489 --> 00:03:32,790
were fully defined and different from

00:03:31,320 --> 00:03:34,860
distribution to distribution and what

00:03:32,790 --> 00:03:37,890
system D does to replace them is it has

00:03:34,860 --> 00:03:41,430
something called a target now a target

00:03:37,890 --> 00:03:43,769
is precisely the same as a run level it

00:03:41,430 --> 00:03:46,530
just has a much nicer name and the names

00:03:43,769 --> 00:03:47,730
are standardized between all the

00:03:46,530 --> 00:03:49,890
different distributions the most

00:03:47,730 --> 00:03:51,840
important targets for you are basic the

00:03:49,890 --> 00:03:55,260
target multi users a target and

00:03:51,840 --> 00:03:57,090
graphical the target each of them is you

00:03:55,260 --> 00:03:58,650
know more specific than the other in

00:03:57,090 --> 00:04:00,540
that it starts more services for a

00:03:58,650 --> 00:04:02,610
particular use case so basic the target

00:04:00,540 --> 00:04:05,130
is what everybody of you will run and

00:04:02,610 --> 00:04:07,650
then multi user the target extends basic

00:04:05,130 --> 00:04:09,480
to target with more stuff and graphical

00:04:07,650 --> 00:04:11,010
that target brings in all the graphical

00:04:09,480 --> 00:04:12,810
components like a display manager and

00:04:11,010 --> 00:04:14,970
stuff that you would normally not use on

00:04:12,810 --> 00:04:17,459
servers where multi user the target is

00:04:14,970 --> 00:04:19,739
what you would want to use you can look

00:04:17,459 --> 00:04:21,620
that up if you care later on in the man

00:04:19,739 --> 00:04:26,099
page system d dot special

00:04:21,620 --> 00:04:27,750
now just as previously with system v in

00:04:26,099 --> 00:04:29,370
it we had some links to an A

00:04:27,750 --> 00:04:32,040
the service and these siblings were

00:04:29,370 --> 00:04:33,960
created by update - RC daddy we still

00:04:32,040 --> 00:04:36,120
have some links to enable a service now

00:04:33,960 --> 00:04:39,300
they're just created by systemctl and

00:04:36,120 --> 00:04:42,180
able again systemctl is what you would

00:04:39,300 --> 00:04:44,250
use as user or while testing etc and we

00:04:42,180 --> 00:04:47,400
have a maintainer script equivalent of

00:04:44,250 --> 00:04:49,590
that alright are there any questions so

00:04:47,400 --> 00:04:59,250
far this is really the basic stuff okay

00:04:49,590 --> 00:05:01,350
question what's the reason that there

00:04:59,250 --> 00:05:04,410
are different commands for the user and

00:05:01,350 --> 00:05:05,970
the maintenance scripts the the reason I

00:05:04,410 --> 00:05:08,400
think I will go into this later but I

00:05:05,970 --> 00:05:09,840
can just briefly explain it the

00:05:08,400 --> 00:05:11,400
maintainer scripts also need to work on

00:05:09,840 --> 00:05:13,410
machines where system D is not actually

00:05:11,400 --> 00:05:15,840
installed so that's why we can't use

00:05:13,410 --> 00:05:18,450
system C - all right now let's look at

00:05:15,840 --> 00:05:20,850
an example service file I just picked

00:05:18,450 --> 00:05:24,060
the end stat of service which is a tiny

00:05:20,850 --> 00:05:28,050
demon that will just store and plot

00:05:24,060 --> 00:05:31,740
later on your network traffic what you

00:05:28,050 --> 00:05:33,479
can see here is a very clear human

00:05:31,740 --> 00:05:35,070
readable configuration file and this is

00:05:33,479 --> 00:05:38,190
the service file it's called VN stat dot

00:05:35,070 --> 00:05:40,380
service it starts with a unit section

00:05:38,190 --> 00:05:42,500
and you can see just like any files

00:05:40,380 --> 00:05:45,780
which probably everybody of you is

00:05:42,500 --> 00:05:47,250
comfortable with or desktop files which

00:05:45,780 --> 00:05:49,680
have the same format so this is actually

00:05:47,250 --> 00:05:51,630
a dot desktop file there are sections

00:05:49,680 --> 00:05:52,979
which are enclosed in square brackets

00:05:51,630 --> 00:05:54,780
and then there's key value pairs

00:05:52,979 --> 00:05:57,600
separated by an equal sign so that's

00:05:54,780 --> 00:05:59,700
really simple the first section is

00:05:57,600 --> 00:06:01,260
entirely just for humans so the

00:05:59,700 --> 00:06:02,820
description will tell me what kind of

00:06:01,260 --> 00:06:04,620
service this is if I'm looking at my

00:06:02,820 --> 00:06:07,590
system and wondering what is this that's

00:06:04,620 --> 00:06:09,390
starting up here the second section is

00:06:07,590 --> 00:06:12,810
the service section and this is actually

00:06:09,390 --> 00:06:15,510
where you know all the relevant stuff is

00:06:12,810 --> 00:06:18,510
where we specify here in the second line

00:06:15,510 --> 00:06:20,580
is xx start which is the command that

00:06:18,510 --> 00:06:22,950
system D will run when trying to start

00:06:20,580 --> 00:06:24,810
that service right so in this case it's

00:06:22,950 --> 00:06:27,510
really simple you just start the VN stat

00:06:24,810 --> 00:06:29,400
the binary what you need to notice here

00:06:27,510 --> 00:06:32,070
though is that system D does not invoke

00:06:29,400 --> 00:06:33,900
a shell to start that up so you need to

00:06:32,070 --> 00:06:36,539
specify the full path and you don't have

00:06:33,900 --> 00:06:39,419
your usual shell stuff in your command

00:06:36,539 --> 00:06:41,639
line right so just keep that in mind we

00:06:39,419 --> 00:06:44,069
also have the X agree load line and

00:06:41,639 --> 00:06:46,050
there could also be an xx top-line in

00:06:44,069 --> 00:06:47,460
the absence of an xx top-line system

00:06:46,050 --> 00:06:49,620
they will just kill the service right

00:06:47,460 --> 00:06:51,960
and it will do what many many people

00:06:49,620 --> 00:06:54,090
implement it in in its crits by hand

00:06:51,960 --> 00:06:55,590
will just gently try to kill it and if

00:06:54,090 --> 00:06:57,569
that doesn't work within a certain time

00:06:55,590 --> 00:07:00,479
span then it will try to kill it harder

00:06:57,569 --> 00:07:03,930
until it finally succeeds now the exact

00:07:00,479 --> 00:07:06,689
reload line is pretty standard the thing

00:07:03,930 --> 00:07:09,419
is that not all of the services provide

00:07:06,689 --> 00:07:11,370
a way of reloading in the first place so

00:07:09,419 --> 00:07:13,830
we need to have such a line to tell

00:07:11,370 --> 00:07:17,250
system D what to do on reload command

00:07:13,830 --> 00:07:19,379
some other services you could probably

00:07:17,250 --> 00:07:21,120
think of the bind name server have a

00:07:19,379 --> 00:07:23,669
different way of reloading so you could

00:07:21,120 --> 00:07:25,349
call RDC reload in that case but this

00:07:23,669 --> 00:07:27,090
one is just really simple it just sends

00:07:25,349 --> 00:07:29,789
a sick up to the service and then we'll

00:07:27,090 --> 00:07:31,259
reload right and the dollar main PID is

00:07:29,789 --> 00:07:33,089
not actually a shell variable or

00:07:31,259 --> 00:07:35,610
anything it's just a special thing that

00:07:33,089 --> 00:07:38,250
you can use in unit files and service

00:07:35,610 --> 00:07:40,939
files in particular and then we also

00:07:38,250 --> 00:07:43,680
have the user line which will specify

00:07:40,939 --> 00:07:45,229
under which user this program will be

00:07:43,680 --> 00:07:48,270
started that's pretty straightforward

00:07:45,229 --> 00:07:50,729
now the last section is also interesting

00:07:48,270 --> 00:07:52,680
it's called the installed section and it

00:07:50,729 --> 00:07:54,360
has a line called wanted by equals

00:07:52,680 --> 00:07:56,189
multi-user to target and that

00:07:54,360 --> 00:07:59,939
essentially says that when this service

00:07:56,189 --> 00:08:01,800
file is enabled on the machine it will

00:07:59,939 --> 00:08:04,259
be pulled in by multi-user to target so

00:08:01,800 --> 00:08:07,800
just specifies which run level Alon it

00:08:04,259 --> 00:08:15,599
runs in so to say okay are there any

00:08:07,800 --> 00:08:18,569
questions so far yes microphone can

00:08:15,599 --> 00:08:20,460
there be more than one wanted by line

00:08:18,569 --> 00:08:28,469
yes there can be multiple wanted by

00:08:20,460 --> 00:08:29,819
lines more questions over there yes so

00:08:28,469 --> 00:08:33,240
just to make sure that I understand

00:08:29,819 --> 00:08:35,610
correctly if system D tries to we start

00:08:33,240 --> 00:08:38,099
we load a service it first execute this

00:08:35,610 --> 00:08:39,990
we load face and then the exact start

00:08:38,099 --> 00:08:42,120
phrase again oh no

00:08:39,990 --> 00:08:44,010
so there's two different cases here one

00:08:42,120 --> 00:08:47,010
is the reload case and the other one is

00:08:44,010 --> 00:08:49,110
to restart case right in the reload case

00:08:47,010 --> 00:08:51,390
it just executes what's specified here

00:08:49,110 --> 00:08:52,920
if the service file supports reloading

00:08:51,390 --> 00:08:55,410
if it doesn't then you can't reload it

00:08:52,920 --> 00:08:57,570
if you do restart it will

00:08:55,410 --> 00:08:59,370
execute stop if present or kill it if

00:08:57,570 --> 00:09:03,500
not present and then started again right

00:08:59,370 --> 00:09:03,500
okay thank you one more question here

00:09:03,770 --> 00:09:11,880
okay is there a equivalent to Debian's

00:09:08,540 --> 00:09:13,860
fourth reload where you care so much

00:09:11,880 --> 00:09:15,780
about wanting to reload that you're okay

00:09:13,860 --> 00:09:18,450
with it falling back to stop and start

00:09:15,780 --> 00:09:21,270
if necessary which Debian says via net

00:09:18,450 --> 00:09:23,850
system does support in the usual

00:09:21,270 --> 00:09:25,530
skeleton file I think there is a try

00:09:23,850 --> 00:09:27,080
reload action but I would have to

00:09:25,530 --> 00:09:30,510
confirm that we can do that later

00:09:27,080 --> 00:09:33,690
yes is there also something to stop the

00:09:30,510 --> 00:09:35,370
service well yeah I already mentioned

00:09:33,690 --> 00:09:38,490
that you can specify xx stop and if you

00:09:35,370 --> 00:09:40,080
don't it will just kill it right okay

00:09:38,490 --> 00:09:45,540
one more question here

00:09:40,080 --> 00:09:47,430
oh yeah read there's yeah did falls back

00:09:45,540 --> 00:09:49,560
to restart yes he just said there's a

00:09:47,430 --> 00:09:51,270
reload or restart command in systemctl

00:09:49,560 --> 00:09:53,820
that does precisely what you asked for

00:09:51,270 --> 00:09:56,910
are there a lot of things and start

00:09:53,820 --> 00:10:03,960
reloads to open can you define other

00:09:56,910 --> 00:10:05,520
things can you clarify status yes I will

00:10:03,960 --> 00:10:08,190
actually show you some of the actions

00:10:05,520 --> 00:10:11,550
later on this is more about something

00:10:08,190 --> 00:10:13,920
specific to certain demon that for

00:10:11,550 --> 00:10:17,010
instance fishmeal can have an awakened

00:10:13,920 --> 00:10:18,030
option it has a sleep of 5 minutes or

00:10:17,010 --> 00:10:22,020
something and then you say

00:10:18,030 --> 00:10:23,730
trigger it now and what exactly is the

00:10:22,020 --> 00:10:26,970
question I still don't quite so can you

00:10:23,730 --> 00:10:28,680
have some exact line there hello sorry

00:10:26,970 --> 00:10:30,390
and you have a custom action like in

00:10:28,680 --> 00:10:34,560
init scripts is that what you mean no we

00:10:30,390 --> 00:10:37,200
can't there is different ways of coping

00:10:34,560 --> 00:10:38,940
with that so you could there's most

00:10:37,200 --> 00:10:41,970
often there's an alternative to what you

00:10:38,940 --> 00:10:44,520
want to do but I think it's really clean

00:10:41,970 --> 00:10:46,260
and nice that they standardized on a few

00:10:44,520 --> 00:10:47,940
verbs and all of these work with all of

00:10:46,260 --> 00:10:50,040
the services except for the reload one

00:10:47,940 --> 00:10:52,020
obviously but you can't have really

00:10:50,040 --> 00:10:53,610
custom weird stuff you could ship that

00:10:52,020 --> 00:10:56,130
in an additional shell script that's

00:10:53,610 --> 00:10:58,620
what I would usually use as a first

00:10:56,130 --> 00:11:00,390
suggestion if there's no specific no no

00:10:58,620 --> 00:11:02,490
better way of solving the problem but we

00:11:00,390 --> 00:11:03,890
can discuss that later on for specific

00:11:02,490 --> 00:11:06,510
services that you might have in mind

00:11:03,890 --> 00:11:08,420
okay any more general questions up until

00:11:06,510 --> 00:11:12,449
here

00:11:08,420 --> 00:11:14,850
yes maybe you answered Andy and I missed

00:11:12,449 --> 00:11:17,999
it but about the state the possibility

00:11:14,850 --> 00:11:21,149
to cure the status of the of the service

00:11:17,999 --> 00:11:23,189
yes there is that yes obviously as I

00:11:21,149 --> 00:11:26,540
said I will show that oh okay yes sir in

00:11:23,189 --> 00:11:29,040
the second part all right now temp files

00:11:26,540 --> 00:11:31,649
the temp files mechanism is really

00:11:29,040 --> 00:11:33,389
useful not only within system D but also

00:11:31,649 --> 00:11:34,619
oftentimes when people read about it

00:11:33,389 --> 00:11:37,919
they think hey this could be useful

00:11:34,619 --> 00:11:40,470
standalone what it does is it creates it

00:11:37,919 --> 00:11:42,449
provides a mechanism to configure

00:11:40,470 --> 00:11:45,389
creating temporary directories like

00:11:42,449 --> 00:11:47,959
runtime directories so as a really

00:11:45,389 --> 00:11:50,339
simple example I have here the likely

00:11:47,959 --> 00:11:52,019
configuration file where it will

00:11:50,339 --> 00:11:55,019
essentially say create a directory

00:11:52,019 --> 00:11:58,139
called slash run slash lady with this

00:11:55,019 --> 00:12:01,139
mode this user this group and no more

00:11:58,139 --> 00:12:02,639
arguments there are some arguments you

00:12:01,139 --> 00:12:05,489
could specify there for cleaning it up

00:12:02,639 --> 00:12:08,009
every say 10 days or some delay like

00:12:05,489 --> 00:12:09,809
that that's all supported this mechanism

00:12:08,009 --> 00:12:12,689
is much more powerful than this very

00:12:09,809 --> 00:12:14,459
simple example it can also support you

00:12:12,689 --> 00:12:16,319
know not only file not own directories

00:12:14,459 --> 00:12:18,179
but also files pipe symlinks it Sarah I

00:12:16,319 --> 00:12:19,980
don't want to go into all of the details

00:12:18,179 --> 00:12:23,040
but this is the preferred mechanism to

00:12:19,980 --> 00:12:25,499
create a slash run slash something and

00:12:23,040 --> 00:12:28,499
it's much much cleaner than having you

00:12:25,499 --> 00:12:30,569
know all these varying MK dear commands

00:12:28,499 --> 00:12:31,829
that sometimes specify a user and a

00:12:30,569 --> 00:12:33,809
group and sometimes they don't and then

00:12:31,829 --> 00:12:40,860
they don't have a mode etc etc etc so

00:12:33,809 --> 00:12:42,899
this is what we want to use question but

00:12:40,860 --> 00:12:44,519
there's no implicit conflict with all

00:12:42,899 --> 00:12:47,129
things I have to take care that I do a

00:12:44,519 --> 00:12:49,709
proper name space organization and for

00:12:47,129 --> 00:12:51,569
example call my temporary director will

00:12:49,709 --> 00:12:53,579
like my service and it not choose an

00:12:51,569 --> 00:12:56,069
arbitrary name which was peps clash with

00:12:53,579 --> 00:12:57,660
another service sure yeah I mean

00:12:56,069 --> 00:12:59,039
obviously you need to watch out for file

00:12:57,660 --> 00:13:00,449
system crashes in them in packages

00:12:59,039 --> 00:13:02,100
that's just as it always has been

00:13:00,449 --> 00:13:05,309
yes so it's the mechanism you have to

00:13:02,100 --> 00:13:09,389
provide the policy yes obviously all

00:13:05,309 --> 00:13:12,989
right service file location' oftentimes

00:13:09,389 --> 00:13:14,759
the upstream provider ships a service

00:13:12,989 --> 00:13:18,460
file and that's the way it's meant to be

00:13:14,759 --> 00:13:20,950
because the upstream should know best

00:13:18,460 --> 00:13:24,220
how to install the service on a

00:13:20,950 --> 00:13:27,700
particular machine right now that

00:13:24,220 --> 00:13:29,350
doesn't always happen but if it happens

00:13:27,700 --> 00:13:30,700
please use the upstream service file and

00:13:29,350 --> 00:13:32,410
if the upstream service file is really

00:13:30,700 --> 00:13:34,270
broken please work with upstream to fix

00:13:32,410 --> 00:13:35,680
it if it's broken in some minor detail

00:13:34,270 --> 00:13:37,390
you might ask upstream if it's

00:13:35,680 --> 00:13:39,520
acceptable you know to change it in the

00:13:37,390 --> 00:13:42,460
way that it would be better I don't have

00:13:39,520 --> 00:13:44,590
any specific details one example that

00:13:42,460 --> 00:13:46,690
would come to mind is that some upstream

00:13:44,590 --> 00:13:48,940
service files are actually pretty old

00:13:46,690 --> 00:13:51,730
like they were written in 2009 or

00:13:48,940 --> 00:13:53,500
something and by now there for example

00:13:51,730 --> 00:13:55,630
referring to syslog target as a

00:13:53,500 --> 00:13:57,550
dependency whereas syslog is also

00:13:55,630 --> 00:13:59,560
started nowadays by a socket activation

00:13:57,550 --> 00:14:01,210
so that could be removed and then the

00:13:59,560 --> 00:14:02,770
service file would be simpler and more

00:14:01,210 --> 00:14:04,720
idiomatic and that would be a typical

00:14:02,770 --> 00:14:07,000
change that you could push upstream now

00:14:04,720 --> 00:14:09,010
I don't say that I expect anybody of you

00:14:07,000 --> 00:14:11,680
to know what the idiomatic service files

00:14:09,010 --> 00:14:12,850
are and contribute that upstream I'm

00:14:11,680 --> 00:14:16,750
just saying it would be the right thing

00:14:12,850 --> 00:14:18,850
to do question yes you know just right

00:14:16,750 --> 00:14:22,600
there Debian slash package name dot

00:14:18,850 --> 00:14:26,050
service and temp files but most the DEP

00:14:22,600 --> 00:14:28,780
helpers also accept just service and I

00:14:26,050 --> 00:14:31,470
will just the type of the file without

00:14:28,780 --> 00:14:35,500
the package prefix if there's only one

00:14:31,470 --> 00:14:37,240
binary package is that supported to be

00:14:35,500 --> 00:14:39,430
honest I didn't test it but I'm using

00:14:37,240 --> 00:14:40,750
the exact same that pepper plug-in code

00:14:39,430 --> 00:14:42,700
that all the authors are using so I

00:14:40,750 --> 00:14:44,170
would expect it to be supported what we

00:14:42,700 --> 00:14:46,240
also support even though I didn't

00:14:44,170 --> 00:14:48,220
actually program it is package dot and

00:14:46,240 --> 00:14:50,200
then some actual package name if it's

00:14:48,220 --> 00:14:51,310
only for a specific package in a set of

00:14:50,200 --> 00:14:53,830
all packages which is a typical

00:14:51,310 --> 00:14:56,680
developer feature in that sense Thanks

00:14:53,830 --> 00:14:58,630
sure so now to actually cover that point

00:14:56,680 --> 00:15:01,450
if upstream doesn't ship a service file

00:14:58,630 --> 00:15:03,310
and and/or a temp file then you can just

00:15:01,450 --> 00:15:05,140
place them in Debian slash your packages

00:15:03,310 --> 00:15:07,540
name dot service and temp file and it

00:15:05,140 --> 00:15:09,850
will be installed it will be installed

00:15:07,540 --> 00:15:11,770
by D H install in it which might confuse

00:15:09,850 --> 00:15:13,330
you because D H install in it is for

00:15:11,770 --> 00:15:16,030
init scripts and not first service files

00:15:13,330 --> 00:15:18,460
and in fact we by now have D H system D

00:15:16,030 --> 00:15:20,200
so that's weird and the only reason why

00:15:18,460 --> 00:15:21,850
that is is because of historic reasons

00:15:20,200 --> 00:15:23,140
we first started implementing it in the

00:15:21,850 --> 00:15:24,850
H install in it but then it turned out

00:15:23,140 --> 00:15:26,890
that would make D helper a very complex

00:15:24,850 --> 00:15:28,750
and weird and handle upstart and sis B

00:15:26,890 --> 00:15:30,880
and system D all at the same time is

00:15:28,750 --> 00:15:32,120
really not a good idea so we decided to

00:15:30,880 --> 00:15:33,800
you know leave it

00:15:32,120 --> 00:15:37,490
for the time being but eventually

00:15:33,800 --> 00:15:38,930
migrated if you use just the D H command

00:15:37,490 --> 00:15:41,600
it will all just work you don't have to

00:15:38,930 --> 00:15:43,310
care in all the other cases currently

00:15:41,600 --> 00:15:46,190
policy dictates that you still need to

00:15:43,310 --> 00:15:48,770
ship an init script so that's all fine

00:15:46,190 --> 00:15:50,120
and as soon as the policy gets changed I

00:15:48,770 --> 00:15:51,500
promise that we will be in the state

00:15:50,120 --> 00:15:54,110
where you don't have to care about this

00:15:51,500 --> 00:15:55,670
either okay I already mentioned that

00:15:54,110 --> 00:15:57,620
please send service files upstream I

00:15:55,670 --> 00:15:59,000
will just stress it again not only if

00:15:57,620 --> 00:16:00,470
you have an upstream service file and

00:15:59,000 --> 00:16:02,480
modify it and fix it please send it

00:16:00,470 --> 00:16:04,160
upstream but also if you create a

00:16:02,480 --> 00:16:06,050
service file please send it up stream so

00:16:04,160 --> 00:16:08,300
that upstream can distribute it some

00:16:06,050 --> 00:16:11,060
upstream software might not agree some

00:16:08,300 --> 00:16:14,210
are actually very thankful question over

00:16:11,060 --> 00:16:17,000
there assuming I've seen ships a valid

00:16:14,210 --> 00:16:20,450
service file what's the best practice is

00:16:17,000 --> 00:16:22,010
it to call its installing it specifying

00:16:20,450 --> 00:16:24,410
the path in the obscene directory or

00:16:22,010 --> 00:16:28,430
copy it in the Debian directory before

00:16:24,410 --> 00:16:30,830
t8 installing it is invoke in carries

00:16:28,430 --> 00:16:33,650
upstream installs it just let upstream

00:16:30,830 --> 00:16:36,620
install it I don't I'm not sure I get a

00:16:33,650 --> 00:16:38,900
question I suppose the question is in

00:16:36,620 --> 00:16:41,360
case absolutely does not install it oh

00:16:38,900 --> 00:16:43,730
yes okay they don't install it okay in

00:16:41,360 --> 00:16:45,020
case they don't install it and then what

00:16:43,730 --> 00:16:46,279
was the second part of your questions

00:16:45,020 --> 00:16:50,209
just put it in Debian slash as I

00:16:46,279 --> 00:16:52,520
explained so you can put it manually in

00:16:50,209 --> 00:16:55,339
Debian slash before the ice installing

00:16:52,520 --> 00:16:57,589
it is invoked alright you can invoke the

00:16:55,339 --> 00:17:01,160
eighth's installing it with the path in

00:16:57,589 --> 00:17:03,110
the upstream directory okay ah so if

00:17:01,160 --> 00:17:04,610
upstream doesn't install it but ship it

00:17:03,110 --> 00:17:07,069
yes oh yeah sure

00:17:04,610 --> 00:17:09,760
yeah you could either manually copy it

00:17:07,069 --> 00:17:14,209
before or just use what you suggested

00:17:09,760 --> 00:17:17,660
okay any more questions great let's move

00:17:14,209 --> 00:17:20,000
on now getting your service enable I

00:17:17,660 --> 00:17:22,699
already mentioned that just as with

00:17:20,000 --> 00:17:27,140
update RCD you need to enable services

00:17:22,699 --> 00:17:29,929
and the easiest way if you already have

00:17:27,140 --> 00:17:31,190
a service file ship by upstream or if

00:17:29,929 --> 00:17:33,290
you put your own service file into

00:17:31,190 --> 00:17:35,300
Debian slash package dot service is you

00:17:33,290 --> 00:17:37,550
add a built dependency on d-h systemd

00:17:35,300 --> 00:17:40,010
and then you use the d-h command which

00:17:37,550 --> 00:17:42,470
you hopefully already use and add the

00:17:40,010 --> 00:17:44,750
dash dash with equal system D flag and

00:17:42,470 --> 00:17:45,790
then all automatically happens and it

00:17:44,750 --> 00:17:49,730
will just work

00:17:45,790 --> 00:17:52,760
now the maintainer scripts that are

00:17:49,730 --> 00:17:54,920
generated as part of that package build

00:17:52,760 --> 00:17:57,500
will contain the appropriate code they

00:17:54,920 --> 00:17:59,780
will call a binary called DEP system B

00:17:57,500 --> 00:18:02,960
helper instead of systemctl as I

00:17:59,780 --> 00:18:04,429
mentioned earlier which avoids having a

00:18:02,960 --> 00:18:06,620
dependency on system D on all the

00:18:04,429 --> 00:18:10,100
packages which is probably politically

00:18:06,620 --> 00:18:13,580
not a good move now if you are not using

00:18:10,100 --> 00:18:15,650
D H you can also add the D H system D

00:18:13,580 --> 00:18:18,980
enable and the edge system D start calls

00:18:15,650 --> 00:18:20,750
directly in the wiki we have

00:18:18,980 --> 00:18:24,679
instructions and the link is provided on

00:18:20,750 --> 00:18:25,910
these slides to test your package or

00:18:24,679 --> 00:18:29,570
there's a question here

00:18:25,910 --> 00:18:32,960
so you mentioned the deb system D helper

00:18:29,570 --> 00:18:35,270
yes maintain your scripts the so I know

00:18:32,960 --> 00:18:39,110
the scope of system D is broader than

00:18:35,270 --> 00:18:42,830
sis via net but in the SIS via net world

00:18:39,110 --> 00:18:44,840
policy recommends whether or not you are

00:18:42,830 --> 00:18:48,350
using sis fee in it including other

00:18:44,840 --> 00:18:50,270
things like sis PRC or open RC or a few

00:18:48,350 --> 00:18:54,200
of the other minor ones and I think also

00:18:50,270 --> 00:18:57,260
upstart they recommend using invoke our

00:18:54,200 --> 00:19:00,410
CD and update our CD in Debian

00:18:57,260 --> 00:19:02,420
maintainer scripts yes as a way of both

00:19:00,410 --> 00:19:05,330
abstracting from the specific system and

00:19:02,420 --> 00:19:06,740
for handling the case where you do

00:19:05,330 --> 00:19:09,590
bootstrapping and the daemons are not

00:19:06,740 --> 00:19:12,500
running because of policy RCT so the

00:19:09,590 --> 00:19:17,150
question is why this instead of those

00:19:12,500 --> 00:19:19,910
and if policy RCT is configured to not

00:19:17,150 --> 00:19:22,970
start or stop will disrespect that yes

00:19:19,910 --> 00:19:24,590
so we have another of these helpers

00:19:22,970 --> 00:19:26,750
called DEP system the invoke which is

00:19:24,590 --> 00:19:29,510
for the invoke our CD part and it will

00:19:26,750 --> 00:19:30,980
try to respect policy unfortunately

00:19:29,510 --> 00:19:33,080
policy is really hard it's really

00:19:30,980 --> 00:19:34,309
horrible standard it's under documented

00:19:33,080 --> 00:19:35,929
and I had a really hard time figuring

00:19:34,309 --> 00:19:37,910
out how it works so it will support the

00:19:35,929 --> 00:19:39,230
use cases I could identify and if you

00:19:37,910 --> 00:19:42,470
have a use case that is broken please

00:19:39,230 --> 00:19:44,179
talk to me and we can try to fix it also

00:19:42,470 --> 00:19:45,170
to answer the second part of you the

00:19:44,179 --> 00:19:49,850
first part of your question actually

00:19:45,170 --> 00:19:52,760
update our CD it's really hard to have a

00:19:49,850 --> 00:19:54,290
good solution in there we tried

00:19:52,760 --> 00:19:56,179
implementing it in there but it turned

00:19:54,290 --> 00:19:59,600
out to not work that well and upstream

00:19:56,179 --> 00:20:02,060
is not that responsive to our concerns

00:19:59,600 --> 00:20:04,130
so we actually chose to implement a

00:20:02,060 --> 00:20:05,900
separate helper that we had in tight

00:20:04,130 --> 00:20:08,150
control and can release independently of

00:20:05,900 --> 00:20:09,950
sis VRC which turned out to be a much

00:20:08,150 --> 00:20:11,870
much better solution because already we

00:20:09,950 --> 00:20:14,390
reflected it once and iterated on it

00:20:11,870 --> 00:20:16,910
quite a few times and by now it's

00:20:14,390 --> 00:20:21,350
actually in a pretty good state so yeah

00:20:16,910 --> 00:20:22,550
that's why all right to test your

00:20:21,350 --> 00:20:24,560
package which is actually the most

00:20:22,550 --> 00:20:27,020
interesting part you will just install

00:20:24,560 --> 00:20:29,210
system D and then you can boot with the

00:20:27,020 --> 00:20:32,120
in it equal slash bin slash system D

00:20:29,210 --> 00:20:35,060
kernel parameter now install system D

00:20:32,120 --> 00:20:35,450
does not involve breaking sis V in it or

00:20:35,060 --> 00:20:37,370
anything

00:20:35,450 --> 00:20:38,750
there's no conflicts in that package you

00:20:37,370 --> 00:20:41,000
can still have both of them if you just

00:20:38,750 --> 00:20:43,880
install system D nothing will happen if

00:20:41,000 --> 00:20:45,080
you boot with in an equal spin system

00:20:43,880 --> 00:20:46,760
that you will actually use system E

00:20:45,080 --> 00:20:49,130
right so that distinction is important

00:20:46,760 --> 00:20:50,450
you can always switch back and forth so

00:20:49,130 --> 00:20:52,550
testing it is really simple you just

00:20:50,450 --> 00:20:54,100
reboot you could reboot in a VM if you

00:20:52,550 --> 00:20:56,570
don't like to reboot your main machine

00:20:54,100 --> 00:20:58,040
then what you would typically do is you

00:20:56,570 --> 00:21:00,560
check your service starts properly on

00:20:58,040 --> 00:21:02,390
boot you would probably check the reload

00:21:00,560 --> 00:21:05,090
action check stop start restart and

00:21:02,390 --> 00:21:06,710
that's about it I would say because

00:21:05,090 --> 00:21:08,810
there's really not that much more to it

00:21:06,710 --> 00:21:10,250
except if your service makes use of

00:21:08,810 --> 00:21:14,840
really advanced features and all that

00:21:10,250 --> 00:21:17,900
stuff in general I would say that your

00:21:14,840 --> 00:21:19,910
users will report back reports if your

00:21:17,900 --> 00:21:22,250
service does not work with system do you

00:21:19,910 --> 00:21:23,930
right now so there's plenty of users of

00:21:22,250 --> 00:21:27,290
system D in Debian that care enough to

00:21:23,930 --> 00:21:29,780
submit bug reports so it's not expected

00:21:27,290 --> 00:21:32,150
of you to test it you know all the time

00:21:29,780 --> 00:21:33,830
and convert all your systems and run it

00:21:32,150 --> 00:21:39,110
all the time and all that stuff a brief

00:21:33,830 --> 00:21:41,960
test will be enough okay so now to an

00:21:39,110 --> 00:21:43,490
advanced example there is actually a few

00:21:41,960 --> 00:21:45,800
more features that were maybe already

00:21:43,490 --> 00:21:48,860
mentioned if you listen to the previous

00:21:45,800 --> 00:21:50,450
talk by Leonard we have a nice service

00:21:48,860 --> 00:21:52,880
called Debian code search which I happen

00:21:50,450 --> 00:21:55,040
to maintain and the service file is

00:21:52,880 --> 00:21:57,710
actually much more complicated it not

00:21:55,040 --> 00:21:59,330
only specifies a user and group it also

00:21:57,710 --> 00:22:01,070
has some arguments in here and you can

00:21:59,330 --> 00:22:02,960
see that the service file format

00:22:01,070 --> 00:22:04,910
supports line wrapping so if your

00:22:02,960 --> 00:22:06,320
command line is pretty long then it

00:22:04,910 --> 00:22:09,410
might make sense to wrap it and have it

00:22:06,320 --> 00:22:11,750
really nice also we have standard output

00:22:09,410 --> 00:22:13,100
redirected to deafen all because it's

00:22:11,750 --> 00:22:14,690
really noisy and most

00:22:13,100 --> 00:22:16,309
used for debugging so whenever I feel

00:22:14,690 --> 00:22:18,650
like debugging it I can just change that

00:22:16,309 --> 00:22:19,940
to get standard output but in the

00:22:18,650 --> 00:22:20,390
default case that just one standard

00:22:19,940 --> 00:22:22,789
error

00:22:20,390 --> 00:22:24,650
now also my service does not actually

00:22:22,789 --> 00:22:26,150
care to lock to syslog so I say that

00:22:24,650 --> 00:22:28,780
standard error should go to the journal

00:22:26,150 --> 00:22:32,360
which will then end up in the syslog

00:22:28,780 --> 00:22:34,549
also I cannot obviously exclude the Dera

00:22:32,360 --> 00:22:36,590
box but I also cannot sit in front of a

00:22:34,549 --> 00:22:38,929
computer 24/7 and restart my server if

00:22:36,590 --> 00:22:41,360
it crashes so what I want is that

00:22:38,929 --> 00:22:44,059
whenever it fails that is it exits with

00:22:41,360 --> 00:22:45,470
an exit code that is not zero I wanted

00:22:44,059 --> 00:22:49,520
to just wait a second and then restart

00:22:45,470 --> 00:22:53,030
it so far I think in production I all

00:22:49,520 --> 00:22:55,010
only restarted my service once and then

00:22:53,030 --> 00:22:56,570
promptly fix the bug so most of the time

00:22:55,010 --> 00:22:59,600
it's bug free but you know better safe

00:22:56,570 --> 00:23:01,600
than sorry so the the other parts of the

00:22:59,600 --> 00:23:04,010
unit file are probably clear by now and

00:23:01,600 --> 00:23:06,080
what you will see in practice is that

00:23:04,010 --> 00:23:08,299
most of the service files really look

00:23:06,080 --> 00:23:10,490
kind of the same right it's pretty

00:23:08,299 --> 00:23:14,179
simple they're pretty short they all use

00:23:10,490 --> 00:23:16,130
these same features one more interesting

00:23:14,179 --> 00:23:19,010
feature that you should be aware of who

00:23:16,130 --> 00:23:21,740
a huge show of hands ships a man

00:23:19,010 --> 00:23:25,610
maintains a package that ships a d-bus

00:23:21,740 --> 00:23:27,620
service one - ok

00:23:25,610 --> 00:23:30,440
so for the others is more of an academic

00:23:27,620 --> 00:23:32,630
interest but systemd actually can care

00:23:30,440 --> 00:23:34,880
about the bus activated services

00:23:32,630 --> 00:23:37,510
so whereas Debus would usually start

00:23:34,880 --> 00:23:39,919
them on its own in older versions

00:23:37,510 --> 00:23:41,780
nowadays it's better to use system

00:23:39,919 --> 00:23:43,429
before it because then it all ends up in

00:23:41,780 --> 00:23:44,630
you know the same hierarchy and it all

00:23:43,429 --> 00:23:46,909
gets tracked and you get all the

00:23:44,630 --> 00:23:49,039
benefits and stuff so what you do is you

00:23:46,909 --> 00:23:51,380
add type equals d-bus and you specify

00:23:49,039 --> 00:23:52,850
the bus name and you don't have an

00:23:51,380 --> 00:23:54,770
install section it's not missing on a

00:23:52,850 --> 00:23:56,659
slide it's just not there and then a

00:23:54,770 --> 00:23:58,190
system do you will activate that service

00:23:56,659 --> 00:24:04,580
whenever that bus name is actually

00:23:58,190 --> 00:24:07,070
accessed all right ok so this is a more

00:24:04,580 --> 00:24:10,549
advanced example of the d-h system the

00:24:07,070 --> 00:24:12,409
debhelper plugin what we do here is we

00:24:10,549 --> 00:24:15,230
install a service that should not

00:24:12,409 --> 00:24:17,720
actually be installed by default and the

00:24:15,230 --> 00:24:19,460
way we do this is we override the d/h

00:24:17,720 --> 00:24:21,770
system the enable target and specify the

00:24:19,460 --> 00:24:23,690
- there's no enable flag this should not

00:24:21,770 --> 00:24:25,280
be surprised to anybody of you who has

00:24:23,690 --> 00:24:26,870
been using that pepper in the past I

00:24:25,280 --> 00:24:28,010
just wanted to mention it

00:24:26,870 --> 00:24:30,650
and make sure that you know you

00:24:28,010 --> 00:24:33,770
understand what the options are here and

00:24:30,650 --> 00:24:35,870
I will answer that in a second the

00:24:33,770 --> 00:24:37,820
second example here is for the second

00:24:35,870 --> 00:24:40,340
part of the D edge system D de pepper

00:24:37,820 --> 00:24:42,320
plug-in it's D H system D start and what

00:24:40,340 --> 00:24:43,970
I specify here is the - - restart after

00:24:42,320 --> 00:24:45,650
upgrade flag which will make sure that

00:24:43,970 --> 00:24:47,510
the package does not get stopped then

00:24:45,650 --> 00:24:49,070
replaced and started but we'll just get

00:24:47,510 --> 00:24:50,780
replaced and then restarted afterwards

00:24:49,070 --> 00:24:52,880
which is you know kind of cleaner but

00:24:50,780 --> 00:24:57,500
the package needs to support question so

00:24:52,880 --> 00:25:00,830
why do you call the th system D and able

00:24:57,500 --> 00:25:03,500
with the option of - - no enable instead

00:25:00,830 --> 00:25:05,390
of just leaving the target empty that's

00:25:03,500 --> 00:25:07,790
an excellent question and the comment

00:25:05,390 --> 00:25:09,860
above tries to somewhat explain it the

00:25:07,790 --> 00:25:14,330
thing is that when you purge the package

00:25:09,860 --> 00:25:15,470
if the user decided to enable it even

00:25:14,330 --> 00:25:17,390
though you ship it disabled by default

00:25:15,470 --> 00:25:19,429
then you need to clean up these symlinks

00:25:17,390 --> 00:25:21,290
right so that's what the edge system the

00:25:19,429 --> 00:25:23,450
enable also generates main scripts for

00:25:21,290 --> 00:25:25,400
so that still needs to run so we can't

00:25:23,450 --> 00:25:27,710
just skip it in the first resident we

00:25:25,400 --> 00:25:37,190
tried but it didn't work out okay more

00:25:27,710 --> 00:25:40,640
questions in the back yes you mentioned

00:25:37,190 --> 00:25:43,070
services triggered by D buzz actions yes

00:25:40,640 --> 00:25:45,320
it's a way to disable them even if the

00:25:43,070 --> 00:25:48,760
service is installed yes you can mask

00:25:45,320 --> 00:25:52,970
any service I can show you that later

00:25:48,760 --> 00:25:54,590
one more question so you say we start

00:25:52,970 --> 00:25:55,970
after upgrade how does restart I guess

00:25:54,590 --> 00:25:58,309
this is more general but it's prompted

00:25:55,970 --> 00:26:02,420
by this is how does restart work if the

00:25:58,309 --> 00:26:03,860
service is not running that's a good

00:26:02,420 --> 00:26:08,150
question I would have to really look it

00:26:03,860 --> 00:26:11,300
up I think I think there is a try

00:26:08,150 --> 00:26:13,340
restart action that would you know

00:26:11,300 --> 00:26:15,590
restart if it if it's running but not

00:26:13,340 --> 00:26:18,559
started if it's not running but the

00:26:15,590 --> 00:26:22,010
example in this case the you set up the

00:26:18,559 --> 00:26:25,160
service to remain disabled upon install

00:26:22,010 --> 00:26:27,380
yes this example so if you install the

00:26:25,160 --> 00:26:29,300
package it is not enabled yes the user

00:26:27,380 --> 00:26:31,820
takes no action and then they upgrade

00:26:29,300 --> 00:26:32,720
their system yes and a new version of

00:26:31,820 --> 00:26:35,570
the package is installed

00:26:32,720 --> 00:26:38,150
yes it tries to restart yes so the thing

00:26:35,570 --> 00:26:39,800
is as I was saying there is a restart

00:26:38,150 --> 00:26:40,669
action in systemctl and there's a try

00:26:39,800 --> 00:26:42,409
restart the

00:26:40,669 --> 00:26:43,970
Frances try restart will unregistered it

00:26:42,409 --> 00:26:46,690
if it's running which probably answers

00:26:43,970 --> 00:26:49,700
your question now the caveat is that

00:26:46,690 --> 00:26:52,129
currently if you ship a if you maintain

00:26:49,700 --> 00:26:53,779
a package to ships a system five in a

00:26:52,129 --> 00:26:55,580
script and a system the service file it

00:26:53,779 --> 00:26:58,100
will still use invoke our CD for the

00:26:55,580 --> 00:27:01,340
actual you know starting restarting etc

00:26:58,100 --> 00:27:04,700
and the invoke our CD actually has code

00:27:01,340 --> 00:27:06,320
to divert that to system D but the

00:27:04,700 --> 00:27:07,519
problem is it's not flexible enough to

00:27:06,320 --> 00:27:09,350
use try restart and all the fancy stuff

00:27:07,519 --> 00:27:11,590
so this might need some actual hand

00:27:09,350 --> 00:27:16,039
tweaking or just ignoring it for now

00:27:11,590 --> 00:27:19,249
alright so before we enter the questions

00:27:16,039 --> 00:27:21,019
and hands on part of this workshop I

00:27:19,249 --> 00:27:24,289
just want to make sure that you're all

00:27:21,019 --> 00:27:26,509
aware that we will provide help there is

00:27:24,289 --> 00:27:29,440
a wiki page which is linked here called

00:27:26,509 --> 00:27:31,669
system D slash packaging which contains

00:27:29,440 --> 00:27:34,639
most of the information hopefully or at

00:27:31,669 --> 00:27:36,169
least pointers we have an IRC channel on

00:27:34,639 --> 00:27:38,629
our cedar dependent or called

00:27:36,169 --> 00:27:40,190
hash Debian - system D where you can

00:27:38,629 --> 00:27:42,350
just stop by at any time and there's

00:27:40,190 --> 00:27:43,669
most of the time somebody around who

00:27:42,350 --> 00:27:46,909
actually knows how to write service

00:27:43,669 --> 00:27:49,279
files and stuff there is a mailing list

00:27:46,909 --> 00:27:50,330
that we're all active and we really do

00:27:49,279 --> 00:27:52,460
mean it please ask

00:27:50,330 --> 00:27:55,100
also during deb comp if there's at any

00:27:52,460 --> 00:27:57,499
time any question from anybody of you or

00:27:55,100 --> 00:27:59,200
from your friends please ask we're here

00:27:57,499 --> 00:28:02,119
for answering these sorts of questions

00:27:59,200 --> 00:28:05,539
now just one more quick note finding

00:28:02,119 --> 00:28:07,369
documentation there are mon pages a lot

00:28:05,539 --> 00:28:09,139
of man pages they are roughly

00:28:07,369 --> 00:28:10,970
categorized by the sections that I

00:28:09,139 --> 00:28:12,950
previously showed in service files so

00:28:10,970 --> 00:28:16,100
there's a system d dot service there's a

00:28:12,950 --> 00:28:19,220
system d dot exec etc there's also an

00:28:16,100 --> 00:28:22,659
overview on the freedesktop.org website

00:28:19,220 --> 00:28:24,739
where it points to all documentation the

00:28:22,659 --> 00:28:26,629
particularly interesting parts of that

00:28:24,739 --> 00:28:28,460
are decently for administrators blog

00:28:26,629 --> 00:28:30,080
series where leonard can talks about a

00:28:28,460 --> 00:28:31,940
lot of features that are interesting and

00:28:30,080 --> 00:28:34,549
how to actually make use of them in your

00:28:31,940 --> 00:28:36,409
service files and then there's a link

00:28:34,549 --> 00:28:37,999
for package repositories of the various

00:28:36,409 --> 00:28:39,859
distributions where you can just look if

00:28:37,999 --> 00:28:41,029
there already is a service file for that

00:28:39,859 --> 00:28:43,129
particular package that you maintain

00:28:41,029 --> 00:28:46,190
even though it doesn't ship one upstream

00:28:43,129 --> 00:28:47,600
so the best thing in that case would be

00:28:46,190 --> 00:28:51,590
to adopt the service file and then also

00:28:47,600 --> 00:28:54,950
make upstream accept that alright that's

00:28:51,590 --> 00:28:56,930
the talk part so far

00:28:54,950 --> 00:29:01,850
now I'm ready to answer any questions or

00:28:56,930 --> 00:29:05,540
look at any packages what is the planes

00:29:01,850 --> 00:29:08,750
for back parts I mean if you if you want

00:29:05,540 --> 00:29:10,790
to ease back pass to easy can we use the

00:29:08,750 --> 00:29:13,070
system and yes

00:29:10,790 --> 00:29:15,860
so the th system the helper is available

00:29:13,070 --> 00:29:18,380
in wheezy backports be aware that the

00:29:15,860 --> 00:29:20,120
system diversion in wheezy is version 44

00:29:18,380 --> 00:29:22,390
and we're currently trying to get

00:29:20,120 --> 00:29:25,940
version 204 which is much more recent

00:29:22,390 --> 00:29:27,440
into Debian it had a version jump

00:29:25,940 --> 00:29:29,830
because of you deaf so it's not that

00:29:27,440 --> 00:29:32,870
much more recent it's just more recent

00:29:29,830 --> 00:29:35,180
so there might be issues and it's up to

00:29:32,870 --> 00:29:37,280
you if you decide to commit to

00:29:35,180 --> 00:29:39,380
maintaining support for that old system

00:29:37,280 --> 00:29:43,190
V version with your service files in

00:29:39,380 --> 00:29:44,990
Weezy just you know just did you know if

00:29:43,190 --> 00:29:46,550
there's no immediate questions I would

00:29:44,990 --> 00:29:48,380
just go on to show you a little bit of

00:29:46,550 --> 00:29:51,260
stuff and then we can answer questions

00:29:48,380 --> 00:29:53,450
as they go along I have two prepend that

00:29:51,260 --> 00:29:57,100
at the moment I'm not maintaining any

00:29:53,450 --> 00:30:02,720
package who has in general has to start

00:29:57,100 --> 00:30:05,570
demons that yes power on and so I know

00:30:02,720 --> 00:30:08,150
nearly nothing about it but I'm a bit

00:30:05,570 --> 00:30:11,210
confused since I understand there are a

00:30:08,150 --> 00:30:15,500
lot of these kind of systems to system

00:30:11,210 --> 00:30:19,210
DC's Vineet and and so on yes as a

00:30:15,500 --> 00:30:23,210
package maintainers what have I to do to

00:30:19,210 --> 00:30:27,430
I have if I want to support all of them

00:30:23,210 --> 00:30:31,900
I have to provide okay the the script or

00:30:27,430 --> 00:30:31,900
description file that they need or each

00:30:32,590 --> 00:30:36,830
just to complete a question okay

00:30:34,640 --> 00:30:38,810
importing if in particular we consider

00:30:36,830 --> 00:30:40,760
just since we need that it is one we

00:30:38,810 --> 00:30:45,350
have by default and system D which are

00:30:40,760 --> 00:30:48,350
discussing now yes I have if if I want

00:30:45,350 --> 00:30:55,240
to provide system D information file do

00:30:48,350 --> 00:30:58,130
we also have to do to provide sis V init

00:30:55,240 --> 00:31:01,010
scripts or is that some compatibility

00:30:58,130 --> 00:31:05,720
layer that enables me to write one thing

00:31:01,010 --> 00:31:08,270
and at least in common cases expect

00:31:05,720 --> 00:31:10,220
a magic to make it working for other

00:31:08,270 --> 00:31:11,750
systems okay I would be happy to answer

00:31:10,220 --> 00:31:13,580
that after the top is just that's not

00:31:11,750 --> 00:31:15,950
really the focus of this talk okay okay

00:31:13,580 --> 00:31:19,190
so now let me just show you a few handy

00:31:15,950 --> 00:31:20,900
things that might be useful so I have a

00:31:19,190 --> 00:31:24,710
terminal here that you hopefully can

00:31:20,900 --> 00:31:27,050
read in the back said okay yeah great so

00:31:24,710 --> 00:31:29,960
let's just have a look at think found

00:31:27,050 --> 00:31:31,910
out service and what I was using here is

00:31:29,960 --> 00:31:33,950
the systemctl come on and you can see

00:31:31,910 --> 00:31:36,260
multiple interesting things first of all

00:31:33,950 --> 00:31:38,540
it's active and running so that's good

00:31:36,260 --> 00:31:40,490
it shows that I started it six days ago

00:31:38,540 --> 00:31:43,070
when I last reboot in my laptop also

00:31:40,490 --> 00:31:44,900
shows the main PID which is two five

00:31:43,070 --> 00:31:46,970
eight eight and that's the binary that

00:31:44,900 --> 00:31:49,100
corresponds to it for more complex

00:31:46,970 --> 00:31:51,740
services there are more binaries in the

00:31:49,100 --> 00:31:54,320
secret pure key what is particularly

00:31:51,740 --> 00:31:56,390
interesting for you is first of all

00:31:54,320 --> 00:31:57,680
where the service file actually lives so

00:31:56,390 --> 00:31:59,800
make sure that you shipped it to the

00:31:57,680 --> 00:32:02,030
correct path there's also a lengthy on

00:31:59,800 --> 00:32:05,330
warning for that so if you use Lindsey

00:32:02,030 --> 00:32:07,910
on you should catch that it should go to

00:32:05,330 --> 00:32:09,710
lip system D system as I mentioned it

00:32:07,910 --> 00:32:13,900
also should be enabled unless of course

00:32:09,710 --> 00:32:18,950
you decided to not enable it by default

00:32:13,900 --> 00:32:27,950
now I can just show you system CTL stop

00:32:18,950 --> 00:32:29,870
it will be dead that is a good point the

00:32:27,950 --> 00:32:32,470
first two columns are not shown so let's

00:32:29,870 --> 00:32:44,930
make it like this should be much better

00:32:32,470 --> 00:32:45,950
great not perfect better yeah whatever

00:32:44,930 --> 00:32:50,240
that's good enough

00:32:45,950 --> 00:32:52,040
so think find out service now it's still

00:32:50,240 --> 00:32:54,320
enabled it's still loaded but it's

00:32:52,040 --> 00:32:58,060
inactive because I stopped it I can

00:32:54,320 --> 00:33:01,040
start it again wait I can start it again

00:32:58,060 --> 00:33:03,320
check that it started you can also see

00:33:01,040 --> 00:33:05,690
that it used this exact start line

00:33:03,320 --> 00:33:07,360
I can also actually show you the service

00:33:05,690 --> 00:33:11,270
file there's really no magic in here

00:33:07,360 --> 00:33:13,610
there is an exit reload directive here

00:33:11,270 --> 00:33:17,300
so we can test if the reload actually

00:33:13,610 --> 00:33:19,500
works which I need to do is route and

00:33:17,300 --> 00:33:21,470
then in the status output we will

00:33:19,500 --> 00:33:24,300
see that it tried to reload the service

00:33:21,470 --> 00:33:26,730
code exited status equals zero slash

00:33:24,300 --> 00:33:28,620
success so that worked so those are a

00:33:26,730 --> 00:33:31,680
few simple things that you can check to

00:33:28,620 --> 00:33:32,070
see if your service actually works 10

00:33:31,680 --> 00:33:35,190
minutes

00:33:32,070 --> 00:33:41,820
yes are there any questions now here

00:33:35,190 --> 00:33:45,120
microphone the example has type equals

00:33:41,820 --> 00:33:50,670
 yes what are the other values

00:33:45,120 --> 00:33:52,770
which are valid so that was obviously a

00:33:50,670 --> 00:33:56,010
suggestion to open the man page and show

00:33:52,770 --> 00:33:57,480
you that actually it's documented the

00:33:56,010 --> 00:33:58,740
man page in question here is system D

00:33:57,480 --> 00:34:01,020
got service as I tried to explain

00:33:58,740 --> 00:34:03,930
earlier there is multiple types there

00:34:01,020 --> 00:34:05,940
simple there's four King one-shot divas

00:34:03,930 --> 00:34:07,890
notify or Idol the most interesting ones

00:34:05,940 --> 00:34:09,870
are simple for King one-shot and divas

00:34:07,890 --> 00:34:11,909
divas I already explained that if you

00:34:09,870 --> 00:34:14,669
have an actual divas service there's one

00:34:11,909 --> 00:34:17,010
shot which is for stuff like doing one

00:34:14,669 --> 00:34:18,450
thing and then nothing like it's not a

00:34:17,010 --> 00:34:19,889
permanently running service it's just

00:34:18,450 --> 00:34:23,040
one simple command like a shell script

00:34:19,889 --> 00:34:26,040
and then it will stay active as it

00:34:23,040 --> 00:34:27,419
started afterwards there is for King and

00:34:26,040 --> 00:34:28,800
there is simple so the difference

00:34:27,419 --> 00:34:33,000
between simple and forking is that

00:34:28,800 --> 00:34:35,429
simple will the the the demin your

00:34:33,000 --> 00:34:37,320
starting if it's a type equal simple one

00:34:35,429 --> 00:34:39,210
should just continue running in the

00:34:37,320 --> 00:34:41,220
foreground whereas a forking one will

00:34:39,210 --> 00:34:43,530
fork itself into background the

00:34:41,220 --> 00:34:46,379
preferred model is using simple because

00:34:43,530 --> 00:34:48,000
it simple for King has the implicit

00:34:46,379 --> 00:34:50,520
assumption and I think this is important

00:34:48,000 --> 00:34:52,800
to know that as long as the demon is

00:34:50,520 --> 00:34:55,169
still running in foreground it's not

00:34:52,800 --> 00:34:57,810
ready the unit file will be considered

00:34:55,169 --> 00:35:00,150
started precisely the moment where did

00:34:57,810 --> 00:35:01,920
them on Forks that is not necessarily

00:35:00,150 --> 00:35:07,320
what your upstream software implements

00:35:01,920 --> 00:35:09,240
but that's how it's the question was

00:35:07,320 --> 00:35:13,140
when it Forks or when the main process

00:35:09,240 --> 00:35:20,100
exits obviously I think when the main

00:35:13,140 --> 00:35:21,780
process exits yes but I mean that's how

00:35:20,100 --> 00:35:24,240
it usually works right you double for

00:35:21,780 --> 00:35:29,760
the menu extra members okay more

00:35:24,240 --> 00:35:33,280
questions masking process is perfect

00:35:29,760 --> 00:35:35,950
let's do that so I have I

00:35:33,280 --> 00:35:37,750
think fan and I now decide that it's

00:35:35,950 --> 00:35:39,520
really a shame that my fan is not

00:35:37,750 --> 00:35:41,950
spinning up as much as I would like so

00:35:39,520 --> 00:35:44,380
what I will just do is I will mask think

00:35:41,950 --> 00:35:46,150
fan service and it will helpfully print

00:35:44,380 --> 00:35:49,600
out what it actually did which is it

00:35:46,150 --> 00:35:52,950
just created a symlink in HSC systemd

00:35:49,600 --> 00:35:54,940
at sarah pointing to death null so

00:35:52,950 --> 00:35:56,530
essentially it will try to load that

00:35:54,940 --> 00:35:58,780
service file but fail because it you

00:35:56,530 --> 00:36:01,960
know can't read of null so if i now

00:35:58,780 --> 00:36:04,090
check status on thing found out service

00:36:01,960 --> 00:36:06,600
it will tell me that it's masked but

00:36:04,090 --> 00:36:10,000
it's also still running so if i now do

00:36:06,600 --> 00:36:12,550
systemctl stop and then status it's now

00:36:10,000 --> 00:36:15,640
dead and it will not be started on my

00:36:12,550 --> 00:36:18,460
next boot so this is different you know

00:36:15,640 --> 00:36:19,870
from enable and disable because it also

00:36:18,460 --> 00:36:21,340
works for deepest services and it's

00:36:19,870 --> 00:36:22,900
really like the last resort if you

00:36:21,340 --> 00:36:27,940
really really don't want this thing to

00:36:22,900 --> 00:36:30,520
be started mask it question I think this

00:36:27,940 --> 00:36:33,100
case you you cannot start it by and you

00:36:30,520 --> 00:36:39,250
have another method implemented in OS on

00:36:33,100 --> 00:36:42,550
system d2 I cannot to be able not what

00:36:39,250 --> 00:36:44,740
if I want to prevent you need to start

00:36:42,550 --> 00:36:48,070
at boots yes then if I say I want to be

00:36:44,740 --> 00:36:49,660
able to yes then you obviously disable

00:36:48,070 --> 00:36:51,070
it right because disabled just means

00:36:49,660 --> 00:36:52,960
don't start at boot but you can still

00:36:51,070 --> 00:36:55,120
start and stop and restart all that

00:36:52,960 --> 00:36:58,750
stuff mask just really don't start this

00:36:55,120 --> 00:37:02,940
at all right so now because I don't like

00:36:58,750 --> 00:37:02,940
loud fans let me just unmasked at

00:37:03,510 --> 00:37:08,170
alright so now it told me that it

00:37:05,620 --> 00:37:10,140
deleted that symlink and I can just

00:37:08,170 --> 00:37:15,240
start it again and it will just work

00:37:10,140 --> 00:37:18,910
alright more questions please over there

00:37:15,240 --> 00:37:22,680
when it's a active it says active and

00:37:18,910 --> 00:37:26,200
running or it says inactive in dead

00:37:22,680 --> 00:37:27,910
is there any particular meaning that it

00:37:26,200 --> 00:37:30,910
is a part active and the part in

00:37:27,910 --> 00:37:32,740
parentheses and yes it could be active

00:37:30,910 --> 00:37:35,050
and exited and that would be the case

00:37:32,740 --> 00:37:37,810
for the one-shot services that just you

00:37:35,050 --> 00:37:39,190
know fourth one command that exited but

00:37:37,810 --> 00:37:41,770
the unit is still considered active

00:37:39,190 --> 00:37:44,520
because the command succeeded more

00:37:41,770 --> 00:37:44,520
questions over here

00:37:45,190 --> 00:37:51,080
is there any support for what happens

00:37:48,290 --> 00:37:53,630
when a demon dies is it restarted like

00:37:51,080 --> 00:37:58,730
yeah I actually I actually had this on

00:37:53,630 --> 00:37:59,420
my slides earlier yes more features here

00:37:58,730 --> 00:38:01,850
we go

00:37:59,420 --> 00:38:03,590
you can specify restart SEC equals one

00:38:01,850 --> 00:38:05,600
and restart on failure there's more

00:38:03,590 --> 00:38:08,600
options in that direction to restart

00:38:05,600 --> 00:38:15,020
stuff when it dies okay more questions

00:38:08,600 --> 00:38:17,780
please here it's about gene isn't

00:38:15,020 --> 00:38:20,240
possible to use the bed passages instead

00:38:17,780 --> 00:38:24,140
we just put a file in deep system day

00:38:20,240 --> 00:38:28,730
and then depends it means it will work

00:38:24,140 --> 00:38:31,700
with other packaging system like CBS we

00:38:28,730 --> 00:38:33,920
actually have sent a patch to CBS and it

00:38:31,700 --> 00:38:36,920
supports the edge system the banner okay

00:38:33,920 --> 00:38:40,250
but why not using too aggressive but not

00:38:36,920 --> 00:38:42,290
using water instead instead of using the

00:38:40,250 --> 00:38:44,690
bed personal pet in certain with a bad

00:38:42,290 --> 00:38:49,990
person I bet you know in past yes you

00:38:44,690 --> 00:38:51,880
could have or destroy it yeah yeah

00:38:49,990 --> 00:38:53,890
executed when it detects

00:38:51,880 --> 00:38:56,120
[Music]

00:38:53,890 --> 00:38:57,560
yeah but we don't want to enable all the

00:38:56,120 --> 00:38:58,970
services by default and then we would

00:38:57,560 --> 00:39:00,410
need to maintain a whitelist or a

00:38:58,970 --> 00:39:01,790
blacklist of services and stuff that

00:39:00,410 --> 00:39:07,600
really needs to be more flexible than

00:39:01,790 --> 00:39:10,220
that okay more questions another one

00:39:07,600 --> 00:39:13,730
okay at this time its power services

00:39:10,220 --> 00:39:16,600
that need support instances mail a

00:39:13,730 --> 00:39:20,360
questionnaire Oh multiple instances yes

00:39:16,600 --> 00:39:22,400
instances one which usually says they

00:39:20,360 --> 00:39:25,850
come with several configuration files

00:39:22,400 --> 00:39:28,450
and we want one instance configuration

00:39:25,850 --> 00:39:34,550
file and be able to control them

00:39:28,450 --> 00:39:36,230
separately yes so there are good

00:39:34,550 --> 00:39:37,550
examples here on how that works there's

00:39:36,230 --> 00:39:41,720
if up and there's get yeah let me just

00:39:37,550 --> 00:39:43,400
show you get e which has get e at TTY

00:39:41,720 --> 00:39:45,350
one load service and what's interesting

00:39:43,400 --> 00:39:47,540
is you can see that the service file

00:39:45,350 --> 00:39:48,860
path actually does not include that so

00:39:47,540 --> 00:39:50,000
if we have a look at the service file

00:39:48,860 --> 00:39:51,680
you can see that it's much more

00:39:50,000 --> 00:39:54,020
complicated than I would like it to be

00:39:51,680 --> 00:39:56,810
but what's the interesting part for us

00:39:54,020 --> 00:39:58,490
is that there's percent capital I which

00:39:56,810 --> 00:40:02,900
will be replaced by whatever you

00:39:58,490 --> 00:40:05,119
after the ad so you can say you know you

00:40:02,900 --> 00:40:08,270
can make your service file contain the

00:40:05,119 --> 00:40:11,380
at in the file name and then use % i and

00:40:08,270 --> 00:40:14,810
then start a specific instance of that

00:40:11,380 --> 00:40:25,810
unusual suspected to create or the

00:40:14,810 --> 00:40:28,880
ratified yes okay more questions here

00:40:25,810 --> 00:40:30,950
well how about this socket based

00:40:28,880 --> 00:40:32,060
activation socket activation that is a

00:40:30,950 --> 00:40:34,250
good question

00:40:32,060 --> 00:40:36,710
let me just have a look if I have any

00:40:34,250 --> 00:40:40,010
socket activation files lying around

00:40:36,710 --> 00:40:42,010
here I have approached that socket which

00:40:40,010 --> 00:40:45,050
seems kind of proprietary

00:40:42,010 --> 00:40:47,180
a socket activation essentially works

00:40:45,050 --> 00:40:50,210
like this you have socket instead of a

00:40:47,180 --> 00:40:55,010
service in your service file in your

00:40:50,210 --> 00:40:57,170
socket file sorry you specify a tcp port

00:40:55,010 --> 00:40:58,910
or a UNIX socket or whatever it should

00:40:57,170 --> 00:41:01,970
listen on and then there is accept

00:40:58,910 --> 00:41:03,890
equals yes or the default is accept

00:41:01,970 --> 00:41:06,470
equals no the difference is that accept

00:41:03,890 --> 00:41:08,300
equals yes mimics the INA D style

00:41:06,470 --> 00:41:10,070
behavior of just you know starting one

00:41:08,300 --> 00:41:12,800
process per connection which is kind of

00:41:10,070 --> 00:41:14,990
wasteful and the actual real good socket

00:41:12,800 --> 00:41:18,800
activation is not having that

00:41:14,990 --> 00:41:21,350
but patching the service to when being

00:41:18,800 --> 00:41:22,990
started inherit the file descriptor off

00:41:21,350 --> 00:41:25,160
the socket and then just you know

00:41:22,990 --> 00:41:27,230
integrate it in its event loop and

00:41:25,160 --> 00:41:29,630
handle that and many services are

00:41:27,230 --> 00:41:31,520
already patched for that some of them

00:41:29,630 --> 00:41:33,170
are patched but not in Debian and some

00:41:31,520 --> 00:41:35,060
of them you would need to patch but this

00:41:33,170 --> 00:41:37,510
is really like a thing of an hour or two

00:41:35,060 --> 00:41:41,500
I did it for Bakula once for example

00:41:37,510 --> 00:41:41,500
okay question over here

00:41:41,530 --> 00:41:46,850
so the socket file just includes

00:41:44,359 --> 00:41:49,430
information about where to listen and if

00:41:46,850 --> 00:41:52,490
to accept but not what to start is that

00:41:49,430 --> 00:41:54,950
just in a service file then yes the

00:41:52,490 --> 00:41:57,140
socket file has to match by name the

00:41:54,950 --> 00:41:59,150
service file and because I used except

00:41:57,140 --> 00:42:00,920
equals yes it needs to be a proxy at

00:41:59,150 --> 00:42:03,260
that service not a proxy service and

00:42:00,920 --> 00:42:04,790
then this will in turn just say you know

00:42:03,260 --> 00:42:08,210
take the standard input from socket like

00:42:04,790 --> 00:42:08,720
I know T does and started up okay one

00:42:08,210 --> 00:42:11,579
more question

00:42:08,720 --> 00:42:14,910
so why does it mean I have to add

00:42:11,579 --> 00:42:17,190
yet because if you use I nerdy style

00:42:14,910 --> 00:42:19,309
stuff then for every incoming new

00:42:17,190 --> 00:42:21,959
connection it will start a separate

00:42:19,309 --> 00:42:23,759
process right so all these processes

00:42:21,959 --> 00:42:25,440
show up in your secret hierarchy so

00:42:23,759 --> 00:42:29,729
that's why the instance is used

00:42:25,440 --> 00:42:33,660
yeah and does it also relate to X X dot

00:42:29,729 --> 00:42:35,729
equals - instead of directly the path no

00:42:33,660 --> 00:42:37,650
in fact I already looked at this and

00:42:35,729 --> 00:42:39,719
wondered why it is there it I think it

00:42:37,650 --> 00:42:41,759
should not be there because d- means

00:42:39,719 --> 00:42:44,549
that ignore failure should be ignored

00:42:41,759 --> 00:42:47,190
I'm not entirely sure why it makes sense

00:42:44,549 --> 00:42:48,479
to have it here my suspicion would be

00:42:47,190 --> 00:42:50,009
that you know if there is a connection

00:42:48,479 --> 00:42:51,329
and it goes away then this shouldn't

00:42:50,009 --> 00:42:53,160
there was something like I knew would

00:42:51,329 --> 00:42:54,749
need to look that up so sorry no answer

00:42:53,160 --> 00:42:56,690
here more questions

00:42:54,749 --> 00:43:04,920
last question we have one minute left

00:42:56,690 --> 00:43:09,989
last question over there thank you thank

00:43:04,920 --> 00:43:11,819
you dependencies defined in the thing oh

00:43:09,989 --> 00:43:13,259
yes that's a good question so ideally

00:43:11,819 --> 00:43:14,670
dependencies are not defined anywhere

00:43:13,259 --> 00:43:16,769
because they're implicit by socket

00:43:14,670 --> 00:43:21,029
activation in case that's not the case

00:43:16,769 --> 00:43:23,160
for example if my I think I should

00:43:21,029 --> 00:43:27,839
probably have it here let me just have a

00:43:23,160 --> 00:43:31,859
look real quick I think this year's web

00:43:27,839 --> 00:43:33,690
dot service it's actually more

00:43:31,859 --> 00:43:35,819
complicated no it doesn't have it so

00:43:33,690 --> 00:43:37,680
there's in the unit's section where we

00:43:35,819 --> 00:43:40,499
also specify the description there can

00:43:37,680 --> 00:43:42,839
be a before equals and after equals so

00:43:40,499 --> 00:43:45,479
in my case I would start code search

00:43:42,839 --> 00:43:47,400
after PostgreSQL came up and I would

00:43:45,479 --> 00:43:48,959
just specify after equals PostgreSQL dot

00:43:47,400 --> 00:43:50,369
service you can specify multiple

00:43:48,959 --> 00:43:52,890
services there you can specify the

00:43:50,369 --> 00:43:54,509
directive multiple times but usually it

00:43:52,890 --> 00:43:57,229
should not be required to specify pen

00:43:54,509 --> 00:43:59,579
C's which is nice okay thank you okay

00:43:57,229 --> 00:44:00,809
time is over so I would like to say

00:43:59,579 --> 00:44:02,640
thank you very much for your attention

00:44:00,809 --> 00:44:04,630
if you have any questions please let me

00:44:02,640 --> 00:44:12,570
know and we can fix it thank you

00:44:04,630 --> 00:44:12,570

YouTube URL: https://www.youtube.com/watch?v=Boh8Gt8LWXg


