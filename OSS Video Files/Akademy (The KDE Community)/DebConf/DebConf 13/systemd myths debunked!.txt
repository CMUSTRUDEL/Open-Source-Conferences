Title: systemd myths debunked!
Publication date: 2017-11-29
Playlist: DebConf 13
Description: 
	by Michael Stapelberg

At: DebConf13
https://debconf13.debconf.org/
Room: Main talk room
Scheduled start: 2013-08-13 11:30:00
Captions: 
	00:00:00,780 --> 00:00:06,390
so welcome for this third and last

00:00:03,419 --> 00:00:08,010
session about system boot of this

00:00:06,390 --> 00:00:11,519
morning

00:00:08,010 --> 00:00:14,700
so Mikkel Snapple berg started

00:00:11,519 --> 00:00:17,160
contributing debian in 2008 last year

00:00:14,700 --> 00:00:20,430
here in a several months ago he run a

00:00:17,160 --> 00:00:22,170
survey on CMD and the generals and human

00:00:20,430 --> 00:00:25,199
the demon community about system G and

00:00:22,170 --> 00:00:27,060
so today he's going to be like for this

00:00:25,199 --> 00:00:28,439
for the survey more than 2000 people

00:00:27,060 --> 00:00:32,340
actually answered and he's going to

00:00:28,439 --> 00:00:34,170
build upon that to present some all to

00:00:32,340 --> 00:00:43,590
debunk some of the myths that we have

00:00:34,170 --> 00:00:46,110
about CMG please welcome Michael ok

00:00:43,590 --> 00:00:48,390
thank you for the introduction I'm just

00:00:46,110 --> 00:00:49,860
in case I'm speaking too fast or anybody

00:00:48,390 --> 00:00:53,550
can't hear me please just give a sign

00:00:49,860 --> 00:00:56,010
and I'll hope to correct that so my name

00:00:53,550 --> 00:00:58,949
is Michael cipher Burke and while

00:00:56,010 --> 00:01:00,629
yesterday we had a talk by Leonard from

00:00:58,949 --> 00:01:02,850
the upstream point of view this talk is

00:01:00,629 --> 00:01:05,640
going to be more the downstream point of

00:01:02,850 --> 00:01:07,350
view in case you have any questions

00:01:05,640 --> 00:01:08,729
please hold them until the end we will

00:01:07,350 --> 00:01:11,130
have some time for questions and answers

00:01:08,729 --> 00:01:12,869
unless it's really really important in

00:01:11,130 --> 00:01:15,540
which case you can just ask it right

00:01:12,869 --> 00:01:17,759
away now first of all to cover a little

00:01:15,540 --> 00:01:19,740
bit of my back story I read Leonard's

00:01:17,759 --> 00:01:21,840
initial blog post a few days after it

00:01:19,740 --> 00:01:24,720
came out and I was skeptical I thought

00:01:21,840 --> 00:01:26,759
that's a huge undertaking and I wasn't

00:01:24,720 --> 00:01:28,770
sure if that's actually gonna work so I

00:01:26,759 --> 00:01:31,829
decided I will just hold off for a year

00:01:28,770 --> 00:01:34,470
or so and quite a while after systemd

00:01:31,829 --> 00:01:36,869
was released I actually first installed

00:01:34,470 --> 00:01:38,400
it and figured out wow this actually

00:01:36,869 --> 00:01:40,890
totally makes sense like all the

00:01:38,400 --> 00:01:42,840
commands are so cool we finally have a

00:01:40,890 --> 00:01:44,579
way to introspect our system I can check

00:01:42,840 --> 00:01:48,149
the status of any system I can reliably

00:01:44,579 --> 00:01:49,890
start and stop services etc etc and at

00:01:48,149 --> 00:01:52,470
that point I figured this is the way

00:01:49,890 --> 00:01:54,119
forward this is what we need and I

00:01:52,470 --> 00:01:56,420
started contributing service files to

00:01:54,119 --> 00:01:58,979
packages to make them even better

00:01:56,420 --> 00:02:01,250
because systemd supports system 5

00:01:58,979 --> 00:02:03,780
services but in order to get better

00:02:01,250 --> 00:02:05,460
support like more features and use the

00:02:03,780 --> 00:02:07,380
full spectrum of what system lis can

00:02:05,460 --> 00:02:09,390
offer it's better to have native service

00:02:07,380 --> 00:02:11,580
files so I started doing that and some

00:02:09,390 --> 00:02:13,460
UPS some maintainer in debian actually

00:02:11,580 --> 00:02:16,450
merged these service files

00:02:13,460 --> 00:02:19,100
but the overall progress was pretty slow

00:02:16,450 --> 00:02:20,870
mostly due to a few issues that nobody

00:02:19,100 --> 00:02:24,290
in the package system D team really had

00:02:20,870 --> 00:02:26,030
time to tackle so when I finally figured

00:02:24,290 --> 00:02:28,070
out how to approach the problem I

00:02:26,030 --> 00:02:29,870
decided to join the package system D

00:02:28,070 --> 00:02:33,530
team and just you know work on fixing

00:02:29,870 --> 00:02:36,200
that that happened I think half a year

00:02:33,530 --> 00:02:38,210
to a year ago and what I work by now in

00:02:36,200 --> 00:02:40,280
package system D is bug reports also

00:02:38,210 --> 00:02:42,770
merging contributions so if you send a

00:02:40,280 --> 00:02:44,030
patch for system D chances are that I

00:02:42,770 --> 00:02:46,610
will actually merge it into our

00:02:44,030 --> 00:02:48,020
packaging if it's packed to the actual

00:02:46,610 --> 00:02:49,760
system d source code I will forward it

00:02:48,020 --> 00:02:52,520
upstream that has been working well in

00:02:49,760 --> 00:02:54,590
the past I also care about D H system D

00:02:52,520 --> 00:02:56,960
which is a DEP helper plug-in to improve

00:02:54,590 --> 00:02:58,340
packaging and in its system helpers

00:02:56,960 --> 00:02:58,790
which is the thing I talked about

00:02:58,340 --> 00:03:02,240
yesterday

00:02:58,790 --> 00:03:04,190
I also sometimes do simple service files

00:03:02,240 --> 00:03:06,200
because they're just fun to do and just

00:03:04,190 --> 00:03:08,390
a quick task and they improve the

00:03:06,200 --> 00:03:10,100
package but I also tackle the more

00:03:08,390 --> 00:03:12,110
complex service files because I feel

00:03:10,100 --> 00:03:13,910
that they should really be done right so

00:03:12,110 --> 00:03:16,340
I take my time and discuss with the

00:03:13,910 --> 00:03:18,620
maintainer x' and go back and forth and

00:03:16,340 --> 00:03:21,410
we try to do the complex service file so

00:03:18,620 --> 00:03:23,270
you don't necessarily have to also

00:03:21,410 --> 00:03:25,190
what's important for me is I say

00:03:23,270 --> 00:03:27,920
community outreach I did the survey I

00:03:25,190 --> 00:03:30,200
did several blog posts I do talks at Def

00:03:27,920 --> 00:03:32,360
Con obviously and I hope to do some real

00:03:30,200 --> 00:03:35,720
live discussions so in case you have any

00:03:32,360 --> 00:03:37,790
questions feel free to grab me at any

00:03:35,720 --> 00:03:39,530
point during the conference now about

00:03:37,790 --> 00:03:42,980
the blog post quick show of hands who

00:03:39,530 --> 00:03:45,470
notice that I did a few blog posts ok a

00:03:42,980 --> 00:03:48,230
couple who have those read those and to

00:03:45,470 --> 00:03:52,310
end like very carefully ok

00:03:48,230 --> 00:03:55,190
perfect great so the motivation of this

00:03:52,310 --> 00:03:56,840
talk is as you might have noticed we as

00:03:55,190 --> 00:03:58,520
in the package system D team do not

00:03:56,840 --> 00:04:00,110
discuss on debian level merely because

00:03:58,520 --> 00:04:02,420
we think it's not a good use of any of

00:04:00,110 --> 00:04:04,010
our time but we actually want to

00:04:02,420 --> 00:04:05,660
communicate with you so I don't want to

00:04:04,010 --> 00:04:07,130
discuss the fact why Debian devil is not

00:04:05,660 --> 00:04:10,040
well-suited for that kind of

00:04:07,130 --> 00:04:12,140
communication but I figured we should

00:04:10,040 --> 00:04:14,270
give a talk and we want to address the

00:04:12,140 --> 00:04:15,740
top concerns not only for the people who

00:04:14,270 --> 00:04:17,680
read the blog posts but also for the

00:04:15,740 --> 00:04:19,970
people who prefer to just listen to me

00:04:17,680 --> 00:04:21,530
also we want to encourage face-to-face

00:04:19,970 --> 00:04:22,820
discussion so in case you don't have

00:04:21,530 --> 00:04:24,320
anything you want to discuss about

00:04:22,820 --> 00:04:27,250
before the talk maybe you have something

00:04:24,320 --> 00:04:27,250
after the talk

00:04:27,500 --> 00:04:35,090
who if you did notice the survey who

00:04:31,790 --> 00:04:38,210
have you participated in the survey okay

00:04:35,090 --> 00:04:41,990
great for the others we had about 573

00:04:38,210 --> 00:04:44,480
participants of which 45.7% claimed to

00:04:41,990 --> 00:04:46,820
be DD or DM or some kind of maintainer

00:04:44,480 --> 00:04:48,350
of a debian package we also asked

00:04:46,820 --> 00:04:50,270
whether we should make it a default but

00:04:48,350 --> 00:04:52,150
that was just you know to have like the

00:04:50,270 --> 00:04:54,590
opinion not to actually make a decision

00:04:52,150 --> 00:04:56,900
forty-three percent said yes thirty-two

00:04:54,590 --> 00:04:59,480
percent said no and twenty three twenty

00:04:56,900 --> 00:05:00,920
three percent couldn't decide yet but

00:04:59,480 --> 00:05:03,740
what was most important about that

00:05:00,920 --> 00:05:06,560
survey was that we had free text fields

00:05:03,740 --> 00:05:08,570
for people to voice their top concerns

00:05:06,560 --> 00:05:10,340
so they could just enter anything and

00:05:08,570 --> 00:05:13,160
then I tried to you know create buckets

00:05:10,340 --> 00:05:15,110
out of that and half the top concerns

00:05:13,160 --> 00:05:18,290
listed with a respective weight and then

00:05:15,110 --> 00:05:20,330
addressed them in this talk so the

00:05:18,290 --> 00:05:23,180
agenda of this talk will be first of all

00:05:20,330 --> 00:05:25,250
these are actually the three top survey

00:05:23,180 --> 00:05:28,340
concerns we identified the first of them

00:05:25,250 --> 00:05:30,260
is complexity this was voiced in many

00:05:28,340 --> 00:05:32,840
different ways and it has many different

00:05:30,260 --> 00:05:34,340
you know things to consider some people

00:05:32,840 --> 00:05:36,470
said that system D has too many

00:05:34,340 --> 00:05:38,510
dependencies or it's too complex or it

00:05:36,470 --> 00:05:40,280
does too many things it has too many

00:05:38,510 --> 00:05:42,050
features it's hard to understand all

00:05:40,280 --> 00:05:43,940
that kind of stuff is what I'm trying to

00:05:42,050 --> 00:05:47,270
address here then there's the issue of

00:05:43,940 --> 00:05:49,130
portability many of you might know the

00:05:47,270 --> 00:05:50,780
system e only runs on Linux that's

00:05:49,130 --> 00:05:53,740
what's going to be in the second part

00:05:50,780 --> 00:05:56,780
and the third part deals with debugging

00:05:53,740 --> 00:05:58,550
in case any of you have any questions

00:05:56,780 --> 00:06:01,669
that are not or any concerns that are

00:05:58,550 --> 00:06:04,270
not within these three major topics we

00:06:01,669 --> 00:06:06,800
have some time to answer them at the end

00:06:04,270 --> 00:06:08,780
now before we start a few quick

00:06:06,800 --> 00:06:10,760
clarifications because they also came up

00:06:08,780 --> 00:06:12,440
in the survey the system D config files

00:06:10,760 --> 00:06:15,260
are not binary they're human readable

00:06:12,440 --> 00:06:16,669
ASCII text files that's just fact also

00:06:15,260 --> 00:06:19,370
you can install system the alongside

00:06:16,669 --> 00:06:20,780
says V in it so on each and every one of

00:06:19,370 --> 00:06:22,310
your machines you can just install it

00:06:20,780 --> 00:06:23,810
try it out if you don't like it switch

00:06:22,310 --> 00:06:26,030
back or switch back and forth if you

00:06:23,810 --> 00:06:28,010
have any particular problem also system

00:06:26,030 --> 00:06:30,620
D has plenty of documentation it might

00:06:28,010 --> 00:06:31,790
be hard to you know understand all of it

00:06:30,620 --> 00:06:33,530
because it's just so much documentation

00:06:31,790 --> 00:06:36,560
but it's much better to have so much

00:06:33,530 --> 00:06:38,120
documentation than not at all right so

00:06:36,560 --> 00:06:41,070
those I just want to get out of the way

00:06:38,120 --> 00:06:43,200
and now let's start with the comply

00:06:41,070 --> 00:06:45,930
first of all people mentioned that

00:06:43,200 --> 00:06:47,940
systemd has so many dependencies now I

00:06:45,930 --> 00:06:50,490
wasn't actually sure how to address that

00:06:47,940 --> 00:06:52,500
and I decided that hey I don't actually

00:06:50,490 --> 00:06:53,880
know each and every dependency of system

00:06:52,500 --> 00:06:57,000
D but probably I should an answer to

00:06:53,880 --> 00:06:58,530
answer that so I made a list of all the

00:06:57,000 --> 00:07:00,690
dependencies and you can read that

00:06:58,530 --> 00:07:03,090
document online the slides will be

00:07:00,690 --> 00:07:06,919
uploaded later on it's also in my block

00:07:03,090 --> 00:07:09,480
and in that document I carefully

00:07:06,919 --> 00:07:12,840
document all the dependencies of PID 1

00:07:09,480 --> 00:07:15,210
which are like 10 and then we have like

00:07:12,840 --> 00:07:17,250
about 4 the other binaries that are

00:07:15,210 --> 00:07:19,830
somewhat related to system Li some of

00:07:17,250 --> 00:07:21,660
them are just very simple command line

00:07:19,830 --> 00:07:23,000
wrappers that you can use in your shell

00:07:21,660 --> 00:07:26,100
script some of them are actually

00:07:23,000 --> 00:07:28,260
demonstrate are starred on-demand like

00:07:26,100 --> 00:07:31,290
the whole time date CTL stuff and host

00:07:28,260 --> 00:07:32,910
name CTL stuff stuff like that so in

00:07:31,290 --> 00:07:35,400
case you're interested in that and you

00:07:32,910 --> 00:07:37,260
want to arrive at your own opinion on

00:07:35,400 --> 00:07:38,880
whether a system D has too many

00:07:37,260 --> 00:07:40,500
dependencies or just the right amount of

00:07:38,880 --> 00:07:42,389
justify dependencies please read the

00:07:40,500 --> 00:07:45,240
document and then you know have your own

00:07:42,389 --> 00:07:47,039
opinion many people talk to me about

00:07:45,240 --> 00:07:48,780
d-bus and how they don't like divorce

00:07:47,039 --> 00:07:51,270
and they don't want us to be running

00:07:48,780 --> 00:07:54,150
within their inner system and I feel

00:07:51,270 --> 00:07:55,830
that it's worth clarifying that what

00:07:54,150 --> 00:07:58,080
system they actually uses is the D

00:07:55,830 --> 00:08:00,000
buzzwire' format so it uses debug for

00:07:58,080 --> 00:08:01,740
serialization in the first place in

00:08:00,000 --> 00:08:02,910
order to not invent its own IPC

00:08:01,740 --> 00:08:04,530
mechanism because by now we actually

00:08:02,910 --> 00:08:06,479
have enough of them right there's no

00:08:04,530 --> 00:08:07,860
point in just inventing another one of

00:08:06,479 --> 00:08:10,889
them and going through all the problems

00:08:07,860 --> 00:08:13,800
again so the systemctl command which you

00:08:10,889 --> 00:08:16,620
use to you know introspect your system

00:08:13,800 --> 00:08:18,840
etc and you know started and debug it it

00:08:16,620 --> 00:08:20,729
actually when you run it as root will

00:08:18,840 --> 00:08:23,700
communicate with system D through a

00:08:20,729 --> 00:08:25,650
private UNIX socket it's not required to

00:08:23,700 --> 00:08:27,210
have a D bus demand running of course if

00:08:25,650 --> 00:08:29,520
you want to use it on a typical desktop

00:08:27,210 --> 00:08:31,380
system used ignore tools to see your as

00:08:29,520 --> 00:08:34,380
service hierarchy and all that stuff

00:08:31,380 --> 00:08:38,370
that goes over the regular system D bus

00:08:34,380 --> 00:08:40,320
was alright most of the other libraries

00:08:38,370 --> 00:08:42,659
that system they actually uses are

00:08:40,320 --> 00:08:44,640
widely used libraries like I already

00:08:42,659 --> 00:08:48,029
mentioned T bus there's selinux just lip

00:08:44,640 --> 00:08:49,860
cap all that kind of stuff and those

00:08:48,029 --> 00:08:51,630
libraries are mostly memory mapped

00:08:49,860 --> 00:08:53,400
anyway you could say well not on an

00:08:51,630 --> 00:08:54,089
embedded system yeah I give you that but

00:08:53,400 --> 00:08:55,379
on most

00:08:54,089 --> 00:08:57,240
your machines it's gonna be

00:08:55,379 --> 00:08:59,069
memory-mapped anyway most of them are

00:08:57,240 --> 00:09:00,420
actually installed already so if you

00:08:59,069 --> 00:09:02,279
actually will type apt-get install

00:09:00,420 --> 00:09:04,110
system D even though you're not actually

00:09:02,279 --> 00:09:07,279
gonna install it you will see that it

00:09:04,110 --> 00:09:10,199
only pulls in like five packages or so

00:09:07,279 --> 00:09:11,910
all right the next argument was that

00:09:10,199 --> 00:09:14,100
system D is so bloated

00:09:11,910 --> 00:09:16,259
now bloat is hard to define but

00:09:14,100 --> 00:09:18,269
Wikipedia gives the definition and I try

00:09:16,259 --> 00:09:21,360
to follow that wikipedia says that

00:09:18,269 --> 00:09:23,610
bloated programs are often using more

00:09:21,360 --> 00:09:26,519
resources like more memory more CPU they

00:09:23,610 --> 00:09:29,160
are bigger in terms of lines of code

00:09:26,519 --> 00:09:31,069
they're perceived as slower they have

00:09:29,160 --> 00:09:34,230
higher maintenance cost all that stuff

00:09:31,069 --> 00:09:35,790
today we say that yes obviously system

00:09:34,230 --> 00:09:37,139
the uses more memory can actually

00:09:35,790 --> 00:09:38,910
measure that but it's worth it because

00:09:37,139 --> 00:09:41,040
it does a lot more stuff it doesn't just

00:09:38,910 --> 00:09:42,449
you know run your service in the

00:09:41,040 --> 00:09:44,040
background and then hope that it will

00:09:42,449 --> 00:09:46,290
all magically just work out it actually

00:09:44,040 --> 00:09:48,240
keeps track of it and if it dies it can

00:09:46,290 --> 00:09:49,980
restart it if it dies it will show you

00:09:48,240 --> 00:09:51,779
what's the exit code when did it

00:09:49,980 --> 00:09:53,430
actually die what are the log lines that

00:09:51,779 --> 00:09:55,259
are produced all that stuff and that

00:09:53,430 --> 00:09:57,180
obviously requires more resources I

00:09:55,259 --> 00:10:00,720
think that's very clear

00:09:57,180 --> 00:10:02,939
also the second point of bloat as per

00:10:00,720 --> 00:10:05,100
the Wikipedia definition is that bloated

00:10:02,939 --> 00:10:06,509
software is slower but it turns out that

00:10:05,100 --> 00:10:09,509
system D is actually measured a bit

00:10:06,509 --> 00:10:13,170
faster than this V in it so that clearly

00:10:09,509 --> 00:10:15,120
doesn't apply right also there is the

00:10:13,170 --> 00:10:16,740
factor about maintenance cost and we

00:10:15,120 --> 00:10:18,600
think that there will be actually less

00:10:16,740 --> 00:10:20,970
maintenance cost eventually and what do

00:10:18,600 --> 00:10:22,920
we mean by that currently we have the

00:10:20,970 --> 00:10:25,740
model where we have a relatively a

00:10:22,920 --> 00:10:27,600
simple system v in it and then we have a

00:10:25,740 --> 00:10:29,339
lot of complexity over all the init

00:10:27,600 --> 00:10:32,009
scripts and a lot of maintainer z' need

00:10:29,339 --> 00:10:33,779
to you know learn about what should go

00:10:32,009 --> 00:10:36,059
into an init script and how to implement

00:10:33,779 --> 00:10:37,860
all these features like I have recently

00:10:36,059 --> 00:10:40,829
looked at a couple of init scripts and

00:10:37,860 --> 00:10:43,379
many many of them have this idiom where

00:10:40,829 --> 00:10:44,939
they will try to shut down the service

00:10:43,379 --> 00:10:46,199
cleanly and if that doesn't work they

00:10:44,939 --> 00:10:47,699
fall back on killing it and if that

00:10:46,199 --> 00:10:49,470
doesn't work they fall back on killing

00:10:47,699 --> 00:10:50,759
it really really hard and each and every

00:10:49,470 --> 00:10:52,439
one of them has like a slightly

00:10:50,759 --> 00:10:54,509
different implementation of that with

00:10:52,439 --> 00:10:55,980
slightly different timeouts and all that

00:10:54,509 --> 00:10:57,389
stuff and that's a pattern you see in

00:10:55,980 --> 00:11:00,540
all the init scripts I mean just look at

00:10:57,389 --> 00:11:02,939
them and with system D yes obviously

00:11:00,540 --> 00:11:04,860
that complexity will not go away it will

00:11:02,939 --> 00:11:06,600
just go into a different place but it

00:11:04,860 --> 00:11:07,800
will go into one paw story where there's

00:11:06,600 --> 00:11:10,529
one upstream and we

00:11:07,800 --> 00:11:12,720
can all fix that stuff there and then

00:11:10,529 --> 00:11:14,370
you know overall the distributions we

00:11:12,720 --> 00:11:15,959
can actually benefit from arch linux

00:11:14,370 --> 00:11:17,430
people contributing their fixes from

00:11:15,959 --> 00:11:19,709
gentle people contributing to fix it

00:11:17,430 --> 00:11:22,830
from the fedora people etc and we will

00:11:19,709 --> 00:11:25,410
have one solution that you know has some

00:11:22,830 --> 00:11:27,180
complexity but in turn all of you all

00:11:25,410 --> 00:11:28,829
the package maintainer don't actually

00:11:27,180 --> 00:11:30,510
need to deal with all that complexity

00:11:28,829 --> 00:11:34,769
anymore so I think that's a great

00:11:30,510 --> 00:11:39,420
benefit some people were saying that

00:11:34,769 --> 00:11:41,790
system D is too complex right I just try

00:11:39,420 --> 00:11:43,470
to explain why I think that the

00:11:41,790 --> 00:11:44,970
complexity is actually centralized or

00:11:43,470 --> 00:11:47,490
not added because it's just pulled into

00:11:44,970 --> 00:11:49,110
a different place let me just add that

00:11:47,490 --> 00:11:51,779
many features of systems they are

00:11:49,110 --> 00:11:53,490
optional as an example I'm not actually

00:11:51,779 --> 00:11:56,370
using all the features of system D I'm

00:11:53,490 --> 00:11:58,260
not actually running gnome so you know I

00:11:56,370 --> 00:12:00,329
use what I like I like the journal I

00:11:58,260 --> 00:12:02,519
like system D itself all the other stuff

00:12:00,329 --> 00:12:05,730
is not that important to me

00:12:02,519 --> 00:12:08,790
and also new things always seem complex

00:12:05,730 --> 00:12:11,040
at first so whichever init system it's

00:12:08,790 --> 00:12:12,899
gonna be that we switch to it will seem

00:12:11,040 --> 00:12:15,540
complex just because it's new right

00:12:12,899 --> 00:12:17,520
many of you have grown up with system 5

00:12:15,540 --> 00:12:19,140
and it me included and we think that we

00:12:17,520 --> 00:12:21,270
know how it works because we're used to

00:12:19,140 --> 00:12:22,470
it and it seems to kind of work but I

00:12:21,270 --> 00:12:24,630
actually looked at the source code

00:12:22,470 --> 00:12:27,540
recently and at all the unit scripts and

00:12:24,630 --> 00:12:29,279
stuff and it's much much more complex

00:12:27,540 --> 00:12:31,950
than I thought and I think many of you

00:12:29,279 --> 00:12:33,420
might be in the same situation that you

00:12:31,950 --> 00:12:34,740
know you just think yeah it's this

00:12:33,420 --> 00:12:37,020
simple thing but it turns out it's

00:12:34,740 --> 00:12:38,730
actually not and if you compare that if

00:12:37,020 --> 00:12:41,990
we honestly really compared it

00:12:38,730 --> 00:12:44,730
I think system he doesn't look too bad

00:12:41,990 --> 00:12:46,860
now the second part is that system D is

00:12:44,730 --> 00:12:49,290
not portable and obviously that's a fact

00:12:46,860 --> 00:12:51,870
right we can't have any opinion about

00:12:49,290 --> 00:12:53,760
that it's just a fact system D is a

00:12:51,870 --> 00:12:56,730
Linux specific init system and it does

00:12:53,760 --> 00:12:59,100
not run on Debian /k FreeBSD or Debian

00:12:56,730 --> 00:13:01,079
slash heard which we have now that is

00:12:59,100 --> 00:13:04,079
not an arbitrary decision as lana tried

00:13:01,079 --> 00:13:06,630
to explain in his talk yesterday we

00:13:04,079 --> 00:13:09,089
actually need c groups for system d to

00:13:06,630 --> 00:13:12,390
achieve all the things that it does and

00:13:09,089 --> 00:13:14,220
also one important factor is that if we

00:13:12,390 --> 00:13:16,380
try to make it portable and for example

00:13:14,220 --> 00:13:18,000
had a que free bsd implementation off

00:13:16,380 --> 00:13:19,890
system the other would not use c groups

00:13:18,000 --> 00:13:21,040
we would need a lot of code and it would

00:13:19,890 --> 00:13:24,339
be you know

00:13:21,040 --> 00:13:25,810
the test matrix of just changing one

00:13:24,339 --> 00:13:28,750
little thing and systemd you would have

00:13:25,810 --> 00:13:29,860
to experiment and try it out on all the

00:13:28,750 --> 00:13:31,480
different platforms and write

00:13:29,860 --> 00:13:33,790
compatibility code for non SI group

00:13:31,480 --> 00:13:36,010
stuff we just blow up right it would be

00:13:33,790 --> 00:13:38,079
so much more complicated to contribute

00:13:36,010 --> 00:13:40,449
anything to Sicily to just change it

00:13:38,079 --> 00:13:42,720
that it's just a decision that upstream

00:13:40,449 --> 00:13:46,600
made that they are not going to do that

00:13:42,720 --> 00:13:48,610
now I say not portable is actually not a

00:13:46,600 --> 00:13:50,380
problem because we can use system D on

00:13:48,610 --> 00:13:52,540
Linux and system 5-minute elsewhere or

00:13:50,380 --> 00:13:54,160
something else elsewhere you know if

00:13:52,540 --> 00:13:56,470
there's a better in the system coming up

00:13:54,160 --> 00:13:59,260
for decay FreeBSD people they can adopt

00:13:56,470 --> 00:14:00,579
that in the mid term obviously there is

00:13:59,260 --> 00:14:01,959
some increased maintenance effort

00:14:00,579 --> 00:14:03,940
because we need to have a time period

00:14:01,959 --> 00:14:08,560
where as system v init scripts and

00:14:03,940 --> 00:14:10,149
system D service files and you know we

00:14:08,560 --> 00:14:12,339
just can't get around that

00:14:10,149 --> 00:14:14,079
right because whatever we end up

00:14:12,339 --> 00:14:17,019
switching to we need to have that time

00:14:14,079 --> 00:14:19,389
period so there's no way to get around

00:14:17,019 --> 00:14:22,089
that but the long-term situation

00:14:19,389 --> 00:14:24,220
I imagine personally will be alike non

00:14:22,089 --> 00:14:26,079
Linux box today so for example let's be

00:14:24,220 --> 00:14:27,940
honest I don't test my software that I

00:14:26,079 --> 00:14:29,079
maintain and Debian on K FreeBSD or

00:14:27,940 --> 00:14:31,389
heard at all

00:14:29,079 --> 00:14:33,730
I rely on people who actually use it on

00:14:31,389 --> 00:14:36,220
these platforms to send me bug reports

00:14:33,730 --> 00:14:38,199
and then I will gladly merge the patches

00:14:36,220 --> 00:14:40,569
they provide or look into the problem if

00:14:38,199 --> 00:14:42,399
they can't figure it out but it's

00:14:40,569 --> 00:14:44,860
handled best effort right if there is

00:14:42,399 --> 00:14:46,300
say 10 bug reports that have Linux

00:14:44,860 --> 00:14:48,250
specific problems I will handle those

00:14:46,300 --> 00:14:50,380
before I look at the first k freebsd

00:14:48,250 --> 00:14:52,240
problem it's just not a priority and i

00:14:50,380 --> 00:14:54,040
think that this is the only viable and

00:14:52,240 --> 00:14:56,740
realistic and pragmatic model that we

00:14:54,040 --> 00:15:00,819
can have for k freebsd maintenance at

00:14:56,740 --> 00:15:02,500
large so i say that's not a problem

00:15:00,819 --> 00:15:04,029
also i say that kernels are different

00:15:02,500 --> 00:15:05,740
and that's a good thing because the

00:15:04,029 --> 00:15:07,779
linux kernel provides c groups on all

00:15:05,740 --> 00:15:09,430
these nice features which the other

00:15:07,779 --> 00:15:10,990
kernels don't provide but then again the

00:15:09,430 --> 00:15:13,120
other kernels provide nice features for

00:15:10,990 --> 00:15:15,880
example if i were to install a key

00:15:13,120 --> 00:15:17,949
FreeBSD box i could probably use ZFS now

00:15:15,880 --> 00:15:19,860
i could also use that on linux set but

00:15:17,949 --> 00:15:22,720
that would be more complicated and stuff

00:15:19,860 --> 00:15:24,940
there's a feature that i can't have one

00:15:22,720 --> 00:15:27,819
lives which is PF like the packet filter

00:15:24,940 --> 00:15:29,980
on k freebsd and you know the the

00:15:27,819 --> 00:15:31,660
different kernels and the different

00:15:29,980 --> 00:15:33,490
distributions that we offered they are

00:15:31,660 --> 00:15:34,750
different and that's good we should keep

00:15:33,490 --> 00:15:37,600
the diversity

00:15:34,750 --> 00:15:39,850
now why not make Debian a good Linux

00:15:37,600 --> 00:15:41,680
distribution and a good cave FreeBSD and

00:15:39,850 --> 00:15:43,480
her distribution this does not include

00:15:41,680 --> 00:15:45,930
that we need to use the same init system

00:15:43,480 --> 00:15:48,520
on all of them also there's an asterisk

00:15:45,930 --> 00:15:50,530
behind that point because I only care

00:15:48,520 --> 00:15:52,240
about the good Linux part to be honest

00:15:50,530 --> 00:15:53,860
I'll leave it up to the others who are

00:15:52,240 --> 00:15:57,970
passionate in the cave FreeBSD and her

00:15:53,860 --> 00:16:00,910
part to make it good there right so

00:15:57,970 --> 00:16:02,770
debugging debugging is kind of an

00:16:00,910 --> 00:16:05,380
interesting issue because I think that

00:16:02,770 --> 00:16:08,440
many people are so used to running init

00:16:05,380 --> 00:16:10,240
scripts with SH - X and see what it

00:16:08,440 --> 00:16:12,970
actually does and where it goes wrong

00:16:10,240 --> 00:16:15,250
and that's just an issue that we you

00:16:12,970 --> 00:16:17,470
won't have to do with system D it's not

00:16:15,250 --> 00:16:19,240
that you cannot do it it's you won't

00:16:17,470 --> 00:16:21,910
have to because all the issues that you

00:16:19,240 --> 00:16:24,250
would typically debug with SH - X

00:16:21,910 --> 00:16:26,830
systemctl status will actually tell you

00:16:24,250 --> 00:16:28,660
you can actually see what command system

00:16:26,830 --> 00:16:30,880
they try to start to bring up the demand

00:16:28,660 --> 00:16:33,580
you will see that the exit code with

00:16:30,880 --> 00:16:36,880
which they exited you can see the log

00:16:33,580 --> 00:16:38,920
output off the demonstrated Emin because

00:16:36,880 --> 00:16:40,540
it you know locks into a weird file

00:16:38,920 --> 00:16:41,560
that's not set up properly and you can't

00:16:40,540 --> 00:16:43,540
catch the standard error

00:16:41,560 --> 00:16:46,720
that's just all things that will not

00:16:43,540 --> 00:16:48,910
happen in system D now in case you

00:16:46,720 --> 00:16:50,830
actually need to debug something that is

00:16:48,910 --> 00:16:52,990
you know in early boot or somewhere

00:16:50,830 --> 00:16:55,180
where systemctl status won't help you

00:16:52,990 --> 00:16:57,310
can always boot with the kernel

00:16:55,180 --> 00:16:59,740
parameter system did lock level equals

00:16:57,310 --> 00:17:01,480
debug on your kernel command line and it

00:16:59,740 --> 00:17:04,180
will increase the debug log level and

00:17:01,480 --> 00:17:07,329
just log all the stuff interestingly as

00:17:04,180 --> 00:17:09,459
was mentioned in two talks already the

00:17:07,329 --> 00:17:11,380
journal will include log messages from

00:17:09,459 --> 00:17:12,910
the early boot so you will actually get

00:17:11,380 --> 00:17:15,910
a much better picture of what is

00:17:12,910 --> 00:17:18,040
happening and all the stuff that is

00:17:15,910 --> 00:17:20,770
happening in system D has timeouts which

00:17:18,040 --> 00:17:22,240
are as far as I know 90 seconds and

00:17:20,770 --> 00:17:24,160
afterwards you will just get rescue

00:17:22,240 --> 00:17:26,319
shell right so in case there is really

00:17:24,160 --> 00:17:28,990
something that's really really stuck

00:17:26,319 --> 00:17:30,520
like a device not appearing but it needs

00:17:28,990 --> 00:17:31,810
to appear like your root filesystem is

00:17:30,520 --> 00:17:33,190
not there because you made a mistake in

00:17:31,810 --> 00:17:34,990
configuration you will get a rescue

00:17:33,190 --> 00:17:36,520
shell and can try to fix it and then you

00:17:34,990 --> 00:17:37,620
know put into your system and actually

00:17:36,520 --> 00:17:39,610
fix it properly

00:17:37,620 --> 00:17:41,350
some people were under the impression

00:17:39,610 --> 00:17:43,000
that in system D everything is

00:17:41,350 --> 00:17:44,380
implemented in C so you would need to

00:17:43,000 --> 00:17:46,300
debug the C source code and that's

00:17:44,380 --> 00:17:48,250
complicated more complicated than shell

00:17:46,300 --> 00:17:50,530
I don't necessarily

00:17:48,250 --> 00:17:53,230
three but looking at the C code is I

00:17:50,530 --> 00:17:55,210
wrote rarely required I would actually

00:17:53,230 --> 00:17:57,010
say it's never required but I didn't

00:17:55,210 --> 00:17:59,770
want to put it on the slides because

00:17:57,010 --> 00:18:02,290
that's you know too hard a statement I

00:17:59,770 --> 00:18:04,540
have in the entire history of debugging

00:18:02,290 --> 00:18:07,260
boot problems with system D I think

00:18:04,540 --> 00:18:09,550
looked at the source code once and I

00:18:07,260 --> 00:18:11,020
can't imagine that for any of you it's

00:18:09,550 --> 00:18:14,110
gonna be required so that's not a

00:18:11,020 --> 00:18:16,360
concern also what's interesting is that

00:18:14,110 --> 00:18:18,370
you can if you have some race conditions

00:18:16,360 --> 00:18:19,690
in your boot or you're not quite aware

00:18:18,370 --> 00:18:21,640
of the order in which things are

00:18:19,690 --> 00:18:23,440
happening and you want to have a tight

00:18:21,640 --> 00:18:25,270
grasp on that you can boot with system

00:18:23,440 --> 00:18:27,580
did confirm under Scott spawn equals one

00:18:25,270 --> 00:18:29,950
and you can say yes or no to each and

00:18:27,580 --> 00:18:31,780
every service when starts and that might

00:18:29,950 --> 00:18:38,080
help you out with your specific problem

00:18:31,780 --> 00:18:39,250
also in newer versions actually in 204

00:18:38,080 --> 00:18:41,710
only which is currently in Debian

00:18:39,250 --> 00:18:43,450
experimental there is a thing called

00:18:41,710 --> 00:18:44,830
debug shell which you can enable and

00:18:43,450 --> 00:18:48,160
then you can switch to a debug shell

00:18:44,830 --> 00:18:50,590
very early in the early boot some people

00:18:48,160 --> 00:18:51,880
were afraid of cycles like you have all

00:18:50,590 --> 00:18:53,440
these dependencies and there might be a

00:18:51,880 --> 00:18:55,450
dependency cycle in there and then your

00:18:53,440 --> 00:18:57,160
system might be broken but that doesn't

00:18:55,450 --> 00:19:00,100
happen because cycles are broken

00:18:57,160 --> 00:19:01,540
automatically by system D so whenever

00:19:00,100 --> 00:19:03,700
there's a cycle gets resolved in some

00:19:01,540 --> 00:19:06,040
way which might obviously not be the

00:19:03,700 --> 00:19:07,510
best way it might not actually solve the

00:19:06,040 --> 00:19:09,030
problem but at least it will boot and

00:19:07,510 --> 00:19:12,190
then you can actually fix the problem

00:19:09,030 --> 00:19:14,080
also if all else fails you can just boot

00:19:12,190 --> 00:19:17,590
with system D data unit equals rescue

00:19:14,080 --> 00:19:20,110
the target and all these tips and tricks

00:19:17,590 --> 00:19:23,230
I just gave are also presented in a nice

00:19:20,110 --> 00:19:27,130
fashion on the free desktop wiki on the

00:19:23,230 --> 00:19:28,840
link I give here so there's really a lot

00:19:27,130 --> 00:19:31,270
of documentation available on how to

00:19:28,840 --> 00:19:33,460
debug all these issues and you know I'm

00:19:31,270 --> 00:19:36,040
confident that debugging is just as easy

00:19:33,460 --> 00:19:40,300
if not easier than with the current init

00:19:36,040 --> 00:19:42,640
system we have now I have one more slide

00:19:40,300 --> 00:19:44,440
that I just want to get out there why we

00:19:42,640 --> 00:19:45,940
would need to switch to system D because

00:19:44,440 --> 00:19:48,070
that wasn't clear to some people in the

00:19:45,940 --> 00:19:49,330
survey but it's not a top concern so

00:19:48,070 --> 00:19:52,300
let's just go over that quickly and then

00:19:49,330 --> 00:19:54,280
we can ask answer your questions system

00:19:52,300 --> 00:19:57,130
D provides a reliable and clean service

00:19:54,280 --> 00:19:58,720
management so it actually has a defined

00:19:57,130 --> 00:20:00,370
environment it does not leak your stuff

00:19:58,720 --> 00:20:02,390
that you use as an administrator in your

00:20:00,370 --> 00:20:04,310
shell into the services

00:20:02,390 --> 00:20:05,780
we can finally introspect all the

00:20:04,310 --> 00:20:07,850
services we can look at the status we

00:20:05,780 --> 00:20:08,360
can you know clearly stop them all that

00:20:07,850 --> 00:20:10,970
kind of stuff

00:20:08,360 --> 00:20:12,710
we have beautifully simple service files

00:20:10,970 --> 00:20:14,510
which are the equivalent of an init

00:20:12,710 --> 00:20:15,860
script just look at a few of them and

00:20:14,510 --> 00:20:17,480
you will see that they're really simple

00:20:15,860 --> 00:20:20,420
to understand for each and every one of

00:20:17,480 --> 00:20:23,180
you that will make maintenance cost a

00:20:20,420 --> 00:20:23,780
lot less in the future it has better

00:20:23,180 --> 00:20:27,980
hot-plug

00:20:23,780 --> 00:20:29,990
think of laptops especially but in my

00:20:27,980 --> 00:20:32,150
case I also use system D on a Raspberry

00:20:29,990 --> 00:20:33,710
Pi I use it on all my servers and all my

00:20:32,150 --> 00:20:36,410
virtual machines it works beautifully

00:20:33,710 --> 00:20:38,660
everywhere and last but not least we

00:20:36,410 --> 00:20:40,340
will eventually arrive at a unified in a

00:20:38,660 --> 00:20:42,470
system across the Linux distros or at

00:20:40,340 --> 00:20:44,720
least across the most important ones so

00:20:42,470 --> 00:20:46,850
that actually lowers the barrier for new

00:20:44,720 --> 00:20:48,860
people to Debian because you know some

00:20:46,850 --> 00:20:50,180
people might consider switching from

00:20:48,860 --> 00:20:51,770
their current distribution but then they

00:20:50,180 --> 00:20:53,480
say oh it's all different it uses this

00:20:51,770 --> 00:20:55,130
old init system I don't know how to deal

00:20:53,480 --> 00:20:57,200
with that you know think of all the

00:20:55,130 --> 00:20:59,420
people that will actually grow up with

00:20:57,200 --> 00:21:04,190
system lis there's already people I talk

00:20:59,420 --> 00:21:06,890
to that only know system B alright so

00:21:04,190 --> 00:21:08,720
that's the slight part of my talk as

00:21:06,890 --> 00:21:10,820
always please talk to us if you have any

00:21:08,720 --> 00:21:12,200
questions there's an IRC Channel there's

00:21:10,820 --> 00:21:13,490
a mailing list there's my blog that you

00:21:12,200 --> 00:21:16,070
should follow if that kind of thing

00:21:13,490 --> 00:21:23,920
interests you and now I'll be happy to

00:21:16,070 --> 00:21:23,920
answer your questions question

00:21:27,270 --> 00:21:37,419
well III think you should explain why we

00:21:32,230 --> 00:21:39,400
should adopt systemd as a default why we

00:21:37,419 --> 00:21:42,909
can't keep as a current situation where

00:21:39,400 --> 00:21:46,179
we have cs5 in it by default on system

00:21:42,909 --> 00:21:47,350
Diaz are not Janet IVA right so as far

00:21:46,179 --> 00:21:49,330
as I understood you the question is why

00:21:47,350 --> 00:21:50,919
would you why would we should why we

00:21:49,330 --> 00:21:53,380
should make it the default and not just

00:21:50,919 --> 00:21:54,490
have both of them supported and the

00:21:53,380 --> 00:21:56,350
answer is pretty obvious because

00:21:54,490 --> 00:21:58,779
maintenance of two different in systems

00:21:56,350 --> 00:22:00,490
is kind of complicated and we can accept

00:21:58,779 --> 00:22:02,799
that in the short term but we will not

00:22:00,490 --> 00:22:04,779
accept that in the long term many people

00:22:02,799 --> 00:22:06,700
have actually been asking me when can we

00:22:04,779 --> 00:22:08,950
finally make some decision in that area

00:22:06,700 --> 00:22:10,450
just because you know we want to have

00:22:08,950 --> 00:22:12,970
one init system that we can concentrate

00:22:10,450 --> 00:22:14,559
and focus on and not multiple init

00:22:12,970 --> 00:22:16,899
systems that are kind of supported and

00:22:14,559 --> 00:22:19,330
living there at the same time yes but

00:22:16,899 --> 00:22:21,279
you've already suggested that if we're

00:22:19,330 --> 00:22:23,289
going to continue to support non Linux

00:22:21,279 --> 00:22:25,210
kernels that the way you suggest we do

00:22:23,289 --> 00:22:27,250
that is by supporting more than one init

00:22:25,210 --> 00:22:30,220
system so for the average maintainer of

00:22:27,250 --> 00:22:32,260
a package in Debian it will never be the

00:22:30,220 --> 00:22:33,760
case that system D is the only thing

00:22:32,260 --> 00:22:36,039
that they're able to support unless

00:22:33,760 --> 00:22:38,529
system D chooses to also support the

00:22:36,039 --> 00:22:41,289
other kernels so it seems to me that

00:22:38,529 --> 00:22:43,750
you're just moving you know this burden

00:22:41,289 --> 00:22:46,149
of responsibility away and you know

00:22:43,750 --> 00:22:48,100
leaving it in the hands of every package

00:22:46,149 --> 00:22:51,100
maintainer and Debian to have to deal

00:22:48,100 --> 00:22:53,830
with multiple in its systems instead of

00:22:51,100 --> 00:22:55,120
dealing with this somehow closer to the

00:22:53,830 --> 00:22:56,950
maintenance of the internet systems

00:22:55,120 --> 00:22:59,140
themselves I don't know if that's

00:22:56,950 --> 00:23:01,149
necessarily you know a good choice or a

00:22:59,140 --> 00:23:03,730
bad choice but you are clearly making a

00:23:01,149 --> 00:23:07,090
conscious decision to shift a burden of

00:23:03,730 --> 00:23:09,100
work which will never go away yes so

00:23:07,090 --> 00:23:12,309
that's a hard problem and question to

00:23:09,100 --> 00:23:14,460
answer I don't have a silver bullet for

00:23:12,309 --> 00:23:17,289
that there have been approaches of

00:23:14,460 --> 00:23:19,350
having a converter that would convert

00:23:17,289 --> 00:23:23,590
very simple service files into

00:23:19,350 --> 00:23:26,049
equivalent init scripts I have seen that

00:23:23,590 --> 00:23:28,029
work and I don't think it's gonna work

00:23:26,049 --> 00:23:30,340
unless somebody really spends a lot of

00:23:28,029 --> 00:23:32,470
time on that it was a Summer of Code

00:23:30,340 --> 00:23:37,290
project that is not in a viable state at

00:23:32,470 --> 00:23:40,020
all I do agree that you know some

00:23:37,290 --> 00:23:41,790
so some people were mentioning that we

00:23:40,020 --> 00:23:44,430
still have K FreeBSD and we still need

00:23:41,790 --> 00:23:47,160
to keep D init scripts around but they

00:23:44,430 --> 00:23:49,770
will not be as important anymore as they

00:23:47,160 --> 00:23:52,320
are before because our major or most

00:23:49,770 --> 00:23:54,150
important platform which is Linux is

00:23:52,320 --> 00:23:56,730
running on system D so the issues that

00:23:54,150 --> 00:24:00,690
are more pressing now will become less

00:23:56,730 --> 00:24:02,760
of an issue later you know I I I totally

00:24:00,690 --> 00:24:05,340
agree I don't I can't make it all go

00:24:02,760 --> 00:24:09,840
away but I think that's a good

00:24:05,340 --> 00:24:15,860
compromise to have you know that's all I

00:24:09,840 --> 00:24:15,860
can say sorry more questions over here

00:24:18,020 --> 00:24:25,580
somebody in the room Microsoft

00:24:36,590 --> 00:24:42,180
hello yeah is somebody in this room

00:24:39,300 --> 00:24:52,020
using K FreeBSD in production really for

00:24:42,180 --> 00:24:53,730
something serious anyone okay yeah so if

00:24:52,020 --> 00:24:55,710
you actually look at the popularity

00:24:53,730 --> 00:24:57,210
contest numbers and I realize that they

00:24:55,710 --> 00:24:58,470
are skewed and you know opt in and all

00:24:57,210 --> 00:25:01,530
that stuff you will see that there is

00:24:58,470 --> 00:25:04,500
about 70 installations of decay FreeBSD

00:25:01,530 --> 00:25:07,500
kernel whereas there are about 100,000

00:25:04,500 --> 00:25:08,490
installations of the Linux kernel you

00:25:07,500 --> 00:25:10,260
know just to give you some perspective

00:25:08,490 --> 00:25:16,760
I'm not saying that's the actual usage

00:25:10,260 --> 00:25:16,760
numbers question over here

00:25:18,960 --> 00:25:23,250
yeah so what is the what is the status

00:25:22,410 --> 00:25:26,100
of systemd

00:25:23,250 --> 00:25:28,530
package and all the dependencies in in

00:25:26,100 --> 00:25:31,020
wheezy and Jessie is it in any sort of

00:25:28,530 --> 00:25:35,040
usable state right now okay

00:25:31,020 --> 00:25:37,890
Saudi state in Weezy which is our latest

00:25:35,040 --> 00:25:39,690
stable release is pretty good I would

00:25:37,890 --> 00:25:41,820
say you can use system D there the

00:25:39,690 --> 00:25:45,060
version in there is 44 which is quite

00:25:41,820 --> 00:25:49,380
old by now that's expected kind of a

00:25:45,060 --> 00:25:51,540
stable release we have the a much more

00:25:49,380 --> 00:25:53,010
recent version which is version 204

00:25:51,540 --> 00:25:55,860
there's there was a huge gap because of

00:25:53,010 --> 00:25:57,750
the UDF merge we have version 214 debian

00:25:55,860 --> 00:26:00,150
experimental and that is mostly because

00:25:57,750 --> 00:26:02,310
it was a big change because you know

00:26:00,150 --> 00:26:04,230
digit of package was maintained

00:26:02,310 --> 00:26:06,630
separately and now it's not anymore it's

00:26:04,230 --> 00:26:07,980
team maintained by now so we have that

00:26:06,630 --> 00:26:10,020
in experimental we need to get a

00:26:07,980 --> 00:26:11,910
transition slot for Lib beautif

00:26:10,020 --> 00:26:14,250
zero tulip you'd have one before we can

00:26:11,910 --> 00:26:15,840
upload it to unstable that request is

00:26:14,250 --> 00:26:18,270
already filed but there has not been any

00:26:15,840 --> 00:26:20,040
response so far but as soon as that

00:26:18,270 --> 00:26:21,840
happens and I'm fairly confident that

00:26:20,040 --> 00:26:25,050
from our side it can happen pretty

00:26:21,840 --> 00:26:26,730
quickly we will have system D 204 in a

00:26:25,050 --> 00:26:28,680
reasonable shape and of course all the

00:26:26,730 --> 00:26:30,930
dependencies and everything that you

00:26:28,680 --> 00:26:33,510
need to run it as I already mentioned

00:26:30,930 --> 00:26:35,450
I'm running system D for over a year in

00:26:33,510 --> 00:26:39,780
production on all my machines

00:26:35,450 --> 00:26:40,560
so it's certainly usable in Debian does

00:26:39,780 --> 00:26:47,850
that answer your question

00:26:40,560 --> 00:26:50,580
alright so you said you looked at the

00:26:47,850 --> 00:26:52,530
dependency set and you've made a list

00:26:50,580 --> 00:26:54,480
which we don't have here but we can get

00:26:52,530 --> 00:26:56,010
have a look and it wasn't excessive it

00:26:54,480 --> 00:26:59,520
was bigger but that's probably fair

00:26:56,010 --> 00:27:01,980
enough but my understanding did you look

00:26:59,520 --> 00:27:05,480
at the build dependency list because I

00:27:01,980 --> 00:27:08,460
know the recent Fedora arm 64 bootstrap

00:27:05,480 --> 00:27:10,800
complained a lot about 400 bill

00:27:08,460 --> 00:27:12,240
dependencies which is a problem for

00:27:10,800 --> 00:27:13,860
those of us that do boot strapping knows

00:27:12,240 --> 00:27:17,400
that's a relatively minority interest

00:27:13,860 --> 00:27:19,320
but it is another problem bootstrapping

00:27:17,400 --> 00:27:21,030
is already very painful and if you can't

00:27:19,320 --> 00:27:23,100
get in it system until you built 400

00:27:21,030 --> 00:27:24,780
packages that's kind of annoying

00:27:23,100 --> 00:27:26,820
so but I don't know how bad the problem

00:27:24,780 --> 00:27:28,710
is with upstart to be fair and so we

00:27:26,820 --> 00:27:29,850
should look at both of those yes it's

00:27:28,710 --> 00:27:31,169
it's something I'd like to know the

00:27:29,850 --> 00:27:33,419
answers to and I haven't looked in

00:27:31,169 --> 00:27:36,150
detail yet a lot of complaining from mr.

00:27:33,419 --> 00:27:39,450
masters okay I have not looked in detail

00:27:36,150 --> 00:27:41,250
at debility penances for my personal

00:27:39,450 --> 00:27:42,780
bills and P builder it looks like a

00:27:41,250 --> 00:27:45,600
reasonable set of dependencies that are

00:27:42,780 --> 00:27:47,190
pulled in you know if there is any

00:27:45,600 --> 00:27:48,900
concern about that

00:27:47,190 --> 00:27:50,910
I'm sure upstream would be happy to help

00:27:48,900 --> 00:27:51,770
you out with that in fact Leonard wants

00:27:50,910 --> 00:27:54,630
to say something

00:27:51,770 --> 00:27:55,679
so it's its usual stuff outta control to

00:27:54,630 --> 00:27:57,330
making all these things which shouldn't

00:27:55,679 --> 00:27:59,490
be problem the problem that they're

00:27:57,330 --> 00:28:01,350
probably we're complaining about was we

00:27:59,490 --> 00:28:04,289
build all our man page with stock book

00:28:01,350 --> 00:28:05,669
and that pulls on all the XSL style

00:28:04,289 --> 00:28:08,340
sheets and things like that but that's

00:28:05,669 --> 00:28:17,610
actually optional it's just that the RPM

00:28:08,340 --> 00:28:19,260
always builded with it so and yeah yeah

00:28:17,610 --> 00:28:21,150
so just to clarify I guess - the

00:28:19,260 --> 00:28:22,980
problems much worse in Fedora because

00:28:21,150 --> 00:28:25,380
there's no cross building and there's no

00:28:22,980 --> 00:28:27,330
bootstrap minimal building mechanism yet

00:28:25,380 --> 00:28:29,580
so and we do have both of those things

00:28:27,330 --> 00:28:33,799
sort of nearly finished in Debian so and

00:28:29,580 --> 00:28:38,669
that probably makes most of it go away

00:28:33,799 --> 00:28:42,090
and how hard is for someone to try it

00:28:38,669 --> 00:28:44,400
out let's say I want to take a look at

00:28:42,090 --> 00:28:47,370
the thing as you say you are using for a

00:28:44,400 --> 00:28:49,980
year in production but if I want to try

00:28:47,370 --> 00:28:52,799
it out is it possible for me to install

00:28:49,980 --> 00:28:56,039
it and maybe just replace the kernel in

00:28:52,799 --> 00:28:57,809
it yes in fact that's just how you do it

00:28:56,039 --> 00:28:59,309
so if you want to try it out if anybody

00:28:57,809 --> 00:29:02,370
wants to try it out you just up get

00:28:59,309 --> 00:29:04,860
install system the ideally from

00:29:02,370 --> 00:29:08,070
experimental it's not as bad as it

00:29:04,860 --> 00:29:11,789
sounds and then you will just modify

00:29:08,070 --> 00:29:14,010
your kernel command line to include in

00:29:11,789 --> 00:29:15,419
it equal slash bin slash system D and

00:29:14,010 --> 00:29:16,620
you will put up insistently and if you

00:29:15,419 --> 00:29:18,480
decide you don't want to put up

00:29:16,620 --> 00:29:19,650
insistently anymore just you know remove

00:29:18,480 --> 00:29:21,030
that from your kernel command and you

00:29:19,650 --> 00:29:23,309
can obviously do that with the Edit

00:29:21,030 --> 00:29:24,990
function and grub on a boot / boot basis

00:29:23,309 --> 00:29:26,880
so it's really really simple to try it

00:29:24,990 --> 00:29:28,320
out can I just comment on that for

00:29:26,880 --> 00:29:29,760
experience so I've been trying both

00:29:28,320 --> 00:29:31,919
upstart and system D on my laptop

00:29:29,760 --> 00:29:34,409
recently so the path of least resistance

00:29:31,919 --> 00:29:36,000
is just you just install system D and

00:29:34,409 --> 00:29:38,010
you don't even change the D

00:29:36,000 --> 00:29:40,080
fault line of the colonel it's just boot

00:29:38,010 --> 00:29:41,790
and in your grub or whatever you just

00:29:40,080 --> 00:29:43,410
edit the common line of the colonel and

00:29:41,790 --> 00:29:46,440
you I add in it

00:29:43,410 --> 00:29:48,600
ego equal slash bin slash system D yes

00:29:46,440 --> 00:29:50,430
and if you forget about it the next a

00:29:48,600 --> 00:29:53,190
boot you will get back on to system file

00:29:50,430 --> 00:29:56,370
so that's really easy to try out and not

00:29:53,190 --> 00:29:57,750
let's say not scary at all yes you will

00:29:56,370 --> 00:29:59,880
just notice that your next book will be

00:29:57,750 --> 00:30:04,770
much slower and then you think oh yeah I

00:29:59,880 --> 00:30:14,010
need to add that flag okay more

00:30:04,770 --> 00:30:16,410
questions one more over here I think

00:30:14,010 --> 00:30:19,200
that not having system D as default has

00:30:16,410 --> 00:30:21,000
some drawbacks in the barracks affecting

00:30:19,200 --> 00:30:26,220
system D for example if you are using

00:30:21,000 --> 00:30:28,500
event two on disk you need I didn't wide

00:30:26,220 --> 00:30:31,290
maybe it's fixed invocation experimental

00:30:28,500 --> 00:30:33,750
but the one in insta border you you

00:30:31,290 --> 00:30:35,700
cannot bother with this setup but it is

00:30:33,750 --> 00:30:37,500
because of the integration of system D

00:30:35,700 --> 00:30:39,720
in Debian is not complete we are still

00:30:37,500 --> 00:30:43,320
using a lot of init script and Advent to

00:30:39,720 --> 00:30:46,290
is set up by the Debian init script yeah

00:30:43,320 --> 00:30:48,630
so crypt disk the crib setup is being

00:30:46,290 --> 00:30:52,170
worked I see in the remaining list but

00:30:48,630 --> 00:30:54,780
it's it's problematic to to not having

00:30:52,170 --> 00:30:58,320
more people working on system day

00:30:54,780 --> 00:31:00,930
because we we don't use it as a default

00:30:58,320 --> 00:31:02,460
yes so the DL BM issue that you're

00:31:00,930 --> 00:31:05,130
speaking of is a bit of a pain point

00:31:02,460 --> 00:31:06,810
I've been trying to debug this in the

00:31:05,130 --> 00:31:09,510
last couple of days and I'm working with

00:31:06,810 --> 00:31:11,040
somebody who actually can fairly

00:31:09,510 --> 00:31:13,950
regularly reproduce their problem

00:31:11,040 --> 00:31:15,510
actually because in you you can okay

00:31:13,950 --> 00:31:17,580
great so maybe we can have a look

00:31:15,510 --> 00:31:20,580
together and fix it because I couldn't

00:31:17,580 --> 00:31:22,650
reproduce it up until now but I'm also

00:31:20,580 --> 00:31:24,690
using crypto and I have a few machines

00:31:22,650 --> 00:31:26,460
where I have lbm so in general this

00:31:24,690 --> 00:31:29,160
works it's just very specific setups

00:31:26,460 --> 00:31:33,930
that don't work more questions so I'm

00:31:29,160 --> 00:31:37,830
really a question for me from IRC so the

00:31:33,930 --> 00:31:39,750
question is that instead of breaking the

00:31:37,830 --> 00:31:42,510
opinion loops during boot can it be made

00:31:39,750 --> 00:31:44,310
to reject to install switch dependency

00:31:42,510 --> 00:31:48,710
loops when stalling operating package

00:31:44,310 --> 00:31:48,710
like system VRC is doing

00:31:48,720 --> 00:32:01,470
upstream wants to answer that other

00:31:55,440 --> 00:32:03,750
microphone maybe uh now it works so

00:32:01,470 --> 00:32:06,360
that's actually a pretty difficult

00:32:03,750 --> 00:32:07,770
because we only check for dependencies

00:32:06,360 --> 00:32:09,960
between the staffs you actually start

00:32:07,770 --> 00:32:12,090
right we don't really care if the entire

00:32:09,960 --> 00:32:13,950
network of dependencies you could

00:32:12,090 --> 00:32:15,810
theoretically have has any loops or

00:32:13,950 --> 00:32:17,550
cycles and we only care about the

00:32:15,810 --> 00:32:19,290
transactions that actually started and

00:32:17,550 --> 00:32:21,030
those of course we only know at boot

00:32:19,290 --> 00:32:22,290
time when we know which devices have

00:32:21,030 --> 00:32:25,620
shown up what you actually wanted to

00:32:22,290 --> 00:32:27,270
boot into so it's it's a feature of

00:32:25,620 --> 00:32:29,280
system D that you can have as many

00:32:27,270 --> 00:32:30,510
cycles as you want as long as you don't

00:32:29,280 --> 00:32:34,530
have them and they're the stuff you

00:32:30,510 --> 00:32:37,130
actually try to execute all right so

00:32:34,530 --> 00:32:37,130
more questions

00:32:41,450 --> 00:32:47,360
yes okay so this is probably not even

00:32:45,020 --> 00:32:52,640
for you but something that I'm here

00:32:47,360 --> 00:32:54,920
asking myself clearly either systemd or

00:32:52,640 --> 00:32:58,820
upstart is a is a better thing than

00:32:54,920 --> 00:33:01,400
system V so but it's not clear to me who

00:32:58,820 --> 00:33:03,590
is the one who can make that decision on

00:33:01,400 --> 00:33:05,150
attacking constant point so usually in

00:33:03,590 --> 00:33:07,130
Devon they maintain I take makes a

00:33:05,150 --> 00:33:10,520
decision and probably I'm asking this

00:33:07,130 --> 00:33:12,050
too early so but in this case I don't

00:33:10,520 --> 00:33:14,540
think there is anything in the eye that

00:33:12,050 --> 00:33:16,760
hard codes system V in it is just

00:33:14,540 --> 00:33:19,040
essential yes in the package maybe I'm

00:33:16,760 --> 00:33:21,650
wrong and I would like to someone to

00:33:19,040 --> 00:33:23,900
correct me so in this case I it's not

00:33:21,650 --> 00:33:29,120
clear to me how we're going to make the

00:33:23,900 --> 00:33:31,070
decision and for for myself I'm I don't

00:33:29,120 --> 00:33:32,810
really care much about both systems and

00:33:31,070 --> 00:33:34,910
I think most of the people that get

00:33:32,810 --> 00:33:37,340
involved in the frame yours don't can't

00:33:34,910 --> 00:33:40,640
Kenda also make an informed decision

00:33:37,340 --> 00:33:42,590
about that and I would like to just you

00:33:40,640 --> 00:33:44,660
see how we're going to take the decision

00:33:42,590 --> 00:33:46,160
if if the system D and the upstart

00:33:44,660 --> 00:33:49,580
maintain is going to reach a conclusion

00:33:46,160 --> 00:33:52,820
or something else so I think it's

00:33:49,580 --> 00:33:57,560
unlikely that the to maintain your teams

00:33:52,820 --> 00:33:59,990
will reach a conclusion but I actually

00:33:57,560 --> 00:34:02,570
I'm just going to work on how we can

00:33:59,990 --> 00:34:04,460
technically make that decision in the

00:34:02,570 --> 00:34:05,690
next few days and then you know I can

00:34:04,460 --> 00:34:07,310
just propose it and we'll see what

00:34:05,690 --> 00:34:11,800
happens if somebody else wants to answer

00:34:07,310 --> 00:34:14,450
that please go ahead I can try to I

00:34:11,800 --> 00:34:17,210
think that what we're still leaking

00:34:14,450 --> 00:34:18,919
lacking is a detailed plan of what it

00:34:17,210 --> 00:34:21,440
means to make it the default I mean what

00:34:18,919 --> 00:34:29,630
in terms of what other packages need

00:34:21,440 --> 00:34:37,840
changes if any then probably well the

00:34:29,630 --> 00:34:37,840
way we okay try to answer that

00:34:37,870 --> 00:34:45,919
[Applause]

00:34:39,379 --> 00:34:45,919
no but what will likely happen is that

00:34:46,550 --> 00:34:50,669
it will if we go to a technical term

00:34:49,050 --> 00:34:53,099
community Technical Committee at some

00:34:50,669 --> 00:34:55,679
point that's really likely because it's

00:34:53,099 --> 00:34:58,050
we would be quite surprised you cannot

00:34:55,679 --> 00:34:59,849
find one developer we'll bring it to

00:34:58,050 --> 00:35:07,160
Technical Committee and it just takes

00:34:59,849 --> 00:35:10,020
one so also DPL yeah so the question is

00:35:07,160 --> 00:35:11,400
when when is the best time to bring it

00:35:10,020 --> 00:35:13,710
to the Technical Committee

00:35:11,400 --> 00:35:17,490
and I don't have a clear answer on that

00:35:13,710 --> 00:35:18,809
so maybe media wants to answer we

00:35:17,490 --> 00:35:21,180
actually talked about this a little bit

00:35:18,809 --> 00:35:23,339
in the tech committee buff the day

00:35:21,180 --> 00:35:24,480
before yesterday I guess it was and I

00:35:23,339 --> 00:35:26,250
think you're the one who asked the

00:35:24,480 --> 00:35:27,960
question about you know what what do we

00:35:26,250 --> 00:35:29,880
actually need to do to bring it to that

00:35:27,960 --> 00:35:31,680
point and I think the advice you were

00:35:29,880 --> 00:35:33,510
given was probably very good which is to

00:35:31,680 --> 00:35:35,369
go look at the thing that we're

00:35:33,510 --> 00:35:37,740
currently discussing around limp JPEG

00:35:35,369 --> 00:35:39,240
because what it really comes down to us

00:35:37,740 --> 00:35:40,920
for the committee to be able to make a

00:35:39,240 --> 00:35:42,900
decision we have to understand what the

00:35:40,920 --> 00:35:44,369
implications are for the rest of the

00:35:42,900 --> 00:35:47,460
work that happens in the distribution

00:35:44,369 --> 00:35:49,349
and that largely comes down to what are

00:35:47,460 --> 00:35:52,079
the set of dips that we're arguing about

00:35:49,349 --> 00:35:54,030
what packages need to be changed or

00:35:52,079 --> 00:35:56,700
updated what implications does this have

00:35:54,030 --> 00:35:59,369
for the Installer system and things like

00:35:56,700 --> 00:36:02,069
that and so when Lucas says you know we

00:35:59,369 --> 00:36:04,559
we sort of lack the the plan for you

00:36:02,069 --> 00:36:06,690
know what steps would be required to go

00:36:04,559 --> 00:36:08,940
from where we are now to the change that

00:36:06,690 --> 00:36:10,980
you'd like to see that's what has to get

00:36:08,940 --> 00:36:12,630
articulated and once that's articulated

00:36:10,980 --> 00:36:15,180
then we have a concrete thing that we're

00:36:12,630 --> 00:36:17,010
discussing and we're saying is this good

00:36:15,180 --> 00:36:18,720
is this bad are there problems other

00:36:17,010 --> 00:36:20,790
still questions that need to be answered

00:36:18,720 --> 00:36:23,520
and that's something I'm confident that

00:36:20,790 --> 00:36:25,349
you know the distribution as a whole and

00:36:23,520 --> 00:36:27,450
certainly the subsets of us that sit on

00:36:25,349 --> 00:36:29,220
the technical committee can wrestle with

00:36:27,450 --> 00:36:31,079
and try to make a good decision on but

00:36:29,220 --> 00:36:33,839
the problem right now is that it's all

00:36:31,079 --> 00:36:35,460
still sort of in the oh this is great oh

00:36:33,839 --> 00:36:37,890
this is great we got to do this now we

00:36:35,460 --> 00:36:38,830
ought to do that and it's not in the

00:36:37,890 --> 00:36:41,170
form of

00:36:38,830 --> 00:36:43,060
you know sort of do we pick this set of

00:36:41,170 --> 00:36:45,040
dips or that set of dips to carry

00:36:43,060 --> 00:36:46,740
forward with the distribution and that's

00:36:45,040 --> 00:36:49,210
the kind of thing that would make this a

00:36:46,740 --> 00:36:51,280
crisper decision for us to try and wrap

00:36:49,210 --> 00:36:54,460
our brains around I will I will just

00:36:51,280 --> 00:36:58,330
state upfront that I personally have you

00:36:54,460 --> 00:37:01,090
know I believe that the problem is that

00:36:58,330 --> 00:37:03,160
if the distribution decides to go

00:37:01,090 --> 00:37:05,740
forward with system D as a default that

00:37:03,160 --> 00:37:08,350
the attitude that you're currently

00:37:05,740 --> 00:37:10,300
putting forward about you know obviously

00:37:08,350 --> 00:37:12,910
we make Linux first and everything else

00:37:10,300 --> 00:37:14,980
a second-class citizen is something that

00:37:12,910 --> 00:37:16,290
many within Debian will have a very

00:37:14,980 --> 00:37:18,820
difficult time swallowing

00:37:16,290 --> 00:37:20,830
philosophically even if we all look at

00:37:18,820 --> 00:37:24,040
the numbers and go yeah I mean for

00:37:20,830 --> 00:37:27,100
practical standpoint that's right there

00:37:24,040 --> 00:37:29,890
is a big difference between sort of

00:37:27,100 --> 00:37:32,050
understanding and acknowledging that one

00:37:29,890 --> 00:37:35,530
of our kernels has the vast majority of

00:37:32,050 --> 00:37:37,000
the the user base and the difference

00:37:35,530 --> 00:37:38,770
between that and the sort of

00:37:37,000 --> 00:37:41,560
philosophical notion that we're trying

00:37:38,770 --> 00:37:44,440
to be supportive of you know

00:37:41,560 --> 00:37:45,910
alternatives and I think that the reason

00:37:44,440 --> 00:37:48,250
this is going to end up being such an

00:37:45,910 --> 00:37:50,700
incredibly difficult decision for the

00:37:48,250 --> 00:37:53,230
distribution to wrestle with is because

00:37:50,700 --> 00:37:55,540
what you would like to think of as being

00:37:53,230 --> 00:37:57,910
a simple technical choice is going to

00:37:55,540 --> 00:38:00,370
end up being a hugely philosophical

00:37:57,910 --> 00:38:02,830
decision about the extent to which we

00:38:00,370 --> 00:38:08,350
continue to try and treat other kernels

00:38:02,830 --> 00:38:09,880
as first-class citizens so related to

00:38:08,350 --> 00:38:12,910
that I wonder

00:38:09,880 --> 00:38:14,560
last year in Jesum in the google Summer

00:38:12,910 --> 00:38:16,240
of Code someone tried out generating

00:38:14,560 --> 00:38:19,240
like your system file script from the

00:38:16,240 --> 00:38:21,400
system the service files so I know the

00:38:19,240 --> 00:38:23,890
project didn't go at that well but is

00:38:21,400 --> 00:38:26,980
the idea still viable or did you find

00:38:23,890 --> 00:38:27,880
any inherent limitation that makes the

00:38:26,980 --> 00:38:31,000
idea not viable

00:38:27,880 --> 00:38:33,490
so the problem as I see it is that in

00:38:31,000 --> 00:38:35,380
order to have support for the features

00:38:33,490 --> 00:38:37,210
that you can express in a system the

00:38:35,380 --> 00:38:39,280
service file you would essentially need

00:38:37,210 --> 00:38:42,810
to re-implement large parts of system D

00:38:39,280 --> 00:38:42,810
and that's not a good idea

00:38:44,930 --> 00:38:49,800
that you have maybe an 8020 rule or

00:38:47,730 --> 00:38:52,680
something to figure out what's easily

00:38:49,800 --> 00:38:55,170
implementable what's not so we have

00:38:52,680 --> 00:38:57,210
around a thousand init scripts and I've

00:38:55,170 --> 00:38:59,190
been currently and I haven't looked at

00:38:57,210 --> 00:39:01,290
the majority of those even I have looked

00:38:59,190 --> 00:39:02,820
at the ones that have the highest Popkin

00:39:01,290 --> 00:39:05,340
and that I use personally and that I

00:39:02,820 --> 00:39:09,290
think are important and those will not

00:39:05,340 --> 00:39:09,290
benefit from such a generator at all

00:39:11,720 --> 00:39:15,320
okay more questions

00:39:19,580 --> 00:39:25,530
so I guess this is it thanks Michael

00:39:23,660 --> 00:39:32,819
thank you very much

00:39:25,530 --> 00:39:32,819

YouTube URL: https://www.youtube.com/watch?v=-8N_IVSyiaY


