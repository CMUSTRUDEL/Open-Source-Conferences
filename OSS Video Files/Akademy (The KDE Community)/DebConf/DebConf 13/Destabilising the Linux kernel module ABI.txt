Title: Destabilising the Linux kernel module ABI
Publication date: 2017-11-29
Playlist: DebConf 13
Description: 
	by Ben Hutchings

At: DebConf13
https://debconf13.debconf.org/
Room: Second talk room
Scheduled start: 2013-08-15 14:30:00
Captions: 
	00:00:00,030 --> 00:00:09,410
welcome everybody Ben Hutchings also

00:00:04,920 --> 00:00:13,349
known as BW H will present this buff

00:00:09,410 --> 00:00:21,150
about the stabilizing the Linux kernel

00:00:13,349 --> 00:00:22,619
API okay so the basic problem is

00:00:21,150 --> 00:00:28,220
explained in the description of this

00:00:22,619 --> 00:00:28,220
talk which I've brought up here the

00:00:28,400 --> 00:00:34,829
kernel the upstream developers for Linux

00:00:32,880 --> 00:00:41,760
kernel do not attempt to maintain a

00:00:34,829 --> 00:00:44,470
stable API even for bug fixes we kind of

00:00:41,760 --> 00:00:45,950
try to keep the a bi-stable during the

00:00:44,470 --> 00:00:48,809
[Music]

00:00:45,950 --> 00:00:52,079
during a single stable release so

00:00:48,809 --> 00:00:55,350
security fixes and security fixes and

00:00:52,079 --> 00:01:00,090
point updates generally don't change the

00:00:55,350 --> 00:01:02,910
module IV I accept sums in very specific

00:01:00,090 --> 00:01:05,640
areas we don't think of treat modules

00:01:02,910 --> 00:01:07,409
will be affected even then it takes a

00:01:05,640 --> 00:01:11,430
lot of work to do that so the question

00:01:07,409 --> 00:01:17,310
is is that actually necessary could we

00:01:11,430 --> 00:01:20,790
just keep changing the ABI the package

00:01:17,310 --> 00:01:24,049
names for Linux kernel bills all

00:01:20,790 --> 00:01:27,000
incorporates an identifier for the ABI

00:01:24,049 --> 00:01:29,369
similarly to shared library packages and

00:01:27,000 --> 00:01:32,009
that's because if you build a extra

00:01:29,369 --> 00:01:35,130
modules package using module assistance

00:01:32,009 --> 00:01:37,439
for example that will have a dependency

00:01:35,130 --> 00:01:39,270
on a specific ABI and therefore we need

00:01:37,439 --> 00:01:49,640
to have a package name that identifies

00:01:39,270 --> 00:01:49,640
that ABI so if if we start changing the

00:01:50,930 --> 00:01:56,600
package names during a stable release

00:01:53,939 --> 00:02:01,950
there are some problems that good course

00:01:56,600 --> 00:02:05,460
and the purpose of this meeting then is

00:02:01,950 --> 00:02:09,509
to to try to figure out can we can we

00:02:05,460 --> 00:02:11,640
solve those problems as it turns out

00:02:09,509 --> 00:02:13,950
since I just since I

00:02:11,640 --> 00:02:15,879
[Music]

00:02:13,950 --> 00:02:17,650
proposed this event one of those

00:02:15,879 --> 00:02:25,930
problems has been solved

00:02:17,650 --> 00:02:35,519
officers very nice apt no longer amp

00:02:25,930 --> 00:02:35,519
will now auto remove older packages

00:03:11,760 --> 00:03:31,690
firmware packages never depend on really

00:03:28,359 --> 00:03:36,220
so if yo dependency on a virtual package

00:03:31,690 --> 00:03:37,389
that prevents any of the yes yes it

00:03:36,220 --> 00:03:40,299
would because how would you know which

00:03:37,389 --> 00:04:06,310
one could be yes okay so we need to get

00:03:40,299 --> 00:04:08,470
rid of those suggestion so I mean we

00:04:06,310 --> 00:04:11,069
need a bit more meter data for this

00:04:08,470 --> 00:04:11,069
actually

00:04:20,720 --> 00:04:35,360
just a different name so well I can't I

00:04:33,350 --> 00:04:39,650
can't understand why suggests would

00:04:35,360 --> 00:04:56,450
would prevent water removal unless you

00:04:39,650 --> 00:05:00,980
say that should should suggestions

00:04:56,450 --> 00:05:03,140
aren't also installed so then you would

00:05:00,980 --> 00:05:04,850
be manually installed as I've never

00:05:03,140 --> 00:05:06,920
email installed and then for they

00:05:04,850 --> 00:05:17,330
wouldn't they would never be auto

00:05:06,920 --> 00:05:19,669
removed anyway I mean another package

00:05:17,330 --> 00:05:23,720
could depend on it and you are removing

00:05:19,669 --> 00:05:29,120
this package but you have grown used to

00:05:23,720 --> 00:05:40,669
the suggestion established kind of

00:05:29,120 --> 00:05:43,090
tricky to see I mean it's a bit

00:05:40,669 --> 00:05:43,090
complicated

00:05:45,370 --> 00:05:56,030
yeah I could they could also forget it

00:05:51,729 --> 00:05:58,820
yet okay it's a complicated trade off

00:05:56,030 --> 00:06:01,550
and we are usually defaulting to not

00:05:58,820 --> 00:06:02,690
breaking user experience because yeah

00:06:01,550 --> 00:06:04,580
that's bad

00:06:02,690 --> 00:06:07,900
actually if you're depending on

00:06:04,580 --> 00:06:11,200
something and it gets all too removed so

00:06:07,900 --> 00:06:13,580
yeah okay so we are going to have to

00:06:11,200 --> 00:06:14,810
maybe get rid of those suggests Linux

00:06:13,580 --> 00:06:17,110
image which is I think it's a stupid

00:06:14,810 --> 00:06:20,300
suggestion in the first place because

00:06:17,110 --> 00:06:22,400
also two out of three modules are sure

00:06:20,300 --> 00:06:27,949
but I think that's point kind of covered

00:06:22,400 --> 00:06:31,129
by point B yeah yeah

00:06:27,949 --> 00:06:34,180
it's still more work that's just what I

00:06:31,129 --> 00:06:34,180
was trying to say

00:06:42,630 --> 00:06:53,850
okay so any bright ideas so this is in a

00:06:50,450 --> 00:07:01,950
quiz this document on gobby under DEFCON

00:06:53,850 --> 00:07:14,700
13 above linux - module - ABI so I can

00:07:01,950 --> 00:07:17,730
see if people found it already yeah so

00:07:14,700 --> 00:07:24,720
so the other problems yeah three modules

00:07:17,730 --> 00:07:27,750
need to be rebuilt which DKMS can do

00:07:24,720 --> 00:07:30,060
modular system does not do and

00:07:27,750 --> 00:07:31,230
pratically can't because it run because

00:07:30,060 --> 00:07:33,750
that would involve installing packages

00:07:31,230 --> 00:07:41,580
while installing another package which

00:07:33,750 --> 00:07:54,870
doesn't work so I don't know if there's

00:07:41,580 --> 00:07:59,720
an can something be done to make it

00:07:54,870 --> 00:08:06,150
easier to build and deploy updated

00:07:59,720 --> 00:08:07,350
packages on build on one machine and

00:08:06,150 --> 00:08:14,010
then deploy it throughout your

00:08:07,350 --> 00:08:16,460
organization using either DKMS or module

00:08:14,010 --> 00:08:16,460
assistance

00:08:35,180 --> 00:08:38,200
no it is

00:08:50,630 --> 00:09:02,810
their hand thus I'm not very familiar

00:08:57,800 --> 00:09:06,890
with DKMS pass it already has the

00:09:02,810 --> 00:09:09,980
possibility to build some meter package

00:09:06,890 --> 00:09:16,340
which depends on the version you can

00:09:09,980 --> 00:09:18,910
await that way people could just install

00:09:16,340 --> 00:09:22,070
app get install this meter package and

00:09:18,910 --> 00:09:25,310
if they have some local memo where they

00:09:22,070 --> 00:09:28,400
push the newer versions then at least

00:09:25,310 --> 00:09:35,170
these versions would get cycled out

00:09:28,400 --> 00:09:42,230
automatically right

00:09:35,170 --> 00:09:46,250
well DKMS can build packages and then

00:09:42,230 --> 00:09:52,040
they're organized at the moment for a

00:09:46,250 --> 00:09:57,980
specific version of the-- of the module

00:09:52,040 --> 00:10:01,790
and then they can contain binary Bills

00:09:57,980 --> 00:10:04,790
of that module for one or more kernel

00:10:01,790 --> 00:10:08,690
versions so then what you could you can

00:10:04,790 --> 00:10:14,860
potentially have is a single package

00:10:08,690 --> 00:10:14,860
that gets updated 20 version for each

00:10:14,950 --> 00:10:19,370
kernel version and the package name

00:10:16,940 --> 00:10:21,650
doesn't change but then that wouldn't

00:10:19,370 --> 00:10:29,030
have any that wouldn't have any

00:10:21,650 --> 00:10:33,080
dependency information that's how I

00:10:29,030 --> 00:10:38,810
thinking this works at present that it

00:10:33,080 --> 00:10:40,670
might be possible to improve on that to

00:10:38,810 --> 00:10:44,930
build packages more like what module

00:10:40,670 --> 00:10:48,890
system does where they're where they are

00:10:44,930 --> 00:10:51,560
specific to it to a kernel API version

00:10:48,890 --> 00:10:55,300
and then and then they have the correct

00:10:51,560 --> 00:10:55,300
thanks dependency information

00:10:58,149 --> 00:11:09,970
has anyone tried maintaining a a kind of

00:11:05,449 --> 00:11:47,620
a private repo with modules packages

00:11:09,970 --> 00:11:47,620
within their organization packages yes

00:11:53,350 --> 00:11:56,350
okay

00:12:05,179 --> 00:12:18,839
also also I maintain my own repository

00:12:12,809 --> 00:12:26,009
for my company of for our company of da

00:12:18,839 --> 00:12:28,470
de Matos yeah which are out of tree de

00:12:26,009 --> 00:12:31,980
kms of course is a problem of not

00:12:28,470 --> 00:12:35,519
maintaining the architecture of not what

00:12:31,980 --> 00:12:42,749
of the not not keeping the architecture

00:12:35,519 --> 00:12:46,740
so we use model assistant on when we

00:12:42,749 --> 00:12:49,589
build for CentOS there are I forgot the

00:12:46,740 --> 00:12:55,619
name of the of the model building

00:12:49,589 --> 00:12:56,490
framework their rights not KMP okay came

00:12:55,619 --> 00:12:57,990
on yeah right

00:12:56,490 --> 00:12:59,249
it's been cool different names why

00:12:57,990 --> 00:13:02,300
different vendors even though it's more

00:12:59,249 --> 00:13:02,300
or less the same thing yeah

00:13:02,749 --> 00:13:11,790
basically they put the model in updates

00:13:06,809 --> 00:13:20,160
and they seem to have some oh you think

00:13:11,790 --> 00:13:21,629
that their week updates yeah I kind of

00:13:20,160 --> 00:13:26,279
forgot about that so the way the week

00:13:21,629 --> 00:13:31,049
updates worse is that if they if you

00:13:26,279 --> 00:13:35,240
have a module installed in I think in

00:13:31,049 --> 00:13:38,309
the updates or extra sub directories and

00:13:35,240 --> 00:13:42,509
you get a new install a new kernel

00:13:38,309 --> 00:13:45,509
version where the ABI might have changed

00:13:42,509 --> 00:13:49,699
but none of the symbols that that module

00:13:45,509 --> 00:13:52,110
depends on have changed so it's still

00:13:49,699 --> 00:13:55,679
low double in the new kernel version

00:13:52,110 --> 00:13:58,319
then it gets links into the week updates

00:13:55,679 --> 00:14:01,139
directory for the new kernel version and

00:13:58,319 --> 00:14:06,629
that way if the API is mostly stable

00:14:01,139 --> 00:14:13,079
then which is the case for for reticent

00:14:06,629 --> 00:14:15,740
and Susie kernels then as free modules

00:14:13,079 --> 00:14:15,740
keep working

00:14:19,839 --> 00:14:26,470
that sort of depends on their having

00:14:22,429 --> 00:14:29,089
they have a official whitelist of

00:14:26,470 --> 00:14:31,009
symbols which they promise not to break

00:14:29,089 --> 00:14:34,009
so they they keep a subset of the

00:14:31,009 --> 00:14:37,309
eternal API separate and then our tree

00:14:34,009 --> 00:14:42,139
module vendors are expected to stick to

00:14:37,309 --> 00:14:45,199
that if they they can't use anything

00:14:42,139 --> 00:14:47,149
outside of that list potentially we

00:14:45,199 --> 00:14:48,799
could try to do something like that in

00:14:47,149 --> 00:14:54,799
Debian but it was requires a lot of

00:14:48,799 --> 00:14:57,230
thought and I can be sure that some of

00:14:54,799 --> 00:15:00,559
the out of tree module packages that we

00:14:57,230 --> 00:15:04,759
have are going are going to depend on

00:15:00,559 --> 00:15:09,679
things which we wouldn't really want to

00:15:04,759 --> 00:15:11,720
whitelist if we if we listed if we said

00:15:09,679 --> 00:15:14,929
every symbol was currently used by an

00:15:11,720 --> 00:15:18,639
hour stream module package in Debian all

00:15:14,929 --> 00:15:23,149
of those symbols are going to be stable

00:15:18,639 --> 00:15:26,569
then we would be pretty much back to

00:15:23,149 --> 00:15:29,779
where we are now we would may have to

00:15:26,569 --> 00:15:33,769
make the same sort of efforts to avoid

00:15:29,779 --> 00:15:36,619
changing ABA I think I mean I haven't

00:15:33,769 --> 00:15:40,399
gone through an and and try to list all

00:15:36,619 --> 00:15:49,819
these symbols but I don't think would

00:15:40,399 --> 00:15:52,639
make the problem a lot easier broken I'm

00:15:49,819 --> 00:15:55,639
not sure exactly but we're broken I

00:15:52,639 --> 00:16:02,350
think between 6.2 and 6.3 and maybe

00:15:55,639 --> 00:16:02,350
CentOS and maybe between 6 to 3 and 6.4

00:16:05,490 --> 00:16:12,420
maybe the I guess it would be less

00:16:10,570 --> 00:16:15,700
disruptive if we said we promise that

00:16:12,420 --> 00:16:20,770
that security updates won't change the

00:16:15,700 --> 00:16:23,860
API because then that stable point

00:16:20,770 --> 00:16:25,779
releases good because there's less

00:16:23,860 --> 00:16:29,680
urgency about of installing a point

00:16:25,779 --> 00:16:33,760
release and therefore more opportunity

00:16:29,680 --> 00:16:36,339
to prepare and rebuild your module

00:16:33,760 --> 00:16:38,020
package or whatever out of tree module

00:16:36,339 --> 00:16:40,170
packages your organization might depend

00:16:38,020 --> 00:16:40,170
on

00:16:47,310 --> 00:16:50,509
what do you think of that

00:16:52,009 --> 00:17:00,120
something-something also I didn't really

00:16:54,149 --> 00:17:05,760
check how does it work with with the

00:17:00,120 --> 00:17:13,679
different kind of three flavors what do

00:17:05,760 --> 00:17:16,919
you mean well okay each each flavor

00:17:13,679 --> 00:17:26,569
obviously has its own ABI in a way but

00:17:16,919 --> 00:17:33,630
aside from that we can make so yeah each

00:17:26,569 --> 00:17:38,610
we kind of have every flavor its own ABI

00:17:33,630 --> 00:17:40,169
but then every we have ABI versions for

00:17:38,610 --> 00:17:50,460
changes that Cuttack that affect all of

00:17:40,169 --> 00:17:51,840
those at once or most of those does that

00:17:50,460 --> 00:18:10,710
make sense or are we just being

00:17:51,840 --> 00:18:15,270
confusing regarding the release yes

00:18:10,710 --> 00:18:16,919
that's true yes so if there's a security

00:18:15,270 --> 00:18:18,390
update immediately after a point release

00:18:16,919 --> 00:18:20,750
then yes it does become a version to

00:18:18,390 --> 00:18:20,750
update

00:19:07,929 --> 00:19:16,090
hadn't we security updates in the past

00:19:11,499 --> 00:19:20,049
that needed to update to increase the

00:19:16,090 --> 00:19:21,399
hobby anyway I think there has been but

00:19:20,049 --> 00:19:27,970
not for a long time there was during the

00:19:21,399 --> 00:19:34,710
Leni release cycle but I think it's it

00:19:27,970 --> 00:19:39,009
could also it's I think I can imagine

00:19:34,710 --> 00:19:41,879
many kinds of security updates that are

00:19:39,009 --> 00:19:46,720
only possible with an abbey change

00:19:41,879 --> 00:19:50,580
hopefully it is kind is very doesn't

00:19:46,720 --> 00:19:53,289
happen yeah but I guess it will happen

00:19:50,580 --> 00:19:58,529
someday something like this will happen

00:19:53,289 --> 00:20:03,279
anyway so the security update

00:19:58,529 --> 00:20:06,119
immediately after and point release is

00:20:03,279 --> 00:20:11,080
also something that should happen

00:20:06,119 --> 00:20:13,919
hopefully but that often so maybe that

00:20:11,080 --> 00:20:17,529
was would be just a special case of

00:20:13,919 --> 00:20:21,490
usually it should not be increased in

00:20:17,529 --> 00:20:24,269
security updates but in certain cases it

00:20:21,490 --> 00:20:24,269
can happen

00:20:29,549 --> 00:20:36,700
by putting inside security updates that

00:20:32,350 --> 00:20:39,960
are forced to change the API I was

00:20:36,700 --> 00:20:43,240
thinking if it's perhaps manageable to

00:20:39,960 --> 00:20:45,340
tell people that after point release if

00:20:43,240 --> 00:20:47,950
there is the current security update we

00:20:45,340 --> 00:20:56,649
will also update the old kernel for a

00:20:47,950 --> 00:20:58,840
while like three months yeah I don't

00:20:56,649 --> 00:21:01,450
know whether that's possible because we

00:20:58,840 --> 00:21:08,889
don't then have two different versions

00:21:01,450 --> 00:21:12,429
of Linux in the in the same suite in two

00:21:08,889 --> 00:21:14,350
different versions of the source package

00:21:12,429 --> 00:21:17,529
with several they would have separate

00:21:14,350 --> 00:21:19,800
binaries know if I would even be using

00:21:17,529 --> 00:21:21,930
some of the same binary packages

00:21:19,800 --> 00:21:38,520
be in the same suite I don't know

00:21:21,930 --> 00:21:40,440
whether deck can support that and it's

00:21:38,520 --> 00:21:44,030
usually that the meter package just

00:21:40,440 --> 00:21:49,260
points to the newest one like it's done

00:21:44,030 --> 00:21:55,190
but yeah the older Willie's usually

00:21:49,260 --> 00:21:59,580
still count so it might be possible

00:21:55,190 --> 00:22:02,970
there's also the question if we can

00:21:59,580 --> 00:22:12,840
afford to have additional maintenance

00:22:02,970 --> 00:22:17,220
but yeah actually I'm not singing one

00:22:12,840 --> 00:22:20,220
else writing in in the lobby note this

00:22:17,220 --> 00:22:22,580
is this is just my machine not updating

00:22:20,220 --> 00:22:22,580
or

00:22:28,839 --> 00:22:35,059
as far as I know the Ubuntu kernels are

00:22:33,619 --> 00:22:42,289
a separate package

00:22:35,059 --> 00:22:45,070
so a new version is another package it

00:22:42,289 --> 00:22:50,019
is possible to have that but it's

00:22:45,070 --> 00:22:50,019
definitely not so easy to do

00:22:57,039 --> 00:23:06,549
yeah I definitely don't want to make

00:23:01,820 --> 00:23:06,549
lots more work for other teams

00:24:24,190 --> 00:24:38,010
so wouldn't does anyone know about how

00:24:39,480 --> 00:24:45,360
how a burn C deals with auditory modules

00:24:45,480 --> 00:24:57,490
do they attempt to supports I know

00:24:50,230 --> 00:25:03,340
they've tends to favor DKMS do they have

00:24:57,490 --> 00:25:05,680
anything to make do they deserve

00:25:03,340 --> 00:25:09,580
anything to assist in rebuilding modules

00:25:05,680 --> 00:25:16,660
with DKMS on the machines other than

00:25:09,580 --> 00:25:19,960
where they're going to be installed or

00:25:16,660 --> 00:25:21,730
it's the assumption that wherever you

00:25:19,960 --> 00:25:28,450
use these are three modules you do have

00:25:21,730 --> 00:25:31,410
a build tool chain installed to make

00:25:28,450 --> 00:25:31,410
auto updates work

00:25:35,570 --> 00:25:38,570
okay

00:25:43,419 --> 00:25:50,919
so I'm not actually working on on our

00:25:47,289 --> 00:25:55,329
Colonel stuff so I'm not 100% sure but

00:25:50,919 --> 00:26:00,669
as far as I know they actually are just

00:25:55,329 --> 00:26:03,149
using DKMS and relying on their tools on

00:26:00,669 --> 00:26:06,149
the machine we install the packages

00:26:03,149 --> 00:26:06,149
right

00:26:09,290 --> 00:26:21,290
okay so looks like we don't really have

00:26:12,480 --> 00:26:21,290
any don't have any solutions here really

00:26:22,040 --> 00:26:26,420
maybe some ID at least some ideas

00:26:38,650 --> 00:26:46,750
well anyone else got anything to say

00:26:40,450 --> 00:26:49,150
before I wrap this up didn't one I did I

00:26:46,750 --> 00:27:01,059
haven't been looking to anyone I have a

00:26:49,150 --> 00:27:03,660
client with a point on IRC they don't

00:27:01,059 --> 00:27:03,660
see anyone there

00:27:09,120 --> 00:27:18,850
all right yeah well thanks everyone for

00:27:12,280 --> 00:27:21,400
coming and maybe we'll sell this later

00:27:18,850 --> 00:27:23,940
that's a guess we're not gonna change it

00:27:21,400 --> 00:27:23,940
I think right now

00:27:27,870 --> 00:27:31,320

YouTube URL: https://www.youtube.com/watch?v=HVbfBl3_Q9g


