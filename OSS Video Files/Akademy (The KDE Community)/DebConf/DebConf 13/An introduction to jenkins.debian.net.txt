Title: An introduction to jenkins.debian.net
Publication date: 2017-11-29
Playlist: DebConf 13
Description: 
	by Holger Levsen

At: DebConf13
https://debconf13.debconf.org/
Room: Main talk room
Scheduled start: 2013-08-15 15:30:00
Captions: 
	00:00:00,000 --> 00:00:05,339
an introduction to Jenkins Debian dotnet

00:00:02,760 --> 00:00:08,010
by whole collection and as the subtitle

00:00:05,339 --> 00:00:20,220
says we not only one testing what we

00:00:08,010 --> 00:00:25,140
want more please welcome Holger hi does

00:00:20,220 --> 00:00:29,849
it work yes hello for my talk about

00:00:25,140 --> 00:00:32,239
Jenkins the Debian net so I called

00:00:29,849 --> 00:00:37,170
testing a server but we really want gold

00:00:32,239 --> 00:00:39,980
because testing is not enough and so I

00:00:37,170 --> 00:00:44,640
speak about motivation to set up and

00:00:39,980 --> 00:00:49,520
have some questions for you as well I'm

00:00:44,640 --> 00:00:52,020
using Debian sits quite some time and in

00:00:49,520 --> 00:00:55,230
Jenkins I was dangerous I started two

00:00:52,020 --> 00:00:58,050
years ago and last year in October I

00:00:55,230 --> 00:01:01,500
think I set up Jenkins Debian net which

00:00:58,050 --> 00:01:05,369
is running since then with some groups

00:01:01,500 --> 00:01:07,590
using it who knows what Jenkins is oh

00:01:05,369 --> 00:01:12,049
maybe who easier who knows who doesn't

00:01:07,590 --> 00:01:12,049
know what Jenkins is okay

00:01:33,400 --> 00:01:36,400
ha

00:01:54,680 --> 00:02:02,470
so again welcome to the talk who is

00:02:00,830 --> 00:02:06,680
using Jenkins

00:02:02,470 --> 00:02:10,640
okay quite some people who wants to use

00:02:06,680 --> 00:02:17,000
it some more who plans to attempt the

00:02:10,640 --> 00:02:20,930
both okay quite some people so testing a

00:02:17,000 --> 00:02:23,360
server but we really want gold and gold

00:02:20,930 --> 00:02:25,310
is for me they're the team maintaining

00:02:23,360 --> 00:02:28,070
Jenkins to be an orc have more teams use

00:02:25,310 --> 00:02:33,290
it and have more teams really caring

00:02:28,070 --> 00:02:35,000
about the results because I can write

00:02:33,290 --> 00:02:36,950
many tests but that doesn't have

00:02:35,000 --> 00:02:38,930
anything if the relevant groups are not

00:02:36,950 --> 00:02:42,170
reading the tests and doing something

00:02:38,930 --> 00:02:44,420
about the results there's email

00:02:42,170 --> 00:02:48,350
notification and IRC which I'll explain

00:02:44,420 --> 00:02:51,170
a bit later and Jenkins is called a

00:02:48,350 --> 00:02:53,780
continuous integration server a Crone on

00:02:51,170 --> 00:02:55,970
steroids it does that it also can do

00:02:53,780 --> 00:02:58,130
much much more there's a long

00:02:55,970 --> 00:03:00,830
explanation what Jenkins can do for

00:02:58,130 --> 00:03:01,489
scheduling blah blah blah but I would

00:03:00,830 --> 00:03:04,970
explain it

00:03:01,489 --> 00:03:08,530
Jenkins run stuff via corn or triggered

00:03:04,970 --> 00:03:11,360
usually by SCMS

00:03:08,530 --> 00:03:14,750
then stuff is treated as failing if the

00:03:11,360 --> 00:03:17,030
error code is exit code is one it's

00:03:14,750 --> 00:03:20,170
unstable if output matches some patterns

00:03:17,030 --> 00:03:24,800
and stuff it good if it exit with zero

00:03:20,170 --> 00:03:27,440
that's what Jenkins does it's nine years

00:03:24,800 --> 00:03:30,380
old now there's a fork or Jenkins is

00:03:27,440 --> 00:03:32,390
actually a fork of Hudson which was

00:03:30,380 --> 00:03:34,250
Hudson was bought by Oracle and then

00:03:32,390 --> 00:03:35,620
there were some issues and so they

00:03:34,250 --> 00:03:39,049
decided to fork it

00:03:35,620 --> 00:03:42,530
it's MIT license some bits or other

00:03:39,049 --> 00:03:45,019
license it's very friendly an active

00:03:42,530 --> 00:03:52,040
community there are I don't know 200

00:03:45,019 --> 00:03:55,400
plugins I think there's very lease daily

00:03:52,040 --> 00:03:57,980
or weekly release and long-term releases

00:03:55,400 --> 00:04:02,959
roughly for a year which says bitten has

00:03:57,980 --> 00:04:05,750
become a bit more this is Jenkins users

00:04:02,959 --> 00:04:08,680
worldwide this is from last year so I

00:04:05,750 --> 00:04:10,720
think the word has become a bit more

00:04:08,680 --> 00:04:15,130
they're quite some companies and

00:04:10,720 --> 00:04:17,380
open-source projects using it these are

00:04:15,130 --> 00:04:22,450
only open source or free software

00:04:17,380 --> 00:04:24,820
projects I leave that India just summary

00:04:22,450 --> 00:04:26,889
so there's a Jenkins package in Debian

00:04:24,820 --> 00:04:31,060
VZ you can just up get install it and

00:04:26,889 --> 00:04:32,620
use it it also works with installing

00:04:31,060 --> 00:04:36,760
plugins from the net and you can also

00:04:32,620 --> 00:04:38,470
upgrade it to the long term surgeon with

00:04:36,760 --> 00:04:39,729
the long term version okay

00:04:38,470 --> 00:04:41,919
the long two version we use on this

00:04:39,729 --> 00:04:44,380
thing the hardware it's running is

00:04:41,919 --> 00:04:46,840
sponsored by profit bricks which is a

00:04:44,380 --> 00:04:49,150
German cloud provider they sponsor it

00:04:46,840 --> 00:04:51,970
since last October currently it's six

00:04:49,150 --> 00:04:54,340
cause I'm from a six-course 12 gigabytes

00:04:51,970 --> 00:04:57,820
of RAM and small rather small disk space

00:04:54,340 --> 00:05:00,250
I got during this conference I got three

00:04:57,820 --> 00:05:02,050
more offers for hardware which I don't

00:05:00,250 --> 00:05:04,930
intend to use at the moment because I

00:05:02,050 --> 00:05:10,330
can still get more resources from profit

00:05:04,930 --> 00:05:12,550
bricks and the issue is really not happy

00:05:10,330 --> 00:05:14,169
about writing and reading the tests and

00:05:12,550 --> 00:05:17,950
if there's more hardware needed I

00:05:14,169 --> 00:05:20,860
happily come back to Tomas Martinez aims

00:05:17,950 --> 00:05:26,380
to get more hardware but I don't see

00:05:20,860 --> 00:05:28,840
this now happening so Jenkins runs VZ

00:05:26,380 --> 00:05:32,950
the long-term support wisdom from

00:05:28,840 --> 00:05:35,050
Jenkins and the KB KB KGB client from

00:05:32,950 --> 00:05:39,760
source that's the only non VZ package on

00:05:35,050 --> 00:05:42,400
it then everything for the configuration

00:05:39,760 --> 00:05:44,919
of this system is in this get repository

00:05:42,400 --> 00:05:46,930
all the jobs are configured there and

00:05:44,919 --> 00:05:49,630
the tests are in there and there's also

00:05:46,930 --> 00:05:51,460
some moon and plugins for Jenkins which

00:05:49,630 --> 00:05:55,900
I should really release communion contra

00:05:51,460 --> 00:05:58,570
plugins and I use a modified version of

00:05:55,900 --> 00:06:02,350
Jenkins job builder which creates the

00:05:58,570 --> 00:06:05,080
all the Jenkins jobs out of my files so

00:06:02,350 --> 00:06:07,180
you don't have to create or modify jobs

00:06:05,080 --> 00:06:09,250
in the web interface and then copy and

00:06:07,180 --> 00:06:12,100
paste the jobs or whatever other Jenkins

00:06:09,250 --> 00:06:14,289
users to and that why it's also easy to

00:06:12,100 --> 00:06:16,120
add new jobs because you just send me a

00:06:14,289 --> 00:06:18,930
pull request to this git repository that

00:06:16,120 --> 00:06:21,479
creates the jobs and

00:06:18,930 --> 00:06:23,699
that's done and I think I also have jobs

00:06:21,479 --> 00:06:26,250
checking if there's jobs to be created

00:06:23,699 --> 00:06:29,160
because I scan some repositories and see

00:06:26,250 --> 00:06:30,840
aha I would create these jobs and if

00:06:29,160 --> 00:06:33,800
there's a new repository then it tells

00:06:30,840 --> 00:06:38,280
me are this job is missing to something

00:06:33,800 --> 00:06:43,139
and currently this only is amd64 there's

00:06:38,280 --> 00:06:46,050
no other aishi picture involved I use

00:06:43,139 --> 00:06:48,389
some Jenkins plugin obviously the gate

00:06:46,050 --> 00:06:53,430
and subversion plugins the lock has a

00:06:48,389 --> 00:06:57,050
plugin is used to pass the output and to

00:06:53,430 --> 00:07:00,479
pattern matching there yes I'm not sure

00:06:57,050 --> 00:07:02,370
then what this I've most not seen

00:07:00,479 --> 00:07:05,280
elsewhere is the read only configuration

00:07:02,370 --> 00:07:07,020
plugin so you can view all drops the

00:07:05,280 --> 00:07:09,960
configuration without having an account

00:07:07,020 --> 00:07:12,599
on this Jenkins instance which is really

00:07:09,960 --> 00:07:15,030
nice to copy stuff but this is something

00:07:12,599 --> 00:07:17,669
I really would like to see on the Ubuntu

00:07:15,030 --> 00:07:19,259
Jenkins installation that they enable

00:07:17,669 --> 00:07:21,060
the read only configuration plugin

00:07:19,259 --> 00:07:24,030
because then one can see what these jobs

00:07:21,060 --> 00:07:28,860
are not doing without that access to

00:07:24,030 --> 00:07:30,840
Jenkins inst it's not so useful yeah

00:07:28,860 --> 00:07:33,510
there's other plugins also this throttle

00:07:30,840 --> 00:07:35,220
concurrent with plugin so that some jobs

00:07:33,510 --> 00:07:38,760
are really resource intensive they need

00:07:35,220 --> 00:07:40,500
lots of rum or course so for certain job

00:07:38,760 --> 00:07:45,120
types there are only two or three at

00:07:40,500 --> 00:07:47,099
maximum run at the same time the green

00:07:45,120 --> 00:07:53,060
balls plugin is also really important

00:07:47,099 --> 00:07:57,180
every Jenkins know there use that the

00:07:53,060 --> 00:08:00,599
get the tree of the git repository is

00:07:57,180 --> 00:08:03,570
like this job config has all the Yama

00:08:00,599 --> 00:08:06,060
definitions for the job bin has the

00:08:03,570 --> 00:08:08,580
scripts with a run lock Pass has the

00:08:06,060 --> 00:08:12,060
lock pass patterns which are Java record

00:08:08,580 --> 00:08:14,909
regular expressions di precede configs

00:08:12,060 --> 00:08:17,039
are for the DI testing jobs et Cie is

00:08:14,909 --> 00:08:19,470
for the machine itself so everything

00:08:17,039 --> 00:08:21,810
which is done on the machine is in this

00:08:19,470 --> 00:08:23,880
ATC repository so if the machine goes

00:08:21,810 --> 00:08:26,130
down there's no backup of it because

00:08:23,880 --> 00:08:28,460
everything is in version control there

00:08:26,130 --> 00:08:30,969
is some backup actually that's not true

00:08:28,460 --> 00:08:32,889
user content is

00:08:30,969 --> 00:08:35,919
some mineral things and debian is the

00:08:32,889 --> 00:08:39,009
beginning of a package which I've not

00:08:35,919 --> 00:08:41,139
did bids and you can install it and I

00:08:39,009 --> 00:08:43,329
also want to have a package which people

00:08:41,139 --> 00:08:44,259
can install to reproduce the jobs so

00:08:43,329 --> 00:08:45,910
they don't have to foil it

00:08:44,259 --> 00:08:47,980
Jenkins running but can just have a

00:08:45,910 --> 00:08:53,410
small package installed and then we

00:08:47,980 --> 00:08:56,199
produce the jobs easily the jobs which X

00:08:53,410 --> 00:09:00,550
do exist are graphical installer tests

00:08:56,199 --> 00:09:03,720
you've seen in the beginning there's the

00:09:00,550 --> 00:09:08,290
rescue mode in 12 languages or in

00:09:03,720 --> 00:09:11,050
whatever Arabic Hebrew puja be and five

00:09:08,290 --> 00:09:15,430
other Indian languages Korean Japanese

00:09:11,050 --> 00:09:18,040
Russian the idea there is to add some

00:09:15,430 --> 00:09:19,810
image detection that if there's a square

00:09:18,040 --> 00:09:21,670
or a rectangle which is usually an

00:09:19,810 --> 00:09:24,490
encoding problem to detect this and make

00:09:21,670 --> 00:09:28,720
the bit automatically fail this doesn't

00:09:24,490 --> 00:09:31,000
happen at the moment so this is useful

00:09:28,720 --> 00:09:33,399
to have a look at this verse and see

00:09:31,000 --> 00:09:39,220
visually visually compare them until

00:09:33,399 --> 00:09:41,259
there's other detection then there's for

00:09:39,220 --> 00:09:43,899
the different desktop installs and VZ

00:09:41,259 --> 00:09:48,160
Jessie and sit and squeeze actually also

00:09:43,899 --> 00:09:52,209
so there's no xfce LXDE and KDE being

00:09:48,160 --> 00:09:54,759
installed after the installation a user

00:09:52,209 --> 00:09:59,199
the system is booted the user locks in

00:09:54,759 --> 00:10:02,529
with x2 tool so I can send keyboard

00:09:59,199 --> 00:10:04,149
commands to it and iceweasel has started

00:10:02,529 --> 00:10:06,370
a shell has started and the system is

00:10:04,149 --> 00:10:11,319
powered down and if that all succeed

00:10:06,370 --> 00:10:14,699
that these jobs are successful similar

00:10:11,319 --> 00:10:18,069
thing is done for Debian Aero profiles

00:10:14,699 --> 00:10:20,740
where we test the different combinations

00:10:18,069 --> 00:10:23,110
debian ido has what i'd like to do then

00:10:20,740 --> 00:10:25,389
have not done yet is to install debian

00:10:23,110 --> 00:10:27,939
who has this network architecture to

00:10:25,389 --> 00:10:31,120
install a main server first in one job

00:10:27,939 --> 00:10:33,040
and if that succeeds fire other drops

00:10:31,120 --> 00:10:35,230
with clients which we lie on the main

00:10:33,040 --> 00:10:37,089
server and have them this client tested

00:10:35,230 --> 00:10:40,059
against the running main server this is

00:10:37,089 --> 00:10:41,350
not implemented yet but i'd like to do

00:10:40,059 --> 00:10:43,980
this really soon because this really

00:10:41,350 --> 00:10:48,300
helps in in us and debian ido

00:10:43,980 --> 00:10:50,850
to check our images um

00:10:48,300 --> 00:10:55,380
Debian installer drops there are two

00:10:50,850 --> 00:10:56,970
kinds the whatever hundred twenty get

00:10:55,380 --> 00:10:59,070
repositories with Debian installer

00:10:56,970 --> 00:11:01,200
packages they are built on every commit

00:10:59,070 --> 00:11:06,390
for the sit brand therefore the master

00:11:01,200 --> 00:11:08,940
branch would also be thinkable to detect

00:11:06,390 --> 00:11:11,700
whether whatever Jesse branches exists

00:11:08,940 --> 00:11:15,060
and then bid those also in a Jesse

00:11:11,700 --> 00:11:17,520
environment and I've done the same with

00:11:15,060 --> 00:11:20,340
the installation manuals that for all

00:11:17,520 --> 00:11:23,010
languages they are built on commits for

00:11:20,340 --> 00:11:27,090
the languages and the full manuals also

00:11:23,010 --> 00:11:29,370
build and those do notifications to the

00:11:27,090 --> 00:11:31,610
Debian boot IRC channel so if you're

00:11:29,370 --> 00:11:34,410
there you probably have seen them and

00:11:31,610 --> 00:11:37,370
there's some chroot installation jobs

00:11:34,410 --> 00:11:40,710
who are just creator chroot and then to

00:11:37,370 --> 00:11:43,050
base the bootstrap of the distributions

00:11:40,710 --> 00:11:48,510
and if that succeeds then I do again

00:11:43,050 --> 00:11:50,760
those different desktops citizen daily

00:11:48,510 --> 00:11:56,460
Jesse I think every two days and Weezie

00:11:50,760 --> 00:11:59,460
no monthly I think there's one husker

00:11:56,460 --> 00:12:01,680
job doing chroot installation the

00:11:59,460 --> 00:12:05,150
bootstrap and then installs all haskell

00:12:01,680 --> 00:12:07,230
packages i happily don't care cost

00:12:05,150 --> 00:12:09,770
you're in right now or the hospital

00:12:07,230 --> 00:12:15,780
group is taking care of this they have

00:12:09,770 --> 00:12:17,100
embedded there's a URL one can embed in

00:12:15,780 --> 00:12:20,130
a wiki page or something will they have

00:12:17,100 --> 00:12:22,050
it in their hospice care team page which

00:12:20,130 --> 00:12:23,430
shows the results of these jenkins swaps

00:12:22,050 --> 00:12:25,860
so they don't have to go to the jenkins

00:12:23,430 --> 00:12:29,790
page address can check their page and

00:12:25,860 --> 00:12:35,730
see if there's a problem and antonio

00:12:29,790 --> 00:12:37,860
Tessa Oh see here oh hi he's been

00:12:35,730 --> 00:12:41,460
working with me on getting Ruby jobs

00:12:37,860 --> 00:12:43,650
done which slowed down a bit because I

00:12:41,460 --> 00:12:46,680
was too busy and I really want him to do

00:12:43,650 --> 00:12:50,190
this so that in future he can maintain

00:12:46,680 --> 00:12:53,760
that I'm not that I'm responsible for

00:12:50,190 --> 00:12:57,180
this then there are also some web check

00:12:53,760 --> 00:13:02,040
drops which run this web check tool on

00:12:57,180 --> 00:13:05,010
all DEF CON webpages the www nor the

00:13:02,040 --> 00:13:07,320
security pages and other and this is a

00:13:05,010 --> 00:13:09,390
good example of a brother useless test

00:13:07,320 --> 00:13:12,330
because I think nobody including me

00:13:09,390 --> 00:13:14,520
looks at these tests they show missing

00:13:12,330 --> 00:13:15,930
links or something it was in the

00:13:14,520 --> 00:13:18,360
beginning when I experimented what I

00:13:15,930 --> 00:13:20,610
could do and there are some safe drops

00:13:18,360 --> 00:13:22,740
which test whether the system is okay or

00:13:20,610 --> 00:13:28,620
having enough resources of leftover

00:13:22,740 --> 00:13:33,090
files which would be deleted I'll do

00:13:28,620 --> 00:13:37,350
this in a moment yeah what I've said I

00:13:33,090 --> 00:13:39,720
want to have make it very easy for

00:13:37,350 --> 00:13:42,270
people to reproduce the drops on their

00:13:39,720 --> 00:13:44,580
machine and so basically I want to

00:13:42,270 --> 00:13:46,590
include in the job output the command

00:13:44,580 --> 00:13:52,170
the commands needed to reproduce the

00:13:46,590 --> 00:13:54,870
jobs locally and it's I've done bits of

00:13:52,170 --> 00:13:57,000
it but it's not really finished so if

00:13:54,870 --> 00:14:03,690
somebody wants to help with that that

00:13:57,000 --> 00:14:07,610
would be great if I go to this error I

00:14:03,690 --> 00:14:07,610
show you the job configuration

00:14:23,739 --> 00:14:39,829
there are any questions feel free to ask

00:14:27,369 --> 00:14:42,709
so a job configuration is so that

00:14:39,829 --> 00:14:46,369
there's the job name and the description

00:14:42,709 --> 00:14:49,939
and then the really important part is

00:14:46,369 --> 00:14:52,819
further down this git repository where

00:14:49,939 --> 00:14:54,439
the code is coming from them up the

00:14:52,819 --> 00:14:59,749
branch to build which is here only

00:14:54,439 --> 00:15:02,449
master and then I still use that a SCM

00:14:59,749 --> 00:15:06,139
pauling which is of course a suboptimal

00:15:02,449 --> 00:15:10,789
and the command to be executed as just

00:15:06,139 --> 00:15:21,019
the simple share script and this runs in

00:15:10,789 --> 00:15:23,419
the workspace of this job and the llamó

00:15:21,019 --> 00:15:34,789
configuration can you read this no yeah

00:15:23,419 --> 00:15:38,499
I see it's not enough okay hi how much

00:15:34,789 --> 00:15:38,499
spare capacity do you have a moment

00:15:41,649 --> 00:15:46,249
there's no boats left at the moment it's

00:15:44,119 --> 00:15:49,339
just one single install or the single

00:15:46,249 --> 00:15:52,039
machine I can add more course and more

00:15:49,339 --> 00:15:53,599
run to this one and then I could use one

00:15:52,039 --> 00:15:57,319
of the three office to add most ladies

00:15:53,599 --> 00:16:07,519
okay currently the grass there's a

00:15:57,319 --> 00:16:09,949
mutant running so this is the number of

00:16:07,519 --> 00:16:12,919
current Jenkins be running at the same

00:16:09,949 --> 00:16:15,619
time and it's only three or four so

00:16:12,919 --> 00:16:17,659
that's usually for course or free so as

00:16:15,619 --> 00:16:19,790
a as a follow-up I don't know if you're

00:16:17,659 --> 00:16:21,080
in the last talk but

00:16:19,790 --> 00:16:24,970
would you have a heart attack if we

00:16:21,080 --> 00:16:27,950
started running or package tests or all

00:16:24,970 --> 00:16:29,870
packaged up loads that declare the

00:16:27,950 --> 00:16:31,940
appropriate header I'd love to do this

00:16:29,870 --> 00:16:34,190
because if that if there are more

00:16:31,940 --> 00:16:37,330
resources needed I can add them okay

00:16:34,190 --> 00:17:06,199
so I definitely want to do this yes I

00:16:37,330 --> 00:17:08,050
shall see if I can thanks for that

00:17:06,199 --> 00:17:11,480
awesome job

00:17:08,050 --> 00:17:14,300
one questions that jump that my mind is

00:17:11,480 --> 00:17:22,579
how far is this to be able to run out of

00:17:14,300 --> 00:17:30,559
package tests then maybe I just didn't

00:17:22,579 --> 00:17:32,059
hear sorry yet to answer it's easy to

00:17:30,559 --> 00:17:35,480
run out of package stress or any other

00:17:32,059 --> 00:17:46,960
thing just send me these tests come to

00:17:35,480 --> 00:17:50,240
the boss and see you have to do it yeah

00:17:46,960 --> 00:17:56,929
who's with which teams are interested in

00:17:50,240 --> 00:18:02,630
doing that at the moment which team are

00:17:56,929 --> 00:18:05,600
you speaking about Joey as a flow up to

00:18:02,630 --> 00:18:08,420
the previous talk where Kareem mentioned

00:18:05,600 --> 00:18:11,000
that they are running out to package

00:18:08,420 --> 00:18:14,960
tests on Jenkins for all our plans to

00:18:11,000 --> 00:18:16,910
win - and doing that for all packages

00:18:14,960 --> 00:18:19,940
alluded to Sid would be interesting and

00:18:16,910 --> 00:18:23,300
from a realistic point of view we are

00:18:19,940 --> 00:18:25,550
going to take that into account

00:18:23,300 --> 00:18:28,630
export the results to Brittany to take

00:18:25,550 --> 00:18:32,450
that into account for package migrations

00:18:28,630 --> 00:18:33,250
I'm not yet that confident in this setup

00:18:32,450 --> 00:18:37,900
as

00:18:33,250 --> 00:18:41,080
with pee you putz so I'm bit very about

00:18:37,900 --> 00:18:43,180
having this be part of the mandatory

00:18:41,080 --> 00:18:49,930
part of the release process but we can

00:18:43,180 --> 00:18:53,230
work on this I'm curious how you see

00:18:49,930 --> 00:18:56,320
Jenkins inside the bigger picture so if

00:18:53,230 --> 00:18:59,650
I for example want to run a thousand

00:18:56,320 --> 00:19:01,570
jobs as a one-off test to see how much

00:18:59,650 --> 00:19:04,300
stuff breaks if I change packages in a

00:19:01,570 --> 00:19:07,420
specific way say add system D support

00:19:04,300 --> 00:19:09,610
would that be happy will you be happy

00:19:07,420 --> 00:19:12,310
with that I'd rather not be so happy

00:19:09,610 --> 00:19:14,320
with one-time actions as the QA team

00:19:12,310 --> 00:19:17,590
also has access to other cloud resources

00:19:14,320 --> 00:19:19,150
the Sklar 5000 cluster to do things

00:19:17,590 --> 00:19:20,410
there I think this is better for the

00:19:19,150 --> 00:19:23,110
one-time test like that

00:19:20,410 --> 00:19:26,790
okay so Jenkins is mostly for continuous

00:19:23,110 --> 00:19:26,790
stuff yeah all right thanks

00:19:35,280 --> 00:19:39,570
we can have quest s not much more coming

00:19:37,260 --> 00:19:43,470
I could find the editor and show you the

00:19:39,570 --> 00:19:46,350
job conflict but this can also wait did

00:19:43,470 --> 00:19:53,040
you already think as far as I understood

00:19:46,350 --> 00:19:55,620
you're just doing this on MD 64 now yes

00:19:53,040 --> 00:19:58,800
did you always think about doing it on

00:19:55,620 --> 00:20:02,220
other artists too like wait cure me or

00:19:58,800 --> 00:20:05,970
with whatever I think that might be

00:20:02,220 --> 00:20:15,750
interesting at least for DI I have

00:20:05,970 --> 00:20:19,710
thought about it that's it that's it

00:20:15,750 --> 00:20:22,560
and one other idea I had I don't know

00:20:19,710 --> 00:20:26,900
what you think about but it also be

00:20:22,560 --> 00:20:30,270
possible to have like tests that do

00:20:26,900 --> 00:20:35,070
rebuilds out of git repositories of

00:20:30,270 --> 00:20:37,320
packages or di and tests that like

00:20:35,070 --> 00:20:39,150
something like I think the Segoe is

00:20:37,320 --> 00:20:42,480
doing for the OpenStack packages

00:20:39,150 --> 00:20:47,190
currently he triggers spilt on comets

00:20:42,480 --> 00:20:50,100
and has a changing I am doing this for

00:20:47,190 --> 00:20:52,500
the DI packages and I'm happy to do this

00:20:50,100 --> 00:20:54,990
for other packages as well like we

00:20:52,500 --> 00:20:58,050
briefly discussed also how doing it for

00:20:54,990 --> 00:21:01,320
the Perl team which has more than

00:20:58,050 --> 00:21:02,970
thousand packages and there again it was

00:21:01,320 --> 00:21:05,490
not a resource problem on the Jenkins

00:21:02,970 --> 00:21:08,010
machine but rather a resource problem on

00:21:05,490 --> 00:21:09,570
the per team because they cannot really

00:21:08,010 --> 00:21:12,210
deal with the results of thousand

00:21:09,570 --> 00:21:15,150
packages probably or maybe they can if

00:21:12,210 --> 00:21:18,720
they're if they're all don't fail so the

00:21:15,150 --> 00:21:20,850
idea is to introduce whatever batches of

00:21:18,720 --> 00:21:26,130
50 package is probably the most highest

00:21:20,850 --> 00:21:29,190
popcorn or whatever and slowly get get

00:21:26,130 --> 00:21:30,990
coverage for that but the problem is

00:21:29,190 --> 00:21:34,380
really reading the results on dealing

00:21:30,990 --> 00:21:36,810
with them how can people currently get

00:21:34,380 --> 00:21:39,540
at the results it is just you have to go

00:21:36,810 --> 00:21:41,520
to the Jenkins Debian net website or can

00:21:39,540 --> 00:21:44,950
you somehow subscribe to results you're

00:21:41,520 --> 00:21:48,370
interested in at the moment of only an a

00:21:44,950 --> 00:21:51,550
IRC notifications so there are Debian

00:21:48,370 --> 00:21:53,620
boot gets them about the DI packages and

00:21:51,550 --> 00:21:56,200
the graphical installation tests Debian

00:21:53,620 --> 00:21:59,320
II do about the graphical tests for

00:21:56,200 --> 00:22:01,960
every needle I have also enabled email

00:21:59,320 --> 00:22:03,910
notification but those only go to me and

00:22:01,960 --> 00:22:06,520
the hospital group I think receives

00:22:03,910 --> 00:22:08,650
their jobs if the DI team wants their

00:22:06,520 --> 00:22:11,190
results on a mailing list fine happy

00:22:08,650 --> 00:22:11,190
it's easy

00:22:11,520 --> 00:22:17,680
yeah was another question as I could

00:22:14,920 --> 00:22:19,930
show this job configuration yeah just to

00:22:17,680 --> 00:22:20,920
make it clear so building package is

00:22:19,930 --> 00:22:25,420
also an option

00:22:20,920 --> 00:22:27,730
yeah right okay yeah I I think I think I

00:22:25,420 --> 00:22:29,140
go through the job I show you that the

00:22:27,730 --> 00:22:31,120
Scriptures are running which are really

00:22:29,140 --> 00:22:36,280
simple batch scripts so you get a better

00:22:31,120 --> 00:22:40,870
idea what's happening there but I first

00:22:36,280 --> 00:22:41,940
this question since why it's in soda I

00:22:40,870 --> 00:22:45,670
understand

00:22:41,940 --> 00:22:49,120
Jenkins job are not necessarily related

00:22:45,670 --> 00:22:53,590
to some specific package are they that's

00:22:49,120 --> 00:22:56,140
right yes okay because so that what was

00:22:53,590 --> 00:23:00,250
proposing is maybe kind of moot but I

00:22:56,140 --> 00:23:03,010
like to have as much as information as

00:23:00,250 --> 00:23:05,770
information as possible on the pts but I

00:23:03,010 --> 00:23:11,790
think that given this structure it's not

00:23:05,770 --> 00:23:14,170
very usual not very doable to add some

00:23:11,790 --> 00:23:17,560
information about the engines in the PDS

00:23:14,170 --> 00:23:19,860
or maybe there is some way I think there

00:23:17,560 --> 00:23:23,560
is the thing is rather easy because

00:23:19,860 --> 00:23:26,770
Jenkins could provide for packages the

00:23:23,560 --> 00:23:28,720
results and the pts could grab scan them

00:23:26,770 --> 00:23:33,880
if they're for packages which have word

00:23:28,720 --> 00:23:35,890
okay so there is some way to to build a

00:23:33,880 --> 00:23:41,170
mapping from packages to relevant

00:23:35,890 --> 00:23:45,040
teunteun's Jenkins result yes okay this

00:23:41,170 --> 00:23:50,590
may be mmm this may be I think it would

00:23:45,040 --> 00:23:56,330
be very useful questions now or should I

00:23:50,590 --> 00:23:58,190
explain yeah I see lots of

00:23:56,330 --> 00:23:59,929
I see lots of green on some of these

00:23:58,190 --> 00:24:02,720
tabs on the Jenkins site which is great

00:23:59,929 --> 00:24:07,190
I see some yellow and some red which is

00:24:02,720 --> 00:24:09,470
to be expected what is the usual well

00:24:07,190 --> 00:24:11,529
what is the current way that the yellow

00:24:09,470 --> 00:24:15,500
and the red results in other words

00:24:11,529 --> 00:24:16,970
failure or I guess unstable results what

00:24:15,500 --> 00:24:18,710
is the current way that those are

00:24:16,970 --> 00:24:21,919
handled and what is a desired way that

00:24:18,710 --> 00:24:24,529
those are handled depends it depends on

00:24:21,919 --> 00:24:26,149
why the drop for example for the the

00:24:24,529 --> 00:24:28,309
integration test that you're doing

00:24:26,149 --> 00:24:30,289
running iceweasel and fire in a shell

00:24:28,309 --> 00:24:32,990
and in a graphical environment we have

00:24:30,289 --> 00:24:34,610
this here this chroot

00:24:32,990 --> 00:24:37,429
installation and sit which was

00:24:34,610 --> 00:24:40,220
successful all the last two weeks and

00:24:37,429 --> 00:24:42,860
today it yesterday had failed I have no

00:24:40,220 --> 00:24:47,570
idea what's wrong and sit so you click

00:24:42,860 --> 00:24:50,649
on this link and it will give you this

00:24:47,570 --> 00:24:55,190
and then you go to the console output

00:24:50,649 --> 00:25:02,990
just the drop output and usually scroll

00:24:55,190 --> 00:25:09,289
down and then you see probably see what

00:25:02,990 --> 00:25:11,389
it fellas in there lip AV you to deaf

00:25:09,289 --> 00:25:17,630
has unmet dependencies and said since

00:25:11,389 --> 00:25:19,720
today so I could notify an IRC channel

00:25:17,630 --> 00:25:22,309
but I didn't know really which one

00:25:19,720 --> 00:25:26,809
whether Debian devil is the right one

00:25:22,309 --> 00:25:29,149
there I don't know or Debian QA maybe

00:25:26,809 --> 00:25:31,850
are useful so maybe there's really two

00:25:29,149 --> 00:25:32,929
useful teams that shirts around or a few

00:25:31,850 --> 00:25:34,760
useful teams that should surround the

00:25:32,929 --> 00:25:36,500
service one of the maintains a service

00:25:34,760 --> 00:25:38,419
you know one of them helps teams write

00:25:36,500 --> 00:25:43,539
tests and one of them triage is failures

00:25:38,419 --> 00:25:43,539
and unstable results and directs the

00:25:43,840 --> 00:25:50,169
resulting error to the right source to

00:25:46,880 --> 00:25:50,169
the right team to fix it

00:25:57,740 --> 00:26:06,900
yep just one flow up to a previous

00:26:02,370 --> 00:26:11,460
equation in fact Jenkins as some

00:26:06,900 --> 00:26:14,910
sonication feet the build result so

00:26:11,460 --> 00:26:17,820
maybe you can make some job to extract

00:26:14,910 --> 00:26:19,920
information from sonication feed to

00:26:17,820 --> 00:26:22,940
provide the pts some information about

00:26:19,920 --> 00:26:26,580
status of the build dancing like this or

00:26:22,940 --> 00:26:29,070
maybe we can use some kind of API there

00:26:26,580 --> 00:26:31,650
is an API in Jenkins to extract the

00:26:29,070 --> 00:26:33,780
result of the bill to so we can provide

00:26:31,650 --> 00:26:40,220
some information in the pts about each

00:26:33,780 --> 00:26:44,580
job but one question about this instance

00:26:40,220 --> 00:26:48,530
I've already used Jenkins for maybe

00:26:44,580 --> 00:26:53,700
unrelated jobs and it's not really

00:26:48,530 --> 00:26:56,730
government so you are talking about the

00:26:53,700 --> 00:26:58,920
peril team to provide them some some

00:26:56,730 --> 00:27:02,940
continuous information about their zero

00:26:58,920 --> 00:27:07,470
package I far as I know they are

00:27:02,940 --> 00:27:10,110
sowas enough package do you plan to have

00:27:07,470 --> 00:27:14,820
some slave so something like this to be

00:27:10,110 --> 00:27:16,380
able to manage of these jobs as I said

00:27:14,820 --> 00:27:18,870
hardware is really not the issue the

00:27:16,380 --> 00:27:20,430
issue is reading the results and this is

00:27:18,870 --> 00:27:30,660
something in this case the poet team has

00:27:20,430 --> 00:27:32,540
to do okay I certainly cannot I think

00:27:30,660 --> 00:27:36,290
I'd like to explain the job

00:27:32,540 --> 00:27:40,830
configuration because it's really very

00:27:36,290 --> 00:27:43,670
simplistic batch scripts usually so I've

00:27:40,830 --> 00:27:48,090
stripped down the file

00:27:43,670 --> 00:27:50,580
a bit so there's different templates

00:27:48,090 --> 00:27:53,910
which have defined how long to keep the

00:27:50,580 --> 00:27:56,130
locks and some links on the sidebar then

00:27:53,910 --> 00:27:58,470
there's a description here for this

00:27:56,130 --> 00:28:01,110
which is for them saying there's the git

00:27:58,470 --> 00:28:03,900
repo in it and then the git repo is

00:28:01,110 --> 00:28:06,730
replaced master branch and this is the

00:28:03,900 --> 00:28:08,980
base script and the

00:28:06,730 --> 00:28:12,720
here are the recipients if it's

00:28:08,980 --> 00:28:16,050
something like this Jenkins Plus this is

00:28:12,720 --> 00:28:18,520
used by my father to detect which

00:28:16,050 --> 00:28:22,630
there's an email created which is then

00:28:18,520 --> 00:28:25,230
passed by proc mail and then k KGB

00:28:22,630 --> 00:28:27,970
client is used to notify the IRC channel

00:28:25,230 --> 00:28:29,950
so I only used this email notification

00:28:27,970 --> 00:28:32,650
plugin because the Jenkins email

00:28:29,950 --> 00:28:34,840
notification plugins notice notifies you

00:28:32,650 --> 00:28:37,360
when the build fails notifies you about

00:28:34,840 --> 00:28:39,250
every failure and then it notifies you

00:28:37,360 --> 00:28:41,890
about the first successful thing and

00:28:39,250 --> 00:28:43,900
then it shuts up again and this doesn't

00:28:41,890 --> 00:28:46,660
there's a iesson notification plugin for

00:28:43,900 --> 00:28:48,670
Jenkins which doesn't work this way so I

00:28:46,660 --> 00:28:52,930
hacked my way was proc mail to achieve

00:28:48,670 --> 00:28:55,180
the same for I see so and this is a di

00:28:52,930 --> 00:28:57,580
test and as you see the mayor goes only

00:28:55,180 --> 00:28:59,110
to me so if the I wants to have another

00:28:57,580 --> 00:29:03,130
mailing list if they don't want have it

00:28:59,110 --> 00:29:10,090
on the main list just at the the email

00:29:03,130 --> 00:29:16,960
address there and this is it in this

00:29:10,090 --> 00:29:19,860
configuration I show the main file did

00:29:16,960 --> 00:29:19,860
not example one

00:29:43,470 --> 00:29:49,240
probably this size is good enough as you

00:29:46,270 --> 00:29:52,200
see now there's four different templates

00:29:49,240 --> 00:29:57,030
because I didn't get this

00:29:52,200 --> 00:29:59,530
Jenkins up build our inheritance

00:29:57,030 --> 00:30:04,840
completely working so we have a bit

00:29:59,530 --> 00:30:11,919
application in here but then after the

00:30:04,840 --> 00:30:13,659
defaults blah blah blah blah here the

00:30:11,919 --> 00:30:16,090
drop templates for the different manual

00:30:13,659 --> 00:30:19,080
drops and they just repeat this template

00:30:16,090 --> 00:30:23,260
and their URLs are replaced there and

00:30:19,080 --> 00:30:25,630
this continues on for all Debian

00:30:23,260 --> 00:30:27,610
installer jobs because they are all the

00:30:25,630 --> 00:30:31,740
same they're all the same get repository

00:30:27,610 --> 00:30:31,740
and they all run this script and

00:31:00,910 --> 00:31:07,630
so can you read this or should I make it

00:31:03,170 --> 00:31:11,080
one bigger also put in the back bigger

00:31:07,630 --> 00:31:11,080
yeah I know

00:31:16,760 --> 00:31:30,780
so the inert workspace is just cleaning

00:31:21,510 --> 00:31:34,560
it right so it basically always does PD

00:31:30,780 --> 00:31:36,390
belt package and PD Bell packets checks

00:31:34,560 --> 00:31:39,300
in this case if there's no Debian

00:31:36,390 --> 00:31:42,720
control then it fails or succeeds in

00:31:39,300 --> 00:31:44,730
this fail there's some more you have the

00:31:42,720 --> 00:31:48,510
packages for different architectures

00:31:44,730 --> 00:31:52,380
also not built and then P verda is

00:31:48,510 --> 00:31:56,070
updated or created you scan is used to

00:31:52,380 --> 00:31:59,130
download the source target set four-30

00:31:56,070 --> 00:32:01,710
source packages and then PPD where it is

00:31:59,130 --> 00:32:04,440
called this is all I used to build the

00:32:01,710 --> 00:32:07,620
package it's a really super simple and

00:32:04,440 --> 00:32:19,230
the sea route installation has a more or

00:32:07,620 --> 00:32:22,850
less are very similar G edit would be

00:32:19,230 --> 00:32:22,850
the alternative drivers

00:32:30,790 --> 00:32:45,320
so what is happening here so I first set

00:32:39,920 --> 00:32:46,429
a trap then I asked this these upgrade

00:32:45,320 --> 00:32:48,800
jobs are called

00:32:46,429 --> 00:32:52,010
the CS root installation drops are

00:32:48,800 --> 00:32:56,890
called with up to three parameters the

00:32:52,010 --> 00:33:05,120
first is the distribution the second

00:32:56,890 --> 00:33:07,160
seed config so then there's the full

00:33:05,120 --> 00:33:09,470
desktop test is defined here really what

00:33:07,160 --> 00:33:11,330
packages that means I didn't explain

00:33:09,470 --> 00:33:13,100
that in the beginning there's desktop

00:33:11,330 --> 00:33:16,900
for the four different desktop and the

00:33:13,100 --> 00:33:22,610
full desktop is all for desktops

00:33:16,900 --> 00:33:25,730
together plus whatever cups chromium ice

00:33:22,610 --> 00:33:28,280
visa LibreOffice mplayer wine whatever I

00:33:25,730 --> 00:33:33,230
thought would be under standard

00:33:28,280 --> 00:33:34,970
installation and there are some variants

00:33:33,230 --> 00:33:41,510
in here because the package names have

00:33:34,970 --> 00:33:43,179
changed over time and these upgrade

00:33:41,510 --> 00:33:46,010
functions are here

00:33:43,179 --> 00:33:48,650
prepare the bootstrap is where I write

00:33:46,010 --> 00:33:55,550
policy RCD and configure up and run

00:33:48,650 --> 00:34:06,230
apt-get update there is a bootstrap the

00:33:55,550 --> 00:34:10,639
bootstrap really does it does it the

00:34:06,230 --> 00:34:14,720
bootstrap and does not get installed I'm

00:34:10,639 --> 00:34:17,619
too stressed now to analyze how this

00:34:14,720 --> 00:34:20,619
circuit works but it's not that hard

00:34:17,619 --> 00:34:20,619
yes

00:34:23,440 --> 00:34:29,599
I'm relaying question from IRC from para

00:34:26,389 --> 00:34:31,190
he asks when should one test ISO

00:34:29,599 --> 00:34:33,710
installs and when should one use chroot

00:34:31,190 --> 00:34:35,569
tests drinkin seems to do both are there

00:34:33,710 --> 00:34:42,260
times when one is more sensible than the

00:34:35,569 --> 00:34:43,369
other and GI tests are both scheduled

00:34:42,260 --> 00:34:46,879
based on time

00:34:43,369 --> 00:34:49,579
the chroot tests are done daily for sit

00:34:46,879 --> 00:34:51,859
Jesse and maybe even still easy because

00:34:49,579 --> 00:34:54,470
they'd rather use less little resources

00:34:51,859 --> 00:34:57,890
when the GI installation has taken more

00:34:54,470 --> 00:35:00,319
so I run them a bit less often and one

00:34:57,890 --> 00:35:01,640
other question from him was how hard

00:35:00,319 --> 00:35:03,859
would it be to integrate the Jenkins

00:35:01,640 --> 00:35:06,170
result into the Fed message Enterprise

00:35:03,859 --> 00:35:11,059
bus that's being implemented as a tree

00:35:06,170 --> 00:35:15,220
soccer project into what fit fed message

00:35:11,059 --> 00:35:17,869
it's a hmm Simon here

00:35:15,220 --> 00:35:20,030
it's a google Summer of Code project

00:35:17,869 --> 00:35:21,920
something that fedora roads that lets

00:35:20,030 --> 00:35:24,410
parts of the distribution that other

00:35:21,920 --> 00:35:27,559
parts know that things are happening so

00:35:24,410 --> 00:35:28,790
when a package build happens other

00:35:27,559 --> 00:35:30,410
things that want to be triggered off

00:35:28,790 --> 00:35:35,240
that package build can hear about it and

00:35:30,410 --> 00:35:37,369
do things etc it shouldn't be that hard

00:35:35,240 --> 00:35:40,089
is just running another yeah script

00:35:37,369 --> 00:35:40,089
basically

00:35:43,930 --> 00:35:53,080
i really suggest check out this git

00:35:51,130 --> 00:35:55,570
repository and look at this shell script

00:35:53,080 --> 00:36:07,000
they are really easy to understand I've

00:35:55,570 --> 00:36:10,240
commented them and you had two more

00:36:07,000 --> 00:36:12,460
questions myself here oh yeah then I was

00:36:10,240 --> 00:36:14,200
thinking about Jenkins Debian orc

00:36:12,460 --> 00:36:15,910
mostly because other people have

00:36:14,200 --> 00:36:20,680
suggested it I don't really care what's

00:36:15,910 --> 00:36:22,660
the URL is I should someday probably

00:36:20,680 --> 00:36:25,330
still doing that coms 30 and finally

00:36:22,660 --> 00:36:29,410
announced this was also running

00:36:25,330 --> 00:36:32,850
unofficially yeah

00:36:29,410 --> 00:36:32,850
questions from you more

00:36:38,799 --> 00:36:44,740
well sorry if I'm mistaken but switching

00:36:41,980 --> 00:36:47,470
from Jenkins given a dog would mean that

00:36:44,740 --> 00:36:49,809
maybe TSA would care about the machine

00:36:47,470 --> 00:36:54,339
and maybe that's a prerequisite to

00:36:49,809 --> 00:36:59,049
actually use Jenkins result for testing

00:36:54,339 --> 00:37:01,240
migration scrip I don't know what code

00:36:59,049 --> 00:37:04,390
beer I mean if we're going to integrate

00:37:01,240 --> 00:37:07,030
that into the normal release process and

00:37:04,390 --> 00:37:09,130
maybe it should I mean it should become

00:37:07,030 --> 00:37:13,030
an official service and switch to that

00:37:09,130 --> 00:37:16,150
argument I think this is the difficult

00:37:13,030 --> 00:37:19,599
part the DSA maintenance there because

00:37:16,150 --> 00:37:23,369
it's similar to the Peapod setup which

00:37:19,599 --> 00:37:23,369
TSA is half happy about

00:37:24,359 --> 00:37:31,150
hello TSA thanks for your support

00:37:27,400 --> 00:37:34,240
I was just like to thank you for running

00:37:31,150 --> 00:37:39,089
this service and making it available for

00:37:34,240 --> 00:37:39,089
forest to improve them in thank you

00:37:43,920 --> 00:37:48,940
this is the same cue session I'd also

00:37:46,990 --> 00:37:56,490
like to thank entry for helping me with

00:37:48,940 --> 00:38:00,069
the slides we already had quite a bit of

00:37:56,490 --> 00:38:03,339
question session so is there are there

00:38:00,069 --> 00:38:05,590
any more question if not then let us

00:38:03,339 --> 00:38:11,829
thank holder

00:38:05,590 --> 00:38:11,829

YouTube URL: https://www.youtube.com/watch?v=ISNdo4isWgk


