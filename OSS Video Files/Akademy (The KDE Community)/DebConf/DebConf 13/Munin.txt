Title: Munin
Publication date: 2017-11-28
Playlist: DebConf 13
Description: 
	by Steve Schnepp

At: DebConf13
https://debconf13.debconf.org/
Room: Second talk room
Scheduled start: 2013-08-12 09:30:00
Captions: 
	00:00:00,060 --> 00:00:15,210
I will have impressed so let's begin

00:00:11,880 --> 00:00:18,060
with agendas its I will talk a little

00:00:15,210 --> 00:00:24,990
bit about the history

00:00:18,060 --> 00:00:27,359
what makes munion very unique well see

00:00:24,990 --> 00:00:30,170
that it makes it also really uniquely

00:00:27,359 --> 00:00:35,430
but in not a very good way

00:00:30,170 --> 00:00:39,480
what makes unique in 2.0 its version

00:00:35,430 --> 00:00:46,520
that got in wizzy and it's very

00:00:39,480 --> 00:00:50,910
interesting we also will also see how

00:00:46,520 --> 00:00:54,510
are calling to the new features of 2-0

00:00:50,910 --> 00:01:03,170
you can scale much more Union install

00:00:54,510 --> 00:01:08,490
from 1.4 package and we'll see also

00:01:03,170 --> 00:01:10,080
limitation of 2.0 I mean since no you

00:01:08,490 --> 00:01:13,770
can scale quite well

00:01:10,080 --> 00:01:17,549
I mean directly you can scale really

00:01:13,770 --> 00:01:21,090
well practically well we'll see we still

00:01:17,549 --> 00:01:25,890
have some big big issues very different

00:01:21,090 --> 00:01:31,460
from the one in 1.4 but still I will

00:01:25,890 --> 00:01:35,299
present rapidly roadmap for 2.2 but

00:01:31,460 --> 00:01:42,000
hopefully is released this year well

00:01:35,299 --> 00:01:46,290
that's a challenge thing is if you have

00:01:42,000 --> 00:01:48,630
any questions I will stop at 10 and we

00:01:46,290 --> 00:01:55,799
will have 15 minutes for our questions

00:01:48,630 --> 00:02:00,960
just after so brief sorry when Union was

00:01:55,799 --> 00:02:04,770
born in 2002 he was named the RRD I mean

00:02:00,960 --> 00:02:06,840
I didn't know that fact before I mean I

00:02:04,770 --> 00:02:09,270
just know it because I research for the

00:02:06,840 --> 00:02:13,500
presentation

00:02:09,270 --> 00:02:17,490
and it's not well known fact but I mean

00:02:13,500 --> 00:02:21,390
some code I mean most code still dates

00:02:17,490 --> 00:02:26,370
from but day so it's quite important to

00:02:21,390 --> 00:02:30,720
see issues when changing code I mean

00:02:26,370 --> 00:02:34,470
it's more like geology you have every

00:02:30,720 --> 00:02:41,280
every layers you want to add the

00:02:34,470 --> 00:02:46,820
functionality one layer one layer so I

00:02:41,280 --> 00:02:51,710
hacked zooming for 1.2 in 2007 I mean

00:02:46,820 --> 00:02:57,410
wonder 1.2 was very static

00:02:51,710 --> 00:03:04,440
well I maintained it in my own private

00:02:57,410 --> 00:03:07,650
place and in 2009 1.4 came out and I

00:03:04,440 --> 00:03:11,780
asked if I could send with my patch to M

00:03:07,650 --> 00:03:19,830
Union and well they got accepted and

00:03:11,780 --> 00:03:23,370
from 2009 and until 2011 so I was a slow

00:03:19,830 --> 00:03:28,070
slowly gaining ground in the Union

00:03:23,370 --> 00:03:30,600
community until now were well I just

00:03:28,070 --> 00:03:35,340
took over the leadership from the

00:03:30,600 --> 00:03:38,880
previous team it didn't happen

00:03:35,340 --> 00:03:39,270
officially but it just it's just the way

00:03:38,880 --> 00:03:44,790
it is

00:03:39,270 --> 00:03:48,510
and so in 2002 are released 2.0 thanks

00:03:44,790 --> 00:03:51,240
to halter who said hey you have to

00:03:48,510 --> 00:03:55,620
release now otherwise I mean you will

00:03:51,240 --> 00:04:00,300
release in 10 years and so thanks to him

00:03:55,620 --> 00:04:02,600
so thing is was very very hectic at the

00:04:00,300 --> 00:04:10,380
early days of 2000

00:04:02,600 --> 00:04:12,240
I realized that biggest point was since

00:04:10,380 --> 00:04:15,420
it wasn't released we didn't have many

00:04:12,240 --> 00:04:17,160
testers and since we didn't have many

00:04:15,420 --> 00:04:20,220
terrorists I didn't want to release it

00:04:17,160 --> 00:04:22,419
since I still have some burg stuff that

00:04:20,220 --> 00:04:25,060
came out and so on

00:04:22,419 --> 00:04:30,969
so thanks to culture we broke the cycle

00:04:25,060 --> 00:04:37,469
and we released in 2012 it's interesting

00:04:30,969 --> 00:04:40,539
since it's ten years since it's born

00:04:37,469 --> 00:04:44,889
someone said every software gets good in

00:04:40,539 --> 00:04:52,180
after 10 years oh maybe and it's in

00:04:44,889 --> 00:04:59,770
wizzy since September 2012 and it's in

00:04:52,180 --> 00:05:05,520
stable since we get cut out so in 2013 I

00:04:59,770 --> 00:05:10,930
released 2.1 it's an unstable branch

00:05:05,520 --> 00:05:14,919
because I didn't want to have the same

00:05:10,930 --> 00:05:16,960
problems as wofford 2.0 is lack of

00:05:14,919 --> 00:05:18,969
tester so I'd just package something

00:05:16,960 --> 00:05:21,849
packaged with development branch and

00:05:18,969 --> 00:05:25,199
realized it it's unstable normally it

00:05:21,849 --> 00:05:30,099
works but well it's unstable

00:05:25,199 --> 00:05:32,830
you know what unstable means and the

00:05:30,099 --> 00:05:42,729
biggest thing is the internals will

00:05:32,830 --> 00:05:47,620
change in in lifetime so I said October

00:05:42,729 --> 00:05:51,009
2013 is target for release 2.2 but time

00:05:47,620 --> 00:05:53,620
will tell I mean if you don't fix

00:05:51,009 --> 00:05:56,500
timelines deadlines I mean you will

00:05:53,620 --> 00:05:58,080
never release things so better be late

00:05:56,500 --> 00:06:03,610
than never

00:05:58,080 --> 00:06:08,620
okay so the very simple design principle

00:06:03,610 --> 00:06:12,009
of munion is it's really love this quote

00:06:08,620 --> 00:06:14,110
from Alan Kay it's simple things should

00:06:12,009 --> 00:06:17,050
be simple and complex things should be

00:06:14,110 --> 00:06:19,689
possible but exactly the module of M

00:06:17,050 --> 00:06:24,960
Union Union makes simple things simple

00:06:19,689 --> 00:06:24,960
and complex things impossible

00:06:26,090 --> 00:06:32,730
it's very easy to use it has a saint out

00:06:29,490 --> 00:06:34,350
of box fear behavior because when you

00:06:32,730 --> 00:06:37,170
install it on your server it's

00:06:34,350 --> 00:06:39,950
automatically starts monitoring I mean

00:06:37,170 --> 00:06:43,910
if it not it's a bag please report it

00:06:39,950 --> 00:06:46,920
and it has a complete plug-and-play

00:06:43,910 --> 00:06:51,020
infrastructure I mean compared to others

00:06:46,920 --> 00:06:54,780
I mean you only thing you need is to

00:06:51,020 --> 00:06:59,430
declare the node because well

00:06:54,780 --> 00:07:02,100
broadcasting on local network is not

00:06:59,430 --> 00:07:04,500
very practical in my point of view so

00:07:02,100 --> 00:07:07,710
it's the only thing you need to to say

00:07:04,500 --> 00:07:12,510
you have to pull this node and all the

00:07:07,710 --> 00:07:18,660
node will just an over config to the

00:07:12,510 --> 00:07:22,830
master so I mean graph our drawing thing

00:07:18,660 --> 00:07:26,400
is our user the vast majority of our

00:07:22,830 --> 00:07:30,930
user just have one server to manager and

00:07:26,400 --> 00:07:35,430
it's the same install is on it

00:07:30,930 --> 00:07:38,640
I mean what's that's why the default

00:07:35,430 --> 00:07:41,190
Manion are always targeted at these user

00:07:38,640 --> 00:07:44,550
since if you have a bigger install well

00:07:41,190 --> 00:07:51,480
I mean you already know how to change

00:07:44,550 --> 00:07:57,540
config files usually as I said some are

00:07:51,480 --> 00:08:00,800
running bigger install these are the one

00:07:57,540 --> 00:08:05,670
what interests me very much in 2.2 since

00:08:00,800 --> 00:08:10,530
well we do address really well the one

00:08:05,670 --> 00:08:15,090
node install type but for for bigger

00:08:10,530 --> 00:08:20,190
install we we have very much problems I

00:08:15,090 --> 00:08:24,090
mean we improved very much in from 1.4

00:08:20,190 --> 00:08:28,100
to 2.0 but now we hit our limits but we

00:08:24,090 --> 00:08:28,100
will discuss about just after

00:08:29,460 --> 00:08:37,539
okay so new features mean we really have

00:08:33,370 --> 00:08:41,650
no a full CGI implementation I mean the

00:08:37,539 --> 00:08:45,730
one in 1.5 you should not use it I mean

00:08:41,650 --> 00:08:50,800
it works sometimes it's bugged every

00:08:45,730 --> 00:08:53,950
time so it has also a full fast surgery

00:08:50,800 --> 00:08:56,110
CGI implementation bits this is very

00:08:53,950 --> 00:09:01,660
important to have adequate performance

00:08:56,110 --> 00:09:04,360
so you don't reload everything the

00:09:01,660 --> 00:09:07,510
biggest selling point is it has complete

00:09:04,360 --> 00:09:12,660
integration with Erik Artie we will talk

00:09:07,510 --> 00:09:18,250
more about that later but this is the

00:09:12,660 --> 00:09:21,820
main issue when scaling because Rd is

00:09:18,250 --> 00:09:24,790
very nice but doesn't scale very well in

00:09:21,820 --> 00:09:28,210
its native without without America RT

00:09:24,790 --> 00:09:32,220
and thing is when you use our Akagi some

00:09:28,210 --> 00:09:37,990
guidelines but I will describe later and

00:09:32,220 --> 00:09:44,050
you should not do what it has native SH

00:09:37,990 --> 00:09:49,210
transferred I mean well it's before you

00:09:44,050 --> 00:09:53,890
use a plain TCP for connector for nine

00:09:49,210 --> 00:09:58,320
for nine you could use TLS but most

00:09:53,890 --> 00:10:02,020
people didn't and with native as such

00:09:58,320 --> 00:10:06,880
usually people only also already use SSH

00:10:02,020 --> 00:10:08,880
on veut installed so setting ssh

00:10:06,880 --> 00:10:12,310
transport for them it's quite easy

00:10:08,880 --> 00:10:14,260
whereas having a TLS thing is you have

00:10:12,310 --> 00:10:18,190
to have a certificate and so on so on

00:10:14,260 --> 00:10:21,760
it's quite much complicated and it's

00:10:18,190 --> 00:10:26,910
avoid open new port as I said and it's

00:10:21,760 --> 00:10:31,930
secure it's usually more integrated than

00:10:26,910 --> 00:10:34,720
in setups the average the very big

00:10:31,930 --> 00:10:39,610
feeder is asking proxy it's something

00:10:34,720 --> 00:10:42,830
that sits on the node but Paul's the

00:10:39,610 --> 00:10:50,020
node autonomously and stores

00:10:42,830 --> 00:10:54,080
locally on the node and the Union update

00:10:50,020 --> 00:10:57,190
will van connect to a sink the client

00:10:54,080 --> 00:11:00,830
part and just replay this pool but he

00:10:57,190 --> 00:11:05,270
pulled just before so it has a very

00:11:00,830 --> 00:11:07,730
interesting features is if you have some

00:11:05,270 --> 00:11:10,960
nodes that have loose connection for

00:11:07,730 --> 00:11:14,840
example you want to manage her remote

00:11:10,960 --> 00:11:18,680
location that has sometimes a new

00:11:14,840 --> 00:11:20,450
network or whatever since it's locally

00:11:18,680 --> 00:11:25,490
spooling I mean when you connect you

00:11:20,450 --> 00:11:30,680
will cover everything but was collected

00:11:25,490 --> 00:11:33,680
meanwhile you didn't connect so those

00:11:30,680 --> 00:11:39,650
little white bars you were accustomed to

00:11:33,680 --> 00:11:44,840
are gone it also speed up spall even for

00:11:39,650 --> 00:11:49,940
a local network since it delegates all

00:11:44,840 --> 00:11:53,120
the polling and waiting for plugins to

00:11:49,940 --> 00:11:55,280
assing proxy I mean the data collection

00:11:53,120 --> 00:12:00,170
from the minion that day goes really

00:11:55,280 --> 00:12:03,920
faster it only replaces the lock text

00:12:00,170 --> 00:12:07,640
file so thing is when you have a big

00:12:03,920 --> 00:12:14,930
cluster it sometimes make sense to use I

00:12:07,640 --> 00:12:18,410
think since well the fixed 5 minute for

00:12:14,930 --> 00:12:25,220
a minute update is still a hard one and

00:12:18,410 --> 00:12:30,020
you cannot go further and one less known

00:12:25,220 --> 00:12:32,780
thing about asking proxy is it can Paul

00:12:30,020 --> 00:12:35,300
advisers update rates I mean if you if

00:12:32,780 --> 00:12:38,780
you have one plugin but that says I want

00:12:35,300 --> 00:12:42,140
to be pulled by every one hour

00:12:38,780 --> 00:12:45,680
mmm I think will only pull it one hour

00:12:42,140 --> 00:12:47,690
and most interesting part is if you have

00:12:45,680 --> 00:12:49,640
a plugin but says I want to be pulled

00:12:47,690 --> 00:12:53,300
every 10 seconds I think we'll pull it

00:12:49,640 --> 00:12:55,860
10 seconds and still sends or every five

00:12:53,300 --> 00:12:59,540
minutes over data back to

00:12:55,860 --> 00:13:03,180
in update so you won't have real-time

00:12:59,540 --> 00:13:11,250
information but you have very precise

00:13:03,180 --> 00:13:18,570
information so no we we go to

00:13:11,250 --> 00:13:22,230
scalability but the biggest focus on 2.0

00:13:18,570 --> 00:13:29,490
because the first one was a zooming part

00:13:22,230 --> 00:13:33,570
and zooming just showed that well you

00:13:29,490 --> 00:13:36,000
you can have huge data file since it

00:13:33,570 --> 00:13:40,530
doesn't it's not very useful to zoom on

00:13:36,000 --> 00:13:44,640
one year history if if you don't keep

00:13:40,530 --> 00:13:49,410
the finer granularity in Rd one year

00:13:44,640 --> 00:13:51,750
back so butts will be scaling whether at

00:13:49,410 --> 00:13:55,310
the end really what people want is

00:13:51,750 --> 00:14:00,600
adding more nodes but the most common

00:13:55,310 --> 00:14:03,960
scaling issue but we inside the node you

00:14:00,600 --> 00:14:06,920
can also have a huge number of plugins

00:14:03,960 --> 00:14:10,550
some have very very large installation

00:14:06,920 --> 00:14:15,450
especially when you start to use SNMP

00:14:10,550 --> 00:14:21,840
because the SNMP is done by one host to

00:14:15,450 --> 00:14:25,680
manager many many remote rooters or SNMP

00:14:21,840 --> 00:14:30,570
agent and the thing is some also have

00:14:25,680 --> 00:14:33,300
slow plugins I mean we already we

00:14:30,570 --> 00:14:35,910
already discussed about the milliner de

00:14:33,300 --> 00:14:39,780
truth take less than five minutes

00:14:35,910 --> 00:14:44,370
otherwise well bad thing happens that's

00:14:39,780 --> 00:14:46,350
one point and that's a hard rule if

00:14:44,370 --> 00:14:48,750
human in updates takes more of five

00:14:46,350 --> 00:14:52,880
minutes the really bad thing happens

00:14:48,750 --> 00:14:56,460
mostly white bars and so if you have

00:14:52,880 --> 00:15:00,210
many many plugins and many many plugins

00:14:56,460 --> 00:15:04,310
take quite a long time to to Paul since

00:15:00,210 --> 00:15:08,750
it's all synchronous so the fact is well

00:15:04,310 --> 00:15:12,819
it can go even if you paralyzed

00:15:08,750 --> 00:15:18,410
very much it sometimes it still goes

00:15:12,819 --> 00:15:20,959
quite slowly and if you multiply number

00:15:18,410 --> 00:15:27,800
flagon with long restaurant time with

00:15:20,959 --> 00:15:31,300
many nodes you have you usually pass and

00:15:27,800 --> 00:15:34,610
is scaling the data usually but with

00:15:31,300 --> 00:15:37,910
zooming part I mean usually one many

00:15:34,610 --> 00:15:41,329
many people asked for well I can zoom

00:15:37,910 --> 00:15:44,120
one year ago but I mean I only have one

00:15:41,329 --> 00:15:49,040
bar per day I mean I don't care about

00:15:44,120 --> 00:15:54,560
the average for one day so here is you

00:15:49,040 --> 00:15:58,970
can natively have much more data inside

00:15:54,560 --> 00:16:03,740
will see one but later so scaling the

00:15:58,970 --> 00:16:08,029
master to have big install the first

00:16:03,740 --> 00:16:10,490
thing is use path CGI when default as

00:16:08,029 --> 00:16:13,040
cron based remembered if is for the

00:16:10,490 --> 00:16:17,509
typical user but have only one node and

00:16:13,040 --> 00:16:20,750
one server and you anyone but has more

00:16:17,509 --> 00:16:25,009
than let's say five nodes should really

00:16:20,750 --> 00:16:32,029
go CGI Road and not really CGI but fast

00:16:25,009 --> 00:16:35,120
CGI because it's the cron road is you

00:16:32,029 --> 00:16:37,699
generate every kind of graphic and it's

00:16:35,120 --> 00:16:44,000
just pointless I mean it's very simple

00:16:37,699 --> 00:16:46,759
to add it's pointless as I said you you

00:16:44,000 --> 00:16:51,019
have to use our Authority because the

00:16:46,759 --> 00:16:53,600
thing is Rd is very very nice it's a

00:16:51,019 --> 00:16:56,480
very nice piece of software but it has

00:16:53,600 --> 00:17:01,279
only one main problem is it's so

00:16:56,480 --> 00:17:06,140
efficient but it it right it writes only

00:17:01,279 --> 00:17:07,419
the very little part of the file and to

00:17:06,140 --> 00:17:12,350
the underlaying

00:17:07,419 --> 00:17:14,569
IO subsystem already updates when you

00:17:12,350 --> 00:17:17,299
have a big one they feel just like

00:17:14,569 --> 00:17:22,480
random i/o I mean when I say Ron de Mayo

00:17:17,299 --> 00:17:26,330
it's real random i/o I mean almost Creek

00:17:22,480 --> 00:17:31,040
cryptically sakura mean when I when I

00:17:26,330 --> 00:17:33,350
asked her about some storage vendor he

00:17:31,040 --> 00:17:36,590
said okay we're on my way we can do that

00:17:33,350 --> 00:17:37,010
and I plugged meaning with a big install

00:17:36,590 --> 00:17:41,570
on it

00:17:37,010 --> 00:17:47,660
I say random i/o and not that random

00:17:41,570 --> 00:17:50,360
usually and the people of already are

00:17:47,660 --> 00:17:53,090
well well aware of it and the even

00:17:50,360 --> 00:17:56,870
designed or authority that is specially

00:17:53,090 --> 00:18:00,430
designed to make this random i/o Burford

00:17:56,870 --> 00:18:04,450
and to make it like normal random i/o

00:18:00,430 --> 00:18:09,920
and it's called very the slide we can

00:18:04,450 --> 00:18:12,560
you can google it it's arity escape i

00:18:09,920 --> 00:18:17,150
he'll it's really really rail described

00:18:12,560 --> 00:18:22,850
and to understand what's behind our

00:18:17,150 --> 00:18:25,430
caste it even works on SSD because

00:18:22,850 --> 00:18:28,970
usually were London by you okay no

00:18:25,430 --> 00:18:31,730
problem just use SSD but storage vendor

00:18:28,970 --> 00:18:37,360
said no problem we just put an SSD for

00:18:31,730 --> 00:18:40,940
fingers after my test after four hours

00:18:37,360 --> 00:18:46,120
with yeah big install I mean all the SSD

00:18:40,940 --> 00:18:48,770
were just offline because too many I use

00:18:46,120 --> 00:18:53,900
because it writes rights rights right a

00:18:48,770 --> 00:18:59,320
lot so

00:18:53,900 --> 00:19:05,450
SSD is interesting but not only for us

00:18:59,320 --> 00:19:08,840
thing is energy has only one very big

00:19:05,450 --> 00:19:11,720
drawback is you should never ever read

00:19:08,840 --> 00:19:14,750
from the already file especially in

00:19:11,720 --> 00:19:18,500
Chrome because if you read on demon it's

00:19:14,750 --> 00:19:22,010
perfect it's only flush file you're

00:19:18,500 --> 00:19:26,110
reading and if you read it in cron by

00:19:22,010 --> 00:19:29,450
default I mean you will read the whole

00:19:26,110 --> 00:19:32,890
install and but exactly the same as not

00:19:29,450 --> 00:19:32,890
using Eric RT so

00:19:33,290 --> 00:19:44,690
thing is feminine you need lots of RAM

00:19:36,910 --> 00:19:47,270
because as I said we have an RHD but the

00:19:44,690 --> 00:19:52,070
more RAM you put at aircard even more

00:19:47,270 --> 00:19:56,900
the longer you can keep the spool and so

00:19:52,070 --> 00:20:01,700
the thing is it can write very less

00:19:56,900 --> 00:20:03,620
often and that's very interesting if you

00:20:01,700 --> 00:20:07,250
have lots of RAM you can multiply the

00:20:03,620 --> 00:20:10,580
number of workers it means you in

00:20:07,250 --> 00:20:14,330
obvious if you have since meaning is

00:20:10,580 --> 00:20:16,970
very very much io bound ever so for

00:20:14,330 --> 00:20:19,700
waiting for an ad or waiting for i/o

00:20:16,970 --> 00:20:24,590
subsystem if you have many more workers

00:20:19,700 --> 00:20:31,550
usually it it helps a lot because every

00:20:24,590 --> 00:20:35,750
worker is a single threaded thing is but

00:20:31,550 --> 00:20:39,440
to never ever swap right that's obvious

00:20:35,750 --> 00:20:42,620
but thing is munion

00:20:39,440 --> 00:20:45,860
is designed to use all the memory of

00:20:42,620 --> 00:20:48,890
video of its workers so if you only swap

00:20:45,860 --> 00:20:51,200
a little thing I mean there is no Jose

00:20:48,890 --> 00:20:54,890
there is no last memory you cannot swap

00:20:51,200 --> 00:20:58,100
you for people who know the swap enos

00:20:54,890 --> 00:21:00,820
setting it means the swapping before I

00:20:58,100 --> 00:21:04,760
mean trading some application memory to

00:21:00,820 --> 00:21:05,150
to file cache memory but it's not a good

00:21:04,760 --> 00:21:09,530
idea

00:21:05,150 --> 00:21:19,450
in minun since the application memory is

00:21:09,530 --> 00:21:19,450
useful at one point yeah that's ok

00:21:20,180 --> 00:21:26,420
on the nicer you have really to watch

00:21:24,260 --> 00:21:32,210
out for shared Hauer

00:21:26,420 --> 00:21:35,180
because the union is very nice and it

00:21:32,210 --> 00:21:42,200
loves to any late any hard rule you put

00:21:35,180 --> 00:21:45,080
it on it because well it has it's

00:21:42,200 --> 00:21:47,149
designed to be very scalable and you can

00:21:45,080 --> 00:21:50,960
launch as many processors you

00:21:47,149 --> 00:21:53,929
wand will receive some kind of some

00:21:50,960 --> 00:21:57,109
limitation just after but it's designed

00:21:53,929 --> 00:21:59,989
to be very scalable but the consumer is

00:21:57,109 --> 00:22:00,830
not very efficient manner I mean it's

00:21:59,989 --> 00:22:06,019
not very clever

00:22:00,830 --> 00:22:11,479
it's just use and goes on your system so

00:22:06,019 --> 00:22:17,989
far of record I had a storage vendor but

00:22:11,479 --> 00:22:23,889
was mute alized with all of application

00:22:17,989 --> 00:22:28,159
of thing and when we wrote to it I mean

00:22:23,889 --> 00:22:32,239
99% of apps were delivered to one minion

00:22:28,159 --> 00:22:32,899
server so let's imagine what stays for

00:22:32,239 --> 00:22:38,779
the others

00:22:32,899 --> 00:22:42,619
not much so we put it on dedicated our

00:22:38,779 --> 00:22:49,249
it goes slower but well over a plication

00:22:42,619 --> 00:22:51,710
are happier the thing is set before is

00:22:49,249 --> 00:22:58,909
used as in proxy even if you don't have

00:22:51,710 --> 00:23:01,099
a special need on it thing is it will it

00:22:58,909 --> 00:23:05,539
will enable a very fast collection as

00:23:01,099 --> 00:23:08,589
all the i/o time all the wait time is

00:23:05,539 --> 00:23:13,700
absorbed directly by the I think demon

00:23:08,589 --> 00:23:16,159
you your immune in update almost doesn't

00:23:13,700 --> 00:23:19,179
wait at all I mean it only connects

00:23:16,159 --> 00:23:23,019
reads a file on the on the server and

00:23:19,179 --> 00:23:29,059
disconnect so for usually typical

00:23:23,019 --> 00:23:32,149
polling time is about 10 to 15 seconds

00:23:29,059 --> 00:23:35,899
with unionizing typical time is about

00:23:32,149 --> 00:23:40,999
one second to mostly two seconds depends

00:23:35,899 --> 00:23:44,710
on but you have a ten factor and that's

00:23:40,999 --> 00:23:44,710
very interesting when you want to scale

00:23:46,179 --> 00:23:52,940
because it lowers the number of update

00:23:50,029 --> 00:23:55,820
workers they did I said meaning uses

00:23:52,940 --> 00:23:59,149
lots of RAM okay but usually you don't

00:23:55,820 --> 00:24:00,780
want to use Ram for million update you

00:23:59,149 --> 00:24:04,380
prefer to use ramp

00:24:00,780 --> 00:24:07,750
the restitution part photographs for a

00:24:04,380 --> 00:24:11,110
HTML which we will speak about later

00:24:07,750 --> 00:24:16,150
and so mean update you would just want

00:24:11,110 --> 00:24:20,260
it to be very quick and so if you don't

00:24:16,150 --> 00:24:22,840
have the it's if it's not IO bound from

00:24:20,260 --> 00:24:25,290
Network anymore it's only CPU gone and

00:24:22,840 --> 00:24:27,910
you don't want to have more than the CPU

00:24:25,290 --> 00:24:33,160
on your hardware it's and so where is

00:24:27,910 --> 00:24:36,310
it's useless anyway and the thing but is

00:24:33,160 --> 00:24:39,730
a side effect but it's very nice it's if

00:24:36,310 --> 00:24:43,450
your munion updates is very slow happens

00:24:39,730 --> 00:24:49,360
and we speak at about five minutes hard

00:24:43,450 --> 00:24:51,910
limit all I think enabled nodes will not

00:24:49,360 --> 00:24:56,980
have any data loss you will have delays

00:24:51,910 --> 00:25:00,580
in integrating the data but you won't

00:24:56,980 --> 00:25:05,430
have these in famous white bars but most

00:25:00,580 --> 00:25:05,430
of you already experienced as the ones

00:25:06,720 --> 00:25:15,760
but was for a master forever node as I

00:25:11,710 --> 00:25:19,300
said you have some have huge number of

00:25:15,760 --> 00:25:27,520
plugins I mean the biggest in slow I saw

00:25:19,300 --> 00:25:28,180
is about 1000 plugins Wow it's very

00:25:27,520 --> 00:25:31,630
interesting

00:25:28,180 --> 00:25:35,310
also as I think because it has before

00:25:31,630 --> 00:25:39,640
caption and I think knows it will just

00:25:35,310 --> 00:25:42,670
prior to to I think the men in the

00:25:39,640 --> 00:25:46,480
update was doing it very sequential II

00:25:42,670 --> 00:25:50,380
and one who has a plugin well to have it

00:25:46,480 --> 00:25:52,690
in less than five minutes it has to be

00:25:50,380 --> 00:25:56,830
quite fast since you it's not the only

00:25:52,690 --> 00:26:02,410
node but is a pole in a sync with the

00:25:56,830 --> 00:26:07,380
floral caption each plugin will be asked

00:26:02,410 --> 00:26:12,830
in its own process so if you have

00:26:07,380 --> 00:26:15,980
long-running plugins as as as

00:26:12,830 --> 00:26:19,640
after you also can use the for caption

00:26:15,980 --> 00:26:21,769
you before if the playing in can usually

00:26:19,640 --> 00:26:24,850
they pull themselves either in crown and

00:26:21,769 --> 00:26:27,640
they just read the status back I mean

00:26:24,850 --> 00:26:31,519
that was the official way of doing it in

00:26:27,640 --> 00:26:35,380
1.4 but since I think does exactly but

00:26:31,519 --> 00:26:39,880
in 2.0 just use I think I mean its

00:26:35,380 --> 00:26:45,019
standard and it just makes use your of

00:26:39,880 --> 00:26:49,490
whatever you you use but for the node

00:26:45,019 --> 00:26:51,919
usually the only problem the note has

00:26:49,490 --> 00:26:54,620
when you have many many plugins is the

00:26:51,919 --> 00:26:58,490
starting of a node is typically

00:26:54,620 --> 00:27:01,570
sterilized but when you have 1000 plugin

00:26:58,490 --> 00:27:01,570
it's a big problem

00:27:01,870 --> 00:27:07,039
okay

00:27:03,080 --> 00:27:11,690
so now we were scaling the data as I

00:27:07,039 --> 00:27:17,059
said before zooming brought the need of

00:27:11,690 --> 00:27:21,200
having precise data very far away in in

00:27:17,059 --> 00:27:27,740
time and to keep Marla line nerdy it's

00:27:21,200 --> 00:27:29,559
very very easy in 2.0 you have a new new

00:27:27,740 --> 00:27:32,870
option its graph data size

00:27:29,559 --> 00:27:36,830
you already have you already had it in

00:27:32,870 --> 00:27:40,399
in 1.4 but it was global

00:27:36,830 --> 00:27:45,190
now it's per plugin it's also global but

00:27:40,399 --> 00:27:45,190
you can see a precise at per plugin and

00:27:46,389 --> 00:27:53,899
actually it's designed to be per per

00:27:50,269 --> 00:27:56,899
field but it doesn't work we it has its

00:27:53,899 --> 00:28:00,139
bugged and mostly works per plugin bats

00:27:56,899 --> 00:28:03,070
works well but it only works on early

00:28:00,139 --> 00:28:10,370
create so there is an external tool to

00:28:03,070 --> 00:28:13,580
move it to you wrote a tool but is

00:28:10,370 --> 00:28:18,730
called already copy to move from some

00:28:13,580 --> 00:28:24,529
data from small Rd to a bigger already

00:28:18,730 --> 00:28:27,340
but that's not part of Herman and when

00:28:24,529 --> 00:28:27,340
you created it

00:28:27,420 --> 00:28:37,800
it's everything is handled automatically

00:28:30,540 --> 00:28:40,440
bar by already and and it's it's very

00:28:37,800 --> 00:28:44,160
fast and already as I said it's very

00:28:40,440 --> 00:28:48,810
very very efficient but beware it can

00:28:44,160 --> 00:28:51,690
use very much space I mean I had one one

00:28:48,810 --> 00:28:53,190
person who wanted to have a 10 second

00:28:51,690 --> 00:28:59,010
precision for two years

00:28:53,190 --> 00:29:05,960
well it's about a 500 megabyte per hour

00:28:59,010 --> 00:29:09,740
day and so per line in million peak data

00:29:05,960 --> 00:29:13,250
you can also increase early precision

00:29:09,740 --> 00:29:17,880
it's it's called super sampling but

00:29:13,250 --> 00:29:21,180
works with without meaning I think if

00:29:17,880 --> 00:29:24,600
you put million I think it will do the

00:29:21,180 --> 00:29:27,810
job for you I will just go a little

00:29:24,600 --> 00:29:36,000
faster since my time is all small almost

00:29:27,810 --> 00:29:41,640
app and things okay yeah a biggest big

00:29:36,000 --> 00:29:46,320
thing is if you modify for D size always

00:29:41,640 --> 00:29:52,290
have array increased because when you

00:29:46,320 --> 00:29:54,660
want to have the graphs if you take huge

00:29:52,290 --> 00:29:57,780
for example I mean there is a setting

00:29:54,660 --> 00:29:59,730
but but it's huge it's not very in these

00:29:57,780 --> 00:30:04,650
settings are very nice because it only

00:29:59,730 --> 00:30:07,590
has maximum precision for two years but

00:30:04,650 --> 00:30:11,430
it doesn't have any array an array are

00:30:07,590 --> 00:30:14,730
part of meaning ability to reply very

00:30:11,430 --> 00:30:18,110
fast on a yearly graph for example so if

00:30:14,730 --> 00:30:22,110
you it's pre consolidation for yearly

00:30:18,110 --> 00:30:24,590
values so the ideal way is you know the

00:30:22,110 --> 00:30:29,730
size of your graph in your template and

00:30:24,590 --> 00:30:31,740
if you have one array per pixel and the

00:30:29,730 --> 00:30:33,660
graph output it it goes the fastest

00:30:31,740 --> 00:30:36,890
since early doesn't even have to

00:30:33,660 --> 00:30:36,890
interpolate the data

00:30:38,670 --> 00:30:50,370
so now the limitation of 2.0 the CGA of

00:30:46,679 --> 00:30:53,309
HTML is very very very ugly I don't know

00:30:50,370 --> 00:30:56,520
I don't know if many many of you tried

00:30:53,309 --> 00:31:03,420
with big install but well practical

00:30:56,520 --> 00:31:07,530
limit is about between 150 and 200 nodes

00:31:03,420 --> 00:31:12,480
after what it's very very slow and it's

00:31:07,530 --> 00:31:15,840
low on reload because the whole

00:31:12,480 --> 00:31:21,750
configuration is stored in a big storage

00:31:15,840 --> 00:31:26,510
Stovall will file that is but is reload

00:31:21,750 --> 00:31:30,660
and most of the time is it is took by

00:31:26,510 --> 00:31:34,309
horrible dot real reload so I cannot do

00:31:30,660 --> 00:31:39,260
much about it we'll see how we I plan to

00:31:34,309 --> 00:31:41,250
do it and the UI itself doesn't where

00:31:39,260 --> 00:31:45,120
it's not very scalable

00:31:41,250 --> 00:31:48,240
I mean you are you'll know the default

00:31:45,120 --> 00:31:51,980
UI so now you have your cluster just

00:31:48,240 --> 00:31:55,850
imagine one thousand nodes inside its

00:31:51,980 --> 00:31:57,500
well it's a little bit flat and not very

00:31:55,850 --> 00:32:00,690
[Music]

00:31:57,500 --> 00:32:02,419
all the nodes are actions here on the

00:32:00,690 --> 00:32:06,960
overview

00:32:02,419 --> 00:32:12,030
it's very static and it's not what one

00:32:06,960 --> 00:32:17,100
does expect in 2013 because well I mean

00:32:12,030 --> 00:32:20,570
we all have this web app and it's fine

00:32:17,100 --> 00:32:24,799
shining with very dynamic stuff and

00:32:20,570 --> 00:32:29,429
auras is not very dynamic I agree

00:32:24,799 --> 00:32:29,850
same is if you you know the comparison

00:32:29,429 --> 00:32:32,010
page

00:32:29,850 --> 00:32:35,160
I mean if every node of a group and

00:32:32,010 --> 00:32:38,790
every graph just imagine sir on one

00:32:35,160 --> 00:32:42,260
thousand node one thousand plugin your

00:32:38,790 --> 00:32:46,740
fireworks won't have any memory anymore

00:32:42,260 --> 00:32:48,750
and the last thing is it lacks proper

00:32:46,740 --> 00:32:51,500
rco I mean for bigger than you install I

00:32:48,750 --> 00:32:55,230
mean usually you want to delegate

00:32:51,500 --> 00:32:57,150
monitoring to sub subsystem and you

00:32:55,230 --> 00:32:59,220
don't want people to see everything

00:32:57,150 --> 00:33:07,429
because they will be overwhelmed by

00:32:59,220 --> 00:33:13,260
information and well but that's problem

00:33:07,429 --> 00:33:16,620
just very fast that's my last slide 4 so

00:33:13,260 --> 00:33:20,370
for 2.2 I mean it would be 1 it will be

00:33:16,620 --> 00:33:23,760
integrated in 2.1 and when it's stable

00:33:20,370 --> 00:33:27,390
it will become 2.2 it's moved from the

00:33:23,760 --> 00:33:29,910
whole story bill thing to SQL based and

00:33:27,390 --> 00:33:32,490
the SQL based will be dbi base because

00:33:29,910 --> 00:33:35,490
we are still in peril and with the

00:33:32,490 --> 00:33:40,470
SQLite by default because we really want

00:33:35,490 --> 00:33:45,870
the nice out of box install and remember

00:33:40,470 --> 00:33:48,690
or a user or a very of one node type and

00:33:45,870 --> 00:33:52,260
if you want you can do procedure scroll

00:33:48,690 --> 00:33:55,370
and if you want you can do whatever GBI

00:33:52,260 --> 00:33:59,460
supports it's just up to you

00:33:55,370 --> 00:34:05,059
it will Ndebele dynamic HTML because

00:33:59,460 --> 00:34:05,059
well we're not in 2001 anymore

00:34:05,330 --> 00:34:12,600
but that will recreate a deep rewrite of

00:34:08,460 --> 00:34:14,879
code as I said before you have many many

00:34:12,600 --> 00:34:19,260
accessor to have a story ball inside the

00:34:14,879 --> 00:34:23,280
core but since it was a big terrible it

00:34:19,260 --> 00:34:27,000
was native Perl data structure so for

00:34:23,280 --> 00:34:30,629
whatever reason many code doesn't use

00:34:27,000 --> 00:34:33,600
the accessors and they use it in typical

00:34:30,629 --> 00:34:37,159
perl way but makes it very difficult to

00:34:33,600 --> 00:34:41,690
translate to SQL so that's a challenge

00:34:37,159 --> 00:34:46,530
and just to be completely crystal clear

00:34:41,690 --> 00:34:49,139
the data will stay in the databases in

00:34:46,530 --> 00:34:52,050
Rd will stay in early I want I don't

00:34:49,139 --> 00:34:56,780
want to put their timestamp in value

00:34:52,050 --> 00:34:56,780
inside SQL but it's not the point

00:35:00,370 --> 00:35:08,789
[Music]

00:35:02,719 --> 00:35:14,069
yes well I'll just up we will have a

00:35:08,789 --> 00:35:20,519
complete new push feature when the note

00:35:14,069 --> 00:35:23,249
can push on the master in order well to

00:35:20,519 --> 00:35:26,279
have to break this five-minute pause

00:35:23,249 --> 00:35:30,619
starter so you can put whenever you want

00:35:26,279 --> 00:35:36,289
every second if you want and well I

00:35:30,619 --> 00:35:36,289
figures it will enable very fine

00:35:37,549 --> 00:35:47,660
precision and my goal is to be as good

00:35:41,130 --> 00:35:52,170
as collecting if well if you have a

00:35:47,660 --> 00:36:02,279
that's a little blurb on the new html5

00:35:52,170 --> 00:36:04,079
UI with so normally its yeah I spit it

00:36:02,279 --> 00:36:08,690
out the end so you have a little time

00:36:04,079 --> 00:36:08,690
for questions if you want

00:36:17,630 --> 00:36:33,530
with this okay is it possible with this

00:36:24,950 --> 00:36:48,790
new architecture sorry I just missed the

00:36:33,530 --> 00:36:54,589
question SQL one you mean I think or

00:36:48,790 --> 00:36:57,589
yeah do you fork the plugins the

00:36:54,589 --> 00:37:01,309
architecture is still for the plugins

00:36:57,589 --> 00:37:04,309
every time or is it possible to run a

00:37:01,309 --> 00:37:07,280
plugin and keep it long running and just

00:37:04,309 --> 00:37:10,280
feedback some values actually as you

00:37:07,280 --> 00:37:15,730
also mentioned coleg D which builds on

00:37:10,280 --> 00:37:20,540
this architecture I mean okay it's I

00:37:15,730 --> 00:37:24,500
designed a new extension a new verb for

00:37:20,540 --> 00:37:27,440
plugins it's called stream and this is a

00:37:24,500 --> 00:37:30,380
you just launched the plugin you asked

00:37:27,440 --> 00:37:33,500
for a for fog fig and then you asked for

00:37:30,380 --> 00:37:36,890
stream and when the plug-in quits it

00:37:33,500 --> 00:37:39,829
means I mean just sends paralytically

00:37:36,890 --> 00:37:43,280
values at a rate he wants to it's it's

00:37:39,829 --> 00:37:46,750
very it's designed to capture for

00:37:43,280 --> 00:37:50,020
example the output of vmstat

00:37:46,750 --> 00:37:53,420
and you can you can do cat vmstat

00:37:50,020 --> 00:37:55,640
pipe oak something and well that's your

00:37:53,420 --> 00:37:59,329
plugin output and it will stay in memory

00:37:55,640 --> 00:38:04,880
and the plugin will kill himself when

00:37:59,329 --> 00:38:07,280
the configuration change that's but the

00:38:04,880 --> 00:38:10,299
problem is I didn't put it in two point

00:38:07,280 --> 00:38:14,569
two because I won't have time to do it

00:38:10,299 --> 00:38:19,190
but that's the way it's done but

00:38:14,569 --> 00:38:23,420
basically the architecture of forking

00:38:19,190 --> 00:38:25,940
exact a plug-in is will be at the core

00:38:23,420 --> 00:38:32,270
of munion it won't be for

00:38:25,940 --> 00:38:35,740
Nadia dot s Oh or that you will chart in

00:38:32,270 --> 00:38:39,890
or a dot P an but you will charge in the

00:38:35,740 --> 00:38:49,869
Union memory space that's that's not

00:38:39,890 --> 00:38:54,349
something I want to this was the thing

00:38:49,869 --> 00:38:59,359
which I really liked moaning and used it

00:38:54,349 --> 00:39:02,569
in 1.2 or whatever but it had scaling

00:38:59,359 --> 00:39:05,869
problems with regards to form so that

00:39:02,569 --> 00:39:08,530
was one of the reasons I have to change

00:39:05,869 --> 00:39:08,530
to another system

00:39:17,260 --> 00:39:26,090
Hey so I was a happy Union user and then

00:39:21,680 --> 00:39:29,750
and suddenly I hell because of the

00:39:26,090 --> 00:39:33,170
scaling issues and I moved to a PNP for

00:39:29,750 --> 00:39:35,350
nature's for and that's one

00:39:33,170 --> 00:39:38,360
question I want to ask is about how

00:39:35,350 --> 00:39:42,590
because we've all this data that is a

00:39:38,360 --> 00:39:43,840
greater union then you can do proactive

00:39:42,590 --> 00:39:46,070
[Music]

00:39:43,840 --> 00:39:49,370
monitoring the sense like sending alerts

00:39:46,070 --> 00:39:52,100
if there's trends that goes one way or

00:39:49,370 --> 00:39:55,670
the other way or if you hit certain

00:39:52,100 --> 00:39:59,000
threshold but do you plan on having

00:39:55,670 --> 00:40:04,100
better integration with allied systems

00:39:59,000 --> 00:40:10,610
then you have currently actually the

00:40:04,100 --> 00:40:13,640
point of not Gio's I mean we we had very

00:40:10,610 --> 00:40:17,060
much problem with because an S see a

00:40:13,640 --> 00:40:22,010
change there he is its interface lately

00:40:17,060 --> 00:40:27,950
and the thing is we have something

00:40:22,010 --> 00:40:30,620
called Union limits well it sends our

00:40:27,950 --> 00:40:34,640
thing and so on but it doesn't do it

00:40:30,620 --> 00:40:39,530
very well so the integration in our

00:40:34,640 --> 00:40:41,840
system such as modules whatever it's

00:40:39,530 --> 00:40:44,030
very very high on my top list because I

00:40:41,840 --> 00:40:48,230
don't want to re-implement in nodules I

00:40:44,030 --> 00:40:51,560
mean it's I want to focus on data

00:40:48,230 --> 00:40:54,590
gathering and data keeping I mean I'm

00:40:51,560 --> 00:40:56,780
more interested in replacing something

00:40:54,590 --> 00:41:00,860
like a PHP for nodules when I juice

00:40:56,780 --> 00:41:02,720
itself because the limit imminent limits

00:41:00,860 --> 00:41:05,630
for example it's only he has you know

00:41:02,720 --> 00:41:08,690
it's only do thresholds like if this

00:41:05,630 --> 00:41:11,330
here a sudden value then one was also

00:41:08,690 --> 00:41:14,450
interested in questions like okay

00:41:11,330 --> 00:41:17,270
usually this file system is growing at a

00:41:14,450 --> 00:41:19,540
1% rate every day and suddenly growth at

00:41:17,270 --> 00:41:22,430
like 50 percent I want a warning there

00:41:19,540 --> 00:41:25,160
that's you know exactly but that's

00:41:22,430 --> 00:41:30,260
what's something but is even offered by

00:41:25,160 --> 00:41:35,990
your Rd right now and I also have it

00:41:30,260 --> 00:41:38,750
on my future roadmap but well I I'm

00:41:35,990 --> 00:41:42,290
taking the problem but are usually user

00:41:38,750 --> 00:41:44,480
facing right now and but everyone is

00:41:42,290 --> 00:41:52,880
welcome to help I'm looking forward to

00:41:44,480 --> 00:41:56,060
it yeah okay time is up so I guess you

00:41:52,880 --> 00:42:01,630
have to ask your questions after the

00:41:56,060 --> 00:42:04,460
talk and yeah thank you just varies a

00:42:01,630 --> 00:42:06,890
buff session this afternoon if you have

00:42:04,460 --> 00:42:11,390
some question more specific just come

00:42:06,890 --> 00:42:16,820
and I'll be glad to answer Thanks

00:42:11,390 --> 00:42:16,820

YouTube URL: https://www.youtube.com/watch?v=VXhTlcB3wXc


