Title: What's new in the Linux kernel
Publication date: 2017-11-28
Playlist: DebConf 13
Description: 
	by Ben Hutchings

At: DebConf13
https://debconf13.debconf.org/
Room: Main talk room
Scheduled start: 2013-08-11 14:30:00
Captions: 
	00:00:00,060 --> 00:00:07,290
good afternoon everyone I am introducing

00:00:04,319 --> 00:00:10,679
banner's inks we will talk about what's

00:00:07,290 --> 00:00:14,639
new in the Linux kernel since what's in

00:00:10,679 --> 00:00:27,779
squeeze and we since yeah what's in with

00:00:14,639 --> 00:00:29,730
it and what's missing in Debian I'll

00:00:27,779 --> 00:00:34,230
start with the obligatory biography

00:00:29,730 --> 00:00:36,059
maybe not obligatory I said my day

00:00:34,230 --> 00:00:39,379
working as a professional software

00:00:36,059 --> 00:00:42,030
engineer doing that for 15 years and

00:00:39,379 --> 00:00:46,680
I've been a Debian contributor for the

00:00:42,030 --> 00:00:49,020
past ten years and for about five years

00:00:46,680 --> 00:00:53,370
now I've been working on the Linux

00:00:49,020 --> 00:00:55,829
kernel in both of those roles my day job

00:00:53,370 --> 00:00:57,809
I'm maintaining a net driver for a

00:00:55,829 --> 00:01:01,140
hardware company solar flare which is a

00:00:57,809 --> 00:01:04,080
sponsor of the conference and I were

00:01:01,140 --> 00:01:08,760
working on more core kernel code as

00:01:04,080 --> 00:01:11,520
necessary I'm a member of Debian kernel

00:01:08,760 --> 00:01:17,330
team and currently I'm doing most of the

00:01:11,520 --> 00:01:20,549
work on the unstable aside from

00:01:17,330 --> 00:01:23,299
supporting specific architecture

00:01:20,549 --> 00:01:23,299
specific ports

00:01:23,670 --> 00:01:29,750
I'm also maintaining the stable update

00:01:26,400 --> 00:01:33,090
branch for Linux 3.2 as used in wheezy

00:01:29,750 --> 00:01:40,650
that's maintained on kernel.org and goes

00:01:33,090 --> 00:01:44,340
through review upstream so the linux

00:01:40,650 --> 00:01:46,380
kernel is released early and often it's

00:01:44,340 --> 00:01:50,490
released about five times a year before

00:01:46,380 --> 00:01:52,619
you and that's the major staple releases

00:01:50,490 --> 00:01:57,899
and there are updates with bug fixes

00:01:52,619 --> 00:01:59,579
every week or two some of the features

00:01:57,899 --> 00:02:01,770
that happen little leaders aren't quite

00:01:59,579 --> 00:02:04,409
ready either because they haven't been

00:02:01,770 --> 00:02:05,540
fully debug or there are some bits still

00:02:04,409 --> 00:02:08,479
fill in or

00:02:05,540 --> 00:02:12,730
you need new user lads and that's one of

00:02:08,479 --> 00:02:15,410
the things I've got to talk about today

00:02:12,730 --> 00:02:18,440
we see as you probably know has the

00:02:15,410 --> 00:02:22,400
Linux 3.2 which is now pretty old

00:02:18,440 --> 00:02:25,340
current version being learner's 3.10 so

00:02:22,400 --> 00:02:28,360
the good news is we now have lots of new

00:02:25,340 --> 00:02:31,490
features in testing and unstable

00:02:28,360 --> 00:02:37,280
relative to easy and the bad news is

00:02:31,490 --> 00:02:39,350
some of them aren't really usable yet so

00:02:37,280 --> 00:02:41,390
I'm going to go through a number of

00:02:39,350 --> 00:02:44,120
those features and talk about what's

00:02:41,390 --> 00:02:53,030
missing what people might be able to do

00:02:44,120 --> 00:02:56,090
to to fix that the team device driver is

00:02:53,030 --> 00:02:59,030
not an activity bonding bonding is a way

00:02:56,090 --> 00:03:03,560
of combining two networked two or more

00:02:59,030 --> 00:03:05,150
network links to achieve either greater

00:03:03,560 --> 00:03:08,239
bandwidth you use them all at once or

00:03:05,150 --> 00:03:11,360
greater reliability you use one of them

00:03:08,239 --> 00:03:15,950
but if that goes down because the switch

00:03:11,360 --> 00:03:17,930
breaks or something else fails then you

00:03:15,950 --> 00:03:23,330
can fall over to fail over to the other

00:03:17,930 --> 00:03:25,910
link the bonding driver has an awful lot

00:03:23,330 --> 00:03:29,630
of code a lot of awful code in the

00:03:25,910 --> 00:03:33,140
kernel that manages this pretty much

00:03:29,630 --> 00:03:35,180
autonomously the team driver is a real

00:03:33,140 --> 00:03:38,709
implementation of that that leaves a lot

00:03:35,180 --> 00:03:41,510
of the high level control in amusement

00:03:38,709 --> 00:03:44,000
which we don't have at the moment we

00:03:41,510 --> 00:03:46,519
have the you can set up one of these

00:03:44,000 --> 00:03:50,180
devices with the IP command for might be

00:03:46,519 --> 00:03:52,250
root 2 but it's really get it working

00:03:50,180 --> 00:03:56,810
you need some new tools which part of

00:03:52,250 --> 00:03:59,269
the live team project so there is an

00:03:56,810 --> 00:04:02,930
open bug to get this working someone has

00:03:59,269 --> 00:04:04,489
in fact started packaging that if you

00:04:02,930 --> 00:04:08,890
want to make this work that's the vibe

00:04:04,489 --> 00:04:08,890
to to look at

00:04:12,310 --> 00:04:17,620
so there's a new major feature called

00:04:15,550 --> 00:04:22,720
transcendent memory not to be confused

00:04:17,620 --> 00:04:40,870
with transactional memory it's it's a

00:04:22,720 --> 00:04:44,350
kind of abstract storage or member so

00:04:40,870 --> 00:04:45,730
there are bits of this in started or

00:04:44,350 --> 00:04:48,100
initially I was in Linux three point

00:04:45,730 --> 00:04:50,320
naught but then more and more pieces

00:04:48,100 --> 00:04:54,190
have been added and some of them are not

00:04:50,320 --> 00:04:57,910
in wheezy so this isn't a kind of extra

00:04:54,190 --> 00:05:03,100
layer of storage between the page cache

00:04:57,910 --> 00:05:11,370
which is all the all the files and data

00:05:03,100 --> 00:05:11,370
that held in memory and your disk

00:05:11,520 --> 00:05:16,270
inspector to be expected that it'll be

00:05:14,080 --> 00:05:18,550
faster than writing or reading writing

00:05:16,270 --> 00:05:21,310
to or reading back from disk but not

00:05:18,550 --> 00:05:29,350
quite as fast as simply died access to

00:05:21,310 --> 00:05:32,140
memory so where does this where is this

00:05:29,350 --> 00:05:34,840
storage really where this page is really

00:05:32,140 --> 00:05:38,080
going if they go into transcendent

00:05:34,840 --> 00:05:39,340
memory if you're running the Machine

00:05:38,080 --> 00:05:43,660
under Zen they could be stored by the

00:05:39,340 --> 00:05:48,370
hypervisor in some pool that's shared

00:05:43,660 --> 00:05:50,470
between all the virtual machines it

00:05:48,370 --> 00:05:54,880
could actually still be in local memory

00:05:50,470 --> 00:05:56,470
but compressed memory tends to compress

00:05:54,880 --> 00:05:59,350
actually quite well you might remember

00:05:56,470 --> 00:06:02,530
back in the 90s there were these memory

00:05:59,350 --> 00:06:08,700
dabblers for Windows and this is I

00:06:02,530 --> 00:06:12,280
believe a similar sort of idea for Linux

00:06:08,700 --> 00:06:16,930
and you can also have a cluster of

00:06:12,280 --> 00:06:18,520
machines share their spare spare memory

00:06:16,930 --> 00:06:23,050
space with each other that's called ram

00:06:18,520 --> 00:06:23,590
stir and that's not really done yet it's

00:06:23,050 --> 00:06:26,320
still

00:06:23,590 --> 00:06:28,750
under development none of these things

00:06:26,320 --> 00:06:30,160
are enabled in Debian kernels some of

00:06:28,750 --> 00:06:31,600
them probably could be but it needs

00:06:30,160 --> 00:06:33,400
someone to really think about the

00:06:31,600 --> 00:06:35,950
configuration what's what should be

00:06:33,400 --> 00:06:39,550
enabled but before once needs to be left

00:06:35,950 --> 00:06:41,800
to local configuration

00:06:39,550 --> 00:06:47,020
are there any scripts that need I need

00:06:41,800 --> 00:06:52,140
it but set this up so the link there to

00:06:47,020 --> 00:06:54,250
an article in Linux weekly news about

00:06:52,140 --> 00:06:56,020
which case for more details about this

00:06:54,250 --> 00:06:58,690
if you want to make it work have a look

00:06:56,020 --> 00:07:08,890
at that's send just proposal to the

00:06:58,690 --> 00:07:16,330
curtain team right so we have new

00:07:08,890 --> 00:07:19,030
graphics drivers of course the the most

00:07:16,330 --> 00:07:21,040
of you are probably using one of the 915

00:07:19,030 --> 00:07:24,400
Radeon and Nouveau drivers and those

00:07:21,040 --> 00:07:28,390
have gained support for new chips some

00:07:24,400 --> 00:07:30,340
of the three vendors since Weezy but

00:07:28,390 --> 00:07:34,210
they're also completely new drivers for

00:07:30,340 --> 00:07:43,450
several new well several old and new and

00:07:34,210 --> 00:07:45,910
virtual hardware devices and well kernel

00:07:43,450 --> 00:07:47,860
drivers for graphics are good for

00:07:45,910 --> 00:07:50,020
several reasons partly they're more

00:07:47,860 --> 00:07:54,910
robust than the next and you don't have

00:07:50,020 --> 00:08:02,560
this fragile handoff between using text

00:07:54,910 --> 00:08:05,710
mode and using X graphics and if the XR

00:08:02,560 --> 00:08:07,810
crashes then the graphics are not dead

00:08:05,710 --> 00:08:09,310
on the other hand if your kernel if your

00:08:07,810 --> 00:08:10,630
graphics type of crashes then the kernel

00:08:09,310 --> 00:08:16,030
is crashed and your completion is

00:08:10,630 --> 00:08:17,920
completely dead so it's not all good at

00:08:16,030 --> 00:08:19,150
least at that point you do get a nice

00:08:17,920 --> 00:08:25,360
trace back on the screen probably

00:08:19,150 --> 00:08:30,330
because the the the kernel driver can

00:08:25,360 --> 00:08:30,330
switch back to text mode and do that

00:08:30,870 --> 00:08:37,480
another I think important motivation for

00:08:33,640 --> 00:08:37,840
this is that user mode drivers aren't

00:08:37,480 --> 00:08:40,240
really

00:08:37,840 --> 00:08:43,240
first of all we're doing secure boot you

00:08:40,240 --> 00:08:46,030
can't use the lantern opal trust it to

00:08:43,240 --> 00:08:49,590
access hardware devices directly has to

00:08:46,030 --> 00:08:49,590
go through the kernel so hence the

00:08:49,860 --> 00:08:57,220
replacement of the ex drivers for for

00:08:54,220 --> 00:08:58,290
various graphics hardware with current

00:08:57,220 --> 00:09:00,460
drivers

00:08:58,290 --> 00:09:02,470
unfortunately the ex drivers we have in

00:09:00,460 --> 00:09:09,370
Debian don't work with this at the

00:09:02,470 --> 00:09:11,890
moment so if you want to make it work go

00:09:09,370 --> 00:09:13,690
and join the extract force package the

00:09:11,890 --> 00:09:25,200
new drivers or it's up there's just new

00:09:13,690 --> 00:09:30,490
versions of the driver module signing is

00:09:25,200 --> 00:09:32,850
something that's - has been seen in Red

00:09:30,490 --> 00:09:36,130
Hat Enterprise Linux for a while now and

00:09:32,850 --> 00:09:38,410
it's for them I believe it's just it's

00:09:36,130 --> 00:09:42,070
just been a way to check whether people

00:09:38,410 --> 00:09:44,950
are using unsupported third-party

00:09:42,070 --> 00:09:48,670
modules and then tell them they can't

00:09:44,950 --> 00:09:51,670
have support anymore but now with the

00:09:48,670 --> 00:09:55,420
plan to support a secure boot that

00:09:51,670 --> 00:09:59,710
becomes more important as a means of a

00:09:55,420 --> 00:10:02,980
security feature so the in mainline

00:09:59,710 --> 00:10:05,530
Linux you can you can get you can

00:10:02,980 --> 00:10:07,630
generate a key at Build time sign all

00:10:05,530 --> 00:10:10,780
the modules that are built alongside the

00:10:07,630 --> 00:10:13,030
kernel and then either at Build time or

00:10:10,780 --> 00:10:15,190
at runtime at boot time that is you can

00:10:13,030 --> 00:10:21,220
tell the colonel not to load unsigned

00:10:15,190 --> 00:10:25,330
modules there's a major flaw in this

00:10:21,220 --> 00:10:28,300
which is that this doesn't leave any

00:10:25,330 --> 00:10:31,570
room for our three modules how do you

00:10:28,300 --> 00:10:35,430
get the key the how do you tell the

00:10:31,570 --> 00:10:38,200
colonel those should be trusted and

00:10:35,430 --> 00:10:41,310
that's there's a sudden of controversy

00:10:38,200 --> 00:10:41,310
about how exactly you do this

00:10:45,170 --> 00:10:50,910
any others if you actually want to make

00:10:48,480 --> 00:10:52,920
secure boot work we don't just eat

00:10:50,910 --> 00:10:59,250
module sign we also need kernel image

00:10:52,920 --> 00:11:02,190
signs we need a sign boot loaders and we

00:10:59,250 --> 00:11:05,700
probably need to disable some features

00:11:02,190 --> 00:11:11,220
like access to deaf men which is how the

00:11:05,700 --> 00:11:15,180
the X X graphics X graphics drivers

00:11:11,220 --> 00:11:17,880
access the hardware and which can't be

00:11:15,180 --> 00:11:24,560
allowed because that would undermine

00:11:17,880 --> 00:11:28,730
secure boot so as a meeting on Tuesday

00:11:24,560 --> 00:11:32,460
where hopefully we can discuss how a

00:11:28,730 --> 00:11:36,590
whether debian can make typically make

00:11:32,460 --> 00:11:36,590
its releases beautiful with secure boot

00:11:39,050 --> 00:11:53,370
so the discard feature some well

00:11:50,190 --> 00:11:58,260
probably many solid state disks a flash

00:11:53,370 --> 00:12:04,230
flash devices support this discard

00:11:58,260 --> 00:12:09,780
operation the the way that flash is

00:12:04,230 --> 00:12:15,930
managed means you can't simply do random

00:12:09,780 --> 00:12:17,910
writes and you need the you need a lot

00:12:15,930 --> 00:12:22,410
needs somewhat more capacity on a

00:12:17,910 --> 00:12:24,960
physical flash then the operating system

00:12:22,410 --> 00:12:29,550
and the file system see is being there

00:12:24,960 --> 00:12:33,720
and the device can work more efficiently

00:12:29,550 --> 00:12:37,560
the more spare capacity it has so if the

00:12:33,720 --> 00:12:40,440
file system tells it that the free parts

00:12:37,560 --> 00:12:42,990
of the disk are free by issuing a

00:12:40,440 --> 00:12:50,450
discard operation then it becomes more

00:12:42,990 --> 00:12:53,520
efficient it can it can be faster and

00:12:50,450 --> 00:12:57,440
it's it's more its life time it's

00:12:53,520 --> 00:12:57,440
working lifetime will probably be longer

00:12:58,580 --> 00:13:05,880
it's also possible to have thin

00:13:01,680 --> 00:13:07,440
provisioned storage servers where which

00:13:05,880 --> 00:13:11,130
pretend to have more capacity than they

00:13:07,440 --> 00:13:16,290
really do and that's this more or less

00:13:11,130 --> 00:13:18,300
works because when you set up at a set

00:13:16,290 --> 00:13:19,530
up a server with so much disk space on

00:13:18,300 --> 00:13:22,590
the same you're probably not going to

00:13:19,530 --> 00:13:24,240
use it all and on average if you know

00:13:22,590 --> 00:13:27,690
that on average your servers are going

00:13:24,240 --> 00:13:32,820
to use 60% of their of their disk you

00:13:27,690 --> 00:13:35,370
can maybe allocate in the initially 70%

00:13:32,820 --> 00:13:38,240
of the of the disk space you pretend

00:13:35,370 --> 00:13:43,770
that you're giving them that only works

00:13:38,240 --> 00:13:45,630
again if the if the file system tells

00:13:43,770 --> 00:13:49,290
the storage server that it's about the

00:13:45,630 --> 00:13:49,950
free space on the disk so in order for

00:13:49,290 --> 00:13:51,540
this to work

00:13:49,950 --> 00:13:54,120
of course the hardware needs support it

00:13:51,540 --> 00:13:56,280
the driver needs support it the file

00:13:54,120 --> 00:13:58,650
system to support it and any layers of

00:13:56,280 --> 00:14:02,960
storage in between them like LVM and

00:13:58,650 --> 00:14:07,110
raid need to need to make discard work

00:14:02,960 --> 00:14:09,390
and so I mention this here because Linux

00:14:07,110 --> 00:14:15,420
3.7 finally added support for this in

00:14:09,390 --> 00:14:18,030
the Ray MD raid layer it does need to be

00:14:15,420 --> 00:14:21,120
explicitly enabled as a filesystem

00:14:18,030 --> 00:14:23,880
option and as an option in those storage

00:14:21,120 --> 00:14:25,590
layers and the Debian installer isn't

00:14:23,880 --> 00:14:27,230
doing spy default there are reasons why

00:14:25,590 --> 00:14:29,400
you might not want to it by default

00:14:27,230 --> 00:14:30,680
moment there isn't even option to do

00:14:29,400 --> 00:14:33,690
that

00:14:30,680 --> 00:14:36,570
so there's open bug for this if you want

00:14:33,690 --> 00:14:39,320
to get a discard working by default or

00:14:36,570 --> 00:14:43,470
at least make it easier for people to

00:14:39,320 --> 00:14:51,450
taste you set up go and look at that

00:14:43,470 --> 00:14:53,010
pack see what there is to do so there

00:14:51,450 --> 00:14:58,310
interesting feature which is being

00:14:53,010 --> 00:15:02,380
incrementally implemented is containers

00:14:58,310 --> 00:15:07,230
in fact you had two containers for

00:15:02,380 --> 00:15:11,710
a kind of a lightweight virtual machine

00:15:07,230 --> 00:15:16,210
if you use kvam or Zane then the virtual

00:15:11,710 --> 00:15:20,320
machine has its own kernel its own

00:15:16,210 --> 00:15:21,820
dedicated memory well but that can be

00:15:20,320 --> 00:15:24,280
sort of varied using a balloon driver

00:15:21,820 --> 00:15:29,320
but has an awful lot more dedicated

00:15:24,280 --> 00:15:31,750
resources where the container uses the

00:15:29,320 --> 00:15:34,750
same kernel it for both the host and the

00:15:31,750 --> 00:15:36,640
virtual machine but everything in the

00:15:34,750 --> 00:15:39,580
virtual machine has it has limited

00:15:36,640 --> 00:15:43,450
privileges and limited limited use of

00:15:39,580 --> 00:15:45,280
the physical machines resources and this

00:15:43,450 --> 00:15:46,750
has been done before and we had this in

00:15:45,280 --> 00:15:49,900
Debian with the openvz

00:15:46,750 --> 00:15:52,450
and dont's reseller patches the trouble

00:15:49,900 --> 00:15:54,370
is that these are quite intrusive to the

00:15:52,450 --> 00:15:57,220
kernel they have to change memory

00:15:54,370 --> 00:16:02,140
management the file system networking

00:15:57,220 --> 00:16:04,600
the scheduler all of which are changing

00:16:02,140 --> 00:16:07,030
fairly quickly in mainline Linux as well

00:16:04,600 --> 00:16:10,870
so these projects have had to work very

00:16:07,030 --> 00:16:15,790
hard to keep updating to them to later

00:16:10,870 --> 00:16:17,160
versions of the mainline Linux and

00:16:15,790 --> 00:16:23,560
they've not been able to support every

00:16:17,160 --> 00:16:26,320
every kernel version and so eventually

00:16:23,560 --> 00:16:29,200
with Weezie we had to drop these these

00:16:26,320 --> 00:16:31,690
patch sets however this this is all

00:16:29,200 --> 00:16:34,380
being implemented in May night Linux now

00:16:31,690 --> 00:16:36,750
mostly by the same people who did openvz

00:16:34,380 --> 00:16:39,010
and it's being done in a somewhat more

00:16:36,750 --> 00:16:40,210
flexible way it's being done possibly in

00:16:39,010 --> 00:16:45,210
a more robust way because they're

00:16:40,210 --> 00:16:48,160
talking to the upstream maintainer x'

00:16:45,210 --> 00:16:49,600
but it's it's it's slow it's it the

00:16:48,160 --> 00:16:54,060
development has been fairly slow

00:16:49,600 --> 00:16:57,780
I think it's nearly there now in its 3.7

00:16:54,060 --> 00:17:01,030
ok now have user name spaces which allow

00:16:57,780 --> 00:17:04,420
is the lie to have a root user in a

00:17:01,030 --> 00:17:07,209
inside a container that is not the same

00:17:04,420 --> 00:17:10,209
thing as the root user for the physical

00:17:07,209 --> 00:17:13,360
for the outer host which is pretty

00:17:10,209 --> 00:17:14,449
important no good having containers if

00:17:13,360 --> 00:17:16,589
if

00:17:14,449 --> 00:17:21,959
they use in the containers couldn't

00:17:16,589 --> 00:17:23,880
break out of them unfortunately there

00:17:21,959 --> 00:17:25,680
are still some flaws with it flaws with

00:17:23,880 --> 00:17:28,740
the implementation of username spaces

00:17:25,680 --> 00:17:30,480
there were so many security problems

00:17:28,740 --> 00:17:34,260
with these we're affecting could break

00:17:30,480 --> 00:17:37,170
out of a namespace and also it requires

00:17:34,260 --> 00:17:43,560
all file systems which deal with user

00:17:37,170 --> 00:17:47,100
IDs to distinguish between the user IDs

00:17:43,560 --> 00:17:51,840
in the current container or the current

00:17:47,100 --> 00:17:55,290
processes container and the the user ID

00:17:51,840 --> 00:17:57,540
in the Alpha machine in fact every user

00:17:55,290 --> 00:18:00,330
ID that's used inside container must

00:17:57,540 --> 00:18:06,570
have a number in the outer machine but

00:18:00,330 --> 00:18:08,370
it'll be a different number and so XFS

00:18:06,570 --> 00:18:10,590
still hasn't been changed to understand

00:18:08,370 --> 00:18:14,220
this and that seems like that's quite a

00:18:10,590 --> 00:18:15,300
big job so if you if you've got nothing

00:18:14,220 --> 00:18:19,500
better to do with your time you have a

00:18:15,300 --> 00:18:23,220
lot of spare time and you could work

00:18:19,500 --> 00:18:25,050
with the upstream XFS developers to make

00:18:23,220 --> 00:18:26,970
that work and then we might be able to

00:18:25,050 --> 00:18:29,850
enable user name spaces and have contain

00:18:26,970 --> 00:18:38,940
support in the next the next debian

00:18:29,850 --> 00:18:40,860
release again so be caches to just

00:18:38,940 --> 00:18:47,850
recently be others in linux three points

00:18:40,860 --> 00:18:49,350
and it's in a way it's a bits it has

00:18:47,850 --> 00:18:52,850
some similarities with transcended

00:18:49,350 --> 00:18:56,910
memory but it's also is very different

00:18:52,850 --> 00:18:59,820
it allows you use a fast disk like a

00:18:56,910 --> 00:19:01,710
solid-state disk as a cache in front or

00:18:59,820 --> 00:19:05,640
for larger disk that's not quite as fast

00:19:01,710 --> 00:19:07,380
and this is such a good idea that it's

00:19:05,640 --> 00:19:14,790
been done several times over there's

00:19:07,380 --> 00:19:18,420
also DM cache which was in in in May 9th

00:19:14,790 --> 00:19:20,070
Alex and in Harts IO which is dot all

00:19:18,420 --> 00:19:25,380
three of these are available in Debian

00:19:20,070 --> 00:19:26,980
now be cache needs new user learn tools

00:19:25,380 --> 00:19:28,450
and

00:19:26,980 --> 00:19:30,970
in fact someone has been working on a

00:19:28,450 --> 00:19:34,030
package of those there's there's a bug

00:19:30,970 --> 00:19:35,500
number I'm not exactly sure what status

00:19:34,030 --> 00:19:37,810
of this is but it might be that just

00:19:35,500 --> 00:19:38,890
needs a sponsor so if your interest if

00:19:37,810 --> 00:19:40,990
this sounds like something interesting

00:19:38,890 --> 00:19:44,010
to you look at the back see if you can

00:19:40,990 --> 00:19:44,010
sponsor that a hitch

00:19:56,330 --> 00:20:06,620
so for PC for Konzelman on our pcs we're

00:20:03,769 --> 00:20:12,289
fairly used to having a single image

00:20:06,620 --> 00:20:13,880
that runs on pretty much all pcs there

00:20:12,289 --> 00:20:16,880
are some differences where and we know

00:20:13,880 --> 00:20:20,419
marry my boy on the x86 flavor we have

00:20:16,880 --> 00:20:21,799
on the a36 architecture we have multiple

00:20:20,419 --> 00:20:26,740
kernel flavors for older and newer

00:20:21,799 --> 00:20:29,139
processors but aside from the processor

00:20:26,740 --> 00:20:32,120
generation you don't need a different

00:20:29,139 --> 00:20:35,570
kernel for a dell machine or an HP

00:20:32,120 --> 00:20:40,899
machine and unfortunately this hasn't

00:20:35,570 --> 00:20:40,899
been the case with arm for a long time

00:20:41,889 --> 00:20:47,659
arm the company makes these designs for

00:20:45,980 --> 00:20:49,850
just the processor and they don't

00:20:47,659 --> 00:20:53,149
standardize things like interrupt

00:20:49,850 --> 00:20:56,419
controllers memory layouts there isn't

00:20:53,149 --> 00:21:00,409
even standard firmware like on a PC you

00:20:56,419 --> 00:21:02,000
have a bias or now UEFI historically

00:21:00,409 --> 00:21:06,200
hasn't had that at all or that may be

00:21:02,000 --> 00:21:08,059
changing in the near future so every arm

00:21:06,200 --> 00:21:10,010
kernel image has been have had to be

00:21:08,059 --> 00:21:15,769
tailored to specific chips or even

00:21:10,010 --> 00:21:17,899
specific even specific boards which

00:21:15,769 --> 00:21:20,870
makes it quite difficult to support a

00:21:17,899 --> 00:21:22,279
wide range of hardware in in debian we

00:21:20,870 --> 00:21:25,100
have to we have to have a different

00:21:22,279 --> 00:21:28,760
flavor for each one and because we build

00:21:25,100 --> 00:21:33,019
all kernels we build all our packages

00:21:28,760 --> 00:21:35,570
natively so we build all our arm kernels

00:21:33,019 --> 00:21:39,590
on arm which is isn't a particularly

00:21:35,570 --> 00:21:41,980
fast chips even today they're not

00:21:39,590 --> 00:21:45,470
they're not really as fast as x86

00:21:41,980 --> 00:21:47,690
processors so we end up with a large

00:21:45,470 --> 00:21:50,149
number of different kernel flavors and

00:21:47,690 --> 00:21:53,269
are very long the old timers but it's

00:21:50,149 --> 00:22:02,210
about two days to build all the army old

00:21:53,269 --> 00:22:03,769
kernels currently and there's no no with

00:22:02,210 --> 00:22:05,330
that number of flavors there's no

00:22:03,769 --> 00:22:08,029
prospect of be able to add interesting

00:22:05,330 --> 00:22:13,039
things like doing a real-time arm kernel

00:22:08,029 --> 00:22:14,139
or or a container sorting on kernel and

00:22:13,039 --> 00:22:16,690
so on

00:22:14,139 --> 00:22:20,139
anyway the good news is this is changing

00:22:16,690 --> 00:22:26,239
there's been a lot of work to describe

00:22:20,139 --> 00:22:28,099
to describe how different our machines

00:22:26,239 --> 00:22:31,639
differ using something called a

00:22:28,099 --> 00:22:35,719
flattened device tree which says that's

00:22:31,639 --> 00:22:38,840
is a standardized description of all the

00:22:35,719 --> 00:22:44,029
different all those differences between

00:22:38,840 --> 00:22:45,469
machines which the kernel will parse a

00:22:44,029 --> 00:22:48,769
boot time and then it'll start running

00:22:45,469 --> 00:22:51,139
the right bits of code for whichever

00:22:48,769 --> 00:22:54,789
machine whichever machine is running on

00:22:51,139 --> 00:22:57,349
so only the device only the device tree

00:22:54,789 --> 00:23:00,979
needs to be used to differ between

00:22:57,349 --> 00:23:03,440
machines that's the idea in a way so

00:23:00,979 --> 00:23:06,229
currently in the rhf port we have our

00:23:03,440 --> 00:23:10,399
arm MP kernel which is supporting

00:23:06,229 --> 00:23:13,820
Calzado freescale and Marvell chips and

00:23:10,399 --> 00:23:16,789
they're more like becoming on soon the

00:23:13,820 --> 00:23:18,859
TI OMAP chips are sort of supported

00:23:16,789 --> 00:23:20,089
although apparently not all of the

00:23:18,859 --> 00:23:25,460
drivers are working correctly in a

00:23:20,089 --> 00:23:26,929
multi-platform build but that's in one

00:23:25,460 --> 00:23:30,109
or two releases that should be there

00:23:26,929 --> 00:23:32,989
should be good you may also remember a

00:23:30,109 --> 00:23:35,059
certain person going on and on about the

00:23:32,989 --> 00:23:40,399
importance of the allwinner chips found

00:23:35,059 --> 00:23:45,950
in on-base tablets that's also partly

00:23:40,399 --> 00:23:47,869
supported you can use exam you can you

00:23:45,950 --> 00:23:51,739
can use a serial port and the the

00:23:47,869 --> 00:23:56,029
Ethernet ports as yet there's no there's

00:23:51,739 --> 00:24:00,379
no storage drivers which is a bit of a

00:23:56,029 --> 00:24:03,279
problem but there there is work upstream

00:24:00,379 --> 00:24:08,080
to get these drivers included and

00:24:03,279 --> 00:24:08,080
support us in a multi-platform kernel

00:24:11,870 --> 00:24:17,550
so that's the current sort of right but

00:24:14,309 --> 00:24:19,920
we still need an installer that will the

00:24:17,550 --> 00:24:25,230
wall knows how to install the bits on

00:24:19,920 --> 00:24:27,030
these all these various machines and

00:24:25,230 --> 00:24:28,080
unfortunately that does two is spent

00:24:27,030 --> 00:24:32,809
it's still going to need a specific

00:24:28,080 --> 00:24:32,809
support for specific machines

00:24:33,920 --> 00:24:39,000
similarly with boot a bit later well

00:24:36,440 --> 00:24:41,429
generally they'll have a a boot loader

00:24:39,000 --> 00:24:46,010
installed it might be a suit which is

00:24:41,429 --> 00:24:48,240
u-boat but it might need a second a

00:24:46,010 --> 00:24:50,730
second stage of boot loader or they

00:24:48,240 --> 00:24:53,070
might need they may need some

00:24:50,730 --> 00:24:55,440
configuration at moment this isn't easy

00:24:53,070 --> 00:25:00,290
to do it's possible to do but you really

00:24:55,440 --> 00:25:04,080
need to be a real enthusiast read up on

00:25:00,290 --> 00:25:07,170
all the details so if you want to make

00:25:04,080 --> 00:25:10,350
this work or if you want to make Debian

00:25:07,170 --> 00:25:12,540
work on new arm systems talk the arm

00:25:10,350 --> 00:25:17,429
porters talk to the Debian installer

00:25:12,540 --> 00:25:20,870
team on the Debian boot list oh and

00:25:17,429 --> 00:25:25,429
there's another problem which is the

00:25:20,870 --> 00:25:29,340
most of our most of the GPUs on PCs are

00:25:25,429 --> 00:25:30,990
now supported by free drivers Intel and

00:25:29,340 --> 00:25:33,630
AMD actually provide documentation

00:25:30,990 --> 00:25:35,820
Nvidia dozens but has their chips have

00:25:33,630 --> 00:25:37,890
been quite successfully reverse

00:25:35,820 --> 00:25:39,630
engineered and supported by the nouveau

00:25:37,890 --> 00:25:44,460
driver unfortunately the same isn't true

00:25:39,630 --> 00:25:47,880
on arm yet that being said there are

00:25:44,460 --> 00:25:51,240
there are I think three or four reverse

00:25:47,880 --> 00:25:53,880
engineering projects - for the different

00:25:51,240 --> 00:25:55,920
GPUs that are out there which ever have

00:25:53,880 --> 00:26:00,420
some success they're not really ready

00:25:55,920 --> 00:26:07,770
for production yet but if you want to

00:26:00,420 --> 00:26:12,450
make Debian on our you know a usable

00:26:07,770 --> 00:26:15,059
free desktop environment then you could

00:26:12,450 --> 00:26:20,580
have a look at and join those reverse

00:26:15,059 --> 00:26:22,200
engineering projects so

00:26:20,580 --> 00:26:25,920
that's that's about it there are an

00:26:22,200 --> 00:26:28,850
awful lot more features that that have

00:26:25,920 --> 00:26:31,500
been introduced but most of those are

00:26:28,850 --> 00:26:33,840
drivers and file system features which

00:26:31,500 --> 00:26:37,680
pretty much just work you don't do

00:26:33,840 --> 00:26:44,040
anything particularly clever or they're

00:26:37,680 --> 00:26:48,470
already handled by the the the user line

00:26:44,040 --> 00:26:51,720
package which is already in Debian so

00:26:48,470 --> 00:26:56,850
any questions any of those or other

00:26:51,720 --> 00:26:59,220
features that you're interested in we

00:26:56,850 --> 00:27:05,060
have 15 minutes for questions

00:26:59,220 --> 00:27:05,060
so if anyone has a question please ask

00:27:12,809 --> 00:27:19,629
hi as a known kind of guy sometimes I

00:27:17,350 --> 00:27:23,139
need to try to build my own care and

00:27:19,629 --> 00:27:25,419
Debian package is is there are there any

00:27:23,139 --> 00:27:28,779
plans to make that easier for people who

00:27:25,419 --> 00:27:32,019
don't do that all they say you build a

00:27:28,779 --> 00:27:33,519
custom kernel package that is pretty

00:27:32,019 --> 00:27:38,919
easy already isn't it you just make that

00:27:33,519 --> 00:27:41,470
package I mean if you download the

00:27:38,919 --> 00:27:43,960
source and then or eat or not building a

00:27:41,470 --> 00:27:49,090
custom package from the Linux source

00:27:43,960 --> 00:27:52,470
package no sources sorry from the Debian

00:27:49,090 --> 00:27:54,789
sources sometimes it gives very

00:27:52,470 --> 00:27:59,080
mysterious error message and you don't

00:27:54,789 --> 00:28:00,609
really know what to do you you start

00:27:59,080 --> 00:28:03,100
without get source Linux is that way

00:28:00,609 --> 00:28:04,629
yeah yeah okay well it's if you want to

00:28:03,100 --> 00:28:09,759
build a custom kernel it's much easier

00:28:04,629 --> 00:28:14,980
to do that get install Linux source and

00:28:09,759 --> 00:28:18,820
then and then you use the make dip

00:28:14,980 --> 00:28:24,840
package command to build the or to build

00:28:18,820 --> 00:28:29,529
your kernel actually editing the the

00:28:24,840 --> 00:28:31,119
Debian source package of Linux is it's

00:28:29,529 --> 00:28:33,999
it's pretty complicated it's I

00:28:31,119 --> 00:28:38,080
understand that and that's I don't

00:28:33,999 --> 00:28:40,059
recommend that you do that so the kernel

00:28:38,080 --> 00:28:43,359
handbook is the Debian kernel handbook

00:28:40,059 --> 00:28:46,389
package and the kernel handbook sorry

00:28:43,359 --> 00:28:49,659
colonel - handbook Dalia Debian - org

00:28:46,389 --> 00:28:56,559
explain the sort of recommended ways to

00:28:49,659 --> 00:28:59,309
to build custom kernel are there any

00:28:56,559 --> 00:28:59,309
other questions

00:29:02,850 --> 00:29:07,830
and you mentioned that there are various

00:29:05,710 --> 00:29:10,150
tools need to enable the new features

00:29:07,830 --> 00:29:11,770
can you also see something about the

00:29:10,150 --> 00:29:13,360
tools needed to enable the username

00:29:11,770 --> 00:29:15,760
space features and other namespace

00:29:13,360 --> 00:29:21,279
features are they available upstream and

00:29:15,760 --> 00:29:23,409
what about the debian status well I

00:29:21,279 --> 00:29:27,460
would assume I haven't actually looked

00:29:23,409 --> 00:29:33,070
at this for a while but there's there's

00:29:27,460 --> 00:29:35,799
a package called lxc which is just at

00:29:33,070 --> 00:29:37,600
first Linux something contain this and I

00:29:35,799 --> 00:29:40,659
would assume that of that is going to

00:29:37,600 --> 00:29:42,669
make use of user name spaces but I don't

00:29:40,659 --> 00:29:44,890
know whether it's up to dates and raised

00:29:42,669 --> 00:29:47,429
to use them yet obviously because we

00:29:44,890 --> 00:29:51,610
haven't enabled them in the kernel then

00:29:47,429 --> 00:29:54,330
do the conflict with XFS then that can't

00:29:51,610 --> 00:29:54,330
work quite yet

00:29:59,450 --> 00:30:03,169
any other question

00:30:09,650 --> 00:30:21,819
where I'm thanks Ben and thanks everyone

00:30:13,300 --> 00:30:21,819

YouTube URL: https://www.youtube.com/watch?v=UT3riXBd2zw


