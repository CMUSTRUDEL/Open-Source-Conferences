Title: Ubuntu daily quality improvements; overlap with Debian CUT
Publication date: 2017-11-29
Playlist: DebConf 13
Description: 
	by Steve Langasek
by Colin Watson

At: DebConf13
https://debconf13.debconf.org/
Room: Main talk room
Scheduled start: 2013-08-15 14:30:00
Captions: 
	00:00:00,000 --> 00:00:03,360
we're good to start now I have Colin and

00:00:02,159 --> 00:00:07,259
Steve and they're gonna talk about

00:00:03,360 --> 00:00:09,389
Ubuntu daily quality and enjoy alright

00:00:07,259 --> 00:00:17,550
hi welcome I hope you bought a good

00:00:09,389 --> 00:00:18,869
lunch I'm Colin Watson this is Steve

00:00:17,550 --> 00:00:20,880
Wagner Scheck

00:00:18,869 --> 00:00:22,800
we've both been working in a venture for

00:00:20,880 --> 00:00:24,300
many years among other things we were

00:00:22,800 --> 00:00:26,369
both in the Ubuntu release team and

00:00:24,300 --> 00:00:29,160
we've also been Debian developers for

00:00:26,369 --> 00:00:32,099
rather more years than that were ku

00:00:29,160 --> 00:00:36,410
release managers back in the Sarge cycle

00:00:32,099 --> 00:00:39,930
days and so we share an interest in the

00:00:36,410 --> 00:00:41,129
in Debian release cycle and in its more

00:00:39,930 --> 00:00:43,649
detailed mechanics and how they might be

00:00:41,129 --> 00:00:45,480
improved we'd like to talk with you

00:00:43,649 --> 00:00:47,670
today about some of the things we've

00:00:45,480 --> 00:00:50,100
been doing in Ubuntu to help improve

00:00:47,670 --> 00:00:53,030
what's what we've what's been called our

00:00:50,100 --> 00:00:55,440
daily quality that is the ability for

00:00:53,030 --> 00:00:56,910
reasonably skilled users people who know

00:00:55,440 --> 00:00:58,620
their way around a computer but you

00:00:56,910 --> 00:01:01,440
aren't necessarily developing the

00:00:58,620 --> 00:01:03,390
distribution itself to to use our

00:01:01,440 --> 00:01:05,610
development release from day to day and

00:01:03,390 --> 00:01:08,220
not have to worry about things breaking

00:01:05,610 --> 00:01:09,840
on them all the time so this is very

00:01:08,220 --> 00:01:11,880
important to us obviously we want as

00:01:09,840 --> 00:01:14,040
many of our developers as possible to be

00:01:11,880 --> 00:01:15,780
dogfooding the next really the next

00:01:14,040 --> 00:01:17,040
thing we're going to release and we

00:01:15,780 --> 00:01:18,600
really don't want to their

00:01:17,040 --> 00:01:21,930
velocity by making them deal with

00:01:18,600 --> 00:01:23,729
avoidable problems all the time this

00:01:21,930 --> 00:01:26,970
this is meant to be a buff it's not

00:01:23,729 --> 00:01:30,810
meant to be a lecture though I have half

00:01:26,970 --> 00:01:31,950
dozen slides or so at start to expand

00:01:30,810 --> 00:01:34,740
what we've been doing and start things

00:01:31,950 --> 00:01:35,909
off but this is DEFCON prophecy one of

00:01:34,740 --> 00:01:38,369
the main things I want to do is figure

00:01:35,909 --> 00:01:42,750
out how to use our experience and have

00:01:38,369 --> 00:01:45,390
been to to help improve so we used much

00:01:42,750 --> 00:01:47,820
the same workflow from from the finding

00:01:45,390 --> 00:01:51,149
of Ubuntu back in 2004 until about two

00:01:47,820 --> 00:01:54,720
years ago please excuse my pulling graph

00:01:51,149 --> 00:01:57,600
is skills warty that was been to four

00:01:54,720 --> 00:01:59,880
point ten was a copy of unstable we had

00:01:57,600 --> 00:02:03,960
about ten or fifteen Debian developers

00:01:59,880 --> 00:02:07,259
beat on us until it works from Ubuntu

00:02:03,960 --> 00:02:09,780
504 onwards we started each each of our

00:02:07,259 --> 00:02:11,489
six monthly release cycles by sinking

00:02:09,780 --> 00:02:12,520
verbatim copies of anything that we

00:02:11,489 --> 00:02:15,220
haven't changed

00:02:12,520 --> 00:02:18,190
straight from Debian unstable and we

00:02:15,220 --> 00:02:20,200
went around merging as many of our of

00:02:18,190 --> 00:02:22,870
our modified packages with unstable as

00:02:20,200 --> 00:02:24,580
we could possibly manage we did so we

00:02:22,870 --> 00:02:28,060
did this for a few months then settled

00:02:24,580 --> 00:02:30,940
on to close to flood gates again settled

00:02:28,060 --> 00:02:32,920
on to release once or twice we tried

00:02:30,940 --> 00:02:34,630
sinking from testing instead and hope

00:02:32,920 --> 00:02:36,850
that that might make things a little bit

00:02:34,630 --> 00:02:39,430
more stable for us but that had its own

00:02:36,850 --> 00:02:41,050
problems as it turns out and I suspect

00:02:39,430 --> 00:02:44,290
some other derivatives may have had

00:02:41,050 --> 00:02:45,940
similar issues we often find that bug

00:02:44,290 --> 00:02:48,430
fixes we cared about we're significantly

00:02:45,940 --> 00:02:50,620
delayed either due to the unstable

00:02:48,430 --> 00:02:52,900
testing like or sometimes just because

00:02:50,620 --> 00:02:55,870
they were waiting for us to get run to

00:02:52,900 --> 00:02:58,450
manually merging something also the

00:02:55,870 --> 00:03:00,040
safeguards inherent in testing help out

00:02:58,450 --> 00:03:02,370
Debian but they don't help out

00:03:00,040 --> 00:03:05,530
derivatives as much as you might think

00:03:02,370 --> 00:03:08,620
because they often depend on things like

00:03:05,530 --> 00:03:10,900
the build order in Debian and so on

00:03:08,620 --> 00:03:13,750
which we don't automatically inherit so

00:03:10,900 --> 00:03:15,730
we mostly in practice we mostly stuck

00:03:13,750 --> 00:03:20,920
with unstable and we dealt with the

00:03:15,730 --> 00:03:22,390
problem so it resulted from that so yeah

00:03:20,920 --> 00:03:24,880
this kind of works

00:03:22,390 --> 00:03:27,790
we generally manage to get everything

00:03:24,880 --> 00:03:30,970
settled on just about by release but it

00:03:27,790 --> 00:03:33,970
really sucked in many ways we used to

00:03:30,970 --> 00:03:36,340
have an alpha one release our first

00:03:33,970 --> 00:03:38,290
alpha and that was more or less the

00:03:36,340 --> 00:03:43,360
first thing that we managed to get to

00:03:38,290 --> 00:03:45,580
build at all before that only the really

00:03:43,360 --> 00:03:48,520
kind of scarily brief people run our

00:03:45,580 --> 00:03:49,930
runner development release and to be

00:03:48,520 --> 00:03:52,150
honest if it broke we didn't have a

00:03:49,930 --> 00:03:53,860
great deal of sympathy for them weeds we

00:03:52,150 --> 00:03:57,820
told him not to do that they did it fell

00:03:53,860 --> 00:04:01,090
over but this this did of course mean

00:03:57,820 --> 00:04:03,670
that we had there was a certain amount

00:04:01,090 --> 00:04:06,610
of impotence to overcome to get people

00:04:03,670 --> 00:04:09,550
to start running our our development

00:04:06,610 --> 00:04:11,860
release once it got to the problem once

00:04:09,550 --> 00:04:14,590
it got kind of this point and things

00:04:11,860 --> 00:04:17,320
actually worked and we spent an

00:04:14,590 --> 00:04:19,840
increasing amount of time on on supports

00:04:17,320 --> 00:04:20,590
dealing with stupid things that really

00:04:19,840 --> 00:04:24,040
should have been sorted out

00:04:20,590 --> 00:04:25,960
automatically with with poverty's my

00:04:24,040 --> 00:04:29,350
co-presenter and we when we know

00:04:25,960 --> 00:04:31,150
Multi arch in 1110 for MD 64 users

00:04:29,350 --> 00:04:33,280
that's that be a things worse in some

00:04:31,150 --> 00:04:36,430
ways as well because know I mattered

00:04:33,280 --> 00:04:41,139
very strongly that that amd64 and I

00:04:36,430 --> 00:04:43,960
three at six were exactly in sync and if

00:04:41,139 --> 00:04:46,750
Debian switches on multi arch by default

00:04:43,960 --> 00:04:48,220
for for a large population of users I

00:04:46,750 --> 00:04:50,229
suspect will see the same thing there

00:04:48,220 --> 00:04:54,580
and I was often not true during

00:04:50,229 --> 00:04:56,979
development so at the start of the 1204

00:04:54,580 --> 00:04:59,020
cycle I persuaded Canonical's

00:04:56,979 --> 00:05:00,880
engineering management Siletz two or

00:04:59,020 --> 00:05:03,759
three people at a time rotated for a

00:05:00,880 --> 00:05:05,590
month or so into what we called +1

00:05:03,759 --> 00:05:09,789
maintenance and that was spending most

00:05:05,590 --> 00:05:13,120
of their time just doing packaging level

00:05:09,789 --> 00:05:15,669
maintenance of Ubuntu plus one of the

00:05:13,120 --> 00:05:17,590
development release so their job would

00:05:15,669 --> 00:05:19,690
be tackled build failures and stole

00:05:17,590 --> 00:05:21,250
ability failures make sure things kept

00:05:19,690 --> 00:05:24,250
make sure our images kept building

00:05:21,250 --> 00:05:26,460
reliably and generally to keep our

00:05:24,250 --> 00:05:30,310
backlog of technical debt under control

00:05:26,460 --> 00:05:33,610
so that the release team we wouldn't

00:05:30,310 --> 00:05:35,020
then have to panic for a week or so any

00:05:33,610 --> 00:05:37,570
time we had to pull out a milestone

00:05:35,020 --> 00:05:39,190
release and a side goal of this was to

00:05:37,570 --> 00:05:40,780
try to spread spread more knowledge

00:05:39,190 --> 00:05:42,969
among our engineers who weren't

00:05:40,780 --> 00:05:45,430
necessarily quite as familiar with with

00:05:42,969 --> 00:05:47,229
Debian packaging as some of the rest of

00:05:45,430 --> 00:05:49,990
us and to get more of them contributing

00:05:47,229 --> 00:05:52,330
patches to Debian and this all kansai

00:05:49,990 --> 00:05:54,280
coincided with general push among our

00:05:52,330 --> 00:05:56,289
management to try to sort out quality

00:05:54,280 --> 00:05:58,500
problems so we you know we started to

00:05:56,289 --> 00:06:00,849
see problem is to see things like the

00:05:58,500 --> 00:06:02,590
like the director of bench engineering

00:06:00,849 --> 00:06:04,419
looking at the uninstalled bull package

00:06:02,590 --> 00:06:07,710
list and knocking people about us and

00:06:04,419 --> 00:06:10,570
that certainly made my job a lot easier

00:06:07,710 --> 00:06:12,280
in the 12 is certain it's likely after

00:06:10,570 --> 00:06:14,919
that 12 and we we did a lot of

00:06:12,280 --> 00:06:16,840
proprietary infrastructure work mainly

00:06:14,919 --> 00:06:21,250
particularly unarmed in infrastructure

00:06:16,840 --> 00:06:23,639
system Launchpad most of this was moving

00:06:21,250 --> 00:06:25,840
thing moving some of the archive admin

00:06:23,639 --> 00:06:29,110
scripts the equivalent of the

00:06:25,840 --> 00:06:31,840
interactive parts of the DAX suite so

00:06:29,110 --> 00:06:34,449
things like override changes new review

00:06:31,840 --> 00:06:35,949
thing out of the out of the core of

00:06:34,449 --> 00:06:39,100
launchpad where we could only run them

00:06:35,949 --> 00:06:42,850
by SS etching to a scary privilege

00:06:39,100 --> 00:06:46,780
machine and it's to general-purpose ap

00:06:42,850 --> 00:06:48,699
is that we could Lance people who

00:06:46,780 --> 00:06:51,160
weren't canonical canonical employees

00:06:48,699 --> 00:06:52,449
use them that sort of thing this also

00:06:51,160 --> 00:06:54,190
had the useful the fact that we could

00:06:52,449 --> 00:06:58,000
maintain our own tools a lot more easily

00:06:54,190 --> 00:06:59,380
built build better ones but as a side

00:06:58,000 --> 00:07:01,900
effect of all of this at the start of

00:06:59,380 --> 00:07:07,780
the next cycle 1304 we realized that

00:07:01,900 --> 00:07:09,040
this would be pretty easy to do so do

00:07:07,780 --> 00:07:11,260
you think the names actually mentioned

00:07:09,040 --> 00:07:13,660
in the slide but Brittany is of course

00:07:11,260 --> 00:07:16,780
the program that Sampson tetons wrote

00:07:13,660 --> 00:07:19,030
way back in 2000 I think it was to

00:07:16,780 --> 00:07:21,460
manage the propagation of uploads from

00:07:19,030 --> 00:07:23,139
unstable to testing and various people

00:07:21,460 --> 00:07:27,100
in the release team have been hacking

00:07:23,139 --> 00:07:29,850
that ever since in October last year I

00:07:27,100 --> 00:07:33,039
hacked stuff to working to burn - and

00:07:29,850 --> 00:07:35,370
convinced our infrastructure to sort of

00:07:33,039 --> 00:07:39,310
with a hammer to redirect all uploads

00:07:35,370 --> 00:07:42,400
from raring which was the development

00:07:39,310 --> 00:07:47,050
release for 1304 - raring proposed buddy

00:07:42,400 --> 00:07:48,639
falls so this meant that for us raring +

00:07:47,050 --> 00:07:51,760
raring proposed became more or less

00:07:48,639 --> 00:07:53,200
equivalent to unstable and raring on its

00:07:51,760 --> 00:07:55,680
own which is what we were telling all of

00:07:53,200 --> 00:07:59,229
our development users to use was

00:07:55,680 --> 00:08:01,599
functionally equivalent testing there

00:07:59,229 --> 00:08:04,090
been some teething problems with this as

00:08:01,599 --> 00:08:05,889
developers got used to it but the

00:08:04,090 --> 00:08:07,930
reactions have been I think over

00:08:05,889 --> 00:08:10,419
whelming any positive people are very

00:08:07,930 --> 00:08:12,580
quickly settled into the into the

00:08:10,419 --> 00:08:15,539
assumption that our testing equivalent

00:08:12,580 --> 00:08:18,849
by and large doesn't break on upgrades

00:08:15,539 --> 00:08:21,639
we miss the odd one of course but the

00:08:18,849 --> 00:08:23,260
cases where it breaks any size ability

00:08:21,639 --> 00:08:25,210
the cases where this is broken any

00:08:23,260 --> 00:08:26,650
sizable number of people they've been

00:08:25,210 --> 00:08:29,770
few enough that we've been able to go

00:08:26,650 --> 00:08:31,720
and explicitly investigate each one as

00:08:29,770 --> 00:08:36,279
opposed to the previous state or just

00:08:31,720 --> 00:08:37,570
kind of come to accept breakage one of

00:08:36,279 --> 00:08:40,000
one of the things that came up in

00:08:37,570 --> 00:08:42,579
several of those investigations was the

00:08:40,000 --> 00:08:44,550
need for packages to be able to make

00:08:42,579 --> 00:08:46,100
assertions about their

00:08:44,550 --> 00:08:48,240
about the behavior of the dependencies

00:08:46,100 --> 00:08:51,360
people wanted to be able to say you know

00:08:48,240 --> 00:08:54,089
my my graphical application needs to

00:08:51,360 --> 00:08:58,500
keep working in the following ways

00:08:54,089 --> 00:09:01,050
even if gtk changes let's say and they

00:08:58,500 --> 00:09:04,380
wanted to say if the if the those tests

00:09:01,050 --> 00:09:09,750
are stop filling then keep the dependent

00:09:04,380 --> 00:09:11,310
upon package art of testing so in 1310

00:09:09,750 --> 00:09:14,190
that's the current development cycle

00:09:11,310 --> 00:09:16,800
we've we've started using Ian Jackson's

00:09:14,190 --> 00:09:20,339
ultra package test tool for that that's

00:09:16,800 --> 00:09:22,050
also debby enhancement who's all yes so

00:09:20,339 --> 00:09:24,390
what her package tests are triggered for

00:09:22,050 --> 00:09:26,519
us now when whenever the package is

00:09:24,390 --> 00:09:29,310
sufficient its built in enough

00:09:26,519 --> 00:09:31,380
architectures so you can use this for

00:09:29,310 --> 00:09:33,870
package local local tests and some

00:09:31,380 --> 00:09:36,110
people do but the real par is that auto

00:09:33,870 --> 00:09:39,060
package tests are run for packages

00:09:36,110 --> 00:09:42,870
reverse dependencies to whenever it's

00:09:39,060 --> 00:09:44,040
whenever it's changed there are various

00:09:42,870 --> 00:09:46,470
other things we've been doing we've

00:09:44,040 --> 00:09:48,779
started doing fair stuff debts for some

00:09:46,470 --> 00:09:51,240
of our stable releases so that we can so

00:09:48,779 --> 00:09:53,370
we can rule out changes to a subset of

00:09:51,240 --> 00:09:57,300
users to start with rather than everyone

00:09:53,370 --> 00:09:59,430
at once so you know packages uploaded

00:09:57,300 --> 00:10:01,079
post release get a special control file

00:09:59,430 --> 00:10:02,880
and control fields applied as an

00:10:01,079 --> 00:10:06,779
override and that's gradually ramped up

00:10:02,880 --> 00:10:08,930
to 100% over time whenever our error

00:10:06,779 --> 00:10:12,000
tracker system errors dr. bencomb

00:10:08,930 --> 00:10:13,800
indicates that there are there's an

00:10:12,000 --> 00:10:17,610
increased number of crashes coming in or

00:10:13,800 --> 00:10:19,829
new crashes then we suggest that we

00:10:17,610 --> 00:10:23,820
assume that's a regression we back off

00:10:19,829 --> 00:10:26,760
the updates applied to users and start

00:10:23,820 --> 00:10:29,040
investigating manually and of course

00:10:26,760 --> 00:10:31,740
we've got we've got other future plans

00:10:29,040 --> 00:10:33,480
we we've lots of continuous integration

00:10:31,740 --> 00:10:36,449
we want to make that go as fast as

00:10:33,480 --> 00:10:38,880
possible we can now turn around source

00:10:36,449 --> 00:10:42,870
uploads to installable image builds in

00:10:38,880 --> 00:10:45,029
under two hours even unarmed depending

00:10:42,870 --> 00:10:46,260
on the complexity of the package and we

00:10:45,029 --> 00:10:48,959
should be able to go we think we should

00:10:46,260 --> 00:10:51,240
be able to go faster still we also need

00:10:48,959 --> 00:10:52,740
to make sure that developers can can

00:10:51,240 --> 00:10:54,960
understand all of this and have some

00:10:52,740 --> 00:10:57,240
some idea of where their changes are

00:10:54,960 --> 00:10:58,680
I don't know exactly what we're going to

00:10:57,240 --> 00:11:02,010
use by way of a dashboard although I've

00:10:58,680 --> 00:11:03,540
talked to Rafael about the briefly about

00:11:02,010 --> 00:11:06,570
the changes to the package tracking

00:11:03,540 --> 00:11:07,980
system which perhaps we can use and

00:11:06,570 --> 00:11:10,290
maybe I can persuade people that it's

00:11:07,980 --> 00:11:14,730
set to have shorter freezers neither we

00:11:10,290 --> 00:11:16,740
have all this kind of stuff in place so

00:11:14,730 --> 00:11:18,060
both of us I think we're in the Debian

00:11:16,740 --> 00:11:19,470
release team for long enough to have a

00:11:18,060 --> 00:11:19,880
general idea of what we didn't want to

00:11:19,470 --> 00:11:23,280
happen

00:11:19,880 --> 00:11:27,540
we didn't want to end up with a huge

00:11:23,280 --> 00:11:30,360
backlog of work in in develop hosts for

00:11:27,540 --> 00:11:32,190
that read unstable that's blocked for

00:11:30,360 --> 00:11:35,940
weeks for landing in our equivalent of

00:11:32,190 --> 00:11:39,060
testing that's that is exactly technical

00:11:35,940 --> 00:11:41,460
death and the less of the less of that

00:11:39,060 --> 00:11:44,400
we have the better we also didn't want

00:11:41,460 --> 00:11:47,220
to rely on humans running proposed and

00:11:44,400 --> 00:11:48,930
reporting problems just because half the

00:11:47,220 --> 00:11:51,480
point of all of this was to minimize the

00:11:48,930 --> 00:11:54,150
disruption that was caused to users of

00:11:51,480 --> 00:11:57,120
the development release so we decided to

00:11:54,150 --> 00:12:00,240
use proposed purely for automated tests

00:11:57,120 --> 00:12:02,340
and not to do any checking of release

00:12:00,240 --> 00:12:04,380
critical bugs which would mean users

00:12:02,340 --> 00:12:07,890
would have to be running proposed in

00:12:04,380 --> 00:12:09,630
order to be able to find them or we also

00:12:07,890 --> 00:12:12,720
decided not to have any best line delay

00:12:09,630 --> 00:12:14,490
before a package could migrate so this

00:12:12,720 --> 00:12:16,920
seems to be working pretty well for us

00:12:14,490 --> 00:12:20,550
in practice so far it means we can keep

00:12:16,920 --> 00:12:22,440
the Delta relatively small that's when I

00:12:20,550 --> 00:12:26,640
when I wrote this so I went and looked

00:12:22,440 --> 00:12:28,670
and there were 280 or so on migrated

00:12:26,640 --> 00:12:33,360
uploads and up into there were about

00:12:28,670 --> 00:12:34,950
2600 and in Debian and most of our most

00:12:33,360 --> 00:12:36,300
of our human developer attention is

00:12:34,950 --> 00:12:38,460
focused on what's on

00:12:36,300 --> 00:12:40,170
what's in devel rather that is what

00:12:38,460 --> 00:12:44,010
we're going to release rather than

00:12:40,170 --> 00:12:45,480
Watson developer post I think there are

00:12:44,010 --> 00:12:47,850
several things Debian could could

00:12:45,480 --> 00:12:49,410
improve on - well it's the point of

00:12:47,850 --> 00:12:52,860
having a buff so hopefully people can

00:12:49,410 --> 00:12:55,170
suggest others keeping keeping testing

00:12:52,860 --> 00:12:57,150
as current as we can is is something

00:12:55,170 --> 00:12:58,950
that Debian developers should be doing

00:12:57,150 --> 00:13:00,990
and it's something as in all of our

00:12:58,950 --> 00:13:01,740
interests to do it usually involves

00:13:00,990 --> 00:13:04,560
fixing bugs

00:13:01,740 --> 00:13:06,570
it makes our release process run more

00:13:04,560 --> 00:13:08,730
smoothly which we all complain about

00:13:06,570 --> 00:13:11,790
renew dozens and it's better for

00:13:08,730 --> 00:13:13,380
our users one reason we I think we

00:13:11,790 --> 00:13:15,899
haven't cared so much is that our our

00:13:13,380 --> 00:13:19,170
users are split between testy and

00:13:15,899 --> 00:13:20,880
unstable and they have to be it's it's a

00:13:19,170 --> 00:13:23,399
vital there are vital input in the

00:13:20,880 --> 00:13:25,310
decision of whether to migrate and

00:13:23,399 --> 00:13:27,870
upload to testing in the first place

00:13:25,310 --> 00:13:31,110
Lucas's opening presentation is Deb

00:13:27,870 --> 00:13:35,639
Kampf showed he showed data from FTP da

00:13:31,110 --> 00:13:37,889
ba is showing 12 percent I think it was

00:13:35,639 --> 00:13:40,589
twelve percent of hits to testing and 11

00:13:37,889 --> 00:13:42,480
percent unstable look we've we've

00:13:40,589 --> 00:13:47,820
divided and conquered our own user base

00:13:42,480 --> 00:13:50,310
this is ridiculous working on testing

00:13:47,820 --> 00:13:52,290
migration problems is it's a really slow

00:13:50,310 --> 00:13:54,980
I've done a lot of it's really slow it's

00:13:52,290 --> 00:13:57,360
a process it's often very frustrating

00:13:54,980 --> 00:13:59,130
you have to wear to a very long time

00:13:57,360 --> 00:14:02,730
transom to happen generally although you

00:13:59,130 --> 00:14:05,760
can sometimes make some predictions we

00:14:02,730 --> 00:14:08,370
find that hooking automated testing into

00:14:05,760 --> 00:14:10,560
Brittany is a very powerful tool there's

00:14:08,370 --> 00:14:13,230
a small but growing number of packages

00:14:10,560 --> 00:14:16,410
that have Auto packaged tests in them in

00:14:13,230 --> 00:14:19,649
the Debian archive there are other other

00:14:16,410 --> 00:14:23,490
automated possibilities such as Len TN

00:14:19,649 --> 00:14:25,230
adequate few parts and we might as well

00:14:23,490 --> 00:14:27,990
use all the tools available there is

00:14:25,230 --> 00:14:30,120
absolutely no point in having humans pay

00:14:27,990 --> 00:14:34,110
attention to things before automated

00:14:30,120 --> 00:14:36,029
systems have done their work on it as so

00:14:34,110 --> 00:14:38,630
as a straw man to start off the buff I'd

00:14:36,029 --> 00:14:41,730
I'd like to ask what you think of this

00:14:38,630 --> 00:14:43,709
cut the migration proposal focus I cut

00:14:41,730 --> 00:14:47,370
the migration delay for a testing in

00:14:43,709 --> 00:14:49,800
half starting not encourage developers

00:14:47,370 --> 00:14:52,860
especially any developers who object to

00:14:49,800 --> 00:14:55,319
this to writes off package tests or

00:14:52,860 --> 00:14:57,930
whatever other automated tooling they

00:14:55,319 --> 00:15:00,389
want to for the things that we're

00:14:57,930 --> 00:15:04,100
currently relying on users to catch by

00:15:00,389 --> 00:15:06,839
being our human safety nets for unstable

00:15:04,100 --> 00:15:09,029
unless we as we ramp down the delays for

00:15:06,839 --> 00:15:10,949
that I'm I'd be willing to bet that this

00:15:09,029 --> 00:15:14,220
makes it much more attractive to work on

00:15:10,949 --> 00:15:16,800
migration problems because you get you

00:15:14,220 --> 00:15:18,209
you'll get feedback more quickly I'm

00:15:16,800 --> 00:15:20,490
also willing to bet that it makes

00:15:18,209 --> 00:15:21,769
testing more attractive to users and we

00:15:20,490 --> 00:15:24,999
should be able to test this

00:15:21,769 --> 00:15:27,769
looking at similar kinds of mirror stats

00:15:24,999 --> 00:15:29,540
and our end goes there our end goal I

00:15:27,769 --> 00:15:32,209
think should be to have unstable

00:15:29,540 --> 00:15:35,360
detesting consists solely of automated

00:15:32,209 --> 00:15:38,470
of entirely automated tests so that we

00:15:35,360 --> 00:15:40,970
can start honestly with a clear head in

00:15:38,470 --> 00:15:46,069
encouraging all of our users to use

00:15:40,970 --> 00:15:47,929
testing not unstable so does anybody

00:15:46,069 --> 00:15:53,329
have any comments or wish to throw

00:15:47,929 --> 00:16:00,079
tomatoes at me Joey he's looking for the

00:15:53,329 --> 00:16:01,970
tomato somebody's passing it now I think

00:16:00,079 --> 00:16:03,019
this is a great proposal I had a couple

00:16:01,970 --> 00:16:05,540
of questions

00:16:03,019 --> 00:16:08,660
how many architectures have been to

00:16:05,540 --> 00:16:11,420
currently migrating into testing at the

00:16:08,660 --> 00:16:13,910
same time fourth moment will be five

00:16:11,420 --> 00:16:15,769
soon right so it's that might be one

00:16:13,910 --> 00:16:17,420
reason that you're a lot lower also

00:16:15,769 --> 00:16:21,170
because we have things like broken or

00:16:17,420 --> 00:16:23,089
s/390 that breaks this is obviously not

00:16:21,170 --> 00:16:25,249
a complete solution to all the migration

00:16:23,089 --> 00:16:26,959
problems but I think it is is something

00:16:25,249 --> 00:16:28,629
we can easily tackle yeah the other

00:16:26,959 --> 00:16:30,769
point I want to make is that we can

00:16:28,629 --> 00:16:32,569
individual maintainer z' can already cut

00:16:30,769 --> 00:16:34,730
the migration time in half obviously you

00:16:32,569 --> 00:16:37,970
know this you just change them to medium

00:16:34,730 --> 00:16:40,069
but that doesn't help so there's also

00:16:37,970 --> 00:16:42,019
kind of a social pressure against doing

00:16:40,069 --> 00:16:43,549
so I mean sometimes it's certainly they

00:16:42,019 --> 00:16:45,939
I do whenever I feel like it nobody's

00:16:43,549 --> 00:16:48,139
ever said of things so well that's true

00:16:45,939 --> 00:16:49,879
that's because you're immune to social

00:16:48,139 --> 00:16:52,249
pressure that's ahead of you on solve

00:16:49,879 --> 00:16:54,230
the general problem right and so I knew

00:16:52,249 --> 00:16:56,389
the Gennie's team sometimes uh niches

00:16:54,230 --> 00:16:58,399
things when they feel appropriate

00:16:56,389 --> 00:17:00,470
yeah okay and and in general I think

00:16:58,399 --> 00:17:01,579
it's a brilliant idea and I think why

00:17:00,470 --> 00:17:03,079
shouldn't we just try it and see what

00:17:01,579 --> 00:17:05,539
happens what's the worst that's gonna

00:17:03,079 --> 00:17:06,709
happen we're gonna get a log jam or

00:17:05,539 --> 00:17:08,000
maybe things are gonna be a little bit

00:17:06,709 --> 00:17:10,579
worse than testing for a while because

00:17:08,000 --> 00:17:13,339
they're not tested as much right that's

00:17:10,579 --> 00:17:15,289
the worst case scenario like I say is

00:17:13,339 --> 00:17:18,350
that we have half the packages waiting

00:17:15,289 --> 00:17:21,409
in my grade or something like I said I

00:17:18,350 --> 00:17:23,329
think that's the we should we should

00:17:21,409 --> 00:17:25,659
kind of wean ourselves off the idea that

00:17:23,329 --> 00:17:29,539
we have to have all this human to human

00:17:25,659 --> 00:17:31,890
testing of unstable first yeah so

00:17:29,539 --> 00:17:33,570
expanding on the architecture point

00:17:31,890 --> 00:17:36,030
so one of the comments that Colin made

00:17:33,570 --> 00:17:37,500
in his presentation was the fact that we

00:17:36,030 --> 00:17:38,790
do auto packaged testing on I don't

00:17:37,500 --> 00:17:40,230
forget how you order that as many

00:17:38,790 --> 00:17:42,630
architectures as possible what might

00:17:40,230 --> 00:17:45,330
have already said was a little big to

00:17:42,630 --> 00:17:46,710
avoid okay because I think it's worth

00:17:45,330 --> 00:17:47,760
mentioning that in fact what is being

00:17:46,710 --> 00:17:49,920
done in a bunch of right now is those

00:17:47,760 --> 00:17:51,809
packages are being tested on I think

00:17:49,920 --> 00:17:55,080
they're being tested on amd64 plus I 3

00:17:51,809 --> 00:17:57,150
at 6 corrects and so we don't have any

00:17:55,080 --> 00:17:58,799
testing for instance on arm which is a

00:17:57,150 --> 00:18:01,110
very important architecture but in order

00:17:58,799 --> 00:18:03,780
to not slow things down we consider the

00:18:01,110 --> 00:18:05,070
testing on a 36 and on x86 to be

00:18:03,780 --> 00:18:06,510
sufficient to move it through the the

00:18:05,070 --> 00:18:08,130
chain and that way we don't have to wait

00:18:06,510 --> 00:18:09,510
for the much slower we don't have to

00:18:08,130 --> 00:18:10,559
wait till the end of the arm build to

00:18:09,510 --> 00:18:11,790
start our testing and so there's a

00:18:10,559 --> 00:18:14,700
little bit of parallelization there

00:18:11,790 --> 00:18:16,950
which we think is a good it's it's a

00:18:14,700 --> 00:18:19,080
sweet spot in terms of the the trade-off

00:18:16,950 --> 00:18:22,830
between automated testing and the delays

00:18:19,080 --> 00:18:27,660
I do consider our compromise but I think

00:18:22,830 --> 00:18:30,990
it's the current sweet spot yeah just to

00:18:27,660 --> 00:18:32,940
the urgency thing raised before maybe we

00:18:30,990 --> 00:18:35,190
could just make medium the default that

00:18:32,940 --> 00:18:37,020
was has have the advantage also that you

00:18:35,190 --> 00:18:39,299
can have a longer period if you think

00:18:37,020 --> 00:18:41,730
this is an applet that is likely to

00:18:39,299 --> 00:18:44,460
break something but my question is

00:18:41,730 --> 00:18:47,790
something different I was just thinking

00:18:44,460 --> 00:18:49,740
that the human testing part is also

00:18:47,790 --> 00:18:51,510
quite important and there are some kinds

00:18:49,740 --> 00:18:53,730
of problems you can only catch that way

00:18:51,510 --> 00:18:56,100
and we want to have these problems out

00:18:53,730 --> 00:18:58,980
of our release which is kind of testing

00:18:56,100 --> 00:19:01,970
or testing becomes to release what do

00:18:58,980 --> 00:19:04,980
you think of having stage before

00:19:01,970 --> 00:19:06,780
unstable that just does this automated

00:19:04,980 --> 00:19:09,240
tests in the same way you were doing it

00:19:06,780 --> 00:19:12,540
for Ubuntu yeah I was arguing with

00:19:09,240 --> 00:19:15,419
needles about that on Monday or Tuesday

00:19:12,540 --> 00:19:17,970
I think my worry about that is that it

00:19:15,419 --> 00:19:19,620
runs the risk of fragmenting our you

00:19:17,970 --> 00:19:22,440
know some users will decide that they're

00:19:19,620 --> 00:19:26,040
going to use that because that's what's

00:19:22,440 --> 00:19:27,540
the package they want as in and I I'm

00:19:26,040 --> 00:19:29,450
concerned that would run the risk of

00:19:27,540 --> 00:19:32,520
fragmenting our user base even further

00:19:29,450 --> 00:19:34,230
so in practice we end up getting lower

00:19:32,520 --> 00:19:36,179
quality testing because we're not

00:19:34,230 --> 00:19:38,970
divided among three targets and not

00:19:36,179 --> 00:19:41,910
among two I'd like to see I agree that

00:19:38,970 --> 00:19:42,740
we need we clearly need human testing

00:19:41,910 --> 00:19:46,910
before we can actually

00:19:42,740 --> 00:19:48,980
something but I you know it's it's not

00:19:46,910 --> 00:19:52,190
like we ignore release critical bugs

00:19:48,980 --> 00:19:56,870
filed on testing I just think that we

00:19:52,190 --> 00:19:58,340
should wait until things have passed all

00:19:56,870 --> 00:20:00,410
of the automated stages before we

00:19:58,340 --> 00:20:01,790
unleash them on humans right so it's

00:20:00,410 --> 00:20:04,340
really interesting it's probably worth

00:20:01,790 --> 00:20:05,780
talking for just a sec about how we

00:20:04,340 --> 00:20:08,179
ended up with this thing between

00:20:05,780 --> 00:20:10,460
unstable and stable being called testing

00:20:08,179 --> 00:20:13,220
this day when I first dreamed up the

00:20:10,460 --> 00:20:15,020
notion of using the concept of a package

00:20:13,220 --> 00:20:17,450
pool and having in effect different

00:20:15,020 --> 00:20:19,550
releases as sort of you know reference

00:20:17,450 --> 00:20:21,559
things into it it was specifically

00:20:19,550 --> 00:20:23,360
because I thought the vast majority of

00:20:21,559 --> 00:20:25,030
our users wanted to run something that

00:20:23,360 --> 00:20:28,070
was a little more structurally

00:20:25,030 --> 00:20:29,720
guaranteed to be correct than unstable

00:20:28,070 --> 00:20:31,550
but didn't want to have to wait for a

00:20:29,720 --> 00:20:34,429
stable release cycle on client devices

00:20:31,550 --> 00:20:36,950
it's just that the person who initially

00:20:34,429 --> 00:20:39,350
implemented the cool the code for doing

00:20:36,950 --> 00:20:41,510
pools and to create the thing that ended

00:20:39,350 --> 00:20:43,040
up being called testing was a release

00:20:41,510 --> 00:20:44,870
manager trying to figure out how to

00:20:43,040 --> 00:20:47,809
solve a rolling release candidate

00:20:44,870 --> 00:20:49,880
problem ie AJ at the time you wrote that

00:20:47,809 --> 00:20:52,059
code and so it's kind of interesting

00:20:49,880 --> 00:20:54,140
that in Debian this thing between

00:20:52,059 --> 00:20:55,940
unstable and stable has always been

00:20:54,140 --> 00:20:58,309
thought of as the rolling release

00:20:55,940 --> 00:21:00,320
candidate for the next stable release

00:20:58,309 --> 00:21:03,830
and we call it testing and all of that

00:21:00,320 --> 00:21:05,360
but in fact you know I've been hoping

00:21:03,830 --> 00:21:06,860
that someday we would get to the point

00:21:05,360 --> 00:21:09,110
where that sort of went back to the

00:21:06,860 --> 00:21:11,030
original objective and vision of being

00:21:09,110 --> 00:21:12,679
something that most of our users would

00:21:11,030 --> 00:21:14,540
want to run most of the time on their

00:21:12,679 --> 00:21:16,220
client devices so I'm actually very

00:21:14,540 --> 00:21:19,730
enthusiastic about this I think it's a

00:21:16,220 --> 00:21:22,429
great idea and if I thought there were a

00:21:19,730 --> 00:21:24,980
need to have some additional sort of

00:21:22,429 --> 00:21:26,630
human interface and testing I would want

00:21:24,980 --> 00:21:28,790
to put it downstream of testing and

00:21:26,630 --> 00:21:30,820
before stable as opposed to upstream of

00:21:28,790 --> 00:21:33,559
unstable if that makes sense

00:21:30,820 --> 00:21:35,750
it's interesting this is I think the

00:21:33,559 --> 00:21:39,740
first time I ever met Manoj in person

00:21:35,750 --> 00:21:41,420
was a UNIX tech conference in New

00:21:39,740 --> 00:21:45,850
Orleans years ago where he and I had a

00:21:41,420 --> 00:21:49,070
lengthy discussion over a lunch about

00:21:45,850 --> 00:21:51,049
whether it should ever be the case that

00:21:49,070 --> 00:21:53,809
things automatically promoted

00:21:51,049 --> 00:21:56,239
of unstable at all and because I had

00:21:53,809 --> 00:21:58,879
this notion that we wanted to have some

00:21:56,239 --> 00:22:00,649
release that was more structurally you

00:21:58,879 --> 00:22:03,110
know guaranteed to be correct than

00:22:00,649 --> 00:22:05,210
unstable I was a big fan of automatic

00:22:03,110 --> 00:22:06,799
promotion and to such a release and I

00:22:05,210 --> 00:22:09,049
think he was thinking of it much more

00:22:06,799 --> 00:22:10,909
from the you know what will release the

00:22:09,049 --> 00:22:12,860
stable next time and he had this notion

00:22:10,909 --> 00:22:15,200
that you know a package maintainer ought

00:22:12,860 --> 00:22:16,700
to have to consciously make the decision

00:22:15,200 --> 00:22:18,799
that these are the bits I want to see in

00:22:16,700 --> 00:22:20,840
the next release and so I know that

00:22:18,799 --> 00:22:22,279
we're always gonna have that tension he

00:22:20,840 --> 00:22:25,039
and I in fact got to the end of that

00:22:22,279 --> 00:22:27,529
meal agreeing to disagree over how that

00:22:25,039 --> 00:22:29,570
should work and I'm quite sure yeah yeah

00:22:27,529 --> 00:22:31,100
and and so this is this is one of those

00:22:29,570 --> 00:22:32,450
places where I think you know we'll

00:22:31,100 --> 00:22:34,249
continue to have this debate and

00:22:32,450 --> 00:22:37,429
discussion but I would really love to

00:22:34,249 --> 00:22:39,649
see more of this happen and you know in

00:22:37,429 --> 00:22:41,779
terms of shortening up the times that's

00:22:39,649 --> 00:22:44,659
always been a hack to sort of balance

00:22:41,779 --> 00:22:48,889
the stability versus you know ability to

00:22:44,659 --> 00:22:50,480
catch our see bugs things so I'm

00:22:48,889 --> 00:22:52,429
actually kind of surprised that people

00:22:50,480 --> 00:22:58,039
haven't played with the time since AJ

00:22:52,429 --> 00:23:00,499
really very much that's so did you my

00:22:58,039 --> 00:23:02,239
feeling of that the delay that happens

00:23:00,499 --> 00:23:05,809
between unstable and testing now is that

00:23:02,239 --> 00:23:07,639
we have painful and long transitions you

00:23:05,809 --> 00:23:09,320
said that these painful and long

00:23:07,639 --> 00:23:11,359
transitions don't happen or happen less

00:23:09,320 --> 00:23:13,399
in Ubuntu because we don't have users

00:23:11,359 --> 00:23:15,169
using the things before the transitions

00:23:13,399 --> 00:23:20,509
so that you don't have RC bugs is that

00:23:15,169 --> 00:23:22,549
right not not quite we we have taken the

00:23:20,509 --> 00:23:25,070
which we have taken the human factor out

00:23:22,549 --> 00:23:28,039
of the migration process which is not to

00:23:25,070 --> 00:23:32,779
say that we ignore bugs or at least I

00:23:28,039 --> 00:23:35,269
hope we don't ignore bugs but the the

00:23:32,779 --> 00:23:38,960
the main difference is simply that it's

00:23:35,269 --> 00:23:40,759
possible to you know you've got if

00:23:38,960 --> 00:23:42,169
you've got a stack of things backed up

00:23:40,759 --> 00:23:44,239
which I understand is often the case for

00:23:42,169 --> 00:23:46,039
the release team nowadays there's like a

00:23:44,239 --> 00:23:48,830
queue of half a dozen or more

00:23:46,039 --> 00:23:50,799
transitions waiting to happen it makes a

00:23:48,830 --> 00:23:53,840
big difference when you can do this

00:23:50,799 --> 00:23:58,249
within maybe a couple of workdays end to

00:23:53,840 --> 00:23:59,840
end versus having to wait for weeks just

00:23:58,249 --> 00:24:01,609
in order for everything to get old

00:23:59,840 --> 00:24:04,790
enough and then the clock resets anytime

00:24:01,609 --> 00:24:06,680
any anybody uploads anything this I mean

00:24:04,790 --> 00:24:09,470
this is a fairly regular complaint among

00:24:06,680 --> 00:24:11,950
among men tenors and certainly the

00:24:09,470 --> 00:24:15,230
release team do sometimes intervene and

00:24:11,950 --> 00:24:19,280
cook things by hand but it's it's really

00:24:15,230 --> 00:24:23,020
a lot easier when you're your aim is to

00:24:19,280 --> 00:24:25,280
ensure that everything is automated

00:24:23,020 --> 00:24:25,850
automated tests for a structural

00:24:25,280 --> 00:24:28,070
correctness

00:24:25,850 --> 00:24:30,460
as if bedell doesn't mind me

00:24:28,070 --> 00:24:34,100
appropriating the term rather than

00:24:30,460 --> 00:24:36,980
relying on has any human happened to

00:24:34,100 --> 00:24:38,420
notice that something is wrong yes so if

00:24:36,980 --> 00:24:40,220
I understand correctly if we take the

00:24:38,420 --> 00:24:43,340
delay down to zero for all the packages

00:24:40,220 --> 00:24:45,380
in involved in a transition they will

00:24:43,340 --> 00:24:47,270
transition as long as we solved all

00:24:45,380 --> 00:24:49,220
failed to be from failed to build from

00:24:47,270 --> 00:24:51,440
source and then the transition happens

00:24:49,220 --> 00:24:53,480
faster right right I'm not expecting

00:24:51,440 --> 00:24:56,210
anybody to do that immediately but that

00:24:53,480 --> 00:24:57,830
I think I've been I skill you know I'd

00:24:56,210 --> 00:24:59,240
be interested in hearing I there are a

00:24:57,830 --> 00:25:01,580
couple of members of the release team

00:24:59,240 --> 00:25:02,540
here in the audience I see at least two

00:25:01,580 --> 00:25:04,310
of them and I don't know if they'd like

00:25:02,540 --> 00:25:06,140
to comment so Colin and I are

00:25:04,310 --> 00:25:08,840
experienced with britney's from the bad

00:25:06,140 --> 00:25:12,610
old days when before Brittany knew how

00:25:08,840 --> 00:25:14,840
to handle NBS libraries and deal with

00:25:12,610 --> 00:25:16,160
untangling library transitions so it

00:25:14,840 --> 00:25:18,110
used to be that you would have to get a

00:25:16,160 --> 00:25:20,810
library transition run through and you'd

00:25:18,110 --> 00:25:22,760
be have to be at the helm driving it

00:25:20,810 --> 00:25:24,860
through because if you didn't get it

00:25:22,760 --> 00:25:26,690
done and somebody else who wasn't paying

00:25:24,860 --> 00:25:28,250
attention uploaded another library then

00:25:26,690 --> 00:25:29,780
suddenly you have these both libraries

00:25:28,250 --> 00:25:31,370
both going through so named transitions

00:25:29,780 --> 00:25:33,170
you have to get them through an into

00:25:31,370 --> 00:25:34,460
testing at the same time and then you've

00:25:33,170 --> 00:25:37,160
got you've expanded the set of things

00:25:34,460 --> 00:25:38,960
that have to be in sync at the same time

00:25:37,160 --> 00:25:40,370
to transition and then that makes it

00:25:38,960 --> 00:25:41,810
longer which increases the chance that

00:25:40,370 --> 00:25:44,720
the library gets added to it and I

00:25:41,810 --> 00:25:47,090
believe Brittany now in fact lets us

00:25:44,720 --> 00:25:49,760
carry lets us keep old and new binaries

00:25:47,090 --> 00:25:52,160
and testing at the same time to untangle

00:25:49,760 --> 00:25:53,990
some of that and so I wonder if what the

00:25:52,160 --> 00:25:55,340
release teams you know initial reaction

00:25:53,990 --> 00:25:57,260
is to this proposal and how much they

00:25:55,340 --> 00:25:58,550
think it will help Debian with their

00:25:57,260 --> 00:26:00,350
problems with transition do they say

00:25:58,550 --> 00:26:01,880
this is a good thing is it a labor

00:26:00,350 --> 00:26:03,110
saving thing for the release team and

00:26:01,880 --> 00:26:05,290
what do they think the the outcomes

00:26:03,110 --> 00:26:05,290
would be

00:26:06,530 --> 00:26:09,810
he's hiding behind a desk I guess

00:26:08,730 --> 00:26:22,490
Juliana you're the only one who can

00:26:09,810 --> 00:26:28,110
answer that question yeah so this

00:26:22,490 --> 00:26:33,480
feature of Brittany helps a lot to be

00:26:28,110 --> 00:26:40,500
able to more things I not in just one

00:26:33,480 --> 00:26:45,150
big blob of packages so one thing that

00:26:40,500 --> 00:26:48,630
delays transitions today is when we

00:26:45,150 --> 00:26:52,590
don't air out this transition before the

00:26:48,630 --> 00:26:56,670
old library is d crafted in unstable

00:26:52,590 --> 00:26:59,970
usually which means or reverse

00:26:56,670 --> 00:27:02,310
dependencies have been revealed on all

00:26:59,970 --> 00:27:06,270
architectures against the new version of

00:27:02,310 --> 00:27:07,140
the library sometimes we fought it

00:27:06,270 --> 00:27:09,990
through anyway

00:27:07,140 --> 00:27:13,410
or we asked a DP master to ignore the

00:27:09,990 --> 00:27:16,320
reverse dependent season and remove the

00:27:13,410 --> 00:27:19,820
old library from rinsable maybe you

00:27:16,320 --> 00:27:22,050
should do that more often I don't know

00:27:19,820 --> 00:27:23,850
but but do you see this is still being

00:27:22,050 --> 00:27:25,440
something that would improve improve

00:27:23,850 --> 00:27:29,180
your experience as part of the release

00:27:25,440 --> 00:27:34,200
team making more automated tests and

00:27:29,180 --> 00:27:37,650
cutting the delay yes um I think it's

00:27:34,200 --> 00:27:39,540
worth trying yeah I don't want to put

00:27:37,650 --> 00:27:40,740
down reading the spots so I mean I think

00:27:39,540 --> 00:27:42,890
would be more appropriate to check this

00:27:40,740 --> 00:27:46,020
to a mailing list if people like it but

00:27:42,890 --> 00:27:48,810
but yeah it's something sounds very

00:27:46,020 --> 00:27:53,270
interesting and possibly Ian had a

00:27:48,810 --> 00:27:57,320
question just before or our comments I

00:27:53,270 --> 00:27:59,880
just wanted to make a comment about your

00:27:57,320 --> 00:28:02,040
automatic testing of the aisle tips I

00:27:59,880 --> 00:28:04,260
think that's that's a very interesting

00:28:02,040 --> 00:28:06,480
it's almost like a social hack because

00:28:04,260 --> 00:28:09,060
what happens there is if you're annoyed

00:28:06,480 --> 00:28:11,070
by the way that some other thing keeps

00:28:09,060 --> 00:28:12,450
breaking your package you can write the

00:28:11,070 --> 00:28:16,830
tests that will rent that other thing

00:28:12,450 --> 00:28:18,870
from migrating exact and this is this is

00:28:16,830 --> 00:28:19,590
a really nice way of encouraging people

00:28:18,870 --> 00:28:28,200
to write the

00:28:19,590 --> 00:28:30,360
ought to be cared about I haven't seen

00:28:28,200 --> 00:28:36,679
anybody use it explicitly that way yet

00:28:30,360 --> 00:28:40,590
but we we kind of did a bit there was

00:28:36,679 --> 00:28:42,750
there were concerns about I think GG k

00:28:40,590 --> 00:28:45,720
and pi g TK breaking in certain ways on

00:28:42,750 --> 00:28:47,039
major upstream up to updates so there's

00:28:45,720 --> 00:28:55,740
some defense against us

00:28:47,039 --> 00:28:57,750
hi adversarial this is so at first when

00:28:55,740 --> 00:29:00,679
these auto package testing was

00:28:57,750 --> 00:29:04,980
introduced I didn't like it very much

00:29:00,679 --> 00:29:07,789
because you have to put some effort in

00:29:04,980 --> 00:29:13,320
fighting these Auto packaged tests and

00:29:07,789 --> 00:29:15,270
it's not very uncommon that we have

00:29:13,320 --> 00:29:17,880
different test environments for our

00:29:15,270 --> 00:29:20,730
builders and for tests environment and

00:29:17,880 --> 00:29:25,799
then you are adding a lot of time in

00:29:20,730 --> 00:29:27,630
determining what tests do fail on the

00:29:25,799 --> 00:29:29,700
test environment which ones fail in the

00:29:27,630 --> 00:29:33,120
built environment I mean we have

00:29:29,700 --> 00:29:38,120
something similar in our abilities which

00:29:33,120 --> 00:29:41,279
do not have a common set up at all so um

00:29:38,120 --> 00:29:45,149
so you have to put some extra work into

00:29:41,279 --> 00:29:47,820
that and the second thing is you need

00:29:45,149 --> 00:29:52,080
somebody running these Auto packaged

00:29:47,820 --> 00:29:54,360
testers and monitoring them and if well

00:29:52,080 --> 00:29:57,210
at least if he's drive for four

00:29:54,360 --> 00:30:00,600
bagration's within some hours it is

00:29:57,210 --> 00:30:02,399
noticed that that well if the auto

00:30:00,600 --> 00:30:06,899
package is a test that doesn't work for

00:30:02,399 --> 00:30:08,880
eight hours it's a problem so I I don't

00:30:06,899 --> 00:30:11,760
know what the capacity on things like

00:30:08,880 --> 00:30:13,230
we're using Jenkins to run these tests

00:30:11,760 --> 00:30:15,510
as their as the driver don't know what

00:30:13,230 --> 00:30:17,789
the capacity on Jenkins Debian matters

00:30:15,510 --> 00:30:24,080
like how many architectures it has

00:30:17,789 --> 00:30:24,080
available etc so I axle

00:30:30,470 --> 00:30:38,700
try again okay now it works things I'm

00:30:37,140 --> 00:30:41,220
glad that we're back to the tests

00:30:38,700 --> 00:30:43,380
because my question would be can you

00:30:41,220 --> 00:30:45,690
allow a level wait a little bit

00:30:43,380 --> 00:30:49,220
how would that Auto package test thing

00:30:45,690 --> 00:30:53,730
works how what what's the maintainer

00:30:49,220 --> 00:30:56,550
part in that so as far as I understood

00:30:53,730 --> 00:30:59,460
it every package needs to have such

00:30:56,550 --> 00:31:02,100
tests otherwise your scenario wouldn't

00:30:59,460 --> 00:31:04,620
work well only if we use auto package

00:31:02,100 --> 00:31:06,150
tests is the only mechanic that's what

00:31:04,620 --> 00:31:08,400
we're doing in a bunch of right now but

00:31:06,150 --> 00:31:10,980
I think we could easily add things like

00:31:08,400 --> 00:31:14,400
pew parts into that to charge an extra

00:31:10,980 --> 00:31:16,290
guard but the as for your question about

00:31:14,400 --> 00:31:19,440
the mechanic at the moment

00:31:16,290 --> 00:31:22,740
one adds a file called Debian slash test

00:31:19,440 --> 00:31:24,180
slash control you can go Lucas Ian's

00:31:22,740 --> 00:31:28,710
documentation is probably the best thing

00:31:24,180 --> 00:31:32,040
but the the idea is that runs on over

00:31:28,710 --> 00:31:33,930
installed packages and you can you know

00:31:32,040 --> 00:31:35,940
you can run your packages unit tests if

00:31:33,930 --> 00:31:37,530
you like or you can more commonly I

00:31:35,940 --> 00:31:41,250
think you would add some kind of

00:31:37,530 --> 00:31:42,510
integration tests that that exercises

00:31:41,250 --> 00:31:48,180
the behavior of the whole thing rather

00:31:42,510 --> 00:31:50,670
than apps the level of C functions the I

00:31:48,180 --> 00:31:54,270
I do think we need more coverage than

00:31:50,670 --> 00:31:56,280
just manually additives integration

00:31:54,270 --> 00:31:59,750
tests in order to do good job this is

00:31:56,280 --> 00:32:04,680
the number about the current coverage I

00:31:59,750 --> 00:32:06,810
believe we have on the order of a

00:32:04,680 --> 00:32:08,730
hundred two hundred packages we're

00:32:06,810 --> 00:32:11,100
thought of package tested murmurs right

00:32:08,730 --> 00:32:16,560
and that includes such key packages as

00:32:11,100 --> 00:32:17,730
eg Lib C Python 2 and Python 3 in

00:32:16,560 --> 00:32:19,440
Auckland who are currently working on

00:32:17,730 --> 00:32:20,760
I'm getting some good integration tests

00:32:19,440 --> 00:32:22,560
in upstart which is little bit tricky

00:32:20,760 --> 00:32:25,050
because it the the testing environment

00:32:22,560 --> 00:32:26,610
implies that we require nested KVM to

00:32:25,050 --> 00:32:28,200
accomplish that and so we're running

00:32:26,610 --> 00:32:29,790
into some implementation difficulties

00:32:28,200 --> 00:32:31,110
there but a lot of the core stuff is

00:32:29,790 --> 00:32:32,640
tested which when you think about it is

00:32:31,110 --> 00:32:34,520
also the stuff that when you're talking

00:32:32,640 --> 00:32:38,420
about a 7-day delay

00:32:34,520 --> 00:32:40,340
for for Brittany by default you know if

00:32:38,420 --> 00:32:41,510
you look at the edges how many users can

00:32:40,340 --> 00:32:42,950
you actually count on installing that

00:32:41,510 --> 00:32:46,220
package and testing it before migrates

00:32:42,950 --> 00:32:49,010
anyway and it's the 7-day window is a

00:32:46,220 --> 00:32:50,690
heuristic to catch most of the stuff

00:32:49,010 --> 00:32:52,100
that's common and it's frequent and the

00:32:50,690 --> 00:32:54,050
breakage is gonna be most severe before

00:32:52,100 --> 00:32:56,030
it catches brown paper bag bugs it

00:32:54,050 --> 00:32:58,520
doesn't catch subtle release critical

00:32:56,030 --> 00:33:00,470
things at all I'm sorry which doesn't

00:32:58,520 --> 00:33:03,050
catch that I think that the the time

00:33:00,470 --> 00:33:05,660
delay catches brown paper bag but pretty

00:33:03,050 --> 00:33:07,520
well but anything that will only show up

00:33:05,660 --> 00:33:09,890
once a broader audience starts using it

00:33:07,520 --> 00:33:12,470
it doesn't tend to catch it all a lot of

00:33:09,890 --> 00:33:14,690
sorry a lot of the things that it does

00:33:12,470 --> 00:33:16,100
catch are things that things like pew

00:33:14,690 --> 00:33:19,010
parts in particular would catch anyway

00:33:16,100 --> 00:33:21,380
right so I got approached a while back

00:33:19,010 --> 00:33:22,880
about adding Auto test support to one of

00:33:21,380 --> 00:33:24,920
my packages and I pushed back fairly

00:33:22,880 --> 00:33:28,010
hard because that particular package has

00:33:24,920 --> 00:33:30,920
a really deep internal regression test

00:33:28,010 --> 00:33:32,210
suite and that left me struggling a

00:33:30,920 --> 00:33:34,010
little bit with the notion of do I

00:33:32,210 --> 00:33:36,980
really want sort of more than one

00:33:34,010 --> 00:33:39,470
regression suite for this package and I

00:33:36,980 --> 00:33:40,760
understand conceptually that there's

00:33:39,470 --> 00:33:43,520
some things you would want to test about

00:33:40,760 --> 00:33:45,230
the packaging that are different than

00:33:43,520 --> 00:33:47,570
things you might want to test about the

00:33:45,230 --> 00:33:49,160
packaged software I was wondering if

00:33:47,570 --> 00:33:51,200
either of you could speak briefly to

00:33:49,160 --> 00:33:53,420
sort of what the situations been like

00:33:51,200 --> 00:33:56,090
are you trying to you know sort of

00:33:53,420 --> 00:33:57,950
externally run any of the tests that are

00:33:56,090 --> 00:33:59,840
part of package regression suites as

00:33:57,950 --> 00:34:01,220
part of this process

00:33:59,840 --> 00:34:03,680
you know I certainly have been in the

00:34:01,220 --> 00:34:05,600
mode where anytime upstream has a

00:34:03,680 --> 00:34:07,100
regression suite I turn that on in the

00:34:05,600 --> 00:34:09,740
package build but I don't know that

00:34:07,100 --> 00:34:12,320
there's a very strong ethic ethic around

00:34:09,740 --> 00:34:13,760
that in Debian package building

00:34:12,320 --> 00:34:16,280
generally what are your thoughts on this

00:34:13,760 --> 00:34:19,250
how should we think about those two

00:34:16,280 --> 00:34:20,870
kinds of testing etc so with our

00:34:19,250 --> 00:34:22,730
implementation and it went to one of the

00:34:20,870 --> 00:34:25,250
things that that is a definite advantage

00:34:22,730 --> 00:34:26,990
to running that very same test suite

00:34:25,250 --> 00:34:28,730
that you might run at Build time to run

00:34:26,990 --> 00:34:30,110
it again as an auto package test is the

00:34:28,730 --> 00:34:33,080
fact that we do run the auto package

00:34:30,110 --> 00:34:36,110
tests when a package you depend on has

00:34:33,080 --> 00:34:37,970
has revved which means that they do get

00:34:36,110 --> 00:34:39,860
used to pickup regressions in your

00:34:37,970 --> 00:34:42,110
underlying libraries or perhaps not

00:34:39,860 --> 00:34:43,610
regressions but they identify unexpected

00:34:42,110 --> 00:34:45,350
assumptions and your in your package and

00:34:43,610 --> 00:34:47,510
things like that so that's a is is there

00:34:45,350 --> 00:34:49,159
any particular harness required on

00:34:47,510 --> 00:34:50,570
part of the package maintainer to

00:34:49,159 --> 00:34:53,389
include in the package for that to

00:34:50,570 --> 00:34:54,800
happen or are you just noticing internal

00:34:53,389 --> 00:34:56,360
regression Suites and use them how does

00:34:54,800 --> 00:34:59,780
that actually it doesn't have to be

00:34:56,360 --> 00:35:02,390
declared you would use the DEF 8 stuff

00:34:59,780 --> 00:35:04,040
that basically means documentation to

00:35:02,390 --> 00:35:05,330
say how you wire it up as Colin

00:35:04,040 --> 00:35:07,220
mentioned you create debian tests

00:35:05,330 --> 00:35:10,010
control and one of the things you can

00:35:07,220 --> 00:35:12,140
say in that file is you can say to run

00:35:10,010 --> 00:35:13,730
my auto package tests I require a copy

00:35:12,140 --> 00:35:15,560
of the original source package unpacked

00:35:13,730 --> 00:35:17,000
for me and then you you can do all that

00:35:15,560 --> 00:35:19,610
and unpack it and everything else and so

00:35:17,000 --> 00:35:20,960
it's fairly flexible I mean like I said

00:35:19,610 --> 00:35:22,520
we're currently right now working

00:35:20,960 --> 00:35:31,820
through how we can use upstart to drive

00:35:22,520 --> 00:35:34,760
VMs from the harness so because I'll

00:35:31,820 --> 00:35:36,680
just say something quickly so I know

00:35:34,760 --> 00:35:38,330
from my work or with known packaging

00:35:36,680 --> 00:35:39,350
that gnome upstream is starting to push

00:35:38,330 --> 00:35:41,420
summers

00:35:39,350 --> 00:35:44,480
so as installed tests as part of their

00:35:41,420 --> 00:35:45,560
release criteria so what we've started

00:35:44,480 --> 00:35:46,880
harnessing when they've been making

00:35:45,560 --> 00:35:48,440
these available within the gnome team in

00:35:46,880 --> 00:35:50,570
Debian but mainly in a bunch to where we

00:35:48,440 --> 00:35:52,490
actually run this stuff is running these

00:35:50,570 --> 00:35:54,110
installed tests as the DEP eight tests

00:35:52,490 --> 00:35:55,450
so what they do is essentially what we

00:35:54,110 --> 00:35:57,620
were just talking about here which is

00:35:55,450 --> 00:35:59,600
I've just enabled it for Julia which

00:35:57,620 --> 00:36:01,310
basically runs the entire relatively

00:35:59,600 --> 00:36:02,930
comprehensive test so he has an auto

00:36:01,310 --> 00:36:04,970
package tests using the provided Runner

00:36:02,930 --> 00:36:06,260
and the methods for installing that are

00:36:04,970 --> 00:36:08,960
now being assigned to be provided by

00:36:06,260 --> 00:36:11,660
upstream so we're upstream is providing

00:36:08,960 --> 00:36:14,480
this stuff it's it can become pretty

00:36:11,660 --> 00:36:16,250
easy to actually implement this in in

00:36:14,480 --> 00:36:17,570
the DEP a test switch at the end of the

00:36:16,250 --> 00:36:19,550
day are just shell scripts so we just

00:36:17,570 --> 00:36:21,020
have to say install the test Runner run

00:36:19,550 --> 00:36:22,550
the test Runner on my package and then

00:36:21,020 --> 00:36:24,950
you get all of this for free if

00:36:22,550 --> 00:36:26,090
upstreams helping you out here and I

00:36:24,950 --> 00:36:27,770
wanted to make another comment which is

00:36:26,090 --> 00:36:30,380
for the dev Emily sim you might want to

00:36:27,770 --> 00:36:33,020
be interested that's in the Ubuntu

00:36:30,380 --> 00:36:34,880
releasing we have two currently well

00:36:33,020 --> 00:36:36,680
we're kind of Center boosters process we

00:36:34,880 --> 00:36:39,050
have to spend a reasonable amount of

00:36:36,680 --> 00:36:41,630
time dealing with broken tests so you

00:36:39,050 --> 00:36:43,820
might want to be aware that maintained

00:36:41,630 --> 00:36:45,860
errs may not always be keeping on top of

00:36:43,820 --> 00:36:47,360
their auto package tests and if you're

00:36:45,860 --> 00:36:49,070
having these run by our deps and then

00:36:47,360 --> 00:36:50,450
preventing propagation and there are

00:36:49,070 --> 00:36:52,340
things you actually do want to be

00:36:50,450 --> 00:36:54,230
migrating you're gonna need to be

00:36:52,340 --> 00:36:56,240
watching and we've actually colleen

00:36:54,230 --> 00:36:59,120
actually added some force hint types to

00:36:56,240 --> 00:37:01,100
brittany to make brittany ignore the or

00:36:59,120 --> 00:37:02,540
package tests both for individual

00:37:01,100 --> 00:37:04,760
packages and for when they're triggered

00:37:02,540 --> 00:37:07,550
by our lips so it's it's a bit of work

00:37:04,760 --> 00:37:10,520
that you're gonna you may have to be

00:37:07,550 --> 00:37:13,130
taking on depends on how you go about it

00:37:10,520 --> 00:37:14,960
I took the approach that I took a

00:37:13,130 --> 00:37:16,820
slightly absolutist approach and said

00:37:14,960 --> 00:37:20,060
that all tests had to pass in the story

00:37:16,820 --> 00:37:21,380
and I figured that we had few enough

00:37:20,060 --> 00:37:23,420
tests in the archive that this wouldn't

00:37:21,380 --> 00:37:25,940
be a big problem in practice we're a

00:37:23,420 --> 00:37:27,500
couple of months in and there are still

00:37:25,940 --> 00:37:30,050
a bunch of failing tests maybe I should

00:37:27,500 --> 00:37:35,150
have used a ratchet instead so that you

00:37:30,050 --> 00:37:36,770
have to improve the yes but if you get

00:37:35,150 --> 00:37:38,300
tests regressing and then the maintain

00:37:36,770 --> 00:37:40,670
it happens to have gone in my a for a

00:37:38,300 --> 00:37:42,200
bit while the tests regress then your I

00:37:40,670 --> 00:37:43,520
mean any sensible implementations

00:37:42,200 --> 00:37:45,590
probably going to be preventing

00:37:43,520 --> 00:37:47,330
migrations in this situation in which

00:37:45,590 --> 00:37:48,770
case if the release team is looking to

00:37:47,330 --> 00:37:50,090
be pushing transitions into testing

00:37:48,770 --> 00:37:52,460
they're going to have if the test is

00:37:50,090 --> 00:37:54,140
feeling somebody has to own resolving

00:37:52,460 --> 00:37:55,760
that what the resolving means is the

00:37:54,140 --> 00:37:58,490
package is broken it should be room so

00:37:55,760 --> 00:38:00,650
as we will I promote or run may open and

00:37:58,490 --> 00:38:02,990
I'm using these RC books so that people

00:38:00,650 --> 00:38:04,490
can and a mutual but so like you're

00:38:02,990 --> 00:38:07,190
expressing concern about there's a

00:38:04,490 --> 00:38:09,200
regression so the the test suite is in a

00:38:07,190 --> 00:38:11,750
package that is not the one that got

00:38:09,200 --> 00:38:15,020
uploaded right because that maintainer

00:38:11,750 --> 00:38:16,280
zem ia they didn't upload it so you've

00:38:15,020 --> 00:38:18,680
got your underlying library package

00:38:16,280 --> 00:38:20,870
which ran the regression tests which ran

00:38:18,680 --> 00:38:22,400
the tests for the reverse dependency and

00:38:20,870 --> 00:38:25,100
that reverse dependency didn't work so

00:38:22,400 --> 00:38:26,600
somebody to own that issue and whether

00:38:25,100 --> 00:38:27,830
it's the maintainer of this package or

00:38:26,600 --> 00:38:29,060
whether it's the release team or whether

00:38:27,830 --> 00:38:30,860
it's the maintainer who uploaded this

00:38:29,060 --> 00:38:32,270
library you at that point you have to

00:38:30,860 --> 00:38:34,100
have a human involved tips to figure out

00:38:32,270 --> 00:38:35,570
what exactly was going on but I don't I

00:38:34,100 --> 00:38:37,820
don't perceive that I don't foresee that

00:38:35,570 --> 00:38:40,370
being a huge burden at least not anytime

00:38:37,820 --> 00:38:42,410
in the near future no I wasn't trying to

00:38:40,370 --> 00:38:43,970
make any assertions about the size of

00:38:42,410 --> 00:38:45,230
the burden I'm just saying that it's it

00:38:43,970 --> 00:38:47,030
might be a new thing the release team

00:38:45,230 --> 00:38:49,610
has to become interested in your test

00:38:47,030 --> 00:38:52,670
failures and deciding how they're gonna

00:38:49,610 --> 00:38:56,290
have to be dealt with okay I'd like to

00:38:52,670 --> 00:38:59,660
just respond to that before I make my

00:38:56,290 --> 00:39:02,150
responses to be Dale which is yes this

00:38:59,660 --> 00:39:05,050
is a potential problem but it seems to

00:39:02,150 --> 00:39:08,990
me the same kind of problem as if any

00:39:05,050 --> 00:39:10,520
are depends of your you know if your

00:39:08,990 --> 00:39:12,240
library maintained any are depends of

00:39:10,520 --> 00:39:14,730
yours has an RC bug that prevents

00:39:12,240 --> 00:39:17,340
your package propagating and ultimately

00:39:14,730 --> 00:39:20,310
you might very well end up doing NMU of

00:39:17,340 --> 00:39:22,170
the our debt and that's just you know

00:39:20,310 --> 00:39:24,510
that's just what you should do and if

00:39:22,170 --> 00:39:28,130
indeed the test is broken then you can

00:39:24,510 --> 00:39:31,350
always NMU the our debt to fix the test

00:39:28,130 --> 00:39:34,590
so in response to be Dale's question

00:39:31,350 --> 00:39:36,620
about how you have to wire up something

00:39:34,590 --> 00:39:39,240
for debt paid it is true that we don't

00:39:36,620 --> 00:39:41,300
automatically spot upstream test Suites

00:39:39,240 --> 00:39:44,220
or somehow run them in the as installed

00:39:41,300 --> 00:39:45,720
environment and that's that the reason

00:39:44,220 --> 00:39:48,600
for that is that there's no standard way

00:39:45,720 --> 00:39:50,790
of taking make check and causing it to

00:39:48,600 --> 00:39:53,280
run on the as installed version of

00:39:50,790 --> 00:39:56,940
anything and I don't think it would be

00:39:53,280 --> 00:39:58,500
practical to invent such a thing but for

00:39:56,940 --> 00:40:00,450
most packages when you actually want to

00:39:58,500 --> 00:40:02,610
do that you have to write a very very

00:40:00,450 --> 00:40:04,650
small amount of code tiny little shell

00:40:02,610 --> 00:40:06,270
scripts saying well actually the test

00:40:04,650 --> 00:40:08,370
thing is over here and we'll you know

00:40:06,270 --> 00:40:10,320
set some environment variable mess with

00:40:08,370 --> 00:40:12,690
the path normally you just have to undo

00:40:10,320 --> 00:40:14,280
the thing that the upstream make check

00:40:12,690 --> 00:40:16,730
has done to cause it to run out of the

00:40:14,280 --> 00:40:16,730
built real

00:40:20,030 --> 00:40:24,660
the the first package I did like this

00:40:22,380 --> 00:40:27,330
was Gork and that's probably quite easy

00:40:24,660 --> 00:40:29,480
to to see how it how I did it in Cork

00:40:27,330 --> 00:40:33,170
and do a similar thing and I think this

00:40:29,480 --> 00:40:36,680
is probably about like ten lines of diff

00:40:33,170 --> 00:40:36,680
to make that work

00:40:39,200 --> 00:40:45,780
- I've been waiting for a while and now

00:40:41,490 --> 00:40:48,300
I got - okay um so beetles sort of asks

00:40:45,780 --> 00:40:50,160
about I think also how many regressions

00:40:48,300 --> 00:40:52,410
sweet test Suites were actually running

00:40:50,160 --> 00:40:54,510
and one thing that we may not have

00:40:52,410 --> 00:40:57,780
thought about is that now that we're

00:40:54,510 --> 00:40:59,400
mostly using C DB s and D H they go off

00:40:57,780 --> 00:41:02,700
and find them and run them and they can

00:40:59,400 --> 00:41:05,490
do this for you know standard things and

00:41:02,700 --> 00:41:08,870
it made it gone up I really don't know I

00:41:05,490 --> 00:41:11,070
was kind of thinking about how DEP eight

00:41:08,870 --> 00:41:12,900
you were talking about regression

00:41:11,070 --> 00:41:15,780
testing or not I'm doing the test

00:41:12,900 --> 00:41:18,120
against up against the things of the

00:41:15,780 --> 00:41:19,800
library they use the library so could

00:41:18,120 --> 00:41:22,110
you just rebuild them or could you just

00:41:19,800 --> 00:41:23,520
say run their tests rebuild them and

00:41:22,110 --> 00:41:26,100
then run their tests and get the same

00:41:23,520 --> 00:41:30,330
result do you think we actually don't

00:41:26,100 --> 00:41:33,420
rebuild them because the notch if you if

00:41:30,330 --> 00:41:36,000
it isn't an som transition then the

00:41:33,420 --> 00:41:38,040
natural effect from the archive will be

00:41:36,000 --> 00:41:41,790
that the library that the are DEP is not

00:41:38,040 --> 00:41:43,530
rebuilt so we rerun the test the our

00:41:41,790 --> 00:41:45,090
deficit tests to make sure that it still

00:41:43,530 --> 00:41:46,380
works sure so you're making sure that

00:41:45,090 --> 00:41:48,900
has a broken compatibility you're not

00:41:46,380 --> 00:41:50,760
making sure that nice in particular we

00:41:48,900 --> 00:41:53,190
explicitly want to find out if it breaks

00:41:50,760 --> 00:41:54,510
without rebuilding it because that would

00:41:53,190 --> 00:41:57,480
be a problem right because you may have

00:41:54,510 --> 00:41:58,920
a an API change in a header that if you

00:41:57,480 --> 00:42:00,420
did rebuild it and around the tests they

00:41:58,920 --> 00:42:01,740
would pass but the actual binary in the

00:42:00,420 --> 00:42:04,050
archive is broken and so we check for

00:42:01,740 --> 00:42:05,610
that so another thing that that's

00:42:04,050 --> 00:42:08,220
happening now as far as Auto packaged

00:42:05,610 --> 00:42:10,980
tests that are originating out of Ubuntu

00:42:08,220 --> 00:42:12,090
land right now it concerns stuff that

00:42:10,980 --> 00:42:13,860
canonical is upstream for in particular

00:42:12,090 --> 00:42:15,690
we're running a lot of the graphical

00:42:13,860 --> 00:42:17,370
stuff we're using a harness called

00:42:15,690 --> 00:42:18,630
autopilot now and there's talk about I

00:42:17,370 --> 00:42:19,650
don't know I don't know that any of

00:42:18,630 --> 00:42:21,240
those are currently wired up to auto

00:42:19,650 --> 00:42:22,920
package tests but they often I think it

00:42:21,240 --> 00:42:25,650
there's some technical difficulty which

00:42:22,920 --> 00:42:27,180
I haven't wrap my head around that work

00:42:25,650 --> 00:42:28,290
yeah I mean so there are some technical

00:42:27,180 --> 00:42:30,990
challenges making that happen the

00:42:28,290 --> 00:42:33,780
autopilot is it's not a new concept but

00:42:30,990 --> 00:42:36,390
we we run graphical applications under

00:42:33,780 --> 00:42:38,730
test harnesses that hook into the the

00:42:36,390 --> 00:42:41,280
toolkits and and test for correctness at

00:42:38,730 --> 00:42:43,230
that level as well so that might also be

00:42:41,280 --> 00:42:44,820
another thing that particular maintainer

00:42:43,230 --> 00:42:47,930
is in Debian might be understood as a

00:42:44,820 --> 00:42:49,670
way to to

00:42:47,930 --> 00:42:50,870
to add Auto packaged tests to their

00:42:49,670 --> 00:42:53,240
packages that they don't currently have

00:42:50,870 --> 00:42:55,060
testing autopilot as I understand it to

00:42:53,240 --> 00:42:57,800
best buy knowledge it's it's open source

00:42:55,060 --> 00:43:01,760
we're using it in Ubuntu itself so it

00:42:57,800 --> 00:43:04,460
should be I have one one more thought

00:43:01,760 --> 00:43:06,950
which is you said I think you said you

00:43:04,460 --> 00:43:08,900
only have about a hundred of a package

00:43:06,950 --> 00:43:11,270
tests right now is that okay something

00:43:08,900 --> 00:43:13,910
there are important packages but we can

00:43:11,270 --> 00:43:15,520
talk about adding more tests and that'll

00:43:13,910 --> 00:43:17,750
that'll clearly make things better and

00:43:15,520 --> 00:43:20,090
having the framework there to do it's a

00:43:17,750 --> 00:43:21,920
good thing so maybe talking about more

00:43:20,090 --> 00:43:23,240
tests isn't the most productive use of

00:43:21,920 --> 00:43:28,000
this time I don't know

00:43:23,240 --> 00:43:31,610
right I mean I I've you I guess I view

00:43:28,000 --> 00:43:35,840
more tests as a consequence of making

00:43:31,610 --> 00:43:38,120
people making that to be the the way

00:43:35,840 --> 00:43:40,550
that you ensure that you improve quality

00:43:38,120 --> 00:43:42,680
of testing I think it's probably a

00:43:40,550 --> 00:43:45,410
futile exercise to wait for those to

00:43:42,680 --> 00:43:48,170
arrive before we change anything because

00:43:45,410 --> 00:43:51,560
we could wait forever I would much

00:43:48,170 --> 00:43:53,710
rather put some kind of forcing function

00:43:51,560 --> 00:43:53,710
in

00:44:04,490 --> 00:44:13,200
any more questions I think we're almost

00:44:07,410 --> 00:44:16,260
at time only one minute left no time for

00:44:13,200 --> 00:44:18,060
us to answer your question so yeah all

00:44:16,260 --> 00:44:20,010
right come and find us afterwards if you

00:44:18,060 --> 00:44:20,910
want to talk about this more thank you

00:44:20,010 --> 00:44:29,830
very much Thanks

00:44:20,910 --> 00:44:29,830

YouTube URL: https://www.youtube.com/watch?v=3x7bZzIlfHo


