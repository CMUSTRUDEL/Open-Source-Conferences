Title: Tutorial: Using Debian on Google Compute Engine
Publication date: 2017-11-29
Playlist: DebConf 13
Description: 
	by Mandy Waite

At: DebConf13
https://debconf13.debconf.org/
Room: Main talk room
Scheduled start: 2013-08-12 11:30:00
Captions: 
	00:00:00,030 --> 00:00:04,560
so to find a work with a demo from what

00:00:03,090 --> 00:00:07,620
Jimmy and Timmy showed us earlier from

00:00:04,560 --> 00:00:14,730
Google is Mandy from Google so please

00:00:07,620 --> 00:00:15,540
give her a round of applause hi everyone

00:00:14,730 --> 00:00:17,600
how you doing

00:00:15,540 --> 00:00:19,160
great to be here it's been wonderful

00:00:17,600 --> 00:00:21,740
weather's gorgeous

00:00:19,160 --> 00:00:23,880
bunch of smart people in the room so I

00:00:21,740 --> 00:00:26,250
wouldn't really follow up on what Jimmy

00:00:23,880 --> 00:00:28,289
and David presented earlier we're going

00:00:26,250 --> 00:00:30,240
to talk about Google compute engine and

00:00:28,289 --> 00:00:32,940
one of the reasons we're here obviously

00:00:30,240 --> 00:00:35,579
is because we now support Debian we have

00:00:32,940 --> 00:00:38,129
we've seen the squeeze so compute engine

00:00:35,579 --> 00:00:40,170
now we've we've seen squeeze my name is

00:00:38,129 --> 00:00:42,149
Mandy Waite I'm a developer advocate for

00:00:40,170 --> 00:00:44,129
the Google cloud platform and if you

00:00:42,149 --> 00:00:49,079
want to find out more about me about dot

00:00:44,129 --> 00:00:51,090
me slash Mandy wait so we're going to

00:00:49,079 --> 00:00:53,219
spend about 10-15 minutes talking about

00:00:51,090 --> 00:00:56,850
computing June a bit deeper dived and

00:00:53,219 --> 00:00:57,809
should be in David gave you but we're

00:00:56,850 --> 00:00:59,309
also going to talk about customizing

00:00:57,809 --> 00:01:01,050
virtual machines and we're going to have

00:00:59,309 --> 00:01:03,979
an interactive demo we should be a bit

00:01:01,050 --> 00:01:06,869
of fun hopefully we'll get to that in

00:01:03,979 --> 00:01:10,950
very soon about my feelings about doing

00:01:06,869 --> 00:01:14,729
interactive demos right ok introduction

00:01:10,950 --> 00:01:17,400
to compute engine so computing ginnis

00:01:14,729 --> 00:01:18,600
parts of the Google cloud platform and

00:01:17,400 --> 00:01:21,000
the Google cloud platform is basically

00:01:18,600 --> 00:01:22,229
broken up into three main areas we have

00:01:21,000 --> 00:01:25,130
compute we have storage and we have

00:01:22,229 --> 00:01:26,850
services in the compute side we have

00:01:25,130 --> 00:01:28,579
compute engine which is an

00:01:26,850 --> 00:01:31,380
infrastructure as a service offering and

00:01:28,579 --> 00:01:33,540
we're going to talk about that just the

00:01:31,380 --> 00:01:35,340
entire subject of this talk then we have

00:01:33,540 --> 00:01:38,610
App Engine App Engine is a platform as a

00:01:35,340 --> 00:01:41,460
service offering and this slide who was

00:01:38,610 --> 00:01:42,630
a Jimmy Davis talk so I've already seen

00:01:41,460 --> 00:01:44,790
something soon as it is already

00:01:42,630 --> 00:01:45,840
ok so I'm just a little bit deeper but

00:01:44,790 --> 00:01:47,579
it's covering some of the same things

00:01:45,840 --> 00:01:50,070
that they did but I want to provide

00:01:47,579 --> 00:01:52,049
context to those who weren't here so App

00:01:50,070 --> 00:01:54,479
Engine is a platform as a service

00:01:52,049 --> 00:01:55,890
offering and basically what that does is

00:01:54,479 --> 00:01:57,840
provides you with an entire software

00:01:55,890 --> 00:02:00,810
stack so you build your applications on

00:01:57,840 --> 00:02:02,909
top of that software stack and the

00:02:00,810 --> 00:02:03,810
software tax software stacks are what we

00:02:02,909 --> 00:02:06,420
call runtimes

00:02:03,810 --> 00:02:08,429
and we have runtime so Java we have one

00:02:06,420 --> 00:02:10,319
x of Python once I sort of go

00:02:08,429 --> 00:02:12,180
programming language and one for Python

00:02:10,319 --> 00:02:13,890
as well a PHP

00:02:12,180 --> 00:02:16,920
and I summon a conversation today about

00:02:13,890 --> 00:02:19,079
PHP and probably not a good idea to make

00:02:16,920 --> 00:02:25,049
PHP available some more people in the

00:02:19,079 --> 00:02:30,629
world so my PHP my PHP must die t-shirt

00:02:25,049 --> 00:02:33,390
is in a post so where compute engine

00:02:30,629 --> 00:02:34,980
provides you or removes the need for you

00:02:33,390 --> 00:02:39,000
to worry about actually building and

00:02:34,980 --> 00:02:40,379
maintaining servers App Engine actually

00:02:39,000 --> 00:02:41,459
provides you the software stack so you

00:02:40,379 --> 00:02:43,500
didn't have to worry about building

00:02:41,459 --> 00:02:48,629
software stacks buying and licensing

00:02:43,500 --> 00:02:50,250
software and what that does that frees

00:02:48,629 --> 00:02:51,810
you up to actually develop your

00:02:50,250 --> 00:02:52,920
application code develop your business

00:02:51,810 --> 00:02:55,049
logic and actually worry about

00:02:52,920 --> 00:02:57,269
installing software stacks on the

00:02:55,049 --> 00:02:58,620
storage side we have Google Cloud do

00:02:57,269 --> 00:03:01,310
Google Cloud storage which is an object

00:02:58,620 --> 00:03:04,349
store this is used to storing files

00:03:01,310 --> 00:03:06,810
unstructured data any type of file data

00:03:04,349 --> 00:03:09,269
files executable with images blobs that

00:03:06,810 --> 00:03:12,150
kind of thing pretty much any type of

00:03:09,269 --> 00:03:15,030
file and pretty much any size do cloud

00:03:12,150 --> 00:03:17,819
SQL is our relational offering so I

00:03:15,030 --> 00:03:21,299
think MySQL in the cloud and cloud

00:03:17,819 --> 00:03:24,120
datastore is our no SQL massively

00:03:21,299 --> 00:03:25,620
scalable no SQL service that we use

00:03:24,120 --> 00:03:31,829
internally which is built on top of a

00:03:25,620 --> 00:03:33,480
mega store and BigTable and which used

00:03:31,829 --> 00:03:36,120
to be tired exclusively to App Engine

00:03:33,480 --> 00:03:38,310
but recently we freed it up from its

00:03:36,120 --> 00:03:40,230
reliance upon App Engine and it's now

00:03:38,310 --> 00:03:45,030
available pretty much anywhere by our

00:03:40,230 --> 00:03:47,310
own API on the services side we have

00:03:45,030 --> 00:03:49,500
Google bigquery and there's probably

00:03:47,310 --> 00:03:52,199
gonna be some bits missing because the

00:03:49,500 --> 00:03:53,810
boxes aren't showing up so hopefully

00:03:52,199 --> 00:03:55,889
that's going to be reasonably clear

00:03:53,810 --> 00:03:57,810
Google bigquery allows you to run

00:03:55,889 --> 00:04:00,449
interactive analysis across massive data

00:03:57,810 --> 00:04:01,829
sets and we're talking about interactive

00:04:00,449 --> 00:04:04,560
here so you can type in a query get

00:04:01,829 --> 00:04:05,639
results back very quickly I mean the

00:04:04,560 --> 00:04:08,280
data sets we're talking about on the

00:04:05,639 --> 00:04:12,000
size and petabytes terabytes billions of

00:04:08,280 --> 00:04:13,440
rows of data uses and sql-like syntax so

00:04:12,000 --> 00:04:15,659
it's very simple to use very familiar to

00:04:13,440 --> 00:04:16,829
most people we've used SQL before it

00:04:15,659 --> 00:04:18,870
allows you to get results back in

00:04:16,829 --> 00:04:21,209
seconds and not minutes or hours like

00:04:18,870 --> 00:04:22,979
you would do with say I MapReduce we

00:04:21,209 --> 00:04:24,659
have Google Cloud endpoints which is our

00:04:22,979 --> 00:04:25,710
entry point into the cloud this is

00:04:24,659 --> 00:04:27,960
implemented on

00:04:25,710 --> 00:04:29,490
engine but it pretty much have used in

00:04:27,960 --> 00:04:32,639
App Engine you can use cloud endpoints

00:04:29,490 --> 00:04:34,080
access any any part of our cloud this

00:04:32,639 --> 00:04:36,090
allows you to write your application

00:04:34,080 --> 00:04:38,069
logic your business logic and expose it

00:04:36,090 --> 00:04:40,530
as an API and you guys look very very

00:04:38,069 --> 00:04:41,970
similar city api's that we offer at a

00:04:40,530 --> 00:04:44,400
discoverable and you can build client

00:04:41,970 --> 00:04:47,849
libraries from those API is for Android

00:04:44,400 --> 00:04:49,199
for iOS and for the web caching we are

00:04:47,849 --> 00:04:51,210
cashing services pretty much everywhere

00:04:49,199 --> 00:04:54,030
so cash at the edge we have memcache

00:04:51,210 --> 00:04:57,120
implementations and queues we have task

00:04:54,030 --> 00:04:58,530
queues allow you to join App Engine and

00:04:57,120 --> 00:05:00,270
compute engine together so you can

00:04:58,530 --> 00:05:02,880
actually move your workloads to where

00:05:00,270 --> 00:05:04,919
they're most appropriate and we have a

00:05:02,880 --> 00:05:06,120
lot more and of course the whole thing

00:05:04,919 --> 00:05:08,039
about this is it runs on Google

00:05:06,120 --> 00:05:09,330
infrastructure you see the same software

00:05:08,039 --> 00:05:11,669
and hardware infrastructure that we use

00:05:09,330 --> 00:05:13,889
to service your search queries and also

00:05:11,669 --> 00:05:19,500
to run YouTube and Gmail those kind of

00:05:13,889 --> 00:05:21,690
services so Google compute engine very

00:05:19,500 --> 00:05:23,340
quick look at this we're going to be

00:05:21,690 --> 00:05:25,349
talking about virtual machines about

00:05:23,340 --> 00:05:27,479
networks and firewalls about storage

00:05:25,349 --> 00:05:29,310
resources and disks and about the

00:05:27,479 --> 00:05:30,740
tooling that you can use to actually

00:05:29,310 --> 00:05:34,020
manage all of those compute resources

00:05:30,740 --> 00:05:35,880
and the API that you can use to actually

00:05:34,020 --> 00:05:41,520
build your own applications around those

00:05:35,880 --> 00:05:44,280
compute compute resources a quick

00:05:41,520 --> 00:05:47,969
overview of the compute engine

00:05:44,280 --> 00:05:50,009
architecture basically make four main

00:05:47,969 --> 00:05:52,320
areas virtual machines networking

00:05:50,009 --> 00:05:53,880
storage and the API and tours

00:05:52,320 --> 00:05:56,400
this doesn't have closed their cloud

00:05:53,880 --> 00:05:58,500
load balancing you may have seen if you

00:05:56,400 --> 00:06:01,080
saw this slide earlier from Jimmy's talk

00:05:58,500 --> 00:06:04,169
he actually had load balancing as a

00:06:01,080 --> 00:06:05,699
component but we were kind of we

00:06:04,169 --> 00:06:07,860
released it last week and it was kind of

00:06:05,699 --> 00:06:09,599
touch and go every release and I kind of

00:06:07,860 --> 00:06:11,520
changed my slides I removed that and

00:06:09,599 --> 00:06:12,690
that with no load balancing and then

00:06:11,520 --> 00:06:15,830
really couldn't be bothered to put it

00:06:12,690 --> 00:06:18,330
back again but we do have no balancing

00:06:15,830 --> 00:06:20,190
so let's go a little bit deeper into

00:06:18,330 --> 00:06:22,500
each one of those sections so virtual

00:06:20,190 --> 00:06:24,990
machines we have Linux virtual machines

00:06:22,500 --> 00:06:26,780
so we obviously have a being that's why

00:06:24,990 --> 00:06:29,580
we're here we have squeezed and we

00:06:26,780 --> 00:06:30,930
squeezed and wheezy and we also support

00:06:29,580 --> 00:06:36,150
same source but we're not here to talk

00:06:30,930 --> 00:06:37,469
about sentencing we have many virtual

00:06:36,150 --> 00:06:39,390
machine hardware configurations

00:06:37,469 --> 00:06:42,510
basically combinations of

00:06:39,390 --> 00:06:44,340
memory CPU and disk so you can build

00:06:42,510 --> 00:06:46,710
pretty much whatever you want to in

00:06:44,340 --> 00:06:48,150
terms of the hardware configuration we

00:06:46,710 --> 00:06:49,860
also have the fractional virtual

00:06:48,150 --> 00:06:51,900
machines as Timmy mentioned small and

00:06:49,860 --> 00:06:55,260
micro virtual machines and these are

00:06:51,900 --> 00:06:56,730
shared core instances so therefore work

00:06:55,260 --> 00:06:58,440
clothes that don't really require huge

00:06:56,730 --> 00:07:01,410
amounts of processing power

00:06:58,440 --> 00:07:02,670
we have roots we have root access the

00:07:01,410 --> 00:07:04,650
effective root access all of your

00:07:02,670 --> 00:07:07,620
virtual machines and we recently

00:07:04,650 --> 00:07:09,060
introduced sub our billing so you pay

00:07:07,620 --> 00:07:11,820
for the first ten minutes you always pay

00:07:09,060 --> 00:07:14,130
for ten minutes of your instance uptime

00:07:11,820 --> 00:07:16,080
but then we build by the minute from

00:07:14,130 --> 00:07:17,880
that point onwards so if you use it for

00:07:16,080 --> 00:07:19,950
five minutes your paper 10 minutes have

00:07:17,880 --> 00:07:25,950
you use it for 2 hours your paper 2

00:07:19,950 --> 00:07:27,270
hours in terms of network resources well

00:07:25,950 --> 00:07:28,680
virtual machines they don't live in

00:07:27,270 --> 00:07:30,060
isolation they need to talk to each

00:07:28,680 --> 00:07:33,900
other they need to talk to the internet

00:07:30,060 --> 00:07:36,030
so all of the virtual machines within a

00:07:33,900 --> 00:07:37,710
project are linked by a private network

00:07:36,030 --> 00:07:40,500
and you can build your own private

00:07:37,710 --> 00:07:42,630
networks you can use network resources

00:07:40,500 --> 00:07:45,000
and firewall resources to create rules

00:07:42,630 --> 00:07:46,770
that determine how the virtual machines

00:07:45,000 --> 00:07:50,940
will interact with each other and with

00:07:46,770 --> 00:07:52,500
the internet advanced routing allows you

00:07:50,940 --> 00:07:57,240
to build advanced networking

00:07:52,500 --> 00:07:58,650
configurations that allows you to

00:07:57,240 --> 00:08:03,000
implement things like virtual virtual

00:07:58,650 --> 00:08:05,100
private networking recently we

00:08:03,000 --> 00:08:06,300
introduced the layer free load balancing

00:08:05,100 --> 00:08:08,310
as I said that was announced last week

00:08:06,300 --> 00:08:10,770
and removed from the slides

00:08:08,310 --> 00:08:13,050
unfortunately that allows you to low

00:08:10,770 --> 00:08:15,090
balance all of your HTTP traffic or

00:08:13,050 --> 00:08:18,030
other traffic across multiple virtual

00:08:15,090 --> 00:08:19,200
machines or virtual machine endpoints it

00:08:18,030 --> 00:08:21,630
also supports health checking to make

00:08:19,200 --> 00:08:23,460
sure that traffic is only routed to

00:08:21,630 --> 00:08:26,040
routed or routed depend on where you

00:08:23,460 --> 00:08:28,860
come from two instances that are up and

00:08:26,040 --> 00:08:30,660
healthy and it's effectively a cloud

00:08:28,860 --> 00:08:32,820
native implementation and but what I

00:08:30,660 --> 00:08:34,710
mean by that is that it's implemented as

00:08:32,820 --> 00:08:36,270
part of our network infrastructure it's

00:08:34,710 --> 00:08:40,860
not kind of bolted on it doesn't need a

00:08:36,270 --> 00:08:43,430
nuisance to run on and please do stop me

00:08:40,860 --> 00:08:46,170
if you have any questions as well so

00:08:43,430 --> 00:08:48,540
virtual machines need disks they need to

00:08:46,170 --> 00:08:50,610
be out of boots they need to have places

00:08:48,540 --> 00:08:51,740
where they can store data temporarily or

00:08:50,610 --> 00:08:54,180
permanently

00:08:51,740 --> 00:08:56,250
so the two offerings we have in terms of

00:08:54,180 --> 00:08:58,550
disks for the virtual machines are

00:08:56,250 --> 00:09:00,630
persistent disk and scratch disk

00:08:58,550 --> 00:09:02,490
persistent disks live in the cloud that

00:09:00,630 --> 00:09:04,440
their virtual virtual machine

00:09:02,490 --> 00:09:06,600
independent and some people were

00:09:04,440 --> 00:09:08,370
concerned about how you would use up

00:09:06,600 --> 00:09:10,350
that type of disk so actually boot a

00:09:08,370 --> 00:09:12,600
virtual machine but our experience so

00:09:10,350 --> 00:09:14,370
far and feedback from people we we've

00:09:12,600 --> 00:09:16,680
been working with people companies like

00:09:14,370 --> 00:09:19,380
map are have fed back that the

00:09:16,680 --> 00:09:21,420
persistent disk is as quick to boot as

00:09:19,380 --> 00:09:25,649
other offerings of a scratch offerings

00:09:21,420 --> 00:09:27,060
from other cloud vendors so you don't

00:09:25,649 --> 00:09:31,019
have to worry about persistent disk

00:09:27,060 --> 00:09:32,519
being slow to boot also these position

00:09:31,019 --> 00:09:34,410
this is shareable they can be attached

00:09:32,519 --> 00:09:35,819
and detached from virtual machines and

00:09:34,410 --> 00:09:38,639
they can be shared between virtual

00:09:35,819 --> 00:09:39,600
machines you can actually share them

00:09:38,639 --> 00:09:41,250
between a group of boats and we're

00:09:39,600 --> 00:09:42,389
scenes in read-only mode so if you have

00:09:41,250 --> 00:09:44,100
a bunch of data on the disk that you

00:09:42,389 --> 00:09:47,160
want to share between multiple machines

00:09:44,100 --> 00:09:49,079
you can do that in read-only mode we

00:09:47,160 --> 00:09:51,060
also support snapshots so you can make

00:09:49,079 --> 00:09:52,769
snapshots of a disk state of a

00:09:51,060 --> 00:09:54,660
particular time and then you can use

00:09:52,769 --> 00:09:57,870
that snapshot to actually create new

00:09:54,660 --> 00:09:59,699
persistent disks and again snapshots are

00:09:57,870 --> 00:10:01,290
project liberal resources they're not

00:09:59,699 --> 00:10:02,430
instance level resources they live in

00:10:01,290 --> 00:10:05,610
the cloud and you can use them of

00:10:02,430 --> 00:10:07,470
anywhere within the project a scratch

00:10:05,610 --> 00:10:09,899
disk what we used to call ephemeral disk

00:10:07,470 --> 00:10:12,060
is effectively a local disk local to the

00:10:09,899 --> 00:10:13,560
virtual machine it's tied to the life so

00:10:12,060 --> 00:10:15,420
I called a virtual machine lives and

00:10:13,560 --> 00:10:17,430
dies with it so it's basically for

00:10:15,420 --> 00:10:19,649
temporary data you boot the machine from

00:10:17,430 --> 00:10:21,480
it store data on it temporarily once the

00:10:19,649 --> 00:10:23,550
virtual machine goes away that disk will

00:10:21,480 --> 00:10:25,829
go away but you can use it you can you

00:10:23,550 --> 00:10:27,380
can add scratch disks your machines you

00:10:25,829 --> 00:10:29,850
need more disk space for a temporary

00:10:27,380 --> 00:10:31,470
temporary results and during the demo

00:10:29,850 --> 00:10:34,230
we're actually going to look at how we

00:10:31,470 --> 00:10:35,459
can create a specialist I've already

00:10:34,230 --> 00:10:37,589
mentioned the other cloud platform

00:10:35,459 --> 00:10:39,600
storage options cloud storage cloud SQL

00:10:37,589 --> 00:10:43,130
on cloud datastore so we we pretty much

00:10:39,600 --> 00:10:43,130
have everything covered in that respect

00:10:43,699 --> 00:10:51,029
the API and the tools so all about tools

00:10:46,949 --> 00:10:55,680
all about tools that we provide the

00:10:51,029 --> 00:10:57,810
tools that Jimmy and David demoed to you

00:10:55,680 --> 00:11:00,959
things like GC util and the user

00:10:57,810 --> 00:11:04,190
interface they all work via our API now

00:11:00,959 --> 00:11:07,700
API is Jason over HTTP pretty standard

00:11:04,190 --> 00:11:10,580
a RESTful API the main resources the

00:11:07,700 --> 00:11:12,620
nouns are the compute resources that we

00:11:10,580 --> 00:11:14,930
mentioned so far projects instances

00:11:12,620 --> 00:11:19,100
networks firewalls disks snapshots and

00:11:14,930 --> 00:11:23,660
so on the actions the verbs are Santa

00:11:19,100 --> 00:11:26,300
HTTP verbs get post posted views for

00:11:23,660 --> 00:11:29,000
create delete and we have custom verbs

00:11:26,300 --> 00:11:31,280
for updates and be their combination of

00:11:29,000 --> 00:11:34,520
put and post but different different

00:11:31,280 --> 00:11:37,370
functions all of the authentication for

00:11:34,520 --> 00:11:38,540
the API is done via OAuth 2 we also have

00:11:37,370 --> 00:11:44,690
service accounts which I'll mention

00:11:38,540 --> 00:11:46,400
later right so actually how do people

00:11:44,690 --> 00:11:48,820
before this talk had actually heard of

00:11:46,400 --> 00:11:48,820
compute engine

00:11:49,630 --> 00:11:56,660
ok so David had so like a few of you how

00:11:55,340 --> 00:12:00,920
many people would actually use that

00:11:56,660 --> 00:12:04,160
kinds on and compute engine only one

00:12:00,920 --> 00:12:09,920
person David again you should whether

00:12:04,160 --> 00:12:12,200
Google you do what so if you want to

00:12:09,920 --> 00:12:14,690
have compute engine if you know from

00:12:12,200 --> 00:12:16,910
preview now it's that was announced at

00:12:14,690 --> 00:12:18,890
Google i/o back in May so you can sign

00:12:16,910 --> 00:12:21,650
up right now paid support is available

00:12:18,890 --> 00:12:23,870
for levels of support we have an SLA for

00:12:21,650 --> 00:12:25,550
all of the customers that use it and you

00:12:23,870 --> 00:12:27,080
can get started at that particularly URL

00:12:25,550 --> 00:12:28,820
and you pull some things you need to

00:12:27,080 --> 00:12:30,500
remember from that URL a cloud and

00:12:28,820 --> 00:12:32,270
compute but if you go to

00:12:30,500 --> 00:12:35,780
cloud.google.com you're probably going

00:12:32,270 --> 00:12:38,000
to get there anyway and the kitchen the

00:12:35,780 --> 00:12:39,350
kitchen once compute engine before when

00:12:38,000 --> 00:12:41,210
it was in limited preview the kitchen

00:12:39,350 --> 00:12:45,020
couldn't have compute engine but now I

00:12:41,210 --> 00:12:50,720
can you guys don't care about kittens ID

00:12:45,020 --> 00:12:53,750
really wrong audience for kittens so

00:12:50,720 --> 00:12:56,270
custom customization options so a

00:12:53,750 --> 00:12:58,100
virtual machine the image of a virtual

00:12:56,270 --> 00:12:59,990
machine getting a Debbie in the image

00:12:58,100 --> 00:13:00,890
and it's sewing on your instance it

00:12:59,990 --> 00:13:03,470
probably isn't really gonna be enough

00:13:00,890 --> 00:13:08,089
for you you're not going to want to run

00:13:03,470 --> 00:13:09,440
a vanilla OS image so you're going to

00:13:08,089 --> 00:13:11,480
want to customize the image you're going

00:13:09,440 --> 00:13:12,980
to want to install software on it you're

00:13:11,480 --> 00:13:16,640
going to want to run services on em

00:13:12,980 --> 00:13:18,050
provide configuration install packages

00:13:16,640 --> 00:13:20,180
and it's all custom software from

00:13:18,050 --> 00:13:24,380
various sources and we're going to show

00:13:20,180 --> 00:13:27,320
an example of that later so one way the

00:13:24,380 --> 00:13:30,140
first way to pray it's a customized

00:13:27,320 --> 00:13:33,800
right image is to take a Google provided

00:13:30,140 --> 00:13:36,350
OS image and to customize it and put

00:13:33,800 --> 00:13:37,970
that back into the cloud put it back

00:13:36,350 --> 00:13:39,410
into compute engine so it's accessible

00:13:37,970 --> 00:13:40,820
for you whenever you provision them

00:13:39,410 --> 00:13:42,399
instances and we'll go through that

00:13:40,820 --> 00:13:45,470
process in a second

00:13:42,399 --> 00:13:47,810
also you can use startup scripts to

00:13:45,470 --> 00:13:53,000
dynamically configure your instances so

00:13:47,810 --> 00:13:54,680
it may well be that you have a base

00:13:53,000 --> 00:13:56,899
build and a base setup but you have

00:13:54,680 --> 00:13:58,310
startup scripts for various different

00:13:56,899 --> 00:13:59,870
use cases but there are various

00:13:58,310 --> 00:14:01,160
different purposes and the startup

00:13:59,870 --> 00:14:02,420
scripts are kind of similar to ask you

00:14:01,160 --> 00:14:06,140
don't know core that they install

00:14:02,420 --> 00:14:08,480
software boot time you can combine the

00:14:06,140 --> 00:14:11,510
first two options so you can have a

00:14:08,480 --> 00:14:13,040
broad base image that you use or

00:14:11,510 --> 00:14:15,100
multiple base images that you use for

00:14:13,040 --> 00:14:17,510
multiple machines and multiple bit VMs

00:14:15,100 --> 00:14:19,399
and you can then customize those

00:14:17,510 --> 00:14:21,500
individually for groups of VMs or for

00:14:19,399 --> 00:14:25,940
specific specific VMs using startup

00:14:21,500 --> 00:14:27,800
scripts and the final ways to use to

00:14:25,940 --> 00:14:30,050
build your own images using build Debian

00:14:27,800 --> 00:14:32,690
cloud which used to be called ec2 Debian

00:14:30,050 --> 00:14:38,240
build a me I might let us say a me order

00:14:32,690 --> 00:14:40,370
to say am i okay I like spelling I'd

00:14:38,240 --> 00:14:44,290
never nobody spell things out or not

00:14:40,370 --> 00:14:46,760
like SQL SQL to me I can't say sequel

00:14:44,290 --> 00:14:48,079
well when I used to work at some we were

00:14:46,760 --> 00:14:50,690
when I used to work at some we were

00:14:48,079 --> 00:14:54,320
slapped around for saying sequel because

00:14:50,690 --> 00:14:56,300
it was just not done so easy to Debian

00:14:54,320 --> 00:14:58,339
build a me and I now supports both

00:14:56,300 --> 00:15:02,620
Amazon ec2 in compute engine images and

00:14:58,339 --> 00:15:02,620
and Jimmy mentioned it during his talk

00:15:03,279 --> 00:15:08,570
so currently the versions we have of

00:15:06,079 --> 00:15:10,550
Debian the stock images that we have

00:15:08,570 --> 00:15:13,220
when you install compute engine when you

00:15:10,550 --> 00:15:15,560
want to provisioning instances squeeze

00:15:13,220 --> 00:15:17,810
6.07 and we see 7.1

00:15:15,560 --> 00:15:19,550
I did have sense on this slide but I

00:15:17,810 --> 00:15:24,050
thought it might think you all removed

00:15:19,550 --> 00:15:25,850
it so creating custom images I was going

00:15:24,050 --> 00:15:28,040
to walk through this but I feel I'd like

00:15:25,850 --> 00:15:30,410
to spend more time doing the interactive

00:15:28,040 --> 00:15:31,279
demos so custom image basically

00:15:30,410 --> 00:15:33,199
all you have to do is create a new

00:15:31,279 --> 00:15:34,699
instance and you had to provide it with

00:15:33,199 --> 00:15:36,889
a service account or you have to tell it

00:15:34,699 --> 00:15:38,540
to use a service account now the service

00:15:36,889 --> 00:15:40,850
account basically does authentication

00:15:38,540 --> 00:15:42,019
for you normally the authentication flow

00:15:40,850 --> 00:15:43,879
we use is a wolf

00:15:42,019 --> 00:15:45,649
so if from a compute engine instance you

00:15:43,879 --> 00:15:47,089
wanted to access another service or

00:15:45,649 --> 00:15:48,800
another API you would have to

00:15:47,089 --> 00:15:51,319
authenticate against any weather go for

00:15:48,800 --> 00:15:53,480
an old flow but in this case you can

00:15:51,319 --> 00:15:56,269
provide a service account which actually

00:15:53,480 --> 00:15:58,279
stores a refresh token in its metadata

00:15:56,269 --> 00:16:00,470
and it will handle all of the

00:15:58,279 --> 00:16:02,480
authentication for you so in this case

00:16:00,470 --> 00:16:05,180
when we create a new instance we're

00:16:02,480 --> 00:16:07,009
saying create a service account give it

00:16:05,180 --> 00:16:10,310
the access storage fall which means it

00:16:07,009 --> 00:16:12,050
has access to Google Cloud Storage can

00:16:10,310 --> 00:16:14,769
do reads and writes and we're going to

00:16:12,050 --> 00:16:17,209
use cloud storage for storing our image

00:16:14,769 --> 00:16:19,279
then you SSH into the instance and

00:16:17,209 --> 00:16:21,740
customized image setup so in this case

00:16:19,279 --> 00:16:24,170
your install custom software add

00:16:21,740 --> 00:16:24,829
packages do configuration start services

00:16:24,170 --> 00:16:28,129
that kind of thing

00:16:24,829 --> 00:16:31,490
and then you're going to create an image

00:16:28,129 --> 00:16:34,009
tarball using image bundled-up py a

00:16:31,490 --> 00:16:37,069
Python script that we supply and that

00:16:34,009 --> 00:16:38,240
will create a large image for you will

00:16:37,069 --> 00:16:40,519
take some time to run dipping that

00:16:38,240 --> 00:16:42,740
deliver a configuration either you've

00:16:40,519 --> 00:16:44,449
made on the image and then once you've

00:16:42,740 --> 00:16:45,649
done that upload the image tarball to

00:16:44,449 --> 00:16:47,779
Google Cloud storage

00:16:45,649 --> 00:16:49,399
where it's accessible for you to use

00:16:47,779 --> 00:16:52,009
with gcutil

00:16:49,399 --> 00:16:54,439
one of the tools that Jimmy showed you

00:16:52,009 --> 00:16:56,720
earlier it's add the image back into

00:16:54,439 --> 00:16:58,970
compute engine it now becomes a project

00:16:56,720 --> 00:17:01,839
level resource for you to use within all

00:16:58,970 --> 00:17:05,659
of your within your particular project

00:17:01,839 --> 00:17:07,669
projects are basically the housing of

00:17:05,659 --> 00:17:09,079
all of the resources that you create so

00:17:07,669 --> 00:17:10,400
when you create virtual machines and

00:17:09,079 --> 00:17:11,900
networks and such like you didn't a

00:17:10,400 --> 00:17:13,309
project level and they're kind of

00:17:11,900 --> 00:17:17,059
isolated you can't share these resources

00:17:13,309 --> 00:17:19,640
between projects and then once you've

00:17:17,059 --> 00:17:20,990
done that image should now be added to

00:17:19,640 --> 00:17:23,240
the list of images are available for you

00:17:20,990 --> 00:17:25,760
to build instances with and you can do

00:17:23,240 --> 00:17:27,679
gcutil list images to see the images

00:17:25,760 --> 00:17:30,010
that you have and it should be there and

00:17:27,679 --> 00:17:33,919
we'll have a look at that in the demo

00:17:30,010 --> 00:17:35,150
instance metadata so virtual machines

00:17:33,919 --> 00:17:36,860
need to knows stuff about their

00:17:35,150 --> 00:17:39,080
environment and you have some context in

00:17:36,860 --> 00:17:40,940
which they're running in so the metadata

00:17:39,080 --> 00:17:42,920
server provides that to the instance

00:17:40,940 --> 00:17:44,930
it's basically a

00:17:42,920 --> 00:17:46,340
dictionnaire key value pairs it has some

00:17:44,930 --> 00:17:48,650
basic information pushed into it

00:17:46,340 --> 00:17:50,330
provision time things like the hostname

00:17:48,650 --> 00:17:52,940
the image the zone that kind of thing

00:17:50,330 --> 00:17:55,160
but you can also use custom metadata and

00:17:52,940 --> 00:17:56,900
that's set by the API but all this stuff

00:17:55,160 --> 00:17:58,970
is read by the instance specifically so

00:17:56,900 --> 00:18:02,360
it gives the innocence context about its

00:17:58,970 --> 00:18:04,400
environment it's accessible via de if

00:18:02,360 --> 00:18:08,120
the instance metadata server so you just

00:18:04,400 --> 00:18:09,110
one HTTP code on metadata using curl or

00:18:08,120 --> 00:18:11,750
something like that to get information

00:18:09,110 --> 00:18:13,820
from it and it's useful for very small

00:18:11,750 --> 00:18:17,300
amounts of config data you can push

00:18:13,820 --> 00:18:20,020
start up scripts into the metadata

00:18:17,300 --> 00:18:22,430
server but less than only less than 32 K

00:18:20,020 --> 00:18:25,010
there's also project level of metadata

00:18:22,430 --> 00:18:26,300
which is accessible to all instances so

00:18:25,010 --> 00:18:28,310
you can actually sit metadata at the

00:18:26,300 --> 00:18:29,720
project level and that will be

00:18:28,310 --> 00:18:33,200
propagated so all of the instances that

00:18:29,720 --> 00:18:36,170
you create a very very brief example so

00:18:33,200 --> 00:18:39,140
we set an environment variable MDS and

00:18:36,170 --> 00:18:41,630
just use curl to access the metadata

00:18:39,140 --> 00:18:44,840
role and config values get those values

00:18:41,630 --> 00:18:47,120
back and also because you may your

00:18:44,840 --> 00:18:48,710
software may be running on some unknown

00:18:47,120 --> 00:18:50,570
cloud and you might want to know what

00:18:48,710 --> 00:18:51,890
Cloud it's one long in order to find out

00:18:50,570 --> 00:18:53,480
of your run on compute engine you can

00:18:51,890 --> 00:18:55,520
just ping metadata up google dot

00:18:53,480 --> 00:18:56,870
internal and out well if that comes back

00:18:55,520 --> 00:18:59,660
with a positive response and you know

00:18:56,870 --> 00:19:00,770
you're running on compute engine so you

00:18:59,660 --> 00:19:02,690
can obviously code that you don't need

00:19:00,770 --> 00:19:06,170
to use ping you can use some kind of IP

00:19:02,690 --> 00:19:07,370
ping or something like that and startup

00:19:06,170 --> 00:19:08,900
scripts so the whole points are talking

00:19:07,370 --> 00:19:11,570
about metadata was because startup

00:19:08,900 --> 00:19:13,790
scripts exist would be metadata that

00:19:11,570 --> 00:19:16,610
provided provision by the metadata

00:19:13,790 --> 00:19:18,380
server provision time and they're very

00:19:16,610 --> 00:19:21,410
similar to our c dot low called a run up

00:19:18,380 --> 00:19:23,110
boot time if you reboot the virtual

00:19:21,410 --> 00:19:25,430
machine which it is possible to do

00:19:23,110 --> 00:19:27,080
although you probably wouldn't be more

00:19:25,430 --> 00:19:29,240
likely to delete the image and delete

00:19:27,080 --> 00:19:31,390
the instance of him create a new one but

00:19:29,240 --> 00:19:33,620
if you reboot city will run again

00:19:31,390 --> 00:19:35,570
example you cities to install packages

00:19:33,620 --> 00:19:38,000
and to start services but you can also

00:19:35,570 --> 00:19:40,730
bootstrap other compute resources so in

00:19:38,000 --> 00:19:43,430
the two examples here a startup script

00:19:40,730 --> 00:19:46,040
is used is created and then it's pushed

00:19:43,430 --> 00:19:48,500
into the metadata again since creation

00:19:46,040 --> 00:19:51,170
time so that starts startup script

00:19:48,500 --> 00:19:52,700
startup script side up that Sh will live

00:19:51,170 --> 00:19:55,180
in the metadata for that particular

00:19:52,700 --> 00:19:55,180
instance

00:19:55,340 --> 00:20:06,470
sorry okay

00:20:06,740 --> 00:20:12,660
right so now we're going to go into an

00:20:08,640 --> 00:20:14,100
interactive demo so now interactive

00:20:12,660 --> 00:20:16,890
demos are normally places where you have

00:20:14,100 --> 00:20:18,870
a room for the corner cases so corner

00:20:16,890 --> 00:20:20,550
cases when you're done is go wrong and

00:20:18,870 --> 00:20:22,530
normally everybody in the room is a

00:20:20,550 --> 00:20:24,660
corner case it always breaks it's always

00:20:22,530 --> 00:20:29,960
going to break and hopefully it won't

00:20:24,660 --> 00:20:29,960
break so much so let's go through this

00:20:30,020 --> 00:20:34,020
what we're gonna do if you want to

00:20:32,370 --> 00:20:37,290
follow along if you have a laptop and

00:20:34,020 --> 00:20:38,610
say for you if you have laptops but if

00:20:37,290 --> 00:20:40,140
you want to follow along I'm gonna do

00:20:38,610 --> 00:20:42,150
this myself but you're perfectly welcome

00:20:40,140 --> 00:20:43,880
to follow along we're going to look for

00:20:42,150 --> 00:20:46,440
the most unusual objects in the universe

00:20:43,880 --> 00:20:51,270
okay we're gonna look for weird galaxies

00:20:46,440 --> 00:20:52,970
and movers and that kind of thing and so

00:20:51,270 --> 00:20:55,320
we're going to be used in software

00:20:52,970 --> 00:20:57,360
that's going to be used with the large

00:20:55,320 --> 00:20:59,640
synoptic survey telescope which is about

00:20:57,360 --> 00:21:01,650
to be built in Chile on a mountain

00:20:59,640 --> 00:21:03,660
somewhere in Chile and the plan is that

00:21:01,650 --> 00:21:05,880
the large synoptic survey telescope will

00:21:03,660 --> 00:21:09,510
image half of the sky the southern

00:21:05,880 --> 00:21:10,740
hemisphere every three days or so over

00:21:09,510 --> 00:21:12,630
the course of ten years it's going to

00:21:10,740 --> 00:21:16,140
gather 60 petabytes worth of data and

00:21:12,630 --> 00:21:18,090
it's going to image 10 billion discrete

00:21:16,140 --> 00:21:20,520
stars and cymbeline discreet galaxies

00:21:18,090 --> 00:21:21,720
and the software we're going to use is

00:21:20,520 --> 00:21:24,480
part of a concerted effort to actually

00:21:21,720 --> 00:21:27,300
build highly scalable astronomical

00:21:24,480 --> 00:21:31,140
analysis tours the camera used with the

00:21:27,300 --> 00:21:33,750
LSSC is a 3.2 gigapixel camera I want

00:21:31,140 --> 00:21:35,610
one of those on my phone because when I

00:21:33,750 --> 00:21:37,470
kamesh the size of the files

00:21:35,610 --> 00:21:39,210
he's like 20 terabytes a day in this

00:21:37,470 --> 00:21:42,690
project roll will generate which is like

00:21:39,210 --> 00:21:45,300
crazy so what we're going to do we have

00:21:42,690 --> 00:21:47,010
a thousands of images we can pull from

00:21:45,300 --> 00:21:48,420
and these ones are taken by other

00:21:47,010 --> 00:21:51,300
cameras obviously the telescope's have

00:21:48,420 --> 00:21:53,130
been built yet but what we can do is we

00:21:51,300 --> 00:21:55,950
can take images from a particular area

00:21:53,130 --> 00:21:57,830
and in this case their focus on galaxies

00:21:55,950 --> 00:22:01,170
where particularly galaxies whether

00:21:57,830 --> 00:22:02,580
where we have images for and we can take

00:22:01,170 --> 00:22:05,670
individual images and we can overlay

00:22:02,580 --> 00:22:06,809
them and then we can align them to make

00:22:05,670 --> 00:22:08,220
sure they're aligned for the

00:22:06,809 --> 00:22:10,379
correct coordinates and then we can

00:22:08,220 --> 00:22:13,320
build a very deep image of that

00:22:10,379 --> 00:22:14,970
particular area of the sky so it maybe

00:22:13,320 --> 00:22:16,830
focus on a particular galaxy or some

00:22:14,970 --> 00:22:18,899
other interesting objects but we'll get

00:22:16,830 --> 00:22:22,169
a very deep view of the sky and all of

00:22:18,899 --> 00:22:23,669
the all of the objects that are in that

00:22:22,169 --> 00:22:26,220
particular frame or in that particular

00:22:23,669 --> 00:22:27,539
area will stand out very clearly as you

00:22:26,220 --> 00:22:29,159
can see in the second image which is

00:22:27,539 --> 00:22:34,799
basically a composite of the first three

00:22:29,159 --> 00:22:36,419
or four de so the prerequisites and make

00:22:34,799 --> 00:22:38,700
sure you had to follow it installed you

00:22:36,419 --> 00:22:41,129
need a browser and you'll need to have

00:22:38,700 --> 00:22:43,289
local storage enabled and JavaScript

00:22:41,129 --> 00:22:46,409
enabled and you'll also need a terminal

00:22:43,289 --> 00:22:48,240
and SSH so you guys been

00:22:46,409 --> 00:22:53,909
Debian hackers you're going to have

00:22:48,240 --> 00:22:54,809
access to SSH and I squeeze all it's a

00:22:53,909 --> 00:22:55,470
great browser and it should work

00:22:54,809 --> 00:22:57,440
perfectly

00:22:55,470 --> 00:23:00,389
Jimmy's tried it and it does work

00:22:57,440 --> 00:23:02,519
perfectly one thing you may get you may

00:23:00,389 --> 00:23:03,749
actually download the slides because our

00:23:02,519 --> 00:23:05,909
gonna get a copy of the slides when you

00:23:03,749 --> 00:23:09,080
run this they may actually download them

00:23:05,909 --> 00:23:09,080
rather than actually blew them in line

00:23:09,320 --> 00:23:16,320
quick word about GC you tell Jimmy and

00:23:13,110 --> 00:23:17,519
David demonstrated the gcutil so earlier

00:23:16,320 --> 00:23:20,070
this is basically the compute engine

00:23:17,519 --> 00:23:21,720
power tool allows you to access all

00:23:20,070 --> 00:23:24,090
aspects of compute engine apart from

00:23:21,720 --> 00:23:25,619
maybe some one a metadata like who has

00:23:24,090 --> 00:23:28,110
access to the project that kind of thing

00:23:25,619 --> 00:23:29,480
project level resources it allows you to

00:23:28,110 --> 00:23:32,700
create virtual machines networks

00:23:29,480 --> 00:23:34,110
instance the disks pretty much

00:23:32,700 --> 00:23:38,279
everything you can do within compute

00:23:34,110 --> 00:23:39,659
engine and I've been trying to find out

00:23:38,279 --> 00:23:42,419
figure out where to put this slide

00:23:39,659 --> 00:23:44,460
because I want to introduce you see you

00:23:42,419 --> 00:23:45,960
till first but it might be more helpful

00:23:44,460 --> 00:23:49,460
for you to have a look at it later when

00:23:45,960 --> 00:23:49,460
you actually log into a virtual machine

00:23:49,639 --> 00:23:53,460
so provisioning and management virtual

00:23:52,019 --> 00:23:54,659
machines for this demo we're going to

00:23:53,460 --> 00:23:57,029
need some virtual machines that you can

00:23:54,659 --> 00:23:58,409
work with there's lots of third-party

00:23:57,029 --> 00:23:59,970
tools are available to provision

00:23:58,409 --> 00:24:00,419
instances things like write scales

00:23:59,970 --> 00:24:03,149
scaler

00:24:00,419 --> 00:24:04,649
puppet chef they could all be use the

00:24:03,149 --> 00:24:07,379
revision instances and dynamically

00:24:04,649 --> 00:24:08,940
provision them based on workloads but

00:24:07,379 --> 00:24:11,039
you can also use a script and this would

00:24:08,940 --> 00:24:13,350
just invoke TC you tell to add and

00:24:11,039 --> 00:24:14,789
delete virtual machines and what we're

00:24:13,350 --> 00:24:17,100
using here is a script we created for

00:24:14,789 --> 00:24:18,960
this particular demo called CL dot SH

00:24:17,100 --> 00:24:21,559
and I was going to run it

00:24:18,960 --> 00:24:24,480
but it probably takes too long so I

00:24:21,559 --> 00:24:26,880
decided not to but that's what you'll

00:24:24,480 --> 00:24:29,070
see we'll run the scripts and it'll

00:24:26,880 --> 00:24:31,020
create 52:16 since it's for us it takes

00:24:29,070 --> 00:24:36,059
four or five minutes to create how many

00:24:31,020 --> 00:24:42,720
instances okay so how many of you want

00:24:36,059 --> 00:24:44,820
to follow along okay so the first thing

00:24:42,720 --> 00:24:47,640
you need to do is go to GCE

00:24:44,820 --> 00:24:51,840
- debian demo appspot.com in your

00:24:47,640 --> 00:24:54,600
browser and that spot.com is the domain

00:24:51,840 --> 00:24:57,360
for app app engine applications if you

00:24:54,600 --> 00:25:00,330
don't have a Google Apps domain that's

00:24:57,360 --> 00:25:02,070
where your app will live so anytime you

00:25:00,330 --> 00:25:09,570
create in that engine application it

00:25:02,070 --> 00:25:11,520
will have a dark spot com domain so from

00:25:09,570 --> 00:25:15,000
the drop-down you see when you go to

00:25:11,520 --> 00:25:18,120
that website select debconf 2013 GCE

00:25:15,000 --> 00:25:25,820
interactive demo and then enter your

00:25:18,120 --> 00:25:25,820
name and click the start button yeah

00:25:29,059 --> 00:25:35,130
basically I Erebus but this demo is to

00:25:33,179 --> 00:25:38,159
give you access to an instance that you

00:25:35,130 --> 00:25:42,090
can use so we want to give you a quick

00:25:38,159 --> 00:25:44,720
simple access SSH SSH access server to

00:25:42,090 --> 00:25:44,720
the virtual machine

00:25:52,060 --> 00:26:10,910
like restoring is five is the script

00:25:56,480 --> 00:26:16,750
pushes the token in to let me start it's

00:26:10,910 --> 00:26:16,750
so sure

00:26:41,670 --> 00:26:45,750
anybody following along had any luck

00:26:47,430 --> 00:26:52,240
yeah you get a PDF so that's dusty the

00:26:50,440 --> 00:26:54,370
rest of the slides so you can reference

00:26:52,240 --> 00:26:55,690
them locally you can once you have two

00:26:54,370 --> 00:26:57,400
sides you can follow along at your own

00:26:55,690 --> 00:27:00,640
pace or you can just wait for me and

00:26:57,400 --> 00:27:06,670
follow along with me how's it going

00:27:00,640 --> 00:27:10,060
Jimmy okay so I'm going to move on to

00:27:06,670 --> 00:27:11,560
the next slide so one short ere you'll

00:27:10,060 --> 00:27:14,170
find you have a copy of the slides

00:27:11,560 --> 00:27:16,000
you'll even get them viewed in displayed

00:27:14,170 --> 00:27:19,300
inline or you'll get them downloaded as

00:27:16,000 --> 00:27:21,580
a PDF file and at the top of the bar on

00:27:19,300 --> 00:27:23,650
that URL there's a link to participant

00:27:21,580 --> 00:27:25,090
info if you click on that it will give

00:27:23,650 --> 00:27:28,570
you some information about the actual

00:27:25,090 --> 00:27:32,280
virtual machine so that will give you

00:27:28,570 --> 00:27:32,280
information and I'll do it myself

00:27:48,989 --> 00:27:54,009
now gives you information about

00:27:50,769 --> 00:27:55,960
devotional machines so a username very

00:27:54,009 --> 00:27:58,299
very small username and password

00:27:55,960 --> 00:28:00,159
external IP address and an SSH

00:27:58,299 --> 00:28:18,759
connection that you can use so as they

00:28:00,159 --> 00:28:21,340
come into the instance no okay so the

00:28:18,759 --> 00:28:22,809
participant info is there really just so

00:28:21,340 --> 00:28:28,929
you can SSH into the machine really

00:28:22,809 --> 00:28:33,759
easily I was gonna do that here yeah you

00:28:28,929 --> 00:28:35,940
can follow that Pete yeah we'll get back

00:28:33,759 --> 00:28:35,940
to

00:28:52,410 --> 00:28:58,150
so that's what everybody wanted to see

00:28:55,330 --> 00:29:00,220
so you want to ssh into the machine just

00:28:58,150 --> 00:29:00,850
basically copy and paste the last line

00:29:00,220 --> 00:29:05,430
there

00:29:00,850 --> 00:29:05,430
GC code lab whatever version you have

00:29:15,810 --> 00:29:19,660
it's the one you click on participant

00:29:18,070 --> 00:29:24,880
info you need to click on participant in

00:29:19,660 --> 00:29:36,420
voting at your individual up here

00:29:24,880 --> 00:29:36,420
participant info now you got it

00:29:44,660 --> 00:30:17,580
anybody struggling to find a participant

00:29:46,890 --> 00:30:24,770
info did you find it okay so how many of

00:30:17,580 --> 00:30:24,770
you logged into the instance okay right

00:30:31,789 --> 00:30:44,460
so next thing we're going to do is they

00:30:39,240 --> 00:30:46,789
come late in the networks these be

00:30:44,460 --> 00:30:46,789
struggling

00:30:58,990 --> 00:31:02,450
hopefully your connectivity to your

00:31:00,950 --> 00:31:03,890
virtual machine will stay up and running

00:31:02,450 --> 00:31:06,620
but the next thing to do is to actually

00:31:03,890 --> 00:31:09,260
add a scratch disk your assigned virtual

00:31:06,620 --> 00:31:11,660
machine in the home directory to use it

00:31:09,260 --> 00:31:15,290
you logged in as you'll find there's two

00:31:11,660 --> 00:31:18,050
scripts one called add scratch - SH and

00:31:15,290 --> 00:31:19,880
one called get tiled or SH now they're

00:31:18,050 --> 00:31:21,860
basically there just for simplicity just

00:31:19,880 --> 00:31:23,600
simply by the process you should be able

00:31:21,860 --> 00:31:25,850
to cut and paste the information in the

00:31:23,600 --> 00:31:29,210
slides the copy decides that you have to

00:31:25,850 --> 00:31:32,750
actually create the disk and just set

00:31:29,210 --> 00:31:35,660
the permissions on the disk but if not

00:31:32,750 --> 00:31:38,750
just one add script twiddle slash add

00:31:35,660 --> 00:31:41,240
underscore scratch - ice age and that

00:31:38,750 --> 00:31:42,950
will create a new scratch this for you

00:31:41,240 --> 00:31:44,270
what we talked about earlier we

00:31:42,950 --> 00:31:45,860
mentioned we have persistent disk and we

00:31:44,270 --> 00:31:50,480
have scratch disk this will create a new

00:31:45,860 --> 00:31:57,020
scratch this for you as I say if you get

00:31:50,480 --> 00:31:58,430
stuck just when the script anybody

00:31:57,020 --> 00:32:00,110
looking at those slides we should have a

00:31:58,430 --> 00:32:02,090
copy this information is on the slides

00:32:00,110 --> 00:32:06,730
that you have to do that you download it

00:32:02,090 --> 00:32:06,730
or the display:inline

00:32:16,440 --> 00:32:26,229
it's all kind there's some kind of the

00:32:18,579 --> 00:32:27,699
easiest way to do it yeah it's like

00:32:26,229 --> 00:32:29,339
cutting and pasting from the PDF files

00:32:27,699 --> 00:32:39,819
is really difficult it tends to remove

00:32:29,339 --> 00:32:49,690
hyphens and such like so I'm just

00:32:39,819 --> 00:32:53,289
basically running that now so if you

00:32:49,690 --> 00:32:55,359
type in D F minus H you'll see that you

00:32:53,289 --> 00:32:58,179
have quite a large about matter scratch

00:32:55,359 --> 00:33:00,849
disk available to you it's mounted with

00:32:58,179 --> 00:33:03,940
such MNC /scratch 0 and it's about 1.8

00:33:00,849 --> 00:33:05,529
terabytes in size and again the size of

00:33:03,940 --> 00:33:06,489
scratch this available to you depends on

00:33:05,529 --> 00:33:08,639
the size of the instance that you're

00:33:06,489 --> 00:33:08,639
using

00:33:17,140 --> 00:33:22,250
like make step is to actually assign

00:33:19,460 --> 00:33:24,320
yourself part at the universe and to do

00:33:22,250 --> 00:33:26,990
this you're going to pull down something

00:33:24,320 --> 00:33:29,750
from Wales service and from actually

00:33:26,990 --> 00:33:31,640
from Google Cloud storage by connecting

00:33:29,750 --> 00:33:34,700
to a URL on another App Engine

00:33:31,640 --> 00:33:37,490
application can call compute codelab

00:33:34,700 --> 00:33:39,110
dot-com and what that's going to do is

00:33:37,490 --> 00:33:41,899
connect with Google Cloud Storage and

00:33:39,110 --> 00:33:44,840
pull down a bunch of image URLs for you

00:33:41,899 --> 00:33:46,909
and some metadata and once you've done

00:33:44,840 --> 00:33:48,830
that you need to copy some files using

00:33:46,909 --> 00:33:50,799
GSU chill again something they're told

00:33:48,830 --> 00:33:52,039
it's a Jimmy mentioned in his talk

00:33:50,799 --> 00:33:53,870
gsutil

00:33:52,039 --> 00:33:56,929
allows you to interact with Google Cloud

00:33:53,870 --> 00:33:58,700
storage so both of those steps actually

00:33:56,929 --> 00:34:03,409
using Google Cloud storage once pull

00:33:58,700 --> 00:34:06,679
down this this URL of files and ones who

00:34:03,409 --> 00:34:09,169
get the files you need necessarily to

00:34:06,679 --> 00:34:11,119
actually run the next step and again

00:34:09,169 --> 00:34:15,589
there's a shortcut at the bottom there

00:34:11,119 --> 00:34:18,770
tweedle slash get tiled or SH get

00:34:15,589 --> 00:34:20,780
underscore tiled Ice Age and you can run

00:34:18,770 --> 00:34:25,609
that and that will give you the tile

00:34:20,780 --> 00:34:28,149
assignment I'm going to do the same

00:34:25,609 --> 00:34:28,149
thing here

00:34:36,510 --> 00:34:41,230
and obviously we don't care about the

00:34:39,639 --> 00:34:43,179
Wi-Fi connectivity speed at this point

00:34:41,230 --> 00:34:49,470
we're in the cloud so that's pulling it

00:34:43,179 --> 00:34:49,470
down from the cloud on so your instincts

00:34:54,929 --> 00:35:07,359
okay so the next thing you have to make

00:35:05,320 --> 00:35:08,849
sure you're in session in C /scratch for

00:35:07,359 --> 00:35:13,119
the next step

00:35:08,849 --> 00:35:16,090
scratchy oh sorry so make sure you CD -

00:35:13,119 --> 00:35:18,730
Sascha minty / scratch zero for the next

00:35:16,090 --> 00:35:20,520
step and going back to the slides

00:35:18,730 --> 00:35:22,150
hopefully it will connect quickly and

00:35:20,520 --> 00:35:32,670
another time

00:35:22,150 --> 00:35:35,440
yeah sure your IP address that's right

00:35:32,670 --> 00:35:39,550
yes so I did that and in the startup

00:35:35,440 --> 00:35:42,580
script so the startup script actually

00:35:39,550 --> 00:35:43,780
pulls down metadata from this from what

00:35:42,580 --> 00:35:47,470
we talked about earlier so the metadata

00:35:43,780 --> 00:35:49,450
has that external IP address yeah I say

00:35:47,470 --> 00:35:56,130
I'm kind of worried about we're running

00:35:49,450 --> 00:35:56,130
out of time so okay

00:36:00,539 --> 00:36:02,869
yes

00:36:42,770 --> 00:36:46,770
basically I wanted to make it simple

00:36:45,000 --> 00:36:49,230
otherwise you would about to actually

00:36:46,770 --> 00:36:51,690
make a call so if your metadata server

00:36:49,230 --> 00:36:53,880
or to GC util get instance actually get

00:36:51,690 --> 00:36:55,650
your IP address so I tried to make it

00:36:53,880 --> 00:36:56,869
simpler by doing some magic behind the

00:36:55,650 --> 00:37:00,030
things and putting that into the script

00:36:56,869 --> 00:37:01,800
so that makes life a lot simpler but

00:37:00,030 --> 00:37:04,770
then it's used for wrong here to

00:37:01,800 --> 00:37:08,400
actually do that with the curl script

00:37:04,770 --> 00:37:09,630
the cold call and that's what a startup

00:37:08,400 --> 00:37:11,369
script looks like in this case but

00:37:09,630 --> 00:37:15,290
there's various stuff we've done we've

00:37:11,369 --> 00:37:17,730
simplified the login we've actually

00:37:15,290 --> 00:37:19,410
pushed or set up the users we've

00:37:17,730 --> 00:37:21,359
actually set up a user called GC code

00:37:19,410 --> 00:37:25,050
lab xx whatever the version you had

00:37:21,359 --> 00:37:28,589
we've also enabled password access and

00:37:25,050 --> 00:37:30,510
recited associations it's got config to

00:37:28,589 --> 00:37:32,720
make that work but we've done various

00:37:30,510 --> 00:37:35,339
other stuff to set up the environment

00:37:32,720 --> 00:37:37,970
going back to the slides very quickly so

00:37:35,339 --> 00:37:37,970
we can wrap this up

00:37:42,969 --> 00:37:48,380
yes you can use Jason underscore P P to

00:37:46,309 --> 00:37:51,199
actually pretty print that Jason file so

00:37:48,380 --> 00:37:52,849
Jason underscore pp redirects to file

00:37:51,199 --> 00:37:55,269
into that and will pretty print the file

00:37:52,849 --> 00:37:58,549
for you it gives you a list of URLs

00:37:55,269 --> 00:37:59,779
they're all grouped by color and they

00:37:58,549 --> 00:38:01,849
have a relationship with each other

00:37:59,779 --> 00:38:03,529
it's quite a complicated process to

00:38:01,849 --> 00:38:04,699
actually generate the image and at the

00:38:03,529 --> 00:38:08,509
bottom there it's got some metadata

00:38:04,699 --> 00:38:10,160
which includes the name of the the name

00:38:08,509 --> 00:38:13,069
of the file that will be generated I'm

00:38:10,160 --> 00:38:15,789
going to very quickly show you that so

00:38:13,069 --> 00:38:15,789
you can see it

00:38:20,019 --> 00:38:25,609
so Jason underscore P P we were a

00:38:23,449 --> 00:38:28,189
redirect tile assignment on Jason and

00:38:25,609 --> 00:38:31,519
again make sure you're in /mnt /scratch

00:38:28,189 --> 00:38:34,429
zero and that's the list of files that

00:38:31,519 --> 00:38:37,279
it's going to look at and also some

00:38:34,429 --> 00:38:39,979
metadata at the bottom the actual

00:38:37,279 --> 00:38:42,589
coordinates we're looking at and they

00:38:39,979 --> 00:38:44,859
needed a file day will produce 41 dot

00:38:42,589 --> 00:38:44,859
PNG

00:38:51,250 --> 00:38:56,470
some people have obviously gone over

00:38:54,070 --> 00:39:02,680
ahead because 41 is not the first image

00:38:56,470 --> 00:39:04,240
so the next step is to run one of the

00:39:02,680 --> 00:39:07,180
scripts we downloaded earlier called

00:39:04,240 --> 00:39:09,580
meek carbide cloud dot py and that's the

00:39:07,180 --> 00:39:11,740
command line string you had that in the

00:39:09,580 --> 00:39:14,380
slides again you downloaded so Python

00:39:11,740 --> 00:39:16,270
make co-ed cloud doggy why trial

00:39:14,380 --> 00:39:18,040
assignment Jason which is the file you

00:39:16,270 --> 00:39:20,260
downloaded earlier and it's very

00:39:18,040 --> 00:39:22,540
important to include - - max images

00:39:20,260 --> 00:39:25,150
equals 15 otherwise you'll be here until

00:39:22,540 --> 00:39:28,720
this evening when the bar opens the bars

00:39:25,150 --> 00:39:31,210
open already properly so make sure you

00:39:28,720 --> 00:39:32,619
especially if I - - max images equals 15

00:39:31,210 --> 00:39:35,140
otherwise it could take quite a while

00:39:32,619 --> 00:39:37,990
it's going to take 3 or 4 minutes anyway

00:39:35,140 --> 00:39:42,010
but I'm quite prepared to put up with

00:39:37,990 --> 00:39:45,000
that so if you can run that and see how

00:39:42,010 --> 00:39:45,000
you go and I'll do that myself

00:40:12,660 --> 00:40:19,300
- fine and I'll put the slides back the

00:40:17,860 --> 00:40:21,190
basically was that what ice doing is

00:40:19,300 --> 00:40:22,840
actually analyzing a bunch of files and

00:40:21,190 --> 00:40:24,310
it's kind of limiting the number of

00:40:22,840 --> 00:40:25,930
files is going to look at but it's

00:40:24,310 --> 00:40:28,240
looking to put them to find regions that

00:40:25,930 --> 00:40:30,760
match with each other it needs a key

00:40:28,240 --> 00:40:32,580
file for this to work correctly so it

00:40:30,760 --> 00:40:34,930
needs to find a key image that will

00:40:32,580 --> 00:40:36,670
actually be used by the rest of the

00:40:34,930 --> 00:40:40,690
system to actually align already other

00:40:36,670 --> 00:40:42,310
images if you limit to number of 15

00:40:40,690 --> 00:40:46,090
images sometimes you don't always get

00:40:42,310 --> 00:40:47,950
that key image so it breaks so if you do

00:40:46,090 --> 00:40:51,220
run I've actually tried to make sure

00:40:47,950 --> 00:40:54,100
there's at least 37 or so of these

00:40:51,220 --> 00:40:56,680
assignments that will work without going

00:40:54,100 --> 00:40:58,660
beyond 15 images but really you should

00:40:56,680 --> 00:41:01,930
be running without the - - max images

00:40:58,660 --> 00:41:03,220
and that will always work but with 15

00:41:01,930 --> 00:41:05,620
it's a little bit more dubious

00:41:03,220 --> 00:41:09,300
but you should be okay it just takes a

00:41:05,620 --> 00:41:09,300
little bit Wilder a little Wilder run

00:41:12,210 --> 00:41:17,530
and it's downloading all of these twenty

00:41:15,280 --> 00:41:18,610
nine megabytes fits files and fits files

00:41:17,530 --> 00:41:21,820
you're going to look at the fits file

00:41:18,610 --> 00:41:28,450
itself it's in TMP /mnt /scratch zero

00:41:21,820 --> 00:41:30,340
such TMP and it's got some ASCII headers

00:41:28,450 --> 00:41:31,540
that provide information about the

00:41:30,340 --> 00:41:33,220
coordinates and such life of where the

00:41:31,540 --> 00:41:35,970
image came from and it has some binary

00:41:33,220 --> 00:41:35,970
data at the end of it

00:41:42,080 --> 00:41:52,190
how's everyone getting on you're giving

00:41:45,740 --> 00:41:55,670
up yet this is normally part of a larger

00:41:52,190 --> 00:41:57,590
code lab that we do we ran it for the

00:41:55,670 --> 00:41:59,990
first time at Google i/o and we normally

00:41:57,590 --> 00:42:01,820
run it in two hours but so that kind of

00:41:59,990 --> 00:42:03,830
gives you some idea of how long we would

00:42:01,820 --> 00:42:06,700
normally spend on this I was hoping it

00:42:03,830 --> 00:42:06,700
would work pretty quickly

00:42:13,780 --> 00:42:17,780
yeah you will have your own virtual

00:42:15,620 --> 00:42:18,980
machine we have 60 available there are

00:42:17,780 --> 00:42:19,460
60 people in here we could accommodate

00:42:18,980 --> 00:42:20,810
them

00:42:19,460 --> 00:42:25,700
I could have created some more very

00:42:20,810 --> 00:42:26,990
easily but we have 60 available so in

00:42:25,700 --> 00:42:29,510
this case I decided to bump it up to

00:42:26,990 --> 00:42:31,010
four cores so we have a four core one

00:42:29,510 --> 00:42:32,990
just to make sure that it didn't take

00:42:31,010 --> 00:42:34,850
too long to do the processing the

00:42:32,990 --> 00:42:38,480
processing is reasonably intensive in

00:42:34,850 --> 00:42:39,860
terms of CPU usage but obviously the big

00:42:38,480 --> 00:42:41,620
part of the actual process is actually

00:42:39,860 --> 00:42:43,820
downloading the files themselves so

00:42:41,620 --> 00:42:50,740
that's what's taking so long to actually

00:42:43,820 --> 00:42:50,740
run originally we had one core instances

00:42:51,340 --> 00:42:56,480
and I'll just say that if you want to

00:42:54,230 --> 00:42:58,460
carry on now you have the slides if you

00:42:56,480 --> 00:43:00,650
want to carry on and try this afterwards

00:42:58,460 --> 00:43:03,200
finish off if you don't get finished

00:43:00,650 --> 00:43:11,180
during the session then you can do it

00:43:03,200 --> 00:43:14,750
afterwards yep okay so you've got

00:43:11,180 --> 00:43:32,510
questions anybody more questions and

00:43:14,750 --> 00:43:35,120
answers should be the one thing I will

00:43:32,510 --> 00:43:37,640
say about compute engine is that we have

00:43:35,120 --> 00:43:39,590
credit packs for startups so anybody who

00:43:37,640 --> 00:43:42,620
runs a start-up and wants to get started

00:43:39,590 --> 00:43:44,000
with compute engine hopefully by next

00:43:42,620 --> 00:43:46,130
week we will have credit packs that you

00:43:44,000 --> 00:43:47,900
can use we can give you to get up and

00:43:46,130 --> 00:43:49,130
running it's not free to use currently

00:43:47,900 --> 00:43:51,800
in a moment you have to sign up and

00:43:49,130 --> 00:43:52,849
provide your credit card to get started

00:43:51,800 --> 00:43:55,339
but

00:43:52,849 --> 00:43:58,220
as I say next week we should have credit

00:43:55,339 --> 00:44:00,109
up offerings for startups to access

00:43:58,220 --> 00:44:06,099
compute engine we have them all ready

00:44:00,109 --> 00:44:06,099
for App Engine taking too long

00:44:08,349 --> 00:44:11,660
that really depends what you want to do

00:44:10,309 --> 00:44:14,210
if you want to build a cluster of a

00:44:11,660 --> 00:44:16,759
thousand instances then obviously that's

00:44:14,210 --> 00:44:18,650
going to cost you quite a bit again like

00:44:16,759 --> 00:44:19,849
Amazon you only pay for instances that

00:44:18,650 --> 00:44:22,609
are running and four resources are

00:44:19,849 --> 00:44:23,979
actually available and running so it

00:44:22,609 --> 00:44:28,940
really depends on what your use cases

00:44:23,979 --> 00:44:31,099
just where it's play around I don't give

00:44:28,940 --> 00:44:34,210
me any exact examples Jimmy do you think

00:44:31,099 --> 00:44:36,289
can you think of any off your head I

00:44:34,210 --> 00:44:38,499
would say just pull up the pressing web

00:44:36,289 --> 00:44:40,309
page it's actually reasonably cheap I

00:44:38,499 --> 00:44:42,140
don't know the current you know

00:44:40,309 --> 00:44:43,670
comparison to the recently changed

00:44:42,140 --> 00:44:46,099
Amazon prices of a couple of weeks ago

00:44:43,670 --> 00:44:47,479
but it's a it's very affordable to just

00:44:46,099 --> 00:44:56,839
play around certainly at that price

00:44:47,479 --> 00:44:59,420
scale yeah so okay so well thanks guys

00:44:56,839 --> 00:45:02,079
thanks for trying to follow along

00:44:59,420 --> 00:45:04,729
hopefully it would have taken this time

00:45:02,079 --> 00:45:08,269
but we kind of got stuck I expected to

00:45:04,729 --> 00:45:09,950
stay but now I know you can carry on

00:45:08,269 --> 00:45:11,119
using it you can carry on finish if you

00:45:09,950 --> 00:45:12,890
want to I'm not going to shut down the

00:45:11,119 --> 00:45:14,269
virtual machines for until later on this

00:45:12,890 --> 00:45:16,039
afternoon so those virtual machines are

00:45:14,269 --> 00:45:22,059
still available so you can just ssh into

00:45:16,039 --> 00:45:25,059
them and you'll be fine game boy so

00:45:22,059 --> 00:45:25,059
somewhat

00:45:35,540 --> 00:45:39,240
we're not looking again there we go so

00:45:37,830 --> 00:45:41,160
now we got a 15-minute break and then

00:45:39,240 --> 00:45:44,760
lunch so everybody give it up for Mary

00:45:41,160 --> 00:45:47,460
and her great excuse me Mary Mandy and

00:45:44,760 --> 00:45:51,820
her great demonstration here

00:45:47,460 --> 00:45:51,820

YouTube URL: https://www.youtube.com/watch?v=tV_ME8TQESQ


