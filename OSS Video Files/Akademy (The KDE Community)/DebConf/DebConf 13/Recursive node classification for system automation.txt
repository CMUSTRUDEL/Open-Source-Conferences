Title: Recursive node classification for system automation
Publication date: 2017-11-29
Playlist: DebConf 13
Description: 
	by martin f. krafft

At: DebConf13
https://debconf13.debconf.org/
Room: Main talk room
Scheduled start: 2013-08-13 14:30:00
Captions: 
	00:00:01,790 --> 00:00:08,130
okay let's welcome Martin Kraft he will

00:00:05,490 --> 00:00:11,190
talk about recursive inventory

00:00:08,130 --> 00:00:13,610
management and this will be a subject

00:00:11,190 --> 00:00:17,480
that is interesting to all of us who do

00:00:13,610 --> 00:00:20,880
system automation so welcome Martin

00:00:17,480 --> 00:00:24,119
hello is this a good microphone

00:00:20,880 --> 00:00:26,670
excellent yeah I'm here to talk to you

00:00:24,119 --> 00:00:28,769
about recursive inventory management and

00:00:26,670 --> 00:00:30,869
I don't assume that everybody of you

00:00:28,769 --> 00:00:33,090
knows what I mean with that just from

00:00:30,869 --> 00:00:34,950
the title as a matter of fact maybe I

00:00:33,090 --> 00:00:38,399
can say up front before I go into my

00:00:34,950 --> 00:00:42,500
slides that the name recursive in this

00:00:38,399 --> 00:00:46,079
is born out of a very very long night in

00:00:42,500 --> 00:00:47,820
Switzerland actually and I should have

00:00:46,079 --> 00:00:50,280
chosen a better name but I guess it's

00:00:47,820 --> 00:00:52,739
stuck so whenever you see recursive in

00:00:50,280 --> 00:00:56,250
the following couple of slides you can

00:00:52,739 --> 00:00:57,930
think of hierarchical if you want back

00:00:56,250 --> 00:00:59,609
then when I was implementing it I did it

00:00:57,930 --> 00:01:02,910
recursively so that's why I called it

00:00:59,609 --> 00:01:03,989
recursive but we shouldn't expose too

00:01:02,910 --> 00:01:08,369
much of the internal implementation

00:01:03,989 --> 00:01:09,840
designs right anyway I'm gonna be

00:01:08,369 --> 00:01:12,299
talking about configuration management

00:01:09,840 --> 00:01:15,330
and because that is also a name that was

00:01:12,299 --> 00:01:18,990
used for some time for what is known as

00:01:15,330 --> 00:01:20,130
version control I specifically want to

00:01:18,990 --> 00:01:21,750
say that this is about system

00:01:20,130 --> 00:01:23,100
administration so if you Haven version

00:01:21,750 --> 00:01:26,580
control then actually that's not the

00:01:23,100 --> 00:01:29,100
right place configuration management as

00:01:26,580 --> 00:01:31,259
I understand it as most of you will

00:01:29,100 --> 00:01:34,860
understand it I'm sorry Tomas that Phi

00:01:31,259 --> 00:01:37,920
is not on there is something to do with

00:01:34,860 --> 00:01:40,619
one of these or some other tools you

00:01:37,920 --> 00:01:42,750
will have probably seen possibly used

00:01:40,619 --> 00:01:44,820
some of these tools at some point in

00:01:42,750 --> 00:01:48,390
time they are listed here in somewhat

00:01:44,820 --> 00:01:49,020
order of increasing or decreasing age so

00:01:48,390 --> 00:01:51,570
cfengine

00:01:49,020 --> 00:01:53,490
predates pretty much all and one of the

00:01:51,570 --> 00:01:57,719
latest newcomers has been ansible and

00:01:53,490 --> 00:02:00,719
salt and i'm actually going to not be

00:01:57,719 --> 00:02:03,270
talking about cfengine be CFG to and

00:02:00,719 --> 00:02:04,710
cheff but only about puppet salt and

00:02:03,270 --> 00:02:06,299
ansible and actually not even about

00:02:04,710 --> 00:02:09,479
those but I can tell you that what I'm

00:02:06,299 --> 00:02:12,170
about to tell you works with those three

00:02:09,479 --> 00:02:12,170
products

00:02:12,960 --> 00:02:17,380
when I talk about configuration

00:02:15,550 --> 00:02:20,920
management I also mean system automation

00:02:17,380 --> 00:02:23,110
I mean that my assumption is that every

00:02:20,920 --> 00:02:25,630
single system administrator is lazy or

00:02:23,110 --> 00:02:28,450
if they are not they should be and you

00:02:25,630 --> 00:02:31,840
should be able to do something once and

00:02:28,450 --> 00:02:33,880
not have to repeat the same task all the

00:02:31,840 --> 00:02:34,780
time as a matter of fact if you did it

00:02:33,880 --> 00:02:36,130
the second time then you've done

00:02:34,780 --> 00:02:39,700
something wrong that is sort of the

00:02:36,130 --> 00:02:41,170
mantra of system administration and over

00:02:39,700 --> 00:02:43,870
the last couple of years I have noticed

00:02:41,170 --> 00:02:45,190
that there's a very strong divide well

00:02:43,870 --> 00:02:47,200
maybe it's not that strong but it

00:02:45,190 --> 00:02:50,160
certainly divided into two separate

00:02:47,200 --> 00:02:54,640
approaches to system configuration

00:02:50,160 --> 00:02:57,580
management or automation the latest type

00:02:54,640 --> 00:02:59,980
has of course been the cloud and we see

00:02:57,580 --> 00:03:03,580
that this conference is already very

00:02:59,980 --> 00:03:05,500
cloud centric in some ways a lot of the

00:03:03,580 --> 00:03:07,180
talks are about cloud so obviously I had

00:03:05,500 --> 00:03:09,760
to put that onto my slides otherwise it

00:03:07,180 --> 00:03:11,590
would be completely off topic but there

00:03:09,760 --> 00:03:13,540
is also and I beg you all not to forget

00:03:11,590 --> 00:03:17,020
the sort of classical approach to system

00:03:13,540 --> 00:03:18,970
administration if I identify two

00:03:17,020 --> 00:03:20,680
approaches I better go ahead and sort of

00:03:18,970 --> 00:03:22,150
like separate them for you because maybe

00:03:20,680 --> 00:03:23,739
I'm the only one that perceives it that

00:03:22,150 --> 00:03:25,060
way and so I should kind of just want to

00:03:23,739 --> 00:03:28,780
use the opportunity to give you an idea

00:03:25,060 --> 00:03:32,709
of what I mean the cloud is sort of what

00:03:28,780 --> 00:03:35,770
what exists when you have buzzwords that

00:03:32,709 --> 00:03:38,680
could range from unprecedented ease of

00:03:35,770 --> 00:03:41,190
system optimization to orchestration of

00:03:38,680 --> 00:03:44,470
course cloud is all about scalability

00:03:41,190 --> 00:03:46,780
and because you might have I heard an

00:03:44,470 --> 00:03:48,519
example yesterday I used you might know

00:03:46,780 --> 00:03:50,290
that your television ad is about to go

00:03:48,519 --> 00:03:52,780
live so you need to be able to spawn

00:03:50,290 --> 00:03:55,989
very quickly ad hoc provision very

00:03:52,780 --> 00:03:57,190
quickly a thousand new nodes and the one

00:03:55,989 --> 00:03:58,390
thing that you know about all these

00:03:57,190 --> 00:04:00,220
nodes is that they are going to be

00:03:58,390 --> 00:04:02,920
homogeneous they're all going to be

00:04:00,220 --> 00:04:04,810
exactly the same more or less right but

00:04:02,920 --> 00:04:07,450
they are all web servers that are just

00:04:04,810 --> 00:04:09,250
designed to handle the requests by your

00:04:07,450 --> 00:04:12,970
potential customers and generate you

00:04:09,250 --> 00:04:15,220
money system administration classical

00:04:12,970 --> 00:04:17,109
system administration is a lot older

00:04:15,220 --> 00:04:19,810
than this concept of the cloud and

00:04:17,109 --> 00:04:22,060
system administrators are as you all

00:04:19,810 --> 00:04:23,320
know those grumpy people that are

00:04:22,060 --> 00:04:24,550
running around in the university

00:04:23,320 --> 00:04:25,630
building are actually they're never

00:04:24,550 --> 00:04:27,850
running around right there

00:04:25,630 --> 00:04:30,340
early in the morning or leave early in

00:04:27,850 --> 00:04:32,620
whatever you never see them and when you

00:04:30,340 --> 00:04:35,230
go approach them you get a BF bo fh

00:04:32,620 --> 00:04:38,190
excuse usually right when when the

00:04:35,230 --> 00:04:40,480
system doesn't work but fundamentally

00:04:38,190 --> 00:04:43,090
what these system administrators are

00:04:40,480 --> 00:04:45,400
doing are they are maintaining systems

00:04:43,090 --> 00:04:47,740
that have some sort of longevity so

00:04:45,400 --> 00:04:51,130
these systems are installed at one point

00:04:47,740 --> 00:04:52,810
in time and ideally run for a very long

00:04:51,130 --> 00:04:54,790
time until the hardware breaks at which

00:04:52,810 --> 00:04:55,900
point you try to move that exact same

00:04:54,790 --> 00:04:57,640
system because you don't want to

00:04:55,900 --> 00:05:00,700
reconfigure your LDAP and mail server at

00:04:57,640 --> 00:05:02,650
this point after the hardware crash you

00:05:00,700 --> 00:05:04,600
just want to have the same system up so

00:05:02,650 --> 00:05:06,580
you're dealing with longevity across

00:05:04,600 --> 00:05:08,440
heterogeneous systems you have your mail

00:05:06,580 --> 00:05:10,090
servers you have your web service you

00:05:08,440 --> 00:05:11,890
have your computation cluster you have

00:05:10,090 --> 00:05:16,270
whatever you know you know better than I

00:05:11,890 --> 00:05:19,510
do in your use cases the real difference

00:05:16,270 --> 00:05:21,580
between the cloud provisioning and the

00:05:19,510 --> 00:05:24,310
classical system administration is the

00:05:21,580 --> 00:05:26,560
following we use the classical system

00:05:24,310 --> 00:05:32,230
administrators use themed host names

00:05:26,560 --> 00:05:35,950
whereas cloud provisioners use ww0 one

00:05:32,230 --> 00:05:37,660
through nine nine nine so a little bit

00:05:35,950 --> 00:05:40,750
of my mission today is to bring back the

00:05:37,660 --> 00:05:44,710
themed host names I just put that in

00:05:40,750 --> 00:05:47,320
there laziness I already mentioned and I

00:05:44,710 --> 00:05:49,180
did have unprecedented ease on the last

00:05:47,320 --> 00:05:50,650
slide obviously if you want to spawn a

00:05:49,180 --> 00:05:51,190
thousand systems and you pay by the

00:05:50,650 --> 00:05:53,380
minute

00:05:51,190 --> 00:05:55,900
then it should be really easy and quick

00:05:53,380 --> 00:05:58,510
to do laziness is somewhat different

00:05:55,900 --> 00:06:00,220
from that laziness is you don't have a

00:05:58,510 --> 00:06:02,800
thousand systems you have ten but they

00:06:00,220 --> 00:06:04,870
give you nightmares or wake you up at

00:06:02,800 --> 00:06:07,720
night or actually cause you to stop your

00:06:04,870 --> 00:06:09,340
vacation early and all of that would be

00:06:07,720 --> 00:06:10,840
much easier if you could just lazily

00:06:09,340 --> 00:06:12,700
press a button on your smart phone and

00:06:10,840 --> 00:06:15,520
like from the Caribbean islands have it

00:06:12,700 --> 00:06:19,120
all be fixed I'm not promising that

00:06:15,520 --> 00:06:21,370
that's gonna work and there's also the

00:06:19,120 --> 00:06:22,540
concept of orchestration in classical

00:06:21,370 --> 00:06:24,610
system administration I'm just

00:06:22,540 --> 00:06:25,900
mentioning that here because I you know

00:06:24,610 --> 00:06:28,450
I don't want to rule out that we don't

00:06:25,900 --> 00:06:30,820
orchestrate if you have a Nagios

00:06:28,450 --> 00:06:33,250
installation or miuna nor even postfix

00:06:30,820 --> 00:06:35,140
with client certificates you need to

00:06:33,250 --> 00:06:37,540
know about the other nodes on one hold

00:06:35,140 --> 00:06:39,430
node so in some ways you would like to

00:06:37,540 --> 00:06:42,490
make sure that the

00:06:39,430 --> 00:06:45,040
we'll accept mail sent with a certain

00:06:42,490 --> 00:06:47,259
client certificate before you tell that

00:06:45,040 --> 00:06:49,660
client to send mail with that client

00:06:47,259 --> 00:06:51,729
certificate obviously if it's five

00:06:49,660 --> 00:06:53,590
minutes plus or minus and some things

00:06:51,729 --> 00:06:54,850
don't work that's okay for the use case

00:06:53,590 --> 00:06:56,680
I guess you can do something against

00:06:54,850 --> 00:06:58,539
that if you want but we also do

00:06:56,680 --> 00:07:04,120
orchestrate we as in the classical

00:06:58,539 --> 00:07:06,009
system administrators so reap what I'm

00:07:04,120 --> 00:07:08,259
going to be talking about today it comes

00:07:06,009 --> 00:07:10,330
very strongly as you may have noticed

00:07:08,259 --> 00:07:13,570
from my speaking from the perspective of

00:07:10,330 --> 00:07:15,970
the classical system administrator but

00:07:13,570 --> 00:07:17,590
it will potentially if I do a good job

00:07:15,970 --> 00:07:20,530
or if you take the time to look at it

00:07:17,590 --> 00:07:21,910
suit your Klout needs as well so it is

00:07:20,530 --> 00:07:24,100
not something that is exclusive to

00:07:21,910 --> 00:07:25,090
classical system administration it might

00:07:24,100 --> 00:07:26,620
actually be something that

00:07:25,090 --> 00:07:30,370
revolutionizes the way you think about

00:07:26,620 --> 00:07:36,970
and do system administration on your

00:07:30,370 --> 00:07:38,500
cloud I think one of core differences

00:07:36,970 --> 00:07:41,169
between these configuration management

00:07:38,500 --> 00:07:44,710
systems that I've introduced puppet and

00:07:41,169 --> 00:07:46,389
ansible and salt which also relates to

00:07:44,710 --> 00:07:47,919
the distinction between the classical

00:07:46,389 --> 00:07:50,440
system administrator and the cloud

00:07:47,919 --> 00:07:53,139
provisioner I should invade in actually

00:07:50,440 --> 00:07:55,150
and the cloud provisioner is in my

00:07:53,139 --> 00:07:57,580
opinion the one that thinks about system

00:07:55,150 --> 00:08:00,970
admin automated automation in a way of

00:07:57,580 --> 00:08:02,260
targeting configuration at nodes whereas

00:08:00,970 --> 00:08:04,750
I think that the classical system

00:08:02,260 --> 00:08:07,389
administrator thinks about classifying a

00:08:04,750 --> 00:08:09,580
specific host now the distinction

00:08:07,389 --> 00:08:12,820
between those two is not at all clear

00:08:09,580 --> 00:08:14,080
cut and I'm really hoping for your

00:08:12,820 --> 00:08:16,180
patience here and for your understanding

00:08:14,080 --> 00:08:17,440
that you will just let me get by with us

00:08:16,180 --> 00:08:20,440
because I'm not willing to answer

00:08:17,440 --> 00:08:23,280
questions about terminology but let me

00:08:20,440 --> 00:08:25,990
give you examples of what I mean when

00:08:23,280 --> 00:08:27,880
you do cloud provisioning with the tools

00:08:25,990 --> 00:08:29,740
such as salt and ansible these are the

00:08:27,880 --> 00:08:31,659
latest newcomers to the game and they

00:08:29,740 --> 00:08:34,360
are very much targeted at the cloud and

00:08:31,659 --> 00:08:36,659
whereas puppet sort of like existed

00:08:34,360 --> 00:08:39,370
before the cloud came and then try to

00:08:36,659 --> 00:08:42,700
implement cloud like behavior or

00:08:39,370 --> 00:08:44,380
features into its feature set and when

00:08:42,700 --> 00:08:46,720
you when you comment a cloud

00:08:44,380 --> 00:08:48,459
provisioning problem from these tools

00:08:46,720 --> 00:08:50,500
perspectives than what you're doing is

00:08:48,459 --> 00:08:52,460
you're saying my mail servers are

00:08:50,500 --> 00:08:55,580
expected to work

00:08:52,460 --> 00:08:58,840
such-and-such half port 25 open on their

00:08:55,580 --> 00:09:03,530
firewalls for instance and then you say

00:08:58,840 --> 00:09:06,050
this should be applied and obviously you

00:09:03,530 --> 00:09:09,560
have my systems or cloud somewhere I

00:09:06,050 --> 00:09:11,000
should have made that a cloud dammit you

00:09:09,560 --> 00:09:13,760
have you have your machine somewhere out

00:09:11,000 --> 00:09:16,670
there and then you say I

00:09:13,760 --> 00:09:18,890
I will target the configuration that I

00:09:16,670 --> 00:09:24,290
expect from my mail servers to the

00:09:18,890 --> 00:09:28,070
following ipv4 network I will target my

00:09:24,290 --> 00:09:31,100
debian specific configuration to all of

00:09:28,070 --> 00:09:33,740
the nodes that export the fact I am

00:09:31,100 --> 00:09:37,310
Debian or has some sort of debian

00:09:33,740 --> 00:09:39,920
related fact fact just very quickly is

00:09:37,310 --> 00:09:41,540
something that is generally generated on

00:09:39,920 --> 00:09:42,710
the node and then exported back to the

00:09:41,540 --> 00:09:45,080
system so that you have some knowledge

00:09:42,710 --> 00:09:47,570
about what the node is like which system

00:09:45,080 --> 00:09:49,760
is it running which which version what's

00:09:47,570 --> 00:09:51,860
the hostname what's the SSL certificate

00:09:49,760 --> 00:09:54,020
fingerprint etc these are all facts that

00:09:51,860 --> 00:09:56,450
are exported to the central location and

00:09:54,020 --> 00:09:57,680
use there and what we're doing here is

00:09:56,450 --> 00:10:02,870
that we're actually relying on these

00:09:57,680 --> 00:10:04,550
facts to target behavior at nodes or for

00:10:02,870 --> 00:10:08,360
instance if your domain name ends in

00:10:04,550 --> 00:10:10,150
Zurich corporation then you might be you

00:10:08,360 --> 00:10:12,320
might you might have all of the

00:10:10,150 --> 00:10:15,350
configuration that is specific to being

00:10:12,320 --> 00:10:19,970
hosted in Zurich at these nodes that

00:10:15,350 --> 00:10:23,240
fulfill these criteria now I think that

00:10:19,970 --> 00:10:24,680
is backwards maybe that's because I'm

00:10:23,240 --> 00:10:27,560
limited to my classical system

00:10:24,680 --> 00:10:30,110
administration thinking but imagine

00:10:27,560 --> 00:10:32,210
these questions what classes does a

00:10:30,110 --> 00:10:34,120
specific node belong to which behaviors

00:10:32,210 --> 00:10:38,660
does a specific node or is an

00:10:34,120 --> 00:10:40,460
acknowledged spected to have and you can

00:10:38,660 --> 00:10:42,320
only answer that by looking at all of

00:10:40,460 --> 00:10:44,150
the data generated your entire inventory

00:10:42,320 --> 00:10:45,830
and then walking it back so it's it's

00:10:44,150 --> 00:10:47,630
kind of inefficient on the other hand of

00:10:45,830 --> 00:10:49,310
course you will see that the other

00:10:47,630 --> 00:10:52,010
questions that you can easily ask answer

00:10:49,310 --> 00:10:53,660
with the system of targeting nodes are

00:10:52,010 --> 00:10:55,910
not as trivial you answer it with

00:10:53,660 --> 00:11:00,890
reclass so it's really just a opposite

00:10:55,910 --> 00:11:02,990
perspective of going at it but another

00:11:00,890 --> 00:11:05,769
thing that I find very disturbing is

00:11:02,990 --> 00:11:10,420
that the behavior is actually depend

00:11:05,769 --> 00:11:12,759
and on data on the host and while I can

00:11:10,420 --> 00:11:16,839
see a lot of benefit in that because you

00:11:12,759 --> 00:11:20,559
do infrastructure of sorts I still think

00:11:16,839 --> 00:11:22,569
about system administration as lis being

00:11:20,559 --> 00:11:24,279
about keeping an inventory of all the

00:11:22,569 --> 00:11:26,230
stuff that you have and sort of

00:11:24,279 --> 00:11:28,540
centrally defining the behaviors that

00:11:26,230 --> 00:11:31,059
you want from your systems and then

00:11:28,540 --> 00:11:33,160
making sure that the software forces

00:11:31,059 --> 00:11:34,839
those on the systems rather than asking

00:11:33,160 --> 00:11:39,369
the systems first whether this is what

00:11:34,839 --> 00:11:43,809
they want it I think it gives you much

00:11:39,369 --> 00:11:46,119
less space for errors if you can look at

00:11:43,809 --> 00:11:47,829
a central location and know that when

00:11:46,119 --> 00:11:49,209
this is enacted all of the notes are

00:11:47,829 --> 00:11:51,850
going to be the same rather than having

00:11:49,209 --> 00:11:55,660
to worry about data that is exported by

00:11:51,850 --> 00:11:57,220
one of these nodes so how I think about

00:11:55,660 --> 00:12:01,179
it and this is not going to come as a

00:11:57,220 --> 00:12:03,639
surprise and to many of you and this is

00:12:01,179 --> 00:12:05,019
also probably not even that different

00:12:03,639 --> 00:12:07,119
from what I just showed with targeting

00:12:05,019 --> 00:12:10,269
as I said the difference is is not

00:12:07,119 --> 00:12:11,769
clear-cut what I what I think about is

00:12:10,269 --> 00:12:13,240
that when I have an node that's called

00:12:11,769 --> 00:12:16,480
blue dot example.org

00:12:13,240 --> 00:12:19,389
I want to say this node has a certain

00:12:16,480 --> 00:12:21,490
number of classes this node has this

00:12:19,389 --> 00:12:23,369
behavior rather than saying this

00:12:21,490 --> 00:12:26,769
behavior should be targeted at this node

00:12:23,369 --> 00:12:29,079
so I say that this node belongs to the

00:12:26,769 --> 00:12:33,220
classes mail server NTP client for

00:12:29,079 --> 00:12:34,929
instance and host it at Zurich and this

00:12:33,220 --> 00:12:37,389
is very much cfengine

00:12:34,929 --> 00:12:39,160
inspired that's what the first one did

00:12:37,389 --> 00:12:41,709
the first configuration management

00:12:39,160 --> 00:12:43,029
system that I noted and I got to know

00:12:41,709 --> 00:12:44,740
about it through Phi actually and I

00:12:43,029 --> 00:12:47,519
really liked the idea and it just stuck

00:12:44,740 --> 00:12:52,389
I couldn't get rid of it anymore

00:12:47,519 --> 00:12:54,639
um this is this is very much like

00:12:52,389 --> 00:12:55,959
definition of behavior and controlling

00:12:54,639 --> 00:12:57,220
the software the configuration

00:12:55,959 --> 00:12:59,319
management software that you're dealing

00:12:57,220 --> 00:13:01,389
with and I'm not actually going to go

00:12:59,319 --> 00:13:04,449
into that at all today so no puppet no

00:13:01,389 --> 00:13:07,059
salt no ansible specifics here and but

00:13:04,449 --> 00:13:10,480
one of the problems that comes with all

00:13:07,059 --> 00:13:14,559
of these systems is where do I keep my

00:13:10,480 --> 00:13:15,850
data where do i specify the values for

00:13:14,559 --> 00:13:18,339
the parameters that these systems

00:13:15,850 --> 00:13:18,750
exposed because they are not all equal

00:13:18,339 --> 00:13:22,830
they

00:13:18,750 --> 00:13:26,940
are as I showed earlier part of a mostly

00:13:22,830 --> 00:13:30,480
heterogeneous environment I might go

00:13:26,940 --> 00:13:34,010
ahead and say that my ntp clients should

00:13:30,480 --> 00:13:39,030
all just benefit from pooled ntp org and

00:13:34,010 --> 00:13:41,460
specify the server to eat that but then

00:13:39,030 --> 00:13:42,990
for some reason I mean ideally that's a

00:13:41,460 --> 00:13:45,030
distributed system right I might want to

00:13:42,990 --> 00:13:47,750
say that actually when the server is in

00:13:45,030 --> 00:13:50,370
Zurich it should use a different value

00:13:47,750 --> 00:13:51,840
this case only the server's that are in

00:13:50,370 --> 00:13:54,210
Zurich use a different value all the

00:13:51,840 --> 00:14:00,180
others fall back to the default that's

00:13:54,210 --> 00:14:02,210
not rocket science same example here we

00:14:00,180 --> 00:14:05,130
also have a second node called white

00:14:02,210 --> 00:14:07,640
hosted in Munich now let's look at

00:14:05,130 --> 00:14:09,840
puppet let's look at how we do this

00:14:07,640 --> 00:14:11,790
approach with puppet I'm sorry that I

00:14:09,840 --> 00:14:16,170
just noticed that the NTP server is

00:14:11,790 --> 00:14:19,050
actually not 0 dot de dot Pula NTP dot

00:14:16,170 --> 00:14:21,300
org but read at my own infrastructure I

00:14:19,050 --> 00:14:23,850
hope you will forgive me for this and my

00:14:21,300 --> 00:14:25,860
point here is that I want to tell puppet

00:14:23,850 --> 00:14:28,830
that the server at blue should be using

00:14:25,860 --> 00:14:33,630
an NTP should be it and B client that is

00:14:28,830 --> 00:14:35,250
why I include the the NTP class here or

00:14:33,630 --> 00:14:37,050
the module which provides this

00:14:35,250 --> 00:14:38,700
functionality but that it should

00:14:37,050 --> 00:14:41,940
actually not fall back to the default

00:14:38,700 --> 00:14:46,080
but should use red dot example.org as

00:14:41,940 --> 00:14:49,910
the NTP server now if you have five

00:14:46,080 --> 00:14:52,589
systems that's fine if you have 50 it's

00:14:49,910 --> 00:14:54,450
probably still fine if you are not quite

00:14:52,589 --> 00:14:56,790
sold by that concept of laziness that

00:14:54,450 --> 00:14:58,380
eyerly introduced but if you have a

00:14:56,790 --> 00:14:59,760
couple of hundred servers then this is

00:14:58,380 --> 00:15:01,280
not gonna be okay anymore because

00:14:59,760 --> 00:15:04,680
suddenly you will find yourself with a

00:15:01,280 --> 00:15:06,870
site description that has a lot of these

00:15:04,680 --> 00:15:11,490
stanzas and they are just all gonna be

00:15:06,870 --> 00:15:14,210
the same so in puppet you can actually

00:15:11,490 --> 00:15:16,500
factor out some of these behaviors into

00:15:14,210 --> 00:15:18,300
something that is not really a node but

00:15:16,500 --> 00:15:19,910
sort of an include if you want to think

00:15:18,300 --> 00:15:22,650
about it like that

00:15:19,910 --> 00:15:24,330
also programming programmers will

00:15:22,650 --> 00:15:28,860
understand what is meant here by

00:15:24,330 --> 00:15:31,649
inherits now in the common nodes all

00:15:28,860 --> 00:15:34,920
nodes that inherit from this node

00:15:31,649 --> 00:15:37,019
mission there's a default set for the

00:15:34,920 --> 00:15:39,619
NTP server and it includes the NTP class

00:15:37,019 --> 00:15:42,360
and just by the mere fact of inheritance

00:15:39,619 --> 00:15:44,879
blue dot example at work now also

00:15:42,360 --> 00:15:47,790
includes an NTP client configure to use

00:15:44,879 --> 00:15:49,920
that server but blue dot example a

00:15:47,790 --> 00:15:52,619
torque is in Zurich and we want to be

00:15:49,920 --> 00:15:59,819
using the Swiss specific they run better

00:15:52,619 --> 00:16:07,639
you know so I go in look the NTP server

00:15:59,819 --> 00:16:11,160
for blue should be red right ok no anger

00:16:07,639 --> 00:16:16,079
that does not work this unfortunately

00:16:11,160 --> 00:16:19,439
does not work in puppet in addition they

00:16:16,079 --> 00:16:20,369
tuple inheritance so what I mean with

00:16:19,439 --> 00:16:23,699
multiple inheritance

00:16:20,369 --> 00:16:25,110
the programmers might run away now what

00:16:23,699 --> 00:16:27,089
I mean with multiple inheritance is that

00:16:25,110 --> 00:16:28,829
obviously you're not just not all of

00:16:27,089 --> 00:16:30,749
your hosts in Zurich are also ntp

00:16:28,829 --> 00:16:32,939
clients ideally and you don't want to be

00:16:30,749 --> 00:16:35,040
creating a class for every single

00:16:32,939 --> 00:16:37,769
combination of potential parents that

00:16:35,040 --> 00:16:39,629
you have so it's really nice to be able

00:16:37,769 --> 00:16:42,089
to multiply inherit from from different

00:16:39,629 --> 00:16:44,730
behaviors and puppet unfortunately

00:16:42,089 --> 00:16:47,309
doesn't do that in fact puppet actually

00:16:44,730 --> 00:16:50,339
says in their Docs specifically that you

00:16:47,309 --> 00:16:52,589
should not use inheritance so what I

00:16:50,339 --> 00:16:54,269
just showed you this what seems sensible

00:16:52,589 --> 00:16:56,550
to many of us to affect your outcome and

00:16:54,269 --> 00:16:58,529
behavior rather than having it all in

00:16:56,550 --> 00:16:59,809
one place multiply multiply it a

00:16:58,529 --> 00:17:02,610
thousand times

00:16:59,809 --> 00:17:03,959
puppet actually discourages this in the

00:17:02,610 --> 00:17:08,520
documentation now I'm not trying to take

00:17:03,959 --> 00:17:11,520
a stab at puppet here there is the

00:17:08,520 --> 00:17:12,899
puppet was one of the very first tools

00:17:11,520 --> 00:17:15,299
to actually say if you want something

00:17:12,899 --> 00:17:17,610
more complicated than the simple node

00:17:15,299 --> 00:17:22,919
definitions then use this functionality

00:17:17,610 --> 00:17:24,839
that we have over here what I just

00:17:22,919 --> 00:17:25,679
showed in terms of the overriding the

00:17:24,839 --> 00:17:27,240
NTP server

00:17:25,679 --> 00:17:29,010
it does make parameterization

00:17:27,240 --> 00:17:30,929
unnecessarily difficult simply because

00:17:29,010 --> 00:17:32,760
puppet only ever knows one instance of

00:17:30,929 --> 00:17:35,580
the variable NTP server and unless you

00:17:32,760 --> 00:17:39,299
want to go into scoping nightmare you

00:17:35,580 --> 00:17:43,080
are basically stuck with re-implementing

00:17:39,299 --> 00:17:44,580
a lot of the data or multiplying a lot

00:17:43,080 --> 00:17:45,390
of the data and generating a lot of

00:17:44,580 --> 00:17:48,570
redundancy

00:17:45,390 --> 00:17:53,220
as we all know is going to bite you at

00:17:48,570 --> 00:17:55,320
some point in time so let me before I go

00:17:53,220 --> 00:17:56,549
on let me go a little bit into the what

00:17:55,320 --> 00:17:59,370
I consider to be system has been

00:17:56,549 --> 00:18:00,780
optimization principles and a bridged

00:17:59,370 --> 00:18:02,820
version because I don't want to have any

00:18:00,780 --> 00:18:05,070
questions about what I'm leaving out and

00:18:02,820 --> 00:18:07,650
suggestions that this list is incomplete

00:18:05,070 --> 00:18:09,780
I know it is these are the important

00:18:07,650 --> 00:18:11,760
things for me I want to be centrally in

00:18:09,780 --> 00:18:14,760
control of something and I want my data

00:18:11,760 --> 00:18:17,549
to be versioned with versioning control

00:18:14,760 --> 00:18:19,860
system of your choice I need to have

00:18:17,549 --> 00:18:21,990
parametrizations I need to be able to

00:18:19,860 --> 00:18:23,940
say that NTP clients that's a very

00:18:21,990 --> 00:18:26,340
simple example right but think of

00:18:23,940 --> 00:18:28,220
postfix it's like it comes with 500

00:18:26,340 --> 00:18:30,179
parameter value configuration

00:18:28,220 --> 00:18:31,830
possibilities and some of those are

00:18:30,179 --> 00:18:34,080
actually sensible to parameterize

00:18:31,830 --> 00:18:36,900
because they are going to differ between

00:18:34,080 --> 00:18:38,730
the code and I have seen too many

00:18:36,900 --> 00:18:40,440
installations of puppet where you

00:18:38,730 --> 00:18:42,570
actually have in the module code in the

00:18:40,440 --> 00:18:45,750
one that is responsible for installing

00:18:42,570 --> 00:18:48,090
your ntp server or postfix special

00:18:45,750 --> 00:18:51,000
casing based on the hostname and that

00:18:48,090 --> 00:18:53,460
just hurts not right there because it

00:18:51,000 --> 00:18:55,230
makes it work but at the next upgrade or

00:18:53,460 --> 00:18:56,700
when something changes and suddenly you

00:18:55,230 --> 00:18:59,400
have all this redundancy in the code

00:18:56,700 --> 00:19:02,880
that is going to come back and bite you

00:18:59,400 --> 00:19:05,669
I think that system administration

00:19:02,880 --> 00:19:07,620
should be about no redundancy do it once

00:19:05,669 --> 00:19:09,330
through it in one place only and be able

00:19:07,620 --> 00:19:11,640
to always find that place where you did

00:19:09,330 --> 00:19:13,580
it very easily without thinking too much

00:19:11,640 --> 00:19:18,419
about it at 3 o'clock in the morning

00:19:13,580 --> 00:19:20,820
after being woken um I think that this

00:19:18,419 --> 00:19:23,040
idea of using information from the node

00:19:20,820 --> 00:19:25,049
such as the IP address or the free

00:19:23,040 --> 00:19:27,540
memory or the SSL fingerprint is

00:19:25,049 --> 00:19:32,250
actually very good but I don't think

00:19:27,540 --> 00:19:34,679
that it ever should be used to steer the

00:19:32,250 --> 00:19:39,000
behavior that is going to be applied to

00:19:34,679 --> 00:19:40,620
a node which is very difficult to say

00:19:39,000 --> 00:19:42,480
because obviously I want to describe my

00:19:40,620 --> 00:19:45,360
infrastructure independent of having to

00:19:42,480 --> 00:19:47,760
know which one is a fedora serve and

00:19:45,360 --> 00:19:49,860
which one there's a debian server and if

00:19:47,760 --> 00:19:52,520
I you know if I need to kind of ask

00:19:49,860 --> 00:19:55,290
those systems but that is at least the

00:19:52,520 --> 00:19:58,080
fundamental motivation between behind

00:19:55,290 --> 00:19:59,389
this this functionality but what I'm

00:19:58,080 --> 00:20:01,999
about to show you

00:19:59,389 --> 00:20:03,200
is a system by which you actually take

00:20:01,999 --> 00:20:04,879
it away from puppet

00:20:03,200 --> 00:20:06,349
you don't say puppet you know how to

00:20:04,879 --> 00:20:08,089
deal with all the different

00:20:06,349 --> 00:20:09,289
distributions I just have to tell you to

00:20:08,089 --> 00:20:12,649
install a package and you'll do the

00:20:09,289 --> 00:20:14,779
right thing my approach is to say I know

00:20:12,649 --> 00:20:16,190
that this host is a debian node and I'm

00:20:14,779 --> 00:20:19,039
going to treat it as such

00:20:16,190 --> 00:20:21,489
and if that ever changes I think I have

00:20:19,039 --> 00:20:24,889
a different problem

00:20:21,489 --> 00:20:27,109
so reclass as I said a misnomer of sorts

00:20:24,889 --> 00:20:30,499
you can think about it in terms of

00:20:27,109 --> 00:20:32,599
hierarchy but the name Keira has been

00:20:30,499 --> 00:20:36,139
taken up before I realized that I miss

00:20:32,599 --> 00:20:38,659
named mine it stands for a recursive

00:20:36,139 --> 00:20:40,969
external node classifier external node

00:20:38,659 --> 00:20:42,109
classifier is a term that comes from

00:20:40,969 --> 00:20:43,879
those configuration management

00:20:42,109 --> 00:20:46,729
software's and it basically just means

00:20:43,879 --> 00:20:49,879
instead of requiring you to specify your

00:20:46,729 --> 00:20:52,579
infrastructure in node groups or in node

00:20:49,879 --> 00:20:56,299
stands us as I've just shown in puppet

00:20:52,579 --> 00:20:59,629
and you have an external data source and

00:20:56,299 --> 00:21:02,029
classifier while I try to make a

00:20:59,629 --> 00:21:08,209
statement about my use of classes in

00:21:02,029 --> 00:21:10,909
this the CMS uses reclass but asking it

00:21:08,209 --> 00:21:12,259
questions such as what applications what

00:21:10,909 --> 00:21:15,349
modules should be applied what

00:21:12,259 --> 00:21:16,759
applications should a role have how does

00:21:15,349 --> 00:21:19,190
this know differ from all the other

00:21:16,759 --> 00:21:22,969
nodes that have the same application

00:21:19,190 --> 00:21:24,859
which is parameters and which nodes

00:21:22,969 --> 00:21:26,539
belong to a group because essentially I

00:21:24,859 --> 00:21:28,339
want to be talking to groups of nodes

00:21:26,539 --> 00:21:33,169
and not just individual nodes and not

00:21:28,339 --> 00:21:36,919
always only to all of them at once for

00:21:33,169 --> 00:21:39,919
the system administrator it will

00:21:36,919 --> 00:21:41,509
obviously as all of these tools to allow

00:21:39,919 --> 00:21:44,389
you to deploy and manage site-wide

00:21:41,509 --> 00:21:46,429
configuration changes it will allow you

00:21:44,389 --> 00:21:49,309
to say things like upgrade all the nodes

00:21:46,429 --> 00:21:52,219
that are attacked with disable update

00:21:49,309 --> 00:21:54,409
the message of the day in Zurich because

00:21:52,219 --> 00:21:55,909
of a power outage and fetch logs from

00:21:54,409 --> 00:21:58,099
all of the hosts tack mail server

00:21:55,909 --> 00:21:59,570
because the BND or whoever secret

00:21:58,099 --> 00:22:03,079
service has actually knocked on your

00:21:59,570 --> 00:22:04,729
door I'm important for you to realize

00:22:03,079 --> 00:22:06,679
before I dive into the details of

00:22:04,729 --> 00:22:08,779
reclass is that reclass just assembles

00:22:06,679 --> 00:22:10,609
and provides the data it doesn't do any

00:22:08,779 --> 00:22:11,239
changes it doesn't your hosts don't even

00:22:10,609 --> 00:22:13,280
know about it

00:22:11,239 --> 00:22:15,470
it is actually just

00:22:13,280 --> 00:22:19,310
one abstraction layer on top of all the

00:22:15,470 --> 00:22:21,920
configuration management systems osgood

00:22:19,310 --> 00:22:25,160
data and it is a single data source

00:22:21,920 --> 00:22:27,290
which means that if you use it with one

00:22:25,160 --> 00:22:29,480
system you can use it with other systems

00:22:27,290 --> 00:22:31,430
there are adapters that interface

00:22:29,480 --> 00:22:34,940
between these different systems and

00:22:31,430 --> 00:22:36,860
reclass for instance motive invocation

00:22:34,940 --> 00:22:39,020
and output basically it's an API

00:22:36,860 --> 00:22:41,090
definition of sorts system

00:22:39,020 --> 00:22:44,690
administrators specific API definition

00:22:41,090 --> 00:22:48,230
by which I mean we call programs and

00:22:44,690 --> 00:22:50,480
then parse output the adapters that are

00:22:48,230 --> 00:22:52,940
provided puppet which is actually not

00:22:50,480 --> 00:22:53,390
yet provided but I get into that in a

00:22:52,940 --> 00:22:56,480
second

00:22:53,390 --> 00:22:57,800
salt and ansible as I said earlier so if

00:22:56,480 --> 00:22:59,600
you're a user of any of these and you

00:22:57,800 --> 00:23:01,670
think that you might want to use a

00:22:59,600 --> 00:23:04,460
different one this is where the slide

00:23:01,670 --> 00:23:07,550
about remote execution and configure it

00:23:04,460 --> 00:23:08,720
I'm Sun for instance salt and ansible

00:23:07,550 --> 00:23:10,400
they work very well together

00:23:08,720 --> 00:23:12,440
I mean ansible is very great at remote

00:23:10,400 --> 00:23:14,060
execution and it's not so great at

00:23:12,440 --> 00:23:16,880
configuration management where salt is

00:23:14,060 --> 00:23:20,380
not so great at external execution and

00:23:16,880 --> 00:23:23,660
or remote execution and somewhat better

00:23:20,380 --> 00:23:24,890
at configuration management the

00:23:23,660 --> 00:23:27,800
important point is you can use both of

00:23:24,890 --> 00:23:31,610
them and you keep all of your relevant

00:23:27,800 --> 00:23:33,350
inventory data in reclass and those

00:23:31,610 --> 00:23:37,940
tools just get the data out of reclass

00:23:33,350 --> 00:23:39,800
and do what you ask them to do so

00:23:37,940 --> 00:23:42,640
puppet why is it not actually in puppet

00:23:39,800 --> 00:23:44,810
it was originally written for puppet

00:23:42,640 --> 00:23:47,690
because puppet didn't do what I wanted

00:23:44,810 --> 00:23:49,310
and then I puppet really didn't do what

00:23:47,690 --> 00:23:50,990
I wanted and I ragequit puppet and I had

00:23:49,310 --> 00:23:52,940
removed it that was the best thing ever

00:23:50,990 --> 00:23:55,280
tell the new configuration management

00:23:52,940 --> 00:23:56,900
system to just purge puppet it's the

00:23:55,280 --> 00:23:59,480
first thing you do get rid of your

00:23:56,900 --> 00:24:03,500
predecessor it's good feeling all these

00:23:59,480 --> 00:24:07,280
ruby packages and so I rewrote reclass

00:24:03,500 --> 00:24:09,440
since I ditched puppet and I wrote it

00:24:07,280 --> 00:24:10,970
for ansible and salt which is what I'm

00:24:09,440 --> 00:24:13,610
using at the moment and I could really

00:24:10,970 --> 00:24:15,830
not be bothered to re-implement it now -

00:24:13,610 --> 00:24:18,190
all the puppet users who are wanting to

00:24:15,830 --> 00:24:20,330
use reclass who are interested by this

00:24:18,190 --> 00:24:21,470
they are a couple I'm not trying to

00:24:20,330 --> 00:24:22,880
scare your way there are a couple of

00:24:21,470 --> 00:24:24,080
ways to do it either you can sit down

00:24:22,880 --> 00:24:25,490
I'm sure you'll have it done in an hour

00:24:24,080 --> 00:24:27,700
or you buy me a beer and I'll do it for

00:24:25,490 --> 00:24:34,120
you

00:24:27,700 --> 00:24:38,179
it's trivial salt who have you uses salt

00:24:34,120 --> 00:24:40,100
that's almost a representative sample it

00:24:38,179 --> 00:24:42,499
provides top and pillar data for salt it

00:24:40,100 --> 00:24:44,990
has been actually integrated as assault

00:24:42,499 --> 00:24:46,850
not reclass itself but the adapter for

00:24:44,990 --> 00:24:48,440
reclass has been integrated in salt

00:24:46,850 --> 00:24:50,779
since server 16 which is not yet in

00:24:48,440 --> 00:24:53,809
Debian and is in unstable but not in

00:24:50,779 --> 00:24:55,820
backports or stable node groups if

00:24:53,809 --> 00:24:58,820
you're interested in if you if you're

00:24:55,820 --> 00:25:00,799
would like to completely get rid of the

00:24:58,820 --> 00:25:03,559
top data in salt then we need note

00:25:00,799 --> 00:25:07,960
groups and so ask me if you want to help

00:25:03,559 --> 00:25:10,850
here ansible who have you uses ansible

00:25:07,960 --> 00:25:14,149
that's an equally big representative

00:25:10,850 --> 00:25:15,649
sample size it provides inventory and

00:25:14,149 --> 00:25:17,240
note information it is actually

00:25:15,649 --> 00:25:18,980
implemented as an external script

00:25:17,240 --> 00:25:21,740
unfortunately it does not support this

00:25:18,980 --> 00:25:24,399
really new feature of batch calls but

00:25:21,740 --> 00:25:27,259
enough of this boring stuff right I

00:25:24,399 --> 00:25:29,539
think that parametrizations to system

00:25:27,259 --> 00:25:32,419
administration is key if you manage to

00:25:29,539 --> 00:25:33,980
somehow remove all of the salient bits

00:25:32,419 --> 00:25:37,070
of information that differ between your

00:25:33,980 --> 00:25:39,230
nodes in your infrastructure and factor

00:25:37,070 --> 00:25:40,639
them out keep them in reclass ideally

00:25:39,230 --> 00:25:43,759
then you're going to have a much easier

00:25:40,639 --> 00:25:45,499
time switching hosts around or doing

00:25:43,759 --> 00:25:47,149
this and that or switching configuration

00:25:45,499 --> 00:25:50,450
management systems around because all

00:25:47,149 --> 00:25:53,090
your data is independent of that of

00:25:50,450 --> 00:25:56,470
course we should only do the sensitive

00:25:53,090 --> 00:25:59,029
approach don't special case please

00:25:56,470 --> 00:26:01,490
reclass even allows you to keep your

00:25:59,029 --> 00:26:04,929
parameters modular so you don't have to

00:26:01,490 --> 00:26:07,220
in reclass duplicate information and

00:26:04,929 --> 00:26:09,619
ideally non redundant lis define your

00:26:07,220 --> 00:26:12,259
data in one location so let's look at

00:26:09,619 --> 00:26:13,970
what it's like yamo is probably known to

00:26:12,259 --> 00:26:15,289
everyone here and if not then I trust

00:26:13,970 --> 00:26:18,169
that you will immediately understand

00:26:15,289 --> 00:26:20,149
this here's the definition abridged

00:26:18,169 --> 00:26:22,909
definition of blue which you've already

00:26:20,149 --> 00:26:25,820
met it is a postfix node so it has an

00:26:22,909 --> 00:26:28,070
application of postfix defined and it is

00:26:25,820 --> 00:26:32,090
an NTP client and it has a server

00:26:28,070 --> 00:26:34,970
defined which is the canonical default

00:26:32,090 --> 00:26:37,309
server what this means is that it's

00:26:34,970 --> 00:26:38,690
independent what you see here is

00:26:37,309 --> 00:26:40,490
independent from what your configuration

00:26:38,690 --> 00:26:42,559
management system ends up doing

00:26:40,490 --> 00:26:44,210
locations might be called modules they

00:26:42,559 --> 00:26:46,040
might be called states and solved for

00:26:44,210 --> 00:26:47,390
instance or they might be called I

00:26:46,040 --> 00:26:49,760
forget what it's called an answer ball

00:26:47,390 --> 00:26:51,140
doesn't matter and but you can

00:26:49,760 --> 00:26:53,750
understand that this is actually going

00:26:51,140 --> 00:26:55,370
to translate into a house that has

00:26:53,750 --> 00:26:57,110
postfix installed and a host that has

00:26:55,370 --> 00:27:03,290
the NTP client config installed and

00:26:57,110 --> 00:27:07,070
configured to be this value here but

00:27:03,290 --> 00:27:09,290
this is not recursive what we have in

00:27:07,070 --> 00:27:13,429
reclass is basically two directories we

00:27:09,290 --> 00:27:15,350
have Yama files for nodes in this

00:27:13,429 --> 00:27:17,150
directory and then also Yama files

00:27:15,350 --> 00:27:20,929
defining classes in another directory

00:27:17,150 --> 00:27:23,210
and the recursive part is that nodes and

00:27:20,929 --> 00:27:27,110
classes may specify other classes to

00:27:23,210 --> 00:27:29,179
inherit from as many as you want you can

00:27:27,110 --> 00:27:32,660
think of these classes as tags I very

00:27:29,179 --> 00:27:34,010
often do because you might want to

00:27:32,660 --> 00:27:36,620
address all your systems that have

00:27:34,010 --> 00:27:38,890
postfix installed so just simply talk to

00:27:36,620 --> 00:27:42,320
all the nodes in the class postfix and

00:27:38,890 --> 00:27:45,260
it does smart deep merging on returned

00:27:42,320 --> 00:27:46,400
from a recursive descent walk I had to

00:27:45,260 --> 00:27:49,160
show off a little bit that I didn't

00:27:46,400 --> 00:27:51,530
computer science do anything by which I

00:27:49,160 --> 00:27:54,650
mean that obviously there's going to be

00:27:51,530 --> 00:27:56,600
some data replacements going on and this

00:27:54,650 --> 00:27:59,330
is implemented in Python and also llamo

00:27:56,600 --> 00:28:03,590
has a merging feature but when you have

00:27:59,330 --> 00:28:05,420
a set of values defined on one host and

00:28:03,590 --> 00:28:07,100
the set of values on another host and

00:28:05,420 --> 00:28:09,380
they all happen to be kept inside a

00:28:07,100 --> 00:28:10,990
dictionary inside of a hash then

00:28:09,380 --> 00:28:14,690
obviously you don't want to just replace

00:28:10,990 --> 00:28:16,940
the existing hash with a new hash and

00:28:14,690 --> 00:28:18,170
forget all of your existing information

00:28:16,940 --> 00:28:20,480
but you want to merge the two

00:28:18,170 --> 00:28:21,860
dictionaries and the same exists for

00:28:20,480 --> 00:28:26,350
lists and the same exists for some

00:28:21,860 --> 00:28:26,350
special cases of scalars yeah

00:28:28,379 --> 00:28:33,429
what about order for off the text very

00:28:31,749 --> 00:28:37,570
good question have pretty slides

00:28:33,429 --> 00:28:39,669
prepared for that but let me first I'll

00:28:37,570 --> 00:28:42,759
show how the next step would be so

00:28:39,669 --> 00:28:45,099
here's blue and we have a class down

00:28:42,759 --> 00:28:46,690
there called common and we now have NTP

00:28:45,099 --> 00:28:48,669
defined for all nodes so it's in the

00:28:46,690 --> 00:28:49,570
common class and other than that I

00:28:48,669 --> 00:28:51,129
changed

00:28:49,570 --> 00:28:53,109
oh yeah it's now classes mail server not

00:28:51,129 --> 00:28:55,389
applications postfix anymore but I'm

00:28:53,109 --> 00:28:56,739
sure you can see the direct relation

00:28:55,389 --> 00:29:00,999
between what I just showed and what this

00:28:56,739 --> 00:29:03,190
is now and obviously what you would

00:29:00,999 --> 00:29:05,679
expect this is the value that gets

00:29:03,190 --> 00:29:11,440
installed as the NTP client on the blue

00:29:05,679 --> 00:29:14,679
host in general and this is a very very

00:29:11,440 --> 00:29:16,209
important baseline assumption that you

00:29:14,679 --> 00:29:18,339
can rely on in reclass but that you'd

00:29:16,209 --> 00:29:19,839
also need to understand when you have

00:29:18,339 --> 00:29:23,169
something that is more specific that

00:29:19,839 --> 00:29:25,690
that talks about less nodes then it

00:29:23,169 --> 00:29:27,969
overrides the data that you specify in a

00:29:25,690 --> 00:29:30,029
more specific less specific case for

00:29:27,969 --> 00:29:32,919
instance all your Debian add stable

00:29:30,029 --> 00:29:34,450
nodes will be able to override the

00:29:32,919 --> 00:29:38,499
parameters that were defined in the

00:29:34,450 --> 00:29:44,739
Debian common class I hope that makes

00:29:38,499 --> 00:29:50,259
sense so in this case now to get to your

00:29:44,739 --> 00:29:52,419
question about the ordering we have a

00:29:50,259 --> 00:29:56,109
new class here hosted at Zurich and it

00:29:52,419 --> 00:29:58,809
defines the NTP client or server to be

00:29:56,109 --> 00:30:02,019
the Swiss specific one um but we also

00:29:58,809 --> 00:30:03,849
know that common this class up here

00:30:02,019 --> 00:30:05,829
already includes the NTP server and

00:30:03,849 --> 00:30:07,450
already defines the default and as a

00:30:05,829 --> 00:30:10,570
matter of fact we might have multiple of

00:30:07,450 --> 00:30:12,729
those but through this hosted at Zurich

00:30:10,570 --> 00:30:16,829
simply because the class appears later

00:30:12,729 --> 00:30:16,829
in this list it gets to override it

00:30:17,399 --> 00:30:22,179
there's a well defined order even if you

00:30:20,200 --> 00:30:24,459
don't want to worry too much about this

00:30:22,179 --> 00:30:25,779
because all you have to do for instance

00:30:24,459 --> 00:30:28,359
here let's change to a different program

00:30:25,779 --> 00:30:32,489
let's say that in general I want my SSH

00:30:28,359 --> 00:30:32,489
service to have no root log and allowed

00:30:33,389 --> 00:30:38,229
what about the backup client that needs

00:30:35,889 --> 00:30:39,700
to allow root login or you can find

00:30:38,229 --> 00:30:41,740
other solutions for it sure but what

00:30:39,700 --> 00:30:43,720
this is one of the ways to do it

00:30:41,740 --> 00:30:45,820
now you define a class backup client and

00:30:43,720 --> 00:30:47,470
you set in it you override in it permit

00:30:45,820 --> 00:30:49,179
route login with without password and

00:30:47,470 --> 00:30:52,330
because the backup client comes after

00:30:49,179 --> 00:30:53,740
the SSH server expected behavior but

00:30:52,330 --> 00:30:55,570
this might not be enough for you so all

00:30:53,740 --> 00:30:57,370
you have to do now is that if my backup

00:30:55,570 --> 00:30:59,830
client actually relies on SSH for

00:30:57,370 --> 00:31:01,840
transferred then depend on the classes

00:30:59,830 --> 00:31:05,500
on the classify Isis age server which

00:31:01,840 --> 00:31:09,250
will now cause when when the backup

00:31:05,500 --> 00:31:12,010
client is hit to walk through the data

00:31:09,250 --> 00:31:13,660
structure and do everything that is

00:31:12,010 --> 00:31:16,570
necessary including the merging for the

00:31:13,660 --> 00:31:18,730
SSH server unless it has already done

00:31:16,570 --> 00:31:20,410
that right in this case it would just

00:31:18,730 --> 00:31:22,510
simply say I've already seen the SSH

00:31:20,410 --> 00:31:23,920
server I don't need to do it again it

00:31:22,510 --> 00:31:26,470
would actually be bad if I did it again

00:31:23,920 --> 00:31:30,100
right no it's only on first occurrence

00:31:26,470 --> 00:31:32,140
and then there is also something called

00:31:30,100 --> 00:31:33,820
parameter interpolation and then

00:31:32,140 --> 00:31:35,530
actually wrecked my brain and really

00:31:33,820 --> 00:31:38,920
make me question whether I am a CS

00:31:35,530 --> 00:31:40,210
student because inside these this entire

00:31:38,920 --> 00:31:44,110
data structure that is being created

00:31:40,210 --> 00:31:47,740
when you merge reclass data up the tree

00:31:44,110 --> 00:31:49,809
or down the tree should I say you now

00:31:47,740 --> 00:31:51,429
can in reclass reference any other key

00:31:49,809 --> 00:31:53,620
so in this case for instance I might

00:31:51,429 --> 00:31:56,470
want to have message that is a reference

00:31:53,620 --> 00:32:00,100
to Floyd in my message of the day and

00:31:56,470 --> 00:32:02,950
then in diamond one of the hosts and my

00:32:00,100 --> 00:32:04,929
infrastructure I simply include a little

00:32:02,950 --> 00:32:07,210
message and that gets automatically

00:32:04,929 --> 00:32:08,620
merged as well and this is looks a

00:32:07,210 --> 00:32:10,330
little bit trivial a lot of the other

00:32:08,620 --> 00:32:12,070
configuration management systems do it

00:32:10,330 --> 00:32:14,080
themselves already but then it's either

00:32:12,070 --> 00:32:15,730
single pass so if you have two

00:32:14,080 --> 00:32:17,950
references then you're good stuck with a

00:32:15,730 --> 00:32:19,840
with another reference or it converts

00:32:17,950 --> 00:32:21,370
everything to strings which is not

00:32:19,840 --> 00:32:24,900
necessarily something that you want you

00:32:21,370 --> 00:32:27,760
might want to have a list after all

00:32:24,900 --> 00:32:29,800
so future work I'm almost at the end of

00:32:27,760 --> 00:32:32,080
this I need to package three class I

00:32:29,800 --> 00:32:33,429
feel really stupid I come to Def Con to

00:32:32,080 --> 00:32:35,530
give a talk about reclass and it's not

00:32:33,429 --> 00:32:37,420
actually in the archive but that should

00:32:35,530 --> 00:32:39,400
not be a problem it's a Python module

00:32:37,420 --> 00:32:41,320
and you can very easily pull it from get

00:32:39,400 --> 00:32:43,690
at the moment and install it with easy

00:32:41,320 --> 00:32:46,600
install but I'll try to work on the

00:32:43,690 --> 00:32:48,790
packaging this week as well um I was

00:32:46,600 --> 00:32:50,050
thinking and also during DEFCON you

00:32:48,790 --> 00:32:52,630
could actually integrate this with

00:32:50,050 --> 00:32:54,700
proceeding and di so that you could

00:32:52,630 --> 00:32:55,539
provide your data even before

00:32:54,700 --> 00:32:57,700
installation

00:32:55,539 --> 00:32:58,929
have the same data reused later on when

00:32:57,700 --> 00:33:02,619
you are done with installation and you

00:32:58,929 --> 00:33:05,830
pass over to configuration management in

00:33:02,619 --> 00:33:09,009
terms of cloud you if you have your name

00:33:05,830 --> 00:33:11,109
sir if you have your service name ww0 0

00:33:09,009 --> 00:33:12,850
1 through 999 you don't really want to

00:33:11,109 --> 00:33:15,279
create a thousand identical Yamla files

00:33:12,850 --> 00:33:16,929
that all inherit from the same class so

00:33:15,279 --> 00:33:18,489
I'm thinking there should be some sort

00:33:16,929 --> 00:33:22,090
of policy classification where you can

00:33:18,489 --> 00:33:25,119
say that all of the nodes that basically

00:33:22,090 --> 00:33:27,700
wild cards on the node name that should

00:33:25,119 --> 00:33:31,809
be implemented membership lists that is

00:33:27,700 --> 00:33:33,429
the concept of postfix and client

00:33:31,809 --> 00:33:35,799
certificates what I mentioned earlier or

00:33:33,429 --> 00:33:37,720
that you want your Nagios clients to be

00:33:35,799 --> 00:33:39,609
also monitored by the Nagios server a

00:33:37,720 --> 00:33:42,399
lot of the configuration management

00:33:39,609 --> 00:33:44,830
systems address that by having some sort

00:33:42,399 --> 00:33:46,779
of wacky communication between nodes or

00:33:44,830 --> 00:33:49,169
a central data collection and I called

00:33:46,779 --> 00:33:52,659
in puppet for instance store conflicts

00:33:49,169 --> 00:33:54,759
which I think does not belong there even

00:33:52,659 --> 00:33:57,429
though I agree it is nice to think about

00:33:54,759 --> 00:33:59,470
that Nagi was only starting to monitor a

00:33:57,429 --> 00:34:03,580
certain code as soon as that node has

00:33:59,470 --> 00:34:06,940
actually started the client package yeah

00:34:03,580 --> 00:34:08,950
sure but if 15 minutes later through

00:34:06,940 --> 00:34:11,470
then when next time the configuration

00:34:08,950 --> 00:34:14,079
management system runs I will know that

00:34:11,470 --> 00:34:16,329
now definitely all of my nodes are in

00:34:14,079 --> 00:34:20,049
the same state I can just statically

00:34:16,329 --> 00:34:21,250
tell the Nagios server about all of the

00:34:20,049 --> 00:34:24,429
clients but obviously you don't want to

00:34:21,250 --> 00:34:26,619
have any redundancy in the data set so

00:34:24,429 --> 00:34:29,079
somehow reclass needs to figure out

00:34:26,619 --> 00:34:31,179
membership lists of classes and be able

00:34:29,079 --> 00:34:33,609
to pass them on as parameters haven't

00:34:31,179 --> 00:34:35,679
figured that out yet other data sources

00:34:33,609 --> 00:34:38,349
potentially in terms of performance Yama

00:34:35,679 --> 00:34:41,079
files could become a problem they are

00:34:38,349 --> 00:34:42,369
after all opened and read and closed for

00:34:41,079 --> 00:34:44,169
every single run every class at the

00:34:42,369 --> 00:34:45,429
moment you could put this into a

00:34:44,169 --> 00:34:47,859
database that's actually already a

00:34:45,429 --> 00:34:49,569
plugin infrastructure in place better

00:34:47,859 --> 00:34:52,149
unit testing without any philosophical

00:34:49,569 --> 00:34:53,679
debates and your idea here if you're

00:34:52,149 --> 00:34:55,899
interested by what I just said and you

00:34:53,679 --> 00:34:58,599
have some usage ideas then I'd be very

00:34:55,899 --> 00:35:00,730
very glad to hear them and with that I

00:34:58,599 --> 00:35:02,900
end my talk and thank you for the

00:35:00,730 --> 00:35:10,890
attention and I'm open to questions

00:35:02,900 --> 00:35:15,570
[Applause]

00:35:10,890 --> 00:35:18,339
can you move back I think three slices

00:35:15,570 --> 00:35:22,750
there was we're way I said there's a

00:35:18,339 --> 00:35:26,230
parameter and then yeah this one down

00:35:22,750 --> 00:35:28,930
there if you add classes ssh server is

00:35:26,230 --> 00:35:33,070
it important that classes is written

00:35:28,930 --> 00:35:35,020
after parameters no Yama is basically

00:35:33,070 --> 00:35:37,180
very compatible with python and all this

00:35:35,020 --> 00:35:39,670
causes this is gonna be read into a

00:35:37,180 --> 00:35:42,790
python dict and the dicta son ordered

00:35:39,670 --> 00:35:45,490
anyway so it doesn't matter so so it

00:35:42,790 --> 00:35:48,040
it's it's it's defined that the

00:35:45,490 --> 00:35:51,400
interpretation of this syntax is that

00:35:48,040 --> 00:35:54,609
even if the parameter is without

00:35:51,400 --> 00:35:59,070
password and then the class assess ssh

00:35:54,609 --> 00:36:02,079
client which has has a higher priority

00:35:59,070 --> 00:36:05,140
which you defined in classes ssh server

00:36:02,079 --> 00:36:06,400
or in backup client this is it's a very

00:36:05,140 --> 00:36:07,839
good question because it allows me to

00:36:06,400 --> 00:36:09,520
also address one more time this

00:36:07,839 --> 00:36:11,619
distinction between targeting hosts and

00:36:09,520 --> 00:36:13,599
classifying them and with the targeting

00:36:11,619 --> 00:36:15,250
hosts approach you would now say what's

00:36:13,599 --> 00:36:17,109
the parameter that all of my web servers

00:36:15,250 --> 00:36:18,520
should get and with reclass or the way

00:36:17,109 --> 00:36:19,599
that i like to think about things i

00:36:18,520 --> 00:36:23,890
start here

00:36:19,599 --> 00:36:25,839
i say i have blue right now in my screen

00:36:23,890 --> 00:36:28,450
and i want to configure that and so i

00:36:25,839 --> 00:36:31,540
then start a recursive walk off the tree

00:36:28,450 --> 00:36:34,030
so in this case i load the ssh server

00:36:31,540 --> 00:36:36,970
class and then continue to do my work

00:36:34,030 --> 00:36:39,099
here and it merges the this value no

00:36:36,970 --> 00:36:41,319
into my tree and then it comes back and

00:36:39,099 --> 00:36:45,190
then i go to backup client and backup

00:36:41,319 --> 00:36:47,079
client then merges this scalar over this

00:36:45,190 --> 00:36:49,420
scalar so that at the end when i come

00:36:47,079 --> 00:36:52,990
back to my class i i now have the

00:36:49,420 --> 00:36:55,960
without path password set if those two

00:36:52,990 --> 00:36:58,119
were reversed if ssh server was after

00:36:55,960 --> 00:36:59,890
backup clients because he'd just you

00:36:58,119 --> 00:37:01,210
know quickly set up the host and he'd

00:36:59,890 --> 00:37:03,460
then went out to dinner or something

00:37:01,210 --> 00:37:06,069
like that then what would happen is

00:37:03,460 --> 00:37:09,010
backup client would be loaded it would

00:37:06,069 --> 00:37:10,990
actually set sorry no it would actually

00:37:09,010 --> 00:37:13,329
see they are classes so then it would go

00:37:10,990 --> 00:37:16,119
into ssh server it would then read this

00:37:13,329 --> 00:37:17,029
right no into the tree and then come

00:37:16,119 --> 00:37:18,739
back to backup

00:37:17,029 --> 00:37:21,259
client and override the no with without

00:37:18,739 --> 00:37:27,319
password before it then returns to blue

00:37:21,259 --> 00:37:30,019
another example at work okay I'm not

00:37:27,319 --> 00:37:34,669
sure if I really understand seems to be

00:37:30,019 --> 00:37:37,369
a bit complicated we need because it can

00:37:34,669 --> 00:37:40,609
be a very big tree this is a this is a

00:37:37,369 --> 00:37:42,289
very classic example of where a diagram

00:37:40,609 --> 00:37:44,539
would have been a better slide than just

00:37:42,289 --> 00:37:46,189
code on the other hand what you just

00:37:44,539 --> 00:37:48,469
said this could be a very big tree that

00:37:46,189 --> 00:37:49,939
made me stop the idea from drawing a

00:37:48,469 --> 00:37:53,719
diagram because it was not going to be

00:37:49,939 --> 00:37:55,849
very informative I I suppose I can

00:37:53,719 --> 00:37:57,679
either try to explain it again or let

00:37:55,849 --> 00:37:59,299
just let it sink and ask me if you still

00:37:57,679 --> 00:38:01,189
have problems because I'm fairly sure

00:37:59,299 --> 00:38:03,679
that everybody who is dealt with

00:38:01,189 --> 00:38:05,900
recursion at some point in time or who

00:38:03,679 --> 00:38:08,509
understands what it means to even walk

00:38:05,900 --> 00:38:11,659
the directory tree on your UNIX system

00:38:08,509 --> 00:38:13,749
recursively for instance using find will

00:38:11,659 --> 00:38:18,289
immediately understand what this means

00:38:13,749 --> 00:38:20,689
wouldn't what I would propose I think if

00:38:18,289 --> 00:38:23,479
I have a very big configuration with a

00:38:20,689 --> 00:38:25,909
lot of yeah with a big tree or a very

00:38:23,479 --> 00:38:29,689
deep tree it would be very nice to have

00:38:25,909 --> 00:38:32,059
some debug support so I can say Oh which

00:38:29,689 --> 00:38:35,029
passes are walked through the tree for a

00:38:32,059 --> 00:38:37,849
certain client yeah that would be nice

00:38:35,029 --> 00:38:44,089
so I have this to do list and reclass

00:38:37,849 --> 00:38:46,009
and debugging is number four it yeah it

00:38:44,089 --> 00:38:48,079
would have really helped this especially

00:38:46,009 --> 00:38:49,549
the parameter interpolation to implement

00:38:48,079 --> 00:38:51,109
that correctly because it requires you

00:38:49,549 --> 00:38:53,269
to do a topological sort of all the

00:38:51,109 --> 00:38:55,189
dependencies between parameters and that

00:38:53,269 --> 00:38:57,939
really kind of would have been much

00:38:55,189 --> 00:39:00,919
better if I had debugging done first but

00:38:57,939 --> 00:39:02,299
it is very simple in the end and if you

00:39:00,919 --> 00:39:05,419
look at the code it is actually very

00:39:02,299 --> 00:39:07,130
simple and once you understand the

00:39:05,419 --> 00:39:08,749
general concept once you understand what

00:39:07,130 --> 00:39:10,880
actually happens when you walk a tree

00:39:08,749 --> 00:39:12,589
the important I guess the only important

00:39:10,880 --> 00:39:14,359
thing here that that is a little bit

00:39:12,589 --> 00:39:17,569
different from walking a tree is that

00:39:14,359 --> 00:39:20,630
what you're doing is you're doing the

00:39:17,569 --> 00:39:23,769
action at the end when you come back up

00:39:20,630 --> 00:39:23,769
so it's tail recursion and

00:39:27,830 --> 00:39:33,480
I'm sorry I'm failing at this it's just

00:39:31,320 --> 00:39:35,400
too slow tail recursion means that

00:39:33,480 --> 00:39:37,110
basically you don't just add to your

00:39:35,400 --> 00:39:39,870
list when you find a new directory and

00:39:37,110 --> 00:39:41,580
you enumerate the lists but in terms of

00:39:39,870 --> 00:39:45,510
UNIX file system imagine you had a

00:39:41,580 --> 00:39:47,390
symlink somewhere under a and to a tree

00:39:45,510 --> 00:39:50,700
that is somewhere under under zed and

00:39:47,390 --> 00:39:53,250
now when you basically walk the entire

00:39:50,700 --> 00:39:55,710
file system you will see the contents of

00:39:53,250 --> 00:39:57,570
the tree referenced by the sibling first

00:39:55,710 --> 00:39:59,940
even though it only appears in that and

00:39:57,570 --> 00:40:02,280
what what then is the important part is

00:39:59,940 --> 00:40:04,530
that you store what you've already seen

00:40:02,280 --> 00:40:06,600
and that you go all the way to the leaf

00:40:04,530 --> 00:40:08,160
and then you do the operations when you

00:40:06,600 --> 00:40:10,920
come back and that's when the merging

00:40:08,160 --> 00:40:15,480
happens and that's when this specifics

00:40:10,920 --> 00:40:17,250
of having more specific data overwrite

00:40:15,480 --> 00:40:22,500
less specific data comes in that's how

00:40:17,250 --> 00:40:25,380
it's implemented further questions I'm

00:40:22,500 --> 00:40:27,810
happy to walk you through examples and

00:40:25,380 --> 00:40:29,550
everything maybe you are already on

00:40:27,810 --> 00:40:32,810
thread in the last slide but I was

00:40:29,550 --> 00:40:35,820
distracted do you plan to do you plan to

00:40:32,810 --> 00:40:38,010
to add possibility to use an external

00:40:35,820 --> 00:40:39,660
node classifier through to a class I

00:40:38,010 --> 00:40:43,860
mean to be able to extract from a

00:40:39,660 --> 00:40:47,460
database the set of nodes with some

00:40:43,860 --> 00:40:50,820
properties which we'll go to to do most

00:40:47,460 --> 00:40:54,750
of the classify but we will still be it

00:40:50,820 --> 00:41:01,350
would still be possible to override most

00:40:54,750 --> 00:41:03,600
of the things with the class I mean this

00:41:01,350 --> 00:41:05,250
is an external node classifier so I

00:41:03,600 --> 00:41:07,110
don't understand is your question about

00:41:05,250 --> 00:41:09,360
can this coexist with another external

00:41:07,110 --> 00:41:13,170
node classifier or reuse the data from

00:41:09,360 --> 00:41:15,570
another external node that is something

00:41:13,170 --> 00:41:19,140
that I recently thought about how to do

00:41:15,570 --> 00:41:20,940
it's kind of difficult because I mean

00:41:19,140 --> 00:41:22,950
unless I want to implement an adapter

00:41:20,940 --> 00:41:25,770
here for cobbler or whatever you have

00:41:22,950 --> 00:41:28,080
right into reclass I'd really rather

00:41:25,770 --> 00:41:30,480
have you configure cobbler with salt or

00:41:28,080 --> 00:41:34,500
with ansible or a puppet and then let me

00:41:30,480 --> 00:41:36,240
get at those data once they already

00:41:34,500 --> 00:41:37,890
pulled because I don't think reclass

00:41:36,240 --> 00:41:38,789
needs to get any more complicated on the

00:41:37,890 --> 00:41:40,079
other hand

00:41:38,789 --> 00:41:42,630
there are there is a plugin

00:41:40,079 --> 00:41:44,459
infrastructure for storage and the CML

00:41:42,630 --> 00:41:46,769
FS which I showed you which is the nodes

00:41:44,459 --> 00:41:48,509
in classes EML files and so on you can

00:41:46,769 --> 00:41:51,029
actually it's two functions that you

00:41:48,509 --> 00:41:53,699
have to ride you can override that and

00:41:51,029 --> 00:41:55,859
put it into a database or XML RPC to

00:41:53,699 --> 00:41:58,559
your cobbler server I think that should

00:41:55,859 --> 00:42:00,749
be possible but I don't really want to

00:41:58,559 --> 00:42:02,339
put this into reclass proper at this

00:42:00,749 --> 00:42:04,739
moment but what I do want to do is

00:42:02,339 --> 00:42:06,630
figure out how to get at the data that

00:42:04,739 --> 00:42:08,819
your configuration management system has

00:42:06,630 --> 00:42:12,029
already collected which includes things

00:42:08,819 --> 00:42:13,890
like the SSL fingerprints or the free

00:42:12,029 --> 00:42:15,179
memory all the facts that I was talking

00:42:13,890 --> 00:42:16,529
about at the moment you can't use them

00:42:15,179 --> 00:42:18,359
in reclass you have to use that in

00:42:16,529 --> 00:42:20,969
templates later you have to combine the

00:42:18,359 --> 00:42:23,099
values and ideally you know be nice if

00:42:20,969 --> 00:42:42,319
you have all the data actually available

00:42:23,099 --> 00:42:47,609
in one place questions there's one yeah

00:42:42,319 --> 00:42:49,259
yeah how'd you handle them well I was

00:42:47,609 --> 00:42:52,109
going to ask Beth I think I figured I am

00:42:49,259 --> 00:42:53,969
you know in your blue example say you

00:42:52,109 --> 00:42:56,909
don't care that blue itself is an SSH

00:42:53,969 --> 00:42:58,589
server so you go down the tree backup

00:42:56,909 --> 00:43:01,409
client and that puts unnecessary server

00:42:58,589 --> 00:43:03,269
and then you know so you know that

00:43:01,409 --> 00:43:04,919
permit root login was overridden in

00:43:03,269 --> 00:43:06,749
backup client so that's okay when you

00:43:04,919 --> 00:43:09,719
walk back up how did you figure how'd

00:43:06,749 --> 00:43:11,789
you handle it if you end up with so

00:43:09,719 --> 00:43:14,849
don't go and down the tree somewhere at

00:43:11,789 --> 00:43:18,659
the same level to override to permit

00:43:14,849 --> 00:43:20,369
route log in that there is no there is

00:43:18,659 --> 00:43:22,289
the same level but there is still a well

00:43:20,369 --> 00:43:24,089
in first order in this case whatever

00:43:22,289 --> 00:43:26,369
backup client does would override

00:43:24,089 --> 00:43:27,809
whatever ssh server does and this is

00:43:26,369 --> 00:43:29,219
right I don't think there's any other

00:43:27,809 --> 00:43:32,729
way to do it and this actually gives you

00:43:29,219 --> 00:43:36,689
a nice nice control over the system

00:43:32,729 --> 00:43:39,269
because I often tag a number of my notes

00:43:36,689 --> 00:43:41,069
with tests which I then append to the

00:43:39,269 --> 00:43:43,469
list of classes and that means that that

00:43:41,069 --> 00:43:44,849
actually overrides whatever I set in

00:43:43,469 --> 00:43:46,799
there were rights everything else and

00:43:44,849 --> 00:43:49,619
then later on I can remove remove that

00:43:46,799 --> 00:43:51,839
test class again and and resume normal

00:43:49,619 --> 00:43:52,480
work of course I do all my testing in a

00:43:51,839 --> 00:43:55,320
testing and

00:43:52,480 --> 00:44:02,280
not a production environment never

00:43:55,320 --> 00:44:02,280
that's a joke more questions

00:44:05,609 --> 00:44:14,389
good then thank you thank you very much

00:44:09,960 --> 00:44:14,389

YouTube URL: https://www.youtube.com/watch?v=lCAeX4kBoMY


