Title: Debian Java Packaging BoF
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Matthew Vernon

At: DebConf14
https://debconf14.debconf.org/
Room: Room 328
Scheduled start: 2014-08-25 11:00:00
Captions: 
	00:01:23,850 --> 00:01:29,940
so shall we get started am i can can you

00:01:27,720 --> 00:01:32,280
hear me well I live is this is the

00:01:29,940 --> 00:01:38,820
microphone working maybe if it isn't

00:01:32,280 --> 00:01:40,140
yeah good cool so this is this I want

00:01:38,820 --> 00:01:41,330
this to be the sort of before I say as

00:01:40,140 --> 00:01:45,509
little as possible

00:01:41,330 --> 00:01:47,160
because this is my first Devcon and I've

00:01:45,509 --> 00:01:49,680
not been doing Java patching very long

00:01:47,160 --> 00:01:51,090
either so I think the less I say the

00:01:49,680 --> 00:01:55,650
more everyone else will get out of it

00:01:51,090 --> 00:01:58,259
and I think so I put I put together

00:01:55,650 --> 00:02:00,600
really one slide other than the title

00:01:58,259 --> 00:02:06,420
slide of things people suggested we

00:02:00,600 --> 00:02:08,280
might want to talk about so I also I've

00:02:06,420 --> 00:02:11,250
got those those things on a gobby

00:02:08,280 --> 00:02:13,920
document on gobby debian org so maybe if

00:02:11,250 --> 00:02:16,230
someone here could sort of scribble down

00:02:13,920 --> 00:02:18,209
and what people say on that gobby

00:02:16,230 --> 00:02:24,050
document and then we'll have our record

00:02:18,209 --> 00:02:24,050
afterwards of kind of what was said so

00:02:24,620 --> 00:02:33,330
um kind of those are the things that

00:02:31,500 --> 00:02:36,269
people sort of want to talk about the

00:02:33,330 --> 00:02:38,489
reason why I proposed this baath was

00:02:36,269 --> 00:02:44,579
that I foolishly tried to package a java

00:02:38,489 --> 00:02:46,950
application and @ue lot well as I was

00:02:44,579 --> 00:02:49,590
about to start doing this I emailed Russ

00:02:46,950 --> 00:02:53,160
and he said yeah I tried to do that and

00:02:49,590 --> 00:02:55,380
it was just too much like hard work and

00:02:53,160 --> 00:02:58,739
my experience also was that it was too

00:02:55,380 --> 00:03:02,810
much like hard work so I have you know I

00:02:58,739 --> 00:03:02,810
ended up with ten libraries to package

00:03:03,680 --> 00:03:10,019
and and then then the the Ridgid so I

00:03:08,070 --> 00:03:12,209
got all of those and and packaged them

00:03:10,019 --> 00:03:15,750
and then I never quite finished the app

00:03:12,209 --> 00:03:17,989
itself because you know so I had got so

00:03:15,750 --> 00:03:20,549
far behind everything else and I think

00:03:17,989 --> 00:03:25,200
it struck me that there must be a better

00:03:20,549 --> 00:03:27,540
answer to this because you know one of

00:03:25,200 --> 00:03:29,760
the things on that list is a problem

00:03:27,540 --> 00:03:32,459
with manpower and if everyone who tries

00:03:29,760 --> 00:03:34,139
to comes to think well I've got this

00:03:32,459 --> 00:03:35,470
Java wrap I use it would be handy if it

00:03:34,139 --> 00:03:37,900
was in Debian

00:03:35,470 --> 00:03:40,660
they start off on this process and lose

00:03:37,900 --> 00:03:43,500
the Wilson live halfway down it then we

00:03:40,660 --> 00:03:47,740
have this kind of vicious cycle where

00:03:43,500 --> 00:03:51,760
each new potential contributor gets

00:03:47,740 --> 00:03:53,170
stopped loses heart so their application

00:03:51,760 --> 00:03:55,480
never makes into Debian which is a

00:03:53,170 --> 00:03:57,880
problem they probably go off into other

00:03:55,480 --> 00:04:00,430
things and we have fewer lobe a few of

00:03:57,880 --> 00:04:02,020
those dependent libraries packaged up so

00:04:00,430 --> 00:04:03,310
the next person who comes along there

00:04:02,020 --> 00:04:04,330
aren't so many libraries so they have to

00:04:03,310 --> 00:04:06,700
bought packaged more libraries these

00:04:04,330 --> 00:04:09,490
sort of sort of self reinforcing problem

00:04:06,700 --> 00:04:12,640
and I think that may even actually makes

00:04:09,490 --> 00:04:14,500
this worse I've come to loathe maven

00:04:12,640 --> 00:04:17,350
more than I loathe almost anything else

00:04:14,500 --> 00:04:20,640
and I think as a distribution it

00:04:17,350 --> 00:04:22,690
presents a number of problems for us

00:04:20,640 --> 00:04:24,520
ignoring the fact that this default mode

00:04:22,690 --> 00:04:26,350
of operation is not terribly secure you

00:04:24,520 --> 00:04:28,390
know it'll download any health garbage

00:04:26,350 --> 00:04:31,720
over HTTP and compile it and his dollar

00:04:28,390 --> 00:04:35,650
and a system for you I think it

00:04:31,720 --> 00:04:39,060
encourages upstream authors to be kind

00:04:35,650 --> 00:04:39,060
of slapdash in their approach to

00:04:39,240 --> 00:04:43,390
dependencies the libraries they depend

00:04:41,230 --> 00:04:45,580
on there's no if your expectation is

00:04:43,390 --> 00:04:48,070
either everyone will just install the

00:04:45,580 --> 00:04:50,169
binary jar which is a common model or

00:04:48,070 --> 00:04:52,229
they'll just run maven it will download

00:04:50,169 --> 00:04:54,490
everything you don't care about using

00:04:52,229 --> 00:04:55,570
sort of popular libraries in the way

00:04:54,490 --> 00:05:00,640
that someone writing a C application

00:04:55,570 --> 00:05:02,740
might there's a lack of clear clear sort

00:05:00,640 --> 00:05:04,630
of versioning you know use declare a

00:05:02,740 --> 00:05:07,600
first version dependency or some other

00:05:04,630 --> 00:05:09,430
library and or maybe you wanted a

00:05:07,600 --> 00:05:10,720
particular API only that's provided by a

00:05:09,430 --> 00:05:12,160
particular version or maybe you just

00:05:10,720 --> 00:05:14,260
pick the latest one when you happen to

00:05:12,160 --> 00:05:16,450
write your application and then when we

00:05:14,260 --> 00:05:18,820
come along we don't want 50 different

00:05:16,450 --> 00:05:20,260
versions of some Java library so we have

00:05:18,820 --> 00:05:22,960
often you end up trying to have to

00:05:20,260 --> 00:05:25,060
pretty much guess where the API has

00:05:22,960 --> 00:05:26,620
changed in the versions of a Java

00:05:25,060 --> 00:05:32,620
library so that makes the whole process

00:05:26,620 --> 00:05:35,169
harder as well yeah so I think this sort

00:05:32,620 --> 00:05:37,210
of whole approach that may even

00:05:35,169 --> 00:05:40,840
encourage it is really unhelpful for us

00:05:37,210 --> 00:05:42,610
as a distribution and I wonder if we if

00:05:40,840 --> 00:05:45,300
there's anything we can do to try and

00:05:42,610 --> 00:05:48,230
ameliorate that and Andrews Andrew here

00:05:45,300 --> 00:05:50,390
hi Andrews

00:05:48,230 --> 00:05:52,070
google Summer of Code project I think

00:05:50,390 --> 00:05:54,140
might be is come a starting-point fact

00:05:52,070 --> 00:05:56,210
because do you want say what you did

00:05:54,140 --> 00:06:00,050
does a microphone tell us what you did

00:05:56,210 --> 00:06:03,620
save me talking misses on from my

00:06:00,050 --> 00:06:06,610
project I was creating a maven plugin to

00:06:03,620 --> 00:06:07,780
actually build a java application and

00:06:06,610 --> 00:06:10,730
iterally

00:06:07,780 --> 00:06:15,380
build all of its dependencies and dump

00:06:10,730 --> 00:06:18,200
it all into a maven repository I mean it

00:06:15,380 --> 00:06:19,880
struck me that this sort of because we

00:06:18,200 --> 00:06:22,100
have we have a mage Bank which is pretty

00:06:19,880 --> 00:06:26,500
good but it's not it's not it's not

00:06:22,100 --> 00:06:28,550
perfect and I wondered if we could some

00:06:26,500 --> 00:06:30,500
modification of that approach that sort

00:06:28,550 --> 00:06:32,480
of automatic finding all the

00:06:30,500 --> 00:06:34,250
dependencies and building them we could

00:06:32,480 --> 00:06:36,320
use to make the job of someone who comes

00:06:34,250 --> 00:06:37,970
along with their new java application

00:06:36,320 --> 00:06:40,370
they want to get into debian and makes

00:06:37,970 --> 00:06:41,840
the job of sorting out all of the

00:06:40,370 --> 00:06:45,200
libraries and getting them into

00:06:41,840 --> 00:06:46,910
distributable form easier and that might

00:06:45,200 --> 00:06:49,850
solve some of our problems both in terms

00:06:46,910 --> 00:06:51,170
of manpower and make people's lives

00:06:49,850 --> 00:06:58,460
easier in terms of getting java

00:06:51,170 --> 00:07:03,110
applications into debian someone say

00:06:58,460 --> 00:07:05,450
something disagree with me excellent I'm

00:07:03,110 --> 00:07:06,920
so glad that you brought this up could

00:07:05,450 --> 00:07:10,400
you please explain to the group how you

00:07:06,920 --> 00:07:14,180
propose that Debian support maven 3

00:07:10,400 --> 00:07:18,140
coexistence with maven 2 no I don't have

00:07:14,180 --> 00:07:19,490
announced that question and so as I said

00:07:18,140 --> 00:07:20,960
I'm not sure I'm the right person to be

00:07:19,490 --> 00:07:22,160
coordinating this I sort of did it

00:07:20,960 --> 00:07:24,140
because I thought it would be sort of

00:07:22,160 --> 00:07:26,810
discussion to have but I'm not I'm not

00:07:24,140 --> 00:07:29,390
an experienced user of Java I don't

00:07:26,810 --> 00:07:32,090
really develop the Java at all

00:07:29,390 --> 00:07:34,520
it's just I have a need to use a java

00:07:32,090 --> 00:07:38,240
application firm from for my work and

00:07:34,520 --> 00:07:40,610
you know the the Shibboleth team already

00:07:38,240 --> 00:07:42,830
has everything he except the java app in

00:07:40,610 --> 00:07:44,240
debian and it would be useful if we

00:07:42,830 --> 00:07:46,070
could get the Java app in as well so

00:07:44,240 --> 00:07:48,410
that's sort of where I come to this from

00:07:46,070 --> 00:07:50,450
so if you ask me it kind of detailed

00:07:48,410 --> 00:07:52,160
questions about different versions of

00:07:50,450 --> 00:07:54,280
maven I'm not person to answer them you

00:07:52,160 --> 00:07:54,280
know

00:07:56,000 --> 00:08:00,240
all right so so I'm Tony Maxwell for

00:07:59,070 --> 00:08:01,920
those who don't know I mean I've been on

00:08:00,240 --> 00:08:05,940
the Java team for a while and I have to

00:08:01,920 --> 00:08:07,500
I also have to claim certain ignorance

00:08:05,940 --> 00:08:10,110
of some of the inner workings I mean we

00:08:07,500 --> 00:08:13,920
have we have the maven repo helper maven

00:08:10,110 --> 00:08:16,590
debian helper and it's a little bit of

00:08:13,920 --> 00:08:18,720
black magic for me even having worked

00:08:16,590 --> 00:08:21,600
with them for quite a while to get those

00:08:18,720 --> 00:08:23,970
to work and I think we're at the point

00:08:21,600 --> 00:08:26,760
where to support maven 3 where we really

00:08:23,970 --> 00:08:28,710
need to back up and retool and

00:08:26,760 --> 00:08:30,300
reevaluate this so we're talking about a

00:08:28,710 --> 00:08:34,860
couple of there's as a few issues right

00:08:30,300 --> 00:08:36,840
as one do and I think so my answer is we

00:08:34,860 --> 00:08:38,550
already have to support what we have to

00:08:36,840 --> 00:08:40,290
support maiden 2 and maven 3 build

00:08:38,550 --> 00:08:43,530
systems if we're going to continue to

00:08:40,290 --> 00:08:46,170
distribute Java apps within Debian yeah

00:08:43,530 --> 00:08:47,670
and I you know coming to this conference

00:08:46,170 --> 00:08:49,400
actually I didn't I didn't want to put

00:08:47,670 --> 00:08:52,800
it up there for topics of discussion but

00:08:49,400 --> 00:08:55,230
some to some days I feel like we should

00:08:52,800 --> 00:08:58,770
distribute a JDK and we should

00:08:55,230 --> 00:09:01,160
distribute a maybe Tomcat maybe if we're

00:08:58,770 --> 00:09:04,590
willing to do the security support and

00:09:01,160 --> 00:09:06,420
then helpers to allow folks to basically

00:09:04,590 --> 00:09:09,720
run their Java apps on top of data

00:09:06,420 --> 00:09:12,600
because this this cascading effect of of

00:09:09,720 --> 00:09:17,220
every library that anyone has ever used

00:09:12,600 --> 00:09:20,520
is arduous it takes simple what's

00:09:17,220 --> 00:09:23,640
there's some open sea a some some nice

00:09:20,520 --> 00:09:25,770
sea a tool and it had 45 reverse

00:09:23,640 --> 00:09:28,020
dependencies and we don't know how many

00:09:25,770 --> 00:09:31,500
of those also had perverse dependencies

00:09:28,020 --> 00:09:35,040
so the interesting thing is of course

00:09:31,500 --> 00:09:36,840
the problem isn't really numerically all

00:09:35,040 --> 00:09:38,580
that terribly different from the world

00:09:36,840 --> 00:09:40,860
of sea based applications the

00:09:38,580 --> 00:09:43,560
distinction is that most of the

00:09:40,860 --> 00:09:45,990
libraries that matter to people in the

00:09:43,560 --> 00:09:47,940
world of see applications grew up sort

00:09:45,990 --> 00:09:51,330
of through the history of Unix

00:09:47,940 --> 00:09:52,800
and lots of people over a long time have

00:09:51,330 --> 00:09:54,200
thought about what's the right way to

00:09:52,800 --> 00:09:56,250
package libraries you know we

00:09:54,200 --> 00:09:57,510
transitioned to shared libraries we

00:09:56,250 --> 00:09:59,490
figured out shared library version

00:09:57,510 --> 00:10:00,500
there's just a lot of infrastructure

00:09:59,490 --> 00:10:03,680
that's grown

00:10:00,500 --> 00:10:05,750
with the application community and so

00:10:03,680 --> 00:10:08,900
new people coming in who want to write a

00:10:05,750 --> 00:10:10,190
see app sort of have this body of you

00:10:08,900 --> 00:10:12,050
know sort of well engineered

00:10:10,190 --> 00:10:13,820
infrastructure that's grown up over time

00:10:12,050 --> 00:10:16,190
and the problem that I've seen is a lot

00:10:13,820 --> 00:10:19,010
of folks that are writing Java apps

00:10:16,190 --> 00:10:22,070
while the resulting apps are really cool

00:10:19,010 --> 00:10:24,740
and the one that Tom and I sort of got

00:10:22,070 --> 00:10:26,270
entangled in his open rocket and you

00:10:24,740 --> 00:10:28,550
know really cool rocket design and

00:10:26,270 --> 00:10:30,650
simulation program but oMG can I reverse

00:10:28,550 --> 00:10:33,800
dependency list just about killed us

00:10:30,650 --> 00:10:36,410
then of course Keith and I our rocket

00:10:33,800 --> 00:10:38,570
ground station software is all written

00:10:36,410 --> 00:10:40,700
in Java these days so this is why I'm

00:10:38,570 --> 00:10:42,230
here and why I care about this but my

00:10:40,700 --> 00:10:44,000
observation has been that just in the

00:10:42,230 --> 00:10:46,340
world of people writing Java apps

00:10:44,000 --> 00:10:50,270
there's there's nowhere near that sort

00:10:46,340 --> 00:10:52,070
of focus on distribution distribute

00:10:50,270 --> 00:10:54,320
ability package ability and all of that

00:10:52,070 --> 00:10:56,180
because the model really is oh you know

00:10:54,320 --> 00:11:00,140
here's the URL to download the jar just

00:10:56,180 --> 00:11:02,600
run it and I in fact have given up and

00:11:00,140 --> 00:11:04,880
four open rocket I'm now delivering an

00:11:02,600 --> 00:11:07,430
installer that knows where to go get the

00:11:04,880 --> 00:11:09,220
latest jar and download it and you know

00:11:07,430 --> 00:11:12,140
wrap it so that it can be invoked and

00:11:09,220 --> 00:11:15,140
gee you know it works and my life's gone

00:11:12,140 --> 00:11:18,920
back to being less painful but it feels

00:11:15,140 --> 00:11:20,180
like feels like treason somehow it's you

00:11:18,920 --> 00:11:25,190
know this this isn't how this is

00:11:20,180 --> 00:11:26,150
supposed to work it's actually to hug

00:11:25,190 --> 00:11:29,930
the mic but it's section we're

00:11:26,150 --> 00:11:32,570
complicated than this because we have up

00:11:29,930 --> 00:11:35,060
streams that have this post open source

00:11:32,570 --> 00:11:39,650
attitude that they will just shove bits

00:11:35,060 --> 00:11:41,570
on to github that build with maven and

00:11:39,650 --> 00:11:45,020
they're happy when they create a pom.xml

00:11:41,570 --> 00:11:47,030
that will build their thing and we're

00:11:45,020 --> 00:11:49,880
you're actually lucky to have reasonable

00:11:47,030 --> 00:11:52,010
version numbers and releases and if you

00:11:49,880 --> 00:11:55,370
have version numbers and releases there

00:11:52,010 --> 00:11:57,890
really isn't much consistency in java

00:11:55,370 --> 00:12:00,500
developers using semantic versioning to

00:11:57,890 --> 00:12:00,860
actually represent a VI challenge a

00:12:00,500 --> 00:12:04,310
lay-day

00:12:00,860 --> 00:12:09,560
right so this makes Toni's problem even

00:12:04,310 --> 00:12:09,870
worse because not only do you have the

00:12:09,560 --> 00:12:14,490
law

00:12:09,870 --> 00:12:17,370
large graph of reverse depends but each

00:12:14,490 --> 00:12:20,940
project has a reverse depends on

00:12:17,370 --> 00:12:26,070
different versions of libraries when

00:12:20,940 --> 00:12:30,110
there's almost no path to resolve that

00:12:26,070 --> 00:12:30,110
except hand-to-hand combat every time

00:12:32,180 --> 00:12:35,880
yeah the way I don't know way that I

00:12:34,200 --> 00:12:38,100
resolve this in Java packaging is

00:12:35,880 --> 00:12:41,790
actually to have a set script that runs

00:12:38,100 --> 00:12:44,400
over my source code and re numbers the

00:12:41,790 --> 00:12:46,740
library I've renamed the library every

00:12:44,400 --> 00:12:48,480
time I make an API change and so I

00:12:46,740 --> 00:12:50,550
literally edit the name of the library

00:12:48,480 --> 00:12:52,560
and a pendant number an API version

00:12:50,550 --> 00:12:55,080
number to the library name and ship

00:12:52,560 --> 00:12:57,089
multiple libraries I mean I looked all

00:12:55,080 --> 00:13:02,089
through the documentation is there

00:12:57,089 --> 00:13:04,650
really no API versioning in Java at all

00:13:02,089 --> 00:13:10,110
who could build a library system like

00:13:04,650 --> 00:13:12,210
that in the year 2000 is just coming I

00:13:10,110 --> 00:13:14,970
gave up and gave a talk on this in 2012

00:13:12,210 --> 00:13:17,279
and it's it's this you know so goslings

00:13:14,970 --> 00:13:22,709
dream has come true right at want to run

00:13:17,279 --> 00:13:24,959
it anywhere write it but so the point is

00:13:22,709 --> 00:13:27,020
is basically once it built I mean that's

00:13:24,959 --> 00:13:29,100
one of the issues I think with with

00:13:27,020 --> 00:13:32,160
struggles with Java as a language once

00:13:29,100 --> 00:13:33,720
you get it to build you know that that's

00:13:32,160 --> 00:13:35,970
it that's what maven is there to solve

00:13:33,720 --> 00:13:38,790
is hey let me be able to reproducibly

00:13:35,970 --> 00:13:43,050
build this at some snapshot in time and

00:13:38,790 --> 00:13:44,820
it there is no conception of let me have

00:13:43,050 --> 00:13:48,360
just one copy this library on my system

00:13:44,820 --> 00:13:50,610
and move it forward I'm sorry and then

00:13:48,360 --> 00:13:52,480
allow time to move forward and let me

00:13:50,610 --> 00:13:57,250
upgrade that

00:13:52,480 --> 00:13:58,480
the whole system and um well I think I

00:13:57,250 --> 00:14:00,790
think it's more of a container view

00:13:58,480 --> 00:14:04,829
where basically hate this app runs with

00:14:00,790 --> 00:14:04,829
this set of libraries and that's good I

00:14:05,339 --> 00:14:12,370
just wanted to comment that at my

00:14:08,889 --> 00:14:14,860
company we definitely have tried to

00:14:12,370 --> 00:14:17,350
fight this battle some given up and

00:14:14,860 --> 00:14:19,540
basically this each application ships

00:14:17,350 --> 00:14:21,639
its entire set of dependencies because

00:14:19,540 --> 00:14:25,630
disk space is no longer the premium that

00:14:21,639 --> 00:14:27,760
it used to be run time requirements are

00:14:25,630 --> 00:14:32,470
also not that bad you can make an

00:14:27,760 --> 00:14:35,350
argument for security issues I I'm not

00:14:32,470 --> 00:14:37,540
sure where we stand on that but I I see

00:14:35,350 --> 00:14:39,600
a lot of value in the package the JDK

00:14:37,540 --> 00:14:43,180
and package Tomcat and do nothing else

00:14:39,600 --> 00:14:46,089
approach to things because it's it's a

00:14:43,180 --> 00:14:47,949
lot of efforts that's when people get

00:14:46,089 --> 00:14:49,089
down and use these things in anger

00:14:47,949 --> 00:14:51,459
they're going to have to find

00:14:49,089 --> 00:14:55,060
alternative approaches just to get their

00:14:51,459 --> 00:14:57,040
job done so it's kind of a council of

00:14:55,060 --> 00:14:58,750
despair that was known here how do we

00:14:57,040 --> 00:15:02,019
solve the Java packaging problem we

00:14:58,750 --> 00:15:03,339
don't give up and actually the security

00:15:02,019 --> 00:15:05,769
thing that someone alluded to a moment

00:15:03,339 --> 00:15:07,360
ago is an issue you know you look at so

00:15:05,769 --> 00:15:10,899
I looked at this application I was

00:15:07,360 --> 00:15:12,550
trying to package and it see on some ssl

00:15:10,899 --> 00:15:14,380
library that some PhD student had

00:15:12,550 --> 00:15:16,959
written back in the day and he was you

00:15:14,380 --> 00:15:19,690
know he's gonna get it into Apache

00:15:16,959 --> 00:15:21,760
Commons on this stuff and yet it has got

00:15:19,690 --> 00:15:23,050
forgotten and here it is you know it's

00:15:21,760 --> 00:15:27,310
doing SSL in something that is a

00:15:23,050 --> 00:15:29,380
security relevant application and you

00:15:27,310 --> 00:15:31,630
know this sort of maven encourages you

00:15:29,380 --> 00:15:33,100
to just say well I this is that what at

00:15:31,630 --> 00:15:34,569
one point I'll just carry on using it

00:15:33,100 --> 00:15:36,190
till the cows come home and if someone

00:15:34,569 --> 00:15:41,110
finds it's a security bug in it well

00:15:36,190 --> 00:15:43,560
herbs one kind of related minor thing we

00:15:41,110 --> 00:15:46,180
might want to consider is I believe a

00:15:43,560 --> 00:15:49,300
few weeks so no type is now enabled

00:15:46,180 --> 00:15:51,430
support for HTTPS for downloads from the

00:15:49,300 --> 00:15:53,949
main repository so it might be hitting

00:15:51,430 --> 00:15:55,449
me for our tools to for people to switch

00:15:53,949 --> 00:15:56,920
to use that as a default because it's

00:15:55,449 --> 00:16:00,550
not the upstream default yet I don't

00:15:56,920 --> 00:16:01,810
think for lining in or maven or whatever

00:16:00,550 --> 00:16:03,490
I suspect for lining and it probably

00:16:01,810 --> 00:16:04,070
will be soon if it's not already but I

00:16:03,490 --> 00:16:06,610
don't know

00:16:04,070 --> 00:16:06,610
maven

00:16:14,440 --> 00:16:21,040
well Rob brought up a really good point

00:16:16,839 --> 00:16:25,329
which is Lonnegan is basically the bill

00:16:21,040 --> 00:16:27,370
tool built on top of maven foreclosure

00:16:25,329 --> 00:16:29,529
applications and I happen to be a closer

00:16:27,370 --> 00:16:31,240
developer and I really enjoy closure and

00:16:29,529 --> 00:16:33,040
so I started talking with some people

00:16:31,240 --> 00:16:34,810
about well what should we do for Jessie

00:16:33,040 --> 00:16:38,709
well what we really ought to do is get

00:16:34,810 --> 00:16:40,060
line again into Jessie and we started

00:16:38,709 --> 00:16:41,920
down the trail of doing that and then

00:16:40,060 --> 00:16:43,779
you know then you man you all brought up

00:16:41,920 --> 00:16:46,060
the jahve transition which you have in

00:16:43,779 --> 00:16:49,120
your slide which is a big issue we

00:16:46,060 --> 00:16:52,120
tripped over the maven 3 thing which is

00:16:49,120 --> 00:16:54,610
another issue and then the reverse

00:16:52,120 --> 00:16:57,579
depends foreclosure to get line again to

00:16:54,610 --> 00:17:00,610
build but I think that this this problem

00:16:57,579 --> 00:17:02,290
isn't just Java it's also jvm languages

00:17:00,610 --> 00:17:04,569
so this comes up with closure comes up

00:17:02,290 --> 00:17:06,760
with JRuby potentially Scala and and

00:17:04,569 --> 00:17:08,829
other things as well and I would guess

00:17:06,760 --> 00:17:11,380
that many of those Java languages are

00:17:08,829 --> 00:17:13,659
probably using maven or in the case of

00:17:11,380 --> 00:17:16,630
closure their own bill tool which is

00:17:13,659 --> 00:17:18,280
sort of a thing a layer on top and I

00:17:16,630 --> 00:17:19,870
don't have any answers but it's

00:17:18,280 --> 00:17:24,569
certainly your raw brought brings up a

00:17:19,870 --> 00:17:26,740
good point ok I certainly don't wanna

00:17:24,569 --> 00:17:28,510
okay welcome one comment and then I'll

00:17:26,740 --> 00:17:30,400
sir I don't want to hog the mic I guess

00:17:28,510 --> 00:17:32,860
I guess my my look I may realize this is

00:17:30,400 --> 00:17:36,610
we could move in a lot of places with

00:17:32,860 --> 00:17:40,150
this talk I mean it I don't want I would

00:17:36,610 --> 00:17:42,250
like feedback and I think Debian Java is

00:17:40,150 --> 00:17:43,840
the best place to provide it certainly

00:17:42,250 --> 00:17:46,900
there folks who are here but feedback on

00:17:43,840 --> 00:17:49,240
to how we continue to make Java within

00:17:46,900 --> 00:17:51,669
Debian relevant to our users what's

00:17:49,240 --> 00:17:55,750
useful sounds you know sounds like

00:17:51,669 --> 00:17:58,320
supporting JVM runtimes development

00:17:55,750 --> 00:18:00,640
tools possibly I mean I think

00:17:58,320 --> 00:18:02,909
applications gets pretty hairy pretty

00:18:00,640 --> 00:18:02,909
quickly

00:18:03,120 --> 00:18:08,059
packaged applications right this telling

00:18:06,600 --> 00:18:11,130
is how to do it right now the

00:18:08,059 --> 00:18:13,950
instructions are the instructions are

00:18:11,130 --> 00:18:15,420
you'll make sure all of your life the

00:18:13,950 --> 00:18:16,830
current Java instructions are to make

00:18:15,420 --> 00:18:18,240
sure all of your libraries in Debian and

00:18:16,830 --> 00:18:19,830
then build your application on the top

00:18:18,240 --> 00:18:21,990
of the Java libraries in Debian and

00:18:19,830 --> 00:18:25,230
given the ABI issues that's clearly just

00:18:21,990 --> 00:18:26,910
not a supportable plan open rocket is an

00:18:25,230 --> 00:18:28,920
example here we have you know be they'll

00:18:26,910 --> 00:18:31,050
try to get all the libraries in Debian

00:18:28,920 --> 00:18:34,140
and the ABI instability across versions

00:18:31,050 --> 00:18:36,059
was a disaster I've tried to do the same

00:18:34,140 --> 00:18:38,340
thing in ship you know one library with

00:18:36,059 --> 00:18:41,270
multiple applications and I every time I

00:18:38,340 --> 00:18:44,880
rev the ABI it just I can't do that

00:18:41,270 --> 00:18:48,000
having a policy down that says the Java

00:18:44,880 --> 00:18:50,520
the Java distribution policy is you

00:18:48,000 --> 00:18:53,190
package all the libraries except for

00:18:50,520 --> 00:18:55,559
this tiny little set of ones which are

00:18:53,190 --> 00:18:58,260
guaranteed to not change in ABI that we

00:18:55,559 --> 00:19:00,450
will supply package them in this way put

00:18:58,260 --> 00:19:02,820
them in these directories and then your

00:19:00,450 --> 00:19:04,830
application will work and just abandon

00:19:02,820 --> 00:19:08,010
the notion of having common shared Java

00:19:04,830 --> 00:19:10,290
libraries in the distribution oh that's

00:19:08,010 --> 00:19:11,910
quite a radical suggestion I mean I'm

00:19:10,290 --> 00:19:13,559
not I think it might be the right answer

00:19:11,910 --> 00:19:15,240
you know because currently I currently

00:19:13,559 --> 00:19:17,100
our policy are the Java policies like

00:19:15,240 --> 00:19:18,030
the C policy if the e view is a library

00:19:17,100 --> 00:19:21,210
we should have more version on the

00:19:18,030 --> 00:19:23,190
system because you know as as you

00:19:21,210 --> 00:19:25,740
pointed out we solved all these problems

00:19:23,190 --> 00:19:27,750
in C years ago and it's clearly the

00:19:25,740 --> 00:19:30,570
right way to do it but maybe that that's

00:19:27,750 --> 00:19:34,429
a fight we can't have with the Java

00:19:30,570 --> 00:19:34,429
world because they don't give a monkey's

00:19:43,040 --> 00:19:50,130
butt does this mean are we going to

00:19:47,610 --> 00:19:53,610
insist on building all the jars from

00:19:50,130 --> 00:19:55,290
source I don't know I think we know

00:19:53,610 --> 00:19:58,830
because I mean if the whole point of

00:19:55,290 --> 00:20:01,830
free software is that you did you wonder

00:19:58,830 --> 00:20:02,850
if you're starting to talk about ok I

00:20:01,830 --> 00:20:05,960
just want to make sure what that's

00:20:02,850 --> 00:20:05,960
what's still what we were talking about

00:20:07,860 --> 00:20:14,850
I mean even more in one sense you know

00:20:13,140 --> 00:20:17,010
if you're not building from sorts in

00:20:14,850 --> 00:20:19,950
what sense do you have the preferred

00:20:17,010 --> 00:20:22,500
form for modification I think I think

00:20:19,950 --> 00:20:24,720
sorry did you to speak right so I'm a

00:20:22,500 --> 00:20:25,289
newbie when I first started to learn

00:20:24,720 --> 00:20:30,390
Java

00:20:25,289 --> 00:20:32,610
I used the Linux to do it and I got in

00:20:30,390 --> 00:20:34,830
the habit of adding dependencies right

00:20:32,610 --> 00:20:37,500
with my package and I really thought

00:20:34,830 --> 00:20:41,760
that was the way to go because reading

00:20:37,500 --> 00:20:45,090
about maven was just too complex for me

00:20:41,760 --> 00:20:47,580
to want to I didn't have the time to do

00:20:45,090 --> 00:20:49,860
it I didn't have the knowledge to set up

00:20:47,580 --> 00:20:53,639
maven and stuff like that and the wiki

00:20:49,860 --> 00:20:59,929
page was really too complex for me even

00:20:53,639 --> 00:20:59,929
to touch upon so that was my issue I

00:21:00,350 --> 00:21:06,350
just wanted to comment I mean I do think

00:21:04,470 --> 00:21:08,760
we do always want to build from source

00:21:06,350 --> 00:21:11,130
no question asked but I think there's

00:21:08,760 --> 00:21:13,289
something to this idea of you know if

00:21:11,130 --> 00:21:15,360
you have a if you have this the set of

00:21:13,289 --> 00:21:18,539
libraries that belong to your app and

00:21:15,360 --> 00:21:19,710
maybe not to a lot of other apps you

00:21:18,539 --> 00:21:21,450
know maybe at some point they'll be

00:21:19,710 --> 00:21:24,690
promoted but maybe there's room for us

00:21:21,450 --> 00:21:28,019
to distribute some jars provided they

00:21:24,690 --> 00:21:29,789
build from source that you know that are

00:21:28,019 --> 00:21:32,940
part of your class path that aren't part

00:21:29,789 --> 00:21:36,059
of the systems class path so I'd welcome

00:21:32,940 --> 00:21:38,309
discussion on the list about you know

00:21:36,059 --> 00:21:40,139
possibly it's not really relaxing Java

00:21:38,309 --> 00:21:41,820
policy but it's changing Java but just

00:21:40,139 --> 00:21:45,269
change out the policy to support this

00:21:41,820 --> 00:21:47,580
because I think we're for me personally

00:21:45,269 --> 00:21:50,490
I think it's untenable right now to

00:21:47,580 --> 00:21:52,649
continue trying to support this and

00:21:50,490 --> 00:21:56,669
because invariably you're you know

00:21:52,649 --> 00:21:58,169
you're well you're robbing someone right

00:21:56,669 --> 00:21:59,789
because it because one of the issues we

00:21:58,169 --> 00:22:01,740
run into the Java team is where we're

00:21:59,789 --> 00:22:03,750
we're pushing new we don't have

00:22:01,740 --> 00:22:05,549
visibility of everything right and so

00:22:03,750 --> 00:22:08,789
we're trying to we need a we need

00:22:05,549 --> 00:22:11,760
upstream version X of package foo well

00:22:08,789 --> 00:22:13,350
look that needs urgent Y of bar and we

00:22:11,760 --> 00:22:16,020
push that and it turns around if you

00:22:13,350 --> 00:22:18,690
don't build all the reverse depends you

00:22:16,020 --> 00:22:20,700
know this is a so our next

00:22:18,690 --> 00:22:22,790
Summer of Code project I would love a

00:22:20,700 --> 00:22:25,380
tool that just said all right I'm

00:22:22,790 --> 00:22:29,390
proposing uploading this build every

00:22:25,380 --> 00:22:32,130
single reverse depends because

00:22:29,390 --> 00:22:34,020
invariably then and then there's a we

00:22:32,130 --> 00:22:35,490
have to quickly we have failed a bill

00:22:34,020 --> 00:22:37,380
from source and then we end up spending

00:22:35,490 --> 00:22:39,480
a lot of time just trying to and then

00:22:37,380 --> 00:22:42,090
essentially now reporting and work

00:22:39,480 --> 00:22:44,130
managing those API changes within the

00:22:42,090 --> 00:22:49,680
team and that's the team is not staffed

00:22:44,130 --> 00:22:51,300
for it the problem that would arise in

00:22:49,680 --> 00:22:53,610
this approach at the moment you know if

00:22:51,300 --> 00:22:55,500
we find a security problem in a

00:22:53,610 --> 00:22:57,750
particular childhood library well it's

00:22:55,500 --> 00:22:59,760
easy we fix that Java library and you

00:22:57,750 --> 00:23:02,580
know where you go so if we're going to

00:22:59,760 --> 00:23:04,740
start shipping entire apps we're gonna

00:23:02,580 --> 00:23:07,470
have to have some sort of metadata in

00:23:04,740 --> 00:23:10,200
the app that just you know in the deb

00:23:07,470 --> 00:23:12,060
file or somewhere that describes every

00:23:10,200 --> 00:23:14,990
the versions of all the libraries that

00:23:12,060 --> 00:23:17,090
are contained within that app both and

00:23:14,990 --> 00:23:19,200
partly so this is a problem and the

00:23:17,090 --> 00:23:21,300
security issue we can fix that but also

00:23:19,200 --> 00:23:22,380
then that will give us the the tools to

00:23:21,300 --> 00:23:24,540
say well actually you know we're

00:23:22,380 --> 00:23:27,510
shipping 20 apps all of which contain

00:23:24,540 --> 00:23:28,620
this same library maybe at that point we

00:23:27,510 --> 00:23:37,020
should start thinking about taking that

00:23:28,620 --> 00:23:40,800
library into its own package how do we

00:23:37,020 --> 00:23:42,210
plan to deal with the issue of the

00:23:40,800 --> 00:23:43,440
different packages depending on

00:23:42,210 --> 00:23:46,800
different versions of the same

00:23:43,440 --> 00:23:53,190
dependency do we allow them to be Co

00:23:46,800 --> 00:23:55,380
installed do we the problem I see is

00:23:53,190 --> 00:24:00,150
that if you allow able to copy code

00:23:55,380 --> 00:24:02,210
start you easily end up with five

00:24:00,150 --> 00:24:08,640
billion copies of the same library

00:24:02,210 --> 00:24:10,410
because some some program won't be what

00:24:08,640 --> 00:24:14,640
ever be changed or the next year as we

00:24:10,410 --> 00:24:18,620
th streusel new version and yet that

00:24:14,640 --> 00:24:21,270
would be the idiot thing maybe but yeah

00:24:18,620 --> 00:24:23,910
so is the answer to that we need to push

00:24:21,270 --> 00:24:25,960
back on upstreams more to make them

00:24:23,910 --> 00:24:29,500
produce higher quality code do

00:24:25,960 --> 00:24:33,460
we have that power we can try it but I

00:24:29,500 --> 00:24:35,110
think you know I think this is the kind

00:24:33,460 --> 00:24:38,140
of the crux the problem is it's

00:24:35,110 --> 00:24:41,380
unrealistic to expect we can change the

00:24:38,140 --> 00:24:45,700
Java habits that are there and it is

00:24:41,380 --> 00:24:48,789
really frustrating hold on a sec I I'm

00:24:45,700 --> 00:24:51,880
torn because in the one hand i I see

00:24:48,789 --> 00:24:55,330
this idea of well it's just chip OpenJDK

00:24:51,880 --> 00:24:58,059
and and then go to town the thing that

00:24:55,330 --> 00:24:59,590
scares me among other things like

00:24:58,059 --> 00:25:01,600
security is that this is kind of

00:24:59,590 --> 00:25:04,450
breaking our relationship with our users

00:25:01,600 --> 00:25:07,320
it means that you can't just say apt-get

00:25:04,450 --> 00:25:10,539
source and get something that you expect

00:25:07,320 --> 00:25:11,950
I'm wondering if I know this sounds kind

00:25:10,539 --> 00:25:14,799
of unrealistic but I'm wondering if

00:25:11,950 --> 00:25:18,250
there's a way that we could you know

00:25:14,799 --> 00:25:22,149
with a policy change like insisting that

00:25:18,250 --> 00:25:23,649
every Java library that we use has some

00:25:22,149 --> 00:25:26,020
sort of auto packaged test thing in it

00:25:23,649 --> 00:25:31,090
that we basically have some magical tool

00:25:26,020 --> 00:25:33,760
that will like examine the ABI of Java

00:25:31,090 --> 00:25:36,279
libraries download every version and

00:25:33,760 --> 00:25:39,159
automatically determine when the ABI

00:25:36,279 --> 00:25:41,350
changes and then you know help us do

00:25:39,159 --> 00:25:46,000
this basically automatically so he must

00:25:41,350 --> 00:25:49,539
don't have to be involved that would be

00:25:46,000 --> 00:25:51,279
cool so I just I keep reminding myself

00:25:49,539 --> 00:25:54,240
that the fundamental problem is a clash

00:25:51,279 --> 00:25:57,450
of worldviews and that the objectives of

00:25:54,240 --> 00:25:59,860
what appears to be sort of the center of

00:25:57,450 --> 00:26:01,960
the behavioral model on the Java

00:25:59,860 --> 00:26:04,210
community is not the set of objectives

00:26:01,960 --> 00:26:06,820
that we have had traditionally in the

00:26:04,210 --> 00:26:08,049
Debian project with respect to how

00:26:06,820 --> 00:26:10,000
things get packaged how they get

00:26:08,049 --> 00:26:11,559
distributed you know the notion of never

00:26:10,000 --> 00:26:13,210
shipping more than one copy of a given

00:26:11,559 --> 00:26:15,279
piece of source code built on the system

00:26:13,210 --> 00:26:17,020
as a shared library something that

00:26:15,279 --> 00:26:19,090
worlds you I mean you know is Keith's

00:26:17,020 --> 00:26:21,520
point out the the situation with with

00:26:19,090 --> 00:26:23,289
the support for ABI versioning you know

00:26:21,520 --> 00:26:24,970
you just look and there are things that

00:26:23,289 --> 00:26:26,350
just aren't there and the reason they

00:26:24,970 --> 00:26:27,730
aren't there isn't because those people

00:26:26,350 --> 00:26:29,710
are stupid it's because they have a

00:26:27,730 --> 00:26:32,409
different set of objectives and that

00:26:29,710 --> 00:26:34,720
wasn't necessary to meet the objectives

00:26:32,409 --> 00:26:36,490
they had is that good for us No

00:26:34,720 --> 00:26:38,110
so in answer to your question is this

00:26:36,490 --> 00:26:40,659
something we should be pushing back on

00:26:38,110 --> 00:26:43,270
upstream about hell yes because you know

00:26:40,659 --> 00:26:46,090
I think that the model that we have

00:26:43,270 --> 00:26:47,950
evolved sort of how we care for source

00:26:46,090 --> 00:26:49,870
code and how we deal with security

00:26:47,950 --> 00:26:52,090
issues of all of these things that we

00:26:49,870 --> 00:26:55,090
use in Debian is is immensely powerful

00:26:52,090 --> 00:26:57,610
do I think we actually have the power to

00:26:55,090 --> 00:27:00,279
you know drive change in the Java

00:26:57,610 --> 00:27:02,110
community no I really don't and so where

00:27:00,279 --> 00:27:03,549
does that leave us it leaves us having

00:27:02,110 --> 00:27:05,830
this kind of a discussion and a buff

00:27:03,549 --> 00:27:07,330
it's a we think we know what they ought

00:27:05,830 --> 00:27:09,730
to do to make the world a better place

00:27:07,330 --> 00:27:12,159
and we have absolutely no idea how to

00:27:09,730 --> 00:27:15,850
actually affect that change so where

00:27:12,159 --> 00:27:17,679
does that leave us well if you use the

00:27:15,850 --> 00:27:19,240
word magic in there some magic tool I

00:27:17,679 --> 00:27:20,740
mean it would be nice to have some magic

00:27:19,240 --> 00:27:26,080
tool but I don't know how we make that

00:27:20,740 --> 00:27:29,950
come into existence yeah there is a tool

00:27:26,080 --> 00:27:34,179
called clear a CLI R that will do some

00:27:29,950 --> 00:27:35,470
of this in other packaging in other

00:27:34,179 --> 00:27:37,899
packaging problems that I've come across

00:27:35,470 --> 00:27:39,549
one of the other areas where we have a

00:27:37,899 --> 00:27:41,289
similar problem is shipping multiple

00:27:39,549 --> 00:27:43,720
versions of GCC targeting different

00:27:41,289 --> 00:27:45,159
architectures I built a cross compiler

00:27:43,720 --> 00:27:47,470
environment for arm that's in the

00:27:45,159 --> 00:27:50,399
archive the way that we resolve that in

00:27:47,470 --> 00:27:52,929
Debian today is we actually have the

00:27:50,399 --> 00:27:56,380
build process have a the build

00:27:52,929 --> 00:27:58,480
dependency on a source package would it

00:27:56,380 --> 00:28:01,690
be appropriate for us to allow in the

00:27:58,480 --> 00:28:03,789
archive innumerable different variants

00:28:01,690 --> 00:28:07,059
of the same source package for different

00:28:03,789 --> 00:28:09,730
libraries and no and have perhaps the

00:28:07,059 --> 00:28:11,169
Debian specific numbering of the ABI is

00:28:09,730 --> 00:28:13,390
of each of those packages so that when

00:28:11,169 --> 00:28:16,330
you build your package you're saying my

00:28:13,390 --> 00:28:19,149
package needs this library and I need

00:28:16,330 --> 00:28:20,980
this I need this source version of that

00:28:19,149 --> 00:28:22,840
library and as part of building your

00:28:20,980 --> 00:28:24,460
package you incorporate the source of

00:28:22,840 --> 00:28:27,309
that source version of your library and

00:28:24,460 --> 00:28:29,049
build a jar from that and make it a very

00:28:27,309 --> 00:28:30,909
lightweight process to upload a new

00:28:29,049 --> 00:28:32,559
source version of a particular library

00:28:30,909 --> 00:28:35,500
and it's like well I know it's you know

00:28:32,559 --> 00:28:38,350
it's not a and and and probably not make

00:28:35,500 --> 00:28:40,710
the ABI any sort of monotonic

00:28:38,350 --> 00:28:42,510
progression in time just say

00:28:40,710 --> 00:28:44,309
yeah I downloaded this new program it

00:28:42,510 --> 00:28:46,350
used this random version of this library

00:28:44,309 --> 00:28:47,730
it's not already archived what's in the

00:28:46,350 --> 00:28:49,710
archive doesn't work for me I'm just

00:28:47,730 --> 00:28:51,539
gonna upload a new source version of

00:28:49,710 --> 00:28:54,210
this package and give it another number

00:28:51,539 --> 00:28:57,029
that way that would have a couple of

00:28:54,210 --> 00:28:58,890
effects it would allow you to share the

00:28:57,029 --> 00:29:00,779
same source library across several

00:28:58,890 --> 00:29:03,000
packages that you maintain if it's the

00:29:00,779 --> 00:29:06,450
same version it would also allow us to

00:29:03,000 --> 00:29:08,399
identify rapidly locations in the

00:29:06,450 --> 00:29:11,190
archive where we have security problems

00:29:08,399 --> 00:29:13,620
and we can upload security fixes and it

00:29:11,190 --> 00:29:15,029
would be a tremendous burden on the Java

00:29:13,620 --> 00:29:18,450
team to actually go through and say oh

00:29:15,029 --> 00:29:21,390
we have 47 versions that live SSL used

00:29:18,450 --> 00:29:23,610
by different Java programs I have to go

00:29:21,390 --> 00:29:25,200
and do the same security fix to all 47

00:29:23,610 --> 00:29:27,179
versions it would be a mechanical

00:29:25,200 --> 00:29:29,010
process at least because you would the

00:29:27,179 --> 00:29:31,230
code presumably be effectively the same

00:29:29,010 --> 00:29:33,779
everywhere but it would be a larger

00:29:31,230 --> 00:29:35,760
burden but at least it would allow me to

00:29:33,779 --> 00:29:37,649
upload the sources that I needed to

00:29:35,760 --> 00:29:39,419
construct my package to make sure that

00:29:37,649 --> 00:29:43,740
we had sources that corresponded to the

00:29:39,419 --> 00:29:45,059
binaries in the archive yeah do you have

00:29:43,740 --> 00:29:47,880
a question you were waving your hand

00:29:45,059 --> 00:29:49,559
over there I'm just gonna comment

00:29:47,880 --> 00:29:51,059
quickly I'm carrying the mic over here

00:29:49,559 --> 00:29:53,549
that's a little bit of a maven that's

00:29:51,059 --> 00:29:55,830
that's a kind of getting closer to the

00:29:53,549 --> 00:29:57,600
maven model we'd have our own repository

00:29:55,830 --> 00:29:58,740
of lots of versions possibly the same

00:29:57,600 --> 00:30:01,169
library but I like that that's

00:29:58,740 --> 00:30:04,399
interesting yeah I mean I was thinking

00:30:01,169 --> 00:30:07,380
that I don't I don't know that we have

00:30:04,399 --> 00:30:09,720
enough leverage to be able to you know

00:30:07,380 --> 00:30:11,669
push we have a limited amount of

00:30:09,720 --> 00:30:13,710
leverage but I think it's very good for

00:30:11,669 --> 00:30:16,230
us we may have a being a reasonable

00:30:13,710 --> 00:30:18,360
decision to be have some stronger

00:30:16,230 --> 00:30:20,549
influence over time and there probably

00:30:18,360 --> 00:30:22,649
are plenty of upstreams that follow

00:30:20,549 --> 00:30:24,960
versioning processes that are just fine

00:30:22,649 --> 00:30:26,610
and so for those we might not have too

00:30:24,960 --> 00:30:27,149
much trouble handling things the normal

00:30:26,610 --> 00:30:32,159
way

00:30:27,149 --> 00:30:34,740
I suspect that given the way so the JVM

00:30:32,159 --> 00:30:36,270
works we there may be tooling ways we

00:30:34,740 --> 00:30:38,490
can help but it sounds to me like maybe

00:30:36,270 --> 00:30:40,649
over time what we need is a some sort of

00:30:38,490 --> 00:30:42,179
a hybrid approach possibly where you

00:30:40,649 --> 00:30:44,909
know there's the obvious way we want

00:30:42,179 --> 00:30:46,350
things done and we try to encourage

00:30:44,909 --> 00:30:48,809
people to do that that way but we have

00:30:46,350 --> 00:30:51,240
an escape hatch so that for you know

00:30:48,809 --> 00:30:52,740
packages that upstreams that aren't

00:30:51,240 --> 00:30:54,140
following that model we still have a way

00:30:52,740 --> 00:30:55,400
to address it and

00:30:54,140 --> 00:30:56,930
in particular be able to handle the

00:30:55,400 --> 00:31:02,930
security issues carefully that kind of

00:30:56,930 --> 00:31:04,310
thing alright no one else I'm gonna

00:31:02,930 --> 00:31:07,430
bring up a couple other topics just

00:31:04,310 --> 00:31:09,080
doesn't come before you do em is just to

00:31:07,430 --> 00:31:11,330
try and sort of summarize that a bit to

00:31:09,080 --> 00:31:12,650
make sure I've understood whatever onset

00:31:11,330 --> 00:31:13,970
and I think we don't have to go back and

00:31:12,650 --> 00:31:16,040
talk about some Debian Java because

00:31:13,970 --> 00:31:18,650
we're essentially proposing a policy

00:31:16,040 --> 00:31:20,150
change and we've so two alternatives I

00:31:18,650 --> 00:31:22,720
think have been suggested there's the

00:31:20,150 --> 00:31:26,390
alternative where we ship open JDK

00:31:22,720 --> 00:31:27,680
that's about it that's the alternative

00:31:26,390 --> 00:31:29,300
where we carry on with our current

00:31:27,680 --> 00:31:31,370
approach which i think is clearly

00:31:29,300 --> 00:31:34,430
unsustainable and there's an approach

00:31:31,370 --> 00:31:37,910
where we we move towards the point where

00:31:34,430 --> 00:31:41,630
if you want to ship an app in debian is

00:31:37,910 --> 00:31:45,650
okay from our map to be built using a

00:31:41,630 --> 00:31:47,690
pile of libraries rather than having the

00:31:45,650 --> 00:31:49,490
sort of you know we'll have one copy of

00:31:47,690 --> 00:31:51,800
this library on the system instead you

00:31:49,490 --> 00:31:54,380
know either we have some some sort of

00:31:51,800 --> 00:31:55,850
mechanism with different source packages

00:31:54,380 --> 00:31:57,620
in the archive that you incorporate in

00:31:55,850 --> 00:31:59,030
your bills or something like that way

00:31:57,620 --> 00:32:01,130
you you have an app that definitely

00:31:59,030 --> 00:32:03,500
builds from source but it comes as one

00:32:01,130 --> 00:32:07,820
giant jar rather than you know with its

00:32:03,500 --> 00:32:09,520
own class path and I my feeling is that

00:32:07,820 --> 00:32:12,290
latter approach is better for our users

00:32:09,520 --> 00:32:13,850
you know it means for common

00:32:12,290 --> 00:32:15,440
applications people will be able to use

00:32:13,850 --> 00:32:19,490
it on Debian and I think it will make

00:32:15,440 --> 00:32:28,520
our lives tractable in a way that our

00:32:19,490 --> 00:32:32,150
current approach doesn't I think we

00:32:28,520 --> 00:32:37,220
needed some sort of combination between

00:32:32,150 --> 00:32:40,850
those two because there was one case

00:32:37,220 --> 00:32:43,460
where you have just a pure large Java

00:32:40,850 --> 00:32:46,550
library and then can just incorporate

00:32:43,460 --> 00:32:49,790
everything and it magically magically

00:32:46,550 --> 00:32:54,050
finds some substance always but there

00:32:49,790 --> 00:32:57,920
was also a case of libraries just

00:32:54,050 --> 00:33:01,660
happening to programs happening to have

00:32:57,920 --> 00:33:01,660
some features in Java

00:33:03,729 --> 00:33:11,539
it might make it a just cooperate code

00:33:09,169 --> 00:33:16,929
from Apache Commons and just build it

00:33:11,539 --> 00:33:19,669
and if to tada and be done with that so

00:33:16,929 --> 00:33:24,590
what that package does what now is to

00:33:19,669 --> 00:33:27,259
use the normal packaging way and if we

00:33:24,590 --> 00:33:30,320
get to the to the source code solution

00:33:27,259 --> 00:33:35,049
you need to invent some mechanisms to

00:33:30,320 --> 00:33:41,619
get the source code into that program so

00:33:35,049 --> 00:33:44,479
yeah I think it's not a good way to to

00:33:41,619 --> 00:33:48,619
change the complete wave charge as I

00:33:44,479 --> 00:33:50,450
have a mixture between so I think shall

00:33:48,619 --> 00:33:52,249
we leave the the sort of dependency

00:33:50,450 --> 00:33:53,960
health question for now because we've

00:33:52,249 --> 00:33:55,249
you know we've used most of our time of

00:33:53,960 --> 00:33:58,099
the word there are some other issues are

00:33:55,249 --> 00:34:03,200
there so um Tony do you want to say

00:33:58,099 --> 00:34:05,299
something I think you were gonna I just

00:34:03,200 --> 00:34:06,799
wanted to bring I mean we we just kind

00:34:05,299 --> 00:34:08,210
of spit ball on the list to figure out

00:34:06,799 --> 00:34:09,770
what would we talk about during this I

00:34:08,210 --> 00:34:14,000
think the dependency hell question is

00:34:09,770 --> 00:34:15,230
the core question for Devin a job within

00:34:14,000 --> 00:34:19,190
Debian so I'm glad that we spent a lot

00:34:15,230 --> 00:34:21,919
of time on that I just wanted to bring

00:34:19,190 --> 00:34:25,099
up well so Java transition I can't give

00:34:21,919 --> 00:34:28,399
a good overview of that other than the

00:34:25,099 --> 00:34:30,589
main struggle there seems to be that you

00:34:28,399 --> 00:34:32,599
know wouldn't it be great if we had a

00:34:30,589 --> 00:34:38,809
JDK that built across all of our

00:34:32,599 --> 00:34:42,280
architecture and just just one or two or

00:34:38,809 --> 00:34:42,280
even just three would be great actually

00:34:42,460 --> 00:34:49,280
microphone we're good

00:34:44,960 --> 00:34:50,750
sorry just in the in the spirit of

00:34:49,280 --> 00:34:52,070
getting to all the architectures it

00:34:50,750 --> 00:34:55,600
would be a lot easier if we only had to

00:34:52,070 --> 00:34:55,600
support one version of open JDK

00:34:56,140 --> 00:34:59,660
absolutely no argument there

00:34:57,920 --> 00:35:03,170
I think think when we brought up the

00:34:59,660 --> 00:35:07,100
Java transition I mean I don't my gut

00:35:03,170 --> 00:35:09,980
feeling is for Jesse we I don't I don't

00:35:07,100 --> 00:35:11,240
suspect it's gonna happen maybe if if

00:35:09,980 --> 00:35:13,880
folks really wanted to happen and

00:35:11,240 --> 00:35:17,020
everyone gets a really super busy but I

00:35:13,880 --> 00:35:19,430
mean we had two months right yeah it

00:35:17,020 --> 00:35:20,930
doesn't look attractive it des hey or

00:35:19,430 --> 00:35:24,740
unless someone is suddenly gonna have a

00:35:20,930 --> 00:35:26,450
burst of enthusiasm I'm not right um but

00:35:24,740 --> 00:35:27,430
you know but but let's let's talk about

00:35:26,450 --> 00:35:34,670
it on the list

00:35:27,430 --> 00:35:36,710
it did I just wanted to know what

00:35:34,670 --> 00:35:38,120
remains to be done for the Java 8

00:35:36,710 --> 00:35:41,660
transition I haven't been following it

00:35:38,120 --> 00:35:46,400
closely you know my problem as far as I

00:35:41,660 --> 00:35:49,730
followed it is that some random package

00:35:46,400 --> 00:35:51,890
does not pay to here 8 maybe

00:35:49,730 --> 00:35:54,190
because there was some some Javadoc

00:35:51,890 --> 00:35:59,810
issues or some code issues or whatever

00:35:54,190 --> 00:36:01,790
so I think in mine where did fire that

00:35:59,810 --> 00:36:07,700
pile of box but I'm not sure whether

00:36:01,790 --> 00:36:09,170
it's all all paths existing part of the

00:36:07,700 --> 00:36:11,600
answer to your question can be found on

00:36:09,170 --> 00:36:15,560
the Debian Java list archives manual

00:36:11,600 --> 00:36:17,960
pool has has created a bug I think a

00:36:15,560 --> 00:36:21,050
metapod two-track job a transition

00:36:17,960 --> 00:36:23,030
things some of them are you know kind of

00:36:21,050 --> 00:36:25,400
benign like there's just one little Java

00:36:23,030 --> 00:36:28,040
library on a leaf library that needs to

00:36:25,400 --> 00:36:30,140
be updated but there are significantly

00:36:28,040 --> 00:36:32,330
more complicated cases like JRuby I've

00:36:30,140 --> 00:36:34,940
taken a couple of stabs at updating and

00:36:32,330 --> 00:36:36,590
packaging JRuby on but that's tricky

00:36:34,940 --> 00:36:41,120
because there's native bits

00:36:36,590 --> 00:36:42,680
there's FFI bits there's you know it

00:36:41,120 --> 00:36:45,410
used and I've been working with upstream

00:36:42,680 --> 00:36:47,870
because I know upstream to get some of

00:36:45,410 --> 00:36:50,270
the binary blobs out of their thing but

00:36:47,870 --> 00:36:52,610
it still we have to immediate so it's a

00:36:50,270 --> 00:36:53,609
really tricky package to do we have the

00:36:52,610 --> 00:36:56,630
problem that they

00:36:53,609 --> 00:36:59,119
Jem's which is a whole nother thing and

00:36:56,630 --> 00:37:01,920
so there are some really tricky things

00:36:59,119 --> 00:37:03,359
for example to get this done to do it

00:37:01,920 --> 00:37:05,009
right what we really want to do is we

00:37:03,359 --> 00:37:07,910
want to get an updated version of JRuby

00:37:05,009 --> 00:37:09,809
in the archive that builds against JDK 8

00:37:07,910 --> 00:37:11,339
and then that'll solve that particular

00:37:09,809 --> 00:37:12,749
problem but that that's that's an

00:37:11,339 --> 00:37:23,670
example of how the transition is going

00:37:12,749 --> 00:37:28,230
to be tricky so to be continued Java a

00:37:23,670 --> 00:37:30,599
transition talk the so with Tomcat I

00:37:28,230 --> 00:37:32,160
just wanted I want to listen list this

00:37:30,599 --> 00:37:35,130
one explicitly because we've gotten to

00:37:32,160 --> 00:37:37,440
the point with Tomcats a little bit of a

00:37:35,130 --> 00:37:40,499
deviation from the Debian model in terms

00:37:37,440 --> 00:37:43,400
of supporting stable where we're no

00:37:40,499 --> 00:37:46,559
longer backporting so we no longer

00:37:43,400 --> 00:37:49,589
backporting everything to say tomcat 6 6

00:37:46,559 --> 00:37:52,769
o 35 instead effect we're actually

00:37:49,589 --> 00:37:55,200
proposing uploading 6 o 41 to old stable

00:37:52,769 --> 00:37:58,440
and I'm talking to Holger about that and

00:37:55,200 --> 00:38:01,440
we so we've reached this point I just

00:37:58,440 --> 00:38:02,759
kind of wanted to bring it up and let

00:38:01,440 --> 00:38:04,670
folks know we've reached this point with

00:38:02,759 --> 00:38:07,680
the security team needs these updates

00:38:04,670 --> 00:38:11,249
and we're currently the way we're

00:38:07,680 --> 00:38:14,539
staffed with manpower we it it seems

00:38:11,249 --> 00:38:17,880
less dangerous to go to the new version

00:38:14,539 --> 00:38:19,980
but but that feels odd to me having been

00:38:17,880 --> 00:38:22,380
in you know that's that hasn't been the

00:38:19,980 --> 00:38:23,970
Debian way in the past you know and so I

00:38:22,380 --> 00:38:29,009
just wanted to bring that up as a topic

00:38:23,970 --> 00:38:30,900
and maybe hear comments and ideas for

00:38:29,009 --> 00:38:32,339
that and one of the things because I'm

00:38:30,900 --> 00:38:33,599
not gonna I've been hogging the mic so

00:38:32,339 --> 00:38:35,519
much but in terms of getting more

00:38:33,599 --> 00:38:37,650
contributors those in the room and those

00:38:35,519 --> 00:38:39,869
listening to the stream we make it sound

00:38:37,650 --> 00:38:41,970
so bleak and all it's a I think it's a

00:38:39,869 --> 00:38:44,279
blast in the fun these are interesting

00:38:41,970 --> 00:38:46,440
problem these are some real kind of

00:38:44,279 --> 00:38:47,670
gnarly engineering problems plenty of

00:38:46,440 --> 00:38:51,480
meat to sink your teeth into maybe

00:38:47,670 --> 00:38:53,549
Andrew wants to comment on that so if

00:38:51,480 --> 00:38:56,609
you're interested Debian Java you know

00:38:53,549 --> 00:38:58,559
at least Debian org please feel free we

00:38:56,609 --> 00:39:00,480
welcome all types or contributions

00:38:58,559 --> 00:39:02,610
there's healthy was a lot of sponsoring

00:39:00,480 --> 00:39:05,930
going on there and

00:39:02,610 --> 00:39:05,930
anyone else who'd like to speak please

00:39:07,400 --> 00:39:13,440
yeah I mean this business of not

00:39:11,820 --> 00:39:16,110
backporting security problems it makes

00:39:13,440 --> 00:39:17,400
it it makes me unhappy as well then I

00:39:16,110 --> 00:39:19,440
speak from a position of massive

00:39:17,400 --> 00:39:22,830
ignorance because I don't use Tomcat at

00:39:19,440 --> 00:39:24,990
all but you know from every other

00:39:22,830 --> 00:39:26,640
package I've maintains you know we

00:39:24,990 --> 00:39:30,780
always were the security problems we

00:39:26,640 --> 00:39:32,250
always back port them but I guess we

00:39:30,780 --> 00:39:33,570
have to do something for our users and

00:39:32,250 --> 00:39:38,160
in the end if that means moving to a

00:39:33,570 --> 00:39:43,140
newer version it's better than not

00:39:38,160 --> 00:39:47,190
fixing the bugs at all there is

00:39:43,140 --> 00:39:49,260
precedent for it you know for a while

00:39:47,190 --> 00:39:51,810
years ago I used to maintain the bind

00:39:49,260 --> 00:39:55,950
packaging domain name service stuff and

00:39:51,810 --> 00:39:58,740
there were at least two times where some

00:39:55,950 --> 00:40:02,220
issue upstream resulted in a new release

00:39:58,740 --> 00:40:04,680
and not from which it would have not

00:40:02,220 --> 00:40:08,520
been easy to back port a specific

00:40:04,680 --> 00:40:11,960
security fix and the discussion and

00:40:08,520 --> 00:40:14,760
resulting decision sort of came down to

00:40:11,960 --> 00:40:17,010
were you did you have a higher degree of

00:40:14,760 --> 00:40:19,050
confidence in the quality of solution

00:40:17,010 --> 00:40:21,480
you'd be delivering to our end users of

00:40:19,050 --> 00:40:24,030
trying to generate a debian specific

00:40:21,480 --> 00:40:26,490
back porting patch which might or might

00:40:24,030 --> 00:40:28,950
not get a lot of testing and attention

00:40:26,490 --> 00:40:33,480
or accepting the fact that there was a

00:40:28,950 --> 00:40:35,610
large intense you know very technically

00:40:33,480 --> 00:40:37,710
astute community working to ensure that

00:40:35,610 --> 00:40:39,960
the new upstream version really did all

00:40:37,710 --> 00:40:42,720
the right things and was it better for

00:40:39,960 --> 00:40:45,660
our users to just put that in these are

00:40:42,720 --> 00:40:47,640
never easy discussions and I would not

00:40:45,660 --> 00:40:49,350
begin to suggest that you know our

00:40:47,640 --> 00:40:51,060
stable release managers will ever be

00:40:49,350 --> 00:40:54,000
happy having to have that conversation

00:40:51,060 --> 00:40:55,470
but there certainly have been times in

00:40:54,000 --> 00:40:57,690
the past where it was clearly the right

00:40:55,470 --> 00:40:59,580
answer to just accept a new version put

00:40:57,690 --> 00:41:03,240
it into a stable update or put it into a

00:40:59,580 --> 00:41:04,950
back port depends how compatible AIDS as

00:41:03,240 --> 00:41:06,870
well you know how much yeah are we gonna

00:41:04,950 --> 00:41:08,400
break everyone's with void you know if

00:41:06,870 --> 00:41:10,090
you probably everyone's name service

00:41:08,400 --> 00:41:15,400
they'll be quite happy

00:41:10,090 --> 00:41:23,680
we've got five minutes so I think any

00:41:15,400 --> 00:41:26,680
more comments O'Connor I'm just hoping

00:41:23,680 --> 00:41:28,930
that the gobby document now has all this

00:41:26,680 --> 00:41:31,060
sort of stuff in it and maybe we can get

00:41:28,930 --> 00:41:32,680
it already released give any an

00:41:31,060 --> 00:41:34,420
executive summary up there and then send

00:41:32,680 --> 00:41:35,320
that to the deputy and Java list so that

00:41:34,420 --> 00:41:37,030
people who haven't been here

00:41:35,320 --> 00:41:38,830
particularly you know we've talked about

00:41:37,030 --> 00:41:40,480
some quite radical policy changes we

00:41:38,830 --> 00:41:42,130
should try and get a summary of this

00:41:40,480 --> 00:41:45,190
discussion on the list so everyone else

00:41:42,130 --> 00:41:46,870
can particularly you know Emanuel who's

00:41:45,190 --> 00:41:49,660
not here does an awful lot of work and

00:41:46,870 --> 00:41:51,340
I'd want to keep him on board absolutely

00:41:49,660 --> 00:41:53,050
agree I'll just announce until we touch

00:41:51,340 --> 00:41:55,660
every single with a point there because

00:41:53,050 --> 00:41:57,160
I'm tired a all of you crafty packages

00:41:55,660 --> 00:41:59,920
actually an email exchange with the

00:41:57,160 --> 00:42:03,100
manual regarding this and and so the the

00:41:59,920 --> 00:42:06,460
take right now is as long as there's not

00:42:03,100 --> 00:42:08,200
an RC bug we're just going to continue

00:42:06,460 --> 00:42:10,990
to bring things forward but that we will

00:42:08,200 --> 00:42:13,480
draw belief packages with extreme

00:42:10,990 --> 00:42:16,660
prejudice if they end up taking too much

00:42:13,480 --> 00:42:19,240
time it's one of these things so the I

00:42:16,660 --> 00:42:21,880
got real active with the team in 2010

00:42:19,240 --> 00:42:23,650
and that was when Torsten Verna was

00:42:21,880 --> 00:42:27,100
giving his talk about the dependency

00:42:23,650 --> 00:42:29,830
hell and there was a I think leading up

00:42:27,100 --> 00:42:32,110
probably 2008 to 2010 was maybe the

00:42:29,830 --> 00:42:34,240
heyday of Debbie and Java where a huge

00:42:32,110 --> 00:42:36,160
number of packages were added and there

00:42:34,240 --> 00:42:38,320
was a lot of support perhaps maybe even

00:42:36,160 --> 00:42:42,820
some day job corporate support I'm not

00:42:38,320 --> 00:42:44,050
sure but what one of the issues we have

00:42:42,820 --> 00:42:46,840
right now with the team is there a lot

00:42:44,050 --> 00:42:50,500
of packages that the active members on

00:42:46,840 --> 00:42:52,270
the team haven't actually worked on bugs

00:42:50,500 --> 00:42:55,200
get filed that's great another way to

00:42:52,270 --> 00:42:57,700
help you know I that's it's awesome our

00:42:55,200 --> 00:42:59,470
thank you to all of our bugs submitters

00:42:57,700 --> 00:43:02,500
and a lot of times they come with

00:42:59,470 --> 00:43:04,180
patches - I appreciate that but we you

00:43:02,500 --> 00:43:05,590
get if you get a patch and then you

00:43:04,180 --> 00:43:07,060
realize I don't even know how this build

00:43:05,590 --> 00:43:09,580
system where I'm it's it's about enough

00:43:07,060 --> 00:43:11,380
half the packages or CD BS half of them

00:43:09,580 --> 00:43:12,880
are dead helper map of them are may even

00:43:11,380 --> 00:43:16,290
half of them are ant and then half of

00:43:12,880 --> 00:43:16,290
them are super homegrown

00:43:16,579 --> 00:43:23,089
so so in maybe well I just want to kind

00:43:21,739 --> 00:43:25,609
of share that as part of this Baathist

00:43:23,089 --> 00:43:27,380
at least in private email we kind of

00:43:25,609 --> 00:43:29,390
agreed okay as long as they're not gonna

00:43:27,380 --> 00:43:32,390
proactively look for packages to call

00:43:29,390 --> 00:43:34,189
but I think the count now is about 780

00:43:32,390 --> 00:43:39,799
packages that are Java team maintained

00:43:34,189 --> 00:43:42,469
and that's for the SIA it's hard to

00:43:39,799 --> 00:43:44,209
judge the size of the team but that's

00:43:42,469 --> 00:43:48,499
touching a fair number of packages every

00:43:44,209 --> 00:43:49,880
week I think for folks and also quick

00:43:48,499 --> 00:43:50,449
well we're right at the thing thank you

00:43:49,880 --> 00:43:52,279
very much

00:43:50,449 --> 00:43:53,839
Matthew for organizing this and getting

00:43:52,279 --> 00:43:56,119
us together well thank you all for

00:43:53,839 --> 00:43:59,420
meaning I didn't stand here until talk

00:43:56,119 --> 00:44:05,059
will afternoon anymore anymore the last

00:43:59,420 --> 00:44:07,219
thoughts or anyone I'm interested in the

00:44:05,059 --> 00:44:10,369
reproducible builds effort and one of

00:44:07,219 --> 00:44:13,789
the things that is on the list of things

00:44:10,369 --> 00:44:16,910
that aren't reproducible are timestamps

00:44:13,789 --> 00:44:19,670
in jars and timestamps in Java doc

00:44:16,910 --> 00:44:22,189
generated documentation it would there

00:44:19,670 --> 00:44:24,439
be any real objection if we made these

00:44:22,189 --> 00:44:26,449
or if we attempted to make these

00:44:24,439 --> 00:44:30,410
deterministic based on like the

00:44:26,449 --> 00:44:34,519
timestamp of the changelog no yeah

00:44:30,410 --> 00:44:36,259
gopher just engineering time yeah well I

00:44:34,519 --> 00:44:38,449
think we're out of time now so thank you

00:44:36,259 --> 00:44:40,189
all for coming I think it's been quite

00:44:38,449 --> 00:44:42,619
useful and we'll have a discussion on

00:44:40,189 --> 00:44:44,829
debian Java about some of these ideas in

00:44:42,619 --> 00:44:44,829
due course

00:44:52,260 --> 00:44:54,829

YouTube URL: https://www.youtube.com/watch?v=lI1p4tydqf4


