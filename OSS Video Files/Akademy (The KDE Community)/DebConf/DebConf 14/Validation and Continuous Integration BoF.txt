Title: Validation and Continuous Integration BoF
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Neil Williams

At: DebConf14
https://debconf14.debconf.org/
Room: Room 328
Scheduled start: 2014-08-28 13:30:00
Captions: 
	00:00:00,030 --> 00:00:04,380
this is a buff so I'm hoping for a lot

00:00:02,220 --> 00:00:06,450
of contribution from the floor there's a

00:00:04,380 --> 00:00:08,820
copy document which is linked up on the

00:00:06,450 --> 00:00:12,090
slides there so please if you've got gob

00:00:08,820 --> 00:00:14,490
e05 installed connect to Coby Depp in

00:00:12,090 --> 00:00:17,760
the dog and you'll find the the text

00:00:14,490 --> 00:00:19,050
document there so keep updating things

00:00:17,760 --> 00:00:20,939
in there there's only a few little

00:00:19,050 --> 00:00:22,910
pointers in there at the moment most of

00:00:20,939 --> 00:00:27,029
the content I'm hoping will come from

00:00:22,910 --> 00:00:28,560
everybody else so we're looking at

00:00:27,029 --> 00:00:31,439
validation and continuous integration

00:00:28,560 --> 00:00:35,370
what are we doing in Debian what can we

00:00:31,439 --> 00:00:36,120
do what we need to add to the system so

00:00:35,370 --> 00:00:38,219
that we can do better

00:00:36,120 --> 00:00:40,460
validation of what we're trying to

00:00:38,219 --> 00:00:43,469
achieve what we hoping to actually get

00:00:40,460 --> 00:00:46,469
from our validation systems so if we

00:00:43,469 --> 00:00:48,239
look at our starting point

00:00:46,469 --> 00:00:50,149
we've got player parts you've had that

00:00:48,239 --> 00:00:52,940
for quite some time now so that's doing

00:00:50,149 --> 00:00:55,350
installation removal upgrade

00:00:52,940 --> 00:00:57,660
reinstallation testing all that kind of

00:00:55,350 --> 00:01:00,570
stuff that's a very useful tool if

00:00:57,660 --> 00:01:03,090
conscious on one package at a time ci

00:01:00,570 --> 00:01:05,549
Debian on net conscious in one package

00:01:03,090 --> 00:01:07,439
at a time but runs the unit tests or

00:01:05,549 --> 00:01:12,840
runs a test suite for the install

00:01:07,439 --> 00:01:15,420
package it's there's some overlap there

00:01:12,840 --> 00:01:17,340
some of the packages have to run the

00:01:15,420 --> 00:01:21,060
upstream test suite which is actually

00:01:17,340 --> 00:01:22,710
testing the code in the source not

00:01:21,060 --> 00:01:25,350
necessarily the install package that's

00:01:22,710 --> 00:01:28,770
because we had idea of in testing just

00:01:25,350 --> 00:01:30,420
the install package is something

00:01:28,770 --> 00:01:32,850
familiar to how a lot of the upstream

00:01:30,420 --> 00:01:35,430
unit tests are actually created so the

00:01:32,850 --> 00:01:39,060
support isn't necessarily there to do it

00:01:35,430 --> 00:01:42,210
against a different path another big

00:01:39,060 --> 00:01:45,180
part of our validation is the archive

00:01:42,210 --> 00:01:46,710
wide rebuilds we can do more without

00:01:45,180 --> 00:01:48,270
we've got we're getting faster and

00:01:46,710 --> 00:01:50,310
faster machines for multiple

00:01:48,270 --> 00:01:51,899
architectures so we can do archive

00:01:50,310 --> 00:01:55,229
rebuilds on different architectures in

00:01:51,899 --> 00:01:59,729
the future so each of those concentrate

00:01:55,229 --> 00:02:03,479
on one package of the time larval is the

00:01:59,729 --> 00:02:06,439
new part of that equation and what I'm

00:02:03,479 --> 00:02:09,030
hoping with lava it can already test

00:02:06,439 --> 00:02:11,129
kernels and boot loaders and I can start

00:02:09,030 --> 00:02:14,080
to test the actual system so you start

00:02:11,129 --> 00:02:16,150
and test multiple sets of packages again

00:02:14,080 --> 00:02:19,230
other sets of packages you can do it

00:02:16,150 --> 00:02:22,750
across a whole range of nodes as well so

00:02:19,230 --> 00:02:25,000
the full details of lava will be in the

00:02:22,750 --> 00:02:26,320
talk at the end of today so actually get

00:02:25,000 --> 00:02:30,310
a full and understanding of what lava

00:02:26,320 --> 00:02:34,180
can do well think of it as a test

00:02:30,310 --> 00:02:36,190
environment for initially for kernels

00:02:34,180 --> 00:02:38,800
and bootloaders but then escalating up

00:02:36,190 --> 00:02:40,780
to the system to do testing across

00:02:38,800 --> 00:02:43,630
multiple nodes and allowing you to

00:02:40,780 --> 00:02:45,250
actually control the data been exchanged

00:02:43,630 --> 00:02:46,720
between different machines and it's

00:02:45,250 --> 00:02:47,980
cross architecture so there's a whole

00:02:46,720 --> 00:02:50,740
range of things you can actually do

00:02:47,980 --> 00:02:52,090
there but once we've actually gone

00:02:50,740 --> 00:02:54,780
through some of those methods we can

00:02:52,090 --> 00:02:57,460
talk more about what we're trying to

00:02:54,780 --> 00:02:59,190
what kind of targets we want we still

00:02:57,460 --> 00:03:02,380
want individual packages to be

00:02:59,190 --> 00:03:04,450
validation validated and we need the

00:03:02,380 --> 00:03:06,340
continuous integration loops back for

00:03:04,450 --> 00:03:08,620
the maintainer individual packages is

00:03:06,340 --> 00:03:10,600
where most of this stuff comes in but we

00:03:08,620 --> 00:03:14,440
even we also need to be make sure that

00:03:10,600 --> 00:03:17,950
we are able to test sets of packages

00:03:14,440 --> 00:03:20,560
sets packages either dependencies which

00:03:17,950 --> 00:03:24,510
is somewhat or plyo parts can do and

00:03:20,560 --> 00:03:26,800
again CI debonaire can do but also

00:03:24,510 --> 00:03:29,020
packages that are related by something

00:03:26,800 --> 00:03:31,120
that's more of a user space thing about

00:03:29,020 --> 00:03:32,680
people to intended to use this too will

00:03:31,120 --> 00:03:35,020
also tend to have this tool installed

00:03:32,680 --> 00:03:36,489
then there's no dependency relation but

00:03:35,020 --> 00:03:40,150
do they work well together

00:03:36,489 --> 00:03:43,750
can we actually test that these things

00:03:40,150 --> 00:03:45,430
side by side when you've got Forks of

00:03:43,750 --> 00:03:47,590
the same source code or the original

00:03:45,430 --> 00:03:49,150
original the same source code can even

00:03:47,590 --> 00:03:51,130
install them side-by-side can you build

00:03:49,150 --> 00:03:53,530
things against one and against the other

00:03:51,130 --> 00:03:56,040
can you switch between them and can you

00:03:53,530 --> 00:04:01,900
actually compare them those kinds of

00:03:56,040 --> 00:04:07,959
tasks so they might come up hey that's

00:04:01,900 --> 00:04:10,420
nice loud yeah so I'm Tony is that the

00:04:07,959 --> 00:04:12,100
comment there about CI Debian that can

00:04:10,420 --> 00:04:14,830
actually help with collections of

00:04:12,100 --> 00:04:16,919
related packages so installer on

00:04:14,830 --> 00:04:19,480
bootstraps the Installer testing is

00:04:16,919 --> 00:04:22,600
quite manual at the moment Steve does a

00:04:19,480 --> 00:04:24,250
lot of testing with the CD images KB

00:04:22,600 --> 00:04:26,260
does a lot of testing for his own di

00:04:24,250 --> 00:04:27,400
installer bills we actually have the DI

00:04:26,260 --> 00:04:32,680
bills they're the people

00:04:27,400 --> 00:04:34,360
test bootstrapping we are regularly

00:04:32,680 --> 00:04:36,039
bootstrapping a new architecture we're

00:04:34,360 --> 00:04:39,580
putting new tools and that can actually

00:04:36,039 --> 00:04:41,770
help and actually develop a way of

00:04:39,580 --> 00:04:43,690
bootstrapping so we need to validate

00:04:41,770 --> 00:04:46,090
whether we can actually track these

00:04:43,690 --> 00:04:47,860
things and it's not necessarily a case

00:04:46,090 --> 00:04:49,389
of waiting until the next new

00:04:47,860 --> 00:04:52,300
architecture string turns up indie

00:04:49,389 --> 00:04:53,830
package it's can we pretend that there's

00:04:52,300 --> 00:04:57,820
a new architecture called fubar

00:04:53,830 --> 00:04:59,919
I can we build for it so can we simulate

00:04:57,820 --> 00:05:03,430
these things can we actually go through

00:04:59,919 --> 00:05:05,080
the the logical flow of the tools that

00:05:03,430 --> 00:05:09,250
we've got and show that they do actually

00:05:05,080 --> 00:05:13,090
work can we identify the dependency

00:05:09,250 --> 00:05:14,289
loops in advance independent of which

00:05:13,090 --> 00:05:19,180
architecture we're looking at at the

00:05:14,289 --> 00:05:21,580
time Colonels and boot loaders well yeah

00:05:19,180 --> 00:05:23,050
there's lots of different kernel builds

00:05:21,580 --> 00:05:25,150
that all need to be validated they all

00:05:23,050 --> 00:05:26,979
need some kind of proof the view do

00:05:25,150 --> 00:05:29,440
actually boot now a lot of that will

00:05:26,979 --> 00:05:31,599
happen quite easily on x86 what are we

00:05:29,440 --> 00:05:33,099
doing for the other architectures are we

00:05:31,599 --> 00:05:34,510
even testing a lot of the kernels that

00:05:33,099 --> 00:05:38,050
we've actually got up there and boot

00:05:34,510 --> 00:05:41,520
loaders we're probably only testing grew

00:05:38,050 --> 00:05:44,889
up on x86 with the standard Linux kernel

00:05:41,520 --> 00:05:46,960
what can we do to extend that and then

00:05:44,889 --> 00:05:48,820
something that comes up but again again

00:05:46,960 --> 00:05:51,250
and again from the release team point of

00:05:48,820 --> 00:05:53,110
view is yeah that's all well and good

00:05:51,250 --> 00:05:55,690
because you're starting with a freshly

00:05:53,110 --> 00:05:57,970
installed system you've got no user data

00:05:55,690 --> 00:05:59,889
on it you're not messing around with it

00:05:57,970 --> 00:06:03,970
and changing the configuration of stuff

00:05:59,889 --> 00:06:05,380
how do we validate a system that's

00:06:03,970 --> 00:06:07,150
closer to what our users are actually

00:06:05,380 --> 00:06:09,520
got when they come to upgrade from one

00:06:07,150 --> 00:06:11,830
stable release to the next can we

00:06:09,520 --> 00:06:14,409
anonymize dirty systems in the suitable

00:06:11,830 --> 00:06:16,690
can we get people to trust us to give us

00:06:14,409 --> 00:06:18,280
their systems are not amazed and then

00:06:16,690 --> 00:06:21,490
run them through these kinds of keep it

00:06:18,280 --> 00:06:24,220
there as a rolling dirty system can we

00:06:21,490 --> 00:06:28,210
develop tools that will artificially

00:06:24,220 --> 00:06:31,479
create changes the configuration files

00:06:28,210 --> 00:06:33,760
for LDAP and other complex tools can we

00:06:31,479 --> 00:06:35,620
artificially break someone's XA or

00:06:33,760 --> 00:06:38,420
postfix config and see whether the other

00:06:35,620 --> 00:06:43,340
tool survived these kinds of aggressive

00:06:38,420 --> 00:06:45,260
of testing can we do that and then all

00:06:43,340 --> 00:06:47,330
this validation is not much use if it

00:06:45,260 --> 00:06:49,280
doesn't come back to the developers we

00:06:47,330 --> 00:06:51,950
need to integrated we need to allow the

00:06:49,280 --> 00:06:54,850
developers to get proper notification of

00:06:51,950 --> 00:06:58,850
what's going on and how do we do that

00:06:54,850 --> 00:07:00,890
how often do we test that's generally

00:06:58,850 --> 00:07:05,420
going to come down to how much hardware

00:07:00,890 --> 00:07:07,160
can we throw at it and how quickly can

00:07:05,420 --> 00:07:09,560
we push the through the tests how it

00:07:07,160 --> 00:07:11,990
exhausts if you want the test to be the

00:07:09,560 --> 00:07:13,640
more we get this problem in lava a lot a

00:07:11,990 --> 00:07:16,100
lot of the Android people put in tests

00:07:13,640 --> 00:07:18,230
that run for 24 hours and then they put

00:07:16,100 --> 00:07:20,720
in two jobs in one day you know that

00:07:18,230 --> 00:07:23,060
doesn't work if you if you're submitting

00:07:20,720 --> 00:07:25,220
jobs regularly you've got to at least

00:07:23,060 --> 00:07:27,200
balance did I invent the time it will

00:07:25,220 --> 00:07:30,560
take to run the tests or the time

00:07:27,200 --> 00:07:33,560
between the submissions or add more

00:07:30,560 --> 00:07:35,780
hardware now it's relatively easy for

00:07:33,560 --> 00:07:37,550
the other places to just throw money at

00:07:35,780 --> 00:07:40,760
the problem it's bit harder for dev you

00:07:37,550 --> 00:07:45,980
might not have that that ability to add

00:07:40,760 --> 00:07:49,190
yet more hardware we made it and how do

00:07:45,980 --> 00:07:51,380
we get the developers to be aware it's

00:07:49,190 --> 00:07:54,170
not necessarily enough to have an RSS

00:07:51,380 --> 00:07:56,750
feed or a pointer in the pts that says

00:07:54,170 --> 00:07:58,730
something your package is broken it's

00:07:56,750 --> 00:08:01,640
not necessarily enough just to tell the

00:07:58,730 --> 00:08:04,490
maintainer this package is broken the

00:08:01,640 --> 00:08:06,020
maintainer is going to need much like a

00:08:04,490 --> 00:08:08,060
upstream develop but they're going to

00:08:06,020 --> 00:08:10,610
need context they're gonna need to know

00:08:08,060 --> 00:08:13,970
well why is it broken where where's the

00:08:10,610 --> 00:08:15,620
end of the test longer that you did what

00:08:13,970 --> 00:08:17,870
kind of breakage is it is this something

00:08:15,620 --> 00:08:19,730
that can fix easily with my next commit

00:08:17,870 --> 00:08:22,370
because I knew what and they went wrong

00:08:19,730 --> 00:08:24,590
or is it something actually oh that's a

00:08:22,370 --> 00:08:27,590
real problem that's have to go up to

00:08:24,590 --> 00:08:30,140
someone else and once we start getting

00:08:27,590 --> 00:08:32,570
into the notifications part how do we

00:08:30,140 --> 00:08:34,760
stop overloading maintain is with them

00:08:32,570 --> 00:08:36,229
with four emails of days and you've got

00:08:34,760 --> 00:08:40,360
critical failures in this package and

00:08:36,229 --> 00:08:43,750
that package in this pack in topic so

00:08:40,360 --> 00:08:47,990
let's start thinking about where we are

00:08:43,750 --> 00:08:51,380
with the tools as they stand or what are

00:08:47,990 --> 00:08:52,220
the what what do people want from these

00:08:51,380 --> 00:08:53,810
validation

00:08:52,220 --> 00:08:58,780
that's our the other tools we're not

00:08:53,810 --> 00:09:01,070
using yet or are there other kinds of

00:08:58,780 --> 00:09:03,470
validation that we need to think about

00:09:01,070 --> 00:09:09,190
we've got some ideas on what's missing

00:09:03,470 --> 00:09:09,190
in definitely note your microphone

00:09:10,870 --> 00:09:16,130
please someone make sure these comments

00:09:13,070 --> 00:09:17,890
go into the copy document so for the

00:09:16,130 --> 00:09:20,690
moment what we are doing is that you

00:09:17,890 --> 00:09:24,920
kind of test after the packages are

00:09:20,690 --> 00:09:29,630
uploaded and I think I believe that the

00:09:24,920 --> 00:09:31,640
good to do what really a CI is is to

00:09:29,630 --> 00:09:35,510
validate the packages against these

00:09:31,640 --> 00:09:38,270
testers these tests before it gets into

00:09:35,510 --> 00:09:39,770
dark i'ma yep so I think that would be

00:09:38,270 --> 00:09:41,810
the first thing that we should work on

00:09:39,770 --> 00:09:45,440
throughout Skinner finished rash picture

00:09:41,810 --> 00:09:48,940
in the FTP master that or something yeah

00:09:45,440 --> 00:09:51,290
well yeah there's there's the idea that

00:09:48,940 --> 00:09:53,510
unstable shouldn't be necessarily a

00:09:51,290 --> 00:09:57,230
free-for-all for absolutely everybody to

00:09:53,510 --> 00:09:59,510
break every package that if there's a an

00:09:57,230 --> 00:10:03,140
auto package test in the package when it

00:09:59,510 --> 00:10:04,760
is uploaded then why not have a short

00:10:03,140 --> 00:10:06,650
delay there's a delay anyway because

00:10:04,760 --> 00:10:08,120
I've just uploaded a new version of a

00:10:06,650 --> 00:10:10,340
package it's not going to show up in the

00:10:08,120 --> 00:10:12,260
on the merest of tomorrow not only your

00:10:10,340 --> 00:10:15,020
two packages few cards and everything

00:10:12,260 --> 00:10:17,800
you know what the whole set yeah that

00:10:15,020 --> 00:10:20,600
gets back into the even if it's not

00:10:17,800 --> 00:10:22,850
rejecting packages at least one the

00:10:20,600 --> 00:10:26,480
developer at the time of the plume yeah

00:10:22,850 --> 00:10:28,490
the you get into the the time delay

00:10:26,480 --> 00:10:31,850
there because few parts in particular

00:10:28,490 --> 00:10:35,620
can take quite a long time to run but

00:10:31,850 --> 00:10:38,060
yeah we wish we shouldn't necessarily be

00:10:35,620 --> 00:10:40,910
waiting for these systems whichever one

00:10:38,060 --> 00:10:43,089
they are to poll the archive and say

00:10:40,910 --> 00:10:46,460
tell me what happened since I last

00:10:43,089 --> 00:10:48,920
tested but actually for the upload to

00:10:46,460 --> 00:10:51,820
poke the CI and say something's happened

00:10:48,920 --> 00:10:51,820
Q this

00:11:03,350 --> 00:11:11,880
using a code review tool IQ plug you

00:11:06,840 --> 00:11:13,290
gave it on ciw net and get we don't I

00:11:11,880 --> 00:11:14,520
don't know of any teams at your desk

00:11:13,290 --> 00:11:16,650
code reviews that's something that

00:11:14,520 --> 00:11:19,860
probably would be interesting to explore

00:11:16,650 --> 00:12:01,050
- Antonia got near any comments on

00:11:19,860 --> 00:12:03,600
whether we can have a poke yes it's a

00:12:01,050 --> 00:12:06,300
third party like I fell who's running

00:12:03,600 --> 00:12:08,190
the test and it's my package well the

00:12:06,300 --> 00:12:10,650
data about the failures on his computer

00:12:08,190 --> 00:12:13,620
not and see it happened on there or on

00:12:10,650 --> 00:12:17,040
mine so it would be nice to be able to

00:12:13,620 --> 00:12:19,190
for someone to just poke see I dive dive

00:12:17,040 --> 00:12:22,560
in dotnet if there's enough resources

00:12:19,190 --> 00:12:26,040
available to say put this into the queue

00:12:22,560 --> 00:12:31,560
for a normal test that is then visible

00:12:26,040 --> 00:12:34,110
to everybody okay so it's like making

00:12:31,560 --> 00:12:36,020
possible to users to provide like I run

00:12:34,110 --> 00:12:39,960
this test on my machine

00:12:36,020 --> 00:12:42,150
or just to add add it to the queue just

00:12:39,960 --> 00:12:45,300
like lava tool does with XML RPC can we

00:12:42,150 --> 00:12:48,060
do something but actually does the

00:12:45,300 --> 00:12:50,900
authentication to allow someone whether

00:12:48,060 --> 00:12:53,640
GPG signature or whatever that just says

00:12:50,900 --> 00:12:56,880
this this source package put it into

00:12:53,640 --> 00:12:58,560
your to keep into into the queue to be

00:12:56,880 --> 00:13:01,110
run as soon as you can an arbitrary

00:12:58,560 --> 00:13:02,880
source package from anywhere from the

00:13:01,110 --> 00:13:04,750
archive it would need to be a pack of

00:13:02,880 --> 00:13:07,480
families if it's

00:13:04,750 --> 00:13:15,040
I will run it anyway as much as it can

00:13:07,480 --> 00:13:17,980
yeah my point was a restaurateur value

00:13:15,040 --> 00:13:21,220
of enabling hold our test

00:13:17,980 --> 00:13:23,140
infrastructures to run against a catch

00:13:21,220 --> 00:13:25,030
is not in the archive ok versions of

00:13:23,140 --> 00:13:27,070
packages done not in the archive another

00:13:25,030 --> 00:13:30,910
case where with this would be useful is

00:13:27,070 --> 00:13:33,490
mentors Debian net if you a new one a

00:13:30,910 --> 00:13:36,430
new package see that it validates

00:13:33,490 --> 00:13:38,620
against all tests that we have you are

00:13:36,430 --> 00:13:42,460
much more likely to dig into sponsoring

00:13:38,620 --> 00:13:45,250
it then if it doesn't yeah how long does

00:13:42,460 --> 00:13:50,350
the CI debit not net run take for the

00:13:45,250 --> 00:13:53,490
entire archive down and 23 days so we

00:13:50,350 --> 00:13:53,490
may well need to throw more hardware

00:13:53,700 --> 00:14:01,090
yeah yeah that's yeah that's a hardware

00:13:58,570 --> 00:14:03,310
issue we can just throw hardware at that

00:14:01,090 --> 00:14:04,990
and get the time down so I have two

00:14:03,310 --> 00:14:06,820
comments to make one is on this stuff I

00:14:04,990 --> 00:14:08,920
don't know how close PBA's are but if we

00:14:06,820 --> 00:14:10,089
get them if we really cool if this is

00:14:08,920 --> 00:14:11,170
supposed to have an automated step where

00:14:10,089 --> 00:14:13,120
you can say put these packages and

00:14:11,170 --> 00:14:15,010
unstable now right so we really called

00:14:13,120 --> 00:14:16,600
it at this step or before this step you

00:14:15,010 --> 00:14:18,820
could say please run these tests on my

00:14:16,600 --> 00:14:21,040
PPA packages and yeah only these are ok

00:14:18,820 --> 00:14:22,150
then do the copy and so unstable and my

00:14:21,040 --> 00:14:24,850
second comment is about what you're

00:14:22,150 --> 00:14:26,589
talking about dirty environments all of

00:14:24,850 --> 00:14:28,839
these tests especially I'm taking the CI

00:14:26,589 --> 00:14:30,880
or to packaged test tests these run in

00:14:28,839 --> 00:14:31,930
like basically a chroot yeah which is

00:14:30,880 --> 00:14:35,110
not actually a very realistic

00:14:31,930 --> 00:14:36,670
environment you know so even one step

00:14:35,110 --> 00:14:38,530
before dirty environments we could run

00:14:36,670 --> 00:14:41,620
these things in clean desktop systems

00:14:38,530 --> 00:14:42,670
maybe so take a desktop iso boots it and

00:14:41,620 --> 00:14:43,870
then run your tests inside there and

00:14:42,670 --> 00:14:45,610
then at least you have things like login

00:14:43,870 --> 00:14:49,000
d and proper init system and all this

00:14:45,610 --> 00:14:50,680
stuff right I think it's an idea ok it's

00:14:49,000 --> 00:14:53,140
not full systems that have been used by

00:14:50,680 --> 00:14:56,320
a user for difficulty with using a

00:14:53,140 --> 00:14:59,140
desktop like that is that a lot of the

00:14:56,320 --> 00:15:01,930
times tools that are useful for a

00:14:59,140 --> 00:15:04,600
desktop user are difficult to automate

00:15:01,930 --> 00:15:08,580
and script so if you've got something

00:15:04,600 --> 00:15:12,130
which would cause a password prompt or

00:15:08,580 --> 00:15:14,440
require some kind of and clicking access

00:15:12,130 --> 00:15:16,810
rather than actually command-line then

00:15:14,440 --> 00:15:18,120
it's harder to script that inside the

00:15:16,810 --> 00:15:19,860
desktop OS so

00:15:18,120 --> 00:15:21,750
you start writing rappers and then you

00:15:19,860 --> 00:15:24,510
can you're actually testing the rappers

00:15:21,750 --> 00:15:25,890
not the actual software so there's

00:15:24,510 --> 00:15:27,450
there's difficult issues around that

00:15:25,890 --> 00:15:29,700
because we that's what you started to

00:15:27,450 --> 00:15:31,260
think more about system testing and you

00:15:29,700 --> 00:15:34,350
started to think well okay well now we

00:15:31,260 --> 00:15:37,640
need a graphics capture card and we need

00:15:34,350 --> 00:15:41,910
to be able to compare mm screenshots

00:15:37,640 --> 00:15:43,050
from no static screenshots against the

00:15:41,910 --> 00:15:46,589
next screen shots and say something

00:15:43,050 --> 00:15:48,570
quickly so we have an Ubuntu we have

00:15:46,589 --> 00:15:50,400
tools to call auto fire which can do

00:15:48,570 --> 00:15:52,230
some of this kind of stuff which is like

00:15:50,400 --> 00:15:54,029
so what's the cheetah can cute currently

00:15:52,230 --> 00:15:55,380
and you can say things like open the

00:15:54,029 --> 00:15:56,580
application click this button and then

00:15:55,380 --> 00:15:58,800
director the application is displaying

00:15:56,580 --> 00:16:00,570
this thing and do this kind of stuff so

00:15:58,800 --> 00:16:01,860
you you quickly get into problems where

00:16:00,570 --> 00:16:03,029
you're having some mock parts of the

00:16:01,860 --> 00:16:04,620
system because then you're what because

00:16:03,029 --> 00:16:05,880
you want a bit to compare the outputs

00:16:04,620 --> 00:16:07,080
and you don't it to depend on the real

00:16:05,880 --> 00:16:09,029
hardware and things like that so this is

00:16:07,080 --> 00:16:10,830
where there are problems but there are

00:16:09,029 --> 00:16:12,360
tools which can do some of this I'm just

00:16:10,830 --> 00:16:13,710
saying it might be a step the step up

00:16:12,360 --> 00:16:15,690
for mature roots but it doesn't reduce

00:16:13,710 --> 00:16:17,220
its own difficulties it's true so who

00:16:15,690 --> 00:16:19,820
wants a who fancies something fluent in

00:16:17,220 --> 00:16:19,820
that for Debian

00:16:21,830 --> 00:16:26,580
so uh can you make sure it's getting

00:16:25,170 --> 00:16:27,900
into the copy document as well please

00:16:26,580 --> 00:16:30,209
someone to make sure all these comments

00:16:27,900 --> 00:16:33,810
okay any one thing that I would love to

00:16:30,209 --> 00:16:36,029
have in Debian is a kind of patch review

00:16:33,810 --> 00:16:39,060
system probably Gerrit because that's

00:16:36,029 --> 00:16:41,279
the most advanced in temper feature if

00:16:39,060 --> 00:16:42,930
there is something better easier to

00:16:41,279 --> 00:16:46,080
maintain because Garret is hard to

00:16:42,930 --> 00:16:50,520
maintain in production I wouldn't be

00:16:46,080 --> 00:16:52,890
against it but I only know carrot so can

00:16:50,520 --> 00:16:56,220
which is tied to get yeah so we could

00:16:52,890 --> 00:16:58,200
use D gate for example and then have a

00:16:56,220 --> 00:17:01,920
representation of all our packages in

00:16:58,200 --> 00:17:05,010
Debian on Garrett so that anyone could

00:17:01,920 --> 00:17:07,890
propose a patch against the package once

00:17:05,010 --> 00:17:10,829
the batch is sent then we would run all

00:17:07,890 --> 00:17:16,410
these individual tests so like

00:17:10,829 --> 00:17:17,939
rebuilding few parts adequate or

00:17:16,410 --> 00:17:21,030
whatever you want

00:17:17,939 --> 00:17:23,900
io2 package tests and whatever and only

00:17:21,030 --> 00:17:23,900
when these are

00:17:24,839 --> 00:17:32,080
passed and approved then the last one

00:17:29,830 --> 00:17:35,350
correct yes it gets a gets a plus one

00:17:32,080 --> 00:17:37,240
and then after any DG for example could

00:17:35,350 --> 00:17:39,160
be considered as a core developer and

00:17:37,240 --> 00:17:41,799
then approve patches if if the

00:17:39,160 --> 00:17:44,320
maintainer of the package agree with

00:17:41,799 --> 00:17:47,350
that I would have an already under no

00:17:44,320 --> 00:17:49,390
threshold and I'm yeast but I would love

00:17:47,350 --> 00:17:53,950
to have dial and and say that anything

00:17:49,390 --> 00:17:56,110
you can approve patches so of course it

00:17:53,950 --> 00:17:59,049
would need a lot of CPU and and and

00:17:56,110 --> 00:18:01,630
infrastructure do we have support from

00:17:59,049 --> 00:18:04,809
HP HP has HP cloud which they already

00:18:01,630 --> 00:18:06,820
use this way for OpenStack they I'm sure

00:18:04,809 --> 00:18:09,400
we would get a lot of support from them

00:18:06,820 --> 00:18:12,790
so if somebody wants to implement it I

00:18:09,400 --> 00:18:18,010
would have it so that's that's the first

00:18:12,790 --> 00:18:21,460
thing I'm justi'm comment on first

00:18:18,010 --> 00:18:22,870
section we have been a few people at the

00:18:21,460 --> 00:18:25,960
cheese and wine party who are already

00:18:22,870 --> 00:18:30,309
working on a prototype of what you're

00:18:25,960 --> 00:18:33,250
suggesting so it's currently sitting in

00:18:30,309 --> 00:18:35,200
the DSA apartment like you're requesting

00:18:33,250 --> 00:18:37,990
for recording resources but we have an

00:18:35,200 --> 00:18:41,110
idea or a vision of getting the carrot

00:18:37,990 --> 00:18:45,700
integration with what we exactly or what

00:18:41,110 --> 00:18:49,900
you proposed does it work with kit build

00:18:45,700 --> 00:18:54,250
package I mean it's completely unrelated

00:18:49,900 --> 00:18:57,580
to how you build it then yeah and the

00:18:54,250 --> 00:19:00,340
idea is that you can bring new

00:18:57,580 --> 00:19:04,780
developers also into deviant for for

00:19:00,340 --> 00:19:06,820
proposing stuff and the project owners

00:19:04,780 --> 00:19:09,010
the ones with the cording permissions on

00:19:06,820 --> 00:19:09,520
the repo can and decide what to do about

00:19:09,010 --> 00:19:12,130
it

00:19:09,520 --> 00:19:19,299
but the idears of course that it works

00:19:12,130 --> 00:19:21,730
with kit package and whatever I just

00:19:19,299 --> 00:19:23,590
wanted to make the point that the best

00:19:21,730 --> 00:19:26,080
way to start experimenting with Garrett

00:19:23,590 --> 00:19:28,150
is to convert an existing team to using

00:19:26,080 --> 00:19:30,910
it you don't need to have a full project

00:19:28,150 --> 00:19:32,799
wide approval to do that just start with

00:19:30,910 --> 00:19:33,700
a team you are involved on these people

00:19:32,799 --> 00:19:36,460
to work on that

00:19:33,700 --> 00:19:39,580
let's go ahead yeah ask the service to

00:19:36,460 --> 00:19:42,970
be set up and then start start with your

00:19:39,580 --> 00:19:45,720
team yeah yeah so I don't think it have

00:19:42,970 --> 00:19:47,740
the time to do it myself but anyway just

00:19:45,720 --> 00:19:49,149
but they're here somewhere hopefully

00:19:47,740 --> 00:19:51,070
it's in the notes and then someone else

00:19:49,149 --> 00:19:54,100
can picked up another thing that I think

00:19:51,070 --> 00:19:57,639
would be really helpful is that when I

00:19:54,100 --> 00:19:58,929
build a package it may break others but

00:19:57,639 --> 00:20:02,919
I don't know because I don't have enough

00:19:58,929 --> 00:20:05,919
time to check for it for example I do

00:20:02,919 --> 00:20:08,470
buy a module update and there so many

00:20:05,919 --> 00:20:11,320
other vital depend on it are you talking

00:20:08,470 --> 00:20:12,360
about direct or indirect dependencies or

00:20:11,320 --> 00:20:16,029
you're talking about complete

00:20:12,360 --> 00:20:17,980
dependencies yeah so dependencies is

00:20:16,029 --> 00:20:21,010
where CI Deb internet comes in because

00:20:17,980 --> 00:20:22,840
it'll it'll trigger a test when any of

00:20:21,010 --> 00:20:24,789
the dependencies of the package changes

00:20:22,840 --> 00:20:26,769
you don't get you don't just get tests

00:20:24,789 --> 00:20:28,840
when you change the package you get you

00:20:26,769 --> 00:20:32,440
get tests from when another package in

00:20:28,840 --> 00:20:35,230
your chain is updated yes but it should

00:20:32,440 --> 00:20:37,120
be done the other way it's like when I

00:20:35,230 --> 00:20:39,909
want to date a package which has various

00:20:37,120 --> 00:20:42,070
devices it should try to rebuild these

00:20:39,909 --> 00:20:42,669
other packages before my apologies

00:20:42,070 --> 00:20:45,669
accepted

00:20:42,669 --> 00:20:47,529
why well that I could fix T the

00:20:45,669 --> 00:20:49,929
reversible dependencies before protein

00:20:47,529 --> 00:20:53,049
my package yet are you talking about

00:20:49,929 --> 00:20:54,610
here about migrations to new new

00:20:53,049 --> 00:20:58,899
libraries and things are you okay that

00:20:54,610 --> 00:21:01,120
would work well we see libraries but it

00:20:58,899 --> 00:21:05,380
should be limited to that

00:21:01,120 --> 00:21:07,299
the I'm I'm thinking about the the idea

00:21:05,380 --> 00:21:09,730
of rebuilding I'm not sure why you'd

00:21:07,299 --> 00:21:12,820
rebuild all of the dependency chain

00:21:09,730 --> 00:21:15,370
because ok maybe I'm too much focused on

00:21:12,820 --> 00:21:18,370
Python because I've been doing that for

00:21:15,370 --> 00:21:20,679
a long long time and I like over the

00:21:18,370 --> 00:21:21,970
last two years but like the reverse

00:21:20,679 --> 00:21:24,370
build even Nancy's most of the time you

00:21:21,970 --> 00:21:27,190
have unit tests so it would fail to

00:21:24,370 --> 00:21:29,080
build if there's a problem yeah but

00:21:27,190 --> 00:21:30,610
that's for CEO David not now is

00:21:29,080 --> 00:21:32,980
currently doing it he's running the unit

00:21:30,610 --> 00:21:35,440
tests oh I see it's a trick of the

00:21:32,980 --> 00:21:38,620
trigger the unit tests of the actual

00:21:35,440 --> 00:21:40,480
dependencies as well but there's not

00:21:38,620 --> 00:21:43,840
what happens in there until use that if

00:21:40,480 --> 00:21:46,140
if a if a package very low down saying

00:21:43,840 --> 00:21:49,500
the Python tool chain changes

00:21:46,140 --> 00:21:52,680
than all of the packages that depend on

00:21:49,500 --> 00:21:54,870
that will be tested yeah yeah so if

00:21:52,680 --> 00:21:56,670
anything in the dependency chain for

00:21:54,870 --> 00:21:57,600
your package changes in your package

00:21:56,670 --> 00:21:59,820
gets tested again

00:21:57,600 --> 00:22:03,020
yeah so the Lowertown not change happens

00:21:59,820 --> 00:22:07,790
the more tests can add it to the kill

00:22:03,020 --> 00:22:10,860
but it happens after the build right

00:22:07,790 --> 00:22:12,360
okay what would be nice is to have it

00:22:10,860 --> 00:22:14,610
before they upload whatever I don't

00:22:12,360 --> 00:22:16,860
break anything yeah without that ties in

00:22:14,610 --> 00:22:19,860
again with the request for mentors that

00:22:16,860 --> 00:22:24,540
every not met and other changes long

00:22:19,860 --> 00:22:26,670
just that's why we have experimental so

00:22:24,540 --> 00:22:29,550
as soon as we have enough CPU power we

00:22:26,670 --> 00:22:30,930
can add experimental to CR and then run

00:22:29,550 --> 00:22:33,480
everything on this parameter so if you

00:22:30,930 --> 00:22:34,950
have a package and you're not sure if

00:22:33,480 --> 00:22:37,710
it's going to break anything you can

00:22:34,950 --> 00:22:41,150
explode it to experimental and then let

00:22:37,710 --> 00:22:41,150
the infrastructure run the test for you

00:22:42,110 --> 00:22:46,350
if that's not a satisfying answer

00:22:44,760 --> 00:22:48,330
because I don't know if I'm breaking

00:22:46,350 --> 00:22:50,280
things I want to know that the test data

00:22:48,330 --> 00:22:51,930
made it and I don't want to be too

00:22:50,280 --> 00:22:54,990
interesting myself yeah if you know what

00:22:51,930 --> 00:22:57,480
I mean well if you're testing and poor

00:22:54,990 --> 00:22:59,880
chances or other changes that have been

00:22:57,480 --> 00:23:01,740
uploaded you do need to do that locally

00:22:59,880 --> 00:23:06,720
you can't expect the whole thing to I

00:23:01,740 --> 00:23:09,030
should kick off from there but I know I

00:23:06,720 --> 00:23:11,520
do everything myself okay but I just

00:23:09,030 --> 00:23:14,100
don't have time and that's too much work

00:23:11,520 --> 00:23:17,130
and and it has to be automated to make

00:23:14,100 --> 00:23:21,120
sure it works yeah always well I can

00:23:17,130 --> 00:23:23,460
with it's our bias within Debian we

00:23:21,120 --> 00:23:24,690
drift towards testing individual

00:23:23,460 --> 00:23:29,370
packages all the time because that's

00:23:24,690 --> 00:23:33,810
where we focus our work and our our

00:23:29,370 --> 00:23:37,230
input and I want to get a feel for what

00:23:33,810 --> 00:23:39,540
we think we can do to test combinations

00:23:37,230 --> 00:23:43,290
of packages what kind of combinations

00:23:39,540 --> 00:23:46,710
can we come up with I'll be testing an

00:23:43,290 --> 00:23:47,640
MTA chain we test up from the ground all

00:23:46,710 --> 00:23:49,560
the way up

00:23:47,640 --> 00:23:52,020
not just the absolute dependencies but

00:23:49,560 --> 00:23:54,180
can we actually test that the the system

00:23:52,020 --> 00:23:57,300
itself is working beyond the scope of

00:23:54,180 --> 00:23:59,850
unit tests unit tests are again inside

00:23:57,300 --> 00:24:04,080
one individual package what can you test

00:23:59,850 --> 00:24:08,610
that the actual operation of the chain

00:24:04,080 --> 00:24:10,110
is working what kinds of collections of

00:24:08,610 --> 00:24:12,000
packages can we actually come up with

00:24:10,110 --> 00:24:12,929
and think we'll yeah that needs a test

00:24:12,000 --> 00:24:15,660
because that's the kind of thing that

00:24:12,929 --> 00:24:17,669
larvae can actually do you can actually

00:24:15,660 --> 00:24:19,559
set up a system with lots of different

00:24:17,669 --> 00:24:21,240
packages installed your own

00:24:19,559 --> 00:24:23,400
configuration well however you want to

00:24:21,240 --> 00:24:26,039
configure anyway you can do that via

00:24:23,400 --> 00:24:27,780
scripting they set it up start running

00:24:26,039 --> 00:24:31,200
and then throw some data writing now

00:24:27,780 --> 00:24:34,169
what kind of stuff is that can help us

00:24:31,200 --> 00:24:41,760
to validate and test and get feedback

00:24:34,169 --> 00:24:46,679
back to developers so as a reference

00:24:41,760 --> 00:24:48,500
point HP and h Linux team has put

00:24:46,679 --> 00:24:51,480
together a test frame where we pull in

00:24:48,500 --> 00:24:54,720
specific packages related to supporting

00:24:51,480 --> 00:24:58,110
HP cloud and then we we test against

00:24:54,720 --> 00:25:00,179
that specific set of packages for all

00:24:58,110 --> 00:25:03,360
sorts of challenges conflict between

00:25:00,179 --> 00:25:05,940
packages missing dependencies proper

00:25:03,360 --> 00:25:08,730
operation in a cloud environment so we

00:25:05,940 --> 00:25:10,789
actually do that more to holistic level

00:25:08,730 --> 00:25:13,890
in a package level because we know that

00:25:10,789 --> 00:25:15,870
debian proper you know does that that

00:25:13,890 --> 00:25:18,360
focus on the individual package so if

00:25:15,870 --> 00:25:21,659
you assume the individual package is

00:25:18,360 --> 00:25:23,789
going to somewhat properly operate then

00:25:21,659 --> 00:25:27,299
you put it in a in a collaborative

00:25:23,789 --> 00:25:31,110
operation and see correct results then

00:25:27,299 --> 00:25:33,720
you make the assessment right yeah the

00:25:31,110 --> 00:25:37,110
other thing you might need to do is to

00:25:33,720 --> 00:25:38,850
start tracking performance figures so on

00:25:37,110 --> 00:25:41,100
the same system that shouldn't

00:25:38,850 --> 00:25:43,260
necessarily get any faster or slower is

00:25:41,100 --> 00:25:45,419
your software actually performing faster

00:25:43,260 --> 00:25:47,640
or slower now again that's the kind of

00:25:45,419 --> 00:25:50,159
stuff lava can do certainly in his

00:25:47,640 --> 00:25:51,510
current state is doing that for kernels

00:25:50,159 --> 00:25:53,460
and boot loaders and other source of

00:25:51,510 --> 00:25:55,860
lower-level stuff like that we're

00:25:53,460 --> 00:25:57,059
looking at s bitten up from there so one

00:25:55,860 --> 00:25:59,730
of the things I'm looking for from

00:25:57,059 --> 00:26:02,220
feedback here is what kinds of things

00:25:59,730 --> 00:26:05,100
can we do on performance testing not

00:26:02,220 --> 00:26:08,429
just perf and other things that our

00:26:05,100 --> 00:26:09,659
kernel related or but little groups of

00:26:08,429 --> 00:26:11,710
packages that are known to be

00:26:09,659 --> 00:26:17,470
problematic and can we track those

00:26:11,710 --> 00:26:20,230
see what we actually need to improve so

00:26:17,470 --> 00:26:22,480
one one data point I knew so tells the

00:26:20,230 --> 00:26:26,650
light distribution is doing blackbox

00:26:22,480 --> 00:26:30,550
testing using mixture of Ruby cucumber

00:26:26,650 --> 00:26:33,490
and scripting see coulis which is a

00:26:30,550 --> 00:26:36,790
framework when you can actually it is a

00:26:33,490 --> 00:26:38,920
basically OCR from screen and then you

00:26:36,790 --> 00:26:44,830
can say click that button with that

00:26:38,920 --> 00:26:46,650
thing oh yeah do you have this but I the

00:26:44,830 --> 00:26:51,100
one thing we have in GBM is actually

00:26:46,650 --> 00:26:52,060
meat packages for tasks and I believe we

00:26:51,100 --> 00:26:55,030
can that's right

00:26:52,060 --> 00:26:57,700
I took it seemed to me that photo

00:26:55,030 --> 00:27:02,830
package test was actually flexible

00:26:57,700 --> 00:27:07,150
enough so we could put tests for like

00:27:02,830 --> 00:27:09,820
you know the desktop as part of the test

00:27:07,150 --> 00:27:12,760
desktop gnome let me say package for

00:27:09,820 --> 00:27:14,830
example and so we have all the framework

00:27:12,760 --> 00:27:19,690
we need to actually reuse yeah you know

00:27:14,830 --> 00:27:22,950
if we wanted to script an actual testing

00:27:19,690 --> 00:27:25,840
with a you know running a virtual X and

00:27:22,950 --> 00:27:30,660
trying to figure out if the desktop is

00:27:25,840 --> 00:27:30,660
it's basically running okay

00:27:33,720 --> 00:27:40,659
so what about how we get these results

00:27:36,940 --> 00:27:43,149
back to the developers how do we want to

00:27:40,659 --> 00:27:45,390
be notified when these things break what

00:27:43,149 --> 00:27:48,120
we actually want the information what

00:27:45,390 --> 00:27:51,970
context do you need as maintain errs

00:27:48,120 --> 00:27:53,940
that says this test whether it's package

00:27:51,970 --> 00:27:56,950
related or whether it's actually just

00:27:53,940 --> 00:27:59,830
system related what the information do

00:27:56,950 --> 00:28:02,200
you need to be able to work on that bug

00:27:59,830 --> 00:28:05,320
without having to necessarily go all the

00:28:02,200 --> 00:28:07,149
way up to the the top level see I

00:28:05,320 --> 00:28:09,279
definitely met or whatever else it

00:28:07,149 --> 00:28:12,070
actually is PI your parts log or go up

00:28:09,279 --> 00:28:14,080
to the the archive rebuild long and

00:28:12,070 --> 00:28:15,490
cough to a larva log so all these

00:28:14,080 --> 00:28:17,500
different places that there's lots of

00:28:15,490 --> 00:28:20,649
data up there but how much data to

00:28:17,500 --> 00:28:24,250
people need to be able to start work on

00:28:20,649 --> 00:28:25,630
this without that resource and don't

00:28:24,250 --> 00:28:29,830
under feed on and get the information

00:28:25,630 --> 00:28:31,299
directly into the hands of developers is

00:28:29,830 --> 00:28:33,270
it enough just to leave it on random

00:28:31,299 --> 00:28:37,840
website or do we actually want

00:28:33,270 --> 00:28:40,690
notifications of course is my personal

00:28:37,840 --> 00:28:42,250
view but I started reading order

00:28:40,690 --> 00:28:45,490
packaged tests I have no idea what the

00:28:42,250 --> 00:28:47,440
current status is because I know it's

00:28:45,490 --> 00:28:49,210
not where I'm looking for as long unless

00:28:47,440 --> 00:28:51,880
I get an email about an estate exchange

00:28:49,210 --> 00:28:55,720
it's basically on existing for me yeah

00:28:51,880 --> 00:28:57,789
so and I'm not afraid of of overloading

00:28:55,720 --> 00:28:59,860
I guess we all can manage email well we

00:28:57,789 --> 00:29:02,770
have to otherwise you wouldn't be still

00:28:59,860 --> 00:29:04,029
alive I guess in this project so I would

00:29:02,770 --> 00:29:05,950
be very happy to read see if lots of

00:29:04,029 --> 00:29:08,799
emails about any status changes about

00:29:05,950 --> 00:29:11,049
any pure parts or CI or whatever things

00:29:08,799 --> 00:29:13,419
yes like we do for the author of evils

00:29:11,049 --> 00:29:16,450
like that yeah I've had rebuilds I get

00:29:13,419 --> 00:29:18,909
on back record that's useful for that I

00:29:16,450 --> 00:29:21,460
would wish that they would also close

00:29:18,909 --> 00:29:23,830
the back reports automatically if if it

00:29:21,460 --> 00:29:25,840
gets built again because sometimes it's

00:29:23,830 --> 00:29:26,559
not a problem in the package itself but

00:29:25,840 --> 00:29:30,010
rather something else

00:29:26,559 --> 00:29:31,899
then now see I've seen what it

00:29:30,010 --> 00:29:35,649
yeah I've seen see I'd ever done and

00:29:31,899 --> 00:29:37,000
actually marketers attempt fail when one

00:29:35,649 --> 00:29:38,440
of the dependencies doesn't install

00:29:37,000 --> 00:29:39,760
properly and this is I couldn't actually

00:29:38,440 --> 00:29:41,590
get the system up to the point of

00:29:39,760 --> 00:29:43,419
installing your package

00:29:41,590 --> 00:29:45,700
I'm a little bit more hesitant about

00:29:43,419 --> 00:29:47,559
automatically closing both just because

00:29:45,700 --> 00:29:50,380
a temporary bug went away because the

00:29:47,559 --> 00:29:53,620
next upload is going to come back there

00:29:50,380 --> 00:29:55,630
are packages I maintain one where the

00:29:53,620 --> 00:29:58,000
test suite deliberately feeds in

00:29:55,630 --> 00:30:00,309
randomized data well sorry but every

00:29:58,000 --> 00:30:02,770
once in a while you're going to find

00:30:00,309 --> 00:30:05,110
that you get a bug and then you can't

00:30:02,770 --> 00:30:06,850
reproduce it it's a pain with that

00:30:05,110 --> 00:30:10,360
particular package but I can see why

00:30:06,850 --> 00:30:12,159
they do it more more often than not it

00:30:10,360 --> 00:30:14,230
doesn't cause any problems but every

00:30:12,159 --> 00:30:16,720
once in a while I can't I never have to

00:30:14,230 --> 00:30:19,890
go back to the portal box and actually

00:30:16,720 --> 00:30:22,330
see what's going on in that particular I

00:30:19,890 --> 00:30:36,940
probably need to patch the library to

00:30:22,330 --> 00:30:39,730
put to fix the seed I know

00:30:36,940 --> 00:30:41,289
I'd like the time to do that but doesn't

00:30:39,730 --> 00:30:43,419
have not enough just a clarification

00:30:41,289 --> 00:30:45,370
about archive rebuilds it's a big file

00:30:43,419 --> 00:30:47,620
in his manual with our tools that help

00:30:45,370 --> 00:30:48,789
writing the bug report still is manual

00:30:47,620 --> 00:30:51,820
so I don't think it makes sense to

00:30:48,789 --> 00:30:55,000
automatically close a burg later however

00:30:51,820 --> 00:30:56,890
well browser script that takes care of

00:30:55,000 --> 00:31:00,070
deferring the list of current failures

00:30:56,890 --> 00:31:02,049
with a list of open bugs so it's easy to

00:31:00,070 --> 00:31:03,970
go through it and read the bug and close

00:31:02,049 --> 00:31:05,830
it if it doesn't apply anymore I'm not

00:31:03,970 --> 00:31:08,110
sure I'm doing archive rebuilds anymore

00:31:05,830 --> 00:31:11,710
I'm not sure David Torres who took over

00:31:08,110 --> 00:31:14,830
as been renamed it recently she on that

00:31:11,710 --> 00:31:17,110
point when the archive rebuilt manual

00:31:14,830 --> 00:31:18,610
bugs are filed I know there's a fair

00:31:17,110 --> 00:31:21,279
amount of manual check in to make sure

00:31:18,610 --> 00:31:23,919
the bug actually exists the test strike

00:31:21,279 --> 00:31:28,090
version and and things going on like

00:31:23,919 --> 00:31:30,010
that so that raises the issue of how how

00:31:28,090 --> 00:31:32,409
reliable are the tools were using and

00:31:30,010 --> 00:31:34,270
how much do we actually to manually

00:31:32,409 --> 00:31:37,090
check these results before we notify the

00:31:34,270 --> 00:31:38,919
maintainer so keep this in mind as well

00:31:37,090 --> 00:31:42,190
these tools as only as good as the code

00:31:38,919 --> 00:31:43,809
that we write and they will they will

00:31:42,190 --> 00:31:46,149
let us down from time to time and you'll

00:31:43,809 --> 00:31:48,880
get false positives or worrying even

00:31:46,149 --> 00:31:50,770
false negatives so yeah so having just

00:31:48,880 --> 00:31:51,430
done my first ever look mass book filing

00:31:50,770 --> 00:31:52,810
and I got

00:31:51,430 --> 00:31:55,710
couple of complaints going oh yeah

00:31:52,810 --> 00:31:57,640
doesn't even apply to my package maybe

00:31:55,710 --> 00:31:58,510
there's a new version you didn't check

00:31:57,640 --> 00:32:01,120
that either

00:31:58,510 --> 00:32:02,500
I suspect we have an awful lot of tools

00:32:01,120 --> 00:32:04,660
lying about that people have hacked up

00:32:02,500 --> 00:32:05,980
for all the various purposes and we

00:32:04,660 --> 00:32:07,360
probably haven't done a very good job of

00:32:05,980 --> 00:32:09,100
collecting them to save us all writing

00:32:07,360 --> 00:32:10,420
more crap tools here instead of some

00:32:09,100 --> 00:32:14,350
slightly better tools

00:32:10,420 --> 00:32:15,550
I know Tokyo has some and so on I've

00:32:14,350 --> 00:32:17,680
just been comparing notes with the other

00:32:15,550 --> 00:32:20,170
porters and discovering that we've all

00:32:17,680 --> 00:32:22,090
got different records so there's

00:32:20,170 --> 00:32:25,120
definitely some room for as you say some

00:32:22,090 --> 00:32:26,770
a library of stuff for doing standard

00:32:25,120 --> 00:32:27,940
checks on mass bug filings would be a

00:32:26,770 --> 00:32:32,770
jolly helpful thing for me right now

00:32:27,940 --> 00:32:35,740
especially was in Pearl isn't and yet

00:32:32,770 --> 00:32:38,080
personally I it depends very much on the

00:32:35,740 --> 00:32:39,490
frequency of emails yeah you know it's

00:32:38,080 --> 00:32:41,200
gonna send you too many they'll just get

00:32:39,490 --> 00:32:42,220
ignored you'll get a lot of boring email

00:32:41,200 --> 00:32:43,840
from computers telling me that

00:32:42,220 --> 00:32:46,000
something's broken and I ignore a lot of

00:32:43,840 --> 00:32:47,860
them so I like stuff in the pts

00:32:46,000 --> 00:32:49,930
personally if it's on the page in the

00:32:47,860 --> 00:32:50,440
thing that kind of collects everything

00:32:49,930 --> 00:32:53,200
together

00:32:50,440 --> 00:32:55,690
have one email notification in the pts

00:32:53,200 --> 00:32:57,280
or saw the view you're prompted to look

00:32:55,690 --> 00:32:59,650
at the PTA I tend to look at the pts

00:32:57,280 --> 00:33:01,270
anyway to just join general status what

00:32:59,650 --> 00:33:02,800
is currently broken in my package how

00:33:01,270 --> 00:33:06,220
much whinging have I got from various

00:33:02,800 --> 00:33:09,790
Debian tools which run certainly I like

00:33:06,220 --> 00:33:11,830
the DDP o summary because that has got a

00:33:09,790 --> 00:33:13,720
hose for yes yeah I don't but not that

00:33:11,830 --> 00:33:15,460
and you can review all your packages on

00:33:13,720 --> 00:33:16,840
one screens they see all informations

00:33:15,460 --> 00:33:18,400
you say like archive rebuilds if you're

00:33:16,840 --> 00:33:21,490
going to get a mail once a year that's

00:33:18,400 --> 00:33:23,490
fine yeah if it's gonna be every couple

00:33:21,490 --> 00:33:26,380
of weeks that's probably not fine yeah

00:33:23,490 --> 00:33:29,590
or if it's the like we'll see I'd ever

00:33:26,380 --> 00:33:32,110
net if your package fails because of

00:33:29,590 --> 00:33:34,840
something wrong in your package and then

00:33:32,110 --> 00:33:36,430
another package is uploaded for

00:33:34,840 --> 00:33:40,390
completely separate reasons it triggers

00:33:36,430 --> 00:33:42,100
another run then if your hot package

00:33:40,390 --> 00:33:43,360
hasn't been updated and fails the

00:33:42,100 --> 00:33:46,030
exactly the same way you probably don't

00:33:43,360 --> 00:33:49,690
want another email so that's the more

00:33:46,030 --> 00:33:51,610
difficult thing to do yeah the general

00:33:49,690 --> 00:33:53,650
question of edge triggered notifications

00:33:51,610 --> 00:33:55,480
versus state level triggered

00:33:53,650 --> 00:33:57,490
notifications and do you want to receive

00:33:55,480 --> 00:34:00,190
any notification when your package comes

00:33:57,490 --> 00:34:01,900
back into a good state yeah so that you

00:34:00,190 --> 00:34:03,820
don't have to investigate it further and

00:34:01,900 --> 00:34:05,860
everyone will have a different opinion

00:34:03,820 --> 00:34:07,420
on what they want to receive yeah so

00:34:05,860 --> 00:34:09,310
he's not ready that should be something

00:34:07,420 --> 00:34:12,250
that's configurable per main ta I

00:34:09,310 --> 00:34:20,140
thought that increases the the work from

00:34:12,250 --> 00:34:21,700
that level here I want to make a quick

00:34:20,140 --> 00:34:25,330
on one thing that would be interesting

00:34:21,700 --> 00:34:26,770
to me personally um regardless of how we

00:34:25,330 --> 00:34:28,960
get notified about these things is how

00:34:26,770 --> 00:34:30,130
to go about reproducing the problem

00:34:28,960 --> 00:34:31,690
without having to set up the full

00:34:30,130 --> 00:34:34,810
environment again so I don't have to

00:34:31,690 --> 00:34:36,370
serve see I got Debbie Annette's let but

00:34:34,810 --> 00:34:39,070
let's say even it was really easy or

00:34:36,370 --> 00:34:41,230
like whatever other tour is I'd like to

00:34:39,070 --> 00:34:42,880
be able to run this one test and then

00:34:41,230 --> 00:34:44,020
get the failure and then I can fix it

00:34:42,880 --> 00:34:45,520
and then run the thing again and show

00:34:44,020 --> 00:34:47,650
that it works and then close the bug or

00:34:45,520 --> 00:34:51,040
whatever it is it's tricky when you know

00:34:47,650 --> 00:34:52,390
if that's happening on a mips box then

00:34:51,040 --> 00:34:54,100
that gets tricky because you actually

00:34:52,390 --> 00:34:55,720
have to have the hardware all you have

00:34:54,100 --> 00:34:57,790
to get to a Porter box and replicate it

00:34:55,720 --> 00:35:01,000
there are tools that can do this kind of

00:34:57,790 --> 00:35:05,200
stuff I mean I told you we've looked at

00:35:01,000 --> 00:35:09,040
P root and care from St before there are

00:35:05,200 --> 00:35:10,750
tools that can track all of the binaries

00:35:09,040 --> 00:35:12,910
that were touched or affected or

00:35:10,750 --> 00:35:14,620
accessed by a particular test run

00:35:12,910 --> 00:35:18,160
practice them all up into one big lump

00:35:14,620 --> 00:35:20,350
and give you the the package back and

00:35:18,160 --> 00:35:21,880
then you just deploy that over a clean -

00:35:20,350 --> 00:35:24,820
and you're back to where that test was

00:35:21,880 --> 00:35:26,620
so things like that those tools exist

00:35:24,820 --> 00:35:29,380
and we can we can think about whether we

00:35:26,620 --> 00:35:31,810
actually put those in I found when

00:35:29,380 --> 00:35:34,210
debugging auto packaged tests recently

00:35:31,810 --> 00:35:36,430
that the test runner gained an option to

00:35:34,210 --> 00:35:38,050
drop you into a shell when a test fails

00:35:36,430 --> 00:35:39,700
rightly you can then go into the

00:35:38,050 --> 00:35:41,140
environments and play around with the

00:35:39,700 --> 00:35:42,490
actual environment yeah that's really

00:35:41,140 --> 00:35:44,950
use this kind of thing is very useful

00:35:42,490 --> 00:35:46,300
yeah but obviously doesn't work if the

00:35:44,950 --> 00:35:48,280
test is not running on your systems so

00:35:46,300 --> 00:35:50,260
maybe something like this so that the

00:35:48,280 --> 00:35:51,970
system can deliver the environment to

00:35:50,260 --> 00:35:56,980
you in a bad state and then you can poke

00:35:51,970 --> 00:35:58,870
at it then be very nice yeah okay Wiki

00:35:56,980 --> 00:36:02,800
as far as bootstrapping is concerned

00:35:58,870 --> 00:36:05,080
what can we do to actually why you're

00:36:02,800 --> 00:36:08,020
gonna the right okay your comment yeah I

00:36:05,080 --> 00:36:10,840
was wondering if we how much we couldn't

00:36:08,020 --> 00:36:12,670
make that as a service like you know you

00:36:10,840 --> 00:36:14,470
have a web form and you upload the dart

00:36:12,670 --> 00:36:15,630
in G's file or an archive wave like

00:36:14,470 --> 00:36:18,090
touching guitar sign

00:36:15,630 --> 00:36:22,740
a couple of Deb and runs Deb CI or

00:36:18,090 --> 00:36:24,990
something some of a test for you so that

00:36:22,740 --> 00:36:27,810
would solve the problem of Thomas

00:36:24,990 --> 00:36:29,580
for example that because you can send

00:36:27,810 --> 00:36:32,720
that okay you could use the testing

00:36:29,580 --> 00:36:43,530
framework before opening the package

00:36:32,720 --> 00:36:45,720
yeah I was just thinking what can we do

00:36:43,530 --> 00:36:48,240
in terms of simulating the bootstrapping

00:36:45,720 --> 00:36:50,370
stuff all the what have we got tools of

00:36:48,240 --> 00:36:52,890
Britain for identifying these dependency

00:36:50,370 --> 00:36:55,260
loops in advance yes oh well we just

00:36:52,890 --> 00:36:56,520
uploaded botch a long last after many

00:36:55,260 --> 00:36:59,550
months of it not being in the archive

00:36:56,520 --> 00:37:02,040
like two days ago which has forty

00:36:59,550 --> 00:37:03,930
scripts of various sorts of is this

00:37:02,040 --> 00:37:06,780
buildable is its are its dependencies

00:37:03,930 --> 00:37:08,310
installable what's cross buildable today

00:37:06,780 --> 00:37:12,260
and all that sort of stuff how am I

00:37:08,310 --> 00:37:12,260
supposed to stand up not be burning blue

00:37:13,880 --> 00:37:19,470
yeah so there are useful tools in there

00:37:16,530 --> 00:37:21,480
and as I say I think we who's got mass

00:37:19,470 --> 00:37:23,210
book falling scripts or libraries and

00:37:21,480 --> 00:37:25,440
things here's the ends up anybody

00:37:23,210 --> 00:37:27,930
nobody's actually written any code for

00:37:25,440 --> 00:37:31,200
this this there should be lots of it

00:37:27,930 --> 00:37:34,710
lying about because people been doing

00:37:31,200 --> 00:37:36,570
stuff rages and that would be helpful so

00:37:34,710 --> 00:37:38,040
yeah there are some tools now in the

00:37:36,570 --> 00:37:41,280
archive I don't know it's exactly what

00:37:38,040 --> 00:37:45,390
you need and we've still got some pieces

00:37:41,280 --> 00:37:47,540
missing but yeah okay until you has a

00:37:45,390 --> 00:37:47,540
question

00:37:52,140 --> 00:37:55,289
took it

00:38:00,350 --> 00:38:09,290
how do we make sure that auto packaged

00:38:03,890 --> 00:38:13,040
tests are kept up to date currently I

00:38:09,290 --> 00:38:15,200
see a lot of packages well at least when

00:38:13,040 --> 00:38:19,160
important you would do which fail their

00:38:15,200 --> 00:38:22,190
auto package tests and not just once but

00:38:19,160 --> 00:38:26,150
well several times and and I don't see

00:38:22,190 --> 00:38:26,900
some tests ever succeed and that's a lot

00:38:26,150 --> 00:38:32,540
of pain

00:38:26,900 --> 00:38:35,900
if such test is triggered by well some

00:38:32,540 --> 00:38:38,840
common package for example by setup

00:38:35,900 --> 00:38:42,640
tools all pison packages are triggered

00:38:38,840 --> 00:38:47,930
and trigger all the non-working tests

00:38:42,640 --> 00:38:50,900
uploading GCC triggers every signal so

00:38:47,930 --> 00:38:55,610
that's that's something which we should

00:38:50,900 --> 00:39:08,090
avoid because then none of the core

00:38:55,610 --> 00:39:10,790
packages volterra me great so we have

00:39:08,090 --> 00:39:14,660
for build failures already only block if

00:39:10,790 --> 00:39:17,030
you have had a failure before if you

00:39:14,660 --> 00:39:18,320
change from good to bad i guess i mean

00:39:17,030 --> 00:39:19,730
in in a blimp see we had a problem where

00:39:18,320 --> 00:39:22,490
we let lots of packages in which were

00:39:19,730 --> 00:39:23,660
that and now they are still bad and

00:39:22,490 --> 00:39:25,250
we're blocking for that reason because

00:39:23,660 --> 00:39:27,380
the instructor wasn't wasn't solid from

00:39:25,250 --> 00:39:28,640
the start but I guess in Debian we

00:39:27,380 --> 00:39:31,090
should take care to join

00:39:28,640 --> 00:39:33,920
before we turn on the the naughty switch

00:39:31,090 --> 00:39:37,930
now make sure that everything's working

00:39:33,920 --> 00:39:37,930
great what will happen

00:39:39,109 --> 00:39:46,489
and don't know so hopefully we got all

00:39:43,969 --> 00:39:49,249
most of this into the copy document I'll

00:39:46,489 --> 00:39:51,349
be using that as the basis for and then

00:39:49,249 --> 00:39:55,789
we actually work on from here if you've

00:39:51,349 --> 00:39:57,380
got particular questions about how new

00:39:55,789 --> 00:40:00,229
tools and how we can actually work

00:39:57,380 --> 00:40:01,279
particularly with lava on this kind of

00:40:00,229 --> 00:40:04,779
thing or if you just want to know more

00:40:01,279 --> 00:40:06,049
about lava that's the evening talk today

00:40:04,779 --> 00:40:07,999
seven o'clock

00:40:06,049 --> 00:40:12,789
I forgot which room it's in this on the

00:40:07,999 --> 00:40:12,789

YouTube URL: https://www.youtube.com/watch?v=9CyTBHP94d4


