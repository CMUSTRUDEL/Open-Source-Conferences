Title: ACC for abi breaks
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Dimitri Ledkov

At: DebConf14
https://debconf14.debconf.org/
Room: Room 329
Scheduled start: 2014-08-28 16:00:00
Captions: 
	00:00:00,000 --> 00:00:07,259
mmm talk about how we can detect a bi

00:00:04,640 --> 00:00:11,429
breakages in our libraries in they been

00:00:07,259 --> 00:00:13,469
earlier and run those detection across

00:00:11,429 --> 00:00:15,540
wider range of libraries because

00:00:13,469 --> 00:00:18,029
individual packages and individual

00:00:15,540 --> 00:00:21,510
libraries and individual streams are

00:00:18,029 --> 00:00:23,430
using the ACC tool already but I don't

00:00:21,510 --> 00:00:25,980
think enough people are using it and I

00:00:23,430 --> 00:00:31,380
would want to know how what can I do to

00:00:25,980 --> 00:00:34,440
make sure that more people use it da da

00:00:31,380 --> 00:00:36,899
there are a few ways how ABI can be

00:00:34,440 --> 00:00:39,809
broken in the library the most common

00:00:36,899 --> 00:00:42,270
one you change or remove symbols for

00:00:39,809 --> 00:00:45,899
most of the packages you should be using

00:00:42,270 --> 00:00:49,230
d package en symbols and check symbols

00:00:45,899 --> 00:00:53,420
files such that you can catch removal of

00:00:49,230 --> 00:00:57,930
for example C symbols from a library

00:00:53,420 --> 00:01:01,350
with see if for example arguments on the

00:00:57,930 --> 00:01:03,660
particular function change you will not

00:01:01,350 --> 00:01:16,409
notice that change in symbols files but

00:01:03,660 --> 00:01:19,350
the ACC tool will notice that and it was

00:01:16,409 --> 00:01:21,570
bus symbols they are more verbose

00:01:19,350 --> 00:01:23,549
because they do have the return types

00:01:21,570 --> 00:01:26,670
and the types that you positive

00:01:23,549 --> 00:01:29,700
functions however if you do changes to

00:01:26,670 --> 00:01:31,820
the templates your simple spelling I'll

00:01:29,700 --> 00:01:36,680
tell you that maybe I have been

00:01:31,820 --> 00:01:39,770
but ACC can detect changes in tempo yes

00:01:36,680 --> 00:01:42,290
right and if your symbol spots are not

00:01:39,770 --> 00:01:43,970
that good or you don't specify tight

00:01:42,290 --> 00:01:46,610
enough version numbers and you break

00:01:43,970 --> 00:01:49,580
your API but your version dependencies

00:01:46,610 --> 00:01:51,590
are too wide then you didn't help much

00:01:49,580 --> 00:01:55,870
because you can still install broken

00:01:51,590 --> 00:01:55,870
packages which fail to run that run

00:01:57,460 --> 00:02:02,300
here's a few tools that you can be using

00:01:59,990 --> 00:02:04,520
I'm mostly going to be talking about API

00:02:02,300 --> 00:02:07,160
for plans checker but there is a bi

00:02:04,520 --> 00:02:08,869
damper their sanity checker and there

00:02:07,160 --> 00:02:10,880
are other ways you can do this so for

00:02:08,869 --> 00:02:14,660
example if you run out of package fast

00:02:10,880 --> 00:02:17,330
that your binary starts and can print

00:02:14,660 --> 00:02:18,980
out the text output that means that it

00:02:17,330 --> 00:02:20,750
can open then find all the shared

00:02:18,980 --> 00:02:23,090
libraries and there was no ID every

00:02:20,750 --> 00:02:26,410
presumably such that you can execute

00:02:23,090 --> 00:02:30,440
things that come time right and

00:02:26,410 --> 00:02:32,150
typically how we find ABI breaks is that

00:02:30,440 --> 00:02:34,459
somebody uploads a new version of the

00:02:32,150 --> 00:02:37,160
library somebody goes in does routine

00:02:34,459 --> 00:02:38,570
rebuilds and then the rebuilds feels to

00:02:37,160 --> 00:02:41,420
build from source because the API

00:02:38,570 --> 00:02:44,330
changed and presumably I changed at the

00:02:41,420 --> 00:02:45,810
same time and then people complain which

00:02:44,330 --> 00:02:48,420
is I think is a bit

00:02:45,810 --> 00:02:54,660
late we should be able to do this much

00:02:48,420 --> 00:02:56,790
earlier yeah and then we once we detect

00:02:54,660 --> 00:02:59,190
that there wasn't library break we need

00:02:56,790 --> 00:03:02,040
to upload a new library again but the

00:02:59,190 --> 00:03:04,590
number sometimes they've been specific

00:03:02,040 --> 00:03:06,720
if it was broken indeed and only and

00:03:04,590 --> 00:03:11,160
then rebuild everything and that such

00:03:06,720 --> 00:03:14,819
that we get the correct dependencies the

00:03:11,160 --> 00:03:18,180
ACC tool is quite useful because it can

00:03:14,819 --> 00:03:21,569
operate in multiple months typically use

00:03:18,180 --> 00:03:23,519
you pass sent a shared library and it

00:03:21,569 --> 00:03:25,290
will scan all of its symbols and

00:03:23,519 --> 00:03:28,170
projects attract as much information

00:03:25,290 --> 00:03:31,170
from the shared libraries again but we

00:03:28,170 --> 00:03:33,950
also can pass to it headers and that

00:03:31,170 --> 00:03:36,510
will scan all the structures their sizes

00:03:33,950 --> 00:03:38,280
what type of arguments you supposed to

00:03:36,510 --> 00:03:40,980
pass to each function and what are the

00:03:38,280 --> 00:03:45,480
return x such that it can generate an

00:03:40,980 --> 00:03:47,549
extensive basically structured flat text

00:03:45,480 --> 00:03:49,530
file of everything you can find out

00:03:47,549 --> 00:03:51,930
about that particular combination of

00:03:49,530 --> 00:03:54,299
files and that can generate your dump

00:03:51,930 --> 00:03:58,590
and you can then compare your next

00:03:54,299 --> 00:04:01,019
library revision against that dump it

00:03:58,590 --> 00:04:03,150
also has a few other modes where you can

00:04:01,019 --> 00:04:04,709
generate a dump for a whole system to it

00:04:03,150 --> 00:04:06,870
so for example squeeze default

00:04:04,709 --> 00:04:08,910
installation or that we see default

00:04:06,870 --> 00:04:10,950
installation and then you can take your

00:04:08,910 --> 00:04:13,170
binaries and test whether they will run

00:04:10,950 --> 00:04:15,750
against those treats without actually

00:04:13,170 --> 00:04:17,880
executing that binary such that will

00:04:15,750 --> 00:04:19,440
analyze if all the shared libraries are

00:04:17,880 --> 00:04:22,139
present and if all the symbols of

00:04:19,440 --> 00:04:23,970
present and if they're compatible which

00:04:22,139 --> 00:04:24,650
is useful if you are a third party

00:04:23,970 --> 00:04:27,380
vendor

00:04:24,650 --> 00:04:29,090
to check that your compiled binary

00:04:27,380 --> 00:04:34,220
package does work against multiple

00:04:29,090 --> 00:04:40,060
distributions for example a while back

00:04:34,220 --> 00:04:42,919
I've added D HACC helper atom to the a

00:04:40,060 --> 00:04:46,280
beyond compliance checker tool in Big M

00:04:42,919 --> 00:04:49,759
such that it would help you to generate

00:04:46,280 --> 00:04:52,039
the dumpsite build time and it will also

00:04:49,759 --> 00:04:55,070
compare the EPR of your new updated

00:04:52,039 --> 00:04:57,139
library at Build time such that your

00:04:55,070 --> 00:05:00,440
builds will fail if suddenly your

00:04:57,139 --> 00:05:02,690
library becomes API incompatible that's

00:05:00,440 --> 00:05:04,370
very good because if your builds failed

00:05:02,690 --> 00:05:07,340
that means it will never get even

00:05:04,370 --> 00:05:11,270
unstable such that in human unstable you

00:05:07,340 --> 00:05:13,400
wouldn't see an ABI break this is all

00:05:11,270 --> 00:05:15,470
kind of cool you do bootstrap it's like

00:05:13,400 --> 00:05:18,380
the the same way how you bootstrap

00:05:15,470 --> 00:05:20,389
symbols file your first app description

00:05:18,380 --> 00:05:23,660
of your header send your library and

00:05:20,389 --> 00:05:25,699
then you upload that once it builds once

00:05:23,660 --> 00:05:28,940
on across all of the architectures in

00:05:25,699 --> 00:05:31,729
media you can fetch the depths

00:05:28,940 --> 00:05:34,490
themselves and then extract the API time

00:05:31,729 --> 00:05:37,010
Tarble from it's inside each

00:05:34,490 --> 00:05:39,830
architecture built and then if you

00:05:37,010 --> 00:05:42,139
commit those to your sources of your

00:05:39,830 --> 00:05:44,360
Dignan source package your next upload

00:05:42,139 --> 00:05:49,639
will verify that you're still compatible

00:05:44,360 --> 00:05:51,330
with that old api and ABI jump does that

00:05:49,639 --> 00:05:53,599
make sense

00:05:51,330 --> 00:05:53,599
yeah

00:05:56,789 --> 00:06:03,150
however it's still quite manual right so

00:06:00,300 --> 00:06:05,490
in I'll show you slightly later and in

00:06:03,150 --> 00:06:07,650
the manual description you still end up

00:06:05,490 --> 00:06:09,539
having to list the libraries that you're

00:06:07,650 --> 00:06:11,400
testing and you have to specify the

00:06:09,539 --> 00:06:15,449
header files that you're testing and

00:06:11,400 --> 00:06:17,699
what a CC tool uncovers quite often is

00:06:15,449 --> 00:06:20,129
that not all headers are actually

00:06:17,699 --> 00:06:22,199
compatible and a lot of headers you

00:06:20,129 --> 00:06:24,960
cannot compile them by just including

00:06:22,199 --> 00:06:27,030
them they sometimes the optional extra

00:06:24,960 --> 00:06:29,460
other includes or they depend on the

00:06:27,030 --> 00:06:32,129
include order or you're defining some

00:06:29,460 --> 00:06:34,889
extra variable scheduled operate that's

00:06:32,129 --> 00:06:36,840
a lot of headers for most libraries

00:06:34,889 --> 00:06:39,780
people it that you have to exclude

00:06:36,840 --> 00:06:43,800
certain headers from being checked for a

00:06:39,780 --> 00:06:46,199
beyond compliance and the default simple

00:06:43,800 --> 00:06:48,449
way to configure ADA compliance checkers

00:06:46,199 --> 00:06:50,250
to just posit a list of Heather's or

00:06:48,449 --> 00:06:52,770
directories with other sub libraries

00:06:50,250 --> 00:06:54,840
which should work most of the time but

00:06:52,770 --> 00:06:57,419
once you need an exception you have to

00:06:54,840 --> 00:06:59,940
convert and write an XML description of

00:06:57,419 --> 00:07:03,719
things that you need to dump and jumping

00:06:59,940 --> 00:07:06,900
from a flat list of files to an XML has

00:07:03,719 --> 00:07:09,509
proven to be not user-friendly even

00:07:06,900 --> 00:07:13,289
though it's quite simple hence there has

00:07:09,509 --> 00:07:15,659
been very little uptake of DHA CC so far

00:07:13,289 --> 00:07:17,879
that i've seen in the archive I can give

00:07:15,659 --> 00:07:20,310
you a real example of somebody who is

00:07:17,879 --> 00:07:23,069
actually using it as is in the archive

00:07:20,310 --> 00:07:25,740
today which is quite cryptic because

00:07:23,069 --> 00:07:28,440
they are they're using multi arch and I

00:07:25,740 --> 00:07:31,770
didn't take me to arch into account and

00:07:28,440 --> 00:07:34,740
they pre process their definition file

00:07:31,770 --> 00:07:38,610
first and then they run the actual DHEC

00:07:34,740 --> 00:07:41,400
tool and the description file that they

00:07:38,610 --> 00:07:44,250
specified is an XML which was very

00:07:41,400 --> 00:07:46,500
verbose and perfect in my opinion but

00:07:44,250 --> 00:07:46,860
they do specify the original version

00:07:46,500 --> 00:07:49,169
number

00:07:46,860 --> 00:07:52,650
that they took the dump offer and try to

00:07:49,169 --> 00:07:54,599
compare to all the time they specify

00:07:52,650 --> 00:07:57,060
where their headers are which headers to

00:07:54,599 --> 00:08:01,080
skip because presumably that Heather

00:07:57,060 --> 00:08:02,610
does not compile by itself and which

00:08:01,080 --> 00:08:05,189
type in has to check and they do

00:08:02,610 --> 00:08:08,400
substitutes they will charge variable in

00:08:05,189 --> 00:08:12,150
there might be even this is tuber rose

00:08:08,400 --> 00:08:13,800
but it's not that bad I think most

00:08:12,150 --> 00:08:16,229
people would be able to write something

00:08:13,800 --> 00:08:19,050
like that for their old library the

00:08:16,229 --> 00:08:22,349
other bit which I didn't consider when I

00:08:19,050 --> 00:08:24,120
brought the GCC I was thinking that

00:08:22,349 --> 00:08:26,370
people will take the jump from their

00:08:24,120 --> 00:08:29,759
build directory such that your path

00:08:26,370 --> 00:08:33,870
should have been current directory dogs

00:08:29,759 --> 00:08:36,360
slash Davian slash down user the blah

00:08:33,870 --> 00:08:38,579
blah blah in this case this person is

00:08:36,360 --> 00:08:41,659
running this tool actually as an outer

00:08:38,579 --> 00:08:45,240
package test such that it's running

00:08:41,659 --> 00:08:47,100
against installed libraries in the

00:08:45,240 --> 00:08:50,970
installed environment instead of the

00:08:47,100 --> 00:08:55,560
built time I'm not sure what that event

00:08:50,970 --> 00:08:58,649
but that's how they did it right and now

00:08:55,560 --> 00:09:01,410
I'm coming to a few more like open

00:08:58,649 --> 00:09:04,709
questions of how we how would you want

00:09:01,410 --> 00:09:07,350
the library dumps to be maintained who

00:09:04,709 --> 00:09:10,440
and where should be comparing the ducks

00:09:07,350 --> 00:09:12,149
for example should it be done at should

00:09:10,440 --> 00:09:15,839
you commit all those country passing

00:09:12,149 --> 00:09:17,940
your different source package or shall

00:09:15,839 --> 00:09:20,190
it be managed in storm external

00:09:17,940 --> 00:09:22,350
somewhere for example on a hosted

00:09:20,190 --> 00:09:24,570
service which goes and scans all of the

00:09:22,350 --> 00:09:25,279
Debian archive and tries to prepare in

00:09:24,570 --> 00:09:28,839
Vietnam

00:09:25,279 --> 00:09:31,459
everything fine and things like that

00:09:28,839 --> 00:09:33,319
shouldn't be wrong as an outer package

00:09:31,459 --> 00:09:35,329
that would you like it to be run as an

00:09:33,319 --> 00:09:37,550
outer package that I mean some people

00:09:35,329 --> 00:09:39,560
I've started talking to a few people and

00:09:37,550 --> 00:09:43,639
they use it quite differently so for

00:09:39,560 --> 00:09:46,370
example apt upstream they have they run

00:09:43,639 --> 00:09:48,949
a bi compliance checker before releasing

00:09:46,370 --> 00:09:51,259
a new upstream as a as an upstream

00:09:48,949 --> 00:09:53,149
developer and they do so by installing

00:09:51,259 --> 00:09:55,910
the previous version on their system and

00:09:53,149 --> 00:09:58,069
then running the ACC from the build

00:09:55,910 --> 00:09:59,629
directory prepared the system library

00:09:58,069 --> 00:10:02,420
against the one that you've just

00:09:59,629 --> 00:10:04,339
currently built but that's kind of a

00:10:02,420 --> 00:10:06,110
recursive build dependency if you

00:10:04,339 --> 00:10:08,779
actually try to upload it into the air

00:10:06,110 --> 00:10:12,649
as they don't upload it and do on every

00:10:08,779 --> 00:10:15,769
build and there is a there is a project

00:10:12,649 --> 00:10:18,350
related to the upstream developers they

00:10:15,769 --> 00:10:20,480
run upstream tracker tool org where

00:10:18,350 --> 00:10:22,189
upstream developers are encouraged to

00:10:20,480 --> 00:10:24,529
add their own libraries and the

00:10:22,189 --> 00:10:27,920
descriptions of the libraries such that

00:10:24,529 --> 00:10:30,050
all versions are stamped and all

00:10:27,920 --> 00:10:33,920
versions are compared against each other

00:10:30,050 --> 00:10:37,069
to check for ABI breakages and hopefully

00:10:33,920 --> 00:10:41,529
if internet works I would be able to

00:10:37,069 --> 00:10:50,230
show you how those results look like

00:10:41,529 --> 00:10:52,350
that didn't work well that's supposed to

00:10:50,230 --> 00:10:52,350
work

00:10:57,810 --> 00:11:01,640
this is the most exciting part

00:11:02,040 --> 00:11:05,120
[Music]

00:11:08,689 --> 00:11:12,629
retrieving and files by HTTP is very

00:11:11,279 --> 00:11:16,199
complicated so it should be have a

00:11:12,629 --> 00:11:18,749
difficult user interface right so I've

00:11:16,199 --> 00:11:20,819
opened a new TLS upstream tracker where

00:11:18,749 --> 00:11:43,829
it tracks virus version numbers which

00:11:20,819 --> 00:11:47,220
are right so here they check this

00:11:43,829 --> 00:11:49,529
results that ECC generates in the HTML

00:11:47,220 --> 00:11:51,569
if you've provided a lot of version

00:11:49,529 --> 00:11:56,730
numbers as you can and you can see that

00:11:51,569 --> 00:11:58,499
3 point 3.0 did break a ABI and so did 3

00:11:56,730 --> 00:12:01,049
dub 2.12

00:11:58,499 --> 00:12:05,429
hence there was 12.1 released straight

00:12:01,049 --> 00:12:09,379
after to resolve the api break which was

00:12:05,429 --> 00:12:09,379
which happened did not scream there and

00:12:14,470 --> 00:12:20,430
so here's the here's the full report for

00:12:18,220 --> 00:12:20,430
the

00:12:24,520 --> 00:12:28,900
bunch of symbols but they kept removed a

00:12:26,590 --> 00:12:31,720
bunch of symbols and if we jump there we

00:12:28,900 --> 00:12:34,090
can see that X s SL dot H header was

00:12:31,720 --> 00:12:36,070
removed and all of those symbols were

00:12:34,090 --> 00:12:39,370
gone and the survivor who was down as

00:12:36,070 --> 00:12:41,530
well presumably it moved somewhere else

00:12:39,370 --> 00:12:43,000
and maybe you would be able to still get

00:12:41,530 --> 00:12:45,340
it or maybe it's gone for good

00:12:43,000 --> 00:12:49,240
so this doesn't tell us what actually

00:12:45,340 --> 00:12:51,820
has changed but you could it generates a

00:12:49,240 --> 00:12:55,200
lot of other information as well so for

00:12:51,820 --> 00:12:55,200
example it marks things

00:12:58,940 --> 00:13:02,690
so it gives you explanation of things

00:13:01,130 --> 00:13:04,820
that change so for example something

00:13:02,690 --> 00:13:07,670
changed to a Quonset point or instead of

00:13:04,820 --> 00:13:09,440
the one that you can modify in practice

00:13:07,670 --> 00:13:11,780
it's a lot of severity because the type

00:13:09,440 --> 00:13:13,520
to change the position didn't change the

00:13:11,780 --> 00:13:16,010
size in the tree but the fact that it's

00:13:13,520 --> 00:13:18,580
not a clumps pointer somebody may have

00:13:16,010 --> 00:13:24,050
realized that it isn't them somebody's

00:13:18,580 --> 00:13:27,170
GCC wlw error compels will start phasing

00:13:24,050 --> 00:13:30,860
because of this change if somebody's not

00:13:27,170 --> 00:13:32,780
awesome things to play ok so that's the

00:13:30,860 --> 00:13:35,450
overview of the Indiana compliance

00:13:32,780 --> 00:13:37,760
checker tool and ask the question why

00:13:35,450 --> 00:13:39,650
are you not using it or are you using it

00:13:37,760 --> 00:13:42,080
and if you are using and how are you not

00:13:39,650 --> 00:13:45,400
or how would you like me to improve it

00:13:42,080 --> 00:13:45,400
it's musician David

00:13:52,740 --> 00:14:00,190
I'd like to ask a really stupid question

00:13:56,430 --> 00:14:25,779
now I don't understand is it using all

00:14:00,190 --> 00:14:27,279
the library or cough library itself so

00:14:25,779 --> 00:14:29,380
it's two separate dumps one is called

00:14:27,279 --> 00:14:35,339
binary the other one is headers on li

00:14:29,380 --> 00:14:35,339
mode right and the binary mode uses the

00:14:38,370 --> 00:14:43,930
almost for most things so for C it's

00:14:41,529 --> 00:14:46,990
almost as comprehensive but it doesn't

00:14:43,930 --> 00:14:49,750
know the struct sizes for example right

00:14:46,990 --> 00:14:52,140
because because that's not included in a

00:14:49,750 --> 00:14:52,140
shared library

00:14:53,280 --> 00:14:59,430
ooh I'm not sure if it checks that yet

00:14:57,060 --> 00:15:00,930
I've read the whole source code of the

00:14:59,430 --> 00:15:04,710
whole thing it's not very complicated

00:15:00,930 --> 00:15:08,970
it's a lot of pearl but the advantage of

00:15:04,710 --> 00:15:13,920
using only the binaries right is that

00:15:08,970 --> 00:15:16,230
you don't have to worry about one cup I

00:15:13,920 --> 00:15:20,220
love all colors and strange headers and

00:15:16,230 --> 00:15:24,900
previous Edison yeah and what yeah but I

00:15:20,220 --> 00:15:27,000
don't see how much that is an

00:15:24,900 --> 00:15:31,350
improvement over just regular deep

00:15:27,000 --> 00:15:36,090
package symbols okay the binary on the

00:15:31,350 --> 00:15:37,830
mode in our case yeah we've got an

00:15:36,090 --> 00:15:40,380
effort this list needs to be automated

00:15:37,830 --> 00:15:42,570
is can we automatically detect which

00:15:40,380 --> 00:15:44,250
headers we use can we I don't know grab

00:15:42,570 --> 00:15:46,860
them out for the debugging data and then

00:15:44,250 --> 00:15:49,800
well I was thinking I was thinking to do

00:15:46,860 --> 00:15:52,110
multi pass of a CC tool such that if it

00:15:49,800 --> 00:15:55,200
finds some compatible headers just

00:15:52,110 --> 00:15:57,450
remove them or have a option flag to

00:15:55,200 --> 00:16:00,060
automatically remove them and rerun it

00:15:57,450 --> 00:16:02,190
again until it runs with no errors

00:16:00,060 --> 00:16:04,920
because usually you only need to remove

00:16:02,190 --> 00:16:07,320
like a handful of header files such that

00:16:04,920 --> 00:16:15,630
your ABI checking most of them if you

00:16:07,320 --> 00:16:17,850
can and then if I do automated dua

00:16:15,630 --> 00:16:20,850
automated as send a mass back file of

00:16:17,850 --> 00:16:23,760
patches across all day bin maintainer or

00:16:20,850 --> 00:16:28,850
am i running it separately as a fake out

00:16:23,760 --> 00:16:28,850
of package test type of thing go on

00:16:28,970 --> 00:16:34,970
they should be run central a service the

00:16:33,500 --> 00:16:37,640
testing congregation in a way that

00:16:34,970 --> 00:17:33,860
doesn't require manual is one of the

00:16:37,640 --> 00:17:35,750
issues yeah I want to go back right if

00:17:33,860 --> 00:17:38,000
if you see the Esso names

00:17:35,750 --> 00:17:40,310
it checks multiple libraries so it's a

00:17:38,000 --> 00:17:44,060
report for the collection of those

00:17:40,310 --> 00:17:46,600
whatever five six libraries tools

00:17:44,060 --> 00:17:46,600
repository

00:17:49,000 --> 00:17:58,309
but a little bit different basics right

00:17:53,890 --> 00:18:06,140
that is annoying yeah in libraries where

00:17:58,309 --> 00:18:09,440
you have well the API dumps they are art

00:18:06,140 --> 00:18:11,870
specific such that at the moment my tool

00:18:09,440 --> 00:18:13,490
does account for that in the helpers

00:18:11,870 --> 00:18:16,279
such that you actually need to supply

00:18:13,490 --> 00:18:22,610
dump for each arch that you want to be

00:18:16,279 --> 00:18:23,269
checking not compliance on yeah it is

00:18:22,610 --> 00:18:26,269
very annoying

00:18:23,269 --> 00:18:30,049
the other bit is that do we want to only

00:18:26,269 --> 00:18:33,049
check against one base or do we want to

00:18:30,049 --> 00:18:35,659
check against each version that ever was

00:18:33,049 --> 00:18:38,480
in the archive so for example if lip foo

00:18:35,659 --> 00:18:41,029
was had three versions in the archive

00:18:38,480 --> 00:18:43,429
when I upload the fourth upload shall I

00:18:41,029 --> 00:18:45,350
be checking against my last nut for all

00:18:43,429 --> 00:18:55,639
the three previous and claim would be

00:18:45,350 --> 00:18:57,799
that saw name should be sufficient yeah

00:18:55,639 --> 00:18:59,840
considering you did it on each upload

00:18:57,799 --> 00:19:02,210
each time you didn't break it then it's

00:18:59,840 --> 00:19:14,149
fine right okay and if you break it once

00:19:02,210 --> 00:19:15,830
you'll still notice it okay when you say

00:19:14,149 --> 00:19:21,399
library maintainer you mean upstream

00:19:15,830 --> 00:19:21,399
knob Debian developer okay okay

00:19:28,440 --> 00:19:38,560
yeah true this was an example of just

00:19:36,030 --> 00:19:40,660
actually using this tool I would have

00:19:38,560 --> 00:19:47,890
done the th exact type of things myself

00:19:40,660 --> 00:19:50,050
I mean I presumably I could write

00:19:47,890 --> 00:19:51,880
something like that to run against the

00:19:50,050 --> 00:19:57,490
day being archived but would it be

00:19:51,880 --> 00:19:59,200
useful or would you rather do it on in

00:19:57,490 --> 00:20:03,340
the source package such as your source

00:19:59,200 --> 00:20:05,980
package right I think you should right

00:20:03,340 --> 00:20:08,680
you should think where should the

00:20:05,980 --> 00:20:10,960
manifest be kept are we are we going to

00:20:08,680 --> 00:20:52,410
implicitly regenerate the manifest from

00:20:10,960 --> 00:20:56,200
squeeze and compare it you know wow I

00:20:52,410 --> 00:20:58,480
mean in a bundle for example there are

00:20:56,200 --> 00:21:00,820
few Quarry libraries that add additional

00:20:58,480 --> 00:21:03,340
symbols which are not upstream and are

00:21:00,820 --> 00:21:05,590
not in Debian and ideally you would want

00:21:03,340 --> 00:21:08,620
to verify that those symbols are never

00:21:05,590 --> 00:21:10,390
dropped a specialist will drop given

00:21:08,620 --> 00:21:12,880
those they're open to specific and not

00:21:10,390 --> 00:21:15,130
even upstream or David right I mean I'm

00:21:12,880 --> 00:21:18,550
more worried I'm not very worried about

00:21:15,130 --> 00:21:20,980
that about you know that we do something

00:21:18,550 --> 00:21:23,260
that Michael might not by declaring to

00:21:20,980 --> 00:21:24,760
do the best thing right okay probably

00:21:23,260 --> 00:21:27,910
not very much work for a little - to

00:21:24,760 --> 00:21:30,340
make it the top data dump and yeah make

00:21:27,910 --> 00:21:30,720
ability yeah he done that but there are

00:21:30,340 --> 00:21:32,909
you

00:21:30,720 --> 00:21:35,640
lots of lots of derivatives now and yeah

00:21:32,909 --> 00:21:36,780
we should be making things work well for

00:21:35,640 --> 00:21:41,270
the people who don't have much effort

00:21:36,780 --> 00:21:47,130
okay write an XML even summon Lines's

00:21:41,270 --> 00:21:49,950
that's too high yeah test it is possible

00:21:47,130 --> 00:21:52,110
to write Orkut for Turkish tests their

00:21:49,950 --> 00:21:57,360
test packages other than the one that

00:21:52,110 --> 00:21:59,450
contains the tests and you could do such

00:21:57,360 --> 00:22:02,159
a thing and then you would have to teach

00:21:59,450 --> 00:22:03,600
you you need a new inverse likely

00:22:02,159 --> 00:22:05,520
different invocation room a pulse

00:22:03,600 --> 00:22:08,039
because now the package that is to be

00:22:05,520 --> 00:22:09,360
tested must be specified on the altar

00:22:08,039 --> 00:22:11,460
for his tests to come online in a

00:22:09,360 --> 00:22:13,789
slightly different way right test

00:22:11,460 --> 00:22:16,470
definition you could write tests that

00:22:13,789 --> 00:22:20,010
the do this thing yeah do that kind of

00:22:16,470 --> 00:22:22,950
thing but well know whether that's

00:22:20,010 --> 00:22:25,289
useful or not for you but it's a thing I

00:22:22,950 --> 00:22:28,380
mean I I really like to do it at Build

00:22:25,289 --> 00:22:31,409
time because packages are built for all

00:22:28,380 --> 00:22:38,490
architectures and I have no idea the

00:22:31,409 --> 00:22:40,380
password for this machine because Debian

00:22:38,490 --> 00:22:42,299
has a lot of architectures and outer

00:22:40,380 --> 00:22:54,809
package that's current they are only run

00:22:42,299 --> 00:22:58,289
on MD 64 and i386 okay but that means

00:22:54,809 --> 00:23:01,200
patches and it can explode your source

00:22:58,289 --> 00:23:03,030
package by bit so for example a dump for

00:23:01,200 --> 00:23:13,080
a single architecture can be megabyte

00:23:03,030 --> 00:23:14,909
compressed yeah yeah and that and then

00:23:13,080 --> 00:23:16,890
people to help me well I give you a

00:23:14,909 --> 00:23:19,500
turbo which is compressed and then

00:23:16,890 --> 00:23:22,530
people say well I'm committing it and to

00:23:19,500 --> 00:23:24,630
get hence I don't want an API dump

00:23:22,530 --> 00:23:28,140
compressed I want the flat tax file

00:23:24,630 --> 00:23:29,909
which is obviously larger well there be

00:23:28,140 --> 00:23:32,700
all the Debian packages of compressed

00:23:29,909 --> 00:23:34,470
during transport so true compressing the

00:23:32,700 --> 00:23:35,890
file again the wind are kids and the

00:23:34,470 --> 00:23:41,590
Debian directory is probably

00:23:35,890 --> 00:23:43,360
helpful well okay right yeah I still

00:23:41,590 --> 00:23:47,440
doesn't frighten me I hope you don't

00:23:43,360 --> 00:23:57,880
want to see the slides again more or

00:23:47,440 --> 00:24:01,440
maybe it is not nothing maybe it was

00:23:57,880 --> 00:24:01,440
that phone because she was typing am

00:24:03,960 --> 00:24:10,270
disability I let it bring out the satire

00:24:06,940 --> 00:24:23,650
CNS or a password or maybe daca did

00:24:10,270 --> 00:24:34,780
digit fubar hello would you like to

00:24:23,650 --> 00:24:36,790
track GCC API I'm not rolling oh yeah

00:24:34,780 --> 00:24:38,980
yeah yeah that bit because that would

00:24:36,790 --> 00:24:58,180
detect it because you see me checks it

00:24:38,980 --> 00:25:00,820
will tell you it was the special case of

00:24:58,180 --> 00:25:03,610
special so this tool very sophisticated

00:25:00,820 --> 00:25:06,240
it can detect missing shared libraries

00:25:03,610 --> 00:25:06,240
if you forget

00:25:27,080 --> 00:25:34,680
right so it has support for templates

00:25:32,150 --> 00:25:38,130
that they change inside your ticket

00:25:34,680 --> 00:25:39,870
plate it will affect the ABI of the

00:25:38,130 --> 00:25:43,380
library which happens to use that

00:25:39,870 --> 00:25:45,690
template after it's rebuilt however to

00:25:43,380 --> 00:25:48,300
actually test that you need both the

00:25:45,690 --> 00:25:50,520
library that uses that template and the

00:25:48,300 --> 00:25:54,510
templates themselves which are often two

00:25:50,520 --> 00:25:58,560
separate projects like boost and lucu PP

00:25:54,510 --> 00:26:01,410
as they're all right and then it can

00:25:58,560 --> 00:26:04,560
check the ABI and it will tell you that

00:26:01,410 --> 00:26:07,920
the template has changed the template

00:26:04,560 --> 00:26:11,340
API has not changed but when you will

00:26:07,920 --> 00:26:14,130
rebuild it your library ABI does change

00:26:11,340 --> 00:26:16,050
so it has support to detect that but

00:26:14,130 --> 00:26:18,690
it's I haven't managed to actually

00:26:16,050 --> 00:26:21,330
construct the config file to detect it

00:26:18,690 --> 00:26:23,880
and actually give me a correct answer

00:26:21,330 --> 00:26:25,590
and I've detected this failure so I

00:26:23,880 --> 00:26:35,090
could work on it if there is a good

00:26:25,590 --> 00:26:35,090
example such that I could lip Abigail

00:26:36,020 --> 00:26:39,020
okay

00:26:42,070 --> 00:26:49,240
templates okay okay I was not aware of

00:26:47,200 --> 00:26:56,080
that one because the ones that I've

00:26:49,240 --> 00:26:58,060
listed oh it's in you okay

00:26:56,080 --> 00:27:00,370
because these are the tools that I've

00:26:58,060 --> 00:27:02,080
tested so their sanity checker and they

00:27:00,370 --> 00:27:04,840
yeah damper I was not aware of that

00:27:02,080 --> 00:27:08,490
Oh ideally you would integrate as many

00:27:04,840 --> 00:27:12,340
of them as possible to detect things

00:27:08,490 --> 00:27:14,680
okay so well everybody will be happy

00:27:12,340 --> 00:27:17,440
when I send them a 10-man patch against

00:27:14,680 --> 00:27:26,380
their package to commit in the source

00:27:17,440 --> 00:27:28,750
package how are you tracking api's right

00:27:26,380 --> 00:27:33,450
you dude locally you don't make it

00:27:28,750 --> 00:27:50,230
public and it's not done or never build

00:27:33,450 --> 00:27:52,330
would you want to mmm okay right I mean

00:27:50,230 --> 00:27:56,800
if I set up a public server it will most

00:27:52,330 --> 00:27:59,170
likely track MD 64 and hi 386 and maybe

00:27:56,800 --> 00:28:04,690
arm if somebody donates me loads of arm

00:27:59,170 --> 00:28:07,690
power can you do this checking in a

00:28:04,690 --> 00:28:10,270
cross way so i yeah i saw the a weird

00:28:07,690 --> 00:28:11,680
version of this tool on andy 64 and i

00:28:10,270 --> 00:28:16,900
can check all the architectures with

00:28:11,680 --> 00:28:23,820
throwing cpu at it I think yes yeah

00:28:16,900 --> 00:28:23,820
because yes that should work oh you did

00:28:28,380 --> 00:29:12,870
well cute double took you real yeah okay

00:29:09,990 --> 00:29:14,760
and that would bring us the thing that

00:29:12,870 --> 00:29:18,000
you know in the Boonta have crystal

00:29:14,760 --> 00:29:22,530
chains to most arches that we care about

00:29:18,000 --> 00:29:25,830
and in Debian Duran there are no crows

00:29:22,530 --> 00:29:28,950
to chains for all arches from like amd64

00:29:25,830 --> 00:29:30,530
that it's people are working on that

00:29:28,950 --> 00:29:33,840
I've heard that before

00:29:30,530 --> 00:29:55,230
probably it like last half come are they

00:29:33,840 --> 00:29:57,000
available it's your machine hi

00:29:55,230 --> 00:30:03,200
you have crossed toolchains to all

00:29:57,000 --> 00:30:03,200
arches I want up okay

00:30:44,850 --> 00:30:55,770
it's been modified difference from the

00:30:53,500 --> 00:30:55,770
Cabal

00:31:11,440 --> 00:31:32,360
well the template yeah yeah this this

00:31:30,260 --> 00:31:36,020
thing finds more problems than the

00:31:32,360 --> 00:31:37,370
symbols and for example for practice so

00:31:36,020 --> 00:31:40,340
for example if you drop or change

00:31:37,370 --> 00:31:42,950
private symbols this thing will tell you

00:31:40,340 --> 00:31:45,820
that symbol has disappeared and symbol

00:31:42,950 --> 00:31:48,650
was changed your DBA incompatible

00:31:45,820 --> 00:31:50,480
because your symbol is public and it is

00:31:48,650 --> 00:31:52,850
in the shared library it has no idea

00:31:50,480 --> 00:31:54,800
that it is somehow else how marked

00:31:52,850 --> 00:31:56,810
private in like API documentation

00:31:54,800 --> 00:31:59,000
because what happens a lot of people say

00:31:56,810 --> 00:32:00,590
oh these are private symbols but then

00:31:59,000 --> 00:32:02,450
they stick it into the shirt library

00:32:00,590 --> 00:32:04,310
such that it's accessible to anybody who

00:32:02,450 --> 00:32:07,730
links against it well that's not very

00:32:04,310 --> 00:32:11,030
private that's like a normal symbol so

00:32:07,730 --> 00:32:12,500
you know then then if this tool detects

00:32:11,030 --> 00:32:14,720
it and then you need to actually check

00:32:12,500 --> 00:32:17,060
if anybody else is using those symbols

00:32:14,720 --> 00:32:19,430
or relies on them and that's like the

00:32:17,060 --> 00:32:23,120
harder cuz you need it's checking all

00:32:19,430 --> 00:32:25,310
the dependencies you know it doesn't

00:32:23,120 --> 00:32:27,440
help much with C++ it finds more

00:32:25,310 --> 00:32:31,040
interesting things in C++ then the

00:32:27,440 --> 00:32:33,500
compiler dependent symbols so it

00:32:31,040 --> 00:32:35,930
actually finds C++ specific API

00:32:33,500 --> 00:32:38,510
breakages because the package symbols

00:32:35,930 --> 00:32:41,780
it's mostly you know elf based specific

00:32:38,510 --> 00:32:45,020
type of mostly for C type of changes of

00:32:41,780 --> 00:32:46,910
API oh I have teller that's left in this

00:32:45,020 --> 00:32:52,160
session that's been quicker than I

00:32:46,910 --> 00:32:53,960
thought it would be yeah so extra buddy

00:32:52,160 --> 00:32:57,230
would happy to see an external website

00:32:53,960 --> 00:32:59,480
and maybe not act upon it and then not

00:32:57,230 --> 00:33:01,700
many of you would be happy with 10 Meg's

00:32:59,480 --> 00:33:04,640
committed to their Debian source package

00:33:01,700 --> 00:33:09,470
not rating unless it's very important

00:33:04,640 --> 00:33:12,210
it's library have like in the core would

00:33:09,470 --> 00:33:14,039
you want an API dump

00:33:12,210 --> 00:33:16,080
effectively be this upstream is posted

00:33:14,039 --> 00:33:38,340
up girls get up okay we don't actually

00:33:16,080 --> 00:33:43,980
show the dinners are also upstream these

00:33:38,340 --> 00:33:55,019
checks correctly upstream right and in

00:33:43,980 --> 00:33:56,490
our case because we use symbols as

00:33:55,019 --> 00:33:58,200
possible with W Patrick could drop a

00:33:56,490 --> 00:34:03,659
symbol and maybe we would like to know

00:33:58,200 --> 00:34:05,580
that the other hand we also think they

00:34:03,659 --> 00:34:07,379
like the massive however large that dump

00:34:05,580 --> 00:34:10,950
would be for you to be very very big I'm

00:34:07,379 --> 00:34:12,720
not sure to something right for some of

00:34:10,950 --> 00:34:15,950
the smaller libraries I maintain like

00:34:12,720 --> 00:34:18,710
Salem archives which

00:34:15,950 --> 00:34:21,069
you know that certain uh fire-and-forget

00:34:18,710 --> 00:34:25,429
me this for mean I would actually be

00:34:21,069 --> 00:34:27,679
right well for me I would ideally would

00:34:25,429 --> 00:34:30,669
want to have this tool reliable enough

00:34:27,679 --> 00:34:34,339
to detect that boost API stay stable

00:34:30,669 --> 00:34:36,139
such that such that when they release a

00:34:34,339 --> 00:34:39,319
new upstream version I don't need to

00:34:36,139 --> 00:34:43,369
repackage and rename ABI of every single

00:34:39,319 --> 00:34:48,919
library just some of them although that

00:34:43,369 --> 00:34:51,220
sounds scary but a little bit okay the

00:34:48,919 --> 00:34:54,500
other thing like for example the recent

00:34:51,220 --> 00:34:58,309
ABI break which wasn't in ABA bright was

00:34:54,500 --> 00:35:01,220
simples conflicts such that we had no

00:34:58,309 --> 00:35:04,130
TLS two six and we had a neutralist to

00:35:01,220 --> 00:35:07,010
eight and both libraries had conflicting

00:35:04,130 --> 00:35:08,990
symbols such that when eventually enough

00:35:07,010 --> 00:35:11,000
people started using the new one but

00:35:08,990 --> 00:35:15,619
there were still users of the older one

00:35:11,000 --> 00:35:18,829
when a binary had both libraries linked

00:35:15,619 --> 00:35:20,480
against it transitively it would explode

00:35:18,829 --> 00:35:25,210
at runtime because the symbols were

00:35:20,480 --> 00:35:25,210
conflicting how can we detect that

00:35:30,280 --> 00:35:35,900
where we should have played okay maybe

00:35:33,320 --> 00:35:38,390
running this for a while so that we can

00:35:35,900 --> 00:35:39,560
send people you can tell that you're

00:35:38,390 --> 00:35:41,180
practically broke the library after

00:35:39,560 --> 00:35:42,920
we've uploaded it it's already a new

00:35:41,180 --> 00:35:50,360
version to go by the way - wrong

00:35:42,920 --> 00:35:57,980
yeah and I knew about it at least what

00:35:50,360 --> 00:36:00,650
we think yeah but really I think a wave

00:35:57,980 --> 00:36:11,240
why maintain is the information do you

00:36:00,650 --> 00:36:17,390
realize that the API changed yeah or

00:36:11,240 --> 00:36:20,770
against able or against testing a useful

00:36:17,390 --> 00:36:20,770
dust of doubt two feet

00:36:34,300 --> 00:36:49,190
okay okay yeah I mean I mean one of them

00:36:47,030 --> 00:36:52,550
libraries that I've been tamed the

00:36:49,190 --> 00:36:55,340
upstream has yet to release a new point

00:36:52,550 --> 00:36:58,060
release version update like micro point

00:36:55,340 --> 00:36:59,810
really subway which does not break area

00:36:58,060 --> 00:37:02,660
for me was easy

00:36:59,810 --> 00:37:04,250
I was bumping the ABI by default but

00:37:02,660 --> 00:37:05,840
then I would like maybe I should stop

00:37:04,250 --> 00:37:06,680
doing it and then I would run the check

00:37:05,840 --> 00:37:10,700
and it's broken

00:37:06,680 --> 00:37:12,710
it's they they change classes

00:37:10,700 --> 00:37:18,280
inheritance for no reason

00:37:12,710 --> 00:37:18,280
that breaks C++ API straight off the bat

00:37:21,040 --> 00:37:34,190
all right okay that's yeah yeah okay do

00:37:32,060 --> 00:37:38,480
people care checking whether this binary

00:37:34,190 --> 00:37:41,240
still is executable in Weezy and Jesse

00:37:38,480 --> 00:37:44,690
and for example said without

00:37:41,240 --> 00:37:47,660
recompilation because you can take a

00:37:44,690 --> 00:37:49,910
dump of squeeze you can make a squeezed

00:37:47,660 --> 00:37:52,370
fruit and take it a be a dump of that

00:37:49,910 --> 00:37:55,730
root and then you can make a dump of

00:37:52,370 --> 00:37:58,550
unstable truth and then you take your

00:37:55,730 --> 00:38:02,390
binary that you've compiled and you can

00:37:58,550 --> 00:38:07,010
ask well will that my binary run against

00:38:02,390 --> 00:38:08,840
that system such that you check that

00:38:07,010 --> 00:38:11,030
you're still able to go across multiple

00:38:08,840 --> 00:38:13,870
system so for example if a third party

00:38:11,030 --> 00:38:19,310
vendor of games never called

00:38:13,870 --> 00:38:21,140
not love but I checked that for then

00:38:19,310 --> 00:38:23,030
they can verify without executing it

00:38:21,140 --> 00:38:25,730
became actually that yes everything is

00:38:23,030 --> 00:38:28,490
compatible or no some library change its

00:38:25,730 --> 00:38:30,620
ibi or API or package version numbers

00:38:28,490 --> 00:38:32,750
changes such that I need to do something

00:38:30,620 --> 00:38:35,240
to keep it running or like provide a

00:38:32,750 --> 00:38:38,480
compact library with my distribution

00:38:35,240 --> 00:38:41,380
method or do people who do this or not

00:38:38,480 --> 00:38:41,380
in this room

00:38:43,910 --> 00:38:49,200
or maybe question is too confusing I'll

00:38:46,680 --> 00:38:53,180
write a blog post about it and about the

00:38:49,200 --> 00:38:53,180
session and notes and see how that goes

00:39:13,130 --> 00:39:24,230
okay okay okay I can look into it and

00:39:21,810 --> 00:39:24,230
fix them

00:39:27,050 --> 00:39:35,660
just just see I didn't let that have

00:39:30,840 --> 00:39:35,660
retry button yet okay

00:39:39,650 --> 00:39:51,050
yeah yeah yeah yeah you need to trigger

00:39:42,890 --> 00:39:53,990
it yeah okay anything else well I'll

00:39:51,050 --> 00:39:56,960
write up a blog post and it will be on

00:39:53,990 --> 00:39:59,000
Debian planet and then the URL to the

00:39:56,960 --> 00:40:01,280
slides will be there and I'll try to

00:39:59,000 --> 00:40:03,080
submit them to summit as well such that

00:40:01,280 --> 00:40:05,360
if you browse and summit you should be

00:40:03,080 --> 00:40:10,220
able to find the slides as well

00:40:05,360 --> 00:40:13,310
and if you have any questions then ping

00:40:10,220 --> 00:40:20,560
me on our CX NOx or email X knocks at

00:40:13,310 --> 00:40:20,560

YouTube URL: https://www.youtube.com/watch?v=hn_v4-lDngs


