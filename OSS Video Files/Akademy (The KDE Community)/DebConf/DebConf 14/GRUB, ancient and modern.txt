Title: GRUB, ancient and modern
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Colin Watson

At: DebConf14
https://debconf14.debconf.org/
Room: Room 329
Scheduled start: 2014-08-24 13:30:00
Captions: 
	00:00:00,030 --> 00:00:05,279
so hi I'm Colin Watson that's a

00:00:03,659 --> 00:00:08,179
recruitment drive so I'm glad to see

00:00:05,279 --> 00:00:11,040
quite so many people here as very useful

00:00:08,179 --> 00:00:23,640
somehow over the years I've find myself

00:00:11,040 --> 00:00:26,910
as the was a little bit of feedback okay

00:00:23,640 --> 00:00:29,220
it's not any better all right

00:00:26,910 --> 00:00:33,840
somehow over the years I've I find

00:00:29,220 --> 00:00:36,450
myself as the de facto Grubman tenner

00:00:33,840 --> 00:00:38,820
and Debian and so I'm also a grub

00:00:36,450 --> 00:00:41,100
developer come out of the years and I'm

00:00:38,820 --> 00:00:42,510
here to persuade you old that this fun

00:00:41,100 --> 00:00:45,890
thing to do and that you can help

00:00:42,510 --> 00:00:48,390
because I need more people so yeah

00:00:45,890 --> 00:00:50,910
grandpa's it's moved on a long way from

00:00:48,390 --> 00:00:52,920
its from its beginnings it it's called

00:00:50,910 --> 00:00:54,570
the grand unified bootloader which is a

00:00:52,920 --> 00:00:56,399
bit of an aspirational name and

00:00:54,570 --> 00:01:01,109
certainly was an aspiration on them back

00:00:56,399 --> 00:01:04,019
in back in 1995 and back then most of us

00:01:01,109 --> 00:01:07,260
most of us just used it over over lalu

00:01:04,019 --> 00:01:09,390
which is the really traditional x86

00:01:07,260 --> 00:01:10,890
loader because you didn't have to

00:01:09,390 --> 00:01:12,390
remember to reinstall your bootloader

00:01:10,890 --> 00:01:16,350
when you installed a new kernel which is

00:01:12,390 --> 00:01:17,729
really annoying but even so quite a few

00:01:16,350 --> 00:01:20,610
different Debian developers have hacked

00:01:17,729 --> 00:01:23,310
on on grub over the years and Noah days

00:01:20,610 --> 00:01:24,750
it's is very powerful boot loader it's

00:01:23,310 --> 00:01:27,360
been ported to many architectures is

00:01:24,750 --> 00:01:28,950
actually quite rewarding to hack on so

00:01:27,360 --> 00:01:30,750
I'll be I'll be giving you a tour of its

00:01:28,950 --> 00:01:33,060
of its history and of its designs

00:01:30,750 --> 00:01:37,890
suggesting some particular areas where

00:01:33,060 --> 00:01:42,299
we could really do with help neither the

00:01:37,890 --> 00:01:44,759
grub project which this is grub one it

00:01:42,299 --> 00:01:47,009
was originally just called grub and we

00:01:44,759 --> 00:01:51,630
not call it grub legacy but it was

00:01:47,009 --> 00:01:53,970
started in 1995 by Eric Berlin he was

00:01:51,630 --> 00:01:55,380
initially trying to boot someone he was

00:01:53,970 --> 00:01:59,490
initially trying to build something to

00:01:55,380 --> 00:02:01,200
put big new heart and among the leaders

00:01:59,490 --> 00:02:03,390
of the day it was it was quite unusual

00:02:01,200 --> 00:02:05,280
and that's you know you could you could

00:02:03,390 --> 00:02:06,800
ever since men use and fly and that sort

00:02:05,280 --> 00:02:11,120
of thing it had a

00:02:06,800 --> 00:02:13,610
Emacs or bash style interface to us

00:02:11,120 --> 00:02:15,860
other loaders usually just let your pens

00:02:13,610 --> 00:02:19,010
kernel commandlineoptions that was about

00:02:15,860 --> 00:02:21,830
all you got and grab me even then had a

00:02:19,010 --> 00:02:23,480
recently kept or command-line adverse I

00:02:21,830 --> 00:02:27,500
recently kept full file system interface

00:02:23,480 --> 00:02:30,020
as well so it was it was pouch it was by

00:02:27,500 --> 00:02:33,290
and large good enough so many people

00:02:30,020 --> 00:02:34,820
adopted us as it was and of course it

00:02:33,290 --> 00:02:37,340
was originally designed for the for the

00:02:34,820 --> 00:02:39,290
herd to start with so it's it started

00:02:37,340 --> 00:02:41,150
off with a focus on a new boot method

00:02:39,290 --> 00:02:44,390
date design which which is called multi

00:02:41,150 --> 00:02:46,250
boot and the history file tells us that

00:02:44,390 --> 00:02:48,380
they were determined not to add to the

00:02:46,250 --> 00:02:53,660
large number of mutually incompatible in

00:02:48,380 --> 00:02:55,280
cebu methods yes well grub grub did soon

00:02:53,660 --> 00:02:58,250
become a little bit more generic and

00:02:55,280 --> 00:03:00,500
supported it supported the methods for

00:02:58,250 --> 00:03:02,900
booting Linux and Southside and I'm

00:03:00,500 --> 00:03:05,030
being a bit unfair multi boot has has

00:03:02,900 --> 00:03:07,670
been genuinely useful to people doing

00:03:05,030 --> 00:03:09,290
academic experiments with with kernels

00:03:07,670 --> 00:03:09,920
everything from scratch or other custom

00:03:09,290 --> 00:03:11,570
payloads

00:03:09,920 --> 00:03:14,060
because they don't have to do all that

00:03:11,570 --> 00:03:16,160
work from scratch anyway I wouldn't I

00:03:14,060 --> 00:03:18,560
wouldn't cover multi bit further this

00:03:16,160 --> 00:03:21,230
this is a rough layout of grub legacy

00:03:18,560 --> 00:03:24,110
back in the day you had stage one this

00:03:21,230 --> 00:03:26,930
was a tiny thing that fitted in the 512

00:03:24,110 --> 00:03:30,230
bytes Master Boot Record it just knew

00:03:26,930 --> 00:03:32,510
how to read the first sector of the next

00:03:30,230 --> 00:03:34,130
stage long stage 1.5 from a fixed

00:03:32,510 --> 00:03:35,900
location and jump dirt that was all the

00:03:34,130 --> 00:03:38,810
code is really stupid

00:03:35,900 --> 00:03:41,420
there was a separate stage 1.5 for each

00:03:38,810 --> 00:03:44,720
separate file system type that grub

00:03:41,420 --> 00:03:47,090
understeers and it had enough that had

00:03:44,720 --> 00:03:49,130
enough fuzz from code to read

00:03:47,090 --> 00:03:50,989
stage 2 from an ordinary file system so

00:03:49,130 --> 00:03:52,610
it's the usual kind of bootstrap your

00:03:50,989 --> 00:03:55,400
way gradually up the stack thing you

00:03:52,610 --> 00:03:57,620
have to do the the rest of the the real

00:03:55,400 --> 00:04:01,100
meat of the lunar lived in stage 2 and

00:03:57,620 --> 00:04:03,050
that's that included all the the the

00:04:01,100 --> 00:04:05,600
command line commands configuration part

00:04:03,050 --> 00:04:07,610
the file parsing and the code to

00:04:05,600 --> 00:04:08,450
actually boot payload like a Linux

00:04:07,610 --> 00:04:10,010
kernel a matrix

00:04:08,450 --> 00:04:14,090
papi what we wanted to do with this in

00:04:10,010 --> 00:04:15,470
the first place so far so good but there

00:04:14,090 --> 00:04:18,680
were there were quite a few problems

00:04:15,470 --> 00:04:22,070
with with the design as it was initially

00:04:18,680 --> 00:04:23,930
put together the first abstraction was

00:04:22,070 --> 00:04:27,139
pretty out hoc

00:04:23,930 --> 00:04:30,919
it was achieved by building a separate

00:04:27,139 --> 00:04:32,240
stage 1.5 blob for each facet in the

00:04:30,919 --> 00:04:36,560
grub new Hobart and shipping it in

00:04:32,240 --> 00:04:38,060
package the and the terminal abstraction

00:04:36,560 --> 00:04:40,160
was sort of reasonable as well but other

00:04:38,060 --> 00:04:43,520
than that there wasn't much in a way of

00:04:40,160 --> 00:04:45,530
internal expressive power going on

00:04:43,520 --> 00:04:48,200
so does it is very difficult to extend

00:04:45,530 --> 00:04:50,389
it safely it's it's hard to work out how

00:04:48,200 --> 00:04:54,050
grub legacy could ever have been taught

00:04:50,389 --> 00:04:56,330
to handle LVM for instance because you

00:04:54,050 --> 00:04:59,300
would then have to have a stage 1.5 that

00:04:56,330 --> 00:05:01,430
nua bytes each of the file systems on

00:04:59,300 --> 00:05:05,540
LVM and so on you end up in a

00:05:01,430 --> 00:05:07,340
combinatorial explosion so it wasn't it

00:05:05,540 --> 00:05:09,950
wasn't very elegance and from that point

00:05:07,340 --> 00:05:12,770
of view there are lots of PC BIOS

00:05:09,950 --> 00:05:14,600
assumptions as well it's it may been

00:05:12,770 --> 00:05:16,220
ground and unified but it wasn't it

00:05:14,600 --> 00:05:18,260
wasn't really particularly portable at

00:05:16,220 --> 00:05:21,260
that point Federer did manage together

00:05:18,260 --> 00:05:22,729
to work with UEFI actually probably read

00:05:21,260 --> 00:05:25,520
house there managed together to work

00:05:22,729 --> 00:05:27,289
with UEFI but it wasn't it wasn't his

00:05:25,520 --> 00:05:30,680
whole straightforward exercise and it

00:05:27,289 --> 00:05:32,419
was very it was very hacky so as time

00:05:30,680 --> 00:05:34,190
went on upstream maintenance kind of

00:05:32,419 --> 00:05:36,860
fell by the wayside it was it was such a

00:05:34,190 --> 00:05:39,070
pen to work on and there wasn't even

00:05:36,860 --> 00:05:44,450
though there wasn't really anything

00:05:39,070 --> 00:05:45,830
newer that was usable nobody was really

00:05:44,450 --> 00:05:47,330
interested in it off streams so the

00:05:45,830 --> 00:05:49,250
distributions did what they had to do

00:05:47,330 --> 00:05:52,370
and this meant that we have ended up

00:05:49,250 --> 00:05:56,599
with with grub legacy packages in Debian

00:05:52,370 --> 00:05:58,160
and Ubuntu and fedora and SUSE and all

00:05:56,599 --> 00:06:01,370
the rest that are actually completely

00:05:58,160 --> 00:06:04,250
different products really the and I

00:06:01,370 --> 00:06:06,380
don't just mean have a different patch

00:06:04,250 --> 00:06:08,110
set in the usual way that you that you

00:06:06,380 --> 00:06:10,130
get they have completely different

00:06:08,110 --> 00:06:13,550
installation and configuration tools

00:06:10,130 --> 00:06:19,099
that don't that don't exist in others in

00:06:13,550 --> 00:06:20,900
the multiple branches so today it's

00:06:19,099 --> 00:06:22,040
basically impossible if somebody comes

00:06:20,900 --> 00:06:26,570
to us upstream

00:06:22,040 --> 00:06:28,610
to support growth 0.97 because it isn't

00:06:26,570 --> 00:06:30,740
it just isn't enough of a thing by

00:06:28,610 --> 00:06:32,360
itself you have to you have to figure

00:06:30,740 --> 00:06:34,670
out what distribution people are using

00:06:32,360 --> 00:06:36,920
and tell them what to do for that so we

00:06:34,670 --> 00:06:42,170
end up counting a lot of that's to to

00:06:36,920 --> 00:06:45,590
the distributions to support so there is

00:06:42,170 --> 00:06:48,950
a grub to rewrite started in started in

00:06:45,590 --> 00:06:50,540
about 2002 it's a very rough timeline of

00:06:48,950 --> 00:06:54,130
it as you can see it was pretty pretty

00:06:50,540 --> 00:06:57,620
long project for nice new projects

00:06:54,130 --> 00:06:59,240
Yoshinori K or coogee hope I hope I've

00:06:57,620 --> 00:07:00,920
pronounced his name correctly who's the

00:06:59,240 --> 00:07:03,920
he was the lead grub maintainer at the

00:07:00,920 --> 00:07:06,950
time and he started work on what he

00:07:03,920 --> 00:07:08,990
calls the preliminary universal

00:07:06,950 --> 00:07:11,180
programming architecture for a new grub

00:07:08,990 --> 00:07:14,600
or poop earth so it's it's canoe there's

00:07:11,180 --> 00:07:16,970
a bad pun in the acronym Cooper is the

00:07:14,600 --> 00:07:22,370
next stage along from a larva or grub

00:07:16,970 --> 00:07:25,370
and an insect lifecycle so yeah I'd say

00:07:22,370 --> 00:07:27,770
it was probably JIT roughly usable by

00:07:25,370 --> 00:07:31,510
about 2007 so there is a long period

00:07:27,770 --> 00:07:35,680
when when it was very experimental and

00:07:31,510 --> 00:07:37,670
my my pretty biased viewpoint is that

00:07:35,680 --> 00:07:40,700
distributions started adopting it

00:07:37,670 --> 00:07:45,500
properly and starting shift is starting

00:07:40,700 --> 00:07:49,460
to present it to users probably in about

00:07:45,500 --> 00:07:50,780
2009 snowball effects kind of kicked in

00:07:49,460 --> 00:07:53,030
from there and it became much better

00:07:50,780 --> 00:07:57,620
quite quickly until we until we finally

00:07:53,030 --> 00:08:00,410
got 2.0 it's in 2012 so I also noted in

00:07:57,620 --> 00:08:03,470
here the point where the first nonet

00:08:00,410 --> 00:08:06,590
norm x86 architecture port showed up

00:08:03,470 --> 00:08:11,660
that was the par PC port for new board

00:08:06,590 --> 00:08:14,060
Mac's in 2004 because that's that's a

00:08:11,660 --> 00:08:17,150
very unusual milestone in something as

00:08:14,060 --> 00:08:20,780
as architecture specific as bootloaders

00:08:17,150 --> 00:08:23,000
have historically tended to be by now if

00:08:20,780 --> 00:08:27,260
you if you look at some core bits of

00:08:23,000 --> 00:08:29,060
grub 2 you can kind of see the echoes of

00:08:27,260 --> 00:08:31,880
bits of grub legacy in there there are a

00:08:29,060 --> 00:08:33,440
few common lines of code but it was a it

00:08:31,880 --> 00:08:35,730
was a pretty sweeping rewrite under

00:08:33,440 --> 00:08:38,220
isn't really much there

00:08:35,730 --> 00:08:39,720
the and this is a this very large

00:08:38,220 --> 00:08:42,750
project by most standards the lead

00:08:39,720 --> 00:08:44,820
maintainer chef has changed hands three

00:08:42,750 --> 00:08:46,470
or four times along the way it's it took

00:08:44,820 --> 00:08:52,080
a lot of forward thinking for people to

00:08:46,470 --> 00:08:55,290
get involved early on so the the design

00:08:52,080 --> 00:08:57,840
that we have now is around a small

00:08:55,290 --> 00:09:01,160
kernel that offers core features like

00:08:57,840 --> 00:09:03,540
initialization virtual file system layer

00:09:01,160 --> 00:09:07,140
module loader almost everything's in

00:09:03,540 --> 00:09:08,760
modules so unfamiliar there there's an

00:09:07,140 --> 00:09:11,640
ins mode command to lunar module those

00:09:08,760 --> 00:09:14,010
there's considerable and inspiration

00:09:11,640 --> 00:09:17,100
taken from full fledged operating

00:09:14,010 --> 00:09:18,720
systems here you you mostly don't have

00:09:17,100 --> 00:09:20,790
to worry about much of this by hands

00:09:18,720 --> 00:09:23,340
grub install which is the mint

00:09:20,790 --> 00:09:25,470
installation to work sites the bare

00:09:23,340 --> 00:09:28,470
minimum set of modules who needs to read

00:09:25,470 --> 00:09:31,350
everything else from boot grub and

00:09:28,470 --> 00:09:34,110
builds those into what we call a core

00:09:31,350 --> 00:09:38,790
image that's that's the rough equivalent

00:09:34,110 --> 00:09:41,780
of what stage 1.5 it was in grub legacy

00:09:38,790 --> 00:09:44,430
but this time it's builds dynamically

00:09:41,780 --> 00:09:46,770
rather than all being shipped statically

00:09:44,430 --> 00:09:49,200
in the package and also at runtime the

00:09:46,770 --> 00:09:52,230
lunar will will load some modules into

00:09:49,200 --> 00:09:56,490
itself automatically so for example if

00:09:52,230 --> 00:09:58,380
you if you request a commands name that

00:09:56,490 --> 00:10:00,170
isn't currently loaded then it will go

00:09:58,380 --> 00:10:02,880
off and load it for you automatically

00:10:00,170 --> 00:10:05,250
but this this architecture makes it a

00:10:02,880 --> 00:10:08,760
lot easier to construct images that fit

00:10:05,250 --> 00:10:11,370
into a constrained space in a in a much

00:10:08,760 --> 00:10:13,320
more flexible way we make very heavy use

00:10:11,370 --> 00:10:15,750
of abstraction layers it's rather like

00:10:13,320 --> 00:10:17,610
the way not quite identical but the way

00:10:15,750 --> 00:10:21,360
rather like the way that a unix-like

00:10:17,610 --> 00:10:23,430
system presents block devices and file

00:10:21,360 --> 00:10:25,380
systems and those are generally

00:10:23,430 --> 00:10:30,240
composable you can quite easily bit from

00:10:25,380 --> 00:10:31,890
XS x FS on LVM on rich whatever there's

00:10:30,240 --> 00:10:33,600
even the loopback modules so you can

00:10:31,890 --> 00:10:37,290
treat a file as if it were a disk much

00:10:33,600 --> 00:10:39,590
like we have in in Linux so this makes

00:10:37,290 --> 00:10:42,900
it quite easy to do strange things like

00:10:39,590 --> 00:10:45,900
you can embed an entire Debian system in

00:10:42,900 --> 00:10:47,170
a file on a on a Windows system which we

00:10:45,900 --> 00:10:49,540
actually did with

00:10:47,170 --> 00:10:53,279
they've been to for a while and it's

00:10:49,540 --> 00:10:56,320
quite scary but it largely works this

00:10:53,279 --> 00:10:59,680
this design also lets us easily builds

00:10:56,320 --> 00:11:01,990
user space tools from very near to the

00:10:59,680 --> 00:11:04,779
same code which is very important and

00:11:01,990 --> 00:11:06,459
I'll come on to that later and as you

00:11:04,779 --> 00:11:07,839
can see from the random steps at the

00:11:06,459 --> 00:11:09,519
bottom there's there's very little

00:11:07,839 --> 00:11:16,089
assembly in this it's almost it's almost

00:11:09,519 --> 00:11:19,269
all portable see the even the some of

00:11:16,089 --> 00:11:23,320
the almost all of the see is obviously

00:11:19,269 --> 00:11:24,399
common the assembly is of course more

00:11:23,320 --> 00:11:27,220
architecture-specific

00:11:24,399 --> 00:11:28,510
but for the for PC BIOS we're only

00:11:27,220 --> 00:11:32,050
talking about four and a half thousand

00:11:28,510 --> 00:11:35,350
lines which is considerable but but not

00:11:32,050 --> 00:11:39,130
not too not too much if I meant in this

00:11:35,350 --> 00:11:41,800
burden so here here's a brief summary of

00:11:39,130 --> 00:11:45,459
what architectures we have now we have a

00:11:41,800 --> 00:11:48,160
number of x86 platforms the the newest

00:11:45,459 --> 00:11:50,649
of those that that you can now use grub

00:11:48,160 --> 00:11:51,449
under Xen para virtualization with with

00:11:50,649 --> 00:11:55,660
a bit of effort

00:11:51,449 --> 00:11:59,050
the newest architectures are arm and arm

00:11:55,660 --> 00:12:02,800
64 which were added last year in in

00:11:59,050 --> 00:12:05,649
practice some only some arm 32 devices

00:12:02,800 --> 00:12:07,779
actually work with with this because

00:12:05,649 --> 00:12:10,600
they require the platforms you boot to

00:12:07,779 --> 00:12:13,089
be built with the you boot API so that

00:12:10,600 --> 00:12:15,040
it can act as a as enough of a firmware

00:12:13,089 --> 00:12:18,130
for grub and a lot of them don't

00:12:15,040 --> 00:12:20,350
actually have that turned on but you

00:12:18,130 --> 00:12:22,839
know it is at least a start I believe

00:12:20,350 --> 00:12:27,640
that in theory all of Jesse's release

00:12:22,839 --> 00:12:30,100
architectures other than s/390 no ss3 no

00:12:27,640 --> 00:12:31,930
TX know isn't it have at least some

00:12:30,100 --> 00:12:33,569
level of grub support which is it's

00:12:31,930 --> 00:12:37,390
pretty awesome

00:12:33,569 --> 00:12:39,339
not in in grub legs see the most the

00:12:37,390 --> 00:12:42,699
hardest and also the most common

00:12:39,339 --> 00:12:44,589
problems we have to debug were were

00:12:42,699 --> 00:12:47,290
problems with reading files from desk in

00:12:44,589 --> 00:12:49,540
one way or another so people had

00:12:47,290 --> 00:12:51,310
problems loading the kernel and in it

00:12:49,540 --> 00:12:53,709
Hardy because they're fast and was in

00:12:51,310 --> 00:12:55,480
some strange and if you also teamed

00:12:53,709 --> 00:12:57,610
to debug this you were usually stuck

00:12:55,480 --> 00:13:00,279
with trying to set up something that

00:12:57,610 --> 00:13:01,209
roughly matched in an emulator and

00:13:00,279 --> 00:13:03,579
either using

00:13:01,209 --> 00:13:06,610
just crude printf debugging or in

00:13:03,579 --> 00:13:10,660
extreme cases trying to attach gdb to

00:13:06,610 --> 00:13:12,249
the emulated machine over a qmu some

00:13:10,660 --> 00:13:13,720
some people in the audience may be

00:13:12,249 --> 00:13:16,709
familiar with this routine it's not very

00:13:13,720 --> 00:13:20,139
much fun especially with added gdb stub

00:13:16,709 --> 00:13:22,689
so in in grub 2 as I said earlier we

00:13:20,139 --> 00:13:25,119
have we have much the same code built

00:13:22,689 --> 00:13:28,480
into utilities called grub probe and

00:13:25,119 --> 00:13:31,899
grub FS test which you and these use the

00:13:28,480 --> 00:13:34,509
the operating systems block device as a

00:13:31,899 --> 00:13:36,879
back end so you can ask grub to use its

00:13:34,509 --> 00:13:39,790
own partition table and file system

00:13:36,879 --> 00:13:41,740
tools parsing code from write their own

00:13:39,790 --> 00:13:43,959
user space this makes it very much

00:13:41,740 --> 00:13:45,790
easier to have tact lots of common

00:13:43,959 --> 00:13:47,170
problems you can use gdb you can use

00:13:45,790 --> 00:13:48,730
valgrind you can use the debugging tools

00:13:47,170 --> 00:13:51,100
of your choice

00:13:48,730 --> 00:13:55,649
Tom Tom Marvel has asked me earlier

00:13:51,100 --> 00:13:59,499
about fgfs and putting that together in

00:13:55,649 --> 00:14:02,920
in grub 2 can be done almost entirely in

00:13:59,499 --> 00:14:06,040
in user space so you can put together a

00:14:02,920 --> 00:14:07,809
new module builds a version of grub

00:14:06,040 --> 00:14:10,119
probe that's linked against it and

00:14:07,809 --> 00:14:12,220
iterate until you get something that

00:14:10,119 --> 00:14:15,670
works rather than having to constantly

00:14:12,220 --> 00:14:19,119
reboot even a even having to reboot an

00:14:15,670 --> 00:14:21,730
emulated machine is a lot of work so a

00:14:19,119 --> 00:14:24,309
similar trick also gave us the this

00:14:21,730 --> 00:14:27,069
spin-off benefit of grub montt that's

00:14:24,309 --> 00:14:29,860
files that's a few sparse from

00:14:27,069 --> 00:14:33,399
implementation that uses grubs fast and

00:14:29,860 --> 00:14:36,220
code so that gives you a guaranteed true

00:14:33,399 --> 00:14:38,379
read-only montt using the exact same

00:14:36,220 --> 00:14:40,499
view that the bootloader will have when

00:14:38,379 --> 00:14:45,279
it tries to look at your at your system

00:14:40,499 --> 00:14:48,639
and this lets you avoid the caveats that

00:14:45,279 --> 00:14:51,399
apply to things like journaling file

00:14:48,639 --> 00:14:56,309
systems in Linux which it turns out you

00:14:51,399 --> 00:14:58,569
sometimes can't safely read-only mods or

00:14:56,309 --> 00:15:01,869
sometimes the the kernel was simply

00:14:58,569 --> 00:15:05,439
refused and it's also useful for things

00:15:01,869 --> 00:15:07,540
like OS poober if if somebody felt the

00:15:05,439 --> 00:15:08,769
urge to make that you work as a hard to

00:15:07,540 --> 00:15:12,129
translate or that would probably be a

00:15:08,769 --> 00:15:14,810
pretty good fit to know you can't do

00:15:12,129 --> 00:15:17,510
everything in user space Utz

00:15:14,810 --> 00:15:20,060
time grubbé gives you it gives you a

00:15:17,510 --> 00:15:23,690
pretty nice bash style interactive shell

00:15:20,060 --> 00:15:26,060
with with runtime controllable debugging

00:15:23,690 --> 00:15:28,340
levels so you can set the set of debug

00:15:26,060 --> 00:15:30,590
variables to various things and that

00:15:28,340 --> 00:15:32,450
will give you different amounts of spew

00:15:30,590 --> 00:15:34,310
on your console so you can often try

00:15:32,450 --> 00:15:37,700
things I can fly and figure out what's

00:15:34,310 --> 00:15:40,370
going on you can do quick miniature

00:15:37,700 --> 00:15:42,650
image builds using the grub mech rescue

00:15:40,370 --> 00:15:45,290
command that gives you an ISO image

00:15:42,650 --> 00:15:46,910
containing the version of grubs that

00:15:45,290 --> 00:15:49,610
you're using that you can then boot in

00:15:46,910 --> 00:15:51,950
an emulator and try out and a useful

00:15:49,610 --> 00:15:55,970
trick is to boot your real-life system

00:15:51,950 --> 00:15:57,770
with with such an image using um you -

00:15:55,970 --> 00:15:59,630
snap shot so that it won't write

00:15:57,770 --> 00:16:01,310
anything back and then you can see how

00:15:59,630 --> 00:16:04,390
the Heather loader that you're working

00:16:01,310 --> 00:16:06,170
with with would boot your your laptop

00:16:04,390 --> 00:16:09,200
without actually risking the possibility

00:16:06,170 --> 00:16:11,480
of breaking anything it's easy to pull

00:16:09,200 --> 00:16:13,550
out bits of bits of configuration files

00:16:11,480 --> 00:16:15,500
run them right invite new commands

00:16:13,550 --> 00:16:18,470
there's a there's a hello world command

00:16:15,500 --> 00:16:21,950
for supports it's about 30 lines so it's

00:16:18,470 --> 00:16:24,230
quite easy to put new things together no

00:16:21,950 --> 00:16:26,480
one of the getting on to things that are

00:16:24,230 --> 00:16:29,450
a little bit more involved on to a

00:16:26,480 --> 00:16:32,780
broken one of the things that were as

00:16:29,450 --> 00:16:35,810
part of Debian's grub legacy changes was

00:16:32,780 --> 00:16:38,660
the debian specific update grub scripts

00:16:35,810 --> 00:16:41,480
and this works by trying to guess which

00:16:38,660 --> 00:16:44,920
parts of boot grub menu dot list were

00:16:41,480 --> 00:16:47,690
user modified by way of magic comments

00:16:44,920 --> 00:16:49,700
and updating everything else to match

00:16:47,690 --> 00:16:51,830
the current state of the system this was

00:16:49,700 --> 00:16:53,630
it was sort of okay but it caused a lot

00:16:51,830 --> 00:16:56,060
of contents sometimes it was just

00:16:53,630 --> 00:16:58,070
because people didn't read the comment

00:16:56,060 --> 00:17:01,310
text it said which parts of the file

00:16:58,070 --> 00:17:04,339
we're safe to edit but just generally

00:17:01,310 --> 00:17:07,270
mixing user editable and automatically

00:17:04,339 --> 00:17:10,459
updated content in this same file

00:17:07,270 --> 00:17:12,020
usually turns out to be a bad idea and

00:17:10,459 --> 00:17:14,990
we've seen that in in various other

00:17:12,020 --> 00:17:18,010
fists and debian as well so for for grub

00:17:14,990 --> 00:17:19,850
two we we brought this well my

00:17:18,010 --> 00:17:24,140
predecessors brought this system

00:17:19,850 --> 00:17:25,760
upstream as as grub mate config and made

00:17:24,140 --> 00:17:28,550
it generate who fit the whole

00:17:25,760 --> 00:17:30,950
configuration file from a small amount

00:17:28,550 --> 00:17:32,840
of user attitude configuration in

00:17:30,950 --> 00:17:36,110
etcetera default grub and a bunch of

00:17:32,840 --> 00:17:38,480
scripts in etc grab D and you can still

00:17:36,110 --> 00:17:40,670
of course write your own grub config

00:17:38,480 --> 00:17:43,760
directly if you like it's about the same

00:17:40,670 --> 00:17:45,680
length that would be in grub 1 but for a

00:17:43,760 --> 00:17:49,160
general purpose system we normally

00:17:45,680 --> 00:17:50,150
prefer the auto-generated approach so so

00:17:49,160 --> 00:17:52,130
far so good

00:17:50,150 --> 00:17:54,050
just about everything is customizable if

00:17:52,130 --> 00:17:56,210
you try hard enough the problem is you

00:17:54,050 --> 00:18:00,320
have to try quite hard in in several

00:17:56,210 --> 00:18:03,710
cases they they all require and anything

00:18:00,320 --> 00:18:06,830
involved requires editing quite quite

00:18:03,710 --> 00:18:08,900
complex shell scripts if you have to if

00:18:06,830 --> 00:18:10,370
if those are changed then the package

00:18:08,900 --> 00:18:14,050
later you're going to have quite a

00:18:10,370 --> 00:18:16,580
difficult merge resolution to do and

00:18:14,050 --> 00:18:18,170
some changes require things like moving

00:18:16,580 --> 00:18:21,140
con files are on to different positions

00:18:18,170 --> 00:18:22,910
in the in the order which which isn't

00:18:21,140 --> 00:18:26,210
going to be handled well by difficult

00:18:22,910 --> 00:18:29,270
config it's like on file a resolution in

00:18:26,210 --> 00:18:31,610
future so all of this probably needs

00:18:29,270 --> 00:18:33,290
somebody to sadly to sit down and design

00:18:31,610 --> 00:18:35,510
a third iteration of the system that

00:18:33,290 --> 00:18:38,510
uses perhaps templating language or

00:18:35,510 --> 00:18:42,620
something but that really hasn't been at

00:18:38,510 --> 00:18:43,790
all started yes ok so now I don't know

00:18:42,620 --> 00:18:47,530
into some things that are still

00:18:43,790 --> 00:18:50,990
genuinely quite hard the PC BIOS

00:18:47,530 --> 00:18:54,980
architecture has well secreted over 30

00:18:50,990 --> 00:18:56,840
or 40 years of of gradual development

00:18:54,980 --> 00:18:59,930
and it's basically pretty awful for

00:18:56,840 --> 00:19:02,420
modern purposes the the usual partition

00:18:59,930 --> 00:19:04,610
table formats is is called MBR from

00:19:02,420 --> 00:19:07,430
Master Boot Record or sometimes the

00:19:04,610 --> 00:19:10,370
ms-dos partition table it doesn't offer

00:19:07,430 --> 00:19:13,100
any formal space for keeping the

00:19:10,370 --> 00:19:16,010
bootloader for keeping boot code in you

00:19:13,100 --> 00:19:18,320
can you chrome a trivial looter into 446

00:19:16,010 --> 00:19:21,260
bytes that basically gives you the

00:19:18,320 --> 00:19:23,360
Debian MBR package which which jumps to

00:19:21,260 --> 00:19:25,640
a looter somewhere else and there are a

00:19:23,360 --> 00:19:29,140
few approaches for where you can keep

00:19:25,640 --> 00:19:31,940
the rest of the rail meat of the looter

00:19:29,140 --> 00:19:33,890
you can embed it in a file system

00:19:31,940 --> 00:19:37,100
somewhere at an offset that you know

00:19:33,890 --> 00:19:39,530
won't change for instance you put it in

00:19:37,100 --> 00:19:41,960
a file and Trust the file system is not

00:19:39,530 --> 00:19:45,289
going to move that around

00:19:41,960 --> 00:19:48,440
sometimes do move things around you

00:19:45,289 --> 00:19:51,440
might run fsck or there are some

00:19:48,440 --> 00:19:53,149
costumes that will do their own tale

00:19:51,440 --> 00:19:55,340
Patti I think tail packing and rosier

00:19:53,149 --> 00:19:57,080
Fest is one of these that that will

00:19:55,340 --> 00:20:00,440
sometimes move blocks around for you and

00:19:57,080 --> 00:20:03,020
fly and that doesn't play very well with

00:20:00,440 --> 00:20:08,659
a boot loader that has hard-coded

00:20:03,020 --> 00:20:12,080
addresses in in the MBR you can a few

00:20:08,659 --> 00:20:14,330
fathom supports an embedding area at the

00:20:12,080 --> 00:20:16,669
starts I think butter Fester's and one

00:20:14,330 --> 00:20:18,380
or two others this is good but it's not

00:20:16,669 --> 00:20:21,169
really widespread enough that we can

00:20:18,380 --> 00:20:24,200
build the whole installation strategy

00:20:21,169 --> 00:20:26,559
around us or you can you can do what

00:20:24,200 --> 00:20:29,799
grub generally does not on MBR you can

00:20:26,559 --> 00:20:33,020
skip the edge of the specification that

00:20:29,799 --> 00:20:36,049
sort of doesn't really exist anywhere

00:20:33,020 --> 00:20:37,820
coherent and you can use the boot and

00:20:36,049 --> 00:20:39,679
process sometimes called a boot track or

00:20:37,820 --> 00:20:42,140
the other names

00:20:39,679 --> 00:20:44,299
that's the unallocated space between the

00:20:42,140 --> 00:20:46,520
MBR and the first partition and this

00:20:44,299 --> 00:20:48,320
make this makes some people itchy it's

00:20:46,520 --> 00:20:49,850
bit it's been nasty it means we have to

00:20:48,320 --> 00:20:52,220
do some alarming things to avoid

00:20:49,850 --> 00:20:54,159
conflicts with other software that put

00:20:52,220 --> 00:20:56,330
things in there in the boot track

00:20:54,159 --> 00:21:01,399
fortunately almost all of that software

00:20:56,330 --> 00:21:04,070
is evil there's there are a few bits of

00:21:01,399 --> 00:21:06,740
Windows software well some of them are

00:21:04,070 --> 00:21:08,120
backup utilities which I'm not quite

00:21:06,740 --> 00:21:11,090
sure why they put things there but they

00:21:08,120 --> 00:21:14,380
probably have a reason the there are a

00:21:11,090 --> 00:21:18,140
few things that on Windows that like to

00:21:14,380 --> 00:21:20,480
put a note in a sector in the boot track

00:21:18,140 --> 00:21:23,720
to say that they have been installed so

00:21:20,480 --> 00:21:26,149
that you cannot simply uninstall them to

00:21:23,720 --> 00:21:28,820
work around their 30-day license trial

00:21:26,149 --> 00:21:31,520
terms you need to do to wipe that bit of

00:21:28,820 --> 00:21:35,480
the boot track as well and that's all

00:21:31,520 --> 00:21:38,270
that's all terribly nasty grub actually

00:21:35,480 --> 00:21:41,029
now has error correction on some of its

00:21:38,270 --> 00:21:43,159
own code in the core image so that it

00:21:41,029 --> 00:21:44,840
can grub can literally cope with a

00:21:43,159 --> 00:21:46,669
couple of sectors of the core image

00:21:44,840 --> 00:21:48,850
being overwritten with completely random

00:21:46,669 --> 00:21:48,850
data

00:21:50,679 --> 00:21:57,830
it's horrifying that we need this but

00:21:54,460 --> 00:21:59,600
yes that's that surprisingly works

00:21:57,830 --> 00:22:02,330
fortunately this becoming less of a

00:21:59,600 --> 00:22:04,640
problem the the alignment requirements

00:22:02,330 --> 00:22:06,620
on modern discs mean that for decent

00:22:04,640 --> 00:22:09,679
performance you want to have your first

00:22:06,620 --> 00:22:12,230
partition start at a one megabyte or

00:22:09,679 --> 00:22:16,580
sometimes even more rather than the

00:22:12,230 --> 00:22:19,760
traditional 63 sectors so we we know

00:22:16,580 --> 00:22:22,970
usually have plenty of space on MBR but

00:22:19,760 --> 00:22:24,169
not quite always things are also

00:22:22,970 --> 00:22:26,929
unpredictable when you have multiple

00:22:24,169 --> 00:22:29,720
disks you you can't tell from Linux

00:22:26,929 --> 00:22:32,900
which disk the system was actually

00:22:29,720 --> 00:22:36,020
booted from you can there are some

00:22:32,900 --> 00:22:40,120
things on some BIOS versions that let

00:22:36,020 --> 00:22:42,620
you make better guesses but it's not

00:22:40,120 --> 00:22:44,330
unfortunately not universal

00:22:42,620 --> 00:22:46,010
you also can't tell what disk is going

00:22:44,330 --> 00:22:49,520
to be good from next time it's not

00:22:46,010 --> 00:22:52,669
necessarily the same the is sometimes it

00:22:49,520 --> 00:22:55,669
depends on which which order the devices

00:22:52,669 --> 00:22:58,760
are enumerated by on the PCI bus even on

00:22:55,669 --> 00:23:01,580
there from the BIOS level and the least

00:22:58,760 --> 00:23:05,450
bad answer is usually to install to all

00:23:01,580 --> 00:23:06,740
of the fixed disks on your system but

00:23:05,450 --> 00:23:08,900
then your annoys some people who have

00:23:06,740 --> 00:23:13,490
complicated multi boot setups so you you

00:23:08,900 --> 00:23:16,340
can't really win the the good partition

00:23:13,490 --> 00:23:17,990
table formats or GPT is much better it's

00:23:16,340 --> 00:23:21,650
it's probably the best thing to have

00:23:17,990 --> 00:23:25,150
come out of the UEFI spec and this gives

00:23:21,650 --> 00:23:30,460
you allocated code allocated space for

00:23:25,150 --> 00:23:30,460
excuse me let me not do that

00:23:34,160 --> 00:23:39,680
what I'm not do that again this gives

00:23:37,460 --> 00:23:41,710
you allocated space for for bootloader

00:23:39,680 --> 00:23:44,690
code in the in the EFI system partition

00:23:41,710 --> 00:23:47,110
in a partition type that we were able to

00:23:44,690 --> 00:23:49,580
safely allocate for ourselves because no

00:23:47,110 --> 00:23:54,410
partition types are good they're

00:23:49,580 --> 00:23:56,300
ginormous we were able to allocate a one

00:23:54,410 --> 00:24:00,110
for ourselves when even when using that

00:23:56,300 --> 00:24:01,780
on on top of BIOS which you can do there

00:24:00,110 --> 00:24:05,210
are there are different interpretations

00:24:01,780 --> 00:24:07,790
of the spec unfortunately and this

00:24:05,210 --> 00:24:10,910
causes some problems particularly the

00:24:07,790 --> 00:24:13,220
bits that's well the when you when you

00:24:10,910 --> 00:24:14,480
install a system with GPT you're

00:24:13,220 --> 00:24:18,590
supposed to put what's called a

00:24:14,480 --> 00:24:20,690
protective MBR in place that that means

00:24:18,590 --> 00:24:23,420
that anything that tries to parse the

00:24:20,690 --> 00:24:25,880
disk as MBR new swattin knows that it

00:24:23,420 --> 00:24:29,870
should stay away and not try to scribble

00:24:25,880 --> 00:24:31,400
over the partition table the the

00:24:29,870 --> 00:24:34,580
interpretation of that part of the spec

00:24:31,400 --> 00:24:37,400
is particularly bad Apple have at least

00:24:34,580 --> 00:24:40,970
used to have a completely incompatible

00:24:37,400 --> 00:24:43,190
both ways version you were required

00:24:40,970 --> 00:24:44,480
instead of a single giant partition to

00:24:43,190 --> 00:24:47,740
do the best job you could have

00:24:44,480 --> 00:24:51,050
representing the GPT partitions in MBR

00:24:47,740 --> 00:24:52,160
and it's yeah that's incompatible both

00:24:51,050 --> 00:24:53,380
ways I don't know if that's still the

00:24:52,160 --> 00:24:57,290
case

00:24:53,380 --> 00:25:00,380
some if you're trying to use GPT on BIOS

00:24:57,290 --> 00:25:03,050
some PC class systems require you to set

00:25:00,380 --> 00:25:06,530
the active flag on the protective MBR

00:25:03,050 --> 00:25:12,110
partition which the GPT spec explicitly

00:25:06,530 --> 00:25:14,570
forbids for some reason so you have your

00:25:12,110 --> 00:25:19,040
you're stuck both ways around on a few

00:25:14,570 --> 00:25:21,950
of this no I you Fe a square SAS knife

00:25:19,040 --> 00:25:24,680
or PC firmware apparently even if your

00:25:21,950 --> 00:25:26,650
new machine looks like its BIOS it's

00:25:24,680 --> 00:25:29,680
almost certainly a legacy layer

00:25:26,650 --> 00:25:32,600
implemented internally on top of UEFI

00:25:29,680 --> 00:25:34,850
and the economics for firmware

00:25:32,600 --> 00:25:36,530
manufacturers a much more favorable this

00:25:34,850 --> 00:25:39,200
way instead of having to maintain their

00:25:36,530 --> 00:25:41,900
own I don't know how many hundred

00:25:39,200 --> 00:25:43,460
thousand lines of code base that's that

00:25:41,900 --> 00:25:46,250
have accreted over the years they can no

00:25:43,460 --> 00:25:47,750
fork Intel's Tiano core as there are

00:25:46,250 --> 00:25:49,370
starting points and just

00:25:47,750 --> 00:25:50,990
do there a driver layer on top of that

00:25:49,370 --> 00:25:52,730
and this seems to have attracted

00:25:50,990 --> 00:25:56,660
essentially all of the BIOS

00:25:52,730 --> 00:25:58,940
manufacturers we should generally expect

00:25:56,660 --> 00:26:03,410
even that legacy BIOS layer to go away

00:25:58,940 --> 00:26:05,180
soon the the direction that we're

00:26:03,410 --> 00:26:07,660
hearing from firmware people is all is

00:26:05,180 --> 00:26:10,610
all about us and we need to cope with us

00:26:07,660 --> 00:26:12,020
my Grubbs core support for UFE is

00:26:10,610 --> 00:26:14,180
basically fine

00:26:12,020 --> 00:26:17,990
the it has more or less a set of drivers

00:26:14,180 --> 00:26:20,720
you'd expect including relatively arcane

00:26:17,990 --> 00:26:22,640
things like serial support now of course

00:26:20,720 --> 00:26:24,800
the big thing recently has been what's

00:26:22,640 --> 00:26:27,410
called secure boot that's a mechanism by

00:26:24,800 --> 00:26:31,370
which the firmware makes sure to only

00:26:27,410 --> 00:26:34,250
ever only ever execute signed code in a

00:26:31,370 --> 00:26:36,410
in a pre boot context no it's obviously

00:26:34,250 --> 00:26:39,230
possible for this to go very wrong from

00:26:36,410 --> 00:26:42,800
the point of view of user freedom the

00:26:39,230 --> 00:26:46,100
FSF calls secure boot restricted boots

00:26:42,800 --> 00:26:47,810
and sad for that reason but a lot of

00:26:46,100 --> 00:26:50,240
systems and I come with secure boot

00:26:47,810 --> 00:26:52,760
enabled by defaults so we need to figure

00:26:50,240 --> 00:26:54,680
out we have to figure out how to work

00:26:52,760 --> 00:26:56,150
with it in the same way that we've had

00:26:54,680 --> 00:27:01,490
to figure out how to work with all kinds

00:26:56,150 --> 00:27:05,210
of devices over the years just from just

00:27:01,490 --> 00:27:06,980
as a hardware enablement matter but the

00:27:05,210 --> 00:27:09,620
important thing is to work out how to do

00:27:06,980 --> 00:27:12,500
that in ways that don't end up impinging

00:27:09,620 --> 00:27:13,930
on our users freedom and that's been

00:27:12,500 --> 00:27:17,210
that's been quite a difficult stock

00:27:13,930 --> 00:27:19,970
we've the community's managed to figure

00:27:17,210 --> 00:27:21,650
out schemes for this that don't stop you

00:27:19,970 --> 00:27:23,750
modifying the operating system on your

00:27:21,650 --> 00:27:27,230
own computer which is the important

00:27:23,750 --> 00:27:28,820
thing we have we have this working on a

00:27:27,230 --> 00:27:31,670
boon to we talked about this at Def Con

00:27:28,820 --> 00:27:34,810
last year to get it working in Debian we

00:27:31,670 --> 00:27:37,100
need DAC to be able to to sign

00:27:34,810 --> 00:27:40,460
bootloader objects that we submit to it

00:27:37,100 --> 00:27:42,020
with debian key I failed at pushing that

00:27:40,460 --> 00:27:45,110
forward so that would be a great project

00:27:42,020 --> 00:27:46,490
for for somebody to check up if I've

00:27:45,110 --> 00:27:50,540
missed it and somebody else is ready

00:27:46,490 --> 00:27:52,520
working in this brilliance I should also

00:27:50,540 --> 00:27:55,550
mention that there are some outstanding

00:27:52,520 --> 00:27:58,730
problems with with the layout of the efi

00:27:55,550 --> 00:28:00,650
system partition which is you Effie's

00:27:58,730 --> 00:28:03,530
ples for putting things like bootloader

00:28:00,650 --> 00:28:06,500
code the spec prescribes how you're

00:28:03,530 --> 00:28:09,679
supposed to behave on fixed disks versus

00:28:06,500 --> 00:28:12,559
removable disks we follow the spec but

00:28:09,679 --> 00:28:14,440
unfortunately some systems don't and and

00:28:12,559 --> 00:28:17,960
essentially require the removable layout

00:28:14,440 --> 00:28:19,730
and Steven Steve McIntyre I see at the

00:28:17,960 --> 00:28:21,320
back there we've we've gone back and

00:28:19,730 --> 00:28:24,350
forward a bit on that we need some way

00:28:21,320 --> 00:28:27,080
to select a removable layout and have

00:28:24,350 --> 00:28:28,640
that actually persist and ideally

00:28:27,080 --> 00:28:30,140
detected this is a problem in the first

00:28:28,640 --> 00:28:31,970
place so that we don't have to ask an

00:28:30,140 --> 00:28:36,590
incomprehensible question in the

00:28:31,970 --> 00:28:39,260
Installer no I'm more Cheerilee a number

00:28:36,590 --> 00:28:42,590
of non x86 arches are in a pretty good

00:28:39,260 --> 00:28:45,440
stairs they get fairly limited testing

00:28:42,590 --> 00:28:46,850
at the moment I knew that some people

00:28:45,440 --> 00:28:49,100
use them because I care to me I get bugs

00:28:46,850 --> 00:28:50,120
from they brick but but generally they

00:28:49,100 --> 00:28:53,090
work ok

00:28:50,120 --> 00:28:55,280
piracy and spark seem fine we should

00:28:53,090 --> 00:28:57,950
probably consider switching the default

00:28:55,280 --> 00:28:59,570
bit Lotus there at some points if you're

00:28:57,950 --> 00:29:02,270
a porter for those architectures please

00:28:59,570 --> 00:29:04,130
get in touch with me some mips type of

00:29:02,270 --> 00:29:07,580
type architectures work well too

00:29:04,130 --> 00:29:10,730
Ryan Lord he lent me a year lune laptop

00:29:07,580 --> 00:29:13,340
a little while back and so that I could

00:29:10,730 --> 00:29:17,059
porch the Debian installer to it and I

00:29:13,340 --> 00:29:19,100
find that grub was basically fine so I

00:29:17,059 --> 00:29:20,540
was able to build the Installer and top

00:29:19,100 --> 00:29:22,299
of that and it was a tenth of the work

00:29:20,540 --> 00:29:24,590
that it might otherwise have been

00:29:22,299 --> 00:29:27,559
there's been a pretty pleasing trend

00:29:24,590 --> 00:29:32,870
towards having new arches included grub

00:29:27,559 --> 00:29:35,720
port very early on arm 64 also par PC 64

00:29:32,870 --> 00:29:39,770
have has had grub working from very

00:29:35,720 --> 00:29:42,020
early in its life and so this this gives

00:29:39,770 --> 00:29:44,360
him a pretty full-featured loader with

00:29:42,020 --> 00:29:45,980
not a lot of effort so it actually works

00:29:44,360 --> 00:29:49,880
out quite well for the ports and I think

00:29:45,980 --> 00:29:52,400
the the most recent norm 64 port I went

00:29:49,880 --> 00:29:54,530
back and looked at it was about 2,000

00:29:52,400 --> 00:29:56,990
lines and patches to do the initial

00:29:54,530 --> 00:29:59,450
enablement know I've got to take

00:29:56,990 --> 00:30:02,720
advantage of the arm ports that already

00:29:59,450 --> 00:30:05,150
existed and also of UFE code so that

00:30:02,720 --> 00:30:06,740
helps a lot but but still I think it

00:30:05,150 --> 00:30:09,040
indicates are pretty porting friendly

00:30:06,740 --> 00:30:09,040
design

00:30:09,080 --> 00:30:15,139
okay so if haven't persuaded you already

00:30:11,419 --> 00:30:16,940
why do we defaults to grub on Debian x86

00:30:15,139 --> 00:30:17,509
there are there are certainly other

00:30:16,940 --> 00:30:20,239
leaders

00:30:17,509 --> 00:30:23,330
there's the venerable lalu we're just

00:30:20,239 --> 00:30:25,730
still largely works fine syslinux and

00:30:23,330 --> 00:30:28,759
friends are actively maintained by some

00:30:25,730 --> 00:30:30,529
very smart people who including folks

00:30:28,759 --> 00:30:33,230
human tender Linux boot protocol and

00:30:30,529 --> 00:30:36,110
there's extra Enix is one of that family

00:30:33,230 --> 00:30:38,029
which you can use on in the same kind of

00:30:36,110 --> 00:30:40,369
way that you might use lightly

00:30:38,029 --> 00:30:42,919
there is yeah boot and PowerPC and so on

00:30:40,369 --> 00:30:46,369
and so forth you can even put a kernel

00:30:42,919 --> 00:30:49,129
and then run fest directly from the UFE

00:30:46,369 --> 00:30:50,149
environment if you want to so some of

00:30:49,129 --> 00:30:52,039
those are pretty good boot loaders

00:30:50,149 --> 00:30:53,450
they're almost all smaller and simpler

00:30:52,039 --> 00:30:55,789
than grow up and not explain thought

00:30:53,450 --> 00:30:57,649
appeals to a lot of people I think it I

00:30:55,789 --> 00:31:02,450
do get this in the simplicity arguments

00:30:57,649 --> 00:31:04,489
but I tend to argue that the risk that

00:31:02,450 --> 00:31:07,249
the result of that is actually moving a

00:31:04,489 --> 00:31:09,619
good deal of complexity elsewhere so the

00:31:07,249 --> 00:31:12,169
the Installer if you have a boot loader

00:31:09,619 --> 00:31:13,279
that can only handle some setups the

00:31:12,169 --> 00:31:15,799
installer needs to know what those

00:31:13,279 --> 00:31:17,600
setups are needs to forbid you from

00:31:15,799 --> 00:31:22,279
doing anything that you won't be able to

00:31:17,600 --> 00:31:23,629
boot in your partitioner you end up with

00:31:22,279 --> 00:31:24,429
slash boot partition scattered

00:31:23,629 --> 00:31:27,080
everywhere

00:31:24,429 --> 00:31:29,080
having a having a boot loader that you

00:31:27,080 --> 00:31:32,059
can trust to handle almost anything

00:31:29,080 --> 00:31:33,289
means that you don't have to think too

00:31:32,059 --> 00:31:35,179
hard when you're running things around

00:31:33,289 --> 00:31:37,879
or so when you're moving things around

00:31:35,179 --> 00:31:41,029
so I'll I'll come to you in a sec band

00:31:37,879 --> 00:31:43,369
thanks you you can easily do things like

00:31:41,029 --> 00:31:45,200
having the boot loader and notice when

00:31:43,369 --> 00:31:47,840
the last boot fails and behave

00:31:45,200 --> 00:31:49,309
differently all that all that sort of

00:31:47,840 --> 00:31:52,779
things useful for a general-purpose

00:31:49,309 --> 00:31:52,779
distro to be able to assume

00:31:59,000 --> 00:32:03,270
the first thing the only load colonel

00:32:01,440 --> 00:32:04,770
and so for that reason they current

00:32:03,270 --> 00:32:07,340
configurations when you use it on MIPS

00:32:04,770 --> 00:32:09,570
have had to be restricted though that

00:32:07,340 --> 00:32:12,630
they don't seem listed in the manifest

00:32:09,570 --> 00:32:17,160
and you could and you can't you can't

00:32:12,630 --> 00:32:17,970
boot off file systems other than X two

00:32:17,160 --> 00:32:21,150
three four

00:32:17,970 --> 00:32:25,050
that's so cool oh is it Sybil I don't

00:32:21,150 --> 00:32:27,450
know we have recently made switched over

00:32:25,050 --> 00:32:31,110
but that has been a restriction up doing

00:32:27,450 --> 00:32:36,450
including wheezy mmm thanks that's your

00:32:31,110 --> 00:32:39,180
Salam you nishan I think that I I think

00:32:36,450 --> 00:32:42,630
that we do not yet have grub working on

00:32:39,180 --> 00:32:44,280
all of the MIPS big-endian architectures

00:32:42,630 --> 00:32:45,780
it's working on little endian but I

00:32:44,280 --> 00:32:48,060
think there are still some problems in

00:32:45,780 --> 00:32:50,070
big endian so we maybe can save the

00:32:48,060 --> 00:32:52,980
world just yet but it might not be too

00:32:50,070 --> 00:32:56,040
far off but thanks

00:32:52,980 --> 00:32:59,790
and plus debit debian runs on on lots of

00:32:56,040 --> 00:33:01,740
architectures generally we try as a as

00:32:59,790 --> 00:33:03,810
an architectural thing we try to run the

00:33:01,740 --> 00:33:05,850
same software across different

00:33:03,810 --> 00:33:09,060
architectures that it all works kind of

00:33:05,850 --> 00:33:11,130
the same way we have the same interfaces

00:33:09,060 --> 00:33:14,610
the same tools are available and so on

00:33:11,130 --> 00:33:16,560
and it makes a lot of sense to have that

00:33:14,610 --> 00:33:18,240
be the case of the bootloader to the

00:33:16,560 --> 00:33:20,160
Installer would certainly be simplified

00:33:18,240 --> 00:33:22,020
by being able to assume that grub montt

00:33:20,160 --> 00:33:27,570
is available on all architectures for

00:33:22,020 --> 00:33:29,400
instance ok so the important bits this

00:33:27,570 --> 00:33:32,340
we've had a lot of people involved over

00:33:29,400 --> 00:33:34,710
the years too many to name I've almost

00:33:32,340 --> 00:33:38,490
certainly missed some feel it Robert

00:33:34,710 --> 00:33:42,300
Millan and Felix Silla and Cortney mala

00:33:38,490 --> 00:33:44,940
have done excellent jobs in Debian a few

00:33:42,300 --> 00:33:46,410
years ago and vladimir zarubin and co

00:33:44,940 --> 00:33:49,410
who does a great job as the upstream and

00:33:46,410 --> 00:33:51,090
tenor but as far as Debian maintenance

00:33:49,410 --> 00:33:52,620
goes it's mostly just me at the moment

00:33:51,090 --> 00:33:55,110
and has been for the last couple of

00:33:52,620 --> 00:33:59,389
years and I can't do it all we we

00:33:55,110 --> 00:34:02,809
probably have heard grub 2 in 2.00

00:33:59,389 --> 00:34:04,489
1.99 in queasy if we had a bit more

00:34:02,809 --> 00:34:06,289
redundancy there I was kind of

00:34:04,489 --> 00:34:07,849
demotivated by the secure boot stuff at

00:34:06,289 --> 00:34:10,159
the time so ended up putting it off

00:34:07,849 --> 00:34:11,659
until it's two layers and that's exactly

00:34:10,159 --> 00:34:13,940
the kind of thing we're having more

00:34:11,659 --> 00:34:14,629
people involved as helpful there are

00:34:13,940 --> 00:34:17,569
lots of bugs

00:34:14,629 --> 00:34:20,779
everybody's but problem is critical for

00:34:17,569 --> 00:34:22,460
them quite understandably so keeping on

00:34:20,779 --> 00:34:26,000
top of the release critical list is

00:34:22,460 --> 00:34:27,769
absolute murder there are but there are

00:34:26,000 --> 00:34:30,500
a few specific problems I'd like to

00:34:27,769 --> 00:34:32,230
highlight that are more more substantial

00:34:30,500 --> 00:34:36,010
and could really do with somebody

00:34:32,230 --> 00:34:38,210
sitting down and thinking quite hard I

00:34:36,010 --> 00:34:39,799
won't go into too much detail because

00:34:38,210 --> 00:34:40,700
I've just assigned from the video team

00:34:39,799 --> 00:34:42,319
that I'm low on time

00:34:40,700 --> 00:34:44,899
but you can ask me about any of them if

00:34:42,319 --> 00:34:46,730
you're interested is I mentioned earlier

00:34:44,899 --> 00:34:48,950
that the system for generating the

00:34:46,730 --> 00:34:51,529
config file has a bad case of second

00:34:48,950 --> 00:34:54,740
system effects and really nice a third

00:34:51,529 --> 00:34:56,929
system to make it easier to customize

00:34:54,740 --> 00:35:01,430
things all problems can be solved by

00:34:56,929 --> 00:35:03,559
another rewrite right on MBR systems we

00:35:01,430 --> 00:35:06,289
often have robustness of problems with

00:35:03,559 --> 00:35:08,329
grub not installing its boot code the

00:35:06,289 --> 00:35:11,000
place where your system actually boots

00:35:08,329 --> 00:35:12,680
from particularly when multiple discs

00:35:11,000 --> 00:35:16,130
are involved this this tends to manifest

00:35:12,680 --> 00:35:18,710
as module loading failures because what

00:35:16,130 --> 00:35:20,990
happens is that over time the core image

00:35:18,710 --> 00:35:23,059
that you're actually using that youth

00:35:20,990 --> 00:35:25,309
that you didn't know about it becomes

00:35:23,059 --> 00:35:28,900
incompatible with new grub modules

00:35:25,309 --> 00:35:30,980
because the ABI changes over time and

00:35:28,900 --> 00:35:33,920
eventually becomes incompatible and

00:35:30,980 --> 00:35:36,349
can't boot anything there are and I

00:35:33,920 --> 00:35:37,940
think that that needs some kind of

00:35:36,349 --> 00:35:40,670
overhaul somewhere though I'm not quite

00:35:37,940 --> 00:35:42,890
sure where there are the remaining bits

00:35:40,670 --> 00:35:45,049
of UFE which I mentioned earlier there's

00:35:42,890 --> 00:35:47,299
getting signing sorted out in Debian

00:35:45,049 --> 00:35:49,789
getting a thing called mock manager

00:35:47,299 --> 00:35:52,640
which is part of part of a separate

00:35:49,789 --> 00:35:54,619
project called shim nicely integrated to

00:35:52,640 --> 00:35:57,880
give users control over the whole

00:35:54,619 --> 00:36:01,160
signing process which will let us

00:35:57,880 --> 00:36:03,049
require signed kernels under secure boot

00:36:01,160 --> 00:36:07,759
and thus make Matthew Garrard want to

00:36:03,049 --> 00:36:09,799
kill me a little bit less and the issues

00:36:07,759 --> 00:36:11,960
with with efi system partition they are

00:36:09,799 --> 00:36:12,759
there's some work to be done with up

00:36:11,960 --> 00:36:14,710
streams

00:36:12,759 --> 00:36:19,180
excellent Cooper from the audience

00:36:14,710 --> 00:36:21,130
that's two two I've discussed this with

00:36:19,180 --> 00:36:23,440
the in Jackson in the past two layouts

00:36:21,130 --> 00:36:27,160
effectively a new boot protocol for a PV

00:36:23,440 --> 00:36:28,960
grub2 so we can have Xen guests install

00:36:27,160 --> 00:36:30,519
a bootloader in a consistent place and

00:36:28,960 --> 00:36:33,130
fast and in fact is Ian Campbell

00:36:30,519 --> 00:36:35,190
recently sent me a something which might

00:36:33,130 --> 00:36:37,569
be useful this for no time to readers

00:36:35,190 --> 00:36:39,160
and hopefully this will eventually let

00:36:37,569 --> 00:36:41,319
us kill off all of the old strange

00:36:39,160 --> 00:36:43,900
things that live in and then to do this

00:36:41,319 --> 00:36:46,599
and finally we should take much better

00:36:43,900 --> 00:36:48,519
advantage of grubs ports and actually

00:36:46,599 --> 00:36:50,619
switch over to them by default on many

00:36:48,519 --> 00:36:53,739
more architectures and we then we have

00:36:50,619 --> 00:37:00,369
done stairs so well I just got onto

00:36:53,739 --> 00:37:03,460
questions so axons there's a microphone

00:37:00,369 --> 00:37:07,089
coming up one of the things I found

00:37:03,460 --> 00:37:09,369
difficult in getting groups with grab

00:37:07,089 --> 00:37:11,849
one and grab two is that the

00:37:09,369 --> 00:37:14,859
documentation hasn't always been as good

00:37:11,849 --> 00:37:17,079
lie low was exceptional in that it came

00:37:14,859 --> 00:37:18,969
with an extremely good document which

00:37:17,079 --> 00:37:21,249
described its principles of operation

00:37:18,969 --> 00:37:23,440
and how to get it to do well almost a if

00:37:21,249 --> 00:37:24,579
you might want it to is that also

00:37:23,440 --> 00:37:28,779
something you're looking for help with

00:37:24,579 --> 00:37:30,339
yes about a year or two ago I went

00:37:28,779 --> 00:37:32,410
through and tried to start

00:37:30,339 --> 00:37:35,890
systematically documenting all of the

00:37:32,410 --> 00:37:37,690
grub commands and overhauling some other

00:37:35,890 --> 00:37:41,469
things and got about halfway through

00:37:37,690 --> 00:37:43,539
that for I ran run out of time but one

00:37:41,469 --> 00:37:45,819
of the one of the problems well has been

00:37:43,539 --> 00:37:47,529
with grub - that the documentation got

00:37:45,819 --> 00:37:50,259
out of debt during the rewrite and thus

00:37:47,529 --> 00:37:53,769
nobody as an incentive to do it properly

00:37:50,259 --> 00:37:56,499
for their further incremental changes so

00:37:53,769 --> 00:37:57,969
I think getting getting that into shape

00:37:56,499 --> 00:38:01,299
would make it much easier to keep in the

00:37:57,969 --> 00:38:05,670
ship it's better than it was in 2010

00:38:01,299 --> 00:38:05,670
it's not Richard being so yes

00:38:08,240 --> 00:38:16,580
anybody else anything from IRC as well

00:38:11,160 --> 00:38:16,580
for Tom

00:38:19,230 --> 00:38:26,040
so this is sort of a related question to

00:38:23,490 --> 00:38:27,900
your comment earlier about how bios's

00:38:26,040 --> 00:38:28,920
are wildly inconsistent about how they

00:38:27,900 --> 00:38:31,650
choose which disk

00:38:28,920 --> 00:38:33,270
they're going to boot from is there

00:38:31,650 --> 00:38:37,550
anything that Grubb could do to help us

00:38:33,270 --> 00:38:39,540
with best practices for failover

00:38:37,550 --> 00:38:41,730
configuration so for example let's say I

00:38:39,540 --> 00:38:43,320
have a server and I want to install two

00:38:41,730 --> 00:38:45,599
disks that are mirrored and you know I

00:38:43,320 --> 00:38:47,369
use LVM or something else in one of the

00:38:45,599 --> 00:38:51,270
challenges is you know how do I

00:38:47,369 --> 00:38:53,430
configure grub on both disks to do to be

00:38:51,270 --> 00:38:55,920
configure the right way despite all of

00:38:53,430 --> 00:38:58,500
the weirdness with bios's but have a

00:38:55,920 --> 00:39:00,750
reasonably easy to maintain setup where

00:38:58,500 --> 00:39:01,890
if one disk actually goes completely

00:39:00,750 --> 00:39:04,290
offline that the system could

00:39:01,890 --> 00:39:06,300
automatically reboot right one of the

00:39:04,290 --> 00:39:08,700
things that I tried to do the the first

00:39:06,300 --> 00:39:11,550
time I systematically attacked this and

00:39:08,700 --> 00:39:16,950
debian grub the thing I tried to do was

00:39:11,550 --> 00:39:21,060
to arrange that we did by Hewitt I think

00:39:16,950 --> 00:39:25,740
installed two disks possibly as by path

00:39:21,060 --> 00:39:29,069
I forget so we encourage people to

00:39:25,740 --> 00:39:33,810
install to all of the disks long system

00:39:29,069 --> 00:39:34,500
I think this so I also the the grub PC

00:39:33,810 --> 00:39:36,960
postions

00:39:34,500 --> 00:39:40,589
notices when a disk has gone away since

00:39:36,960 --> 00:39:44,030
it last checked and it's supposed to

00:39:40,589 --> 00:39:46,589
offer you the the chance to update this

00:39:44,030 --> 00:39:48,810
but you're right it's it's a little bit

00:39:46,589 --> 00:39:51,150
fiddly to manage particularly if if

00:39:48,810 --> 00:39:52,710
you're in a system that is large enough

00:39:51,150 --> 00:39:57,359
that statistically disks are failing

00:39:52,710 --> 00:40:00,210
quite often then this problem and what I

00:39:57,359 --> 00:40:03,630
think what I'd probably like to do is is

00:40:00,210 --> 00:40:06,390
make sure that we install to the disks

00:40:03,630 --> 00:40:08,640
that are associated with a red device or

00:40:06,390 --> 00:40:10,440
something so that you could just

00:40:08,640 --> 00:40:12,180
bootstrap off the red managements I

00:40:10,440 --> 00:40:14,819
think some of that works but isn't

00:40:12,180 --> 00:40:16,790
hooked up very well in Debian there but

00:40:14,819 --> 00:40:19,770
there are several things to do there and

00:40:16,790 --> 00:40:22,230
I think there's also a bug in the in di

00:40:19,770 --> 00:40:24,630
where it doesn't install to all of the

00:40:22,230 --> 00:40:27,089
fixes all of the fixed disks on your

00:40:24,630 --> 00:40:28,010
system but only one so there yeah there

00:40:27,089 --> 00:40:33,140
are seven things to fix

00:40:28,010 --> 00:40:34,670
there's a question over there I think my

00:40:33,140 --> 00:40:37,930
question could be summed up as like how

00:40:34,670 --> 00:40:37,930
tall do you have to be to ride this ride

00:40:38,050 --> 00:40:42,140
it seems like getting started it seems

00:40:40,550 --> 00:40:43,550
like introducing regressions would be a

00:40:42,140 --> 00:40:45,560
really scary thing for someone who

00:40:43,550 --> 00:40:47,750
wanted wanted to get started with the

00:40:45,560 --> 00:40:50,030
project and I'm just wondering what kind

00:40:47,750 --> 00:40:52,010
of facilities do we you have or before

00:40:50,030 --> 00:40:53,990
we actually have upload a new version to

00:40:52,010 --> 00:40:56,420
test you can cost a broad range of

00:40:53,990 --> 00:40:58,070
architectures right well one of the one

00:40:56,420 --> 00:41:00,170
of the points of this talk was to try to

00:40:58,070 --> 00:41:02,619
emphasize that you don't actually have

00:41:00,170 --> 00:41:05,180
to be as tall as people think you do the

00:41:02,619 --> 00:41:08,030
but you're right about the the need for

00:41:05,180 --> 00:41:10,190
regression testing one thing that really

00:41:08,030 --> 00:41:12,050
helps is that the different parts of

00:41:10,190 --> 00:41:14,150
grubber much more isolated neither than

00:41:12,050 --> 00:41:17,780
they used to be so you can you can quite

00:41:14,150 --> 00:41:19,670
easily change one module test changes to

00:41:17,780 --> 00:41:22,460
that without having to worry about

00:41:19,670 --> 00:41:24,950
strange leakage all over this but there

00:41:22,460 --> 00:41:30,680
are things that that doesn't cover there

00:41:24,950 --> 00:41:32,330
is there is some testing arrangements in

00:41:30,680 --> 00:41:35,359
the build system so there's that there

00:41:32,330 --> 00:41:39,200
are some make targets that go off and do

00:41:35,359 --> 00:41:40,970
boot checks of of real systems against

00:41:39,200 --> 00:41:43,850
the against the current version of the

00:41:40,970 --> 00:41:46,010
code and that's everything else lost I

00:41:43,850 --> 00:41:48,350
would like to have Grubb hooked up

00:41:46,010 --> 00:41:51,470
better to some kind of ultra packaged

00:41:48,350 --> 00:41:54,619
test arrangements that it does emulated

00:41:51,470 --> 00:41:57,530
boots across various types of systems on

00:41:54,619 --> 00:42:01,660
see a CI Devi end on that I'd love help

00:41:57,530 --> 00:42:01,660
with that Steve

00:42:03,140 --> 00:42:08,839
now of course UEFI there's a whole slew

00:42:05,960 --> 00:42:13,160
of things I mean as Tom Tom was asking a

00:42:08,839 --> 00:42:17,299
course about MBR and reliable fullback

00:42:13,160 --> 00:42:18,859
of course I'm not aware of any ufi

00:42:17,299 --> 00:42:20,839
implementations that actually do

00:42:18,859 --> 00:42:24,349
fallback for the system partition either

00:42:20,839 --> 00:42:28,670
so that's a cutter in a train wreck yeah

00:42:24,349 --> 00:42:30,739
I suspect what you're maybe you're meant

00:42:28,670 --> 00:42:32,269
to use Hardware readers yeah I think

00:42:30,739 --> 00:42:35,839
clearly that's what people were you

00:42:32,269 --> 00:42:38,509
expected to use it's a mess yeah we

00:42:35,839 --> 00:42:42,730
should definitely get together and talk

00:42:38,509 --> 00:42:45,170
about the removable media path yeah

00:42:42,730 --> 00:42:47,299
again there isn't a good answer but

00:42:45,170 --> 00:42:47,779
let's try and make it as not crap as we

00:42:47,299 --> 00:42:49,579
can

00:42:47,779 --> 00:42:52,309
yeah do you know of any way to detects

00:42:49,579 --> 00:42:55,489
that's that system even if it's

00:42:52,309 --> 00:42:57,680
something like a blacklist book and I

00:42:55,489 --> 00:43:01,369
think it might be all we can do I mean

00:42:57,680 --> 00:43:03,380
we had a system I mean I think life and

00:43:01,369 --> 00:43:04,880
I spoke to you about this you know as an

00:43:03,380 --> 00:43:07,269
example for the people who may not have

00:43:04,880 --> 00:43:09,170
come across this though our firmware

00:43:07,269 --> 00:43:12,170
implementations out were which on

00:43:09,170 --> 00:43:14,869
straight after install may not actually

00:43:12,170 --> 00:43:16,759
recognize that you put grub into the

00:43:14,869 --> 00:43:19,640
path where you're meant to cut it yeah

00:43:16,759 --> 00:43:22,549
once you've booted off a rescue system

00:43:19,640 --> 00:43:24,470
however and on some not particularly

00:43:22,549 --> 00:43:26,960
well understood sequence of things

00:43:24,470 --> 00:43:29,869
including booting off a moveable media

00:43:26,960 --> 00:43:31,759
path we boot a couple more times shuffle

00:43:29,869 --> 00:43:34,309
things around you know I spin twice

00:43:31,759 --> 00:43:35,960
cloth wise if suddenly they'll then will

00:43:34,309 --> 00:43:37,880
recognize that you've put them in there

00:43:35,960 --> 00:43:40,940
what God forbid you ever want to update

00:43:37,880 --> 00:43:43,220
it again it's painful there are some

00:43:40,940 --> 00:43:46,400
exciting problems on Apple Macs that are

00:43:43,220 --> 00:43:50,690
a shadow of the same class of problem

00:43:46,400 --> 00:43:53,779
yeah and of course secure boot get me a

00:43:50,690 --> 00:43:55,640
Steven about this a few days ago of

00:43:53,779 --> 00:43:59,210
course we've been talking about this for

00:43:55,640 --> 00:44:01,130
like two years yeah yeah I know it's I

00:43:59,210 --> 00:44:02,359
feel rubbish as well but we haven't

00:44:01,130 --> 00:44:04,640
really gone any further with it if

00:44:02,359 --> 00:44:06,710
somebody really really wants to help get

00:44:04,640 --> 00:44:08,569
involved in that oh absolutely there's a

00:44:06,710 --> 00:44:11,119
whole load of people who would love to

00:44:08,569 --> 00:44:12,410
see you help not only are there a whole

00:44:11,119 --> 00:44:14,059
load of people who'd like to see you

00:44:12,410 --> 00:44:14,640
help but there's actually roughly a road

00:44:14,059 --> 00:44:15,990
map

00:44:14,640 --> 00:44:22,710
needs to be done as you know you don't

00:44:15,990 --> 00:44:25,020
have to be us a trail it's it's fine we

00:44:22,710 --> 00:44:28,470
don't really care we just don't see it

00:44:25,020 --> 00:44:31,710
done and there are the the things that

00:44:28,470 --> 00:44:35,220
need to be done are as I say the the

00:44:31,710 --> 00:44:38,190
next step I think is in dak and then

00:44:35,220 --> 00:44:39,690
somebody needs to Ches up getting shame

00:44:38,190 --> 00:44:42,690
into Debian with the right kind of

00:44:39,690 --> 00:44:45,090
signatures honest and so on but none of

00:44:42,690 --> 00:44:46,620
it is actually fundamentally hard it

00:44:45,090 --> 00:44:47,850
just requires time to push all of that

00:44:46,620 --> 00:44:49,470
forward exactly

00:44:47,850 --> 00:44:52,080
so yeah so I can save you Christmas

00:44:49,470 --> 00:44:55,520
Drive actually we're out of time so okay

00:44:52,080 --> 00:44:55,520
thank you all very much

00:45:00,730 --> 00:45:04,630
if people in the back

00:45:17,070 --> 00:45:20,139
[Music]

00:45:29,250 --> 00:45:32,420

YouTube URL: https://www.youtube.com/watch?v=xntX0TuRhlo


