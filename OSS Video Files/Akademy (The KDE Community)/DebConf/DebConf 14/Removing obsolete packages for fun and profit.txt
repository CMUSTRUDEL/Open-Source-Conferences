Title: Removing obsolete packages for fun and profit
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Eric Dorland

At: DebConf14
https://debconf14.debconf.org/
Room: Room 327
Scheduled start: 2014-08-26 16:00:00
Captions: 
	00:00:00,060 --> 00:00:08,370
thank you okay

00:00:04,200 --> 00:00:10,950
hi everybody I'm Eric Dorland I am the

00:00:08,370 --> 00:00:26,580
among other things the automate

00:00:10,950 --> 00:00:29,460
container was okay and I'm gonna that

00:00:26,580 --> 00:00:37,350
better he's mine you dude

00:00:29,460 --> 00:00:39,350
no no it's green all right

00:00:37,350 --> 00:00:41,969
right so I'm the auto wave container

00:00:39,350 --> 00:00:44,390
among other things and today I'm gonna

00:00:41,969 --> 00:00:46,800
talk about removing obsolete packages

00:00:44,390 --> 00:00:50,850
this is meant to be up off

00:00:46,800 --> 00:00:52,320
I only have 16 slides so I'm going to

00:00:50,850 --> 00:00:54,870
talk about my experiences in removing

00:00:52,320 --> 00:00:58,219
old versions of auto make and please

00:00:54,870 --> 00:01:03,539
feel free to interrupt with questions or

00:00:58,219 --> 00:01:05,369
criticisms or comments as we go but a

00:01:03,539 --> 00:01:09,960
hopeful a bit of discussion about how to

00:01:05,369 --> 00:01:12,049
do this better in the future or or maybe

00:01:09,960 --> 00:01:15,049
it not better we'll see

00:01:12,049 --> 00:01:19,500
so just to set the context a little bit

00:01:15,049 --> 00:01:21,240
auto make in Debian I started

00:01:19,500 --> 00:01:26,939
maintaining it a really long time ago

00:01:21,240 --> 00:01:29,759
it's making me feel old 2002 this was

00:01:26,939 --> 00:01:33,930
around the time that I don't make 1.6

00:01:29,759 --> 00:01:36,329
come out I think so one of the problems

00:01:33,930 --> 00:01:39,600
auto make has is that new releases of it

00:01:36,329 --> 00:01:42,950
are usually have incompatibilities with

00:01:39,600 --> 00:01:45,240
aren't backwards compatible completely

00:01:42,950 --> 00:01:47,369
there's various reasons why this is

00:01:45,240 --> 00:01:49,500
doesn't it provides a very weird

00:01:47,369 --> 00:01:51,000
interface because you're basically

00:01:49,500 --> 00:01:54,420
embedding things inside of make files

00:01:51,000 --> 00:02:00,450
and it's hard to control the API of a

00:01:54,420 --> 00:02:02,070
make file back in the day there was for

00:02:00,450 --> 00:02:05,670
a very long time there was auto make 1.4

00:02:02,070 --> 00:02:08,280
and that just sort of worked and then I

00:02:05,670 --> 00:02:10,920
don't make 1.4 I was introduced there

00:02:08,280 --> 00:02:13,030
being upgraded how to make 1.5 and lots

00:02:10,920 --> 00:02:14,560
of packages broke

00:02:13,030 --> 00:02:16,510
so what ended up happening is that I

00:02:14,560 --> 00:02:20,770
don't make 1.5 got moved into its own

00:02:16,510 --> 00:02:26,170
package and although mate 1.4 was Auto

00:02:20,770 --> 00:02:28,709
make package nowadays the older versions

00:02:26,170 --> 00:02:31,270
get moved into their own packages and

00:02:28,709 --> 00:02:32,800
the current generally the currently

00:02:31,270 --> 00:02:35,380
released version of the the most

00:02:32,800 --> 00:02:39,610
up-to-date version is the automaker

00:02:35,380 --> 00:02:41,740
package this has some downsides because

00:02:39,610 --> 00:02:45,459
it's not necessarily fully backwards

00:02:41,740 --> 00:02:47,110
compatible but this is usually what

00:02:45,459 --> 00:02:48,610
people want they want the latest version

00:02:47,110 --> 00:02:51,250
of automaker they don't have to install

00:02:48,610 --> 00:02:55,000
a new package anytime a new version of

00:02:51,250 --> 00:03:00,760
automate comes out all the other work

00:02:55,000 --> 00:03:04,060
packages provide an alternative so that

00:03:00,760 --> 00:03:05,830
you can have your user been automate be

00:03:04,060 --> 00:03:09,220
exactly which auto make you want it to

00:03:05,830 --> 00:03:10,989
be the priority of that alternative

00:03:09,220 --> 00:03:12,850
usually means that the latest version

00:03:10,989 --> 00:03:16,709
auto make is the one automatic selected

00:03:12,850 --> 00:03:19,570
but of course you can override that and

00:03:16,709 --> 00:03:21,820
just a note here that depending on the

00:03:19,570 --> 00:03:25,600
make directly is like a little risky

00:03:21,820 --> 00:03:27,580
because again if you have fancy auto

00:03:25,600 --> 00:03:30,880
make files new versions wanna make might

00:03:27,580 --> 00:03:33,549
break you potentially but anyway it's

00:03:30,880 --> 00:03:35,260
not the auto make buff this is just a

00:03:33,549 --> 00:03:39,940
little context about why Auto make is

00:03:35,260 --> 00:03:43,390
what it is in Debian so there's problems

00:03:39,940 --> 00:03:45,519
with this because these backwards of the

00:03:43,390 --> 00:03:47,019
issues as I said we're packaging all the

00:03:45,519 --> 00:03:49,260
versions of auto make each new version

00:03:47,019 --> 00:03:51,970
is getting a new package basically and

00:03:49,260 --> 00:03:55,959
we've gone through a lot of auto make

00:03:51,970 --> 00:03:57,910
packages over the years I didn't count

00:03:55,959 --> 00:04:01,450
them up but it's like almost giving

00:03:57,910 --> 00:04:03,370
close to ten I guess which is a lot of

00:04:01,450 --> 00:04:05,500
packages do you have to deal with and

00:04:03,370 --> 00:04:07,600
people will depend on these individual

00:04:05,500 --> 00:04:10,630
packages for whatever reason and then

00:04:07,600 --> 00:04:14,920
getting them out of the system when they

00:04:10,630 --> 00:04:16,510
become old is troublesome as the weazy

00:04:14,920 --> 00:04:19,989
release we had four different auto makes

00:04:16,510 --> 00:04:21,940
in the weazy release so we had what the

00:04:19,989 --> 00:04:25,190
old old as you can see one point four

00:04:21,940 --> 00:04:30,500
one point nine one point ten

00:04:25,190 --> 00:04:31,970
1.11 insid at one point we're gonna have

00:04:30,500 --> 00:04:34,510
five different versions of law to make

00:04:31,970 --> 00:04:36,950
just a lot of versions not to make and

00:04:34,510 --> 00:04:39,440
you could also see that the 1.4 version

00:04:36,950 --> 00:04:41,780
was last released in 2002 when I started

00:04:39,440 --> 00:04:44,780
maintaining this stuff so it's really

00:04:41,780 --> 00:04:45,920
old and no one should be using it and no

00:04:44,780 --> 00:04:49,010
one should have been using it for the

00:04:45,920 --> 00:04:50,900
last ten years but we sort of kept it

00:04:49,010 --> 00:04:52,370
around because people were like oh maybe

00:04:50,900 --> 00:04:55,900
there's old software that you know

00:04:52,370 --> 00:04:55,900
depends I want to make one point for

00:04:56,290 --> 00:05:02,180
yeah not great so this is crazy

00:05:00,200 --> 00:05:06,370
right this is too many versus bottle

00:05:02,180 --> 00:05:09,380
make no one really wants them so I

00:05:06,370 --> 00:05:10,880
started out on this mission to thing us

00:05:09,380 --> 00:05:15,380
down to hopefully one or two versions of

00:05:10,880 --> 00:05:16,730
Auto make for the next release and so

00:05:15,380 --> 00:05:21,110
I've been doing this over the last year

00:05:16,730 --> 00:05:23,240
and I was making these slides and I was

00:05:21,110 --> 00:05:26,090
thinking about sort of had these weird

00:05:23,240 --> 00:05:29,390
parallels with some things that read

00:05:26,090 --> 00:05:31,550
about so now I present you the five

00:05:29,390 --> 00:05:35,590
stages of removing an obsolete package

00:05:31,550 --> 00:05:38,770
from Debian the first stage is denial

00:05:35,590 --> 00:05:38,770
all right

00:05:39,240 --> 00:05:46,949
so if I send mail to Debian developers

00:05:44,819 --> 00:05:49,530
vow to make don't just do it right I

00:05:46,949 --> 00:05:56,370
mean does everyone agree that that's

00:05:49,530 --> 00:05:58,349
what all happened yeah so that's what I

00:05:56,370 --> 00:05:59,789
started out by doing so I'm talking

00:05:58,349 --> 00:06:01,259
about the tools and stuff that I went

00:05:59,789 --> 00:06:02,639
through this process of you so this is

00:06:01,259 --> 00:06:04,229
sort of technical and sort of procedural

00:06:02,639 --> 00:06:07,680
we've got questions about either side

00:06:04,229 --> 00:06:09,919
just shoot up your hand so the first

00:06:07,680 --> 00:06:14,160
thing you do or the first thing I did is

00:06:09,919 --> 00:06:15,810
that I used gravity control to figure

00:06:14,160 --> 00:06:17,699
out which packages were build depending

00:06:15,810 --> 00:06:19,860
on auto make so auto make basically has

00:06:17,699 --> 00:06:24,000
no actual binary dependencies it's all

00:06:19,860 --> 00:06:27,360
build dependencies so there were 169

00:06:24,000 --> 00:06:29,759
packages source packages okay that's you

00:06:27,360 --> 00:06:32,720
know that's a lot but in Debian scale

00:06:29,759 --> 00:06:37,169
isn't that much it should be fine right

00:06:32,720 --> 00:06:38,669
then I use the DB list tool to turn that

00:06:37,169 --> 00:06:41,039
list of packages into a list of

00:06:38,669 --> 00:06:42,449
maintained errs with their packages it's

00:06:41,039 --> 00:06:44,639
a very nice tool for just generating

00:06:42,449 --> 00:06:46,740
these emails then I sent out an email

00:06:44,639 --> 00:06:47,940
Debbie develops a here's my plan I want

00:06:46,740 --> 00:06:50,669
to get rid of these old versions of auto

00:06:47,940 --> 00:06:52,919
make here are the packages that are

00:06:50,669 --> 00:06:57,449
billed depending on them you know please

00:06:52,919 --> 00:07:00,690
do your part and fix this and I sent

00:06:57,449 --> 00:07:04,099
that mail out on May 27 2013 so before

00:07:00,690 --> 00:07:04,099
the last step comp which I was not at

00:07:05,270 --> 00:07:14,460
stage 2 anger so people aren't fixing

00:07:13,199 --> 00:07:17,729
these things I would have to actually do

00:07:14,460 --> 00:07:18,449
something other than send an email all

00:07:17,729 --> 00:07:23,130
right fine

00:07:18,449 --> 00:07:25,979
so the next thing I did was to try to

00:07:23,130 --> 00:07:29,009
encourage people again to sort of make

00:07:25,979 --> 00:07:30,599
this move the teen has this really nice

00:07:29,009 --> 00:07:32,759
facility one of the tests is actually

00:07:30,599 --> 00:07:34,219
there's a list of obsolete packages so

00:07:32,759 --> 00:07:36,360
if you put your package in that list

00:07:34,219 --> 00:07:38,610
Linton will complain anytime anyone

00:07:36,360 --> 00:07:40,650
depends on you that package to try to

00:07:38,610 --> 00:07:42,090
like for spectators that are paying

00:07:40,650 --> 00:07:43,740
attention that they shouldn't actually

00:07:42,090 --> 00:07:46,229
depending on these packages that's good

00:07:43,740 --> 00:07:48,210
and that's it's cheap to do just send a

00:07:46,229 --> 00:07:49,919
patch 11:20 and I don't see any reason

00:07:48,210 --> 00:07:52,090
they wouldn't take it if it made sense

00:07:49,919 --> 00:07:55,750
and then

00:07:52,090 --> 00:07:56,740
and now I have to file bugs because you

00:07:55,750 --> 00:08:00,130
know people don't read that being the

00:07:56,740 --> 00:08:01,360
valid sort of it's fair I guess so I

00:08:00,130 --> 00:08:03,310
basically just went through the list of

00:08:01,360 --> 00:08:04,930
packages I had with a simple

00:08:03,310 --> 00:08:06,310
substitution script send out mail that

00:08:04,930 --> 00:08:09,340
was like please stop depending on Auto

00:08:06,310 --> 00:08:10,600
make blah with a very boilerplate thing

00:08:09,340 --> 00:08:13,360
saying this is why we're getting rid of

00:08:10,600 --> 00:08:15,220
this old versions of Auto make and I

00:08:13,360 --> 00:08:17,350
sent that off to BTS which is really

00:08:15,220 --> 00:08:18,580
easy right because BTS is just email so

00:08:17,350 --> 00:08:21,130
you can just do that you can file a

00:08:18,580 --> 00:08:24,010
bunch of bugs that way I should note

00:08:21,130 --> 00:08:27,250
that my initial email was a proposal for

00:08:24,010 --> 00:08:28,690
this masked bug filing as well which

00:08:27,250 --> 00:08:30,370
you're supposed to do as part of the

00:08:28,690 --> 00:08:35,589
procedure of sending out mass bug

00:08:30,370 --> 00:08:38,349
filings so when I did this Ida file 117

00:08:35,589 --> 00:08:41,710
bugs so if there's 52 packages that got

00:08:38,349 --> 00:08:44,229
fixed between me sending my initial

00:08:41,710 --> 00:08:46,000
email and the bugs that's I mean that's

00:08:44,229 --> 00:08:48,190
good I shouldn't be that angry maybe I

00:08:46,000 --> 00:08:52,890
did wait four months between these two

00:08:48,190 --> 00:08:55,600
events though so there's plenty of time

00:08:52,890 --> 00:08:58,300
and then the other thing I used was of

00:08:55,600 --> 00:09:00,040
course using BTS user tags to track all

00:08:58,300 --> 00:09:03,970
these bugs very easily by adding this

00:09:00,040 --> 00:09:05,350
automate clean up 2013 tag I added the

00:09:03,970 --> 00:09:08,130
date because I knew this would not be

00:09:05,350 --> 00:09:12,160
the last time we clean up the data too

00:09:08,130 --> 00:09:13,300
so I keep these separate you know always

00:09:12,160 --> 00:09:15,450
good to date your work if you think you

00:09:13,300 --> 00:09:18,250
might have to repeat it

00:09:15,450 --> 00:09:21,130
yeah no I did not finish in 2013 I

00:09:18,250 --> 00:09:23,470
started in 2015 I should have like not

00:09:21,130 --> 00:09:26,650
only clean up 2015 or something if I

00:09:23,470 --> 00:09:30,280
wanted the finish date all right

00:09:26,650 --> 00:09:33,460
so stage three bargaining okay so a past

00:09:30,280 --> 00:09:35,740
the anger stage and now I'm like okay I

00:09:33,460 --> 00:09:37,270
follow these bugs but not much is

00:09:35,740 --> 00:09:39,339
happening so let me just fix this for

00:09:37,270 --> 00:09:40,750
you I'll give you the exact fix on how

00:09:39,339 --> 00:09:43,120
to like move to the newer version of

00:09:40,750 --> 00:09:45,100
automate here's the patch just apply it

00:09:43,120 --> 00:09:46,060
and flow your package it's you know I've

00:09:45,100 --> 00:09:51,190
done all the work I've done all the hard

00:09:46,060 --> 00:09:52,540
stuff so before I even did this 34

00:09:51,190 --> 00:09:55,810
packages were fixed without supplying a

00:09:52,540 --> 00:10:02,350
patch alright I began the patching in

00:09:55,810 --> 00:10:03,760
late October and of 2013 and this is the

00:10:02,350 --> 00:10:05,950
hard part this is the part that's tough

00:10:03,760 --> 00:10:08,020
to automate in many cases just

00:10:05,950 --> 00:10:10,420
to the new version automate worked and

00:10:08,020 --> 00:10:12,130
then it was easy but that was maybe 50%

00:10:10,420 --> 00:10:14,200
of the cases I didn't keep good

00:10:12,130 --> 00:10:17,410
statistics about how how tough this was

00:10:14,200 --> 00:10:19,120
exactly but in a lot of cases like you I

00:10:17,410 --> 00:10:22,360
had to fiddle with the build system or I

00:10:19,120 --> 00:10:25,210
had to like I did like a lot of build a

00:10:22,360 --> 00:10:28,570
lot of bills would like run Auto make

00:10:25,210 --> 00:10:33,700
itself like instead of using thre Auto

00:10:28,570 --> 00:10:35,230
recom and so there was a lot of actual

00:10:33,700 --> 00:10:36,280
like fiddling with packages trying to

00:10:35,230 --> 00:10:37,600
get in the build and then like just

00:10:36,280 --> 00:10:40,060
waiting to build these things which can

00:10:37,600 --> 00:10:42,730
take a very long time to test that this

00:10:40,060 --> 00:10:50,710
worked so this was like a lot of actual

00:10:42,730 --> 00:10:53,800
tough work what else yeah so I mean the

00:10:50,710 --> 00:10:57,070
I used of course people there to do the

00:10:53,800 --> 00:10:58,810
builds and then if I caught if I

00:10:57,070 --> 00:11:00,070
successfully built something with the

00:10:58,810 --> 00:11:02,320
new version automate I would just mail

00:11:00,070 --> 00:11:04,840
off a patch to the existing bug BTS and

00:11:02,320 --> 00:11:07,810
say here's and flip the patch tag saying

00:11:04,840 --> 00:11:09,400
here's the patch so I thought okay at

00:11:07,810 --> 00:11:11,790
this point you know those patches up

00:11:09,400 --> 00:11:14,050
there for almost all these problems

00:11:11,790 --> 00:11:15,540
there should be a wave of uploads and

00:11:14,050 --> 00:11:19,660
everything should be great

00:11:15,540 --> 00:11:22,210
okay so Stage four depression it's not

00:11:19,660 --> 00:11:25,030
what happened all right

00:11:22,210 --> 00:11:28,800
I was pretty much on my own the the

00:11:25,030 --> 00:11:31,510
responsible maintainer is have already

00:11:28,800 --> 00:11:35,020
fixed this problem so we're into this

00:11:31,510 --> 00:11:37,180
sort of long tail of people who don't

00:11:35,020 --> 00:11:38,560
care or people who are too busy to fix

00:11:37,180 --> 00:11:42,130
it to deal with their packages or do

00:11:38,560 --> 00:11:46,480
anything here so now I have to upload

00:11:42,130 --> 00:11:49,330
and amuse so I started this in late

00:11:46,480 --> 00:11:52,630
January I think and between January

00:11:49,330 --> 00:11:55,780
April I had to upload 63 nm use so it's

00:11:52,630 --> 00:11:57,510
again about maybe 50% of the the

00:11:55,780 --> 00:12:03,190
remainder got fixed in the last stage

00:11:57,510 --> 00:12:05,980
but 63 IOM uses a lot so again I

00:12:03,190 --> 00:12:08,350
uploaded these two delayed ten so only

00:12:05,980 --> 00:12:10,900
seven of these were actually what like

00:12:08,350 --> 00:12:13,680
another upload came in in front of them

00:12:10,900 --> 00:12:15,970
to block them out or anything like that

00:12:13,680 --> 00:12:18,130
it was relatively easy this part was

00:12:15,970 --> 00:12:19,260
sort of fairly mechanical I just applied

00:12:18,130 --> 00:12:23,490
my patch that I've already

00:12:19,260 --> 00:12:25,020
in the VTS and then using the depth

00:12:23,490 --> 00:12:27,540
change tool which is really nice

00:12:25,020 --> 00:12:30,690
you just have it create the the change

00:12:27,540 --> 00:12:34,230
log entry for you and then again you use

00:12:30,690 --> 00:12:35,910
P builder to build the package it's

00:12:34,230 --> 00:12:37,050
really nice if you use this might be

00:12:35,910 --> 00:12:38,880
obvious too but if you use something

00:12:37,050 --> 00:12:39,870
like a new PG agent you can save

00:12:38,880 --> 00:12:41,340
yourself a lot of typing of your

00:12:39,870 --> 00:12:45,380
password while you're signing packages

00:12:41,340 --> 00:12:49,320
for upload and then you upload it to

00:12:45,380 --> 00:12:52,740
delayed ten and you use the N F mu diff

00:12:49,320 --> 00:12:54,450
tool to update the bug the N mu diff

00:12:52,740 --> 00:12:56,220
tool is really awesome

00:12:54,450 --> 00:12:58,410
you basically just give it the the

00:12:56,220 --> 00:13:01,110
existing package and your upload and it

00:12:58,410 --> 00:13:02,730
will do all the magic of creating the

00:13:01,110 --> 00:13:04,740
figuring out what the patches setting

00:13:02,730 --> 00:13:06,150
into the BTS and with a nice email

00:13:04,740 --> 00:13:07,890
saying I've uploaded this so that's a

00:13:06,150 --> 00:13:09,450
for doing an amuse you should be using

00:13:07,890 --> 00:13:14,160
this if you're not you're doing it wrong

00:13:09,450 --> 00:13:18,350
I think it was a bunch of these uploads

00:13:14,160 --> 00:13:22,260
and mostly people were happy with them

00:13:18,350 --> 00:13:24,420
but I did get one response that was like

00:13:22,260 --> 00:13:26,040
why are you doing this so this is a

00:13:24,420 --> 00:13:28,080
little redaction of the so this was the

00:13:26,040 --> 00:13:30,210
the quoting of the email that got sent

00:13:28,080 --> 00:13:33,420
to me it's like I prepared in mu for a

00:13:30,210 --> 00:13:35,610
package and I've uploaded to believe ten

00:13:33,420 --> 00:13:37,830
and so I got this and a mewing for a

00:13:35,610 --> 00:13:39,180
wishlist bug question mark where my

00:13:37,830 --> 00:13:40,200
question was a lot of question marks we

00:13:39,180 --> 00:13:42,720
had it must have had a lot of questions

00:13:40,200 --> 00:13:44,160
and then this is again part of the

00:13:42,720 --> 00:13:46,020
boilerplate that an immune if sends out

00:13:44,160 --> 00:13:47,220
peaceful feel free to tell me if I

00:13:46,020 --> 00:13:50,250
should delete any longer

00:13:47,220 --> 00:13:54,750
yes please indefinitely or at least

00:13:50,250 --> 00:13:56,340
until it's important /r c so I went out

00:13:54,750 --> 00:13:57,870
who there was only one person who sent

00:13:56,340 --> 00:14:04,140
me a note like this many people sent me

00:13:57,870 --> 00:14:06,540
thanks and appreciation but and this

00:14:04,140 --> 00:14:08,750
didn't really impede me because they in

00:14:06,540 --> 00:14:12,330
fact uploaded a package that fixed this

00:14:08,750 --> 00:14:16,230
about three or four days later but the

00:14:12,330 --> 00:14:17,460
reaction was kind of weird so I don't

00:14:16,230 --> 00:14:18,450
know does anyone have any opinion I

00:14:17,460 --> 00:14:19,830
guess I should ask the question does

00:14:18,450 --> 00:14:23,540
anyone have an opinion if this is wrong

00:14:19,830 --> 00:14:23,540
to NMU a wishlist bug

00:14:30,220 --> 00:14:35,870
it seems really situational if you've

00:14:33,560 --> 00:14:37,640
filed a wishlist bug and there's been no

00:14:35,870 --> 00:14:39,710
activity for a while or if in general

00:14:37,640 --> 00:14:42,260
there's no activity on the package for a

00:14:39,710 --> 00:14:44,240
while then I don't see any reason why

00:14:42,260 --> 00:14:45,770
you couldn't upload it delayed one it's

00:14:44,240 --> 00:14:46,810
given that it can always be removed

00:14:45,770 --> 00:14:49,280
within 10 days

00:14:46,810 --> 00:14:52,190
uploading immediately for a wishlist bug

00:14:49,280 --> 00:14:53,960
seems almost always a bad idea but a

00:14:52,190 --> 00:14:56,510
delayed upload for a package that

00:14:53,960 --> 00:14:58,820
doesn't seem to be getting uploads every

00:14:56,510 --> 00:14:59,810
other day from its maintainer I don't

00:14:58,820 --> 00:15:10,130
think it's reasonable to gripe about

00:14:59,810 --> 00:15:11,570
that emigrate there's rust there I have

00:15:10,130 --> 00:15:15,470
no voice I'm sorry I have an opinion

00:15:11,570 --> 00:15:17,150
that it's not a wishlist bug I mean I

00:15:15,470 --> 00:15:18,710
think you know if you're trying to get

00:15:17,150 --> 00:15:20,480
rid of old packages then I think that it

00:15:18,710 --> 00:15:22,730
starts out as wish list fine but when

00:15:20,480 --> 00:15:24,170
you're down to the last few maintainer

00:15:22,730 --> 00:15:25,280
who have not uploaded their package I

00:15:24,170 --> 00:15:27,560
think at that point you're climbing

00:15:25,280 --> 00:15:29,060
towards normal or important and at some

00:15:27,560 --> 00:15:31,700
point the package is going away at which

00:15:29,060 --> 00:15:34,430
point it's RC and then nm user of course

00:15:31,700 --> 00:15:37,520
perfectly fine sure there's a bit of a

00:15:34,430 --> 00:15:38,510
catch-22 here in that that I guess I'll

00:15:37,520 --> 00:15:41,180
talk about in the next slide but it's

00:15:38,510 --> 00:15:44,630
hard to get FTP master to remove the

00:15:41,180 --> 00:15:46,700
package before all of the dependents

00:15:44,630 --> 00:15:48,830
have been changed so it's actually tough

00:15:46,700 --> 00:15:50,360
to get it upgraded to RC I mean it's

00:15:48,830 --> 00:15:53,240
possible that's a possible solution but

00:15:50,360 --> 00:15:55,220
yeah the way to get it upgraded to RC is

00:15:53,240 --> 00:15:56,840
to talk to the release team who whilst

00:15:55,220 --> 00:15:59,660
who have the jurisdiction over what is

00:15:56,840 --> 00:16:01,820
RC or not I'm sure in this situation

00:15:59,660 --> 00:16:03,380
probably we would at this point say well

00:16:01,820 --> 00:16:05,210
you're going to remove the old package

00:16:03,380 --> 00:16:07,430
that will stop things being buildable

00:16:05,210 --> 00:16:09,230
this is now RC and then you have some

00:16:07,430 --> 00:16:11,630
levers to do it that only applies to

00:16:09,230 --> 00:16:13,190
this situation and it's not a I'm not

00:16:11,630 --> 00:16:16,040
saying that's what we would have done

00:16:13,190 --> 00:16:17,570
but right right the but but talk to us

00:16:16,040 --> 00:16:19,400
if you're getting into the shores and I

00:16:17,570 --> 00:16:20,840
I suppose I could have tried to petition

00:16:19,400 --> 00:16:25,820
to have this be a release call that

00:16:20,840 --> 00:16:27,050
there were less Auto makes in now for

00:16:25,820 --> 00:16:31,360
completely different reasons that's

00:16:27,050 --> 00:16:31,360
really complicated and not recommended

00:16:32,119 --> 00:16:38,579
now I'm glad that you anonymize this but

00:16:36,389 --> 00:16:43,429
I could probably guess in three exactly

00:16:38,579 --> 00:16:45,869
who that was it's possible it's possible

00:16:43,429 --> 00:16:54,179
please please do not speculate I do this

00:16:45,869 --> 00:16:56,819
once all right there I mean what is it

00:16:54,179 --> 00:16:58,829
you shouldn't upload for a wish let bug

00:16:56,819 --> 00:17:01,319
straight away and you shouldn't even

00:16:58,829 --> 00:17:03,629
upload to delay 10-4 wish list bug

00:17:01,319 --> 00:17:05,490
straight away I thought that delayed was

00:17:03,629 --> 00:17:07,980
specifically introduced such that you

00:17:05,490 --> 00:17:10,679
can upload packages straight away and

00:17:07,980 --> 00:17:13,380
they have a time deadline on them set

00:17:10,679 --> 00:17:15,270
such that you have 10 days to respond or

00:17:13,380 --> 00:17:17,699
to remove the package from delay

00:17:15,270 --> 00:17:19,350
yourself if your maintainer and you're

00:17:17,699 --> 00:17:22,500
not happy you should know how to use D

00:17:19,350 --> 00:17:24,600
cut remove right sure yeah I and and and

00:17:22,500 --> 00:17:26,250
now we're saying that well actually you

00:17:24,600 --> 00:17:28,649
should file a bug and say that you're

00:17:26,250 --> 00:17:30,419
intending to upload it to delay 10 and

00:17:28,649 --> 00:17:33,390
then sometime later you should come back

00:17:30,419 --> 00:17:37,169
and do that actually I think should we

00:17:33,390 --> 00:17:39,179
create delayed 30 right so my reading at

00:17:37,169 --> 00:17:40,649
the handbook about animators also seems

00:17:39,179 --> 00:17:42,870
to jive with this where it's like if

00:17:40,649 --> 00:17:45,510
this is a if this is an actual bug the

00:17:42,870 --> 00:17:46,890
severity doesn't matter you can do it

00:17:45,510 --> 00:17:48,870
you can basically upload an enemy to

00:17:46,890 --> 00:17:51,960
delay 10 at any time

00:17:48,870 --> 00:17:53,429
is what I read is that if my

00:17:51,960 --> 00:17:54,990
interpretation of that of what it says

00:17:53,429 --> 00:17:56,220
there now maybe other people disagree

00:17:54,990 --> 00:17:58,289
about that interpretation on it I

00:17:56,220 --> 00:18:00,779
totally agree with that and yeah and

00:17:58,289 --> 00:18:03,539
I'll point out that this is after you

00:18:00,779 --> 00:18:07,460
had filed the bug yeah this is later

00:18:03,539 --> 00:18:10,169
sent the patch yeah yeah yeah so I mean

00:18:07,460 --> 00:18:11,669
if the patch has been available and

00:18:10,169 --> 00:18:13,620
hasn't been applied and new versions

00:18:11,669 --> 00:18:15,240
haven't been uploaded then uploading it

00:18:13,620 --> 00:18:17,130
to delay 10 there is absolutely no

00:18:15,240 --> 00:18:18,630
reason to avoid doing that the shirt

00:18:17,130 --> 00:18:22,620
absolutely I mean you were you were

00:18:18,630 --> 00:18:24,600
gracious or delay of sending it to

00:18:22,620 --> 00:18:26,370
delayed and then you were gracious into

00:18:24,600 --> 00:18:29,340
making it delayed 10 by that point so

00:18:26,370 --> 00:18:31,110
right I mean so I didn't I did perhaps I

00:18:29,340 --> 00:18:32,789
guess one of the questions to that I

00:18:31,110 --> 00:18:36,210
that I will come up at the last slide to

00:18:32,789 --> 00:18:37,860
but is should should I have waited

00:18:36,210 --> 00:18:39,149
should I have done the path like I

00:18:37,860 --> 00:18:40,649
basically did this in two stages I did

00:18:39,149 --> 00:18:42,779
the patch and then I waited a bunch of

00:18:40,649 --> 00:18:43,770
time and then I did delay 10 up enemy

00:18:42,779 --> 00:18:46,620
uploads for people who didn't

00:18:43,770 --> 00:18:48,330
respond so should I just combine those

00:18:46,620 --> 00:18:51,360
and just immediately uploaded em use

00:18:48,330 --> 00:18:54,840
delay 10 is that their consensus around

00:18:51,360 --> 00:18:56,580
that if delay 10 isn't enough delay we

00:18:54,840 --> 00:18:58,290
could make the number bigger but in

00:18:56,580 --> 00:19:01,140
principle delay did exist so that you

00:18:58,290 --> 00:19:03,540
can do this in one pass upload the file

00:19:01,140 --> 00:19:05,340
the bug include the patch upload the

00:19:03,540 --> 00:19:06,660
package if somebody doesn't want it they

00:19:05,340 --> 00:19:09,600
know how to delete things from delayed

00:19:06,660 --> 00:19:12,180
yeah I mean the one caveat there being

00:19:09,600 --> 00:19:13,710
is it trivially easy for people for

00:19:12,180 --> 00:19:15,780
example who have their packages

00:19:13,710 --> 00:19:17,430
sponsored to kill something out of

00:19:15,780 --> 00:19:20,010
delayed without going and finding a

00:19:17,430 --> 00:19:21,810
sponsors answer within 10 days but that

00:19:20,010 --> 00:19:25,260
aside you could probably find someone on

00:19:21,810 --> 00:19:26,400
Debian developer a sponsor I think

00:19:25,260 --> 00:19:32,670
you're responsible for the enemies

00:19:26,400 --> 00:19:34,620
you're uploading I mean if you uploaded

00:19:32,670 --> 00:19:39,120
something to the delayed queue oh I see

00:19:34,620 --> 00:19:40,920
what you think I would if there was a

00:19:39,120 --> 00:19:42,180
delayed 30 like I could have uploaded it

00:19:40,920 --> 00:19:44,100
there and that would have been I would

00:19:42,180 --> 00:19:45,510
have been fine with that and it would

00:19:44,100 --> 00:19:47,820
have gone faster even though it was

00:19:45,510 --> 00:19:50,420
delayed 30 probably I mean the person

00:19:47,820 --> 00:19:53,610
who made the upload to delayed if

00:19:50,420 --> 00:19:55,800
somebody asks you to remove it you have

00:19:53,610 --> 00:19:58,710
the powers to remove it right such that

00:19:55,800 --> 00:20:02,280
if the maintainer is non uploading 2d

00:19:58,710 --> 00:20:04,230
and then he requests you to remove it or

00:20:02,280 --> 00:20:05,970
she then you just remove it because you

00:20:04,230 --> 00:20:09,750
uploaded it so I don't think there is a

00:20:05,970 --> 00:20:11,490
deadlock in there yeah I mean if people

00:20:09,750 --> 00:20:12,690
were responsive on the bug I didn't

00:20:11,490 --> 00:20:13,830
immediately and am you things like

00:20:12,690 --> 00:20:17,250
people were like oh yeah I'm gonna get

00:20:13,830 --> 00:20:21,060
to that in a few like the grub

00:20:17,250 --> 00:20:22,440
maintainer had a had a bug in this and

00:20:21,060 --> 00:20:23,820
he was like oh I've got that fixed up

00:20:22,440 --> 00:20:25,110
stream and uploaded in the next few

00:20:23,820 --> 00:20:26,790
weeks and I was like cool I will ignore

00:20:25,110 --> 00:20:29,490
and then I ignored it for several months

00:20:26,790 --> 00:20:31,170
and he still had that and I didn't have

00:20:29,490 --> 00:20:33,660
an immune grub and then he was like

00:20:31,170 --> 00:20:34,710
whoops and then he just went over top of

00:20:33,660 --> 00:20:36,570
that because he had completely forgotten

00:20:34,710 --> 00:20:38,430
to do this so I mean there's weird

00:20:36,570 --> 00:20:39,840
situations like that where everyone has

00:20:38,430 --> 00:20:41,130
good intentions and still there can be

00:20:39,840 --> 00:20:43,740
introduced delays but yeah sorry I go

00:20:41,130 --> 00:20:45,450
ahead right I gain upon IRC wanted to

00:20:43,740 --> 00:20:47,490
say that the FTP team does in fact

00:20:45,450 --> 00:20:49,290
remove packages when you're down to a

00:20:47,490 --> 00:20:50,910
few just a few packages that depend on

00:20:49,290 --> 00:20:53,470
it they wouldn't want to remove them if

00:20:50,910 --> 00:20:54,970
there's 150 of them sure but wanted to

00:20:53,470 --> 00:20:56,080
did want to mention that that is an

00:20:54,970 --> 00:20:59,919
option in there where they are willing

00:20:56,080 --> 00:21:01,559
to do that that's good to hear

00:20:59,919 --> 00:21:05,679
it didn't quite play out that way but

00:21:01,559 --> 00:21:06,909
let's good to hear all right someone

00:21:05,679 --> 00:21:10,929
else before I go into the next the last

00:21:06,909 --> 00:21:16,389
the final stage okay so the fifth stage

00:21:10,929 --> 00:21:18,490
of course is acceptance in the end to

00:21:16,389 --> 00:21:20,139
get these packages removed I had to sort

00:21:18,490 --> 00:21:24,129
of appeal to FTP master like it did all

00:21:20,139 --> 00:21:25,870
this work they still had to remove that

00:21:24,129 --> 00:21:27,580
they still to do that final step and it

00:21:25,870 --> 00:21:31,090
was kind of out of my hands

00:21:27,580 --> 00:21:34,029
so eventually I'll don't make one point

00:21:31,090 --> 00:21:35,019
for in one and one ten are gone I don't

00:21:34,029 --> 00:21:37,539
make one point on is still in the

00:21:35,019 --> 00:21:39,580
archive there's only three packages that

00:21:37,539 --> 00:21:42,070
I think there's one package it still

00:21:39,580 --> 00:21:44,470
does build depend on auto make 1.4 but

00:21:42,070 --> 00:21:46,840
it does not build from source either but

00:21:44,470 --> 00:21:49,899
there are three that depend on one point

00:21:46,840 --> 00:21:53,490
nine that that that that failed to build

00:21:49,899 --> 00:21:53,490
from source so I can't really fix them

00:21:53,669 --> 00:22:01,059
yeah yeah I actually I read I ran into

00:21:59,409 --> 00:22:02,350
Paul tagged on the flight here so he

00:22:01,059 --> 00:22:04,500
said he would look into it so hopefully

00:22:02,350 --> 00:22:04,500
he

00:22:05,230 --> 00:22:10,570
but yeah so repeated pings on the bunk

00:22:07,360 --> 00:22:12,399
hasn't really produced a removal even

00:22:10,570 --> 00:22:15,519
though the bugs been filed for several

00:22:12,399 --> 00:22:17,139
months now but again I mean F to be

00:22:15,519 --> 00:22:19,120
masters busy this isn't like the biggest

00:22:17,139 --> 00:22:20,710
deal I'm hoping to get this out of here

00:22:19,120 --> 00:22:27,279
before the end of the before the freeze

00:22:20,710 --> 00:22:29,320
but yeah so these are the my last slide

00:22:27,279 --> 00:22:33,639
so they offer questions which I think we

00:22:29,320 --> 00:22:36,330
had kind of answered we maybe answered

00:22:33,639 --> 00:22:38,590
the first one what what tools did I miss

00:22:36,330 --> 00:22:42,070
what what could I have done to automate

00:22:38,590 --> 00:22:44,080
this process better I mean in terms of I

00:22:42,070 --> 00:22:45,909
mean some of the slowness was introduced

00:22:44,080 --> 00:22:48,009
purely from me just kind of working out

00:22:45,909 --> 00:22:51,009
tooling on this a few packages of time

00:22:48,009 --> 00:22:52,539
in the evening but what sort of tools

00:22:51,009 --> 00:22:54,120
would I did I miss that could have made

00:22:52,539 --> 00:22:58,799
this easier

00:22:54,120 --> 00:22:58,799
Mike Mike runner

00:23:05,419 --> 00:23:11,129
as far as tools are concerned in the

00:23:08,850 --> 00:23:15,019
tool the Johnsons using here we can

00:23:11,129 --> 00:23:17,820
still use in a dry run mode to ask back

00:23:15,019 --> 00:23:19,320
if I remove this package what else is

00:23:17,820 --> 00:23:21,869
affected because that goes right the way

00:23:19,320 --> 00:23:23,759
up the chain the the bill depends it's

00:23:21,869 --> 00:23:26,879
hard to get the recursiveness all the

00:23:23,759 --> 00:23:28,649
way up so that you've got the there's

00:23:26,879 --> 00:23:30,840
the full chain up to relief package at

00:23:28,649 --> 00:23:34,100
the top end so if you can actually burn

00:23:30,840 --> 00:23:34,100
it or it's all

00:23:36,320 --> 00:23:41,039
whichever the developer copy of the

00:23:38,549 --> 00:23:42,749
archive is on I can't remember okay oh

00:23:41,039 --> 00:23:43,830
yeah so that's that's a good point I

00:23:42,749 --> 00:23:46,860
think in this case it wouldn't actually

00:23:43,830 --> 00:23:48,659
matter because all of the things that

00:23:46,860 --> 00:23:51,240
were left were crappy leave packages

00:23:48,659 --> 00:23:52,409
that no one cares about so I like

00:23:51,240 --> 00:23:53,970
removing them and in fact they were

00:23:52,409 --> 00:23:55,679
already moved there all I removed from

00:23:53,970 --> 00:23:57,480
testing as far as I know it won't be in

00:23:55,679 --> 00:24:00,389
the next release so sort of mute moved

00:23:57,480 --> 00:24:02,070
but but ya know it's a good point that

00:24:00,389 --> 00:24:04,379
if you're if you try to figure out what

00:24:02,070 --> 00:24:06,450
the impact is of removing it using that

00:24:04,379 --> 00:24:08,999
would be a good idea but I guess I'm

00:24:06,450 --> 00:24:11,220
kind of looking more for how do we

00:24:08,999 --> 00:24:13,289
automate this took me a year took me

00:24:11,220 --> 00:24:14,730
over a year of like wall time even

00:24:13,289 --> 00:24:17,460
though it certainly didn't take me a

00:24:14,730 --> 00:24:19,049
year of engineering time but it took me

00:24:17,460 --> 00:24:21,330
a long long time to get through all of

00:24:19,049 --> 00:24:23,129
this sort of procedure what is there any

00:24:21,330 --> 00:24:25,049
tools that would make this easier like

00:24:23,129 --> 00:24:26,039
it would have been really like it would

00:24:25,049 --> 00:24:28,950
have been really interesting if there

00:24:26,039 --> 00:24:30,889
was a way to just say here's a list of

00:24:28,950 --> 00:24:34,049
packages flip-out the build dependency

00:24:30,889 --> 00:24:35,610
go build them somewhere and if they

00:24:34,049 --> 00:24:37,200
succeed then I want to upload those as

00:24:35,610 --> 00:24:38,730
an amuse right like that would have made

00:24:37,200 --> 00:24:41,190
that would have cut in that would have

00:24:38,730 --> 00:24:43,499
cut down a lot of the manual labor part

00:24:41,190 --> 00:24:44,820
of this even though it would have made

00:24:43,499 --> 00:24:46,289
the law there's still the long tail of

00:24:44,820 --> 00:24:47,610
things that actually require patches but

00:24:46,289 --> 00:24:50,639
probably like 50% of the things that

00:24:47,610 --> 00:24:52,950
were left were just me going in

00:24:50,639 --> 00:24:55,649
replacing auto make whatever with auto

00:24:52,950 --> 00:24:57,480
make the newest and building it and then

00:24:55,649 --> 00:25:00,210
waiting around it's my slow desktop

00:24:57,480 --> 00:25:03,840
machine built this thing that works well

00:25:00,210 --> 00:25:04,950
with built dependencies like Auto make

00:25:03,840 --> 00:25:06,350
things like that but there's still other

00:25:04,950 --> 00:25:11,070
cases where you want to get rid of

00:25:06,350 --> 00:25:12,570
obviously packages yeah I'm in the early

00:25:11,070 --> 00:25:15,850
stages when you're actually doing the

00:25:12,570 --> 00:25:18,429
identification of packages yeah

00:25:15,850 --> 00:25:20,499
in some case isn't it helpful just pick

00:25:18,429 --> 00:25:24,340
out the ones that have no package in

00:25:20,499 --> 00:25:25,570
testing and just say well these these

00:25:24,340 --> 00:25:27,159
are going to become they're obviously

00:25:25,570 --> 00:25:28,989
not being looked after the protocol

00:25:27,159 --> 00:25:30,509
Aussie pubs already and get them out

00:25:28,989 --> 00:25:34,119
early

00:25:30,509 --> 00:25:37,659
yeah maybe I do we consider that a

00:25:34,119 --> 00:25:40,989
package that has been waiting to go into

00:25:37,659 --> 00:25:44,889
testing for more than six months is by

00:25:40,989 --> 00:25:47,200
definition obsolete and yet and get them

00:25:44,889 --> 00:25:49,090
like removed from the archive more or I

00:25:47,200 --> 00:25:52,179
mean what's the or March somehow is

00:25:49,090 --> 00:25:54,309
being bad it's not I don't think you can

00:25:52,179 --> 00:25:56,139
blank it that you'd have to take it on a

00:25:54,309 --> 00:25:59,169
case-by-case but it's certainly a

00:25:56,139 --> 00:26:02,169
telltale clue that you should be looking

00:25:59,169 --> 00:26:05,049
at other factors on the package that

00:26:02,169 --> 00:26:07,840
might also give you a big picture of

00:26:05,049 --> 00:26:09,369
this packages to call way yeah so it

00:26:07,840 --> 00:26:11,950
gives you the opportunity at the stage

00:26:09,369 --> 00:26:14,919
where you're preparing the DD List and

00:26:11,950 --> 00:26:16,960
that sort of thing yeah to to to pick

00:26:14,919 --> 00:26:19,570
out those packages and be more

00:26:16,960 --> 00:26:22,419
aggressive with them early on and

00:26:19,570 --> 00:26:24,070
escalate right up for those packages

00:26:22,419 --> 00:26:25,599
early and then you can get the whole

00:26:24,070 --> 00:26:26,169
cycle done much more quickly rather than

00:26:25,599 --> 00:26:28,330
waiting

00:26:26,169 --> 00:26:30,909
if you actually go through which

00:26:28,330 --> 00:26:32,979
packages been involved here yeah I would

00:26:30,909 --> 00:26:36,269
we've it's a fair bet that the packages

00:26:32,979 --> 00:26:40,720
that were left at the tail were orphaned

00:26:36,269 --> 00:26:44,489
not in testing yeah RC buggy or

00:26:40,720 --> 00:26:44,489
competition ball three yeah

00:26:54,679 --> 00:27:01,169
hi so I'm surprised actually you haven't

00:26:58,169 --> 00:27:02,789
pronounced the term transition because

00:27:01,169 --> 00:27:05,519
this is actually what it is and the

00:27:02,789 --> 00:27:08,490
release team has nice tools to handle

00:27:05,519 --> 00:27:11,090
transitions okay like like you can have

00:27:08,490 --> 00:27:14,789
a dashboard of every affected package

00:27:11,090 --> 00:27:17,519
which will happen that in like the pts

00:27:14,789 --> 00:27:19,139
or the new tracker package tracker you

00:27:17,519 --> 00:27:20,549
will have every there will be a line

00:27:19,139 --> 00:27:21,809
that says hey is this package is part of

00:27:20,549 --> 00:27:24,929
the transition you need to do something

00:27:21,809 --> 00:27:27,029
about it and also I believe that now we

00:27:24,929 --> 00:27:30,120
had that we have Auto removal from

00:27:27,029 --> 00:27:31,769
testing then while we remove the old

00:27:30,120 --> 00:27:34,950
package from testing which means that

00:27:31,769 --> 00:27:37,559
the the packages will get removed from

00:27:34,950 --> 00:27:39,240
testing so until they are fixed which is

00:27:37,559 --> 00:27:41,639
the right thing to do we should not want

00:27:39,240 --> 00:27:44,549
the old packages to be released with the

00:27:41,639 --> 00:27:46,380
new diamond version so I mean definitely

00:27:44,549 --> 00:27:48,360
the a bunch of these tail packages were

00:27:46,380 --> 00:27:50,429
removed from testing they were all like

00:27:48,360 --> 00:27:51,929
the the three that I mentioned are all

00:27:50,429 --> 00:27:54,809
filled bill from source they're all

00:27:51,929 --> 00:27:56,669
removed from testing but it's not clear

00:27:54,809 --> 00:27:59,610
to me how to connect those two things up

00:27:56,669 --> 00:28:02,010
with the actual like forcing the removal

00:27:59,610 --> 00:28:03,240
to happen right like how do I make it in

00:28:02,010 --> 00:28:04,830
I don't indicate that we shouldn't care

00:28:03,240 --> 00:28:08,340
about these packages and that it's safe

00:28:04,830 --> 00:28:13,830
now to remove Auto make person acts

00:28:08,340 --> 00:28:15,990
sorry no I did absolutely did that this

00:28:13,830 --> 00:28:17,399
thing I found that ages ago and I've

00:28:15,990 --> 00:28:19,649
pinged it several times with exactly

00:28:17,399 --> 00:28:21,539
these facts but there hasn't been a lot

00:28:19,649 --> 00:28:23,399
of motion on the they would none of them

00:28:21,539 --> 00:28:25,350
got rectified particularly quickly and

00:28:23,399 --> 00:28:28,620
obviously there's one that's still sort

00:28:25,350 --> 00:28:29,880
of dangling go ahead rest the statement

00:28:28,620 --> 00:28:31,679
and the audience was just you should add

00:28:29,880 --> 00:28:34,230
that you have that information to the RM

00:28:31,679 --> 00:28:36,179
bug um couple of things one gano says

00:28:34,230 --> 00:28:39,559
that he just killed auto make 1.9 so you

00:28:36,179 --> 00:28:39,559
should operate the remaining bugs to

00:28:40,060 --> 00:28:45,620
thanks better the other one is is that

00:28:43,390 --> 00:28:48,050
the one of the things I think we could

00:28:45,620 --> 00:28:50,480
do better at is that you the the whole

00:28:48,050 --> 00:28:52,970
process of Linton detecting that you're

00:28:50,480 --> 00:28:55,070
depending on a package that goes away

00:28:52,970 --> 00:28:56,930
right now that's a the I think the

00:28:55,070 --> 00:28:58,670
obsolete file and I've not been involved

00:28:56,930 --> 00:28:59,990
in development very much for the last

00:28:58,670 --> 00:29:01,880
couple of years so it's possible that

00:28:59,990 --> 00:29:03,290
somebody went around and automated this

00:29:01,880 --> 00:29:05,180
already but I think that was a basically

00:29:03,290 --> 00:29:07,970
a manual you know the file that you just

00:29:05,180 --> 00:29:10,160
add things to it seems like this is a

00:29:07,970 --> 00:29:13,040
place where we could be using sections

00:29:10,160 --> 00:29:14,330
or something like if you uploaded the

00:29:13,040 --> 00:29:16,580
version of auto maker that you want to

00:29:14,330 --> 00:29:18,590
make go away into a different section or

00:29:16,580 --> 00:29:20,780
use the olive oil everywhere to be more

00:29:18,590 --> 00:29:22,790
precise use FTP overrides to move it

00:29:20,780 --> 00:29:24,440
into a different section Linton has a

00:29:22,790 --> 00:29:27,170
bunch of files that it auto generates

00:29:24,440 --> 00:29:28,970
well semi auto generates in the sense

00:29:27,170 --> 00:29:30,440
that people run scripts to fill out that

00:29:28,970 --> 00:29:32,360
data before you upload linty in each

00:29:30,440 --> 00:29:34,310
time so that they could just pull down

00:29:32,360 --> 00:29:36,200
all those file all the lists of things

00:29:34,310 --> 00:29:37,910
in whatever that section is that's

00:29:36,200 --> 00:29:39,260
designated for these packages will be

00:29:37,910 --> 00:29:42,110
going away and depending on them as a

00:29:39,260 --> 00:29:43,250
bug which may not be the same as the

00:29:42,110 --> 00:29:45,560
section we have right now for

00:29:43,250 --> 00:29:48,680
transitional packages because those are

00:29:45,560 --> 00:29:50,210
not exactly the same problem and then

00:29:48,680 --> 00:29:51,560
that would automate some more of that

00:29:50,210 --> 00:29:53,330
process because then all you would have

00:29:51,560 --> 00:29:56,420
to do is tag the package somehow or

00:29:53,330 --> 00:29:58,220
submit an FTP master override bug

00:29:56,420 --> 00:30:00,830
somehow to say this package is going

00:29:58,220 --> 00:30:02,000
away and then more of that process for

00:30:00,830 --> 00:30:03,410
the responsive maintainer x' would

00:30:02,000 --> 00:30:05,630
happen automatically without you having

00:30:03,410 --> 00:30:07,340
to babysit it yeah and on a similar note

00:30:05,630 --> 00:30:11,150
there's really no reason why we couldn't

00:30:07,340 --> 00:30:14,240
automate nagging the maintainer x' who

00:30:11,150 --> 00:30:16,280
depend on obsolete packages or even mass

00:30:14,240 --> 00:30:18,110
filing the bugs for maintainer x' who

00:30:16,280 --> 00:30:19,490
depend on automated packages ought to do

00:30:18,110 --> 00:30:20,930
that completely automatically without a

00:30:19,490 --> 00:30:22,640
human having to do anything except maybe

00:30:20,930 --> 00:30:24,680
press the button that says yeah this

00:30:22,640 --> 00:30:26,600
looks like a good idea yeah it's an

00:30:24,680 --> 00:30:28,760
interesting idea to do these to try to

00:30:26,600 --> 00:30:32,980
do these more automatically the bug

00:30:28,760 --> 00:30:32,980
finally is there a question over here

00:30:36,950 --> 00:30:40,790
sorry I didn't hear what you said though

00:30:42,110 --> 00:30:46,500
so if I gotta guide the company the idea

00:30:45,210 --> 00:30:49,200
is to introduce the concept of a

00:30:46,500 --> 00:30:51,720
duplicated package which I would

00:30:49,200 --> 00:30:53,370
appreciate and the deprecated like the

00:30:51,720 --> 00:30:55,080
concept of it I've created package yeah

00:30:53,370 --> 00:30:57,270
no I think it's a great idea like we

00:30:55,080 --> 00:30:59,280
have the old libs section we have the

00:30:57,270 --> 00:31:01,800
duplicated section yeah and then you

00:30:59,280 --> 00:31:04,020
upload into the duplicated section which

00:31:01,800 --> 00:31:08,070
actually requires manual override by FTP

00:31:04,020 --> 00:31:10,170
master but yeah and then Linnaean can

00:31:08,070 --> 00:31:11,460
automatically say you depend on the

00:31:10,170 --> 00:31:15,060
placated package yay

00:31:11,460 --> 00:31:17,010
and you can even say block uploads on

00:31:15,060 --> 00:31:18,660
that lenient tag that's true that would

00:31:17,010 --> 00:31:22,200
have been a good bigger thing to do to

00:31:18,660 --> 00:31:23,460
implement it yeah it's a great idea I

00:31:22,200 --> 00:31:24,510
mean and that was one of the reasons

00:31:23,460 --> 00:31:26,400
that I like to putting in the Linton

00:31:24,510 --> 00:31:29,070
warning because it would prevent new

00:31:26,400 --> 00:31:30,690
people from uploading packages that were

00:31:29,070 --> 00:31:32,310
depending on these versions of auto make

00:31:30,690 --> 00:31:34,470
which you really don't want new problems

00:31:32,310 --> 00:31:36,300
to show up as you're spending months and

00:31:34,470 --> 00:31:38,430
months fixing the older of homes go

00:31:36,300 --> 00:31:40,020
ahead and as soon as the lint in stuff

00:31:38,430 --> 00:31:42,900
and all the rest that tends to just work

00:31:40,020 --> 00:31:45,060
with maintainer sure more or less on the

00:31:42,900 --> 00:31:46,680
ball yeah and that was wondering if you

00:31:45,060 --> 00:31:48,990
couldn't just take a big hammer based on

00:31:46,680 --> 00:31:50,910
Lunars idea as well and if you because

00:31:48,990 --> 00:31:54,540
if you found an RC bug against automate

00:31:50,910 --> 00:31:57,540
1.9 itself then it would after a week or

00:31:54,540 --> 00:31:59,040
so disappear from testing and all the

00:31:57,540 --> 00:32:00,480
oldest building saves you would also

00:31:59,040 --> 00:32:03,570
disappear from testing and that would

00:32:00,480 --> 00:32:15,900
hmm yeah the realist team might not

00:32:03,570 --> 00:32:17,460
appreciate it but yes I mean maybe the

00:32:15,900 --> 00:32:20,520
question is like what's the threshold

00:32:17,460 --> 00:32:22,410
for the like how big does a long tail

00:32:20,520 --> 00:32:26,220
have to be before it's we can just like

00:32:22,410 --> 00:32:28,410
force it right like if you know you know

00:32:26,220 --> 00:32:30,090
is 10 if this breaks 10 packages and

00:32:28,410 --> 00:32:33,510
none of them appear to be important we

00:32:30,090 --> 00:32:35,250
just do it or do we have to wait so I

00:32:33,510 --> 00:32:37,170
think one good example that this

00:32:35,250 --> 00:32:39,000
provides not just for automate but for a

00:32:37,170 --> 00:32:41,640
lot of other cases is that we should

00:32:39,000 --> 00:32:43,260
really really hesitate before we start

00:32:41,640 --> 00:32:45,750
introducing parallel versions of

00:32:43,260 --> 00:32:48,240
anything into the archive the default

00:32:45,750 --> 00:32:50,460
state of anything should be here is the

00:32:48,240 --> 00:32:52,050
version for the archive at which point

00:32:50,460 --> 00:32:53,760
you start getting fails to build from

00:32:52,050 --> 00:32:55,410
source bugs because hey look you don't

00:32:53,760 --> 00:32:57,450
work with the new version and the

00:32:55,410 --> 00:32:59,130
default state is not I get to use the

00:32:57,450 --> 00:33:02,070
old version and comfortably rest on it

00:32:59,130 --> 00:33:03,809
it's I gotta fix my stuff yeah I mean

00:33:02,070 --> 00:33:05,490
that's that's another it's a little bit

00:33:03,809 --> 00:33:06,540
a little bit off-topic

00:33:05,490 --> 00:33:07,950
I mean it's very relevant to automate

00:33:06,540 --> 00:33:10,380
because I think I'm gonna end up with

00:33:07,950 --> 00:33:12,030
this problem that the next time there's

00:33:10,380 --> 00:33:13,080
a new revision of automate so that one

00:33:12,030 --> 00:33:17,040
of the things that I didn't mention is

00:33:13,080 --> 00:33:18,660
the autumn a containers have promised to

00:33:17,040 --> 00:33:20,850
have better versioning in the future so

00:33:18,660 --> 00:33:22,230
that like actually only major versions

00:33:20,850 --> 00:33:25,740
should break backwards compatibility

00:33:22,230 --> 00:33:28,679
maybe hopefully so that's I mean that's

00:33:25,740 --> 00:33:30,240
promising but yeah how do we how do we

00:33:28,679 --> 00:33:32,670
make sure that the new version doesn't

00:33:30,240 --> 00:33:34,980
break huge swathes of the archive before

00:33:32,670 --> 00:33:36,780
it gets uploaded I mean I know there's

00:33:34,980 --> 00:33:40,590
there's some people have access to large

00:33:36,780 --> 00:33:41,640
sort of build like rebuild instances and

00:33:40,590 --> 00:33:43,470
stuff like that which would be really

00:33:41,640 --> 00:33:44,880
useful to hook up with them but I guess

00:33:43,470 --> 00:33:46,110
you have to ask them or figure out who

00:33:44,880 --> 00:33:49,559
those people are those are some things

00:33:46,110 --> 00:33:52,470
as far as the long tail is concerned it

00:33:49,559 --> 00:33:54,780
does depend on the circumstances but we

00:33:52,470 --> 00:33:58,470
have actually done some seriously long

00:33:54,780 --> 00:34:01,860
tails in one operation at a PSP we

00:33:58,470 --> 00:34:06,090
actually removed 94 packages in a single

00:34:01,860 --> 00:34:08,040
chain oh wow it's so these things are

00:34:06,090 --> 00:34:10,830
possible they come you don't have to

00:34:08,040 --> 00:34:12,290
think about the tail in in in those sort

00:34:10,830 --> 00:34:14,460
of contexts you just look at the

00:34:12,290 --> 00:34:16,500
contents of the tail and it was all of

00:34:14,460 --> 00:34:18,030
these kinds of packages you know lossy

00:34:16,500 --> 00:34:19,950
buggy none of them were in testing

00:34:18,030 --> 00:34:26,040
mostly been waiting for testing for on

00:34:19,950 --> 00:34:28,919
average average 600 days or more mm-hmm

00:34:26,040 --> 00:34:30,720
they might they worried orphaned but on

00:34:28,919 --> 00:34:33,359
that basis that probably should have

00:34:30,720 --> 00:34:35,010
been right but there wasn't any point

00:34:33,359 --> 00:34:37,470
often in them the whole lot just got

00:34:35,010 --> 00:34:43,080
removed but is that in there but that's

00:34:37,470 --> 00:34:44,970
a transition right no they were they had

00:34:43,080 --> 00:34:46,500
been broken so maybe my question is is

00:34:44,970 --> 00:34:47,580
so was that on the release team side or

00:34:46,500 --> 00:34:50,190
they have to be master side which is

00:34:47,580 --> 00:34:53,910
also like where do I so we have to have

00:34:50,190 --> 00:34:57,630
both teams on at the PSP at times I see

00:34:53,910 --> 00:35:00,990
yeah yeah we do kind of when we do UK

00:34:57,630 --> 00:35:03,540
BSP's we often tend to have FTP master

00:35:00,990 --> 00:35:06,540
release team and Neal who likes to our

00:35:03,540 --> 00:35:07,860
web things by default okay

00:35:06,540 --> 00:35:09,570
so trying to getting these two teams in

00:35:07,860 --> 00:35:11,700
the same room or physical or virtual

00:35:09,570 --> 00:35:12,600
room might expedite this yeah absolutely

00:35:11,700 --> 00:35:15,990
right

00:35:12,600 --> 00:35:19,200
okay good advice do an obsolete sprint

00:35:15,990 --> 00:35:22,500
it's just sat at some point before we

00:35:19,200 --> 00:35:24,300
get to do too close to the release so

00:35:22,500 --> 00:35:26,490
it's probably a bit late for it now but

00:35:24,300 --> 00:35:28,890
you know six months or so before the

00:35:26,490 --> 00:35:30,720
start of the freeze we organize a sprint

00:35:28,890 --> 00:35:33,120
and we get the relevant teams together

00:35:30,720 --> 00:35:36,390
we go through this lot with a fine-tooth

00:35:33,120 --> 00:35:37,980
comb we just throw things out yeah no

00:35:36,390 --> 00:35:40,320
that's a good idea I mean yeah just in

00:35:37,980 --> 00:35:41,670
general if it's if it's six months or

00:35:40,320 --> 00:35:42,930
more before the SARS or freeze they got

00:35:41,670 --> 00:35:45,450
plenty of time to put it back in if they

00:35:42,930 --> 00:35:46,440
really care about it yeah yeah no that's

00:35:45,450 --> 00:35:48,750
a good idea I mean it were probably

00:35:46,440 --> 00:35:52,020
pretty easy to have to to figure out

00:35:48,750 --> 00:35:52,890
which packages are well I guess there's

00:35:52,020 --> 00:35:54,980
a question of what's the difference

00:35:52,890 --> 00:35:56,910
between a solid and unmaintained and

00:35:54,980 --> 00:36:03,030
like how do we identify what those

00:35:56,910 --> 00:36:04,830
packages are with that it's really great

00:36:03,030 --> 00:36:08,370
there are all sorts of considerations

00:36:04,830 --> 00:36:10,230
you have to make em wait with attendees

00:36:08,370 --> 00:36:13,470
of Cambridge bsp done to be a little

00:36:10,230 --> 00:36:17,130
flippant about this kind of thing and

00:36:13,470 --> 00:36:22,890
slightly trigger-happy will of me but

00:36:17,130 --> 00:36:25,560
it's we we don't mat eclis go for our M

00:36:22,890 --> 00:36:29,060
but we have a we have there's a set of

00:36:25,560 --> 00:36:31,860
telltale signs that we've picked up our

00:36:29,060 --> 00:36:34,110
indications that things are not as they

00:36:31,860 --> 00:36:38,790
should be with a package like the

00:36:34,110 --> 00:36:41,220
popcorn is and it's maybe it's got a

00:36:38,790 --> 00:36:44,070
couple of important bugs and a nasty one

00:36:41,220 --> 00:36:45,450
maybe somebody's reporting that they are

00:36:44,070 --> 00:36:47,400
billed epping money and something's

00:36:45,450 --> 00:36:49,470
going wrong and there hasn't been an

00:36:47,400 --> 00:36:51,860
upload in six months all those things

00:36:49,470 --> 00:36:53,940
together combined you say to us this is

00:36:51,860 --> 00:36:59,190
probably we're better off without it

00:36:53,940 --> 00:37:00,990
than with it and so so you have you have

00:36:59,190 --> 00:37:02,940
to analyze the packages as an entire

00:37:00,990 --> 00:37:05,670
entity not just say oh this has to ASCII

00:37:02,940 --> 00:37:07,890
books let's get rid of it and then you

00:37:05,670 --> 00:37:09,420
also have to have to make sure that

00:37:07,890 --> 00:37:10,920
you're behaving nicely to maintain er

00:37:09,420 --> 00:37:13,920
off the package in question if they

00:37:10,920 --> 00:37:15,930
asked around and and not where our I

00:37:13,920 --> 00:37:19,350
mean your package by then put it back

00:37:15,930 --> 00:37:21,450
and said if you like yeah but would

00:37:19,350 --> 00:37:23,400
something like so I mean we've got our

00:37:21,450 --> 00:37:25,650
removals from testing but I guess there

00:37:23,400 --> 00:37:27,990
is no other removal from Sid there's no

00:37:25,650 --> 00:37:30,360
water removal from Sid and if it gets

00:37:27,990 --> 00:37:32,490
also removed from testing it may get

00:37:30,360 --> 00:37:34,590
manually removed from Sid later on when

00:37:32,490 --> 00:37:36,210
someone says one of my triggering

00:37:34,590 --> 00:37:37,860
factors is that this isn't in testing

00:37:36,210 --> 00:37:40,590
and hasn't been for two releases but it

00:37:37,860 --> 00:37:43,650
won't happen automatically the one that

00:37:40,590 --> 00:37:47,190
seems like a long period of time it is

00:37:43,650 --> 00:37:49,110
an example right I mean it would so a

00:37:47,190 --> 00:37:52,500
movie I'm just I'm just spitballing here

00:37:49,110 --> 00:37:54,390
but would it make sense for if something

00:37:52,500 --> 00:37:55,800
is not propagated literally nothing has

00:37:54,390 --> 00:37:58,050
gone into if it's been remove from

00:37:55,800 --> 00:37:59,070
testing for a year and no uploads of

00:37:58,050 --> 00:38:00,360
happen at that time which would we just

00:37:59,070 --> 00:38:01,770
remove it from Sid automatically should

00:38:00,360 --> 00:38:08,940
we have some removal criteria from so

00:38:01,770 --> 00:38:11,070
that's yeah I I'm shine away from saying

00:38:08,940 --> 00:38:12,720
yes we should do automatically I think

00:38:11,070 --> 00:38:14,220
there still should be some oversight

00:38:12,720 --> 00:38:15,270
because there are corner cases and

00:38:14,220 --> 00:38:17,790
that's what I mean about there being

00:38:15,270 --> 00:38:19,380
gray areas all over the place where you

00:38:17,790 --> 00:38:21,300
have to look at the situation right now

00:38:19,380 --> 00:38:23,520
and make a decision and think that's

00:38:21,300 --> 00:38:26,250
difficult to do automatically

00:38:23,520 --> 00:38:27,720
the pts does have a box at the top that

00:38:26,250 --> 00:38:29,010
gets bigger and bigger the more problems

00:38:27,720 --> 00:38:30,450
there are so if you look at if you look

00:38:29,010 --> 00:38:32,310
at the package page and the box on the

00:38:30,450 --> 00:38:35,790
BTS is the first page then clearly

00:38:32,310 --> 00:38:40,260
you've got a problem sure that may be a

00:38:35,790 --> 00:38:42,300
good metric how many boxes her I'm sure

00:38:40,260 --> 00:38:44,430
Neil or cook up a script that can scrape

00:38:42,300 --> 00:38:48,120
the pts okay who's got the biggest boxes

00:38:44,430 --> 00:38:50,160
but my second point is that you we

00:38:48,120 --> 00:38:52,230
although we're flippant about it and we

00:38:50,160 --> 00:38:54,240
are fairly trigger-happy we always make

00:38:52,230 --> 00:38:56,100
sure that we behave properly and that

00:38:54,240 --> 00:38:56,910
maintainer gets a chance to explain why

00:38:56,100 --> 00:38:59,880
there's a problem

00:38:56,910 --> 00:39:00,930
FTP masters can look at what's going on

00:38:59,880 --> 00:39:02,940
and make sure everything's okay and we

00:39:00,930 --> 00:39:05,160
don't there are very few locations where

00:39:02,940 --> 00:39:07,200
where it happened but there are very few

00:39:05,160 --> 00:39:09,390
occasions where we have filed on our end

00:39:07,200 --> 00:39:12,630
bug and FTP matters gone yeah okay and

00:39:09,390 --> 00:39:14,820
taking it out in the hour yeah but it

00:39:12,630 --> 00:39:16,110
has happened in the right circumstances

00:39:14,820 --> 00:39:17,549
and that's what I really want to

00:39:16,110 --> 00:39:20,699
emphasis

00:39:17,549 --> 00:39:22,499
rather than Auto removal I think it does

00:39:20,699 --> 00:39:24,569
need to be an automated process for the

00:39:22,499 --> 00:39:26,699
packages instead it just needs to be

00:39:24,569 --> 00:39:29,009
highlighting and more than just the

00:39:26,699 --> 00:39:31,199
maintainer but actually go into a list

00:39:29,009 --> 00:39:33,509
of people that are thinking this is like

00:39:31,199 --> 00:39:36,239
the double npp report that comes up

00:39:33,509 --> 00:39:37,739
right you know if it is a it's a package

00:39:36,239 --> 00:39:40,169
in need of help yeah it probably

00:39:37,739 --> 00:39:41,609
actually needs to be tagged that way you

00:39:40,169 --> 00:39:43,709
know we need the automated process that

00:39:41,609 --> 00:39:46,409
scans through these things we know what

00:39:43,709 --> 00:39:50,130
what the risk criteria are and we can be

00:39:46,409 --> 00:39:52,919
fairly general by applying them as an

00:39:50,130 --> 00:39:54,839
alert on either the bug or the package

00:39:52,919 --> 00:39:56,759
yeah and say no there are reasonable

00:39:54,839 --> 00:39:59,699
grounds for doubt but why this package

00:39:56,759 --> 00:40:02,069
is in this particular state yeah if that

00:39:59,699 --> 00:40:05,039
tag then stays on for ever and ever and

00:40:02,069 --> 00:40:07,819
nobody actually manages to clear it it's

00:40:05,039 --> 00:40:10,859
just like have lee in a deprecated state

00:40:07,819 --> 00:40:12,269
inside the archive or it's it's a flag

00:40:10,859 --> 00:40:14,159
that we need to be able to put on

00:40:12,269 --> 00:40:15,509
packages like this and then have a two

00:40:14,159 --> 00:40:17,399
of the scripts that the entire archive

00:40:15,509 --> 00:40:18,869
and says right there's 600 of these

00:40:17,399 --> 00:40:21,619
packages what are we gonna do about them

00:40:18,869 --> 00:40:25,169
all right yeah that's interesting

00:40:21,619 --> 00:40:26,639
would it not make sense to would it not

00:40:25,169 --> 00:40:29,039
make sense to have some kind of reports

00:40:26,639 --> 00:40:31,859
a listing packages by days that haven't

00:40:29,039 --> 00:40:33,839
been in testing and number of RC I would

00:40:31,859 --> 00:40:35,789
come up with some rough criteria put

00:40:33,839 --> 00:40:37,049
them in order to put a little text box

00:40:35,789 --> 00:40:39,779
so people can put notes about the

00:40:37,049 --> 00:40:41,130
package on it and that way we could

00:40:39,779 --> 00:40:42,389
actually deal with these things rather

00:40:41,130 --> 00:40:46,169
than waiting for someone to run into

00:40:42,389 --> 00:40:48,479
them yeah I was a bit afraid to that's

00:40:46,169 --> 00:40:50,009
okay that's a good idea though I think

00:40:48,479 --> 00:40:51,889
kind of list like that would be very

00:40:50,009 --> 00:40:54,239
helpful

00:40:51,889 --> 00:40:56,729
okay we've got just a couple of minutes

00:40:54,239 --> 00:41:00,989
left doesn't mean anything else you want

00:40:56,729 --> 00:41:04,019
to talk about I think for sums for

00:41:00,989 --> 00:41:06,359
packages that we expect to be removed

00:41:04,019 --> 00:41:08,309
it's also been nice if we had some way

00:41:06,359 --> 00:41:10,199
of communicating that to users of the

00:41:08,309 --> 00:41:13,169
packages I mean there are even cases

00:41:10,199 --> 00:41:15,089
where there's not necessarily 100 RC

00:41:13,169 --> 00:41:17,699
bugs but just a package is dead upstream

00:41:15,089 --> 00:41:19,079
and the maintainer has decided that

00:41:17,699 --> 00:41:22,439
sooner or later they're going to kill it

00:41:19,079 --> 00:41:24,539
off at the moment we have no very nice

00:41:22,439 --> 00:41:28,699
way for the maintainer zh4 users of that

00:41:24,539 --> 00:41:31,699
package to know that or do anything

00:41:28,699 --> 00:41:31,699
Enrico

00:41:32,299 --> 00:41:38,699
can we have a Deb tag before either

00:41:35,759 --> 00:41:40,979
deprecated or obsolete or dead upstream

00:41:38,699 --> 00:41:43,109
and there because anyone can add that

00:41:40,979 --> 00:41:45,749
the Deb tags it'll eventually get listed

00:41:43,109 --> 00:41:47,249
in the apt cache and people can see it

00:41:45,749 --> 00:41:51,569
on their own systems that their interest

00:41:47,249 --> 00:42:00,679
in the package it's also very easy to

00:41:51,569 --> 00:42:05,670
remove we can if somebody maintains it I

00:42:00,679 --> 00:42:09,269
can add that information in along the

00:42:05,670 --> 00:42:11,609
way the tags take to get into FTP master

00:42:09,269 --> 00:42:13,199
but it's not something you want to be

00:42:11,609 --> 00:42:15,029
edited from the depth-x that'd be

00:42:13,199 --> 00:42:17,670
Annette interface where everyone can do

00:42:15,029 --> 00:42:19,469
it anonymously which means somebody

00:42:17,670 --> 00:42:22,559
needs to kind of maintain it manually

00:42:19,469 --> 00:42:24,539
which means it hasn't happened yet it's

00:42:22,559 --> 00:42:27,269
been experimented with the security team

00:42:24,539 --> 00:42:29,489
in the past to say something like we

00:42:27,269 --> 00:42:38,519
don't guarantee skewed support for this

00:42:29,489 --> 00:42:42,869
thing but yeah I would c-sections for

00:42:38,519 --> 00:42:45,269
cases like this because what you want to

00:42:42,869 --> 00:42:48,239
use this mostly for packages at other

00:42:45,269 --> 00:42:51,449
things depend on rather than beef

00:42:48,239 --> 00:43:00,869
packages because leaf packages if it's

00:42:51,449 --> 00:43:04,979
dead upstream yeah so there's body rage

00:43:00,869 --> 00:43:08,489
involved in handling this and so you I

00:43:04,979 --> 00:43:11,849
would focus on body rage to happen where

00:43:08,489 --> 00:43:15,119
it actually makes a difference in some

00:43:11,849 --> 00:43:17,759
workflow it will be nice to tell our

00:43:15,119 --> 00:43:19,799
users about it but it would be nice if

00:43:17,759 --> 00:43:22,410
it were the maintainer that told the

00:43:19,799 --> 00:43:24,059
user about it and at that point

00:43:22,410 --> 00:43:28,319
maintained I can just remove the thing

00:43:24,059 --> 00:43:30,239
from the archive or yeah but I I would

00:43:28,319 --> 00:43:32,369
still like some annotation on the

00:43:30,239 --> 00:43:34,829
packages handled by the maintain

00:43:32,369 --> 00:43:38,069
actually it could be tags in the control

00:43:34,829 --> 00:43:39,869
file which is not implemented yet I'm

00:43:38,069 --> 00:43:41,880
waiting for that Kampf where the reason

00:43:39,869 --> 00:43:42,440
FTP master to implement it because I

00:43:41,880 --> 00:43:44,150
have a

00:43:42,440 --> 00:43:47,569
that it hasn't happened in the last two

00:43:44,150 --> 00:43:52,520
years so what type one more so I think I

00:43:47,569 --> 00:43:53,990
think you had it or yeah yeah I was

00:43:52,520 --> 00:43:56,300
gonna say for users though it would be

00:43:53,990 --> 00:43:59,329
nice if the maintainer or others in an

00:43:56,300 --> 00:44:00,500
nm you had some way to communicate you

00:43:59,329 --> 00:44:02,750
should really be using this other

00:44:00,500 --> 00:44:04,280
package instead for those leaf packages

00:44:02,750 --> 00:44:06,079
that we don't just remove it and leave

00:44:04,280 --> 00:44:07,250
the user not with the old thing

00:44:06,079 --> 00:44:16,700
installed and not knowing what's

00:44:07,250 --> 00:44:18,650
happened yeah I think we're I think

00:44:16,700 --> 00:44:20,540
we're out of time thanks everybody I

00:44:18,650 --> 00:44:23,380
really appreciate coming to this talk in

00:44:20,540 --> 00:44:25,790
talking through some of these issues

00:44:23,380 --> 00:44:28,660
see I'll be there come fall week if you

00:44:25,790 --> 00:44:28,660

YouTube URL: https://www.youtube.com/watch?v=PQ_qCciT498


