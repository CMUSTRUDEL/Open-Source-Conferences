Title: Security not by chance: the AltusMetrum hardware true random number generator
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Tom Marble

At: DebConf14
https://debconf14.debconf.org/
Room: Room 329
Scheduled start: 2014-08-26 14:30:00
Captions: 
	00:00:00,000 --> 00:00:05,339
you all very much for coming this is the

00:00:02,760 --> 00:00:06,750
talk security not by chance the Altos

00:00:05,339 --> 00:00:10,380
met room hardware random number

00:00:06,750 --> 00:00:12,599
generator I'm Tom marble and some of you

00:00:10,380 --> 00:00:14,309
may know me I want to say it's great to

00:00:12,599 --> 00:00:15,719
be back at DEFCON 5 missed last year

00:00:14,309 --> 00:00:20,760
unfortunately I'm really happy to be

00:00:15,719 --> 00:00:23,730
back if my teak is my company and today

00:00:20,760 --> 00:00:25,260
I'm gonna talk about random number

00:00:23,730 --> 00:00:30,869
generation in fact specifically a

00:00:25,260 --> 00:00:33,079
project that we're calling USB trng TR

00:00:30,869 --> 00:00:36,510
and G for true random number generation

00:00:33,079 --> 00:00:37,980
so these are the things that I want to

00:00:36,510 --> 00:00:41,040
talk to you about today give you a sense

00:00:37,980 --> 00:00:42,870
of you know what we're thinking first of

00:00:41,040 --> 00:00:46,079
all why do we care why do we care about

00:00:42,870 --> 00:00:50,219
randomness what's the point how does

00:00:46,079 --> 00:00:51,449
this apply to good new Linux a little

00:00:50,219 --> 00:00:54,180
bit about the design that we've got

00:00:51,449 --> 00:00:56,489
without this met room for this hardware

00:00:54,180 --> 00:00:58,379
random number generator ways that we can

00:00:56,489 --> 00:01:01,530
measure its quality and effectiveness

00:00:58,379 --> 00:01:02,730
and then think about you know where

00:01:01,530 --> 00:01:04,080
we're going where the next steps could

00:01:02,730 --> 00:01:05,760
be and that's where we're hoping to get

00:01:04,080 --> 00:01:13,320
some good questions from you and get

00:01:05,760 --> 00:01:16,229
some good feedback for those of you that

00:01:13,320 --> 00:01:19,920
may be on the stream you can join us at

00:01:16,229 --> 00:01:21,990
Deb Kampf - room 329 and hopefully

00:01:19,920 --> 00:01:23,850
somebody's on IRC and keeping an eye on

00:01:21,990 --> 00:01:25,740
questions that might come in we got to

00:01:23,850 --> 00:01:27,000
take those and just want to shout out to

00:01:25,740 --> 00:01:29,400
the Debian video team I think it's

00:01:27,000 --> 00:01:35,369
really awesome that we can livestream

00:01:29,400 --> 00:01:37,200
all the talks so what do we care random

00:01:35,369 --> 00:01:40,979
numbers are actually a really important

00:01:37,200 --> 00:01:43,890
component of security random numbers are

00:01:40,979 --> 00:01:45,689
used to make encryption keys you may

00:01:43,890 --> 00:01:47,399
have noticed when you generate your GPG

00:01:45,689 --> 00:01:50,490
key it takes a while because the system

00:01:47,399 --> 00:01:54,299
needs to have enough entropy to create a

00:01:50,490 --> 00:01:58,049
random key for you more frequently

00:01:54,299 --> 00:02:00,360
whenever you use SSL you go to a HTTPS

00:01:58,049 --> 00:02:02,280
website there is a unique session key

00:02:00,360 --> 00:02:05,369
that is created between your browser and

00:02:02,280 --> 00:02:08,280
the server which is used to encrypt the

00:02:05,369 --> 00:02:11,129
session using a traditional cipher but

00:02:08,280 --> 00:02:12,870
that password that session key is

00:02:11,129 --> 00:02:15,030
actually coming from the random

00:02:12,870 --> 00:02:16,500
number generator and if and if we can

00:02:15,030 --> 00:02:18,599
guess what it is that's going to

00:02:16,500 --> 00:02:20,010
compromise security and of course

00:02:18,599 --> 00:02:21,810
randomness is used in a lot of other

00:02:20,010 --> 00:02:23,879
places in the kernel and elsewhere for

00:02:21,810 --> 00:02:26,150
security applications so it actually

00:02:23,879 --> 00:02:28,590
ends up being an important element of

00:02:26,150 --> 00:02:30,599
security overall and I think that you

00:02:28,590 --> 00:02:32,250
know we all know that security is

00:02:30,599 --> 00:02:35,459
becoming increasingly important and

00:02:32,250 --> 00:02:37,920
everything that we do just a little bit

00:02:35,459 --> 00:02:39,390
of background on random number

00:02:37,920 --> 00:02:41,099
generation typically there are two

00:02:39,390 --> 00:02:43,110
different kinds that we need to talk

00:02:41,099 --> 00:02:46,709
about or talk about how trng is

00:02:43,110 --> 00:02:48,510
different from PRNG PRNG

00:02:46,709 --> 00:02:52,049
refers to pseudo-random number

00:02:48,510 --> 00:02:54,959
generators which are basically varieties

00:02:52,049 --> 00:02:57,870
of algorithms that take a certain seed

00:02:54,959 --> 00:03:01,890
or input and then have a formula for

00:02:57,870 --> 00:03:03,989
generating a sequence of bits which to

00:03:01,890 --> 00:03:07,200
as much of a statistical measure as

00:03:03,989 --> 00:03:09,780
possible appear like they're random but

00:03:07,200 --> 00:03:12,480
they're not actually random if I start a

00:03:09,780 --> 00:03:15,780
pure ng with the exact same seed I will

00:03:12,480 --> 00:03:17,549
get the exact same sequence of numbers

00:03:15,780 --> 00:03:19,079
out of it sometimes that's really

00:03:17,549 --> 00:03:20,579
helpful for example if you're testing

00:03:19,079 --> 00:03:22,560
software and you want to test different

00:03:20,579 --> 00:03:24,120
elements of software you may want to

00:03:22,560 --> 00:03:26,459
have something that is sort of random

00:03:24,120 --> 00:03:28,260
but that regression tests can catch any

00:03:26,459 --> 00:03:30,930
changes in the output in that case up

00:03:28,260 --> 00:03:32,280
PRNG is perfect for that you might argue

00:03:30,930 --> 00:03:33,359
that there are other kinds of testing

00:03:32,280 --> 00:03:35,190
that would be a little bit more dynamic

00:03:33,359 --> 00:03:37,470
like generative testing or property

00:03:35,190 --> 00:03:39,180
based testing which might be better but

00:03:37,470 --> 00:03:41,549
there are some some good uses for that

00:03:39,180 --> 00:03:44,989
for pure NGS and in particular they're

00:03:41,549 --> 00:03:47,900
fast so we can get a number reasonably

00:03:44,989 --> 00:03:52,250
random number from a PRNG quite quickly

00:03:47,900 --> 00:03:55,109
getting true entropy or randomness

00:03:52,250 --> 00:03:56,760
requires a hardware random number

00:03:55,109 --> 00:03:59,879
generator because what we're really

00:03:56,760 --> 00:04:02,329
looking for is to get randomness that's

00:03:59,879 --> 00:04:04,799
based on some physical process some

00:04:02,329 --> 00:04:08,220
Brownian motion some source of

00:04:04,799 --> 00:04:09,690
variability that is not at all

00:04:08,220 --> 00:04:11,609
deterministic that could not be

00:04:09,690 --> 00:04:14,340
anticipated or guessed by any other

00:04:11,609 --> 00:04:16,829
means many of you may be familiar with

00:04:14,340 --> 00:04:18,510
dev random in the linux kernel which

00:04:16,829 --> 00:04:20,039
will block until the kernel has made an

00:04:18,510 --> 00:04:23,520
assessment that there's actually enough

00:04:20,039 --> 00:04:26,520
entropy to release more bits

00:04:23,520 --> 00:04:30,909
so what are the risks involved with

00:04:26,520 --> 00:04:35,110
random numbers as I mentioned you know

00:04:30,909 --> 00:04:38,250
session keys are encrypted with or

00:04:35,110 --> 00:04:40,569
created with random numbers often so the

00:04:38,250 --> 00:04:42,789
significance of this is even if we have

00:04:40,569 --> 00:04:45,789
a fantastic public key infrastructure in

00:04:42,789 --> 00:04:49,750
RSA keys instead of having to to break

00:04:45,789 --> 00:04:53,110
an RSA key for Krsna if all someone has

00:04:49,750 --> 00:04:55,440
to do is guess your session key they

00:04:53,110 --> 00:04:58,840
could decrypt your traffic potentially

00:04:55,440 --> 00:05:00,520
so again as is you all know security is

00:04:58,840 --> 00:05:02,650
often dominated by the weakest possible

00:05:00,520 --> 00:05:04,750
link and what we're doing here is we're

00:05:02,650 --> 00:05:06,520
trying to shore up the randomness is one

00:05:04,750 --> 00:05:09,030
of the potential vulnerabilities in our

00:05:06,520 --> 00:05:09,030
security

00:05:13,180 --> 00:05:18,460
so there was an interesting post by

00:05:15,040 --> 00:05:20,710
grade KH earlier this year which is

00:05:18,460 --> 00:05:25,210
pointing to blog posts by Thomas food

00:05:20,710 --> 00:05:27,070
about myths about you random and this is

00:05:25,210 --> 00:05:28,210
important because if Greg page says

00:05:27,070 --> 00:05:30,250
something people are going to pay

00:05:28,210 --> 00:05:34,210
attention and they're going to listen so

00:05:30,250 --> 00:05:36,940
in this blog post hoon is talking about

00:05:34,210 --> 00:05:39,460
how people are rallying against a few

00:05:36,940 --> 00:05:45,280
random which is the pseudo-random number

00:05:39,460 --> 00:05:47,380
generator if you will in the kernel the

00:05:45,280 --> 00:05:49,090
did it's often used in many linux

00:05:47,380 --> 00:05:51,340
applications because it does not block

00:05:49,090 --> 00:05:53,620
it's often seated from dev random but is

00:05:51,340 --> 00:05:56,290
actually a sequence of pseudo-random

00:05:53,620 --> 00:05:57,790
numbers that are provided for you for

00:05:56,290 --> 00:06:00,040
the kernel it doesn't block it's very

00:05:57,790 --> 00:06:01,330
fast the downside is that it has all of

00:06:00,040 --> 00:06:04,090
the downsides that could come with a

00:06:01,330 --> 00:06:05,860
pseudo-random number and so people were

00:06:04,090 --> 00:06:07,450
debating about you know the differences

00:06:05,860 --> 00:06:09,700
between dev random which blocks until

00:06:07,450 --> 00:06:12,580
the kernel makes a determination there's

00:06:09,700 --> 00:06:14,800
enough entropy or not so it's a very

00:06:12,580 --> 00:06:16,570
interesting post and there are a lot of

00:06:14,800 --> 00:06:18,160
good points that come out on it but the

00:06:16,570 --> 00:06:19,750
thing I wanted to tell you or other with

00:06:18,160 --> 00:06:21,940
the thing you should take away is that

00:06:19,750 --> 00:06:25,930
the entire argument is predicated on

00:06:21,940 --> 00:06:28,870
this one comment and that is that the

00:06:25,930 --> 00:06:31,330
outcome or the security is depending

00:06:28,870 --> 00:06:34,950
upon having enough friend randomness or

00:06:31,330 --> 00:06:39,880
entered entropy at the beginning maybe

00:06:34,950 --> 00:06:42,460
256 bits is enough so let's think about

00:06:39,880 --> 00:06:46,180
that do we know that we have enough

00:06:42,460 --> 00:06:48,460
randomness at the beginning what if we

00:06:46,180 --> 00:06:51,110
don't what if we don't have enough

00:06:48,460 --> 00:06:53,840
friend in this in the beginning

00:06:51,110 --> 00:06:56,240
I want to share with you an interesting

00:06:53,840 --> 00:06:59,330
research paper from the University of

00:06:56,240 --> 00:07:04,270
Michigan and other sources henagar have

00:06:59,330 --> 00:07:07,340
a great paper on weaknesses in security

00:07:04,270 --> 00:07:10,190
specifically due to weaknesses and

00:07:07,340 --> 00:07:12,020
randomness on this is specifically

00:07:10,190 --> 00:07:15,890
talking about the weaknesses of Devi

00:07:12,020 --> 00:07:19,250
random and in this paper they talk about

00:07:15,890 --> 00:07:21,890
the existence of a Bhutan entropy hole

00:07:19,250 --> 00:07:23,660
that leaves systems vulnerable

00:07:21,890 --> 00:07:25,670
especially in headless and embedded

00:07:23,660 --> 00:07:27,800
devices so let's think about all the

00:07:25,670 --> 00:07:31,490
servers that are running web services on

00:07:27,800 --> 00:07:33,410
the web that you maintain probably fall

00:07:31,490 --> 00:07:37,850
into this category especially if they're

00:07:33,410 --> 00:07:39,560
in the cloud I won't go into all the

00:07:37,850 --> 00:07:40,850
details of this paper it's really

00:07:39,560 --> 00:07:42,140
interesting I highly recommend that you

00:07:40,850 --> 00:07:43,400
read it and I won't make my slides

00:07:42,140 --> 00:07:46,010
available so you don't have to jot down

00:07:43,400 --> 00:07:48,260
URLs or anything in the paper they

00:07:46,010 --> 00:07:51,260
examine over 10 million sites and they

00:07:48,260 --> 00:07:52,910
found by just doing simple scanning that

00:07:51,260 --> 00:07:55,300
there are a lot of duplicates and keys

00:07:52,910 --> 00:07:59,330
that there were available on the net and

00:07:55,300 --> 00:08:01,610
the short takeaway is that on there are

00:07:59,330 --> 00:08:03,590
many keys that they found to be

00:08:01,610 --> 00:08:08,260
vulnerable due to a lack of randomness

00:08:03,590 --> 00:08:10,550
and this includes SSH keys and RSA keys

00:08:08,260 --> 00:08:15,200
so this is the picture that I want to

00:08:10,550 --> 00:08:17,600
show you this is the entropy loophole in

00:08:15,200 --> 00:08:20,150
this example in this graph what you see

00:08:17,600 --> 00:08:21,920
is time from booth going from 0 to 70

00:08:20,150 --> 00:08:25,850
seconds and you have different events

00:08:21,920 --> 00:08:29,750
that are happening this line here is the

00:08:25,850 --> 00:08:32,170
actual entropy that is coming is being

00:08:29,750 --> 00:08:36,229
collected by the kernel in dev random

00:08:32,170 --> 00:08:39,229
this line here is 192 bits the kernel

00:08:36,229 --> 00:08:41,090
will not release bits out of dev random

00:08:39,229 --> 00:08:44,690
until there's this threshold of

00:08:41,090 --> 00:08:47,270
randomness this crossing of the

00:08:44,690 --> 00:08:50,000
threshold happens in this study at 66

00:08:47,270 --> 00:08:54,080
seconds but let's look at what happens

00:08:50,000 --> 00:08:58,070
before 66 seconds after boot this dotted

00:08:54,080 --> 00:08:59,550
line is the amount of bytes that are

00:08:58,070 --> 00:09:01,560
coming out of dev you

00:08:59,550 --> 00:09:04,380
and since both the pseudo-random number

00:09:01,560 --> 00:09:06,089
generator and the event that you should

00:09:04,380 --> 00:09:08,630
really care about happens here at four

00:09:06,089 --> 00:09:13,110
seconds what happens then

00:09:08,630 --> 00:09:16,740
SSH uses dev you random to seed its own

00:09:13,110 --> 00:09:21,810
internal key generation so what this

00:09:16,740 --> 00:09:24,959
means is that SSH doesn't actually have

00:09:21,810 --> 00:09:33,959
enough entropy at four seconds to have a

00:09:24,959 --> 00:09:37,589
completely unpredictable set of keys so

00:09:33,959 --> 00:09:39,240
this is a concern I wanted to put this

00:09:37,589 --> 00:09:41,430
note in here and this is mainly for when

00:09:39,240 --> 00:09:44,010
you review the slides later on this

00:09:41,430 --> 00:09:46,589
paper is interesting because what it

00:09:44,010 --> 00:09:48,810
says is the kernels estimate of entropy

00:09:46,589 --> 00:09:54,750
is actually fairly conservative and it's

00:09:48,810 --> 00:09:57,180
pretty good so we can use that but this

00:09:54,750 --> 00:10:00,000
problem of random number generation

00:09:57,180 --> 00:10:03,029
insecurity has been discussed quite a

00:10:00,000 --> 00:10:05,850
bit itself by Southwest Edward Snowden

00:10:03,029 --> 00:10:07,529
made this comment which was picked up by

00:10:05,850 --> 00:10:09,209
Matthew Green who you might know as a

00:10:07,529 --> 00:10:15,420
cryptography researcher at Johns Hopkins

00:10:09,209 --> 00:10:17,700
and after this this tweet Green comes on

00:10:15,420 --> 00:10:18,779
to make a blog post and I have the URL

00:10:17,700 --> 00:10:21,089
don't know how to write it down you can

00:10:18,779 --> 00:10:22,980
get it from the slides how do you know

00:10:21,089 --> 00:10:26,070
if a random number generator is working

00:10:22,980 --> 00:10:27,510
and it's a great blog post because it

00:10:26,070 --> 00:10:29,220
highlights a lot of the challenges that

00:10:27,510 --> 00:10:31,260
we've got in security related to random

00:10:29,220 --> 00:10:32,750
numbers one of the things that I learned

00:10:31,260 --> 00:10:37,800
which I thought was interesting is that

00:10:32,750 --> 00:10:40,860
Intel's Ivy Bridge randomness actually

00:10:37,800 --> 00:10:42,870
gives you bits that are the output of a

00:10:40,860 --> 00:10:47,010
pseudo random number generation process

00:10:42,870 --> 00:10:49,290
not the entropy directly so there's a

00:10:47,010 --> 00:10:51,540
concern about that on but what Green

00:10:49,290 --> 00:10:53,490
does is he talks about statistical tests

00:10:51,540 --> 00:10:55,380
that we can use to measure if something

00:10:53,490 --> 00:10:57,899
is actually random enough it's a very

00:10:55,380 --> 00:10:59,970
hard problem related to this and in a

00:10:57,899 --> 00:11:01,199
separate blog post green also talks

00:10:59,970 --> 00:11:03,980
about something I'm sure you're familiar

00:11:01,199 --> 00:11:07,339
with those of you that are in security

00:11:03,980 --> 00:11:10,510
is the use of the dual EC drbg

00:11:07,339 --> 00:11:13,900
random number generator that has

00:11:10,510 --> 00:11:17,530
came a nest proposal for those that

00:11:13,900 --> 00:11:19,420
aren't familiar this was a an elliptic

00:11:17,530 --> 00:11:21,220
curve based random number generator that

00:11:19,420 --> 00:11:24,850
was proposed by NIST as a standard and

00:11:21,220 --> 00:11:26,640
found to have potential backdoors based

00:11:24,850 --> 00:11:31,390
on the wail of the curves work and

00:11:26,640 --> 00:11:35,710
curiously the NSA paid RSA security a

00:11:31,390 --> 00:11:39,460
million dollars to make DC dual ec drbg

00:11:35,710 --> 00:11:42,580
to default RNG and all of RSA security

00:11:39,460 --> 00:11:46,210
products so this at least should raise a

00:11:42,580 --> 00:11:48,640
question in our minds about the cipher

00:11:46,210 --> 00:11:50,260
suites in the random number generator in

00:11:48,640 --> 00:11:52,480
particular that we're using when we're

00:11:50,260 --> 00:11:54,700
generating security related materials so

00:11:52,480 --> 00:11:59,380
now after hearing this would you like

00:11:54,700 --> 00:12:02,200
some entropy yeah well we've got some

00:11:59,380 --> 00:12:04,120
challenges with tearin' G's there they

00:12:02,200 --> 00:12:06,100
can be expensive they can be out of

00:12:04,120 --> 00:12:10,060
stock that can be based on closed closed

00:12:06,100 --> 00:12:12,010
designs on many of you I know are aware

00:12:10,060 --> 00:12:14,860
of the sim tech entropy key and this is

00:12:12,010 --> 00:12:21,850
one of the early places that that I went

00:12:14,860 --> 00:12:23,560
to yeah right well so I I mean I had to

00:12:21,850 --> 00:12:26,110
put this right this is on the web site

00:12:23,560 --> 00:12:27,460
so I had to put this up that we don't

00:12:26,110 --> 00:12:35,350
have any yet stock and we don't know and

00:12:27,460 --> 00:12:36,580
we'll have more that's the problem so

00:12:35,350 --> 00:12:39,190
that's why we're that's why we're here

00:12:36,580 --> 00:12:41,560
and I don't know if niba is here in the

00:12:39,190 --> 00:12:43,630
audience there is but he contacted me

00:12:41,560 --> 00:12:46,180
and let me know that he's working on a

00:12:43,630 --> 00:12:49,210
project maybe he could sit somewhere

00:12:46,180 --> 00:12:50,590
it's about about his orangey later but

00:12:49,210 --> 00:12:53,350
there's a nice website is there not all

00:12:50,590 --> 00:12:55,750
in Japanese so there's some stuff in in

00:12:53,350 --> 00:12:58,210
English there too and a very important

00:12:55,750 --> 00:13:02,790
mainland called to my attention that had

00:12:58,210 --> 00:13:02,790
LCA I believe was earlier this year

00:13:03,060 --> 00:13:10,200
maybe it was here ago something there

00:13:05,200 --> 00:13:13,330
maybe I've got that you're wrong okay on

00:13:10,200 --> 00:13:14,590
there there is a discussion of RTL

00:13:13,330 --> 00:13:18,880
entropy which is really interesting

00:13:14,590 --> 00:13:23,120
using a DVB dongle with software-defined

00:13:18,880 --> 00:13:25,620
radio to use radio as a source of answer

00:13:23,120 --> 00:13:28,530
and so I think it's an interesting

00:13:25,620 --> 00:13:31,530
approach and one of the things that I

00:13:28,530 --> 00:13:34,170
that I said in talking with my friends

00:13:31,530 --> 00:13:36,960
about this is that one thing that we

00:13:34,170 --> 00:13:38,610
could do introdu is when we have good

00:13:36,960 --> 00:13:41,340
sources of randomness that we can really

00:13:38,610 --> 00:13:43,890
trust we ought to have secure ways of

00:13:41,340 --> 00:13:45,510
mixing the sources together because that

00:13:43,890 --> 00:13:46,950
actually makes the the quality of the

00:13:45,510 --> 00:13:48,360
randomness increase and there are

00:13:46,950 --> 00:13:51,150
cryptographic ways of doing that that's

00:13:48,360 --> 00:13:55,200
fairly straightforward so do we want

00:13:51,150 --> 00:13:58,320
more entropy yes we do so why do we want

00:13:55,200 --> 00:13:58,890
to go and make yet another hardware

00:13:58,320 --> 00:14:03,780
product

00:13:58,890 --> 00:14:05,400
well because it's fun because we can so

00:14:03,780 --> 00:14:07,860
I was thinking about this and thinking

00:14:05,400 --> 00:14:10,920
who do I know that does hardware and

00:14:07,860 --> 00:14:12,720
software it believes in freedom so it's

00:14:10,920 --> 00:14:15,030
thinking of our friends at ulta Symetra

00:14:12,720 --> 00:14:18,000
that do some really cool hardware

00:14:15,030 --> 00:14:20,100
designs open hardware designs with free

00:14:18,000 --> 00:14:21,600
software and fly them in rockets and

00:14:20,100 --> 00:14:23,100
they actually got me excited in doing

00:14:21,600 --> 00:14:25,470
this so I'm going to be flying this in a

00:14:23,100 --> 00:14:28,620
rocket this weekend so I'm very excited

00:14:25,470 --> 00:14:30,300
about it and so I talked to my friends

00:14:28,620 --> 00:14:31,980
at Alton spectrum and then learned that

00:14:30,300 --> 00:14:34,470
you know they have actually a lot of

00:14:31,980 --> 00:14:35,970
experience in this they've I tried to

00:14:34,470 --> 00:14:37,770
count and I don't know exactly how many

00:14:35,970 --> 00:14:40,470
open hardware designs there are but at

00:14:37,770 --> 00:14:44,310
least over 15 on many different

00:14:40,470 --> 00:14:45,870
architectures and a marvelously free

00:14:44,310 --> 00:14:47,310
real-time operating system with some

00:14:45,870 --> 00:14:51,830
really neat features that's actually

00:14:47,310 --> 00:14:53,520
very easy to understand and program so

00:14:51,830 --> 00:14:57,090
let me introduce you

00:14:53,520 --> 00:14:58,890
Bedell Garvey and Keith Packard we're my

00:14:57,090 --> 00:15:03,990
friends at also cement room and that I'm

00:14:58,890 --> 00:15:07,830
partnering with to do a USB trng so a

00:15:03,990 --> 00:15:12,360
little bit about the design I'd say NXP

00:15:07,830 --> 00:15:15,180
cortex m0 typical USB key based on a

00:15:12,360 --> 00:15:18,660
bandgap voltage reference does noise

00:15:15,180 --> 00:15:20,310
amplification and we can have BDL maybe

00:15:18,660 --> 00:15:25,160
say a few more words about the design at

00:15:20,310 --> 00:15:25,160
some point it's boring

00:15:25,420 --> 00:15:31,720
I owe this didn't show up so well this

00:15:28,630 --> 00:15:35,610
is the this is the this is the schematic

00:15:31,720 --> 00:15:38,230
which which is all available on the

00:15:35,610 --> 00:15:39,730
ultimate room website and this is the

00:15:38,230 --> 00:15:42,430
interesting part with the diode and the

00:15:39,730 --> 00:15:50,890
op amps and stuff and going in the rest

00:15:42,430 --> 00:15:54,040
is classic the first product is the song

00:15:50,890 --> 00:15:55,870
just one two three four five okay

00:15:54,040 --> 00:15:58,180
the first hardware prototype has a

00:15:55,870 --> 00:16:01,080
single noise generator and it is

00:15:58,180 --> 00:16:02,950
afflicted with low frequency noise

00:16:01,080 --> 00:16:04,390
injected through the power supply that

00:16:02,950 --> 00:16:05,860
needs to be dealt with which is part of

00:16:04,390 --> 00:16:07,600
the reason I'm not by handing out

00:16:05,860 --> 00:16:09,760
samples to folks to play with this

00:16:07,600 --> 00:16:11,020
weekend there was a point in history or

00:16:09,760 --> 00:16:12,970
we thought the right thing to do is to

00:16:11,020 --> 00:16:15,010
arrive with enough of these to just hand

00:16:12,970 --> 00:16:18,190
them out to everybody but well you know

00:16:15,010 --> 00:16:19,630
life intruded and that's the interesting

00:16:18,190 --> 00:16:21,460
that it's also the part I'm not happy

00:16:19,630 --> 00:16:23,860
with yet so there will be more work I

00:16:21,460 --> 00:16:26,440
you guys know a lot about this problem

00:16:23,860 --> 00:16:28,000
and I would love to have that

00:16:26,440 --> 00:16:30,930
conversation that'd be wonderful

00:16:28,000 --> 00:16:30,930
the only

00:16:33,949 --> 00:16:44,940
brilliant so so the only the only thing

00:16:43,649 --> 00:16:47,069
I'll claim to have done that's a tall

00:16:44,940 --> 00:16:50,250
novel on here is is the choice of the

00:16:47,069 --> 00:16:51,509
quote unquote Zener device there's some

00:16:50,250 --> 00:16:57,810
interesting parts out now that are

00:16:51,509 --> 00:16:59,180
actually bandgap voltage references yes

00:16:57,810 --> 00:17:00,930
I know

00:16:59,180 --> 00:17:03,120
okay well let's have a conversation

00:17:00,930 --> 00:17:05,400
method I would love to improve that part

00:17:03,120 --> 00:17:06,780
of it and as I say what we have right

00:17:05,400 --> 00:17:08,280
now which Tom's gonna show in just a

00:17:06,780 --> 00:17:10,799
moment or what I would affectionately

00:17:08,280 --> 00:17:15,659
refer to as version 2.1 you know where

00:17:10,799 --> 00:17:17,490
those mean no they're not beta well so

00:17:15,659 --> 00:17:18,780
one of the nice things about having open

00:17:17,490 --> 00:17:21,419
hardware is you can go and grab things

00:17:18,780 --> 00:17:23,280
like you have a PC board design so this

00:17:21,419 --> 00:17:25,230
is you know just a quick snapshot of the

00:17:23,280 --> 00:17:27,480
PC board design which I wanted to have

00:17:25,230 --> 00:17:29,429
that image in mind of the the front you

00:17:27,480 --> 00:17:31,110
know the the front in the back of the

00:17:29,429 --> 00:17:34,200
part so that when I show you the picture

00:17:31,110 --> 00:17:35,820
of version 0.1 you would sort of see

00:17:34,200 --> 00:17:37,409
that it sort of lines up you've got all

00:17:35,820 --> 00:17:39,659
the cool cool bits there and you've got

00:17:37,409 --> 00:17:42,210
the nice logo here and the version 0.1

00:17:39,659 --> 00:17:44,039
there and that's that's what it looks

00:17:42,210 --> 00:17:45,179
like it's a little USB key that you plug

00:17:44,039 --> 00:17:52,370
into your computer and gives you a good

00:17:45,179 --> 00:17:55,890
random numbers to small early prototype

00:17:52,370 --> 00:17:58,020
so what's cool about this for all of you

00:17:55,890 --> 00:17:59,850
I don't need to you know belabor this

00:17:58,020 --> 00:18:01,919
point but it's based on free software

00:17:59,850 --> 00:18:03,840
and open hardware using licenses that

00:18:01,919 --> 00:18:06,090
you're very familiar with on you know

00:18:03,840 --> 00:18:08,490
why you know facilitates community

00:18:06,090 --> 00:18:10,919
collaboration and enables am independent

00:18:08,490 --> 00:18:12,419
implementation and discussion which is

00:18:10,919 --> 00:18:15,539
actually the part of the reason that

00:18:12,419 --> 00:18:19,830
we're here because this security I think

00:18:15,539 --> 00:18:21,450
is very much in need of free software

00:18:19,830 --> 00:18:24,240
and I don't think we can get two really

00:18:21,450 --> 00:18:26,520
good security without without freedom so

00:18:24,240 --> 00:18:29,460
having independent implementations is

00:18:26,520 --> 00:18:31,590
great and to my surprise Keith told me

00:18:29,460 --> 00:18:33,630
that there is is a professor here at

00:18:31,590 --> 00:18:37,470
Portland State that has taken their

00:18:33,630 --> 00:18:38,159
design and re-implemented it and he's

00:18:37,470 --> 00:18:39,970
got it

00:18:38,159 --> 00:18:44,560
but he couldn't

00:18:39,970 --> 00:18:45,670
find it - bring it in today but it's

00:18:44,560 --> 00:18:49,210
it's too small

00:18:45,670 --> 00:18:51,010
mr. small okay list it but I thought it

00:18:49,210 --> 00:18:53,320
was really quiet I thought it would I

00:18:51,010 --> 00:18:56,850
would your channel to Bart Macy for

00:18:53,320 --> 00:18:58,660
actually reimplemented the design

00:18:56,850 --> 00:19:01,360
there's a lot of different ways to

00:18:58,660 --> 00:19:03,640
analyze the quality of a random number

00:19:01,360 --> 00:19:06,070
generator actually the fifth standard is

00:19:03,640 --> 00:19:07,600
pretty modest basically I think is

00:19:06,070 --> 00:19:11,230
effectively telling you is this thing

00:19:07,600 --> 00:19:12,370
alive or dead we can do I think we can

00:19:11,230 --> 00:19:14,170
do much better there are a number of

00:19:12,370 --> 00:19:15,520
test suites I'd love to hear everyone's

00:19:14,170 --> 00:19:17,950
opinion about test Suites that we can

00:19:15,520 --> 00:19:20,230
use to evaluate randomness I put test as

00:19:17,950 --> 00:19:22,870
a user a 1-up which is one that has

00:19:20,230 --> 00:19:25,300
become very popular greens blog post

00:19:22,870 --> 00:19:26,890
mentions a number of other ways in which

00:19:25,300 --> 00:19:28,350
testing is tricky and needs to be

00:19:26,890 --> 00:19:30,730
thought out carefully

00:19:28,350 --> 00:19:31,240
obviously that's it's an important thing

00:19:30,730 --> 00:19:33,430
to do

00:19:31,240 --> 00:19:35,950
well the idea I think it's to leverage

00:19:33,430 --> 00:19:38,440
the I you know what Simtek did the idea

00:19:35,950 --> 00:19:41,800
of connecting with the edge wiki demon

00:19:38,440 --> 00:19:44,500
and EGD so that other applications can

00:19:41,800 --> 00:19:48,340
take advantage of the interview pool so

00:19:44,500 --> 00:19:50,590
that's the plan on the current status as

00:19:48,340 --> 00:19:54,030
BDL pointed out is we have an early

00:19:50,590 --> 00:19:57,220
prototype we're designing the software

00:19:54,030 --> 00:20:00,250
life kind of kept me busy too so we're

00:19:57,220 --> 00:20:01,750
still in the design phase I'm really

00:20:00,250 --> 00:20:05,440
keen on getting the test suites

00:20:01,750 --> 00:20:07,210
available to to test not just our

00:20:05,440 --> 00:20:08,500
hardware solution for random number

00:20:07,210 --> 00:20:09,760
generation but any one that we might

00:20:08,500 --> 00:20:10,090
come up with and I guess for extra

00:20:09,760 --> 00:20:11,320
credit

00:20:10,090 --> 00:20:12,640
it'd be great if we could get these

00:20:11,320 --> 00:20:18,760
things in the archive so anyone could

00:20:12,640 --> 00:20:21,340
use them and so I have here the URL for

00:20:18,760 --> 00:20:23,160
the the project on Altis metro morgue

00:20:21,340 --> 00:20:26,230
it's USB trng

00:20:23,160 --> 00:20:28,660
there's already an Ulta Smet room IRC

00:20:26,230 --> 00:20:31,960
channel it's on our own oft C Network

00:20:28,660 --> 00:20:33,580
hash halters metro and there's a minute

00:20:31,960 --> 00:20:35,380
list that we've just created for this

00:20:33,580 --> 00:20:38,590
project on list

00:20:35,380 --> 00:20:41,010
JG comm so please come and participate

00:20:38,590 --> 00:20:43,900
give us your ideas give us your feedback

00:20:41,010 --> 00:20:45,580
what are we gonna do next well we're

00:20:43,900 --> 00:20:47,200
going to continue to test the hardware

00:20:45,580 --> 00:20:50,980
make make some revisions take your

00:20:47,200 --> 00:20:53,070
feedback tweak it revise it work on the

00:20:50,980 --> 00:20:55,919
software to integrate it

00:20:53,070 --> 00:20:57,769
think about potential attack vectors try

00:20:55,919 --> 00:21:00,059
to evaluate which ones are most likely

00:20:57,769 --> 00:21:02,580
try and mitigate those kinds of attacks

00:21:00,059 --> 00:21:04,169
Josh was telling me just at Linux con

00:21:02,580 --> 00:21:06,779
last week he learned about or he was

00:21:04,169 --> 00:21:08,519
aware of kr and G D which is I believe a

00:21:06,779 --> 00:21:10,740
daemon inside the kernel or a service

00:21:08,519 --> 00:21:12,899
inside the kernel that manages entropy

00:21:10,740 --> 00:21:18,870
or provides entropy for different things

00:21:12,899 --> 00:21:23,250
like um I think sequence numbers for

00:21:18,870 --> 00:21:24,450
networking and I thought well if earlier

00:21:23,250 --> 00:21:26,370
and I told him I was gonna make this

00:21:24,450 --> 00:21:28,529
plug I found a really interesting blog

00:21:26,370 --> 00:21:30,539
post that Oliver put out in 2009 about

00:21:28,529 --> 00:21:32,309
distributing entropy so if we go back to

00:21:30,539 --> 00:21:34,889
this thing about well how many of us

00:21:32,309 --> 00:21:38,549
manage web servers or other services in

00:21:34,889 --> 00:21:40,260
the cloud that don't have the typical

00:21:38,549 --> 00:21:43,529
sources of entropy that a desktop might

00:21:40,260 --> 00:21:45,840
have and we might not even be able to

00:21:43,529 --> 00:21:47,460
plug a USB key into them how did we get

00:21:45,840 --> 00:21:48,750
good quality entropy into them and so

00:21:47,460 --> 00:21:50,519
Tallis was talking about it the way that

00:21:48,750 --> 00:21:52,260
he was doing that at that time and I

00:21:50,519 --> 00:21:54,029
found that to be really interesting

00:21:52,260 --> 00:21:55,740
including tall events and some numbers

00:21:54,029 --> 00:21:57,929
about how much entropy was needed and

00:21:55,740 --> 00:21:59,429
how much was available and consumed so I

00:21:57,929 --> 00:22:00,899
loved that that was that was

00:21:59,429 --> 00:22:02,179
particularly interesting and very

00:22:00,899 --> 00:22:04,200
apropos

00:22:02,179 --> 00:22:06,059
including some issues and not on

00:22:04,200 --> 00:22:09,049
physician still exists about EGD about

00:22:06,059 --> 00:22:09,049
clients reconnecting

00:22:12,400 --> 00:22:22,280
to the bug fix yeah okay fantastic

00:22:18,070 --> 00:22:24,080
so with that ready to ask any questions

00:22:22,280 --> 00:22:27,230
he answer any questions that you might

00:22:24,080 --> 00:22:29,960
have hi this is my my blogsite i will

00:22:27,230 --> 00:22:32,600
put the slides up on my blog t marble

00:22:29,960 --> 00:22:35,540
dot info nine net and as I mentioned the

00:22:32,600 --> 00:22:39,980
mailing list is list gog.com this is my

00:22:35,540 --> 00:22:45,680
cat cuddles every every presentation

00:22:39,980 --> 00:22:52,520
should have a cat or rocket or both we

00:22:45,680 --> 00:22:55,730
got both in this one so what do you

00:22:52,520 --> 00:23:02,900
think Keith do you want to say anything

00:22:55,730 --> 00:23:04,990
about altos fairly simple implementation

00:23:02,900 --> 00:23:07,370
of this for this particular project gets

00:23:04,990 --> 00:23:08,900
so one of the interesting Hardware hacks

00:23:07,370 --> 00:23:11,000
here was that we have a bit sequence

00:23:08,900 --> 00:23:12,980
sequence coming out of the comparator

00:23:11,000 --> 00:23:15,440
and we're just shoving that into a spy

00:23:12,980 --> 00:23:16,850
input port on the processor so it takes

00:23:15,440 --> 00:23:18,650
very little hardware overhead to

00:23:16,850 --> 00:23:20,360
actually read a stream of bits out of

00:23:18,650 --> 00:23:22,670
the out of the sequence and they're

00:23:20,360 --> 00:23:24,650
nicely clocked by the by the by the CPU

00:23:22,670 --> 00:23:26,900
so actually able to generate we can

00:23:24,650 --> 00:23:28,700
saturate a USB link with random numbers

00:23:26,900 --> 00:23:30,950
in theory if we can actually generate

00:23:28,700 --> 00:23:34,210
random numbers that fast yeah if they're

00:23:30,950 --> 00:23:37,820
actually random that would be awesome so

00:23:34,210 --> 00:23:41,900
this is a nice little USB USB compatible

00:23:37,820 --> 00:23:44,870
process of the nxb LPC 11 u14 they're

00:23:41,900 --> 00:23:46,550
not very free software free Hardware

00:23:44,870 --> 00:23:48,260
friendly company I would love to find a

00:23:46,550 --> 00:23:51,380
better processor but this one costs a

00:23:48,260 --> 00:23:54,080
dollar and 48 cents for an ARM processor

00:23:51,380 --> 00:23:55,490
so that is a kind of a compelling reason

00:23:54,080 --> 00:23:57,350
to use them I would love to switch to

00:23:55,490 --> 00:23:58,640
and they're physically very small I

00:23:57,350 --> 00:24:00,620
would love to switch to something with a

00:23:58,640 --> 00:24:03,590
little more free software they have

00:24:00,620 --> 00:24:06,680
actually there's actually software in

00:24:03,590 --> 00:24:12,100
the part that runs at boot time we don't

00:24:06,680 --> 00:24:14,030
have source 2 they have a closed source

00:24:12,100 --> 00:24:15,800
development environment which is how

00:24:14,030 --> 00:24:18,920
they how they try to get you to put

00:24:15,800 --> 00:24:20,720
stuff onto their part and when I am when

00:24:18,920 --> 00:24:23,280
somebody posted information about how to

00:24:20,720 --> 00:24:26,400
use an open source open hardware

00:24:23,280 --> 00:24:28,260
a dongle to get software on to the part

00:24:26,400 --> 00:24:30,120
on one of their on one of their fora

00:24:28,260 --> 00:24:37,680
they actually deleted all of that data

00:24:30,120 --> 00:24:40,440
oh that's not very nice yeah I think if

00:24:37,680 --> 00:24:50,250
you're prepared to go up to about $1 $92

00:24:40,440 --> 00:24:51,330
the stm32 f103 48 pin QFP was what knows

00:24:50,250 --> 00:24:55,500
the cure for pee was the one that we

00:24:51,330 --> 00:24:57,810
used on the entropy King and I have what

00:24:55,500 --> 00:25:00,290
foot lqf P 48 you ready said that was

00:24:57,810 --> 00:25:00,290
too small

00:25:01,310 --> 00:25:14,970
bhp keys about what twice as long in the

00:25:03,930 --> 00:25:17,070
same width huge okay yeah we can talk

00:25:14,970 --> 00:25:20,310
about that but you can get a 36 pinkie

00:25:17,070 --> 00:25:23,550
iPhone version of the stm32 and more

00:25:20,310 --> 00:25:26,210
importantly I have an open GCC based dev

00:25:23,550 --> 00:25:26,210
environment for it

00:25:37,310 --> 00:25:42,540
as long as it's got good speed well let

00:25:40,620 --> 00:25:44,070
me ask let me have stall for me ask you

00:25:42,540 --> 00:25:48,920
a question how are you handling entropy

00:25:44,070 --> 00:25:51,930
these days hmm

00:25:48,920 --> 00:25:54,120
- it depends on which hat you're asking

00:25:51,930 --> 00:25:56,370
if you're asking my DSA hat we're

00:25:54,120 --> 00:25:58,890
actually still using the entropy keys

00:25:56,370 --> 00:26:00,720
because we got either we bought bunch or

00:25:58,890 --> 00:26:07,710
we got the nation I can't remember

00:26:00,720 --> 00:26:09,810
and yes off like that and so yeah we're

00:26:07,710 --> 00:26:12,570
using that for my personal stuff I

00:26:09,810 --> 00:26:18,150
actually don't use entropy keys at

00:26:12,570 --> 00:26:20,970
moment and just cope that's as you point

00:26:18,150 --> 00:26:23,130
out it's not a terribly good night good

00:26:20,970 --> 00:26:27,000
solution so so if you if you haven't run

00:26:23,130 --> 00:26:32,040
you might user exactly in some cases

00:26:27,000 --> 00:26:36,000
I've used the UB HSM which is a it's an

00:26:32,040 --> 00:26:38,550
HSM I h sm device which is slightly more

00:26:36,000 --> 00:26:40,560
expensive at $500 but the nice people

00:26:38,550 --> 00:26:44,610
adds yubico gave me one for free

00:26:40,560 --> 00:26:49,910
so that's nice but it also can do random

00:26:44,610 --> 00:26:49,910
number generation so pretty good here

00:26:50,810 --> 00:26:56,570
so what I wanted to say I not so

00:26:54,170 --> 00:26:57,800
facetiously mentioned earlier that we

00:26:56,570 --> 00:26:59,450
had thought at one point that we might

00:26:57,800 --> 00:27:02,030
just make enough of them to bring in

00:26:59,450 --> 00:27:05,000
hanim at at DEFCON Chazz sort of getting

00:27:02,030 --> 00:27:06,470
some things into the market but what

00:27:05,000 --> 00:27:08,720
we've really been talking about because

00:27:06,470 --> 00:27:11,690
we have absolutely no idea how to gauge

00:27:08,720 --> 00:27:12,980
the level of actual interest from people

00:27:11,690 --> 00:27:15,170
who would actually spend money to buy

00:27:12,980 --> 00:27:16,760
the one of these is this is a classic

00:27:15,170 --> 00:27:18,260
example of something that you know we

00:27:16,760 --> 00:27:19,910
ought to use the Kickstarter it should

00:27:18,260 --> 00:27:22,700
kind of model for you know one of those

00:27:19,910 --> 00:27:24,860
sites and and so my hope is that you

00:27:22,700 --> 00:27:26,240
know some number of months from now once

00:27:24,860 --> 00:27:28,070
we've had a chance to go through another

00:27:26,240 --> 00:27:29,600
you know a couple of Hardware revs and

00:27:28,070 --> 00:27:32,360
get to something that we actually you

00:27:29,600 --> 00:27:33,800
know would not be ashamed to take a

00:27:32,360 --> 00:27:35,780
little bit of money from people for that

00:27:33,800 --> 00:27:39,890
we can do one of those crowdsourcing

00:27:35,780 --> 00:27:42,050
things and just see I you know Keith and

00:27:39,890 --> 00:27:44,870
I have a fairly well-oiled machine for

00:27:42,050 --> 00:27:46,460
doing small batch product you know

00:27:44,870 --> 00:27:48,710
assembly the thing that we have not

00:27:46,460 --> 00:27:50,330
tried to do is deal with what happens if

00:27:48,710 --> 00:27:52,880
we have a success disaster in one of

00:27:50,330 --> 00:27:54,470
these and you know it would be an

00:27:52,880 --> 00:27:55,760
interesting learning experience actually

00:27:54,470 --> 00:27:57,470
to find all of a sudden than we needed

00:27:55,760 --> 00:27:59,900
to figure out how to build ten thousand

00:27:57,470 --> 00:28:03,080
or something but for doing you know

00:27:59,900 --> 00:28:04,670
hundreds or low number thousands we have

00:28:03,080 --> 00:28:07,400
a pretty well-oiled process for doing

00:28:04,670 --> 00:28:08,660
that and it's not expensive so I think I

00:28:07,400 --> 00:28:10,370
think if we can get to the point where

00:28:08,660 --> 00:28:11,780
we have some kind of piece of hardware

00:28:10,370 --> 00:28:12,950
that we're happy with turning that into

00:28:11,780 --> 00:28:16,210
something that people could actually

00:28:12,950 --> 00:28:19,010
just sort of go buy one of and use and

00:28:16,210 --> 00:28:21,740
have it be a hundred percent open

00:28:19,010 --> 00:28:23,600
hardware open-source is not not at all

00:28:21,740 --> 00:28:25,580
difficult for us to achieve I'll also

00:28:23,600 --> 00:28:27,770
mention in passing that our most

00:28:25,580 --> 00:28:30,110
complicated product to date something

00:28:27,770 --> 00:28:32,150
that would call teleMed which is a six

00:28:30,110 --> 00:28:35,030
pyro channel lots and lots of sensors

00:28:32,150 --> 00:28:37,100
flight computer this past weekend at a

00:28:35,030 --> 00:28:40,040
launch at Eastern Oregon we had a chance

00:28:37,100 --> 00:28:42,200
to take a look at one that some random

00:28:40,040 --> 00:28:44,450
guy took all the design data off our

00:28:42,200 --> 00:28:46,670
site had a couple of raw boards made

00:28:44,450 --> 00:28:48,179
taught himself how to hand play surface

00:28:46,670 --> 00:28:49,889
mount parts at home and got

00:28:48,179 --> 00:28:51,480
to be working boards one of which was

00:28:49,889 --> 00:28:55,320
flown out in brothers Oregon last

00:28:51,480 --> 00:28:57,450
weekend so Wow if you ever doubted the

00:28:55,320 --> 00:28:59,129
veracity of our assertion that all of

00:28:57,450 --> 00:29:02,340
our designs 100% open hardware

00:28:59,129 --> 00:29:04,139
open-source he actually used our build

00:29:02,340 --> 00:29:06,029
materials metadata to know which

00:29:04,139 --> 00:29:08,909
distributors to buy which parts from the

00:29:06,029 --> 00:29:11,190
load the board you know it really is all

00:29:08,909 --> 00:29:12,840
out there so whatever we end up with

00:29:11,190 --> 00:29:15,389
here will be in exactly that same

00:29:12,840 --> 00:29:18,090
category and if we can end up you know

00:29:15,389 --> 00:29:19,980
not having sort of little hidden binary

00:29:18,090 --> 00:29:22,740
blobs and the parts were choosing so

00:29:19,980 --> 00:29:24,659
much better but whatever we end up with

00:29:22,740 --> 00:29:28,889
it will be completely reproducible by

00:29:24,659 --> 00:29:31,019
whoever wants to hack on them I think

00:29:28,889 --> 00:29:32,909
you might find it very difficult to find

00:29:31,019 --> 00:29:35,309
a magnetron without a hidden binary blob

00:29:32,909 --> 00:29:36,659
I think they all have a boot drum and

00:29:35,309 --> 00:29:40,590
you're not going to get the source for

00:29:36,659 --> 00:29:43,139
it the only bits that exist inside the

00:29:40,590 --> 00:29:45,679
part on the stm32 l we don't ever let

00:29:43,139 --> 00:29:45,679
execute

00:29:47,720 --> 00:29:56,360
so me babe would you be willing to say

00:29:50,179 --> 00:30:00,259
couple words about your project I will

00:29:56,360 --> 00:30:02,720
have my session Thursday morning okay

00:30:00,259 --> 00:30:05,990
and that's for mainly for my goon

00:30:02,720 --> 00:30:08,179
October but I will also address my

00:30:05,990 --> 00:30:11,149
random number generator implementation

00:30:08,179 --> 00:30:14,090
which is also free software and their

00:30:11,149 --> 00:30:18,679
free design rehydrate design okay great

00:30:14,090 --> 00:30:22,789
thank you I've got a question concerning

00:30:18,679 --> 00:30:27,679
the SSH problem that it started too

00:30:22,789 --> 00:30:31,580
early can this be fixed if I reboot this

00:30:27,679 --> 00:30:34,340
SH daemon later if the kernel has much

00:30:31,580 --> 00:30:38,389
more entropy you think so and then maybe

00:30:34,340 --> 00:30:40,340
this should be made a default or maybe

00:30:38,389 --> 00:30:50,629
it's maybe it's as easy as a system D

00:30:40,340 --> 00:30:53,059
sorry so I thought systems tended to

00:30:50,629 --> 00:30:59,289
store some entropy on shut down so they

00:30:53,059 --> 00:30:59,289
could load it back up on boom right okay

00:31:00,250 --> 00:31:07,370
from our experience obviously when I

00:31:03,379 --> 00:31:09,889
wrote the key D and put that together I

00:31:07,370 --> 00:31:11,419
did a fake bunch profiling which is

00:31:09,889 --> 00:31:14,090
actually much harder than it ought to be

00:31:11,419 --> 00:31:16,460
because this is pre perf and all the

00:31:14,090 --> 00:31:19,730
other nice things we can do now but

00:31:16,460 --> 00:31:22,700
effectively the kernel because it uses

00:31:19,730 --> 00:31:24,950
random numbers for everything from every

00:31:22,700 --> 00:31:28,850
time the process starts it grabs twelve

00:31:24,950 --> 00:31:31,000
bits out the pool so it can change the

00:31:28,850 --> 00:31:35,419
status and all the random placement

00:31:31,000 --> 00:31:37,190
every time it starts a TCP session it

00:31:35,419 --> 00:31:40,580
goes away and creates a new session

00:31:37,190 --> 00:31:42,919
thing and it wraps three bits what I

00:31:40,580 --> 00:31:45,049
discovered was is the a headless system

00:31:42,919 --> 00:31:50,080
or system where it's not where there are

00:31:45,049 --> 00:31:52,840
no large-scale sources of entropy for it

00:31:50,080 --> 00:31:55,899
often it will never ever actually

00:31:52,840 --> 00:31:57,549
enough bits to start the system it will

00:31:55,899 --> 00:32:01,749
never get above its minimum bailout

00:31:57,549 --> 00:32:03,039
level so it might so not 196 and give it

00:32:01,749 --> 00:32:04,929
all the way and that's the end of the

00:32:03,039 --> 00:32:07,330
message so when you when you had the

00:32:04,929 --> 00:32:09,730
with the entropy key how quickly does

00:32:07,330 --> 00:32:11,710
the entropy key become the actual

00:32:09,730 --> 00:32:12,399
entropy become available to the kernel

00:32:11,710 --> 00:32:16,090
after a book

00:32:12,399 --> 00:32:18,580
well we dump it into dev there the write

00:32:16,090 --> 00:32:21,399
we write it to dev random as soon as we

00:32:18,580 --> 00:32:24,970
are started I mean we can call 20

00:32:21,399 --> 00:32:27,970
kilobits a second or a 35 on the final

00:32:24,970 --> 00:32:31,029
product so we put so 30 we can get 35

00:32:27,970 --> 00:32:32,559
kilobits and under in a second so but

00:32:31,029 --> 00:32:33,879
the first four kilobits of that well as

00:32:32,559 --> 00:32:35,350
but we actually physically get out the

00:32:33,879 --> 00:32:40,059
first packet we've dumped straight into

00:32:35,350 --> 00:32:42,610
the kernel and I think I said you keep

00:32:40,059 --> 00:32:45,669
you to start very very early so it's as

00:32:42,610 --> 00:32:47,919
soon as it's run the kernel has more

00:32:45,669 --> 00:32:50,139
than ever the problem was we we were

00:32:47,919 --> 00:32:51,970
always over feeding they're definitely

00:32:50,139 --> 00:32:53,649
difficult registers it was because of

00:32:51,970 --> 00:32:56,470
this problem of figuring out who wants

00:32:53,649 --> 00:32:57,789
entropy so we just if you just send 35

00:32:56,470 --> 00:32:58,809
kilobits a second straight into that

00:32:57,789 --> 00:33:01,029
pool at all times

00:32:58,809 --> 00:33:03,629
there's no no one will ever run out with

00:33:01,029 --> 00:33:03,629
the idea

00:33:08,200 --> 00:33:12,560
so I think what should be clear it's

00:33:10,760 --> 00:33:14,000
certainly clear to me is that just

00:33:12,560 --> 00:33:16,190
plugging a cute little piece of hardware

00:33:14,000 --> 00:33:17,660
into a USB spigot launching ETD doesn't

00:33:16,190 --> 00:33:19,400
completely solve the problem we have

00:33:17,660 --> 00:33:21,050
this issue of you know winter things

00:33:19,400 --> 00:33:23,240
being started in the system what's the

00:33:21,050 --> 00:33:25,700
state of the entry pool entropy pool at

00:33:23,240 --> 00:33:28,610
the time various PRN G's are getting

00:33:25,700 --> 00:33:30,230
seated and so forth and so I would hope

00:33:28,610 --> 00:33:32,900
that maybe part of what we end up

00:33:30,230 --> 00:33:34,790
talking about as we work through sort of

00:33:32,900 --> 00:33:36,320
what we got to do to you know develop

00:33:34,790 --> 00:33:37,730
this piece of hardware and have it

00:33:36,320 --> 00:33:40,070
become something lots of folks want to

00:33:37,730 --> 00:33:43,400
use is all those ancillary things of

00:33:40,070 --> 00:33:45,050
okay what issues do we have in the set

00:33:43,400 --> 00:33:47,090
of sort of normally launch daemons and

00:33:45,050 --> 00:33:48,440
should we be changing boot sequencing

00:33:47,090 --> 00:33:50,390
are the things that ought to be kicked

00:33:48,440 --> 00:33:51,860
sometime later I'd love to see all of

00:33:50,390 --> 00:33:54,440
those things kind of get worked on in

00:33:51,860 --> 00:33:56,030
parallel it's not enough to just you

00:33:54,440 --> 00:34:03,410
know how these are run inject more

00:33:56,030 --> 00:34:04,820
entropy so I actually have no idea

00:34:03,410 --> 00:34:08,120
whether or not this has been thought

00:34:04,820 --> 00:34:11,630
about but have have anybody put any work

00:34:08,120 --> 00:34:13,940
into coming up with a standard USB

00:34:11,630 --> 00:34:16,580
protocol for these types of devices so

00:34:13,940 --> 00:34:19,070
we could have a single driver that gets

00:34:16,580 --> 00:34:20,419
loaded immediately if I was up the USB

00:34:19,070 --> 00:34:22,429
device don't have to worry about demons

00:34:20,419 --> 00:34:29,120
or anything like that and get randomness

00:34:22,429 --> 00:34:31,310
right off the bat I believe one of the

00:34:29,120 --> 00:34:33,230
bsts I can't really chew on actually

00:34:31,310 --> 00:34:36,110
difficult implementation of the icky

00:34:33,230 --> 00:34:37,580
protocol in order to achieve that so

00:34:36,110 --> 00:34:39,770
that they could hold off kernel boot

00:34:37,580 --> 00:34:42,080
beyond starting the USB stack and

00:34:39,770 --> 00:34:44,600
finding an entropy key

00:34:42,080 --> 00:34:46,490
they couldn't authenticate to the key

00:34:44,600 --> 00:34:48,280
but they could use it for sufficient

00:34:46,490 --> 00:34:50,210
entropy to get that system digital

00:34:48,280 --> 00:34:52,700
that's one of the things that we've been

00:34:50,210 --> 00:34:54,140
thinking about it so a way for the

00:34:52,700 --> 00:34:55,250
kernel to be able to trust the key and

00:34:54,140 --> 00:34:57,170
how to do that it's kind of tricky

00:34:55,250 --> 00:34:59,420
because you know that it's physically

00:34:57,170 --> 00:35:01,070
connected and it's USB and there's all

00:34:59,420 --> 00:35:03,620
these sorts of things but you know we

00:35:01,070 --> 00:35:05,390
have a yes on the chip and you know

00:35:03,620 --> 00:35:08,390
there's some problem perhaps some clever

00:35:05,390 --> 00:35:10,100
things that we could do to you know

00:35:08,390 --> 00:35:11,080
secure the actual communications between

00:35:10,100 --> 00:35:14,050
the key and a

00:35:11,080 --> 00:35:16,090
and the colonel but you're right it's

00:35:14,050 --> 00:35:18,760
really gonna be interesting to see you

00:35:16,090 --> 00:35:20,170
know how big of a delay is that if we

00:35:18,760 --> 00:35:23,770
would make certain things wait for

00:35:20,170 --> 00:35:25,300
entropy to come online and you know we

00:35:23,770 --> 00:35:28,480
could profile that and get that time

00:35:25,300 --> 00:35:31,750
down there is actually been a little bit

00:35:28,480 --> 00:35:34,480
of interest in doing that with a special

00:35:31,750 --> 00:35:37,000
target for system B so I mean some

00:35:34,480 --> 00:35:39,790
people were saying system they can

00:35:37,000 --> 00:35:42,120
probably solve that problem and it can

00:35:39,790 --> 00:35:45,250
at least help a little bit with it and

00:35:42,120 --> 00:35:47,710
the other thing is if you use socket

00:35:45,250 --> 00:35:49,690
activation for a stage then your SSH

00:35:47,710 --> 00:35:52,480
daemon is likely to start better later

00:35:49,690 --> 00:35:55,360
which means that you actually won't rent

00:35:52,480 --> 00:36:00,700
enter the problem which was shown on the

00:35:55,360 --> 00:36:02,170
graph one thing that we did face when we

00:36:00,700 --> 00:36:05,980
did this the first time you know where

00:36:02,170 --> 00:36:08,230
we put the key D out there was there is

00:36:05,980 --> 00:36:09,520
a very within the sysadmin community

00:36:08,230 --> 00:36:10,210
there's this thought that this just

00:36:09,520 --> 00:36:12,190
doesn't matter

00:36:10,210 --> 00:36:15,250
yeah you've produced a very good

00:36:12,190 --> 00:36:17,530
presentation with all the papers and the

00:36:15,250 --> 00:36:19,480
majority of people who don't get it

00:36:17,530 --> 00:36:23,470
immediately will turn around to you and

00:36:19,480 --> 00:36:26,590
say I can just use UI they literally

00:36:23,470 --> 00:36:28,210
just link you random to dev random and I

00:36:26,590 --> 00:36:32,890
mean if it's coming or if they look

00:36:28,210 --> 00:36:34,930
random right that is exactly that's

00:36:32,890 --> 00:36:37,930
exactly the result that's exactly what

00:36:34,930 --> 00:36:40,090
you get told so it's more of a and I got

00:36:37,930 --> 00:36:41,800
taught that from you know I'm implement

00:36:40,090 --> 00:36:44,110
in this within Debian and I get told

00:36:41,800 --> 00:36:46,690
that a lot from a lot of you get a lot

00:36:44,110 --> 00:36:47,890
of pushback so just be aware that when

00:36:46,690 --> 00:36:49,930
you come to do that you're going to get

00:36:47,890 --> 00:36:53,010
a lot of its political and the social

00:36:49,930 --> 00:36:59,830
thing are all bits look random until

00:36:53,010 --> 00:37:00,970
October not again want to go back to one

00:36:59,830 --> 00:37:03,100
of your comments about needing to be

00:37:00,970 --> 00:37:04,720
able to monitor and understand the

00:37:03,100 --> 00:37:08,560
quality of what you're getting off these

00:37:04,720 --> 00:37:10,330
devices it's exceedingly hard to measure

00:37:08,560 --> 00:37:12,670
true randomness you at the moment you

00:37:10,330 --> 00:37:13,810
have done any processing on those bits

00:37:12,670 --> 00:37:17,260
yes that's correct

00:37:13,810 --> 00:37:19,480
and so we within the entropy key we had

00:37:17,260 --> 00:37:21,810
two generators and we were actually

00:37:19,480 --> 00:37:23,940
doing analyses

00:37:21,810 --> 00:37:27,960
the bitstream that was coming off each

00:37:23,940 --> 00:37:29,700
generator do the xor ring of the two

00:37:27,960 --> 00:37:33,690
bitstreams in order to do correlation

00:37:29,700 --> 00:37:35,460
analysis then we were doing D biasing of

00:37:33,690 --> 00:37:37,350
the bitstreams this will be producing a

00:37:35,460 --> 00:37:39,060
very biased bit string there's no two

00:37:37,350 --> 00:37:40,920
ways about it it's an electric circuit

00:37:39,060 --> 00:37:42,240
if you do a nice bit stream of widening

00:37:40,920 --> 00:37:43,680
algorithm on the chip

00:37:42,240 --> 00:37:46,800
so there's there's bias there's D

00:37:43,680 --> 00:37:51,170
biasing to whine then you have to

00:37:46,800 --> 00:37:53,400
analyze that then then we would mix and

00:37:51,170 --> 00:37:54,930
be analyzing at that point but the

00:37:53,400 --> 00:37:57,030
moment you start to mix you need to

00:37:54,930 --> 00:37:59,790
switch from the algorithms designed to

00:37:57,030 --> 00:38:01,860
monitor the quality of entropy in random

00:37:59,790 --> 00:38:03,390
streams to the algorithms designed to

00:38:01,860 --> 00:38:05,520
monitor the quality of pseudo-random

00:38:03,390 --> 00:38:07,140
strips yes because the moment you have

00:38:05,520 --> 00:38:09,450
software performing operations on it

00:38:07,140 --> 00:38:11,280
you're actually behaving like a

00:38:09,450 --> 00:38:12,750
pseudo-random generator not like a tree

00:38:11,280 --> 00:38:14,580
random number generator and that's fine

00:38:12,750 --> 00:38:18,000
you just don't know to switch out the

00:38:14,580 --> 00:38:21,990
rhythms for monitoring 140 - 2 is a very

00:38:18,000 --> 00:38:23,970
weird thing because it behaves a bit

00:38:21,990 --> 00:38:27,150
like it's monitoring a true random

00:38:23,970 --> 00:38:29,610
generator but the algorithms are keyed

00:38:27,150 --> 00:38:31,290
more towards pseudo-random generation so

00:38:29,610 --> 00:38:33,840
on the entropy Keys we were performing

00:38:31,290 --> 00:38:37,490
the FIPS 140-2 monitoring after we were

00:38:33,840 --> 00:38:40,440
mixing things into a hashing state so

00:38:37,490 --> 00:38:42,480
this this again we'll talk about this a

00:38:40,440 --> 00:38:44,610
little bit more later but it's really

00:38:42,480 --> 00:38:46,290
worth having 2 generators because you

00:38:44,610 --> 00:38:49,620
really need them for what you can trust

00:38:46,290 --> 00:38:54,060
okay fantastic stealer do you want a

00:38:49,620 --> 00:38:55,400
system yeah as an example of how people

00:38:54,060 --> 00:38:59,520
don't get this

00:38:55,400 --> 00:39:01,620
there was a long open bug in launchpad

00:38:59,520 --> 00:39:03,810
that a number of us have followed up -

00:39:01,620 --> 00:39:05,940
were there was a wishlist bug owned

00:39:03,810 --> 00:39:10,950
against thee was it the hardware our

00:39:05,940 --> 00:39:12,990
details package specifically asking

00:39:10,950 --> 00:39:17,700
people to basically to plug in

00:39:12,990 --> 00:39:19,530
Debu random as a default at which point

00:39:17,700 --> 00:39:23,930
so you know

00:39:19,530 --> 00:39:26,700
and a whole slew of people trying to

00:39:23,930 --> 00:39:27,990
chime in to explain to the pizza the

00:39:26,700 --> 00:39:30,530
person who asked for this in the first

00:39:27,990 --> 00:39:32,700
place why it was about a bad idea and

00:39:30,530 --> 00:39:34,380
we're not trying to be condescending

00:39:32,700 --> 00:39:36,150
we're not trying to tell you you're

00:39:34,380 --> 00:39:39,590
stupid we're trying to explain to you

00:39:36,150 --> 00:39:41,610
why this is a bad idea no matter how

00:39:39,590 --> 00:39:44,220
expedient you think it might be at the

00:39:41,610 --> 00:39:47,930
moment so it doesn't if you go and get

00:39:44,220 --> 00:39:52,470
yourself a very very quick PGP key of

00:39:47,930 --> 00:39:54,570
generation if you're using PGP without

00:39:52,470 --> 00:39:55,740
useful randomness you may as well not

00:39:54,570 --> 00:39:59,160
bother in the first place but people

00:39:55,740 --> 00:40:01,650
don't get this that's that's it that's a

00:39:59,160 --> 00:40:07,860
really good point is the education here

00:40:01,650 --> 00:40:09,690
is not not trivial I mean so yes I

00:40:07,860 --> 00:40:15,030
suspect we're going to run into a lot of

00:40:09,690 --> 00:40:17,040
pushback so I think it depends I think

00:40:15,030 --> 00:40:18,840
if you feel that it's necessary to

00:40:17,040 --> 00:40:20,520
convince everybody else out there

00:40:18,840 --> 00:40:22,530
running any kind of service that they

00:40:20,520 --> 00:40:24,300
need to care about this then you have an

00:40:22,530 --> 00:40:26,970
incredible piece of rope to try and push

00:40:24,300 --> 00:40:29,670
on the other hand I have this the sense

00:40:26,970 --> 00:40:33,200
that if we come up with a useful piece

00:40:29,670 --> 00:40:36,270
of hardware that generates you know real

00:40:33,200 --> 00:40:39,240
entropy and we can make it inexpensive

00:40:36,270 --> 00:40:41,580
enough and we do the sort of cool thing

00:40:39,240 --> 00:40:43,740
of running your kickstarter your kind of

00:40:41,580 --> 00:40:45,870
campaign on it and we get sort of the

00:40:43,740 --> 00:40:48,690
right people in our extended community

00:40:45,870 --> 00:40:49,920
to go point at it go wow this is cool

00:40:48,690 --> 00:40:52,110
whether you understand it or not you

00:40:49,920 --> 00:40:53,760
really want one of these then it might

00:40:52,110 --> 00:40:56,610
very well be the case that you know we

00:40:53,760 --> 00:40:59,160
make enough of a positive effect on sort

00:40:56,610 --> 00:41:01,980
of the community of collaborators that

00:40:59,160 --> 00:41:04,470
we really care about a lot that it's

00:41:01,980 --> 00:41:06,990
worth doing and not just for our own

00:41:04,470 --> 00:41:08,130
servers but it actually has makes some

00:41:06,990 --> 00:41:10,470
kind of dent out there

00:41:08,130 --> 00:41:12,300
and whether that you know eventually

00:41:10,470 --> 00:41:13,860
leads to more people understanding the

00:41:12,300 --> 00:41:15,450
problem caring about it I don't know I

00:41:13,860 --> 00:41:18,240
don't know how to solve that problem but

00:41:15,450 --> 00:41:19,650
I don't get too hung up over the fact

00:41:18,240 --> 00:41:21,600
that you know not everybody's gonna

00:41:19,650 --> 00:41:24,180
believe it or want it or care about it

00:41:21,600 --> 00:41:26,160
there's certainly reasons you'd like to

00:41:24,180 --> 00:41:27,690
be able to convince people I'd love to

00:41:26,160 --> 00:41:30,450
be able to convince certain server

00:41:27,690 --> 00:41:32,190
hardware manufacturers for example to

00:41:30,450 --> 00:41:33,840
think that getting this right somewhere

00:41:32,190 --> 00:41:34,910
on one other circuit boards was the

00:41:33,840 --> 00:41:39,930
right answer

00:41:34,910 --> 00:41:42,120
no whatsoever Tom I was just thinking

00:41:39,930 --> 00:41:43,890
about Tallis case and that you know he

00:41:42,120 --> 00:41:46,320
was distributing entropy - you know

00:41:43,890 --> 00:41:48,450
servers in the cloud and because of this

00:41:46,320 --> 00:41:50,580
SSH problem you know it's sort of a

00:41:48,450 --> 00:41:53,640
chicken and egg problem but if you

00:41:50,580 --> 00:41:56,010
decided to delay SSH start until the

00:41:53,640 --> 00:41:58,380
kernel was sure and we trust the kernels

00:41:56,010 --> 00:42:00,480
judgment that it has enough entropy to

00:41:58,380 --> 00:42:01,650
see those keys so your startup is a

00:42:00,480 --> 00:42:03,000
little bit slower when you start

00:42:01,650 --> 00:42:05,070
something up in the cloud until you get

00:42:03,000 --> 00:42:07,370
enough entropy that then you as SSH

00:42:05,070 --> 00:42:11,610
could be trusted then you could tunnel a

00:42:07,370 --> 00:42:14,690
faster entropy stream in there also was

00:42:11,610 --> 00:42:17,280
somewhere at some point to do a qmu

00:42:14,690 --> 00:42:19,470
device so you could actually just do

00:42:17,280 --> 00:42:21,630
this through Bart wrote I oh I'm not

00:42:19,470 --> 00:42:25,190
entirely sure what were that ended up

00:42:21,630 --> 00:42:31,410
going but I'm sure winds can tell us

00:42:25,190 --> 00:42:36,180
believe it was in multiple that was

00:42:31,410 --> 00:42:37,440
working on that no Ian Ian wrote the

00:42:36,180 --> 00:42:39,120
driver wrote a set of drivers for that I

00:42:37,440 --> 00:42:44,850
don't think it ever made it all the way

00:42:39,120 --> 00:42:49,160
upstream sorry yeah it got presented and

00:42:44,850 --> 00:42:52,170
the queue Mew people specifically Paul

00:42:49,160 --> 00:42:52,920
forget surnames oh and a couple of

00:42:52,170 --> 00:42:55,190
theirs

00:42:52,920 --> 00:42:58,260
basically turn around and decided on

00:42:55,190 --> 00:43:01,500
path everybody that Kim you didn't want

00:42:58,260 --> 00:43:03,690
to be an EGD client ever so they refused

00:43:01,500 --> 00:43:05,730
all the patches point blank and it was

00:43:03,690 --> 00:43:07,410
at the time you know suddenly they were

00:43:05,730 --> 00:43:10,830
queuing he was not being developed quite

00:43:07,410 --> 00:43:11,600
as much as we might like so I don't know

00:43:10,830 --> 00:43:14,930
whether there's

00:43:11,600 --> 00:43:17,540
the format of accepting things in Cuba

00:43:14,930 --> 00:43:18,950
is improved but that's that's what

00:43:17,540 --> 00:43:21,470
happened to that patch there's you know

00:43:18,950 --> 00:43:28,180
and I tried for some time to get quite a

00:43:21,470 --> 00:43:28,180
lot of that push forward as well okay

00:43:29,350 --> 00:43:35,570
yeah it's I so I seem to remember that

00:43:33,380 --> 00:43:37,220
actually they didn't like the patch and

00:43:35,570 --> 00:43:39,440
then ended up reimplemented it

00:43:37,220 --> 00:43:42,020
completely differently but there is some

00:43:39,440 --> 00:43:45,040
support for giving you an PCI device

00:43:42,020 --> 00:43:45,040
which is an orangey

00:43:51,870 --> 00:44:00,980
Jimmy did you have a question I was just

00:43:58,110 --> 00:44:04,080
going to respond to Beatles point about

00:44:00,980 --> 00:44:07,380
gaining acceptance of the value of this

00:44:04,080 --> 00:44:09,000
I was gonna say that you know even if

00:44:07,380 --> 00:44:12,300
they're still education needed I think

00:44:09,000 --> 00:44:17,250
that it's probably a little bit easier

00:44:12,300 --> 00:44:18,750
to make people trade you know make their

00:44:17,250 --> 00:44:21,540
trade offs in favor of security a little

00:44:18,750 --> 00:44:23,820
bit more than it was a few years ago now

00:44:21,540 --> 00:44:28,860
that everyone's more aware of the

00:44:23,820 --> 00:44:32,100
surveillance date and they're at least

00:44:28,860 --> 00:44:35,520
more open to hearing the usual ways that

00:44:32,100 --> 00:44:38,460
you do security have this big flaw that

00:44:35,520 --> 00:44:41,220
you're not noticing and so it's

00:44:38,460 --> 00:44:45,410
dedication but it's the push back volume

00:44:41,220 --> 00:44:50,970
may be a little bit more amenable to

00:44:45,410 --> 00:45:00,140
positive feedback loop overcoming it so

00:44:50,970 --> 00:45:00,140
I think that we're out of time okay

00:45:04,700 --> 00:45:11,520
are there other questions good I said a

00:45:08,280 --> 00:45:14,160
couple general crypto questions I think

00:45:11,520 --> 00:45:16,530
I heard at one point that the trusted

00:45:14,160 --> 00:45:19,110
platform module has a hardware RNG built

00:45:16,530 --> 00:45:20,490
into it does anybody wear that and

00:45:19,110 --> 00:45:22,260
that's a maybe a good segue to my next

00:45:20,490 --> 00:45:24,630
question is is what if you have a

00:45:22,260 --> 00:45:26,220
hardware random number generator but you

00:45:24,630 --> 00:45:29,100
want to mitigate your risk because you

00:45:26,220 --> 00:45:30,720
don't completely trust it is there

00:45:29,100 --> 00:45:32,400
consensus in the cocoa community that

00:45:30,720 --> 00:45:35,160
mixing is enough to do that okay I've

00:45:32,400 --> 00:45:38,360
got an idea this has an idea there's no

00:45:35,160 --> 00:45:38,360
one here so who wants to go next

00:45:43,119 --> 00:45:46,060
if you have a good source of random

00:45:44,619 --> 00:45:48,369
numbers you can mix it with something

00:45:46,060 --> 00:45:53,020
that you know is untrustworthy and it's

00:45:48,369 --> 00:45:59,170
probably fine yep that's pretty good

00:45:53,020 --> 00:46:05,770
what I was going to say I don't have any

00:45:59,170 --> 00:46:09,609
opinions about TPM I guess regardless of

00:46:05,770 --> 00:46:12,250
TPM or not there's a mechanism within at

00:46:09,609 --> 00:46:15,520
least an external mixing process to

00:46:12,250 --> 00:46:19,540
allow you to state when you hand over X

00:46:15,520 --> 00:46:23,710
bits of data that it only has Y amount

00:46:19,540 --> 00:46:25,810
of entropy value in it and in fact an e

00:46:23,710 --> 00:46:27,670
key be by default for every eight bits

00:46:25,810 --> 00:46:31,780
of data at hands over only claims seven

00:46:27,670 --> 00:46:34,080
bits of value therefore if you have a

00:46:31,780 --> 00:46:37,780
random stream that you believe to be

00:46:34,080 --> 00:46:40,540
okay you can but it's really high speed

00:46:37,780 --> 00:46:41,619
you could give it for K at a time and

00:46:40,540 --> 00:46:42,880
tell it there's only a hundred and

00:46:41,619 --> 00:46:46,300
twenty eight bits of entropy in there

00:46:42,880 --> 00:46:49,180
and like Rob says as long as there is

00:46:46,300 --> 00:46:50,800
some true entropy in there a good mixing

00:46:49,180 --> 00:46:53,200
algorithm and the Linux kernel one's

00:46:50,800 --> 00:46:54,460
pretty good it's not the best but it's

00:46:53,200 --> 00:46:57,970
pretty good couldn't and it's reasonably

00:46:54,460 --> 00:47:01,480
fast we'll spread that entropy out such

00:46:57,970 --> 00:47:03,310
that every bit of it's possible output

00:47:01,480 --> 00:47:07,380
has been affected by every possible

00:47:03,310 --> 00:47:07,380
input entropy Shannon

00:47:10,180 --> 00:47:14,420
one of the things that I I found in

00:47:12,800 --> 00:47:16,880
researching this was that there is an

00:47:14,420 --> 00:47:19,070
interesting relatively newer peer ng

00:47:16,880 --> 00:47:21,170
algorithm called Fortuna that didn't

00:47:19,070 --> 00:47:24,640
make it into the kernel and I didn't

00:47:21,170 --> 00:47:24,640
really find out why does anyone know

00:47:28,440 --> 00:47:36,170
just curious about the you know learn

00:47:30,960 --> 00:47:39,119
more about them Fortuna is a PRNG right

00:47:36,170 --> 00:47:40,680
so the idea is is that you can top it up

00:47:39,119 --> 00:47:42,450
with some real entropy you have right

00:47:40,680 --> 00:47:44,309
and then it satisfies all your requests

00:47:42,450 --> 00:47:47,130
from that so it's basically like Debu

00:47:44,309 --> 00:47:47,940
random the freebsd people and so on they

00:47:47,130 --> 00:47:50,730
use Fortuna

00:47:47,940 --> 00:47:52,769
I think OS X oops yeah if yarrow is the

00:47:50,730 --> 00:47:54,509
predecessor to the Fortuna fortune is

00:47:52,769 --> 00:47:56,039
justice of like a tweak on it well it is

00:47:54,509 --> 00:47:57,660
it is basically PRNG that you

00:47:56,039 --> 00:48:00,509
occasionally recede as you have data

00:47:57,660 --> 00:48:02,670
available whereas dev random is I'm sure

00:48:00,509 --> 00:48:05,160
these are actually random it's very very

00:48:02,670 --> 00:48:06,539
well I mean if you go shopping for PR

00:48:05,160 --> 00:48:08,069
and G's that we could talk about

00:48:06,539 --> 00:48:09,660
different qualities of here energies my

00:48:08,069 --> 00:48:13,940
understanding is Fortuna is probably

00:48:09,660 --> 00:48:21,289
better than earlier implementations

00:48:13,940 --> 00:48:21,289
wolfish all I do know is that the return

00:48:22,880 --> 00:48:30,059
video stream in that regard what about

00:48:26,369 --> 00:48:31,619
have GED I have that installed but I

00:48:30,059 --> 00:48:33,359
also have any key D then I'm mixing

00:48:31,619 --> 00:48:35,099
things in and enough anybody's looked at

00:48:33,359 --> 00:48:36,390
that one specifically but you know your

00:48:35,099 --> 00:48:39,920
apt-get install and you immediately have

00:48:36,390 --> 00:48:39,920
on Sentra P but

00:48:46,310 --> 00:48:53,150
that 31 friends random sound

00:48:54,530 --> 00:48:58,710
mercury-arc

00:48:56,240 --> 00:49:00,630
I've been reminded so this is an apology

00:48:58,710 --> 00:49:02,700
I did write a piece of software a while

00:49:00,630 --> 00:49:04,590
ago called random sound it did make it

00:49:02,700 --> 00:49:05,900
into the archive I think it was that was

00:49:04,590 --> 00:49:09,090
Steve Gran's fault

00:49:05,900 --> 00:49:11,700
everyone can blame him which was based

00:49:09,090 --> 00:49:14,730
around the idea that if you had an audio

00:49:11,700 --> 00:49:17,340
input that was one that you could set to

00:49:14,730 --> 00:49:19,800
be a tri-state input then you could use

00:49:17,340 --> 00:49:21,690
the noise around that circuit as a

00:49:19,800 --> 00:49:23,550
source of entropy or just use the lower

00:49:21,690 --> 00:49:28,830
bits from their idiocy and you'll be

00:49:23,550 --> 00:49:30,750
fine right no and it would produce a

00:49:28,830 --> 00:49:32,670
very high high speed stream of data but

00:49:30,750 --> 00:49:41,580
frankly I would trust it to be about one

00:49:32,670 --> 00:49:44,100
Shannon in 128 Meg's oh yeah yeah the

00:49:41,580 --> 00:49:45,930
radio one the comm anywhere we were not

00:49:44,100 --> 00:49:48,300
shaking our heads the problem with

00:49:45,930 --> 00:49:50,040
anything that like that is that an

00:49:48,300 --> 00:49:53,100
attacker can put a coil of wire around

00:49:50,040 --> 00:49:53,670
your input and attack it very

00:49:53,100 --> 00:49:55,740
effectively

00:49:53,670 --> 00:49:57,180
well those sort of requests go out first

00:49:55,740 --> 00:49:58,290
though right right but physical access

00:49:57,180 --> 00:49:59,930
is something you need to mitigate

00:49:58,290 --> 00:50:03,109
against when you have a physical device

00:49:59,930 --> 00:50:03,109
in do

00:50:06,480 --> 00:50:11,640
yesBut and and the the but part is just

00:50:09,730 --> 00:50:14,320
that at some point you have to decide

00:50:11,640 --> 00:50:16,300
how far you gonna go with that I mean

00:50:14,320 --> 00:50:18,940
anything that depends on thermal noise

00:50:16,300 --> 00:50:20,770
has you know the potential of being

00:50:18,940 --> 00:50:22,420
driven very far in one direction or the

00:50:20,770 --> 00:50:24,280
other with you know the application of a

00:50:22,420 --> 00:50:28,270
suitable to err of liquid nitrogen and

00:50:24,280 --> 00:50:31,450
or a blowtorch so I'm sorry I'm not

00:50:28,270 --> 00:50:33,339
kidding I mean it really is the case

00:50:31,450 --> 00:50:35,230
that if you care about this at that

00:50:33,339 --> 00:50:36,670
level then you do have to physically

00:50:35,230 --> 00:50:38,220
protect the devices and you have to

00:50:36,670 --> 00:50:40,390
think about the right way to do that and

00:50:38,220 --> 00:50:42,310
you know the thing about a completely

00:50:40,390 --> 00:50:43,990
open design that's reflash shovel is you

00:50:42,310 --> 00:50:45,730
also have to think about you know the

00:50:43,990 --> 00:50:48,130
consequences of how do you want to

00:50:45,730 --> 00:50:49,960
secure that you know is this an example

00:50:48,130 --> 00:50:51,460
of a completely open device that we

00:50:49,960 --> 00:50:55,630
ought to flip the bit on that says you

00:50:51,460 --> 00:50:57,369
can't USB reflash it this is wait Tom

00:50:55,630 --> 00:50:59,410
and I had a very serious conversation on

00:50:57,369 --> 00:51:01,660
IRC one night about you know should you

00:50:59,410 --> 00:51:03,040
ever let someone other than one of the

00:51:01,660 --> 00:51:05,080
three of us have one of these devices

00:51:03,040 --> 00:51:07,089
that they can reflash over USB without

00:51:05,080 --> 00:51:10,119
having to go get a programming dongle

00:51:07,089 --> 00:51:11,680
and put it on you know the in wire pin

00:51:10,119 --> 00:51:14,230
these are these are interesting

00:51:11,680 --> 00:51:17,020
questions it's not like there's a single

00:51:14,230 --> 00:51:18,400
simple answer either but this is why I

00:51:17,020 --> 00:51:21,369
say when you start thinking about what

00:51:18,400 --> 00:51:23,170
potential attack surface is around

00:51:21,369 --> 00:51:25,720
something that's going to be as

00:51:23,170 --> 00:51:27,880
fundamental to your sense of the

00:51:25,720 --> 00:51:29,560
security of your system as the hardware

00:51:27,880 --> 00:51:30,849
random number generator you have to

00:51:29,560 --> 00:51:32,920
think about these things you have to

00:51:30,849 --> 00:51:34,750
make conscious decisions and you bloody

00:51:32,920 --> 00:51:36,040
well need to document what your thinking

00:51:34,750 --> 00:51:37,630
was so that everybody else that's

00:51:36,040 --> 00:51:39,369
looking at and thinking about using it

00:51:37,630 --> 00:51:41,109
or doing something with it understands

00:51:39,369 --> 00:51:43,839
what they're getting and to me that's

00:51:41,109 --> 00:51:45,670
part of why it's so absolutely vitally

00:51:43,839 --> 00:51:46,900
important that this time around what we

00:51:45,670 --> 00:51:48,670
do ends up being something's are

00:51:46,900 --> 00:51:50,109
completely open design it everybody can

00:51:48,670 --> 00:51:52,030
look at everybody can think about if

00:51:50,109 --> 00:51:54,430
somebody wants to create a better

00:51:52,030 --> 00:51:56,680
derivative of more power to them etc etc

00:51:54,430 --> 00:51:59,550
etc video can't you just put like a TPM

00:51:56,680 --> 00:51:59,550
chip right here

00:52:00,890 --> 00:52:05,710
so the house should have played it

00:52:03,079 --> 00:52:05,710
myself

00:52:06,510 --> 00:52:12,329
yeah you guys don't need to apologize in

00:52:10,740 --> 00:52:14,220
case you hadn't noticed lots of

00:52:12,329 --> 00:52:17,339
inspiration taken from the work done on

00:52:14,220 --> 00:52:20,010
the the Simtek entropy key and iki D and

00:52:17,339 --> 00:52:22,680
all those sorts of things mad props for

00:52:20,010 --> 00:52:26,339
we're gonna build on it I actually found

00:52:22,680 --> 00:52:28,530
one to buy LCA last you know January so

00:52:26,339 --> 00:52:31,109
that the ones I lost in the fire you

00:52:28,530 --> 00:52:33,900
know didn't leave me without and you

00:52:31,109 --> 00:52:35,760
know mad props this is all about you

00:52:33,900 --> 00:52:37,530
know what do we do now and how do we go

00:52:35,760 --> 00:52:40,050
forward how would make sure this kind of

00:52:37,530 --> 00:52:42,240
stuff becomes and remains available for

00:52:40,050 --> 00:52:44,460
those of us who need it did you have

00:52:42,240 --> 00:52:46,290
another comment throat ah I was just

00:52:44,460 --> 00:52:48,570
going to say that for these sort of

00:52:46,290 --> 00:52:51,060
attack of dipping it in liquid not the

00:52:48,570 --> 00:52:53,070
nitrogen or blowtorch the entropy had a

00:52:51,060 --> 00:53:00,619
temperature sensor so when no I'm too

00:52:53,070 --> 00:53:03,980
old numbers are rather be a feature

00:53:00,619 --> 00:53:03,980
feature creep

00:53:15,730 --> 00:53:19,079
with the question here

00:53:22,320 --> 00:53:26,109
apparently the temperature sensor is so

00:53:24,369 --> 00:53:27,760
good that my colleague uses it to

00:53:26,109 --> 00:53:36,460
monitor the temperature is house wise

00:53:27,760 --> 00:53:38,500
working life moment he's welcome but we

00:53:36,460 --> 00:53:40,480
certainly didn't think of created a a of

00:53:38,500 --> 00:53:47,980
creative hacks for other sensors that we

00:53:40,480 --> 00:54:03,099
could put on the board maybe we should

00:53:47,980 --> 00:54:09,880
put a webcam on it I'm sorry any other

00:54:03,099 --> 00:54:12,099
thoughts or questions Oh see so I never

00:54:09,880 --> 00:54:15,550
did get around to picking up enough

00:54:12,099 --> 00:54:19,630
entropy keys for my own users and now

00:54:15,550 --> 00:54:22,390
it's hard in the future when you go into

00:54:19,630 --> 00:54:27,089
series production with ease any idea on

00:54:22,390 --> 00:54:27,089
Pais what you think you can do it for

00:54:27,330 --> 00:54:39,369
that's up to the business department so

00:54:36,910 --> 00:54:41,530
the problem is that I've gotten very

00:54:39,369 --> 00:54:43,570
good at figuring out based on the raw

00:54:41,530 --> 00:54:45,550
bill of materials what I have to charge

00:54:43,570 --> 00:54:47,710
in order to be able to continue to

00:54:45,550 --> 00:54:50,230
operate a business and I our model

00:54:47,710 --> 00:54:52,359
rocketry world where there's a certain

00:54:50,230 --> 00:54:54,910
flavor of customer support that we have

00:54:52,359 --> 00:54:57,160
to engage in and there's a certain you

00:54:54,910 --> 00:55:00,310
know so turn on rate on the complex

00:54:57,160 --> 00:55:02,680
boards and by many measures this is a

00:55:00,310 --> 00:55:06,040
substantially simpler piece of hardware

00:55:02,680 --> 00:55:09,310
it is going to have a similarly complex

00:55:06,040 --> 00:55:12,220
you know bench verification for each

00:55:09,310 --> 00:55:14,230
unit before I would be willing to take

00:55:12,220 --> 00:55:18,580
money from somebody so I don't exactly

00:55:14,230 --> 00:55:22,359
the answer this is certainly in the it's

00:55:18,580 --> 00:55:24,220
in the sub $50 range us but how much

00:55:22,359 --> 00:55:25,990
below that I don't know certainly if we

00:55:24,220 --> 00:55:28,900
do a Kickstarter II kind of thing it'll

00:55:25,990 --> 00:55:31,030
be you know cost plus and then if we

00:55:28,900 --> 00:55:32,650
actually sell them for realsies after

00:55:31,030 --> 00:55:34,890
that and have to inventory them it'll be

00:55:32,650 --> 00:55:34,890
different

00:55:36,510 --> 00:55:44,099
yeah I cannot imagine ask okay if I know

00:55:41,230 --> 00:55:44,099
it'll cortex

00:55:49,130 --> 00:55:58,470
another pretty plastic box - will it be

00:55:53,220 --> 00:56:02,460
altered spectrum blue no because Hammond

00:55:58,470 --> 00:56:05,100
doesn't make a box in that white or

00:56:02,460 --> 00:56:08,190
black which is your choice well that is

00:56:05,100 --> 00:56:12,770
unless we can get Jeff to find us that

00:56:08,190 --> 00:56:12,770
color in the right spool for the printer

00:56:17,900 --> 00:56:22,320
that would be wonderful

00:56:19,890 --> 00:56:23,970
okay well I think we're about done we're

00:56:22,320 --> 00:56:26,780
done if we're talking about 3d printing

00:56:23,970 --> 00:56:26,780

YouTube URL: https://www.youtube.com/watch?v=eLjxvLOfau0


