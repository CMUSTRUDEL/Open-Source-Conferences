Title: debci and the Debian Continuous Integration project
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Antonio Terceiro

At: DebConf14
https://debconf14.debconf.org/
Room: Room 328
Scheduled start: 2014-08-28 14:30:00
Captions: 
	00:00:00,000 --> 00:00:07,200
I'm going to talk about the FCI and the

00:00:02,159 --> 00:00:09,750
Debian 14oz integration project in the

00:00:07,200 --> 00:00:13,049
beginning it was Auto packaged test so

00:00:09,750 --> 00:00:15,150
en Jackson created that in 2006 so it's

00:00:13,049 --> 00:00:18,570
quite a while ago and it's currently

00:00:15,150 --> 00:00:23,010
maintained by marching Pete as part of

00:00:18,570 --> 00:00:25,590
his job at canonical and then for a very

00:00:23,010 --> 00:00:28,170
long time we expected that somehow

00:00:25,590 --> 00:00:30,630
somewhere someone would be running

00:00:28,170 --> 00:00:33,570
running out the package tests for every

00:00:30,630 --> 00:00:35,309
package all the time and then it took a

00:00:33,570 --> 00:00:40,230
while to happen and then I decided to

00:00:35,309 --> 00:00:42,719
bite the bullet and try it so during the

00:00:40,230 --> 00:00:45,899
Christmas breaks last year I started to

00:00:42,719 --> 00:00:49,050
hack together solution it was very crude

00:00:45,899 --> 00:00:51,300
at the beginning very using the Navy

00:00:49,050 --> 00:00:52,890
morning solution for everything just

00:00:51,300 --> 00:00:56,789
make sure that I could get something

00:00:52,890 --> 00:00:59,370
that working and then I decided to make

00:00:56,789 --> 00:01:03,539
that public in January in the mean dev

00:00:59,370 --> 00:01:07,110
conference the UI was a mess and

00:01:03,539 --> 00:01:10,650
everything was very support

00:01:07,110 --> 00:01:13,619
optimal but then it was fine people got

00:01:10,650 --> 00:01:15,990
interested and I got excited about the

00:01:13,619 --> 00:01:18,479
project I mean then we get to the point

00:01:15,990 --> 00:01:20,240
on a pure to have true JSOC students

00:01:18,479 --> 00:01:23,640
working on the FCI

00:01:20,240 --> 00:01:25,439
which was very cool I will show some of

00:01:23,640 --> 00:01:27,659
the results here it was very nice to

00:01:25,439 --> 00:01:31,079
have them and they finish the work on

00:01:27,659 --> 00:01:32,880
our ghost but I think both are very

00:01:31,079 --> 00:01:35,939
excited and are probably going to stick

00:01:32,880 --> 00:01:39,840
with Damien work on the API in all the

00:01:35,939 --> 00:01:43,500
stuff so that's very nice and then this

00:01:39,840 --> 00:01:45,600
is the one of the first results of the

00:01:43,500 --> 00:01:50,579
one of the students is Brandon Fairchild

00:01:45,600 --> 00:01:54,149
he working on the web interface so the

00:01:50,579 --> 00:01:56,310
people who knew the earliest versions so

00:01:54,149 --> 00:01:58,049
that you depend on JavaScript for

00:01:56,310 --> 00:02:00,509
everything the you I wouldn't work at

00:01:58,049 --> 00:02:02,750
all without JavaScript and also there

00:02:00,509 --> 00:02:06,540
was several limitations like hard coding

00:02:02,750 --> 00:02:07,459
unstable / amd64 it's like the only

00:02:06,540 --> 00:02:10,560
known

00:02:07,459 --> 00:02:12,870
sweet active reset and then Brandon work

00:02:10,560 --> 00:02:13,250
on these to make sure the UI is the

00:02:12,870 --> 00:02:15,470
scale

00:02:13,250 --> 00:02:18,350
for multiple architectures and multiple

00:02:15,470 --> 00:02:20,990
Suites and that it can also be used with

00:02:18,350 --> 00:02:24,140
all JavaScript so there you have the

00:02:20,990 --> 00:02:26,120
initial page where you can browse the

00:02:24,140 --> 00:02:29,150
package by name you can use the search

00:02:26,120 --> 00:02:31,220
in a writing there's a sign use section

00:02:29,150 --> 00:02:33,410
on the left so everything that breaks

00:02:31,220 --> 00:02:36,350
and everything that um breaks is

00:02:33,410 --> 00:02:39,070
presented right there the home page so

00:02:36,350 --> 00:02:41,959
you can use the search box on the right

00:02:39,070 --> 00:02:43,700
and then you can also look at the

00:02:41,959 --> 00:02:46,670
history of a package on a given

00:02:43,700 --> 00:02:48,440
architecture so you said there are lots

00:02:46,670 --> 00:02:51,860
of data and everything the maintainer

00:02:48,440 --> 00:02:54,110
needs to or at least most of the things

00:02:51,860 --> 00:02:59,320
that a tenant needs to know what

00:02:54,110 --> 00:03:02,060
happened if the test and then you have

00:02:59,320 --> 00:03:07,100
started space with like a graph showing

00:03:02,060 --> 00:03:09,290
the evolution of this season so when the

00:03:07,100 --> 00:03:13,040
FCI started to run we had we had less

00:03:09,290 --> 00:03:14,720
than 200 packages with test suites as

00:03:13,040 --> 00:03:17,570
far as out of package tests understand

00:03:14,720 --> 00:03:19,450
so obviously more packaging that have

00:03:17,570 --> 00:03:24,080
test Suites but they were not integrated

00:03:19,450 --> 00:03:26,870
into the system and then now like H

00:03:24,080 --> 00:03:30,830
months later we have close to 600

00:03:26,870 --> 00:03:32,810
packages so like 400 packages in a

00:03:30,830 --> 00:03:38,420
little more than six months is very nice

00:03:32,810 --> 00:03:40,549
and I hope we can go close to the 20,000

00:03:38,420 --> 00:03:42,920
pesos package so this is sauce package

00:03:40,549 --> 00:03:50,180
so the outer package that is by source

00:03:42,920 --> 00:03:52,610
package and then here's the other G sub

00:03:50,180 --> 00:03:55,700
products by Lucas which is there in the

00:03:52,610 --> 00:03:57,709
back which is finding the package that I

00:03:55,700 --> 00:04:00,860
have broken tests with and fixing them

00:03:57,709 --> 00:04:04,010
so he he ported to last night more than

00:04:00,860 --> 00:04:08,720
20 bugs 12 of those were already closed

00:04:04,010 --> 00:04:11,420
and another one is pending so it was a

00:04:08,720 --> 00:04:13,220
very interesting work well we could

00:04:11,420 --> 00:04:15,290
understand what types of things were

00:04:13,220 --> 00:04:17,660
broken in test suite and be able to fix

00:04:15,290 --> 00:04:20,989
them so that they will keep working and

00:04:17,660 --> 00:04:22,520
an only break when they actual the

00:04:20,989 --> 00:04:23,690
actual functionality breaks and not

00:04:22,520 --> 00:04:27,310
because the

00:04:23,690 --> 00:04:31,490
doesn't match what the season expects

00:04:27,310 --> 00:04:34,040
and then it's important to having my

00:04:31,490 --> 00:04:36,620
distinction between Debbie CI and Debbie

00:04:34,040 --> 00:04:39,230
NCI so Deb sighs that is packaged in

00:04:36,620 --> 00:04:40,580
Debian is a solution to have a

00:04:39,230 --> 00:04:43,300
continuous integration solution

00:04:40,580 --> 00:04:46,280
integrated if a Debian archive will

00:04:43,300 --> 00:04:49,220
process the penances and know when to

00:04:46,280 --> 00:04:51,020
run tests based on when which package

00:04:49,220 --> 00:04:55,130
got uploaded since the last time it

00:04:51,020 --> 00:04:57,290
checked and so if your package has

00:04:55,130 --> 00:04:59,180
dependencies that got uploaded then your

00:04:57,290 --> 00:05:00,620
package will be retested again to make

00:04:59,180 --> 00:05:03,470
sure everything still works and then

00:05:00,620 --> 00:05:05,480
diversity is the Debian existence of the

00:05:03,470 --> 00:05:09,050
FCI running on Deb see I thought they

00:05:05,480 --> 00:05:10,850
were not net so to be honest Deb sighs

00:05:09,050 --> 00:05:12,650
she has some things that are hard coded

00:05:10,850 --> 00:05:15,920
for see I thought they were not net but

00:05:12,650 --> 00:05:21,650
the idea is to remove those hard-coded

00:05:15,920 --> 00:05:24,530
bits and be able to make that dinner so

00:05:21,650 --> 00:05:27,410
the ditching to now is myself marching

00:05:24,530 --> 00:05:29,750
pitch he is the Debian Ubuntu developer

00:05:27,410 --> 00:05:32,450
working for canonical and then the shoe

00:05:29,750 --> 00:05:34,400
chuseok students Brandon and Lucas which

00:05:32,450 --> 00:05:36,220
you hopefully stick with us for the

00:05:34,400 --> 00:05:39,980
future

00:05:36,220 --> 00:05:43,010
so there are several ways to help so you

00:05:39,980 --> 00:05:46,400
can there's a obvious ways like singing

00:05:43,010 --> 00:05:47,990
bug reports and sending patches you can

00:05:46,400 --> 00:05:50,120
also fix broken tests which they make

00:05:47,990 --> 00:05:52,370
sure the test Suites okay and it's only

00:05:50,120 --> 00:05:55,100
going to gonna fail if there is an

00:05:52,370 --> 00:05:57,230
actual problem with the package you can

00:05:55,100 --> 00:05:59,960
add that switch to your package too so

00:05:57,230 --> 00:06:02,450
that we will know if the package breaks

00:05:59,960 --> 00:06:05,480
in the future and also if you have

00:06:02,450 --> 00:06:08,510
harder to spare especially no Mac 36

00:06:05,480 --> 00:06:10,910
hardware is probably which we very

00:06:08,510 --> 00:06:12,740
useful and then we you can talk to me

00:06:10,910 --> 00:06:15,260
and we can coordinate with DSA to get

00:06:12,740 --> 00:06:18,500
that they have the Debian maintained by

00:06:15,260 --> 00:06:21,380
Debian C's admin team and then we can

00:06:18,500 --> 00:06:25,750
have different architectures then MD 64

00:06:21,380 --> 00:06:28,550
which is everyone has all the time

00:06:25,750 --> 00:06:32,180
so speaking of earlier about the dev

00:06:28,550 --> 00:06:34,190
site architecture so technology we use

00:06:32,180 --> 00:06:35,460
is auto package says plus its back-end

00:06:34,190 --> 00:06:38,370
so

00:06:35,460 --> 00:06:40,800
Deb CIA doesn't deal with the helm of

00:06:38,370 --> 00:06:42,509
how to package that so everything the

00:06:40,800 --> 00:06:43,800
test run and everything is done by auto

00:06:42,509 --> 00:06:45,810
package tests in depth I just

00:06:43,800 --> 00:06:48,150
coordinates really from the archive in

00:06:45,810 --> 00:06:49,770
knowing and knowing when to run tests

00:06:48,150 --> 00:06:52,169
and then collecting the results and

00:06:49,770 --> 00:06:54,990
presenting live in the web UI so it's

00:06:52,169 --> 00:06:56,669
written in Ruby on shell so we I saw the

00:06:54,990 --> 00:06:59,100
with shell but then things got

00:06:56,669 --> 00:07:01,979
complicated and you not you're not able

00:06:59,100 --> 00:07:06,680
to keep programming stuff it shell at

00:07:01,979 --> 00:07:10,199
some point it has a desk suite itself so

00:07:06,680 --> 00:07:16,470
dogfooding for the wing so we know if

00:07:10,199 --> 00:07:19,560
the API itself breaks and then how it

00:07:16,470 --> 00:07:22,770
works now so everything was done like in

00:07:19,560 --> 00:07:25,740
the very simplest way to make sure just

00:07:22,770 --> 00:07:27,419
to make it work so it's all happens in a

00:07:25,740 --> 00:07:31,260
single node so that you have dev CI

00:07:27,419 --> 00:07:34,759
batch which is the process that runs it

00:07:31,260 --> 00:07:38,220
runs every six hours to match the the

00:07:34,759 --> 00:07:41,400
install runs so it runs like three hours

00:07:38,220 --> 00:07:43,740
after the install and then it will check

00:07:41,400 --> 00:07:45,570
which packets need to be run put that in

00:07:43,740 --> 00:07:47,820
the list and then call dev site tests

00:07:45,570 --> 00:07:49,860
for each package website as will run the

00:07:47,820 --> 00:07:52,440
packages the test with auto package

00:07:49,860 --> 00:07:54,870
tests and then I store the results in

00:07:52,440 --> 00:07:57,180
that store so the interesting thing is

00:07:54,870 --> 00:07:58,889
that we have six the beginning which

00:07:57,180 --> 00:08:00,599
changes the they store should be

00:07:58,889 --> 00:08:03,270
obtained only so you can always just

00:08:00,599 --> 00:08:06,270
obtain new tests and then Debbie I

00:08:03,270 --> 00:08:08,729
generate index you take those results in

00:08:06,270 --> 00:08:11,880
generate what you see in the web UI so

00:08:08,729 --> 00:08:13,770
that's the HTML content the JSON data

00:08:11,880 --> 00:08:17,400
files you can use for any type of

00:08:13,770 --> 00:08:20,159
automation and all kinds of stuff but

00:08:17,400 --> 00:08:21,960
then that design he textured obsolete

00:08:20,159 --> 00:08:24,530
doesn't scale because it's all in the

00:08:21,960 --> 00:08:30,080
single node and we need something better

00:08:24,530 --> 00:08:30,080
so for the future we have very nice

00:08:30,289 --> 00:08:36,150
opportunities first incoming dot dot org

00:08:33,029 --> 00:08:38,640
is now public so you can have the

00:08:36,150 --> 00:08:41,880
package that just built it was just

00:08:38,640 --> 00:08:44,610
beautiful beauties installed so I will

00:08:41,880 --> 00:08:46,470
include reading package from incoming so

00:08:44,610 --> 00:08:48,210
we don't need to wait for the install we

00:08:46,470 --> 00:08:52,280
can run like every 10 minutes and know

00:08:48,210 --> 00:08:54,300
when packages got uploaded we need

00:08:52,280 --> 00:08:57,750
disability worker nodes to be able to

00:08:54,300 --> 00:09:00,150
scale out with more CPU power and then

00:08:57,750 --> 00:09:01,980
we also have started a conversation with

00:09:00,150 --> 00:09:04,290
VSA to move this into dimensional

00:09:01,980 --> 00:09:06,770
structure to not the opinion on why

00:09:04,290 --> 00:09:09,810
should not depend on myself forever so

00:09:06,770 --> 00:09:13,560
the future looks good so my idea is to

00:09:09,810 --> 00:09:16,410
move to something like this so the gray

00:09:13,560 --> 00:09:18,210
boxes are knows so there yes you have a

00:09:16,410 --> 00:09:20,880
controller know that we run the API

00:09:18,210 --> 00:09:22,560
batch still really fun Derek I've got

00:09:20,880 --> 00:09:24,960
this time all the time because we are

00:09:22,560 --> 00:09:27,330
running using incoming dot area not org

00:09:24,960 --> 00:09:29,790
packages so we don't have to wait for

00:09:27,330 --> 00:09:32,430
the install and then every package that

00:09:29,790 --> 00:09:36,450
needs to be run will be put in the queue

00:09:32,430 --> 00:09:37,740
and then we have several worker nodes

00:09:36,450 --> 00:09:39,840
really from that key when running the

00:09:37,740 --> 00:09:42,480
test and send you the results to the

00:09:39,840 --> 00:09:44,670
opinion storage which would be synced to

00:09:42,480 --> 00:09:46,620
the controller note back and then the

00:09:44,670 --> 00:09:51,390
controller can just keep in a loop

00:09:46,620 --> 00:09:54,990
updating the data so eagerly will be

00:09:51,390 --> 00:09:57,600
able to own I have - versus very shortly

00:09:54,990 --> 00:09:59,690
after the package was uploaded instead

00:09:57,600 --> 00:10:06,060
of waiting a couple of days that is

00:09:59,690 --> 00:10:08,190
edits now and then I also plan to do

00:10:06,060 --> 00:10:10,560
more stuff like adding more sweets so

00:10:08,190 --> 00:10:12,330
running tests some experimental tests in

00:10:10,560 --> 00:10:15,590
stable stable Plus back ports and notes

00:10:12,330 --> 00:10:18,480
A+ out yes and also there is work on

00:10:15,590 --> 00:10:21,870
running functional upgrade tests so like

00:10:18,480 --> 00:10:24,660
pew parts already handles upgrade tests

00:10:21,870 --> 00:10:27,270
but then it just tests that they upgrade

00:10:24,660 --> 00:10:28,800
itself work it but you have no way of

00:10:27,270 --> 00:10:31,200
knowing that the application is actually

00:10:28,800 --> 00:10:34,440
going to work after the upgrade so

00:10:31,200 --> 00:10:36,240
there's a patch III work I wrote for out

00:10:34,440 --> 00:10:38,670
of package tests supporting this so it

00:10:36,240 --> 00:10:42,870
will install whatever package do you

00:10:38,670 --> 00:10:46,500
want you say like for instance wizzy

00:10:42,870 --> 00:10:51,990
then upgrade to Jesse and then run tests

00:10:46,500 --> 00:10:53,460
with script any you can test if your

00:10:51,990 --> 00:10:56,399
work great actually works and leaves

00:10:53,460 --> 00:10:59,040
this this using the solid state

00:10:56,399 --> 00:11:03,459
then there's all types of which this

00:10:59,040 --> 00:11:05,679
email notifications people wanted people

00:11:03,459 --> 00:11:07,439
don't want it so we have to find a

00:11:05,679 --> 00:11:10,389
solution that works for everyone

00:11:07,439 --> 00:11:13,629
another interesting idea is a newsfeed

00:11:10,389 --> 00:11:17,040
by maintainer so I didn't comment on

00:11:13,629 --> 00:11:20,110
that but each package has a RSS feed of

00:11:17,040 --> 00:11:22,569
state changes so if your package was

00:11:20,110 --> 00:11:25,449
passing in then it failed you get a new

00:11:22,569 --> 00:11:28,269
era Society and the other way around so

00:11:25,449 --> 00:11:30,879
if your package always fails you don't

00:11:28,269 --> 00:11:33,999
be payment with fail fail fail all the

00:11:30,879 --> 00:11:38,799
time if always passes also you won't be

00:11:33,999 --> 00:11:41,199
notified and then that's now for either

00:11:38,799 --> 00:11:42,819
all packets or for each package in the

00:11:41,199 --> 00:11:44,199
idea is to have a payment and your

00:11:42,819 --> 00:11:46,569
solution more useful so you can just

00:11:44,199 --> 00:11:48,309
subscribe to a single feed and receive

00:11:46,569 --> 00:11:51,579
everything that should be of your

00:11:48,309 --> 00:11:53,139
interest and then all types of requests

00:11:51,579 --> 00:11:54,730
if you are using C either they were not

00:11:53,139 --> 00:12:00,339
net own on database you can talk to me

00:11:54,730 --> 00:12:03,309
and we can put stuff in a to-do list so

00:12:00,339 --> 00:12:05,649
now I know I that I talked it about CI

00:12:03,309 --> 00:12:07,809
itself so I decide to put together a

00:12:05,649 --> 00:12:10,600
mini tutorial on writing test for your

00:12:07,809 --> 00:12:13,389
package and I hope it's going to be

00:12:10,600 --> 00:12:15,490
useful we can also schedule an adduct

00:12:13,389 --> 00:12:17,019
session in the following days if you

00:12:15,490 --> 00:12:22,600
guys want to follow up stat and look

00:12:17,019 --> 00:12:25,420
into actual packages so that's a couple

00:12:22,600 --> 00:12:27,339
of things you can read so out of package

00:12:25,420 --> 00:12:30,939
tests has a lot of readme files with

00:12:27,339 --> 00:12:33,160
documentation on how to specify this the

00:12:30,939 --> 00:12:36,129
actual specification of the test control

00:12:33,160 --> 00:12:37,809
file formats and all kinds of route how

00:12:36,129 --> 00:12:42,309
to run tests against different types of

00:12:37,809 --> 00:12:45,490
test beds you have CH roots you have KVM

00:12:42,309 --> 00:12:48,970
you have containers you have running

00:12:45,490 --> 00:12:51,490
tests against ceasing that you use SSH

00:12:48,970 --> 00:12:53,169
to connect so there's lots of stuff

00:12:51,490 --> 00:12:55,779
there and then there's also the CI

00:12:53,169 --> 00:13:00,910
totally not nitrous documentation which

00:12:55,779 --> 00:13:03,129
will tell you as more fact in the

00:13:00,910 --> 00:13:07,629
beginning than how to reproduce the

00:13:03,129 --> 00:13:08,709
tests as they run on the API so that's

00:13:07,629 --> 00:13:11,750
useful

00:13:08,709 --> 00:13:15,470
and then two important points should

00:13:11,750 --> 00:13:17,000
keep in mind the goal of outer package

00:13:15,470 --> 00:13:20,240
this is tested packages as they are

00:13:17,000 --> 00:13:24,110
installed so you should not use codes

00:13:20,240 --> 00:13:26,149
from the source tree except the test

00:13:24,110 --> 00:13:28,399
suite itself so if upstream has a test

00:13:26,149 --> 00:13:32,029
suite you can run that but you have to

00:13:28,399 --> 00:13:34,339
make sure it's not gonna use this local

00:13:32,029 --> 00:13:36,949
copy of the files in the source

00:13:34,339 --> 00:13:41,569
directory but inside it we use the

00:13:36,949 --> 00:13:45,649
install files so please avoid full build

00:13:41,569 --> 00:13:47,959
is possible because if it is possible to

00:13:45,649 --> 00:13:50,750
specify that your test suite requires a

00:13:47,959 --> 00:13:53,089
full build of the package but then if

00:13:50,750 --> 00:13:56,750
you do that you will do do s the

00:13:53,089 --> 00:13:58,430
infrastructure so let's leave the builds

00:13:56,750 --> 00:14:02,509
with the build DS in the test with the

00:13:58,430 --> 00:14:04,220
test infrastructure so the basic

00:14:02,509 --> 00:14:07,310
structure is really have a debian test

00:14:04,220 --> 00:14:10,990
directory with a control file which is

00:14:07,310 --> 00:14:14,600
very similar to the daemon control file

00:14:10,990 --> 00:14:17,689
so you have one paragraph for each set

00:14:14,600 --> 00:14:20,420
of tests you want so the simplest form

00:14:17,689 --> 00:14:25,910
is just to list the name of the tests

00:14:20,420 --> 00:14:27,949
and then you have binaries or scripts or

00:14:25,910 --> 00:14:31,339
everything the executable inside the

00:14:27,949 --> 00:14:33,649
event test with that name so it will be

00:14:31,339 --> 00:14:36,529
executed so this one will pass this one

00:14:33,649 --> 00:14:38,329
you fail so that the entire test run

00:14:36,529 --> 00:14:41,930
this case will fail because this script

00:14:38,329 --> 00:14:44,389
here will fail in the bottom so and then

00:14:41,930 --> 00:14:47,899
you see the test suite can be anything

00:14:44,389 --> 00:14:49,699
it's just a program it can be a shell

00:14:47,899 --> 00:14:51,880
script can be a ruby script perl python

00:14:49,699 --> 00:14:54,470
it can be something that you build

00:14:51,880 --> 00:14:59,779
during the beauty of the package so you

00:14:54,470 --> 00:15:04,130
can specify it can be a static a/c

00:14:59,779 --> 00:15:06,199
binary there also so there are couple of

00:15:04,130 --> 00:15:10,459
ways of running tests the simplest one

00:15:06,199 --> 00:15:11,899
is to use s ADT from their script so you

00:15:10,459 --> 00:15:15,010
have to run that from your source

00:15:11,899 --> 00:15:18,790
directory it will run the tests

00:15:15,010 --> 00:15:20,589
but SAT is not up to date right now with

00:15:18,790 --> 00:15:25,500
the new features of out of package that

00:15:20,589 --> 00:15:28,269
in the DEP age specification so the next

00:15:25,500 --> 00:15:31,839
thing you want probably to do is to use

00:15:28,269 --> 00:15:34,360
the actual ADT run runner which provided

00:15:31,839 --> 00:15:37,300
about a package test so you pass the

00:15:34,360 --> 00:15:40,060
current directory and then three deaths

00:15:37,300 --> 00:15:43,000
three dashes yes and then new means

00:15:40,060 --> 00:15:46,060
don't use any visualization so that we

00:15:43,000 --> 00:15:47,860
run the tests on your local system so

00:15:46,060 --> 00:15:50,459
that assumes that log the package you

00:15:47,860 --> 00:15:54,399
just which is installed on your system

00:15:50,459 --> 00:15:55,870
and then if you just run the tests if

00:15:54,399 --> 00:15:58,389
you don't have the package installed it

00:15:55,870 --> 00:16:02,380
will fail you because you don't test the

00:15:58,389 --> 00:16:05,260
pin incident man don't are not satisfied

00:16:02,380 --> 00:16:06,699
so if you can also and you probably want

00:16:05,260 --> 00:16:10,649
to run the test against a clean system

00:16:06,699 --> 00:16:13,000
so you can run use the sh-sh routes

00:16:10,649 --> 00:16:16,630
visualization platform awesome

00:16:13,000 --> 00:16:23,079
and then just pretty much the same thing

00:16:16,630 --> 00:16:25,480
so important to note you want an apt

00:16:23,079 --> 00:16:33,610
proxy otherwise it will be downloading

00:16:25,480 --> 00:16:35,709
stuff from net every time in waste your

00:16:33,610 --> 00:16:37,899
testers testbed that's not that the your

00:16:35,709 --> 00:16:40,209
local system so the easiest way this you

00:16:37,899 --> 00:16:43,420
just installed the API in run dev site

00:16:40,209 --> 00:16:45,430
setup as root to create the the chroot

00:16:43,420 --> 00:16:48,100
exactly the same way it's run its

00:16:45,430 --> 00:16:49,870
created on the server so you have the

00:16:48,100 --> 00:16:52,149
exact same schedule that runs on the

00:16:49,870 --> 00:16:55,480
server and thus you just add yourself to

00:16:52,149 --> 00:16:58,839
the dev CI group to to have permissions

00:16:55,480 --> 00:17:02,560
to run that and then you just around ADT

00:16:58,839 --> 00:17:04,600
rounders - user the API here is the CIPA

00:17:02,560 --> 00:17:06,069
storm passing the local directory but if

00:17:04,600 --> 00:17:07,390
you look at the outer package test

00:17:06,069 --> 00:17:09,189
documentation there are several other

00:17:07,390 --> 00:17:11,020
ways you can pass binary packages can

00:17:09,189 --> 00:17:13,720
pass source package you can pass changes

00:17:11,020 --> 00:17:16,720
file and then it you do the right thing

00:17:13,720 --> 00:17:18,250
with each one and then you have the dev

00:17:16,720 --> 00:17:21,579
site setup commands creates a chroot

00:17:18,250 --> 00:17:24,270
called the API - unstable - your

00:17:21,579 --> 00:17:24,270
architecture

00:17:24,950 --> 00:17:30,740
you can also run tests without those

00:17:28,060 --> 00:17:34,370
trivia wrapper scripts so instead of

00:17:30,740 --> 00:17:37,160
specifying a list of test script you can

00:17:34,370 --> 00:17:39,980
just use test command and then call

00:17:37,160 --> 00:17:41,900
whatever you want if that returns zero

00:17:39,980 --> 00:17:50,120
your test passes if you dare returns

00:17:41,900 --> 00:17:53,570
nonzero your test values you can specify

00:17:50,120 --> 00:17:58,070
the penis for your tests so if you don't

00:17:53,570 --> 00:17:59,750
say anything it will default to the add

00:17:58,070 --> 00:18:02,540
symbol which means all the binary

00:17:59,750 --> 00:18:04,190
packages beautify this source package so

00:18:02,540 --> 00:18:06,320
if you don't say anything the testbed

00:18:04,190 --> 00:18:08,840
you get or all binary package installed

00:18:06,320 --> 00:18:12,260
and then the test will run otherwise you

00:18:08,840 --> 00:18:14,930
can specify explicitly of the penises so

00:18:12,260 --> 00:18:18,170
for instance if you have you are using

00:18:14,930 --> 00:18:27,050
external test Runner you can edit that

00:18:18,170 --> 00:18:29,480
to your dependency list you cannot

00:18:27,050 --> 00:18:32,720
specify instructions on the environment

00:18:29,480 --> 00:18:34,660
that test suspects so you can say that

00:18:32,720 --> 00:18:37,640
the test needs to be run as root and

00:18:34,660 --> 00:18:41,510
then each test bed will support that or

00:18:37,640 --> 00:18:43,670
not but most of them do you can specify

00:18:41,510 --> 00:18:47,480
that the test also needs the recommends

00:18:43,670 --> 00:18:49,790
so the recommended package will be

00:18:47,480 --> 00:18:51,950
installed together if they wish the

00:18:49,790 --> 00:18:56,510
banners built from that source package

00:18:51,950 --> 00:18:59,360
and you can also say that you allow

00:18:56,510 --> 00:19:01,190
output on stone the lever so by the foal

00:18:59,360 --> 00:19:04,910
if there's anything on standard error

00:19:01,190 --> 00:19:07,030
the test is assumed to be failed which

00:19:04,910 --> 00:19:10,310
doesn't make sense most of the time so

00:19:07,030 --> 00:19:14,390
because usually Easton the air is very

00:19:10,310 --> 00:19:17,570
abused by all types of programs so

00:19:14,390 --> 00:19:19,880
usually you want either specifying a

00:19:17,570 --> 00:19:23,710
lowest and array or or head directions

00:19:19,880 --> 00:19:23,710
in the rayher to standard output and

00:19:23,770 --> 00:19:30,140
then integer sub problem problem in

00:19:27,470 --> 00:19:32,810
project we found some common problem

00:19:30,140 --> 00:19:34,430
that you might want to avoid first one

00:19:32,810 --> 00:19:36,320
is missing dependencies so that's why

00:19:34,430 --> 00:19:37,560
you want to always run your test on a

00:19:36,320 --> 00:19:41,400
clean environment you

00:19:37,560 --> 00:19:45,300
chroot at least also missing

00:19:41,400 --> 00:19:47,910
restrictions so sometimes I guess people

00:19:45,300 --> 00:19:51,240
still get back its this route and then

00:19:47,910 --> 00:19:53,610
when they run the test they don't they

00:19:51,240 --> 00:19:57,630
just assume it's the test is running as

00:19:53,610 --> 00:20:00,060
root and that's not the case on most

00:19:57,630 --> 00:20:03,840
situations especially in automation

00:20:00,060 --> 00:20:08,370
scenarios so then assuming route is a

00:20:03,840 --> 00:20:10,650
common mistake sometimes it's assuming

00:20:08,370 --> 00:20:12,960
route just is just a matter of assuming

00:20:10,650 --> 00:20:16,500
the right path environment variable so

00:20:12,960 --> 00:20:18,900
calling stuff in user as being without a

00:20:16,500 --> 00:20:21,570
full path with a regular user will

00:20:18,900 --> 00:20:24,300
probably fail but then also sometimes as

00:20:21,570 --> 00:20:27,480
stuff like permissions on if you need to

00:20:24,300 --> 00:20:28,800
like change system configuration files

00:20:27,480 --> 00:20:31,580
then you need route you don't have to

00:20:28,800 --> 00:20:34,800
ask you don't have an escape for that

00:20:31,580 --> 00:20:36,960
cause there's a couple of simple

00:20:34,800 --> 00:20:40,260
programming errors like capitalization

00:20:36,960 --> 00:20:43,940
issues and all kinds of silly stuff also

00:20:40,260 --> 00:20:47,880
some local assumptions the clean system

00:20:43,940 --> 00:20:51,360
is usually using the silicon some tests

00:20:47,880 --> 00:20:53,970
depend on utf-8 or something so if you

00:20:51,360 --> 00:20:57,080
need utf-8 make sure you export that

00:20:53,970 --> 00:21:00,780
into environment in the test environment

00:20:57,080 --> 00:21:04,170
so looking at a real example the Ruby

00:21:00,780 --> 00:21:07,860
FFI package so right now it has it has

00:21:04,170 --> 00:21:10,290
two tests which is a simple smog test

00:21:07,860 --> 00:21:13,830
which is a script in the IBM test and

00:21:10,290 --> 00:21:16,470
then we just released a new version of

00:21:13,830 --> 00:21:19,230
the gentle Deb packaging helper for Ruby

00:21:16,470 --> 00:21:21,480
which adds the option of auto package

00:21:19,230 --> 00:21:24,810
tests it will run the test for that

00:21:21,480 --> 00:21:26,580
package without any of the local code so

00:21:24,810 --> 00:21:28,020
it will move away the local Ruby code

00:21:26,580 --> 00:21:30,630
and make sure the tests run against the

00:21:28,020 --> 00:21:32,340
installed version of the package and

00:21:30,630 --> 00:21:36,420
then we'll be able to enable test suite

00:21:32,340 --> 00:21:39,060
for all 500 Ruby packages just with a

00:21:36,420 --> 00:21:41,100
new sauce approved and then you see

00:21:39,060 --> 00:21:42,840
there that the penis is all the test

00:21:41,100 --> 00:21:46,820
depends on all the binary packages plus

00:21:42,840 --> 00:21:46,820
the stuff I need to run the tests

00:21:47,900 --> 00:21:52,970
and then the smoke test is a very simple

00:21:51,350 --> 00:21:54,950
test just as the most basic

00:21:52,970 --> 00:21:59,750
functionality of the of the package

00:21:54,950 --> 00:22:02,690
which is useful because Ruby FF eyes are

00:21:59,750 --> 00:22:04,640
very complicated libraries so if people

00:22:02,690 --> 00:22:08,809
who deal with bootstrapping know that

00:22:04,640 --> 00:22:11,870
Ruby in FF I separated usually a problem

00:22:08,809 --> 00:22:16,550
but then Ruby and FFI together is even

00:22:11,870 --> 00:22:19,040
more so so this is just binding a

00:22:16,550 --> 00:22:20,990
function from the Lib C and calling that

00:22:19,040 --> 00:22:23,750
from Ruby and make sure if that works

00:22:20,990 --> 00:22:30,890
then you pretty sure that the city is

00:22:23,750 --> 00:22:32,720
not completely broken and then I've in

00:22:30,890 --> 00:22:37,160
that's all I had

00:22:32,720 --> 00:22:41,330
maybe I want you first 25 minutes so we

00:22:37,160 --> 00:22:45,550
have we have some some time to discuss

00:22:41,330 --> 00:22:48,470
into people for people to make questions

00:22:45,550 --> 00:22:51,320
and if if there is it as we can schedule

00:22:48,470 --> 00:22:56,530
a doc session to look at the actual

00:22:51,320 --> 00:22:56,530
packages and in do whatever it's need

00:23:03,860 --> 00:23:08,390
so I have two questions for several

00:23:06,570 --> 00:23:12,270
things for your talk

00:23:08,390 --> 00:23:16,170
so as a package maintainer of a library

00:23:12,270 --> 00:23:18,720
that does Network communication I have

00:23:16,170 --> 00:23:20,820
two things that I need from a continuous

00:23:18,720 --> 00:23:25,020
integration and very not I need to be

00:23:20,820 --> 00:23:27,030
able to bind ports mm-hmm so that I can

00:23:25,020 --> 00:23:31,380
test that my network communications are

00:23:27,030 --> 00:23:33,990
working and as it's a library I also

00:23:31,380 --> 00:23:34,620
need to be notified if change in my

00:23:33,990 --> 00:23:37,640
library

00:23:34,620 --> 00:23:40,580
breaks tests for other packages so

00:23:37,640 --> 00:23:43,800
buffers those things possible mm-hmm

00:23:40,580 --> 00:23:46,440
so biting port should usually just work

00:23:43,800 --> 00:23:49,380
so if for instance if you depend on

00:23:46,440 --> 00:23:53,130
Apache Apache will install in bunch of

00:23:49,380 --> 00:23:54,510
port 80 as long as the test sitting

00:23:53,130 --> 00:24:00,960
doesn't have anything else on parity

00:23:54,510 --> 00:24:02,460
should be fine or if it's a high port

00:24:00,960 --> 00:24:06,800
you can just find it yourself from the

00:24:02,460 --> 00:24:09,780
test script that's just fine about

00:24:06,800 --> 00:24:12,810
notification if the reverse dependencies

00:24:09,780 --> 00:24:15,840
fail that's that's a good suggestion and

00:24:12,810 --> 00:24:20,180
I think it's probably possible we can

00:24:15,840 --> 00:24:20,180
just just use the code to do that

00:24:28,039 --> 00:24:34,529
can you explain a bit about how your

00:24:31,309 --> 00:24:37,020
Ruby helper script moves the upstream

00:24:34,529 --> 00:24:39,779
source out of the way within the rules

00:24:37,020 --> 00:24:41,429
of I think I don't quite understand the

00:24:39,779 --> 00:24:45,320
rules of auto packaged test what you're

00:24:41,429 --> 00:24:45,320
allowed to modify in the tree and so on

00:24:45,830 --> 00:24:54,059
okay so usually there is a restriction

00:24:51,240 --> 00:25:02,270
that you can specify that your test

00:24:54,059 --> 00:25:02,270
needs a writable source tree so and

00:25:02,480 --> 00:25:07,080
depending on your test where you need

00:25:04,500 --> 00:25:08,850
that but most of the time you don't need

00:25:07,080 --> 00:25:12,570
that you can just move stuff away from

00:25:08,850 --> 00:25:15,600
the source directly because the suspect

00:25:12,570 --> 00:25:17,490
is copied into the testbed so most of

00:25:15,600 --> 00:25:20,429
the time we are not modifying your local

00:25:17,490 --> 00:25:21,510
so if you are be on your laptop in the

00:25:20,429 --> 00:25:24,240
run on chroot

00:25:21,510 --> 00:25:26,700
it will copy the source package into the

00:25:24,240 --> 00:25:30,020
chroot and run stuff there so it's not

00:25:26,700 --> 00:25:32,909
going to break your local copy so what

00:25:30,020 --> 00:25:36,270
the gentle Devorah helper does is just

00:25:32,909 --> 00:25:37,770
moving the files away it moves the files

00:25:36,270 --> 00:25:41,340
away you run the commands it needs to

00:25:37,770 --> 00:25:45,090
run and then move them back because okay

00:25:41,340 --> 00:25:49,500
so the structure of Ruby packages is so

00:25:45,090 --> 00:25:51,600
that source files are in specifically

00:25:49,500 --> 00:25:53,970
named directories so you know you have

00:25:51,600 --> 00:25:56,760
the Lib directory which where you have

00:25:53,970 --> 00:26:01,890
pure Ruby code and you have the X

00:25:56,760 --> 00:26:05,360
directions so you know what you need to

00:26:01,890 --> 00:26:08,010
move away and put it back after the test

00:26:05,360 --> 00:26:15,990
ok yeah it's the put it back after the

00:26:08,010 --> 00:26:18,990
test was the key point okay one of the

00:26:15,990 --> 00:26:22,409
question you asked was how to do email

00:26:18,990 --> 00:26:24,330
notifications and I think you just you

00:26:22,409 --> 00:26:26,159
just need to be hooked up in the BTS

00:26:24,330 --> 00:26:29,580
because that's where you can optionally

00:26:26,159 --> 00:26:31,289
subscribe to something I'm not sure who

00:26:29,580 --> 00:26:35,250
is mentioning that piece of code now

00:26:31,289 --> 00:26:37,360
though yeah yeah sure I think if we do

00:26:35,250 --> 00:26:39,910
email it has to go to the PDS

00:26:37,360 --> 00:26:41,560
where will will reach the right people

00:26:39,910 --> 00:26:54,670
if you please do it

00:26:41,560 --> 00:26:58,600
I want email notifications just a small

00:26:54,670 --> 00:27:01,240
wishlist back report I guess it seems

00:26:58,600 --> 00:27:03,990
that ATT is putting these comments into

00:27:01,240 --> 00:27:07,150
the lock like lots of at marks and and

00:27:03,990 --> 00:27:09,100
it makes it much impossible but you

00:27:07,150 --> 00:27:12,730
don't do it yet but be nice to get an

00:27:09,100 --> 00:27:15,250
fancy isley navigatable view of locks on

00:27:12,730 --> 00:27:17,590
the api because it it's not easily

00:27:15,250 --> 00:27:21,160
possible to see exactly where the breaks

00:27:17,590 --> 00:27:22,360
i'm although a lot of them and i think

00:27:21,160 --> 00:27:25,270
it's already there by having these

00:27:22,360 --> 00:27:28,930
markers of various steps just yes yeah

00:27:25,270 --> 00:27:32,440
that's a good idea to like to hides all

00:27:28,930 --> 00:27:34,210
the setups parts injures so by default

00:27:32,440 --> 00:27:37,750
just show the output of yours deaths

00:27:34,210 --> 00:27:38,890
it's it's a good idea yes saurus

00:27:37,750 --> 00:27:42,850
understand

00:27:38,890 --> 00:27:45,850
deb CI is at the same time a test runner

00:27:42,850 --> 00:27:48,160
and test Orchestrator does it make sense

00:27:45,850 --> 00:27:49,810
to outsource as if pass that

00:27:48,160 --> 00:27:56,410
functionally overlap with things like

00:27:49,810 --> 00:27:58,620
jenkins to external tools so the actual

00:27:56,410 --> 00:28:03,190
test run is done by out of package test

00:27:58,620 --> 00:28:11,560
so that's not dead CI arrow okay in case

00:28:03,190 --> 00:28:14,290
how is it different from Jenkins well to

00:28:11,560 --> 00:28:17,740
do this I had to yeah that's a good

00:28:14,290 --> 00:28:20,080
question so I had to work out the Debian

00:28:17,740 --> 00:28:23,620
archive to figure out when to trigger

00:28:20,080 --> 00:28:25,960
test anyway so I figured I'd just be run

00:28:23,620 --> 00:28:32,890
the test myself instead of joined in

00:28:25,960 --> 00:28:35,710
somewhere else able to track changes in

00:28:32,890 --> 00:28:37,270
Debian archive sorry the primary

00:28:35,710 --> 00:28:39,730
difference has been able to track a

00:28:37,270 --> 00:28:42,150
figure of events happening in Devon our

00:28:39,730 --> 00:28:45,550
cadets you'll be able to create your own

00:28:42,150 --> 00:28:49,240
user interface that does exactly what

00:28:45,550 --> 00:28:50,950
you need in nothing else I mean to me

00:28:49,240 --> 00:28:53,080
the Jenks interface

00:28:50,950 --> 00:28:57,340
work for people but it's completely

00:28:53,080 --> 00:28:59,080
confusing for me it's all the completely

00:28:57,340 --> 00:29:00,700
confusing to people who never seen it

00:28:59,080 --> 00:29:05,409
before and haven't spent a year or three

00:29:00,700 --> 00:29:07,299
figuring it out yeah I don't think we

00:29:05,409 --> 00:29:09,580
can spare one year or three your effort

00:29:07,299 --> 00:29:12,279
of every maintainer indigent should be

00:29:09,580 --> 00:29:14,799
able to use the results in a useful way

00:29:12,279 --> 00:29:16,600
I also get another pen a set of the

00:29:14,799 --> 00:29:18,460
current approaches that we can tailor

00:29:16,600 --> 00:29:21,249
very much to the kind of metadata

00:29:18,460 --> 00:29:23,470
relation chain thingies that we have so

00:29:21,249 --> 00:29:25,869
we you don't have build IDs but rather

00:29:23,470 --> 00:29:27,700
we have packages and version numbers and

00:29:25,869 --> 00:29:29,379
we we can navigate that easily so I

00:29:27,700 --> 00:29:32,289
guess we gain something from not using

00:29:29,379 --> 00:29:35,049
an officer of the shelf product for this

00:29:32,289 --> 00:29:38,909
so I think it's reasonable to do our own

00:29:35,049 --> 00:29:38,909
thinking of a record

00:29:51,030 --> 00:29:55,550
so at one point you said you were going

00:29:53,880 --> 00:29:57,570
to support maybe multiple architectures

00:29:55,550 --> 00:30:01,500
mmm

00:29:57,570 --> 00:30:03,000
then I'm so thirsty I had during the

00:30:01,500 --> 00:30:05,310
private session but I'm going to ask you

00:30:03,000 --> 00:30:07,410
again how much would it be possible to

00:30:05,310 --> 00:30:11,250
have a web interface where I can upload

00:30:07,410 --> 00:30:15,200
a bill like a dad changes Holland and

00:30:11,250 --> 00:30:20,640
the guild Deb or maybe the source and

00:30:15,200 --> 00:30:22,680
get the topic each test run on MEAP sale

00:30:20,640 --> 00:30:25,770
which I don't have an easy access to for

00:30:22,680 --> 00:30:28,350
example yes for running on different

00:30:25,770 --> 00:30:31,080
actually need harder first and foremost

00:30:28,350 --> 00:30:34,160
I mean we made conversation Vidya say

00:30:31,080 --> 00:30:36,990
they mentioned the possibility of using

00:30:34,160 --> 00:30:41,280
spare build these cycles but I'm not

00:30:36,990 --> 00:30:44,160
sure that's going to work but as long as

00:30:41,280 --> 00:30:47,220
we have the hard it it's fine I mean the

00:30:44,160 --> 00:30:49,800
only problems have any heart about about

00:30:47,220 --> 00:30:52,380
so in the previous session I was

00:30:49,800 --> 00:30:56,370
thinking about solution for running

00:30:52,380 --> 00:30:58,110
tests on arbitrary packages I'm not sure

00:30:56,370 --> 00:30:59,940
I once we should have a web interface

00:30:58,110 --> 00:31:02,910
for that but maybe a special upload

00:30:59,940 --> 00:31:06,960
queue should work just fine and fits

00:31:02,910 --> 00:31:10,440
with most of our workflow just upload so

00:31:06,960 --> 00:31:15,090
I need to test this and then you have

00:31:10,440 --> 00:31:16,740
your test run I mean I because the web

00:31:15,090 --> 00:31:19,440
UI is currently just starting at the

00:31:16,740 --> 00:31:23,550
HTML and I'm not sure I want to change

00:31:19,440 --> 00:31:26,910
that because it makes every several

00:31:23,550 --> 00:31:29,430
things just more a lot more easier but a

00:31:26,910 --> 00:31:32,120
special product yield will be doable for

00:31:29,430 --> 00:31:32,120
sure yeah

00:31:45,760 --> 00:31:52,080
well if nobody else has anything so if

00:31:49,390 --> 00:31:59,320
you guys want to get in touch so oh

00:31:52,080 --> 00:32:00,700
there I guess maybe a last thing I think

00:31:59,320 --> 00:32:02,680
this is a perfect thing for Debian and

00:32:00,700 --> 00:32:05,620
we need we can really make use of that

00:32:02,680 --> 00:32:07,120
and I think this will be a very big

00:32:05,620 --> 00:32:09,040
change for Debian once people use it

00:32:07,120 --> 00:32:10,480
mode have the ability to have this kind

00:32:09,040 --> 00:32:11,590
of automated testing enough I want to

00:32:10,480 --> 00:32:20,170
thank you a lot for doing this I think

00:32:11,590 --> 00:32:22,540
great very appreciative if you guys want

00:32:20,170 --> 00:32:25,030
to get in touch so for general

00:32:22,540 --> 00:32:27,970
discussion why why my package failed and

00:32:25,030 --> 00:32:30,850
I need help you can use them in QA both

00:32:27,970 --> 00:32:33,280
IRC enlists and if you want to help with

00:32:30,850 --> 00:32:36,280
the website development there is Deb see

00:32:33,280 --> 00:32:39,280
I am Oh FTC IRC and also you can use

00:32:36,280 --> 00:32:41,560
auto packaged test - devil - list at

00:32:39,280 --> 00:32:44,740
least stop early off they will not work

00:32:41,560 --> 00:32:47,050
and if there is an interest in a

00:32:44,740 --> 00:32:48,840
hands-on session later come talk to me

00:32:47,050 --> 00:32:53,940
and we can schedule that with the

00:32:48,840 --> 00:32:53,940

YouTube URL: https://www.youtube.com/watch?v=EuZfPcdmYqI


