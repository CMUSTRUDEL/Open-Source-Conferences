Title: bugs.debian.org -- Database Ho!
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Don Armstrong

At: DebConf14
https://debconf14.debconf.org/
Room: Room 327
Scheduled start: 2014-08-24 13:30:00
Captions: 
	00:00:00,240 --> 00:00:06,509
maintain some of the flat files system

00:00:03,330 --> 00:00:08,760
that should increase the speed before I

00:00:06,509 --> 00:00:11,010
actually start talking about that don't

00:00:08,760 --> 00:00:13,230
have to admit that my primary motivation

00:00:11,010 --> 00:00:15,960
for giving a talk was to try to force

00:00:13,230 --> 00:00:18,390
myself into actually doing the work that

00:00:15,960 --> 00:00:20,189
I'm going to talk about in the phone and

00:00:18,390 --> 00:00:22,080
in that regard I'm only slightly

00:00:20,189 --> 00:00:25,949
successful so I managed to do some of it

00:00:22,080 --> 00:00:28,260
but I I've become too much of a

00:00:25,949 --> 00:00:31,669
professional procrastinator to be

00:00:28,260 --> 00:00:35,760
influenced by even giving a talk so

00:00:31,669 --> 00:00:37,320
we'll see how this works out so the

00:00:35,760 --> 00:00:39,360
first couple things I'm going to talk

00:00:37,320 --> 00:00:43,620
about are just some general bug

00:00:39,360 --> 00:00:45,690
statistics I enjoy showing subplots I'm

00:00:43,620 --> 00:00:49,020
going to introduce the basic

00:00:45,690 --> 00:00:51,930
architecture of dead bugs just a back up

00:00:49,020 --> 00:00:55,579
dead bugs is the system behind bugs

00:00:51,930 --> 00:00:59,489
Debian toggled on so if you filed a bug

00:00:55,579 --> 00:01:01,980
you fix the bug you've wondered what

00:00:59,489 --> 00:01:04,229
bugs exist you've interacted with dead

00:01:01,980 --> 00:01:07,710
bugs it has a both web front-end and a

00:01:04,229 --> 00:01:09,780
mailing system I'm going to talk a

00:01:07,710 --> 00:01:11,250
little bit about some of the new

00:01:09,780 --> 00:01:13,470
features that have been implemented that

00:01:11,250 --> 00:01:15,509
you may not know if you haven't followed

00:01:13,470 --> 00:01:18,479
it along but I'm pretty sure most people

00:01:15,509 --> 00:01:21,270
here follow along pretty closely so that

00:01:18,479 --> 00:01:23,009
might be all old information for you I'm

00:01:21,270 --> 00:01:25,470
gonna talk about some plan features

00:01:23,009 --> 00:01:27,750
especially features that'll happen if I

00:01:25,470 --> 00:01:30,600
suddenly have two or three more people

00:01:27,750 --> 00:01:33,210
willing to help and I'm hopeful we will

00:01:30,600 --> 00:01:35,970
plea with all of you or people who are

00:01:33,210 --> 00:01:38,340
listening to this talk online or who may

00:01:35,970 --> 00:01:40,229
listen to this talk recording later to

00:01:38,340 --> 00:01:44,220
assist me in implementing some of these

00:01:40,229 --> 00:01:46,920
features I'm a nice person we have nice

00:01:44,220 --> 00:01:49,290
people and I'd like to see any Perl

00:01:46,920 --> 00:01:51,119
hackers or CSS hackers or JavaScript

00:01:49,290 --> 00:01:53,759
hackers or people who want to write

00:01:51,119 --> 00:01:58,140
documentation help me so that's what I'm

00:01:53,759 --> 00:02:02,009
not talking about okay the goal of the

00:01:58,140 --> 00:02:05,310
BTS is to report bugs track the

00:02:02,009 --> 00:02:07,710
evolution of bugs fix bugs and hopefully

00:02:05,310 --> 00:02:12,120
reduce the impact of bugs both on

00:02:07,710 --> 00:02:13,700
maintained errs and on users this is how

00:02:12,120 --> 00:02:18,900
many bugs we've

00:02:13,700 --> 00:02:21,720
versus time so as you can see our bug

00:02:18,900 --> 00:02:24,629
growth is roughly linear overtime that's

00:02:21,720 --> 00:02:27,420
actually decreasing slightly but we have

00:02:24,629 --> 00:02:29,819
a huge number of bugs people like to

00:02:27,420 --> 00:02:33,299
track exactly how many bugs we have and

00:02:29,819 --> 00:02:36,540
Christian pair does a some fun contests

00:02:33,299 --> 00:02:37,230
of guessing win particular bugs might be

00:02:36,540 --> 00:02:43,470
filed

00:02:37,230 --> 00:02:49,519
for example the 760,000 bug will be

00:02:43,470 --> 00:02:52,410
filed I think September 2nd and the

00:02:49,519 --> 00:02:55,440
800,000 bug will be filed almost a year

00:02:52,410 --> 00:02:59,220
from now in September 15th assuming the

00:02:55,440 --> 00:03:00,930
linear progression maintains itself so

00:02:59,220 --> 00:03:03,599
Christian will enjoy that but he's not

00:03:00,930 --> 00:03:05,310
here so maybe I'll see it online anyway

00:03:03,599 --> 00:03:08,370
that's just show the bug reporting rate

00:03:05,310 --> 00:03:12,480
we average roughly 140 - bugs filed a

00:03:08,370 --> 00:03:17,370
day and so you can see that's a huge

00:03:12,480 --> 00:03:20,730
number of bugs now this is the bug

00:03:17,370 --> 00:03:22,590
closing graph it's actually technically

00:03:20,730 --> 00:03:25,859
not bug closures this is actually bugs

00:03:22,590 --> 00:03:28,739
being archived but for the most part

00:03:25,859 --> 00:03:33,180
this approximates the bug closure rate

00:03:28,739 --> 00:03:36,599
with a lag time of about two weeks so we

00:03:33,180 --> 00:03:38,790
close roughly 95 bugs a day so from that

00:03:36,599 --> 00:03:42,750
you can imagine that the bug system is

00:03:38,790 --> 00:03:45,989
gaining 50 or so some odd bugs every day

00:03:42,750 --> 00:03:47,910
that are not being fixed on sort of

00:03:45,989 --> 00:03:52,290
unfortunately in this graph you can see

00:03:47,910 --> 00:03:55,769
that the bug closure rate is decreasing

00:03:52,290 --> 00:03:58,019
and in context with the bug reporting

00:03:55,769 --> 00:04:01,709
rate also increasing this is something

00:03:58,019 --> 00:04:04,829
that I've seen in previous posts that

00:04:01,709 --> 00:04:07,049
I've made on my blog this is actually

00:04:04,829 --> 00:04:08,489
kind of disturbing I'm not sure what

00:04:07,049 --> 00:04:11,549
that means for debian as a whole whether

00:04:08,489 --> 00:04:14,040
it means anything but it's I'd much

00:04:11,549 --> 00:04:19,799
rather see the overall rate increasing

00:04:14,040 --> 00:04:22,200
then decreasing over time and this graph

00:04:19,799 --> 00:04:23,729
you're all familiar with this is our C

00:04:22,200 --> 00:04:25,940
bugs which are the bugs that are most

00:04:23,729 --> 00:04:27,630
important luckily the our C bugs are

00:04:25,940 --> 00:04:32,450
those that matter for

00:04:27,630 --> 00:04:35,060
next release are decreasing and so we're

00:04:32,450 --> 00:04:37,860
getting in line for a new release there

00:04:35,060 --> 00:04:40,890
okay and of course there's always too

00:04:37,860 --> 00:04:43,830
many yards of those okay so that was

00:04:40,890 --> 00:04:47,190
enough on graphs now I'm going to talk

00:04:43,830 --> 00:04:49,470
about the actual dead bug system and how

00:04:47,190 --> 00:04:52,770
it works

00:04:49,470 --> 00:04:56,610
dead bug two main components there's a

00:04:52,770 --> 00:04:58,740
male backend which is what to interact

00:04:56,610 --> 00:05:01,800
with when you email control at bugs at

00:04:58,740 --> 00:05:04,280
Debian org or submit at bugs Debian org

00:05:01,800 --> 00:05:06,780
or a bug number at bugs on Debian org

00:05:04,280 --> 00:05:10,770
and that system runs on a machine called

00:05:06,780 --> 00:05:14,060
bucks the hood which has all of the

00:05:10,770 --> 00:05:16,830
files and processes your email it also

00:05:14,060 --> 00:05:20,190
the other aspect of dead bugs is a web

00:05:16,830 --> 00:05:24,090
front-end and that's what displays

00:05:20,190 --> 00:05:26,760
information on what bugs are in which

00:05:24,090 --> 00:05:29,400
package and the bug logs that you can

00:05:26,760 --> 00:05:32,640
interact with and it's also mirrored on

00:05:29,400 --> 00:05:36,240
to another machine called beach so that

00:05:32,640 --> 00:05:40,800
it's ideally slightly faster to interact

00:05:36,240 --> 00:05:42,660
with dead bugs interacts with DAC which

00:05:40,800 --> 00:05:45,390
is a software which is responsible for

00:05:42,660 --> 00:05:48,180
maintaining the archive so DAC tells

00:05:45,390 --> 00:05:51,600
dead bugs which who maintains which

00:05:48,180 --> 00:05:53,790
packages so we know who so dead bugs

00:05:51,600 --> 00:05:55,980
knows who to send email to if there's a

00:05:53,790 --> 00:05:58,740
bug in the package it also tells dead

00:05:55,980 --> 00:06:02,130
bugs which packages are in which Suites

00:05:58,740 --> 00:06:04,950
so and which architectures so but dead

00:06:02,130 --> 00:06:08,610
bugs can calculate whether a bug is

00:06:04,950 --> 00:06:11,070
present in a particular suite so for

00:06:08,610 --> 00:06:14,220
example with the bug effects unstable or

00:06:11,070 --> 00:06:16,140
whether it's fixed in testing or stable

00:06:14,220 --> 00:06:20,520
which is what was calculated in the

00:06:16,140 --> 00:06:26,040
previous graph I showed you Brittany

00:06:20,520 --> 00:06:28,470
also is the testing migration software

00:06:26,040 --> 00:06:31,320
that migrates software from unstable to

00:06:28,470 --> 00:06:35,160
testing it uses information from the BTS

00:06:31,320 --> 00:06:38,310
as well in regards to whether a package

00:06:35,160 --> 00:06:41,130
is becoming more buggy or less buggy by

00:06:38,310 --> 00:06:43,710
upgrading it so

00:06:41,130 --> 00:06:45,660
the actual thing that does that is sort

00:06:43,710 --> 00:06:48,000
of attached to dead bugs its called bug

00:06:45,660 --> 00:06:51,780
status and it provides a list of bugs

00:06:48,000 --> 00:06:58,680
and it also does the RC bug grass but it

00:06:51,780 --> 00:07:01,950
provides the list of bugs to bring dead

00:06:58,680 --> 00:07:04,650
bugs itself looks like this there's mail

00:07:01,950 --> 00:07:06,120
comes in there's spam processing that

00:07:04,650 --> 00:07:08,970
happens on the first end we try to throw

00:07:06,120 --> 00:07:11,100
out as much man as possible Lars Larsen

00:07:08,970 --> 00:07:14,670
who I believe will be here soon I'm not

00:07:11,100 --> 00:07:17,220
sure if he's here yet is primarily

00:07:14,670 --> 00:07:19,260
responsible for keeping the bug tracking

00:07:17,220 --> 00:07:23,460
system relatively free of spam and D

00:07:19,260 --> 00:07:26,760
spamming the few yeah expanding the few

00:07:23,460 --> 00:07:29,150
or sorry sponging the little bit of spam

00:07:26,760 --> 00:07:31,800
that actually makes its way into the BBS

00:07:29,150 --> 00:07:34,710
there's a largely thankless job but

00:07:31,800 --> 00:07:37,680
people who so if you see large they can

00:07:34,710 --> 00:07:40,760
for doing that it's not a task that I

00:07:37,680 --> 00:07:44,100
would ever want to take on myself and so

00:07:40,760 --> 00:07:47,010
he's done a really great job anyway

00:07:44,100 --> 00:07:50,610
after the Mail's bhindi spam then it

00:07:47,010 --> 00:07:54,510
goes through process all and so process

00:07:50,610 --> 00:07:56,670
is responsible for handling email that

00:07:54,510 --> 00:07:59,490
gets sent to submit an email that gets

00:07:56,670 --> 00:08:01,170
sent to bug numbers so like if you send

00:07:59,490 --> 00:08:02,580
an email to one two three four five that

00:08:01,170 --> 00:08:03,630
bug thought I mean don't that's where it

00:08:02,580 --> 00:08:06,330
goes

00:08:03,630 --> 00:08:08,610
service is responsible for handling all

00:08:06,330 --> 00:08:12,630
of control so an email you send to

00:08:08,610 --> 00:08:16,980
control is catalyst service now with the

00:08:12,630 --> 00:08:19,050
advent advent of control at submit or

00:08:16,980 --> 00:08:21,870
control at any other time you want to

00:08:19,050 --> 00:08:23,040
these this diagram has gotten a little

00:08:21,870 --> 00:08:25,320
bit bored there's actually an

00:08:23,040 --> 00:08:27,510
abstraction that service talks to that

00:08:25,320 --> 00:08:30,030
process can talk to as well but that's

00:08:27,510 --> 00:08:33,690
the basic idea then all of the

00:08:30,030 --> 00:08:37,740
information is stored in flat files and

00:08:33,690 --> 00:08:40,919
a DV - H directory which has a small

00:08:37,740 --> 00:08:43,860
hash function to split off the bugs and

00:08:40,919 --> 00:08:47,310
is indexed with a couple of flat file

00:08:43,860 --> 00:08:50,970
indexes and then the CGI scripts used

00:08:47,310 --> 00:08:55,460
both the index indices and the flat file

00:08:50,970 --> 00:08:55,460
system to display bugs to users

00:08:56,970 --> 00:09:04,809
okay so that's how dead bugs looked

00:09:02,499 --> 00:09:08,350
before I started working on the database

00:09:04,809 --> 00:09:11,529
so the current plan is to add on and

00:09:08,350 --> 00:09:14,860
basically replace the indices with a

00:09:11,529 --> 00:09:16,929
database layer and so I'm going to keep

00:09:14,860 --> 00:09:19,509
parts of the flat file just because

00:09:16,929 --> 00:09:21,369
that's a well-tested system there's lots

00:09:19,509 --> 00:09:23,679
of things that already parts the flat

00:09:21,369 --> 00:09:27,299
files that know how to deal with it and

00:09:23,679 --> 00:09:30,730
add on top a PostgreSQL based database

00:09:27,299 --> 00:09:32,619
that the CGI scripts will actually

00:09:30,730 --> 00:09:37,239
utilize in order to display information

00:09:32,619 --> 00:09:40,239
to the to users this will help both

00:09:37,239 --> 00:09:42,279
increase the speed at which you get

00:09:40,239 --> 00:09:44,529
results back if you're looking at

00:09:42,279 --> 00:09:47,470
complicated packages and I'll also

00:09:44,529 --> 00:09:50,799
enable you to do more complicated things

00:09:47,470 --> 00:09:53,939
like viewing bugs that actually affect a

00:09:50,799 --> 00:09:57,100
particular version without waiting for

00:09:53,939 --> 00:09:59,110
huge amounts of time for a query to

00:09:57,100 --> 00:10:02,249
complete so for example if you wanted to

00:09:59,110 --> 00:10:04,689
look at all security bugs which affect

00:10:02,249 --> 00:10:07,269
unstable well that's actually a really

00:10:04,689 --> 00:10:09,100
hard query to do without a database

00:10:07,269 --> 00:10:10,869
layer doing that so that's one of the

00:10:09,100 --> 00:10:12,970
major things in the database is going to

00:10:10,869 --> 00:10:14,740
to do so the script that actually

00:10:12,970 --> 00:10:19,149
handles loading things into the database

00:10:14,740 --> 00:10:21,699
is called dead bugs load SQL so dead

00:10:19,149 --> 00:10:26,889
bugs is written in Perl so you don't

00:10:21,699 --> 00:10:31,360
like purple I'm sorry but haha but Perl

00:10:26,889 --> 00:10:34,420
has recently come quite a ways in its

00:10:31,360 --> 00:10:39,459
handling of databases most everybody has

00:10:34,420 --> 00:10:41,379
adopted the Perl idiom of using DVI in

00:10:39,459 --> 00:10:43,379
order to talk to databases it's a fairly

00:10:41,379 --> 00:10:46,389
successful database abstraction layer

00:10:43,379 --> 00:10:49,509
but anybody who's ever written code in

00:10:46,389 --> 00:10:52,589
DVI knows that it's extremely tedious to

00:10:49,509 --> 00:10:55,480
do joins and complicated statements

00:10:52,589 --> 00:10:58,569
where you're constantly writing SQL in

00:10:55,480 --> 00:11:00,519
dealing with escaping and etc etc or

00:10:58,569 --> 00:11:01,990
using placeholders but still it's

00:11:00,519 --> 00:11:06,129
something that you have to keep track of

00:11:01,990 --> 00:11:08,180
so DB IX class is an extension that

00:11:06,129 --> 00:11:10,730
belongs together

00:11:08,180 --> 00:11:13,190
huge number of pearl modules into a

00:11:10,730 --> 00:11:16,870
really coherent database abstraction

00:11:13,190 --> 00:11:20,270
service where if you give it your schema

00:11:16,870 --> 00:11:23,630
it will build classes that enable you to

00:11:20,270 --> 00:11:29,240
talk to each of the result groups from

00:11:23,630 --> 00:11:31,640
your database so it's a complete system

00:11:29,240 --> 00:11:34,580
you can actually write a schema entirely

00:11:31,640 --> 00:11:36,800
in DB IX class that you can then convert

00:11:34,580 --> 00:11:43,040
into SQLite you can convert it into

00:11:36,800 --> 00:11:45,950
PostgreSQL MySQL etc in this case so I'm

00:11:43,040 --> 00:11:47,450
primarily interested in writing for

00:11:45,950 --> 00:11:50,959
PostgreSQL that will actually be the

00:11:47,450 --> 00:11:53,180
primary database back in there might be

00:11:50,959 --> 00:11:55,580
an option eventually to use SQL Lite for

00:11:53,180 --> 00:12:01,130
testing but my primary goal is to deploy

00:11:55,580 --> 00:12:03,529
to PostgreSQL I'm also using a bunch of

00:12:01,130 --> 00:12:07,010
classes that are specific to Debian for

00:12:03,529 --> 00:12:09,470
example the Debian version extension to

00:12:07,010 --> 00:12:11,690
PostgreSQL that enables you to short by

00:12:09,470 --> 00:12:14,330
Debian version because that's extremely

00:12:11,690 --> 00:12:16,520
important for the BTS and that's

00:12:14,330 --> 00:12:19,400
something that's handled very well in

00:12:16,520 --> 00:12:21,470
PostgreSQL so what I've actually done is

00:12:19,400 --> 00:12:24,020
I write the schema directly in SQL and

00:12:21,470 --> 00:12:26,180
dbi extra class has an extension called

00:12:24,020 --> 00:12:28,550
schema loader which handles converting

00:12:26,180 --> 00:12:31,640
the SQL schema into the class

00:12:28,550 --> 00:12:34,100
declarations for DB is class

00:12:31,640 --> 00:12:36,140
automatically so you just write plain

00:12:34,100 --> 00:12:38,600
old SQL like you're used to and it

00:12:36,140 --> 00:12:42,589
automatically creates all of the

00:12:38,600 --> 00:12:44,390
database related Perl classes that you

00:12:42,589 --> 00:12:47,600
use to talk to the results from the

00:12:44,390 --> 00:12:50,209
database there's another module which

00:12:47,600 --> 00:12:55,190
handles deployment so it can do

00:12:50,209 --> 00:12:58,310
automated upgrades from different schema

00:12:55,190 --> 00:13:01,100
revisions so as you change your schema

00:12:58,310 --> 00:13:04,040
it handles doing both upgrades and new

00:13:01,100 --> 00:13:08,240
installs of the new schema which you can

00:13:04,040 --> 00:13:10,910
also they can also do down grades and

00:13:08,240 --> 00:13:13,220
you can do other things in addition to

00:13:10,910 --> 00:13:15,560
just executing SQL alter statements you

00:13:13,220 --> 00:13:17,839
can also run Perl code or anything else

00:13:15,560 --> 00:13:22,279
you wanted at the database at each

00:13:17,839 --> 00:13:26,100
upgrade step so that'll enable

00:13:22,279 --> 00:13:30,480
much easier changes to the schema in the

00:13:26,100 --> 00:13:32,820
future finally the actual module in

00:13:30,480 --> 00:13:37,020
bedbugs it's sort of abstracts this all

00:13:32,820 --> 00:13:39,000
out is dead bugs DB events so all of the

00:13:37,020 --> 00:13:43,980
database interaction classes and dead

00:13:39,000 --> 00:13:48,240
bugs are under that SQL module so this

00:13:43,980 --> 00:13:50,700
is the it's kind of complicated but this

00:13:48,240 --> 00:13:53,700
basically tracks all of the bug

00:13:50,700 --> 00:13:56,880
relationships it tracks who course

00:13:53,700 --> 00:13:59,220
bonded with the BTS has all the source

00:13:56,880 --> 00:14:02,550
package versions binary package versions

00:13:59,220 --> 00:14:04,020
and version dependencies so for example

00:14:02,550 --> 00:14:06,960
when you upload a version that was based

00:14:04,020 --> 00:14:10,460
on a previous version this enables all

00:14:06,960 --> 00:14:16,310
that to be tracked and it's Lou I've

00:14:10,460 --> 00:14:19,740
taken the deck SQL schema as as

00:14:16,310 --> 00:14:22,320
inspiration but unfortunately the dead

00:14:19,740 --> 00:14:23,760
bugs SQL diverges from DAC and that's

00:14:22,320 --> 00:14:26,610
maybe something that if I was small

00:14:23,760 --> 00:14:29,060
would less but I think it makes sense

00:14:26,610 --> 00:14:33,570
currently so but anyway if somebody is a

00:14:29,060 --> 00:14:35,160
PostgreSQL genius or an SQL hacker and

00:14:33,570 --> 00:14:36,900
is interested in maybe offering

00:14:35,160 --> 00:14:38,790
suggestions where I could make these

00:14:36,900 --> 00:14:46,140
more identical I definitely be

00:14:38,790 --> 00:14:48,210
interested to talk to you about ok is

00:14:46,140 --> 00:14:51,930
actually pretty easy you just call dead

00:14:48,210 --> 00:14:53,760
bugs SQL bugs and it'll load them there

00:14:51,930 --> 00:14:55,260
are two different parts of bugs in dead

00:14:53,760 --> 00:14:57,120
bugs there's the ones that you can

00:14:55,260 --> 00:15:00,930
actually modify and then there are the

00:14:57,120 --> 00:15:03,930
archived bugs so this handles dealing

00:15:00,930 --> 00:15:06,600
both with both sets of bugs you can also

00:15:03,930 --> 00:15:08,550
load versioning information this loads

00:15:06,600 --> 00:15:11,640
which packages are dependent on other

00:15:08,550 --> 00:15:14,520
ones and the dev info loads the

00:15:11,640 --> 00:15:18,570
architecture and source versioning

00:15:14,520 --> 00:15:20,900
information so the SQL is actually

00:15:18,570 --> 00:15:23,550
working this is an example of a

00:15:20,900 --> 00:15:26,880
handwritten SQL query but you could also

00:15:23,550 --> 00:15:29,940
write this using a VIX class and let me

00:15:26,880 --> 00:15:32,780
show you that this actually works well

00:15:29,940 --> 00:15:32,780
in theory here

00:15:33,150 --> 00:15:46,990
okay yeah let's see I always forget how

00:15:38,410 --> 00:15:48,640
to do this yeah I'll just try pit here

00:15:46,990 --> 00:15:51,610
and I'll show you the results so it'll

00:15:48,640 --> 00:15:52,960
be easier so I can run the select

00:15:51,610 --> 00:15:55,060
statement which is just selecting the

00:15:52,960 --> 00:16:00,970
count of bugs where which have been

00:15:55,060 --> 00:16:05,010
modified since that's June or July which

00:16:00,970 --> 00:16:09,010
are not done and I'm sorry which are

00:16:05,010 --> 00:16:13,260
let's see which are done and which

00:16:09,010 --> 00:16:16,540
there's an owner set and the answer is

00:16:13,260 --> 00:16:18,820
521 currently so I mean you could see

00:16:16,540 --> 00:16:21,910
that's a full load of all the bugs in

00:16:18,820 --> 00:16:25,180
Debian and the actual SQL query

00:16:21,910 --> 00:16:27,190
I mean execute fairly quickly of course

00:16:25,180 --> 00:16:29,140
I'm replicating the same query so

00:16:27,190 --> 00:16:31,060
everything's been cached but I'll give

00:16:29,140 --> 00:16:33,360
you an idea that it's still relatively

00:16:31,060 --> 00:16:33,360
quick

00:16:37,200 --> 00:16:42,180
so I had hoped to have more of this done

00:16:39,990 --> 00:16:46,139
by the time of this talk but still a lot

00:16:42,180 --> 00:16:48,779
of work that's needed the log files

00:16:46,139 --> 00:16:51,209
currently are not loaded and so the log

00:16:48,779 --> 00:16:54,089
files are all the correspondence with

00:16:51,209 --> 00:16:57,899
the bug and so that's needed to enable

00:16:54,089 --> 00:17:00,389
full-text searching of the BTS it also

00:16:57,899 --> 00:17:02,519
currently doesn't do status caching and

00:17:00,389 --> 00:17:08,459
so that's what will enable faster

00:17:02,519 --> 00:17:10,439
loading of the packaged report page and

00:17:08,459 --> 00:17:12,660
then it needs more work on the

00:17:10,439 --> 00:17:15,780
deployment - alright I actually need to

00:17:12,660 --> 00:17:17,160
deploy it to the servers so you guys can

00:17:15,780 --> 00:17:21,750
use it and it's not just sitting on my

00:17:17,160 --> 00:17:24,780
development setup okay so that's the

00:17:21,750 --> 00:17:27,480
major work with SQL which is the major

00:17:24,780 --> 00:17:30,150
thrust of this talk I'd like to talk

00:17:27,480 --> 00:17:33,720
just a little bit about some of the new

00:17:30,150 --> 00:17:38,850
changes that have been done one of the

00:17:33,720 --> 00:17:44,340
more recent ones is using mail to linked

00:17:38,850 --> 00:17:46,669
so let's pick a bug here let's do this

00:17:44,340 --> 00:17:46,669
one

00:17:50,840 --> 00:18:01,380
okay here's a nice bug so now there is a

00:17:56,790 --> 00:18:04,230
reply wink which includes the subject

00:18:01,380 --> 00:18:06,960
the references header basically

00:18:04,230 --> 00:18:10,580
everything so you can click it it'll

00:18:06,960 --> 00:18:14,190
open up mod or whatever year

00:18:10,580 --> 00:18:16,350
MUA is that handles mail to links it'll

00:18:14,190 --> 00:18:23,270
populate the references the in reply to

00:18:16,350 --> 00:18:23,270
and will give you most of the message

00:18:25,730 --> 00:18:30,660
the question is why doesn't the subject

00:18:28,169 --> 00:18:33,210
also quote the bug number uh it probably

00:18:30,660 --> 00:18:41,280
actually should I think that's probably

00:18:33,210 --> 00:18:42,809
a bug it just port yeah okay yeah yeah

00:18:41,280 --> 00:18:44,940
it probably should quote the bug number

00:18:42,809 --> 00:18:47,429
but it'll currently all it does is it

00:18:44,940 --> 00:18:50,070
adds read to the original subject and I

00:18:47,429 --> 00:18:51,809
was really lazy when I did that but yeah

00:18:50,070 --> 00:18:55,320
I should include the bug number in the

00:18:51,809 --> 00:19:00,600
subject anyway well it quotes the

00:18:55,320 --> 00:19:04,080
original message and it was that for all

00:19:00,600 --> 00:19:09,900
of the messages in the bug log so you

00:19:04,080 --> 00:19:12,990
can go down in is the to always the bug

00:19:09,900 --> 00:19:14,160
number yes the two is currently always

00:19:12,990 --> 00:19:19,980
the bug number when you click on the

00:19:14,160 --> 00:19:21,450
reply link no that's correct it does not

00:19:19,980 --> 00:19:23,610
go to the submitter even if you're

00:19:21,450 --> 00:19:25,950
replying to the submitter so that's

00:19:23,610 --> 00:19:27,570
something that that's another

00:19:25,950 --> 00:19:29,910
long-standing problem that actually

00:19:27,570 --> 00:19:32,580
needs to be really fixed which I'll talk

00:19:29,910 --> 00:19:42,330
about what needs to be done in order to

00:19:32,580 --> 00:19:45,360
fix that okay so other things these are

00:19:42,330 --> 00:19:47,580
actually old well well the old forcement

00:19:45,360 --> 00:19:49,410
merge now does the right thing you

00:19:47,580 --> 00:19:51,720
probably or you might have seen forced

00:19:49,410 --> 00:19:54,059
merge failing occasionally but it at

00:19:51,720 --> 00:19:55,470
least does all the operations that you

00:19:54,059 --> 00:19:57,450
would have had to do to merge them

00:19:55,470 --> 00:20:01,230
manually so it calculates what has to be

00:19:57,450 --> 00:20:06,290
done does it all for you the other major

00:20:01,230 --> 00:20:09,360
thing is controlled submit time which

00:20:06,290 --> 00:20:12,000
yeah which you just use end any message

00:20:09,360 --> 00:20:14,040
you use control colon as the pseudo

00:20:12,000 --> 00:20:16,980
header and you write control commands as

00:20:14,040 --> 00:20:20,040
usual and at submit time the bug that

00:20:16,980 --> 00:20:22,290
you're submitting is negative one or the

00:20:20,040 --> 00:20:24,360
bug that you're mailing is negative one

00:20:22,290 --> 00:20:26,669
so you could actually sing control

00:20:24,360 --> 00:20:28,440
commands that influence the whole set of

00:20:26,669 --> 00:20:31,620
bugs for example if you sent the same

00:20:28,440 --> 00:20:32,940
email to ten or fifteen bugs and used

00:20:31,620 --> 00:20:35,340
control :

00:20:32,940 --> 00:20:39,929
I don't know reassign negative one to

00:20:35,340 --> 00:20:42,030
some package well you however many bugs

00:20:39,929 --> 00:20:45,059
that you emailed so you can actually use

00:20:42,030 --> 00:20:47,040
that as well to do multiplex control

00:20:45,059 --> 00:20:53,160
messages if for some crazy reason you

00:20:47,040 --> 00:20:55,080
wanted to okay these this is a set of

00:20:53,160 --> 00:20:58,070
the future features that I'm trying to

00:20:55,080 --> 00:21:02,669
work on status caching that'll come as a

00:20:58,070 --> 00:21:04,620
consequence of SQL work so so also

00:21:02,669 --> 00:21:06,840
enable you to do reverse status lookup

00:21:04,620 --> 00:21:09,360
where you could look up bugs by their

00:21:06,840 --> 00:21:11,880
status which you can't currently do you

00:21:09,360 --> 00:21:14,070
can only look up bugs in a general thing

00:21:11,880 --> 00:21:18,950
and then exclude on the basis of the

00:21:14,070 --> 00:21:21,870
status which is really slow and not good

00:21:18,950 --> 00:21:24,090
one of the other major things that I if

00:21:21,870 --> 00:21:27,659
I ever have enough time is better

00:21:24,090 --> 00:21:29,340
statistics so I mean I've shown you the

00:21:27,659 --> 00:21:31,980
plots at the beginning all those plots

00:21:29,340 --> 00:21:33,540
are sort of manually generated I had to

00:21:31,980 --> 00:21:36,780
generate them before I gave the talk

00:21:33,540 --> 00:21:39,240
today I be much nicer if a huge set of

00:21:36,780 --> 00:21:39,780
statistics could be generated all the

00:21:39,240 --> 00:21:42,540
time

00:21:39,780 --> 00:21:44,820
hourly or even up to the minute so that

00:21:42,540 --> 00:21:47,669
people can see what's going on with the

00:21:44,820 --> 00:21:51,030
bugs and who's fixing the most bugs and

00:21:47,669 --> 00:21:51,870
which packages need more help because

00:21:51,030 --> 00:21:54,600
there have been

00:21:51,870 --> 00:21:56,700
painter is not responding or who's doing

00:21:54,600 --> 00:21:58,740
a really good job triaging bug so we can

00:21:56,700 --> 00:22:01,620
identify them and thank them and promote

00:21:58,740 --> 00:22:08,160
them all those sort of things are things

00:22:01,620 --> 00:22:15,350
that better statistics will help some

00:22:08,160 --> 00:22:18,809
other things I would like to implement a

00:22:15,350 --> 00:22:21,780
web-based reporting system not

00:22:18,809 --> 00:22:25,590
completely web-based but at least with

00:22:21,780 --> 00:22:31,230
submission of bugs using HTTP to some

00:22:25,590 --> 00:22:34,260
CGI with a report bug or something else

00:22:31,230 --> 00:22:38,040
as the actual interface to that and that

00:22:34,260 --> 00:22:40,440
will get rid of people having to have a

00:22:38,040 --> 00:22:42,630
working MUA or well report Pro doesn't

00:22:40,440 --> 00:22:45,630
currently require working MUA but it

00:22:42,630 --> 00:22:51,030
required or MTA but it does require that

00:22:45,630 --> 00:22:54,840
port 25 and 587 work so you can talk to

00:22:51,030 --> 00:22:57,230
bugs master unfortunately a lot of

00:22:54,840 --> 00:22:59,910
people's networks currently don't allow

00:22:57,230 --> 00:23:05,070
25 and even more are starting to

00:22:59,910 --> 00:23:07,620
disallow 587 outgoing so but most people

00:23:05,070 --> 00:23:09,840
at least allow 80 of them so that's

00:23:07,620 --> 00:23:11,970
something that will need to be fixed

00:23:09,840 --> 00:23:15,510
the major reason why I haven't already

00:23:11,970 --> 00:23:17,340
implemented that is because I want to

00:23:15,510 --> 00:23:20,490
make sure that people who are submitting

00:23:17,340 --> 00:23:23,309
the bugs actually have a working email

00:23:20,490 --> 00:23:26,460
address now you can mail bugs without a

00:23:23,309 --> 00:23:28,920
working email address but at least that

00:23:26,460 --> 00:23:32,640
requires that you could send mail so I

00:23:28,920 --> 00:23:35,870
want to set that up so that people get

00:23:32,640 --> 00:23:38,370
an email saying hey you a mail dead bugs

00:23:35,870 --> 00:23:41,000
click this link and once you do that

00:23:38,370 --> 00:23:42,809
once and won't ever ask you again but

00:23:41,000 --> 00:23:44,640
that's something that I wanted you

00:23:42,809 --> 00:23:46,679
second thing is I actually want to

00:23:44,640 --> 00:23:48,690
release dead bugs again dead bugs hasn't

00:23:46,679 --> 00:23:53,370
had a released outside of experimental

00:23:48,690 --> 00:23:57,050
and it did I mean since the entire time

00:23:53,370 --> 00:23:59,940
I've been working on it so which is a

00:23:57,050 --> 00:24:02,730
very long period of time and that's

00:23:59,940 --> 00:24:05,300
mainly my fault but yeah so it would be

00:24:02,730 --> 00:24:05,300
good to do that

00:24:05,430 --> 00:24:09,990
the third thing that's on this list is

00:24:07,680 --> 00:24:12,000
bug mailing lists actually in dev bugs

00:24:09,990 --> 00:24:16,470
and so this is what's actually going to

00:24:12,000 --> 00:24:18,180
solve the submitter issue so the basic

00:24:16,470 --> 00:24:21,030
idea is that the submitter will be and

00:24:18,180 --> 00:24:23,820
star will be subscribed to a per bug

00:24:21,030 --> 00:24:26,370
mailing list by default where they can

00:24:23,820 --> 00:24:29,160
easily opt out of it it'll do proper

00:24:26,370 --> 00:24:33,060
headers and bounce handling and by doing

00:24:29,160 --> 00:24:35,250
this in dead bugs it can also avoid the

00:24:33,060 --> 00:24:37,740
same person getting the duplicate email

00:24:35,250 --> 00:24:39,930
so if you are the submitter and also the

00:24:37,740 --> 00:24:41,940
maintainer this will keep you from

00:24:39,930 --> 00:24:43,980
getting multiple duplicates of the email

00:24:41,940 --> 00:24:46,650
if you're also subscribed to the bug

00:24:43,980 --> 00:24:48,420
list or and the packaging with this will

00:24:46,650 --> 00:24:50,670
also help a little bit the packaging

00:24:48,420 --> 00:24:51,900
email you'll still get from the pts you

00:24:50,670 --> 00:24:54,060
might still get but this will at least

00:24:51,900 --> 00:24:57,650
help reduce the number of duplicates and

00:24:54,060 --> 00:25:00,810
it will also enable people to set up

00:24:57,650 --> 00:25:04,890
defaults BTS wide so if they never want

00:25:00,810 --> 00:25:06,870
to see some emails to submitter or to

00:25:04,890 --> 00:25:08,400
bugs which they've submitted then they

00:25:06,870 --> 00:25:10,410
can opt out once and they'll never see

00:25:08,400 --> 00:25:13,970
them again or they can decide later to

00:25:10,410 --> 00:25:13,970
opt in and they'll be able to see them

00:25:15,350 --> 00:25:20,130
okay

00:25:16,670 --> 00:25:23,310
the other one is merged bug reports

00:25:20,130 --> 00:25:25,950
currently have few separate log files

00:25:23,310 --> 00:25:28,470
which you don't combine so anybody who's

00:25:25,950 --> 00:25:30,780
ever dealt with a merged bug knows that

00:25:28,470 --> 00:25:33,000
the history of the bug is sometimes

00:25:30,780 --> 00:25:36,360
difficult to ascertain you have to go

00:25:33,000 --> 00:25:38,730
view all the bugs and if it's two bugs

00:25:36,360 --> 00:25:40,830
that's annoying but okay you could do

00:25:38,730 --> 00:25:42,990
that if it's 20 bugs that have been

00:25:40,830 --> 00:25:45,330
merged which sometimes happens it's now

00:25:42,990 --> 00:25:47,760
almost impossible to figure out which

00:25:45,330 --> 00:25:49,800
bug has all of the history and it which

00:25:47,760 --> 00:25:51,690
ones the most important so that's

00:25:49,800 --> 00:25:54,870
something big that needs to be done

00:25:51,690 --> 00:25:57,660
another one is threading in the email in

00:25:54,870 --> 00:26:01,910
the bug report view so you can actually

00:25:57,660 --> 00:26:01,910
see who's in response to you to whom

00:26:02,120 --> 00:26:06,840
another major one is user categories

00:26:04,680 --> 00:26:10,230
currently cannot be easily duplicated or

00:26:06,840 --> 00:26:12,420
replayed so if a package has a user

00:26:10,230 --> 00:26:14,490
category or user tags that you want to

00:26:12,420 --> 00:26:17,190
emulate it's really difficult for

00:26:14,490 --> 00:26:19,380
somebody else to duplicate that unless

00:26:17,190 --> 00:26:22,430
you keep the email that you sent

00:26:19,380 --> 00:26:24,600
to the BTS somewhere I've modified that

00:26:22,430 --> 00:26:26,100
there's no way to take what's currently

00:26:24,600 --> 00:26:28,050
in the BTS and pull it back out and

00:26:26,100 --> 00:26:30,270
replay it on so that's actually

00:26:28,050 --> 00:26:32,070
something that somebody who's interested

00:26:30,270 --> 00:26:34,920
in helping out could write that up just

00:26:32,070 --> 00:26:36,720
as easily as I could so somebody's

00:26:34,920 --> 00:26:40,680
interested in working in Perl that would

00:26:36,720 --> 00:26:44,010
be a really useful thing another thing

00:26:40,680 --> 00:26:46,020
is remote attachments there's an RFC

00:26:44,010 --> 00:26:47,670
that enables you to have email

00:26:46,020 --> 00:26:49,830
attachments which are not included in

00:26:47,670 --> 00:26:53,160
the email which you can obtain remotely

00:26:49,830 --> 00:26:55,560
I would be nice to not email out core

00:26:53,160 --> 00:27:00,690
dumps to people who probably don't want

00:26:55,560 --> 00:27:03,900
to receive a you know 20 or 100 Meg core

00:27:00,690 --> 00:27:05,580
dump in their email that they're going

00:27:03,900 --> 00:27:08,310
to download from the BTS anyway

00:27:05,580 --> 00:27:11,580
eventually so if they ever want to look

00:27:08,310 --> 00:27:15,360
at it at all so that sort of thing it

00:27:11,580 --> 00:27:20,970
would be very useful and the CGI need

00:27:15,360 --> 00:27:23,790
smarter options so that the the query

00:27:20,970 --> 00:27:28,200
strings aren't as long and they do more

00:27:23,790 --> 00:27:29,250
the right thing all the time most some

00:27:28,200 --> 00:27:31,320
of these have actually already been done

00:27:29,250 --> 00:27:34,170
this is a little old but but there's a

00:27:31,320 --> 00:27:35,880
lot of places that need so if you're

00:27:34,170 --> 00:27:37,560
interested in helping and hopefully you

00:27:35,880 --> 00:27:39,980
or at least some of you are interested

00:27:37,560 --> 00:27:44,220
helping please get in contact with me

00:27:39,980 --> 00:27:47,790
this is how you can actually gets all of

00:27:44,220 --> 00:27:51,440
the cooked we're running on a Debian org

00:27:47,790 --> 00:27:51,440
is on Debian dot org

00:28:01,270 --> 00:28:11,950
abbien branch is ash that is actually

00:28:03,700 --> 00:28:13,750
running yeah thank you so the debian

00:28:11,950 --> 00:28:16,570
branch is the branch that's actually

00:28:13,750 --> 00:28:18,940
running on bugs Debian org and you can

00:28:16,570 --> 00:28:20,440
check that branch out and the branches

00:28:18,940 --> 00:28:23,200
are also checked out as well if you just

00:28:20,440 --> 00:28:25,870
want to browse exactly what's running if

00:28:23,200 --> 00:28:27,100
you want to follow what I'm doing my

00:28:25,870 --> 00:28:28,960
branches that get done

00:28:27,100 --> 00:28:31,299
da Armstrong Collins lashed dead bugs

00:28:28,960 --> 00:28:33,640
and I generally try to keep them in sync

00:28:31,299 --> 00:28:36,760
with what's on bugs I'd have it not work

00:28:33,640 --> 00:28:39,070
but sometimes I'm running behind the

00:28:36,760 --> 00:28:41,320
mailing list is Debian dead bugs Atlas

00:28:39,070 --> 00:28:44,370
Debian org feel free to email that you

00:28:41,320 --> 00:28:47,140
can also email me I'm dawn at Debian org

00:28:44,370 --> 00:28:51,880
there's also an IRC channel found dead

00:28:47,140 --> 00:28:55,059
bugs on IRC w.org and I'm Don del carro

00:28:51,880 --> 00:28:56,919
there so I'm friendly I will have to

00:28:55,059 --> 00:28:59,200
talk to anybody if you have questions to

00:28:56,919 --> 00:29:01,299
BTS isn't working the way you expect it

00:28:59,200 --> 00:29:04,149
to versioning isn't going the way it

00:29:01,299 --> 00:29:06,309
should feel free to contact me on IRC or

00:29:04,149 --> 00:29:09,730
email me and you can also get in contact

00:29:06,309 --> 00:29:12,549
with owner at owners owner at bug shot

00:29:09,730 --> 00:29:18,279
Debian org as well owners the group that

00:29:12,549 --> 00:29:22,120
runs dead bugs this is the team and

00:29:18,279 --> 00:29:25,090
hopefully you will join us so with that

00:29:22,120 --> 00:29:27,010
any questions I apologize I'm going to

00:29:25,090 --> 00:29:28,870
be disappearing relatively soon after

00:29:27,010 --> 00:29:30,309
this talk so if you have questions find

00:29:28,870 --> 00:29:32,260
me quickly or find me online

00:29:30,309 --> 00:29:36,940
I'll Viet Burning Man the rest the week

00:29:32,260 --> 00:29:39,690
so any questions or comments or

00:29:36,940 --> 00:29:39,690
complaints or

00:29:43,219 --> 00:29:48,269
do you have a performance goal on the on

00:29:46,349 --> 00:29:53,339
the update once we have post gross those

00:29:48,269 --> 00:29:55,729
bears running I mean what do you mean

00:29:53,339 --> 00:29:58,919
like when you do a query on an

00:29:55,729 --> 00:30:00,839
individual bug right now it's usually

00:29:58,919 --> 00:30:02,729
about five seconds yeah and that's kind

00:30:00,839 --> 00:30:04,769
of okay for some things but if you use

00:30:02,729 --> 00:30:07,349
if you're doing discovery it can be

00:30:04,769 --> 00:30:09,719
really really onerous I mean it should

00:30:07,349 --> 00:30:13,409
be less than a second isn't good I mean

00:30:09,719 --> 00:30:17,849
especially for like four individual bug

00:30:13,409 --> 00:30:20,129
logs so for viewing an individual bug

00:30:17,849 --> 00:30:22,859
log that's a slightly different problem

00:30:20,129 --> 00:30:25,649
than the database there's an issue with

00:30:22,859 --> 00:30:30,239
there because it has to read the entire

00:30:25,649 --> 00:30:33,629
bug log in order to display it and I'm

00:30:30,239 --> 00:30:36,089
working on splitting out the individual

00:30:33,629 --> 00:30:37,229
message messages so the entire bug log

00:30:36,089 --> 00:30:40,949
doesn't have to be read in order to

00:30:37,229 --> 00:30:42,809
start displaying it yeah and

00:30:40,949 --> 00:30:45,029
unfortunately part of the reason why I

00:30:42,809 --> 00:30:46,949
haven't done that yet is because I don't

00:30:45,029 --> 00:30:51,929
want to reinvent the wheel what needs to

00:30:46,949 --> 00:30:56,369
happen is some sort of mail tur like

00:30:51,929 --> 00:30:59,789
thing with some customization that also

00:30:56,369 --> 00:31:02,249
allows for detached attachments so that

00:30:59,789 --> 00:31:03,749
you can separate out a very very large

00:31:02,249 --> 00:31:05,849
attachment that you're never going to

00:31:03,749 --> 00:31:07,859
actually display into a separate file

00:31:05,849 --> 00:31:10,019
and I'm assuming somebody's invented

00:31:07,859 --> 00:31:13,259
this which is why I haven't actually sat

00:31:10,019 --> 00:31:14,549
down and done it myself so I've sort of

00:31:13,259 --> 00:31:22,409
been lazy trying to figure out exactly

00:31:14,549 --> 00:31:23,939
how that's going to work yeah so just

00:31:22,409 --> 00:31:25,499
quickly so I done a lot of work with

00:31:23,939 --> 00:31:27,209
historical bug data what you had in

00:31:25,499 --> 00:31:28,859
there is the database is gonna erase

00:31:27,209 --> 00:31:36,359
this distinction between archive bugs

00:31:28,859 --> 00:31:39,449
and so it probably won't erase the

00:31:36,359 --> 00:31:43,709
distinction at least as far as emailing

00:31:39,449 --> 00:31:45,659
goes so the major reason okay so the

00:31:43,709 --> 00:31:48,809
historical reason for archiving bugs was

00:31:45,659 --> 00:31:52,009
they were deleted at one point time and

00:31:48,809 --> 00:31:54,779
so then saving them was a brilliant idea

00:31:52,009 --> 00:31:55,500
and so they're now that they haven't

00:31:54,779 --> 00:31:58,200
been doing

00:31:55,500 --> 00:31:59,850
long time the other major reason why we

00:31:58,200 --> 00:32:02,430
archive bugs and why that's actually

00:31:59,850 --> 00:32:05,490
useful is because it means that they can

00:32:02,430 --> 00:32:08,700
no longer be mailed and really all the

00:32:05,490 --> 00:32:12,090
fixed bugs primarily collect spam that's

00:32:08,700 --> 00:32:15,390
all that goes to them so it's quite

00:32:12,090 --> 00:32:17,460
possible that the I haven't

00:32:15,390 --> 00:32:21,300
I mean I'm leaning in this direction

00:32:17,460 --> 00:32:24,840
that I will disable email to really old

00:32:21,300 --> 00:32:27,120
bugs but besides that they will still be

00:32:24,840 --> 00:32:30,020
I mean you can still do control changes

00:32:27,120 --> 00:32:30,020
to them and things like that

00:32:35,180 --> 00:32:40,650
exactly yeah they'll be basically no

00:32:37,530 --> 00:32:47,670
distinction between them I mean yeah at

00:32:40,650 --> 00:32:54,090
least that's the idea so back to the bug

00:32:47,670 --> 00:32:57,750
at meter this is something that has

00:32:54,090 --> 00:33:00,660
caused problems like people mailing the

00:32:57,750 --> 00:33:03,120
bug and the submitter not getting like

00:33:00,660 --> 00:33:05,370
asking this a meter could you maybe try

00:33:03,120 --> 00:33:08,370
something different and the submitter

00:33:05,370 --> 00:33:11,010
doesn't get the email I think the

00:33:08,370 --> 00:33:14,160
mailing list thing is like a great idea

00:33:11,010 --> 00:33:19,290
but it's probably a lot of work could it

00:33:14,160 --> 00:33:22,740
be possible to have a new address like -

00:33:19,290 --> 00:33:26,340
all or something and get the link in

00:33:22,740 --> 00:33:29,930
their webpage use these new address so

00:33:26,340 --> 00:33:29,930
that everyone gets the email

00:33:30,200 --> 00:33:36,570
so yeah the I mean it would be possible

00:33:33,000 --> 00:33:40,320
to change it so that like emailing the

00:33:36,570 --> 00:33:42,000
bug number dat - submitter would also

00:33:40,320 --> 00:33:43,800
email the submitter as well as the bug

00:33:42,000 --> 00:33:47,310
number currently all it does is email

00:33:43,800 --> 00:33:48,870
the submitter so I this is a change

00:33:47,310 --> 00:33:51,480
that's been talked about and I should

00:33:48,870 --> 00:33:54,390
have just done this already but but I

00:33:51,480 --> 00:33:59,550
always forget about it so so yeah so I'm

00:33:54,390 --> 00:34:01,950
going to change - submitter to actually

00:33:59,550 --> 00:34:05,070
email the bug and the submitter no

00:34:01,950 --> 00:34:06,750
matter what even if they opt out in the

00:34:05,070 --> 00:34:08,829
mailing list eventually once that

00:34:06,750 --> 00:34:24,279
happens

00:34:08,829 --> 00:34:26,559
uh is not separate from - quiet hmm okay

00:34:24,279 --> 00:34:28,659
so when you email so yeah so the

00:34:26,559 --> 00:34:30,969
question or the issue is that emailing

00:34:28,659 --> 00:34:33,009
submitters sets the reply to - - quiet

00:34:30,969 --> 00:34:33,519
yeah I'll I'll fix that that's that's

00:34:33,009 --> 00:34:35,859
dumb

00:34:33,519 --> 00:34:38,289
the unfortunate thing is there's a lot

00:34:35,859 --> 00:34:41,259
of things that made sense historically

00:34:38,289 --> 00:34:42,940
that have changed and some of the things

00:34:41,259 --> 00:34:44,679
that dead bug says I don't even know

00:34:42,940 --> 00:34:47,589
that it does because I don't always pay

00:34:44,679 --> 00:34:53,139
attention to what it's doing so okay so

00:34:47,589 --> 00:34:54,339
I'll fix that try to get everybody one

00:34:53,139 --> 00:34:56,139
thing that I notice it's a little bit

00:34:54,339 --> 00:34:57,670
different about how dead bug works and a

00:34:56,139 --> 00:34:59,529
lot of other bug tracking systems work

00:34:57,670 --> 00:35:04,209
is that there doesn't seem to be a way

00:34:59,529 --> 00:35:08,739
to close a bug as done but not actually

00:35:04,209 --> 00:35:11,259
done like won't fix yeah like you could

00:35:08,739 --> 00:35:12,729
do close but the policy seems to

00:35:11,259 --> 00:35:17,920
indicate you shouldn't do so is there a

00:35:12,729 --> 00:35:20,440
historical reason for that so you can

00:35:17,920 --> 00:35:22,449
just tag it won't fix and and

00:35:20,440 --> 00:35:27,549
close it if you're not going to ever fix

00:35:22,449 --> 00:35:30,999
it I mean the major reason to not close

00:35:27,549 --> 00:35:35,440
it is historical and it's also because

00:35:30,999 --> 00:35:37,150
it's easier to discover common bugs that

00:35:35,440 --> 00:35:40,809
you're not going to fix if they're not

00:35:37,150 --> 00:35:43,959
closed but yeah that's largely

00:35:40,809 --> 00:35:46,839
historical thing uh I mean the there

00:35:43,959 --> 00:35:50,880
isn't really a way to say that it's not

00:35:46,839 --> 00:35:53,859
a bug at all like the users is mistaken

00:35:50,880 --> 00:35:56,549
but you can I mean just close it in that

00:35:53,859 --> 00:35:56,549
case with a note

00:36:02,130 --> 00:36:07,980
aside from critical mass of you know

00:36:04,670 --> 00:36:11,250
800,000 bugs what does dead bugs offer

00:36:07,980 --> 00:36:14,640
as far as distinction from other bug

00:36:11,250 --> 00:36:16,710
tracking systems and why do we invest in

00:36:14,640 --> 00:36:20,640
our own solution I mean what what is it

00:36:16,710 --> 00:36:26,339
about dead bugs that is unique for our

00:36:20,640 --> 00:36:27,839
distributions bug tracking needs this is

00:36:26,339 --> 00:36:30,030
a really good question there's two

00:36:27,839 --> 00:36:32,609
aspects to it the major one is that it's

00:36:30,030 --> 00:36:35,400
totally interactable via email which is

00:36:32,609 --> 00:36:37,710
a major thing the absolutely critical

00:36:35,400 --> 00:36:40,829
aspect of for debian and why we couldn't

00:36:37,710 --> 00:36:42,540
use any other BTS system without a lot

00:36:40,829 --> 00:36:47,130
of work is that Det books does

00:36:42,540 --> 00:36:48,690
versioning so it knows exactly assuming

00:36:47,130 --> 00:36:50,730
that you set up the found and fixed

00:36:48,690 --> 00:36:53,609
versions correctly it knows in the

00:36:50,730 --> 00:36:56,190
version tree which nodes have been fixed

00:36:53,609 --> 00:36:59,670
and which are not fixed and so that

00:36:56,190 --> 00:37:01,650
enables you to figure out whether a

00:36:59,670 --> 00:37:03,930
package is buggy and testing whether

00:37:01,650 --> 00:37:06,210
it's buggy and stable etc all that would

00:37:03,930 --> 00:37:10,140
have to be added on to any other bug

00:37:06,210 --> 00:37:12,319
tracking system that we used we were to

00:37:10,140 --> 00:37:12,319
switch

00:37:14,779 --> 00:37:22,959
I just like to say thanks thank you

00:37:25,539 --> 00:37:32,079
did I miss anybody who had a question

00:37:28,130 --> 00:37:35,659
wave at me feel free to ask me as well

00:37:32,079 --> 00:37:39,859
well over email or whatever or you can

00:37:35,659 --> 00:37:42,219
even call me if you want okay thank you

00:37:39,859 --> 00:37:42,219

YouTube URL: https://www.youtube.com/watch?v=G74UAKptWAg


