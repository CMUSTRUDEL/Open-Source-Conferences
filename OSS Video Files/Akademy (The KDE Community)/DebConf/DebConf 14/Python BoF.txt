Title: Python BoF
Publication date: 2017-12-02
Playlist: DebConf 14
Description: 
	by Piotr OÅ¼arowski

At: DebConf14
https://debconf14.debconf.org/
Room: Room 328
Scheduled start: 2014-08-25 10:00:00
Captions: 
	00:00:22,360 --> 00:00:31,290
mentioned here and I suggest to do it

00:00:27,310 --> 00:00:39,820
before we go to the last point because

00:00:31,290 --> 00:00:42,690
that will take away probably so I guess

00:00:39,820 --> 00:00:42,690
we can start

00:00:51,020 --> 00:00:57,860
actually i yesterday i installed the

00:00:54,710 --> 00:01:00,530
gobby package not go be infinite I don't

00:00:57,860 --> 00:01:13,960
know if that matters but it worked for

00:01:00,530 --> 00:01:19,180
me so first topic Python free support

00:01:13,960 --> 00:01:19,180
what can we do what can you do

00:01:24,630 --> 00:01:26,689
you

00:02:26,720 --> 00:02:35,140
um I was just gonna say that yeah if it

00:02:30,980 --> 00:02:37,850
if upstream supports it and it's really

00:02:35,140 --> 00:02:39,890
usually very easy especially with pie

00:02:37,850 --> 00:02:41,720
built these days to just add the Python

00:02:39,890 --> 00:02:43,370
3 support and actually it's a great

00:02:41,720 --> 00:02:45,650
opportunity to clean up the packaging of

00:02:43,370 --> 00:02:50,150
the package anyway because you can I can

00:02:45,650 --> 00:02:54,200
usually remove 20 lines of rules and

00:02:50,150 --> 00:02:58,700
you'll get the test suite yes by default

00:02:54,200 --> 00:03:01,090
yeah as well yeah exactly and but the

00:02:58,700 --> 00:03:03,200
the things that you know I find our

00:03:01,090 --> 00:03:05,240
bottlenecks they're not huge bottlenecks

00:03:03,200 --> 00:03:06,950
but they're bottlenecks are when you

00:03:05,240 --> 00:03:09,050
have a stack of dependencies and you

00:03:06,950 --> 00:03:12,140
have to you know you have to get this

00:03:09,050 --> 00:03:14,030
one not only ported to Python 3 but you

00:03:12,140 --> 00:03:15,830
got to get it through new before you can

00:03:14,030 --> 00:03:18,680
then you know work your way down the

00:03:15,830 --> 00:03:21,400
stack and that that's a little bit of

00:03:18,680 --> 00:03:24,650
it's a little bit of a bottleneck

00:03:21,400 --> 00:03:27,500
especially for certain package package

00:03:24,650 --> 00:03:28,850
that all work together and I don't know

00:03:27,500 --> 00:03:31,070
that that's that's anything that we can

00:03:28,850 --> 00:03:34,730
do except maybe volunteer to awesome

00:03:31,070 --> 00:03:37,250
also the new queue is not that a problem

00:03:34,730 --> 00:03:41,150
right now we have one of our team

00:03:37,250 --> 00:03:44,300
members an FTP master team so we

00:03:41,150 --> 00:03:46,130
probably can trick him into processing I

00:03:44,300 --> 00:03:48,350
I won't actually say that he's

00:03:46,130 --> 00:03:52,040
volunteered to be pinged when we have

00:03:48,350 --> 00:03:54,920
that kind of situation so I think what

00:03:52,040 --> 00:03:57,200
we need is an overview of which packages

00:03:54,920 --> 00:03:59,840
have upstream based on trade support but

00:03:57,200 --> 00:04:03,590
no patience free binary and do we have

00:03:59,840 --> 00:04:05,239
that wouldn't you add a big spreadsheet

00:04:03,590 --> 00:04:09,650
of that does that still exist somewhere

00:04:05,239 --> 00:04:12,580
well so the the spreadsheet does exist

00:04:09,650 --> 00:04:15,110
but it's kind of limited in the sense of

00:04:12,580 --> 00:04:18,380
it was really focused on trying to get

00:04:15,110 --> 00:04:20,840
rid of Python 3 from the default images

00:04:18,380 --> 00:04:22,910
from server and then desktop and then

00:04:20,840 --> 00:04:24,650
the action mobile was first and then

00:04:22,910 --> 00:04:26,540
server and then desktop because they

00:04:24,650 --> 00:04:27,770
were just more tractable so there's not

00:04:26,540 --> 00:04:31,340
really an overall one and the other

00:04:27,770 --> 00:04:33,919
problem with that is that pipe I the

00:04:31,340 --> 00:04:35,630
cheese shop is not always up to date all

00:04:33,919 --> 00:04:37,490
the metadata is not always up to date so

00:04:35,630 --> 00:04:39,470
when somebody releases a new version of

00:04:37,490 --> 00:04:40,220
the package it has Python 3 support

00:04:39,470 --> 00:04:41,720
isn't

00:04:40,220 --> 00:04:43,190
can't always tell just by going to the

00:04:41,720 --> 00:04:47,570
cheese shop and and looking at the

00:04:43,190 --> 00:04:50,840
metadata so I I don't know what we can

00:04:47,570 --> 00:04:52,400
do other than try to be as opportunistic

00:04:50,840 --> 00:04:55,970
as possible

00:04:52,400 --> 00:04:59,890
are there any Python free packages into

00:04:55,970 --> 00:05:04,310
that are not yet again there's a few

00:04:59,890 --> 00:05:08,000
there's some there are some obscure zope

00:05:04,310 --> 00:05:09,560
packages which are not I I can't imagine

00:05:08,000 --> 00:05:11,450
that actually people want to use them

00:05:09,560 --> 00:05:13,340
but they're used for like launchpad or

00:05:11,450 --> 00:05:15,860
something crazy like that so I had to

00:05:13,340 --> 00:05:17,780
port a handful of them that were only in

00:05:15,860 --> 00:05:19,640
a bun too but almost everything is and I

00:05:17,780 --> 00:05:24,770
and I'm really trying to be very careful

00:05:19,640 --> 00:05:26,780
to make sure that everything is back

00:05:24,770 --> 00:05:29,030
ported into Debian you know done in

00:05:26,780 --> 00:05:33,530
Debian first and then we can sync sync

00:05:29,030 --> 00:05:35,000
it back up into a bun too so but you

00:05:33,530 --> 00:05:36,350
mentioned pi PI and we could fairly

00:05:35,000 --> 00:05:37,970
easily write a script that goes to all

00:05:36,350 --> 00:05:40,040
the Python packages in the archive looks

00:05:37,970 --> 00:05:43,220
at pi PI and sees if they claim python 3

00:05:40,040 --> 00:05:44,810
support that's that would probably give

00:05:43,220 --> 00:05:49,250
us an overview of pack of really low

00:05:44,810 --> 00:05:51,050
hanging fruit to work on as a package

00:05:49,250 --> 00:05:52,250
maintainer you're probably all going to

00:05:51,050 --> 00:05:54,380
shout at me now but I think this is

00:05:52,250 --> 00:05:56,510
probably a real thing most package

00:05:54,380 --> 00:05:58,790
maintainers feel if I maintain a silly

00:05:56,510 --> 00:06:01,550
little library that's only I'm using and

00:05:58,790 --> 00:06:03,440
I'm not using from Python 3 I don't add

00:06:01,550 --> 00:06:04,580
a Python 3 I often don't add a Python

00:06:03,440 --> 00:06:05,960
free package because it's pain it's

00:06:04,580 --> 00:06:09,400
going to have to go through new it's

00:06:05,960 --> 00:06:09,400
gonna let's it's gonna

00:06:11,470 --> 00:06:17,930
sure I do it but it's a whole lot of

00:06:16,340 --> 00:06:20,810
extra work for something I know someone

00:06:17,930 --> 00:06:25,100
no one's going to use can we start with

00:06:20,810 --> 00:06:29,030
the PMT packages they're all in our repo

00:06:25,100 --> 00:06:30,080
and we can work without any problem we

00:06:29,030 --> 00:06:35,060
should just do them all

00:06:30,080 --> 00:06:38,240
yes so can somebody write a script that

00:06:35,060 --> 00:06:40,670
checks which packages actually can be

00:06:38,240 --> 00:06:45,080
ported to Python 3 because upstream

00:06:40,670 --> 00:06:49,040
supports it and any one can commit to

00:06:45,080 --> 00:06:50,930
that I was just saying whoever whoever

00:06:49,040 --> 00:06:57,110
said it in Gavi can you just add some

00:06:50,930 --> 00:07:05,930
action items and I certainly would be

00:06:57,110 --> 00:07:13,250
willing to help with that I have a

00:07:05,930 --> 00:07:14,750
question yesterday I had the Lindy and

00:07:13,250 --> 00:07:18,230
working on a package of mine that says

00:07:14,750 --> 00:07:20,750
don't use PI support and so I asked

00:07:18,230 --> 00:07:23,660
around out you maintain Python packages

00:07:20,750 --> 00:07:29,000
this week and they told me in Python th

00:07:23,660 --> 00:07:32,300
Python 2 and I talked about PI built is

00:07:29,000 --> 00:07:34,340
there going to is it like only one way

00:07:32,300 --> 00:07:36,350
to do it at some point and is there a

00:07:34,340 --> 00:07:37,640
promise that I learned that and not

00:07:36,350 --> 00:07:42,470
shoot myself in the head

00:07:37,640 --> 00:07:44,380
in six months yeah th Python 2 is the

00:07:42,470 --> 00:07:49,480
one way to do it right now all other

00:07:44,380 --> 00:07:53,150
helpers were either deprecated or

00:07:49,480 --> 00:07:56,750
removed from archive Python central is

00:07:53,150 --> 00:07:59,690
already removed and no older package is

00:07:56,750 --> 00:08:02,240
depending on that it's using all of them

00:07:59,690 --> 00:08:04,810
all that were using Python central were

00:08:02,240 --> 00:08:08,800
already converted to DHA Python 2 and

00:08:04,810 --> 00:08:11,600
Python support is deprecated and

00:08:08,800 --> 00:08:16,400
actually a lot of packages were already

00:08:11,600 --> 00:08:18,870
converted and we just need some time to

00:08:16,400 --> 00:08:21,270
convert from the other ones

00:08:18,870 --> 00:08:23,850
but the pie build is orthogonal to the H

00:08:21,270 --> 00:08:26,580
Python - yeah pie build is a Dutch

00:08:23,850 --> 00:08:30,240
rapper that builds a Python 2 + 3 + pi

00:08:26,580 --> 00:08:32,490
PI there are actually few tools but each

00:08:30,240 --> 00:08:35,310
of them does something different the H

00:08:32,490 --> 00:08:38,669
Python 2 is taking care of Python 2

00:08:35,310 --> 00:08:43,229
packages the H Python 3 is taking care

00:08:38,669 --> 00:08:48,060
of Python 3 related packages the h pi PI

00:08:43,229 --> 00:08:51,540
is taking care of pi PI packages so each

00:08:48,060 --> 00:08:55,790
Python major Python version has its own

00:08:51,540 --> 00:08:59,640
tool but they actually do the same and I

00:08:55,790 --> 00:09:02,760
separated them because we separate the

00:08:59,640 --> 00:09:06,060
Python 2 8 and Python 3 stack anyway so

00:09:02,760 --> 00:09:09,210
and at the beginning the the H Python 2

00:09:06,060 --> 00:09:12,180
was written in the in Python 2 right now

00:09:09,210 --> 00:09:15,060
they all written in Python 3 but it

00:09:12,180 --> 00:09:19,380
doesn't matter much what matters is

00:09:15,060 --> 00:09:23,190
there's only one helper tool which is

00:09:19,380 --> 00:09:28,310
not deprecated right now for each Python

00:09:23,190 --> 00:09:32,209
version so it's pretty safe to say that

00:09:28,310 --> 00:09:36,390
the H Python 2 is the only helper that

00:09:32,209 --> 00:09:39,450
country is should be used and will be

00:09:36,390 --> 00:09:43,140
used in future and will it be supported

00:09:39,450 --> 00:09:45,540
by Python as teed up at anytime soon it

00:09:43,140 --> 00:09:48,560
already is so I see that has been

00:09:45,540 --> 00:09:48,560
updated now yeah

00:09:50,910 --> 00:09:57,810
st debt is using the short debian rules

00:09:54,060 --> 00:10:02,010
on file which uses the width statement

00:09:57,810 --> 00:10:05,450
and if you add with python 2 it will

00:10:02,010 --> 00:10:08,550
actually run th python 2 and that's what

00:10:05,450 --> 00:10:11,490
SCDF generates so you are if you are

00:10:08,550 --> 00:10:13,670
using STW are already using the H by

00:10:11,490 --> 00:10:13,670
Toronto

00:10:15,449 --> 00:10:20,649
it doesn't in Debian yet but there is

00:10:18,670 --> 00:10:26,860
new upstream release that I didn't

00:10:20,649 --> 00:10:29,759
package yet which tries to generate

00:10:26,860 --> 00:10:35,220
Python 3 packages as well if it's

00:10:29,759 --> 00:10:37,209
described described correctly in in IP I

00:10:35,220 --> 00:10:40,389
this conversation makes me think maybe

00:10:37,209 --> 00:10:43,269
the wiki needs updating to reflect the

00:10:40,389 --> 00:10:44,529
contents of that conversation cuz I had

00:10:43,269 --> 00:10:46,209
a colleague at work who's looking to

00:10:44,529 --> 00:10:47,709
build some Python packages and he said

00:10:46,209 --> 00:10:48,999
well I found all these pages telling you

00:10:47,709 --> 00:10:51,759
all right three different ways to do it

00:10:48,999 --> 00:10:53,740
so maybe we should fix the wiki so it

00:10:51,759 --> 00:10:57,369
says use you just this is the one way to

00:10:53,740 --> 00:11:00,220
do it can you point us to this wiki page

00:10:57,369 --> 00:11:02,139
where which still describes them yes sir

00:11:00,220 --> 00:11:05,199
all faiths and then if you updated

00:11:02,139 --> 00:11:07,779
because we probably have too many yeah I

00:11:05,199 --> 00:11:10,839
mean like all wiki's right it can use

00:11:07,779 --> 00:11:13,420
some gardening but I was I spent a fair

00:11:10,839 --> 00:11:16,600
bit of time going through wiki Debian

00:11:13,420 --> 00:11:18,790
door slash capital P Python and trying

00:11:16,600 --> 00:11:21,639
to make sure that like there's it points

00:11:18,790 --> 00:11:22,779
to the library style guide which while

00:11:21,639 --> 00:11:26,439
there are many different ways of doing

00:11:22,779 --> 00:11:31,059
it is I would say a strongly opinionated

00:11:26,439 --> 00:11:34,209
two page about one good way of doing it

00:11:31,059 --> 00:11:36,579
that includes both Python 2 and Python 3

00:11:34,209 --> 00:11:38,350
and then there's another page that has

00:11:36,579 --> 00:11:40,120
this a similar thing for Python

00:11:38,350 --> 00:11:45,040
applications which has some different

00:11:40,120 --> 00:11:47,319
issues than Python libraries so if you

00:11:45,040 --> 00:11:49,870
find some pages that have other

00:11:47,319 --> 00:11:52,059
suggestions definitely let us know

00:11:49,870 --> 00:11:54,639
because they I think they should be

00:11:52,059 --> 00:11:57,480
relegated to more like interesting

00:11:54,639 --> 00:11:57,480
historical facts

00:12:00,860 --> 00:12:07,199
regarding bison 3 I think what and also

00:12:04,649 --> 00:12:09,809
for you guys but from in the biggest

00:12:07,199 --> 00:12:14,459
travel is some support for on some key

00:12:09,809 --> 00:12:18,540
libraries on some I don't have myself

00:12:14,459 --> 00:12:23,459
the you know skills to do the work for

00:12:18,540 --> 00:12:26,939
upstream it'd be maybe some some guys

00:12:23,459 --> 00:12:29,879
like you how better than I think so so

00:12:26,939 --> 00:12:33,449
currently my biggest blocker is Python

00:12:29,879 --> 00:12:36,259
memcache D if that one works with Python

00:12:33,449 --> 00:12:39,569
3 then I have a bunch of other

00:12:36,259 --> 00:12:42,180
dependencies that we just have Python 3

00:12:39,569 --> 00:12:44,850
support so I guess that there's some

00:12:42,180 --> 00:12:47,459
other maintainer that have the same

00:12:44,850 --> 00:12:50,249
concern and would it work if we

00:12:47,459 --> 00:12:51,600
identified those libraries we shard the

00:12:50,249 --> 00:12:58,410
libraries that are looking for you for

00:12:51,600 --> 00:12:59,970
example cache sounds like it's probably

00:12:58,410 --> 00:13:02,579
a very easy lie because the protocol is

00:12:59,970 --> 00:13:04,740
very simple so something if you came up

00:13:02,579 --> 00:13:06,329
with a list of blocking packages like

00:13:04,740 --> 00:13:09,899
that I'm sure there are people who could

00:13:06,329 --> 00:13:12,059
help the other thing I would suggest is

00:13:09,899 --> 00:13:16,110
that there's a mailing list called I

00:13:12,059 --> 00:13:17,970
think it's Python porting I it might be

00:13:16,110 --> 00:13:20,610
on Python code or code I don't remember

00:13:17,970 --> 00:13:22,889
but that's probably the place to go

00:13:20,610 --> 00:13:25,230
that's sort of you know if you want to

00:13:22,889 --> 00:13:27,389
connect with Python developers larger

00:13:25,230 --> 00:13:28,649
than just the Debian project like if you

00:13:27,389 --> 00:13:31,290
have up streams that you really want to

00:13:28,649 --> 00:13:32,910
get ported go there and and that's a

00:13:31,290 --> 00:13:35,100
good place to talk with other Python

00:13:32,910 --> 00:13:37,199
developers and you might be able to you

00:13:35,100 --> 00:13:39,990
know convince somebody to help upstream

00:13:37,199 --> 00:13:41,910
get where they need to go but I think I

00:13:39,990 --> 00:13:43,800
think upstream doesn't have support

00:13:41,910 --> 00:13:46,100
either have to get upstream where you

00:13:43,800 --> 00:13:51,379
have to go to sort of go to the larger

00:13:46,100 --> 00:13:51,379
community to to help push that along

00:14:19,700 --> 00:14:28,740
so it's only about packaging what's in

00:14:23,520 --> 00:14:31,110
d3 bunk a package to get it's more

00:14:28,740 --> 00:14:33,300
complicated that there are there's a

00:14:31,110 --> 00:14:35,100
student for aggression to doesn't have

00:14:33,300 --> 00:14:39,140
support and then there's two or three

00:14:35,100 --> 00:14:39,140
forks for Python 3 it's complicated

00:14:43,970 --> 00:14:52,520
my case is probably not very common but

00:14:49,290 --> 00:15:00,770
I have absolute which only supports

00:14:52,520 --> 00:15:03,690
5-speed India t4 did so I was pushing to

00:15:00,770 --> 00:15:06,530
get all my we were split dependencies

00:15:03,690 --> 00:15:11,100
updated you just not possible state

00:15:06,530 --> 00:15:17,850
wxwidgets not ported and anyway so the

00:15:11,100 --> 00:15:21,810
question is how we still beat pies in

00:15:17,850 --> 00:15:24,660
euro as stopgap measures to dependencies

00:15:21,810 --> 00:15:30,030
which are not important but it's a big

00:15:24,660 --> 00:15:33,120
heck and the problem is when I am I am

00:15:30,030 --> 00:15:40,640
allowed to to Bob to pies to package or

00:15:33,120 --> 00:15:44,580
not when I'm actually planning to do it

00:15:40,640 --> 00:15:47,870
after this release but if so some Python

00:15:44,580 --> 00:15:51,590
policies has no adult weight and

00:15:47,870 --> 00:15:51,590
continue shipping it I'm

00:15:57,170 --> 00:16:05,509
I would say if no one's using a library

00:15:59,480 --> 00:16:08,059
it's safe to drop it and you can opt

00:16:05,509 --> 00:16:11,540
cash I heard our depends on your

00:16:08,059 --> 00:16:13,850
application the problem is that the

00:16:11,540 --> 00:16:18,350
reverse depends are actually reverse

00:16:13,850 --> 00:16:22,069
suggests and reverse recommends so all

00:16:18,350 --> 00:16:27,889
of them are suggesting reverse suggests

00:16:22,069 --> 00:16:31,009
and reverse recommends only so the

00:16:27,889 --> 00:16:34,009
problem is that for doing the Pisan

00:16:31,009 --> 00:16:40,129
to version I need a good hang to repeat

00:16:34,009 --> 00:16:43,759
the same thing twice and I'm not sure

00:16:40,129 --> 00:16:45,679
that I want to support it because anyone

00:16:43,759 --> 00:16:48,109
who is using the drive away for Libre

00:16:45,679 --> 00:16:49,819
Office has to support Isis to be anyway

00:16:48,109 --> 00:16:54,100
because the offices only shape the

00:16:49,819 --> 00:16:57,589
person's free version I would start with

00:16:54,100 --> 00:16:59,689
reporting back that this package will go

00:16:57,589 --> 00:17:02,589
away soon and this that's what I did oh

00:16:59,689 --> 00:17:02,589
great

00:17:08,209 --> 00:17:11,529
move on to the next thing

00:17:13,220 --> 00:17:21,899
so for Python free just to summarize we

00:17:17,630 --> 00:17:26,730
we need a document or a list of packages

00:17:21,899 --> 00:17:27,659
that we should focus on and we create I

00:17:26,730 --> 00:17:32,100
will help you

00:17:27,659 --> 00:17:34,769
berry with that and maybe we can create

00:17:32,100 --> 00:17:38,990
as many Python three packages because

00:17:34,769 --> 00:17:42,960
before releasing Jessie yes we can

00:17:38,990 --> 00:17:46,909
because backporting to do we Z should

00:17:42,960 --> 00:17:52,110
not be a problem because it in case

00:17:46,909 --> 00:17:55,769
package shoe this th Python because all

00:17:52,110 --> 00:18:03,809
the needed back ports are already in

00:17:55,769 --> 00:18:10,409
wheezy's okay so we will create a list

00:18:03,809 --> 00:18:12,710
of packages it's done at about socket

00:18:10,409 --> 00:18:17,940
great so we can move to the next topic

00:18:12,710 --> 00:18:20,389
if I might but one of the things that I

00:18:17,940 --> 00:18:23,960
want to do and I haven't had time yet is

00:18:20,389 --> 00:18:27,720
to try to actually get rid of Python to

00:18:23,960 --> 00:18:29,760
in the default install and I think

00:18:27,720 --> 00:18:32,639
there's one or two blocking blocker

00:18:29,760 --> 00:18:35,909
packages if I remember w BTS I think

00:18:32,639 --> 00:18:38,340
needs to be ported that's related to the

00:18:35,909 --> 00:18:40,799
soap right yeah yeah exactly the soap

00:18:38,340 --> 00:18:43,710
the soap problem was this new library

00:18:40,799 --> 00:18:46,139
the fork of soap you think yeah I

00:18:43,710 --> 00:18:47,880
haven't had time to look at it so I

00:18:46,139 --> 00:18:51,750
don't know how realistic that is for

00:18:47,880 --> 00:18:55,070
Jessie probably not very but maybe four

00:18:51,750 --> 00:18:55,070
plus one you know we can

00:18:56,759 --> 00:19:02,470
currently for when one of my packages

00:19:00,460 --> 00:19:05,679
have support for Python two and three

00:19:02,470 --> 00:19:08,350
and sheeps something in user bin then I

00:19:05,679 --> 00:19:11,799
use update alternatives to provide those

00:19:08,350 --> 00:19:13,419
things is it to view that by default I

00:19:11,799 --> 00:19:15,190
should the view of the gene that I

00:19:13,419 --> 00:19:18,070
should use Python three with higher

00:19:15,190 --> 00:19:21,940
priority if I were you I would ship

00:19:18,070 --> 00:19:24,879
fight on free only script so just ship

00:19:21,940 --> 00:19:27,519
if you have a script just ship it in the

00:19:24,879 --> 00:19:29,889
Python free package so that it will be

00:19:27,519 --> 00:19:32,649
easier for us to move to the Python free

00:19:29,889 --> 00:19:34,929
data because if it doesn't matter if the

00:19:32,649 --> 00:19:38,200
script uses Python two or Brighton free

00:19:34,929 --> 00:19:40,330
just use Python three don't I I don't

00:19:38,200 --> 00:19:43,740
think there's need to use alternatives

00:19:40,330 --> 00:19:49,450
or things like that I would just go to

00:19:43,740 --> 00:19:50,710
Python 3 well I'm walking the microphone

00:19:49,450 --> 00:19:53,980
over I'll just say that there's only a

00:19:50,710 --> 00:19:55,809
couple of packages that really have to

00:19:53,980 --> 00:19:57,970
have two and three supports like knows

00:19:55,809 --> 00:19:59,230
is one of them and a few things like

00:19:57,970 --> 00:20:06,309
that if it doesn't care

00:19:59,230 --> 00:20:11,110
just just ship the Python 3 version I

00:20:06,309 --> 00:20:13,480
guess my question was if anyone has come

00:20:11,110 --> 00:20:16,299
across a good way to help upgrade users

00:20:13,480 --> 00:20:17,919
in that situation because right now

00:20:16,299 --> 00:20:23,190
there's packages where there's a script

00:20:17,919 --> 00:20:25,600
in you know Python who and if you add

00:20:23,190 --> 00:20:31,000
Python 3 support you're gonna have

00:20:25,600 --> 00:20:32,679
Python food Python 3 food and if you

00:20:31,000 --> 00:20:34,360
move the script to Python free food the

00:20:32,679 --> 00:20:36,870
user on upgrade isn't going to have the

00:20:34,360 --> 00:20:36,870
script anymore

00:20:42,630 --> 00:20:50,610
yeah ii-i've come into that situation so

00:20:48,480 --> 00:20:53,880
like for example talks is one I did

00:20:50,610 --> 00:20:56,070
recently and there's a Python - there's

00:20:53,880 --> 00:21:00,000
a Python tox package and a Python 3 tox

00:20:56,070 --> 00:21:02,250
package and then I had I created just a

00:21:00,000 --> 00:21:05,340
tox package and that contains the user

00:21:02,250 --> 00:21:06,539
bin thing so I think in the case where

00:21:05,340 --> 00:21:09,360
you have something that's both an

00:21:06,539 --> 00:21:11,340
application and a library it's in the

00:21:09,360 --> 00:21:14,010
long term it's better to split those up

00:21:11,340 --> 00:21:16,620
so that you have the Python - one is

00:21:14,010 --> 00:21:19,049
just the Python - library the Python 3 -

00:21:16,620 --> 00:21:22,559
one is just the Python 3 library then

00:21:19,049 --> 00:21:23,760
you have another binary package that you

00:21:22,559 --> 00:21:25,230
have to be a little creative with the

00:21:23,760 --> 00:21:28,710
name maybe you can just name it after

00:21:25,230 --> 00:21:30,570
the source source package name or

00:21:28,710 --> 00:21:33,210
whatever but that's the thing that

00:21:30,570 --> 00:21:35,309
should include the user bin script and

00:21:33,210 --> 00:21:37,350
then that can just be Python 3 but that

00:21:35,309 --> 00:21:42,150
will work only for new paper to see

00:21:37,350 --> 00:21:43,919
somebody already installed Python - and

00:21:42,150 --> 00:21:46,640
FTP masters might say no because your

00:21:43,919 --> 00:21:50,190
packages 1 5 minutes actually I

00:21:46,640 --> 00:21:54,059
sponsored a package few weeks ago that

00:21:50,190 --> 00:21:56,390
had exactly that problem well it wasn't

00:21:54,059 --> 00:22:00,419
the problem but there was only one

00:21:56,390 --> 00:22:06,179
script in binary package and FTP masters

00:22:00,419 --> 00:22:07,650
accepted that so sometimes they don't of

00:22:06,179 --> 00:22:17,610
course it should have at least - right

00:22:07,650 --> 00:22:19,980
which is the main page if there is a

00:22:17,610 --> 00:22:25,679
good reason for example additional

00:22:19,980 --> 00:22:30,570
dependencies in this binary package then

00:22:25,679 --> 00:22:32,400
I'm sure FTP masters will accept that do

00:22:30,570 --> 00:22:35,010
we actually think Python 2 is going away

00:22:32,400 --> 00:22:37,440
anytime soon I mean I talked I told

00:22:35,010 --> 00:22:39,539
people who write Python rather than

00:22:37,440 --> 00:22:41,820
write maintain packages a lot of them

00:22:39,539 --> 00:22:44,270
are showing no signs of moving to Python

00:22:41,820 --> 00:22:44,270
3 years

00:22:44,610 --> 00:22:48,240
it's not Korea we are just starting to

00:22:47,190 --> 00:22:50,850
suppose it at work

00:22:48,240 --> 00:22:53,490
I mean write code that might work with

00:22:50,850 --> 00:22:57,059
it no intention of using it it will not

00:22:53,490 --> 00:23:05,669
go away anytime soon that it doesn't

00:22:57,059 --> 00:23:15,289
stop us from moving forward because they

00:23:05,669 --> 00:23:18,779
guarantee no API breaks I'll just say I

00:23:15,289 --> 00:23:22,649
highly encourage people to at least

00:23:18,779 --> 00:23:24,330
start writing new code that if you all

00:23:22,649 --> 00:23:25,830
your dependencies are there write it in

00:23:24,330 --> 00:23:29,279
Python 3 and you will not be sorry

00:23:25,830 --> 00:23:32,159
because it's such a better language than

00:23:29,279 --> 00:23:34,230
Python 2 there's no question about it I

00:23:32,159 --> 00:23:37,049
can say that unequivocal unequivocally

00:23:34,230 --> 00:23:40,399
and in fact every new new stuff that I

00:23:37,049 --> 00:23:42,929
write is is Python 3 and I don't miss I

00:23:40,399 --> 00:23:45,950
feel like I'm in the and earth all when

00:23:42,929 --> 00:23:48,480
I have to go back to writing Python 2 so

00:23:45,950 --> 00:23:49,710
Python 2 will never go away probably for

00:23:48,480 --> 00:23:52,049
a very long time because there's just

00:23:49,710 --> 00:23:54,529
too much stuff out there but I think all

00:23:52,049 --> 00:23:59,309
new stuff should be written in Python 3

00:23:54,529 --> 00:24:04,320
yeah it's really nice a really nice

00:23:59,309 --> 00:24:07,110
features and at some point upstream will

00:24:04,320 --> 00:24:08,760
stop we'll only have security updates

00:24:07,110 --> 00:24:09,870
for Python 2 those will probably go on

00:24:08,760 --> 00:24:11,880
for a very long time

00:24:09,870 --> 00:24:13,980
but at some point you know it's just

00:24:11,880 --> 00:24:15,899
it's just numbers right there's gonna be

00:24:13,980 --> 00:24:19,139
fewer and fewer upstream Python to

00:24:15,899 --> 00:24:21,570
developers who even care about it so you

00:24:19,139 --> 00:24:24,029
know I think I think if you can't do it

00:24:21,570 --> 00:24:25,679
yet plan for it and start laying the

00:24:24,029 --> 00:24:29,000
groundwork because at some point you're

00:24:25,679 --> 00:24:29,000
gonna want to be in Python 3

00:24:33,049 --> 00:24:46,769
so next item which is vital support yeah

00:24:41,100 --> 00:24:49,110
so can we do more in order to remove

00:24:46,769 --> 00:24:51,840
Python support even before releasing

00:24:49,110 --> 00:24:53,909
Jessie oath I mean the Python support

00:24:51,840 --> 00:24:56,669
package itself will have to stay in

00:24:53,909 --> 00:25:01,289
Jessie because to make the upgrades

00:24:56,669 --> 00:25:03,779
easier but can we limit amount of

00:25:01,289 --> 00:25:05,039
packages that depend on Python support

00:25:03,779 --> 00:25:09,450
can we

00:25:05,039 --> 00:25:16,260
is it worth out time to do we have an

00:25:09,450 --> 00:25:20,490
engine check for this yes we have I at

00:25:16,260 --> 00:25:22,950
least I I think I created that patch for

00:25:20,490 --> 00:25:24,690
Lincoln and sent that but I'm not sure

00:25:22,950 --> 00:25:37,039
if because that's life in Italy the

00:25:24,690 --> 00:25:41,929
first step if if not then D H by support

00:25:37,039 --> 00:25:41,929
prints a warning every time it's invoked

00:25:46,659 --> 00:25:58,840
I think in the warning which d-h by

00:25:55,840 --> 00:26:03,220
support invokes there's a link to wiki

00:25:58,840 --> 00:26:06,129
page with all the bullet points that are

00:26:03,220 --> 00:26:11,259
needed in order to convert to the H

00:26:06,129 --> 00:26:13,989
Python - if Linda untag does so the

00:26:11,259 --> 00:26:16,690
reason attack and I think when hundred

00:26:13,989 --> 00:26:26,460
and fifty packages have it right now

00:26:16,690 --> 00:26:29,739
how many thumbs from 250 in September in

00:26:26,460 --> 00:26:33,899
in silicon Python module steam or oh no

00:26:29,739 --> 00:26:37,090
the whole are in the whole archive so

00:26:33,899 --> 00:26:42,749
what can we do to encourage people to

00:26:37,090 --> 00:26:42,749
convert to the H by tonsil before Jessie

00:26:44,429 --> 00:26:52,419
we cannot do that because mmm it needs

00:26:49,090 --> 00:26:57,999
to be in Jessie in order to do that

00:26:52,419 --> 00:27:00,549
upgrades smooth it actually the package

00:26:57,999 --> 00:27:03,940
with Python support package provides

00:27:00,549 --> 00:27:06,399
some scripts that are used in in

00:27:03,940 --> 00:27:11,049
maintainer scripts of older packages so

00:27:06,399 --> 00:27:13,659
it has to has to stay in Jesse but we

00:27:11,049 --> 00:27:16,799
could remove the th bytes the binary

00:27:13,659 --> 00:27:16,799
that gets cool during the build process

00:27:25,320 --> 00:27:33,629
probably need to get over you how many

00:27:28,779 --> 00:27:36,249
packages we are talking about anyway 150

00:27:33,629 --> 00:27:39,629
just how far do we have to get before we

00:27:36,249 --> 00:27:41,349
do a mass spec filing on these packages

00:27:39,629 --> 00:27:47,590
sounds good

00:27:41,349 --> 00:27:50,739
action Barry so maybe we should start by

00:27:47,590 --> 00:27:54,869
migrating the DP empty packages and then

00:27:50,739 --> 00:27:54,869
see where we go from here

00:27:59,540 --> 00:28:08,000
we just I wonder is it does it is it

00:28:03,320 --> 00:28:11,330
sensible to prevent somehow to prevent

00:28:08,000 --> 00:28:13,100
new packages from I guess not nothing

00:28:11,330 --> 00:28:14,990
new is gonna use Python support but

00:28:13,100 --> 00:28:19,700
maybe that goes to your your question

00:28:14,990 --> 00:28:21,590
whether we can actually the hablar yeah

00:28:19,700 --> 00:28:27,050
exactly hobble it so that upgrades work

00:28:21,590 --> 00:28:28,160
but nothing new can be built with it we

00:28:27,050 --> 00:28:35,480
have to convert all the packages

00:28:28,160 --> 00:28:37,700
currently using it first will it work to

00:28:35,480 --> 00:28:42,890
just ask you have to be master to reject

00:28:37,700 --> 00:28:45,290
and you approve expense report so that

00:28:42,890 --> 00:28:49,460
every new upload would need to be

00:28:45,290 --> 00:28:51,470
converting on the package there is a

00:28:49,460 --> 00:28:54,620
lenient pack already right

00:28:51,470 --> 00:28:57,590
we can ask FTP masters to reject every

00:28:54,620 --> 00:29:03,740
package that triggers this Indian

00:28:57,590 --> 00:29:05,630
warning career you don't want to break

00:29:03,740 --> 00:29:11,180
RC bug-fix uploads and that kind of

00:29:05,630 --> 00:29:14,720
thing and you can't really do that

00:29:11,180 --> 00:29:17,620
before having five books provided

00:29:14,720 --> 00:29:21,050
patches that's not nice

00:29:17,620 --> 00:29:24,050
so first step will be convert all DPM

00:29:21,050 --> 00:29:35,110
tea packages that's what we have to do

00:29:24,050 --> 00:29:35,110
first as a list

00:29:44,120 --> 00:29:57,110
so if anyone wants to work on that I'm

00:29:49,200 --> 00:30:02,670
willing to sponsor any uploads so just

00:29:57,110 --> 00:30:11,010
email me or ping me or on IRC it's a

00:30:02,670 --> 00:30:14,360
good task for newcomers maybe at least

00:30:11,010 --> 00:30:21,090
for DPM D packages nobody will complain

00:30:14,360 --> 00:30:24,200
if you are afraid of that if we killed

00:30:21,090 --> 00:30:24,200
everyone who will complain already

00:30:31,040 --> 00:30:36,440
okay so next up because it's the founder

00:30:34,100 --> 00:30:39,410
what can we do to help you with Phi Phi

00:30:36,440 --> 00:30:41,780
I haven't even started yet

00:30:39,410 --> 00:30:44,860
I wanted to have something ready before

00:30:41,780 --> 00:30:47,770
they become fits I've been busy um I

00:30:44,860 --> 00:30:53,150
could use extra maintenance on pi PI I

00:30:47,770 --> 00:30:55,010
feel a bit like I don't want to be the

00:30:53,150 --> 00:30:57,410
only person working on it it's a crazy

00:30:55,010 --> 00:31:00,160
complicated package to be nice if I had

00:30:57,410 --> 00:31:00,160
some other people

00:31:00,430 --> 00:31:06,640
pi PI 3 is now officially releasing so

00:31:03,890 --> 00:31:06,640
yes we should do it

00:31:06,650 --> 00:31:16,070
what are the questions we can share this

00:31:10,490 --> 00:31:20,660
packages with cpython 3 I think should

00:31:16,070 --> 00:31:22,610
work the complication BC extensions but

00:31:20,660 --> 00:31:26,500
you shouldn't be using C extensions of

00:31:22,610 --> 00:31:29,270
PI PI's maybe we can avoid that one I

00:31:26,500 --> 00:31:30,470
have seen a lot of libraries now when

00:31:29,270 --> 00:31:32,080
they're trying to support pi PI they're

00:31:30,470 --> 00:31:34,430
using CF Fi

00:31:32,080 --> 00:31:36,410
so if that if they continue to do that

00:31:34,430 --> 00:31:40,870
we should be ok

00:31:36,410 --> 00:31:43,100
we just need some dependencies that say

00:31:40,870 --> 00:31:45,410
there's no sane way destructive

00:31:43,100 --> 00:31:48,290
structure dependencies in a Python 3

00:31:45,410 --> 00:31:53,450
library package so that it'll work with

00:31:48,290 --> 00:31:55,490
C Python 3 or pi PI 3 because either it

00:31:53,450 --> 00:31:57,830
should depend on one of the two or what

00:31:55,490 --> 00:31:59,480
should depend on one or the other but

00:31:57,830 --> 00:32:07,130
then if you have the one installed it

00:31:59,480 --> 00:32:10,490
won't work if we use the this packages

00:32:07,130 --> 00:32:12,260
from Python 3 then we probably have to

00:32:10,490 --> 00:32:15,440
mark such packages

00:32:12,260 --> 00:32:18,440
I don't know as provides pi PI something

00:32:15,440 --> 00:32:21,110
wrong because right now all the pi PI

00:32:18,440 --> 00:32:26,120
all the libraries that support

00:32:21,110 --> 00:32:29,300
pi PI have new binary packages I

00:32:26,120 --> 00:32:32,110
actually kind of forced you to do that

00:32:29,300 --> 00:32:34,400
because I created a simple Jason

00:32:32,110 --> 00:32:35,810
basically but we had to do it that way

00:32:34,400 --> 00:32:36,730
because we didn't have three one to

00:32:35,810 --> 00:32:39,520
seven

00:32:36,730 --> 00:32:41,470
I think the pie shape or increase in

00:32:39,520 --> 00:32:46,270
Python 2 points you mean only for white

00:32:41,470 --> 00:32:47,950
on free Wi-Fi free yeah yeah I'm so

00:32:46,270 --> 00:32:51,520
invited so we couldn't in Python 3 we

00:32:47,950 --> 00:32:52,390
can don't know if we should but we

00:32:51,520 --> 00:32:54,280
certainly can

00:32:52,390 --> 00:32:59,470
that was the point of patience if you

00:32:54,280 --> 00:33:02,950
probably try and do it no I was just

00:32:59,470 --> 00:33:04,800
going to ask what what about like the

00:33:02,950 --> 00:33:11,820
rules file to write don't we need to add

00:33:04,800 --> 00:33:11,820
you know with pi pi 3 to everything

00:33:14,910 --> 00:33:18,250
you'll need to with the python 3 oh you

00:33:16,930 --> 00:33:19,630
don't need to do binary package I was

00:33:18,250 --> 00:33:25,330
gonna say you also need a package of

00:33:19,630 --> 00:33:26,530
course you don't and eh ply us PI bulbs

00:33:25,330 --> 00:33:36,670
gonna have to learn to run tests the

00:33:26,530 --> 00:33:40,210
Python 3 it's not a problem to create in

00:33:36,670 --> 00:33:44,670
the H by PI 3 and which will create but

00:33:40,210 --> 00:33:44,670

YouTube URL: https://www.youtube.com/watch?v=i_3wTTOXX2c


