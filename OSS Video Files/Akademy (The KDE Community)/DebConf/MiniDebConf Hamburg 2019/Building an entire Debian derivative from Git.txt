Title: Building an entire Debian derivative from Git
Publication date: 2019-06-14
Playlist: MiniDebConf Hamburg 2019
Description: 
	by Andrej Shadura

At: MiniDebConf Hamburg 2019
https://wiki.debian.org/DebianEvents/de/2019/MiniDebConfHamburg
Room: main
Scheduled start: 2019-06-08 18:30:00
Captions: 
	00:00:04,550 --> 00:00:15,110
okay so our actually last talk for today

00:00:09,740 --> 00:00:19,660
um it's by Andrey surah on building an

00:00:15,110 --> 00:00:19,660
entire debian derivative from gates

00:00:22,750 --> 00:00:28,789
hello

00:00:24,290 --> 00:00:32,210
so uh just a bit about myself I've been

00:00:28,789 --> 00:00:35,079
using Debian for nearly 15 years now I

00:00:32,210 --> 00:00:38,570
guess so yeah and I've been a

00:00:35,079 --> 00:00:40,790
contributor for some of that most of the

00:00:38,570 --> 00:00:45,130
time and they've been developed for

00:00:40,790 --> 00:00:48,920
modern I was more than six years now and

00:00:45,130 --> 00:00:51,470
I worked for collabora which is a

00:00:48,920 --> 00:00:54,110
company doing open source consultancy

00:00:51,470 --> 00:00:57,440
and we do lots of interesting things

00:00:54,110 --> 00:01:00,010
with Linux and related technologies and

00:00:57,440 --> 00:01:02,360
the one of them he is building

00:01:00,010 --> 00:01:05,149
distributions and some of those

00:01:02,360 --> 00:01:06,500
distributions are based on Debian and we

00:01:05,149 --> 00:01:08,119
should prefer distribution based on

00:01:06,500 --> 00:01:11,030
they've done to some other things we

00:01:08,119 --> 00:01:13,579
have some project with openembedded

00:01:11,030 --> 00:01:16,299
and others well they've been based one

00:01:13,579 --> 00:01:26,420
it's a slightly better in lots of ways

00:01:16,299 --> 00:01:27,950
so and one of the things I personally

00:01:26,420 --> 00:01:29,569
have to work with recently and still

00:01:27,950 --> 00:01:35,450
work in progress and I'm going to talk

00:01:29,569 --> 00:01:39,880
about it is moving a well basically

00:01:35,450 --> 00:01:44,090
building bits of the Devon derivative

00:01:39,880 --> 00:01:50,029
from get without having Debian source

00:01:44,090 --> 00:01:51,829
packages as the original source so the

00:01:50,029 --> 00:01:56,029
distribution I'm talking about is the

00:01:51,829 --> 00:01:58,549
purchase it sees a dev and rivet if

00:01:56,029 --> 00:02:03,469
originally based actually on Ubuntu but

00:01:58,549 --> 00:02:07,099
we've in since January till April this

00:02:03,469 --> 00:02:10,550
year we've done horribly monumental work

00:02:07,099 --> 00:02:12,050
of moving its to Debian because there is

00:02:10,550 --> 00:02:14,960
no reason to use a bunch of anymore for

00:02:12,050 --> 00:02:18,420
the base of the derivative it's a

00:02:14,960 --> 00:02:21,569
distribution which is made for you

00:02:18,420 --> 00:02:24,660
in a kindest tree regionally it was

00:02:21,569 --> 00:02:26,640
meant to be used for basically the board

00:02:24,660 --> 00:02:28,890
computer with you know navigation and

00:02:26,640 --> 00:02:34,459
radio and all other things these days

00:02:28,890 --> 00:02:37,230
it's more for more deeply hidden bits of

00:02:34,459 --> 00:02:43,830
computing in a car and car related

00:02:37,230 --> 00:02:46,470
devices so this is basically an overview

00:02:43,830 --> 00:02:51,630
of an infrastructure involved in a

00:02:46,470 --> 00:02:55,410
purchase in interesting things for the

00:02:51,630 --> 00:02:58,470
purpose of this presentation are the

00:02:55,410 --> 00:03:00,720
code hosting bit which is at the moment

00:02:58,470 --> 00:03:04,680
it is github we used to have a bunch of

00:03:00,720 --> 00:03:07,530
custom sigit instances and we've

00:03:04,680 --> 00:03:12,739
migrated from that to github and another

00:03:07,530 --> 00:03:16,400
key bit here is open build service which

00:03:12,739 --> 00:03:19,890
builds actual binary packages of the

00:03:16,400 --> 00:03:23,160
source packages the same source package

00:03:19,890 --> 00:03:24,959
format as in Debian and well the later

00:03:23,160 --> 00:03:27,480
those binary packages get used to build

00:03:24,959 --> 00:03:32,040
images and all other interesting things

00:03:27,480 --> 00:03:37,140
so OBS some people here I guess know

00:03:32,040 --> 00:03:41,489
about what it is for rest of IV I'll

00:03:37,140 --> 00:03:44,820
tell in a moment sir OBS is a web

00:03:41,489 --> 00:03:46,620
service which does basically what

00:03:44,820 --> 00:03:53,820
they've done build infrastructure does

00:03:46,620 --> 00:03:57,120
plus it is hosting for Debian and other

00:03:53,820 --> 00:04:00,570
source packages so it can build binary

00:03:57,120 --> 00:04:03,060
packages all out of Debian sources spec

00:04:00,570 --> 00:04:05,250
files and lots of other things for all

00:04:03,060 --> 00:04:08,209
the different distributions so some

00:04:05,250 --> 00:04:11,190
people use it for example to build

00:04:08,209 --> 00:04:14,970
binary packages in various format for

00:04:11,190 --> 00:04:18,030
most like rpm dev and so on from there

00:04:14,970 --> 00:04:20,760
upstream doubles because openSUSE which

00:04:18,030 --> 00:04:25,610
develops this piece of software they

00:04:20,760 --> 00:04:29,010
provide access to the publicly hosted

00:04:25,610 --> 00:04:32,220
instance so for the purpose of a

00:04:29,010 --> 00:04:35,340
purchase in important things are

00:04:32,220 --> 00:04:39,000
is that just as s built it builds things

00:04:35,340 --> 00:04:41,190
in clean truths so it populates a truth

00:04:39,000 --> 00:04:44,760
of the current versions of the packages

00:04:41,190 --> 00:04:46,620
every time a package gets built it does

00:04:44,760 --> 00:04:48,780
it in a different way than s bill does

00:04:46,620 --> 00:04:50,430
because you need to manually tell it

00:04:48,780 --> 00:04:53,730
what packages you want in the truth it

00:04:50,430 --> 00:04:56,100
doesn't follow the essential bits in the

00:04:53,730 --> 00:04:58,770
Debian packages for example it has

00:04:56,100 --> 00:05:01,020
branching tools which is really great

00:04:58,770 --> 00:05:03,810
because you can make some modifications

00:05:01,020 --> 00:05:05,430
test build them see whether they can

00:05:03,810 --> 00:05:07,230
actually actually work download them

00:05:05,430 --> 00:05:10,500
install it on your system test them

00:05:07,230 --> 00:05:12,540
locally and send them for review which

00:05:10,500 --> 00:05:15,090
it also supposed it's supposed to review

00:05:12,540 --> 00:05:17,160
so it's a really good thing but it was

00:05:15,090 --> 00:05:18,840
the good thing about obvious and now the

00:05:17,160 --> 00:05:21,600
bad thing about obvious so the

00:05:18,840 --> 00:05:24,650
versioning system internally if you look

00:05:21,600 --> 00:05:27,650
at it it resembles get because it stores

00:05:24,650 --> 00:05:31,170
binary blobs it hashes them using the

00:05:27,650 --> 00:05:34,400
sha-256 of something and it references

00:05:31,170 --> 00:05:37,590
those internal hashes everywhere and

00:05:34,400 --> 00:05:40,440
well it it has a what the backend is

00:05:37,590 --> 00:05:44,520
written in perl which is an in not in in

00:05:40,440 --> 00:05:47,180
a good way of saying perl it implements

00:05:44,520 --> 00:05:52,070
a custom database in text files which

00:05:47,180 --> 00:05:54,240
references those blob hashes which is

00:05:52,070 --> 00:05:56,820
sort of a good thing but the way it is

00:05:54,240 --> 00:05:58,530
done it's not very good so I guess it

00:05:56,820 --> 00:06:01,230
needs a major rewrite but that's out of

00:05:58,530 --> 00:06:06,260
scope of this presentation in any case

00:06:01,230 --> 00:06:08,640
the branch in or the version control

00:06:06,260 --> 00:06:12,150
interface really resembles subversion

00:06:08,640 --> 00:06:14,190
even the Status Messages any room error

00:06:12,150 --> 00:06:15,930
messages are very similar so I was

00:06:14,190 --> 00:06:19,940
assuming initially that it actually uses

00:06:15,930 --> 00:06:23,190
SVN internally to store things but no so

00:06:19,940 --> 00:06:25,110
brunching in OBS is actually coping

00:06:23,190 --> 00:06:29,370
without preservation of history unlike

00:06:25,110 --> 00:06:32,790
in subversion so if if each each quarter

00:06:29,370 --> 00:06:35,340
we create a new branch of a purchase a

00:06:32,790 --> 00:06:37,710
new future release each time we do that

00:06:35,340 --> 00:06:41,010
we basically copy all packages into a

00:06:37,710 --> 00:06:45,629
new project and as we do that all

00:06:41,010 --> 00:06:48,629
history is gone so

00:06:45,629 --> 00:06:50,610
well this is the ugly bit on this

00:06:48,629 --> 00:06:53,839
screenshot you can see the revision log

00:06:50,610 --> 00:06:56,069
of a package called base files which is

00:06:53,839 --> 00:06:58,469
imported from Debian with some things on

00:06:56,069 --> 00:07:00,929
top of it so as you can see I've made

00:06:58,469 --> 00:07:02,399
three applause basically upload

00:07:00,929 --> 00:07:03,959
something and then I realized oh I've

00:07:02,399 --> 00:07:05,580
actually uploaded the broken package I

00:07:03,959 --> 00:07:07,110
pulled it again and there was something

00:07:05,580 --> 00:07:09,779
else was also missing so I will put it

00:07:07,110 --> 00:07:12,360
into the third time it's totally fine

00:07:09,779 --> 00:07:14,459
you can upload package as many the same

00:07:12,360 --> 00:07:17,490
package version as many times you like

00:07:14,459 --> 00:07:20,039
and as long it hasn't been built and

00:07:17,490 --> 00:07:22,889
used elsewhere it's it's still going to

00:07:20,039 --> 00:07:25,589
be you still have a chance to fix the

00:07:22,889 --> 00:07:27,569
errors you have introduced so at the

00:07:25,589 --> 00:07:29,819
very beginning as you can see the admin

00:07:27,569 --> 00:07:32,129
has branched this distribution from

00:07:29,819 --> 00:07:33,869
elsewhere and this is the first entry in

00:07:32,129 --> 00:07:35,789
the history it seems there's a button

00:07:33,869 --> 00:07:40,559
show also what happens if I press show

00:07:35,789 --> 00:07:43,499
all absolutely nothing nothing changes

00:07:40,559 --> 00:07:45,179
it shows only the same bit of history if

00:07:43,499 --> 00:07:47,189
you have deleted the original project

00:07:45,179 --> 00:07:48,839
from which this was branched you're

00:07:47,189 --> 00:07:54,809
never going to retrieve the rest of the

00:07:48,839 --> 00:07:57,509
history yeah so yeah review tools this

00:07:54,809 --> 00:08:00,689
is how one of those bits of history

00:07:57,509 --> 00:08:04,979
looks like it compares one change file

00:08:00,689 --> 00:08:08,069
with another change file and DSC with

00:08:04,979 --> 00:08:10,499
another DC and sometimes but not all the

00:08:08,069 --> 00:08:12,659
times it shows you the difference inside

00:08:10,499 --> 00:08:16,619
the Debian Taobao but sometimes it

00:08:12,659 --> 00:08:21,029
doesn't so in most cases it doesn't to

00:08:16,619 --> 00:08:22,860
be honest so the V process is a bit it's

00:08:21,029 --> 00:08:25,919
better than nothing but it's not really

00:08:22,860 --> 00:08:31,409
suitable for proper code review so why

00:08:25,919 --> 00:08:33,569
not use git indeed why Debian we have so

00:08:31,409 --> 00:08:38,099
many get workflows and all of them are

00:08:33,569 --> 00:08:40,469
correct at the same time and basically

00:08:38,099 --> 00:08:42,149
it's not a very good thing for the

00:08:40,469 --> 00:08:44,880
purpose of creating a derivative the

00:08:42,149 --> 00:08:50,029
distribution which would be able to pull

00:08:44,880 --> 00:08:54,389
over those histories and reuse them so

00:08:50,029 --> 00:08:57,899
so though even when those workflows have

00:08:54,389 --> 00:08:58,810
been followed according to the wall

00:08:57,899 --> 00:09:01,510
letter or

00:08:58,810 --> 00:09:02,980
a workflow of the law they are not

00:09:01,510 --> 00:09:05,520
always consistent people tend to commit

00:09:02,980 --> 00:09:07,930
things like get ignore they've been

00:09:05,520 --> 00:09:09,490
local source options which are not

00:09:07,930 --> 00:09:13,690
getting into the actual source packages

00:09:09,490 --> 00:09:17,380
and just people tend to forget files in

00:09:13,690 --> 00:09:21,150
in the git repository as they get

00:09:17,380 --> 00:09:23,830
cleaned on during the build dig it

00:09:21,150 --> 00:09:25,960
contrary to most of other workflows it

00:09:23,830 --> 00:09:28,120
prevents that by being very very

00:09:25,960 --> 00:09:32,620
opinionated about what you actually push

00:09:28,120 --> 00:09:34,180
and even well for many people

00:09:32,620 --> 00:09:37,720
unfortunately it doesn't support the

00:09:34,180 --> 00:09:40,510
workflows like because well it you need

00:09:37,720 --> 00:09:41,890
to teach it and to teach it a new

00:09:40,510 --> 00:09:44,320
workflow you basically have to be in

00:09:41,890 --> 00:09:47,830
Jackson all like as someone else who is

00:09:44,320 --> 00:09:50,920
involved with the upstream and sometimes

00:09:47,830 --> 00:09:53,440
you will have hard time convincing Ian

00:09:50,920 --> 00:09:56,500
to add a new workflow which may be

00:09:53,440 --> 00:09:59,020
broken his view anyway so they get solve

00:09:56,500 --> 00:10:02,620
this problem but it is used by a

00:09:59,020 --> 00:10:05,770
minority of people so you can usually

00:10:02,620 --> 00:10:07,510
even when you use dig it in your package

00:10:05,770 --> 00:10:11,050
yourself there's no guarantee that

00:10:07,510 --> 00:10:13,690
tomorrow someone is going to fix a

00:10:11,050 --> 00:10:15,640
release critical bug while you are being

00:10:13,690 --> 00:10:17,530
at a minute of content humbug and you

00:10:15,640 --> 00:10:19,390
just don't care that moment and they

00:10:17,530 --> 00:10:21,730
post something not using the get and

00:10:19,390 --> 00:10:25,540
this change won't be available and they

00:10:21,730 --> 00:10:27,670
get immediately it sort of when you dig

00:10:25,540 --> 00:10:29,950
it fetch probably it will be created

00:10:27,670 --> 00:10:32,830
this get change but it won't be in get

00:10:29,950 --> 00:10:35,170
itself yeah so yeah and probably some

00:10:32,830 --> 00:10:37,510
people still use all other version

00:10:35,170 --> 00:10:39,280
control systems even though we don't

00:10:37,510 --> 00:10:42,280
host them anymore in Debian but still

00:10:39,280 --> 00:10:46,150
they can someone else on SourceForge or

00:10:42,280 --> 00:10:47,890
somewhere to know yeah so a purchase

00:10:46,150 --> 00:10:50,860
already actually uses git but just for a

00:10:47,890 --> 00:10:53,170
bunch of packages it's mostly a git will

00:10:50,860 --> 00:10:56,350
build package with patches not applied

00:10:53,170 --> 00:10:58,180
slash deb 14 style with some minor

00:10:56,350 --> 00:10:59,770
differences because for some packages we

00:10:58,180 --> 00:11:01,690
actually an upstream and we want to

00:10:59,770 --> 00:11:02,380
avoid extra work so we keep Deb in

00:11:01,690 --> 00:11:03,850
directory

00:11:02,380 --> 00:11:06,940
well we just have one branch and

00:11:03,850 --> 00:11:08,980
multiple tags conform into the GBP

00:11:06,940 --> 00:11:11,250
expectations but some there are some

00:11:08,980 --> 00:11:13,740
changes minor changes

00:11:11,250 --> 00:11:16,350
so most of the a purchase package I'm

00:11:13,740 --> 00:11:19,829
not gonna get what were not indeed

00:11:16,350 --> 00:11:22,620
before this work started so for those

00:11:19,829 --> 00:11:26,040
who don't know what depth 14 is I will

00:11:22,620 --> 00:11:28,410
show a little bit of it on the next

00:11:26,040 --> 00:11:30,990
slide so basically it takes what get

00:11:28,410 --> 00:11:32,730
billed package already supports and add

00:11:30,990 --> 00:11:34,319
some features for supporting multiple

00:11:32,730 --> 00:11:36,870
stream releases multiple upstream

00:11:34,319 --> 00:11:39,509
branches there been releases derivatives

00:11:36,870 --> 00:11:41,519
and unfortunately not many people not as

00:11:39,509 --> 00:11:43,019
many people as I would like use it I

00:11:41,519 --> 00:11:45,089
also don't like it don't use it all the

00:11:43,019 --> 00:11:47,459
time because sometimes it's easier to

00:11:45,089 --> 00:11:49,230
just use the GBP defaults and not modify

00:11:47,459 --> 00:11:51,329
them because you would need to ship a

00:11:49,230 --> 00:11:52,889
new file in Debian directory it's you

00:11:51,329 --> 00:11:56,189
need to write it from scratch or copy

00:11:52,889 --> 00:11:58,350
from somewhere else anyway so this is

00:11:56,189 --> 00:12:00,870
what the 40 more or less looks like oh

00:11:58,350 --> 00:12:04,500
it's got cut off a bit yeah so you've

00:12:00,870 --> 00:12:06,089
got a branch for upstream sources where

00:12:04,500 --> 00:12:10,290
they basically are unpacked

00:12:06,089 --> 00:12:12,079
as they are in the git repository and

00:12:10,290 --> 00:12:16,620
you've got branches

00:12:12,079 --> 00:12:19,559
it's got anyway it was supposed to be a

00:12:16,620 --> 00:12:24,629
bit smaller yeah maybe

00:12:19,559 --> 00:12:27,660
no anyway so deepen changes apply it on

00:12:24,629 --> 00:12:29,730
top of the upstream branch and the

00:12:27,660 --> 00:12:32,639
approach in a separate branch called a

00:12:29,730 --> 00:12:34,949
bin master and each time you import a

00:12:32,639 --> 00:12:37,290
new upstream release you merge it onto

00:12:34,949 --> 00:12:40,610
that Debian master you do changes and

00:12:37,290 --> 00:12:43,439
you take a new release I will need to

00:12:40,610 --> 00:12:47,250
change the slide for the final version

00:12:43,439 --> 00:12:48,360
of the presentation yeah so this is just

00:12:47,250 --> 00:12:50,730
so wrong

00:12:48,360 --> 00:12:53,850
so in the purchased we are using

00:12:50,730 --> 00:12:56,389
slightly different version of this

00:12:53,850 --> 00:12:56,389
workflow

00:12:56,480 --> 00:13:04,259
so there is an Inc well we will be using

00:13:02,250 --> 00:13:05,699
because until this point we were using

00:13:04,259 --> 00:13:08,160
it inconsistently and just for some

00:13:05,699 --> 00:13:09,509
packages and this will be used more

00:13:08,160 --> 00:13:13,259
globally so we still preserve the

00:13:09,509 --> 00:13:16,350
upstream latest branch we use Debian

00:13:13,259 --> 00:13:18,180
slash release branches where sometimes

00:13:16,350 --> 00:13:19,949
we want packages not from the current

00:13:18,180 --> 00:13:21,600
release but from previous release or

00:13:19,949 --> 00:13:23,579
from experimental in that case we only

00:13:21,600 --> 00:13:24,990
take this branch and they may record

00:13:23,579 --> 00:13:28,410
until the release we take the packages

00:13:24,990 --> 00:13:30,930
from and on top of that branch we are

00:13:28,410 --> 00:13:34,860
sometimes we add our own changes

00:13:30,930 --> 00:13:36,720
well we prefix or suffix the versions

00:13:34,860 --> 00:13:40,260
with Co which means kelabra obviously

00:13:36,720 --> 00:13:44,209
and the number of the change so until

00:13:40,260 --> 00:13:44,209
now those changes were basically only

00:13:45,890 --> 00:13:53,190
I'll come to a bit later so there is an

00:13:50,610 --> 00:13:55,380
issue with upstream tarballs we need to

00:13:53,190 --> 00:13:58,950
store them somewhere if we want to

00:13:55,380 --> 00:14:02,160
completely get rid of classic Debian

00:13:58,950 --> 00:14:03,839
sauce packages but what I get is not

00:14:02,160 --> 00:14:04,410
very suitable for keeping upstream

00:14:03,839 --> 00:14:06,570
tarballs

00:14:04,410 --> 00:14:09,930
so there's a tool called pristine tar

00:14:06,570 --> 00:14:13,830
which recreates upstream tar balls from

00:14:09,930 --> 00:14:19,290
a upstream branch what branch having

00:14:13,830 --> 00:14:22,050
upstream sources its create a tar ball

00:14:19,290 --> 00:14:25,800
from get and then it applies some magic

00:14:22,050 --> 00:14:28,260
to using some binary Delta to recreate

00:14:25,800 --> 00:14:31,050
the exact copy of the original tar ball

00:14:28,260 --> 00:14:34,020
with all of the check sums much and all

00:14:31,050 --> 00:14:38,130
that stuff so it ships a an outdated

00:14:34,020 --> 00:14:39,899
version of SUSE zip to you and sheep's a

00:14:38,130 --> 00:14:42,390
slightly different slightly differently

00:14:39,899 --> 00:14:46,290
updated version of abc2 and also it

00:14:42,390 --> 00:14:48,029
ships a sleep literally quoting from the

00:14:46,290 --> 00:14:50,839
documentation sleep based cause if that

00:14:48,029 --> 00:14:54,000
is heavily based on that base disk zip

00:14:50,839 --> 00:14:56,370
and this is from the Mon page of this

00:14:54,000 --> 00:14:58,320
tool Frankenstein compressor and unholy

00:14:56,370 --> 00:15:01,529
combination of multiple Z programs that

00:14:58,320 --> 00:15:04,620
support ability file name of habla it's

00:15:01,529 --> 00:15:07,649
not very maintainable and it often fails

00:15:04,620 --> 00:15:09,839
especially it fails when at our changes

00:15:07,649 --> 00:15:12,089
underneath Haga stuff and I guess he's

00:15:09,839 --> 00:15:15,120
run into those the issues with

00:15:12,089 --> 00:15:17,430
reproducible builds probably because

00:15:15,120 --> 00:15:22,079
Pristina is not reproducible very much

00:15:17,430 --> 00:15:25,529
sometimes it is but often it is not yeah

00:15:22,079 --> 00:15:27,779
so it's wonderful it's magical and it

00:15:25,529 --> 00:15:30,120
often breaks and it's best to stay away

00:15:27,779 --> 00:15:32,520
from it and it's not a good idea to base

00:15:30,120 --> 00:15:36,080
a workflow for the whole distribution on

00:15:32,520 --> 00:15:38,149
it and with exit

00:15:36,080 --> 00:15:41,290
it only makes the situation worse

00:15:38,149 --> 00:15:44,000
because exert by by its design it's not

00:15:41,290 --> 00:15:46,790
guaranteed to produce the same bitstream

00:15:44,000 --> 00:15:50,690
on the output given the same input bit

00:15:46,790 --> 00:15:55,399
stream or byte stream so instead of

00:15:50,690 --> 00:15:57,019
presenta we decided to use git LFS which

00:15:55,399 --> 00:16:00,740
solves the problem completely by storing

00:15:57,019 --> 00:16:02,810
the files just as they are separately

00:16:00,740 --> 00:16:06,290
from gates but at the same time on the

00:16:02,810 --> 00:16:09,079
same infrastructure so there's no need

00:16:06,290 --> 00:16:12,350
to fight all of those multiple exhibits

00:16:09,079 --> 00:16:14,450
except which is a whole new beast and

00:16:12,350 --> 00:16:17,120
it's supported by github natively which

00:16:14,450 --> 00:16:19,790
we've already use and even if it weren't

00:16:17,120 --> 00:16:21,860
the protocol is quite simple and easy to

00:16:19,790 --> 00:16:23,810
implement in fact I just in my free time

00:16:21,860 --> 00:16:31,370
it started reimplemented and Python just

00:16:23,810 --> 00:16:33,680
fun it's doable so I've written a tool

00:16:31,370 --> 00:16:35,959
which replaces Pristina and has almost

00:16:33,680 --> 00:16:37,790
the same common line interface it will

00:16:35,959 --> 00:16:41,000
ultimately have the same command-line

00:16:37,790 --> 00:16:42,890
interface while ignoring unnecessary

00:16:41,000 --> 00:16:45,350
options and accepting all of them

00:16:42,890 --> 00:16:47,209
basically existing at the moment is

00:16:45,350 --> 00:16:50,990
still not complete and still have some

00:16:47,209 --> 00:16:52,690
bugs but it works even though it is a

00:16:50,990 --> 00:16:56,240
working prototype as a code and

00:16:52,690 --> 00:17:02,750
underneath it uses the reference la fast

00:16:56,240 --> 00:17:04,819
implementation so the idea is that we

00:17:02,750 --> 00:17:07,069
just as with presenter we create a new

00:17:04,819 --> 00:17:09,199
branch and we commit metadata to this

00:17:07,069 --> 00:17:11,660
branch but it the metadata is not X

00:17:09,199 --> 00:17:14,600
Delta files but it is our Gita love s

00:17:11,660 --> 00:17:16,040
texts a textual metadata which is really

00:17:14,600 --> 00:17:20,030
simple

00:17:16,040 --> 00:17:22,850
it basically stores the hash of the file

00:17:20,030 --> 00:17:26,569
and the size of it and the file is

00:17:22,850 --> 00:17:28,040
stored on the get FS infrastructure if

00:17:26,569 --> 00:17:30,200
you check out this branch you will

00:17:28,040 --> 00:17:34,340
magically get all of the tar balls ever

00:17:30,200 --> 00:17:36,559
committed to get reversed they will all

00:17:34,340 --> 00:17:40,190
be downloaded and you'll see them it's

00:17:36,559 --> 00:17:42,470
best not to check it out but if you've

00:17:40,190 --> 00:17:43,540
got a long history of committing

00:17:42,470 --> 00:17:47,120
tarballs

00:17:43,540 --> 00:17:49,000
but the tool I've written it works this

00:17:47,120 --> 00:17:51,640
around because it director look at the

00:17:49,000 --> 00:17:54,610
it finds the metadata file and it

00:17:51,640 --> 00:17:56,860
requests just that one file from guitar

00:17:54,610 --> 00:17:58,600
FS and checks it out in a directory of

00:17:56,860 --> 00:18:02,559
your choice or I think it's the current

00:17:58,600 --> 00:18:04,240
directory by default so but if for some

00:18:02,559 --> 00:18:07,270
reason this tool doesn't work you can

00:18:04,240 --> 00:18:09,159
still even even with normal get a

00:18:07,270 --> 00:18:10,900
lovefest tools you can just get one file

00:18:09,159 --> 00:18:12,370
but before you get all of them because

00:18:10,900 --> 00:18:15,250
otherwise it would be very difficult to

00:18:12,370 --> 00:18:17,470
to figure out what table was actually

00:18:15,250 --> 00:18:19,690
stored in on this branch because you

00:18:17,470 --> 00:18:22,090
would need to traverse the history back

00:18:19,690 --> 00:18:24,190
in time and see what was committed there

00:18:22,090 --> 00:18:28,120
or use tags or something else it's just

00:18:24,190 --> 00:18:34,960
not not beautiful enough so this is how

00:18:28,120 --> 00:18:37,390
- looks in a purchase so there's one

00:18:34,960 --> 00:18:40,539
more thing which you can see here so

00:18:37,390 --> 00:18:45,130
we've got two tags with this exactly

00:18:40,539 --> 00:18:49,919
same version the difference between them

00:18:45,130 --> 00:18:53,200
is a github CI file so the idea is that

00:18:49,919 --> 00:18:58,150
gillip CI is used to generate the source

00:18:53,200 --> 00:19:00,820
package files out of the gate branch so

00:18:58,150 --> 00:19:02,169
in case of - we have no changes so this

00:19:00,820 --> 00:19:04,720
is the only change unfortunately github

00:19:02,169 --> 00:19:07,330
doesn't allow you to avoid this thing

00:19:04,720 --> 00:19:10,330
and globally set a configuration for CI

00:19:07,330 --> 00:19:12,190
and it's been a bug up streaming back

00:19:10,330 --> 00:19:15,429
for very long time and there's no work

00:19:12,190 --> 00:19:17,700
on this happenin but I hope one day to

00:19:15,429 --> 00:19:20,919
get fixed and this Delta won't be needed

00:19:17,700 --> 00:19:23,350
so for base files it's slightly

00:19:20,919 --> 00:19:26,320
different because we still use an older

00:19:23,350 --> 00:19:28,390
version of base files so and there's no

00:19:26,320 --> 00:19:30,340
upstream as such because it's a native

00:19:28,390 --> 00:19:31,450
package so there's on a Debian Buster

00:19:30,340 --> 00:19:36,340
and approaches something-something

00:19:31,450 --> 00:19:40,299
branch with tags we've got a package

00:19:36,340 --> 00:19:42,940
called tar gplv2 because at the users of

00:19:40,299 --> 00:19:45,539
a purchase they usually don't want gplv3

00:19:42,940 --> 00:19:47,530
because of in the target devices

00:19:45,539 --> 00:19:49,360
elsewhere it's fine but not on the

00:19:47,530 --> 00:19:51,669
device itself which is in the car

00:19:49,360 --> 00:19:54,970
because of regulations which basically

00:19:51,669 --> 00:19:59,110
tell you that you cannot allow users to

00:19:54,970 --> 00:20:01,200
modify well the software of the car in

00:19:59,110 --> 00:20:03,750
some important bits and

00:20:01,200 --> 00:20:06,780
well this they might get issues with

00:20:03,750 --> 00:20:09,420
getting this certified so we still keep

00:20:06,780 --> 00:20:11,490
tell gol v3 which is an old version of

00:20:09,420 --> 00:20:12,750
thar with some patches applied so in

00:20:11,490 --> 00:20:13,020
this case it's more complicated than

00:20:12,750 --> 00:20:14,429
that

00:20:13,020 --> 00:20:15,780
it's basically we don't have a debian

00:20:14,429 --> 00:20:18,570
branch because there's not even upstream

00:20:15,780 --> 00:20:21,450
anymore because Devon doesn't ship gplv3

00:20:18,570 --> 00:20:25,500
tar and there are some changes we have

00:20:21,450 --> 00:20:29,010
and as you can see that to our Bowl 116

00:20:25,500 --> 00:20:30,870
which is the last gplv3 tar from debian

00:20:29,010 --> 00:20:34,860
and the next one which was never in

00:20:30,870 --> 00:20:37,290
debian at all and you can basically go

00:20:34,860 --> 00:20:39,960
to any of those apparatus tags in each

00:20:37,290 --> 00:20:42,660
can this script which checks out the tar

00:20:39,960 --> 00:20:44,730
ball into the dot dot directory and you

00:20:42,660 --> 00:20:47,490
can build the package just with the same

00:20:44,730 --> 00:20:50,730
y if you use the debian tag basic you

00:20:47,490 --> 00:20:53,250
will get exactly the same DSC as paul

00:20:50,730 --> 00:20:54,929
solt package has in devon except the GPG

00:20:53,250 --> 00:20:59,190
signature we should we cannot reproduce

00:20:54,929 --> 00:21:00,350
them obviously so this is how this thing

00:20:59,190 --> 00:21:03,030
works

00:21:00,350 --> 00:21:06,240
there's a dependency by pipeline in

00:21:03,030 --> 00:21:08,549
which well pipeline is a really like a

00:21:06,240 --> 00:21:10,020
strong word because it's just one step

00:21:08,549 --> 00:21:12,600
in the pipeline had a very long script

00:21:10,020 --> 00:21:17,490
at the moment so the script checks out

00:21:12,600 --> 00:21:21,660
of the tag it was pointed out or a

00:21:17,490 --> 00:21:25,860
branch if there is no tag that's the tar

00:21:21,660 --> 00:21:27,660
ball from from LFS installs build

00:21:25,860 --> 00:21:30,750
dependencies because lots of packages

00:21:27,660 --> 00:21:33,059
they need things like for example genome

00:21:30,750 --> 00:21:35,250
packages they usually generate control

00:21:33,059 --> 00:21:37,049
in and they also need some genome tools

00:21:35,250 --> 00:21:39,000
for that so you need sometimes they so

00:21:37,049 --> 00:21:41,850
build dependencies even if you're

00:21:39,000 --> 00:21:44,970
building just the source package so it

00:21:41,850 --> 00:21:48,030
builds the source package if the source

00:21:44,970 --> 00:21:50,610
package is being built not from attack

00:21:48,030 --> 00:21:53,370
but just say untagged commit it also

00:21:50,610 --> 00:21:55,770
modifies the latest change log entry

00:21:53,370 --> 00:21:58,380
adding a tilde to it so that you can see

00:21:55,770 --> 00:21:59,910
clearly that it's a snapshot the source

00:21:58,380 --> 00:22:01,919
package is being published as an

00:21:59,910 --> 00:22:03,660
artifact in github so you can still

00:22:01,919 --> 00:22:07,950
download it and within like two weeks or

00:22:03,660 --> 00:22:10,410
something and if it's a release version

00:22:07,950 --> 00:22:14,460
so if it's got a target applause it to a

00:22:10,410 --> 00:22:18,170
special section of the OBS where

00:22:14,460 --> 00:22:20,310
only snapshots being kept and then while

00:22:18,170 --> 00:22:22,470
other developers of the project can

00:22:20,310 --> 00:22:26,280
review the change and merge it to the

00:22:22,470 --> 00:22:29,540
main section so it's still

00:22:26,280 --> 00:22:32,160
work-in-progress I guess in what

00:22:29,540 --> 00:22:33,870
amounted something in Curitiba I will be

00:22:32,160 --> 00:22:35,310
presenting a more complete version of

00:22:33,870 --> 00:22:37,320
the same talk

00:22:35,310 --> 00:22:39,330
we are still importing packages with

00:22:37,320 --> 00:22:42,060
just imported like Co packages over

00:22:39,330 --> 00:22:46,890
purchase there still bugs being found in

00:22:42,060 --> 00:22:48,830
tools so this thing about build

00:22:46,890 --> 00:22:51,620
dependencies it eats quite a lot of

00:22:48,830 --> 00:22:56,070
processing power to install them and

00:22:51,620 --> 00:22:58,290
well have also not just processing power

00:22:56,070 --> 00:23:02,610
but bandwidth and other things so we

00:22:58,290 --> 00:23:05,820
might try to find some other more

00:23:02,610 --> 00:23:09,150
optimized workflow bit later when we get

00:23:05,820 --> 00:23:11,490
basic things running yes this issue with

00:23:09,150 --> 00:23:13,710
github need in the llamó file in a

00:23:11,490 --> 00:23:16,680
specific location which cannot be remote

00:23:13,710 --> 00:23:18,780
outside of the repo we try to find a

00:23:16,680 --> 00:23:20,430
workaround for it but at the moment both

00:23:18,780 --> 00:23:22,950
workarounds involve changes within

00:23:20,430 --> 00:23:25,080
github well auto divorce is one of them

00:23:22,950 --> 00:23:28,500
it's some sort of like assumed

00:23:25,080 --> 00:23:30,240
configuration for CI but it's you cannot

00:23:28,500 --> 00:23:31,200
change it from user interface it's

00:23:30,240 --> 00:23:33,600
pre-built

00:23:31,200 --> 00:23:36,990
with github and you have to push github

00:23:33,600 --> 00:23:42,420
to change the Yamla file being used for

00:23:36,990 --> 00:23:45,660
auto develops feature so Debian is

00:23:42,420 --> 00:23:47,850
unlikely going to have all packages and

00:23:45,660 --> 00:23:50,370
get anytime soon because we still have

00:23:47,850 --> 00:23:54,510
lots of people who don't use git don't

00:23:50,370 --> 00:23:58,950
like it and so on mmm I hope that one

00:23:54,510 --> 00:24:00,810
day with the LFS bit I've described is

00:23:58,950 --> 00:24:04,770
going to replace recent are completely

00:24:00,810 --> 00:24:07,530
and because I don't think many people

00:24:04,770 --> 00:24:11,460
are going to host Debian packages or

00:24:07,530 --> 00:24:12,300
packaging for software in Debian outside

00:24:11,460 --> 00:24:14,520
of salsa

00:24:12,300 --> 00:24:17,460
well maybe github but it also supports

00:24:14,520 --> 00:24:20,550
LFS I don't think people really many

00:24:17,460 --> 00:24:22,440
people keep them on custom sisig its

00:24:20,550 --> 00:24:26,150
service I know some people do but not

00:24:22,440 --> 00:24:28,320
many but for that I basically I need to

00:24:26,150 --> 00:24:30,000
write some Gabriel pocket

00:24:28,320 --> 00:24:33,080
built by cash integration which doesn't

00:24:30,000 --> 00:24:37,500
exist at the moment so there's still

00:24:33,080 --> 00:24:39,000
lots of things to be done but I hope we

00:24:37,500 --> 00:24:43,970
can integrate some of those things back

00:24:39,000 --> 00:24:47,160
in Debian and well that's it for now

00:24:43,970 --> 00:24:50,580
come to this the same talking receiver

00:24:47,160 --> 00:24:59,490
if you want to know more because there

00:24:50,580 --> 00:25:00,500
will be more stuff and that's it thanks

00:24:59,490 --> 00:25:03,990
Andrew

00:25:00,500 --> 00:25:11,910
is there any questions please come to

00:25:03,990 --> 00:25:13,740
the microphone in the overview graph in

00:25:11,910 --> 00:25:18,780
the beginning you had some jenkins box

00:25:13,740 --> 00:25:21,030
there did you try that to do the build

00:25:18,780 --> 00:25:26,430
automation because that doesn't need the

00:25:21,030 --> 00:25:28,500
external I the answer to that is yes the

00:25:26,430 --> 00:25:29,450
original git workflow was based on

00:25:28,500 --> 00:25:33,320
Jenkins

00:25:29,450 --> 00:25:39,060
unfortunately Jenkins has quite a lot of

00:25:33,320 --> 00:25:42,150
well let's go deficiencies and maybe

00:25:39,060 --> 00:25:44,970
it's partly the way we implemented it

00:25:42,150 --> 00:25:48,720
maybe it's something to do with Jenkins

00:25:44,970 --> 00:25:50,610
itself how it works but rather than

00:25:48,720 --> 00:25:52,980
fixing the Jenkins workflow which is

00:25:50,610 --> 00:25:57,900
still being used for some for packages

00:25:52,980 --> 00:26:01,200
where we are at the upstream we decided

00:25:57,900 --> 00:26:04,140
to go with git log because well in in

00:26:01,200 --> 00:26:07,800
this case github is more integrated with

00:26:04,140 --> 00:26:11,460
you immediately see when when you upload

00:26:07,800 --> 00:26:13,050
something that ok this this broke

00:26:11,460 --> 00:26:16,500
basically for some reason we also going

00:26:13,050 --> 00:26:20,190
to have some actual sea I slammed on top

00:26:16,500 --> 00:26:22,140
or start on top of this source like

00:26:20,190 --> 00:26:24,540
regeneration so we're going to have not

00:26:22,140 --> 00:26:26,580
just source packages but also an actual

00:26:24,540 --> 00:26:29,310
CI there's also another way of

00:26:26,580 --> 00:26:32,100
implementing what I was showing because

00:26:29,310 --> 00:26:33,480
OBS actually supposed remote in package

00:26:32,100 --> 00:26:39,510
storage instead of using the internal

00:26:33,480 --> 00:26:41,639
version control system but it's more

00:26:39,510 --> 00:26:43,649
difficult to implement

00:26:41,639 --> 00:26:46,950
playing with github ci gives us a result

00:26:43,649 --> 00:26:48,989
very quickly and unlike that one and the

00:26:46,950 --> 00:26:52,169
code tag already have they have some

00:26:48,989 --> 00:26:54,269
good remotes for Debian packages it it's

00:26:52,169 --> 00:26:57,659
very very basic and it doesn't work for

00:26:54,269 --> 00:27:00,419
for us so yeah

00:26:57,659 --> 00:27:06,629
Jenkins good work but it's a lot of work

00:27:00,419 --> 00:27:09,869
and also have a stitched off not well

00:27:06,629 --> 00:27:12,359
dragged issues basically with it the

00:27:09,869 --> 00:27:14,579
other bit is I'm using OBS for building

00:27:12,359 --> 00:27:16,589
RPM packages because that's really what

00:27:14,579 --> 00:27:19,349
it's meant for and it was looking at the

00:27:16,589 --> 00:27:21,389
Debian support and ran away screaming

00:27:19,349 --> 00:27:25,229
because it's absolutely horrible I think

00:27:21,389 --> 00:27:27,479
the way maybe I was looking at it

00:27:25,229 --> 00:27:30,119
wrongly but it's tracking the changes

00:27:27,479 --> 00:27:33,619
files including the checksums in there

00:27:30,119 --> 00:27:37,529
and stuff it absolutely didn't look like

00:27:33,619 --> 00:27:39,629
any Debian workflow so I was price of

00:27:37,529 --> 00:27:41,879
quite surprised to see that you're

00:27:39,629 --> 00:27:45,479
actually using it because it oh well we

00:27:41,879 --> 00:27:46,829
absolutely unusable well there are two

00:27:45,479 --> 00:27:50,190
issues first of all we're using a

00:27:46,829 --> 00:27:53,399
slightly patched version of OBS so there

00:27:50,190 --> 00:27:54,779
are some changes we will maintain which

00:27:53,399 --> 00:27:58,889
are unfortunately not in the upstream

00:27:54,779 --> 00:28:00,629
yet second thing is the well they are

00:27:58,889 --> 00:28:03,509
not very significant it's basically just

00:28:00,629 --> 00:28:05,099
some small tuning and maybe some of it

00:28:03,509 --> 00:28:06,839
has been up streams already because it's

00:28:05,099 --> 00:28:09,719
not me who works on obviously there are

00:28:06,839 --> 00:28:15,209
other people like Andrew Lee and look

00:28:09,719 --> 00:28:18,450
who's kind of Shero so unfortunately the

00:28:15,209 --> 00:28:21,779
obvious people they find they've been

00:28:18,450 --> 00:28:25,049
workflows really bad that's the opinion

00:28:21,779 --> 00:28:27,570
of I guess at least some people working

00:28:25,049 --> 00:28:29,639
on the upstream in obvious and the wiki

00:28:27,570 --> 00:28:31,409
page on on builds in Debian packages in

00:28:29,639 --> 00:28:34,619
OBS it was described in completely

00:28:31,409 --> 00:28:37,019
different work for with like rpm spec

00:28:34,619 --> 00:28:38,549
like thing which was generating

00:28:37,019 --> 00:28:40,979
internally source packages for their bin

00:28:38,549 --> 00:28:44,459
and not using the traditional workflow

00:28:40,979 --> 00:28:46,139
so I guess you may have found the wiki

00:28:44,459 --> 00:28:48,149
page we just read or some document which

00:28:46,139 --> 00:28:50,639
describes that workflow which is I find

00:28:48,149 --> 00:28:53,159
it horrible to be honest with templating

00:28:50,639 --> 00:28:55,610
and saying substitutions like like spec

00:28:53,159 --> 00:28:58,950
files basically but for Debian and

00:28:55,610 --> 00:29:01,050
well yeah just worse

00:28:58,950 --> 00:29:05,700
yeah because spec file is just one and

00:29:01,050 --> 00:29:07,620
there were like dozen files yeah so it

00:29:05,700 --> 00:29:09,930
also supposed that more Debian like

00:29:07,620 --> 00:29:15,750
workflow just not very immediate obvious

00:29:09,930 --> 00:29:16,560
I can show you later after the talk more

00:29:15,750 --> 00:29:23,190
questions

00:29:16,560 --> 00:29:24,570
oh did you have a question well then

00:29:23,190 --> 00:29:29,160
check the microphone

00:29:24,570 --> 00:29:30,570
I won't checked well the pristine and FS

00:29:29,160 --> 00:29:33,420
is packaged for Debian

00:29:30,570 --> 00:29:35,940
it's as I said it is currently a working

00:29:33,420 --> 00:29:37,980
prototype so I will package it for the

00:29:35,940 --> 00:29:41,250
event when I tagged the first release

00:29:37,980 --> 00:29:43,760
because currently the release is 2019

00:29:41,250 --> 00:29:46,290
till the pre and that's not very

00:29:43,760 --> 00:29:48,120
suitable for well I was doing

00:29:46,290 --> 00:29:51,390
last-minute changes before importing

00:29:48,120 --> 00:29:52,650
packages last week and there were quite

00:29:51,390 --> 00:29:55,110
a few of them they were well there were

00:29:52,650 --> 00:29:58,050
issues with important some of the trees

00:29:55,110 --> 00:30:00,240
so when I get it finally ready i will

00:29:58,050 --> 00:30:08,940
package for their venom well yeah

00:30:00,240 --> 00:30:15,810
because it looks looks yeah amazing so

00:30:08,940 --> 00:30:20,270
any more questions you said people start

00:30:15,810 --> 00:30:22,190
using git LFS because they using celsa I

00:30:20,270 --> 00:30:26,160
didn't understand why that was a

00:30:22,190 --> 00:30:30,930
connection requirement well it's not a

00:30:26,160 --> 00:30:34,610
requirement but well before we had salsa

00:30:30,930 --> 00:30:38,130
we didn't have any gift get to the first

00:30:34,610 --> 00:30:39,540
server-side instance anywhere on Devon

00:30:38,130 --> 00:30:41,960
infrastructure so you could use it

00:30:39,540 --> 00:30:44,760
elsewhere but not where within the dead

00:30:41,960 --> 00:30:47,580
reach of Debian basically and with

00:30:44,760 --> 00:30:50,190
github it is enabled installed was

00:30:47,580 --> 00:30:52,560
enabled by default I guess maybe or but

00:30:50,190 --> 00:30:54,660
it and it's supported within github so

00:30:52,560 --> 00:30:57,480
you don't have to do any you don't have

00:30:54,660 --> 00:30:58,980
to put any effort in setting it up right

00:30:57,480 --> 00:31:02,580
so pristine tour doesn't need a

00:30:58,980 --> 00:31:05,240
server-side thing but does well yeah yes

00:31:02,580 --> 00:31:05,240
right okay

00:31:08,270 --> 00:31:19,320
any further questions I don't see any

00:31:13,980 --> 00:31:20,110
question from the IRC so let's thank you

00:31:19,320 --> 00:31:26,410
again

00:31:20,110 --> 00:31:26,410

YouTube URL: https://www.youtube.com/watch?v=1F8r6hWQrL4


