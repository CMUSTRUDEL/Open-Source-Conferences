Title: Migration to testing and visualization
Publication date: 2019-06-14
Playlist: MiniDebConf Hamburg 2019
Description: 
	by Cyril Brulebois

At: MiniDebConf Hamburg 2019
https://wiki.debian.org/DebianEvents/de/2019/MiniDebConfHamburg
Room: main
Scheduled start: 2019-06-08 17:30:00
Captions: 
	00:00:04,570 --> 00:00:12,990
right so our next talk it's by QB about

00:00:09,700 --> 00:00:14,130
migration to testing and visualization

00:00:12,990 --> 00:00:16,910
thank you

00:00:14,130 --> 00:00:21,800
[Applause]

00:00:16,910 --> 00:00:24,689
so this is like a four part presentation

00:00:21,800 --> 00:00:28,860
I present some context talk about

00:00:24,689 --> 00:00:31,470
migration to testing as a general topic

00:00:28,860 --> 00:00:34,800
and then focus on visualization and then

00:00:31,470 --> 00:00:38,460
conclude with some perspectives so the

00:00:34,800 --> 00:00:41,129
context is we'll start with a show of

00:00:38,460 --> 00:00:45,330
hands who maintains a package at least

00:00:41,129 --> 00:00:48,030
one okay who keeps an eye on migration

00:00:45,330 --> 00:00:49,800
to testing like are you checking that

00:00:48,030 --> 00:00:51,500
your package my grades after some time

00:00:49,800 --> 00:00:56,219
and so on

00:00:51,500 --> 00:00:58,500
okay and what we did notice that once

00:00:56,219 --> 00:01:01,170
package was blocked by another package

00:00:58,500 --> 00:01:04,440
for reasons that you might or might not

00:01:01,170 --> 00:01:06,090
understand okay some people hopefully

00:01:04,440 --> 00:01:06,810
that should be interesting for other

00:01:06,090 --> 00:01:09,030
people

00:01:06,810 --> 00:01:13,590
not raising the hands or being a bit

00:01:09,030 --> 00:01:16,080
timid and whatever so are they anybody

00:01:13,590 --> 00:01:18,119
who had trouble grasping the whole

00:01:16,080 --> 00:01:20,009
picture like I've got this package

00:01:18,119 --> 00:01:22,130
depending or blocked by this other

00:01:20,009 --> 00:01:25,200
package and that whole package and so on

00:01:22,130 --> 00:01:31,500
okay still some people mmm I see

00:01:25,200 --> 00:01:34,950
secreting people poor people so I'm just

00:01:31,500 --> 00:01:38,189
following that too for context I'm not

00:01:34,950 --> 00:01:40,650
going to to advertise for my company but

00:01:38,189 --> 00:01:42,570
basically I do deviant stuff I'm a

00:01:40,650 --> 00:01:46,770
consultant I've been doing that for a

00:01:42,570 --> 00:01:49,470
couple of years it's a relief Debian

00:01:46,770 --> 00:01:52,799
focused and amongst the different

00:01:49,470 --> 00:01:55,590
services I offer is there's a systems

00:01:52,799 --> 00:02:00,979
administration and I'm going to focus on

00:01:55,590 --> 00:02:04,530
that part what I really like to use is

00:02:00,979 --> 00:02:08,130
centralized solution for administrative

00:02:04,530 --> 00:02:11,280
purposes because SSH into one and two

00:02:08,130 --> 00:02:15,360
and dozens and hundreds and thousands of

00:02:11,280 --> 00:02:17,640
servers was already not fine ten or

00:02:15,360 --> 00:02:21,150
twenty years ago but now we've got tools

00:02:17,640 --> 00:02:22,730
pipette and Sybil and whatever so I

00:02:21,150 --> 00:02:25,650
really like to use puppet

00:02:22,730 --> 00:02:28,919
so it's centralized you've got

00:02:25,650 --> 00:02:29,280
deployment maintenance the oldest array

00:02:28,919 --> 00:02:31,560
of

00:02:29,280 --> 00:02:34,260
you're set up that's Whitney nice you

00:02:31,560 --> 00:02:37,050
get automation but then how do you

00:02:34,260 --> 00:02:38,960
monitor that all you knows are working

00:02:37,050 --> 00:02:42,900
fine are getting updated weekly

00:02:38,960 --> 00:02:47,190
regularly that there is no recipe

00:02:42,900 --> 00:02:50,370
troubles with your your nodes there are

00:02:47,190 --> 00:02:53,160
a couple of solutions you can plug your

00:02:50,370 --> 00:02:57,360
puppet on to Foreman for example which

00:02:53,160 --> 00:03:01,200
is a bigger solution that can take care

00:02:57,360 --> 00:03:06,170
of the rolls installation maintenance

00:03:01,200 --> 00:03:09,290
and decommission cycle for your machines

00:03:06,170 --> 00:03:12,209
taking care of installation and then

00:03:09,290 --> 00:03:16,860
getting rid of all the secrets when you

00:03:12,209 --> 00:03:19,560
don't don't use a machine anymore but

00:03:16,860 --> 00:03:23,610
that's a big of a big hammer if you want

00:03:19,560 --> 00:03:26,700
to use pipette on a dozen or maybe three

00:03:23,610 --> 00:03:29,340
four machines there is also a puppet

00:03:26,700 --> 00:03:31,620
enterprise which I never used because I

00:03:29,340 --> 00:03:35,280
don't want to pay for free software or

00:03:31,620 --> 00:03:39,090
the additional bits and so I switch to

00:03:35,280 --> 00:03:42,590
some scripts that I wrote passing Yamada

00:03:39,090 --> 00:03:45,390
reports and then sending XMPP notices

00:03:42,590 --> 00:03:47,670
notifications so that I know that oh

00:03:45,390 --> 00:03:50,430
this node failed to update or that one

00:03:47,670 --> 00:03:54,090
just got this part updated or whatever

00:03:50,430 --> 00:03:58,350
which is nice as a complimentary entry

00:03:54,090 --> 00:04:00,420
point like I just upgraded or refresh my

00:03:58,350 --> 00:04:02,579
let's encrypt certificate or whatever

00:04:00,420 --> 00:04:04,950
you see that something moved there and

00:04:02,579 --> 00:04:08,519
it's on Sunday 3:00 in the morning

00:04:04,950 --> 00:04:12,110
that's good but it doesn't really scale

00:04:08,519 --> 00:04:14,850
I mean you don't want to be passing

00:04:12,110 --> 00:04:17,910
reports because maybe they are going to

00:04:14,850 --> 00:04:22,250
evolve a bit and then your passing is

00:04:17,910 --> 00:04:25,950
maybe not really optimal robot ever so

00:04:22,250 --> 00:04:28,470
we had a thing called put a dashboard

00:04:25,950 --> 00:04:29,580
which is no longer anymore which is not

00:04:28,470 --> 00:04:31,820
maintained anymore

00:04:29,580 --> 00:04:35,400
and which was replaced by profit board

00:04:31,820 --> 00:04:36,870
which is a web interface to something

00:04:35,400 --> 00:04:39,000
that will collect all the information

00:04:36,870 --> 00:04:42,240
you will want to get from your notes

00:04:39,000 --> 00:04:47,069
which is padded DB or good let

00:04:42,240 --> 00:04:50,210
use that except it was not in stable and

00:04:47,069 --> 00:04:53,699
it was not interesting when I tried to

00:04:50,210 --> 00:04:56,460
to look into it I'm also doing puppet

00:04:53,699 --> 00:04:58,860
sessions and monitoring is a really

00:04:56,460 --> 00:05:01,770
common question and I still couldn't

00:04:58,860 --> 00:05:04,349
answer oh just shoot just use puppet

00:05:01,770 --> 00:05:06,780
board with pepper DB because I never had

00:05:04,349 --> 00:05:10,770
a chance to actually install it and try

00:05:06,780 --> 00:05:12,199
it for real so what do you what do we do

00:05:10,770 --> 00:05:14,849
mm-hmm

00:05:12,199 --> 00:05:18,360
we will see why

00:05:14,849 --> 00:05:20,849
how migration to testing works so it's

00:05:18,360 --> 00:05:22,409
probably going to be some kind of topic

00:05:20,849 --> 00:05:27,150
you're familiar with but I'm going to

00:05:22,409 --> 00:05:30,870
throw just reminders and a few a few

00:05:27,150 --> 00:05:33,210
pointers so you understand what can how

00:05:30,870 --> 00:05:35,009
bad it can get when you package wants to

00:05:33,210 --> 00:05:37,259
migrate to the to testing but other

00:05:35,009 --> 00:05:42,030
packages don't want to or bugs or

00:05:37,259 --> 00:05:42,539
whatever so a package uploaded to

00:05:42,030 --> 00:05:44,970
ansible

00:05:42,539 --> 00:05:47,310
might not be old enough to migrate to

00:05:44,970 --> 00:05:50,009
testing we want packages to have changed

00:05:47,310 --> 00:05:52,979
to get installed tested and whatever by

00:05:50,009 --> 00:05:55,979
automated tools and by users it might

00:05:52,979 --> 00:05:58,710
have new OC bugs so the release critical

00:05:55,979 --> 00:06:01,039
bugs which are by definition the bugs

00:05:58,710 --> 00:06:04,440
that we don't want in the release so

00:06:01,039 --> 00:06:07,229
that's another reason you might have

00:06:04,440 --> 00:06:09,389
unsaid unsatisfiable dependencies and

00:06:07,229 --> 00:06:11,250
all build dependencies for example you

00:06:09,389 --> 00:06:13,740
depend on the package that has not

00:06:11,250 --> 00:06:15,900
reached testing yet or which got removed

00:06:13,740 --> 00:06:19,080
from testing so maybe you want to work

00:06:15,900 --> 00:06:21,990
on that whole package to help us get

00:06:19,080 --> 00:06:26,099
into testing and the same is true for

00:06:21,990 --> 00:06:29,009
the build dependencies as well you might

00:06:26,099 --> 00:06:31,469
have some other issue detected by pew

00:06:29,009 --> 00:06:34,199
parts which is an automated tool to test

00:06:31,469 --> 00:06:39,810
the installation upgrade and removal of

00:06:34,199 --> 00:06:44,250
packages or which is a little bit brand

00:06:39,810 --> 00:06:47,460
new on Debian scale continuous

00:06:44,250 --> 00:06:50,370
continuous integration issues we have we

00:06:47,460 --> 00:06:54,210
got some automated package tests which

00:06:50,370 --> 00:06:55,389
are run by a CI infra and if there are

00:06:54,210 --> 00:06:59,889
no new

00:06:55,389 --> 00:07:01,719
compared to other words this is a green

00:06:59,889 --> 00:07:03,969
light otherwise you can get blocked

00:07:01,719 --> 00:07:07,509
because there's a regression in the

00:07:03,969 --> 00:07:09,159
testing of your package of course the

00:07:07,509 --> 00:07:11,740
package can be kept out on purpose

00:07:09,159 --> 00:07:13,689
because those bad released in people

00:07:11,740 --> 00:07:17,139
don't want your package to with to which

00:07:13,689 --> 00:07:20,110
testing yet usually if you the one as a

00:07:17,139 --> 00:07:24,159
maintainer we don't want your package to

00:07:20,110 --> 00:07:26,710
reach testing you would use a nasty bug

00:07:24,159 --> 00:07:29,379
on prosper on purpose I don't want my

00:07:26,710 --> 00:07:32,139
package to migrate so I'm tagging it as

00:07:29,379 --> 00:07:35,680
not to candidate because it it has at

00:07:32,139 --> 00:07:37,840
least one RC but on occasion we've got

00:07:35,680 --> 00:07:40,180
some synchronization issue with the BTS

00:07:37,840 --> 00:07:42,669
and when looking at the list of RC bugs

00:07:40,180 --> 00:07:44,469
for all packages there were none so all

00:07:42,669 --> 00:07:47,590
packages became a candidate for this

00:07:44,469 --> 00:07:50,889
specific material so that was a bit of a

00:07:47,590 --> 00:07:54,159
mistake but anyway we can block packages

00:07:50,889 --> 00:07:57,639
on purpose and it can be blocked by the

00:07:54,159 --> 00:08:00,909
really bad di release manager because

00:07:57,639 --> 00:08:03,550
I'm preparing a new div DS and I don't

00:08:00,909 --> 00:08:08,949
want moving paths to move under my feet

00:08:03,550 --> 00:08:12,370
so I'm usually freezing freezing with

00:08:08,949 --> 00:08:14,680
block you dead hints that tells Whitney

00:08:12,370 --> 00:08:17,469
I don't want this specific package to

00:08:14,680 --> 00:08:19,719
migrate because I'm finishing up my

00:08:17,469 --> 00:08:23,440
preparation for this new Debian

00:08:19,719 --> 00:08:26,439
installer release and of course it can

00:08:23,440 --> 00:08:30,250
be any or all of those reasons because

00:08:26,439 --> 00:08:30,759
they are cumulative but then what do I

00:08:30,250 --> 00:08:33,399
do

00:08:30,759 --> 00:08:35,229
how do you do I understand what's going

00:08:33,399 --> 00:08:38,050
on why I'm being blocked where why

00:08:35,229 --> 00:08:40,180
there's no migration the first step is

00:08:38,050 --> 00:08:43,269
the package tracker so tracker dot DB

00:08:40,180 --> 00:08:46,329
underdog and then you stack your sauce

00:08:43,269 --> 00:08:49,120
package name there and there's also the

00:08:46,329 --> 00:08:52,630
excuses page which is generated by

00:08:49,120 --> 00:08:55,930
Britney O'Toole who controls migration

00:08:52,630 --> 00:08:58,839
to testing and of course you might have

00:08:55,930 --> 00:09:02,380
to follow some legs we'll see that with

00:08:58,839 --> 00:09:05,770
some some examples so the first one is

00:09:02,380 --> 00:09:08,630
Averell which in an incredibly stupid

00:09:05,770 --> 00:09:13,000
web server and

00:09:08,630 --> 00:09:16,160
in the testing migration area right here

00:09:13,000 --> 00:09:18,230
we see that it migrates after another

00:09:16,160 --> 00:09:22,280
package we see which is a Lanka boy

00:09:18,230 --> 00:09:24,860
that's one of its dependency and maybe

00:09:22,280 --> 00:09:27,140
it needs a new verb version or there's

00:09:24,860 --> 00:09:29,750
some kind of relationship that that

00:09:27,140 --> 00:09:32,210
means we should have those two packages

00:09:29,750 --> 00:09:36,380
and migrate together so if that other

00:09:32,210 --> 00:09:38,690
one is blocked because it has a nasty

00:09:36,380 --> 00:09:43,250
bug or whatever yours is getting locked

00:09:38,690 --> 00:09:46,880
as well it's also too young it's on it

00:09:43,250 --> 00:09:49,490
only was uploaded in last 20 24 hours or

00:09:46,880 --> 00:09:53,450
so few parts the automated installation

00:09:49,490 --> 00:09:57,050
upgrade removal tool says okay there's

00:09:53,450 --> 00:10:00,620
apparently no bill dependency issue that

00:09:57,050 --> 00:10:03,740
was tested on MD 64 and anyway because

00:10:00,620 --> 00:10:05,690
all those screenshots where I taken a

00:10:03,740 --> 00:10:08,300
couple of weeks ago we were already in

00:10:05,690 --> 00:10:10,820
freeze so we see the block request by

00:10:08,300 --> 00:10:12,950
the release team as well in the end it's

00:10:10,820 --> 00:10:15,410
not considered it's not a candidate we

00:10:12,950 --> 00:10:18,250
won't even try to migrate it when

00:10:15,410 --> 00:10:22,190
Whitnall will process all the back edges

00:10:18,250 --> 00:10:27,670
we can check the same the same package

00:10:22,190 --> 00:10:30,770
so with the update excuses your URL with

00:10:27,670 --> 00:10:34,310
hashtag Avril to locate the specific

00:10:30,770 --> 00:10:36,530
bits and oh that looks very much the

00:10:34,310 --> 00:10:39,260
same of course because that part is

00:10:36,530 --> 00:10:48,470
passed and inserted into the package

00:10:39,260 --> 00:10:51,200
tracker a less easy package is github we

00:10:48,470 --> 00:10:53,990
see that it migrates after many other

00:10:51,200 --> 00:10:56,210
packages so gitlab shell and many go

00:10:53,990 --> 00:10:59,180
long packages and ruby packages and

00:10:56,210 --> 00:11:02,600
whatever we see that the age requirement

00:10:59,180 --> 00:11:07,190
is okay it's it's got already 18 days

00:11:02,600 --> 00:11:11,060
out of 5 that was needed and it's

00:11:07,190 --> 00:11:14,960
missing some depends like note yes

00:11:11,060 --> 00:11:18,440
and Ruby Hamlet Hamlet whatever it also

00:11:14,960 --> 00:11:21,070
has an Aussie bug but pupils was okay so

00:11:18,440 --> 00:11:24,560
there are many reasons to keep it out of

00:11:21,070 --> 00:11:27,410
migration but at least one part was okay

00:11:24,560 --> 00:11:30,500
and it's also blocked because we are

00:11:27,410 --> 00:11:34,040
still in freeze and blah blah if we look

00:11:30,500 --> 00:11:37,820
at excuse this page the it's slightly

00:11:34,040 --> 00:11:42,560
different but we can imagine how this

00:11:37,820 --> 00:11:47,870
one was passed and then inserted into

00:11:42,560 --> 00:11:49,880
the tracker but then if you want to get

00:11:47,870 --> 00:11:52,660
the whole picture you get to click on

00:11:49,880 --> 00:11:56,990
each and every of those packages the

00:11:52,660 --> 00:11:59,090
gitlab shell the Ruby see the Golan blah

00:11:56,990 --> 00:12:02,150
blah blah and so on and maybe those

00:11:59,090 --> 00:12:04,730
packages also have many reason for not

00:12:02,150 --> 00:12:06,820
being candidate for migration so what do

00:12:04,730 --> 00:12:10,370
I do

00:12:06,820 --> 00:12:12,980
let's go into the visor realization

00:12:10,370 --> 00:12:15,260
topic the first solution is pen and

00:12:12,980 --> 00:12:17,320
pepper is really plain simple you get a

00:12:15,260 --> 00:12:20,750
pen some paper and you draw graphs

00:12:17,320 --> 00:12:22,670
manually but at some point when it's

00:12:20,750 --> 00:12:25,040
really a big graph you might lose your

00:12:22,670 --> 00:12:26,600
count and then oh I don't have any place

00:12:25,040 --> 00:12:28,550
anymore so I'm going to draw some arrows

00:12:26,600 --> 00:12:29,210
here and there and it's going to be a

00:12:28,550 --> 00:12:31,340
big mess

00:12:29,210 --> 00:12:34,490
also I'm not gonna notice I'm not going

00:12:31,340 --> 00:12:38,120
to even try that another solution is

00:12:34,490 --> 00:12:40,190
manual gravis gravis is a set of tools

00:12:38,120 --> 00:12:44,690
that makes it possible to describe some

00:12:40,190 --> 00:12:47,120
graphs by using some text and telling

00:12:44,690 --> 00:12:49,310
the tool okay I've got this node

00:12:47,120 --> 00:12:51,560
connected to that no this node connect

00:12:49,310 --> 00:12:55,700
it to that node you can add some colors

00:12:51,560 --> 00:13:00,860
you can make it a directed or not

00:12:55,700 --> 00:13:03,890
directed graph and so on and you can of

00:13:00,860 --> 00:13:06,740
course try to automate it so what I did

00:13:03,890 --> 00:13:08,600
first was not try the first solution and

00:13:06,740 --> 00:13:13,040
skip to the second solution which is

00:13:08,600 --> 00:13:15,080
manual graphics the algorithm is really

00:13:13,040 --> 00:13:17,920
simple you start with the package or

00:13:15,080 --> 00:13:21,380
interested in so that might be Papa DB

00:13:17,920 --> 00:13:24,460
you click all the links to all involved

00:13:21,380 --> 00:13:29,660
packages and on your

00:13:24,460 --> 00:13:31,700
dot file you insert links between Papa

00:13:29,660 --> 00:13:34,310
DB and the first package Papa DB and the

00:13:31,700 --> 00:13:36,680
second package and so on and then for

00:13:34,310 --> 00:13:38,900
each and every package you click on you

00:13:36,680 --> 00:13:42,350
insert the same kind of links and you

00:13:38,900 --> 00:13:44,690
will build the whole graph this way of

00:13:42,350 --> 00:13:46,810
course you do that recursively because

00:13:44,690 --> 00:13:50,600
you want to get the whole picture and

00:13:46,810 --> 00:13:53,360
you might want to be extra careful not

00:13:50,600 --> 00:13:55,370
to forget one package and not to do the

00:13:53,360 --> 00:13:58,960
same package over and over again and

00:13:55,370 --> 00:14:02,300
that can happen for example Papa DB is

00:13:58,960 --> 00:14:04,280
about Ruby and closure packages that I'm

00:14:02,300 --> 00:14:07,340
not familiar with so all the package

00:14:04,280 --> 00:14:09,410
names look the same to me and you need

00:14:07,340 --> 00:14:12,080
to be extra careful even to have some

00:14:09,410 --> 00:14:16,430
kind of methodology when it comes to big

00:14:12,080 --> 00:14:20,000
sets of packages so this is an examples

00:14:16,430 --> 00:14:24,080
to an example to show you the graph is

00:14:20,000 --> 00:14:29,020
syntax we are on a digraph so directed

00:14:24,080 --> 00:14:32,630
graph we want arrows to have a direction

00:14:29,020 --> 00:14:35,300
I'm going from left to right all the

00:14:32,630 --> 00:14:36,890
nodes are going to shape with the box by

00:14:35,300 --> 00:14:40,910
default we've got an ellipsis which

00:14:36,890 --> 00:14:43,940
makes it larger and less easy to read

00:14:40,910 --> 00:14:44,570
and this is the first part the first

00:14:43,940 --> 00:14:48,230
step

00:14:44,570 --> 00:14:51,560
/ / DB a row and the many packages

00:14:48,230 --> 00:14:55,190
depending on and I use a color code blue

00:14:51,560 --> 00:14:59,930
for some reason and then for each and

00:14:55,190 --> 00:15:04,600
every package I iterated and then added

00:14:59,930 --> 00:15:08,540
all the links to get the global thing

00:15:04,600 --> 00:15:14,680
and this is what we get after way too

00:15:08,540 --> 00:15:17,510
many steps that's a total of 36

00:15:14,680 --> 00:15:20,870
transition or connections between nodes

00:15:17,510 --> 00:15:23,020
and we can see Papa DB on the far left

00:15:20,870 --> 00:15:25,820
depending on a set of packages which

00:15:23,020 --> 00:15:30,410
themselves might depend on some other

00:15:25,820 --> 00:15:33,410
subsets of packages and basically I if I

00:15:30,410 --> 00:15:37,089
want it we have property B in this thing

00:15:33,410 --> 00:15:41,919
I might need to look into each and every

00:15:37,089 --> 00:15:46,329
of all those packages so I did that

00:15:41,919 --> 00:15:49,989
I checked the RC bugs and most of them

00:15:46,329 --> 00:15:52,359
were failure to build from sauce and I

00:15:49,989 --> 00:15:56,079
try to fix them or don't get them when I

00:15:52,359 --> 00:16:00,059
couldn't reproduce them the common bugs

00:15:56,079 --> 00:16:03,069
were test failures for closure packages

00:16:00,059 --> 00:16:05,349
compared to other test shoots they're a

00:16:03,069 --> 00:16:07,389
bit awkward because there is no entry

00:16:05,349 --> 00:16:09,699
point you don't say hey when the test

00:16:07,389 --> 00:16:13,839
shoot you're supposed to go and find all

00:16:09,699 --> 00:16:16,719
closure test cases and run them and for

00:16:13,839 --> 00:16:19,299
a number of packages running them in a

00:16:16,719 --> 00:16:22,299
specific order was fine and in a

00:16:19,299 --> 00:16:24,039
different order led to some failures so

00:16:22,299 --> 00:16:26,829
you had to find a way to run them in the

00:16:24,039 --> 00:16:28,619
right order it was a bit strange at

00:16:26,829 --> 00:16:31,839
first because some people were

00:16:28,619 --> 00:16:35,799
reproducing the bugs all the time and me

00:16:31,839 --> 00:16:39,189
none I just couldn't until we figured

00:16:35,799 --> 00:16:43,329
that the test cases were found by the

00:16:39,189 --> 00:16:45,879
fine utility which contrary to LS is not

00:16:43,329 --> 00:16:48,429
sorting the outputs so it really depends

00:16:45,879 --> 00:16:50,739
on your file system all the files were

00:16:48,429 --> 00:16:54,579
copied what happened before and well and

00:16:50,739 --> 00:16:56,649
whatever so I cheated a bit because

00:16:54,579 --> 00:16:58,389
there were apparently no meta data to

00:16:56,649 --> 00:17:01,569
tell you in which way you should run the

00:16:58,389 --> 00:17:04,089
test so it was basically I went fine

00:17:01,569 --> 00:17:08,799
then I thought all the files and if that

00:17:04,089 --> 00:17:11,110
works I do I include this specific order

00:17:08,799 --> 00:17:14,529
that works at least for me right now in

00:17:11,110 --> 00:17:16,569
the Debian world's file and that goes if

00:17:14,529 --> 00:17:18,789
that doesn't work you try to sort them

00:17:16,569 --> 00:17:25,240
in reverse order because that might work

00:17:18,789 --> 00:17:27,009
and after a while a few packages needed

00:17:25,240 --> 00:17:28,749
to have some really specific order so

00:17:27,009 --> 00:17:31,450
you had to encode I want to run that

00:17:28,749 --> 00:17:34,769
test and that test and that test and for

00:17:31,450 --> 00:17:39,549
this specific version that works so

00:17:34,769 --> 00:17:42,429
we've got a few failures in as in some

00:17:39,549 --> 00:17:44,860
bugs where I don't credit to important

00:17:42,429 --> 00:17:48,220
or just close because we couldn't really

00:17:44,860 --> 00:17:49,950
use them so I needed some help to figure

00:17:48,220 --> 00:17:52,800
out oh but that one is

00:17:49,950 --> 00:17:54,630
not okay as some packages migrated to

00:17:52,800 --> 00:17:57,840
testing because the last box word

00:17:54,630 --> 00:18:00,450
ungraded or closed and then we needed to

00:17:57,840 --> 00:18:03,990
open or grade them again and then fix

00:18:00,450 --> 00:18:07,500
for real but anyway after a few days

00:18:03,990 --> 00:18:11,490
more many packages fixed or worked

00:18:07,500 --> 00:18:16,110
around or whatever and with you were a

00:18:11,490 --> 00:18:20,280
civics but what do I do now I looked at

00:18:16,110 --> 00:18:22,560
the excuses again and we dude the graph

00:18:20,280 --> 00:18:24,180
manually that was way too painful the

00:18:22,560 --> 00:18:27,600
first time so you don't want to do that

00:18:24,180 --> 00:18:30,660
a second time so maybe I should have I

00:18:27,600 --> 00:18:33,660
should have done that before but we want

00:18:30,660 --> 00:18:35,970
to script it to automate it so switch to

00:18:33,660 --> 00:18:37,400
the third solution which is automated

00:18:35,970 --> 00:18:40,230
methods

00:18:37,400 --> 00:18:42,960
years ago I was a brand-new listing

00:18:40,230 --> 00:18:45,630
member dealing with this transition and

00:18:42,960 --> 00:18:47,640
we had some big set of packages that

00:18:45,630 --> 00:18:49,710
were being blocked oh that's exactly the

00:18:47,640 --> 00:18:52,860
same issue where we are having here and

00:18:49,710 --> 00:18:56,760
I did some preliminary work looking at

00:18:52,860 --> 00:18:59,550
the HTML version of the excuses so that

00:18:56,760 --> 00:19:03,030
involved I'm not proud of it passing

00:18:59,550 --> 00:19:04,950
HTML sometimes the strings would be

00:19:03,030 --> 00:19:07,560
slightly different because Brittany

00:19:04,950 --> 00:19:09,900
people didn't know or didn't want to

00:19:07,560 --> 00:19:12,810
acknowledge I was actually looking at

00:19:09,900 --> 00:19:17,790
the exact output so you needed to update

00:19:12,810 --> 00:19:20,180
it a little and it was about time that

00:19:17,790 --> 00:19:23,700
we switch to machine readable things and

00:19:20,180 --> 00:19:26,190
of course we've got the excuses HTML

00:19:23,700 --> 00:19:28,950
output which is useful to copy/paste

00:19:26,190 --> 00:19:31,050
into those worker or whatever but for a

00:19:28,950 --> 00:19:33,500
number of years with we've had some

00:19:31,050 --> 00:19:40,130
Yammer output as well which is more

00:19:33,500 --> 00:19:43,380
likely to be usable for script this is a

00:19:40,130 --> 00:19:47,040
really small extract because it can be a

00:19:43,380 --> 00:19:50,970
bit big of the acutest file in at the

00:19:47,040 --> 00:19:53,520
beginning of the month of February this

00:19:50,970 --> 00:19:56,790
is the pipette DB entry we see a

00:19:53,520 --> 00:20:00,269
dependency item with the migrate after

00:19:56,790 --> 00:20:04,440
and all the packages we've seen before

00:20:00,269 --> 00:20:07,909
the excuses item which is basically one

00:20:04,440 --> 00:20:10,469
entry per each line of the HTML output

00:20:07,909 --> 00:20:12,119
we see that this package is not a

00:20:10,469 --> 00:20:18,029
candidate for all the reasons we are

00:20:12,119 --> 00:20:20,190
going to see a little below so this is

00:20:18,029 --> 00:20:22,649
Papa DBE some metadata bla bla bla bla

00:20:20,190 --> 00:20:25,440
bla and migration policy verdict says

00:20:22,649 --> 00:20:28,109
rejected permanently because it doesn't

00:20:25,440 --> 00:20:31,950
fulfill the migration criteria so it's

00:20:28,109 --> 00:20:34,289
not a candidate and then the police info

00:20:31,950 --> 00:20:37,229
block is going to tell us all about all

00:20:34,289 --> 00:20:41,159
the failures of this specific package it

00:20:37,229 --> 00:20:43,459
has 100 in 13 days in unstable it needed

00:20:41,159 --> 00:20:47,190
5 that's a pass that's a green light

00:20:43,459 --> 00:20:50,849
auto package test is not OK it was

00:20:47,190 --> 00:20:56,399
already always failing on amd64 we've

00:20:50,849 --> 00:20:58,589
got some links and so on but and we were

00:20:56,399 --> 00:21:00,929
corrupt here the verdict is passed

00:20:58,589 --> 00:21:03,719
because it has always failed so maybe

00:21:00,929 --> 00:21:06,239
there's some issue with the CI infra and

00:21:03,719 --> 00:21:10,889
whatever so this specific part was not a

00:21:06,239 --> 00:21:14,070
blocker but once you get a green passing

00:21:10,889 --> 00:21:16,349
test you must then reproduce the passing

00:21:14,070 --> 00:21:21,509
test and not regress on that specific

00:21:16,349 --> 00:21:23,940
test we see that at that moment the

00:21:21,509 --> 00:21:26,159
package was not blocked by any hint from

00:21:23,940 --> 00:21:27,989
the release managers the bill depends

00:21:26,159 --> 00:21:30,839
check the built using checks and so on

00:21:27,989 --> 00:21:35,269
and so on and finally the Aussie backs

00:21:30,839 --> 00:21:37,769
part which is blocking the last line is

00:21:35,269 --> 00:21:39,659
rejected permanently for this specific

00:21:37,769 --> 00:21:44,539
part because there's a nasty bug

00:21:39,659 --> 00:21:44,539
basically Papa DB was not working at all

00:21:48,019 --> 00:21:57,029
when you get the whole ml file and then

00:21:53,129 --> 00:21:59,940
do magic stuff and habré's what I'm

00:21:57,029 --> 00:22:03,690
generating is an HTML page with a link

00:21:59,940 --> 00:22:06,749
of all clusters so group of packages

00:22:03,690 --> 00:22:12,560
that are linked together and we can see

00:22:06,749 --> 00:22:15,230
what it looks like so we got here as

00:22:12,560 --> 00:22:17,540
I guess smart analysis which depends on

00:22:15,230 --> 00:22:19,400
many many packages and so on we're not

00:22:17,540 --> 00:22:22,220
going to dive into that one because it's

00:22:19,400 --> 00:22:24,680
a bit of a big graph the second one is

00:22:22,220 --> 00:22:27,580
even worse because i'm ainlina me an

00:22:24,680 --> 00:22:27,580
amuse and so on

00:22:27,670 --> 00:22:37,490
but we can see more if your graph to

00:22:34,370 --> 00:22:40,580
look into is next cloud or kubernetes or

00:22:37,490 --> 00:22:42,770
whatever and I mention all the package

00:22:40,580 --> 00:22:45,190
names so we can look for a specific

00:22:42,770 --> 00:22:49,160
package in in that page and CD

00:22:45,190 --> 00:22:52,970
associated graph and I hand-picked a

00:22:49,160 --> 00:22:56,180
couple of graphs to show some actual

00:22:52,970 --> 00:22:58,610
examples so this is our the really

00:22:56,180 --> 00:23:01,880
incredibly stupid web server whatever

00:22:58,610 --> 00:23:04,490
which depends on Elanco by which itself

00:23:01,880 --> 00:23:06,290
depends on a language so we could have

00:23:04,490 --> 00:23:09,520
clicked the links there were just two of

00:23:06,290 --> 00:23:13,760
them and it was really straightforward

00:23:09,520 --> 00:23:16,640
here we've got some let's say pooling or

00:23:13,760 --> 00:23:20,570
ecosystem which is really small with on

00:23:16,640 --> 00:23:23,570
the edge stuff here we've got Cody

00:23:20,570 --> 00:23:25,760
platform so the Kodiak ecosystem makes

00:23:23,570 --> 00:23:28,040
it possible to have some kind of media

00:23:25,760 --> 00:23:30,350
box or whatever on your on your system

00:23:28,040 --> 00:23:32,570
so we see that there's a package

00:23:30,350 --> 00:23:35,000
providing many add-ons depending on many

00:23:32,570 --> 00:23:36,830
other bits and pieces which themself

00:23:35,000 --> 00:23:40,160
depend on a single platform package

00:23:36,830 --> 00:23:44,540
probably that provides some common tools

00:23:40,160 --> 00:23:49,280
libraries and whatever here we can see

00:23:44,540 --> 00:23:54,200
how the octave ecosystem can be linked

00:23:49,280 --> 00:23:59,300
after some time with GCC which itself is

00:23:54,200 --> 00:24:03,350
involved in many tools built to chain or

00:23:59,300 --> 00:24:05,330
cross built to chains and so on this is

00:24:03,350 --> 00:24:08,030
an example for the Pearl community with

00:24:05,330 --> 00:24:10,190
so many packages depending o an HTML

00:24:08,030 --> 00:24:12,680
parser okay I'm not alone doing that

00:24:10,190 --> 00:24:15,440
that's comforting

00:24:12,680 --> 00:24:16,510
a small example of a couple of PHP

00:24:15,440 --> 00:24:20,230
packages

00:24:16,510 --> 00:24:23,360
that's another will be base set of tools

00:24:20,230 --> 00:24:25,360
and we can see that some people don't

00:24:23,360 --> 00:24:27,850
really want to care about the

00:24:25,360 --> 00:24:31,390
to testing stuff and just upload all the

00:24:27,850 --> 00:24:34,120
packages and we can see that we've got

00:24:31,390 --> 00:24:36,100
quite so many our packages depending on

00:24:34,120 --> 00:24:39,190
a hobby which is not a candidate because

00:24:36,100 --> 00:24:44,559
that was a new brand new obscene version

00:24:39,190 --> 00:24:47,200
and whatever so thankfully that's quite

00:24:44,559 --> 00:24:50,650
a self-contained ecosystem and it

00:24:47,200 --> 00:24:52,809
usually doesn't break or block too many

00:24:50,650 --> 00:24:55,020
packages but on occasion it's not really

00:24:52,809 --> 00:24:57,280
that nice to release it in people and

00:24:55,020 --> 00:25:02,110
package maintainers that are playing by

00:24:57,280 --> 00:25:08,590
the rules and trying to be civil to each

00:25:02,110 --> 00:25:13,090
other anyways this is firmware update

00:25:08,590 --> 00:25:17,080
package which will many sign packages

00:25:13,090 --> 00:25:20,140
that's a topic for another another talk

00:25:17,080 --> 00:25:23,280
of course but we've got some packages

00:25:20,140 --> 00:25:26,770
depending on their own sauce packages

00:25:23,280 --> 00:25:29,530
the same for shim which is the really

00:25:26,770 --> 00:25:32,740
first bit started in secure boot

00:25:29,530 --> 00:25:35,169
environments if you wonder why

00:25:32,740 --> 00:25:37,660
kubernetes cannot migrate into testing

00:25:35,169 --> 00:25:39,700
or couldn't at the time it's because of

00:25:37,660 --> 00:25:43,690
all with some golden packages as well

00:25:39,700 --> 00:25:50,169
and that's about it for the small

00:25:43,690 --> 00:25:53,290
demonstration here there's a richer

00:25:50,169 --> 00:25:56,980
graph so basically when I was still

00:25:53,290 --> 00:26:01,419
working on Papa DB with my handwritten

00:25:56,980 --> 00:26:05,169
graph I had some metadata for example

00:26:01,419 --> 00:26:09,540
the own is called closure aussie bug and

00:26:05,169 --> 00:26:12,820
I noted I had it in a new notation

00:26:09,540 --> 00:26:15,660
telling me that was an FTP FS

00:26:12,820 --> 00:26:19,440
we see that pantomime closure was

00:26:15,660 --> 00:26:22,750
waiting on tika which itself had some

00:26:19,440 --> 00:26:27,190
ftfs bug but also some CVS or some

00:26:22,750 --> 00:26:29,140
security issue so thank you for the to

00:26:27,190 --> 00:26:31,929
the security team for helping me figure

00:26:29,140 --> 00:26:36,429
out should we try to Greta car or black

00:26:31,929 --> 00:26:38,539
bug fixes or what do I do because I

00:26:36,429 --> 00:26:41,899
don't speak Java at all and

00:26:38,539 --> 00:26:47,599
Crozier no Maria Loschiavo not at all

00:26:41,899 --> 00:26:53,169
hopefully I had some help and we could

00:26:47,599 --> 00:26:56,479
think the there could be more more

00:26:53,169 --> 00:26:59,899
information on that graph for example we

00:26:56,479 --> 00:27:04,059
could have the aging policy is this

00:26:59,899 --> 00:27:07,039
package ready or was that just uploaded

00:27:04,059 --> 00:27:09,619
do we have some specific hint for

00:27:07,039 --> 00:27:12,349
example does releasing manager a

00:27:09,619 --> 00:27:13,849
releasing member have a specific hint

00:27:12,349 --> 00:27:16,309
for this package do we want it to

00:27:13,849 --> 00:27:18,859
migrate urgently we've got a specific

00:27:16,309 --> 00:27:21,379
hint for that and so on but then the

00:27:18,859 --> 00:27:26,529
graph would get bigger and bigger so I'm

00:27:21,379 --> 00:27:31,069
kind of looking for input is there any

00:27:26,529 --> 00:27:33,409
specific visualization format that would

00:27:31,069 --> 00:27:36,079
allow me to have many information and

00:27:33,409 --> 00:27:38,839
then only present them if you click on a

00:27:36,079 --> 00:27:41,059
specific set of packages or show me all

00:27:38,839 --> 00:27:43,159
the aging information or whatever and

00:27:41,059 --> 00:27:46,940
I'm really new at this so I'm really

00:27:43,159 --> 00:27:49,759
looking forward to hearing from you to

00:27:46,940 --> 00:27:52,039
make it as useful as possible while yet

00:27:49,759 --> 00:27:54,529
making it easy to actually get the big

00:27:52,039 --> 00:28:00,979
picture which was really the the point

00:27:54,529 --> 00:28:04,549
of my working on that perspectives so as

00:28:00,979 --> 00:28:06,979
I just told you I would like to put more

00:28:04,549 --> 00:28:09,589
information in the graph it's really

00:28:06,979 --> 00:28:12,049
easy it's all in the excuse this file

00:28:09,589 --> 00:28:14,659
generated by Britney the question is how

00:28:12,049 --> 00:28:17,209
do we render it and we incorporate in

00:28:14,659 --> 00:28:20,359
more information in there so aging hints

00:28:17,209 --> 00:28:23,059
and so on so yeah that basically

00:28:20,359 --> 00:28:25,519
summarizes what I just told you and the

00:28:23,059 --> 00:28:28,459
last point is of great ml great

00:28:25,519 --> 00:28:30,469
importance to me the fact that we I

00:28:28,459 --> 00:28:33,679
would like the older stuff to be

00:28:30,469 --> 00:28:35,329
accessible because I don't want blind or

00:28:33,679 --> 00:28:37,339
low vision people not to be able to

00:28:35,329 --> 00:28:39,469
figure out on their own and have to

00:28:37,339 --> 00:28:41,829
resort to sighted people 12 them figure

00:28:39,469 --> 00:28:45,559
out what's going on with the packages so

00:28:41,829 --> 00:28:49,219
rendering in PNG or SVG is nice enough

00:28:45,559 --> 00:28:51,590
for many people but we exclude some more

00:28:49,219 --> 00:28:54,110
people so I would like I would

00:28:51,590 --> 00:28:55,730
enjoy finding some kind of format which

00:28:54,110 --> 00:28:58,820
wouldn't make it possible to actually

00:28:55,730 --> 00:29:03,140
use it in text mode and not only in

00:28:58,820 --> 00:29:05,690
visualization mode on the infrastructure

00:29:03,140 --> 00:29:08,840
side that's basically it at the moment

00:29:05,690 --> 00:29:10,880
one script running on my laptop possibly

00:29:08,840 --> 00:29:13,789
looking at order version of the excuses

00:29:10,880 --> 00:29:16,490
because the other ones I get the output

00:29:13,789 --> 00:29:17,900
are getting archived I would like to

00:29:16,490 --> 00:29:19,850
integrate that into the release of

00:29:17,900 --> 00:29:22,400
Demian or website so that we can

00:29:19,850 --> 00:29:25,640
actually point people to some place

00:29:22,400 --> 00:29:31,309
adding they can be autonomous and have

00:29:25,640 --> 00:29:34,309
some link added to the tracker and to

00:29:31,309 --> 00:29:36,440
make it even richer especially when you

00:29:34,309 --> 00:29:38,570
look into dependencies you can have one

00:29:36,440 --> 00:29:40,850
dependency that is not satisfiable

00:29:38,570 --> 00:29:43,250
because there's a dependency on this or

00:29:40,850 --> 00:29:46,520
this package or that one and so on and

00:29:43,250 --> 00:29:49,190
would like to hook it into a snapshot

00:29:46,520 --> 00:29:52,340
the Debian dot org to get the exact

00:29:49,190 --> 00:29:56,960
source binary mapping at this specific

00:29:52,340 --> 00:30:01,100
time so we can add some more information

00:29:56,960 --> 00:30:04,220
on the graph if you wonder what happened

00:30:01,100 --> 00:30:07,220
to pepper DB it's enticing as you can

00:30:04,220 --> 00:30:09,740
see here with all medicine I would like

00:30:07,220 --> 00:30:12,200
to thank jaga Veera will help me with

00:30:09,740 --> 00:30:14,419
the FGB Ephesus and figure out the

00:30:12,200 --> 00:30:17,690
testing staff and the fact it was file

00:30:14,419 --> 00:30:20,779
system dependent Ellen Hodgman from the

00:30:17,690 --> 00:30:24,169
closure community who helped me join the

00:30:20,779 --> 00:30:27,110
team and get with you and upload for the

00:30:24,169 --> 00:30:29,090
closure related packages and some

00:30:27,110 --> 00:30:33,950
confirmation that why this specific

00:30:29,090 --> 00:30:35,809
closure date broke Papa DB Emmanuel Bo

00:30:33,950 --> 00:30:37,399
and the security team as I mentioned

00:30:35,809 --> 00:30:40,250
before especially for tika

00:30:37,399 --> 00:30:44,450
because Emmanuel managed to catch up

00:30:40,250 --> 00:30:46,549
with many obscene version and get back

00:30:44,450 --> 00:30:49,490
tika package that was candidate because

00:30:46,549 --> 00:30:53,090
there were no more non security bugs in

00:30:49,490 --> 00:30:55,730
there an apple on the pepper de manera

00:30:53,090 --> 00:30:57,740
will finally put the cherry on the cake

00:30:55,730 --> 00:30:59,990
by fixing Papaji B itself

00:30:57,740 --> 00:31:02,600
it was a complicated in introspection

00:30:59,990 --> 00:31:03,950
stuff that I really have no chance to

00:31:02,600 --> 00:31:06,620
find in a year

00:31:03,950 --> 00:31:11,810
and it was Oh easy there's a patch and

00:31:06,620 --> 00:31:14,090
it was a potato right and not white on

00:31:11,810 --> 00:31:17,600
the deadline but like one day before the

00:31:14,090 --> 00:31:20,780
upload was performed on the 8th with a

00:31:17,600 --> 00:31:22,880
freeze under 12 and usually you would

00:31:20,780 --> 00:31:25,970
have like 10 days for new packages it

00:31:22,880 --> 00:31:28,850
was not it in testing so how does that

00:31:25,970 --> 00:31:30,980
work but then thanks to the release team

00:31:28,850 --> 00:31:34,400
for implementing the auto packaged test

00:31:30,980 --> 00:31:36,980
bonuses because oh there's another

00:31:34,400 --> 00:31:37,640
package test it didn't work before oh

00:31:36,980 --> 00:31:40,130
who cares

00:31:37,640 --> 00:31:42,770
but it works now oh and in three days

00:31:40,130 --> 00:31:45,410
instead of five or ten or whatever the

00:31:42,770 --> 00:31:50,390
package was back in testing right the

00:31:45,410 --> 00:31:52,400
day before the software so yeah so thank

00:31:50,390 --> 00:31:54,740
you so much for your attention

00:31:52,400 --> 00:31:57,080
I've got some write-ups of my Debian

00:31:54,740 --> 00:31:59,570
work on my company website because I

00:31:57,080 --> 00:32:02,950
want to people to know and learn about

00:31:59,570 --> 00:32:07,070
my company but it's usually really

00:32:02,950 --> 00:32:10,190
voluntary and free work I put into

00:32:07,070 --> 00:32:12,830
Debian but I document that there and

00:32:10,190 --> 00:32:15,610
questions are welcome I'm told there's

00:32:12,830 --> 00:32:15,610
four minutes left

00:32:19,940 --> 00:32:23,070
thanks for the talk are there any

00:32:21,719 --> 00:32:38,399
questions please line up at the

00:32:23,070 --> 00:32:40,529
microphone I don't bite so thanks very

00:32:38,399 --> 00:32:42,629
much for a very entertaining and

00:32:40,529 --> 00:32:44,099
informative talk

00:32:42,629 --> 00:32:48,829
I was wondering have you looked into

00:32:44,099 --> 00:32:52,369
using a dedicated graph database to

00:32:48,829 --> 00:32:55,769
store all that data and make it

00:32:52,369 --> 00:32:58,349
queryable in interesting ways you appear

00:32:55,769 --> 00:33:01,499
to have come from llamó straight to

00:32:58,349 --> 00:33:03,239
graphs is there some rich world you

00:33:01,499 --> 00:33:05,369
could explore I'm pretty sure you're

00:33:03,239 --> 00:33:08,309
going to tell me all about it in a few

00:33:05,369 --> 00:33:12,690
minutes over the beverage of your choice

00:33:08,309 --> 00:33:14,129
so thank you the real answer is no

00:33:12,690 --> 00:33:15,959
because I don't know anything about that

00:33:14,129 --> 00:33:19,619
but I'm happy to learn about any

00:33:15,959 --> 00:33:21,809
pointers you might have I don't know

00:33:19,619 --> 00:33:25,259
that much practically about it either I

00:33:21,809 --> 00:33:27,389
think no but priming has done some work

00:33:25,259 --> 00:33:33,139
in that area I seem to recall something

00:33:27,389 --> 00:33:33,139
on Planet Debian okay thank you

00:33:33,679 --> 00:33:42,299
any more questions I don't see any

00:33:39,749 --> 00:33:46,049
questions from IRC either so if there's

00:33:42,299 --> 00:33:47,080
no more questions let's thank you be

00:33:46,049 --> 00:33:50,610
again thank you

00:33:47,080 --> 00:33:51,020
[Applause]

00:33:50,610 --> 00:33:54,910
you

00:33:51,020 --> 00:33:54,910

YouTube URL: https://www.youtube.com/watch?v=gd9MztWVpVA


