Title: debci hacking for fun and profit
Publication date: 2017-12-05
Playlist: DebConf 16
Description: 
	by Antonio Terceiro

At: Debconf 16 video RSS feed
https://debconf16.debconf.org/
Room: Menzies 12
Scheduled start: 2016-07-04 11:15:00
Captions: 
	00:00:00,000 --> 00:00:07,319
okay so we have a gobby document is

00:00:03,149 --> 00:00:10,280
inside Def Con 16 both in the title of

00:00:07,319 --> 00:00:16,350
the boss so this is not a presentation

00:00:10,280 --> 00:00:18,539
90s to get feedback from you and the

00:00:16,350 --> 00:00:25,619
main goal really is to get people to

00:00:18,539 --> 00:00:32,279
work for me so until now I'm pretty much

00:00:25,619 --> 00:00:35,610
the only maintainer of the FCI so we had

00:00:32,279 --> 00:00:37,500
lots of contributions from marching P

00:00:35,610 --> 00:00:41,690
twisty which is the outer package test

00:00:37,500 --> 00:00:41,690
maintainer and he works on the ubuntu

00:00:42,110 --> 00:00:50,850
foundation chain or whatever they call

00:00:44,430 --> 00:00:53,100
it and his he also put together a dev

00:00:50,850 --> 00:00:55,469
sciences that looks like C I don't have

00:00:53,100 --> 00:01:00,539
enough net for Ubuntu but they use some

00:00:55,469 --> 00:01:02,010
they had a previous infrastructure for

00:01:00,539 --> 00:01:05,369
running the test so they are using only

00:01:02,010 --> 00:01:08,220
the web interface so he contributed lots

00:01:05,369 --> 00:01:11,490
of things to to make sure you could do

00:01:08,220 --> 00:01:17,360
that and also Brandon Fairchild which

00:01:11,490 --> 00:01:21,119
was a Summer of Code student in 2014 so

00:01:17,360 --> 00:01:24,150
and he helped me to improve a lot in the

00:01:21,119 --> 00:01:28,560
dev CI web interface so most of the

00:01:24,150 --> 00:01:31,259
stuff we see now is his work so for

00:01:28,560 --> 00:01:33,540
those who don't know Deb she has a

00:01:31,259 --> 00:01:37,650
continuous integration system for Damien

00:01:33,540 --> 00:01:42,509
in derivatives so it can also be

00:01:37,650 --> 00:01:44,700
extended to do other stuff you implement

00:01:42,509 --> 00:01:48,659
other backends you can even run any

00:01:44,700 --> 00:01:50,340
arbitrary thing right now just all the

00:01:48,659 --> 00:01:54,079
backings run out of package tests but

00:01:50,340 --> 00:01:56,399
you can also extend to do other things

00:01:54,079 --> 00:01:58,770
and it's what powers

00:01:56,399 --> 00:02:02,670
see I don't tell me not net running out

00:01:58,770 --> 00:02:04,469
of tigers tester suite so little plug

00:02:02,670 --> 00:02:08,099
here if you are interested in the topic

00:02:04,469 --> 00:02:12,130
of testing Debian package that there's

00:02:08,099 --> 00:02:18,910
going to be above on that

00:02:12,130 --> 00:02:21,370
Thursday 14100 means 30 so we'll be

00:02:18,910 --> 00:02:25,690
discussing issues related to writing the

00:02:21,370 --> 00:02:28,540
tests and how testing tools and

00:02:25,690 --> 00:02:30,880
techniques and all that stuff and here

00:02:28,540 --> 00:02:32,920
we are talking more about the other side

00:02:30,880 --> 00:02:36,960
of the infrastructure that runs the test

00:02:32,920 --> 00:02:42,520
so running the test so it's for Thursday

00:02:36,960 --> 00:02:44,980
now since I got Brandon to work on

00:02:42,520 --> 00:02:49,120
Summer of Code really early in the

00:02:44,980 --> 00:02:53,100
project so I had to make sure that he

00:02:49,120 --> 00:02:55,480
could run the sei on his machine so as

00:02:53,100 --> 00:02:58,480
far as I can tell it's really well

00:02:55,480 --> 00:03:04,690
documented how how you you you can run

00:02:58,480 --> 00:03:06,970
your own instance locally so just make

00:03:04,690 --> 00:03:15,850
sure I did this before we started so I

00:03:06,970 --> 00:03:17,440
cleaned up my my my tree so here is the

00:03:15,850 --> 00:03:22,780
- source tree of the FCI

00:03:17,440 --> 00:03:27,030
and there is dog hacking which tells you

00:03:22,780 --> 00:03:32,380
how to set up so there is some

00:03:27,030 --> 00:03:33,820
dependencies of having style so the main

00:03:32,380 --> 00:03:36,940
thing you need to have running is

00:03:33,820 --> 00:03:40,230
rabbitmq which is the message broker

00:03:36,940 --> 00:03:43,360
that really is the message between the

00:03:40,230 --> 00:03:45,360
dev CI master in worker we'll get to

00:03:43,360 --> 00:03:47,980
that in a moment

00:03:45,360 --> 00:03:50,740
so usually in a developed machine you

00:03:47,980 --> 00:03:53,200
want to disable that to not have that

00:03:50,740 --> 00:03:58,180
running all the time and only start it

00:03:53,200 --> 00:04:01,590
when you want to test there's a typo

00:03:58,180 --> 00:04:01,590
here as you can see

00:04:12,650 --> 00:04:21,470
and I said I already have different so

00:04:17,440 --> 00:04:26,330
first thing it's true from make it's

00:04:21,470 --> 00:04:31,729
just going to build do the documentation

00:04:26,330 --> 00:04:33,560
and create something nice today

00:04:31,729 --> 00:04:38,990
JavaScript stuff that's used on the web

00:04:33,560 --> 00:04:39,949
UI and oh so the architecture can be

00:04:38,990 --> 00:04:43,790
expected

00:04:39,949 --> 00:04:46,990
you can proc file file is a is a

00:04:43,790 --> 00:04:49,699
configuration file for process workers

00:04:46,990 --> 00:04:52,900
process runners so in this case we

00:04:49,699 --> 00:04:59,270
already only one that's called Foreman

00:04:52,900 --> 00:05:01,220
so it's going to for each line of the in

00:04:59,270 --> 00:05:07,370
this fight it's going to spawn the

00:05:01,220 --> 00:05:10,910
process given by this common line so

00:05:07,370 --> 00:05:12,919
basically so let's see that again so we

00:05:10,910 --> 00:05:16,070
have a web server in this case in the

00:05:12,919 --> 00:05:19,099
production value you just use a patch or

00:05:16,070 --> 00:05:23,349
whatever you have but we have one local

00:05:19,099 --> 00:05:26,090
for testing so we you have worker nodes

00:05:23,349 --> 00:05:28,789
which is the thing that actually runs

00:05:26,090 --> 00:05:33,380
the test you can have as many as you

00:05:28,789 --> 00:05:38,200
want the collector in the indexer are

00:05:33,380 --> 00:05:38,200
two demos that run on the master server

00:05:39,010 --> 00:05:44,389
the indexer the collector receives

00:05:42,139 --> 00:05:47,449
results from the workers after they run

00:05:44,389 --> 00:05:52,400
the test and the indexer processes that

00:05:47,449 --> 00:05:59,199
and generates the web interface so now

00:05:52,400 --> 00:05:59,199
we have it running if we go here you see

00:05:59,590 --> 00:06:11,180
okay so you have an empty entry

00:06:06,530 --> 00:06:15,070
environment but before doing anything I

00:06:11,180 --> 00:06:15,070
will just do quick

00:06:16,710 --> 00:06:22,350
so the configurations are actually every

00:06:18,840 --> 00:06:26,419
file anyways that confer be loaded so we

00:06:22,350 --> 00:06:26,419
went here just for testing

00:06:38,120 --> 00:06:43,580
so we're just demonstrating running the

00:06:41,480 --> 00:06:45,230
website for multiple architectures these

00:06:43,580 --> 00:06:48,110
are other ones we are running inside of

00:06:45,230 --> 00:06:49,639
develop net right now and the fake

00:06:48,110 --> 00:06:51,830
backhand is a fact back in that does

00:06:49,639 --> 00:06:53,360
doesn't do anything so it's not going to

00:06:51,830 --> 00:06:55,400
run out of package test for real you

00:06:53,360 --> 00:07:00,650
just generate fake results for us to

00:06:55,400 --> 00:07:13,700
test so if I restart everything so yeah

00:07:00,650 --> 00:07:15,590
we now have it running so you can if you

00:07:13,700 --> 00:07:19,460
want over heck on the web interfaces use

00:07:15,590 --> 00:07:23,090
issues useful to have fake data so this

00:07:19,460 --> 00:07:29,139
script here will generate fake

00:07:23,090 --> 00:07:29,139
submissions for you so here you see the

00:07:30,940 --> 00:07:41,180
here you see the worker doing the work

00:07:33,850 --> 00:07:46,160
running the tests here and then here the

00:07:41,180 --> 00:07:49,100
indexer receives the results and updates

00:07:46,160 --> 00:07:52,400
the web interface so the web interface

00:07:49,100 --> 00:07:57,410
view out reload every five minutes but

00:07:52,400 --> 00:08:01,460
in this case we want to below we can

00:07:57,410 --> 00:08:03,260
generate a few more data here so we can

00:08:01,460 --> 00:08:07,610
do this as many times as it wants it

00:08:03,260 --> 00:08:11,139
will just run fake tests and then the

00:08:07,610 --> 00:08:11,139
indexer is receiving the results

00:08:21,639 --> 00:08:26,340
so now you start to have useful data

00:08:29,759 --> 00:08:36,820
here you have you have the news stream

00:08:33,760 --> 00:08:39,849
so it only generate Eaton's here when a

00:08:36,820 --> 00:08:43,690
package change status so package always

00:08:39,849 --> 00:08:47,050
fail fails you won't be bothered with

00:08:43,690 --> 00:08:49,839
the package PHA 100 time so just when it

00:08:47,050 --> 00:08:53,350
changes state owes you get a so it's

00:08:49,839 --> 00:09:00,640
fairly ok to subscribe to this feed I do

00:08:53,350 --> 00:09:03,370
that and not many know not much noise is

00:09:00,640 --> 00:09:06,310
been useful to the text of breaking the

00:09:03,370 --> 00:09:09,490
archive so a few days ago I update

00:09:06,310 --> 00:09:11,410
uploaded a broken Ruby package so all

00:09:09,490 --> 00:09:16,750
its previous that penises we can pass

00:09:11,410 --> 00:09:23,910
fail indeed feel so to know when things

00:09:16,750 --> 00:09:26,050
are broken or get fixed here is this day

00:09:23,910 --> 00:09:28,990
the same interface you have on the right

00:09:26,050 --> 00:09:37,660
side so in this case I'm using a feature

00:09:28,990 --> 00:09:39,640
that's probably useful for people who

00:09:37,660 --> 00:09:42,339
want to run their own instance so there

00:09:39,640 --> 00:09:43,839
is a you can set up a white list of

00:09:42,339 --> 00:09:49,300
packages so in this case I'm only

00:09:43,839 --> 00:09:52,420
running these packages and you can use

00:09:49,300 --> 00:09:54,399
that for instance you have a team I mean

00:09:52,420 --> 00:09:58,120
tennis team you only you want to have

00:09:54,399 --> 00:10:00,160
your own to run your packages on on each

00:09:58,120 --> 00:10:01,930
commit or whatever you want

00:10:00,160 --> 00:10:06,670
you can just write this your packages

00:10:01,930 --> 00:10:09,279
and if this file is exact exact is an

00:10:06,670 --> 00:10:11,050
executable it will use the output of

00:10:09,279 --> 00:10:15,100
that as the white list so you can even

00:10:11,050 --> 00:10:17,800
use dynamic lists there like I want all

00:10:15,100 --> 00:10:21,029
package with this maintainer email

00:10:17,800 --> 00:10:21,029
address or something like that

00:10:26,870 --> 00:10:32,730
so this is pretty much it so get get it

00:10:30,570 --> 00:10:36,000
running from this chrome scratch it's

00:10:32,730 --> 00:10:37,800
pretty easy so if you are willing to

00:10:36,000 --> 00:10:45,870
hack on the API and help improve the

00:10:37,800 --> 00:10:47,220
tool and it should be fairly easy so as

00:10:45,870 --> 00:10:48,720
I said in the beginning this is not

00:10:47,220 --> 00:10:52,470
supposed to be a talk or a presentation

00:10:48,720 --> 00:10:57,180
I want to hear from you guys and see

00:10:52,470 --> 00:10:59,640
what are your interests and so there are

00:10:57,180 --> 00:11:04,830
a few conversational topics here we can

00:10:59,640 --> 00:11:07,950
use and so ways to help you can help

00:11:04,830 --> 00:11:10,140
improve the API itself you can have

00:11:07,950 --> 00:11:13,020
manage ECI dr. Burnett for instance

00:11:10,140 --> 00:11:16,980
keeping an eye on we have a moon in

00:11:13,020 --> 00:11:23,780
isthmus monitoring stuff and in the

00:11:16,980 --> 00:11:23,780
systems and also there is a

00:11:29,089 --> 00:11:37,350
they start space here there is a status

00:11:33,660 --> 00:11:40,199
alerts which is temporary fails on

00:11:37,350 --> 00:11:44,699
packets and then look at those and in

00:11:40,199 --> 00:11:47,940
each fine progress there maybe is a lot

00:11:44,699 --> 00:11:49,829
is very useful so for instance this

00:11:47,940 --> 00:11:51,779
package here is failing all that time

00:11:49,829 --> 00:11:59,540
because there was a change in the

00:11:51,779 --> 00:11:59,540
archive recently that started to include

00:12:01,100 --> 00:12:08,819
jpg signatures for upstream sources and

00:12:05,310 --> 00:12:11,250
then apt Catherine G which is the proxy

00:12:08,819 --> 00:12:12,959
will we use on the workers to avoid be

00:12:11,250 --> 00:12:15,899
downloading definitions all the time

00:12:12,959 --> 00:12:18,630
doesn't support that so it's it's not

00:12:15,899 --> 00:12:26,040
white listed only so then this package

00:12:18,630 --> 00:12:29,399
has it's not being tested because the

00:12:26,040 --> 00:12:31,889
package don't fail I'm looking at that

00:12:29,399 --> 00:12:33,870
but in general it's useful to have other

00:12:31,889 --> 00:12:35,579
which would be useful to have other

00:12:33,870 --> 00:12:38,569
people looking at those type of things

00:12:35,579 --> 00:12:47,370
to make sure we keep up with the

00:12:38,569 --> 00:12:49,440
evolution of the infrastructure so

00:12:47,370 --> 00:12:52,829
things you can do with the API so you

00:12:49,440 --> 00:12:56,190
can use depth ERISA as the full CIT

00:12:52,829 --> 00:13:00,029
system itself as we do in Debian you can

00:12:56,190 --> 00:13:01,949
use only the day web from the web UI as

00:13:00,029 --> 00:13:05,069
a front-end for out of package testers

00:13:01,949 --> 00:13:08,040
data as Ubuntu does you can also as a

00:13:05,069 --> 00:13:09,660
show as I have shown run only a subset

00:13:08,040 --> 00:13:13,500
of packages in you if you have a

00:13:09,660 --> 00:13:15,329
derivative that's almost equal to Debbie

00:13:13,500 --> 00:13:16,620
but have some custom packages you can

00:13:15,329 --> 00:13:19,319
for it

00:13:16,620 --> 00:13:22,709
run a CI only for your package or for

00:13:19,319 --> 00:13:24,240
your team if you want to do that you can

00:13:22,709 --> 00:13:26,339
do things like building test on commit

00:13:24,240 --> 00:13:33,000
as long as the packages are in some

00:13:26,339 --> 00:13:35,759
repository Deb side random question do

00:13:33,000 --> 00:13:38,339
you recommend actually using deputy CIA

00:13:35,759 --> 00:13:42,440
itself if you want to run your own test

00:13:38,339 --> 00:13:45,240
or is that just too much

00:13:42,440 --> 00:13:49,320
if you want to run like in your

00:13:45,240 --> 00:13:52,680
development machine my package and I

00:13:49,320 --> 00:13:56,040
want to test if my outer package test

00:13:52,680 --> 00:13:58,260
actually still works I would tap GI be a

00:13:56,040 --> 00:14:00,930
good way of doing that or is that just

00:13:58,260 --> 00:14:03,240
overkill I think it's overkill just

00:14:00,930 --> 00:14:04,320
using auto package tests directly it's

00:14:03,240 --> 00:14:08,280
just fine

00:14:04,320 --> 00:14:12,570
I mean you can do that you can I mean

00:14:08,280 --> 00:14:16,710
devs I'll give you a few nice things

00:14:12,570 --> 00:14:19,230
like it's it manages the test beds

00:14:16,710 --> 00:14:22,050
automatically for you so you don't have

00:14:19,230 --> 00:14:23,310
to know how to create a LXE container or

00:14:22,050 --> 00:14:27,180
a qmu machine

00:14:23,310 --> 00:14:36,060
I mean qmu is not supported yet but in

00:14:27,180 --> 00:14:38,880
the case of Alexi you just do sudo dev

00:14:36,060 --> 00:14:41,610
see I set up and it does it creates the

00:14:38,880 --> 00:14:44,760
container for you so it gives you that

00:14:41,610 --> 00:14:46,590
but if you are okay with managing the

00:14:44,760 --> 00:14:49,550
tests that your self you can just use

00:14:46,590 --> 00:14:49,550
all the packaged tests directly

00:14:57,570 --> 00:15:02,790
at the beginning of your demo I saw that

00:15:00,480 --> 00:15:04,529
you have a green file in the Association

00:15:02,790 --> 00:15:11,339
is that supported as a development

00:15:04,529 --> 00:15:15,660
environment it I think it is yes

00:15:11,339 --> 00:15:18,620
so it's don't have much so just called

00:15:15,660 --> 00:15:18,620
you script here

00:15:27,040 --> 00:15:34,390
yep so the only thing is going to do is

00:15:31,440 --> 00:15:45,220
it will start the rabbit in queue for

00:15:34,390 --> 00:15:48,250
you it will you okay right so this is

00:15:45,220 --> 00:15:54,430
more for testing the debian package but

00:15:48,250 --> 00:15:56,530
you can also do that it's as a so here

00:15:54,430 --> 00:15:58,630
it's it's relying on the debian package

00:15:56,530 --> 00:16:02,350
so it's automatically installing the

00:15:58,630 --> 00:16:05,110
extensions but if anyone wants to be use

00:16:02,350 --> 00:16:07,990
variant for that it should be just a

00:16:05,110 --> 00:16:10,480
matter of taking the the extra steps in

00:16:07,990 --> 00:16:16,210
the documentation automating here should

00:16:10,480 --> 00:16:19,540
be easy another unrelated question is

00:16:16,210 --> 00:16:24,070
I'm interested in doing if the API would

00:16:19,540 --> 00:16:26,500
be a good basis to restart doing archive

00:16:24,070 --> 00:16:28,660
rebuilds so that that's of use case does

00:16:26,500 --> 00:16:30,640
not completely addressed by whatsoever

00:16:28,660 --> 00:16:34,240
producible bits people are doing in

00:16:30,640 --> 00:16:39,550
terms of filing after EFS bags and one

00:16:34,240 --> 00:16:43,240
thing that I wonder is oh well first do

00:16:39,550 --> 00:16:45,310
you see big reasons not to not to do

00:16:43,240 --> 00:16:50,620
that not to use the API as a basis to

00:16:45,310 --> 00:16:52,600
run just a rebuilt from not willing and

00:16:50,620 --> 00:16:55,420
one thing I saw that you specified the

00:16:52,600 --> 00:16:57,370
architectures list Oh flexible is that

00:16:55,420 --> 00:17:00,610
because typically for archive rebuilds

00:16:57,370 --> 00:17:03,160
you probably want to have more unstable

00:17:00,610 --> 00:17:07,449
testing but also unstable with custom

00:17:03,160 --> 00:17:16,870
GCC packages stuff like that

00:17:07,449 --> 00:17:24,240
so one way to do that is when you when I

00:17:16,870 --> 00:17:28,120
did this here you will notice that every

00:17:24,240 --> 00:17:29,920
test request submission has to expertly

00:17:28,120 --> 00:17:32,890
state the distribution in the

00:17:29,920 --> 00:17:39,310
architecture so for instance you could

00:17:32,890 --> 00:17:47,490
have in the distribution

00:17:39,310 --> 00:17:47,490
is basically I don't here

00:17:51,120 --> 00:17:58,380
well you can say use a distribution like

00:17:55,279 --> 00:18:02,190
unstable - you see six and then you

00:17:58,380 --> 00:18:04,049
configure the testbed associated with

00:18:02,190 --> 00:18:06,690
the distribution with the corresponding

00:18:04,049 --> 00:18:08,870
source list entries in that view just

00:18:06,690 --> 00:18:08,870
work

00:18:15,100 --> 00:18:23,240
anyone we don't have life questions we

00:18:18,289 --> 00:18:25,460
have questions on here so if you guys

00:18:23,240 --> 00:18:29,019
are interested please help taking notes

00:18:25,460 --> 00:18:30,889
here because it's difficult for me to

00:18:29,019 --> 00:18:35,360
respond to that and take notes at the

00:18:30,889 --> 00:18:37,070
same time so prodding certain package

00:18:35,360 --> 00:18:40,340
which have not run this by temples yes

00:18:37,070 --> 00:18:41,990
so this is an issue right now so some I

00:18:40,340 --> 00:18:44,899
think there's a bug in the test

00:18:41,990 --> 00:18:47,570
scheduler that depending on race

00:18:44,899 --> 00:18:51,590
conditions on the archived updates and

00:18:47,570 --> 00:18:56,149
something so and sometimes packages are

00:18:51,590 --> 00:18:58,789
not being run and this is something that

00:18:56,149 --> 00:19:00,889
I would appreciate help on but it's all

00:18:58,789 --> 00:19:03,320
my plans to at some point we he right at

00:19:00,889 --> 00:19:07,789
SK that should be more robust on the

00:19:03,320 --> 00:19:10,879
face of these kind of things in also it

00:19:07,789 --> 00:19:13,009
would be nice to have it'll be nice to

00:19:10,879 --> 00:19:17,230
have anyway our way of people like

00:19:13,009 --> 00:19:20,090
kicking a new test force into currently

00:19:17,230 --> 00:19:23,029
what I do now is when people ping me on

00:19:20,090 --> 00:19:26,720
IRC I just schedule a new test for them

00:19:23,029 --> 00:19:32,440
I can probably arrange now access for

00:19:26,720 --> 00:19:32,440
every DD should be able to

00:20:07,060 --> 00:20:14,650
so yeah I can do that so there's nice

00:20:11,410 --> 00:20:16,600
nice SSH tools that you can create

00:20:14,650 --> 00:20:18,820
accounts that have limited permissions

00:20:16,600 --> 00:20:20,560
so I can just allow every everyone

00:20:18,820 --> 00:20:29,470
should just request new tests this

00:20:20,560 --> 00:20:32,130
should be doable right so I guess I feel

00:20:29,470 --> 00:20:42,150
I hope that responds to the question

00:20:32,130 --> 00:20:42,150
viewing the queue summary it's so I

00:20:43,140 --> 00:20:49,210
guess it's not linked adhere anywhere

00:20:46,000 --> 00:20:54,340
but there's actually a Muni instance

00:20:49,210 --> 00:20:59,980
running so it's def CI CI dagonet slash

00:20:54,340 --> 00:21:03,340
Mooney and here you can see the status

00:20:59,980 --> 00:21:06,070
of the queue so I guess people have been

00:21:03,340 --> 00:21:08,200
busy during that camp that confident

00:21:06,070 --> 00:21:13,180
camp because the queue is really high

00:21:08,200 --> 00:21:22,390
now so in the past few weeks we have a

00:21:13,180 --> 00:21:28,200
really wild scenario so you can see here

00:21:22,390 --> 00:21:28,200
for ok the resolution was not

00:21:34,940 --> 00:21:41,060
I don't have reason time scrolling why

00:21:38,350 --> 00:21:45,170
so you can see here that the queue was

00:21:41,060 --> 00:21:51,140
really ok on AD 64 for the fest for the

00:21:45,170 --> 00:21:54,230
past few days then they start and so

00:21:51,140 --> 00:21:56,930
what happens there if you have a like a

00:21:54,230 --> 00:21:59,570
base package that have lots of reverse

00:21:56,930 --> 00:22:03,260
dependencies and also transitive we

00:21:59,570 --> 00:22:05,240
reverse dependency so if you if you have

00:22:03,260 --> 00:22:11,570
a new GCC upload and everything gets

00:22:05,240 --> 00:22:13,850
that's it again or Lib C upload and so

00:22:11,570 --> 00:22:18,980
here you can see the state of the queue

00:22:13,850 --> 00:22:20,900
as far as waiting time so if the queue

00:22:18,980 --> 00:22:22,460
is really high you know that your packet

00:22:20,900 --> 00:22:26,320
is not going to be test really quickly

00:22:22,460 --> 00:22:26,320
but if the queue is empty you know that

00:22:29,170 --> 00:22:38,150
you get results really soon and you can

00:22:33,320 --> 00:22:39,890
see that arm 64 has basically all or is

00:22:38,150 --> 00:22:42,260
on so line on the queue because we only

00:22:39,890 --> 00:22:45,200
have two boxes running tests that's

00:22:42,260 --> 00:22:48,710
sponsored by the narrow my employer we

00:22:45,200 --> 00:22:50,750
have to I don't remember the name of the

00:22:48,710 --> 00:22:54,380
board of the observer boards but they

00:22:50,750 --> 00:22:57,280
are running 24/7 but they they are not

00:22:54,380 --> 00:23:02,000
able to keep up with the with the world

00:22:57,280 --> 00:23:06,500
in for a abd 64 we have ten Amazon ec2

00:23:02,000 --> 00:23:08,870
instances and so they are able to

00:23:06,500 --> 00:23:13,310
consume that that key really reasonably

00:23:08,870 --> 00:23:17,210
fast so we can have the day status of

00:23:13,310 --> 00:23:24,080
the whole system here I usually remove

00:23:17,210 --> 00:23:26,690
to be able show so oh yeah one of the

00:23:24,080 --> 00:23:28,670
arm 64 machines is currently broken I

00:23:26,690 --> 00:23:32,120
can't figure out why I didn't have the

00:23:28,670 --> 00:23:35,510
time to look at it so this is package be

00:23:32,120 --> 00:23:37,970
processed by worker so whenever there's

00:23:35,510 --> 00:23:43,850
a veg Go Green Line it means that the

00:23:37,970 --> 00:23:45,890
work is busy and here is the number of

00:23:43,850 --> 00:23:48,240
processes of packages that have been

00:23:45,890 --> 00:23:52,720
processed by the working the

00:23:48,240 --> 00:23:55,330
well each time is lysis five minutes so

00:23:52,720 --> 00:23:57,789
you can see so here I I used to to

00:23:55,330 --> 00:23:59,080
monitor if there is some problem with

00:23:57,789 --> 00:24:00,970
they worker so in this case it's very

00:23:59,080 --> 00:24:05,789
clear that there's something wrong here

00:24:00,970 --> 00:24:08,140
and I know about that already and I know

00:24:05,789 --> 00:24:16,620
the person who asked the question if

00:24:08,140 --> 00:24:20,320
that answers or not there is a marker to

00:24:16,620 --> 00:24:22,860
say that whether each package is already

00:24:20,320 --> 00:24:26,260
scheduled or not but I don't think that

00:24:22,860 --> 00:24:31,630
shows up in the web interface yet I had

00:24:26,260 --> 00:24:34,510
a branch with which I started page like

00:24:31,630 --> 00:24:38,649
this showing the current queue but I was

00:24:34,510 --> 00:24:42,940
never able to finish that but at least

00:24:38,649 --> 00:24:47,559
you can know how the system is looking

00:24:42,940 --> 00:24:50,409
at this this uses the double single

00:24:47,559 --> 00:24:51,450
sign-on with client certificate you know

00:24:50,409 --> 00:24:54,940
that

00:24:51,450 --> 00:24:57,820
all the decent VMs should have access I

00:24:54,940 --> 00:25:03,730
mean anyone we've had eben SSO account

00:24:57,820 --> 00:25:08,230
head like this can you explain a little

00:25:03,730 --> 00:25:13,480
bit in Ubuntu website I can see why a

00:25:08,230 --> 00:25:17,760
package was tested or retested is the

00:25:13,480 --> 00:25:20,789
same mechanism working on it's not so

00:25:17,760 --> 00:25:22,899
yeah as I said they use a different

00:25:20,789 --> 00:25:28,480
infrastructure said they already have

00:25:22,899 --> 00:25:31,200
head they already had their own if I

00:25:28,480 --> 00:25:34,419
said before running tested and so

00:25:31,200 --> 00:25:37,600
marking just is just using the a web UI

00:25:34,419 --> 00:25:42,970
there so a few a few details are

00:25:37,600 --> 00:25:49,409
different like this one so yeah sorry

00:25:42,970 --> 00:25:49,409
you mean wire package was run

00:25:50,560 --> 00:26:01,550
like this so here you have why the wrong

00:25:58,610 --> 00:26:04,310
was done so in this case of this package

00:26:01,550 --> 00:26:06,790
I'm retrying because the last attempt

00:26:04,310 --> 00:26:12,590
failed before an infrastructure problem

00:26:06,790 --> 00:26:16,790
you can also have let's see website

00:26:12,590 --> 00:26:19,730
itself yeah so in a point to it shows up

00:26:16,790 --> 00:26:25,730
at at the website maybe that's a nice

00:26:19,730 --> 00:26:30,320
nice feature well so in the overview of

00:26:25,730 --> 00:26:33,140
your package I think it shows up yeah

00:26:30,320 --> 00:26:34,670
so that that information already on this

00:26:33,140 --> 00:26:39,320
over okay

00:26:34,670 --> 00:26:41,570
then you don't the rights to have yeah

00:26:39,320 --> 00:26:45,820
maybe they have a patch there that never

00:26:41,570 --> 00:26:45,820
get sweet back I can look at that

00:27:00,289 --> 00:27:07,619
still about the queuing is is it just a

00:27:04,590 --> 00:27:11,779
first-in first-out or it is very way to

00:27:07,619 --> 00:27:15,149
tune that to prioritize specific it's

00:27:11,779 --> 00:27:23,570
first-in first-out but I think we added

00:27:15,149 --> 00:27:27,690
since the beginning priority parameter

00:27:23,570 --> 00:27:30,090
maybe not but so rabbitmq support

00:27:27,690 --> 00:27:32,249
priorities so it should be easy to just

00:27:30,090 --> 00:27:36,149
add a new parameter to the Revit gimmick

00:27:32,249 --> 00:27:38,549
you calls that that puts jobs in the

00:27:36,149 --> 00:27:42,269
queue I don't think we are using that

00:27:38,549 --> 00:27:49,409
now but it should be a few lines few

00:27:42,269 --> 00:27:53,549
lines batch to do that as another

00:27:49,409 --> 00:27:57,389
question maybe in slightly unrelated to

00:27:53,549 --> 00:27:59,879
the API itself but Ubuntu is using the

00:27:57,389 --> 00:28:05,460
outcome of Alto package tester as gating

00:27:59,879 --> 00:28:08,999
for propose to the real-life how far are

00:28:05,460 --> 00:28:11,009
we in Debian to do the same we are

00:28:08,999 --> 00:28:13,859
supposed to I had conversations with

00:28:11,009 --> 00:28:17,419
Emily's team last step conf about that

00:28:13,859 --> 00:28:20,090
but I guess life happened and then we

00:28:17,419 --> 00:28:24,509
weren't able to go ahead of that but

00:28:20,090 --> 00:28:29,639
there is the idea to do that and website

00:28:24,509 --> 00:28:35,730
even already has the additional rates

00:28:29,639 --> 00:28:38,850
inch block Brittany block hints for that

00:28:35,730 --> 00:28:41,489
but that's not really right at not right

00:28:38,850 --> 00:28:44,399
now because we only want to block

00:28:41,489 --> 00:28:46,649
regressions and not package that he'll

00:28:44,399 --> 00:28:48,570
fail that testings forever and I guess

00:28:46,649 --> 00:28:53,789
you need to migrate to Debbie not orc

00:28:48,570 --> 00:28:57,210
machine yes that's another thing so

00:28:53,789 --> 00:28:59,220
basically what happened was I probably

00:28:57,210 --> 00:29:01,919
wrongly assumed that having dev CI

00:28:59,220 --> 00:29:03,659
package as a proper Devon package was

00:29:01,919 --> 00:29:06,359
the way to go and turns out that it's

00:29:03,659 --> 00:29:10,169
not the way to go so I have to figure

00:29:06,359 --> 00:29:11,740
out how to manage the the master

00:29:10,169 --> 00:29:15,309
instance especially

00:29:11,740 --> 00:29:20,620
not having root on the machine because

00:29:15,309 --> 00:29:23,409
since pecker so I upload stuff for to

00:29:20,620 --> 00:29:28,570
Jesse back ports and then upgrade using

00:29:23,409 --> 00:29:30,429
apt no as you as usually we do but of

00:29:28,570 --> 00:29:33,279
course for good reasons DSA doesn't want

00:29:30,429 --> 00:29:42,789
to have everyone having root on the

00:29:33,279 --> 00:29:44,260
machines yes I just need to plan and do

00:29:42,789 --> 00:29:50,200
things in a way that I can manage

00:29:44,260 --> 00:29:54,840
without regular user account but is that

00:29:50,200 --> 00:29:58,600
limiting to actually use it for release

00:29:54,840 --> 00:30:01,450
I don't think so the ability is okay as

00:29:58,600 --> 00:30:03,789
it is with as long as the data is

00:30:01,450 --> 00:30:05,799
correct so the these Brittany hints

00:30:03,789 --> 00:30:10,840
files not it's not what we need

00:30:05,799 --> 00:30:14,200
currently and I just met I or someone

00:30:10,840 --> 00:30:20,070
else that wants to help needs to to get

00:30:14,200 --> 00:30:20,070
the this only aggressions here

00:30:28,410 --> 00:30:35,030
anyone else you know the questions here

00:30:42,420 --> 00:30:52,140
yeah can you maybe it still related to

00:30:50,400 --> 00:30:54,540
the current implementation is it

00:30:52,140 --> 00:31:03,810
possible to get an email if something

00:30:54,540 --> 00:31:05,370
failed so you have a cousin the moment I

00:31:03,810 --> 00:31:10,260
have something like 80 packages of them

00:31:05,370 --> 00:31:20,070
are okay 60 FCI and I always have to

00:31:10,260 --> 00:31:24,600
check if something like right so you can

00:31:20,070 --> 00:31:26,220
subscribe to the RSS feed so that that

00:31:24,600 --> 00:31:29,670
works for me I subscribe to the whole

00:31:26,220 --> 00:31:34,320
feed for the entire of Debian but even

00:31:29,670 --> 00:31:39,560
that is not so much the information is

00:31:34,320 --> 00:31:39,560
also presented in the tracker in the

00:31:39,890 --> 00:31:45,300
developer how it's called

00:31:42,800 --> 00:31:49,890
DDP oh the Devon developer package

00:31:45,300 --> 00:31:52,020
overview also displays CI tests so if

00:31:49,890 --> 00:31:55,710
you go to your page if you the needs of

00:31:52,020 --> 00:32:00,440
your package you have a column with you

00:31:55,710 --> 00:32:03,690
want to be notified something is that

00:32:00,440 --> 00:32:04,920
that's something that lots of people

00:32:03,690 --> 00:32:06,990
want

00:32:04,920 --> 00:32:11,690
please hazel Ren you if you would like

00:32:06,990 --> 00:32:15,180
to get emails on your package fails okay

00:32:11,690 --> 00:32:18,630
yeah I guess it should be fairly easy to

00:32:15,180 --> 00:32:19,260
like email package name and package dot

00:32:18,630 --> 00:32:21,930
divinatory

00:32:19,260 --> 00:32:24,450
just I think that some things to be

00:32:21,930 --> 00:32:29,340
better addressed in a more centralized

00:32:24,450 --> 00:32:33,780
to learn your tracker better for team

00:32:29,340 --> 00:32:36,630
about groups packages but I don't think

00:32:33,780 --> 00:32:38,790
it makes with a sort of sense to have CI

00:32:36,630 --> 00:32:41,420
we implement for implement something

00:32:38,790 --> 00:32:41,420
specifically

00:32:44,650 --> 00:32:52,630
you DD as a RSS feed but it doesn't

00:32:48,080 --> 00:32:52,630
include CI okay

00:33:05,040 --> 00:33:11,100
ten minutes okay so we still have ten

00:33:07,410 --> 00:33:15,620
minutes if if you are interested I can

00:33:11,100 --> 00:33:20,030
show you how I currently manage the

00:33:15,620 --> 00:33:20,030
Amazon infrastructure that runs the test

00:33:31,860 --> 00:33:38,179
so there is a configuration we post rain

00:33:38,630 --> 00:33:49,399
on collab mate called Devon CRI config

00:33:43,370 --> 00:33:52,080
which is a chef repository so that's

00:33:49,399 --> 00:33:54,870
another issue for the DSA migration

00:33:52,080 --> 00:33:58,080
because they use puppet but that's okay

00:33:54,870 --> 00:34:00,419
because since I packaged everything so

00:33:58,080 --> 00:34:04,260
the de chef stuff just put a

00:34:00,419 --> 00:34:08,090
configuration file there install these

00:34:04,260 --> 00:34:08,090
bits of package so it's pretty easy

00:34:21,159 --> 00:34:28,839
how much time that they so I use vagrant

00:34:24,369 --> 00:34:33,970
to simulate a production environment so

00:34:28,839 --> 00:34:36,450
I bring up a master machine in a worker

00:34:33,970 --> 00:34:36,450
machine

00:34:50,240 --> 00:34:55,549
so this is is using a tool

00:34:58,750 --> 00:35:05,560
that I wrote to use use shaft without

00:35:04,180 --> 00:35:11,410
having a chef server

00:35:05,560 --> 00:35:13,120
it's called shake so you can push your

00:35:11,410 --> 00:35:16,390
stuff to your node without having a

00:35:13,120 --> 00:35:20,590
chef's a virtual first because there is

00:35:16,390 --> 00:35:23,260
no chef serving DeLeon and second

00:35:20,590 --> 00:35:25,960
because I mean for more infrastructures

00:35:23,260 --> 00:35:30,970
you don't necessarily need the overhead

00:35:25,960 --> 00:35:34,300
of having centralized and then we have a

00:35:30,970 --> 00:35:38,170
lot of commands here so hit converge

00:35:34,300 --> 00:35:40,900
it's basically applying all the chef's

00:35:38,170 --> 00:35:43,840
three types to the nose and should be

00:35:40,900 --> 00:35:49,510
really fast if everything is already

00:35:43,840 --> 00:35:53,370
done yeah so there is all the the

00:35:49,510 --> 00:35:53,370
machines are indeed is a desire state

00:35:55,050 --> 00:36:04,540
you can use this Joe as a shortcut to

00:35:58,990 --> 00:36:05,710
log into the machine so you can expect

00:36:04,540 --> 00:36:09,940
these status

00:36:05,710 --> 00:36:14,790
I mean I've installed everything

00:36:09,940 --> 00:36:14,790
yesterday so doesn't know about anything

00:36:16,050 --> 00:36:24,990
you can schedule test so this is first

00:36:36,150 --> 00:36:39,930
maybe something's broken

00:36:45,680 --> 00:36:52,059
and you can use the system D stuff true

00:36:52,359 --> 00:36:56,109
there's not working here

00:37:04,869 --> 00:37:08,650
so you can use the system log stuff to

00:37:07,509 --> 00:37:12,400
see what's happening

00:37:08,650 --> 00:37:14,940
I think the RabbitMQ has some issue here

00:37:12,400 --> 00:37:14,940
is over why

00:37:23,590 --> 00:37:28,510
probably just life and a real service

00:37:52,750 --> 00:37:58,390
so here you see the results coming this

00:37:56,140 --> 00:38:06,490
is what I used to generate some of those

00:37:58,390 --> 00:38:13,420
moaning grass here yeah there's a new

00:38:06,490 --> 00:38:18,310
risotto scheme here no it's not that fun

00:38:13,420 --> 00:38:20,980
to keep watching that but basically it's

00:38:18,310 --> 00:38:23,770
the worker health that have a Debbie I

00:38:20,980 --> 00:38:27,340
work a demon that stays there doing spin

00:38:23,770 --> 00:38:33,730
so it's not very complicated and the

00:38:27,340 --> 00:38:38,640
master has as a few so it's now

00:38:33,730 --> 00:38:42,520
generating the HTML here and it's also

00:38:38,640 --> 00:38:46,720
doing new tests scheduled a new test

00:38:42,520 --> 00:38:50,470
runs DEP side batch and that's pretty

00:38:46,720 --> 00:38:55,750
much it I think we're almost out of time

00:38:50,470 --> 00:39:02,020
and does anyone have more questions if

00:38:55,750 --> 00:39:05,680
not I think we can finish here thanks

00:39:02,020 --> 00:39:10,680
for coming I hope I see pages from few

00:39:05,680 --> 00:39:10,680

YouTube URL: https://www.youtube.com/watch?v=JcJyuBTbhIA


