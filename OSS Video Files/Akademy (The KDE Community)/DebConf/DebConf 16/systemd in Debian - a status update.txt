Title: systemd in Debian - a status update
Publication date: 2017-12-05
Playlist: DebConf 16
Description: 
	by Michael Biebl

At: Debconf 16 video RSS feed
https://debconf16.debconf.org/
Room: Menzies 9
Scheduled start: 2016-07-05 11:40:00
Captions: 
	00:00:00,469 --> 00:00:06,450
okay please welcome Michael people who

00:00:03,659 --> 00:00:09,599
will be giving us an update about system

00:00:06,450 --> 00:00:13,469
during the also what you can expect

00:00:09,599 --> 00:00:17,460
during the stretch for these cycles okay

00:00:13,469 --> 00:00:20,369
that is work okay great so hello my name

00:00:17,460 --> 00:00:22,380
is Michael and isn't it a nice

00:00:20,369 --> 00:00:27,359
coincidence that the system the talk was

00:00:22,380 --> 00:00:29,340
scheduled after Kari Christy so yeah

00:00:27,359 --> 00:00:31,130
I've been a package system team

00:00:29,340 --> 00:00:34,079
maintainer for quite a while now and

00:00:31,130 --> 00:00:36,750
today I'd like to give you a shirt over

00:00:34,079 --> 00:00:40,140
you of what we did since last year since

00:00:36,750 --> 00:00:42,120
our talk last year at Def Con what

00:00:40,140 --> 00:00:44,640
topics we worked on and I think it's

00:00:42,120 --> 00:00:47,370
mostly three issues we concentrated on

00:00:44,640 --> 00:00:49,829
it's it's polishing the existing package

00:00:47,370 --> 00:00:51,300
and making sure packages we upload to

00:00:49,829 --> 00:00:55,340
unstable are always in a releasable

00:00:51,300 --> 00:01:00,750
state but also we put focus on on

00:00:55,340 --> 00:01:03,750
cutting away with excessive dependencies

00:01:00,750 --> 00:01:07,040
and making our base OS smaller because

00:01:03,750 --> 00:01:10,830
that's useful in a lot of cases and also

00:01:07,040 --> 00:01:15,650
related to that is getting rid of legacy

00:01:10,830 --> 00:01:15,650
stuff mostly related to system v in it

00:01:16,280 --> 00:01:22,650
so since the release of chassis we had

00:01:19,229 --> 00:01:25,020
four stable point releases and those

00:01:22,650 --> 00:01:28,740
bugs that were fixed weren't always

00:01:25,020 --> 00:01:30,740
grave bugs but smaller bugs and just

00:01:28,740 --> 00:01:32,820
stuff that annoy people and

00:01:30,740 --> 00:01:36,930
documentation updates and stuff like

00:01:32,820 --> 00:01:41,970
that so we use user decks excessively

00:01:36,930 --> 00:01:44,670
and track bugs that way and if you have

00:01:41,970 --> 00:01:47,460
any issues with system teen chassis

00:01:44,670 --> 00:01:49,049
please talk to us please file bugs we

00:01:47,460 --> 00:01:56,460
try to get them fixed in chassis and

00:01:49,049 --> 00:02:00,360
keep that updated for new releases in

00:01:56,460 --> 00:02:03,299
unstable we started to work pretty

00:02:00,360 --> 00:02:05,399
closely with upstream because we wanted

00:02:03,299 --> 00:02:07,680
upstream has a really rapid release

00:02:05,399 --> 00:02:09,539
cycle and what we wanted to be able to

00:02:07,680 --> 00:02:12,870
ship new releases pretty quickly and

00:02:09,539 --> 00:02:13,660
unstable so what upstream already has a

00:02:12,870 --> 00:02:16,210
pretty is a

00:02:13,660 --> 00:02:19,300
pretty elaborate a unit test suite but

00:02:16,210 --> 00:02:21,580
Martin Pitt worked on auto package on

00:02:19,300 --> 00:02:23,950
auto package test suite so we run that

00:02:21,580 --> 00:02:26,520
on on every pull request that's actually

00:02:23,950 --> 00:02:29,860
hooked up up streamed in the github CI

00:02:26,520 --> 00:02:34,750
so basically every commit that goes into

00:02:29,860 --> 00:02:37,000
upstream system D is tested on on Debian

00:02:34,750 --> 00:02:39,610
or specifically on Ubuntu on various

00:02:37,000 --> 00:02:44,340
architectures that means we could

00:02:39,610 --> 00:02:46,990
actually release a package to unstable

00:02:44,340 --> 00:02:49,240
at any moment and it's actually what's

00:02:46,990 --> 00:02:53,110
happened when there is a new upstream

00:02:49,240 --> 00:02:55,120
release over the last year we just

00:02:53,110 --> 00:02:57,160
shipped that more or less the other day

00:02:55,120 --> 00:03:00,640
and this worked out really well I mean

00:02:57,160 --> 00:03:02,410
that we can have we need close

00:03:00,640 --> 00:03:05,020
interaction with upstream for that to

00:03:02,410 --> 00:03:07,650
work and we need to make sure to push up

00:03:05,020 --> 00:03:10,200
our patches upstream as much as possible

00:03:07,650 --> 00:03:13,750
and we worked really hard on that and

00:03:10,200 --> 00:03:17,320
shrink our deviant specific patches to a

00:03:13,750 --> 00:03:19,600
minimum and so far we are pretty happy

00:03:17,320 --> 00:03:27,490
with the work flow that established out

00:03:19,600 --> 00:03:29,440
of that so so trimming down the base is

00:03:27,490 --> 00:03:33,220
what does this mean sometimes it's

00:03:29,440 --> 00:03:35,830
better if you install that stuff and one

00:03:33,220 --> 00:03:37,870
one of that use cases is for example the

00:03:35,830 --> 00:03:38,890
inner package itself there are use cases

00:03:37,870 --> 00:03:41,380
where you don't want to have it

00:03:38,890 --> 00:03:43,330
installed for example the inner package

00:03:41,380 --> 00:03:46,150
in a build environment is not strictly

00:03:43,330 --> 00:03:48,220
needed so we actually made the inner

00:03:46,150 --> 00:03:51,310
package that was introduced in chassis

00:03:48,220 --> 00:03:54,430
nonessential this means you can app get

00:03:51,310 --> 00:03:56,620
app remove init and system disease fee

00:03:54,430 --> 00:03:59,230
and system D along with it actually

00:03:56,620 --> 00:04:02,250
that's not really possible because we

00:03:59,230 --> 00:04:04,870
use this Fleck important equal : yes

00:04:02,250 --> 00:04:07,239
which means once you installed a system

00:04:04,870 --> 00:04:09,610
that the inner package it can't be

00:04:07,239 --> 00:04:11,830
removed without that D package warning

00:04:09,610 --> 00:04:13,840
that's just a precaution so users don't

00:04:11,830 --> 00:04:16,320
accidentally remove that so what you

00:04:13,840 --> 00:04:19,810
typically do is you're on a D bootstrap

00:04:16,320 --> 00:04:24,660
Varvara and ability or min base and what

00:04:19,810 --> 00:04:27,280
you get is a at root environment without

00:04:24,660 --> 00:04:29,740
system be installed without the inner

00:04:27,280 --> 00:04:31,720
a package installed it's just a really

00:04:29,740 --> 00:04:35,889
minimal built II environment

00:04:31,720 --> 00:04:38,460
Orchard environment for that we also not

00:04:35,889 --> 00:04:41,440
only had to drop the the essential flag

00:04:38,460 --> 00:04:43,690
we also made sure that that you def is

00:04:41,440 --> 00:04:45,820
also optional so we dropped the

00:04:43,690 --> 00:04:47,770
dependency on you def in system dean

00:04:45,820 --> 00:04:50,020
because sometimes you have containers

00:04:47,770 --> 00:04:52,710
where you don't need you def docker

00:04:50,020 --> 00:04:56,169
containers are a good example for that

00:04:52,710 --> 00:04:59,410
so we still want to ensure though that

00:04:56,169 --> 00:05:01,470
when you install a packet the the system

00:04:59,410 --> 00:05:03,880
that you def is installed so we'd use

00:05:01,470 --> 00:05:05,440
priority important for that that makes

00:05:03,880 --> 00:05:08,770
sure that a standard installation has

00:05:05,440 --> 00:05:12,940
you def and in it but i said you can

00:05:08,770 --> 00:05:14,800
remove those packages there was some

00:05:12,940 --> 00:05:16,780
fallout from that for example packages

00:05:14,800 --> 00:05:19,060
expecting has been run level to be

00:05:16,780 --> 00:05:20,820
around but it was really minor it worked

00:05:19,060 --> 00:05:25,180
really well

00:05:20,820 --> 00:05:27,400
we also split the package for various

00:05:25,180 --> 00:05:29,260
cases where we thought that the

00:05:27,400 --> 00:05:31,419
additional library dependencies weren't

00:05:29,260 --> 00:05:33,570
justified we try to keep splitting up

00:05:31,419 --> 00:05:37,630
their packages as minimal as possible

00:05:33,570 --> 00:05:40,000
because we do not like to split up in 20

00:05:37,630 --> 00:05:43,419
packages for every binary and have a

00:05:40,000 --> 00:05:45,669
coherent base system but for those cases

00:05:43,419 --> 00:05:47,080
system big container is mostly for

00:05:45,669 --> 00:05:49,229
assistant the end spawn assistant Lee

00:05:47,080 --> 00:05:52,990
machine D that pull in additional

00:05:49,229 --> 00:05:55,240
library dependencies journal remote is a

00:05:52,990 --> 00:05:58,960
special case where he thought it it

00:05:55,240 --> 00:06:01,300
pulled in Curl Curl lip curl I think so

00:05:58,960 --> 00:06:04,120
we put that we split it out as well and

00:06:01,300 --> 00:06:07,150
we actually try to coordinate that cross

00:06:04,120 --> 00:06:09,220
distro at last year's assistant d conf i

00:06:07,150 --> 00:06:12,820
talked to other destroy maintainer x'

00:06:09,220 --> 00:06:15,940
and wanted to know if they're interested

00:06:12,820 --> 00:06:17,890
in sharing the same names so they

00:06:15,940 --> 00:06:19,600
actually did split out of the fedora

00:06:17,890 --> 00:06:21,820
people splits the package in a similar

00:06:19,600 --> 00:06:23,970
way like we do in debian which is really

00:06:21,820 --> 00:06:23,970
nice

00:06:26,680 --> 00:06:31,430
something that just landed a few days

00:06:29,570 --> 00:06:36,590
ago is listening the lip system being

00:06:31,430 --> 00:06:38,420
shared so far the approach that system

00:06:36,590 --> 00:06:40,730
to use this was to link all the object

00:06:38,420 --> 00:06:43,370
file statically into all the binaries

00:06:40,730 --> 00:06:46,390
and use some compiler tricks to to

00:06:43,370 --> 00:06:49,430
remove those symbols that weren't needed

00:06:46,390 --> 00:06:51,650
I'm Philippa subtler worked closely with

00:06:49,430 --> 00:06:53,390
upstream and put all those comp turned

00:06:51,650 --> 00:06:55,160
all the common code into a shared

00:06:53,390 --> 00:07:00,470
library private shared library it's not

00:06:55,160 --> 00:07:02,480
an official Appy but that had a really

00:07:00,470 --> 00:07:06,380
nice effect it cut the package size in

00:07:02,480 --> 00:07:08,390
half so the latest upstream the latest

00:07:06,380 --> 00:07:11,120
release that landed in Debian a few days

00:07:08,390 --> 00:07:14,060
ago dropped dropped the package size in

00:07:11,120 --> 00:07:16,700
half and you worked upstream first on

00:07:14,060 --> 00:07:18,320
that so we didn't ship that in Debian

00:07:16,700 --> 00:07:20,960
but work upstream and once it was

00:07:18,320 --> 00:07:23,570
accepted we pulled that into system D

00:07:20,960 --> 00:07:29,150
which is really nice and upstream was

00:07:23,570 --> 00:07:34,310
really helpful in that regard so what we

00:07:29,150 --> 00:07:36,470
have in we also tried to get rid of init

00:07:34,310 --> 00:07:40,280
scripts and since we are seen because

00:07:36,470 --> 00:07:41,660
under system team the the init scripts

00:07:40,280 --> 00:07:43,820
that are shipped in the init scripts

00:07:41,660 --> 00:07:46,190
package aren't really used anymore so

00:07:43,820 --> 00:07:49,270
why should we install it at the moment

00:07:46,190 --> 00:07:54,500
it's pulled in because of its priority

00:07:49,270 --> 00:07:56,960
but it is close to possible to remove

00:07:54,500 --> 00:08:00,320
init scripts for that to work we had to

00:07:56,960 --> 00:08:02,330
move that lip in edoardo gel shell

00:08:00,320 --> 00:08:05,420
library that is used by a huge amount of

00:08:02,330 --> 00:08:10,450
in it scripts we moved that to the

00:08:05,420 --> 00:08:12,800
system in the giotto SPAC egde we first

00:08:10,450 --> 00:08:13,280
considered moving moving into init

00:08:12,800 --> 00:08:16,190
system

00:08:13,280 --> 00:08:18,230
init system helpers which is an init

00:08:16,190 --> 00:08:21,160
system agnostic package but then we

00:08:18,230 --> 00:08:25,100
decided it was too sis init specific and

00:08:21,160 --> 00:08:27,920
kept it in that package so we are on the

00:08:25,100 --> 00:08:30,830
closing stretch of getting those removed

00:08:27,920 --> 00:08:33,170
those are the user tegmark reports there

00:08:30,830 --> 00:08:35,840
are some of them left but for stretch

00:08:33,170 --> 00:08:37,940
you should be able to just not have init

00:08:35,840 --> 00:08:39,810
scripts installed the same is true for

00:08:37,940 --> 00:08:42,479
this VRC

00:08:39,810 --> 00:08:44,760
wage in chassis and and previously

00:08:42,479 --> 00:08:47,910
shipped update our city and invoke our

00:08:44,760 --> 00:08:49,710
city those we move to in system help us

00:08:47,910 --> 00:08:51,870
because they are really in its system

00:08:49,710 --> 00:08:54,330
agnostic there's support for open are

00:08:51,870 --> 00:08:57,330
seeing them their support for a system D

00:08:54,330 --> 00:08:59,790
in them so those move to in system

00:08:57,330 --> 00:09:02,760
helpers and it should be possible to

00:08:59,790 --> 00:09:04,680
remove those as well at the moment

00:09:02,760 --> 00:09:06,839
they're still installed asset they still

00:09:04,680 --> 00:09:08,790
have priority important so I pulled in

00:09:06,839 --> 00:09:11,700
by the Installer but that's something we

00:09:08,790 --> 00:09:13,980
work on and there are some still some

00:09:11,700 --> 00:09:16,820
corner cases we have to fix but that's

00:09:13,980 --> 00:09:20,610
on our to-do list

00:09:16,820 --> 00:09:24,060
moving on I'm not sure if if you know

00:09:20,610 --> 00:09:26,310
what in serve really is in our old this

00:09:24,060 --> 00:09:28,170
VIN it based in its system in serve was

00:09:26,310 --> 00:09:30,630
a tool that generated all the

00:09:28,170 --> 00:09:34,140
dependencies between the init scripts

00:09:30,630 --> 00:09:35,760
and calculated priorities made sure that

00:09:34,140 --> 00:09:40,850
packet of the one integrate brands of

00:09:35,760 --> 00:09:44,580
the after the other and there are some

00:09:40,850 --> 00:09:47,970
system facilities defined by LSB which

00:09:44,580 --> 00:09:50,430
are due to limitation in in serve have

00:09:47,970 --> 00:09:53,100
to be specified we are in serve config

00:09:50,430 --> 00:09:54,630
files so what we did in Debian to

00:09:53,100 --> 00:09:57,210
support that make sure that the the

00:09:54,630 --> 00:09:58,710
ordering between the init scripts and

00:09:57,210 --> 00:10:01,980
the system these service units is

00:09:58,710 --> 00:10:04,860
correct we we shipped a generator which

00:10:01,980 --> 00:10:09,510
amended the generated unit files or

00:10:04,860 --> 00:10:14,040
service files with drop in snippets and

00:10:09,510 --> 00:10:17,280
pull in those those those targets

00:10:14,040 --> 00:10:19,110
because system facilities in the five

00:10:17,280 --> 00:10:21,990
ended world are mapped to targets in the

00:10:19,110 --> 00:10:25,620
system v world and it's it's really

00:10:21,990 --> 00:10:27,570
assists a Debian specific patch and we

00:10:25,620 --> 00:10:30,420
really like to get rid of that and it's

00:10:27,570 --> 00:10:32,250
really simple to do it in your service

00:10:30,420 --> 00:10:34,680
file if you already ship that you chest

00:10:32,250 --> 00:10:37,350
a deck layer at once before a target

00:10:34,680 --> 00:10:39,450
name and even if you ship us is five

00:10:37,350 --> 00:10:41,130
init script in your package and you

00:10:39,450 --> 00:10:43,470
don't want to make migrate to a native

00:10:41,130 --> 00:10:45,690
service file yet you can still amend

00:10:43,470 --> 00:10:50,970
your sis five in a script with a drop in

00:10:45,690 --> 00:10:53,100
snippet so they're not not a lot of

00:10:50,970 --> 00:10:55,140
packages left which

00:10:53,100 --> 00:10:58,530
need to be fixed those are tracked with

00:10:55,140 --> 00:11:01,800
that user take if you want to take a

00:10:58,530 --> 00:11:06,170
look them the biggest topic is the

00:11:01,800 --> 00:11:11,640
removal of RCS init scripts those are

00:11:06,170 --> 00:11:14,490
really tricky because the the dependency

00:11:11,640 --> 00:11:17,430
is defined by those init scripts RCS

00:11:14,490 --> 00:11:20,490
maybe I have to quickly talk about what

00:11:17,430 --> 00:11:23,130
our CST is RCS the D is the Debian

00:11:20,490 --> 00:11:25,860
specific and means those init scripts

00:11:23,130 --> 00:11:28,130
are started during early boot and and

00:11:25,860 --> 00:11:30,620
they are pretty prone to cause

00:11:28,130 --> 00:11:34,530
dependency loops under system D because

00:11:30,620 --> 00:11:38,460
the generator which runs for those init

00:11:34,530 --> 00:11:40,800
scripts doesn't know and the specific

00:11:38,460 --> 00:11:42,840
dependencies those init scripts have so

00:11:40,800 --> 00:11:45,930
sometimes the dependencies are too

00:11:42,840 --> 00:11:49,620
strict and for example we have hooks in

00:11:45,930 --> 00:11:52,470
DHC client if up/down which start RCS

00:11:49,620 --> 00:11:56,640
init scripts and those can lead to dead

00:11:52,470 --> 00:11:58,430
logs so it's also Debian specific patch

00:11:56,640 --> 00:12:00,990
we would really like to get rid of and

00:11:58,430 --> 00:12:03,860
the best solution we have is just

00:12:00,990 --> 00:12:07,500
shipped native service files for your

00:12:03,860 --> 00:12:10,100
demon and in that service file you can

00:12:07,500 --> 00:12:12,060
declare very specifically which

00:12:10,100 --> 00:12:15,480
dependencies you need which orderings

00:12:12,060 --> 00:12:17,850
you need and then this way we can get

00:12:15,480 --> 00:12:19,590
rid of the patch and we can get rid of

00:12:17,850 --> 00:12:22,920
all those dependencies cycles that

00:12:19,590 --> 00:12:30,540
happen because of the RCS the init

00:12:22,920 --> 00:12:33,930
scripts finally I've taken a look at how

00:12:30,540 --> 00:12:37,230
well system D is accepted in system D in

00:12:33,930 --> 00:12:39,900
Debian and what you can see here the

00:12:37,230 --> 00:12:42,090
yellow line is the number of init

00:12:39,900 --> 00:12:46,260
scripts we shipped in wheezy Jesse

00:12:42,090 --> 00:12:49,320
stretch and said the Green Line is the

00:12:46,260 --> 00:12:53,370
number of packages we have shipping init

00:12:49,320 --> 00:12:56,130
scripts so it's it's pretty pretty close

00:12:53,370 --> 00:13:00,120
I mean there's one one system 5in script

00:12:56,130 --> 00:13:03,090
per package and what you can see the

00:13:00,120 --> 00:13:06,370
blue line is the number of system D unit

00:13:03,090 --> 00:13:09,730
files or service files and the red

00:13:06,370 --> 00:13:14,769
is the number of packages with service

00:13:09,730 --> 00:13:16,870
files typically what you have in system

00:13:14,769 --> 00:13:19,389
D or packages shipping service files

00:13:16,870 --> 00:13:21,519
that you ship one service file per Damon

00:13:19,389 --> 00:13:25,749
and not start multiple multiple demons

00:13:21,519 --> 00:13:28,660
in in one service file so that explains

00:13:25,749 --> 00:13:30,339
why there are that much more service

00:13:28,660 --> 00:13:32,800
file compared to the number of packages

00:13:30,339 --> 00:13:35,189
shipping them and what you can also see

00:13:32,800 --> 00:13:38,279
that the increase was pretty nice over

00:13:35,189 --> 00:13:41,649
the chassis release cycle we almost we

00:13:38,279 --> 00:13:44,800
over doubled it and we already have 50%

00:13:41,649 --> 00:13:47,379
coverage of service file in Debian which

00:13:44,800 --> 00:13:49,180
is really great and we didn't expect

00:13:47,379 --> 00:13:50,439
that that people are so eager to work on

00:13:49,180 --> 00:13:55,660
that so cute

00:13:50,439 --> 00:13:59,829
huge thanks to everyone so I wanted to

00:13:55,660 --> 00:14:04,029
leave time for questions so this is

00:13:59,829 --> 00:14:06,660
where we track our bugs we use as I said

00:14:04,029 --> 00:14:10,329
we use user user text pretty extensively

00:14:06,660 --> 00:14:14,110
if you want to have a look and help us

00:14:10,329 --> 00:14:15,730
fix those bugs look at either system

00:14:14,110 --> 00:14:18,220
these specific parks or bugs and

00:14:15,730 --> 00:14:22,389
packages with which a user tech if you

00:14:18,220 --> 00:14:25,449
want to get in touch with us we do have

00:14:22,389 --> 00:14:29,110
an IRC channel oft see it's it's going

00:14:25,449 --> 00:14:33,759
deep in - system D we also have a

00:14:29,110 --> 00:14:35,139
mailing list so just come by talk to us

00:14:33,759 --> 00:14:37,209
if you want to know more

00:14:35,139 --> 00:14:39,160
I will also be around to the next couple

00:14:37,209 --> 00:14:40,990
of days so just grab me in the hallway

00:14:39,160 --> 00:14:43,629
and if you have any questions with

00:14:40,990 --> 00:14:44,050
specific to system theme just just talk

00:14:43,629 --> 00:14:46,420
to me

00:14:44,050 --> 00:14:49,899
we are friendly people and if you

00:14:46,420 --> 00:14:53,100
actually fix it back come by I didn't

00:14:49,899 --> 00:14:56,079
bring cookies but you get a free hug so

00:14:53,100 --> 00:14:58,360
thanks everyone and I left time for a

00:14:56,079 --> 00:15:01,300
few minutes for questions if there are

00:14:58,360 --> 00:15:04,300
any I think we should had five minutes

00:15:01,300 --> 00:15:08,399
right so I'd like to go back on the RCS

00:15:04,300 --> 00:15:11,139
program about two years ago when I

00:15:08,399 --> 00:15:14,610
attempted to Borbon LC to

00:15:11,139 --> 00:15:18,459
I've hit the same problem which is that

00:15:14,610 --> 00:15:19,360
which package did you open our C okay

00:15:18,459 --> 00:15:24,550
open our safe

00:15:19,360 --> 00:15:28,540
so I also found out that the RCS scripts

00:15:24,550 --> 00:15:32,980
have many dependency loops so the way we

00:15:28,540 --> 00:15:36,009
did it was that we have some logic to

00:15:32,980 --> 00:15:39,370
break these dependency loops in some way

00:15:36,009 --> 00:15:41,860
or another but like I had the strong

00:15:39,370 --> 00:15:45,399
feeling that the problem was the RCS

00:15:41,860 --> 00:15:47,470
scripts themselves wouldn't be wouldn't

00:15:45,399 --> 00:15:50,889
be healthier for Debian if we just

00:15:47,470 --> 00:15:54,639
attempted to fix these rather than going

00:15:50,889 --> 00:16:00,160
around the problem well what because k

00:15:54,639 --> 00:16:02,319
FreeBSD port and her boards okay so what

00:16:00,160 --> 00:16:06,009
we do in insistent is actually we don't

00:16:02,319 --> 00:16:08,230
want to work around are those issues

00:16:06,009 --> 00:16:10,269
anymore but make the packages ship

00:16:08,230 --> 00:16:12,220
native service files so I'm not sure

00:16:10,269 --> 00:16:15,459
what you mean what what we should do

00:16:12,220 --> 00:16:18,310
differently with you want to abandon RCS

00:16:15,459 --> 00:16:21,670
init scripts altogether no I like these

00:16:18,310 --> 00:16:25,000
dependency loops to be fixed in the RCS

00:16:21,670 --> 00:16:28,630
scripts so that non Linux port could

00:16:25,000 --> 00:16:30,699
still enjoy having a healthy RCS set of

00:16:28,630 --> 00:16:34,750
init scripts rather than these that we

00:16:30,699 --> 00:16:36,880
have with loops okay so the thing is

00:16:34,750 --> 00:16:38,920
assistant lean in the early boot

00:16:36,880 --> 00:16:40,899
sometimes behaves differently so some of

00:16:38,920 --> 00:16:43,660
the dependency dependency loops you

00:16:40,899 --> 00:16:46,180
don't get with this five in it or the

00:16:43,660 --> 00:16:47,889
five in it just doesn't care so so it

00:16:46,180 --> 00:16:49,839
doesn't happen and I'm not sure if we

00:16:47,889 --> 00:16:52,630
can easily detect those dependency loops

00:16:49,839 --> 00:16:56,290
with system five in it so much sure if

00:16:52,630 --> 00:16:58,809
we can or how we can fix those we have

00:16:56,290 --> 00:17:04,419
to go to detect them and they print when

00:16:58,809 --> 00:17:07,089
you start it if someone wants to fix the

00:17:04,419 --> 00:17:10,059
RCS five in it scripts I mean all power

00:17:07,089 --> 00:17:11,890
to them the solution to system D for

00:17:10,059 --> 00:17:13,329
system T is really to ship native

00:17:11,890 --> 00:17:15,819
service files and we can't really fix

00:17:13,329 --> 00:17:18,459
that with RCS keeping the RCS the init

00:17:15,819 --> 00:17:20,140
scripts so we will push getting that

00:17:18,459 --> 00:17:22,000
fixed and it's actually looking pretty

00:17:20,140 --> 00:17:25,220
good I mean we are on the closing

00:17:22,000 --> 00:17:27,649
stretch christian hofstetler who is he

00:17:25,220 --> 00:17:29,960
worked really furiously the last couple

00:17:27,649 --> 00:17:32,539
of days so we get that for a stretch for

00:17:29,960 --> 00:17:34,789
for systemd at least and if there's

00:17:32,539 --> 00:17:40,750
interest for open RC working on that I

00:17:34,789 --> 00:17:40,750
mean great why not other questions

00:17:47,570 --> 00:17:52,070
maybe I wasn't paying enough attention

00:17:48,799 --> 00:17:54,500
did you mention system D Network D no I

00:17:52,070 --> 00:17:56,750
didn't because there are no specific

00:17:54,500 --> 00:17:59,090
plans for stretch yet we ship that

00:17:56,750 --> 00:18:01,730
within the system D package it's not

00:17:59,090 --> 00:18:03,409
enabled by default you can try it you

00:18:01,730 --> 00:18:06,080
can use it if you want it works nicely

00:18:03,409 --> 00:18:08,149
for four different use cases but we

00:18:06,080 --> 00:18:11,720
don't have any immediate plans to make

00:18:08,149 --> 00:18:14,210
it well replace if I've done for example

00:18:11,720 --> 00:18:16,909
for stretch I think it's too early for

00:18:14,210 --> 00:18:18,799
that there's still some missing bits and

00:18:16,909 --> 00:18:21,879
pieces here and there for example there

00:18:18,799 --> 00:18:24,710
is no no no hook interface yet and an

00:18:21,879 --> 00:18:26,600
option is not really so eager to add a

00:18:24,710 --> 00:18:30,710
hook interface so this needs to be

00:18:26,600 --> 00:18:33,620
worked out first before we can propose

00:18:30,710 --> 00:18:39,070
that are there any other things that are

00:18:33,620 --> 00:18:42,440
available in system the same situation I

00:18:39,070 --> 00:18:45,740
mean I do know that Ubuntu is pushing

00:18:42,440 --> 00:18:50,450
for recently resolved T which is really

00:18:45,740 --> 00:18:53,870
nice technology and but I'm not sure if

00:18:50,450 --> 00:18:56,419
we are there yet in terian I mean I just

00:18:53,870 --> 00:18:59,750
keep looking how hard it works out in

00:18:56,419 --> 00:19:05,769
Ubuntu and maybe been for Buster we

00:18:59,750 --> 00:19:05,769
propose the same okay

00:19:06,750 --> 00:19:11,460
I mean there's also system to boot but

00:19:09,419 --> 00:19:13,620
but it's also optional at the moment

00:19:11,460 --> 00:19:17,159
it's for you if I booting not something

00:19:13,620 --> 00:19:21,059
we push for Debian to to make the

00:19:17,159 --> 00:19:23,460
default huh yeah what question do you

00:19:21,059 --> 00:19:27,600
guys plan to update the version before

00:19:23,460 --> 00:19:30,450
the freeze Mehring 2:30 for some time

00:19:27,600 --> 00:19:32,370
now the version the unstable yeah sure

00:19:30,450 --> 00:19:35,190
I mean as soon as there's a new upstream

00:19:32,370 --> 00:19:36,480
release if you follow the Debian change

00:19:35,190 --> 00:19:38,610
lock we basically uploaded a new

00:19:36,480 --> 00:19:40,409
upstream release the other day that's

00:19:38,610 --> 00:19:42,870
possible because we build it every day

00:19:40,409 --> 00:19:46,919
anyway and we test it every day anyway

00:19:42,870 --> 00:19:50,909
and I actually use a trunk build and it

00:19:46,919 --> 00:19:53,010
just works it's really nice so yeah

00:19:50,909 --> 00:19:57,870
before the freeze we will try to get in

00:19:53,010 --> 00:20:00,539
the new versions well we try to if there

00:19:57,870 --> 00:20:03,630
is something up stream and which breaks

00:20:00,539 --> 00:20:05,850
then we probably will defer a new upload

00:20:03,630 --> 00:20:10,980
but sure we track new option releases

00:20:05,850 --> 00:20:13,409
pretty closely more questions ok is

00:20:10,980 --> 00:20:17,970
there any plan maybe by this security

00:20:13,409 --> 00:20:33,630
team or smart to go through and various

00:20:17,970 --> 00:20:35,190
services that's a good point actually

00:20:33,630 --> 00:20:37,320
one of the benefits that systemd

00:20:35,190 --> 00:20:39,659
provides I don't know there is a

00:20:37,320 --> 00:20:42,330
coordinate coordinated effort at a

00:20:39,659 --> 00:20:45,360
moment because it really needs input

00:20:42,330 --> 00:20:48,179
from the individual maintainer x' they

00:20:45,360 --> 00:20:50,760
know best what their service needs and

00:20:48,179 --> 00:20:52,740
if how you can restrict those but sure

00:20:50,760 --> 00:20:55,289
if someone would want to work on that

00:20:52,740 --> 00:20:57,659
coordinate that may be put together a

00:20:55,289 --> 00:20:59,460
wiki page documenting that stuff that

00:20:57,659 --> 00:21:01,470
would be really awesome so if that's

00:20:59,460 --> 00:21:08,450
something you're interested in get in

00:21:01,470 --> 00:21:11,130
touch ok yes assistant he has a lot of

00:21:08,450 --> 00:21:14,159
flags where you can restrict the

00:21:11,130 --> 00:21:16,620
capabilities the service has for example

00:21:14,159 --> 00:21:18,690
you can use private temp then your

00:21:16,620 --> 00:21:20,240
service gets a temp directory which is

00:21:18,690 --> 00:21:22,390
not the real temp but a

00:21:20,240 --> 00:21:24,860
private directory there are lots of

00:21:22,390 --> 00:21:28,370
simple switches you can enable in your

00:21:24,860 --> 00:21:31,940
service file which restricts our service

00:21:28,370 --> 00:21:36,620
and makes it less likely that open bugs

00:21:31,940 --> 00:21:41,590
in the service affect your system okay

00:21:36,620 --> 00:21:41,590
questions oh yeah we ran out of time so

00:21:43,179 --> 00:21:46,660

YouTube URL: https://www.youtube.com/watch?v=q9H4ePl34-Y


