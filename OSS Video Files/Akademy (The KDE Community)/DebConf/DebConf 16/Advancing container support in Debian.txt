Title: Advancing container support in Debian
Publication date: 2017-12-05
Playlist: DebConf 16
Description: 
	by Tim Potter

At: Debconf 16 video RSS feed
https://debconf16.debconf.org/
Room: Menzies 9
Scheduled start: 2016-07-07 11:10:00
Captions: 
	00:00:01,490 --> 00:00:07,470
okay so the next session will be Tim

00:00:05,400 --> 00:00:12,469
Potter about advancing container support

00:00:07,470 --> 00:00:12,469
and Debian Thanks

00:00:13,099 --> 00:00:19,590
hey thanks everyone so I'm just going to

00:00:15,900 --> 00:00:20,789
talk today about containers a little bit

00:00:19,590 --> 00:00:22,859
about what they are in case you haven't

00:00:20,789 --> 00:00:26,970
heard of them I'd be surprised if anyone

00:00:22,859 --> 00:00:28,920
hadn't I kind of why some of the reasons

00:00:26,970 --> 00:00:32,250
why people like them and what we are

00:00:28,920 --> 00:00:35,660
doing in Debian to try and let people

00:00:32,250 --> 00:00:39,000
use containers so to start off

00:00:35,660 --> 00:00:40,170
containers are actually not really I

00:00:39,000 --> 00:00:42,540
guess like everything under the Sun

00:00:40,170 --> 00:00:44,940
there's nothing new containers are a way

00:00:42,540 --> 00:00:48,000
of implementing very lightweight

00:00:44,940 --> 00:00:51,149
virtualization so instead of having to

00:00:48,000 --> 00:00:53,370
emulate a complete server hardware down

00:00:51,149 --> 00:00:56,250
at the instruction set level we're doing

00:00:53,370 --> 00:00:58,559
a virtualization at a much higher level

00:00:56,250 --> 00:01:01,559
with the process level so containers are

00:00:58,559 --> 00:01:06,979
sometimes referred to as process based

00:01:01,559 --> 00:01:09,479
virtualization and pros are excuse me

00:01:06,979 --> 00:01:12,500
are containers are implemented using to

00:01:09,479 --> 00:01:15,950
feed kind of technological features in

00:01:12,500 --> 00:01:21,409
the Linux kernel control groups and

00:01:15,950 --> 00:01:21,409
namespaces control groups are a way of

00:01:21,439 --> 00:01:27,659
having more fine-grained access to

00:01:23,759 --> 00:01:30,780
resources on the machine so you can do a

00:01:27,659 --> 00:01:34,079
lot more in terms of restricting access

00:01:30,780 --> 00:01:37,979
to different CPUs or memory you can art

00:01:34,079 --> 00:01:41,340
thanks very much you can place limits on

00:01:37,979 --> 00:01:43,290
the network use and I oh usage of the

00:01:41,340 --> 00:01:46,200
things soever process or a group of

00:01:43,290 --> 00:01:49,820
processes so it so it's all about rules

00:01:46,200 --> 00:01:53,100
of resource control and namespaces is

00:01:49,820 --> 00:01:55,619
another feature in the Linux kernel and

00:01:53,100 --> 00:01:57,210
it allows processes to be isolated from

00:01:55,619 --> 00:02:00,570
one another at the operating system

00:01:57,210 --> 00:02:02,790
level and this isolation can occur at

00:02:00,570 --> 00:02:05,969
seven at several different levels so at

00:02:02,790 --> 00:02:07,920
the process table level so processors

00:02:05,969 --> 00:02:09,119
can't see other groups of processes on

00:02:07,920 --> 00:02:11,180
the machine there it looks like they're

00:02:09,119 --> 00:02:14,040
the only process running on the machine

00:02:11,180 --> 00:02:16,680
for network you can give a process or a

00:02:14,040 --> 00:02:19,890
group of processes their own networking

00:02:16,680 --> 00:02:21,660
ipv4 or ipv6 networking stack that's

00:02:19,890 --> 00:02:24,239
completely isolated from the rest of the

00:02:21,660 --> 00:02:27,540
machine you can have a different

00:02:24,239 --> 00:02:30,599
mountain name space between processes

00:02:27,540 --> 00:02:37,739
and user you can have a different set of

00:02:30,599 --> 00:02:40,110
user IDs group IDs and RPC and UTS so

00:02:37,739 --> 00:02:42,150
inter-process communications and I

00:02:40,110 --> 00:02:43,590
believe that's kind of hostname UTS

00:02:42,150 --> 00:02:45,750
refers to a host name and domain name

00:02:43,590 --> 00:02:47,209
types of things so not only can you

00:02:45,750 --> 00:02:49,319
isolate

00:02:47,209 --> 00:02:51,780
processes from one another using all

00:02:49,319 --> 00:02:53,580
these methods you can also I mean you

00:02:51,780 --> 00:02:55,620
can also you can hope you can you can

00:02:53,580 --> 00:02:57,510
share them as well so you can have two

00:02:55,620 --> 00:02:59,580
different sets of processes sharing a

00:02:57,510 --> 00:03:01,140
network stack or can be completely

00:02:59,580 --> 00:03:02,989
separate so it's very it's very

00:03:01,140 --> 00:03:05,159
fine-grained as well like control grids

00:03:02,989 --> 00:03:07,290
and it's the combination of these two

00:03:05,159 --> 00:03:11,390
things control groups and namespaces

00:03:07,290 --> 00:03:11,390
that make containers work on Linux

00:03:12,659 --> 00:03:18,019
brief history of players here there's

00:03:15,360 --> 00:03:21,480
probably more knowledge in the room here

00:03:18,019 --> 00:03:22,769
about this and then I have found

00:03:21,480 --> 00:03:25,709
we general overview

00:03:22,769 --> 00:03:28,830
you might remember open V Zed and Linux

00:03:25,709 --> 00:03:31,890
V server these were quite old in

00:03:28,830 --> 00:03:33,870
internet time quite old systems for

00:03:31,890 --> 00:03:37,019
doing process virtualization so again

00:03:33,870 --> 00:03:40,110
the idea is you've got one one server

00:03:37,019 --> 00:03:43,549
and you can run multiple kind of other

00:03:40,110 --> 00:03:46,950
containers virtual private servers

00:03:43,549 --> 00:03:48,720
inside this this one one machine without

00:03:46,950 --> 00:03:49,560
you know having to do the full hardware

00:03:48,720 --> 00:03:51,599
virtualization

00:03:49,560 --> 00:03:54,330
so this is a kind of predated

00:03:51,599 --> 00:03:56,810
virtualization as we know it today so

00:03:54,330 --> 00:04:00,739
openvz ed and it's B server I think

00:03:56,810 --> 00:04:02,970
openvz ed is still going they're still

00:04:00,739 --> 00:04:05,730
producing releases which is pretty

00:04:02,970 --> 00:04:07,819
pretty fantastic to see and our

00:04:05,730 --> 00:04:11,189
containers I guess as we know them today

00:04:07,819 --> 00:04:14,730
kind of came into being mostly with

00:04:11,189 --> 00:04:17,400
Alexei Alexei for Linux containers there

00:04:14,730 --> 00:04:19,620
I takes the control groups and

00:04:17,400 --> 00:04:20,730
namespaces technologies that we that I

00:04:19,620 --> 00:04:22,590
mentioned

00:04:20,730 --> 00:04:24,000
some have some nice user space tools for

00:04:22,590 --> 00:04:27,060
managing them and creating and

00:04:24,000 --> 00:04:30,060
destroying containers and then Along

00:04:27,060 --> 00:04:32,580
Came docker I think everyone here has

00:04:30,060 --> 00:04:34,020
probably heard of docker and doctor came

00:04:32,580 --> 00:04:36,690
along and I guess it didn't really

00:04:34,020 --> 00:04:38,790
introduce anything new technologically

00:04:36,690 --> 00:04:40,740
it's still underlying the underlying

00:04:38,790 --> 00:04:43,110
bits and pieces are still the namespaces

00:04:40,740 --> 00:04:45,020
and control groups but doctor came along

00:04:43,110 --> 00:04:48,120
with some really good user space tools

00:04:45,020 --> 00:04:51,450
and this kind of idea of being able to

00:04:48,120 --> 00:04:53,940
share container images very easily so

00:04:51,450 --> 00:04:55,950
there's a image registry for docker you

00:04:53,940 --> 00:04:59,010
can say you know dr. pool Debian and

00:04:55,950 --> 00:05:02,970
it'll suck down Debian image and you can

00:04:59,010 --> 00:05:05,010
get going quite quickly if you've ever

00:05:02,970 --> 00:05:06,840
used personally I when I use the LXE I

00:05:05,010 --> 00:05:08,820
found it a bit clunky to try and create

00:05:06,840 --> 00:05:10,890
images and get started but docker I

00:05:08,820 --> 00:05:12,930
think their innovation one of their

00:05:10,890 --> 00:05:15,060
innovations was just being able to get

00:05:12,930 --> 00:05:19,020
started very quickly and having a shared

00:05:15,060 --> 00:05:20,900
image repository and via what's next I

00:05:19,020 --> 00:05:23,400
don't know docker scene is it like it

00:05:20,900 --> 00:05:24,900
invincible at the moment they have got

00:05:23,400 --> 00:05:27,540
all the mindshare and all the developer

00:05:24,900 --> 00:05:28,920
share but um you know disruption you

00:05:27,540 --> 00:05:30,930
know a disruption in the industry as a

00:05:28,920 --> 00:05:34,010
way of happening and surprising people

00:05:30,930 --> 00:05:37,850
so you know is what's going to come next

00:05:34,010 --> 00:05:41,670
so it seems to me that everyone's gone

00:05:37,850 --> 00:05:44,790
container crazy you can't kind of you

00:05:41,670 --> 00:05:46,080
know read a IT magazine or something

00:05:44,790 --> 00:05:50,280
without someone talking about docker

00:05:46,080 --> 00:05:56,070
it's really quite amazing huh it's even

00:05:50,280 --> 00:05:59,580
I found this little graph here a while

00:05:56,070 --> 00:06:02,430
ago but this graph was I was originally

00:05:59,580 --> 00:06:06,120
done in 2015 and I reproduced it here

00:06:02,430 --> 00:06:07,710
and it shows I guess ok it's not oh not

00:06:06,120 --> 00:06:09,300
a scientifically accurate graph it's

00:06:07,710 --> 00:06:10,560
just a measure of the Google Trends

00:06:09,300 --> 00:06:12,780
which is a number of searches for a

00:06:10,560 --> 00:06:15,500
particular topic and our yellow line

00:06:12,780 --> 00:06:17,970
there is sorry the red line is for the

00:06:15,500 --> 00:06:20,130
yellow line is Virchow searching for the

00:06:17,970 --> 00:06:21,570
virtualization red is kind of OpenStack

00:06:20,130 --> 00:06:23,610
I mean if you thought OpenStack was

00:06:21,570 --> 00:06:27,420
crazy and just look at the blue line

00:06:23,610 --> 00:06:29,070
there so in 2015 the trend was you know

00:06:27,420 --> 00:06:30,780
kind of going upwards and then this year

00:06:29,070 --> 00:06:32,640
it's continued to go upwards it's at

00:06:30,780 --> 00:06:33,129
about the same rate so that's kind of

00:06:32,640 --> 00:06:36,039
kind

00:06:33,129 --> 00:06:41,399
interesting ad containers seem to be a

00:06:36,039 --> 00:06:41,399
bigger thing I've got a question

00:06:41,729 --> 00:06:52,839
that's alright this microphone maybe

00:06:51,099 --> 00:06:55,899
people are searching for technologies

00:06:52,839 --> 00:06:57,039
they're having trouble with yeah yeah no

00:06:55,899 --> 00:06:58,629
it's not very scientific I mean

00:06:57,039 --> 00:07:00,099
obviously it's well that I mean they're

00:06:58,629 --> 00:07:02,110
using it wouldn't it anyway it's not

00:07:00,099 --> 00:07:03,219
raining scientific but I think I thought

00:07:02,110 --> 00:07:05,619
it was interesting looking at the

00:07:03,219 --> 00:07:08,050
comparing the graph from 2015 and I'm

00:07:05,619 --> 00:07:10,629
extending it to 2016 the trends are kind

00:07:08,050 --> 00:07:13,419
of continuing so it's kind of

00:07:10,629 --> 00:07:16,869
interesting okay so why has everyone

00:07:13,419 --> 00:07:18,159
gone container crazy and I think I think

00:07:16,869 --> 00:07:19,779
docker has just turned up at the right

00:07:18,159 --> 00:07:22,300
space the right place at the right time

00:07:19,779 --> 00:07:25,029
you know with the right set of tools and

00:07:22,300 --> 00:07:27,819
just kind of taken advantage of

00:07:25,029 --> 00:07:30,249
perhaps people's I know disillusionment

00:07:27,819 --> 00:07:35,050
with the complexity of OpenStack I don't

00:07:30,249 --> 00:07:37,179
know that's just a guess personally I

00:07:35,050 --> 00:07:38,919
use containers a docker a lot just just

00:07:37,179 --> 00:07:43,149
for day-to-day development being able to

00:07:38,919 --> 00:07:45,309
create you know a Debian image and then

00:07:43,149 --> 00:07:46,990
check some little thing about it I you

00:07:45,309 --> 00:07:48,669
know is this far where's this file come

00:07:46,990 --> 00:07:50,379
from anything like that you could just

00:07:48,669 --> 00:07:52,300
destroy it again so where I would have

00:07:50,379 --> 00:07:56,729
used virtualization that's a lot quicker

00:07:52,300 --> 00:07:58,990
to use container and there's so many

00:07:56,729 --> 00:08:00,999
application images as well not just the

00:07:58,990 --> 00:08:04,779
operating system so you can create a

00:08:00,999 --> 00:08:07,149
Jenkins server very quickly it's you can

00:08:04,779 --> 00:08:09,189
you know make an elasticsearch cluster

00:08:07,149 --> 00:08:11,499
very quickly as well it doesn't take

00:08:09,189 --> 00:08:13,389
anywhere near at the time I'm out of

00:08:11,499 --> 00:08:16,990
time as it takes to build one up using

00:08:13,389 --> 00:08:18,789
virtual machines so development I think

00:08:16,990 --> 00:08:20,499
absolutely fantastic eyes at all the

00:08:18,789 --> 00:08:22,539
time production

00:08:20,499 --> 00:08:25,360
yeah I've I've heard some I haven't had

00:08:22,539 --> 00:08:28,929
any direct experience with HP customers

00:08:25,360 --> 00:08:30,459
using using production but I've heard

00:08:28,929 --> 00:08:33,669
lots of stories of people who are out

00:08:30,459 --> 00:08:39,659
there doing lots of CI CD with

00:08:33,669 --> 00:08:43,559
containers and using the isolation and

00:08:39,659 --> 00:08:43,559
reproducibility features of docker

00:08:43,660 --> 00:08:48,940
okay so a little bit about containers I

00:08:46,120 --> 00:08:51,610
think that Debian is actually missing

00:08:48,940 --> 00:08:55,900
out on a chance to get a lot of new

00:08:51,610 --> 00:08:58,630
users and I have a lot of people use

00:08:55,900 --> 00:09:00,220
Debian that might not simply because we

00:08:58,630 --> 00:09:02,680
don't support containers very well and I

00:09:00,220 --> 00:09:04,920
mean at the moment I think Debian is a

00:09:02,680 --> 00:09:07,510
great choice for containers because it's

00:09:04,920 --> 00:09:10,470
the you know the qualities that we like

00:09:07,510 --> 00:09:12,940
of freedom and quality and security and

00:09:10,470 --> 00:09:16,720
you know Debbie and I've said Debian

00:09:12,940 --> 00:09:19,510
stable is stable but what I mean is it

00:09:16,720 --> 00:09:21,100
makes a great host operating system so

00:09:19,510 --> 00:09:22,750
if you have I mean ideally you want your

00:09:21,100 --> 00:09:25,600
host operating system running on the bit

00:09:22,750 --> 00:09:27,520
on bare metal to be really stable it's

00:09:25,600 --> 00:09:30,130
got to have you know good kernel support

00:09:27,520 --> 00:09:32,410
driver support get security fixes you

00:09:30,130 --> 00:09:35,200
know and and it's it turns out that it's

00:09:32,410 --> 00:09:36,880
a really you want to have stable on your

00:09:35,200 --> 00:09:39,520
host and then something on your else is

00:09:36,880 --> 00:09:40,810
your guest as an unstable sorry you want

00:09:39,520 --> 00:09:42,700
to have something unstable on your host

00:09:40,810 --> 00:09:44,710
and then your guests can do anything it

00:09:42,700 --> 00:09:47,400
likes and it's not going to contaminate

00:09:44,710 --> 00:09:50,470
what's on the host and having having

00:09:47,400 --> 00:09:52,930
helped to run a build and run a kind of

00:09:50,470 --> 00:09:55,930
large public cloud being able to

00:09:52,930 --> 00:09:58,540
separate your workload from your based

00:09:55,930 --> 00:10:01,750
operating system is just a really

00:09:58,540 --> 00:10:03,190
fantastic way of being able to run

00:10:01,750 --> 00:10:06,970
things for that without a lot of trouble

00:10:03,190 --> 00:10:08,860
that we can avoid operating system

00:10:06,970 --> 00:10:09,490
vendor lock-in by you know this host and

00:10:08,860 --> 00:10:11,620
guest things

00:10:09,490 --> 00:10:14,860
I mean hosts and guests idea is

00:10:11,620 --> 00:10:18,370
something that virtualization has has

00:10:14,860 --> 00:10:20,530
taught us and we're we can we can avoid

00:10:18,370 --> 00:10:22,480
running having to run Red Hat on our I'm

00:10:20,530 --> 00:10:26,440
sorry we can avoid to have having run

00:10:22,480 --> 00:10:28,630
other operating systems on our hosts and

00:10:26,440 --> 00:10:29,830
if you want to count it I guess what I'm

00:10:28,630 --> 00:10:32,350
trying to say if you want to run run I

00:10:29,830 --> 00:10:34,060
have everything free you have to start

00:10:32,350 --> 00:10:35,890
from a free base and so we keep running

00:10:34,060 --> 00:10:37,870
debian as your based operating system

00:10:35,890 --> 00:10:41,650
for containers I think it's definitely

00:10:37,870 --> 00:10:43,690
helps avoid always spindle lock in I'm

00:10:41,650 --> 00:10:47,080
probably meant to say you're you should

00:10:43,690 --> 00:10:49,000
buy a lots of HP hardware so you can

00:10:47,080 --> 00:10:49,980
have how have hardware locking that's

00:10:49,000 --> 00:10:53,740
fine with me

00:10:49,980 --> 00:10:55,510
okay so Debian support for docker yeah

00:10:53,740 --> 00:10:58,540
man problem here well not really

00:10:55,510 --> 00:11:00,670
problem for freedom anyway the docker is

00:10:58,540 --> 00:11:04,600
available as a vendor package from

00:11:00,670 --> 00:11:07,930
docker calm and it's a binary deb file

00:11:04,600 --> 00:11:09,790
you download and install and you know

00:11:07,930 --> 00:11:11,890
the security people might not be happy

00:11:09,790 --> 00:11:18,000
with that idea what you know what source

00:11:11,890 --> 00:11:22,210
code was it built from everyone ok

00:11:18,000 --> 00:11:24,280
fantastic yeah I mean ok so it's yeah I

00:11:22,210 --> 00:11:26,080
mean we don't want to download random

00:11:24,280 --> 00:11:27,340
binary images from the internet install

00:11:26,080 --> 00:11:31,900
them on a machine I think that's a bad

00:11:27,340 --> 00:11:33,070
idea yeah so vendor packages of the open

00:11:31,900 --> 00:11:34,840
source and the commercial docker

00:11:33,070 --> 00:11:37,450
available but we'd like to have it in

00:11:34,840 --> 00:11:40,810
Debian main and this is something that

00:11:37,450 --> 00:11:44,590
the package go and the docker team and I

00:11:40,810 --> 00:11:46,930
and I've been working on yeah we have

00:11:44,590 --> 00:11:51,310
fairly old versions in stable backports

00:11:46,930 --> 00:11:55,000
1.6 1.8 0.3 and testing which is still

00:11:51,310 --> 00:11:56,560
pretty old 1.8 and one point eleven

00:11:55,000 --> 00:11:58,240
point two you just got uploaded a few

00:11:56,560 --> 00:12:03,670
days ago into unstable which is

00:11:58,240 --> 00:12:04,840
fantastic yeah so yeah I guess yeah

00:12:03,670 --> 00:12:08,350
we're kind of struggling with this

00:12:04,840 --> 00:12:09,970
problem of I guess you can not being

00:12:08,350 --> 00:12:13,510
able to put new things into stable so we

00:12:09,970 --> 00:12:16,090
can use back ports also the docker yeah

00:12:13,510 --> 00:12:17,920
since there since the they seem to be

00:12:16,090 --> 00:12:19,330
producing a lot of code in a very short

00:12:17,920 --> 00:12:21,820
time every couple of months there's a

00:12:19,330 --> 00:12:23,800
new version which has more dependencies

00:12:21,820 --> 00:12:27,220
which need packaging so it's quite a

00:12:23,800 --> 00:12:28,900
large effort to keep up with a sheer

00:12:27,220 --> 00:12:30,340
volume of coding that's going on which

00:12:28,900 --> 00:12:34,300
is fantastic it's great to see that

00:12:30,340 --> 00:12:36,700
we're getting new features and the whole

00:12:34,300 --> 00:12:39,130
industry is kind of moving along but

00:12:36,700 --> 00:12:43,990
yeah making sure this is in Debian is is

00:12:39,130 --> 00:12:45,100
quite a bit of work another bit of

00:12:43,990 --> 00:12:47,800
software you might have heard about is

00:12:45,100 --> 00:12:50,500
kuba DS it's a kind of container

00:12:47,800 --> 00:12:52,510
orchestration platform that uses docker

00:12:50,500 --> 00:12:54,310
as a back-end like I think you can use

00:12:52,510 --> 00:12:57,010
other backends but I believe most people

00:12:54,310 --> 00:12:58,390
use use docker it's been going for a

00:12:57,010 --> 00:13:00,790
long time

00:12:58,390 --> 00:13:03,280
and it's very popular as basically as

00:13:00,790 --> 00:13:05,650
app s so as a platform for developing

00:13:03,280 --> 00:13:09,430
and distributing kind of large multi

00:13:05,650 --> 00:13:11,590
node applications and this is in

00:13:09,430 --> 00:13:13,990
in debian as well but only in

00:13:11,590 --> 00:13:17,320
experimental so we've done a lot of

00:13:13,990 --> 00:13:21,100
packaging work getting kubernetes yeah

00:13:17,320 --> 00:13:23,910
interestingly almost all of container

00:13:21,100 --> 00:13:26,920
software is written in the go language

00:13:23,910 --> 00:13:29,440
so that seems to be this in its really

00:13:26,920 --> 00:13:31,570
interesting kind of I would have said a

00:13:29,440 --> 00:13:34,150
renascence but uh you know this really

00:13:31,570 --> 00:13:37,320
lots of lots of interest in using go as

00:13:34,150 --> 00:13:41,050
a language for writing system software

00:13:37,320 --> 00:13:45,300
yes so yeah kubinashi is an experimental

00:13:41,050 --> 00:13:47,530
hasn't really been tested that much yet

00:13:45,300 --> 00:13:51,820
rocket is another interesting project

00:13:47,530 --> 00:13:54,280
it's I guess in some sense it's some

00:13:51,820 --> 00:13:56,710
like group of people not wanting to I

00:13:54,280 --> 00:13:58,900
mean trying to avoid in the Lockean from

00:13:56,710 --> 00:14:02,110
docker so when writing or not not a

00:13:58,900 --> 00:14:05,050
replacement for docker but a substitute

00:14:02,110 --> 00:14:08,590
or a compliment for docker it's still

00:14:05,050 --> 00:14:12,610
very much in an incubator incubates and

00:14:08,590 --> 00:14:14,350
kind of development stage and hard I

00:14:12,610 --> 00:14:16,990
don't think it's seen a lot of oh I

00:14:14,350 --> 00:14:19,240
don't think it's seen a lot of a lot of

00:14:16,990 --> 00:14:19,960
uptake with all the bunch air being

00:14:19,240 --> 00:14:21,730
tightened by Daka

00:14:19,960 --> 00:14:26,260
anyway if you're interested in rocket we

00:14:21,730 --> 00:14:29,710
have it in testing in unstable ok just a

00:14:26,260 --> 00:14:32,260
to to kind of close why I think we

00:14:29,710 --> 00:14:34,750
should be working on containers so the

00:14:32,260 --> 00:14:37,210
fact is that containerization is driving

00:14:34,750 --> 00:14:39,820
a lot of computing at the moment where I

00:14:37,210 --> 00:14:42,190
have a lot of custom a lot of our

00:14:39,820 --> 00:14:44,440
customers are very interested in using

00:14:42,190 --> 00:14:48,220
docker in the development and in

00:14:44,440 --> 00:14:50,470
production I've heard some stories from

00:14:48,220 --> 00:14:53,650
some of the salespeople and HP that even

00:14:50,470 --> 00:14:56,080
very conservative customers like banks

00:14:53,650 --> 00:14:58,360
are very interested in this you would

00:14:56,080 --> 00:15:00,250
not think of banks typically as being

00:14:58,360 --> 00:15:02,500
customers that would be adopting a lot

00:15:00,250 --> 00:15:04,570
of new technology that they've taken on

00:15:02,500 --> 00:15:07,000
this docker and kubernetes idea and are

00:15:04,570 --> 00:15:09,130
really running hard with it so debian

00:15:07,000 --> 00:15:12,250
risks I believe Debbie and risks being

00:15:09,130 --> 00:15:13,810
left behind all and losing growth rather

00:15:12,250 --> 00:15:15,520
distributions because quite frankly we

00:15:13,810 --> 00:15:17,620
are not we don't support containers at

00:15:15,520 --> 00:15:18,930
the level that I that I think we should

00:15:17,620 --> 00:15:21,880
be

00:15:18,930 --> 00:15:25,209
so just the debian packaging go team is

00:15:21,880 --> 00:15:27,820
a typical debian team 55 members with a

00:15:25,209 --> 00:15:32,200
kind of core team that works on on

00:15:27,820 --> 00:15:34,779
docker so yeah I think I don't want this

00:15:32,200 --> 00:15:36,820
to be a you know we need assistance kind

00:15:34,779 --> 00:15:40,089
of pleading for help talk but if you

00:15:36,820 --> 00:15:43,750
want to try out docker in Debian it's

00:15:40,089 --> 00:15:45,670
available in the main archive so yeah

00:15:43,750 --> 00:15:53,560
download it and try it out please

00:15:45,670 --> 00:16:09,279
so thanks very much everyone and other

00:15:53,560 --> 00:16:11,140
any questions see go instead of go leg

00:16:09,279 --> 00:16:12,850
because the problem that we have with

00:16:11,140 --> 00:16:16,570
golang is actually that it's not

00:16:12,850 --> 00:16:20,649
supporting too many architectures ok

00:16:16,570 --> 00:16:25,500
yeah good question yeah I don't think

00:16:20,649 --> 00:16:29,050
that GCC go is the preferred go compiler

00:16:25,500 --> 00:16:31,959
at the moment by people in the dock in

00:16:29,050 --> 00:16:33,730
their go community which is I guess is

00:16:31,959 --> 00:16:36,250
unfortunate because it's it's kind of

00:16:33,730 --> 00:16:37,630
what Debian is I guess packaged a lot so

00:16:36,250 --> 00:16:41,140
yeah it was actually quite difficult to

00:16:37,630 --> 00:16:43,660
bootstrap version one point yeah yeah

00:16:41,140 --> 00:16:47,800
bed to bootstrap one point five I think

00:16:43,660 --> 00:16:49,089
for arm using GCC go but as far as I

00:16:47,800 --> 00:16:52,690
know I think everything's being built

00:16:49,089 --> 00:16:57,339
with then you go so yeah sorry which

00:16:52,690 --> 00:16:59,700
which platforms are you interested in ok

00:16:57,339 --> 00:16:59,700
right

00:17:02,470 --> 00:17:08,020
another problem with a golang was

00:17:04,780 --> 00:17:11,260
recently that go leg upstream they they

00:17:08,020 --> 00:17:15,160
kinda wanted to drop power 5 support for

00:17:11,260 --> 00:17:17,650
PowerPC big-endian ok which was kind of

00:17:15,160 --> 00:17:19,110
pointless because like no one was like I

00:17:17,650 --> 00:17:22,839
mean they wanted to raise the the

00:17:19,110 --> 00:17:24,459
architecture level 2 to power 8 which

00:17:22,839 --> 00:17:26,350
wouldn't have meant that you know that's

00:17:24,459 --> 00:17:28,630
the architecture that people can run the

00:17:26,350 --> 00:17:30,570
little endian part on so no one would

00:17:28,630 --> 00:17:32,120
have been using going any more on

00:17:30,570 --> 00:17:34,550
PowerPC

00:17:32,120 --> 00:17:36,410
big-endian so but luckily I was able to

00:17:34,550 --> 00:17:38,330
convince them to not to do great okay

00:17:36,410 --> 00:17:42,860
yeah I guess so someone at the mercy of

00:17:38,330 --> 00:17:45,260
upstream in this because it's a it's an

00:17:42,860 --> 00:17:49,370
entire language I guess there's not a

00:17:45,260 --> 00:17:51,980
lot of deep knowledge of going in Debbie

00:17:49,370 --> 00:17:54,020
and I think or at least some of the

00:17:51,980 --> 00:17:55,400
might might have included some of the

00:17:54,020 --> 00:17:56,570
packaging team don't have such a deep

00:17:55,400 --> 00:18:00,500
knowledge of goes so we're kind of

00:17:56,570 --> 00:18:02,690
following along right a bit of time

00:18:00,500 --> 00:18:06,610
because we started late um we had one

00:18:02,690 --> 00:18:11,720
more question here Joe Tim are there any

00:18:06,610 --> 00:18:14,900
plans to make official are there any

00:18:11,720 --> 00:18:18,140
plans on making official Debbie Debian

00:18:14,900 --> 00:18:20,710
images for doctor oh yeah it's thing

00:18:18,140 --> 00:18:22,940
yeah there are already official images

00:18:20,710 --> 00:18:25,910
the images that you can pull from the

00:18:22,940 --> 00:18:27,530
docker hub built by some Debian team

00:18:25,910 --> 00:18:28,850
members already started some Debian

00:18:27,530 --> 00:18:30,740
developers already so they're probably

00:18:28,850 --> 00:18:33,110
as official as you can get or you could

00:18:30,740 --> 00:18:35,900
go along to the cloud images both which

00:18:33,110 --> 00:18:38,270
i think is very shortly and finally we

00:18:35,900 --> 00:18:43,190
had that discussion for various other

00:18:38,270 --> 00:18:46,820
cloud thanks to the debian trademark

00:18:43,190 --> 00:18:49,160
team wants some sort of verification of

00:18:46,820 --> 00:18:51,710
those images because before they

00:18:49,160 --> 00:18:53,870
officially declared official dragon okay

00:18:51,710 --> 00:18:55,460
so i mean yes i said the images are

00:18:53,870 --> 00:18:57,260
generated by other Debian developers so

00:18:55,460 --> 00:19:02,470
you can you can work directly with them

00:18:57,260 --> 00:19:06,230
I'm not involved with that so sorry okay

00:19:02,470 --> 00:19:08,330
thank the realization starts please talk

00:19:06,230 --> 00:19:11,679
to Tim after the talk if you have any

00:19:08,330 --> 00:19:14,770
more questions sorry about the delay

00:19:11,679 --> 00:19:14,770
thank you

00:19:14,970 --> 00:19:17,030

YouTube URL: https://www.youtube.com/watch?v=i2dWlRMg6B8


