Title: Debian on ARM devices
Publication date: 2017-12-05
Playlist: DebConf 16
Description: 
	by Martin Michlmayr

At: Debconf 16 video RSS feed
https://debconf16.debconf.org/
Room: Menzies 10
Scheduled start: 2016-07-04 15:00:00
Captions: 
	00:00:02,310 --> 00:00:07,990
so I think we're ready to start

00:00:04,690 --> 00:00:17,140
so next talk is from Martin about Debian

00:00:07,990 --> 00:00:18,700
or um devices so if it's if them devices

00:00:17,140 --> 00:00:21,130
so it's not about the the Debian armed

00:00:18,700 --> 00:00:25,120
probe itself or one of the various on

00:00:21,130 --> 00:00:28,960
thought its I would say it's sort of a

00:00:25,120 --> 00:00:30,880
mix of different topics it's basically I

00:00:28,960 --> 00:00:34,900
mean basically I

00:00:30,880 --> 00:00:37,990
I often get the question from from users

00:00:34,900 --> 00:00:40,690
where Debian works on this particular

00:00:37,990 --> 00:00:43,420
arm device I have a device which is like

00:00:40,690 --> 00:00:46,240
really really similar so surely Debian

00:00:43,420 --> 00:00:48,750
should work on it right and and so far

00:00:46,240 --> 00:00:52,270
the answer unfortunately usually was no

00:00:48,750 --> 00:00:55,270
and and and it's really frustrating for

00:00:52,270 --> 00:00:56,860
users because they don't see why you

00:00:55,270 --> 00:00:59,470
know the device is pretty much the same

00:00:56,860 --> 00:01:01,660
so why doesn't it just work and so

00:00:59,470 --> 00:01:03,100
basically what I'm trying to do is is to

00:01:01,660 --> 00:01:08,290
show like a little bit behind the scenes

00:01:03,100 --> 00:01:10,630
of how Debian on arm works and and there

00:01:08,290 --> 00:01:13,780
has been a lot of progress so I was

00:01:10,630 --> 00:01:16,510
gonna show how did it work what are the

00:01:13,780 --> 00:01:18,820
improvements and and how is it going to

00:01:16,510 --> 00:01:21,490
work in the future and it's sort of from

00:01:18,820 --> 00:01:24,400
more from a developer perspective like

00:01:21,490 --> 00:01:27,640
hey how do we support in the Debian

00:01:24,400 --> 00:01:32,890
install as well so it's like a mix of

00:01:27,640 --> 00:01:34,750
stuff and I should say I'm I'm really

00:01:32,890 --> 00:01:36,909
looking at it from someone who basically

00:01:34,750 --> 00:01:39,340
add support for um devices in the

00:01:36,909 --> 00:01:41,740
Installer but I'm not like a kernel guy

00:01:39,340 --> 00:01:43,420
or anything so there are a lot of people

00:01:41,740 --> 00:01:46,030
in this room who know like way more

00:01:43,420 --> 00:01:48,100
about the technical details but I'm not

00:01:46,030 --> 00:01:51,070
gonna really drill down very very deep

00:01:48,100 --> 00:01:52,750
anyway but if if I'm incorrect I'm sure

00:01:51,070 --> 00:01:55,720
there are plenty of people who will

00:01:52,750 --> 00:01:58,270
correct me so it's a word where do you

00:01:55,720 --> 00:02:00,400
find arm and and pretty pretty much it

00:01:58,270 --> 00:02:03,040
it's everywhere I did these days I mean

00:02:00,400 --> 00:02:06,960
pretty pretty much every for every phone

00:02:03,040 --> 00:02:06,960
has has an ARM chip in it

00:02:07,240 --> 00:02:12,920
all those Internet of Things gadgets a

00:02:10,389 --> 00:02:15,560
lot of them are based

00:02:12,920 --> 00:02:19,069
you have nest devices and that's really

00:02:15,560 --> 00:02:20,900
the area that I used to focus on those

00:02:19,069 --> 00:02:23,870
those small boxes where you basically

00:02:20,900 --> 00:02:25,910
add a hard drive and and most people

00:02:23,870 --> 00:02:28,819
just you use it for storage but for us

00:02:25,910 --> 00:02:31,940
it's actually a you know a full PC where

00:02:28,819 --> 00:02:34,700
you can install Debian on it so I always

00:02:31,940 --> 00:02:36,980
found that to be very interesting and

00:02:34,700 --> 00:02:38,959
nowadays you have a lot of development

00:02:36,980 --> 00:02:40,700
boards and I'm actually not sure if

00:02:38,959 --> 00:02:42,980
development board is is the right word

00:02:40,700 --> 00:02:44,980
because when I hear development board I

00:02:42,980 --> 00:02:49,130
think of these like really expensive

00:02:44,980 --> 00:02:51,260
like 5k boards or something but nowadays

00:02:49,130 --> 00:02:53,420
you have those maybe a better word would

00:02:51,260 --> 00:02:55,610
be like bare boards like Raspberry Pi

00:02:53,420 --> 00:02:57,440
where you basically you just buy the

00:02:55,610 --> 00:02:59,209
board it doesn't come with your case

00:02:57,440 --> 00:03:01,910
even though you can you can buy titles

00:02:59,209 --> 00:03:03,920
as well and it's like $30 or something

00:03:01,910 --> 00:03:06,280
if you can you can get and I think

00:03:03,920 --> 00:03:10,130
that's really where most of the

00:03:06,280 --> 00:03:13,130
excitement is going on for Debian users

00:03:10,130 --> 00:03:16,000
at the moment and also a lot of the

00:03:13,130 --> 00:03:18,829
frustration I should add and and

00:03:16,000 --> 00:03:22,010
everyone says that you know arm is going

00:03:18,829 --> 00:03:24,739
to be big on servers and and and I think

00:03:22,010 --> 00:03:27,739
that's something we're gonna see but

00:03:24,739 --> 00:03:32,810
right now again it's it's a little bit

00:03:27,739 --> 00:03:34,340
frustrating so how how does it work so

00:03:32,810 --> 00:03:37,519
Debian installer

00:03:34,340 --> 00:03:39,890
there are basically two big different

00:03:37,519 --> 00:03:43,130
ways to install on those arm type

00:03:39,890 --> 00:03:45,440
devices so the like the historically

00:03:43,130 --> 00:03:48,709
that the normal way would be to install

00:03:45,440 --> 00:03:51,410
on like a screen and so that can be a

00:03:48,709 --> 00:03:55,549
serial console or it could be a real

00:03:51,410 --> 00:03:57,920
monitor with with mouse and keyboard and

00:03:55,549 --> 00:04:01,670
then you just download why the network

00:03:57,920 --> 00:04:03,350
or from a CD image or whatever but the

00:04:01,670 --> 00:04:06,019
other did a method which we actually

00:04:03,350 --> 00:04:09,680
used for a lot of those nest devices was

00:04:06,019 --> 00:04:13,100
network console where you basically SSH

00:04:09,680 --> 00:04:16,549
into the installer and you perform the

00:04:13,100 --> 00:04:19,130
installation via SSH and and and it was

00:04:16,549 --> 00:04:21,519
really the only way because those nest

00:04:19,130 --> 00:04:25,199
devices don't don't have any any

00:04:21,519 --> 00:04:27,900
input/output so even even though you can

00:04:25,199 --> 00:04:30,069
attach a serie consult most of them

00:04:27,900 --> 00:04:33,729
that's something we didn't want to

00:04:30,069 --> 00:04:35,229
require from the user and the other

00:04:33,729 --> 00:04:36,729
thing that's coming sooner I think it

00:04:35,229 --> 00:04:40,690
was actually committed today is it

00:04:36,729 --> 00:04:42,550
screen support so basically that you can

00:04:40,690 --> 00:04:44,889
you can have multiple sessions between

00:04:42,550 --> 00:04:46,360
di which which can be useful if you if

00:04:44,889 --> 00:04:51,370
you want to you know open a share and

00:04:46,360 --> 00:04:54,280
debug but so how and so this is really

00:04:51,370 --> 00:04:56,229
about looking back at like running

00:04:54,280 --> 00:04:58,259
Debian on nest devices which is

00:04:56,229 --> 00:05:01,900
something that used to be really popular

00:04:58,259 --> 00:05:05,590
and and the way it worked was basically

00:05:01,900 --> 00:05:07,900
that we provided a installer image which

00:05:05,590 --> 00:05:10,389
was sort of a firmware image a lot of

00:05:07,900 --> 00:05:13,030
those nice devices have like a firmware

00:05:10,389 --> 00:05:15,940
upgrade mechanism and so we would

00:05:13,030 --> 00:05:18,699
basically fake we would create a

00:05:15,940 --> 00:05:22,120
firmware image which the software would

00:05:18,699 --> 00:05:23,979
accept but instead of a firmware update

00:05:22,120 --> 00:05:26,320
it would actually contain Debian

00:05:23,979 --> 00:05:31,060
installer so you would you know install

00:05:26,320 --> 00:05:34,090
that upgrade you would reboot and you

00:05:31,060 --> 00:05:36,490
could SSH to the Installer and obviously

00:05:34,090 --> 00:05:38,800
in order to SSH to the install it needs

00:05:36,490 --> 00:05:41,229
to bring up the network so there is a

00:05:38,800 --> 00:05:42,550
tool called old SUSE precede which

00:05:41,229 --> 00:05:45,669
basically reads the network

00:05:42,550 --> 00:05:49,210
configuration from the device and and

00:05:45,669 --> 00:05:52,180
sets up the networking and and it can

00:05:49,210 --> 00:05:55,960
obviously can also do DHCP and then the

00:05:52,180 --> 00:05:58,960
user connects by SSH again there would

00:05:55,960 --> 00:06:00,789
be some indication maybe you know there

00:05:58,960 --> 00:06:02,819
would be a people maybe change the LED

00:06:00,789 --> 00:06:05,319
to indicate that the Installer is ready

00:06:02,819 --> 00:06:07,360
and then the user basically performs

00:06:05,319 --> 00:06:09,759
just a regular installation it's just

00:06:07,360 --> 00:06:11,069
normal di they don't have to do anything

00:06:09,759 --> 00:06:15,280
differently

00:06:11,069 --> 00:06:18,509
and at the end flash kernel runs to make

00:06:15,280 --> 00:06:21,940
to make the system bootable flash Connor

00:06:18,509 --> 00:06:24,880
is called that way because it used to

00:06:21,940 --> 00:06:27,729
support like the initial device it's

00:06:24,880 --> 00:06:29,489
supportive put it from flash but it also

00:06:27,729 --> 00:06:31,619
generates bootable device

00:06:29,489 --> 00:06:35,849
suitable images on disk for devices that

00:06:31,619 --> 00:06:38,189
need that so it really flash can really

00:06:35,849 --> 00:06:42,119
requires understanding of each device

00:06:38,189 --> 00:06:45,119
and our philosophy in those cases with

00:06:42,119 --> 00:06:48,029
those nest devices was really we don't

00:06:45,119 --> 00:06:50,429
touch anything in in the firmware like

00:06:48,029 --> 00:06:53,039
in the configuration so sometimes we

00:06:50,429 --> 00:06:55,229
have to hack around stuff so instead of

00:06:53,039 --> 00:06:56,609
changing the the root device in in the

00:06:55,229 --> 00:07:00,179
you put config we would actually

00:06:56,609 --> 00:07:03,029
hard-coded in in the RAM disk just

00:07:00,179 --> 00:07:05,279
because we wanted people to go back to

00:07:03,029 --> 00:07:06,419
the original firmware if they had to for

00:07:05,279 --> 00:07:10,439
example if they had to send it in for

00:07:06,419 --> 00:07:13,049
repair something and and and that kind

00:07:10,439 --> 00:07:15,029
of approach really worked well so I

00:07:13,049 --> 00:07:17,549
think we really had a lot of people a

00:07:15,029 --> 00:07:19,619
lot of users running Debian on those

00:07:17,549 --> 00:07:22,829
kind of nest devices and it was really

00:07:19,619 --> 00:07:25,829
easy to do you get a family image you

00:07:22,829 --> 00:07:27,749
connect to the install of SSH and it

00:07:25,829 --> 00:07:30,079
just works it's a normal you know Debian

00:07:27,749 --> 00:07:32,699
installer the way everyone knows that

00:07:30,079 --> 00:07:34,469
because some of the other distros they

00:07:32,699 --> 00:07:36,539
basically provide like apples and

00:07:34,469 --> 00:07:39,119
instructions so you need to petition the

00:07:36,539 --> 00:07:41,399
disk you need to you know I'm Terry it

00:07:39,119 --> 00:07:44,129
you need to change those files and even

00:07:41,399 --> 00:07:46,709
though that sounds simple it's so many

00:07:44,129 --> 00:07:49,559
steps that you always you often get

00:07:46,709 --> 00:07:51,059
something wrong and and then you put the

00:07:49,559 --> 00:07:52,979
drive into the nest device and it

00:07:51,059 --> 00:07:54,479
doesn't boot and you don't know why so

00:07:52,979 --> 00:07:56,519
where where did you make that mistake

00:07:54,479 --> 00:07:58,229
you know which step and you basically

00:07:56,519 --> 00:08:00,299
have to start from scratch so I think

00:07:58,229 --> 00:08:02,729
Debian really provided something unique

00:08:00,299 --> 00:08:05,429
by by adding you know by having that

00:08:02,729 --> 00:08:07,559
Debian installer support but anyway so

00:08:05,429 --> 00:08:10,529
that's the way it sort of used to work

00:08:07,559 --> 00:08:13,589
nowadays with a lot of those bare boards

00:08:10,529 --> 00:08:16,529
it's it's much easier I would get to

00:08:13,589 --> 00:08:19,039
that so at the moment there are three

00:08:16,529 --> 00:08:22,909
different arm ports there is the old

00:08:19,039 --> 00:08:26,309
miele which used to be the the new yeah

00:08:22,909 --> 00:08:27,689
but now it's old and and one of the

00:08:26,309 --> 00:08:29,610
discussions we're probably going to have

00:08:27,689 --> 00:08:31,860
later today in the buff is about you

00:08:29,610 --> 00:08:36,620
know it should we remove that after

00:08:31,860 --> 00:08:39,269
stretch there is a Jeff and the arm 64

00:08:36,620 --> 00:08:42,389
and so that's basically the question I'm

00:08:39,269 --> 00:08:43,140
hoping for answer so if you know device

00:08:42,389 --> 00:08:45,240
a was

00:08:43,140 --> 00:08:50,390
I have a device which is really similar

00:08:45,240 --> 00:08:54,570
but it doesn't work why is that so

00:08:50,390 --> 00:08:57,800
so there have been a lot of changes in

00:08:54,570 --> 00:09:01,200
in various upstream projects especially

00:08:57,800 --> 00:09:05,130
the kernel and you put that really made

00:09:01,200 --> 00:09:09,570
things easier so in the past we

00:09:05,130 --> 00:09:12,420
basically had a kernel image for each

00:09:09,570 --> 00:09:16,590
platform where a platform is basically

00:09:12,420 --> 00:09:19,950
like a SOC family and they would need a

00:09:16,590 --> 00:09:21,930
different image and and because I take

00:09:19,950 --> 00:09:23,730
you know it takes a long time to compile

00:09:21,930 --> 00:09:26,880
there was always some debate about

00:09:23,730 --> 00:09:29,250
adding a new a new platform because

00:09:26,880 --> 00:09:32,550
there would be a new image flavor which

00:09:29,250 --> 00:09:33,930
which takes some time and and it was

00:09:32,550 --> 00:09:36,690
just really like you couldn't you

00:09:33,930 --> 00:09:39,060
couldn't just have one arm kernel which

00:09:36,690 --> 00:09:40,950
which works everywhere and a lot of

00:09:39,060 --> 00:09:42,540
people didn't understand that so why do

00:09:40,950 --> 00:09:45,420
you have those different kernels those

00:09:42,540 --> 00:09:48,030
different platforms but but there has

00:09:45,420 --> 00:09:52,770
been a lot of progress upstream and

00:09:48,030 --> 00:09:56,150
basically nowadays with with HF and with

00:09:52,770 --> 00:10:00,570
arm 64 you really just have one corner

00:09:56,150 --> 00:10:02,550
and and upstream basically so maybe

00:10:00,570 --> 00:10:06,090
maybe some of you remember the the rant

00:10:02,550 --> 00:10:08,220
by Venus about you know the arm people

00:10:06,090 --> 00:10:10,260
doing everything in different ways and

00:10:08,220 --> 00:10:13,200
there has been a lot of standardization

00:10:10,260 --> 00:10:15,420
over the years and basically the other

00:10:13,200 --> 00:10:18,420
thing was so they used to be for each

00:10:15,420 --> 00:10:21,810
device there was a port file it was like

00:10:18,420 --> 00:10:24,750
a C file to initialize the different

00:10:21,810 --> 00:10:27,630
components and the bootloader would food

00:10:24,750 --> 00:10:30,030
would pass a machine ID to the kernel

00:10:27,630 --> 00:10:34,500
and then it would load that boot fire

00:10:30,030 --> 00:10:36,690
and nowadays there is basically a device

00:10:34,500 --> 00:10:40,770
tree in in the kernel which is a

00:10:36,690 --> 00:10:42,900
description of the hardware and an N you

00:10:40,770 --> 00:10:46,440
basically compile at like a binary plop

00:10:42,900 --> 00:10:49,530
the DDP b and so basically you just need

00:10:46,440 --> 00:10:52,520
the kernel image and that DT which is

00:10:49,530 --> 00:10:56,010
Hardware specific and then and any boots

00:10:52,520 --> 00:10:57,000
so and obviously for us in Debian that

00:10:56,010 --> 00:10:59,700
makes it much

00:10:57,000 --> 00:11:03,480
much easier to support you know a lot of

00:10:59,700 --> 00:11:07,560
devices the the other thing that changed

00:11:03,480 --> 00:11:10,290
in you would when when you install the

00:11:07,560 --> 00:11:15,300
Debian kernel image it creates you know

00:11:10,290 --> 00:11:18,750
the the VM Linux file on in input and

00:11:15,300 --> 00:11:20,760
also the RAM disk but with you boot you

00:11:18,750 --> 00:11:23,850
couldn't actually load those files

00:11:20,760 --> 00:11:27,510
directly you basically had to wrap them

00:11:23,850 --> 00:11:29,670
in in a you put image and it's not it's

00:11:27,510 --> 00:11:32,850
not really hard it's just a command you

00:11:29,670 --> 00:11:35,130
need to run but but all of the different

00:11:32,850 --> 00:11:36,450
devices had different load addresses and

00:11:35,130 --> 00:11:38,640
so again that's Hardware specific

00:11:36,450 --> 00:11:42,030
knowledge that that flash kernel needed

00:11:38,640 --> 00:11:44,010
to know and nowadays there is a command

00:11:42,030 --> 00:11:47,400
where which can just directly load the

00:11:44,010 --> 00:11:51,060
corner so then again was a step to make

00:11:47,400 --> 00:11:52,740
things easier and the the last thing

00:11:51,060 --> 00:11:57,000
which would really make things easier is

00:11:52,740 --> 00:12:00,390
distro support in you boot so basically

00:11:57,000 --> 00:12:03,000
in in the past every you put every

00:12:00,390 --> 00:12:07,290
devices in you boot would put in in a

00:12:03,000 --> 00:12:09,480
different way just in terms of you know

00:12:07,290 --> 00:12:12,089
the way I would it load the file from

00:12:09,480 --> 00:12:14,310
what kind of variables it would use and

00:12:12,089 --> 00:12:15,660
nowadays there is something called this

00:12:14,310 --> 00:12:18,950
to support which is basically a

00:12:15,660 --> 00:12:22,740
standardized way to put a Linux distro

00:12:18,950 --> 00:12:25,230
with with you put and there are

00:12:22,740 --> 00:12:29,010
basically two ways either it can it can

00:12:25,230 --> 00:12:31,800
read a config file or it can basically

00:12:29,010 --> 00:12:33,830
run a boot script and and that's what we

00:12:31,800 --> 00:12:37,380
use in in Debian so we basically have a

00:12:33,830 --> 00:12:41,010
generic boot script which no loads

00:12:37,380 --> 00:12:43,920
O'Connor loads the RAM disk TTP and n

00:12:41,010 --> 00:12:46,830
boots Debian and we can use that generic

00:12:43,920 --> 00:12:50,280
boot scriptum almost all of the modern

00:12:46,830 --> 00:12:52,500
devices so nowadays because of that it's

00:12:50,280 --> 00:12:57,780
much more standard and and it's much

00:12:52,500 --> 00:12:59,790
easier to support those devices so here

00:12:57,780 --> 00:13:02,100
are some examples from flash Connor

00:12:59,790 --> 00:13:05,970
so basically flash kernel has like a

00:13:02,100 --> 00:13:08,640
database of devices which it supports so

00:13:05,970 --> 00:13:10,500
it's like the machine entry from broke

00:13:08,640 --> 00:13:12,899
CPU info

00:13:10,500 --> 00:13:17,220
and then the kind of flavors it can run

00:13:12,899 --> 00:13:20,700
and so this one is a is a Olduvai so it

00:13:17,220 --> 00:13:23,130
still uses a pod file and it it needs

00:13:20,700 --> 00:13:26,250
that you put wrapper

00:13:23,130 --> 00:13:29,100
so you're basically setting the the

00:13:26,250 --> 00:13:31,079
machine ID those are the the flash

00:13:29,100 --> 00:13:33,870
petitions where the the kernel and the

00:13:31,079 --> 00:13:38,269
the RAM disk installed and that's that

00:13:33,870 --> 00:13:38,269
load address for the the you put wrapper

00:13:38,600 --> 00:13:48,260
and and now and that's the device which

00:13:43,260 --> 00:13:53,459
used to have a boot file and which then

00:13:48,260 --> 00:13:55,140
migrated to a DDP and so basically so

00:13:53,459 --> 00:13:58,170
there was really really really painful

00:13:55,140 --> 00:13:59,820
for Debian so basically the kernel

00:13:58,170 --> 00:14:02,430
people said oh we're going to move to a

00:13:59,820 --> 00:14:04,230
device tree but don't worry we're not

00:14:02,430 --> 00:14:07,440
going to remove those old bought files

00:14:04,230 --> 00:14:09,390
you can still use them and then a few

00:14:07,440 --> 00:14:12,000
years later they realized you know it's

00:14:09,390 --> 00:14:14,670
really hard to keep both alive and and

00:14:12,000 --> 00:14:16,620
they got rid of the board files and and

00:14:14,670 --> 00:14:20,640
that was really painful for us because

00:14:16,620 --> 00:14:24,060
we had to migrate and so you can see

00:14:20,640 --> 00:14:27,209
here like a kernel version and so from

00:14:24,060 --> 00:14:32,220
that kernel on you needed to use the new

00:14:27,209 --> 00:14:34,920
way and and one of the reasons it was it

00:14:32,220 --> 00:14:38,970
was painful especially on the QNAP

00:14:34,920 --> 00:14:40,949
devices is because we've they actually

00:14:38,970 --> 00:14:43,470
have two different CPUs that there are

00:14:40,949 --> 00:14:46,110
different variants and with the board

00:14:43,470 --> 00:14:49,860
files the same board file worked

00:14:46,110 --> 00:14:51,480
regardless of the CPU but but because of

00:14:49,860 --> 00:14:53,550
the way a device tree works actually

00:14:51,480 --> 00:14:56,550
needed two different device trees

00:14:53,550 --> 00:14:58,560
depending on on the CPU and and so now

00:14:56,550 --> 00:15:00,180
we basically you know something which

00:14:58,560 --> 00:15:01,320
just worked you know it used to work

00:15:00,180 --> 00:15:04,380
fine

00:15:01,320 --> 00:15:06,720
it just had one corner you know with

00:15:04,380 --> 00:15:09,300
that machine ID things would work and

00:15:06,720 --> 00:15:11,790
and suddenly with with the device tree

00:15:09,300 --> 00:15:14,850
we need to figure out where which one do

00:15:11,790 --> 00:15:17,250
you need and so in Kemper fortunately

00:15:14,850 --> 00:15:19,140
did all of that work

00:15:17,250 --> 00:15:21,149
so that's actually a script that runs to

00:15:19,140 --> 00:15:21,760
figure out which which device tree that

00:15:21,149 --> 00:15:28,690
particular

00:15:21,760 --> 00:15:30,400
needs and and and so now so that's

00:15:28,690 --> 00:15:32,890
actually the reason I want to show that

00:15:30,400 --> 00:15:35,790
is how simple things are these days so

00:15:32,890 --> 00:15:39,100
this is a example of a modern platform

00:15:35,790 --> 00:15:40,990
which uses distro support so the the

00:15:39,100 --> 00:15:45,220
only thing you you really need is a

00:15:40,990 --> 00:15:47,560
machine entry with the name and then and

00:15:45,220 --> 00:15:50,200
then like the kernel flavor but that's

00:15:47,560 --> 00:15:54,010
the same for you know there is only one

00:15:50,200 --> 00:15:57,880
kind of flavor and and then the device

00:15:54,010 --> 00:16:00,220
tree ID and again all of that stuff is

00:15:57,880 --> 00:16:04,810
generic so it just uses the generic food

00:16:00,220 --> 00:16:07,150
script in the generic food path so

00:16:04,810 --> 00:16:10,830
basically all of you pretty much need

00:16:07,150 --> 00:16:14,530
for a new device now is like you know

00:16:10,830 --> 00:16:21,400
these two entries so it's really really

00:16:14,530 --> 00:16:24,310
simple so here I just wanted to talk

00:16:21,400 --> 00:16:26,080
about the different arm ports and and so

00:16:24,310 --> 00:16:28,690
for me it was really hard to structure

00:16:26,080 --> 00:16:32,950
this because those changes in in the

00:16:28,690 --> 00:16:36,670
corner and and you put you know happened

00:16:32,950 --> 00:16:39,730
independent of our arm ports but at the

00:16:36,670 --> 00:16:43,690
same time because the arm hf1 is much

00:16:39,730 --> 00:16:48,100
newer it works in a different way so so

00:16:43,690 --> 00:16:51,400
basically with our me air so we still

00:16:48,100 --> 00:16:53,620
have different flavors but we were able

00:16:51,400 --> 00:16:57,970
to combine the orion at the Kirkwood

00:16:53,620 --> 00:17:02,350
into one mobile flavor and we have the

00:16:57,970 --> 00:17:04,329
versatile one and so one of the problems

00:17:02,350 --> 00:17:07,180
we have on our Miele is that a lot of

00:17:04,329 --> 00:17:10,030
those nest devices put from flash and

00:17:07,180 --> 00:17:13,480
they only have some of them only have

00:17:10,030 --> 00:17:15,910
two megabytes for the kernel which used

00:17:13,480 --> 00:17:18,910
to be a lot of space but nowadays it's

00:17:15,910 --> 00:17:21,160
not and so that really puts a lot of

00:17:18,910 --> 00:17:25,480
instruction so we basically disable some

00:17:21,160 --> 00:17:28,000
stuff on our meow but army air I think

00:17:25,480 --> 00:17:29,860
is really really widely used because of

00:17:28,000 --> 00:17:31,840
those nest devices so I think they are

00:17:29,860 --> 00:17:32,580
slowly getting old but there is still a

00:17:31,840 --> 00:17:34,769
lot of

00:17:32,580 --> 00:17:37,669
people who use them like I said it

00:17:34,769 --> 00:17:41,190
requires that you put image and

00:17:37,669 --> 00:17:44,100
originally we used both fires and device

00:17:41,190 --> 00:17:47,039
tree but now most of them have switched

00:17:44,100 --> 00:17:50,010
over to device tree even though some of

00:17:47,039 --> 00:17:52,649
them still use both files and adding a

00:17:50,010 --> 00:17:56,340
new device requires a number of changes

00:17:52,649 --> 00:18:00,350
in the Installer so basically you needed

00:17:56,340 --> 00:18:04,529
to map the device to the the boot image

00:18:00,350 --> 00:18:06,779
and and it was just a couple of things

00:18:04,529 --> 00:18:08,850
so basically adding one device you had

00:18:06,779 --> 00:18:10,710
to change like five different places in

00:18:08,850 --> 00:18:12,600
the Installer and and it was quite

00:18:10,710 --> 00:18:15,510
confusing for people who wanted to edit

00:18:12,600 --> 00:18:18,990
new device devices because there wasn't

00:18:15,510 --> 00:18:21,659
really documented very well and so some

00:18:18,990 --> 00:18:24,450
examples are listed here and people who

00:18:21,659 --> 00:18:27,029
involved in in that port and so Rocha is

00:18:24,450 --> 00:18:28,740
actually someone who is quite new and he

00:18:27,029 --> 00:18:33,389
really gotten involved in supporting

00:18:28,740 --> 00:18:37,320
those devices and so I'm HF is is much

00:18:33,389 --> 00:18:41,580
nicer and so the majority of devices

00:18:37,320 --> 00:18:46,440
support that distro support and the the

00:18:41,580 --> 00:18:50,010
other thing we do is for some of the

00:18:46,440 --> 00:18:54,659
devices we provide SD card images which

00:18:50,010 --> 00:18:58,260
contain you boot and the Debian

00:18:54,659 --> 00:19:00,539
installer so basically vagrant maintains

00:18:58,260 --> 00:19:02,880
you put in in Debian and and a lot of

00:19:00,539 --> 00:19:06,210
those devices are supported in in in you

00:19:02,880 --> 00:19:08,700
put in Debian and and so we just provide

00:19:06,210 --> 00:19:11,700
an ST image so you can just store it to

00:19:08,700 --> 00:19:13,919
the SD card you put it in and because of

00:19:11,700 --> 00:19:17,070
the distro support it just loads step in

00:19:13,919 --> 00:19:20,580
installer you do the installation you

00:19:17,070 --> 00:19:24,600
reboot and things just work so I think

00:19:20,580 --> 00:19:30,510
it really has gone you know come a long

00:19:24,600 --> 00:19:34,500
way yeah and so nowadays adding a new

00:19:30,510 --> 00:19:37,620
device requires much fewer changes then

00:19:34,500 --> 00:19:39,779
and then it used to be because it use

00:19:37,620 --> 00:19:42,570
everything uses the same like one corner

00:19:39,779 --> 00:19:44,430
flavor you don't need to touch all those

00:19:42,570 --> 00:19:47,190
different places and

00:19:44,430 --> 00:19:48,930
and and because of this to support it it

00:19:47,190 --> 00:19:56,670
just works it can you can pretty much

00:19:48,930 --> 00:19:58,920
use the generic boot script so I'm 64 so

00:19:56,670 --> 00:20:00,570
the the problem until recently is that

00:19:58,920 --> 00:20:03,330
there simply wasn't any hardware that

00:20:00,570 --> 00:20:06,750
people could buy and it's changing

00:20:03,330 --> 00:20:08,340
rapidly now even though it's still not

00:20:06,750 --> 00:20:12,560
ideal so you have for example the

00:20:08,340 --> 00:20:16,080
Raspberry Pi free which uses a 64-bit

00:20:12,560 --> 00:20:21,300
CPU but the software a ship is only 32

00:20:16,080 --> 00:20:26,100
bit but most of the work is now upstream

00:20:21,300 --> 00:20:29,970
to to run 64-bit on it and yeah there

00:20:26,100 --> 00:20:33,570
are a lot of a lot of devices with sort

00:20:29,970 --> 00:20:37,770
of work but not quite but anyway so the

00:20:33,570 --> 00:20:40,950
idea for I'm 64 is that a lot of the the

00:20:37,770 --> 00:20:44,580
new hardware especially on the server

00:20:40,950 --> 00:20:48,450
side would use UEFI and so you basically

00:20:44,580 --> 00:20:51,780
just it just works like a PC so you have

00:20:48,450 --> 00:20:53,880
grub you can stall you can run them

00:20:51,780 --> 00:20:56,010
installer from grub and then you get

00:20:53,880 --> 00:20:58,500
grub afterwards and it just boots like a

00:20:56,010 --> 00:21:01,920
PC and and Steve has has done a lot of

00:20:58,500 --> 00:21:05,340
work in that area and in theory it

00:21:01,920 --> 00:21:07,740
should just work out of the box so if if

00:21:05,340 --> 00:21:10,830
it uses you UEFI we don't need to add

00:21:07,740 --> 00:21:15,690
anything it just works there is nothing

00:21:10,830 --> 00:21:19,440
to do at least that's the theory so what

00:21:15,690 --> 00:21:21,150
I found is so I made the disclaim assume

00:21:19,440 --> 00:21:24,600
assuming the kernel

00:21:21,150 --> 00:21:26,940
you know kernel support and stuff and to

00:21:24,600 --> 00:21:29,820
be honest right now that's a big

00:21:26,940 --> 00:21:34,530
assumption so I've been playing with a

00:21:29,820 --> 00:21:38,820
few 64 bits arm ports and and basically

00:21:34,530 --> 00:21:42,000
what I found is there is some support

00:21:38,820 --> 00:21:44,010
upstream so I can put a kernel but oh

00:21:42,000 --> 00:21:46,860
there is no USB support there is no

00:21:44,010 --> 00:21:50,400
Wi-Fi support so I can't actually do any

00:21:46,860 --> 00:21:53,100
anything with it but but I think that's

00:21:50,400 --> 00:21:54,059
just something that's because I'm 64 is

00:21:53,100 --> 00:21:56,519
the rep

00:21:54,059 --> 00:21:59,309
fairly new and there is a lot of work

00:21:56,519 --> 00:22:01,830
going on upstream to support the various

00:21:59,309 --> 00:22:05,700
platforms so I think over time that's

00:22:01,830 --> 00:22:09,899
really gonna be much better but even

00:22:05,700 --> 00:22:12,479
though that UEFI idea is there in

00:22:09,899 --> 00:22:15,929
reality we're going to see different

00:22:12,479 --> 00:22:19,259
solutions on arm 64 so we are going to

00:22:15,929 --> 00:22:22,049
see UEFI in particular on servers but we

00:22:19,259 --> 00:22:26,070
also see you boot so a lot of those bare

00:22:22,049 --> 00:22:28,529
boards they have you put and and so

00:22:26,070 --> 00:22:32,219
right now we can use that distro support

00:22:28,529 --> 00:22:34,679
and and I think it works really well but

00:22:32,219 --> 00:22:36,839
one thing that Sousa has done so they

00:22:34,679 --> 00:22:38,999
basically have the same issue they want

00:22:36,839 --> 00:22:40,200
to support all those devices but they

00:22:38,999 --> 00:22:42,210
just want to use the same mechanism

00:22:40,200 --> 00:22:46,259
everywhere so they've actually

00:22:42,210 --> 00:22:48,509
implemented UEFI on top of you boot so

00:22:46,259 --> 00:22:51,839
you can basically use you boot to load

00:22:48,509 --> 00:22:53,489
grub and and then you have grub

00:22:51,839 --> 00:22:55,979
so I think that's something we need to

00:22:53,489 --> 00:22:59,789
figure out do we want to stay with this

00:22:55,979 --> 00:23:02,609
to support do we want to use UEFI on top

00:22:59,789 --> 00:23:06,589
of you put is that something we want to

00:23:02,609 --> 00:23:10,769
you know give users the option and then

00:23:06,589 --> 00:23:13,889
fastboot is is something used on in the

00:23:10,769 --> 00:23:17,219
Android world and in a lot of those like

00:23:13,889 --> 00:23:20,190
I see a lot of where both airports but

00:23:17,219 --> 00:23:22,469
also game consoles and stuff which which

00:23:20,190 --> 00:23:25,049
are sort of Android oriented but you can

00:23:22,469 --> 00:23:27,330
also run normal Linux and they would use

00:23:25,049 --> 00:23:29,070
like fastboot or something and there are

00:23:27,330 --> 00:23:31,799
like a tons of other boot loaders out

00:23:29,070 --> 00:23:38,070
there but I would definitely say like

00:23:31,799 --> 00:23:40,289
the big ones are UEFI and and you put so

00:23:38,070 --> 00:23:42,869
I gave a similar talk a few weeks ago

00:23:40,289 --> 00:23:46,019
and in seminars so what about non-free

00:23:42,869 --> 00:23:48,450
firmware like can I can I run that stuff

00:23:46,019 --> 00:23:53,309
you know purely with with free software

00:23:48,450 --> 00:23:55,499
and so the thing with arm is there are a

00:23:53,309 --> 00:23:58,859
lot of different platforms so I'm not

00:23:55,499 --> 00:24:01,530
sure about all of them but some of the

00:23:58,859 --> 00:24:04,050
platforms I looked at yeah you

00:24:01,530 --> 00:24:07,800
you do need some there is always

00:24:04,050 --> 00:24:11,160
something proprietary so in a lot of

00:24:07,800 --> 00:24:12,810
cases I see where you have at least a

00:24:11,160 --> 00:24:15,810
proprietary like a first stage

00:24:12,810 --> 00:24:18,090
bootloader so Raspberry Pi is an example

00:24:15,810 --> 00:24:20,790
so I don't actually have a Raspberry Pi

00:24:18,090 --> 00:24:23,910
but the way I understand it is you

00:24:20,790 --> 00:24:27,150
basically put some boot files on an SD

00:24:23,910 --> 00:24:30,900
card and they are proprietary and then

00:24:27,150 --> 00:24:33,660
they load the kernel or in case of when

00:24:30,900 --> 00:24:36,510
we support it in Debian be that first

00:24:33,660 --> 00:24:39,300
stage bootloader would basically be used

00:24:36,510 --> 00:24:41,670
to run you boot and then we can use you

00:24:39,300 --> 00:24:43,760
put and and the you put is you put

00:24:41,670 --> 00:24:46,670
support all of that is is free software

00:24:43,760 --> 00:24:49,650
but that first stage bootloader isn't

00:24:46,670 --> 00:24:51,930
I've heard that there are some people

00:24:49,650 --> 00:24:55,460
working on a free replacement for for

00:24:51,930 --> 00:24:59,070
the Raspberry Pi no with NVIDIA Tegra

00:24:55,460 --> 00:25:02,250
which is something I'm working on at the

00:24:59,070 --> 00:25:04,860
moment you also have a tiny first stage

00:25:02,250 --> 00:25:07,380
bootloader but then again you have you

00:25:04,860 --> 00:25:09,960
boot which is free and in that case you

00:25:07,380 --> 00:25:15,030
also have some firmware images for the

00:25:09,960 --> 00:25:17,550
the GPU and for some other stuff for the

00:25:15,030 --> 00:25:20,070
dragon board so the dragon board sounded

00:25:17,550 --> 00:25:23,940
really interesting because it actually

00:25:20,070 --> 00:25:26,790
has a graphics chip which which can be

00:25:23,940 --> 00:25:29,960
used with free software so that sounded

00:25:26,790 --> 00:25:34,050
pretty cool but again it has a

00:25:29,960 --> 00:25:36,450
proprietary first stage bootloader and

00:25:34,050 --> 00:25:39,000
then there is a second stage bootloader

00:25:36,450 --> 00:25:41,870
which which is actually open source and

00:25:39,000 --> 00:25:45,720
then there is actually you boot as well

00:25:41,870 --> 00:25:48,750
and then you have some binary blobs

00:25:45,720 --> 00:25:51,540
which also need to be stored in flash to

00:25:48,750 --> 00:25:54,180
work properly on the Marvelle side I'm

00:25:51,540 --> 00:25:57,270
not really aware of anything I've never

00:25:54,180 --> 00:25:59,640
needed to flash anything proprietary but

00:25:57,270 --> 00:26:03,530
I'm not sure how you could get started

00:25:59,640 --> 00:26:08,340
on on my mouse maybe there is something

00:26:03,530 --> 00:26:09,840
so the future saw some nice devices like

00:26:08,340 --> 00:26:13,950
I said that's been something that's

00:26:09,840 --> 00:26:15,270
really been popular in Debian especially

00:26:13,950 --> 00:26:18,420
on the QM TV

00:26:15,270 --> 00:26:21,030
so the problem is so QNAP so the devices

00:26:18,420 --> 00:26:24,690
we currently support a pretty old

00:26:21,030 --> 00:26:27,090
nowadays and they have some some newer

00:26:24,690 --> 00:26:30,330
devices but they are not properly

00:26:27,090 --> 00:26:34,380
supported in the upstream corner so I I

00:26:30,330 --> 00:26:37,410
have no plans for Debian on those I

00:26:34,380 --> 00:26:40,980
recently did some work on some seek aid

00:26:37,410 --> 00:26:43,410
nest devices which actually print

00:26:40,980 --> 00:26:47,040
interesting but again they're a little

00:26:43,410 --> 00:26:49,710
bit out of date already an endo is the

00:26:47,040 --> 00:26:52,410
whole 64 bit so I think people are

00:26:49,710 --> 00:26:54,540
really waiting for proper I'm 64 servers

00:26:52,410 --> 00:26:58,110
I think there's going to be a lot of

00:26:54,540 --> 00:27:02,880
work in that area and any all those

00:26:58,110 --> 00:27:09,180
development boards raspberry pi PI in 64

00:27:02,880 --> 00:27:11,370
all window basically all of them sound

00:27:09,180 --> 00:27:13,290
exciting but if you if you look at them

00:27:11,370 --> 00:27:16,130
all of them have have some upstream

00:27:13,290 --> 00:27:18,930
issues so it's it is really quite

00:27:16,130 --> 00:27:21,330
frustrating at the moment but but I

00:27:18,930 --> 00:27:24,780
think things are really moving quite

00:27:21,330 --> 00:27:27,300
rapidly and then there is this 96 board

00:27:24,780 --> 00:27:30,720
initiative which is actually done by

00:27:27,300 --> 00:27:32,580
Lynne ro and insulin ro support supports

00:27:30,720 --> 00:27:34,230
Linux on arm so you would think wow you

00:27:32,580 --> 00:27:37,080
know there are some really nice boards

00:27:34,230 --> 00:27:38,970
coming out and they differentiate

00:27:37,080 --> 00:27:41,040
between the consumer edition and the

00:27:38,970 --> 00:27:43,710
Enterprise Edition and so I I bought

00:27:41,040 --> 00:27:46,320
some consumer edition ports and and it

00:27:43,710 --> 00:27:48,630
it's really horrible so first of all I

00:27:46,320 --> 00:27:51,330
had to spend like half a day just

00:27:48,630 --> 00:27:53,160
getting the components because it uses

00:27:51,330 --> 00:27:57,330
like a non-standard power supply a

00:27:53,160 --> 00:28:00,240
non-standard serial console so finally I

00:27:57,330 --> 00:28:02,250
found all the pieces I needed and then I

00:28:00,240 --> 00:28:04,230
was expecting where it's from the

00:28:02,250 --> 00:28:07,770
Narrows so surely everything just works

00:28:04,230 --> 00:28:10,050
upstream but it doesn't it was like yeah

00:28:07,770 --> 00:28:12,390
I can put the Linux kernel but there is

00:28:10,050 --> 00:28:16,200
no USB there is no you know Wi-Fi no

00:28:12,390 --> 00:28:19,410
nothing so yeah that's a little bit

00:28:16,200 --> 00:28:21,360
frustrating on the Enterprise Edition I

00:28:19,410 --> 00:28:24,960
think that looks more interesting I

00:28:21,360 --> 00:28:28,250
think that's more standardized but but

00:28:24,960 --> 00:28:28,250
again they have been some delays

00:28:30,170 --> 00:28:37,770
yeah okay yeah so so never be

00:28:35,370 --> 00:28:40,940
interesting to see so the the questions

00:28:37,770 --> 00:28:43,950
that I actually have nowadays is is so

00:28:40,940 --> 00:28:46,470
because of those changes because of you

00:28:43,950 --> 00:28:49,260
know having you know a modern you put

00:28:46,470 --> 00:28:51,870
most of those new devices having a you

00:28:49,260 --> 00:28:54,300
put with distro support having a kernel

00:28:51,870 --> 00:28:55,950
which you know one kind image which

00:28:54,300 --> 00:28:59,210
works on all those devices which are

00:28:55,950 --> 00:29:02,880
supported it's really easy to support

00:28:59,210 --> 00:29:05,250
you know a new device as long as it's

00:29:02,880 --> 00:29:06,780
supported by the corner but at the same

00:29:05,250 --> 00:29:09,150
time I think that's a big challenge for

00:29:06,780 --> 00:29:12,390
Debian because so right now if you look

00:29:09,150 --> 00:29:15,000
at our HF we basically say well take

00:29:12,390 --> 00:29:18,990
take the Installer and if there is a

00:29:15,000 --> 00:29:22,560
device tree it's probably gonna work but

00:29:18,990 --> 00:29:24,990
what what does that mean right and and

00:29:22,560 --> 00:29:28,710
on the one hand we have some devices

00:29:24,990 --> 00:29:31,470
which really work which means so we have

00:29:28,710 --> 00:29:35,460
you know vagrant having you put support

00:29:31,470 --> 00:29:37,530
in in Debian we have people testing them

00:29:35,460 --> 00:29:39,780
and installer testing the Debian kernel

00:29:37,530 --> 00:29:42,840
so we have devices which are really work

00:29:39,780 --> 00:29:45,420
well supported and then we have some

00:29:42,840 --> 00:29:47,790
devices on the other hand where well yes

00:29:45,420 --> 00:29:50,700
there is a device tree but no one has

00:29:47,790 --> 00:29:54,570
ever tried it and at the moment we have

00:29:50,700 --> 00:29:57,390
no way for users to differentiate those

00:29:54,570 --> 00:30:00,840
use case like those you know support

00:29:57,390 --> 00:30:04,320
levels so I'm wondering if we need like

00:30:00,840 --> 00:30:06,540
a table somewhere where where and maybe

00:30:04,320 --> 00:30:10,380
some support levels like green yellow

00:30:06,540 --> 00:30:12,630
red like green is yeah we have Debian

00:30:10,380 --> 00:30:15,180
people who have who who testing that

00:30:12,630 --> 00:30:17,430
stuff yellow would be where we have

00:30:15,180 --> 00:30:20,280
heard some reports that it might work

00:30:17,430 --> 00:30:22,260
and green is you know it doesn't work or

00:30:20,280 --> 00:30:25,290
we haven't heard that it works

00:30:22,260 --> 00:30:29,370
maybe we need something like that but

00:30:25,290 --> 00:30:31,590
but right now I see from users you know

00:30:29,370 --> 00:30:34,860
like I want to run Debian on my arm

00:30:31,590 --> 00:30:38,030
device and they don't know if it's gonna

00:30:34,860 --> 00:30:38,030
work yeah Ben

00:30:42,570 --> 00:30:47,200
yeah Ben Ben is saying we also need to

00:30:45,309 --> 00:30:49,059
track what the the earliest and the

00:30:47,200 --> 00:30:51,820
latest kind of worst note that has been

00:30:49,059 --> 00:30:55,210
testing yes I think we really need to

00:30:51,820 --> 00:30:57,490
come up with some criteria to to have

00:30:55,210 --> 00:31:01,000
you know define those kind of support

00:30:57,490 --> 00:31:02,650
levels and indicator and yeah the other

00:31:01,000 --> 00:31:04,990
question is related so with all those

00:31:02,650 --> 00:31:09,250
boards how how do we actually test them

00:31:04,990 --> 00:31:11,559
so III keep and it's really what one of

00:31:09,250 --> 00:31:13,630
the things which is great but also

00:31:11,559 --> 00:31:15,970
annoying with those boards they so cheap

00:31:13,630 --> 00:31:18,700
so it's like oh there's a new board it's

00:31:15,970 --> 00:31:21,490
like 30 bucks oh I just get it it only

00:31:18,700 --> 00:31:23,200
have like those pile of boards and you

00:31:21,490 --> 00:31:25,870
realize but I don't have time to test

00:31:23,200 --> 00:31:27,280
all of that stuff so I think that that's

00:31:25,870 --> 00:31:29,470
gonna be a real challenge like they're

00:31:27,280 --> 00:31:31,559
they're like hundred I mean it's really

00:31:29,470 --> 00:31:36,040
hundreds of boats come coming out and

00:31:31,559 --> 00:31:37,419
how do we support all of that so I think

00:31:36,040 --> 00:31:39,820
that's the the question I wanted to

00:31:37,419 --> 00:31:42,220
raise and maybe that's something we can

00:31:39,820 --> 00:31:46,860
talk about it in the both but yeah I'm

00:31:42,220 --> 00:31:46,860
obviously open for questions now

00:31:55,260 --> 00:32:02,850
Hey hello yeah so I don't quote me

00:31:59,250 --> 00:32:04,950
exactly so I believe so reddit has this

00:32:02,850 --> 00:32:06,210
problem as well obviously and I mean

00:32:04,950 --> 00:32:09,360
they're obviously more interested in the

00:32:06,210 --> 00:32:10,890
arm 64 only server stuff but I believe

00:32:09,360 --> 00:32:12,929
the way they're going about it maybe

00:32:10,890 --> 00:32:15,179
it's something could collaborate on is

00:32:12,929 --> 00:32:17,250
they're trying to make sure and push all

00:32:15,179 --> 00:32:20,400
the vendors to be standardized because

00:32:17,250 --> 00:32:21,929
as as you pointed out so elegantly it's

00:32:20,400 --> 00:32:24,299
just not it's crazy with all the

00:32:21,929 --> 00:32:26,360
different device tree differences and so

00:32:24,299 --> 00:32:29,309
on so I believe their strategy is to

00:32:26,360 --> 00:32:31,350
work with the vendors and require

00:32:29,309 --> 00:32:34,230
everything to be upstream and no device

00:32:31,350 --> 00:32:36,450
tree specifically to push everything to

00:32:34,230 --> 00:32:39,630
just boot with one kernel and so on

00:32:36,450 --> 00:32:41,549
maybe that could be you know we

00:32:39,630 --> 00:32:43,470
sacrifice a few of these shitty boards

00:32:41,549 --> 00:32:46,470
but work with the vendors that make the

00:32:43,470 --> 00:32:48,720
ones that are our upstream well so I

00:32:46,470 --> 00:32:51,450
might be mistaken but as far as I know

00:32:48,720 --> 00:32:55,169
red head basically says we only support

00:32:51,450 --> 00:32:55,860
UEFI and and ACPI and and that's fair

00:32:55,169 --> 00:32:57,480
enough

00:32:55,860 --> 00:32:59,100
and I think that works for them because

00:32:57,480 --> 00:33:01,530
that's like the server world which they

00:32:59,100 --> 00:33:03,450
care about but I think in in case of

00:33:01,530 --> 00:33:07,080
Debian there is so many boards out there

00:33:03,450 --> 00:33:09,419
which don't meet those backs and we sort

00:33:07,080 --> 00:33:11,790
of live in like the real world so I

00:33:09,419 --> 00:33:14,100
don't think we can well I mean it's

00:33:11,790 --> 00:33:16,350
different it's I mean if redhead wants

00:33:14,100 --> 00:33:17,730
to target you know the server people

00:33:16,350 --> 00:33:19,980
like the people who actually have money

00:33:17,730 --> 00:33:22,080
I mean that's very enough that makes

00:33:19,980 --> 00:33:25,080
sense for them but Debian be run

00:33:22,080 --> 00:33:29,700
everywhere so I think we need to support

00:33:25,080 --> 00:33:33,179
all those weird cases as well and maybe

00:33:29,700 --> 00:33:35,340
if it gets too weird of if I mean III

00:33:33,179 --> 00:33:37,860
put in some work on the dragon port and

00:33:35,340 --> 00:33:40,590
then I realized why am I actually

00:33:37,860 --> 00:33:43,350
spending that time because no one like

00:33:40,590 --> 00:33:45,270
I've heard from no one that they have

00:33:43,350 --> 00:33:47,610
that board I mean like a lot of people

00:33:45,270 --> 00:33:49,410
have the Raspberry Pi but I've heard and

00:33:47,610 --> 00:33:50,130
like pretty much no one has the the

00:33:49,410 --> 00:33:52,980
dragon board

00:33:50,130 --> 00:33:55,440
so maybe I'm you know it's not worth why

00:33:52,980 --> 00:33:57,540
my why I'm but if if there is a ball a

00:33:55,440 --> 00:33:59,730
board where people you know want to use

00:33:57,540 --> 00:34:01,830
it I think we should support it in

00:33:59,730 --> 00:34:04,320
Debian and we do have the infrastructure

00:34:01,830 --> 00:34:07,530
so we you know it doesn't have to be

00:34:04,320 --> 00:34:07,830
UEFI and ACPI we can support other

00:34:07,530 --> 00:34:11,339
device

00:34:07,830 --> 00:34:13,139
because we've done it before but but but

00:34:11,339 --> 00:34:15,149
I definitely agree with like the point

00:34:13,139 --> 00:34:20,849
about getting more standardization and

00:34:15,149 --> 00:34:23,129
that stuff so I agree yeah and the whole

00:34:20,849 --> 00:34:24,690
I mean the whole digital support in in

00:34:23,129 --> 00:34:34,080
you boot that has really made things

00:34:24,690 --> 00:34:35,369
easier France I might be going to see

00:34:34,080 --> 00:34:41,270
some of the same thing steep walls

00:34:35,369 --> 00:34:43,919
anyway so yeah on the IP versus DT thing

00:34:41,270 --> 00:34:48,000
it's more a question of quality of

00:34:43,919 --> 00:34:50,490
implementation of the of the of the

00:34:48,000 --> 00:34:54,179
firmware and the upstream support than

00:34:50,490 --> 00:35:00,650
it is DT isn't fundamentally worse for

00:34:54,179 --> 00:35:03,300
upstream support the IP is RedHat are

00:35:00,650 --> 00:35:05,550
have have some reasons for this of

00:35:03,300 --> 00:35:07,950
varying degrees of sensibility but

00:35:05,550 --> 00:35:09,810
they're it's not fundamentally about me

00:35:07,950 --> 00:35:11,460
it doesn't fundamentally stop it people

00:35:09,810 --> 00:35:15,180
supporting it especially in the

00:35:11,460 --> 00:35:18,960
community district Debian I was also

00:35:15,180 --> 00:35:23,880
gonna ask Martin if you talk to people

00:35:18,960 --> 00:35:26,760
like Colonel CI about the testing and

00:35:23,880 --> 00:35:28,650
coverage stuff yeah not really but but I

00:35:26,760 --> 00:35:29,960
think I think there are some some things

00:35:28,650 --> 00:35:32,580
we should look into it

00:35:29,960 --> 00:35:35,300
yeah because obviously the whole making

00:35:32,580 --> 00:35:39,810
sure the kernel boots on random hardware

00:35:35,300 --> 00:35:40,770
stuff is exactly what that's doing and

00:35:39,810 --> 00:35:43,380
there's at least

00:35:40,770 --> 00:35:49,550
infrastructure there that might be nice

00:35:43,380 --> 00:35:49,550
to play with yeah that's a good idea

00:35:49,670 --> 00:35:57,109
so on the whole 96 boards thing sorry

00:35:54,380 --> 00:36:00,440
most of the engineers involved are

00:35:57,109 --> 00:36:03,869
totally aware of how awful it really is

00:36:00,440 --> 00:36:06,240
we tried to tell management they would

00:36:03,869 --> 00:36:10,020
they they don't want to listen

00:36:06,240 --> 00:36:12,599
yeah so there's been a huge amount of

00:36:10,020 --> 00:36:14,520
pushback saying oh you know we'll oh no

00:36:12,599 --> 00:36:20,730
oh we should be do making sure this is

00:36:14,520 --> 00:36:22,770
all upstream no I it's just

00:36:20,730 --> 00:36:25,079
it says llanera has a has a really good

00:36:22,770 --> 00:36:27,510
brand so people expect you know when I

00:36:25,079 --> 00:36:29,339
saw all 90s exposed it's the dinero

00:36:27,510 --> 00:36:32,160
so obviously that stuff is gonna work

00:36:29,339 --> 00:36:34,230
and and that's why I was really what one

00:36:32,160 --> 00:36:37,710
one positive thing there is that the

00:36:34,230 --> 00:36:39,570
first EE board the sock does basically

00:36:37,710 --> 00:36:41,760
work upstream already with current

00:36:39,570 --> 00:36:43,290
anchor it's not like there are some

00:36:41,760 --> 00:36:45,900
patches still need to go in an apartment

00:36:43,290 --> 00:36:49,290
PCI it should basically work so

00:36:45,900 --> 00:36:53,540
hopefully hopefully that's going to be a

00:36:49,290 --> 00:36:55,920
much less spectacular story than the

00:36:53,540 --> 00:37:02,970
consumer radiation boards have because

00:36:55,920 --> 00:37:05,640
they're unfortunate yeah yeah the first

00:37:02,970 --> 00:37:08,460
EE board the cello board is due to start

00:37:05,640 --> 00:37:10,680
shipping really soon now there are

00:37:08,460 --> 00:37:13,440
examples already out work with engineers

00:37:10,680 --> 00:37:14,670
for validation literally we're talking

00:37:13,440 --> 00:37:16,140
the next couple of weeks is what I'm

00:37:14,670 --> 00:37:18,180
told

00:37:16,140 --> 00:37:20,250
that's the first ninety-six board I

00:37:18,180 --> 00:37:29,460
would actually spend any time on at all

00:37:20,250 --> 00:37:31,650
personal the C boards or a joke I forgot

00:37:29,460 --> 00:37:34,589
what else I was going to say oh yes and

00:37:31,650 --> 00:37:35,880
then I guess we'll go we'll be going

00:37:34,589 --> 00:37:39,960
through quite a lot of this again in the

00:37:35,880 --> 00:37:45,690
arm off later on and in terms of which

00:37:39,960 --> 00:37:48,740
things we support yeah look how we on

00:37:45,690 --> 00:37:48,740
the discussion yeah

00:37:54,339 --> 00:38:02,109
um it's the sparking so uh we've gotten

00:38:00,309 --> 00:38:05,140
all this great support for disrobe you

00:38:02,109 --> 00:38:08,559
and you boot and now they're starting to

00:38:05,140 --> 00:38:11,880
get to UEFI emulation and new boots so

00:38:08,559 --> 00:38:14,920
even for boards that don't have you

00:38:11,880 --> 00:38:16,869
support if they support you boot might

00:38:14,920 --> 00:38:23,739
work although that means all the

00:38:16,869 --> 00:38:25,539
standardization we've worked towards yes

00:38:23,739 --> 00:38:28,299
so I think that's something we need to

00:38:25,539 --> 00:38:30,400
figure out which one do we want to

00:38:28,299 --> 00:38:35,469
standardize on or is that something we

00:38:30,400 --> 00:38:39,489
want to leave up to the user but yeah I

00:38:35,469 --> 00:38:41,349
mean I think one I mean I guess it was

00:38:39,489 --> 00:38:45,459
sort of confusing cuz there aren't like

00:38:41,349 --> 00:38:47,439
those different ways but but but what I

00:38:45,459 --> 00:38:50,619
really wanted to show is that things are

00:38:47,439 --> 00:38:53,650
getting much more standardized and much

00:38:50,619 --> 00:38:57,099
better so it needs to be really pretty

00:38:53,650 --> 00:39:01,179
horrible and nowadays you know if if a

00:38:57,099 --> 00:39:03,670
platform uses a modern you would if if

00:39:01,179 --> 00:39:05,769
it has upstream support then it's it's

00:39:03,670 --> 00:39:08,380
actually pretty trivial to a Debian

00:39:05,769 --> 00:39:11,650
support and and I think that wasn't the

00:39:08,380 --> 00:39:14,130
case in in the past I think Ben had

00:39:11,650 --> 00:39:14,130
another one

00:39:21,210 --> 00:39:36,010
so I'm interested to know how much how

00:39:33,970 --> 00:39:40,510
much interest there is among our porters

00:39:36,010 --> 00:39:43,839
in graphics support GPU support rather

00:39:40,510 --> 00:39:46,359
than selling to a dumb frame buffers and

00:39:43,839 --> 00:39:48,130
how many how many of these bores because

00:39:46,359 --> 00:39:51,670
quite a lot of them it's both doing HDMI

00:39:48,130 --> 00:39:55,630
ports and I don't know to what degree

00:39:51,670 --> 00:40:02,290
they're actually supported I the current

00:39:55,630 --> 00:40:07,060
project at work which is using the GPU

00:40:02,290 --> 00:40:09,910
our map system and they what's in Debian

00:40:07,060 --> 00:40:12,760
it's a basic system the dip at the

00:40:09,910 --> 00:40:17,260
Debian what's in Debian does not did not

00:40:12,760 --> 00:40:19,750
spell g4u well so I can't speak for

00:40:17,260 --> 00:40:22,240
every one time I've personally done some

00:40:19,750 --> 00:40:24,940
work on the the tech Tegra recently and

00:40:22,240 --> 00:40:28,180
and Nvidia is actually working upstream

00:40:24,940 --> 00:40:30,010
on new votes before so I'm really

00:40:28,180 --> 00:40:32,319
interested in in it

00:40:30,010 --> 00:40:36,579
but I think a lot of the boards use

00:40:32,319 --> 00:40:42,369
those money GPUs and I'm not sure what

00:40:36,579 --> 00:40:44,579
they maybe you can give can we get a

00:40:42,369 --> 00:40:44,579
microphone

00:40:51,140 --> 00:40:56,250
so on the Mali front there has been a

00:40:54,240 --> 00:40:58,920
lot of history of on being scared of

00:40:56,250 --> 00:41:03,900
releasing any of this in any way shape

00:40:58,920 --> 00:41:06,030
or form without huge elas and all that

00:41:03,900 --> 00:41:10,080
kind of stuff so it's not been

00:41:06,030 --> 00:41:13,110
redistributable even at all we're a long

00:41:10,080 --> 00:41:15,630
way from it being releasable free there

00:41:13,110 --> 00:41:17,310
though are packages coming that will

00:41:15,630 --> 00:41:18,870
should we go should be shippable in non

00:41:17,310 --> 00:41:23,060
free at least if you want to get full

00:41:18,870 --> 00:41:25,350
acceleration on your Marley stuff

00:41:23,060 --> 00:41:27,450
hopefully that will solve some of the

00:41:25,350 --> 00:41:29,370
problems there is a lot there were a lot

00:41:27,450 --> 00:41:31,410
of people inside arm who are very very

00:41:29,370 --> 00:41:35,430
keen to support it properly free and

00:41:31,410 --> 00:41:37,830
upstream it's a long fight it'll take a

00:41:35,430 --> 00:41:39,750
while I mean most of the driver that

00:41:37,830 --> 00:41:42,450
Molly driver developers themselves I've

00:41:39,750 --> 00:41:45,240
spoken to would love to make it free it

00:41:42,450 --> 00:41:47,570
just comes down to legal people being

00:41:45,240 --> 00:41:47,570
scared

00:41:58,220 --> 00:42:03,900
yeah thanks for coming so and there is

00:42:00,600 --> 00:42:05,520
going to be the ample later today and

00:42:03,900 --> 00:42:09,330
vagrant is also going to talk about his

00:42:05,520 --> 00:42:13,820
experience about running a build network

00:42:09,330 --> 00:42:19,519
on our major bones thanks

00:42:13,820 --> 00:42:19,519

YouTube URL: https://www.youtube.com/watch?v=YVhryzm107w


