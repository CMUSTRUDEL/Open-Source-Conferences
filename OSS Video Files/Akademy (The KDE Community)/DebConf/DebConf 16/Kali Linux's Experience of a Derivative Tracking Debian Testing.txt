Title: Kali Linux's Experience of a Derivative Tracking Debian Testing
Publication date: 2017-12-05
Playlist: DebConf 16
Description: 
	by RaphaÃ«l Hertzog

At: Debconf 16 video RSS feed
https://debconf16.debconf.org/
Room: Menzies 10
Scheduled start: 2016-07-05 15:00:00
Captions: 
	00:00:00,560 --> 00:00:03,760
okay next up we have rafael hatzel who

00:00:03,040 --> 00:00:05,440
will be

00:00:03,760 --> 00:00:07,359
speaking about kali linux and their

00:00:05,440 --> 00:00:09,599
experience in uh

00:00:07,359 --> 00:00:10,639
in tracking the testing distribution

00:00:09,599 --> 00:00:15,120
welcome

00:00:10,639 --> 00:00:18,560
thank you so hello everybody

00:00:15,120 --> 00:00:21,199
time for the introduction as i said

00:00:18,560 --> 00:00:23,920
before i'm going to

00:00:21,199 --> 00:00:26,640
present kali linux today to you so

00:00:23,920 --> 00:00:29,439
[Music]

00:00:26,640 --> 00:00:30,240
we'll cover first part about the well

00:00:29,439 --> 00:00:31,840
what it is

00:00:30,240 --> 00:00:33,680
because many of you already don't know

00:00:31,840 --> 00:00:36,800
about it and then

00:00:33,680 --> 00:00:39,680
what we use and how and the choice we

00:00:36,800 --> 00:00:43,600
made to set up our infrastructure

00:00:39,680 --> 00:00:47,039
and well the workflow we use to

00:00:43,600 --> 00:00:47,840
do our packaging work the tools we have

00:00:47,039 --> 00:00:50,640
set up

00:00:47,840 --> 00:00:51,440
for quality assurance and the last part

00:00:50,640 --> 00:00:54,719
will be

00:00:51,440 --> 00:00:56,640
more dedicated to the problems we have

00:00:54,719 --> 00:00:58,719
because we have chosen to be based on

00:00:56,640 --> 00:01:01,199
deviant testing so we have

00:00:58,719 --> 00:01:02,480
issues and some work arounds and also

00:01:01,199 --> 00:01:05,040
some wishes

00:01:02,480 --> 00:01:08,080
or of improvements that we would like to

00:01:05,040 --> 00:01:08,080
see on the debian side

00:01:11,280 --> 00:01:14,479
so kali linux is an even derivative that

00:01:14,080 --> 00:01:19,360
has

00:01:14,479 --> 00:01:21,840
been created in 2013.

00:01:19,360 --> 00:01:22,960
it's focused on penetration testing and

00:01:21,840 --> 00:01:26,240
contains lots of

00:01:22,960 --> 00:01:26,880
security tools forensic tools so it's

00:01:26,240 --> 00:01:30,640
used by

00:01:26,880 --> 00:01:34,159
security experts doing audits

00:01:30,640 --> 00:01:37,520
by uh script kiddies also but that's

00:01:34,159 --> 00:01:40,320
another problem it's really the

00:01:37,520 --> 00:01:44,000
successor of backtrack many of

00:01:40,320 --> 00:01:46,560
you know about backtrack but really uh

00:01:44,000 --> 00:01:47,759
it's the same people doing both

00:01:46,560 --> 00:01:51,360
backtrack was

00:01:47,759 --> 00:01:53,360
the first try it was somewhat hackish

00:01:51,360 --> 00:01:54,880
not really made cleanly with packages

00:01:53,360 --> 00:01:58,079
and kali is a

00:01:54,880 --> 00:01:59,439
rebirth of backtrack based on deviant

00:01:58,079 --> 00:02:01,520
with

00:01:59,439 --> 00:02:04,320
debian packages not all of them clean

00:02:01,520 --> 00:02:04,320
but at least

00:02:04,399 --> 00:02:10,080
clearly separated so the company

00:02:08,080 --> 00:02:11,680
behind the kali linux is offensive

00:02:10,080 --> 00:02:15,599
security

00:02:11,680 --> 00:02:18,879
uh she is the company is doing uh

00:02:15,599 --> 00:02:22,080
penetration tests and security trainings

00:02:18,879 --> 00:02:25,200
uh so kalinas is really

00:02:22,080 --> 00:02:26,800
their toolbox for their security audit

00:02:25,200 --> 00:02:28,959
and the penetration testing but at the

00:02:26,800 --> 00:02:30,640
same time it's also a

00:02:28,959 --> 00:02:32,160
marketing product because while they

00:02:30,640 --> 00:02:35,040
give it freely

00:02:32,160 --> 00:02:36,160
to user on the internet so they are

00:02:35,040 --> 00:02:37,840
known for this and

00:02:36,160 --> 00:02:40,319
it brings them customers for their

00:02:37,840 --> 00:02:40,319
trainings

00:02:43,200 --> 00:02:50,720
kalinix is rather popular we

00:02:47,120 --> 00:02:53,840
have more than 100

00:02:50,720 --> 00:02:58,640
000 downloads for each release for the

00:02:53,840 --> 00:03:02,319
either image we have many mirrors on the

00:02:58,640 --> 00:03:03,200
everywhere in the world the forums and

00:03:02,319 --> 00:03:04,959
the ic

00:03:03,200 --> 00:03:07,599
that are very active so there's a large

00:03:04,959 --> 00:03:07,599
user base

00:03:08,800 --> 00:03:13,200
and it's also uh well since it's well

00:03:11,599 --> 00:03:13,920
known in the security field there are

00:03:13,200 --> 00:03:16,080
many

00:03:13,920 --> 00:03:17,040
upstream authors security software are

00:03:16,080 --> 00:03:20,239
using it as a

00:03:17,040 --> 00:03:23,519
reference platform so this is rather

00:03:20,239 --> 00:03:23,840
useful for us because since they develop

00:03:23,519 --> 00:03:27,120
on

00:03:23,840 --> 00:03:31,519
kali it tends to work on kali

00:03:27,120 --> 00:03:34,560
and we have less problem to integrate it

00:03:31,519 --> 00:03:37,680
it doesn't mean that they do clean stuff

00:03:34,560 --> 00:03:41,040
but at least it works and we can

00:03:37,680 --> 00:03:41,840
help them to towards something cleaner

00:03:41,040 --> 00:03:44,480
in terms of

00:03:41,840 --> 00:03:44,480
packaging

00:03:45,360 --> 00:03:51,680
so what i like about this is that

00:03:48,959 --> 00:03:54,000
it means we have a very large user base

00:03:51,680 --> 00:03:56,480
of dividend testing user because

00:03:54,000 --> 00:03:59,519
kali is really demanding testing so if

00:03:56,480 --> 00:04:03,360
on the deviant side we we tend to

00:03:59,519 --> 00:04:07,040
tell even testing is for advanced user

00:04:03,360 --> 00:04:07,840
user or at ease on the kali side we do

00:04:07,040 --> 00:04:10,959
not give

00:04:07,840 --> 00:04:10,959
any such message so

00:04:11,760 --> 00:04:18,880
we have some support issue but

00:04:15,120 --> 00:04:23,759
it means it's also realistic to

00:04:18,880 --> 00:04:23,759
to give legion testing to end users

00:04:26,000 --> 00:04:29,919
so my role in kali linux so i'm a demand

00:04:29,040 --> 00:04:32,320
developer for a

00:04:29,919 --> 00:04:33,960
very long time and i'm working as a

00:04:32,320 --> 00:04:37,759
consultant since

00:04:33,960 --> 00:04:39,280
2004 in my own company called friction

00:04:37,759 --> 00:04:42,400
and i've been working with offensive

00:04:39,280 --> 00:04:44,479
security since the start of kali linux

00:04:42,400 --> 00:04:45,520
they found me through the debian

00:04:44,479 --> 00:04:48,800
consultant list

00:04:45,520 --> 00:04:51,759
and we discussed and

00:04:48,800 --> 00:04:52,400
i worked for a full year before kayanix

00:04:51,759 --> 00:04:55,040
had been

00:04:52,400 --> 00:04:55,600
announced publicly and since then i've

00:04:55,040 --> 00:04:58,000
done

00:04:55,600 --> 00:04:58,720
lots of stuff for well at the start

00:04:58,000 --> 00:05:00,160
mainly

00:04:58,720 --> 00:05:03,520
creating the infrastructure for the

00:05:00,160 --> 00:05:06,240
packaging and packaging lots of software

00:05:03,520 --> 00:05:08,720
at the same time we there are so many

00:05:06,240 --> 00:05:10,880
software through about 300 of them that

00:05:08,720 --> 00:05:12,240
i trained a few other person from the

00:05:10,880 --> 00:05:14,400
company to

00:05:12,240 --> 00:05:15,440
so that they could help us in the

00:05:14,400 --> 00:05:17,600
process

00:05:15,440 --> 00:05:18,720
and nowadays most of the work is on the

00:05:17,600 --> 00:05:21,919
last part

00:05:18,720 --> 00:05:24,639
monitoring well

00:05:21,919 --> 00:05:25,840
the health of the distribution because

00:05:24,639 --> 00:05:27,759
as we

00:05:25,840 --> 00:05:28,960
discussed later we have checks to ensure

00:05:27,759 --> 00:05:31,680
that it works

00:05:28,960 --> 00:05:34,080
and since uh every day we have new

00:05:31,680 --> 00:05:36,840
packages from testing

00:05:34,080 --> 00:05:39,840
we have regular regressions and stuff to

00:05:36,840 --> 00:05:39,840
fix

00:05:41,919 --> 00:05:48,320
so what do we use for infrastructure

00:05:44,960 --> 00:05:51,120
hardware-wise it's a lots of lots of

00:05:48,320 --> 00:05:52,320
many random servers on virtual machines

00:05:51,120 --> 00:05:55,840
on the internet

00:05:52,320 --> 00:05:58,400
over several places

00:05:55,840 --> 00:06:00,560
we have one machine where we host our

00:05:58,400 --> 00:06:01,360
repository it's an internal machine not

00:06:00,560 --> 00:06:04,560
really

00:06:01,360 --> 00:06:05,600
published and we have a sort of public

00:06:04,560 --> 00:06:09,360
mirror of it

00:06:05,600 --> 00:06:11,759
which is achieved.kali.org which is a

00:06:09,360 --> 00:06:14,240
reference machine which is used by all

00:06:11,759 --> 00:06:14,240
mirrors

00:06:14,720 --> 00:06:21,759
we have mirror redirectors based on

00:06:18,000 --> 00:06:25,400
mirror brain so when you install kali

00:06:21,759 --> 00:06:27,759
your list file points to

00:06:25,400 --> 00:06:31,520
http.kali.org and from there you are

00:06:27,759 --> 00:06:31,520
redirected to a mirror close to you

00:06:32,160 --> 00:06:37,280
we have mirrors that we manage ourselves

00:06:35,440 --> 00:06:38,960
and we have also mirrors that are

00:06:37,280 --> 00:06:43,520
contributed by

00:06:38,960 --> 00:06:43,520
universities and companies and stuff

00:06:44,560 --> 00:06:53,039
we have four build servers one

00:06:49,599 --> 00:06:54,880
one for each armor one for each arm

00:06:53,039 --> 00:07:02,960
architectures and also one

00:06:54,880 --> 00:07:04,960
which does both md64 and e36

00:07:02,960 --> 00:07:06,479
we have one server mostly dedicated to

00:07:04,960 --> 00:07:09,599
quality restaurants

00:07:06,479 --> 00:07:11,120
and one where we run configuration

00:07:09,599 --> 00:07:13,440
management

00:07:11,120 --> 00:07:13,440
stuff

00:07:14,319 --> 00:07:18,080
and i'll start by the management server

00:07:16,319 --> 00:07:20,160
because

00:07:18,080 --> 00:07:21,120
most of our services are have been

00:07:20,160 --> 00:07:23,599
integrated

00:07:21,120 --> 00:07:23,599
with that

00:07:27,440 --> 00:07:32,479
so we use saltstack as management

00:07:30,240 --> 00:07:36,080
configuration management tool

00:07:32,479 --> 00:07:39,500
so that we can easily redeploy service

00:07:36,080 --> 00:07:41,680
on new servers in case of need

00:07:39,500 --> 00:07:45,680
[Music]

00:07:41,680 --> 00:07:47,440
and we use some

00:07:45,680 --> 00:07:49,919
self stuck event features which

00:07:47,440 --> 00:07:53,120
basically allows you to

00:07:49,919 --> 00:07:55,360
inform one of something that happened on

00:07:53,120 --> 00:07:58,479
another host

00:07:55,360 --> 00:08:01,120
to coordinate operation for example

00:07:58,479 --> 00:08:02,720
every day we build the either image

00:08:01,120 --> 00:08:06,319
daily is the image on

00:08:02,720 --> 00:08:08,400
our machines and when it's finished it

00:08:06,319 --> 00:08:10,400
informs the central repository which

00:08:08,400 --> 00:08:13,520
downloads the iso image to make it

00:08:10,400 --> 00:08:13,520
available to users

00:08:14,479 --> 00:08:20,879
we created some salt formula so it's uh

00:08:18,639 --> 00:08:21,919
basically it sort of recycles already to

00:08:20,879 --> 00:08:26,319
use for

00:08:21,919 --> 00:08:29,199
full services and we created a

00:08:26,319 --> 00:08:29,919
three of them we but that's actually we

00:08:29,199 --> 00:08:32,640
use only

00:08:29,919 --> 00:08:35,120
mainly the s build one but it's a

00:08:32,640 --> 00:08:38,159
layered solution so double strap

00:08:35,120 --> 00:08:39,760
is a way to just run the bootstrap uh on

00:08:38,159 --> 00:08:42,159
a given

00:08:39,760 --> 00:08:43,839
distribution you just have to give the

00:08:42,159 --> 00:08:47,440
distribution name and uh

00:08:43,839 --> 00:08:49,760
it will uh

00:08:47,440 --> 00:08:50,720
the the formula has all the information

00:08:49,760 --> 00:08:52,720
of where

00:08:50,720 --> 00:08:55,360
what what is the main mirror that you

00:08:52,720 --> 00:08:57,040
should use were

00:08:55,360 --> 00:09:00,080
what components are available in the

00:08:57,040 --> 00:09:00,080
distribution so one

00:09:00,160 --> 00:09:04,800
i should build on top of the bootstrap

00:09:02,160 --> 00:09:08,240
to add as root integration and add build

00:09:04,800 --> 00:09:11,360
builds on top of astrud to

00:09:08,240 --> 00:09:12,080
it builds uh a short i should shoot if

00:09:11,360 --> 00:09:14,640
you want but

00:09:12,080 --> 00:09:16,560
with the name expected by spilled and

00:09:14,640 --> 00:09:20,000
with appropriate sim links

00:09:16,560 --> 00:09:23,839
really so we use that to set up or

00:09:20,000 --> 00:09:23,839
build the demons obviously

00:09:24,240 --> 00:09:29,040
well then we contributed fixed to other

00:09:26,000 --> 00:09:29,040
formulas that we use

00:09:32,160 --> 00:09:35,680
so the package repository is managed by

00:09:35,279 --> 00:09:41,120
a

00:09:35,680 --> 00:09:43,200
repro pro it accepts implodes by ssh

00:09:41,120 --> 00:09:45,519
we have you plot source plots from

00:09:43,200 --> 00:09:46,800
developed obviously but it's also binary

00:09:45,519 --> 00:09:52,080
platform builders

00:09:46,800 --> 00:09:52,080
this is rather than usual

00:09:52,480 --> 00:09:58,880
uh it's also this machine which

00:09:56,560 --> 00:10:00,080
includes build jobs on build demons

00:09:58,880 --> 00:10:02,959
through ssh

00:10:00,080 --> 00:10:02,959
this is a rather

00:10:03,680 --> 00:10:09,360
easy solution but i'll come on

00:10:07,120 --> 00:10:10,959
back on this later when i speak of bill

00:10:09,360 --> 00:10:14,800
devons because

00:10:10,959 --> 00:10:17,760
we're using uh rebuildi

00:10:14,800 --> 00:10:19,040
which is uh basically there's no central

00:10:17,760 --> 00:10:21,600
service uh

00:10:19,040 --> 00:10:22,240
listing which build needs to happen so

00:10:21,600 --> 00:10:24,800
we

00:10:22,240 --> 00:10:26,880
directly send build operation to each

00:10:24,800 --> 00:10:28,480
build demand

00:10:26,880 --> 00:10:31,120
and we have a single builder per

00:10:28,480 --> 00:10:31,120
architecture

00:10:31,360 --> 00:10:34,560
the server also centralizes i2 image

00:10:33,760 --> 00:10:37,120
that we build

00:10:34,560 --> 00:10:38,880
and it imports package from debian runs

00:10:37,120 --> 00:10:42,640
britney

00:10:38,880 --> 00:10:44,839
to create a consistent distribution

00:10:42,640 --> 00:10:47,040
out of what we get from debian and from

00:10:44,839 --> 00:10:50,399
kali and pushes

00:10:47,040 --> 00:10:50,399
the public archive

00:10:50,640 --> 00:10:55,200
so the public archive is just engines to

00:10:54,240 --> 00:11:00,160
survive over

00:10:55,200 --> 00:11:01,680
http and earthank i think to

00:11:00,160 --> 00:11:04,160
make the file available to other

00:11:01,680 --> 00:11:07,600
downstream mirrors

00:11:04,160 --> 00:11:11,120
the we use the

00:11:07,600 --> 00:11:13,279
ftp sync or arch sync script

00:11:11,120 --> 00:11:16,160
that delion is using with its own smear

00:11:13,279 --> 00:11:16,160
its own mirror

00:11:16,320 --> 00:11:21,920
so it's based on ssh triggers and

00:11:19,680 --> 00:11:23,279
notifies don't stream mirrors when they

00:11:21,920 --> 00:11:29,200
have to update

00:11:23,279 --> 00:11:32,320
themselves we have a

00:11:29,200 --> 00:11:33,680
our thing excess is restricted to only

00:11:32,320 --> 00:11:36,720
official mirrors

00:11:33,680 --> 00:11:39,839
and we manage that through salt

00:11:36,720 --> 00:11:43,200
from a list of official mirrors that is

00:11:39,839 --> 00:11:46,160
well stored in salt data

00:11:43,200 --> 00:11:49,760
and the same data is reused by the

00:11:46,160 --> 00:11:49,760
mirror redirector service

00:11:52,079 --> 00:11:59,360
so my redirector is run

00:11:55,519 --> 00:12:04,880
with my brain which is an apache module

00:11:59,360 --> 00:12:07,200
uh it uses a postgresql database to

00:12:04,880 --> 00:12:09,120
know which files are avail available on

00:12:07,200 --> 00:12:12,800
each mirror and

00:12:09,120 --> 00:12:16,240
it watches the status of each

00:12:12,800 --> 00:12:18,880
mirror and redirects you to a

00:12:16,240 --> 00:12:19,760
working me or close to you so definition

00:12:18,880 --> 00:12:24,399
of working

00:12:19,760 --> 00:12:28,320
on your brain by default is only uh

00:12:24,399 --> 00:12:31,760
http is available we got a bit further

00:12:28,320 --> 00:12:32,639
and we hooked another script to disable

00:12:31,760 --> 00:12:34,800
mirror

00:12:32,639 --> 00:12:38,639
which are no longer in sync with the

00:12:34,800 --> 00:12:41,120
main archive

00:12:38,639 --> 00:12:42,320
uh mirror brain is not yet in debian but

00:12:41,120 --> 00:12:44,880
upstream provides

00:12:42,320 --> 00:12:45,760
debian files and i would like to see

00:12:44,880 --> 00:12:48,560
this

00:12:45,760 --> 00:12:50,839
software in deviant uh i thought of

00:12:48,560 --> 00:12:52,399
promised it to its ups and browser but i

00:12:50,839 --> 00:12:54,399
never

00:12:52,399 --> 00:12:57,200
kept my promise yet so if you want to

00:12:54,399 --> 00:13:00,959
help me kept my promise i'll actually

00:12:57,200 --> 00:13:03,120
get some help uh

00:13:00,959 --> 00:13:05,440
me urban has been working relatively

00:13:03,120 --> 00:13:08,959
well for us it has some raw sides

00:13:05,440 --> 00:13:11,519
rough side i get

00:13:08,959 --> 00:13:12,160
many notifications which are not really

00:13:11,519 --> 00:13:13,800
interesting

00:13:12,160 --> 00:13:15,839
it's when

00:13:13,800 --> 00:13:18,720
[Music]

00:13:15,839 --> 00:13:20,000
don't stream me or are not available but

00:13:18,720 --> 00:13:23,120
only for a short period of time

00:13:20,000 --> 00:13:27,600
for example or and it has a

00:13:23,120 --> 00:13:27,600
rather annoying bug that i worked around

00:13:28,079 --> 00:13:32,800
which is related to how it on those

00:13:30,959 --> 00:13:35,440
files

00:13:32,800 --> 00:13:36,240
when you delete delete files from the

00:13:35,440 --> 00:13:39,839
main archive

00:13:36,240 --> 00:13:42,880
it may still be on downstream mirrors

00:13:39,839 --> 00:13:47,519
but it will immediately

00:13:42,880 --> 00:13:50,079
start returning uh http 404 hours

00:13:47,519 --> 00:13:51,920
instead of keeping redirecting to

00:13:50,079 --> 00:13:56,639
whatever mirror still has

00:13:51,920 --> 00:13:57,519
the file i worked on this by ensuring

00:13:56,639 --> 00:14:00,839
that

00:13:57,519 --> 00:14:06,079
we keep deleted files for a few days

00:14:00,839 --> 00:14:06,079
before actually removing them

00:14:06,480 --> 00:14:14,399
so build cells we use

00:14:09,680 --> 00:14:14,399
rebuild d which is a debian package

00:14:14,560 --> 00:14:23,120
created by a french guy julian rojo

00:14:20,079 --> 00:14:25,040
and it's rather simple

00:14:23,120 --> 00:14:27,519
it has no complicated feature but it

00:14:25,040 --> 00:14:31,120
does its job

00:14:27,519 --> 00:14:32,560
it uses a sqlite database to keep track

00:14:31,120 --> 00:14:33,440
of what it has to build and it builds

00:14:32,560 --> 00:14:37,360
them

00:14:33,440 --> 00:14:40,240
but there's no no way to

00:14:37,360 --> 00:14:41,040
handle builders over multiple machines

00:14:40,240 --> 00:14:44,240
it's just

00:14:41,040 --> 00:14:45,279
basically a list of package to build on

00:14:44,240 --> 00:14:48,800
a given builder

00:14:45,279 --> 00:14:51,360
so we feed the uh

00:14:48,800 --> 00:14:52,399
the source package to build from the

00:14:51,360 --> 00:14:54,240
directly from

00:14:52,399 --> 00:14:56,000
the machine running or proper to the

00:14:54,240 --> 00:14:58,639
builder

00:14:56,000 --> 00:15:00,000
this is not a problem for us because we

00:14:58,639 --> 00:15:02,399
used binary package

00:15:00,000 --> 00:15:03,600
from debian unmodified modified and we

00:15:02,399 --> 00:15:06,560
have only

00:15:03,600 --> 00:15:08,880
400 packages which are really specific

00:15:06,560 --> 00:15:11,680
to kali and that we have to build

00:15:08,880 --> 00:15:12,000
so the workload of building is not so

00:15:11,680 --> 00:15:16,720
high

00:15:12,000 --> 00:15:16,720
and a single machine is fine for this

00:15:18,800 --> 00:15:23,920
the build machines also build iso images

00:15:21,279 --> 00:15:26,560
with live build

00:15:23,920 --> 00:15:27,600
so again we have official releases and

00:15:26,560 --> 00:15:31,600
daily builds

00:15:27,600 --> 00:15:32,320
made available i know that live wheel is

00:15:31,600 --> 00:15:35,120
officially

00:15:32,320 --> 00:15:37,120
offered in debian but we use it in kali

00:15:35,120 --> 00:15:40,320
and we'll keep using it and

00:15:37,120 --> 00:15:41,120
we will keep making maintaining it in

00:15:40,320 --> 00:15:44,079
debian

00:15:41,120 --> 00:15:45,600
it is at least we will fix anything that

00:15:44,079 --> 00:15:48,320
is broken we might not

00:15:45,600 --> 00:15:50,480
develop new features and stuff like that

00:15:48,320 --> 00:15:50,480
but

00:15:51,199 --> 00:15:55,440
but we will make sure that doesn't it

00:15:53,519 --> 00:15:58,639
does not get removed at least not

00:15:55,440 --> 00:16:00,480
until its replacement is

00:15:58,639 --> 00:16:02,800
as feature complete as live build

00:16:00,480 --> 00:16:09,279
because so far live wrapper is really

00:16:02,800 --> 00:16:11,839
uh light on features

00:16:09,279 --> 00:16:13,199
for quality restaurants we have a

00:16:11,839 --> 00:16:18,079
private jenkins server

00:16:13,199 --> 00:16:23,199
with many jobs we run tests on

00:16:18,079 --> 00:16:26,079
only on imd64 and e386

00:16:23,199 --> 00:16:28,320
architecture so so we don't have tests

00:16:26,079 --> 00:16:30,800
for the other architectures

00:16:28,320 --> 00:16:31,920
it was initially set up by olga levson

00:16:30,800 --> 00:16:33,600
with a

00:16:31,920 --> 00:16:36,320
similar setup to what we have to

00:16:33,600 --> 00:16:38,480
nowadays on jenkins.net

00:16:36,320 --> 00:16:38,480
or

00:16:40,000 --> 00:16:43,279
and we have a public backtracker

00:16:41,920 --> 00:16:46,320
obviously

00:16:43,279 --> 00:16:49,920
which is the monty setup

00:16:46,320 --> 00:16:52,320
but i think monty is going from devil

00:16:49,920 --> 00:16:52,320
but well

00:16:53,759 --> 00:16:57,600
so i speak a bit about the structure of

00:16:56,560 --> 00:17:01,040
the distribution

00:16:57,600 --> 00:17:03,680
how we what repository we have

00:17:01,040 --> 00:17:04,959
what meta package we have created and

00:17:03,680 --> 00:17:08,640
what

00:17:04,959 --> 00:17:08,640
kali specific package we have

00:17:09,439 --> 00:17:13,520
kali specific being bose fox package

00:17:12,160 --> 00:17:18,480
from deviant and

00:17:13,520 --> 00:17:22,480
packages really exist only in cali

00:17:18,480 --> 00:17:24,480
so how do we create our release

00:17:22,480 --> 00:17:26,880
we have our cali packages in a

00:17:24,480 --> 00:17:30,240
repository called kali

00:17:26,880 --> 00:17:34,240
only so

00:17:30,240 --> 00:17:34,240
that's where we upload our packages

00:17:35,039 --> 00:17:38,640
and it contains only results debian

00:17:37,520 --> 00:17:41,120
testing is a

00:17:38,640 --> 00:17:43,360
plain mirror of debian testing and from

00:17:41,120 --> 00:17:45,840
there on we built kali dash dev

00:17:43,360 --> 00:17:47,280
we combine debian testing with kali live

00:17:45,840 --> 00:17:50,640
only

00:17:47,280 --> 00:17:54,240
and kali dev only takes precedence so

00:17:50,640 --> 00:17:57,520
if one packaging is in both a repository

00:17:54,240 --> 00:18:00,880
you get the one from cali dev only

00:17:57,520 --> 00:18:03,520
obviously this breaks quite often

00:18:00,880 --> 00:18:04,240
when for example there is a transition

00:18:03,520 --> 00:18:06,880
finished

00:18:04,240 --> 00:18:09,280
in debian testing we have to do the same

00:18:06,880 --> 00:18:11,440
transition in cali dev only

00:18:09,280 --> 00:18:13,440
so to ensure that we have something

00:18:11,440 --> 00:18:16,480
consistent to use for a user

00:18:13,440 --> 00:18:21,200
we run britney on top of kalidev

00:18:16,480 --> 00:18:21,200
and this is then named cali rolling

00:18:22,240 --> 00:18:25,600
our britnet configuration is rather

00:18:24,880 --> 00:18:28,400
simple

00:18:25,600 --> 00:18:30,480
because we have no delay to wait no rc

00:18:28,400 --> 00:18:32,880
bugs to check

00:18:30,480 --> 00:18:34,400
so basically it boils down to

00:18:32,880 --> 00:18:36,000
instability checks and

00:18:34,400 --> 00:18:39,200
making sure that the package are

00:18:36,000 --> 00:18:39,200
available in all the

00:18:40,840 --> 00:18:43,840
architectures

00:18:44,559 --> 00:18:49,520
we have created the meta packages

00:18:48,080 --> 00:18:51,840
so for those of you who don't know what

00:18:49,520 --> 00:18:54,960
it is it's a simple way to install

00:18:51,840 --> 00:18:56,559
a set of related packages through an

00:18:54,960 --> 00:18:58,320
empty packages

00:18:56,559 --> 00:19:00,160
whose sole purpose is to have

00:18:58,320 --> 00:19:02,480
dependencies

00:19:00,160 --> 00:19:04,240
so for example we have kali linux full

00:19:02,480 --> 00:19:06,559
which defines our default

00:19:04,240 --> 00:19:07,919
system that you get installed on our

00:19:06,559 --> 00:19:11,280
live image

00:19:07,919 --> 00:19:14,799
but we have a whole set of

00:19:11,280 --> 00:19:17,760
topic based meter packages as well

00:19:14,799 --> 00:19:18,559
software define radio one oriented to

00:19:17,760 --> 00:19:22,640
tools using

00:19:18,559 --> 00:19:25,440
your gpu wireless tools web tools

00:19:22,640 --> 00:19:26,400
forensic tools voice over ip tools

00:19:25,440 --> 00:19:31,120
password

00:19:26,400 --> 00:19:34,720
cracking tools rfid

00:19:31,120 --> 00:19:38,640
net hunter is a specific one net hunter

00:19:34,720 --> 00:19:41,760
is a

00:19:38,640 --> 00:19:42,880
basically a a phone device on which you

00:19:41,760 --> 00:19:47,360
can install

00:19:42,880 --> 00:19:50,400
kali to do funny things like uh

00:19:47,360 --> 00:19:51,840
plug it in in a computer like uh say you

00:19:50,400 --> 00:19:54,720
have a friend or a

00:19:51,840 --> 00:19:55,120
target rather uh you you ask him if you

00:19:54,720 --> 00:19:58,160
can

00:19:55,120 --> 00:20:01,520
charge your your phone on the

00:19:58,160 --> 00:20:04,320
usb price uh yes

00:20:01,520 --> 00:20:06,159
so you stick it in and it becomes the

00:20:04,320 --> 00:20:09,039
network devices

00:20:06,159 --> 00:20:09,039
that takes uh

00:20:09,200 --> 00:20:12,880
which becomes the default outgoing

00:20:11,679 --> 00:20:15,200
routes and key

00:20:12,880 --> 00:20:17,840
so basically you you monitor everything

00:20:15,200 --> 00:20:19,919
through your phone but you

00:20:17,840 --> 00:20:21,600
drive the traffic back to the original

00:20:19,919 --> 00:20:24,880
interface so you can

00:20:21,600 --> 00:20:28,000
snoop everything it also becomes a

00:20:24,880 --> 00:20:30,559
keyboard so you can send the

00:20:28,000 --> 00:20:31,840
k strokes and take control of the

00:20:30,559 --> 00:20:35,360
computer

00:20:31,840 --> 00:20:38,000
so it's a really nice project that

00:20:35,360 --> 00:20:38,000
they created

00:20:38,799 --> 00:20:42,880
and uh well this one it contains all the

00:20:41,039 --> 00:20:47,039
dependencies that you have to

00:20:42,880 --> 00:20:50,080
to run to set up this on a phone

00:20:47,039 --> 00:20:52,799
we have also some desktop oriented meta

00:20:50,080 --> 00:20:56,159
packages so that if you

00:20:52,799 --> 00:20:58,640
want to install or

00:20:56,159 --> 00:20:59,200
rather when you create mainly used in

00:20:58,640 --> 00:21:02,000
the

00:20:59,200 --> 00:21:04,159
creation process of iso image because

00:21:02,000 --> 00:21:06,559
you can create custom iso image

00:21:04,159 --> 00:21:08,480
for a specific desktop and then you you

00:21:06,559 --> 00:21:12,320
use those and you get something

00:21:08,480 --> 00:21:14,159
rather well integrated with kali

00:21:12,320 --> 00:21:16,000
and we have two special packages which

00:21:14,159 --> 00:21:18,000
are kali linux

00:21:16,000 --> 00:21:20,000
all which is a dependency which is a

00:21:18,000 --> 00:21:23,280
meta package of meta packages so when

00:21:20,000 --> 00:21:26,640
you install this one you have everything

00:21:23,280 --> 00:21:29,919
it's too huge for most people

00:21:26,640 --> 00:21:31,679
so we use it for testing because it's a

00:21:29,919 --> 00:21:33,360
way to ensure that we

00:21:31,679 --> 00:21:36,240
it's a simple way for us to install all

00:21:33,360 --> 00:21:36,240
our packages

00:21:36,559 --> 00:21:40,559
under kali linux top 10 so the most

00:21:38,640 --> 00:21:45,840
popular the 10 most popular

00:21:40,559 --> 00:21:45,840
packages among carry

00:21:50,080 --> 00:21:54,640
so kali specific package we have a few

00:21:52,320 --> 00:21:56,799
package of our own

00:21:54,640 --> 00:21:58,240
kali therefore is basically therefore

00:21:56,799 --> 00:22:01,280
configuration file

00:21:58,240 --> 00:22:04,720
for the web browser but also for

00:22:01,280 --> 00:22:08,000
desktop with g conf g d conf

00:22:04,720 --> 00:22:10,000
g settings on the everything that is

00:22:08,000 --> 00:22:12,240
related to that

00:22:10,000 --> 00:22:14,080
we have kali menu which is using the

00:22:12,240 --> 00:22:15,919
free desktop menu specification to

00:22:14,080 --> 00:22:20,000
create a

00:22:15,919 --> 00:22:23,520
uh kali specific menu where all the

00:22:20,000 --> 00:22:24,799
usual entries are even one level below

00:22:23,520 --> 00:22:27,679
and where

00:22:24,799 --> 00:22:29,840
we put all our cali tools in the main

00:22:27,679 --> 00:22:33,440
level in the main

00:22:29,840 --> 00:22:36,960
menu kali would login is a set of hacks

00:22:33,440 --> 00:22:40,400
because kali

00:22:36,960 --> 00:22:41,200
default user is root and you can't login

00:22:40,400 --> 00:22:43,919
as rooting

00:22:41,200 --> 00:22:45,919
kdm gdm by default so this basically

00:22:43,919 --> 00:22:49,840
diverts some

00:22:45,919 --> 00:22:53,120
pump configuration file to allow this

00:22:49,840 --> 00:22:54,080
kali meta is where we built our meta

00:22:53,120 --> 00:22:57,360
packages

00:22:54,080 --> 00:23:01,120
and carrier shift keying is the key

00:22:57,360 --> 00:23:01,120
to sign our repository

00:23:01,919 --> 00:23:09,679
we also fork quite a few a few packages

00:23:05,840 --> 00:23:10,400
so the minimum the minimum one is base

00:23:09,679 --> 00:23:13,679
files

00:23:10,400 --> 00:23:16,080
because you want to uh

00:23:13,679 --> 00:23:18,480
to be recognized as being a derivative

00:23:16,080 --> 00:23:23,360
so you must modify your et

00:23:18,480 --> 00:23:26,080
os release and so on base and httpg d4

00:23:23,360 --> 00:23:26,080
and stuff like that

00:23:26,559 --> 00:23:33,280
for various reasons desktop base is

00:23:30,080 --> 00:23:36,080
where you change the

00:23:33,280 --> 00:23:37,200
the background picture of the desktop

00:23:36,080 --> 00:23:40,880
and rootscale

00:23:37,200 --> 00:23:43,440
jdk is for the branding within the

00:23:40,880 --> 00:23:43,440
installer

00:23:44,960 --> 00:23:48,880
we have a few desktop features we have a

00:23:47,679 --> 00:23:51,520
modified version of

00:23:48,880 --> 00:23:51,919
dom shell extension with an application

00:23:51,520 --> 00:23:55,279
menu

00:23:51,919 --> 00:23:57,200
supporting nested menu

00:23:55,279 --> 00:23:58,559
it used to support this but our recent

00:23:57,200 --> 00:24:01,840
gnome version

00:23:58,559 --> 00:24:01,840
dropped this so we

00:24:03,279 --> 00:24:10,159
we developed something

00:24:06,559 --> 00:24:10,159
to keep that feature for us

00:24:10,799 --> 00:24:15,120
and in gnome terminal we had a patch to

00:24:13,200 --> 00:24:16,240
support transparency which also got

00:24:15,120 --> 00:24:20,320
removed

00:24:16,240 --> 00:24:20,320
by gnome recently

00:24:20,960 --> 00:24:26,400
we fork linux mainly to add a single

00:24:24,960 --> 00:24:30,080
patch which allows with

00:24:26,400 --> 00:24:33,520
injections on many brands of uh

00:24:30,080 --> 00:24:36,720
with eco wi-fi cards

00:24:33,520 --> 00:24:38,960
um i would like to get this one into

00:24:36,720 --> 00:24:46,000
debian but

00:24:38,960 --> 00:24:49,760
i'm not sure it's actually possible

00:24:46,000 --> 00:24:53,760
yeah i i i we discussed it once already

00:24:49,760 --> 00:24:53,760
i think option didn't like it so

00:24:56,400 --> 00:25:00,960
we have a fork of init system helpers

00:24:59,360 --> 00:25:04,480
basically it's a

00:25:00,960 --> 00:25:05,279
fork of update ltd to disable most

00:25:04,480 --> 00:25:08,000
services

00:25:05,279 --> 00:25:08,000
by default

00:25:08,640 --> 00:25:13,679
it's a it's a hack and i'm

00:25:12,080 --> 00:25:16,320
rather happy that we have found a

00:25:13,679 --> 00:25:20,000
cleaner solution for the future

00:25:16,320 --> 00:25:23,039
uh we recently contributed

00:25:20,000 --> 00:25:24,799
well with help of andreas henriksen i

00:25:23,039 --> 00:25:27,679
believe

00:25:24,799 --> 00:25:28,640
support of preset files in systemd in

00:25:27,679 --> 00:25:33,039
debian because

00:25:28,640 --> 00:25:36,480
the dh systemd was always using the

00:25:33,039 --> 00:25:37,919
systemctl enable instead of systemctl

00:25:36,480 --> 00:25:40,880
preset

00:25:37,919 --> 00:25:41,440
so we we fixed this and so you can now

00:25:40,880 --> 00:25:44,320
use

00:25:41,440 --> 00:25:46,320
systemd preset files to disable services

00:25:44,320 --> 00:25:49,919
by default

00:25:46,320 --> 00:25:52,320
at least it works for packages that have

00:25:49,919 --> 00:25:53,600
systemd units which is not all of them

00:25:52,320 --> 00:25:57,440
which is the reason why we

00:25:53,600 --> 00:25:59,919
still have to keep the update lcd fork

00:25:57,440 --> 00:25:59,919
for now

00:26:02,080 --> 00:26:05,760
obviously we have customized an

00:26:03,760 --> 00:26:08,880
installer

00:26:05,760 --> 00:26:12,799
mainly to put a precede file

00:26:08,880 --> 00:26:12,799
in the initiality which is generated

00:26:12,960 --> 00:26:17,919
and related to this we have a few two

00:26:15,600 --> 00:26:21,120
udabs that we modified

00:26:17,919 --> 00:26:21,679
net retriever to make it use the correct

00:26:21,120 --> 00:26:25,600
package

00:26:21,679 --> 00:26:28,640
for our containing our key

00:26:25,600 --> 00:26:32,320
for the repository and

00:26:28,640 --> 00:26:32,320
another one to change the default name

00:26:34,240 --> 00:26:42,559
when you want to install a

00:26:37,600 --> 00:26:44,159
well they bootstrap cali obviously uh

00:26:42,559 --> 00:26:46,240
debian stability bootstrap doesn't know

00:26:44,159 --> 00:26:49,200
of kali yet so we have a

00:26:46,240 --> 00:26:50,640
a fork to support this and if you open

00:26:49,200 --> 00:26:53,360
bug robots

00:26:50,640 --> 00:26:56,000
like in the bootstrap as well and demon

00:26:53,360 --> 00:27:00,960
series as well as some

00:26:56,000 --> 00:27:00,960
distro specific data that we have to add

00:27:02,240 --> 00:27:09,200
we have a modified live build with

00:27:05,440 --> 00:27:13,039
efi put supports

00:27:09,200 --> 00:27:14,799
which we contributed back into a bug

00:27:13,039 --> 00:27:16,880
report but which never was applied and

00:27:14,799 --> 00:27:21,760
which is not

00:27:16,880 --> 00:27:24,159
entirely satisfying so

00:27:21,760 --> 00:27:25,120
that's why i never committed directly i

00:27:24,159 --> 00:27:28,320
wanted

00:27:25,120 --> 00:27:32,840
someone to review it but since then

00:27:28,320 --> 00:27:35,039
danielle stepped down so it's somewhat

00:27:32,840 --> 00:27:38,159
languishing

00:27:35,039 --> 00:27:42,000
so that's it now

00:27:38,159 --> 00:27:45,760
how do we do yeah next time yes

00:27:42,000 --> 00:27:48,559
our packaging we

00:27:45,760 --> 00:27:50,159
do everything in git repository so you

00:27:48,559 --> 00:27:53,760
can find all our packages

00:27:50,159 --> 00:27:57,760
in git.kalib.org we

00:27:53,760 --> 00:28:00,399
use what i consider the standard

00:27:57,760 --> 00:28:01,520
best tool to use nowadays so git build

00:28:00,399 --> 00:28:05,480
package

00:28:01,520 --> 00:28:08,640
we use a pristin tower to store the

00:28:05,480 --> 00:28:11,919
original 3.0 killed for

00:28:08,640 --> 00:28:13,440
a source package from it short wool

00:28:11,919 --> 00:28:18,000
files with dh

00:28:13,440 --> 00:28:18,000
so this is rather turned up

00:28:18,159 --> 00:28:23,760
when we have a package frog from debian

00:28:21,600 --> 00:28:27,120
we maintain a debian branch

00:28:23,760 --> 00:28:30,000
with a good build package import dsc

00:28:27,120 --> 00:28:31,360
on a separate bunch of the debian branch

00:28:30,000 --> 00:28:33,520
and

00:28:31,360 --> 00:28:34,640
then you check out the cali branch and

00:28:33,520 --> 00:28:37,600
you merge

00:28:34,640 --> 00:28:38,000
directly from debian it works rather

00:28:37,600 --> 00:28:40,320
well

00:28:38,000 --> 00:28:43,120
in particular if you have configured the

00:28:40,320 --> 00:28:44,880
pkg dashboard changed to avoid

00:28:43,120 --> 00:28:47,279
most of the conflicts on challenger

00:28:44,880 --> 00:28:47,279
files

00:28:50,240 --> 00:28:56,320
another packaging related workflow is a

00:28:53,279 --> 00:29:00,080
britney because britain needs some

00:28:56,320 --> 00:29:00,080
manual care uh

00:29:00,159 --> 00:29:04,399
most of the migrations are automatic on

00:29:02,559 --> 00:29:06,240
ours because well we are really really

00:29:04,399 --> 00:29:08,000
close to testing and testing is already

00:29:06,240 --> 00:29:08,720
really consistent so you don't have many

00:29:08,000 --> 00:29:10,960
problems

00:29:08,720 --> 00:29:12,080
but you still have issue from time to

00:29:10,960 --> 00:29:15,520
time when well

00:29:12,080 --> 00:29:17,520
deviant used some frosting to

00:29:15,520 --> 00:29:20,399
bring a package in we have to use

00:29:17,520 --> 00:29:20,399
similar hints

00:29:21,679 --> 00:29:31,200
also for packages we

00:29:26,399 --> 00:29:33,120
we which needs some which i'm not sure

00:29:31,200 --> 00:29:34,540
hatch all packages which are not

00:29:33,120 --> 00:29:35,720
installable on the

00:29:34,540 --> 00:29:38,960
[Music]

00:29:35,720 --> 00:29:42,320
e386 or stuff like that which are forced

00:29:38,960 --> 00:29:42,320
in also on the debian side

00:29:44,399 --> 00:29:48,960
so what do we do on the quality

00:29:47,919 --> 00:29:51,520
assurance side

00:29:48,960 --> 00:29:53,200
so as i said we have a jenkins instance

00:29:51,520 --> 00:29:56,720
and it runs mainly

00:29:53,200 --> 00:30:00,000
four kind of jobs

00:29:56,720 --> 00:30:03,919
the simple test we do is installing our

00:30:00,000 --> 00:30:07,120
meta packages in minimal shoots

00:30:03,919 --> 00:30:11,360
um well that's the test that breaks

00:30:07,120 --> 00:30:13,360
most often usually because

00:30:11,360 --> 00:30:15,039
either package needs to rebuild to be

00:30:13,360 --> 00:30:17,120
rebuilt in kali dev only

00:30:15,039 --> 00:30:18,159
or because the package got removed on

00:30:17,120 --> 00:30:21,360
the debian side

00:30:18,159 --> 00:30:24,960
so i'll talk about this later we

00:30:21,360 --> 00:30:28,240
also have a new grading test

00:30:24,960 --> 00:30:31,600
even though we we are rolling release

00:30:28,240 --> 00:30:35,039
we do snapshot every

00:30:31,600 --> 00:30:36,000
four to six months and so we do tests

00:30:35,039 --> 00:30:39,120
and we do ensure

00:30:36,000 --> 00:30:40,880
that when you started with the last

00:30:39,120 --> 00:30:45,600
chapter you can upgrade up to

00:30:40,880 --> 00:30:48,880
the current status

00:30:45,600 --> 00:30:52,320
we ensure that our iso build

00:30:48,880 --> 00:30:56,159
process works because

00:30:52,320 --> 00:30:58,480
well many of our users build

00:30:56,159 --> 00:31:02,000
customized live build image and so we

00:30:58,480 --> 00:31:02,000
want to be sure that it always works

00:31:02,880 --> 00:31:06,000
and we also test uh installation from

00:31:05,679 --> 00:31:10,320
the

00:31:06,000 --> 00:31:13,760
iso image also this is rather

00:31:10,320 --> 00:31:16,399
a superficial test i think olga had

00:31:13,760 --> 00:31:19,039
great plans but did not manage to finish

00:31:16,399 --> 00:31:21,120
them from at this level

00:31:19,039 --> 00:31:23,840
we kept running it but i think it's not

00:31:21,120 --> 00:31:23,840
checking much

00:31:24,960 --> 00:31:28,799
we would like to go further in terms of

00:31:26,720 --> 00:31:33,600
quality assurance

00:31:28,799 --> 00:31:38,080
because the well uh

00:31:33,600 --> 00:31:40,480
security software are rather uh

00:31:38,080 --> 00:31:41,519
they are very specific sometimes hard to

00:31:40,480 --> 00:31:44,640
understand and

00:31:41,519 --> 00:31:47,360
how to and for us

00:31:44,640 --> 00:31:48,000
packager without specific knowledge of

00:31:47,360 --> 00:31:51,600
the

00:31:48,000 --> 00:31:54,559
domain it can be hard to ensure that

00:31:51,600 --> 00:31:57,600
they work so we would like to be able to

00:31:54,559 --> 00:32:00,640
synthesize this knowledge into a test

00:31:57,600 --> 00:32:03,039
and then rely on those tests

00:32:00,640 --> 00:32:06,240
and obviously then hook self results

00:32:03,039 --> 00:32:06,240
into britney because

00:32:06,399 --> 00:32:11,840
we have nothing that can blocks uploads

00:32:09,919 --> 00:32:14,320
package that we upload in cali dev only

00:32:11,840 --> 00:32:17,519
into cali rolling

00:32:14,320 --> 00:32:18,640
so we would like to have this sanity

00:32:17,519 --> 00:32:21,200
check in the middle

00:32:18,640 --> 00:32:22,320
so we would upload to cali dev only it

00:32:21,200 --> 00:32:24,159
would run

00:32:22,320 --> 00:32:27,039
auto package test and it would only

00:32:24,159 --> 00:32:32,240
accept them in carry rolling if the test

00:32:27,039 --> 00:32:32,240
succeeded but we're not here that

00:32:34,159 --> 00:32:39,840
so now the more interesting part for

00:32:37,279 --> 00:32:41,039
billion the problems that we have

00:32:39,840 --> 00:32:44,399
related today

00:32:41,039 --> 00:32:46,640
or not so

00:32:44,399 --> 00:32:48,720
if you want to look it up you can check

00:32:46,640 --> 00:32:51,360
the bugs that we filed

00:32:48,720 --> 00:32:52,960
not all of them are related to the

00:32:51,360 --> 00:32:54,480
infrastructure many of them are related

00:32:52,960 --> 00:32:56,640
to specific packages but

00:32:54,480 --> 00:32:58,159
a few of them are related to the

00:32:56,640 --> 00:33:02,159
infrastructure no

00:32:58,159 --> 00:33:05,440
notably related to repro pro

00:33:02,159 --> 00:33:07,679
other i said in the talk before the repo

00:33:05,440 --> 00:33:10,559
has no integration with britney so

00:33:07,679 --> 00:33:13,919
britney outputs a file which is called a

00:33:10,559 --> 00:33:17,039
id result which is

00:33:13,919 --> 00:33:18,240
really the list of packages of binary

00:33:17,039 --> 00:33:21,279
packages

00:33:18,240 --> 00:33:23,840
that you want in the resulting

00:33:21,279 --> 00:33:28,000
distribution

00:33:23,840 --> 00:33:31,279
uh red purple can't use this

00:33:28,000 --> 00:33:33,519
uh republic a set of comments so

00:33:31,279 --> 00:33:35,200
we have written a script which

00:33:33,519 --> 00:33:38,640
translates in a

00:33:35,200 --> 00:33:41,679
large set of repo pro calls and

00:33:38,640 --> 00:33:42,720
it works fine but it's not really nice i

00:33:41,679 --> 00:33:46,320
would rather have something

00:33:42,720 --> 00:33:49,919
integrated reprop

00:33:46,320 --> 00:33:52,399
also has no feature to keep deleted

00:33:49,919 --> 00:33:53,919
to keep files of deleted packages for a

00:33:52,399 --> 00:33:58,000
few days

00:33:53,919 --> 00:34:00,799
so when a package is deleted it

00:33:58,000 --> 00:34:01,360
goes away from the mirror immediately

00:34:00,799 --> 00:34:06,480
and this

00:34:01,360 --> 00:34:10,960
is causing problems for us so we

00:34:06,480 --> 00:34:13,040
again act something with a snapshot so

00:34:10,960 --> 00:34:14,560
repo pro has a snapshot feature where

00:34:13,040 --> 00:34:16,879
you can

00:34:14,560 --> 00:34:18,879
uh well snapshot our distribution at a

00:34:16,879 --> 00:34:22,639
given time and then it will keep

00:34:18,879 --> 00:34:25,119
around the file as long as the snapshot

00:34:22,639 --> 00:34:26,480
is there except that the chat filter is

00:34:25,119 --> 00:34:28,639
not really complete

00:34:26,480 --> 00:34:30,399
so you can't really remove a snapshot to

00:34:28,639 --> 00:34:33,760
yourself you have to

00:34:30,399 --> 00:34:36,800
individually remove refree references

00:34:33,760 --> 00:34:39,599
to keep the file around so it's again

00:34:36,800 --> 00:34:39,599
not really clean

00:34:40,240 --> 00:34:44,960
and one of the most annoying problems

00:34:42,480 --> 00:34:47,760
that i have with

00:34:44,960 --> 00:34:48,560
repopro is the fact that while sometimes

00:34:47,760 --> 00:34:51,679
in kali

00:34:48,560 --> 00:34:55,440
we upload new website version of

00:34:51,679 --> 00:34:59,040
the event packages before debian so we

00:34:55,440 --> 00:35:02,320
push a new dot auric dot

00:34:59,040 --> 00:35:07,040
gz file and when debian updated

00:35:02,320 --> 00:35:07,040
for some reason because either

00:35:07,119 --> 00:35:12,720
the event package has been

00:35:10,240 --> 00:35:14,240
repackaged or because it has been

00:35:12,720 --> 00:35:16,720
downloaded from another

00:35:14,240 --> 00:35:17,440
place sometimes you can download from

00:35:16,720 --> 00:35:19,359
github

00:35:17,440 --> 00:35:20,560
directly at stargazers and sometimes you

00:35:19,359 --> 00:35:23,920
can download it from

00:35:20,560 --> 00:35:26,800
pi pi or another source the result of

00:35:23,920 --> 00:35:28,160
basically make this and so the it's not

00:35:26,800 --> 00:35:30,160
exactly the same time so you have

00:35:28,160 --> 00:35:33,280
conflicting files and we propose

00:35:30,160 --> 00:35:34,960
not always and it's same to not allow

00:35:33,280 --> 00:35:38,000
this but

00:35:34,960 --> 00:35:41,040
it has no feature to solve this problem

00:35:38,000 --> 00:35:42,880
and we have to solve it so we

00:35:41,040 --> 00:35:45,839
the only solution is to manually remove

00:35:42,880 --> 00:35:49,599
the our kali version

00:35:45,839 --> 00:35:53,599
in all suites where it is and

00:35:49,599 --> 00:35:55,599
copy back the debian version and

00:35:53,599 --> 00:35:57,680
it gets really hard because when you

00:35:55,599 --> 00:35:59,680
want to keep files for a few days you

00:35:57,680 --> 00:36:01,680
you add snapshots but snapshots you have

00:35:59,680 --> 00:36:04,880
no way to modify them

00:36:01,680 --> 00:36:08,000
so it's really tricky yeah so it would

00:36:04,880 --> 00:36:08,000
be nice to have something here

00:36:10,839 --> 00:36:15,200
so it's

00:36:13,200 --> 00:36:16,560
somewhat related another problem is auto

00:36:15,200 --> 00:36:18,400
update development packs it would be

00:36:16,560 --> 00:36:21,359
nice if we did not

00:36:18,400 --> 00:36:23,200
had to uh push new option versions on

00:36:21,359 --> 00:36:24,960
the kali side

00:36:23,200 --> 00:36:27,119
because the new option version would be

00:36:24,960 --> 00:36:28,880
already in debian unstable or

00:36:27,119 --> 00:36:31,359
they've been testing but it's not always

00:36:28,880 --> 00:36:35,040
the case mainly when it happens it's

00:36:31,359 --> 00:36:37,119
due to maintainers missing in action

00:36:35,040 --> 00:36:38,839
so part of our solution so far has been

00:36:37,119 --> 00:36:41,440
to create a

00:36:38,839 --> 00:36:43,520
pkg-security team to take over

00:36:41,440 --> 00:36:45,520
the package which are not really well

00:36:43,520 --> 00:36:48,560
maintained in debian

00:36:45,520 --> 00:36:54,720
so we're starting to do more work

00:36:48,560 --> 00:36:58,079
within debian in this team

00:36:54,720 --> 00:37:01,119
so knows the problem

00:36:58,079 --> 00:37:03,520
which are more specific to to debian

00:37:01,119 --> 00:37:06,839
testing

00:37:03,520 --> 00:37:10,960
the main one is package being removed

00:37:06,839 --> 00:37:12,960
we we have our meta packages they list

00:37:10,960 --> 00:37:15,200
packages from kali but they also list a

00:37:12,960 --> 00:37:18,720
lot of packages from devon

00:37:15,200 --> 00:37:21,359
and some of them get removed so

00:37:18,720 --> 00:37:23,119
one of the common reason is due to

00:37:21,359 --> 00:37:25,760
release critical bugs

00:37:23,119 --> 00:37:26,320
which are not handled on the inside

00:37:25,760 --> 00:37:29,520
because

00:37:26,320 --> 00:37:30,560
again the maintainers is missing in

00:37:29,520 --> 00:37:32,880
action or

00:37:30,560 --> 00:37:34,960
maybe because the maintainers does not

00:37:32,880 --> 00:37:36,079
care as long as it gets fixed before the

00:37:34,960 --> 00:37:39,359
release is happy

00:37:36,079 --> 00:37:42,560
with this it might not be a problem for

00:37:39,359 --> 00:37:42,560
him if it's not in testing

00:37:44,800 --> 00:37:51,839
we have no solution yet for this but we

00:37:49,280 --> 00:37:51,839
would like to

00:37:52,240 --> 00:37:55,599
add a supplementary jenkins check which

00:37:55,119 --> 00:37:58,160
would

00:37:55,599 --> 00:37:58,160
basically

00:37:59,040 --> 00:38:06,720
monitor the the running

00:38:02,839 --> 00:38:10,480
well the output how can i help

00:38:06,720 --> 00:38:14,079
restrict it to the testing removals

00:38:10,480 --> 00:38:16,000
warnings that it emits we have multiple

00:38:14,079 --> 00:38:19,520
ways to get this information

00:38:16,000 --> 00:38:23,599
but uh how can i help recently got

00:38:19,520 --> 00:38:26,720
a machine per stable output so we can

00:38:23,599 --> 00:38:26,720
rely on it if we want

00:38:26,880 --> 00:38:32,800
well our idea was mainly to install kali

00:38:30,480 --> 00:38:34,320
linux all so that we have our packages

00:38:32,800 --> 00:38:39,359
then run all kind of help

00:38:34,320 --> 00:38:39,359
and then filter the output that we get

00:38:40,320 --> 00:38:43,520
a second reason explaining that package

00:38:42,480 --> 00:38:46,400
get drops

00:38:43,520 --> 00:38:47,520
might be the qa team requesting their

00:38:46,400 --> 00:38:51,359
removal

00:38:47,520 --> 00:38:54,000
because well the package might have

00:38:51,359 --> 00:38:55,280
a few bugs and low popularity contests

00:38:54,000 --> 00:38:57,920
so

00:38:55,280 --> 00:38:58,720
if the maintainers seem to be missing an

00:38:57,920 --> 00:39:01,359
action

00:38:58,720 --> 00:39:03,040
why keep the package so it's true that a

00:39:01,359 --> 00:39:06,880
few of them got removed

00:39:03,040 --> 00:39:10,160
that way so debian is not aware

00:39:06,880 --> 00:39:14,920
of package using derivatives

00:39:10,160 --> 00:39:17,760
we should aim to fix this maybe through

00:39:14,920 --> 00:39:18,800
tracker.debian.org advertising package

00:39:17,760 --> 00:39:21,440
which are relevant

00:39:18,800 --> 00:39:23,599
in the context of derivatives i don't

00:39:21,440 --> 00:39:23,599
know

00:39:23,920 --> 00:39:28,079
and the last point is when the release

00:39:26,320 --> 00:39:32,000
team kicks package out of

00:39:28,079 --> 00:39:34,000
testing to finish a transition you know

00:39:32,000 --> 00:39:35,599
sometimes the package needs changes in

00:39:34,000 --> 00:39:39,119
unstable and when it doesn't happen

00:39:35,599 --> 00:39:40,880
often quickly enough to be ready with

00:39:39,119 --> 00:39:42,400
the other packages the package gets

00:39:40,880 --> 00:39:44,960
dropped from testing

00:39:42,400 --> 00:39:45,599
and it gets back in when it's fixed but

00:39:44,960 --> 00:39:47,520
it still

00:39:45,599 --> 00:39:48,640
means a few days where there is no

00:39:47,520 --> 00:39:51,280
packages

00:39:48,640 --> 00:39:51,280
in testing

00:39:54,240 --> 00:39:59,040
the second problem is package which are

00:39:56,480 --> 00:39:59,040
broken

00:39:59,920 --> 00:40:05,680
it often happens with partial transition

00:40:05,760 --> 00:40:10,640
what this means is that when you have a

00:40:09,040 --> 00:40:13,760
package

00:40:10,640 --> 00:40:14,480
a depending on package b with a minimal

00:40:13,760 --> 00:40:18,160
version

00:40:14,480 --> 00:40:20,800
and well for some reason uh

00:40:18,160 --> 00:40:22,319
the minimal version is not com correct

00:40:20,800 --> 00:40:22,640
anymore it should have been increased

00:40:22,319 --> 00:40:26,079
but

00:40:22,640 --> 00:40:28,560
it has been missed either

00:40:26,079 --> 00:40:30,560
through tooling or through because the

00:40:28,560 --> 00:40:32,400
maintainer did not look

00:40:30,560 --> 00:40:34,640
the change log correctly and stuff like

00:40:32,400 --> 00:40:36,240
that and

00:40:34,640 --> 00:40:38,960
both packages have not been imploded

00:40:36,240 --> 00:40:41,839
exactly the same day the first one will

00:40:38,960 --> 00:40:42,720
migrate to testing before the other and

00:40:41,839 --> 00:40:46,079
until the

00:40:42,720 --> 00:40:49,760
second one migrates the package might be

00:40:46,079 --> 00:40:53,839
broken at run time so

00:40:49,760 --> 00:40:56,960
such partial transitions are

00:40:53,839 --> 00:41:00,000
creating untested combinations that

00:40:56,960 --> 00:41:00,000
ends up not working

00:41:02,480 --> 00:41:09,280
it happens quite frequently in the

00:41:06,240 --> 00:41:13,599
context of gnome transition because

00:41:09,280 --> 00:41:17,760
gnomes do somewhat stage transitions

00:41:13,599 --> 00:41:17,760
only five oh okay

00:41:18,960 --> 00:41:22,800
well so that's a problem for us we also

00:41:21,839 --> 00:41:24,800
have

00:41:22,800 --> 00:41:27,760
problems with upstream not caring about

00:41:24,800 --> 00:41:31,520
backwards compatibility

00:41:27,760 --> 00:41:32,079
uh so when we apply the package debian

00:41:31,520 --> 00:41:36,240
the

00:41:32,079 --> 00:41:39,440
situation is not really perfect but

00:41:36,240 --> 00:41:41,760
over the months until the freeze uh

00:41:39,440 --> 00:41:43,839
such problems tends to be fixed but in

00:41:41,760 --> 00:41:46,839
testing you obviously have a few weeks

00:41:43,839 --> 00:41:49,280
or months where the situation is

00:41:46,839 --> 00:41:51,440
problematic um

00:41:49,280 --> 00:41:52,880
one last reason might be that bugs might

00:41:51,440 --> 00:41:56,000
be filed too late

00:41:52,880 --> 00:41:59,280
or or at the non-appropriate severity so

00:41:56,000 --> 00:41:59,280
that the package still migrates

00:41:59,920 --> 00:42:04,480
and we often have also problem with

00:42:02,240 --> 00:42:07,839
regressions with a new kernel

00:42:04,480 --> 00:42:10,640
release you know even so ben

00:42:07,839 --> 00:42:11,359
keeps we plot only new kernel with when

00:42:10,640 --> 00:42:14,720
the

00:42:11,359 --> 00:42:15,280
dot one stable raises out we still have

00:42:14,720 --> 00:42:17,839
a few

00:42:15,280 --> 00:42:17,839
regressions

00:42:19,839 --> 00:42:25,599
so our wishes so

00:42:23,040 --> 00:42:28,319
i already spoke of a britney auto

00:42:25,599 --> 00:42:31,920
package jets integration

00:42:28,319 --> 00:42:34,960
missing repo features but what i

00:42:31,920 --> 00:42:37,760
what we would like is that devin

00:42:34,960 --> 00:42:38,720
in general cares more about testing so

00:42:37,760 --> 00:42:40,960
at the individual

00:42:38,720 --> 00:42:42,800
developers level i mean taking care of

00:42:40,960 --> 00:42:44,240
your own packaging testing ensuring that

00:42:42,800 --> 00:42:47,040
it gets fixed

00:42:44,240 --> 00:42:48,720
i mean if you know that it doesn't work

00:42:47,040 --> 00:42:50,640
take care to use

00:42:48,720 --> 00:42:51,780
urgency high to get it fixed in two days

00:42:50,640 --> 00:42:53,520
or instead of five

00:42:51,780 --> 00:42:55,119
[Music]

00:42:53,520 --> 00:42:56,800
i would also like the release team to

00:42:55,119 --> 00:42:58,880
acknowledge that uh

00:42:56,800 --> 00:43:00,079
it's more than a tool to build stable

00:42:58,880 --> 00:43:03,040
it's also

00:43:00,079 --> 00:43:05,760
used by their relatives and by others so

00:43:03,040 --> 00:43:08,160
there are real end users using it so

00:43:05,760 --> 00:43:10,800
try to be more open to accept quick and

00:43:08,160 --> 00:43:12,960
temporary fixes even if it's used

00:43:10,800 --> 00:43:15,200
only for four days or five days it's

00:43:12,960 --> 00:43:18,000
still useful

00:43:15,200 --> 00:43:18,960
but this can only happen obviously if we

00:43:18,000 --> 00:43:20,800
have the developers

00:43:18,960 --> 00:43:22,400
who cares about this and they are ready

00:43:20,800 --> 00:43:24,640
to prepare such uploads

00:43:22,400 --> 00:43:25,520
so it would be nice to re to revive

00:43:24,640 --> 00:43:28,160
whatever

00:43:25,520 --> 00:43:31,440
never real cut team which cares about

00:43:28,160 --> 00:43:31,440
the statues of testing

00:43:32,079 --> 00:43:38,000
i would like report bug to be behave

00:43:34,800 --> 00:43:38,000
better on derivatives

00:43:38,160 --> 00:43:43,520
because it reports back directly to

00:43:39,839 --> 00:43:43,520
debian without warning the user

00:43:47,200 --> 00:43:51,359
still for the release team i would like

00:43:49,119 --> 00:43:52,480
some way to

00:43:51,359 --> 00:43:55,520
some way to gather that about

00:43:52,480 --> 00:43:57,280
transitions i would like to

00:43:55,520 --> 00:44:00,800
know if kali is affected we have

00:43:57,280 --> 00:44:00,800
trackers on the demand side but

00:44:01,119 --> 00:44:06,079
i would like to be able to check on the

00:44:03,280 --> 00:44:08,160
kali side if we are affected also

00:44:06,079 --> 00:44:09,440
without having to run my own tracker and

00:44:08,160 --> 00:44:12,000
copying all the

00:44:09,440 --> 00:44:14,160
tracker stuff and be informed but it has

00:44:12,000 --> 00:44:17,440
been completed so that i can

00:44:14,160 --> 00:44:20,400
check in a timely manner if we have

00:44:17,440 --> 00:44:20,400
something to rebuild

00:44:20,480 --> 00:44:23,520
we would like some application bundling

00:44:22,480 --> 00:44:26,560
supports

00:44:23,520 --> 00:44:29,440
because quite a few of our of our

00:44:26,560 --> 00:44:29,839
packages uh for example ribbon ruby on

00:44:29,440 --> 00:44:32,079
rails

00:44:29,839 --> 00:44:33,839
web application which used many many

00:44:32,079 --> 00:44:35,680
gems

00:44:33,839 --> 00:44:37,839
in different version not necessarily the

00:44:35,680 --> 00:44:41,359
one which are packaged in deviant

00:44:37,839 --> 00:44:44,800
and so we end up currently

00:44:41,359 --> 00:44:47,599
bundling bundle into our debs

00:44:44,800 --> 00:44:48,560
but i believe it would be nicer if we

00:44:47,599 --> 00:44:51,839
could

00:44:48,560 --> 00:44:51,839
rely on something like

00:44:53,040 --> 00:45:00,880
a mix of flat pack sandstorm and

00:44:57,760 --> 00:45:02,000
snappy that would be generic enough to

00:45:00,880 --> 00:45:07,119
cover

00:45:02,000 --> 00:45:07,119
web applications and services

00:45:07,200 --> 00:45:11,680
uh both to for the case where we can't

00:45:10,800 --> 00:45:13,359
deal it

00:45:11,680 --> 00:45:15,119
deal it properly with the event package

00:45:13,359 --> 00:45:17,280
also for the case where we know the

00:45:15,119 --> 00:45:20,560
application to be not clean and doing

00:45:17,280 --> 00:45:21,560
nasty stuff on the system so we want

00:45:20,560 --> 00:45:25,040
continue

00:45:21,560 --> 00:45:25,040
continualization for those

00:45:25,440 --> 00:45:28,960
i would like a proper myoban package i

00:45:27,920 --> 00:45:31,200
said and

00:45:28,960 --> 00:45:34,400
more volunteers for the new team we

00:45:31,200 --> 00:45:38,160
created and we announced recently

00:45:34,400 --> 00:45:39,599
on devil that's it perfect timing i

00:45:38,160 --> 00:45:41,119
guess

00:45:39,599 --> 00:45:47,839
if you have a few minutes left for

00:45:41,119 --> 00:45:47,839
question maybe otherwise yes

00:45:51,520 --> 00:45:54,560
uh yeah just so you know i wanted just

00:45:53,680 --> 00:45:58,400
this minute got

00:45:54,560 --> 00:46:01,680
the live wrapper uefi support working

00:45:58,400 --> 00:46:03,440
so we have um i don't you very well i

00:46:01,680 --> 00:46:03,920
know you are speak of live rapper but

00:46:03,440 --> 00:46:06,800
speak

00:46:03,920 --> 00:46:07,440
speak loudly all right so i've just now

00:46:06,800 --> 00:46:10,800
got the

00:46:07,440 --> 00:46:14,560
live wrapper um branch building

00:46:10,800 --> 00:46:17,760
with the um ufi support so it has iso

00:46:14,560 --> 00:46:17,760
linux and grab support

00:46:18,319 --> 00:46:29,839
it's not working very well it is

00:46:35,680 --> 00:46:40,480
that's all i had okay well it's not the

00:46:39,040 --> 00:46:42,720
ufi support that we

00:46:40,480 --> 00:46:44,720
lack in live rappers rather all the

00:46:42,720 --> 00:46:49,920
hooks and the possibility to

00:46:44,720 --> 00:46:53,680
configure at runtime with time

00:46:49,920 --> 00:46:56,720
we have a question from irc from pere

00:46:53,680 --> 00:46:58,400
he he says comment to a speaker it is

00:46:56,720 --> 00:47:00,560
possible to change the desktop

00:46:58,400 --> 00:47:03,119
background and the installer pictures

00:47:00,560 --> 00:47:04,640
without forking desktop base and root

00:47:03,119 --> 00:47:07,280
root scale gtk

00:47:04,640 --> 00:47:09,280
we do so in deviant edu check the

00:47:07,280 --> 00:47:12,160
deviantardu artwork package

00:47:09,280 --> 00:47:12,160
okay i believe

00:47:12,480 --> 00:47:16,880
i think we we can have one more question

00:47:14,880 --> 00:47:20,480
as we're already on the

00:47:16,880 --> 00:47:25,520
like about to finish please

00:47:20,480 --> 00:47:28,079
any other

00:47:25,520 --> 00:47:28,880
um i have a question as a developer i'm

00:47:28,079 --> 00:47:31,599
actually

00:47:28,880 --> 00:47:32,480
following my tracker uh very well which

00:47:31,599 --> 00:47:35,200
you're also

00:47:32,480 --> 00:47:35,599
quite heavily involved in why do i only

00:47:35,200 --> 00:47:39,040
see

00:47:35,599 --> 00:47:39,040
one derivative

00:47:42,880 --> 00:47:46,480
do you mean why do we see only are you

00:47:44,720 --> 00:47:50,160
going to uh

00:47:46,480 --> 00:47:52,880
on deviant's tracker okay or well

00:47:50,160 --> 00:47:56,079
basically because nobody else did the

00:47:52,880 --> 00:47:58,960
work to provide data on

00:47:56,079 --> 00:47:58,960
the inside but

00:47:59,119 --> 00:48:02,960
actually i would like each derivative to

00:48:01,760 --> 00:48:06,800
have its own tracker

00:48:02,960 --> 00:48:09,440
and so that i can build features in

00:48:06,800 --> 00:48:13,040
tracker that would export data that we

00:48:09,440 --> 00:48:15,760
could match back in our own truck

00:48:13,040 --> 00:48:17,040
and at least kali has its own tracker

00:48:15,760 --> 00:48:20,240
instance

00:48:17,040 --> 00:48:20,240
and we use it to

00:48:20,880 --> 00:48:24,800
check compare the our package with

00:48:23,920 --> 00:48:28,559
debian so

00:48:24,800 --> 00:48:31,440
if you go to pkg.kali.org

00:48:28,559 --> 00:48:33,119
there is a link derivative page and we

00:48:31,440 --> 00:48:35,359
you will see what we have

00:48:33,119 --> 00:48:36,160
only in cali what is forked from demian

00:48:35,359 --> 00:48:38,559
and

00:48:36,160 --> 00:48:38,559
so on

00:48:41,760 --> 00:48:44,800
okay so thank you very much we have to

00:48:44,000 --> 00:48:49,839
stick to

00:48:44,800 --> 00:48:49,839

YouTube URL: https://www.youtube.com/watch?v=E-rs7OXH7Ls


