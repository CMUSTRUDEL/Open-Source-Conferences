Title: It's not LAMP: Web app packaging in Sandstorm
Publication date: 2017-12-05
Playlist: DebConf 16
Description: 
	by Asheesh Laroia

At: Debconf 16 video RSS feed
https://debconf16.debconf.org/
Room: Menzies 12
Scheduled start: 2016-07-04 14:00:00
Captions: 
	00:00:00,030 --> 00:00:06,740
okay hi everyone has the audio on the

00:00:02,040 --> 00:00:11,000
video thing great Wow hi everyone I'm

00:00:06,740 --> 00:00:12,900
surrounded by my slides this is great so

00:00:11,000 --> 00:00:14,490
thanks for coming to this talk and

00:00:12,900 --> 00:00:16,560
thanks hugely does he go for letting me

00:00:14,490 --> 00:00:18,900
borrow his laptop while mine crashes on

00:00:16,560 --> 00:00:20,279
two monitors because it uses the cool

00:00:18,900 --> 00:00:24,300
new Intel chipset that isn't fully

00:00:20,279 --> 00:00:30,029
supported so I'm going to talk about

00:00:24,300 --> 00:00:31,590
sandstorm and so I'm building sandstorm

00:00:30,029 --> 00:00:33,360
with a team of other people and it's

00:00:31,590 --> 00:00:36,440
intended to be a viable alternative to

00:00:33,360 --> 00:00:39,360
software as a service as a whole and

00:00:36,440 --> 00:00:40,950
that's a pretty big goal to compete with

00:00:39,360 --> 00:00:42,680
software the service as a category and

00:00:40,950 --> 00:00:45,809
so our first goal is to make something

00:00:42,680 --> 00:00:48,329
about as easy to use as Google Docs but

00:00:45,809 --> 00:00:51,059
much more private so this talk is both

00:00:48,329 --> 00:00:53,789
about what sandstorm is and how

00:00:51,059 --> 00:00:55,860
packaging works inside sandstorm I think

00:00:53,789 --> 00:00:57,960
that we'll have a bunch of spare time at

00:00:55,860 --> 00:01:00,030
the end and then I'll really ask people

00:00:57,960 --> 00:01:04,439
to what do you want me to dig into in

00:01:00,030 --> 00:01:06,659
more depth so when Kenton Varda and jay

00:01:04,439 --> 00:01:09,450
Duong were initially working on building

00:01:06,659 --> 00:01:12,090
sandstorm they had a few principles they

00:01:09,450 --> 00:01:14,909
were working from they noticed that many

00:01:12,090 --> 00:01:17,670
people are very comfortable using apps

00:01:14,909 --> 00:01:18,990
that run in web browsers where sandstorm

00:01:17,670 --> 00:01:20,700
is really targeting people who will

00:01:18,990 --> 00:01:22,590
probably never see a terminal in their

00:01:20,700 --> 00:01:24,180
lives and if they will maybe it'll be

00:01:22,590 --> 00:01:28,710
for a minute when a friend showed them

00:01:24,180 --> 00:01:30,090
something so sandstorm is try getting

00:01:28,710 --> 00:01:32,040
people who are used to using web apps

00:01:30,090 --> 00:01:34,350
inside web browsers

00:01:32,040 --> 00:01:35,909
we're also another principle is that

00:01:34,350 --> 00:01:37,290
people really like choosing the software

00:01:35,909 --> 00:01:39,329
they use and this is something that

00:01:37,290 --> 00:01:42,210
really struck me as as almost great

00:01:39,329 --> 00:01:43,470
about Debian which is that on one hand

00:01:42,210 --> 00:01:45,479
is a huge amount of software available

00:01:43,470 --> 00:01:46,920
in the Debian archive and on the other

00:01:45,479 --> 00:01:50,280
hand you need to be root to install any

00:01:46,920 --> 00:01:51,659
of it and this is the real conflict with

00:01:50,280 --> 00:01:52,979
the fact that I run a shell server for

00:01:51,659 --> 00:01:55,049
some friends and so whenever they want

00:01:52,979 --> 00:01:56,729
any software sure all of our software in

00:01:55,049 --> 00:01:59,280
Debian is free but they have to ask me

00:01:56,729 --> 00:02:00,719
permission to install it so we'd like to

00:01:59,280 --> 00:02:02,040
build something where people can install

00:02:00,719 --> 00:02:05,549
whatever software they want to use

00:02:02,040 --> 00:02:07,320
safely and the other the other thing

00:02:05,549 --> 00:02:09,959
that principle the sandstorm is based on

00:02:07,320 --> 00:02:11,819
is the idea that security sandboxing is

00:02:09,959 --> 00:02:16,290
an achievable goal

00:02:11,819 --> 00:02:18,030
so I'm gonna start this talk with a

00:02:16,290 --> 00:02:19,500
quick tour of sandstorm and then talk

00:02:18,030 --> 00:02:21,060
about a few more things in depth and

00:02:19,500 --> 00:02:23,900
I'll conclude with a few comparisons

00:02:21,060 --> 00:02:26,129
yeah so we'll start with this tour and

00:02:23,900 --> 00:02:29,340
I'll show you what sandstorm looks like

00:02:26,129 --> 00:02:32,400
to use it I'll show you what happened in

00:02:29,340 --> 00:02:33,870
that demo and then I'll demo how to

00:02:32,400 --> 00:02:35,730
package some software which will evolve

00:02:33,870 --> 00:02:40,139
a cessation from this machine that one I

00:02:35,730 --> 00:02:43,709
hope that works okay and then I'll talk

00:02:40,139 --> 00:02:46,230
more about the security hardening the

00:02:43,709 --> 00:02:47,819
sandstorm does and how the sandstorm

00:02:46,230 --> 00:02:51,989
community works which I think we'll have

00:02:47,819 --> 00:02:54,480
some lessons for Debian also so I said I

00:02:51,989 --> 00:02:58,319
start with a guided tour there's this

00:02:54,480 --> 00:03:00,870
service that I and arguably Clint and I

00:02:58,319 --> 00:03:03,569
think arguably someone else I think

00:03:00,870 --> 00:03:07,260
Laura or hona maintain called storm

00:03:03,569 --> 00:03:09,329
Debby net and storm that David net is a

00:03:07,260 --> 00:03:11,970
sandstorm installed that is for the

00:03:09,329 --> 00:03:13,590
Debian community to use and I'm gonna

00:03:11,970 --> 00:03:15,510
demo it to you what it's like to create

00:03:13,590 --> 00:03:17,310
a new document they're using etherpad

00:03:15,510 --> 00:03:20,760
actually how many of you have used

00:03:17,310 --> 00:03:22,379
etherpad ever okay cool quite a few

00:03:20,760 --> 00:03:24,810
so you those like you who have will

00:03:22,379 --> 00:03:28,549
notice some differences when I do it on

00:03:24,810 --> 00:03:28,549
storm so let me show you that

00:03:34,190 --> 00:03:40,230
so this is the dashboard on da onion

00:03:38,970 --> 00:03:41,520
sandstorm is showing me a list of things

00:03:40,230 --> 00:03:43,830
I've already made but I said I would

00:03:41,520 --> 00:03:46,100
make something new so I'll click over

00:03:43,830 --> 00:03:50,630
here and click over it etherpad

00:03:46,100 --> 00:03:52,620
and then I'll click create new pad and

00:03:50,630 --> 00:03:54,840
it falls as well

00:03:52,620 --> 00:03:57,920
there will be an ether pad document

00:03:54,840 --> 00:03:57,920
reading for us waiting for us

00:04:03,190 --> 00:04:08,620
so other than the speed this is like

00:04:06,010 --> 00:04:10,450
reasonably easy to use as a side note

00:04:08,620 --> 00:04:13,270
storm is hosted in the US so I get to

00:04:10,450 --> 00:04:15,280
take lecture along to get all the dinner

00:04:13,270 --> 00:04:17,680
back and forth anyway Oh

00:04:15,280 --> 00:04:18,970
other than Z goes script block other

00:04:17,680 --> 00:04:20,470
than screen as he goes no script because

00:04:18,970 --> 00:04:25,080
worked great

00:04:20,470 --> 00:04:31,390
actually maybe all well maybe I can

00:04:25,080 --> 00:04:39,190
communicate with the script blocker okay

00:04:31,390 --> 00:04:42,960
I'll be careful sure great great so now

00:04:39,190 --> 00:04:42,960
all I'll reload and hope it'll work okay

00:04:53,730 --> 00:04:59,900
so there you go super easy okay

00:05:06,290 --> 00:05:13,730
so supposedly that was pretty easy I

00:05:08,300 --> 00:05:19,970
made it ether pad document I did have to

00:05:13,730 --> 00:05:23,270
do it by by Wow

00:05:19,970 --> 00:05:25,130
so giant by clicking this create new pad

00:05:23,270 --> 00:05:26,150
button here and so I want to talk a

00:05:25,130 --> 00:05:29,660
little bit about what that did

00:05:26,150 --> 00:05:32,270
technically so when I click that plus

00:05:29,660 --> 00:05:35,450
button in fast form it creates a new

00:05:32,270 --> 00:05:37,580
grain of the app and everything you

00:05:35,450 --> 00:05:42,280
create in sandstorm a document or an

00:05:37,580 --> 00:05:45,800
email box or a chat system is a green

00:05:42,280 --> 00:05:48,440
and now I've used this term without

00:05:45,800 --> 00:05:50,480
defining it so I'll be really concrete

00:05:48,440 --> 00:05:52,280
when you have a when you went in I

00:05:50,480 --> 00:05:53,900
clicked that plus button on the server

00:05:52,280 --> 00:05:55,760
it launched a new process for either pad

00:05:53,900 --> 00:05:57,470
either pad is written in nodejs so

00:05:55,760 --> 00:06:01,370
there's now a new no js' process running

00:05:57,470 --> 00:06:03,620
on the server side that process runs in

00:06:01,370 --> 00:06:05,380
a context where it can only see the code

00:06:03,620 --> 00:06:08,770
in the sandstorm package for ether pad

00:06:05,380 --> 00:06:11,090
and that's mounted read-only and then

00:06:08,770 --> 00:06:13,070
unique to every grain is a writable

00:06:11,090 --> 00:06:14,720
flash bar directory and also a

00:06:13,070 --> 00:06:18,470
disposable slash temp that gets cleared

00:06:14,720 --> 00:06:20,120
whenever stuff exits and so the ether

00:06:18,470 --> 00:06:21,530
pad code wakes up in this world we're

00:06:20,120 --> 00:06:23,780
the only place that can write to a slash

00:06:21,530 --> 00:06:25,850
bar and it notices it's empty so it goes

00:06:23,780 --> 00:06:27,920
and makes a new database and slash bar

00:06:25,850 --> 00:06:30,020
and it makes a single document there and

00:06:27,920 --> 00:06:32,840
then it started responding to HTTP

00:06:30,020 --> 00:06:35,800
requests and so each time I click plus

00:06:32,840 --> 00:06:38,300
it's in effect and you etherpad install

00:06:35,800 --> 00:06:43,160
that happens to support then you

00:06:38,300 --> 00:06:45,440
document and I mentioned HTTP requests

00:06:43,160 --> 00:06:54,100
all the HTTP requests between the

00:06:45,440 --> 00:06:58,430
between this this browser window and

00:06:54,100 --> 00:06:59,750
this grain here are mediated by

00:06:58,430 --> 00:07:03,290
sandstorm they don't actually go

00:06:59,750 --> 00:07:04,550
straight to the app so by putting

00:07:03,290 --> 00:07:07,070
sandstorm in the middle it means a

00:07:04,550 --> 00:07:08,990
sandstorm can do access control if for

00:07:07,070 --> 00:07:10,490
the app and just to demonstrate that I'm

00:07:08,990 --> 00:07:12,670
going to go back to this etherpad tab

00:07:10,490 --> 00:07:14,990
here

00:07:12,670 --> 00:07:17,080
because you can't see the URL so maybe

00:07:14,990 --> 00:07:20,120
I'll change that

00:07:17,080 --> 00:07:22,610
so the URL is like storm Debian net

00:07:20,120 --> 00:07:25,400
slash grain slash something a brother

00:07:22,610 --> 00:07:29,960
and if I opened that in a private

00:07:25,400 --> 00:07:32,389
browsing window uh which I'll move over

00:07:29,960 --> 00:07:34,309
to your screen now if I open that in a

00:07:32,389 --> 00:07:36,050
private browsing window Santorum will

00:07:34,309 --> 00:07:38,270
tell me use it on the permission to

00:07:36,050 --> 00:07:40,969
access this grain please sign in to

00:07:38,270 --> 00:07:42,169
request access so this is really

00:07:40,969 --> 00:07:44,029
highlighting the fact that sandstorm

00:07:42,169 --> 00:07:45,499
sits in the middle of all the HTTP

00:07:44,029 --> 00:07:47,650
conversations between the user and the

00:07:45,499 --> 00:07:47,650
app

00:07:55,729 --> 00:08:00,680
and so this allows us to do something

00:07:59,330 --> 00:08:02,779
interesting in Sandstrom it means that

00:08:00,680 --> 00:08:04,789
when the app receives any HTTP requests

00:08:02,779 --> 00:08:07,180
at all it can know that a CP request has

00:08:04,789 --> 00:08:09,289
already been accessed checked so

00:08:07,180 --> 00:08:10,729
Sandstrom can add a couple of headers to

00:08:09,289 --> 00:08:12,349
that request indicating what permissions

00:08:10,729 --> 00:08:14,719
the user has and so this is a couple of

00:08:12,349 --> 00:08:17,240
those headers sandstorm sends the name

00:08:14,719 --> 00:08:19,939
my name over and it sends over the list

00:08:17,240 --> 00:08:22,550
of permissions that I have and then any

00:08:19,939 --> 00:08:27,529
other headers that the browser sends to

00:08:22,550 --> 00:08:29,930
the server so that's sort of the very

00:08:27,529 --> 00:08:33,529
broad overview of how HTTP requests work

00:08:29,930 --> 00:08:35,690
and what it means to make grain I talked

00:08:33,529 --> 00:08:38,599
about access control so let me zoom in a

00:08:35,690 --> 00:08:41,930
little bit on that so and to do that

00:08:38,599 --> 00:08:44,440
I'll do another demo immunity is my

00:08:41,930 --> 00:08:46,610
other laptop is there is anyone here

00:08:44,440 --> 00:08:50,350
willing to participate in a demo using

00:08:46,610 --> 00:08:54,230
your own laptop and on the Menzies - 12

00:08:50,350 --> 00:08:59,209
IRC channel okay great somebody in the

00:08:54,230 --> 00:09:00,949
back so I'm going to share that pad with

00:08:59,209 --> 00:09:03,110
you it's not important that I'm using my

00:09:00,949 --> 00:09:13,519
other machine it's just that I'm more

00:09:03,110 --> 00:09:15,350
comfortable with it okay so if I click

00:09:13,519 --> 00:09:18,740
share access here I can make a shareable

00:09:15,350 --> 00:09:20,300
link that has edit permissions which for

00:09:18,740 --> 00:09:27,860
my convenience I'll do for my laptop

00:09:20,300 --> 00:09:31,300
here and it's DEFCON 16 - Mandi is - 12

00:09:27,860 --> 00:09:31,300
was that right great

00:09:39,370 --> 00:09:42,370
yeah

00:09:45,720 --> 00:09:48,779
thank you

00:09:53,000 --> 00:10:01,870
okay so there's at least two people who

00:09:54,920 --> 00:10:03,560
volunteered in IRC to to watch that

00:10:01,870 --> 00:10:08,149
pardon me

00:10:03,560 --> 00:10:09,560
well my demo stuff breaks okay so I'm

00:10:08,149 --> 00:10:11,959
gonna reload this document you all

00:10:09,560 --> 00:10:14,470
should write things to make my demo be

00:10:11,959 --> 00:10:14,470
more interesting

00:10:40,360 --> 00:10:50,649
yeah hello great so so actually do me a

00:10:48,309 --> 00:11:00,699
favor just like hold down a key like a

00:10:50,649 --> 00:11:07,920
or enter or something great I'm going to

00:11:00,699 --> 00:11:10,329
revoke your Equis now thanks bye yes

00:11:07,920 --> 00:11:15,610
okay so now you can't write anything

00:11:10,329 --> 00:11:20,730
more and do you do you agree are you

00:11:15,610 --> 00:11:23,709
able to write anything more yeah so the

00:11:20,730 --> 00:11:26,110
the point here is that sandstorm on the

00:11:23,709 --> 00:11:28,299
outside gives me the ability to set

00:11:26,110 --> 00:11:31,689
permissions on the sharing links and the

00:11:28,299 --> 00:11:35,319
people I've shared with which are now

00:11:31,689 --> 00:11:38,589
all revoked by this consistent interface

00:11:35,319 --> 00:11:47,350
outside the app and so what that the two

00:11:38,589 --> 00:11:49,029
concepts we really saw there are the two

00:11:47,350 --> 00:11:50,439
concepts we really saw are sharing links

00:11:49,029 --> 00:11:53,470
and the idea the permission terrorists

00:11:50,439 --> 00:11:56,290
can change so his ability to access that

00:11:53,470 --> 00:11:57,819
app really is mediated by sandstorm so

00:11:56,290 --> 00:12:00,279
that's where what it's like to use

00:11:57,819 --> 00:12:02,379
sandstorm I'm gonna talk now about

00:12:00,279 --> 00:12:06,660
packaging maybe before I do any

00:12:02,379 --> 00:12:08,769
questions so far about what you've seen

00:12:06,660 --> 00:12:13,360
ok great

00:12:08,769 --> 00:12:15,160
so in sandstorm there's a we have stance

00:12:13,360 --> 00:12:16,749
for me the concept of the SPK file which

00:12:15,160 --> 00:12:18,579
is a binary package it's a list of file

00:12:16,749 --> 00:12:20,980
then to metadata it's pretty similar to

00:12:18,579 --> 00:12:22,419
about deb binary package in that it is a

00:12:20,980 --> 00:12:26,290
list of files and their contents and

00:12:22,419 --> 00:12:30,279
some metadata so in our case the

00:12:26,290 --> 00:12:33,059
metadata lives in a configuration thing

00:12:30,279 --> 00:12:36,129
called sandstorm package def cap and p

00:12:33,059 --> 00:12:38,769
there is one dis distinction between

00:12:36,129 --> 00:12:41,169
binary SP caves and binary debs which is

00:12:38,769 --> 00:12:43,839
that binary SP k's are always signed and

00:12:41,169 --> 00:12:47,769
they're signed using an app key that is

00:12:43,839 --> 00:12:49,089
the app ID so whoever holds the app key

00:12:47,769 --> 00:12:52,929
can you show updates for that package

00:12:49,089 --> 00:12:53,900
and if you don't have if you lose that

00:12:52,929 --> 00:12:57,650
at p your

00:12:53,900 --> 00:12:59,090
kinda screwed although we have actually

00:12:57,650 --> 00:13:00,650
like whitelisted a couple of key

00:12:59,090 --> 00:13:02,780
transitions in the sandstrom core for

00:13:00,650 --> 00:13:04,160
people who've already lost their lost

00:13:02,780 --> 00:13:10,430
their keys and trusted us to replace

00:13:04,160 --> 00:13:12,590
them and yeah and so so this is

00:13:10,430 --> 00:13:14,750
different from dev of course where the

00:13:12,590 --> 00:13:19,250
signatures are done at the archive level

00:13:14,750 --> 00:13:22,700
not at the dev level so to make a

00:13:19,250 --> 00:13:26,240
sandstorm package file the the most

00:13:22,700 --> 00:13:28,250
wrong way to do it is to take this sense

00:13:26,240 --> 00:13:30,560
form package left cap and P and pass it

00:13:28,250 --> 00:13:32,150
to the SPK pack command and that will

00:13:30,560 --> 00:13:35,390
generate you one of these spk files

00:13:32,150 --> 00:13:37,510
based on the list of files referred to

00:13:35,390 --> 00:13:40,820
by sandstorm package to f cap and p and

00:13:37,510 --> 00:13:42,860
the and the metadata inside the package

00:13:40,820 --> 00:13:45,560
if you do it that way it'll definitely

00:13:42,860 --> 00:13:47,150
work but it will slurp up whatever files

00:13:45,560 --> 00:13:48,980
of that file name exist on your system

00:13:47,150 --> 00:13:50,540
which may or may not be what you want

00:13:48,980 --> 00:13:52,760
maybe if you're collaborating with

00:13:50,540 --> 00:13:53,960
somebody else on a package the path to

00:13:52,760 --> 00:13:59,690
something is different on theirs

00:13:53,960 --> 00:14:01,970
then on yours so also to do it this way

00:13:59,690 --> 00:14:04,100
involves no concept of source packages

00:14:01,970 --> 00:14:05,990
at all this how things were until a year

00:14:04,100 --> 00:14:07,790
and a half ago when I started at

00:14:05,990 --> 00:14:09,440
sandstorm Andrew Fisher and I work

00:14:07,790 --> 00:14:12,550
together to make a content with source

00:14:09,440 --> 00:14:17,360
packages using the tool big R and s PK

00:14:12,550 --> 00:14:20,050
which I will now should I try a demo

00:14:17,360 --> 00:14:23,180
let's see

00:14:20,050 --> 00:14:27,700
you don't your federal you do that's

00:14:23,180 --> 00:14:30,770
fine I'll a citation to my machine great

00:14:27,700 --> 00:14:33,470
so before I do the demo I guess let me

00:14:30,770 --> 00:14:34,520
just talk about the the concepts of what

00:14:33,470 --> 00:14:37,250
it is did you make a sign for a package

00:14:34,520 --> 00:14:40,670
for the vagrant spk you first declare

00:14:37,250 --> 00:14:42,800
what what sort of platform stack of web

00:14:40,670 --> 00:14:47,720
app uses be that a PHP based thing like

00:14:42,800 --> 00:14:50,900
limp linux nginx my sequel PHP or Python

00:14:47,720 --> 00:14:52,580
stuff or meteor or nodejs

00:14:50,900 --> 00:14:53,690
and there's a few other one some of

00:14:52,580 --> 00:14:55,190
these are contributed by the community

00:14:53,690 --> 00:14:57,050
some of these are maintained by us the

00:14:55,190 --> 00:14:58,460
sandstrom core team so you define you

00:14:57,050 --> 00:15:04,070
declare what platform stack the package

00:14:58,460 --> 00:15:05,930
uses you make a new entire Linux virtual

00:15:04,070 --> 00:15:08,329
machine that you will run the web app

00:15:05,930 --> 00:15:10,999
inside

00:15:08,329 --> 00:15:12,439
and the configuration files for the

00:15:10,999 --> 00:15:15,290
virtual machine are set up in the setup

00:15:12,439 --> 00:15:18,829
VM phase so VM up will start that

00:15:15,290 --> 00:15:20,480
virtual machine they're gonna speak a in

00:15:18,829 --> 00:15:21,709
it will make the sandstorm package that

00:15:20,480 --> 00:15:29,480
file that contains the name of the

00:15:21,709 --> 00:15:32,119
package and and I guess and it'll also

00:15:29,480 --> 00:15:35,600
assign the unique key that will be at

00:15:32,119 --> 00:15:37,699
update key forever and then you can run

00:15:35,600 --> 00:15:39,980
the app like in a development view of

00:15:37,699 --> 00:15:45,410
sandstorm where you can modify the app

00:15:39,980 --> 00:15:47,989
code and not fixed yet and click around

00:15:45,410 --> 00:15:49,939
during this process we actually trace

00:15:47,989 --> 00:15:51,860
the app to find out what files it uses

00:15:49,939 --> 00:15:53,720
because we have this this problem where

00:15:51,860 --> 00:15:54,920
on one hand we want the app to bundle

00:15:53,720 --> 00:15:56,179
all the dependencies but on the other

00:15:54,920 --> 00:15:59,959
hand we don't want every app package to

00:15:56,179 --> 00:16:03,350
be 2 gigabytes so when the app is

00:15:59,959 --> 00:16:05,059
running in this def mode it we've

00:16:03,350 --> 00:16:06,589
mounted a fused filesystem overlay on

00:16:05,059 --> 00:16:09,379
top of the file system and any file

00:16:06,589 --> 00:16:10,939
access for the app makes we leave we

00:16:09,379 --> 00:16:13,100
leave a note to ourselves to add that

00:16:10,939 --> 00:16:15,470
file to the sandstorm files that list

00:16:13,100 --> 00:16:18,230
which has this upside of small packages

00:16:15,470 --> 00:16:19,669
and this downside of if you didn't click

00:16:18,230 --> 00:16:20,959
on the right part of the UI to import

00:16:19,669 --> 00:16:22,610
the right Python module you might never

00:16:20,959 --> 00:16:25,579
get it and then when your users do it'll

00:16:22,610 --> 00:16:26,869
break so there is a provision for white

00:16:25,579 --> 00:16:29,649
listing directories to include certain

00:16:26,869 --> 00:16:32,209
whole directories at the package request

00:16:29,649 --> 00:16:34,970
and then you run pack and that makes a

00:16:32,209 --> 00:16:37,489
sense for a package file so maybe I'll

00:16:34,970 --> 00:16:44,119
risk the demo gods after I'm done with

00:16:37,489 --> 00:16:46,249
the slides and I'll maybe I'll just ask

00:16:44,119 --> 00:16:48,860
you if you have any questions about this

00:16:46,249 --> 00:16:56,749
process if I there's any steps I should

00:16:48,860 --> 00:16:58,669
zoom in on yeah oh and if the question

00:16:56,749 --> 00:16:59,589
is how do you handle GPL I'll let me get

00:16:58,669 --> 00:17:01,999
to that later

00:16:59,589 --> 00:17:04,220
no it's just about the platform stack

00:17:01,999 --> 00:17:07,220
you mentioned our list of samples

00:17:04,220 --> 00:17:11,809
do you have Ruby on Rails support among

00:17:07,220 --> 00:17:14,569
the list no but we almost do we have

00:17:11,809 --> 00:17:19,939
like a wiki page that says how you would

00:17:14,569 --> 00:17:21,110
do it but there isn't a premade one and

00:17:19,939 --> 00:17:25,670
there's one more in the back

00:17:21,110 --> 00:17:29,210
oh you know one thing I forgot to

00:17:25,670 --> 00:17:31,520
mention is that the setup VM in the VM

00:17:29,210 --> 00:17:33,890
up step so the setup vm step will and

00:17:31,520 --> 00:17:36,350
I'll get to your question a second the

00:17:33,890 --> 00:17:39,260
setup vm step will write a bunch of

00:17:36,350 --> 00:17:40,880
shell scripts out that are the platform

00:17:39,260 --> 00:17:43,549
stack and those shell scripts do things

00:17:40,880 --> 00:17:45,260
like sudo apt-get install the things

00:17:43,549 --> 00:17:47,750
that your app will probably need based

00:17:45,260 --> 00:17:54,200
on what we think based on the platform

00:17:47,750 --> 00:17:58,520
stack name so anyway that's defini been

00:17:54,200 --> 00:18:00,799
yeah so I was kind of concerned about

00:17:58,520 --> 00:18:09,919
the way you discover what files need to

00:18:00,799 --> 00:18:11,980
be bundled I mean I'm dizzy does that

00:18:09,919 --> 00:18:14,840
list get saved so that you can then

00:18:11,980 --> 00:18:17,600
really produce this build using their

00:18:14,840 --> 00:18:25,160
the next time yeah do you can use script

00:18:17,600 --> 00:18:26,990
to that stage so that you have scripts

00:18:25,160 --> 00:18:29,320
to exercise whatever parts of the app

00:18:26,990 --> 00:18:31,970
hopefully all parts of the app and then

00:18:29,320 --> 00:18:34,870
generate that list so the first

00:18:31,970 --> 00:18:38,390
questions the list does get saved

00:18:34,870 --> 00:18:40,340
there's a it outputs a file sandstorm -

00:18:38,390 --> 00:18:42,020
files that list which you're supposed to

00:18:40,340 --> 00:18:43,520
get add into your package is really

00:18:42,020 --> 00:18:48,110
conceptually I consider a part of the

00:18:43,520 --> 00:18:52,370
source package and as for scripting it

00:18:48,110 --> 00:18:54,980
there's there's no there's no especially

00:18:52,370 --> 00:18:56,960
sandstorm a way to script it but you

00:18:54,980 --> 00:19:01,160
could if you tried hard how's that

00:18:56,960 --> 00:19:03,049
foreign know there are a few platform

00:19:01,160 --> 00:19:04,460
stacks where the exorcising stuff

00:19:03,049 --> 00:19:06,380
doesn't matter at all I think there's

00:19:04,460 --> 00:19:09,140
just one actually which is meteor meteor

00:19:06,380 --> 00:19:12,200
half meteor is this nodejs based web

00:19:09,140 --> 00:19:14,120
framework and it has this feature that

00:19:12,200 --> 00:19:15,710
it can output a list of all the files

00:19:14,120 --> 00:19:20,360
the app needs because it controls the

00:19:15,710 --> 00:19:23,150
entire environment of the app so for

00:19:20,360 --> 00:19:25,040
that one we won't break it as for every

00:19:23,150 --> 00:19:27,140
other app we probably won't there's

00:19:25,040 --> 00:19:28,970
certainly been like a point releases

00:19:27,140 --> 00:19:31,070
people have issued that are forgetting

00:19:28,970 --> 00:19:34,000
to include certain files because they

00:19:31,070 --> 00:19:34,000
didn't exercise them and

00:19:34,010 --> 00:19:37,640
in addition to that auto-generated

00:19:35,929 --> 00:19:40,190
sandstorm files list you can add things

00:19:37,640 --> 00:19:42,890
to and always include line in the Senate

00:19:40,190 --> 00:19:44,090
or packaged app which will make sure

00:19:42,890 --> 00:19:48,260
it's always included whether or not it's

00:19:44,090 --> 00:19:50,140
in the public and there was a sorry

00:19:48,260 --> 00:19:52,970
there was a final technical question

00:19:50,140 --> 00:19:54,980
about the bundling which was I was

00:19:52,970 --> 00:19:58,130
surprised that you would use fuse as a

00:19:54,980 --> 00:20:00,620
layer there and I thought if a note if I

00:19:58,130 --> 00:20:03,140
might be more efficient but I think it

00:20:00,620 --> 00:20:04,610
works it works yeah I think there was

00:20:03,140 --> 00:20:13,220
some race condition problems if I know

00:20:04,610 --> 00:20:17,510
to five and I'm forgetting my question

00:20:13,220 --> 00:20:19,549
relates to updates great you've got your

00:20:17,510 --> 00:20:23,600
sandstone platform and you've chosen

00:20:19,549 --> 00:20:25,909
some apps how how when when the packages

00:20:23,600 --> 00:20:28,490
release an updated version of etherpad

00:20:25,909 --> 00:20:32,560
order how does that come down to my

00:20:28,490 --> 00:20:34,270
sandstorm server how do I get that great

00:20:32,560 --> 00:20:41,510
[Music]

00:20:34,270 --> 00:20:44,510
I'll just answer that now I think so

00:20:41,510 --> 00:20:46,880
so a short answer is there's this

00:20:44,510 --> 00:20:48,950
there's this service that sandstorm the

00:20:46,880 --> 00:20:49,279
company runs called app start sandstorm

00:20:48,950 --> 00:20:52,399
that IO

00:20:49,279 --> 00:20:53,870
and there's a vigorous PKK bear called

00:20:52,399 --> 00:20:57,730
upload which uploads the more recent

00:20:53,870 --> 00:21:01,159
version of your sbk file to that and

00:20:57,730 --> 00:21:03,140
every sandstorm server checks a JSON

00:21:01,159 --> 00:21:05,690
dump from that app store sense from bio

00:21:03,140 --> 00:21:07,760
daily and if there isn't you update 20

00:21:05,690 --> 00:21:09,860
app you have installed then it shows you

00:21:07,760 --> 00:21:11,029
with a notification in a bell icon that

00:21:09,860 --> 00:21:13,010
when you click that it shows you which

00:21:11,029 --> 00:21:15,140
apps have updates then you click the

00:21:13,010 --> 00:21:19,190
install updates button and then you have

00:21:15,140 --> 00:21:22,100
the update and code wise this is

00:21:19,190 --> 00:21:23,480
technically easy because the app runs in

00:21:22,100 --> 00:21:26,480
a file system namespace for the only

00:21:23,480 --> 00:21:29,510
cook with the only files that can

00:21:26,480 --> 00:21:30,770
perceive are the app code itself so

00:21:29,510 --> 00:21:35,210
there's no dependency problem to work

00:21:30,770 --> 00:21:37,510
out that on that note does that what

00:21:35,210 --> 00:21:40,640
happens to running grains that alright

00:21:37,510 --> 00:21:42,770
when an update is installed does it do

00:21:40,640 --> 00:21:44,750
you have to reinitialize them or what

00:21:42,770 --> 00:21:46,170
happens to those I mean in general if

00:21:44,750 --> 00:21:51,420
the grain already exists

00:21:46,170 --> 00:21:53,790
I mean there's two different answers

00:21:51,420 --> 00:21:55,680
maybe depending on what you mean if you

00:21:53,790 --> 00:22:00,750
mean if you have like this thing that I

00:21:55,680 --> 00:22:05,040
made over here if I were to install an

00:22:00,750 --> 00:22:08,000
ether pad update then the processes for

00:22:05,040 --> 00:22:10,320
this ether pad grain would get stopped

00:22:08,000 --> 00:22:12,000
the code for the new version of ether

00:22:10,320 --> 00:22:13,260
pad would start it would read the data

00:22:12,000 --> 00:22:14,460
out of slash bar and so it would

00:22:13,260 --> 00:22:18,060
continue to provide the same interface

00:22:14,460 --> 00:22:19,320
through be a quick flip and as for if

00:22:18,060 --> 00:22:21,030
that would apply to greens and I

00:22:19,320 --> 00:22:22,980
literally have open right now I actually

00:22:21,030 --> 00:22:24,210
don't know off the top of my head but

00:22:22,980 --> 00:22:34,950
certainly when the green shuts down and

00:22:24,210 --> 00:22:37,020
we wake up with the new code so so I'll

00:22:34,950 --> 00:22:38,790
avoid risking risking harm even

00:22:37,020 --> 00:22:42,180
demagogues again right now and I'll just

00:22:38,790 --> 00:22:43,500
continue past this one thing I want to

00:22:42,180 --> 00:22:46,100
point out isn't me that every sandstorm

00:22:43,500 --> 00:22:48,240
package is a Debian Drive distro

00:22:46,100 --> 00:22:53,190
etherpad on sales promise that every

00:22:48,240 --> 00:22:55,140
Drive distro all the other 57 apps are I

00:22:53,190 --> 00:22:57,270
think I except for the ones that chose

00:22:55,140 --> 00:22:58,770
to base their to bundle files from not

00:22:57,270 --> 00:23:02,850
Debian in which case they bundled it

00:22:58,770 --> 00:23:04,140
from some other Linux distro so exactly

00:23:02,850 --> 00:23:05,850
what relation if they should have to

00:23:04,140 --> 00:23:07,290
Davian isn't quite clear

00:23:05,850 --> 00:23:09,630
also these packages are kind of

00:23:07,290 --> 00:23:11,760
enjoyably small the etherpad package is

00:23:09,630 --> 00:23:15,600
18 megabytes so that might be the

00:23:11,760 --> 00:23:17,130
smallest useful Debian I don't know are

00:23:15,600 --> 00:23:21,990
there smaller or useful Debian drive

00:23:17,130 --> 00:23:25,290
distro as people know so I think I think

00:23:21,990 --> 00:23:30,000
I think that's kind of cool what do you

00:23:25,290 --> 00:23:31,320
think yes and I'm treating with the 18

00:23:30,000 --> 00:23:33,240
megabyte number because it's compressed

00:23:31,320 --> 00:23:35,250
I think with lzma so it's like mega

00:23:33,240 --> 00:23:38,190
compressed so you probably have like 60

00:23:35,250 --> 00:23:39,870
Meg's of headroom but ah but another

00:23:38,190 --> 00:23:42,300
fascinating thing is that people really

00:23:39,870 --> 00:23:45,110
do use this vagrant SDK tool on Mac OS

00:23:42,300 --> 00:23:51,180
and Windows not just on Linux systems

00:23:45,110 --> 00:23:54,420
which which if I'm to speak about Debian

00:23:51,180 --> 00:23:57,090
for a second there's this program called

00:23:54,420 --> 00:24:00,060
fpm I think are called effing package

00:23:57,090 --> 00:24:01,920
management and it exists

00:24:00,060 --> 00:24:03,450
to take like directories of files and

00:24:01,920 --> 00:24:06,360
jam them into you whatever packaging

00:24:03,450 --> 00:24:11,190
format you wish and as far as I can tell

00:24:06,360 --> 00:24:12,480
it exists because the it exists because

00:24:11,190 --> 00:24:15,180
people aren't very familiar with the

00:24:12,480 --> 00:24:16,080
Debian packaging tools and in part

00:24:15,180 --> 00:24:17,280
they're not very familiar with it having

00:24:16,080 --> 00:24:20,670
your packing tools because they don't

00:24:17,280 --> 00:24:22,800
run Debian they run Mac OS or Windows so

00:24:20,670 --> 00:24:25,410
it and we it's by thing is pretty cool

00:24:22,800 --> 00:24:26,700
that we can have all these people on

00:24:25,410 --> 00:24:29,850
different platforms making sense for

00:24:26,700 --> 00:24:31,970
maps another thing though is that some

00:24:29,850 --> 00:24:34,500
porting of the app can be required so

00:24:31,970 --> 00:24:35,850
apps need their login pages removed

00:24:34,500 --> 00:24:37,470
because when the user shows up to a

00:24:35,850 --> 00:24:40,920
grain of sand strong they're already

00:24:37,470 --> 00:24:42,270
logged in and an ether pad something

00:24:40,920 --> 00:24:49,890
needed to be done so it would only ever

00:24:42,270 --> 00:24:51,840
create one pad per grain so it's not

00:24:49,890 --> 00:24:53,700
it's not the case that you can take any

00:24:51,840 --> 00:24:55,860
random off-the-shelf bit of web app and

00:24:53,700 --> 00:24:57,720
do this we're tracing thing and put it

00:24:55,860 --> 00:24:59,700
into a bundle and run it successfully

00:24:57,720 --> 00:25:01,620
you might need to make some changes

00:24:59,700 --> 00:25:02,700
relevant design strong oh yeah and you

00:25:01,620 --> 00:25:05,660
might need to look at those headers like

00:25:02,700 --> 00:25:09,780
I mentioned the X a strong user name so

00:25:05,660 --> 00:25:11,670
I guess is Antonio Terrell at that pump

00:25:09,780 --> 00:25:13,170
this year by the way anyway I want to

00:25:11,670 --> 00:25:15,240
say thanks to him for packaging vagrant

00:25:13,170 --> 00:25:19,860
in Debian I use it all the time from his

00:25:15,240 --> 00:25:21,300
packages so with those packaging steps

00:25:19,860 --> 00:25:23,630
talked about briefly I want to talk

00:25:21,300 --> 00:25:26,160
about the central back-end and security

00:25:23,630 --> 00:25:28,380
we have this very strange steaming bowl

00:25:26,160 --> 00:25:31,140
that users can run arbitrary code safely

00:25:28,380 --> 00:25:33,420
and like nowadays the phrase arbitrary

00:25:31,140 --> 00:25:36,450
code sounds like a security issue like

00:25:33,420 --> 00:25:38,010
oh no arbitrary code execution but when

00:25:36,450 --> 00:25:39,960
I run a shell server for my friend that

00:25:38,010 --> 00:25:42,030
it runs Debian the whole point is

00:25:39,960 --> 00:25:43,320
arbitrary code execution so yeah the

00:25:42,030 --> 00:25:45,030
idea that we have this crazy sized

00:25:43,320 --> 00:25:47,040
teaming goal shouldn't be that crazy I

00:25:45,030 --> 00:25:49,110
think by comparison here's the

00:25:47,040 --> 00:25:53,550
translation of that idea into a web app

00:25:49,110 --> 00:25:54,900
space and to do that though we do need

00:25:53,550 --> 00:25:56,790
to make sure this arbitrary code can be

00:25:54,900 --> 00:25:58,230
run safely so we do a bunch of

00:25:56,790 --> 00:26:00,360
server-side sandboxing things in the

00:25:58,230 --> 00:26:02,040
green to strawberry and I mentioned this

00:26:00,360 --> 00:26:03,900
file system sandbox sorry the file

00:26:02,040 --> 00:26:05,520
system namespace is where only the code

00:26:03,900 --> 00:26:08,970
inside the app package is available plus

00:26:05,520 --> 00:26:12,510
var and temp we use pit namespaces and

00:26:08,970 --> 00:26:13,840
Linux so that if somebody in the grain

00:26:12,510 --> 00:26:15,340
runs like PS

00:26:13,840 --> 00:26:19,240
they would only see stuff inside the

00:26:15,340 --> 00:26:21,490
grain we use this the UTS namespaces

00:26:19,240 --> 00:26:22,990
thing so that the green always runs in

00:26:21,490 --> 00:26:27,669
an environment where it's hostname just

00:26:22,990 --> 00:26:29,799
like I think sandbox hostname and then

00:26:27,669 --> 00:26:32,200
there's a system five RPC thing which I

00:26:29,799 --> 00:26:34,510
actually don't think matters for us but

00:26:32,200 --> 00:26:36,279
we do it anyway we do some more extreme

00:26:34,510 --> 00:26:39,429
things first of all there's no /dev and

00:26:36,279 --> 00:26:41,470
no /proc inside the grain which is kind

00:26:39,429 --> 00:26:43,450
of cruel but it has the upside that

00:26:41,470 --> 00:26:45,970
kernel vulnerability is that leverage

00:26:43,450 --> 00:26:48,190
proc or dev can't be exploited well

00:26:45,970 --> 00:26:50,080
there's nothing exciting in dev you can

00:26:48,190 --> 00:26:51,429
make no but if you want actually you

00:26:50,080 --> 00:26:52,630
might not be hall able to calm a code

00:26:51,429 --> 00:26:53,710
unless you're you ready zero so I guess

00:26:52,630 --> 00:26:55,450
you can't make that whatever you want

00:26:53,710 --> 00:26:59,710
okay great so it's good to be don't

00:26:55,450 --> 00:27:04,500
allow access to flash dev if we have a

00:26:59,710 --> 00:27:07,029
static cluster with a yeah we'd like

00:27:04,500 --> 00:27:09,039
ethanol and dev random which is a

00:27:07,029 --> 00:27:15,039
symlink to debut random and debut random

00:27:09,039 --> 00:27:17,130
which is the real thing uh yeah we have

00:27:15,039 --> 00:27:20,080
a proxy pew info which is hard-coded

00:27:17,130 --> 00:27:22,950
from the App packagers machine which is

00:27:20,080 --> 00:27:22,950
not perfect

00:27:23,850 --> 00:27:30,010
yeah I need to oh yeah I freaking get

00:27:28,390 --> 00:27:31,090
better microphone in the green and all

00:27:30,010 --> 00:27:31,720
the other stuff let me just double check

00:27:31,090 --> 00:27:38,950
that actually

00:27:31,720 --> 00:27:40,779
oh no I take it back we do map in the

00:27:38,950 --> 00:27:47,950
real proxy for you okay right I just

00:27:40,779 --> 00:27:49,330
read the source yeah ah yeah otherwise

00:27:47,950 --> 00:27:52,870
you'd have a legal structure at all over

00:27:49,330 --> 00:27:54,549
the place if you were unlucky yeah we

00:27:52,870 --> 00:27:55,840
also don't have any real network devices

00:27:54,549 --> 00:27:57,130
we just have one booth back device

00:27:55,840 --> 00:27:59,799
inside the name inside the network

00:27:57,130 --> 00:28:01,750
namespace for the app and we use user

00:27:59,799 --> 00:28:04,960
name spaces so they if there's only UID

00:28:01,750 --> 00:28:06,669
1000 inside the green sandbox also we

00:28:04,960 --> 00:28:08,799
use a kernel feature called no new prigs

00:28:06,669 --> 00:28:11,070
so that even if there were somehow set

00:28:08,799 --> 00:28:15,120
UID across process inside the sandbox

00:28:11,070 --> 00:28:19,750
executing it would not result in UID 0

00:28:15,120 --> 00:28:22,149
running program and we use set comm BPF

00:28:19,750 --> 00:28:24,840
to limit what this calls what Colonel

00:28:22,149 --> 00:28:27,280
says calls that the app can do so

00:28:24,840 --> 00:28:31,030
there's things like

00:28:27,280 --> 00:28:33,100
access to 32-bit instruction 32 bits is

00:28:31,030 --> 00:28:36,460
calls for 32-bit binary is running on an

00:28:33,100 --> 00:28:38,410
x86 64 machine which we block we also

00:28:36,460 --> 00:28:42,760
block a whole bunch of irrelevant

00:28:38,410 --> 00:28:44,200
network types and so on I have to come

00:28:42,760 --> 00:28:45,370
to the extreme section just because

00:28:44,200 --> 00:28:46,360
until I'd heard a sandstorm I never

00:28:45,370 --> 00:28:48,580
heard of anybody doing all these things

00:28:46,360 --> 00:28:50,860
and the other one which I know that no

00:28:48,580 --> 00:28:52,660
one else does is that so with all this

00:28:50,860 --> 00:28:54,220
said it seems like there's no way to

00:28:52,660 --> 00:28:59,140
actually get HTTP in and out of the

00:28:54,220 --> 00:29:02,620
grain there's just hello so to solve

00:28:59,140 --> 00:29:04,120
that problem we have a single UNIX

00:29:02,620 --> 00:29:06,910
socket that is passed in by file

00:29:04,120 --> 00:29:08,710
descriptor into the grain over which all

00:29:06,910 --> 00:29:10,540
communication occurs using a library

00:29:08,710 --> 00:29:13,570
that we maintain call cap and proto

00:29:10,540 --> 00:29:15,430
which is also in Debian it's just yet

00:29:13,570 --> 00:29:16,690
another a binary RPC system I can say

00:29:15,430 --> 00:29:20,290
things that are cool about it but that's

00:29:16,690 --> 00:29:21,970
all that's important for now so the only

00:29:20,290 --> 00:29:27,090
way in and out of the grain is over this

00:29:21,970 --> 00:29:30,340
one file descriptor of a UNIX socket and

00:29:27,090 --> 00:29:32,050
so that's the sandboxing scalability

00:29:30,340 --> 00:29:35,680
wise I think mad duck asked me earlier

00:29:32,050 --> 00:29:37,420
today if you make a new etherpad process

00:29:35,680 --> 00:29:40,810
and install for each of the either pad

00:29:37,420 --> 00:29:42,460
document how can this possibly work and

00:29:40,810 --> 00:29:45,160
answered that you should first think

00:29:42,460 --> 00:29:47,800
about Android so when Android when

00:29:45,160 --> 00:29:49,780
there's memory pressure on my phone the

00:29:47,800 --> 00:29:52,420
operating system the platform is willing

00:29:49,780 --> 00:29:54,370
to kill processes belonging to you after

00:29:52,420 --> 00:29:56,320
using up a lot of memory it hopes that

00:29:54,370 --> 00:29:57,430
this process is saved all their state to

00:29:56,320 --> 00:30:00,120
wherever they're allowed to save state

00:29:57,430 --> 00:30:02,710
so that when you go visit that app again

00:30:00,120 --> 00:30:04,810
it loads up just the same way with just

00:30:02,710 --> 00:30:06,730
the same screen of them and so we do the

00:30:04,810 --> 00:30:09,430
same thing after 15 minutes of non-use a

00:30:06,730 --> 00:30:11,290
we've we kill the processes inside the

00:30:09,430 --> 00:30:12,970
green and then if I go visit that green

00:30:11,290 --> 00:30:16,720
again it'll spin for a second and then

00:30:12,970 --> 00:30:20,230
come back other scalability thing is

00:30:16,720 --> 00:30:26,110
that sandstorm is single server only to

00:30:20,230 --> 00:30:27,970
make all this work so we do have this

00:30:26,110 --> 00:30:32,470
crazy goal that I said which is to let

00:30:27,970 --> 00:30:34,090
users run arbitrary code safely and that

00:30:32,470 --> 00:30:35,350
gets really interesting in a context

00:30:34,090 --> 00:30:36,820
where people do share things with other

00:30:35,350 --> 00:30:39,970
people

00:30:36,820 --> 00:30:41,250
the attackers like on the web it could

00:30:39,970 --> 00:30:44,679
easily be the case

00:30:41,250 --> 00:30:46,630
external attackers could successfully

00:30:44,679 --> 00:30:48,400
break into one of these grains and so

00:30:46,630 --> 00:30:49,960
we're we sort of drawn that line is that

00:30:48,400 --> 00:30:52,240
attacker certainly should only be able

00:30:49,960 --> 00:30:54,700
to exploit vulnerabilities in grains to

00:30:52,240 --> 00:30:56,200
which they already have access so you

00:30:54,700 --> 00:30:58,630
know now that I provoke the sharing like

00:30:56,200 --> 00:31:01,840
I made before there's no way for anyone

00:30:58,630 --> 00:31:03,790
except me to make any HTTP requests into

00:31:01,840 --> 00:31:06,280
that etherpad grain so even if that

00:31:03,790 --> 00:31:08,290
etherpad grain had an old version of SSL

00:31:06,280 --> 00:31:10,990
if it if it had Ormeau code execution

00:31:08,290 --> 00:31:14,470
bug if it had this or that you can't

00:31:10,990 --> 00:31:15,760
reach it so you can't exploit it unless

00:31:14,470 --> 00:31:17,140
you've already been granted access and

00:31:15,760 --> 00:31:19,600
so I want to talk a bit about the

00:31:17,140 --> 00:31:22,390
security issues we've defang this way we

00:31:19,600 --> 00:31:26,470
did a bit of a study last year to see

00:31:22,390 --> 00:31:27,880
which which documented vulnerabilities

00:31:26,470 --> 00:31:30,520
in web apps that are packaged for

00:31:27,880 --> 00:31:32,080
sandstorm we're still an issue inside

00:31:30,520 --> 00:31:33,400
sandstorm could we had this guessed that

00:31:32,080 --> 00:31:35,350
we would defang a lot of them and we

00:31:33,400 --> 00:31:42,520
found that over 95% of them we had

00:31:35,350 --> 00:31:44,530
mitigated usually entirely and to

00:31:42,520 --> 00:31:46,660
eliminate this let me let me give you

00:31:44,530 --> 00:31:48,700
two brief summaries first of all a

00:31:46,660 --> 00:31:52,240
single document service is much easier

00:31:48,700 --> 00:31:54,190
to secure so to go over these on either

00:31:52,240 --> 00:31:55,330
pad there's a variety of issues that say

00:31:54,190 --> 00:31:57,670
that if you have access to ether pad

00:31:55,330 --> 00:31:59,290
server you can list all the documents on

00:31:57,670 --> 00:32:00,910
that server either pad has no built-in

00:31:59,290 --> 00:32:02,410
access control the document ID is the

00:32:00,910 --> 00:32:04,300
access control so let's get the document

00:32:02,410 --> 00:32:06,220
ID you can go read it well that doesn't

00:32:04,300 --> 00:32:09,480
help if each etherpad grain is just one

00:32:06,220 --> 00:32:12,580
document inside so none of those apply

00:32:09,480 --> 00:32:15,520
in share latech there's a bug where an

00:32:12,580 --> 00:32:19,030
attacker could read an arbitrary file on

00:32:15,520 --> 00:32:21,700
the server but in shell attack on

00:32:19,030 --> 00:32:23,679
sandstorm the only files on the server

00:32:21,700 --> 00:32:27,640
are the shallow tech package which is

00:32:23,679 --> 00:32:29,650
public knowledge and the files in /var

00:32:27,640 --> 00:32:31,210
if you have access to this grain so that

00:32:29,650 --> 00:32:32,500
doesn't elevate your privileges if you

00:32:31,210 --> 00:32:36,100
could view the grain you can view the

00:32:32,500 --> 00:32:37,600
grain also you could run arbitrary shell

00:32:36,100 --> 00:32:39,940
commands on some versions of Shila tech

00:32:37,600 --> 00:32:41,500
but you can only exploit that if you'd

00:32:39,940 --> 00:32:42,850
be announced given access to the grain

00:32:41,500 --> 00:32:45,429
so that doesn't help you as an attacker

00:32:42,850 --> 00:32:46,809
and then this tiny tiny RSS bug where

00:32:45,429 --> 00:32:50,440
you could do simple injections nobody

00:32:46,809 --> 00:32:51,160
even got a TV for it anyway in tiny tiny

00:32:50,440 --> 00:32:53,470
RSS

00:32:51,160 --> 00:32:54,850
it users install a tiny tiny RSS your

00:32:53,470 --> 00:32:57,669
sandbox to meet other users

00:32:54,850 --> 00:32:59,649
so if you can access your own tiny tiny

00:32:57,669 --> 00:33:01,779
RSS it's not interesting but you can

00:32:59,649 --> 00:33:03,340
also seek will inject it because you can

00:33:01,779 --> 00:33:07,389
go click around me why and modify stuff

00:33:03,340 --> 00:33:09,250
yourself without that so those are the

00:33:07,389 --> 00:33:11,350
app owner abilities some of them that

00:33:09,250 --> 00:33:13,000
we've managed to defend against and all

00:33:11,350 --> 00:33:14,289
of these we defended against before they

00:33:13,000 --> 00:33:16,090
were disclosed of course because it's

00:33:14,289 --> 00:33:18,159
just a design based on the central

00:33:16,090 --> 00:33:21,220
design the security just falls out as a

00:33:18,159 --> 00:33:23,470
result and similarly a limited kernel is

00:33:21,220 --> 00:33:27,429
easier to defend so I think that we

00:33:23,470 --> 00:33:28,990
blocked some at least at least 75% it

00:33:27,429 --> 00:33:32,860
might be more than that of the Linux

00:33:28,990 --> 00:33:35,799
kernel CVE is in the past year and a

00:33:32,860 --> 00:33:37,299
half that we looked at this we don't

00:33:35,799 --> 00:33:39,070
allow unprivileged user name spaces

00:33:37,299 --> 00:33:41,409
inside the grain so they nobody can

00:33:39,070 --> 00:33:43,000
exploit those bugs you can't use that UV

00:33:41,409 --> 00:33:45,210
binaries on sandstorms you can't exploit

00:33:43,000 --> 00:33:48,370
those bugs and there's a whole bunch of

00:33:45,210 --> 00:33:50,259
kernel bugs in all these obscure

00:33:48,370 --> 00:33:52,450
features of the kernel insist calls that

00:33:50,259 --> 00:33:55,870
we block so you can't exploit those

00:33:52,450 --> 00:33:57,759
either I think yeah there are two that

00:33:55,870 --> 00:33:59,200
did apply I'm sandstorm and you can look

00:33:57,759 --> 00:34:01,750
at our Docs or I can show it to you

00:33:59,200 --> 00:34:05,620
afterwards or in a second if you want to

00:34:01,750 --> 00:34:07,149
see what those were but this stuff is

00:34:05,620 --> 00:34:09,129
important to me not just because I love

00:34:07,149 --> 00:34:14,379
putting CVE numbers on slides it's

00:34:09,129 --> 00:34:16,030
important to me because in 2004 I was

00:34:14,379 --> 00:34:24,159
running a wiki for myself and some

00:34:16,030 --> 00:34:25,750
friends and I I had neglected to update

00:34:24,159 --> 00:34:27,129
it because I didn't pay attention to the

00:34:25,750 --> 00:34:29,500
TWiki security announcements mailing

00:34:27,129 --> 00:34:31,720
list in I think was March 2004 and then

00:34:29,500 --> 00:34:33,220
in May 2004 I noticed there were a whole

00:34:31,720 --> 00:34:34,569
bunch of weird perl processes on my

00:34:33,220 --> 00:34:36,909
system and it turned out that somebody

00:34:34,569 --> 00:34:39,339
had exploited a bug by the search

00:34:36,909 --> 00:34:40,659
functionality inside TWiki if you added

00:34:39,339 --> 00:34:42,220
a back taking a semicolon in the right

00:34:40,659 --> 00:34:43,750
place you could run whatever code you

00:34:42,220 --> 00:34:47,169
want on the server because it just execs

00:34:43,750 --> 00:34:48,700
grep ah and I didn't audit that code and

00:34:47,169 --> 00:34:51,730
no one could really realistically expect

00:34:48,700 --> 00:34:55,450
me to audit that code when I was running

00:34:51,730 --> 00:34:57,310
it on my server so things like this

00:34:55,450 --> 00:34:59,710
prevent people from self hosting their

00:34:57,310 --> 00:35:01,150
own apps and if the competition is

00:34:59,710 --> 00:35:04,329
software the service then the

00:35:01,150 --> 00:35:07,060
competition is teams that have the

00:35:04,329 --> 00:35:08,740
dedicated security team so if sandstorm

00:35:07,060 --> 00:35:11,440
or something like it

00:35:08,740 --> 00:35:12,850
and protect users in a way comparable to

00:35:11,440 --> 00:35:15,040
what a multi-million dollar security

00:35:12,850 --> 00:35:16,480
team does on their side through a lot of

00:35:15,040 --> 00:35:19,869
effort on our side through bizarre

00:35:16,480 --> 00:35:21,850
sandboxing then then you can get

00:35:19,869 --> 00:35:23,530
something comparable where self-hosting

00:35:21,850 --> 00:35:26,500
is actually a good idea otherwise

00:35:23,530 --> 00:35:29,410
running your own web apps is a giant

00:35:26,500 --> 00:35:32,710
slog that everyone in the long run will

00:35:29,410 --> 00:35:34,030
stop doing or alternatively only people

00:35:32,710 --> 00:35:35,770
who have well-funded maintenance teams

00:35:34,030 --> 00:35:39,880
will do and that's not really a future

00:35:35,770 --> 00:35:41,290
that exciting to me either so so with

00:35:39,880 --> 00:35:44,020
that said I want to talk more about the

00:35:41,290 --> 00:35:45,460
community one of the things that is

00:35:44,020 --> 00:35:48,220
fascinating to me about sandstorm is

00:35:45,460 --> 00:35:50,980
that we do I really want upstreams to

00:35:48,220 --> 00:35:54,550
maintain their packages in sandstorm and

00:35:50,980 --> 00:35:56,770
and there's there's I think about five

00:35:54,550 --> 00:35:59,590
or so out of the 58 sandstorm packages

00:35:56,770 --> 00:36:02,680
that exist that are sandstorm only or at

00:35:59,590 --> 00:36:04,660
least sandstorm first so those are apps

00:36:02,680 --> 00:36:07,600
that if you random without sandstorm

00:36:04,660 --> 00:36:09,430
they wouldn't work and or at least they

00:36:07,600 --> 00:36:11,590
would show a UI but some functionality

00:36:09,430 --> 00:36:13,690
wouldn't work and people seem to like

00:36:11,590 --> 00:36:14,980
the idea of making sandstorm first apps

00:36:13,690 --> 00:36:17,380
because they don't need to build a login

00:36:14,980 --> 00:36:18,640
button the users already logged in they

00:36:17,380 --> 00:36:20,619
don't need to build a multi document UI

00:36:18,640 --> 00:36:22,510
the sandstorm Ukraine's button handles

00:36:20,619 --> 00:36:24,130
that and there's also this clear

00:36:22,510 --> 00:36:26,830
separation of concerns in the platform

00:36:24,130 --> 00:36:28,660
where if you bundle whatever you want if

00:36:26,830 --> 00:36:30,130
you bundle if you bundle Redis if

00:36:28,660 --> 00:36:31,390
you bundle a version of no that's not in

00:36:30,130 --> 00:36:33,550
the Debian archive just have a lot of

00:36:31,390 --> 00:36:35,710
fun whatever you're doing is not

00:36:33,550 --> 00:36:38,070
negatively impacting any other apps so

00:36:35,710 --> 00:36:42,190
there's no platform reason to stop you

00:36:38,070 --> 00:36:43,390
so so we just say yeah whatever go ahead

00:36:42,190 --> 00:36:46,119
do whatever you want to fly the sandbox

00:36:43,390 --> 00:36:47,470
and web app up streams that you've

00:36:46,119 --> 00:36:49,600
likely can guess find that pretty

00:36:47,470 --> 00:36:51,100
exciting there's also no deployment

00:36:49,600 --> 00:36:52,270
process really for installing a

00:36:51,100 --> 00:36:54,340
sandstorm app there's just that like

00:36:52,270 --> 00:36:55,900
plus button there's an install process

00:36:54,340 --> 00:36:58,359
that I can show you but it's really just

00:36:55,900 --> 00:37:00,730
like click click look

00:36:58,359 --> 00:37:02,619
similarly doesn't require any thinking

00:37:00,730 --> 00:37:04,210
all of the effort in the deployment

00:37:02,619 --> 00:37:07,480
process is done once in the packaging

00:37:04,210 --> 00:37:08,650
time so yeah so the result is that we

00:37:07,480 --> 00:37:10,960
actually have a lot of packages

00:37:08,650 --> 00:37:18,880
maintained by up streams and if handful

00:37:10,960 --> 00:37:20,290
of them are sandstorm only so in terms

00:37:18,880 --> 00:37:22,360
of lessons for debian there's a few

00:37:20,290 --> 00:37:24,070
things to think about

00:37:22,360 --> 00:37:27,550
Sandstrom we have this goal that we

00:37:24,070 --> 00:37:29,140
think that that web app authors will

00:37:27,550 --> 00:37:31,480
want to publicize Sandstrom as a good

00:37:29,140 --> 00:37:32,560
way to run their own software and that

00:37:31,480 --> 00:37:35,680
absolutely sp2 this general question

00:37:32,560 --> 00:37:38,260
about debian like how what is our model

00:37:35,680 --> 00:37:40,180
for how people discover debian and

00:37:38,260 --> 00:37:43,470
choose to run it i think our model is

00:37:40,180 --> 00:37:46,300
basically tech press plus their friends

00:37:43,470 --> 00:37:50,860
some some intercept some union of those

00:37:46,300 --> 00:37:55,030
and it would be interesting and if if

00:37:50,860 --> 00:37:58,060
app authors we're also part of that

00:37:55,030 --> 00:38:00,400
equation really is okay anyone if

00:37:58,060 --> 00:38:02,620
they're an app that people are like I

00:38:00,400 --> 00:38:04,720
guess maybe Apache maybe the Apache

00:38:02,620 --> 00:38:06,760
Doc's are like you should install Debian

00:38:04,720 --> 00:38:09,130
so you can have a patchy but nothing

00:38:06,760 --> 00:38:11,160
else I can think of really recommends

00:38:09,130 --> 00:38:13,480
Debian from the Austrians perspective

00:38:11,160 --> 00:38:16,480
and certainly well that packages don't I

00:38:13,480 --> 00:38:21,010
have to say and then there's this other

00:38:16,480 --> 00:38:23,110
question so for us we we don't really

00:38:21,010 --> 00:38:27,460
have anything resembling Debian policy

00:38:23,110 --> 00:38:29,710
we just have the technical facts of how

00:38:27,460 --> 00:38:32,950
the sandbox works and we tell a falters

00:38:29,710 --> 00:38:34,600
to do and do whatever they want and on

00:38:32,950 --> 00:38:36,490
the other hand David has policy and it's

00:38:34,600 --> 00:38:39,550
actually really powerful I think though

00:38:36,490 --> 00:38:41,380
the Debian policies main contribution is

00:38:39,550 --> 00:38:43,870
preventing Debian developers like us

00:38:41,380 --> 00:38:46,000
from stepping on each other's toes and

00:38:43,870 --> 00:38:48,450
then if that's the case I wonder to what

00:38:46,000 --> 00:38:50,740
extent you know we can evolve out

00:38:48,450 --> 00:38:52,090
hypothetically make sure that policy is

00:38:50,740 --> 00:38:53,890
as minimal as possible to make sure that

00:38:52,090 --> 00:38:56,740
is we have to step on each other's toes

00:38:53,890 --> 00:38:58,360
as little as possible also Debian policy

00:38:56,740 --> 00:39:00,940
doesn't help my friend Chris who has an

00:38:58,360 --> 00:39:02,800
account on my Debian shell server who

00:39:00,940 --> 00:39:04,870
wants to F get install something but it

00:39:02,800 --> 00:39:06,280
still needs my permission to so there's

00:39:04,870 --> 00:39:08,500
still something I think we can do to

00:39:06,280 --> 00:39:10,030
make Debian policy help end users more

00:39:08,500 --> 00:39:13,300
than it does now it certainly helps us

00:39:10,030 --> 00:39:17,050
admins a lot though and then along those

00:39:13,300 --> 00:39:19,780
lines right now there's an effort in

00:39:17,050 --> 00:39:25,870
gnome to make a new app packaging thing

00:39:19,780 --> 00:39:29,580
xdg app there's I can see some reactions

00:39:25,870 --> 00:39:33,400
there's the canonical snappy thing and

00:39:29,580 --> 00:39:34,990
each of these are at least life

00:39:33,400 --> 00:39:36,190
interesting because they have some some

00:39:34,990 --> 00:39:39,400
story about sandbox

00:39:36,190 --> 00:39:40,960
because to the extent that app packages

00:39:39,400 --> 00:39:43,150
when you install them now in Debian

00:39:40,960 --> 00:39:44,770
system need to work together to avoid

00:39:43,150 --> 00:39:46,180
trampling the whole system if they

00:39:44,770 --> 00:39:48,220
didn't need to work together because

00:39:46,180 --> 00:39:50,260
they were sandbox somewhere unique to

00:39:48,220 --> 00:39:51,670
the app then maybe we could have lost

00:39:50,260 --> 00:39:53,079
policy or maybe we could recommend

00:39:51,670 --> 00:39:56,430
people install apps by a different way

00:39:53,079 --> 00:39:58,270
than devs and the other thing is that

00:39:56,430 --> 00:40:01,049
sandstorm has this sort of different

00:39:58,270 --> 00:40:03,250
software freedom focus which is we are

00:40:01,049 --> 00:40:05,890
we do really care about software freedom

00:40:03,250 --> 00:40:07,510
it's just that the are our priority is

00:40:05,890 --> 00:40:10,329
making sure that people can run the

00:40:07,510 --> 00:40:11,890
software they want without having to ask

00:40:10,329 --> 00:40:13,390
permission from anyone which is a

00:40:11,890 --> 00:40:15,069
different winner kind of software

00:40:13,390 --> 00:40:20,349
freedom than the FSG although we do care

00:40:15,069 --> 00:40:22,210
about the FSG also and i know that we

00:40:20,349 --> 00:40:23,740
have just a minute left before 2:45 so

00:40:22,210 --> 00:40:27,010
I'll just leave this line here and say

00:40:23,740 --> 00:40:28,990
one sentence we run these centralized

00:40:27,010 --> 00:40:32,980
services like I do mentors Debian net

00:40:28,990 --> 00:40:35,380
for package review and because I'm one

00:40:32,980 --> 00:40:36,970
of maybe three maintainer of mentors

00:40:35,380 --> 00:40:40,420
that Demyan on net along with Ola Stian

00:40:36,970 --> 00:40:41,980
PABs anyone who wants any changes in

00:40:40,420 --> 00:40:43,930
that service has to go through me and I

00:40:41,980 --> 00:40:45,940
think that that is not a great vision of

00:40:43,930 --> 00:40:47,529
software freedom and is why the thing

00:40:45,940 --> 00:40:51,880
stagnated over the past five years I

00:40:47,529 --> 00:40:54,819
think so just after this there's a bath

00:40:51,880 --> 00:40:56,529
and there's maybe some type of Q&A here

00:40:54,819 --> 00:40:58,630
and I have some stickers that I'll grab

00:40:56,529 --> 00:40:58,960
my backpack now thanks so much for

00:40:58,630 --> 00:41:06,250
listening

00:40:58,960 --> 00:41:08,170
oh and I have one other line to say

00:41:06,250 --> 00:41:10,119
actually which is if anyone ever asked

00:41:08,170 --> 00:41:11,289
you about sandstorm is because I just

00:41:10,119 --> 00:41:13,329
told you so many things that are true

00:41:11,289 --> 00:41:15,609
about it if thinking me about a year and

00:41:13,329 --> 00:41:17,079
a half to come up with this summary so

00:41:15,609 --> 00:41:18,190
I've saved you the work you can tell

00:41:17,079 --> 00:41:28,000
them stamped on with a more private

00:41:18,190 --> 00:41:31,660
Google Docs yeah well we don't have the

00:41:28,000 --> 00:41:33,400
whole global CDN thing going for us but

00:41:31,660 --> 00:41:45,190
we do have some plans to integrate with

00:41:33,400 --> 00:41:46,299
CDN eventually optionally yeah oh and

00:41:45,190 --> 00:41:54,730
thanks you go again for your laptop

00:41:46,299 --> 00:41:56,170
goodness yeah sure yeah I guess I was I

00:41:54,730 --> 00:41:58,029
was actually a little skeptical when I

00:41:56,170 --> 00:42:00,309
heard your this is a Google Docs thing

00:41:58,029 --> 00:42:02,109
but I actually think it's awesome it's

00:42:00,309 --> 00:42:06,069
really great for anyone who wants to run

00:42:02,109 --> 00:42:08,529
a web app but are lying and lying awake

00:42:06,069 --> 00:42:09,730
at night worrying about whether they I

00:42:08,529 --> 00:42:12,730
mean that's great

00:42:09,730 --> 00:42:14,020
I really like it thanks great yeah I

00:42:12,730 --> 00:42:17,799
mean why are the things about the

00:42:14,020 --> 00:42:19,450
scalability thing is that web apps

00:42:17,799 --> 00:42:21,339
usually have scaling problems because a

00:42:19,450 --> 00:42:27,160
lot of people are accessing them and if

00:42:21,339 --> 00:42:28,750
a lot of people not very many people are

00:42:27,160 --> 00:42:30,730
going to be accessing a thing that has

00:42:28,750 --> 00:42:32,349
access controlled so the only you and

00:42:30,730 --> 00:42:33,579
your friends can view it so the scaling

00:42:32,349 --> 00:42:35,789
problems actually aren't a huge deal we

00:42:33,579 --> 00:42:35,789
find

00:42:39,850 --> 00:42:43,770
well we one more question here if we can

00:42:52,740 --> 00:42:59,710
yeah yeah yeah the possible solution

00:42:55,900 --> 00:43:04,510
Oh seminar at least and I wonder if you

00:42:59,710 --> 00:43:06,280
have plans to go further than just what

00:43:04,510 --> 00:43:08,680
she do because flat pack is clearly

00:43:06,280 --> 00:43:10,960
desktop Tori hunted and but with good

00:43:08,680 --> 00:43:12,760
integration with free desktop menu so

00:43:10,960 --> 00:43:14,470
the application show but well a web

00:43:12,760 --> 00:43:15,790
application isn't an application like

00:43:14,470 --> 00:43:19,240
another just using another technology

00:43:15,790 --> 00:43:23,740
and I would want to see it on my menu as

00:43:19,240 --> 00:43:25,900
well so is there some integration here

00:43:23,740 --> 00:43:27,760
that could be done I don't know if she's

00:43:25,900 --> 00:43:30,220
a diamond level or does this sample

00:43:27,760 --> 00:43:32,140
sandstone level but it's clearly

00:43:30,220 --> 00:43:36,850
something like it's needed yeah that

00:43:32,140 --> 00:43:38,470
would be interesting that's a really

00:43:36,850 --> 00:43:42,070
good idea I haven't thought enough about

00:43:38,470 --> 00:43:45,970
it to think about what I should say okay

00:43:42,070 --> 00:43:49,000
then another question if you want there

00:43:45,970 --> 00:43:52,270
are ways to plug more olds in the

00:43:49,000 --> 00:43:55,810
sandbox so for example you can run the

00:43:52,270 --> 00:44:02,080
data base outside of the of the grain

00:43:55,810 --> 00:44:05,950
and store it yeah so yes and no I should

00:44:02,080 --> 00:44:08,440
think no and yes the database one well

00:44:05,950 --> 00:44:11,470
the way that we want sandbox holes to

00:44:08,440 --> 00:44:12,580
get to show up is where you know so I

00:44:11,470 --> 00:44:14,350
showed you the sharing menu where you

00:44:12,580 --> 00:44:16,120
can share access to other people there

00:44:14,350 --> 00:44:18,880
will be a way for the app to request

00:44:16,120 --> 00:44:21,430
access to either another different grain

00:44:18,880 --> 00:44:23,190
or some external service entirely like

00:44:21,430 --> 00:44:27,790
your Twitter account or something and

00:44:23,190 --> 00:44:29,440
that would also be be mediated by the

00:44:27,790 --> 00:44:31,120
same Sandstrom you why you get a top

00:44:29,440 --> 00:44:32,200
drop-down that would say do you want the

00:44:31,120 --> 00:44:34,000
taxes they want the thing to be able

00:44:32,200 --> 00:44:35,590
access your Twitter or something like

00:44:34,000 --> 00:44:38,620
that and we're still working on details

00:44:35,590 --> 00:44:42,040
of that you could so so that's how we

00:44:38,620 --> 00:44:46,180
expect holes being poked in the sandbox

00:44:42,040 --> 00:44:48,010
to work it's kind of sad to me if in

00:44:46,180 --> 00:44:49,450
order to start an app at all you need to

00:44:48,010 --> 00:44:50,540
poke a hole in the sandbox first because

00:44:49,450 --> 00:44:52,730
then the user has no

00:44:50,540 --> 00:44:54,200
concept of why is worth doing and so I

00:44:52,730 --> 00:44:56,750
wouldn't want it to be true that an app

00:44:54,200 --> 00:44:58,910
depends on some external service to work

00:44:56,750 --> 00:45:01,610
for a database but on the other hand you

00:44:58,910 --> 00:45:03,770
can imagine some like like PHP myadmin

00:45:01,610 --> 00:45:05,150
the whole point of PHP might usually the

00:45:03,770 --> 00:45:07,100
point of p2p in my admit it

00:45:05,150 --> 00:45:09,500
can be any way to connect to a remote

00:45:07,100 --> 00:45:12,290
database and so in that case it would

00:45:09,500 --> 00:45:15,340
make sense for it to show a chooser to

00:45:12,290 --> 00:45:15,340
let you choose a remote database

00:45:22,110 --> 00:45:25,740
we have maybe another question it's also

00:45:24,480 --> 00:45:27,390
worth saying there is there's a bluff

00:45:25,740 --> 00:45:28,410
after this here so if you have more

00:45:27,390 --> 00:45:30,630
questions and I wouldn't stick around

00:45:28,410 --> 00:45:33,210
but I'm happy to answer them here - okay

00:45:30,630 --> 00:45:36,570
so you mentioned that basically your

00:45:33,210 --> 00:45:39,330
sentiment pocket Reese built I running

00:45:36,570 --> 00:45:41,550
this process by installing the entire

00:45:39,330 --> 00:45:43,920
thing in a VM and extracting also files

00:45:41,550 --> 00:45:46,200
which means that unlike her sauce

00:45:43,920 --> 00:45:49,260
packets you don't really know or to

00:45:46,200 --> 00:45:50,670
reproduce the build and like what

00:45:49,260 --> 00:45:53,940
happens for instance if there is a

00:45:50,670 --> 00:45:56,430
Debian security update and how do I

00:45:53,940 --> 00:46:01,470
knows that my package need to be updated

00:45:56,430 --> 00:46:04,050
or rebuilt and or - yeah basically or do

00:46:01,470 --> 00:46:10,170
we or can we help that happen more or

00:46:04,050 --> 00:46:11,460
less automatically so first I'm going to

00:46:10,170 --> 00:46:13,440
tell you something that won't thrill you

00:46:11,460 --> 00:46:15,090
which is solving that problem is not a

00:46:13,440 --> 00:46:18,300
real focus for the central core team in

00:46:15,090 --> 00:46:19,560
the next year or two because we want the

00:46:18,300 --> 00:46:21,480
sandbox thing to be good enough that

00:46:19,560 --> 00:46:24,000
even if the app is vulnerable it's not a

00:46:21,480 --> 00:46:25,830
big deal now having said that if you

00:46:24,000 --> 00:46:28,140
have a wordpress blog and you only give

00:46:25,830 --> 00:46:29,850
other people like edit access but they

00:46:28,140 --> 00:46:31,470
can exploit an image dramatic bugs or

00:46:29,850 --> 00:46:33,300
arbitrary code elevate their privileges

00:46:31,470 --> 00:46:35,250
that might be bad so it might still be

00:46:33,300 --> 00:46:38,850
worth fixing it is not as big of a deal

00:46:35,250 --> 00:46:40,770
so what I would think that comes to mind

00:46:38,850 --> 00:46:42,630
is to use the file contents the file

00:46:40,770 --> 00:46:45,990
hashes so what I would like to see is

00:46:42,630 --> 00:46:49,470
something that analyzes sense form

00:46:45,990 --> 00:46:51,900
packages to see if they contain files

00:46:49,470 --> 00:46:54,660
whose hashes are known to be superseded

00:46:51,900 --> 00:46:57,750
by Debian security update version and

00:46:54,660 --> 00:46:59,520
from our end we are the packaging

00:46:57,750 --> 00:47:02,490
tooling that ICO maintained with Drew

00:46:59,520 --> 00:47:04,800
Fisher that thing targets Debian jesse

00:47:02,490 --> 00:47:07,020
stable for the reason that we want it to

00:47:04,800 --> 00:47:09,440
be easy to let these point releases just

00:47:07,020 --> 00:47:09,440
happen

00:47:12,400 --> 00:47:17,049

YouTube URL: https://www.youtube.com/watch?v=czFxDCVaU-0


