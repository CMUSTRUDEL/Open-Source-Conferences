Title: Debian in Production Group Therap^W^WBoF
Publication date: 2020-02-24
Playlist: MiniDebConf Vaumarcus 2019
Description: 
	by Nicolas Dandrimont

At: MiniDebConf Vaumarcus 2019
https://wiki.debian.org/DebianEvents/ch/2019/Vaumarcus

I've been using Debian in production for more than 10 years, and this is a very strong love/hate relationship; what better than a MiniDebConf to vent, rant and hopefully share some good and less good practices amongst friends? Some keywords I'd like to touch on: staging, deployment, preseeding, terraform, puppet, unattended-upgrades, policy-rc.d, â€¦

Room: main
Scheduled start: 2019-10-27 13:30:00
Captions: 
	00:00:04,570 --> 00:00:12,760
so basically I wanted to have this

00:00:09,610 --> 00:00:16,209
session because I've been running Debian

00:00:12,760 --> 00:00:22,090
in diverse production systems for more

00:00:16,209 --> 00:00:24,279
than 10 years now and I guess I'm a

00:00:22,090 --> 00:00:26,980
Debian developer so I like Debian it's

00:00:24,279 --> 00:00:29,710
something that I like it's a work of

00:00:26,980 --> 00:00:34,390
love contributing to Debian but still

00:00:29,710 --> 00:00:36,970
there's a lot of tension between getting

00:00:34,390 --> 00:00:43,270
things done and doing things right in

00:00:36,970 --> 00:00:47,590
Debian there's lots of small things in

00:00:43,270 --> 00:00:49,840
Debian that are bit annoying when you

00:00:47,590 --> 00:00:52,450
use it like with configuration

00:00:49,840 --> 00:01:05,189
management systems or when you use it

00:00:52,450 --> 00:01:10,150
with deployment systems right so

00:01:05,189 --> 00:01:13,540
currently the stuff that I wrote is what

00:01:10,150 --> 00:01:17,860
I'm doing inside software heritage as a

00:01:13,540 --> 00:01:20,680
systems administrator and yeah basically

00:01:17,860 --> 00:01:24,670
I'm Kiki I'm keeping a production system

00:01:20,680 --> 00:01:30,150
running for in that case not paying

00:01:24,670 --> 00:01:36,640
customers but for well for my employer

00:01:30,150 --> 00:01:40,409
which is paying me to run the system and

00:01:36,640 --> 00:01:45,010
yeah so I don't want to like monopolized

00:01:40,409 --> 00:01:47,650
what I'm I don't want to be the only

00:01:45,010 --> 00:01:48,909
person to talk so I'm going to just go

00:01:47,650 --> 00:01:52,320
quickly through the points that I've

00:01:48,909 --> 00:01:55,390
written down and then people can add

00:01:52,320 --> 00:01:57,549
some suggestions some things that they'd

00:01:55,390 --> 00:01:59,920
like to fix in Debian and that they

00:01:57,549 --> 00:02:03,939
haven't or things that they like about

00:01:59,920 --> 00:02:07,630
Debian and that's I've not written down

00:02:03,939 --> 00:02:09,700
in the notes so the first point I wanted

00:02:07,630 --> 00:02:11,650
to make was that there's some tension

00:02:09,700 --> 00:02:15,999
between getting things done and doing

00:02:11,650 --> 00:02:17,310
things right we use Debian systems to

00:02:15,999 --> 00:02:20,540
deploy the

00:02:17,310 --> 00:02:24,000
code that we wrote that we write and so

00:02:20,540 --> 00:02:25,739
ideally what we should do is take all

00:02:24,000 --> 00:02:27,959
the dependencies of the code that we run

00:02:25,739 --> 00:02:31,380
and package them and push them in debian

00:02:27,959 --> 00:02:33,569
properly which is a good idea in theory

00:02:31,380 --> 00:02:37,980
but in practice it takes a lot of time

00:02:33,569 --> 00:02:40,230
because there's policy that you need to

00:02:37,980 --> 00:02:42,090
adhere to and then there's processes

00:02:40,230 --> 00:02:47,010
that you need to go through for instance

00:02:42,090 --> 00:02:49,650
the new queue for new packages so

00:02:47,010 --> 00:02:52,709
they're compromised that I have and that

00:02:49,650 --> 00:02:54,030
I use is that I tend to push updates to

00:02:52,709 --> 00:02:57,870
packages that already exist in the

00:02:54,030 --> 00:03:01,709
beyond make sure that up-to-date for

00:02:57,870 --> 00:03:03,780
what I need and then for the rest of the

00:03:01,709 --> 00:03:06,450
packages that I use I do quick and dirty

00:03:03,780 --> 00:03:08,940
back ports in the repository that I have

00:03:06,450 --> 00:03:10,260
for work this repository is publicly

00:03:08,940 --> 00:03:12,390
available so if you want to look at

00:03:10,260 --> 00:03:15,959
those source packages that I do then you

00:03:12,390 --> 00:03:19,590
can open it up it's Debian that software

00:03:15,959 --> 00:03:23,880
audio sources index and you can look in

00:03:19,590 --> 00:03:25,650
horror at what I've done but so

00:03:23,880 --> 00:03:29,940
basically what we do is we use Debian as

00:03:25,650 --> 00:03:32,430
a gray box Debian is a stable base we

00:03:29,940 --> 00:03:35,430
run all our systems on Debian and I

00:03:32,430 --> 00:03:37,709
mostly blindly trust point releases and

00:03:35,430 --> 00:03:39,630
security updates so I run on a turntable

00:03:37,709 --> 00:03:42,540
and I - indeed upgrades on all right

00:03:39,630 --> 00:03:47,100
servers and so basically everything

00:03:42,540 --> 00:03:49,500
that's done by the security team by the

00:03:47,100 --> 00:03:53,069
stable risk managers is upgraded

00:03:49,500 --> 00:03:55,530
automatically on my systems how I cope

00:03:53,069 --> 00:03:57,269
with that first of all I monitor most of

00:03:55,530 --> 00:03:59,220
services to make sure that they stay

00:03:57,269 --> 00:04:01,950
work so if an upgrade

00:03:59,220 --> 00:04:03,590
croaks then I get the warning saying

00:04:01,950 --> 00:04:10,019
that you need to look at this machine

00:04:03,590 --> 00:04:13,410
and I avoid restarts in the package

00:04:10,019 --> 00:04:17,579
management system so basically by

00:04:13,410 --> 00:04:20,489
default apps will run a post

00:04:17,579 --> 00:04:22,470
installation script well dip package

00:04:20,489 --> 00:04:24,150
will run post insertion scripts and post

00:04:22,470 --> 00:04:27,590
installation scripts will restart the

00:04:24,150 --> 00:04:30,570
services that are running or the tree

00:04:27,590 --> 00:04:33,360
install will stop the service and then

00:04:30,570 --> 00:04:35,240
but instead we start the service we

00:04:33,360 --> 00:04:40,250
disabled that through policy our CD

00:04:35,240 --> 00:04:44,030
which is a ugly mechanism to

00:04:40,250 --> 00:04:47,100
disable restarting of services by the

00:04:44,030 --> 00:04:50,240
package manager and what we do is that

00:04:47,100 --> 00:04:55,640
for the critical services we just like

00:04:50,240 --> 00:04:57,750
the stuff that we we restart them

00:04:55,640 --> 00:05:00,990
manually so for instance when we have a

00:04:57,750 --> 00:05:02,700
possible sequel server that gets rights

00:05:00,990 --> 00:05:04,470
from all the workers we make sure that

00:05:02,700 --> 00:05:06,740
the work has stopped then we restart

00:05:04,470 --> 00:05:10,590
progress we bring the workers back up

00:05:06,740 --> 00:05:13,260
this is manual it's a bit annoying but

00:05:10,590 --> 00:05:17,730
we are not at the point where we can

00:05:13,260 --> 00:05:21,660
just have stuff self-feeding

00:05:17,730 --> 00:05:25,230
with like database with thoughts on the

00:05:21,660 --> 00:05:27,000
ideal thing would be for the workers to

00:05:25,230 --> 00:05:29,490
detect that the database is down and

00:05:27,000 --> 00:05:30,990
just wait and then restart when the

00:05:29,490 --> 00:05:32,460
database comes back but then you get

00:05:30,990 --> 00:05:34,080
thundering herd problems where

00:05:32,460 --> 00:05:40,650
everything is going to write your

00:05:34,080 --> 00:05:42,210
database at once so it's it's a bit like

00:05:40,650 --> 00:05:45,930
this is one of the things that are a bit

00:05:42,210 --> 00:05:51,060
dodgy what we want to do in the future

00:05:45,930 --> 00:05:53,280
is also enable proposed updates in our

00:05:51,060 --> 00:05:56,700
staging infrastructure so making sure

00:05:53,280 --> 00:05:57,540
that we have advance warning of upcoming

00:05:56,700 --> 00:06:00,960
stable

00:05:57,540 --> 00:06:02,940
package updates and to be able to report

00:06:00,960 --> 00:06:05,000
bugs to this type of risk manager if

00:06:02,940 --> 00:06:10,080
something breaks in proposed updates

00:06:05,000 --> 00:06:13,410
before it ends up in the actual point

00:06:10,080 --> 00:06:15,960
release so we have a staging infra we

00:06:13,410 --> 00:06:19,140
haven't set that up yet but that's

00:06:15,960 --> 00:06:22,280
something that we want to do how do we

00:06:19,140 --> 00:06:25,620
deploy it off the Debian way with quotes

00:06:22,280 --> 00:06:28,410
so all the code that we write is Python

00:06:25,620 --> 00:06:30,950
so everything is packaged on pi PI the

00:06:28,410 --> 00:06:33,170
upstream Python packet package index

00:06:30,950 --> 00:06:35,760
basically when we push attacked or

00:06:33,170 --> 00:06:38,220
repository there's a Jenkins job that

00:06:35,760 --> 00:06:41,190
automatically uploads to pipeline the

00:06:38,220 --> 00:06:42,449
source distribution and then that

00:06:41,190 --> 00:06:48,180
triggers

00:06:42,449 --> 00:06:50,219
again in Jenkins an automatic package so

00:06:48,180 --> 00:06:52,620
it basically updates the Debian branch

00:06:50,219 --> 00:06:55,469
in the repository saying there's been a

00:06:52,620 --> 00:06:57,779
new release it tries to build an

00:06:55,469 --> 00:07:00,749
unstable package and if that works which

00:06:57,779 --> 00:07:03,089
currently is a bit messy because the

00:07:00,749 --> 00:07:05,789
Python 3.8 transition is starting so

00:07:03,089 --> 00:07:08,279
it's starting to be fun again in

00:07:05,789 --> 00:07:10,919
unstable then we get to 2 Matic

00:07:08,279 --> 00:07:13,830
backports that are done triggered from

00:07:10,919 --> 00:07:15,210
the unstable builds to stable and all

00:07:13,830 --> 00:07:21,479
stable because we are still in the

00:07:15,210 --> 00:07:25,770
process of upgrading currently we can't

00:07:21,479 --> 00:07:28,830
really bypass the unstable package but

00:07:25,770 --> 00:07:32,639
we always find ways to make sure that

00:07:28,830 --> 00:07:37,199
the build works in unstable and in

00:07:32,639 --> 00:07:39,599
stable in power or stable is getting

00:07:37,199 --> 00:07:41,729
harder and harder because people are

00:07:39,599 --> 00:07:45,659
introducing eff strings everywhere and

00:07:41,729 --> 00:07:47,520
so it's Python 3.6 minimum now for this

00:07:45,659 --> 00:07:49,830
code but that's fine there's only like

00:07:47,520 --> 00:07:51,719
five or six machines left to upgrade to

00:07:49,830 --> 00:07:52,259
Buster so it's not going to be an issue

00:07:51,719 --> 00:07:55,080
anymore

00:07:52,259 --> 00:07:59,490
in a few hopefully by the end of next

00:07:55,080 --> 00:08:03,360
week yeah so all of this gets uploaded

00:07:59,490 --> 00:08:06,810
to a private repository that runs on one

00:08:03,360 --> 00:08:09,870
of our machines and we do our deployment

00:08:06,810 --> 00:08:13,199
through pipette manifests we've used per

00:08:09,870 --> 00:08:15,449
pet because at the time where we

00:08:13,199 --> 00:08:18,689
bootstrapped our infrastructure it was

00:08:15,449 --> 00:08:23,099
the most sensible choice there was a lot

00:08:18,689 --> 00:08:26,969
of activity in the upstream ecosystem a

00:08:23,099 --> 00:08:28,680
dusty days so it's pretty nice we've set

00:08:26,969 --> 00:08:31,050
up a pipette not to do package updates

00:08:28,680 --> 00:08:35,300
we do package updates separately from

00:08:31,050 --> 00:08:40,139
the deployment of Puppets

00:08:35,300 --> 00:08:41,610
manifests which is again a little like

00:08:40,139 --> 00:08:43,319
it's a little precarious because

00:08:41,610 --> 00:08:45,389
sometimes you want to update the

00:08:43,319 --> 00:08:49,470
configuration in lockstep with a package

00:08:45,389 --> 00:08:53,250
update and we don't really have a very

00:08:49,470 --> 00:08:55,560
good solution for this because pipette

00:08:53,250 --> 00:08:56,340
itself only knows how to install a

00:08:55,560 --> 00:08:57,600
package

00:08:56,340 --> 00:09:00,030
make sure that the package is installed

00:08:57,600 --> 00:09:02,940
or to make sure that the package is at

00:09:00,030 --> 00:09:05,940
the latest version of available in the

00:09:02,940 --> 00:09:07,380
repositories you can't really say do

00:09:05,940 --> 00:09:10,800
pipette please install the package at

00:09:07,380 --> 00:09:14,040
that version and gets it really get it

00:09:10,800 --> 00:09:16,110
to work reliably you can tell it to

00:09:14,040 --> 00:09:18,300
install the package at the given version

00:09:16,110 --> 00:09:20,880
and then you run apt upgrade and it

00:09:18,300 --> 00:09:22,590
upgrades the package because pipette

00:09:20,880 --> 00:09:25,350
doesn't actually set up any pinning of

00:09:22,590 --> 00:09:29,760
the package version it just does apt

00:09:25,350 --> 00:09:32,640
install package equals foo and then when

00:09:29,760 --> 00:09:35,400
you do an upgrade and it blows up so

00:09:32,640 --> 00:09:38,820
we've started doing version pinning via

00:09:35,400 --> 00:09:41,670
apt preferences through pipette for like

00:09:38,820 --> 00:09:43,980
the clustered things that we use for

00:09:41,670 --> 00:09:47,640
instance elasticsearch where you really

00:09:43,980 --> 00:09:49,350
want all the versions to be the same and

00:09:47,640 --> 00:09:52,410
you want to make sure that the updates

00:09:49,350 --> 00:09:58,610
go in lockstep so you don't break your

00:09:52,410 --> 00:10:01,800
cluster and lose your data so we have

00:09:58,610 --> 00:10:05,370
some annoying pipette manifests where

00:10:01,800 --> 00:10:09,330
you have an apt preference file which

00:10:05,370 --> 00:10:12,200
this diversion and then the peptide

00:10:09,330 --> 00:10:16,320
puppet to install the package but

00:10:12,200 --> 00:10:18,900
already know took your way to get to

00:10:16,320 --> 00:10:22,590
this point but now it's working fairly

00:10:18,900 --> 00:10:25,410
okay so yeah the few D foods that are

00:10:22,590 --> 00:10:28,410
annoying service sorting on install and

00:10:25,410 --> 00:10:33,860
restarting on upgrade depth comes

00:10:28,410 --> 00:10:33,860
messing with config files when you use

00:10:34,910 --> 00:10:41,550
like debconf was fine 15 years ago when

00:10:39,750 --> 00:10:45,120
there was no configuration management

00:10:41,550 --> 00:10:50,930
systems these days it's must be getting

00:10:45,120 --> 00:10:54,900
in the way I think when you use right I

00:10:50,930 --> 00:10:57,360
think if you have a problem with the Geo

00:10:54,900 --> 00:10:59,190
configuration file and modifying when

00:10:57,360 --> 00:11:00,570
you upgrade it's a bug it's not super

00:10:59,190 --> 00:11:05,160
great it's supposed to be a bug yeah

00:11:00,570 --> 00:11:08,490
yeah people still get it wrong but yeah

00:11:05,160 --> 00:11:10,050
if debconf touches your config file on

00:11:08,490 --> 00:11:12,360
upgrade and

00:11:10,050 --> 00:11:15,000
well so defcons can actually touch the

00:11:12,360 --> 00:11:17,970
config file as long as it keeps your

00:11:15,000 --> 00:11:23,160
modifications which is like the messy

00:11:17,970 --> 00:11:25,800
parts because when you do debconf stuff

00:11:23,160 --> 00:11:29,910
you only have bash and pearl available

00:11:25,800 --> 00:11:32,880
and so the scripts that do stuff with

00:11:29,910 --> 00:11:35,070
config files when the maintainer was

00:11:32,880 --> 00:11:39,450
very bored and did a lot of things to

00:11:35,070 --> 00:11:41,670
upgrade configuration files they are

00:11:39,450 --> 00:11:43,709
written in bash which is awful or in

00:11:41,670 --> 00:11:45,690
Perl which is a bit less awful but it's

00:11:43,709 --> 00:11:48,300
only the coral pearl that you get you

00:11:45,690 --> 00:11:51,540
don't get any modules oh yeah

00:11:48,300 --> 00:11:56,459
so yeah that's probably a bunch of bugs

00:11:51,540 --> 00:12:01,230
that should be reported but my most

00:11:56,459 --> 00:12:02,850
annoying issue is like you tell your

00:12:01,230 --> 00:12:05,310
configuration management system to

00:12:02,850 --> 00:12:07,529
install the package and then it needs to

00:12:05,310 --> 00:12:09,450
update the configuration files or things

00:12:07,529 --> 00:12:11,690
starts once and then you move the

00:12:09,450 --> 00:12:14,279
configuration file and it starts again

00:12:11,690 --> 00:12:16,230
so basically what you end up doing is

00:12:14,279 --> 00:12:18,870
you just pretty CRC that D and you say

00:12:16,230 --> 00:12:22,709
the package stop touching my services

00:12:18,870 --> 00:12:28,260
and once you understand how policy RC

00:12:22,709 --> 00:12:30,839
daddy works it's okay so what you see a

00:12:28,260 --> 00:12:33,720
CD is a configuration file that's

00:12:30,839 --> 00:12:35,520
actually a script and so you don't

00:12:33,720 --> 00:12:38,760
really have any declarative way of

00:12:35,520 --> 00:12:41,550
setting like telling the package

00:12:38,760 --> 00:12:43,740
you can't restart Postgres but you can

00:12:41,550 --> 00:12:45,690
restart postfix because postfix is a

00:12:43,740 --> 00:12:54,480
base package that we really don't care

00:12:45,690 --> 00:12:56,579
about it's it's a bit like I think there

00:12:54,480 --> 00:12:59,100
was some work about declarative policy

00:12:56,579 --> 00:13:01,250
acidity things never really went

00:12:59,100 --> 00:13:01,250
anywhere

00:13:02,259 --> 00:13:08,239
so when we installed a new server we do

00:13:05,809 --> 00:13:11,059
a base install with the Debian installer

00:13:08,239 --> 00:13:13,339
for bare metal so we just go through the

00:13:11,059 --> 00:13:15,739
motions by hand we don't have enough

00:13:13,339 --> 00:13:18,589
bare metal to actually care about doing

00:13:15,739 --> 00:13:21,079
proceeding or stuff we used to do

00:13:18,589 --> 00:13:23,929
proceeding for virtual machines but

00:13:21,079 --> 00:13:28,669
these days we've started going to

00:13:23,929 --> 00:13:34,579
terraform and terraform on proxmox uses

00:13:28,669 --> 00:13:36,679
the template and cloud init method for

00:13:34,579 --> 00:13:40,579
provisioning machines so basically you

00:13:36,679 --> 00:13:43,699
create your template with an install of

00:13:40,579 --> 00:13:47,540
Debian and cloud in it attaches a small

00:13:43,699 --> 00:13:50,689
partition to the system to get some

00:13:47,540 --> 00:13:54,619
configuration like to network exeter

00:13:50,689 --> 00:13:58,189
exeter and on Azure we just use the base

00:13:54,619 --> 00:14:00,369
Debian image and we deploy and then we

00:13:58,189 --> 00:14:05,749
do a pipette run on the new machines

00:14:00,369 --> 00:14:11,509
which adds them to monitoring systems

00:14:05,749 --> 00:14:13,699
etc so this is not too bad if you try to

00:14:11,509 --> 00:14:15,439
run pipette within Debian installer

00:14:13,699 --> 00:14:17,449
you're gonna have some issues so you

00:14:15,439 --> 00:14:22,819
want to do it on the first boot instead

00:14:17,449 --> 00:14:26,269
but that's like usual in the video team

00:14:22,819 --> 00:14:28,489
we've had the same issue with ansible

00:14:26,269 --> 00:14:32,239
trying to run unstable within Debian

00:14:28,489 --> 00:14:33,619
installer it sort of works and then it

00:14:32,239 --> 00:14:36,919
tries to restore the service and

00:14:33,619 --> 00:14:39,459
everything blows up so the final thing

00:14:36,919 --> 00:14:42,410
that we do is we manage multiple systems

00:14:39,459 --> 00:14:45,169
using cluster shell basically it's a

00:14:42,410 --> 00:14:47,179
wrapper around SSH that allows you to

00:14:45,169 --> 00:14:50,480
run commands in parallel to multiple

00:14:47,179 --> 00:14:53,899
hosts we pod that is everything it's

00:14:50,480 --> 00:14:59,499
quite useful and you still do some

00:14:53,899 --> 00:15:03,769
manual stuff some people in the pipette

00:14:59,499 --> 00:15:06,879
the particular system would use what's

00:15:03,769 --> 00:15:06,879
the name of the tool again

00:15:07,300 --> 00:15:13,910
sorry no it's

00:15:10,790 --> 00:15:20,180
anyway it's it was a twitter / non

00:15:13,910 --> 00:15:22,850
pipettes where you had anyway whatever

00:15:20,180 --> 00:15:25,220
flush is fine you just configure

00:15:22,850 --> 00:15:28,070
basically chooses SSH

00:15:25,220 --> 00:15:32,990
yes I'm corrective that's right the mayo

00:15:28,070 --> 00:15:35,570
net corrective so yeah the most use

00:15:32,990 --> 00:15:39,410
command is how to upgrade a bunch of

00:15:35,570 --> 00:15:41,900
packages without interaction Debian

00:15:39,410 --> 00:15:44,420
front-end an interactive the step conf

00:15:41,900 --> 00:15:47,630
to go away and then the first comes dev

00:15:44,420 --> 00:15:49,550
and first controlled tears the package

00:15:47,630 --> 00:15:53,030
to go wave with its configuration file

00:15:49,550 --> 00:15:55,100
management and then it runs and then you

00:15:53,030 --> 00:16:01,550
run puppet to fix or homesick files and

00:15:55,100 --> 00:16:05,570
everything is great so yeah we're like

00:16:01,550 --> 00:16:08,690
there's a lot of things that I'd be way

00:16:05,570 --> 00:16:11,270
happier to do right having more of the

00:16:08,690 --> 00:16:14,780
dependency packages that I made inside

00:16:11,270 --> 00:16:17,960
Debian instead of having them in my

00:16:14,780 --> 00:16:23,530
crappy own repository but then again I

00:16:17,960 --> 00:16:23,530
don't have the time to do this I'm not

00:16:24,130 --> 00:16:28,910
there's no there's an agreement with my

00:16:27,020 --> 00:16:31,610
employer that I can contribute to Debian

00:16:28,910 --> 00:16:35,540
on work time but I can't contribute to

00:16:31,610 --> 00:16:38,690
Debian at the detriment of work time so

00:16:35,540 --> 00:16:40,850
it's like if it goes smoothly in the

00:16:38,690 --> 00:16:42,950
work time I can do it but if not then

00:16:40,850 --> 00:16:47,210
it's not reasonable to do it on work

00:16:42,950 --> 00:16:50,080
time I think we're quite happy with

00:16:47,210 --> 00:16:54,140
running unattended upgrades everywhere

00:16:50,080 --> 00:16:57,770
we I don't think we've had any issues

00:16:54,140 --> 00:17:02,060
with very broken upgrade that would give

00:16:57,770 --> 00:17:04,280
the system in a bad state so the days

00:17:02,060 --> 00:17:06,260
run during the night and then in the

00:17:04,280 --> 00:17:10,930
morning we have a fresh upgraded system

00:17:06,260 --> 00:17:10,930
that's don't have any issues with that

00:17:11,290 --> 00:17:17,649
yeah so if

00:17:14,319 --> 00:17:22,689
people have stuff that they like to

00:17:17,649 --> 00:17:24,669
mention or IDs for cleaning up some of

00:17:22,689 --> 00:17:28,709
the paper cuts that we have I think

00:17:24,669 --> 00:17:28,709
there's some people in the chat as well

00:17:30,149 --> 00:17:38,440
so when debian is that absolutely

00:17:35,710 --> 00:17:40,899
nothing either in our policy or in our

00:17:38,440 --> 00:17:43,000
infrastructure is designed for

00:17:40,899 --> 00:17:45,100
clustering so I'll take an example from

00:17:43,000 --> 00:17:48,730
one of the packages I maintain that I

00:17:45,100 --> 00:17:51,940
know you use as well is RabbitMQ so like

00:17:48,730 --> 00:17:54,460
restarting RabbitMQ if you do it on a

00:17:51,940 --> 00:17:57,190
single server with a single instance

00:17:54,460 --> 00:17:59,799
that's very much okay so few parts for

00:17:57,190 --> 00:18:02,610
example will not catch it though if you

00:17:59,799 --> 00:18:05,370
have a cluster of RabbitMQ servers and

00:18:02,610 --> 00:18:09,159
you just upgrade the package without

00:18:05,370 --> 00:18:12,190
stopping doing app stop first then it's

00:18:09,159 --> 00:18:14,259
going to break horribly and probably

00:18:12,190 --> 00:18:17,649
that's one area where debian needs to

00:18:14,259 --> 00:18:20,529
improve is to make sure that packages

00:18:17,649 --> 00:18:24,610
also work in the context of clusters so

00:18:20,529 --> 00:18:26,250
I have that in mind I have also things

00:18:24,610 --> 00:18:31,649
like

00:18:26,250 --> 00:18:34,750
Galera like if you set up a cluster then

00:18:31,649 --> 00:18:37,389
maybe restarting shouldn't be done on

00:18:34,750 --> 00:18:39,490
package upgrade you should be able to do

00:18:37,389 --> 00:18:41,769
it by yourself so that goes on the same

00:18:39,490 --> 00:18:44,259
way as what you told about the policÃ­as

00:18:41,769 --> 00:18:49,289
the D where it's not very convenient to

00:18:44,259 --> 00:18:52,570
configure and search so experience I

00:18:49,289 --> 00:18:55,000
don't have a very good story about doing

00:18:52,570 --> 00:18:58,600
rolling updates on clusters

00:18:55,000 --> 00:19:01,990
I've starting I've started like we've

00:18:58,600 --> 00:19:04,690
started to rely heavily on Kefka and so

00:19:01,990 --> 00:19:09,100
calf care needs to be upgraded one node

00:19:04,690 --> 00:19:11,500
at time or else your replication

00:19:09,100 --> 00:19:17,200
explodes and your cluster explodes and

00:19:11,500 --> 00:19:20,200
takes a while but I don't think like

00:19:17,200 --> 00:19:24,280
I've not really found any good ways of

00:19:20,200 --> 00:19:27,400
orchestrating a cluster restart

00:19:24,280 --> 00:19:30,230
I've seen some people do it with ansible

00:19:27,400 --> 00:19:36,410
because the ID referenceable is that you

00:19:30,230 --> 00:19:38,750
control actually have a central node and

00:19:36,410 --> 00:19:41,300
then you can control the nodes one by

00:19:38,750 --> 00:19:44,650
one so I guess we could orchestrate

00:19:41,300 --> 00:19:53,570
crystal shell to do it as well somehow I

00:19:44,650 --> 00:19:54,190
don't have a good solution for that yeah

00:19:53,570 --> 00:19:56,900
it's on

00:19:54,190 --> 00:19:59,920
there's no PA system it's only for the

00:19:56,900 --> 00:20:03,980
recording I think the problem is that

00:19:59,920 --> 00:20:06,740
there is no policy around clusters in in

00:20:03,980 --> 00:20:09,530
Debian at all I mean every cluster has

00:20:06,740 --> 00:20:12,710
its own way of working so I think

00:20:09,530 --> 00:20:14,660
instead of fixing it in Debian it's

00:20:12,710 --> 00:20:17,060
better to pick up some established

00:20:14,660 --> 00:20:19,850
policy like from venetus or something

00:20:17,060 --> 00:20:24,670
and then run with that because they have

00:20:19,850 --> 00:20:24,670
a default policy how stuff should work

00:20:25,610 --> 00:20:32,330
every software is different hmm how'd

00:20:29,030 --> 00:20:44,300
the Kaster work so you you have to do a

00:20:32,330 --> 00:20:46,640
special solution for every one thing

00:20:44,300 --> 00:20:48,230
maybe worth mentioning the Technical

00:20:46,640 --> 00:20:50,210
Committee had a bug about what should

00:20:48,230 --> 00:20:54,080
happen when main script fails to restart

00:20:50,210 --> 00:20:54,710
to restart the service that's bug 904 5

00:20:54,080 --> 00:20:57,110
5 8

00:20:54,710 --> 00:21:01,520
if you're patient you can read through

00:20:57,110 --> 00:21:03,920
the 130 emails but to make a long story

00:21:01,520 --> 00:21:06,110
short the conclusion was that the

00:21:03,920 --> 00:21:08,990
Technical Committee cannot do details

00:21:06,110 --> 00:21:10,460
design so it basically said there is an

00:21:08,990 --> 00:21:12,170
interesting problem to be solved there

00:21:10,460 --> 00:21:15,020
but we are not the right group to solve

00:21:12,170 --> 00:21:16,430
it and I think it points to the fact

00:21:15,020 --> 00:21:19,340
that there is an opportunity to fix that

00:21:16,430 --> 00:21:20,680
and I think there is wide agreement that

00:21:19,340 --> 00:21:25,730
it should be fixed somehow

00:21:20,680 --> 00:21:28,820
there is disagreement whether whether

00:21:25,730 --> 00:21:30,500
when you upgrade the package system

00:21:28,820 --> 00:21:33,020
should be informed or should care about

00:21:30,500 --> 00:21:34,850
restarting the service at all some

00:21:33,020 --> 00:21:38,540
people think of course the packaging

00:21:34,850 --> 00:21:41,270
system should be aware of the system

00:21:38,540 --> 00:21:42,980
state and put the system back in the

00:21:41,270 --> 00:21:44,360
same state and some people think the

00:21:42,980 --> 00:21:48,380
packaging system should not touch the

00:21:44,360 --> 00:21:50,900
server state at all and we currently

00:21:48,380 --> 00:21:53,540
have packages that do either of these

00:21:50,900 --> 00:21:56,030
two alternatives some demons will

00:21:53,540 --> 00:21:58,600
restart on upgrade and some would not be

00:21:56,030 --> 00:21:58,600
touched so

00:22:13,760 --> 00:22:22,230
yeah it's right I think the I think the

00:22:18,470 --> 00:22:25,850
command even policy has been to start

00:22:22,230 --> 00:22:30,020
all services by default when installing

00:22:25,850 --> 00:22:33,410
maybe this should be revisited and I

00:22:30,020 --> 00:22:36,930
have the feeling that the status quo is

00:22:33,410 --> 00:22:41,760
shifting away from that slowly very

00:22:36,930 --> 00:22:46,470
slowly yeah I don't know I don't know

00:22:41,760 --> 00:22:50,730
what and how like we could make it

00:22:46,470 --> 00:22:53,790
happen so probably this depends a lot on

00:22:50,730 --> 00:22:56,070
which service we are talking about let's

00:22:53,790 --> 00:22:59,010
say you have a security issue and a

00:22:56,070 --> 00:23:02,670
cheap proxy it's probably fine to just

00:22:59,010 --> 00:23:04,620
reload it for the example I gave with

00:23:02,670 --> 00:23:06,120
RabbitMQ you should be extremely careful

00:23:04,620 --> 00:23:09,150
because you don't know which type of

00:23:06,120 --> 00:23:09,990
clustering you have so it really depends

00:23:09,150 --> 00:23:15,960
on the context

00:23:09,990 --> 00:23:18,150
maybe I mean the safest baseline is to

00:23:15,960 --> 00:23:20,010
do nothing and that the system

00:23:18,150 --> 00:23:23,420
administrator in case of a security

00:23:20,010 --> 00:23:27,380
issue that you're trying to fix

00:23:23,420 --> 00:23:27,380
sensitive to drink yeah

00:23:39,610 --> 00:23:51,390
oh yeah the maybe it's also obvious but

00:23:48,610 --> 00:23:55,150
it's also vastly easier with system D

00:23:51,390 --> 00:23:57,100
and the part of the part of the problem

00:23:55,150 --> 00:23:59,200
is that if you don't have system D de in

00:23:57,100 --> 00:24:00,760
your state is you have a bit file

00:23:59,200 --> 00:24:02,230
somewhere and you hope that if you talk

00:24:00,760 --> 00:24:04,660
to the right number then you know what

00:24:02,230 --> 00:24:06,730
things happen and we system D if we

00:24:04,660 --> 00:24:09,700
agreed to all do system these things

00:24:06,730 --> 00:24:11,710
recording daemon starting and reloading

00:24:09,700 --> 00:24:12,850
and all of this then we it's also easier

00:24:11,710 --> 00:24:15,730
to integrate that in the packaging

00:24:12,850 --> 00:24:18,550
system then this v-net yeah it's very

00:24:15,730 --> 00:24:21,280
easy to check that services running or

00:24:18,550 --> 00:24:22,690
not and store that at the beginning of

00:24:21,280 --> 00:24:25,060
Xiaomi internal script and then make

00:24:22,690 --> 00:24:29,670
sure that the end state is the same that

00:24:25,060 --> 00:24:35,220
what you started with which in the unit

00:24:29,670 --> 00:24:35,220
sis 5 in its world is a bit harder to do

00:24:35,250 --> 00:24:43,270
yeah that's I guess that's one of the

00:24:39,180 --> 00:24:47,110
limitations of being willing to support

00:24:43,270 --> 00:24:50,410
several unit systems in parallel is that

00:24:47,110 --> 00:24:54,330
you end up working with the bit level

00:24:50,410 --> 00:24:59,890
baseline of wet everything supports

00:24:54,330 --> 00:25:07,810
anyway I don't have a very strong Pro

00:24:59,890 --> 00:25:09,720
System z runs today well the the

00:25:07,810 --> 00:25:12,490
question about whether to restart or not

00:25:09,720 --> 00:25:15,010
it's not really related to whether it's

00:25:12,490 --> 00:25:16,630
running or not there's you have to

00:25:15,010 --> 00:25:18,960
configure that yourself there's no way

00:25:16,630 --> 00:25:21,340
the system can know for you if you want

00:25:18,960 --> 00:25:24,040
this demon to be restarted and the other

00:25:21,340 --> 00:25:26,680
one not but it would help if there was a

00:25:24,040 --> 00:25:29,380
convenient way to selectively configure

00:25:26,680 --> 00:25:30,880
it and if you're in a cluster

00:25:29,380 --> 00:25:36,480
environment or a distributed environment

00:25:30,880 --> 00:25:39,160
the orchestration of the restarts I

00:25:36,480 --> 00:25:40,750
don't think it's easy for a package to

00:25:39,160 --> 00:25:42,400
do that because they don't know your

00:25:40,750 --> 00:25:44,560
environments but at least it should be

00:25:42,400 --> 00:25:46,360
easy to say this service shouldn't be

00:25:44,560 --> 00:25:48,640
restarted and I'm going to manage the

00:25:46,360 --> 00:25:50,590
restarting of the service with something

00:25:48,640 --> 00:25:52,659
else and this is this is something that

00:25:50,590 --> 00:25:55,440
the current interface

00:25:52,659 --> 00:25:59,200
she's pretty CRC that allows you to do

00:25:55,440 --> 00:26:04,269
but currently you need to write a script

00:25:59,200 --> 00:26:08,529
that encodes this information I think

00:26:04,269 --> 00:26:12,489
that was a declarative policy asset at

00:26:08,529 --> 00:26:18,129
the package at some point I don't know

00:26:12,489 --> 00:26:20,950
where it's where it's at now and you

00:26:18,129 --> 00:26:23,440
could also step further when you upgrade

00:26:20,950 --> 00:26:25,179
the package but don't restart currently

00:26:23,440 --> 00:26:27,070
you cannot assume that things will keep

00:26:25,179 --> 00:26:30,549
working yeah because the package assumes

00:26:27,070 --> 00:26:32,440
that on restarts on upgrade the demon

00:26:30,549 --> 00:26:34,409
will be restarted so things might break

00:26:32,440 --> 00:26:36,970
so what you actually want is a

00:26:34,409 --> 00:26:39,070
declarative way or an automated way to

00:26:36,970 --> 00:26:41,889
detect there is an upgrade and before I

00:26:39,070 --> 00:26:45,090
start running it I can detect that this

00:26:41,889 --> 00:26:48,249
would involve restart I don't want to do

00:26:45,090 --> 00:26:50,320
so I'm not doing this upgrade I'm doing

00:26:48,249 --> 00:26:54,190
this upgrade manually but the other

00:26:50,320 --> 00:26:56,379
upgrade for some other security update

00:26:54,190 --> 00:26:58,869
or package involves things that are

00:26:56,379 --> 00:27:02,379
allowed but there's no way to detect

00:26:58,869 --> 00:27:03,700
that there's no way to describe that and

00:27:02,379 --> 00:27:05,019
obviously then there is no way to

00:27:03,700 --> 00:27:06,700
orchestrate it because you don't even

00:27:05,019 --> 00:27:09,009
have the information so you cannot deal

00:27:06,700 --> 00:27:12,159
with it yeah there is there is an issue

00:27:09,009 --> 00:27:15,460
we have sometimes with G unique own that

00:27:12,159 --> 00:27:20,739
we used to run a Python back-end

00:27:15,460 --> 00:27:23,649
services and sometimes when a module

00:27:20,739 --> 00:27:29,109
that's deep in the dependency chain

00:27:23,649 --> 00:27:31,239
updates and G unicorn tries to read out

00:27:29,109 --> 00:27:34,619
the module then it breaks because it

00:27:31,239 --> 00:27:38,889
uses the old version of the module and

00:27:34,619 --> 00:27:42,369
does some OCD declarative that's even

00:27:38,889 --> 00:27:44,619
very it's actually currently in

00:27:42,369 --> 00:27:47,739
experimental was last updated in May

00:27:44,619 --> 00:27:50,789
this year by voter for health okay

00:27:47,739 --> 00:27:53,879
that's interesting

00:27:50,789 --> 00:27:59,409
yeah it's it's a hard problem and

00:27:53,879 --> 00:28:01,509
there's a bug from him nine one one to

00:27:59,409 --> 00:28:04,259
nine Oh policy our CD is about interface

00:28:01,509 --> 00:28:04,259
please replace it

00:28:04,979 --> 00:28:08,969
yeah I think we can agree with that

00:28:24,040 --> 00:28:31,280
but Sidman yeah I think I think overall

00:28:28,390 --> 00:28:35,570
Debian or the Linux system are not made

00:28:31,280 --> 00:28:37,960
to be automated so that's like the basic

00:28:35,570 --> 00:28:41,240
problem like you have freeform

00:28:37,960 --> 00:28:44,210
configurations where anybody can write

00:28:41,240 --> 00:28:47,810
anything into it nobody knows what

00:28:44,210 --> 00:28:50,450
syntactically correct what's not so I

00:28:47,810 --> 00:28:53,210
mean it's from the base up so it's all

00:28:50,450 --> 00:28:56,600
touching patching patching and doing

00:28:53,210 --> 00:29:01,070
half solutions or I mean it's heuristics

00:28:56,600 --> 00:29:03,980
actually it's not so you have stems in

00:29:01,070 --> 00:29:09,280
mind that do you have systems in mind

00:29:03,980 --> 00:29:09,280
that are better suited for this kind of

00:29:11,350 --> 00:29:21,470
configuration format specified how will

00:29:16,160 --> 00:29:24,860
the syntax is so I mean then you can

00:29:21,470 --> 00:29:29,090
know it works configuration files are

00:29:24,860 --> 00:29:31,490
just there's something there maybe it's

00:29:29,090 --> 00:29:36,020
even shell scripts that get executed or

00:29:31,490 --> 00:29:37,910
something or even declarative

00:29:36,020 --> 00:29:40,190
configuration files that pretend to be

00:29:37,910 --> 00:29:43,580
shell scripts but aren't really like the

00:29:40,190 --> 00:29:48,260
system the environment fights that crazy

00:29:43,580 --> 00:29:52,790
 have you investigated non Debian

00:29:48,260 --> 00:29:56,060
systems I'm thinking things like things

00:29:52,790 --> 00:30:02,270
like based on etcd and like chorus yeah

00:29:56,060 --> 00:30:04,670
no mostly mostly because of lack of time

00:30:02,270 --> 00:30:08,890
because that's I think that's like

00:30:04,670 --> 00:30:08,890
interesting but I don't have the time

00:30:14,520 --> 00:30:20,490
sorry if I have missed that but I think

00:30:17,290 --> 00:30:25,660
that elephant in the room is kubernetes

00:30:20,490 --> 00:30:29,230
which is declarative and like two years

00:30:25,660 --> 00:30:31,750
ago I did talks on kubernetes myself

00:30:29,230 --> 00:30:35,250
because then it was still somewhat

00:30:31,750 --> 00:30:39,460
simple and understandable and it was

00:30:35,250 --> 00:30:44,320
clear that the implementation would go

00:30:39,460 --> 00:30:47,380
in such over complex direction as it has

00:30:44,320 --> 00:30:51,220
gone now I think it's just a nightmare

00:30:47,380 --> 00:30:54,820
at this point in time and a year later I

00:30:51,220 --> 00:30:56,770
gave a talk about system D because I

00:30:54,820 --> 00:30:59,770
realized hey as long as you have one

00:30:56,770 --> 00:31:04,320
system or running containers with system

00:30:59,770 --> 00:31:07,570
D is just very easy and convenient and

00:31:04,320 --> 00:31:11,170
there were actually attempts like fleet

00:31:07,570 --> 00:31:15,690
D to have an orchestration layer on top

00:31:11,170 --> 00:31:18,970
of system D fleet e was by core OS but

00:31:15,690 --> 00:31:23,140
they stopped development in favor of

00:31:18,970 --> 00:31:27,180
kubernetes but I think the basic idea is

00:31:23,140 --> 00:31:33,850
still good and there are still ideas

00:31:27,180 --> 00:31:36,150
like deployment in kubernetes that you

00:31:33,850 --> 00:31:39,150
can learn from but please don't use

00:31:36,150 --> 00:31:39,150
kubernetes

00:31:41,059 --> 00:31:48,000
so in give also an example on how things

00:31:46,470 --> 00:31:51,360
could be really complicated and

00:31:48,000 --> 00:31:54,179
oppressor level so the way to upgrade an

00:31:51,360 --> 00:31:58,530
openstack cluster is to first upgrade

00:31:54,179 --> 00:32:02,309
the code so to do that you would shut

00:31:58,530 --> 00:32:04,919
down the Nova conductors on your

00:32:02,309 --> 00:32:07,580
controller machines then grade the code

00:32:04,919 --> 00:32:12,600
everywhere and then do e be sync and

00:32:07,580 --> 00:32:15,270
then we start the Nova conductors so

00:32:12,600 --> 00:32:20,070
there is absolutely no way that the

00:32:15,270 --> 00:32:25,820
packages are aware of that and so it'd

00:32:20,070 --> 00:32:28,080
be nice if we could have somehow some

00:32:25,820 --> 00:32:31,080
system management things on the cluster

00:32:28,080 --> 00:32:32,190
level for this type of things and this

00:32:31,080 --> 00:32:35,730
type of events

00:32:32,190 --> 00:32:38,150
I really wouldn't like to have something

00:32:35,730 --> 00:32:41,160
specific to one type of cluster and

00:32:38,150 --> 00:32:42,870
probably be nicer if we could design

00:32:41,160 --> 00:32:48,059
together something that will work for

00:32:42,870 --> 00:32:50,480
everyone how does how do people who run

00:32:48,059 --> 00:32:53,220
OpenStack in production do upgrades

00:32:50,480 --> 00:32:56,970
currently how do they orchestrate

00:32:53,220 --> 00:32:59,570
upgrades do they orchestrate upgrades or

00:32:56,970 --> 00:33:02,760
do they do stuff manually because that's

00:32:59,570 --> 00:33:04,890
like I'm I'm sure that some people

00:33:02,760 --> 00:33:09,929
manage to do it somewhere taught ematic

00:33:04,890 --> 00:33:12,570
lee so i people do that with and she

00:33:09,929 --> 00:33:14,190
will somehow it's probably easier to do

00:33:12,570 --> 00:33:16,290
it with uncivil and it would be with

00:33:14,190 --> 00:33:18,840
puppets because like you said you can

00:33:16,290 --> 00:33:21,330
orchestrate with no trees first and text

00:33:18,840 --> 00:33:24,150
etc or things like say for example it

00:33:21,330 --> 00:33:26,970
works wonderfully with with ansible you

00:33:24,150 --> 00:33:31,440
grid nodes one by one and then it's okay

00:33:26,970 --> 00:33:33,510
they rejoin the cluster for OpenStack

00:33:31,440 --> 00:33:37,620
stuff I'm not sure how people do it I

00:33:33,510 --> 00:33:42,059
tend to do some things manually some

00:33:37,620 --> 00:33:44,309
part to magically like for example I

00:33:42,059 --> 00:33:48,150
would grade just disturb grade manually

00:33:44,309 --> 00:33:51,370
compute node and rent a path on top for

00:33:48,150 --> 00:33:56,050
a controller with RabbitMQ

00:33:51,370 --> 00:33:59,380
caressing pacemaker and gallery right

00:33:56,050 --> 00:34:04,050
becomes really tricky and I prefer to do

00:33:59,380 --> 00:34:07,050
it finally okay that's just me I can't

00:34:04,050 --> 00:34:07,050
understand

00:34:31,129 --> 00:34:39,090
is there a better way to lose things

00:34:34,950 --> 00:34:39,780
than kubernetes and which one would that

00:34:39,090 --> 00:34:42,960
be

00:34:39,780 --> 00:34:45,540
I mean I'm using kubernetes and I'm

00:34:42,960 --> 00:34:48,240
fascinated by this hugely complex

00:34:45,540 --> 00:34:56,790
machine yeah I completely don't

00:34:48,240 --> 00:34:59,880
understand is there something better is

00:34:56,790 --> 00:35:02,580
a model to use to see how things could

00:34:59,880 --> 00:35:04,170
be nice these days I don't even know if

00:35:02,580 --> 00:35:07,140
there's something in this space at all

00:35:04,170 --> 00:35:10,980
that's not keeping it is it's right I

00:35:07,140 --> 00:35:15,810
think it's the only thing that I know

00:35:10,980 --> 00:35:21,210
that there's large-scale container

00:35:15,810 --> 00:35:25,109
orchestration I mean kubernetes has

00:35:21,210 --> 00:35:28,440
stuff like if you want to change the

00:35:25,109 --> 00:35:32,210
owner of some file it's impossible I

00:35:28,440 --> 00:35:35,270
mean really basic things so we deploy

00:35:32,210 --> 00:35:39,840
some configuration and want to have it

00:35:35,270 --> 00:35:42,570
owned by some user I mean it's possible

00:35:39,840 --> 00:35:49,470
because there's some your incompleteness

00:35:42,570 --> 00:35:51,830
somewhere but I mean takes a degree to

00:35:49,470 --> 00:35:51,830
do that

00:35:52,240 --> 00:36:07,060
I I think we have some minutes left I'd

00:36:04,060 --> 00:36:11,260
like to try we've we've talked a lot

00:36:07,060 --> 00:36:15,160
about service deployments there were a

00:36:11,260 --> 00:36:19,030
few things about packaging that rubbed

00:36:15,160 --> 00:36:21,369
me the wrong way does anyone else have

00:36:19,030 --> 00:36:25,270
experience with actually deploying from

00:36:21,369 --> 00:36:29,800
Debian packages and how they reconcile

00:36:25,270 --> 00:36:30,640
that with pushing stuff to Debian if not

00:36:29,800 --> 00:36:35,280
and that's fine

00:36:30,640 --> 00:36:35,280
I'd stay alone and sad in my corner

00:36:37,260 --> 00:36:44,230
limited experience we used to be

00:36:40,300 --> 00:36:47,170
building moodle packages with client

00:36:44,230 --> 00:36:50,250
code in there with dependencies and we

00:36:47,170 --> 00:36:53,260
stopped doing that because you have to

00:36:50,250 --> 00:36:54,900
you push code and you build a tab in

00:36:53,260 --> 00:36:57,220
package you upload that to a repository

00:36:54,900 --> 00:36:58,869
then you have to go talk to the machine

00:36:57,220 --> 00:37:00,099
to make sure it updates the repository

00:36:58,869 --> 00:37:06,040
and install the package it's a lot of

00:37:00,099 --> 00:37:11,220
steps to just push code and I think

00:37:06,040 --> 00:37:14,609
maybe one experience in that area was I

00:37:11,220 --> 00:37:21,460
don't remember his name but he he did

00:37:14,609 --> 00:37:26,320
the free service to replace the profile

00:37:21,460 --> 00:37:28,750
images what is the name of the Oh

00:37:26,320 --> 00:37:31,660
Gravatar yes yes someone did

00:37:28,750 --> 00:37:33,760
pimalia exactly and I think he did to

00:37:31,660 --> 00:37:36,099
talk about relying only on they been

00:37:33,760 --> 00:37:38,230
stable too for his development and I

00:37:36,099 --> 00:37:41,080
think he stopped also partly because of

00:37:38,230 --> 00:37:42,670
this it's just too long but maybe one

00:37:41,080 --> 00:37:44,380
one thing we're also discussing

00:37:42,670 --> 00:37:45,910
yesterday is this fast-track idea

00:37:44,380 --> 00:37:47,470
because one of the constraint of Debian

00:37:45,910 --> 00:37:50,170
is that you have to go unstable testing

00:37:47,470 --> 00:37:52,960
stable and then if you want to rely with

00:37:50,170 --> 00:37:54,460
things to rely on things are unstable

00:37:52,960 --> 00:37:56,730
then you have to basically wait for two

00:37:54,460 --> 00:38:02,380
years and be ready to years in advance

00:37:56,730 --> 00:38:04,570
so maybe the I also have this iris

00:38:02,380 --> 00:38:05,540
Ophelia's push to push to have things in

00:38:04,570 --> 00:38:08,660
Debian but

00:38:05,540 --> 00:38:13,130
I cannot bear to wait 40 years yeah so

00:38:08,660 --> 00:38:16,820
they're in stable if the flipside of

00:38:13,130 --> 00:38:18,410
that is that if you taking packages that

00:38:16,820 --> 00:38:20,450
basically come from and stable that

00:38:18,410 --> 00:38:22,340
there might be changes that your

00:38:20,450 --> 00:38:23,960
environment doesn't handle and if you do

00:38:22,340 --> 00:38:27,080
upgrades automatically then you'll have

00:38:23,960 --> 00:38:29,960
breakage so if you want to do that

00:38:27,080 --> 00:38:34,150
you'll have to have your own automated

00:38:29,960 --> 00:38:37,400
QA if you want to try out which will be

00:38:34,150 --> 00:38:39,740
interesting but a lot of work because

00:38:37,400 --> 00:38:43,760
the reason to use stable is because you

00:38:39,740 --> 00:38:45,140
want to be able to assume that the

00:38:43,760 --> 00:38:46,580
breakage will have been detected by

00:38:45,140 --> 00:38:49,700
somebody else and stopped before it

00:38:46,580 --> 00:38:51,920
reaches your system ideally that's kind

00:38:49,700 --> 00:38:54,170
of what I want to introduce at work with

00:38:51,920 --> 00:38:57,080
like adding adding proposed upgrades to

00:38:54,170 --> 00:39:03,650
our staging environments and probably

00:38:57,080 --> 00:39:05,390
this would also like we we've started to

00:39:03,650 --> 00:39:07,460
build a staging environment with

00:39:05,390 --> 00:39:09,080
end-to-end tests of our whole

00:39:07,460 --> 00:39:12,800
infrastructure in the staging

00:39:09,080 --> 00:39:14,570
environment so basically pushing a new

00:39:12,800 --> 00:39:16,730
task making sure that it comes out the

00:39:14,570 --> 00:39:19,720
other end and that the results have the

00:39:16,730 --> 00:39:22,610
shape that we expect and so yeah we

00:39:19,720 --> 00:39:26,150
could use that as a cue a system for

00:39:22,610 --> 00:39:28,100
fast tracked updates as well but that's

00:39:26,150 --> 00:39:30,680
a lot of work to put in place or you

00:39:28,100 --> 00:39:33,230
could do it for in stable and help

00:39:30,680 --> 00:39:35,510
detect issues earlier than they are

00:39:33,230 --> 00:39:37,690
detected now the main issue is somebody

00:39:35,510 --> 00:39:40,220
will have to detect it somewhere first

00:39:37,690 --> 00:39:44,750
and if you're doing it that's a great

00:39:40,220 --> 00:39:47,330
service to the community I sometimes

00:39:44,750 --> 00:39:51,560
found a little bit too difficult to do

00:39:47,330 --> 00:39:54,620
some updates in too stable to facilitate

00:39:51,560 --> 00:39:59,950
upgrades I have examples in mind which I

00:39:54,620 --> 00:40:03,470
it's probably worth sharing today but

00:39:59,950 --> 00:40:09,050
one thing is sometimes the upstream is

00:40:03,470 --> 00:40:12,860
releasing a 700k line of not key lines

00:40:09,050 --> 00:40:15,020
but like yeah huge deep and it's

00:40:12,860 --> 00:40:16,820
impossible for the stable release team

00:40:15,020 --> 00:40:19,100
to review it especially if you consider

00:40:16,820 --> 00:40:22,260
there are only two person doing that

00:40:19,100 --> 00:40:26,610
so I'm not sure what the path to do that

00:40:22,260 --> 00:40:31,230
but at some point it's it's it's

00:40:26,610 --> 00:40:33,150
sometimes impossible to do and don't

00:40:31,230 --> 00:40:40,020
know if anyone has ideas about how to

00:40:33,150 --> 00:40:41,160
fix that problem those are really bugs

00:40:40,020 --> 00:40:43,230
that have been addressed that I'm

00:40:41,160 --> 00:40:45,510
talking about you know just that you

00:40:43,230 --> 00:40:49,070
don't have enough manpower to to edit it

00:40:45,510 --> 00:40:49,070
and accept or reject it

00:40:55,730 --> 00:41:02,060
I would like to mention that I just to

00:40:59,270 --> 00:41:04,609
consider that there some upstream

00:41:02,060 --> 00:41:07,579
projects do a lot of QA so they are

00:41:04,609 --> 00:41:11,960
really serious and they also have Debian

00:41:07,579 --> 00:41:14,570
packages so I mean sometimes it differs

00:41:11,960 --> 00:41:16,790
a lot between which package you're

00:41:14,570 --> 00:41:19,820
talking about because sometimes upstream

00:41:16,790 --> 00:41:25,160
there's much more QA than a beyond would

00:41:19,820 --> 00:41:29,000
ever ever do so I think one needs to

00:41:25,160 --> 00:41:31,099
differentiate this so I mean the model

00:41:29,000 --> 00:41:34,010
in Debian now is that stable is stable

00:41:31,099 --> 00:41:38,329
and there's some stamp on it it's all

00:41:34,010 --> 00:41:41,960
good I think that's not really true I'm

00:41:38,329 --> 00:41:44,810
pretty sure that today if you show the

00:41:41,960 --> 00:41:47,810
release team that upstream does decent

00:41:44,810 --> 00:41:50,300
QA on their stable branches there is

00:41:47,810 --> 00:41:53,420
team will be open to considering

00:41:50,300 --> 00:41:59,570
following upstream releases at least

00:41:53,420 --> 00:42:01,819
well in a stable branch it's not like

00:41:59,570 --> 00:42:04,069
it's not an automatic pass and even if

00:42:01,819 --> 00:42:06,710
upstream does a lot of QA sometimes they

00:42:04,069 --> 00:42:08,890
mess up I think that was one example of

00:42:06,710 --> 00:42:13,069
Postgres equal messing up one of the

00:42:08,890 --> 00:42:16,130
point releases and it happens and yeah

00:42:13,069 --> 00:42:21,079
there's no there's no real silver bullet

00:42:16,130 --> 00:42:27,710
for doing that but yeah I mean again it

00:42:21,079 --> 00:42:29,450
takes some kind of commitment one from

00:42:27,710 --> 00:42:31,540
upstream and two from the Debian

00:42:29,450 --> 00:42:34,190
maintainer to actually follow up on

00:42:31,540 --> 00:42:37,339
issues that can arise in stable and

00:42:34,190 --> 00:42:43,910
that's that's a lot of work for some

00:42:37,339 --> 00:42:48,819
systems well if I think we're getting to

00:42:43,910 --> 00:42:51,859
the end of the time struts so thanks for

00:42:48,819 --> 00:42:53,390
the discussion I hope there was some

00:42:51,859 --> 00:42:57,800
useful tidbits in there

00:42:53,390 --> 00:43:00,770
I certainly had some interesting things

00:42:57,800 --> 00:43:04,089
I heard some it's trendy I heard some

00:43:00,770 --> 00:43:04,089
interesting things so thank you

00:43:04,090 --> 00:43:06,150

YouTube URL: https://www.youtube.com/watch?v=Jn074brnrkQ


