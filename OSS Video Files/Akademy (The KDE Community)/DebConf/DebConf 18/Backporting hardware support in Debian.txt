Title: Backporting hardware support in Debian
Publication date: 2018-08-01
Playlist: DebConf 18
Description: 
	by Ben Hutchings

At: DebConf18
https://debconf18.debconf.org/talks/92-backporting-hardware-support-in-debian/

We use several different approaches to improve hardware support during a Debian stable release:

- Updating selected drivers in the linux package
- Adding newer versions of linux and other packages to the associated backports suite
- Adding an alternate kernel version in the stable suite (etch-and-a-half, jessie LTS)

Updating selected drivers in the linux package (and other driver packages) is the best way to make new hardware support available to users, but it can require substantial development time and carries a relatively high risk of regression.  I did many kernel driver backports during the stretch and wheezy releases, but haven't found time to do so more recently.

The backports suites can provide comprehensive support for new hardware, but they are less easily available (for example, there is no official installer build using the kernel from backports).  The backports suites are often the last to get security updates, and they are not maintained during the LTS period.

We've previously tried to add alternate kernel versions half way through a stable cycle, with limited success.  For etch, the etch-and-a-half update added new versions of the Linux kernel, some X drivers, and the installer to etch shortly before the lenny release.  For jessie, there were plans to improve Arm64 support in a similar way, but these were overtaken by the stretch release.

How can we do better?

Room: Yushan (玉山)
Scheduled start: 2018-07-31 17:30:00
Captions: 
	00:00:04,840 --> 00:00:13,980
I am going to sit down and I'm going to

00:00:10,230 --> 00:00:19,930
take some notes but if you can also

00:00:13,980 --> 00:00:26,460
write some help with taking notes in

00:00:19,930 --> 00:00:26,460
gobby will be good

00:00:27,779 --> 00:00:35,370
so I were there right

00:00:45,690 --> 00:00:50,010
I'm dating selected drivers

00:01:04,680 --> 00:01:15,840
is anyone interested in working on that

00:01:11,590 --> 00:01:20,730
because in the past when we've done

00:01:15,840 --> 00:01:25,390
driver updates in the kernel that's

00:01:20,730 --> 00:01:29,470
mostly been me taking time to attempt to

00:01:25,390 --> 00:01:31,540
back port back port the drivers and then

00:01:29,470 --> 00:01:38,190
trying to get other people to test them

00:01:31,540 --> 00:01:38,190
and not always getting a lot of feedback

00:01:42,060 --> 00:01:50,440
sometimes I've had some times we've had

00:01:46,920 --> 00:01:54,070
contributions from either the hardware

00:01:50,440 --> 00:01:56,590
vendor or another interested party who's

00:01:54,070 --> 00:02:01,600
done the back port tested it on hardware

00:01:56,590 --> 00:02:09,820
available to them but it doesn't happen

00:02:01,600 --> 00:02:15,130
very often I is there anyone who would

00:02:09,820 --> 00:02:18,209
be interested in working to to do

00:02:15,130 --> 00:02:18,209
driver back force

00:02:25,790 --> 00:02:40,700
or indeed contracting developers to work

00:02:32,629 --> 00:02:42,709
on to work on that No so this doesn't

00:02:40,700 --> 00:02:51,590
look like it's a very viable option the

00:02:42,709 --> 00:02:56,090
lead foot for now I can feel my core

00:02:51,590 --> 00:02:58,010
possibly that one works when so you know

00:02:56,090 --> 00:03:05,840
there were about forty drivers available

00:02:58,010 --> 00:03:07,910
on zero wonder org for a while what came

00:03:05,840 --> 00:03:10,910
out of that was that yep as you said in

00:03:07,910 --> 00:03:12,620
your in your off notes a it is prone to

00:03:10,910 --> 00:03:15,140
regressions and quite often it's quite

00:03:12,620 --> 00:03:16,760
painful especially in fast-moving areas

00:03:15,140 --> 00:03:19,310
like graphics to do a back port because

00:03:16,760 --> 00:03:21,859
the kernel infrastructure freshers

00:03:19,310 --> 00:03:24,170
insurance so fast that you end up you

00:03:21,859 --> 00:03:26,840
basically end up writing a new driver so

00:03:24,170 --> 00:03:28,489
in a slow moving area you could maybe do

00:03:26,840 --> 00:03:31,010
that I mean I would say like especially

00:03:28,489 --> 00:03:32,900
if if a hardware vendor comes to you and

00:03:31,010 --> 00:03:34,579
says like we actually have the hardware

00:03:32,900 --> 00:03:36,349
we'd like it and you get some support

00:03:34,579 --> 00:03:38,269
from them it's it's viable but other

00:03:36,349 --> 00:03:41,480
than that I mean even you know even with

00:03:38,269 --> 00:03:43,459
Intel smacking some of these older GPUs

00:03:41,480 --> 00:03:47,329
would simply stop working on an

00:03:43,459 --> 00:03:49,579
important driver because nobody you know

00:03:47,329 --> 00:03:50,870
nobody except a random end-user

00:03:49,579 --> 00:03:52,880
somewhere on the other side of the world

00:03:50,870 --> 00:03:54,829
have the hardware and we wouldn't find

00:03:52,880 --> 00:03:57,980
out until it hit them and that was with

00:03:54,829 --> 00:04:01,430
someone the size of Intel backing the

00:03:57,980 --> 00:04:02,959
work doing testing so I kind of agree

00:04:01,430 --> 00:04:06,519
with what you said in the notes it's not

00:04:02,959 --> 00:04:06,519
a hugely viable approach

00:04:46,830 --> 00:04:56,180
so we have new conversions going into

00:04:51,540 --> 00:04:58,950
the that ports stable back ports sweet

00:04:56,180 --> 00:05:02,660
usually very soon after they the

00:04:58,950 --> 00:05:02,660
corresponding version gesture testing

00:05:05,630 --> 00:05:11,640
what we don't currently have is a way to

00:05:08,700 --> 00:05:15,270
use that in the installer officially

00:05:11,640 --> 00:05:22,830
although I was told just before I came

00:05:15,270 --> 00:05:26,690
here that there that's probably going to

00:05:22,830 --> 00:05:26,690
be possible in the very near future

00:05:27,110 --> 00:05:36,350
how how's that working out are people

00:05:32,040 --> 00:05:39,420
using kernel for back ports are there

00:05:36,350 --> 00:05:45,960
other compatibility issues with using it

00:05:39,420 --> 00:05:51,780
with the stable user learned how what

00:05:45,960 --> 00:05:53,850
are people doing to get to install

00:05:51,780 --> 00:05:56,210
systems with that kernel version at the

00:05:53,850 --> 00:05:56,210
moment

00:06:11,120 --> 00:06:14,810
been using backports kernels on a few

00:06:13,280 --> 00:06:17,570
different systems it's not a huge sample

00:06:14,810 --> 00:06:19,250
size but I've had no real problems

00:06:17,570 --> 00:06:20,660
haven't used them with the Installer

00:06:19,250 --> 00:06:23,120
I've just installed

00:06:20,660 --> 00:06:25,940
you know upgraded from back ports but

00:06:23,120 --> 00:06:28,790
haven't encountered any problems with it

00:06:25,940 --> 00:06:34,220
so far so it seems like it's at least

00:06:28,790 --> 00:06:36,830
too good so so in that case the so why

00:06:34,220 --> 00:06:39,200
did you want to upgrade to the version

00:06:36,830 --> 00:06:41,150
in back ports I can't remember the exact

00:06:39,200 --> 00:06:43,100
details I needed some new feature that

00:06:41,150 --> 00:06:48,770
was only available in a newer kernel I

00:06:43,100 --> 00:06:50,480
had to try it so for that reason and but

00:06:48,770 --> 00:06:53,080
I didn't encounter any problems with it

00:06:50,480 --> 00:06:57,490
it seemed to work fairly smoothly so

00:06:53,080 --> 00:06:57,490
just to give you a small data point

00:07:03,720 --> 00:07:06,720
okay

00:07:08,140 --> 00:07:13,780
how about summit let's have a show of

00:07:10,240 --> 00:07:17,400
hands who who's using cones from back

00:07:13,780 --> 00:07:17,400
ports on on subsystems

00:07:22,500 --> 00:07:29,280
okay which some of you like to speak

00:07:26,520 --> 00:07:33,180
about how that's working only if you've

00:07:29,280 --> 00:07:34,800
run into if you've run into any

00:07:33,180 --> 00:07:37,310
compatibility issues or if that's

00:07:34,800 --> 00:07:43,890
working out fine

00:07:37,310 --> 00:07:47,810
if you had difficulty installing or it's

00:07:43,890 --> 00:07:47,810
it's all everything's good

00:07:57,340 --> 00:08:00,640
all right

00:08:33,110 --> 00:08:38,930
so the last option I wrote about there

00:08:36,530 --> 00:08:46,310
was adding an alternate kernel version

00:08:38,930 --> 00:08:49,220
to the stable suite which is something

00:08:46,310 --> 00:08:52,460
that has been tried before you know the

00:08:49,220 --> 00:08:55,400
edge and a half release and I've just

00:08:52,460 --> 00:08:58,990
done that again for Jessie but only

00:08:55,400 --> 00:09:04,180
because the because Jessie back boxes is

00:08:58,990 --> 00:09:04,180
not going to accept new uploads

00:09:13,900 --> 00:09:23,790
doing it does anyone have an opinion on

00:09:17,950 --> 00:09:23,790
on whether this is sensible supportable

00:09:25,710 --> 00:09:37,140
something we should do for something we

00:09:32,260 --> 00:09:37,140
should leave is stretch or offer Buster

00:09:38,910 --> 00:09:48,810
or is is as if I'd have this or to do

00:09:45,160 --> 00:09:48,810
this through back ports

00:09:59,500 --> 00:10:04,870
so answer that with another question how

00:10:02,440 --> 00:10:06,610
much capacity do you have and how many

00:10:04,870 --> 00:10:09,040
more people do you require to make it

00:10:06,610 --> 00:10:11,199
viable because I obviously a lot of

00:10:09,040 --> 00:10:13,899
people are using back ports so there's a

00:10:11,199 --> 00:10:18,370
requirement there or at least a desire

00:10:13,899 --> 00:10:20,319
for newer kernels how much extra effort

00:10:18,370 --> 00:10:23,100
is it to make it a sort of first class

00:10:20,319 --> 00:10:25,660
will actually update the kernel in

00:10:23,100 --> 00:10:28,629
stable release so long as the version is

00:10:25,660 --> 00:10:33,490
essentially the same that it was so long

00:10:28,629 --> 00:10:35,199
sleeve version is the back ported

00:10:33,490 --> 00:10:39,699
version is essentially the same as the

00:10:35,199 --> 00:10:44,790
version in the next the next suite next

00:10:39,699 --> 00:10:48,430
next release then there's very little

00:10:44,790 --> 00:10:50,709
ongoing maintenance effort needed this

00:10:48,430 --> 00:10:57,040
sort of course Assunta back port and

00:10:50,709 --> 00:11:00,790
remove dependencies or conflicts that

00:10:57,040 --> 00:11:05,110
might exist in the oldest or in the

00:11:00,790 --> 00:11:10,600
older release but that's you do it once

00:11:05,110 --> 00:11:12,610
and then merge changes after that and

00:11:10,600 --> 00:11:17,670
that's that's in my experience that's

00:11:12,610 --> 00:11:21,029
gone pretty smoothly okay

00:11:17,670 --> 00:11:23,760
in that case that would seem like a

00:11:21,029 --> 00:11:26,010
sensible approach to me it's my opinion

00:11:23,760 --> 00:11:32,310
probably time for a show of hands vote

00:11:26,010 --> 00:11:35,550
if no one else has anything to say given

00:11:32,310 --> 00:11:38,700
then official backboards are not so

00:11:35,550 --> 00:11:40,500
official for example back reports we

00:11:38,700 --> 00:11:42,630
cannot do it in the backboards i would

00:11:40,500 --> 00:11:46,890
love to see the colonel in the stable

00:11:42,630 --> 00:11:48,660
your Colonels in the stable well in

00:11:46,890 --> 00:11:54,839
practice people do file bugs on the

00:11:48,660 --> 00:11:58,170
versions in back ports and i i certainly

00:11:54,839 --> 00:12:02,579
treat them like any other bug report in

00:11:58,170 --> 00:12:10,010
part because the colonel isn't isn't

00:12:02,579 --> 00:12:12,329
really dependent on me if the libraries

00:12:10,010 --> 00:12:17,220
and if the userspace libraries that

00:12:12,329 --> 00:12:19,589
might be over in in stable so the

00:12:17,220 --> 00:12:25,500
charters of about being specific to the

00:12:19,589 --> 00:12:27,690
back ports environment or introducing

00:12:25,500 --> 00:12:30,470
the backporting are generally very low

00:12:27,690 --> 00:12:30,470
so

00:12:35,540 --> 00:12:46,279
I think on the I think bug reporting and

00:12:44,389 --> 00:12:49,940
maybe never this possible that people

00:12:46,279 --> 00:12:52,730
are discouraged from filing bugs in the

00:12:49,940 --> 00:12:55,940
inbox Colonel because of this a general

00:12:52,730 --> 00:12:59,569
policy as long as we have newer kernels

00:12:55,940 --> 00:13:02,509
for the stable it doesn't matter if I

00:12:59,569 --> 00:13:04,009
get it from back part so it's there as

00:13:02,509 --> 00:13:06,610
long as it works I'm fine

00:13:04,009 --> 00:13:11,019
and it would be good to see it's

00:13:06,610 --> 00:13:11,019
officially in the stable

00:13:15,510 --> 00:13:18,200
thank you

00:13:29,580 --> 00:13:35,910
or so the epic parts colonel are a

00:13:32,370 --> 00:13:38,459
different kind of security support once

00:13:35,910 --> 00:13:42,120
you get to the back parts colonel your

00:13:38,459 --> 00:13:44,459
first two more often upgrade so yes and

00:13:42,120 --> 00:13:47,490
sustainable yes yeah so that might be

00:13:44,459 --> 00:13:49,019
interesting if we have something like go

00:13:47,490 --> 00:13:51,240
within your channel which provides

00:13:49,019 --> 00:13:53,250
support support for example I think it's

00:13:51,240 --> 00:13:57,540
available only with a more modern

00:13:53,250 --> 00:13:59,160
version than what's in stretch so it

00:13:57,540 --> 00:14:01,709
might be interesting to have something

00:13:59,160 --> 00:14:05,279
available which is back ported from the

00:14:01,709 --> 00:14:07,950
upcoming release not sure if this is

00:14:05,279 --> 00:14:10,790
feasible for security support in RTS

00:14:07,950 --> 00:14:13,620
land this might be something to consider

00:14:10,790 --> 00:14:15,740
but if that's an option would be great I

00:14:13,620 --> 00:14:15,740
think

00:14:16,190 --> 00:14:21,540
no no entirely I sure I understood that

00:14:19,079 --> 00:14:23,220
about the security support I mean once

00:14:21,540 --> 00:14:30,810
we have it in in the stable release it

00:14:23,220 --> 00:14:32,640
will be covered by LTS is you yes yes

00:14:30,810 --> 00:14:34,920
that would be great because the

00:14:32,640 --> 00:14:37,440
alternative is to just always update

00:14:34,920 --> 00:14:39,660
what's available in stretch back ports

00:14:37,440 --> 00:14:42,209
currently conversion

00:14:39,660 --> 00:14:44,760
you know the situation where which I had

00:14:42,209 --> 00:14:47,820
with the Lenovo driver and for auto

00:14:44,760 --> 00:14:50,190
support only option would be to just

00:14:47,820 --> 00:14:52,050
jump on a newer kernel version from from

00:14:50,190 --> 00:14:56,370
stretch backwards and then we are forced

00:14:52,050 --> 00:14:57,870
to always update the calendar yes you

00:14:56,370 --> 00:15:02,579
would you would have to keep updating

00:14:57,870 --> 00:15:03,450
until you get to until bastards out at

00:15:02,579 --> 00:15:05,250
which point you're then getting back

00:15:03,450 --> 00:15:08,070
balls from Buster which were more or

00:15:05,250 --> 00:15:12,949
less I would be the same upstream based

00:15:08,070 --> 00:15:18,860
version of course another thing we were

00:15:12,949 --> 00:15:18,860
but I think that

00:15:23,730 --> 00:15:29,829
adding support for an intermediate

00:15:26,529 --> 00:15:34,149
version between stable between the

00:15:29,829 --> 00:15:36,129
default stable kernel and testing and

00:15:34,149 --> 00:15:38,290
maintaining that a long-term that I

00:15:36,129 --> 00:15:40,389
don't think that's viable that's what I

00:15:38,290 --> 00:15:54,699
was afraid of yeah sorry

00:15:40,389 --> 00:15:58,360
of course I I just want to ask about the

00:15:54,699 --> 00:16:00,970
three options that we have here it seems

00:15:58,360 --> 00:16:03,850
to me that they too like conflict I mean

00:16:00,970 --> 00:16:04,839
we can two of them as long as we have

00:16:03,850 --> 00:16:07,540
the resources right

00:16:04,839 --> 00:16:10,629
and we are actually setting the priority

00:16:07,540 --> 00:16:15,189
which one is to be done first and which

00:16:10,629 --> 00:16:18,279
one is the next so my opinion is maybe

00:16:15,189 --> 00:16:21,009
we can have even more recent kernel

00:16:18,279 --> 00:16:25,709
versions in back posts which we do not

00:16:21,009 --> 00:16:29,019
provide the same level of security

00:16:25,709 --> 00:16:34,480
support so that people can still enjoy

00:16:29,019 --> 00:16:36,939
using your kernel versions but for the

00:16:34,480 --> 00:16:41,709
stable with this we because we have to

00:16:36,939 --> 00:16:44,769
provide security so we and because we do

00:16:41,709 --> 00:16:50,139
not have I guess we do not have in so

00:16:44,769 --> 00:16:53,799
many resources to provide enough like

00:16:50,139 --> 00:17:00,449
security updates so we we stick to the

00:16:53,799 --> 00:17:00,449
same version as the as the next release

00:17:03,610 --> 00:17:08,020
just like okay yeah

00:19:19,000 --> 00:19:35,039
right just anyone have anything to add

00:19:23,909 --> 00:19:35,039
any any opinions on any of the options

00:19:39,000 --> 00:19:51,400
would like to work on either driver

00:19:46,270 --> 00:19:54,130
updates or alternate kernel versions is

00:19:51,400 --> 00:19:56,820
in stable the bank ports I mean that

00:19:54,130 --> 00:20:03,720
that's that's what we have at the moment

00:19:56,820 --> 00:20:03,720
so probably no extra effort needed there

00:20:04,830 --> 00:20:12,429
so the kernel bugs in the backbone suite

00:20:08,620 --> 00:20:14,679
I could be interested in helping with

00:20:12,429 --> 00:20:18,809
updating drivers but I'd like to talk to

00:20:14,679 --> 00:20:18,809
you about that after okay thank you

00:21:04,890 --> 00:21:14,540
well I might as well all I stopped here

00:21:07,049 --> 00:21:14,540

YouTube URL: https://www.youtube.com/watch?v=7JWQJLLnQKw


