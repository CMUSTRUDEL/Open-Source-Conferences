Title: News from the APT team
Publication date: 2018-07-31
Playlist: DebConf 18
Description: 
	by Julian Andres Klode

At: DebConf18
https://debconf18.debconf.org/talks/70-news-from-the-apt-team/

This talk will look at the developments since last DebConf and what our plans are for the future. Highlights:

- zstd support for APT, dpkg; and what it means for us
- the dpkg frontend lock
- evaluation of seccomp sandboxing; problems with it
- happy eyeballs and what it means for apt on mixed ipv6/ipv4 networks
- new JSON-RPC-based hooks for apt; and an outlook on future possibilities for more complete RPC
- $random other bits

Room: Xueshan (雪山)
Scheduled start: 2018-07-30 17:30:00
Captions: 
	00:00:04,810 --> 00:00:11,629
okay so first unpacking allows us to

00:00:09,469 --> 00:00:12,870
improve the speed of bills I've got a

00:00:11,629 --> 00:00:15,180
package last image

00:00:12,870 --> 00:00:18,960
brothers called instance provisioning

00:00:15,180 --> 00:00:22,439
and stuff like that because unpack time

00:00:18,960 --> 00:00:25,800
dominates and we noticed that XE is

00:00:22,439 --> 00:00:29,489
quite slow it takes about thirty percent

00:00:25,800 --> 00:00:32,130
of the time for unpacking don't eat my

00:00:29,489 --> 00:00:35,820
data so if you don't do synchronized

00:00:32,130 --> 00:00:39,809
file system and it takes ten percent of

00:00:35,820 --> 00:00:41,940
the time without it and we can switch

00:00:39,809 --> 00:00:46,109
that we can switch from XE to CS CD

00:00:41,940 --> 00:00:50,539
which cuts the user time in half so it

00:00:46,109 --> 00:00:53,609
instead of taking so this means that

00:00:50,539 --> 00:00:57,420
instead of taking 40% the 40% of the

00:00:53,609 --> 00:00:59,609
unpack time basically go away and if you

00:00:57,420 --> 00:01:01,620
use the compression level the highest

00:00:59,609 --> 00:01:04,320
compression level CS CD has in the

00:01:01,620 --> 00:01:07,650
normal mode which is nineteen that file

00:01:04,320 --> 00:01:09,510
size is only six percent larger which

00:01:07,650 --> 00:01:11,729
basically means that downloads will be

00:01:09,510 --> 00:01:17,370
six percent slower at the same

00:01:11,729 --> 00:01:18,810
connection speed but that's a problem of

00:01:17,370 --> 00:01:21,720
course if you have slow connection speed

00:01:18,810 --> 00:01:24,300
but for upgrades we can solve the

00:01:21,720 --> 00:01:29,430
problem using Delta depths there will be

00:01:24,300 --> 00:01:33,210
a talk on Friday about deltas and this

00:01:29,430 --> 00:01:34,830
feature is available in apt 1.6 but it

00:01:33,210 --> 00:01:38,220
also needs support in the package we

00:01:34,830 --> 00:01:41,730
have added support for CSC decompression

00:01:38,220 --> 00:01:44,460
in D package in Ubuntu 1804 it's not in

00:01:41,730 --> 00:01:47,610
Debian yet so we just want to try out if

00:01:44,460 --> 00:01:50,460
it works or not if it does will support

00:01:47,610 --> 00:01:55,560
it and if not we'll just drop it

00:01:50,460 --> 00:01:57,960
eventually and another thing we were

00:01:55,560 --> 00:02:03,900
working on which some of you might have

00:01:57,960 --> 00:02:06,420
noticed is locking so sometimes you know

00:02:03,900 --> 00:02:08,729
when you're on a p-- in the middle of

00:02:06,420 --> 00:02:10,860
the transaction you get deep package

00:02:08,729 --> 00:02:13,349
error deep package status database is

00:02:10,860 --> 00:02:14,819
locked by another process the reason for

00:02:13,349 --> 00:02:18,900
that is that we currently have a race

00:02:14,819 --> 00:02:22,019
condition so when you run an app to

00:02:18,900 --> 00:02:25,290
install app first acquires to the D

00:02:22,019 --> 00:02:26,069
package lock and then before it executes

00:02:25,290 --> 00:02:33,030
the package

00:02:26,069 --> 00:02:35,069
has to release the lock and after de

00:02:33,030 --> 00:02:35,459
package ends it has to acquire the lock

00:02:35,069 --> 00:02:40,260
again

00:02:35,459 --> 00:02:41,670
so in these two cases before the D

00:02:40,260 --> 00:02:43,290
packet before D package acquires the

00:02:41,670 --> 00:02:44,280
lock and after D Packers release it and

00:02:43,290 --> 00:02:47,040
weari lock it

00:02:44,280 --> 00:02:51,359
the lock is lost and another process can

00:02:47,040 --> 00:02:55,379
run and clock our block ask from Ronnie

00:02:51,359 --> 00:02:58,709
D package again and the solution for

00:02:55,379 --> 00:03:01,620
that is to introduce a neck another lock

00:02:58,709 --> 00:03:06,030
file which is the lock front end lock

00:03:01,620 --> 00:03:09,419
and at the D package both acquire the

00:03:06,030 --> 00:03:12,060
front headlock normally but if t package

00:03:09,419 --> 00:03:16,230
is run by apt or another front end

00:03:12,060 --> 00:03:19,409
implementing this app tells it to not

00:03:16,230 --> 00:03:21,299
run do not acquire the front end lock so

00:03:19,409 --> 00:03:23,549
app will always keep the front end lock

00:03:21,299 --> 00:03:27,930
locked and the Packers will lock its

00:03:23,549 --> 00:03:29,459
normal lock so if you have another D

00:03:27,930 --> 00:03:32,939
pack em you want to run D package in

00:03:29,459 --> 00:03:35,220
parallel in another app or you want to

00:03:32,939 --> 00:03:37,319
run it on your own then the pecs will

00:03:35,220 --> 00:03:41,009
notice that the front headlock is still

00:03:37,319 --> 00:03:44,310
locked by apt and will not run which

00:03:41,009 --> 00:03:46,310
means that your apt process is safer now

00:03:44,310 --> 00:03:51,090
and should not be interrupted by

00:03:46,310 --> 00:03:53,970
concurrent D package runs and we

00:03:51,090 --> 00:03:56,669
implemented this in its implemented in D

00:03:53,970 --> 00:04:00,479
package the gift of the current master

00:03:56,669 --> 00:04:02,040
French and it should be released soon in

00:04:00,479 --> 00:04:04,949
the package one point nineteen point one

00:04:02,040 --> 00:04:06,720
and patches for apt Python app package

00:04:04,949 --> 00:04:09,989
geared and other tools will be coming

00:04:06,720 --> 00:04:15,019
later then mostly ready but they still

00:04:09,989 --> 00:04:18,019
need to find tweaking yeah can you go I

00:04:15,019 --> 00:04:18,019
think

00:04:19,879 --> 00:04:32,270
there's a mic I'm curious if if I'm not

00:04:27,180 --> 00:04:32,270
rude do I still need all that lacking

00:04:32,659 --> 00:04:39,270
well you're not rude you don't look

00:04:35,039 --> 00:04:40,800
normally say I'm running the upgrade in

00:04:39,270 --> 00:04:44,550
one window in another window on that

00:04:40,800 --> 00:04:47,580
route can I run that non-root queries

00:04:44,550 --> 00:04:50,009
without being locked you can run the

00:04:47,580 --> 00:04:51,599
non-root queries sometimes you get weird

00:04:50,009 --> 00:04:55,250
results because it's an inconsistent

00:04:51,599 --> 00:04:55,250
state but mostly it's going to be fine

00:04:55,310 --> 00:05:05,580
that's basically the same as it is now

00:04:58,310 --> 00:05:09,500
and the next thing that I talked about

00:05:05,580 --> 00:05:14,039
last Def Con was sack comp sent boxing

00:05:09,500 --> 00:05:17,520
so we add a sec comp cent boxing last

00:05:14,039 --> 00:05:19,379
year for our downloading methods because

00:05:17,520 --> 00:05:25,289
there's a lot of dangerous stuff in

00:05:19,379 --> 00:05:27,180
there like TLS and HTTP passes so we are

00:05:25,289 --> 00:05:29,669
working with untrusted input and we want

00:05:27,180 --> 00:05:32,039
to ensure that it can do the least

00:05:29,669 --> 00:05:35,460
damage possible if it's compromised

00:05:32,039 --> 00:05:38,069
somehow and second sandboxing allows us

00:05:35,460 --> 00:05:42,870
to restrict the sis codes that can be

00:05:38,069 --> 00:05:44,610
executed and other sis then we can risk

00:05:42,870 --> 00:05:46,740
them against Sisk then you can make

00:05:44,610 --> 00:05:48,900
other syscalls we can trap them or we

00:05:46,740 --> 00:05:54,240
can abort the program or we can make

00:05:48,900 --> 00:05:57,150
other Cisco's return an error and this

00:05:54,240 --> 00:05:58,889
works fine for some programs but if you

00:05:57,150 --> 00:06:00,839
have a lip see if you use lip see it's

00:05:58,889 --> 00:06:04,469
getting a bit complicated and if you do

00:06:00,839 --> 00:06:08,400
networking because they are NSS modules

00:06:04,469 --> 00:06:11,759
in Lipsy which allow you to have custom

00:06:08,400 --> 00:06:13,860
DNS resolving features and they can use

00:06:11,759 --> 00:06:18,150
different Cisco's so you could use like

00:06:13,860 --> 00:06:23,069
POSIX IPC in your NSS module for looking

00:06:18,150 --> 00:06:27,029
up DNS servers using a local IPC server

00:06:23,069 --> 00:06:29,779
and then we have the cisco plot and it's

00:06:27,029 --> 00:06:29,779
not working and

00:06:29,960 --> 00:06:36,620
some coat in the Lipsy also calls some

00:06:33,110 --> 00:06:39,440
unexpected sis calls sometimes and if

00:06:36,620 --> 00:06:43,520
we're not prepared for those the app the

00:06:39,440 --> 00:06:46,310
app just crashes basically it traps the

00:06:43,520 --> 00:06:49,009
arrow currently and then you can't

00:06:46,310 --> 00:06:51,740
download anything which obviously is a

00:06:49,009 --> 00:06:55,970
bit bad so earlier this year I turned it

00:06:51,740 --> 00:07:00,620
off again and I'm trying to figure out

00:06:55,970 --> 00:07:02,210
how to turn it on again and finding the

00:07:00,620 --> 00:07:04,580
failures I think we're probably going to

00:07:02,210 --> 00:07:06,919
make the SIS calls return a permission

00:07:04,580 --> 00:07:10,520
error instead of doing the trapping we

00:07:06,919 --> 00:07:13,280
do now which means that if the Cisco

00:07:10,520 --> 00:07:15,979
fails it allows it to the program to

00:07:13,280 --> 00:07:18,470
work around it and ignore the error like

00:07:15,979 --> 00:07:21,849
if you can't access its files it can

00:07:18,470 --> 00:07:25,610
just use defaults or something like that

00:07:21,849 --> 00:07:26,599
it should make the whole sandboxing a

00:07:25,610 --> 00:07:30,680
bit more stable

00:07:26,599 --> 00:07:34,820
it was what I did originally but it has

00:07:30,680 --> 00:07:36,500
the disadvantage that you can't figure

00:07:34,820 --> 00:07:38,660
out which sis calls are being blocked

00:07:36,500 --> 00:07:40,880
because you just see because you just

00:07:38,660 --> 00:07:45,620
get the permission errors are not just a

00:07:40,880 --> 00:07:49,400
straight crash which you can be back the

00:07:45,620 --> 00:07:53,570
next thing is related to http method and

00:07:49,400 --> 00:07:54,889
other methods and basically you might

00:07:53,570 --> 00:07:59,380
have noticed that if you have used

00:07:54,889 --> 00:08:02,690
Google Cloud for example which has ipv6

00:07:59,380 --> 00:08:07,159
disabled by default because app used to

00:08:02,690 --> 00:08:09,199
have apt used to resolve a track after

00:08:07,159 --> 00:08:11,360
used to connect to the atrocities

00:08:09,199 --> 00:08:14,120
returned by the DNS resolver

00:08:11,360 --> 00:08:16,460
sequentially so try it the first ipv6

00:08:14,120 --> 00:08:19,940
address and the second ipv6 address and

00:08:16,460 --> 00:08:23,389
so on before it tried the ipv4 addresses

00:08:19,940 --> 00:08:26,479
and the time out between the tries was

00:08:23,389 --> 00:08:28,460
two minutes so if you have four ipv6

00:08:26,479 --> 00:08:32,570
addresses it would take 8 minutes to

00:08:28,460 --> 00:08:36,500
fall back to ipv4 which obviously is too

00:08:32,570 --> 00:08:40,700
slow to be usable and those are some

00:08:36,500 --> 00:08:42,800
clouds and stuff over wrote this and

00:08:40,700 --> 00:08:48,350
disable ipv6 handling and apt

00:08:42,800 --> 00:08:52,939
and we can solve this we solved it in

00:08:48,350 --> 00:08:56,119
1.6 by switching to a new protocol which

00:08:52,939 --> 00:08:59,119
is happy eyeballs - oh it's not entirely

00:08:56,119 --> 00:09:02,119
compliant to the specification but it

00:08:59,119 --> 00:09:04,489
works quite well so what we did here is

00:09:02,119 --> 00:09:06,980
instead of trying to connect after each

00:09:04,489 --> 00:09:09,019
other we start we start first by

00:09:06,980 --> 00:09:11,660
reordering the list so we alternate

00:09:09,019 --> 00:09:13,879
between the ipv6 and the ipv4 addresses

00:09:11,660 --> 00:09:18,290
so we tried ipv6 address than an ipv4

00:09:13,879 --> 00:09:20,839
and ipv6 address and ipv4 address but

00:09:18,290 --> 00:09:23,420
instead of doing it sequentially we do

00:09:20,839 --> 00:09:26,540
it concurrently so we start with the

00:09:23,420 --> 00:09:28,610
first address and then every 250

00:09:26,540 --> 00:09:31,160
milliseconds we add as another address

00:09:28,610 --> 00:09:35,179
and we try them all in parallel using

00:09:31,160 --> 00:09:39,019
the Select Cisco and the first address

00:09:35,179 --> 00:09:40,759
that can connect is use of SD connection

00:09:39,019 --> 00:09:42,499
and the other connection attempts are

00:09:40,759 --> 00:09:46,069
aborted by closing the file descriptors

00:09:42,499 --> 00:09:49,119
and if none of them connect immediately

00:09:46,069 --> 00:09:53,059
in these 250 milliseconds we get to a

00:09:49,119 --> 00:09:56,959
final wait for all scenario where we

00:09:53,059 --> 00:10:01,910
wait 30 seconds before timing out and

00:09:56,959 --> 00:10:06,339
this basically allows us to fall back

00:10:01,910 --> 00:10:09,110
from ipv6 to ipv4 in 250 milliseconds

00:10:06,339 --> 00:10:12,499
which makes the whole thing much easier

00:10:09,110 --> 00:10:18,519
to use and avoids having to disable i36

00:10:12,499 --> 00:10:18,519
and apt on images and stuff like that

00:10:19,299 --> 00:10:30,769
another feature we've been working on

00:10:21,619 --> 00:10:32,480
very recently is this one yes you can

00:10:30,769 --> 00:10:34,759
see what it does you might be able to

00:10:32,480 --> 00:10:37,999
see what it does basically the clue is

00:10:34,759 --> 00:10:42,290
in the last line it suggests you a snap

00:10:37,999 --> 00:10:45,379
that's available and that's not the

00:10:42,290 --> 00:10:47,869
entire story of course we wanted to

00:10:45,379 --> 00:10:49,910
enable other package managers to be able

00:10:47,869 --> 00:10:53,329
to suggest their own packages like snaps

00:10:49,910 --> 00:10:55,160
for example of flat pack and while app

00:10:53,329 --> 00:10:56,630
has existing hooks they're fairly

00:10:55,160 --> 00:11:00,079
limited in scope and they you

00:10:56,630 --> 00:11:03,290
at hog farmers which have not enough

00:11:00,079 --> 00:11:06,860
information like which packages were

00:11:03,290 --> 00:11:10,279
given to the install command for the

00:11:06,860 --> 00:11:13,250
hooks to suggest other packages so we

00:11:10,279 --> 00:11:16,940
introduce new hooks and we base them on

00:11:13,250 --> 00:11:20,089
JSON RPC and these hooks get passed the

00:11:16,940 --> 00:11:23,120
socket where they act as a server and

00:11:20,089 --> 00:11:26,810
then app calls methods within the hooks

00:11:23,120 --> 00:11:31,699
using JSON RPC and provides a lot of

00:11:26,810 --> 00:11:34,519
data related to the request and we can

00:11:31,699 --> 00:11:36,920
extend this in the future to allow apt

00:11:34,519 --> 00:11:40,190
to act as a server and have

00:11:36,920 --> 00:11:42,740
bi-directional communications so for

00:11:40,190 --> 00:11:47,990
example if you have at listbox it could

00:11:42,740 --> 00:11:49,940
just instead of having to add a pin you

00:11:47,990 --> 00:11:52,579
could just block the upgrades for

00:11:49,940 --> 00:11:55,069
release critical box directly and you

00:11:52,579 --> 00:11:57,589
would have you then you say wouldn't see

00:11:55,069 --> 00:12:02,600
the update for the release critical back

00:11:57,589 --> 00:12:05,329
would be held back directly and you can

00:12:02,600 --> 00:12:07,509
make other changes to like remove some

00:12:05,329 --> 00:12:11,149
packages you don't want user to install

00:12:07,509 --> 00:12:13,819
and stuff like that and we can also

00:12:11,149 --> 00:12:18,889
extend that this I think to a command

00:12:13,819 --> 00:12:21,560
let's say apps our PCD which basically

00:12:18,889 --> 00:12:24,680
opens the chasing RPC socket and then

00:12:21,560 --> 00:12:26,779
allow people to strip apps using that

00:12:24,680 --> 00:12:29,000
interface so instead of a library you

00:12:26,779 --> 00:12:31,790
just open a connection to the socket and

00:12:29,000 --> 00:12:37,730
tell it to install something which I

00:12:31,790 --> 00:12:40,459
think might be quite useful and we have

00:12:37,730 --> 00:12:42,949
an example hook here we can see that

00:12:40,459 --> 00:12:46,459
we're trying to install an existing

00:12:42,949 --> 00:12:48,350
package called foo and this hook is

00:12:46,459 --> 00:12:50,240
called a pre prompt hook because it runs

00:12:48,350 --> 00:12:53,930
before this yes/no prompt whether you

00:12:50,240 --> 00:12:56,180
want to install or not and it he gets

00:12:53,930 --> 00:12:58,370
multiple parameters the first one is the

00:12:56,180 --> 00:13:01,399
command that was used in this case it

00:12:58,370 --> 00:13:03,680
was install the search terms which are

00:13:01,399 --> 00:13:06,260
the arguments to the command so I mean

00:13:03,680 --> 00:13:08,930
if you have installed foo it contains

00:13:06,260 --> 00:13:09,960
foo we have install foo bar contains foo

00:13:08,930 --> 00:13:12,780
bar yes

00:13:09,960 --> 00:13:16,200
store fubar - it contains fubar - and so

00:13:12,780 --> 00:13:19,170
on and then any unknown packages passed

00:13:16,200 --> 00:13:21,420
at the command line which basically are

00:13:19,170 --> 00:13:26,040
a subset of the search terms that could

00:13:21,420 --> 00:13:28,110
not be resolved and finally we have list

00:13:26,040 --> 00:13:31,740
of all resolved packages and the

00:13:28,110 --> 00:13:34,470
versions that are available like the

00:13:31,740 --> 00:13:37,680
candidate version and the version that

00:13:34,470 --> 00:13:41,580
was selected for installation and then

00:13:37,680 --> 00:13:44,480
you can see here fou version 1.0 was

00:13:41,580 --> 00:13:48,570
marked for installation and if you have

00:13:44,480 --> 00:13:51,000
this bi-directional it handling in the

00:13:48,570 --> 00:13:53,790
future you could then say like oh no

00:13:51,000 --> 00:13:56,250
let's instead mark version 2 for

00:13:53,790 --> 00:13:59,790
installation or stuff like that and he

00:13:56,250 --> 00:14:01,680
can just here you just noticed that you

00:13:59,790 --> 00:14:03,720
have to install a package foo and you

00:14:01,680 --> 00:14:07,140
could say oh I have a package food - in

00:14:03,720 --> 00:14:08,940
my snap or flat pack thing and just say

00:14:07,140 --> 00:14:11,370
hey do you want to install this instead

00:14:08,940 --> 00:14:14,640
and then tell app to abort the install

00:14:11,370 --> 00:14:18,150
or you could just print a line hey

00:14:14,640 --> 00:14:28,740
there's a snap called foo like it did on

00:14:18,150 --> 00:14:31,170
the the two slides earlier and we also

00:14:28,740 --> 00:14:35,100
have another thing I've been working on

00:14:31,170 --> 00:14:40,650
I think last month as well which is a

00:14:35,100 --> 00:14:42,450
new solver because our solver sucks so

00:14:40,650 --> 00:14:45,690
we can't find solutions although they

00:14:42,450 --> 00:14:48,780
exist and we see that in unattended

00:14:45,690 --> 00:14:50,670
upgrades I think a lot where you get the

00:14:48,780 --> 00:14:52,650
error message in the title which is

00:14:50,670 --> 00:14:54,510
package problem we saw the resort

00:14:52,650 --> 00:14:59,760
generated Frakes this might be caused by

00:14:54,510 --> 00:15:01,950
health packages so - so face we already

00:14:59,760 --> 00:15:06,410
have these external servers like HP cut

00:15:01,950 --> 00:15:09,930
and stuff and they usually work better

00:15:06,410 --> 00:15:12,870
but they are really slow because first

00:15:09,930 --> 00:15:14,820
we convert to an e DSP format then the

00:15:12,870 --> 00:15:16,590
ESP format is converted to cut and then

00:15:14,820 --> 00:15:18,600
it's passing through the solver which

00:15:16,590 --> 00:15:21,750
converts it again and then the whole

00:15:18,600 --> 00:15:23,329
thing back so it takes multiple seconds

00:15:21,750 --> 00:15:26,809
to solve a simple

00:15:23,329 --> 00:15:28,610
so requests and so my idea was to use

00:15:26,809 --> 00:15:32,029
the approaches we had from these

00:15:28,610 --> 00:15:38,149
external solver research but build a

00:15:32,029 --> 00:15:41,119
fast solver and for that I use the same

00:15:38,149 --> 00:15:44,209
basic silver as I speak up which it is

00:15:41,119 --> 00:15:48,799
the clasp solver it's an answer set

00:15:44,209 --> 00:15:50,809
programming tool and it also understands

00:15:48,799 --> 00:15:54,170
other types of optimization problems

00:15:50,809 --> 00:15:57,499
like maximum satisfiability and pseudo

00:15:54,170 --> 00:16:00,649
boolean optimization pseudo boolean

00:15:57,499 --> 00:16:02,929
optimization is what I use here and the

00:16:00,649 --> 00:16:07,819
nice advantage of this is that you can

00:16:02,929 --> 00:16:11,059
find a solution if one exists and it's

00:16:07,819 --> 00:16:12,649
the one goal I have is to try to behave

00:16:11,059 --> 00:16:14,839
as close to the current solver as

00:16:12,649 --> 00:16:17,869
possible which means I'm preferring

00:16:14,839 --> 00:16:20,449
false choices in all groups I want to

00:16:17,869 --> 00:16:24,290
install recommends when available and

00:16:20,449 --> 00:16:26,679
also if I have non candidate versions

00:16:24,290 --> 00:16:29,119
that are necessary I want to be able to

00:16:26,679 --> 00:16:32,089
install those non candidate versions but

00:16:29,119 --> 00:16:35,209
try to maximize the candidates that are

00:16:32,089 --> 00:16:37,519
installed which allows us to have auto

00:16:35,209 --> 00:16:39,589
package tests that pull as much as

00:16:37,519 --> 00:16:41,689
possible from testing and then pull the

00:16:39,589 --> 00:16:44,230
fewest amount of packages needed to

00:16:41,689 --> 00:16:48,079
satisfy the dependencies from unstable

00:16:44,230 --> 00:16:52,549
which will be really useful I think and

00:16:48,079 --> 00:16:56,660
that's it for apt itself so in other

00:16:52,549 --> 00:16:59,179
news we have - apt now checks that

00:16:56,660 --> 00:17:01,100
packages belong to the same cache so

00:16:59,179 --> 00:17:04,069
previously when you did add app cache

00:17:01,100 --> 00:17:05,990
Marc install package and you had

00:17:04,069 --> 00:17:08,569
reopened the cache in between it would

00:17:05,990 --> 00:17:11,000
just crash do nothing or just do

00:17:08,569 --> 00:17:13,339
anything really because it was either it

00:17:11,000 --> 00:17:18,649
was a different package or it was out of

00:17:13,339 --> 00:17:20,120
bounds or yeah so we just now raise an

00:17:18,649 --> 00:17:21,949
exception if the cache is different

00:17:20,120 --> 00:17:27,019
which makes the whole thing much safer

00:17:21,949 --> 00:17:29,029
and there's a workaround for existing

00:17:27,019 --> 00:17:31,490
code in the high level app module which

00:17:29,029 --> 00:17:33,559
automatically remaps these objects when

00:17:31,490 --> 00:17:37,299
reopening so you can just use the

00:17:33,559 --> 00:17:39,679
existing code and it doesn't just break

00:17:37,299 --> 00:17:41,600
it's really useful and we also have

00:17:39,679 --> 00:17:44,539
fully static typing now in the Python

00:17:41,600 --> 00:17:49,429
app module which a lot found a few

00:17:44,539 --> 00:17:52,070
errors in the code it's nice so from the

00:17:49,429 --> 00:17:53,600
D package maintainer he wants to let you

00:17:52,070 --> 00:17:55,850
know that you should stop accessing

00:17:53,600 --> 00:17:58,220
valid D package directly because the

00:17:55,850 --> 00:18:00,289
format will change for example soon the

00:17:58,220 --> 00:18:03,710
list and md5 some files will be dropped

00:18:00,289 --> 00:18:06,730
and replaced by M tree files so yeah

00:18:03,710 --> 00:18:10,159
just don't use quality package and

00:18:06,730 --> 00:18:12,679
aptitude has a new release now and it

00:18:10,159 --> 00:18:17,350
also goes faster than you used to so

00:18:12,679 --> 00:18:20,600
it's nice times on the abilities yay and

00:18:17,350 --> 00:18:23,150
well the package good land we now can

00:18:20,600 --> 00:18:25,909
remove automatically remove related

00:18:23,150 --> 00:18:29,840
unused D bonanzas when it when u n--

00:18:25,909 --> 00:18:32,090
installing a package which helps avoid

00:18:29,840 --> 00:18:35,120
cluttering your system with packages you

00:18:32,090 --> 00:18:40,370
no longer need you laughs you don't you

00:18:35,120 --> 00:18:43,250
no longer need and finally there will be

00:18:40,370 --> 00:18:47,000
a talk on Delta Depp's on Friday which

00:18:43,250 --> 00:18:49,280
you might want to attend and that's it

00:18:47,000 --> 00:18:51,350
from me you have any questions I don't

00:18:49,280 --> 00:18:55,400
think we have a lot of time like one

00:18:51,350 --> 00:18:57,679
minute or two so if you want to ask a

00:18:55,400 --> 00:19:02,490
question go to the mic and ask

00:18:57,679 --> 00:19:08,980
I just come after

00:19:02,490 --> 00:19:08,980
[Applause]

00:19:17,350 --> 00:19:24,049
it's not is now in is incompatible okay

00:19:22,970 --> 00:19:30,470
start from the beginning

00:19:24,049 --> 00:19:32,990
yeah repeat okay don't tell me why that

00:19:30,470 --> 00:19:34,539
abt a bigot and every deed healed are

00:19:32,990 --> 00:19:38,149
not compatible

00:19:34,539 --> 00:19:41,029
well they apt and I think you get are

00:19:38,149 --> 00:19:44,480
the same basically they just have to

00:19:41,029 --> 00:19:48,619
some different defaults can a bit

00:19:44,480 --> 00:19:51,919
configure sorry can the parameters be

00:19:48,619 --> 00:19:55,190
configured to make them have the same

00:19:51,919 --> 00:19:56,840
action well you could do that it's just

00:19:55,190 --> 00:19:59,869
different default config options

00:19:56,840 --> 00:20:02,119
basically okay well they are overwritten

00:19:59,869 --> 00:20:06,039
per binary and you can just replace the

00:20:02,119 --> 00:20:12,019
per binary overwrite in your config file

00:20:06,039 --> 00:20:16,539
but yeah it's not really documented that

00:20:12,019 --> 00:20:16,539
well okay okay thank you

00:20:22,740 --> 00:20:34,369
okay that's it

00:20:26,960 --> 00:20:34,369

YouTube URL: https://www.youtube.com/watch?v=TnxTmPRpIHw


