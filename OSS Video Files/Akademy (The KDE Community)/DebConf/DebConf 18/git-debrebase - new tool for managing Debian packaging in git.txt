Title: git-debrebase - new tool for managing Debian packaging in git
Publication date: 2018-07-31
Playlist: DebConf 18
Description: 
	by Ian Jackson
by Sean Whitton

At: DebConf18
https://debconf18.debconf.org/talks/60-git-debrebase-new-tool-for-managing-debian-packaging-in-git/

With git-debrebase the Debian changes to the upstream source are
represented and manipulated as git commits, with one commit
corresponding to one quilt patch.  However, unlike with gbp-pq and
git-dpm, git-debrebase uses just a single git branch.

git-debrebase branches are:

 * directly buildable
 * directly editable with git-commit(1) (whether of Debian files,
   upstream files, or both);
 * directly useable with dgit (without --quilt= option);
 * automatically made fast forwarding when published; and
 * have a history useful for git log, git blame etc.

Unlike with gbp pq, there is no need to switch back and forth between
public and patch queue branches and there is no need to apply and
unapply patches.  Unlike git-dpm, git-debrebase requires no in-tree
metadata.

Uploads of git-debrebase branches done with dgit publish the source both
as:

 1. a git branch which anyone new to Debian can immediately use,
   and which Debian contributors can directly work on;
 2. a perfect `3.0 (quilt)' source package as expected by
   non-git users.

Room: Yushan (玉山)
Scheduled start: 2018-07-30 15:00:00
Captions: 
	00:00:06,089 --> 00:00:12,429
good afternoon everyone and welcome to

00:00:09,549 --> 00:00:15,910
the next talk given by in and Shawn

00:00:12,429 --> 00:00:18,580
about get depth rebase in YouTube for

00:00:15,910 --> 00:00:21,580
Debian packaging thank you

00:00:18,580 --> 00:00:25,360
hello so Shawn written and I are here to

00:00:21,580 --> 00:00:28,779
present a new get workflow tool for

00:00:25,360 --> 00:00:31,570
Debian packaging but first before I tell

00:00:28,779 --> 00:00:34,030
you about it I need to show you where it

00:00:31,570 --> 00:00:36,969
fits into the ecosystem of Debian

00:00:34,030 --> 00:00:40,710
package management software on this

00:00:36,969 --> 00:00:43,120
slide we have you the maintainer on the

00:00:40,710 --> 00:00:44,949
left-hand side as well off the left of

00:00:43,120 --> 00:00:48,489
the slide and on the right we have the

00:00:44,949 --> 00:00:51,190
debian repositories the slides will be

00:00:48,489 --> 00:00:54,339
online you don't need to photograph them

00:00:51,190 --> 00:00:57,129
you may have heard me

00:00:54,339 --> 00:00:59,679
plugging dgaede once or twice you should

00:00:57,129 --> 00:01:02,739
all use diecut diecut publishes your get

00:00:59,679 --> 00:01:04,449
history so Debian's users can use it but

00:01:02,739 --> 00:01:05,860
that's not actually what I'm here to

00:01:04,449 --> 00:01:09,130
talk about today

00:01:05,860 --> 00:01:12,790
get Derby base does not need D get and D

00:01:09,130 --> 00:01:16,540
get does not need get debri base get

00:01:12,790 --> 00:01:20,200
debri base is an alternative to GBP PQ

00:01:16,540 --> 00:01:23,710
and to get DPM and to other tools in the

00:01:20,200 --> 00:01:26,680
same kind of area like get pkg

00:01:23,710 --> 00:01:30,880
and of course it's an alternative to

00:01:26,680 --> 00:01:32,700
using wall quilt dipped every base is a

00:01:30,880 --> 00:01:35,770
tool to help you manage your git branch

00:01:32,700 --> 00:01:38,440
containing the Debian version of the

00:01:35,770 --> 00:01:40,810
package you maintain gift every base

00:01:38,440 --> 00:01:42,370
helps you maintain a useful git branch

00:01:40,810 --> 00:01:47,650
with the contents you need for building

00:01:42,370 --> 00:01:49,900
and uploading gift every base is mostly

00:01:47,650 --> 00:01:52,450
concerned with maintaining your Debian

00:01:49,900 --> 00:01:55,659
Delta Debian Delta Q that is that

00:01:52,450 --> 00:01:58,000
changes you make for Debian to the

00:01:55,659 --> 00:01:59,800
upstream parts of the package other

00:01:58,000 --> 00:02:03,010
tools tend to call this your quilt patch

00:01:59,800 --> 00:02:05,580
series but we've get every base there is

00:02:03,010 --> 00:02:08,170
no quilt and you don't work with patches

00:02:05,580 --> 00:02:11,620
instead there is a series of commits so

00:02:08,170 --> 00:02:14,019
we prefer the term Delta Q gift every

00:02:11,620 --> 00:02:16,780
base is primarily intended for Debian

00:02:14,019 --> 00:02:17,730
package maintainer x' although you could

00:02:16,780 --> 00:02:21,780
use it outside

00:02:17,730 --> 00:02:23,549
or alongside Debian I does not deal with

00:02:21,780 --> 00:02:27,780
building at all you use whatever

00:02:23,549 --> 00:02:29,400
existing build tools you like nor does

00:02:27,780 --> 00:02:32,670
get debris base deal with source

00:02:29,400 --> 00:02:34,980
packages or our intervals does not do

00:02:32,670 --> 00:02:37,170
uploads of course when you actually

00:02:34,980 --> 00:02:39,180
upload to Debian you need to produce a

00:02:37,170 --> 00:02:42,780
source package getting a source package

00:02:39,180 --> 00:02:45,090
is of course as easy or easier than with

00:02:42,780 --> 00:02:47,069
other workflows usually it is done

00:02:45,090 --> 00:02:49,620
automatically for you by D get push

00:02:47,069 --> 00:02:51,959
source so usually you don't need to

00:02:49,620 --> 00:02:54,930
concern yourself with DC source packages

00:02:51,959 --> 00:02:56,819
even when uploading to Debian of course

00:02:54,930 --> 00:02:58,799
you can share your git branch on a

00:02:56,819 --> 00:03:00,810
service like salsa without building or

00:02:58,799 --> 00:03:08,910
uploading then you don't need to deal

00:03:00,810 --> 00:03:11,819
the source packages either get debris

00:03:08,910 --> 00:03:14,069
base offers a standard git rebase

00:03:11,819 --> 00:03:15,989
workflow where you edit the whole of the

00:03:14,069 --> 00:03:17,430
source code for your package including

00:03:15,989 --> 00:03:19,769
your changes to our upstream files and

00:03:17,430 --> 00:03:23,430
your changes to packaging including your

00:03:19,769 --> 00:03:25,109
change which is sorry you the source

00:03:23,430 --> 00:03:27,120
code including your changes option files

00:03:25,109 --> 00:03:32,489
and your changes to packaging altogether

00:03:27,120 --> 00:03:34,880
the experience is very like using plain

00:03:32,489 --> 00:03:38,340
git rebase to edit a topic branch

00:03:34,880 --> 00:03:41,549
delta-q editing that is editing the

00:03:38,340 --> 00:03:43,260
upstream parts of your a package can be

00:03:41,549 --> 00:03:46,590
done at any time interleaved with

00:03:43,260 --> 00:03:48,690
packaging work as far as I know there

00:03:46,590 --> 00:03:52,620
are no other tools that offer these

00:03:48,690 --> 00:03:54,989
features both GB ppq and get DPM

00:03:52,620 --> 00:03:58,260
required to switch to a separate view to

00:03:54,989 --> 00:04:01,190
edit the delta-q some tools have a

00:03:58,260 --> 00:04:03,540
specific function for git cherry-pick

00:04:01,190 --> 00:04:05,849
but with none of them can you just use

00:04:03,540 --> 00:04:09,269
plain git cherry-pick or get a.m. on to

00:04:05,849 --> 00:04:10,889
your usual branch at any time with get

00:04:09,269 --> 00:04:13,470
every base you can just edit the code

00:04:10,889 --> 00:04:17,609
and commit it with get in the completely

00:04:13,470 --> 00:04:20,099
usual way specifically at any point you

00:04:17,609 --> 00:04:22,530
make make commits to upstream files and

00:04:20,099 --> 00:04:24,510
commits the packaging in any order so

00:04:22,530 --> 00:04:27,150
you can just cherry-pick from upstream

00:04:24,510 --> 00:04:29,010
you may make fix-up commits and use the

00:04:27,150 --> 00:04:30,870
git rebase auto squash syntax to have

00:04:29,010 --> 00:04:33,720
them automatically folded in by

00:04:30,870 --> 00:04:35,820
next rebase if you wish you may make

00:04:33,720 --> 00:04:37,770
mixed commits containing both changes

00:04:35,820 --> 00:04:42,180
for upstream files and changes the

00:04:37,770 --> 00:04:44,610
packaging files of course you can always

00:04:42,180 --> 00:04:46,740
directly edit the source if use a plain

00:04:44,610 --> 00:04:49,110
git merge workflow and non Quilt source

00:04:46,740 --> 00:04:50,760
packages for example as described in the

00:04:49,110 --> 00:04:52,680
de get main debris base

00:04:50,760 --> 00:04:55,560
sorry dig it mayn't merge tutorial man

00:04:52,680 --> 00:04:57,660
page but that does not maintain the

00:04:55,560 --> 00:04:59,460
Debian Delta as a broken-down linear

00:04:57,660 --> 00:05:00,950
series of changes and in the source

00:04:59,460 --> 00:05:03,120
package such a merge based workflow

00:05:00,950 --> 00:05:06,420
squashes all the changes into a single

00:05:03,120 --> 00:05:08,640
there bein changes patch so supporting

00:05:06,420 --> 00:05:11,250
maintaining a delta q that is a linear

00:05:08,640 --> 00:05:16,260
series of changes is what give debris

00:05:11,250 --> 00:05:18,780
basis for all so unlike did DPM and some

00:05:16,260 --> 00:05:21,540
other tools get debris base has no entry

00:05:18,780 --> 00:05:23,610
metadata so it can't get out of date or

00:05:21,540 --> 00:05:30,510
desynchronized or need any manual

00:05:23,610 --> 00:05:32,790
changing or fix-up as I said unlike GBP

00:05:30,510 --> 00:05:35,190
PQ and get DPM there is no need to ever

00:05:32,790 --> 00:05:36,720
switch branches gift every base only

00:05:35,190 --> 00:05:40,530
uses one branch to handle all your

00:05:36,720 --> 00:05:42,180
Debian work of course usually you will

00:05:40,530 --> 00:05:44,730
have an upstream remote tracking branch

00:05:42,180 --> 00:05:47,160
as well so if you are working in

00:05:44,730 --> 00:05:49,410
multiple Debian releases back bolts for

00:05:47,160 --> 00:05:52,590
example you'll have branches for those

00:05:49,410 --> 00:05:54,660
but it's only one branch for each line

00:05:52,590 --> 00:05:58,770
of Debian development and no temporary

00:05:54,660 --> 00:06:00,300
branches or alternative views with every

00:05:58,770 --> 00:06:02,130
base you can always immediately build

00:06:00,300 --> 00:06:04,050
binaries out of your working tree with

00:06:02,130 --> 00:06:06,420
deep leakage build package or whatever

00:06:04,050 --> 00:06:08,880
other build tool you prefer and your

00:06:06,420 --> 00:06:12,660
working tree is never made dirty by get

00:06:08,880 --> 00:06:14,610
debris base or any other tooling because

00:06:12,660 --> 00:06:16,560
your working tree always has the Delta Q

00:06:14,610 --> 00:06:19,140
applied it is never dirtied by patch

00:06:16,560 --> 00:06:21,650
application because there is no metadata

00:06:19,140 --> 00:06:23,790
you can never get a metadata conflict

00:06:21,650 --> 00:06:25,890
because get to every base treats the

00:06:23,790 --> 00:06:27,540
quilt patches in debian patches as an

00:06:25,890 --> 00:06:29,880
output and handles them entirely

00:06:27,540 --> 00:06:32,280
automatically your tree is never dirtied

00:06:29,880 --> 00:06:36,210
by the generation of patches and you

00:06:32,280 --> 00:06:39,450
never need to read disks of dips and the

00:06:36,210 --> 00:06:43,140
final part of my plug with get debris

00:06:39,450 --> 00:06:43,880
base get blame and get log on a file

00:06:43,140 --> 00:06:46,820
well

00:06:43,880 --> 00:06:48,470
entirely properly for example if you do

00:06:46,820 --> 00:06:50,660
get logged on a file from upstream which

00:06:48,470 --> 00:06:53,480
is changing the debian Delta Q get

00:06:50,660 --> 00:06:55,520
logged will show the debian Delta Q

00:06:53,480 --> 00:06:57,380
commence preceded by the upstream

00:06:55,520 --> 00:07:00,410
history will show you an example of this

00:06:57,380 --> 00:07:02,210
in the demo if you run git blame you

00:07:00,410 --> 00:07:03,980
will see a correct indication of which

00:07:02,210 --> 00:07:07,130
upstream and all Delta Q commits

00:07:03,980 --> 00:07:08,960
introduced each line all profile in the

00:07:07,130 --> 00:07:10,730
Debian directory you will see a correct

00:07:08,960 --> 00:07:12,680
reporting of which commits in their

00:07:10,730 --> 00:07:17,870
packages packaging history introduced

00:07:12,680 --> 00:07:20,330
each line we'd get every base you never

00:07:17,870 --> 00:07:22,460
need to use the quilt program you can

00:07:20,330 --> 00:07:25,130
mostly ignore three point not built

00:07:22,460 --> 00:07:27,320
source format not having to learn about

00:07:25,130 --> 00:07:30,470
three point not source format is really

00:07:27,320 --> 00:07:31,700
good for newbies particularly for people

00:07:30,470 --> 00:07:33,800
from other software tournament

00:07:31,700 --> 00:07:37,490
communities who don't know about Debian

00:07:33,800 --> 00:07:39,050
but usually dunno get unfortunately it's

00:07:37,490 --> 00:07:42,260
not possible to paper over the cracks

00:07:39,050 --> 00:07:43,820
completely you will still get trouble if

00:07:42,260 --> 00:07:46,510
you make changes in get which three

00:07:43,820 --> 00:07:50,660
point not quilt cannot represent

00:07:46,510 --> 00:07:53,060
hopefully that's not too often on the

00:07:50,660 --> 00:07:54,470
other hand when you use git D baby get

00:07:53,060 --> 00:07:57,530
deadly base with three point North quilt

00:07:54,470 --> 00:08:00,260
the generated three point North built

00:07:57,530 --> 00:08:02,810
source packages perfectly pretty with

00:08:00,260 --> 00:08:04,790
your Delta Q commits converted nicely

00:08:02,810 --> 00:08:07,220
into patches just as other people

00:08:04,790 --> 00:08:11,600
consuming dear C's have come to expect

00:08:07,220 --> 00:08:15,410
and finally of course get debris base is

00:08:11,600 --> 00:08:17,600
compatible with D get you do not need to

00:08:15,410 --> 00:08:20,540
pass any quilt mode option to dig it and

00:08:17,600 --> 00:08:22,340
you can always upload right away all

00:08:20,540 --> 00:08:24,320
necessary bureaucracy is done

00:08:22,340 --> 00:08:29,210
automatically when you say D get push

00:08:24,320 --> 00:08:31,250
source so that concludes our marketing

00:08:29,210 --> 00:08:34,760
spiel I'm going to give you a bit more

00:08:31,250 --> 00:08:40,039
detail about how it works and Shawn

00:08:34,760 --> 00:08:41,900
we'll be doing a demo later there are

00:08:40,039 --> 00:08:44,990
some important details I'm going to be

00:08:41,900 --> 00:08:47,290
glossing over so if you actually want to

00:08:44,990 --> 00:08:49,430
know what's going on please read the

00:08:47,290 --> 00:08:51,500
reference documentation particularly the

00:08:49,430 --> 00:08:55,580
section five man page everything is

00:08:51,500 --> 00:08:58,110
fully and formally defined there so this

00:08:55,580 --> 00:09:00,220
slide shows our likely c2

00:08:58,110 --> 00:09:03,220
which you might find in the middle of an

00:09:00,220 --> 00:09:07,110
editing system session there's a lot of

00:09:03,220 --> 00:09:10,180
stuff off to the left-hand side which we

00:09:07,110 --> 00:09:12,579
have left that off so we've got space to

00:09:10,180 --> 00:09:15,250
see what happens when you do some

00:09:12,579 --> 00:09:18,930
editing the horizontal part near the

00:09:15,250 --> 00:09:22,540
bottom here is the called the breakwater

00:09:18,930 --> 00:09:25,450
this branch contains unpatched upstream

00:09:22,540 --> 00:09:27,550
source code plus the Debian packaging in

00:09:25,450 --> 00:09:30,640
the debian subdirectory does not contain

00:09:27,550 --> 00:09:32,680
any representation of the Debian Delta Q

00:09:30,640 --> 00:09:35,019
so it doesn't contain any of your

00:09:32,680 --> 00:09:38,410
commits to upstream files and it doesn't

00:09:35,019 --> 00:09:42,550
contain anything in Debian patches in

00:09:38,410 --> 00:09:46,630
the example commits a and B are

00:09:42,550 --> 00:09:48,519
packaging work the Debian Delta Q sits

00:09:46,630 --> 00:09:51,399
on top of that in this example there are

00:09:48,519 --> 00:09:52,839
two Debian Delta Q commits I've pulled

00:09:51,399 --> 00:09:54,209
them one and two because that fits

00:09:52,839 --> 00:09:56,980
nicely on the diagram

00:09:54,209 --> 00:09:59,589
these are commits touching upstream

00:09:56,980 --> 00:10:02,019
files in the diagram your current head

00:09:59,589 --> 00:10:04,870
your local master branch is that commit

00:10:02,019 --> 00:10:07,480
to so your tree contains the patch

00:10:04,870 --> 00:10:10,000
source code plus the packaging ie it is

00:10:07,480 --> 00:10:11,170
your actual patched source package you

00:10:10,000 --> 00:10:13,149
could build it with D because build

00:10:11,170 --> 00:10:16,329
package - you see - B to produce

00:10:13,149 --> 00:10:17,769
binaries for testing you can get great

00:10:16,329 --> 00:10:20,529
for things and be told where they are

00:10:17,769 --> 00:10:23,800
even if they're in the upstream source

00:10:20,529 --> 00:10:26,380
files but introduced by your Delta Q you

00:10:23,800 --> 00:10:28,180
can get log - capital G for things to be

00:10:26,380 --> 00:10:29,589
told where they came from and showing

00:10:28,180 --> 00:10:32,130
the relevant commits whether that's

00:10:29,589 --> 00:10:34,360
upstream or one of yours

00:10:32,130 --> 00:10:36,399
okay then suppose you want to make a

00:10:34,360 --> 00:10:39,100
change which edits upstream files and

00:10:36,399 --> 00:10:41,290
files in the Debian directory a common

00:10:39,100 --> 00:10:43,300
example might be a change which edit

00:10:41,290 --> 00:10:48,610
some upstream file but also adds a

00:10:43,300 --> 00:10:50,680
change log entry I'm calling this C 3

00:10:48,610 --> 00:10:52,320
the reason for this name will be clear

00:10:50,680 --> 00:10:55,060
in a moment

00:10:52,320 --> 00:10:56,920
now with this commit your tree is of

00:10:55,060 --> 00:10:57,779
course still fine you can build and test

00:10:56,920 --> 00:11:00,579
it right away

00:10:57,779 --> 00:11:04,329
well suppose you want to tidy things up

00:11:00,579 --> 00:11:09,930
in particular you might want the new

00:11:04,329 --> 00:11:09,930
upstream change to come before patch 2

00:11:10,920 --> 00:11:16,790
just because it's tidier that way or

00:11:12,839 --> 00:11:16,790
perhaps because you were about to change

00:11:18,240 --> 00:11:23,910
commit to - in some way that makes it

00:11:21,029 --> 00:11:28,440
depend on your new upstream changes in

00:11:23,910 --> 00:11:30,870
in commit c3 so in order to rebase and

00:11:28,440 --> 00:11:33,360
reorder the patches you would run get

00:11:30,870 --> 00:11:37,589
debris based - I which is very like git

00:11:33,360 --> 00:11:43,829
rebase - I you get the standards git

00:11:37,589 --> 00:11:47,730
rebase to-do list editor and you see in

00:11:43,829 --> 00:11:49,260
it what looks like commit c3 and as you

00:11:47,730 --> 00:11:53,870
can see here in the diagram I've already

00:11:49,260 --> 00:11:57,660
reordered that to come before change -

00:11:53,870 --> 00:12:00,779
so you say okay go and assuming there

00:11:57,660 --> 00:12:04,790
are no conflicts what you end up with

00:12:00,779 --> 00:12:07,529
looks like this so you can see that

00:12:04,790 --> 00:12:10,889
commit c3 has been split into two

00:12:07,529 --> 00:12:14,610
commits C prime which contains the

00:12:10,889 --> 00:12:17,339
changelog change and three prime which

00:12:14,610 --> 00:12:19,170
contains the upstream change the

00:12:17,339 --> 00:12:23,160
upstream change is now in the Delta Q in

00:12:19,170 --> 00:12:24,660
its proper place C Prime the packaging

00:12:23,160 --> 00:12:28,320
part of your new commit has been pushed

00:12:24,660 --> 00:12:30,660
into the breakwater this is the general

00:12:28,320 --> 00:12:32,550
scheme of things we have a fast

00:12:30,660 --> 00:12:34,290
forwarding breakwater containing

00:12:32,550 --> 00:12:37,260
packaging and unchanged upstream files

00:12:34,290 --> 00:12:39,209
it doesn't have a ref to itself instead

00:12:37,260 --> 00:12:41,430
it is contained within your master

00:12:39,209 --> 00:12:45,870
branch and each time you get debris base

00:12:41,430 --> 00:12:51,720
the rebased starts on the breakwater so

00:12:45,870 --> 00:12:54,089
what about a new upstream version to

00:12:51,720 --> 00:12:57,180
rebase on to a new upstream version you

00:12:54,089 --> 00:12:59,160
run get debris base new upstream get

00:12:57,180 --> 00:13:01,339
debris base expects the upstream code in

00:12:59,160 --> 00:13:04,470
the form of a git commit of course

00:13:01,339 --> 00:13:06,720
actually by default it hopes to find a

00:13:04,470 --> 00:13:09,600
tag named after the upstream version

00:13:06,720 --> 00:13:12,170
number but you can tell it explicitly if

00:13:09,600 --> 00:13:12,170
that's not right

00:13:14,820 --> 00:13:19,260
get every base arranges to include the

00:13:17,670 --> 00:13:23,340
new upstream source into the breakwater

00:13:19,260 --> 00:13:24,660
Andry basis you'll delta-q onto that so

00:13:23,340 --> 00:13:27,660
there are new commits here on the

00:13:24,660 --> 00:13:30,420
breakwater firstly the @ sign is a

00:13:27,660 --> 00:13:32,970
special merge that folds the new

00:13:30,420 --> 00:13:35,910
upstream source code unchanged into a

00:13:32,970 --> 00:13:38,430
breakwater branch this special merge is

00:13:35,910 --> 00:13:41,400
called an anchor merge the most recent

00:13:38,430 --> 00:13:46,230
anchor merge is the backstop for rebase

00:13:41,400 --> 00:13:48,420
processing by get debris base the second

00:13:46,230 --> 00:13:52,520
commit is simply adding a change log

00:13:48,420 --> 00:13:52,520
entry for you that's done automatically

00:13:55,070 --> 00:14:03,630
sorry I've lost my place yes right so

00:13:59,490 --> 00:14:07,050
having provided the new base which is

00:14:03,630 --> 00:14:09,720
this commit D here it rebated users get

00:14:07,050 --> 00:14:13,980
get debris base users git rebase - -

00:14:09,720 --> 00:14:17,550
onto to rebase the Delta Q onto the new

00:14:13,980 --> 00:14:19,320
breakwater if you didn't ask for an

00:14:17,550 --> 00:14:21,690
interactive rebase and there are no

00:14:19,320 --> 00:14:24,240
merge conflicts that's it you now have

00:14:21,690 --> 00:14:27,270
the new upstream code with your rebase

00:14:24,240 --> 00:14:29,520
Delta Q of course if you're going to

00:14:27,270 --> 00:14:31,260
upload to the Debian archive you'll also

00:14:29,520 --> 00:14:33,930
have to make an original of the new

00:14:31,260 --> 00:14:36,120
upstream if you're using the workflow

00:14:33,930 --> 00:14:37,740
I've been describing so far that's

00:14:36,120 --> 00:14:42,060
generally just a single call to get

00:14:37,740 --> 00:14:44,640
deborah --g so indeed let's consider an

00:14:42,060 --> 00:14:49,460
upload to debian and let's imagine you

00:14:44,640 --> 00:14:49,460
made or obtained a suitable a rig table

00:14:50,210 --> 00:14:55,410
there's a certain amount of bureaucracy

00:14:52,470 --> 00:14:57,510
to be done in the usual case of an

00:14:55,410 --> 00:14:59,100
upload with Deegan this is all done for

00:14:57,510 --> 00:14:59,880
you automatically so you don't need to

00:14:59,100 --> 00:15:02,070
worry about it

00:14:59,880 --> 00:15:04,500
but it's useful to understand what's

00:15:02,070 --> 00:15:10,710
going on so I'm going to go through it a

00:15:04,500 --> 00:15:14,010
bit firstly you're going to publish your

00:15:10,710 --> 00:15:16,080
history so your history has to be made

00:15:14,010 --> 00:15:19,320
fast forward from your previous version

00:15:16,080 --> 00:15:22,250
of the package to achieve this get get

00:15:19,320 --> 00:15:25,950
debris base will make a sudo merge our

00:15:22,250 --> 00:15:29,070
sudo merge is a merge commit which takes

00:15:25,950 --> 00:15:30,840
its contents from only one of its parent

00:15:29,070 --> 00:15:34,290
you would make one by hand with get

00:15:30,840 --> 00:15:37,080
merged - s hours if you wanted to make

00:15:34,290 --> 00:15:38,610
your head fast-forward and know that all

00:15:37,080 --> 00:15:40,020
the wanted changes from the other branch

00:15:38,610 --> 00:15:43,170
were included that's the command you

00:15:40,020 --> 00:15:44,100
would use but generally you don't need

00:15:43,170 --> 00:15:46,980
to do that manually

00:15:44,100 --> 00:15:49,320
in this example get to every base had

00:15:46,980 --> 00:15:50,880
recorded the previous branch state so

00:15:49,320 --> 00:15:54,030
that it can make the right pseudo merge

00:15:50,880 --> 00:15:57,330
your new branch is derived from the

00:15:54,030 --> 00:15:59,100
previous branch you had so it's right to

00:15:57,330 --> 00:16:02,280
declare that it's fast-forwarding that

00:15:59,100 --> 00:16:04,110
doesn't lose any changes the branch with

00:16:02,280 --> 00:16:05,910
the pseudo merge is suitable for pushing

00:16:04,110 --> 00:16:13,050
to any git server you could push to Sal

00:16:05,910 --> 00:16:14,850
Cersei secondly when you upload a

00:16:13,050 --> 00:16:16,620
three-point noir quilt package the

00:16:14,850 --> 00:16:18,450
contents of Debian packages need to be

00:16:16,620 --> 00:16:21,540
right sorry debian patches needs to be

00:16:18,450 --> 00:16:24,690
right again that is taken care of

00:16:21,540 --> 00:16:26,880
automatically commit is made adding a

00:16:24,690 --> 00:16:29,430
patch representation of the Delta Q to

00:16:26,880 --> 00:16:33,210
Debian patches you can ignore these

00:16:29,430 --> 00:16:34,950
auto-generated commits after uploading

00:16:33,210 --> 00:16:37,920
you'll want to push your branch to salsa

00:16:34,950 --> 00:16:39,720
if you have a team repository there that

00:16:37,920 --> 00:16:41,550
makes sure that all the views of your

00:16:39,720 --> 00:16:43,530
package are up-to-date so that other

00:16:41,550 --> 00:16:46,110
members of your team won't accidentally

00:16:43,530 --> 00:16:47,520
base their work on an old version you

00:16:46,110 --> 00:16:49,170
can just push you get debris erased

00:16:47,520 --> 00:16:52,070
branch we just have the CD emerge made

00:16:49,170 --> 00:16:54,690
call the stitched branch with git push

00:16:52,070 --> 00:16:57,480
it's a normal fast forward in git branch

00:16:54,690 --> 00:17:00,270
if you want to push without uploading

00:16:57,480 --> 00:17:02,310
that's fine to get debris based stitch

00:17:00,270 --> 00:17:03,870
we'll just make the sudo merge for you

00:17:02,310 --> 00:17:07,430
giving you a fast forwarding branch

00:17:03,870 --> 00:17:10,140
suitable pushing to salsa or wherever

00:17:07,430 --> 00:17:12,450
after upload next time you come to the

00:17:10,140 --> 00:17:15,510
package you can work directly by adding

00:17:12,450 --> 00:17:17,790
commits on master if you want to rebase

00:17:15,510 --> 00:17:23,100
or you just want to tidy the branch up

00:17:17,790 --> 00:17:26,250
you can run get debris base it strips

00:17:23,100 --> 00:17:27,900
off the bureaucracy commits these remain

00:17:26,250 --> 00:17:30,480
published of course but they are removed

00:17:27,900 --> 00:17:32,100
from your own master branch if you made

00:17:30,480 --> 00:17:35,730
any commits on top of the sudo merge

00:17:32,100 --> 00:17:37,890
those aren't in my example here all may

00:17:35,730 --> 00:17:40,680
be pulled such commits from salsa or

00:17:37,890 --> 00:17:41,320
wherever it folds those back into the

00:17:40,680 --> 00:17:43,870
breakwater

00:17:41,320 --> 00:17:46,870
and the delta q so once again you have a

00:17:43,870 --> 00:17:48,669
nice delta q to edit get debris base

00:17:46,870 --> 00:17:51,970
makes a note of where you are previously

00:17:48,669 --> 00:17:54,250
so that next time you want to push or

00:17:51,970 --> 00:17:57,399
upload it can stitch the history back in

00:17:54,250 --> 00:17:59,830
with a new sudo merge the start of this

00:17:57,399 --> 00:18:02,620
walkthrough that ref was indeed present

00:17:59,830 --> 00:18:04,960
but FF q press master ref you see at the

00:18:02,620 --> 00:18:12,009
top right of the slide and I kind of

00:18:04,960 --> 00:18:14,769
glossed over there okay so let us think

00:18:12,009 --> 00:18:16,860
about the new upstream what if one of

00:18:14,769 --> 00:18:21,700
your Delta Q commits doesn't apply

00:18:16,860 --> 00:18:23,980
during the upstream rebase so ie the

00:18:21,700 --> 00:18:28,330
change you made doesn't apply to the new

00:18:23,980 --> 00:18:31,240
upstream source code may be a bit small

00:18:28,330 --> 00:18:35,320
that's like a rebase conflict output

00:18:31,240 --> 00:18:37,899
from from get so git rebase users will

00:18:35,320 --> 00:18:39,730
have seen this kind of output before it

00:18:37,899 --> 00:18:41,440
stops at the first commit which can't be

00:18:39,730 --> 00:18:44,799
applied in the new context and it asks

00:18:41,440 --> 00:18:47,799
you for help this looks quite bad and of

00:18:44,799 --> 00:18:50,559
course it's it's not good but this is an

00:18:47,799 --> 00:18:52,980
irreducible aspect of maintaining a

00:18:50,559 --> 00:18:54,700
delta q on on top of a moving target

00:18:52,980 --> 00:18:57,970
sometimes you'll need to fix up

00:18:54,700 --> 00:19:00,940
conflicts at least with get to every

00:18:57,970 --> 00:19:03,730
base you get the right tools to help you

00:19:00,940 --> 00:19:05,559
fix it up some of the other workflows

00:19:03,730 --> 00:19:08,500
can involve trying to reserve merge

00:19:05,559 --> 00:19:11,639
conflicts during quilt apply or fix up

00:19:08,500 --> 00:19:14,830
conflicts in diffs that's much less fun

00:19:11,639 --> 00:19:17,259
also get deprivation ooh upstream is

00:19:14,830 --> 00:19:19,090
quite low commitment imagine like on the

00:19:17,259 --> 00:19:21,370
diagram here get to every base as

00:19:19,090 --> 00:19:24,610
applied commit 1 and stop because it

00:19:21,370 --> 00:19:25,960
can't apply commit 3 prime now if you

00:19:24,610 --> 00:19:28,840
decide this is too difficult to deal

00:19:25,960 --> 00:19:34,690
with today you can just say git rebase -

00:19:28,840 --> 00:19:37,149
- abort and everything gets put back the

00:19:34,690 --> 00:19:40,720
auto-generated special break water merge

00:19:37,149 --> 00:19:43,139
and the change log entry are discarded

00:19:40,720 --> 00:19:45,250
leaving you just where you were before

00:19:43,139 --> 00:19:46,690
you've wasted no effort because

00:19:45,250 --> 00:19:50,649
everything you're throwing away was also

00:19:46,690 --> 00:19:55,120
generated there's one caveat I should

00:19:50,649 --> 00:19:57,700
mention right now if to get

00:19:55,120 --> 00:19:59,620
everydays branches diverge because

00:19:57,700 --> 00:20:01,930
different people edit them

00:19:59,620 --> 00:20:04,240
simultaneously it is not trivial to

00:20:01,930 --> 00:20:06,070
merge them again the data model I'm

00:20:04,240 --> 00:20:09,520
describing does not currently allow

00:20:06,070 --> 00:20:13,330
general merge commits it gets every base

00:20:09,520 --> 00:20:16,360
encounters a normal git merge it will

00:20:13,330 --> 00:20:17,800
stop and fail in and in the general case

00:20:16,360 --> 00:20:21,730
sorting out such a merge is not a

00:20:17,800 --> 00:20:23,350
trivial problem GB ppq sometimes handles

00:20:21,730 --> 00:20:25,690
this kind of situation by expecting you

00:20:23,350 --> 00:20:27,610
to merge the actual patches I you can

00:20:25,690 --> 00:20:30,040
end up resolving merge conflicts in

00:20:27,610 --> 00:20:33,130
diffs other tools don't always handle

00:20:30,040 --> 00:20:35,230
this well either I have some ideas about

00:20:33,130 --> 00:20:35,860
how to do better at this so watch this

00:20:35,230 --> 00:20:39,160
space

00:20:35,860 --> 00:20:42,070
but for now you your team should

00:20:39,160 --> 00:20:45,640
coordinate to avoid creating diverging

00:20:42,070 --> 00:20:47,830
get debris based branches get to every

00:20:45,640 --> 00:20:50,020
base we'll help you with that by often

00:20:47,830 --> 00:20:53,470
spotting when divergence is about to

00:20:50,020 --> 00:20:57,490
occur and warning you about it so that's

00:20:53,470 --> 00:21:02,309
enough explanation I think it's time for

00:20:57,490 --> 00:21:02,309
a demo now so Shawn if you're ready yes

00:21:05,660 --> 00:21:08,709
[Applause]

00:21:15,200 --> 00:21:22,409
is it can you see it cake yes yes it's

00:21:18,659 --> 00:21:25,519
that okay so this is a package of mine

00:21:22,409 --> 00:21:28,980
called helm which is an Emacs add-on and

00:21:25,519 --> 00:21:32,159
I recently switched it to use git debri

00:21:28,980 --> 00:21:33,990
base so let me just walk you through

00:21:32,159 --> 00:21:37,220
some of the commits that are here at the

00:21:33,990 --> 00:21:40,259
top of the branch here is where I merged

00:21:37,220 --> 00:21:42,450
with get rid of rabies new axe yeah

00:21:40,259 --> 00:21:44,220
we've get debri base new upstream I

00:21:42,450 --> 00:21:46,289
imported version two point nine point

00:21:44,220 --> 00:21:48,990
seven and then if we work our way up

00:21:46,289 --> 00:21:52,289
from there we have commits like this one

00:21:48,990 --> 00:21:55,320
which are Delta Q commits so if I just

00:21:52,289 --> 00:21:58,110
pull that up which just adds a file to

00:21:55,320 --> 00:22:01,980
the upstream source called changelog and

00:21:58,110 --> 00:22:04,590
then we have that's another here we have

00:22:01,980 --> 00:22:06,629
another Delta Q commit which hacks the

00:22:04,590 --> 00:22:09,600
upstreams readme file to make it a bit

00:22:06,629 --> 00:22:11,730
shorter another Delta Q commit which

00:22:09,600 --> 00:22:14,100
messes around with a shell script then

00:22:11,730 --> 00:22:16,289
we have a packaging commit so this one

00:22:14,100 --> 00:22:21,179
is just touching Debian changelog as you

00:22:16,289 --> 00:22:24,000
can see here we have a mixed commit

00:22:21,179 --> 00:22:25,950
which is touching dockets ignore which

00:22:24,000 --> 00:22:28,710
is an upstream file and the Debian

00:22:25,950 --> 00:22:31,830
change lock and then an auto-generated

00:22:28,710 --> 00:22:33,929
commit which is which is the one of the

00:22:31,830 --> 00:22:37,080
hexagonal commits may buy get debris

00:22:33,929 --> 00:22:38,940
base generating T patches and then these

00:22:37,080 --> 00:22:40,950
three commits the talk well sorry that's

00:22:38,940 --> 00:22:43,440
just a packaging commit these two

00:22:40,950 --> 00:22:46,350
commits at the top are V pseudo merge so

00:22:43,440 --> 00:22:50,429
making this branch fast-forward from my

00:22:46,350 --> 00:22:52,470
previous upload now one thing that's a

00:22:50,429 --> 00:22:55,440
bit unusual about this example is that

00:22:52,470 --> 00:22:57,509
like this is all mixed together and in

00:22:55,440 --> 00:22:59,460
the previous slides you saw that the

00:22:57,509 --> 00:23:02,070
Delta Q was always at the tip of the

00:22:59,460 --> 00:23:05,759
branch that's just because I didn't

00:23:02,070 --> 00:23:07,259
Deborah base before I upload it and but

00:23:05,759 --> 00:23:09,149
that's actually completely fine because

00:23:07,259 --> 00:23:10,740
I'm going to do some editing now and

00:23:09,149 --> 00:23:12,779
d'etre base will sort it all out and

00:23:10,740 --> 00:23:15,659
you'll see that happen okay

00:23:12,779 --> 00:23:20,100
two other things to show before I start

00:23:15,659 --> 00:23:21,960
editing let me count the number of

00:23:20,100 --> 00:23:23,630
patches so there's a that's kind of a

00:23:21,960 --> 00:23:25,790
hairy get log command all it

00:23:23,630 --> 00:23:27,980
saying is show me all the commits not

00:23:25,790 --> 00:23:31,100
touching Debian since two point nine

00:23:27,980 --> 00:23:33,650
point seven and you can see there's four

00:23:31,100 --> 00:23:37,550
of them so right now we have these four

00:23:33,650 --> 00:23:39,500
commits and let one more thing we wanted

00:23:37,550 --> 00:23:42,620
to show you was a git log on a

00:23:39,500 --> 00:23:43,880
particular file so this is an Emacs get

00:23:42,620 --> 00:23:48,920
thing but it's just running git log

00:23:43,880 --> 00:23:51,770
don't don't be put off here is the get

00:23:48,920 --> 00:23:54,350
log for the file read me dot MD you can

00:23:51,770 --> 00:23:56,660
see all of the upstream commits and my

00:23:54,350 --> 00:23:58,220
little Delta Q patch on the top which

00:23:56,660 --> 00:24:01,850
apparently I made three years ago yes

00:23:58,220 --> 00:24:04,100
this is an old package and that like

00:24:01,850 --> 00:24:06,650
just works you just have the log showing

00:24:04,100 --> 00:24:09,260
the upstream commits and the Delta Q

00:24:06,650 --> 00:24:10,880
commits okay so let's do some editing

00:24:09,260 --> 00:24:13,550
now that we've seen that so remember

00:24:10,880 --> 00:24:16,010
right now we have four Delta Q commits

00:24:13,550 --> 00:24:18,710
I'm gonna had a fifth commit to save

00:24:16,010 --> 00:24:21,170
time I actually have this in a stash so

00:24:18,710 --> 00:24:23,570
I'm just gonna pop that stash here and

00:24:21,170 --> 00:24:26,480
so now I've made a change to the change

00:24:23,570 --> 00:24:29,120
log and to an upstream file let me show

00:24:26,480 --> 00:24:32,000
you that we'd get diff so I added a

00:24:29,120 --> 00:24:34,400
comment to the upstream source and I had

00:24:32,000 --> 00:24:37,520
a debian change log entry saying that I

00:24:34,400 --> 00:24:42,080
did that and let's just go ahead and

00:24:37,520 --> 00:24:45,410
commit that ordinary way to use get so

00:24:42,080 --> 00:24:47,990
yes be more excited about helm all right

00:24:45,410 --> 00:24:49,490
there we go that's committed and let's

00:24:47,990 --> 00:24:52,670
take a look at what that looks like over

00:24:49,490 --> 00:24:56,330
in get K so we now have this new mix

00:24:52,670 --> 00:24:58,370
commit at the top of the branch so as I

00:24:56,330 --> 00:25:00,350
mentioned earlier this is a mess right

00:24:58,370 --> 00:25:02,240
we have these mixed commits we have

00:25:00,350 --> 00:25:06,800
these auto-generated commits we have

00:25:02,240 --> 00:25:08,810
these packaging commits and Delta Q

00:25:06,800 --> 00:25:11,540
commits interleaved but get rabe a

00:25:08,810 --> 00:25:17,090
rebase can just fix that for us so back

00:25:11,540 --> 00:25:19,880
in the shell get debri base - i and we

00:25:17,090 --> 00:25:23,540
end up in a get a get interactive rebase

00:25:19,880 --> 00:25:26,120
edit session so let's suppose that this

00:25:23,540 --> 00:25:28,070
new commit the last line let's suppose

00:25:26,120 --> 00:25:30,860
that that needs to come second in the

00:25:28,070 --> 00:25:32,660
Delta Q for reasons unstated well that's

00:25:30,860 --> 00:25:36,590
easy we'll just move it up just like a

00:25:32,660 --> 00:25:39,320
normal get rebase commit the rebase

00:25:36,590 --> 00:25:41,149
okay off it goes we've successfully best

00:25:39,320 --> 00:25:43,730
all right what does that look like well

00:25:41,149 --> 00:25:45,200
let's refresh get Kate okay so now we

00:25:43,730 --> 00:25:48,139
have something that looks a lot more

00:25:45,200 --> 00:25:52,730
palatable so let me run through these

00:25:48,139 --> 00:25:55,309
briefly we so we now have five commits

00:25:52,730 --> 00:25:58,549
in the Delta Q before before we now have

00:25:55,309 --> 00:26:03,590
a new one and here they are they start

00:25:58,549 --> 00:26:05,539
here yes they do so we have oh no we

00:26:03,590 --> 00:26:08,299
don't they start here so here is the

00:26:05,539 --> 00:26:11,299
first dark you commit it adds the

00:26:08,299 --> 00:26:14,840
changelog like before here's my new

00:26:11,299 --> 00:26:16,999
commit that we just added you can see it

00:26:14,840 --> 00:26:18,769
only touches the upstream source now the

00:26:16,999 --> 00:26:20,929
changelog bit has been split off into

00:26:18,769 --> 00:26:23,119
its own commit and then we have these

00:26:20,929 --> 00:26:25,369
ones he's old Delta Q commits at the top

00:26:23,119 --> 00:26:27,710
and you can see that all of the

00:26:25,369 --> 00:26:31,070
packaging comments come before the Delta

00:26:27,710 --> 00:26:34,220
Q so here is the other half of the new

00:26:31,070 --> 00:26:36,200
commit touching Debian change lock and

00:26:34,220 --> 00:26:38,240
get every base split it out and

00:26:36,200 --> 00:26:40,700
reordered it perfectly nicely and also

00:26:38,240 --> 00:26:42,950
note that the auto-generated Debian

00:26:40,700 --> 00:26:44,869
patches commit has disappeared because

00:26:42,950 --> 00:26:46,460
it's auto-generated we don't need it

00:26:44,869 --> 00:26:50,539
while we're editing so it gets got rid

00:26:46,460 --> 00:26:53,059
of okay so that's actually it if we

00:26:50,539 --> 00:26:55,580
wanted to upload this change now I could

00:26:53,059 --> 00:26:56,840
just type do you get push source and it

00:26:55,580 --> 00:26:58,850
would go to the archive it's as simple

00:26:56,840 --> 00:26:59,990
as I literally do that right now but I'm

00:26:58,850 --> 00:27:04,999
not going to because I'm a responsible

00:26:59,990 --> 00:27:08,929
maintainer but suppose that we wanted to

00:27:04,999 --> 00:27:11,119
push to salsa this as it stands is not a

00:27:08,929 --> 00:27:14,119
fast-forward of what's on salsa because

00:27:11,119 --> 00:27:16,389
it's been debri based but there's a

00:27:14,119 --> 00:27:20,480
command to fix that get debri base

00:27:16,389 --> 00:27:22,940
conclude which says stitch me back so I

00:27:20,480 --> 00:27:25,999
haven't push a ball let me run that and

00:27:22,940 --> 00:27:28,580
then I have to restart get K I won't

00:27:25,999 --> 00:27:31,249
explain why but in order to make it

00:27:28,580 --> 00:27:33,350
something that makes sense so now we

00:27:31,249 --> 00:27:35,659
have exactly what we had at the previous

00:27:33,350 --> 00:27:37,999
view those eight commits are still there

00:27:35,659 --> 00:27:40,580
and one commit at the top to sudo merge

00:27:37,999 --> 00:27:42,110
yet so it's pushing all and it's as

00:27:40,580 --> 00:27:44,299
simple as that

00:27:42,110 --> 00:27:46,789
that's everything that I wanted to show

00:27:44,299 --> 00:27:47,240
any anything else you want to say I

00:27:46,789 --> 00:27:52,210
think that's

00:27:47,240 --> 00:27:52,210
everything okay great thank you

00:27:58,179 --> 00:28:11,480
right I just need to plug all these

00:28:00,620 --> 00:28:13,640
widgets back in okay so thank you for

00:28:11,480 --> 00:28:15,260
the demo I'm glad that came off nicely I

00:28:13,640 --> 00:28:20,960
think we've got the slide on again right

00:28:15,260 --> 00:28:23,300
so just like wrapping up gift every base

00:28:20,960 --> 00:28:28,340
is available in testing and stretch back

00:28:23,300 --> 00:28:29,720
ports and is in good shape the since

00:28:28,340 --> 00:28:32,090
early versions it's been battle tested

00:28:29,720 --> 00:28:35,330
out with security updates to the Debian

00:28:32,090 --> 00:28:38,510
Zen packages which are quite an exciting

00:28:35,330 --> 00:28:41,120
test case with a lot of patches and a

00:28:38,510 --> 00:28:44,960
lot of difficult stuff to do and the

00:28:41,120 --> 00:28:45,920
documentation is comprehensive so no

00:28:44,960 --> 00:28:47,750
doubt the user interface and

00:28:45,920 --> 00:28:49,400
documentation will improve and new

00:28:47,750 --> 00:28:52,640
features will be added and bugs will be

00:28:49,400 --> 00:28:53,929
fixed and indeed you'll see we're

00:28:52,640 --> 00:28:57,140
referring you to the version of the

00:28:53,929 --> 00:28:58,400
tutorial man page from unstable that's

00:28:57,140 --> 00:29:01,790
because we've just done some

00:28:58,400 --> 00:29:03,380
documentation updates but you can start

00:29:01,790 --> 00:29:06,010
using get drivers from stretch back

00:29:03,380 --> 00:29:08,870
ports all testing or unstable right away

00:29:06,010 --> 00:29:11,630
the best starting point is probably the

00:29:08,870 --> 00:29:15,820
tutorial man page dig it mayn't debris

00:29:11,630 --> 00:29:18,830
base which is in the Deegan package and

00:29:15,820 --> 00:29:21,080
if you want more information or you need

00:29:18,830 --> 00:29:23,600
help or you're just curious we're

00:29:21,080 --> 00:29:26,570
holding a workshop tomorrow morning I

00:29:23,600 --> 00:29:28,730
think that's tomorrow yeah where anyone

00:29:26,570 --> 00:29:31,370
is invited to come and help get help

00:29:28,730 --> 00:29:33,110
with get to every base and also with you

00:29:31,370 --> 00:29:35,690
get if you want questions using do you

00:29:33,110 --> 00:29:39,500
get so if your questions don't get

00:29:35,690 --> 00:29:42,920
answered in a moment or you want us to

00:29:39,500 --> 00:29:46,190
like workshop your problem do drop in

00:29:42,920 --> 00:29:47,240
its a drop-in session and also of course

00:29:46,190 --> 00:29:50,990
I should refer to the reference

00:29:47,240 --> 00:29:52,940
documentation gift every base five has

00:29:50,990 --> 00:29:55,130
the data model and all the

00:29:52,940 --> 00:29:57,520
terminological definitions and get data

00:29:55,130 --> 00:29:59,690
base one is the command line reference

00:29:57,520 --> 00:30:01,130
but you don't want to start there unless

00:29:59,690 --> 00:30:02,630
you really like reference mail

00:30:01,130 --> 00:30:06,080
you probably want to read the workflow

00:30:02,630 --> 00:30:08,809
tutorial or come to the workshop so

00:30:06,080 --> 00:30:10,880
thank you all for coming and I think

00:30:08,809 --> 00:30:24,140
we've got a reasonable amount of time

00:30:10,880 --> 00:30:25,730
for questions anyone you want to come

00:30:24,140 --> 00:30:27,910
down and use the mic please I think

00:30:25,730 --> 00:30:29,780
that's much easier for the video team

00:30:27,910 --> 00:30:31,640
you can come if you've got a question

00:30:29,780 --> 00:30:34,610
you can come down and stand by the mic

00:30:31,640 --> 00:30:36,830
in advance that might save at a time the

00:30:34,610 --> 00:30:38,600
one thing you mentioned for somewhere in

00:30:36,830 --> 00:30:42,170
the middle is that when you have a team

00:30:38,600 --> 00:30:45,140
and diverging commits that is not tail

00:30:42,170 --> 00:30:48,350
twist at all right right that's not the

00:30:45,140 --> 00:30:52,520
approach that happens right now is not

00:30:48,350 --> 00:30:53,960
brilliant usually unless - unless both

00:30:52,520 --> 00:30:56,450
of you have been editing the delta-q

00:30:53,960 --> 00:31:00,080
separately you can normally deal with

00:30:56,450 --> 00:31:01,880
this by using a manual git rebase to

00:31:00,080 --> 00:31:05,809
rebase one of the sets of changes on top

00:31:01,880 --> 00:31:07,790
of the other and that avoids producing a

00:31:05,809 --> 00:31:11,240
merge commit so if you you can do also

00:31:07,790 --> 00:31:18,230
do often get pulled - - and rebase will

00:31:11,240 --> 00:31:20,660
often do that for you so north ompletely

00:31:18,230 --> 00:31:23,420
it's not completely unworkable it's just

00:31:20,660 --> 00:31:24,920
not ideal do you plan to add better

00:31:23,420 --> 00:31:27,200
support for this I mean it is

00:31:24,920 --> 00:31:29,390
distributed so I'm live right absolutely

00:31:27,200 --> 00:31:31,070
I've habits out I mean I'm writing on

00:31:29,390 --> 00:31:32,660
the train and working I cannot do

00:31:31,070 --> 00:31:34,280
permanently push it right right

00:31:32,660 --> 00:31:36,530
absolutely absolutely so you can

00:31:34,280 --> 00:31:40,790
certainly do that right if you if you're

00:31:36,530 --> 00:31:42,290
working on a train like that and so it

00:31:40,790 --> 00:31:43,640
depends kind of what kind of editing

00:31:42,290 --> 00:31:45,830
you're doing if what you're doing is

00:31:43,640 --> 00:31:48,290
you're like working on the packaging and

00:31:45,830 --> 00:31:49,940
adding new commits on top that's really

00:31:48,290 --> 00:31:51,740
easy because you can just rebase those

00:31:49,940 --> 00:31:53,660
patches on you know you can get pulled

00:31:51,740 --> 00:31:55,309
out a freebase and then you don't make a

00:31:53,660 --> 00:32:00,820
merge commit and it's all completely

00:31:55,309 --> 00:32:03,500
fine but if you edit the delta-q

00:32:00,820 --> 00:32:05,900
additively non-additive lee right if you

00:32:03,500 --> 00:32:08,390
if you kind of reorganize the delta-q

00:32:05,900 --> 00:32:10,010
commits or drop patches or stuff will

00:32:08,390 --> 00:32:11,090
really change the commit messages or

00:32:10,010 --> 00:32:13,480
something like that

00:32:11,090 --> 00:32:16,310
and then somebody else also does that

00:32:13,480 --> 00:32:17,780
right now there are no tools I think

00:32:16,310 --> 00:32:21,410
that will that will sort that out for

00:32:17,780 --> 00:32:24,730
you in a reasonable way I have some

00:32:21,410 --> 00:32:27,530
theories about how to improve this I

00:32:24,730 --> 00:32:29,690
think probably what I'm going to do is

00:32:27,530 --> 00:32:31,640
add code to deal with some of the easier

00:32:29,690 --> 00:32:33,530
cases and make that a bit smoother so

00:32:31,640 --> 00:32:37,640
that in easy cases the merger will be

00:32:33,530 --> 00:32:39,500
fixed up for you and the hard cases you

00:32:37,640 --> 00:32:42,160
might very well still get like error

00:32:39,500 --> 00:32:45,290
messages and then then you'll be left

00:32:42,160 --> 00:32:49,970
having to do it yourself but one thing

00:32:45,290 --> 00:32:51,440
you can do is you can check out both get

00:32:49,970 --> 00:32:53,360
debris but you can check out both

00:32:51,440 --> 00:32:57,520
parents of the merge and run get debris

00:32:53,360 --> 00:32:59,810
base on them separately and to get like

00:32:57,520 --> 00:33:01,730
get everything nice something that you

00:32:59,810 --> 00:33:03,140
can look at something they look at and

00:33:01,730 --> 00:33:07,040
then you can reason about and then you

00:33:03,140 --> 00:33:08,720
can like fix it up yourself right

00:33:07,040 --> 00:33:11,810
anybody if that happens to you please

00:33:08,720 --> 00:33:15,410
like ask me on IRC I'm dizzier on

00:33:11,810 --> 00:33:21,680
freenode and FTC and or maybe Sean will

00:33:15,410 --> 00:33:24,760
help you out SP Whitten yeah okay thanks

00:33:21,680 --> 00:33:24,760
that was my question

00:33:27,010 --> 00:33:30,340
is that it

00:33:31,710 --> 00:33:39,760
no other question everyone's reading the

00:33:33,910 --> 00:33:41,650
man pages they are quite comprehensive

00:33:39,760 --> 00:33:46,030
you could you could disappear into those

00:33:41,650 --> 00:33:47,740
man pages read the tutorial don't read

00:33:46,030 --> 00:33:58,120
the I mean if you like reference manuals

00:33:47,740 --> 00:34:01,870
grain if you're curious but where do new

00:33:58,120 --> 00:34:04,450
up three releases fit in you we only saw

00:34:01,870 --> 00:34:06,640
packaging branches in this no no no here

00:34:04,450 --> 00:34:10,900
this is a new upstream release okay

00:34:06,640 --> 00:34:13,570
right so so in this diagram V one point

00:34:10,900 --> 00:34:15,490
two is the new upstream release and

00:34:13,570 --> 00:34:17,830
what's not shown on this diagram because

00:34:15,490 --> 00:34:20,590
it's way off to the left is is like

00:34:17,830 --> 00:34:22,450
there was a like a V one point one so

00:34:20,590 --> 00:34:26,500
you do a you do a new upstream release

00:34:22,450 --> 00:34:36,180
with get debris base new upstream let me

00:34:26,500 --> 00:34:38,080
take that off right so it it

00:34:36,180 --> 00:34:40,290
automatically merges everything together

00:34:38,080 --> 00:34:43,270
and rebase is your patch queue on top

00:34:40,290 --> 00:34:45,460
and it will automatically drop patches

00:34:43,270 --> 00:34:46,840
that have been merged upstream say

00:34:45,460 --> 00:34:49,990
they'll just vanish because git rebase

00:34:46,840 --> 00:34:52,720
does that if mostly it will do that

00:34:49,990 --> 00:34:55,090
right if it will do it if we get if get

00:34:52,720 --> 00:34:56,830
rebase will do it then get debris base

00:34:55,090 --> 00:34:58,990
that's good right right I'm consistently

00:34:56,830 --> 00:35:02,800
amazed by what git rebase managed to do

00:34:58,990 --> 00:35:05,770
by itself so you won't be typing a quilt

00:35:02,800 --> 00:35:08,260
- n - R to remove the thing that flies

00:35:05,770 --> 00:35:10,060
up so all that rubbish right and if you

00:35:08,260 --> 00:35:12,460
do have one I mean I had this with us n

00:35:10,060 --> 00:35:14,950
security updates if you have a like

00:35:12,460 --> 00:35:16,420
really complicated patch queue and you

00:35:14,950 --> 00:35:17,800
know that you need to drop these three

00:35:16,420 --> 00:35:19,300
patches because now they're an upstream

00:35:17,800 --> 00:35:20,860
and they all depend on each other so

00:35:19,300 --> 00:35:23,140
it's merge conflicts if you don't drop

00:35:20,860 --> 00:35:26,350
them you can just say get to every base

00:35:23,140 --> 00:35:28,240
new upstream - I and now you'll get an

00:35:26,350 --> 00:35:30,250
interactive rebase with the list of the

00:35:28,240 --> 00:35:32,520
the commits sin and you can just drop

00:35:30,250 --> 00:35:32,520
them there

00:35:40,360 --> 00:35:45,790
right so I'm expecting you all like

00:35:43,270 --> 00:35:51,250
typing frantically trying this out we

00:35:45,790 --> 00:35:53,820
have a conversion tool oh yes yes that's

00:35:51,250 --> 00:35:55,990
what I used on this home package like

00:35:53,820 --> 00:35:57,610
before the point at which I started the

00:35:55,990 --> 00:36:00,550
demo basically a few weeks ago I just

00:35:57,610 --> 00:36:03,190
typed get debri based convert from GBP

00:36:00,550 --> 00:36:06,580
because I was using GBP before and it

00:36:03,190 --> 00:36:10,870
fixed everything up so I should mention

00:36:06,580 --> 00:36:12,940
there that it's not a good idea to not

00:36:10,870 --> 00:36:16,450
know whether what you have is a debri

00:36:12,940 --> 00:36:20,230
based branch or a GB ppq branch because

00:36:16,450 --> 00:36:21,940
if you have a GB ppq branch then and

00:36:20,230 --> 00:36:23,230
then you run get debris base on it it

00:36:21,940 --> 00:36:24,970
will just throw away your patches and

00:36:23,230 --> 00:36:26,700
now you have no patches and you'll have

00:36:24,970 --> 00:36:30,070
to dig them out of the get history again

00:36:26,700 --> 00:36:31,960
but we do have a command convert to GBP

00:36:30,070 --> 00:36:33,850
if you for some reason you've tried it

00:36:31,960 --> 00:36:36,640
out yeah oh right I didn't know about

00:36:33,850 --> 00:36:38,200
that yeah it's it's it's it doesn't make

00:36:36,640 --> 00:36:41,590
it fast forward because it can't for

00:36:38,200 --> 00:36:43,920
reasons but it does work and you can get

00:36:41,590 --> 00:36:50,680
merged out of ours if you really want to

00:36:43,920 --> 00:36:51,760
it's used by the test suite okay so well

00:36:50,680 --> 00:36:54,220
thank you all very much

00:36:51,760 --> 00:36:56,560
and I'll let you get on with hacking and

00:36:54,220 --> 00:36:59,840
see you at the workshop

00:36:56,560 --> 00:37:01,900
[Applause]

00:36:59,840 --> 00:37:01,900

YouTube URL: https://www.youtube.com/watch?v=iov10lD7tcg


