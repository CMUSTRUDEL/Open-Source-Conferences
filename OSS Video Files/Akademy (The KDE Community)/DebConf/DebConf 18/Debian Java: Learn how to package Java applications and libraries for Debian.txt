Title: Debian Java: Learn how to package Java applications and libraries for Debian
Publication date: 2018-08-01
Playlist: DebConf 18
Description: 
	by Markus Koschany

At: DebConf18
https://debconf18.debconf.org/talks/123-debian-java-learn-how-to-package-java-applications-and-libraries-for-debian/

You are beginning to learn more about Debian packaging and one of your favorite programming languages is Java. You are already an experienced maintainer or packager but you are unfortunate enough having to package some Java app and you don't know how to start. Never heard of Ant, Maven and Gradle? Then this presentation will hopefully help you to get started quickly by introducing you to the most important Java build systems and methods to make them Debian compliant.

This talk is about learning by examples. It will highlight some Java applications and libraries that are already in Debian and demonstrate what you need to do to deliver your own package to your users. I will also talk about some common Java specific packaging errors and how you can avoid them.

Room: Xueshan (雪山)
Scheduled start: 2018-07-31 15:00:00
Captions: 
	00:00:05,490 --> 00:00:19,939
ok it's 3 o'clock I think you can start

00:00:09,590 --> 00:00:23,260
our session so first of all welcome to

00:00:19,939 --> 00:00:26,690
my talk about Dave and Java packaging

00:00:23,260 --> 00:00:29,590
manam my name is Marcos Kashani and I'm

00:00:26,690 --> 00:00:35,840
a member of the Java team in Debian

00:00:29,590 --> 00:00:40,730
today I want to talk about about our

00:00:35,840 --> 00:00:45,170
three build systems which we often use

00:00:40,730 --> 00:00:48,200
in our packaging work about ant maven

00:00:45,170 --> 00:00:50,030
and Gradle and I want to introduce you

00:00:48,200 --> 00:00:53,450
to the most important java terms and

00:00:50,030 --> 00:00:56,629
concepts and i want to talk about java

00:00:53,450 --> 00:00:59,059
helper which is very helpful if you want

00:00:56,629 --> 00:01:00,890
to package them something which has no

00:00:59,059 --> 00:01:04,250
build system at all or if you want to

00:01:00,890 --> 00:01:06,860
modify package which uses a different

00:01:04,250 --> 00:01:09,680
build system and in the end i want to

00:01:06,860 --> 00:01:20,390
show you some common error messages and

00:01:09,680 --> 00:01:24,350
how you can avoid making mistakes so if

00:01:20,390 --> 00:01:32,119
we talk about java then you all you need

00:01:24,350 --> 00:01:35,259
to know is that source files have a

00:01:32,119 --> 00:01:38,539
suffix called java so our typical

00:01:35,259 --> 00:01:44,000
HelloWorld program would look like this

00:01:38,539 --> 00:01:51,380
and if you wanted to compile it you just

00:01:44,000 --> 00:01:54,410
have to type Java C hello world now you

00:01:51,380 --> 00:02:00,679
can see that another file is popped up a

00:01:54,410 --> 00:02:03,649
class file and this file is just byte

00:02:00,679 --> 00:02:05,720
code and one aspect of Java is that

00:02:03,649 --> 00:02:10,910
everything is compiled to bytecode which

00:02:05,720 --> 00:02:13,430
is interpreted by the open JDK so if you

00:02:10,910 --> 00:02:16,459
compile it here in my system which is

00:02:13,430 --> 00:02:18,560
AMD 64 it is possible that you can

00:02:16,459 --> 00:02:20,360
transfer the file to any computer where

00:02:18,560 --> 00:02:22,849
an open JDK is installed

00:02:20,360 --> 00:02:23,450
no matter the operating system no matter

00:02:22,849 --> 00:02:26,690
the

00:02:23,450 --> 00:02:29,780
detector as long as it is supported and

00:02:26,690 --> 00:02:39,920
you could run this program just like

00:02:29,780 --> 00:02:44,030
this hello world so the next step would

00:02:39,920 --> 00:02:47,209
be something more complicated let's

00:02:44,030 --> 00:02:51,739
imagine you have a program which

00:02:47,209 --> 00:02:54,470
consists of three or four of these Java

00:02:51,739 --> 00:02:59,150
files and Java

00:02:54,470 --> 00:03:02,930
it is convention to organize source code

00:02:59,150 --> 00:03:04,610
in directories called packages so we

00:03:02,930 --> 00:03:10,420
have two packages here compute and

00:03:04,610 --> 00:03:19,130
engine and you would compile multiple

00:03:10,420 --> 00:03:23,799
files like this and now you have two

00:03:19,130 --> 00:03:23,799
class files within the compute directory

00:03:26,799 --> 00:03:30,769
compiling class files is one thing if

00:03:29,389 --> 00:03:36,069
you want to transfer those files you

00:03:30,769 --> 00:03:38,150
have to make it more well some kind of

00:03:36,069 --> 00:03:41,810
you want to transport it to another

00:03:38,150 --> 00:03:44,569
computer and you want to combine it into

00:03:41,810 --> 00:03:47,329
one single file all you have to do is

00:03:44,569 --> 00:03:52,670
creating a so-called jar file a jar file

00:03:47,329 --> 00:03:54,500
is merely a zip archive and all those

00:03:52,670 --> 00:03:58,100
class files are stored within this

00:03:54,500 --> 00:03:59,959
single archive plus one file which is

00:03:58,100 --> 00:04:04,459
very special to Java it is called a

00:03:59,959 --> 00:04:09,920
manifest file and this is very important

00:04:04,459 --> 00:04:15,459
later on so let's see how we can create

00:04:09,920 --> 00:04:21,079
a jar file the command is jar and

00:04:15,459 --> 00:04:24,560
something like C we F the name of your

00:04:21,079 --> 00:04:29,930
jar and then the class files you have

00:04:24,560 --> 00:04:31,400
just compiled now you can see that up

00:04:29,930 --> 00:04:33,500
until it hurts you it has added a

00:04:31,400 --> 00:04:35,890
manifest file it's so cause default

00:04:33,500 --> 00:04:38,800
manifest file

00:04:35,890 --> 00:04:44,810
and you can take a look inside the jar

00:04:38,800 --> 00:04:47,870
like this and see that the manifest file

00:04:44,810 --> 00:04:54,740
consists of just two lines per version

00:04:47,870 --> 00:04:56,600
and a curated by line manifest files can

00:04:54,740 --> 00:05:00,260
be much more complex and you will later

00:04:56,600 --> 00:05:03,680
see that it is very useful to modify

00:05:00,260 --> 00:05:05,930
this file because there are also

00:05:03,680 --> 00:05:09,950
information stored like the class path

00:05:05,930 --> 00:05:12,560
another very specific java term which

00:05:09,950 --> 00:05:16,520
basically means where can my program

00:05:12,560 --> 00:05:20,210
find my libraries on the system at the

00:05:16,520 --> 00:05:22,700
moment it does not know so you can

00:05:20,210 --> 00:05:26,000
change the class path within the

00:05:22,700 --> 00:05:29,180
manifest file but you can also say you

00:05:26,000 --> 00:05:34,730
can edit to the command line and tell

00:05:29,180 --> 00:05:41,780
Java to execute the program like this

00:05:34,730 --> 00:05:48,260
one so you would call Java

00:05:41,780 --> 00:05:50,740
- CP stands for class path and wait a

00:05:48,260 --> 00:05:50,740
second

00:05:54,900 --> 00:06:07,729
first of all let's move our computer to

00:05:57,660 --> 00:06:07,729
another directory and then

00:06:16,670 --> 00:06:19,720
[Music]

00:06:19,740 --> 00:06:33,190
hmm no it's not it so you would call of

00:06:30,850 --> 00:06:36,010
course Java C command which is to

00:06:33,190 --> 00:06:39,640
compile and then you put the computer on

00:06:36,010 --> 00:06:44,350
the class path and target the compute

00:06:39,640 --> 00:06:50,050
engine Java file in engine and now you

00:06:44,350 --> 00:06:54,040
can compile the engine file and that's

00:06:50,050 --> 00:06:56,050
basically how all these Java computation

00:06:54,040 --> 00:06:59,650
where are things happen how built how

00:06:56,050 --> 00:07:01,780
builds happen this is the most simplest

00:06:59,650 --> 00:07:03,700
case so if you take a look and you

00:07:01,780 --> 00:07:07,440
compute your compute engine Java file

00:07:03,700 --> 00:07:11,320
you can see statements like import

00:07:07,440 --> 00:07:14,200
compute dot compute which just means the

00:07:11,320 --> 00:07:16,390
package compute and the class compute

00:07:14,200 --> 00:07:19,330
the package compute and the class task

00:07:16,390 --> 00:07:21,910
should be imported and you have just

00:07:19,330 --> 00:07:25,630
told your compiler you should look for a

00:07:21,910 --> 00:07:28,570
computer jar in your tests directory and

00:07:25,630 --> 00:07:32,710
then he knows ok there I can find my

00:07:28,570 --> 00:07:36,310
classes and then compile my compute

00:07:32,710 --> 00:07:40,780
engine Java class this is what happens

00:07:36,310 --> 00:07:44,080
hundreds of times in Debian Java nor

00:07:40,780 --> 00:07:46,720
only on a much greater scale I just

00:07:44,080 --> 00:07:49,600
wanted to tell you the most basic

00:07:46,720 --> 00:07:53,220
aspects but this is in principle what

00:07:49,600 --> 00:07:59,050
happens in the attack or all the time

00:07:53,220 --> 00:08:04,030
now let's imagine you want to package an

00:07:59,050 --> 00:08:07,090
application which consists of 10 to 100

00:08:04,030 --> 00:08:11,050
files but you realize it has no boot

00:08:07,090 --> 00:08:14,320
system so what you do for example there

00:08:11,050 --> 00:08:19,480
are many packages API packages in Java

00:08:14,320 --> 00:08:23,320
that needs well that we need and they

00:08:19,480 --> 00:08:25,810
are available multiple of times in on

00:08:23,320 --> 00:08:29,290
the Internet we just did one

00:08:25,810 --> 00:08:31,630
so I have pulled two packages from a

00:08:29,290 --> 00:08:37,300
central that's a repository for Java

00:08:31,630 --> 00:08:39,969
files Java files and then I see that

00:08:37,300 --> 00:08:45,130
there's only one directory again that's

00:08:39,969 --> 00:08:48,130
our namespace orc OSGi and then you see

00:08:45,130 --> 00:08:51,130
a lot of packages eto framework and so

00:08:48,130 --> 00:08:53,350
on but you see there seems to be no no

00:08:51,130 --> 00:08:58,320
build system they're just directories

00:08:53,350 --> 00:09:03,280
and files source code so what can I do

00:08:58,320 --> 00:09:05,980
you could again use the java c command

00:09:03,280 --> 00:09:09,490
and compile your packages and you can

00:09:05,980 --> 00:09:13,690
you could create a simple script a loop

00:09:09,490 --> 00:09:15,910
and then well somehow you would compile

00:09:13,690 --> 00:09:18,910
all those files but you don't have to

00:09:15,910 --> 00:09:22,600
reinvent the wheel because we've created

00:09:18,910 --> 00:09:30,390
a tool called java helper which just

00:09:22,600 --> 00:09:36,460
does this work so in OS i was g i core

00:09:30,390 --> 00:09:40,000
there's a file called java builds and as

00:09:36,460 --> 00:09:41,830
you can see all you have to do is you

00:09:40,000 --> 00:09:46,990
give your Java file a name in this case

00:09:41,830 --> 00:09:48,520
OSGi core dot jar and point to the

00:09:46,990 --> 00:09:51,780
directory which contains all those

00:09:48,520 --> 00:09:55,150
source files and that's basically it's

00:09:51,780 --> 00:09:58,000
Java helper will compile all those files

00:09:55,150 --> 00:10:02,290
for you and create a Java file called

00:09:58,000 --> 00:10:05,339
OSGi dot core so how can you find more

00:10:02,290 --> 00:10:09,490
information about this Java helper tool

00:10:05,339 --> 00:10:13,510
so you would go to users shared dark

00:10:09,490 --> 00:10:17,980
Java helper and then we have a nice

00:10:13,510 --> 00:10:22,510
tutorial in HTML and texts let's prefer

00:10:17,980 --> 00:10:26,650
text here and there you can find all

00:10:22,510 --> 00:10:29,470
those commands they are prefixed with JH

00:10:26,650 --> 00:10:32,440
and it's pretty similar to the depth

00:10:29,470 --> 00:10:36,089
helper commands at the moment you only

00:10:32,440 --> 00:10:38,029
need to know one command it's caused JH

00:10:36,089 --> 00:10:40,189
underscore build

00:10:38,029 --> 00:10:42,889
and that's what you actually do with

00:10:40,189 --> 00:10:46,910
your Java build file so like with Debian

00:10:42,889 --> 00:10:50,209
debhelper you can choose either a file

00:10:46,910 --> 00:10:52,370
or you can choose to put those commands

00:10:50,209 --> 00:10:55,939
into your debian routes file and execute

00:10:52,370 --> 00:10:58,339
it so it's up to you it's a matter of

00:10:55,939 --> 00:11:04,790
preferences and it doesn't really matter

00:10:58,339 --> 00:11:07,189
so you can you see here you can see and

00:11:04,790 --> 00:11:09,379
we use a Deb helper and the edge

00:11:07,189 --> 00:11:12,740
sequencer and if you want to use Java

00:11:09,379 --> 00:11:17,870
helper you just pass with Java helper to

00:11:12,740 --> 00:11:21,259
a you add eh command what what else is

00:11:17,870 --> 00:11:24,170
important in this file you can see two

00:11:21,259 --> 00:11:26,240
variables yes I forgot if you have any

00:11:24,170 --> 00:11:29,000
questions just ask it's a workshop so

00:11:26,240 --> 00:11:32,660
yeah I have a question because I learned

00:11:29,000 --> 00:11:36,889
that frequently necessary that you at

00:11:32,660 --> 00:11:38,810
this utf-8 thingy is it well isn't it

00:11:36,889 --> 00:11:45,079
possible to make it the default because

00:11:38,810 --> 00:11:48,949
it should I always need to edit so good

00:11:45,079 --> 00:11:49,790
question well I've asked the same

00:11:48,949 --> 00:11:53,649
question

00:11:49,790 --> 00:11:56,240
multiple times on our mailing list but

00:11:53,649 --> 00:12:00,410
there's one to remember which could

00:11:56,240 --> 00:12:05,029
winst me okay not really sorry if you

00:12:00,410 --> 00:12:06,949
see you see this video now i'm it's

00:12:05,029 --> 00:12:09,439
quite difficult because there are

00:12:06,949 --> 00:12:13,970
multiple build systems and they default

00:12:09,439 --> 00:12:16,370
to like maven to USS key and that's i

00:12:13,970 --> 00:12:19,149
always think why do they do why do why

00:12:16,370 --> 00:12:22,009
do they do it and don't change it to UTF

00:12:19,149 --> 00:12:24,019
but what you are asking not the subset

00:12:22,009 --> 00:12:25,939
of utf-8 so nothing free yes

00:12:24,019 --> 00:12:31,309
yeah well and they have made it the

00:12:25,939 --> 00:12:33,680
default so they argue there is the drop

00:12:31,309 --> 00:12:36,589
of the package or the upstream in china

00:12:33,680 --> 00:12:38,660
to set the correct value so they are not

00:12:36,589 --> 00:12:43,490
responsible for setting a language

00:12:38,660 --> 00:12:46,279
feature yeah I agree with you yes it

00:12:43,490 --> 00:12:50,899
makes sense somehow but we don't want to

00:12:46,279 --> 00:12:51,560
overwrite upstream of the build systems

00:12:50,899 --> 00:12:55,250
and

00:12:51,560 --> 00:12:57,800
well I think it's struggling against

00:12:55,250 --> 00:13:01,310
upstream isn't in our breasts isn't the

00:12:57,800 --> 00:13:04,070
best way to to spend our time so what

00:13:01,310 --> 00:13:06,800
you can see here is the JH built command

00:13:04,070 --> 00:13:07,160
is called and we passed two options to

00:13:06,800 --> 00:13:10,070
it

00:13:07,160 --> 00:13:15,730
Java co-opts and Java doc opts and well

00:13:10,070 --> 00:13:17,840
we we say okay please use UTF utf-8 as

00:13:15,730 --> 00:13:19,820
your preferred language

00:13:17,840 --> 00:13:23,390
so otherwise the package wouldn't even

00:13:19,820 --> 00:13:25,190
compile yeah what else can you see in

00:13:23,390 --> 00:13:28,150
this file is there are two variables

00:13:25,190 --> 00:13:31,730
called Java home and class path I've

00:13:28,150 --> 00:13:35,210
told you about class path before so here

00:13:31,730 --> 00:13:38,890
we tell our Java helper program that he

00:13:35,210 --> 00:13:41,960
needs to look in jouza share Java OSGi

00:13:38,890 --> 00:13:48,970
annotation jar to find the needed

00:13:41,960 --> 00:13:52,160
classes to build OSGi core our

00:13:48,970 --> 00:13:57,020
convention is to install system-wide

00:13:52,160 --> 00:14:00,170
java libraries into user share java we

00:13:57,020 --> 00:14:05,420
have one unburden Java jar file and one

00:14:00,170 --> 00:14:07,670
version jar file and that's mostly

00:14:05,420 --> 00:14:10,190
important if you use build systems like

00:14:07,670 --> 00:14:13,790
ends or if you have no build system at

00:14:10,190 --> 00:14:16,510
all those for those bills UPS systems

00:14:13,790 --> 00:14:19,570
makes sense to stored in such a global

00:14:16,510 --> 00:14:24,410
directory you will later learn that

00:14:19,570 --> 00:14:27,800
maven has a different concept and we

00:14:24,410 --> 00:14:29,660
install the same jar file multiple times

00:14:27,800 --> 00:14:31,820
as just symlink two different

00:14:29,660 --> 00:14:35,089
directories because we have to keep a

00:14:31,820 --> 00:14:39,050
certain layout for may even but at the

00:14:35,089 --> 00:14:43,070
moment it's just important to know if

00:14:39,050 --> 00:14:46,790
you create a package you have to install

00:14:43,070 --> 00:14:49,820
at least one jar file and at least it

00:14:46,790 --> 00:14:53,390
should go in to use a shared java a java

00:14:49,820 --> 00:14:57,440
home is important I am not sure if you

00:14:53,390 --> 00:15:02,480
need it anymore for maven builds you

00:14:57,440 --> 00:15:03,589
don't need it I'm quite sure but for non

00:15:02,480 --> 00:15:05,180
build systems or end

00:15:03,589 --> 00:15:10,220
I suggest you still do

00:15:05,180 --> 00:15:15,530
this line exporter of a home so that the

00:15:10,220 --> 00:15:18,980
the tools can find our default Java

00:15:15,530 --> 00:15:22,100
development kits which is open JDK 10 at

00:15:18,980 --> 00:15:22,670
the moment and will be open JDK 11 in a

00:15:22,100 --> 00:15:26,360
few weeks

00:15:22,670 --> 00:15:29,120
next question if it's default why not

00:15:26,360 --> 00:15:32,360
setting the default and just do

00:15:29,120 --> 00:15:34,490
something else if it's yes yes as I said

00:15:32,360 --> 00:15:36,500
it is default in for maven builds

00:15:34,490 --> 00:15:38,900
already so you don't need there anymore

00:15:36,500 --> 00:15:42,290
well I put it stupidly in every rules

00:15:38,900 --> 00:15:45,620
file this line Java home equals to this

00:15:42,290 --> 00:15:48,860
one so that's it could be included into

00:15:45,620 --> 00:15:51,200
Yahveh at our hippo and then it's you

00:15:48,860 --> 00:15:53,150
have total faith yeah you sometimes want

00:15:51,200 --> 00:15:55,670
to override it yes and you override it

00:15:53,150 --> 00:15:59,270
if you want to override to it but if

00:15:55,670 --> 00:16:01,670
it's default okay

00:15:59,270 --> 00:16:03,710
let's think about it it makes sense yes

00:16:01,670 --> 00:16:06,560
so sometimes you want to override it and

00:16:03,710 --> 00:16:10,940
then you have to look I just go to use a

00:16:06,560 --> 00:16:14,180
lip jaehwi M so you can see they are

00:16:10,940 --> 00:16:15,910
multiple choice at the moment only we

00:16:14,180 --> 00:16:21,350
will keep only one for basta which is

00:16:15,910 --> 00:16:23,620
open JDK 11 and okay open JDK 8 will be

00:16:21,350 --> 00:16:28,370
kept just for development purposes

00:16:23,620 --> 00:16:38,360
purposes and it will receive no security

00:16:28,370 --> 00:16:41,570
support at all so okay so what else yeah

00:16:38,360 --> 00:16:44,660
so there's a second command here it's

00:16:41,570 --> 00:16:49,820
called JH maven repo helper I'm just

00:16:44,660 --> 00:16:53,210
telling you about it but it's it's meant

00:16:49,820 --> 00:16:56,080
for installing these jar files I

00:16:53,210 --> 00:17:01,070
mentioned before into a maven repository

00:16:56,080 --> 00:17:03,770
so and there's nothing no doc does not

00:17:01,070 --> 00:17:05,450
know about maven and if you have no

00:17:03,770 --> 00:17:08,480
build system at all of course it doesn't

00:17:05,450 --> 00:17:12,070
know how to install a maven artifact a

00:17:08,480 --> 00:17:15,890
draw file so we have created tools like

00:17:12,070 --> 00:17:18,640
JH maven repo helper or maven repo

00:17:15,890 --> 00:17:22,059
helper just maven repo

00:17:18,640 --> 00:17:26,939
that install those files into a new

00:17:22,059 --> 00:17:32,350
directory which is called user share

00:17:26,939 --> 00:17:35,920
maven repo and here you can see

00:17:32,350 --> 00:17:40,120
different packages already installed in

00:17:35,920 --> 00:17:40,690
my system and they are the layout is as

00:17:40,120 --> 00:17:43,270
follows

00:17:40,690 --> 00:17:47,470
so you install those artifacts into user

00:17:43,270 --> 00:17:51,190
user share maven repo and it is the same

00:17:47,470 --> 00:17:56,650
namespace as as you would see in the

00:17:51,190 --> 00:18:06,040
package itself so let's see for liftoff

00:17:56,650 --> 00:18:06,429
Marquis no where is it just take another

00:18:06,040 --> 00:18:11,500
one

00:18:06,429 --> 00:18:15,309
let's take comments codec and then you

00:18:11,500 --> 00:18:16,750
have comments codec comments codec so

00:18:15,309 --> 00:18:19,630
the first directory is the so-called

00:18:16,750 --> 00:18:25,500
group and the second directory is the

00:18:19,630 --> 00:18:28,500
so-called artifact and then you can see

00:18:25,500 --> 00:18:28,500
oops

00:18:29,460 --> 00:18:37,090
the version one point 11 and a Debian

00:18:33,340 --> 00:18:39,660
directory so your artifact would be

00:18:37,090 --> 00:18:42,910
installed into the versioned directory

00:18:39,660 --> 00:18:51,429
but we also create a Debian directory

00:18:42,910 --> 00:18:56,050
for one purpose to be able to reuse one

00:18:51,429 --> 00:18:58,390
package for everything so in Java it is

00:18:56,050 --> 00:19:04,030
very common it is very version centric

00:18:58,390 --> 00:19:06,010
and we use it to well we safe we save us

00:19:04,030 --> 00:19:07,960
time to package all these different

00:19:06,010 --> 00:19:11,530
versions which is also not allowed in

00:19:07,960 --> 00:19:14,020
Debian so we just package one version of

00:19:11,530 --> 00:19:16,210
comments codec and use that version for

00:19:14,020 --> 00:19:19,990
everything so even if another package

00:19:16,210 --> 00:19:22,929
depends on another version like 1.12 we

00:19:19,990 --> 00:19:27,010
just use the Debian version so this

00:19:22,929 --> 00:19:30,279
creates problems of course - so you have

00:19:27,010 --> 00:19:33,179
to constantly modify a patch

00:19:30,279 --> 00:19:36,370
different packages if they are not

00:19:33,179 --> 00:19:39,600
compatible with our Debian package but

00:19:36,370 --> 00:19:42,639
it cannot be awarded because we want to

00:19:39,600 --> 00:19:44,320
reward you want to reduce code

00:19:42,639 --> 00:19:48,610
duplication and it's also a security

00:19:44,320 --> 00:19:50,950
concern if we packaged multiple versions

00:19:48,610 --> 00:19:54,159
of the same library so in Debian there's

00:19:50,950 --> 00:19:56,879
only always only one library of course

00:19:54,159 --> 00:20:00,100
there exceptions but the general rule is

00:19:56,879 --> 00:20:02,919
please package only one library and then

00:20:00,100 --> 00:20:08,799
try to make all your reverse

00:20:02,919 --> 00:20:12,940
dependencies to work with it so yeah so

00:20:08,799 --> 00:20:15,309
that's basically one way JH maven repo

00:20:12,940 --> 00:20:19,000
helper is in Java helper I just

00:20:15,309 --> 00:20:21,639
mentioned it here you can use it but I

00:20:19,000 --> 00:20:24,240
recommend to use a maven repo helper

00:20:21,639 --> 00:20:34,210
instead which is a separate package

00:20:24,240 --> 00:20:35,860
let's see so this package enables Debian

00:20:34,210 --> 00:20:37,330
packages which are not using maven in

00:20:35,860 --> 00:20:38,830
their build process to provide install

00:20:37,330 --> 00:20:40,779
maven pumps and libraries in the

00:20:38,830 --> 00:20:45,100
repository located end-users share maven

00:20:40,779 --> 00:20:47,080
repo if you just use maven or maven only

00:20:45,100 --> 00:20:50,019
build system then you have to use maven

00:20:47,080 --> 00:20:52,480
debian helper instead so always remember

00:20:50,019 --> 00:20:54,909
if you are not using maven if you are

00:20:52,480 --> 00:20:59,559
either using ant or Gradle or no build

00:20:54,909 --> 00:21:02,350
system at all then please use either

00:20:59,559 --> 00:21:05,080
Java helper or maven repo helper if you

00:21:02,350 --> 00:21:07,179
want to provide also those maven

00:21:05,080 --> 00:21:10,210
artifacts it makes it easier for other

00:21:07,179 --> 00:21:13,299
maintenance who have packages which

00:21:10,210 --> 00:21:15,039
which rely only on maven to find your

00:21:13,299 --> 00:21:17,289
jar files which you have just packaged

00:21:15,039 --> 00:21:21,309
if you only install them into user share

00:21:17,289 --> 00:21:22,690
Java they won't find those jar files or

00:21:21,309 --> 00:21:26,470
it would be much more complicated for

00:21:22,690 --> 00:21:30,039
them so if you if you would like want to

00:21:26,470 --> 00:21:33,029
be nice to them please also use maven

00:21:30,039 --> 00:21:36,029
repo helper to install those jar files

00:21:33,029 --> 00:21:36,029
ok

00:21:36,100 --> 00:21:46,130
so that's it for no Belsen build systems

00:21:40,160 --> 00:21:50,210
let's go to end and 2012 i packaged

00:21:46,130 --> 00:21:53,750
media take view which is german

00:21:50,210 --> 00:21:57,230
application to view and download public

00:21:53,750 --> 00:22:01,630
television streams and that was my

00:21:57,230 --> 00:22:06,320
gateway or my yeah well my first package

00:22:01,630 --> 00:22:11,320
which i contributed to debian and as you

00:22:06,320 --> 00:22:16,220
can see media take you back in 2012 2013

00:22:11,320 --> 00:22:23,830
used ends how can you see that if it is

00:22:16,220 --> 00:22:28,370
and there's always a built xml file well

00:22:23,830 --> 00:22:30,800
so xml looks some say quite ugly some

00:22:28,370 --> 00:22:35,210
say it is human readable well you decide

00:22:30,800 --> 00:22:39,380
and you can also see in this case that

00:22:35,210 --> 00:22:41,570
it uses and it references another

00:22:39,380 --> 00:22:43,250
project it's called env project and it

00:22:41,570 --> 00:22:45,620
means the upstream developer used

00:22:43,250 --> 00:22:48,860
NetBeans at this time it's not easy for

00:22:45,620 --> 00:22:51,230
Java and it's it's a bit specific but if

00:22:48,860 --> 00:22:53,540
you come across such the package always

00:22:51,230 --> 00:22:55,760
remember this is a NetBeans project and

00:22:53,540 --> 00:22:58,429
if you want to modify something you

00:22:55,760 --> 00:23:01,910
could go to the NB project directory and

00:22:58,429 --> 00:23:03,770
just modify those XML files so what

00:23:01,910 --> 00:23:11,230
options do you have if you want to build

00:23:03,770 --> 00:23:17,840
an ant package so you can first of all

00:23:11,230 --> 00:23:20,510
you have to modify you can either modify

00:23:17,840 --> 00:23:23,350
the build file and this is necessary

00:23:20,510 --> 00:23:26,360
because most upstream developers

00:23:23,350 --> 00:23:29,059
includes other libraries in their

00:23:26,360 --> 00:23:30,500
package so before you start even

00:23:29,059 --> 00:23:33,200
packaging just take a look at the

00:23:30,500 --> 00:23:35,780
sources and remove all jar files and all

00:23:33,200 --> 00:23:40,010
class files they don't do this out of

00:23:35,780 --> 00:23:42,710
malice but because they want to make it

00:23:40,010 --> 00:23:44,900
easier for other developers it's more

00:23:42,710 --> 00:23:46,620
convenient to bundle everything together

00:23:44,900 --> 00:23:49,830
and yeah

00:23:46,620 --> 00:23:52,110
it's it's easier for Java developers so

00:23:49,830 --> 00:23:54,029
if someone uses an D usually creates a

00:23:52,110 --> 00:23:54,960
Lib directory and puts all those Java

00:23:54,029 --> 00:23:57,419
files into it

00:23:54,960 --> 00:23:59,640
so in Debian we can't do that because

00:23:57,419 --> 00:24:03,029
yeah well kind of violates our

00:23:59,640 --> 00:24:05,940
principles so just remove it and then

00:24:03,029 --> 00:24:09,720
you can either patch the build.xml file

00:24:05,940 --> 00:24:13,700
and change the path from lip to user

00:24:09,720 --> 00:24:20,399
share Java because that's our generic

00:24:13,700 --> 00:24:22,289
repository or you can recreate the Lib

00:24:20,399 --> 00:24:26,820
directory which you have previously

00:24:22,289 --> 00:24:29,429
deleted and zoom link all Java files

00:24:26,820 --> 00:24:33,570
which are in Doozer shared Java to this

00:24:29,429 --> 00:24:39,570
Lib directory how do you do that so you

00:24:33,570 --> 00:24:45,440
can use Java heppa again just go through

00:24:39,570 --> 00:25:06,980
the documentation again our tutorial and

00:24:45,440 --> 00:25:06,980
then oh no oops let's take this one

00:25:07,300 --> 00:25:12,250
so you can either use a file called

00:25:10,030 --> 00:25:16,810
linked jars in your daemon directory

00:25:12,250 --> 00:25:19,750
which looks like this one and at one

00:25:16,810 --> 00:25:22,150
line for creating a Lib directory

00:25:19,750 --> 00:25:24,370
another line for creating a subdirectory

00:25:22,150 --> 00:25:27,670
live builds and a third line for

00:25:24,370 --> 00:25:32,110
creating a sub directory runtime usually

00:25:27,670 --> 00:25:34,390
only needs the first line and then all

00:25:32,110 --> 00:25:39,820
your built dependencies will be linked

00:25:34,390 --> 00:25:41,710
to this directory so I don't know it's a

00:25:39,820 --> 00:25:44,440
matter of taste I think you can either

00:25:41,710 --> 00:25:46,620
patch it which might be looking more

00:25:44,440 --> 00:25:51,850
clean or you can use this helper tool

00:25:46,620 --> 00:25:53,830
the end product is the same so your

00:25:51,850 --> 00:25:58,210
build system will definitely find your

00:25:53,830 --> 00:26:00,760
built dependencies and will run all

00:25:58,210 --> 00:26:05,590
necessary steps so debian routes looks

00:26:00,760 --> 00:26:10,600
like this again we use debhelper and you

00:26:05,590 --> 00:26:13,780
have only to add with Java helper again

00:26:10,600 --> 00:26:17,110
and if you want to create maven

00:26:13,780 --> 00:26:19,330
artifacts then maven repo helper is your

00:26:17,110 --> 00:26:22,510
tool of choice and that's it basically

00:26:19,330 --> 00:26:25,000
so the other steps are generic Debian

00:26:22,510 --> 00:26:27,540
overrides which could happen every other

00:26:25,000 --> 00:26:27,540
package to

00:26:34,760 --> 00:26:44,840
another example electric electric is a

00:26:40,340 --> 00:26:50,900
nice application for ya it's a C ad

00:26:44,840 --> 00:26:55,850
system that can design circuits and IC

00:26:50,900 --> 00:26:59,270
layouts it's also written in Java and it

00:26:55,850 --> 00:27:02,090
also uses the end build system again

00:26:59,270 --> 00:27:05,390
here you see that we don't lose link

00:27:02,090 --> 00:27:09,530
jars there's also no sign that we use it

00:27:05,390 --> 00:27:11,600
in Debian rules again we tell our build

00:27:09,530 --> 00:27:14,830
system that the class pathway where it

00:27:11,600 --> 00:27:18,020
can finds all those dependencies is

00:27:14,830 --> 00:27:21,190
inducers area Java again and here we

00:27:18,020 --> 00:27:25,910
list all our built dependencies as

00:27:21,190 --> 00:27:31,070
absolute with absolute paths separated

00:27:25,910 --> 00:27:37,100
by a colon and then we just add again

00:27:31,070 --> 00:27:41,450
with dab Java helper and that's it so in

00:27:37,100 --> 00:27:47,410
this case I have decided to patch built

00:27:41,450 --> 00:27:51,590
XML and remove unnecessary stuff and

00:27:47,410 --> 00:27:57,710
change the Lib directory to to use a

00:27:51,590 --> 00:28:05,540
shower here you can see Java C is our

00:27:57,710 --> 00:28:07,970
compiler and then you can put your your

00:28:05,540 --> 00:28:13,610
built dependencies inside a class path

00:28:07,970 --> 00:28:17,000
element and point to to your built

00:28:13,610 --> 00:28:18,290
dependencies and use a shared Java it's

00:28:17,000 --> 00:28:20,330
one way to achieve it you can also use

00:28:18,290 --> 00:28:25,220
linked jars again it's a matter of taste

00:28:20,330 --> 00:28:31,429
and your choice what else of you to

00:28:25,220 --> 00:28:36,410
remember about ends well and is a very

00:28:31,429 --> 00:28:40,040
simple build system it is meant as a

00:28:36,410 --> 00:28:42,710
build tool in contrast to maven which is

00:28:40,040 --> 00:28:46,940
more like a framework and a project

00:28:42,710 --> 00:28:48,559
management tool if you can avoid it or I

00:28:46,940 --> 00:28:50,690
think and is simpler

00:28:48,559 --> 00:28:53,629
but our support for mavin is equally

00:28:50,690 --> 00:28:57,110
good in the moment so you can choose but

00:28:53,629 --> 00:28:59,539
it is simpler for beginners in my

00:28:57,110 --> 00:29:03,559
opinion so if you can choose I suggests

00:28:59,539 --> 00:29:05,450
you can you use use end but if you're

00:29:03,559 --> 00:29:13,749
not I explain mavin in a few seconds

00:29:05,450 --> 00:29:19,190
it's not complicated at all oh wait okay

00:29:13,749 --> 00:29:20,779
that's mavin mavin yes so as I said

00:29:19,190 --> 00:29:27,649
mavin is more like a project management

00:29:20,779 --> 00:29:30,619
tool it is decorative and it uses

00:29:27,649 --> 00:29:33,080
conventions so if you look at a maven

00:29:30,619 --> 00:29:35,779
project there's always you can always

00:29:33,080 --> 00:29:37,580
find a structure that makes it quite

00:29:35,779 --> 00:29:41,259
easy for Debian packages because you

00:29:37,580 --> 00:29:45,490
instantly know this is a maven project

00:29:41,259 --> 00:29:49,789
let's take a look at PDF Sam which is a

00:29:45,490 --> 00:29:52,580
PDF application you instantly know that

00:29:49,789 --> 00:29:57,730
it is a maven project if you see a

00:29:52,580 --> 00:29:57,730
pom.xml file that's a maven project and

00:30:00,639 --> 00:30:09,129
the first thing you have to do is

00:30:03,200 --> 00:30:13,309
analyst analyst analyze the dependencies

00:30:09,129 --> 00:30:21,950
and check whether they are already

00:30:13,309 --> 00:30:25,580
present in debian so maven dependencies

00:30:21,950 --> 00:30:27,619
are structured like this you have a

00:30:25,580 --> 00:30:31,789
group ID we have artifactory any other

00:30:27,619 --> 00:30:33,799
version and if you want to find out it

00:30:31,789 --> 00:30:36,350
would already exist in Debian I suggest

00:30:33,799 --> 00:30:44,059
use for example code search debian

00:30:36,350 --> 00:30:52,509
dotnet just search for the name and you

00:30:44,059 --> 00:30:56,480
could do something like hibernate path

00:30:52,509 --> 00:31:02,060
Debian control

00:30:56,480 --> 00:31:06,270
and then code search would list you all

00:31:02,060 --> 00:31:09,680
possibilities of possible occurrences of

00:31:06,270 --> 00:31:12,780
hibernate in your Debian control file

00:31:09,680 --> 00:31:15,720
and you know hey there's a live

00:31:12,780 --> 00:31:17,700
hibernate file so this is obviously

00:31:15,720 --> 00:31:21,300
packaged for Debian because it's very

00:31:17,700 --> 00:31:26,400
important hey a question on versioning

00:31:21,300 --> 00:31:29,700
is the version in Debian always

00:31:26,400 --> 00:31:36,890
guaranteed to be the same as the version

00:31:29,700 --> 00:31:41,700
in the maven repo for a given dependency

00:31:36,890 --> 00:31:45,260
I think rather know so let's say there's

00:31:41,700 --> 00:31:50,780
a version 1.1 it's exactly the same

00:31:45,260 --> 00:31:53,820
version as in maven central or else but

00:31:50,780 --> 00:31:56,040
well sometimes we modify modify the

00:31:53,820 --> 00:32:00,810
content okay because of free software

00:31:56,040 --> 00:32:02,760
reasons for multiple reasons but we only

00:32:00,810 --> 00:32:06,180
packaged one version so you can be sure

00:32:02,760 --> 00:32:08,130
if we package version 1.1 that it is

00:32:06,180 --> 00:32:10,140
exactly the same version as American

00:32:08,130 --> 00:32:12,240
central maybe we have modified it we

00:32:10,140 --> 00:32:18,420
added a patch okay you can easily see

00:32:12,240 --> 00:32:22,590
this in our dev and directory but well

00:32:18,420 --> 00:32:25,320
if you try to package something and you

00:32:22,590 --> 00:32:28,320
know the project requires version 1.2 of

00:32:25,320 --> 00:32:33,950
this specific library you have to use

00:32:28,320 --> 00:32:36,600
1.1 instead or you upgrade the package

00:32:33,950 --> 00:32:38,190
to 1.2 and then you have the same

00:32:36,600 --> 00:32:40,800
version but then you have to make sure

00:32:38,190 --> 00:32:43,890
that all other reverse dependencies

00:32:40,800 --> 00:32:47,760
still work continue to work so obviously

00:32:43,890 --> 00:32:50,550
that's kind of that's sweet tricky is

00:32:47,760 --> 00:32:53,490
there like how do you is there a quick

00:32:50,550 --> 00:32:57,780
way to tell if there's a difference

00:32:53,490 --> 00:33:00,390
other than like dipping it basically I

00:32:57,780 --> 00:33:04,050
know there's two like ABI a compliance

00:33:00,390 --> 00:33:07,090
checker in Java so you could use that to

00:33:04,050 --> 00:33:11,129
find out if you break something the ABI

00:33:07,090 --> 00:33:13,269
well but that's our daily business I say

00:33:11,129 --> 00:33:15,490
we have to make sure that everything

00:33:13,269 --> 00:33:18,009
works so the more important the library

00:33:15,490 --> 00:33:22,659
is if you like it Apache Commons library

00:33:18,009 --> 00:33:25,059
which is used by dozens of packages then

00:33:22,659 --> 00:33:29,590
it can happen that something breaks well

00:33:25,059 --> 00:33:31,659
and you have to fix fix it there now

00:33:29,590 --> 00:33:33,940
there's no other way so we can only use

00:33:31,659 --> 00:33:36,399
one version and you have two choices you

00:33:33,940 --> 00:33:38,710
either upgrade the library or you fix

00:33:36,399 --> 00:33:44,169
all reverse dependencies to make it work

00:33:38,710 --> 00:33:45,610
with with it that's it yeah that makes

00:33:44,169 --> 00:33:53,950
it a bit common that makes it a bit

00:33:45,610 --> 00:33:56,999
complicated that's true ok um so you can

00:33:53,950 --> 00:34:00,490
see all those different dependencies and

00:33:56,999 --> 00:34:03,279
it's good practicum and practice a good

00:34:00,490 --> 00:34:05,409
practice to to check do they exist in

00:34:03,279 --> 00:34:07,509
Debian so this is your first step check

00:34:05,409 --> 00:34:09,669
if they exist and then decide if you

00:34:07,509 --> 00:34:11,200
want to package them for example you

00:34:09,669 --> 00:34:13,780
don't need to package everything

00:34:11,200 --> 00:34:17,020
sometimes you have a maven project which

00:34:13,780 --> 00:34:19,869
consists of sub modules like PDF Sam but

00:34:17,020 --> 00:34:23,260
you only need one module so obviously

00:34:19,869 --> 00:34:27,730
you don't have to package dependencies

00:34:23,260 --> 00:34:29,649
for PDFs on merch if you only lead PDFs

00:34:27,730 --> 00:34:31,480
on FX

00:34:29,649 --> 00:34:38,320
what you can what you can do is the

00:34:31,480 --> 00:34:39,790
following there's

00:34:38,320 --> 00:34:47,140
so-called pumps file in your Debian

00:34:39,790 --> 00:34:50,260
directory and you can see it lists all

00:34:47,140 --> 00:34:52,450
pom.xml files in your project so if you

00:34:50,260 --> 00:34:57,820
want to ignore someone something just

00:34:52,450 --> 00:35:03,310
add the ignore option to it and you will

00:34:57,820 --> 00:35:05,830
you will you will be done and so don't

00:35:03,310 --> 00:35:08,800
worry about too many built dependencies

00:35:05,830 --> 00:35:10,810
keep it simple if you don't need Java

00:35:08,800 --> 00:35:13,300
documentation disable it if you don't

00:35:10,810 --> 00:35:16,000
need tests which require often different

00:35:13,300 --> 00:35:18,310
built dependencies disable the tests for

00:35:16,000 --> 00:35:20,500
for the at the beginning and add them

00:35:18,310 --> 00:35:24,760
later if you need to M really need them

00:35:20,500 --> 00:35:30,610
so let's take a look at a tool which is

00:35:24,760 --> 00:35:40,120
called mhm make and which simplifies

00:35:30,610 --> 00:35:44,800
certain steps it is a tool to create to

00:35:40,120 --> 00:35:47,350
create initial Debian package it it's

00:35:44,800 --> 00:35:49,630
very simple and it only works if you

00:35:47,350 --> 00:35:51,460
have all built dependencies already

00:35:49,630 --> 00:35:53,500
installed on your system always remember

00:35:51,460 --> 00:35:55,450
that it can't automatically fetch them

00:35:53,500 --> 00:35:59,350
from the internet and create you and

00:35:55,450 --> 00:36:03,490
package at least not yet so what can you

00:35:59,350 --> 00:36:05,590
do you can run mhm make and then it asks

00:36:03,490 --> 00:36:07,480
a couple of questions the name of your

00:36:05,590 --> 00:36:09,850
source package the name of your binary

00:36:07,480 --> 00:36:12,430
package do you want to run tests as I

00:36:09,850 --> 00:36:16,290
said no it's too complicated for the

00:36:12,430 --> 00:36:19,690
moment no we don't want Java doc and

00:36:16,290 --> 00:36:24,700
then it checks the license it analyzes

00:36:19,690 --> 00:36:27,430
the poem and now it asks you I found

00:36:24,700 --> 00:36:29,800
something here a pom file do we want to

00:36:27,430 --> 00:36:33,160
ignore it and if if you see it is

00:36:29,800 --> 00:36:36,460
highlighted TTY is capitalized yes

00:36:33,160 --> 00:36:37,810
then enter the version and then it ask

00:36:36,460 --> 00:36:39,730
an important question changed the

00:36:37,810 --> 00:36:43,000
version to the symbolic debian version

00:36:39,730 --> 00:36:46,320
as a previous to set it is preferred

00:36:43,000 --> 00:36:50,760
that we change everything to two debian

00:36:46,320 --> 00:36:52,110
because you can just

00:36:50,760 --> 00:36:54,240
point all your other libraries and

00:36:52,110 --> 00:36:56,100
applications to the steady inversion and

00:36:54,240 --> 00:36:58,350
they will still continue to work they

00:36:56,100 --> 00:37:01,260
won't work if we would use different

00:36:58,350 --> 00:37:03,420
versions so always use the Debian

00:37:01,260 --> 00:37:09,930
version unless you have a good reason

00:37:03,420 --> 00:37:12,450
not to so include all models yes and

00:37:09,930 --> 00:37:14,340
then it asks again the question with the

00:37:12,450 --> 00:37:16,850
debian version and you can press just

00:37:14,340 --> 00:37:16,850
enter

00:37:24,690 --> 00:37:30,660
okay well it also knows whether plugin

00:37:28,349 --> 00:37:32,099
is useful or not in this case the Maven

00:37:30,660 --> 00:37:33,809
sauce plugin is not useful for us

00:37:32,099 --> 00:37:36,480
because we always provide a source

00:37:33,809 --> 00:37:40,349
package in debian so we don't need this

00:37:36,480 --> 00:37:45,500
you don't need Java doc and other

00:37:40,349 --> 00:37:45,500
plugins so just press yes ignore stuff

00:37:46,880 --> 00:37:58,530
test dependencies yes ok now this could

00:37:54,210 --> 00:38:02,280
be useful no so here's a problem ignore

00:37:58,530 --> 00:38:04,260
this dependency Java X sir fled if you

00:38:02,280 --> 00:38:07,440
were Java developer you would know the

00:38:04,260 --> 00:38:09,089
surface API is packaged in Debian it's

00:38:07,440 --> 00:38:11,809
kind of strangely it doesn't find it I

00:38:09,089 --> 00:38:16,369
have installed it but in this case just

00:38:11,809 --> 00:38:16,369
ignore it again and hope it will work

00:38:24,300 --> 00:38:28,980
so he just looks for another version of

00:38:27,310 --> 00:38:31,960
the shuttle API

00:38:28,980 --> 00:38:36,010
cannot find it and then it will abort

00:38:31,960 --> 00:38:39,030
and just continue if you're unlucky it

00:38:36,010 --> 00:38:41,320
can happen that mah make will just

00:38:39,030 --> 00:38:43,870
completely aboard and you are left only

00:38:41,320 --> 00:38:47,500
we have three or four files and they are

00:38:43,870 --> 00:38:50,800
not complete and then you have to figure

00:38:47,500 --> 00:38:54,660
out how to to add the additional

00:38:50,800 --> 00:38:56,860
information but usually I recommend just

00:38:54,660 --> 00:38:59,710
take a look at other packages which

00:38:56,860 --> 00:39:03,010
which are very similar to yours and just

00:38:59,710 --> 00:39:05,470
copy just copy them just rename the

00:39:03,010 --> 00:39:13,660
package names and they are they look

00:39:05,470 --> 00:39:16,900
very uniform and very very similar No so

00:39:13,660 --> 00:39:18,910
we just ignore the tests now and you ask

00:39:16,900 --> 00:39:20,680
another question about the description

00:39:18,910 --> 00:39:25,600
of the package if you want to add in

00:39:20,680 --> 00:39:29,890
description and it fails okay that is

00:39:25,600 --> 00:39:32,050
the so-called presentation effect so

00:39:29,890 --> 00:39:35,170
what you can see now is there's a Debian

00:39:32,050 --> 00:39:36,700
directory and it contains several files

00:39:35,170 --> 00:39:41,620
and this is what I means it is

00:39:36,700 --> 00:39:43,810
incomplete this worked before but in

00:39:41,620 --> 00:39:47,440
this case you are left with only the

00:39:43,810 --> 00:39:54,100
relevant maven files let's see what is

00:39:47,440 --> 00:39:57,700
the main rules file in this case you can

00:39:54,100 --> 00:40:00,790
see that your group ID so the file

00:39:57,700 --> 00:40:04,270
consists of group ID artifact ID the

00:40:00,790 --> 00:40:06,250
type and the version and we always

00:40:04,270 --> 00:40:09,460
substitute the version with Debian and

00:40:06,250 --> 00:40:12,310
the syntax is used is the same like set

00:40:09,460 --> 00:40:15,880
a stream editor so if you want to change

00:40:12,310 --> 00:40:17,770
something you use a maven routes file if

00:40:15,880 --> 00:40:22,930
you wanted to modify a group ID you

00:40:17,770 --> 00:40:26,590
would use this syntax just replace the

00:40:22,930 --> 00:40:29,190
word with another word you know another

00:40:26,590 --> 00:40:29,190
word you know

00:40:29,280 --> 00:40:32,349
[Music]

00:40:32,380 --> 00:40:37,790
yeah

00:40:33,820 --> 00:40:39,140
so the another important file is maven

00:40:37,790 --> 00:40:41,360
ignorance it's the exact opposite of

00:40:39,140 --> 00:40:43,430
maven rules here you were to just ignore

00:40:41,360 --> 00:40:45,560
artifacts you don't need again the

00:40:43,430 --> 00:40:49,180
structure is the same first column as

00:40:45,560 --> 00:40:54,760
the group IDs second is artifact and an

00:40:49,180 --> 00:40:57,440
asterisk means it can take any value

00:40:54,760 --> 00:40:59,510
so all those artifacts would be ignored

00:40:57,440 --> 00:41:05,560
and the build system would just think

00:40:59,510 --> 00:41:09,350
okay then ignore them last but not least

00:41:05,560 --> 00:41:12,020
the next important file is pumps the

00:41:09,350 --> 00:41:14,540
pumps file it is if you create a package

00:41:12,020 --> 00:41:18,820
with edge make there's always some text

00:41:14,540 --> 00:41:23,120
explaining what the options mean and

00:41:18,820 --> 00:41:27,530
here you can see that we ignore the

00:41:23,120 --> 00:41:30,040
parent poem by default and we add

00:41:27,530 --> 00:41:34,820
another option has package version

00:41:30,040 --> 00:41:39,110
sometimes package person means boot use

00:41:34,820 --> 00:41:41,390
the latest or or tell your built reverse

00:41:39,110 --> 00:41:44,030
dependencies that they should at a

00:41:41,390 --> 00:41:45,680
strict version dependency on your

00:41:44,030 --> 00:41:48,890
package so they always depend on the

00:41:45,680 --> 00:41:52,160
latest version yeah decide for yourself

00:41:48,890 --> 00:41:54,500
if you need it or you can add you can

00:41:52,160 --> 00:42:02,960
use the option ignored to ignore certain

00:41:54,500 --> 00:42:10,460
artifacts okay oh we are running out of

00:42:02,960 --> 00:42:16,190
time so I just mention two things take a

00:42:10,460 --> 00:42:18,470
look at PDF some if you want to package

00:42:16,190 --> 00:42:20,870
a maven project an application from a

00:42:18,470 --> 00:42:25,520
even if you want to package library with

00:42:20,870 --> 00:42:28,480
maven use for example lip 12 monkeys

00:42:25,520 --> 00:42:31,930
Java which is a very simple package and

00:42:28,480 --> 00:42:34,430
modeled your package after this one

00:42:31,930 --> 00:42:39,590
ignore our sub modules if you don't need

00:42:34,430 --> 00:42:43,160
them and well if you have any questions

00:42:39,590 --> 00:42:47,450
just talk to us on our mailing list

00:42:43,160 --> 00:42:50,980
devyn Java or on our IRC Channel and we

00:42:47,450 --> 00:42:54,140
can answer them so last but not least I

00:42:50,980 --> 00:42:55,900
want to mention Gradle which is the

00:42:54,140 --> 00:42:59,089
ultimate build system very complicated

00:42:55,900 --> 00:43:00,140
and very powerful of course it's the

00:42:59,089 --> 00:43:04,460
only build system you will ever need

00:43:00,140 --> 00:43:07,960
they say it's also decorative and it

00:43:04,460 --> 00:43:11,900
uses groovy as a domain-specific

00:43:07,960 --> 00:43:14,000
language so you can create your you can

00:43:11,900 --> 00:43:17,780
modify every aspect of your build system

00:43:14,000 --> 00:43:20,839
of groovy it's very powerful but for us

00:43:17,780 --> 00:43:24,109
seven packages is also very complicated

00:43:20,839 --> 00:43:25,520
to create a proper package it is much

00:43:24,109 --> 00:43:28,130
easier with maven because it uses

00:43:25,520 --> 00:43:31,310
conventions so you always find the same

00:43:28,130 --> 00:43:32,900
information in in your source directory

00:43:31,310 --> 00:43:35,210
and your source directory is the code

00:43:32,900 --> 00:43:36,950
then you have a main directory with the

00:43:35,210 --> 00:43:39,349
application code and the test directory

00:43:36,950 --> 00:43:42,609
with the test code and so on in Gradle

00:43:39,349 --> 00:43:42,609
this all can be very different

00:43:42,880 --> 00:43:49,190
remember for maven you take you use

00:43:47,300 --> 00:43:51,170
maven debian helper and if you package

00:43:49,190 --> 00:43:53,869
the Gradle application use Gradle Debian

00:43:51,170 --> 00:43:55,869
helper Gradle Debian hyper is not as

00:43:53,869 --> 00:44:00,260
powerful as maven Debian haka but it

00:43:55,869 --> 00:44:04,760
transforms all those dependencies which

00:44:00,260 --> 00:44:08,230
are in a boot Gradle file well in a

00:44:04,760 --> 00:44:14,869
format which can be recognized by our

00:44:08,230 --> 00:44:17,000
maven tools so you usually usually a the

00:44:14,869 --> 00:44:19,270
Gradle upstream will pull all

00:44:17,000 --> 00:44:21,530
dependencies from maven central and

00:44:19,270 --> 00:44:26,150
graded a button helper will help you to

00:44:21,530 --> 00:44:28,520
well transform the very specific Gradle

00:44:26,150 --> 00:44:30,920
notations into something our build tools

00:44:28,520 --> 00:44:34,550
can understand just just remember that

00:44:30,920 --> 00:44:36,140
and otherwise you have to patch the

00:44:34,550 --> 00:44:38,960
build.gradle file at the moment so you

00:44:36,140 --> 00:44:42,349
have to remove stuff which doesn't work

00:44:38,960 --> 00:44:44,990
like methods or plugins which we have in

00:44:42,349 --> 00:44:47,450
packaged yet etc it's a bit more

00:44:44,990 --> 00:44:50,420
complicated so there's no magic tool

00:44:47,450 --> 00:44:52,790
which will create a package for you we

00:44:50,420 --> 00:44:55,780
have different Gradle packages in debian

00:44:52,790 --> 00:44:58,330
just take a look example for the reason

00:44:55,780 --> 00:45:02,080
version of media take you now it uses

00:44:58,330 --> 00:45:04,630
Gradle previously it used and mockito is

00:45:02,080 --> 00:45:16,200
a Java library that also uses Gradle

00:45:04,630 --> 00:45:16,200
check that out or apktool ok last words

00:45:22,080 --> 00:45:27,250
some errors common errors if you see

00:45:25,300 --> 00:45:28,960
failed to execute goal one of its

00:45:27,250 --> 00:45:31,120
dependencies could not be resolved and

00:45:28,960 --> 00:45:33,130
the artifact XY that has not been

00:45:31,120 --> 00:45:35,350
downloaded from it that usually means

00:45:33,130 --> 00:45:39,490
either you haven't added the built

00:45:35,350 --> 00:45:42,730
appearances to Debian control or you've

00:45:39,490 --> 00:45:48,400
got the maven roots far wrong so the

00:45:42,730 --> 00:45:52,450
artifacts name or the group ID is XY but

00:45:48,400 --> 00:45:54,340
you wanted to call it banana so it is

00:45:52,450 --> 00:45:56,590
named banana in Debian so you have to

00:45:54,340 --> 00:46:02,260
use maven roots to transform X Y and su

00:45:56,590 --> 00:46:05,440
banana and always remember that is most

00:46:02,260 --> 00:46:08,230
likely a problem with with your maven

00:46:05,440 --> 00:46:11,680
roots file or you haven't edits the

00:46:08,230 --> 00:46:13,000
package to built it fancies secondly the

00:46:11,680 --> 00:46:15,220
package Explorer that does not exist

00:46:13,000 --> 00:46:17,320
what I cannot find symbols that also

00:46:15,220 --> 00:46:19,750
means either you haven't added the built

00:46:17,320 --> 00:46:23,470
dependencies to them in control or the

00:46:19,750 --> 00:46:25,240
library is too new or too old and they

00:46:23,470 --> 00:46:28,960
have just removed the class in the newer

00:46:25,240 --> 00:46:31,420
version or move the method this can

00:46:28,960 --> 00:46:33,430
always be happen and last but not least

00:46:31,420 --> 00:46:36,270
a previously mentioned and mapable

00:46:33,430 --> 00:46:39,160
character for encoding us-ascii

00:46:36,270 --> 00:46:42,120
well then you have to pass one of the

00:46:39,160 --> 00:46:47,620
encoding options of end maven or Gradle

00:46:42,120 --> 00:46:53,860
two to Debian head to that helper to

00:46:47,620 --> 00:46:55,600
change that so yeah well that's all the

00:46:53,860 --> 00:46:58,090
last thing I want to mention is or

00:46:55,600 --> 00:47:00,880
documentation is not very good at the

00:46:58,090 --> 00:47:04,720
moment I want to change I want to change

00:47:00,880 --> 00:47:06,930
it and I will within the next day's

00:47:04,720 --> 00:47:09,930
update our wiki at

00:47:06,930 --> 00:47:13,830
riki dots Debian dark Java slash

00:47:09,930 --> 00:47:17,160
packaging and add more information to it

00:47:13,830 --> 00:47:19,890
so you can carefully read it again and

00:47:17,160 --> 00:47:24,500
you don't have to reboot rewatch the

00:47:19,890 --> 00:47:27,690
talk and I hope we can extend on it and

00:47:24,500 --> 00:47:30,690
well create more information to make it

00:47:27,690 --> 00:47:33,800
more yeah to make it easier for other

00:47:30,690 --> 00:47:36,510
packages to package job applications I

00:47:33,800 --> 00:47:37,630
thank you all for coming and see you

00:47:36,510 --> 00:47:43,139
around

00:47:37,630 --> 00:47:43,139

YouTube URL: https://www.youtube.com/watch?v=B-FfZQe6H3E


