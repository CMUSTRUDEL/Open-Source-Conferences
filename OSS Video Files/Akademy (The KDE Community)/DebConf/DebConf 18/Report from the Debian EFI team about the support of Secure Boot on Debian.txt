Title: Report from the Debian EFI team about the support of Secure Boot on Debian
Publication date: 2018-08-01
Playlist: DebConf 18
Description: 
	by Julien Cristau
by Tollef Fog Heen
by Ben Hutchings
by Luke W Faraone
by Ansgar Burchardt
by Helen Koike

At: DebConf18
https://debconf18.debconf.org/talks/59-report-from-the-debian-efi-team-about-the-support-of-secure-boot-on-debian/

This talk is a report on the current status of the support of Secure Boot on Debian by the EFI team and what is missing.
The team are going to explain the main architecture and workflow, the required changes in dak, how the signing service works and how this impacts packaging due to the new template binary packages required for the signing service.

Room: Yushan (玉山)
Scheduled start: 2018-07-31 14:00:00
Captions: 
	00:00:06,629 --> 00:00:13,840
okay welcome back to the next session

00:00:09,879 --> 00:00:15,939
after lunch this is Debbie NDF I dream

00:00:13,840 --> 00:00:20,100
about the status of secure boot on

00:00:15,939 --> 00:00:20,100
Debian and please introduce yourself

00:00:25,290 --> 00:00:30,300
I'm manse kavaja I'm one of the FTP

00:00:27,780 --> 00:00:34,290
masters and some parts of the archive

00:00:30,300 --> 00:00:38,070
side of the implementation hello and

00:00:34,290 --> 00:00:41,600
helen and i helped with i did part of

00:00:38,070 --> 00:00:41,600
the assignee service implementation I

00:00:42,559 --> 00:00:51,030
Steve McIntyre little bit of a co I've

00:00:47,190 --> 00:00:52,769
done bits and pieces on various various

00:00:51,030 --> 00:00:54,449
packages involved here and you know

00:00:52,769 --> 00:00:55,489
we've involved in the discussions about

00:00:54,449 --> 00:00:58,829
how to do things

00:00:55,489 --> 00:01:02,040
hello I'm taller forehead

00:00:58,829 --> 00:01:04,259
my primary hat here is probably the DSA

00:01:02,040 --> 00:01:05,930
hat but like everybody else I've been a

00:01:04,259 --> 00:01:09,330
little bit all over the place

00:01:05,930 --> 00:01:12,030
hi I'm Luke fern I'm also one day after

00:01:09,330 --> 00:01:15,600
he masters and I was all over the place

00:01:12,030 --> 00:01:18,840
but primarily on the signing service so

00:01:15,600 --> 00:01:20,970
we are here to present our report what

00:01:18,840 --> 00:01:26,100
we work on the secure boot Springs which

00:01:20,970 --> 00:01:28,530
was in April in folder Moni and we made

00:01:26,100 --> 00:01:30,030
a huge program progress actually and

00:01:28,530 --> 00:01:31,490
during the spring because we got

00:01:30,030 --> 00:01:35,819
something functional at the end

00:01:31,490 --> 00:01:38,220
previously we had several suggestions

00:01:35,819 --> 00:01:42,630
for implementation but there was

00:01:38,220 --> 00:01:45,929
disagreement but we got we agree on a

00:01:42,630 --> 00:01:50,250
solution so if you wanna check the notes

00:01:45,929 --> 00:01:53,280
for that sprint you can go to that link

00:01:50,250 --> 00:01:56,429
the salsa and also if you have comments

00:01:53,280 --> 00:02:02,250
and questions so please go to gobby so

00:01:56,429 --> 00:02:04,259
the link is there yeah so the overview

00:02:02,250 --> 00:02:06,780
we're gonna start with the context then

00:02:04,259 --> 00:02:09,479
the sign infrastructure that we came up

00:02:06,780 --> 00:02:16,080
with and the current status of the

00:02:09,479 --> 00:02:18,480
services so just as a context the boot

00:02:16,080 --> 00:02:20,760
sequence is like the femur then fumer

00:02:18,480 --> 00:02:23,489
loads the boot loader and the boot

00:02:20,760 --> 00:02:26,849
loader loads the system in our case most

00:02:23,489 --> 00:02:29,849
of the cases we have UEFI as the femur

00:02:26,849 --> 00:02:34,969
that loads group that load students

00:02:29,849 --> 00:02:34,969
colonel and modules and the user space

00:02:36,830 --> 00:02:44,070
so why are we doing secure boot what's

00:02:40,110 --> 00:02:47,100
the point so the point is to stop a

00:02:44,070 --> 00:02:49,950
remote attacker from tampering with the

00:02:47,100 --> 00:02:54,300
boot sequence on your computer there's

00:02:49,950 --> 00:02:56,640
been a long history of viruses and you

00:02:54,300 --> 00:02:59,700
know other malware tampering with boot

00:02:56,640 --> 00:03:01,680
loaders on systems and so you get to the

00:02:59,700 --> 00:03:04,920
point where you can't actually boot your

00:03:01,680 --> 00:03:07,850
system safely because before you have

00:03:04,920 --> 00:03:10,170
any chance to interfere to validate

00:03:07,850 --> 00:03:12,720
what's going on on your system the

00:03:10,170 --> 00:03:15,630
malware is already in place so this is

00:03:12,720 --> 00:03:20,280
why secure boot happened was to provide

00:03:15,630 --> 00:03:26,700
a safe path for guaranteed secure

00:03:20,280 --> 00:03:36,570
booting locally this is not so as you

00:03:26,700 --> 00:03:40,500
can see we validate each stage of the

00:03:36,570 --> 00:03:43,020
boot the firmware itself has a set of

00:03:40,500 --> 00:03:45,630
certificates it can use those

00:03:43,020 --> 00:03:48,590
certificates to validate that the next

00:03:45,630 --> 00:03:50,940
stage in the sequence the bootloader is

00:03:48,590 --> 00:03:53,370
trusted you know it doesn't doesn't

00:03:50,940 --> 00:03:56,100
necessarily have to be trusted by third

00:03:53,370 --> 00:03:58,020
parties you can also include potentially

00:03:56,100 --> 00:04:00,870
your own signatures here so you can run

00:03:58,020 --> 00:04:02,610
your own software - but for most people

00:04:00,870 --> 00:04:04,080
this is going to be stuff that is built

00:04:02,610 --> 00:04:06,450
in as a system ships

00:04:04,080 --> 00:04:09,000
ditto then the bootloader could will

00:04:06,450 --> 00:04:11,700
have a set of certificates built in as

00:04:09,000 --> 00:04:13,020
well so it can then validate the next

00:04:11,700 --> 00:04:15,660
stage where that's going to be your

00:04:13,020 --> 00:04:20,370
weighting system kernel or potentially

00:04:15,660 --> 00:04:23,430
other other tools as well so this works

00:04:20,370 --> 00:04:25,020
really well for remote attacks it

00:04:23,430 --> 00:04:27,960
doesn't work for local attacks because

00:04:25,020 --> 00:04:29,940
fundamentally if you have access to the

00:04:27,960 --> 00:04:32,850
hardware there were all kinds of things

00:04:29,940 --> 00:04:35,280
you can do this does not stop that it's

00:04:32,850 --> 00:04:38,160
not trusted boot it's not measured boot

00:04:35,280 --> 00:04:40,080
it but it gives you control so you

00:04:38,160 --> 00:04:42,510
actually have to have reasonable access

00:04:40,080 --> 00:04:44,280
to the computer something happening once

00:04:42,510 --> 00:04:46,700
you're in linux is not going to break

00:04:44,280 --> 00:04:46,700
your boot

00:04:46,729 --> 00:04:50,459
so that's the general goal we only want

00:04:49,889 --> 00:04:52,679
to boot

00:04:50,459 --> 00:04:56,579
signed binaries when secure boot is

00:04:52,679 --> 00:04:58,409
enabled and we were in Debian we want to

00:04:56,579 --> 00:04:59,759
have some infrastructure which we're

00:04:58,409 --> 00:05:03,209
going to go into more details of in a

00:04:59,759 --> 00:05:06,629
moment so we can sign specific packages

00:05:03,209 --> 00:05:09,449
only we have a whitelist not that we

00:05:06,629 --> 00:05:12,059
don't trust all the Dedes but equally we

00:05:09,449 --> 00:05:13,529
don't need to be signing all 28,000

00:05:12,059 --> 00:05:16,349
source packages in the Debian archive

00:05:13,529 --> 00:05:19,289
there's only about half a dozen and then

00:05:16,349 --> 00:05:21,059
the final point of this and this is

00:05:19,289 --> 00:05:23,399
actually possibly the real reason why

00:05:21,059 --> 00:05:31,699
we're going here is we want to make

00:05:23,399 --> 00:05:36,269
installing Debian easier for users yeah

00:05:31,699 --> 00:05:39,239
it turns out that life's not like super

00:05:36,269 --> 00:05:41,999
convenient here vendors don't actually

00:05:39,239 --> 00:05:43,529
ship with our keys installed into them

00:05:41,999 --> 00:05:49,979
at getting them to do that it's

00:05:43,529 --> 00:05:51,839
basically impossible so the current

00:05:49,979 --> 00:05:55,319
process today for installing Debian

00:05:51,839 --> 00:05:59,249
consists of either disabling secure boot

00:05:55,319 --> 00:06:01,679
which is not that great or we need to

00:05:59,249 --> 00:06:06,809
get people to enroll our certificates

00:06:01,679 --> 00:06:08,969
which is I mean it involves talking to

00:06:06,809 --> 00:06:11,759
firmer and firmer generally isn't very

00:06:08,969 --> 00:06:15,559
user friendly so none of these is it's

00:06:11,759 --> 00:06:19,079
like super super awesome for newcomers

00:06:15,559 --> 00:06:21,179
and of course it's not really built for

00:06:19,079 --> 00:06:23,699
remote deployments and automated

00:06:21,179 --> 00:06:27,569
deployments because interacting with

00:06:23,699 --> 00:06:31,289
firmware from like interactively is bad

00:06:27,569 --> 00:06:37,139
doing it from from software is even

00:06:31,289 --> 00:06:38,819
worse but we actually have a friend here

00:06:37,139 --> 00:06:43,379
and I have their Microsoft because

00:06:38,819 --> 00:06:45,749
everybody ships ships Microsoft CA in

00:06:43,379 --> 00:06:47,969
their firmware because LT contains all

00:06:45,749 --> 00:06:51,679
windows and people generally for some

00:06:47,969 --> 00:06:53,999
reason want to install the windows so

00:06:51,679 --> 00:06:56,969
users are allowed to install their own

00:06:53,999 --> 00:06:59,480
certificate but also Microsoft provides

00:06:56,969 --> 00:07:04,290
a CA which will

00:06:59,480 --> 00:07:07,320
sign a ufi binary which we provide and

00:07:04,290 --> 00:07:10,650
and so this should be zero right we can

00:07:07,320 --> 00:07:13,260
just get them to sign crap except it

00:07:10,650 --> 00:07:16,320
turns out that ms does not actually want

00:07:13,260 --> 00:07:19,440
to sign GPL version three code grab is

00:07:16,320 --> 00:07:23,160
kind of large it changes bug fixes new

00:07:19,440 --> 00:07:24,720
features all kind of stuff so and this

00:07:23,160 --> 00:07:27,030
is a manual process it's not something

00:07:24,720 --> 00:07:29,190
where we can just have a bill to do it

00:07:27,030 --> 00:07:33,000
it actually requires you to poke a

00:07:29,190 --> 00:07:35,940
website and pack stuff up in cabs and

00:07:33,000 --> 00:07:39,000
upload them and it's less bad than it

00:07:35,940 --> 00:07:41,250
used to be but it's still not great so

00:07:39,000 --> 00:07:45,080
Matthew Garrett created a few years ago

00:07:41,250 --> 00:07:47,840
a program for this which is the Shem

00:07:45,080 --> 00:07:50,790
which is a really simple bootloader it

00:07:47,840 --> 00:07:54,780
allows you to enroll your own keys but

00:07:50,790 --> 00:07:58,050
also it contains in our case the

00:07:54,780 --> 00:07:59,760
certificate of Debian's root CA which is

00:07:58,050 --> 00:08:03,750
only used for secure boot it's not the

00:07:59,760 --> 00:08:06,540
generals ya in any way it's it's small

00:08:03,750 --> 00:08:08,670
it's all pol it doesn't come out with

00:08:06,540 --> 00:08:09,930
new version all all the time so even

00:08:08,670 --> 00:08:12,030
though we still need to do the manual

00:08:09,930 --> 00:08:13,920
process of getting this through

00:08:12,030 --> 00:08:17,610
Microsoft whenever we want to release a

00:08:13,920 --> 00:08:21,300
new version it's less of a problem so

00:08:17,610 --> 00:08:25,560
what we have here is we get the Shem get

00:08:21,300 --> 00:08:27,360
signed by Microsoft and grub and other

00:08:25,560 --> 00:08:32,550
boot loaders they will be signed by us

00:08:27,360 --> 00:08:36,570
and a key we control so what we get here

00:08:32,550 --> 00:08:40,080
is we have ufi checks the signature of

00:08:36,570 --> 00:08:42,360
sham sham is signed by Microsoft sham

00:08:40,080 --> 00:08:44,580
verifies this intro of grub grab be

00:08:42,360 --> 00:08:46,170
signed by us crab verifies the same

00:08:44,580 --> 00:08:49,320
trouble with the comb the currently

00:08:46,170 --> 00:08:52,370
signed by us and the modules are signed

00:08:49,320 --> 00:08:54,960
by us and the column checks the center

00:08:52,370 --> 00:08:59,670
it would be the same for for any other

00:08:54,960 --> 00:09:01,860
builder or other non bootloader age

00:08:59,670 --> 00:09:05,970
things like firmware updates and so on

00:09:01,860 --> 00:09:09,570
so this allows us to not disable secure

00:09:05,970 --> 00:09:12,810
boot and not be like too scared to users

00:09:09,570 --> 00:09:14,520
and we're reasonably sure that no

00:09:12,810 --> 00:09:19,920
actually tampered with with the bit

00:09:14,520 --> 00:09:22,260
sequence so it comes to the actual

00:09:19,920 --> 00:09:23,910
signing infrastructure it's very like

00:09:22,260 --> 00:09:26,490
straightforward the do to implement all

00:09:23,910 --> 00:09:27,480
of this if you have complete trust in

00:09:26,490 --> 00:09:29,820
all of your own infrastructure and you

00:09:27,480 --> 00:09:31,920
can just make sweeping changes but in

00:09:29,820 --> 00:09:33,210
Debian we have build these all in the

00:09:31,920 --> 00:09:35,130
world and in different sort of security

00:09:33,210 --> 00:09:36,740
context so we needed to have a little

00:09:35,130 --> 00:09:41,580
bit of a different approach

00:09:36,740 --> 00:09:45,650
so broadly the way it works as we've

00:09:41,580 --> 00:09:48,060
implemented it is a kernel maintainer or

00:09:45,650 --> 00:09:51,150
grub maintainer or primer update

00:09:48,060 --> 00:09:53,970
maintainer will basically build their

00:09:51,150 --> 00:09:57,029
source package for a Linux image or like

00:09:53,970 --> 00:09:59,940
Linux generic and then that will be

00:09:57,029 --> 00:10:03,029
uploaded as usual and one of the binary

00:09:59,940 --> 00:10:07,920
outputs will be a so we call a signed

00:10:03,029 --> 00:10:10,080
template that template is then pulled

00:10:07,920 --> 00:10:14,240
down by the signing service the template

00:10:10,080 --> 00:10:17,910
contains some metadata that indicates

00:10:14,240 --> 00:10:20,940
what exactly is is to be signed it signs

00:10:17,910 --> 00:10:23,240
it then sends it over that the source

00:10:20,940 --> 00:10:26,190
package containing the d-type signatures

00:10:23,240 --> 00:10:28,770
and pack in the bill D and the end

00:10:26,190 --> 00:10:32,160
result is we get a linux assignment

00:10:28,770 --> 00:10:37,880
generic that is a bit calm kids so to go

00:10:32,160 --> 00:10:41,820
a little bit more in detail the the

00:10:37,880 --> 00:10:43,560
signed source package basically just

00:10:41,820 --> 00:10:45,030
contains detest signatures and the goal

00:10:43,560 --> 00:10:46,650
here was to have an architecture where

00:10:45,030 --> 00:10:51,540
our signing service doesn't run any

00:10:46,650 --> 00:10:54,930
actual code so it will have a build

00:10:51,540 --> 00:10:57,450
dependency on the already built binary

00:10:54,930 --> 00:10:58,980
kernel package and when it hits the

00:10:57,450 --> 00:11:01,380
build D it'll just do that combination

00:10:58,980 --> 00:11:03,690
and then publish it again and this

00:11:01,380 --> 00:11:08,300
preserves the property of reproducible

00:11:03,690 --> 00:11:12,450
builds in our in our infrastructure and

00:11:08,300 --> 00:11:14,220
so the way the communication ends up

00:11:12,450 --> 00:11:18,089
working between the dock and the signing

00:11:14,220 --> 00:11:21,900
service when that gets a upload from a

00:11:18,089 --> 00:11:25,790
building of you know linux signed image

00:11:21,900 --> 00:11:27,770
template that will then go into a queue

00:11:25,790 --> 00:11:29,930
is then read by signing service which

00:11:27,770 --> 00:11:32,570
currently is co-located but in the

00:11:29,930 --> 00:11:34,550
future we intend to separate it out it

00:11:32,570 --> 00:11:36,980
processes it then D puts it back and

00:11:34,550 --> 00:11:38,870
goes through new and amusingly the

00:11:36,980 --> 00:11:40,940
signing service is the only as is the

00:11:38,870 --> 00:11:43,370
only key in the Debian archive that has

00:11:40,940 --> 00:11:46,670
the ability to upload packages that are

00:11:43,370 --> 00:11:48,830
source new and bypass the new queue so

00:11:46,670 --> 00:11:51,920
we have both a machine generated source

00:11:48,830 --> 00:11:54,560
package that doesn't get backside review

00:11:51,920 --> 00:11:56,780
but it's fine because all the codes

00:11:54,560 --> 00:11:59,030
under our usual Devi name structure okay

00:11:56,780 --> 00:12:01,520
next

00:11:59,030 --> 00:12:03,770
and so this template package structure

00:12:01,520 --> 00:12:05,120
the reason we went for this template

00:12:03,770 --> 00:12:08,240
package was to allow the kernel

00:12:05,120 --> 00:12:09,830
maintainer x' or other maintainer suite

00:12:08,240 --> 00:12:13,160
packages are being signed to get control

00:12:09,830 --> 00:12:14,960
over what the result of this of the

00:12:13,160 --> 00:12:17,720
signing operation looks like so they

00:12:14,960 --> 00:12:19,790
include a in their binary package they

00:12:17,720 --> 00:12:23,060
include a template for this source

00:12:19,790 --> 00:12:26,410
package and that contains some specific

00:12:23,060 --> 00:12:29,390
metadata that was two files a sign and

00:12:26,410 --> 00:12:31,160
again the signing service only runs

00:12:29,390 --> 00:12:33,200
commands that do not actually end up

00:12:31,160 --> 00:12:34,910
executing any code in the package so we

00:12:33,200 --> 00:12:37,280
don't worry about there being something

00:12:34,910 --> 00:12:38,810
malicious that we would then sign and

00:12:37,280 --> 00:12:40,960
could possibly compromise our signing

00:12:38,810 --> 00:12:40,960
key

00:12:46,040 --> 00:12:53,730
yeah so the the same service current

00:12:50,550 --> 00:12:56,280
status so the code is available at salsa

00:12:53,730 --> 00:12:58,410
we basically called it and during the

00:12:56,280 --> 00:13:00,720
reboot sprint the current state is

00:12:58,410 --> 00:13:05,280
functional and its deployed and the

00:13:00,720 --> 00:13:08,490
experimental suit currently it works it

00:13:05,280 --> 00:13:11,280
signs the package with Adams debianchi

00:13:08,490 --> 00:13:14,280
is not the official key yet and the

00:13:11,280 --> 00:13:17,160
process in is manual for now and we also

00:13:14,280 --> 00:13:19,860
have an audit log that we log everything

00:13:17,160 --> 00:13:25,280
that we signed in a post query SQL

00:13:19,860 --> 00:13:29,760
database with public database dumps and

00:13:25,280 --> 00:13:31,740
so we have some work to do there so we

00:13:29,760 --> 00:13:39,030
need to improve some tests we couldn't

00:13:31,740 --> 00:13:42,420
have a basic test with that signs the me

00:13:39,030 --> 00:13:44,190
package that we put there and also we

00:13:42,420 --> 00:13:46,020
need to think about a signature

00:13:44,190 --> 00:13:49,080
revocation process that we don't have

00:13:46,020 --> 00:13:51,780
and we need to start deploying in other

00:13:49,080 --> 00:13:55,640
suits like stable testing and unstable

00:13:51,780 --> 00:13:58,830
and it would be really nice to have

00:13:55,640 --> 00:14:02,250
browser for the audit log so everyone

00:13:58,830 --> 00:14:04,940
can check which were the packages that

00:14:02,250 --> 00:14:04,940
got signed it

00:14:08,529 --> 00:14:15,019
so on the backside I'm going to craft

00:14:12,769 --> 00:14:17,329
this but that publishes that that list

00:14:15,019 --> 00:14:21,259
of packages and it will accept those

00:14:17,329 --> 00:14:24,800
sourcing Lee uploads and the the key

00:14:21,259 --> 00:14:26,389
point here is this this we actually have

00:14:24,800 --> 00:14:28,339
multiple Dax running in Debian we have

00:14:26,389 --> 00:14:32,059
one for a separate one for security

00:14:28,339 --> 00:14:36,680
master so yeah on that handles market

00:14:32,059 --> 00:14:38,629
uploads and basically the structure of

00:14:36,680 --> 00:14:40,220
the signing service is that it will

00:14:38,629 --> 00:14:42,670
essentially break if the version number

00:14:40,220 --> 00:14:45,319
is be used between security master and

00:14:42,670 --> 00:14:51,350
after he master so don't do that if you

00:14:45,319 --> 00:14:54,290
work on a blogger packages so we've

00:14:51,350 --> 00:14:56,860
identified a smallish list of the

00:14:54,290 --> 00:14:59,240
packages that we think should be signed

00:14:56,860 --> 00:15:02,420
obviously as the very first thing in the

00:14:59,240 --> 00:15:05,300
queue those shim we have the firmware

00:15:02,420 --> 00:15:09,019
update firmware update pairing of

00:15:05,300 --> 00:15:11,230
packages we have grub 2 which is our

00:15:09,019 --> 00:15:14,509
standard bootloader we have the kernel

00:15:11,230 --> 00:15:15,559
we might sign system D boot as well that

00:15:14,509 --> 00:15:18,589
was something that we've just been

00:15:15,559 --> 00:15:20,449
discussing literally this morning it

00:15:18,589 --> 00:15:22,309
depends on whether or not we consider

00:15:20,449 --> 00:15:23,990
that useful and whether or not we think

00:15:22,309 --> 00:15:29,300
it's safe it's a discussion yet to be

00:15:23,990 --> 00:15:31,879
had so quick status update on each of

00:15:29,300 --> 00:15:33,589
those packages we have shim signed by

00:15:31,879 --> 00:15:35,149
Microsoft key already with our root

00:15:33,589 --> 00:15:37,579
certificate that actually happened quite

00:15:35,149 --> 00:15:39,410
some time ago it's currently not

00:15:37,579 --> 00:15:41,600
reproducible due to the way it's built

00:15:39,410 --> 00:15:45,559
but we have patches already to improve

00:15:41,600 --> 00:15:47,240
that obviously this is a key area where

00:15:45,559 --> 00:15:49,220
we want people to be able to reproduce

00:15:47,240 --> 00:15:51,559
what we have because we desperately want

00:15:49,220 --> 00:15:54,379
people to trust what we've done you know

00:15:51,559 --> 00:15:57,470
if you don't trust this this set of

00:15:54,379 --> 00:15:59,959
paths you know you may as well not

00:15:57,470 --> 00:16:02,509
bother at all we're currently on an old

00:15:59,959 --> 00:16:04,490
version of shim things have moved on in

00:16:02,509 --> 00:16:06,459
the last couple of years so we'll have

00:16:04,490 --> 00:16:08,540
to get a new version built and signed

00:16:06,459 --> 00:16:09,889
obviously as we were saying earlier we

00:16:08,540 --> 00:16:11,990
don't want to be doing this like every

00:16:09,889 --> 00:16:14,170
week so we know we'll have to work on

00:16:11,990 --> 00:16:14,170
that

00:16:15,190 --> 00:16:20,540
firmware update firmware update are

00:16:17,870 --> 00:16:23,120
there packages that enable secure

00:16:20,540 --> 00:16:25,660
firmware updates during reboot the way

00:16:23,120 --> 00:16:28,880
they do that is they drop an EFI binary

00:16:25,660 --> 00:16:31,279
into your ear fie system partition and

00:16:28,880 --> 00:16:34,009
the firmware should go looking for those

00:16:31,279 --> 00:16:36,889
as it starts so this is how for example

00:16:34,009 --> 00:16:40,370
you can have a secure update of your

00:16:36,889 --> 00:16:43,160
BIOS no knowing well that it's signed by

00:16:40,370 --> 00:16:45,259
by your system vendor by Microsoft

00:16:43,160 --> 00:16:46,670
whoever and it's not just for the BIOS

00:16:45,259 --> 00:16:49,850
it could be for other devices on your

00:16:46,670 --> 00:16:52,339
system as well that we've had these

00:16:49,850 --> 00:16:53,690
these packages in Debian for a while but

00:16:52,339 --> 00:16:55,490
what we've done now is we've added

00:16:53,690 --> 00:16:57,610
support for building the sign template

00:16:55,490 --> 00:17:00,259
packages we've already described the

00:16:57,610 --> 00:17:02,810
normal binary packages will recommend

00:17:00,259 --> 00:17:04,640
the signed versions so you should get

00:17:02,810 --> 00:17:07,010
those by default we're not going to make

00:17:04,640 --> 00:17:09,860
it a hard dependency it's up to you if

00:17:07,010 --> 00:17:11,720
you don't want them and we will install

00:17:09,860 --> 00:17:14,270
the signed versions of each of these

00:17:11,720 --> 00:17:16,159
binaries in the system partition in

00:17:14,270 --> 00:17:17,959
preference and obviously if you

00:17:16,159 --> 00:17:20,780
installed it you probably want to use it

00:17:17,959 --> 00:17:25,909
the most recent uploads to unstable last

00:17:20,780 --> 00:17:27,260
week have all the needed changes this is

00:17:25,909 --> 00:17:30,590
going to look quite similar to the last

00:17:27,260 --> 00:17:33,020
one grub to if now we have made the

00:17:30,590 --> 00:17:35,659
decision specifically this is unlike

00:17:33,020 --> 00:17:37,880
where a bun to went but we had a long

00:17:35,659 --> 00:17:40,850
discussion about this if you're booting

00:17:37,880 --> 00:17:43,100
with secure boot disabled so enabled we

00:17:40,850 --> 00:17:47,270
will only boot assigned kernel we will

00:17:43,100 --> 00:17:49,850
not fall back to an unsigned kernel and

00:17:47,270 --> 00:17:52,429
call exit boot services that is a

00:17:49,850 --> 00:17:56,870
deliberate security decision we don't

00:17:52,429 --> 00:17:59,419
want to change that the changes to the

00:17:56,870 --> 00:18:01,880
grub packages we now build a monolithic

00:17:59,419 --> 00:18:03,409
grub image so that all that means is it

00:18:01,880 --> 00:18:05,570
has all the modules built in in one

00:18:03,409 --> 00:18:06,980
piece it's much easier and much safer

00:18:05,570 --> 00:18:09,530
that way if you're gonna have a signed

00:18:06,980 --> 00:18:11,299
output otherwise we then have to worry

00:18:09,530 --> 00:18:13,850
about signing all of the grub modules

00:18:11,299 --> 00:18:16,850
individually and that's such a message

00:18:13,850 --> 00:18:19,370
on true so again we've added support

00:18:16,850 --> 00:18:21,710
here we just the same way as the

00:18:19,370 --> 00:18:24,530
firmware packages the most recent low to

00:18:21,710 --> 00:18:27,460
unstable literally last night contains

00:18:24,530 --> 00:18:27,460
all the needed changes

00:18:29,570 --> 00:18:35,150
Ben's done a huge amount in the kernel

00:18:32,570 --> 00:18:37,190
so again he's added all of the extra

00:18:35,150 --> 00:18:39,710
support that we need at the moment the

00:18:37,190 --> 00:18:41,360
kernel is only enabled the kernel

00:18:39,710 --> 00:18:44,660
signing stuff is only enabled for

00:18:41,360 --> 00:18:46,309
experimental uploads I'm expecting that

00:18:44,660 --> 00:18:48,470
at some point in the next few days

00:18:46,309 --> 00:18:51,020
hopefully Ben will give us something

00:18:48,470 --> 00:18:52,580
that will go towards unstable we have

00:18:51,020 --> 00:18:56,210
signed everything through experimental

00:18:52,580 --> 00:19:00,770
this is one of our tests coming real

00:18:56,210 --> 00:19:05,059
soon once we have all of those packages

00:19:00,770 --> 00:19:06,920
sorted and again will soon will then

00:19:05,059 --> 00:19:09,500
need to play with a few other bits and

00:19:06,920 --> 00:19:10,760
pieces then use this output it will be

00:19:09,500 --> 00:19:12,620
really nice if we gone to all this

00:19:10,760 --> 00:19:14,960
effort if our installation media also

00:19:12,620 --> 00:19:18,679
talked about us our sind bootloader

00:19:14,960 --> 00:19:20,390
ditto the live images or cloud images we

00:19:18,679 --> 00:19:22,490
might need to tweak to bootstrap to pull

00:19:20,390 --> 00:19:24,320
these in by default because no obvious

00:19:22,490 --> 00:19:26,530
reasons that that's something to look at

00:19:24,320 --> 00:19:26,530
next

00:19:28,280 --> 00:19:35,730
well we did this presentation this talk

00:19:31,350 --> 00:19:38,460
to tell you what was decided but we'd

00:19:35,730 --> 00:19:41,670
like to mix this talk a bit with both

00:19:38,460 --> 00:19:48,530
format so if you want to discuss

00:19:41,670 --> 00:19:48,530
something yeah make questions go ahead

00:19:49,100 --> 00:19:53,309
if there's anything that's unclear

00:19:51,150 --> 00:19:55,410
please shout we want this to be

00:19:53,309 --> 00:19:59,330
understandable and believable for

00:19:55,410 --> 00:19:59,330
everybody so talk to us

00:20:06,070 --> 00:20:10,390
is it

00:20:07,790 --> 00:20:10,390
yes

00:20:20,860 --> 00:20:28,130
hey thank you very much for working on

00:20:23,600 --> 00:20:30,560
this I have a few questions actually

00:20:28,130 --> 00:20:32,450
first of all how large is the monolithic

00:20:30,560 --> 00:20:37,630
group image that you mentioned do you

00:20:32,450 --> 00:20:41,870
know I can check ok the easiest it's

00:20:37,630 --> 00:20:43,550
instead of the tiny just core image it's

00:20:41,870 --> 00:20:45,920
going to include all of the modules that

00:20:43,550 --> 00:20:48,740
are needed so it's going to be maybe 10

00:20:45,920 --> 00:20:52,970
mega so I think it's not huge but it's

00:20:48,740 --> 00:20:57,440
big that gets saved to this slash boot

00:20:52,970 --> 00:21:00,050
/ef I think exactly yes ok the standard

00:20:57,440 --> 00:21:01,940
boot efi minimum size that D oil

00:21:00,050 --> 00:21:04,280
whatever we'll give you is 500 megabytes

00:21:01,940 --> 00:21:06,290
because I saw this coming and you know

00:21:04,280 --> 00:21:07,400
it's also recommended by the efi people

00:21:06,290 --> 00:21:10,820
ok good

00:21:07,400 --> 00:21:13,280
just like making sure there's no risk of

00:21:10,820 --> 00:21:16,130
running out of space in stock so the

00:21:13,280 --> 00:21:18,080
nice thing about doing a UEFI with grub

00:21:16,130 --> 00:21:19,730
is you don't have to try and embed grub

00:21:18,080 --> 00:21:21,740
in a tiny space at the beginning of your

00:21:19,730 --> 00:21:25,730
disk there is proper filesystem space

00:21:21,740 --> 00:21:27,500
for it so it should be fine ok I noticed

00:21:25,730 --> 00:21:31,460
that the Linux kernel is checking for

00:21:27,500 --> 00:21:33,590
signatures on modules before it loads

00:21:31,460 --> 00:21:36,380
them is that necessary per the secure

00:21:33,590 --> 00:21:38,870
boot spec or just something we wanted to

00:21:36,380 --> 00:21:41,140
implement umm let's let banners answer

00:21:38,870 --> 00:21:41,140
that one

00:21:43,260 --> 00:21:50,710
it's sort of unclear whether it's

00:21:46,260 --> 00:21:53,730
required the the in the my understanding

00:21:50,710 --> 00:21:58,180
is that the generic UEFI specification

00:21:53,730 --> 00:22:03,730
does not require anything like that but

00:21:58,180 --> 00:22:09,010
the Microsoft's requirements for signing

00:22:03,730 --> 00:22:11,020
say that you shouldn't know seem to

00:22:09,010 --> 00:22:19,870
imply that you shouldn't load unsigned

00:22:11,020 --> 00:22:21,550
code into the into kernel space and not

00:22:19,870 --> 00:22:23,770
every just distribution is taking the

00:22:21,550 --> 00:22:25,480
same interpretation but I think we're

00:22:23,770 --> 00:22:27,910
going to play safe here there's always

00:22:25,480 --> 00:22:30,090
the option if you want to load unsigned

00:22:27,910 --> 00:22:37,830
modules there is always the option by

00:22:30,090 --> 00:22:37,830
local intervention to turn that off okay

00:22:39,789 --> 00:22:45,190
final question of the signing service

00:22:42,250 --> 00:22:47,380
does it actually rebuild the kernel from

00:22:45,190 --> 00:22:49,390
source no so let's sue the sunning

00:22:47,380 --> 00:22:54,840
service basically the operations of

00:22:49,390 --> 00:22:56,710
problems is fetch the signed template

00:22:54,840 --> 00:22:58,779
magic fetch fetch the template that

00:22:56,710 --> 00:23:01,029
contains the metadata about what exactly

00:22:58,779 --> 00:23:05,260
we're going to sign then fetch the

00:23:01,029 --> 00:23:07,240
already built kernel extract it and then

00:23:05,260 --> 00:23:09,669
for each file that the template says to

00:23:07,240 --> 00:23:11,740
sign signs them at the detached

00:23:09,669 --> 00:23:14,799
signature puts those signatures in the

00:23:11,740 --> 00:23:17,770
template the template build depends on

00:23:14,799 --> 00:23:22,390
that already built binary kernel that it

00:23:17,770 --> 00:23:27,340
just signed and then we call direction

00:23:22,390 --> 00:23:28,929
changes sign and debug so the important

00:23:27,340 --> 00:23:32,440
thing is we're actually not running any

00:23:28,929 --> 00:23:34,299
code specified by the package itself

00:23:32,440 --> 00:23:36,010
we're interpreting Charlie just doing

00:23:34,299 --> 00:23:39,279
using silac standard double utilities

00:23:36,010 --> 00:23:39,850
and like the signing binaries the

00:23:39,279 --> 00:23:44,860
signing tools

00:23:39,850 --> 00:23:51,520
okay very good thanks again does this

00:23:44,860 --> 00:23:54,299
interact with any drum discs no we don't

00:23:51,520 --> 00:23:57,730
have any signing of we don't have any

00:23:54,299 --> 00:23:59,559
verification of the init Ram FS scripts

00:23:57,730 --> 00:24:02,470
but obviously the modules in there do

00:23:59,559 --> 00:24:04,799
have to be signed modules in the modules

00:24:02,470 --> 00:24:07,740
in the naram FS will have to be signed

00:24:04,799 --> 00:24:09,640
on that this has been a case where like

00:24:07,740 --> 00:24:11,049
there are some requirements that are

00:24:09,640 --> 00:24:12,039
made very explicit and then there's some

00:24:11,049 --> 00:24:13,600
things when you like those C

00:24:12,039 --> 00:24:15,760
communications from Microsoft or

00:24:13,600 --> 00:24:17,409
elsewhere it's sort of like you should

00:24:15,760 --> 00:24:19,590
consider maybe doing this thing or that

00:24:17,409 --> 00:24:26,020
thing and so we're trying to sort of

00:24:19,590 --> 00:24:28,090
thread that in that needle basically so

00:24:26,020 --> 00:24:31,419
you pointed out the secure boot doesn't

00:24:28,090 --> 00:24:32,799
help against a physical attacker and you

00:24:31,419 --> 00:24:35,020
know one thing that it's commented you

00:24:32,799 --> 00:24:37,360
to prevent that kind of attack is put

00:24:35,020 --> 00:24:39,309
your boot partition on a USB stick like

00:24:37,360 --> 00:24:41,140
this which protects against certain

00:24:39,309 --> 00:24:43,510
kinds of physical attack can you do that

00:24:41,140 --> 00:24:47,320
with efi insecure bit so you can suck

00:24:43,510 --> 00:24:48,909
your boot off this yes okay and then

00:24:47,320 --> 00:24:57,010
could I see the list of things that have

00:24:48,909 --> 00:25:00,730
to be signed again please so why would

00:24:57,010 --> 00:25:03,100
system Deepu have to be signed it's a

00:25:00,730 --> 00:25:08,110
it's a bit letter it's the new name for

00:25:03,100 --> 00:25:09,460
a gummy boot okay thank you hi I don't

00:25:08,110 --> 00:25:10,659
actually have a question I just wanted

00:25:09,460 --> 00:25:12,700
to thank all of you for the work that

00:25:10,659 --> 00:25:14,950
you've done on this and to applaud both

00:25:12,700 --> 00:25:17,980
decisions the one that you will only

00:25:14,950 --> 00:25:20,049
boot a overloading the assigned Colonel

00:25:17,980 --> 00:25:23,340
if secure boot is enabled and the

00:25:20,049 --> 00:25:25,899
decision to only learn signed modules

00:25:23,340 --> 00:25:27,399
given all of the choices out there I

00:25:25,899 --> 00:25:29,200
think both of those are the right

00:25:27,399 --> 00:25:37,750
decisions for debian thanks for making

00:25:29,200 --> 00:25:40,870
in that way okay as I understand this

00:25:37,750 --> 00:25:44,289
she manned and then would sign Inc is

00:25:40,870 --> 00:25:45,850
required for for dealing with microsoft

00:25:44,289 --> 00:25:47,860
certificates which is embedded in

00:25:45,850 --> 00:25:49,840
hardware but what about this hardware

00:25:47,860 --> 00:25:54,480
provided by an inexpensive vendors like

00:25:49,840 --> 00:25:58,090
tourism or system76 or something reduced

00:25:54,480 --> 00:26:00,280
my understanding there is that that

00:25:58,090 --> 00:26:04,990
standard doesn't really allow you to

00:26:00,280 --> 00:26:08,440
embed multiple signatures so or it kind

00:26:04,990 --> 00:26:10,289
of lies but it often doesn't work but so

00:26:08,440 --> 00:26:13,419
it's a bad idea

00:26:10,289 --> 00:26:16,720
so in fact older versions of the UEFI

00:26:13,419 --> 00:26:19,510
spec only allow for one signature at

00:26:16,720 --> 00:26:21,789
this point newer versions do allow for

00:26:19,510 --> 00:26:24,130
multiple sakes but I'm not aware of

00:26:21,789 --> 00:26:26,169
anybody actually doing it yet

00:26:24,130 --> 00:26:28,059
the last thing of course we'd want to do

00:26:26,169 --> 00:26:31,360
is go and sign our shim with multiple

00:26:28,059 --> 00:26:32,880
keys and then break on older hardware so

00:26:31,360 --> 00:26:36,899
it's

00:26:32,880 --> 00:26:39,120
because we could ship multiple versions

00:26:36,899 --> 00:26:42,000
of Shem if that becomes necessary of

00:26:39,120 --> 00:26:43,830
course we'll do it please tell us if you

00:26:42,000 --> 00:26:46,110
know if you know of any machines that

00:26:43,830 --> 00:26:47,880
would use it we would be happy to talk

00:26:46,110 --> 00:26:49,769
to any vendors that were interested in

00:26:47,880 --> 00:26:52,590
integrating Debian gears into their

00:26:49,769 --> 00:26:54,059
systems and we haven't had any reach

00:26:52,590 --> 00:26:56,490
outs yet but one happy to work with them

00:26:54,059 --> 00:26:59,309
and of course if you can get Shem to

00:26:56,490 --> 00:27:02,340
load part of it includes mock which

00:26:59,309 --> 00:27:06,330
which includes support for users own

00:27:02,340 --> 00:27:08,129
keys so you can then add all kinds of

00:27:06,330 --> 00:27:11,220
extra stuff if you want on your own

00:27:08,129 --> 00:27:13,799
machine you are not stuck just using the

00:27:11,220 --> 00:27:15,870
one secured boot path that we're going

00:27:13,799 --> 00:27:17,580
to ship by default obviously we don't

00:27:15,870 --> 00:27:19,019
want to lock down people's own hardware

00:27:17,580 --> 00:27:22,100
so they can't you do what they want with

00:27:19,019 --> 00:27:22,100
it that's not what we're doing

00:27:24,420 --> 00:27:30,570
so I'll I'll couch this very carefully

00:27:28,620 --> 00:27:32,550
because there will be other teams who

00:27:30,570 --> 00:27:34,710
will have their own views and policies

00:27:32,550 --> 00:27:36,810
and so on and and I have a vested

00:27:34,710 --> 00:27:39,000
interest here as well clearly in an

00:27:36,810 --> 00:27:43,020
ideal world and from your perspectives

00:27:39,000 --> 00:27:46,590
is this is your work feasibly back

00:27:43,020 --> 00:27:48,090
portable towards stretch or is it just

00:27:46,590 --> 00:27:51,030
too different to actually be useful

00:27:48,090 --> 00:27:53,700
there anyway so my opinion for all the

00:27:51,030 --> 00:27:56,750
people might disagree is hell yes I

00:27:53,700 --> 00:27:59,310
would love if at all possible to have

00:27:56,750 --> 00:28:02,910
these changes in for a neck stretch

00:27:59,310 --> 00:28:04,650
point release for example we'll have to

00:28:02,910 --> 00:28:06,690
evaluate exactly how much work is

00:28:04,650 --> 00:28:09,060
involved but it shouldn't be impossible

00:28:06,690 --> 00:28:11,790
yeah from my perspective I think that

00:28:09,060 --> 00:28:13,290
that time line could be visible but it's

00:28:11,790 --> 00:28:14,850
up to you that there are other terms so

00:28:13,290 --> 00:28:16,530
the infrastructure is in place already

00:28:14,850 --> 00:28:18,450
and it's just a case of adding an extra

00:28:16,530 --> 00:28:20,580
suite with it'll need the package

00:28:18,450 --> 00:28:22,860
changes and obviously getting off nice

00:28:20,580 --> 00:28:27,030
friendly SRMs to agree to those we'll

00:28:22,860 --> 00:28:29,880
have that discussion offline just a

00:28:27,030 --> 00:28:32,370
question does any of the signatures have

00:28:29,880 --> 00:28:35,730
an expiration date in it or what about

00:28:32,370 --> 00:28:38,010
if a signature is revoked and somebody

00:28:35,730 --> 00:28:43,170
is running a very old version on a very

00:28:38,010 --> 00:28:45,840
old computer all that knows about this I

00:28:43,170 --> 00:28:47,520
think he's looking yeah I'm trying to

00:28:45,840 --> 00:28:50,910
figure out if we set an expiration date

00:28:47,520 --> 00:28:55,430
I don't believe we do I think we did but

00:28:50,910 --> 00:28:55,430
it was like 13 years or something yeah

00:29:00,730 --> 00:29:05,539
my understanding is that expiration

00:29:03,320 --> 00:29:08,269
dates want to be set but aren't actually

00:29:05,539 --> 00:29:10,009
checks for code signing certainly the

00:29:08,269 --> 00:29:15,799
kernel doesn't check the expiration

00:29:10,009 --> 00:29:18,559
dates on module on the certificates for

00:29:15,799 --> 00:29:21,080
module signing yeah we understand

00:29:18,559 --> 00:29:22,730
replication is a problem it's even like

00:29:21,080 --> 00:29:25,669
Microsoft struggles with it I believe at

00:29:22,730 --> 00:29:27,649
one point they ship an update that used

00:29:25,669 --> 00:29:29,090
more space than there were in there were

00:29:27,649 --> 00:29:31,549
than there was EFI variable space

00:29:29,090 --> 00:29:32,720
available so like as your blacklist

00:29:31,549 --> 00:29:35,690
grows like you're gonna run into this

00:29:32,720 --> 00:29:36,679
sort of problem that doesn't haven't

00:29:35,690 --> 00:29:37,730
really gotten to that point because we

00:29:36,679 --> 00:29:41,529
haven't really figured out under what

00:29:37,730 --> 00:29:43,580
circumstances we need to blacklist and

00:29:41,529 --> 00:29:45,739
that's actually there is an ongoing

00:29:43,580 --> 00:29:48,730
discussion between some of the distros

00:29:45,739 --> 00:29:52,700
over exactly how to manage reification

00:29:48,730 --> 00:29:54,529
the various efi vendors and debian is

00:29:52,700 --> 00:29:56,600
one of those obviously have a vested

00:29:54,529 --> 00:29:58,249
interest in that working well and we

00:29:56,600 --> 00:30:01,639
want to have a consistent story across

00:29:58,249 --> 00:30:05,989
the different distro so it's happening

00:30:01,639 --> 00:30:12,379
more Newser as it comes out don't touch

00:30:05,989 --> 00:30:14,600
that dial what happens if a user has a

00:30:12,379 --> 00:30:16,820
DKMS module which needs to go into the

00:30:14,600 --> 00:30:20,210
unit Rd they DeSales think about it

00:30:16,820 --> 00:30:21,379
works automated no no user data disables

00:30:20,210 --> 00:30:25,549
together to save the secure boot for

00:30:21,379 --> 00:30:29,330
that okay in principle they could

00:30:25,549 --> 00:30:32,480
arrange to build its building sites on

00:30:29,330 --> 00:30:34,669
some trusted machine with a signing key

00:30:32,480 --> 00:30:37,700
and enroll the signing key these

00:30:34,669 --> 00:30:43,609
difficut for that signing key in the

00:30:37,700 --> 00:30:46,659
machine where it's going to be used DES

00:30:43,609 --> 00:30:49,669
suddenly has support for building

00:30:46,659 --> 00:30:52,009
packaged modules and shipping them to

00:30:49,669 --> 00:30:54,639
another machine but I don't know that it

00:30:52,009 --> 00:30:56,869
has any integration that with signing

00:30:54,639 --> 00:30:59,809
that's not something in it I think any

00:30:56,869 --> 00:31:01,850
of us have looked at it in theory you

00:30:59,809 --> 00:31:06,440
could run your own signing service and

00:31:01,850 --> 00:31:09,139
and get nvidia or whatever cal module to

00:31:06,440 --> 00:31:11,630
provide a template package and then run

00:31:09,139 --> 00:31:15,450
all the machinery yourself

00:31:11,630 --> 00:31:20,700
it's experimentation needed but like in

00:31:15,450 --> 00:31:22,710
theory it ought to work no so

00:31:20,700 --> 00:31:25,830
deliberately we made a point everything

00:31:22,710 --> 00:31:28,620
we're doing is public and open there is

00:31:25,830 --> 00:31:31,230
no magic in anything of what we've done

00:31:28,620 --> 00:31:32,520
there's no secret source so if people do

00:31:31,230 --> 00:31:34,740
want to run their own suit their own

00:31:32,520 --> 00:31:36,060
signing service say for a derived

00:31:34,740 --> 00:31:38,670
distribution or something

00:31:36,060 --> 00:31:40,860
all of this is doable we are not

00:31:38,670 --> 00:31:43,020
necessarily going to some going to add

00:31:40,860 --> 00:31:45,840
other people's keys because that kind of

00:31:43,020 --> 00:31:48,270
defeats the object but if you want to go

00:31:45,840 --> 00:31:50,550
through the same process we have you can

00:31:48,270 --> 00:31:52,020
then you know it's all documented it's

00:31:50,550 --> 00:31:55,740
all well understood it's just a matter

00:31:52,020 --> 00:31:58,050
of time we also do things like ensure

00:31:55,740 --> 00:32:00,180
that the state of whether something is

00:31:58,050 --> 00:32:01,920
signed or not that state does not live

00:32:00,180 --> 00:32:04,980
in dak it actually lives in designing

00:32:01,920 --> 00:32:07,380
service which means that so it's that

00:32:04,980 --> 00:32:11,070
that manifests exported by Dayak saying

00:32:07,380 --> 00:32:13,230
please sign is this package that doesn't

00:32:11,070 --> 00:32:14,460
go away once that package is signed so

00:32:13,230 --> 00:32:17,160
it means that if you run your own

00:32:14,460 --> 00:32:18,840
signing service then it will actually

00:32:17,160 --> 00:32:20,850
pick up that even if you only run that

00:32:18,840 --> 00:32:25,860
once a week or you don't end up with

00:32:20,850 --> 00:32:27,810
race conditions Oh nm use of the

00:32:25,860 --> 00:32:29,640
packages that need to be signed do those

00:32:27,810 --> 00:32:31,590
get signed as well or said only a listed

00:32:29,640 --> 00:32:39,270
set of uploaders think it's their

00:32:31,590 --> 00:32:42,720
packages signed this was something we

00:32:39,270 --> 00:32:45,600
discussed it was something we discussed

00:32:42,720 --> 00:32:48,870
at the moment nm use will get signed in

00:32:45,600 --> 00:32:50,850
the same way if people do try to abuse

00:32:48,870 --> 00:32:52,710
this no we don't want to lock things

00:32:50,850 --> 00:32:55,500
down totally that way if people do end

00:32:52,710 --> 00:32:57,060
up abusing it then we will shout out

00:32:55,500 --> 00:32:58,950
them you know we will end up with

00:32:57,060 --> 00:33:01,860
voguing things that have broken if we

00:32:58,950 --> 00:33:03,510
have to but of course you know it comes

00:33:01,860 --> 00:33:05,610
down to you know we trustee DS in

00:33:03,510 --> 00:33:10,700
general not to upload what bad things

00:33:05,610 --> 00:33:10,700
this is an extension of that Thanks okay

00:33:16,479 --> 00:33:22,479
so there's no manual review process

00:33:18,879 --> 00:33:25,989
whatsoever between an upload and the

00:33:22,479 --> 00:33:28,269
signing so right now we're good running

00:33:25,989 --> 00:33:29,590
the signer manually so we're running as

00:33:28,269 --> 00:33:31,719
having service where we do actually

00:33:29,590 --> 00:33:34,269
review it that's mostly because we're

00:33:31,719 --> 00:33:36,849
not we want to gain confidence in that

00:33:34,269 --> 00:33:39,879
it operates properly but there isn't we

00:33:36,849 --> 00:33:44,559
do not intend to require explicit human

00:33:39,879 --> 00:33:46,029
intervention after an upload so I mean

00:33:44,559 --> 00:33:47,950
so the well the reason i asked-- this is

00:33:46,029 --> 00:33:50,619
because of that last question the way we

00:33:47,950 --> 00:33:54,580
implemented this in in launchpad years

00:33:50,619 --> 00:33:56,559
ago and we have significantly fewer boon

00:33:54,580 --> 00:33:58,989
to core developers than there are Debian

00:33:56,559 --> 00:34:01,719
developers and yet our trust level was

00:33:58,989 --> 00:34:05,529
still just barely low enough that we

00:34:01,719 --> 00:34:07,269
insist that there's that interim step

00:34:05,529 --> 00:34:08,589
where a binary is built and we've asked

00:34:07,269 --> 00:34:11,319
for it to be signed that gets shunted

00:34:08,589 --> 00:34:14,169
into a queue or we look at it and go yep

00:34:11,319 --> 00:34:15,579
that looks sane let it go because as

00:34:14,169 --> 00:34:17,289
soon as that binary is signed and

00:34:15,579 --> 00:34:20,139
published you're screwed

00:34:17,289 --> 00:34:24,099
you have to revoke your cert if that

00:34:20,139 --> 00:34:25,779
binary happens to be malicious I've

00:34:24,099 --> 00:34:28,389
already been talking to Colin about this

00:34:25,779 --> 00:34:31,799
he is very interested in how we've done

00:34:28,389 --> 00:34:34,329
things he was suggesting maybe abun to

00:34:31,799 --> 00:34:36,399
changing some you know in changing some

00:34:34,329 --> 00:34:38,470
of your infrastructure yeah clearly we

00:34:36,399 --> 00:34:40,649
will want to converge at some point yeah

00:34:38,470 --> 00:34:42,849
but I don't know if converging on

00:34:40,649 --> 00:34:44,710
letting it sail through is what we're

00:34:42,849 --> 00:34:46,089
gonna want to yeah I mean other bits

00:34:44,710 --> 00:34:47,349
sure I mean because we're gonna want the

00:34:46,089 --> 00:34:48,909
packages to look the same we don't want

00:34:47,349 --> 00:34:50,909
to carry massive deltas forever for

00:34:48,909 --> 00:34:52,779
things like grub that's insanity yeah

00:34:50,909 --> 00:34:55,599
well the other thing I wanted to touch

00:34:52,779 --> 00:34:57,569
on because details absolutely right

00:34:55,599 --> 00:35:00,490
you've made the right decision to to

00:34:57,569 --> 00:35:02,589
authenticate all the way through I just

00:35:00,490 --> 00:35:04,660
don't want anyone to think that haha

00:35:02,589 --> 00:35:05,829
boom - super insecure and screwed up and

00:35:04,660 --> 00:35:07,210
doing it wrong because we took a

00:35:05,829 --> 00:35:10,809
different decision six years ago because

00:35:07,210 --> 00:35:14,020
we have changed our policy the last step

00:35:10,809 --> 00:35:15,670
is to enforce signatures from secure

00:35:14,020 --> 00:35:18,730
boot down which we're changing like in

00:35:15,670 --> 00:35:20,020
the next month so awesome so everything

00:35:18,730 --> 00:35:21,250
it does not know that was a decision

00:35:20,020 --> 00:35:24,500
that was made too long yeah it was a

00:35:21,250 --> 00:35:27,800
decision to make the decision of 2012

00:35:24,500 --> 00:35:29,930
since now yeah yeah I guess for right

00:35:27,800 --> 00:35:35,510
now and we can discuss offline but I

00:35:29,930 --> 00:35:37,520
think definitely the this couldn't a

00:35:35,510 --> 00:35:38,599
certain amount of like time it takes for

00:35:37,520 --> 00:35:40,099
everything to go through the process

00:35:38,599 --> 00:35:42,200
right between like kind of being built

00:35:40,099 --> 00:35:44,720
kernel being signed like code sometimes

00:35:42,200 --> 00:35:47,270
is hell for all of this right like right

00:35:44,720 --> 00:35:48,560
yeah III think like the communal grounds

00:35:47,270 --> 00:35:50,720
like having a delay so we assign a

00:35:48,560 --> 00:35:52,070
kernel like six to twelve hours after it

00:35:50,720 --> 00:35:54,200
comes out so I go the idea is like we

00:35:52,070 --> 00:35:57,380
can avoid blocking people but what we

00:35:54,200 --> 00:35:58,940
can we can hash something out yeah yeah

00:35:57,380 --> 00:36:02,330
delays work for you they don't work for

00:35:58,940 --> 00:36:04,490
us so okay but we also have more people

00:36:02,330 --> 00:36:06,080
Manning those queues and just going and

00:36:04,490 --> 00:36:07,550
then quickly looking to see if that's

00:36:06,080 --> 00:36:09,800
something this looks different if you

00:36:07,550 --> 00:36:11,210
have pizza for well yeah basically I

00:36:09,800 --> 00:36:12,650
just I checked Providence make sure that

00:36:11,210 --> 00:36:13,490
it was uploaded by someone that I

00:36:12,650 --> 00:36:15,560
reasonably trust

00:36:13,490 --> 00:36:17,570
I've probably also already done a source

00:36:15,560 --> 00:36:19,760
review if I haven't done a source review

00:36:17,570 --> 00:36:22,010
of that kernel upload and it's from a

00:36:19,760 --> 00:36:26,390
name I don't know it's going away very

00:36:22,010 --> 00:36:28,490
quickly so so of course in terms of the

00:36:26,390 --> 00:36:30,140
commonality of the packages I mean the

00:36:28,490 --> 00:36:32,740
firmware update packages and the grub

00:36:30,140 --> 00:36:35,300
package between Debian and Ubuntu are

00:36:32,740 --> 00:36:37,970
incredibly closely tied you know there's

00:36:35,300 --> 00:36:39,890
not one of over maintained errs so for

00:36:37,970 --> 00:36:42,349
now absolutely they were deficit in the

00:36:39,890 --> 00:36:44,330
rules files or F equals one two or

00:36:42,349 --> 00:36:47,000
Debian we definitely want to make those

00:36:44,330 --> 00:36:48,589
go away as soon as we can yeah yeah

00:36:47,000 --> 00:36:50,150
actually a lot of the if adepts we've

00:36:48,589 --> 00:36:52,160
had in growth in the last six years can

00:36:50,150 --> 00:36:56,800
go away very soon if we change stuff

00:36:52,160 --> 00:36:56,800
which we nice sure cool

00:36:58,910 --> 00:37:05,520
all right one last question I think some

00:37:02,849 --> 00:37:09,300
of the install media contain mem test 86

00:37:05,520 --> 00:37:10,859
do they yes but that still work if you

00:37:09,300 --> 00:37:12,570
put it with secure boot or should that

00:37:10,859 --> 00:37:17,790
also be added to the list of packages to

00:37:12,570 --> 00:37:20,640
be signed wait but you can't we can't

00:37:17,790 --> 00:37:22,619
load men test form a UEFI boot menu you

00:37:20,640 --> 00:37:24,599
can only do it from BIOS boot menu at

00:37:22,619 --> 00:37:28,080
all at the moment so it's a moo-moo

00:37:24,599 --> 00:37:30,060
question okay that's a shame yeah it's a

00:37:28,080 --> 00:37:32,550
shame absolutely but until somebody

00:37:30,060 --> 00:37:35,450
changes it you won't be able to reboot

00:37:32,550 --> 00:37:38,040
it on an EFI system at all anyway I

00:37:35,450 --> 00:37:41,040
don't see in principle why we wouldn't

00:37:38,040 --> 00:37:48,540
sign Montes day26 as well though like in

00:37:41,040 --> 00:37:52,349
principle I had one other because all of

00:37:48,540 --> 00:37:55,080
this was sort of a cleanroom redesigned

00:37:52,349 --> 00:37:58,349
bla bla bla which is great and it seems

00:37:55,080 --> 00:37:59,700
very x86 EFI centric have you designed

00:37:58,349 --> 00:38:04,140
it in a way to be extensible for other

00:37:59,700 --> 00:38:06,030
types of signatures yes okay good I only

00:38:04,140 --> 00:38:08,369
ask that because we we literally just

00:38:06,030 --> 00:38:10,440
added PowerPC signing like surety once

00:38:08,369 --> 00:38:12,420
again we have we did consider so already

00:38:10,440 --> 00:38:15,690
we're going to be signing for example on

00:38:12,420 --> 00:38:17,609
64 grub but going through this is

00:38:15,690 --> 00:38:19,440
deliberately exactly but this is

00:38:17,609 --> 00:38:21,060
deliberately informed by decisions if

00:38:19,440 --> 00:38:23,220
you do a few moments or mathews to all

00:38:21,060 --> 00:38:25,950
last year about signing the rest of the

00:38:23,220 --> 00:38:27,930
system we we deliberately we've

00:38:25,950 --> 00:38:32,430
architected this so we can have all the

00:38:27,930 --> 00:38:33,960
types of signatures we will we'll burn

00:38:32,430 --> 00:38:37,609
those bridges when we get to them but we

00:38:33,960 --> 00:38:40,770
haven't actually cut off any of that yet

00:38:37,609 --> 00:38:43,020
one quick question you mentioned that

00:38:40,770 --> 00:38:45,599
there is currently an audit database

00:38:43,020 --> 00:38:47,300
that has public dump who is basically

00:38:45,599 --> 00:38:50,040
all the stuff that was ever signed by

00:38:47,300 --> 00:38:53,849
signing service we didn't make sense to

00:38:50,040 --> 00:38:55,650
make that data available in for instance

00:38:53,849 --> 00:38:58,170
certificate transparency since its

00:38:55,650 --> 00:39:03,150
regular x.509 certificates as far as I

00:38:58,170 --> 00:39:05,010
know we haven't looked at doing it that

00:39:03,150 --> 00:39:07,829
way

00:39:05,010 --> 00:39:12,240
if that makes it we could certainly take

00:39:07,829 --> 00:39:14,369
a look at that it's it's hard to check a

00:39:12,240 --> 00:39:16,260
CT log when your don't happen your

00:39:14,369 --> 00:39:19,829
computers and Buddha get I do I do agree

00:39:16,260 --> 00:39:23,280
that like using existing structure is

00:39:19,829 --> 00:39:26,099
useful it's not it's not clear that that

00:39:23,280 --> 00:39:28,770
versus and we can talk offline it

00:39:26,099 --> 00:39:30,900
something yeah my point was melt more

00:39:28,770 --> 00:39:33,990
but it's easier to get people to mirror

00:39:30,900 --> 00:39:38,030
the entire log if we export it in a

00:39:33,990 --> 00:39:42,930
format they already understand it also

00:39:38,030 --> 00:39:45,050
can become quite a lot of data thanks a

00:39:42,930 --> 00:39:45,050
lot

00:39:47,859 --> 00:39:55,029
any other questions comments discussions

00:39:55,599 --> 00:40:01,329
okay so I think we are done thank you

00:39:59,029 --> 00:40:01,329
very much

00:40:01,830 --> 00:40:10,119

YouTube URL: https://www.youtube.com/watch?v=Rg1q8A5QTQY


