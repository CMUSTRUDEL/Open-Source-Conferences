Title: Help the kernel team help you
Publication date: 2018-05-27
Playlist: MiniDebConf Hamburg 2018
Description: 
	by Ben Hutchings

At: MiniDebConf Hamburg
https://wiki.debian.org/DebianEvents/de/2018/MiniDebConfHamburg
Room: main
Scheduled start: 2018-05-20 10:00:00
Captions: 
	00:00:04,799 --> 00:00:10,240
without further ado the first talk this

00:00:07,720 --> 00:00:12,490
morning is by our beloved kernel

00:00:10,240 --> 00:00:24,640
maintainer beyond hatch ins about half

00:00:12,490 --> 00:00:26,500
the kernel team to help you hi so as

00:00:24,640 --> 00:00:28,240
Michael said I'm one of the kernel

00:00:26,500 --> 00:00:36,129
maintain as I've been on the kernel team

00:00:28,240 --> 00:00:39,789
for about ten years now so I'm going to

00:00:36,129 --> 00:00:41,589
talk about what Debian users and

00:00:39,789 --> 00:00:47,620
develops developers can do when

00:00:41,589 --> 00:00:50,649
interacting with the kernel team to make

00:00:47,620 --> 00:00:56,499
us more effective more able to to deal

00:00:50,649 --> 00:01:00,429
with the requests quickly we're quite

00:00:56,499 --> 00:01:04,629
busy there are about a dozen people on

00:01:00,429 --> 00:01:09,090
the kernel team but most of us have

00:01:04,629 --> 00:01:09,090
other responsibilities within Debian and

00:01:12,030 --> 00:01:16,900
most wasn't not paid to work on Debian

00:01:14,560 --> 00:01:20,950
either so we only have a few hours a

00:01:16,900 --> 00:01:25,000
week to spend on it we get a constant

00:01:20,950 --> 00:01:26,950
stream of bug reports some of which we

00:01:25,000 --> 00:01:30,940
can handle some of which unfortunately

00:01:26,950 --> 00:01:36,220
we can't there's a large backlog of bug

00:01:30,940 --> 00:01:37,840
reports that probably won't get dealt

00:01:36,220 --> 00:01:46,330
with in Debian they might get fixed

00:01:37,840 --> 00:01:48,970
upstream but we won't get to them so one

00:01:46,330 --> 00:01:51,220
of the first things you can do to make

00:01:48,970 --> 00:01:55,840
to make our life easier is report bugs

00:01:51,220 --> 00:01:58,810
upstream if you're running a recent

00:01:55,840 --> 00:02:00,970
kernel and that doesn't have to be

00:01:58,810 --> 00:02:04,979
absolutely the the latest version that

00:02:00,970 --> 00:02:08,729
list released yesterday any version in

00:02:04,979 --> 00:02:11,920
testing and stable or experimental or

00:02:08,729 --> 00:02:14,230
the current most recent back port suite

00:02:11,920 --> 00:02:16,450
should be recent enough if you're

00:02:14,230 --> 00:02:18,350
running at one of those versions then

00:02:16,450 --> 00:02:19,820
the upstream kernel

00:02:18,350 --> 00:02:24,880
developers would probably be quite

00:02:19,820 --> 00:02:27,050
pleased to receive your bug report some

00:02:24,880 --> 00:02:33,110
subsystems in the kernel use the bug

00:02:27,050 --> 00:02:35,330
tracker like bugzilla and many do not

00:02:33,110 --> 00:02:38,800
they just want bug reports directly to

00:02:35,330 --> 00:02:41,120
their development mailing list there's a

00:02:38,800 --> 00:02:44,270
file documentation file called

00:02:41,120 --> 00:02:46,640
maintainer x' which we package you can

00:02:44,270 --> 00:02:49,270
find it in the Linux doc package and

00:02:46,640 --> 00:02:55,540
that lists for each area of the kernel

00:02:49,270 --> 00:02:58,790
the email addresses of maintainers the

00:02:55,540 --> 00:03:01,940
the address of any relevant development

00:02:58,790 --> 00:03:03,470
mailing list and in some cases it will

00:03:01,940 --> 00:03:11,360
say it's theirs that they use the bug

00:03:03,470 --> 00:03:12,680
tracker this URL that doesn't mean that

00:03:11,360 --> 00:03:14,510
you shouldn't report the bug in Debian

00:03:12,680 --> 00:03:16,910
as well if you book report the bug in

00:03:14,510 --> 00:03:20,390
Debian and and upstream then use the

00:03:16,910 --> 00:03:22,100
standard for it command to link them

00:03:20,390 --> 00:03:25,940
together and we should then be able to

00:03:22,100 --> 00:03:33,380
see status changes if you if you

00:03:25,940 --> 00:03:34,850
reported in Bugzilla upstream secondly

00:03:33,380 --> 00:03:40,310
report bugs with the right information

00:03:34,850 --> 00:03:42,200
the kernel packages that we build

00:03:40,310 --> 00:03:44,870
includes some hooks scripts for the

00:03:42,200 --> 00:03:47,630
report file commands so it can gather

00:03:44,870 --> 00:03:49,070
some diagnostic information and we

00:03:47,630 --> 00:03:52,490
generally expect that if you're

00:03:49,070 --> 00:03:56,960
reporting a bug that is about this

00:03:52,490 --> 00:03:58,520
doesn't work on my machine then we want

00:03:56,960 --> 00:04:03,230
some diagnostic information about your

00:03:58,520 --> 00:04:06,950
machine running some commands that you

00:04:03,230 --> 00:04:08,810
thought might be useful it's not usually

00:04:06,950 --> 00:04:11,090
not as good as running all the

00:04:08,810 --> 00:04:14,510
diagnostic commands that that are in

00:04:11,090 --> 00:04:17,270
these scripts so the right way to report

00:04:14,510 --> 00:04:19,760
a bug in the currently running kernel is

00:04:17,270 --> 00:04:21,980
just a report by kernel report bug knows

00:04:19,760 --> 00:04:26,479
how to look up the correct package for

00:04:21,980 --> 00:04:30,610
that and otherwise you should report

00:04:26,479 --> 00:04:35,889
against the specific versions

00:04:30,610 --> 00:04:38,860
package for example Linux image 4.9 or -

00:04:35,889 --> 00:04:42,639
6 . amd64 would be the current girl

00:04:38,860 --> 00:04:46,000
package if you're running stretch on a

00:04:42,639 --> 00:04:50,409
64-bit PC don't file bugs against meta

00:04:46,000 --> 00:04:53,770
packages like Linux image 8 NB 64

00:04:50,409 --> 00:04:55,750
because those are basically just some

00:04:53,770 --> 00:04:57,789
metadata saying this is the current

00:04:55,750 --> 00:05:01,000
version of the kernel you should install

00:04:57,789 --> 00:05:03,520
that don't need and don't report bugs

00:05:01,000 --> 00:05:05,110
against firmware packages unless you're

00:05:03,520 --> 00:05:09,250
really short the bug is in firmware

00:05:05,110 --> 00:05:13,080
rather than the driver this may seem

00:05:09,250 --> 00:05:13,080
obvious but people do those things

00:05:15,659 --> 00:05:24,880
adding features we do have some

00:05:22,000 --> 00:05:31,120
long-standing patches in the kernel in

00:05:24,880 --> 00:05:34,960
the Linux package we don't really want

00:05:31,120 --> 00:05:36,190
to add to those most of those really

00:05:34,960 --> 00:05:40,169
ought to get cleaned up and sent

00:05:36,190 --> 00:05:40,169
upstream but it requires time to do that

00:05:40,289 --> 00:05:45,580
so new features or it should always be

00:05:43,210 --> 00:05:49,300
able to add it upstream as soon as

00:05:45,580 --> 00:05:51,880
they're accepted upstream we're happy to

00:05:49,300 --> 00:05:54,099
add them into earlier versions that were

00:05:51,880 --> 00:05:56,409
the earlier versions that we have in

00:05:54,099 --> 00:06:00,279
Debian because we know if they're

00:05:56,409 --> 00:06:01,719
accepted upstream then as soon as we get

00:06:00,279 --> 00:06:03,460
to that new other stream version we can

00:06:01,719 --> 00:06:09,810
drop that patch so it's not adding to

00:06:03,460 --> 00:06:12,090
the long-term burden of maintenance I

00:06:09,810 --> 00:06:14,380
just got a link there to the

00:06:12,090 --> 00:06:20,289
documentation on how to contribute to

00:06:14,380 --> 00:06:23,050
the kernel we would be very happy

00:06:20,289 --> 00:06:28,060
well I would be very happy if people

00:06:23,050 --> 00:06:30,490
would volunteer to work on those

00:06:28,060 --> 00:06:32,259
long-standing patches and get them into

00:06:30,490 --> 00:06:35,279
a state where where they would be

00:06:32,259 --> 00:06:35,279
accepted upstream

00:06:38,140 --> 00:06:44,230
so you reported a buck upstream and it

00:06:42,460 --> 00:06:46,690
got fixed that's great

00:06:44,230 --> 00:06:50,050
but quite often that fix isn't going to

00:06:46,690 --> 00:06:58,840
get into a into a stable release of the

00:06:50,050 --> 00:07:00,820
kernel for several months and if it's if

00:06:58,840 --> 00:07:03,280
the bug is was actually found in a

00:07:00,820 --> 00:07:09,280
stable release rather than unstable or

00:07:03,280 --> 00:07:11,380
testing then that fix might not

00:07:09,280 --> 00:07:16,480
automatically get into a staple update

00:07:11,380 --> 00:07:19,600
at all so you probably want to tell us

00:07:16,480 --> 00:07:23,500
what the fix is so that we can apply it

00:07:19,600 --> 00:07:26,140
now if you can give a reference to the

00:07:23,500 --> 00:07:27,940
specific commit if you know that that is

00:07:26,140 --> 00:07:31,630
absolutely ideal

00:07:27,940 --> 00:07:37,450
we can easily then dig out that commit

00:07:31,630 --> 00:07:41,430
and only there's a patch tracking system

00:07:37,450 --> 00:07:46,230
used by many of the kernel mailing lists

00:07:41,430 --> 00:07:48,670
called patch work and that's we'll

00:07:46,230 --> 00:07:50,020
gather together a patch and all the

00:07:48,670 --> 00:07:52,420
discussion about it

00:07:50,020 --> 00:07:54,940
it also guards to get a patch series

00:07:52,420 --> 00:08:00,490
which isn't useful if a fix takes

00:07:54,940 --> 00:08:02,260
multiple steps if you tell us that the

00:08:00,490 --> 00:08:06,700
patch was discussed on a mailing list

00:08:02,260 --> 00:08:09,700
and linked to an archive that can work

00:08:06,700 --> 00:08:11,350
but mailing list archives often mangle

00:08:09,700 --> 00:08:15,310
patches so then we need to undo the

00:08:11,350 --> 00:08:20,440
mangling so that takes longer to deal

00:08:15,310 --> 00:08:23,320
with if you send a patch simply send a

00:08:20,440 --> 00:08:25,540
patch to the bug tracker without any

00:08:23,320 --> 00:08:27,820
link to oh this is where it came from

00:08:25,540 --> 00:08:33,070
upstream that's actually kind of a

00:08:27,820 --> 00:08:36,870
problem because we don't know whether

00:08:33,070 --> 00:08:39,550
that's really the the what you say it is

00:08:36,870 --> 00:08:41,020
if you if it's a sign mail from a Debian

00:08:39,550 --> 00:08:46,090
developer okay yeah we can probably

00:08:41,020 --> 00:08:49,559
trust it if it's not signed mail or it's

00:08:46,090 --> 00:08:51,459
from Debian user then

00:08:49,559 --> 00:08:54,730
we don't know so we need to actually

00:08:51,459 --> 00:08:57,509
look upstream to see this is this is

00:08:54,730 --> 00:09:02,739
this is the version that got committed

00:08:57,509 --> 00:09:05,319
if you want to do a back port from the

00:09:02,739 --> 00:09:07,509
from upstream to whatever is the the

00:09:05,319 --> 00:09:09,069
current version that's great but include

00:09:07,509 --> 00:09:17,350
you should need to include the upstream

00:09:09,069 --> 00:09:22,420
reference as well talks about has our

00:09:17,350 --> 00:09:25,179
team I like from time to time I all get

00:09:22,420 --> 00:09:29,579
mail directly to me saying oh there's

00:09:25,179 --> 00:09:29,579
this bug or can you help me with this or

00:09:31,170 --> 00:09:35,410
occasionally company saying oh we want

00:09:33,429 --> 00:09:40,179
to update the support for for our

00:09:35,410 --> 00:09:44,529
hardware they should not be mailing just

00:09:40,179 --> 00:09:46,389
me they should always almost always be

00:09:44,529 --> 00:09:50,230
sending bug report to the regular Debian

00:09:46,389 --> 00:09:55,119
bug tracker and other mail should go to

00:09:50,230 --> 00:09:58,360
the Debian kernel mailing list we also

00:09:55,119 --> 00:10:05,259
have developments IRC channel hash Gavin

00:09:58,360 --> 00:10:07,029
kernel on IRC Debian girag and some some

00:10:05,259 --> 00:10:10,269
things some things can be discussed

00:10:07,029 --> 00:10:14,649
there usually it's best to just send

00:10:10,269 --> 00:10:17,049
longer messages as email though the only

00:10:14,649 --> 00:10:19,959
reason you would want to not use the one

00:10:17,049 --> 00:10:22,660
of those public the only reason why you

00:10:19,959 --> 00:10:24,489
should not use those public channels is

00:10:22,660 --> 00:10:28,629
if you're discussing security issue

00:10:24,489 --> 00:10:30,220
that's currently not public and

00:10:28,629 --> 00:10:33,939
shouldn't be made public until it's

00:10:30,220 --> 00:10:36,189
fixed and in that case do contact me

00:10:33,939 --> 00:10:38,850
directly but also with the Debian

00:10:36,189 --> 00:10:38,850
security team

00:10:42,540 --> 00:10:51,730
and so if you want to contribute to the

00:10:48,360 --> 00:10:53,019
to the packaging rather than if you

00:10:51,730 --> 00:10:55,059
don't if you're if you don't want to

00:10:53,019 --> 00:10:56,620
touch the kernel code itself we'd want

00:10:55,059 --> 00:10:58,470
to contribute to the packaging maybe

00:10:56,620 --> 00:11:00,490
wants to change the configuration of

00:10:58,470 --> 00:11:06,249
maybe you want to make the packaging

00:11:00,490 --> 00:11:12,459
more more suitable for the for for use

00:11:06,249 --> 00:11:14,589
by downstream spaying derivatives a few

00:11:12,459 --> 00:11:23,019
simply wants to improve the packaging in

00:11:14,589 --> 00:11:27,009
debian patters too that are okay merge

00:11:23,019 --> 00:11:30,670
requests are wonderful since we moved to

00:11:27,009 --> 00:11:32,850
sell sir I can take much requests I

00:11:30,670 --> 00:11:35,980
through get the gate lab software I

00:11:32,850 --> 00:11:41,860
found I can review and comment on and

00:11:35,980 --> 00:11:43,959
apply those changes pretty quickly it

00:11:41,860 --> 00:11:46,449
also helps that we get notification for

00:11:43,959 --> 00:11:53,499
all the new merge requests on IRC so

00:11:46,449 --> 00:11:57,579
that's pretty much instant if if a team

00:11:53,499 --> 00:12:00,220
member is looking at the RC IRC channel

00:11:57,579 --> 00:12:06,610
and he's as time available then they can

00:12:00,220 --> 00:12:08,920
deal with that in minutes sometimes so

00:12:06,610 --> 00:12:10,749
in the last I looked I check back in the

00:12:08,920 --> 00:12:13,660
git history and I found in the last four

00:12:10,749 --> 00:12:15,819
weeks that we used a li off there

00:12:13,660 --> 00:12:20,050
appears to be only one patch to the

00:12:15,819 --> 00:12:23,970
Linux package that wasn't either picked

00:12:20,050 --> 00:12:27,160
from upstream or done by a team member

00:12:23,970 --> 00:12:33,569
in the last four weeks up to yesterday

00:12:27,160 --> 00:12:33,569
we accepted 14 merge requests on celsa

00:12:34,019 --> 00:12:45,519
so this is this is a massive improvement

00:12:38,949 --> 00:12:48,449
to productivity of the of the team and

00:12:45,519 --> 00:12:51,449
our ability to accept outside

00:12:48,449 --> 00:12:51,449
contributions

00:12:51,550 --> 00:12:56,230
once again reminder that feature

00:12:53,500 --> 00:13:02,470
practice for the kernel code itself do

00:12:56,230 --> 00:13:04,889
need to go to upstream first so that's

00:13:02,470 --> 00:13:04,889
about it

00:13:04,950 --> 00:13:11,519
but got about five minutes for questions

00:13:13,790 --> 00:13:21,340
[Applause]

00:13:29,590 --> 00:13:35,660
hi hi Ben thanks for the lecture

00:13:33,680 --> 00:13:39,050
I am wondering what are those

00:13:35,660 --> 00:13:42,470
long-standing patches you mentioned and

00:13:39,050 --> 00:13:45,740
you give a few examples for that one of

00:13:42,470 --> 00:13:48,020
the things that actually requires the

00:13:45,740 --> 00:13:52,510
most work when moving to a new kernel

00:13:48,020 --> 00:14:00,140
version is we have a patch to firstly

00:13:52,510 --> 00:14:03,230
ants add specific log messages to the

00:14:00,140 --> 00:14:05,360
firmware loader so so whenever a

00:14:03,230 --> 00:14:07,910
firmware file is missing it will look

00:14:05,360 --> 00:14:12,800
that you know in the standard format

00:14:07,910 --> 00:14:17,710
this was this is useful for the

00:14:12,800 --> 00:14:22,030
installer which uses that to detect

00:14:17,710 --> 00:14:22,030
missing firmware and warn you

00:14:22,250 --> 00:14:28,520
and then because many drivers also log

00:14:26,480 --> 00:14:31,070
firmware errors in inconsistent ways

00:14:28,520 --> 00:14:35,990
there's a second patch that removes

00:14:31,070 --> 00:14:37,550
those redundant log messages and that

00:14:35,990 --> 00:14:41,770
one keeps getting conflicts when we

00:14:37,550 --> 00:14:47,140
update so really those those author gets

00:14:41,770 --> 00:14:47,140
cleaned up a bit and and sent upstream

00:14:48,250 --> 00:14:51,700
further questions

00:14:58,380 --> 00:15:01,480
well if not then let's thank that in

00:15:00,780 --> 00:15:08,730
[Music]

00:15:01,480 --> 00:15:08,730

YouTube URL: https://www.youtube.com/watch?v=6UR0AuiNpuQ


