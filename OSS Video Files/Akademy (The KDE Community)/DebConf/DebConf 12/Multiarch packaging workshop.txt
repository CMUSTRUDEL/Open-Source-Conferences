Title: Multiarch packaging workshop
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Steve Langasek

At: DebConf12
https://debconf12.debconf.org/
Room: Aula Magna
Scheduled start: 2012-07-10 12:00:00
Captions: 
	00:00:00,000 --> 00:00:04,980
all right welcome everyone to the

00:00:02,340 --> 00:00:08,280
workshop on guilty arch which is a new

00:00:04,980 --> 00:00:10,980
and tricky subject and we have

00:00:08,280 --> 00:00:16,139
stevelegassick doing a nice workshop for

00:00:10,980 --> 00:00:17,820
us so here you go well it's not really

00:00:16,139 --> 00:00:19,080
all that tricky it just completely flies

00:00:17,820 --> 00:00:20,400
in the face of everything we thought we

00:00:19,080 --> 00:00:21,869
knew about how we put packages together

00:00:20,400 --> 00:00:25,380
it's not all that complicated really

00:00:21,869 --> 00:00:28,349
when you get right down to it so I was

00:00:25,380 --> 00:00:30,210
talking with Wicky beforehand he tricked

00:00:28,349 --> 00:00:31,679
me into doing this workshop and so I was

00:00:30,210 --> 00:00:34,890
asking what he he was looking to get out

00:00:31,679 --> 00:00:37,350
of it and basically kind of conclusion

00:00:34,890 --> 00:00:40,950
we came to is we have this wiki page on

00:00:37,350 --> 00:00:43,350
the on the Debian org wiki which I more

00:00:40,950 --> 00:00:45,980
or less just going to be reading through

00:00:43,350 --> 00:00:48,210
and walking people through after which

00:00:45,980 --> 00:00:52,079
we'll take some questions and I'll show

00:00:48,210 --> 00:00:53,850
a few examples and whatnot but all right

00:00:52,079 --> 00:00:55,320
so starting with the basics and actually

00:00:53,850 --> 00:00:56,640
I should find somewhere else that

00:00:55,320 --> 00:01:03,600
actually mentions this which I don't

00:00:56,640 --> 00:01:06,270
think is in here the the first thing to

00:01:03,600 --> 00:01:07,860
talk about is what is multi arch and

00:01:06,270 --> 00:01:13,799
what does it mean to convert a package

00:01:07,860 --> 00:01:19,729
for multi arch increase the font in

00:01:13,799 --> 00:01:19,729
theory where does that setting live

00:01:22,149 --> 00:01:27,119
better good enough all right more

00:01:34,049 --> 00:01:43,710
okay right so the what does it mean to

00:01:41,939 --> 00:01:45,179
convert a package for MultiAir so the

00:01:43,710 --> 00:01:46,920
basic idea of multi arch which if you

00:01:45,179 --> 00:01:48,270
were around for the last couple of hours

00:01:46,920 --> 00:01:50,130
when we're talking about how we're using

00:01:48,270 --> 00:01:54,450
it in cross building you already know

00:01:50,130 --> 00:01:58,409
all this or but in any case multi arch

00:01:54,450 --> 00:02:00,390
is the idea of installing packages for

00:01:58,409 --> 00:02:03,149
more than one architecture on a single

00:02:00,390 --> 00:02:05,209
system and structuring those packages so

00:02:03,149 --> 00:02:10,079
that they can sanely co-exist together

00:02:05,209 --> 00:02:12,360
on the file system where everything that

00:02:10,079 --> 00:02:14,220
needs those files agrees on where they

00:02:12,360 --> 00:02:16,590
should live and is not confused by

00:02:14,220 --> 00:02:20,069
things subtly moving them about

00:02:16,590 --> 00:02:22,140
underneath you to try to shoehorn things

00:02:20,069 --> 00:02:24,599
onto the file system and so instead we

00:02:22,140 --> 00:02:26,400
say no each architecture has its own

00:02:24,599 --> 00:02:29,160
directory that's always where its

00:02:26,400 --> 00:02:31,380
libraries should live and everything

00:02:29,160 --> 00:02:32,879
should look for them there and and as

00:02:31,380 --> 00:02:36,390
long as the entire system agrees it

00:02:32,879 --> 00:02:39,480
works great and it allows you to mix and

00:02:36,390 --> 00:02:41,280
match libraries and packages of any set

00:02:39,480 --> 00:02:45,930
of architectures so this is not simply

00:02:41,280 --> 00:02:47,489
about x86 64 + i3 86 or anything like

00:02:45,930 --> 00:02:49,310
that it's it's much broader than that

00:02:47,489 --> 00:02:50,700
people are using for cross compilation

00:02:49,310 --> 00:02:53,400
environments they're using it for

00:02:50,700 --> 00:02:56,040
emulation environments where any binary

00:02:53,400 --> 00:02:58,079
you might want to run on any system it

00:02:56,040 --> 00:02:59,760
should be possible to at least satisfy

00:02:58,079 --> 00:03:02,250
the library dependencies and install it

00:02:59,760 --> 00:03:04,709
on your system such that it provided you

00:03:02,250 --> 00:03:06,150
have some way to execute it that the

00:03:04,709 --> 00:03:08,700
packaging system doesn't get in your way

00:03:06,150 --> 00:03:11,910
that's effectively what multi arch is

00:03:08,700 --> 00:03:15,299
about so you get to reuse the existing

00:03:11,910 --> 00:03:16,950
packages from the archive of any

00:03:15,299 --> 00:03:19,380
architecture and you can install them

00:03:16,950 --> 00:03:22,560
with with the support and integration of

00:03:19,380 --> 00:03:24,599
the package manager and now as far as

00:03:22,560 --> 00:03:28,410
what it means to convert your package to

00:03:24,599 --> 00:03:33,569
multi arch I'm afraid I'm a little bit

00:03:28,410 --> 00:03:34,950
reaching here I'm going to drill down a

00:03:33,569 --> 00:03:36,540
little bit here because I want to get a

00:03:34,950 --> 00:03:37,859
reference up on the page and I'm sorry I

00:03:36,540 --> 00:03:40,220
haven't actually prepared any slides at

00:03:37,859 --> 00:03:40,220
all for this

00:03:42,230 --> 00:03:45,340
one sec

00:03:56,520 --> 00:03:59,550
right so here's the key bit from the

00:03:58,050 --> 00:04:02,550
actual multi arch package management

00:03:59,550 --> 00:04:05,400
specification which is what does the

00:04:02,550 --> 00:04:07,520
multi arch field mean and this seems to

00:04:05,400 --> 00:04:10,380
be a tricky bit for a lot of people

00:04:07,520 --> 00:04:12,990
because we didn't use your test start

00:04:10,380 --> 00:04:16,320
our naming scheme before we deployed it

00:04:12,990 --> 00:04:17,850
and yeah we should have it we should

00:04:16,320 --> 00:04:19,560
have had some focus groups involved in

00:04:17,850 --> 00:04:22,860
figuring out what the right names were

00:04:19,560 --> 00:04:25,610
so to try to clarify this in everybody's

00:04:22,860 --> 00:04:28,560
mind because it has been a big issue for

00:04:25,610 --> 00:04:32,010
understanding what exactly it means so

00:04:28,560 --> 00:04:36,450
multi arch : same means the package

00:04:32,010 --> 00:04:38,610
that's tagged multi our same is a multi

00:04:36,450 --> 00:04:40,980
arch package it's aware of this multi

00:04:38,610 --> 00:04:43,830
arch system and it satisfies the

00:04:40,980 --> 00:04:48,480
dependencies of a package of the same

00:04:43,830 --> 00:04:51,870
architecture multi arch : foreign means

00:04:48,480 --> 00:04:54,360
it's a multi hair2wear package that

00:04:51,870 --> 00:04:56,880
satisfies the dependencies of packages

00:04:54,360 --> 00:04:59,970
of foreign architectures as well as

00:04:56,880 --> 00:05:02,160
those of its own architecture which is

00:04:59,970 --> 00:05:04,440
kind of the reverse of how a lot of

00:05:02,160 --> 00:05:05,340
people try to think about this so if

00:05:04,440 --> 00:05:07,160
there's one thing you take away from

00:05:05,340 --> 00:05:09,960
here that that's that's kind of the big

00:05:07,160 --> 00:05:14,670
bug number one and in terms of how this

00:05:09,960 --> 00:05:16,350
has been doing okay I was asked to give

00:05:14,670 --> 00:05:21,630
an example and I'll go ahead and do that

00:05:16,350 --> 00:05:28,170
so your typical library package let's

00:05:21,630 --> 00:05:30,690
say Lib PNG so you create a package

00:05:28,170 --> 00:05:33,650
that's multi rich for Lib PNG and it has

00:05:30,690 --> 00:05:33,650
as its contents

00:05:39,759 --> 00:05:43,659
you've got your doctor rectory and then

00:05:41,830 --> 00:05:47,409
you've got files that have that are in

00:05:43,659 --> 00:05:51,309
Lib Triplett Lib PNG ESO dot such and

00:05:47,409 --> 00:05:52,990
such so it's a library package it's it's

00:05:51,309 --> 00:05:55,900
clearly been configured to do the multi

00:05:52,990 --> 00:05:57,580
arch thing in that it's files live

00:05:55,900 --> 00:06:00,189
somewhere that you can have a separate

00:05:57,580 --> 00:06:02,229
set of them for each architecture now

00:06:00,189 --> 00:06:05,110
the question is now you've got this

00:06:02,229 --> 00:06:07,270
package what what how what kind of

00:06:05,110 --> 00:06:09,189
dependencies what kind of things depend

00:06:07,270 --> 00:06:12,729
on this well the answer is things that

00:06:09,189 --> 00:06:14,949
are amd64 binaries that will link

00:06:12,729 --> 00:06:17,529
against this library or we'll deal open

00:06:14,949 --> 00:06:20,169
this binary or the dl open this library

00:06:17,529 --> 00:06:21,909
so anything that depends on Lib ping has

00:06:20,169 --> 00:06:24,159
to get the version of lib ping for the

00:06:21,909 --> 00:06:26,919
same architecture so that's what multi

00:06:24,159 --> 00:06:29,520
article insane means the converse would

00:06:26,919 --> 00:06:29,520
be something like

00:06:41,780 --> 00:06:46,729
larger is that good

00:06:46,790 --> 00:06:55,729
sorry okay all right

00:07:04,039 --> 00:07:09,589
yeah anyway so looking at things that

00:07:07,490 --> 00:07:11,990
are available on on the system here that

00:07:09,589 --> 00:07:16,749
are marked Multi arch foreign let me

00:07:11,990 --> 00:07:16,749
find a good example that we can look at

00:07:17,649 --> 00:07:24,279
our sink was that on the list okay so

00:07:25,689 --> 00:07:33,919
our sink it yeah it's been marked Multi

00:07:31,639 --> 00:07:35,210
arch foreign and why would that be so

00:07:33,919 --> 00:07:39,649
let's look at what the our sink package

00:07:35,210 --> 00:07:42,860
contains you've got user share dock some

00:07:39,649 --> 00:07:44,990
files in etc and the main interface that

00:07:42,860 --> 00:07:49,309
our sink provides to its reverse

00:07:44,990 --> 00:07:51,259
dependencies is an executable and an

00:07:49,309 --> 00:07:54,740
exact boundary is architecture neutral

00:07:51,259 --> 00:07:56,719
so when when you the the kinds of things

00:07:54,740 --> 00:07:58,159
that depend on our sink depend on it

00:07:56,719 --> 00:08:00,409
because they want to call the our sink

00:07:58,159 --> 00:08:04,039
program and it doesn't matter what

00:08:00,409 --> 00:08:06,050
architecture the our sink package is or

00:08:04,039 --> 00:08:07,580
what architecture the calling package is

00:08:06,050 --> 00:08:09,439
it just matters that there's something

00:08:07,580 --> 00:08:12,860
you can call so that's a multi arch

00:08:09,439 --> 00:08:14,659
foreign relationship where the thing

00:08:12,860 --> 00:08:18,110
calling doesn't care what architecture

00:08:14,659 --> 00:08:20,599
you give it on the system so this is

00:08:18,110 --> 00:08:22,580
important for instance if I think this

00:08:20,599 --> 00:08:24,620
one in particular has been marked as

00:08:22,580 --> 00:08:27,469
multi arch foreign on account of the

00:08:24,620 --> 00:08:31,430
Linux kernel source packages in Ubuntu

00:08:27,469 --> 00:08:34,159
at least build depend on our sink if you

00:08:31,430 --> 00:08:37,039
want to cross build the kernel you don't

00:08:34,159 --> 00:08:39,709
care about getting the arm hf version of

00:08:37,039 --> 00:08:41,389
our sink you care about getting whatever

00:08:39,709 --> 00:08:43,279
version of our sink is most conveniently

00:08:41,389 --> 00:08:45,139
you can run it so that's why you have

00:08:43,279 --> 00:08:47,060
multi r2 : foreign and so you can

00:08:45,139 --> 00:08:49,519
express that and so that the package

00:08:47,060 --> 00:08:51,829
manager can work out do I have a version

00:08:49,519 --> 00:08:54,290
of our sink available yes good let's go

00:08:51,829 --> 00:08:55,670
instead of trying to cross install the

00:08:54,290 --> 00:08:57,380
other version of our sink for a

00:08:55,670 --> 00:08:58,639
different architecture which then tries

00:08:57,380 --> 00:09:00,079
to remove the one you already have

00:08:58,639 --> 00:09:01,699
installed and then might try to remove

00:09:00,079 --> 00:09:03,649
other things that are dependent that are

00:09:01,699 --> 00:09:06,620
depending on that as well so so that's

00:09:03,649 --> 00:09:09,680
multi arch : foreign is is to say here's

00:09:06,620 --> 00:09:11,959
a thing that is architecture agnostic it

00:09:09,680 --> 00:09:14,000
has an architecture so it's not

00:09:11,959 --> 00:09:15,740
architecture : all which we're like

00:09:14,000 --> 00:09:17,170
there are no binary files in it and you

00:09:15,740 --> 00:09:20,139
install the exact same package

00:09:17,170 --> 00:09:22,899
all architectures it has an architecture

00:09:20,139 --> 00:09:24,820
as part of its nature but the interfaces

00:09:22,899 --> 00:09:28,050
it provides our architecture independent

00:09:24,820 --> 00:09:30,040
and because of that we don't care for

00:09:28,050 --> 00:09:32,200
dependency satisfaction which

00:09:30,040 --> 00:09:34,329
architecture we have installed we have a

00:09:32,200 --> 00:09:35,800
preference for which one we do install

00:09:34,329 --> 00:09:37,630
if there isn't one installed we will

00:09:35,800 --> 00:09:39,699
always try to pick the most sensible one

00:09:37,630 --> 00:09:41,290
the package manager will prefer whatever

00:09:39,699 --> 00:09:43,870
matches the native architecture if it

00:09:41,290 --> 00:09:46,149
can but for sort of set of satisfying

00:09:43,870 --> 00:09:51,070
dependency resolutions if I go in and do

00:09:46,149 --> 00:09:55,540
our sync apt-get install our sync : I

00:09:51,070 --> 00:09:59,709
three eight six this should work it

00:09:55,540 --> 00:10:01,750
might not let's see no so it has some

00:09:59,709 --> 00:10:03,550
dependencies where at whereas our sync

00:10:01,750 --> 00:10:06,279
has actually been declared multi rich :

00:10:03,550 --> 00:10:07,540
foreign it has some dependencies on

00:10:06,279 --> 00:10:09,070
other things that are not and so it

00:10:07,540 --> 00:10:11,860
can't actually be installed in this case

00:10:09,070 --> 00:10:13,690
but the the annotations are correct on

00:10:11,860 --> 00:10:15,250
our sink itself it's just additional

00:10:13,690 --> 00:10:16,600
packages have to be converted for multi

00:10:15,250 --> 00:10:17,980
arts before it's useful in the archive

00:10:16,600 --> 00:10:19,480
that is one nice thing about the way

00:10:17,980 --> 00:10:21,310
multi-touch has been specified is that

00:10:19,480 --> 00:10:23,829
you don't have to do the conversions in

00:10:21,310 --> 00:10:26,019
any particular order so the fact that

00:10:23,829 --> 00:10:28,360
this package the fact that our sync has

00:10:26,019 --> 00:10:30,310
been marked Multi arch : foreign is not

00:10:28,360 --> 00:10:34,180
a bug it doesn't he doesn't have to wait

00:10:30,310 --> 00:10:37,000
for base files to be also marked multi :

00:10:34,180 --> 00:10:38,500
foreign or whatever in order to be Cohen

00:10:37,000 --> 00:10:40,029
soluble and actually I don't know if

00:10:38,500 --> 00:10:41,740
that's the correct solution for base

00:10:40,029 --> 00:10:43,480
files I'll just say but it doesn't have

00:10:41,740 --> 00:10:46,440
to wait for multi notification of base

00:10:43,480 --> 00:10:51,790
files before you can mark our sync as

00:10:46,440 --> 00:10:53,589
multi arch : foreign you can do these in

00:10:51,790 --> 00:10:55,300
any order shove them in the archive it's

00:10:53,589 --> 00:10:57,519
massively parallel izybelle that's what

00:10:55,300 --> 00:11:00,069
we've done in Debian and in Ubuntu as

00:10:57,519 --> 00:11:02,829
far as converting libraries over it's

00:11:00,069 --> 00:11:05,140
right the patch push the patch to the

00:11:02,829 --> 00:11:06,519
BTS when the maintainer gets around to

00:11:05,140 --> 00:11:07,839
uploading it and we've got a critical

00:11:06,519 --> 00:11:09,610
mass of them then suddenly things just

00:11:07,839 --> 00:11:10,779
pop and start working and that's kind of

00:11:09,610 --> 00:11:13,569
what's what's happened over the past

00:11:10,779 --> 00:11:16,899
year where IA 32 libs i let's see i

00:11:13,569 --> 00:11:21,160
think we did a a multi arch library

00:11:16,899 --> 00:11:22,569
sprint for debian back in december and

00:11:21,160 --> 00:11:26,350
basically pushed all the patches at the

00:11:22,569 --> 00:11:29,110
BTS and then I went away and did other

00:11:26,350 --> 00:11:30,819
things for six months and then I'd see

00:11:29,110 --> 00:11:33,009
popping up in June the discussion

00:11:30,819 --> 00:11:35,249
about how I 32 lives is ready to go away

00:11:33,009 --> 00:11:39,879
how like okay that was easy

00:11:35,249 --> 00:11:41,709
so it's alright even though I in this

00:11:39,879 --> 00:11:44,470
case I can't install the foreign version

00:11:41,709 --> 00:11:47,109
of our sink in place of the the native

00:11:44,470 --> 00:11:49,629
one nevertheless if I were to tried to

00:11:47,109 --> 00:11:52,209
do a cross build of something that that

00:11:49,629 --> 00:11:53,709
that uses our sink like if I tried to

00:11:52,209 --> 00:11:55,809
cross build block kernel package and it

00:11:53,709 --> 00:11:57,369
needed our sink this would be sufficient

00:11:55,809 --> 00:12:02,319
to make it do the right thing or if I

00:11:57,369 --> 00:12:07,209
have other things that depend on our

00:12:02,319 --> 00:12:08,799
sink I don't know if there's any good

00:12:07,209 --> 00:12:14,679
choices in here I could try to install

00:12:08,799 --> 00:12:20,339
the foreign version of K splice let's

00:12:14,679 --> 00:12:20,339
say what that does oh that didn't work

00:12:21,689 --> 00:12:24,689
dervish

00:12:36,769 --> 00:12:39,459
hmm

00:12:40,800 --> 00:12:45,249
our mhf is in the configuration as a

00:12:43,839 --> 00:12:47,829
foreign architecture on the system so I

00:12:45,249 --> 00:12:49,509
don't know why exactly I don't know

00:12:47,829 --> 00:12:51,610
maybe maybe maybe I keep finding

00:12:49,509 --> 00:12:52,720
packages that are just architecture all

00:12:51,610 --> 00:12:54,089
and that's why it's failing on me

00:12:52,720 --> 00:12:56,559
because they don't actually exist in

00:12:54,089 --> 00:12:59,679
Apps view of the world as being foreign

00:12:56,559 --> 00:13:01,480
packages so anyway that is not a great

00:12:59,679 --> 00:13:03,839
example with respect to that but in

00:13:01,480 --> 00:13:06,730
theory if you had something that was a

00:13:03,839 --> 00:13:09,819
an i3 d6 only piece of software that

00:13:06,730 --> 00:13:10,869
depended on our sink the our sink

00:13:09,819 --> 00:13:13,959
package is all ready to go

00:13:10,869 --> 00:13:17,139
where you can install your i386 binary

00:13:13,959 --> 00:13:18,639
on any system and the native version of

00:13:17,139 --> 00:13:20,709
our sink will satisfy the dependency

00:13:18,639 --> 00:13:22,779
which is usually the way we want to look

00:13:20,709 --> 00:13:25,389
at what multi are calling foreign is for

00:13:22,779 --> 00:13:27,489
more often than not in the vast majority

00:13:25,389 --> 00:13:29,350
of cases a multi are : foreign package

00:13:27,489 --> 00:13:30,730
is the one package on your system you

00:13:29,350 --> 00:13:32,439
will never install the foreign version

00:13:30,730 --> 00:13:34,509
up because it's the one that's

00:13:32,439 --> 00:13:36,670
satisfying the foreign dependencies of

00:13:34,509 --> 00:13:39,489
the other packages that you that are

00:13:36,670 --> 00:13:41,350
interesting to cross install and you

00:13:39,489 --> 00:13:43,689
generally want only the native version

00:13:41,350 --> 00:13:47,079
and that's how you say this one is the

00:13:43,689 --> 00:13:48,100
only one I need and you don't have to

00:13:47,079 --> 00:13:50,649
worry about trying to get the other

00:13:48,100 --> 00:13:52,929
version of it on the system so a multi

00:13:50,649 --> 00:13:55,749
article in same package is one that's Co

00:13:52,929 --> 00:13:57,339
installable because all of the files are

00:13:55,749 --> 00:13:59,410
split into different directories and

00:13:57,339 --> 00:14:00,879
they install alongside each other on the

00:13:59,410 --> 00:14:04,329
file system whereas a multi article in

00:14:00,879 --> 00:14:05,589
foreign package he's not Co install well

00:14:04,329 --> 00:14:08,079
you can only ever have one of those

00:14:05,589 --> 00:14:09,759
installed on time but multi are :

00:14:08,079 --> 00:14:12,459
foreign says whichever one you have

00:14:09,759 --> 00:14:14,619
installed does the job and so that's in

00:14:12,459 --> 00:14:16,119
a nutshell that's what not a very small

00:14:14,619 --> 00:14:19,119
nutshell it's kind of a coconut shell

00:14:16,119 --> 00:14:20,920
the that's what a multi arch field means

00:14:19,119 --> 00:14:23,559
and then we also have this multi article

00:14:20,920 --> 00:14:24,970
and a loud thing which by and large I'm

00:14:23,559 --> 00:14:25,959
just going to ignore here on account of

00:14:24,970 --> 00:14:27,129
the fact that the Debian archive

00:14:25,959 --> 00:14:28,629
actually doesn't let you do anything

00:14:27,129 --> 00:14:31,959
useful with it yet today although it's

00:14:28,629 --> 00:14:33,669
specified we've got some changes that

00:14:31,959 --> 00:14:36,189
have to be made on the build ease before

00:14:33,669 --> 00:14:38,169
you can do anything really interesting

00:14:36,189 --> 00:14:40,809
with that so effectively today multi

00:14:38,169 --> 00:14:42,339
arch : allowed is treated the same as if

00:14:40,809 --> 00:14:45,459
you didn't have the multi arch field at

00:14:42,339 --> 00:14:48,100
all because the packages that would make

00:14:45,459 --> 00:14:50,410
use of this have to change the syntax of

00:14:48,100 --> 00:14:52,089
their dependencies and that's where

00:14:50,410 --> 00:14:52,570
things get hung up because you have to

00:14:52,089 --> 00:14:57,120
have a dish

00:14:52,570 --> 00:14:58,950
we'll support in the package manager' so

00:14:57,120 --> 00:15:01,000
so how do you actually go about

00:14:58,950 --> 00:15:02,740
converting a package for multi arch well

00:15:01,000 --> 00:15:04,120
mostly the most of the time the the the

00:15:02,740 --> 00:15:06,040
interesting case where we would look at

00:15:04,120 --> 00:15:07,900
this is for a library and so that's why

00:15:06,040 --> 00:15:09,280
we have some documentation that's been

00:15:07,900 --> 00:15:11,530
written up about how we do this for

00:15:09,280 --> 00:15:12,700
libraries if you're not doing if it's if

00:15:11,530 --> 00:15:14,860
it's not a library that you're working

00:15:12,700 --> 00:15:16,480
with if if your package is an executable

00:15:14,860 --> 00:15:19,480
the process for converting it from multi

00:15:16,480 --> 00:15:21,400
arch is looking at it saying do I

00:15:19,480 --> 00:15:23,650
provide any any interfaces that are

00:15:21,400 --> 00:15:25,150
architecture specific or can anything

00:15:23,650 --> 00:15:27,250
call my program if the answer is

00:15:25,150 --> 00:15:28,960
anything you can call my program well

00:15:27,250 --> 00:15:30,370
then you ask does it have any reverse

00:15:28,960 --> 00:15:32,530
dependencies and is it actually

00:15:30,370 --> 00:15:33,700
interesting for something of a foreign

00:15:32,530 --> 00:15:35,080
architecture to call it and if the

00:15:33,700 --> 00:15:38,440
answer to that is yes you just put in

00:15:35,080 --> 00:15:43,650
the multi - arch : foreign field in the

00:15:38,440 --> 00:15:48,310
binary package stanza of that of that

00:15:43,650 --> 00:15:52,060
package for instance here's one example

00:15:48,310 --> 00:15:54,910
from from Pam the Pam source package we

00:15:52,060 --> 00:15:56,110
have a helper package which actually was

00:15:54,910 --> 00:15:58,090
split out specifically to accommodate

00:15:56,110 --> 00:16:01,270
multi arch which I can get into in a

00:15:58,090 --> 00:16:03,970
little bit perhaps but the the binary

00:16:01,270 --> 00:16:05,700
package it's a - bin package implying

00:16:03,970 --> 00:16:08,710
that the interfaces it provides are

00:16:05,700 --> 00:16:10,540
executables and it's tagged multi-edge :

00:16:08,710 --> 00:16:12,010
foreign and this little bit here is

00:16:10,540 --> 00:16:13,780
actually the only thing that that

00:16:12,010 --> 00:16:15,610
package requires in order to do its job

00:16:13,780 --> 00:16:17,860
in the multi arch world the more

00:16:15,610 --> 00:16:23,830
complicated part of things is when

00:16:17,860 --> 00:16:25,150
you're looking at libraries and that's

00:16:23,830 --> 00:16:27,460
why we have this wiki page which I

00:16:25,150 --> 00:16:29,560
hardly encourage people to bookmark or

00:16:27,460 --> 00:16:30,820
whatever people do in place of bookmarks

00:16:29,560 --> 00:16:34,500
now that browsers have made those

00:16:30,820 --> 00:16:37,780
obsolete wiki that divvy that org slash

00:16:34,500 --> 00:16:39,640
Multi arch slash implementation this

00:16:37,780 --> 00:16:40,810
page gives you what should be everything

00:16:39,640 --> 00:16:42,520
you need to know about actually

00:16:40,810 --> 00:16:47,140
converting a library package for multi

00:16:42,520 --> 00:16:52,510
arch and the easiest way to do that by

00:16:47,140 --> 00:16:55,600
far is to use debhelper dh1 with compat

00:16:52,510 --> 00:16:58,210
level 9 because that will basically do

00:16:55,600 --> 00:17:05,310
all the work for you and the only thing

00:16:58,210 --> 00:17:05,310
you need to do is let me find it

00:17:08,449 --> 00:17:11,610
this page is longer than I remembered

00:17:10,589 --> 00:17:17,579
maybe it's because of the font is so

00:17:11,610 --> 00:17:19,290
much bigger right so this is what it

00:17:17,579 --> 00:17:22,500
takes to convert a package to multi arch

00:17:19,290 --> 00:17:24,209
using dh1 you have to bump your build

00:17:22,500 --> 00:17:27,030
dependency for the come for the higher

00:17:24,209 --> 00:17:29,549
compat level there's this particular pre

00:17:27,030 --> 00:17:32,640
dependency that you have to add which is

00:17:29,549 --> 00:17:36,030
relevant specifically for arcane reasons

00:17:32,640 --> 00:17:39,870
of us only having partial support for

00:17:36,030 --> 00:17:42,240
multi arch in the squeeze version of Lib

00:17:39,870 --> 00:17:44,370
C due to some late changes in in how we

00:17:42,240 --> 00:17:47,490
decided we were actually specifying

00:17:44,370 --> 00:17:50,669
multi arch on some architectures so this

00:17:47,490 --> 00:17:52,710
is basically there to enforce that when

00:17:50,669 --> 00:17:54,410
you're doing an upgrade and your

00:17:52,710 --> 00:17:57,570
libraries are moving all over the place

00:17:54,410 --> 00:17:59,460
you make sure that LDS ou can find them

00:17:57,570 --> 00:18:01,530
before you start moving them because

00:17:59,460 --> 00:18:03,809
otherwise things like apt which use

00:18:01,530 --> 00:18:07,679
libraries might notice and have a

00:18:03,809 --> 00:18:11,100
problem or your shell or whatever it

00:18:07,679 --> 00:18:12,330
might be so yeah so that's that's the

00:18:11,100 --> 00:18:14,150
other things you do have to add this

00:18:12,330 --> 00:18:17,010
additional field of pre depends which

00:18:14,150 --> 00:18:21,030
becomes less important after after

00:18:17,010 --> 00:18:22,650
Weezie releases because then it it

00:18:21,030 --> 00:18:24,960
resolves to a dependency that will

00:18:22,650 --> 00:18:27,179
always be satisfied by the the weazy

00:18:24,960 --> 00:18:31,080
versions of the packages so that's an

00:18:27,179 --> 00:18:34,549
upgrade handling thing there you say the

00:18:31,080 --> 00:18:36,570
Debian slash compat should be nine and

00:18:34,549 --> 00:18:39,179
provided you're using a build system

00:18:36,570 --> 00:18:41,700
that has standard ways of specifying

00:18:39,179 --> 00:18:43,799
paths then debthelper can do all the

00:18:41,700 --> 00:18:45,660
work for you and figure out ah we're

00:18:43,799 --> 00:18:47,780
compatible nine let's put the libraries

00:18:45,660 --> 00:18:50,040
in the multi arch directory for you

00:18:47,780 --> 00:18:51,540
currently I think the only build system

00:18:50,040 --> 00:18:55,679
that we have a reliable way to do that

00:18:51,540 --> 00:18:57,510
for is Auto tools I'm just gonna scroll

00:18:55,679 --> 00:19:02,070
here quickly through and yeah I think

00:18:57,510 --> 00:19:03,450
that's the only one that we have now if

00:19:02,070 --> 00:19:05,460
somebody knows of a standard way to do

00:19:03,450 --> 00:19:06,660
this with for instance see make it would

00:19:05,460 --> 00:19:09,150
be great for somebody to update the

00:19:06,660 --> 00:19:11,480
documentation we actually had a it just

00:19:09,150 --> 00:19:11,480
works

00:19:14,490 --> 00:19:19,840
so it just works so the the the

00:19:17,920 --> 00:19:24,130
troubling thing about that is that I

00:19:19,840 --> 00:19:25,810
think I think this see make I think that

00:19:24,130 --> 00:19:27,460
implies that see make up stream has

00:19:25,810 --> 00:19:30,010
perhaps encoded some platform-specific

00:19:27,460 --> 00:19:31,480
knowledge and make making some platform

00:19:30,010 --> 00:19:32,890
platform specific guesses about what

00:19:31,480 --> 00:19:35,140
where to install things and that's

00:19:32,890 --> 00:19:36,730
that's the or that we have Debian

00:19:35,140 --> 00:19:39,580
specific patches to do that I think

00:19:36,730 --> 00:19:41,470
right so it's it's relying it's using

00:19:39,580 --> 00:19:43,420
the CP well when you when you use C make

00:19:41,470 --> 00:19:45,160
the build system logic is encoded in the

00:19:43,420 --> 00:19:46,930
C make package which is installed as a

00:19:45,160 --> 00:19:50,170
bill dependency and it has the patches

00:19:46,930 --> 00:19:53,890
that say put everything over there the

00:19:50,170 --> 00:19:57,010
reason we specifically didn't didn't

00:19:53,890 --> 00:19:59,350
cause that to turn on for debhelper and

00:19:57,010 --> 00:20:01,270
have debhelper automatically put things

00:19:59,350 --> 00:20:06,730
in without you bumping the compat level

00:20:01,270 --> 00:20:08,050
was that it breaks first of all you have

00:20:06,730 --> 00:20:10,510
to add that pre dependency field which

00:20:08,050 --> 00:20:12,340
is a manual operation and secondly all

00:20:10,510 --> 00:20:14,350
of your dot install files break because

00:20:12,340 --> 00:20:16,570
suddenly all the files not only have

00:20:14,350 --> 00:20:18,010
moved around but have moved a tree level

00:20:16,570 --> 00:20:19,660
deeper so all even if you're using

00:20:18,010 --> 00:20:22,930
globbing you're glopping is gonna fail

00:20:19,660 --> 00:20:25,810
so in fact i think in this wiki page we

00:20:22,930 --> 00:20:28,800
specifically say something something

00:20:25,810 --> 00:20:30,910
about why it's not automatic anyway

00:20:28,800 --> 00:20:32,860
detailed rationale is given in the wiki

00:20:30,910 --> 00:20:34,540
page but so basically the I look at that

00:20:32,860 --> 00:20:36,040
and said no we shouldn't have this

00:20:34,540 --> 00:20:37,810
suddenly happen out from underneath the

00:20:36,040 --> 00:20:39,040
maintainer and just have it happen the

00:20:37,810 --> 00:20:40,450
next time the package is built because

00:20:39,040 --> 00:20:42,730
there's there are these other things you

00:20:40,450 --> 00:20:47,080
are always going to have to touch so at

00:20:42,730 --> 00:20:50,770
least for for Auto Kampf what we do is

00:20:47,080 --> 00:20:53,170
with compat level 9 it passes the - -

00:20:50,770 --> 00:20:54,640
lib dere option which says this is the

00:20:53,170 --> 00:20:57,700
library directory for the architecture

00:20:54,640 --> 00:20:59,410
you're building for and of course it has

00:20:57,700 --> 00:21:02,290
you know debhelper

00:20:59,410 --> 00:21:03,970
is is great about like encapsulating all

00:21:02,290 --> 00:21:06,070
that and you can override it as needed

00:21:03,970 --> 00:21:08,410
and actually i will show you a package

00:21:06,070 --> 00:21:10,360
example where there are some deviations

00:21:08,410 --> 00:21:12,520
from the default and what that looks

00:21:10,360 --> 00:21:13,870
like in debthelper and it looks it's

00:21:12,520 --> 00:21:17,110
still simple like anything else you

00:21:13,870 --> 00:21:20,680
would do with debhelper one with the h1

00:21:17,110 --> 00:21:22,300
with small overrides or whatever so

00:21:20,680 --> 00:21:23,680
you've you've bumped debhelper you've

00:21:22,300 --> 00:21:24,580
told it combat level 9 that's why you

00:21:23,680 --> 00:21:27,850
have to do this next

00:21:24,580 --> 00:21:29,350
of your dot install files if it says use

00:21:27,850 --> 00:21:35,260
your lib currently it's gonna have to be

00:21:29,350 --> 00:21:36,610
changed and if you are doing anything

00:21:35,260 --> 00:21:39,460
special other than just listing the

00:21:36,610 --> 00:21:41,860
files if you have to indicate a target

00:21:39,460 --> 00:21:43,270
of of something to Deb helper whether

00:21:41,860 --> 00:21:45,370
that's a target of a symlink

00:21:43,270 --> 00:21:49,900
or a target of a directory creation or a

00:21:45,370 --> 00:21:50,890
target of install you have to figure out

00:21:49,900 --> 00:21:51,910
how to substitute the actual

00:21:50,890 --> 00:21:54,130
architecture name it because obviously

00:21:51,910 --> 00:21:58,080
you can't use a glob as a target of a

00:21:54,130 --> 00:22:03,100
symlink or a target for installation so

00:21:58,080 --> 00:22:06,700
the way this was done is the recommended

00:22:03,100 --> 00:22:09,250
way is to use D H exec which is with

00:22:06,700 --> 00:22:11,260
dead with compat level 9 your dot

00:22:09,250 --> 00:22:13,860
install file becomes a script that gets

00:22:11,260 --> 00:22:16,800
run and you can build depend on D H exec

00:22:13,860 --> 00:22:18,760
and D H exec knows how to pull out

00:22:16,800 --> 00:22:20,170
various common substitutions

00:22:18,760 --> 00:22:22,570
automatically for you so with no

00:22:20,170 --> 00:22:26,890
additional effort you do something like

00:22:22,570 --> 00:22:28,870
this and this is actually it doesn't

00:22:26,890 --> 00:22:30,340
show well here because of the the font

00:22:28,870 --> 00:22:32,470
size but this is actually a single line

00:22:30,340 --> 00:22:34,330
where you're you're saying take the

00:22:32,470 --> 00:22:36,880
files that upstream installed into user

00:22:34,330 --> 00:22:38,170
Lib directory such-and-such and install

00:22:36,880 --> 00:22:39,880
them to this target directory which has

00:22:38,170 --> 00:22:49,920
the architecture name in it so that's

00:22:39,880 --> 00:22:49,920
that's how that's useful okay

00:22:51,210 --> 00:22:54,820
yeah and as it says you don't even have

00:22:53,470 --> 00:22:57,850
to do anything special in Debian rules

00:22:54,820 --> 00:22:59,200
because d-h exec knows how to extract

00:22:57,850 --> 00:23:09,970
that information from the environment

00:22:59,200 --> 00:23:12,160
for you as needed so once you're taking

00:23:09,970 --> 00:23:13,840
care of your install files the next

00:23:12,160 --> 00:23:15,340
thing you do is make sure that anything

00:23:13,840 --> 00:23:17,470
that you're telling the build system

00:23:15,340 --> 00:23:20,080
about through Debian rules that you go

00:23:17,470 --> 00:23:22,870
through and scrub user lib and replace

00:23:20,080 --> 00:23:25,270
it with the architecture string in

00:23:22,870 --> 00:23:27,430
practice most builds will automatically

00:23:25,270 --> 00:23:28,690
get this this variable from the

00:23:27,430 --> 00:23:31,030
environment already without any

00:23:28,690 --> 00:23:32,980
additional effort however policy does

00:23:31,030 --> 00:23:34,660
say that you're not promised to have

00:23:32,980 --> 00:23:37,450
that set because if you call Debian

00:23:34,660 --> 00:23:38,890
slash rules directly as a as a script

00:23:37,450 --> 00:23:43,150
you don't get this in the environment

00:23:38,890 --> 00:23:46,230
which means that that's why seven

00:23:43,150 --> 00:23:48,730
applies if you if you had to actually

00:23:46,230 --> 00:23:51,010
set that environment variable there then

00:23:48,730 --> 00:23:52,090
you should also or you reference that

00:23:51,010 --> 00:23:55,750
environment variable you should actually

00:23:52,090 --> 00:24:04,240
make sure you've set it somehow by by

00:23:55,750 --> 00:24:07,270
doing this a little bit there so so yes

00:24:04,240 --> 00:24:10,780
so latest D package or about three

00:24:07,270 --> 00:24:12,820
versions ago has a include architecture

00:24:10,780 --> 00:24:15,400
MOOC which sets all those variables

00:24:12,820 --> 00:24:18,190
maybe we should just say put this line

00:24:15,400 --> 00:24:20,710
in I hate make file includes as an

00:24:18,190 --> 00:24:22,060
interface because they're mysterious and

00:24:20,710 --> 00:24:23,970
you wonder what the hell it did yes

00:24:22,060 --> 00:24:26,050
because there's no there's no

00:24:23,970 --> 00:24:28,090
encapsulation boundary about anything it

00:24:26,050 --> 00:24:30,880
does and and they're very it's it's very

00:24:28,090 --> 00:24:33,520
easy to break them so I I know that's

00:24:30,880 --> 00:24:35,200
buck C's position that Rafael says yes

00:24:33,520 --> 00:24:41,980
here's a here's a make file snippet just

00:24:35,200 --> 00:24:43,360
include this I abhor that and yeah but

00:24:41,980 --> 00:24:48,400
yes you're free to do so whether you're

00:24:43,360 --> 00:24:50,410
packages so yeah once you've gotten to

00:24:48,400 --> 00:24:54,370
step seven there and done all that I

00:24:50,410 --> 00:24:56,440
mean step eight is you just set the

00:24:54,370 --> 00:24:59,950
multi article in the same field and

00:24:56,440 --> 00:25:01,030
that's about it actually step nine is is

00:24:59,950 --> 00:25:02,540
kind of interesting we talked a little

00:25:01,030 --> 00:25:06,650
bit of multipliers for

00:25:02,540 --> 00:25:11,560
before there's a strange little question

00:25:06,650 --> 00:25:13,730
of backwards-compatibility where because

00:25:11,560 --> 00:25:18,260
because we want the behavior of the

00:25:13,730 --> 00:25:20,270
package manager to not go haywire with

00:25:18,260 --> 00:25:24,860
existing packages that are in the

00:25:20,270 --> 00:25:26,720
archive a multi arch : all package even

00:25:24,860 --> 00:25:29,060
though it says it right in the name that

00:25:26,720 --> 00:25:31,490
it's : all if you actually want to use

00:25:29,060 --> 00:25:33,380
that as a dependency of a foreign

00:25:31,490 --> 00:25:35,480
package that you're installing you have

00:25:33,380 --> 00:25:39,860
to explicitly say that's multi arch :

00:25:35,480 --> 00:25:43,280
foreign the reason for this specifically

00:25:39,860 --> 00:25:47,630
has to do with certain packages which

00:25:43,280 --> 00:25:51,950
are multi Harwich : all meta packages or

00:25:47,630 --> 00:25:54,470
or defaults packages in fact it's

00:25:51,950 --> 00:25:56,590
probably a good term for them so suppose

00:25:54,470 --> 00:25:59,360
you are depending on the package Python

00:25:56,590 --> 00:26:03,110
which happens to be an architecture :

00:25:59,360 --> 00:26:05,420
all packaged however what that actually

00:26:03,110 --> 00:26:07,340
is is it's it's an architecture all

00:26:05,420 --> 00:26:10,220
package which is masking a dependency on

00:26:07,340 --> 00:26:11,660
the current model to the current

00:26:10,220 --> 00:26:14,180
architecture any package that you

00:26:11,660 --> 00:26:16,160
actually are depending on so if you are

00:26:14,180 --> 00:26:17,990
up here and you're depending on the

00:26:16,160 --> 00:26:19,430
you're depending on Python because

00:26:17,990 --> 00:26:21,230
that's what we say is you don't you

00:26:19,430 --> 00:26:23,810
don't over specify your version that you

00:26:21,230 --> 00:26:25,400
want you just say I depend on Python but

00:26:23,810 --> 00:26:27,650
the Python package doesn't just provide

00:26:25,400 --> 00:26:31,610
the interpreter user bin Python it also

00:26:27,650 --> 00:26:32,780
provides some library interfaces and if

00:26:31,610 --> 00:26:34,370
you're doing something with the Python

00:26:32,780 --> 00:26:36,370
package and you're depending on it and

00:26:34,370 --> 00:26:40,160
you actually want the library interfaces

00:26:36,370 --> 00:26:42,740
it's not sufficient to just say yeah

00:26:40,160 --> 00:26:44,570
that any architecture all package

00:26:42,740 --> 00:26:46,580
satisfies the dependencies because you

00:26:44,570 --> 00:26:49,310
can kind of get yourself messed up on

00:26:46,580 --> 00:26:50,690
the system on an upgrade where if the

00:26:49,310 --> 00:26:52,730
right set of packages happen to not be

00:26:50,690 --> 00:26:54,940
available to you at the right time or

00:26:52,730 --> 00:26:57,470
you do something and extraordinarily

00:26:54,940 --> 00:27:00,740
convoluted with an applicant install

00:26:57,470 --> 00:27:02,630
manual install and not all the right

00:27:00,740 --> 00:27:06,410
packages have the multi arch bit set you

00:27:02,630 --> 00:27:09,140
can wind up trying to swap out your

00:27:06,410 --> 00:27:10,730
Python for the wrong one or say yes this

00:27:09,140 --> 00:27:14,660
Python satisfies dependencies when it

00:27:10,730 --> 00:27:15,820
doesn't so because of that issue the sad

00:27:14,660 --> 00:27:19,810
fact is that

00:27:15,820 --> 00:27:22,450
80% of the the architecture all packages

00:27:19,810 --> 00:27:25,540
in the archive would need to be tagged

00:27:22,450 --> 00:27:27,850
multi arts : foreign because their

00:27:25,540 --> 00:27:29,620
interfaces are architecture independent

00:27:27,850 --> 00:27:31,360
but we have no way to tell apart the

00:27:29,620 --> 00:27:33,430
ones that are loans that aren't so in

00:27:31,360 --> 00:27:35,140
order to not break things on upgrade and

00:27:33,430 --> 00:27:36,640
change the semantics in a way that's

00:27:35,140 --> 00:27:38,530
incompatible with the packages we

00:27:36,640 --> 00:27:41,560
already have you have to do this extra

00:27:38,530 --> 00:27:44,680
step so for instance if you have a Lib

00:27:41,560 --> 00:27:47,410
foo - common package its architecture

00:27:44,680 --> 00:27:49,150
all you still need the market as multi

00:27:47,410 --> 00:27:50,350
arch : foreign so that the package

00:27:49,150 --> 00:27:52,540
manager can look at that and say yeah

00:27:50,350 --> 00:27:55,540
okay you've you've looked at it you've

00:27:52,540 --> 00:27:57,040
made sure it's actually safe and we will

00:27:55,540 --> 00:27:58,900
use that to satisfy the dependency of

00:27:57,040 --> 00:28:04,810
each runtime version of the library that

00:27:58,900 --> 00:28:07,780
depends on it so I mean and this this

00:28:04,810 --> 00:28:09,400
wiki page covers other other scenarios

00:28:07,780 --> 00:28:11,890
there's a actually I'll scroll up to the

00:28:09,400 --> 00:28:13,660
index of them there's instructions for

00:28:11,890 --> 00:28:17,610
how to do CD BS with auto tools and

00:28:13,660 --> 00:28:20,830
debthelper step 1 converted to da chuan

00:28:17,610 --> 00:28:23,950
classic Deb helper which with not using

00:28:20,830 --> 00:28:26,800
dh1 or CD BS with auto tools auto tools

00:28:23,950 --> 00:28:28,120
with no helper at all seem a apparently

00:28:26,800 --> 00:28:30,550
doesn't need a section because it's all

00:28:28,120 --> 00:28:33,730
automatic anyway I don't know this is

00:28:30,550 --> 00:28:35,140
it's a wiki page please help extend it

00:28:33,730 --> 00:28:38,050
if you have other build systems that

00:28:35,140 --> 00:28:39,700
have sort of standard ways to do this

00:28:38,050 --> 00:28:42,430
sort of thing I'd love to have more

00:28:39,700 --> 00:28:44,950
documentation a lot of the people that

00:28:42,430 --> 00:28:46,540
were working on multi arch were most

00:28:44,950 --> 00:28:49,900
familiar with Auto Tools as a build

00:28:46,540 --> 00:28:51,610
system and some of the that allowed a

00:28:49,900 --> 00:28:54,700
certain amount of bias to creep in in

00:28:51,610 --> 00:28:58,570
the implementation plan in the sense

00:28:54,700 --> 00:29:00,400
that we kind of forgot there were things

00:28:58,570 --> 00:29:02,500
that weren't Auto tools that don't do as

00:29:00,400 --> 00:29:04,240
good of a job of doing build time

00:29:02,500 --> 00:29:05,950
detection of environments and then we

00:29:04,240 --> 00:29:07,270
discovered that oh oh yeah we actually

00:29:05,950 --> 00:29:09,130
have a whole lot of other build systems

00:29:07,270 --> 00:29:11,050
we have to go out there and patch to

00:29:09,130 --> 00:29:13,570
find the libraries that we moved because

00:29:11,050 --> 00:29:15,970
we thought it would use the the link the

00:29:13,570 --> 00:29:17,440
the the compilers path to actually

00:29:15,970 --> 00:29:19,840
figure out where the libraries are and

00:29:17,440 --> 00:29:21,520
it wasn't doing that so things that one

00:29:19,840 --> 00:29:23,080
of the consequences of converting a

00:29:21,520 --> 00:29:25,650
library to multi arch that that was

00:29:23,080 --> 00:29:28,030
surprising to us at the time was that

00:29:25,650 --> 00:29:29,200
suddenly you have things like the PHP

00:29:28,030 --> 00:29:31,540
build system

00:29:29,200 --> 00:29:35,230
which walk the filesystem looking for

00:29:31,540 --> 00:29:36,940
the library you specified you could have

00:29:35,230 --> 00:29:40,830
just asked the compiler it was there and

00:29:36,940 --> 00:29:43,750
it would have told you but so be it

00:29:40,830 --> 00:29:45,460
and it PHP not to pick on PHP

00:29:43,750 --> 00:29:47,110
specifically it's just one example I

00:29:45,460 --> 00:29:50,020
think we had some issues with the Python

00:29:47,110 --> 00:29:51,490
build system as well and I those are two

00:29:50,020 --> 00:29:52,930
examples that come to mind but there

00:29:51,490 --> 00:29:54,580
there were a number of others where

00:29:52,930 --> 00:29:55,750
where we find ourselves playing a little

00:29:54,580 --> 00:29:57,160
bit of whack-a-mole where every time we

00:29:55,750 --> 00:29:58,780
moved a library we found a few more

00:29:57,160 --> 00:30:00,220
reverse dependencies that would stop

00:29:58,780 --> 00:30:02,470
building because they couldn't find the

00:30:00,220 --> 00:30:06,850
library now so that is one thing to be

00:30:02,470 --> 00:30:08,050
aware of so it does mean that if there

00:30:06,850 --> 00:30:09,490
are any members of the release team

00:30:08,050 --> 00:30:13,450
listening we should probably be careful

00:30:09,490 --> 00:30:17,320
about doing further library multi r2

00:30:13,450 --> 00:30:19,330
conversions in in in Weezie without

00:30:17,320 --> 00:30:21,370
making sure that things still build

00:30:19,330 --> 00:30:22,870
afterwards and that they build and that

00:30:21,370 --> 00:30:27,340
they don't miss build so it's something

00:30:22,870 --> 00:30:31,830
to be careful about okay so real

00:30:27,340 --> 00:30:31,830
examples of what things look like here I

00:30:33,210 --> 00:30:40,860
happen to maintain a couple of library

00:30:35,350 --> 00:30:43,150
packages myself freetype is one of them

00:30:40,860 --> 00:30:44,650
and here's the here's the Debian rules

00:30:43,150 --> 00:30:50,440
for that now we need to go up a couple

00:30:44,650 --> 00:30:52,600
of sizes still so this is the Debian

00:30:50,440 --> 00:30:55,840
rules for free type you see that we are

00:30:52,600 --> 00:30:57,520
explicitly setting deb host multi arch

00:30:55,840 --> 00:30:59,380
as well as Deb host arch which I don't

00:30:57,520 --> 00:31:02,770
recall why that is there but I guess we

00:30:59,380 --> 00:31:05,380
will see as we scroll down other stuff

00:31:02,770 --> 00:31:08,620
that's not related here to multi arch

00:31:05,380 --> 00:31:11,080
we're doing some different see flags and

00:31:08,620 --> 00:31:14,050
whatnot using using the great D package

00:31:11,080 --> 00:31:17,020
build Flags interface there some stuff

00:31:14,050 --> 00:31:18,610
about symbol checking crazy stuff we

00:31:17,020 --> 00:31:22,600
don't actually like to look at it

00:31:18,610 --> 00:31:25,570
because it's reminds us of bad times and

00:31:22,600 --> 00:31:28,480
then we here we have the the dh1 global

00:31:25,570 --> 00:31:31,180
global rule here which just calls D H

00:31:28,480 --> 00:31:32,890
with all arguments let's see exactly why

00:31:31,180 --> 00:31:34,930
we do have D and F post multi are being

00:31:32,890 --> 00:31:36,790
set aha

00:31:34,930 --> 00:31:39,220
so here's here's an interesting sort of

00:31:36,790 --> 00:31:41,920
thing that's going on here it's being

00:31:39,220 --> 00:31:42,790
referenced in D H auto-install we have

00:31:41,920 --> 00:31:45,370
an override role

00:31:42,790 --> 00:31:47,890
for d.h auto-install so the everything

00:31:45,370 --> 00:31:49,330
else is actually pretty much done itself

00:31:47,890 --> 00:31:50,880
doesn't work for us but we happen to

00:31:49,330 --> 00:31:53,860
have a special case here where we are

00:31:50,880 --> 00:31:56,920
stripping the dependency lives field out

00:31:53,860 --> 00:31:59,140
of Lib free type tot la which probably

00:31:56,920 --> 00:32:01,840
can go away now because the the dot la

00:31:59,140 --> 00:32:03,670
transition is fairly far along actually

00:32:01,840 --> 00:32:04,990
in this case I could have used a glob

00:32:03,670 --> 00:32:08,050
instead and it would have worked just as

00:32:04,990 --> 00:32:10,960
well but that's the only reason that

00:32:08,050 --> 00:32:12,460
this particular one cares about multi

00:32:10,960 --> 00:32:16,120
arch yeah that's the last occurrence in

00:32:12,460 --> 00:32:22,150
the in the file so the the the general

00:32:16,120 --> 00:32:26,260
bits are really just this right here so

00:32:22,150 --> 00:32:30,490
because we're using Debian comp at level

00:32:26,260 --> 00:32:32,980
9 that pretty much takes care of itself

00:32:30,490 --> 00:32:35,620
the control file what do we look at for

00:32:32,980 --> 00:32:37,930
the binary packages well the Lib pre

00:32:35,620 --> 00:32:40,150
type 6 runtime library it has that pre

00:32:37,930 --> 00:32:42,520
dependence we mentioned that gets

00:32:40,150 --> 00:32:45,060
expanded I will show you not on this

00:32:42,520 --> 00:32:45,060
machine I won't

00:32:51,410 --> 00:32:55,550
that's what that expands out to it so

00:32:53,000 --> 00:32:58,910
it's a Deb helper variable that gets

00:32:55,550 --> 00:33:04,970
expanded to multi art support which is a

00:32:58,910 --> 00:33:08,990
twisty little transitional package built

00:33:04,970 --> 00:33:10,970
by G Lib C that ensures that you've got

00:33:08,990 --> 00:33:13,850
the right version of G Lipsy on before

00:33:10,970 --> 00:33:16,550
you upgrade and so that's the pre

00:33:13,850 --> 00:33:17,540
dependency and multi are : same means

00:33:16,550 --> 00:33:19,400
that you can have more than one version

00:33:17,540 --> 00:33:22,640
installed at a time which I think in

00:33:19,400 --> 00:33:25,370
fact I do yeah there we go there's an

00:33:22,640 --> 00:33:26,720
AMD 64 version a 936 version doesn't the

00:33:25,370 --> 00:33:29,000
fact that the pre depends is not

00:33:26,720 --> 00:33:34,430
versions means that we have to keep it

00:33:29,000 --> 00:33:36,860
forever so it's not versioned in order

00:33:34,430 --> 00:33:38,930
to hide all the details of what versions

00:33:36,860 --> 00:33:41,540
are actually required it's it's I'll

00:33:38,930 --> 00:33:48,290
show you what the multi arch support

00:33:41,540 --> 00:33:50,510
package actually looks like right the

00:33:48,290 --> 00:33:52,220
aim D 64 version of it depends on this

00:33:50,510 --> 00:33:54,140
version of Lib C 6 which you'll see this

00:33:52,220 --> 00:33:58,280
is actually a rather old version of Lib

00:33:54,140 --> 00:34:03,590
C 6 which is satisfied from squeezie and

00:33:58,280 --> 00:34:06,740
squeezy squeeze into a 4 now if I do a I

00:34:03,590 --> 00:34:08,510
look at the I 36 one however you'll see

00:34:06,740 --> 00:34:10,879
that it depends on a much newer Lib C

00:34:08,510 --> 00:34:13,550
because that was we it was much later

00:34:10,879 --> 00:34:15,530
when we finalized what version we

00:34:13,550 --> 00:34:17,960
finalized the architecture path we were

00:34:15,530 --> 00:34:19,220
using on I 36 there was some back and

00:34:17,960 --> 00:34:22,399
forth discussion and we wound up

00:34:19,220 --> 00:34:24,230
changing our minds much later than we

00:34:22,399 --> 00:34:25,970
would have hoped and basically because

00:34:24,230 --> 00:34:27,590
it was changed after the squeeze release

00:34:25,970 --> 00:34:30,200
we have to make sure that this upgrade

00:34:27,590 --> 00:34:31,879
support is in place so the multi arch -

00:34:30,200 --> 00:34:33,830
support package is going to be around

00:34:31,879 --> 00:34:37,399
for a while we don't need to get rid of

00:34:33,830 --> 00:34:39,200
it however once Luisi releases we can

00:34:37,399 --> 00:34:41,360
get rid of the pre depends we can change

00:34:39,200 --> 00:34:45,350
debhelper to not add the pre depends in

00:34:41,360 --> 00:34:48,500
unstable because it's it's a no op it's

00:34:45,350 --> 00:34:50,810
just adding nodes to the the package

00:34:48,500 --> 00:34:51,649
dependency graph that don't really do

00:34:50,810 --> 00:34:53,270
anything different

00:34:51,649 --> 00:34:58,280
they're already satisfied on any system

00:34:53,270 --> 00:35:00,620
so yeah we can phase that out the the

00:34:58,280 --> 00:35:02,130
the actual pre depends miss miss Capri

00:35:00,620 --> 00:35:05,070
depends feature of

00:35:02,130 --> 00:35:06,270
of debhelper now that it's there I think

00:35:05,070 --> 00:35:08,460
it's actually been used in a couple of

00:35:06,270 --> 00:35:09,960
different scenarios as well so if you've

00:35:08,460 --> 00:35:11,790
added the field to your source package

00:35:09,960 --> 00:35:13,080
you might as well keep it but down the

00:35:11,790 --> 00:35:18,390
line I think we'll see it falling out of

00:35:13,080 --> 00:35:22,100
the the binary packages um alright

00:35:18,390 --> 00:35:23,940
that's the the runtime library package

00:35:22,100 --> 00:35:25,800
nothing too fancy there

00:35:23,940 --> 00:35:28,530
it's just multi Irsay means you can have

00:35:25,800 --> 00:35:30,810
more than one of it what else do we have

00:35:28,530 --> 00:35:33,240
we have the Lib free type 6 - dev

00:35:30,810 --> 00:35:37,560
package which is not currently marked

00:35:33,240 --> 00:35:39,390
Multi arch : same because of a little

00:35:37,560 --> 00:35:43,590
thing called free type - config which we

00:35:39,390 --> 00:35:46,500
discussed last hour free type 2 - demos

00:35:43,590 --> 00:35:48,030
their demo demos that they just they're

00:35:46,500 --> 00:35:51,150
just programs you can run that are

00:35:48,030 --> 00:35:53,490
examples I have not bothered to mark

00:35:51,150 --> 00:35:55,380
this package as multi arch : foreign why

00:35:53,490 --> 00:35:57,630
because there are no reverse

00:35:55,380 --> 00:35:59,910
dependencies in the archive and marking

00:35:57,630 --> 00:36:02,160
it Multi arch : foreign only matters if

00:35:59,910 --> 00:36:04,440
it has reverse dependencies so although

00:36:02,160 --> 00:36:06,570
I could install a foreign architecture

00:36:04,440 --> 00:36:08,100
version of this package there's no

00:36:06,570 --> 00:36:10,920
reason to market multi-touch : foreign

00:36:08,100 --> 00:36:13,170
because nothing depends on it so it

00:36:10,920 --> 00:36:15,420
would it would be useless information so

00:36:13,170 --> 00:36:21,630
actually here why don't I show you that

00:36:15,420 --> 00:36:25,290
I can in fact install now this one

00:36:21,630 --> 00:36:28,620
should work I should be able to install

00:36:25,290 --> 00:36:31,320
free type 2 - demos a36 because the

00:36:28,620 --> 00:36:32,880
library yeah there it goes it's running

00:36:31,320 --> 00:36:41,690
out there and grabbing it and you see

00:36:32,880 --> 00:36:45,060
it's even though I'm on an AMD 64 system

00:36:41,690 --> 00:36:47,300
but the the package has been installed

00:36:45,060 --> 00:36:49,800
here is the i36 version of the package

00:36:47,300 --> 00:36:51,570
and it installs just fine it doesn't

00:36:49,800 --> 00:36:55,350
have to be marked multi-edge : foreign

00:36:51,570 --> 00:36:57,630
to do that your your leaf packages that

00:36:55,350 --> 00:36:59,280
are actually for the for the average

00:36:57,630 --> 00:37:00,330
user the most interesting thing you

00:36:59,280 --> 00:37:04,080
would want to install foreign

00:37:00,330 --> 00:37:06,510
architectures of so for instance Skype

00:37:04,080 --> 00:37:10,710
which only has an i3 t6 executable

00:37:06,510 --> 00:37:12,240
anywhere in the world that package the

00:37:10,710 --> 00:37:13,860
the multi err system is designed such

00:37:12,240 --> 00:37:15,150
that those existing packages that are

00:37:13,860 --> 00:37:15,650
out there that Debian doesn't

00:37:15,150 --> 00:37:17,870
necessarily

00:37:15,650 --> 00:37:21,920
control have any influence over the the

00:37:17,870 --> 00:37:23,630
the binary package control file those

00:37:21,920 --> 00:37:25,100
should install just fine

00:37:23,630 --> 00:37:27,350
you only have to annotate the

00:37:25,100 --> 00:37:28,760
dependencies the dependent the package

00:37:27,350 --> 00:37:31,700
is being depended on or what have to be

00:37:28,760 --> 00:37:34,220
annotated to make this work so free type

00:37:31,700 --> 00:37:36,050
2 - demos supposing that were a non free

00:37:34,220 --> 00:37:38,900
binary package being disputed by a third

00:37:36,050 --> 00:37:41,450
party it had to have no modifications

00:37:38,900 --> 00:37:42,710
done to install in a multi arch scenario

00:37:41,450 --> 00:37:55,160
and have all of its dependencies

00:37:42,710 --> 00:37:56,810
satisfied free type happens to be a

00:37:55,160 --> 00:37:59,980
library it's a fairly core library so it

00:37:56,810 --> 00:38:02,390
has a u-dub that's used by the Installer

00:37:59,980 --> 00:38:04,910
we don't do multi Archon installer

00:38:02,390 --> 00:38:08,960
because why would you ever want to have

00:38:04,910 --> 00:38:12,290
multi arch in your installer it if you

00:38:08,960 --> 00:38:16,130
need more than one ABI in your installer

00:38:12,290 --> 00:38:22,130
I think something's wrong at least I

00:38:16,130 --> 00:38:24,860
hope I'm right about that but so in fact

00:38:22,130 --> 00:38:26,990
the most of the u-dub packages still

00:38:24,860 --> 00:38:28,430
install directly the user live and slash

00:38:26,990 --> 00:38:31,580
live instead of using the multi arch

00:38:28,430 --> 00:38:33,440
directories they don't have to but it's

00:38:31,580 --> 00:38:36,710
just that some of the tooling around the

00:38:33,440 --> 00:38:38,270
Installer is rather domain-specific and

00:38:36,710 --> 00:38:39,860
there's lots of special cases of

00:38:38,270 --> 00:38:42,140
libraries and so it's just simpler to

00:38:39,860 --> 00:38:44,780
put them in the the user lib path I

00:38:42,140 --> 00:38:46,040
dunno in the early days of multi arch it

00:38:44,780 --> 00:38:47,960
did actually cause a problem for the

00:38:46,040 --> 00:38:49,190
Installer I think MK libs might have had

00:38:47,960 --> 00:38:51,410
a problem with them not being in the

00:38:49,190 --> 00:38:52,640
right place or something but so you

00:38:51,410 --> 00:38:57,110
Deb's generally you don't do anything

00:38:52,640 --> 00:38:59,120
with those at all let's see so let's

00:38:57,110 --> 00:39:00,500
look at the dot install file there you

00:38:59,120 --> 00:39:04,790
go you've got that extra glob they're

00:39:00,500 --> 00:39:06,950
saying grab me all the deso what runtime

00:39:04,790 --> 00:39:09,880
libraries in sub directories of Lib

00:39:06,950 --> 00:39:13,370
because they've all moved down the level

00:39:09,880 --> 00:39:19,550
so like there's user live on my system

00:39:13,370 --> 00:39:24,160
which is rather full but usually Lib

00:39:19,550 --> 00:39:24,160
yeah actually let's loop this way

00:39:24,300 --> 00:39:27,600
there's as much stuff in the

00:39:25,920 --> 00:39:29,100
subdirectory of user lib for the

00:39:27,600 --> 00:39:32,400
architecture as there is an user live at

00:39:29,100 --> 00:39:33,480
this point so you know there's quite a

00:39:32,400 --> 00:39:37,770
lot that's been moved over into that

00:39:33,480 --> 00:39:40,080
subdirectory I think actually I I should

00:39:37,770 --> 00:39:41,700
probably stop there as far as rambling

00:39:40,080 --> 00:39:43,110
on up here and start taking questions on

00:39:41,700 --> 00:39:46,770
a common fact that we are running low on

00:39:43,110 --> 00:39:48,270
time so yeah five minutes so what

00:39:46,770 --> 00:39:55,680
questions can I answer her people about

00:39:48,270 --> 00:39:59,250
multi Archon who in here is a library

00:39:55,680 --> 00:40:00,750
package maintainer show hands okay put

00:39:59,250 --> 00:40:07,350
your hands down if you have already

00:40:00,750 --> 00:40:10,550
converted into multi arch okay so you

00:40:07,350 --> 00:40:12,900
should have questions the four of you I

00:40:10,550 --> 00:40:16,890
was waiting for somebody to ask an easy

00:40:12,900 --> 00:40:20,160
question their library package that I'm

00:40:16,890 --> 00:40:21,030
thinking of is off mind is what off mind

00:40:20,160 --> 00:40:26,970
okay

00:40:21,030 --> 00:40:29,670
it's an LD preload hack yes so if you

00:40:26,970 --> 00:40:35,850
install it you probably won't let us say

00:40:29,670 --> 00:40:40,410
both the amd64 and I 386 LD preloads but

00:40:35,850 --> 00:40:41,730
you want yeah the binary wrap a binary

00:40:40,410 --> 00:40:43,170
and there's a set you would help a

00:40:41,730 --> 00:40:45,390
program so I'll have to split it into

00:40:43,170 --> 00:40:48,930
two packages but how do I make sure that

00:40:45,390 --> 00:40:50,090
all the SOS get installed a good

00:40:48,930 --> 00:40:52,710
question

00:40:50,090 --> 00:40:54,240
multi arch has failed to solve that one

00:40:52,710 --> 00:40:56,160
because it was not an issue we we

00:40:54,240 --> 00:40:58,080
identified earlier in the process but I

00:40:56,160 --> 00:41:00,270
think you were part of the mailing list

00:40:58,080 --> 00:41:02,490
discussion on Debian de Ville was being

00:41:00,270 --> 00:41:05,700
asked it's something we should solve

00:41:02,490 --> 00:41:08,130
because it doesn't affect just not LD

00:41:05,700 --> 00:41:10,500
preload hacks but like for instance Pam

00:41:08,130 --> 00:41:12,300
modules NSS modules any sort of plugins

00:41:10,500 --> 00:41:14,460
that you're installing you generally

00:41:12,300 --> 00:41:16,410
want to try to install those for as many

00:41:14,460 --> 00:41:18,000
architectures as you can and that you're

00:41:16,410 --> 00:41:20,040
using on the system at the same time

00:41:18,000 --> 00:41:22,020
what Balch would you recommend in the

00:41:20,040 --> 00:41:30,330
meantime I don't I don't have a

00:41:22,020 --> 00:41:33,960
recommendation or I don't know I I think

00:41:30,330 --> 00:41:35,610
it I there were some ideas in that

00:41:33,960 --> 00:41:37,440
thread I'd have to go back and look at

00:41:35,610 --> 00:41:39,730
what was suggested there

00:41:37,440 --> 00:41:41,109
but I do remember some people came up

00:41:39,730 --> 00:41:42,910
with some kind of hacks that might have

00:41:41,109 --> 00:41:44,589
worked but the the right answer and the

00:41:42,910 --> 00:41:46,569
long-term is that we need to have the

00:41:44,589 --> 00:41:48,130
package manager have some smarts about

00:41:46,569 --> 00:41:52,059
this and it might require additional

00:41:48,130 --> 00:41:54,609
annotation for the declaring that hey

00:41:52,059 --> 00:41:56,290
this is this is a package that I want my

00:41:54,609 --> 00:41:58,059
brother's to come with me when I install

00:41:56,290 --> 00:42:00,069
it so that's gonna require additional

00:41:58,059 --> 00:42:01,510
information because the you know you

00:42:00,069 --> 00:42:03,069
can't tell just by looking at the fact

00:42:01,510 --> 00:42:12,880
that it's multi article ins same that

00:42:03,069 --> 00:42:16,359
that's the case it's a question but it's

00:42:12,880 --> 00:42:17,559
a result of all the changes that go

00:42:16,359 --> 00:42:20,680
through it Multi arch we don't

00:42:17,559 --> 00:42:23,650
explicitly support building packages

00:42:20,680 --> 00:42:24,819
from wheezy on on squeeze we have ways

00:42:23,650 --> 00:42:27,130
to do them back ports and things like

00:42:24,819 --> 00:42:29,619
that but if you're doing a back port

00:42:27,130 --> 00:42:32,859
from this kind of situation you're gonna

00:42:29,619 --> 00:42:35,290
have to take the changes to the install

00:42:32,859 --> 00:42:38,800
files out but what's gonna be able to

00:42:35,290 --> 00:42:40,900
build on squeezed yes we do you have to

00:42:38,800 --> 00:42:42,640
take out the multi arch lines endemic

00:42:40,900 --> 00:42:45,010
control as well or will they just be

00:42:42,640 --> 00:42:46,630
ignored by squeeze I think that does

00:42:45,010 --> 00:42:49,089
ignore don't they I think you'll get a

00:42:46,630 --> 00:42:53,260
warning from D package that it's no

00:42:49,089 --> 00:42:55,030
steal but it'll be thrown away and it

00:42:53,260 --> 00:42:56,710
was probably it's probably good good

00:42:55,030 --> 00:42:58,780
practice to take them out anyway if you

00:42:56,710 --> 00:43:00,940
take a note the change to the install

00:42:58,780 --> 00:43:03,460
files you probably should take out right

00:43:00,940 --> 00:43:04,599
the indicators if you're doing a back

00:43:03,460 --> 00:43:06,819
port you definitely have to make some

00:43:04,599 --> 00:43:11,640
source changes how many are a few of

00:43:06,819 --> 00:43:11,640
those you choose to do I don't know

00:43:13,490 --> 00:43:17,160
right I'll repeat the question so the

00:43:15,480 --> 00:43:19,859
question is will it break the multi

00:43:17,160 --> 00:43:22,349
upgrade if the fields are there and I I

00:43:19,859 --> 00:43:24,450
believe the answer is no so first of all

00:43:22,349 --> 00:43:26,910
I don't think the the squeeze D package

00:43:24,450 --> 00:43:28,650
puts it into the binary file the binary

00:43:26,910 --> 00:43:30,089
control file I think it's it spits out a

00:43:28,650 --> 00:43:32,790
warning and says this is an unknown

00:43:30,089 --> 00:43:34,829
unknown field so I'm ignoring it second

00:43:32,790 --> 00:43:37,410
of all if it were there the package

00:43:34,829 --> 00:43:41,730
manager and squeezy I don't know I keep

00:43:37,410 --> 00:43:43,349
saying squeezy and squeeze that's

00:43:41,730 --> 00:43:44,670
that'll be the next release name how

00:43:43,349 --> 00:43:51,900
about that well I'll talk to Neil about

00:43:44,670 --> 00:43:53,250
it afterwards in squeeze doesn't

00:43:51,900 --> 00:43:55,559
understand that field at all and so it

00:43:53,250 --> 00:43:56,760
just ignores it so it doesn't it doesn't

00:43:55,559 --> 00:43:59,250
have any effect on calculating the

00:43:56,760 --> 00:44:01,109
dependencies and you're using the

00:43:59,250 --> 00:44:03,750
squeeze version of apt when you're doing

00:44:01,109 --> 00:44:07,079
the upgrade so it the upgrade is done

00:44:03,750 --> 00:44:11,150
with the previous version of apt if

00:44:07,079 --> 00:44:11,150
you're doing it like a normal person

00:44:12,089 --> 00:44:16,079
so yeah it's and even if it were in the

00:44:14,670 --> 00:44:17,549
new version it's not like if you're

00:44:16,079 --> 00:44:19,079
doing an upgrade you don't have any

00:44:17,549 --> 00:44:20,549
foreign any packages of a foreign

00:44:19,079 --> 00:44:22,890
architecture currently installed nor do

00:44:20,549 --> 00:44:25,109
you have any architectures configured in

00:44:22,890 --> 00:44:26,520
deep package so there is no possible way

00:44:25,109 --> 00:44:28,440
that it as part of the upgrade it's

00:44:26,520 --> 00:44:29,430
going to miss calculate anything and and

00:44:28,440 --> 00:44:30,720
pick packages from the wrong

00:44:29,430 --> 00:44:32,280
architecture because that requires an

00:44:30,720 --> 00:44:37,740
explicit action by the user to enable

00:44:32,280 --> 00:44:39,089
multi arch and just maybe adding to the

00:44:37,740 --> 00:44:41,400
question of back ports that debhelper

00:44:39,089 --> 00:44:43,589
back port even if you keep the

00:44:41,400 --> 00:44:45,720
compatibility nine as the merge bits

00:44:43,589 --> 00:44:48,299
taken out yes and that's necessary

00:44:45,720 --> 00:44:50,130
because if you did do a back port using

00:44:48,299 --> 00:44:52,200
a Deb helper back court back port that

00:44:50,130 --> 00:44:54,660
enabled the the multi arch bits and

00:44:52,200 --> 00:44:57,359
built it on squeeze on squeeze it would

00:44:54,660 --> 00:45:03,780
be uninstalled one I 386 because the G

00:44:57,359 --> 00:45:06,470
Lib C is not new enough in squeeze and

00:45:03,780 --> 00:45:06,470
you know the questions

00:45:10,799 --> 00:45:15,249
what happens if you're installing

00:45:13,089 --> 00:45:17,529
packages that puts things in etc and say

00:45:15,249 --> 00:45:19,599
you have the armed hf version and the i3

00:45:17,529 --> 00:45:21,900
eight-six version because you may they

00:45:19,599 --> 00:45:25,200
have to be in lots in lockstep versions

00:45:21,900 --> 00:45:29,369
so basically the cases that you have

00:45:25,200 --> 00:45:32,680
config files that vary by architecture

00:45:29,369 --> 00:45:37,239
so the config file is the same for both

00:45:32,680 --> 00:45:39,430
arm and and i386 in the package don't

00:45:37,239 --> 00:45:42,910
change anything because the d package

00:45:39,430 --> 00:45:44,499
implementation of of multi arch says

00:45:42,910 --> 00:45:47,170
that if the file is the same in both

00:45:44,499 --> 00:45:49,539
packages you share it on the file system

00:45:47,170 --> 00:45:51,219
it ref counts it and that's it and what

00:45:49,539 --> 00:45:53,769
happens if they're different if they're

00:45:51,219 --> 00:45:55,420
different then you would need to somehow

00:45:53,769 --> 00:45:57,479
change the package to look at an

00:45:55,420 --> 00:45:59,739
architecture specific path for it so I

00:45:57,479 --> 00:46:02,069
think there are some examples of this

00:45:59,739 --> 00:46:02,069
with

00:46:08,880 --> 00:46:15,330
no maybe the Vulcan way maybe they've

00:46:13,290 --> 00:46:18,180
been moved to slash user share or

00:46:15,330 --> 00:46:19,710
something but I do remember there used

00:46:18,180 --> 00:46:24,420
to be at least some oh I think maybe

00:46:19,710 --> 00:46:26,130
it's pango is that hmm

00:46:24,420 --> 00:46:28,140
no anyway there have been examples where

00:46:26,130 --> 00:46:30,060
a library has a config file which

00:46:28,140 --> 00:46:33,560
requires architecture specific

00:46:30,060 --> 00:46:36,540
information and the solution has been to

00:46:33,560 --> 00:46:38,250
encode the architecture name in the

00:46:36,540 --> 00:46:41,030
directory that it's using and just split

00:46:38,250 --> 00:46:43,200
the hierarchy within etc there's no

00:46:41,030 --> 00:46:44,760
multi arch has not attempted to to

00:46:43,200 --> 00:46:48,510
specify to that level of granularity

00:46:44,760 --> 00:46:49,920
what the correct thing is so it's you

00:46:48,510 --> 00:46:52,110
know make it up as you go just make sure

00:46:49,920 --> 00:46:56,040
it's unique and that they can Co install

00:46:52,110 --> 00:46:57,690
and I'm being told time is up so thanks

00:46:56,040 --> 00:46:59,220
everyone for coming hope it was helpful

00:46:57,690 --> 00:47:03,780
to you

00:46:59,220 --> 00:47:03,780

YouTube URL: https://www.youtube.com/watch?v=TeSsFH4WOaU


