Title: Ganeti: "how you can use it" + "how we did it"
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Guido Trotter

At: DebConf12
https://debconf12.debconf.org/
Room: Aula Magna
Scheduled start: 2012-07-12 17:00:00
Captions: 
	00:00:00,030 --> 00:00:08,519
we're not very many but anyway I'm here

00:00:05,430 --> 00:00:10,620
to present ganeti it's a product that we

00:00:08,519 --> 00:00:12,750
developed and we use at Google to do

00:00:10,620 --> 00:00:15,780
cluster visualization management on top

00:00:12,750 --> 00:00:17,880
of Zen or our hypervisors how many of

00:00:15,780 --> 00:00:22,890
you have been at some graduate or before

00:00:17,880 --> 00:00:26,490
have used it know anything about it some

00:00:22,890 --> 00:00:29,490
a bit okay so I'll try to be fast in the

00:00:26,490 --> 00:00:32,840
first part and get to something of

00:00:29,490 --> 00:00:35,840
internals or other things that are a bit

00:00:32,840 --> 00:00:39,360
weirder although I don't know how much

00:00:35,840 --> 00:00:42,000
we'd be able to do today exactly so

00:00:39,360 --> 00:00:44,730
first big news we have a new logo we

00:00:42,000 --> 00:00:46,800
designed it exactly in time well we

00:00:44,730 --> 00:00:48,450
designed it for Google i/o last week we

00:00:46,800 --> 00:00:50,550
didn't make it to Google i/o last week

00:00:48,450 --> 00:00:51,629
so I'm I'm presenting it today for the

00:00:50,550 --> 00:00:56,870
first time worldwide

00:00:51,629 --> 00:01:05,070
but when you little thing it's too bad I

00:00:56,870 --> 00:01:08,490
like it okay so let's see what's gonna

00:01:05,070 --> 00:01:11,580
team what are the latest features what

00:01:08,490 --> 00:01:13,500
directions were going towards how to use

00:01:11,580 --> 00:01:15,630
the in practice how we deploy it at

00:01:13,500 --> 00:01:18,030
Google then I also have a whole stack of

00:01:15,630 --> 00:01:20,970
snow it's about internals last time I

00:01:18,030 --> 00:01:22,860
gave it they asked me to the whole

00:01:20,970 --> 00:01:24,869
audience was shocked and nobody wanted

00:01:22,860 --> 00:01:26,700
to talk to me for half an hour so I'm

00:01:24,869 --> 00:01:30,360
not sure I'd leave that part but we'll

00:01:26,700 --> 00:01:31,829
see if you want but there's maybe

00:01:30,360 --> 00:01:34,259
recorded version from FOSDEM

00:01:31,829 --> 00:01:38,790
or you can talk to me we can discuss

00:01:34,259 --> 00:01:41,700
that as well so what can connect to do

00:01:38,790 --> 00:01:44,310
well basically we just manage a cluster

00:01:41,700 --> 00:01:46,829
of physical machines and we schedule the

00:01:44,310 --> 00:01:48,810
virtual machines on top of them we've

00:01:46,829 --> 00:01:52,350
been doing this for quite a lot of years

00:01:48,810 --> 00:01:54,450
and the idea is that we wanted to do

00:01:52,350 --> 00:01:57,329
everything that you normally expect from

00:01:54,450 --> 00:02:03,719
a virtual machine manager like migration

00:01:57,329 --> 00:02:06,450
or back ok

00:02:03,719 --> 00:02:09,470
like migration data redundancy over

00:02:06,450 --> 00:02:11,730
multiple nodes without the need for

00:02:09,470 --> 00:02:12,860
storage area networks of things like

00:02:11,730 --> 00:02:16,220
that so negative

00:02:12,860 --> 00:02:19,490
or Verde RBD or our file system our

00:02:16,220 --> 00:02:22,490
distributed block devices cluster

00:02:19,490 --> 00:02:25,490
balancing so easy way to compute what

00:02:22,490 --> 00:02:29,480
the optimal status of across there is

00:02:25,490 --> 00:02:31,640
and is to repair hardware so remove

00:02:29,480 --> 00:02:37,070
nodes from a cluster repair them and so

00:02:31,640 --> 00:02:39,290
on we want to do this with vent level as

00:02:37,070 --> 00:02:41,750
low as possible so just take a bunch of

00:02:39,290 --> 00:02:45,290
physical machines deploy ganeti of them

00:02:41,750 --> 00:02:48,290
use them no need for specialized

00:02:45,290 --> 00:02:50,600
hardware specialized the external oil

00:02:48,290 --> 00:02:52,820
internal hardware to the node so just

00:02:50,600 --> 00:02:54,560
take your old computers really but what

00:02:52,820 --> 00:02:56,510
they gave us at Google anyway they had

00:02:54,560 --> 00:02:58,400
their own all the computers they gave

00:02:56,510 --> 00:03:06,320
them to us and we did reservation map

00:02:58,400 --> 00:03:09,020
right so we wanted to scale quite a lot

00:03:06,320 --> 00:03:11,300
or not to huge amounts who doesn't want

00:03:09,020 --> 00:03:13,670
to manage like ten thousand of physical

00:03:11,300 --> 00:03:15,489
machines with it but we wanted to be

00:03:13,670 --> 00:03:19,970
able to manage hundred of machines

00:03:15,489 --> 00:03:22,540
inside the same cluster I believe the

00:03:19,970 --> 00:03:29,209
latest version is actually more than 200

00:03:22,540 --> 00:03:33,170
as we run it in production and basically

00:03:29,209 --> 00:03:35,480
we wanted to make it easy for with for

00:03:33,170 --> 00:03:37,850
harder features so you don't need to

00:03:35,480 --> 00:03:40,070
configure your diabetes by hand we will

00:03:37,850 --> 00:03:42,320
do it for you everything we wanted to do

00:03:40,070 --> 00:03:44,989
is to be good as an open source product

00:03:42,320 --> 00:03:49,430
so we do this very differently than many

00:03:44,989 --> 00:03:52,430
other products made this way by a

00:03:49,430 --> 00:03:54,950
corporation everything is done in public

00:03:52,430 --> 00:03:57,709
on a mailing list you can see the design

00:03:54,950 --> 00:04:01,310
discussions you can see code reviews of

00:03:57,709 --> 00:04:03,320
patches floating and the same happens if

00:04:01,310 --> 00:04:05,090
you want to develop a patch you just

00:04:03,320 --> 00:04:06,769
send it to the same mailing list we

00:04:05,090 --> 00:04:09,320
discuss it then we get to apply it

00:04:06,769 --> 00:04:11,840
because the actual place we commit it is

00:04:09,320 --> 00:04:13,730
close to Google people but besides that

00:04:11,840 --> 00:04:17,690
it's all envelope and you can read the

00:04:13,730 --> 00:04:19,519
archives anytime and yeah we want to be

00:04:17,690 --> 00:04:23,660
cooperatively with other people that use

00:04:19,519 --> 00:04:26,100
it and want to contribute there were

00:04:23,660 --> 00:04:30,690
changes even at small scale actually

00:04:26,100 --> 00:04:33,630
by week's game so just a small

00:04:30,690 --> 00:04:36,140
terminology node is just a physical host

00:04:33,630 --> 00:04:39,080
node group is actually a group of nodes

00:04:36,140 --> 00:04:42,920
instance is a guest a virtual machine

00:04:39,080 --> 00:04:45,210
cluster is this whole set of nodes

00:04:42,920 --> 00:04:47,460
eventually divided into not groups and

00:04:45,210 --> 00:04:50,250
any guiity operation is expressed as a

00:04:47,460 --> 00:04:52,200
job except queries that are kind of

00:04:50,250 --> 00:04:55,560
strange but they any operation that

00:04:52,200 --> 00:04:57,330
changes the Craster is a job you can get

00:04:55,560 --> 00:05:01,920
information from the cluster without the

00:04:57,330 --> 00:05:04,020
job so we just use normal technologies

00:05:01,920 --> 00:05:06,720
like we tried not to reinvent the wheel

00:05:04,020 --> 00:05:08,400
as much as we could so for example we

00:05:06,720 --> 00:05:10,290
did I invented the wheel for rebirth but

00:05:08,400 --> 00:05:13,170
we started before we live very existed

00:05:10,290 --> 00:05:15,540
but for much other things we just reuse

00:05:13,170 --> 00:05:19,320
whatever Linux are our open source

00:05:15,540 --> 00:05:22,140
products gave us so just Linux bridge

00:05:19,320 --> 00:05:23,460
utils whatever normal utilities open the

00:05:22,140 --> 00:05:27,030
switch now

00:05:23,460 --> 00:05:31,370
KVM examine Alexi as a hypervisor dr BD

00:05:27,030 --> 00:05:34,290
l vm Suns or to back your your files now

00:05:31,370 --> 00:05:36,630
latest version has RBD support I don't

00:05:34,290 --> 00:05:39,470
remember if that's to 5 or to 6 but I'll

00:05:36,630 --> 00:05:41,850
find out later because it's in my slides

00:05:39,470 --> 00:05:43,470
Python and a few modules in Python

00:05:41,850 --> 00:05:47,580
everything is packaged for Debian so

00:05:43,470 --> 00:05:50,360
quite easy so cut the nifty tool I was

00:05:47,580 --> 00:05:55,040
talking about this morning for like

00:05:50,360 --> 00:05:57,810
exchanging flows from networks to

00:05:55,040 --> 00:06:00,290
sockets and things like that from from

00:05:57,810 --> 00:06:02,970
network sockets to UNIX sockets and more

00:06:00,290 --> 00:06:05,280
standard i/o two sockets and things like

00:06:02,970 --> 00:06:08,370
that and Haskell it's optional it's

00:06:05,280 --> 00:06:11,420
becoming less optional we have quite a

00:06:08,370 --> 00:06:13,920
lot of code especially for a part of

00:06:11,420 --> 00:06:16,530
cluster balancing in Haskell

00:06:13,920 --> 00:06:19,590
we're adding more Haskell as we speak

00:06:16,530 --> 00:06:21,780
now while I hope not but yeah there's

00:06:19,590 --> 00:06:24,630
there's quite a part of the code written

00:06:21,780 --> 00:06:29,580
in Haskell for performance reasons and

00:06:24,630 --> 00:06:31,920
for verification reasons so no drones

00:06:29,580 --> 00:06:33,690
every note is the same but not really so

00:06:31,920 --> 00:06:35,580
we have a master node where all

00:06:33,690 --> 00:06:37,860
operations are run we have master

00:06:35,580 --> 00:06:40,310
candidates that keep a full copy of a

00:06:37,860 --> 00:06:43,069
config and can become

00:06:40,310 --> 00:06:45,909
and we run these two demos company to

00:06:43,069 --> 00:06:50,419
get queries from the config and noted to

00:06:45,909 --> 00:06:54,560
just basically perform the operations

00:06:50,419 --> 00:06:56,900
regular loads only run noted and cannot

00:06:54,560 --> 00:06:59,900
become master until they get promoted to

00:06:56,900 --> 00:07:01,340
master candidates first of course that

00:06:59,900 --> 00:07:03,830
means that if you lose all your master

00:07:01,340 --> 00:07:06,860
candidates you're in a bad place and you

00:07:03,830 --> 00:07:09,229
wanted to have a backup we keep usually

00:07:06,860 --> 00:07:11,389
ten of them so hopefully you won't lose

00:07:09,229 --> 00:07:12,889
all of them at the same time if you do

00:07:11,389 --> 00:07:14,599
you have more problems usually you're

00:07:12,889 --> 00:07:17,840
also going to lose some virtual machines

00:07:14,599 --> 00:07:20,000
and things like that you can change that

00:07:17,840 --> 00:07:22,330
number of course so you can say 15 or 5

00:07:20,000 --> 00:07:25,430
as you wish

00:07:22,330 --> 00:07:27,199
regular ok and then if you have a fly

00:07:25,430 --> 00:07:29,300
nodes that are being repaired so you

00:07:27,199 --> 00:07:33,289
can't talk to them because they're

00:07:29,300 --> 00:07:35,360
broken hopefully then you have non rolls

00:07:33,289 --> 00:07:39,650
at the instance hosting levels nodes can

00:07:35,360 --> 00:07:42,050
host machines or be dry drained or they

00:07:39,650 --> 00:07:43,729
could actually not be vm capable so they

00:07:42,050 --> 00:07:45,830
could not host machine why is this

00:07:43,729 --> 00:07:47,810
useful well I can for example have a

00:07:45,830 --> 00:07:50,270
master candidate is in a different data

00:07:47,810 --> 00:07:52,580
center the configuration gets copied to

00:07:50,270 --> 00:07:54,680
it but I still don't want to migrate

00:07:52,580 --> 00:07:55,940
machines to it or maybe a master

00:07:54,680 --> 00:07:57,710
candidate is actually a virtual machine

00:07:55,940 --> 00:07:59,539
so I don't want a bigger machine

00:07:57,710 --> 00:08:01,639
migrated on top of a little machine

00:07:59,539 --> 00:08:06,889
although KVM kind of supports that but

00:08:01,639 --> 00:08:08,990
still so let's just to avoid having some

00:08:06,889 --> 00:08:11,000
node support virtual machines when we

00:08:08,990 --> 00:08:13,190
can drain a node say well this node is

00:08:11,000 --> 00:08:15,800
going to get out at some point let's

00:08:13,190 --> 00:08:20,569
drain it or we can offline it and in

00:08:15,800 --> 00:08:23,629
that case still can't do anything new

00:08:20,569 --> 00:08:26,599
features well I had a slide about 2.4 I

00:08:23,629 --> 00:08:27,110
removed it hopefully 2.4 is where

00:08:26,599 --> 00:08:30,710
everybody

00:08:27,110 --> 00:08:33,380
we have 2.5 in wheezy and in back ports

00:08:30,710 --> 00:08:38,930
indeed so you can use it on squeeze

00:08:33,380 --> 00:08:42,829
nowadays this has some support we have

00:08:38,930 --> 00:08:45,680
better node groups so we have commands

00:08:42,829 --> 00:08:47,529
that effect a whole no droop ever quite

00:08:45,680 --> 00:08:51,279
a whole load droop and things like that

00:08:47,529 --> 00:08:52,410
and no troop scale better at this stage

00:08:51,279 --> 00:08:54,990
must

00:08:52,410 --> 00:08:58,079
peter knapp costume customization until

00:08:54,990 --> 00:09:00,269
now we had this feature that was the

00:08:58,079 --> 00:09:02,430
master IP and basically when the master

00:09:00,269 --> 00:09:04,319
was moved from one node to the other the

00:09:02,430 --> 00:09:06,420
NIT was always doing exactly one thing

00:09:04,319 --> 00:09:09,779
which was bringing up the IP address of

00:09:06,420 --> 00:09:11,579
the master on this node from 2:5 you can

00:09:09,779 --> 00:09:13,949
actually replace this with your own

00:09:11,579 --> 00:09:15,899
command so if you want to rather and

00:09:13,949 --> 00:09:17,639
bring up the P you already have the IP

00:09:15,899 --> 00:09:21,810
and you want to advertise it through a

00:09:17,639 --> 00:09:23,970
routing daemon you use this script turn

00:09:21,810 --> 00:09:25,709
up script to talk to your own demon for

00:09:23,970 --> 00:09:27,839
example or to update on my sequel

00:09:25,709 --> 00:09:30,810
database or whatever you need to do when

00:09:27,839 --> 00:09:32,839
you fail over your master we have full

00:09:30,810 --> 00:09:35,430
spine support in this version so you can

00:09:32,839 --> 00:09:38,970
activate your KVM users of machines in

00:09:35,430 --> 00:09:42,449
space and have better desktops and we

00:09:38,970 --> 00:09:49,589
have support for non-health so if you

00:09:42,449 --> 00:09:52,819
have yes spice is a protocol that some

00:09:49,589 --> 00:09:55,920
people invented for better desktop

00:09:52,819 --> 00:09:58,889
remote desktop so basically it does

00:09:55,920 --> 00:10:00,990
remote desktop on the server level and

00:09:58,889 --> 00:10:03,019
that just sends a changes to the client

00:10:00,990 --> 00:10:05,430
rubberband VNC where you actually

00:10:03,019 --> 00:10:06,750
transmit everything so if you're over

00:10:05,430 --> 00:10:09,149
the network it should work a lot better

00:10:06,750 --> 00:10:12,389
it has support also for USB redirection

00:10:09,149 --> 00:10:14,459
and a few other things it's it's a nifty

00:10:12,389 --> 00:10:16,199
thing if you go to Foss them you hear a

00:10:14,459 --> 00:10:19,529
lot about it I think they only talked

00:10:16,199 --> 00:10:22,889
about it at first I have no clue why but

00:10:19,529 --> 00:10:24,630
yeah try it I use my workstation like a

00:10:22,889 --> 00:10:28,230
visualization of my laptop with spice

00:10:24,630 --> 00:10:31,410
towards white well there are spies

00:10:28,230 --> 00:10:32,040
clients packaged in Debian so so

00:10:31,410 --> 00:10:36,089
non-health

00:10:32,040 --> 00:10:38,670
if you have some kind of health system

00:10:36,089 --> 00:10:41,910
attached to the nodes for example of

00:10:38,670 --> 00:10:45,000
virtual serial port or your power switch

00:10:41,910 --> 00:10:47,610
is programmable remotely or IPMI or

00:10:45,000 --> 00:10:49,769
something you can use it from karate to

00:10:47,610 --> 00:10:52,230
say well kill this node for example

00:10:49,769 --> 00:10:54,720
because I can't reach it anymore and I

00:10:52,230 --> 00:10:56,579
don't want it to come back and ruin

00:10:54,720 --> 00:10:58,790
things with a virtual machine that is

00:10:56,579 --> 00:11:01,980
wrong on it or something

00:10:58,790 --> 00:11:04,960
two-six we've just froze to 6 we have

00:11:01,980 --> 00:11:09,870
our MIDI support into 6 so you can use

00:11:04,960 --> 00:11:12,850
instead of the RBD if you want or yeah

00:11:09,870 --> 00:11:14,560
memory ballooning for KVM ins and until

00:11:12,850 --> 00:11:17,170
now it was sealed now we can actually

00:11:14,560 --> 00:11:19,420
reduce and increase right now it's

00:11:17,170 --> 00:11:22,240
pretty much manual with some automation

00:11:19,420 --> 00:11:24,850
in 2009 we plan to have more automation

00:11:22,240 --> 00:11:26,830
for that some support for CPU pinning

00:11:24,850 --> 00:11:31,210
the direction here we're going towards

00:11:26,830 --> 00:11:33,970
is trying to make sure we can easily

00:11:31,210 --> 00:11:37,360
partition a node between literal

00:11:33,970 --> 00:11:39,550
machines that explain this later obvious

00:11:37,360 --> 00:11:41,770
exported in important case you want to

00:11:39,550 --> 00:11:46,000
integrate it with VMware and other evil

00:11:41,770 --> 00:11:48,070
proprietary people and more

00:11:46,000 --> 00:11:50,800
customization for the RBD and these

00:11:48,070 --> 00:11:52,450
parameters until now it was all whatever

00:11:50,800 --> 00:11:55,690
we give you and you could change some

00:11:52,450 --> 00:11:58,300
context constants in the source files

00:11:55,690 --> 00:12:02,550
but then that those effected all virtual

00:11:58,300 --> 00:12:05,590
machines now you can decide those per VM

00:12:02,550 --> 00:12:08,020
finally we have policies to better model

00:12:05,590 --> 00:12:10,270
your resources so you can say look very

00:12:08,020 --> 00:12:12,160
our machine should be at most this size

00:12:10,270 --> 00:12:13,930
that minimum decide the standard return

00:12:12,160 --> 00:12:17,230
machine is this and then we can tell you

00:12:13,930 --> 00:12:18,850
look you can only fit this of number of

00:12:17,230 --> 00:12:21,190
your biggest virtual machines so if you

00:12:18,850 --> 00:12:26,850
plan to have more than those you have to

00:12:21,190 --> 00:12:30,960
do something about it - 7 is still open

00:12:26,850 --> 00:12:33,460
we're really just starting on it we have

00:12:30,960 --> 00:12:35,470
network management and IP a location

00:12:33,460 --> 00:12:36,820
that is scheduled to be merged

00:12:35,470 --> 00:12:40,210
it's actually an outside contributors

00:12:36,820 --> 00:12:42,340
patch open V switch vs. small small

00:12:40,210 --> 00:12:46,390
initial support hopefully we'll be able

00:12:42,340 --> 00:12:48,220
to do more here into 8 fast queries and

00:12:46,390 --> 00:12:51,190
split of queries and jobs so the idea is

00:12:48,220 --> 00:12:52,990
that we want the queries to not to hit

00:12:51,190 --> 00:12:55,060
where the jobs hit and to be able to

00:12:52,990 --> 00:12:57,760
perform well even if there are long term

00:12:55,060 --> 00:13:00,370
running jobs on the caster so you can

00:12:57,760 --> 00:13:04,000
always get your status even if or

00:13:00,370 --> 00:13:07,090
something else going on and in general

00:13:04,000 --> 00:13:10,030
better ceiling of resources so if now we

00:13:07,090 --> 00:13:12,070
always run on a shared and best effort

00:13:10,030 --> 00:13:15,550
machine model we want to be able to say

00:13:12,070 --> 00:13:17,510
well we have this big big server really

00:13:15,550 --> 00:13:19,310
these two cars and these two days

00:13:17,510 --> 00:13:21,830
can this RAM that is associated with

00:13:19,310 --> 00:13:23,690
these two cars is all for you and

00:13:21,830 --> 00:13:27,490
nobody's going to steal it from you and

00:13:23,690 --> 00:13:30,200
we're making sure that this is like

00:13:27,490 --> 00:13:34,460
located to you fully which we didn't

00:13:30,200 --> 00:13:36,560
have until now and we want also to

00:13:34,460 --> 00:13:37,970
provide better metrics for measurement

00:13:36,560 --> 00:13:40,580
what's going on

00:13:37,970 --> 00:13:42,920
how much uptime your machines have had

00:13:40,580 --> 00:13:47,510
over the last month and all these kind

00:13:42,920 --> 00:13:50,770
of things what what do we want to do in

00:13:47,510 --> 00:13:53,420
the future full dynamic memories so

00:13:50,770 --> 00:13:55,190
dynamic resizing of your machines as we

00:13:53,420 --> 00:13:57,770
need to add some new ones and things

00:13:55,190 --> 00:14:00,350
like that better is instant working

00:13:57,770 --> 00:14:03,370
customization a rolling reboot to do

00:14:00,350 --> 00:14:06,500
updates all over the fleet better

00:14:03,370 --> 00:14:08,630
automation more self-healing inside

00:14:06,500 --> 00:14:10,450
getting this has been a problem because

00:14:08,630 --> 00:14:13,700
we have some kind of self-healing

00:14:10,450 --> 00:14:16,430
implemented on top of karate inside the

00:14:13,700 --> 00:14:19,100
Google proprietary part but we don't

00:14:16,430 --> 00:14:22,250
have it inside karate and if we think we

00:14:19,100 --> 00:14:23,840
should move some of it as we can in

00:14:22,250 --> 00:14:26,450
inside unity

00:14:23,840 --> 00:14:28,880
better scalability KDM block device

00:14:26,450 --> 00:14:31,400
integration and I hear this today that

00:14:28,880 --> 00:14:33,650
Citrix is doing block device migration

00:14:31,400 --> 00:14:36,410
or very call it differently but it's

00:14:33,650 --> 00:14:39,530
it's the same thing right so basically

00:14:36,410 --> 00:14:43,310
we want to support it for both of course

00:14:39,530 --> 00:14:45,260
and improve various installation right

00:14:43,310 --> 00:14:47,630
now ers installation is mostly something

00:14:45,260 --> 00:14:49,340
with runners on the node it gets even

00:14:47,630 --> 00:14:51,740
block devices already initialized and

00:14:49,340 --> 00:14:53,900
put something on block devices we want

00:14:51,740 --> 00:14:55,130
something that is detached from the node

00:14:53,900 --> 00:14:57,230
at the different level so running

00:14:55,130 --> 00:14:59,780
already in the literal machine you can

00:14:57,230 --> 00:15:02,060
do it today but there's no weighing

00:14:59,780 --> 00:15:04,550
ready to say okay this return machine is

00:15:02,060 --> 00:15:06,410
going to be is also just run it with

00:15:04,550 --> 00:15:08,510
different parameters so that it hits a

00:15:06,410 --> 00:15:11,870
big C server for example this would be

00:15:08,510 --> 00:15:14,180
great so that you only run the machine

00:15:11,870 --> 00:15:16,670
hitting the Big C server for install

00:15:14,180 --> 00:15:19,210
when it's actually being reinstalled and

00:15:16,670 --> 00:15:19,210
not all the time

00:15:19,270 --> 00:15:25,880
different hypervisors native KVM one

00:15:22,010 --> 00:15:29,870
which will be stable and other tools as

00:15:25,880 --> 00:15:31,000
they come available so you can easily

00:15:29,870 --> 00:15:33,730
like initial

00:15:31,000 --> 00:15:36,850
Kaster you have your karate node karate

00:15:33,730 --> 00:15:39,400
master when you can perform operation at

00:15:36,850 --> 00:15:41,410
the customer level ask for information

00:15:39,400 --> 00:15:43,750
about your cluster modify parameters

00:15:41,410 --> 00:15:46,720
that will affect your virtual machines

00:15:43,750 --> 00:15:48,610
all of them when you can modify them

00:15:46,720 --> 00:15:50,920
Ottoman or group level so just the

00:15:48,610 --> 00:15:53,140
machines on these nodes behave

00:15:50,920 --> 00:15:55,510
differently or indeed as a virtual

00:15:53,140 --> 00:15:58,090
machine level so this machine has these

00:15:55,510 --> 00:16:00,700
special parameters verify that your

00:15:58,090 --> 00:16:04,390
cluster is all healthy well not all but

00:16:00,700 --> 00:16:08,230
the parts failover your master role

00:16:04,390 --> 00:16:10,120
between nodes and execute commands or

00:16:08,230 --> 00:16:14,350
copy files to although this is just

00:16:10,120 --> 00:16:16,000
really like small helper tools third

00:16:14,350 --> 00:16:21,370
we're not nothing different than your

00:16:16,000 --> 00:16:24,280
normal Vash adding nodes well no doubt

00:16:21,370 --> 00:16:27,280
you need to have an ssh authentication

00:16:24,280 --> 00:16:30,040
between nodes and the nodes get added we

00:16:27,280 --> 00:16:32,170
may want to add some situation in which

00:16:30,040 --> 00:16:34,420
you know gets pre-configured and can be

00:16:32,170 --> 00:16:36,790
added without a cessation of education

00:16:34,420 --> 00:16:39,460
for example already from when OD if you

00:16:36,790 --> 00:16:41,830
have crossed not the authentication but

00:16:39,460 --> 00:16:46,570
we don't have that yet now you need to

00:16:41,830 --> 00:16:48,670
have ssh to other node adding instances

00:16:46,570 --> 00:16:52,630
just see what instances you have

00:16:48,670 --> 00:16:56,140
installed some new add a new instance

00:16:52,630 --> 00:17:00,100
when it comes up you can ping it you can

00:16:56,140 --> 00:17:05,020
ssh it and if you use the RBD it's block

00:17:00,100 --> 00:17:08,079
devices are replicated on two nodes we

00:17:05,020 --> 00:17:10,569
can have paranoid operations so remove

00:17:08,079 --> 00:17:12,449
nodes modify nodes with the parameters

00:17:10,569 --> 00:17:15,880
we were talking about before

00:17:12,449 --> 00:17:19,660
evacuate failover migrate node or power

00:17:15,880 --> 00:17:25,510
cycle them with a all be operations we

00:17:19,660 --> 00:17:28,390
were mentioning instance operation start

00:17:25,510 --> 00:17:30,610
and stop modifying for migrate access

00:17:28,390 --> 00:17:34,450
the console either prove exam console or

00:17:30,610 --> 00:17:36,970
through KVM we actually made it easy to

00:17:34,450 --> 00:17:40,270
access the k vm console while the k vm

00:17:36,970 --> 00:17:43,210
people made it harder or tried but we

00:17:40,270 --> 00:17:44,559
simplified that layer indeed reinstall

00:17:43,210 --> 00:17:47,379
instances and things like

00:17:44,559 --> 00:17:50,230
all these tools come with fulmen pages

00:17:47,379 --> 00:17:52,929
and online help online help is always a

00:17:50,230 --> 00:17:54,639
bit more up to date than pages we try to

00:17:52,929 --> 00:17:56,019
keep all my pages up to date but

00:17:54,639 --> 00:18:02,470
sometimes something will slip right

00:17:56,019 --> 00:18:04,629
there buddy just replication between

00:18:02,470 --> 00:18:06,970
them so you have an instance living on a

00:18:04,629 --> 00:18:09,210
node you have local storage replication

00:18:06,970 --> 00:18:13,210
over the network mmm the secondary node

00:18:09,210 --> 00:18:14,649
they replicated data how to recover from

00:18:13,210 --> 00:18:17,649
failure

00:18:14,649 --> 00:18:20,470
so our node free diet is that an

00:18:17,649 --> 00:18:22,629
instance on it if we knew where it could

00:18:20,470 --> 00:18:25,240
die and we could know because we

00:18:22,629 --> 00:18:27,460
monitored we we noticed that the memory

00:18:25,240 --> 00:18:30,070
had corruption error with CPU or some

00:18:27,460 --> 00:18:32,110
disks were going to be broken so we

00:18:30,070 --> 00:18:35,080
could move my life migrate for instance

00:18:32,110 --> 00:18:36,759
out in this case it died while business

00:18:35,080 --> 00:18:40,539
was still on it so the only thing we can

00:18:36,759 --> 00:18:42,519
do is offline vinod fail every instance

00:18:40,539 --> 00:18:46,659
which music basically means to reboot it

00:18:42,519 --> 00:18:49,840
over its secondary storage then replace

00:18:46,659 --> 00:18:52,600
this which means recreate the raid one

00:18:49,840 --> 00:18:54,669
over the network and now we have a new

00:18:52,600 --> 00:18:59,590
cluster that is basically independent of

00:18:54,669 --> 00:19:06,309
node 3 and our instances failure failure

00:18:59,590 --> 00:19:08,320
tolerant again Ginty backup is a little

00:19:06,309 --> 00:19:13,389
tool that allows you to export instances

00:19:08,320 --> 00:19:22,269
and basically back them up or check what

00:19:13,389 --> 00:19:24,460
they contain ok so H tools this is some

00:19:22,269 --> 00:19:27,070
tools that we have it allows you to move

00:19:24,460 --> 00:19:30,129
instances around and balance your

00:19:27,070 --> 00:19:33,720
cluster so if you have for example a new

00:19:30,129 --> 00:19:36,639
instance where should I put it well or

00:19:33,720 --> 00:19:40,929
how do we move an instance now that a

00:19:36,639 --> 00:19:42,879
node is dead H al is very aged a locator

00:19:40,929 --> 00:19:44,590
we Husker a locator and will answer

00:19:42,879 --> 00:19:47,649
those questions so you don't have to

00:19:44,590 --> 00:19:48,999
think about it yourself thinking about

00:19:47,649 --> 00:19:51,340
it if you have three nodes it's very

00:19:48,999 --> 00:19:53,259
easy if you have to 100 it starts to

00:19:51,340 --> 00:19:54,760
become a problem most of the time you

00:19:53,259 --> 00:19:58,059
don't care but sometimes you

00:19:54,760 --> 00:20:01,000
and when you're procrastinating plus one

00:19:58,059 --> 00:20:03,610
tolerant so if this node dies I don't

00:20:01,000 --> 00:20:05,559
know where to put this instance then you

00:20:03,610 --> 00:20:07,840
don't want to do to take your pen and

00:20:05,559 --> 00:20:10,600
paper and calculate how to make it a ten

00:20:07,840 --> 00:20:12,850
plus one tolerance so H a it will solve

00:20:10,600 --> 00:20:14,590
that h space will tell you how many

00:20:12,850 --> 00:20:16,690
virtual machines you can fit before you

00:20:14,590 --> 00:20:22,780
need to buy new hardware or move some

00:20:16,690 --> 00:20:25,540
into the cloud and plus 1 h bar will

00:20:22,780 --> 00:20:28,030
rebalance it to to make it more failure

00:20:25,540 --> 00:20:29,530
tolerant and indeed allow you to fit

00:20:28,030 --> 00:20:33,460
more virtual machines or things like

00:20:29,530 --> 00:20:35,140
that so you can control the ready over

00:20:33,460 --> 00:20:37,179
the command line these are the examples

00:20:35,140 --> 00:20:39,160
you can use a web manager that was

00:20:37,179 --> 00:20:41,290
developed originally by journal that now

00:20:39,160 --> 00:20:44,590
is maintained by Oregon State open

00:20:41,290 --> 00:20:46,809
source labs which the web manager itself

00:20:44,590 --> 00:20:48,970
towards to vanity through or iseul HTTP

00:20:46,809 --> 00:20:52,630
interface which is compatible between

00:20:48,970 --> 00:20:54,250
versions and we basically is the

00:20:52,630 --> 00:20:57,610
programmable way to twelve token data

00:20:54,250 --> 00:21:00,160
cluster finally where's on the cluster i

00:20:57,610 --> 00:21:03,100
looks interface it's just a JSON over

00:21:00,160 --> 00:21:07,150
UNIX socket that both the command line

00:21:03,100 --> 00:21:10,840
tool and very API demon or edge tools

00:21:07,150 --> 00:21:12,280
used to talk to master they're all quite

00:21:10,840 --> 00:21:14,110
programmable like the command line you

00:21:12,280 --> 00:21:18,940
can write bash scripts over ram and

00:21:14,110 --> 00:21:22,360
things like that job queue operations

00:21:18,940 --> 00:21:24,429
you can check active jobs instance rain

00:21:22,360 --> 00:21:27,549
stalls in progress or evacuations in

00:21:24,429 --> 00:21:30,340
progress stop some of them watch the job

00:21:27,549 --> 00:21:33,100
the progress of a job or see why it

00:21:30,340 --> 00:21:35,530
failed and things like that so for

00:21:33,100 --> 00:21:37,870
example you can start an operation log

00:21:35,530 --> 00:21:40,690
out of the console and check result they

00:21:37,870 --> 00:21:43,299
later or submit an operation through the

00:21:40,690 --> 00:21:46,000
web interface or remote API daemon and

00:21:43,299 --> 00:21:49,260
then check on the cluster what went

00:21:46,000 --> 00:21:49,260
wrong if something went wrong

00:21:50,400 --> 00:21:56,799
managing node groups adding moving nodes

00:21:54,490 --> 00:21:59,380
between node groups this allows you

00:21:56,799 --> 00:22:01,450
basically to divide your cluster into

00:21:59,380 --> 00:22:03,400
separate groups with our nearer to each

00:22:01,450 --> 00:22:07,299
other energy for example we will never

00:22:03,400 --> 00:22:07,670
schedule a virtual machine across no

00:22:07,299 --> 00:22:09,620
true

00:22:07,670 --> 00:22:13,070
it will keep it inside the node group if

00:22:09,620 --> 00:22:16,130
it has a secondary storage this helps

00:22:13,070 --> 00:22:18,770
with things like well for example you

00:22:16,130 --> 00:22:20,420
have a rock you have a switch when you

00:22:18,770 --> 00:22:23,810
have an uplink out of a switch which is

00:22:20,420 --> 00:22:25,610
smaller than or for example you have one

00:22:23,810 --> 00:22:27,770
gigabit between the switch and then one

00:22:25,610 --> 00:22:29,870
gigabit out so you don't want all your

00:22:27,770 --> 00:22:31,640
diabetes to be between this switch and

00:22:29,870 --> 00:22:33,770
another switch you want to keep most of

00:22:31,640 --> 00:22:34,400
them inside varrock so this allows you

00:22:33,770 --> 00:22:36,530
to do that

00:22:34,400 --> 00:22:38,210
but it can be used in many other ways

00:22:36,530 --> 00:22:41,000
for example if you want to make sure

00:22:38,210 --> 00:22:42,830
that your primaries and secondaries are

00:22:41,000 --> 00:22:45,680
not in the same rack when you can create

00:22:42,830 --> 00:22:48,140
two node groups that are actually across

00:22:45,680 --> 00:22:50,390
rocks and make sure that this doesn't

00:22:48,140 --> 00:22:52,490
happen or in that case better modifying

00:22:50,390 --> 00:22:58,520
Hale to to enforce some of these

00:22:52,490 --> 00:23:00,620
policies so what's missing if you want

00:22:58,520 --> 00:23:02,420
to run ganeti in production well this

00:23:00,620 --> 00:23:05,000
allows you to do a lot but when you

00:23:02,420 --> 00:23:07,970
probably want to do monitoring check

00:23:05,000 --> 00:23:11,570
host disks check the memory state check

00:23:07,970 --> 00:23:13,250
the load of hosts like a physical host

00:23:11,570 --> 00:23:18,650
and virtual host and move things around

00:23:13,250 --> 00:23:21,110
or do stuff as things happen you may

00:23:18,650 --> 00:23:25,700
want to trigger events evacuate nodes

00:23:21,110 --> 00:23:28,880
Center repairs rather rebalance and then

00:23:25,700 --> 00:23:31,010
you may want to automate lots of things

00:23:28,880 --> 00:23:32,930
through configuration management so you

00:23:31,010 --> 00:23:34,940
don't want when the node comes up to

00:23:32,930 --> 00:23:36,380
actually apply all the things you need

00:23:34,940 --> 00:23:38,300
to job before joining into the class

00:23:36,380 --> 00:23:40,670
that you want just you're not to come up

00:23:38,300 --> 00:23:42,170
and know what it needs to be and we

00:23:40,670 --> 00:23:45,890
didn't want to reinvent configuration

00:23:42,170 --> 00:23:48,200
management right and when you want

00:23:45,890 --> 00:23:50,600
self-service use so we give you

00:23:48,200 --> 00:23:54,740
programmable interfaces but in order to

00:23:50,600 --> 00:23:57,710
have a full is support you want your

00:23:54,740 --> 00:23:59,930
users to be able to like add or remove

00:23:57,710 --> 00:24:01,610
machines or to reboot their machines now

00:23:59,930 --> 00:24:04,790
we don't know who your users are we

00:24:01,610 --> 00:24:07,940
don't have access to your database of

00:24:04,790 --> 00:24:10,910
users or machine ownership so and we

00:24:07,940 --> 00:24:13,760
didn't want you to me to need to use a

00:24:10,910 --> 00:24:16,190
full stack in which you need to use all

00:24:13,760 --> 00:24:17,960
our components for everything so we just

00:24:16,190 --> 00:24:19,760
decided to keep it simple and allow you

00:24:17,960 --> 00:24:20,370
to have a component that manages this

00:24:19,760 --> 00:24:26,730
association

00:24:20,370 --> 00:24:29,309
outside of ganeti so how do you get it

00:24:26,730 --> 00:24:34,409
in like a data center just what's the

00:24:29,309 --> 00:24:36,630
time so what we know 24 okay so should

00:24:34,409 --> 00:24:41,520
we go through karate at Google or do you

00:24:36,630 --> 00:24:45,679
ever do internals can it Google up your

00:24:41,520 --> 00:24:51,179
hands internals

00:24:45,679 --> 00:24:52,830
nobody's for internals good so how do we

00:24:51,179 --> 00:24:56,399
use connecting a Google Data Center we

00:24:52,830 --> 00:24:59,130
have this cluster veremos API and this

00:24:56,399 --> 00:25:01,740
is H access server two ways we talk to

00:24:59,130 --> 00:25:04,350
the master node which allows us to do

00:25:01,740 --> 00:25:08,760
operations on the cluster and then we

00:25:04,350 --> 00:25:11,789
have what does that say well those are

00:25:08,760 --> 00:25:14,940
basically node groups one Parag

00:25:11,789 --> 00:25:17,309
we have monitoring coming out of every

00:25:14,940 --> 00:25:19,950
node so monitoring checks the status of

00:25:17,309 --> 00:25:24,480
every nodes and get this information out

00:25:19,950 --> 00:25:26,149
there some fleet management so the feed

00:25:24,480 --> 00:25:29,490
management tool or fleet-wide

00:25:26,149 --> 00:25:32,390
they run in our closed source evil

00:25:29,490 --> 00:25:35,190
production environment unfortunately and

00:25:32,390 --> 00:25:39,179
they told to all the clusters and make

00:25:35,190 --> 00:25:41,940
sure that we were machines run and job

00:25:39,179 --> 00:25:44,820
they submit jobs they talk to the Google

00:25:41,940 --> 00:25:46,830
user database and association between

00:25:44,820 --> 00:25:50,130
Google users and Google virtual machines

00:25:46,830 --> 00:25:51,960
owners and they allow users to run

00:25:50,130 --> 00:25:55,620
operations of little machines what what

00:25:51,960 --> 00:25:58,770
I was telling you about before they also

00:25:55,620 --> 00:26:01,620
can move digital machines from a caster

00:25:58,770 --> 00:26:04,010
to another reality has some features in

00:26:01,620 --> 00:26:07,200
order to do that but when you need the

00:26:04,010 --> 00:26:09,690
orchestrator outside that tells where to

00:26:07,200 --> 00:26:11,220
clusters to start talking when were to

00:26:09,690 --> 00:26:13,140
clusters will do it between themselves

00:26:11,220 --> 00:26:15,690
you don't need to move the original

00:26:13,140 --> 00:26:17,880
machine to a central system and then to

00:26:15,690 --> 00:26:20,669
the cluster but you need to tell the two

00:26:17,880 --> 00:26:24,440
clusters to cooperate from a central

00:26:20,669 --> 00:26:26,940
system that speaks to our API

00:26:24,440 --> 00:26:29,960
how do provision instances well an

00:26:26,940 --> 00:26:32,610
allocation request comes from a user

00:26:29,960 --> 00:26:33,950
this can be a ticket this can be some

00:26:32,610 --> 00:26:38,400
other kind of

00:26:33,950 --> 00:26:41,930
internal Google system but this also a

00:26:38,400 --> 00:26:44,690
tool we call Virgil that will actually

00:26:41,930 --> 00:26:48,510
update the Google machine database and

00:26:44,690 --> 00:26:51,060
will speak from monitor take from

00:26:48,510 --> 00:26:52,590
monitoring the capacity so monitoring

00:26:51,060 --> 00:26:55,770
will know the capacity of all the

00:26:52,590 --> 00:26:58,200
casters these are basically tools that

00:26:55,770 --> 00:27:00,690
are universally useful but in this case

00:26:58,200 --> 00:27:02,480
we already had them at Google so we need

00:27:00,690 --> 00:27:04,860
to integrate with those rather than

00:27:02,480 --> 00:27:07,440
implementing from from scratch from

00:27:04,860 --> 00:27:09,270
furgoneta so this means that we

00:27:07,440 --> 00:27:12,060
implemented virgil to translate these

00:27:09,270 --> 00:27:15,900
tools and the open source world which

00:27:12,060 --> 00:27:18,870
kanata is in so version one knows which

00:27:15,900 --> 00:27:22,830
cluster has more space among the ones

00:27:18,870 --> 00:27:24,840
that are very tight so for example we

00:27:22,830 --> 00:27:27,200
have that kinetic caster which is of

00:27:24,840 --> 00:27:31,170
general any other visual machine

00:27:27,200 --> 00:27:32,880
ubiquity runs user visual workstations

00:27:31,170 --> 00:27:34,890
so the location request is for our

00:27:32,880 --> 00:27:38,220
station it will go for to ubiquity

00:27:34,890 --> 00:27:40,200
cluster if it is for general service it

00:27:38,220 --> 00:27:42,450
would go to a general cluster and it

00:27:40,200 --> 00:27:48,060
will choose one of them according to

00:27:42,450 --> 00:27:50,700
capacity how do we run repairs so

00:27:48,060 --> 00:27:51,240
monitoring the texts that a node is

00:27:50,700 --> 00:27:54,420
broken

00:27:51,240 --> 00:27:57,120
it tells Euripides or Euripides finds

00:27:54,420 --> 00:27:59,520
out from an alert manager knowing that

00:27:57,120 --> 00:28:01,650
there are alerts from an old and tells

00:27:59,520 --> 00:28:05,130
virgil please send this machine to

00:28:01,650 --> 00:28:07,590
repairs virtual telecaster that there is

00:28:05,130 --> 00:28:10,410
a broken machine so the broken machine

00:28:07,590 --> 00:28:13,020
gets evacuated virtual machines get live

00:28:10,410 --> 00:28:15,780
migrated out if we call this in time or

00:28:13,020 --> 00:28:18,210
failed over if we didn't and the machine

00:28:15,780 --> 00:28:20,880
is actually down the machine database

00:28:18,210 --> 00:28:23,550
gets updated and such a machine to

00:28:20,880 --> 00:28:26,370
running in repair status and then people

00:28:23,550 --> 00:28:28,800
with skateboards will go over do stuff

00:28:26,370 --> 00:28:31,560
and give us the machine back running

00:28:28,800 --> 00:28:33,870
without us knowing what exactly went on

00:28:31,560 --> 00:28:36,000
the new machine is runner already

00:28:33,870 --> 00:28:36,450
installed and we can read it to the

00:28:36,000 --> 00:28:43,050
fleet

00:28:36,450 --> 00:28:45,290
oh here it is so one where people fixing

00:28:43,050 --> 00:28:45,290
the machine

00:28:47,010 --> 00:28:52,190
they market this in the Machine database

00:28:48,990 --> 00:28:55,740
so they say this machine is now okay

00:28:52,190 --> 00:28:57,810
Virgil notices and just waits for 24

00:28:55,740 --> 00:28:59,310
hours does nothing and just watches the

00:28:57,810 --> 00:29:01,800
machine because chances are it will

00:28:59,310 --> 00:29:04,650
break again because they pretended to

00:29:01,800 --> 00:29:06,780
fix well maybe did you know or maybe the

00:29:04,650 --> 00:29:10,320
new hardware was in faulty so just watch

00:29:06,780 --> 00:29:13,260
it if after 24 hours with no work load

00:29:10,320 --> 00:29:18,090
verse nothing wrong with a machine then

00:29:13,260 --> 00:29:19,890
we tell Virgil to basically reintegrate

00:29:18,090 --> 00:29:23,610
the machine so Virgil

00:29:19,890 --> 00:29:25,590
runs first runs trainees which is a tool

00:29:23,610 --> 00:29:29,160
that basically the configuration

00:29:25,590 --> 00:29:31,080
management it knows about when all the

00:29:29,160 --> 00:29:32,400
knows we should network interfaces are

00:29:31,080 --> 00:29:34,800
configured and things like that

00:29:32,400 --> 00:29:36,750
this could easily be puppet actually

00:29:34,800 --> 00:29:39,960
dradis is Ray implemented on puppet

00:29:36,750 --> 00:29:44,250
nowadays so it didn't use to be but

00:29:39,960 --> 00:29:47,550
that's just historic craft and finally

00:29:44,250 --> 00:29:49,740
just through rap i PRI tells the Craster

00:29:47,550 --> 00:29:52,740
add again this node and the cluster

00:29:49,740 --> 00:29:55,110
reads it and now we can rather rebalance

00:29:52,740 --> 00:30:02,090
and schedule little machines on top of

00:29:55,110 --> 00:30:05,280
it so who runs karate we do geonet does

00:30:02,090 --> 00:30:07,620
DSA does you heard about it before we're

00:30:05,280 --> 00:30:10,860
experimenting with it to run little

00:30:07,620 --> 00:30:12,480
machines for Debian FSF France

00:30:10,860 --> 00:30:14,610
Oregon State open source lab and

00:30:12,480 --> 00:30:16,710
actually quite a lot more people in

00:30:14,610 --> 00:30:18,900
smaller developments we have lots of

00:30:16,710 --> 00:30:22,020
requests on mailing list that we have no

00:30:18,900 --> 00:30:24,660
clue who are we from or what they do

00:30:22,020 --> 00:30:26,310
with it we get a question when you get

00:30:24,660 --> 00:30:28,050
another question after a few months so

00:30:26,310 --> 00:30:30,570
we guess which they continue to use it

00:30:28,050 --> 00:30:33,560
and somehow it works for them it's

00:30:30,570 --> 00:30:36,240
particularly good if you don't want to

00:30:33,560 --> 00:30:38,490
invest a lot into building a huge

00:30:36,240 --> 00:30:40,830
infrastructure we've all seen the open

00:30:38,490 --> 00:30:43,770
stock diagram today it was like you need

00:30:40,830 --> 00:30:46,050
to set up these 25 components and make

00:30:43,770 --> 00:30:48,690
sure we all run together and like we all

00:30:46,050 --> 00:30:51,480
had headaches at some point this is a

00:30:48,690 --> 00:30:53,040
lot simpler just a couple of commands

00:30:51,480 --> 00:30:55,230
and you're up and running and you can

00:30:53,040 --> 00:30:58,310
actually use it you can check this out

00:30:55,230 --> 00:30:59,879
that code of Google comping and a tea

00:30:58,310 --> 00:31:02,719
search for garage

00:30:59,879 --> 00:31:07,349
Google tried submit patches if you can

00:31:02,719 --> 00:31:10,190
talk to us give us suggestions we have

00:31:07,349 --> 00:31:12,419
some big changes going on the

00:31:10,190 --> 00:31:15,119
development team is going to change our

00:31:12,419 --> 00:31:16,829
face and things like that so a lot will

00:31:15,119 --> 00:31:19,679
change but hopefully a lot will stay the

00:31:16,829 --> 00:31:25,579
same as in hopefully we'll keep it open

00:31:19,679 --> 00:31:28,739
source keep it good and easy to use and

00:31:25,579 --> 00:31:32,429
implement new features that will make it

00:31:28,739 --> 00:31:35,399
even more useful any question feedback

00:31:32,429 --> 00:31:38,549
ideas flames know that if you don't have

00:31:35,399 --> 00:31:41,429
any I might move on to how we did it

00:31:38,549 --> 00:31:53,149
internal spar so you may want to ask

00:31:41,429 --> 00:31:53,149
some questions anybody no no not really

00:31:54,379 --> 00:32:00,329
so one more announcement by the way if

00:31:58,589 --> 00:32:01,709
you can code in Python and Haskell and

00:32:00,329 --> 00:32:04,440
you're interested in this we're hiring

00:32:01,709 --> 00:32:08,099
software developers in the Google Munich

00:32:04,440 --> 00:32:10,589
office furgoneta if you have friends

00:32:08,099 --> 00:32:16,289
that are interested in this tell them to

00:32:10,589 --> 00:32:17,729
contact me make send a cv it's actually

00:32:16,289 --> 00:32:19,739
quite great you get to work for Google

00:32:17,729 --> 00:32:23,789
and on open source products not

00:32:19,739 --> 00:32:24,449
everybody can do that don't quote me

00:32:23,789 --> 00:32:34,409
with the press

00:32:24,449 --> 00:32:39,659
oh wait I'm on record okay see what the

00:32:34,409 --> 00:32:42,719
time is it's 32 let's do some of the

00:32:39,659 --> 00:32:50,129
internals why not are you sure no

00:32:42,719 --> 00:32:53,969
questions okay so what are the main

00:32:50,129 --> 00:32:56,009
kinetic components we we said that we

00:32:53,969 --> 00:32:58,769
have our users and we have our web

00:32:56,009 --> 00:33:02,759
interface that speaks rest to this

00:32:58,769 --> 00:33:05,999
remote API daemon both for mo TPI daemon

00:33:02,759 --> 00:33:09,239
and the client command-line tools speak

00:33:05,999 --> 00:33:12,930
this Luxy protocol to master d mustardy

00:33:09,239 --> 00:33:15,930
contains the job queue finally

00:33:12,930 --> 00:33:20,130
30 uses an RPC protocol which is

00:33:15,930 --> 00:33:27,090
basically a JSON based RPC I believe to

00:33:20,130 --> 00:33:29,610
speak to the nodes let's go on until

00:33:27,090 --> 00:33:33,870
it's not too complicated it's really too

00:33:29,610 --> 00:33:36,390
complicated that's it's 5:00 p.m.

00:33:33,870 --> 00:33:39,600
let's let's quit that here if you don't

00:33:36,390 --> 00:33:41,580
have particular questions this basically

00:33:39,600 --> 00:33:44,250
allows you and if you go back to my

00:33:41,580 --> 00:33:46,260
awesome talk you can see better where

00:33:44,250 --> 00:33:47,700
the various components fit into each

00:33:46,260 --> 00:33:51,300
other and if you want to submit a patch

00:33:47,700 --> 00:33:56,110
this should help you understand what to

00:33:51,300 --> 00:34:01,790
modify on things but yeah done thank you

00:33:56,110 --> 00:34:01,790

YouTube URL: https://www.youtube.com/watch?v=4ZCSBiEKzJo


