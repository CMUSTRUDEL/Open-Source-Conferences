Title: Build Debian with another compiler
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Sylvestre Ledru

At: DebConf12
https://debconf12.debconf.org/
Room: Aula Magna
Scheduled start: 2012-07-10 15:00:00
Captions: 
	00:00:00,030 --> 00:00:05,040
so we will now talk about a building

00:00:03,210 --> 00:00:09,570
debian with another compiler by

00:00:05,040 --> 00:00:12,630
Sylvester allotrope and will be my guest

00:00:09,570 --> 00:00:15,080
thank you so the weather is not very

00:00:12,630 --> 00:00:17,789
good so I'm going to try to speak loud

00:00:15,080 --> 00:00:19,439
that you can't hear me so the first

00:00:17,789 --> 00:00:22,260
thing that I had to say the disclaimer

00:00:19,439 --> 00:00:26,279
is that I'm not paid by Apple to do this

00:00:22,260 --> 00:00:28,080
work and I'm not into the GPL versus BSD

00:00:26,279 --> 00:00:30,330
license description I know that it's

00:00:28,080 --> 00:00:32,610
matter for some some people in Debian

00:00:30,330 --> 00:00:35,460
but for me it is I don't care actually

00:00:32,610 --> 00:00:37,829
of this issue so what do we have

00:00:35,460 --> 00:00:40,020
currently in Debian most of you I'm sure

00:00:37,829 --> 00:00:42,570
you are already aware of that but all

00:00:40,020 --> 00:00:44,940
the C C++ and Objective C that we've got

00:00:42,570 --> 00:00:47,670
in the archive our build with GCC on

00:00:44,940 --> 00:00:50,610
every arch so why I'm not trying to

00:00:47,670 --> 00:00:52,770
rebuild that another archive another

00:00:50,610 --> 00:00:53,640
compiler sorry the main reason is

00:00:52,770 --> 00:00:55,680
because we can

00:00:53,640 --> 00:00:57,780
so it's something great with Debian is

00:00:55,680 --> 00:00:59,340
that if I want to do something I won't

00:00:57,780 --> 00:01:01,020
have any burrs coming at me saying no

00:00:59,340 --> 00:01:03,030
you cannot do that you are not allowed

00:01:01,020 --> 00:01:06,299
to do that so I can try to do that and

00:01:03,030 --> 00:01:08,310
nobody told me to stop so the other

00:01:06,299 --> 00:01:10,740
reason I try to do that is because it is

00:01:08,310 --> 00:01:12,330
fun it was very and it is a very nice

00:01:10,740 --> 00:01:15,330
work to do that because si Lang is

00:01:12,330 --> 00:01:17,820
behaving the same way CCC is on most of

00:01:15,330 --> 00:01:20,490
the arguments so it is not very hard job

00:01:17,820 --> 00:01:23,430
but it is very fun and enjoyable to do

00:01:20,490 --> 00:01:27,150
and most you see if I'm doing this work

00:01:23,430 --> 00:01:29,159
it is because the more you use compilers

00:01:27,150 --> 00:01:31,049
and more all you can find I will show

00:01:29,159 --> 00:01:33,390
you many example where see lines they

00:01:31,049 --> 00:01:34,890
take things at jccc can not so it really

00:01:33,390 --> 00:01:38,670
improves the code that we've got into

00:01:34,890 --> 00:01:41,460
the archive as the code is also the more

00:01:38,670 --> 00:01:44,250
you use different compiler the more the

00:01:41,460 --> 00:01:45,780
code is is correct and it's more

00:01:44,250 --> 00:01:47,729
portable that's mean if you use some

00:01:45,780 --> 00:01:49,950
specific GCC extension you are pretty

00:01:47,729 --> 00:01:52,380
sure that it won't work with Visual

00:01:49,950 --> 00:01:54,299
Studio or intent compilers and so on so

00:01:52,380 --> 00:01:55,829
it's very important with this kind of

00:01:54,299 --> 00:01:58,530
tools that you make sure that the code

00:01:55,829 --> 00:02:02,399
will run on many compilers and platform

00:01:58,530 --> 00:02:05,189
and operating systems and another

00:02:02,399 --> 00:02:07,259
advantage of especially this compiler it

00:02:05,189 --> 00:02:08,670
is because there is a lot of investment

00:02:07,259 --> 00:02:11,069
on this compiler

00:02:08,670 --> 00:02:13,500
by the values actor

00:02:11,069 --> 00:02:17,370
in the embedded field so for example the

00:02:13,500 --> 00:02:19,650
the latest benchmark shows that sealing

00:02:17,370 --> 00:02:24,269
on arm is getting close or sometime

00:02:19,650 --> 00:02:26,609
better than GCC and finally one of the

00:02:24,269 --> 00:02:30,329
thing that I like is we have been able

00:02:26,609 --> 00:02:33,480
in Debian to decode decoupling they

00:02:30,329 --> 00:02:35,970
complete the Linux kernel and we place

00:02:33,480 --> 00:02:38,939
it by two other kernel you know that the

00:02:35,970 --> 00:02:41,849
KGB has the kernel and Earth so what I

00:02:38,939 --> 00:02:43,769
like to do is also replace GCC by

00:02:41,849 --> 00:02:45,450
another compiler I'm not talking about

00:02:43,769 --> 00:02:49,950
removing this is about providing an

00:02:45,450 --> 00:02:51,780
alternative so swim with just lost

00:02:49,950 --> 00:02:57,959
electricity so we are to reinitialize

00:02:51,780 --> 00:03:01,139
the video system so the tools that I

00:02:57,959 --> 00:03:02,909
worked with was LLVM and si Lang so they

00:03:01,139 --> 00:03:04,049
did a nice logo you can see apples

00:03:02,909 --> 00:03:06,290
they've got some money so he can buy

00:03:04,049 --> 00:03:09,930
some some nice logo

00:03:06,290 --> 00:03:13,590
it started as academic project by a guy

00:03:09,930 --> 00:03:15,540
called Chris lat now it was designing at

00:03:13,590 --> 00:03:18,239
the beginning to be a versatile platform

00:03:15,540 --> 00:03:21,299
that you can use for various research

00:03:18,239 --> 00:03:24,419
subject actually did that while he was

00:03:21,299 --> 00:03:27,060
doing his ph.d and he used to be also

00:03:24,419 --> 00:03:30,540
GCC developer and so funny story that he

00:03:27,060 --> 00:03:34,049
proposed LLVM as a new version of GCC

00:03:30,540 --> 00:03:36,659
the way purpose that was not really well

00:03:34,049 --> 00:03:39,419
accepted in GCC community so we failed

00:03:36,659 --> 00:03:41,370
to do that but since he he had a pretty

00:03:39,419 --> 00:03:44,250
good idea

00:03:41,370 --> 00:03:46,859
people from Apple contacted him in 2005

00:03:44,250 --> 00:03:50,129
and hire him and build the team one at

00:03:46,859 --> 00:03:52,280
11 so the goal for Apple as you know is

00:03:50,129 --> 00:03:55,650
that we are not very open SUSE friendly

00:03:52,280 --> 00:03:57,359
they are trying to the we're trying and

00:03:55,650 --> 00:03:59,790
they succeeded to build an alternative

00:03:57,359 --> 00:04:01,889
to GCC with another license which is way

00:03:59,790 --> 00:04:04,349
more convenient for them

00:04:01,889 --> 00:04:06,269
so basically a lot of em is BS dec Liang

00:04:04,349 --> 00:04:10,409
is the same and most of the tools in the

00:04:06,269 --> 00:04:12,540
ecosystem are under this license to now

00:04:10,409 --> 00:04:14,819
it has a very strong community that

00:04:12,540 --> 00:04:18,720
means that many academics are now doing

00:04:14,819 --> 00:04:21,359
the research on LLVM mostly because GCC

00:04:18,720 --> 00:04:22,290
is pretty up tracking it's not because

00:04:21,359 --> 00:04:23,910
it is

00:04:22,290 --> 00:04:26,160
not good but it is mainly because this

00:04:23,910 --> 00:04:28,440
is an old software with a lot of legacy

00:04:26,160 --> 00:04:32,070
code it is way easier for new students

00:04:28,440 --> 00:04:36,420
to get into the LLVM because it is 2,000

00:04:32,070 --> 00:04:39,030
code there is also many individuals who

00:04:36,420 --> 00:04:41,310
are involved in GCC and in LLVM because

00:04:39,030 --> 00:04:44,820
it's fun and many cooperation are also

00:04:41,310 --> 00:04:50,160
involved in in this work for example

00:04:44,820 --> 00:04:54,750
Google is investing a lot needs Nvidia

00:04:50,160 --> 00:04:57,600
etc so what is sealing sealing or cling

00:04:54,750 --> 00:05:00,810
or long as you wish you can pronounce it

00:04:57,600 --> 00:05:03,240
in many different ways it is a cc per

00:05:00,810 --> 00:05:05,310
person Objective C compiler I know that

00:05:03,240 --> 00:05:08,400
there are some people who are planning

00:05:05,310 --> 00:05:10,890
to build a Fortran compiler with C

00:05:08,400 --> 00:05:13,620
language but I don't know how fast they

00:05:10,890 --> 00:05:15,660
went so it's fully based on elevate that

00:05:13,620 --> 00:05:18,960
means that it is two different packages

00:05:15,660 --> 00:05:21,440
but clang is using a lot LLVM behind to

00:05:18,960 --> 00:05:24,360
build the binaries and do some checking

00:05:21,440 --> 00:05:28,350
it is now the default compiler for Mac

00:05:24,360 --> 00:05:30,240
OS X in Xcode and the fall from FreeBSD

00:05:28,350 --> 00:05:34,140
switch in the last release you have

00:05:30,240 --> 00:05:37,650
sources at the bottom it has some

00:05:34,140 --> 00:05:40,170
advantages so one of them is a base code

00:05:37,650 --> 00:05:42,720
is more recent as you know when you when

00:05:40,170 --> 00:05:44,940
we are writing code now it is easier and

00:05:42,720 --> 00:05:47,820
in the link code which has been whitened

00:05:44,940 --> 00:05:49,110
thirty years ago as I said previously

00:05:47,820 --> 00:05:52,020
there is strong interest from

00:05:49,110 --> 00:05:54,210
manufacturer because the code is easy to

00:05:52,020 --> 00:05:58,320
work it's easy to provide new backends

00:05:54,210 --> 00:05:59,820
as there is plenty of tests so on the

00:05:58,320 --> 00:06:01,800
mainland is you can see that not only

00:05:59,820 --> 00:06:05,640
Apple is contributing but many other

00:06:01,800 --> 00:06:08,430
actors and it is supposed to be faster

00:06:05,640 --> 00:06:10,470
to build codes and GCC so an example I'm

00:06:08,430 --> 00:06:12,770
on that delete job I'm working for

00:06:10,470 --> 00:06:15,870
scilab in numerical computing software

00:06:12,770 --> 00:06:19,760
they also figure from Jenkins that we

00:06:15,870 --> 00:06:22,320
are using with GCC which is 24 minutes I

00:06:19,760 --> 00:06:24,630
have to explain that we are also in this

00:06:22,320 --> 00:06:26,010
24 minute buildings the documentation

00:06:24,630 --> 00:06:28,680
some tests and so on

00:06:26,010 --> 00:06:32,160
so it is not on it is not only about

00:06:28,680 --> 00:06:35,100
building C or C++ and C Lang is 20

00:06:32,160 --> 00:06:35,940
minutes who we we have 20 minutes more

00:06:35,100 --> 00:06:40,080
sorry

00:06:35,940 --> 00:06:41,880
time to spend here I'm going to present

00:06:40,080 --> 00:06:45,630
a lot of source code I hope you can read

00:06:41,880 --> 00:06:49,200
it correctly it has many other

00:06:45,630 --> 00:06:52,440
advantages is that it is doing very

00:06:49,200 --> 00:06:54,150
cleaver checks so in this code GCC as

00:06:52,440 --> 00:06:55,890
you can see on the top right it's not

00:06:54,150 --> 00:06:58,410
able to detect it with a mistake in the

00:06:55,890 --> 00:07:00,120
program nation and here I will you

00:06:58,410 --> 00:07:02,520
abused to see what is wrong but if you

00:07:00,120 --> 00:07:05,130
are reading a full base card it can be

00:07:02,520 --> 00:07:07,650
very hard to spot so we see Lang si Lang

00:07:05,130 --> 00:07:09,390
is able to see this code very easily so

00:07:07,650 --> 00:07:12,450
in this case it is triggering a warning

00:07:09,390 --> 00:07:13,980
that I changed with the W error but it's

00:07:12,450 --> 00:07:16,080
really helped when you are doing some

00:07:13,980 --> 00:07:18,870
code and I will show plenty of example

00:07:16,080 --> 00:07:21,330
it has a side effect also which is very

00:07:18,870 --> 00:07:23,940
interesting there is a new competition

00:07:21,330 --> 00:07:27,900
in the compiler so this one is a URL

00:07:23,940 --> 00:07:28,770
that has been posted on the GCC wiki a

00:07:27,900 --> 00:07:33,000
few weeks ago

00:07:28,770 --> 00:07:35,190
basically there are upset that si Lang

00:07:33,000 --> 00:07:37,500
people are saying that the warning are

00:07:35,190 --> 00:07:41,010
way better and they are way better also

00:07:37,500 --> 00:07:42,750
they trying to show that in the next 4.8

00:07:41,010 --> 00:07:45,450
release of this disease warning will be

00:07:42,750 --> 00:07:48,419
better and actually this page is an

00:07:45,450 --> 00:07:51,540
answer of this one which was a list of

00:07:48,419 --> 00:07:55,050
all the advantages of playing over JCCC

00:07:51,540 --> 00:07:57,840
so even if they can stick with GCC which

00:07:55,050 --> 00:07:59,400
will be the case for years still it is

00:07:57,840 --> 00:08:01,770
interesting because it's really improve

00:07:59,400 --> 00:08:04,470
also GCC so this is developer are taking

00:08:01,770 --> 00:08:06,900
some ideas from the LLVM community and

00:08:04,470 --> 00:08:09,930
so on so it's very good for the

00:08:06,900 --> 00:08:12,000
ecosystem of free software so I'm going

00:08:09,930 --> 00:08:14,340
to present more closely what I've done

00:08:12,000 --> 00:08:17,250
for Debian in this field so I try to

00:08:14,340 --> 00:08:20,550
rebuild Debian archive with ceiling so

00:08:17,250 --> 00:08:21,930
the meta that I used and which has been

00:08:20,550 --> 00:08:25,020
published on ceiling that they do not

00:08:21,930 --> 00:08:27,780
net is this one I regret is crappy it is

00:08:25,020 --> 00:08:30,330
was just to make an experience so

00:08:27,780 --> 00:08:35,310
basically I am replacing the GCC command

00:08:30,330 --> 00:08:38,729
by ceiling since ceiling is behaving the

00:08:35,310 --> 00:08:40,620
same way GCC is also argument or almost

00:08:38,729 --> 00:08:42,810
all the arguments are correctly and

00:08:40,620 --> 00:08:45,050
understood and processed by ceilings so

00:08:42,810 --> 00:08:48,420
it's very straightforward to switch from

00:08:45,050 --> 00:08:49,970
GCC to ceiling for C and C plus percent

00:08:48,420 --> 00:08:54,300
Objective C

00:08:49,970 --> 00:08:57,720
so I must say that in this case I only

00:08:54,300 --> 00:08:59,820
been able I always did by rebuilding the

00:08:57,720 --> 00:09:01,980
package I haven't tasted the quality of

00:08:59,820 --> 00:09:04,140
the binary generated I haven't tasted

00:09:01,980 --> 00:09:07,170
the size of the binary generated neither

00:09:04,140 --> 00:09:09,510
the performances it is not what matters

00:09:07,170 --> 00:09:12,030
to me at the moment I think we will do

00:09:09,510 --> 00:09:13,710
that after but for now it is if we are

00:09:12,030 --> 00:09:14,240
able to rebuild it it already a good

00:09:13,710 --> 00:09:17,670
thing

00:09:14,240 --> 00:09:20,370
so I publish the result last February

00:09:17,670 --> 00:09:23,460
so in the archive that we had at this

00:09:20,370 --> 00:09:26,100
time eight point eight percent of the

00:09:23,460 --> 00:09:28,170
packages failed so it is a quite good

00:09:26,100 --> 00:09:31,470
number and quite unexpected I was

00:09:28,170 --> 00:09:33,780
expecting way more failure in the 2.9 we

00:09:31,470 --> 00:09:36,210
had fifteen percent of the package which

00:09:33,780 --> 00:09:38,760
were failing so the number are pretty

00:09:36,210 --> 00:09:41,640
good but I have to say also that the

00:09:38,760 --> 00:09:43,830
Python module are included into these

00:09:41,640 --> 00:09:47,130
ones the Java module super so they on

00:09:43,830 --> 00:09:49,140
the number are good but sorry the number

00:09:47,130 --> 00:09:51,810
are good but you are also to take an

00:09:49,140 --> 00:09:57,170
account that many packages are not build

00:09:51,810 --> 00:10:01,350
with C or C++ so the number with the 3.1

00:09:57,170 --> 00:10:03,750
we did we build a few weeks ago so the

00:10:01,350 --> 00:10:05,430
number increased so we have 12 percent

00:10:03,750 --> 00:10:08,250
of the packages which failed I'm going

00:10:05,430 --> 00:10:10,800
to explain why this change so we I

00:10:08,250 --> 00:10:13,680
publish the result yesterday evening on

00:10:10,800 --> 00:10:15,780
my websites in hang the debian dotnet so

00:10:13,680 --> 00:10:18,750
you have all the failure we did the we

00:10:15,780 --> 00:10:20,400
build with a new system of luca news

00:10:18,750 --> 00:10:22,500
bond we built the archive from the past

00:10:20,400 --> 00:10:26,310
we were using a french grid computing

00:10:22,500 --> 00:10:30,030
system which was called grid 5000 now we

00:10:26,310 --> 00:10:33,990
have access to the Amazon Cloud so the

00:10:30,030 --> 00:10:37,230
goal for Luca in this field is to allow

00:10:33,990 --> 00:10:39,870
other dg2 access within fixture to

00:10:37,230 --> 00:10:41,640
rebuild the old archive without him to

00:10:39,870 --> 00:10:43,500
be the bottleneck so if you want to do

00:10:41,640 --> 00:10:45,270
some experiment you can ask to Luca he

00:10:43,500 --> 00:10:47,550
would be very happy so we have enough

00:10:45,270 --> 00:10:50,490
money to do something like 60 we build

00:10:47,550 --> 00:10:52,200
per year on the Amazon Cloud so I use

00:10:50,490 --> 00:10:55,170
this one I have got the permission and

00:10:52,200 --> 00:10:58,920
now enable to relaunch it myself so we

00:10:55,170 --> 00:11:00,630
are pretty happy about the result so now

00:10:58,920 --> 00:11:02,180
I'm going to talk a bit know about the

00:11:00,630 --> 00:11:05,600
difference between the

00:11:02,180 --> 00:11:09,530
the 3.0 and 3.1 of ceiling has you so we

00:11:05,600 --> 00:11:11,930
increase in number of failure by 4% so

00:11:09,530 --> 00:11:14,990
one of the most recurrent you are is

00:11:11,930 --> 00:11:15,710
this one so in this case there is an

00:11:14,990 --> 00:11:20,090
argument

00:11:15,710 --> 00:11:23,470
Parham as ppsspp ah ba ba bla which is a

00:11:20,090 --> 00:11:27,200
GCC argument which is used in many

00:11:23,470 --> 00:11:30,140
program in the archive and it generates

00:11:27,200 --> 00:11:34,340
a warning and many packages in the

00:11:30,140 --> 00:11:36,140
archive are built with - w error flag I

00:11:34,340 --> 00:11:38,330
was very surprised by that but many

00:11:36,140 --> 00:11:41,510
package are using this flighting staff

00:11:38,330 --> 00:11:43,880
guy so since si Lang detects that this

00:11:41,510 --> 00:11:45,890
flag is a news doing complication he

00:11:43,880 --> 00:11:49,370
will trigger warning and because of the

00:11:45,890 --> 00:11:54,460
- W error it is going to turn into an

00:11:49,370 --> 00:11:57,260
error one of the other stuffs that

00:11:54,460 --> 00:12:00,440
caused many issue in the archive here 20

00:11:57,260 --> 00:12:03,620
so not that much but 20 + 20 is a lot if

00:12:00,440 --> 00:12:07,010
you contrary if we check that he is

00:12:03,620 --> 00:12:08,780
doing so in this case it is just some

00:12:07,010 --> 00:12:10,160
security check I knew that this

00:12:08,780 --> 00:12:11,900
dissident the same during the last

00:12:10,160 --> 00:12:14,900
release and we've done some work with uh

00:12:11,900 --> 00:12:18,320
turning and and all the security format

00:12:14,900 --> 00:12:20,660
security so this one was not understood

00:12:18,320 --> 00:12:23,720
by GCC by default si Lang is enabling

00:12:20,660 --> 00:12:26,900
way more argument and check than GCC by

00:12:23,720 --> 00:12:29,510
default so I'm going to make a quick

00:12:26,900 --> 00:12:30,740
overview of the values AHA that I found

00:12:29,510 --> 00:12:32,900
in the archive we're building the

00:12:30,740 --> 00:12:34,970
archive so this one is funny it is one

00:12:32,900 --> 00:12:37,910
of my favorite is just that developer

00:12:34,970 --> 00:12:40,610
things that if you use o - o and you put

00:12:37,910 --> 00:12:44,810
a number after that it will improve 9

00:12:40,610 --> 00:12:47,930
times better than or 0 1 so this one is

00:12:44,810 --> 00:12:52,040
48 times in the archive we are also one

00:12:47,930 --> 00:12:53,660
of the most uses - oh six some all the

00:12:52,040 --> 00:12:55,670
guy involved in the compiler world

00:12:53,660 --> 00:12:57,980
explained me that in the past it has

00:12:55,670 --> 00:13:00,530
some meaning but it was 20 years ago but

00:12:57,980 --> 00:13:02,930
still many software in the archive are

00:13:00,530 --> 00:13:06,230
still expecting some better performance

00:13:02,930 --> 00:13:08,830
improvement with own I which were using

00:13:06,230 --> 00:13:08,830
is not the case

00:13:09,680 --> 00:13:14,480
well the usual meaning is that it will

00:13:12,319 --> 00:13:16,579
use the highest optimization levels so

00:13:14,480 --> 00:13:19,459
in GCC it is supported to supply any

00:13:16,579 --> 00:13:21,649
number which will trigger as the highest

00:13:19,459 --> 00:13:23,240
video optimization just in case in the

00:13:21,649 --> 00:13:28,100
future somebody introduced higher one

00:13:23,240 --> 00:13:30,019
than three or four no well I did Li si

00:13:28,100 --> 00:13:33,319
Lang should follow and accept any number

00:13:30,019 --> 00:13:34,730
that's the way GCC does yeah but it

00:13:33,319 --> 00:13:38,629
doesn't have any meaning yeah I

00:13:34,730 --> 00:13:41,600
understand your point so there is

00:13:38,629 --> 00:13:44,689
different in behavior so I'm a bit mean

00:13:41,600 --> 00:13:46,610
here because I haven't put W all for

00:13:44,689 --> 00:13:49,339
this easy but this is obviously is able

00:13:46,610 --> 00:13:50,749
to detect this kind of but in Sakai we

00:13:49,339 --> 00:13:54,019
still have one hundred and thirty two

00:13:50,749 --> 00:13:56,449
packages which do which do this kind of

00:13:54,019 --> 00:13:58,129
crap so in this function as you can see

00:13:56,449 --> 00:14:00,829
we are expecting a result and we return

00:13:58,129 --> 00:14:03,019
nothing so first that means that we are

00:14:00,829 --> 00:14:05,499
not able to check the return of this the

00:14:03,019 --> 00:14:08,119
full function and that also means that

00:14:05,499 --> 00:14:11,480
we can get some crap if you are using

00:14:08,119 --> 00:14:13,759
back the result so it is bad cut and I

00:14:11,480 --> 00:14:15,230
think this kind of things helps to

00:14:13,759 --> 00:14:18,529
improve the code that we've got into the

00:14:15,230 --> 00:14:20,269
archive and and not on sale earth but

00:14:18,529 --> 00:14:21,889
upstream if you publish all the Wizards

00:14:20,269 --> 00:14:24,399
they will be able to see that okay is

00:14:21,889 --> 00:14:27,920
this code is crap and we should fix that

00:14:24,399 --> 00:14:31,160
so just to explain here it is a C

00:14:27,920 --> 00:14:33,529
language detecting out of the box the

00:14:31,160 --> 00:14:37,459
the programming error and it is failing

00:14:33,529 --> 00:14:38,929
well GCC except this this code and this

00:14:37,459 --> 00:14:41,959
video so everyone here we are with

00:14:38,929 --> 00:14:44,990
earning a value of the void function so

00:14:41,959 --> 00:14:47,080
this is he here is able to see out of

00:14:44,990 --> 00:14:48,879
the box without any warning

00:14:47,080 --> 00:14:53,720
[Music]

00:14:48,879 --> 00:14:56,269
so error but si Lang considers this

00:14:53,720 --> 00:14:59,899
program nation as an error and stops the

00:14:56,269 --> 00:15:03,769
build this one is pretty funny because

00:14:59,899 --> 00:15:06,259
it is it it is an interesting different

00:15:03,769 --> 00:15:10,429
perception of the C++ standard by the

00:15:06,259 --> 00:15:13,429
GCC for concealing fork I won't go into

00:15:10,429 --> 00:15:16,899
the detail of this one but basically

00:15:13,429 --> 00:15:21,679
with friend class tag

00:15:16,899 --> 00:15:23,260
coupled with the static declaration GCC

00:15:21,679 --> 00:15:27,100
will propagate papa

00:15:23,260 --> 00:15:29,650
it's when class tag into all the father

00:15:27,100 --> 00:15:31,480
of classes you could expect that only

00:15:29,650 --> 00:15:33,850
the children get the property but also

00:15:31,480 --> 00:15:37,810
the father it is because of the static

00:15:33,850 --> 00:15:40,000
so I reported a bug on GCC and as I say

00:15:37,810 --> 00:15:42,760
it's not a bug it is a feature and I

00:15:40,000 --> 00:15:44,230
went on relevancy okay sssay is doing

00:15:42,760 --> 00:15:45,850
that and they say is not a bug to

00:15:44,230 --> 00:15:48,010
feature so basically we have two

00:15:45,850 --> 00:15:49,840
different behavior here I forgot to put

00:15:48,010 --> 00:15:52,420
the reference but it is only for for

00:15:49,840 --> 00:15:55,540
packages into the archive Cisco but it's

00:15:52,420 --> 00:16:03,610
pretty tough to to extract this piece of

00:15:55,540 --> 00:16:06,310
code and another thing is W or with W

00:16:03,610 --> 00:16:08,920
all in clang it is triggering way more

00:16:06,310 --> 00:16:11,350
warning in GCC so this code is not

00:16:08,920 --> 00:16:14,620
formed it is simply that people from the

00:16:11,350 --> 00:16:15,790
LLVM and salon community sings that we

00:16:14,620 --> 00:16:18,220
should not write this kind of code

00:16:15,790 --> 00:16:21,490
because it is confusing to add the

00:16:18,220 --> 00:16:23,650
parent ages are useless in in the

00:16:21,490 --> 00:16:26,170
conditional so they think that we should

00:16:23,650 --> 00:16:29,740
we move the car so when you enable W and

00:16:26,170 --> 00:16:31,780
W error it is at least we going in a row

00:16:29,740 --> 00:16:33,550
and I see previously I'm very surprised

00:16:31,780 --> 00:16:36,790
by the amount of packages in Raqqa which

00:16:33,550 --> 00:16:39,550
was which are using W a ho flag it's

00:16:36,790 --> 00:16:42,330
very important which is huge in number

00:16:39,550 --> 00:16:47,320
so it is causing a lot of failure in the

00:16:42,330 --> 00:17:02,970
individual because of that one or kind

00:16:47,320 --> 00:17:06,310
of all errors that we've got with the

00:17:02,970 --> 00:17:09,610
quality in parentheses yeah and then you

00:17:06,310 --> 00:17:11,110
used if and that macro wouldn't that be

00:17:09,610 --> 00:17:14,220
something that's common out there and

00:17:11,110 --> 00:17:19,270
even Valley micro processor definition

00:17:14,220 --> 00:17:22,270
if you define harsh define parentheses a

00:17:19,270 --> 00:17:26,440
equals one yeah parentheses and then you

00:17:22,270 --> 00:17:28,900
do if it means professor saw is able to

00:17:26,440 --> 00:17:31,660
detect that no I mean this isn't

00:17:28,900 --> 00:17:33,790
actually invalid this isn't actually no

00:17:31,660 --> 00:17:34,890
it's not invalid this would actually be

00:17:33,790 --> 00:17:38,400
a good thing to do

00:17:34,890 --> 00:17:43,230
to put it in parentheses okay if you

00:17:38,400 --> 00:17:44,670
macro is replacing yeah yes right but

00:17:43,230 --> 00:17:48,120
you would get the warning anyway you

00:17:44,670 --> 00:17:49,860
will get the row also yeah but one of

00:17:48,120 --> 00:17:51,690
the interesting thing with sealing it is

00:17:49,860 --> 00:17:53,730
and Jesus is doing that in the last

00:17:51,690 --> 00:17:55,170
wheel is also it is deflating the macro

00:17:53,730 --> 00:17:57,420
so when you have an arrow which is

00:17:55,170 --> 00:18:00,000
triggered by micro you scissors and mark

00:17:57,420 --> 00:18:02,550
the original code which has been defined

00:18:00,000 --> 00:18:04,050
by the define so it is where you are to

00:18:02,550 --> 00:18:08,850
debug when you are dealing with Michael

00:18:04,050 --> 00:18:11,280
but Jesus is doing it that also now as

00:18:08,850 --> 00:18:15,720
you know in GCC there are some extension

00:18:11,280 --> 00:18:19,260
to the C Standa c++ c here this code is

00:18:15,720 --> 00:18:23,790
invalid in the c++ specification because

00:18:19,260 --> 00:18:24,420
the declaration of a fan away must be

00:18:23,790 --> 00:18:26,790
static

00:18:24,420 --> 00:18:28,790
I mean static it must be explicit and

00:18:26,790 --> 00:18:33,180
not coming from the variable or function

00:18:28,790 --> 00:18:35,250
so sealing on purpose are not underling

00:18:33,180 --> 00:18:37,530
in this case because they think it is an

00:18:35,250 --> 00:18:41,160
extension and we should not they should

00:18:37,530 --> 00:18:47,610
not manage this case it is a point of

00:18:41,160 --> 00:18:51,300
view it's possible with Jesse also is

00:18:47,610 --> 00:18:55,650
able to accept code which would be

00:18:51,300 --> 00:18:59,990
refused so in this this one it is about

00:18:55,650 --> 00:18:59,990
when qualified lookup is basically that

00:19:02,180 --> 00:19:09,870
the a so if we go here the a function is

00:19:07,380 --> 00:19:11,400
calling this template which is calling

00:19:09,870 --> 00:19:14,460
after the B function but the big

00:19:11,400 --> 00:19:16,500
function is declare so in C and C++ is

00:19:14,460 --> 00:19:20,760
not valid because declaration must be

00:19:16,500 --> 00:19:22,950
known before the call so here it c CC

00:19:20,760 --> 00:19:24,690
except this code while it is invalid and

00:19:22,950 --> 00:19:26,250
zarkan saying that the burg but is very

00:19:24,690 --> 00:19:32,820
tricky to fix so they are not planning

00:19:26,250 --> 00:19:34,680
to fix it but we have in for 7 to 8 I

00:19:32,820 --> 00:19:36,900
confirm it I know that in the eight they

00:19:34,680 --> 00:19:42,110
are doing more shock but Ivan I check

00:19:36,900 --> 00:19:45,420
the bag and it is still open this one so

00:19:42,110 --> 00:19:47,280
because I have a daily job and I'm doing

00:19:45,420 --> 00:19:48,570
many things Davian

00:19:47,280 --> 00:19:50,220
I have been lucky

00:19:48,570 --> 00:19:52,230
I found two great students in the

00:19:50,220 --> 00:19:54,210
googles and all of God you know that it

00:19:52,230 --> 00:19:56,250
is not very easy to find good student

00:19:54,210 --> 00:19:59,820
but I am very happy that I found two

00:19:56,250 --> 00:20:03,600
amazing students so the objective of

00:19:59,820 --> 00:20:11,669
Alexander men taught by Paul who is

00:20:03,600 --> 00:20:15,149
watching in theory here did you how well

00:20:11,669 --> 00:20:18,120
did sea lion deal with boost did you try

00:20:15,149 --> 00:20:19,980
to compile the boost library so boost

00:20:18,120 --> 00:20:21,539
yeah it's working it was one of the

00:20:19,980 --> 00:20:24,179
proof of concept of the si Lang

00:20:21,539 --> 00:20:27,450
developer they got all the way yeah it

00:20:24,179 --> 00:20:29,639
was a proof-of-concept boost is

00:20:27,450 --> 00:20:36,090
well-known for big sip whispers bye

00:20:29,639 --> 00:20:37,980
Scott so as I say Pauline hi are working

00:20:36,090 --> 00:20:39,899
with Alexander have a google Summer of

00:20:37,980 --> 00:20:43,500
Code student we improve the Debian

00:20:39,899 --> 00:20:44,820
infrastructure to be able to have Debian

00:20:43,500 --> 00:20:47,129
build transparently

00:20:44,820 --> 00:20:49,279
without any things done by the

00:20:47,129 --> 00:20:51,659
maintainer or blooder

00:20:49,279 --> 00:20:54,299
automatically building the packages

00:20:51,659 --> 00:20:56,370
whistling so the first I would put

00:20:54,299 --> 00:20:59,429
because we needed that for the project

00:20:56,370 --> 00:21:01,980
is to y2 documentation for one a build I

00:20:59,429 --> 00:21:03,509
know it is surprising because it is one

00:21:01,980 --> 00:21:05,700
of the tools that we are using on daily

00:21:03,509 --> 00:21:07,799
basis but we didn't have any tutorial to

00:21:05,700 --> 00:21:10,200
install it so we've got one on the wiki

00:21:07,799 --> 00:21:12,659
you can have a look some information are

00:21:10,200 --> 00:21:14,610
missing but I've been able to install

00:21:12,659 --> 00:21:16,200
the when I build with the routine in

00:21:14,610 --> 00:21:18,480
knowledge of the tool and everything is

00:21:16,200 --> 00:21:21,620
working out of the box so I think it is

00:21:18,480 --> 00:21:21,620
a great improvement

00:21:22,070 --> 00:21:30,000
so what Alexander has been doing also is

00:21:25,259 --> 00:21:33,149
to work on how to replace the compiler

00:21:30,000 --> 00:21:35,340
within our infrastructure so we iterate

00:21:33,149 --> 00:21:37,710
and one of the solution at first that we

00:21:35,340 --> 00:21:40,620
consider what to provide a new package

00:21:37,710 --> 00:21:43,230
which could be called default C compiler

00:21:40,620 --> 00:21:46,950
default C++ compiler for Twain and

00:21:43,230 --> 00:21:48,539
Objective C and after some description

00:21:46,950 --> 00:21:51,299
with values DG we came to the conclusion

00:21:48,539 --> 00:21:53,399
that this one might be way better to go

00:21:51,299 --> 00:21:56,250
it is a lot of more work into the

00:21:53,399 --> 00:22:00,960
archive but I think if we want to decoy

00:21:56,250 --> 00:22:02,519
late GCC from the Debian infrastructure

00:22:00,960 --> 00:22:05,119
this one could be the way to

00:22:02,519 --> 00:22:08,070
so if you have a look in mini C and C++

00:22:05,119 --> 00:22:10,289
packages into the archive currently we

00:22:08,070 --> 00:22:12,330
are explicitly doing what I what I wrote

00:22:10,289 --> 00:22:15,779
in the lines emitter the CC gal equals

00:22:12,330 --> 00:22:18,690
GCC and c XX equality plus plus so we

00:22:15,779 --> 00:22:20,429
are really basing the fact on that the

00:22:18,690 --> 00:22:23,789
package will be built on this compiler

00:22:20,429 --> 00:22:25,979
while we could use C C and C++ which are

00:22:23,789 --> 00:22:29,219
just seem link to the other which are

00:22:25,979 --> 00:22:32,489
already managed by ceiling and GC C and

00:22:29,219 --> 00:22:34,589
C++ which could also at some point be

00:22:32,489 --> 00:22:36,749
used by other compiler for proof of

00:22:34,589 --> 00:22:39,349
concept or if you want to develop a new

00:22:36,749 --> 00:22:43,739
C++ compiler on your own you can easily

00:22:39,349 --> 00:22:45,089
use the blank to make we all we build to

00:22:43,739 --> 00:22:49,739
make sure that what you have done is

00:22:45,089 --> 00:22:52,259
working so what we did for now is to

00:22:49,739 --> 00:22:54,359
write actually actually must be fair

00:22:52,259 --> 00:22:59,129
aleksander words those patches

00:22:54,359 --> 00:23:02,219
he was passes for the dpkg has build and

00:22:59,129 --> 00:23:08,519
wanna build 2d correlate those tool from

00:23:02,219 --> 00:23:10,200
GCC and use more c c and c++ so what so

00:23:08,519 --> 00:23:12,559
the midterm is right now so we still

00:23:10,200 --> 00:23:14,759
have unknowns with the student to

00:23:12,559 --> 00:23:17,099
improve things so what we are planning

00:23:14,759 --> 00:23:19,649
to do next is first to get the patch

00:23:17,099 --> 00:23:21,659
applied obviously I'm sure that the

00:23:19,649 --> 00:23:23,339
maintainer we asked us many things and

00:23:21,659 --> 00:23:26,159
many improvement on the patch which is

00:23:23,339 --> 00:23:29,099
normal some tests and and probably I

00:23:26,159 --> 00:23:31,499
will have to explain them why we want to

00:23:29,099 --> 00:23:32,190
do that but we hope that this patch will

00:23:31,499 --> 00:23:36,599
be applied

00:23:32,190 --> 00:23:40,649
we are currently creating will D

00:23:36,599 --> 00:23:43,619
services for now we are only working on

00:23:40,649 --> 00:23:45,570
on those processor will come pretty

00:23:43,619 --> 00:23:49,589
quickly I guess for the off the arc

00:23:45,570 --> 00:23:51,899
acacia I don't know if people wants to

00:23:49,589 --> 00:23:54,599
get involved for now it's not my concern

00:23:51,899 --> 00:23:56,999
and mainly working on the classical

00:23:54,599 --> 00:23:59,909
processor plus arm because it is what

00:23:56,999 --> 00:24:05,700
ceiling support we D we will see for the

00:23:59,909 --> 00:24:07,379
future official well you know what's

00:24:05,700 --> 00:24:11,729
beneficial in Debian this is why it is

00:24:07,379 --> 00:24:12,839
in italic yeah no I understand what the

00:24:11,729 --> 00:24:13,299
word official means I mean what do you

00:24:12,839 --> 00:24:14,889
mean

00:24:13,299 --> 00:24:16,330
by official do you mean you intend to

00:24:14,889 --> 00:24:18,730
replace the binaries in New York I would

00:24:16,330 --> 00:24:22,179
snow basically by official I want this

00:24:18,730 --> 00:24:24,519
you see it is see me a field salad is to

00:24:22,179 --> 00:24:26,200
get installed into the archive sorry to

00:24:24,519 --> 00:24:28,119
me official is things that get installed

00:24:26,200 --> 00:24:30,519
into the archive it's not so I want to

00:24:28,119 --> 00:24:33,519
do a power will do to metric as a

00:24:30,519 --> 00:24:34,989
service then clearly not official when

00:24:33,519 --> 00:24:36,279
you claim upstream supports arm really

00:24:34,989 --> 00:24:38,799
well I will tell you that that's a

00:24:36,279 --> 00:24:41,409
filthy lie and I actually have to land a

00:24:38,799 --> 00:24:42,879
bunch of patches for arm HF so just so

00:24:41,409 --> 00:24:46,539
you know it's not supported as well as

00:24:42,879 --> 00:24:52,749
you think it is okay I haven't tried but

00:24:46,539 --> 00:25:02,649
it is what they pretend at least so so I

00:24:52,749 --> 00:25:06,970
would like to create yeah you said you

00:25:02,649 --> 00:25:09,999
wanted to use C C and C++ binary files

00:25:06,970 --> 00:25:11,769
rather than just variable names why do

00:25:09,999 --> 00:25:14,109
you prefer to do it that way because it

00:25:11,769 --> 00:25:16,980
because I'm lazy and this is a way to go

00:25:14,109 --> 00:25:19,450
I don't have to work any code I'm just

00:25:16,980 --> 00:25:21,879
editing the video to machine that I'm

00:25:19,450 --> 00:25:24,299
providing for the rebuild and I'm acting

00:25:21,879 --> 00:25:31,149
it out of the box okay so you know

00:25:24,299 --> 00:25:33,519
that's okay when I started to work on

00:25:31,149 --> 00:25:38,499
that six months ago but I know what I'm

00:25:33,519 --> 00:25:42,879
proposing is to use C C and C++ scripts

00:25:38,499 --> 00:25:46,899
of binary or link instead of the crappy

00:25:42,879 --> 00:25:49,600
acts that have done so what we are going

00:25:46,899 --> 00:25:53,019
to do next is to have a news feed so for

00:25:49,600 --> 00:25:56,499
not make it official but for having a

00:25:53,019 --> 00:25:59,139
parallel build of the archive I would

00:25:56,499 --> 00:26:01,419
like to have a new suite with with

00:25:59,139 --> 00:26:04,299
automatic test and maintainer to be able

00:26:01,419 --> 00:26:07,059
to see the result on the ps4 from

00:26:04,299 --> 00:26:08,769
Zippity as they can have okay you have

00:26:07,059 --> 00:26:09,999
your package which is fairly on si lang

00:26:08,769 --> 00:26:12,989
if you want to have a look it's cool

00:26:09,999 --> 00:26:12,989
otherwise it's no big deal

00:26:14,009 --> 00:26:19,389
we are also planning to add a link and

00:26:16,509 --> 00:26:21,070
warning so to say that when you are

00:26:19,389 --> 00:26:25,179
building and you explicity

00:26:21,070 --> 00:26:26,830
: g c c++ to ask you to change that for

00:26:25,179 --> 00:26:42,760
c c or c++

00:26:26,830 --> 00:26:45,640
stay here here's a night for please no

00:26:42,760 --> 00:26:47,760
not user bin cc or use of in C++ that

00:26:45,640 --> 00:26:51,850
will break every cross build ever

00:26:47,760 --> 00:26:53,260
why try that because the cross the cross

00:26:51,850 --> 00:26:55,419
compilers are not going to be in that

00:26:53,260 --> 00:26:58,779
path we don't want people how to

00:26:55,419 --> 00:27:01,059
calculate paths to to compile a bond

00:26:58,779 --> 00:27:07,090
whenever so we have to discuss on the

00:27:01,059 --> 00:27:09,730
way to do that properly and in the

00:27:07,090 --> 00:27:11,860
ceiling build services that we are going

00:27:09,730 --> 00:27:13,899
to provide we are also considering to

00:27:11,860 --> 00:27:18,190
fail out of the box when packages are

00:27:13,899 --> 00:27:19,870
using C C++ or CPP and not ceiling as I

00:27:18,190 --> 00:27:23,820
said previously I'm not trying to push

00:27:19,870 --> 00:27:28,380
that to replace what we have already a

00:27:23,820 --> 00:27:32,429
see a I think following this question a

00:27:28,380 --> 00:27:36,549
key B says that we have C make already

00:27:32,429 --> 00:27:39,250
make it's something different to build

00:27:36,549 --> 00:27:49,240
system but I'm not keeping those what it

00:27:39,250 --> 00:27:51,100
is and in parallel with the result of

00:27:49,240 --> 00:27:53,940
the we build trying to set up first

00:27:51,100 --> 00:27:58,630
repository of packages built by ceiling

00:27:53,940 --> 00:28:01,809
so in the long term this will allow some

00:27:58,630 --> 00:28:03,580
further possibility si Lang is very

00:28:01,809 --> 00:28:08,049
helpful to create plug-in it is way

00:28:03,580 --> 00:28:11,250
easier than GCC and for example there is

00:28:08,049 --> 00:28:14,350
some research project on poly which is

00:28:11,250 --> 00:28:16,330
fully ADA or optimization basically you

00:28:14,350 --> 00:28:18,700
go back to algorithm to optimize your

00:28:16,330 --> 00:28:20,139
function in your loop and you can get

00:28:18,700 --> 00:28:22,419
some huge performance improvement

00:28:20,139 --> 00:28:24,370
especially on Malthus computation there

00:28:22,419 --> 00:28:26,139
is also one tool which is provided by

00:28:24,370 --> 00:28:28,000
ceiling and I would like it's one of the

00:28:26,139 --> 00:28:29,830
things I'm going to do soon is to

00:28:28,000 --> 00:28:32,289
rebuild the archive with this tool it is

00:28:29,830 --> 00:28:35,649
a static and erase tool which means that

00:28:32,289 --> 00:28:37,750
you can find some very tricky bugs in

00:28:35,649 --> 00:28:39,039
some cases if you doing if you go in

00:28:37,750 --> 00:28:40,860
this loop and after that in this

00:28:39,039 --> 00:28:44,789
condition or you can find some memory

00:28:40,860 --> 00:28:46,409
some new point arising and so on and I

00:28:44,789 --> 00:28:48,659
won't do that but if some people are

00:28:46,409 --> 00:28:50,549
interested we could also consider to

00:28:48,659 --> 00:28:53,580
rebuild of Debian with an Intel compiler

00:28:50,549 --> 00:28:55,409
with at least in the HPC world I

00:28:53,580 --> 00:28:59,669
consider as a reference to rebuild

00:28:55,409 --> 00:29:01,350
software and the others region that

00:28:59,669 --> 00:29:04,500
we've got I'm going to be quick

00:29:01,350 --> 00:29:07,470
he's under age and he worked basically

00:29:04,500 --> 00:29:09,899
on the packaging of two libraries which

00:29:07,470 --> 00:29:14,220
are also part of the LLVM community so

00:29:09,899 --> 00:29:17,429
leave c++ and leave C++ ABI is basically

00:29:14,220 --> 00:29:23,100
to provide a replacement to lib STD C++

00:29:17,429 --> 00:29:27,269
and both the STL just on the template

00:29:23,100 --> 00:29:30,690
library and the ABI so what we've got

00:29:27,269 --> 00:29:34,590
currently is just a small C++ code if we

00:29:30,690 --> 00:29:37,649
build currently with C++ with salon plus

00:29:34,590 --> 00:29:41,220
plus we've got a dependency on leave STD

00:29:37,649 --> 00:29:43,260
C++ and if we are using the other

00:29:41,220 --> 00:29:47,039
library we can see that we don't have

00:29:43,260 --> 00:29:50,039
any more dependency on C++ standard

00:29:47,039 --> 00:29:53,429
library of GCC but the ones that we

00:29:50,039 --> 00:29:57,990
packaged we are also considering to do

00:29:53,429 --> 00:30:00,269
the same with we see we see as I said

00:29:57,990 --> 00:30:02,100
previously I'm not asking to change the

00:30:00,269 --> 00:30:03,990
gun the proof of concept you never know

00:30:02,100 --> 00:30:06,600
what the future we might be in four

00:30:03,990 --> 00:30:09,120
years five years and having that night

00:30:06,600 --> 00:30:11,309
I'll go host at some point to say okay

00:30:09,120 --> 00:30:13,950
we want to produce a version of DB

00:30:11,309 --> 00:30:16,080
envisioned as a compiler all new C++

00:30:13,950 --> 00:30:18,120
library I know we are far for me because

00:30:16,080 --> 00:30:20,909
there are plenty of things to check but

00:30:18,120 --> 00:30:22,769
I have a friend from FreeBSD did it and

00:30:20,909 --> 00:30:28,980
they will switch also in the neck

00:30:22,769 --> 00:30:31,909
release two to lip C++ so much as if you

00:30:28,980 --> 00:30:31,909
want to tal a little

00:30:38,320 --> 00:30:44,080
so with the packages that you're

00:30:40,570 --> 00:30:47,380
uploading do they have any dependencies

00:30:44,080 --> 00:30:52,330
on packages that are licensed under the

00:30:47,380 --> 00:30:54,520
GPL are you miss the beginning I say

00:30:52,330 --> 00:30:57,520
that I don't care about the BSD and GPL

00:30:54,520 --> 00:31:01,240
issue is not my concern in this field do

00:30:57,520 --> 00:31:04,780
you think that would impact the primary

00:31:01,240 --> 00:31:10,000
driver behind ceiling so the the primary

00:31:04,780 --> 00:31:12,310
motivation for doing ceiling I know what

00:31:10,000 --> 00:31:16,780
you are asking to basically Tom is

00:31:12,310 --> 00:31:19,000
referring to the fact that lips C++

00:31:16,780 --> 00:31:21,460
isn't a GPL I guess I don't know I

00:31:19,000 --> 00:31:23,050
haven't checked but what I just saw is

00:31:21,460 --> 00:31:26,680
basically replacement with this library

00:31:23,050 --> 00:31:29,050
so what we are trying to do is whisper

00:31:26,680 --> 00:31:32,830
and our two student is basically to make

00:31:29,050 --> 00:31:34,840
a full rebuild of Debian without GCC ot+

00:31:32,830 --> 00:31:38,620
pass and to use some sort party tools

00:31:34,840 --> 00:31:41,680
which are leaves c++ and the BC process

00:31:38,620 --> 00:31:44,350
ABI and sealing so basically the license

00:31:41,680 --> 00:31:46,930
will all be BSD and to be fair which is

00:31:44,350 --> 00:31:50,950
because Apple is investing a lot to have

00:31:46,930 --> 00:31:53,200
a non GPL Mac OSX platform which is a

00:31:50,950 --> 00:31:56,200
reason why there are producing that many

00:31:53,200 --> 00:32:02,650
code and since it is very expensive many

00:31:56,200 --> 00:32:05,680
other people are involved so I well I'm

00:32:02,650 --> 00:32:07,600
just to check one of your examples for

00:32:05,680 --> 00:32:10,930
for the warning stunt and we found out

00:32:07,600 --> 00:32:15,130
that the warning actually for the return

00:32:10,930 --> 00:32:20,710
from a function is given with GCC if it

00:32:15,130 --> 00:32:23,380
is printed out so and you okay so we

00:32:20,710 --> 00:32:25,330
check between I use the four point six

00:32:23,380 --> 00:32:28,000
and four point seven so maybe I use it

00:32:25,330 --> 00:32:29,800
for points so please do not continue the

00:32:28,000 --> 00:32:31,990
tradition of the clang developers to

00:32:29,800 --> 00:32:34,810
compare apple and oranges and never say

00:32:31,990 --> 00:32:36,520
oh I haven't say a world a good

00:32:34,810 --> 00:32:38,710
benchmark but all benchmark about

00:32:36,520 --> 00:32:40,210
sitting in GCC sucks I haven't seen any

00:32:38,710 --> 00:32:42,310
good benchmark about that because they

00:32:40,210 --> 00:32:45,640
are not comparing the latest version I

00:32:42,310 --> 00:32:48,340
really like to eat the comparison but

00:32:45,640 --> 00:32:53,610
but please give numbers and

00:32:48,340 --> 00:32:53,610
that everybody can check for that and

00:32:55,080 --> 00:32:58,539
sorry in the case of that particular

00:32:57,279 --> 00:33:00,700
warning it may have just been that

00:32:58,539 --> 00:33:03,820
that's a warning that's on by default in

00:33:00,700 --> 00:33:05,770
sealing and requires W all or turning

00:33:03,820 --> 00:33:06,760
that warning on specifically in GCC but

00:33:05,770 --> 00:33:09,130
that doesn't mean the warning wasn't

00:33:06,760 --> 00:33:12,070
there this one that one right there yeah

00:33:09,130 --> 00:33:14,490
yeah yeah yeah I say that with W early

00:33:12,070 --> 00:33:18,549
t's trigger this one okay I mean by

00:33:14,490 --> 00:33:21,039
default is not in the slide no I say you

00:33:18,549 --> 00:33:24,820
could watch from the video but with -

00:33:21,039 --> 00:33:27,669
w-iowa it will show is for behavior here

00:33:24,820 --> 00:33:30,789
I recommend people use WL anyway look at

00:33:27,669 --> 00:33:33,880
the titer is just before the default

00:33:30,789 --> 00:33:36,700
behavior I'm not I'm not I'm I'm using

00:33:33,880 --> 00:33:39,010
GCC every day I'm more using GCC's and

00:33:36,700 --> 00:33:53,890
sealing actually so I'm not against the

00:33:39,010 --> 00:33:56,740
CC and you know well yeah but

00:33:53,890 --> 00:34:01,510
actually if I show this light if I show

00:33:56,740 --> 00:34:03,159
it take the mic here's a knife it's just

00:34:01,510 --> 00:34:07,090
telling us what caused the failures

00:34:03,159 --> 00:34:10,030
they're put in slide 3 really yeah he's

00:34:07,090 --> 00:34:12,190
not trying to sell an agenda he was just

00:34:10,030 --> 00:34:14,619
giving us information about which

00:34:12,190 --> 00:34:26,050
compiler generated which errors in his

00:34:14,619 --> 00:34:30,790
rebuild of the hello

00:34:26,050 --> 00:34:33,490
what do you replace sibling the GCC by

00:34:30,790 --> 00:34:39,220
si lang or would you use Dragonic

00:34:33,490 --> 00:34:40,869
plug-in you're talking about that yes so

00:34:39,220 --> 00:34:43,839
this one was the first version that I've

00:34:40,869 --> 00:34:48,119
done it was when we were we building the

00:34:43,839 --> 00:34:51,010
archive with grid 5000 I had to produce

00:34:48,119 --> 00:34:53,310
virtual image as build image tarball

00:34:51,010 --> 00:34:57,410
toluca to

00:34:53,310 --> 00:35:00,240
to be already set up for 7:00 so I did I

00:34:57,410 --> 00:35:02,280
instances we all been on my laptop I do

00:35:00,240 --> 00:35:04,770
the rack inside basically I just

00:35:02,280 --> 00:35:06,690
couldn't resist and I save a virtual

00:35:04,770 --> 00:35:09,630
image and I uploaded somewhere to Luca

00:35:06,690 --> 00:35:13,380
but in the new system that he has set up

00:35:09,630 --> 00:35:15,630
with Amazon Cloud you have to provide

00:35:13,380 --> 00:35:18,810
him a setup script which will

00:35:15,630 --> 00:35:21,600
automatically do that so it's the same

00:35:18,810 --> 00:35:24,630
code but I'm providing him with squid

00:35:21,600 --> 00:35:27,980
and inch virtual machine will launch a

00:35:24,630 --> 00:35:27,980
set of scrip at the beginning right

00:35:29,410 --> 00:35:35,829
[Music]

00:35:36,710 --> 00:35:45,300
have you tried dragon egg that allows

00:35:42,000 --> 00:35:52,050
you to use a lot of em optimization from

00:35:45,300 --> 00:35:55,260
GCC it's a GCC plugin and no because it

00:35:52,050 --> 00:35:57,990
is a second citizen as a step but I I

00:35:55,260 --> 00:35:59,490
know the dragonknight developer and he

00:35:57,990 --> 00:36:02,040
will be very happy if I could do that

00:35:59,490 --> 00:36:03,750
and one of the great thing of dragon egg

00:36:02,040 --> 00:36:07,940
is you can also bid other code for to

00:36:03,750 --> 00:36:07,940
encode and many other things with wizard

00:36:16,370 --> 00:36:23,280
so dragon egg just combined diverse

00:36:20,070 --> 00:36:26,690
diagnostics from GCC with a verse

00:36:23,280 --> 00:36:33,360
code generation form from playing trial

00:36:26,690 --> 00:36:35,790
well GCC has less good Diagnostics as

00:36:33,360 --> 00:36:38,880
you didn't show in some cases and as a

00:36:35,790 --> 00:36:43,470
dragon egg plugin just takes the GCC

00:36:38,880 --> 00:36:45,840
front end and uses the clang code

00:36:43,470 --> 00:36:50,900
generation back end to generate the code

00:36:45,840 --> 00:36:55,290
and that is known to be versions and GCC

00:36:50,900 --> 00:36:56,790
so I think it doesn't make sense to use

00:36:55,290 --> 00:37:00,510
dragon egg form

00:36:56,790 --> 00:37:03,540
well development if I do that it is only

00:37:00,510 --> 00:37:07,110
to help the developer of Dragon egg it

00:37:03,540 --> 00:37:09,120
is just but actually some people are

00:37:07,110 --> 00:37:12,780
thinking to do the same but the opposite

00:37:09,120 --> 00:37:14,640
I mean using LLVM as a sealing as a

00:37:12,780 --> 00:37:20,550
front end and justice as a back end

00:37:14,640 --> 00:37:22,320
it's a proof of concept so well you're

00:37:20,550 --> 00:37:23,400
proposing that essentially one of the

00:37:22,320 --> 00:37:26,910
things that you're proposing is that

00:37:23,400 --> 00:37:28,620
debian should change the way that all

00:37:26,910 --> 00:37:33,900
the packages refer to them Pilar and

00:37:28,620 --> 00:37:38,060
refer to C C or C++ and not GCC in C++

00:37:33,900 --> 00:37:41,310
and I'm I'm not opposed to that as idea

00:37:38,060 --> 00:37:45,570
that it opens a small can of worms which

00:37:41,310 --> 00:37:47,220
is if we invoke GCC we can have some

00:37:45,570 --> 00:37:49,680
reasonable expectations about what

00:37:47,220 --> 00:37:54,650
options we can pass and what the

00:37:49,680 --> 00:37:58,320
behavior will be if we instead invoke CC

00:37:54,650 --> 00:38:01,710
somebody is going to have to decide what

00:37:58,320 --> 00:38:03,930
exactly that means and is it a bug in

00:38:01,710 --> 00:38:05,340
the package if it makes you know you

00:38:03,930 --> 00:38:07,290
can't just change a package and say

00:38:05,340 --> 00:38:09,570
we'll change it from GCC to CC because

00:38:07,290 --> 00:38:12,060
maybe the package as you see doesn't

00:38:09,570 --> 00:38:15,240
build with si Lang and then is it a bug

00:38:12,060 --> 00:38:16,800
now in the package that it uses si si

00:38:15,240 --> 00:38:21,030
you know it's like using a bash ism

00:38:16,800 --> 00:38:22,320
without declaring that maybe this means

00:38:21,030 --> 00:38:24,960
we thought about I think for the

00:38:22,320 --> 00:38:26,880
argument is not an issue because they

00:38:24,960 --> 00:38:28,980
are considering that they should respect

00:38:26,880 --> 00:38:30,930
and provide all the argument

00:38:28,980 --> 00:38:32,940
so first claim is not a really an issue

00:38:30,930 --> 00:38:35,700
about arguments about God and Jesus

00:38:32,940 --> 00:38:37,350
tension yeah it's an issue but well will

00:38:35,700 --> 00:38:38,910
be a huge issue for example if someone

00:38:37,350 --> 00:38:40,650
tries to build the archive with Intel

00:38:38,910 --> 00:38:44,340
because I don't think Intel is for doing

00:38:40,650 --> 00:38:47,040
the same argument as right so your

00:38:44,340 --> 00:38:50,700
answer to that question is Cece should

00:38:47,040 --> 00:38:52,950
have the options of GCC since Salang is

00:38:50,700 --> 00:38:55,020
following the same option yeah well

00:38:52,950 --> 00:39:00,840
you're proposing that as a general rule

00:38:55,020 --> 00:39:04,290
in Debian yeah okay Jesus turned out no

00:39:00,840 --> 00:39:08,550
arguments and I'm not trying to

00:39:04,290 --> 00:39:12,050
standardize all GCC or CC compiler

00:39:08,550 --> 00:39:12,050
argument I'm not crazy

00:39:13,460 --> 00:39:21,110
okay sorry um

00:39:16,170 --> 00:39:25,200
in the java world Gentoo had hooks for

00:39:21,110 --> 00:39:28,890
different JVM argument strings we never

00:39:25,200 --> 00:39:31,500
did that in Debian and it just turns out

00:39:28,890 --> 00:39:34,980
that all of the JVM that were really

00:39:31,500 --> 00:39:40,730
running now except Sun basically Sun

00:39:34,980 --> 00:39:43,620
options and unless there are more

00:39:40,730 --> 00:39:46,590
foreign JVMs that come into the free

00:39:43,620 --> 00:39:48,180
world I suspect that you know for the

00:39:46,590 --> 00:39:49,530
the Sun options are the ones that people

00:39:48,180 --> 00:39:50,970
are going to use even though there could

00:39:49,530 --> 00:39:51,570
be multiple different implementations of

00:39:50,970 --> 00:39:53,220
JVM

00:39:51,570 --> 00:39:55,740
I'm not saying that's a great precedent

00:39:53,220 --> 00:39:56,760
but that's what we've done before I

00:39:55,740 --> 00:40:03,030
don't know don't go you have any

00:39:56,760 --> 00:40:06,420
comments about that so it is a real last

00:40:03,030 --> 00:40:11,760
question this time and you can ask a

00:40:06,420 --> 00:40:14,130
confer if you want I have some

00:40:11,760 --> 00:40:16,890
experience with the Intel compiler and

00:40:14,130 --> 00:40:19,920
the option says quite different there so

00:40:16,890 --> 00:40:23,640
we we've actually separated we're trying

00:40:19,920 --> 00:40:26,910
to you see Lang and GCC and ICC at the

00:40:23,640 --> 00:40:29,400
same time and we we've separated out the

00:40:26,910 --> 00:40:31,080
options completely and try to run I

00:40:29,400 --> 00:40:33,450
don't have the same experience with

00:40:31,080 --> 00:40:35,970
Scilab and building on every commit is

00:40:33,450 --> 00:40:38,370
built either by GCC Intel and ceiling

00:40:35,970 --> 00:40:40,650
and it's the same argument are walking

00:40:38,370 --> 00:40:42,240
you use the same yeah I use the same but

00:40:40,650 --> 00:40:47,210
maybe it is just I'm you

00:40:42,240 --> 00:40:50,429
the normal argument thank you very much

00:40:47,210 --> 00:40:50,429

YouTube URL: https://www.youtube.com/watch?v=-094GOpnyAo


