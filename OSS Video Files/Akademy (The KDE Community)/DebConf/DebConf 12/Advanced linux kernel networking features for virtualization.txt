Title: Advanced linux kernel networking features for virtualization
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Guido Trotter

At: DebConf12
https://debconf12.debconf.org/
Room: Aula Magna
Scheduled start: 2012-07-12 12:00:00
Captions: 
	00:00:00,030 --> 00:00:07,020
hi so well now this is get a Trotter and

00:00:04,710 --> 00:00:09,000
he'll talk to us about owning the

00:00:07,020 --> 00:00:11,660
network with Linux or advanced

00:00:09,000 --> 00:00:11,660
networking

00:00:12,139 --> 00:00:19,199
thank you very much so first of all I

00:00:16,080 --> 00:00:21,150
already gave some form of this talk in

00:00:19,199 --> 00:00:22,920
New York this is a dated version from

00:00:21,150 --> 00:00:27,930
two years ago how many people were there

00:00:22,920 --> 00:00:29,880
a few okay so we can start from scratch

00:00:27,930 --> 00:00:34,110
I guess rather than just going to the

00:00:29,880 --> 00:00:37,410
updates so the idea of this talk came

00:00:34,110 --> 00:00:41,340
out during some work I did for the GaN

00:00:37,410 --> 00:00:45,510
IT project and it was related all of it

00:00:41,340 --> 00:00:47,640
was about basically doing more things at

00:00:45,510 --> 00:00:49,020
the network layer with Linux so how many

00:00:47,640 --> 00:00:51,960
things do you already do with

00:00:49,020 --> 00:00:55,289
virtualization that somehow go in the

00:00:51,960 --> 00:00:58,670
domain of switches and network

00:00:55,289 --> 00:01:01,949
administrator and other people that

00:00:58,670 --> 00:01:04,500
basically own the network or used to own

00:01:01,949 --> 00:01:06,900
the network until now and somehow we're

00:01:04,500 --> 00:01:09,270
getting into that space and so we're

00:01:06,900 --> 00:01:11,340
looking at what we can do at valley knox

00:01:09,270 --> 00:01:13,530
level right now without bringing in all

00:01:11,340 --> 00:01:16,560
the virtualization power just let's

00:01:13,530 --> 00:01:20,400
discuss about the network so basically

00:01:16,560 --> 00:01:22,439
we used to have big Cisco switches and

00:01:20,400 --> 00:01:25,259
small Cisco switches and other brands as

00:01:22,439 --> 00:01:28,799
well managing the network but those were

00:01:25,259 --> 00:01:31,280
all proprietary boxes basically with a

00:01:28,799 --> 00:01:35,159
full operating system on Ram but

00:01:31,280 --> 00:01:37,920
basically only like non-modifiable at

00:01:35,159 --> 00:01:40,350
all we might have some free switches but

00:01:37,920 --> 00:01:45,060
I don't know much about them now we have

00:01:40,350 --> 00:01:46,740
free routers at least to start so we

00:01:45,060 --> 00:01:51,960
started using Linux on servers and

00:01:46,740 --> 00:01:53,490
nowadays somehow like can you still hear

00:01:51,960 --> 00:01:56,340
me yes okay

00:01:53,490 --> 00:02:01,259
I couldn't hear me anymore the strange

00:01:56,340 --> 00:02:04,649
okay so somehow we we scared off all the

00:02:01,259 --> 00:02:07,770
proprietary server people and we owned a

00:02:04,649 --> 00:02:10,170
servant world and now let's scare off

00:02:07,770 --> 00:02:13,319
some networking people as well so let's

00:02:10,170 --> 00:02:18,840
start integrating and taking over there

00:02:13,319 --> 00:02:21,319
area why while networking is fun

00:02:18,840 --> 00:02:25,230
much of this is not very well documented

00:02:21,319 --> 00:02:28,019
like you'll be able to do things with IP

00:02:25,230 --> 00:02:30,659
for example that the IP mount page

00:02:28,019 --> 00:02:33,989
forgets to mention and VP online help

00:02:30,659 --> 00:02:36,359
kind of says something about it but not

00:02:33,989 --> 00:02:38,150
really and I didn't want to write

00:02:36,359 --> 00:02:40,980
documentation so I just wrote a talk and

00:02:38,150 --> 00:02:45,930
you can all try it and when some Sunday

00:02:40,980 --> 00:02:48,959
will write documentation maybe so yeah

00:02:45,930 --> 00:02:51,359
you can try this it's quite safe before

00:02:48,959 --> 00:02:54,269
doing it at your office try to talk to

00:02:51,359 --> 00:02:56,099
people not over lunch and make sure it

00:02:54,269 --> 00:02:57,959
there okay with what you're trying to do

00:02:56,099 --> 00:03:03,180
because we're not expecting it

00:02:57,959 --> 00:03:08,239
definitely so this is just basic things

00:03:03,180 --> 00:03:08,239
that you're all used to do we can just

00:03:09,769 --> 00:03:19,379
great okay so we can just easily add an

00:03:17,280 --> 00:03:22,169
address to an interface

00:03:19,379 --> 00:03:23,909
sattva link over interface up or down so

00:03:22,169 --> 00:03:27,540
activate or deactivate the interface

00:03:23,909 --> 00:03:29,009
just do simple bridging that's what we

00:03:27,540 --> 00:03:31,799
do normally to create virtual machines

00:03:29,009 --> 00:03:35,129
and then attach them to a bridge and

00:03:31,799 --> 00:03:37,859
then we can do basic routing like just a

00:03:35,129 --> 00:03:39,329
neighbor routing this will allow traffic

00:03:37,859 --> 00:03:42,090
from one interface to go to the other

00:03:39,329 --> 00:03:45,120
interface we all know this hopefully but

00:03:42,090 --> 00:03:46,949
just to put things in context so what

00:03:45,120 --> 00:03:50,970
are we going to talk about a little bit

00:03:46,949 --> 00:03:53,519
about VLANs tunneling policy routing and

00:03:50,970 --> 00:03:58,169
what policy routing and some symmetric

00:03:53,519 --> 00:04:01,229
routing we talked about routing daemons

00:03:58,169 --> 00:04:03,689
some load balancing network namespaces

00:04:01,229 --> 00:04:10,979
and some open V switch which is kind of

00:04:03,689 --> 00:04:14,819
the update but I had so VLAN tagging so

00:04:10,979 --> 00:04:17,009
over a single port we can have many

00:04:14,819 --> 00:04:19,139
villains we need to have our switch

00:04:17,009 --> 00:04:22,469
cooperate with this I will test to be

00:04:19,139 --> 00:04:25,680
very very dumb or it needs to somehow

00:04:22,469 --> 00:04:26,790
know about tagging and you need to allow

00:04:25,680 --> 00:04:29,070
us to

00:04:26,790 --> 00:04:32,040
trunk so it needs to configure report as

00:04:29,070 --> 00:04:33,540
drunking and also allow explicitly the

00:04:32,040 --> 00:04:38,550
villains that we're going to use or

00:04:33,540 --> 00:04:42,990
allow all of them so you can easily add

00:04:38,550 --> 00:04:47,250
the link to your network card so you can

00:04:42,990 --> 00:04:50,160
say add link to it h0 name it h 0.3 type

00:04:47,250 --> 00:04:52,230
villain ID free you can create an

00:04:50,160 --> 00:04:56,850
interface in it ec network interfaces

00:04:52,230 --> 00:05:01,170
that will do that so i if up down will

00:04:56,850 --> 00:05:03,810
help you to set that up or you can do it

00:05:01,170 --> 00:05:05,940
manually then you can add an IP or met

00:05:03,810 --> 00:05:07,620
interface and set it up and now

00:05:05,940 --> 00:05:09,930
basically you have a second interface

00:05:07,620 --> 00:05:14,400
which is kind of insulated from your

00:05:09,930 --> 00:05:17,550
villain 0 from your a th 0 and ism a

00:05:14,400 --> 00:05:20,070
villain now something is that your H 0

00:05:17,550 --> 00:05:22,290
can appear or another villain according

00:05:20,070 --> 00:05:24,660
to a switch configuration so what's the

00:05:22,290 --> 00:05:26,220
untag traffic for you might be tagged

00:05:24,660 --> 00:05:28,710
traffic from a point of view of a switch

00:05:26,220 --> 00:05:31,110
so you'll have to be careful how this is

00:05:28,710 --> 00:05:32,760
all configured and not to talk the

00:05:31,110 --> 00:05:38,310
traffic for the interface your and

00:05:32,760 --> 00:05:40,680
tugged on and things like that so but

00:05:38,310 --> 00:05:42,300
that's just it by the way at any point

00:05:40,680 --> 00:05:43,830
if you have questions or you have doubts

00:05:42,300 --> 00:05:46,530
you don't understand something feel free

00:05:43,830 --> 00:05:48,660
to or you have indeed comments or

00:05:46,530 --> 00:05:50,220
helpful suggestions feel free to

00:05:48,660 --> 00:05:55,080
interrupt me or feel free to ask me

00:05:50,220 --> 00:05:58,710
questions of and however you feel so

00:05:55,080 --> 00:06:01,380
tunneling is something that layer free

00:05:58,710 --> 00:06:04,710
basically at VLAN level we are only

00:06:01,380 --> 00:06:06,960
limited that like datacenter level or

00:06:04,710 --> 00:06:09,480
anyway the switching level at layer free

00:06:06,960 --> 00:06:12,060
we can transmit IP over IP so we can

00:06:09,480 --> 00:06:14,820
create overlay networks and allow

00:06:12,060 --> 00:06:17,010
basically traffic mobility of change

00:06:14,820 --> 00:06:19,380
things under the networking people and

00:06:17,010 --> 00:06:21,180
this we can do without making some

00:06:19,380 --> 00:06:26,040
people notice although once they find

00:06:21,180 --> 00:06:28,710
out we're going to hate us so this is a

00:06:26,040 --> 00:06:35,370
very basic example we can add a tunnel

00:06:28,710 --> 00:06:39,150
on our host 0 it's as Jerry tunnel we

00:06:35,370 --> 00:06:40,290
set up a peer so we decide where does

00:06:39,150 --> 00:06:42,990
this does go

00:06:40,290 --> 00:06:46,380
and then we turn it up on the southern

00:06:42,990 --> 00:06:49,410
Network which is a layer free like

00:06:46,380 --> 00:06:51,390
hopefully well in this case they might

00:06:49,410 --> 00:06:53,340
even be in the same but let's say that

00:06:51,390 --> 00:06:56,550
we are on two different slash twenty

00:06:53,340 --> 00:06:59,160
fours you had another jury tunnel this

00:06:56,550 --> 00:07:01,950
two network can cooperate and so now you

00:06:59,160 --> 00:07:05,070
have basically very zero interface on

00:07:01,950 --> 00:07:07,980
the two connected and you can ping for

00:07:05,070 --> 00:07:12,110
the two from 4.1 and vice versa and you

00:07:07,980 --> 00:07:15,300
can also route traffic over this link

00:07:12,110 --> 00:07:19,380
you can then do things like bridge

00:07:15,300 --> 00:07:22,110
traffic over like encapsulating Ethernet

00:07:19,380 --> 00:07:27,600
over IP over IP over Internet which is

00:07:22,110 --> 00:07:31,350
kind of well you can anyway another cool

00:07:27,600 --> 00:07:33,900
things you can do is well suppose we

00:07:31,350 --> 00:07:36,270
have this no no go back go back

00:07:33,900 --> 00:07:38,790
suppose we have this but we have many

00:07:36,270 --> 00:07:42,180
nodes if we have three well we can

00:07:38,790 --> 00:07:45,330
create tunnels between all of them if we

00:07:42,180 --> 00:07:47,420
have five starts to not scale basically

00:07:45,330 --> 00:07:49,740
you have n square tunnels

00:07:47,420 --> 00:07:51,510
you couldn't maintain them even if you

00:07:49,740 --> 00:07:53,870
have an automated system to maintain

00:07:51,510 --> 00:07:57,360
them it's going to be a bit of a mess

00:07:53,870 --> 00:07:59,010
you can start creating concentrators but

00:07:57,360 --> 00:08:00,750
when you have single point of failures

00:07:59,010 --> 00:08:03,060
or you have to create more of them and

00:08:00,750 --> 00:08:05,820
this is going to complicate things a bit

00:08:03,060 --> 00:08:09,720
so one thing you can do is you can do a

00:08:05,820 --> 00:08:12,480
full mesh by creating tunnel with just

00:08:09,720 --> 00:08:14,100
maybe a key which means that you can

00:08:12,480 --> 00:08:17,430
have more than one tunnel on the same

00:08:14,100 --> 00:08:21,690
machine but not specify what the remote

00:08:17,430 --> 00:08:24,060
and point is at this point basically you

00:08:21,690 --> 00:08:27,870
can decide what very motor mount

00:08:24,060 --> 00:08:31,530
is by creating a neighbor table entry

00:08:27,870 --> 00:08:33,540
with an IP address as its destination so

00:08:31,530 --> 00:08:35,160
normally a neighbor table entry is

00:08:33,540 --> 00:08:37,830
something where you have an IP address

00:08:35,160 --> 00:08:43,880
and then internet MAC address on the

00:08:37,830 --> 00:08:47,130
other side if for this device you create

00:08:43,880 --> 00:08:48,960
basically an IP address as the

00:08:47,130 --> 00:08:52,410
destination rather than landmark address

00:08:48,960 --> 00:08:54,150
this will mean that once you ping an

00:08:52,410 --> 00:08:57,300
address like

00:08:54,150 --> 00:09:00,270
4.1 this will be looked up in the

00:08:57,300 --> 00:09:03,650
neighbor table and then it will be

00:09:00,270 --> 00:09:07,560
encapsulated over giri to this otherwise

00:09:03,650 --> 00:09:11,310
but we specified very over IP n this

00:09:07,560 --> 00:09:15,510
means that we can create only one Jerry

00:09:11,310 --> 00:09:17,370
tunnel per device that we want to

00:09:15,510 --> 00:09:19,650
connect so we have a to know these five

00:09:17,370 --> 00:09:21,480
Linux boxes we create exactly one GRE

00:09:19,650 --> 00:09:23,580
tunnel and then we can dynamically

00:09:21,480 --> 00:09:26,910
reconfigure of a neighbor table either

00:09:23,580 --> 00:09:32,160
manually or with some user space daemon

00:09:26,910 --> 00:09:34,680
that updates it or by ARP daemon to

00:09:32,160 --> 00:09:38,190
actually redirect traffic dynamically

00:09:34,680 --> 00:09:40,380
where we want depending on uptime or

00:09:38,190 --> 00:09:44,280
like where our a virtual machine for

00:09:40,380 --> 00:09:46,530
example is the very demon requires a

00:09:44,280 --> 00:09:50,070
kernel patch but is not enable in many

00:09:46,530 --> 00:09:53,580
kernels I think and it's it's a bit more

00:09:50,070 --> 00:09:57,170
flaky but very option to just inject the

00:09:53,580 --> 00:10:01,200
neighbor table entries works quite well

00:09:57,170 --> 00:10:03,030
so policy routing what's policy routing

00:10:01,200 --> 00:10:05,580
well it's just routing really the

00:10:03,030 --> 00:10:09,710
difference is that with normal routing

00:10:05,580 --> 00:10:12,600
we just can route on the destination IP

00:10:09,710 --> 00:10:15,450
because the people who thought about

00:10:12,600 --> 00:10:17,700
writing routing first wanted to keep it

00:10:15,450 --> 00:10:19,380
simple but nowadays we could say well I

00:10:17,700 --> 00:10:21,660
want to route differently depending on

00:10:19,380 --> 00:10:23,220
the source IP or on the protocol maybe I

00:10:21,660 --> 00:10:25,770
have a slow link and a fast link or

00:10:23,220 --> 00:10:35,100
maybe I want something completely

00:10:25,770 --> 00:10:44,690
different okay does anybody have another

00:10:35,100 --> 00:10:49,020
one of these key birds and is making so

00:10:44,690 --> 00:10:53,130
basically yeah we can decide different

00:10:49,020 --> 00:10:55,920
routing tables depending on some entries

00:10:53,130 --> 00:10:59,280
on some values and then on the routing

00:10:55,920 --> 00:11:02,010
table decide the actual destination this

00:10:59,280 --> 00:11:04,590
is just a double lookup but is done in

00:11:02,010 --> 00:11:07,680
Linux to simplify or complicate this

00:11:04,590 --> 00:11:12,990
finger yes so how does it work

00:11:07,680 --> 00:11:16,830
you first add a rule that says look if

00:11:12,990 --> 00:11:20,730
the device from which this packet comes

00:11:16,830 --> 00:11:22,410
from is Jiri zero use table 100 so don't

00:11:20,730 --> 00:11:24,779
use your default routing table with the

00:11:22,410 --> 00:11:27,690
node traffic uses but start using

00:11:24,779 --> 00:11:30,020
something else and then in table 100 you

00:11:27,690 --> 00:11:34,490
can decide to do quite a lot of

00:11:30,020 --> 00:11:36,959
interesting things you can say well you

00:11:34,490 --> 00:11:39,209
can basically replace routes and do

00:11:36,959 --> 00:11:41,160
different things so this means that the

00:11:39,209 --> 00:11:43,350
traffic coming from some interface will

00:11:41,160 --> 00:11:46,500
be routed differently without affecting

00:11:43,350 --> 00:11:49,260
your network traffic from the host or on

00:11:46,500 --> 00:11:57,649
the host itself this will make it very

00:11:49,260 --> 00:12:05,520
fun to the bug these are just examples

00:11:57,649 --> 00:12:08,430
we can for example decide that basically

00:12:05,520 --> 00:12:14,010
we can put things on the same I don't

00:12:08,430 --> 00:12:15,630
remember what this was sorry but it

00:12:14,010 --> 00:12:20,220
works and it allows you to do different

00:12:15,630 --> 00:12:22,190
traffic for this so you can do it for

00:12:20,220 --> 00:12:24,900
specific packets rather than just

00:12:22,190 --> 00:12:27,870
interfaces where this is from we can use

00:12:24,900 --> 00:12:30,120
the help of IP tables by saying okay if

00:12:27,870 --> 00:12:31,740
a packet matches some things and we know

00:12:30,120 --> 00:12:34,380
that IP tables can match on basically

00:12:31,740 --> 00:12:37,560
everything including it's not really rag

00:12:34,380 --> 00:12:39,750
X but bit field matching on the packet

00:12:37,560 --> 00:12:42,209
itself so it's basically anything you

00:12:39,750 --> 00:12:46,589
can dream off on the packet we can say

00:12:42,209 --> 00:12:49,440
well mark it for like number 100 and

00:12:46,589 --> 00:12:51,660
then we have this rule that says that if

00:12:49,440 --> 00:12:56,150
the marker from the firewall is 100 you

00:12:51,660 --> 00:12:59,760
stable hundred and this allows us to do

00:12:56,150 --> 00:13:02,940
basically marking for any type of of

00:12:59,760 --> 00:13:13,680
packet asymmetric policy routing allows

00:13:02,940 --> 00:13:16,260
us to I don't remember this one either I

00:13:13,680 --> 00:13:24,990
should have gone through this more I

00:13:16,260 --> 00:13:27,510
guess from what I remember different

00:13:24,990 --> 00:13:30,329
table to that main table sorry it's true

00:13:27,510 --> 00:13:33,600
this network to the main table okay so

00:13:30,329 --> 00:13:38,100
it allows you to basically for some

00:13:33,600 --> 00:13:40,949
things default back to the main table so

00:13:38,100 --> 00:13:43,470
it allows you to decide that this table

00:13:40,949 --> 00:13:49,890
only overwrite some of the rules and the

00:13:43,470 --> 00:13:53,579
rest goes normally thank you so routing

00:13:49,890 --> 00:13:57,980
demons this will basically allow you to

00:13:53,579 --> 00:14:01,620
configure this by making various boxes

00:13:57,980 --> 00:14:06,150
talk to each other both Linux - Linux or

00:14:01,620 --> 00:14:08,520
Linux - router and acquire outs and push

00:14:06,150 --> 00:14:10,650
it over to your main network label or to

00:14:08,520 --> 00:14:15,720
some particular tables but when you'll

00:14:10,650 --> 00:14:17,699
use the way we said before so for

00:14:15,720 --> 00:14:21,000
example at this point you can use these

00:14:17,699 --> 00:14:23,449
routes just for our hostess VMs or for

00:14:21,000 --> 00:14:25,620
our MDMA networks which are networks

00:14:23,449 --> 00:14:29,070
Ruggieri tunnels we were talking about

00:14:25,620 --> 00:14:31,650
so we could use the network daemon for

00:14:29,070 --> 00:14:34,620
example to acquire where our VMs are and

00:14:31,650 --> 00:14:39,750
then push these neighbor table entries

00:14:34,620 --> 00:14:42,540
for them or for any Anika's service but

00:14:39,750 --> 00:14:44,790
we run or unload balance on so for

00:14:42,540 --> 00:14:46,589
example on our machine we have an

00:14:44,790 --> 00:14:49,170
analyst IP address we receive traffic

00:14:46,589 --> 00:14:51,240
and when we want to know where to direct

00:14:49,170 --> 00:14:54,570
it we could use a routing daemon for

00:14:51,240 --> 00:14:57,470
that as well as the other technologies

00:14:54,570 --> 00:15:00,779
we were we're talking about before later

00:14:57,470 --> 00:15:03,180
an easy one is well an easy one quite

00:15:00,779 --> 00:15:07,350
good one is quagga it's quite easy to

00:15:03,180 --> 00:15:10,260
install then you can see at for example

00:15:07,350 --> 00:15:12,690
you can for example do a quick test just

00:15:10,260 --> 00:15:14,910
on your laptop or on a single server by

00:15:12,690 --> 00:15:18,000
installing quark or multiple virtual

00:15:14,910 --> 00:15:20,130
machines and then make them create

00:15:18,000 --> 00:15:23,070
routes on them and then make them talk

00:15:20,130 --> 00:15:25,350
to each other and basically share the

00:15:23,070 --> 00:15:28,800
routing table over OSPF or be

00:15:25,350 --> 00:15:30,630
GP OSPF is more used inside

00:15:28,800 --> 00:15:33,510
organizations bgp is the global Internet

00:15:30,630 --> 00:15:35,580
one but some organizations prefer BGP

00:15:33,510 --> 00:15:37,320
for everything mostly because they

00:15:35,580 --> 00:15:40,520
already have it and they think that it's

00:15:37,320 --> 00:15:43,980
useless around two different protocols

00:15:40,520 --> 00:15:48,540
and yeah when you want to make your

00:15:43,980 --> 00:15:50,130
routing daemon interact with your static

00:15:48,540 --> 00:15:52,560
routes that you set up from before Iver

00:15:50,130 --> 00:15:55,140
by acquiring them or by pushing your

00:15:52,560 --> 00:15:57,720
routes through the routing daemon and

00:15:55,140 --> 00:16:02,580
then the routing daemon will update the

00:15:57,720 --> 00:16:04,950
network table so what's an accursed with

00:16:02,580 --> 00:16:09,060
anycast we can run on IP in multiple

00:16:04,950 --> 00:16:11,580
locations basically we just use quagga

00:16:09,060 --> 00:16:16,100
or another network daemon or indeed

00:16:11,580 --> 00:16:19,140
proprietary one on on some router to

00:16:16,100 --> 00:16:22,250
publish this from more than one place at

00:16:19,140 --> 00:16:24,390
the same level this means that

00:16:22,250 --> 00:16:28,050
automatically the network will configure

00:16:24,390 --> 00:16:30,270
itself to go to the nearest one and it's

00:16:28,050 --> 00:16:34,740
very easy if you were wondering it's all

00:16:30,270 --> 00:16:37,560
things like google dns is 8 8 8 8 and 8

00:16:34,740 --> 00:16:40,650
8 4 4 around there's no one central

00:16:37,560 --> 00:16:42,660
server but use for that and many of the

00:16:40,650 --> 00:16:44,910
root name servers now do this as well so

00:16:42,660 --> 00:16:46,980
they're not actually one box but where

00:16:44,910 --> 00:16:49,230
many box is pretending to be at a

00:16:46,980 --> 00:16:51,600
particular IP address that is configure

00:16:49,230 --> 00:16:55,440
on all the world devices and they can't

00:16:51,600 --> 00:16:58,860
change anymore and yeah it's it's quite

00:16:55,440 --> 00:17:01,050
easy if you start doing it a lot one IP

00:16:58,860 --> 00:17:03,030
by one IP people will get mad at you

00:17:01,050 --> 00:17:05,400
because their routing tables will

00:17:03,030 --> 00:17:08,400
explode so maybe you want to anycast for

00:17:05,400 --> 00:17:11,310
networks or maybe you just want care and

00:17:08,400 --> 00:17:14,730
still do it but this is a good way to

00:17:11,310 --> 00:17:17,490
basically push services over multiple

00:17:14,730 --> 00:17:19,500
data centers and make sure that

00:17:17,490 --> 00:17:21,960
everything automatically reconfigures if

00:17:19,500 --> 00:17:24,990
your data center a goes down then

00:17:21,960 --> 00:17:27,870
hopefully your bgp broadcasts will or

00:17:24,990 --> 00:17:29,610
your BGP advertisements will stop going

00:17:27,870 --> 00:17:31,050
out and automatically all the traffic

00:17:29,610 --> 00:17:33,120
will go somewhere else this will take

00:17:31,050 --> 00:17:35,730
some time and it's of course better if

00:17:33,120 --> 00:17:37,110
you have better ways but it's still

00:17:35,730 --> 00:17:39,170
better than having a single point of

00:17:37,110 --> 00:17:39,170
failure

00:17:40,820 --> 00:17:46,380
load-balancing so we have this Linux

00:17:44,130 --> 00:17:49,260
virtual server project as I say the

00:17:46,380 --> 00:17:50,700
worst name ever for a project that does

00:17:49,260 --> 00:17:53,040
actually is things that the networking

00:17:50,700 --> 00:17:55,140
level and not very well server level I

00:17:53,040 --> 00:17:56,760
guess their excuse is that virtual

00:17:55,140 --> 00:17:59,370
servers were not that popular when they

00:17:56,760 --> 00:18:01,290
started but yes this confuses things a

00:17:59,370 --> 00:18:04,470
bit so it's not actually a virtual

00:18:01,290 --> 00:18:06,980
server it's just virtual IPS this allows

00:18:04,470 --> 00:18:10,950
you to have a central box that

00:18:06,980 --> 00:18:14,040
advertises more than one IP you can do

00:18:10,950 --> 00:18:17,960
that by basically just putting it on my

00:18:14,040 --> 00:18:23,370
network and then have on the other side

00:18:17,960 --> 00:18:27,000
tunneling or just direct Mac routing or

00:18:23,370 --> 00:18:29,550
like layer to Mac routing of data to

00:18:27,000 --> 00:18:31,530
your back-end destinations which means

00:18:29,550 --> 00:18:33,240
that the traffic basically arrives at

00:18:31,530 --> 00:18:35,570
your data center gets to the load

00:18:33,240 --> 00:18:38,580
balancer and one gets balanced over your

00:18:35,570 --> 00:18:41,429
actual machines with server requests and

00:18:38,580 --> 00:18:44,040
machines can be inserted or removed from

00:18:41,429 --> 00:18:46,320
where dynamically and even automatically

00:18:44,040 --> 00:18:49,470
if a machine doesn't respond it will be

00:18:46,320 --> 00:18:51,570
put down by your virtual server or you

00:18:49,470 --> 00:18:54,210
can do it remotely or over layer free

00:18:51,570 --> 00:18:56,040
over GRE or some other tunnel although

00:18:54,210 --> 00:18:58,470
with the fact of doing that is that when

00:18:56,040 --> 00:19:00,660
your traffic sometime has to go back

00:18:58,470 --> 00:19:02,880
through a tunnel and then out while if

00:19:00,660 --> 00:19:06,570
you do it directly the machine can

00:19:02,880 --> 00:19:09,630
respond directly to requests without

00:19:06,570 --> 00:19:12,420
involving your load balancer on the

00:19:09,630 --> 00:19:15,420
return path which of course allows you

00:19:12,420 --> 00:19:18,540
to scale more for what this project is

00:19:15,420 --> 00:19:21,840
amazing documentation so you can just go

00:19:18,540 --> 00:19:25,320
over and try things that they document

00:19:21,840 --> 00:19:27,570
in Vermont page in manuals and as well

00:19:25,320 --> 00:19:30,600
as I was saying you can either do not

00:19:27,570 --> 00:19:33,050
block balancing or tunnel or direct

00:19:30,600 --> 00:19:33,050
routing

00:19:36,059 --> 00:19:41,909
so what's a network namespace this is

00:19:40,019 --> 00:19:44,070
something that came with Linux

00:19:41,909 --> 00:19:47,489
containers and it's a way basically to

00:19:44,070 --> 00:19:50,009
insulate a process from the network of

00:19:47,489 --> 00:19:52,799
the host so you can put a process in a

00:19:50,009 --> 00:19:55,590
separate namespace for indeed many

00:19:52,799 --> 00:19:58,830
things besides the network just the PS

00:19:55,590 --> 00:20:00,840
file PS entries so it won't see what

00:19:58,830 --> 00:20:05,369
other processes run on the machines or

00:20:00,840 --> 00:20:08,999
and will believe itself to be in it if

00:20:05,369 --> 00:20:11,369
it's called one in the new system and

00:20:08,999 --> 00:20:15,029
things like that right in this case it's

00:20:11,369 --> 00:20:17,249
just a flag to clone you can separate

00:20:15,029 --> 00:20:20,489
when all or just some of the namespaces

00:20:17,249 --> 00:20:21,989
if you clone network it allows you

00:20:20,489 --> 00:20:25,739
basically to see different network

00:20:21,989 --> 00:20:28,649
interfaces the way you use this is you

00:20:25,739 --> 00:20:30,719
create an interface you put it in a

00:20:28,649 --> 00:20:33,839
different you create a couple of

00:20:30,719 --> 00:20:36,629
interfaces when you split them in a

00:20:33,839 --> 00:20:40,259
separate namespace or actually you first

00:20:36,629 --> 00:20:42,149
okay let's let's go through this you

00:20:40,259 --> 00:20:43,950
clone a process this creates a network

00:20:42,149 --> 00:20:46,019
interface or network namespace which is

00:20:43,950 --> 00:20:48,330
empty so doesn't have any interface at

00:20:46,019 --> 00:20:50,489
all or perhaps just ahve loopback

00:20:48,330 --> 00:20:52,649
interface and then you can easily create

00:20:50,489 --> 00:20:54,989
these couple of virtual interfaces that

00:20:52,649 --> 00:20:56,669
just exist in your kernel move one of

00:20:54,989 --> 00:21:00,019
them to the other side and then

00:20:56,669 --> 00:21:02,969
basically you have a routed Network

00:21:00,019 --> 00:21:05,429
which just leaves in your host that can

00:21:02,969 --> 00:21:07,440
talk to your process so your process is

00:21:05,429 --> 00:21:08,909
effectively insulated and now you can

00:21:07,440 --> 00:21:11,249
apply to a single process on your

00:21:08,909 --> 00:21:13,080
machine all the gains that we were

00:21:11,249 --> 00:21:14,940
applying before so you can say basically

00:21:13,080 --> 00:21:17,609
traffic that comes from this network

00:21:14,940 --> 00:21:19,349
goes to a separate routing table gets

00:21:17,609 --> 00:21:21,960
routed through these dirty tunnels or

00:21:19,349 --> 00:21:23,549
whatever and this applies only to the

00:21:21,960 --> 00:21:26,070
traffic that is actually generated by

00:21:23,549 --> 00:21:28,229
one process that for example you don't

00:21:26,070 --> 00:21:32,279
trust very much or you want to insulate

00:21:28,229 --> 00:21:35,129
more because when that process only sees

00:21:32,279 --> 00:21:41,099
this virtual interface and comes out to

00:21:35,129 --> 00:21:43,769
a host through this policy network so

00:21:41,099 --> 00:21:46,950
let's see an example we've Alexei which

00:21:43,769 --> 00:21:48,599
helps you to do that basically you don't

00:21:46,950 --> 00:21:49,680
need to use the Lexi you can code all of

00:21:48,599 --> 00:21:54,270
this at the kernel level

00:21:49,680 --> 00:21:56,340
in C and Lib C but Aleksey allows you to

00:21:54,270 --> 00:21:59,040
do this from a shell which allows you to

00:21:56,340 --> 00:22:02,970
test it very easily so you can unshare

00:21:59,040 --> 00:22:05,610
the network and open up in bash that is

00:22:02,970 --> 00:22:10,350
in a separate network now you can

00:22:05,610 --> 00:22:15,000
basically set up a local host interface

00:22:10,350 --> 00:22:17,600
and then on another shell you can create

00:22:15,000 --> 00:22:25,220
two virtual network interfaces and up

00:22:17,600 --> 00:22:28,800
one of them then you can move the other

00:22:25,220 --> 00:22:32,100
via th to the other interface and this

00:22:28,800 --> 00:22:38,790
allows you to add the second IP where

00:22:32,100 --> 00:22:40,890
and set it up on the second shell and so

00:22:38,790 --> 00:22:43,470
this happens in which shell ok this is

00:22:40,890 --> 00:22:46,380
clear now this is obviously we shall one

00:22:43,470 --> 00:22:49,050
but the second thing up happens only

00:22:46,380 --> 00:22:51,240
after you've done these commands so

00:22:49,050 --> 00:22:54,780
these are the commands that allows you

00:22:51,240 --> 00:22:57,180
to move things and set it in that

00:22:54,780 --> 00:23:00,780
particular namespace then once you have

00:22:57,180 --> 00:23:03,480
it up these two VI th 0 and V th one can

00:23:00,780 --> 00:23:06,300
talk to each other and transfer traffic

00:23:03,480 --> 00:23:08,970
so this bash and any process indeed the

00:23:06,300 --> 00:23:11,180
dispatch spawns so if you start a demon

00:23:08,970 --> 00:23:13,260
in this bash it will see only that

00:23:11,180 --> 00:23:15,480
particular interface and then talk to

00:23:13,260 --> 00:23:21,830
the machine through this virtual

00:23:15,480 --> 00:23:24,120
internet open V switch so this is

00:23:21,830 --> 00:23:26,520
updated and new part what's open we

00:23:24,120 --> 00:23:28,880
switch and well it does come from so

00:23:26,520 --> 00:23:32,460
open V switch at the basic level is just

00:23:28,880 --> 00:23:34,800
the switch that we're used to have at

00:23:32,460 --> 00:23:37,050
the bridging level in Linux what are the

00:23:34,800 --> 00:23:38,910
differences one of them is trying to be

00:23:37,050 --> 00:23:41,760
a little bit less scary for very

00:23:38,910 --> 00:23:44,600
networking people so this is the support

00:23:41,760 --> 00:23:47,550
some protocols that are standard across

00:23:44,600 --> 00:23:49,290
also proprietary network devices so for

00:23:47,550 --> 00:23:52,050
example open flow is implemented also by

00:23:49,290 --> 00:23:55,500
Cisco and other devices so basically you

00:23:52,050 --> 00:23:58,050
can give up control to your network

00:23:55,500 --> 00:24:00,360
people and say look my little machines

00:23:58,050 --> 00:24:03,020
run on this environment but you run the

00:24:00,360 --> 00:24:04,910
network I set up on when we switch

00:24:03,020 --> 00:24:07,580
and whatever configuration you push on

00:24:04,910 --> 00:24:10,460
your routers gets automatically

00:24:07,580 --> 00:24:12,890
automatically updated on the servers

00:24:10,460 --> 00:24:15,080
which means that they can manage

00:24:12,890 --> 00:24:16,910
centrally the network again at the data

00:24:15,080 --> 00:24:19,340
center level and they're less scared

00:24:16,910 --> 00:24:21,740
about what you're trying to do it might

00:24:19,340 --> 00:24:23,780
be important for your organization the

00:24:21,740 --> 00:24:25,550
other thing that it can do is do this

00:24:23,780 --> 00:24:27,890
conversation between multiple open V

00:24:25,550 --> 00:24:30,890
switches so if you have this service in

00:24:27,890 --> 00:24:32,990
multiple data centers you can easily say

00:24:30,890 --> 00:24:34,940
well I'll have anomaly switch here and

00:24:32,990 --> 00:24:37,700
open with switch where I learn capsulate

00:24:34,940 --> 00:24:39,620
open V switch data over GRE which is

00:24:37,700 --> 00:24:42,170
what I was saying before basically

00:24:39,620 --> 00:24:46,160
Ethernet over IP over IP over Ethernet

00:24:42,170 --> 00:24:50,000
but it allows you to create an overlay

00:24:46,160 --> 00:24:52,520
layer 2 network over layer 3 which is

00:24:50,000 --> 00:24:54,850
quite helpful if you want for example

00:24:52,520 --> 00:24:57,260
virtual machines that are in the same

00:24:54,850 --> 00:24:59,120
network to actually be able to talk to

00:24:57,260 --> 00:25:01,400
each other of course this doesn't scale

00:24:59,120 --> 00:25:04,550
very well if you try to put over to

00:25:01,400 --> 00:25:07,310
remote locations a huge internet with

00:25:04,550 --> 00:25:10,250
many many people doing lots of broadcast

00:25:07,310 --> 00:25:12,440
traffic this won't work but for some

00:25:10,250 --> 00:25:13,880
particular things it works actually

00:25:12,440 --> 00:25:15,620
quite better than any of the

00:25:13,880 --> 00:25:20,270
technologies we were talking about

00:25:15,620 --> 00:25:22,370
before it's focused on mobility so it

00:25:20,270 --> 00:25:25,640
allows you to basically easily bring up

00:25:22,370 --> 00:25:27,110
new open with switches and make sure

00:25:25,640 --> 00:25:29,390
that the center configuration gets

00:25:27,110 --> 00:25:32,600
easily pushed to them and then you can

00:25:29,390 --> 00:25:34,100
move your machines between one host and

00:25:32,600 --> 00:25:37,910
the other host without having to

00:25:34,100 --> 00:25:40,400
reconfigure things like your IP table

00:25:37,910 --> 00:25:42,920
rules and all this other things that you

00:25:40,400 --> 00:25:45,020
normally have to bring with you all the

00:25:42,920 --> 00:25:46,790
time if they are configured as we open

00:25:45,020 --> 00:25:48,350
this with travel and they open this

00:25:46,790 --> 00:25:51,890
which is altered to each other when

00:25:48,350 --> 00:25:55,220
you're sorted this is upstream in linux

00:25:51,890 --> 00:25:57,890
3.3 as you all know we do runs with

00:25:55,220 --> 00:26:01,010
version 3.2 but luckily when you switch

00:25:57,890 --> 00:26:02,660
guys packaged the module as an out of

00:26:01,010 --> 00:26:05,840
three module four we see so this all

00:26:02,660 --> 00:26:08,900
works with 3.2 and Rizzi with the kernel

00:26:05,840 --> 00:26:12,350
patch which is the just a decay DKMS

00:26:08,900 --> 00:26:13,940
module that will compile itself and most

00:26:12,350 --> 00:26:16,850
probably itself by just installing the

00:26:13,940 --> 00:26:18,740
package so quite easy

00:26:16,850 --> 00:26:21,559
so how do we do that well just install a

00:26:18,740 --> 00:26:24,590
bunch of packages as usual and if you're

00:26:21,559 --> 00:26:26,779
running a little 3.2 or is even also

00:26:24,590 --> 00:26:28,159
install those if you're running 3.3

00:26:26,779 --> 00:26:30,470
because you self compiled it or you're

00:26:28,159 --> 00:26:33,259
running experimental or one day there

00:26:30,470 --> 00:26:35,179
will be backwards for this right then no

00:26:33,259 --> 00:26:37,759
need for video ki MS module anymore you

00:26:35,179 --> 00:26:39,139
can just use the upstream one so what

00:26:37,759 --> 00:26:41,899
can you do we've open we'll switch well

00:26:39,139 --> 00:26:45,139
basically first of all there is a

00:26:41,899 --> 00:26:47,539
compatibility level for bridges so you

00:26:45,139 --> 00:26:48,950
could use your normal bridge tools if

00:26:47,539 --> 00:26:51,620
you have the compatibility level

00:26:48,950 --> 00:26:53,919
installed to just create bridges that

00:26:51,620 --> 00:26:57,080
actually create open V switch bridges

00:26:53,919 --> 00:27:00,019
the big difference there is that while a

00:26:57,080 --> 00:27:02,779
bridge is completely in kernel so

00:27:00,019 --> 00:27:05,059
anything that gets passed through a

00:27:02,779 --> 00:27:09,019
bridge the kernel needs to know where to

00:27:05,059 --> 00:27:11,990
send it we've open V switch the the

00:27:09,019 --> 00:27:14,629
kernel still keeps a cache of words and

00:27:11,990 --> 00:27:17,269
things for efficiency but it can go to

00:27:14,629 --> 00:27:18,830
user space if it doesn't know so it can

00:27:17,269 --> 00:27:20,450
say well this is a new traffic I don't

00:27:18,830 --> 00:27:23,450
know about it I'll ask open my switch

00:27:20,450 --> 00:27:26,809
and open V switch can go ask some remote

00:27:23,450 --> 00:27:28,789
switch or look in some database so can

00:27:26,809 --> 00:27:30,919
do a lot more things but what the kernel

00:27:28,789 --> 00:27:35,299
kernel do so you don't need to push all

00:27:30,919 --> 00:27:37,070
your table information inside your your

00:27:35,299 --> 00:27:39,169
kernel what you need to do is making

00:27:37,070 --> 00:27:41,210
sure that openness which knows where the

00:27:39,169 --> 00:27:43,429
traffic goes when your kernel can only

00:27:41,210 --> 00:27:45,620
have about peaking for the traffic it's

00:27:43,429 --> 00:27:47,899
actually passing through and all the

00:27:45,620 --> 00:27:50,899
rest can stay in user space where it can

00:27:47,899 --> 00:27:54,679
be paged out or store into this can not

00:27:50,899 --> 00:27:56,389
bother your normal tables so we can add

00:27:54,679 --> 00:27:59,480
reduce either with this or with

00:27:56,389 --> 00:28:02,299
compatibility module we can add ports to

00:27:59,480 --> 00:28:04,759
the bridges this is just basically sugar

00:28:02,299 --> 00:28:06,580
over the normal thing right but this

00:28:04,759 --> 00:28:11,480
allows you to set an open V switch

00:28:06,580 --> 00:28:14,840
enabled bridge you can add a fake switch

00:28:11,480 --> 00:28:17,139
which is basically a villain packets

00:28:14,840 --> 00:28:19,639
which normally you would do this by just

00:28:17,139 --> 00:28:21,860
creating a new switch and then adding an

00:28:19,639 --> 00:28:24,889
interface which has been and talks on

00:28:21,860 --> 00:28:26,840
the switch open which which allows you

00:28:24,889 --> 00:28:28,940
to do it in different ways one way is

00:28:26,840 --> 00:28:30,590
this fake switches and one way is just

00:28:28,940 --> 00:28:33,320
to say

00:28:30,590 --> 00:28:35,600
I've cured only one switch but whatever

00:28:33,320 --> 00:28:38,930
traffic comes in from a particular port

00:28:35,600 --> 00:28:41,390
target of this villain so this is quite

00:28:38,930 --> 00:28:43,730
a change of game we don't need to have

00:28:41,390 --> 00:28:46,310
many switches one per villain but we can

00:28:43,730 --> 00:28:49,040
use one switch and talk within us from

00:28:46,310 --> 00:28:53,390
the source ports like a real switch

00:28:49,040 --> 00:28:54,890
would do so a real physical switch will

00:28:53,390 --> 00:28:56,780
have a configuration that says all the

00:28:54,890 --> 00:29:00,080
traffic that comes from port 1 is

00:28:56,780 --> 00:29:04,670
actually on VLAN free well here we can

00:29:00,080 --> 00:29:09,820
actually do this without going for I'll

00:29:04,670 --> 00:29:14,330
separate physical switches and finally

00:29:09,820 --> 00:29:16,580
the other way is instead just add a top

00:29:14,330 --> 00:29:19,790
to the fake switch which is basically

00:29:16,580 --> 00:29:21,910
what we were doing before so creating

00:29:19,790 --> 00:29:24,140
another virtual bridge rather than

00:29:21,910 --> 00:29:30,260
tagging single ports inside the bridge

00:29:24,140 --> 00:29:33,590
it supports both ways qsr haha so this

00:29:30,260 --> 00:29:35,210
is actually card I should but well this

00:29:33,590 --> 00:29:37,490
is quite well documented and I'll put

00:29:35,210 --> 00:29:39,230
these non cut on the internet so you

00:29:37,490 --> 00:29:41,780
don't need to see them copy the command

00:29:39,230 --> 00:29:44,360
line now but basically open V switch has

00:29:41,780 --> 00:29:46,760
tainted cue s inside the switch so it

00:29:44,360 --> 00:29:50,990
allows you to set some ports to have

00:29:46,760 --> 00:29:55,280
some particular policing normal rate and

00:29:50,990 --> 00:29:56,960
how some maximum burst rate which is how

00:29:55,280 --> 00:30:00,470
much traffic you can do when there's

00:29:56,960 --> 00:30:04,490
bursts of traffic but not at the average

00:30:00,470 --> 00:30:07,010
level once you configure this again you

00:30:04,490 --> 00:30:08,540
configure it once for your whole open

00:30:07,010 --> 00:30:10,640
the switch infrastructure hopefully and

00:30:08,540 --> 00:30:12,110
then you don't need to think about it

00:30:10,640 --> 00:30:13,910
again when you move visual machines

00:30:12,110 --> 00:30:17,000
around and things like that because all

00:30:13,910 --> 00:30:19,820
the openly switches will talk to a

00:30:17,000 --> 00:30:22,490
central database or central point now I

00:30:19,820 --> 00:30:25,070
haven't tried the cluster mode yet I

00:30:22,490 --> 00:30:27,110
plan to but I was most experimenting on

00:30:25,070 --> 00:30:30,230
my laptop and I didn't have already I'm

00:30:27,110 --> 00:30:32,090
set up to do this on many of them so I'm

00:30:30,230 --> 00:30:36,530
waiting to go back and have a data

00:30:32,090 --> 00:30:39,020
center to play with journey

00:30:36,530 --> 00:30:42,140
encapsulation it's what we were saying

00:30:39,020 --> 00:30:44,150
before so we can actually add app or a

00:30:42,140 --> 00:30:46,970
Jerry power to the switch

00:30:44,150 --> 00:30:48,860
and then specify that vet port is

00:30:46,970 --> 00:30:51,140
actually a journey interface with a some

00:30:48,860 --> 00:30:53,450
particular remote IP same thing on the

00:30:51,140 --> 00:30:55,310
other side and then the two switches

00:30:53,450 --> 00:30:59,120
will be able to talk to each other at

00:30:55,310 --> 00:31:01,250
layer two encapsulated over GRE the

00:30:59,120 --> 00:31:03,740
excellen is just a different protocol to

00:31:01,250 --> 00:31:06,830
do so it comes from a networking people

00:31:03,740 --> 00:31:08,510
who weren't happy with GRE I'm still not

00:31:06,830 --> 00:31:10,850
completely sure about all the

00:31:08,510 --> 00:31:12,530
differences and similarities they

00:31:10,850 --> 00:31:14,720
perform pretty much the same according

00:31:12,530 --> 00:31:17,000
to some benchmarks I've seen but your

00:31:14,720 --> 00:31:18,980
network people may prefer one or the

00:31:17,000 --> 00:31:20,960
other depending on what the actual

00:31:18,980 --> 00:31:24,880
physical switches support so you may be

00:31:20,960 --> 00:31:24,880
forced to use one or the other

00:31:27,130 --> 00:31:33,470
what is this okay this is the open flow

00:31:31,310 --> 00:31:36,950
thing sorry I cut the title I need to

00:31:33,470 --> 00:31:37,640
fix the slides they were looking good on

00:31:36,950 --> 00:31:42,530
my laptop

00:31:37,640 --> 00:31:45,260
I swear so we can create a central

00:31:42,530 --> 00:31:47,300
controller this is an example the

00:31:45,260 --> 00:31:50,240
controller could be on a physical switch

00:31:47,300 --> 00:31:52,580
or router managed by other people or

00:31:50,240 --> 00:31:56,240
could be actually on our open the switch

00:31:52,580 --> 00:31:59,540
box and then you can on your switches

00:31:56,240 --> 00:32:01,340
set what your controller is to to

00:31:59,540 --> 00:32:03,350
actually have a single infrastructure of

00:32:01,340 --> 00:32:05,720
course when this obvious controller

00:32:03,350 --> 00:32:07,490
becomes a single point of failure so you

00:32:05,720 --> 00:32:09,410
start having all your problems like

00:32:07,490 --> 00:32:11,270
let's have two of them let's load

00:32:09,410 --> 00:32:14,420
balance over Ram let's make sure that

00:32:11,270 --> 00:32:17,690
they keep in sync and things like that

00:32:14,420 --> 00:32:19,850
so this is really really basics but then

00:32:17,690 --> 00:32:21,980
there's going to be more needed to make

00:32:19,850 --> 00:32:27,860
an actual good network infrastructure on

00:32:21,980 --> 00:32:29,750
top of this user space fund so all of

00:32:27,860 --> 00:32:32,300
these were technologies involving both

00:32:29,750 --> 00:32:34,370
the kernel and some user space to do

00:32:32,300 --> 00:32:38,150
something you can do something in pure

00:32:34,370 --> 00:32:40,970
user space for example use Open VPN to

00:32:38,150 --> 00:32:43,730
do encrypting the IP or eternal tunnels

00:32:40,970 --> 00:32:47,630
- this is just a VPN right we all know

00:32:43,730 --> 00:32:49,790
about this but it integrates revolver

00:32:47,630 --> 00:32:53,810
but we've said before and it can allow

00:32:49,790 --> 00:32:56,330
us to say well for example my traffic

00:32:53,810 --> 00:32:58,040
that is not encrypted because the

00:32:56,330 --> 00:33:00,650
protocol doesn't support encryption

00:32:58,040 --> 00:33:02,660
like pass it over bein laying cover the

00:33:00,650 --> 00:33:05,990
rest of the traffic that I know it's

00:33:02,660 --> 00:33:07,760
already SSL why wasting my time and pass

00:33:05,990 --> 00:33:11,450
it over it bein laying pass it over with

00:33:07,760 --> 00:33:13,790
an unencrypted link vide is userspace

00:33:11,450 --> 00:33:15,710
visual switch if you don't have open V

00:33:13,790 --> 00:33:18,140
switch you can use VD to play with all

00:33:15,710 --> 00:33:22,160
of this in user space without even being

00:33:18,140 --> 00:33:24,860
root and socket is a very nifty tool

00:33:22,160 --> 00:33:27,560
it's like net cut but it can do a lot

00:33:24,860 --> 00:33:31,280
more so you can cut for example from a

00:33:27,560 --> 00:33:34,790
network tcp port to a UNIX socket or to

00:33:31,280 --> 00:33:37,760
a pipe so it allows you to deal with any

00:33:34,790 --> 00:33:40,370
kind of possible streams and put them

00:33:37,760 --> 00:33:45,320
one to the other we use it for example

00:33:40,370 --> 00:33:47,270
to connect from standard input to KVM

00:33:45,320 --> 00:33:49,340
console because the kayvyun people

00:33:47,270 --> 00:33:52,280
weren't as good as the exam people to

00:33:49,340 --> 00:33:55,700
implement this very nice console service

00:33:52,280 --> 00:33:59,450
so you just usually connect your virtual

00:33:55,700 --> 00:34:02,050
serial console to well in our case we

00:33:59,450 --> 00:34:05,270
connect it to a UNIX socket and when we

00:34:02,050 --> 00:34:07,610
socket to connect to that UNIX socket it

00:34:05,270 --> 00:34:11,870
would be cool ten minutes

00:34:07,610 --> 00:34:14,990
wow I'm done then so to do for next few

00:34:11,870 --> 00:34:19,429
years and burn you some more or have

00:34:14,990 --> 00:34:21,590
some more fun more open we switch more

00:34:19,429 --> 00:34:23,470
open flow and so do these traffic

00:34:21,590 --> 00:34:26,929
integration between different switches

00:34:23,470 --> 00:34:30,260
have a look at s flow it allows you to

00:34:26,929 --> 00:34:31,730
do monitoring of data open / open V

00:34:30,260 --> 00:34:34,550
switch so this allows your open D

00:34:31,730 --> 00:34:36,320
switches to report how much data is used

00:34:34,550 --> 00:34:40,910
by the various interfaces to a central

00:34:36,320 --> 00:34:45,230
point try this custard level for V open

00:34:40,910 --> 00:34:47,870
V switch and try to see if I can attach

00:34:45,230 --> 00:34:51,110
we open we switch to an unbound GRE

00:34:47,870 --> 00:34:54,350
tunnel to do this in a completely

00:34:51,110 --> 00:34:56,360
decentralized way through IP lookup

00:34:54,350 --> 00:34:59,030
table rather than specifying what the

00:34:56,360 --> 00:35:00,800
remote endpoint is but this is just to

00:34:59,030 --> 00:35:01,550
do's and ideas I have I haven't tried

00:35:00,800 --> 00:35:05,960
any of this

00:35:01,550 --> 00:35:06,710
so cue a suggestion hints any other

00:35:05,960 --> 00:35:08,540
questions

00:35:06,710 --> 00:35:12,970
there are at this point I think 9

00:35:08,540 --> 00:35:12,970
minutes so we're perfectly on time

00:35:24,020 --> 00:35:31,100
and I have a question more going back to

00:35:27,320 --> 00:35:34,520
the routing demons have you actually

00:35:31,100 --> 00:35:37,850
tried using rounding demon on commodity

00:35:34,520 --> 00:35:40,780
hardware on linux with substantial

00:35:37,850 --> 00:35:46,640
traffic or this is just usable for

00:35:40,780 --> 00:35:51,050
experiments so i know some of our teams

00:35:46,640 --> 00:35:53,810
do it for actually running road load

00:35:51,050 --> 00:35:57,680
balancers so they advertise load

00:35:53,810 --> 00:35:59,690
balancers IP fluo routing daemon i don't

00:35:57,680 --> 00:36:01,430
know how substantial the traffic is it's

00:35:59,690 --> 00:36:03,740
basically substantial traffic but just

00:36:01,430 --> 00:36:06,800
for one server but one service what

00:36:03,740 --> 00:36:09,530
needs to be load balancing that might

00:36:06,800 --> 00:36:12,080
not be for a whole data center but then

00:36:09,530 --> 00:36:15,650
again the routing daemon doesn't need to

00:36:12,080 --> 00:36:18,700
point to itself so the demon needs only

00:36:15,650 --> 00:36:21,380
to scale to a point at which it

00:36:18,700 --> 00:36:22,970
advertises variety routes when the

00:36:21,380 --> 00:36:25,790
traffic doesn't mean necessarily to pass

00:36:22,970 --> 00:36:28,030
there you could actually divide this

00:36:25,790 --> 00:36:31,730
traffic between many actual physical

00:36:28,030 --> 00:36:35,830
boxes if your actual hardware box is not

00:36:31,730 --> 00:36:38,270
a very good network device or is not

00:36:35,830 --> 00:36:40,190
completely dedicated network device and

00:36:38,270 --> 00:36:42,109
can't handle the whole traffic yeah

00:36:40,190 --> 00:36:44,150
acknowledge it's probably more a

00:36:42,109 --> 00:36:47,210
question about the performance of the

00:36:44,150 --> 00:36:49,630
Linux networking and routing stanked and

00:36:47,210 --> 00:36:52,790
about the routing team yeah so I think

00:36:49,630 --> 00:36:55,490
was more have you tried routing huge

00:36:52,790 --> 00:36:57,109
amounts of traffic through an actual

00:36:55,490 --> 00:36:59,450
Linux box rather than just using the

00:36:57,109 --> 00:37:01,910
routing daemon over very about I think

00:36:59,450 --> 00:37:03,890
routing routing huge amounts of traffic

00:37:01,910 --> 00:37:06,260
unless you have lots of network

00:37:03,890 --> 00:37:09,020
interfaces and lots of cores dedicated

00:37:06,260 --> 00:37:11,900
to this as we know will not work but we

00:37:09,020 --> 00:37:14,210
can scale horizontally and use more

00:37:11,900 --> 00:37:18,500
boxes basically use more load balancers

00:37:14,210 --> 00:37:21,050
or indeed just from the switches use the

00:37:18,500 --> 00:37:24,970
routing daemon to actually allow us to

00:37:21,050 --> 00:37:29,359
for example do any cost over many many

00:37:24,970 --> 00:37:31,640
boxes so divide the traffic to many of

00:37:29,359 --> 00:37:33,590
them rather than centralize this which

00:37:31,640 --> 00:37:37,470
we would need if it was one box on an

00:37:33,590 --> 00:37:42,089
internet without routing what

00:37:37,470 --> 00:37:44,609
much traffic yes so well one gigabit or

00:37:42,089 --> 00:37:47,880
multiple gigabits should be enough for a

00:37:44,609 --> 00:37:52,970
modern server well 10 gigabits is what

00:37:47,880 --> 00:37:55,499
services are difficult to deal with but

00:37:52,970 --> 00:38:14,309
multiple gigabits is fine multiple 10

00:37:55,499 --> 00:38:17,220
gigabits is not everybody is completely

00:38:14,309 --> 00:38:20,609
too confused by this or via knew about

00:38:17,220 --> 00:38:29,940
it or there's an interesting

00:38:20,609 --> 00:38:32,930
conversation on IRC I think one question

00:38:29,940 --> 00:38:35,640
about open V switch does it actually

00:38:32,930 --> 00:38:40,769
incorporate any kind of encryption if

00:38:35,640 --> 00:38:43,410
use tax 11 leaves rate changes yes so

00:38:40,769 --> 00:38:45,180
you can either do it unencrypted if for

00:38:43,410 --> 00:38:48,150
example you were running on a private

00:38:45,180 --> 00:38:52,079
network or you can use SSL and it has

00:38:48,150 --> 00:38:54,749
its own bki so you can point it at the

00:38:52,079 --> 00:38:57,539
certification authority you can do SSL

00:38:54,749 --> 00:39:00,660
tunnel so you can do actually SSL over

00:38:57,539 --> 00:39:07,559
GRE over blah and so on so yes it does

00:39:00,660 --> 00:39:10,349
that I think there's a question by

00:39:07,559 --> 00:39:13,759
double on IRC how does open V switch

00:39:10,349 --> 00:39:22,859
work with you Carm with what you carved

00:39:13,759 --> 00:39:25,980
no idea here's a question I'll look at

00:39:22,859 --> 00:39:28,079
it actually I have no idea I know I

00:39:25,980 --> 00:39:30,920
thought you had a resume sorry for

00:39:28,079 --> 00:39:30,920
pointing him with you

00:39:36,950 --> 00:39:42,390
[Music]

00:39:38,689 --> 00:39:45,180
well then enjoy your ten minutes go for

00:39:42,390 --> 00:39:47,550
coffee have a good lunch

00:39:45,180 --> 00:39:50,780
thank you thank you

00:39:47,550 --> 00:39:50,780

YouTube URL: https://www.youtube.com/watch?v=Pz0S2xij-a4


