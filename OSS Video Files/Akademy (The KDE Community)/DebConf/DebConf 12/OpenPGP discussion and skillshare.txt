Title: OpenPGP discussion and skillshare
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Daniel Kahn Gillmor

At: DebConf12
https://debconf12.debconf.org/
Room: Roberto TerÃ¡n
Scheduled start: 2012-07-09 15:00:00
Captions: 
	00:00:00,050 --> 00:00:09,510
okay we will have this talk now about

00:00:05,210 --> 00:00:12,780
open bgp a open PGP discussion and

00:00:09,510 --> 00:00:16,560
Skillshare this is part of the getting

00:00:12,780 --> 00:00:22,609
involved in Debian track and the speaker

00:00:16,560 --> 00:00:24,840
is Daniel Kang Gilmore so this hello so

00:00:22,609 --> 00:00:26,849
my hope is that this is going to be more

00:00:24,840 --> 00:00:28,590
of a discussion than a presentation I

00:00:26,849 --> 00:00:30,599
don't actually have slides because I

00:00:28,590 --> 00:00:32,790
wanted to just actually hear what people

00:00:30,599 --> 00:00:36,300
are working on how what their workflow

00:00:32,790 --> 00:00:38,850
is and make sure that we can figure out

00:00:36,300 --> 00:00:41,850
sort of best practices ways to do this

00:00:38,850 --> 00:00:45,770
but I have up on here is the gobby notes

00:00:41,850 --> 00:00:51,539
for this session sorry about that

00:00:45,770 --> 00:00:53,820
so the this is sorry let me show you

00:00:51,539 --> 00:00:57,809
where it is if you go to gobby debian

00:00:53,820 --> 00:01:00,359
org within deb comp 12 buff there's an

00:00:57,809 --> 00:01:02,640
open PGP Skillshare this is a gobby

00:01:00,359 --> 00:01:04,769
document so I invite people to edit it

00:01:02,640 --> 00:01:06,869
and if someone wants to try to take some

00:01:04,769 --> 00:01:08,430
notes as people throw out ideas it would

00:01:06,869 --> 00:01:10,890
be great if this document could end up

00:01:08,430 --> 00:01:14,130
actually containing the good ideas from

00:01:10,890 --> 00:01:17,100
you guys because I have some ideas about

00:01:14,130 --> 00:01:19,470
how to use open PGP but I'm sure that

00:01:17,100 --> 00:01:20,850
everybody else here has other ideas and

00:01:19,470 --> 00:01:26,430
the more we can learn from each other

00:01:20,850 --> 00:01:29,520
the better so also if you have any

00:01:26,430 --> 00:01:31,229
questions or if you want to like I

00:01:29,520 --> 00:01:33,810
really do mean that this is not gonna be

00:01:31,229 --> 00:01:37,290
just me rambling at you I'm hoping that

00:01:33,810 --> 00:01:39,780
that we have a discussion so please sing

00:01:37,290 --> 00:01:42,659
out there's a microphone here and good

00:01:39,780 --> 00:01:44,280
enough it has a microphone right so we

00:01:42,659 --> 00:01:46,079
have two microphones so either just come

00:01:44,280 --> 00:01:50,189
up to the mic or raise your hand and

00:01:46,079 --> 00:01:51,420
good I will dance it over to you so I

00:01:50,189 --> 00:01:54,500
just wanted to make sure that we're sort

00:01:51,420 --> 00:01:59,040
of all on the same page here about why

00:01:54,500 --> 00:02:01,890
openpgp is important for debian and

00:01:59,040 --> 00:02:03,270
important for network communication so

00:02:01,890 --> 00:02:04,740
I'm just gonna skim through some of

00:02:03,270 --> 00:02:06,210
these ideas quickly but if you have

00:02:04,740 --> 00:02:08,310
questions about them or if you think

00:02:06,210 --> 00:02:09,610
that I'm wrong or that these topics are

00:02:08,310 --> 00:02:11,740
wrong or you or you're not

00:02:09,610 --> 00:02:14,640
sure we should talk about those two

00:02:11,740 --> 00:02:17,670
because it's a complicated topic but

00:02:14,640 --> 00:02:21,670
basically at its core the open PGP

00:02:17,670 --> 00:02:23,380
certificates are about identity and the

00:02:21,670 --> 00:02:26,590
reason that identity is important is

00:02:23,380 --> 00:02:29,770
because it gives you a baseline that you

00:02:26,590 --> 00:02:34,330
can then use for confidentiality and for

00:02:29,770 --> 00:02:37,410
integrity so why is why do I say that

00:02:34,330 --> 00:02:41,310
identity is a baseline for those things

00:02:37,410 --> 00:02:43,630
so confidentiality should we need it

00:02:41,310 --> 00:02:46,240
doesn't make any sense if you don't know

00:02:43,630 --> 00:02:48,040
who you're communicating with that is I

00:02:46,240 --> 00:02:50,080
can't send a confidential communication

00:02:48,040 --> 00:02:52,180
to an unknown party because it doesn't

00:02:50,080 --> 00:02:54,459
ensure that it's private to the unknown

00:02:52,180 --> 00:02:57,030
party so identity I need to know the

00:02:54,459 --> 00:02:59,380
identity of the party to whom I'm

00:02:57,030 --> 00:03:00,730
corresponding or with whom I'm

00:02:59,380 --> 00:03:02,650
corresponding in order to ensure that

00:03:00,730 --> 00:03:05,200
it's a private communication and

00:03:02,650 --> 00:03:06,400
integrity is based on the idea that it

00:03:05,200 --> 00:03:08,709
comes from someone that you know and

00:03:06,400 --> 00:03:09,190
here I'm editing the gobby session as we

00:03:08,709 --> 00:03:10,930
speak

00:03:09,190 --> 00:03:13,709
because the other big thing and we'll

00:03:10,930 --> 00:03:16,780
see this a lot in Debian his reputation

00:03:13,709 --> 00:03:18,580
so once you've proven who you are you

00:03:16,780 --> 00:03:20,590
can use that as a baseline to say well

00:03:18,580 --> 00:03:22,870
this is the person I am the person who

00:03:20,590 --> 00:03:25,269
did these 10 things in the past and you

00:03:22,870 --> 00:03:28,690
can judge me by that and that reputation

00:03:25,269 --> 00:03:30,010
will help you to find your way into

00:03:28,690 --> 00:03:34,570
doing the things that you like to do in

00:03:30,010 --> 00:03:37,030
Debian so where do we use open PGP

00:03:34,570 --> 00:03:39,489
within Debian someone just pasted their

00:03:37,030 --> 00:03:46,620
password onto line 42 there you probably

00:03:39,489 --> 00:03:51,840
want to change your password so hope

00:03:46,620 --> 00:03:51,840
let's see let's fix that up here sorry

00:03:53,830 --> 00:04:01,690
so where did we use OpenPGP in debian we

00:03:57,940 --> 00:04:03,190
use it to to sign mails to the mailing

00:04:01,690 --> 00:04:04,930
lists sometimes some of us do not

00:04:03,190 --> 00:04:07,780
everyone does it's not necessary to do

00:04:04,930 --> 00:04:11,350
that but we do some people we use it for

00:04:07,780 --> 00:04:15,520
voting so if you're a Debian if you're a

00:04:11,350 --> 00:04:18,070
Debian developer whether uploading or

00:04:15,520 --> 00:04:22,270
not you participate in the votes that

00:04:18,070 --> 00:04:26,080
happen and those all happen via open PGP

00:04:22,270 --> 00:04:29,200
signed mail there are some password

00:04:26,080 --> 00:04:31,810
resets and things for Debbie and

00:04:29,200 --> 00:04:34,570
machinery that require open PGP signed

00:04:31,810 --> 00:04:36,460
bail you use it to sign if you're an

00:04:34,570 --> 00:04:39,070
uploading if you're an uploader you

00:04:36,460 --> 00:04:41,230
would use it to sign files that are part

00:04:39,070 --> 00:04:43,060
of package descriptions I don't know can

00:04:41,230 --> 00:04:45,370
people see the text up here I don't know

00:04:43,060 --> 00:04:46,720
if this is but so there's a bunch of

00:04:45,370 --> 00:04:48,280
different things that you can that we

00:04:46,720 --> 00:04:52,060
use it for and we also use it for system

00:04:48,280 --> 00:04:53,290
infrastructure so this is how we get how

00:04:52,060 --> 00:04:56,140
we make sure that our packages are

00:04:53,290 --> 00:04:58,450
coming from Debian and that's a system

00:04:56,140 --> 00:05:01,090
key as a key that's maintained by the

00:04:58,450 --> 00:05:02,140
FTP masters that signs the archive so

00:05:01,090 --> 00:05:04,090
that you can ensure when you're fetching

00:05:02,140 --> 00:05:05,380
packages over the network that what

00:05:04,090 --> 00:05:06,730
you're getting is something that's from

00:05:05,380 --> 00:05:08,680
Debian so there's a lot of places that

00:05:06,730 --> 00:05:11,260
we use it there probably many more other

00:05:08,680 --> 00:05:16,620
people have thoughts about ways that are

00:05:11,260 --> 00:05:20,080
not mentioned here ways that we use it

00:05:16,620 --> 00:05:22,930
well only worth mentioning I think while

00:05:20,080 --> 00:05:25,480
most of the keys are owned or related to

00:05:22,930 --> 00:05:27,460
a person and I think that will be most

00:05:25,480 --> 00:05:31,510
of your talk we have some keys also

00:05:27,460 --> 00:05:33,610
related to roles or to processes right

00:05:31,510 --> 00:05:46,360
and the archive signing key is a great

00:05:33,610 --> 00:05:48,340
example for one of those keys so we do

00:05:46,360 --> 00:05:51,730
use it for identifying new people into

00:05:48,340 --> 00:05:53,350
Debian right also we have someone who's

00:05:51,730 --> 00:05:56,080
they've already trusted as part of

00:05:53,350 --> 00:05:57,610
Debian has to have signed a new key that

00:05:56,080 --> 00:05:59,410
gets introduced whether that's a new

00:05:57,610 --> 00:06:02,140
maintainer or a new Debian developer so

00:05:59,410 --> 00:06:04,150
we use it for the whole web of trust is

00:06:02,140 --> 00:06:06,010
actually something we intrinsically use

00:06:04,150 --> 00:06:07,930
to introduce new people as well as the

00:06:06,010 --> 00:06:20,230
trust the key material involved right

00:06:07,930 --> 00:06:21,730
right so so just to give some what I'm

00:06:20,230 --> 00:06:23,800
hoping that we can do here in the next

00:06:21,730 --> 00:06:26,320
40 minutes or however much we've got

00:06:23,800 --> 00:06:28,960
about 40 minutes is that we can share

00:06:26,320 --> 00:06:33,070
some of the ways that we used it we use

00:06:28,960 --> 00:06:34,390
open PGP here and if you've got good

00:06:33,070 --> 00:06:36,190
workflows that you think might be useful

00:06:34,390 --> 00:06:38,350
or you've got configurations that might

00:06:36,190 --> 00:06:39,970
be handy or you have some concerns about

00:06:38,350 --> 00:06:42,880
the way people that you think people are

00:06:39,970 --> 00:06:44,950
using them I would just be nice to to

00:06:42,880 --> 00:06:46,390
share those tricks and maybe folks can

00:06:44,950 --> 00:06:48,940
come away we can come away with this

00:06:46,390 --> 00:06:51,610
with a document that recommends some

00:06:48,940 --> 00:06:53,320
ideas that people might like so but to

00:06:51,610 --> 00:06:54,970
give some background on that I just

00:06:53,320 --> 00:06:57,060
wanted to make sure that we're all on

00:06:54,970 --> 00:06:59,230
the same page when we're talking about

00:06:57,060 --> 00:07:02,500
these keys so this is just a bit of

00:06:59,230 --> 00:07:03,550
vocabulary stuff here I don't know let's

00:07:02,500 --> 00:07:05,500
put that in the middle of the screen

00:07:03,550 --> 00:07:08,230
there this certificate structure section

00:07:05,500 --> 00:07:11,500
here in particular when we say an open

00:07:08,230 --> 00:07:14,320
PGP key we're talking about actually a

00:07:11,500 --> 00:07:15,640
bunch of stuff there's an in general

00:07:14,320 --> 00:07:18,430
we're probably talking about the public

00:07:15,640 --> 00:07:20,230
key material and the names associated

00:07:18,430 --> 00:07:22,600
with it and the signatures that have

00:07:20,230 --> 00:07:27,150
been made that say yes this name belongs

00:07:22,600 --> 00:07:30,340
to that key and so the actual structure

00:07:27,150 --> 00:07:32,620
so I've got I've got it drawn up here in

00:07:30,340 --> 00:07:39,550
sort of a tree diagram this is one

00:07:32,620 --> 00:07:41,800
person's open PGP certificate and so up

00:07:39,550 --> 00:07:43,660
at the top there the primary key is the

00:07:41,800 --> 00:07:48,520
sort of core that anchors the entire

00:07:43,660 --> 00:07:50,950
open PGP certificate and on that primary

00:07:48,520 --> 00:07:53,160
key you can see here because I've got a

00:07:50,950 --> 00:07:55,450
star that means there are zero or more

00:07:53,160 --> 00:07:57,220
direct key signatures most people don't

00:07:55,450 --> 00:07:59,800
have those direct key signatures so we

00:07:57,220 --> 00:08:00,970
can ignore them for right now if you

00:07:59,800 --> 00:08:03,550
ignore that and look down on the next

00:08:00,970 --> 00:08:05,940
line their primary key every primary key

00:08:03,550 --> 00:08:08,050
has to have at least one user ID or more

00:08:05,940 --> 00:08:10,420
that's what that plus is for and then

00:08:08,050 --> 00:08:13,150
the user ID itself is signed so what you

00:08:10,420 --> 00:08:16,390
can note here is that the signature on

00:08:13,150 --> 00:08:18,280
the user ID actually signs the user ID

00:08:16,390 --> 00:08:19,389
with the primary key

00:08:18,280 --> 00:08:21,840
so it's a signature over all that

00:08:19,389 --> 00:08:26,460
material and so when people talk about

00:08:21,840 --> 00:08:29,050
their key ID they're talking about an

00:08:26,460 --> 00:08:31,570
identifier that identifies the primary

00:08:29,050 --> 00:08:33,550
key and then because these signatures

00:08:31,570 --> 00:08:36,849
are present you can figure out which

00:08:33,550 --> 00:08:38,080
user IDs are associated with it so

00:08:36,849 --> 00:08:40,090
that's the way that it's structured and

00:08:38,080 --> 00:08:42,760
a lot of people get the term key ID

00:08:40,090 --> 00:08:44,080
confused with user ID and if we can keep

00:08:42,760 --> 00:08:45,610
the term straight I think it's going to

00:08:44,080 --> 00:08:48,000
be more helpful when we're talking so

00:08:45,610 --> 00:08:53,920
for example this here

00:08:48,000 --> 00:08:56,110
that's my user ID and this here is my

00:08:53,920 --> 00:08:58,780
key ID or actually this is my full

00:08:56,110 --> 00:09:01,420
fingerprint the full fingerprint is

00:08:58,780 --> 00:09:03,040
relatively long when when you ask for

00:09:01,420 --> 00:09:06,460
someone's key ID they'll usually show

00:09:03,040 --> 00:09:11,020
you something short like this just this

00:09:06,460 --> 00:09:14,950
last chunk here I don't is this visible

00:09:11,020 --> 00:09:16,660
folks in the back okay so this is this

00:09:14,950 --> 00:09:19,570
key ID the short key ID people will

00:09:16,660 --> 00:09:21,730
often use that to refer to a key that's

00:09:19,570 --> 00:09:24,250
a bad idea that's easily spoof able

00:09:21,730 --> 00:09:25,540
unfortunately Ashish left us today he

00:09:24,250 --> 00:09:28,000
went off to another conference but

00:09:25,540 --> 00:09:31,060
Ashish is known for having generated a

00:09:28,000 --> 00:09:34,089
new key that matches the same key ideas

00:09:31,060 --> 00:09:36,160
his old key so it's you can do that I

00:09:34,089 --> 00:09:40,950
did I've done that on this crappy

00:09:36,160 --> 00:09:44,620
ancient laptop in a couple of hours so

00:09:40,950 --> 00:09:47,260
well for for the Debian keyring we use

00:09:44,620 --> 00:09:51,100
not the eight last digits as you did but

00:09:47,260 --> 00:09:54,270
the last 15 is 16 digits so well

00:09:51,100 --> 00:09:58,089
everything that consists of getting

00:09:54,270 --> 00:10:02,680
digests is a potential is provable but

00:09:58,089 --> 00:10:05,520
what's your opinion on getting 16 so 16

00:10:02,680 --> 00:10:08,800
digits is 64 bits and they're hex digits

00:10:05,520 --> 00:10:11,200
so a brute-force search over that space

00:10:08,800 --> 00:10:14,710
would be roughly 2 to the 64th

00:10:11,200 --> 00:10:23,589
operations and that's pushing it right

00:10:14,710 --> 00:10:27,040
now and so there are known collisions of

00:10:23,589 --> 00:10:30,130
the 64 bit key IDs in the

00:10:27,040 --> 00:10:32,500
Global PGP web of trust right well

00:10:30,130 --> 00:10:36,339
certainly for v3 keys in fact it's

00:10:32,500 --> 00:10:38,649
trivial to create the collision in the

00:10:36,339 --> 00:10:40,839
in with version 3 keys so I should

00:10:38,649 --> 00:10:43,120
probably adjust this to say open PGP v4

00:10:40,839 --> 00:10:48,250
because we really need to stop using

00:10:43,120 --> 00:10:51,100
open PGP v3 made me very happy with that

00:10:48,250 --> 00:10:52,540
we did debian stop using it several

00:10:51,100 --> 00:10:55,029
years ago and it made me very happy

00:10:52,540 --> 00:10:56,440
yep and that actually that move is a

00:10:55,029 --> 00:10:58,060
great move because and this is another

00:10:56,440 --> 00:10:59,980
situation where Debian is important that

00:10:58,060 --> 00:11:02,860
move is actually helped to convince the

00:10:59,980 --> 00:11:04,720
GPG maintainer x' to drop support and i

00:11:02,860 --> 00:11:06,459
think we will be the next release of GPG

00:11:04,720 --> 00:11:08,860
where we're good where you won't

00:11:06,459 --> 00:11:09,820
actually be able to import a v3 key so

00:11:08,860 --> 00:11:12,310
you won't run into those kind of

00:11:09,820 --> 00:11:14,320
collisions I really think that we should

00:11:12,310 --> 00:11:16,420
be using the full fingerprint for

00:11:14,320 --> 00:11:19,570
everything but GP G's key database

00:11:16,420 --> 00:11:20,740
doesn't do that so we're stuck at the

00:11:19,570 --> 00:11:22,480
moment we're at the mercy of the tools

00:11:20,740 --> 00:11:25,830
if only it was free software that

00:11:22,480 --> 00:11:29,050
someone could be convinced to fix

00:11:25,830 --> 00:11:31,620
yeah well GG me at the move of changing

00:11:29,050 --> 00:11:34,510
to using full finger prints for

00:11:31,620 --> 00:11:36,190
returning keys which then broke key

00:11:34,510 --> 00:11:38,410
servers that did not parsh full

00:11:36,190 --> 00:11:41,260
fingerprints they seem to have just

00:11:38,410 --> 00:11:43,209
assumed that the world is sks so that's

00:11:41,260 --> 00:11:45,670
not always trust new PG to do the right

00:11:43,209 --> 00:11:47,020
thing no I'm agree with you GP G is not

00:11:45,670 --> 00:11:49,029
always doing the right thing and we need

00:11:47,020 --> 00:11:50,770
to we I'm saying that we as Debian can

00:11:49,029 --> 00:11:54,040
give guidance to GP G in terms of what

00:11:50,770 --> 00:11:57,190
needs to be done and they seem to accept

00:11:54,040 --> 00:11:58,660
that so the other thing to note if

00:11:57,190 --> 00:12:01,390
you're I don't know for those of you who

00:11:58,660 --> 00:12:04,240
are new to Debian or who haven't looked

00:12:01,390 --> 00:12:07,180
at the open PGP space a lot Debian is

00:12:04,240 --> 00:12:09,520
the group of Debian developers and X

00:12:07,180 --> 00:12:12,730
Debian developers and Debian maintainer

00:12:09,520 --> 00:12:15,910
z-- is the largest group of people

00:12:12,730 --> 00:12:19,060
actively using open PGP certification in

00:12:15,910 --> 00:12:21,640
a in a coherent way and so we actually

00:12:19,060 --> 00:12:24,550
have a fair amount of sway over what can

00:12:21,640 --> 00:12:25,959
happen in that space so I want to follow

00:12:24,550 --> 00:12:27,490
up on something that noodle said

00:12:25,959 --> 00:12:30,279
especially in the context of what you

00:12:27,490 --> 00:12:31,990
just said Daniel and that is there are

00:12:30,279 --> 00:12:33,430
alternatives to popular programs like

00:12:31,990 --> 00:12:35,800
SSH like mosh

00:12:33,430 --> 00:12:38,500
and I'm wondering how feasible is it to

00:12:35,800 --> 00:12:41,730
imagine an alternative to GPG that

00:12:38,500 --> 00:12:41,730
implements bgp

00:12:42,580 --> 00:12:50,660
so there is actually I believe it's uh I

00:12:48,250 --> 00:12:53,120
kinda have the license it's under it

00:12:50,660 --> 00:12:54,740
uses OpenSSL so it's tinted by whatever

00:12:53,120 --> 00:12:57,470
are those so seizures are thought that

00:12:54,740 --> 00:12:58,130
they so the UK de Mian registry nama

00:12:57,470 --> 00:13:01,970
hats

00:12:58,130 --> 00:13:03,350
I actually I believe they still they've

00:13:01,970 --> 00:13:05,330
got another system in place as well but

00:13:03,350 --> 00:13:09,020
originally like if you look back ten

00:13:05,330 --> 00:13:11,060
years ago and more nami net used PGP

00:13:09,020 --> 00:13:12,860
signatures across all of their meals so

00:13:11,060 --> 00:13:15,830
every single Nami net member of which

00:13:12,860 --> 00:13:17,810
were at least five hundred had a PGP key

00:13:15,830 --> 00:13:20,120
and was using a commercially day-to-day

00:13:17,810 --> 00:13:21,980
and they signed all any to me in the had

00:13:20,120 --> 00:13:25,339
a dot uk' ending on it was registered

00:13:21,980 --> 00:13:27,500
using a PGP signed meal no they didn't

00:13:25,339 --> 00:13:29,660
do web of trust things on it I know that

00:13:27,500 --> 00:13:31,010
they're technical guys then sponsored

00:13:29,660 --> 00:13:33,230
the development of this library which

00:13:31,010 --> 00:13:34,550
does exist and was written by Ben Laurie

00:13:33,230 --> 00:13:40,130
yeah Ben Laurie I couldn't rember which

00:13:34,550 --> 00:13:41,960
the Lori's it was I looked down at I

00:13:40,130 --> 00:13:43,430
must confess I was put off by the

00:13:41,960 --> 00:13:45,200
licensing which then meant that I

00:13:43,430 --> 00:13:47,060
couldn't GPL license whatever I was

00:13:45,200 --> 00:13:48,589
working on I had the same experience by

00:13:47,060 --> 00:13:50,180
the way I tried to package it and and

00:13:48,589 --> 00:13:52,520
decided that I didn't want to introduce

00:13:50,180 --> 00:13:58,310
another cryptographic dependency on open

00:13:52,520 --> 00:14:00,050
SSL licensing I think having diversity

00:13:58,310 --> 00:14:01,280
and implementations is always a good

00:14:00,050 --> 00:14:04,280
thing

00:14:01,280 --> 00:14:06,350
I think that GPG actually gets pretty

00:14:04,280 --> 00:14:07,580
much all the right I'd I would have some

00:14:06,350 --> 00:14:09,589
objection to some of the things they do

00:14:07,580 --> 00:14:10,940
in some of the ways they work but in in

00:14:09,589 --> 00:14:13,400
general I think it's a reasonably good

00:14:10,940 --> 00:14:17,450
implementation it might be nice to have

00:14:13,400 --> 00:14:19,070
a library that was easily usable by

00:14:17,450 --> 00:14:21,710
other projects that were then that you

00:14:19,070 --> 00:14:23,180
hook in and even do things like tie into

00:14:21,710 --> 00:14:25,760
Perl rather I mean almost everything

00:14:23,180 --> 00:14:27,800
I've seen ties into this the GPG code

00:14:25,760 --> 00:14:28,940
whether it's calling GPG correctly or

00:14:27,800 --> 00:14:31,910
they've know I've brought some more

00:14:28,940 --> 00:14:33,770
override into libraries I think I can I

00:14:31,910 --> 00:14:36,740
can talk to some of that if you are I've

00:14:33,770 --> 00:14:38,740
not I have written PGP parsing code that

00:14:36,740 --> 00:14:41,000
doesn't do any of the crypto stuff I

00:14:38,740 --> 00:14:42,380
have some of that that I've used in

00:14:41,000 --> 00:14:44,150
writing a key server but it doesn't do

00:14:42,380 --> 00:14:45,830
any of the trip of stuff

00:14:44,150 --> 00:14:48,440
and I think the crypto stuff is actually

00:14:45,830 --> 00:14:49,970
where the interesting bit is and there's

00:14:48,440 --> 00:14:52,370
two bits about that one of which is how

00:14:49,970 --> 00:14:55,010
much traction would it get and second

00:14:52,370 --> 00:14:56,270
as it needs all of the audits if you're

00:14:55,010 --> 00:14:57,740
writing it from scratch it needs to be

00:14:56,270 --> 00:14:59,180
written by people who are trusted and

00:14:57,740 --> 00:15:00,770
have other people to look at and I would

00:14:59,180 --> 00:15:02,500
take a long time to get that and I'm not

00:15:00,770 --> 00:15:07,490
sure we need that at this point in time

00:15:02,500 --> 00:15:09,140
OpenSSH kilobyte because SSH was private

00:15:07,490 --> 00:15:10,790
the v2 stuff was not available for

00:15:09,140 --> 00:15:13,670
non-commercial use there was a use kiss

00:15:10,790 --> 00:15:16,339
why we had OpenSSH LSH as far as I can

00:15:13,670 --> 00:15:18,470
tell doesn't really exist anymore

00:15:16,339 --> 00:15:22,400
I know there's some good stuff has come

00:15:18,470 --> 00:15:23,810
out of LSH but never let me actually

00:15:22,400 --> 00:15:26,330
mention that one of the good things that

00:15:23,810 --> 00:15:29,180
came out of the LS h development was the

00:15:26,330 --> 00:15:31,100
nettle cryptographic library and nettle

00:15:29,180 --> 00:15:33,050
actually does have some open PGP parson

00:15:31,100 --> 00:15:35,360
code so anyone who's interested in

00:15:33,050 --> 00:15:36,620
writing in thinking about trying to

00:15:35,360 --> 00:15:38,810
write an additional open PGP

00:15:36,620 --> 00:15:41,510
implementation would do very well to

00:15:38,810 --> 00:15:43,550
start with the nettle library and try to

00:15:41,510 --> 00:15:49,250
either add to that or build on top of

00:15:43,550 --> 00:15:51,080
that so I in I mean I I do think that we

00:15:49,250 --> 00:15:52,310
should have another implementation in

00:15:51,080 --> 00:15:55,160
particular because of the lack of a

00:15:52,310 --> 00:15:57,020
library interface to GPG I would just

00:15:55,160 --> 00:15:59,990
like to make a motion right here right

00:15:57,020 --> 00:16:08,240
now I know there's a lot of interest in

00:15:59,990 --> 00:16:17,180
I'm a to continue as planned this like

00:16:08,240 --> 00:16:18,589
tutorial a truck sure and if we can

00:16:17,180 --> 00:16:20,209
figure out a time to have a further

00:16:18,589 --> 00:16:21,680
discussion I'll try to announce that and

00:16:20,209 --> 00:16:23,300
maybe put it into the same document in

00:16:21,680 --> 00:16:27,350
gobby so you can check back to see where

00:16:23,300 --> 00:16:30,830
wafer got scheduled so okay so the basic

00:16:27,350 --> 00:16:33,170
idea right is that we've got sorry yeah

00:16:30,830 --> 00:16:34,670
whoever put subkeys in on line 59 is

00:16:33,170 --> 00:16:36,380
absolutely correct I'm not sure why I

00:16:34,670 --> 00:16:41,060
didn't put the subkeys in there that's

00:16:36,380 --> 00:16:43,100
totally needs to be in there and it

00:16:41,060 --> 00:16:44,870
should have each sub key I'm not gonna

00:16:43,100 --> 00:16:45,890
do fancy Unicode line drawings on that

00:16:44,870 --> 00:16:51,020
but your subject you should have a

00:16:45,890 --> 00:16:53,870
binding signature someone wants to hook

00:16:51,020 --> 00:16:55,940
those up the sub keys should come

00:16:53,870 --> 00:16:57,490
directly off of the primary key sorry

00:16:55,940 --> 00:17:02,030
that's off the top of the screen here

00:16:57,490 --> 00:17:05,160
each primary key can have zero or more

00:17:02,030 --> 00:17:08,069
sub keys and the sub keys should have

00:17:05,160 --> 00:17:15,900
basically one binding signature each sub

00:17:08,069 --> 00:17:19,319
key so yes so so what's happening here

00:17:15,900 --> 00:17:23,910
someone's got some nice someone's got

00:17:19,319 --> 00:17:26,540
some nice unicode chats so the binding

00:17:23,910 --> 00:17:32,370
signature is a signature on a sub key

00:17:26,540 --> 00:17:34,230
that binds it to the primary key so the

00:17:32,370 --> 00:17:36,030
key material in a sub key is the same

00:17:34,230 --> 00:17:38,370
kind of key material that you'd have in

00:17:36,030 --> 00:17:41,370
a primary key so for example it might be

00:17:38,370 --> 00:17:43,710
an RSA key but it might have different

00:17:41,370 --> 00:17:44,970
properties than the primary signature it

00:17:43,710 --> 00:17:46,890
might be a different size it might be

00:17:44,970 --> 00:17:49,200
marked to say this key is to be used to

00:17:46,890 --> 00:17:51,510
encrypt mail rather than to sign things

00:17:49,200 --> 00:17:53,340
and but how do you know that it belongs

00:17:51,510 --> 00:17:56,460
to the same person the way that you know

00:17:53,340 --> 00:17:59,520
is that the primary key has signed over

00:17:56,460 --> 00:18:02,070
that sub key and itself and said this

00:17:59,520 --> 00:18:03,720
sub key belongs to me and you can then

00:18:02,070 --> 00:18:05,550
infer that the its associated with the

00:18:03,720 --> 00:18:09,120
user ID that's also associated with the

00:18:05,550 --> 00:18:11,400
primary key that actually brings up a

00:18:09,120 --> 00:18:13,200
question I was having in terms of what's

00:18:11,400 --> 00:18:15,720
recommended best practice with the

00:18:13,200 --> 00:18:22,260
primary key always be the signing key

00:18:15,720 --> 00:18:25,490
and so so you're asking questions about

00:18:22,260 --> 00:18:27,510
the key usage and the open PGP standard

00:18:25,490 --> 00:18:30,480
defines a bunch of different possible

00:18:27,510 --> 00:18:32,940
key usages and I want it here I'm gonna

00:18:30,480 --> 00:18:34,410
introduce a bit of terminology that I

00:18:32,940 --> 00:18:37,920
didn't write down here either

00:18:34,410 --> 00:18:39,800
very sloppy as me so I would like to

00:18:37,920 --> 00:18:42,750
distinguish between signing and

00:18:39,800 --> 00:18:45,120
certification and so when I say signing

00:18:42,750 --> 00:18:47,340
I do my best to say signing only when

00:18:45,120 --> 00:18:49,650
we're making a signature over regular

00:18:47,340 --> 00:18:51,510
data so this is data that's coming from

00:18:49,650 --> 00:18:54,810
me I'm putting my stamp on this data and

00:18:51,510 --> 00:18:58,350
when I say certification I mean I am

00:18:54,810 --> 00:19:01,350
making some kind of open PGP signature

00:18:58,350 --> 00:19:03,510
and that is a certification binds a key

00:19:01,350 --> 00:19:04,770
to an identity or a key to another key

00:19:03,510 --> 00:19:05,940
or something like that but it's working

00:19:04,770 --> 00:19:09,830
within that framework and that's

00:19:05,940 --> 00:19:11,490
different from me signing my email so

00:19:09,830 --> 00:19:13,380
with that distinction between

00:19:11,490 --> 00:19:17,640
certification and signing there's a

00:19:13,380 --> 00:19:18,279
separate and distinct key usage that is

00:19:17,640 --> 00:19:20,409
sir

00:19:18,279 --> 00:19:23,169
vacation that's distinct from science

00:19:20,409 --> 00:19:26,289
data signatures your primary key is

00:19:23,169 --> 00:19:28,450
guaranteed by the structure of this

00:19:26,289 --> 00:19:31,359
whole thing to be assertive certifying

00:19:28,450 --> 00:19:33,909
key it has to be able to certify or else

00:19:31,359 --> 00:19:37,479
you couldn't make the signatures that

00:19:33,909 --> 00:19:38,739
bind user IDs and sub keys to it so

00:19:37,479 --> 00:19:41,289
you're guaranteed that that

00:19:38,739 --> 00:19:42,820
certification and then yes I do

00:19:41,289 --> 00:19:45,669
recommend that you have a separate sub

00:19:42,820 --> 00:19:47,169
key for encryption and then there's a

00:19:45,669 --> 00:19:48,639
question about how you want to deal with

00:19:47,169 --> 00:19:50,169
signing you can either go ahead and sign

00:19:48,639 --> 00:19:51,759
with your primary key or you can make a

00:19:50,169 --> 00:19:53,200
separate sub key for signing and maybe

00:19:51,759 --> 00:19:54,969
people can we maybe we can discuss that

00:19:53,200 --> 00:19:57,039
I'm going to get into the idea of

00:19:54,969 --> 00:19:59,679
separate sub keys for signing shortly

00:19:57,039 --> 00:20:01,330
but yes I recommend that you do not use

00:19:59,679 --> 00:20:03,460
a single primary key for all purposes

00:20:01,330 --> 00:20:05,200
and the reason for that is because there

00:20:03,460 --> 00:20:06,729
are certain kinds of attacks where

00:20:05,200 --> 00:20:08,409
someone might be able to convince you to

00:20:06,729 --> 00:20:10,629
do something with your key that they

00:20:08,409 --> 00:20:12,039
could then replay in another domain so

00:20:10,629 --> 00:20:13,899
if you have a key that you generally use

00:20:12,039 --> 00:20:16,989
for one thing keep using it for that one

00:20:13,899 --> 00:20:19,139
thing and mark it so that it doesn't it

00:20:16,989 --> 00:20:21,669
can't be used for these other things and

00:20:19,139 --> 00:20:23,200
sub keys are designed specifically for

00:20:21,669 --> 00:20:24,489
that kind of a use case to separate it

00:20:23,200 --> 00:20:26,469
out and say okay this key is going to do

00:20:24,489 --> 00:20:33,879
this stuff and don't don't it trust it

00:20:26,469 --> 00:20:35,499
if you see it over here so okay so the

00:20:33,879 --> 00:20:38,349
core of this stuff is asymmetric

00:20:35,499 --> 00:20:40,179
encryption which means that your key has

00:20:38,349 --> 00:20:42,429
some secret material that you and only

00:20:40,179 --> 00:20:43,809
you control and then there's public

00:20:42,429 --> 00:20:45,580
material that everyone in the world has

00:20:43,809 --> 00:20:47,229
to know about so I wanted to talk a

00:20:45,580 --> 00:20:48,879
little bit about the public key material

00:20:47,229 --> 00:20:50,259
right now because there are some

00:20:48,879 --> 00:20:52,089
surprising properties that people don't

00:20:50,259 --> 00:20:54,099
expect I'm not going to go into the

00:20:52,089 --> 00:20:56,979
cryptographic part of it for the public

00:20:54,099 --> 00:20:58,389
key material which is everything that we

00:20:56,979 --> 00:21:00,309
saw in that whole certificate all of

00:20:58,389 --> 00:21:02,609
that stuff is public the secret key

00:21:00,309 --> 00:21:04,899
material doesn't even show up there so

00:21:02,609 --> 00:21:08,950
what we have is we have a key server

00:21:04,899 --> 00:21:12,309
network that distributes keys all around

00:21:08,950 --> 00:21:14,200
the world relatively rapidly and anyone

00:21:12,309 --> 00:21:17,849
can access it and that's all public and

00:21:14,200 --> 00:21:20,830
that's using react to sit using hkp

00:21:17,849 --> 00:21:22,809
noodles just mentioned that people tend

00:21:20,830 --> 00:21:24,429
to think that it's all SKS which is one

00:21:22,809 --> 00:21:26,619
implementation which we have in Debian

00:21:24,429 --> 00:21:29,649
right now but it's not all SKS there are

00:21:26,619 --> 00:21:31,840
other key servers including our neck and

00:21:29,649 --> 00:21:36,190
PKS but

00:21:31,840 --> 00:21:37,840
geordie of it right now is SKS so

00:21:36,190 --> 00:21:39,460
there's a surprising characteristics

00:21:37,840 --> 00:21:41,529
about this key server network one thing

00:21:39,460 --> 00:21:43,059
is that when you inject if you upload

00:21:41,529 --> 00:21:45,400
your public key to the one of the key

00:21:43,059 --> 00:21:47,350
servers within a couple of hours almost

00:21:45,400 --> 00:21:50,409
all the key servers all around the globe

00:21:47,350 --> 00:21:52,630
will have that key all of that that

00:21:50,409 --> 00:21:55,779
entire certificate will be published

00:21:52,630 --> 00:21:58,690
globally and once you publish it there

00:21:55,779 --> 00:22:00,580
are no take-backs any data once put in

00:21:58,690 --> 00:22:02,679
the key server network is permanently in

00:22:00,580 --> 00:22:04,960
the key server network so if you don't

00:22:02,679 --> 00:22:07,000
want this to be public don't put it in

00:22:04,960 --> 00:22:10,270
the key server network you can't take it

00:22:07,000 --> 00:22:12,909
out so a consequence of this because if

00:22:10,270 --> 00:22:15,870
the open PGP certificates are certified

00:22:12,909 --> 00:22:18,370
by other certificates so you've got

00:22:15,870 --> 00:22:19,870
potential for mapping of a social graph

00:22:18,370 --> 00:22:22,179
there are lot of people who are

00:22:19,870 --> 00:22:24,940
uncomfortable with that so there will be

00:22:22,179 --> 00:22:26,980
a key signing here at this conference

00:22:24,940 --> 00:22:28,809
haven't announced exactly when it's

00:22:26,980 --> 00:22:31,840
going to be I'm hoping that it will be

00:22:28,809 --> 00:22:33,460
Thursday evening but you can also sign

00:22:31,840 --> 00:22:35,320
keys with anyone at any time including

00:22:33,460 --> 00:22:40,980
during this conference but even if it's

00:22:35,320 --> 00:22:43,510
not at the larger key signing event so

00:22:40,980 --> 00:22:46,720
but that means that say I've signed

00:22:43,510 --> 00:22:48,700
ganar ski if Grinner uploads his open

00:22:46,720 --> 00:22:50,860
PGP certificate to the key server

00:22:48,700 --> 00:22:54,789
Network it now has a signature over his

00:22:50,860 --> 00:22:57,340
user ID and his key that's made by my

00:22:54,789 --> 00:22:59,169
key so now anyone who wants to can fetch

00:22:57,340 --> 00:23:03,270
that information off the public u server

00:22:59,169 --> 00:23:05,440
network and say ah dkg has met guna and

00:23:03,270 --> 00:23:07,270
they now know that there's been an

00:23:05,440 --> 00:23:09,520
interaction between us so this allows

00:23:07,270 --> 00:23:11,980
someone who's interested to do a map of

00:23:09,520 --> 00:23:14,590
the sort of social graph that says who

00:23:11,980 --> 00:23:16,419
has met who and because a lot of people

00:23:14,590 --> 00:23:18,279
are unwilling to sign keys unless it's

00:23:16,419 --> 00:23:20,230
someone who they know personally it

00:23:18,279 --> 00:23:22,539
might even be implied that it's not just

00:23:20,230 --> 00:23:24,399
who has met who but who actually knows

00:23:22,539 --> 00:23:26,590
who so we're starting to get to the

00:23:24,399 --> 00:23:27,850
point where if you look at it you might

00:23:26,590 --> 00:23:30,549
say oh well this is actually like a

00:23:27,850 --> 00:23:31,960
whole Facebook friends graph and well

00:23:30,549 --> 00:23:33,520
what can you do with that well there's a

00:23:31,960 --> 00:23:36,370
lot of insidious things that someone

00:23:33,520 --> 00:23:37,750
who's and who you don't like might be

00:23:36,370 --> 00:23:39,130
able to do like figure out who your

00:23:37,750 --> 00:23:41,289
friends are and figure out where you

00:23:39,130 --> 00:23:44,590
live and where you've been and there's

00:23:41,289 --> 00:23:45,639
all kinds of stuff so some people are a

00:23:44,590 --> 00:23:46,839
little bit nervous about

00:23:45,639 --> 00:23:48,849
fact that there's a potential for some

00:23:46,839 --> 00:23:50,829
kind of social graph mapping I'd like to

00:23:48,849 --> 00:23:52,809
emphasize that if you just sign people's

00:23:50,829 --> 00:23:54,609
keys after having met and identified

00:23:52,809 --> 00:23:56,469
them that's the only thing it needs to

00:23:54,609 --> 00:23:58,599
say it doesn't need to be these are my

00:23:56,469 --> 00:24:00,609
friends it just needs to be I've

00:23:58,599 --> 00:24:02,259
identified this person and if you do

00:24:00,609 --> 00:24:04,559
that I think the social graph mapping

00:24:02,259 --> 00:24:07,059
becomes significantly less damaging and

00:24:04,559 --> 00:24:08,109
certainly less damaging than for example

00:24:07,059 --> 00:24:10,119
the information that is actually

00:24:08,109 --> 00:24:13,509
contained in your Facebook friends graph

00:24:10,119 --> 00:24:15,039
or the information that lists the all of

00:24:13,509 --> 00:24:16,629
the emails that you've sent or something

00:24:15,039 --> 00:24:29,339
do you want to distend to the microphone

00:24:16,629 --> 00:24:29,339
I think the mic is being turned on

00:24:34,360 --> 00:24:43,130
okay let's write this one yes there's

00:24:39,309 --> 00:24:48,110
this part within cappucci about where

00:24:43,130 --> 00:24:50,720
you can put put on it's it's called

00:24:48,110 --> 00:24:53,120
trust leverage that you can set but that

00:24:50,720 --> 00:24:55,820
part will never be exported to the key

00:24:53,120 --> 00:24:58,520
servers so if you set a trust level on

00:24:55,820 --> 00:25:00,110
someone it will not be exported to the

00:24:58,520 --> 00:25:04,400
key service that's right

00:25:00,110 --> 00:25:05,870
so yeah more vocabulary that I feel like

00:25:04,400 --> 00:25:07,490
I should have written down here

00:25:05,870 --> 00:25:10,490
because I've tried to distinguish

00:25:07,490 --> 00:25:13,790
certification versus signing and so let

00:25:10,490 --> 00:25:16,130
me add a bit of other vocab which is I

00:25:13,790 --> 00:25:19,040
think trust levels are like falling out

00:25:16,130 --> 00:25:23,179
of favor they were asked by default here

00:25:19,040 --> 00:25:24,650
some years ago no mmm no no Rhonda's

00:25:23,179 --> 00:25:25,970
talking about so this is what I this is

00:25:24,650 --> 00:25:28,580
this is where we need a vocabulary

00:25:25,970 --> 00:25:30,440
disambiguation because even the GPG

00:25:28,580 --> 00:25:31,820
documentation was fuzzy about this until

00:25:30,440 --> 00:25:38,270
about a year ago when I sent them some

00:25:31,820 --> 00:25:41,240
patches so so let's say I have a key and

00:25:38,270 --> 00:25:43,010
the key claims that it belongs gonna I'm

00:25:41,240 --> 00:25:45,530
using you as an example I've been doing

00:25:43,010 --> 00:25:47,030
this sorry are you I hope you're okay

00:25:45,530 --> 00:25:48,770
with me using your as an example so

00:25:47,030 --> 00:25:50,750
let's say I have a key and the key has a

00:25:48,770 --> 00:25:55,880
user ID attached to it that says do not

00:25:50,750 --> 00:25:59,240
wolf well who can make a key that says

00:25:55,880 --> 00:26:01,460
green are wolf yes you can

00:25:59,240 --> 00:26:03,260
you all can it's not hard to make a key

00:26:01,460 --> 00:26:05,240
and claim whatever you like so I have

00:26:03,260 --> 00:26:08,270
this key and I have to decide is this

00:26:05,240 --> 00:26:10,220
actually a key that belongs to guna well

00:26:08,270 --> 00:26:11,990
I wait ooh do that is that I could go

00:26:10,220 --> 00:26:13,910
physically talk to guna or and he'll

00:26:11,990 --> 00:26:15,800
tell me yes is this key so this is a key

00:26:13,910 --> 00:26:18,190
this is basically what's happening when

00:26:15,800 --> 00:26:21,530
we do a key signing

00:26:18,190 --> 00:26:22,580
so once I've confirmed with ganar that

00:26:21,530 --> 00:26:24,559
it's is key

00:26:22,580 --> 00:26:26,600
I believe that key is I'm gonna say I'm

00:26:24,559 --> 00:26:28,550
gonna use the term valid so I believe

00:26:26,600 --> 00:26:30,170
that that key belongs to the person who

00:26:28,550 --> 00:26:39,380
is identified by the user ID associated

00:26:30,170 --> 00:26:41,540
with it so just to clarify that you are

00:26:39,380 --> 00:26:44,540
designing the user IDs so what you're

00:26:41,540 --> 00:26:46,790
signing is you're signing the the

00:26:44,540 --> 00:26:47,520
primary key which you've interpreted

00:26:46,790 --> 00:26:50,430
based

00:26:47,520 --> 00:26:52,440
on the fingerprint right and the user ID

00:26:50,430 --> 00:26:54,540
associated with that so you're actually

00:26:52,440 --> 00:26:57,360
and I mean use the term binding again

00:26:54,540 --> 00:26:59,550
you're actually binding that user ID to

00:26:57,360 --> 00:27:00,960
that public to that primary key you're

00:26:59,550 --> 00:27:04,130
saying I believe that these things go

00:27:00,960 --> 00:27:06,150
together and making a cryptographic

00:27:04,130 --> 00:27:09,630
certification that no one but you can

00:27:06,150 --> 00:27:12,030
make and if and if you have if you

00:27:09,630 --> 00:27:14,250
received a certificate that has two user

00:27:12,030 --> 00:27:16,500
IDs in it like mine has several user IDs

00:27:14,250 --> 00:27:20,490
because I'm both DK GFF forstman net and

00:27:16,500 --> 00:27:22,080
D K G at Debian org so you would need

00:27:20,490 --> 00:27:24,690
you wouldn't need to but you could

00:27:22,080 --> 00:27:26,400
certify both of those things or you

00:27:24,690 --> 00:27:28,350
could decide I don't know whether he's

00:27:26,400 --> 00:27:29,880
actually dkg at Debian org or I think

00:27:28,350 --> 00:27:32,070
he's actually not but I do know that

00:27:29,880 --> 00:27:34,410
he's DK g8 v Horseman net and you can

00:27:32,070 --> 00:27:37,050
certify the one user ID and not certify

00:27:34,410 --> 00:27:41,280
the other these are all it's all within

00:27:37,050 --> 00:27:43,470
your control to do that so but what I

00:27:41,280 --> 00:27:45,090
was just saying so I've gotten this key

00:27:43,470 --> 00:27:47,430
I've looked at its fingerprint I've

00:27:45,090 --> 00:27:49,980
talked to goon r it has two Gunners user

00:27:47,430 --> 00:27:52,980
ID on it the fingerprint checks out I

00:27:49,980 --> 00:27:55,110
now believe that key is valid so I

00:27:52,980 --> 00:27:56,820
believe this key belongs to goon r I can

00:27:55,110 --> 00:27:59,040
now make a certification about that and

00:27:56,820 --> 00:28:00,600
I can even send a certification to guna

00:27:59,040 --> 00:28:02,880
or I can publish it to the public key

00:28:00,600 --> 00:28:04,590
server network to tell other people

00:28:02,880 --> 00:28:09,000
I believe this key belongs to goon r

00:28:04,590 --> 00:28:13,110
that's all about validity but I can now

00:28:09,000 --> 00:28:17,340
also say in GPG I trust the person who

00:28:13,110 --> 00:28:19,410
holds this key and I trust them is it

00:28:17,340 --> 00:28:21,180
limited in scope GPG doesn't care about

00:28:19,410 --> 00:28:23,490
whether you trust them to feed your

00:28:21,180 --> 00:28:26,610
children GPG doesn't care about whether

00:28:23,490 --> 00:28:27,720
you trust them to cook good food GPG

00:28:26,610 --> 00:28:29,970
doesn't even care about whether you

00:28:27,720 --> 00:28:31,860
trust them to write good software GPG

00:28:29,970 --> 00:28:34,050
cares the trust they're talking about is

00:28:31,860 --> 00:28:36,110
very narrow and it says i trust the

00:28:34,050 --> 00:28:39,000
person who holds this key to make good

00:28:36,110 --> 00:28:40,500
identifications that is their

00:28:39,000 --> 00:28:43,950
certifications that are made on other

00:28:40,500 --> 00:28:48,170
keys are going I'm going to consider

00:28:43,950 --> 00:28:51,420
those things acceptable so then if ganar

00:28:48,170 --> 00:28:53,040
meets noodles Granard checks out the key

00:28:51,420 --> 00:28:55,680
with noodles gonna makes a certification

00:28:53,040 --> 00:28:57,420
for noodles and publishes that well I

00:28:55,680 --> 00:28:59,430
might now take that certification and

00:28:57,420 --> 00:29:02,320
say odd the certification was made by

00:28:59,430 --> 00:29:05,020
therefore I now believe that that key is

00:29:02,320 --> 00:29:07,570
in fact a noodle ski so that's a valid

00:29:05,020 --> 00:29:11,560
key that I now believe is valid because

00:29:07,570 --> 00:29:14,320
I trust Kunar so when Rhonda was talking

00:29:11,560 --> 00:29:16,840
about setting trust levels in a key

00:29:14,320 --> 00:29:18,130
you're not publishing your trust levels

00:29:16,840 --> 00:29:21,760
the trust levels are something that GPG

00:29:18,130 --> 00:29:23,500
keeps to itself and it knows you've told

00:29:21,760 --> 00:29:25,630
it this is a person who I think makes

00:29:23,500 --> 00:29:26,500
good certifications this is a person who

00:29:25,630 --> 00:29:29,290
I think does not make good

00:29:26,500 --> 00:29:32,170
certifications and by default it assumes

00:29:29,290 --> 00:29:34,480
that that you don't you're not willing

00:29:32,170 --> 00:29:37,210
to rely on anybody certifications but so

00:29:34,480 --> 00:29:39,730
when you hear trust that means am I

00:29:37,210 --> 00:29:42,460
willing to accept certifications by this

00:29:39,730 --> 00:29:44,560
person and when you hear validity that

00:29:42,460 --> 00:29:47,020
means do I believe this key belongs to

00:29:44,560 --> 00:29:49,900
the person whose name is associated with

00:29:47,020 --> 00:29:58,930
it do you want to try that microphone or

00:29:49,900 --> 00:30:01,380
try Granard it works now you can revoke

00:29:58,930 --> 00:30:04,480
your keys by publishing the revocation

00:30:01,380 --> 00:30:08,590
certificate yep how would you revoke

00:30:04,480 --> 00:30:09,700
trust let me add revocation cuz that's

00:30:08,590 --> 00:30:10,500
another one that I should have put in

00:30:09,700 --> 00:30:12,670
here

00:30:10,500 --> 00:30:14,590
and I'll put it in my handwriting in

00:30:12,670 --> 00:30:16,710
green here so that it looks like I

00:30:14,590 --> 00:30:19,740
thought of it

00:30:16,710 --> 00:30:22,420
well revocation is a public statement

00:30:19,740 --> 00:30:24,280
right it says either this key is not

00:30:22,420 --> 00:30:26,830
valid anymore when you revoke your key

00:30:24,280 --> 00:30:28,630
or when you revoke your user ID it says

00:30:26,830 --> 00:30:33,850
this user ID is no longer associated

00:30:28,630 --> 00:30:35,710
with me I used to work at fou Corp comm

00:30:33,850 --> 00:30:37,930
and I no longer do so I'm gonna revoke

00:30:35,710 --> 00:30:39,970
that user ID so these are public

00:30:37,930 --> 00:30:41,470
statements but Trust is not a public

00:30:39,970 --> 00:30:44,170
thing you're not publishing your trust

00:30:41,470 --> 00:30:45,850
levels so to revoke your trust just

00:30:44,170 --> 00:30:47,230
means changing your trust and you'd set

00:30:45,850 --> 00:30:51,790
that in the same way that you would use

00:30:47,230 --> 00:30:55,480
GPG to change to set the trust so you'd

00:30:51,790 --> 00:30:56,950
say GPG edit key and then the identity

00:30:55,480 --> 00:30:59,530
that you're gonna be editing the key for

00:30:56,950 --> 00:31:01,330
and then you'd say trust and it would

00:30:59,530 --> 00:31:02,500
say what's your neutral trust decision

00:31:01,330 --> 00:31:04,360
and so if you had previously said I

00:31:02,500 --> 00:31:06,280
trust guna are fully and then you

00:31:04,360 --> 00:31:08,200
discovered that actually Granard tends

00:31:06,280 --> 00:31:11,050
to sign keys immediately after the wine

00:31:08,200 --> 00:31:12,070
and cheese party then you might go in

00:31:11,050 --> 00:31:13,870
and say

00:31:12,070 --> 00:31:15,340
okay I'm gonna drop the trust level and

00:31:13,870 --> 00:31:18,190
his certifications back down to zero

00:31:15,340 --> 00:31:19,960
because she's probably full of wine and

00:31:18,190 --> 00:31:23,680
cheese and that's not a good time to be

00:31:19,960 --> 00:31:25,000
thinking about what you're doing so by

00:31:23,680 --> 00:31:25,240
the way I don't think he has ever done

00:31:25,000 --> 00:31:30,450
that

00:31:25,240 --> 00:31:35,620
so I'm today's a good moment to find out

00:31:30,450 --> 00:31:38,410
right uh yeah lots of different things

00:31:35,620 --> 00:31:41,890
that we could be covering here so let me

00:31:38,410 --> 00:31:43,510
try to hit a couple of other details

00:31:41,890 --> 00:31:44,950
that people might be interested in and

00:31:43,510 --> 00:31:49,000
then I'd like we're kind of running

00:31:44,950 --> 00:31:50,740
close on time already so we've talked a

00:31:49,000 --> 00:31:52,540
lot about the public key handling

00:31:50,740 --> 00:31:55,270
another question might be about how we

00:31:52,540 --> 00:31:57,550
handle secret keys your secret key

00:31:55,270 --> 00:32:01,000
material really does need to stay secret

00:31:57,550 --> 00:32:03,460
to you if anyone else learns the your

00:32:01,000 --> 00:32:05,200
secret key material they can impersonate

00:32:03,460 --> 00:32:06,670
you on the network if they can

00:32:05,200 --> 00:32:08,050
impersonate you that violates the

00:32:06,670 --> 00:32:09,280
identity thing that we're trying to

00:32:08,050 --> 00:32:11,650
build out which means that they can

00:32:09,280 --> 00:32:13,510
damage your reputation they can receive

00:32:11,650 --> 00:32:15,700
confidential messages that were intended

00:32:13,510 --> 00:32:17,530
for you they can masquerade as you when

00:32:15,700 --> 00:32:19,270
talking to someone else it violates a

00:32:17,530 --> 00:32:21,250
whole but it can upload packages as you

00:32:19,270 --> 00:32:22,720
if you're a Debian developer which then

00:32:21,250 --> 00:32:24,790
hurts everybody else in the distribution

00:32:22,720 --> 00:32:26,860
including all of our users and all of

00:32:24,790 --> 00:32:28,540
the derivatives so keeping your secret

00:32:26,860 --> 00:32:30,970
key material secret is actually really

00:32:28,540 --> 00:32:32,290
critically important also really

00:32:30,970 --> 00:32:34,330
critically important is making sure that

00:32:32,290 --> 00:32:36,160
you still have access to your secret key

00:32:34,330 --> 00:32:38,020
material so not only should no one else

00:32:36,160 --> 00:32:40,210
have access to it you need to be able to

00:32:38,020 --> 00:32:43,150
have access to it if you lose the laptop

00:32:40,210 --> 00:32:44,410
that it was on because it got out in

00:32:43,150 --> 00:32:47,020
there it was out in the rain and it got

00:32:44,410 --> 00:32:48,610
soaked you now don't have an identity to

00:32:47,020 --> 00:32:50,110
be able to connect back into the web of

00:32:48,610 --> 00:32:53,080
trust so you'll have to rebuild it again

00:32:50,110 --> 00:32:54,460
so managing your secret key material

00:32:53,080 --> 00:32:56,440
carefully is a pretty critically

00:32:54,460 --> 00:32:57,670
important thing and we've there's a lot

00:32:56,440 --> 00:33:00,700
of people who have different interesting

00:32:57,670 --> 00:33:03,310
strategies to do that including things

00:33:00,700 --> 00:33:05,260
like keeping your primary key offline so

00:33:03,310 --> 00:33:08,920
it's available and having sub keys to do

00:33:05,260 --> 00:33:11,100
all of your regular work you can use

00:33:08,920 --> 00:33:14,980
smart cards as somebody noted up there

00:33:11,100 --> 00:33:17,710
and there are other approaches that you

00:33:14,980 --> 00:33:19,320
can that you can use so you know you're

00:33:17,710 --> 00:33:22,330
standing with the micro did you have

00:33:19,320 --> 00:33:23,620
okay so I wanted to point out that there

00:33:22,330 --> 00:33:26,349
are some some things to think about

00:33:23,620 --> 00:33:27,909
there for managing the secret the secret

00:33:26,349 --> 00:33:31,109
and then there are some suggestions sort

00:33:27,909 --> 00:33:33,549
of technical suggestions about key size

00:33:31,109 --> 00:33:35,229
ciphers to use and things like that that

00:33:33,549 --> 00:33:45,059
I'm not going to I think get into too

00:33:35,229 --> 00:33:47,739
much detail I can yeah

00:33:45,059 --> 00:33:51,909
I'm just curious how many people in this

00:33:47,739 --> 00:33:54,039
room either use offline primary keys so

00:33:51,909 --> 00:33:59,859
they don't have the primary keys on

00:33:54,039 --> 00:34:03,639
their laptop but only is sub keys so not

00:33:59,859 --> 00:34:05,440
very so many people and so but let me

00:34:03,639 --> 00:34:07,719
just point out here this is the there's

00:34:05,440 --> 00:34:08,950
there's a confirmation bias in the

00:34:07,719 --> 00:34:12,010
people who are interested in these

00:34:08,950 --> 00:34:14,440
questions being in this room and that

00:34:12,010 --> 00:34:17,049
was less than 25 percent of the people

00:34:14,440 --> 00:34:18,399
in this room I think so very few people

00:34:17,049 --> 00:34:19,720
are currently doing that I'm not

00:34:18,399 --> 00:34:22,119
currently doing it even though right now

00:34:19,720 --> 00:34:23,379
I think I probably should be so that's

00:34:22,119 --> 00:34:27,010
something that I plan on trying to sort

00:34:23,379 --> 00:34:29,609
out soon and how many people are using

00:34:27,010 --> 00:34:29,609
smart cuts

00:34:35,900 --> 00:34:42,520
but basically you can have a smart card

00:34:39,290 --> 00:34:47,150
soon external device where you store the

00:34:42,520 --> 00:34:50,690
private key and the idea is that as it

00:34:47,150 --> 00:34:53,030
is an external device it cannot be

00:34:50,690 --> 00:34:55,310
accessed so your key cannot be stolen

00:34:53,030 --> 00:34:58,670
from the by by breaking into your

00:34:55,310 --> 00:35:01,280
computer and any signing will actually

00:34:58,670 --> 00:35:05,210
not be done by the computer but by the

00:35:01,280 --> 00:35:07,820
card itself right so I I actually used

00:35:05,210 --> 00:35:09,560
to carry a smart card for some secret

00:35:07,820 --> 00:35:11,210
key material that happened to not the

00:35:09,560 --> 00:35:13,880
open PGP secret key material

00:35:11,210 --> 00:35:17,630
it was RSA keys for other purposes and I

00:35:13,880 --> 00:35:20,540
carried it for about four years and I'm

00:35:17,630 --> 00:35:22,400
no longer carry it so I'll just say why

00:35:20,540 --> 00:35:23,720
I decided that the trade-off was worth

00:35:22,400 --> 00:35:25,610
it at the time which is the stuff that

00:35:23,720 --> 00:35:27,500
you just described and after four years

00:35:25,610 --> 00:35:30,860
I've now decided that I don't think it's

00:35:27,500 --> 00:35:32,300
worth it for me one is that the open

00:35:30,860 --> 00:35:34,250
smart cards if you use them every day

00:35:32,300 --> 00:35:36,860
and you carry them every day they will

00:35:34,250 --> 00:35:39,080
fail they're cheap crappy hardware and

00:35:36,860 --> 00:35:41,630
they don't have really a long insertion

00:35:39,080 --> 00:35:44,930
life and if you use it regularly it's

00:35:41,630 --> 00:35:46,700
likely to fail the second reason and

00:35:44,930 --> 00:35:48,110
when it fails then you have to dig out a

00:35:46,700 --> 00:35:49,610
key from backup or whatever and the

00:35:48,110 --> 00:35:53,090
second reason that I don't use it

00:35:49,610 --> 00:35:54,890
anymore is because I've been reading

00:35:53,090 --> 00:35:56,810
about different kinds of attacks on

00:35:54,890 --> 00:35:58,940
smart cards and there actually are

00:35:56,810 --> 00:36:02,630
cryptographic attacks on smart cards

00:35:58,940 --> 00:36:04,370
that make it sound like you might be

00:36:02,630 --> 00:36:06,500
able to extract the key from the card

00:36:04,370 --> 00:36:07,790
itself which is like the absolute worst

00:36:06,500 --> 00:36:11,060
thing that you're not supposed to be

00:36:07,790 --> 00:36:12,680
able to do so there are I think they

00:36:11,060 --> 00:36:14,420
have a lot of advantages I think they

00:36:12,680 --> 00:36:19,040
also have some disadvantages and I'm not

00:36:14,420 --> 00:36:22,610
sure I'm not convinced enough by the

00:36:19,040 --> 00:36:23,990
hardware vendors that the security

00:36:22,610 --> 00:36:26,600
promises they offer are going to be

00:36:23,990 --> 00:36:29,120
maintained unfortunately we have a

00:36:26,600 --> 00:36:31,040
question on IRC from somebody who's very

00:36:29,120 --> 00:36:36,050
far away in the Central American country

00:36:31,040 --> 00:36:38,330
by the pool I have a question how is the

00:36:36,050 --> 00:36:41,060
normal approach to use when you notice

00:36:38,330 --> 00:36:42,770
that the user has several keys and has

00:36:41,060 --> 00:36:46,220
no longer access to those keys

00:36:42,770 --> 00:36:48,620
personally I ask if they just cause they

00:36:46,220 --> 00:36:49,630
just lost their secret key and if they

00:36:48,620 --> 00:36:52,210
confirmed ID

00:36:49,630 --> 00:36:54,369
right not to sign any new key since I

00:36:52,210 --> 00:37:03,730
feel they will not take a good care of

00:36:54,369 --> 00:37:05,140
their private data okay so so part about

00:37:03,730 --> 00:37:07,900
part of the thing about open PGP

00:37:05,140 --> 00:37:11,319
certifications is that these are

00:37:07,900 --> 00:37:12,819
subjective questions right is this

00:37:11,319 --> 00:37:15,690
person who they say they are do they

00:37:12,819 --> 00:37:18,099
really have control of their key and

00:37:15,690 --> 00:37:21,190
it's sort of up to you to figure out

00:37:18,099 --> 00:37:22,869
what you what you're assigning

00:37:21,190 --> 00:37:24,819
parameters are so I don't think I can

00:37:22,869 --> 00:37:26,619
answer that for anyone else I personally

00:37:24,819 --> 00:37:28,299
would not make that decision I would

00:37:26,619 --> 00:37:29,710
sign it but I would probably do is I

00:37:28,299 --> 00:37:31,390
would probably sign their key and now I

00:37:29,710 --> 00:37:34,059
probably set an expiration date on their

00:37:31,390 --> 00:37:37,420
signature on my certification so I would

00:37:34,059 --> 00:37:39,069
say I believe this is their key but it's

00:37:37,420 --> 00:37:42,670
probably only gonna be their key for

00:37:39,069 --> 00:37:44,349
about a year and if in nine months

00:37:42,670 --> 00:37:46,029
they're still using it maybe I'll make

00:37:44,349 --> 00:37:48,700
another certification that extends that

00:37:46,029 --> 00:37:50,289
out to it another year but that way I

00:37:48,700 --> 00:37:51,700
don't have to think about it I can just

00:37:50,289 --> 00:37:53,519
say it's probably about a year long and

00:37:51,700 --> 00:37:56,200
we'll see we'll see where they're at

00:37:53,519 --> 00:37:58,930
expiration

00:37:56,200 --> 00:38:00,160
yeah yeah and I do if you look at the

00:37:58,930 --> 00:38:03,690
certifications that I've made you'll see

00:38:00,160 --> 00:38:06,009
there are lots of there are lots of

00:38:03,690 --> 00:38:07,299
explorations in them not just because I

00:38:06,009 --> 00:38:08,859
think that people are necessarily going

00:38:07,299 --> 00:38:11,619
to be lazy but because I don't know what

00:38:08,859 --> 00:38:13,089
the future is gonna be like so would you

00:38:11,619 --> 00:38:15,069
take the opportunity to educate them

00:38:13,089 --> 00:38:18,759
about revocation certificates

00:38:15,069 --> 00:38:20,920
yes so if you lose control of your key

00:38:18,759 --> 00:38:23,740
or if an adversary or someone unknown

00:38:20,920 --> 00:38:26,920
gains access to your key what can you do

00:38:23,740 --> 00:38:28,869
if you still have your key you can

00:38:26,920 --> 00:38:32,819
generate a revocation certificate right

00:38:28,869 --> 00:38:35,380
then and say this key is no longer valid

00:38:32,819 --> 00:38:37,150
publish it to the key server network

00:38:35,380 --> 00:38:38,829
using the same mechanism and all of the

00:38:37,150 --> 00:38:41,769
key and all of the key server network

00:38:38,829 --> 00:38:43,630
will propagate it and anyone who fetches

00:38:41,769 --> 00:38:44,950
your key again we'll get that revocation

00:38:43,630 --> 00:38:48,400
certificate and say oh this is no longer

00:38:44,950 --> 00:38:50,470
the right key if you do not still have

00:38:48,400 --> 00:38:52,329
access to your key for example if you

00:38:50,470 --> 00:38:54,819
stored the key only on your laptop and

00:38:52,329 --> 00:38:56,710
your laptop was stolen then you don't

00:38:54,819 --> 00:38:59,170
have a way to publish that revocation

00:38:56,710 --> 00:39:01,150
certificate and that means that in the

00:38:59,170 --> 00:39:03,530
future your key will always be published

00:39:01,150 --> 00:39:06,860
and it's out there with no

00:39:03,530 --> 00:39:08,630
vacation so what you can do is you can

00:39:06,860 --> 00:39:11,600
create a revocation certificate and

00:39:08,630 --> 00:39:13,610
store it somewhere else you can put it

00:39:11,600 --> 00:39:15,860
on a USB key you can put it you can

00:39:13,610 --> 00:39:17,180
print it out on paper and if you should

00:39:15,860 --> 00:39:19,250
you have to use it you can type it in

00:39:17,180 --> 00:39:20,720
you'll make a revocation certificate and

00:39:19,250 --> 00:39:23,120
just store it for safekeeping so that

00:39:20,720 --> 00:39:25,280
when you lose your key you can revoke it

00:39:23,120 --> 00:39:26,960
don't give anyone else access to that

00:39:25,280 --> 00:39:28,220
revocation certificate because if they

00:39:26,960 --> 00:39:31,190
have it then they can publish it

00:39:28,220 --> 00:39:33,050
themselves but a very good thing to do

00:39:31,190 --> 00:39:35,000
as soon as you make your first key make

00:39:33,050 --> 00:39:37,100
a revocation certificate store it

00:39:35,000 --> 00:39:38,390
somewhere that someone else that no one

00:39:37,100 --> 00:39:41,420
else can get it but that you'll get be

00:39:38,390 --> 00:39:44,000
able to get access to it one other

00:39:41,420 --> 00:39:47,780
option you can actually allow other keys

00:39:44,000 --> 00:39:50,450
to revoke your key so I use it for

00:39:47,780 --> 00:39:53,600
example life and other key I use for not

00:39:50,450 --> 00:39:57,230
for Debian but for something else which

00:39:53,600 --> 00:39:58,820
I might have E&T can actually revoke so

00:39:57,230 --> 00:40:01,910
I don't need to keep a revocation

00:39:58,820 --> 00:40:03,710
certificate for the other key because

00:40:01,910 --> 00:40:05,030
your other key can can revoke it right

00:40:03,710 --> 00:40:06,470
and you can also do that with a friend

00:40:05,030 --> 00:40:08,750
you could say to a friend someone who

00:40:06,470 --> 00:40:10,100
you actually really do trust you can

00:40:08,750 --> 00:40:11,930
create this kind of revocation

00:40:10,100 --> 00:40:13,760
certificate that says this if this

00:40:11,930 --> 00:40:16,190
person says that my keys or my

00:40:13,760 --> 00:40:19,400
certifications are no good then believe

00:40:16,190 --> 00:40:27,310
them you have to keep in mind that you

00:40:19,400 --> 00:40:27,310
cannot revoke the revoke grant right yep

00:40:30,250 --> 00:40:37,490
sorry for the screen saver there so we

00:40:35,150 --> 00:40:41,420
are really short on time here and I feel

00:40:37,490 --> 00:40:43,160
like we haven't gotten through even the

00:40:41,420 --> 00:40:44,480
quarter of what we could talk about I'm

00:40:43,160 --> 00:40:45,859
going to mention a couple things

00:40:44,480 --> 00:40:48,410
since key server access potentially

00:40:45,859 --> 00:40:50,960
leaks who you're communicating with some

00:40:48,410 --> 00:40:53,900
people don't like to use hkp which is

00:40:50,960 --> 00:40:56,599
the key server access protocol the HTTP

00:40:53,900 --> 00:41:01,730
key server protocol so you can actually

00:40:56,599 --> 00:41:04,400
use h KP s which is h KP / / transport

00:41:01,730 --> 00:41:06,650
layer security that's in newer versions

00:41:04,400 --> 00:41:08,900
of GP g you need to have the GP g - curl

00:41:06,650 --> 00:41:10,280
package available installed on your

00:41:08,900 --> 00:41:14,690
machine to be able to do it and you'll

00:41:10,280 --> 00:41:16,099
need to set a and set which certificate

00:41:14,690 --> 00:41:20,150
authorities you're willing to sign so

00:41:16,099 --> 00:41:23,450
here's an example here I've got key

00:41:20,150 --> 00:41:25,190
server h k PS may keys may 1st org and

00:41:23,450 --> 00:41:26,540
i've got a copy of the certificate

00:41:25,190 --> 00:41:32,020
authority that i think it's going to

00:41:26,540 --> 00:41:34,040
sign it this is in GP new PG g PG kampf

00:41:32,020 --> 00:41:38,030
there's other leakage that can happen

00:41:34,040 --> 00:41:39,320
here keys can embed what key server they

00:41:38,030 --> 00:41:41,270
should be updated from so that every

00:41:39,320 --> 00:41:43,040
time you look at them GP g goes out and

00:41:41,270 --> 00:41:44,720
fetches from there that's kind of a

00:41:43,040 --> 00:41:47,570
phone home feature which is a little bit

00:41:44,720 --> 00:41:51,530
creepy but by default it's set to true

00:41:47,570 --> 00:41:53,510
so I've got key server options in G M G

00:41:51,530 --> 00:41:55,630
B G cough again key server options no

00:41:53,510 --> 00:41:59,390
honor key server URL

00:41:55,630 --> 00:42:01,190
I've got show UID validity turned on and

00:41:59,390 --> 00:42:05,960
verify options and list options so that

00:42:01,190 --> 00:42:07,640
whenever I see a key I can also see the

00:42:05,960 --> 00:42:09,859
key there'll be the key and the user ID

00:42:07,640 --> 00:42:12,170
and GP g will always show me what it

00:42:09,859 --> 00:42:14,750
thinks i believe about the validity of

00:42:12,170 --> 00:42:18,650
that user ID so just by adding show UID

00:42:14,750 --> 00:42:20,570
validity to those it's useful i only

00:42:18,650 --> 00:42:24,710
make certifications using a strong

00:42:20,570 --> 00:42:27,470
digest sha-512 and when I make new keys

00:42:24,710 --> 00:42:30,349
I prefer to make them these are the

00:42:27,470 --> 00:42:33,560
digests that I publish about what I use

00:42:30,349 --> 00:42:36,140
I also do key ID format 0x long so that

00:42:33,560 --> 00:42:38,780
I never see 8 character key IDs anymore

00:42:36,140 --> 00:42:40,760
I just see 16 character key IDs if you

00:42:38,780 --> 00:42:42,480
just drop that one line near GPG kampf

00:42:40,760 --> 00:42:44,100
it'll let you it'll

00:42:42,480 --> 00:42:45,690
view away from having an obvious

00:42:44,100 --> 00:42:48,120
interface that just suggest that you use

00:42:45,690 --> 00:42:53,580
eight characters which we know to be

00:42:48,120 --> 00:42:56,130
trivially compromisable probably a good

00:42:53,580 --> 00:42:59,100
default to add to the package I've been

00:42:56,130 --> 00:43:01,230
I've been pushing upstream to try to

00:42:59,100 --> 00:43:03,360
make to try to change this key ID format

00:43:01,230 --> 00:43:05,430
default and they haven't done it yet but

00:43:03,360 --> 00:43:07,230
I think pushing pushing for that and

00:43:05,430 --> 00:43:09,270
pushing for the removal of the v3 keys

00:43:07,230 --> 00:43:12,600
they've opted to go for the removal of

00:43:09,270 --> 00:43:14,250
the v3 keys which is a stronger wind so

00:43:12,600 --> 00:43:15,840
I'm happy with that for now but we also

00:43:14,250 --> 00:43:18,270
could change defaults within Debian

00:43:15,840 --> 00:43:20,100
there's also an open bug I think in GPG

00:43:18,270 --> 00:43:22,410
suggesting that we set some of these as

00:43:20,100 --> 00:43:25,260
defaults okay the time is up so we're

00:43:22,410 --> 00:43:27,000
gonna end shortly and I don't know we

00:43:25,260 --> 00:43:28,380
maybe should it maybe people who are

00:43:27,000 --> 00:43:29,670
within Debian who are interested you

00:43:28,380 --> 00:43:31,350
talk about whether we're willing to

00:43:29,670 --> 00:43:32,840
diverge from upstream GPG on the

00:43:31,350 --> 00:43:37,410
defaults if we think they're not moving

00:43:32,840 --> 00:43:39,330
in the direction that we want so there's

00:43:37,410 --> 00:43:41,430
a lot more discussion to be had and I'm

00:43:39,330 --> 00:43:44,820
sorry that it was more me talking at you

00:43:41,430 --> 00:43:46,380
than I wanted it to be but if you find

00:43:44,820 --> 00:43:47,820
me or any of those people around the

00:43:46,380 --> 00:43:50,610
conference I hope you'll and you've got

00:43:47,820 --> 00:43:53,160
questions about it or other ideas I hope

00:43:50,610 --> 00:43:54,450
that you'll take the time to stop and

00:43:53,160 --> 00:43:56,930
have a discussion I would be happy to

00:43:54,450 --> 00:43:59,390
certainly talk to people about it more

00:43:56,930 --> 00:44:02,250
one last question

00:43:59,390 --> 00:44:04,470
we need to give our video team crew a

00:44:02,250 --> 00:44:08,100
break between Docs so thank you all for

00:44:04,470 --> 00:44:15,770
coming and yeah I hope your key

00:44:08,100 --> 00:44:19,380
management go as well Thank You Daniel

00:44:15,770 --> 00:44:21,600
yeah she says the amount of information

00:44:19,380 --> 00:44:26,310
we can continue digging in this subject

00:44:21,600 --> 00:44:28,560
is huge I hope well there was something

00:44:26,310 --> 00:44:30,740
in in this talk for everybody for every

00:44:28,560 --> 00:44:30,740

YouTube URL: https://www.youtube.com/watch?v=_iDdVF4VfHQ


