Title: ARM port(s) update
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Steve McIntyre

At: DebConf12
https://debconf12.debconf.org/
Room: Aula Magna
Scheduled start: 2012-07-10 16:00:00
Captions: 
	00:00:00,000 --> 00:00:10,559
hi this is the armed ports update talk

00:00:03,270 --> 00:00:17,190
from Steve McIntyre hey folks so on

00:00:10,559 --> 00:00:18,570
ports we have to we may get more I may

00:00:17,190 --> 00:00:21,630
have put the arm logo on this this is

00:00:18,570 --> 00:00:23,430
not an official arm talk really and I've

00:00:21,630 --> 00:00:24,990
got to say that just in case people back

00:00:23,430 --> 00:00:29,939
home start shouting at me for saying the

00:00:24,990 --> 00:00:32,759
wrong things so quick agenda let's talk

00:00:29,939 --> 00:00:37,160
about the existing arm ports the build

00:00:32,759 --> 00:00:37,160
DS in the hardware that we have or what

00:00:45,770 --> 00:00:51,289
that's what I'm just doing right now

00:00:48,780 --> 00:00:57,780
will have to live with that for now

00:00:51,289 --> 00:00:59,370
bloody OpenOffice so I'm gonna talk

00:00:57,780 --> 00:01:00,780
about the existing arm ports the

00:00:59,370 --> 00:01:03,019
building's in the hardware what other

00:01:00,780 --> 00:01:06,000
people are doing what's coming next

00:01:03,019 --> 00:01:07,950
please people take notes in gobby again

00:01:06,000 --> 00:01:10,710
I will reiterate I'm not here just to

00:01:07,950 --> 00:01:12,450
talk at people please join in if you

00:01:10,710 --> 00:01:14,100
think I'm talking crap tell me if you

00:01:12,450 --> 00:01:16,080
think I'm missing something if you've

00:01:14,100 --> 00:01:18,360
got something to raise please make sure

00:01:16,080 --> 00:01:20,040
you do obviously for the benefit of the

00:01:18,360 --> 00:01:26,100
people on the video make sure you wait

00:01:20,040 --> 00:01:28,470
for a mic otherwise let's go so the

00:01:26,100 --> 00:01:31,380
oldest of the existing arm ports in

00:01:28,470 --> 00:01:35,520
Debian now is our miele we released it

00:01:31,380 --> 00:01:40,520
in Leni it's survived since that point

00:01:35,520 --> 00:01:43,200
we are targeting the e ABI soft float

00:01:40,520 --> 00:01:46,920
for a minimum architecture version of

00:01:43,200 --> 00:01:53,810
what V fought on v40 are people aware of

00:01:46,920 --> 00:01:58,640
what v40 means is anybody not right okay

00:01:53,810 --> 00:02:01,860
um has a whole range of different

00:01:58,640 --> 00:02:04,229
architectures out there basically as as

00:02:01,860 --> 00:02:05,880
we move on similarly to the I guess the

00:02:04,229 --> 00:02:09,300
more well-known I three eight six or

00:02:05,880 --> 00:02:10,679
eight six and so on new in new

00:02:09,300 --> 00:02:12,870
instructions are added and old

00:02:10,679 --> 00:02:13,240
instructions are removed as you go later

00:02:12,870 --> 00:02:17,500
on

00:02:13,240 --> 00:02:19,990
for series version 4 is now really quite

00:02:17,500 --> 00:02:22,480
old and the T on the end means that as

00:02:19,990 --> 00:02:24,970
well as running the normal 32-bit arm

00:02:22,480 --> 00:02:29,670
instruction set it will also run the

00:02:24,970 --> 00:02:32,680
smaller size thumb instruction set so

00:02:29,670 --> 00:02:35,140
for what we have already in our we L you

00:02:32,680 --> 00:02:37,360
make you can use a mix of arm and thumb

00:02:35,140 --> 00:02:39,900
instructions to be honest most people

00:02:37,360 --> 00:02:42,220
just tend to use arm as far as I'm aware

00:02:39,900 --> 00:02:45,010
but there's always people who do

00:02:42,220 --> 00:02:47,890
different the reason that we're still

00:02:45,010 --> 00:02:51,550
targeting v40 with our miele is it's

00:02:47,890 --> 00:02:57,610
still needed for older hardware anybody

00:02:51,550 --> 00:02:59,380
here with an open moco I mean the really

00:02:57,610 --> 00:03:06,190
old hardware the old strong arms are

00:02:59,380 --> 00:03:08,140
will won't go with this anymore the open

00:03:06,190 --> 00:03:10,060
moco I believe is the only thing out

00:03:08,140 --> 00:03:14,140
there that people still care about that

00:03:10,060 --> 00:03:15,820
must have v4 it is an open question as

00:03:14,140 --> 00:03:20,950
to whether and as to how long we're

00:03:15,820 --> 00:03:22,930
going to support those 4 if anyone wants

00:03:20,950 --> 00:03:33,250
that wants to comment on that now is a

00:03:22,930 --> 00:03:36,130
good time cool ok we go 3-5 it's still

00:03:33,250 --> 00:03:39,580
supported op stream the tool chain still

00:03:36,130 --> 00:03:42,880
works the kernel still works

00:03:39,580 --> 00:03:45,820
most upstream software in as much as it

00:03:42,880 --> 00:03:48,040
ever cares will happily work on v40 we

00:03:45,820 --> 00:03:49,960
get the odd complaint from people who

00:03:48,040 --> 00:03:52,900
have to think harder about what they

00:03:49,960 --> 00:03:57,550
support say the JavaScript folks who

00:03:52,900 --> 00:04:00,340
were doing the Java engines in Chrome

00:03:57,550 --> 00:04:00,940
and Firefox typically complain all the

00:04:00,340 --> 00:04:03,010
bloody time

00:04:00,940 --> 00:04:08,290
oh my god why why are you only

00:04:03,010 --> 00:04:10,180
supporting such an old version but it's

00:04:08,290 --> 00:04:13,260
something that's that's open and I'd

00:04:10,180 --> 00:04:18,070
like to talk about that more later the

00:04:13,260 --> 00:04:22,840
what the more recent port on that point

00:04:18,070 --> 00:04:25,840
yes what he has yes weighted me that the

00:04:22,840 --> 00:04:27,010
t is so v5 is any faster so from

00:04:25,840 --> 00:04:29,380
Debbie's point of view we don't care

00:04:27,010 --> 00:04:30,580
unless is actually a lot support okay my

00:04:29,380 --> 00:04:31,840
understanding is that but it basically

00:04:30,580 --> 00:04:33,430
makes no difference

00:04:31,840 --> 00:04:35,260
so apart from software that simply

00:04:33,430 --> 00:04:39,310
doesn't build anymore and anything we

00:04:35,260 --> 00:04:41,320
can sure I know from tool chain people

00:04:39,310 --> 00:04:43,479
on how to keep on telling me otherwise

00:04:41,320 --> 00:04:45,760
but I've yet to see any benchmarks that

00:04:43,479 --> 00:04:47,830
say one way or the other you and I

00:04:45,760 --> 00:04:49,780
should go to go and be wretched off

00:04:47,830 --> 00:04:53,110
until he actually gives us some useful

00:04:49,780 --> 00:04:55,930
numbers I guess sorry wiki and I both

00:04:53,110 --> 00:04:59,020
work at arm and the till chain team are

00:04:55,930 --> 00:05:00,430
well sit roughly in between us it's easy

00:04:59,020 --> 00:05:08,260
for us to go and beat them up until they

00:05:00,430 --> 00:05:11,830
help arm HF is the newest building yeah

00:05:08,260 --> 00:05:14,350
the newest of the arm ports in Debian we

00:05:11,830 --> 00:05:17,919
started on this a couple of years ago

00:05:14,350 --> 00:05:20,470
all all of the heavy lifting for the

00:05:17,919 --> 00:05:23,860
boot strapping was done by Konstantinos

00:05:20,470 --> 00:05:26,530
margaritas who can't be here today he

00:05:23,860 --> 00:05:28,300
devoted a good year of his life to

00:05:26,530 --> 00:05:30,880
bootstrap compact to boot strapping arm

00:05:28,300 --> 00:05:34,570
hf because he thought it was the right

00:05:30,880 --> 00:05:37,210
thing to do the difference from army l2

00:05:34,570 --> 00:05:41,590
arm HF is but I'll make Jeff

00:05:37,210 --> 00:05:44,320
targets much much much newer hardware v7

00:05:41,590 --> 00:05:49,300
is the latest released version of the of

00:05:44,320 --> 00:05:52,479
the arm family and we expect to be using

00:05:49,300 --> 00:05:56,919
v7 using the hard float variant of the

00:05:52,479 --> 00:05:59,169
ABI and using a specific minimum variant

00:05:56,919 --> 00:06:05,800
of the vfp the vector floating-point

00:05:59,169 --> 00:06:10,930
unit that comes with v7 arm has a

00:06:05,800 --> 00:06:13,419
colorful history with floating-point the

00:06:10,930 --> 00:06:16,510
back in the day the very first arm port

00:06:13,419 --> 00:06:20,139
in Debian just called um used to require

00:06:16,510 --> 00:06:21,220
hardware floating-point the problem with

00:06:20,139 --> 00:06:24,789
that was that at that point

00:06:21,220 --> 00:06:27,820
approximately no arm Hardware ever had

00:06:24,789 --> 00:06:29,950
floating-point so at the moment you did

00:06:27,820 --> 00:06:32,289
any floating-point work the system would

00:06:29,950 --> 00:06:36,070
have to trap on an illegal instruction

00:06:32,289 --> 00:06:36,310
and unwind in kernel back to the point

00:06:36,070 --> 00:06:38,800
be

00:06:36,310 --> 00:06:41,020
for that instruction started emulate the

00:06:38,800 --> 00:06:43,930
instruction fix everything up again and

00:06:41,020 --> 00:06:46,890
returns userland so it worked

00:06:43,930 --> 00:06:49,510
bollocks but instead of a floating-point

00:06:46,890 --> 00:06:53,950
operation were taking two three four

00:06:49,510 --> 00:06:58,480
cycles it could take thousands so it

00:06:53,950 --> 00:07:00,880
worked it was crap we moved on the EA bi

00:06:58,480 --> 00:07:03,340
which was where we started with our miel

00:07:00,880 --> 00:07:05,320
the difference is it actually assumed

00:07:03,340 --> 00:07:08,050
that you did not have hardware

00:07:05,320 --> 00:07:10,690
floating-point so even on hardware that

00:07:08,050 --> 00:07:14,740
did you would always use library

00:07:10,690 --> 00:07:16,870
versions of floating-point ops you could

00:07:14,740 --> 00:07:19,960
if you have the right hardware use

00:07:16,870 --> 00:07:23,140
hardware floating-point and that started

00:07:19,960 --> 00:07:25,150
to become more and more common with v7

00:07:23,140 --> 00:07:26,950
definitely it is expected that

00:07:25,150 --> 00:07:29,350
everything will always have hardware

00:07:26,950 --> 00:07:31,480
floating-point so the reason that we've

00:07:29,350 --> 00:07:33,910
shifted ABI again is again for

00:07:31,480 --> 00:07:35,470
performance reasons initially the

00:07:33,910 --> 00:07:37,750
problem with assuming that you don't

00:07:35,470 --> 00:07:39,190
have hardware floating-point is when you

00:07:37,750 --> 00:07:41,560
want to do floating-point instructions

00:07:39,190 --> 00:07:43,270
you have to copy all of your

00:07:41,560 --> 00:07:45,880
floating-point arguments into the

00:07:43,270 --> 00:07:48,400
integer registers call your floating

00:07:45,880 --> 00:07:50,710
point function copy them out again do

00:07:48,400 --> 00:07:52,650
the work on them copy them back again in

00:07:50,710 --> 00:07:54,880
the and then in the calling function

00:07:52,650 --> 00:07:56,290
copy them back into the floating-point

00:07:54,880 --> 00:07:59,530
registers where they started in the

00:07:56,290 --> 00:08:01,360
first place so that's four copies for

00:07:59,530 --> 00:08:06,220
every single floating-point argument

00:08:01,360 --> 00:08:08,490
going through which is horrendous as we

00:08:06,220 --> 00:08:10,810
now actually expect to have always

00:08:08,490 --> 00:08:13,680
hardware floating-point we thought fine

00:08:10,810 --> 00:08:13,680
let's use it

00:08:14,610 --> 00:08:21,910
benchmarks on this very hugely in terms

00:08:17,860 --> 00:08:26,800
of showing what benefits you get the

00:08:21,910 --> 00:08:28,600
best type of contrived benchmark will

00:08:26,800 --> 00:08:31,660
show that you can get like a factor of

00:08:28,600 --> 00:08:34,060
two in performance improvement using my

00:08:31,660 --> 00:08:35,760
homage F that's places where you're

00:08:34,060 --> 00:08:39,640
doing lots and lots and lots of

00:08:35,760 --> 00:08:41,740
floating-point calculations but also way

00:08:39,640 --> 00:08:43,600
down a recursive a deep recursive stack

00:08:41,740 --> 00:08:45,730
so at that point you're spending more

00:08:43,600 --> 00:08:47,980
time just copying arguments in army elv

00:08:45,730 --> 00:08:50,080
and actually doing any real work in

00:08:47,980 --> 00:08:53,020
terms of weil software in terms of

00:08:50,080 --> 00:08:54,880
of some of the other benchmarks I'm a

00:08:53,020 --> 00:08:56,500
chef frankly is just the same as our

00:08:54,880 --> 00:08:58,840
miele course went to do ops it make it

00:08:56,500 --> 00:09:00,790
to no op for anything that is

00:08:58,840 --> 00:09:02,320
floating-point heavy you might see a

00:09:00,790 --> 00:09:04,330
five percent improvement you might see

00:09:02,320 --> 00:09:06,130
ten depending on exactly how heavy it is

00:09:04,330 --> 00:09:09,040
if you unlucky you don't see anything

00:09:06,130 --> 00:09:10,870
but equally you don't lose anything so

00:09:09,040 --> 00:09:13,600
the main reason that we've actually

00:09:10,870 --> 00:09:15,820
stuck with arm HF is it is the new

00:09:13,600 --> 00:09:18,580
agreed standard for arm Linux

00:09:15,820 --> 00:09:21,430
distributions so that means Debian is

00:09:18,580 --> 00:09:24,010
doing an arm HF in with this

00:09:21,430 --> 00:09:27,250
specification Ubuntu is doing an arm HF

00:09:24,010 --> 00:09:30,790
with a specification openSUSE is doing

00:09:27,250 --> 00:09:34,440
arm HF with this spec Fedora almost are

00:09:30,790 --> 00:09:34,440
I'll tell you more about that soon

00:09:36,840 --> 00:09:43,780
there's been some fun that we had

00:09:39,550 --> 00:09:46,660
defining a new linker path the one thing

00:09:43,780 --> 00:09:48,790
that must be different if you're going

00:09:46,660 --> 00:09:50,860
to have working multi arch between

00:09:48,790 --> 00:09:53,890
multiple different flavors multiple

00:09:50,860 --> 00:09:57,520
different CPUs is the location of the

00:09:53,890 --> 00:10:00,070
runtime linker LDI so if that clashes

00:09:57,520 --> 00:10:02,080
with two of your architectures you just

00:10:00,070 --> 00:10:04,030
lose you cannot work around this because

00:10:02,080 --> 00:10:06,070
obviously that is the path that's

00:10:04,030 --> 00:10:09,720
embedded in the header of all of your

00:10:06,070 --> 00:10:12,730
elf objects the colonel knows that it

00:10:09,720 --> 00:10:16,300
the kernel elf interpreter looks at that

00:10:12,730 --> 00:10:19,740
runs and runs that program to start your

00:10:16,300 --> 00:10:22,510
to start your program if there are

00:10:19,740 --> 00:10:25,270
several different architectures that

00:10:22,510 --> 00:10:26,950
that share the same linker path the

00:10:25,270 --> 00:10:29,530
kernel has no idea whether you want to

00:10:26,950 --> 00:10:33,040
run this as a spark binary or was a mips

00:10:29,530 --> 00:10:36,100
binary or whatever that's what this word

00:10:33,040 --> 00:10:38,530
fun comes in so we had to define a new

00:10:36,100 --> 00:10:40,740
linker paths for arm HF which is

00:10:38,530 --> 00:10:44,680
different to that for our Miele again

00:10:40,740 --> 00:10:47,560
that will cause some controversy in the

00:10:44,680 --> 00:10:50,620
the wider community we now have a

00:10:47,560 --> 00:10:52,540
solution I won't if anybody wants in

00:10:50,620 --> 00:10:56,140
other details ask me later I'm not going

00:10:52,540 --> 00:10:59,530
to go into all of it now I'm HF is well

00:10:56,140 --> 00:11:02,800
supported by most people now it's the

00:10:59,530 --> 00:11:03,610
default in a bun to forearm in debian

00:11:02,800 --> 00:11:05,740
we're working on it

00:11:03,610 --> 00:11:07,300
everybody else is in most cases of

00:11:05,740 --> 00:11:09,490
course the compiler does all the work

00:11:07,300 --> 00:11:11,320
you don't need to worry about it for

00:11:09,490 --> 00:11:13,420
places where you do need to worry again

00:11:11,320 --> 00:11:16,209
places like jets people are already

00:11:13,420 --> 00:11:17,620
doing the work here so it's fine there

00:11:16,209 --> 00:11:20,500
are bits and pieces that we'd like to

00:11:17,620 --> 00:11:23,950
finish mono at the moment does not do

00:11:20,500 --> 00:11:31,180
floating-point usefully inter in an arm

00:11:23,950 --> 00:11:34,240
context and yeah yeah mono is capable of

00:11:31,180 --> 00:11:36,430
doing floating-point but it's awkward

00:11:34,240 --> 00:11:39,970
there was still some work to be done if

00:11:36,430 --> 00:11:41,950
to have it Anna no Joe shields one of

00:11:39,970 --> 00:11:44,440
Debian's main mono guys has been

00:11:41,950 --> 00:11:47,250
pestering people me included for a long

00:11:44,440 --> 00:11:53,529
time to say please come and do the work

00:11:47,250 --> 00:11:57,040
Lib FFI has issues as well one of the

00:11:53,529 --> 00:11:59,130
issues with the arm HF ABI point

00:11:57,040 --> 00:12:01,630
actually pointed out a bug in Lib FFI

00:11:59,130 --> 00:12:05,050
Lib FFI for those people who don't know

00:12:01,630 --> 00:12:07,209
is a library that is used for talking

00:12:05,050 --> 00:12:11,079
between different languages and sharing

00:12:07,209 --> 00:12:12,959
data structures if you're going to do

00:12:11,079 --> 00:12:14,920
different data structures across

00:12:12,959 --> 00:12:16,329
languages if you're going to be passing

00:12:14,920 --> 00:12:19,149
around function definitions and

00:12:16,329 --> 00:12:21,630
everything it kind of helps if your ABI

00:12:19,149 --> 00:12:26,350
is supported um

00:12:21,630 --> 00:12:31,209
HF is the first one I believe were you

00:12:26,350 --> 00:12:34,089
were you pass you pass floating point

00:12:31,209 --> 00:12:35,980
read are gyun's in registers unless

00:12:34,089 --> 00:12:38,459
they're in very addict functions and

00:12:35,980 --> 00:12:42,070
then they go on the stack this causes

00:12:38,459 --> 00:12:44,949
live FF I to essentially explode but

00:12:42,070 --> 00:12:46,870
fingers crossed not almost no one has

00:12:44,949 --> 00:12:49,630
actually found a place where anyone does

00:12:46,870 --> 00:12:52,300
very addicts with floating point in Lib

00:12:49,630 --> 00:12:56,110
FFI we've looked at Python we've looked

00:12:52,300 --> 00:12:59,290
a Haskell I asked for help for on this 7

00:12:56,110 --> 00:13:01,300
or many weeks ago and we actually threw

00:12:59,290 --> 00:13:04,390
to find the places where Lib FFI might

00:13:01,300 --> 00:13:08,050
break things and it seems that those

00:13:04,390 --> 00:13:10,149
places that we did find nobody cares so

00:13:08,050 --> 00:13:14,500
be aware of this Lib FFI with very

00:13:10,149 --> 00:13:17,230
addicts is scary broken it's not on HF

00:13:14,500 --> 00:13:21,980
it's live FF I

00:13:17,230 --> 00:13:27,050
so this graph hasn't come out as well as

00:13:21,980 --> 00:13:33,530
I hoped if we go have a look at the last

00:13:27,050 --> 00:13:37,420
quarter in the Debian archive there are

00:13:33,530 --> 00:13:41,600
many many lines here the ones to look at

00:13:37,420 --> 00:13:45,320
mhf is the red dotted line that is

00:13:41,600 --> 00:13:47,090
typically up around 96% we had a little

00:13:45,320 --> 00:13:49,160
drop here when we had problems with

00:13:47,090 --> 00:13:53,450
build DS and it came back again very

00:13:49,160 --> 00:13:55,520
quickly army owl is basically keeping

00:13:53,450 --> 00:13:57,620
you off at about the same point this

00:13:55,520 --> 00:13:58,850
graph would be much easier to read and

00:13:57,620 --> 00:14:01,220
because it will be much more spread out

00:13:58,850 --> 00:14:02,900
if it wasn't for the herd crap at the

00:14:01,220 --> 00:14:05,780
bottom here were they're not keeping up

00:14:02,900 --> 00:14:07,550
at all in any way sorry I shouldn't be

00:14:05,780 --> 00:14:13,160
pejorative about hurt I just don't see

00:14:07,550 --> 00:14:15,500
the point the the next version is

00:14:13,160 --> 00:14:17,420
basically more detailed when I did these

00:14:15,500 --> 00:14:19,790
slides about ten days ago it was just

00:14:17,420 --> 00:14:22,280
showing for the last two weeks and you

00:14:19,790 --> 00:14:23,810
can see I'm HFR we are Miele despite the

00:14:22,280 --> 00:14:26,990
fact we have some of the slowest build

00:14:23,810 --> 00:14:30,080
machines these days are keeping well up

00:14:26,990 --> 00:14:32,420
with everything else the blue line in

00:14:30,080 --> 00:14:35,540
the turquoisey line in the middle there

00:14:32,420 --> 00:14:37,370
is ia-64 which is keeping up in terms of

00:14:35,540 --> 00:14:41,990
hardware but is struggling a bit more

00:14:37,370 --> 00:14:46,070
for other reasons so talking about build

00:14:41,990 --> 00:14:48,860
ease the big issue we have is we don't

00:14:46,070 --> 00:14:52,130
have our proper arm servers nobody

00:14:48,860 --> 00:14:54,050
really makes arm servers yet that we can

00:14:52,130 --> 00:14:56,750
actually just plug into a rack and leave

00:14:54,050 --> 00:14:58,570
to churn for a few years at a time we

00:14:56,750 --> 00:15:00,950
are not using development boards instead

00:14:58,570 --> 00:15:03,860
the ones we're using for our miao are

00:15:00,950 --> 00:15:08,060
mostly hosted arm and those are the

00:15:03,860 --> 00:15:09,890
Marvel 4 OC on CPU which is a V 5 that's

00:15:08,060 --> 00:15:12,350
fine running the v40 stuff they're

00:15:09,890 --> 00:15:14,660
reasonably expect they have a gig and a

00:15:12,350 --> 00:15:17,120
half of memory typically they work very

00:15:14,660 --> 00:15:21,620
well obviously we would always like

00:15:17,120 --> 00:15:25,580
faster form HF we have the freescale MX

00:15:21,620 --> 00:15:28,520
53 which is a v7 board that's a cortex

00:15:25,580 --> 00:15:29,870
a8 which means it's not the fastest

00:15:28,520 --> 00:15:31,760
build the build machine and

00:15:29,870 --> 00:15:34,160
at single-core it's got a gig of memory

00:15:31,760 --> 00:15:38,150
but it does have native starter as does

00:15:34,160 --> 00:15:41,630
the mahvel bort in terms of build deeper

00:15:38,150 --> 00:15:45,380
formance far one away the biggest issues

00:15:41,630 --> 00:15:48,140
are you want lots of CPU you want lots

00:15:45,380 --> 00:15:50,090
of i/o if depending on the build and you

00:15:48,140 --> 00:15:52,310
really really want huge amounts of sea

00:15:50,090 --> 00:15:55,640
of RAM if you're going to be building

00:15:52,310 --> 00:15:58,040
some of the bigger packages if you're

00:15:55,640 --> 00:16:01,610
trying to build something like iceweasel

00:15:58,040 --> 00:16:04,100
or OpenOffice I think WebKit has shown

00:16:01,610 --> 00:16:06,710
this in the past as well I'm linking in

00:16:04,100 --> 00:16:07,310
swap hurts don't ever do it if you can

00:16:06,710 --> 00:16:09,440
avoid it

00:16:07,310 --> 00:16:11,510
unfortunately on these machines we don't

00:16:09,440 --> 00:16:13,850
have enough RAM so we can't avoid it

00:16:11,510 --> 00:16:15,500
so it's painful to see that the build

00:16:13,850 --> 00:16:19,550
itself might take two hours and then

00:16:15,500 --> 00:16:22,670
take 12 to do the final link stage out

00:16:19,550 --> 00:16:25,970
it's not much we can do for newer

00:16:22,670 --> 00:16:28,100
hardware we're hoping for real service

00:16:25,970 --> 00:16:31,400
one of the nice things that's coming up

00:16:28,100 --> 00:16:36,590
in the arm world is bigger vendors doing

00:16:31,400 --> 00:16:39,410
proper service based on arm the Calzada

00:16:36,590 --> 00:16:42,110
folks are hopefully people might have

00:16:39,410 --> 00:16:46,820
heard of them or people who are doing a

00:16:42,110 --> 00:16:50,060
very very densely packed trustor in a

00:16:46,820 --> 00:16:54,260
box style arm server where you can have

00:16:50,060 --> 00:16:57,080
a little quad-core cortex a9 four gigs

00:16:54,260 --> 00:16:59,660
of ram many many gigabit or 10 gig

00:16:57,080 --> 00:17:01,520
Ethernet connections to it on something

00:16:59,660 --> 00:17:05,630
that's not much bigger than say a

00:17:01,520 --> 00:17:07,880
typical dim to go in a server box and so

00:17:05,630 --> 00:17:10,220
for 5 watts you end up with actually

00:17:07,880 --> 00:17:12,350
quite a capable machine if you put loads

00:17:10,220 --> 00:17:14,330
of those into a to you or 3 you whack

00:17:12,350 --> 00:17:16,670
mount box then that's it that's your

00:17:14,330 --> 00:17:20,660
build form it won't go and it's all neat

00:17:16,670 --> 00:17:24,250
and tidy and really nice I know there

00:17:20,660 --> 00:17:27,530
are that dowel are working on there's a

00:17:24,250 --> 00:17:30,740
recently announced copper server which

00:17:27,530 --> 00:17:34,700
is Dells variation on on that we that's

00:17:30,740 --> 00:17:37,190
using more of lv7 CPUs again it's all

00:17:34,700 --> 00:17:39,740
about getting higher density and better

00:17:37,190 --> 00:17:42,200
throughput so if you want to get many

00:17:39,740 --> 00:17:43,250
many servers you have a set of arm

00:17:42,200 --> 00:17:44,840
blades

00:17:43,250 --> 00:17:47,870
almost no power but doing everything you

00:17:44,840 --> 00:17:50,600
need fingers crossed I'm trying to get

00:17:47,870 --> 00:17:53,300
hold of both examples of both of these

00:17:50,600 --> 00:17:54,740
to see how well it works cause I'm sick

00:17:53,300 --> 00:17:56,210
and tired of going and rebooting dev

00:17:54,740 --> 00:17:59,720
boards because frankly they're not

00:17:56,210 --> 00:18:03,590
designed for 24/7 stress and proper

00:17:59,720 --> 00:18:06,560
servers would be lovely if any people

00:18:03,590 --> 00:18:11,930
here have contacts you know or friends

00:18:06,560 --> 00:18:14,840
in Dell HP Cal's later or anybody else

00:18:11,930 --> 00:18:21,890
who we know is doing arm servers and

00:18:14,840 --> 00:18:24,440
please help so quick summary of what's

00:18:21,890 --> 00:18:27,710
going on elsewhere in the arm arm Linux

00:18:24,440 --> 00:18:32,390
world does everybody here know what a

00:18:27,710 --> 00:18:35,740
Raspberry Pi is what does anybody want

00:18:32,390 --> 00:18:35,740
me to explain what a Raspberry Pi is

00:18:36,310 --> 00:18:41,300
okay Hector's got one here to show if

00:18:38,750 --> 00:18:44,690
you want to have a look it's a very very

00:18:41,300 --> 00:18:49,160
cheap little single board computer which

00:18:44,690 --> 00:18:51,260
runs Linux not huge spec but for the

00:18:49,160 --> 00:18:54,980
price it's it's very very difficult to

00:18:51,260 --> 00:18:56,270
beat the big issue that we have which

00:18:54,980 --> 00:19:00,520
was in Debian and in all the other

00:18:56,270 --> 00:19:03,200
distros is that the CPU that Broadcom

00:19:00,520 --> 00:19:05,750
used to go on the Raspberry Pi or gave

00:19:03,200 --> 00:19:11,510
to go on the Raspberry Pi doesn't do on

00:19:05,750 --> 00:19:13,790
v7 it is on v6 if only they're gone for

00:19:11,510 --> 00:19:16,180
v7 life will be so much easier so much

00:19:13,790 --> 00:19:21,790
better because we'd be able to use our

00:19:16,180 --> 00:19:25,310
best highest performance software on it

00:19:21,790 --> 00:19:29,360
the fact that as v6 means we can't so

00:19:25,310 --> 00:19:31,970
raspbian is an attempt by there's a

00:19:29,360 --> 00:19:36,920
couple of Debian guys actually doing an

00:19:31,970 --> 00:19:39,680
unofficial port using the v6 ABI and the

00:19:36,920 --> 00:19:41,810
hard float version which is forwards

00:19:39,680 --> 00:19:43,790
compatible with what we're doing with

00:19:41,810 --> 00:19:47,530
our HF so you can happily run any of

00:19:43,790 --> 00:19:51,470
their binaries on a v7 board no problem

00:19:47,530 --> 00:19:53,090
it's awesome community work we're not

00:19:51,470 --> 00:19:55,100
going to make it enough to make it an

00:19:53,090 --> 00:19:56,330
official Debian port if I even suggested

00:19:55,100 --> 00:19:57,980
that we were

00:19:56,330 --> 00:20:01,669
the FTP masters will probably come and

00:19:57,980 --> 00:20:02,779
murder me it's a crying shame

00:20:01,669 --> 00:20:05,330
there's a lot going to be lots of these

00:20:02,779 --> 00:20:07,549
machines out there but it's just too

00:20:05,330 --> 00:20:10,970
targeted it's too focused on one

00:20:07,549 --> 00:20:12,950
particular computer which to be honest

00:20:10,970 --> 00:20:15,559
in maybe two years time will be replaced

00:20:12,950 --> 00:20:17,630
by v7 stuff anyway it's not worth what

00:20:15,559 --> 00:20:19,340
I'm doing it

00:20:17,630 --> 00:20:21,110
having said that of course we're going

00:20:19,340 --> 00:20:23,000
to give help and advice of these guys as

00:20:21,110 --> 00:20:25,149
much as they need because they've done

00:20:23,000 --> 00:20:29,330
some very good work

00:20:25,149 --> 00:20:29,840
Ubuntu have an army held port that used

00:20:29,330 --> 00:20:34,340
to be

00:20:29,840 --> 00:20:36,950
v7 soft float because that was what what

00:20:34,340 --> 00:20:40,519
they were targeting for a number of

00:20:36,950 --> 00:20:42,440
reasons and I don't pretend to know them

00:20:40,519 --> 00:20:45,980
all

00:20:42,440 --> 00:20:49,820
since we've now done on HF in Debian and

00:20:45,980 --> 00:20:53,419
Ubuntu frankly keeping a v7 soft float

00:20:49,820 --> 00:20:56,029
is utterly pointless so Ubuntu have

00:20:53,419 --> 00:20:59,769
quietly until I started talking about it

00:20:56,029 --> 00:21:04,309
loudly today started doing a soft float

00:20:59,769 --> 00:21:08,059
we built and so a V 5 we built of our

00:21:04,309 --> 00:21:10,639
miele given time and uploads eventually

00:21:08,059 --> 00:21:12,110
it will all fall back which then means

00:21:10,639 --> 00:21:14,570
of course a bungee then how software

00:21:12,110 --> 00:21:18,620
that works on the PI just like we do

00:21:14,570 --> 00:21:21,679
I'll make Jeff in a bun - was the first

00:21:18,620 --> 00:21:26,389
arm long-term stable release which just

00:21:21,679 --> 00:21:29,299
happened in April so there's been quite

00:21:26,389 --> 00:21:31,490
a lot of publicity about the fact that a

00:21:29,299 --> 00:21:37,659
bun - are now supporting arm for the

00:21:31,490 --> 00:21:40,820
long term which is really good openSUSE

00:21:37,659 --> 00:21:43,120
had never really got involved with arm

00:21:40,820 --> 00:21:47,690
until quite recently that been some very

00:21:43,120 --> 00:21:50,750
small amounts of unofficial work but as

00:21:47,690 --> 00:21:53,500
we started talking about v7 hard float I

00:21:50,750 --> 00:21:57,289
think it peaked some interest and

00:21:53,500 --> 00:22:01,340
they've started alongside - they are

00:21:57,289 --> 00:22:02,269
working very much on v7 as though if

00:22:01,340 --> 00:22:05,389
they're going to have it as a point we

00:22:02,269 --> 00:22:08,960
architecture soon they also have a lower

00:22:05,389 --> 00:22:10,429
priority v5 port which again is for all

00:22:08,960 --> 00:22:13,429
of those

00:22:10,429 --> 00:22:16,340
Old Goa plugs dream plugs whatever that

00:22:13,429 --> 00:22:18,110
still need v5 but there is not

00:22:16,340 --> 00:22:21,080
necessarily going to be any major

00:22:18,110 --> 00:22:22,809
official work for it if people are

00:22:21,080 --> 00:22:25,910
interested they can help out I'm told

00:22:22,809 --> 00:22:29,780
what a Sousa are hoping for is an

00:22:25,910 --> 00:22:31,730
official 12.2 on release in fact that

00:22:29,780 --> 00:22:34,790
there's a guy from openSUSE just started

00:22:31,730 --> 00:22:37,550
working in arm who's who in fact helped

00:22:34,790 --> 00:22:39,110
to helped tell me about all this he

00:22:37,550 --> 00:22:43,010
wanted to give me several slides worth

00:22:39,110 --> 00:22:46,040
but I wasn't that interested finally

00:22:43,010 --> 00:22:47,570
Fedora again they're focusing on a v7

00:22:46,040 --> 00:22:50,059
harmful oak port they have just released

00:22:47,570 --> 00:22:52,610
for door 17 again they're doing a

00:22:50,059 --> 00:22:54,290
low-priority v5 port which is best

00:22:52,610 --> 00:22:57,650
effort and frankly they're probably not

00:22:54,290 --> 00:22:59,780
going to keep around for very long going

00:22:57,650 --> 00:23:02,179
back to the what I mentioned earlier

00:22:59,780 --> 00:23:06,860
about the linker path this is where we

00:23:02,179 --> 00:23:09,230
have problems we had we've had some

00:23:06,860 --> 00:23:11,660
major discussions between the distro

00:23:09,230 --> 00:23:14,720
folks in the armed community multiple

00:23:11,660 --> 00:23:17,059
times over the last couple years we

00:23:14,720 --> 00:23:21,910
thought we had agreement over what the

00:23:17,059 --> 00:23:24,080
description of v7 hard float was and

00:23:21,910 --> 00:23:25,120
then apparently other people thought

00:23:24,080 --> 00:23:29,630
otherwise

00:23:25,120 --> 00:23:33,130
we had agreed in theory a standard

00:23:29,630 --> 00:23:36,559
triplet to describe v7 hard float

00:23:33,130 --> 00:23:37,880
because it's important that we have a

00:23:36,559 --> 00:23:39,860
standard triplet if are going to be

00:23:37,880 --> 00:23:42,710
sending patches upstream to four very

00:23:39,860 --> 00:23:44,570
software packages again people disagreed

00:23:42,710 --> 00:23:45,770
with that fine we can live with it

00:23:44,570 --> 00:23:48,710
they're just going to have to deal with

00:23:45,770 --> 00:23:51,040
their own patches the biggest problem as

00:23:48,710 --> 00:23:54,470
I mentioned earlier was the linker path

00:23:51,040 --> 00:23:56,300
we had defined in an agreement in an

00:23:54,470 --> 00:23:59,750
agreed phone call between all of the

00:23:56,300 --> 00:24:02,360
distros and the upstream on people

00:23:59,750 --> 00:24:04,760
upstream G Lib C people upstream GCC

00:24:02,360 --> 00:24:06,470
folks and we we'd all got together on a

00:24:04,760 --> 00:24:09,980
conference call arranged a fairly short

00:24:06,470 --> 00:24:13,160
notice to say we must have a single

00:24:09,980 --> 00:24:17,000
standard linker path and everyone said

00:24:13,160 --> 00:24:20,200
yes and then Fedora didn't actually

00:24:17,000 --> 00:24:20,200
implement what we agreed

00:24:22,190 --> 00:24:27,420
I'm still quite better about this you

00:24:25,380 --> 00:24:31,350
may pick up on this what I will say is

00:24:27,420 --> 00:24:34,280
basically Fedora 17 claims to have arm

00:24:31,350 --> 00:24:37,290
please for the love of God don't use it

00:24:34,280 --> 00:24:38,910
if you do use it I mean to be honest I'm

00:24:37,290 --> 00:24:40,500
talking to the wrong crowd anyway for

00:24:38,910 --> 00:24:42,870
people who are likely to use it let's be

00:24:40,500 --> 00:24:45,060
honest if you are tempted to use it be

00:24:42,870 --> 00:24:48,000
very very careful anything you build ver

00:24:45,060 --> 00:24:50,010
will break as soon as you win as soon as

00:24:48,000 --> 00:24:52,230
you try and run it on any other distro

00:24:50,010 --> 00:24:54,060
all of the other distros worked on this

00:24:52,230 --> 00:24:56,580
and got everything white so you can so

00:24:54,060 --> 00:24:58,500
we have compatible binaries across all

00:24:56,580 --> 00:25:00,810
the distros this is useful in the point

00:24:58,500 --> 00:25:02,250
where we're expecting to work that we're

00:25:00,810 --> 00:25:03,810
going to get proprietary software it's

00:25:02,250 --> 00:25:07,250
we're going to want to all be able to

00:25:03,810 --> 00:25:09,660
run it for don't do fedora

00:25:07,250 --> 00:25:15,000
so even further

00:25:09,660 --> 00:25:16,890
medea have done some arm work it's not

00:25:15,000 --> 00:25:19,800
quite clear exactly were though up to at

00:25:16,890 --> 00:25:21,750
the moment there was some discussion

00:25:19,800 --> 00:25:24,540
they weren't very keen on the v7 hobs

00:25:21,750 --> 00:25:26,640
like we're talking about v5 but we're

00:25:24,540 --> 00:25:29,610
doing some some things that we didn't

00:25:26,640 --> 00:25:31,920
agree with gen 2 of course have done arm

00:25:29,610 --> 00:25:33,960
stuff for ages but it doesn't really

00:25:31,920 --> 00:25:37,380
matter too much they've gone for a hard

00:25:33,960 --> 00:25:37,920
float linker path like like everybody

00:25:37,380 --> 00:25:39,420
else

00:25:37,920 --> 00:25:40,590
but it actually doesn't really matter

00:25:39,420 --> 00:25:42,630
you don't expect to be able to run

00:25:40,590 --> 00:25:45,450
pre-built binaries on Gen 2 if you are

00:25:42,630 --> 00:25:47,820
why are you using Gen 2 the Chrome OS

00:25:45,450 --> 00:25:50,370
folks have literally in the last few

00:25:47,820 --> 00:25:53,010
weeks switched over to using hard float

00:25:50,370 --> 00:25:54,390
by default again they were convinced by

00:25:53,010 --> 00:25:57,800
the fact everybody else has gone this

00:25:54,390 --> 00:25:57,800
way it's silly not to

00:25:57,950 --> 00:26:03,780
and finally Android probably at the

00:26:01,830 --> 00:26:08,850
moment one of them may be the most

00:26:03,780 --> 00:26:11,550
common single OS running on arm again

00:26:08,850 --> 00:26:14,070
the Android people are mostly doing hard

00:26:11,550 --> 00:26:15,480
floats at this point and whatever extra

00:26:14,070 --> 00:26:20,580
performance they can get out on anything

00:26:15,480 --> 00:26:22,610
they do they'll take for free so new

00:26:20,580 --> 00:26:27,320
stuff

00:26:22,610 --> 00:26:37,130
they're very so paranoid Mike hang on

00:26:27,320 --> 00:26:40,150
hang on RedHat are going to end up doing

00:26:37,130 --> 00:26:43,580
more than likely doing an arm release

00:26:40,150 --> 00:26:46,550
part of the point of fedor getting

00:26:43,580 --> 00:26:54,230
involved in arm is red hat or interested

00:26:46,550 --> 00:26:56,090
i am i have spoken to multiple red hat

00:26:54,230 --> 00:26:58,070
people who are convinced that red hat

00:26:56,090 --> 00:27:01,960
will do an arm release maybe with the

00:26:58,070 --> 00:27:04,910
next next release of well maybe not

00:27:01,960 --> 00:27:07,040
fedora are currently going through some

00:27:04,910 --> 00:27:09,320
very difficult discussions to work out

00:27:07,040 --> 00:27:12,260
whether or not arm should be considered

00:27:09,320 --> 00:27:16,310
a primary architecture in fedora until

00:27:12,260 --> 00:27:19,340
that has happened i can i can't see red

00:27:16,310 --> 00:27:20,810
hat ever releasing one arm you know if

00:27:19,340 --> 00:27:23,030
they're not going to be supported fully

00:27:20,810 --> 00:27:28,790
in fedora it's clearly not going to

00:27:23,030 --> 00:27:32,270
happen in red hat so the latest versions

00:27:28,790 --> 00:27:35,030
of hardware that is available but real

00:27:32,270 --> 00:27:36,680
soon now in fact I think available to

00:27:35,030 --> 00:27:40,820
buy right now at least in dev board

00:27:36,680 --> 00:27:42,380
forum is we have the cortex a15 is the

00:27:40,820 --> 00:27:45,590
far and away the biggest most powerful

00:27:42,380 --> 00:27:46,790
version of on three seven that is

00:27:45,590 --> 00:27:50,210
bringing with it some extra

00:27:46,790 --> 00:27:51,890
virtualization features again this is

00:27:50,210 --> 00:27:55,100
considered useful for people wanting to

00:27:51,890 --> 00:27:57,920
do arm servers even more importantly

00:27:55,100 --> 00:28:01,460
possible or probably is it's also going

00:27:57,920 --> 00:28:03,830
to do LPA e it is still fundamentally

00:28:01,460 --> 00:28:08,090
going to be a 32-bit architecture but

00:28:03,830 --> 00:28:10,240
they will have support for the large

00:28:08,090 --> 00:28:15,680
physical address extensions very similar

00:28:10,240 --> 00:28:18,500
to what Intel did ages back on a 386 so

00:28:15,680 --> 00:28:20,810
you will be able to have an arm box with

00:28:18,500 --> 00:28:22,250
32 gigs of ram in but obviously you're

00:28:20,810 --> 00:28:25,330
still going to be limited in any single

00:28:22,250 --> 00:28:29,330
process to your normal three gig 4 gig

00:28:25,330 --> 00:28:31,600
memory the other thing that is being

00:28:29,330 --> 00:28:34,130
pushed for in the arm world right now is

00:28:31,600 --> 00:28:35,310
standard boot up architecture at the

00:28:34,130 --> 00:28:37,530
moment we have

00:28:35,310 --> 00:28:39,630
I wouldn't even know what to hazard a

00:28:37,530 --> 00:28:42,540
guess exactly how many there are dozens

00:28:39,630 --> 00:28:44,280
of different boot loaders from there

00:28:42,540 --> 00:28:47,010
were as many different boot

00:28:44,280 --> 00:28:48,930
configurations and setups as there are

00:28:47,010 --> 00:28:54,000
well vendors and there were hundreds of

00:28:48,930 --> 00:28:56,850
those if we want on us if we I mean if

00:28:54,000 --> 00:28:58,710
um in general is going to succeed as an

00:28:56,850 --> 00:29:01,440
architecture for servers and more

00:28:58,710 --> 00:29:03,330
general-purpose computers and you boot

00:29:01,440 --> 00:29:07,230
and all the others just aren't going to

00:29:03,330 --> 00:29:09,780
cut it you Fi and device tree and maybe

00:29:07,230 --> 00:29:11,940
even a CPI are all coming to the arm

00:29:09,780 --> 00:29:13,860
world which so you can actually get to

00:29:11,940 --> 00:29:15,900
the point where you will have a standard

00:29:13,860 --> 00:29:18,360
kernel that should boot everywhere and

00:29:15,900 --> 00:29:22,050
do the right thing it's been a long time

00:29:18,360 --> 00:29:26,730
coming we're not there yet we will get

00:29:22,050 --> 00:29:28,530
there I hope I trust so we even have

00:29:26,730 --> 00:29:32,090
even more than you bigger faster newer

00:29:28,530 --> 00:29:34,350
stuff coming on v8 has been announced

00:29:32,090 --> 00:29:35,820
you might you might have noticed on the

00:29:34,350 --> 00:29:39,200
schedule I have another talk straight

00:29:35,820 --> 00:29:43,290
after this one guess what that is

00:29:39,200 --> 00:29:45,060
please stay if you're interested so what

00:29:43,290 --> 00:29:48,690
else we are always looking for more

00:29:45,060 --> 00:29:50,910
porters always the Debian on port on

00:29:48,690 --> 00:29:52,830
team is actually probably the biggest

00:29:50,910 --> 00:29:54,420
port steam in Debian at this point I'm

00:29:52,830 --> 00:29:58,050
not aware of any others that have more

00:29:54,420 --> 00:29:59,700
we have lots of interested folks I saw I

00:29:58,050 --> 00:30:02,970
can see at least half a dozen folks here

00:29:59,700 --> 00:30:04,740
who are who are intimately involved we

00:30:02,970 --> 00:30:06,900
hang out in hash Debian arm we're on the

00:30:04,740 --> 00:30:11,490
Debian arm list you can talk to us we're

00:30:06,900 --> 00:30:14,340
friendly we don't write so thanks

00:30:11,490 --> 00:30:16,050
obviously to arm we know arm is

00:30:14,340 --> 00:30:18,390
currently employing several Debian

00:30:16,050 --> 00:30:21,120
developers to do free software this is

00:30:18,390 --> 00:30:23,400
really really nice it would be even

00:30:21,120 --> 00:30:29,850
nicer if legal were happy for us to

00:30:23,400 --> 00:30:32,070
share patches more readily Lenovo is a

00:30:29,850 --> 00:30:34,680
non-profit consortium of arm and a

00:30:32,070 --> 00:30:37,080
number of its partners explicitly

00:30:34,680 --> 00:30:39,750
working on free small free software but

00:30:37,080 --> 00:30:42,090
there's the kernel the GCC and a whole

00:30:39,750 --> 00:30:44,760
bunch of other stuff I'm working for arm

00:30:42,090 --> 00:30:46,620
BOTS seconded into Lenovo which means I

00:30:44,760 --> 00:30:48,960
get to do a lot to free software stuff

00:30:46,620 --> 00:30:50,790
on work time and that's really cool

00:30:48,960 --> 00:30:53,040
and obviously thanks to everyone who's

00:30:50,790 --> 00:30:54,600
worked on their stuff it's there's loads

00:30:53,040 --> 00:31:02,370
of people out there thank you everyone

00:30:54,600 --> 00:31:04,020
so bloody hell why I've been spouting at

00:31:02,370 --> 00:31:06,750
you guys for most 1/2 an hour which is

00:31:04,020 --> 00:31:08,820
really not what I planned talk at me

00:31:06,750 --> 00:31:11,790
tell me what have I done wrong what what

00:31:08,820 --> 00:31:13,440
should we be doing next is there

00:31:11,790 --> 00:31:17,580
anything anything people would like me

00:31:13,440 --> 00:31:27,900
to answer questions about is anyone

00:31:17,580 --> 00:31:31,890
alive can you say anything about

00:31:27,900 --> 00:31:39,270
graphics acceleration yes it's lovely

00:31:31,890 --> 00:31:44,130
when it works in the arm world graphics

00:31:39,270 --> 00:31:49,320
acceleration is touchy subject as you

00:31:44,130 --> 00:31:52,680
well know although we're starting to see

00:31:49,320 --> 00:31:55,200
things improving very them happening

00:31:52,680 --> 00:31:57,210
much more so in the x86 world where

00:31:55,200 --> 00:31:59,220
there are a smallish number of vendors

00:31:57,210 --> 00:32:02,430
and most of them are starting to open up

00:31:59,220 --> 00:32:04,110
you know AMD are giving specs out for

00:32:02,430 --> 00:32:06,390
what used to be ATI cards they're

00:32:04,110 --> 00:32:07,980
working with things Intel typically are

00:32:06,390 --> 00:32:10,080
giving out in aspects and or even

00:32:07,980 --> 00:32:12,630
employing free software people to work

00:32:10,080 --> 00:32:16,200
on their car their drivers and video

00:32:12,630 --> 00:32:18,570
aren't in fact Nvidia have a whole bunch

00:32:16,200 --> 00:32:21,420
of good free software developers working

00:32:18,570 --> 00:32:24,480
for them doing Linux kernel patches and

00:32:21,420 --> 00:32:26,100
stuff bought Nvidia see their their

00:32:24,480 --> 00:32:29,640
graphics hardware and they're you know

00:32:26,100 --> 00:32:32,010
as their crown jewels we may be waiting

00:32:29,640 --> 00:32:36,510
a long time for them to ever open up in

00:32:32,010 --> 00:32:39,090
the arm world things are less good and I

00:32:36,510 --> 00:32:43,610
wish I could I knew a good reason why

00:32:39,090 --> 00:32:46,200
again most of the players they see their

00:32:43,610 --> 00:32:47,600
special sauce as so special that they

00:32:46,200 --> 00:32:53,640
can't share it with anyone

00:32:47,600 --> 00:32:56,880
um itself has the molle graphics

00:32:53,640 --> 00:32:58,410
hardware were number a number of us

00:32:56,880 --> 00:33:00,510
inside arm have been pestering to say

00:32:58,410 --> 00:33:02,070
look why can't we just open this up it's

00:33:00,510 --> 00:33:05,830
not happened yet

00:33:02,070 --> 00:33:09,670
the stuff in Qualcomm the stuff in

00:33:05,830 --> 00:33:11,200
Broadcom IMG obviously are what one of

00:33:09,670 --> 00:33:13,510
them at one of the most common with the

00:33:11,200 --> 00:33:17,110
power VR and the SGX stuff that's out

00:33:13,510 --> 00:33:19,000
there already we're working on it there

00:33:17,110 --> 00:33:20,860
are people reverse engineering these

00:33:19,000 --> 00:33:22,810
things but you're gonna need binary

00:33:20,860 --> 00:33:24,430
blobs essentially forever and I wish it

00:33:22,810 --> 00:33:27,880
was I wish it was otherwise it's all

00:33:24,430 --> 00:33:30,010
patent incumbents and they're all scared

00:33:27,880 --> 00:33:32,470
of each other in fact not so much scared

00:33:30,010 --> 00:33:34,750
of each other as scared of the trolls

00:33:32,470 --> 00:33:37,150
who the moment that they see any source

00:33:34,750 --> 00:33:38,500
code for anything will make it'll make

00:33:37,150 --> 00:33:41,950
it that much easier for them to tie

00:33:38,500 --> 00:33:45,460
people up in court lawyers I wish we

00:33:41,950 --> 00:34:00,460
didn't know it didn't need them okay I

00:33:45,460 --> 00:34:05,940
have it and if you know someone it's

00:34:00,460 --> 00:34:11,010
playing contact so which laptop exactly

00:34:05,940 --> 00:34:15,580
you Kaffee pickle is you Kaffee I

00:34:11,010 --> 00:34:26,200
honestly don't know I've never heard is

00:34:15,580 --> 00:34:27,940
it in a faker so I had is it genetic no

00:34:26,200 --> 00:34:31,450
it's some other strange boxes cafe on

00:34:27,940 --> 00:34:34,270
the back cafe okay somebody type it into

00:34:31,450 --> 00:34:36,370
Google yeah that's the best thing put

00:34:34,270 --> 00:34:37,750
details them to Google I mean again the

00:34:36,370 --> 00:34:39,700
problem is with lots of these things

00:34:37,750 --> 00:34:41,680
there is such a long history of so many

00:34:39,700 --> 00:34:43,990
varied bits of arm hardware out there

00:34:41,680 --> 00:34:46,300
but absolutely the core stuff on the

00:34:43,990 --> 00:34:48,370
machine will just work but you need to

00:34:46,300 --> 00:34:51,340
be able to get to that core to that core

00:34:48,370 --> 00:34:53,110
hardware actually finding out how to put

00:34:51,340 --> 00:34:56,230
Linux on something and put Debian on it

00:34:53,110 --> 00:34:59,250
shouldn't be should not be hard but it's

00:34:56,230 --> 00:34:59,250
often harder than it should be

00:35:05,849 --> 00:35:11,550
it's just put them take the microphone

00:35:09,130 --> 00:35:11,550
back with you

00:35:17,180 --> 00:35:22,290
so I have good luck because the this

00:35:19,890 --> 00:35:26,730
device have a hardware switch so it's

00:35:22,290 --> 00:35:29,300
dual-boot April so you can you can

00:35:26,730 --> 00:35:35,310
choose it's booting from the from the

00:35:29,300 --> 00:35:41,850
built-in flash or from the SD card okay

00:35:35,310 --> 00:35:44,310
so yeah well but not the purple so is

00:35:41,850 --> 00:35:46,980
still Wi-Fi not working and some stuff

00:35:44,310 --> 00:35:52,110
but I would like to get contact with

00:35:46,980 --> 00:35:53,220
someone playing with this okay talk to

00:35:52,110 --> 00:35:55,620
me and some of the other arm guys

00:35:53,220 --> 00:35:57,330
afterwards definitely come onto the IRC

00:35:55,620 --> 00:36:00,480
Channel and talk about it I mean

00:35:57,330 --> 00:36:02,040
whatever information we can find yeah

00:36:00,480 --> 00:36:03,260
it's great to get to get these things

00:36:02,040 --> 00:36:07,670
working

00:36:03,260 --> 00:36:07,670
but yeah Hector seems interested

00:36:09,260 --> 00:36:17,190
discipline Konstantinos on IRC see their

00:36:13,050 --> 00:36:20,040
policy cafe has an IM x5 it should be

00:36:17,190 --> 00:36:23,790
similar to the Ganassi one to the Africa

00:36:20,040 --> 00:36:26,880
okay just supported in Debian so it

00:36:23,790 --> 00:36:32,220
should work it's similar to the a figure

00:36:26,880 --> 00:36:40,050
to the Ithaca okay cool and again in the

00:36:32,220 --> 00:36:42,540
middle so we've had three of shell ports

00:36:40,050 --> 00:36:47,720
now and yeah one on official or movie

00:36:42,540 --> 00:36:47,720
and you're planning another port yes

00:36:48,740 --> 00:36:58,050
this will keep going forever replacing

00:36:53,310 --> 00:37:00,240
ports with newer and I'm hoping not we

00:36:58,050 --> 00:37:01,680
have good justifications for the ones we

00:37:00,240 --> 00:37:03,210
have already I said we're already

00:37:01,680 --> 00:37:07,910
limiting we're not gonna we're not gonna

00:37:03,210 --> 00:37:10,380
take on the arms on v6 hard float it's

00:37:07,910 --> 00:37:12,900
common across all the distros now that

00:37:10,380 --> 00:37:15,600
they're doing the v5 port soft float the

00:37:12,900 --> 00:37:18,650
v7 port hard float basically so they

00:37:15,600 --> 00:37:21,720
cover the two dominant groups of users

00:37:18,650 --> 00:37:24,030
v5 we're still gonna want for all those

00:37:21,720 --> 00:37:26,130
people who are running the freedom boxes

00:37:24,030 --> 00:37:28,290
the shiva plug the guru plugged the

00:37:26,130 --> 00:37:29,430
dream plug you know on all a lot of the

00:37:28,290 --> 00:37:31,950
older

00:37:29,430 --> 00:37:33,600
the other old machines with that we

00:37:31,950 --> 00:37:35,160
they're going to want support on v5 for

00:37:33,600 --> 00:37:37,470
a very long time we can't we're not

00:37:35,160 --> 00:37:40,470
going to do anything about that the v7

00:37:37,470 --> 00:37:41,700
hard float is very very much what's

00:37:40,470 --> 00:37:44,900
needed if we want to get good

00:37:41,700 --> 00:37:51,950
performance out of current and

00:37:44,900 --> 00:37:54,690
forthcoming arm hardware in 32-bit the

00:37:51,950 --> 00:37:58,890
64-bit arm port that we're going to be

00:37:54,690 --> 00:38:00,450
wanting to do for on v8 hopefully will

00:37:58,890 --> 00:38:01,530
stay around for quite a long time and

00:38:00,450 --> 00:38:02,960
we're not going to need it need a

00:38:01,530 --> 00:38:05,490
replacement for that

00:38:02,960 --> 00:38:07,830
touchwood I don't know for definite but

00:38:05,490 --> 00:38:09,180
we're not planning one so yes we could

00:38:07,830 --> 00:38:11,880
be ingredient we're going to want three

00:38:09,180 --> 00:38:14,490
ports in the archive will support them

00:38:11,880 --> 00:38:16,740
well it's fine so the point is that arm

00:38:14,490 --> 00:38:18,960
spent 20 years being an embedded

00:38:16,740 --> 00:38:20,100
provider where the idea was you sent

00:38:18,960 --> 00:38:22,140
some hardware and you built all your

00:38:20,100 --> 00:38:24,240
software for it and they only just

00:38:22,140 --> 00:38:25,800
slowly getting out of that mindset into

00:38:24,240 --> 00:38:28,500
a world where it's like real computers

00:38:25,800 --> 00:38:29,580
and the software comes from big archives

00:38:28,500 --> 00:38:31,890
out in the internet and needs to be

00:38:29,580 --> 00:38:33,780
compatible between different machines so

00:38:31,890 --> 00:38:35,760
it's taken a long time to get to a world

00:38:33,780 --> 00:38:39,390
where they kind of realize they need to

00:38:35,760 --> 00:38:41,040
make stuff that expects to get standard

00:38:39,390 --> 00:38:42,390
software in standard formats with

00:38:41,040 --> 00:38:43,920
standard api's that aren't going to

00:38:42,390 --> 00:38:45,690
change every three years yeah and I

00:38:43,920 --> 00:38:49,170
think we are now at that point so yeah

00:38:45,690 --> 00:38:51,540
it shouldn't change again every three

00:38:49,170 --> 00:38:53,340
years we should get at least a decade

00:38:51,540 --> 00:39:00,510
before we have to change it again I hope

00:38:53,340 --> 00:39:04,590
yeah what anything else

00:39:00,510 --> 00:39:05,010
I guess not well thank you all for

00:39:04,590 --> 00:39:06,960
coming

00:39:05,010 --> 00:39:10,170
I said if you're more interested more in

00:39:06,960 --> 00:39:11,940
on v8 the the new future 64-bit world

00:39:10,170 --> 00:39:13,540
I'll see you again in about 20 minutes

00:39:11,940 --> 00:39:17,780
thank you

00:39:13,540 --> 00:39:17,780

YouTube URL: https://www.youtube.com/watch?v=xdx5_XcfIVo


