Title: EFI in Debian
Publication date: 2017-11-28
Playlist: DebConf 12
Description: 
	by Steve McIntyre

At: DebConf12
https://debconf12.debconf.org/
Room: Aula Magna
Scheduled start: 2012-07-09 15:00:00
Captions: 
	00:00:00,060 --> 00:00:09,719
hi folks I see we have some people who

00:00:04,710 --> 00:00:11,190
here knows about EFI whoo good I'm

00:00:09,719 --> 00:00:14,580
hoping people out here know more about

00:00:11,190 --> 00:00:19,890
it than I do this is not a lecture

00:00:14,580 --> 00:00:22,350
it's a Boff I want discussion the reason

00:00:19,890 --> 00:00:26,070
that I've called I've set the session up

00:00:22,350 --> 00:00:28,289
is that I can see we really need to

00:00:26,070 --> 00:00:30,510
think about EFI and what Debian's going

00:00:28,289 --> 00:00:32,369
to do about it I'm going to end up

00:00:30,510 --> 00:00:33,809
probably implementing a good chunk of it

00:00:32,369 --> 00:00:35,610
so I don't want to be taking the blame

00:00:33,809 --> 00:00:39,120
for decisions that you lock don't agree

00:00:35,610 --> 00:00:48,360
with so if if you're all if you're here

00:00:39,120 --> 00:00:56,670
it's your fault okay so again I'll ask

00:00:48,360 --> 00:00:59,820
who knows anything about EFI so there's

00:00:56,670 --> 00:01:03,390
two parts to it we need to actually deal

00:00:59,820 --> 00:01:07,170
with installing and booting on EFI

00:01:03,390 --> 00:01:09,299
itself that is not actually that hard we

00:01:07,170 --> 00:01:11,640
already have this load of how to's and

00:01:09,299 --> 00:01:13,200
everything on making debian do it we

00:01:11,640 --> 00:01:15,240
don't actually do it yet on our

00:01:13,200 --> 00:01:18,689
installation media but it's not that

00:01:15,240 --> 00:01:21,450
hard it's not trivial it's just a matter

00:01:18,689 --> 00:01:25,229
of programming we can deal with that the

00:01:21,450 --> 00:01:27,299
more interesting part of this is this

00:01:25,229 --> 00:01:29,100
big scary secure boot thing that

00:01:27,299 --> 00:01:36,860
everyone's been reading and writing

00:01:29,100 --> 00:01:41,100
about in in the last few months we have

00:01:36,860 --> 00:01:42,659
several options on how to do it I don't

00:01:41,100 --> 00:01:48,030
think there's a there are any good

00:01:42,659 --> 00:01:53,520
options personally but I'm prepared to

00:01:48,030 --> 00:01:56,070
be convinced otherwise there are two

00:01:53,520 --> 00:01:58,770
obvious ways that we could follow that

00:01:56,070 --> 00:02:02,790
other people have already followed the

00:01:58,770 --> 00:02:06,420
fedora people as Abele described by

00:02:02,790 --> 00:02:08,280
Matthew Garrett have gone with getting

00:02:06,420 --> 00:02:11,220
their kernels their boot media and

00:02:08,280 --> 00:02:12,970
everything signed so that it will work

00:02:11,220 --> 00:02:17,230
on PCs

00:02:12,970 --> 00:02:21,810
using Microsoft's secure boot Microsoft

00:02:17,230 --> 00:02:24,520
key Ubuntu have done something different

00:02:21,810 --> 00:02:32,110
which I'm hoping Steve will tell us all

00:02:24,520 --> 00:02:38,140
about oh you mean now

00:02:32,110 --> 00:02:40,330
yeah beef over you sorry

00:02:38,140 --> 00:02:46,630
brief overview please if free for review

00:02:40,330 --> 00:02:48,790
so secure boot is is important to the

00:02:46,630 --> 00:02:51,490
Linux Linux ecosystem in general on

00:02:48,790 --> 00:02:53,709
account of the fact that by the end of

00:02:51,490 --> 00:02:55,720
this year we should expect new hardware

00:02:53,709 --> 00:03:01,200
to be coming out of all of the OEMs in

00:02:55,720 --> 00:03:04,209
the PC world so x86 computers that are

00:03:01,200 --> 00:03:06,790
shipping with the intent to run Windows

00:03:04,209 --> 00:03:10,900
8 and Windows 8 certification

00:03:06,790 --> 00:03:12,760
requirements stipulate that secure boot

00:03:10,900 --> 00:03:16,660
must not only be implemented but must be

00:03:12,760 --> 00:03:19,330
enabled by default on any machine coming

00:03:16,660 --> 00:03:23,260
that to pass the windows 8 certification

00:03:19,330 --> 00:03:27,130
which means that when Joe user buys a

00:03:23,260 --> 00:03:30,660
computer at Best Buy and pre-loaded with

00:03:27,130 --> 00:03:33,940
Windows 8 on it and they try to install

00:03:30,660 --> 00:03:36,489
Debian with by putting a CD in or a USB

00:03:33,940 --> 00:03:37,450
stick or whatever it might be by default

00:03:36,489 --> 00:03:40,030
what they're going to see is they're

00:03:37,450 --> 00:03:41,739
going to get an access error and so this

00:03:40,030 --> 00:03:43,030
is important for us to figure out how we

00:03:41,739 --> 00:03:48,010
as a community are going to deal with

00:03:43,030 --> 00:03:51,310
this so that users can still continue to

00:03:48,010 --> 00:03:52,780
install free software on on machines

00:03:51,310 --> 00:03:55,390
that they've purchased and should have

00:03:52,780 --> 00:03:58,180
the right to do that on now the bun to

00:03:55,390 --> 00:04:02,920
approach in particular has been to do

00:03:58,180 --> 00:04:04,780
our level best to prevent the user from

00:04:02,920 --> 00:04:06,580
having to do anything to fiddle with

00:04:04,780 --> 00:04:09,519
their firmware settings in order to be

00:04:06,580 --> 00:04:13,690
able to boot which means going along

00:04:09,519 --> 00:04:15,970
with the the the secure boot key regime

00:04:13,690 --> 00:04:19,720
which Microsoft is putting in place

00:04:15,970 --> 00:04:22,780
Microsoft has said they will be a CA for

00:04:19,720 --> 00:04:24,990
for secure boot for other vendors so

00:04:22,780 --> 00:04:27,930
that other operating systems can all

00:04:24,990 --> 00:04:30,330
so good on PCs and so we're in the

00:04:27,930 --> 00:04:32,669
process of trying to get that going so

00:04:30,330 --> 00:04:34,800
that when you drop in a Bindu CD in a

00:04:32,669 --> 00:04:37,530
UEFI secure boot machine it will work

00:04:34,800 --> 00:04:38,880
out of the box with no fiddling now in

00:04:37,530 --> 00:04:40,349
particular one of the things that

00:04:38,880 --> 00:04:41,580
differs between what well there are two

00:04:40,349 --> 00:04:43,440
main things that you may have heard

00:04:41,580 --> 00:04:45,870
differ between what Red Hat is in the

00:04:43,440 --> 00:04:47,759
process of doing and what canonical open

00:04:45,870 --> 00:04:52,020
to are in the process of doing one is

00:04:47,759 --> 00:04:53,430
that canonical has on the basis of the

00:04:52,020 --> 00:04:57,330
legal advice we've been given made the

00:04:53,430 --> 00:05:00,720
determination that we're not persuaded

00:04:57,330 --> 00:05:04,710
that it is safe to use gplv3 boot

00:05:00,720 --> 00:05:06,780
loaders in this signing chain for fear

00:05:04,710 --> 00:05:09,380
that one of the remedies that a court

00:05:06,780 --> 00:05:13,199
might order is that we would have to

00:05:09,380 --> 00:05:15,419
disclose our private keys now there's

00:05:13,199 --> 00:05:16,979
been lots of discussion on lwn and

00:05:15,419 --> 00:05:20,849
elsewhere about whether this is actually

00:05:16,979 --> 00:05:23,130
a concern however we're going with the

00:05:20,849 --> 00:05:24,900
best legal advice we've been given at

00:05:23,130 --> 00:05:27,960
the moment which is that this is a

00:05:24,900 --> 00:05:29,639
concern and therefore we've opted to use

00:05:27,960 --> 00:05:31,889
a non gplv3

00:05:29,639 --> 00:05:34,860
bootloader and we're implementing menu

00:05:31,889 --> 00:05:38,580
supported efi linux instead now the

00:05:34,860 --> 00:05:39,930
second difference is that whereas red

00:05:38,580 --> 00:05:42,360
hat fedora are saying that they are

00:05:39,930 --> 00:05:44,520
going to do full signing of the kernel

00:05:42,360 --> 00:05:46,229
stack which means that only signed

00:05:44,520 --> 00:05:49,800
modules can be loaded into your kernel

00:05:46,229 --> 00:05:51,870
we are presently avoiding going down

00:05:49,800 --> 00:05:53,550
that path because we don't believe it

00:05:51,870 --> 00:05:57,900
adds any additional security value and

00:05:53,550 --> 00:06:00,000
we are trying to avoid having to do that

00:05:57,900 --> 00:06:02,460
because it does make it a lot harder for

00:06:00,000 --> 00:06:04,469
a distribution to Rev kernels it makes

00:06:02,460 --> 00:06:08,520
it harder for for instance any sort of

00:06:04,469 --> 00:06:10,620
DKMS package to work in a distribution

00:06:08,520 --> 00:06:12,300
where at any sort of package where users

00:06:10,620 --> 00:06:13,500
might be building their own modules or

00:06:12,300 --> 00:06:15,900
doing the final linking of their own

00:06:13,500 --> 00:06:17,310
modules and that obviously is when it

00:06:15,900 --> 00:06:19,380
invalidating so any sort of a binary

00:06:17,310 --> 00:06:21,090
signature on those those kernel modules

00:06:19,380 --> 00:06:23,280
and therefore doesn't work with if you

00:06:21,090 --> 00:06:25,560
if you have a security model that

00:06:23,280 --> 00:06:27,990
requires all the binaries to be signed

00:06:25,560 --> 00:06:31,469
by a key that the user doesn't control

00:06:27,990 --> 00:06:34,169
so I think that is key before you switch

00:06:31,469 --> 00:06:36,570
to another topic what you said about the

00:06:34,169 --> 00:06:37,180
GPL 3 license is not the view about the

00:06:36,570 --> 00:06:41,830
FSF

00:06:37,180 --> 00:06:44,410
which is also also extreme for grab I

00:06:41,830 --> 00:06:46,030
believe I'm sorry I have a hard time

00:06:44,410 --> 00:06:47,770
understanding we move the microphone

00:06:46,030 --> 00:06:51,940
away free mouth a little bit yeah okay

00:06:47,770 --> 00:06:55,950
so you said that because grub is cheap

00:06:51,940 --> 00:07:00,010
with gplv3 right then we would have to

00:06:55,950 --> 00:07:02,380
give away our private key potentially in

00:07:00,010 --> 00:07:05,140
certain okay first at first it's not the

00:07:02,380 --> 00:07:07,660
view of FSF which I believe is a trip

00:07:05,140 --> 00:07:10,030
program and they said that anyway if

00:07:07,660 --> 00:07:12,070
that was the case then you have the

00:07:10,030 --> 00:07:14,710
possibility to discuss with them to

00:07:12,070 --> 00:07:16,960
eventually change the license that's

00:07:14,710 --> 00:07:19,150
what I read on their website yes I'm

00:07:16,960 --> 00:07:22,330
aware of the FSF's public position on

00:07:19,150 --> 00:07:35,290
this and I'm not going to comment any

00:07:22,330 --> 00:07:38,080
further on that in this session wait yes

00:07:35,290 --> 00:07:41,170
basically Canonical's best legal advice

00:07:38,080 --> 00:07:44,050
is that they cannot assume they cannot

00:07:41,170 --> 00:07:45,490
safely do gplv3 that's the legal advice

00:07:44,050 --> 00:07:48,730
they've had and it's what they're going

00:07:45,490 --> 00:07:50,440
with the FSF may not necessarily get get

00:07:48,730 --> 00:08:01,770
to choose about this if things ain't end

00:07:50,440 --> 00:08:01,770
up in court that yeah that's fine so yes

00:08:03,470 --> 00:08:07,180
[Laughter]

00:08:10,630 --> 00:08:16,490
sure you have right and so that's what

00:08:14,630 --> 00:08:18,770
fedor that's what a bum to have done

00:08:16,490 --> 00:08:23,660
fedora have gone with a totally signed

00:08:18,770 --> 00:08:26,780
chain what should we do in Debian so I

00:08:23,660 --> 00:08:29,440
will say just that I'd blue hey the

00:08:26,780 --> 00:08:32,120
reason this is a concern for canonical

00:08:29,440 --> 00:08:34,490
tends to relate to issues that are

00:08:32,120 --> 00:08:36,260
rather this particular to canonical

00:08:34,490 --> 00:08:38,060
themselves in the canonical does have a

00:08:36,260 --> 00:08:40,850
business around pre installation of

00:08:38,060 --> 00:08:44,660
Ubuntu on machines that ship from the

00:08:40,850 --> 00:08:47,210
OEM that way I I don't think even if

00:08:44,660 --> 00:08:49,400
everybody agreed with this current this

00:08:47,210 --> 00:08:51,110
legal interpretation of the gplv3

00:08:49,400 --> 00:08:53,240
which it's clear that not everybody does

00:08:51,110 --> 00:08:54,710
I don't know that that would have

00:08:53,240 --> 00:08:56,120
actually changed anything about the

00:08:54,710 --> 00:08:57,800
decision fedora made and I don't

00:08:56,120 --> 00:08:59,680
necessarily think that should affect

00:08:57,800 --> 00:09:02,690
what Debian decides to do here because

00:08:59,680 --> 00:09:05,950
realistically pre-installed debian

00:09:02,690 --> 00:09:11,360
systems shipped by an OEM or not not a

00:09:05,950 --> 00:09:13,400
real scenario today sure sorry I may

00:09:11,360 --> 00:09:15,860
just ask perhaps basic question that's

00:09:13,400 --> 00:09:17,900
already been answered how much of EFI is

00:09:15,860 --> 00:09:21,700
currently set in stone with regards to

00:09:17,900 --> 00:09:24,530
its API is there any possible

00:09:21,700 --> 00:09:27,290
possibility of revision for the ability

00:09:24,530 --> 00:09:32,060
to in an automated fashion add

00:09:27,290 --> 00:09:34,610
additional keys or disabling on initial

00:09:32,060 --> 00:09:37,310
boots or white right

00:09:34,610 --> 00:09:39,680
once areas of memory so that on initial

00:09:37,310 --> 00:09:42,020
install the very first time on hardware

00:09:39,680 --> 00:09:45,070
you could write a set of key or anything

00:09:42,020 --> 00:09:48,530
like that so I'm not familiar at all

00:09:45,070 --> 00:09:50,630
specifically with the standard itself

00:09:48,530 --> 00:09:52,430
but I'm okay so I mean a lot of that

00:09:50,630 --> 00:09:54,740
comes down not to the standard but but

00:09:52,430 --> 00:09:55,910
to Microsoft's certification

00:09:54,740 --> 00:09:58,130
requirements which are going to govern

00:09:55,910 --> 00:10:01,280
what actually gets shipped as default

00:09:58,130 --> 00:10:02,840
settings in secure boot and no when you

00:10:01,280 --> 00:10:05,180
talk about it

00:10:02,840 --> 00:10:08,420
some process for initial key loading and

00:10:05,180 --> 00:10:10,960
whatnot at that point you know what does

00:10:08,420 --> 00:10:13,820
that look like are you running code

00:10:10,960 --> 00:10:14,620
automatically from some external media

00:10:13,820 --> 00:10:16,750
and then

00:10:14,620 --> 00:10:18,400
and that undermine to a certain degree

00:10:16,750 --> 00:10:20,410
what security is trying to accomplish if

00:10:18,400 --> 00:10:21,850
you don't have to get into the Machine

00:10:20,410 --> 00:10:25,360
and configure something in the firmware

00:10:21,850 --> 00:10:28,240
first we expect these machines to come

00:10:25,360 --> 00:10:31,810
from the OEMs with secure boot enabled

00:10:28,240 --> 00:10:33,670
as Microsoft requires Microsoft's

00:10:31,810 --> 00:10:36,160
certification requirements do stipulate

00:10:33,670 --> 00:10:38,920
that it must be possible to disable

00:10:36,160 --> 00:10:40,450
secure boot and run without secure boot

00:10:38,920 --> 00:10:42,670
but of course the user has to be able to

00:10:40,450 --> 00:10:44,200
get into the firmware what would have

00:10:42,670 --> 00:10:46,360
been called the BIOS but isn't actually

00:10:44,200 --> 00:10:49,480
a BIOS anymore get into the firmware

00:10:46,360 --> 00:10:51,880
configuration and make changes there so

00:10:49,480 --> 00:10:54,130
it's it's a it's a it's a usability

00:10:51,880 --> 00:10:55,690
obstacle for the typical user there's

00:10:54,130 --> 00:10:59,890
also a requirement that user must be

00:10:55,690 --> 00:11:02,290
able to install their own keys you bit

00:10:59,890 --> 00:11:05,170
of how users must be able to install

00:11:02,290 --> 00:11:07,120
their own keys but but exactly exactly

00:11:05,170 --> 00:11:09,220
how you're going to do that on an EFI

00:11:07,120 --> 00:11:11,020
system is going potentially is gonna

00:11:09,220 --> 00:11:13,180
vary hugely from one system to the next

00:11:11,020 --> 00:11:17,500
it all depends on how the vendors have

00:11:13,180 --> 00:11:20,530
implemented things EFI itself is dare I

00:11:17,500 --> 00:11:22,870
say it quite well specified there were

00:11:20,530 --> 00:11:25,600
its thousands of pages of documentation

00:11:22,870 --> 00:11:28,180
about how to do things what what to do

00:11:25,600 --> 00:11:29,770
you know a people reading Matthews blog

00:11:28,180 --> 00:11:32,320
will will feel the pain of actually

00:11:29,770 --> 00:11:34,180
trying to trying to work out how to make

00:11:32,320 --> 00:11:35,950
things work rather than what the spec

00:11:34,180 --> 00:11:38,950
says what there is actually a decent

00:11:35,950 --> 00:11:43,000
clear spec the secure boot stuff is much

00:11:38,950 --> 00:11:45,370
less obvious and again this is one of

00:11:43,000 --> 00:11:47,560
the problems so this is where we got the

00:11:45,370 --> 00:11:49,930
the situation well different distros are

00:11:47,560 --> 00:11:52,300
already looking at different options and

00:11:49,930 --> 00:11:55,060
different ways of providing secure

00:11:52,300 --> 00:11:59,560
booting systems is that we don't know

00:11:55,060 --> 00:12:03,250
exactly what the consequences are going

00:11:59,560 --> 00:12:05,710
to be if if Microsoft disagree with how

00:12:03,250 --> 00:12:08,290
various people have implemented their

00:12:05,710 --> 00:12:09,850
own secure boot you know if this is

00:12:08,290 --> 00:12:12,760
where we get the you know the choice of

00:12:09,850 --> 00:12:15,010
selling kernel and modules or not for

00:12:12,760 --> 00:12:16,630
example right so actually my my best

00:12:15,010 --> 00:12:18,940
understanding of Microsoft's

00:12:16,630 --> 00:12:22,000
requirements in fact does not say that

00:12:18,940 --> 00:12:24,340
they must support adding user user

00:12:22,000 --> 00:12:26,590
provided keys I mean it's part of the

00:12:24,340 --> 00:12:27,670
secure boot spec but I don't think

00:12:26,590 --> 00:12:28,000
that's something that's part of the

00:12:27,670 --> 00:12:30,910
Micra

00:12:28,000 --> 00:12:34,060
the windows 8 certification it is likely

00:12:30,910 --> 00:12:35,440
that only that the ODMs and the bio the

00:12:34,060 --> 00:12:37,360
firmware manufacturers are going to try

00:12:35,440 --> 00:12:39,190
to implement that as best they can but

00:12:37,360 --> 00:12:41,260
it does mean you don't have the the

00:12:39,190 --> 00:12:42,640
necessary technical pressure to ensure

00:12:41,260 --> 00:12:51,850
they get it right is one of the problems

00:12:42,640 --> 00:12:53,020
there that's fine you don't need the

00:12:51,850 --> 00:12:55,990
point being

00:12:53,020 --> 00:12:57,970
first of all canonical can do whatever

00:12:55,990 --> 00:13:01,270
it wants I actually I ran a bunt once

00:12:57,970 --> 00:13:03,280
but mostly I run them you know but when

00:13:01,270 --> 00:13:06,430
they say that the court might force

00:13:03,280 --> 00:13:09,070
somebody in general anyone some of your

00:13:06,430 --> 00:13:11,410
developers to sign o2 to hand over keys

00:13:09,070 --> 00:13:13,300
I have a big issue with that and I'd

00:13:11,410 --> 00:13:16,120
like to understand the specific legal

00:13:13,300 --> 00:13:17,320
reasoning because otherwise as far as

00:13:16,120 --> 00:13:19,750
I'm concerned it's fun

00:13:17,320 --> 00:13:23,800
not from you but still and the other

00:13:19,750 --> 00:13:27,040
point being that a court can order me to

00:13:23,800 --> 00:13:29,890
or anybody here or there to hand over a

00:13:27,040 --> 00:13:32,350
key with you because personally speaking

00:13:29,890 --> 00:13:35,230
what I would say to a court ordered me

00:13:32,350 --> 00:13:37,270
to do that is you cannot order me to

00:13:35,230 --> 00:13:38,830
hand over a part of my identity

00:13:37,270 --> 00:13:40,600
you can rave you can throw me in jail

00:13:38,830 --> 00:13:43,030
you can do whatever the you want

00:13:40,600 --> 00:13:47,740
but still corporations don't tend to

00:13:43,030 --> 00:13:51,339
take the same view on questions of civil

00:13:47,740 --> 00:13:53,589
disobedience of Courts the the legal

00:13:51,339 --> 00:13:56,140
advice that we've received is from some

00:13:53,589 --> 00:13:57,640
top-notch lawyers in the field there are

00:13:56,140 --> 00:13:59,410
still some questions that we're trying

00:13:57,640 --> 00:14:02,110
to wrestle with internally about about

00:13:59,410 --> 00:14:03,520
exactly why we've reached this

00:14:02,110 --> 00:14:07,839
conclusion that seems to be at odds with

00:14:03,520 --> 00:14:09,910
the FSF's public position but you know

00:14:07,839 --> 00:14:12,610
it's it's not something I would call a

00:14:09,910 --> 00:14:14,200
case of FUD all the people involved do

00:14:12,610 --> 00:14:19,750
have good intentions I'll vouch for

00:14:14,200 --> 00:14:20,800
their their trustworthiness and there

00:14:19,750 --> 00:14:26,020
was another point I was gonna make there

00:14:20,800 --> 00:14:28,780
and I've forgotten it so I won't dumb

00:14:26,020 --> 00:14:31,380
sorry just a quick additional question

00:14:28,780 --> 00:14:34,270
so is there any chance of the

00:14:31,380 --> 00:14:38,380
implementation that Microsoft has of

00:14:34,270 --> 00:14:39,710
secure boot being revised or adjusted on

00:14:38,380 --> 00:14:41,270
the basis of

00:14:39,710 --> 00:14:42,860
pressure I mean is this something that

00:14:41,270 --> 00:14:44,660
we're going to have to from your

00:14:42,860 --> 00:14:47,930
perspective anyway going to have to work

00:14:44,660 --> 00:14:50,360
around now or should we be beating down

00:14:47,930 --> 00:14:56,200
the door and applying direct pressure

00:14:50,360 --> 00:14:59,060
via OMS and server manufacturers or etc

00:14:56,200 --> 00:15:00,710
if you know how to apply pressure to an

00:14:59,060 --> 00:15:03,140
OEM and get them to do what you want

00:15:00,710 --> 00:15:06,980
please tell me your secret yeah please

00:15:03,140 --> 00:15:10,130
do it so so but as far as you guys know

00:15:06,980 --> 00:15:11,720
if there's it it seems to be said from

00:15:10,130 --> 00:15:13,520
Microsoft's when you talk about

00:15:11,720 --> 00:15:14,960
implementation of secure boot first of

00:15:13,520 --> 00:15:17,690
all Microsoft themselves are not an

00:15:14,960 --> 00:15:19,820
implementer of secure boot right but

00:15:17,690 --> 00:15:27,350
they have a certification process that

00:15:19,820 --> 00:15:29,900
they've and it's it's unlikely that we

00:15:27,350 --> 00:15:31,520
will get universal coverage if we try to

00:15:29,900 --> 00:15:33,020
you know go out to the OEMs individually

00:15:31,520 --> 00:15:34,070
and say hey this is also important then

00:15:33,020 --> 00:15:38,180
you should do this on all of your

00:15:34,070 --> 00:15:39,560
systems I don't know what kind of a

00:15:38,180 --> 00:15:41,480
success rate we can expect there but I

00:15:39,560 --> 00:15:43,340
don't think we're gonna hit 100% the

00:15:41,480 --> 00:15:45,950
only way to get all the OEMs to do the

00:15:43,340 --> 00:15:48,530
right thing is to have Microsoft as the

00:15:45,950 --> 00:15:49,700
the you know the company with the purse

00:15:48,530 --> 00:15:52,190
strings in this particular arrangement

00:15:49,700 --> 00:15:56,540
to tell them that this is what they have

00:15:52,190 --> 00:15:59,750
to do and I in fact so there is a UEFI

00:15:56,540 --> 00:16:01,550
plugfest the week after this in Redmond

00:15:59,750 --> 00:16:03,800
and I'm I'm gonna be heading up there

00:16:01,550 --> 00:16:04,580
and talking with some folks you know

00:16:03,800 --> 00:16:07,790
face to face

00:16:04,580 --> 00:16:11,090
technical level about what our concerns

00:16:07,790 --> 00:16:12,590
are and whatnot so I'm hoping to be able

00:16:11,090 --> 00:16:15,350
to talk with them about you know both

00:16:12,590 --> 00:16:17,000
Canonical's concerns for abun 2 as well

00:16:15,350 --> 00:16:19,660
as the Debian community's concerns and

00:16:17,000 --> 00:16:22,090
and you know lay it out for them what

00:16:19,660 --> 00:16:25,370
what we think is the correct solution

00:16:22,090 --> 00:16:29,210
but this is obviously no guarantee that

00:16:25,370 --> 00:16:32,660
Microsoft will change anything we've

00:16:29,210 --> 00:16:34,940
already got it's reasonably clear to me

00:16:32,660 --> 00:16:36,920
anyway that the the pressure and the bad

00:16:34,940 --> 00:16:38,720
press Microsoft received when they first

00:16:36,920 --> 00:16:42,290
started talking about secure boot and

00:16:38,720 --> 00:16:42,680
about how it it was going to be locked

00:16:42,290 --> 00:16:45,200
down

00:16:42,680 --> 00:16:47,270
totally actually cause changes or at

00:16:45,200 --> 00:16:49,770
least clarifications on what they wanted

00:16:47,270 --> 00:16:53,100
their OMS to do

00:16:49,770 --> 00:16:55,370
so of course on x86 they are the

00:16:53,100 --> 00:16:57,480
monopoly operating system provider so

00:16:55,370 --> 00:16:59,670
they feel a lot more pressure to

00:16:57,480 --> 00:17:02,310
actually do what the press

00:16:59,670 --> 00:17:04,320
basically demand of them is boils down

00:17:02,310 --> 00:17:06,810
to because we still have the problem

00:17:04,320 --> 00:17:08,280
that unarmed they're very much looking

00:17:06,810 --> 00:17:09,960
the other way you know they're not the

00:17:08,280 --> 00:17:13,020
monopoly provider an arm so they can do

00:17:09,960 --> 00:17:14,190
whatever random crap they want so the

00:17:13,020 --> 00:17:15,720
other thing with respect to the plugfest

00:17:14,190 --> 00:17:17,250
I don't know how many people in here

00:17:15,720 --> 00:17:19,860
actually know what a plugfest is they're

00:17:17,250 --> 00:17:22,620
actually the idea of a plugfest is

00:17:19,860 --> 00:17:24,150
something that Microsoft and Intel and

00:17:22,620 --> 00:17:25,530
IBM and companies like that have done

00:17:24,150 --> 00:17:27,420
for a while now which is basically

00:17:25,530 --> 00:17:29,910
everybody who is implementing to a

00:17:27,420 --> 00:17:32,520
standard of any sort they bring their

00:17:29,910 --> 00:17:34,170
toys to the building and test

00:17:32,520 --> 00:17:35,520
interoperability on them so that's

00:17:34,170 --> 00:17:37,830
actually the chief purpose of the plug

00:17:35,520 --> 00:17:39,900
fest is to get people testing

00:17:37,830 --> 00:17:41,880
interoperability and so that if anything

00:17:39,900 --> 00:17:45,360
is actually one of the better strategies

00:17:41,880 --> 00:17:47,940
of of getting OEMs and and and firmware

00:17:45,360 --> 00:17:49,500
manufacturers to fix their bugs is to

00:17:47,940 --> 00:17:52,770
actually be able to show them there are

00:17:49,500 --> 00:17:53,880
bugs so that's actually even that's a

00:17:52,770 --> 00:17:56,610
large part of why I'm going there as

00:17:53,880 --> 00:17:58,350
well as is I will be poking at them with

00:17:56,610 --> 00:17:59,430
the bun to secure boot and see what

00:17:58,350 --> 00:18:03,510
happens okay

00:17:59,430 --> 00:18:04,080
chibby very cool two separate things

00:18:03,510 --> 00:18:05,880
from each other

00:18:04,080 --> 00:18:07,560
first thing is I just I do not work for

00:18:05,880 --> 00:18:09,240
Chronicle I have not heard their advice

00:18:07,560 --> 00:18:13,020
and I just want to encourage people to

00:18:09,240 --> 00:18:14,430
stop trying to pressure that discussion

00:18:13,020 --> 00:18:16,380
to happen now both because this is a

00:18:14,430 --> 00:18:20,070
recorded in public session but also

00:18:16,380 --> 00:18:21,450
because legal advice in general needs to

00:18:20,070 --> 00:18:23,820
typically stay confidential to the

00:18:21,450 --> 00:18:27,900
recipient and otherwise there's lots of

00:18:23,820 --> 00:18:28,200
complications that happen on a separate

00:18:27,900 --> 00:18:30,870
matter

00:18:28,200 --> 00:18:35,670
I believe the requirement to allow

00:18:30,870 --> 00:18:38,880
secure boot to be disabled is for x86

00:18:35,670 --> 00:18:42,930
and and e64 only it does not apply to

00:18:38,880 --> 00:18:46,200
arm so and I'm not blaming arm for this

00:18:42,930 --> 00:18:48,060
this is a Microsoft thing but um I don't

00:18:46,200 --> 00:18:50,520
know whether Windows 8 certify or I

00:18:48,060 --> 00:18:53,010
guess Windows RT certified arm devices

00:18:50,520 --> 00:18:55,230
are going to become popular or not but

00:18:53,010 --> 00:18:56,910
whether or not whatever canonical does

00:18:55,230 --> 00:18:58,530
that being currently supports arm so

00:18:56,910 --> 00:19:01,320
what are we thinking of that

00:18:58,530 --> 00:19:08,280
for any armed devices in a ship with

00:19:01,320 --> 00:19:18,770
this situation okay anybody else queuing

00:19:08,280 --> 00:19:24,780
up on the mic sorry so what about the

00:19:18,770 --> 00:19:27,060
large enterprise some purchases of PC

00:19:24,780 --> 00:19:29,370
hardware I mean there are a lot of big

00:19:27,060 --> 00:19:31,950
organizations now that have thousands

00:19:29,370 --> 00:19:34,710
and thousands of Linux servers how do

00:19:31,950 --> 00:19:37,500
they feel I mean are they satisfied with

00:19:34,710 --> 00:19:39,060
the solutions from vendors like like Red

00:19:37,500 --> 00:19:42,210
Hat I mean I've worked in organizations

00:19:39,060 --> 00:19:45,180
where they've had over 50% of the

00:19:42,210 --> 00:19:47,610
machines running Linux and this is going

00:19:45,180 --> 00:19:49,650
to be a challenge for them and and I

00:19:47,610 --> 00:19:53,700
mean how are they going to respond to

00:19:49,650 --> 00:19:56,430
this it's that's a good question some of

00:19:53,700 --> 00:19:57,750
the OEMs are you know somewhat so some

00:19:56,430 --> 00:20:00,270
of the larger customers are going to be

00:19:57,750 --> 00:20:02,580
big enough to be able to get you know

00:20:00,270 --> 00:20:05,760
custom-built pcs that have certain

00:20:02,580 --> 00:20:08,070
configurations obviously but it's then

00:20:05,760 --> 00:20:10,380
seen against the the greater market even

00:20:08,070 --> 00:20:13,440
the biggest customers may not be able to

00:20:10,380 --> 00:20:17,450
get to swing things with it with with

00:20:13,440 --> 00:20:19,800
their suppliers so this is exactly why

00:20:17,450 --> 00:20:22,110
from talking to Matthew this is exactly

00:20:19,800 --> 00:20:23,660
why Red Hat or going down the secure

00:20:22,110 --> 00:20:26,760
boot thing and going for the signed

00:20:23,660 --> 00:20:29,400
kernel and modules and everything B Dell

00:20:26,760 --> 00:20:31,830
is shaking his head at me as to we'd

00:20:29,400 --> 00:20:35,760
pass the mic forward just one one other

00:20:31,830 --> 00:20:38,940
thing and what about government buyers

00:20:35,760 --> 00:20:42,390
I mean foreign governments like non-us

00:20:38,940 --> 00:20:44,340
buyers of PC hardware going to be

00:20:42,390 --> 00:20:46,440
comfortable with something that's

00:20:44,340 --> 00:20:50,330
cryptographically controlled by a

00:20:46,440 --> 00:20:55,080
foreign corporation is there any concern

00:20:50,330 --> 00:20:57,150
from any particular country again good

00:20:55,080 --> 00:20:59,430
question I mean of course at the moment

00:20:57,150 --> 00:21:01,800
people happily believe in you know see a

00:20:59,430 --> 00:21:05,490
small over the world and we know how

00:21:01,800 --> 00:21:08,570
just how secure the CAS are we've passed

00:21:05,490 --> 00:21:08,570
the microphone for to Beto

00:21:19,300 --> 00:21:22,610
there's a lot of different things being

00:21:21,380 --> 00:21:25,190
talked about here and you have to be

00:21:22,610 --> 00:21:27,800
careful not to conflate too many issues

00:21:25,190 --> 00:21:29,870
all into one discussion I'm first of all

00:21:27,800 --> 00:21:32,920
there are customers in the world who are

00:21:29,870 --> 00:21:36,290
really really concerned about zero-day

00:21:32,920 --> 00:21:39,530
bios oriented virus attacks and that's

00:21:36,290 --> 00:21:42,410
the real reason that the UEFI community

00:21:39,530 --> 00:21:45,320
has built the secure boots back is this

00:21:42,410 --> 00:21:47,720
is one of their you know best approaches

00:21:45,320 --> 00:21:49,490
for how to try and address that and the

00:21:47,720 --> 00:21:52,310
customers who care about that include

00:21:49,490 --> 00:21:54,340
people like government agencies who

00:21:52,310 --> 00:21:56,870
really want to be able to know for sure

00:21:54,340 --> 00:21:59,300
are what the bits are that were booted

00:21:56,870 --> 00:22:02,330
on the machines that they're operating

00:21:59,300 --> 00:22:03,980
so you know for every one of these

00:22:02,330 --> 00:22:06,800
things that you bring up there's sort of

00:22:03,980 --> 00:22:08,900
two sides to the the issue on one side

00:22:06,800 --> 00:22:11,030
there's the people who really really

00:22:08,900 --> 00:22:12,860
want to make sure that they understand

00:22:11,030 --> 00:22:15,020
what bits are being booted on their

00:22:12,860 --> 00:22:19,880
machine and that they're not being

00:22:15,020 --> 00:22:22,880
somehow damaged by you know malware

00:22:19,880 --> 00:22:23,990
that's affected the BIOS but then on the

00:22:22,880 --> 00:22:25,370
other side there's always gonna be

00:22:23,990 --> 00:22:27,920
somebody who says well I don't trust

00:22:25,370 --> 00:22:29,360
anybody else to make the decision on

00:22:27,920 --> 00:22:32,030
what the bits running on my machine

00:22:29,360 --> 00:22:34,310
ought to be so the position that you

00:22:32,030 --> 00:22:37,820
know my company's trying to take is one

00:22:34,310 --> 00:22:40,580
of we want end-users to be able to run

00:22:37,820 --> 00:22:42,710
the bits they want to run but when those

00:22:40,580 --> 00:22:45,590
users are telling us that it's important

00:22:42,710 --> 00:22:47,060
to them to be able to know that the bits

00:22:45,590 --> 00:22:49,670
they want to run are the ones that are

00:22:47,060 --> 00:22:53,000
actually booting mechanisms like this

00:22:49,670 --> 00:22:55,720
might be part of providing those sorts

00:22:53,000 --> 00:22:58,730
of assurances so it isn't so much about

00:22:55,720 --> 00:23:01,280
trying to have control over what bits

00:22:58,730 --> 00:23:03,140
run on the machine in the sense of the

00:23:01,280 --> 00:23:06,380
company tells the user what they can or

00:23:03,140 --> 00:23:08,360
can't run it's more about if the user

00:23:06,380 --> 00:23:11,000
says I want to boot Windows 8 it should

00:23:08,360 --> 00:23:12,590
be Windows 8 and not a molested copy if

00:23:11,000 --> 00:23:13,820
they want to boot Debian it ought to be

00:23:12,590 --> 00:23:15,320
Debbie and if they want to boot

00:23:13,820 --> 00:23:17,930
Ubuntu it ought to be other than two and

00:23:15,320 --> 00:23:20,750
so forth and where it gets challenging

00:23:17,930 --> 00:23:24,110
is that the technical mechanisms for

00:23:20,750 --> 00:23:26,450
implementing these assurances end up

00:23:24,110 --> 00:23:28,100
sort of you know coming down to who has

00:23:26,450 --> 00:23:29,540
the ability to sign what

00:23:28,100 --> 00:23:31,400
and how does that chain of authority

00:23:29,540 --> 00:23:33,470
work and who can revoke what

00:23:31,400 --> 00:23:36,110
certificates under what circumstances

00:23:33,470 --> 00:23:39,050
and those are all you know really messy

00:23:36,110 --> 00:23:42,320
ugly details but you know be careful

00:23:39,050 --> 00:23:44,330
about assuming first of all that not

00:23:42,320 --> 00:23:45,680
everybody wants this because there are a

00:23:44,330 --> 00:23:48,350
lot of people who think this is really

00:23:45,680 --> 00:23:51,080
really important including people who

00:23:48,350 --> 00:23:51,890
want to run Linux and then the other

00:23:51,080 --> 00:23:54,500
direction

00:23:51,890 --> 00:23:57,230
you know don't a sin that somehow you

00:23:54,500 --> 00:23:59,090
know Microsoft is the root of all evil

00:23:57,230 --> 00:24:01,040
in this case because there's a lot of

00:23:59,090 --> 00:24:03,340
different motivations coming together to

00:24:01,040 --> 00:24:08,000
cause people to develop this technology

00:24:03,340 --> 00:24:10,340
and and whether you like it or not at

00:24:08,000 --> 00:24:11,810
the end of the day it's going to be

00:24:10,340 --> 00:24:13,970
there and we have to somehow figure out

00:24:11,810 --> 00:24:15,890
how to deal with it I also the folks

00:24:13,970 --> 00:24:18,380
that that I work with they're the

00:24:15,890 --> 00:24:20,390
company remind me all the time that you

00:24:18,380 --> 00:24:23,900
need to maintain a mental distinction

00:24:20,390 --> 00:24:26,840
between Windows 8 and Windows RT and you

00:24:23,900 --> 00:24:28,490
need to think about sort of that

00:24:26,840 --> 00:24:30,620
distinction when you're thinking about

00:24:28,490 --> 00:24:34,130
sort of where the switch is supposed to

00:24:30,620 --> 00:24:37,280
always exist where the enable/disable

00:24:34,130 --> 00:24:46,010
switch is not allowed to exist by the

00:24:37,280 --> 00:24:48,020
Windows 8 requirements Mike yeah so

00:24:46,010 --> 00:24:50,870
answer Tom's question about public

00:24:48,020 --> 00:24:53,000
pressure I think the the rmx 66

00:24:50,870 --> 00:24:55,850
distinction is really important and

00:24:53,000 --> 00:24:57,470
somewhat underplayed in a few years time

00:24:55,850 --> 00:24:59,510
though you know half your boxes might be

00:24:57,470 --> 00:25:01,130
on boxes and if you can't install

00:24:59,510 --> 00:25:02,630
anything apart for windows on them

00:25:01,130 --> 00:25:05,150
that's gonna be a really big deal and

00:25:02,630 --> 00:25:07,940
you know as Steve said public pressure

00:25:05,150 --> 00:25:09,290
made them change the x86 rules there's a

00:25:07,940 --> 00:25:10,910
small chance of public pressure might

00:25:09,290 --> 00:25:13,400
make them change the arm rules but

00:25:10,910 --> 00:25:14,750
probably not but I think that will be

00:25:13,400 --> 00:25:16,310
the thing to argue if you wanted to

00:25:14,750 --> 00:25:18,020
argue rather than worry about

00:25:16,310 --> 00:25:20,420
technicality it's a combination of

00:25:18,020 --> 00:25:27,050
public pressure and fear of millat

00:25:20,420 --> 00:25:28,970
monopoly litigation again so I think the

00:25:27,050 --> 00:25:31,100
sort of gazillion dollar question here

00:25:28,970 --> 00:25:32,870
is even if you believe that some huge

00:25:31,100 --> 00:25:34,700
majority of the devices in the world are

00:25:32,870 --> 00:25:35,990
going to be running arm what makes you

00:25:34,700 --> 00:25:38,650
think that they're gonna be shipping

00:25:35,990 --> 00:25:38,650
with Windows on

00:25:39,000 --> 00:25:45,030
yeah hopefully it won't be very popular

00:25:41,080 --> 00:25:46,930
but it's because of the network effect

00:25:45,030 --> 00:25:48,340
Windows is popular for the reasons

00:25:46,930 --> 00:25:49,510
Windows is popular and most people

00:25:48,340 --> 00:25:51,940
couldn't care less what architecture

00:25:49,510 --> 00:25:54,310
their systems running no man that's the

00:25:51,940 --> 00:25:56,080
point it's just another computer most of

00:25:54,310 --> 00:25:58,990
your users can't tell what CPUs inside

00:25:56,080 --> 00:26:01,600
they don't care and that's the reason

00:25:58,990 --> 00:26:04,090
why the technical excuse they don't have

00:26:01,600 --> 00:26:06,340
a majority and arm isn't really valid

00:26:04,090 --> 00:26:08,070
they have a powerful network effect and

00:26:06,340 --> 00:26:11,920
it applies to any computer people ship

00:26:08,070 --> 00:26:14,440
sure so we've had a lot of discussion

00:26:11,920 --> 00:26:16,300
about well do we like secure boot what

00:26:14,440 --> 00:26:18,760
the things around it I'd like to

00:26:16,300 --> 00:26:20,200
actually focus more on what we in Debian

00:26:18,760 --> 00:26:22,150
are going to do about it that is the

00:26:20,200 --> 00:26:24,580
real point of it as I said when I when

00:26:22,150 --> 00:26:26,290
they introduced this um I'm gonna end up

00:26:24,580 --> 00:26:28,030
doing some of the work on this and I

00:26:26,290 --> 00:26:29,980
would like some kind of mandate before I

00:26:28,030 --> 00:26:31,930
get you know castigated after the fact

00:26:29,980 --> 00:26:36,030
for being some freedom-hating

00:26:31,930 --> 00:26:39,430
you know Microsoft employee or something

00:26:36,030 --> 00:26:44,320
so one question is is it possible to

00:26:39,430 --> 00:26:46,210
have another what are the limitations on

00:26:44,320 --> 00:26:47,740
extra Keys we can put on can we say it

00:26:46,210 --> 00:26:49,510
at manufacturers please put our debian

00:26:47,740 --> 00:26:51,550
key on is it know is it useful to make a

00:26:49,510 --> 00:26:54,900
debian key and try and get people to

00:26:51,550 --> 00:26:54,900
already have it

00:27:00,450 --> 00:27:04,870
I'm not sure if beetle actually wanted

00:27:02,920 --> 00:27:07,090
to feel that because he seemed to be I

00:27:04,870 --> 00:27:09,010
mean because yes we could ask

00:27:07,090 --> 00:27:10,390
manufacturers that but I don't expect

00:27:09,010 --> 00:27:13,450
most of them to give Debian the time of

00:27:10,390 --> 00:27:16,630
day as when we're talking about a scarce

00:27:13,450 --> 00:27:18,700
resource like NVRAM on a board that

00:27:16,630 --> 00:27:20,740
they're making with very small margins I

00:27:18,700 --> 00:27:23,620
don't imagine that manufacturers are

00:27:20,740 --> 00:27:25,300
going to be interested in having one of

00:27:23,620 --> 00:27:27,070
the real serious constraints is how much

00:27:25,300 --> 00:27:29,410
space there is in the firm where to hold

00:27:27,070 --> 00:27:31,030
a whole pile of keys and so from the

00:27:29,410 --> 00:27:32,530
beginning the folks planning to

00:27:31,030 --> 00:27:35,230
implement this stuff have assumed that

00:27:32,530 --> 00:27:38,370
the right answer is a small very small

00:27:35,230 --> 00:27:41,080
number of sort of Route keys and so I

00:27:38,370 --> 00:27:43,300
don't think it's reasonable for us to

00:27:41,080 --> 00:27:45,730
try and operate in a mode where we have

00:27:43,300 --> 00:27:48,370
to have any key material in every OEMs

00:27:45,730 --> 00:27:51,670
machine but that doesn't seem like a

00:27:48,370 --> 00:27:53,110
good approach that leads this whole sort

00:27:51,670 --> 00:27:55,410
of question of who do you trust assign

00:27:53,110 --> 00:27:58,330
what win and and do you have the right

00:27:55,410 --> 00:28:00,220
terms in the contract under which

00:27:58,330 --> 00:28:02,740
they're signing things for you to ensure

00:28:00,220 --> 00:28:05,740
that it doesn't get revoked at weird

00:28:02,740 --> 00:28:07,930
times and all that I mean a limitation

00:28:05,740 --> 00:28:09,880
of what's been done so far is that any

00:28:07,930 --> 00:28:12,850
given binary can only be signed by one

00:28:09,880 --> 00:28:18,970
key using the secure bit set up which is

00:28:12,850 --> 00:28:22,750
a major limitation for us probably

00:28:18,970 --> 00:28:24,670
deliberate it's difficult to tell so of

00:28:22,750 --> 00:28:27,910
course it won't be possible to have your

00:28:24,670 --> 00:28:29,320
own key sign the bootloader and still

00:28:27,910 --> 00:28:32,520
have it functional as a whit as a

00:28:29,320 --> 00:28:32,520
Microsoft signed bootloader

00:28:32,580 --> 00:28:38,130
that makes it difficult there's been

00:28:34,960 --> 00:28:40,690
discussion about trying to find some

00:28:38,130 --> 00:28:43,930
impartial third party Linux Foundation

00:28:40,690 --> 00:28:46,690
or somebody similar basically sign a

00:28:43,930 --> 00:28:49,900
generic Linux boot loader that we can

00:28:46,690 --> 00:28:53,620
then all chain from I don't know if

00:28:49,900 --> 00:28:55,390
there's much traction along that route

00:28:53,620 --> 00:28:58,510
yet or whether or not we can find

00:28:55,390 --> 00:29:00,370
someone who is big enough to go around

00:28:58,510 --> 00:29:03,670
and talk to all the OEMs and get their

00:29:00,370 --> 00:29:06,340
key included and also trusted enough and

00:29:03,670 --> 00:29:09,660
I suppose prepared to stand up and be

00:29:06,340 --> 00:29:12,410
counted and do do all that work for us

00:29:09,660 --> 00:29:14,820
it's a difficult thing in the community

00:29:12,410 --> 00:29:16,500
so of course I think that's one of the

00:29:14,820 --> 00:29:17,640
reason one of the things that as far as

00:29:16,500 --> 00:29:21,780
I can see why

00:29:17,640 --> 00:29:26,220
canonical have gone with the Intel efi

00:29:21,780 --> 00:29:31,100
linux loader in that that one is is

00:29:26,220 --> 00:29:33,270
already signed by the microsoft key yes

00:29:31,100 --> 00:29:35,580
no no okay

00:29:33,270 --> 00:29:38,600
what binaries have to be signed so the

00:29:35,580 --> 00:29:40,410
we're going with efi Linux because it's

00:29:38,600 --> 00:29:43,680
licensed compatible with our

00:29:40,410 --> 00:29:45,090
understanding and is small easy to

00:29:43,680 --> 00:29:47,400
manipulate doesn't have a lot of extra

00:29:45,090 --> 00:29:49,950
baggage to it it just does one thing and

00:29:47,400 --> 00:29:55,230
does it well which is it loads it boot

00:29:49,950 --> 00:29:56,490
loads on efi um so that that's kind of

00:29:55,230 --> 00:29:59,370
the situation there as far as getting it

00:29:56,490 --> 00:30:03,360
signed that we do actually have our

00:29:59,370 --> 00:30:06,030
first binary back from Microsoft signed

00:30:03,360 --> 00:30:09,240
through that program on EFI Linux

00:30:06,030 --> 00:30:11,910
bootable provided you your booting out

00:30:09,240 --> 00:30:14,970
on the machine that has those keys so

00:30:11,910 --> 00:30:16,800
that's the state of play there I so I do

00:30:14,970 --> 00:30:18,870
have running here I don't know if

00:30:16,800 --> 00:30:20,220
anybody I don't know how how much

00:30:18,870 --> 00:30:22,860
anybody in the room has been actually

00:30:20,220 --> 00:30:25,740
poking around with efi james Bottomly

00:30:22,860 --> 00:30:31,950
blogged about and i wound up on l WN o

00:30:25,740 --> 00:30:34,620
pmf kind of qm you virtualized it based

00:30:31,950 --> 00:30:39,630
on Tiano and lets you play around with

00:30:34,620 --> 00:30:41,670
with UEFI in a vm i can demo that

00:30:39,630 --> 00:30:45,420
running here if there's interest I

00:30:41,670 --> 00:30:47,100
actually it's not a very polished demo

00:30:45,420 --> 00:30:51,600
but I can show you basically what the

00:30:47,100 --> 00:30:53,250
the menus with certain things so and

00:30:51,600 --> 00:30:54,720
while I'm setting that up your list is

00:30:53,250 --> 00:31:00,990
Steve continue talking about other

00:30:54,720 --> 00:31:03,330
things so in Debian do we want to do

00:31:00,990 --> 00:31:05,310
secure boot I've seen a number of

00:31:03,330 --> 00:31:08,010
opinion saying that we should just not

00:31:05,310 --> 00:31:09,810
play you know expect all the end users

00:31:08,010 --> 00:31:13,410
to actually disable secure boot if they

00:31:09,810 --> 00:31:15,180
want to install Debian is that a viable

00:31:13,410 --> 00:31:20,280
option is it something we would want to

00:31:15,180 --> 00:31:21,380
do so microphone I've got the mic okay

00:31:20,280 --> 00:31:24,230
felt

00:31:21,380 --> 00:31:25,880
but the the idea of getting a debian key

00:31:24,230 --> 00:31:29,090
in somewhere or getting a bootloader

00:31:25,880 --> 00:31:31,419
that trusts a whole bunch of distro keys

00:31:29,090 --> 00:31:34,340
I think that's a real problem because

00:31:31,419 --> 00:31:38,720
women to be allowing people downstream

00:31:34,340 --> 00:31:40,789
from us to do what we do that's the

00:31:38,720 --> 00:31:43,160
whole point of debian is that our

00:31:40,789 --> 00:31:45,919
derivatives get the same rights so we've

00:31:43,160 --> 00:31:49,400
got a thing in we don't allow people to

00:31:45,919 --> 00:31:52,669
do licenses specifically to Debian for

00:31:49,400 --> 00:31:54,260
free software and saying this key works

00:31:52,669 --> 00:31:58,120
but you can't make up your own in your

00:31:54,260 --> 00:32:01,909
bedroom it's pretty much the same thing

00:31:58,120 --> 00:32:05,000
so unless we can make it so that someone

00:32:01,909 --> 00:32:08,299
can download Debian create their own key

00:32:05,000 --> 00:32:11,260
using Debian software and somehow have

00:32:08,299 --> 00:32:14,750
it an equal class to the Debian key I

00:32:11,260 --> 00:32:16,520
think will have failed so that's why we

00:32:14,750 --> 00:32:20,960
shouldn't be setting up a list of

00:32:16,520 --> 00:32:25,580
trusted keys okay okay Mike down the

00:32:20,960 --> 00:32:27,140
front again I mean quick show of hands

00:32:25,580 --> 00:32:29,360
on the people here who thinks that we

00:32:27,140 --> 00:32:37,220
should do secure boot in some way and

00:32:29,360 --> 00:32:39,440
not just say no well as in before

00:32:37,220 --> 00:32:42,110
everyone answers that like is it

00:32:39,440 --> 00:32:44,990
possible that in some cases we will have

00:32:42,110 --> 00:32:49,760
to implement if you're good or good in

00:32:44,990 --> 00:32:51,620
build like is it is it a possibility

00:32:49,760 --> 00:32:56,260
that some day when OEM will not

00:32:51,620 --> 00:33:00,260
implement the disable secure boot thing

00:32:56,260 --> 00:33:02,600
it's like I in its famous that Microsoft

00:33:00,260 --> 00:33:06,289
doesn't want microphone why we're just

00:33:02,600 --> 00:33:10,490
going to hey sorry I read many many

00:33:06,289 --> 00:33:13,340
places that Microsoft will not allow om

00:33:10,490 --> 00:33:15,530
to disable secure boot on AR M

00:33:13,340 --> 00:33:20,090
processors so maybe we have no choice

00:33:15,530 --> 00:33:22,780
and we have to implement it no I would

00:33:20,090 --> 00:33:22,780
be down please

00:33:28,370 --> 00:33:34,200
Microsoft in their windows 8 logo

00:33:31,320 --> 00:33:37,410
requirements say that on any x86 based

00:33:34,200 --> 00:33:40,830
machine the OEM has to provide the

00:33:37,410 --> 00:33:43,020
switch to turn secure boot off yes there

00:33:40,830 --> 00:33:46,170
is no requirement that that switch is

00:33:43,020 --> 00:33:48,690
easy to find or well labeled or obvious

00:33:46,170 --> 00:33:51,180
in the BIOS configuration but to meet

00:33:48,690 --> 00:33:52,890
the windows 8 logo requirements as they

00:33:51,180 --> 00:33:56,040
are currently published Microsoft

00:33:52,890 --> 00:33:58,650
requires that the hardware OAM provide a

00:33:56,040 --> 00:34:00,570
switch to disable secure boot their

00:33:58,650 --> 00:34:02,820
motivation for this is actually very

00:34:00,570 --> 00:34:05,250
interesting because of course when does

00:34:02,820 --> 00:34:07,920
a tis the first version of Windows that

00:34:05,250 --> 00:34:10,290
can work with secure boot and so if you

00:34:07,920 --> 00:34:12,720
want manufacturers to continue producing

00:34:10,290 --> 00:34:14,909
hardware that can be used with older

00:34:12,720 --> 00:34:20,070
versions of Windows you have to have a

00:34:14,909 --> 00:34:22,409
way to turn off secure boot yep and so

00:34:20,070 --> 00:34:25,169
so one solution that we can have is that

00:34:22,409 --> 00:34:28,550
we tell all of our users find the switch

00:34:25,169 --> 00:34:31,020
turn off secure boot and ignore it but

00:34:28,550 --> 00:34:33,149
the problem is if you turn that switch

00:34:31,020 --> 00:34:35,610
off and you have a dual boot machine and

00:34:33,149 --> 00:34:38,070
you want to use secure boot to boot

00:34:35,610 --> 00:34:40,500
windows then you've got that problem of

00:34:38,070 --> 00:34:42,419
the switch has to be one way for one and

00:34:40,500 --> 00:34:44,010
one for the other yep you've also got

00:34:42,419 --> 00:34:45,300
the situation where potentially

00:34:44,010 --> 00:34:47,220
especially in bigger corporate

00:34:45,300 --> 00:34:49,200
environments soonest and that is going

00:34:47,220 --> 00:34:51,690
to be that you will not be allowed to

00:34:49,200 --> 00:34:54,390
turn off secure boot unless this has

00:34:51,690 --> 00:34:57,690
changed what I read is that that switch

00:34:54,390 --> 00:35:00,260
it's men that battery Microsoft says

00:34:57,690 --> 00:35:00,260
it's mandatory

00:35:00,740 --> 00:35:09,890
carry on please quick for a 386 but it

00:35:05,820 --> 00:35:13,020
shouldn't be there for a RM yes correct

00:35:09,890 --> 00:35:15,300
so in the case of a RM we have to

00:35:13,020 --> 00:35:17,670
implement it no choice right no not at

00:35:15,300 --> 00:35:20,130
all no because Microsoft doesn't control

00:35:17,670 --> 00:35:22,230
the market of arm hardware that comes

00:35:20,130 --> 00:35:24,360
out and the only requirement is that if

00:35:22,230 --> 00:35:26,940
you have a piece of iron hardware that

00:35:24,360 --> 00:35:29,010
you want to put the Windows logo logo on

00:35:26,940 --> 00:35:30,930
then it has to comply with these these

00:35:29,010 --> 00:35:34,050
criteria but anybody who's making arm

00:35:30,930 --> 00:35:35,160
devices that are not intended for to

00:35:34,050 --> 00:35:36,310
ship with Windows on them and there are

00:35:35,160 --> 00:35:39,720
many out there

00:35:36,310 --> 00:35:42,190
it's not an issue at all the question is

00:35:39,720 --> 00:35:45,670
the immediate effect is it makes a

00:35:42,190 --> 00:35:47,440
Windows Phone much less interesting as a

00:35:45,670 --> 00:35:51,370
device you might want to purchase to

00:35:47,440 --> 00:35:54,010
hack on but it doesn't immediately mean

00:35:51,370 --> 00:36:01,740
that you can't get free arm hardware to

00:35:54,010 --> 00:36:04,420
hack on yeah so if I read you correctly

00:36:01,740 --> 00:36:06,430
what happens when the market share of

00:36:04,420 --> 00:36:08,050
those old versions of windows decreases

00:36:06,430 --> 00:36:15,820
to the point where they no longer need

00:36:08,050 --> 00:36:17,380
the switch feature well exactly we will

00:36:15,820 --> 00:36:19,840
either have demonstrated that there's

00:36:17,380 --> 00:36:22,000
enough market share of non Windows

00:36:19,840 --> 00:36:23,830
operating systems that the OEMs will

00:36:22,000 --> 00:36:27,280
naturally want to keep the switch

00:36:23,830 --> 00:36:29,470
available or we will have all figured

00:36:27,280 --> 00:36:31,690
out how to make our operating systems

00:36:29,470 --> 00:36:34,030
food when the switch is turned on or

00:36:31,690 --> 00:36:37,030
we'll buy hardware from other vendors

00:36:34,030 --> 00:36:43,950
yeah what aids out his hand up for about

00:36:37,030 --> 00:36:47,790
five minutes so this this question of

00:36:43,950 --> 00:36:50,290
derivatives that Phil mentions is

00:36:47,790 --> 00:36:51,490
certainly very important and it's a key

00:36:50,290 --> 00:36:55,450
thing that we've been trying to do in

00:36:51,490 --> 00:36:59,680
Debian forever another thing that we've

00:36:55,450 --> 00:37:04,570
been trying to do is provide convenient

00:36:59,680 --> 00:37:07,570
access to non free stuff as a kind of

00:37:04,570 --> 00:37:11,890
sideline and it seems to me that this

00:37:07,570 --> 00:37:15,960
might be a way out of this dilemma to

00:37:11,890 --> 00:37:18,250
treat signed you know to treat signed

00:37:15,960 --> 00:37:21,580
firmware signed bootloader whatever it

00:37:18,250 --> 00:37:24,070
is that we have made with a key that we

00:37:21,580 --> 00:37:28,450
can't share with anybody as a non free

00:37:24,070 --> 00:37:31,600
item and if we do that they do that you

00:37:28,450 --> 00:37:33,520
can serve we can we can you know that is

00:37:31,600 --> 00:37:39,580
the traditional compromise that we have

00:37:33,520 --> 00:37:41,440
made to to try to support both users and

00:37:39,580 --> 00:37:43,900
derivatives as best we can

00:37:41,440 --> 00:37:46,630
sure it's an option but at that point of

00:37:43,900 --> 00:37:48,580
course our standard boot media will

00:37:46,630 --> 00:37:48,880
never work with secure boot it's a it's

00:37:48,580 --> 00:37:52,630
calm

00:37:48,880 --> 00:37:53,920
yet what I was Steve getting on yeah I

00:37:52,630 --> 00:37:55,900
can I can run through a demo here

00:37:53,920 --> 00:38:00,390
basically this there's just some hacky

00:37:55,900 --> 00:38:04,869
scripts around qmu KVM at the moment

00:38:00,390 --> 00:38:08,589
this is the script to launch based on

00:38:04,869 --> 00:38:11,710
OPM f as the firmware let's see here if

00:38:08,589 --> 00:38:15,490
I can point at some oh yeah so basically

00:38:11,710 --> 00:38:17,650
you pass it in a device HDB fat : SP -

00:38:15,490 --> 00:38:19,630
Keys which is it takes a directory that

00:38:17,650 --> 00:38:22,240
you have your firmware keys on that you

00:38:19,630 --> 00:38:26,950
want to load in and and makes that show

00:38:22,240 --> 00:38:29,799
up as a fat file system - under qemu the

00:38:26,950 --> 00:38:31,480
- l there tells it where to look for its

00:38:29,799 --> 00:38:33,339
BIOS and points it at the current

00:38:31,480 --> 00:38:36,519
directory those are the key things there

00:38:33,339 --> 00:38:38,980
the rest is just various switches to

00:38:36,519 --> 00:38:41,380
community to different things this has

00:38:38,980 --> 00:38:43,059
been this is this is being cargo cult it

00:38:41,380 --> 00:38:44,680
a bit from some other people that that

00:38:43,059 --> 00:38:47,950
I've been working with on this at the

00:38:44,680 --> 00:38:55,480
moment let's you know so there's that

00:38:47,950 --> 00:38:59,109
script there's also a script - there's a

00:38:55,480 --> 00:39:00,579
Python expect script which actually

00:38:59,109 --> 00:39:01,900
configuring a machine for sick either

00:39:00,579 --> 00:39:03,220
you have to go through quite a bit of

00:39:01,900 --> 00:39:06,160
firmware so the fact that we have a

00:39:03,220 --> 00:39:08,349
firmware that happens to back-end on -

00:39:06,160 --> 00:39:10,480
effectively a serial console makes it

00:39:08,349 --> 00:39:12,130
nice to jam this in at runtime because

00:39:10,480 --> 00:39:16,450
apparently I don't know if it's supposed

00:39:12,130 --> 00:39:18,789
to work or not but saving the NVRAM

00:39:16,450 --> 00:39:20,289
variables so they're persistent across

00:39:18,789 --> 00:39:21,940
boots doesn't seem to be working I don't

00:39:20,289 --> 00:39:23,380
know why I don't know if that's just not

00:39:21,940 --> 00:39:25,630
implemented in OB Emma for whatever so

00:39:23,380 --> 00:39:32,220
this is a script that I've I've run each

00:39:25,630 --> 00:39:32,220
time on boot so let me see here

00:39:46,589 --> 00:39:52,329
so yeah the VM has been started and it's

00:39:50,380 --> 00:39:54,310
it stopped and that seems to have

00:39:52,329 --> 00:39:56,500
actually be a bug of some kind of my

00:39:54,310 --> 00:39:59,050
setup which I don't understand yet so

00:39:56,500 --> 00:40:02,040
actually I will trigger it into running

00:39:59,050 --> 00:40:08,410
by throwing this init machine script at

00:40:02,040 --> 00:40:10,839
the TTY which will cause it to start

00:40:08,410 --> 00:40:12,790
doing things and that's I'm running the

00:40:10,839 --> 00:40:15,280
script this time just to give it input

00:40:12,790 --> 00:40:17,050
on the console so that it unstopped

00:40:15,280 --> 00:40:20,380
which I haven't figured out why that's

00:40:17,050 --> 00:40:25,619
necessary but here you see it attempting

00:40:20,380 --> 00:40:28,000
to and then failing to actually find any

00:40:25,619 --> 00:40:29,950
find anything to boot so it's it's

00:40:28,000 --> 00:40:33,220
dropped you to a firmware shell prompt

00:40:29,950 --> 00:40:36,099
which is kind of - shell like in this

00:40:33,220 --> 00:40:38,349
case we're gonna just do an exit and you

00:40:36,099 --> 00:40:39,860
get this bios kind of configuration

00:40:38,349 --> 00:40:41,400
looking thing

00:40:39,860 --> 00:40:46,359
[Music]

00:40:41,400 --> 00:40:48,280
pretty simple boot manager it shows you

00:40:46,359 --> 00:40:50,730
the list of devices that can see escape

00:40:48,280 --> 00:40:55,329
out of that boot maintenance manager

00:40:50,730 --> 00:40:56,859
boot options whatnot and the the device

00:40:55,329 --> 00:41:00,550
manager is actually where the secure

00:40:56,859 --> 00:41:01,869
boot is configured and so rather than

00:41:00,550 --> 00:41:03,700
drilling down into this manually

00:41:01,869 --> 00:41:06,310
although it you know it's various

00:41:03,700 --> 00:41:10,240
settings of different kinds of keys I'm

00:41:06,310 --> 00:41:13,420
going to reset here and then run the

00:41:10,240 --> 00:41:15,250
script again which is going to using

00:41:13,420 --> 00:41:16,839
expect is going to drive your firmware

00:41:15,250 --> 00:41:22,329
which is kind of a funny thing to look

00:41:16,839 --> 00:41:24,040
at and there it goes

00:41:22,329 --> 00:41:27,099
so now what we get if we hit continue

00:41:24,040 --> 00:41:29,260
here what that's done is it has loaded

00:41:27,099 --> 00:41:32,140
into the interesting that it failed it's

00:41:29,260 --> 00:41:34,619
kind of sometimes it likes me and

00:41:32,140 --> 00:41:34,619
sometimes it doesn't

00:41:35,010 --> 00:41:42,990
sorry yeah yeah exactly so we will walk

00:41:39,910 --> 00:41:46,440
the tree manually here fs0

00:41:42,990 --> 00:41:46,440
filesystem zeros

00:41:58,250 --> 00:42:01,310
actually the fact that it failed and

00:41:59,930 --> 00:42:03,080
didn't autoboot means I can show you

00:42:01,310 --> 00:42:04,910
what happens if you try what I've done

00:42:03,080 --> 00:42:07,040
with that script is it has grabbed out

00:42:04,910 --> 00:42:09,620
of that directory the the local test

00:42:07,040 --> 00:42:12,230
Keys that I've generated for myself and

00:42:09,620 --> 00:42:15,080
loaded them into the Keck and the DB and

00:42:12,230 --> 00:42:17,270
the I think even the platform key so

00:42:15,080 --> 00:42:19,820
that those are the only keys that this

00:42:17,270 --> 00:42:27,110
instance of the firmware trusts so now

00:42:19,820 --> 00:42:28,460
if I try to run boot x64 efi oh I picked

00:42:27,110 --> 00:42:29,720
the wrong one so I don't actually get to

00:42:28,460 --> 00:42:31,100
show you the demo without having to

00:42:29,720 --> 00:42:33,800
reboot it again anyway so this is

00:42:31,100 --> 00:42:35,270
actually the signed copy of EPI Linux

00:42:33,800 --> 00:42:36,740
that's that I've locally signed the

00:42:35,270 --> 00:42:38,810
binary with the same key that I also

00:42:36,740 --> 00:42:40,040
shoved into the firmware and so we've

00:42:38,810 --> 00:42:43,330
got an EFI Linux that gives you a boot

00:42:40,040 --> 00:42:47,870
menu and this this efi Linux does no

00:42:43,330 --> 00:42:49,670
verification of kernels this is it just

00:42:47,870 --> 00:42:51,850
has it's been patched to have a menu

00:42:49,670 --> 00:42:57,920
which efi linux upstream does not have

00:42:51,850 --> 00:43:01,730
and it Wow

00:42:57,920 --> 00:43:03,560
really demo syndrome today but it's

00:43:01,730 --> 00:43:05,840
meant to go ahead and boot off of the

00:43:03,560 --> 00:43:11,110
disk of everything why we all know very

00:43:05,840 --> 00:43:20,090
very close to out of time two questions

00:43:11,110 --> 00:43:22,660
ok what Fadem however would go and we

00:43:20,090 --> 00:43:22,660
don't have a mic

00:43:36,130 --> 00:43:46,269
Joe Joe Joe turn around yell it quickly

00:43:43,819 --> 00:43:46,269
go

00:43:53,960 --> 00:44:01,290
well yeah unfortunately yeah okay you're

00:43:58,800 --> 00:44:04,260
right I haven't been able to ask

00:44:01,290 --> 00:44:05,790
I'm just bear with me folks

00:44:04,260 --> 00:44:08,310
yes you're right you're saying that I

00:44:05,790 --> 00:44:10,320
haven't told you about the alternatives

00:44:08,310 --> 00:44:12,090
to boycotting see people secure boot I

00:44:10,320 --> 00:44:14,130
was hoping to get there but we really

00:44:12,090 --> 00:44:17,450
have run out of time this is this is

00:44:14,130 --> 00:44:21,710
what I'm at where I'm hoping to work out

00:44:17,450 --> 00:44:24,060
that's basically what I've just done I

00:44:21,710 --> 00:44:26,280
would like us to actually make the

00:44:24,060 --> 00:44:28,950
decision about do we go where do we say

00:44:26,280 --> 00:44:32,550
no to secure boot do we do something

00:44:28,950 --> 00:44:35,130
like a bump to of go with in something

00:44:32,550 --> 00:44:37,770
that has been signed once that will then

00:44:35,130 --> 00:44:39,450
happily run whatever we tell it to do we

00:44:37,770 --> 00:44:40,950
go for something like fedora where we

00:44:39,450 --> 00:44:44,150
end up having to sign everything down

00:44:40,950 --> 00:44:47,610
the chain do we do something else I'm

00:44:44,150 --> 00:44:51,060
hoping to work out with people here what

00:44:47,610 --> 00:44:58,800
we would like to do but yeah we've been

00:44:51,060 --> 00:45:00,750
sidetracked Joe microphone to the

00:44:58,800 --> 00:45:03,060
difference between Ubuntu and fedora

00:45:00,750 --> 00:45:06,810
strategies seems to be also be based on

00:45:03,060 --> 00:45:08,940
legal advice yes so if we decide that we

00:45:06,810 --> 00:45:12,030
if in the case that we decide we don't

00:45:08,940 --> 00:45:14,160
boycott secure book then before doing

00:45:12,030 --> 00:45:20,520
anything technical we should get some

00:45:14,160 --> 00:45:23,780
legal advice it's it's not yes we should

00:45:20,520 --> 00:45:23,780
probably get legal advice too

00:45:24,600 --> 00:45:30,060
this is gonna be something that's gonna

00:45:26,070 --> 00:45:35,060
have to come up but here are the

00:45:30,060 --> 00:45:35,060
question over here first No

00:45:35,510 --> 00:45:39,000
so just as an aside here

00:45:37,560 --> 00:45:41,940
I don't know that today we actually

00:45:39,000 --> 00:45:45,060
support booting in in EFI mode on the

00:45:41,940 --> 00:45:46,470
CDs on any Hardware on on xt6 so that's

00:45:45,060 --> 00:45:49,370
something that regardless of whether a

00:45:46,470 --> 00:45:51,900
Debian decides to implement secure boot

00:45:49,370 --> 00:45:52,680
efi is the firmware of the future on PCs

00:45:51,900 --> 00:45:54,090
one way or the other

00:45:52,680 --> 00:45:55,980
yeah absolutely we're not gonna have

00:45:54,090 --> 00:45:57,720
BIOS boot as an option on these machines

00:45:55,980 --> 00:45:59,370
once they come out so even if even if

00:45:57,720 --> 00:46:01,410
the plan is you have to disable secure

00:45:59,370 --> 00:46:04,830
boot we've got to implement FP support

00:46:01,410 --> 00:46:07,020
in in window era in in Debian installer

00:46:04,830 --> 00:46:09,500
and Debian CD or whatever and I'm told

00:46:07,020 --> 00:46:09,500
the times up

00:46:20,630 --> 00:46:24,869
okay inner suggesting that we should

00:46:23,099 --> 00:46:27,809
instead of calling it secure boot to be

00:46:24,869 --> 00:46:34,319
calling it restricted boot that yeah by

00:46:27,809 --> 00:46:35,880
all means feel free to do that I'm using

00:46:34,319 --> 00:46:40,410
the name that other people have given it

00:46:35,880 --> 00:46:48,359
it's not our technology correct it's

00:46:40,410 --> 00:46:51,119
their spin yes agreed but times up today

00:46:48,359 --> 00:46:53,039
thank you for coming I was

00:46:51,119 --> 00:46:54,690
please continue there was some

00:46:53,039 --> 00:47:01,440
discussion already started about this on

00:46:54,690 --> 00:47:04,069
Debian developer - least are

00:47:01,440 --> 00:47:07,589
implementing things I'm hoping to get

00:47:04,069 --> 00:47:08,009
EFI boot working at some level for

00:47:07,589 --> 00:47:09,809
Weezie

00:47:08,009 --> 00:47:11,549
even if we don't get secure boot or

00:47:09,809 --> 00:47:15,480
restricted boot or anything like it

00:47:11,549 --> 00:47:17,970
working we still have a basic work below

00:47:15,480 --> 00:47:19,750
that level to do yet thank you for

00:47:17,970 --> 00:47:24,789
coming folks

00:47:19,750 --> 00:47:24,789

YouTube URL: https://www.youtube.com/watch?v=fWJeDYGogPI


