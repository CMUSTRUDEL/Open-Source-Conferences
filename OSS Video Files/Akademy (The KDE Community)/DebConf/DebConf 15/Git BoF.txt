Title: Git BoF
Publication date: 2017-12-03
Playlist: DebConf 15
Description: 
	by Richard Hartmann

At: DebConf15
https://summit.debconf.org/debconf15/meeting/203/git-bof/
https://debconf15.debconf.org/

How do you use Git for code, personal files, and Debian?

Room: Amsterdam
Scheduled start: 2015-08-16 15:30:00
Captions: 
	00:00:00,000 --> 00:01:50,960
okay so two of you wants to share any

00:02:06,310 --> 00:02:16,209
anything anything you like

00:02:48,310 --> 00:02:54,799
yeah kids bill package still scared

00:02:51,970 --> 00:02:58,160
package pop in the same room so there's

00:02:54,799 --> 00:02:58,849
two more hours of it's great I can only

00:02:58,160 --> 00:03:02,530
with a minute

00:02:58,849 --> 00:03:06,489
it works very well I do nothing else

00:03:02,530 --> 00:03:06,489
really really simple easy

00:03:23,800 --> 00:03:26,869
[Music]

00:04:03,239 --> 00:04:08,349
is also quite nice for for having

00:04:05,859 --> 00:04:11,370
centralized backup service because

00:04:08,349 --> 00:04:14,829
obviously you have proper backup should

00:04:11,370 --> 00:04:16,750
hopefully most of us do yet when you

00:04:14,829 --> 00:04:18,340
just need to really find the same

00:04:16,750 --> 00:04:21,880
machine or just want to clone it

00:04:18,340 --> 00:04:24,970
relatively quickly without having a full

00:04:21,880 --> 00:04:30,639
puppet or whatever setup it's quite easy

00:04:24,970 --> 00:04:32,650
to just know the configuration to two

00:04:30,639 --> 00:04:35,169
years side to side just set a vending

00:04:32,650 --> 00:04:38,229
machine tone it back there change a few

00:04:35,169 --> 00:04:41,139
settings bring it up the machine within

00:04:38,229 --> 00:04:47,349
minutes quite useful obviously you need

00:04:41,139 --> 00:04:51,240
to copy all the data sure sorry EGC

00:04:47,349 --> 00:04:54,970
keepers very very handy when you well

00:04:51,240 --> 00:04:57,070
not only for for for fixing things but

00:04:54,970 --> 00:04:59,440
also for redeploying if you don't have

00:04:57,070 --> 00:05:03,970
very large well you're on automated

00:04:59,440 --> 00:05:07,599
system for deployment anywhere else you

00:05:03,970 --> 00:05:08,410
were first we are using we're using

00:05:07,599 --> 00:05:12,039
saltstack

00:05:08,410 --> 00:05:16,539
and recast for configuring machines and

00:05:12,039 --> 00:05:18,550
we've set up an inner circle and we we

00:05:16,539 --> 00:05:22,659
are a kind of people and it's it's

00:05:18,550 --> 00:05:27,159
really it makes fun doing the requests

00:05:22,659 --> 00:05:30,910
and all that stuff using it so I can

00:05:27,159 --> 00:05:38,680
really recommend it and if not as well

00:05:30,910 --> 00:05:40,420
as a having kid left as a backup for

00:05:38,680 --> 00:05:42,910
your for your configuration stuff makes

00:05:40,420 --> 00:05:45,070
easier for non-technical people to also

00:05:42,910 --> 00:05:46,780
have a look they so if management comes

00:05:45,070 --> 00:05:49,000
along you can showcase this shiny thing

00:05:46,780 --> 00:06:03,970
here just click around and you will see

00:05:49,000 --> 00:06:33,130
what we are doing this way you get fresh

00:06:03,970 --> 00:06:36,280
here to raise that thing's not saucepan

00:06:33,130 --> 00:06:38,170
get kept in get I hope every single one

00:06:36,280 --> 00:06:40,570
of them keeps a lot of things that you

00:06:38,170 --> 00:06:43,240
do during the day keep record of things

00:06:40,570 --> 00:06:45,790
you learned so on I find that keeping

00:06:43,240 --> 00:06:48,760
that ingot it's a really handy way to be

00:06:45,790 --> 00:06:51,160
able to grab the things stuff very

00:06:48,760 --> 00:06:53,800
quickly without needing additional than

00:06:51,160 --> 00:06:56,050
unusual tools but what exactly we mean

00:06:53,800 --> 00:06:58,510
by keeping a lot of just having a text

00:06:56,050 --> 00:07:00,940
file which is just I use I haven't used

00:06:58,510 --> 00:07:04,780
a text file third day okay the kick

00:07:00,940 --> 00:07:06,880
that's I carry actions across I keep a

00:07:04,780 --> 00:07:08,800
log of what I'm doing if you belong to

00:07:06,880 --> 00:07:11,620
the conversations that I can have any

00:07:08,800 --> 00:07:13,300
and it just provides a

00:07:11,620 --> 00:07:16,570
single place and then all of the get

00:07:13,300 --> 00:07:19,000
tools for looking through code bases

00:07:16,570 --> 00:07:23,910
organizing code bases and so on give you

00:07:19,000 --> 00:07:23,910
an advantage just in the daily records

00:07:24,240 --> 00:07:32,590
reusing the tools which are implemented

00:07:28,710 --> 00:07:35,850
because obviously you can leverage a lot

00:07:32,590 --> 00:07:39,030
of tools and a lot of workflows which

00:07:35,850 --> 00:07:43,090
have already been polished very very

00:07:39,030 --> 00:07:46,870
which is already them which have already

00:07:43,090 --> 00:07:52,990
been polished to a very high level which

00:07:46,870 --> 00:07:55,240
means yeah use quite as well as

00:07:52,990 --> 00:08:02,650
workflows for areas where you normally

00:07:55,240 --> 00:08:05,790
wouldn't have any tools yeah another

00:08:02,650 --> 00:08:08,760
thing I'm going to intend to use I'm not

00:08:05,790 --> 00:08:14,350
completely using it right now is

00:08:08,760 --> 00:08:16,180
deploying and configuration with it so I

00:08:14,350 --> 00:08:23,670
mean configuration it's managed packet

00:08:16,180 --> 00:08:23,670
and get hook can then execute as stuff

00:08:24,330 --> 00:08:30,330
it's mostly larger from its

00:08:30,420 --> 00:08:37,680
wanted to a consecration its value to it

00:08:33,180 --> 00:08:42,410
and little quips then the used to

00:08:37,680 --> 00:08:46,610
execute change management centralized

00:08:42,410 --> 00:08:46,610
yeah I'm so

00:08:49,910 --> 00:09:06,620
anymore benchmark of Home Dashboard for

00:09:04,370 --> 00:09:10,670
a rather large or chickens cackle final

00:09:06,620 --> 00:09:12,500
so bogus builds every single good commit

00:09:10,670 --> 00:09:14,390
that comes in and produces a lot fun

00:09:12,500 --> 00:09:17,090
it's just the build lock me all the day

00:09:14,390 --> 00:09:18,380
does somehow hospital so I'm stalling

00:09:17,090 --> 00:09:26,450
these still box and I'll need to move

00:09:18,380 --> 00:09:29,330
them to the place where I'm putting all

00:09:26,450 --> 00:09:41,780
the logs in to get repository with hash

00:09:29,330 --> 00:09:43,760
dot text processing atomic and turned

00:09:41,780 --> 00:09:47,330
out that because the dose works of other

00:09:43,760 --> 00:09:49,310
large already and doing that could

00:09:47,330 --> 00:09:51,770
commit another reactor project and

00:09:49,310 --> 00:09:53,750
historically I get a git repository that

00:09:51,770 --> 00:09:54,910
happens to have I've checked both sides

00:09:53,750 --> 00:09:59,000
of 16-gigabyte

00:09:54,910 --> 00:10:00,560
there's kind of annoying it was first

00:09:59,000 --> 00:10:03,230
annoying on the server side there was

00:10:00,560 --> 00:10:05,800
reading so what if there was I'm not

00:10:03,230 --> 00:10:11,180
actually checking out the repository

00:10:05,800 --> 00:10:13,610
repository and I changed my build tool

00:10:11,180 --> 00:10:15,800
to read the files directly from that

00:10:13,610 --> 00:10:22,700
they are repository basically using get

00:10:15,800 --> 00:10:24,710
so far named that works and even the

00:10:22,700 --> 00:10:26,510
case that the build system in the

00:10:24,710 --> 00:10:31,550
Salazar that takes the box and uses with

00:10:26,510 --> 00:10:33,710
an HTML output Alamos whether there's

00:10:31,550 --> 00:10:35,030
some kind of dependency tracking make

00:10:33,710 --> 00:10:36,380
like mob chickens out and I must make

00:10:35,030 --> 00:10:37,160
directly but something bit more

00:10:36,380 --> 00:10:40,340
sophisticated

00:10:37,160 --> 00:10:42,440
where you can customize what did things

00:10:40,340 --> 00:10:44,060
like the checks it has to do to see

00:10:42,440 --> 00:10:46,580
something updated so thanks for using

00:10:44,060 --> 00:10:50,330
the gif commit to see if maybe I did a

00:10:46,580 --> 00:10:52,040
rear ender locks so you can hook into a

00:10:50,330 --> 00:10:55,370
get too

00:10:52,040 --> 00:10:58,940
kind of programming to get a better idea

00:10:55,370 --> 00:11:01,760
about changes and when things exactly

00:10:58,940 --> 00:11:04,010
changed then five steps because they

00:11:01,760 --> 00:11:05,800
might be off because you're being

00:11:04,010 --> 00:11:08,000
spoiled everything

00:11:05,800 --> 00:11:09,980
so the client-side us off the problem

00:11:08,000 --> 00:11:14,060
with the size using a very obscure new

00:11:09,980 --> 00:11:17,540
feature of kit very new it's check out

00:11:14,060 --> 00:11:19,160
so they lost to target well I am on time

00:11:17,540 --> 00:11:21,980
to check out of this repository but

00:11:19,160 --> 00:11:23,810
please don't bother with these files and

00:11:21,980 --> 00:11:27,140
I tell it to please send both of it

00:11:23,810 --> 00:11:28,100
alright so this means a ton of any of

00:11:27,140 --> 00:11:30,950
the files checked out

00:11:28,100 --> 00:11:33,080
I can still add files and if I run them

00:11:30,950 --> 00:11:35,450
get to check out it'll make them

00:11:33,080 --> 00:11:41,330
disappear so it's like like hope you can

00:11:35,450 --> 00:11:43,310
throw pfizer so now it's only 600

00:11:41,330 --> 00:11:45,140
megabytes because get us good at

00:11:43,310 --> 00:11:53,570
compressing across files and the good

00:11:45,140 --> 00:11:54,800
looks are of course very yeah I guess

00:11:53,570 --> 00:11:57,500
people thought I guess I should have

00:11:54,800 --> 00:11:59,420
used some kind of caching directory name

00:11:57,500 --> 00:12:05,630
scheme then just put the hash in the

00:11:59,420 --> 00:12:08,260
file name but rather the first name yeah

00:12:05,630 --> 00:12:15,950
that's a good at Houston

00:12:08,260 --> 00:12:19,910
have you tried to replace comment so you

00:12:15,950 --> 00:12:21,650
just have one block in one commit and

00:12:19,910 --> 00:12:24,800
then use that and then use the git

00:12:21,650 --> 00:12:27,380
history to browse well I still don't

00:12:24,800 --> 00:12:30,770
indexed into a thing last thing is now I

00:12:27,380 --> 00:12:35,090
can for any given get commit off of the

00:12:30,770 --> 00:12:37,700
project I can just go to github and use

00:12:35,090 --> 00:12:40,300
it you know into github that gives me

00:12:37,700 --> 00:12:44,440
that file so I think it also a bigger

00:12:40,300 --> 00:12:44,440
hosting all the good looks for people

00:12:49,050 --> 00:13:30,220
because they are so actually want to

00:13:27,430 --> 00:13:32,580
shoot focus something just not so much

00:13:30,220 --> 00:13:35,080
about versa versioning but more about

00:13:32,580 --> 00:13:37,540
controlled data exchange what's the

00:13:35,080 --> 00:13:39,660
scenario so in my corporate environment

00:13:37,540 --> 00:13:42,580
I have separated networks for the

00:13:39,660 --> 00:13:44,200
production and development and testing

00:13:42,580 --> 00:13:47,170
environment and there has tweaked

00:13:44,200 --> 00:13:50,170
regulations not to establish any kind of

00:13:47,170 --> 00:13:52,330
automated connection between both so of

00:13:50,170 --> 00:13:54,490
course that's not that bad in the first

00:13:52,330 --> 00:13:56,740
place but there are situations where you

00:13:54,490 --> 00:13:59,080
want to share data somewhere for example

00:13:56,740 --> 00:14:00,790
you do an analysis and a production take

00:13:59,080 --> 00:14:02,410
your notes and want to transfer it to

00:14:00,790 --> 00:14:04,990
development network to make a close

00:14:02,410 --> 00:14:06,610
analysis then document your solution

00:14:04,990 --> 00:14:08,950
there to thrive in the production

00:14:06,610 --> 00:14:10,840
environment may be such things so of

00:14:08,950 --> 00:14:12,880
course you can always put it on a USB

00:14:10,840 --> 00:14:14,830
stick and then you have this floppy disk

00:14:12,880 --> 00:14:16,480
feeling from 20 years ago you never know

00:14:14,830 --> 00:14:19,540
what is the current version and where is

00:14:16,480 --> 00:14:22,300
the most actual most current version

00:14:19,540 --> 00:14:25,270
continued from but one solution is to

00:14:22,300 --> 00:14:27,450
have hid repository on a dedicated USB

00:14:25,270 --> 00:14:30,490
stick but it can even cook that if you

00:14:27,450 --> 00:14:33,850
have some paranoia and then you can have

00:14:30,490 --> 00:14:35,890
some kind of controlled data exchange

00:14:33,850 --> 00:14:39,010
via USB stick with a keep on top of it

00:14:35,890 --> 00:14:41,230
and with a small script wrapper you can

00:14:39,010 --> 00:14:43,840
even automate it that you get the shell

00:14:41,230 --> 00:14:46,270
prompt not before this you

00:14:43,840 --> 00:14:48,610
fisting is properly unmounted and then

00:14:46,270 --> 00:14:50,950
you don't run into all those little guys

00:14:48,610 --> 00:14:53,500
issues there so it's I've found it quite

00:14:50,950 --> 00:14:56,200
convenient just to work around such

00:14:53,500 --> 00:14:59,590
regulations and the point is with gift I

00:14:56,200 --> 00:15:01,330
can always argument that well it's a

00:14:59,590 --> 00:15:03,340
controlled data exchange there are not

00:15:01,330 --> 00:15:05,230
nasty sinker seams going on because I

00:15:03,340 --> 00:15:07,690
can always control it we reduce to me

00:15:05,230 --> 00:15:11,340
that's not bad things are injected into

00:15:07,690 --> 00:15:11,340
little production or something like that

00:15:16,290 --> 00:15:25,180
well it is well you can encrypt with

00:15:22,420 --> 00:15:27,280
some paranoia you can also to sign your

00:15:25,180 --> 00:15:30,130
change sets if you like would be an

00:15:27,280 --> 00:15:31,660
extension I personally come to this just

00:15:30,130 --> 00:15:39,820
to pick up the encryption part and I

00:15:31,660 --> 00:15:42,520
know you plain text local local storage

00:15:39,820 --> 00:15:45,640
and encrypted backend with clean smart

00:15:42,520 --> 00:15:48,790
filters which basically are scripts

00:15:45,640 --> 00:15:51,490
which run arbitrary code on everything

00:15:48,790 --> 00:15:53,620
you put into it or you get out of it

00:15:51,490 --> 00:15:56,590
which allows you to just hook into the

00:15:53,620 --> 00:15:58,090
TBG or whatever to find things on you

00:15:56,590 --> 00:15:59,440
pin your local check out but everything

00:15:58,090 --> 00:16:02,470
on the server side or everything in the

00:15:59,440 --> 00:16:04,780
barrack master it is encrypted or even

00:16:02,470 --> 00:16:08,290
other nonverbal countries as long as you

00:16:04,780 --> 00:16:10,540
don't have the key there is get g crypt

00:16:08,290 --> 00:16:12,130
in the meantime which kind of does away

00:16:10,540 --> 00:16:15,040
with most of the hackery

00:16:12,130 --> 00:16:16,810
so if you have any any use cases where

00:16:15,040 --> 00:16:18,910
you do want a nice gift but store it in

00:16:16,810 --> 00:16:22,820
nunchuck long trusted environments I

00:16:18,910 --> 00:16:29,540
suggest people to get secret

00:16:22,820 --> 00:16:37,820
but what useful sometimes like to cross

00:16:29,540 --> 00:16:58,220
the question every huge get to revision

00:16:37,820 --> 00:17:00,620
control release that software never make

00:16:58,220 --> 00:17:02,240
using so you've got get stopped wearing

00:17:00,620 --> 00:17:06,400
it if you've never released that

00:17:02,240 --> 00:17:11,840
software you can be handout if you never

00:17:06,400 --> 00:17:14,870
tagged that release but you have now if

00:17:11,840 --> 00:17:19,340
you never used an annotated attack to

00:17:14,870 --> 00:17:22,340
take that release and if you never

00:17:19,340 --> 00:17:25,130
signed that annotated tag put your hand

00:17:22,340 --> 00:17:33,680
out everyone with your hands up thank

00:17:25,130 --> 00:17:35,630
you very much it has the facility when

00:17:33,680 --> 00:17:38,210
you tag something do not just go I'll

00:17:35,630 --> 00:17:40,370
make another bet the points document but

00:17:38,210 --> 00:17:43,520
you can include metadata about that

00:17:40,370 --> 00:17:54,140
commit annotating your tag you should do

00:17:43,520 --> 00:17:57,170
that and you should also do some

00:17:54,140 --> 00:17:59,870
production scripts for where I actually

00:17:57,170 --> 00:18:01,880
have well not also the release

00:17:59,870 --> 00:18:04,510
management in the native repository

00:18:01,880 --> 00:18:07,090
where actually automatically commit

00:18:04,510 --> 00:18:10,700
everything and have the annotated

00:18:07,090 --> 00:18:14,480
actually I know everything is ok I built

00:18:10,700 --> 00:18:17,600
that and that because since the the

00:18:14,480 --> 00:18:20,840
deployment is controlled by input

00:18:17,600 --> 00:18:22,940
tighter with a list I actually have it

00:18:20,840 --> 00:18:24,740
everything in the list ready I build it

00:18:22,940 --> 00:18:30,190
that Dan and Dan and day before that

00:18:24,740 --> 00:18:30,190
customer it's quite useful yeah

00:18:36,440 --> 00:18:41,849
particularly what I was trying to get at

00:18:39,059 --> 00:18:45,509
is the tracing where software has come

00:18:41,849 --> 00:18:47,759
from becomes much much easier when you

00:18:45,509 --> 00:18:51,269
can find verify cryptographically

00:18:47,759 --> 00:18:53,190
verifiable points to trace from and one

00:18:51,269 --> 00:18:55,859
of the big things that we do at work is

00:18:53,190 --> 00:19:00,509
we try to do completely reproducible

00:18:55,859 --> 00:19:03,509
system builds using everything driven

00:19:00,509 --> 00:19:06,299
from get so if we can start from a sign

00:19:03,509 --> 00:19:08,969
annotated tag of a commit of a set of

00:19:06,299 --> 00:19:10,589
definitions that point it shall sums of

00:19:08,969 --> 00:19:12,869
things in other repositories to build

00:19:10,589 --> 00:19:16,529
and so on we can trace that all the way

00:19:12,869 --> 00:19:18,719
through and people who bother to put

00:19:16,529 --> 00:19:35,099
signatures on their software releases

00:19:18,719 --> 00:19:37,589
make our lives much easier because if

00:19:35,099 --> 00:19:53,609
you get used to signing your attacks

00:19:37,589 --> 00:19:56,129
always sharing information what it just

00:19:53,609 --> 00:19:59,969
did was I just signed the tag uploaded

00:19:56,129 --> 00:20:03,450
and told ok that's just just as it was

00:19:59,969 --> 00:20:05,969
signed with my gg gg he trusts with that

00:20:03,450 --> 00:20:08,459
exact point in time and just go from

00:20:05,969 --> 00:20:13,529
there and then coming back so this makes

00:20:08,459 --> 00:20:15,509
exchange something which is a check

00:20:13,529 --> 00:20:18,059
still what to do is to basically

00:20:15,509 --> 00:20:20,789
introduce an option where you're only

00:20:18,059 --> 00:20:24,209
allowed to check out import to to change

00:20:20,789 --> 00:20:27,570
into science tags so you are not allowed

00:20:24,209 --> 00:20:30,149
to to load any arbitrary point in your

00:20:27,570 --> 00:20:33,739
revision history you're only allowed to

00:20:30,149 --> 00:20:36,749
jump to signed tags within this history

00:20:33,739 --> 00:20:38,190
which would make it relatively simpler

00:20:36,749 --> 00:20:40,560
to have automated to

00:20:38,190 --> 00:20:43,050
which for example change your local

00:20:40,560 --> 00:20:46,590
configuration or do some deployments not

00:20:43,050 --> 00:20:48,180
for what have you without me to manually

00:20:46,590 --> 00:20:50,760
check that this is okay

00:20:48,180 --> 00:20:52,740
and without just assuming that

00:20:50,760 --> 00:20:54,720
everything is fine and nothing bad will

00:20:52,740 --> 00:20:57,120
happen because you're just trusting some

00:20:54,720 --> 00:20:59,820
random kid responsible if you have an a

00:20:57,120 --> 00:21:02,370
list of keys which you trust and only

00:20:59,820 --> 00:21:04,050
deploy or a load or whatever exactly

00:21:02,370 --> 00:21:07,470
those tags and this is basically what

00:21:04,050 --> 00:21:12,540
you were doing as well the automation

00:21:07,470 --> 00:21:15,270
behind it easy it's actually the case

00:21:12,540 --> 00:21:18,150
that only then you are really allowed

00:21:15,270 --> 00:21:20,850
from the security point of view to even

00:21:18,150 --> 00:21:23,700
use automation behind this point it

00:21:20,850 --> 00:21:26,070
provides the trust records yes exactly

00:21:23,700 --> 00:21:27,450
so if you use git for deployments please

00:21:26,070 --> 00:21:35,010
please please please please with sugar

00:21:27,450 --> 00:21:39,720
on top you sign tags from someone I

00:21:35,010 --> 00:21:43,560
trust say this version is OK in addition

00:21:39,720 --> 00:21:45,620
because git is underlying of content

00:21:43,560 --> 00:21:48,450
addressed

00:21:45,620 --> 00:21:50,220
hey size tag is a really convenient

00:21:48,450 --> 00:21:53,880
point to check that no one has tampered

00:21:50,220 --> 00:21:55,650
with your source code yes because you

00:21:53,880 --> 00:22:01,410
can verify the signature on the table

00:21:55,650 --> 00:22:02,820
just that as the sha-1 of commit objects

00:22:01,410 --> 00:22:05,610
and you can keep chasing it down just

00:22:02,820 --> 00:22:08,130
like we do with the signature on the

00:22:05,610 --> 00:22:10,200
releases file allowing this to verify

00:22:08,130 --> 00:22:15,900
all go down to individual content in

00:22:10,200 --> 00:22:18,360
depth all right if you've ever restored

00:22:15,900 --> 00:22:21,780
a git repo from backup or if you've ever

00:22:18,360 --> 00:22:25,340
had to run git Fisk sign tags again give

00:22:21,780 --> 00:22:25,340
you that added level of confidence

00:22:44,919 --> 00:22:59,329
from wherever because there should be

00:22:50,749 --> 00:23:02,509
something else which Gators are

00:22:59,329 --> 00:23:06,320
considering other mechanisms of cashing

00:23:02,509 --> 00:23:19,159
by now I kinda assumed they'd just wait

00:23:06,320 --> 00:23:21,229
for sha-3 - yep anyone else you can sign

00:23:19,159 --> 00:23:23,839
your comments for sometime

00:23:21,229 --> 00:23:25,789
yes tonight frankly I don't really know

00:23:23,839 --> 00:23:28,190
what would be the use case for it wait

00:23:25,789 --> 00:23:30,409
Lin was again again he said that doesn't

00:23:28,190 --> 00:23:33,379
make sense to sign communities because

00:23:30,409 --> 00:23:37,159
when you have signed tags that's just

00:23:33,379 --> 00:23:39,219
enough and I was for some time I had a I

00:23:37,159 --> 00:23:41,989
was signing every copy that I was doing

00:23:39,219 --> 00:23:43,459
maybe one month ago then I stopped

00:23:41,989 --> 00:23:48,259
because I realized that probably that

00:23:43,459 --> 00:23:49,940
makes sense yeah I don't know but later

00:23:48,259 --> 00:23:51,589
on if you want to reach respect like I

00:23:49,940 --> 00:23:54,079
have thousand commits between those

00:23:51,589 --> 00:23:56,450
points right then you can trust some of

00:23:54,079 --> 00:23:57,679
them and some of them maybe not but the

00:23:56,450 --> 00:24:00,159
problem is that for example when you

00:23:57,679 --> 00:24:03,769
rebate when somebody bases your patches

00:24:00,159 --> 00:24:05,959
you will lose signatures and in that

00:24:03,769 --> 00:24:08,570
case you mean somebody may think that

00:24:05,959 --> 00:24:10,849
somebody tampered with your comments

00:24:08,570 --> 00:24:13,299
well they are not coming from you

00:24:10,849 --> 00:24:13,299
anymore

00:24:27,530 --> 00:24:32,430
because someone else has to say

00:24:29,910 --> 00:24:34,410
I trust that whatever I did was correct

00:24:32,430 --> 00:24:36,360
it doesn't matter if they trust the peso

00:24:34,410 --> 00:24:38,850
they did it themselves or they import

00:24:36,360 --> 00:24:40,890
from a trusted source but now that they

00:24:38,850 --> 00:24:44,850
change it they are the most responsible

00:24:40,890 --> 00:24:46,680
for for heavy trust and I see one huge

00:24:44,850 --> 00:24:48,780
difference with you tags and commits

00:24:46,680 --> 00:24:51,410
which you can find if if you were to

00:24:48,780 --> 00:24:54,210
detect every single commit to sign it

00:24:51,410 --> 00:24:55,590
tags with you would lose a lot of their

00:24:54,210 --> 00:24:58,410
usefulness because all of us on

00:24:55,590 --> 00:25:00,270
everything is dead the tag means this is

00:24:58,410 --> 00:25:02,310
an interesting point in time at this

00:25:00,270 --> 00:25:06,860
point something happened which other

00:25:02,310 --> 00:25:10,050
people might look at comments are just

00:25:06,860 --> 00:25:12,270
way more notice a maybe at some point

00:25:10,050 --> 00:25:13,860
some safe community at this point might

00:25:12,270 --> 00:25:16,200
be you cherry-pick would become a

00:25:13,860 --> 00:25:20,030
security hazard and another I didn't

00:25:16,200 --> 00:25:20,030
want to sign off on that change right

00:25:27,240 --> 00:25:34,710
one advantage of sign clicks is the best

00:25:29,880 --> 00:25:37,740
exactly 50% of the object every commit

00:25:34,710 --> 00:25:38,910
that you make because a tag is an object

00:25:37,740 --> 00:25:41,460
if you sign it

00:25:38,910 --> 00:25:44,880
it's an annotated tag it's an additional

00:25:41,460 --> 00:25:49,710
object in the repository so commit

00:25:44,880 --> 00:25:51,180
signatures allow you to avoid that so if

00:25:49,710 --> 00:25:52,650
you're handing code to someone else and

00:25:51,180 --> 00:25:55,980
you wants to get into a certain this is

00:25:52,650 --> 00:25:58,350
the changes they've assigned commit is a

00:25:55,980 --> 00:26:01,350
cheaper way in terms of get objects to

00:25:58,350 --> 00:26:02,820
do that on the other hand there's

00:26:01,350 --> 00:26:04,500
nothing to stop you creating attack if

00:26:02,820 --> 00:26:06,720
you want to and there's nothing to say

00:26:04,500 --> 00:26:11,190
that tag objects have to be pointed to

00:26:06,720 --> 00:26:13,350
by reps in ref stacks I abuse the refs

00:26:11,190 --> 00:26:15,830
names based quite heavily in various

00:26:13,350 --> 00:26:15,830
things that I do

00:26:17,490 --> 00:26:26,500
so I wrote a git server because I didn't

00:26:25,180 --> 00:26:28,620
like the fact that all the other get

00:26:26,500 --> 00:26:32,220
service there come from didn't get and

00:26:28,620 --> 00:26:34,960
that get alike was horrible to my heart

00:26:32,220 --> 00:26:36,550
and one of the first things that I did

00:26:34,960 --> 00:26:38,640
was I tried to work out how I would keep

00:26:36,550 --> 00:26:41,230
repository configuration in repositories

00:26:38,640 --> 00:26:44,200
without upsetting people who cloned the

00:26:41,230 --> 00:26:47,230
repositories and so I actually end up

00:26:44,200 --> 00:26:51,400
with a namespace on the reps that is for

00:26:47,230 --> 00:26:53,440
the git server so ref is Gaetano the

00:26:51,400 --> 00:26:55,840
moment there's register tahno config 31

00:26:53,440 --> 00:26:58,270
right but that's managed by the git

00:26:55,840 --> 00:27:00,790
server and in fact when you reconfigure

00:26:58,270 --> 00:27:03,160
repositories and do things to your

00:27:00,790 --> 00:27:04,600
projects within and Gaetano server the

00:27:03,160 --> 00:27:09,130
software on the server side makes

00:27:04,600 --> 00:27:11,290
commits to that ref in your name so you

00:27:09,130 --> 00:27:13,630
can trace can figure out the religious

00:27:11,290 --> 00:27:15,490
when you make configuration changes to

00:27:13,630 --> 00:27:17,740
the whole server there's actually an

00:27:15,490 --> 00:27:20,680
administration repository that normal

00:27:17,740 --> 00:27:23,050
plugs don't have access to that it keeps

00:27:20,680 --> 00:27:24,910
a git history of everything that's going

00:27:23,050 --> 00:27:28,510
on with the configuration of the server

00:27:24,910 --> 00:27:30,760
that means that the content of the git

00:27:28,510 --> 00:27:33,190
repository the admin repository is in

00:27:30,760 --> 00:27:34,960
fact a dangerous structure rather than

00:27:33,190 --> 00:27:38,740
source code or text that a human is

00:27:34,960 --> 00:27:41,260
written and that data structure is then

00:27:38,740 --> 00:27:44,260
read by the server software to be able

00:27:41,260 --> 00:27:47,940
to manage itself and that led me on to

00:27:44,260 --> 00:27:50,980
an idea of couldn't I do that more

00:27:47,940 --> 00:27:55,540
couldn't we keep relational databases in

00:27:50,980 --> 00:27:57,940
get and so through work we've designed a

00:27:55,540 --> 00:27:59,200
mechanism of doing that sadly we only

00:27:57,940 --> 00:28:02,500
have about a quarter of an

00:27:59,200 --> 00:28:04,240
implementation at the moment but now I'm

00:28:02,500 --> 00:28:07,960
trying to remember exactly the name it

00:28:04,240 --> 00:28:08,790
is called something's with music that

00:28:07,960 --> 00:28:11,920
sounds good

00:28:08,790 --> 00:28:14,280
kids for the sea I've not looked at it

00:28:11,920 --> 00:28:14,280
about a year

00:28:15,500 --> 00:28:21,660
consonants there you go

00:28:18,720 --> 00:28:24,570
it's called consonant and it is a

00:28:21,660 --> 00:28:26,850
mechanism for putting a schemer

00:28:24,570 --> 00:28:31,130
relational database that can span

00:28:26,850 --> 00:28:33,240
multiple git repositories into gate and

00:28:31,130 --> 00:28:34,980
if anyone is interested in that kind of

00:28:33,240 --> 00:28:35,880
thing I dearly love someone to come

00:28:34,980 --> 00:28:38,970
along and have a look at the project

00:28:35,880 --> 00:28:41,490
link the specification and help us to

00:28:38,970 --> 00:28:46,950
complete the implementation the partial

00:28:41,490 --> 00:28:48,660
implementation is currently in Python by

00:28:46,950 --> 00:28:50,610
the same token if anyone fancies working

00:28:48,660 --> 00:29:03,260
on the gate server I can always do well

00:28:50,610 --> 00:29:07,380
do with combing things which is a way to

00:29:03,260 --> 00:29:10,050
attach the working tree from ticket

00:29:07,380 --> 00:29:11,640
there which is a fancy way more a

00:29:10,050 --> 00:29:15,150
company by the way of saying that you

00:29:11,640 --> 00:29:18,600
are able to use it to maintain files

00:29:15,150 --> 00:29:21,090
which are not in the repository which is

00:29:18,600 --> 00:29:23,790
in the local directory so for example

00:29:21,090 --> 00:29:26,550
you can have ten different keep working

00:29:23,790 --> 00:29:28,590
trees in parallel in one directory by

00:29:26,550 --> 00:29:29,900
keeping all the other things in the

00:29:28,590 --> 00:29:33,960
background of somewhere else without

00:29:29,900 --> 00:29:36,000
care about we can come into the data but

00:29:33,960 --> 00:29:38,190
the thing is what I'm abusing this for

00:29:36,000 --> 00:29:40,290
it is to just say if the configuration a

00:29:38,190 --> 00:29:42,830
local configuration of my repository

00:29:40,290 --> 00:29:46,680
so it basically safe the doctor get

00:29:42,830 --> 00:29:49,560
confy the scripts the books

00:29:46,680 --> 00:29:52,350
what-have-you in a separate repository

00:29:49,560 --> 00:29:54,780
which is then just an overlay over my

00:29:52,350 --> 00:29:57,980
main repository and just use this to

00:29:54,780 --> 00:30:00,660
synchronize always at the same

00:29:57,980 --> 00:30:01,890
configuration for all repositories in

00:30:00,660 --> 00:30:04,860
all different places where they need

00:30:01,890 --> 00:30:06,480
social customers which is what we mean

00:30:04,860 --> 00:30:08,720
because all of a sudden you have get

00:30:06,480 --> 00:30:08,720
four

00:30:12,660 --> 00:30:16,950
other people but I'm just question

00:30:15,060 --> 00:30:19,170
around that workflow is done I'm done

00:30:16,950 --> 00:30:22,320
this git repository actually contain a

00:30:19,170 --> 00:30:24,390
hidden directory named get with all the

00:30:22,320 --> 00:30:34,250
other stuff because kids usually refuses

00:30:24,390 --> 00:30:34,250
to right there unless so it gets their

00:30:34,340 --> 00:30:43,610
stored in your home or xdg Quantico yep

00:30:39,240 --> 00:30:47,460
/ which is h / refill daddy / the name

00:30:43,610 --> 00:30:50,010
and then you simply have the tree within

00:30:47,460 --> 00:30:52,440
the dock kids of here other repository

00:30:50,010 --> 00:30:55,200
so it doesn't even realize that this is

00:30:52,440 --> 00:30:57,990
a get rid yes sir because by using this

00:30:55,200 --> 00:31:01,460
mechanism you wipe this detection which

00:30:57,990 --> 00:31:01,460
makes it not accept

00:31:08,360 --> 00:31:40,860
anyone else wants to say anything so

00:31:12,679 --> 00:31:49,140
ramble I'm just trying to so anyone else

00:31:40,860 --> 00:31:52,320
wants to and sometimes we have some

00:31:49,140 --> 00:31:53,850
class which we should do the tea and if

00:31:52,320 --> 00:31:58,170
you're writing documents in the teeth

00:31:53,850 --> 00:32:02,040
then it can also help help you to keep a

00:31:58,170 --> 00:32:04,260
bit of record how much each individual

00:32:02,040 --> 00:32:06,270
person has contributed and so you can

00:32:04,260 --> 00:32:07,890
also say is something like hey you

00:32:06,270 --> 00:32:11,059
didn't eat right two lines

00:32:07,890 --> 00:32:13,830
wouldn't you mind sharing something and

00:32:11,059 --> 00:32:17,700
that's a pull request or something so

00:32:13,830 --> 00:32:24,320
you can you know keep the team going a

00:32:17,700 --> 00:32:24,320
bit that's one other work

00:32:32,210 --> 00:32:38,930
everybody is using EDC keeper right in

00:32:34,950 --> 00:32:44,910
there besides those implementing

00:32:38,930 --> 00:32:47,180
much-much ventures if you don't know or

00:32:44,910 --> 00:32:51,480
the DC keeper is is to keep your slash

00:32:47,180 --> 00:32:55,350
EDC Undergear we just really handy later

00:32:51,480 --> 00:32:58,790
on with respect what was changed yeah he

00:32:55,350 --> 00:33:02,580
gets annoyed it figuration maybe

00:32:58,790 --> 00:33:06,330
solution X at the universe extend along

00:33:02,580 --> 00:33:09,390
server they let you to walk in study for

00:33:06,330 --> 00:33:12,510
packaging in the duration of time no but

00:33:09,390 --> 00:33:14,100
this one doesn't use case yeah but

00:33:12,510 --> 00:33:26,360
that's more or less orchestration in

00:33:14,100 --> 00:33:26,360
this case is your personal left without

00:33:46,940 --> 00:33:50,750
so whatever you

00:34:12,570 --> 00:34:21,000
[Laughter]

00:35:35,630 --> 00:35:44,660
in some situations for example really

00:35:42,299 --> 00:35:47,400
have things which are just an ongoing

00:35:44,660 --> 00:35:49,530
lock for example for TTC keeper it makes

00:35:47,400 --> 00:35:53,250
it might make sense to just push all

00:35:49,530 --> 00:35:58,290
your all your configurations to a

00:35:53,250 --> 00:36:00,059
different location that make sense well

00:35:58,290 --> 00:36:01,740
from the logging perspective it would be

00:36:00,059 --> 00:36:03,390
better to always all because then you

00:36:01,740 --> 00:36:05,609
have one central side which is aware of

00:36:03,390 --> 00:36:08,270
what machines you could not pull

00:36:05,609 --> 00:36:11,520
configuration from so I really like

00:36:08,270 --> 00:36:12,869
pushing in this context but still in

00:36:11,520 --> 00:36:15,390
this case it might make sense because

00:36:12,869 --> 00:36:19,069
you just push out video all the time but

00:36:15,390 --> 00:36:19,069
if you actually change things manually

00:36:20,740 --> 00:36:51,650
it's useless and if there is a command

00:36:49,640 --> 00:36:53,510
line tool doing modification to all kind

00:36:51,650 --> 00:36:55,010
of configuration files or whatever

00:36:53,510 --> 00:37:06,069
there's a web interface and I'm not

00:36:55,010 --> 00:37:06,069
available it's usually going on

00:38:17,240 --> 00:38:21,269
[Laughter]

00:38:59,859 --> 00:39:54,500
and immediately upon something you are

00:39:52,280 --> 00:40:02,569
not allowed to push it into a non Barry

00:39:54,500 --> 00:40:06,220
pottery can change the setting even

00:40:02,569 --> 00:40:06,220
Gossip Lakes okay

00:40:09,559 --> 00:40:15,319
another way which has been used by an

00:40:12,799 --> 00:40:20,829
accident palaces to just have another

00:40:15,319 --> 00:40:20,829
namespace in your branch structure which

00:40:22,270 --> 00:40:33,880
which simply checks out or if you want

00:40:29,000 --> 00:40:41,000
to have two repositories easiest way

00:40:33,880 --> 00:40:44,180
just pushed them just changes into a non

00:40:41,000 --> 00:40:46,760
bearer check out and just holding for

00:40:44,180 --> 00:40:50,299
everyone when I say beer this basically

00:40:46,760 --> 00:40:52,099
means it's a server what a server but in

00:40:50,299 --> 00:40:54,559
simple terms it's it's what would be on

00:40:52,099 --> 00:41:02,240
a server non-video has an actual working

00:40:54,559 --> 00:41:04,790
directory as repulser you don't see

00:41:02,240 --> 00:41:07,790
actual files you only have the objects

00:41:04,790 --> 00:41:16,549
which can be used to reconstruct the

00:41:07,790 --> 00:41:17,660
files okay push to check the term for

00:41:16,549 --> 00:41:19,880
the term they are using is push to

00:41:17,660 --> 00:41:23,299
checkout and they're providing that if a

00:41:19,880 --> 00:41:26,030
hook now that's that's pretty can just

00:41:23,299 --> 00:41:28,069
link in there and which by default by

00:41:26,030 --> 00:41:30,859
default um refuses to push in their

00:41:28,069 --> 00:41:37,819
local changes and otherwise it checks

00:41:30,859 --> 00:41:44,720
the matter in my opinion is committing

00:41:37,819 --> 00:41:48,559
changes and serve it share more say

00:41:44,720 --> 00:41:55,099
suite administrators and your any type

00:41:48,559 --> 00:41:57,980
of code configuration management just

00:41:55,099 --> 00:42:00,770
make changes they may be locked in

00:41:57,980 --> 00:42:05,569
somewhere but you want to keep track of

00:42:00,770 --> 00:42:08,390
it and just in terms of configuration

00:42:05,569 --> 00:42:11,000
management thing repository

00:42:08,390 --> 00:42:14,059
you might just also commit or push them

00:42:11,000 --> 00:42:17,950
so that a person who did it change does

00:42:14,059 --> 00:42:17,950
not forget it and the next person

00:42:23,510 --> 00:43:54,270
so always we are using every time I

00:43:43,020 --> 00:43:56,430
think sort of this problems people

00:43:54,270 --> 00:43:59,720
committing changing stuff at the same

00:43:56,430 --> 00:43:59,720
time switch

00:44:31,640 --> 00:44:36,860
[Music]

00:44:43,930 --> 00:44:47,010
[Music]

00:44:49,040 --> 00:44:55,550
[Music]

00:44:59,320 --> 00:45:05,690
[Music]

00:45:11,300 --> 00:45:17,819
what I'm missing is what I would like to

00:45:15,359 --> 00:45:21,810
know if anyone has a solution for is

00:45:17,819 --> 00:45:24,869
kids with multiple upstream repositories

00:45:21,810 --> 00:45:27,210
if you have different functions you can

00:45:24,869 --> 00:45:29,579
easily vary this one's from this this

00:45:27,210 --> 00:45:32,579
parts from there but if you have one

00:45:29,579 --> 00:45:37,349
branch that has multiple absolutely

00:45:32,579 --> 00:45:42,960
positive or even multiple branches that

00:45:37,349 --> 00:45:46,260
come from multiple is there some nice

00:45:42,960 --> 00:45:49,859
way to keep them in sync or to even see

00:45:46,260 --> 00:45:52,859
how out of sync they are they are for

00:45:49,859 --> 00:45:54,839
specifications is easy to watch some

00:45:52,859 --> 00:45:58,050
shell scripts that does everything for

00:45:54,839 --> 00:46:01,710
you but is there does anyone know is

00:45:58,050 --> 00:46:03,210
general solution in this regard I think

00:46:01,710 --> 00:46:06,030
the most recent release

00:46:03,210 --> 00:46:08,790
it's introduced some standardized

00:46:06,030 --> 00:46:10,770
workflow for triangular development

00:46:08,790 --> 00:46:13,890
where new fruits aren't where you have

00:46:10,770 --> 00:46:16,109
your fork of an upstream repository and

00:46:13,890 --> 00:46:17,640
you're working on your master branch but

00:46:16,109 --> 00:46:20,040
you want to take changes for upstream to

00:46:17,640 --> 00:46:22,500
master branch and so they they have some

00:46:20,040 --> 00:46:24,660
workflow for triangular workflows

00:46:22,500 --> 00:46:27,960
I don't know how extensible that is to

00:46:24,660 --> 00:46:29,099
sort of octopus workflows but it seems

00:46:27,960 --> 00:46:30,540
like it would be in the obvious place to

00:46:29,099 --> 00:46:37,859
start if you were looking for something

00:46:30,540 --> 00:46:41,400
that existed already to work from 10

00:46:37,859 --> 00:46:44,070
origins up students which you push to

00:46:41,400 --> 00:47:06,470
exactly the same thing or which keep

00:46:44,070 --> 00:47:09,690
different to my server and and the other

00:47:06,470 --> 00:47:23,970
positively to have all four consoles and

00:47:09,690 --> 00:47:26,180
that text sounds good I mean you can yes

00:47:23,970 --> 00:47:28,859
to overwrite would get pushed us and

00:47:26,180 --> 00:47:31,920
then just say in this specific directory

00:47:28,859 --> 00:47:33,420
if I use it push I'm not used to any

00:47:31,920 --> 00:47:36,900
normal push I just run the script

00:47:33,420 --> 00:47:40,290
instead so you use normal commands and

00:47:36,900 --> 00:47:47,190
just overwrite them within the context

00:47:40,290 --> 00:47:51,420
of this specific culture I have this

00:47:47,190 --> 00:47:56,520
pre-made key five with the three the

00:47:51,420 --> 00:48:01,050
hidden civil computer and you get an axe

00:47:56,520 --> 00:48:05,010
sink facility to to think everything so

00:48:01,050 --> 00:48:08,970
it's the same thing each and every

00:48:05,010 --> 00:48:13,099
consider but it and I think we're

00:48:08,970 --> 00:48:19,050
pushing tool from the trunk

00:48:13,099 --> 00:48:21,599
call now or those who are but I think

00:48:19,050 --> 00:48:24,030
both timeless and conceptually we are at

00:48:21,599 --> 00:48:26,099
the point that makes sense to go into

00:48:24,030 --> 00:48:35,210
tools which you should not go away from

00:48:26,099 --> 00:48:37,530
here let's start with kinetics and I

00:48:35,210 --> 00:48:39,450
basically what give that next us is what

00:48:37,530 --> 00:48:44,880
you hear when you just get alyc soon

00:48:39,450 --> 00:48:46,560
it's also stop for a second but with all

00:48:44,880 --> 00:48:47,700
starts in your master branch or whatever

00:48:46,560 --> 00:48:49,170
it is the branch which you have just

00:48:47,700 --> 00:48:52,080
checked out at the moment in which

00:48:49,170 --> 00:48:54,540
you're working in it just pushes this to

00:48:52,080 --> 00:48:57,780
all configured remotes which it can

00:48:54,540 --> 00:49:00,150
reach and just push it into the binary

00:48:57,780 --> 00:49:03,450
contract right into the very bottom side

00:49:00,150 --> 00:49:06,630
into special merge branches so the data

00:49:03,450 --> 00:49:09,089
lives in repositories without changing

00:49:06,630 --> 00:49:10,890
the working directory and as soon as you

00:49:09,089 --> 00:49:12,900
are there and drunk it an extinct again

00:49:10,890 --> 00:49:14,700
it'll just look at all the

00:49:12,900 --> 00:49:18,240
synchronization branches which which

00:49:14,700 --> 00:49:20,040
whatever other machines pushed and just

00:49:18,240 --> 00:49:23,880
marriage it all together as one single

00:49:20,040 --> 00:49:27,900
large not as one commit but just this

00:49:23,880 --> 00:49:29,910
one new merge point obviously this tends

00:49:27,900 --> 00:49:32,910
to break down if you do actual changes

00:49:29,910 --> 00:49:35,280
to text files or what have you it

00:49:32,910 --> 00:49:37,920
doesn't matter because as soon as he

00:49:35,280 --> 00:49:41,760
tried to call it changes from several

00:49:37,920 --> 00:49:42,900
different sources into one current

00:49:41,760 --> 00:49:44,780
working directory

00:49:42,900 --> 00:49:47,520
you've kind of problem but if those

00:49:44,780 --> 00:49:50,369
comments are not conflicting in any way

00:49:47,520 --> 00:49:56,160
it's a quite brilliant and you to please

00:49:50,369 --> 00:50:01,890
get an expert I have to say so tools

00:49:56,160 --> 00:50:05,190
which you should not leave without you

00:50:01,890 --> 00:50:06,110
already said those of you who have a

00:50:05,190 --> 00:50:09,189
website

00:50:06,110 --> 00:50:09,189
[Music]

00:50:16,059 --> 00:50:22,809
unfortunately it doesn't really work

00:50:19,299 --> 00:50:28,529
with the common templates which you find

00:50:22,809 --> 00:50:31,509
for free on yet kinda dance

00:50:28,529 --> 00:50:33,549
so we didn't really want you to create a

00:50:31,509 --> 00:50:37,779
new template which completely goes with

00:50:33,549 --> 00:50:39,099
it it kind of works so anyway the

00:50:37,779 --> 00:50:41,019
community has the possibility to have

00:50:39,099 --> 00:50:43,839
several different patterns get to be in

00:50:41,019 --> 00:50:53,170
one of them basically you just edit your

00:50:43,839 --> 00:50:55,390
local files and then you just did commit

00:50:53,170 --> 00:50:57,519
you get pushed to your server and there

00:50:55,390 --> 00:51:00,609
you have a set of hooks which basically

00:50:57,519 --> 00:51:04,709
from our compiles all your your local

00:51:00,609 --> 00:51:07,809
files into web pages it takes care of

00:51:04,709 --> 00:51:09,880
interlinking its care of creating footer

00:51:07,809 --> 00:51:14,439
or over navigation on the side or

00:51:09,880 --> 00:51:16,569
whatever you can rescale images

00:51:14,439 --> 00:51:19,509
basically whatever you put into your

00:51:16,569 --> 00:51:20,949
plain plain text files locally we just

00:51:19,509 --> 00:51:25,299
pushed through the server the server

00:51:20,949 --> 00:51:27,670
compiles it into HTML at once except 404

00:51:25,299 --> 00:51:29,469
forms and then you have static HTML on

00:51:27,670 --> 00:51:31,630
your web server which is very performant

00:51:29,469 --> 00:51:33,969
for having just a random blog or web

00:51:31,630 --> 00:51:37,239
page or whatever I just wanted to

00:51:33,969 --> 00:51:40,150
mention I think that a really good thing

00:51:37,239 --> 00:51:42,219
to keep it gets is your day log Journal

00:51:40,150 --> 00:51:43,920
that kind of thing the way that I do

00:51:42,219 --> 00:51:45,969
that is I keep it as a Nicky Wicky

00:51:43,920 --> 00:51:48,189
repository which means that when I'm

00:51:45,969 --> 00:51:50,439
away from my computers I can still use

00:51:48,189 --> 00:51:50,920
my phone and the search mechanism is

00:51:50,439 --> 00:51:53,109
that ability

00:51:50,920 --> 00:52:04,299
ricky-ricky to find stuff that I would

00:51:53,109 --> 00:52:06,549
otherwise can also do what this for

00:52:04,299 --> 00:52:09,880
example done is to just keep all the

00:52:06,549 --> 00:52:11,859
documentation and the farms blog posts

00:52:09,880 --> 00:52:14,189
and everything within one single

00:52:11,859 --> 00:52:14,189
repository

00:52:14,360 --> 00:52:17,930
you have to complete webpage camp or the

00:52:16,220 --> 00:52:20,660
history of the web page of all the user

00:52:17,930 --> 00:52:22,850
questions which were ever asked in one

00:52:20,660 --> 00:52:26,210
source tree in one knowledge sources or

00:52:22,850 --> 00:52:27,920
just by checking out finding source you

00:52:26,210 --> 00:52:33,830
have all the information which was never

00:52:27,920 --> 00:52:35,450
published within the context of unless

00:52:33,830 --> 00:52:37,670
you can just simply generate the main

00:52:35,450 --> 00:52:39,970
pages from this so that it's really

00:52:37,670 --> 00:52:43,670
really useful next thing we've been

00:52:39,970 --> 00:52:45,830
talking about this is give annex it is

00:52:43,670 --> 00:52:49,220
quite nice but it has one large problem

00:52:45,830 --> 00:52:51,680
when you check in data the data stays in

00:52:49,220 --> 00:52:53,540
good if you check it out somewhere else

00:52:51,680 --> 00:52:56,180
the state that also goes to the other

00:52:53,540 --> 00:53:01,970
chicken so for example if your is good

00:52:56,180 --> 00:53:03,890
for you or for your photographs this

00:53:01,970 --> 00:53:06,770
becomes larger and larger and larger and

00:53:03,890 --> 00:53:08,570
if you have an SSD in your laptop but

00:53:06,770 --> 00:53:10,280
you are like me and have two terabytes

00:53:08,570 --> 00:53:12,740
of photographs which you took over your

00:53:10,280 --> 00:53:14,870
lifetime this will not fit on your

00:53:12,740 --> 00:53:17,750
laptop still you would want to have some

00:53:14,870 --> 00:53:20,540
folders on your laptop and also you

00:53:17,750 --> 00:53:22,040
probably want to not lose any photos

00:53:20,540 --> 00:53:24,950
which you took at some point at some

00:53:22,040 --> 00:53:28,390
point in time so if you put all of this

00:53:24,950 --> 00:53:31,480
intricate annex what key Lennox does is

00:53:28,390 --> 00:53:33,880
it creates objects from your files

00:53:31,480 --> 00:53:37,400
storage them in a separate subdirectory

00:53:33,880 --> 00:53:39,170
and takes care of the management of the

00:53:37,400 --> 00:53:43,700
information about the funds it's

00:53:39,170 --> 00:53:47,420
basically like if like storing cue cards

00:53:43,700 --> 00:53:49,430
about files and get keeping it small you

00:53:47,420 --> 00:53:52,700
basically just save savings which point

00:53:49,430 --> 00:53:54,770
into into nothingness and then use the

00:53:52,700 --> 00:53:57,920
annex to actually manage the objects

00:53:54,770 --> 00:53:59,540
which are standing behind this so for

00:53:57,920 --> 00:54:02,810
example on my laptop I have a full check

00:53:59,540 --> 00:54:06,230
out ever but not one thing a photograph

00:54:02,810 --> 00:54:08,660
is on my laptop it's distributed two to

00:54:06,230 --> 00:54:11,330
three external disks and two computers

00:54:08,660 --> 00:54:13,460
and one server but at the touch of a

00:54:11,330 --> 00:54:16,940
button I know exactly which photograph

00:54:13,460 --> 00:54:18,410
is on what machine within seconds simply

00:54:16,940 --> 00:54:21,570
because I have all the information about

00:54:18,410 --> 00:54:25,740
the files history

00:54:21,570 --> 00:54:28,280
every single what I can also do is I can

00:54:25,740 --> 00:54:30,480
just track changes or attract files

00:54:28,280 --> 00:54:34,020
somebody could just download or your

00:54:30,480 --> 00:54:35,670
usual podcast one directory at them kept

00:54:34,020 --> 00:54:38,220
them on your servant that just consume

00:54:35,670 --> 00:54:41,579
whatever you want and then get an X drop

00:54:38,220 --> 00:54:43,440
so remove removes the local copy of the

00:54:41,579 --> 00:54:45,210
menu and then you even have information

00:54:43,440 --> 00:54:46,770
about at some point in time I dropped

00:54:45,210 --> 00:54:49,619
this intentionally so I probably watched

00:54:46,770 --> 00:54:51,150
her to yoga already in the meantime that

00:54:49,619 --> 00:54:53,670
even allows you to store metadata

00:54:51,150 --> 00:54:57,000
arbitrary metadata about files and then

00:54:53,670 --> 00:54:59,930
create basically like like views and

00:54:57,000 --> 00:55:03,660
database just changing your whole

00:54:59,930 --> 00:55:05,730
directory and file structure according

00:55:03,660 --> 00:55:07,349
to whatever tax you set and selected for

00:55:05,730 --> 00:55:11,570
example show me all files which were

00:55:07,349 --> 00:55:16,079
created in 2015 and which have been

00:55:11,570 --> 00:55:18,839
deleted yet and which are OGG file for

00:55:16,079 --> 00:55:23,420
example so you just drill down within

00:55:18,839 --> 00:55:42,720
your huge dataset and basically create

00:55:23,420 --> 00:55:44,430
within your and you are saying to

00:55:42,720 --> 00:55:46,230
synchronize it around but sucks

00:55:44,430 --> 00:55:50,190
especially if you start to do the

00:55:46,230 --> 00:55:51,839
changes and also if you for example is a

00:55:50,190 --> 00:55:54,359
burden you would have one large

00:55:51,839 --> 00:55:57,660
directory and Justin link packing to

00:55:54,359 --> 00:55:59,099
home which means that you have basically

00:55:57,660 --> 00:56:00,869
forced to carry all your configuration

00:55:59,099 --> 00:56:03,390
around everywhere but you may not want

00:56:00,869 --> 00:56:05,339
to have you enter the configuration of a

00:56:03,390 --> 00:56:07,440
server you may not want to have your SSH

00:56:05,339 --> 00:56:09,420
into the G configuration on your work

00:56:07,440 --> 00:56:11,099
machines yet you want to have your shell

00:56:09,420 --> 00:56:13,579
configuration on all of these machines

00:56:11,099 --> 00:56:16,819
so you want to have specific subsets of

00:56:13,579 --> 00:56:20,490
configuration in this machine

00:56:16,819 --> 00:56:23,220
so with this is H what you have is you

00:56:20,490 --> 00:56:23,970
have one single repository for whatever

00:56:23,220 --> 00:56:26,990
you choose

00:56:23,970 --> 00:56:31,710
we are essential for mplayer from BMC

00:56:26,990 --> 00:56:32,910
never are able to contain all the

00:56:31,710 --> 00:56:35,609
configuration for this one program

00:56:32,910 --> 00:56:39,840
within one single repository surface

00:56:35,609 --> 00:56:42,180
around there's also a built-in mechanism

00:56:39,840 --> 00:56:44,220
to just pull all the repositories all we

00:56:42,180 --> 00:56:47,310
see is a choke on stories or just cool

00:56:44,220 --> 00:56:48,780
orbitals to simplify management of your

00:56:47,310 --> 00:56:50,369
all of a sudden twenty different

00:56:48,780 --> 00:56:56,070
repositories which live in your own

00:56:50,369 --> 00:56:57,960
directory if you want that same

00:56:56,070 --> 00:56:59,250
mechanism for all your repositories

00:56:57,960 --> 00:57:00,869
doesn't matter if it's good if it's

00:56:59,250 --> 00:57:04,200
bizarre if it's material if it's

00:57:00,869 --> 00:57:05,880
subversion doesn't matter there is or at

00:57:04,200 --> 00:57:09,330
the meantime it has been renamed as wine

00:57:05,880 --> 00:57:11,460
weapons which basically keeps a list of

00:57:09,330 --> 00:57:14,460
all your positrons and then you just run

00:57:11,460 --> 00:57:16,619
em are up once and it updates all your

00:57:14,460 --> 00:57:19,380
repositories from all sources and then

00:57:16,619 --> 00:57:21,119
you write em or push and push us all

00:57:19,380 --> 00:57:23,580
your repositories to wherever they need

00:57:21,119 --> 00:57:26,310
to be pushed so for example if you're

00:57:23,580 --> 00:57:28,700
about to go on holiday and you got half

00:57:26,310 --> 00:57:32,400
an hour of Wi-Fi at the local airport

00:57:28,700 --> 00:57:33,750
just an hour up and are push ones and

00:57:32,400 --> 00:57:45,240
you were totally synchronize with all

00:57:33,750 --> 00:57:47,520
your machines in combination so I just

00:57:45,240 --> 00:57:49,560
have one our configuration file and when

00:57:47,520 --> 00:57:51,660
I reboot my machine I can't just like

00:57:49,560 --> 00:57:57,570
create all the source code repositories

00:57:51,660 --> 00:57:59,520
I'm working on interested in TP and you

00:57:57,570 --> 00:58:01,290
just need to commit and push whatever

00:57:59,520 --> 00:58:03,480
you do so you can never lose anything

00:58:01,290 --> 00:58:05,520
and you can just work in wrong yeah

00:58:03,480 --> 00:58:09,020
that's actually quite quite a bad idea

00:58:05,520 --> 00:58:12,859
if you want to even go further with that

00:58:09,020 --> 00:58:15,330
for for I have any alternate

00:58:12,859 --> 00:58:19,320
configuration night out for my

00:58:15,330 --> 00:58:23,070
repositories which sadly never made it

00:58:19,320 --> 00:58:26,010
where you basically have just like with

00:58:23,070 --> 00:58:29,900
HTTP I have repositories available which

00:58:26,010 --> 00:58:29,900
just listy and our configuration for

00:58:38,450 --> 00:58:52,890
which we see as age to have a use and

00:58:50,340 --> 00:58:54,870
then just choose which to check out that

00:58:52,890 --> 00:58:56,610
chat by just sending it from your

00:58:54,870 --> 00:58:57,150
cluster is a while ago 200 filter is

00:58:56,610 --> 00:58:59,040
enabled

00:58:57,150 --> 00:59:03,420
there's a really really good vertical

00:58:59,040 --> 00:59:06,950
it's really really nice and for you case

00:59:03,420 --> 00:59:06,950
where you where you basically have time

00:59:09,380 --> 00:59:12,900
because then you can just pick and

00:59:11,460 --> 00:59:16,110
choose which are one of them you want to

00:59:12,900 --> 00:59:18,750
use today and then use em are all the

00:59:16,110 --> 00:59:31,650
time with that subset of today's

00:59:18,750 --> 00:59:33,690
packages actually there's half an hour

00:59:31,650 --> 00:59:40,560
of time we kinda run over if you want to

00:59:33,690 --> 00:59:44,490
we don't have to one kington geeky so

00:59:40,560 --> 00:59:47,820
users get cake okay who is still scared

00:59:44,490 --> 00:59:50,580
about let's say we base or we said not

00:59:47,820 --> 00:59:58,080
hard but we said there are no scared

00:59:50,580 --> 01:00:04,530
people come on be brave and basically

00:59:58,080 --> 01:00:07,620
doing workflow this was after conversion

01:00:04,530 --> 01:00:12,620
from SVN so people run up familiar stuff

01:00:07,620 --> 01:00:18,510
and we did lot of I mean let's say

01:00:12,620 --> 01:00:21,690
visualized tree like very scary train

01:00:18,510 --> 01:00:24,150
station and then you have problems with

01:00:21,690 --> 01:00:27,240
sleep phasing and stuff if you are using

01:00:24,150 --> 01:00:29,730
I mean my understanding of rebasing for

01:00:27,240 --> 01:00:33,600
example is I did some commits

01:00:29,730 --> 01:00:35,280
to some drunk and I think those commits

01:00:33,600 --> 01:00:37,740
should not interfere with anything else

01:00:35,280 --> 01:00:43,619
and if they do I get the separate

01:00:37,740 --> 01:00:47,280
committee different okay let me just

01:00:43,619 --> 01:00:49,530
wrap up my question okay so what if I'm

01:00:47,280 --> 01:00:52,170
useful when you start decaying right and

01:00:49,530 --> 01:00:55,350
then you start any rebase or we said and

01:00:52,170 --> 01:00:57,810
just keep UK running and then after

01:00:55,350 --> 01:01:00,300
you're done just hit a fight

01:00:57,810 --> 01:01:03,210
you get refreshed pointers and refresh

01:01:00,300 --> 01:01:05,220
new commits but all three as well so you

01:01:03,210 --> 01:01:07,080
could quickly compare the two all to

01:01:05,220 --> 01:01:09,630
state and new state without referring

01:01:07,080 --> 01:01:13,490
explicitly to ref law so this way you

01:01:09,630 --> 01:01:13,490
can guarantee that you didn't screw up

01:01:28,290 --> 01:01:32,299
[Laughter]

01:01:53,060 --> 01:01:59,990
if anyone of you is working on anything

01:01:56,820 --> 01:02:03,180
like get Kate any visualization toolkit

01:01:59,990 --> 01:02:08,609
please please please please please copy

01:02:03,180 --> 01:02:10,890
what github is doing and you stay for a

01:02:08,609 --> 01:02:12,810
sample time and not about you do that's

01:02:10,890 --> 01:02:30,869
so much more useful anyone is working

01:02:12,810 --> 01:02:33,630
this please please please please no no

01:02:30,869 --> 01:02:35,750
you only you only see the tanks which

01:02:33,630 --> 01:02:35,750
are

01:02:52,810 --> 01:03:37,000

YouTube URL: https://www.youtube.com/watch?v=bxzL25Q_X3M


