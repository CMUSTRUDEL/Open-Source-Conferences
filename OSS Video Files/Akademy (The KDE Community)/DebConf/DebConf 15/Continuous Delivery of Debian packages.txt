Title: Continuous Delivery of Debian packages
Publication date: 2017-12-03
Playlist: DebConf 15
Description: 
	by Michael Prokop

At: DebConf15
https://summit.debconf.org/debconf15/meeting/286/continuous-delivery-of-debian-packages/
https://debconf15.debconf.org/

How would it be to just commit your packaging changes to the version control system and get automated Q/A tests plus Debian packages for different releases without any further manual work required?

This is what we're doing for a company who relies 100% on Debian packages. The OpenStack project jenkins-job-builder allows us to manage more than 800 Jenkins jobs through a few YAML configuration files  without touching the Jenkins web interface. jenkins-debian-glue takes care of Debian package builds, building on cowbuilder, lintian, piuparts and autopkgtest. Code review using Gerrit as well as configuration management (Puppet + Ansible) helps us control the workflow and infrastructure.

All the involved software is open source and in this talk I'll provide an overview how such a system can look like, how you might benefit for your own project and which challenges you might face.

Room: Berlin/London
Scheduled start: 2015-08-17 14:00:00
Captions: 
	00:00:01,070 --> 00:00:07,080
okay I'd like to welcome here poor cop

00:00:05,069 --> 00:00:10,139
who's giving his talk about continuous

00:00:07,080 --> 00:00:19,289
delivery of Debian packages so given a

00:00:10,139 --> 00:00:21,800
big applause please I'd like to start

00:00:19,289 --> 00:00:24,060
with clarifying the terminology and

00:00:21,800 --> 00:00:25,439
every one of you might know continuous

00:00:24,060 --> 00:00:28,470
integration coming from software

00:00:25,439 --> 00:00:30,630
development continuous deployment is

00:00:28,470 --> 00:00:34,860
what we understand with as soon as the

00:00:30,630 --> 00:00:38,000
QA criteria is fine we ship or deployed

00:00:34,860 --> 00:00:40,320
we don't wait for any further feedback

00:00:38,000 --> 00:00:42,420
continious delivery this is what we are

00:00:40,320 --> 00:00:44,129
talking about now is you release

00:00:42,420 --> 00:00:45,660
whenever you decide it's useful to

00:00:44,129 --> 00:00:47,399
release so it's kind of a business

00:00:45,660 --> 00:00:49,289
decision does it make sense to release

00:00:47,399 --> 00:00:51,780
right now because some customers are

00:00:49,289 --> 00:00:53,370
paying us for this or users are waiting

00:00:51,780 --> 00:00:56,610
for a new release and it makes sense to

00:00:53,370 --> 00:00:58,590
release it right now so in terms of we

00:00:56,610 --> 00:01:03,719
can call the continuous integration and

00:00:58,590 --> 00:01:08,159
in a in a further extended way why are

00:01:03,719 --> 00:01:10,439
we talking about all of this it's like

00:01:08,159 --> 00:01:12,930
what are the benefits we get from

00:01:10,439 --> 00:01:14,700
continuous delivery in terms of deben

00:01:12,930 --> 00:01:17,790
project or in terms of what we are

00:01:14,700 --> 00:01:22,350
talking about here is like the cost of a

00:01:17,790 --> 00:01:25,170
bug-fix are getting bigger and bigger in

00:01:22,350 --> 00:01:27,330
terms of when we are in the pipeline if

00:01:25,170 --> 00:01:29,970
we are in the in the beginning where we

00:01:27,330 --> 00:01:33,479
we have requirements design it's quite

00:01:29,970 --> 00:01:34,829
cheap to change things and define things

00:01:33,479 --> 00:01:37,100
but what should it look like

00:01:34,829 --> 00:01:40,229
and it's getting much more expensive

00:01:37,100 --> 00:01:42,150
later on code development accounting

00:01:40,229 --> 00:01:44,100
operations once we deploy it all the

00:01:42,150 --> 00:01:47,159
system all the changes are getting much

00:01:44,100 --> 00:01:49,619
more expensive so what we would like to

00:01:47,159 --> 00:01:52,140
have is some kind of independence we

00:01:49,619 --> 00:01:54,420
don't want to rely on this specific

00:01:52,140 --> 00:01:56,399
laptop or on this specific machine like

00:01:54,420 --> 00:01:58,890
nobody knows how to rebuild it from

00:01:56,399 --> 00:02:00,899
scratch or how to change anything what

00:01:58,890 --> 00:02:03,450
if we just take it out of operations

00:02:00,899 --> 00:02:07,849
will anything break we want to be able

00:02:03,450 --> 00:02:10,830
to to kind of scale not just in terms of

00:02:07,849 --> 00:02:12,670
one bill to many bills of course this is

00:02:10,830 --> 00:02:15,190
nice but we would be

00:02:12,670 --> 00:02:17,530
we would like to be able to also start

00:02:15,190 --> 00:02:19,930
small and just grow as needed in terms

00:02:17,530 --> 00:02:21,610
of people maybe it's a small team

00:02:19,930 --> 00:02:24,280
packaging team like you have five people

00:02:21,610 --> 00:02:28,660
what happens if we grow to like five

00:02:24,280 --> 00:02:31,450
hundred people reproduce able we would

00:02:28,660 --> 00:02:33,760
like to have a way of making sure the

00:02:31,450 --> 00:02:36,220
package we built we can also rebuild

00:02:33,760 --> 00:02:40,420
like two years lay down that even

00:02:36,220 --> 00:02:43,569
reproducible project might be well known

00:02:40,420 --> 00:02:46,270
and what's also important is that we

00:02:43,569 --> 00:02:48,930
have it predictable like we really want

00:02:46,270 --> 00:02:53,110
to have metrics to estimate filled times

00:02:48,930 --> 00:02:54,550
times to fix so if we change anything in

00:02:53,110 --> 00:02:57,010
our software and the build time

00:02:54,550 --> 00:02:58,600
increases it would be nice to identify

00:02:57,010 --> 00:03:01,690
what was responsible is it of

00:02:58,600 --> 00:03:03,910
infrastructure change is it a packaging

00:03:01,690 --> 00:03:07,750
change is it like upstream change do we

00:03:03,910 --> 00:03:09,730
have any further dependencies so what we

00:03:07,750 --> 00:03:11,680
would like to know is assuming we would

00:03:09,730 --> 00:03:13,540
have to fix this and that package how

00:03:11,680 --> 00:03:18,579
long would it take us to deliver it to

00:03:13,540 --> 00:03:21,549
our end user or customer and I'd like to

00:03:18,579 --> 00:03:26,230
talk about a few problems we had at a

00:03:21,549 --> 00:03:28,390
company where I'm working for there was

00:03:26,230 --> 00:03:31,450
a kind of mess with with golden images

00:03:28,390 --> 00:03:32,860
to ship custom software stick to

00:03:31,450 --> 00:03:35,650
customers

00:03:32,860 --> 00:03:37,360
it was a long build time as soon as you

00:03:35,650 --> 00:03:39,459
change something you had to rebuild all

00:03:37,360 --> 00:03:42,900
the image you had to upload the image to

00:03:39,459 --> 00:03:46,450
the customer for one single small change

00:03:42,900 --> 00:03:48,340
we also had like builds non reproducible

00:03:46,450 --> 00:03:50,260
it was unmanaged infrastructure so

00:03:48,340 --> 00:03:53,350
nobody knew on which machine was it

00:03:50,260 --> 00:03:55,900
built developers could even build their

00:03:53,350 --> 00:03:58,000
own package and uploaded it or maybe

00:03:55,900 --> 00:04:01,510
even a binary and just include it in the

00:03:58,000 --> 00:04:04,120
in the image also the release process

00:04:01,510 --> 00:04:07,630
was holding back the ongoing development

00:04:04,120 --> 00:04:09,730
as soon as we were heading for a new

00:04:07,630 --> 00:04:10,630
release the code was frozen in the

00:04:09,730 --> 00:04:12,910
version control

00:04:10,630 --> 00:04:17,380
nobody could took any further work in

00:04:12,910 --> 00:04:20,680
master branches and all the release

00:04:17,380 --> 00:04:22,539
process was holding back actual ongoing

00:04:20,680 --> 00:04:26,030
work getting more and more customers

00:04:22,539 --> 00:04:28,700
means that we even had to build

00:04:26,030 --> 00:04:30,860
even more images and diverting from each

00:04:28,700 --> 00:04:34,460
other like customers have specific needs

00:04:30,860 --> 00:04:36,680
or nothing to share maybe even we tried

00:04:34,460 --> 00:04:38,450
like bbm source package uploads to a

00:04:36,680 --> 00:04:41,180
custom-built service not not so

00:04:38,450 --> 00:04:43,850
sophisticated as the the Debian one but

00:04:41,180 --> 00:04:45,740
in times of weed don't even upload any

00:04:43,850 --> 00:04:48,470
binaries which has to build to step the

00:04:45,740 --> 00:04:50,090
package from scratch but the developers

00:04:48,470 --> 00:04:52,160
still needed to manually build or

00:04:50,090 --> 00:04:54,470
release packages themselves this means

00:04:52,160 --> 00:04:57,980
then needs some tools from Debian or

00:04:54,470 --> 00:04:59,870
what you want to they might have

00:04:57,980 --> 00:05:01,580
problems with actually releasing stuff

00:04:59,870 --> 00:05:04,640
what should go in the change lock what

00:05:01,580 --> 00:05:07,460
version number do I have to use so this

00:05:04,640 --> 00:05:10,460
was kind of big problem it solved some

00:05:07,460 --> 00:05:14,090
some smallish problems in the in the

00:05:10,460 --> 00:05:17,630
first part but not the overall vision we

00:05:14,090 --> 00:05:19,850
had so what actually do we want to have

00:05:17,630 --> 00:05:22,100
if you look at the continuous delivery

00:05:19,850 --> 00:05:25,520
book at the famous one this is what

00:05:22,100 --> 00:05:28,460
continual is a continuously deployment

00:05:25,520 --> 00:05:30,830
pipeline looks like we have a delivery

00:05:28,460 --> 00:05:33,680
team which has version control checks in

00:05:30,830 --> 00:05:35,660
some stuff we have built and unit tests

00:05:33,680 --> 00:05:37,910
and if they fail we just go back in the

00:05:35,660 --> 00:05:39,800
cycling and start again once they pass

00:05:37,910 --> 00:05:41,780
we can get to the next step which is

00:05:39,800 --> 00:05:43,900
like automated acceptance test if they

00:05:41,780 --> 00:05:46,130
still fail we'll go back in the queue

00:05:43,900 --> 00:05:48,530
check-in trigger trigger

00:05:46,130 --> 00:05:51,020
nowaday we have user acceptance test and

00:05:48,530 --> 00:05:54,260
if they pass we can get to the release

00:05:51,020 --> 00:05:56,930
so we we transfer us into and some kind

00:05:54,260 --> 00:05:59,570
of workflow for us what would we like to

00:05:56,930 --> 00:06:01,550
have the developer should just have

00:05:59,570 --> 00:06:03,380
something like git commit and get review

00:06:01,550 --> 00:06:06,200
just push it to their code review system

00:06:03,380 --> 00:06:08,240
that's that's it nothing nothing further

00:06:06,200 --> 00:06:08,690
is you shouldn't touch even changelog at

00:06:08,240 --> 00:06:11,810
all

00:06:08,690 --> 00:06:14,210
shouldn't care about what release re are

00:06:11,810 --> 00:06:17,450
we actually facing if we want to just go

00:06:14,210 --> 00:06:21,110
for ongoing development just push to

00:06:17,450 --> 00:06:24,050
master Jenkins one continuous

00:06:21,110 --> 00:06:25,880
integration server then verifies what we

00:06:24,050 --> 00:06:28,400
actually build it relies on teaming

00:06:25,880 --> 00:06:31,970
builds we we automatically get once you

00:06:28,400 --> 00:06:34,400
do the good review we get custom pas

00:06:31,970 --> 00:06:36,830
which can be used for development and

00:06:34,400 --> 00:06:38,780
testing like I'd want to test is what

00:06:36,830 --> 00:06:39,780
I'm doing actually working like the

00:06:38,780 --> 00:06:42,180
developer might not

00:06:39,780 --> 00:06:44,190
know what that even package looked like

00:06:42,180 --> 00:06:46,290
in the entry side so it just pushes it

00:06:44,190 --> 00:06:51,030
get a demon package and can just install

00:06:46,290 --> 00:06:52,919
it on the environment if Jenkins says no

00:06:51,030 --> 00:06:54,750
I'm not good we are just going back in

00:06:52,919 --> 00:06:56,880
there in the queue and say well just fix

00:06:54,750 --> 00:07:00,470
it get review again and once you have

00:06:56,880 --> 00:07:03,060
the plus one like I'm good you can

00:07:00,470 --> 00:07:04,830
integrate the code reviewers like other

00:07:03,060 --> 00:07:06,810
people just look at their team and

00:07:04,830 --> 00:07:09,419
packaging stuff or possibly just their

00:07:06,810 --> 00:07:12,419
the software itself and say does this

00:07:09,419 --> 00:07:14,640
make sense can we push this yes no once

00:07:12,419 --> 00:07:16,530
we are good we just admitted to a master

00:07:14,640 --> 00:07:19,919
branch or whatever maintenance branch we

00:07:16,530 --> 00:07:23,220
will look at that later and we have some

00:07:19,919 --> 00:07:24,480
kind of different needs the internal

00:07:23,220 --> 00:07:27,480
tooling like we run our own

00:07:24,480 --> 00:07:29,940
infrastructure we don't need a release -

00:07:27,480 --> 00:07:31,380
what we can just push it and apply it on

00:07:29,940 --> 00:07:34,110
our infrastructure once we're happy with

00:07:31,380 --> 00:07:36,030
it but we also have to have the product

00:07:34,110 --> 00:07:38,310
cycle which is like a given release and

00:07:36,030 --> 00:07:41,220
you'd even release and we we then

00:07:38,310 --> 00:07:42,750
decided to go for a release dashboard

00:07:41,220 --> 00:07:45,090
where we have all the projects and just

00:07:42,750 --> 00:07:46,979
say we want to release a new version I

00:07:45,090 --> 00:07:49,200
don't care about what's in the deben

00:07:46,979 --> 00:07:51,750
change lock and we will automate this

00:07:49,200 --> 00:07:54,090
this handling we create according

00:07:51,750 --> 00:07:55,860
branches we create the according text we

00:07:54,090 --> 00:07:58,560
create the according change log entries

00:07:55,860 --> 00:08:00,720
and apply the final build and then all

00:07:58,560 --> 00:08:03,539
the release workflow like automated

00:08:00,720 --> 00:08:05,640
testing acceptance testing the QA team

00:08:03,539 --> 00:08:08,669
can decide whether we are fit for

00:08:05,640 --> 00:08:10,710
release or not just continuous and then

00:08:08,669 --> 00:08:12,900
we ship it to customers like deviant

00:08:10,710 --> 00:08:15,930
packages it's really just F get Update F

00:08:12,900 --> 00:08:19,560
get upgrade that's it so that's what we

00:08:15,930 --> 00:08:21,390
actually want to have now how did we get

00:08:19,560 --> 00:08:23,610
there we had we decided on some

00:08:21,390 --> 00:08:26,070
principles we just rely on deviant

00:08:23,610 --> 00:08:27,539
packages for and even repositories for

00:08:26,070 --> 00:08:30,240
everything no exceptions whatever

00:08:27,539 --> 00:08:32,849
meaning nothing only what's on

00:08:30,240 --> 00:08:34,650
aberration control met us and you don't

00:08:32,849 --> 00:08:37,110
have any chance to pay us anything it

00:08:34,650 --> 00:08:40,349
with the final product into the final

00:08:37,110 --> 00:08:42,930
system without having it under version

00:08:40,349 --> 00:08:45,510
control otherwise it can't even end up

00:08:42,930 --> 00:08:47,339
there and automate all the

00:08:45,510 --> 00:08:49,760
infrastructure handling lights we don't

00:08:47,339 --> 00:08:53,160
want to touch any systems of manually

00:08:49,760 --> 00:08:53,700
all the configuration management systems

00:08:53,160 --> 00:08:56,070
as

00:08:53,700 --> 00:09:00,540
terrorists should take place we using

00:08:56,070 --> 00:09:02,370
puppet intangible automation we have

00:09:00,540 --> 00:09:04,770
automated even change lock handling to

00:09:02,370 --> 00:09:06,720
simplify them the releasing of new

00:09:04,770 --> 00:09:09,390
package versions like you don't want to

00:09:06,720 --> 00:09:11,100
think about what version number do I

00:09:09,390 --> 00:09:13,110
actually need we know this is a new

00:09:11,100 --> 00:09:16,140
built or this is a hotfix or this is a

00:09:13,110 --> 00:09:18,960
minor change and we can all decide on

00:09:16,140 --> 00:09:20,940
that and so developers don't need even

00:09:18,960 --> 00:09:24,030
of you wounded all day of course are

00:09:20,940 --> 00:09:25,650
encouraged to do so but sometimes you

00:09:24,030 --> 00:09:27,810
have developers working with very

00:09:25,650 --> 00:09:30,180
specific components of software and they

00:09:27,810 --> 00:09:33,870
aren't using even or don't want to use

00:09:30,180 --> 00:09:35,640
even Ubuntu for whatever reason we have

00:09:33,870 --> 00:09:38,250
automated release branch handling so

00:09:35,640 --> 00:09:40,080
whenever we have a new release at the

00:09:38,250 --> 00:09:41,900
according new release branch it gets

00:09:40,080 --> 00:09:44,190
created the same for a new hotfix

00:09:41,900 --> 00:09:46,620
everything is created automatically so

00:09:44,190 --> 00:09:48,900
once you want to fix an existing release

00:09:46,620 --> 00:09:51,450
you know you can go at every single

00:09:48,900 --> 00:09:53,280
project just go into the according

00:09:51,450 --> 00:09:54,110
branch and everything is there as

00:09:53,280 --> 00:09:57,150
released

00:09:54,110 --> 00:09:59,910
we have VMs for testing and development

00:09:57,150 --> 00:10:03,030
we are using vagrant so whenever you

00:09:59,910 --> 00:10:04,620
have a problem and someone says there's

00:10:03,030 --> 00:10:06,690
this PAC report the steps to reproduce

00:10:04,620 --> 00:10:10,140
all you have to do is like vagrant apt

00:10:06,690 --> 00:10:13,470
take the project the product in the

00:10:10,140 --> 00:10:15,450
according name and choose the according

00:10:13,470 --> 00:10:17,700
version and everything else is set up

00:10:15,450 --> 00:10:19,770
automatically so we have automated box

00:10:17,700 --> 00:10:22,010
builds at least once per day so that

00:10:19,770 --> 00:10:23,790
these so-called base boxes for vagrant

00:10:22,010 --> 00:10:28,020
automatically the effort recording

00:10:23,790 --> 00:10:31,170
releases and important part we have ppas

00:10:28,020 --> 00:10:33,270
for development so no Russian control

00:10:31,170 --> 00:10:35,340
freezes at all you can always push to

00:10:33,270 --> 00:10:38,130
master of masters should always be good

00:10:35,340 --> 00:10:41,210
always good to release but what is

00:10:38,130 --> 00:10:44,870
actually released is in in separate

00:10:41,210 --> 00:10:47,400
branches so we just have fast forward

00:10:44,870 --> 00:10:49,350
approach you always have to rebase

00:10:47,400 --> 00:10:51,330
there's no no option for Mirage and you

00:10:49,350 --> 00:10:54,150
don't know what you will get it's just

00:10:51,330 --> 00:10:59,760
fast forward and the according release

00:10:54,150 --> 00:11:02,250
branches some improvements that we made

00:10:59,760 --> 00:11:05,010
in the in this process is usage of

00:11:02,250 --> 00:11:06,529
temper phase and it may data for just

00:11:05,010 --> 00:11:09,620
building

00:11:06,529 --> 00:11:11,959
faster or sassy cash so we try to get

00:11:09,620 --> 00:11:14,810
our builds as fast as possible once the

00:11:11,959 --> 00:11:17,269
user or developer just pushes get review

00:11:14,810 --> 00:11:19,999
the demon packet should come out as soon

00:11:17,269 --> 00:11:23,389
as possible we use dashboards for

00:11:19,999 --> 00:11:25,399
extractions so people can focus on the

00:11:23,389 --> 00:11:28,009
actual tasks they don't have to look at

00:11:25,399 --> 00:11:30,470
Jenkins is this set now blue or yellow

00:11:28,009 --> 00:11:32,540
or red where's the error whatever and

00:11:30,470 --> 00:11:34,430
which build parameters do we actually

00:11:32,540 --> 00:11:36,829
need to use to end up in the according

00:11:34,430 --> 00:11:38,870
release the pradesh board takes care of

00:11:36,829 --> 00:11:41,089
this it knows which project should go

00:11:38,870 --> 00:11:43,699
into a release which branches do we have

00:11:41,089 --> 00:11:47,569
which text do we have so the release

00:11:43,699 --> 00:11:49,999
manager as well as that according

00:11:47,569 --> 00:11:53,360
developers have according front-end for

00:11:49,999 --> 00:11:55,819
the actual needs and very important is

00:11:53,360 --> 00:11:58,100
the code review system the code review

00:11:55,819 --> 00:12:00,110
system improves of course code quality

00:11:58,100 --> 00:12:03,709
but it's also nice for sharing knowledge

00:12:00,110 --> 00:12:05,930
amongst people like and you are not yet

00:12:03,709 --> 00:12:07,699
working in some project but there needs

00:12:05,930 --> 00:12:10,279
to be someone reviewing the code so you

00:12:07,699 --> 00:12:13,910
tend to ask is this useful what we are

00:12:10,279 --> 00:12:15,860
doing there could you maybe be more

00:12:13,910 --> 00:12:17,480
robust in the commit message to explain

00:12:15,860 --> 00:12:19,790
the actual situation you're trying to

00:12:17,480 --> 00:12:21,740
fix and it helps of course introducing

00:12:19,790 --> 00:12:25,069
new people because new new developers

00:12:21,740 --> 00:12:27,709
can just start hacking and they get good

00:12:25,069 --> 00:12:29,930
feedback from people used to work with

00:12:27,709 --> 00:12:33,500
this project so that you can actually

00:12:29,930 --> 00:12:35,959
see the progress in in a bug fix to see

00:12:33,500 --> 00:12:38,449
what other people are fixing what's the

00:12:35,959 --> 00:12:39,829
workflow there so code review isn't just

00:12:38,449 --> 00:12:44,509
about the quality of code it's also

00:12:39,829 --> 00:12:48,559
about the quality of a team and what

00:12:44,509 --> 00:12:52,490
what's under our system is the so called

00:12:48,559 --> 00:12:54,589
champions given view many of you might

00:12:52,490 --> 00:12:56,000
notice the nice thing about standards is

00:12:54,589 --> 00:12:59,629
that there are so many of them to choose

00:12:56,000 --> 00:13:03,439
from which is kind of like why I asked

00:12:59,629 --> 00:13:05,779
in the beginning we do you use call

00:13:03,439 --> 00:13:08,059
builder or s built and then we have code

00:13:05,779 --> 00:13:10,240
ends and people de we have D built

00:13:08,059 --> 00:13:13,089
we have the package build package a

00:13:10,240 --> 00:13:15,860
package build package we have tons of

00:13:13,089 --> 00:13:19,129
wrappers or our existing tools and there

00:13:15,860 --> 00:13:20,030
are like different flavors and this this

00:13:19,129 --> 00:13:23,720
is good there

00:13:20,030 --> 00:13:25,880
and and that's bad and whatever so one

00:13:23,720 --> 00:13:27,800
of the main issues important for me was

00:13:25,880 --> 00:13:29,480
I don't want to build another tool I

00:13:27,800 --> 00:13:31,850
just want to view existing tools

00:13:29,480 --> 00:13:33,680
together to just be able to replace one

00:13:31,850 --> 00:13:35,330
component by the other if for whatever

00:13:33,680 --> 00:13:40,070
reason I'm hurt and unhappy with

00:13:35,330 --> 00:13:43,820
something it spilling on top of Jenkins

00:13:40,070 --> 00:13:45,620
Jenkins was called Hudson before in 2011

00:13:43,820 --> 00:13:47,450
it was renamed to Jenkins

00:13:45,620 --> 00:13:49,880
they have weekly releases where you can

00:13:47,450 --> 00:13:52,220
just follow current development they

00:13:49,880 --> 00:13:53,690
have LDS versions which is recommended

00:13:52,220 --> 00:13:57,530
if you run it in production or for

00:13:53,690 --> 00:13:59,750
actual usage its MIT license and

00:13:57,530 --> 00:14:02,360
nowadays there are more than 1,000

00:13:59,750 --> 00:14:05,360
plugins available for good and bad

00:14:02,360 --> 00:14:07,130
purposes like you need to identify which

00:14:05,360 --> 00:14:10,310
plugins are actually useful and which

00:14:07,130 --> 00:14:13,040
ones actually help and provide something

00:14:10,310 --> 00:14:16,330
for you there are more than 120 thousand

00:14:13,040 --> 00:14:18,710
registered installations as of July and

00:14:16,330 --> 00:14:20,870
just as a disclaimer it's written in

00:14:18,710 --> 00:14:23,030
Java but it's absolutely not restricted

00:14:20,870 --> 00:14:26,570
to to it at all you can run whatever

00:14:23,030 --> 00:14:30,140
kind of project with it

00:14:26,570 --> 00:14:34,540
it's like Chrome on steroids it's really

00:14:30,140 --> 00:14:38,810
just an and way of scheduling chops of

00:14:34,540 --> 00:14:41,570
managing artifacts in such stuff so wide

00:14:38,810 --> 00:14:43,040
Jenkins deep in view it's worse we

00:14:41,570 --> 00:14:44,930
started to formalize the existing

00:14:43,040 --> 00:14:47,930
knowledge we know about even packaging

00:14:44,930 --> 00:14:49,910
provide a framework we can work with

00:14:47,930 --> 00:14:52,850
provide a common ground to base further

00:14:49,910 --> 00:14:56,480
work on if we decide to to integrate new

00:14:52,850 --> 00:14:58,100
stuff it should be built on top of it we

00:14:56,480 --> 00:15:01,460
wanted to gather feedback from other

00:14:58,100 --> 00:15:04,940
users what might they need and what

00:15:01,460 --> 00:15:06,589
definitely useful and already happened

00:15:04,940 --> 00:15:08,660
is like you get contributions for

00:15:06,589 --> 00:15:10,880
further improving your internal system

00:15:08,660 --> 00:15:13,160
so it was also a kind of community

00:15:10,880 --> 00:15:15,170
building so we can talk to each other

00:15:13,160 --> 00:15:19,370
about problems to other companies or to

00:15:15,170 --> 00:15:21,290
other Debian developers have and don't

00:15:19,370 --> 00:15:23,630
trade new tools or standards really we

00:15:21,290 --> 00:15:26,900
are just relying on what's available in

00:15:23,630 --> 00:15:29,060
the deviant ecosystem and it should be

00:15:26,900 --> 00:15:32,510
easy to use order for neat non-avian

00:15:29,060 --> 00:15:33,820
folks like their people developing

00:15:32,510 --> 00:15:36,190
upstream software and

00:15:33,820 --> 00:15:38,860
would like to provide even packages as

00:15:36,190 --> 00:15:40,420
soon as they have some kind of working

00:15:38,860 --> 00:15:42,340
team and directory it's quite easy to

00:15:40,420 --> 00:15:45,700
get according pills with Jenkins given

00:15:42,340 --> 00:15:47,680
view so what's behind Jenkins deviant

00:15:45,700 --> 00:15:52,090
view it's open source project that I'm

00:15:47,680 --> 00:15:54,780
also MIT license started in 2011 we have

00:15:52,090 --> 00:15:58,300
more than 25 contributors to read so far

00:15:54,780 --> 00:16:03,060
it's written mainly in shell easy to

00:15:58,300 --> 00:16:05,920
adjust and extend and mainly through

00:16:03,060 --> 00:16:07,810
hoops and according a configuration

00:16:05,920 --> 00:16:10,840
variables environment variables

00:16:07,810 --> 00:16:12,700
it's just relying on see I wanna see I

00:16:10,840 --> 00:16:15,160
so ever so technically it would be

00:16:12,700 --> 00:16:19,060
possible to just switch Jenkins to

00:16:15,160 --> 00:16:22,990
something else but it's the easiest

00:16:19,060 --> 00:16:26,320
option and open source CIC are available

00:16:22,990 --> 00:16:29,260
it uses coupled people de as a built

00:16:26,320 --> 00:16:32,170
environment has out-of-the-box support

00:16:29,260 --> 00:16:34,810
for kit and subversion I know that there

00:16:32,170 --> 00:16:37,360
uses of bizarre and mercurial and

00:16:34,810 --> 00:16:40,210
whatever but out-of-the-box we support

00:16:37,360 --> 00:16:41,500
kit and subversion and with ready to go

00:16:40,210 --> 00:16:43,810
scripts

00:16:41,500 --> 00:16:45,790
it has repository management included

00:16:43,810 --> 00:16:49,300
with free pre pro which every one of you

00:16:45,790 --> 00:16:52,510
should know and and the so-called fright

00:16:49,300 --> 00:16:55,690
which is a very simple tool but seems to

00:16:52,510 --> 00:16:58,750
be useful for some specific purposes and

00:16:55,690 --> 00:17:00,880
with plenty of q8 who's included or in

00:16:58,750 --> 00:17:03,670
terms of support like you part slinky an

00:17:00,880 --> 00:17:07,209
auto packaged test have eight per critic

00:17:03,670 --> 00:17:10,209
check and check system so who is using

00:17:07,209 --> 00:17:12,670
and Jenkins Steve and view we have in

00:17:10,209 --> 00:17:15,160
Agra mock project we also horse D

00:17:12,670 --> 00:17:19,030
package file in a drama fest tools also

00:17:15,160 --> 00:17:21,370
all the camera projects or their remote

00:17:19,030 --> 00:17:25,030
packages Postgres has a pretty

00:17:21,370 --> 00:17:26,589
sophisticated and pick set up building

00:17:25,030 --> 00:17:28,960
for all the supported

00:17:26,589 --> 00:17:32,320
Postgres versions for all the all kinds

00:17:28,960 --> 00:17:34,000
of distributions LLVM compiler Wikimedia

00:17:32,320 --> 00:17:36,460
so there are plenty of users and we get

00:17:34,000 --> 00:17:38,980
quite interesting feedback form in terms

00:17:36,460 --> 00:17:41,260
of what they actually need if you want

00:17:38,980 --> 00:17:42,940
to test it after the talk and there's

00:17:41,260 --> 00:17:47,180
the manual approach where you can just

00:17:42,940 --> 00:17:50,240
set up anything manually but

00:17:47,180 --> 00:17:53,210
automated setup we're just get some

00:17:50,240 --> 00:17:56,150
script easy to review it's trivial it's

00:17:53,210 --> 00:17:58,070
just a puppet resize or module which

00:17:56,150 --> 00:18:00,410
sets up Jenkins Jenkins deep and view

00:17:58,070 --> 00:18:02,870
and and three chops for playing around

00:18:00,410 --> 00:18:05,330
so you get everything what you need it's

00:18:02,870 --> 00:18:06,890
setup we've in like five minutes on

00:18:05,330 --> 00:18:10,040
faster machines it just depends on your

00:18:06,890 --> 00:18:12,410
system it's setup in in some few minutes

00:18:10,040 --> 00:18:14,990
and this is what you'll get you get a

00:18:12,410 --> 00:18:17,840
chenkin set up with with three Jenkins

00:18:14,990 --> 00:18:20,120
jobs Jenkins even view source Jenkins

00:18:17,840 --> 00:18:22,370
deviant view binaries and Jenkins even

00:18:20,120 --> 00:18:25,430
view cue birds so this is what we will

00:18:22,370 --> 00:18:27,110
talk about now the so called whatever

00:18:25,430 --> 00:18:29,240
project you are working on source is

00:18:27,110 --> 00:18:31,340
generating this given source package for

00:18:29,240 --> 00:18:34,040
you it's relying on the version control

00:18:31,340 --> 00:18:35,410
system so it's except it expects that

00:18:34,040 --> 00:18:37,220
everything is there in version control

00:18:35,410 --> 00:18:41,060
everything what's on a version control

00:18:37,220 --> 00:18:44,720
medicine it generates the upstream

00:18:41,060 --> 00:18:48,560
source even changes if applies the

00:18:44,720 --> 00:18:50,510
control file it's actually executing a

00:18:48,560 --> 00:18:53,480
so-called script generate get or

00:18:50,510 --> 00:18:55,130
generate SVN sep shot this also

00:18:53,480 --> 00:18:57,290
automates to change log handling so you

00:18:55,130 --> 00:18:58,880
don't have to manually write anything to

00:18:57,290 --> 00:19:02,240
the change look it's it's looking at

00:18:58,880 --> 00:19:06,920
your history thanks for kiddies eh get

00:19:02,240 --> 00:19:09,020
on very useful important it needs to be

00:19:06,920 --> 00:19:10,400
run only once per project except if

00:19:09,020 --> 00:19:12,920
you're building for multiple

00:19:10,400 --> 00:19:15,590
distributions something different but

00:19:12,920 --> 00:19:18,320
out of the box you just need to build

00:19:15,590 --> 00:19:20,990
once as usual for the event packaging in

00:19:18,320 --> 00:19:23,810
the pioneers job then we do the actual

00:19:20,990 --> 00:19:25,880
demon binary package build we have a

00:19:23,810 --> 00:19:28,850
script called built and provide package

00:19:25,880 --> 00:19:31,580
it automates the people lower call

00:19:28,850 --> 00:19:33,560
builder actually setup so usually if you

00:19:31,580 --> 00:19:35,540
don't have any special needs it does

00:19:33,560 --> 00:19:37,340
everything for you automatically so you

00:19:35,540 --> 00:19:39,080
don't even have to set up capital or

00:19:37,340 --> 00:19:42,200
whatever everything will be set up for

00:19:39,080 --> 00:19:43,750
you and you build once per architecture

00:19:42,200 --> 00:19:46,790
or distribution whatever you are

00:19:43,750 --> 00:19:51,760
targeting except for architecture all

00:19:46,790 --> 00:19:55,010
packages of course the pupil chops is

00:19:51,760 --> 00:19:58,730
useful to get automated install upgrade

00:19:55,010 --> 00:20:00,320
and removal tests it's optional you

00:19:58,730 --> 00:20:01,820
don't have to use it of course

00:20:00,320 --> 00:20:04,549
it's useful since you might forget about

00:20:01,820 --> 00:20:06,110
it you know you don't have the according

00:20:04,549 --> 00:20:07,159
pubert set up and available if you're

00:20:06,110 --> 00:20:09,679
working on a package

00:20:07,159 --> 00:20:11,690
janki's TV glue automates this and you

00:20:09,679 --> 00:20:15,769
don't have to take care of this manually

00:20:11,690 --> 00:20:17,929
as well we have the repository handling

00:20:15,769 --> 00:20:19,610
it's automatically handling all the

00:20:17,929 --> 00:20:21,740
repositories without any manual

00:20:19,610 --> 00:20:24,590
interaction so you don't have to call

00:20:21,740 --> 00:20:27,559
any repro command lines or yourself the

00:20:24,590 --> 00:20:29,779
configuration setup for you by default

00:20:27,559 --> 00:20:33,320
it's included in this so called binaries

00:20:29,779 --> 00:20:36,470
Jenkins job just for for to make it easy

00:20:33,320 --> 00:20:38,960
and once you scale out or have specific

00:20:36,470 --> 00:20:42,019
needs you might want to just separate it

00:20:38,960 --> 00:20:43,490
into a specific Jenkins job we by

00:20:42,019 --> 00:20:45,919
default assume that it's the whole

00:20:43,490 --> 00:20:48,169
so-called project repos job and you

00:20:45,919 --> 00:20:50,330
can't run control it then to just build

00:20:48,169 --> 00:20:52,700
only in the binaries job and provide

00:20:50,330 --> 00:20:55,009
only then in the in the repos job so you

00:20:52,700 --> 00:20:56,809
can be very specific what you need you

00:20:55,009 --> 00:20:59,179
might even want to use the put or

00:20:56,809 --> 00:21:00,889
whatever add a tool to just upload to a

00:20:59,179 --> 00:21:03,379
repository then you can just split off

00:21:00,889 --> 00:21:05,779
the binaries part in the repository but

00:21:03,379 --> 00:21:10,250
it's just for having it configurable as

00:21:05,779 --> 00:21:12,500
needed then we apply further QA testing

00:21:10,250 --> 00:21:14,539
lincoln is automatically executed in the

00:21:12,500 --> 00:21:16,220
source and in the binaries job auto

00:21:14,539 --> 00:21:17,990
package test is also executed

00:21:16,220 --> 00:21:20,090
automatically so once you have a deben

00:21:17,990 --> 00:21:22,429
tests a directory in your in your

00:21:20,090 --> 00:21:25,669
package it automatically invokes

00:21:22,429 --> 00:21:28,399
auto package tests it looks at the

00:21:25,669 --> 00:21:30,559
according code policies or of pearl

00:21:28,399 --> 00:21:33,409
shell code peyten

00:21:30,559 --> 00:21:36,289
and all the results are available as tap

00:21:33,409 --> 00:21:39,289
and che unit tests in for jenkins usage

00:21:36,289 --> 00:21:42,440
like you see in this line of code if you

00:21:39,289 --> 00:21:44,870
have a problem jenkins then can just

00:21:42,440 --> 00:21:47,299
provide according feedback to a failed

00:21:44,870 --> 00:21:50,480
appealed or should we continue it's fine

00:21:47,299 --> 00:21:53,419
for me if if just shell check is is

00:21:50,480 --> 00:21:58,549
unhappy so all the results are available

00:21:53,419 --> 00:22:00,860
as according reports then so an example

00:21:58,549 --> 00:22:05,330
of a build pipeline we use is like you

00:22:00,860 --> 00:22:07,669
review i push it to review and run some

00:22:05,330 --> 00:22:10,309
unit tests available in your patent

00:22:07,669 --> 00:22:12,320
project for example then if this

00:22:10,309 --> 00:22:13,730
succeeds you continue to building the

00:22:12,320 --> 00:22:17,660
source package you

00:22:13,730 --> 00:22:19,310
run all the binary builds run the pupils

00:22:17,660 --> 00:22:22,520
checks make sure that the package itself

00:22:19,310 --> 00:22:25,100
is fine include according reciting the

00:22:22,520 --> 00:22:27,290
in the repo and then be able to just app

00:22:25,100 --> 00:22:34,130
get install the package from their repos

00:22:27,290 --> 00:22:37,220
you're interested in now managing mainly

00:22:34,130 --> 00:22:39,200
Jenkins jobs without driving nuts once

00:22:37,220 --> 00:22:41,690
you start for every single project to

00:22:39,200 --> 00:22:46,280
have like five or maybe even ten Jenkins

00:22:41,690 --> 00:22:48,980
jobs and you have product with 50 to 100

00:22:46,280 --> 00:22:50,930
even packages and this is quite

00:22:48,980 --> 00:22:53,210
difficult to manage manually and you

00:22:50,930 --> 00:22:55,310
might want to change the behavior of all

00:22:53,210 --> 00:22:59,510
the binaries jobs or of all the source

00:22:55,310 --> 00:23:01,670
jobs so what what to do and the

00:22:59,510 --> 00:23:04,730
OpenStack project has a very nice tool

00:23:01,670 --> 00:23:06,980
called Jenkins job builder and it relies

00:23:04,730 --> 00:23:08,990
on on llaman files for configuration you

00:23:06,980 --> 00:23:12,530
just have plain text files describing

00:23:08,990 --> 00:23:16,310
how your project should look like and we

00:23:12,530 --> 00:23:18,400
have on on github from the supplies

00:23:16,310 --> 00:23:21,140
company there's a camellia Deb Jenkins

00:23:18,400 --> 00:23:23,510
project which has an example of how this

00:23:21,140 --> 00:23:27,560
could look like the plenty of others

00:23:23,510 --> 00:23:29,870
available as well and it's very nice to

00:23:27,560 --> 00:23:32,060
use that way because you don't have to

00:23:29,870 --> 00:23:34,640
click anything in Jenkins web interface

00:23:32,060 --> 00:23:36,860
at all for handling that the jobs you

00:23:34,640 --> 00:23:38,600
have the possibility to just use it on a

00:23:36,860 --> 00:23:40,910
version controller so we have your repos

00:23:38,600 --> 00:23:43,340
with all that your champions configs in

00:23:40,910 --> 00:23:46,370
there and if you apply a change you just

00:23:43,340 --> 00:23:48,260
committed with the according message and

00:23:46,370 --> 00:23:50,840
of course you can include it in the code

00:23:48,260 --> 00:23:53,000
review system system again like does

00:23:50,840 --> 00:23:55,880
this change make actually sense for our

00:23:53,000 --> 00:24:01,210
infrastructure will the result look good

00:23:55,880 --> 00:24:03,650
included in testing environments etc now

00:24:01,210 --> 00:24:06,650
during this process I mean this is like

00:24:03,650 --> 00:24:09,260
I was talking for 25 minutes but this

00:24:06,650 --> 00:24:11,690
took us more than than a few years to

00:24:09,260 --> 00:24:15,100
actually be there where we are and we

00:24:11,690 --> 00:24:18,110
had quite some some lessons on the way

00:24:15,100 --> 00:24:20,780
developer needs might be quite different

00:24:18,110 --> 00:24:23,830
from operational risk abuse needs they

00:24:20,780 --> 00:24:25,730
might want to have a specific package

00:24:23,830 --> 00:24:27,049
which isn't available in the

00:24:25,730 --> 00:24:29,450
distribution yet or they might

00:24:27,049 --> 00:24:30,830
need a specific version of a package

00:24:29,450 --> 00:24:33,710
which isn't available in the according

00:24:30,830 --> 00:24:36,019
distribution yet of course you should

00:24:33,710 --> 00:24:38,840
contribute back to the upstream

00:24:36,019 --> 00:24:42,049
distribution in terms of here of course

00:24:38,840 --> 00:24:44,419
Vivian when we said never there might be

00:24:42,049 --> 00:24:46,700
packages which aren't just beautiful or

00:24:44,419 --> 00:24:52,220
whatever for for some reason but it

00:24:46,700 --> 00:24:55,730
makes sense to just just push back

00:24:52,220 --> 00:24:59,950
upstream as as possible diverse people

00:24:55,730 --> 00:25:02,720
improve the overall quality it's it's

00:24:59,950 --> 00:25:06,159
it's interesting to have some common

00:25:02,720 --> 00:25:08,720
ground of infrastructure for systems but

00:25:06,159 --> 00:25:10,700
for for code quality it's really

00:25:08,720 --> 00:25:12,950
interesting to have diverse people and

00:25:10,700 --> 00:25:15,139
this includes different distributions as

00:25:12,950 --> 00:25:18,289
well like not just to think about what

00:25:15,139 --> 00:25:20,330
even provides outsiders might provide

00:25:18,289 --> 00:25:22,940
interest input from other distributions

00:25:20,330 --> 00:25:25,850
code review requires good remote working

00:25:22,940 --> 00:25:28,249
culture and open source Forks are used

00:25:25,850 --> 00:25:31,850
to remote working so I'm not actually

00:25:28,249 --> 00:25:33,889
here to to promote this because every

00:25:31,850 --> 00:25:36,919
one of you might be used to working in

00:25:33,889 --> 00:25:39,859
this kind of working style but it's

00:25:36,919 --> 00:25:42,710
something not not so much used in in in

00:25:39,859 --> 00:25:45,730
corporate environments that aren't

00:25:42,710 --> 00:25:49,119
written by remote working culture

00:25:45,730 --> 00:25:52,669
external dependencies like we have

00:25:49,119 --> 00:25:56,119
failures on github or sipping is down or

00:25:52,669 --> 00:25:58,100
unreachable or PI pi PI P Ruby gams

00:25:56,119 --> 00:26:00,169
puppet labs Percona this is a these are

00:25:58,100 --> 00:26:02,570
all examples we we hit in production

00:26:00,169 --> 00:26:04,730
usage so what you definitely want to

00:26:02,570 --> 00:26:08,269
have these local mirrors of every

00:26:04,730 --> 00:26:10,549
external dependency you have it's also

00:26:08,269 --> 00:26:12,799
good because if speed you get a speed-up

00:26:10,549 --> 00:26:15,379
of your built-in Maya man and you have

00:26:12,799 --> 00:26:17,779
staging options like you before going

00:26:15,379 --> 00:26:20,389
and shipping this to the customer you

00:26:17,779 --> 00:26:22,909
decide can i push an update from this

00:26:20,389 --> 00:26:26,649
specific module or package and only then

00:26:22,909 --> 00:26:26,649
I will provided in the product schmira

00:26:27,399 --> 00:26:31,580
configuration management it's essential

00:26:29,570 --> 00:26:33,649
to to just have the infrastructure as

00:26:31,580 --> 00:26:35,389
code if you want to apply any changes to

00:26:33,649 --> 00:26:36,859
all your chenkin slaves this should just

00:26:35,389 --> 00:26:38,720
go out through the configuration

00:26:36,859 --> 00:26:39,950
management whatever you are using if

00:26:38,720 --> 00:26:43,549
it's puppet or NC

00:26:39,950 --> 00:26:45,019
or chef doesn't matter it but it's

00:26:43,549 --> 00:26:47,019
essential that you have some kind of

00:26:45,019 --> 00:26:49,940
configuration management to ensure

00:26:47,019 --> 00:26:53,000
consistency also consistent time zones

00:26:49,940 --> 00:26:55,159
make all the systems in the same time

00:26:53,000 --> 00:26:58,190
zone make sure they they use some

00:26:55,159 --> 00:27:00,740
network time protocol so all the systems

00:26:58,190 --> 00:27:06,110
are you can compare locks from different

00:27:00,740 --> 00:27:09,980
systems also the catch-22 situation like

00:27:06,110 --> 00:27:11,630
we ran into this the build scripts are

00:27:09,980 --> 00:27:13,220
broken but the built infrastructure

00:27:11,630 --> 00:27:15,529
itself receives the updates for the

00:27:13,220 --> 00:27:17,720
build infrastructure so we have some

00:27:15,529 --> 00:27:18,620
kind of recursion problem how do you fix

00:27:17,720 --> 00:27:20,960
a problem if the underlying

00:27:18,620 --> 00:27:22,090
infrastructure actually applying those

00:27:20,960 --> 00:27:25,100
changes is broken

00:27:22,090 --> 00:27:27,679
alright so upgrading from from we see to

00:27:25,100 --> 00:27:29,120
the chassis was everything working but

00:27:27,679 --> 00:27:31,159
the deployment of the configuration

00:27:29,120 --> 00:27:36,130
management depends on unit tests which

00:27:31,159 --> 00:27:38,600
don't work on chassis yet so in terms of

00:27:36,130 --> 00:27:40,309
this recursion problem you should

00:27:38,600 --> 00:27:43,549
definitely have some test infrastructure

00:27:40,309 --> 00:27:46,970
for for setup for configuration changes

00:27:43,549 --> 00:27:48,169
so you don't break production systems

00:27:46,970 --> 00:27:50,029
and this doesn't mean just the

00:27:48,169 --> 00:27:52,970
production system for the customer it's

00:27:50,029 --> 00:27:56,450
also the production system of your own

00:27:52,970 --> 00:27:58,010
infrastructure the every built of a

00:27:56,450 --> 00:28:00,080
system might look different from current

00:27:58,010 --> 00:28:01,940
currently running one even with config

00:28:00,080 --> 00:28:03,590
management because just because you

00:28:01,940 --> 00:28:06,080
install the package now doesn't mean the

00:28:03,590 --> 00:28:07,970
same result will be in two years if you

00:28:06,080 --> 00:28:09,529
rebuilt the system from scratch so you

00:28:07,970 --> 00:28:11,269
should also have some testing for the

00:28:09,529 --> 00:28:13,250
configuration management in place there

00:28:11,269 --> 00:28:15,590
are plenty of projects like service pack

00:28:13,250 --> 00:28:17,450
em Spectator just server test kitchen

00:28:15,590 --> 00:28:19,279
whatever you prefer but you should

00:28:17,450 --> 00:28:25,299
definitely have some tests also for your

00:28:19,279 --> 00:28:29,029
own infrastructure available some tips

00:28:25,299 --> 00:28:31,580
regular rebuilds of all packages are

00:28:29,029 --> 00:28:34,220
very good and important because you

00:28:31,580 --> 00:28:35,690
apply recent policies and and package

00:28:34,220 --> 00:28:37,370
build infrastructure changes to the

00:28:35,690 --> 00:28:39,320
packages once you change the underlying

00:28:37,370 --> 00:28:40,669
built infrastructure the result might be

00:28:39,320 --> 00:28:44,090
different from whatever you're building

00:28:40,669 --> 00:28:46,130
you might have parallel built for your

00:28:44,090 --> 00:28:48,710
given packages and this is a change in

00:28:46,130 --> 00:28:50,899
your infrastructure and you have to

00:28:48,710 --> 00:28:52,789
rebuild the packages and this means what

00:28:50,899 --> 00:28:53,389
we are doing is like for every single

00:28:52,789 --> 00:28:55,879
release we

00:28:53,389 --> 00:28:58,129
with all the packages we never take the

00:28:55,879 --> 00:28:59,959
package from the previous release all

00:28:58,129 --> 00:29:02,479
the packages are built with all this

00:28:59,959 --> 00:29:05,450
current infrastructure if you have to

00:29:02,479 --> 00:29:07,190
deal with plenty of repositories no

00:29:05,450 --> 00:29:10,009
matter if it's get subversion of

00:29:07,190 --> 00:29:11,899
whatever they are or my repos nowadays

00:29:10,009 --> 00:29:15,079
tool is very useful for dealing with

00:29:11,899 --> 00:29:16,969
large amounts of repositories the Pearl

00:29:15,079 --> 00:29:19,070
package group has a very good

00:29:16,969 --> 00:29:23,299
documentation about this on

00:29:19,070 --> 00:29:26,779
deben wiki and very important integrate

00:29:23,299 --> 00:29:28,549
your continuous delivery system in your

00:29:26,779 --> 00:29:30,469
monitoring infrastructure if there's

00:29:28,549 --> 00:29:32,769
something broke it should get the same

00:29:30,469 --> 00:29:35,629
attention as fixing something in

00:29:32,769 --> 00:29:37,789
customer production it as soon as you

00:29:35,629 --> 00:29:41,950
can't build anymore packages all the

00:29:37,789 --> 00:29:44,989
developers are stuck in in development

00:29:41,950 --> 00:29:47,419
it's interesting also to to gather some

00:29:44,989 --> 00:29:50,179
some metrics independent from whatever

00:29:47,419 --> 00:29:53,779
you use if you're pushing data into

00:29:50,179 --> 00:29:56,659
Jenkins you catch like build times and

00:29:53,779 --> 00:29:58,669
and locks and whatever into Jenkins but

00:29:56,659 --> 00:30:01,549
once you delete a chop it's gone

00:29:58,669 --> 00:30:07,039
also there might be infrastructure

00:30:01,549 --> 00:30:09,229
changes or cleanup for for the for the

00:30:07,039 --> 00:30:10,969
champions jobs and then you lose all

00:30:09,229 --> 00:30:13,989
this kind of data so it's interesting to

00:30:10,969 --> 00:30:17,869
just provide the metrics into some

00:30:13,989 --> 00:30:21,709
independent project or database or

00:30:17,869 --> 00:30:25,129
whatever and we're using Gerrit as a

00:30:21,709 --> 00:30:28,399
code review system and if you don't like

00:30:25,129 --> 00:30:30,919
the web interface many don't know this

00:30:28,399 --> 00:30:33,979
yet there's also from the OpenStack

00:30:30,919 --> 00:30:35,509
community or project itself the Gertie

00:30:33,979 --> 00:30:37,249
command-line tool which provides a

00:30:35,509 --> 00:30:39,469
command-line interface to carry it so

00:30:37,249 --> 00:30:42,829
you can just use it on the command line

00:30:39,469 --> 00:30:45,079
it has great support for offline so you

00:30:42,829 --> 00:30:45,259
can actually go to your airplane hack on

00:30:45,079 --> 00:30:48,409
it

00:30:45,259 --> 00:30:51,349
review and once you go back online you

00:30:48,409 --> 00:30:54,289
can just push all the things you did

00:30:51,349 --> 00:30:58,009
which is absolutely great for working

00:30:54,289 --> 00:31:01,669
with it and also good is some kind of

00:30:58,009 --> 00:31:05,929
Jenkins verified chop like you whatever

00:31:01,669 --> 00:31:07,250
MCI or CD server you might use but let's

00:31:05,929 --> 00:31:09,080
call it a verified job

00:31:07,250 --> 00:31:10,880
ensure the system actually is working as

00:31:09,080 --> 00:31:13,150
needed artist leaves there I need and

00:31:10,880 --> 00:31:16,790
can add trigger built of some specific

00:31:13,150 --> 00:31:18,680
chopper test chop form does

00:31:16,790 --> 00:31:21,620
authentication work do you have the

00:31:18,680 --> 00:31:23,930
users look there that do the notes

00:31:21,620 --> 00:31:26,330
actually look good because once you get

00:31:23,930 --> 00:31:28,760
get problems in your infrastructure and

00:31:26,330 --> 00:31:32,420
restarting the CI server

00:31:28,760 --> 00:31:36,410
things get out of control and we

00:31:32,420 --> 00:31:38,540
identified some anti patterns for for a

00:31:36,410 --> 00:31:41,420
continuous delivery environment as soon

00:31:38,540 --> 00:31:43,160
as you start with a manual as is H to

00:31:41,420 --> 00:31:45,980
some system you might change the

00:31:43,160 --> 00:31:47,540
configuration you might change the

00:31:45,980 --> 00:31:50,540
underlying system install additional

00:31:47,540 --> 00:31:53,000
packages which change existing behavior

00:31:50,540 --> 00:31:56,780
and provide according debugging options

00:31:53,000 --> 00:31:58,100
instead this is like keep the coop in

00:31:56,780 --> 00:32:00,260
the environment up and running and

00:31:58,100 --> 00:32:02,780
provided to us to another system or

00:32:00,260 --> 00:32:04,810
stuff like that but try to avoid manual

00:32:02,780 --> 00:32:10,070
SSH

00:32:04,810 --> 00:32:12,890
as soon as tests go okay not okay okay

00:32:10,070 --> 00:32:15,770
not okay and you don't know why people

00:32:12,890 --> 00:32:17,810
will just stop looking looking at them

00:32:15,770 --> 00:32:19,400
and take them serious and they won't

00:32:17,810 --> 00:32:23,410
have any trust and they won't care at

00:32:19,400 --> 00:32:26,180
all so once you integrate new QA tool

00:32:23,410 --> 00:32:28,940
make sure that it's working probably

00:32:26,180 --> 00:32:32,120
before making it mandatory to accept in

00:32:28,940 --> 00:32:35,810
a pipeline like if we want to have all

00:32:32,120 --> 00:32:39,290
the pew parts jobs to be ok they should

00:32:35,810 --> 00:32:45,410
at least be once ok everywhere

00:32:39,290 --> 00:32:48,260
I also tried to avoid pulling or cron

00:32:45,410 --> 00:32:50,930
jobs like at the specific times this is

00:32:48,260 --> 00:32:53,450
like the D install run of given like you

00:32:50,930 --> 00:32:56,420
know I have to wait for hours to get my

00:32:53,450 --> 00:32:58,220
change in instead try to trigger

00:32:56,420 --> 00:33:01,130
immediate actions once you push

00:32:58,220 --> 00:33:04,220
something immediately start with it this

00:33:01,130 --> 00:33:07,760
is like dink Jenkins jobs don't pull for

00:33:04,220 --> 00:33:10,160
the the polling for there the version

00:33:07,760 --> 00:33:12,080
control changes instead once you know

00:33:10,160 --> 00:33:14,240
that something is going up to the git

00:33:12,080 --> 00:33:17,150
server to the Garrett or code review

00:33:14,240 --> 00:33:19,280
system whatever just provide according

00:33:17,150 --> 00:33:21,110
triggers to trigger the according builds

00:33:19,280 --> 00:33:25,220
I want immediate

00:33:21,110 --> 00:33:28,010
accent and effects the manual setup of

00:33:25,220 --> 00:33:29,690
machine configs um I'm not sure if this

00:33:28,010 --> 00:33:32,630
is an official term but I just recently

00:33:29,690 --> 00:33:35,240
read it for from markaba that there's no

00:33:32,630 --> 00:33:40,760
flake it all they look alike but they

00:33:35,240 --> 00:33:43,280
are still different and as soon as you

00:33:40,760 --> 00:33:45,350
start to run an installer manually and

00:33:43,280 --> 00:33:47,540
there's one single change in it the

00:33:45,350 --> 00:33:50,600
result might be just different so really

00:33:47,540 --> 00:33:52,670
it should be all about automation what

00:33:50,600 --> 00:33:55,130
was kind of a problem for us and we have

00:33:52,670 --> 00:33:58,490
in Jenkins given you several wrappers

00:33:55,130 --> 00:34:02,660
for that purposes is like you have tools

00:33:58,490 --> 00:34:04,970
with no standardized output so it makes

00:34:02,660 --> 00:34:07,400
parsing Hatem if you're developing a new

00:34:04,970 --> 00:34:09,830
tool make sure that you can rely on the

00:34:07,400 --> 00:34:12,740
output and and parse it appropriately

00:34:09,830 --> 00:34:16,399
and checklists are a good way to

00:34:12,740 --> 00:34:18,470
identify that something is going wrong

00:34:16,399 --> 00:34:19,760
because you might just miss something

00:34:18,470 --> 00:34:21,500
from the checklist the checklist might

00:34:19,760 --> 00:34:23,480
be out of date just use automation

00:34:21,500 --> 00:34:26,629
instead if you want to check for

00:34:23,480 --> 00:34:28,669
something user champions job hard coding

00:34:26,629 --> 00:34:31,010
IP addresses host names port numbers

00:34:28,669 --> 00:34:34,909
whatever instead of configurability is

00:34:31,010 --> 00:34:37,010
is bad thing and if you build the same

00:34:34,909 --> 00:34:39,740
thing and in the continuous delivery

00:34:37,010 --> 00:34:41,840
pipeline once and once again don't do

00:34:39,740 --> 00:34:45,520
this it should be will once and then

00:34:41,840 --> 00:34:48,399
reused for tests for deploying whatever

00:34:45,520 --> 00:34:49,850
and if you don't have according

00:34:48,399 --> 00:34:53,419
notifications

00:34:49,850 --> 00:34:55,010
developers start to wait and to pull for

00:34:53,419 --> 00:34:58,790
something instead of just continuing to

00:34:55,010 --> 00:35:01,100
work on it we have some unresolved

00:34:58,790 --> 00:35:03,500
problems actually dependence manager

00:35:01,100 --> 00:35:05,119
dependency management is is kind of an

00:35:03,500 --> 00:35:08,840
unsolved problem like if you build

00:35:05,119 --> 00:35:11,180
depend on package bar and you need

00:35:08,840 --> 00:35:14,330
another package build before it's kind

00:35:11,180 --> 00:35:16,970
of tricky to get this automated so we

00:35:14,330 --> 00:35:18,710
are researching on that front we have

00:35:16,970 --> 00:35:20,720
built depends and depends but we have no

00:35:18,710 --> 00:35:23,210
test depend so we can't build packages

00:35:20,720 --> 00:35:25,400
which just have which say I need decent

00:35:23,210 --> 00:35:27,859
isn't this package but just for testing

00:35:25,400 --> 00:35:31,640
not for building and not for shipping

00:35:27,859 --> 00:35:34,550
for the runtime once you have high

00:35:31,640 --> 00:35:37,790
frequency and continuous delivery

00:35:34,550 --> 00:35:39,770
even repositories cause apt to fail

00:35:37,790 --> 00:35:42,370
quite often because the the mirror is

00:35:39,770 --> 00:35:44,720
updated and we have had some mismatches

00:35:42,370 --> 00:35:48,740
we are seeing this more and more often

00:35:44,720 --> 00:35:50,570
and I think we have some kind of ideas

00:35:48,740 --> 00:35:55,670
how to tackle that but I'd like to talk

00:35:50,570 --> 00:35:58,310
to the according maintenance before pew

00:35:55,670 --> 00:36:00,650
parts we had some like successful runs

00:35:58,310 --> 00:36:04,340
even if the package couldn't be

00:36:00,650 --> 00:36:06,290
installed so it's the actual solution

00:36:04,340 --> 00:36:08,360
for people at was remove the package and

00:36:06,290 --> 00:36:13,010
everything is fine the actual package

00:36:08,360 --> 00:36:14,300
should try to to test so just to give

00:36:13,010 --> 00:36:15,940
you an idea that just these are the

00:36:14,300 --> 00:36:19,400
projects that might be were also look

00:36:15,940 --> 00:36:20,960
given every one of you hopefully Jenkins

00:36:19,400 --> 00:36:23,030
Jenkins given you might help you a

00:36:20,960 --> 00:36:27,230
vagrant is youthful poor for all this

00:36:23,030 --> 00:36:29,300
automated testing as a developer Gerrit

00:36:27,230 --> 00:36:30,860
and cartee for code review is really

00:36:29,300 --> 00:36:33,100
nice Jenkins job builder definitely

00:36:30,860 --> 00:36:34,900
worth a look

00:36:33,100 --> 00:36:36,890
everything under version control

00:36:34,900 --> 00:36:40,490
automation is really important

00:36:36,890 --> 00:36:43,370
use dashboards for for for abstraction

00:36:40,490 --> 00:36:46,960
to not have users get into the details

00:36:43,370 --> 00:36:49,520
of Jenkins tests tests tests really and

00:36:46,960 --> 00:36:51,950
built on established workflows and tools

00:36:49,520 --> 00:36:55,880
like the guild build package workflow

00:36:51,950 --> 00:36:57,770
works very well for us and the only bad

00:36:55,880 --> 00:37:00,110
thing about this is once you use to that

00:36:57,770 --> 00:37:04,790
working it's really horrible to move

00:37:00,110 --> 00:37:08,060
outside of such environments and the one

00:37:04,790 --> 00:37:09,470
of you who are interested in in getting

00:37:08,060 --> 00:37:14,150
deeper into this we have a champion

00:37:09,470 --> 00:37:17,870
Steven gloop off on the 21st in room

00:37:14,150 --> 00:37:21,610
Helsinki I would invite to show up there

00:37:17,870 --> 00:37:25,420
I think time is over

00:37:21,610 --> 00:37:25,420
yeah are there

00:37:44,210 --> 00:37:51,090
hello so I'm under the piano protect my

00:37:48,170 --> 00:37:53,550
maintainer yeah and so I've been exposed

00:37:51,090 --> 00:37:55,470
to a lot of sea ice from OpenStack world

00:37:53,550 --> 00:37:59,040
so I've been using Jenkins to build

00:37:55,470 --> 00:38:04,290
packages for like two years without

00:37:59,040 --> 00:38:06,600
Jenkins Debian grew the thing is I'm

00:38:04,290 --> 00:38:09,810
very happy to see that this kind of

00:38:06,600 --> 00:38:12,540
usage of ACI is spreading and that you

00:38:09,810 --> 00:38:15,900
are using it to but what I would like to

00:38:12,540 --> 00:38:19,170
happen is that we use it widely inside

00:38:15,900 --> 00:38:23,660
the gun to do that unfortunately we have

00:38:19,170 --> 00:38:26,550
to package Chang Garrett okay so I

00:38:23,660 --> 00:38:31,140
started to do that during the con 5

00:38:26,550 --> 00:38:34,440
package one Java library invite everyone

00:38:31,140 --> 00:38:37,020
to join that effort so I don't know much

00:38:34,440 --> 00:38:39,660
about Java before that conf I didn't

00:38:37,020 --> 00:38:43,770
even know how to maintain something with

00:38:39,660 --> 00:38:45,750
maven and so obviously I'd need help and

00:38:43,770 --> 00:38:49,440
I don't want to have it done all by

00:38:45,750 --> 00:38:52,280
myself I simply would won't have the

00:38:49,440 --> 00:38:55,440
time to do it alone so first like please

00:38:52,280 --> 00:38:57,690
join me in doing that effort I know

00:38:55,440 --> 00:39:01,680
everybody hates packaged in Java Java in

00:38:57,690 --> 00:39:03,420
Debian but we have to do it that's the

00:39:01,680 --> 00:39:05,250
first thing and then so the final goal

00:39:03,420 --> 00:39:08,580
would be you know already all that we

00:39:05,250 --> 00:39:09,900
have des right so d gates makes the

00:39:08,580 --> 00:39:14,010
whole of the Debian archive available

00:39:09,900 --> 00:39:16,380
for everyone to use using it what what I

00:39:14,010 --> 00:39:20,460
envisioned would be using Gerrit on top

00:39:16,380 --> 00:39:23,910
of the gate and then the the people that

00:39:20,460 --> 00:39:26,910
are in the uploaders field would be set

00:39:23,910 --> 00:39:29,310
as quarry reversing in garrett and then

00:39:26,910 --> 00:39:31,860
so the we would have this kind of CI you

00:39:29,310 --> 00:39:33,920
were working about building the package

00:39:31,860 --> 00:39:36,890
running past engine

00:39:33,920 --> 00:39:39,650
not and then once once it's done then

00:39:36,890 --> 00:39:44,540
the people's in the lower fields would

00:39:39,650 --> 00:39:46,609
be able to say vote +2 Pro so that be

00:39:44,540 --> 00:39:48,500
the goal and I think it's really really

00:39:46,609 --> 00:39:51,650
important that we do that and that we

00:39:48,500 --> 00:39:54,319
have it available on Ally OAuth or in

00:39:51,650 --> 00:39:56,150
another machine so the DSA already

00:39:54,319 --> 00:39:58,220
talked with them and they refuse to use

00:39:56,150 --> 00:40:00,619
Garriott if it's not packaged in the VN

00:39:58,220 --> 00:40:12,859
and I think there are right to reply

00:40:00,619 --> 00:40:15,549
this way so Garrett do you know about

00:40:12,859 --> 00:40:21,470
how many dependencies we have left to go

00:40:15,549 --> 00:40:33,950
to package the question was how many

00:40:21,470 --> 00:40:35,839
packages are left in 60 Garrett used

00:40:33,950 --> 00:40:38,900
once before

00:40:35,839 --> 00:40:41,599
once upon a time used ends to build now

00:40:38,900 --> 00:40:44,049
we choose this back so before we package

00:40:41,599 --> 00:40:47,540
Garrett we need to package Burke

00:40:44,049 --> 00:40:49,609
it alone is a lot of work and then once

00:40:47,540 --> 00:40:51,859
we have package Burke like it maybe 30

00:40:49,609 --> 00:40:55,520
packages then we have to do it for

00:40:51,859 --> 00:40:58,780
Garrett which is maybe again 30 to 40

00:40:55,520 --> 00:41:04,630
packages in Java not sure so because it

00:40:58,780 --> 00:41:04,630
you will discover as we try to build it

00:41:05,290 --> 00:41:12,829
continues so just a short question what

00:41:10,339 --> 00:41:16,339
are you using for the dashboards and we

00:41:12,829 --> 00:41:18,799
write our own ones started in different

00:41:16,339 --> 00:41:21,049
languages actually and just cutting it

00:41:18,799 --> 00:41:23,960
but nothing highly sophisticated is

00:41:21,049 --> 00:41:26,150
really just an abstraction to get and so

00:41:23,960 --> 00:41:28,450
maybe if I should start nowadays from

00:41:26,150 --> 00:41:31,309
scratch it's some mixture of go and

00:41:28,450 --> 00:41:36,980
Django which would be actually preferred

00:41:31,309 --> 00:41:40,069
stack just a quick mind about the test

00:41:36,980 --> 00:41:41,780
dependent quick comma comment about the

00:41:40,069 --> 00:41:43,700
test dependencies so we ran into the

00:41:41,780 --> 00:41:45,890
same problem that it's very hard to find

00:41:43,700 --> 00:41:47,780
out which packages tests depend on me

00:41:45,890 --> 00:41:49,310
and we discussed those with

00:41:47,780 --> 00:41:51,350
the package maintainer is a while ago

00:41:49,310 --> 00:41:54,260
and we actually have a plan how to

00:41:51,350 --> 00:41:55,640
implement this dunyah but we have their

00:41:54,260 --> 00:41:57,890
agreement we know it's going to look

00:41:55,640 --> 00:41:59,600
like and so it that'll help us all for

00:41:57,890 --> 00:42:03,410
figuring out reverse dependency testing

00:41:59,600 --> 00:42:04,570
properly I would like to chat about this

00:42:03,410 --> 00:42:06,740
later

00:42:04,570 --> 00:42:09,560
just a technical question

00:42:06,740 --> 00:42:11,480
so the packages you deliver into

00:42:09,560 --> 00:42:12,740
production yeah they are all coming out

00:42:11,480 --> 00:42:16,040
of the continuous integration

00:42:12,740 --> 00:42:18,440
environment so how do I add other a

00:42:16,040 --> 00:42:21,170
scientist then because do we have

00:42:18,440 --> 00:42:22,640
trusted keys on the infrastructure keys

00:42:21,170 --> 00:42:25,100
on the infrastructure the designing is

00:42:22,640 --> 00:42:27,590
essentially anonymously so to speaker

00:42:25,100 --> 00:42:30,260
once you have access to the review

00:42:27,590 --> 00:42:32,510
system and you get approved packages

00:42:30,260 --> 00:42:34,220
they end up in the or might end up in

00:42:32,510 --> 00:42:36,500
the product if everything goes straight

00:42:34,220 --> 00:42:40,280
forward in the pipeline but no manual

00:42:36,500 --> 00:42:41,720
signing I mean you were it it's if you

00:42:40,280 --> 00:42:43,520
want to tag something for whatever

00:42:41,720 --> 00:42:45,620
reason for example internal tooling or

00:42:43,520 --> 00:42:48,830
stuff like that you're encouraged to get

00:42:45,620 --> 00:42:51,860
tagged with your sign but no manual

00:42:48,830 --> 00:42:53,450
signing is needed to to bypass the page

00:42:51,860 --> 00:42:57,110
so the personal signing is in the

00:42:53,450 --> 00:43:03,230
versioning and ready packages you don't

00:42:57,110 --> 00:43:11,990
rely on on that end okay thank you any

00:43:03,230 --> 00:43:13,850
further questions okay

00:43:11,990 --> 00:43:16,070
how much effort do you think would it

00:43:13,850 --> 00:43:19,100
take to write of one a bit front one

00:43:16,070 --> 00:43:21,080
built like front-end for it like say I'm

00:43:19,100 --> 00:43:23,690
adding a new distribution stretch comes

00:43:21,080 --> 00:43:24,980
out and I want to rebuild everything for

00:43:23,690 --> 00:43:27,680
scratch and the system needs to figure

00:43:24,980 --> 00:43:29,420
out which package is still missing say I

00:43:27,680 --> 00:43:32,630
don't want to recompile everything but

00:43:29,420 --> 00:43:34,850
just admit at the missing bits no idea

00:43:32,630 --> 00:43:39,830
but something might be worse attracts we

00:43:34,850 --> 00:43:42,050
might join under yeah sorry for the

00:43:39,830 --> 00:43:45,560
question but I was still of the opinion

00:43:42,050 --> 00:43:48,500
that it's not the right idea to package

00:43:45,560 --> 00:43:49,910
Jenkins Debian glue in Debian and it's

00:43:48,500 --> 00:43:53,200
on my to-do list for this week actually

00:43:49,910 --> 00:43:53,200
and yay yeah

00:43:56,049 --> 00:44:00,739
the main concerns I have is once it's in

00:43:58,999 --> 00:44:02,689
that even pipeline it should just the

00:44:00,739 --> 00:44:07,099
diviner package it should should really

00:44:02,689 --> 00:44:09,199
just fit and so far I basically had the

00:44:07,099 --> 00:44:10,969
company vision or from different

00:44:09,199 --> 00:44:13,640
companies what what's working for them

00:44:10,969 --> 00:44:14,809
so I'm just looking at them but it's

00:44:13,640 --> 00:44:18,589
definitely on the to-do list I have a

00:44:14,809 --> 00:44:25,539
park opening on github issues it's time

00:44:18,589 --> 00:44:28,720
for one more question no questions so

00:44:25,539 --> 00:44:38,870
thank you very much and

00:44:28,720 --> 00:44:38,870

YouTube URL: https://www.youtube.com/watch?v=LVceyCE1M5M


