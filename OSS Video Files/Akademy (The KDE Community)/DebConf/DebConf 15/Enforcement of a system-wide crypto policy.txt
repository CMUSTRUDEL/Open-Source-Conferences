Title: Enforcement of a system-wide crypto policy
Publication date: 2017-12-03
Playlist: DebConf 15
Description: 
	by Nikos Mavrogiannopoulos

At: DebConf15
https://summit.debconf.org/debconf15/meeting/252/enforcement-of-a-system-wide-crypto-policies/
https://debconf15.debconf.org/

Currently each and every shipped application in distributions enforces its own policy on the allowed cryptographic algorithms/protocols. While for some this is a desirable property, for most unmanaged applications like wget, curl, and similar, it prevents enforcing a consistent security level. The purpose of this talk is to describe the approach we've taken in Fedora to counter the issue, and enforce a system-wide policies, discuss the current outcome, lessons learned, and invite Debian maintainers to participate.

Room: Heidelberg
Scheduled start: 2015-08-16 15:00:00
Captions: 
	00:00:00,000 --> 00:00:08,670
distributer not not really to to put

00:00:04,640 --> 00:00:10,980
this policy in source code we didn't

00:00:08,670 --> 00:00:16,170
want to modify any source code to modify

00:00:10,980 --> 00:00:20,039
the policy so what will be the main

00:00:16,170 --> 00:00:22,529
advantage the main advantage is that you

00:00:20,039 --> 00:00:24,630
actually know what you what security

00:00:22,529 --> 00:00:29,279
level is your operating system using in

00:00:24,630 --> 00:00:31,439
general and because I had to convince my

00:00:29,279 --> 00:00:33,510
boss I wrote some reasons why we

00:00:31,439 --> 00:00:37,500
actually need that and I believe they're

00:00:33,510 --> 00:00:42,510
really they're also applicable to Debian

00:00:37,500 --> 00:00:46,079
ask a project why we need system quite

00:00:42,510 --> 00:00:49,020
liberal policies one advantages that

00:00:46,079 --> 00:00:50,579
will use the administrative burden

00:00:49,020 --> 00:00:54,350
algorithm instead of the user were

00:00:50,579 --> 00:01:00,000
actually giving the system why is that

00:00:54,350 --> 00:01:02,699
if you have deployed let's say an HTTP

00:01:00,000 --> 00:01:05,489
server or any kind of server which uses

00:01:02,699 --> 00:01:07,650
crypto what are the best practices you

00:01:05,489 --> 00:01:10,920
have to do typically you go to websites

00:01:07,650 --> 00:01:14,580
like better kiva.org download the PDF of

00:01:10,920 --> 00:01:16,979
ninety pages or even more read their how

00:01:14,580 --> 00:01:19,259
to set up your cipher suites in a way

00:01:16,979 --> 00:01:22,619
that your level is acceptable for

00:01:19,259 --> 00:01:28,710
today's standards and modify your

00:01:22,619 --> 00:01:30,420
service to support these advices but why

00:01:28,710 --> 00:01:32,369
do you have to do that anyway

00:01:30,420 --> 00:01:35,430
why would you really have to go to this

00:01:32,369 --> 00:01:37,380
website find visit vices modify your

00:01:35,430 --> 00:01:39,049
server shouldn't that be offered by

00:01:37,380 --> 00:01:42,030
default by the operating system I

00:01:39,049 --> 00:01:44,549
believe yes and also it's reduced

00:01:42,030 --> 00:01:47,520
support costs by by using a consistent

00:01:44,549 --> 00:01:49,470
level across the operating system you

00:01:47,520 --> 00:01:51,509
eliminate a class of lunar abilities

00:01:49,470 --> 00:01:54,270
that depends from inconsistent

00:01:51,509 --> 00:01:56,310
parameters in libraries for example if

00:01:54,270 --> 00:01:59,040
you have followed lately we had an

00:01:56,310 --> 00:02:02,000
attack on TLS called long term the

00:01:59,040 --> 00:02:04,649
depending dependent on some libraries

00:02:02,000 --> 00:02:06,869
let's say accepting a lower parameters

00:02:04,649 --> 00:02:10,679
than the others so if we had a

00:02:06,869 --> 00:02:12,040
consistent policy this kind of attack

00:02:10,679 --> 00:02:16,390
wouldn't be even be there

00:02:12,040 --> 00:02:18,909
and the other thing is easier audit that

00:02:16,390 --> 00:02:21,970
you don't really you actually know that

00:02:18,909 --> 00:02:24,459
your programs after you deploys a policy

00:02:21,970 --> 00:02:26,489
you know what allegories your programs

00:02:24,459 --> 00:02:30,790
will use there would be the configured

00:02:26,489 --> 00:02:36,220
algorithms so you become you don't need

00:02:30,790 --> 00:02:39,220
need to audit so little about history

00:02:36,220 --> 00:02:43,030
what we did in fedora yeah we started in

00:02:39,220 --> 00:02:46,000
Fedora 21 that was last year and we

00:02:43,030 --> 00:02:48,220
piloted system radical policies for us

00:02:46,000 --> 00:02:52,629
common policies for nodulation open SSL

00:02:48,220 --> 00:02:55,030
and now so detail we decided not to have

00:02:52,629 --> 00:02:57,370
just one before policy but to give them

00:02:55,030 --> 00:02:59,920
a straight of the option to have one of

00:02:57,370 --> 00:03:03,010
the one of three policies when it was

00:02:59,920 --> 00:03:06,190
called legacy that was building security

00:03:03,010 --> 00:03:09,579
included all algorithms it even enabled

00:03:06,190 --> 00:03:11,530
md5 and the idea of the legacy was to be

00:03:09,579 --> 00:03:13,660
able to connect to set up your system in

00:03:11,530 --> 00:03:15,519
a way that you can connect even on a

00:03:13,660 --> 00:03:17,829
network where you have really

00:03:15,519 --> 00:03:20,829
ten-year-old computers and you cannot

00:03:17,829 --> 00:03:24,310
connect to them otherwise and the

00:03:20,829 --> 00:03:25,870
default level was a bit conservative we

00:03:24,310 --> 00:03:29,260
didn't have algorithms we were

00:03:25,870 --> 00:03:31,840
considered to be broken and pretty much

00:03:29,260 --> 00:03:34,540
say it was about on 80 bits security

00:03:31,840 --> 00:03:38,440
level we also provided the future

00:03:34,540 --> 00:03:42,669
security level but it was around 1 1 11

00:03:38,440 --> 00:03:44,410
bits security offered but what also

00:03:42,669 --> 00:03:46,690
meant that you couldn't connect to

00:03:44,410 --> 00:03:50,709
around 80% of the internet if you enable

00:03:46,690 --> 00:03:55,870
this so I of course the system came by

00:03:50,709 --> 00:03:57,819
default on the default level and we

00:03:55,870 --> 00:04:00,790
palet it on a few obligations on Fedora

00:03:57,819 --> 00:04:03,069
21 while on federal 22 we converted

00:04:00,790 --> 00:04:04,569
several libraries and applications to

00:04:03,069 --> 00:04:08,349
use this

00:04:04,569 --> 00:04:13,329
by default apart like Apaches TBD later

00:04:08,349 --> 00:04:17,769
HPD microwaves HPD and also the command

00:04:13,329 --> 00:04:23,500
line applications received in Fedora 23

00:04:17,769 --> 00:04:25,630
we added also the binned software tool

00:04:23,500 --> 00:04:29,500
to the system value to policies because

00:04:25,630 --> 00:04:30,960
in DNS SEC we also use algorithms and we

00:04:29,500 --> 00:04:33,490
would like to be able to restrict

00:04:30,960 --> 00:04:35,740
certain arguments from being used in

00:04:33,490 --> 00:04:42,460
business sake when they are was in the

00:04:35,740 --> 00:04:44,949
broken so what was our approach every

00:04:42,460 --> 00:04:48,880
all up to now was a bit theoretical but

00:04:44,949 --> 00:04:51,759
what we actually did if you have already

00:04:48,880 --> 00:04:53,949
set up a server using either open SSL or

00:04:51,759 --> 00:04:57,039
TLS you have probably noticed that at

00:04:53,949 --> 00:04:59,919
some point it does you have to specify a

00:04:57,039 --> 00:05:01,840
surface with a string for example in

00:04:59,919 --> 00:05:04,440
open and Sally can be like that to

00:05:01,840 --> 00:05:08,020
enabled a high level cipher Suites

00:05:04,440 --> 00:05:10,210
except md5 and such you know TLS will be

00:05:08,020 --> 00:05:13,810
something enabled the normal cipher

00:05:10,210 --> 00:05:18,849
suites expect include with only TLS 1.2

00:05:13,810 --> 00:05:22,120
in this exam for exam and we figured

00:05:18,849 --> 00:05:25,240
that since we have several applications

00:05:22,120 --> 00:05:26,889
it's and every having this kind of

00:05:25,240 --> 00:05:27,580
strings order under a configuration

00:05:26,889 --> 00:05:32,889
files

00:05:27,580 --> 00:05:36,729
why not agree on a single string but we

00:05:32,889 --> 00:05:39,460
set on every application and upon a well

00:05:36,729 --> 00:05:42,610
this string is a countered by open

00:05:39,460 --> 00:05:47,199
result or rutila's we will just load the

00:05:42,610 --> 00:05:52,000
default system wide policy so that's

00:05:47,199 --> 00:05:55,419
pretty much the idea and the next step

00:05:52,000 --> 00:06:00,669
we just modified most of the

00:05:55,419 --> 00:06:02,979
applications we ship to change the

00:06:00,669 --> 00:06:05,680
included by upstream let's say example

00:06:02,979 --> 00:06:10,810
configuration file to use our system why

00:06:05,680 --> 00:06:13,570
the policy string some problematic cases

00:06:10,810 --> 00:06:15,710
were the applications which hard-coded

00:06:13,570 --> 00:06:18,860
their defaults into

00:06:15,710 --> 00:06:22,190
code and in this case we just also

00:06:18,860 --> 00:06:26,600
modified the code to use our shift

00:06:22,190 --> 00:06:28,160
policy our default policy and thought

00:06:26,600 --> 00:06:31,520
that that was a very brief description

00:06:28,160 --> 00:06:39,110
if you want to see more about this it's

00:06:31,520 --> 00:06:44,570
on that URL and ideally we wanted to

00:06:39,110 --> 00:06:47,080
cover everything let's say but every

00:06:44,570 --> 00:06:50,120
cryptographic aspect of the application

00:06:47,080 --> 00:06:51,710
in that policy from signature to Mahalo

00:06:50,120 --> 00:06:54,440
means to say fragrans to kicks in

00:06:51,710 --> 00:06:56,300
algorithms ellipticals allowed the size

00:06:54,440 --> 00:06:59,480
of parameters allowed for our SEO

00:06:56,300 --> 00:07:03,110
diffie-hellman the protocols allowed and

00:06:59,480 --> 00:07:09,010
even compression our current state is

00:07:03,110 --> 00:07:13,610
that Nautilus is able to cover the whole

00:07:09,010 --> 00:07:16,010
the whole set of options while an

00:07:13,610 --> 00:07:19,580
open-cell we are restricted to McHale

00:07:16,010 --> 00:07:24,560
warning cipher and key exchange although

00:07:19,580 --> 00:07:26,600
we plan to extend open SSL as well the

00:07:24,560 --> 00:07:28,580
reason if you know if you don't know

00:07:26,600 --> 00:07:31,520
already it's the fact that the open cell

00:07:28,580 --> 00:07:33,140
is very doesn't allow much freedom in

00:07:31,520 --> 00:07:34,910
what to specify the surface should

00:07:33,140 --> 00:07:39,890
string you can only specify the surf

00:07:34,910 --> 00:07:42,680
it's not any other parameters and we

00:07:39,890 --> 00:07:45,140
also have pads for instance if you know

00:07:42,680 --> 00:07:48,440
you don't know NSS is the library used

00:07:45,140 --> 00:07:51,380
by Firefox the TLS library used by

00:07:48,440 --> 00:07:54,560
Firefox to to cover also all these

00:07:51,380 --> 00:07:56,300
parameters it's currently under upstream

00:07:54,560 --> 00:08:02,330
consideration and we haven't included

00:07:56,300 --> 00:08:05,150
yet in fedora so our current state is

00:08:02,330 --> 00:08:07,250
that we have already sent purchasing

00:08:05,150 --> 00:08:09,170
neutralizer upstream that was pretty

00:08:07,250 --> 00:08:12,230
easy for me because I go the option of

00:08:09,170 --> 00:08:19,130
neutrality and we have full requests you

00:08:12,230 --> 00:08:21,590
know in open SSL and answers and all of

00:08:19,130 --> 00:08:24,520
these are under upstream consideration

00:08:21,590 --> 00:08:26,620
all for open cell for example

00:08:24,520 --> 00:08:29,979
we have we know that upstream is very

00:08:26,620 --> 00:08:35,260
happy with these patties but not much

00:08:29,979 --> 00:08:39,219
yet so hopefully it will be soon an

00:08:35,260 --> 00:08:42,399
interesting aspect of this is that after

00:08:39,219 --> 00:08:45,550
we sent this part to an SS long term the

00:08:42,399 --> 00:08:47,980
long term attack came out and we

00:08:45,550 --> 00:08:50,620
realized that if that pass was in place

00:08:47,980 --> 00:08:52,390
with a fedora default settings in

00:08:50,620 --> 00:08:55,839
essence wouldn't have been a woolen art

00:08:52,390 --> 00:08:58,000
long term and I think that's an

00:08:55,839 --> 00:09:00,570
interesting aspect because ok I'm

00:08:58,000 --> 00:09:02,560
presenting here something to increase

00:09:00,570 --> 00:09:06,910
proactively the security of the system

00:09:02,560 --> 00:09:09,730
well you actually see that if we have if

00:09:06,910 --> 00:09:12,130
we had managed to fully deploy it we

00:09:09,730 --> 00:09:14,320
would have actually increased the

00:09:12,130 --> 00:09:22,720
security of the system and prevent a new

00:09:14,320 --> 00:09:27,050
attack from being a real threat so few

00:09:22,720 --> 00:09:30,360
lessons learned during this deployment

00:09:27,050 --> 00:09:30,360
[Music]

00:09:30,450 --> 00:09:37,420
we have an initial deployment with

00:09:33,700 --> 00:09:40,240
Fedora 21 and we selected very

00:09:37,420 --> 00:09:43,300
conservative settings our default level

00:09:40,240 --> 00:09:47,370
of the row 21 included SSL free and our

00:09:43,300 --> 00:09:50,970
c4 he goes before the poodle attack and

00:09:47,370 --> 00:09:54,839
it went pretty smoothly because of that

00:09:50,970 --> 00:09:59,079
one in Fedora 22 we decided to drop SSL

00:09:54,839 --> 00:10:01,060
3.0 it didn't took more than 10 mins to

00:09:59,079 --> 00:10:07,000
receive a bug report that we broke

00:10:01,060 --> 00:10:08,529
something so as a lesson I would say

00:10:07,000 --> 00:10:10,450
that it's better to be conservative in

00:10:08,529 --> 00:10:13,510
the beginning when you deploy for a

00:10:10,450 --> 00:10:15,610
pilot rather than be strict and say SSL

00:10:13,510 --> 00:10:19,000
3.0 is already too old it's broken and

00:10:15,610 --> 00:10:21,730
let's drop it because we realize their

00:10:19,000 --> 00:10:23,890
applications that could only use SSL 3.0

00:10:21,730 --> 00:10:25,660
not because of fedora but because the

00:10:23,890 --> 00:10:26,329
Windows Server let's say was only using

00:10:25,660 --> 00:10:32,379
as

00:10:26,329 --> 00:10:36,049
point zero and another thing is that

00:10:32,379 --> 00:10:38,629
unlike CVS where they have to be fixed

00:10:36,049 --> 00:10:40,309
in a very short amount of time because

00:10:38,629 --> 00:10:42,799
let's say you have all the newspapers

00:10:40,309 --> 00:10:44,779
talking about you but you are broken and

00:10:42,799 --> 00:10:47,540
this kind of stuff when you send the

00:10:44,779 --> 00:10:49,850
product security parts to some project

00:10:47,540 --> 00:10:53,389
upstream you have very slow report a

00:10:49,850 --> 00:10:55,790
response times and you get probably

00:10:53,389 --> 00:10:58,489
males tell you okay well now like it we

00:10:55,790 --> 00:11:00,470
are going to evaluate it but when it

00:10:58,489 --> 00:11:09,230
actually comes to the point to merge it

00:11:00,470 --> 00:11:11,749
it takes much time and the third thing

00:11:09,230 --> 00:11:15,549
is that I believe actually it's my

00:11:11,749 --> 00:11:18,920
opinion that it's pace of having such a

00:11:15,549 --> 00:11:20,540
system-wide security level I was saying

00:11:18,920 --> 00:11:23,660
attacks you have seen in the last year

00:11:20,540 --> 00:11:26,779
some 90s and sell like poodle or the CBC

00:11:23,660 --> 00:11:29,989
surface which they are c4 attacks

00:11:26,779 --> 00:11:31,459
we do have been much easier to simply

00:11:29,989 --> 00:11:33,980
change the policy and remove these

00:11:31,459 --> 00:11:36,410
options from the protocol or reorder

00:11:33,980 --> 00:11:41,110
them rather than modify each and every

00:11:36,410 --> 00:11:45,019
application to eliminate these options

00:11:41,110 --> 00:11:52,279
also as machines the long-term attack

00:11:45,019 --> 00:11:57,709
wouldn't have been an issue so what are

00:11:52,279 --> 00:11:59,239
our future plans at the moment we our

00:11:57,709 --> 00:12:00,589
first priorities make sure that

00:11:59,239 --> 00:12:03,019
everything is upstream everything we

00:12:00,589 --> 00:12:05,059
have contributed so far to NSS and open

00:12:03,019 --> 00:12:07,970
a series upstream and we would like to

00:12:05,059 --> 00:12:11,239
include the Java SSL and TLS limitation

00:12:07,970 --> 00:12:13,660
to the policy and that parting might be

00:12:11,239 --> 00:12:16,160
easier than we initially thought and

00:12:13,660 --> 00:12:19,369
probably in the future to include open

00:12:16,160 --> 00:12:23,720
stage Kerberos or even OPG there in the

00:12:19,369 --> 00:12:25,850
policy so that you actually set up your

00:12:23,720 --> 00:12:28,790
security level central lower the

00:12:25,850 --> 00:12:31,820
operating system irrespective of TLS or

00:12:28,790 --> 00:12:35,180
all actual protocol for everything

00:12:31,820 --> 00:12:36,830
that relates to Krypton and I have set

00:12:35,180 --> 00:12:38,390
up a trackage they are on this URL if

00:12:36,830 --> 00:12:40,450
you want if you are interested for more

00:12:38,390 --> 00:12:44,720
information where are we

00:12:40,450 --> 00:12:47,030
and the reason I'm actually here is

00:12:44,720 --> 00:12:49,730
because we want to make this policy not

00:12:47,030 --> 00:12:52,420
Fedor only but pretty much universal so

00:12:49,730 --> 00:12:56,870
and I hope I have attracted your

00:12:52,420 --> 00:13:01,190
attention and this is the project track

00:12:56,870 --> 00:13:04,420
we use at GD hub for the policies so do

00:13:01,190 --> 00:13:04,420
you have any questions

00:13:12,810 --> 00:13:21,820
what about certificates are they

00:13:17,350 --> 00:13:24,120
centrally managed - yes yes the idea in

00:13:21,820 --> 00:13:28,149
the parameters that I presented before

00:13:24,120 --> 00:13:29,620
it was to to include also certificates

00:13:28,149 --> 00:13:32,699
to say the size of parameters using

00:13:29,620 --> 00:13:36,510
certificates in our say certificates

00:13:32,699 --> 00:13:42,550
well the certificates used to

00:13:36,510 --> 00:13:46,660
authenticate some remote side for

00:13:42,550 --> 00:13:50,740
example in Debian there's ATC as sir I

00:13:46,660 --> 00:13:53,880
mean the CA certificates yeah yeah

00:13:50,740 --> 00:13:58,540
actually actually in Fedora would have a

00:13:53,880 --> 00:14:02,500
common CA certificates for open SSL an

00:13:58,540 --> 00:14:05,320
accession and grunty list so pretty much

00:14:02,500 --> 00:14:08,860
already share this and this part was

00:14:05,320 --> 00:14:11,529
about only the algorithms because if I

00:14:08,860 --> 00:14:14,470
remember correctly Firefox iceweasel in

00:14:11,529 --> 00:14:17,829
Debian used them in the past but Norma

00:14:14,470 --> 00:14:22,029
uses them because I think something

00:14:17,829 --> 00:14:25,839
upstream is changed so that's I think

00:14:22,029 --> 00:14:37,089
that's pity I'm not aware of this but it

00:14:25,839 --> 00:14:39,370
would be bad news indeed cutest rings is

00:14:37,089 --> 00:14:42,430
that you can only use plus or minus you

00:14:39,370 --> 00:14:45,190
can't use intersections so when you have

00:14:42,430 --> 00:14:48,130
a large things like system default but

00:14:45,190 --> 00:14:51,220
you won't say only perfect for security

00:14:48,130 --> 00:14:53,829
strings because I could say uses

00:14:51,220 --> 00:14:58,420
defaults which are before security you

00:14:53,829 --> 00:15:00,790
have to eat if text default - everything

00:14:58,420 --> 00:15:02,949
that's not portable security or

00:15:00,790 --> 00:15:05,500
alternative list all the perfect

00:15:02,949 --> 00:15:09,449
security with autumn or member of the

00:15:05,500 --> 00:15:09,449
system fourth by basically man

00:15:13,440 --> 00:15:16,549
[Music]

00:15:26,910 --> 00:15:31,480
you could also set your system defaults

00:15:29,560 --> 00:15:33,690
be only perfect for secrecy

00:15:31,480 --> 00:15:36,850
currently in fedora we don't have but

00:15:33,690 --> 00:15:46,750
that is not a limitation we'll take a

00:15:36,850 --> 00:15:50,170
ferry it's there also something in

00:15:46,750 --> 00:15:55,290
purpose to get more programs to be

00:15:50,170 --> 00:15:59,740
comfortable so as I read you the policy

00:15:55,290 --> 00:16:02,560
you suggest for everything that is

00:15:59,740 --> 00:16:05,290
configurable to have this system policy

00:16:02,560 --> 00:16:09,720
as default and to change everything that

00:16:05,290 --> 00:16:13,450
has hard-coded to change it to the

00:16:09,720 --> 00:16:16,060
hard-coded value to the system yeah this

00:16:13,450 --> 00:16:21,040
in my eyes this has the problem that

00:16:16,060 --> 00:16:23,730
your it's still hard coded so if one

00:16:21,040 --> 00:16:27,720
application that is hard-coded needs

00:16:23,730 --> 00:16:31,950
something more permissive you have to

00:16:27,720 --> 00:16:35,680
keep the system wide setting more

00:16:31,950 --> 00:16:42,220
permissive for this so it would be nice

00:16:35,680 --> 00:16:43,870
to have an orchestrated effort to to

00:16:42,220 --> 00:16:48,090
ping or upstreams

00:16:43,870 --> 00:16:48,090
to have everything configured

00:16:48,360 --> 00:16:55,660
observationally maps are our approach of

00:16:51,840 --> 00:16:57,550
changing the hard-coded we hoped you

00:16:55,660 --> 00:17:00,130
would end up in something like this if

00:16:57,550 --> 00:17:02,500
somebody would want something worse or

00:17:00,130 --> 00:17:04,750
better policy or better security policy

00:17:02,500 --> 00:17:07,689
he would have to send to request it from

00:17:04,750 --> 00:17:09,459
upstream but I didn't think it should be

00:17:07,689 --> 00:17:11,050
part of this project to make to force

00:17:09,459 --> 00:17:12,730
every upstream to make it configurable

00:17:11,050 --> 00:17:15,060
because in some applications you may not

00:17:12,730 --> 00:17:18,730
want

00:17:15,060 --> 00:17:20,000
okay time is over thank you for being

00:17:18,730 --> 00:17:27,660
here

00:17:20,000 --> 00:17:27,660

YouTube URL: https://www.youtube.com/watch?v=Xd0wV09PCtc


