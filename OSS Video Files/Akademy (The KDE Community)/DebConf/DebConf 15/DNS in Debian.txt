Title: DNS in Debian
Publication date: 2017-12-02
Playlist: DebConf 15
Description: 
	by Robert Edmonds

At: DebConf15
https://summit.debconf.org/debconf15/meeting/270/dns-in-debian/
https://debconf15.debconf.org/

The Domain Name System (DNS) protocol is widely used by Internet-connected hosts, including Debian systems. It is most commonly associated with the "hostname to address" lookup service needed by many Internet protocols, but it has an extensible design and is capable of distributing many types of information.

The DNS has a highly componentized architecture and no individual package in Debian is responsible for implementing DNS support as a whole. This talk will introduce the DNS architecture and explain how individual packages in the Debian archive together implement this architecture.

Other topics covered will include:

 - The DNS data model.

 - The broad history of the protocol, and likely future developments.

 - How the DNS is commonly deployed on the Internet.

 - How Debian's DNS support compares to other operating systems like Fedora and FreeBSD.

 - Privacy, security, and governance considerations.

Room: Heidelberg
Scheduled start: 2015-08-15 17:30:00
Captions: 
	00:00:00,030 --> 00:00:03,810
welcome everyone to this talk by Robert

00:00:03,300 --> 00:00:12,780
Edmonds

00:00:03,810 --> 00:00:19,650
about DNS and Debian hello alright so uh

00:00:12,780 --> 00:00:25,910
just get started so what exactly is the

00:00:19,650 --> 00:00:30,150
DNS this visa for definitions are from a

00:00:25,910 --> 00:00:32,550
pending RFC draft and they're really

00:00:30,150 --> 00:00:36,360
quite opaque definitions

00:00:32,550 --> 00:00:40,140
they're very jargon filled and they're

00:00:36,360 --> 00:00:43,140
sort of sort of definitions by DNS

00:00:40,140 --> 00:00:46,230
protocol geeks for other DNS protocol

00:00:43,140 --> 00:00:48,000
geeks and so there's an application

00:00:46,230 --> 00:00:49,800
developer you know someone who just

00:00:48,000 --> 00:00:52,829
wants to use the DNS incidentally these

00:00:49,800 --> 00:00:54,149
are very lofty definition so I'm like

00:00:52,829 --> 00:01:00,480
I'm not gonna read them read them all

00:00:54,149 --> 00:01:03,840
out I mean they're you know so so here's

00:01:00,480 --> 00:01:09,659
my second slide the DNA you know the

00:01:03,840 --> 00:01:11,430
word nuts and bolts definition the DNS

00:01:09,659 --> 00:01:13,409
you know dates back to this you know the

00:01:11,430 --> 00:01:16,890
early 80s you know this is this early

00:01:13,409 --> 00:01:18,659
experimental era of the internet and it

00:01:16,890 --> 00:01:22,070
sort of co-evolved with the other early

00:01:18,659 --> 00:01:26,100
protocol's from that era like SMTP and

00:01:22,070 --> 00:01:28,979
you know the big you know reason for it

00:01:26,100 --> 00:01:30,509
was sort of to to move this static

00:01:28,979 --> 00:01:32,400
configuration data into you know they

00:01:30,509 --> 00:01:35,220
didn't called the cloud then but they

00:01:32,400 --> 00:01:39,630
were taking you know static you know the

00:01:35,220 --> 00:01:42,930
hosts txt file there was a lot of really

00:01:39,630 --> 00:01:44,880
weird stuff around around mail and in

00:01:42,930 --> 00:01:46,880
this you know this era and and this

00:01:44,880 --> 00:01:49,829
eventually evolves you know forward and

00:01:46,880 --> 00:01:51,899
it's now you know now used by every you

00:01:49,829 --> 00:01:52,950
know every operating system that you

00:01:51,899 --> 00:01:57,869
know connects to the Internet and

00:01:52,950 --> 00:02:00,899
obviously you know including Debian most

00:01:57,869 --> 00:02:02,700
DNS talks they sort of focus on this

00:02:00,899 --> 00:02:05,549
infrastructure side you know this is

00:02:02,700 --> 00:02:07,160
jargon filled side of the DNS where you

00:02:05,549 --> 00:02:10,890
have you know terms like recursion

00:02:07,160 --> 00:02:13,140
delegations zones servers you know

00:02:10,890 --> 00:02:14,640
but this talk is gonna you know focus

00:02:13,140 --> 00:02:15,930
more on the application side everything

00:02:14,640 --> 00:02:18,750
also gonna talk about the infrastructure

00:02:15,930 --> 00:02:21,450
but I'm I wanted to make this talk more

00:02:18,750 --> 00:02:23,550
general and talk about program statics

00:02:21,450 --> 00:02:25,470
actually want to make use of the data in

00:02:23,550 --> 00:02:28,470
the DNS rather than you know the the

00:02:25,470 --> 00:02:30,300
plumbing of the DNS and specifically how

00:02:28,470 --> 00:02:34,590
you know how does the DNS satisfy you

00:02:30,300 --> 00:02:38,400
know these application needs here's what

00:02:34,590 --> 00:02:41,100
the DNS architecture looks like if we

00:02:38,400 --> 00:02:42,720
you know oversimplify it you know and

00:02:41,100 --> 00:02:47,550
you know put it in these boxes and

00:02:42,720 --> 00:02:52,020
diagrams on the top row we have you know

00:02:47,550 --> 00:02:54,660
the jargon and towards the you know left

00:02:52,020 --> 00:02:57,360
left side of the diagram we have more

00:02:54,660 --> 00:02:59,520
application focused parts of the

00:02:57,360 --> 00:03:01,920
architecture toward the right hand side

00:02:59,520 --> 00:03:02,970
you know you have more infrastructure

00:03:01,920 --> 00:03:07,920
focused stuff

00:03:02,970 --> 00:03:10,170
so on a debian machine every devoman

00:03:07,920 --> 00:03:12,810
every debian machine has a stub resolver

00:03:10,170 --> 00:03:15,200
has applications that talk to that stub

00:03:12,810 --> 00:03:18,269
resolver you know wanna do dns lookups

00:03:15,200 --> 00:03:21,390
and those those stub resolver x' then

00:03:18,269 --> 00:03:25,140
have to you know send a send a DNS query

00:03:21,390 --> 00:03:27,930
to an upstream name server a recursive

00:03:25,140 --> 00:03:29,730
server you know the name server option

00:03:27,930 --> 00:03:32,070
in your resolve a con

00:03:29,730 --> 00:03:33,870
and these recursive servers actually

00:03:32,070 --> 00:03:37,100
have the you know the full algorithm and

00:03:33,870 --> 00:03:40,620
data and and cache to be able to talk to

00:03:37,100 --> 00:03:41,880
the actual authoritative name servers on

00:03:40,620 --> 00:03:44,760
the internet where the you know the zone

00:03:41,880 --> 00:03:47,250
data is stored so these you know these

00:03:44,760 --> 00:03:50,100
green arrows are DNS queries going over

00:03:47,250 --> 00:03:52,760
the network these red arrows are that

00:03:50,100 --> 00:03:56,790
you know the responses coming back and

00:03:52,760 --> 00:03:57,959
if you know the end goal for the you

00:03:56,790 --> 00:04:01,320
know the system as a whole is to get

00:03:57,959 --> 00:04:03,209
this the zone data over on the right

00:04:01,320 --> 00:04:04,860
hand side you know back to the

00:04:03,209 --> 00:04:07,350
application and you know the application

00:04:04,860 --> 00:04:09,570
is it's going to want to do you know

00:04:07,350 --> 00:04:11,310
lookup a hostname so it can make a TCP

00:04:09,570 --> 00:04:18,120
connection or you know send email that

00:04:11,310 --> 00:04:20,160
kind of stuff the DNS data model you

00:04:18,120 --> 00:04:24,670
know it's pretty simple it's it's a

00:04:20,160 --> 00:04:27,130
really super simple you know RPC

00:04:24,670 --> 00:04:30,610
almost you know it's got one method

00:04:27,130 --> 00:04:33,520
which is to look up look up a key you

00:04:30,610 --> 00:04:37,450
know get a set of values back it's

00:04:33,520 --> 00:04:42,100
actually sort of a tuple a key and a

00:04:37,450 --> 00:04:44,680
type and we have various you know

00:04:42,100 --> 00:04:45,970
restrictions on on these you know these

00:04:44,680 --> 00:04:48,970
parts of the data model

00:04:45,970 --> 00:04:50,710
you know keys have to be less than 255

00:04:48,970 --> 00:04:53,730
bytes and there's various syntax

00:04:50,710 --> 00:04:56,050
restrictions type as a 16-bit integer

00:04:53,730 --> 00:05:00,670
and there are a number of you know

00:04:56,050 --> 00:05:03,280
well-defined types that have mnemonics

00:05:00,670 --> 00:05:06,820
for them so type 1 is you know the a

00:05:03,280 --> 00:05:08,200
type type 28 is of the quad-a I think

00:05:06,820 --> 00:05:10,780
you know these familiar will know

00:05:08,200 --> 00:05:15,240
mnemonics and values technically have a

00:05:10,780 --> 00:05:18,820
limit of you know up to 64 K of data and

00:05:15,240 --> 00:05:21,550
the the actual you know layout on a wire

00:05:18,820 --> 00:05:23,320
for these these values is usually

00:05:21,550 --> 00:05:28,420
rigidly defined by the you know a

00:05:23,320 --> 00:05:32,170
specification documents in practice

00:05:28,420 --> 00:05:33,940
there's actually very few actual

00:05:32,170 --> 00:05:38,370
well-known types I believe there's fewer

00:05:33,940 --> 00:05:42,610
than a hundred out of a you know 64 K

00:05:38,370 --> 00:05:44,890
and most most creative uses of the DNS

00:05:42,610 --> 00:05:46,780
they tend to reuse an existing type

00:05:44,890 --> 00:05:48,880
rather than you know go off and

00:05:46,780 --> 00:05:54,430
arbitrarily define their their own types

00:05:48,880 --> 00:05:58,800
and I believe part of this is due to the

00:05:54,430 --> 00:06:01,060
you know existing api's and and you know

00:05:58,800 --> 00:06:05,130
limitations that we've built up over the

00:06:01,060 --> 00:06:09,100
years here we have some you know trivial

00:06:05,130 --> 00:06:11,550
examples of taking you know a key and a

00:06:09,100 --> 00:06:15,660
type and getting back a set of values

00:06:11,550 --> 00:06:19,570
you know you know a quad amx records

00:06:15,660 --> 00:06:22,510
they you know here we've you know

00:06:19,570 --> 00:06:27,550
basically this is just the documentation

00:06:22,510 --> 00:06:32,140
examples so getting into application use

00:06:27,550 --> 00:06:34,750
of the DNS and debian i've looked at you

00:06:32,140 --> 00:06:37,310
know not exhaustively of course but

00:06:34,750 --> 00:06:41,000
there's a you know a lot of software in

00:06:37,310 --> 00:06:44,470
uses the DNS I sort of mostly ordered

00:06:41,000 --> 00:06:52,690
them you know in you know reverse

00:06:44,470 --> 00:06:55,100
popularity I guess the most common way

00:06:52,690 --> 00:06:57,470
that you know most most applications

00:06:55,100 --> 00:06:59,390
used to to look up data in the DNS is

00:06:57,470 --> 00:07:04,790
through this function called get a tour

00:06:59,390 --> 00:07:07,490
info usually they don't actually care

00:07:04,790 --> 00:07:10,060
that the DNS is is actually returning

00:07:07,490 --> 00:07:13,280
these you know the data is looking for

00:07:10,060 --> 00:07:16,160
which is a good thing actually for

00:07:13,280 --> 00:07:18,560
things like address family independence

00:07:16,160 --> 00:07:19,880
you know if you want to find

00:07:18,560 --> 00:07:22,250
applications to you know work

00:07:19,880 --> 00:07:24,380
transparently on ipv4 or ipv6 the

00:07:22,250 --> 00:07:27,140
application shouldn't be specifically

00:07:24,380 --> 00:07:31,220
selecting a particular you know a are

00:07:27,140 --> 00:07:34,190
quite a queue type this is probably the

00:07:31,220 --> 00:07:38,900
wrong interface that you would want to

00:07:34,190 --> 00:07:43,880
use if you're go over to interact with

00:07:38,900 --> 00:07:45,950
the DNS data model per se and and most

00:07:43,880 --> 00:07:47,240
most applications actually want to you

00:07:45,950 --> 00:07:48,170
know they're actually doing hosting a

00:07:47,240 --> 00:07:51,200
block ups and this is the right

00:07:48,170 --> 00:07:52,400
interface for them but there's a you

00:07:51,200 --> 00:07:53,960
know there's another big drawback to

00:07:52,400 --> 00:07:57,170
this this interface is that it's a

00:07:53,960 --> 00:07:59,540
blocking interface which is okay for you

00:07:57,170 --> 00:08:03,640
know the you know command line ping W

00:07:59,540 --> 00:08:06,140
get type applications it's very bad for

00:08:03,640 --> 00:08:08,390
applet you know things like web browsers

00:08:06,140 --> 00:08:11,930
that need to be highly concurred and

00:08:08,390 --> 00:08:14,780
highly highly responsive there's no

00:08:11,930 --> 00:08:19,640
standard asynchronous you get a tour

00:08:14,780 --> 00:08:23,240
info version the plumbing for this

00:08:19,640 --> 00:08:25,010
interface is kind of interesting if

00:08:23,240 --> 00:08:28,540
you've never heard it before the the

00:08:25,010 --> 00:08:30,950
name service which is the sort of

00:08:28,540 --> 00:08:36,650
interesting abstraction layer deep in

00:08:30,950 --> 00:08:38,360
the sea library G Lib C you can run the

00:08:36,650 --> 00:08:42,610
get a tour info function itself with

00:08:38,360 --> 00:08:46,550
this command line driver called get int

00:08:42,610 --> 00:08:49,040
usually an Etsy in a switch cough you'll

00:08:46,550 --> 00:08:54,050
have a hosts line and it will

00:08:49,040 --> 00:08:56,660
of a one or more parameters and almost

00:08:54,050 --> 00:08:58,850
everyone has at least DNS this is the

00:08:56,660 --> 00:09:01,670
default we've always used you know for

00:08:58,850 --> 00:09:05,620
years and years that actually goes out

00:09:01,670 --> 00:09:07,880
and does DNS lookups and puts them into

00:09:05,620 --> 00:09:10,220
you know returns them through the we get

00:09:07,880 --> 00:09:14,959
a tour info an interface there is a

00:09:10,220 --> 00:09:17,240
alternative and it's a NSS module that

00:09:14,959 --> 00:09:20,720
also does DNS lookups it's not actually

00:09:17,240 --> 00:09:22,699
in Debian yet which is one called

00:09:20,720 --> 00:09:31,009
resolve which may be in the future

00:09:22,699 --> 00:09:34,870
provided by system D and the this this

00:09:31,009 --> 00:09:37,940
DNS NSS module is essentially an adapter

00:09:34,870 --> 00:09:39,639
between you know there's this front-end

00:09:37,940 --> 00:09:42,440
get adder info

00:09:39,639 --> 00:09:46,060
porcelain in this the backend the actual

00:09:42,440 --> 00:09:48,410
DNS plumbing which is provided by a

00:09:46,060 --> 00:09:55,060
library Calibri solve which was shipped

00:09:48,410 --> 00:09:58,790
and NGO Lipsy and then we have resolve

00:09:55,060 --> 00:10:00,949
which is the you know the system D you

00:09:58,790 --> 00:10:06,800
know rewrite you know the the future

00:10:00,949 --> 00:10:09,319
replacement our future option and it can

00:10:06,800 --> 00:10:11,500
can it also does DNS but it also

00:10:09,319 --> 00:10:14,630
implements a couple of other DNS like

00:10:11,500 --> 00:10:19,399
protocols like mmm DNS and something

00:10:14,630 --> 00:10:26,899
called lmn are and this is it's actually

00:10:19,399 --> 00:10:31,130
offers a ad bus type implementation the

00:10:26,899 --> 00:10:33,800
second option for an application is to

00:10:31,130 --> 00:10:37,430
directly call into Lib resolve which is

00:10:33,800 --> 00:10:40,279
this GFC library which was actually

00:10:37,430 --> 00:10:44,149
imported from a very old very old

00:10:40,279 --> 00:10:45,649
versions of bind in the early starting

00:10:44,149 --> 00:10:48,980
in the early 90s and it looks like the

00:10:45,649 --> 00:10:52,459
last actual merge was in you know 15

00:10:48,980 --> 00:10:56,089
years ago from buying eight other

00:10:52,459 --> 00:11:00,260
Oasis's I've also you know imported this

00:10:56,089 --> 00:11:02,010
code BSD variants obviously Solaris I

00:11:00,260 --> 00:11:04,589
believe

00:11:02,010 --> 00:11:06,779
this is this is quite a little bit of

00:11:04,589 --> 00:11:09,330
code but it's the interface is really

00:11:06,779 --> 00:11:12,720
low-level and some of them are

00:11:09,330 --> 00:11:14,460
documented some of them are not probably

00:11:12,720 --> 00:11:17,970
the best reference is actually in a

00:11:14,460 --> 00:11:22,380
actual book called DNS and bind from

00:11:17,970 --> 00:11:24,690
O'Reilly but this is because these

00:11:22,380 --> 00:11:27,330
interfaces are pretty low-level and you

00:11:24,690 --> 00:11:32,220
know require a fair bit of mastery of

00:11:27,330 --> 00:11:34,950
the DNS protocol so there's actually you

00:11:32,220 --> 00:11:37,339
know a lot fewer uses of liberal than

00:11:34,950 --> 00:11:41,700
then then get or info in the archive

00:11:37,339 --> 00:11:45,089
there are a couple of good examples one

00:11:41,700 --> 00:11:47,640
is postfix how would users go p-- which

00:11:45,089 --> 00:11:50,460
uses both get a tour info and lib

00:11:47,640 --> 00:11:52,860
resolve users get our info which is a

00:11:50,460 --> 00:11:54,529
proper interface to use for making you

00:11:52,860 --> 00:11:59,490
know socket connections who you know

00:11:54,529 --> 00:12:05,460
SMTP peers but also uses Lib resolve for

00:11:59,490 --> 00:12:08,730
a variety of other uses a mail transfer

00:12:05,460 --> 00:12:11,070
agent you know a modern mail transfer

00:12:08,730 --> 00:12:14,430
agent typically is going to do a lot

00:12:11,070 --> 00:12:18,089
more than just a and even just a and MX

00:12:14,430 --> 00:12:22,080
it also has to you know it interacts at

00:12:18,089 --> 00:12:24,120
a level with the DNS that is requires

00:12:22,080 --> 00:12:26,310
these is this lower level lib resolve

00:12:24,120 --> 00:12:30,120
interface there's a program called wrap

00:12:26,310 --> 00:12:33,360
serve which I wrote which uses the live

00:12:30,120 --> 00:12:35,790
resolve exclusively and I experienced

00:12:33,360 --> 00:12:37,560
with this program is that people

00:12:35,790 --> 00:12:40,620
probably shouldn't have to use live

00:12:37,560 --> 00:12:46,470
resolve if they want to interact with

00:12:40,620 --> 00:12:50,880
the DNS a third option is third-party

00:12:46,470 --> 00:12:52,860
libraries so if you have a use case that

00:12:50,880 --> 00:12:54,450
can't be served by you know the general

00:12:52,860 --> 00:12:57,270
purpose to get our info interface and

00:12:54,450 --> 00:13:02,550
you're not a big fan of lib resolves you

00:12:57,270 --> 00:13:05,730
know very low level you know very low

00:13:02,550 --> 00:13:07,910
level very you know crufty interface

00:13:05,730 --> 00:13:12,480
modern consider a more modern

00:13:07,910 --> 00:13:15,520
third-party library especially if your

00:13:12,480 --> 00:13:19,660
your use case requires a lot of Ace

00:13:15,520 --> 00:13:25,240
and if we look at actually oh let's get

00:13:19,660 --> 00:13:26,800
ahead if you look at the available

00:13:25,240 --> 00:13:28,330
third-party libraries that do dns

00:13:26,800 --> 00:13:31,410
lookups a lot of them are you know we

00:13:28,330 --> 00:13:34,810
have a DNS see Aires live event and

00:13:31,410 --> 00:13:37,090
libuv little UV which are almost you

00:13:34,810 --> 00:13:39,150
know they're they're very focused on the

00:13:37,090 --> 00:13:45,220
asynchronous use case almost to the

00:13:39,150 --> 00:13:49,380
exclusion of other opportunities that

00:13:45,220 --> 00:13:53,140
are offered by the DNS data model the

00:13:49,380 --> 00:13:56,220
big big 800-pound gorilla of third-party

00:13:53,140 --> 00:14:00,340
DNS libraries is something called el DNS

00:13:56,220 --> 00:14:02,290
it's fairly comprehensive if you look at

00:14:00,340 --> 00:14:06,520
the symbol table of the library has over

00:14:02,290 --> 00:14:09,370
800 public symbols these are you know

00:14:06,520 --> 00:14:13,480
just functions this is a ridiculously

00:14:09,370 --> 00:14:15,340
large library it's it's a it's if you're

00:14:13,480 --> 00:14:16,990
if you're if you're building DNS servers

00:14:15,340 --> 00:14:18,940
this is probably the library you want to

00:14:16,990 --> 00:14:22,470
use it's it's probably actually over

00:14:18,940 --> 00:14:24,790
overkill for a lot of more simpler uses

00:14:22,470 --> 00:14:27,550
this is a sea library it does have

00:14:24,790 --> 00:14:30,390
Python bindings with a swig base and

00:14:27,550 --> 00:14:32,740
I've never been able to figure them out

00:14:30,390 --> 00:14:35,170
there's another library called live

00:14:32,740 --> 00:14:37,870
unbound which is also from the same

00:14:35,170 --> 00:14:41,170
vendor as Bill DNS sort of like putting

00:14:37,870 --> 00:14:43,840
an unbound server inside your

00:14:41,170 --> 00:14:45,790
application and running it it's and you

00:14:43,840 --> 00:14:47,530
know unbind is a fairly lightweight DNS

00:14:45,790 --> 00:14:49,720
server but embedding the whole thing

00:14:47,530 --> 00:14:51,700
into your application is a fairly heavy

00:14:49,720 --> 00:14:53,560
weight thing to do if you absolutely

00:14:51,700 --> 00:14:55,480
need you know DNS SEC validation inside

00:14:53,560 --> 00:14:59,560
your processing you'd if you need a

00:14:55,480 --> 00:15:01,450
Singh asynchrony asynchrony caching this

00:14:59,560 --> 00:15:03,790
is probably why you put probably the

00:15:01,450 --> 00:15:05,920
third pair Larry what you that you want

00:15:03,790 --> 00:15:11,920
to use it's also got a swing based

00:15:05,920 --> 00:15:16,090
python binding and get DNS is another

00:15:11,920 --> 00:15:21,270
option is probably the most recent and

00:15:16,090 --> 00:15:24,250
most comprehensive attempt at at this

00:15:21,270 --> 00:15:27,950
application use case and it's

00:15:24,250 --> 00:15:30,430
intentionally focusing on this this

00:15:27,950 --> 00:15:33,080
porcelain the you know DNS porcelain for

00:15:30,430 --> 00:15:37,150
application programmers it's got a nice

00:15:33,080 --> 00:15:39,890
modern API it's got a sink support

00:15:37,150 --> 00:15:42,770
they've taken a fairly formal approach

00:15:39,890 --> 00:15:45,890
and split it into an API specification

00:15:42,770 --> 00:15:48,980
and a reference implementation of that

00:15:45,890 --> 00:15:51,320
specification and ideally in the future

00:15:48,980 --> 00:15:54,110
there will be additional conforming

00:15:51,320 --> 00:15:56,870
implementations of that of that spec you

00:15:54,110 --> 00:15:59,180
know with with api compatibility there

00:15:56,870 --> 00:16:00,980
is a Python binding and I found it was

00:15:59,180 --> 00:16:03,290
not sweet based so I suspect I'll be

00:16:00,980 --> 00:16:08,090
able to learn it it's very new it's not

00:16:03,290 --> 00:16:12,700
in Debian stable so that's you know

00:16:08,090 --> 00:16:15,590
pretty modern I guess that would be

00:16:12,700 --> 00:16:20,210
still be called stable back port so yeah

00:16:15,590 --> 00:16:23,630
yeah of course look at that one

00:16:20,210 --> 00:16:25,910
previously fourth option is the comedy

00:16:23,630 --> 00:16:29,210
option is do everything yourself and and

00:16:25,910 --> 00:16:31,430
and just you know none of the available

00:16:29,210 --> 00:16:34,310
available options suit you just just do

00:16:31,430 --> 00:16:36,710
everything yourself and and integrated

00:16:34,310 --> 00:16:40,580
directly into your source tree chromium

00:16:36,710 --> 00:16:43,400
browser does that and you know it's a

00:16:40,580 --> 00:16:46,010
web browser and it's it's got a you know

00:16:43,400 --> 00:16:48,920
makes certain demands of the of the

00:16:46,010 --> 00:16:50,960
network it requires a you know the

00:16:48,920 --> 00:16:52,820
vendor is decided to requires a very

00:16:50,960 --> 00:16:57,140
very great control over the DNS

00:16:52,820 --> 00:17:01,490
resolution process here's our summary of

00:16:57,140 --> 00:17:03,680
these four options get out our info you

00:17:01,490 --> 00:17:05,300
know it's got low flexibility but it's

00:17:03,680 --> 00:17:07,839
you know it's very portable available

00:17:05,300 --> 00:17:11,050
everywhere and then you deliver resolve

00:17:07,839 --> 00:17:15,620
good additional complexity but it's more

00:17:11,050 --> 00:17:18,589
low-level a lot of OSS have it though

00:17:15,620 --> 00:17:22,610
you probably have to adjust your your

00:17:18,589 --> 00:17:23,930
build system to be able to access it as

00:17:22,610 --> 00:17:26,900
you know goes by different names on

00:17:23,930 --> 00:17:28,220
different platforms and a third-party

00:17:26,900 --> 00:17:30,050
library is going to give you the most

00:17:28,220 --> 00:17:32,300
flexibility because you obviously select

00:17:30,050 --> 00:17:32,780
whichever one is whichever one you like

00:17:32,300 --> 00:17:34,520
best

00:17:32,780 --> 00:17:38,410
it's obviously going to introduce an

00:17:34,520 --> 00:17:40,600
extra dependency in your application

00:17:38,410 --> 00:17:43,690
you know do-it-yourself you know Ronnie

00:17:40,600 --> 00:17:46,780
face let's switch gears a bit and talk

00:17:43,690 --> 00:17:50,140
about security and switch over a bit to

00:17:46,780 --> 00:17:53,050
the infrastructure side of the DNS we

00:17:50,140 --> 00:17:56,800
have this classic information security

00:17:53,050 --> 00:17:59,410
triad of confidentiality integrity

00:17:56,800 --> 00:18:03,430
availability if you've not heard of this

00:17:59,410 --> 00:18:06,040
concept before and you know the

00:18:03,430 --> 00:18:11,100
Wikipedia article on it I guess there's

00:18:06,040 --> 00:18:18,430
these he's a classic properties of

00:18:11,100 --> 00:18:20,170
security within the DNS security the

00:18:18,430 --> 00:18:25,440
approach to security has traditionally

00:18:20,170 --> 00:18:28,420
been on integrity you want to prevent

00:18:25,440 --> 00:18:30,520
malicious servers from being able to

00:18:28,420 --> 00:18:35,170
just you know you know poison your cache

00:18:30,520 --> 00:18:38,020
with anything they want and that a lot

00:18:35,170 --> 00:18:42,400
of work went into that problem in the

00:18:38,020 --> 00:18:45,670
90s and there's a there's a you know a

00:18:42,400 --> 00:18:47,740
formal ranking of trustworthiness of

00:18:45,670 --> 00:18:51,100
based on where you where the data came

00:18:47,740 --> 00:18:53,800
from how whether it outranks a another

00:18:51,100 --> 00:18:56,470
source of data or not those were non

00:18:53,800 --> 00:18:58,500
cryptographic rules and and people's are

00:18:56,470 --> 00:19:00,310
realizing be good to be able to

00:18:58,500 --> 00:19:04,350
cryptographically authenticate the data

00:19:00,310 --> 00:19:08,380
as well to be the ultimate tier of

00:19:04,350 --> 00:19:12,310
trustworthiness so this work got started

00:19:08,380 --> 00:19:14,560
you know early in mid 90s or so and then

00:19:12,310 --> 00:19:18,190
a lot of years passed and completely

00:19:14,560 --> 00:19:20,320
core specifications around 2005 and they

00:19:18,190 --> 00:19:25,780
actually kept making more specifications

00:19:20,320 --> 00:19:27,610
after that which eventually culminated

00:19:25,780 --> 00:19:30,250
you know after a number of years of

00:19:27,610 --> 00:19:33,210
policy and governance stuff in the

00:19:30,250 --> 00:19:38,050
actual signing of the the root DNS on

00:19:33,210 --> 00:19:40,840
with a DNS a key that's trickled down to

00:19:38,050 --> 00:19:44,470
you know secure delegations to a lot of

00:19:40,840 --> 00:19:47,620
you know gTLDs and ccTLD is that now

00:19:44,470 --> 00:19:50,060
support DNS SEC and the the new I can

00:19:47,620 --> 00:19:53,230
new gTLD program mandate

00:19:50,060 --> 00:19:59,330
that all of these new gTLDs must offer

00:19:53,230 --> 00:20:00,980
DNS sex support so the number of TOD is

00:19:59,330 --> 00:20:06,460
teal these that support DNS Ike is now

00:20:00,980 --> 00:20:06,460
kind of lopsided due to that explosion

00:20:06,730 --> 00:20:13,880
some protocols like HTTP don't currently

00:20:11,390 --> 00:20:16,460
make a significant use of DNS SEC the

00:20:13,880 --> 00:20:22,100
vendors of browsers have decided to

00:20:16,460 --> 00:20:24,740
focus on more TLS oriented security

00:20:22,100 --> 00:20:27,800
measures things like HTTP you know

00:20:24,740 --> 00:20:30,290
strict Transport Security you know in a

00:20:27,800 --> 00:20:33,530
variety of other ways to you know

00:20:30,290 --> 00:20:36,230
communicate the fact you know to be able

00:20:33,530 --> 00:20:40,100
to you know securely distribute not just

00:20:36,230 --> 00:20:42,530
authentic data but you know cryptic you

00:20:40,100 --> 00:20:45,050
know the ability to get you know

00:20:42,530 --> 00:20:48,430
cryptographically private communications

00:20:45,050 --> 00:20:51,080
between between endpoints and the

00:20:48,430 --> 00:20:54,860
problem with dns I hear is it only

00:20:51,080 --> 00:20:59,300
offers authentic data you know authentic

00:20:54,860 --> 00:21:04,610
signing of these DNS records that are

00:20:59,300 --> 00:21:07,480
used to make HTTP connections however if

00:21:04,610 --> 00:21:10,640
you look at other protocols like SMTP

00:21:07,480 --> 00:21:14,570
SMTP actually has a much better use case

00:21:10,640 --> 00:21:19,940
for implementing DNS X support and the

00:21:14,570 --> 00:21:22,940
reason is this level of indirection in

00:21:19,940 --> 00:21:25,100
the MX record so the MX record you know

00:21:22,940 --> 00:21:28,250
determines where your your mail goes it

00:21:25,100 --> 00:21:32,230
lists the the mail exchange or the

00:21:28,250 --> 00:21:36,650
destinations for you know SMTP message

00:21:32,230 --> 00:21:40,670
and and the MX records actually don't

00:21:36,650 --> 00:21:43,010
tell you the addresses of the the SMTP

00:21:40,670 --> 00:21:46,370
server they give you a name you know a

00:21:43,010 --> 00:21:49,090
list of names of other servers and these

00:21:46,370 --> 00:21:52,010
these resource records aren't actually

00:21:49,090 --> 00:21:55,610
authentic so if you actually validate

00:21:52,010 --> 00:21:59,660
the TLS certificate of the SMTP server

00:21:55,610 --> 00:22:01,700
that you connect to the way that you

00:21:59,660 --> 00:22:03,070
would do that is usually based on you

00:22:01,700 --> 00:22:06,670
know the common name

00:22:03,070 --> 00:22:08,470
filled in that certificate and the value

00:22:06,670 --> 00:22:11,440
for that is entirely controlled by the

00:22:08,470 --> 00:22:13,000
MX record which is authenticated so this

00:22:11,440 --> 00:22:15,840
is a totally worthless thing to do if

00:22:13,000 --> 00:22:18,670
you're if you're getting you know

00:22:15,840 --> 00:22:22,750
potentially poisonous data back from

00:22:18,670 --> 00:22:25,600
from the DSO the I think postfix is a

00:22:22,750 --> 00:22:28,440
really gung-ho on on DNS SEC if you look

00:22:25,600 --> 00:22:32,530
at the the latest versions they've got a

00:22:28,440 --> 00:22:35,410
significant amount of new functionality

00:22:32,530 --> 00:22:41,679
if you look at the the TLS documentation

00:22:35,410 --> 00:22:47,530
for postfix look specifically at DN a--

00:22:41,679 --> 00:22:49,480
ii debian we're using this this old g

00:22:47,530 --> 00:22:51,490
ellipses stub resolver you know from the

00:22:49,480 --> 00:22:54,340
90s you know it's it's been maintained

00:22:51,490 --> 00:22:57,370
since then but it's it's not it's not

00:22:54,340 --> 00:23:00,640
seeing you know an overhaul that would

00:22:57,370 --> 00:23:04,450
allow it to to easily support DNS SEC

00:23:00,640 --> 00:23:06,549
and the way most you know most you know

00:23:04,450 --> 00:23:09,309
wiki type you know tutorial type guides

00:23:06,549 --> 00:23:11,530
get around this fact that there's no you

00:23:09,309 --> 00:23:14,590
know validating star resolvers is there

00:23:11,530 --> 00:23:17,740
just recommend installing a local DNS

00:23:14,590 --> 00:23:19,900
server so if you if you can't if your

00:23:17,740 --> 00:23:22,900
client doesn't support security just

00:23:19,900 --> 00:23:24,190
just to tell a local server on your

00:23:22,900 --> 00:23:26,760
machine and just point the client

00:23:24,190 --> 00:23:29,110
directly to that that local host server

00:23:26,760 --> 00:23:31,240
and that's the direction that Fedora

00:23:29,110 --> 00:23:35,040
seems to be moving in and they've got a

00:23:31,240 --> 00:23:37,240
proposal there to do that by default and

00:23:35,040 --> 00:23:39,510
the big problem with this is that if

00:23:37,240 --> 00:23:41,770
you're if you're on a network that

00:23:39,510 --> 00:23:43,540
causes D in a sec to fail you don't want

00:23:41,770 --> 00:23:46,660
to you know not be able to browse

00:23:43,540 --> 00:23:48,580
anything so there's a utility called

00:23:46,660 --> 00:23:51,820
Dena sec trigger so if doer has got a

00:23:48,580 --> 00:23:53,820
you know a significant amount of others

00:23:51,820 --> 00:23:55,480
dis Dena psyche figure machinery and

00:23:53,820 --> 00:23:58,840
integration work that they've been doing

00:23:55,480 --> 00:24:02,530
to try to get this Dena site by default

00:23:58,840 --> 00:24:03,790
goal and their platform so an open

00:24:02,530 --> 00:24:05,470
question here is is sure we have

00:24:03,790 --> 00:24:10,299
something like that perhaps as an

00:24:05,470 --> 00:24:12,640
installation option in Debian I'm kind

00:24:10,299 --> 00:24:15,490
of kind of you know I'm a maintainer of

00:24:12,640 --> 00:24:16,780
the unbound package and unbound if you

00:24:15,490 --> 00:24:20,440
install it it will you know

00:24:16,780 --> 00:24:23,530
hidey-ho give you a DNS SEC server and

00:24:20,440 --> 00:24:25,930
you know it's it it's I've been using it

00:24:23,530 --> 00:24:28,470
for a number of years and and it's a you

00:24:25,930 --> 00:24:31,150
know it's a my currently preferred

00:24:28,470 --> 00:24:33,340
validating DNS X server and you know

00:24:31,150 --> 00:24:35,170
it's possible that a this could be an

00:24:33,340 --> 00:24:39,010
option I don't kind of think I would

00:24:35,170 --> 00:24:43,150
recommend it as a something to enable by

00:24:39,010 --> 00:24:45,010
default and how anytime soon

00:24:43,150 --> 00:24:46,720
I think we should you know wait and see

00:24:45,010 --> 00:24:53,290
what you know how this works out within

00:24:46,720 --> 00:24:57,130
Fedora and move appropriately I guess in

00:24:53,290 --> 00:25:02,380
in Debian we also have a package called

00:24:57,130 --> 00:25:05,260
DNS root data and this package it's

00:25:02,380 --> 00:25:08,680
basically just a data package sort of

00:25:05,260 --> 00:25:13,600
very roughly like the CA certificates

00:25:08,680 --> 00:25:15,340
package it's got copies of these these

00:25:13,600 --> 00:25:20,040
parameters called the root zone hints

00:25:15,340 --> 00:25:33,580
and the root trust anchor that control

00:25:20,040 --> 00:25:37,930
where the sorry okay so so there's these

00:25:33,580 --> 00:25:38,980
parameters in the the this package some

00:25:37,930 --> 00:25:43,150
of the stuff gets hard-coded into

00:25:38,980 --> 00:25:45,490
various DNS servers and and software if

00:25:43,150 --> 00:25:48,580
they're if we add even more you know DNS

00:25:45,490 --> 00:25:52,210
SEC libraries we might want to have the

00:25:48,580 --> 00:25:54,850
centralized to reduce the pain of these

00:25:52,210 --> 00:25:58,590
uh these rollovers okay I guess that's

00:25:54,850 --> 00:25:58,590
see into the time salon

00:26:01,010 --> 00:26:06,400
you

00:26:01,180 --> 00:26:06,400

YouTube URL: https://www.youtube.com/watch?v=u3s63saj7HM


