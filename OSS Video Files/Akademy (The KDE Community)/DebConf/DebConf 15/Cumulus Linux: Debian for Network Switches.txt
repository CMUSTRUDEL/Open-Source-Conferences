Title: Cumulus Linux: Debian for Network Switches
Publication date: 2017-12-03
Playlist: DebConf 15
Description: 
	by Nolan Leake

At: DebConf15
https://summit.debconf.org/debconf15/meeting/300/cumulus-linux-debian-for-network-switches/
https://debconf15.debconf.org/

Cumulus Linux is a Debian derivative distribution that runs on Network Switches.  This talk will introduce the distribution and its use cases, as well as discuss our relationship with Debian and other upstream projects.

Room: Berlin/London
Scheduled start: 2015-08-16 17:00:00
Captions: 
	00:00:00,060 --> 00:00:07,560
so welcome to our talk at 5:00 about

00:00:03,449 --> 00:00:11,610
coolness ilanics phone network switching

00:00:07,560 --> 00:00:19,859
so let me introduce Nolan Lake so please

00:00:11,610 --> 00:00:21,779
give him a warm applause all right thank

00:00:19,859 --> 00:00:24,510
you I'm here to talk about cumulus Linux

00:00:21,779 --> 00:00:27,359
which is a Linux distribution for

00:00:24,510 --> 00:00:29,400
network switches so cumulus Linux is

00:00:27,359 --> 00:00:31,590
Debian derived very heavily in fact many

00:00:29,400 --> 00:00:35,070
of the packages in chemos linux come

00:00:31,590 --> 00:00:36,780
straight from the Debian repo some have

00:00:35,070 --> 00:00:38,219
patches added on top of the Debian

00:00:36,780 --> 00:00:39,510
patches by us which obviously then we

00:00:38,219 --> 00:00:43,160
would rebuild and then of course some

00:00:39,510 --> 00:00:45,780
are entirely new if you're familiar with

00:00:43,160 --> 00:00:47,129
kind of more common networks which

00:00:45,780 --> 00:00:49,500
operating systems like you know

00:00:47,129 --> 00:00:51,960
proprietary ones like Cisco's an EXO

00:00:49,500 --> 00:00:53,640
assert juniper junos you probably

00:00:51,960 --> 00:00:55,710
expecting networks which to have some

00:00:53,640 --> 00:00:57,210
sort of weird CLI that you have to learn

00:00:55,710 --> 00:00:58,859
with you know a bunch of commands and

00:00:57,210 --> 00:01:01,829
kind of a limited functionality set

00:00:58,859 --> 00:01:03,359
exposed by those commands chemos Linux

00:01:01,829 --> 00:01:05,640
is not like that at all we have no

00:01:03,359 --> 00:01:07,290
proprietary CLI the CLI is bash if you

00:01:05,640 --> 00:01:11,369
SSH into the switch you just get a bash

00:01:07,290 --> 00:01:12,930
prompt all of the front panel ports show

00:01:11,369 --> 00:01:16,409
up just as Ethernet devices just like

00:01:12,930 --> 00:01:19,380
eat zero eath one and all of the

00:01:16,409 --> 00:01:21,060
commands you kind of have come to know

00:01:19,380 --> 00:01:23,759
and love for configuring networking on

00:01:21,060 --> 00:01:26,180
Linux just work out of the box and so

00:01:23,759 --> 00:01:29,070
you know you can use any program that

00:01:26,180 --> 00:01:31,470
that works on Linux on the chemos Linux

00:01:29,070 --> 00:01:33,900
which for example you can for DHCP we

00:01:31,470 --> 00:01:35,369
just use I a CDHP for routing protocols

00:01:33,900 --> 00:01:38,280
instead of writing our no SPF and Quoc

00:01:35,369 --> 00:01:40,290
oh s PS on bgp we just use quagga but if

00:01:38,280 --> 00:01:43,590
you prefer bird you know you can just

00:01:40,290 --> 00:01:46,250
install it and use it but let me back up

00:01:43,590 --> 00:01:49,110
a bit and talk about what a switch is so

00:01:46,250 --> 00:01:51,780
you know we have a set of hardware

00:01:49,110 --> 00:01:53,009
partners that manufacture switches often

00:01:51,780 --> 00:01:54,899
the same ones that you would buy with a

00:01:53,009 --> 00:01:56,880
pariah teri or less on them or a fully

00:01:54,899 --> 00:01:58,860
proprietary I'll get into that but

00:01:56,880 --> 00:02:00,780
internally these things are just a

00:01:58,860 --> 00:02:03,240
little computer some of them have power

00:02:00,780 --> 00:02:06,119
pcs some have Intel chips something even

00:02:03,240 --> 00:02:08,220
have an arm now and they have RAM they

00:02:06,119 --> 00:02:09,840
have storage so it ends up being

00:02:08,220 --> 00:02:11,459
relatively straightforward to run Linux

00:02:09,840 --> 00:02:13,620
on that the only thing that's unusual

00:02:11,459 --> 00:02:15,900
about them is that they have

00:02:13,620 --> 00:02:17,849
a really big ASIC right in the middle

00:02:15,900 --> 00:02:20,310
that's PCI Express attached to the CPU

00:02:17,849 --> 00:02:21,810
and that is the piece that connects to

00:02:20,310 --> 00:02:24,989
all those front panel ports this one for

00:02:21,810 --> 00:02:26,909
example has 48 10 gig ports and for 40

00:02:24,989 --> 00:02:28,769
gig ports which is kind of a lot of

00:02:26,909 --> 00:02:30,480
networking capacity to plug into a

00:02:28,769 --> 00:02:32,129
server so that's why it has that special

00:02:30,480 --> 00:02:33,239
ASIC that's going to actually handle all

00:02:32,129 --> 00:02:37,280
the networking functionality and

00:02:33,239 --> 00:02:39,629
hardware so the software architecture is

00:02:37,280 --> 00:02:41,459
generally breaks down to exactly what

00:02:39,629 --> 00:02:44,099
you'd expect with one kind of caveat

00:02:41,459 --> 00:02:45,810
there's a ton tap device created for

00:02:44,099 --> 00:02:47,099
each one of these front panel ports

00:02:45,810 --> 00:02:48,900
that's then you know behind the scenes

00:02:47,099 --> 00:02:51,030
connected to the actual front panel port

00:02:48,900 --> 00:02:53,819
for handling traffic to and from the CPU

00:02:51,030 --> 00:02:55,109
itself but then all of the other kind of

00:02:53,819 --> 00:02:57,989
data structures instead of being

00:02:55,109 --> 00:02:59,340
proprietary in big blob of dietary

00:02:57,989 --> 00:03:01,079
software like most network operating

00:02:59,340 --> 00:03:02,459
systems we just use the kernels data

00:03:01,079 --> 00:03:04,049
structure so we're example the routing

00:03:02,459 --> 00:03:06,750
table that's just the kernel routing

00:03:04,049 --> 00:03:08,459
table bridge configuration that's just

00:03:06,750 --> 00:03:12,569
whatever you threw together with VR CTL

00:03:08,459 --> 00:03:14,849
and similarly instead of some ACL table

00:03:12,569 --> 00:03:17,430
is just IV tape IP tables and EB tables

00:03:14,849 --> 00:03:19,700
so it's all stuff probably everyone in

00:03:17,430 --> 00:03:21,599
this room knows how to configure and

00:03:19,700 --> 00:03:25,739
also there's a huge amount of software

00:03:21,599 --> 00:03:27,660
that knows how to drive and so we have

00:03:25,739 --> 00:03:30,840
you know some prerequisites obviously

00:03:27,660 --> 00:03:32,190
you know you need some way to install on

00:03:30,840 --> 00:03:34,680
a switch right normally when you buy

00:03:32,190 --> 00:03:36,720
switch the the OS is already baked in

00:03:34,680 --> 00:03:39,090
there right so it came from the factory

00:03:36,720 --> 00:03:40,709
is kind of one appliance to kind of

00:03:39,090 --> 00:03:42,090
break these things open and separate the

00:03:40,709 --> 00:03:44,250
hardware and software we needed some way

00:03:42,090 --> 00:03:45,419
to install we needed something on the

00:03:44,250 --> 00:03:46,980
switch when it came out of the factory

00:03:45,419 --> 00:03:49,500
and so that thing is something called

00:03:46,980 --> 00:03:52,739
Oni which we've actually contributed to

00:03:49,500 --> 00:03:55,019
the Open Compute Project what Oni is is

00:03:52,739 --> 00:03:57,959
a small very minimal network

00:03:55,019 --> 00:03:59,699
distribution unlike keyless onyx which

00:03:57,959 --> 00:04:00,989
is based on Debian and has a huge set of

00:03:59,699 --> 00:04:03,660
functionality this is a stripped down

00:04:00,989 --> 00:04:06,209
little busy box thing and its sole goal

00:04:03,660 --> 00:04:08,639
in life is to boot up and play the role

00:04:06,209 --> 00:04:10,319
that pixie does on servers only to be a

00:04:08,639 --> 00:04:12,329
lot better all right pixie kind of sucks

00:04:10,319 --> 00:04:14,609
who likes using TFTP you know it doesn't

00:04:12,329 --> 00:04:17,789
support ipv6 I mean it's it's it's not

00:04:14,609 --> 00:04:18,989
great so with the base of Linux under it

00:04:17,789 --> 00:04:21,810
it was very easy to do things like

00:04:18,989 --> 00:04:24,690
support ipv6 to allow you to install

00:04:21,810 --> 00:04:26,760
over SFTP instead of using T FTP or you

00:04:24,690 --> 00:04:27,330
know HTTP or you know whatever whatever

00:04:26,760 --> 00:04:30,389
is can

00:04:27,330 --> 00:04:33,330
in your environment and this has just

00:04:30,389 --> 00:04:34,500
used at install time once the once the

00:04:33,330 --> 00:04:36,210
switch is booted into Oni

00:04:34,500 --> 00:04:37,650
and it's found an image to install

00:04:36,210 --> 00:04:40,830
hopefully canvas Linux but there are

00:04:37,650 --> 00:04:43,080
others available this is no longer

00:04:40,830 --> 00:04:46,979
involved it will then directly into the

00:04:43,080 --> 00:04:49,379
real operating system and so I wanted to

00:04:46,979 --> 00:04:51,870
talk a bit about our contributions so

00:04:49,379 --> 00:04:53,729
we've were one of the largest

00:04:51,870 --> 00:04:55,919
contributors to quagga today because

00:04:53,729 --> 00:04:57,870
this is the routing protocol suite we we

00:04:55,919 --> 00:04:59,819
opted to use and so we did a large

00:04:57,870 --> 00:05:01,919
amount of work on the OSPF in particular

00:04:59,819 --> 00:05:04,530
the OSP at v3 implementation which is

00:05:01,919 --> 00:05:06,900
what you use for ipv6 and we've also

00:05:04,530 --> 00:05:09,870
done a large amount of work on the bgp

00:05:06,900 --> 00:05:11,610
implementation and so this is all stuff

00:05:09,870 --> 00:05:14,909
we've up streamed back to quagga so this

00:05:11,610 --> 00:05:18,779
is all very you know we don't keep any

00:05:14,909 --> 00:05:20,460
patches proprietary and then the the

00:05:18,779 --> 00:05:22,469
kernel we've been contributing heavily

00:05:20,460 --> 00:05:24,449
there we were bad about that for a

00:05:22,469 --> 00:05:27,569
little while but we've gotten our patch

00:05:24,449 --> 00:05:30,000
backlog mostly upstream so they still a

00:05:27,569 --> 00:05:31,830
little bit left to go there and then

00:05:30,000 --> 00:05:34,529
relevant to Debian we've actually

00:05:31,830 --> 00:05:35,669
rewritten if up down so that's as I'm

00:05:34,529 --> 00:05:38,190
sure most of you know the tool that

00:05:35,669 --> 00:05:40,050
manages that C network interfaces and if

00:05:38,190 --> 00:05:41,909
you've ever looked at it it's written in

00:05:40,050 --> 00:05:43,949
this weird literate programming language

00:05:41,909 --> 00:05:45,900
thing I believe it's C web or no web I

00:05:43,949 --> 00:05:47,849
can't remember which one offhand so it

00:05:45,900 --> 00:05:51,060
was exceedingly hard to modify and work

00:05:47,849 --> 00:05:52,409
on so we rewrote it in Python and we did

00:05:51,060 --> 00:05:54,210
some things like adding template

00:05:52,409 --> 00:05:55,740
libraries we used Mako for that and

00:05:54,210 --> 00:05:57,240
thing that motivated there are a couple

00:05:55,740 --> 00:05:59,039
of things that motivated us to do this

00:05:57,240 --> 00:06:02,009
the biggest one was just scalability

00:05:59,039 --> 00:06:03,960
when you have 48-52 front panel ports

00:06:02,009 --> 00:06:05,520
and you have a large number of VLANs sub

00:06:03,960 --> 00:06:07,289
interfaces hanging off of them put into

00:06:05,520 --> 00:06:10,099
bridges you can end up with thousands of

00:06:07,289 --> 00:06:13,110
interfaces and if up/down 1 was not

00:06:10,099 --> 00:06:16,379
scaling particularly well to that the

00:06:13,110 --> 00:06:18,089
other big thing we had we fixed was that

00:06:16,379 --> 00:06:20,039
with if up/down 1 the order of the

00:06:18,089 --> 00:06:23,250
interfaces in the file is extremely

00:06:20,039 --> 00:06:25,020
important you know if you put the the

00:06:23,250 --> 00:06:27,000
VLAN sub interfaces before the bridge

00:06:25,020 --> 00:06:29,069
that includes them you know it won't

00:06:27,000 --> 00:06:32,460
work if what actually bring them all up

00:06:29,069 --> 00:06:34,560
and so what if up down to does is does a

00:06:32,460 --> 00:06:36,149
sort of all the interfaces in dependency

00:06:34,560 --> 00:06:38,759
order and brings them up in order such

00:06:36,149 --> 00:06:40,910
that be you know each step will succeed

00:06:38,759 --> 00:06:43,560
and when you're done you have the full

00:06:40,910 --> 00:06:45,750
the full configuration up and one other

00:06:43,560 --> 00:06:47,190
thing we added was reload support so the

00:06:45,750 --> 00:06:49,260
ability to edit the Etsy network

00:06:47,190 --> 00:06:51,240
interfaces file and do you know

00:06:49,260 --> 00:06:52,830
basically networking reload that

00:06:51,240 --> 00:06:55,890
compares the current state in the kernel

00:06:52,830 --> 00:06:57,030
and the new config file and figures out

00:06:55,890 --> 00:06:59,610
what the minimal changes of

00:06:57,030 --> 00:07:02,220
non-disruptive changes required to bring

00:06:59,610 --> 00:07:04,260
the kernel up to date we're currently

00:07:02,220 --> 00:07:06,650
working with some folks to try to get

00:07:04,260 --> 00:07:09,420
this as an actual package in debian

00:07:06,650 --> 00:07:13,050
we're not there yet but we're definitely

00:07:09,420 --> 00:07:16,020
working on that now I'll get down to the

00:07:13,050 --> 00:07:18,090
low-light so I hope nobody brought fruit

00:07:16,020 --> 00:07:20,940
to throw we do have one proprietary

00:07:18,090 --> 00:07:22,620
piece if we go back to the diagram it's

00:07:20,940 --> 00:07:23,940
the the red part in the corner it's

00:07:22,620 --> 00:07:25,830
actually this diagram is slightly wrong

00:07:23,940 --> 00:07:29,250
the part in the kernel was actually GPL

00:07:25,830 --> 00:07:30,780
we worked with the hardware vendor to

00:07:29,250 --> 00:07:32,820
get them to open that up slew that we

00:07:30,780 --> 00:07:34,020
didn't have to have a proprietary kernel

00:07:32,820 --> 00:07:36,440
module because that would have been bad

00:07:34,020 --> 00:07:39,150
but the the part up there switched the

00:07:36,440 --> 00:07:40,740
that is actually fryi tree because it

00:07:39,150 --> 00:07:43,500
talks directly to the ASIC in this case

00:07:40,740 --> 00:07:46,410
it's a Broadcom ASIC so who here is

00:07:43,500 --> 00:07:50,700
dealt with Broadcom in the past okay so

00:07:46,410 --> 00:07:52,920
you know what's going on so we we got

00:07:50,700 --> 00:07:55,830
the permission needed program this under

00:07:52,920 --> 00:07:57,480
an NDA it links against their software

00:07:55,830 --> 00:08:00,570
development kit which is obviously

00:07:57,480 --> 00:08:02,430
proprietary the good news is that chemos

00:08:00,570 --> 00:08:04,050
linux the open the entirely open source

00:08:02,430 --> 00:08:05,820
part is still completely functional and

00:08:04,050 --> 00:08:07,500
actually very usable without this piece

00:08:05,820 --> 00:08:09,600
all you lose is you can't you can no

00:08:07,500 --> 00:08:11,040
longer run it on an actual switch you

00:08:09,600 --> 00:08:12,810
can still run on in a vm to be like a

00:08:11,040 --> 00:08:15,090
router VM or a switch vm you can still

00:08:12,810 --> 00:08:16,530
run on an x86 server if you had if you

00:08:15,090 --> 00:08:18,120
wanted to build you know a router out of

00:08:16,530 --> 00:08:19,920
that all of the all of that other

00:08:18,120 --> 00:08:22,350
functionality you know if up down to all

00:08:19,920 --> 00:08:24,960
the quagga routing protocol enhancements

00:08:22,350 --> 00:08:26,730
all those are still baked in in fact you

00:08:24,960 --> 00:08:32,540
can download a VM image of this from our

00:08:26,730 --> 00:08:32,540
website if you'd like to try it out so

00:08:32,750 --> 00:08:38,070
we are trying to get towards a better

00:08:35,190 --> 00:08:39,420
future here though we've been working

00:08:38,070 --> 00:08:41,850
actually we were involved in the

00:08:39,420 --> 00:08:44,550
initiation of a project to bring switch

00:08:41,850 --> 00:08:46,560
dev into the the kernel this is similar

00:08:44,550 --> 00:08:48,390
in spirit to net dev net dev is a way to

00:08:46,560 --> 00:08:49,950
describe Nix so you could have different

00:08:48,390 --> 00:08:51,540
drivers for your different Nix you get

00:08:49,950 --> 00:08:54,779
you know your ichiro switch dev is the

00:08:51,540 --> 00:08:56,279
same thing but for these switching a six

00:08:54,779 --> 00:08:57,899
big problem that we're running into of

00:08:56,279 --> 00:08:59,610
course is these vendors are all

00:08:57,899 --> 00:09:01,589
extremely paranoid about their

00:08:59,610 --> 00:09:03,569
programming specs I make the argument

00:09:01,589 --> 00:09:04,860
fairly frequently that hey and more

00:09:03,569 --> 00:09:05,249
people who know how to program your

00:09:04,860 --> 00:09:07,199
chips

00:09:05,249 --> 00:09:08,579
the more people write software for your

00:09:07,199 --> 00:09:11,129
chips and then the more people will buy

00:09:08,579 --> 00:09:16,290
your chips but the the harder industry

00:09:11,129 --> 00:09:17,309
is is a little paranoid so you know

00:09:16,290 --> 00:09:19,079
we've got we've seen a couple of

00:09:17,309 --> 00:09:21,389
responses some vendors are just

00:09:19,079 --> 00:09:23,970
absolutely no like we don't want to have

00:09:21,389 --> 00:09:25,589
anything to do with this others decide

00:09:23,970 --> 00:09:27,209
oh no problem we're gonna open source

00:09:25,589 --> 00:09:29,459
our driver and then you get it and it's

00:09:27,209 --> 00:09:31,620
a bunch of one-line stubs that are PC

00:09:29,459 --> 00:09:34,069
across to an arm core on the chip that's

00:09:31,620 --> 00:09:36,120
running the giant proprietary blob which

00:09:34,069 --> 00:09:39,689
doesn't seem like it's really any better

00:09:36,120 --> 00:09:43,129
so this is gonna be a slog it's gonna be

00:09:39,689 --> 00:09:45,149
a long road I'm optimistic that we can

00:09:43,129 --> 00:09:48,240
get to the end of this road in a

00:09:45,149 --> 00:09:50,129
satisfactory manner but it's definitely

00:09:48,240 --> 00:09:52,470
not going to be easy

00:09:50,129 --> 00:09:54,889
so that's all of the material added any

00:09:52,470 --> 00:09:54,889
questions

00:10:01,850 --> 00:10:08,340
in terms of the drivers for the various

00:10:04,890 --> 00:10:11,370
Asics and their Sosa's have you i hope

00:10:08,340 --> 00:10:13,740
you've heard of open data plane open

00:10:11,370 --> 00:10:15,360
data find yeah that one is focused so i

00:10:13,740 --> 00:10:16,650
mean may have probably should have

00:10:15,360 --> 00:10:18,030
elaborate a bit more we're entirely

00:10:16,650 --> 00:10:20,220
focused on actual fixed function

00:10:18,030 --> 00:10:22,350
forwarding a6 sure open data plane is

00:10:20,220 --> 00:10:24,030
more around SOC s like have iums that

00:10:22,350 --> 00:10:25,470
have most of the forwarding is done in

00:10:24,030 --> 00:10:28,290
software but they have offloads to

00:10:25,470 --> 00:10:29,460
offload certain how fast paths so this

00:10:28,290 --> 00:10:33,810
is very different all of the forwarding

00:10:29,460 --> 00:10:35,430
is done in hardware here sure I should

00:10:33,810 --> 00:10:37,080
mention I work for Lenovo in the

00:10:35,430 --> 00:10:39,240
networking group so I know the people

00:10:37,080 --> 00:10:51,480
who developed open data plane oh maybe I

00:10:39,240 --> 00:10:54,510
should talk afterwards absolutely yes so

00:10:51,480 --> 00:10:57,510
you said this is just a normal bash and

00:10:54,510 --> 00:11:00,350
I can use all the usual tools but the

00:10:57,510 --> 00:11:03,090
advantage of iOS iOS or what-have-you is

00:11:00,350 --> 00:11:05,280
I'm kind of protected at least in some

00:11:03,090 --> 00:11:07,740
circumstances against executing things

00:11:05,280 --> 00:11:10,740
which are then executed on the CPU and

00:11:07,740 --> 00:11:12,870
not on the silicon anymore so did you

00:11:10,740 --> 00:11:15,030
build any safeguards which tell me ok

00:11:12,870 --> 00:11:16,830
you are about to leave whatever the

00:11:15,030 --> 00:11:19,680
silicon can do and you will need to

00:11:16,830 --> 00:11:21,600
enter CPU term CPU land and just break

00:11:19,680 --> 00:11:23,130
all performance yes absolutely so we

00:11:21,600 --> 00:11:24,360
actually never fall back to the CPU

00:11:23,130 --> 00:11:25,980
because the performance disparity

00:11:24,360 --> 00:11:27,750
between these CPUs and you know the

00:11:25,980 --> 00:11:29,250
highest end parts can do you know two

00:11:27,750 --> 00:11:31,050
and a half terabits per second of

00:11:29,250 --> 00:11:33,960
switching you know the CPUs can't do a

00:11:31,050 --> 00:11:35,790
hundredth that so we'll never actually

00:11:33,960 --> 00:11:38,070
fall back to software will almost all

00:11:35,790 --> 00:11:39,390
scenarios on all normal scenarios where

00:11:38,070 --> 00:11:41,610
you would end up not being able to do in

00:11:39,390 --> 00:11:44,310
hardware will warn you and roll back the

00:11:41,610 --> 00:11:45,630
change there's a couple of minor kind of

00:11:44,310 --> 00:11:49,700
edge cases where that's not happening

00:11:45,630 --> 00:11:49,700
today we consider those bugs to be fixed

00:11:50,300 --> 00:11:54,900
they've been derivative right how

00:11:52,680 --> 00:11:56,850
different is it from Debian we try to

00:11:54,900 --> 00:11:59,130
make it as minimally as close as

00:11:56,850 --> 00:12:03,570
possible for the most part you know we

00:11:59,130 --> 00:12:05,850
actually use Debian binary packages for

00:12:03,570 --> 00:12:06,330
probably 90% of the packages in the

00:12:05,850 --> 00:12:07,890
system

00:12:06,330 --> 00:12:09,660
things like quagga we've worked on

00:12:07,890 --> 00:12:11,460
extensively so we have our own version

00:12:09,660 --> 00:12:13,770
that's kind of managed same with the

00:12:11,460 --> 00:12:15,300
kernel and we've added some software we

00:12:13,770 --> 00:12:18,510
switched from using if up and down

00:12:15,300 --> 00:12:21,779
down to but for the most part it's it's

00:12:18,510 --> 00:12:24,660
Debian right now we're Weezy based we're

00:12:21,779 --> 00:12:28,080
in the middle of the process of porting

00:12:24,660 --> 00:12:29,519
forward to Jess it's it's good we'll be

00:12:28,080 --> 00:12:44,519
in the next release it's gonna gonna be

00:12:29,519 --> 00:12:47,399
a bit of a time though one chassis that

00:12:44,519 --> 00:12:50,640
you're targeting so right now I mean we

00:12:47,399 --> 00:12:52,290
don't have any philosophical ties to any

00:12:50,640 --> 00:12:54,180
particular hardware form factor right

00:12:52,290 --> 00:12:57,149
now it's these you know 10 plus 40

00:12:54,180 --> 00:12:58,649
uplink switches with either four six

00:12:57,149 --> 00:13:02,910
forty you got links we also have 32 by

00:12:58,649 --> 00:13:04,800
40 you know 30 to 500 is coming soon we

00:13:02,910 --> 00:13:07,860
also have one gig switches that are 48 1

00:13:04,800 --> 00:13:10,890
gig plus you know 4 10 gig up links but

00:13:07,860 --> 00:13:12,720
but still just one chassis yeah so

00:13:10,890 --> 00:13:14,579
philosophically that I was yeah but

00:13:12,720 --> 00:13:16,350
we're not philosophical about that we

00:13:14,579 --> 00:13:18,600
are philosophical about is we don't do

00:13:16,350 --> 00:13:20,459
stacking the problem with stacking and

00:13:18,600 --> 00:13:22,230
these kind of like chassis we're chassis

00:13:20,459 --> 00:13:24,270
protocols they're incredibly proprietary

00:13:22,230 --> 00:13:25,890
incredibly brittle and so they're great

00:13:24,270 --> 00:13:27,480
when they work but when they don't

00:13:25,890 --> 00:13:29,310
you're kind of at the vendors mercy so

00:13:27,480 --> 00:13:31,350
we actually what our customers tend to

00:13:29,310 --> 00:13:33,779
do is use tools like ansible or puppet

00:13:31,350 --> 00:13:35,970
to orchestrate all the switches and they

00:13:33,779 --> 00:13:38,399
tend to do more l3 instead of l2 so they

00:13:35,970 --> 00:13:40,560
end up using open protocols like IB GPU

00:13:38,399 --> 00:13:42,149
or OSPF to kind of stitch all of this

00:13:40,560 --> 00:13:44,279
together so that way when something goes

00:13:42,149 --> 00:13:46,320
wrong you can go dump all the OSPF state

00:13:44,279 --> 00:13:47,760
and say oh yeah they adjacency to inform

00:13:46,320 --> 00:13:49,470
on this link right here and that's why

00:13:47,760 --> 00:13:52,380
this other path is getting overloaded

00:13:49,470 --> 00:13:53,880
let's figure out why or you know the Mac

00:13:52,380 --> 00:13:55,730
is missing on this machine for some

00:13:53,880 --> 00:13:59,670
reason let's go figure out what happened

00:13:55,730 --> 00:14:02,190
what do you think about the roadmaps

00:13:59,670 --> 00:14:05,010
that other when vendors are following

00:14:02,190 --> 00:14:07,770
like putting compute and switching on to

00:14:05,010 --> 00:14:10,500
the same box putting VMs on to the same

00:14:07,770 --> 00:14:11,940
box I mean I view them as following us

00:14:10,500 --> 00:14:13,380
right it's like we didn't have to do

00:14:11,940 --> 00:14:15,600
anything to let you put a VM on our box

00:14:13,380 --> 00:14:15,779
you just apt-get install KVM and off you

00:14:15,600 --> 00:14:18,209
go

00:14:15,779 --> 00:14:20,790
ok but that's already something that you

00:14:18,209 --> 00:14:23,270
intend to do with this box oh we've done

00:14:20,790 --> 00:14:25,110
that from the beginning okay and we

00:14:23,270 --> 00:14:27,990
literally the first thing we did was

00:14:25,110 --> 00:14:28,840
bring up Linux on this thing and Debian

00:14:27,990 --> 00:14:30,430
specifically and so

00:14:28,840 --> 00:14:32,140
we haven't even implemented the harbor

00:14:30,430 --> 00:14:33,820
forwarding so at that point the only

00:14:32,140 --> 00:14:36,750
thing you could do on it is run VMs and

00:14:33,820 --> 00:14:43,540
things like that do you by default

00:14:36,750 --> 00:14:47,770
separate the management VM or is the the

00:14:43,540 --> 00:14:52,480
switch management I say dumb zero or his

00:14:47,770 --> 00:14:55,660
VM or is that so we we don't support Xen

00:14:52,480 --> 00:14:57,730
so you'd be using KVM in this case and

00:14:55,660 --> 00:14:59,050
in in a default use case if you're just

00:14:57,730 --> 00:15:00,880
using the box you would have any VMs

00:14:59,050 --> 00:15:02,260
there's just the host kernel and you

00:15:00,880 --> 00:15:04,120
know it's routing table is what the

00:15:02,260 --> 00:15:05,710
hardware is forwarding and you know we

00:15:04,120 --> 00:15:07,270
do have management separation so you can

00:15:05,710 --> 00:15:09,010
have separate routing tables for the you

00:15:07,270 --> 00:15:11,380
know Ethernet zero kind of management

00:15:09,010 --> 00:15:13,210
port versus actual data plane ports but

00:15:11,380 --> 00:15:14,560
that's just using you know IP rule and

00:15:13,210 --> 00:15:15,820
you know the multiple routing tables

00:15:14,560 --> 00:15:19,150
support that's already in the kernel

00:15:15,820 --> 00:15:25,060
what about fancy stuff like net flow and

00:15:19,150 --> 00:15:26,230
a VPN we support s flow not net flow

00:15:25,060 --> 00:15:28,090
that's I think that's a Cisco

00:15:26,230 --> 00:15:30,790
proprietary one so we'd be less likely

00:15:28,090 --> 00:15:31,870
to support that one evpn is something

00:15:30,790 --> 00:15:34,360
we're working on in the context of

00:15:31,870 --> 00:15:36,370
carrying the X land vni tags around but

00:15:34,360 --> 00:15:38,650
we don't have that in a shipping version

00:15:36,370 --> 00:15:40,450
yet it's something that would be totally

00:15:38,650 --> 00:15:42,010
reasonable to do and unlike most vendors

00:15:40,450 --> 00:15:44,350
if you decided you wanted it and you had

00:15:42,010 --> 00:15:48,870
a Emacs open and a C compiler you could

00:15:44,350 --> 00:15:53,650
a car quagga to do it all right thanks

00:15:48,870 --> 00:15:57,130
are you committed to also planning to

00:15:53,650 --> 00:15:58,720
support MPLS fully we are working on

00:15:57,130 --> 00:16:00,490
MPLS I don't know how fully we would

00:15:58,720 --> 00:16:03,070
support it I don't know if we're gonna

00:16:00,490 --> 00:16:05,890
try to replace you know big telephone

00:16:03,070 --> 00:16:07,570
company carrier routers MPLS but for the

00:16:05,890 --> 00:16:09,190
uses of MPL so inside the data center in

00:16:07,570 --> 00:16:10,600
between kind of adjacent data centers

00:16:09,190 --> 00:16:12,820
that's definitely stuff we consider in

00:16:10,600 --> 00:16:16,450
our working on so when you look at long

00:16:12,820 --> 00:16:18,430
term stability take ace catalyst 6500

00:16:16,450 --> 00:16:21,520
they may be old but they run for years

00:16:18,430 --> 00:16:24,040
and they do what they need to do how as

00:16:21,520 --> 00:16:26,320
of today do you you Kamilah accumulate

00:16:24,040 --> 00:16:29,350
Linux can I just deploy it now and have

00:16:26,320 --> 00:16:32,050
it run for five years as of right now or

00:16:29,350 --> 00:16:33,640
do you have a realistic expectation of

00:16:32,050 --> 00:16:35,530
when you reach that point as soon as I

00:16:33,640 --> 00:16:37,870
secure them achieve a machine I can just

00:16:35,530 --> 00:16:39,970
keep it running forever yeah I mean

00:16:37,870 --> 00:16:41,140
we've we've only been around for five

00:16:39,970 --> 00:16:42,370
and a half years so there haven't been

00:16:41,140 --> 00:16:42,610
any running for five years but we do

00:16:42,370 --> 00:16:44,110
have

00:16:42,610 --> 00:16:46,209
a large customer that's been running

00:16:44,110 --> 00:16:48,790
approximately 30,000 switches running

00:16:46,209 --> 00:16:50,620
cumulus Linux for two-plus years now and

00:16:48,790 --> 00:16:52,329
no no major issues

00:16:50,620 --> 00:16:54,910
yeah but anyone at that scale would

00:16:52,329 --> 00:16:56,829
probably upgrade quite aggressively

00:16:54,910 --> 00:16:58,240
because they just can but sometimes you

00:16:56,829 --> 00:17:00,730
have machines in places where you cannot

00:16:58,240 --> 00:17:03,089
really do that so it's just anything

00:17:00,730 --> 00:17:05,650
you're looking at or are you basically

00:17:03,089 --> 00:17:07,089
saying people just need to upgrade

00:17:05,650 --> 00:17:08,380
regularly and that's that

00:17:07,089 --> 00:17:09,640
well you generally advise people to

00:17:08,380 --> 00:17:11,049
upgrade but we do provide security

00:17:09,640 --> 00:17:12,850
patches to older versions so we're not

00:17:11,049 --> 00:17:14,770
gonna leave people like high and dry but

00:17:12,850 --> 00:17:16,390
any sort of new functionality or bug

00:17:14,770 --> 00:17:17,530
fixes that aren't security relevant the

00:17:16,390 --> 00:17:22,360
older releases just aren't going to get

00:17:17,530 --> 00:17:25,329
them when you say you support but do you

00:17:22,360 --> 00:17:27,939
are also able to run Bert I prefer koala

00:17:25,329 --> 00:17:28,900
so that's good but what are you doing

00:17:27,939 --> 00:17:30,520
about the performance of quagga

00:17:28,900 --> 00:17:32,410
especially when it comes to bgp if

00:17:30,520 --> 00:17:34,299
you've got a large routing tables so are

00:17:32,410 --> 00:17:35,679
you looking at multi-core because bert

00:17:34,299 --> 00:17:37,840
is really really quick and quite as

00:17:35,679 --> 00:17:38,980
really slow yeah we've been doing a lot

00:17:37,840 --> 00:17:41,290
of work on quad core performance and

00:17:38,980 --> 00:17:42,760
scalability we've improved it probably

00:17:41,290 --> 00:17:44,410
not as much as it needs to be improved

00:17:42,760 --> 00:17:45,940
so we're still working on it but and we

00:17:44,410 --> 00:17:47,380
also did things like first hot and a

00:17:45,940 --> 00:17:50,140
high number of sessions we switched

00:17:47,380 --> 00:17:52,000
using e-poll instead of select you know

00:17:50,140 --> 00:17:53,860
these are all things that we considered

00:17:52,000 --> 00:17:57,490
and fixed tests actually first and then

00:17:53,860 --> 00:18:00,340
fix when we find it thank you

00:17:57,490 --> 00:18:01,840
so 30,000 switches that's a production

00:18:00,340 --> 00:18:05,770
use case is it

00:18:01,840 --> 00:18:09,280
how about 1x on the port's POA on the

00:18:05,770 --> 00:18:11,710
ports and during upgrades that you

00:18:09,280 --> 00:18:14,559
mentioned is the switching gonna

00:18:11,710 --> 00:18:16,330
continue on the pure ASIC level or is

00:18:14,559 --> 00:18:17,500
the entire switch rebooting we don't do

00:18:16,330 --> 00:18:18,640
iss-you

00:18:17,500 --> 00:18:20,380
and that's another one of these

00:18:18,640 --> 00:18:22,179
philosophical points I would I would say

00:18:20,380 --> 00:18:23,770
you would should build a denser

00:18:22,179 --> 00:18:25,360
interconnected network such that you can

00:18:23,770 --> 00:18:27,280
take down a single switch upgrade it

00:18:25,360 --> 00:18:28,870
bring it back up into the adjacency and

00:18:27,280 --> 00:18:30,100
no one would even notice and so then you

00:18:28,870 --> 00:18:31,809
can do a rolling upgrade because the

00:18:30,100 --> 00:18:33,280
problem with ISS you is it's a really

00:18:31,809 --> 00:18:34,480
complicated thing you're persisting all

00:18:33,280 --> 00:18:37,270
of the life runtime state of the

00:18:34,480 --> 00:18:38,530
software somewhere rebooting and then

00:18:37,270 --> 00:18:41,169
reloading that with a totally new

00:18:38,530 --> 00:18:42,820
version of the code reading that old

00:18:41,169 --> 00:18:44,049
state and then trying to like you know

00:18:42,820 --> 00:18:45,580
pick up where it left off including

00:18:44,049 --> 00:18:47,440
things like you know not breaking

00:18:45,580 --> 00:18:48,850
connections to bgp peers so like

00:18:47,440 --> 00:18:50,380
remembering what sequence number you're

00:18:48,850 --> 00:18:52,210
at and you know where the BGP state

00:18:50,380 --> 00:18:54,700
machine was that and this this ends up

00:18:52,210 --> 00:18:56,350
being pretty brutal but the point is if

00:18:54,700 --> 00:18:59,460
you don't support stacking

00:18:56,350 --> 00:19:04,870
don't have the option to put a downlink

00:18:59,460 --> 00:19:06,940
server into a dual home scenario I'm

00:19:04,870 --> 00:19:08,950
seasick or PC or something we support em

00:19:06,940 --> 00:19:10,900
lag so you can have a server with two

00:19:08,950 --> 00:19:12,370
links that are bonded together to a pair

00:19:10,900 --> 00:19:13,900
of top rx switches and then the spine

00:19:12,370 --> 00:19:16,630
should be redundant using routing

00:19:13,900 --> 00:19:17,919
protocols so if you if you architect the

00:19:16,630 --> 00:19:19,510
network with redundancy at every level

00:19:17,919 --> 00:19:22,179
you can do a rolling upgrade across it

00:19:19,510 --> 00:19:24,910
with zero downtime so which part of your

00:19:22,179 --> 00:19:33,370
switches would be spine and leaf all of

00:19:24,910 --> 00:19:35,289
them yeah okay yes you said you support

00:19:33,370 --> 00:19:38,559
em leg how do you do that is that part

00:19:35,289 --> 00:19:39,850
of the proprieties which D there is one

00:19:38,559 --> 00:19:41,169
tiny little piece that's currently in

00:19:39,850 --> 00:19:42,640
there we're working on pulling that out

00:19:41,169 --> 00:19:44,620
and probably will have that pulled out

00:19:42,640 --> 00:19:46,320
in the next month or so the rest of its

00:19:44,620 --> 00:19:48,280
just Python program that is a

00:19:46,320 --> 00:19:49,720
complicated state machine talking

00:19:48,280 --> 00:19:51,549
emmalegs a very complicated thing I

00:19:49,720 --> 00:19:54,760
didn't want to do it but people really

00:19:51,549 --> 00:19:57,010
really like it so we so we did it but

00:19:54,760 --> 00:19:59,200
it's all just essentially just a Python

00:19:57,010 --> 00:20:01,419
program it manipulates the bridging

00:19:59,200 --> 00:20:03,549
state and the SDP blocking state of

00:20:01,419 --> 00:20:06,730
various things and then we had to modify

00:20:03,549 --> 00:20:08,440
the MST PD we use two obviously BM lag

00:20:06,730 --> 00:20:10,480
aware and they coordinate with each

00:20:08,440 --> 00:20:12,280
other and then there's also some EB

00:20:10,480 --> 00:20:13,510
table rules that get added at various

00:20:12,280 --> 00:20:15,190
times but it

00:20:13,510 --> 00:20:16,840
I mean it's it's all the same thing you

00:20:15,190 --> 00:20:18,250
would do in a proprietary I'm like it's

00:20:16,840 --> 00:20:19,179
just we're reusing the kernel constructs

00:20:18,250 --> 00:20:24,520
so they're already there because hey

00:20:19,179 --> 00:20:25,539
they're there let's just use them and we

00:20:24,520 --> 00:20:27,190
had to modify the current a little bit

00:20:25,539 --> 00:20:29,919
as well we're trying to get that up

00:20:27,190 --> 00:20:37,240
streamed as well most of it's already up

00:20:29,919 --> 00:20:38,740
streamed excellent very good I John was

00:20:37,240 --> 00:20:40,510
just filling in that actually I misspoke

00:20:38,740 --> 00:20:42,190
most of our patches have already been

00:20:40,510 --> 00:20:44,080
accepted upstream so there's only a

00:20:42,190 --> 00:20:45,789
handful still left to do em like support

00:20:44,080 --> 00:20:48,299
that are not up streamed yet still

00:20:45,789 --> 00:20:48,299
working on those

00:20:49,450 --> 00:20:52,519
[Music]

00:20:53,059 --> 00:20:55,120

YouTube URL: https://www.youtube.com/watch?v=DqaYbb2SNNk


