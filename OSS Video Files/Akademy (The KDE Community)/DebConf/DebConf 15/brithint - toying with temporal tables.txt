Title: brithint - toying with temporal tables
Publication date: 2017-12-03
Playlist: DebConf 15
Description: 
	by Anthony Towns

At: DebConf15
https://summit.debconf.org/debconf15/meeting/293/brithint-toying-with-temporal-tables/
https://debconf15.debconf.org/

Databases are great at remembering things, but most of the time we only let them know what the current state of the world is. Temporal tables are the database equivalent of using version control -- allowing you not only to see how things are now, but also to be able to see how things used to be, and who changed them and why.

brithint is a python tool that uses temporal tables to manage britney's hints database, so that it's possible to track when hints were introduced or removed, who they were introduced by -- and even better, it's possible to review that data to see where the release team gets bottlenecked.

Room: Heidelberg
Scheduled start: 2015-08-17 11:30:00
Captions: 
	00:00:01,010 --> 00:00:09,630
okay welcome again the next talk will be

00:00:06,330 --> 00:00:14,240
about Britain and the talk the speaker

00:00:09,630 --> 00:00:17,970
is Anthony towns paddy thanks for coming

00:00:14,240 --> 00:00:20,070
this was originally a full-length talk

00:00:17,970 --> 00:00:22,230
and I got asked to turn it down and when

00:00:20,070 --> 00:00:24,330
I did my slides yesterday that didn't

00:00:22,230 --> 00:00:26,279
turn out so well so I might be going a

00:00:24,330 --> 00:00:29,640
little bit fast

00:00:26,279 --> 00:00:31,590
I guess most people here are non-native

00:00:29,640 --> 00:00:34,640
English speakers can you stick your hand

00:00:31,590 --> 00:00:38,100
up if you don't speak English natively

00:00:34,640 --> 00:00:40,170
yeah so the first section will be not

00:00:38,100 --> 00:00:42,059
that relevant so hopefully that'll get

00:00:40,170 --> 00:00:44,670
you used to my accent and whatever and

00:00:42,059 --> 00:00:48,960
you can you can cope with when we get to

00:00:44,670 --> 00:00:50,700
the complicated stuff so I'm Anthony

00:00:48,960 --> 00:00:53,670
towns I'm to blame for a lot of stuff

00:00:50,700 --> 00:00:56,039
from about ten years ago most of that

00:00:53,670 --> 00:00:59,370
bits not relevant so I was DPL FTP

00:00:56,039 --> 00:01:00,719
master blah blah blah but more

00:00:59,370 --> 00:01:03,690
particularly I was the original author

00:01:00,719 --> 00:01:05,970
of Britney so it was originally in Perl

00:01:03,690 --> 00:01:08,549
and then Perl and C and then Python and

00:01:05,970 --> 00:01:10,560
C and now it's thankfully been taken

00:01:08,549 --> 00:01:12,000
over by other people so there's a Sat

00:01:10,560 --> 00:01:14,189
solver version that I don't think

00:01:12,000 --> 00:01:16,020
actually gets used and there's a new

00:01:14,189 --> 00:01:19,470
version that's in pure Python so it

00:01:16,020 --> 00:01:20,790
doesn't have the horrible C stuff and I

00:01:19,470 --> 00:01:25,320
think there's a guy in the back there

00:01:20,790 --> 00:01:27,270
that's responsible for that mostly more

00:01:25,320 --> 00:01:31,320
recently I was a release engineer at Red

00:01:27,270 --> 00:01:34,850
Hat so similar job less political stuff

00:01:31,320 --> 00:01:38,009
more technically more technical things

00:01:34,850 --> 00:01:41,610
and obviously all rpm stuff instead of

00:01:38,009 --> 00:01:43,259
Deb's stuff I was in the in the

00:01:41,610 --> 00:01:46,020
Australian office and I worked with the

00:01:43,259 --> 00:01:48,329
docs team and a storage team and pretty

00:01:46,020 --> 00:01:49,799
much everyone else if you're looking for

00:01:48,329 --> 00:01:51,600
a job and want to worker and they're

00:01:49,799 --> 00:01:53,430
interested in working with things that

00:01:51,600 --> 00:01:56,579
aren't Debian and totally recommend rad

00:01:53,430 --> 00:01:58,320
red-hot the first day I joined there was

00:01:56,579 --> 00:02:04,229
huge flame war about licensing so I

00:01:58,320 --> 00:02:06,930
thought right at home so one of the

00:02:04,229 --> 00:02:09,360
things about working at Red Hat is that

00:02:06,930 --> 00:02:12,180
unlike Debbie and it's a big company so

00:02:09,360 --> 00:02:13,830
they actually care about all the boring

00:02:12,180 --> 00:02:17,580
legal side of things or not

00:02:13,830 --> 00:02:19,680
copyleft licensing stuff but are we

00:02:17,580 --> 00:02:21,720
going to be risking millions of dollars

00:02:19,680 --> 00:02:24,330
of money if we do if we have bugs and

00:02:21,720 --> 00:02:26,880
whatever else so one of red hearts

00:02:24,330 --> 00:02:31,260
customers is is these people running

00:02:26,880 --> 00:02:35,030
stock markets for instance and so they

00:02:31,260 --> 00:02:38,310
care about order to fair bit so if

00:02:35,030 --> 00:02:40,800
debian releases a package and there's a

00:02:38,310 --> 00:02:42,630
bug then we fix the bug and that's fine

00:02:40,800 --> 00:02:46,950
everyone gets on with life

00:02:42,630 --> 00:02:48,870
red heart if you have a bug then someone

00:02:46,950 --> 00:02:50,700
might come back years later saying hey

00:02:48,870 --> 00:02:52,620
there's this bug and we hold you

00:02:50,700 --> 00:02:54,840
responsible we need you to fix it and

00:02:52,620 --> 00:02:57,150
Red Hat needs to be able to go back and

00:02:54,840 --> 00:02:58,470
kind of work out okay yeah they're

00:02:57,150 --> 00:03:00,120
telling the truth who really did ship

00:02:58,470 --> 00:03:05,970
that bug or no they're just making crap

00:03:00,120 --> 00:03:07,710
up so and and one of the things that

00:03:05,970 --> 00:03:09,600
comes with that is a kind of

00:03:07,710 --> 00:03:11,730
reproducible builds version so if you've

00:03:09,600 --> 00:03:13,800
got everything you ever used and

00:03:11,730 --> 00:03:15,840
released you want to also be able to

00:03:13,800 --> 00:03:17,340
reproduce the build environment and be

00:03:15,840 --> 00:03:20,640
able to kind of get it the same thing

00:03:17,340 --> 00:03:22,890
again so if you look at Red Hat

00:03:20,640 --> 00:03:24,960
reproducible builds you'll get you'll

00:03:22,890 --> 00:03:26,610
get something that's not quite as cool

00:03:24,960 --> 00:03:30,360
as the reproducible builds that's going

00:03:26,610 --> 00:03:33,360
on in Debian at the minute okay and so

00:03:30,360 --> 00:03:40,410
what that's all done with is the code

00:03:33,360 --> 00:03:43,050
rebuild system it's kind of a

00:03:40,410 --> 00:03:45,480
combination of tools from the Debian

00:03:43,050 --> 00:03:47,700
universe so it's like docking that it

00:03:45,480 --> 00:03:50,280
manages the archive that gets mirrored

00:03:47,700 --> 00:03:53,190
out or sent up to rhn and mirrored out

00:03:50,280 --> 00:03:55,380
whatever it's also like s build in that

00:03:53,190 --> 00:03:57,450
it handles all the auto builders it's

00:03:55,380 --> 00:04:00,750
kind of like P builder in that it's used

00:03:57,450 --> 00:04:02,880
for test builds from developers it's

00:04:00,750 --> 00:04:07,650
like a leothinn that it kind of controls

00:04:02,880 --> 00:04:10,200
a distro I'd get of the source code and

00:04:07,650 --> 00:04:12,240
it's kind of like snapshot of Debian in

00:04:10,200 --> 00:04:16,920
that it's got a whole lot of history

00:04:12,240 --> 00:04:18,150
going back for years and years so Koji

00:04:16,920 --> 00:04:22,169
was one of the things I worked on at Red

00:04:18,150 --> 00:04:25,320
Hat yeah that's links to various

00:04:22,169 --> 00:04:30,120
information whatever

00:04:25,320 --> 00:04:32,820
so the sorts of things that you can do

00:04:30,120 --> 00:04:36,600
with Koji is commands like that that

00:04:32,820 --> 00:04:38,340
you'd run on your laptop - the first one

00:04:36,600 --> 00:04:40,680
is kind of like promoting a build into

00:04:38,340 --> 00:04:43,140
testing the second one is doing an

00:04:40,680 --> 00:04:44,670
official build and uploading it and the

00:04:43,140 --> 00:04:48,720
third one is just doing a test build

00:04:44,670 --> 00:04:51,390
like you're doing people though so when

00:04:48,720 --> 00:04:54,150
I say it's like tacked I mean it really

00:04:51,390 --> 00:04:57,180
is kind of the same so you take add a

00:04:54,150 --> 00:04:59,910
command line you can generally have a

00:04:57,180 --> 00:05:02,310
pretty similar koji command line the

00:04:59,910 --> 00:05:03,900
example there is just listing the Debs

00:05:02,310 --> 00:05:05,460
that the source packages that are

00:05:03,900 --> 00:05:08,220
currently in testing or the way

00:05:05,460 --> 00:05:11,010
yesterday and the source pack and those

00:05:08,220 --> 00:05:16,320
source rpms that are currently in Fedora

00:05:11,010 --> 00:05:19,710
22 so where Koji gets interesting and

00:05:16,320 --> 00:05:20,460
those things that Debian can't do is in

00:05:19,710 --> 00:05:23,370
history

00:05:20,460 --> 00:05:25,350
so with daca less or are Madison you can

00:05:23,370 --> 00:05:27,930
see what's currently in the archive and

00:05:25,350 --> 00:05:30,780
you can do the same thing with Koji but

00:05:27,930 --> 00:05:36,600
Koji also lets you see what things were

00:05:30,780 --> 00:05:37,740
like what back in February the 8th and

00:05:36,600 --> 00:05:39,720
you can do that just with a simple

00:05:37,740 --> 00:05:42,660
command line from your laptop at home

00:05:39,720 --> 00:05:45,690
whatever and you can also get an audit

00:05:42,660 --> 00:05:47,760
trail so when did the packages get

00:05:45,690 --> 00:05:50,850
uploaded when did they changed who did

00:05:47,760 --> 00:05:52,320
them and a simple command will just give

00:05:50,850 --> 00:05:57,410
you a history of that that you probably

00:05:52,320 --> 00:05:57,410
can't actually read is that any better

00:06:06,590 --> 00:06:17,310
so an order trail like that makes things

00:06:13,130 --> 00:06:19,110
easier to kind of understand when you're

00:06:17,310 --> 00:06:21,449
not just packing on some code and you

00:06:19,110 --> 00:06:24,000
end up with a bug so if you end up a few

00:06:21,449 --> 00:06:26,190
weeks later with something doesn't work

00:06:24,000 --> 00:06:28,979
on my system but it works fine on mine

00:06:26,190 --> 00:06:30,509
oh is that because you're running a

00:06:28,979 --> 00:06:34,800
different version because I'm out of

00:06:30,509 --> 00:06:36,720
date because you're out of date and it's

00:06:34,800 --> 00:06:38,250
basically similar to some of the sorts

00:06:36,720 --> 00:06:40,229
of things you get in get so you can do a

00:06:38,250 --> 00:06:42,300
kind of git bisect except with

00:06:40,229 --> 00:06:45,630
repositories instead of just a single

00:06:42,300 --> 00:06:48,690
codebase you can obviously do a get

00:06:45,630 --> 00:06:50,520
blame so back here we had whoo-hoo

00:06:48,690 --> 00:06:56,190
tagged this broken version of Firefox

00:06:50,520 --> 00:06:57,990
into Fedora 22 and the other kind of

00:06:56,190 --> 00:07:00,449
useful thing that's the other thing

00:06:57,990 --> 00:07:03,240
that's kind of useful for is that you

00:07:00,449 --> 00:07:04,620
can just look up the history of if you

00:07:03,240 --> 00:07:05,940
were doing lots of build system stuff

00:07:04,620 --> 00:07:10,919
you can look up the history of what you

00:07:05,940 --> 00:07:12,449
were doing three months ago so I kind of

00:07:10,919 --> 00:07:15,210
think all that was pretty cool and so

00:07:12,449 --> 00:07:17,039
the question is can i redo that

00:07:15,210 --> 00:07:19,860
somewhere else that's now relevant now

00:07:17,039 --> 00:07:21,750
that I'm not a Red Hat and okay it would

00:07:19,860 --> 00:07:25,169
be cool to have doc do it but that's

00:07:21,750 --> 00:07:28,860
pretty complicated so screw that'd be

00:07:25,169 --> 00:07:32,400
kind of cool to have devotee or Deb bugs

00:07:28,860 --> 00:07:35,009
have kind of historical information so

00:07:32,400 --> 00:07:37,169
Deb bugs in its mail logs has a history

00:07:35,009 --> 00:07:39,110
of who changed the severity and whatever

00:07:37,169 --> 00:07:42,000
else but it's not really queryable

00:07:39,110 --> 00:07:44,490
that'd be cool I think but both of those

00:07:42,000 --> 00:07:45,780
are pretty complicated so I figure what

00:07:44,490 --> 00:07:47,759
could be simpler than Britney hey I

00:07:45,780 --> 00:07:52,520
wrote it and it's still pretty similar

00:07:47,759 --> 00:07:56,909
to that so that's kind of what I figured

00:07:52,520 --> 00:08:00,599
so if you want to kind of try something

00:07:56,909 --> 00:08:03,030
new keeping it simple is a good idea you

00:08:00,599 --> 00:08:05,669
could go haywire with Britney and try to

00:08:03,030 --> 00:08:09,180
record exactly when it tagged what into

00:08:05,669 --> 00:08:11,159
testing that's kind of getting to the

00:08:09,180 --> 00:08:13,919
point of doing everything with DAC as

00:08:11,159 --> 00:08:16,860
well that gets complicated and I figured

00:08:13,919 --> 00:08:19,169
the hints file is kind of how the

00:08:16,860 --> 00:08:20,699
release team interacts with Britney

00:08:19,169 --> 00:08:24,060
um who he is familiar with the hints

00:08:20,699 --> 00:08:28,050
files who here's not familiar with the

00:08:24,060 --> 00:08:30,719
hints files great next slide so the

00:08:28,050 --> 00:08:35,909
hints files are how people control

00:08:30,719 --> 00:08:38,099
Brittany the only other way is really

00:08:35,909 --> 00:08:39,630
changing the code and that's not really

00:08:38,099 --> 00:08:41,669
very much fun when there's more than one

00:08:39,630 --> 00:08:47,730
people person using it so back in the

00:08:41,669 --> 00:08:50,760
day that's how I did it okay so not next

00:08:47,730 --> 00:08:53,000
slide sorry we've got a break as you

00:08:50,760 --> 00:08:55,740
might guess from the title of the talk

00:08:53,000 --> 00:08:59,579
how you do this is with temporal tables

00:08:55,740 --> 00:09:01,740
and temporal tables are relatively

00:08:59,579 --> 00:09:03,269
simple and that you just you're really

00:09:01,740 --> 00:09:06,870
just adding some timestamps to the

00:09:03,269 --> 00:09:09,810
database that you've already got so

00:09:06,870 --> 00:09:15,510
there's two kind of different ways to do

00:09:09,810 --> 00:09:17,519
that one is with a timestamp of when an

00:09:15,510 --> 00:09:20,730
entries valid and where it's invalid and

00:09:17,519 --> 00:09:22,860
the other is a history table as compared

00:09:20,730 --> 00:09:24,660
to the current table so either adding

00:09:22,860 --> 00:09:27,149
columns to your existing table or adding

00:09:24,660 --> 00:09:35,070
a whole separate this is how stuff used

00:09:27,149 --> 00:09:36,779
to be table so the way I chose is

00:09:35,070 --> 00:09:40,529
basically the same way Cody does it I

00:09:36,779 --> 00:09:42,660
couldn't find a better way you store the

00:09:40,529 --> 00:09:45,240
times when what's in the database

00:09:42,660 --> 00:09:47,790
changed you store when it's become

00:09:45,240 --> 00:09:50,100
invalid and I've also got an extra

00:09:47,790 --> 00:09:52,410
column that says it's just a boolean to

00:09:50,100 --> 00:09:54,769
say ok this is an active row because

00:09:52,410 --> 00:09:57,570
that makes indexing a little bit easier

00:09:54,769 --> 00:10:01,230
I like that because there's only one

00:09:57,570 --> 00:10:03,839
table to query and when you're doing

00:10:01,230 --> 00:10:06,269
updates it can be fairly atomic so

00:10:03,839 --> 00:10:09,750
that's what a table looks like is that

00:10:06,269 --> 00:10:12,470
readable it is so hence file might have

00:10:09,750 --> 00:10:15,029
a couple of a couple of packages frozen

00:10:12,470 --> 00:10:17,579
so deep packaged apps and aptitude in

00:10:15,029 --> 00:10:20,430
this case and the corresponding table to

00:10:17,579 --> 00:10:22,430
store that it would have just originally

00:10:20,430 --> 00:10:24,990
wow that's exciting

00:10:22,430 --> 00:10:26,850
it would have originally just had a

00:10:24,990 --> 00:10:29,370
single column saying the package to be

00:10:26,850 --> 00:10:31,550
blocked to make it a temporal table we

00:10:29,370 --> 00:10:36,260
add some timestamps

00:10:31,550 --> 00:10:39,890
which are these two and the active the

00:10:36,260 --> 00:10:43,760
active record so make that a little bit

00:10:39,890 --> 00:10:46,250
more complicated we've got the indexes

00:10:43,760 --> 00:10:48,590
and unique uniqueness constraints so

00:10:46,250 --> 00:10:52,010
uniqueness constraint on active and

00:10:48,590 --> 00:10:54,440
package if we set active to be true or

00:10:52,010 --> 00:10:59,180
null then that means we've only got one

00:10:54,440 --> 00:11:01,190
active package at a time and we I've

00:10:59,180 --> 00:11:02,540
also got a primary key on create and

00:11:01,190 --> 00:11:07,010
package because I think that's useful

00:11:02,540 --> 00:11:11,890
but I'm not sure the other constraints

00:11:07,010 --> 00:11:15,380
is fairly straightforward I think okay

00:11:11,890 --> 00:11:17,330
so queries on that become a little bit

00:11:15,380 --> 00:11:19,970
more complicated but not a whole heap so

00:11:17,330 --> 00:11:21,830
so if you want to insert something into

00:11:19,970 --> 00:11:25,670
a temporal table you have to make sure

00:11:21,830 --> 00:11:27,890
that the old version is obsoleted if

00:11:25,670 --> 00:11:30,230
there was one and then you're just

00:11:27,890 --> 00:11:36,890
inserting one so if there was an old

00:11:30,230 --> 00:11:39,920
active version then where is it if there

00:11:36,890 --> 00:11:41,870
was an old active version of GCC then we

00:11:39,920 --> 00:11:45,380
said it no longer active and marked the

00:11:41,870 --> 00:11:47,720
time that we deleted it and then we can

00:11:45,380 --> 00:11:49,670
just insert the new one and that's a

00:11:47,720 --> 00:11:51,890
fairly simple formula that you can just

00:11:49,670 --> 00:11:55,850
basically pad and match to whatever your

00:11:51,890 --> 00:11:58,100
old insert Clause was similarly for

00:11:55,850 --> 00:11:59,600
delete we would not actually deleting

00:11:58,100 --> 00:12:03,160
anything from the table anymore we're

00:11:59,600 --> 00:12:05,590
just setting the delete column and

00:12:03,160 --> 00:12:07,970
updates get a bit more complicated

00:12:05,590 --> 00:12:10,040
because you need if you're doing more

00:12:07,970 --> 00:12:12,740
than one row you need to get a copy of

00:12:10,040 --> 00:12:14,840
get a copy of the data possibly modify

00:12:12,740 --> 00:12:22,700
it and insert new rows and that's not a

00:12:14,840 --> 00:12:27,640
trivial standard SQL command and yeah

00:12:22,700 --> 00:12:27,640
let's just skip that sorry for the video

00:12:29,800 --> 00:12:35,120
ok so brilliant I chose to do it in

00:12:33,500 --> 00:12:38,330
Python because everything's in Python

00:12:35,120 --> 00:12:40,040
except if it's not in Haskell SQL

00:12:38,330 --> 00:12:43,610
alchemy is awesome because it lets you

00:12:40,040 --> 00:12:44,460
do database of knock agnostic not

00:12:43,610 --> 00:12:48,960
obnoxious

00:12:44,460 --> 00:12:52,500
database agnostic SQL you kind of

00:12:48,960 --> 00:12:55,560
constructed as code and it'll it'll do

00:12:52,500 --> 00:12:57,060
the dialect stuff for you I haven't been

00:12:55,560 --> 00:13:00,750
able to find anything in any other

00:12:57,060 --> 00:13:02,310
languages that really do that and I'm

00:13:00,750 --> 00:13:04,620
assuming it's run locally so I'm not

00:13:02,310 --> 00:13:06,690
doing client server stuff and I'm doing

00:13:04,620 --> 00:13:10,560
it as as sub commands because sub

00:13:06,690 --> 00:13:13,110
commands are cool okay and the goals

00:13:10,560 --> 00:13:15,000
make something useful hopefully it'll be

00:13:13,110 --> 00:13:17,040
generalizable so I can reuse some of

00:13:15,000 --> 00:13:20,400
this code later for like devot or dead

00:13:17,040 --> 00:13:22,950
bugs or whatever comes to mind if I make

00:13:20,400 --> 00:13:24,980
it useful first and hopefully make it

00:13:22,950 --> 00:13:27,270
easy for the release team to try it out

00:13:24,980 --> 00:13:31,470
okay so this is the next slide that I

00:13:27,270 --> 00:13:33,810
was referring to 100 slides ago the hint

00:13:31,470 --> 00:13:35,310
types that the release team can stick in

00:13:33,810 --> 00:13:36,960
the hint files and if you want to be a

00:13:35,310 --> 00:13:39,800
release assistant sometime and help them

00:13:36,960 --> 00:13:42,390
out this is kind of useful knowledge

00:13:39,800 --> 00:13:44,130
basically they're just one they're just

00:13:42,390 --> 00:13:47,160
a bunch of one-line commands that tell

00:13:44,130 --> 00:13:49,320
it that tell Brittany that it should try

00:13:47,160 --> 00:13:51,720
and remove a package it should block or

00:13:49,320 --> 00:13:54,900
freeze a package that a particular

00:13:51,720 --> 00:13:57,270
version of a package is worth bypassing

00:13:54,900 --> 00:13:58,770
the freeze that a particular version of

00:13:57,270 --> 00:14:01,380
a package should go in

00:13:58,770 --> 00:14:06,630
in spite of new bugs or broken compiles

00:14:01,380 --> 00:14:08,790
or whatever else and it also has hints

00:14:06,630 --> 00:14:10,530
for the complicated transitions where

00:14:08,790 --> 00:14:14,520
one package breaks and others so they

00:14:10,530 --> 00:14:16,350
all have to go in at once and the other

00:14:14,520 --> 00:14:19,200
one is just overriding the urgency so

00:14:16,350 --> 00:14:21,600
instead of waiting 5 days or 10 days or

00:14:19,200 --> 00:14:29,130
2 days it can be forced to wait 20 days

00:14:21,600 --> 00:14:31,440
or 0 days ok so because I want to make

00:14:29,130 --> 00:14:34,100
this kind of temporal now so I want to

00:14:31,440 --> 00:14:37,380
have you be able to introduce a

00:14:34,100 --> 00:14:41,310
introduce a block on a package remove a

00:14:37,380 --> 00:14:43,920
block on a package but also have the

00:14:41,310 --> 00:14:45,210
block on the package be still there but

00:14:43,920 --> 00:14:48,360
let this particular version of the

00:14:45,210 --> 00:14:50,970
package go through I kind of decided

00:14:48,360 --> 00:14:52,650
that unblock was a little bit ambiguous

00:14:50,970 --> 00:14:55,170
so you're removing the block or are you

00:14:52,650 --> 00:14:57,700
just going straight through it so I've

00:14:55,170 --> 00:14:59,350
kind of renamed them so

00:14:57,700 --> 00:15:03,310
the hints and the hints that I'm using

00:14:59,350 --> 00:15:05,320
an hour remove block approve exempt

00:15:03,310 --> 00:15:12,340
instead of force and transition instead

00:15:05,320 --> 00:15:14,590
of hint and so the idea then is that for

00:15:12,340 --> 00:15:18,100
each of these hint types so be basically

00:15:14,590 --> 00:15:21,160
three sub commands to brick int that let

00:15:18,100 --> 00:15:23,260
you list the hints at a current that let

00:15:21,160 --> 00:15:28,020
you add one out of him to that title

00:15:23,260 --> 00:15:33,070
that you're removing into that type okay

00:15:28,020 --> 00:15:40,140
so implementation creating tables in SQL

00:15:33,070 --> 00:15:40,140
alchemy SQL alchemy core is what it is

00:15:42,870 --> 00:15:48,310
my implementation of sub commands is

00:15:45,940 --> 00:15:50,110
pretty obscure and horrible but it

00:15:48,310 --> 00:15:56,710
didn't repeat I didn't get to repeat

00:15:50,110 --> 00:15:58,450
myself too much so does that if anyone

00:15:56,710 --> 00:16:00,640
wants to come and grab me later and tell

00:15:58,450 --> 00:16:02,740
me how to do subcommands nicely that

00:16:00,640 --> 00:16:04,210
would be great because I really don't

00:16:02,740 --> 00:16:10,540
like any of the ways that actually work

00:16:04,210 --> 00:16:12,670
let alone the way I've done it okay so

00:16:10,540 --> 00:16:16,780
the main way that the code is structured

00:16:12,670 --> 00:16:19,990
is with a generic temporal table class

00:16:16,780 --> 00:16:22,630
so instead of the ORM model of having an

00:16:19,990 --> 00:16:25,840
object per row I've just got an object

00:16:22,630 --> 00:16:27,910
per table so that object then implements

00:16:25,840 --> 00:16:32,400
query and insert and update and remove

00:16:27,910 --> 00:16:35,320
sort of methods and my idea here is that

00:16:32,400 --> 00:16:38,050
once if I can make this general

00:16:35,320 --> 00:16:40,120
generalizable to other applications then

00:16:38,050 --> 00:16:42,880
this temporal table will just be able to

00:16:40,120 --> 00:16:45,430
pick up what's in the database and say

00:16:42,880 --> 00:16:48,490
okay sure you've got a temporal table of

00:16:45,430 --> 00:16:50,310
bug severity is fine here's all your

00:16:48,490 --> 00:16:53,470
query functionality for that without

00:16:50,310 --> 00:16:55,900
having to write without having to

00:16:53,470 --> 00:17:00,820
subclass or do new code and that's kind

00:16:55,900 --> 00:17:05,860
of working so it offers a query method

00:17:00,820 --> 00:17:07,860
so you can put in Envy's just a link to

00:17:05,860 --> 00:17:10,480
the database session so the transaction

00:17:07,860 --> 00:17:11,170
at let's you choose the time stamp to

00:17:10,480 --> 00:17:13,839
query

00:17:11,170 --> 00:17:17,020
and then the keyword keyword arguments

00:17:13,839 --> 00:17:18,730
is all the although columns for the

00:17:17,020 --> 00:17:22,870
database so you can query on package or

00:17:18,730 --> 00:17:24,459
query on version or query on the

00:17:22,870 --> 00:17:27,520
transition name is pretty much all that

00:17:24,459 --> 00:17:30,280
these ones have and then that just

00:17:27,520 --> 00:17:33,400
translates to a temporal table query

00:17:30,280 --> 00:17:36,340
which is complicated enough but not

00:17:33,400 --> 00:17:40,450
terribly unstraight forward unlike this

00:17:36,340 --> 00:17:46,870
sentence okay so also has an update

00:17:40,450 --> 00:17:48,670
method and also has a removal method

00:17:46,870 --> 00:17:54,220
that seem to disappear somewhere oh well

00:17:48,670 --> 00:17:55,690
yeah so there's a mult class because

00:17:54,220 --> 00:17:57,580
mult is the name that I'm going to use

00:17:55,690 --> 00:18:00,700
if I can actually generalize this into

00:17:57,580 --> 00:18:05,350
other and two other uses that provides

00:18:00,700 --> 00:18:07,870
the access to the database and obviously

00:18:05,350 --> 00:18:09,300
it's got a via implemented a history

00:18:07,870 --> 00:18:13,200
option because I think history is cool

00:18:09,300 --> 00:18:17,200
it's really complicated the idea is that

00:18:13,200 --> 00:18:18,790
history calls are generalizable so you

00:18:17,200 --> 00:18:21,280
can query the database and get a bunch

00:18:18,790 --> 00:18:23,290
of rows back and then that needs to get

00:18:21,280 --> 00:18:28,480
translated get translated into the human

00:18:23,290 --> 00:18:30,700
sentences so question is does it work is

00:18:28,480 --> 00:18:36,640
anyone from from working on the tangle

00:18:30,700 --> 00:18:38,170
who stuff here okay call it tan glue has

00:18:36,640 --> 00:18:39,970
another Britney instance and they're

00:18:38,170 --> 00:18:42,040
kind enough to have actually checked all

00:18:39,970 --> 00:18:43,480
their hints in to get over the past

00:18:42,040 --> 00:18:47,500
couple of years so that's been a great

00:18:43,480 --> 00:18:50,950
test case so I've gone through the git

00:18:47,500 --> 00:18:53,040
and imported that into britain and voila

00:18:50,950 --> 00:18:57,870
that's probably completely illegible

00:18:53,040 --> 00:18:57,870
that all is that readable at the back

00:18:59,490 --> 00:19:03,630
that's probably the best I can do

00:19:04,150 --> 00:19:14,070
so it'll basically let you query who did

00:19:09,070 --> 00:19:17,380
something and tell you from 2014 to 2015

00:19:14,070 --> 00:19:21,580
no sched made these changes to the in

00:19:17,380 --> 00:19:23,380
styles and likewise for a particular

00:19:21,580 --> 00:19:24,610
package it'll tell you who did what to

00:19:23,380 --> 00:19:27,040
it

00:19:24,610 --> 00:19:29,460
and that's all working fine just

00:19:27,040 --> 00:19:32,440
imported straight from hints files and

00:19:29,460 --> 00:19:34,000
likewise obviously can tell you what the

00:19:32,440 --> 00:19:36,429
current state of the tangler hints are

00:19:34,000 --> 00:19:38,830
so they've only got removals active and

00:19:36,429 --> 00:19:42,760
these are the packages they're trying to

00:19:38,830 --> 00:19:44,320
remove at the minute so ideas for the

00:19:42,760 --> 00:19:48,010
future I'd obviously like to actually

00:19:44,320 --> 00:19:50,080
publish the source code I've started

00:19:48,010 --> 00:19:51,760
synchronizing with the Brittany hints

00:19:50,080 --> 00:19:53,740
but that's only been for a few days so

00:19:51,760 --> 00:19:54,970
it's only been a few auto removals that

00:19:53,740 --> 00:19:58,059
I've got there which isn't terribly

00:19:54,970 --> 00:19:59,890
interesting obviously this is a pitch to

00:19:58,059 --> 00:20:04,840
the release team to see if they want to

00:19:59,890 --> 00:20:08,710
try and use it currently missing is easy

00:20:04,840 --> 00:20:10,600
enforce transitions you Debian block you

00:20:08,710 --> 00:20:11,860
dab and unblock you dab variants which I

00:20:10,600 --> 00:20:13,750
don't think actually do anything

00:20:11,860 --> 00:20:18,730
different to regular block and unblock

00:20:13,750 --> 00:20:20,650
and urgent and aged days ideally I'd

00:20:18,730 --> 00:20:25,350
love to generalize this more obviously

00:20:20,650 --> 00:20:27,640
and there we go

00:20:25,350 --> 00:20:29,049
so I've actually got one question for

00:20:27,640 --> 00:20:33,010
you guys what license should I use

00:20:29,049 --> 00:20:37,600
what's a good license these days hands

00:20:33,010 --> 00:20:42,309
up for GPL - okay that's that's pretty

00:20:37,600 --> 00:20:48,130
convincing GPL three interesting and non

00:20:42,309 --> 00:20:51,040
copy left really more non copy less than

00:20:48,130 --> 00:20:54,600
GPL v2 in this crowd I'm shocked

00:20:51,040 --> 00:20:54,600
okay don't copy left it is

00:21:04,320 --> 00:21:09,240
yeah so if anyone wants to ask me

00:21:05,970 --> 00:21:09,740
questions while I see if I can there it

00:21:09,240 --> 00:21:18,590
is

00:21:09,740 --> 00:21:18,590
publish this anyone beulah fuel up

00:21:22,830 --> 00:21:34,320
oh how I how do i yes that okay so

00:21:32,790 --> 00:21:35,630
that's now freely licensed enough on

00:21:34,320 --> 00:21:39,230
github

00:21:35,630 --> 00:21:55,830
hopefully I seem that worked yeah

00:21:39,230 --> 00:21:57,780
okay thank you very much then so you you

00:21:55,830 --> 00:22:00,690
go through all this effort to make the

00:21:57,780 --> 00:22:02,610
database time or well I'm kind of

00:22:00,690 --> 00:22:04,530
surprised that there is no ready-made

00:22:02,610 --> 00:22:06,810
support from let's say pasta skill that

00:22:04,530 --> 00:22:09,150
you can sustain well keep all history of

00:22:06,810 --> 00:22:12,330
all tables in the past and years special

00:22:09,150 --> 00:22:14,730
SQL commands that carry the state from

00:22:12,330 --> 00:22:16,650
some earlier point did you look into

00:22:14,730 --> 00:22:17,250
existing databases that provide that out

00:22:16,650 --> 00:22:20,460
of the box

00:22:17,250 --> 00:22:22,980
so there are add-ons to Postgres that

00:22:20,460 --> 00:22:27,650
there is a temporal add-on to Postgres

00:22:22,980 --> 00:22:30,240
that does things along these lines I

00:22:27,650 --> 00:22:32,130
didn't want to use database specific

00:22:30,240 --> 00:22:36,060
stuff because I like developing on

00:22:32,130 --> 00:22:40,290
SQLite and deploying on PostgreSQL so

00:22:36,060 --> 00:22:43,410
hence the SQL army stuff I'm not sure

00:22:40,290 --> 00:22:45,270
the PostgreSQL stuff is great

00:22:43,410 --> 00:22:47,550
but there's definitely Oracle and

00:22:45,270 --> 00:22:50,430
Windows stuff for doing this because I

00:22:47,550 --> 00:22:53,930
mean they do tax stuff with this with

00:22:50,430 --> 00:22:53,930
temporal table sort of things right so

00:22:54,890 --> 00:23:01,260
so you could have used wine and use the

00:22:57,330 --> 00:23:08,490
database I'm sure someone else could

00:23:01,260 --> 00:23:10,790
have yeah okay that must make it about

00:23:08,490 --> 00:23:10,790

YouTube URL: https://www.youtube.com/watch?v=fFywj7nVm9U


