Title: Debian GNU Hurd status update
Publication date: 2017-12-03
Playlist: DebConf 15
Description: 
	by Samuel Thibault

At: DebConf15
https://summit.debconf.org/debconf15/meeting/298/debian-gnuhurd-status-update/
https://debconf15.debconf.org/

This will give a brief update on the progress of the GNU/Hurd port in the past few years.

Room: Berlin/London
Scheduled start: 2015-08-17 11:30:00
Captions: 
	00:00:00,030 --> 00:00:10,260
right so let's talk about it's all about

00:00:07,319 --> 00:00:14,340
freedom zero that is the ability to use

00:00:10,260 --> 00:00:17,070
software basically for any purpose and

00:00:14,340 --> 00:00:19,160
for us important thing is that you

00:00:17,070 --> 00:00:21,779
shouldn't have to ask system

00:00:19,160 --> 00:00:24,720
administrator for things you should be

00:00:21,779 --> 00:00:32,099
allowed to do whatever you want so for

00:00:24,720 --> 00:00:38,550
instance why is fds been I wanted to be

00:00:32,099 --> 00:00:47,160
able to build etcetera so just be able

00:00:38,550 --> 00:00:48,930
to work with the kind of disk network so

00:00:47,160 --> 00:00:51,570
it's about freedom to innovate as well

00:00:48,930 --> 00:00:55,079
if I want to use an experimental file

00:00:51,570 --> 00:00:57,660
system just play with it without being

00:00:55,079 --> 00:00:59,370
afraid of crashing the machine you

00:00:57,660 --> 00:01:02,129
should be able to just run the file

00:00:59,370 --> 00:01:04,680
system and and let the system

00:01:02,129 --> 00:01:10,260
administrator be happy with this because

00:01:04,680 --> 00:01:13,260
it's safe to do this and also it's a way

00:01:10,260 --> 00:01:15,960
to provide freedom from misbehaving

00:01:13,260 --> 00:01:20,640
programs like a driver which doesn't

00:01:15,960 --> 00:01:25,049
work so well some things like this so

00:01:20,640 --> 00:01:27,570
just give an ID in you know heard so you

00:01:25,049 --> 00:01:30,420
have the kernel which does basically

00:01:27,570 --> 00:01:33,180
almost nothing just managing tasks the

00:01:30,420 --> 00:01:36,360
memory and inter-process communications

00:01:33,180 --> 00:01:39,000
and then you have a lot of demons doing

00:01:36,360 --> 00:01:43,259
the actual stuff so the PFI net is the

00:01:39,000 --> 00:01:46,170
tcp/ip stack x 2 FS does the filesystem

00:01:43,259 --> 00:01:49,920
thing and then you have the user and

00:01:46,170 --> 00:01:53,670
just running programs and these tools

00:01:49,920 --> 00:01:55,979
just actually just talk to the demons

00:01:53,670 --> 00:01:59,000
through the microkernel micro does

00:01:55,979 --> 00:02:03,930
kernel doesn't do much it just passes

00:01:59,000 --> 00:02:07,079
requests along so for instance if a

00:02:03,930 --> 00:02:09,750
server crashes then that's fine for

00:02:07,079 --> 00:02:12,080
instance a driver crashes then no thanks

00:02:09,750 --> 00:02:16,160
you just can kill it and then

00:02:12,080 --> 00:02:19,250
PFI net will reopen the new instance of

00:02:16,160 --> 00:02:22,790
the driver and each it will just work

00:02:19,250 --> 00:02:26,030
thanks to TCP just continuing to ping

00:02:22,790 --> 00:02:29,120
the other computer so it's just an arrow

00:02:26,030 --> 00:02:32,480
it's not something of the death at some

00:02:29,120 --> 00:02:34,460
point and my desktop I could switch off

00:02:32,480 --> 00:02:37,940
the light and then that would crash my

00:02:34,460 --> 00:02:41,660
laptop because switching off the light

00:02:37,940 --> 00:02:44,300
would reboot my hard-disk

00:02:41,660 --> 00:02:46,100
I'm a USB hard disk and then the laptop

00:02:44,300 --> 00:02:48,530
the corner of the laptop wouldn't like

00:02:46,100 --> 00:02:49,540
this this is not something which is

00:02:48,530 --> 00:02:53,600
supposed to happen

00:02:49,540 --> 00:02:55,880
so with a server approach this is

00:02:53,600 --> 00:02:58,820
completely fixed it's also easier to

00:02:55,880 --> 00:03:01,370
debug it's really nice to be able to gdb

00:02:58,820 --> 00:03:05,060
a tcp/ip stack when there is something

00:03:01,370 --> 00:03:10,100
happening in there just from gdb you can

00:03:05,060 --> 00:03:12,140
J probe it etc you can also they're more

00:03:10,100 --> 00:03:15,950
crazy things for instance the Linux

00:03:12,140 --> 00:03:18,620
console doesn't support much because we

00:03:15,950 --> 00:03:21,320
don't want to put too much complex code

00:03:18,620 --> 00:03:23,690
in there on new hard looking console

00:03:21,320 --> 00:03:26,060
actually supports things like Chinese

00:03:23,690 --> 00:03:28,130
and double with support etc which is not

00:03:26,060 --> 00:03:30,590
supported by the next console and that's

00:03:28,130 --> 00:03:33,470
right because you don't want to put too

00:03:30,590 --> 00:03:35,959
crazy stuff here since it's just a

00:03:33,470 --> 00:03:39,440
userland program then you're fine and so

00:03:35,959 --> 00:03:44,420
we do have Chinese support in actually

00:03:39,440 --> 00:03:48,410
text mode in the Debian installer ok so

00:03:44,420 --> 00:03:52,550
just to show an example so here I have

00:03:48,410 --> 00:03:55,880
FTP FS which uses the tcp/ip stack to

00:03:52,550 --> 00:03:59,750
actually mount a remote directory and

00:03:55,880 --> 00:04:03,260
then I can use ISO FS to mount an ISO

00:03:59,750 --> 00:04:06,500
image which is inside that FTP server

00:04:03,260 --> 00:04:09,230
and then I can just let CP copy a file

00:04:06,500 --> 00:04:12,790
from the ISO me image which is on the

00:04:09,230 --> 00:04:16,970
server so this translates that way so

00:04:12,790 --> 00:04:19,700
I've done this command a long time ago

00:04:16,970 --> 00:04:22,460
just to say that FTP : in my home

00:04:19,700 --> 00:04:24,979
directory is an F is whatever FTP and

00:04:22,460 --> 00:04:29,150
then I can take

00:04:24,979 --> 00:04:32,930
till the FTP /etc a URL and give that to

00:04:29,150 --> 00:04:35,539
ISO FS and then mount that on my MNT and

00:04:32,930 --> 00:04:38,599
then I can just prove inside the ISO

00:04:35,539 --> 00:04:41,210
image without having to download the

00:04:38,599 --> 00:04:44,289
whole ISO image without without having

00:04:41,210 --> 00:04:47,629
to ask root for this kind of things etc

00:04:44,289 --> 00:04:49,789
and I can also permanently install this

00:04:47,629 --> 00:04:52,430
in next two FS so just to give an

00:04:49,789 --> 00:04:55,249
example I have a translator on my

00:04:52,430 --> 00:04:59,120
signature file which just calls fortune

00:04:55,249 --> 00:05:01,550
so when I cut that signature I get one

00:04:59,120 --> 00:05:05,020
signature or another because each time I

00:05:01,550 --> 00:05:07,939
open the file it's a new instance of a

00:05:05,020 --> 00:05:10,310
fortune which is started so you can see

00:05:07,939 --> 00:05:16,819
that indeed this is stored in my

00:05:10,310 --> 00:05:20,990
signature file so this is fun another

00:05:16,819 --> 00:05:24,680
example as a user I can start my own

00:05:20,990 --> 00:05:27,499
tcp/ip stack and tell it to use a

00:05:24,680 --> 00:05:31,370
virtual network interface and then put

00:05:27,499 --> 00:05:34,400
the tcp/ip service and some node in my

00:05:31,370 --> 00:05:37,279
home and then I can run Open VPN to

00:05:34,400 --> 00:05:40,069
actually put and push and pull packages

00:05:37,279 --> 00:05:42,740
from that virtual interface and build a

00:05:40,069 --> 00:05:47,599
VPN with somewhere else and then I can

00:05:42,740 --> 00:05:50,210
remap the system what is supposed to be

00:05:47,599 --> 00:05:53,449
the system tcp/ip stack into my own

00:05:50,210 --> 00:05:57,949
socket and then I get a new shell for

00:05:53,449 --> 00:06:01,189
which the system tcp/ip stack is

00:05:57,949 --> 00:06:04,099
actually my own tcp/ip stack and so I

00:06:01,189 --> 00:06:10,789
can decide which program actually use

00:06:04,099 --> 00:06:14,089
this tcp/ip stack and just do my own VPN

00:06:10,789 --> 00:06:18,680
without having to ask anything to the

00:06:14,089 --> 00:06:21,289
administrator but also for instance it

00:06:18,680 --> 00:06:24,860
happens quite often that you have a

00:06:21,289 --> 00:06:27,319
binary maybe not SH but like Python or

00:06:24,860 --> 00:06:31,639
Perl or whatever you have a program

00:06:27,319 --> 00:06:34,849
which wants slash bin slash SH to be

00:06:31,639 --> 00:06:37,610
actually bash or whatever so I want to

00:06:34,849 --> 00:06:38,600
change this and so I can remap this so

00:06:37,610 --> 00:06:42,440
for instance

00:06:38,600 --> 00:06:45,920
if I look at Sh so as usual it's it's

00:06:42,440 --> 00:06:49,880
green but you can see here it's - and if

00:06:45,920 --> 00:06:52,190
I will map been Sh into bean bash for

00:06:49,880 --> 00:06:57,860
instance I get a new shell where

00:06:52,190 --> 00:07:00,650
actually I said sorry is not not the

00:06:57,860 --> 00:07:02,840
same so it's remapped into slash bin

00:07:00,650 --> 00:07:05,480
slash bash and so it's actually bash

00:07:02,840 --> 00:07:08,960
which shows up here so I do really

00:07:05,480 --> 00:07:11,780
choose how how I work

00:07:08,960 --> 00:07:13,820
what my environment looks like and and

00:07:11,780 --> 00:07:17,930
for instance I can even remap the whole

00:07:13,820 --> 00:07:20,840
/bin directory into my own directory

00:07:17,930 --> 00:07:23,630
where I expose slash bin but also other

00:07:20,840 --> 00:07:26,000
things so that programs which which have

00:07:23,630 --> 00:07:28,880
slash bin slash something hard-coded

00:07:26,000 --> 00:07:30,710
into them I can use them without having

00:07:28,880 --> 00:07:35,090
to ask the administrator to install

00:07:30,710 --> 00:07:39,650
stuff inside slash bin so it's kind of

00:07:35,090 --> 00:07:43,880
interesting if it likes to mix gigs but

00:07:39,650 --> 00:07:46,760
done in a nice way so how does it work

00:07:43,880 --> 00:07:49,400
well it's actually reactively simple in

00:07:46,760 --> 00:07:51,620
the principle is simply that Lipsy

00:07:49,400 --> 00:07:55,040
doesn't work with the kernel or whatever

00:07:51,620 --> 00:07:57,950
it always uses our pcs so to ask nicely

00:07:55,040 --> 00:08:01,310
about opening files etc and so it's

00:07:57,950 --> 00:08:05,780
really natural in in your heart and that

00:08:01,310 --> 00:08:09,350
you can redirect things so for instance

00:08:05,780 --> 00:08:14,600
the remap and translator here it's like

00:08:09,350 --> 00:08:17,120
maybe 200 300 lines because it's just a

00:08:14,600 --> 00:08:19,280
matter of you open and file ok I look at

00:08:17,120 --> 00:08:21,260
the file path is it something I didn't

00:08:19,280 --> 00:08:24,020
want to translate yes I translate that

00:08:21,260 --> 00:08:26,660
and then I open the real file and give

00:08:24,020 --> 00:08:31,240
the new handle to them to the program

00:08:26,660 --> 00:08:35,479
and that's all so it's extremely simple

00:08:31,240 --> 00:08:38,570
so everything in new head is an RPC and

00:08:35,479 --> 00:08:41,690
so it is inter possible and then

00:08:38,570 --> 00:08:43,880
translators get exposed inside the file

00:08:41,690 --> 00:08:46,970
system so we have seen the tcp/ip stack

00:08:43,880 --> 00:08:49,370
it's just a path inside the file system

00:08:46,970 --> 00:08:51,420
and then the user can decide whatever it

00:08:49,370 --> 00:08:54,360
wants to do

00:08:51,420 --> 00:08:58,680
to interpose whatever so for instance

00:08:54,360 --> 00:09:01,320
fake fruit in Linux is quite a big

00:08:58,680 --> 00:09:04,110
because it has to interpose Lipsy

00:09:01,320 --> 00:09:06,990
symbols and everytime Lipsey invents

00:09:04,110 --> 00:09:08,699
something new then it breaks in fake

00:09:06,990 --> 00:09:13,399
wood because fake fruit has to know

00:09:08,699 --> 00:09:16,529
about this new symbol etc sorry and

00:09:13,399 --> 00:09:20,190
interpose them so either through Petrus

00:09:16,529 --> 00:09:22,230
or LG or whatever in know how to fake

00:09:20,190 --> 00:09:25,019
fruit is like a thousand lines long

00:09:22,230 --> 00:09:27,769
because it just implements a few basic

00:09:25,019 --> 00:09:32,790
things and then everything just works

00:09:27,769 --> 00:09:36,060
which is him to pose basic identity

00:09:32,790 --> 00:09:39,449
authentication hooks and lips he uses

00:09:36,060 --> 00:09:42,899
them all the time so it's fully

00:09:39,449 --> 00:09:44,639
virtualized able and with a really fine

00:09:42,899 --> 00:09:47,610
grain interface because you can

00:09:44,639 --> 00:09:49,860
precisely decide which are PCI interpose

00:09:47,610 --> 00:09:52,920
on which file in the file system

00:09:49,860 --> 00:09:56,339
I interpose and then you can just use

00:09:52,920 --> 00:09:59,550
your home directory the tcp/ip stack and

00:09:56,339 --> 00:10:04,709
pile stuff over it the way the way you

00:09:59,550 --> 00:10:06,899
want so just to give a crazy example so

00:10:04,709 --> 00:10:09,120
we have a lot of stuff so I actually

00:10:06,899 --> 00:10:13,380
have a nice image inside the partition

00:10:09,120 --> 00:10:14,820
disk image on ftp over a VPN and this is

00:10:13,380 --> 00:10:18,209
not so crazy

00:10:14,820 --> 00:10:20,220
maybe the ISO image inside a partition

00:10:18,209 --> 00:10:23,160
disk the ISO image is a bit too much but

00:10:20,220 --> 00:10:26,040
one file inside a partition disk image

00:10:23,160 --> 00:10:28,649
on ftp over VPN it's not so crazy

00:10:26,040 --> 00:10:30,750
because it may be on on a hostile

00:10:28,649 --> 00:10:32,640
network so you have to use a VPN and

00:10:30,750 --> 00:10:35,190
then you want to access a file you know

00:10:32,640 --> 00:10:37,500
is inside a disk image I don't know an

00:10:35,190 --> 00:10:40,949
ARM based disk image which is provided

00:10:37,500 --> 00:10:42,750
on public FTP server and you don't want

00:10:40,949 --> 00:10:44,490
to download the whole image just to get

00:10:42,750 --> 00:10:46,620
I don't know the readme file or

00:10:44,490 --> 00:10:53,060
something like this so it's not so crazy

00:10:46,620 --> 00:10:57,000
and it just works nicely so bit more

00:10:53,060 --> 00:11:00,300
Debian stuff potting packages in to hurt

00:10:57,000 --> 00:11:04,230
is quite easy in principle because it's

00:11:00,300 --> 00:11:05,070
just a POSIX system there is a lot more

00:11:04,230 --> 00:11:06,660
than just

00:11:05,070 --> 00:11:09,710
physics but it provides a POSIX

00:11:06,660 --> 00:11:13,890
interface so portable programs should be

00:11:09,710 --> 00:11:16,650
really fine just for fun

00:11:13,890 --> 00:11:18,630
some dump issues so for instance some

00:11:16,650 --> 00:11:20,990
problems think that if it's not Linux or

00:11:18,630 --> 00:11:24,780
BSD then they can include Windows the H

00:11:20,990 --> 00:11:27,150
why not if the system has mastered H

00:11:24,780 --> 00:11:29,340
that must be Mac OS become because Mac

00:11:27,150 --> 00:11:32,910
OS in is the only system in the world

00:11:29,340 --> 00:11:35,910
that used ma I don't know why some

00:11:32,910 --> 00:11:38,250
people try to grab CPU info which

00:11:35,910 --> 00:11:41,400
doesn't exist on a new hard yet and so

00:11:38,250 --> 00:11:44,010
they basically just run make - J which

00:11:41,400 --> 00:11:46,170
just explodes the system I mean even on

00:11:44,010 --> 00:11:49,170
a Linux system it's just the same

00:11:46,170 --> 00:11:52,620
unless it's small program but with a lot

00:11:49,170 --> 00:11:56,460
of C++ files it's horrible some people

00:11:52,620 --> 00:12:00,030
include limits dot H from Linux instead

00:11:56,460 --> 00:12:02,490
of just a standard one well a

00:12:00,030 --> 00:12:05,400
problematic thing is people who hard

00:12:02,490 --> 00:12:07,740
code are no values the values of are no

00:12:05,400 --> 00:12:10,140
Austin are not standardized so you

00:12:07,740 --> 00:12:12,860
shouldn't hard code them like in test

00:12:10,140 --> 00:12:16,980
suite research on things like this and

00:12:12,860 --> 00:12:20,040
quite often in configure is hard-coded

00:12:16,980 --> 00:12:23,580
that only Linux knows about LP threads

00:12:20,040 --> 00:12:26,940
or LDL etc so quite often programs are

00:12:23,580 --> 00:12:29,460
not Qin weak enough and that's just easy

00:12:26,940 --> 00:12:31,650
to fix but we have more and more of

00:12:29,460 --> 00:12:34,170
these so we have a portal page and

00:12:31,650 --> 00:12:37,250
developing a bit more about this I

00:12:34,170 --> 00:12:41,460
wanted to talk a bit more about path max

00:12:37,250 --> 00:12:43,950
so it is allowed it is not defined on go

00:12:41,460 --> 00:12:47,280
hard for a very good reason and it is

00:12:43,950 --> 00:12:49,080
allowed by POSIX not to define this just

00:12:47,280 --> 00:12:52,620
to say that there is no limitation on

00:12:49,080 --> 00:12:55,350
the path max value we don't have a limit

00:12:52,620 --> 00:12:58,290
on the size of the path and indeed it

00:12:55,350 --> 00:13:02,010
has a fragile semantics it has never

00:12:58,290 --> 00:13:06,050
meant a reasonable size for an array of

00:13:02,010 --> 00:13:09,690
character to store a path on Linux it's

00:13:06,050 --> 00:13:13,380
4,000 that's a whole page that's a whole

00:13:09,690 --> 00:13:15,090
TLB entry for just one file name it's

00:13:13,380 --> 00:13:18,220
extremely costly most people don't have

00:13:15,090 --> 00:13:23,170
a so long path and so it's it's really

00:13:18,220 --> 00:13:25,120
pity to use so much memory because it's

00:13:23,170 --> 00:13:28,660
always a home page because it will be

00:13:25,120 --> 00:13:31,870
always aligned on 4k etc so well that's

00:13:28,660 --> 00:13:35,020
a waste for one and path can actually be

00:13:31,870 --> 00:13:37,450
longer there's no strict limitation you

00:13:35,020 --> 00:13:40,330
can mkit here something sitting into

00:13:37,450 --> 00:13:42,100
that I'm here again CD etc you can do

00:13:40,330 --> 00:13:44,140
that as much as you want there's no

00:13:42,100 --> 00:13:48,670
limitation on this it's just that when

00:13:44,140 --> 00:13:52,200
you call get crunch working directory

00:13:48,670 --> 00:13:55,660
you won't get it in completely and

00:13:52,200 --> 00:13:57,670
actually some programs behave misbehave

00:13:55,660 --> 00:14:00,220
in that case because they won't see

00:13:57,670 --> 00:14:02,620
these files they will be quite actually

00:14:00,220 --> 00:14:04,690
hidden or protected on I don't know you

00:14:02,620 --> 00:14:07,750
cannot remove them just giving the path

00:14:04,690 --> 00:14:11,530
you have to CD CD CD CD and then you can

00:14:07,750 --> 00:14:14,200
access the file and for no reason

00:14:11,530 --> 00:14:17,320
actually because Linux inside doesn't

00:14:14,200 --> 00:14:22,270
have doesn't have such limitation

00:14:17,320 --> 00:14:24,820
actually and also it's stupid but POSIX

00:14:22,270 --> 00:14:28,420
didn't really say precisely whether the

00:14:24,820 --> 00:14:31,360
final slash zero actually is included in

00:14:28,420 --> 00:14:36,670
path max or not so people would allocate

00:14:31,360 --> 00:14:38,790
path max plus one or maybe not so we

00:14:36,670 --> 00:14:42,190
have lot of code which doesn't maybe

00:14:38,790 --> 00:14:43,810
actually work but nobody test it

00:14:42,190 --> 00:14:46,840
actually because they don't never have

00:14:43,810 --> 00:14:49,150
so long path so I'm a bit afraid of all

00:14:46,840 --> 00:14:53,050
these code using path max so you should

00:14:49,150 --> 00:14:56,950
be afraid as well just to give another

00:14:53,050 --> 00:14:59,740
view of the state so we have a 386

00:14:56,950 --> 00:15:01,060
support we have a 64-bit support which

00:14:59,740 --> 00:15:03,910
has started so we have the kernel

00:15:01,060 --> 00:15:07,900
booting and now it's mostly translating

00:15:03,910 --> 00:15:13,330
between 32 and 64 in our pcs we have

00:15:07,900 --> 00:15:18,160
drivers for network ports in as userland

00:15:13,330 --> 00:15:21,190
translator using the DD layer so we have

00:15:18,160 --> 00:15:22,930
disk we have xn port we have a

00:15:21,190 --> 00:15:26,350
preliminary sound support which was

00:15:22,930 --> 00:15:27,820
announced today using ramp and the ramp

00:15:26,350 --> 00:15:30,360
kernel

00:15:27,820 --> 00:15:33,360
we don't have USB yet

00:15:30,360 --> 00:15:35,700
it is quite stable I haven't reinstalled

00:15:33,360 --> 00:15:37,710
my boxes for like decade I don't

00:15:35,700 --> 00:15:40,800
remember when I installed them actually

00:15:37,710 --> 00:15:43,140
and the building machines just keep

00:15:40,800 --> 00:15:44,100
building package sees for weeks without

00:15:43,140 --> 00:15:48,480
a problem

00:15:44,100 --> 00:15:50,550
we have 81% of the archive we have the

00:15:48,480 --> 00:15:53,510
native and to be honest are working

00:15:50,550 --> 00:15:58,170
which is really working great

00:15:53,510 --> 00:16:00,540
recent work is like interesting thing is

00:15:58,170 --> 00:16:03,950
a distributed em time translator to

00:16:00,540 --> 00:16:07,470
provide /proc / mounts in a Herta shui

00:16:03,950 --> 00:16:11,790
we have quite a few optimizations which

00:16:07,470 --> 00:16:14,370
went in to improve the performance we

00:16:11,790 --> 00:16:15,870
had release quite some time ago

00:16:14,370 --> 00:16:19,140
I really recommend to have a look at

00:16:15,870 --> 00:16:21,630
this one it's fun so we released some

00:16:19,140 --> 00:16:24,450
wheezy and Jessie snapshots they are not

00:16:21,630 --> 00:16:29,850
official but for us it's really an

00:16:24,450 --> 00:16:32,370
official thing and important thing I

00:16:29,850 --> 00:16:35,490
wanted to discuss this week is the

00:16:32,370 --> 00:16:39,660
removal from FTP month master so this is

00:16:35,490 --> 00:16:41,900
due since quite a few years now honestly

00:16:39,660 --> 00:16:44,610
it's really not useful to mirror the

00:16:41,900 --> 00:16:48,090
packages over the whole world because

00:16:44,610 --> 00:16:51,150
they are not even as many uses as the

00:16:48,090 --> 00:16:53,850
number of mirrors so ok that that's fine

00:16:51,150 --> 00:16:57,450
for just a removal from the main archive

00:16:53,850 --> 00:16:59,610
in terms of mirroring but then we have a

00:16:57,450 --> 00:17:02,400
lot of consequences so for instance

00:16:59,610 --> 00:17:04,530
Billy did the Debian dog is really an

00:17:02,400 --> 00:17:07,020
important thing because that is where

00:17:04,530 --> 00:17:11,010
the release team schedules are

00:17:07,020 --> 00:17:13,290
transitions and losing this for us would

00:17:11,010 --> 00:17:16,670
be really tedious work because I've been

00:17:13,290 --> 00:17:19,320
there doing actually the transition work

00:17:16,670 --> 00:17:22,730
the same work as the release team and

00:17:19,320 --> 00:17:25,770
it's extremely painful to do this again

00:17:22,730 --> 00:17:28,550
so we would really like to have solution

00:17:25,770 --> 00:17:31,770
for this so maybe get that fed from

00:17:28,550 --> 00:17:35,100
Debian pot and then that's fine

00:17:31,770 --> 00:17:36,450
we can be on Debian posts as long as at

00:17:35,100 --> 00:17:39,540
least there is some synchronization

00:17:36,450 --> 00:17:43,200
between something and also getting

00:17:39,540 --> 00:17:44,220
exposed on the build the package Status

00:17:43,200 --> 00:17:47,220
page so that

00:17:44,220 --> 00:17:50,159
people are aware that there is some pot

00:17:47,220 --> 00:17:52,020
which is failing and maybe they are keen

00:17:50,159 --> 00:17:55,890
on spending some time on it maybe not

00:17:52,020 --> 00:18:00,030
that's fine but at least get them know

00:17:55,890 --> 00:18:04,700
about it and also a corner thing when we

00:18:00,030 --> 00:18:07,320
have a version upgrade like GCC or the

00:18:04,700 --> 00:18:09,809
released him ask okay we'll have to

00:18:07,320 --> 00:18:11,789
upgrade the build DS and at the moment

00:18:09,809 --> 00:18:14,490
they don't even have an account on them

00:18:11,789 --> 00:18:16,110
so they cannot check whether the version

00:18:14,490 --> 00:18:19,140
is good or not

00:18:16,110 --> 00:18:22,950
so maybe we should just provide an

00:18:19,140 --> 00:18:28,080
account we need to know who we need to

00:18:22,950 --> 00:18:30,030
give an account to so basically my ID

00:18:28,080 --> 00:18:33,900
would be okay that's fine not being on

00:18:30,030 --> 00:18:35,909
FTP master the thing is we still want to

00:18:33,900 --> 00:18:41,070
have most of the support of Debian to

00:18:35,909 --> 00:18:44,010
make our life less a burden as much as

00:18:41,070 --> 00:18:45,900
possible without any extra load on the

00:18:44,010 --> 00:18:47,909
release team etc we do understand well

00:18:45,900 --> 00:18:52,890
that we don't want to put work on

00:18:47,909 --> 00:18:55,080
people's hand but we would like to see

00:18:52,890 --> 00:18:58,710
get some benefit and probably there are

00:18:55,080 --> 00:19:03,120
solutions for this and conversely all

00:18:58,710 --> 00:19:07,049
these I mean not putting more work on as

00:19:03,120 --> 00:19:09,510
heard Porter's would actually meet the

00:19:07,049 --> 00:19:11,520
same solutions that existing ports on

00:19:09,510 --> 00:19:15,720
Debian ports would be really happy to

00:19:11,520 --> 00:19:17,610
have to improve their life to have less

00:19:15,720 --> 00:19:19,830
work and to do them and then they really

00:19:17,610 --> 00:19:22,350
currently have it's it's really a

00:19:19,830 --> 00:19:25,169
problem so maybe we want to think about

00:19:22,350 --> 00:19:26,039
really real status for second-class

00:19:25,169 --> 00:19:29,070
citizens

00:19:26,039 --> 00:19:31,890
so like heard but also the spark hppa

00:19:29,070 --> 00:19:34,679
etc so maybe we want to have some both

00:19:31,890 --> 00:19:39,650
at some time so we can gather and

00:19:34,679 --> 00:19:42,090
discuss about this okay so future work

00:19:39,650 --> 00:19:44,039
interesting thing is probably the most

00:19:42,090 --> 00:19:46,799
impressed interesting thing is probably

00:19:44,039 --> 00:19:49,559
using the ramp drivers because at the

00:19:46,799 --> 00:19:51,900
moment we use dde but it's not really

00:19:49,559 --> 00:19:54,990
going forward we thought it would be a

00:19:51,900 --> 00:19:57,360
way to get new more drivers Linux

00:19:54,990 --> 00:19:58,230
drivers without extra effort but it

00:19:57,360 --> 00:20:01,820
doesn't actually

00:19:58,230 --> 00:20:05,190
happen at the moment my ramp does and go

00:20:01,820 --> 00:20:08,190
forward we she working being that with

00:20:05,190 --> 00:20:11,610
sin etc so this is probably a long-term

00:20:08,190 --> 00:20:15,300
solution maybe we'll have another

00:20:11,610 --> 00:20:17,790
distribution through gigs this is

00:20:15,300 --> 00:20:20,430
progressing we are quite far from doing

00:20:17,790 --> 00:20:23,250
this so for now Debian is really the

00:20:20,430 --> 00:20:26,430
only hurt distribution that we have so

00:20:23,250 --> 00:20:28,770
we'll see and and of course just come

00:20:26,430 --> 00:20:40,290
and have fun with your pet project

00:20:28,770 --> 00:20:43,910
just try thanks any quick questions

00:20:40,290 --> 00:20:43,910
before we run to lunch

00:20:52,529 --> 00:20:58,779
hello I just wondered if you're using

00:20:55,719 --> 00:21:00,339
hurt Oh only if you're using hurt on

00:20:58,779 --> 00:21:01,719
that laptop with you that if the

00:21:00,339 --> 00:21:03,639
presentation yeah yeah this is running

00:21:01,719 --> 00:21:06,549
hurt yes so it's quite like usable

00:21:03,639 --> 00:21:09,579
everyday well not every day because

00:21:06,549 --> 00:21:11,109
without QSB you cannot mount a USB stick

00:21:09,579 --> 00:21:14,319
for instance so that's quite

00:21:11,109 --> 00:21:16,959
inconvenient but yeah I could probably

00:21:14,319 --> 00:21:20,649
use it every day I don't I mean for work

00:21:16,959 --> 00:21:22,929
I cannot afford this but yeah also them

00:21:20,649 --> 00:21:25,089
we don't have wireless drivers at the

00:21:22,929 --> 00:21:29,559
moment we hope that with drunk drivers

00:21:25,089 --> 00:21:33,309
we would get these so yes some people do

00:21:29,559 --> 00:21:35,229
use it everyday not me but those would

00:21:33,309 --> 00:21:37,499
be that the major things missing for

00:21:35,229 --> 00:21:45,669
more people to be able to use it mmm-hmm

00:21:37,499 --> 00:21:49,589
okay thanks any more questions if there

00:21:45,669 --> 00:21:49,589
are no more questions then thanks again

00:21:53,660 --> 00:21:57,910

YouTube URL: https://www.youtube.com/watch?v=bBOqgKQu3JE


