Title: Open Build Service and Debian Packaging
Publication date: 2020-10-23
Playlist: DebConf 20
Description: 
	by Andrew Lee (李健秋)

At: DebConf20
https://debconf20.debconf.org/talks/62-open-build-service-and-debian-packaging/

This talk will show you how to do Debian packaging on your private Open Build Service instance.

Room: Talks
Scheduled start: 2020-08-26 10:00:00
Captions: 
	00:00:06,000 --> 00:00:10,880
hello everyone

00:00:07,200 --> 00:00:13,599
thank you for watching my talk online

00:00:10,880 --> 00:00:14,320
here i'd like to talk about open build

00:00:13,599 --> 00:00:17,840
service

00:00:14,320 --> 00:00:20,240
and the deviant packaging and it's a

00:00:17,840 --> 00:00:22,080
impressive how much time can save to do

00:00:20,240 --> 00:00:25,920
debian packaging with your private

00:00:22,080 --> 00:00:28,960
obs instance and before my talk

00:00:25,920 --> 00:00:32,160
i'd like to thank devconf team

00:00:28,960 --> 00:00:35,360
to organize this nice

00:00:32,160 --> 00:00:38,160
online conference this year and also i

00:00:35,360 --> 00:00:42,840
would like to thanks to collabora

00:00:38,160 --> 00:00:44,079
encouraged me to package obs into debian

00:00:42,840 --> 00:00:46,960
project

00:00:44,079 --> 00:00:48,160
and we use open sources open build

00:00:46,960 --> 00:00:51,039
service a lot

00:00:48,160 --> 00:00:54,000
at our work for many many projects and

00:00:51,039 --> 00:00:54,000
for several years

00:00:57,039 --> 00:01:00,800
in this talk i'd like to share with you

00:00:59,760 --> 00:01:03,840
guys

00:01:00,800 --> 00:01:04,559
what is a open build service it can be

00:01:03,840 --> 00:01:07,520
called as

00:01:04,559 --> 00:01:08,640
obs for short i will give you an

00:01:07,520 --> 00:01:12,000
overview

00:01:08,640 --> 00:01:15,200
and how it can save time for packaging

00:01:12,000 --> 00:01:18,159
with your private obs

00:01:15,200 --> 00:01:19,920
instance for the small project or

00:01:18,159 --> 00:01:22,080
different distributions

00:01:19,920 --> 00:01:24,000
and they explain that it's benefit of

00:01:22,080 --> 00:01:27,119
using obs

00:01:24,000 --> 00:01:29,680
and then show that it's a nice workflows

00:01:27,119 --> 00:01:31,200
and for the packaging and the releasing

00:01:29,680 --> 00:01:33,520
needs

00:01:31,200 --> 00:01:35,360
and how to set up the project and the

00:01:33,520 --> 00:01:38,840
repository after obs

00:01:35,360 --> 00:01:41,600
installed and in the end i will show you

00:01:38,840 --> 00:01:44,159
that the obs workflow for debian

00:01:41,600 --> 00:01:44,159
packaging

00:01:48,479 --> 00:01:55,360
let's have an overview and see that the

00:01:51,520 --> 00:01:58,640
classic packaging infrastructure way

00:01:55,360 --> 00:01:58,640
compared with obs

00:02:00,560 --> 00:02:05,840
here is how the classic packaging

00:02:03,360 --> 00:02:08,160
infrastructure works

00:02:05,840 --> 00:02:09,599
you have to build a binary package from

00:02:08,160 --> 00:02:12,560
the source package

00:02:09,599 --> 00:02:14,560
and then put it into the repository for

00:02:12,560 --> 00:02:18,080
your users to download

00:02:14,560 --> 00:02:21,599
for example here you provide a nd

00:02:18,080 --> 00:02:25,040
64 debian stretch

00:02:21,599 --> 00:02:27,520
package for your users so

00:02:25,040 --> 00:02:29,040
any time you fix the bug in your package

00:02:27,520 --> 00:02:31,680
or a new version of

00:02:29,040 --> 00:02:33,120
updated in your package you just need to

00:02:31,680 --> 00:02:36,319
rebuild the package

00:02:33,120 --> 00:02:40,720
and in the clean route and then publish

00:02:36,319 --> 00:02:40,720
the new binary package into repositories

00:02:42,160 --> 00:02:45,280
and for the time being you get more and

00:02:44,400 --> 00:02:48,560
more users

00:02:45,280 --> 00:02:51,120
and also debian bust released then you

00:02:48,560 --> 00:02:55,280
would like to build your software

00:02:51,120 --> 00:02:58,800
and to support it both debian stretch

00:02:55,280 --> 00:02:59,840
and the buster so you just maintain two

00:02:58,800 --> 00:03:02,400
different

00:02:59,840 --> 00:03:03,519
uh chill route and then you get the

00:03:02,400 --> 00:03:06,640
build twice

00:03:03,519 --> 00:03:10,560
and then publish the binaries into the

00:03:06,640 --> 00:03:10,560
repository for your users to download

00:03:11,280 --> 00:03:16,959
and then you get more requests

00:03:14,560 --> 00:03:18,560
from your users you want to build to

00:03:16,959 --> 00:03:21,840
support more

00:03:18,560 --> 00:03:25,760
applications so now you get

00:03:21,840 --> 00:03:29,280
a double the truth like

00:03:25,760 --> 00:03:33,440
you have the two children

00:03:29,280 --> 00:03:36,480
for the amd64 and you need another two

00:03:33,440 --> 00:03:36,959
for um hf articulator so you maintain

00:03:36,480 --> 00:03:39,280
four

00:03:36,959 --> 00:03:40,000
different instruments and every time you

00:03:39,280 --> 00:03:43,040
update

00:03:40,000 --> 00:03:44,560
or you fix something you get to build in

00:03:43,040 --> 00:03:47,840
the four different

00:03:44,560 --> 00:03:51,200
chi roots and then publish the binaries

00:03:47,840 --> 00:03:51,200
into repository

00:03:51,920 --> 00:03:58,319
okay now you have more users demand

00:03:55,599 --> 00:03:59,599
once that you build your software on

00:03:58,319 --> 00:04:04,480
ubuntu

00:03:59,599 --> 00:04:08,799
so you enable the ubuntu 2004

00:04:04,480 --> 00:04:08,799
so you get the six bills

00:04:09,360 --> 00:04:16,160
and you get the maintain six different

00:04:12,959 --> 00:04:17,040
clean to root so every time you have an

00:04:16,160 --> 00:04:19,120
update

00:04:17,040 --> 00:04:20,160
you build you build the six times in

00:04:19,120 --> 00:04:22,400
different route

00:04:20,160 --> 00:04:24,880
each of them and then upload the binary

00:04:22,400 --> 00:04:24,880
packages

00:04:26,160 --> 00:04:29,680
and then you get more and more users

00:04:28,639 --> 00:04:33,360
request

00:04:29,680 --> 00:04:35,680
you get uh enable more artichokes

00:04:33,360 --> 00:04:37,680
and you want to build more different

00:04:35,680 --> 00:04:41,759
distributions

00:04:37,680 --> 00:04:42,639
so now you can imagine how many clean

00:04:41,759 --> 00:04:45,680
shoots

00:04:42,639 --> 00:04:46,639
that you need to prepare and how many

00:04:45,680 --> 00:04:50,400
times to build

00:04:46,639 --> 00:04:54,160
all of them and if one change failed on

00:04:50,400 --> 00:04:56,880
one of the luxurious then you have to go

00:04:54,160 --> 00:04:58,639
rebuild again but you cannot detect them

00:04:56,880 --> 00:05:00,800
before you actually build it

00:04:58,639 --> 00:05:01,840
uh each of them and see that how it

00:05:00,800 --> 00:05:04,479
works

00:05:01,840 --> 00:05:05,440
just imagine that how many uh how can

00:05:04,479 --> 00:05:08,840
you manage those

00:05:05,440 --> 00:05:11,039
uh everything with this it's become a

00:05:08,840 --> 00:05:16,560
mess

00:05:11,039 --> 00:05:16,560
so let's see how we can solve the max

00:05:17,360 --> 00:05:22,320
first of all you need to have your ninis

00:05:20,320 --> 00:05:24,800
distribution running

00:05:22,320 --> 00:05:26,000
like a in somewhere in your private

00:05:24,800 --> 00:05:28,960
infrastructure or

00:05:26,000 --> 00:05:28,960
even on the cloud

00:05:29,440 --> 00:05:32,880
and i choose debian here

00:05:34,880 --> 00:05:43,120
and then install obs debian packages

00:05:39,440 --> 00:05:45,840
or fetch and build the obs docker images

00:05:43,120 --> 00:05:45,840
and then long it

00:05:47,680 --> 00:05:54,240
and then it's done because here you find

00:05:50,800 --> 00:05:55,840
how obs saves us time no matter how many

00:05:54,240 --> 00:05:59,280
different articles

00:05:55,840 --> 00:06:00,720
or distributions just one source upload

00:05:59,280 --> 00:06:03,759
of your package into

00:06:00,720 --> 00:06:06,560
obs and the obvious handle rest for you

00:06:03,759 --> 00:06:08,319
is done you don't need to keep

00:06:06,560 --> 00:06:13,280
maintained

00:06:08,319 --> 00:06:13,280
so many churros on your machine anymore

00:06:14,160 --> 00:06:18,080
okay we have an idea what is the obs

00:06:17,280 --> 00:06:20,720
about

00:06:18,080 --> 00:06:21,360
and let's have a look on the more detail

00:06:20,720 --> 00:06:24,000
of its

00:06:21,360 --> 00:06:24,000
benefits

00:06:24,400 --> 00:06:31,520
obs automatically use a

00:06:27,840 --> 00:06:33,360
debug strap to

00:06:31,520 --> 00:06:36,000
create a clean shoot for each

00:06:33,360 --> 00:06:38,479
distribution and the articulator

00:06:36,000 --> 00:06:39,680
and then automatically build your

00:06:38,479 --> 00:06:42,960
package in the

00:06:39,680 --> 00:06:45,440
clean environment so that the

00:06:42,960 --> 00:06:46,639
ensure that the bills could be

00:06:45,440 --> 00:06:50,960
consistent

00:06:46,639 --> 00:06:53,599
and also in a reproducible way

00:06:50,960 --> 00:06:54,319
so you won't have to deal all the tools

00:06:53,599 --> 00:06:56,479
anymore

00:06:54,319 --> 00:06:57,599
and keep or you know keep them on your

00:06:56,479 --> 00:07:00,880
machine

00:06:57,599 --> 00:07:05,680
by yourself because obs uh do this

00:07:00,880 --> 00:07:08,160
automatically for you here you can see

00:07:05,680 --> 00:07:09,440
as i mentioned in the previous slide

00:07:08,160 --> 00:07:11,280
this is an example

00:07:09,440 --> 00:07:12,800
you can see there's only one source

00:07:11,280 --> 00:07:14,960
package

00:07:12,800 --> 00:07:16,479
and then there are built on multiple

00:07:14,960 --> 00:07:20,800
different distributions

00:07:16,479 --> 00:07:20,800
and also the multiple articles

00:07:24,560 --> 00:07:30,479
it's not only the automatically built

00:07:27,360 --> 00:07:33,440
routines handled by obs

00:07:30,479 --> 00:07:34,240
also provides a very nice workflow for

00:07:33,440 --> 00:07:37,280
packaging

00:07:34,240 --> 00:07:40,319
and releasing needs

00:07:37,280 --> 00:07:41,280
look at the screen here just imagine

00:07:40,319 --> 00:07:43,520
that

00:07:41,280 --> 00:07:44,879
if you have a production digital or

00:07:43,520 --> 00:07:46,960
product

00:07:44,879 --> 00:07:48,400
you may have multiple different

00:07:46,960 --> 00:07:52,560
developers

00:07:48,400 --> 00:07:55,199
and work priorly on different issues of

00:07:52,560 --> 00:07:56,800
your product or distribution and each of

00:07:55,199 --> 00:07:59,120
them facing the different

00:07:56,800 --> 00:08:01,440
issues in different packages and they

00:07:59,120 --> 00:08:04,080
may submit new package

00:08:01,440 --> 00:08:05,759
update with their fixes then you can if

00:08:04,080 --> 00:08:08,400
you have a curating

00:08:05,759 --> 00:08:10,720
then you can review and test it before

00:08:08,400 --> 00:08:14,639
you actually land into the

00:08:10,720 --> 00:08:14,639
partition distributions

00:08:15,440 --> 00:08:21,919
once your package gets reviewed and

00:08:18,720 --> 00:08:24,800
that can learn the into the

00:08:21,919 --> 00:08:27,039
potassium distributions and then the

00:08:24,800 --> 00:08:29,440
binary will be

00:08:27,039 --> 00:08:30,240
the build on obs will be automatically

00:08:29,440 --> 00:08:33,760
published

00:08:30,240 --> 00:08:36,399
into repositories for your users to use

00:08:33,760 --> 00:08:38,839
you don't have to do this by comment

00:08:36,399 --> 00:08:40,240
manually

00:08:38,839 --> 00:08:43,360
anymore

00:08:40,240 --> 00:08:47,200
and obs also provide the

00:08:43,360 --> 00:08:51,200
vcs like revision control

00:08:47,200 --> 00:08:53,360
for the source packages so each time

00:08:51,200 --> 00:08:57,360
the source package gets updated or get

00:08:53,360 --> 00:08:57,360
changed can be tracked in the history

00:09:01,200 --> 00:09:08,000
obs has nice features to

00:09:04,800 --> 00:09:10,240
calculate and then calculate the build

00:09:08,000 --> 00:09:11,760
dependencies so that they can schedule

00:09:10,240 --> 00:09:15,120
the source package to be built

00:09:11,760 --> 00:09:15,920
automatically and also it's nice to show

00:09:15,120 --> 00:09:17,760
you the

00:09:15,920 --> 00:09:20,000
they give you an overview of the numbers

00:09:17,760 --> 00:09:23,519
of the package that says

00:09:20,000 --> 00:09:25,760
already built successfully or he failed

00:09:23,519 --> 00:09:27,920
or he has a missing build dependencies

00:09:25,760 --> 00:09:31,440
on the project page

00:09:27,920 --> 00:09:33,839
so the unresolvable means that is the

00:09:31,440 --> 00:09:34,560
missing build dependencies we can click

00:09:33,839 --> 00:09:37,760
on the

00:09:34,560 --> 00:09:40,800
unresolvable link and you get the

00:09:37,760 --> 00:09:43,839
very small window pop up and show you

00:09:40,800 --> 00:09:45,519
example uh what binary package is

00:09:43,839 --> 00:09:50,080
missing for the build button

00:09:45,519 --> 00:09:53,920
dependencies then you can easily

00:09:50,080 --> 00:09:56,320
use this way to see that uh which

00:09:53,920 --> 00:09:58,240
binary package is missing is probably

00:09:56,320 --> 00:10:01,360
haven't been built

00:09:58,240 --> 00:10:05,839
as in the schedule the build process or

00:10:01,360 --> 00:10:08,800
is amazing package which you import

00:10:05,839 --> 00:10:08,800
the binary package

00:10:10,640 --> 00:10:17,040
and obs has also has a building

00:10:14,240 --> 00:10:18,000
access control list feature so you may

00:10:17,040 --> 00:10:20,720
grant access

00:10:18,000 --> 00:10:22,160
to multiple different developers on

00:10:20,720 --> 00:10:26,000
different

00:10:22,160 --> 00:10:29,839
obs projects on your obvious instance

00:10:26,000 --> 00:10:32,880
so that you can also give them different

00:10:29,839 --> 00:10:34,959
access permissions like who can submit

00:10:32,880 --> 00:10:37,760
changes who can

00:10:34,959 --> 00:10:39,680
approve all the submitted package goes

00:10:37,760 --> 00:10:41,839
into the partition repository

00:10:39,680 --> 00:10:43,279
so everything you can just simply

00:10:41,839 --> 00:10:46,480
control here

00:10:43,279 --> 00:10:49,040
and also you can

00:10:46,480 --> 00:10:50,079
hide the project or you can other people

00:10:49,040 --> 00:10:53,040
cannot access

00:10:50,079 --> 00:10:53,839
the project you can also do the lvc with

00:10:53,040 --> 00:10:59,440
the building

00:10:53,839 --> 00:11:03,600
settings okay after we introduce that

00:10:59,440 --> 00:11:04,399
the features let's see a bit more on the

00:11:03,600 --> 00:11:08,079
obs

00:11:04,399 --> 00:11:08,079
articature and its components

00:11:10,720 --> 00:11:17,839
here is the articular picture

00:11:13,839 --> 00:11:17,839
that i fetch from the obs document

00:11:18,720 --> 00:11:24,880
then basically obs

00:11:21,839 --> 00:11:27,519
articature has a

00:11:24,880 --> 00:11:29,519
category like back-end services and the

00:11:27,519 --> 00:11:33,440
front end ruby on rails app

00:11:29,519 --> 00:11:33,440
and then also it's a command line tools

00:11:38,480 --> 00:11:44,000
and the backend service

00:11:41,680 --> 00:11:45,839
contains multiple different service

00:11:44,000 --> 00:11:49,519
demons running

00:11:45,839 --> 00:11:52,800
and here that the build hosts are called

00:11:49,519 --> 00:11:54,320
obs dash worker and it's also the debian

00:11:52,800 --> 00:11:57,920
packaging name

00:11:54,320 --> 00:12:00,959
and it can be installed on the extra

00:11:57,920 --> 00:12:02,000
different machine or even like in a

00:12:00,959 --> 00:12:03,839
container

00:12:02,000 --> 00:12:05,600
on the cloud with a different

00:12:03,839 --> 00:12:09,200
articatures

00:12:05,600 --> 00:12:12,320
so you may flexibly connect the worker

00:12:09,200 --> 00:12:16,160
obs worker into your obs server

00:12:12,320 --> 00:12:17,279
and then as a to empower the back end

00:12:16,160 --> 00:12:24,639
workers

00:12:17,279 --> 00:12:28,639
and when you need it

00:12:24,639 --> 00:12:28,639
let's look at the obs front end

00:12:31,839 --> 00:12:35,920
the obvious function can see on the

00:12:33,360 --> 00:12:39,360
picture here

00:12:35,920 --> 00:12:42,800
and also that previous uh web page

00:12:39,360 --> 00:12:45,600
with the nice uh obs features

00:12:42,800 --> 00:12:47,279
in my previous slide that is the the

00:12:45,600 --> 00:12:50,160
ruby on rails app

00:12:47,279 --> 00:12:52,560
and this is a ruby on rails app with the

00:12:50,160 --> 00:12:55,279
mysql database

00:12:52,560 --> 00:12:56,399
and then this package is in in debian we

00:12:55,279 --> 00:12:59,600
call it

00:12:56,399 --> 00:13:02,560
obs api

00:12:59,600 --> 00:13:04,839
this is that the obvious function only

00:13:02,560 --> 00:13:07,519
one used in the

00:13:04,839 --> 00:13:08,480
databases the backend doesn't use the

00:13:07,519 --> 00:13:11,680
databases but

00:13:08,480 --> 00:13:11,680
also only the function

00:13:12,399 --> 00:13:17,440
and also it has a command line tools

00:13:15,600 --> 00:13:20,160
yeah because there are developers need

00:13:17,440 --> 00:13:23,839
the lobster command line tools

00:13:20,160 --> 00:13:27,040
so in debian we

00:13:23,839 --> 00:13:30,480
have the osc and then

00:13:27,040 --> 00:13:32,320
osc dash parkings that should be put

00:13:30,480 --> 00:13:34,639
packages those two packages are

00:13:32,320 --> 00:13:37,839
available in debian for the

00:13:34,639 --> 00:13:40,480
obvious command line tools that users

00:13:37,839 --> 00:13:42,240
can use these tools in the terminal

00:13:40,480 --> 00:13:49,839
easily to interface

00:13:42,240 --> 00:13:49,839
commit talk to the obs api interface

00:13:51,839 --> 00:13:59,440
so after i introduce those uh

00:13:55,040 --> 00:14:02,720
obs components that's uh for use

00:13:59,440 --> 00:14:04,000
it's easier for you to do the install

00:14:02,720 --> 00:14:07,360
and set up the obs

00:14:04,000 --> 00:14:10,720
packages and most of people

00:14:07,360 --> 00:14:12,560
have the issues is that they after they

00:14:10,720 --> 00:14:16,079
install the obs

00:14:12,560 --> 00:14:18,079
and set up obs a package and see the the

00:14:16,079 --> 00:14:19,920
ruby on rail front end but i do not

00:14:18,079 --> 00:14:22,800
really know how to use

00:14:19,920 --> 00:14:23,600
the obs so here i would like to to

00:14:22,800 --> 00:14:26,639
explain you

00:14:23,600 --> 00:14:28,560
how to do how to set up projects and how

00:14:26,639 --> 00:14:31,839
to set up a repository after

00:14:28,560 --> 00:14:31,839
your installation

00:14:34,560 --> 00:14:39,040
obs has the building download on demand

00:14:37,600 --> 00:14:41,360
support

00:14:39,040 --> 00:14:43,600
and you could we can call it the dod

00:14:41,360 --> 00:14:46,079
support

00:14:43,600 --> 00:14:48,000
with these features that prevents you to

00:14:46,079 --> 00:14:50,959
mirror whole debian distribution

00:14:48,000 --> 00:14:52,000
locally for your build dependencies just

00:14:50,959 --> 00:14:54,800
imagine that

00:14:52,000 --> 00:14:57,600
in the classical way normally when you

00:14:54,800 --> 00:15:01,120
want to build a package or have a update

00:14:57,600 --> 00:15:03,680
you have to update your clean shoot

00:15:01,120 --> 00:15:05,600
first because you have to fetch the uh

00:15:03,680 --> 00:15:06,560
if it is a security update or updates or

00:15:05,600 --> 00:15:07,920
something

00:15:06,560 --> 00:15:11,040
in the chi root for the view

00:15:07,920 --> 00:15:14,639
dependencies on in youtube

00:15:11,040 --> 00:15:17,279
and then um start to build your package

00:15:14,639 --> 00:15:19,199
so just imagine that how many shoes you

00:15:17,279 --> 00:15:22,480
have they have to do the routine

00:15:19,199 --> 00:15:24,240
several times but with obs then you

00:15:22,480 --> 00:15:28,000
don't have to do this anymore

00:15:24,240 --> 00:15:28,800
because this will be handled by obs dod

00:15:28,000 --> 00:15:32,079
features

00:15:28,800 --> 00:15:35,680
and once the upstream um has any changes

00:15:32,079 --> 00:15:38,959
or updates then obs is a

00:15:35,680 --> 00:15:42,560
dod is automatically a feature update so

00:15:38,959 --> 00:15:44,240
if you want to have a package

00:15:42,560 --> 00:15:45,839
that build against the to the new

00:15:44,240 --> 00:15:48,720
changes already

00:15:45,839 --> 00:15:49,199
updated in upstream you can simply just

00:15:48,720 --> 00:15:52,079
click

00:15:49,199 --> 00:15:53,920
rebuild on the web interface or you can

00:15:52,079 --> 00:15:55,839
use command line to what we build

00:15:53,920 --> 00:15:58,079
and then they will rebuild against to a

00:15:55,839 --> 00:16:01,440
new version of the

00:15:58,079 --> 00:16:02,639
build dependencies and it can be listed

00:16:01,440 --> 00:16:05,839
as a

00:16:02,639 --> 00:16:09,839
configurable in a

00:16:05,839 --> 00:16:09,839
project meta page

00:16:10,639 --> 00:16:17,040
here is a example of those

00:16:13,759 --> 00:16:22,320
deviant dods that we have set up in

00:16:17,040 --> 00:16:25,199
and in use in our clubra obs instance

00:16:22,320 --> 00:16:26,959
you can see that the the dod starts with

00:16:25,199 --> 00:16:30,800
a

00:16:26,959 --> 00:16:30,800
debian and a different version

00:16:32,639 --> 00:16:39,759
okay to use the old dod

00:16:36,320 --> 00:16:42,480
on obs uh you need uh

00:16:39,759 --> 00:16:44,240
the meme pivotals so that you can add

00:16:42,480 --> 00:16:47,519
obs repository

00:16:44,240 --> 00:16:51,839
and then config via

00:16:47,519 --> 00:16:51,839
meta and the project configure pages

00:16:54,320 --> 00:16:58,000
here is what we have what we have

00:16:57,360 --> 00:17:05,360
configured

00:16:58,000 --> 00:17:08,559
via the meta page in debian

00:17:05,360 --> 00:17:12,640
and you can also see this is the

00:17:08,559 --> 00:17:13,120
how we configure the via project config

00:17:12,640 --> 00:17:16,559
page

00:17:13,120 --> 00:17:20,959
in obs then here we can specify

00:17:16,559 --> 00:17:20,959
the build engine you use the debug strip

00:17:24,480 --> 00:17:30,400
to use a dod in your own project

00:17:28,079 --> 00:17:31,760
you also need the main privileges in

00:17:30,400 --> 00:17:35,039
order to add

00:17:31,760 --> 00:17:37,120
the dod into your project settings and

00:17:35,039 --> 00:17:40,880
just click on the repository

00:17:37,120 --> 00:17:43,919
and and click and add dod repository

00:17:40,880 --> 00:17:47,200
and then fill in the informations

00:17:43,919 --> 00:17:49,440
like a repository name architecture and

00:17:47,200 --> 00:17:52,559
type and url and so on

00:17:49,440 --> 00:17:54,960
now you can have a dod

00:17:52,559 --> 00:17:58,840
so once you add that you can see that

00:17:54,960 --> 00:18:00,320
the dod status updated like list in this

00:17:58,840 --> 00:18:04,559
page

00:18:00,320 --> 00:18:07,679
i can see that we have uh four different

00:18:04,559 --> 00:18:10,160
uh dod already

00:18:07,679 --> 00:18:10,160
right there

00:18:11,200 --> 00:18:14,880
and once you have the dod project

00:18:13,360 --> 00:18:17,520
created

00:18:14,880 --> 00:18:18,480
now you have to create a normal project

00:18:17,520 --> 00:18:21,520
that

00:18:18,480 --> 00:18:24,880
contains the package you want to

00:18:21,520 --> 00:18:26,080
build and the package you upload into

00:18:24,880 --> 00:18:28,640
the the project

00:18:26,080 --> 00:18:30,320
that pro package you build against to

00:18:28,640 --> 00:18:31,440
the dod projects that you created

00:18:30,320 --> 00:18:34,640
previously

00:18:31,440 --> 00:18:37,840
so user um can create a

00:18:34,640 --> 00:18:38,240
new project under their home branch and

00:18:37,840 --> 00:18:41,120
then

00:18:38,240 --> 00:18:42,880
if if you want to create a new project

00:18:41,120 --> 00:18:45,280
on the main branch

00:18:42,880 --> 00:18:48,080
then you still need the main packages to

00:18:45,280 --> 00:18:48,080
create a project

00:18:50,080 --> 00:18:57,360
here is a example i create a new project

00:18:53,760 --> 00:19:00,720
under my home branch

00:18:57,360 --> 00:19:02,320
i just put that the project you can see

00:19:00,720 --> 00:19:06,160
the project

00:19:02,320 --> 00:19:10,160
branch is a home ali

00:19:06,160 --> 00:19:15,600
obs debian and then have a title and

00:19:10,160 --> 00:19:15,600
distribute this description

00:19:19,679 --> 00:19:22,799
and then once you have the project

00:19:21,280 --> 00:19:25,360
created

00:19:22,799 --> 00:19:26,160
you just click on the repositories and

00:19:25,360 --> 00:19:30,160
then

00:19:26,160 --> 00:19:30,160
click on add repositories

00:19:30,320 --> 00:19:35,440
and then also you need to fill in the

00:19:32,320 --> 00:19:35,440
information like this

00:19:36,000 --> 00:19:40,480
then you can put the project like uh you

00:19:38,640 --> 00:19:42,799
want to build against the two

00:19:40,480 --> 00:19:44,480
so you should put the dod project name

00:19:42,799 --> 00:19:47,840
here

00:19:44,480 --> 00:19:50,720
then you can um it depends on

00:19:47,840 --> 00:19:52,000
how many uh dod projects that you

00:19:50,720 --> 00:19:55,760
created previously

00:19:52,000 --> 00:19:59,360
you have to add the uh each by each

00:19:55,760 --> 00:20:00,640
and put the dod project and also the

00:19:59,360 --> 00:20:02,799
repository nand

00:20:00,640 --> 00:20:03,760
and then select the articles you want to

00:20:02,799 --> 00:20:07,840
build

00:20:03,760 --> 00:20:07,840
in this project

00:20:08,640 --> 00:20:12,960
so here is example that you have a

00:20:10,880 --> 00:20:15,360
multiple

00:20:12,960 --> 00:20:17,200
repository that created and built

00:20:15,360 --> 00:20:21,600
against two different

00:20:17,200 --> 00:20:24,720
dod projects and articulators

00:20:21,600 --> 00:20:25,440
so that once you have this configuration

00:20:24,720 --> 00:20:28,159
your

00:20:25,440 --> 00:20:28,960
project package input into you this

00:20:28,159 --> 00:20:32,480
project

00:20:28,960 --> 00:20:35,840
will automatically build against to

00:20:32,480 --> 00:20:40,480
those dod repository

00:20:35,840 --> 00:20:40,480
and also the artichoke related

00:20:42,400 --> 00:20:47,039
okay obs will build automatically but

00:20:45,120 --> 00:20:50,320
sometimes you have multiple

00:20:47,039 --> 00:20:51,840
different distributions in your project

00:20:50,320 --> 00:20:54,960
configuration

00:20:51,840 --> 00:20:58,480
then you better add a different

00:20:54,960 --> 00:20:59,520
previous to add that to the binary

00:20:58,480 --> 00:21:03,600
packages

00:20:59,520 --> 00:21:06,559
so you can easily

00:21:03,600 --> 00:21:08,080
fetch that and also tells that the

00:21:06,559 --> 00:21:11,600
binary package is built

00:21:08,080 --> 00:21:15,120
for quick distributions and here is a

00:21:11,600 --> 00:21:19,280
example that we add the debian 8

00:21:15,120 --> 00:21:23,280
debian knight and debian 10

00:21:19,280 --> 00:21:23,280
with the the builder card number

00:21:25,919 --> 00:21:30,960
so now we have the project configured

00:21:28,720 --> 00:21:34,880
properly already

00:21:30,960 --> 00:21:38,000
and let's see that the obs workflow for

00:21:34,880 --> 00:21:38,000
debian packaging

00:21:40,480 --> 00:21:44,320
so developers always love the camera

00:21:43,520 --> 00:21:47,440
light tools

00:21:44,320 --> 00:21:50,559
so you can install osc dash

00:21:47,440 --> 00:21:53,120
plugins actually put packaging debian

00:21:50,559 --> 00:21:53,600
so once you get that installed you can

00:21:53,120 --> 00:21:57,280
use

00:21:53,600 --> 00:22:00,559
osc depot command and i use this

00:21:57,280 --> 00:22:00,960
command to upload a hello package into

00:22:00,559 --> 00:22:04,159
the

00:22:00,960 --> 00:22:06,400
or the project i create an obs

00:22:04,159 --> 00:22:07,760
you can see that the project i created

00:22:06,400 --> 00:22:10,960
in previous slides

00:22:07,760 --> 00:22:14,080
is a home ali obs stage

00:22:10,960 --> 00:22:18,240
debian project so just osc d

00:22:14,080 --> 00:22:21,280
put and the project name and then

00:22:18,240 --> 00:22:21,280
the source package

00:22:22,400 --> 00:22:26,080
so here is the sample data when we use

00:22:24,559 --> 00:22:29,280
in the terminal

00:22:26,080 --> 00:22:32,559
this uh the d put the product in will do

00:22:29,280 --> 00:22:36,480
similar uh syntax like a depot command

00:22:32,559 --> 00:22:38,559
to upload new uh package into obs

00:22:36,480 --> 00:22:41,039
and just upload into the project with

00:22:38,559 --> 00:22:44,159
one command

00:22:41,039 --> 00:22:45,200
okay once we import that we need after

00:22:44,159 --> 00:22:48,400
that we need to

00:22:45,200 --> 00:22:49,679
modify and then we need to update the

00:22:48,400 --> 00:22:53,600
packages

00:22:49,679 --> 00:22:57,280
so you can use osc command directly

00:22:53,600 --> 00:23:00,400
and it's a vcs like command

00:22:57,280 --> 00:23:04,159
so you can use that to check out commit

00:23:00,400 --> 00:23:07,600
however with this nice tools

00:23:04,159 --> 00:23:10,880
so here is simple i check out the

00:23:07,600 --> 00:23:14,880
hello package from hong ali

00:23:10,880 --> 00:23:18,240
obs dutch debian project

00:23:14,880 --> 00:23:20,840
here you can see that how oec command

00:23:18,240 --> 00:23:23,600
works to check out the package in the

00:23:20,840 --> 00:23:25,840
terminal

00:23:23,600 --> 00:23:27,600
and once it's checked out the package we

00:23:25,840 --> 00:23:30,960
can switch into

00:23:27,600 --> 00:23:33,039
um the package directory and then we run

00:23:30,960 --> 00:23:34,960
the aos command

00:23:33,039 --> 00:23:37,120
now we can see the source packages right

00:23:34,960 --> 00:23:40,480
layer already check out

00:23:37,120 --> 00:23:43,120
and then we use the dpkg dash

00:23:40,480 --> 00:23:45,520
source command to extract the source

00:23:43,120 --> 00:23:45,520
package

00:23:48,320 --> 00:23:55,520
now we can see that extracted the hello

00:23:51,360 --> 00:23:55,520
dash 2.9 directory is there

00:23:55,679 --> 00:24:00,960
so let's switch into the directory

00:24:03,200 --> 00:24:06,960
and we can see that uh this is

00:24:05,279 --> 00:24:08,960
sourcetree you see that uh this is a

00:24:06,960 --> 00:24:11,440
device right there

00:24:08,960 --> 00:24:12,159
and then what we should do we just

00:24:11,440 --> 00:24:15,360
modify

00:24:12,159 --> 00:24:18,400
and update the package as usual as that

00:24:15,360 --> 00:24:21,760
we do it for a debian package

00:24:18,400 --> 00:24:24,400
and once you update and modify

00:24:21,760 --> 00:24:26,159
the package however don't forget to

00:24:24,400 --> 00:24:30,720
update the change log

00:24:26,159 --> 00:24:34,000
so we can rebuild the source package

00:24:30,720 --> 00:24:37,279
and here in my parties

00:24:34,000 --> 00:24:39,840
i always add another

00:24:37,279 --> 00:24:40,640
local change suffix after the revision

00:24:39,840 --> 00:24:43,840
number

00:24:40,640 --> 00:24:48,320
so that i use a deep change dash

00:24:43,840 --> 00:24:49,840
l c o i use this to add the co as a

00:24:48,320 --> 00:24:53,840
suffix

00:24:49,840 --> 00:24:57,279
so after i edit the change log entry

00:24:53,840 --> 00:24:57,760
and then save i can just uh regenerate

00:24:57,279 --> 00:24:59,279
that

00:24:57,760 --> 00:25:00,799
source package we allow the build

00:24:59,279 --> 00:25:03,200
dependency check

00:25:00,799 --> 00:25:05,360
because i'm going to upload the source

00:25:03,200 --> 00:25:09,120
package into obs

00:25:05,360 --> 00:25:11,760
and to build so i do not need to install

00:25:09,120 --> 00:25:15,840
those build dependencies packages on my

00:25:11,760 --> 00:25:15,840
local machine

00:25:17,200 --> 00:25:20,799
here we can see that the new source

00:25:19,520 --> 00:25:23,600
package

00:25:20,799 --> 00:25:26,559
generated with the co1 suffix get

00:25:23,600 --> 00:25:30,000
generated by there

00:25:26,559 --> 00:25:33,200
and this osc command is a vcs like

00:25:30,000 --> 00:25:36,480
so we should use the

00:25:33,200 --> 00:25:41,679
osc rn command

00:25:36,480 --> 00:25:41,679
to remove the old source package

00:25:41,760 --> 00:25:47,840
and then we can use the oec add

00:25:45,440 --> 00:25:49,600
command to add a new source package

00:25:47,840 --> 00:25:54,080
which was that

00:25:49,600 --> 00:25:57,600
co1 suffix that we just generated

00:25:54,080 --> 00:26:02,400
and once we do this and then we do the

00:25:57,600 --> 00:26:05,679
commit we can use the oscci command

00:26:02,400 --> 00:26:08,240
with the m option to add the commit

00:26:05,679 --> 00:26:08,240
messages

00:26:08,400 --> 00:26:11,760
okay once you've done this you go back

00:26:10,400 --> 00:26:14,159
to the web

00:26:11,760 --> 00:26:16,720
front end then you can see that the the

00:26:14,159 --> 00:26:18,960
new source package already committed

00:26:16,720 --> 00:26:20,000
by the command line tool and then it

00:26:18,960 --> 00:26:23,360
appears on the

00:26:20,000 --> 00:26:25,120
um obs front end you can see that

00:26:23,360 --> 00:26:27,520
it starts to build against to the

00:26:25,120 --> 00:26:30,320
multiple different version of debian

00:26:27,520 --> 00:26:32,000
the the repository we configured

00:26:30,320 --> 00:26:34,640
previously

00:26:32,000 --> 00:26:35,360
and you can see the status right there

00:26:34,640 --> 00:26:36,960
the status

00:26:35,360 --> 00:26:39,120
shows that building then you can just

00:26:36,960 --> 00:26:41,520
click on the building status

00:26:39,120 --> 00:26:42,640
then you can go to another page like

00:26:41,520 --> 00:26:45,120
this

00:26:42,640 --> 00:26:46,080
once you click on the status for

00:26:45,120 --> 00:26:47,919
building

00:26:46,080 --> 00:26:49,760
then you will see the build log on the

00:26:47,919 --> 00:26:51,919
web front end

00:26:49,760 --> 00:26:54,240
the waveform will keep updating the

00:26:51,919 --> 00:26:57,760
build lock until it builds the resell

00:26:54,240 --> 00:27:00,640
so in the end you can see that

00:26:57,760 --> 00:27:02,799
the build result on the waveform end

00:27:00,640 --> 00:27:05,440
easily

00:27:02,799 --> 00:27:06,400
okay package build successfully then go

00:27:05,440 --> 00:27:09,600
back to the

00:27:06,400 --> 00:27:12,480
package page now you can have an

00:27:09,600 --> 00:27:15,200
overview of the build status on multiple

00:27:12,480 --> 00:27:18,240
repositories

00:27:15,200 --> 00:27:21,360
okay now the all the

00:27:18,240 --> 00:27:24,640
package builds on all the um different

00:27:21,360 --> 00:27:27,679
distributions successfully okay

00:27:24,640 --> 00:27:31,039
i would highly recommend that

00:27:27,679 --> 00:27:34,720
you use osc help or main osc

00:27:31,039 --> 00:27:37,520
to find a more powerful features of this

00:27:34,720 --> 00:27:37,520
coming light tools

00:27:38,080 --> 00:27:44,799
okay once you you have the package built

00:27:42,159 --> 00:27:44,799
then you can

00:27:45,600 --> 00:27:49,039
fetch the binary package from your home

00:27:47,279 --> 00:27:52,640
branch and do some

00:27:49,039 --> 00:27:55,520
testing then if the test has no problem

00:27:52,640 --> 00:27:58,399
then you can submit your package into

00:27:55,520 --> 00:27:58,399
the main project

00:28:01,440 --> 00:28:06,880
so you just click a submit package

00:28:04,559 --> 00:28:08,960
on the web front end then you will see a

00:28:06,880 --> 00:28:12,159
small window pop up

00:28:08,960 --> 00:28:15,520
like this so you can create a

00:28:12,159 --> 00:28:19,360
submit request just for fielding that

00:28:15,520 --> 00:28:24,000
target project the main project

00:28:19,360 --> 00:28:27,679
location and then add the descriptions

00:28:24,000 --> 00:28:30,720
and then submit once you

00:28:27,679 --> 00:28:33,679
submit there you can see a line

00:28:30,720 --> 00:28:35,279
appears on the top of the waveform end

00:28:33,679 --> 00:28:38,559
with the

00:28:35,279 --> 00:28:40,080
request created and also the request

00:28:38,559 --> 00:28:42,480
number

00:28:40,080 --> 00:28:43,520
and you may also click on the link of

00:28:42,480 --> 00:28:46,480
the

00:28:43,520 --> 00:28:48,080
request number so just click down that

00:28:46,480 --> 00:28:50,880
will go into

00:28:48,080 --> 00:28:52,000
another page now you can see that the

00:28:50,880 --> 00:28:54,880
detail

00:28:52,000 --> 00:28:54,880
of the request

00:28:55,760 --> 00:29:02,799
so you just uh scroll down

00:28:59,039 --> 00:29:05,600
then you can see this is obvious

00:29:02,799 --> 00:29:07,200
building the review and acceptor

00:29:05,600 --> 00:29:09,760
features

00:29:07,200 --> 00:29:11,520
and you can see that the button you can

00:29:09,760 --> 00:29:14,880
decide you want to accept

00:29:11,520 --> 00:29:17,840
these changes into your main product

00:29:14,880 --> 00:29:18,880
production product or a project or a

00:29:17,840 --> 00:29:21,760
revoke

00:29:18,880 --> 00:29:22,559
it's because this ticket is created by

00:29:21,760 --> 00:29:26,240
myself

00:29:22,559 --> 00:29:29,360
so it shows a revoke if the

00:29:26,240 --> 00:29:30,240
request is not created by you then you

00:29:29,360 --> 00:29:34,480
will see a

00:29:30,240 --> 00:29:34,480
decline instead of a revoke there

00:29:35,600 --> 00:29:42,320
and also you can click on the

00:29:38,720 --> 00:29:44,880
project page then the each project page

00:29:42,320 --> 00:29:46,799
and you can see that how many pending

00:29:44,880 --> 00:29:50,000
requests on the

00:29:46,799 --> 00:29:52,799
project page if there's a

00:29:50,000 --> 00:29:54,080
no request you won't be displaying

00:29:52,799 --> 00:29:56,799
anything but

00:29:54,080 --> 00:29:57,520
if you have a many requests they will

00:29:56,799 --> 00:30:01,200
display

00:29:57,520 --> 00:30:01,200
numbers on the project page

00:30:03,279 --> 00:30:11,840
okay i already um

00:30:08,000 --> 00:30:13,600
talk about obs and then do obs workflow

00:30:11,840 --> 00:30:17,440
with debian packaging

00:30:13,600 --> 00:30:19,760
so let's recap uh remember in this talk

00:30:17,440 --> 00:30:21,520
that you have an overview and you know

00:30:19,760 --> 00:30:24,159
that what's that

00:30:21,520 --> 00:30:25,039
the obs is about and what is it for you

00:30:24,159 --> 00:30:28,240
in this talk

00:30:25,039 --> 00:30:30,240
and then why you can save a lot of time

00:30:28,240 --> 00:30:32,240
and also now you know that the obs

00:30:30,240 --> 00:30:34,320
articature if you want to install the

00:30:32,240 --> 00:30:36,880
debian package to set that up

00:30:34,320 --> 00:30:38,320
and also you know that how to configure

00:30:36,880 --> 00:30:43,360
obs project

00:30:38,320 --> 00:30:45,679
and then dod repositories and also

00:30:43,360 --> 00:30:46,880
project settings and meta settings and

00:30:45,679 --> 00:30:50,080
also add

00:30:46,880 --> 00:30:53,039
some suffix on the battery packages

00:30:50,080 --> 00:30:53,600
in the after you have the obvious

00:30:53,039 --> 00:30:56,480
instance

00:30:53,600 --> 00:30:57,519
running and also you know that how to do

00:30:56,480 --> 00:31:00,399
the

00:30:57,519 --> 00:31:02,240
obs workflow for debian packaging in the

00:31:00,399 --> 00:31:05,760
talk

00:31:02,240 --> 00:31:09,519
okay so let's go

00:31:05,760 --> 00:31:11,919
i want uh before the q a

00:31:09,519 --> 00:31:12,960
i would like to add the current status

00:31:11,919 --> 00:31:16,880
of uh

00:31:12,960 --> 00:31:19,760
obs packaging in debian

00:31:16,880 --> 00:31:21,600
the obs package is now only available on

00:31:19,760 --> 00:31:25,440
debian stretch

00:31:21,600 --> 00:31:25,440
and it's because that um

00:31:25,919 --> 00:31:31,279
the ruby on rails f front end

00:31:29,200 --> 00:31:33,039
has been too difficult to maintain

00:31:31,279 --> 00:31:36,240
debian

00:31:33,039 --> 00:31:38,480
and because the upstream really really

00:31:36,240 --> 00:31:38,480
um

00:31:39,039 --> 00:31:42,799
needs some older or specific version of

00:31:42,320 --> 00:31:46,000
uh

00:31:42,799 --> 00:31:49,039
rubygens which conflicts that

00:31:46,000 --> 00:31:51,600
is this uh packaging version in debian

00:31:49,039 --> 00:31:54,159
and then sometimes the rails version are

00:31:51,600 --> 00:31:55,440
differently that debian only keeps one

00:31:54,159 --> 00:31:57,600
version

00:31:55,440 --> 00:31:58,799
uh in whole distribution so it's

00:31:57,600 --> 00:32:03,440
difficult

00:31:58,799 --> 00:32:07,039
to to to do this and also um

00:32:03,440 --> 00:32:10,240
when we get some problem on our debian

00:32:07,039 --> 00:32:13,200
obs then we forward that issue upstream

00:32:10,240 --> 00:32:14,559
then upstream will complain that we use

00:32:13,200 --> 00:32:17,519
completely

00:32:14,559 --> 00:32:18,480
different set of ruby genes which is not

00:32:17,519 --> 00:32:21,200
following their

00:32:18,480 --> 00:32:21,919
their um product it's not by then

00:32:21,200 --> 00:32:24,559
because like it

00:32:21,919 --> 00:32:26,320
seems looks like we fork their partner

00:32:24,559 --> 00:32:27,279
into debian so they do not want to

00:32:26,320 --> 00:32:30,960
support

00:32:27,279 --> 00:32:34,320
and it thinks that upstream doesn't

00:32:30,960 --> 00:32:37,519
want to have iot support in the obs

00:32:34,320 --> 00:32:41,279
so it's in this

00:32:37,519 --> 00:32:44,159
classic way it's not good for

00:32:41,279 --> 00:32:45,120
maintain the packaging debian so we may

00:32:44,159 --> 00:32:48,559
need a

00:32:45,120 --> 00:32:51,679
help hands to packaging it differently

00:32:48,559 --> 00:32:55,360
for a long run my idea was

00:32:51,679 --> 00:32:59,600
just based on the open source

00:32:55,360 --> 00:33:03,360
source rpn because that the upstream

00:32:59,600 --> 00:33:06,240
has a special rpm with the older

00:33:03,360 --> 00:33:07,360
obs genes bundles that they need to run

00:33:06,240 --> 00:33:09,279
obs

00:33:07,360 --> 00:33:11,440
and also sometimes they have a security

00:33:09,279 --> 00:33:14,559
fix and so on

00:33:11,440 --> 00:33:15,840
that they also update in the gyms so it

00:33:14,559 --> 00:33:19,279
would be nice if

00:33:15,840 --> 00:33:22,559
we can package um a different way

00:33:19,279 --> 00:33:25,279
and based on this upstream

00:33:22,559 --> 00:33:26,159
source appearance bundles so that we can

00:33:25,279 --> 00:33:28,960
have a

00:33:26,159 --> 00:33:30,320
it's completely the same set of ruby

00:33:28,960 --> 00:33:33,679
jinx

00:33:30,320 --> 00:33:37,600
as a ruby runtime for the web function

00:33:33,679 --> 00:33:41,360
for the obs but i try to do this

00:33:37,600 --> 00:33:41,840
unfortunately my ruby steel is not good

00:33:41,360 --> 00:33:44,960
so

00:33:41,840 --> 00:33:48,799
i got some issues to get the work

00:33:44,960 --> 00:33:51,279
so i will need the ruby experts to help

00:33:48,799 --> 00:33:52,960
if you have a skill have time or you

00:33:51,279 --> 00:33:56,559
have any better idea

00:33:52,960 --> 00:33:59,840
yeah please let me know as well

00:33:56,559 --> 00:34:03,600
thank you my talk is ended

00:33:59,840 --> 00:34:07,760
here um thank you for listening and then

00:34:03,600 --> 00:34:09,359
let's do the qrn sessions

00:34:07,760 --> 00:34:11,119
thank you very much to andrew for

00:34:09,359 --> 00:34:14,240
sharing this wonderful talk with

00:34:11,119 --> 00:34:17,520
us now let's go to the q a

00:34:14,240 --> 00:34:18,960
session so the first question for you

00:34:17,520 --> 00:34:21,440
andrew is

00:34:18,960 --> 00:34:23,520
the one source package fit multiple

00:34:21,440 --> 00:34:25,919
distributions how do you handle back

00:34:23,520 --> 00:34:25,919
parts

00:34:27,520 --> 00:34:31,440
okay in our practice when we want to do

00:34:30,320 --> 00:34:34,079
the

00:34:31,440 --> 00:34:35,839
one package for multiple distributions

00:34:34,079 --> 00:34:38,639
sometimes that we need to

00:34:35,839 --> 00:34:39,919
ensure that the build dependencies that

00:34:38,639 --> 00:34:43,440
we can use

00:34:39,919 --> 00:34:46,320
to build these packages so usually that

00:34:43,440 --> 00:34:47,119
we convert something in the debian rules

00:34:46,320 --> 00:34:50,000
file

00:34:47,119 --> 00:34:51,839
to detect which one is the distribution

00:34:50,000 --> 00:34:55,119
that we are wanting to build

00:34:51,839 --> 00:34:58,399
so we'll change that build dependency

00:34:55,119 --> 00:34:58,399
on the fly to build it

00:34:59,680 --> 00:35:05,359
okay the next question what is the

00:35:03,040 --> 00:35:09,280
relation between obs packages

00:35:05,359 --> 00:35:09,280
and inserting them into debian

00:35:12,320 --> 00:35:15,920
i think that obs i as i mentioned this

00:35:15,200 --> 00:35:19,520
is a nice

00:35:15,920 --> 00:35:22,240
tools and you can have that as a private

00:35:19,520 --> 00:35:23,200
uh your private infrastructure so you

00:35:22,240 --> 00:35:25,040
can maintain the

00:35:23,200 --> 00:35:26,480
software collection like you're

00:35:25,040 --> 00:35:27,200
packaging something for the small

00:35:26,480 --> 00:35:30,000
project or

00:35:27,200 --> 00:35:31,119
you have some software you need to have

00:35:30,000 --> 00:35:33,520
this kind of a

00:35:31,119 --> 00:35:34,160
system to build and control the software

00:35:33,520 --> 00:35:37,920
quality

00:35:34,160 --> 00:35:41,040
to also support multiple distributions

00:35:37,920 --> 00:35:44,400
so i don't think that is suitable to

00:35:41,040 --> 00:35:47,119
suit directly into debian for the output

00:35:44,400 --> 00:35:47,760
because that it just can help you to

00:35:47,119 --> 00:35:50,480
verify

00:35:47,760 --> 00:35:51,760
that your source package builds and then

00:35:50,480 --> 00:35:54,000
you have to do the

00:35:51,760 --> 00:35:55,119
regular modification and then sign with

00:35:54,000 --> 00:35:57,520
your gpg and

00:35:55,119 --> 00:35:58,400
upload into debian since that's the

00:35:57,520 --> 00:36:00,640
proper way

00:35:58,400 --> 00:36:02,320
but for obs is like a private

00:36:00,640 --> 00:36:05,119
infrastructure you can do

00:36:02,320 --> 00:36:06,880
for your small uh software development

00:36:05,119 --> 00:36:10,000
or small project or you have

00:36:06,880 --> 00:36:13,839
your own customized distributions

00:36:10,000 --> 00:36:13,839
i think that's designed for

00:36:14,079 --> 00:36:21,040
great the next one will not

00:36:17,359 --> 00:36:24,000
obs repos be like ppa for debian

00:36:21,040 --> 00:36:27,040
providing less deviant control packages

00:36:24,000 --> 00:36:29,680
not passing on the watchful eyes of

00:36:27,040 --> 00:36:33,760
deviant developers and deviant rules

00:36:29,680 --> 00:36:37,359
will not be seen by security teams

00:36:33,760 --> 00:36:38,079
i think that the previous uh answer also

00:36:37,359 --> 00:36:40,160
fixed here

00:36:38,079 --> 00:36:41,680
because that the obvious is for your

00:36:40,160 --> 00:36:44,240
private infrastructure

00:36:41,680 --> 00:36:45,359
and you can also host something like a

00:36:44,240 --> 00:36:47,760
ppa

00:36:45,359 --> 00:36:51,040
but uh for debian i'm not sure if we

00:36:47,760 --> 00:36:53,119
have a team want to do that because that

00:36:51,040 --> 00:36:54,160
in the end of my talk i also mentioned

00:36:53,119 --> 00:36:57,040
the problem of

00:36:54,160 --> 00:36:57,760
the open build service package status in

00:36:57,040 --> 00:37:00,240
debian

00:36:57,760 --> 00:37:02,240
i really need help hence to do and also

00:37:00,240 --> 00:37:05,680
i think the packaging style needs to be

00:37:02,240 --> 00:37:08,160
changed okay

00:37:05,680 --> 00:37:09,520
the next question are standard deviant

00:37:08,160 --> 00:37:13,280
users expect

00:37:09,520 --> 00:37:13,280
to be using obs reports

00:37:13,680 --> 00:37:20,880
for users i don't think that would be

00:37:17,280 --> 00:37:22,560
much different because that obs

00:37:20,880 --> 00:37:25,040
builds the binary package and the

00:37:22,560 --> 00:37:28,320
coverage um to a repository and

00:37:25,040 --> 00:37:31,440
generate the sources list and the

00:37:28,320 --> 00:37:35,359
packages file so users can do

00:37:31,440 --> 00:37:37,920
apt update apt-gate and

00:37:35,359 --> 00:37:40,640
install the packages so for users it

00:37:37,920 --> 00:37:44,000
should be the same

00:37:40,640 --> 00:37:46,480
good the next question those

00:37:44,000 --> 00:37:47,599
obs automatically revealed reverse

00:37:46,480 --> 00:37:51,119
dependencies

00:37:47,599 --> 00:37:54,640
on upload i wonder why a screenshot

00:37:51,119 --> 00:37:56,160
one of the slides shows so many packages

00:37:54,640 --> 00:37:59,280
needing to be revealed

00:37:56,160 --> 00:38:02,480
if yes does it only reveal packages

00:37:59,280 --> 00:38:05,280
it knows about or can it fetch packages

00:38:02,480 --> 00:38:08,640
from the main archive

00:38:05,280 --> 00:38:11,839
um the obs has automatically rebuild the

00:38:08,640 --> 00:38:13,599
reserve dependencies by d4 but usually

00:38:11,839 --> 00:38:16,960
you can disable that

00:38:13,599 --> 00:38:19,599
and in our practice i do not like the

00:38:16,960 --> 00:38:21,280
rebuild all the reserve dependencies uh

00:38:19,599 --> 00:38:24,160
automatically because that

00:38:21,280 --> 00:38:25,119
will slow down the development so a lot

00:38:24,160 --> 00:38:28,960
of packages will be

00:38:25,119 --> 00:38:32,720
locked now you cannot see the new status

00:38:28,960 --> 00:38:34,960
so we disable that features on the obs

00:38:32,720 --> 00:38:35,760
and then we just do like uh something

00:38:34,960 --> 00:38:39,119
like a

00:38:35,760 --> 00:38:41,760
mnu something similar way we just

00:38:39,119 --> 00:38:42,640
go to the package page and then click on

00:38:41,760 --> 00:38:44,839
review

00:38:42,640 --> 00:38:47,440
manually instead of automatically

00:38:44,839 --> 00:38:50,720
revealed and then

00:38:47,440 --> 00:38:51,119
it's a because the dod setup so every

00:38:50,720 --> 00:38:55,119
time

00:38:51,119 --> 00:38:56,160
when the upstream repository has any

00:38:55,119 --> 00:38:58,640
update

00:38:56,160 --> 00:38:59,440
so anytime that when he bootstrap

00:38:58,640 --> 00:39:01,920
children

00:38:59,440 --> 00:39:03,839
you will get a that is updated packages

00:39:01,920 --> 00:39:08,960
directly from your

00:39:03,839 --> 00:39:08,960
dod configuration on the upstream

00:39:09,119 --> 00:39:13,040
great our next question is real job and

00:39:12,480 --> 00:39:15,040
work

00:39:13,040 --> 00:39:18,320
assignment using a framework or

00:39:15,040 --> 00:39:19,920
implement from scratch

00:39:18,320 --> 00:39:23,680
because the bluetooth and work

00:39:19,920 --> 00:39:25,280
assignment um i think that

00:39:23,680 --> 00:39:27,520
is not implemented from strategy i don't

00:39:25,280 --> 00:39:28,240
think this obs build package is handled

00:39:27,520 --> 00:39:31,760
with this

00:39:28,240 --> 00:39:33,839
and then this has been already

00:39:31,760 --> 00:39:36,480
provided things from the upstream and

00:39:33,839 --> 00:39:39,200
then since i joined collabora i saw that

00:39:36,480 --> 00:39:42,000
the club are also submit some patches

00:39:39,200 --> 00:39:42,640
and so we can specify the build engines

00:39:42,000 --> 00:39:45,280
to use

00:39:42,640 --> 00:39:47,119
a different bootstrap instead of a

00:39:45,280 --> 00:39:50,720
children or tuple

00:39:47,119 --> 00:39:53,920
so that is uh ensure that the packaging

00:39:50,720 --> 00:39:56,880
builds like a most pro more suitable for

00:39:53,920 --> 00:39:59,599
debian way

00:39:56,880 --> 00:40:02,240
okay the next question is it possible on

00:39:59,599 --> 00:40:04,800
or did you or any one of you guys

00:40:02,240 --> 00:40:07,839
try to try obvious wheels from within

00:40:04,800 --> 00:40:07,839
github actions

00:40:08,839 --> 00:40:14,160
um yes i think that

00:40:11,920 --> 00:40:16,160
uh we already um have this kind of

00:40:14,160 --> 00:40:19,359
implementation

00:40:16,160 --> 00:40:19,760
on the aquatics project and apatis is

00:40:19,359 --> 00:40:22,400
also

00:40:19,760 --> 00:40:23,599
an open source project and also uh based

00:40:22,400 --> 00:40:27,520
on debian

00:40:23,599 --> 00:40:30,560
so we have our uh not github but the

00:40:27,520 --> 00:40:31,920
gitlab and vlab has ci and ci can

00:40:30,560 --> 00:40:34,960
trigger those kind of

00:40:31,920 --> 00:40:37,359
merges directly from debian and then

00:40:34,960 --> 00:40:39,040
see if it works if it works and then it

00:40:37,359 --> 00:40:41,599
will automatically

00:40:39,040 --> 00:40:42,400
submit the package into the an obs

00:40:41,599 --> 00:40:44,720
branch

00:40:42,400 --> 00:40:45,680
and see if we can work builds right

00:40:44,720 --> 00:40:50,000
there

00:40:45,680 --> 00:40:53,280
so it's automated a lot of

00:40:50,000 --> 00:40:55,040
like routine jobs for us so we only need

00:40:53,280 --> 00:40:56,560
to deal with the errors like

00:40:55,040 --> 00:40:59,359
the merge failed and they'll have to do

00:40:56,560 --> 00:41:01,440
that manually and submit for the ci

00:40:59,359 --> 00:41:03,359
and also check that if a package builds

00:41:01,440 --> 00:41:05,280
in in obs directly

00:41:03,359 --> 00:41:06,960
if it's not then we should fix the

00:41:05,280 --> 00:41:10,319
filter profile source package

00:41:06,960 --> 00:41:13,119
manually great

00:41:10,319 --> 00:41:15,920
our next question how complicated would

00:41:13,119 --> 00:41:19,440
it be to set up your own test obs server

00:41:15,920 --> 00:41:22,079
on debian boston locally what resources

00:41:19,440 --> 00:41:22,079
will it take

00:41:22,160 --> 00:41:28,560
yes it's very complicated because that

00:41:25,359 --> 00:41:31,920
as i mentioned in my last slide

00:41:28,560 --> 00:41:36,240
the obs packages

00:41:31,920 --> 00:41:38,640
currently is only available on stretch

00:41:36,240 --> 00:41:40,400
because the the newbie fountain is very

00:41:38,640 --> 00:41:41,599
very difficult to maintain debian i

00:41:40,400 --> 00:41:45,599
really need a

00:41:41,599 --> 00:41:48,319
help hands if you are ruby expert please

00:41:45,599 --> 00:41:49,520
contact me and then help me with with

00:41:48,319 --> 00:41:51,839
this so

00:41:49,520 --> 00:41:54,160
under buster we do not have a available

00:41:51,839 --> 00:41:56,880
package

00:41:54,160 --> 00:41:59,040
okay the next one what is the main

00:41:56,880 --> 00:42:01,760
challenge to configure obs to provide

00:41:59,040 --> 00:42:04,640
bills against unstable experimental

00:42:01,760 --> 00:42:05,680
i know that the public instances do not

00:42:04,640 --> 00:42:09,920
support

00:42:05,680 --> 00:42:09,920
those which and i wonder why

00:42:10,079 --> 00:42:13,920
um this is a good question i haven't

00:42:12,400 --> 00:42:15,839
tried that

00:42:13,920 --> 00:42:17,119
with the experimental i tried it with

00:42:15,839 --> 00:42:20,640
unstable and

00:42:17,119 --> 00:42:23,440
things that works but on experimental

00:42:20,640 --> 00:42:23,760
i noticed that we do not have the dod

00:42:23,440 --> 00:42:26,480
and

00:42:23,760 --> 00:42:27,040
also it doesn't work i don't know i also

00:42:26,480 --> 00:42:30,000
do not

00:42:27,040 --> 00:42:32,160
know why and i in our practice i never

00:42:30,000 --> 00:42:36,240
tried that so i really don't know

00:42:32,160 --> 00:42:36,240
why it's failed and why it doesn't work

00:42:36,960 --> 00:42:41,920
okay the next question can this project

00:42:40,240 --> 00:42:45,839
configuration be stored in a given

00:42:41,920 --> 00:42:45,839
repository along the sources

00:42:47,760 --> 00:42:51,760
you can also do that and then also

00:42:49,760 --> 00:42:53,680
there's a command line you can

00:42:51,760 --> 00:42:55,440
update the project configuration and

00:42:53,680 --> 00:42:57,839
also you can also update the

00:42:55,440 --> 00:42:58,480
project main top page you can use the

00:42:57,839 --> 00:43:02,079
osc

00:42:58,480 --> 00:43:03,359
tool to import uh the the command so is

00:43:02,079 --> 00:43:06,720
it possible to

00:43:03,359 --> 00:43:08,319
stop which those kind of

00:43:06,720 --> 00:43:10,000
project configuration into located

00:43:08,319 --> 00:43:12,400
repository with some

00:43:10,000 --> 00:43:14,400
make file or something to update from

00:43:12,400 --> 00:43:17,920
there

00:43:14,400 --> 00:43:20,560
perfect does obs offer

00:43:17,920 --> 00:43:21,760
also to run some tests for the packages

00:43:20,560 --> 00:43:24,839
it is building

00:43:21,760 --> 00:43:26,240
how to verify the packages are really

00:43:24,839 --> 00:43:29,839
working

00:43:26,240 --> 00:43:32,880
um i haven't tried to do

00:43:29,839 --> 00:43:34,240
those kind of automatic tests while it's

00:43:32,880 --> 00:43:37,119
building because that

00:43:34,240 --> 00:43:39,119
when we want to do the test we want some

00:43:37,119 --> 00:43:42,480
packages installed

00:43:39,119 --> 00:43:45,760
in the actual distribution and the wrong

00:43:42,480 --> 00:43:50,079
actual hardware so we hope with the lava

00:43:45,760 --> 00:43:51,040
to do a test so that's the way we verify

00:43:50,079 --> 00:43:54,560
if that

00:43:51,040 --> 00:43:58,400
works but you know that i showed that

00:43:54,560 --> 00:43:58,400
obs has a nice review

00:43:58,560 --> 00:44:04,640
functions so normally that the qa can

00:44:02,319 --> 00:44:07,119
just fetch the binary package directly

00:44:04,640 --> 00:44:08,000
and then do the test manually and if

00:44:07,119 --> 00:44:10,319
it's a very important

00:44:08,000 --> 00:44:11,760
package so before that you you learn

00:44:10,319 --> 00:44:15,440
into the potassium

00:44:11,760 --> 00:44:17,119
server but on the development product

00:44:15,440 --> 00:44:21,119
that we just do the automatic test in

00:44:17,119 --> 00:44:21,119
the lava instead of a menu test

00:44:21,200 --> 00:44:27,280
great the next question can obs run

00:44:24,079 --> 00:44:30,800
within a docker container

00:44:27,280 --> 00:44:32,319
uh yes and the the new version um

00:44:30,800 --> 00:44:33,920
of the open build service upstream

00:44:32,319 --> 00:44:36,160
already provides that

00:44:33,920 --> 00:44:37,599
the docker files so you can build that

00:44:36,160 --> 00:44:40,400
in the container

00:44:37,599 --> 00:44:42,400
yeah and also um i curious is that the

00:44:40,400 --> 00:44:44,880
possible that we can package that

00:44:42,400 --> 00:44:45,839
obs api that will be on rails uh front

00:44:44,880 --> 00:44:47,599
end

00:44:45,839 --> 00:44:49,839
inside the container i really don't know

00:44:47,599 --> 00:44:52,640
i also curious that there was a talk

00:44:49,839 --> 00:44:54,160
um two days ago and talked about

00:44:52,640 --> 00:44:57,200
something built in the campaign

00:44:54,160 --> 00:45:00,640
i need to watch the the video

00:44:57,200 --> 00:45:01,599
okay uh another question does it only do

00:45:00,640 --> 00:45:05,200
that for the

00:45:01,599 --> 00:45:08,000
r devs it knows about or can it fetch

00:45:05,200 --> 00:45:08,000
from archive

00:45:08,720 --> 00:45:16,400
can you change that question again

00:45:11,839 --> 00:45:20,319
yeah does it only do that for the

00:45:16,400 --> 00:45:24,640
r deps it knows about or can it fetch

00:45:20,319 --> 00:45:29,119
from archive this is a question from irc

00:45:24,640 --> 00:45:29,119
that's why i didn't read it let me check

00:45:33,119 --> 00:45:37,040
can you pass the question into the

00:45:34,480 --> 00:45:47,839
easter pad so i can read because

00:45:37,040 --> 00:45:47,839
yes of course okay

00:46:01,920 --> 00:46:08,800
okay it is it is now in a red

00:46:05,440 --> 00:46:14,319
line you mean the

00:46:08,800 --> 00:46:17,760
up depends is the reserve dependencies

00:46:14,319 --> 00:46:21,440
yes it's a is a question

00:46:17,760 --> 00:46:21,440
next to the docker container one

00:46:21,599 --> 00:46:29,839
oh okay

00:46:32,160 --> 00:46:41,040
oh we we have a lot of time

00:46:36,800 --> 00:46:43,280
so thanks a lot andrew and

00:46:41,040 --> 00:46:45,440
let's keep answering the questions in

00:46:43,280 --> 00:46:47,440
the in the past

00:46:45,440 --> 00:46:48,640
okay i'll keep answering that see you

00:46:47,440 --> 00:46:52,400
next day yeah

00:46:48,640 --> 00:46:57,839
thanks a lot for your talk my pleasure

00:46:52,400 --> 00:46:57,839
thank you for listening

00:46:58,880 --> 00:47:00,960

YouTube URL: https://www.youtube.com/watch?v=ob6Uxa88Ba8


