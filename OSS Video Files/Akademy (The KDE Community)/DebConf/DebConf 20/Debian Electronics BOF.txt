Title: Debian Electronics BOF
Publication date: 2020-10-23
Playlist: DebConf 20
Description: 
	by Bdale Garbee

At: DebConf20
https://debconf20.debconf.org/talks/86-debian-electronics-bof/

An opportunity to discuss recent changes in and the current state and future plans for packages that are maintained by the Debian Electronics team.

Room: Talks
Scheduled start: 2020-08-25 20:00:00
Captions: 
	00:00:05,440 --> 00:00:12,160
okay so welcome everyone

00:00:07,919 --> 00:00:17,119
and please welcome to bd gallery and the

00:00:12,160 --> 00:00:19,119
deviant electronic sport

00:00:17,119 --> 00:00:21,039
thanks so much um hello everybody this

00:00:19,119 --> 00:00:24,400
is bdl bdl garby

00:00:21,039 --> 00:00:25,840
um this is sort of a continuation of a

00:00:24,400 --> 00:00:29,199
tradition that we started

00:00:25,840 --> 00:00:30,560
several depths ago of having an

00:00:29,199 --> 00:00:33,520
electronics buff

00:00:30,560 --> 00:00:34,399
where those of us who are involved in

00:00:33,520 --> 00:00:36,960
working on

00:00:34,399 --> 00:00:38,000
the packages for electronics design and

00:00:36,960 --> 00:00:41,120
related tasks

00:00:38,000 --> 00:00:41,520
in debian could report a little bit on

00:00:41,120 --> 00:00:43,600
what

00:00:41,520 --> 00:00:44,640
interesting things were happening with

00:00:43,600 --> 00:00:46,239
those packages

00:00:44,640 --> 00:00:48,559
what some of the challenges were what

00:00:46,239 --> 00:00:51,280
some of the plans would be

00:00:48,559 --> 00:00:52,960
i unfortunately must admit that until i

00:00:51,280 --> 00:00:54,879
woke up this morning i had

00:00:52,960 --> 00:00:56,719
completely not thought about the fact

00:00:54,879 --> 00:00:57,680
that this being an entirely virtual

00:00:56,719 --> 00:01:01,520
event

00:00:57,680 --> 00:01:03,359
meant that the normal processes by which

00:01:01,520 --> 00:01:05,680
people would arrive at a buff and sort

00:01:03,359 --> 00:01:08,240
of self-organize and

00:01:05,680 --> 00:01:08,720
there's no huge distinction between who

00:01:08,240 --> 00:01:10,479
the

00:01:08,720 --> 00:01:13,280
participants are and who the attendees

00:01:10,479 --> 00:01:13,840
are would of necessity be different this

00:01:13,280 --> 00:01:16,320
time

00:01:13,840 --> 00:01:18,159
and so i sent some messages out this

00:01:16,320 --> 00:01:18,560
morning poking some people that i

00:01:18,159 --> 00:01:20,640
thought

00:01:18,560 --> 00:01:22,000
might have interesting things to add to

00:01:20,640 --> 00:01:24,320
this session

00:01:22,000 --> 00:01:25,600
i would like to encourage anyone who's

00:01:24,320 --> 00:01:27,920
checked in and is listening to the

00:01:25,600 --> 00:01:30,079
stream today who would like to

00:01:27,920 --> 00:01:31,200
contribute information about what

00:01:30,079 --> 00:01:33,439
they're doing

00:01:31,200 --> 00:01:35,119
either with packages in the debian

00:01:33,439 --> 00:01:37,920
electronics team or

00:01:35,119 --> 00:01:39,200
as a user of packages related to

00:01:37,920 --> 00:01:42,159
electronics design

00:01:39,200 --> 00:01:44,320
in debian to feel free to poke me on irc

00:01:42,159 --> 00:01:44,960
or via email and i will be happy to give

00:01:44,320 --> 00:01:46,960
you

00:01:44,960 --> 00:01:49,119
the appropriate link so that you can

00:01:46,960 --> 00:01:50,640
join us as a participant and active

00:01:49,119 --> 00:01:54,079
participant

00:01:50,640 --> 00:01:56,000
in this session if we don't get too many

00:01:54,079 --> 00:01:57,840
other folks uh joining in this could

00:01:56,000 --> 00:01:58,240
turn out to be a relatively short buff

00:01:57,840 --> 00:02:00,719
which

00:01:58,240 --> 00:02:02,320
i guess is okay too everything about

00:02:00,719 --> 00:02:03,680
this is just a little different than

00:02:02,320 --> 00:02:05,920
it's been in the past

00:02:03,680 --> 00:02:07,360
so what's the point of debian

00:02:05,920 --> 00:02:10,399
electronics

00:02:07,360 --> 00:02:13,920
there is a team in the

00:02:10,399 --> 00:02:16,640
salsa repository mechanism

00:02:13,920 --> 00:02:18,239
called electronics-team and if you have

00:02:16,640 --> 00:02:20,720
a look there you'll see that there are

00:02:18,239 --> 00:02:23,599
some dozens of packages that

00:02:20,720 --> 00:02:25,280
are maintained for debian by some subset

00:02:23,599 --> 00:02:27,599
of members of the team

00:02:25,280 --> 00:02:28,400
these are tools that are used for things

00:02:27,599 --> 00:02:30,400
like

00:02:28,400 --> 00:02:34,000
schematic capture printed circuit board

00:02:30,400 --> 00:02:34,000
design simulation

00:02:34,080 --> 00:02:38,720
hardware description language design for

00:02:36,959 --> 00:02:40,319
fuel programmable gate arrays and other

00:02:38,720 --> 00:02:43,280
programmable logic

00:02:40,319 --> 00:02:44,239
devices and very importantly since

00:02:43,280 --> 00:02:46,239
almost everything

00:02:44,239 --> 00:02:48,560
electronics these days includes some

00:02:46,239 --> 00:02:50,000
kind of an embedded processing element a

00:02:48,560 --> 00:02:52,959
microcontroller or

00:02:50,000 --> 00:02:54,400
something there are also software

00:02:52,959 --> 00:02:56,239
packages that are

00:02:54,400 --> 00:02:58,239
important to people developing

00:02:56,239 --> 00:02:59,200
electronics that are maintained by

00:02:58,239 --> 00:03:01,599
various members

00:02:59,200 --> 00:03:02,879
of the debian electronics team this

00:03:01,599 --> 00:03:05,840
includes

00:03:02,879 --> 00:03:06,720
some compilers that are specific for

00:03:05,840 --> 00:03:08,400
developing

00:03:06,720 --> 00:03:09,920
code for use in embedded

00:03:08,400 --> 00:03:11,840
microcontrollers

00:03:09,920 --> 00:03:13,120
includes debugging tools things like

00:03:11,840 --> 00:03:16,159
openocd

00:03:13,120 --> 00:03:19,519
and some related packages which

00:03:16,159 --> 00:03:20,319
can help with debugging software that's

00:03:19,519 --> 00:03:24,400
running on

00:03:20,319 --> 00:03:27,680
embedded processors and

00:03:24,400 --> 00:03:30,640
of course there are libraries that are

00:03:27,680 --> 00:03:31,440
there to provide the runtime environment

00:03:30,640 --> 00:03:33,120
for

00:03:31,440 --> 00:03:35,280
things that are being programmed to run

00:03:33,120 --> 00:03:38,480
in these bits of electronics

00:03:35,280 --> 00:03:40,799
the other speaker that agreed to

00:03:38,480 --> 00:03:42,720
actively participate is my business

00:03:40,799 --> 00:03:44,400
partner good friend and also a former

00:03:42,720 --> 00:03:47,040
member of the debian technical committee

00:03:44,400 --> 00:03:49,200
keith packard he unfortunately is

00:03:47,040 --> 00:03:50,879
tied up finishing up a work-related

00:03:49,200 --> 00:03:51,920
teleconference but hopefully he'll join

00:03:50,879 --> 00:03:53,599
us shortly

00:03:51,920 --> 00:03:55,840
uh and when he gets here he'll talk to

00:03:53,599 --> 00:03:56,480
us some about the picolib c work he's

00:03:55,840 --> 00:04:00,400
been doing

00:03:56,480 --> 00:04:02,560
to give us all a better more efficient

00:04:00,400 --> 00:04:04,159
c runtime library for use in small

00:04:02,560 --> 00:04:06,560
embedded systems

00:04:04,159 --> 00:04:07,840
other things that i personally wanted to

00:04:06,560 --> 00:04:11,200
provide some

00:04:07,840 --> 00:04:12,720
report or update on today are in sort of

00:04:11,200 --> 00:04:16,560
two categories

00:04:12,720 --> 00:04:18,000
one is that we are currently working our

00:04:16,560 --> 00:04:21,199
way through a transition

00:04:18,000 --> 00:04:24,720
from a um from the

00:04:21,199 --> 00:04:28,080
gita gaff package of schematic capture

00:04:24,720 --> 00:04:30,320
and related tools to uh

00:04:28,080 --> 00:04:32,400
use of the one of the forks of gidogaf

00:04:30,320 --> 00:04:34,960
called lepton eda

00:04:32,400 --> 00:04:37,280
um unfortunately the situation is that a

00:04:34,960 --> 00:04:38,960
few years ago

00:04:37,280 --> 00:04:41,680
one of the upstream maintainers of

00:04:38,960 --> 00:04:45,919
gidegaf embarked upon

00:04:41,680 --> 00:04:47,919
a an effort to try and integrate

00:04:45,919 --> 00:04:49,440
python as an extension language into

00:04:47,919 --> 00:04:52,320
that tool set

00:04:49,440 --> 00:04:53,360
as an addition to the use of scheme

00:04:52,320 --> 00:04:55,840
through

00:04:53,360 --> 00:04:57,680
guile which had been the initial

00:04:55,840 --> 00:05:02,080
extension language within

00:04:57,680 --> 00:05:03,919
the gnu gpl eda toolset

00:05:02,080 --> 00:05:05,440
you know sort of thinking about it in

00:05:03,919 --> 00:05:07,680
the abstract

00:05:05,440 --> 00:05:09,120
python as an extension language would

00:05:07,680 --> 00:05:10,000
probably have been a really great choice

00:05:09,120 --> 00:05:12,720
for a tool set like

00:05:10,000 --> 00:05:14,320
this unfortunately the way that

00:05:12,720 --> 00:05:17,280
integration and transition

00:05:14,320 --> 00:05:18,479
uh was handled had two negative

00:05:17,280 --> 00:05:21,840
consequences

00:05:18,479 --> 00:05:23,680
one is that as far as

00:05:21,840 --> 00:05:24,880
i can tell it was sort of never really

00:05:23,680 --> 00:05:28,160
completed

00:05:24,880 --> 00:05:30,560
it is possible in the gita toolset to do

00:05:28,160 --> 00:05:39,680
some python extension work today

00:05:30,560 --> 00:05:43,360
but let's see hang on one sec um

00:05:39,680 --> 00:05:44,960
um one of the

00:05:43,360 --> 00:05:46,720
consequences was that that work was

00:05:44,960 --> 00:05:48,800
never really completed and so while it's

00:05:46,720 --> 00:05:50,479
possible to do some python extension

00:05:48,800 --> 00:05:52,479
things now

00:05:50,479 --> 00:05:54,400
it's never really taken over as a

00:05:52,479 --> 00:05:55,680
primary way of doing such things within

00:05:54,400 --> 00:05:57,840
that tool chain

00:05:55,680 --> 00:05:59,520
and there was never really any plan to

00:05:57,840 --> 00:06:02,800
sort of eliminate

00:05:59,520 --> 00:06:04,080
um the scheme via guile interface so in

00:06:02,800 --> 00:06:06,720
some sense

00:06:04,080 --> 00:06:07,680
that work just made the task of

00:06:06,720 --> 00:06:10,960
maintaining

00:06:07,680 --> 00:06:13,520
the gita toolset get more difficult

00:06:10,960 --> 00:06:15,199
and unfortunately while i wasn't deeply

00:06:13,520 --> 00:06:17,759
involved in this process at the time

00:06:15,199 --> 00:06:19,440
it appears in hindsight that one of the

00:06:17,759 --> 00:06:21,199
consequences is that a number of the

00:06:19,440 --> 00:06:21,919
people who were involved in the hello

00:06:21,199 --> 00:06:23,680
keith

00:06:21,919 --> 00:06:26,000
a number of the folks that were involved

00:06:23,680 --> 00:06:29,680
in uh the early maintenance work

00:06:26,000 --> 00:06:32,800
on that tool set who are very interested

00:06:29,680 --> 00:06:34,960
in um guile

00:06:32,800 --> 00:06:36,639
and and sort of scheme as an extension

00:06:34,960 --> 00:06:38,800
language were very put off

00:06:36,639 --> 00:06:39,759
by the way that integration happened and

00:06:38,800 --> 00:06:42,560
so

00:06:39,759 --> 00:06:43,440
they created a fork called lepton eda

00:06:42,560 --> 00:06:45,520
and for a while

00:06:43,440 --> 00:06:46,720
it seemed that the two forks were sort

00:06:45,520 --> 00:06:48,639
of proceeding along

00:06:46,720 --> 00:06:50,080
in parallel and you kind of had your

00:06:48,639 --> 00:06:52,080
choice of which one to pick

00:06:50,080 --> 00:06:54,720
and the source file formats were all

00:06:52,080 --> 00:06:56,960
compatible and so forth

00:06:54,720 --> 00:06:59,039
unfortunately over time it appears that

00:06:56,960 --> 00:07:01,919
the geda or gita

00:06:59,039 --> 00:07:02,720
upstream has become relatively inactive

00:07:01,919 --> 00:07:05,520
while

00:07:02,720 --> 00:07:06,319
the lepton eda community has become

00:07:05,520 --> 00:07:09,120
quite active

00:07:06,319 --> 00:07:10,000
and in fact not only have they not

00:07:09,120 --> 00:07:11,599
embraced

00:07:10,000 --> 00:07:13,599
the integration of python as an

00:07:11,599 --> 00:07:16,240
extension language they've actually been

00:07:13,599 --> 00:07:19,280
working very hard to refactor

00:07:16,240 --> 00:07:20,479
some of the user interface code in the

00:07:19,280 --> 00:07:23,199
schematic capture

00:07:20,479 --> 00:07:25,360
and attribute management and related

00:07:23,199 --> 00:07:27,840
tools that are part of that suite

00:07:25,360 --> 00:07:28,639
to sort of double down on the investment

00:07:27,840 --> 00:07:31,199
in scheme

00:07:28,639 --> 00:07:32,800
as programming language and guile is the

00:07:31,199 --> 00:07:34,319
way they implement that

00:07:32,800 --> 00:07:36,319
now you know we can all sort of scratch

00:07:34,319 --> 00:07:37,919
our heads about whether that's what we

00:07:36,319 --> 00:07:40,240
would really have chosen in

00:07:37,919 --> 00:07:41,120
the abstract but the practical

00:07:40,240 --> 00:07:44,080
consequence

00:07:41,120 --> 00:07:45,440
is that a number of really ugly bugs in

00:07:44,080 --> 00:07:47,599
the geda tool set

00:07:45,440 --> 00:07:49,360
including things like panics in the

00:07:47,599 --> 00:07:52,879
middle of making

00:07:49,360 --> 00:07:55,520
substantial cut and pastes or um

00:07:52,879 --> 00:07:56,960
bus moves or other you know things in

00:07:55,520 --> 00:08:01,520
the schematic capture tool

00:07:56,960 --> 00:08:04,879
with the g-schem tool

00:08:01,520 --> 00:08:07,360
are just gone in the lepton

00:08:04,879 --> 00:08:08,800
a equivalence like the lepton schematic

00:08:07,360 --> 00:08:10,879
and since there's a hundred percent file

00:08:08,800 --> 00:08:11,199
format compatibility you can you can

00:08:10,879 --> 00:08:14,000
move

00:08:11,199 --> 00:08:15,199
designs and schematic symbols and so

00:08:14,000 --> 00:08:17,120
forth back and forth

00:08:15,199 --> 00:08:18,960
there just doesn't seem to me to be any

00:08:17,120 --> 00:08:20,400
particular reason for us to work really

00:08:18,960 --> 00:08:22,639
hard to try and maintain

00:08:20,400 --> 00:08:23,440
both tool threats and debian it gets

00:08:22,639 --> 00:08:26,400
even more

00:08:23,440 --> 00:08:27,199
frustrating because those who maintain

00:08:26,400 --> 00:08:29,759
the guile

00:08:27,199 --> 00:08:31,199
language packages in debian would really

00:08:29,759 --> 00:08:34,719
like to stop supporting

00:08:31,199 --> 00:08:36,719
guile 2.0 and you know for some time the

00:08:34,719 --> 00:08:40,240
lepton eda tool set's been supporting

00:08:36,719 --> 00:08:42,080
dial 2.2 and in the upcoming

00:08:40,240 --> 00:08:44,159
next release they will be explicitly

00:08:42,080 --> 00:08:46,399
supporting dial 3.0

00:08:44,159 --> 00:08:47,279
uh meanwhile the gitogaf stuff is really

00:08:46,399 --> 00:08:50,480
hard stuck

00:08:47,279 --> 00:08:53,040
on guile 2.0 and since the principal

00:08:50,480 --> 00:08:54,959
remaining active upstream developer is

00:08:53,040 --> 00:08:55,279
all enthusiastic about the python stuff

00:08:54,959 --> 00:08:56,640
and

00:08:55,279 --> 00:08:58,560
kind of doesn't care very much about the

00:08:56,640 --> 00:09:01,519
guile stuff i just don't see how that's

00:08:58,560 --> 00:09:03,120
going to change anytime soon so

00:09:01,519 --> 00:09:05,120
in order to kind of break the log jam

00:09:03,120 --> 00:09:07,760
and help the guile folks out

00:09:05,120 --> 00:09:09,279
in their process of getting 2.0 out of

00:09:07,760 --> 00:09:10,560
the archive before the next stable

00:09:09,279 --> 00:09:12,959
release

00:09:10,560 --> 00:09:14,880
i have requested that gita gap which is

00:09:12,959 --> 00:09:18,480
the source parent package for

00:09:14,880 --> 00:09:20,959
g-scan and g-attribute and the related

00:09:18,480 --> 00:09:23,120
geda tools i've requested that that be

00:09:20,959 --> 00:09:26,880
removed there are a couple

00:09:23,120 --> 00:09:27,680
of tools that still have dependencies on

00:09:26,880 --> 00:09:29,680
that tool set

00:09:27,680 --> 00:09:32,560
because they want to use the net listing

00:09:29,680 --> 00:09:32,880
tool to extract schematic information to

00:09:32,560 --> 00:09:35,279
use

00:09:32,880 --> 00:09:37,360
other processes i believe that those

00:09:35,279 --> 00:09:39,680
should be relatively trivial to update

00:09:37,360 --> 00:09:42,240
to use the lepton eda equivalents

00:09:39,680 --> 00:09:44,560
instead but i didn't actually sort of

00:09:42,240 --> 00:09:46,880
volunteer to do that work myself

00:09:44,560 --> 00:09:48,160
and uh the guy that said he would do

00:09:46,880 --> 00:09:50,800
some work on it hasn't

00:09:48,160 --> 00:09:52,720
apparently gotten around to it yet so uh

00:09:50,800 --> 00:09:54,880
ddgaf is still in the archive

00:09:52,720 --> 00:09:57,920
but as far as i'm concerned it's on the

00:09:54,880 --> 00:10:00,000
way out and anyone who's been using geda

00:09:57,920 --> 00:10:02,399
i should just install lepton eda and get

00:10:00,000 --> 00:10:03,920
used to using it because

00:10:02,399 --> 00:10:06,000
it's sort of exactly the same but

00:10:03,920 --> 00:10:07,120
slightly different they have been making

00:10:06,000 --> 00:10:09,120
some improvements and

00:10:07,120 --> 00:10:10,160
making some additions uh to the things

00:10:09,120 --> 00:10:11,440
that are available in the user

00:10:10,160 --> 00:10:12,959
interfaces and

00:10:11,440 --> 00:10:15,440
i certainly expect that will continue

00:10:12,959 --> 00:10:16,000
over time but so far i personally have

00:10:15,440 --> 00:10:18,640
seen

00:10:16,000 --> 00:10:21,519
zero difficulty taking existing geda

00:10:18,640 --> 00:10:24,320
designs and just using lepton schematic

00:10:21,519 --> 00:10:25,920
to do maintenance work on them so anyway

00:10:24,320 --> 00:10:27,279
that's the first of the two things that

00:10:25,920 --> 00:10:28,640
i wanted to talk about

00:10:27,279 --> 00:10:31,519
and obviously if anybody has any

00:10:28,640 --> 00:10:32,959
questions feel free to queue those up

00:10:31,519 --> 00:10:34,640
and we'll try to figure out

00:10:32,959 --> 00:10:36,800
how to see those and how to answer them

00:10:34,640 --> 00:10:38,959
here sometime soon

00:10:36,800 --> 00:10:40,560
the second thing i wanted to mention is

00:10:38,959 --> 00:10:42,000
that i personally have been doing

00:10:40,560 --> 00:10:43,839
printed circuit board design

00:10:42,000 --> 00:10:45,279
with a different tool over the last year

00:10:43,839 --> 00:10:47,600
year and a half two years

00:10:45,279 --> 00:10:49,600
than i was at the last time that we had

00:10:47,600 --> 00:10:51,839
one of these buffs or at least i think

00:10:49,600 --> 00:10:53,120
that change has happened since then and

00:10:51,839 --> 00:10:57,839
that is i used to use

00:10:53,120 --> 00:11:00,320
the the sort of geda related pcb package

00:10:57,839 --> 00:11:01,839
and it is actually still somewhat

00:11:00,320 --> 00:11:03,040
maintained upstream though it's been a

00:11:01,839 --> 00:11:06,160
while since it had

00:11:03,040 --> 00:11:08,720
a new release however there's a fork of

00:11:06,160 --> 00:11:11,120
that that started several years ago

00:11:08,720 --> 00:11:13,360
and is currently being maintained by a

00:11:11,120 --> 00:11:16,560
small but very active group called

00:11:13,360 --> 00:11:17,920
dash rnd and that's the program that

00:11:16,560 --> 00:11:21,680
i've switched over to using

00:11:17,920 --> 00:11:23,600
um it has evolved substantially from pcv

00:11:21,680 --> 00:11:24,720
the user interface went through a

00:11:23,600 --> 00:11:26,720
significant

00:11:24,720 --> 00:11:28,320
menu structuring redesign which caused

00:11:26,720 --> 00:11:31,120
immense pain

00:11:28,320 --> 00:11:31,760
as i had unlearned yeah keith i know

00:11:31,120 --> 00:11:33,839
sorry

00:11:31,760 --> 00:11:35,040
as we had to unlearn sort of the old

00:11:33,839 --> 00:11:37,360
keystroke patterns

00:11:35,040 --> 00:11:38,480
and learn the new ones to do the same

00:11:37,360 --> 00:11:40,079
things

00:11:38,480 --> 00:11:42,240
there's a whole bunch of additional

00:11:40,079 --> 00:11:44,000
capabilities in pcb r d

00:11:42,240 --> 00:11:46,240
that caused me to continue to feel like

00:11:44,000 --> 00:11:48,000
that was a reasonable choice

00:11:46,240 --> 00:11:49,760
this whole set of tools that i've been

00:11:48,000 --> 00:11:51,360
talking about are

00:11:49,760 --> 00:11:53,279
to many people just sort of an

00:11:51,360 --> 00:11:55,120
alternative to keycad

00:11:53,279 --> 00:11:56,880
and so if there's somebody around that

00:11:55,120 --> 00:11:58,480
wants to join us and

00:11:56,880 --> 00:12:00,320
give an update on how things are going

00:11:58,480 --> 00:12:02,240
with kicad that would be great

00:12:00,320 --> 00:12:03,839
um but since i don't currently

00:12:02,240 --> 00:12:04,320
personally use that except when i'm

00:12:03,839 --> 00:12:06,079
doing

00:12:04,320 --> 00:12:07,440
minor updates to other people's designs

00:12:06,079 --> 00:12:11,120
that started there

00:12:07,440 --> 00:12:12,880
uh the lepton eda and pcb r d tools are

00:12:11,120 --> 00:12:14,000
the ones that i personally am using for

00:12:12,880 --> 00:12:17,360
all my

00:12:14,000 --> 00:12:18,959
electronic circuit board design and

00:12:17,360 --> 00:12:20,800
layout needs and i just wanted to make

00:12:18,959 --> 00:12:22,320
sure everybody understood that

00:12:20,800 --> 00:12:24,320
in part because as i've already

00:12:22,320 --> 00:12:26,000
mentioned i've requested that gideogaf

00:12:24,320 --> 00:12:27,600
be removed from the archive since i'm

00:12:26,000 --> 00:12:28,480
not maintaining it anymore and i don't

00:12:27,600 --> 00:12:30,639
know how we

00:12:28,480 --> 00:12:32,320
keep it working and debian with upstream

00:12:30,639 --> 00:12:33,839
not being interested in getting pascal

00:12:32,320 --> 00:12:35,600
2.0

00:12:33,839 --> 00:12:37,200
and because my personal attention is now

00:12:35,600 --> 00:12:40,399
much more on the pcb r

00:12:37,200 --> 00:12:41,279
d package there's going to be much less

00:12:40,399 --> 00:12:43,839
active attention

00:12:41,279 --> 00:12:46,000
paid to the pcb package if there's

00:12:43,839 --> 00:12:47,680
anybody still using pcv that wants to

00:12:46,000 --> 00:12:48,399
take over primary maintenance of that

00:12:47,680 --> 00:12:50,079
package

00:12:48,399 --> 00:12:52,639
feel free to let me know and i'll be

00:12:50,079 --> 00:12:54,240
happy to support you in coming up to

00:12:52,639 --> 00:12:55,760
speed and dealing with that

00:12:54,240 --> 00:12:58,079
so that's pretty much all the stuff that

00:12:55,760 --> 00:12:58,880
i wanted to talk about today i see keith

00:12:58,079 --> 00:13:01,440
is here

00:12:58,880 --> 00:13:02,880
keith you were gonna uh tell us all a

00:13:01,440 --> 00:13:05,200
little bit about what's been happening

00:13:02,880 --> 00:13:08,880
with pico lib c

00:13:05,200 --> 00:13:10,160
sure is my microphone operational i

00:13:08,880 --> 00:13:12,639
would assume so

00:13:10,160 --> 00:13:13,360
i hear you just fine yeah i'm going to

00:13:12,639 --> 00:13:16,800
try to

00:13:13,360 --> 00:13:17,440
share some slides if i can remember how

00:13:16,800 --> 00:13:19,760
to do that

00:13:17,440 --> 00:13:21,200
i think it's this window over here

00:13:19,760 --> 00:13:22,560
there's a shared desktop button

00:13:21,200 --> 00:13:24,880
somewhere

00:13:22,560 --> 00:13:25,920
yeah i will share my presentation

00:13:24,880 --> 00:13:28,959
instead

00:13:25,920 --> 00:13:30,000
okay hey that worked yeah it kind of

00:13:28,959 --> 00:13:32,639
works

00:13:30,000 --> 00:13:34,000
um we've been doing uh we've been doing

00:13:32,639 --> 00:13:35,680
social meetings on jitsi

00:13:34,000 --> 00:13:38,160
here in portland for the last couple of

00:13:35,680 --> 00:13:41,120
months so i'm getting used to it

00:13:38,160 --> 00:13:41,839
seems to work pretty well okay so um i

00:13:41,120 --> 00:13:43,600
joined

00:13:41,839 --> 00:13:45,199
uh sci-fi of last year and one of the

00:13:43,600 --> 00:13:46,000
things they wanted me to do was to keep

00:13:45,199 --> 00:13:48,560
fixing

00:13:46,000 --> 00:13:49,279
embed the embedded libsy adventure

00:13:48,560 --> 00:13:51,760
because we have

00:13:49,279 --> 00:13:55,120
an embedded linsee kind of a dearth of

00:13:51,760 --> 00:13:55,120
credible embedded lipseis

00:14:01,600 --> 00:14:04,880
you're out of your own way keith

00:14:06,000 --> 00:14:10,000
is that working again yes it's working

00:14:08,320 --> 00:14:13,839
again okay

00:14:10,000 --> 00:14:16,320
um uh most of what people use in 32 and

00:14:13,839 --> 00:14:17,760
64-bit embedded systems is new lib these

00:14:16,320 --> 00:14:20,079
days

00:14:17,760 --> 00:14:21,839
but what i discovered is that new lib is

00:14:20,079 --> 00:14:23,360
developed or maintained almost entirely

00:14:21,839 --> 00:14:26,399
for the cygwin community

00:14:23,360 --> 00:14:27,680
who use it on windows um and so the fact

00:14:26,399 --> 00:14:29,600
that there are a bunch of people trying

00:14:27,680 --> 00:14:45,839
to use new lib on embedded systems

00:14:29,600 --> 00:14:45,839
is a happy accident

00:14:48,079 --> 00:14:52,240
is that working again yes yeah you're

00:14:51,120 --> 00:14:54,240
back

00:14:52,240 --> 00:14:55,519
i don't understand what's going on in

00:14:54,240 --> 00:14:59,360
any case um so

00:14:55,519 --> 00:15:00,639
i forked uh new lib included

00:14:59,360 --> 00:15:02,240
and that's been going on for a little

00:15:00,639 --> 00:15:03,839
more than a year i wanted to give a

00:15:02,240 --> 00:15:06,000
short update in what i've been doing

00:15:03,839 --> 00:15:08,399
here

00:15:06,000 --> 00:15:11,199
uh so picolipsey is a c library

00:15:08,399 --> 00:15:12,639
explicitly designed for embedded systems

00:15:11,199 --> 00:15:15,199
it doesn't have any operating system

00:15:12,639 --> 00:15:16,720
assumptions it's based on new live and

00:15:15,199 --> 00:15:18,880
avr libc code

00:15:16,720 --> 00:15:20,480
it's all bsd licensed not my favorite

00:15:18,880 --> 00:15:21,920
license but it's very popular in the

00:15:20,480 --> 00:15:23,760
embedded space

00:15:21,920 --> 00:15:25,120
and i kind of cleaned out all of the

00:15:23,760 --> 00:15:27,680
non-bsd license

00:15:25,120 --> 00:15:29,279
code in nulib so that it's really clear

00:15:27,680 --> 00:15:30,880
what the providence of all the code in

00:15:29,279 --> 00:15:32,480
picolipse is and what the licensing

00:15:30,880 --> 00:15:34,399
situation is and that's made a bunch of

00:15:32,480 --> 00:15:36,560
people pretty happy

00:15:34,399 --> 00:15:37,839
i've replaced the build system i don't

00:15:36,560 --> 00:15:40,480
know how many of you have played with

00:15:37,839 --> 00:15:42,639
the maison build system uh but it's

00:15:40,480 --> 00:15:43,759
it's pretty useful in this environment

00:15:42,639 --> 00:15:45,440
because

00:15:43,759 --> 00:15:47,199
one of the things auto tools spends a

00:15:45,440 --> 00:15:49,600
lot of time is is running shell scripts

00:15:47,199 --> 00:15:53,360
and mason doesn't do that at all

00:15:49,600 --> 00:15:55,680
so i'm building currently uh 240

00:15:53,360 --> 00:15:58,959
different variants of the library

00:15:55,680 --> 00:16:01,120
in the ci system which compiles um

00:15:58,959 --> 00:16:02,560
which compiles some 13 million source

00:16:01,120 --> 00:16:05,680
code files

00:16:02,560 --> 00:16:09,040
and that builds in about 40 minutes

00:16:05,680 --> 00:16:10,639
i would hate to see what what auto tools

00:16:09,040 --> 00:16:12,880
would do to that

00:16:10,639 --> 00:16:14,720
other big changes is it uses the native

00:16:12,880 --> 00:16:16,240
thread local storage support available

00:16:14,720 --> 00:16:18,320
in gcc

00:16:16,240 --> 00:16:20,000
and as a result one of the changes

00:16:18,320 --> 00:16:20,800
that's happened in the last year to the

00:16:20,000 --> 00:16:23,600
arm that

00:16:20,800 --> 00:16:26,079
the bare metal arm compiler in debian is

00:16:23,600 --> 00:16:27,680
that we've enabled the tls support there

00:16:26,079 --> 00:16:29,519
um if you're not using it it should have

00:16:27,680 --> 00:16:30,959
no effect uh but it does mean that you

00:16:29,519 --> 00:16:33,680
can use it now

00:16:30,959 --> 00:16:35,680
um and that gives you on on processors

00:16:33,680 --> 00:16:38,399
with actual native uh register support

00:16:35,680 --> 00:16:41,279
for tls it gives you register level

00:16:38,399 --> 00:16:43,600
tls support now which is pretty cool on

00:16:41,279 --> 00:16:46,000
risk five risk five the abi actually has

00:16:43,600 --> 00:16:48,240
a thread local storage pointer um and so

00:16:46,000 --> 00:16:50,079
thread local variables on risk five are

00:16:48,240 --> 00:16:51,839
are actually more efficient than global

00:16:50,079 --> 00:16:53,680
variables now uh because the thread

00:16:51,839 --> 00:16:57,440
local storage accesses

00:16:53,680 --> 00:16:59,519
reference to a a register instead of

00:16:57,440 --> 00:17:01,040
having to construct addresses from

00:16:59,519 --> 00:17:02,880
constants

00:17:01,040 --> 00:17:04,400
um and and the other thing that i did to

00:17:02,880 --> 00:17:06,240
pico picolipsey which i know is a

00:17:04,400 --> 00:17:06,799
shocking addition is i added a bunch of

00:17:06,240 --> 00:17:09,520
testing

00:17:06,799 --> 00:17:11,039
infrastructure new lib had a bunch of

00:17:09,520 --> 00:17:13,199
testing code

00:17:11,039 --> 00:17:15,280
but it didn't work and it was horribly

00:17:13,199 --> 00:17:17,520
broken and it clearly hadn't been run

00:17:15,280 --> 00:17:18,480
in at least 10 years probably more than

00:17:17,520 --> 00:17:20,400
that

00:17:18,480 --> 00:17:21,679
so i fixed all the testing code that was

00:17:20,400 --> 00:17:24,720
in nulib

00:17:21,679 --> 00:17:26,079
and now it runs in the ci system and you

00:17:24,720 --> 00:17:29,919
can go to the

00:17:26,079 --> 00:17:32,240
you can go to the github mirror of

00:17:29,919 --> 00:17:34,080
picolipsi's source code repository and

00:17:32,240 --> 00:17:36,240
see that it's running

00:17:34,080 --> 00:17:38,880
all those variants and and coming up

00:17:36,240 --> 00:17:42,240
with with good results

00:17:38,880 --> 00:17:44,160
to keep the system working let's see

00:17:42,240 --> 00:17:46,080
uh so recently what i've been focused on

00:17:44,160 --> 00:17:48,880
in picolipse is a bunch of

00:17:46,080 --> 00:17:50,400
math library bug fixing the testing

00:17:48,880 --> 00:17:53,520
uncovered a bunch of errors

00:17:50,400 --> 00:17:56,640
so the tests actually run against

00:17:53,520 --> 00:18:00,640
picolipsey on

00:17:56,640 --> 00:18:03,200
risk 5 and arms 32 and arm 64.

00:18:00,640 --> 00:18:05,120
and it also runs you can compile the

00:18:03,200 --> 00:18:05,600
library for testing purposes on the

00:18:05,120 --> 00:18:08,240
native

00:18:05,600 --> 00:18:09,200
architecture and so i run the math

00:18:08,240 --> 00:18:12,799
testing

00:18:09,200 --> 00:18:15,039
on both picolipsi and glibc

00:18:12,799 --> 00:18:16,320
and the goal is to make picolipsey match

00:18:15,039 --> 00:18:18,160
glib c

00:18:16,320 --> 00:18:20,400
i just discovered today a place where

00:18:18,160 --> 00:18:23,360
that's going to be hard

00:18:20,400 --> 00:18:24,559
but it identified a whole pile of minor

00:18:23,360 --> 00:18:26,480
errors

00:18:24,559 --> 00:18:29,039
one of the things i discovered was that

00:18:26,480 --> 00:18:30,880
the fancy new math code that arm added a

00:18:29,039 --> 00:18:33,120
couple years to go to new lib

00:18:30,880 --> 00:18:34,640
assumes that the fused multiply add

00:18:33,120 --> 00:18:36,240
doesn't drop precision in the middle of

00:18:34,640 --> 00:18:38,559
the operation

00:18:36,240 --> 00:18:40,960
and it misguessed which machines had

00:18:38,559 --> 00:18:43,039
that had that magic operation

00:18:40,960 --> 00:18:46,000
and so a bunch of the math functions

00:18:43,039 --> 00:18:48,720
were just getting wrong answers

00:18:46,000 --> 00:18:50,640
another thing i did this year was i

00:18:48,720 --> 00:18:52,720
found some recent research in

00:18:50,640 --> 00:18:55,360
in printf and scanf support for floating

00:18:52,720 --> 00:18:55,360
point numbers

00:18:55,520 --> 00:18:59,679
and so now picolipsey has an exact

00:18:57,919 --> 00:19:00,559
printf and scanf implementation that

00:18:59,679 --> 00:19:02,880
doesn't do any

00:19:00,559 --> 00:19:04,799
memory allocation which i think is

00:19:02,880 --> 00:19:08,880
unique in the libsy space

00:19:04,799 --> 00:19:10,720
uh glibc uh nulib they all have

00:19:08,880 --> 00:19:12,400
arbitrary precision math packages that

00:19:10,720 --> 00:19:14,000
do a bunch of allocation to do this

00:19:12,400 --> 00:19:16,559
operation

00:19:14,000 --> 00:19:18,400
and in an embedded environment malik is

00:19:16,559 --> 00:19:20,880
pretty hard to support

00:19:18,400 --> 00:19:21,760
so it's nice to have exact floating

00:19:20,880 --> 00:19:23,440
point math

00:19:21,760 --> 00:19:24,960
of floating point input and output

00:19:23,440 --> 00:19:26,480
without that

00:19:24,960 --> 00:19:28,320
another thing that i've spent a bunch of

00:19:26,480 --> 00:19:30,720
time doing is improving

00:19:28,320 --> 00:19:32,960
kind of the low level embedded support

00:19:30,720 --> 00:19:35,840
especially on arm processors

00:19:32,960 --> 00:19:37,520
and on risk five processors so you can

00:19:35,840 --> 00:19:39,200
go look to picolipsey if you want to

00:19:37,520 --> 00:19:41,600
learn how to do embedded metal

00:19:39,200 --> 00:19:42,400
embedded bare metal application

00:19:41,600 --> 00:19:45,120
development on an

00:19:42,400 --> 00:19:46,559
arm or risk 5 processor picolipsi

00:19:45,120 --> 00:19:48,000
actually contains all the source code

00:19:46,559 --> 00:19:50,720
necessary to get the

00:19:48,000 --> 00:19:53,120
processor out of out of its startup

00:19:50,720 --> 00:19:55,120
phase and get the co-processors enabled

00:19:53,120 --> 00:19:57,120
and get interrupts vectored

00:19:55,120 --> 00:19:58,880
so you can figure out how to build an

00:19:57,120 --> 00:20:00,480
application without having to learn a

00:19:58,880 --> 00:20:01,760
huge amount of information about your

00:20:00,480 --> 00:20:04,880
processor

00:20:01,760 --> 00:20:06,080
right up front and so from a or new

00:20:04,880 --> 00:20:07,919
developer perspective

00:20:06,080 --> 00:20:09,200
i think picolipsey should help people

00:20:07,919 --> 00:20:13,840
learn how to do this

00:20:09,200 --> 00:20:16,720
it kind of gets you to the avr

00:20:13,840 --> 00:20:17,840
state where if you download avr gcc and

00:20:16,720 --> 00:20:19,200
avr libc

00:20:17,840 --> 00:20:21,200
you can just compile and run

00:20:19,200 --> 00:20:24,159
applications really easily on

00:20:21,200 --> 00:20:26,000
the bid avr processors bought on arm

00:20:24,159 --> 00:20:27,600
processors and risk five processors

00:20:26,000 --> 00:20:29,039
there's a huge amount you have to learn

00:20:27,600 --> 00:20:29,760
before you can get anything to run at

00:20:29,039 --> 00:20:32,000
all

00:20:29,760 --> 00:20:34,240
um and so picolipse is trying to kind of

00:20:32,000 --> 00:20:35,600
fill some of the gaps there by by

00:20:34,240 --> 00:20:38,400
showing you what the low level support

00:20:35,600 --> 00:20:39,120
needs to be like um we're actually using

00:20:38,400 --> 00:20:41,919
this stuff

00:20:39,120 --> 00:20:43,679
in altas on for our rocketry flight

00:20:41,919 --> 00:20:45,919
stuff now

00:20:43,679 --> 00:20:47,600
so it's kind of got a real a real world

00:20:45,919 --> 00:20:49,120
use case to know that it actually does

00:20:47,600 --> 00:20:52,400
work

00:20:49,120 --> 00:20:54,960
so that's that's been kind of fun uh

00:20:52,400 --> 00:20:55,679
ongoing work i'm actually working on

00:20:54,960 --> 00:20:59,280
improving

00:20:55,679 --> 00:21:02,640
the the lightweight malik implementation

00:20:59,280 --> 00:21:03,919
uh to make it use the heap a little more

00:21:02,640 --> 00:21:06,080
efficiently

00:21:03,919 --> 00:21:07,200
have fewer error fewer weird air

00:21:06,080 --> 00:21:10,720
conditions

00:21:07,200 --> 00:21:12,640
and simplify the the implementation

00:21:10,720 --> 00:21:14,000
so that network i'm planning on actually

00:21:12,640 --> 00:21:15,280
getting reviewed by the new lib

00:21:14,000 --> 00:21:17,280
developers because they've been

00:21:15,280 --> 00:21:18,880
helping me review review a bunch of the

00:21:17,280 --> 00:21:20,080
code if i'm willing to port it back to

00:21:18,880 --> 00:21:21,440
new lib

00:21:20,080 --> 00:21:23,679
uh another thing that i did is i

00:21:21,440 --> 00:21:25,280
actually got the the library compiling

00:21:23,679 --> 00:21:28,000
with clang

00:21:25,280 --> 00:21:29,919
not because i'm a fan of uh non-free

00:21:28,000 --> 00:21:33,679
licenses like clang

00:21:29,919 --> 00:21:35,520
doesn't quite want to use or non-share

00:21:33,679 --> 00:21:38,159
like licenses anyhow

00:21:35,520 --> 00:21:40,159
but clang has a lot of additional error

00:21:38,159 --> 00:21:42,000
validation and testing

00:21:40,159 --> 00:21:43,600
stuff and it checks different aspects of

00:21:42,000 --> 00:21:46,640
your programs

00:21:43,600 --> 00:21:48,320
so using clang uncovered half a dozen

00:21:46,640 --> 00:21:49,360
bugs in the library one of them pretty

00:21:48,320 --> 00:21:51,840
serious

00:21:49,360 --> 00:21:53,919
was actually a bug that clang caught the

00:21:51,840 --> 00:21:54,640
first time i ran it it said this line of

00:21:53,919 --> 00:21:57,760
code looks

00:21:54,640 --> 00:21:59,520
very suspicious to me i bet that's wrong

00:21:57,760 --> 00:22:01,679
um and that bug had been there since

00:21:59,520 --> 00:22:03,360
at least 2000 so that's a 20 year old

00:22:01,679 --> 00:22:05,280
bug that i found just by running a

00:22:03,360 --> 00:22:07,200
different compiler so

00:22:05,280 --> 00:22:08,320
if you have a project that has really

00:22:07,200 --> 00:22:10,640
old code

00:22:08,320 --> 00:22:12,000
or even new code i can strongly

00:22:10,640 --> 00:22:14,960
recommend running multiple

00:22:12,000 --> 00:22:15,919
compilers over it seeing what they say

00:22:14,960 --> 00:22:17,600
also found

00:22:15,919 --> 00:22:19,760
a number of errors again in the math

00:22:17,600 --> 00:22:22,159
library where it was

00:22:19,760 --> 00:22:24,159
not really errors but kind of

00:22:22,159 --> 00:22:25,280
inefficiencies where the math library

00:22:24,159 --> 00:22:27,200
was

00:22:25,280 --> 00:22:28,960
casting between floats and doubles with

00:22:27,200 --> 00:22:32,240
the implicit coercions that c

00:22:28,960 --> 00:22:34,720
so helpfully uses and so on a

00:22:32,240 --> 00:22:37,760
processor with a hardware floating point

00:22:34,720 --> 00:22:39,360
and no hardware double precisions

00:22:37,760 --> 00:22:41,120
you'd call these functions and all of a

00:22:39,360 --> 00:22:43,520
sudden you'd link in a ton of double

00:22:41,120 --> 00:22:44,880
precision software floating point code

00:22:43,520 --> 00:22:46,559
that you didn't want to because of the

00:22:44,880 --> 00:22:47,280
implicit coercions going on so that was

00:22:46,559 --> 00:22:50,880
fun

00:22:47,280 --> 00:22:53,840
thank you clang status

00:22:50,880 --> 00:22:56,080
it's currently in unstable it was

00:22:53,840 --> 00:22:58,240
difficult to get in unstable because

00:22:56,080 --> 00:22:59,679
uh just because uh going through the new

00:22:58,240 --> 00:23:01,840
queue was complicated with a package

00:22:59,679 --> 00:23:05,280
with 85 licenses

00:23:01,840 --> 00:23:08,320
um that was an adventure um

00:23:05,280 --> 00:23:11,679
yeah oh my

00:23:08,320 --> 00:23:13,600
it has a debian compliance a machine

00:23:11,679 --> 00:23:15,600
readable copyright file now

00:23:13,600 --> 00:23:17,600
uh whereas the new lib code did not and

00:23:15,600 --> 00:23:20,480
i think that frightens some people

00:23:17,600 --> 00:23:21,520
um there are currently arm 32 risk 5 and

00:23:20,480 --> 00:23:24,320
lx 106

00:23:21,520 --> 00:23:25,280
packages in the archive um i haven't

00:23:24,320 --> 00:23:29,520
uploaded

00:23:25,280 --> 00:23:31,520
arch 64. um it's i'm using the art 64

00:23:29,520 --> 00:23:32,400
linux gnu cross compiler which isn't

00:23:31,520 --> 00:23:34,000
exactly

00:23:32,400 --> 00:23:36,000
designed for embedded systems but it

00:23:34,000 --> 00:23:37,679
works okay

00:23:36,000 --> 00:23:39,679
if anybody's interested in embedded

00:23:37,679 --> 00:23:40,960
64-bit arm development i'd love to hear

00:23:39,679 --> 00:23:43,600
from you

00:23:40,960 --> 00:23:45,760
and figure out whether whether it's it

00:23:43,600 --> 00:23:48,240
would be useful for me to upload that

00:23:45,760 --> 00:23:50,159
i'm using it as another 64-bit target

00:23:48,240 --> 00:23:51,600
for doing testing with

00:23:50,159 --> 00:23:53,600
because otherwise all i have is risk

00:23:51,600 --> 00:23:54,960
five which is a useful target to test on

00:23:53,600 --> 00:23:58,400
especially for me

00:23:54,960 --> 00:24:00,559
but it's nice to have more targets uh

00:23:58,400 --> 00:24:02,000
let's see one of the big problems that

00:24:00,559 --> 00:24:05,600
we have with with

00:24:02,000 --> 00:24:09,600
libsy in the embedded space

00:24:05,600 --> 00:24:11,679
is that gcc includes lib student c plus

00:24:09,600 --> 00:24:13,919
plus it libs did it c plus plus has to

00:24:11,679 --> 00:24:15,520
be built against libsy because it has i

00:24:13,919 --> 00:24:17,440
o functions

00:24:15,520 --> 00:24:18,880
which means that right now in the

00:24:17,440 --> 00:24:20,880
archive there are lipstick

00:24:18,880 --> 00:24:22,640
c plus plus versions for all of these

00:24:20,880 --> 00:24:25,360
targets but they all use

00:24:22,640 --> 00:24:27,200
nulib which as far as i know nobody uses

00:24:25,360 --> 00:24:29,360
for embedded application development

00:24:27,200 --> 00:24:30,880
the this you know usually the choice is

00:24:29,360 --> 00:24:32,960
new libnano

00:24:30,880 --> 00:24:33,919
and that means that you can't do lib uh

00:24:32,960 --> 00:24:36,080
you can't do c

00:24:33,919 --> 00:24:38,000
plus development with embedded systems

00:24:36,080 --> 00:24:38,559
uh using the debian packages right now

00:24:38,000 --> 00:24:41,520
so

00:24:38,559 --> 00:24:42,400
i would love to know if um if i need to

00:24:41,520 --> 00:24:44,559
provide

00:24:42,400 --> 00:24:46,080
um lipstick c plus plus that's

00:24:44,559 --> 00:24:46,799
compatible with all the different lip

00:24:46,080 --> 00:24:49,440
sees which

00:24:46,799 --> 00:24:49,919
basically means building lipstick plus

00:24:49,440 --> 00:24:51,760
plus

00:24:49,919 --> 00:24:53,200
against every lipsy and uploading

00:24:51,760 --> 00:24:55,919
separate packages

00:24:53,200 --> 00:24:57,200
uh which basically means building gcc a

00:24:55,919 --> 00:25:00,559
million times

00:24:57,200 --> 00:25:02,640
or if i can just abandon uh abandon the

00:25:00,559 --> 00:25:05,039
the older new lib and new lib nano stuff

00:25:02,640 --> 00:25:06,080
and and go fix gcc to work with pika

00:25:05,039 --> 00:25:08,960
lipsy

00:25:06,080 --> 00:25:09,360
um and just upload that so that's kind

00:25:08,960 --> 00:25:12,000
of like

00:25:09,360 --> 00:25:13,120
the question that i have right now i

00:25:12,000 --> 00:25:14,880
don't do

00:25:13,120 --> 00:25:16,640
c plus plus development on an embedded

00:25:14,880 --> 00:25:18,000
system so i'm not

00:25:16,640 --> 00:25:19,679
probably the best one to answer the

00:25:18,000 --> 00:25:21,600
question on what we should do there

00:25:19,679 --> 00:25:23,200
but if anybody knows of anybody who

00:25:21,600 --> 00:25:24,159
wants this functionality i'd love to

00:25:23,200 --> 00:25:26,880
know what your

00:25:24,159 --> 00:25:30,159
what your thoughts are and that's what

00:25:26,880 --> 00:25:31,600
i've got on pico libsy

00:25:30,159 --> 00:25:33,440
see did we get questions in the ether

00:25:31,600 --> 00:25:34,880
pad

00:25:33,440 --> 00:25:38,159
yeah i don't know exactly how that's

00:25:34,880 --> 00:25:38,159
supposed to work um

00:25:38,880 --> 00:25:43,039
i will i will say the questions okay

00:25:41,520 --> 00:25:44,400
yeah no i'm reading i'm reading the

00:25:43,039 --> 00:25:46,320
ether pad right now which looks like a

00:25:44,400 --> 00:25:49,039
great one okay questions here

00:25:46,320 --> 00:25:49,039
yeah well

00:25:50,000 --> 00:25:55,200
yes i am i'm i'm

00:25:53,520 --> 00:25:57,600
the nice thing about picolipse is that

00:25:55,200 --> 00:25:59,039
it's really a pure cross-compilation

00:25:57,600 --> 00:26:00,799
environment

00:25:59,039 --> 00:26:04,480
and so i really don't need to do i

00:26:00,799 --> 00:26:06,720
really don't need arm 64 boxes to do

00:26:04,480 --> 00:26:08,000
native builds because nothing is ever

00:26:06,720 --> 00:26:09,679
built native i'm using the cross

00:26:08,000 --> 00:26:11,840
compilers for everything

00:26:09,679 --> 00:26:13,679
i'm also the primary maintainer for the

00:26:11,840 --> 00:26:16,559
risc 5 cross compiler

00:26:13,679 --> 00:26:17,279
in debian and i that right now is

00:26:16,559 --> 00:26:19,679
tracking

00:26:17,279 --> 00:26:22,240
uh was is tracking what sci-fi was

00:26:19,679 --> 00:26:25,520
shipping for their sdks

00:26:22,240 --> 00:26:26,320
because that helps me a lot um we are

00:26:25,520 --> 00:26:30,880
moving

00:26:26,320 --> 00:26:34,320
that compiler from uh gcc 8.3 to gcc 10

00:26:30,880 --> 00:26:35,520
um in a week or so and so that's going

00:26:34,320 --> 00:26:39,840
to be a transition for

00:26:35,520 --> 00:26:39,840
risk five

00:26:42,320 --> 00:26:47,440
okay um let's see

00:26:48,960 --> 00:26:53,440
thanks and thanks for the presentation

00:26:52,480 --> 00:26:55,200
keith that's

00:26:53,440 --> 00:26:57,200
very cool and of course i'm thrilled

00:26:55,200 --> 00:26:58,559
because i get to benefit from that work

00:26:57,200 --> 00:27:00,799
directly and our joint

00:26:58,559 --> 00:27:02,000
rocket trailer related stuff andreas i

00:27:00,799 --> 00:27:06,240
see that you're in here did you have

00:27:02,000 --> 00:27:08,640
something you'd like to contribute

00:27:06,240 --> 00:27:10,320
um really i actually wanted to observe

00:27:08,640 --> 00:27:14,240
your buff as usual

00:27:10,320 --> 00:27:16,000
and um wanted to

00:27:14,240 --> 00:27:17,679
ask some question about this meta

00:27:16,000 --> 00:27:20,320
package issue which is

00:27:17,679 --> 00:27:22,159
definitely not the topic of the current

00:27:20,320 --> 00:27:25,279
talk because all these

00:27:22,159 --> 00:27:26,480
electronically detailed stuff it's it's

00:27:25,279 --> 00:27:29,520
way beyond what

00:27:26,480 --> 00:27:31,039
what i'm doing yeah for those who might

00:27:29,520 --> 00:27:31,600
be watching the stream and don't know

00:27:31,039 --> 00:27:34,080
andreas

00:27:31,600 --> 00:27:34,640
is one of the folks that is behind some

00:27:34,080 --> 00:27:36,799
of the

00:27:34,640 --> 00:27:37,679
meta package things that exist in debian

00:27:36,799 --> 00:27:40,480
and there is

00:27:37,679 --> 00:27:41,360
a debian science electronics package i

00:27:40,480 --> 00:27:43,840
guess it's called

00:27:41,360 --> 00:27:45,679
and we have struggled in the past to

00:27:43,840 --> 00:27:46,320
sort of come up with the right way to

00:27:45,679 --> 00:27:48,240
manage

00:27:46,320 --> 00:27:50,240
the sort of contents of that meta

00:27:48,240 --> 00:27:51,919
package versus what the electronics

00:27:50,240 --> 00:27:53,039
team's working on and so on

00:27:51,919 --> 00:27:55,039
it's really good to see you again it's

00:27:53,039 --> 00:27:56,720
been a while um i didn't get to that

00:27:55,039 --> 00:27:59,039
conf last year so it has been

00:27:56,720 --> 00:27:59,919
way too long i missed you one of the big

00:27:59,039 --> 00:28:03,200
missings

00:27:59,919 --> 00:28:04,399
last year what's wrong with you yeah

00:28:03,200 --> 00:28:06,320
yeah well you know now that i'm

00:28:04,399 --> 00:28:07,840
semi-retired and don't have a corporate

00:28:06,320 --> 00:28:10,480
travel budget things are different than

00:28:07,840 --> 00:28:12,320
they used to be so

00:28:10,480 --> 00:28:13,760
in any case really good to see you and

00:28:12,320 --> 00:28:14,640
um that's a that would be a great

00:28:13,760 --> 00:28:17,360
conversation

00:28:14,640 --> 00:28:18,960
uh if you want to bring that up on one

00:28:17,360 --> 00:28:20,000
of the mailing lists we could take it

00:28:18,960 --> 00:28:21,520
from there or

00:28:20,000 --> 00:28:23,440
reach out to me directly and i'll be

00:28:21,520 --> 00:28:25,440
happy to try and pull some people in to

00:28:23,440 --> 00:28:30,320
to help if if that would help make

00:28:25,440 --> 00:28:31,760
things go forward

00:28:30,320 --> 00:28:34,080
now let's see we have somebody that

00:28:31,760 --> 00:28:35,600
wanted to talk about basically i'm sorry

00:28:34,080 --> 00:28:36,080
i'm not very good at figuring out who's

00:28:35,600 --> 00:28:39,679
who

00:28:36,080 --> 00:28:42,840
in the pad we need to get you the link

00:28:39,679 --> 00:28:45,440
so that you can join in and talk to us

00:28:42,840 --> 00:28:46,960
um

00:28:45,440 --> 00:28:48,559
i'm trying to figure out how to do that

00:28:46,960 --> 00:28:50,640
if somebody else wants to beat me to it

00:28:48,559 --> 00:28:52,720
feel free

00:28:50,640 --> 00:28:55,039
yes i could share the link to the jits

00:28:52,720 --> 00:28:59,840
room through the other part

00:28:55,039 --> 00:28:59,840
great thank you

00:29:07,440 --> 00:29:13,840
but to fill the gap now it's nice that

00:29:10,159 --> 00:29:13,840
we are made to this step conf

00:29:14,000 --> 00:29:17,679
yes because i i have to admit that if

00:29:16,799 --> 00:29:19,679
this had been

00:29:17,679 --> 00:29:21,600
a real deb conf there's a very

00:29:19,679 --> 00:29:23,120
significant chance that i would have not

00:29:21,600 --> 00:29:25,039
been there this year so

00:29:23,120 --> 00:29:27,840
it's kind of cool um trying out this

00:29:25,039 --> 00:29:30,399
virtual thing it obviously is different

00:29:27,840 --> 00:29:31,679
and uh it makes it very clear that if we

00:29:30,399 --> 00:29:33,440
wanted to

00:29:31,679 --> 00:29:34,960
uh have a really great buff in the

00:29:33,440 --> 00:29:36,880
future we'll have to work a little bit

00:29:34,960 --> 00:29:39,039
harder at planning in advance

00:29:36,880 --> 00:29:40,320
but that's the way things go ah there

00:29:39,039 --> 00:29:42,720
you are

00:29:40,320 --> 00:29:42,720
hello

00:29:47,760 --> 00:29:51,760
yeah i agree coroner teached us

00:29:50,159 --> 00:29:53,760
something that we can meet

00:29:51,760 --> 00:29:56,320
way more frequently than than class on

00:29:53,760 --> 00:29:58,559
debkanth

00:29:56,320 --> 00:30:00,080
yes perhaps uh carl would you like to

00:29:58,559 --> 00:30:02,480
jump in and talk about what you wanted

00:30:00,080 --> 00:30:09,840
to tell us about

00:30:02,480 --> 00:30:09,840
it looks like he's muted

00:30:10,000 --> 00:30:13,600
oh could you repeat again please

00:30:18,399 --> 00:30:22,320
so i see carl joined us in the jitsi

00:30:20,480 --> 00:30:24,000
room but it appears that he's muted at

00:30:22,320 --> 00:30:25,919
the moment and his video just turned off

00:30:24,000 --> 00:30:29,360
so oh there it's coming back

00:30:25,919 --> 00:30:32,960
it's coming back slowly all right

00:30:29,360 --> 00:30:36,480
radio check yep gotcha

00:30:32,960 --> 00:30:39,600
all right do i have the floor you do

00:30:36,480 --> 00:30:42,640
excellent here we go so this is not

00:30:39,600 --> 00:30:43,039
my project but i hanging out with the

00:30:42,640 --> 00:30:46,399
guy

00:30:43,039 --> 00:30:49,120
tim aka mithro who's it is and i

00:30:46,399 --> 00:30:50,880
i can sort of channel him sadly he

00:30:49,120 --> 00:30:52,080
wasn't up to joining us right now

00:30:50,880 --> 00:30:53,360
otherwise you get it straight from the

00:30:52,080 --> 00:30:54,880
horse's mouth

00:30:53,360 --> 00:30:56,480
well we're very we're very pleased to

00:30:54,880 --> 00:30:57,919
have you here thanks for joining in

00:30:56,480 --> 00:30:59,279
uh keith and i were talking this morning

00:30:57,919 --> 00:31:01,840
about how it would have been great if we

00:30:59,279 --> 00:31:03,440
could have roped tim into participating

00:31:01,840 --> 00:31:05,279
okay so so you know about this that's

00:31:03,440 --> 00:31:06,559
good because it's a little bit

00:31:05,279 --> 00:31:09,760
unbelievable

00:31:06,559 --> 00:31:11,519
um tim does a lot of crazy stuff

00:31:09,760 --> 00:31:13,360
he is very passionate about the same

00:31:11,519 --> 00:31:16,880
things we are and uh so

00:31:13,360 --> 00:31:18,799
this this is a thing uh i would say the

00:31:16,880 --> 00:31:22,720
short story is

00:31:18,799 --> 00:31:25,120
google and a ic manufacturing lab

00:31:22,720 --> 00:31:26,320
in the united states have worked out a

00:31:25,120 --> 00:31:29,440
deal

00:31:26,320 --> 00:31:32,320
where uh

00:31:29,440 --> 00:31:34,799
people like you and i well not to me

00:31:32,320 --> 00:31:35,919
because i am not qualified to engage

00:31:34,799 --> 00:31:39,200
this project

00:31:35,919 --> 00:31:41,279
and and sadly most of us aren't but

00:31:39,200 --> 00:31:43,039
maybe one or two of us are or we know

00:31:41,279 --> 00:31:46,080
someone who is which is

00:31:43,039 --> 00:31:50,080
submit an asic design

00:31:46,080 --> 00:31:53,760
and a few months later get back 200

00:31:50,080 --> 00:31:55,600
chips for no monetary cost

00:31:53,760 --> 00:31:57,840
and i say monetary because we all know

00:31:55,600 --> 00:31:58,399
that you know web 2.0 all the things

00:31:57,840 --> 00:32:00,080
well

00:31:58,399 --> 00:32:02,320
the customer is the product et cetera et

00:32:00,080 --> 00:32:04,559
cetera and and the catcher is

00:32:02,320 --> 00:32:05,600
your design has to be open you put it on

00:32:04,559 --> 00:32:09,120
github

00:32:05,600 --> 00:32:11,840
you let everybody see it google sees it

00:32:09,120 --> 00:32:13,200
intel sees it the chinese see it

00:32:11,840 --> 00:32:14,720
everybody sees it

00:32:13,200 --> 00:32:16,799
and so you know if you have a problem

00:32:14,720 --> 00:32:17,440
with that well then uh this is not for

00:32:16,799 --> 00:32:20,640
you

00:32:17,440 --> 00:32:22,799
but if you've like i've got this

00:32:20,640 --> 00:32:24,799
thing and it would be kind of cool if i

00:32:22,799 --> 00:32:26,559
had an asic

00:32:24,799 --> 00:32:29,200
and i don't really care if anybody else

00:32:26,559 --> 00:32:30,320
sees my thing which you know that that's

00:32:29,200 --> 00:32:32,159
kind of

00:32:30,320 --> 00:32:33,760
that's what a lot of us are about like

00:32:32,159 --> 00:32:35,600
if you know i i

00:32:33,760 --> 00:32:38,640
love putting my source code out there to

00:32:35,600 --> 00:32:40,399
be critiqued and ridiculed and used and

00:32:38,640 --> 00:32:42,559
and forked and patched and all the

00:32:40,399 --> 00:32:46,320
things and so that's great so

00:32:42,559 --> 00:32:49,600
uh so here we are um there are

00:32:46,320 --> 00:32:52,320
five manufacturing runs scheduled uh

00:32:49,600 --> 00:32:53,200
the first one is get your design in i

00:32:52,320 --> 00:32:55,440
believe by

00:32:53,200 --> 00:32:57,679
november i posted a link to the fawzi

00:32:55,440 --> 00:32:59,600
foundations right up about this you can

00:32:57,679 --> 00:33:03,200
get all the details there etc etc

00:32:59,600 --> 00:33:06,880
uh so uh there is room for

00:33:03,200 --> 00:33:10,480
40 designs uh the way this works

00:33:06,880 --> 00:33:11,440
is oh so you know it now because this is

00:33:10,480 --> 00:33:14,399
not my gig i

00:33:11,440 --> 00:33:17,120
fall short on the terms the the

00:33:14,399 --> 00:33:20,159
expensive part of asic manufacturing

00:33:17,120 --> 00:33:23,679
is having the little piece of metal

00:33:20,159 --> 00:33:27,360
carved out that the light shines through

00:33:23,679 --> 00:33:28,880
and that pedicure ah yeah people know

00:33:27,360 --> 00:33:32,000
what i'm talking about great

00:33:28,880 --> 00:33:34,240
um because i don't uh so yeah so there's

00:33:32,000 --> 00:33:36,480
room on that thing for 40 designs

00:33:34,240 --> 00:33:37,360
and then they will like imprint it

00:33:36,480 --> 00:33:41,200
across

00:33:37,360 --> 00:33:44,159
a few pieces of silicon

00:33:41,200 --> 00:33:45,279
apparently a few hundred times that that

00:33:44,159 --> 00:33:46,799
all makes sense

00:33:45,279 --> 00:33:48,159
and then i don't actually know what they

00:33:46,799 --> 00:33:49,919
do with that thing they probably stick

00:33:48,159 --> 00:33:51,600
it on a shelf somewhere

00:33:49,919 --> 00:33:53,200
and who knows what but anyway and then

00:33:51,600 --> 00:33:54,880
these little pieces of silicon go

00:33:53,200 --> 00:33:56,159
through the little manufacturing process

00:33:54,880 --> 00:33:58,720
and a bunch get chucked out

00:33:56,159 --> 00:34:00,320
for defects etc etc and then they slice

00:33:58,720 --> 00:34:01,200
them up and they shove them in packages

00:34:00,320 --> 00:34:03,679
and they attach

00:34:01,200 --> 00:34:05,200
little wires to them and shove them in a

00:34:03,679 --> 00:34:06,080
pack and then ship them out to you and

00:34:05,200 --> 00:34:08,560
there you go and then

00:34:06,080 --> 00:34:10,000
you've got a thing uh and so there's

00:34:08,560 --> 00:34:11,200
again there's one at the end of this

00:34:10,000 --> 00:34:14,960
year and four more

00:34:11,200 --> 00:34:18,000
in 2021 um

00:34:14,960 --> 00:34:19,040
this has been announced at least a month

00:34:18,000 --> 00:34:22,320
ago

00:34:19,040 --> 00:34:23,919
and i'd have no idea if anybody has

00:34:22,320 --> 00:34:27,040
successfully gotten

00:34:23,919 --> 00:34:30,399
one designed through the

00:34:27,040 --> 00:34:34,000
process of will your design

00:34:30,399 --> 00:34:36,720
work in their facility um

00:34:34,000 --> 00:34:37,280
which is this is a big part of this

00:34:36,720 --> 00:34:41,520
project

00:34:37,280 --> 00:34:44,639
etc etc is manufacturing facilities

00:34:41,520 --> 00:34:48,879
have physical restrictions

00:34:44,639 --> 00:34:51,200
yeah there we go those words um

00:34:48,879 --> 00:34:53,040
and one of the things tim did was he

00:34:51,200 --> 00:34:54,800
cracked open

00:34:53,040 --> 00:34:56,159
one of these these what'd you say

00:34:54,800 --> 00:34:59,440
process

00:34:56,159 --> 00:35:01,520
processes yeah yeah so

00:34:59,440 --> 00:35:03,280
i used to i used to manage a team that

00:35:01,520 --> 00:35:05,920
maintained computing and resource

00:35:03,280 --> 00:35:06,560
uh networking resources for a big chunk

00:35:05,920 --> 00:35:08,800
of the

00:35:06,560 --> 00:35:10,400
of old hewlett packard tested

00:35:08,800 --> 00:35:13,040
measurement and

00:35:10,400 --> 00:35:14,800
at that time we did a lot of ic and you

00:35:13,040 --> 00:35:16,640
know asic and fpga

00:35:14,800 --> 00:35:18,400
development stuff actually fpgas were

00:35:16,640 --> 00:35:19,359
brand new at the time but asics were a

00:35:18,400 --> 00:35:21,760
big deal

00:35:19,359 --> 00:35:23,040
and um the the whole sort of the the

00:35:21,760 --> 00:35:23,440
thing i've been concerned about with

00:35:23,040 --> 00:35:25,280
this

00:35:23,440 --> 00:35:27,040
and you know you're you're bringing the

00:35:25,280 --> 00:35:30,800
point up quite succinctly

00:35:27,040 --> 00:35:32,960
is that um going from a good idea to

00:35:30,800 --> 00:35:34,480
implemented design in any given process

00:35:32,960 --> 00:35:37,359
is a bit of a job

00:35:34,480 --> 00:35:39,040
and the the you know there have been a

00:35:37,359 --> 00:35:39,839
lot of improvements made over the years

00:35:39,040 --> 00:35:43,200
in sort of

00:35:39,839 --> 00:35:45,599
how the processes get characterized but

00:35:43,200 --> 00:35:47,280
um it's still kind of a thing so i would

00:35:45,599 --> 00:35:51,920
caution you

00:35:47,280 --> 00:35:54,160
it's it's magic working in this industry

00:35:51,920 --> 00:35:55,760
this is so this is you know this is a

00:35:54,160 --> 00:35:57,760
really amazing opportunity

00:35:55,760 --> 00:35:59,839
and if anybody who happens to be on

00:35:57,760 --> 00:36:00,640
today or you know watches the recording

00:35:59,839 --> 00:36:03,280
of this later

00:36:00,640 --> 00:36:04,400
um hears about this and has a good idea

00:36:03,280 --> 00:36:07,760
and has something you want to

00:36:04,400 --> 00:36:10,839
want to try absolutely go for it but

00:36:07,760 --> 00:36:13,839
so did you tell us which manufacturer it

00:36:10,839 --> 00:36:13,839
was

00:36:14,160 --> 00:36:19,359
river no sky water no which is which lab

00:36:19,920 --> 00:36:24,160
isn't that i i don't know then

00:36:25,119 --> 00:36:31,839
uh let me read the link i posted

00:36:28,400 --> 00:36:34,400
okay i i have not heard

00:36:31,839 --> 00:36:35,520
they're in minnesota if that helps i

00:36:34,400 --> 00:36:36,720
don't know how many are there in

00:36:35,520 --> 00:36:38,960
minnesota

00:36:36,720 --> 00:36:40,000
zero it's it's clearly forwarding to

00:36:38,960 --> 00:36:43,680
something yeah

00:36:40,000 --> 00:36:43,680
i was kind of curious about that

00:36:45,839 --> 00:36:50,560
any tabs it's it's somewhere sky

00:36:48,800 --> 00:36:52,240
something or other

00:36:50,560 --> 00:36:54,480
let's see it's not chrome it would be

00:36:52,240 --> 00:36:58,160
over here in firefox see chrome is for

00:36:54,480 --> 00:36:58,160
jitsi and firefox is just

00:36:58,240 --> 00:37:01,680
ah there we go those guys i totally

00:37:00,960 --> 00:37:04,000
agree with

00:37:01,680 --> 00:37:06,320
chrome for jitsi and firefox for other

00:37:04,000 --> 00:37:06,320
things

00:37:07,040 --> 00:37:11,040
i've been having success with chromium

00:37:08,960 --> 00:37:13,839
with jitsi

00:37:11,040 --> 00:37:14,560
firefox chromium is fine even seen

00:37:13,839 --> 00:37:17,839
working

00:37:14,560 --> 00:37:21,520
at jitsi with chromium on an arm

00:37:17,839 --> 00:37:23,760
64 processor in this

00:37:21,520 --> 00:37:25,520
i'm thoroughly enjoying brave which is

00:37:23,760 --> 00:37:26,079
sort of a community rebuild of the

00:37:25,520 --> 00:37:28,960
chrome

00:37:26,079 --> 00:37:30,079
stuff in without all of the phone home

00:37:28,960 --> 00:37:32,800
things in it and

00:37:30,079 --> 00:37:37,839
for those who haven't stumbled into it

00:37:32,800 --> 00:37:37,839
i'm enjoying it

00:37:38,000 --> 00:37:41,520
i've not completely abandoned firefox

00:37:39,839 --> 00:37:43,040
yet there are a couple plug-ins that i

00:37:41,520 --> 00:37:44,640
sort of depend on that i haven't been

00:37:43,040 --> 00:37:47,920
able to find equivalents for

00:37:44,640 --> 00:37:49,680
but that's life um okay well thanks very

00:37:47,920 --> 00:37:50,800
much for the pointer to that um if you

00:37:49,680 --> 00:37:52,000
have anything else you want me to add

00:37:50,800 --> 00:37:55,040
that's great otherwise

00:37:52,000 --> 00:37:56,880
thanks one more one more uh this is to

00:37:55,040 --> 00:37:59,280
help encourage

00:37:56,880 --> 00:38:00,320
uh participation because a lot of people

00:37:59,280 --> 00:38:02,160
have said

00:38:00,320 --> 00:38:03,520
well that's silly etc etc and i would

00:38:02,160 --> 00:38:06,240
like to point out

00:38:03,520 --> 00:38:08,079
if you can take your asic to your resume

00:38:06,240 --> 00:38:10,079
when you handed it off to

00:38:08,079 --> 00:38:11,760
get an electronics job i think it would

00:38:10,079 --> 00:38:14,960
float to the top of the pack

00:38:11,760 --> 00:38:16,560
you can say yeah i made this so

00:38:14,960 --> 00:38:18,960
i went through the i read through the

00:38:16,560 --> 00:38:21,839
information that that skywater

00:38:18,960 --> 00:38:23,040
produced this is actually a a 20 year

00:38:21,839 --> 00:38:26,160
old fab

00:38:23,040 --> 00:38:30,240
uh that apparently is in the u.s um

00:38:26,160 --> 00:38:33,359
and it's it's a 130 nanometer node so

00:38:30,240 --> 00:38:36,640
so that yeah

00:38:33,359 --> 00:38:39,760
wow kind of bigger than what i'm used to

00:38:36,640 --> 00:38:42,880
but well you know it's an actual

00:38:39,760 --> 00:38:44,880
it's actual fab there's there's

00:38:42,880 --> 00:38:47,359
cool stuff that could be done there yeah

00:38:44,880 --> 00:38:48,800
yeah particularly for freedom loving

00:38:47,359 --> 00:38:50,640
folks who kind of care about

00:38:48,800 --> 00:38:52,160
where their bits and pieces come from

00:38:50,640 --> 00:38:54,640
and what happens to the ip

00:38:52,160 --> 00:38:56,480
this could be quite interesting i mean

00:38:54,640 --> 00:39:00,240
keep in mind we had some pretty cool

00:38:56,480 --> 00:39:02,079
computers in 1990

00:39:00,240 --> 00:39:03,520
whatever this technology was cutting

00:39:02,079 --> 00:39:06,400
edge

00:39:03,520 --> 00:39:07,280
so yes you're not going to make the next

00:39:06,400 --> 00:39:10,960
iphone

00:39:07,280 --> 00:39:14,320
but it's a start it was

00:39:10,960 --> 00:39:17,119
absolutely this was tim evangelizing

00:39:14,320 --> 00:39:19,280
various companies i i was in the room

00:39:17,119 --> 00:39:22,000
with him when he was talking to them

00:39:19,280 --> 00:39:22,320
saying you know look if you if you make

00:39:22,000 --> 00:39:25,119
your

00:39:22,320 --> 00:39:25,520
information open people will critique it

00:39:25,119 --> 00:39:28,800
and

00:39:25,520 --> 00:39:32,720
improve upon it and you will win

00:39:28,800 --> 00:39:36,560
and i i suspect he had that conversation

00:39:32,720 --> 00:39:40,240
20 50 100 times before someone said okay

00:39:36,560 --> 00:39:43,040
we're willing to give this a shot yes

00:39:40,240 --> 00:39:43,440
there's no magic i mean 130 nanometer is

00:39:43,040 --> 00:39:45,839
is

00:39:43,440 --> 00:39:47,440
actually a very easy process uh to

00:39:45,839 --> 00:39:48,800
design for because there isn't there

00:39:47,440 --> 00:39:50,160
aren't a lot of process dependent

00:39:48,800 --> 00:39:52,480
variables there

00:39:50,160 --> 00:39:54,480
so you could put together a lot of very

00:39:52,480 --> 00:39:57,920
credible uh

00:39:54,480 --> 00:39:57,920
things that would just work on it

00:39:58,079 --> 00:40:01,920
it runs it runs at 3.3 volts which is

00:40:00,800 --> 00:40:03,680
pretty awesome

00:40:01,920 --> 00:40:05,760
so you can actually do 3.3 and maybe

00:40:03,680 --> 00:40:07,599
even 5 volt io on that process which

00:40:05,760 --> 00:40:09,119
would be really useful

00:40:07,599 --> 00:40:11,359
one of the challenges we have these days

00:40:09,119 --> 00:40:14,319
with sub 40 nanometer processes

00:40:11,359 --> 00:40:15,760
is i'm sorry it's 1.8 volts or lower

00:40:14,319 --> 00:40:17,839
which really sucks when you're trying to

00:40:15,760 --> 00:40:19,520
connect it to other devices

00:40:17,839 --> 00:40:22,000
so building a system around these chips

00:40:19,520 --> 00:40:24,720
would be much much easier

00:40:22,000 --> 00:40:25,119
yeah i'm i'm be curious to know if they

00:40:24,720 --> 00:40:27,520
have

00:40:25,119 --> 00:40:29,599
if they have um if they have flash

00:40:27,520 --> 00:40:33,280
modules that you can integrate

00:40:29,599 --> 00:40:36,640
uh this sounds

00:40:33,280 --> 00:40:40,160
familiar i know that there's a risk five

00:40:36,640 --> 00:40:43,200
core like on the

00:40:40,160 --> 00:40:45,200
oh god i i used to know this word like

00:40:43,200 --> 00:40:47,280
your chip gets a bunch of baggage along

00:40:45,200 --> 00:40:50,880
for free and you have the option of

00:40:47,280 --> 00:40:53,760
of interfacing the the cpu core

00:40:50,880 --> 00:40:55,359
with your thing in case you want help

00:40:53,760 --> 00:40:59,440
debugging it it's sort of the

00:40:55,359 --> 00:41:00,720
the sticking a risk 5 core sticking a

00:40:59,440 --> 00:41:04,000
risk 5 processor

00:41:00,720 --> 00:41:05,520
on this node would be would be easy yeah

00:41:04,000 --> 00:41:06,880
there's lots of available risk five

00:41:05,520 --> 00:41:08,400
cores that could be compiled for this

00:41:06,880 --> 00:41:12,240
process

00:41:08,400 --> 00:41:15,520
um by the way uh

00:41:12,240 --> 00:41:18,480
i talked to you at pi

00:41:15,520 --> 00:41:19,599
petaluma pi the python conference out in

00:41:18,480 --> 00:41:22,880
california

00:41:19,599 --> 00:41:23,599
yes um did i talk to you about fomu and

00:41:22,880 --> 00:41:25,520
can we

00:41:23,599 --> 00:41:26,720
are you all ready for to transition into

00:41:25,520 --> 00:41:29,599
another thing that i'll plug

00:41:26,720 --> 00:41:31,359
much quicker maybe i think we've all

00:41:29,599 --> 00:41:34,400
played with fomu yeah

00:41:31,359 --> 00:41:35,839
awesome okay well yeah that that because

00:41:34,400 --> 00:41:37,440
because that's one that we can actually

00:41:35,839 --> 00:41:39,520
all engage

00:41:37,440 --> 00:41:40,880
in this this asic thing once again it's

00:41:39,520 --> 00:41:43,119
like yeah

00:41:40,880 --> 00:41:44,400
that that's out of my pay grade by you

00:41:43,119 --> 00:41:47,280
know

00:41:44,400 --> 00:41:48,880
years of i would need you know i would

00:41:47,280 --> 00:41:50,079
not waste people's time mucking around

00:41:48,880 --> 00:41:53,599
in that but yeah fomo

00:41:50,079 --> 00:41:53,599
good stuff so

00:41:55,280 --> 00:42:01,280
okay so yeah thanks appreciate it

00:41:59,119 --> 00:42:03,040
um and you know anybody who's not

00:42:01,280 --> 00:42:03,520
already hanging out on the ether pad

00:42:03,040 --> 00:42:05,599
please

00:42:03,520 --> 00:42:06,880
feel free to drop links and things there

00:42:05,599 --> 00:42:08,319
that would be interesting for other

00:42:06,880 --> 00:42:09,280
folks that are that are hanging out

00:42:08,319 --> 00:42:11,280
today

00:42:09,280 --> 00:42:12,720
is there anybody else i was just trying

00:42:11,280 --> 00:42:13,920
to skim through is there anybody else

00:42:12,720 --> 00:42:16,480
that wanted to

00:42:13,920 --> 00:42:18,079
join us and add anything to this

00:42:16,480 --> 00:42:19,839
discussion today

00:42:18,079 --> 00:42:22,800
if not i think we're getting perilously

00:42:19,839 --> 00:42:22,800
close to wrapping up

00:42:27,760 --> 00:42:31,200
i don't actually see anybody else in the

00:42:30,000 --> 00:42:33,040
channels anybody else

00:42:31,200 --> 00:42:34,319
see anybody anywhere that's foaming at

00:42:33,040 --> 00:42:37,920
the mouth to hop

00:42:34,319 --> 00:42:41,359
in okay well if not

00:42:37,920 --> 00:42:42,079
um i i will reiterate the plea that i've

00:42:41,359 --> 00:42:44,560
made at

00:42:42,079 --> 00:42:47,040
all of the previous renditions of this

00:42:44,560 --> 00:42:49,440
buff and that is that

00:42:47,040 --> 00:42:50,079
what happens in this sub team and debian

00:42:49,440 --> 00:42:52,160
is

00:42:50,079 --> 00:42:53,839
just like all the others entirely

00:42:52,160 --> 00:42:54,960
dependent on who's willing to show up

00:42:53,839 --> 00:42:58,000
and do some work

00:42:54,960 --> 00:43:01,599
and help keep things running and

00:42:58,000 --> 00:43:04,640
packaging cool new stuff so

00:43:01,599 --> 00:43:07,839
if uh electronics design and

00:43:04,640 --> 00:43:08,880
embedded programming and simulation all

00:43:07,839 --> 00:43:10,640
of the things that

00:43:08,880 --> 00:43:12,079
i talked about in the introduction are

00:43:10,640 --> 00:43:14,720
things that you're interested

00:43:12,079 --> 00:43:16,720
in and you'd be willing to give us a

00:43:14,720 --> 00:43:18,800
hand by investing a little bit of

00:43:16,720 --> 00:43:20,960
time and energy to help us keep all

00:43:18,800 --> 00:43:24,000
these cool tools working in debian

00:43:20,960 --> 00:43:26,000
please come find us there as i mentioned

00:43:24,000 --> 00:43:28,960
is an electronics dash team

00:43:26,000 --> 00:43:30,240
uh sub thing within salsa which is where

00:43:28,960 --> 00:43:32,640
all the current

00:43:30,240 --> 00:43:34,640
team maintained packages tend to live

00:43:32,640 --> 00:43:35,200
there are a few interesting electronics

00:43:34,640 --> 00:43:37,359
packages

00:43:35,200 --> 00:43:38,400
elsewhere but that's a great place to go

00:43:37,359 --> 00:43:39,839
take a look

00:43:38,400 --> 00:43:41,520
skimming through some of those and

00:43:39,839 --> 00:43:42,960
looking for which ones you know have

00:43:41,520 --> 00:43:44,640
interesting open bugs that could be

00:43:42,960 --> 00:43:46,319
tackled or anything like that

00:43:44,640 --> 00:43:47,839
um if there are particular tools that

00:43:46,319 --> 00:43:48,880
you're using yourself that aren't in

00:43:47,839 --> 00:43:50,480
debian

00:43:48,880 --> 00:43:51,920
feel free to reach out to us and i'm

00:43:50,480 --> 00:43:53,760
sure one or more of us will help you

00:43:51,920 --> 00:43:55,119
figure out how to get those packaged and

00:43:53,760 --> 00:43:56,319
into debian so that we can all

00:43:55,119 --> 00:43:57,839
collaborate

00:43:56,319 --> 00:44:00,000
in maintaining them using them and

00:43:57,839 --> 00:44:02,319
making things better for the future so

00:44:00,000 --> 00:44:03,760
with that thanks everybody particularly

00:44:02,319 --> 00:44:06,880
those of you who jumped in to

00:44:03,760 --> 00:44:08,319
to help with the content today

00:44:06,880 --> 00:44:12,319
thanks very much for your time and

00:44:08,319 --> 00:44:12,319
attention and enjoy the rest of deb conf

00:44:12,880 --> 00:44:16,079
thanks a lot today and thanks to

00:44:14,960 --> 00:44:23,040
everybody who

00:44:16,079 --> 00:44:25,119
has attended this part

00:44:23,040 --> 00:44:25,119

YouTube URL: https://www.youtube.com/watch?v=-Td5XJBmBG8


