Title: Salsa CI - Debian Pipeline for Developers
Publication date: 2020-02-19
Playlist: DebConf 19
Description: 
	by Agustin Henze

At: DebConf19
https://debconf19.debconf.org/talks/148-salsa-ci-debian-pipeline-for-developers/

Introduce the salsa-ci pipeline for Debian packagers explaining:

* Why and where it comes from.
* Advantages of having CI in a Debian package.
* How to use it with a simple demo.
* Roadmap and how to contribute to the project.

---
We gave this talk in the mini-debconf at Hamburg and we got really good feedback about it. So, I'd like to give it to a broader audience in Curitiba :).

https://meetings-archive.debian.net/Public/debian-meetings/2019/miniconf-hamburg/salsaci.webm
https://wiki.debian.org/DebianEvents/de/2019/MiniDebConfHamburg?action=AttachFile&do=view&target=salsa-ci-team-slides.pdf

Room: MiniauditÃ³rio
Scheduled start: 2019-07-23 10:00:00
Captions: 
	00:00:04,580 --> 00:00:11,629
good morning it's Tuesday 23 July the

00:00:08,840 --> 00:00:13,699
3rd day of they've come early morning

00:00:11,629 --> 00:00:16,160
session congratulations for making it

00:00:13,699 --> 00:00:19,100
here this morning we're listening to

00:00:16,160 --> 00:00:21,380
Augustin heinze speaking about salsa ci

00:00:19,100 --> 00:00:30,680
Debian pipeline for developers Augustin

00:00:21,380 --> 00:00:33,140
arity hello everyone first of all thank

00:00:30,680 --> 00:00:43,970
you for coming I know that it was a

00:00:33,140 --> 00:00:49,250
really hard night last night so ok start

00:00:43,970 --> 00:00:51,050
with a question I don't know but how

00:00:49,250 --> 00:00:54,100
long does it take you to realize that

00:00:51,050 --> 00:00:59,300
you have uploaded a broken package like

00:00:54,100 --> 00:01:03,079
maybe I don't know minutes if you get

00:00:59,300 --> 00:01:08,109
this kind of female like your package is

00:01:03,079 --> 00:01:11,119
waiting for for accepting I don't know

00:01:08,109 --> 00:01:14,209
they have to check the package manually

00:01:11,119 --> 00:01:17,479
which is good because it is a new binary

00:01:14,209 --> 00:01:23,259
introduce it in your package so they do

00:01:17,479 --> 00:01:26,270
a manual check well then you get like a

00:01:23,259 --> 00:01:31,270
feedback but it's not useful but it's

00:01:26,270 --> 00:01:37,219
something then you have to wait hours

00:01:31,270 --> 00:01:41,539
maybe hours until the the package is

00:01:37,219 --> 00:01:46,009
installed in the archive and then all

00:01:41,539 --> 00:01:50,119
the tests are run no only the VNC I I am

00:01:46,009 --> 00:01:52,779
talking about pure parts the rest of the

00:01:50,119 --> 00:01:52,779
architectures

00:01:52,869 --> 00:02:02,890
Jetray I guess and maybe you can take a

00:01:56,090 --> 00:02:07,610
day to get the the whole feedback so

00:02:02,890 --> 00:02:09,800
yeah I think that Debian the definition

00:02:07,610 --> 00:02:14,209
structure is really good is awesome

00:02:09,800 --> 00:02:15,890
since it is the thing that the

00:02:14,209 --> 00:02:20,000
difference between the rest of the of

00:02:15,890 --> 00:02:22,280
the of the distribution so it is very

00:02:20,000 --> 00:02:26,420
good but you have to wait and you have

00:02:22,280 --> 00:02:29,360
to break the distribution if you want to

00:02:26,420 --> 00:02:32,810
test your package I mean you have to

00:02:29,360 --> 00:02:36,220
upload a broken package to realize how

00:02:32,810 --> 00:02:38,840
to package test is not passing or or

00:02:36,220 --> 00:02:41,780
maybe a different architecture is not

00:02:38,840 --> 00:02:46,269
building if your package is needs to be

00:02:41,780 --> 00:02:46,269
built for the rest of the architectures

00:02:47,800 --> 00:02:54,470
wow you can do that in your machine as

00:02:50,720 --> 00:02:58,070
well but if you maintain like more than

00:02:54,470 --> 00:02:59,000
five packages you cannot do that or you

00:02:58,070 --> 00:03:01,070
don't do that

00:02:59,000 --> 00:03:02,930
I mean you didn't run the whole test in

00:03:01,070 --> 00:03:05,540
your machine your parts out of the

00:03:02,930 --> 00:03:08,920
package days usually you're you don't

00:03:05,540 --> 00:03:08,920
have time for doing that

00:03:10,470 --> 00:03:20,550
and the feeling is the idea is to get

00:03:15,540 --> 00:03:23,280
the most benefit that you can that you

00:03:20,550 --> 00:03:26,730
can do for Debian that the time that you

00:03:23,280 --> 00:03:28,920
invest for Debian is really precious I

00:03:26,730 --> 00:03:32,070
mean you you want to contribute to

00:03:28,920 --> 00:03:34,890
Debian you want to invest time in the

00:03:32,070 --> 00:03:38,420
event and and then you want to get that

00:03:34,890 --> 00:03:38,420
value added to them in

00:03:42,560 --> 00:03:46,370
continuous integration is the practice

00:03:44,510 --> 00:03:51,370
of building and testing it changed

00:03:46,370 --> 00:03:54,410
automatically as early as possible so

00:03:51,370 --> 00:03:57,860
when alphas here I was employed I I

00:03:54,410 --> 00:04:02,660
thought okay this is a really good idea

00:03:57,860 --> 00:04:05,030
not because of gel lab but the the

00:04:02,660 --> 00:04:07,970
interesting part was taking lab CI and

00:04:05,030 --> 00:04:12,050
not because of gala the part of the CI

00:04:07,970 --> 00:04:16,730
having CI in Debian it's a really good

00:04:12,050 --> 00:04:21,680
way to speed up our process the way that

00:04:16,730 --> 00:04:24,380
we contribute each other so yeah I think

00:04:21,680 --> 00:04:28,760
that it it adds a lot of value having CI

00:04:24,380 --> 00:04:33,140
in in Debian I remember my first package

00:04:28,760 --> 00:04:38,390
was a flight simulator I was so excited

00:04:33,140 --> 00:04:42,110
about that I was doing my my thesis it

00:04:38,390 --> 00:04:45,710
was a quadcopter like a 10 years ago and

00:04:42,110 --> 00:04:49,790
I was learning how to control the

00:04:45,710 --> 00:04:52,550
quadcopter using the hardware so we

00:04:49,790 --> 00:04:56,169
brought like in many propellers and some

00:04:52,550 --> 00:04:58,880
finger as well and then yeah and then

00:04:56,169 --> 00:05:02,180
someone told me you should try to learn

00:04:58,880 --> 00:05:05,540
using a flight simulator you cannot

00:05:02,180 --> 00:05:08,050
break anything with that so I went to

00:05:05,540 --> 00:05:12,080
Devon I couldn't find any other I

00:05:08,050 --> 00:05:20,720
couldn't find a package for doing that

00:05:12,080 --> 00:05:25,210
so I packaged that that software and I

00:05:20,720 --> 00:05:30,560
remember that when I was introducing

00:05:25,210 --> 00:05:34,340
GRCC I case it like in many ways it has

00:05:30,560 --> 00:05:40,340
like an interface through the sample you

00:05:34,340 --> 00:05:44,390
can introduce our control and and what

00:05:40,340 --> 00:05:47,450
you can control the robot that they

00:05:44,390 --> 00:05:50,840
simulated robot through the interface so

00:05:47,450 --> 00:05:53,880
it was very good then the the the first

00:05:50,840 --> 00:05:57,990
the second release

00:05:53,880 --> 00:06:00,600
was there so I remember that in the next

00:05:57,990 --> 00:06:04,350
release I was so excited okay I have to

00:06:00,600 --> 00:06:06,540
try it everything again I want to to

00:06:04,350 --> 00:06:11,270
have like this software working really

00:06:06,540 --> 00:06:18,120
well so I tested it in my machine again

00:06:11,270 --> 00:06:21,360
but then over time over years you are

00:06:18,120 --> 00:06:26,760
you do not have that the exact in that

00:06:21,360 --> 00:06:29,850
excitement anymore it's like you change

00:06:26,760 --> 00:06:35,700
I finished my degree and and I didn't

00:06:29,850 --> 00:06:39,030
use the the software anymore so in the

00:06:35,700 --> 00:06:41,790
in the next releases I just try to build

00:06:39,030 --> 00:06:45,660
the software and maybe running some

00:06:41,790 --> 00:06:47,570
tests but just probably just opening and

00:06:45,660 --> 00:06:51,120
see if it works

00:06:47,570 --> 00:06:55,550
probably it depends on the time that I

00:06:51,120 --> 00:06:55,550
have to to spend with the package

00:07:01,430 --> 00:07:07,990
so if you if you are continuous

00:07:05,509 --> 00:07:10,729
integration to your project no matter

00:07:07,990 --> 00:07:14,210
what kind of project you have in this

00:07:10,729 --> 00:07:18,590
case we're talking about packages it

00:07:14,210 --> 00:07:21,590
makes it makes easier to review change

00:07:18,590 --> 00:07:24,830
for example with someone contributed to

00:07:21,590 --> 00:07:27,410
to your project you don't have to to

00:07:24,830 --> 00:07:30,560
look I don't know you know you don't

00:07:27,410 --> 00:07:33,650
have to test it for example you you just

00:07:30,560 --> 00:07:36,770
go to the to the CI output and see the

00:07:33,650 --> 00:07:39,680
your tests are running well so you don't

00:07:36,770 --> 00:07:42,620
care about if it is working or not you

00:07:39,680 --> 00:07:45,440
just put your focus on on the on the

00:07:42,620 --> 00:07:49,720
patch not on the on the functionality

00:07:45,440 --> 00:07:49,720
because you know that it is working

00:07:49,820 --> 00:07:57,050
if someone Forks your your repository in

00:07:53,750 --> 00:07:59,300
in Tulsa they can use the same

00:07:57,050 --> 00:08:01,520
infrastructure that you are using for

00:07:59,300 --> 00:08:04,610
tests in your package so there is not

00:08:01,520 --> 00:08:07,460
agree array area between your computer

00:08:04,610 --> 00:08:11,120
and the contributor so you have like a

00:08:07,460 --> 00:08:16,789
neutral environment for testing your

00:08:11,120 --> 00:08:19,389
package and of course anyone can

00:08:16,789 --> 00:08:24,650
contribute adding more tests and and

00:08:19,389 --> 00:08:29,210
changing your CI those are good another

00:08:24,650 --> 00:08:31,789
good item yeah it helps a lot avoiding

00:08:29,210 --> 00:08:33,409
repetitive tasks because you don't want

00:08:31,789 --> 00:08:38,900
to test your package every time that you

00:08:33,409 --> 00:08:43,130
change it so yeah and it is easy to

00:08:38,900 --> 00:08:46,279
attract new contributions yeah what is

00:08:43,130 --> 00:08:48,380
the salsa CI team we develop and

00:08:46,279 --> 00:08:51,290
maintain recipe for building in testing

00:08:48,380 --> 00:08:57,260
debian package it's just that it is not

00:08:51,290 --> 00:09:00,800
magic we are not we contributed to the

00:08:57,260 --> 00:09:04,310
to the other to the projects that we use

00:09:00,800 --> 00:09:07,820
like outer box test pew parts report

00:09:04,310 --> 00:09:10,580
race but we just build a recipe is like

00:09:07,820 --> 00:09:13,130
the thing that you

00:09:10,580 --> 00:09:16,620
running your machine for building and

00:09:13,130 --> 00:09:22,290
running your test it's just that it's

00:09:16,620 --> 00:09:25,050
like it's just scraped and and the as

00:09:22,290 --> 00:09:28,230
much we are trying to do generic as

00:09:25,050 --> 00:09:32,880
possible it's not that easy but we are

00:09:28,230 --> 00:09:35,430
trying without any tweak I mean you

00:09:32,880 --> 00:09:37,560
don't have to execute anything anything

00:09:35,430 --> 00:09:41,840
we are it's like just Debian

00:09:37,560 --> 00:09:41,840
infrastructure just having tools sorry

00:09:41,930 --> 00:09:47,970
it is way you know hide the magic and

00:09:44,910 --> 00:09:51,930
and in the newcomers can see if someone

00:09:47,970 --> 00:09:55,140
want to are now getting into the to the

00:09:51,930 --> 00:09:58,650
devtools they can see how Debian execute

00:09:55,140 --> 00:10:01,500
is the the the whole machinery the how

00:09:58,650 --> 00:10:04,920
to build a package how to run pew parts

00:10:01,500 --> 00:10:08,160
how to run out backer stairs so it's

00:10:04,920 --> 00:10:15,980
like a good documentation but you can

00:10:08,160 --> 00:10:19,800
interact with it well the goals are

00:10:15,980 --> 00:10:24,000
detect problem before the package get

00:10:19,800 --> 00:10:26,870
into the archive because it will be nice

00:10:24,000 --> 00:10:32,400
if you don't break unstable or

00:10:26,870 --> 00:10:35,100
experimental anyway so you can just try

00:10:32,400 --> 00:10:37,980
to something we're or a new app dream

00:10:35,100 --> 00:10:42,330
push your changes and wait for feedback

00:10:37,980 --> 00:10:45,510
and in that way you don't break the the

00:10:42,330 --> 00:10:48,090
archive and you can get feedback really

00:10:45,510 --> 00:10:51,470
fast like maybe it depends on the

00:10:48,090 --> 00:10:54,840
package if you package has to be build

00:10:51,470 --> 00:10:57,870
probably depends on the size but usually

00:10:54,840 --> 00:11:00,690
if you have a Python module or per

00:10:57,870 --> 00:11:03,810
module is really I don't know it's very

00:11:00,690 --> 00:11:06,070
fast maybe between five and eight

00:11:03,810 --> 00:11:07,230
minutes

00:11:06,070 --> 00:11:13,150
[Music]

00:11:07,230 --> 00:11:15,640
well yeah like I said that before you

00:11:13,150 --> 00:11:18,130
have a reputation environment so you can

00:11:15,640 --> 00:11:22,810
share the same environment between

00:11:18,130 --> 00:11:24,550
developers and yeah I think that it

00:11:22,810 --> 00:11:27,160
radius is said that the learning curve

00:11:24,550 --> 00:11:30,310
for newcomers because you can try

00:11:27,160 --> 00:11:34,120
different things in your fork and tie

00:11:30,310 --> 00:11:37,780
with it it's like a good way to learn at

00:11:34,120 --> 00:11:41,440
least to me it works this is how it

00:11:37,780 --> 00:11:45,550
looks like you we have so far we have

00:11:41,440 --> 00:11:49,780
just two stages in the first stage we

00:11:45,550 --> 00:11:53,380
build the package we do full bill that

00:11:49,780 --> 00:11:57,490
means we build the the all and the any

00:11:53,380 --> 00:12:03,480
architecture right now sorry we are

00:11:57,490 --> 00:12:06,100
willing for x86 only that we are

00:12:03,480 --> 00:12:10,300
probably this step Kampf we are going to

00:12:06,100 --> 00:12:13,300
have arm 64 as well and in the next

00:12:10,300 --> 00:12:17,020
stage we have the testing part and the

00:12:13,300 --> 00:12:21,780
testifier are jobs every bubble there is

00:12:17,020 --> 00:12:24,040
one job and we have out package tests

00:12:21,780 --> 00:12:27,910
bill ICS

00:12:24,040 --> 00:12:30,040
build log hard any checks Lincoln few

00:12:27,910 --> 00:12:35,320
parts in rep or test reportes is for

00:12:30,040 --> 00:12:38,170
reproducibility well the whole pipeline

00:12:35,320 --> 00:12:41,650
takes more than a minute for a regular

00:12:38,170 --> 00:12:44,440
Python package just like an example now

00:12:41,650 --> 00:12:47,350
every job ran in a clean reproducing

00:12:44,440 --> 00:12:50,560
environment which is yeah what's the

00:12:47,350 --> 00:12:53,980
minimum requirement dependencies we in

00:12:50,560 --> 00:12:57,370
the beginning way since the beginning we

00:12:53,980 --> 00:13:01,089
were trying to make it simple just with

00:12:57,370 --> 00:13:05,710
the dependency that you need it's docker

00:13:01,089 --> 00:13:09,540
base so if someone is asking this docker

00:13:05,710 --> 00:13:14,490
base so we build images and those images

00:13:09,540 --> 00:13:14,490
are used in every job

00:13:16,399 --> 00:13:24,269
well I think that it was 8 months ago

00:13:20,910 --> 00:13:28,050
this also means added the CI Reynolds

00:13:24,269 --> 00:13:31,139
the Chevron ins so we can we can do

00:13:28,050 --> 00:13:33,749
everything that we're doing now because

00:13:31,139 --> 00:13:40,079
they are no they they are doing a really

00:13:33,749 --> 00:13:45,899
good job we can run many poly jobs in

00:13:40,079 --> 00:13:53,579
separated environment yes it's really

00:13:45,899 --> 00:13:57,300
fast or fast fast enough well how do you

00:13:53,579 --> 00:14:01,769
can add the pipeline in your package is

00:13:57,300 --> 00:14:06,110
really easy just yeah you have to commit

00:14:01,769 --> 00:14:11,040
oh sorry

00:14:06,110 --> 00:14:13,589
yeah just forget about that then there

00:14:11,040 --> 00:14:21,240
are two URLs here that you have to

00:14:13,589 --> 00:14:23,959
include in your in one file sure no I

00:14:21,240 --> 00:14:23,959
don't think so

00:14:31,890 --> 00:14:37,889
[Laughter]

00:14:34,439 --> 00:14:41,970
but yeah it is easy you have to add just

00:14:37,889 --> 00:14:46,920
one single file including two URLs and

00:14:41,970 --> 00:14:49,410
one URL is for the jobs definitions were

00:14:46,920 --> 00:14:52,050
you have the word you can find the

00:14:49,410 --> 00:14:55,589
recipe and then you have the the

00:14:52,050 --> 00:14:57,360
pipeline jobs the the pipeline jobs well

00:14:55,589 --> 00:15:03,649
one is the decoration is the other is

00:14:57,360 --> 00:15:10,049
the definition so yeah what are our

00:15:03,649 --> 00:15:13,790
future plans well as I said before we're

00:15:10,049 --> 00:15:16,980
trying to get more architectures in to

00:15:13,790 --> 00:15:20,519
kill lab into salsa

00:15:16,980 --> 00:15:23,189
we got sponsorship form packet so we are

00:15:20,519 --> 00:15:26,889
going to add arm 64

00:15:23,189 --> 00:15:30,429
but we would like to to try using the

00:15:26,889 --> 00:15:32,730
porto portas as well in the future in

00:15:30,429 --> 00:15:35,999
the last release Gallup introduces

00:15:32,730 --> 00:15:41,350
generic executors so we can use

00:15:35,999 --> 00:15:44,319
associate si s Gerald to to build a

00:15:41,350 --> 00:15:47,139
runner so we can try to use the porta

00:15:44,319 --> 00:15:49,449
pottis for for the rest of of the

00:15:47,139 --> 00:15:52,149
architectures because we don't have many

00:15:49,449 --> 00:15:54,249
hardware and I have been talking with

00:15:52,149 --> 00:15:59,199
people and usually the porta-potties are

00:15:54,249 --> 00:16:01,689
just evil nobody's using it so we can

00:15:59,199 --> 00:16:10,359
try using them as part of this

00:16:01,689 --> 00:16:14,410
infrastructure well we can offer a way

00:16:10,359 --> 00:16:16,720
to test him offering changes but how

00:16:14,410 --> 00:16:19,749
they impact in Debian every time that

00:16:16,720 --> 00:16:23,169
upstream pushed not only I have released

00:16:19,749 --> 00:16:26,230
have every change that they push we can

00:16:23,169 --> 00:16:28,989
test that in Debian and tell them that

00:16:26,230 --> 00:16:31,329
give them some feedback okay that the

00:16:28,989 --> 00:16:33,929
package is broken after you change the

00:16:31,329 --> 00:16:38,009
package is not bill anymore for example

00:16:33,929 --> 00:16:38,009
probably it's just an idea

00:16:39,360 --> 00:16:45,119
yeah did that was the the first thing

00:16:43,509 --> 00:16:49,899
that we thought in the beginning

00:16:45,119 --> 00:16:53,169
proposed new releases automatically we

00:16:49,899 --> 00:16:57,790
are we already have that cold but we

00:16:53,169 --> 00:17:01,449
didn't try it yet production but the

00:16:57,790 --> 00:17:05,439
idea is every time that the aftering

00:17:01,449 --> 00:17:08,709
release a new version you will get like

00:17:05,439 --> 00:17:11,919
a merge request proposal automatically

00:17:08,709 --> 00:17:17,919
and us developer and maintainer can

00:17:11,919 --> 00:17:20,799
accept it and yeah maybe we want to go

00:17:17,919 --> 00:17:24,010
further than that and try to make the

00:17:20,799 --> 00:17:27,939
upload automatically but that there is

00:17:24,010 --> 00:17:30,510
for I think four years now but the the

00:17:27,939 --> 00:17:33,220
idea for of cabin mess request

00:17:30,510 --> 00:17:39,240
automatically is there but we are not

00:17:33,220 --> 00:17:42,610
executing yet but maybe for five months

00:17:39,240 --> 00:17:48,700
and yeah we want to increase the

00:17:42,610 --> 00:17:51,070
coverage whatever you have like whatever

00:17:48,700 --> 00:17:52,780
I don't know what do you do in your

00:17:51,070 --> 00:17:56,440
regular war flow

00:17:52,780 --> 00:18:00,160
what kind of checks you do but we want

00:17:56,440 --> 00:18:04,990
to to have them in the pipeline so the

00:18:00,160 --> 00:18:07,120
rest of the maintainer can use it for

00:18:04,990 --> 00:18:09,730
example I don't know the we would like

00:18:07,120 --> 00:18:13,630
to have their ftp checks that will be

00:18:09,730 --> 00:18:16,210
nice not all of them but the part of

00:18:13,630 --> 00:18:21,150
them will be nice having direct link

00:18:16,210 --> 00:18:31,720
into the pipeline so you can have faster

00:18:21,150 --> 00:18:34,750
feedback yeah we need more use cases Oh

00:18:31,720 --> 00:18:37,240
in the beginning it was easy because um

00:18:34,750 --> 00:18:40,620
we were testing only with our packages

00:18:37,240 --> 00:18:45,040
then the people started using it and

00:18:40,620 --> 00:18:49,660
everything was broken so now he's good

00:18:45,040 --> 00:18:53,799
he's running again I guess over 400 500

00:18:49,660 --> 00:18:56,950
source packages and but we would like to

00:18:53,799 --> 00:18:58,510
have I don't know the 90% of the use

00:18:56,950 --> 00:19:05,740
case of all the hundred percent of

00:18:58,510 --> 00:19:09,960
course that is not freedom I guess I'm

00:19:05,740 --> 00:19:13,990
sorry just I think that it was yesterday

00:19:09,960 --> 00:19:19,020
Rafael told us that Cali he knows he's

00:19:13,990 --> 00:19:19,020
using sulfa CI over 500 projects

00:19:19,210 --> 00:19:25,160
yeah we need to improve the

00:19:20,930 --> 00:19:29,900
documentation because I am talking about

00:19:25,160 --> 00:19:32,540
salsas here hi but first you have to do

00:19:29,900 --> 00:19:35,060
to know how gillip works

00:19:32,540 --> 00:19:40,580
what is gallop CI and we don't have that

00:19:35,060 --> 00:19:43,070
kind of no workflow or flow to to get

00:19:40,580 --> 00:19:45,830
into the south and CI so we would like

00:19:43,070 --> 00:19:49,520
to have a friendly documentation but

00:19:45,830 --> 00:19:51,800
yeah you know always it's hard

00:19:49,520 --> 00:19:55,760
yeah and for sure we would like to have

00:19:51,800 --> 00:20:00,050
everyone involved in this recipe thing

00:19:55,760 --> 00:20:06,770
it's just how do you do your work how do

00:20:00,050 --> 00:20:10,040
you do your job with the package what is

00:20:06,770 --> 00:20:12,260
the way that you build the package how

00:20:10,040 --> 00:20:15,070
what is the way that you ensure that the

00:20:12,260 --> 00:20:17,300
package is not broken before upload and

00:20:15,070 --> 00:20:20,900
we would like to get that in there in

00:20:17,300 --> 00:20:24,950
the pipeline the contributor so far--

00:20:20,900 --> 00:20:26,900
that is not breathable I know and yeah I

00:20:24,950 --> 00:20:35,170
would like to do a demo I don't know if

00:20:26,900 --> 00:20:35,170
I have time all right

00:20:43,640 --> 00:20:49,730
yeah I will do which one

00:20:56,450 --> 00:21:05,600
yeah yeah demo yeah but I know you can

00:21:00,710 --> 00:21:08,799
just wait a little bit and also you can

00:21:05,600 --> 00:21:08,799
ask whatever you want

00:21:16,800 --> 00:21:28,450
so hard using a different screen can we

00:21:20,680 --> 00:21:33,520
ask questions in the meantime well what

00:21:28,450 --> 00:21:36,150
kind of get layout do you support sorry

00:21:33,520 --> 00:21:41,620
what kind of get layout do you support

00:21:36,150 --> 00:21:45,330
unapplied yeah as Ian says or so far we

00:21:41,620 --> 00:21:50,380
we only have GBP support but we want to

00:21:45,330 --> 00:21:53,560
wherever there's many GBP layouts yeah

00:21:50,380 --> 00:21:56,800
but who would yeah I know I know but I I

00:21:53,560 --> 00:21:59,670
think that it is not important if you

00:21:56,800 --> 00:22:05,110
can execute one single comment to get

00:21:59,670 --> 00:22:07,720
aurash that is enough I mean does it

00:22:05,110 --> 00:22:13,330
have to be pristine dollar or not no

00:22:07,720 --> 00:22:18,720
it's not this yeah and then the second

00:22:13,330 --> 00:22:23,050
question I have is so for everyone that

00:22:18,720 --> 00:22:25,990
maintains a large amount of dependency

00:22:23,050 --> 00:22:29,020
for big software one challenge is to

00:22:25,990 --> 00:22:37,360
that's my I package start one thank you

00:22:29,020 --> 00:22:46,690
that one yeah meaning European PD if you

00:22:37,360 --> 00:22:50,140
feel free to commit there so for anyone

00:22:46,690 --> 00:22:53,140
that maintains a chain of dependency the

00:22:50,140 --> 00:22:55,390
challenge is to be able to test the

00:22:53,140 --> 00:22:57,880
reverse dependencies so do you have

00:22:55,390 --> 00:23:01,540
plans to test building all the reverse

00:22:57,880 --> 00:23:05,740
dependency of a package yeah actually

00:23:01,540 --> 00:23:08,500
yeah he's happy but yeah we we were

00:23:05,740 --> 00:23:11,320
thinking about that and Ghaleb has the

00:23:08,500 --> 00:23:13,540
multi project pipelines something like

00:23:11,320 --> 00:23:16,540
that the feature is called like that and

00:23:13,540 --> 00:23:21,760
you can have nested pipelines in your

00:23:16,540 --> 00:23:25,720
project so but that feature is not open

00:23:21,760 --> 00:23:27,250
source so we requested to them we open

00:23:25,720 --> 00:23:30,100
an issue and we're

00:23:27,250 --> 00:23:33,790
them if they can open that issue they

00:23:30,100 --> 00:23:37,720
can open that the feature but they I

00:23:33,790 --> 00:23:40,720
don't know you have to discuss you have

00:23:37,720 --> 00:23:44,470
to increase the the the interest I mean

00:23:40,720 --> 00:23:47,440
I was the only one talking that you

00:23:44,470 --> 00:23:50,680
should or maybe two more people but if

00:23:47,440 --> 00:23:54,370
we are going there and just pushing them

00:23:50,680 --> 00:23:56,260
they usually release the feature so send

00:23:54,370 --> 00:24:01,450
them into the Mandeville so that we all

00:23:56,260 --> 00:24:06,460
rush into the thread yeah you can solve

00:24:01,450 --> 00:24:09,160
that using the Gila API as well but yeah

00:24:06,460 --> 00:24:12,910
it's not that friendly I mean you don't

00:24:09,160 --> 00:24:16,240
have the the visual part you are going

00:24:12,910 --> 00:24:18,940
to get like a log and you have to find

00:24:16,240 --> 00:24:22,960
in the log the URL of the next pipeline

00:24:18,940 --> 00:24:27,220
so yeah it's not that friendly so yeah

00:24:22,960 --> 00:24:31,290
we want to push them and and get that

00:24:27,220 --> 00:24:34,810
feature release it will be nice if

00:24:31,290 --> 00:24:38,200
everyone goes there and pushed them to

00:24:34,810 --> 00:24:41,110
release that feature actually we made it

00:24:38,200 --> 00:24:43,260
they include feature that you couldn't

00:24:41,110 --> 00:24:43,260
see before

00:24:44,010 --> 00:24:49,410
Wow

00:24:45,310 --> 00:24:51,640
I am not sure if was Debian exactly the

00:24:49,410 --> 00:24:57,010
reason that they released that feature

00:24:51,640 --> 00:25:01,270
but we went there I asked to crease the

00:24:57,010 --> 00:25:04,480
the DPL in that moment and he went there

00:25:01,270 --> 00:25:08,680
and pushed them hey we are Debian we are

00:25:04,480 --> 00:25:13,510
like usually if they they paid the

00:25:08,680 --> 00:25:16,540
feature that you have to pay for are for

00:25:13,510 --> 00:25:18,910
big companies and Debian is the same

00:25:16,540 --> 00:25:21,790
example I mean we are like a huge

00:25:18,910 --> 00:25:25,150
company we have I know 10,000 project I

00:25:21,790 --> 00:25:27,400
don't remember the salsa means the other

00:25:25,150 --> 00:25:31,110
the other day they told me but I don't

00:25:27,400 --> 00:25:34,870
remember but it is a huge amount so we

00:25:31,110 --> 00:25:37,030
have to try to push them and get that

00:25:34,870 --> 00:25:39,340
feature release and all the features

00:25:37,030 --> 00:25:43,180
that we need otherwise

00:25:39,340 --> 00:25:56,110
it's not going to work for Debian ghulam

00:25:43,180 --> 00:25:58,950
so sorry but too chichi some wine and

00:25:56,110 --> 00:25:58,950
party last night

00:26:08,380 --> 00:26:17,559
no no I am yeah I'm just trying to

00:26:11,380 --> 00:26:24,669
authenticate to collab because I am

00:26:17,559 --> 00:26:38,200
forking the project yeah I am forking

00:26:24,669 --> 00:26:46,210
project here and then you can go here

00:26:38,200 --> 00:26:49,960
set up CI CD I am changing the path

00:26:46,210 --> 00:26:52,929
because of course you have to use

00:26:49,960 --> 00:26:55,530
another path otherwise you have to have

00:26:52,929 --> 00:26:55,530
that patch

00:27:10,820 --> 00:27:19,639
I am just copy this include sentence

00:27:16,519 --> 00:27:24,579
that you can read now I am going to

00:27:19,639 --> 00:27:24,579
increase the size after a

00:27:32,630 --> 00:27:38,720
so this was the thing that was

00:27:36,020 --> 00:27:41,120
unreadable before as you can see there

00:27:38,720 --> 00:27:47,420
is an include sentence is something that

00:27:41,120 --> 00:27:51,160
Gallup parse and then there are two URLs

00:27:47,420 --> 00:27:51,160
where you can find the recipes

00:28:12,680 --> 00:28:26,310
okay first you have to to change the

00:28:21,200 --> 00:28:32,750
default path the girl abuses for running

00:28:26,310 --> 00:28:37,470
CI for finally the CI description just

00:28:32,750 --> 00:28:39,680
third one second more we are going to

00:28:37,470 --> 00:28:39,680
get

00:28:43,360 --> 00:28:46,470
[Music]

00:28:46,559 --> 00:28:55,789
and then you commit the change the

00:28:49,499 --> 00:28:55,789
changes and the pipeline shall start now

00:29:03,790 --> 00:29:09,310
there is no thought before the sawdust

00:29:06,340 --> 00:29:12,280
theater before sauces the eyes oh yeah

00:29:09,310 --> 00:29:15,880
but it already added yeah I did that I

00:29:12,280 --> 00:29:18,760
just added a new file with a pipeline

00:29:15,880 --> 00:29:20,980
description and as you can see there the

00:29:18,760 --> 00:29:27,810
pipeline is running for the seagull

00:29:20,980 --> 00:29:33,970
package and Wow you can see the same

00:29:27,810 --> 00:29:37,750
thing that we saw before the first stage

00:29:33,970 --> 00:29:40,900
is running is building packaged so we

00:29:37,750 --> 00:29:46,650
will see if it works but we can go back

00:29:40,900 --> 00:29:46,650
to the presentation and say thanks

00:29:47,110 --> 00:29:55,670
[Applause]

00:30:13,590 --> 00:30:20,770
dependency not yet in Debian no no we

00:30:18,430 --> 00:30:27,790
don't have that yet but we would like to

00:30:20,770 --> 00:30:29,200
have to implement it yeah hey so first

00:30:27,790 --> 00:30:30,640
of all thanks for a really good

00:30:29,200 --> 00:30:32,500
presentation I have just a couple of

00:30:30,640 --> 00:30:34,660
questions first of all I just want to

00:30:32,500 --> 00:30:37,690
make sure I'm trying to track what you

00:30:34,660 --> 00:30:39,910
know all the get stuff in Debian for

00:30:37,690 --> 00:30:41,710
some silly reason but so my under Steve

00:30:39,910 --> 00:30:44,380
so I want to make sure I'm hearing you

00:30:41,710 --> 00:30:46,780
correctly that you currently support GBP

00:30:44,380 --> 00:30:51,280
unapplied is the the only format that

00:30:46,780 --> 00:30:55,150
you did you support yeah but only

00:30:51,280 --> 00:30:57,760
because we've done I never had another

00:30:55,150 --> 00:31:00,220
poor flow that's fine is the only reason

00:30:57,760 --> 00:31:01,930
but we would like to have a more more

00:31:00,220 --> 00:31:03,580
flows actually I think this is really

00:31:01,930 --> 00:31:05,890
interesting have you it and that hasn't

00:31:03,580 --> 00:31:07,960
been a huge problem for you like how

00:31:05,890 --> 00:31:10,180
many times have people really been

00:31:07,960 --> 00:31:12,580
wishing how many times have people come

00:31:10,180 --> 00:31:14,290
to you and said hey I'd love to use

00:31:12,580 --> 00:31:16,050
salsa CI but I can't get this other work

00:31:14,290 --> 00:31:18,870
full of working well we

00:31:16,050 --> 00:31:21,810
have an open issue and there is like

00:31:18,870 --> 00:31:24,650
three bolts maybe I don't know if that

00:31:21,810 --> 00:31:27,000
counts but that's no I think that's a

00:31:24,650 --> 00:31:29,430
really interesting set of feedback to

00:31:27,000 --> 00:31:32,940
the global discussion about what

00:31:29,430 --> 00:31:37,740
workflow we should be using um my second

00:31:32,940 --> 00:31:40,520
question is are you tracking the

00:31:37,740 --> 00:31:43,080
different push to upload proposals

00:31:40,520 --> 00:31:45,450
TRUCKING what's cooking your PC there

00:31:43,080 --> 00:31:49,680
are a couple so Ian Jackson and Ansgar

00:31:45,450 --> 00:31:51,240
have different approaches for for

00:31:49,680 --> 00:31:53,220
basically making it so that the way you

00:31:51,240 --> 00:31:56,730
upload to the archive is to push a tag

00:31:53,220 --> 00:32:00,600
yeah but we were talking yesterday with

00:31:56,730 --> 00:32:04,230
young yeah it seems that there is not

00:32:00,600 --> 00:32:07,980
any opera lab between he's working this

00:32:04,230 --> 00:32:09,900
South se I um well I don't think there's

00:32:07,980 --> 00:32:10,920
overlap in terms of code and there

00:32:09,900 --> 00:32:12,750
certainly doesn't seem me to be a

00:32:10,920 --> 00:32:14,880
conflict but one thing it seems like it

00:32:12,750 --> 00:32:17,010
would be really if you have both of

00:32:14,880 --> 00:32:19,170
these um

00:32:17,010 --> 00:32:22,110
can you download the artifacts like the

00:32:19,170 --> 00:32:24,180
built dev artifacts ja okay so if you

00:32:22,110 --> 00:32:27,210
have both of these things together I

00:32:24,180 --> 00:32:29,780
think what you could do is you could go

00:32:27,210 --> 00:32:32,160
make propose a change like you know

00:32:29,780 --> 00:32:34,740
without having a bunch of Debian tools

00:32:32,160 --> 00:32:36,210
on your system yeah that you're gonna

00:32:34,740 --> 00:32:38,160
get the auto packaged test but you could

00:32:36,210 --> 00:32:40,050
even download the archives and test the

00:32:38,160 --> 00:32:42,750
depths yourself if you wanted to do more

00:32:40,050 --> 00:32:44,850
thorough testing and then upload all the

00:32:42,750 --> 00:32:46,710
way to the archive basically without

00:32:44,850 --> 00:32:48,270
ever having that infrastructure on your

00:32:46,710 --> 00:32:49,530
own system yeah exactly

00:32:48,270 --> 00:32:52,800
I didn't that sounds kind of cool

00:32:49,530 --> 00:32:55,040
honestly it was I have tried that

00:32:52,800 --> 00:32:55,040
already

00:32:58,870 --> 00:33:08,830
yeah the mid-sixteenth microphone yeah

00:33:07,480 --> 00:33:11,440
they're upgrading to hell so now so you

00:33:08,830 --> 00:33:16,300
might not have any luck with that but my

00:33:11,440 --> 00:33:18,100
question was can you use these the

00:33:16,300 --> 00:33:23,950
fallacy I set up to build packages

00:33:18,100 --> 00:33:25,870
outside salsa on say a private lab

00:33:23,950 --> 00:33:27,820
instance that isn't that isn't salsa

00:33:25,870 --> 00:33:34,600
thank you can you repeat because I yeah

00:33:27,820 --> 00:33:37,330
cute here yeah that works can you use

00:33:34,600 --> 00:33:39,160
SAS or CI on a get lab instance that

00:33:37,330 --> 00:33:40,900
isn't salsa so a private get lab

00:33:39,160 --> 00:33:43,000
instance or get loud calm or whatnot

00:33:40,900 --> 00:33:46,360
yeah yeah actually color linux is

00:33:43,000 --> 00:33:47,680
running gilad comm writing itself and my

00:33:46,360 --> 00:33:50,650
second question is can you build

00:33:47,680 --> 00:33:53,710
packages not against Debbie an unstable

00:33:50,650 --> 00:33:56,440
say against stable off of targeting

00:33:53,710 --> 00:33:57,880
backports that kind of thing I'm Jesse

00:33:56,440 --> 00:34:00,310
see the unsalables

00:33:57,880 --> 00:34:05,520
testing whatever you have to set up

00:34:00,310 --> 00:34:12,910
variable for that but yeah thanks

00:34:05,520 --> 00:34:16,710
questions I forgot about that please

00:34:12,910 --> 00:34:16,710
remember to keep the mic on your chin

00:34:22,050 --> 00:34:30,100
so um wow I'm really loud and how

00:34:26,980 --> 00:34:34,210
integral is Daugherty or set up so I

00:34:30,100 --> 00:34:38,139
have a I have tests which fail in some

00:34:34,210 --> 00:34:43,090
obscure way and daugher and neither I

00:34:38,139 --> 00:34:45,429
nor upstream have the motivation to fix

00:34:43,090 --> 00:34:48,669
a program to run in docker which no user

00:34:45,429 --> 00:34:52,929
will ever run in darker because it's

00:34:48,669 --> 00:34:54,340
interactive well okay that's my take on

00:34:52,929 --> 00:34:57,550
it obviously other people might differ

00:34:54,340 --> 00:34:59,800
but so that's a blocker for me for using

00:34:57,550 --> 00:35:02,859
salsa ci is that I have a test suite

00:34:59,800 --> 00:35:05,140
which works fine for me but won't run a

00:35:02,859 --> 00:35:08,590
docker and in building time you mean or

00:35:05,140 --> 00:35:11,820
alt effects test I mean it works fine

00:35:08,590 --> 00:35:16,240
for me if I run it interactively or

00:35:11,820 --> 00:35:21,340
yeah we can actually we're using darker

00:35:16,240 --> 00:35:23,230
base because it is easier to set up but

00:35:21,340 --> 00:35:26,470
we can change that actually we were

00:35:23,230 --> 00:35:29,950
using in outer package days before we

00:35:26,470 --> 00:35:33,430
were using darker base image but now we

00:35:29,950 --> 00:35:36,100
are using Aleksey like debian see i'd

00:35:33,430 --> 00:35:39,550
ask because we have many difference

00:35:36,100 --> 00:35:42,280
between the docker base image and the

00:35:39,550 --> 00:35:45,760
way that they are running and and now we

00:35:42,280 --> 00:35:48,970
solve like ten issues in a row changing

00:35:45,760 --> 00:35:51,910
the way that we are deploying or running

00:35:48,970 --> 00:35:54,760
out the package - so yeah it is

00:35:51,910 --> 00:35:57,100
interesting if is it's not working for

00:35:54,760 --> 00:35:58,840
you and we have many issues with that we

00:35:57,100 --> 00:36:01,270
can change that so I should file an

00:35:58,840 --> 00:36:03,570
issue on salsa see I yeah sure okay

00:36:01,270 --> 00:36:03,570
thanks

00:36:09,810 --> 00:36:18,599
you know okay so what problems that

00:36:15,400 --> 00:36:24,130
we're facing is that we're using

00:36:18,599 --> 00:36:26,520
containers unprivileged containers and

00:36:24,130 --> 00:36:28,990
some tests failure because of that so

00:36:26,520 --> 00:36:31,510
are you facing anything like that with

00:36:28,990 --> 00:36:33,820
Lexi or you're not testing and

00:36:31,510 --> 00:36:42,460
privileges Lexi containers using those

00:36:33,820 --> 00:36:44,950
for tests for auto package says yeah yet

00:36:42,460 --> 00:36:46,960
we know how many issues yet I don't know

00:36:44,950 --> 00:36:48,760
if you want to try and you find and you

00:36:46,960 --> 00:36:50,830
should just open oh yeah because like

00:36:48,760 --> 00:36:53,740
chorus singing pacemaker anything that

00:36:50,830 --> 00:36:56,220
would change like you know PR limits and

00:36:53,740 --> 00:36:59,890
things like that would require special

00:36:56,220 --> 00:37:05,410
privileges you know yeah the machines

00:36:59,890 --> 00:37:08,380
oh yeah the machine inside of the

00:37:05,410 --> 00:37:10,510
runners are par metal machines and okay

00:37:08,380 --> 00:37:13,320
yeah you you can show your fa whatever

00:37:10,510 --> 00:37:13,320
you need yeah

00:37:19,950 --> 00:37:27,060
any more questions anything else

00:37:29,730 --> 00:37:39,039
all right thank you very much August

00:37:31,960 --> 00:37:39,039

YouTube URL: https://www.youtube.com/watch?v=HuS3EitUmuE


