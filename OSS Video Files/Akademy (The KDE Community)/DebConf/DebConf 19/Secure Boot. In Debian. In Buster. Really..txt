Title: Secure Boot. In Debian. In Buster. Really.
Publication date: 2019-08-04
Playlist: DebConf 19
Description: 
	by Steve McIntyre

At: DebConf19
https://debconf19.debconf.org/talks/100-secure-boot-in-debian-in-buster-really/

UEFI Secure Boot has been a long journey in Debian

We started talking about it in 2012, maybe earlier.

We now have it up and running, on 3 different architectures. Let's celebrate that.

Some topics to discuss:

- why did it take so long?
- how does it work?
- what are the implications?
- should you trust it?
- what happens next?

Room: MiniauditÃ³rio
Scheduled start: 2019-07-21 13:30:00
Captions: 
	00:00:05,150 --> 00:00:11,180
welcome to the next session um mixed up

00:00:08,389 --> 00:00:14,330
we have the one loli the member of all

00:00:11,180 --> 00:00:17,300
the team slits the rock entire talking

00:00:14,330 --> 00:00:24,829
about secure breach in Debian investor

00:00:17,300 --> 00:00:25,610
really hi folks how is everybody this

00:00:24,829 --> 00:00:27,829
afternoon

00:00:25,610 --> 00:00:29,390
one awesome time to get the first

00:00:27,829 --> 00:00:31,369
session straight after lunch on the

00:00:29,390 --> 00:00:36,440
first day hopefully I'm not going to

00:00:31,369 --> 00:00:39,800
send people to sleep too much so secure

00:00:36,440 --> 00:00:41,960
boot as I say on most of my sessions

00:00:39,800 --> 00:00:45,230
this is above this is not just me

00:00:41,960 --> 00:00:47,510
talking please if you have questions or

00:00:45,230 --> 00:00:51,199
comments hopefully not what and fruit

00:00:47,510 --> 00:00:53,420
book we'll see please shout up there I

00:00:51,199 --> 00:00:55,339
want this to be a discussion if you have

00:00:53,420 --> 00:00:59,030
questions about anything of what we have

00:00:55,339 --> 00:01:01,579
please say so usual things apply please

00:00:59,030 --> 00:01:03,379
grab a mic because otherwise people on

00:01:01,579 --> 00:01:05,330
the video won't be able to hear you but

00:01:03,379 --> 00:01:06,650
we want this to be an open session they

00:01:05,330 --> 00:01:11,000
sit you know we're doing this in the

00:01:06,650 --> 00:01:13,640
open I'm going to go through briefly not

00:01:11,000 --> 00:01:16,580
in great technical detail what UEFI

00:01:13,640 --> 00:01:18,830
secure boot is I'm going to describe how

00:01:16,580 --> 00:01:22,850
it works in the Linux world and how it

00:01:18,830 --> 00:01:24,680
works in Debian we have some not-so-good

00:01:22,850 --> 00:01:27,740
bits we have some good bits I'm going to

00:01:24,680 --> 00:01:30,740
go through this there is a gobby

00:01:27,740 --> 00:01:34,720
document sorry microphone is mobile

00:01:30,740 --> 00:01:37,970
there is a gobby document as well please

00:01:34,720 --> 00:01:41,210
put some notes in there tomorrow the

00:01:37,970 --> 00:01:43,820
front has already volunteered to help I

00:01:41,210 --> 00:01:46,100
will do my usual thing of posting a

00:01:43,820 --> 00:01:48,230
summary of the session to the Debian

00:01:46,100 --> 00:01:50,840
mailing lists at some point in the

00:01:48,230 --> 00:01:55,010
future when they get around to it you

00:01:50,840 --> 00:01:58,880
know I like to share what we have so

00:01:55,010 --> 00:02:02,060
what is secure boot

00:01:58,880 --> 00:02:04,640
purely and simply it is a way for the

00:02:02,060 --> 00:02:07,970
firmware of your computer to validate

00:02:04,640 --> 00:02:11,870
that the binary zero link of the white

00:02:07,970 --> 00:02:15,500
ones and there they are not infested

00:02:11,870 --> 00:02:18,620
with malware the way that that works is

00:02:15,500 --> 00:02:23,210
there is a chain of signatures which can

00:02:18,620 --> 00:02:25,100
be validated I will go into more detail

00:02:23,210 --> 00:02:28,100
later on exactly how it works if people

00:02:25,100 --> 00:02:29,960
want but fundamentally we who in this

00:02:28,100 --> 00:02:34,190
room doesn't understand how public key

00:02:29,960 --> 00:02:36,020
crypto works who in this room claims

00:02:34,190 --> 00:02:42,410
that they understand fully how public

00:02:36,020 --> 00:02:45,050
key crypto works so this is not meant to

00:02:42,410 --> 00:02:48,560
be a way of locking down your system

00:02:45,050 --> 00:02:52,220
completely the point of UEFI secure boot

00:02:48,560 --> 00:02:53,870
is to stop boot time malware we've all

00:02:52,220 --> 00:02:57,770
heard of the problems in the past with

00:02:53,870 --> 00:02:58,790
boot sector viruses and that kind of

00:02:57,770 --> 00:03:02,930
thing

00:02:58,790 --> 00:03:06,470
this is an attempt to solve that problem

00:03:02,930 --> 00:03:10,910
if your compete where on your computer

00:03:06,470 --> 00:03:13,070
can modify your boot files or the boot

00:03:10,910 --> 00:03:15,110
sector then of course it used to be the

00:03:13,070 --> 00:03:17,330
case that it could then basically take

00:03:15,110 --> 00:03:19,550
over your computer forever you know if

00:03:17,330 --> 00:03:22,220
you can't trust all the way up from the

00:03:19,550 --> 00:03:25,760
firmware you never know that even before

00:03:22,220 --> 00:03:28,790
you before you if you want a Window

00:03:25,760 --> 00:03:30,470
System if you start your virus checker

00:03:28,790 --> 00:03:32,630
you don't know that you in a clean state

00:03:30,470 --> 00:03:37,280
before you start so that's where this

00:03:32,630 --> 00:03:42,260
came from it is including on just about

00:03:37,280 --> 00:03:44,000
every modern x86 machine it can also be

00:03:42,260 --> 00:03:47,360
disabled you don't have to do all this

00:03:44,000 --> 00:03:50,890
however it is a genuinely useful

00:03:47,360 --> 00:03:56,480
technology and we should be part of it

00:03:50,890 --> 00:03:59,810
so in the linux world we have as a

00:03:56,480 --> 00:04:00,769
community all come together around one

00:03:59,810 --> 00:04:03,769
piece of software

00:04:00,769 --> 00:04:07,370
Matthew Garrett started the shim project

00:04:03,769 --> 00:04:09,200
years ago it has a very very simple job

00:04:07,370 --> 00:04:13,580
in in life it

00:04:09,200 --> 00:04:16,580
is a tiny well understood well reviewed

00:04:13,580 --> 00:04:19,850
piece of software that the Linux

00:04:16,580 --> 00:04:25,640
community work together on it is then

00:04:19,850 --> 00:04:28,270
signed and it then carries on the chain

00:04:25,640 --> 00:04:30,590
of trust to the next set of binaries

00:04:28,270 --> 00:04:32,830
there's a reason for this not come to

00:04:30,590 --> 00:04:35,270
them in a moment

00:04:32,830 --> 00:04:40,070
main thing is it is a collaborative

00:04:35,270 --> 00:04:42,860
project since I got into the EFI team in

00:04:40,070 --> 00:04:45,290
Debian and started working with EFI

00:04:42,860 --> 00:04:47,600
maintainer x' across the other distros

00:04:45,290 --> 00:04:50,750
I've ended up getting into the team that

00:04:47,600 --> 00:04:53,720
reviews all the peoples patches - as you

00:04:50,750 --> 00:04:57,020
can see in theory when secure boot

00:04:53,720 --> 00:05:00,560
started Microsoft set themselves up as a

00:04:57,020 --> 00:05:02,030
CA not really not so they could lock

00:05:00,560 --> 00:05:04,100
down the computer and stop Linux

00:05:02,030 --> 00:05:06,110
happening they had a problem with boot

00:05:04,100 --> 00:05:09,110
sector viruses they are entirely happy

00:05:06,110 --> 00:05:12,770
for other people to use the same

00:05:09,110 --> 00:05:15,800
technology what eventually became clear

00:05:12,770 --> 00:05:18,830
over time was Microsoft have no idea how

00:05:15,800 --> 00:05:21,230
to review a shim binary they've missed

00:05:18,830 --> 00:05:24,050
it you know so in the end they came back

00:05:21,230 --> 00:05:28,940
- at the the team who were maintaining

00:05:24,050 --> 00:05:31,580
shim to say please tell us that this

00:05:28,940 --> 00:05:34,190
binary or that this source and binary

00:05:31,580 --> 00:05:36,680
that somebody has given us actually is a

00:05:34,190 --> 00:05:39,380
sensible shim and then will go and sign

00:05:36,680 --> 00:05:43,070
it so I'm now part of the team that does

00:05:39,380 --> 00:05:48,890
that so along with Peter Jones at Red

00:05:43,070 --> 00:05:51,110
Hat and mature at canonical and a bunch

00:05:48,890 --> 00:05:54,830
of other people you know we're working

00:05:51,110 --> 00:05:58,280
together this is good stuff shim

00:05:54,830 --> 00:06:01,130
literally embeds further keys and then

00:05:58,280 --> 00:06:03,980
loads more binaries the binary that it

00:06:01,130 --> 00:06:06,850
wants to load is grub because that's

00:06:03,980 --> 00:06:10,060
what every what everybody is using

00:06:06,850 --> 00:06:12,370
the point of shim is that we can get

00:06:10,060 --> 00:06:15,130
away from having to have say microsoft

00:06:12,370 --> 00:06:17,710
signing grub they don't want to sign up

00:06:15,130 --> 00:06:20,530
because it's GPL free and they don't

00:06:17,710 --> 00:06:22,990
like it which is it's up to them what

00:06:20,530 --> 00:06:26,230
they will do is sign shim and the shim

00:06:22,990 --> 00:06:29,460
that debian or Ubuntu or fedora or

00:06:26,230 --> 00:06:33,310
whoever chip will have embedded keys

00:06:29,460 --> 00:06:36,100
that we know that we trust so for

00:06:33,310 --> 00:06:38,320
example in our same binary we have 8 a

00:06:36,100 --> 00:06:44,170
debian root certificate a Debian public

00:06:38,320 --> 00:06:46,930
key you can also using at the mock the

00:06:44,170 --> 00:06:49,660
Machine owner key embed your own

00:06:46,930 --> 00:06:51,190
signatures you want even if you if you

00:06:49,660 --> 00:06:53,740
want to use secure boot you can

00:06:51,190 --> 00:06:55,540
literally turn off everything else in

00:06:53,740 --> 00:06:57,730
the system and just have the system so

00:06:55,540 --> 00:06:59,560
you can support your keys this is a

00:06:57,730 --> 00:07:01,590
really useful powerful thing and I'll

00:06:59,560 --> 00:07:07,090
come back to it later

00:07:01,590 --> 00:07:09,580
so our shim contains a public key

00:07:07,090 --> 00:07:13,960
we have signatures using that key on

00:07:09,580 --> 00:07:18,040
grub and on linux and on the phone will

00:07:13,960 --> 00:07:21,940
update tools we could potentially sign

00:07:18,040 --> 00:07:24,190
other things directly if we need to if

00:07:21,940 --> 00:07:26,110
you think that you have stuff that

00:07:24,190 --> 00:07:29,710
genuinely needs to be run and trusted

00:07:26,110 --> 00:07:30,460
here talk to us we can add you will need

00:07:29,710 --> 00:07:33,100
convincing

00:07:30,460 --> 00:07:35,590
of course because anything that is

00:07:33,100 --> 00:07:38,890
signed here will have to have good

00:07:35,590 --> 00:07:42,010
security with you for obvious reasons if

00:07:38,890 --> 00:07:45,790
you do go through the secure boot route

00:07:42,010 --> 00:07:47,650
if you have enabled secure boot on your

00:07:45,790 --> 00:07:49,960
system then that will also of course

00:07:47,650 --> 00:07:53,640
give you who strictures on functionality

00:07:49,960 --> 00:07:53,640
to go with that security

00:07:55,580 --> 00:08:02,850
you will not so you will not be able to

00:07:59,730 --> 00:08:04,950
run unsigned kernels this has been a

00:08:02,850 --> 00:08:08,730
bone of contention in the past a bun to

00:08:04,950 --> 00:08:12,260
shipped with a shim that sorry with a

00:08:08,730 --> 00:08:14,580
grub that would run unsigned kernels and

00:08:12,260 --> 00:08:16,980
it's not what the rest the community

00:08:14,580 --> 00:08:19,890
agreed agreed with they've changed that

00:08:16,980 --> 00:08:23,190
policy since the white answer is if you

00:08:19,890 --> 00:08:24,600
have got secure boots enabled in it you

00:08:23,190 --> 00:08:26,640
know in your city in your platform

00:08:24,600 --> 00:08:28,560
firmware this is what you offer you what

00:08:26,640 --> 00:08:30,810
you're signing up to if you don't want

00:08:28,560 --> 00:08:33,870
this turnoff secure boot it's it's an

00:08:30,810 --> 00:08:36,750
easy choice there are other things that

00:08:33,870 --> 00:08:41,099
you get you don't get to run at the

00:08:36,750 --> 00:08:42,780
moment non free kernel modules though

00:08:41,099 --> 00:08:45,060
always around this that would involve

00:08:42,780 --> 00:08:48,240
you signing those modules yourself on

00:08:45,060 --> 00:08:51,090
your system and then telling and then

00:08:48,240 --> 00:08:53,760
using those saying that signature via

00:08:51,090 --> 00:08:55,380
the machine owner key set up you can

00:08:53,760 --> 00:08:58,110
then tell your system to trust those

00:08:55,380 --> 00:08:59,910
this is not as well automated as it

00:08:58,110 --> 00:09:00,510
should be it's something we will improve

00:08:59,910 --> 00:09:02,850
over time

00:09:00,510 --> 00:09:06,950
one thing that does surprise people is

00:09:02,850 --> 00:09:06,950
you will not get hibernation here

00:09:07,190 --> 00:09:13,140
there's a chicken and egg situation and

00:09:09,630 --> 00:09:15,150
in that all of the state of your system

00:09:13,140 --> 00:09:18,930
is in there is dumped into the

00:09:15,150 --> 00:09:22,050
hibernation file therefore how do you

00:09:18,930 --> 00:09:24,720
secure the hibernation file with

00:09:22,050 --> 00:09:26,280
information that's not inside it you

00:09:24,720 --> 00:09:28,980
know it's very difficult for a system

00:09:26,280 --> 00:09:31,650
coming up clean coming up cold to know

00:09:28,980 --> 00:09:33,180
that it can trust that I'm sure that

00:09:31,650 --> 00:09:35,880
white people will come up with better

00:09:33,180 --> 00:09:38,700
answers but for now if you have secure

00:09:35,880 --> 00:09:42,410
boot enabled the kernel will say no when

00:09:38,700 --> 00:09:44,820
you ask to hibernate there were more

00:09:42,410 --> 00:09:45,900
there is documentation about this I'm

00:09:44,820 --> 00:09:49,820
not going to bore you with all the

00:09:45,900 --> 00:09:53,040
details but again these are reasonable

00:09:49,820 --> 00:09:55,020
restrictions based around security you

00:09:53,040 --> 00:09:57,680
can turn them off as well but these are

00:09:55,020 --> 00:09:57,680
the defaults

00:09:59,490 --> 00:10:05,690
is this supporting in Debian yes finally

00:10:08,959 --> 00:10:15,839
literally as of this year we have

00:10:12,270 --> 00:10:19,350
everything deployed such that it should

00:10:15,839 --> 00:10:21,930
all work so what does that mean

00:10:19,350 --> 00:10:24,959
we have the support for three Debian

00:10:21,930 --> 00:10:31,050
architectures that is AMD 64

00:10:24,959 --> 00:10:32,700
I 386 and on 64 99.999% of the systems

00:10:31,050 --> 00:10:35,790
that you're going to play with with this

00:10:32,700 --> 00:10:37,320
are going to be AMD 64 but hey we're

00:10:35,790 --> 00:10:41,430
Debian we don't just do single

00:10:37,320 --> 00:10:42,870
architectures I three eight six there

00:10:41,430 --> 00:10:46,529
are genuinely some systems out there

00:10:42,870 --> 00:10:48,390
that have it although only it's only a

00:10:46,529 --> 00:10:51,060
fairly small number because of course I

00:10:48,390 --> 00:10:56,279
new wife I through eight six systems are

00:10:51,060 --> 00:10:58,760
quite rare these days on 64 has for

00:10:56,279 --> 00:11:01,770
bigger systems that said server boxes

00:10:58,760 --> 00:11:04,110
absolutely can support secure boot but

00:11:01,770 --> 00:11:06,600
until very very recently no one has

00:11:04,110 --> 00:11:08,880
actually sort worked out how to do or

00:11:06,600 --> 00:11:11,040
has volunteered to be the CA

00:11:08,880 --> 00:11:13,230
underpinning it in the end

00:11:11,040 --> 00:11:15,000
Microsoft has said they'll do this - it

00:11:13,230 --> 00:11:20,130
hasn't propagated to many new machines

00:11:15,000 --> 00:11:22,230
it will be coming soon the packaging in

00:11:20,130 --> 00:11:24,690
the tall the signed packages and

00:11:22,230 --> 00:11:27,540
everything in Debian are all done using

00:11:24,690 --> 00:11:29,220
recommends be aware of this if you're

00:11:27,540 --> 00:11:32,610
one of the people one of the control

00:11:29,220 --> 00:11:35,640
freaks who does not you always use is no

00:11:32,610 --> 00:11:37,890
install recommends without you will not

00:11:35,640 --> 00:11:39,570
get this out of the box that's fine and

00:11:37,890 --> 00:11:41,370
there's a reason for this is we

00:11:39,570 --> 00:11:43,920
understand not everybody wants these

00:11:41,370 --> 00:11:45,540
extra packages not everybody agrees with

00:11:43,920 --> 00:11:47,970
them we're not going to force you to

00:11:45,540 --> 00:11:52,649
have all of the all of these signatures

00:11:47,970 --> 00:11:55,440
and all of the secure boot path set up

00:11:52,649 --> 00:11:57,810
but it is there you will get it by

00:11:55,440 --> 00:11:59,550
default on new installations again you

00:11:57,810 --> 00:12:03,450
can remove them because it's not hard

00:11:59,550 --> 00:12:06,570
dependencies the key thing is obviously

00:12:03,450 --> 00:12:08,060
we want this to work invisibly if you

00:12:06,570 --> 00:12:10,860
notice that there's something wrong

00:12:08,060 --> 00:12:11,980
modulo hibernation doesn't work or

00:12:10,860 --> 00:12:15,580
something then

00:12:11,980 --> 00:12:19,270
failed of course so we already have with

00:12:15,580 --> 00:12:22,360
Buster we have all of our di images just

00:12:19,270 --> 00:12:24,850
work with secure boot we have our live

00:12:22,360 --> 00:12:26,980
media again just working with secure

00:12:24,850 --> 00:12:28,810
boot and that will they will both

00:12:26,980 --> 00:12:32,710
propagate to systems that are installed

00:12:28,810 --> 00:12:34,390
using those media cloud images the cloud

00:12:32,710 --> 00:12:37,210
cover some of the cloud providers are

00:12:34,390 --> 00:12:40,600
very much wanting this because they

00:12:37,210 --> 00:12:43,330
clearly wants to have security and Trust

00:12:40,600 --> 00:12:46,000
on everything that's running it's not

00:12:43,330 --> 00:12:51,160
yet totally totally pulled through it

00:12:46,000 --> 00:12:53,560
will be shortly so how do we do this in

00:12:51,160 --> 00:12:57,820
Debian infrastructure this has been the

00:12:53,560 --> 00:13:01,600
fun part we had many many variations on

00:12:57,820 --> 00:13:04,450
this but here was where we got to we

00:13:01,600 --> 00:13:07,210
have four for those packages were

00:13:04,450 --> 00:13:09,400
signing matters we will have signed and

00:13:07,210 --> 00:13:13,090
unsigned versions of the packages they

00:13:09,400 --> 00:13:14,860
may not always be labeled as such for

00:13:13,090 --> 00:13:16,870
example the Linux packages now the

00:13:14,860 --> 00:13:20,800
binaries do not mention that they're

00:13:16,870 --> 00:13:23,010
signed but they are but the packages

00:13:20,800 --> 00:13:26,980
that come from the unsigned Linux source

00:13:23,010 --> 00:13:30,610
will be labeled as unsigned we have Shem

00:13:26,980 --> 00:13:34,090
and Shem signed we have grub and grub

00:13:30,610 --> 00:13:38,920
signed and so on the way that we do this

00:13:34,090 --> 00:13:41,170
is really complicated on first

00:13:38,920 --> 00:13:43,900
acquaintance but it does work and it is

00:13:41,170 --> 00:13:47,610
understandable and we are reasonably

00:13:43,900 --> 00:13:50,680
happy at secure that's the whole point

00:13:47,610 --> 00:13:54,310
every source package that needs to

00:13:50,680 --> 00:13:57,160
generate signed binaries also ends up

00:13:54,310 --> 00:13:59,500
generating a set of template pseudo

00:13:57,160 --> 00:14:02,340
source packages you might has anybody

00:13:59,500 --> 00:14:05,230
seen those turning up in the archive

00:14:02,340 --> 00:14:07,780
those of us involved obviously and a few

00:14:05,230 --> 00:14:10,330
other people again

00:14:07,780 --> 00:14:12,580
this is all it doesn't really matter

00:14:10,330 --> 00:14:14,800
exactly how it works for most people but

00:14:12,580 --> 00:14:19,480
there is a path through the archive here

00:14:14,800 --> 00:14:23,020
so the as we upload our source packages

00:14:19,480 --> 00:14:24,960
we and no new binaries are built we

00:14:23,020 --> 00:14:27,660
explicitly want to

00:14:24,960 --> 00:14:29,760
we produce ability for everything that

00:14:27,660 --> 00:14:37,290
we're signing reproducibility is good

00:14:29,760 --> 00:14:42,020
yes and then once we have the binary so

00:14:37,290 --> 00:14:45,240
binary template packages in the archive

00:14:42,020 --> 00:14:49,010
the next step of the process is that a

00:14:45,240 --> 00:14:52,529
signing service running alongside DAC

00:14:49,010 --> 00:14:55,680
maintained by the FTP master team picks

00:14:52,529 --> 00:14:58,279
up on those recognizes that they they do

00:14:55,680 --> 00:15:01,290
not yet have a signature attached and

00:14:58,279 --> 00:15:05,040
we'll pull will pick out those packages

00:15:01,290 --> 00:15:07,140
pull them apart while running no code

00:15:05,040 --> 00:15:09,390
whatsoever from those packages because

00:15:07,140 --> 00:15:11,700
again any code that could be run as a

00:15:09,390 --> 00:15:13,860
potential attack literally it pulls

00:15:11,700 --> 00:15:16,649
metadata from those packages and nothing

00:15:13,860 --> 00:15:18,450
else it will go and grab the binaries

00:15:16,649 --> 00:15:21,510
that have been built by the build DS and

00:15:18,450 --> 00:15:25,320
we'll apply a signature all of the

00:15:21,510 --> 00:15:27,330
signature apparatus is as locked down as

00:15:25,320 --> 00:15:31,680
we can possibly manage the keys

00:15:27,330 --> 00:15:34,410
themselves are stored in an HSM so again

00:15:31,680 --> 00:15:37,190
this is all following best practice we

00:15:34,410 --> 00:15:40,020
genuinely genuinely do not want to see

00:15:37,190 --> 00:15:43,200
you know bad people get hold of Debian

00:15:40,020 --> 00:15:46,170
keys and masquerade their you know

00:15:43,200 --> 00:15:48,570
Trojan binaries as signed by debt signed

00:15:46,170 --> 00:15:51,630
by Debian for secure boot that would

00:15:48,570 --> 00:15:54,480
defeat the whole point what this does

00:15:51,630 --> 00:15:57,630
mean is there were two built deep asses

00:15:54,480 --> 00:16:00,060
here because of course what the

00:15:57,630 --> 00:16:04,350
co-signing service then does it then

00:16:00,060 --> 00:16:06,779
pushes back a new source package which

00:16:04,350 --> 00:16:09,540
literally just contains the the of the

00:16:06,779 --> 00:16:12,000
binaries and signatures that can then go

00:16:09,540 --> 00:16:15,990
back to a build D to be put together and

00:16:12,000 --> 00:16:18,360
job done if anybody wants to have a look

00:16:15,990 --> 00:16:20,790
at this obviously all of the details are

00:16:18,360 --> 00:16:24,089
available we have deliberately gone

00:16:20,790 --> 00:16:26,700
through and documented a lot of this you

00:16:24,089 --> 00:16:28,800
know transparency around what we're

00:16:26,700 --> 00:16:30,230
doing with security is a really really

00:16:28,800 --> 00:16:33,540
important thing

00:16:30,230 --> 00:16:36,090
so the awkward bits

00:16:33,540 --> 00:16:39,600
it's take it was a very very long time

00:16:36,090 --> 00:16:42,450
to make this work I remember standing on

00:16:39,600 --> 00:16:45,060
the stage seven years ago at Def Con

00:16:42,450 --> 00:16:50,450
12 in Nicaragua are talking about secure

00:16:45,060 --> 00:16:50,450
boot why is it taken seven years

00:16:50,810 --> 00:16:58,290
the answer is it's awkward

00:16:55,140 --> 00:17:02,160
it has needed cross team collaboration

00:16:58,290 --> 00:17:04,020
in Debian between people form at least

00:17:02,160 --> 00:17:07,800
five different teams I'm sure I've

00:17:04,020 --> 00:17:09,990
missed somebody please point out anyone

00:17:07,800 --> 00:17:12,030
if you think I have missed anyone none

00:17:09,990 --> 00:17:14,790
of this is blamed bleep believe me I'm

00:17:12,030 --> 00:17:19,949
not trying to blame anyone here Debian

00:17:14,790 --> 00:17:22,020
is great when we can scale with lots and

00:17:19,949 --> 00:17:24,000
lots of individual people who don't need

00:17:22,020 --> 00:17:26,610
to block on each other you know that's

00:17:24,000 --> 00:17:29,220
how we managed to have a thousand or so

00:17:26,610 --> 00:17:31,620
Dedes all doing lots of work if we all

00:17:29,220 --> 00:17:33,830
have to ask for approval from everybody

00:17:31,620 --> 00:17:38,190
else we'd have died years ago

00:17:33,830 --> 00:17:42,120
the difficult piece is when we have busy

00:17:38,190 --> 00:17:46,350
people from busy teams not quite syncing

00:17:42,120 --> 00:17:48,210
up and we had several different possible

00:17:46,350 --> 00:17:50,280
designs on how to do this

00:17:48,210 --> 00:17:52,230
which would go through and we think oh

00:17:50,280 --> 00:17:54,930
yes that might work that might work and

00:17:52,230 --> 00:17:56,880
then the person from the one team who

00:17:54,930 --> 00:17:58,830
couldn't have been there at the meeting

00:17:56,880 --> 00:18:01,140
or you know at a DEFCON for reading

00:17:58,830 --> 00:18:03,950
email or whatever would point out

00:18:01,140 --> 00:18:07,730
actually a fatal flaw in our design and

00:18:03,950 --> 00:18:11,250
going around that multiple times was a

00:18:07,730 --> 00:18:15,990
little bit demotivating I think you know

00:18:11,250 --> 00:18:19,830
I think it's fair to say eventually what

00:18:15,990 --> 00:18:23,220
were we got - last year we had a sprint

00:18:19,830 --> 00:18:25,290
in Germany in April and we got people

00:18:23,220 --> 00:18:28,710
from all of the white teams around them

00:18:25,290 --> 00:18:32,340
around the table together and suddenly

00:18:28,710 --> 00:18:34,890
big win we got a design that worked

00:18:32,340 --> 00:18:37,350
people could actually give good feedback

00:18:34,890 --> 00:18:39,330
on the design in minutes rather than

00:18:37,350 --> 00:18:41,610
weeks and it's amazing how much

00:18:39,330 --> 00:18:44,300
difference that makes and that's what

00:18:41,610 --> 00:18:44,300
this is where we got to

00:18:45,260 --> 00:18:53,430
it is genuinely amazing how much effort

00:18:50,010 --> 00:18:55,350
has gone into this and thank you to

00:18:53,430 --> 00:18:59,550
everybody who's been involved I will

00:18:55,350 --> 00:19:02,480
start naming names later there were all

00:18:59,550 --> 00:19:10,350
the awkward awkward bits about this

00:19:02,480 --> 00:19:12,500
who likes OpenSSL so OpenSSL is a fruit

00:19:10,350 --> 00:19:16,290
is a good example of a security-related

00:19:12,500 --> 00:19:18,270
software which is in my opinion least

00:19:16,290 --> 00:19:21,360
and I've heard this many matching

00:19:18,270 --> 00:19:23,520
opinions is terrible to use it's very

00:19:21,360 --> 00:19:25,560
difficult and till you an expert in it

00:19:23,520 --> 00:19:28,350
actually understanding how you're meant

00:19:25,560 --> 00:19:30,480
to use it is hard if you try to use it

00:19:28,350 --> 00:19:32,790
without that knowledge you'll typically

00:19:30,480 --> 00:19:36,090
get it wrong and you might actually end

00:19:32,790 --> 00:19:37,650
up not generating the security you're

00:19:36,090 --> 00:19:41,370
after which is the whole point of using

00:19:37,650 --> 00:19:43,950
it in the first place now imagine the

00:19:41,370 --> 00:19:46,710
tooling around secure boot instead of

00:19:43,950 --> 00:19:48,840
the thousands or tens of thousands of

00:19:46,710 --> 00:19:50,370
users around the world who've been using

00:19:48,840 --> 00:19:53,490
this and knocking off the rough edges

00:19:50,370 --> 00:19:56,190
and and getting the docs updated and

00:19:53,490 --> 00:19:58,710
filing bugs imagine that kind of

00:19:56,190 --> 00:20:01,470
software with about 50 and this is

00:19:58,710 --> 00:20:04,650
probably an over estimate maybe 50 users

00:20:01,470 --> 00:20:06,900
worldwide and you can imagine what we're

00:20:04,650 --> 00:20:08,130
talking about I'm not trying to sound be

00:20:06,900 --> 00:20:10,410
nasty about the people who've written

00:20:08,130 --> 00:20:11,570
these tools I understand exactly how

00:20:10,410 --> 00:20:15,750
this works

00:20:11,570 --> 00:20:17,850
it's difficult to get good software

00:20:15,750 --> 00:20:20,040
without more people using it and more

00:20:17,850 --> 00:20:21,930
people buying in we all understand free

00:20:20,040 --> 00:20:23,370
software it works better when you

00:20:21,930 --> 00:20:26,610
collaborate and when you can share your

00:20:23,370 --> 00:20:29,010
ideas what I found during the Buster

00:20:26,610 --> 00:20:31,470
cycle was I had my ended up being bitten

00:20:29,010 --> 00:20:34,800
by bugs in two different tool chains

00:20:31,470 --> 00:20:37,260
around this PE sign and SP sign tool

00:20:34,800 --> 00:20:40,500
that needed fixing before I could

00:20:37,260 --> 00:20:43,380
actually get on with getting our signed

00:20:40,500 --> 00:20:48,330
chin into Debian for the Buster release

00:20:43,380 --> 00:20:51,660
that was slightly unfortunate of course

00:20:48,330 --> 00:20:54,600
the other things that we have is because

00:20:51,660 --> 00:20:57,290
we have more firmware involved we're

00:20:54,600 --> 00:21:03,260
gonna find more firmware bugs

00:20:57,290 --> 00:21:05,900
one of the more unfortunate things that

00:21:03,260 --> 00:21:09,020
we find with UEFI compared to old

00:21:05,900 --> 00:21:11,090
old-school BIOS boot is because of his

00:21:09,020 --> 00:21:13,190
more software involved there is more

00:21:11,090 --> 00:21:14,810
scope for bugs and until lots more

00:21:13,190 --> 00:21:16,700
people have been using this and found

00:21:14,810 --> 00:21:18,800
the bugs we're going to carry on finding

00:21:16,700 --> 00:21:21,110
them there's all kinds of obscure things

00:21:18,800 --> 00:21:23,780
there are going to be similar problems

00:21:21,110 --> 00:21:26,450
with secure boot I know there are but

00:21:23,780 --> 00:21:29,420
all we can do is is find that this fix

00:21:26,450 --> 00:21:31,880
them as we find them as I mentioned

00:21:29,420 --> 00:21:35,270
earlier there is another problem with

00:21:31,880 --> 00:21:37,400
non free drivers if you want to

00:21:35,270 --> 00:21:39,020
genuinely one non free drivers the

00:21:37,400 --> 00:21:42,260
Nvidia drivers are the most common

00:21:39,020 --> 00:21:45,320
things that people want we do need to

00:21:42,260 --> 00:21:47,600
follow through the Ubuntu folks have

00:21:45,320 --> 00:21:50,480
done some work in this place which of

00:21:47,600 --> 00:21:54,050
course is is good and free and yes we

00:21:50,480 --> 00:21:57,560
can steal it we're going to sorry yes

00:21:54,050 --> 00:21:59,330
it's madness but it's it's it's a way of

00:21:57,560 --> 00:22:00,920
fixing this and it's unfortunate

00:21:59,330 --> 00:22:02,510
obviously none of us like running on

00:22:00,920 --> 00:22:05,090
free software I hope at least in this

00:22:02,510 --> 00:22:06,560
audience but if you if you genuinely

00:22:05,090 --> 00:22:10,370
have a machine that won't work without

00:22:06,560 --> 00:22:16,670
it's not great if you then can't also

00:22:10,370 --> 00:22:18,850
get secure boot so we have some awkward

00:22:16,670 --> 00:22:21,650
bits we also have some good bits of this

00:22:18,850 --> 00:22:25,490
wouldn't it be nice and we're now seeing

00:22:21,650 --> 00:22:27,950
this if an AMD 64 machine that you just

00:22:25,490 --> 00:22:30,710
bought out of the box will just install

00:22:27,950 --> 00:22:33,740
Debian you no longer have to fight or

00:22:30,710 --> 00:22:36,320
even worse talk through your non

00:22:33,740 --> 00:22:38,270
computer savvy relatives you'll know how

00:22:36,320 --> 00:22:40,910
long you have to explain to them how to

00:22:38,270 --> 00:22:42,950
go into the BIOS with all of its scary

00:22:40,910 --> 00:22:45,790
messages and turn off the security

00:22:42,950 --> 00:22:48,560
features because none of this is good

00:22:45,790 --> 00:22:51,560
now we don't have to this is one of the

00:22:48,560 --> 00:22:53,720
main drivers for this we have better

00:22:51,560 --> 00:22:55,820
support for secured systems it's not

00:22:53,720 --> 00:22:57,710
complete end to end if you really

00:22:55,820 --> 00:23:00,170
genuinely want to have a totally

00:22:57,710 --> 00:23:03,110
lockdown system however this is part of

00:23:00,170 --> 00:23:04,970
that process if you don't want a totally

00:23:03,110 --> 00:23:07,280
lockdown system of course as I make

00:23:04,970 --> 00:23:11,030
great pains to say earlier this

00:23:07,280 --> 00:23:14,180
is all optional you can disable it you

00:23:11,030 --> 00:23:17,780
can control this user freedom really

00:23:14,180 --> 00:23:20,090
matters as I said you can genuinely go

00:23:17,780 --> 00:23:22,610
in on any system out there it's part of

00:23:20,090 --> 00:23:24,650
the required spec modulo bugs bugs

00:23:22,610 --> 00:23:29,120
happen but it's part of the spec for

00:23:24,650 --> 00:23:31,430
secure boot that you can disable all of

00:23:29,120 --> 00:23:34,490
the keys that came with it and just put

00:23:31,430 --> 00:23:36,920
your own in so at that point you get to

00:23:34,490 --> 00:23:39,110
choose what programs your system is

00:23:36,920 --> 00:23:42,020
running straight from firmware I think

00:23:39,110 --> 00:23:44,620
that's an awesome thing hopefully it

00:23:42,020 --> 00:23:48,800
works for you guys too

00:23:44,620 --> 00:23:50,180
so thank you to everybody I am going to

00:23:48,800 --> 00:23:51,890
go into imbalance people there are

00:23:50,180 --> 00:24:04,960
several people in the room who work on

00:23:51,890 --> 00:24:06,860
this so stand up don't everybody is here

00:24:04,960 --> 00:24:09,500
believe me this is that this is

00:24:06,860 --> 00:24:11,540
absolutely the point where I got to do

00:24:09,500 --> 00:24:13,190
the end bits of this and tie the last

00:24:11,540 --> 00:24:15,950
few bits together and push stuff through

00:24:13,190 --> 00:24:20,360
the archive we had a lot of people

00:24:15,950 --> 00:24:24,200
Tallis Helen Luke we had been hutchings

00:24:20,360 --> 00:24:28,220
we had gannis we have hangs gar we had

00:24:24,200 --> 00:24:29,720
oh well yeah we had who else we had

00:24:28,220 --> 00:24:31,970
people from the release team who were

00:24:29,720 --> 00:24:34,580
working through this with us as well it

00:24:31,970 --> 00:24:36,530
is genuinely a multi team effort I'm

00:24:34,580 --> 00:24:39,050
standing at the stage here today to talk

00:24:36,530 --> 00:24:41,450
about this because I want to share that

00:24:39,050 --> 00:24:44,180
love with everybody you know it was a

00:24:41,450 --> 00:24:45,560
lot of work don't get me wrong and it's

00:24:44,180 --> 00:24:47,540
one of those it was a lot of work even

00:24:45,560 --> 00:24:49,480
when even when I thought yeah it's just

00:24:47,540 --> 00:24:52,340
about done it then took a lot more work

00:24:49,480 --> 00:24:55,370
it's in its final bit of polish that

00:24:52,340 --> 00:24:56,780
takes the effort but genuinely I am over

00:24:55,370 --> 00:24:59,510
the moon this is a feature we've been

00:24:56,780 --> 00:25:03,080
trying to land for really more years

00:24:59,510 --> 00:25:04,970
than I care to think about so hopefully

00:25:03,080 --> 00:25:08,300
it's a good feature everybody's happy

00:25:04,970 --> 00:25:10,220
with so is there anything else people

00:25:08,300 --> 00:25:12,650
would like to talk people would like to

00:25:10,220 --> 00:25:14,300
talk about wow I really have taken quite

00:25:12,650 --> 00:25:16,930
a bit a bit more time than I thought

00:25:14,300 --> 00:25:16,930
with those slides

00:25:17,080 --> 00:25:20,410
talk to us what would you like what

00:25:19,120 --> 00:25:22,750
would you like to know what would you

00:25:20,410 --> 00:25:25,530
like to say but obviously with a

00:25:22,750 --> 00:25:25,530
microphone please

00:25:28,620 --> 00:25:46,090
stunned silence we have one it's not so

00:25:42,730 --> 00:25:49,150
much question as comment and sorry I'm

00:25:46,090 --> 00:25:52,960
not trying to take over this but I try

00:25:49,150 --> 00:25:55,330
to play with it I have this charisma

00:25:52,960 --> 00:25:57,910
laptop so they don't use secure boot and

00:25:55,330 --> 00:26:02,410
Wafi but they use coreboot so I try to

00:25:57,910 --> 00:26:07,300
play and some some of my notices

00:26:02,410 --> 00:26:09,910
basically a secure boot if I and and ofe

00:26:07,300 --> 00:26:12,010
correct me if I'm wrong did that keys

00:26:09,910 --> 00:26:15,220
are embedded into corners so they are

00:26:12,010 --> 00:26:19,390
not in separate files and and they use

00:26:15,220 --> 00:26:22,260
special binary format in in this core

00:26:19,390 --> 00:26:24,970
boot and stuff basically they put keys

00:26:22,260 --> 00:26:30,310
directly as separate files so basically

00:26:24,970 --> 00:26:32,670
they say they as sa a 2256 or something

00:26:30,310 --> 00:26:37,060
and then they sign this so so this is

00:26:32,670 --> 00:26:38,890
this is separate I I was hoping that it

00:26:37,060 --> 00:26:42,130
would be able to use the same key and

00:26:38,890 --> 00:26:44,740
then sign and then strata change this

00:26:42,130 --> 00:26:47,410
score boot to do this it was not working

00:26:44,740 --> 00:26:50,980
and now it's a shame yeah unfortunately

00:26:47,410 --> 00:26:54,700
so so it will require more time more

00:26:50,980 --> 00:26:57,910
effort is it still the the core boot

00:26:54,700 --> 00:26:59,560
from this purism it's still in bed so

00:26:57,910 --> 00:27:01,750
they are not even studying public policy

00:26:59,560 --> 00:27:04,870
you need to hack it a bit and they are

00:27:01,750 --> 00:27:07,810
constantly changing so fine I'm not

00:27:04,870 --> 00:27:11,530
risking this installing here because I

00:27:07,810 --> 00:27:14,260
need to have the show so this is the

00:27:11,530 --> 00:27:17,920
first cut this is we've delivered to the

00:27:14,260 --> 00:27:19,480
common case let's be honest so Dimitri

00:27:17,920 --> 00:27:22,770
was talking to me earlier as well about

00:27:19,480 --> 00:27:27,549
so why don't we have yet have secure

00:27:22,770 --> 00:27:30,369
signatures on pbc 64 binaries and on

00:27:27,549 --> 00:27:33,009
390x the answer is just we haven't got

00:27:30,369 --> 00:27:35,379
there yet we can one of the things that

00:27:33,009 --> 00:27:39,100
we wanted to do with the infrastructure

00:27:35,379 --> 00:27:41,320
for how secure boot set up was we were

00:27:39,100 --> 00:27:43,600
we knew we were planning ahead is we

00:27:41,320 --> 00:27:45,639
wanted to make it feasible to also

00:27:43,600 --> 00:27:48,909
support other authentication and

00:27:45,639 --> 00:27:50,379
signature map mechanisms if you have

00:27:48,909 --> 00:27:52,080
other things that you think we should be

00:27:50,379 --> 00:27:55,299
doing as well please talk to us

00:27:52,080 --> 00:27:57,159
obviously a patch is welcome you know

00:27:55,299 --> 00:27:58,690
will if we don't genuinely don't have

00:27:57,159 --> 00:28:03,399
those systems it's difficult for us to

00:27:58,690 --> 00:28:07,499
play with them so so far this is mostly

00:28:03,399 --> 00:28:11,049
x86 as I mentioned on 64 is is a thing

00:28:07,499 --> 00:28:13,299
lots of bigger on 64 systems or using

00:28:11,049 --> 00:28:16,330
edk - which is the reference

00:28:13,299 --> 00:28:20,440
implementation of UEFI but not all of

00:28:16,330 --> 00:28:23,109
them on the smaller systems you boot is

00:28:20,440 --> 00:28:26,169
obviously much more common the you boot

00:28:23,109 --> 00:28:27,970
folks have added EFI support and are

00:28:26,169 --> 00:28:31,389
genuinely working on secure boots as

00:28:27,970 --> 00:28:33,210
well so much as we walk your laptop and

00:28:31,389 --> 00:28:35,440
you want your server to be secured

00:28:33,210 --> 00:28:38,049
potentially with your own keys or with

00:28:35,440 --> 00:28:40,239
platform keys we can have exactly the

00:28:38,049 --> 00:28:41,889
same current type of technology securing

00:28:40,239 --> 00:28:44,519
all of you embedded devices - and

00:28:41,889 --> 00:28:48,609
wouldn't that be awesome

00:28:44,519 --> 00:28:51,340
so if yeah so designing servers actually

00:28:48,609 --> 00:28:55,239
is completely pluggable when it comes to

00:28:51,340 --> 00:28:59,080
the how it signs and how it does all of

00:28:55,239 --> 00:29:01,330
all of the verification of binaries so

00:28:59,080 --> 00:29:05,109
as long as you can get to a point where

00:29:01,330 --> 00:29:08,169
you can actually do it by hand then it

00:29:05,109 --> 00:29:10,269
should be fairly simple - to plug that

00:29:08,169 --> 00:29:11,799
into the machinery and build the

00:29:10,269 --> 00:29:14,980
template packages that do the same thing

00:29:11,799 --> 00:29:17,169
for tourism and necessary contacts and

00:29:14,980 --> 00:29:19,809
everything just as we're doing for a for

00:29:17,169 --> 00:29:21,700
secure boot yeah we also had questions

00:29:19,809 --> 00:29:24,220
or the previous step conf and else were

00:29:21,700 --> 00:29:26,169
about so could we support all the routes

00:29:24,220 --> 00:29:29,109
of trust and not just say the Microsoft

00:29:26,169 --> 00:29:32,200
keys and again absolutely we can though

00:29:29,109 --> 00:29:33,909
our ipav worries at least about having

00:29:32,200 --> 00:29:35,830
multiple sets of signatures on the same

00:29:33,909 --> 00:29:38,559
binaries but there was nothing stopping

00:29:35,830 --> 00:29:40,310
us for example having a different chip

00:29:38,559 --> 00:29:43,340
that's assigned with a different part

00:29:40,310 --> 00:29:46,940
okay and everything else will fall from

00:29:43,340 --> 00:29:49,550
there in just the same way yes

00:29:46,940 --> 00:29:52,210
hi concretely if my laptop needs

00:29:49,550 --> 00:29:56,150
non-free drivers for example for Wi-Fi

00:29:52,210 --> 00:29:56,960
is it going to work now not what is the

00:29:56,150 --> 00:29:58,850
next step

00:29:56,960 --> 00:30:03,220
sure you actually need non-free drivers

00:29:58,850 --> 00:30:04,460
for Wi-Fi or just the firmware drivers

00:30:03,220 --> 00:30:09,430
okay

00:30:04,460 --> 00:30:12,680
so again at the moment we don't have a

00:30:09,430 --> 00:30:15,710
complete solution for setting up your

00:30:12,680 --> 00:30:18,140
signatures we can talk you through it so

00:30:15,710 --> 00:30:20,660
you can sign your own non free drivers

00:30:18,140 --> 00:30:22,700
and then make the systems of trust those

00:30:20,660 --> 00:30:24,350
just the same way I said the Nvidia

00:30:22,700 --> 00:30:27,380
drivers are the most common one there

00:30:24,350 --> 00:30:29,240
will be some wireless drivers it's

00:30:27,380 --> 00:30:33,320
something we're working on so it should

00:30:29,240 --> 00:30:35,060
be much better automated for now it

00:30:33,320 --> 00:30:37,550
you're better off disabling secure boot

00:30:35,060 --> 00:30:46,520
until we get there or help us work work

00:30:37,550 --> 00:30:48,920
out how to do it better thank you thanks

00:30:46,520 --> 00:30:52,070
that'll work Steve and everybody else

00:30:48,920 --> 00:30:54,560
one idea to make it better is that you

00:30:52,070 --> 00:30:57,200
would be allowing the system to have a

00:30:54,560 --> 00:31:02,180
local key that is later than the M okay

00:30:57,200 --> 00:31:04,640
so just trusted by the kernel and a list

00:31:02,180 --> 00:31:08,660
of things which are resized locally

00:31:04,640 --> 00:31:11,690
after upgrade for example I used DKMS a

00:31:08,660 --> 00:31:13,670
lot yeah and it's you know it's

00:31:11,690 --> 00:31:15,500
completely nicely automated I'm not

00:31:13,670 --> 00:31:17,540
afraid of been pushing a new kernel

00:31:15,500 --> 00:31:20,390
because my system will basically

00:31:17,540 --> 00:31:22,760
recompile stuff and you know it works

00:31:20,390 --> 00:31:25,100
like magic and if you were just adding

00:31:22,760 --> 00:31:29,090
to this DKMS stuff that it would be

00:31:25,100 --> 00:31:31,310
signing what is AKO afterwards you know

00:31:29,090 --> 00:31:33,830
just automate and click in place Network

00:31:31,310 --> 00:31:38,120
so again the kernel has a key wing it

00:31:33,830 --> 00:31:42,880
doesn't just take one key it should be

00:31:38,120 --> 00:31:46,100
inheriting the key that comes out of the

00:31:42,880 --> 00:31:47,750
out of shim through lock or whatever but

00:31:46,100 --> 00:31:49,590
yes absolutely you can also add more

00:31:47,750 --> 00:31:52,420
keys

00:31:49,590 --> 00:31:54,490
we really definitely to improve the

00:31:52,420 --> 00:31:56,830
process but the point was don't do it at

00:31:54,490 --> 00:32:02,200
the UAV level do it at the kernel level

00:31:56,830 --> 00:32:04,990
half a trusted file which is a600 owned

00:32:02,200 --> 00:32:06,820
by root root and if this is there then

00:32:04,990 --> 00:32:10,180
sign it because it's still the user

00:32:06,820 --> 00:32:13,840
choice whether they know it outside then

00:32:10,180 --> 00:32:16,180
is you do it is a security risk of

00:32:13,840 --> 00:32:19,150
course having anything that is kept on

00:32:16,180 --> 00:32:21,880
the system because it does mean that

00:32:19,150 --> 00:32:24,640
anything that then gets root can then

00:32:21,880 --> 00:32:27,910
have persistent root across the next the

00:32:24,640 --> 00:32:31,120
next reboot by having a new signed

00:32:27,910 --> 00:32:33,310
binary driver it's it's a trade off it's

00:32:31,120 --> 00:32:35,290
it's it's no there's no security risk

00:32:33,310 --> 00:32:37,690
because the thing is if you have root on

00:32:35,290 --> 00:32:41,230
my books you can put stuff into my bash

00:32:37,690 --> 00:32:43,000
RC and be persistent as well you can

00:32:41,230 --> 00:32:44,770
later the point is this is going to

00:32:43,000 --> 00:32:46,000
happen potentially way from system boot

00:32:44,770 --> 00:32:49,420
before you get in

00:32:46,000 --> 00:32:50,980
it is a genuine concern III understand I

00:32:49,420 --> 00:32:54,190
know where you're coming from it's

00:32:50,980 --> 00:32:55,960
something that we were that is needs to

00:32:54,190 --> 00:32:57,700
be discussed and me but people have to

00:32:55,960 --> 00:33:00,390
understand they can may then make that

00:32:57,700 --> 00:33:00,390
decision for themselves

00:33:00,900 --> 00:33:07,960
how does work with eb PF and like system

00:33:05,050 --> 00:33:11,500
tab k probes with sine curve with sine

00:33:07,960 --> 00:33:13,780
images so basically if you load GI t

00:33:11,500 --> 00:33:16,630
image into assigned kernel like does it

00:33:13,780 --> 00:33:19,090
other any anything about having it

00:33:16,630 --> 00:33:21,220
certificate or you know because system

00:33:19,090 --> 00:33:24,640
tabs gonna create the modules and show

00:33:21,220 --> 00:33:26,980
eb pfk image just so is a complete set

00:33:24,640 --> 00:33:29,380
of lockdown patches around secure boot

00:33:26,980 --> 00:33:31,480
that disable a lot of that kind

00:33:29,380 --> 00:33:33,460
functionality just because because

00:33:31,480 --> 00:33:35,680
because of course basically if you can

00:33:33,460 --> 00:33:37,960
genuinely go and for bits of kernel

00:33:35,680 --> 00:33:40,660
memory directly you know whether whether

00:33:37,960 --> 00:33:43,240
modifying module behavior or doing all

00:33:40,660 --> 00:33:45,910
kinds of stuff exactly that at that

00:33:43,240 --> 00:33:47,920
point it's just a no you cannot do this

00:33:45,910 --> 00:33:52,000
while having security it's you know it's

00:33:47,920 --> 00:33:53,710
a hard problem okay thank you and it's a

00:33:52,000 --> 00:33:55,630
it's still an ongoing thing that people

00:33:53,710 --> 00:33:57,640
are adding more stuff to lockdown as i

00:33:55,630 --> 00:33:59,290
think about it yeah because it would

00:33:57,640 --> 00:34:02,090
have to have like they image itself

00:33:59,290 --> 00:34:06,620
signed to be loaded and the signed

00:34:02,090 --> 00:34:08,119
you know the for example are mentioned

00:34:06,620 --> 00:34:12,740
hibernation I mentioned the non free

00:34:08,119 --> 00:34:15,050
drivers automatically moving on to K

00:34:12,740 --> 00:34:18,589
exact to going onto another kernel is

00:34:15,050 --> 00:34:20,570
also problematic with secure boot it's

00:34:18,589 --> 00:34:26,230
not impossible but there are problems

00:34:20,570 --> 00:34:31,129
that you have to think about so Steve

00:34:26,230 --> 00:34:35,510
one more question to arm 64 yes we have

00:34:31,129 --> 00:34:38,030
a lot of small computers many computers

00:34:35,510 --> 00:34:39,800
in the world so I have some problems to

00:34:38,030 --> 00:34:44,089
understand where's the line between the

00:34:39,800 --> 00:34:46,280
ATF and some secure stuff signed by a by

00:34:44,089 --> 00:34:47,810
the kernel or something can you please

00:34:46,280 --> 00:34:55,820
explain a little bit how the situation

00:34:47,810 --> 00:34:58,160
is exactly sure it will it's still being

00:34:55,820 --> 00:35:01,130
defined right now is is about it's the

00:34:58,160 --> 00:35:03,440
easiest thing I can say there is work

00:35:01,130 --> 00:35:07,700
going on from a lot of groups I said the

00:35:03,440 --> 00:35:10,400
Ubik people and the boot architecture

00:35:07,700 --> 00:35:14,720
people for lots of things so all the way

00:35:10,400 --> 00:35:16,970
up from your embedded IOT devices up to

00:35:14,720 --> 00:35:21,260
your up to servers to try and give a

00:35:16,970 --> 00:35:22,760
good consistent view here ATF for those

00:35:21,260 --> 00:35:25,310
people who don't know is on trusted

00:35:22,760 --> 00:35:27,050
firmware which is the most common low

00:35:25,310 --> 00:35:29,480
level firmware piece that people will

00:35:27,050 --> 00:35:34,190
end up encountering on a lot of our when

00:35:29,480 --> 00:35:38,960
on 64 devices it is often embedded into

00:35:34,190 --> 00:35:41,660
you boot or into a dk2 or whatever as

00:35:38,960 --> 00:35:46,490
part of the platform set up for each

00:35:41,660 --> 00:35:50,270
device you will end up with a build of

00:35:46,490 --> 00:35:51,830
your firmware that will include keys the

00:35:50,270 --> 00:35:53,810
most common way that that's going to

00:35:51,830 --> 00:35:55,910
happen is they will be built in by your

00:35:53,810 --> 00:35:59,180
system vendor they're going to be

00:35:55,910 --> 00:36:01,760
they're going to be no different to an

00:35:59,180 --> 00:36:03,560
x86 you will have a builder of firmware

00:36:01,760 --> 00:36:06,410
that comes with your device and that

00:36:03,560 --> 00:36:08,839
will include public keys it will then be

00:36:06,410 --> 00:36:11,300
able to verify things from there onwards

00:36:08,839 --> 00:36:13,520
the exact mechanisms are still being

00:36:11,300 --> 00:36:15,980
worked out people are talking about how

00:36:13,520 --> 00:36:18,380
do you verify things like device

00:36:15,980 --> 00:36:20,720
three blobs as well because obviously

00:36:18,380 --> 00:36:23,450
those have a great bearing on this if

00:36:20,720 --> 00:36:25,790
you can modify the DT you can basically

00:36:23,450 --> 00:36:27,680
tell this driver go and scribble over

00:36:25,790 --> 00:36:31,820
that bit of memory and then you've got

00:36:27,680 --> 00:36:34,850
whatever access you need it's it's an

00:36:31,820 --> 00:36:36,650
ongoing discussion I appreciate that

00:36:34,850 --> 00:36:39,460
might sound wishy-washy but that's what

00:36:36,650 --> 00:36:42,530
genuinely where we are today

00:36:39,460 --> 00:36:45,650
so you mentioned several times that

00:36:42,530 --> 00:36:49,160
users will have the like the freedom to

00:36:45,650 --> 00:36:52,400
run their own signed things right so if

00:36:49,160 --> 00:36:55,910
I'm rebuilding the kernel yeah can you

00:36:52,400 --> 00:36:58,670
describe the process of getting this

00:36:55,910 --> 00:37:00,980
kernel to be just advice though or a

00:36:58,670 --> 00:37:03,200
couple of ways you can do this genuinely

00:37:00,980 --> 00:37:05,570
you can go and build your own binary

00:37:03,200 --> 00:37:08,570
kernel and you can go and sign it all

00:37:05,570 --> 00:37:10,640
you can embed a key with the kernel it's

00:37:08,570 --> 00:37:13,670
part of the kernel config and do

00:37:10,640 --> 00:37:15,890
everything that way the other way you

00:37:13,670 --> 00:37:18,500
can do it is basically you can copy what

00:37:15,890 --> 00:37:20,869
we've done in Debian if you set up an

00:37:18,500 --> 00:37:23,119
equivalent signing service and we have

00:37:20,869 --> 00:37:25,010
made sure everything again everything

00:37:23,119 --> 00:37:27,980
we've done is free and documented and

00:37:25,010 --> 00:37:29,930
open before exactly these reasons you

00:37:27,980 --> 00:37:31,850
could actually set up you until you're

00:37:29,930 --> 00:37:33,500
completely at your own completely

00:37:31,850 --> 00:37:35,390
separate or parallel signing

00:37:33,500 --> 00:37:37,940
infrastructure to basically do what

00:37:35,390 --> 00:37:40,640
we've done you would then need to have

00:37:37,940 --> 00:37:46,490
either your own shim or you would need

00:37:40,640 --> 00:37:48,020
to have to embed your own keys in the in

00:37:46,490 --> 00:37:52,430
the mock data in the mock debate

00:37:48,020 --> 00:37:58,040
database and shim or directly in the PK

00:37:52,430 --> 00:37:58,550
or kek on your in your firmware if that

00:37:58,040 --> 00:38:01,280
helps

00:37:58,550 --> 00:38:02,930
I can explain those more I don't want to

00:38:01,280 --> 00:38:05,960
go for into great gory detail about the

00:38:02,930 --> 00:38:07,910
exact key setup but once you if you can

00:38:05,960 --> 00:38:10,250
get to that level I mean particularly if

00:38:07,910 --> 00:38:12,770
you have good access to low level you

00:38:10,250 --> 00:38:14,690
can also you can blacklist you can

00:38:12,770 --> 00:38:19,430
remove the existing platform keys and

00:38:14,690 --> 00:38:21,350
have everything you own or you when you

00:38:19,430 --> 00:38:23,840
rebuild packages you'll get the unsigned

00:38:21,350 --> 00:38:26,119
ones then you manually sign them and

00:38:23,840 --> 00:38:26,780
then install that key on the system and

00:38:26,119 --> 00:38:28,910
you're good to go

00:38:26,780 --> 00:38:29,839
because when you rebuilt the packages by

00:38:28,910 --> 00:38:32,239
default you will get

00:38:29,839 --> 00:38:34,369
the unsigned ones yes and then you can

00:38:32,239 --> 00:38:36,229
just use normal Colonel signing command

00:38:34,369 --> 00:38:38,689
lines to sign it with the key that you

00:38:36,229 --> 00:38:40,369
control on the control system such that

00:38:38,689 --> 00:38:43,759
you don't have to automate it with the

00:38:40,369 --> 00:38:46,130
whole training service very good if you

00:38:43,759 --> 00:38:47,719
wanted to yes there's multiple ways

00:38:46,130 --> 00:38:49,699
we've set up with signing service

00:38:47,719 --> 00:38:51,469
because we get bored of doing manual

00:38:49,699 --> 00:38:56,569
things very fast let's be honest

00:38:51,469 --> 00:38:58,279
and the downside for the the way that we

00:38:56,569 --> 00:39:00,920
do things with Debian for example for

00:38:58,279 --> 00:39:02,599
the DI kernels is we have lots and lots

00:39:00,920 --> 00:39:04,819
and lots and lots of little separate

00:39:02,599 --> 00:39:06,259
module packages you end up having to

00:39:04,819 --> 00:39:10,039
basically sign every module

00:39:06,259 --> 00:39:12,259
independently that takes a lot of effort

00:39:10,039 --> 00:39:17,689
it takes a lot of time hence why we

00:39:12,259 --> 00:39:20,779
really want automation yeah so you said

00:39:17,689 --> 00:39:22,039
that the documentation and the materials

00:39:20,779 --> 00:39:24,559
are all there for someone to set up

00:39:22,039 --> 00:39:26,390
their own signing service sure as far as

00:39:24,559 --> 00:39:30,289
you know has anyone tried that yet I

00:39:26,390 --> 00:39:31,729
genuinely don't know from afraid we made

00:39:30,289 --> 00:39:33,650
a point of making all the stuff

00:39:31,729 --> 00:39:36,829
available and when I say it's documented

00:39:33,650 --> 00:39:38,420
it's probably not very good because no

00:39:36,829 --> 00:39:40,189
one's really spoke to us about it yet

00:39:38,420 --> 00:39:43,130
and it's a you know so it's difficult to

00:39:40,189 --> 00:39:46,099
tell but all the pieces that we've done

00:39:43,130 --> 00:39:47,719
are entirely open please go and have a

00:39:46,099 --> 00:39:50,079
look and shout at us when you if it

00:39:47,719 --> 00:39:50,079
doesn't work

00:39:55,630 --> 00:40:02,650
is that it I think that's it I hope that

00:39:59,529 --> 00:40:04,779
was useful for everyone I am around talk

00:40:02,650 --> 00:40:07,089
to us on the Debian efi mailing list or

00:40:04,779 --> 00:40:09,789
in IRC or whatever we genuinely are

00:40:07,089 --> 00:40:11,650
interested if you have a problem and you

00:40:09,789 --> 00:40:14,229
think that secure boot is not working

00:40:11,650 --> 00:40:16,479
for you on your system please tell us

00:40:14,229 --> 00:40:18,729
because again the only way we will ever

00:40:16,479 --> 00:40:21,220
be able to fix bugs is if we're told

00:40:18,729 --> 00:40:23,349
about them and we genuinely do want this

00:40:21,220 --> 00:40:25,769
to work for people this is not just a

00:40:23,349 --> 00:40:28,839
you know we're not wasting our time here

00:40:25,769 --> 00:40:31,210
but hope that was interesting and thank

00:40:28,839 --> 00:40:38,929
you thank you Steve my team

00:40:31,210 --> 00:40:38,929

YouTube URL: https://www.youtube.com/watch?v=_3mwK6AXo_k


