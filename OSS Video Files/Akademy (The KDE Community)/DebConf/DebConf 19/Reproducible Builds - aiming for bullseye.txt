Title: Reproducible Builds - aiming for bullseye
Publication date: 2019-08-05
Playlist: DebConf 19
Description: 
	by Holger Levsen
by Chris Lamb
by Vagrant Cascadian

At: DebConf19
https://debconf19.debconf.org/talks/30-reproducible-builds-aiming-for-bullseye/

The goal of this talk is to give the whole Debian community an update on the state of Reproducible Builds in Debian and in the whole free software world as well as to explain what we are aiming for the bullseye release.

It’s been 6 years since Reproducible Builds were first introduced to the Debian community at large at DebConf13 in Vaumarcus and much progress has been achieved since, yet the buster release has not really achieved reproducible builds.

In this talk we will explain the current status, explain what's missing and hopefully present workable ideas how to improve things for bullseye.

Room: Auditório
Scheduled start: 2019-07-21 16:00:00
Captions: 
	00:00:04,740 --> 00:00:12,700
hello everyone so we will have the next

00:00:07,689 --> 00:00:24,430
talk about reproducible built that will

00:00:12,700 --> 00:00:26,489
be presented now good afternoon it's

00:00:24,430 --> 00:00:31,180
fine I see so many people here today

00:00:26,489 --> 00:00:33,460
please come take a seat wave if we are

00:00:31,180 --> 00:00:37,840
to quiet or a speaking too loudly too

00:00:33,460 --> 00:00:40,570
loudly too quickly so yeah um so my name

00:00:37,840 --> 00:00:43,480
is Chris Lam this is Vegas kadian and

00:00:40,570 --> 00:00:46,000
hoggle Edison I'm here to talk about the

00:00:43,480 --> 00:00:47,770
stages of reproducible builds in Buster

00:00:46,000 --> 00:00:51,160
and aiming for bull's eye and things

00:00:47,770 --> 00:00:53,880
like that so can this light beat you

00:00:51,160 --> 00:00:53,880
down a bit please

00:01:00,910 --> 00:01:03,780
thank you

00:01:06,350 --> 00:01:10,070
good so we're gonna go through yeah

00:01:08,630 --> 00:01:13,550
three things talk about what

00:01:10,070 --> 00:01:15,350
reproducible builds are there's sort of

00:01:13,550 --> 00:01:17,360
some various status updates of our tools

00:01:15,350 --> 00:01:18,530
distributions and things like that and

00:01:17,360 --> 00:01:21,700
then we're going to go delve further

00:01:18,530 --> 00:01:24,050
deep deeper into the issues at hand like

00:01:21,700 --> 00:01:25,060
numbers and things like that scary

00:01:24,050 --> 00:01:28,160
things like that

00:01:25,060 --> 00:01:30,350
okay so stunning introduction so what is

00:01:28,160 --> 00:01:31,700
reproducible builds what what problem we

00:01:30,350 --> 00:01:34,550
actually solving here at the end of the

00:01:31,700 --> 00:01:36,020
day and so like ignore the name for now

00:01:34,550 --> 00:01:39,619
we'll come on back to the name

00:01:36,020 --> 00:01:41,810
reproducible and so like so the problem

00:01:39,619 --> 00:01:43,280
is that while I say the problem free

00:01:41,810 --> 00:01:44,570
software is great and open-source

00:01:43,280 --> 00:01:46,160
software is great in that you can

00:01:44,570 --> 00:01:47,600
download and view the source code for

00:01:46,160 --> 00:01:51,649
any piece of software so you can

00:01:47,600 --> 00:01:52,789
download the source code for nginx or

00:01:51,649 --> 00:01:54,800
Apache and things like that

00:01:52,789 --> 00:01:57,590
and unfortunately mostly I say

00:01:54,800 --> 00:01:59,690
unfortunately most people are installing

00:01:57,590 --> 00:02:06,590
precompiled binaries you are running apt

00:01:59,690 --> 00:02:08,390
install blah you're downloading and you

00:02:06,590 --> 00:02:10,340
basically no idea whether these things

00:02:08,390 --> 00:02:13,070
kind of correspond with each other so

00:02:10,340 --> 00:02:16,489
for example the binary could say oh I'm

00:02:13,070 --> 00:02:18,200
nginx version 12 but you have no idea

00:02:16,489 --> 00:02:20,810
that the binary you're downloading the

00:02:18,200 --> 00:02:23,720
person hasn't accidentally or his

00:02:20,810 --> 00:02:25,880
computer has not been hacked or perhaps

00:02:23,720 --> 00:02:28,670
they've deliberately put something in

00:02:25,880 --> 00:02:30,739
there just prior to compilation that's

00:02:28,670 --> 00:02:33,260
obviously not on the upstream repository

00:02:30,739 --> 00:02:34,670
in the downloadable but it's present in

00:02:33,260 --> 00:02:40,280
the buyer either you're running on your

00:02:34,670 --> 00:02:42,650
own machine and you don't trust on your

00:02:40,280 --> 00:02:43,670
own machine or things like that so this

00:02:42,650 --> 00:02:45,650
is the problem you have the source code

00:02:43,670 --> 00:02:50,870
and binaries and you have no idea where

00:02:45,650 --> 00:02:52,910
they correspond in real life so enter

00:02:50,870 --> 00:02:55,760
reproducible builds so the one way of

00:02:52,910 --> 00:02:57,530
solving this is to basically promise the

00:02:55,760 --> 00:02:59,390
identical build results are always

00:02:57,530 --> 00:03:03,650
generated from this is from the same

00:02:59,390 --> 00:03:07,820
given source so you know nginx 12 or

00:03:03,650 --> 00:03:10,400
whatever it is I want someone on my

00:03:07,820 --> 00:03:12,370
machine and things like that and then

00:03:10,400 --> 00:03:14,440
sort of vagrant builds on his machine

00:03:12,370 --> 00:03:17,110
builds on his machine and if we get the

00:03:14,440 --> 00:03:18,580
same results then either all of us have

00:03:17,110 --> 00:03:20,560
been compromised with the same

00:03:18,580 --> 00:03:23,200
third-party thing we're all trying to

00:03:20,560 --> 00:03:25,000
trick you or none of us has and if you

00:03:23,200 --> 00:03:26,500
just have a wide enough number of people

00:03:25,000 --> 00:03:28,180
instead of just three people on stage

00:03:26,500 --> 00:03:33,250
that you shouldn't trust I mean look at

00:03:28,180 --> 00:03:36,060
us if you have 300 people and they will

00:03:33,250 --> 00:03:37,840
have different interests and diverse

00:03:36,060 --> 00:03:40,060
geographical backgrounds different

00:03:37,840 --> 00:03:42,940
server types and things like that then

00:03:40,060 --> 00:03:45,180
if everyone agrees that engine x12

00:03:42,940 --> 00:03:47,560
should build like this then therefore

00:03:45,180 --> 00:03:50,790
you know this is probably the right one

00:03:47,560 --> 00:03:52,900
it's three the correct bill that way

00:03:50,790 --> 00:03:55,480
cool and so now we have a little video

00:03:52,900 --> 00:03:59,650
to demonstrate a bit more and it's gonna

00:03:55,480 --> 00:04:02,799
take this is just the video showing I

00:03:59,650 --> 00:04:08,610
let the video speak for itself first

00:04:02,799 --> 00:04:08,610
it is sound on I don't hear sound

00:04:21,620 --> 00:04:24,960
[Applause]

00:04:22,050 --> 00:04:27,910
[Music]

00:04:24,960 --> 00:04:30,250
annoy reliefs and that from John Howard

00:04:27,910 --> 00:04:32,230
Henry producer with its already

00:04:30,250 --> 00:04:39,340
Leisha categories of the productions

00:04:32,230 --> 00:04:42,370
have among the solitude even toss madam

00:04:39,340 --> 00:04:44,740
Zahir Zion can Listeria expert less bone

00:04:42,370 --> 00:04:51,280
dust are kind into an anger ball so

00:04:44,740 --> 00:04:53,800
dusty a let us say the man we all a so

00:04:51,280 --> 00:04:55,930
it will see a power of the bava

00:04:53,800 --> 00:04:58,180
kamma hi see how I'm profoundly come to

00:04:55,930 --> 00:05:00,100
my mind program house just desired

00:04:58,180 --> 00:05:02,290
ending little one sizes a lot--but

00:05:00,100 --> 00:05:04,510
flippity dangers it balls by mine who

00:05:02,290 --> 00:05:06,550
from does a give us at swam I didn't

00:05:04,510 --> 00:05:16,810
save it offers it will not put sandy

00:05:06,550 --> 00:05:19,410
generations machinima always perfectly

00:05:16,810 --> 00:05:23,470
by the suit rotten leaves me Tourism

00:05:19,410 --> 00:05:27,430
Organization who - then yes valuable

00:05:23,470 --> 00:05:31,290
water on Dallas tickets i Matsuyama will

00:05:27,430 --> 00:05:31,290
not put horsepower

00:05:33,210 --> 00:05:36,350
[Music]

00:05:37,919 --> 00:05:44,710
we will sniff Gansey dental devices are

00:05:41,819 --> 00:05:52,220
a machine

00:05:44,710 --> 00:05:52,220
[Music]

00:05:55,800 --> 00:06:01,540
[Applause]

00:05:58,740 --> 00:06:04,780
and this was a summary for the prototype

00:06:01,540 --> 00:06:07,690
funk project which funded me from last

00:06:04,780 --> 00:06:10,030
last autumn and they made this video it

00:06:07,690 --> 00:06:16,450
took us six hours to shoot it and that's

00:06:10,030 --> 00:06:22,330
90 seconds it's on YouTube said so

00:06:16,450 --> 00:06:24,460
what's new since Def Con 18 in Taipei we

00:06:22,330 --> 00:06:27,640
have a logo now which we didn't have

00:06:24,460 --> 00:06:30,340
last year which I'm very happy about it

00:06:27,640 --> 00:06:32,830
we have t-shirts made of stickers also

00:06:30,340 --> 00:06:33,640
that patches which will arrive later so

00:06:32,830 --> 00:06:37,150
you can pick them up

00:06:33,640 --> 00:06:40,080
probably at front desk we had to force

00:06:37,150 --> 00:06:42,460
people to do a bit summit in Paris with

00:06:40,080 --> 00:06:45,360
50 people I think something like that

00:06:42,460 --> 00:06:49,990
from 25 different projects attending

00:06:45,360 --> 00:06:52,150
hosted at the Mozilla office we are now

00:06:49,990 --> 00:06:58,150
a software freedom Conservancy project

00:06:52,150 --> 00:07:01,870
since a July last year was in Taipei in

00:06:58,150 --> 00:07:04,240
the making and there was a lot of work

00:07:01,870 --> 00:07:06,480
on other projects as well

00:07:04,240 --> 00:07:10,780
Arch Linux is now at 80 percent

00:07:06,480 --> 00:07:15,480
reproducible in their testing openSUSE

00:07:10,780 --> 00:07:18,610
at 93 percent though there also with a

00:07:15,480 --> 00:07:20,920
configuration change to rpm which is not

00:07:18,610 --> 00:07:25,990
in their real packages so it's also in

00:07:20,920 --> 00:07:27,730
theory just and open zoos and archly

00:07:25,990 --> 00:07:29,890
notes are now included in our database

00:07:27,730 --> 00:07:32,560
for test people super it's also and soon

00:07:29,890 --> 00:07:35,230
we can make web pages where we see how

00:07:32,560 --> 00:07:40,060
Firefox and Debian compared to Firefox

00:07:35,230 --> 00:07:42,370
and HD notes and so on and there's more

00:07:40,060 --> 00:07:45,430
often happening since the mini debconf

00:07:42,370 --> 00:07:48,010
in Hamburg there was less alpine linux

00:07:45,430 --> 00:07:50,260
being tested in Hemlock there were one

00:07:48,010 --> 00:07:53,350
person from alpine one person for person

00:07:50,260 --> 00:07:55,720
from arch linux it's really nice and net

00:07:53,350 --> 00:07:57,940
bsd and FreeBSD there based system is

00:07:55,720 --> 00:07:59,500
hundred percent reproducible but we

00:07:57,940 --> 00:08:00,759
haven't looked into their packages or

00:07:59,500 --> 00:08:05,860
ports as they corner

00:08:00,759 --> 00:08:10,080
and tails produces now 100% reproducible

00:08:05,860 --> 00:08:13,419
I saw images which is pretty great and

00:08:10,080 --> 00:08:16,029
open wrt and coreboot images are also

00:08:13,419 --> 00:08:21,849
mostly reproducible there some targets

00:08:16,029 --> 00:08:23,339
are not but yes and collaboration in

00:08:21,849 --> 00:08:26,110
general is great there's lots of

00:08:23,339 --> 00:08:28,059
expected and unexpected results and one

00:08:26,110 --> 00:08:30,339
result is this display which is here

00:08:28,059 --> 00:08:34,479
which was a present from yellow from our

00:08:30,339 --> 00:08:37,029
clinics pretty nice and there's a house

00:08:34,479 --> 00:08:38,709
it's it's on github and there's a ESP 32

00:08:37,029 --> 00:08:44,920
and you can make it yourself and we do

00:08:38,709 --> 00:08:47,320
it people to Sibley Debian installer

00:08:44,920 --> 00:08:49,060
mattresses yeah oh them jump in here

00:08:47,320 --> 00:08:50,860
so we've in the past year we've done a

00:08:49,060 --> 00:08:52,899
lot of work trying to get the Debian

00:08:50,860 --> 00:08:55,209
installer images reproducible as well

00:08:52,899 --> 00:08:58,959
there's obviously a starting point for

00:08:55,209 --> 00:09:01,180
you know installing Debian you save lots

00:08:58,959 --> 00:09:02,860
of progress this year this required a

00:09:01,180 --> 00:09:05,050
bunch of changes to some of the tools

00:09:02,860 --> 00:09:07,589
that the Debian installer uses as part

00:09:05,050 --> 00:09:10,480
of the build process for example M tools

00:09:07,589 --> 00:09:12,579
manipulates fats partitions that kind of

00:09:10,480 --> 00:09:16,180
thing that was creating

00:09:12,579 --> 00:09:19,269
non-deterministic various entries in in

00:09:16,180 --> 00:09:20,610
the file systems and the file names that

00:09:19,269 --> 00:09:24,190
were being produced and things like that

00:09:20,610 --> 00:09:25,899
so that needs to be made non random

00:09:24,190 --> 00:09:28,510
deterministic set every time you built

00:09:25,899 --> 00:09:30,310
it you got the same result actual

00:09:28,510 --> 00:09:34,079
changes to the Debian installer itself

00:09:30,310 --> 00:09:37,569
sometimes just to call the right

00:09:34,079 --> 00:09:39,279
commands with the right arguments and

00:09:37,569 --> 00:09:41,350
things like that and but also some

00:09:39,279 --> 00:09:43,389
larger changes as well to make sure it's

00:09:41,350 --> 00:09:46,089
generating you know things in the right

00:09:43,389 --> 00:09:48,459
order or package manifest files they get

00:09:46,089 --> 00:09:50,910
included in the ISO are not in a random

00:09:48,459 --> 00:09:53,860
or just a file system based ordering

00:09:50,910 --> 00:09:55,870
it's currently it works on my machine

00:09:53,860 --> 00:09:58,269
it's reproducible when I build it on my

00:09:55,870 --> 00:09:59,920
machine but that's not enough we want to

00:09:58,269 --> 00:10:01,510
get to have centralized testing and

00:09:59,920 --> 00:10:03,220
that's currently just blocking on one

00:10:01,510 --> 00:10:05,589
bug but that's fine that's there's no

00:10:03,220 --> 00:10:07,089
real rush to merge that really and but

00:10:05,589 --> 00:10:09,010
it'll be great you just want to

00:10:07,089 --> 00:10:10,320
particularly have a shout out to the DI

00:10:09,010 --> 00:10:13,050
team

00:10:10,320 --> 00:10:14,459
thanks for taking all these patches so

00:10:13,050 --> 00:10:17,670
quickly and giving them such a thorough

00:10:14,459 --> 00:10:19,800
review so yeah thank you very much I'm

00:10:17,670 --> 00:10:23,070
also gonna talk about some of the tools

00:10:19,800 --> 00:10:25,500
inside that we use for in reproducible

00:10:23,070 --> 00:10:27,509
builds so we have a number of non Debian

00:10:25,500 --> 00:10:29,459
terrific tools our first one is differ

00:10:27,509 --> 00:10:31,500
scope which is just like your regular

00:10:29,459 --> 00:10:33,660
def on the command line you know you do

00:10:31,500 --> 00:10:35,940
diff and then two files and it gives you

00:10:33,660 --> 00:10:37,620
a difference between them but if you do

00:10:35,940 --> 00:10:40,529
that on a binary file or you do that on

00:10:37,620 --> 00:10:42,959
two dead files which are you know are

00:10:40,529 --> 00:10:44,730
archives with you know perhaps a tarball

00:10:42,959 --> 00:10:46,529
that's compressed with something like

00:10:44,730 --> 00:10:48,269
that if it quickly becomes entirely

00:10:46,529 --> 00:10:50,430
meaningless if you just run a diff on a

00:10:48,269 --> 00:10:52,980
binary I'm sure you've all tried it so

00:10:50,430 --> 00:10:55,949
many years ago he wrote sand differ

00:10:52,980 --> 00:10:58,769
scope which basically identifies that oh

00:10:55,949 --> 00:11:01,139
it's two bytes - Deb files we can unpack

00:10:58,769 --> 00:11:02,550
them in this way and then inside that it

00:11:01,139 --> 00:11:04,170
contain something else and inside that

00:11:02,550 --> 00:11:05,850
contains something else and inside that

00:11:04,170 --> 00:11:07,560
there's a directory tree and inside that

00:11:05,850 --> 00:11:11,009
inside there all the way down can tie a

00:11:07,560 --> 00:11:14,060
recursive and then it runs in the actual

00:11:11,009 --> 00:11:16,500
original kind of thing on it and also

00:11:14,060 --> 00:11:18,990
modifies anything that it might be able

00:11:16,500 --> 00:11:22,079
to transform from a binary format like a

00:11:18,990 --> 00:11:26,490
PDF into text and so very quickly you

00:11:22,079 --> 00:11:28,350
can go from a huge binary Deb all the

00:11:26,490 --> 00:11:30,720
way down to oh it's just differing in

00:11:28,350 --> 00:11:33,410
this particular line things like that so

00:11:30,720 --> 00:11:36,240
here's example a hatred him our output

00:11:33,410 --> 00:11:38,279
this is of a debian package and so

00:11:36,240 --> 00:11:40,260
already many you know five or six levels

00:11:38,279 --> 00:11:41,850
deep that you'd have to manually unpack

00:11:40,260 --> 00:11:44,699
and do all yourself but differ scope

00:11:41,850 --> 00:11:46,980
just magically does it and it's just

00:11:44,699 --> 00:11:48,720
saying that in this file eventually

00:11:46,980 --> 00:11:52,560
there's a file called install the RDF

00:11:48,720 --> 00:11:56,399
and in there one of them says 5.06 and

00:11:52,560 --> 00:11:58,230
over here it says 50.7 and usually when

00:11:56,399 --> 00:12:00,089
you that use that you know do it a

00:11:58,230 --> 00:12:02,130
grapping bit you know use your common

00:12:00,089 --> 00:12:03,899
sense on the original source and be like

00:12:02,130 --> 00:12:07,439
oh yeah this is this is the line we need

00:12:03,899 --> 00:12:09,930
to fix to get this work so yeah lots of

00:12:07,439 --> 00:12:13,790
changes this year these are the bugs

00:12:09,930 --> 00:12:16,290
that I fix there are on the BTS and

00:12:13,790 --> 00:12:18,689
there's probably more on salsa and other

00:12:16,290 --> 00:12:20,350
those are changes we just didn't file

00:12:18,689 --> 00:12:22,360
bugs against ourselves

00:12:20,350 --> 00:12:23,970
was gonna fix me next five minutes so

00:12:22,360 --> 00:12:26,080
differ scopes been changed massively

00:12:23,970 --> 00:12:28,780
progresses a lot faster and things like

00:12:26,080 --> 00:12:30,730
that in the past year the other tool is

00:12:28,780 --> 00:12:32,770
slightly Debian specific which is strip

00:12:30,730 --> 00:12:34,150
non determinism I'm sure you might have

00:12:32,770 --> 00:12:37,450
seen that when you're building your

00:12:34,150 --> 00:12:40,120
package should be H so this is a bit of

00:12:37,450 --> 00:12:42,520
a hacky tool that we are using to remove

00:12:40,120 --> 00:12:44,950
specific non-deterministic behavior in

00:12:42,520 --> 00:12:49,090
for example tool chains so it's a bit

00:12:44,950 --> 00:12:51,490
difficult too one example might be Java

00:12:49,090 --> 00:12:52,930
it's quite we haven't managed to

00:12:51,490 --> 00:12:56,050
prioritize you know there aren't off

00:12:52,930 --> 00:12:59,500
spoons in the day to fix all the issues

00:12:56,050 --> 00:13:02,770
in the java jdk yet just need to find

00:12:59,500 --> 00:13:05,110
time and so we just have this sort of

00:13:02,770 --> 00:13:07,360
rather hacky post-processing step that

00:13:05,110 --> 00:13:10,830
we hope goes away in the future but in

00:13:07,360 --> 00:13:13,120
the meantime it's very useful to get

00:13:10,830 --> 00:13:16,230
reproducible results inside debian and

00:13:13,120 --> 00:13:20,170
that's also seen a large number of

00:13:16,230 --> 00:13:23,530
changes and things like that the other

00:13:20,170 --> 00:13:25,150
changes we've been actually are around

00:13:23,530 --> 00:13:27,310
communication community particularly

00:13:25,150 --> 00:13:29,440
around our website for example we move

00:13:27,310 --> 00:13:31,000
from weekly to monthly report structure

00:13:29,440 --> 00:13:33,400
and this means that we can more

00:13:31,000 --> 00:13:35,230
accurately and sort of better capture or

00:13:33,400 --> 00:13:37,990
up to every every month and things like

00:13:35,230 --> 00:13:40,690
that weekly was a little bit too much

00:13:37,990 --> 00:13:43,330
and so our weekly reports we think we've

00:13:40,690 --> 00:13:48,850
done two or three of them three maybe

00:13:43,330 --> 00:13:50,170
three for now and and it seems to be

00:13:48,850 --> 00:13:51,910
working well and it's just a great

00:13:50,170 --> 00:13:53,890
summary every month and we they appear

00:13:51,910 --> 00:13:56,740
on the planet which i'm so if you've

00:13:53,890 --> 00:13:58,750
seen a spam every so often um we've had

00:13:56,740 --> 00:14:00,490
a new design on the site a looks better

00:13:58,750 --> 00:14:03,070
but it also is much easier to find the

00:14:00,490 --> 00:14:04,990
information you can easily drill down

00:14:03,070 --> 00:14:06,490
into documentation we a better links and

00:14:04,990 --> 00:14:07,840
things like that so we're paying a lot

00:14:06,490 --> 00:14:10,210
more attention in the past year about

00:14:07,840 --> 00:14:12,730
just communicating and documenting

00:14:10,210 --> 00:14:15,100
better also moving non-dairy and

00:14:12,730 --> 00:14:17,890
specific stuff from the debian wiki on

00:14:15,100 --> 00:14:20,320
to our cost distribution website and

00:14:17,890 --> 00:14:22,780
again that centralizes things and makes

00:14:20,320 --> 00:14:24,880
it actually easier for people to find

00:14:22,780 --> 00:14:27,580
and then update information so we're

00:14:24,880 --> 00:14:30,060
finding our despite it not being a wiki

00:14:27,580 --> 00:14:31,470
per se it's being updated a bit better

00:14:30,060 --> 00:14:34,019
and it's have just been more up-to-date

00:14:31,470 --> 00:14:35,610
and things like that gossip that

00:14:34,019 --> 00:14:39,779
instructions how to contribute we have a

00:14:35,610 --> 00:14:41,639
really nice sort of four or five step

00:14:39,779 --> 00:14:43,680
how to sign up to salsa because that's

00:14:41,639 --> 00:14:45,329
where we're storing all I get repos sure

00:14:43,680 --> 00:14:47,519
everyone's welcome to steal lots of

00:14:45,329 --> 00:14:51,199
screenshots and how to you know exactly

00:14:47,519 --> 00:14:53,850
how to first register for salsa and then

00:14:51,199 --> 00:14:55,470
request access to the salsa group that

00:14:53,850 --> 00:14:59,339
we have and things like that so feel

00:14:55,470 --> 00:15:05,100
free to steal that great and now I'm

00:14:59,339 --> 00:15:07,230
passing back to you okay Buster as you

00:15:05,100 --> 00:15:09,380
have probably all know on now has the

00:15:07,230 --> 00:15:12,449
policy picketers should be reproducible

00:15:09,380 --> 00:15:15,870
um which wasn't the case last year and

00:15:12,449 --> 00:15:21,300
type II Chris I think it's pretty useful

00:15:15,870 --> 00:15:24,810
and our graph of unapplied patches are

00:15:21,300 --> 00:15:26,430
still the same and I think it's now we

00:15:24,810 --> 00:15:28,980
only have four hundred Peck patches

00:15:26,430 --> 00:15:30,870
which have not been applied so now would

00:15:28,980 --> 00:15:34,110
be the time to do that if somebody wants

00:15:30,870 --> 00:15:35,209
to help us and any new 400 packages that

00:15:34,110 --> 00:15:42,209
would be great

00:15:35,209 --> 00:15:44,160
and that's always mm you time some new

00:15:42,209 --> 00:15:46,399
issues in detail what what else is

00:15:44,160 --> 00:15:46,399
missing

00:15:51,160 --> 00:15:54,840
I think speak

00:16:22,600 --> 00:16:30,070
all right hello

00:16:25,389 --> 00:16:32,740
so built tough variations are still

00:16:30,070 --> 00:16:35,720
essentially missing from our

00:16:32,740 --> 00:16:39,170
reproducible promise that we're giving

00:16:35,720 --> 00:16:43,070
for Buster and currently for the

00:16:39,170 --> 00:16:45,760
upcoming bullseye and one of the things

00:16:43,070 --> 00:16:51,740
that we actually did get in upstream

00:16:45,760 --> 00:16:56,110
though upstream GCC eight has a macro

00:16:51,740 --> 00:16:59,570
prefix map and also the file prefix map

00:16:56,110 --> 00:17:07,819
which basically transforms the file

00:16:59,570 --> 00:17:09,709
macro into a relative path so if it

00:17:07,819 --> 00:17:11,959
embeds the file macro with the full path

00:17:09,709 --> 00:17:13,400
obviously if you build it in a different

00:17:11,959 --> 00:17:18,980
directory you're going to get a none

00:17:13,400 --> 00:17:23,329
reproducible binary and last year during

00:17:18,980 --> 00:17:27,250
dev Kampf I wrote up a quick patch and

00:17:23,329 --> 00:17:29,270
then iam llovera

00:17:27,250 --> 00:17:31,040
actually wrote a better patch which

00:17:29,270 --> 00:17:33,530
obviously is the one that got applied to

00:17:31,040 --> 00:17:40,940
D package in order to enable this

00:17:33,530 --> 00:17:43,490
feature but so it's in GCC eight but

00:17:40,940 --> 00:17:45,980
it's not enabled by default in D package

00:17:43,490 --> 00:17:47,840
build flags you have to expressly turn

00:17:45,980 --> 00:17:50,510
on this feature and there are some

00:17:47,840 --> 00:17:54,740
reasons for this some build systems

00:17:50,510 --> 00:17:56,870
still embed the GCC command line so even

00:17:54,740 --> 00:17:59,270
though you're saying remap all of these

00:17:56,870 --> 00:18:02,780
file paths into it the file paths get

00:17:59,270 --> 00:18:04,610
into it in a different place that's kind

00:18:02,780 --> 00:18:08,570
of sabotaging the reproducibility we

00:18:04,610 --> 00:18:09,770
were so hoping for some test Suites rely

00:18:08,570 --> 00:18:12,980
on the full paths

00:18:09,770 --> 00:18:16,820
I think notably some of the things in

00:18:12,980 --> 00:18:18,740
the QT tool chain so we can't just

00:18:16,820 --> 00:18:20,540
enable that archive wide without

00:18:18,740 --> 00:18:22,820
potentially breaking a number of things

00:18:20,540 --> 00:18:25,429
though we have enabled it on our test

00:18:22,820 --> 00:18:27,380
infrastructure so we have a rough idea

00:18:25,429 --> 00:18:29,370
of how many things it actually does

00:18:27,380 --> 00:18:32,789
break

00:18:29,370 --> 00:18:35,730
and it also only works with GCC it needs

00:18:32,789 --> 00:18:39,179
to be fix and other tools like LLVM or

00:18:35,730 --> 00:18:42,570
any number of other compilers or other

00:18:39,179 --> 00:18:45,299
tools trains and the simple workaround

00:18:42,570 --> 00:18:47,669
which we've been doing for for the

00:18:45,299 --> 00:18:49,770
entirety of the Buster release cycle and

00:18:47,669 --> 00:18:51,990
will continue to do is on testing and

00:18:49,770 --> 00:18:54,659
stable we don't bury the build path we

00:18:51,990 --> 00:18:56,370
rebuild in the same path and that's that

00:18:54,659 --> 00:19:00,000
informations recorded in the build info

00:18:56,370 --> 00:19:01,529
files so we can get it so essentially at

00:19:00,000 --> 00:19:06,860
least at the moment we're looking at

00:19:01,529 --> 00:19:11,340
ignoring these for bull's-eye the future

00:19:06,860 --> 00:19:15,360
we Shimon wrote up a specification for

00:19:11,340 --> 00:19:18,059
build path prefix map and the idea was

00:19:15,360 --> 00:19:21,899
to embed the kinds of thing that we were

00:19:18,059 --> 00:19:24,179
putting in debug prefix map and would

00:19:21,899 --> 00:19:27,149
put and macro prefix map into an

00:19:24,179 --> 00:19:29,279
environment variable that then would not

00:19:27,149 --> 00:19:32,610
get embedded in the binary and would

00:19:29,279 --> 00:19:37,169
solve thousands of packages rather than

00:19:32,610 --> 00:19:40,649
just a few hundred but but GCC

00:19:37,169 --> 00:19:44,159
maintainer x' didn't like him embedding

00:19:40,649 --> 00:19:45,990
the results of a variable into the way

00:19:44,159 --> 00:19:49,830
jccc works which is kind of

00:19:45,990 --> 00:19:51,980
understandable but we have some ideas

00:19:49,830 --> 00:19:54,990
about how to move forward on that

00:19:51,980 --> 00:20:00,870
document at them at the GCC build path

00:19:54,990 --> 00:20:02,940
wiki page on wiki Debian org and we

00:20:00,870 --> 00:20:06,090
would really love anybody who's

00:20:02,940 --> 00:20:08,279
interested in working on GCC or possibly

00:20:06,090 --> 00:20:11,460
other compilers to take a look at some

00:20:08,279 --> 00:20:16,130
of this stuff and join our project and

00:20:11,460 --> 00:20:19,130
fix some of these long-standing issues

00:20:16,130 --> 00:20:19,130
so

00:20:29,240 --> 00:20:36,030
can you II am I on yes okay

00:20:33,720 --> 00:20:38,160
and we probably move this page from our

00:20:36,030 --> 00:20:42,500
Debian wiki to our normal website

00:20:38,160 --> 00:20:42,500
because it's a general upstream problem

00:20:56,830 --> 00:21:03,830
so yes better so this will be moved but

00:21:02,330 --> 00:21:05,600
we wanted to start quickly because we

00:21:03,830 --> 00:21:08,030
always we talk about this issue and it's

00:21:05,600 --> 00:21:09,620
very complicated complex and then we

00:21:08,030 --> 00:21:12,260
forgot the details so now we have one

00:21:09,620 --> 00:21:15,919
place for the future to collect words

00:21:12,260 --> 00:21:18,710
will be so yeah Darien is wrong or what

00:21:15,919 --> 00:21:23,590
so openSUSE is wrong this 93% is a lie

00:21:18,710 --> 00:21:25,340
because it's just theoretically

00:21:23,590 --> 00:21:27,049
reproducible and we like the

00:21:25,340 --> 00:21:32,990
infrastructures part which we show now

00:21:27,049 --> 00:21:34,970
and this is also not to ping our finger

00:21:32,990 --> 00:21:38,000
point at the teams like there's a lot of

00:21:34,970 --> 00:21:40,040
FTP master stuff and up maintain us but

00:21:38,000 --> 00:21:44,540
we rather want to point out the problems

00:21:40,040 --> 00:21:48,290
they are so the difference between

00:21:44,540 --> 00:21:53,540
theory and practice is that 93 in theory

00:21:48,290 --> 00:21:55,400
but then I investigated by comparing bit

00:21:53,540 --> 00:21:57,020
info files which I exist

00:21:55,400 --> 00:21:59,330
twice so there has been a rebirth of

00:21:57,020 --> 00:22:03,080
this bill info file and we only got to

00:21:59,330 --> 00:22:06,290
54% and March 2018 and when looking at

00:22:03,080 --> 00:22:13,990
this today it's only 31% reproducible

00:22:06,290 --> 00:22:16,340
packages and buster so and we don't know

00:22:13,990 --> 00:22:19,970
we can still improve on this by doing

00:22:16,340 --> 00:22:28,040
reboots but we will not get to 93%

00:22:19,970 --> 00:22:31,299
that's also clear oh yes that we didn't

00:22:28,040 --> 00:22:33,919
and then that's the problem of these

00:22:31,299 --> 00:22:36,860
6800 packages which have been uploaded

00:22:33,919 --> 00:22:38,780
before December 2016 and that means

00:22:36,860 --> 00:22:42,260
there's no page info files for them and

00:22:38,780 --> 00:22:45,350
all of these 6800 packages probably half

00:22:42,260 --> 00:22:46,910
of them are arch any so we can schedule

00:22:45,350 --> 00:22:48,350
banana mousse and I've had some

00:22:46,910 --> 00:22:50,929
discussion with some members of the

00:22:48,350 --> 00:22:53,179
release team how to make this happen but

00:22:50,929 --> 00:22:56,150
there's probably three thousand are all

00:22:53,179 --> 00:23:01,010
packages which need binary up which

00:22:56,150 --> 00:23:03,799
needs source for uploads and well I

00:23:01,010 --> 00:23:06,050
think we should do that and maybe I try

00:23:03,799 --> 00:23:07,790
to do it scripted or whatever and upload

00:23:06,050 --> 00:23:12,080
three packages per day and I'm you

00:23:07,790 --> 00:23:14,210
really will see to get to be able to get

00:23:12,080 --> 00:23:18,380
really to this a hundred percent because

00:23:14,210 --> 00:23:21,770
as we cannot get over 93 - 54 so we can

00:23:18,380 --> 00:23:24,470
only get to 17 nice at 69 percent at the

00:23:21,770 --> 00:23:26,780
moment that's the maximum pasta would be

00:23:24,470 --> 00:23:29,890
and Birdseye as well for sports I has

00:23:26,780 --> 00:23:29,890
the same negative

00:23:30,520 --> 00:23:35,750
besides that we still have this old

00:23:32,990 --> 00:23:38,390
problem that their sauce uploading

00:23:35,750 --> 00:23:40,460
including an AMD 64-bit info file which

00:23:38,390 --> 00:23:44,900
cause problems they have to work around

00:23:40,460 --> 00:23:48,080
a hacker's workaround for that but we

00:23:44,900 --> 00:23:51,530
like to have a better fix then banana

00:23:48,080 --> 00:23:53,540
Muse can cause problems and there has

00:23:51,530 --> 00:23:57,110
been some discussion here at Def Con or

00:23:53,540 --> 00:23:59,180
I need to update the buck and this mess

00:23:57,110 --> 00:24:03,980
reviled of packages was the problem on

00:23:59,180 --> 00:24:06,650
the previous slide and then we have T

00:24:03,980 --> 00:24:09,410
speed info files which are only on an

00:24:06,650 --> 00:24:11,540
FTP Debian oak machine but there are FTP

00:24:09,410 --> 00:24:13,130
master and they are not available due to

00:24:11,540 --> 00:24:14,720
the they're only available to Debian

00:24:13,130 --> 00:24:19,910
developers but not to the general public

00:24:14,720 --> 00:24:23,930
so there's this other but to include

00:24:19,910 --> 00:24:25,370
them into the archive maybe and then

00:24:23,930 --> 00:24:28,070
there's the whole other problem of

00:24:25,370 --> 00:24:29,840
beautiful files for security packages

00:24:28,070 --> 00:24:32,690
they only get synced on every point

00:24:29,840 --> 00:24:36,530
release at the moment and we need to get

00:24:32,690 --> 00:24:39,080
better there as well and then we have

00:24:36,530 --> 00:24:42,040
free info files on build info Debian net

00:24:39,080 --> 00:24:44,960
which is the service Chris wrote and

00:24:42,040 --> 00:24:46,820
then I've wrote bit enforced maybe in

00:24:44,960 --> 00:24:51,050
net because things are not complicated

00:24:46,820 --> 00:24:53,240
enough now these two services have

00:24:51,050 --> 00:24:58,070
different properties and one important

00:24:53,240 --> 00:25:00,730
distinction is that with info Debian

00:24:58,070 --> 00:25:04,070
that allows submissions from anyone

00:25:00,730 --> 00:25:05,900
everyone so there's both the Debian

00:25:04,070 --> 00:25:07,790
build info files that are there as well

00:25:05,900 --> 00:25:11,180
as the rivers from reproducible builds

00:25:07,790 --> 00:25:13,340
as some other rebuilders and when you

00:25:11,180 --> 00:25:14,860
get asked for a bit info file you get

00:25:13,340 --> 00:25:16,570
many built-in file

00:25:14,860 --> 00:25:18,880
then you need to look whether it's

00:25:16,570 --> 00:25:21,460
signed with which GPG key to is find out

00:25:18,880 --> 00:25:23,920
from who it is and the GPT keys change

00:25:21,460 --> 00:25:26,920
and Debian builders have many vpg keys

00:25:23,920 --> 00:25:28,960
and it's all complicated and so I wrote

00:25:26,920 --> 00:25:33,549
the spirit enforce Debian net which just

00:25:28,960 --> 00:25:35,020
exposes what's on FTP master so you can

00:25:33,549 --> 00:25:38,440
download this we are partnered with a

00:25:35,020 --> 00:25:41,400
webserver and that's build eight

00:25:38,440 --> 00:25:44,740
structure so every day there's a new

00:25:41,400 --> 00:25:46,720
directory where the big bits from the

00:25:44,740 --> 00:25:48,160
day are in but if you want to find

00:25:46,720 --> 00:25:50,320
something you need to know when it's

00:25:48,160 --> 00:25:52,179
build so I've created a script which

00:25:50,320 --> 00:25:56,140
creates a pool structure so you can now

00:25:52,179 --> 00:26:00,429
go to whatever ppyou parts and find the

00:25:56,140 --> 00:26:03,179
pupils beautiful files there but it's

00:26:00,429 --> 00:26:05,559
still an unofficial service and I think

00:26:03,179 --> 00:26:09,160
there should be a debian awk machine

00:26:05,559 --> 00:26:11,290
solving these files and we need to sort

00:26:09,160 --> 00:26:14,590
out these names and which services and

00:26:11,290 --> 00:26:16,330
how to do this and Bram now also started

00:26:14,590 --> 00:26:18,549
to write another implementation or

00:26:16,330 --> 00:26:22,570
something so bit info fights are still a

00:26:18,549 --> 00:26:25,960
field of work and in total we have about

00:26:22,570 --> 00:26:28,480
1 million built info files out of which

00:26:25,960 --> 00:26:30,730
hundred thousand are for MD 64 so it's

00:26:28,480 --> 00:26:37,830
roughly a 100 thousand car architecture

00:26:30,730 --> 00:26:40,990
since December 2016 so there's some and

00:26:37,830 --> 00:26:42,850
it's 12 gigabyte files and the links

00:26:40,990 --> 00:26:48,700
take 4 gigabytes so it's not much

00:26:42,850 --> 00:26:51,669
storage required another thing we want

00:26:48,700 --> 00:26:54,160
eventually as apt to warn when a package

00:26:51,669 --> 00:26:56,400
is not reproducible or also to block

00:26:54,160 --> 00:26:56,400
this

00:26:59,840 --> 00:27:05,450
that would be great for boots i but the

00:27:04,070 --> 00:27:07,249
gold should really not to install

00:27:05,450 --> 00:27:09,320
unreproducible software and this is

00:27:07,249 --> 00:27:13,999
something i will need longer than boo

00:27:09,320 --> 00:27:15,979
aside probably and then there's in total

00:27:13,999 --> 00:27:18,200
which brings us to the next level and

00:27:15,979 --> 00:27:22,460
taught us the project by nyu

00:27:18,200 --> 00:27:24,889
new york university where you can say I

00:27:22,460 --> 00:27:26,869
want the packages to be rebuilt by these

00:27:24,889 --> 00:27:30,619
entities and there needs to be these

00:27:26,869 --> 00:27:32,839
signatures and but I think in total is

00:27:30,619 --> 00:27:40,549
good but it will be way more work to

00:27:32,839 --> 00:27:42,769
integrate it in WMS world for test

00:27:40,549 --> 00:27:44,479
reproducible suis have these common

00:27:42,769 --> 00:27:46,580
database or what's already explained and

00:27:44,479 --> 00:27:48,889
we have Jason now for several project

00:27:46,580 --> 00:27:53,019
which one can query but these are only

00:27:48,889 --> 00:27:55,849
these QA results are not real rebuilders

00:27:53,019 --> 00:28:02,059
and which they plan to have shared nodes

00:27:55,849 --> 00:28:03,830
and cross destroy links and there's the

00:28:02,059 --> 00:28:05,899
thing there's two kinds of tests and at

00:28:03,830 --> 00:28:13,129
the moment we only do the C Ike test we

00:28:05,899 --> 00:28:17,539
don't do the rebuilds so this is a bit

00:28:13,129 --> 00:28:19,820
depressing but the good thing is boots

00:28:17,539 --> 00:28:26,629
is not sorted out yet so we can still

00:28:19,820 --> 00:28:29,899
fix things for both side and write like

00:28:26,629 --> 00:28:33,739
the wind boots ie was the Toy Story

00:28:29,899 --> 00:28:35,839
reference I like boots I wish this which

00:28:33,739 --> 00:28:38,359
is from Hans Kristoff Steiner Huestis in

00:28:35,839 --> 00:28:46,330
a 2016 talked about people do civil

00:28:38,359 --> 00:28:49,429
bills which are actually both size and I

00:28:46,330 --> 00:28:52,460
this is we have no Debian infrastructure

00:28:49,429 --> 00:28:54,769
for properly rebuilding packages we just

00:28:52,460 --> 00:28:56,690
built the packages and the

00:28:54,769 --> 00:28:58,489
reproducibility Sheen's they are build

00:28:56,690 --> 00:29:00,499
as they are not rebuild as we don't use

00:28:58,489 --> 00:29:02,359
the built in for fire we use build and

00:29:00,499 --> 00:29:04,789
stretch Buster and stuff but we don't

00:29:02,359 --> 00:29:08,179
build in the same city environment the

00:29:04,789 --> 00:29:12,200
big disability New York University has

00:29:08,179 --> 00:29:15,830
done a proof-of-concept for doing this

00:29:12,200 --> 00:29:17,740
and we would like to integrate something

00:29:15,830 --> 00:29:20,420
like this with Debian's official big

00:29:17,740 --> 00:29:23,120
baby Network so it's done on Debian

00:29:20,420 --> 00:29:25,970
machines and properly rebuilt for all

00:29:23,120 --> 00:29:29,170
architectures also consequence of it's

00:29:25,970 --> 00:29:32,990
only has four architectures so that's

00:29:29,170 --> 00:29:38,720
something I'd like to discuss here or

00:29:32,990 --> 00:29:42,470
elsewhere in future and we are very

00:29:38,720 --> 00:29:45,140
happy that the release team now blocks

00:29:42,470 --> 00:29:49,820
testing migration for binary uploads I

00:29:45,140 --> 00:29:57,500
know there's some mineral annoyances

00:29:49,820 --> 00:29:59,420
about it but we really like it and we

00:29:57,500 --> 00:30:02,060
very much like the idea of accelerating

00:29:59,420 --> 00:30:05,690
accelerating migration for reproducible

00:30:02,060 --> 00:30:09,050
packages or adding a pump or adding a

00:30:05,690 --> 00:30:15,370
delay for an reproducible packages what

00:30:09,050 --> 00:30:20,090
do you think about this as some support

00:30:15,370 --> 00:30:24,190
who really hates it or dislikes it can

00:30:20,090 --> 00:30:24,190
also send anonymous email or something

00:30:24,310 --> 00:30:29,810
it's just a plan and we need to sort

00:30:27,410 --> 00:30:31,970
this out because at the moment if the

00:30:29,810 --> 00:30:33,530
without woodpecker's test the migration

00:30:31,970 --> 00:30:36,860
delay is already down to two or three

00:30:33,530 --> 00:30:38,660
days so further lowering it's not

00:30:36,860 --> 00:30:41,030
possible so it needs to become longer

00:30:38,660 --> 00:30:44,680
and we need to sort this out there was a

00:30:41,030 --> 00:30:47,840
mail just this morning about this and

00:30:44,680 --> 00:30:49,580
maybe it's too early for policy change

00:30:47,840 --> 00:30:52,310
that packet see Pegasus must be

00:30:49,580 --> 00:30:54,410
reproducible but maybe we can have a

00:30:52,310 --> 00:30:59,270
policy change that packages must not

00:30:54,410 --> 00:31:03,080
regress there's almost an honest Q&A

00:30:59,270 --> 00:31:05,120
Thornton we would really like to have

00:31:03,080 --> 00:31:06,860
hear your feedback about this please

00:31:05,120 --> 00:31:08,960
come to me and tell me how I got this is

00:31:06,860 --> 00:31:13,220
a shitty idea or this is a great idea or

00:31:08,960 --> 00:31:15,820
talk to Chris or vagrant my sent mail to

00:31:13,220 --> 00:31:15,820
Debby endeavor

00:31:16,059 --> 00:31:23,499
so yes thank you for being here and for

00:31:19,840 --> 00:31:25,989
all your contributions and that's it

00:31:23,499 --> 00:31:49,210
from our side now we have time for

00:31:25,989 --> 00:31:51,570
questions hello so anybody have any

00:31:49,210 --> 00:31:51,570
questions

00:31:56,820 --> 00:32:04,059
go to the microphone for the for the

00:32:01,750 --> 00:32:06,420
questions who has the question I don't

00:32:04,059 --> 00:32:06,420
see

00:32:13,710 --> 00:32:17,480
how much more time do we have left

00:32:29,200 --> 00:32:34,730
ferb sorry for reproducible builds would

00:32:31,760 --> 00:32:41,780
you ever consider putting like the

00:32:34,730 --> 00:32:43,940
signature into into the package manager'

00:32:41,780 --> 00:32:45,140
itself so you could have a package that

00:32:43,940 --> 00:32:47,240
lived in one place and move to another

00:32:45,140 --> 00:32:49,539
like a different build prefix and then

00:32:47,240 --> 00:32:55,370
you could represent that that unique ID

00:32:49,539 --> 00:32:57,950
in the in apt or in d package if that

00:32:55,370 --> 00:32:59,270
makes sense I'd say like I've rebuilt it

00:32:57,950 --> 00:33:01,970
here and this is the SH this is the

00:32:59,270 --> 00:33:03,380
signature of it when I when it lived in

00:33:01,970 --> 00:33:06,919
one place and then moved to another if

00:33:03,380 --> 00:33:09,559
it changed from like running in one

00:33:06,919 --> 00:33:12,320
place oh so the the built parts are

00:33:09,559 --> 00:33:14,690
around a build time so it's about where

00:33:12,320 --> 00:33:17,000
the wire on your file system the package

00:33:14,690 --> 00:33:20,240
was actually built yeah first you change

00:33:17,000 --> 00:33:22,309
the build prefix could you rep how do

00:33:20,240 --> 00:33:24,470
you how do you serve this data to the

00:33:22,309 --> 00:33:26,000
rest of well you don't you just you

00:33:24,470 --> 00:33:27,740
don't need to serve it beyond that the

00:33:26,000 --> 00:33:29,450
end user system doesn't have to care

00:33:27,740 --> 00:33:33,500
about that so example when you mention

00:33:29,450 --> 00:33:35,390
out you're not then re it's all about

00:33:33,500 --> 00:33:37,130
the rebuilding process not about the

00:33:35,390 --> 00:33:40,400
actual installation time process if you

00:33:37,130 --> 00:33:42,020
see what I mean so by by the time it

00:33:40,400 --> 00:33:43,760
hits at it should have the package

00:33:42,020 --> 00:33:46,970
should already be reproducible or not it

00:33:43,760 --> 00:33:48,580
should be completely reproduce it how

00:33:46,970 --> 00:33:50,450
you get you should get the same result

00:33:48,580 --> 00:33:52,400
regardless of which direction the

00:33:50,450 --> 00:33:53,720
building it in could that resolve we put

00:33:52,400 --> 00:34:02,330
into the package and set like the

00:33:53,720 --> 00:34:04,429
package metadata no the problem with

00:34:02,330 --> 00:34:06,679
putting the metadata in there is some of

00:34:04,429 --> 00:34:09,859
that metadata is in and of itself not

00:34:06,679 --> 00:34:13,369
reproducible and we want to keep the

00:34:09,859 --> 00:34:15,800
verification a simple checksum so that

00:34:13,369 --> 00:34:17,240
you can do bit for bit identical so we

00:34:15,800 --> 00:34:20,119
have a building profile which

00:34:17,240 --> 00:34:23,330
distributes that distributes that type

00:34:20,119 --> 00:34:25,040
of information in an external way but

00:34:23,330 --> 00:34:27,950
then you can actually just do a checksum

00:34:25,040 --> 00:34:30,020
in the actual dev or dot RPM or whatever

00:34:27,950 --> 00:34:34,410
your actually whatever artifact you're

00:34:30,020 --> 00:34:36,600
trying to verify okay

00:34:34,410 --> 00:34:46,500
can be that the build past is embedded

00:34:36,600 --> 00:34:51,420
in hundred or thousand places but one

00:34:46,500 --> 00:34:54,600
one thing about this adding a delay for

00:34:51,420 --> 00:34:57,900
packages which I'm reproducible in my

00:34:54,600 --> 00:35:00,540
opinion it we are not there's too many

00:34:57,900 --> 00:35:02,460
important packages where which are

00:35:00,540 --> 00:35:04,980
hungry boots of the now sour food rather

00:35:02,460 --> 00:35:07,500
with regressions in the beginning if

00:35:04,980 --> 00:35:10,620
there's a regression then delay the

00:35:07,500 --> 00:35:12,510
migration but because do we have in

00:35:10,620 --> 00:35:14,640
built essentially depends as two hundred

00:35:12,510 --> 00:35:18,270
unreproducible packages and they include

00:35:14,640 --> 00:35:19,950
GCC eight pearl and up so there are

00:35:18,270 --> 00:35:22,080
still a lot of source for fixes to be

00:35:19,950 --> 00:35:24,270
done but for the packages which are

00:35:22,080 --> 00:35:27,600
reproducible now if they become

00:35:24,270 --> 00:35:29,550
unreproducible maybe it would be a good

00:35:27,600 --> 00:35:31,170
idea to not let them into testing them

00:35:29,550 --> 00:35:34,040
because they're very pootis will once

00:35:31,170 --> 00:35:40,560
what broke what the don't do that

00:35:34,040 --> 00:35:43,130
but we need to solve this out seven more

00:35:40,560 --> 00:35:43,130
minutes for questions

00:35:50,560 --> 00:35:57,260
well one problem at least I would have

00:35:53,480 --> 00:35:59,030
with that regression idea is that I have

00:35:57,260 --> 00:36:00,590
a package which is quite complicated and

00:35:59,030 --> 00:36:03,140
is quite old

00:36:00,590 --> 00:36:05,900
and that's why it was not reputed

00:36:03,140 --> 00:36:07,310
producible in the beginning and I made

00:36:05,900 --> 00:36:08,750
it some over the producible

00:36:07,310 --> 00:36:12,530
and then I discovered that they actually

00:36:08,750 --> 00:36:14,510
have a a file included which is not

00:36:12,530 --> 00:36:18,620
source by itself but it has to be built

00:36:14,510 --> 00:36:21,160
by other hats from that system so I

00:36:18,620 --> 00:36:24,890
tried to build it again but that made my

00:36:21,160 --> 00:36:27,770
process rapidly not reproducible and I'm

00:36:24,890 --> 00:36:30,050
currently unable to fix that and I think

00:36:27,770 --> 00:36:31,550
well yeah I have to wait what what to do

00:36:30,050 --> 00:36:34,040
and I've been pulling it from source

00:36:31,550 --> 00:36:36,140
this has a higher level than building a

00:36:34,040 --> 00:36:38,600
triples it useable E and that's why I

00:36:36,140 --> 00:36:46,940
put this like the idea of automatically

00:36:38,600 --> 00:36:48,740
not letting it migrate hello okay I

00:36:46,940 --> 00:36:50,900
think that might be a separate issue

00:36:48,740 --> 00:36:52,910
that can be resolved in that you're

00:36:50,900 --> 00:36:55,490
worried that I understand it you're

00:36:52,910 --> 00:36:58,370
worried that you if you build it and

00:36:55,490 --> 00:37:01,010
upstream builds it because you are you

00:36:58,370 --> 00:37:03,290
are rebuilding source correctly and

00:37:01,010 --> 00:37:05,330
properly you would get the same you get

00:37:03,290 --> 00:37:07,130
a different result - what if upstream

00:37:05,330 --> 00:37:10,540
built it where they are not rebuilding

00:37:07,130 --> 00:37:10,540
everything is that a fair summary

00:37:11,140 --> 00:37:16,610
exactly that package that upstream

00:37:13,910 --> 00:37:20,480
orphan but it's important in our field

00:37:16,610 --> 00:37:21,380
so I'm actually maintaining what's left

00:37:20,480 --> 00:37:23,120
over upstream

00:37:21,380 --> 00:37:25,100
I think there is a separate an

00:37:23,120 --> 00:37:27,050
orthogonal issues as long as it's

00:37:25,100 --> 00:37:30,110
reproducible within Debbi in other words

00:37:27,050 --> 00:37:32,870
if you in the Debian package if you

00:37:30,110 --> 00:37:34,910
built or any of I built it and we get

00:37:32,870 --> 00:37:36,950
the same result it doesn't really matter

00:37:34,910 --> 00:37:39,410
what shenanigans get up to in your data

00:37:36,950 --> 00:37:41,840
button that's the problem okay well they

00:37:39,410 --> 00:37:44,120
might depend on the specifics there but

00:37:41,840 --> 00:37:47,630
it's not that's nothing - it's not

00:37:44,120 --> 00:37:49,700
intrinsic to deviating from upstream

00:37:47,630 --> 00:37:51,920
that should probably just be an issue

00:37:49,700 --> 00:37:56,450
with a particular tool or a particular

00:37:51,920 --> 00:37:58,430
to change the problem but upstream

00:37:56,450 --> 00:38:00,650
usually distributed that file because it

00:37:58,430 --> 00:38:01,670
never change in the last 20 years I

00:38:00,650 --> 00:38:04,549
understand yeah

00:38:01,670 --> 00:38:06,140
and you were right to make you shouldn't

00:38:04,549 --> 00:38:08,660
revert that right you should be building

00:38:06,140 --> 00:38:10,790
the source right yeah yeah yeah so that

00:38:08,660 --> 00:38:20,150
you you make the right decision here but

00:38:10,790 --> 00:38:21,710
yeah yeah we understand yeah great if

00:38:20,150 --> 00:38:24,140
they're no further questions we'd like

00:38:21,710 --> 00:38:26,690
to thank you for coming and all the

00:38:24,140 --> 00:38:29,000
contributors that aren't here I do have

00:38:26,690 --> 00:38:30,530
some reproducible builds badges so if

00:38:29,000 --> 00:38:33,290
you all huddle around the front you can

00:38:30,530 --> 00:38:36,020
all grab some for your bags etc things

00:38:33,290 --> 00:38:45,200
like that so yeah thank you again

00:38:36,020 --> 00:38:45,200

YouTube URL: https://www.youtube.com/watch?v=QCSKL9ndOUg


