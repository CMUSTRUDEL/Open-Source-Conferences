Title: Ganeti Cluster Virtualization Manager â€” Past, Present and Future
Publication date: 2019-08-08
Playlist: DebConf 19
Description: 
	by Apollon Oikonomopoulos

At: DebConf19
https://debconf19.debconf.org/talks/57-ganeti-cluster-virtualization-manager-past-present-and-future/

Ganeti is a cluster virtualization manager providing simple, standalone and robust virtualization clusters using a bunch of commodity KVM or Xen hosts. It was initially developed inside Google but made available as Free Software in 2007 and has been included in Debian since Lenny. Since then, it has become a virtualization platform of choice for many companies and organizations around the world, among which the Debian Project itself. After a couple of years in hiatus, development is slowly resuming with the project being gradually handed over to the community.

This talk aims to give a bit of background on Ganeti itself and describe the current state of affairs. It will highlight all present and future challenges, from community-driven development and project governance, to transitioning to present-day Haskell and Python 3 and supporting current hypervisor versions. System administrators and Python or Haskell coders looking for an interesting project to contribute to will feel at home with this talk. Most people interested in virtualization technologies will also hear a couple of interesting bits.

Room: MiniauditÃ³rio
Scheduled start: 2019-07-22 16:00:00
Captions: 
	00:00:05,290 --> 00:00:11,750
today we are listening to a pollen

00:00:08,170 --> 00:00:13,519
economist speaking about the kinetic

00:00:11,750 --> 00:00:15,669
Laster virtualization manager past

00:00:13,519 --> 00:00:18,890
present and future we look forward to

00:00:15,669 --> 00:00:22,100
thank you very much good afternoon

00:00:18,890 --> 00:00:26,660
thanks for coming this is a talk about

00:00:22,100 --> 00:00:29,150
kinetic it's nothing new software but

00:00:26,660 --> 00:00:31,789
there are some interesting things going

00:00:29,150 --> 00:00:32,650
on in the project itself which I wanted

00:00:31,789 --> 00:00:36,350
to share

00:00:32,650 --> 00:00:39,620
so we'll do a short introduction to be

00:00:36,350 --> 00:00:41,180
an epi and then look a bit at the

00:00:39,620 --> 00:00:45,050
history of the project its current

00:00:41,180 --> 00:00:48,260
status and what we want to improve in

00:00:45,050 --> 00:00:51,440
the future so just brief introduction

00:00:48,260 --> 00:00:54,590
I'm a problem I'm I've been at the bean

00:00:51,440 --> 00:00:57,440
developer since 2014

00:00:54,590 --> 00:01:00,410
I'm also contributing to unity and I

00:00:57,440 --> 00:01:02,300
maintain the package in Debian and my

00:01:00,410 --> 00:01:04,300
personal interests are more on the

00:01:02,300 --> 00:01:08,119
systems and network side of things and

00:01:04,300 --> 00:01:10,940
for living I am a director of platform

00:01:08,119 --> 00:01:18,890
engineering Scrooge er which is a Greek

00:01:10,940 --> 00:01:23,509
ecommerce platform who you has heard of

00:01:18,890 --> 00:01:29,390
ganeti here ok so that's how many have

00:01:23,509 --> 00:01:32,990
used it good ok so again it is labeled

00:01:29,390 --> 00:01:36,229
as a cluster virtualization monitor it

00:01:32,990 --> 00:01:39,289
what it does is that it supports KVM and

00:01:36,229 --> 00:01:41,390
then instances and it tries to manage a

00:01:39,289 --> 00:01:44,929
cluster of machines which it calls nodes

00:01:41,390 --> 00:01:47,780
in Kennedy terms as a non-uniform

00:01:44,929 --> 00:01:49,700
resource pool so if you have let's say

00:01:47,780 --> 00:01:52,220
five machines that you want to run your

00:01:49,700 --> 00:01:53,660
VMs on what can it it does for you is

00:01:52,220 --> 00:01:54,380
that it creates a nice abstraction layer

00:01:53,660 --> 00:01:58,340
on top of them

00:01:54,380 --> 00:02:00,380
and you don't have to care which VM runs

00:01:58,340 --> 00:02:02,360
on which machine it's just managed

00:02:00,380 --> 00:02:04,459
automatically just say I want a virtual

00:02:02,360 --> 00:02:07,190
machine with that much memory and that

00:02:04,459 --> 00:02:09,580
many CPU cores and then ganodi does the

00:02:07,190 --> 00:02:11,950
rest by managing the most the actual

00:02:09,580 --> 00:02:15,250
hosts itself

00:02:11,950 --> 00:02:17,290
so I'm as a software it's rather

00:02:15,250 --> 00:02:19,510
self-contained so it has little external

00:02:17,290 --> 00:02:24,550
dependencies and it's not a huge

00:02:19,510 --> 00:02:28,420
codebase so it's it's let's say rather

00:02:24,550 --> 00:02:31,480
moderately sized and it focuses heavily

00:02:28,420 --> 00:02:34,900
on availability and manageability we'll

00:02:31,480 --> 00:02:38,110
talk about this bit more later so a

00:02:34,900 --> 00:02:41,550
couple of the distinctive features it

00:02:38,110 --> 00:02:44,319
has that makes make it sound apart from

00:02:41,550 --> 00:02:48,519
other solutions is that it has many

00:02:44,319 --> 00:02:49,900
let's say high availability features the

00:02:48,519 --> 00:02:52,780
most prominent being the out-of-the-box

00:02:49,900 --> 00:02:56,350
support for dr BD and surf backed

00:02:52,780 --> 00:03:00,760
instances so with dr BD you basically

00:02:56,350 --> 00:03:02,950
get your virtual machine data replicated

00:03:00,760 --> 00:03:06,930
on two nodes which can then be used to

00:03:02,950 --> 00:03:10,709
live migrate or failover the machine and

00:03:06,930 --> 00:03:13,569
you also get that of course when you use

00:03:10,709 --> 00:03:18,280
safe with our BD which is distributed by

00:03:13,569 --> 00:03:20,829
nature and also it supports a number of

00:03:18,280 --> 00:03:24,130
live operations on the instances which

00:03:20,829 --> 00:03:25,810
means that you can actually tweak the

00:03:24,130 --> 00:03:28,840
instance configuration without downtime

00:03:25,810 --> 00:03:31,090
you can add network cards and disks and

00:03:28,840 --> 00:03:34,630
remove them at runtime and also supports

00:03:31,090 --> 00:03:37,329
memory ballooning so that the vm memory

00:03:34,630 --> 00:03:40,150
can be increased or reduced according

00:03:37,329 --> 00:03:43,900
the needs and finally it also has some

00:03:40,150 --> 00:03:46,930
built-in auto repair functionality so it

00:03:43,900 --> 00:03:48,340
can easily restart machines that should

00:03:46,930 --> 00:03:51,370
be up but they're not running for some

00:03:48,340 --> 00:03:53,500
reason and it can also to a limited

00:03:51,370 --> 00:03:56,650
extent to repair the cluster state by

00:03:53,500 --> 00:04:00,209
migrating or failing over instances from

00:03:56,650 --> 00:04:03,540
dead nodes if need arises

00:04:00,209 --> 00:04:06,850
so one of the core design decisions

00:04:03,540 --> 00:04:08,230
while first writing and it was that

00:04:06,850 --> 00:04:12,489
there should be no single points of

00:04:08,230 --> 00:04:14,920
failure so as an architecture a failure

00:04:12,489 --> 00:04:17,889
in ganeti should not impact running

00:04:14,920 --> 00:04:19,840
instances ever so it's loosely coupled

00:04:17,889 --> 00:04:21,910
to the hypervisor but at the same time

00:04:19,840 --> 00:04:23,680
in full control

00:04:21,910 --> 00:04:25,200
and the good thing is that genetic

00:04:23,680 --> 00:04:27,790
processes can be stopped or restarted

00:04:25,200 --> 00:04:29,830
without affecting any running instances

00:04:27,790 --> 00:04:31,480
even to the extent that you can upgrade

00:04:29,830 --> 00:04:34,740
the whole cluster to a newer version

00:04:31,480 --> 00:04:38,140
without impacting any running VMs and

00:04:34,740 --> 00:04:40,720
another thing that's not that common in

00:04:38,140 --> 00:04:44,500
that kind of solutions is that each node

00:04:40,720 --> 00:04:46,480
actually bridges and/or routes the

00:04:44,500 --> 00:04:49,480
traffic for its the instances it's

00:04:46,480 --> 00:04:52,210
running by itself so instance traffic is

00:04:49,480 --> 00:04:53,500
not tunneled through a single system

00:04:52,210 --> 00:04:56,020
that could act as a single point of

00:04:53,500 --> 00:04:59,860
failure all in all it's a fairly

00:04:56,020 --> 00:05:02,590
resilient solution and my personal

00:04:59,860 --> 00:05:04,270
experience with it after running ganeti

00:05:02,590 --> 00:05:07,270
classes for the past 10 years is that

00:05:04,270 --> 00:05:11,590
we've never had a single outage that was

00:05:07,270 --> 00:05:16,630
gennady's fault so as far as networking

00:05:11,590 --> 00:05:20,050
goes of course it supports instances

00:05:16,630 --> 00:05:21,940
with multiple network cards on a cluster

00:05:20,050 --> 00:05:24,520
level it has the ability to separate

00:05:21,940 --> 00:05:28,570
storage in data and replication traffic

00:05:24,520 --> 00:05:31,090
over to different networks and it

00:05:28,570 --> 00:05:32,740
supports region routed guest networking

00:05:31,090 --> 00:05:35,890
it has limited open the switch support

00:05:32,740 --> 00:05:38,110
currently so it supports tagged villain

00:05:35,890 --> 00:05:39,730
interfaces but not the exelon this is

00:05:38,110 --> 00:05:43,140
something that needs to be implemented

00:05:39,730 --> 00:05:46,030
yet and the good thing when running a

00:05:43,140 --> 00:05:49,090
stand-alone cluster in let's say a

00:05:46,030 --> 00:05:51,400
moderately sized cluster for a small

00:05:49,090 --> 00:05:54,430
medium company is that it also can do

00:05:51,400 --> 00:05:56,410
its own IP address management via

00:05:54,430 --> 00:05:58,630
tainting network so we just configure a

00:05:56,410 --> 00:06:00,460
subnet that's used by kinetic for the

00:05:58,630 --> 00:06:04,170
instances and then it does all address

00:06:00,460 --> 00:06:06,820
allocation and configuration on its own

00:06:04,170 --> 00:06:09,970
unlike what happens in public cloud

00:06:06,820 --> 00:06:13,420
solutions it has no elastic IPS or

00:06:09,970 --> 00:06:16,140
mappings of any kind but these can be

00:06:13,420 --> 00:06:19,060
implemented externally

00:06:16,140 --> 00:06:23,290
so as I said ganeti has a strong focus

00:06:19,060 --> 00:06:27,370
on manageability it's built primarily

00:06:23,290 --> 00:06:29,410
for sis admins and less for end-users so

00:06:27,370 --> 00:06:32,169
it has a comprehensive command-line

00:06:29,410 --> 00:06:35,210
interface and it also has a quasi

00:06:32,169 --> 00:06:39,620
restful well sort of

00:06:35,210 --> 00:06:42,890
HTTP API which can be used to perform

00:06:39,620 --> 00:06:46,850
most operations on instances there is

00:06:42,890 --> 00:06:50,770
even a Python client library that can be

00:06:46,850 --> 00:06:54,260
used to abstract away the API details

00:06:50,770 --> 00:07:01,250
themselves what it doesn't do is that it

00:06:54,260 --> 00:07:03,530
has no notion of users so the resources

00:07:01,250 --> 00:07:05,270
are just there as long as you have

00:07:03,530 --> 00:07:08,630
access to the API or access the

00:07:05,270 --> 00:07:11,870
command-line interface if you need to

00:07:08,630 --> 00:07:15,410
implement any user or multi-tenancy then

00:07:11,870 --> 00:07:17,690
this has to be done externally and there

00:07:15,410 --> 00:07:19,940
are many third-party web interfaces that

00:07:17,690 --> 00:07:21,830
do that by tagging instances as

00:07:19,940 --> 00:07:24,590
belonging to specific users but it's not

00:07:21,830 --> 00:07:27,230
something that is part of kinetochore

00:07:24,590 --> 00:07:29,000
itself so as I said there are some

00:07:27,230 --> 00:07:31,310
third-party web interfaces one of the

00:07:29,000 --> 00:07:33,170
main Kennedy manager can I do web

00:07:31,310 --> 00:07:35,210
manager these are two different projects

00:07:33,170 --> 00:07:39,560
and then there is sin fo which is a

00:07:35,210 --> 00:07:41,990
front-end initially created for the

00:07:39,560 --> 00:07:43,550
public cloud of GeoNet the Greek

00:07:41,990 --> 00:07:46,280
research and education network which

00:07:43,550 --> 00:07:48,470
relies on ganeti all of them are free

00:07:46,280 --> 00:07:54,920
software and can be installed in

00:07:48,470 --> 00:07:56,950
parallel unity so when it comes to

00:07:54,920 --> 00:07:59,120
instance provisioning so how do we

00:07:56,950 --> 00:08:04,370
install an operating system on an

00:07:59,120 --> 00:08:07,400
instance it has its own system if they

00:08:04,370 --> 00:08:10,010
Kennedy has a concept called OS provider

00:08:07,400 --> 00:08:14,000
which is basically a set of scripts that

00:08:10,010 --> 00:08:15,910
know how to partition a disk and install

00:08:14,000 --> 00:08:18,710
an operating system

00:08:15,910 --> 00:08:20,630
classer can have more than one OS

00:08:18,710 --> 00:08:24,080
providers depending on what you need to

00:08:20,630 --> 00:08:26,270
do and you choose one which is supposed

00:08:24,080 --> 00:08:29,720
to provision a new instance at the

00:08:26,270 --> 00:08:31,820
instance creation time it's more looks

00:08:29,720 --> 00:08:34,340
more like a hook based interface so it's

00:08:31,820 --> 00:08:36,080
one script for action one script to

00:08:34,340 --> 00:08:39,830
create the instance one script to

00:08:36,080 --> 00:08:42,410
install it and one script to do a backup

00:08:39,830 --> 00:08:46,250
of the instance it needs if need arises

00:08:42,410 --> 00:08:47,490
and these scripts can support variants

00:08:46,250 --> 00:08:49,800
for instance

00:08:47,490 --> 00:08:51,930
I you can have DNS provider that has a

00:08:49,800 --> 00:08:54,990
variant for stretch and one for Buster

00:08:51,930 --> 00:08:58,200
and then one for bullseye and they also

00:08:54,990 --> 00:09:01,320
get a set of parameters which can be

00:08:58,200 --> 00:09:03,630
relate to the instance for instance what

00:09:01,320 --> 00:09:07,380
is your hostname or any special

00:09:03,630 --> 00:09:09,450
configuration that should be done and it

00:09:07,380 --> 00:09:10,890
also supports secrets that are

00:09:09,450 --> 00:09:14,450
transmitted to the instance without

00:09:10,890 --> 00:09:16,620
being logged anywhere so it's fairly

00:09:14,450 --> 00:09:19,710
comprehensive interface it's just that

00:09:16,620 --> 00:09:22,260
it's it's Ganis it's completely gonna

00:09:19,710 --> 00:09:23,760
the specific there is a good

00:09:22,260 --> 00:09:26,220
documentation about it there is even a

00:09:23,760 --> 00:09:30,240
man page about it that anyone interested

00:09:26,220 --> 00:09:32,250
can have a look at so examples of OS

00:09:30,240 --> 00:09:33,660
providers that are out there is Kennedy

00:09:32,250 --> 00:09:35,670
instance the bootstrap which is also

00:09:33,660 --> 00:09:38,970
available in Debian and uses the

00:09:35,670 --> 00:09:41,820
bootstrap to create the root filesystem

00:09:38,970 --> 00:09:45,050
for an instance there's Gannett instance

00:09:41,820 --> 00:09:48,570
image which is as the name suggests

00:09:45,050 --> 00:09:52,050
image related so you have ready images

00:09:48,570 --> 00:09:54,450
of instance disks and it takes care of

00:09:52,050 --> 00:09:57,660
installing them and then there is gonna

00:09:54,450 --> 00:10:00,720
do as niwap which is a completely dummy

00:09:57,660 --> 00:10:03,600
OS provider that does nothing but is

00:10:00,720 --> 00:10:06,930
there just to circumvent Kennedy's need

00:10:03,600 --> 00:10:10,410
for specifying an OS provider so this is

00:10:06,930 --> 00:10:12,240
used if you import a new and an existing

00:10:10,410 --> 00:10:13,500
machine into ganeti and just don't want

00:10:12,240 --> 00:10:21,660
generated to mess with the operating

00:10:13,500 --> 00:10:25,320
system in any way so code wise Kennedy

00:10:21,660 --> 00:10:29,690
is a relatively mature project so it has

00:10:25,320 --> 00:10:32,820
been around for let's say 12 or 13 years

00:10:29,690 --> 00:10:36,930
it's written in Haskell and Python which

00:10:32,820 --> 00:10:39,000
is an interesting combination the

00:10:36,930 --> 00:10:40,890
biggest part of it is Python still but

00:10:39,000 --> 00:10:42,930
there is a sizable part that is also

00:10:40,890 --> 00:10:45,480
Haskell and we're looking for said

00:10:42,930 --> 00:10:49,890
contributors apparently with those 39

00:10:45,480 --> 00:10:53,430
lines we would like to see more and the

00:10:49,890 --> 00:10:55,430
way it's the way the barrier between

00:10:53,430 --> 00:10:58,820
Haskell and Python works

00:10:55,430 --> 00:11:01,600
is anything that does low level system

00:10:58,820 --> 00:11:05,720
stuff for instance manipulating dr BD

00:11:01,600 --> 00:11:06,920
discs or creating LVM discs or starting

00:11:05,720 --> 00:11:11,660
and stopping in the instances is

00:11:06,920 --> 00:11:14,060
implemented in Python the whole let's

00:11:11,660 --> 00:11:16,790
say business logics stuff and the work

00:11:14,060 --> 00:11:18,680
queue and the central control that does

00:11:16,790 --> 00:11:21,770
the cluster management is implemented in

00:11:18,680 --> 00:11:22,910
Haskell we'll talk a bit about this

00:11:21,770 --> 00:11:25,430
later

00:11:22,910 --> 00:11:29,830
but this has some very interesting side

00:11:25,430 --> 00:11:33,620
effects so ganeti no D which is

00:11:29,830 --> 00:11:37,100
mentioning alongside Python there is

00:11:33,620 --> 00:11:39,980
what runs on every node and Haskell

00:11:37,100 --> 00:11:42,140
demons run basically on the master node

00:11:39,980 --> 00:11:44,959
which takes care of controlling the

00:11:42,140 --> 00:11:49,760
cluster so according to the slots in

00:11:44,959 --> 00:11:53,750
github the current repository has 127

00:11:49,760 --> 00:11:57,050
authors and it weighs in at 16,000

00:11:53,750 --> 00:11:59,200
commits that's for the full 13 year

00:11:57,050 --> 00:11:59,200
history

00:11:59,500 --> 00:12:06,760
so what makes gana this special or is

00:12:04,310 --> 00:12:10,640
there a special place for it in today's

00:12:06,760 --> 00:12:13,250
market so apparently ganeti is not

00:12:10,640 --> 00:12:15,320
OpenStack and it's not skipper neat to

00:12:13,250 --> 00:12:17,570
see there there's no real container

00:12:15,320 --> 00:12:19,279
support there is some some support for

00:12:17,570 --> 00:12:23,150
alexey but it should be considered

00:12:19,279 --> 00:12:25,040
experimental right now the thing telling

00:12:23,150 --> 00:12:27,230
ganeti apart from any of these is that

00:12:25,040 --> 00:12:30,020
it's way simpler and self-contained and

00:12:27,230 --> 00:12:32,980
it's aimed at running long-lived guests

00:12:30,020 --> 00:12:36,709
so OpenStack is more tailored towards

00:12:32,980 --> 00:12:38,990
implementing a public cloud like setup

00:12:36,709 --> 00:12:42,170
and queue Burnett's obviously solves a

00:12:38,990 --> 00:12:44,990
completely different problem so ganodi

00:12:42,170 --> 00:12:47,570
tries to scale well from classes of two

00:12:44,990 --> 00:12:50,029
to several hundreds of nodes and several

00:12:47,570 --> 00:12:51,980
thousands of instances for instance at

00:12:50,029 --> 00:12:55,010
work we have our main class around

00:12:51,980 --> 00:12:58,220
currently runs 500 instances if I recall

00:12:55,010 --> 00:13:01,220
correctly and it's a great way to run

00:12:58,220 --> 00:13:04,190
anything that should be long-lived with

00:13:01,220 --> 00:13:07,040
disaster recovery guarantees

00:13:04,190 --> 00:13:09,829
so it's great for running things like

00:13:07,040 --> 00:13:12,740
mail servers database servers and it's

00:13:09,829 --> 00:13:15,440
also good a good solution to run your

00:13:12,740 --> 00:13:17,449
docker host and kubernetes nodes being

00:13:15,440 --> 00:13:20,569
able to live migrate things obviously

00:13:17,449 --> 00:13:23,959
means that you get less downtime for

00:13:20,569 --> 00:13:30,410
services that do not provide application

00:13:23,959 --> 00:13:32,209
level redundancy and the good the good

00:13:30,410 --> 00:13:34,610
thing with it anyway is that it

00:13:32,209 --> 00:13:40,279
obstructs the hardware and allows you to

00:13:34,610 --> 00:13:45,110
keep state where you need it so as far

00:13:40,279 --> 00:13:48,920
as Debian is concerned the canopy has

00:13:45,110 --> 00:13:51,980
been in Debian since lenny it's a team

00:13:48,920 --> 00:13:54,139
maintained package currently the team

00:13:51,980 --> 00:13:57,800
has three members i guess but we are

00:13:54,139 --> 00:14:00,319
always welcomed more and you can have a

00:13:57,800 --> 00:14:04,879
look at the packages out there our very

00:14:00,319 --> 00:14:08,680
own salsa and what we have currently as

00:14:04,879 --> 00:14:12,259
a set of packages is version packages so

00:14:08,680 --> 00:14:15,350
kennedy has a compatibility promise that

00:14:12,259 --> 00:14:17,389
says that instances with the same that

00:14:15,350 --> 00:14:20,449
excuse me nodes with the same minor

00:14:17,389 --> 00:14:22,610
version so two fifteen point one and two

00:14:20,449 --> 00:14:26,709
fifteen point two should be

00:14:22,610 --> 00:14:30,019
interoperable but we break the api's

00:14:26,709 --> 00:14:32,329
with minor versions so two sixteen is

00:14:30,019 --> 00:14:35,839
not runtime compatible with two fifteen

00:14:32,329 --> 00:14:38,269
so the way we handle upgrades is because

00:14:35,839 --> 00:14:40,430
you need to get all nodes upgraded at

00:14:38,269 --> 00:14:45,199
once again it provides a mechanism for

00:14:40,430 --> 00:14:48,939
this and independent we have packages

00:14:45,199 --> 00:14:53,209
that can be Co installed so you can run

00:14:48,939 --> 00:14:54,709
215 and 216 at the same time you can

00:14:53,209 --> 00:14:56,720
have them installed in one machine and

00:14:54,709 --> 00:14:59,480
then choose to upgrade the whole cluster

00:14:56,720 --> 00:15:05,750
at once through a mechanism via G&T

00:14:59,480 --> 00:15:07,459
class or upgrade so apart from being

00:15:05,750 --> 00:15:10,220
available in debian it's also used by

00:15:07,459 --> 00:15:12,579
debian the debian system administrators

00:15:10,220 --> 00:15:14,710
use it to run much of the project

00:15:12,579 --> 00:15:18,220
infrastructure this includes

00:15:14,710 --> 00:15:23,110
most bill T's and a lot of other systems

00:15:18,220 --> 00:15:27,310
and we even have some virtual machines

00:15:23,110 --> 00:15:31,720
on non Intel architectures which I find

00:15:27,310 --> 00:15:33,550
kind of interesting of course we need to

00:15:31,720 --> 00:15:35,770
do some budget patching there it didn't

00:15:33,550 --> 00:15:39,400
work out of the box but we are as far as

00:15:35,770 --> 00:15:47,650
I know we're running again a TPP c64 al

00:15:39,400 --> 00:15:51,370
and arm 64 instances right now at this

00:15:47,650 --> 00:15:55,750
point I would like to give a bit of

00:15:51,370 --> 00:15:58,990
context regarding the project history in

00:15:55,750 --> 00:16:02,830
the early days it started as an internal

00:15:58,990 --> 00:16:04,180
Google as a reproject and as far as I

00:16:02,830 --> 00:16:05,560
remember there were two Debian

00:16:04,180 --> 00:16:10,450
developers on the team one of the most

00:16:05,560 --> 00:16:12,190
we do work there and initially it

00:16:10,450 --> 00:16:14,620
consisted of a set of scripts to manage

00:16:12,190 --> 00:16:21,850
the RBD back to Zen instances that was

00:16:14,620 --> 00:16:23,770
the days of Gannett e1 and the authors

00:16:21,850 --> 00:16:26,200
were kind enough to release this free

00:16:23,770 --> 00:16:29,350
software in 2007 under GPL v2

00:16:26,200 --> 00:16:32,080
which later got relicensed under a BSD

00:16:29,350 --> 00:16:35,020
to closed license and back then it was

00:16:32,080 --> 00:16:37,590
written entirely in Python so in that

00:16:35,020 --> 00:16:42,100
form it has been part of Debian since

00:16:37,590 --> 00:16:46,630
Lenny and it appeared during the landing

00:16:42,100 --> 00:16:51,130
development cycle I think so that was

00:16:46,630 --> 00:16:54,280
back in 2007 around 2010 it gained good

00:16:51,130 --> 00:16:58,030
traction it was a time where open nebula

00:16:54,280 --> 00:17:02,170
appeared and eucalyptus was also a thing

00:16:58,030 --> 00:17:06,160
and it was just like AWS was becoming a

00:17:02,170 --> 00:17:09,970
thing and people were trying to set up

00:17:06,160 --> 00:17:11,170
their own virtualization clusters so at

00:17:09,970 --> 00:17:12,940
the time it was seen as a good

00:17:11,170 --> 00:17:17,530
alternative to eucalyptus and open

00:17:12,940 --> 00:17:19,150
nebula and that's the time DSA started

00:17:17,530 --> 00:17:22,209
using it for Debian infrastructure and a

00:17:19,150 --> 00:17:25,060
few companies including mine started to

00:17:22,209 --> 00:17:25,959
host internal stuff and it was even used

00:17:25,060 --> 00:17:29,500
to implement

00:17:25,959 --> 00:17:31,450
public clouds in Greece which is pretty

00:17:29,500 --> 00:17:40,059
big with several tens of thousands of

00:17:31,450 --> 00:17:41,740
instances so although this was a this

00:17:40,059 --> 00:17:43,690
was essentially a free software project

00:17:41,740 --> 00:17:45,600
development was always led by Google

00:17:43,690 --> 00:17:50,140
there was a team that was at least

00:17:45,600 --> 00:17:52,419
part-time dedicated to it and I thought

00:17:50,140 --> 00:17:55,210
outside contributions were always of

00:17:52,419 --> 00:17:57,010
course encouraged and in fact a number

00:17:55,210 --> 00:17:59,440
of features for instance the whole gene

00:17:57,010 --> 00:18:01,539
T Network thing that does the IP address

00:17:59,440 --> 00:18:05,830
management was implemented by external

00:18:01,539 --> 00:18:08,320
contributors by 2013 if I recall

00:18:05,830 --> 00:18:09,760
correctly it was promoted to a full-time

00:18:08,320 --> 00:18:12,039
software engineering project which means

00:18:09,760 --> 00:18:13,779
it got its own dedicated team that did

00:18:12,039 --> 00:18:17,289
that and nothing else

00:18:13,779 --> 00:18:19,570
before that it was people doing both

00:18:17,289 --> 00:18:22,270
development and operations and possibly

00:18:19,570 --> 00:18:24,130
other things now it got a team that was

00:18:22,270 --> 00:18:33,840
dedicated to developing it as a software

00:18:24,130 --> 00:18:36,370
project under that status and during

00:18:33,840 --> 00:18:38,710
2013 and until 2015

00:18:36,370 --> 00:18:41,020
it was when many core components were

00:18:38,710 --> 00:18:44,529
rewritten Haskell so the rationale there

00:18:41,020 --> 00:18:46,630
was that anything needed to have better

00:18:44,529 --> 00:18:49,690
performance and Python which was

00:18:46,630 --> 00:18:51,580
somewhat limiting especially when it

00:18:49,690 --> 00:18:55,539
comes to threading and doing things in

00:18:51,580 --> 00:18:58,419
parallel and it was also Haskell

00:18:55,539 --> 00:19:01,350
guarantees of safety due to purity and

00:18:58,419 --> 00:19:05,770
strong types that stopped typing that

00:19:01,350 --> 00:19:09,850
seemed interesting so I have to say that

00:19:05,770 --> 00:19:11,260
in the let's say seven or eight years

00:19:09,850 --> 00:19:14,770
that I'm I've been maintaining the

00:19:11,260 --> 00:19:17,799
package the Haskell code has given us

00:19:14,770 --> 00:19:19,390
the least problems probably up until

00:19:17,799 --> 00:19:22,679
recently where it completely broke

00:19:19,390 --> 00:19:27,220
because of the transition Haskell eight

00:19:22,679 --> 00:19:29,440
so eventually due to internal changes at

00:19:27,220 --> 00:19:30,500
Google development slow down by the end

00:19:29,440 --> 00:19:33,650
of

00:19:30,500 --> 00:19:38,690
fifteen or mid-2016 and it essentially

00:19:33,650 --> 00:19:40,730
stopped by the end of 2016 the thing is

00:19:38,690 --> 00:19:43,640
there was a sizable community that had

00:19:40,730 --> 00:19:47,390
been that had developed around project

00:19:43,640 --> 00:19:49,550
and even had an annual users meeting

00:19:47,390 --> 00:19:51,290
which we call kinetic on and the

00:19:49,550 --> 00:19:53,870
community went on holding and I think on

00:19:51,290 --> 00:19:56,660
every year since then and submitting

00:19:53,870 --> 00:20:00,560
issues and pull requests which remained

00:19:56,660 --> 00:20:01,910
in a limbo for quite some time so the

00:20:00,560 --> 00:20:05,930
latest development there was that in

00:20:01,910 --> 00:20:09,230
December 2018 to 16 zero was released

00:20:05,930 --> 00:20:11,330
and Google officially announced that it

00:20:09,230 --> 00:20:16,430
was ending development there will be no

00:20:11,330 --> 00:20:20,780
more Google initiated releases of

00:20:16,430 --> 00:20:27,380
Kennedy so this leads us to now

00:20:20,780 --> 00:20:31,520
basically we as a community of users are

00:20:27,380 --> 00:20:34,870
trying to take over the project and

00:20:31,520 --> 00:20:37,610
continue from where Google left so it's

00:20:34,870 --> 00:20:41,450
the procedure to hand over the project

00:20:37,610 --> 00:20:46,460
is has been bit slow but it's picking up

00:20:41,450 --> 00:20:49,070
speed and we're we're in a process of

00:20:46,460 --> 00:20:50,900
talking with Google to get the project

00:20:49,070 --> 00:20:52,610
assets transferred to the community this

00:20:50,900 --> 00:20:56,270
includes a github account and things

00:20:52,610 --> 00:20:58,220
like a domain and so on so at the same

00:20:56,270 --> 00:21:00,320
time we're also trying to restart

00:20:58,220 --> 00:21:01,730
development because there are things

00:21:00,320 --> 00:21:04,070
that the code Bay the code base is

00:21:01,730 --> 00:21:05,690
getting older and there are things that

00:21:04,070 --> 00:21:07,250
need to need to be fixed and

00:21:05,690 --> 00:21:09,590
compatibility that needs to be

00:21:07,250 --> 00:21:12,770
implemented so there's a lot to be done

00:21:09,590 --> 00:21:14,180
and unfortunately there is currently few

00:21:12,770 --> 00:21:21,260
people involved so if anybody's

00:21:14,180 --> 00:21:23,450
interested please step up and say so the

00:21:21,260 --> 00:21:26,960
community efforts led to the release of

00:21:23,450 --> 00:21:29,150
two 16.1 which was released this April

00:21:26,960 --> 00:21:34,400
and it included code from 17 different

00:21:29,150 --> 00:21:36,500
contributors now in reality it was five

00:21:34,400 --> 00:21:38,720
or six people the rest was cherry-picks

00:21:36,500 --> 00:21:40,460
from all the branches but it was five or

00:21:38,720 --> 00:21:41,270
six people that are actively contributed

00:21:40,460 --> 00:21:44,090
code during the

00:21:41,270 --> 00:21:45,920
for months which is not bad so this was

00:21:44,090 --> 00:21:48,320
the first release outside Google and the

00:21:45,920 --> 00:21:52,550
aim was to fix long-standing bugs and

00:21:48,320 --> 00:21:55,130
add support for modern Haskell and qumu

00:21:52,550 --> 00:22:02,030
3.1 which was released with Pastor and

00:21:55,130 --> 00:22:04,760
broke a lot of options so 216 1

00:22:02,030 --> 00:22:07,250
basically reduced the Delta with Debian

00:22:04,760 --> 00:22:11,090
patches they've been packaged a lot it

00:22:07,250 --> 00:22:15,800
removed 24 patches from the package

00:22:11,090 --> 00:22:19,700
which were merged at upstream and this

00:22:15,800 --> 00:22:22,370
got us to busser unfortunately it was

00:22:19,700 --> 00:22:24,500
too late to get to 16 one in buster

00:22:22,370 --> 00:22:28,640
so the packaging passer is still the

00:22:24,500 --> 00:22:33,710
heavily patched to 16.0 but I plan to

00:22:28,640 --> 00:22:37,370
update this via backboards in the

00:22:33,710 --> 00:22:40,820
short-term future so stretch was

00:22:37,370 --> 00:22:43,730
released with two 15.2 but also has two

00:22:40,820 --> 00:22:45,500
16-0 via backwards currently so there is

00:22:43,730 --> 00:22:51,950
an upgrade path for people wanting to

00:22:45,500 --> 00:22:55,160
upgrade by backwards as well so what do

00:22:51,950 --> 00:23:00,410
we expect to improve in the near future

00:22:55,160 --> 00:23:02,030
given enough human resources so the

00:23:00,410 --> 00:23:04,190
first and most obvious thing is that we

00:23:02,030 --> 00:23:07,340
need to move away from Python to Python

00:23:04,190 --> 00:23:11,840
to his end of life by end of this year

00:23:07,340 --> 00:23:15,500
and there is no reason to lag behind

00:23:11,840 --> 00:23:18,550
it's an inevitable reality unfortunately

00:23:15,500 --> 00:23:21,980
that's not an easy task migrating a

00:23:18,550 --> 00:23:25,070
relatively big codebase from Python to

00:23:21,980 --> 00:23:26,930
the Python 3 is not just about replacing

00:23:25,070 --> 00:23:29,510
all instances of the print statement of

00:23:26,930 --> 00:23:31,310
the print function the biggest thing

00:23:29,510 --> 00:23:33,860
with Python 3 is that it has an internal

00:23:31,310 --> 00:23:36,260
boundary of strings and bytes anything

00:23:33,860 --> 00:23:38,960
that is communicated with the outside

00:23:36,260 --> 00:23:41,150
world is bytes and the application

00:23:38,960 --> 00:23:43,070
internally has to work with strings this

00:23:41,150 --> 00:23:44,780
is something that didn't exist in the

00:23:43,070 --> 00:23:48,140
Python 2 world and it means that you

00:23:44,780 --> 00:23:49,580
have to curve out boundary between your

00:23:48,140 --> 00:23:52,360
application space and the rest of the

00:23:49,580 --> 00:23:56,140
world so this is fairly intrusive

00:23:52,360 --> 00:23:57,730
if you want to do it right this is

00:23:56,140 --> 00:24:00,250
something that is underway

00:23:57,730 --> 00:24:03,280
we've reached the point where all tests

00:24:00,250 --> 00:24:05,110
pass with by three but it needs a

00:24:03,280 --> 00:24:07,090
rigorous testing the problem with Python

00:24:05,110 --> 00:24:08,730
here is that we expect a lot of things

00:24:07,090 --> 00:24:11,470
to break at runtime

00:24:08,730 --> 00:24:13,390
because of duck typing there is no such

00:24:11,470 --> 00:24:15,790
thing as static type checking that you

00:24:13,390 --> 00:24:17,800
could use to see if you've got

00:24:15,790 --> 00:24:20,710
everything right and because of Ganet is

00:24:17,800 --> 00:24:22,330
nature of interacting interfacing with

00:24:20,710 --> 00:24:25,000
low-level systems components

00:24:22,330 --> 00:24:28,780
you can't just mock all these systems

00:24:25,000 --> 00:24:31,390
away and expect unit tests to work so we

00:24:28,780 --> 00:24:33,940
need to do rigorous real-world testing

00:24:31,390 --> 00:24:38,890
and regression testing to get things

00:24:33,940 --> 00:24:42,330
right another thing is that while the OS

00:24:38,890 --> 00:24:45,610
provider thing works well if you have

00:24:42,330 --> 00:24:48,010
the resources and power to actually

00:24:45,610 --> 00:24:50,950
maintain your own images it doesn't

00:24:48,010 --> 00:24:55,210
provide a very smooth experience out of

00:24:50,950 --> 00:24:56,679
the box so for start only much based

00:24:55,210 --> 00:24:58,929
providers require maintaining your own

00:24:56,679 --> 00:25:03,190
images and this is quite a lot of work

00:24:58,929 --> 00:25:07,390
to do if you want to do other things on

00:25:03,190 --> 00:25:09,309
the side so we've been asking ourselves

00:25:07,390 --> 00:25:11,350
since our own wheel does not look

00:25:09,309 --> 00:25:13,420
there's not real better why not use

00:25:11,350 --> 00:25:15,550
ready cloud images instead there are

00:25:13,420 --> 00:25:17,350
different solutions out there we're

00:25:15,550 --> 00:25:18,970
mostly compatible with anything that

00:25:17,350 --> 00:25:23,140
runs on qmo

00:25:18,970 --> 00:25:26,500
so we could for instance use even I

00:25:23,140 --> 00:25:28,840
don't know even Amazon a.m. eyes so the

00:25:26,500 --> 00:25:31,090
project should focus on a blessed that's

00:25:28,840 --> 00:25:33,700
a default OS provider interoperating

00:25:31,090 --> 00:25:36,760
with I don't know for instance OpenStack

00:25:33,700 --> 00:25:38,800
images we're no we're not we're not

00:25:36,760 --> 00:25:41,020
completely sure about this yet it's

00:25:38,800 --> 00:25:44,580
still something that the discussion is

00:25:41,020 --> 00:25:48,210
in progress but it's

00:25:44,580 --> 00:25:50,370
step that has to be taken forward the

00:25:48,210 --> 00:25:54,000
other thing is improved hypervisor

00:25:50,370 --> 00:26:03,150
support so what we are basically relying

00:25:54,000 --> 00:26:06,179
on is QM and then but I mean sensors out

00:26:03,150 --> 00:26:10,140
there says that it's qmo and KVM but

00:26:06,179 --> 00:26:13,020
most people are using so qmo has been

00:26:10,140 --> 00:26:15,380
advancing pretty fast and again it is

00:26:13,020 --> 00:26:20,280
defaults haven't been updated since

00:26:15,380 --> 00:26:23,880
let's say 2011 or 2012 so we need to get

00:26:20,280 --> 00:26:26,100
better out-of-the-box defaults to give

00:26:23,880 --> 00:26:29,700
them more smooth experience and leverage

00:26:26,100 --> 00:26:32,340
of newer virtual hardware generations

00:26:29,700 --> 00:26:35,640
that qmo has to offer for instance we

00:26:32,340 --> 00:26:37,580
are running on emulated I 440 chipsets

00:26:35,640 --> 00:26:41,429
by default which is a Pentium 2 class

00:26:37,580 --> 00:26:44,340
system with a plain PCI bus we could

00:26:41,429 --> 00:26:45,600
switch right away to 235 and PCI Express

00:26:44,340 --> 00:26:48,480
which would give a much better

00:26:45,600 --> 00:26:51,780
experience and support for various

00:26:48,480 --> 00:26:55,590
retail devices other improvements that

00:26:51,780 --> 00:26:57,720
the users have been asking for is UEFI

00:26:55,590 --> 00:26:59,850
supports among others will help enable

00:26:57,720 --> 00:27:04,800
secure boots and the PM's and so on or

00:26:59,850 --> 00:27:07,190
even Qube boot which is a cure most

00:27:04,800 --> 00:27:10,920
Pacific firmware that tries to minimize

00:27:07,190 --> 00:27:12,510
startup times so but for me the most

00:27:10,920 --> 00:27:14,220
important thing is to establish a

00:27:12,510 --> 00:27:18,020
communication channel with the qmo

00:27:14,220 --> 00:27:21,990
development and stay up to date we only

00:27:18,020 --> 00:27:25,260
notice the breakage of qmo 3.1

00:27:21,990 --> 00:27:26,730
when emu 3.1 was out but we should have

00:27:25,260 --> 00:27:32,400
known better and we should have been

00:27:26,730 --> 00:27:34,290
notified earlier and of course taking

00:27:32,400 --> 00:27:39,300
the project from corporate to community

00:27:34,290 --> 00:27:41,400
development is really hard Google was

00:27:39,300 --> 00:27:43,230
doing all the release engineering and

00:27:41,400 --> 00:27:45,660
future planning and was driving the

00:27:43,230 --> 00:27:48,370
project ahead and now we have to somehow

00:27:45,660 --> 00:27:52,740
substitute for this and

00:27:48,370 --> 00:27:56,140
it's something that leaves a big gap and

00:27:52,740 --> 00:27:58,330
given the fact that also old coal pieces

00:27:56,140 --> 00:28:01,270
barely attract new contributors we're in

00:27:58,330 --> 00:28:04,900
a relatively tight spot but there seems

00:28:01,270 --> 00:28:09,480
to be some still interest in the project

00:28:04,900 --> 00:28:12,279
and people are stepping up to help so

00:28:09,480 --> 00:28:14,650
one other problem is that the choice for

00:28:12,279 --> 00:28:17,890
Haskell obviously offers some great

00:28:14,650 --> 00:28:21,600
advantages as I said it's been one of

00:28:17,890 --> 00:28:24,669
them less troublesome components I've

00:28:21,600 --> 00:28:27,490
seen but the problem is that it raises

00:28:24,669 --> 00:28:30,390
the powerful contributions so people who

00:28:27,490 --> 00:28:35,320
deal with systems programming do not

00:28:30,390 --> 00:28:38,080
usually write Haskell and to be honest

00:28:35,320 --> 00:28:40,779
if you are just as a systems

00:28:38,080 --> 00:28:44,010
administrator or an SRE Haskell may

00:28:40,779 --> 00:28:48,120
appear at least daunting at first sight

00:28:44,010 --> 00:28:50,679
so this is something that has been

00:28:48,120 --> 00:28:53,620
discussed over and over in the recent

00:28:50,679 --> 00:28:56,200
genetic conferences if we want to keep

00:28:53,620 --> 00:29:01,440
Haskell around or replace it for

00:28:56,200 --> 00:29:03,640
instance with Python 3 with recent

00:29:01,440 --> 00:29:07,690
patches it gets compatibility for the

00:29:03,640 --> 00:29:11,350
GHC 8 this has been less of an issue but

00:29:07,690 --> 00:29:13,779
still it's something that needs to be

00:29:11,350 --> 00:29:16,330
considered and of course we need to

00:29:13,779 --> 00:29:18,940
figure out project governance and

00:29:16,330 --> 00:29:22,240
processes to prioritize features and to

00:29:18,940 --> 00:29:24,909
release engineering to 16:1 worked

00:29:22,240 --> 00:29:28,510
because there were many low-hanging

00:29:24,909 --> 00:29:30,010
fruits but in future especially for 3.0

00:29:28,510 --> 00:29:34,179
which is going to be the next major

00:29:30,010 --> 00:29:37,390
release we need to make sure that we can

00:29:34,179 --> 00:29:38,799
do some proper planning and finally of

00:29:37,390 --> 00:29:40,539
course we need to reach out to anyone

00:29:38,799 --> 00:29:43,679
who can help the project is big

00:29:40,539 --> 00:29:48,419
there is a sizable user base

00:29:43,679 --> 00:29:51,760
unfortunately most of the users do not

00:29:48,419 --> 00:29:53,740
contribute in terms of code but still

00:29:51,760 --> 00:29:55,809
there are there's a chance to contribute

00:29:53,740 --> 00:29:57,490
either by the reporting bugs or

00:29:55,809 --> 00:29:58,260
recommending things or even conducting

00:29:57,490 --> 00:30:02,190
some testing

00:29:58,260 --> 00:30:04,850
so if anybody is interesting is

00:30:02,190 --> 00:30:07,980
interested I find Canada terribly

00:30:04,850 --> 00:30:11,100
interesting project to work on you get

00:30:07,980 --> 00:30:13,080
to deal with a distributed system that

00:30:11,100 --> 00:30:15,660
also does virtualization it's not

00:30:13,080 --> 00:30:17,880
containers but it's still a very

00:30:15,660 --> 00:30:20,309
interesting stuff so if anybody wants to

00:30:17,880 --> 00:30:26,640
contribute your help is really really

00:30:20,309 --> 00:30:30,120
really appreciated so that's all I think

00:30:26,640 --> 00:30:39,870
we have enough time for questions thank

00:30:30,120 --> 00:30:43,880
you very much hi great talk

00:30:39,870 --> 00:30:48,000
thank you so a day job we have many

00:30:43,880 --> 00:30:51,270
independent send servers they are not

00:30:48,000 --> 00:30:55,620
clustered in any way we don't use the

00:30:51,270 --> 00:31:02,309
our DB is there any way that ganeti can

00:30:55,620 --> 00:31:07,080
adopt those VMs without any downtime yes

00:31:02,309 --> 00:31:09,270
it's not straightforward I mean under

00:31:07,080 --> 00:31:11,549
the hood it stores all state in a big

00:31:09,270 --> 00:31:14,370
config file which is distributed between

00:31:11,549 --> 00:31:17,220
nodes and it's the config files pure

00:31:14,370 --> 00:31:19,410
JSON so in theory you can generate a

00:31:17,220 --> 00:31:22,350
config file for your current state and

00:31:19,410 --> 00:31:24,570
it should be able to more or less adopt

00:31:22,350 --> 00:31:27,270
things but it depends on your specific

00:31:24,570 --> 00:31:31,230
setup and there's also I don't know if

00:31:27,270 --> 00:31:33,960
you are you using shared storage no well

00:31:31,230 --> 00:31:40,530
we have a cluster server but it's not

00:31:33,960 --> 00:31:42,440
tied with the same so newer kinetic

00:31:40,530 --> 00:31:46,470
versions also support what is called

00:31:42,440 --> 00:31:48,929
external storage providers and yeah so

00:31:46,470 --> 00:31:52,919
you can also write some scripts that

00:31:48,929 --> 00:31:56,460
setup and teardown storage for the

00:31:52,919 --> 00:31:58,320
instances leaving just a symlink to

00:31:56,460 --> 00:32:00,360
worthy instance that should be so that's

00:31:58,320 --> 00:32:03,120
the API there's a sim link to the device

00:32:00,360 --> 00:32:05,640
that should be the instances disk so you

00:32:03,120 --> 00:32:06,960
can also leverage that to import your

00:32:05,640 --> 00:32:09,570
storage

00:32:06,960 --> 00:32:11,639
in - ganodi if you have special needs

00:32:09,570 --> 00:32:16,979
there I know that other people have used

00:32:11,639 --> 00:32:19,169
that to implement providers for storage

00:32:16,979 --> 00:32:23,549
providers for big sound devices for

00:32:19,169 --> 00:32:26,070
instance but yeah I mean it's it's

00:32:23,549 --> 00:32:29,609
something that you could explore it's

00:32:26,070 --> 00:32:31,409
not that difficult for the most part

00:32:29,609 --> 00:32:35,700
that configures human-readable you just

00:32:31,409 --> 00:32:39,389
need to generate user IDs and stuff if

00:32:35,700 --> 00:32:41,399
you want to you know make it work but

00:32:39,389 --> 00:32:43,339
it's something you could explore and it

00:32:41,399 --> 00:32:47,149
for sure it will be a big improvement

00:32:43,339 --> 00:32:54,049
over hand managed Xen servers

00:32:47,149 --> 00:32:54,049
thank you other questions

00:32:57,490 --> 00:33:01,260
okay thank you very much

00:33:02,660 --> 00:33:07,359

YouTube URL: https://www.youtube.com/watch?v=L4dSiGQS9No


