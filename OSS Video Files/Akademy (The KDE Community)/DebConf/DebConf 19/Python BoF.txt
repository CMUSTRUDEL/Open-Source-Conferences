Title: Python BoF
Publication date: 2020-02-18
Playlist: DebConf 19
Description: 
	by Piotr OÅ¼arowski

At: DebConf19
https://debconf19.debconf.org/talks/35-python-bof/

annual meeting of people interested in Python in Debian

Room: Sala de Videoconferencia
Scheduled start: 2019-07-21 14:30:00
Captions: 
	00:00:05,230 --> 00:00:11,230
this is Python buff which means we will

00:00:08,860 --> 00:00:13,799
there is no presentation or something

00:00:11,230 --> 00:00:18,070
like that we will have a discussion here

00:00:13,799 --> 00:00:21,550
there are some prepared topics but we

00:00:18,070 --> 00:00:25,180
can talk about whatever is related to

00:00:21,550 --> 00:00:29,619
Python and Debian so it's just a

00:00:25,180 --> 00:00:31,210
suggestion and I guess we can start with

00:00:29,619 --> 00:01:26,650
introducing ourselves

00:00:31,210 --> 00:01:30,180
my name is key so I am member of the

00:01:26,650 --> 00:01:33,340
Python team I do - professionally and

00:01:30,180 --> 00:01:40,170
packaging the modules that we need at

00:01:33,340 --> 00:01:44,080
work hi I'm Everton we use byte I use

00:01:40,170 --> 00:01:50,920
embedded systems so I'm looking forward

00:01:44,080 --> 00:01:55,810
to see how it goes package maintainer

00:01:50,920 --> 00:01:58,210
and maintain some what yours hi I'm

00:01:55,810 --> 00:02:01,950
Jonathan or high voltage on RC I just

00:01:58,210 --> 00:02:06,130
might turn a few leaf packages in - team

00:02:01,950 --> 00:02:10,049
hi I'm Pedro I use bite on usually two

00:02:06,130 --> 00:02:14,280
scripts for automation and also to

00:02:10,049 --> 00:02:50,550
improve his eye tree

00:02:14,280 --> 00:02:53,760
hi my name's Matt so my name is William

00:02:50,550 --> 00:02:57,620
I am a WG on my RC and I just joined a

00:02:53,760 --> 00:02:57,620
team of about two weeks ago

00:03:00,270 --> 00:03:07,520
I'm Victor and I've been using Python

00:03:02,970 --> 00:03:10,920
for scientific computing for three years

00:03:07,520 --> 00:03:13,350
I'm Archer I'm doing ji-suk project we

00:03:10,920 --> 00:03:16,459
in python and I'm just starting doing

00:03:13,350 --> 00:03:18,300
packaging thanks to Zeke oh he's here

00:03:16,459 --> 00:03:22,560
yeah that's it

00:03:18,300 --> 00:03:40,170
I am Angelina I made my first package

00:03:22,560 --> 00:03:43,049
last night so why not Python packages hi

00:03:40,170 --> 00:03:45,390
I'm Andre I'm one of admins of Python

00:03:43,049 --> 00:03:52,040
team and we are using Python in our

00:03:45,390 --> 00:03:52,040
company yes

00:03:54,300 --> 00:03:59,900
[Laughter]

00:03:57,819 --> 00:04:02,390
hi I'm Germany

00:03:59,900 --> 00:04:10,340
I work with vital for embedded

00:04:02,390 --> 00:04:13,519
applications hello and Martin I work

00:04:10,340 --> 00:04:31,340
with various languages and one of them

00:04:13,519 --> 00:04:35,830
is pi - hi i'm thomas and pi tools so

00:04:31,340 --> 00:04:39,110
those two files more in the read in the

00:04:35,830 --> 00:04:42,199
nvidia team and OpenCL team not python

00:04:39,110 --> 00:05:01,190
team but still those are all are in

00:04:42,199 --> 00:05:06,349
Python hi I'm Tim I'm a Python dev we

00:05:01,190 --> 00:05:08,900
are introducing cancer and I'm coming to

00:05:06,349 --> 00:05:12,580
the buff because I have some patent

00:05:08,900 --> 00:05:12,580
programs and I'm coming too late

00:05:13,479 --> 00:05:20,599
there's mobs there's a whole bunch of

00:05:15,590 --> 00:05:22,760
empty seats at the front come here and

00:05:20,599 --> 00:05:24,979
try I'm stuck on Oliveira I maintain

00:05:22,760 --> 00:05:29,360
some Python modules and the pi PI

00:05:24,979 --> 00:05:32,120
interpreters okay so I think the fight

00:05:29,360 --> 00:05:34,880
on to removal will dominate this meeting

00:05:32,120 --> 00:05:40,820
so do you want to start from something

00:05:34,880 --> 00:05:43,130
else because if that's a good time to do

00:05:40,820 --> 00:05:47,389
it because it will probably dominated

00:05:43,130 --> 00:05:50,470
the Python to remove all so should we

00:05:47,389 --> 00:05:50,470
start with the next item then

00:05:54,490 --> 00:06:00,100
yep so I added the last bullet point

00:05:57,280 --> 00:06:01,990
here like if they'd like to have like a

00:06:00,100 --> 00:06:03,669
different environments its latest from

00:06:01,990 --> 00:06:05,470
the system libraries to provide

00:06:03,669 --> 00:06:07,599
different versions of Python

00:06:05,470 --> 00:06:09,430
I don't know sure if that would be if

00:06:07,599 --> 00:06:12,009
there's a sensible way to support that

00:06:09,430 --> 00:06:13,919
in debian and there is similar apps

00:06:12,009 --> 00:06:18,729
obscene tools like software collections

00:06:13,919 --> 00:06:21,490
or vitamin ball modules that could be we

00:06:18,729 --> 00:06:23,680
could have in phindeli and so is what

00:06:21,490 --> 00:06:25,780
people think about it is that something

00:06:23,680 --> 00:06:27,849
you have discussed in the past is that

00:06:25,780 --> 00:06:31,889
something possible it is impossible so

00:06:27,849 --> 00:06:36,430
just to have your ideas see what I

00:06:31,889 --> 00:06:39,930
usually try to have only one version of

00:06:36,430 --> 00:06:42,520
library if there are sometimes upstream

00:06:39,930 --> 00:06:44,889
provides like in Jinja and there's a

00:06:42,520 --> 00:06:48,610
ginger and ginger too so different name

00:06:44,889 --> 00:06:51,159
for the module so it you can install

00:06:48,610 --> 00:06:54,280
both of them at the same time but if the

00:06:51,159 --> 00:06:57,880
name is the same then it's not really

00:06:54,280 --> 00:07:01,389
supported in Debian you can use some

00:06:57,880 --> 00:07:04,449
tricks to to switch them but it's not

00:07:01,389 --> 00:07:08,650
really a good idea Pro if you really

00:07:04,449 --> 00:07:14,320
have to then probably way to do it is to

00:07:08,650 --> 00:07:19,180
write a private library and then access

00:07:14,320 --> 00:07:22,169
path happens in this new version if your

00:07:19,180 --> 00:07:27,759
application really need it needs it but

00:07:22,169 --> 00:07:30,039
there's also the age visual em but I

00:07:27,759 --> 00:07:41,650
never really used that so I don't know

00:07:30,039 --> 00:07:44,770
if that works you know this - like in

00:07:41,650 --> 00:07:47,590
opt you can have a jail with different

00:07:44,770 --> 00:07:50,289
package Python modules and you can just

00:07:47,590 --> 00:07:53,139
tweak the linker and have your

00:07:50,289 --> 00:07:58,840
application use those libraries instead

00:07:53,139 --> 00:08:00,940
of your system libraries so it's not not

00:07:58,840 --> 00:08:03,130
it's isolating the application from the

00:08:00,940 --> 00:08:05,110
system libraries I mean I understand

00:08:03,130 --> 00:08:07,900
system we don't want to have different

00:08:05,110 --> 00:08:11,290
versions but there are applications that

00:08:07,900 --> 00:08:17,289
in on on different ventures that are not

00:08:11,290 --> 00:08:18,820
the system ones so that if I if one of

00:08:17,289 --> 00:08:21,669
my applications would need that

00:08:18,820 --> 00:08:23,949
fortunately none of them currently need

00:08:21,669 --> 00:08:28,110
that but in the past I had such

00:08:23,949 --> 00:08:31,330
situation and I just bundled editing

00:08:28,110 --> 00:08:35,580
applications private directory so that

00:08:31,330 --> 00:08:40,300
do not to mess with the system a white

00:08:35,580 --> 00:08:44,709
path but I don't know if others use the

00:08:40,300 --> 00:08:59,650
same strategy maybe someone has a better

00:08:44,709 --> 00:09:03,580
idea for applications I don't use it I I

00:08:59,650 --> 00:09:06,880
maintain quite some applications and I

00:09:03,580 --> 00:09:10,570
just use the private directory so

00:09:06,880 --> 00:09:14,890
there's the HP to 11th or virtual and

00:09:10,570 --> 00:09:18,730
it's not involved at all when I have

00:09:14,890 --> 00:09:23,230
some kind of many applications with many

00:09:18,730 --> 00:09:25,120
different ways to work and depending on

00:09:23,230 --> 00:09:28,600
different lab libraries I just use

00:09:25,120 --> 00:09:33,070
docker and work with containers for

00:09:28,600 --> 00:09:37,240
everything easier then have virtual I

00:09:33,070 --> 00:09:44,170
and some other withdraw environments way

00:09:37,240 --> 00:09:45,820
to deal with it would have a totally

00:09:44,170 --> 00:09:48,400
different question I just wanted to

00:09:45,820 --> 00:09:50,500
really record it because we have lots of

00:09:48,400 --> 00:09:52,900
Titan packages in Debian which are

00:09:50,500 --> 00:09:55,600
maintained by random maintenance not a

00:09:52,900 --> 00:09:57,910
team and VM also in our team fighting

00:09:55,600 --> 00:09:58,839
modules which could be in the patent

00:09:57,910 --> 00:10:01,800
team or not

00:09:58,839 --> 00:10:05,080
what is it the opinion should we try to

00:10:01,800 --> 00:10:07,209
assemble all the patent motors to be

00:10:05,080 --> 00:10:09,459
maintained by the right models team to

00:10:07,209 --> 00:10:11,529
get some consistency and the package

00:10:09,459 --> 00:10:14,589
thing or is it what we don't want I

00:10:11,529 --> 00:10:17,770
think that end goal would be not to have

00:10:14,589 --> 00:10:19,420
as many as possible in the team but I

00:10:17,770 --> 00:10:23,140
would focus first

00:10:19,420 --> 00:10:28,060
on making the team to work a bit better

00:10:23,140 --> 00:10:31,870
so that we are taking you know the

00:10:28,060 --> 00:10:33,640
intention of the team because I just

00:10:31,870 --> 00:10:35,950
approached to try one which was fighting

00:10:33,640 --> 00:10:39,400
interval also maintained by I don't know

00:10:35,950 --> 00:10:41,260
but we had issue with this package and I

00:10:39,400 --> 00:10:43,570
asked the maintainer do you want to turn

00:10:41,260 --> 00:10:46,270
the team it is a correct way to approach

00:10:43,570 --> 00:10:49,780
people also said we don't care what

00:10:46,270 --> 00:10:51,820
works so I think it's a good idea to

00:10:49,780 --> 00:10:55,360
encourage people to join the team if

00:10:51,820 --> 00:10:59,850
they have to maintain random modules as

00:10:55,360 --> 00:11:02,710
a dependency to their package I don't

00:10:59,850 --> 00:11:05,140
know we currently don't have that many

00:11:02,710 --> 00:11:08,830
people who are taking care of all

00:11:05,140 --> 00:11:11,530
languages other than their own base but

00:11:08,830 --> 00:11:14,560
the number of people who are taking care

00:11:11,530 --> 00:11:17,140
of them is greater than zero so yes it's

00:11:14,560 --> 00:11:20,080
still better to have packages in the

00:11:17,140 --> 00:11:24,880
team because sometimes this andrey will

00:11:20,080 --> 00:11:38,730
make a lot of mass commits with fixes so

00:11:24,880 --> 00:11:42,040
thanks for that know how many packages

00:11:38,730 --> 00:11:48,070
in these repositories are out of date or

00:11:42,040 --> 00:12:01,260
unmaintained to be honest i don't know

00:11:48,070 --> 00:12:04,930
that outside the team but for me it's

00:12:01,260 --> 00:12:08,920
like like it's very difficult to update

00:12:04,930 --> 00:12:12,340
things or to see things which are not

00:12:08,920 --> 00:12:15,400
maintained within a team and it's much

00:12:12,340 --> 00:12:18,070
easier to see if if you have them well

00:12:15,400 --> 00:12:19,840
just maintain by it by a single

00:12:18,070 --> 00:12:24,040
maintainer then you see that they they

00:12:19,840 --> 00:12:27,100
well they are flagged if the maintainer

00:12:24,040 --> 00:12:31,800
is Mir so it would be really interesting

00:12:27,100 --> 00:12:35,130
I know that dmt team is very very

00:12:31,800 --> 00:12:38,390
a loosely coupled team but we should

00:12:35,130 --> 00:12:41,279
have a better understanding about

00:12:38,390 --> 00:12:49,560
quality of the packages or how our

00:12:41,279 --> 00:12:52,769
recent these are I think if we could

00:12:49,560 --> 00:12:56,250
quickly decide that it's okay to any

00:12:52,769 --> 00:12:58,860
move any package in Debian to remove

00:12:56,250 --> 00:13:01,260
Python 2 so switching to the Python

00:12:58,860 --> 00:13:03,839
thorough topic so yeah switching back to

00:13:01,260 --> 00:13:08,430
the Python 2 topic so because there's so

00:13:03,839 --> 00:13:11,269
many packages if we take the time to

00:13:08,430 --> 00:13:14,100
contact each and every maintainer of a

00:13:11,269 --> 00:13:17,339
item to package to ask him if it's okay

00:13:14,100 --> 00:13:19,560
to enemy it's going never be finished I

00:13:17,339 --> 00:13:22,170
was thinking about that and I think we

00:13:19,560 --> 00:13:25,560
should start with a mail - I don't know

00:13:22,170 --> 00:13:29,940
they've been devil and proposing such

00:13:25,560 --> 00:13:35,730
thing so that we'll get a general

00:13:29,940 --> 00:13:38,940
approval for that and that's why we are

00:13:35,730 --> 00:13:45,690
here to discuss what would be the rules

00:13:38,940 --> 00:13:48,720
of such uploads should we allow such

00:13:45,690 --> 00:13:50,520
removal only for packages that are

00:13:48,720 --> 00:13:54,240
already on for relief packages in

00:13:50,520 --> 00:13:58,860
testing that would be my idea so not

00:13:54,240 --> 00:14:03,209
every package leave packaged in unstable

00:13:58,860 --> 00:14:06,450
should be a reason to remove item - but

00:14:03,209 --> 00:14:08,700
if there's nothing that depends on given

00:14:06,450 --> 00:14:15,050
package in in testing then that would be

00:14:08,700 --> 00:14:20,100
a good candidate to to remove so a bit

00:14:15,050 --> 00:14:22,949
this process will be a bit slow but yeah

00:14:20,100 --> 00:14:25,890
I want to come back to this question

00:14:22,949 --> 00:14:29,459
from for me this if the profit of team

00:14:25,890 --> 00:14:32,220
maintains is that I can easily do a team

00:14:29,459 --> 00:14:35,640
upload no matter what what change it is

00:14:32,220 --> 00:14:38,130
because if it's by a single maintainer I

00:14:35,640 --> 00:14:41,490
need to file back report released

00:14:38,130 --> 00:14:44,910
critical to any if I see a not

00:14:41,490 --> 00:14:45,240
maintained team package I trust to team

00:14:44,910 --> 00:14:47,640
up

00:14:45,240 --> 00:14:49,320
have very very easy access to the

00:14:47,640 --> 00:14:52,020
package and you can do it everybody can

00:14:49,320 --> 00:14:54,420
do it as a team upload without all the

00:14:52,020 --> 00:14:57,089
formalism and this is my argument why

00:14:54,420 --> 00:14:59,220
it's positive thing if we have all the

00:14:57,089 --> 00:15:01,709
things team maintains and then you can

00:14:59,220 --> 00:15:04,260
start removing pattern tool in the team

00:15:01,709 --> 00:15:06,149
upload because we are team member yeah

00:15:04,260 --> 00:15:10,580
that you can force people to do some of

00:15:06,149 --> 00:15:10,580
them team packages will be probably the

00:15:13,220 --> 00:15:18,690
another question which I have completely

00:15:15,899 --> 00:15:24,779
open as well is let's say I have a

00:15:18,690 --> 00:15:26,580
package and then it has dependency of

00:15:24,779 --> 00:15:30,660
something that I don't know and it is

00:15:26,580 --> 00:15:35,279
too hard for me to switch or remove item

00:15:30,660 --> 00:15:37,350
- then what's the delay until I can say

00:15:35,279 --> 00:15:39,870
oh he hasn't done it I have no time to

00:15:37,350 --> 00:15:42,990
do it doesn't matter I still upload the

00:15:39,870 --> 00:15:45,779
Python 3 only for my package at hazard I

00:15:42,990 --> 00:15:48,350
wouldn't do that because maybe this

00:15:45,779 --> 00:15:51,959
package is important and if you remove

00:15:48,350 --> 00:15:57,029
they then we we need a delay so what's

00:15:51,959 --> 00:16:01,110
our standard an emerald supply 15 days

00:15:57,029 --> 00:16:10,770
without response I think it's two weeks

00:16:01,110 --> 00:16:19,500
yes somebody would have to identify all

00:16:10,770 --> 00:16:22,380
packages you want to do that understood

00:16:19,500 --> 00:16:25,220
you correctly you you you have a package

00:16:22,380 --> 00:16:27,450
your package that another package has a

00:16:25,220 --> 00:16:31,320
dependency on yours and you want to

00:16:27,450 --> 00:16:35,940
remove Python 2 from your package so mmm

00:16:31,320 --> 00:16:39,300
I wouldn't remove it um until all other

00:16:35,940 --> 00:16:43,459
packages and do not depend on it at

00:16:39,300 --> 00:16:43,459
least at the beginning maybe sorry

00:16:46,540 --> 00:16:52,430
at least at the beginning at some point

00:16:49,820 --> 00:16:55,160
we will have to rise the bar a little

00:16:52,430 --> 00:16:59,420
bit lower and make it more aggressive

00:16:55,160 --> 00:17:02,810
but we are at the beginning of the cycle

00:16:59,420 --> 00:17:04,790
and we probably should start slow or

00:17:02,810 --> 00:17:07,579
maybe not I don't know that's we have

00:17:04,790 --> 00:17:09,919
more than thousand packages in teams and

00:17:07,579 --> 00:17:12,319
it will we do one by one and it will

00:17:09,919 --> 00:17:14,890
took AG's to remove pythons second

00:17:12,319 --> 00:17:19,490
support yeah but we should not block

00:17:14,890 --> 00:17:22,280
package migrations either I think it's

00:17:19,490 --> 00:17:25,160
fine to block package migration to the

00:17:22,280 --> 00:17:27,709
testing if that package is stills needs

00:17:25,160 --> 00:17:30,290
bite into support because python 2 will

00:17:27,709 --> 00:17:34,070
not exist next year in upstream I know

00:17:30,290 --> 00:17:38,809
maybe in downstream but do we really

00:17:34,070 --> 00:17:43,390
want to maintain dead code for another

00:17:38,809 --> 00:17:43,390
release cycle and another one maybe

00:17:47,750 --> 00:17:52,280
I think how users would like to use

00:17:49,880 --> 00:17:53,930
Python to in the next release or we know

00:17:52,280 --> 00:17:57,440
I think it's official that we go into

00:17:53,930 --> 00:17:59,930
the start of the agenda now this agenda

00:17:57,440 --> 00:18:07,990
item seems to have been to have died in

00:17:59,930 --> 00:18:10,520
favor of this one if we drop Python -

00:18:07,990 --> 00:18:18,380
that's a disservice entirely that's a

00:18:10,520 --> 00:18:20,360
disservice - I use isn't it they use our

00:18:18,380 --> 00:18:22,040
destroy so that they can get the

00:18:20,360 --> 00:18:23,900
software we provide to solve their

00:18:22,040 --> 00:18:25,940
problems they haven't all ported to

00:18:23,900 --> 00:18:27,470
Python 3 yet there's going to be a lot

00:18:25,940 --> 00:18:37,280
of people running on Python 2 for the

00:18:27,470 --> 00:18:40,130
next 20 years probably but then then

00:18:37,280 --> 00:18:41,660
they don't have to upgrade we don't need

00:18:40,130 --> 00:18:43,460
one and we don't need to provide a lot

00:18:41,660 --> 00:18:45,230
of libraries we just need to provide an

00:18:43,460 --> 00:18:48,190
interpreter and they can virtualenv and

00:18:45,230 --> 00:18:48,190
do

00:18:57,460 --> 00:19:09,820
yeah I also can't mean to write PI stack

00:18:59,680 --> 00:19:13,720
without Python - do you think it's

00:19:09,820 --> 00:19:16,150
possible to even identify some important

00:19:13,720 --> 00:19:18,460
packages that will definitely not get

00:19:16,150 --> 00:19:24,670
Python free and support like mercury

00:19:18,460 --> 00:19:40,150
I'll probably order more packages like

00:19:24,670 --> 00:19:42,820
that already released fine but what I

00:19:40,150 --> 00:19:47,830
would like to see is that we drop the

00:19:42,820 --> 00:19:53,560
Pisan command in the next so we can do

00:19:47,830 --> 00:19:56,500
it right now it's only about rebuilding

00:19:53,560 --> 00:20:06,310
all the packages with a new interpreter

00:19:56,500 --> 00:20:10,570
in the share box or - I don't think I

00:20:06,310 --> 00:20:13,900
think it's not an issue we it's just a I

00:20:10,570 --> 00:20:16,780
I think th bite onto already does dust

00:20:13,900 --> 00:20:19,840
if not then I can change it so that she

00:20:16,780 --> 00:20:21,910
banks are rewritten into a user bin

00:20:19,840 --> 00:20:25,540
Python - and we can remove it right now

00:20:21,910 --> 00:20:28,620
it's not a problem all the stuff where

00:20:25,540 --> 00:20:32,470
we only use Python - in the packaging

00:20:28,620 --> 00:20:35,380
that's almost all using the Pisan the

00:20:32,470 --> 00:20:39,150
inversion Python shebang so there is

00:20:35,380 --> 00:20:39,150
some work to do from my point of view

00:20:43,590 --> 00:20:47,620
do we need to discuss whether we want to

00:20:45,880 --> 00:20:53,200
do that then are we all agreed we want

00:20:47,620 --> 00:20:55,320
to get rid of user pin Python look I

00:20:53,200 --> 00:20:58,960
don't care about user VIN bite on

00:20:55,320 --> 00:21:04,600
symlink what until it doesn't point to

00:20:58,960 --> 00:21:07,300
user bin fight on free so what I don't

00:21:04,600 --> 00:21:09,850
understand is that you are saying we

00:21:07,300 --> 00:21:12,190
need the interpreter for our users to be

00:21:09,850 --> 00:21:14,710
able to use I don't know that's a peep

00:21:12,190 --> 00:21:16,960
we spent them - yes but then you don't

00:21:14,710 --> 00:21:18,580
want user bin Python and then it will

00:21:16,960 --> 00:21:22,660
break things that will be installed by

00:21:18,580 --> 00:21:24,790
people usually local bin so do you

00:21:22,660 --> 00:21:32,530
suggest to our users that they do is

00:21:24,790 --> 00:21:34,570
evening maybe yes we could provide a

00:21:32,530 --> 00:21:36,100
Python - legacy package as well and get

00:21:34,570 --> 00:21:42,640
a popcorn idea of just how many people

00:21:36,100 --> 00:21:45,040
actually need this it's maybe a cool

00:21:42,640 --> 00:21:47,200
idea because we said if you remove the

00:21:45,040 --> 00:21:49,510
user pin pad nitwit like a lot of thing

00:21:47,200 --> 00:21:50,950
but I think it's intended to be broken

00:21:49,510 --> 00:21:53,290
that people realized we has a problem

00:21:50,950 --> 00:21:55,510
and and explicitly you was fighting to

00:21:53,290 --> 00:21:57,640
it if they really want to do it if

00:21:55,510 --> 00:22:02,400
they're not then we have broken packages

00:21:57,640 --> 00:22:02,400
they're not from the micro - testing

00:22:15,450 --> 00:22:25,590
other what I like the idea to - of

00:22:24,240 --> 00:22:27,570
course it's worth mentioning that our

00:22:25,590 --> 00:22:32,600
shreddy did this and a bunch of things

00:22:27,570 --> 00:22:36,440
got updated as a result but so I think

00:22:32,600 --> 00:22:36,440
the move was a big task

00:22:38,090 --> 00:22:48,960
so I would like to have something where

00:22:41,309 --> 00:22:50,970
we keep track about progress I mean we

00:22:48,960 --> 00:22:54,809
are at the very beginning of the release

00:22:50,970 --> 00:22:59,909
cycle and I mean even after 2 or 3

00:22:54,809 --> 00:23:02,159
months you can see how far do we get was

00:22:59,909 --> 00:23:07,559
just removing leaf packages or unused

00:23:02,159 --> 00:23:10,080
libraries and then maybe decide in in

00:23:07,559 --> 00:23:15,659
well at the end of the year well that's

00:23:10,080 --> 00:23:18,960
going to slow we have to it's the

00:23:15,659 --> 00:23:25,500
release tracker I think already set up

00:23:18,960 --> 00:23:27,960
know so well encourage people now to -

00:23:25,500 --> 00:23:31,019
to remove stuff which is not breaking

00:23:27,960 --> 00:23:33,649
which is not well

00:23:31,019 --> 00:23:38,100
stopping migrations and things like that

00:23:33,649 --> 00:23:41,070
and then decide well that's not going to

00:23:38,100 --> 00:23:41,809
work but then we have at least something

00:23:41,070 --> 00:23:45,409
to start with

00:23:41,809 --> 00:23:49,559
yeah I plant during the DEFCON 5 plan -

00:23:45,409 --> 00:23:53,970
at least it at the identified team

00:23:49,559 --> 00:23:56,580
packages with leaf fight on - binary

00:23:53,970 --> 00:23:57,419
packages and start removing them we'll

00:23:56,580 --> 00:24:05,570
see how it goes

00:23:57,419 --> 00:24:09,539
and then move to the other packages so

00:24:05,570 --> 00:24:12,360
anybody in the TPMT team who could just

00:24:09,539 --> 00:24:14,700
keep track about the Python to status in

00:24:12,360 --> 00:24:21,330
packages maintained by the TPMT

00:24:14,700 --> 00:24:28,360
I was hoping to get this release tracker

00:24:21,330 --> 00:24:31,990
thing and use that but I I don't know

00:24:28,360 --> 00:24:37,860
if it contains maintainer

00:24:31,990 --> 00:24:40,570
so can we it doesn't who could grab

00:24:37,860 --> 00:24:53,799
somebody off sorry these team to set up

00:24:40,570 --> 00:24:56,830
that try car I could okay one thing do

00:24:53,799 --> 00:24:59,350
we agree as a team that all team

00:24:56,830 --> 00:25:03,210
packages which are leave packages can be

00:24:59,350 --> 00:25:12,490
removed just now or don't

00:25:03,210 --> 00:25:17,740
yes in the next few days for everything

00:25:12,490 --> 00:25:20,620
so be sure well I think every library

00:25:17,740 --> 00:25:22,600
package can be removed yeah yeah from

00:25:20,620 --> 00:25:25,450
module Steam note from application I

00:25:22,600 --> 00:25:29,440
agree and if we have applications which

00:25:25,450 --> 00:25:33,600
are not yet ported for two to three then

00:25:29,440 --> 00:25:36,760
yes we should we should identify them

00:25:33,600 --> 00:25:40,330
when we are close to the next phrase we

00:25:36,760 --> 00:25:42,580
should well evaluate do we want to keep

00:25:40,330 --> 00:25:44,169
them or do we have to remove them but

00:25:42,580 --> 00:25:48,010
it's not something we have to do now

00:25:44,169 --> 00:25:50,679
from my point of view do we have some

00:25:48,010 --> 00:25:53,889
tech for the BTS for patent too because

00:25:50,679 --> 00:25:56,320
I start I start filing back reports

00:25:53,889 --> 00:25:58,750
about Debian made packages sweets which

00:25:56,320 --> 00:26:04,450
are needing patent to and fire back

00:25:58,750 --> 00:26:07,419
report with some title tech but maybe we

00:26:04,450 --> 00:26:09,940
foot Texas patent to and then we could

00:26:07,419 --> 00:26:11,710
browse the BTS for some some common tech

00:26:09,940 --> 00:26:14,110
that's patent two and we need to do

00:26:11,710 --> 00:26:16,929
versus do we have cystic or should we

00:26:14,110 --> 00:26:21,120
create something and if yes know

00:26:16,929 --> 00:26:21,120
somebody knowing how to do this

00:26:33,169 --> 00:26:38,009
yeah something like this but I just want

00:26:36,149 --> 00:26:54,320
to do not invent something else because

00:26:38,009 --> 00:26:59,879
by using it so this week I converted

00:26:54,320 --> 00:27:02,549
GPIB from Python 2 to Python 3 by just

00:26:59,879 --> 00:27:05,159
taking the latest version upstream which

00:27:02,549 --> 00:27:09,480
wasn't approved by its maintainer since

00:27:05,159 --> 00:27:11,909
two years and I did that without contain

00:27:09,480 --> 00:27:14,100
contacting the maintainer should I be

00:27:11,909 --> 00:27:16,429
burned into the public place so I'm not

00:27:14,100 --> 00:27:23,519
doing that or should I be saying

00:27:16,429 --> 00:27:25,320
shouldn't be burnt definitely not what

00:27:23,519 --> 00:27:27,330
I'm currently doing if I spot some

00:27:25,320 --> 00:27:31,100
application with the patent - I go to

00:27:27,330 --> 00:27:35,009
upstream right and back report in there

00:27:31,100 --> 00:27:37,799
in there they are back report of the

00:27:35,009 --> 00:27:42,889
multi github file a bug report in our

00:27:37,799 --> 00:27:46,590
pts link to this and I would like to

00:27:42,889 --> 00:27:49,980
some better way to to record all these

00:27:46,590 --> 00:27:52,139
parts and have send on one place to make

00:27:49,980 --> 00:27:55,799
it publish also to other people than the

00:27:52,139 --> 00:28:01,320
Debian me team can we create a wiki page

00:27:55,799 --> 00:28:08,129
with all the hints what to do so that if

00:28:01,320 --> 00:28:10,620
I ask maintain our want to suddenly find

00:28:08,129 --> 00:28:12,120
out that the Debian is removing Python -

00:28:10,620 --> 00:28:14,549
what shadow should I do

00:28:12,120 --> 00:28:30,620
should we create a wiki page like that

00:28:14,549 --> 00:28:33,119
is a good idea but they contact before

00:28:30,620 --> 00:28:34,950
removing Python - or starting to remove

00:28:33,119 --> 00:28:37,200
Python - and potentially making lots of

00:28:34,950 --> 00:28:42,210
packages across the archive

00:28:37,200 --> 00:28:46,139
already a buck the three nine three one

00:28:42,210 --> 00:28:51,830
six five nine is probably to the release

00:28:46,139 --> 00:28:54,779
team so they should be aware already

00:28:51,830 --> 00:29:00,750
because they will be upset if if a lot

00:28:54,779 --> 00:29:02,909
breaks and yeah and another migrations

00:29:00,750 --> 00:29:04,380
get tied up with with this and so on or

00:29:02,909 --> 00:29:05,669
release gold should have sort of things

00:29:04,380 --> 00:29:11,070
should we be declaring this is a release

00:29:05,669 --> 00:29:12,450
goal yeah anyone know the process for

00:29:11,070 --> 00:29:15,899
that just tell release team we would

00:29:12,450 --> 00:29:17,789
like this goal please even if they're

00:29:15,899 --> 00:29:19,559
not a thing making it very public would

00:29:17,789 --> 00:29:21,510
be a good idea to make sure that you

00:29:19,559 --> 00:29:24,929
know people are aware of this and not

00:29:21,510 --> 00:29:27,840
just fighting people maybe I'm male to

00:29:24,929 --> 00:29:29,149
Debian announced live in the house

00:29:27,840 --> 00:29:45,659
action

00:29:29,149 --> 00:29:50,940
okay I think I will create a wiki page

00:29:45,659 --> 00:29:54,840
first so that was a general idea what to

00:29:50,940 --> 00:29:58,019
do and what to expect and then I drove

00:29:54,840 --> 00:30:00,799
to Debian Python and then to Debian

00:29:58,019 --> 00:30:00,799
developments

00:30:13,690 --> 00:30:20,920
but anyway in the for the team packages

00:30:17,640 --> 00:30:28,810
it's okay to remove Python to leave

00:30:20,920 --> 00:30:33,100
packages right now and expect some even

00:30:28,810 --> 00:30:41,350
uploads in maybe this week if not Andre

00:30:33,100 --> 00:30:45,430
then I will try to work on that and that

00:30:41,350 --> 00:30:51,240
would be a start but there are many more

00:30:45,430 --> 00:30:51,240
Python 2 packages outside the team so

00:30:51,690 --> 00:31:07,360
maybe this making people aware and the

00:31:02,200 --> 00:31:12,130
problem is not with removing these in

00:31:07,360 --> 00:31:15,520
these packages but problem is with

00:31:12,130 --> 00:31:18,220
applications that still use Python 2 and

00:31:15,520 --> 00:31:20,980
are not ported to Python 3 and if we

00:31:18,220 --> 00:31:23,470
remove some dependencies then these

00:31:20,980 --> 00:31:26,500
applications will stop working and we

00:31:23,470 --> 00:31:32,620
don't want or maybe we want that but I

00:31:26,500 --> 00:31:36,850
think we shouldn't do that but back

00:31:32,620 --> 00:31:41,830
reports are probably already filled wait

00:31:36,850 --> 00:31:45,790
a second we already have some limbs in

00:31:41,830 --> 00:31:50,800
tech spending so I'm not sure I would

00:31:45,790 --> 00:31:54,340
have to talk with was with the linson

00:31:50,800 --> 00:31:57,390
maintenance I think they are currently

00:31:54,340 --> 00:32:01,660
just information or not yet implemented

00:31:57,390 --> 00:32:03,310
but we should talk to them too to get

00:32:01,660 --> 00:32:06,910
all these limits and warnings about

00:32:03,310 --> 00:32:12,040
using well rising to as a shebang and

00:32:06,910 --> 00:32:13,840
and things like that was that we don't

00:32:12,040 --> 00:32:16,080
need to file that many bug reports I

00:32:13,840 --> 00:32:16,080
think

00:32:16,480 --> 00:32:22,480
how about 19 I make they'll head I would

00:32:20,200 --> 00:32:25,060
rather prefer back reports because they

00:32:22,480 --> 00:32:28,240
have the possibility to get a feedback

00:32:25,060 --> 00:32:30,190
of if someone needs that if there's no

00:32:28,240 --> 00:32:33,190
start just to make important back

00:32:30,190 --> 00:32:35,320
reports to say we want to remove patent

00:32:33,190 --> 00:32:37,120
to as much as possible please remove

00:32:35,320 --> 00:32:39,100
your package that we can do that right

00:32:37,120 --> 00:32:40,720
all right and then they can feedback and

00:32:39,100 --> 00:32:42,970
say well I need that for that and that

00:32:40,720 --> 00:32:45,280
and that has still that and then and

00:32:42,970 --> 00:32:47,950
then you come into that where you really

00:32:45,280 --> 00:32:50,050
but I promise you then maintain a start

00:32:47,950 --> 00:32:55,330
to remove packages which still have

00:32:50,050 --> 00:33:02,530
dependencies yes that happened a few

00:32:55,330 --> 00:33:04,570
days ago in any case Lin cien cannot

00:33:02,530 --> 00:33:06,730
detect if something is a little package

00:33:04,570 --> 00:33:10,090
or not because it doesn't know what the

00:33:06,730 --> 00:33:14,140
rest of the archive contains so we have

00:33:10,090 --> 00:33:17,590
to file big reports or to have a script

00:33:14,140 --> 00:33:21,610
or tracker page or something that's not

00:33:17,590 --> 00:33:23,410
inside engine Linton won't be enough the

00:33:21,610 --> 00:33:26,080
nice thing about Linton is it's a

00:33:23,410 --> 00:33:28,660
technical way of knowing whether or not

00:33:26,080 --> 00:33:30,970
to your package has dependencies on

00:33:28,660 --> 00:33:33,130
Python that you'd have to go and find

00:33:30,970 --> 00:33:35,680
out yourself it will tell you if your

00:33:33,130 --> 00:33:38,320
shebang is using an interpreter that's

00:33:35,680 --> 00:33:39,880
going away or if you you've got Python

00:33:38,320 --> 00:33:42,070
two dependencies of some sort and it's

00:33:39,880 --> 00:33:43,330
definite so you can you can use it while

00:33:42,070 --> 00:33:44,350
you're working on your package to make

00:33:43,330 --> 00:33:46,920
sure you've actually fixed everything

00:33:44,350 --> 00:33:46,920
you need to fix

00:33:52,190 --> 00:34:00,930
can we make this lynnium think an error

00:33:57,110 --> 00:34:05,700
already because I think it exists and

00:34:00,930 --> 00:34:08,370
it's a info or warning but I everything

00:34:05,700 --> 00:34:13,140
either warning or error is fine because

00:34:08,370 --> 00:34:15,800
it shows up on the tracker pages I don't

00:34:13,140 --> 00:34:20,429
care if it's a warning or narrow

00:34:15,800 --> 00:34:22,410
maybe it's an error but it's not there

00:34:20,429 --> 00:34:24,840
are Lynch and arrows which are protected

00:34:22,410 --> 00:34:26,669
preventing a packet from migrating by

00:34:24,840 --> 00:34:29,669
FTP marceau - we should make it in error

00:34:26,669 --> 00:34:33,929
that is the maintainer notice but it

00:34:29,669 --> 00:34:37,850
should be possible to go to to unsaved

00:34:33,929 --> 00:34:37,850
maybe this is kind of compromise

00:34:44,569 --> 00:34:51,540
also another thing I've seen a lot when

00:34:48,089 --> 00:34:53,490
moving pattern 2 is that the binary

00:34:51,540 --> 00:34:56,490
packages for pattern 2 stays in the

00:34:53,490 --> 00:34:57,559
archive so this must be something to do

00:34:56,490 --> 00:34:59,640
with the craft thing

00:34:57,559 --> 00:35:04,619
there's no way we are going to find a

00:34:59,640 --> 00:35:09,740
report for every person the 3562 Python

00:35:04,619 --> 00:35:09,740
2 packages that are is still in okay so

00:35:10,730 --> 00:35:30,030
how do you it work there is an automated

00:35:17,880 --> 00:35:31,230
process for 2d crafting yeah if it

00:35:30,030 --> 00:35:32,880
wasn't working that's a bug with a

00:35:31,230 --> 00:35:35,750
process and it sounds unrelated to

00:35:32,880 --> 00:35:35,750
Python 2 removal

00:35:43,440 --> 00:35:54,200
I wanted to go back to the team subjects

00:35:49,529 --> 00:35:54,200
oh crap

00:35:54,950 --> 00:36:01,529
so then it becomes hard for me to know

00:35:57,990 --> 00:36:04,950
what remaining to do because I typically

00:36:01,529 --> 00:36:09,119
would do a cache search or reverse

00:36:04,950 --> 00:36:12,029
depends or a PTR depends to see what I

00:36:09,119 --> 00:36:15,839
should remove and so let me give an

00:36:12,029 --> 00:36:17,730
example I have item PBR which I would

00:36:15,839 --> 00:36:20,910
like to remove bison 3 and I look at its

00:36:17,730 --> 00:36:23,490
reverse dependencies using reverse

00:36:20,910 --> 00:36:25,799
depend and then I see a lot of Python 2

00:36:23,490 --> 00:36:42,210
packages which I already remove button

00:36:25,799 --> 00:36:44,279
to support for how do I know then Tomas

00:36:42,210 --> 00:36:47,519
I think that binary package is fighting

00:36:44,279 --> 00:36:51,029
to only are not in unstable but they are

00:36:47,519 --> 00:36:53,240
in testing they are in unstable are you

00:36:51,029 --> 00:36:53,240
sure

00:37:15,300 --> 00:37:18,420
for that

00:37:27,150 --> 00:37:32,890
maybe maybe there is some option to draw

00:37:29,950 --> 00:37:34,900
a graph based on you DD about the

00:37:32,890 --> 00:37:36,840
dependency that you have a tree and you

00:37:34,900 --> 00:37:45,160
can start with the leaves also it's

00:37:36,840 --> 00:37:47,770
somebody in the graph so a graph is

00:37:45,160 --> 00:37:50,350
already there co-created it DRAM is

00:37:47,770 --> 00:37:52,300
saying on IRC that the craft remains

00:37:50,350 --> 00:37:54,070
because there are packages that depend

00:37:52,300 --> 00:37:56,530
on them and Brittany with all our

00:37:54,070 --> 00:38:04,830
packages migrate even if there are

00:37:56,530 --> 00:38:04,830
packages that we depend on the craft yes

00:38:09,000 --> 00:38:15,550
another issue is with the documentation

00:38:12,220 --> 00:38:18,130
because a lot of Python do packages

00:38:15,550 --> 00:38:22,060
contain documentation and Python free

00:38:18,130 --> 00:38:26,860
ones do not it's not a problem if we

00:38:22,060 --> 00:38:28,980
have a separate binary - doc package if

00:38:26,860 --> 00:38:30,940
not then we have to migrate

00:38:28,980 --> 00:38:37,150
documentation as well so that's

00:38:30,940 --> 00:38:40,450
something that once Python - binary

00:38:37,150 --> 00:38:45,820
packages removal maintainer has to be

00:38:40,450 --> 00:38:49,740
aware of and it seems that there are

00:38:45,820 --> 00:38:54,090
many different strategies strategies to

00:38:49,740 --> 00:38:57,430
provide documentation and some people at

00:38:54,090 --> 00:39:02,680
separate binary package some sheep in

00:38:57,430 --> 00:39:07,210
Python - using the user sure doc Python

00:39:02,680 --> 00:39:08,890
- full library sometimes he spied on -

00:39:07,210 --> 00:39:14,280
foo dog

00:39:08,890 --> 00:39:18,040
directory and we probably should decide

00:39:14,280 --> 00:39:21,760
one location for that so that we don't

00:39:18,040 --> 00:39:27,550
have so many options why we are removing

00:39:21,760 --> 00:39:33,280
bite on - so this could be done

00:39:27,550 --> 00:39:37,670
alongside the renewal I think that the

00:39:33,280 --> 00:39:43,960
best location is user sharp doc

00:39:37,670 --> 00:39:48,490
my Python - module directory and the

00:39:43,960 --> 00:39:59,960
symlink probably in in Python free

00:39:48,490 --> 00:40:01,790
binary package but can be right can be

00:39:59,960 --> 00:40:03,859
vital engine warning about this doc

00:40:01,790 --> 00:40:06,950
issue or can you ask for this because

00:40:03,859 --> 00:40:10,839
this is maybe if we know about the

00:40:06,950 --> 00:40:13,190
problem but you say when it's to know if

00:40:10,839 --> 00:40:15,829
somebody has a better idea

00:40:13,190 --> 00:40:19,040
where we should never idea we come down

00:40:15,829 --> 00:40:22,010
it should have a linear bond even at

00:40:19,040 --> 00:40:28,670
current state even if we have patent to

00:40:22,010 --> 00:40:30,530
inside because right now python / we

00:40:28,670 --> 00:40:35,690
should update price policy about that

00:40:30,530 --> 00:40:37,250
and then but first we have to decide

00:40:35,690 --> 00:40:44,770
what's the right way

00:40:37,250 --> 00:40:49,390
where should we keep it i don't care i

00:40:44,770 --> 00:40:52,940
her i care to have only one place the

00:40:49,390 --> 00:40:55,309
whichever it will be we should have one

00:40:52,940 --> 00:40:58,510
place and then we can put it decide

00:40:55,309 --> 00:41:02,809
which one is it and put it in the policy

00:40:58,510 --> 00:41:07,460
then create al indium track or whatever

00:41:02,809 --> 00:41:17,119
but currently we have too many places to

00:41:07,460 --> 00:41:19,970
look for documentation so i would like

00:41:17,119 --> 00:41:22,760
to see assembling at least in this place

00:41:19,970 --> 00:41:26,480
when I have split off documentation so I

00:41:22,760 --> 00:41:32,799
always find a documentation in Python 3

00:41:26,480 --> 00:41:35,799
- fool so maybe we can rationally that I

00:41:32,799 --> 00:41:38,569
think we should keep the Pisan food doc

00:41:35,799 --> 00:41:42,859
directory and not rename it to thousands

00:41:38,569 --> 00:41:44,420
a food dog so Rebecca Palmer started a

00:41:42,859 --> 00:41:44,780
discussion about this on the mailing

00:41:44,420 --> 00:41:47,420
list

00:41:44,780 --> 00:41:49,630
on Thursday I don't think there's been

00:41:47,420 --> 00:41:52,999
any replies to it yet

00:41:49,630 --> 00:41:55,880
centerlink on ALC I can add it to the

00:41:52,999 --> 00:42:01,789
copy for this specific issue of

00:41:55,880 --> 00:42:03,650
documentation paths maybe we should go

00:42:01,789 --> 00:42:05,059
back to that I don't know where this

00:42:03,650 --> 00:42:13,220
discussion online in jest

00:42:05,059 --> 00:42:16,130
yes if I remember correctly there is

00:42:13,220 --> 00:42:20,019
Debian policy we should place it in main

00:42:16,130 --> 00:42:28,279
package so not in the doc directory

00:42:20,019 --> 00:42:32,329
right it should yeah okay okay make a

00:42:28,279 --> 00:42:35,029
decision right right so if it will be

00:42:32,329 --> 00:42:39,739
without three it will be in the name of

00:42:35,029 --> 00:42:41,749
source package because it will be name

00:42:39,739 --> 00:42:44,930
of source package it will be the own

00:42:41,749 --> 00:42:49,089
directory nothing else will be inside it

00:42:44,930 --> 00:42:56,529
right because we will not have Python

00:42:49,089 --> 00:42:56,529
nothing - foo after we remove Python -

00:42:57,579 --> 00:43:02,989
so I think the Python 3 is the better

00:43:00,980 --> 00:43:05,539
thing because the directory will not be

00:43:02,989 --> 00:43:08,509
alone but just a second there will be

00:43:05,539 --> 00:43:11,960
packages with two binaries pi PI and

00:43:08,509 --> 00:43:15,079
Python 3 so should we put it in in

00:43:11,960 --> 00:43:17,029
Python 3 directory or symlink it from

00:43:15,079 --> 00:43:19,519
the other directory or put it in the

00:43:17,029 --> 00:43:22,369
dope directory and simile again from all

00:43:19,519 --> 00:43:32,809
the others who is interested in doing

00:43:22,369 --> 00:43:39,380
that decision hands up you are yeah so I

00:43:32,809 --> 00:43:42,249
mean let's continue this discussion on

00:43:39,380 --> 00:43:45,529
your mailing list yeah it's probably and

00:43:42,249 --> 00:43:48,799
you mentioned pi PI should we start

00:43:45,529 --> 00:43:53,210
removing pi PI packages as well yeah

00:43:48,799 --> 00:43:56,750
because they are Python - I agree so and

00:43:53,210 --> 00:44:02,320
fight on pi pi 3

00:43:56,750 --> 00:44:05,320
now exists now and reuses bite on free

00:44:02,320 --> 00:44:09,250
modules so you don't need a separate

00:44:05,320 --> 00:44:13,850
binary package in most cases there are

00:44:09,250 --> 00:44:21,560
exceptions I don't think any I don't

00:44:13,850 --> 00:44:23,870
think so so we should remove bite by

00:44:21,560 --> 00:44:27,520
pipe binary packages at the same time

00:44:23,870 --> 00:44:27,520
that's who you looks like a couple

00:45:03,190 --> 00:45:08,830
so if there's something else it's

00:45:06,280 --> 00:45:17,470
regarding as we have five minutes left

00:45:08,830 --> 00:45:23,020
all right I'd like to it was two times

00:45:17,470 --> 00:45:23,890
20 minutes yeah I think we have five

00:45:23,020 --> 00:45:30,910
minutes left

00:45:23,890 --> 00:45:33,520
only I don't know if we have enough time

00:45:30,910 --> 00:45:35,260
to start discussion about Python freedo

00:45:33,520 --> 00:45:37,510
tight because there's a new thing this

00:45:35,260 --> 00:45:46,540
is 20 minutes my sister Mattias told me

00:45:37,510 --> 00:45:50,200
need okay so eight is now in unstable

00:45:46,540 --> 00:45:54,550
the archive it's not yet supported but I

00:45:50,200 --> 00:46:02,250
wanted to have it in the archive to get

00:45:54,550 --> 00:46:05,650
a little bit of testing go ahead - and

00:46:02,250 --> 00:46:10,120
we still need some infrastructure like

00:46:05,650 --> 00:46:12,340
an updated seitan for prices 2.8 I'm not

00:46:10,120 --> 00:46:17,820
sure about the Sphinx if you really need

00:46:12,340 --> 00:46:21,370
it so the release will be in September

00:46:17,820 --> 00:46:26,530
so then we can stop talking about the my

00:46:21,370 --> 00:46:29,290
Croatian or from Doc 70.8 currently we

00:46:26,530 --> 00:46:31,060
have two different interpretive dots for

00:46:29,290 --> 00:46:35,220
price and three it's a debug interpreter

00:46:31,060 --> 00:46:42,190
anteed well production quality

00:46:35,220 --> 00:46:46,300
interpreter in C dot eight you it's now

00:46:42,190 --> 00:46:50,980
possible to to load debug extensions in

00:46:46,300 --> 00:46:55,600
in the production interpreter or to run

00:46:50,980 --> 00:46:58,960
well product extension extensions in a

00:46:55,600 --> 00:47:05,860
debug interpreter so the question is do

00:46:58,960 --> 00:47:09,610
we want to continue to provide the - dbg

00:47:05,860 --> 00:47:11,980
packages we could even try to extend

00:47:09,610 --> 00:47:14,380
that for example - to build everything

00:47:11,980 --> 00:47:18,630
with the address sanitizer obvious

00:47:14,380 --> 00:47:22,660
receive some other sanitizers

00:47:18,630 --> 00:47:26,350
however I would like to start with that

00:47:22,660 --> 00:47:29,260
only when we have dropped support for pi

00:47:26,350 --> 00:47:33,040
since we're at seven so we make the

00:47:29,260 --> 00:47:36,190
transition including the debug packages

00:47:33,040 --> 00:47:43,240
so we and then we can decide yes we want

00:47:36,190 --> 00:47:45,220
to drop them or to keep them because as

00:47:43,240 --> 00:47:49,090
long as we have seen at seven we cannot

00:47:45,220 --> 00:47:52,570
do that move so that that that's the

00:47:49,090 --> 00:47:55,510
thing was was Pisan say at eight what I

00:47:52,570 --> 00:47:59,740
know about what is important for for the

00:47:55,510 --> 00:48:04,260
packaging and besides that there are no

00:47:59,740 --> 00:48:08,830
new keywords like inside at seven so I

00:48:04,260 --> 00:48:14,260
hope so the migration will be a lot

00:48:08,830 --> 00:48:17,680
easier than it was for 43.7 and with

00:48:14,260 --> 00:48:24,310
this optimistic I think we have to

00:48:17,680 --> 00:48:26,050
finish because time is not only the

00:48:24,310 --> 00:48:29,170
final version for the next Debian

00:48:26,050 --> 00:48:31,920
release because I've seen decided they

00:48:29,170 --> 00:48:35,170
want to have a faster release cycle and

00:48:31,920 --> 00:48:39,100
even to get releases out every nine

00:48:35,170 --> 00:48:44,260
months so that body challenge for for

00:48:39,100 --> 00:48:47,310
the destroy I think so but yeah so let's

00:48:44,260 --> 00:48:51,120
talk about that at that next step cons

00:48:47,310 --> 00:48:53,590
when prices of nine approaches okay

00:48:51,120 --> 00:48:57,010
thank you everyone for coming we

00:48:53,590 --> 00:49:02,230
unfortunately have to stop now but if

00:48:57,010 --> 00:49:06,250
you still have questions you can come to

00:49:02,230 --> 00:49:08,890
us and ask this is the main guy for the

00:49:06,250 --> 00:49:13,590
interpreter and I'm responsible for

00:49:08,890 --> 00:49:16,990
tools like the H Python and stuff and

00:49:13,590 --> 00:49:19,050
feel free to ask us anything and this is

00:49:16,990 --> 00:49:20,500
the pi PI guy

00:49:19,050 --> 00:49:25,110
[Music]

00:49:20,500 --> 00:49:31,629
and thanks for coming thanks sir

00:49:25,110 --> 00:49:31,629

YouTube URL: https://www.youtube.com/watch?v=KVFxGL0n49w


