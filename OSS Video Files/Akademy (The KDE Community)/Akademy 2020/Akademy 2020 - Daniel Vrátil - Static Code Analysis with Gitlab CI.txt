Title: Akademy 2020 - Daniel Vrátil - Static Code Analysis with Gitlab CI
Publication date: 2020-11-27
Playlist: Akademy 2020
Description: 
	The migration to GitLab earlier this year has opened up a lot of new possibilities to all KDE projects. One of them is introducing custom jobs on GitLab CI. In this talk I want to show the benefits of using static analysis tools and linters to automatically check code quality, and explain how to configure GitLab CI to run those tools automatically on each pull request or as a part of regular builds.
Captions: 
	00:00:01,130 --> 00:00:08,600
[Music]

00:00:10,800 --> 00:00:15,360
thank you everyone for

00:00:12,240 --> 00:00:16,720
tuning in to my talk i believe

00:00:15,360 --> 00:00:19,439
coincidentally this talk

00:00:16,720 --> 00:00:20,880
might be an answer to david's problem

00:00:19,439 --> 00:00:23,519
with how to

00:00:20,880 --> 00:00:25,119
uh make sure that all 200 projects in

00:00:23,519 --> 00:00:28,160
kde gets switched to

00:00:25,119 --> 00:00:30,960
uh not out of starting catch ups but

00:00:28,160 --> 00:00:31,679
let's see let's see how it goes so

00:00:30,960 --> 00:00:33,520
recently i

00:00:31,679 --> 00:00:35,600
became a huge fan of static code

00:00:33,520 --> 00:00:37,120
analysis so i decided to talk about

00:00:35,600 --> 00:00:40,399
static code analysis

00:00:37,120 --> 00:00:40,879
and about gitlab ci and about what you

00:00:40,399 --> 00:00:43,280
get

00:00:40,879 --> 00:00:46,640
when you bring those two things together

00:00:43,280 --> 00:00:48,640
spoiler alert you get awesomeness

00:00:46,640 --> 00:00:50,399
i'm sure everyone here knows what static

00:00:48,640 --> 00:00:53,520
code analysis is but let me

00:00:50,399 --> 00:00:54,239
go quickly through it it's like a second

00:00:53,520 --> 00:00:56,079
pair of eyes

00:00:54,239 --> 00:00:59,039
that checks your code it's not just unit

00:00:56,079 --> 00:01:01,920
tests it's actually

00:00:59,039 --> 00:01:03,120
uh some tool looking at your source code

00:01:01,920 --> 00:01:04,720
which means you need something that

00:01:03,120 --> 00:01:06,560
understands c bus plus and

00:01:04,720 --> 00:01:09,040
understanding c plus bus is not the

00:01:06,560 --> 00:01:10,720
easiest thing in the world

00:01:09,040 --> 00:01:12,880
luckily we have these things that

00:01:10,720 --> 00:01:13,600
understand c bus bus code very well they

00:01:12,880 --> 00:01:16,560
are called

00:01:13,600 --> 00:01:17,280
the c plus bus compilers so no surprise

00:01:16,560 --> 00:01:19,520
that the two

00:01:17,280 --> 00:01:20,320
major static analyzers that i'm going to

00:01:19,520 --> 00:01:22,159
mention

00:01:20,320 --> 00:01:24,640
throughout the talk are both based on

00:01:22,159 --> 00:01:26,799
the clank c bus bus compiler

00:01:24,640 --> 00:01:29,040
the two static analyzers that i want to

00:01:26,799 --> 00:01:31,280
talk about are classy and blank tidy

00:01:29,040 --> 00:01:32,079
uh you may have heard about clasic uh

00:01:31,280 --> 00:01:34,400
clase is

00:01:32,079 --> 00:01:35,360
actually a kde project it's a static

00:01:34,400 --> 00:01:37,759
analyzer with a

00:01:35,360 --> 00:01:38,400
wide range of cute specific checks like

00:01:37,759 --> 00:01:41,920
this

00:01:38,400 --> 00:01:44,560
one for instance if you use a non-static

00:01:41,920 --> 00:01:45,680
non-const key vector in a range based

00:01:44,560 --> 00:01:47,759
for loop

00:01:45,680 --> 00:01:49,680
it's perfectly valid c plus plus it

00:01:47,759 --> 00:01:53,600
compiles it works

00:01:49,680 --> 00:01:56,240
except it's not ideal right because

00:01:53,600 --> 00:01:57,520
using a non-const cute container in a

00:01:56,240 --> 00:02:00,479
range-based volume

00:01:57,520 --> 00:02:01,280
might detach the container and this can

00:02:00,479 --> 00:02:04,640
easily skip

00:02:01,280 --> 00:02:06,640
a pass through review especially

00:02:04,640 --> 00:02:07,680
instead of key vector in it would says

00:02:06,640 --> 00:02:11,039
just just say

00:02:07,680 --> 00:02:11,680
auto and if you often mix uh standard

00:02:11,039 --> 00:02:13,360
containers

00:02:11,680 --> 00:02:15,120
learn this is perfectly fine with cute

00:02:13,360 --> 00:02:17,599
containers it's easy to

00:02:15,120 --> 00:02:18,879
miss this right luckily clay is able to

00:02:17,599 --> 00:02:22,080
give you a warning that

00:02:18,879 --> 00:02:24,160
eh this is not okay you should fix this

00:02:22,080 --> 00:02:25,520
it cannot also possibly fix this for you

00:02:24,160 --> 00:02:28,800
even but that's not the

00:02:25,520 --> 00:02:30,879
uh point of this talk another my

00:02:28,800 --> 00:02:31,599
favorite check i think in crazy is this

00:02:30,879 --> 00:02:33,360
one

00:02:31,599 --> 00:02:35,680
we have a little key object class with

00:02:33,360 --> 00:02:37,920
an enum and a q signal that has

00:02:35,680 --> 00:02:39,840
the e-number parameter this is again

00:02:37,920 --> 00:02:43,360
perfectly fine it compiles

00:02:39,840 --> 00:02:45,280
it works it's a valid c plus mass and in

00:02:43,360 --> 00:02:47,280
a new connect syntax it will work just

00:02:45,280 --> 00:02:50,239
fine but if you use the old

00:02:47,280 --> 00:02:51,120
q4 connect syntax this will not work

00:02:50,239 --> 00:02:53,920
because

00:02:51,120 --> 00:02:54,319
the argument needs to be fully qualified

00:02:53,920 --> 00:02:58,000
as

00:02:54,319 --> 00:02:59,519
crazy will tell you again and

00:02:58,000 --> 00:03:01,360
again this is something that's easy to

00:02:59,519 --> 00:03:02,400
miss especially if you are new to queued

00:03:01,360 --> 00:03:05,200
or if you are

00:03:02,400 --> 00:03:06,080
using uh not if you are not using qt all

00:03:05,200 --> 00:03:08,560
the time

00:03:06,080 --> 00:03:10,319
because then you need to remember oh now

00:03:08,560 --> 00:03:12,400
i'm writing cued i need to remember to

00:03:10,319 --> 00:03:16,879
fully qualify my signal arguments

00:03:12,400 --> 00:03:19,840
uh it's really useful to have a tool

00:03:16,879 --> 00:03:19,840
that checks this for you

00:03:20,319 --> 00:03:24,640
the other static analyzer that i talked

00:03:22,319 --> 00:03:27,760
about is clank tidying

00:03:24,640 --> 00:03:29,200
clank tita is part of the llvm project

00:03:27,760 --> 00:03:30,319
so it's actually developed as part of

00:03:29,200 --> 00:03:32,400
the clank

00:03:30,319 --> 00:03:34,480
compiler you get it with alongside a

00:03:32,400 --> 00:03:37,760
compiler with other client tools

00:03:34,480 --> 00:03:40,319
uh it has wide range of generic c

00:03:37,760 --> 00:03:41,840
plus plus checks right so it can check

00:03:40,319 --> 00:03:44,319
for uh

00:03:41,840 --> 00:03:45,120
background statements like this one

00:03:44,319 --> 00:03:47,519
which

00:03:45,120 --> 00:03:48,640
is perfectly fine again it compiles it

00:03:47,519 --> 00:03:51,120
runs it works

00:03:48,640 --> 00:03:53,040
except when you compile with opposites

00:03:51,120 --> 00:03:54,560
suddenly this decrement

00:03:53,040 --> 00:03:56,720
will not happen anymore because the

00:03:54,560 --> 00:04:00,239
compiler will remove the whole line

00:03:56,720 --> 00:04:02,480
because you wanted to remove assets

00:04:00,239 --> 00:04:03,680
so client title will warn you that this

00:04:02,480 --> 00:04:07,360
is a backbone statement

00:04:03,680 --> 00:04:09,519
you should fix it it can also help you

00:04:07,360 --> 00:04:13,040
with code quality

00:04:09,519 --> 00:04:15,280
so i'm sure every single kde project has

00:04:13,040 --> 00:04:16,639
uh something like this somewhere in the

00:04:15,280 --> 00:04:20,880
code so uh

00:04:16,639 --> 00:04:22,639
magical constants defined as as a macro

00:04:20,880 --> 00:04:25,040
flag tidy will tell you why don't use

00:04:22,639 --> 00:04:25,680
codes expert it's exactly the same as a

00:04:25,040 --> 00:04:29,040
macro

00:04:25,680 --> 00:04:33,520
and it's type 6.

00:04:29,040 --> 00:04:36,800
so static code analysis is super useful

00:04:33,520 --> 00:04:38,560
it is very helpful especially if you can

00:04:36,800 --> 00:04:39,280
do it as part of a review process

00:04:38,560 --> 00:04:41,280
because

00:04:39,280 --> 00:04:43,120
then the reviewer can actually focus on

00:04:41,280 --> 00:04:46,720
the big things the ideas

00:04:43,120 --> 00:04:50,240
and on the actual what the code does

00:04:46,720 --> 00:04:51,919
rather than having to uh focus or

00:04:50,240 --> 00:04:54,479
pay attention to this small to these

00:04:51,919 --> 00:04:56,840
small things like uh

00:04:54,479 --> 00:04:59,360
like not fully qualified uh

00:04:56,840 --> 00:05:02,639
argumentatively and silver

00:04:59,360 --> 00:05:05,199
so i guess it would be really nice

00:05:02,639 --> 00:05:06,720
to get this right to use this and the

00:05:05,199 --> 00:05:07,039
question is why are we not even using

00:05:06,720 --> 00:05:10,320
this

00:05:07,039 --> 00:05:10,639
for for all our projects i i read this

00:05:10,320 --> 00:05:13,199
on

00:05:10,639 --> 00:05:14,160
uh on the yakunadi code base and i

00:05:13,199 --> 00:05:17,039
uncovered

00:05:14,160 --> 00:05:17,600
quite a few bugs or issues that both

00:05:17,039 --> 00:05:19,919
clank

00:05:17,600 --> 00:05:21,199
tidy and crazy warned me about and i i

00:05:19,919 --> 00:05:23,680
could fix them

00:05:21,199 --> 00:05:26,160
the problem is that i read it once i

00:05:23,680 --> 00:05:29,520
think after a very very long time

00:05:26,160 --> 00:05:30,479
and uh i got like lots of issues and

00:05:29,520 --> 00:05:32,720
i've spent

00:05:30,479 --> 00:05:34,639
several evenings just fixing them and it

00:05:32,720 --> 00:05:36,320
was not fun

00:05:34,639 --> 00:05:38,240
it must be much it would be much better

00:05:36,320 --> 00:05:39,520
if we were able to sort of do this

00:05:38,240 --> 00:05:41,840
incrementally right

00:05:39,520 --> 00:05:43,759
uh of course there's not no problem if

00:05:41,840 --> 00:05:45,840
you want to run it everything

00:05:43,759 --> 00:05:47,280
like you know you sit down before the

00:05:45,840 --> 00:05:48,960
release you run

00:05:47,280 --> 00:05:50,720
static analyzers on the whole code base

00:05:48,960 --> 00:05:52,800
you fix everything and then

00:05:50,720 --> 00:05:53,759
after three months you do it all again

00:05:52,800 --> 00:05:56,880
but then

00:05:53,759 --> 00:06:00,880
it's not really good comfortable

00:05:56,880 --> 00:06:04,639
and uh we have two links to do that

00:06:00,880 --> 00:06:06,319
for us uh so i thought like maybe we

00:06:04,639 --> 00:06:09,600
could do this

00:06:06,319 --> 00:06:11,680
maybe we could do this uh for each pull

00:06:09,600 --> 00:06:13,120
request right

00:06:11,680 --> 00:06:15,199
so this is where the second part of the

00:06:13,120 --> 00:06:17,620
talk comes in uh

00:06:15,199 --> 00:06:19,520
about gitlab ci

00:06:17,620 --> 00:06:21,520
[Music]

00:06:19,520 --> 00:06:23,280
here i want to pause here and say just

00:06:21,520 --> 00:06:24,639
big thank you and kudos to the susan

00:06:23,280 --> 00:06:27,520
team and everyone who was

00:06:24,639 --> 00:06:30,319
involved in switching over to gitlab i'm

00:06:27,520 --> 00:06:33,440
so happy we have that finally

00:06:30,319 --> 00:06:34,800
uh gitlab ci

00:06:33,440 --> 00:06:36,880
you may have heard about it i think it

00:06:34,800 --> 00:06:38,479
was a friday it was mentioned on a

00:06:36,880 --> 00:06:41,600
friday training about gitlab

00:06:38,479 --> 00:06:43,680
as well it's well it's a ci and it's

00:06:41,600 --> 00:06:45,759
built directly into gitlab

00:06:43,680 --> 00:06:46,960
it's basically like our own jenkins the

00:06:45,759 --> 00:06:49,039
build kd york

00:06:46,960 --> 00:06:50,160
except this is actually part of gitlab

00:06:49,039 --> 00:06:53,599
what that means

00:06:50,160 --> 00:06:57,039
is that it can execute the jobs

00:06:53,599 --> 00:06:59,280
on not just on each comment but also on

00:06:57,039 --> 00:07:02,400
particular events like for instance

00:06:59,280 --> 00:07:03,440
it can execute your ci job or ci

00:07:02,400 --> 00:07:06,880
pipeline

00:07:03,440 --> 00:07:08,240
on each pull request and

00:07:06,880 --> 00:07:10,400
i'm sure you know where i'm heading with

00:07:08,240 --> 00:07:13,599
this uh how

00:07:10,400 --> 00:07:16,319
how can i get this how can i get my own

00:07:13,599 --> 00:07:18,080
gitlab ci jobs for my kde project this

00:07:16,319 --> 00:07:21,280
is another advantage of

00:07:18,080 --> 00:07:23,039
gitlab ci with the old jenkins setup

00:07:21,280 --> 00:07:24,880
this is all managed by this designment

00:07:23,039 --> 00:07:26,880
team and basically what we

00:07:24,880 --> 00:07:28,960
every project get the same treatment

00:07:26,880 --> 00:07:31,440
right we all

00:07:28,960 --> 00:07:32,560
all the projects are just compiled tests

00:07:31,440 --> 00:07:34,319
are executed and that's

00:07:32,560 --> 00:07:36,720
it there is no point where you can

00:07:34,319 --> 00:07:38,880
customize it at your own settings and

00:07:36,720 --> 00:07:41,919
whatnot

00:07:38,880 --> 00:07:45,440
so luckily in gitlab ci

00:07:41,919 --> 00:07:47,919
all you need to do to get uh

00:07:45,440 --> 00:07:49,520
your project to create a pipeline for

00:07:47,919 --> 00:07:52,560
your project is you need to create

00:07:49,520 --> 00:07:53,280
dot gitlab.ci with diablo file in the

00:07:52,560 --> 00:07:57,360
top level

00:07:53,280 --> 00:08:01,520
of your git repository

00:07:57,360 --> 00:08:04,800
and there you can define your pipelines

00:08:01,520 --> 00:08:07,199
uh huh what how to

00:08:04,800 --> 00:08:08,240
put it up well again our sysadmins are

00:08:07,199 --> 00:08:12,240
super awesome

00:08:08,240 --> 00:08:15,680
and they created uh existing definitions

00:08:12,240 --> 00:08:18,000
so you just put in these two you include

00:08:15,680 --> 00:08:19,599
these two yaml files which contain

00:08:18,000 --> 00:08:22,639
different contained definitions

00:08:19,599 --> 00:08:25,599
for the pipelines and the jobs in there

00:08:22,639 --> 00:08:27,120
so for instance this one ci before is

00:08:25,599 --> 00:08:28,879
just just some templates and the ci

00:08:27,120 --> 00:08:29,919
applications linux this will create a

00:08:28,879 --> 00:08:33,039
job

00:08:29,919 --> 00:08:35,680
for a kde application project that's

00:08:33,039 --> 00:08:37,440
also ci frameworks and ci extra gear

00:08:35,680 --> 00:08:39,599
and then this will create particular job

00:08:37,440 --> 00:08:40,320
for linux there's also free bsd and

00:08:39,599 --> 00:08:42,800
windows

00:08:40,320 --> 00:08:43,519
so if you just include whatever you need

00:08:42,800 --> 00:08:46,480
you'll get

00:08:43,519 --> 00:08:48,480
automatically created jobs right so if

00:08:46,480 --> 00:08:50,640
your project is not interested in

00:08:48,480 --> 00:08:52,640
windows or doesn't work on windows you

00:08:50,640 --> 00:08:54,000
just don't include that file that

00:08:52,640 --> 00:08:55,839
creates the job

00:08:54,000 --> 00:08:57,519
and if you want to define your own job

00:08:55,839 --> 00:09:00,160
that does

00:08:57,519 --> 00:09:01,440
magic well you just define it in your

00:09:00,160 --> 00:09:03,440
another file and you get it

00:09:01,440 --> 00:09:05,200
so you as a project developer you can

00:09:03,440 --> 00:09:08,240
really customize this

00:09:05,200 --> 00:09:09,360
which i think is really awesome and well

00:09:08,240 --> 00:09:13,600
as part of that

00:09:09,360 --> 00:09:15,920
uh i thought well maybe i could

00:09:13,600 --> 00:09:18,160
we could get uh static analysis as part

00:09:15,920 --> 00:09:20,560
of it as well right

00:09:18,160 --> 00:09:22,160
actually this all started when shortly

00:09:20,560 --> 00:09:25,440
after the migration ticket lab

00:09:22,160 --> 00:09:28,560
when laura montel went and he added

00:09:25,440 --> 00:09:32,480
some sort of initial static analyzer

00:09:28,560 --> 00:09:34,640
set up into all the kde uh repositories

00:09:32,480 --> 00:09:36,240
unfortunately it didn't work so i first

00:09:34,640 --> 00:09:38,080
i started removing them from

00:09:36,240 --> 00:09:39,760
from the repository i realized well this

00:09:38,080 --> 00:09:41,680
actually might be super useful

00:09:39,760 --> 00:09:43,120
uh let's try to figure out how to do it

00:09:41,680 --> 00:09:45,519
properly

00:09:43,120 --> 00:09:47,360
uh so that we can get proper green

00:09:45,519 --> 00:09:51,360
pipeline

00:09:47,360 --> 00:09:54,399
so this was the first attempt uh

00:09:51,360 --> 00:09:56,000
nasty i know it's complicated and really

00:09:54,399 --> 00:09:58,640
you don't want everyone to

00:09:56,000 --> 00:09:59,760
copy paste this into their kit labial

00:09:58,640 --> 00:10:01,680
it's hard to change it

00:09:59,760 --> 00:10:02,959
requires committing additional files

00:10:01,680 --> 00:10:06,480
into the repository

00:10:02,959 --> 00:10:09,839
it was it was bad so

00:10:06,480 --> 00:10:10,480
i it's i i took some inspiration from

00:10:09,839 --> 00:10:12,800
the

00:10:10,480 --> 00:10:15,279
existing include files and just uh

00:10:12,800 --> 00:10:18,800
created the job and the pipeline

00:10:15,279 --> 00:10:20,880
in the uh

00:10:18,800 --> 00:10:21,920
in the sysadmin repo or well it's not

00:10:20,880 --> 00:10:25,040
there yet but

00:10:21,920 --> 00:10:25,600
uh later on that and all you need to do

00:10:25,040 --> 00:10:28,720
is

00:10:25,600 --> 00:10:31,519
you just include this file and your

00:10:28,720 --> 00:10:32,079
add this include into the gitlab ci and

00:10:31,519 --> 00:10:34,480
then

00:10:32,079 --> 00:10:35,279
uh you also create the new job which you

00:10:34,480 --> 00:10:37,680
do by

00:10:35,279 --> 00:10:38,800
uh saying well this is the name of my

00:10:37,680 --> 00:10:42,000
job and it just

00:10:38,800 --> 00:10:42,000
extends this template

00:10:42,079 --> 00:10:46,000
it right now it cannot be auto created

00:10:44,959 --> 00:10:47,920
like the

00:10:46,000 --> 00:10:50,000
for instance applications lyrics jobs

00:10:47,920 --> 00:10:52,160
which you don't need to define anywhere

00:10:50,000 --> 00:10:55,120
they just get automatically created

00:10:52,160 --> 00:10:56,720
it's because either i'm too bad with the

00:10:55,120 --> 00:10:59,200
gitlab ci

00:10:56,720 --> 00:11:01,360
stuff or because i because maybe cannot

00:10:59,200 --> 00:11:04,160
be done better

00:11:01,360 --> 00:11:06,079
anyway this is how you get it and

00:11:04,160 --> 00:11:09,760
magically suddenly what you get

00:11:06,079 --> 00:11:11,440
is a ci new ci job

00:11:09,760 --> 00:11:13,440
called static analysis that gets

00:11:11,440 --> 00:11:15,519
executed on every single

00:11:13,440 --> 00:11:16,640
every new pull request and again

00:11:15,519 --> 00:11:19,760
whenever you commit

00:11:16,640 --> 00:11:19,760
a new comment to the branch

00:11:20,000 --> 00:11:25,200
so what exactly does this job do first

00:11:22,800 --> 00:11:28,720
it builds the entire project

00:11:25,200 --> 00:11:30,640
uh you have to do it because the static

00:11:28,720 --> 00:11:32,399
analyzer it needs for the code to

00:11:30,640 --> 00:11:35,360
compile

00:11:32,399 --> 00:11:37,760
right and unfortunately with cued we

00:11:35,360 --> 00:11:39,600
have a lot of files that are generated

00:11:37,760 --> 00:11:41,519
as part of the compilation steps so we

00:11:39,600 --> 00:11:42,800
have the mock files the ui files the

00:11:41,519 --> 00:11:44,720
debuss editors

00:11:42,800 --> 00:11:46,000
and whatnot that all this all needs to

00:11:44,720 --> 00:11:49,040
get generated

00:11:46,000 --> 00:11:51,040
and so that uh so that it can

00:11:49,040 --> 00:11:53,279
when it's included from some other cpus

00:11:51,040 --> 00:11:54,800
file the compiler actually has access to

00:11:53,279 --> 00:11:57,440
these includes

00:11:54,800 --> 00:11:59,120
otherwise the the comparison says can't

00:11:57,440 --> 00:12:01,040
compile i will not do any static

00:11:59,120 --> 00:12:03,920
analysis on this

00:12:01,040 --> 00:12:04,480
so i did some really crazy stuff to get

00:12:03,920 --> 00:12:06,959
it

00:12:04,480 --> 00:12:09,519
to try to get only the generated files

00:12:06,959 --> 00:12:12,639
without having to compile everything but

00:12:09,519 --> 00:12:14,959
it failed i was not able to force make

00:12:12,639 --> 00:12:17,920
or cmake to only do the generation

00:12:14,959 --> 00:12:20,399
if anyone knows how to do that how to

00:12:17,920 --> 00:12:21,279
force cmake or make to only generate all

00:12:20,399 --> 00:12:22,959
the files

00:12:21,279 --> 00:12:24,800
without that needs to be generated

00:12:22,959 --> 00:12:27,600
without having to compile

00:12:24,800 --> 00:12:29,120
everything that would be tremendous uh i

00:12:27,600 --> 00:12:32,720
even tried like crazy

00:12:29,120 --> 00:12:35,680
check create some crazy ideas like uh

00:12:32,720 --> 00:12:38,000
creating a script that defers to a real

00:12:35,680 --> 00:12:40,000
compeller at configure time but that

00:12:38,000 --> 00:12:41,760
does nothing at build time except of

00:12:40,000 --> 00:12:44,480
creating empty files

00:12:41,760 --> 00:12:45,680
so it would be much faster uh but then

00:12:44,480 --> 00:12:47,279
it failed

00:12:45,680 --> 00:12:49,760
already in accounting because in

00:12:47,279 --> 00:12:52,800
aquarium we have a custom

00:12:49,760 --> 00:12:55,279
utility that needs to be compiled first

00:12:52,800 --> 00:12:57,200
and then it is fed another an xml file

00:12:55,279 --> 00:12:58,240
and it generates some more c plus box

00:12:57,200 --> 00:13:01,120
code from that

00:12:58,240 --> 00:13:02,560
that then gets included from other

00:13:01,120 --> 00:13:05,680
places in aquanadi

00:13:02,560 --> 00:13:07,279
so uh when i so fake compiled this

00:13:05,680 --> 00:13:08,959
generator it obviously didn't work and

00:13:07,279 --> 00:13:10,720
the compilation failed anyway and the

00:13:08,959 --> 00:13:13,440
static analyzes them anyway

00:13:10,720 --> 00:13:15,200
so i ended up going with them let's just

00:13:13,440 --> 00:13:17,519
compile everything

00:13:15,200 --> 00:13:18,240
uh we had some discussion with ben about

00:13:17,519 --> 00:13:21,120
this on

00:13:18,240 --> 00:13:22,480
on the review maybe the solution to this

00:13:21,120 --> 00:13:25,600
would be to

00:13:22,480 --> 00:13:28,000
put the static analyzer as a test stage

00:13:25,600 --> 00:13:29,519
after the build under the regular main

00:13:28,000 --> 00:13:32,800
build so the linux build

00:13:29,519 --> 00:13:34,240
so that it can reuse the build directory

00:13:32,800 --> 00:13:38,079
created in the

00:13:34,240 --> 00:13:41,279
in the regular build job

00:13:38,079 --> 00:13:44,000
the next step that uh this this

00:13:41,279 --> 00:13:44,880
job does is it finds to change c plus

00:13:44,000 --> 00:13:46,639
files

00:13:44,880 --> 00:13:48,560
uh first i just try to write on

00:13:46,639 --> 00:13:49,920
everything the problem is there is a one

00:13:48,560 --> 00:13:53,199
hour timeout

00:13:49,920 --> 00:13:56,720
time limit for uh for the

00:13:53,199 --> 00:13:59,600
uh job and with ankonari uh i

00:13:56,720 --> 00:14:01,360
was around 59 minutes and then sometimes

00:13:59,600 --> 00:14:02,800
it turned out

00:14:01,360 --> 00:14:04,639
it's already like just pulling the

00:14:02,800 --> 00:14:06,560
dependencies and doing the initial build

00:14:04,639 --> 00:14:09,040
takes about 20 minutes so that you're

00:14:06,560 --> 00:14:10,480
left with only 40 minutes to do a static

00:14:09,040 --> 00:14:13,680
analysis of everything

00:14:10,480 --> 00:14:14,959
and i don't think akane is too big it's

00:14:13,680 --> 00:14:16,399
not the biggest project and they're

00:14:14,959 --> 00:14:18,480
definitely not

00:14:16,399 --> 00:14:20,800
and static analyzers are slow because

00:14:18,480 --> 00:14:23,920
they do a lot of checking and thinking

00:14:20,800 --> 00:14:24,959
so i realized well i do not need to

00:14:23,920 --> 00:14:28,800
check the whole

00:14:24,959 --> 00:14:31,279
code base every time all i need to do

00:14:28,800 --> 00:14:33,360
is i need to figure out which files have

00:14:31,279 --> 00:14:36,240
changed on this branch

00:14:33,360 --> 00:14:37,600
and i only need to check those files so

00:14:36,240 --> 00:14:39,600
the static analyzer

00:14:37,600 --> 00:14:41,440
job is now much faster because it only

00:14:39,600 --> 00:14:43,680
checks the files that have actually

00:14:41,440 --> 00:14:47,360
changed

00:14:43,680 --> 00:14:49,760
for for errors uh

00:14:47,360 --> 00:14:52,240
then obviously it runs the crazy and

00:14:49,760 --> 00:14:54,959
tidy on those changed files

00:14:52,240 --> 00:14:56,720
and ultimately it generates a code

00:14:54,959 --> 00:14:58,079
quality report file initially i was

00:14:56,720 --> 00:15:00,560
using junit uh

00:14:58,079 --> 00:15:01,600
format but then i was pointed at the

00:15:00,560 --> 00:15:04,079
code quality

00:15:01,600 --> 00:15:06,160
uh format which actually integrated

00:15:04,079 --> 00:15:08,160
better into the gitlab ci

00:15:06,160 --> 00:15:11,199
the major advantage is that you get the

00:15:08,160 --> 00:15:13,120
report directly in the pull request

00:15:11,199 --> 00:15:14,560
view of gitlab this is what it looked

00:15:13,120 --> 00:15:16,720
like looks like so this is a pull

00:15:14,560 --> 00:15:19,199
request on my test repository

00:15:16,720 --> 00:15:20,320
and where i intentionally introduced

00:15:19,199 --> 00:15:23,120
some issues

00:15:20,320 --> 00:15:24,480
and you can see that i already got two

00:15:23,120 --> 00:15:26,480
crazy warnings there

00:15:24,480 --> 00:15:27,680
that i'm missing a reference on

00:15:26,480 --> 00:15:28,959
non-trivial type and

00:15:27,680 --> 00:15:31,360
that the signal argument needs to be

00:15:28,959 --> 00:15:33,120
fully qualified so

00:15:31,360 --> 00:15:34,639
this you get as part of your pull

00:15:33,120 --> 00:15:36,560
request you know

00:15:34,639 --> 00:15:37,759
you see it in the in the gitlab ci and

00:15:36,560 --> 00:15:40,399
the pull request below

00:15:37,759 --> 00:15:41,839
and that's that's uh awesome for it both

00:15:40,399 --> 00:15:43,360
for reviewers and for the developer

00:15:41,839 --> 00:15:46,720
because developer knows

00:15:43,360 --> 00:15:47,360
that uh this needs some uh some more

00:15:46,720 --> 00:15:49,040
work

00:15:47,360 --> 00:15:50,560
and and of course the pipeline has

00:15:49,040 --> 00:15:54,639
failed because of that so you can see

00:15:50,560 --> 00:15:58,639
that the pipeline is red

00:15:54,639 --> 00:16:00,720
uh unfortunately we can't really set

00:15:58,639 --> 00:16:02,639
at this point we don't have it

00:16:00,720 --> 00:16:04,240
configured that you could not merge if

00:16:02,639 --> 00:16:05,360
the pipeline is read i would love to be

00:16:04,240 --> 00:16:07,600
able to say

00:16:05,360 --> 00:16:09,759
uh no you cannot merge until the

00:16:07,600 --> 00:16:13,600
pipeline is green but

00:16:09,759 --> 00:16:16,800
uh we'll see uh

00:16:13,600 --> 00:16:17,199
back to the yaml file just to show you

00:16:16,800 --> 00:16:19,839
how

00:16:17,199 --> 00:16:21,279
what can be customized is uh so this for

00:16:19,839 --> 00:16:23,680
the first two lights you know that

00:16:21,279 --> 00:16:24,880
static analysis is the job definition

00:16:23,680 --> 00:16:28,160
the extent

00:16:24,880 --> 00:16:29,199
shows that the job should be based on a

00:16:28,160 --> 00:16:31,600
template called

00:16:29,199 --> 00:16:32,959
dot static analysis and you can add

00:16:31,600 --> 00:16:34,880
variables and then

00:16:32,959 --> 00:16:36,959
where you can customize some of the

00:16:34,880 --> 00:16:40,079
variables which has a default

00:16:36,959 --> 00:16:41,279
uh the first analyzer the first variable

00:16:40,079 --> 00:16:42,959
is called analyzers

00:16:41,279 --> 00:16:46,079
uh it's a comma separated list of

00:16:42,959 --> 00:16:47,839
analyzers so classic blank title here

00:16:46,079 --> 00:16:49,680
you can choose something crazy or only

00:16:47,839 --> 00:16:50,240
clank tidy and in the future there might

00:16:49,680 --> 00:16:52,320
be more

00:16:50,240 --> 00:16:54,399
checks that you might wish to turn on or

00:16:52,320 --> 00:16:57,440
off uh

00:16:54,399 --> 00:16:58,800
cx6 flags uh you may want to disable

00:16:57,440 --> 00:17:01,680
deprecated

00:16:58,800 --> 00:17:04,720
warnings because very often you can't do

00:17:01,680 --> 00:17:06,880
anything about deprecation so uh

00:17:04,720 --> 00:17:08,079
deprecated uh deprecated warnings

00:17:06,880 --> 00:17:10,079
because they might be coming from a

00:17:08,079 --> 00:17:13,360
third party library right so you

00:17:10,079 --> 00:17:14,880
uh that this would break your code

00:17:13,360 --> 00:17:15,919
analysis so you can just disable

00:17:14,880 --> 00:17:18,400
suppress them

00:17:15,919 --> 00:17:20,640
uh through cx6 argument which is then

00:17:18,400 --> 00:17:22,720
passed to the static analyzers

00:17:20,640 --> 00:17:24,319
uh and then there are uh classic

00:17:22,720 --> 00:17:25,919
specific chat uh

00:17:24,319 --> 00:17:27,520
arguments which are for place ignored

00:17:25,919 --> 00:17:29,200
here so if you should ignore

00:17:27,520 --> 00:17:30,880
anything coming from a particular

00:17:29,200 --> 00:17:32,320
directory or includes coming from a

00:17:30,880 --> 00:17:33,280
particular library so in this case

00:17:32,320 --> 00:17:35,600
usually include

00:17:33,280 --> 00:17:36,640
we don't want warnings about cued being

00:17:35,600 --> 00:17:38,960
wrong

00:17:36,640 --> 00:17:41,200
uh as well as uh for instance in

00:17:38,960 --> 00:17:43,520
accounting i've put in there uh some

00:17:41,200 --> 00:17:44,799
third-party folders uh or or a

00:17:43,520 --> 00:17:47,679
third-party folder

00:17:44,799 --> 00:17:49,120
because i look crazy to do checks on a

00:17:47,679 --> 00:17:52,880
third-party library

00:17:49,120 --> 00:17:54,640
that we have included or embedded

00:17:52,880 --> 00:17:55,919
uh and then place a check so you can of

00:17:54,640 --> 00:17:57,919
course customize with

00:17:55,919 --> 00:17:59,360
which checks you want clays to run so

00:17:57,919 --> 00:18:01,200
maybe you want all of them or maybe you

00:17:59,360 --> 00:18:03,200
just want the level zero level one

00:18:01,200 --> 00:18:05,200
this is up to you i believe this is the

00:18:03,200 --> 00:18:08,480
default that i just copy pasted from the

00:18:05,200 --> 00:18:10,640
uh from the definition

00:18:08,480 --> 00:18:12,799
for clank tidy to customize it you just

00:18:10,640 --> 00:18:14,799
create a dot clang dash tidy file in the

00:18:12,799 --> 00:18:17,120
root of your kids repository

00:18:14,799 --> 00:18:18,320
i will not go into details how to

00:18:17,120 --> 00:18:20,000
customize it here

00:18:18,320 --> 00:18:21,440
uh you can check the website the

00:18:20,000 --> 00:18:24,960
homepage of clank title it's

00:18:21,440 --> 00:18:25,679
very well documented uh on how it looks

00:18:24,960 --> 00:18:27,679
like and

00:18:25,679 --> 00:18:29,120
what it looks like and what you can put

00:18:27,679 --> 00:18:32,960
in there

00:18:29,120 --> 00:18:36,559
uh this needs some consideration

00:18:32,960 --> 00:18:39,039
and a lot of uh testing because

00:18:36,559 --> 00:18:40,480
uh if you enable just all the checks it

00:18:39,039 --> 00:18:41,679
will be crazy

00:18:40,480 --> 00:18:43,919
there was saw the checks are like sort

00:18:41,679 --> 00:18:45,679
of contradictory because

00:18:43,919 --> 00:18:47,600
they have there are some like default

00:18:45,679 --> 00:18:49,679
chess or cpp core guidelines

00:18:47,600 --> 00:18:50,960
back pro statements performance issues

00:18:49,679 --> 00:18:52,880
these are cool

00:18:50,960 --> 00:18:54,559
but then there are other google specific

00:18:52,880 --> 00:18:56,640
guidelines or llvm

00:18:54,559 --> 00:18:58,720
project specific guidelines and then

00:18:56,640 --> 00:19:01,280
fuxia specific guidelines

00:18:58,720 --> 00:19:03,200
and if those some of those checks they

00:19:01,280 --> 00:19:06,640
clash with each other so you fix it

00:19:03,200 --> 00:19:08,640
to to fix uh to be uh for google checks

00:19:06,640 --> 00:19:10,080
to not complain and suddenly llvm checks

00:19:08,640 --> 00:19:11,919
start complaining so

00:19:10,080 --> 00:19:14,080
you need to pick really carefully which

00:19:11,919 --> 00:19:17,280
ones you want

00:19:14,080 --> 00:19:18,160
uh of course uh the feature that i would

00:19:17,280 --> 00:19:20,640
like to get to

00:19:18,160 --> 00:19:21,440
is to also include things like qmlint

00:19:20,640 --> 00:19:23,919
and thailand

00:19:21,440 --> 00:19:25,600
and run those on the changed pml files

00:19:23,919 --> 00:19:28,480
and python files and

00:19:25,600 --> 00:19:29,840
maybe more uh the code is written in a

00:19:28,480 --> 00:19:30,640
way that should allow for this rather

00:19:29,840 --> 00:19:33,360
easily

00:19:30,640 --> 00:19:33,840
so it's mostly about just introducing

00:19:33,360 --> 00:19:36,559
some

00:19:33,840 --> 00:19:38,559
way to convert from the output format of

00:19:36,559 --> 00:19:40,400
those tools into the code report

00:19:38,559 --> 00:19:42,320
or code quality format that gitlab

00:19:40,400 --> 00:19:44,559
understands

00:19:42,320 --> 00:19:45,919
the conclusion unfortunately i wasn't

00:19:44,559 --> 00:19:49,039
able to finish all of this

00:19:45,919 --> 00:19:50,640
before academy as i was hoping to uh

00:19:49,039 --> 00:19:52,880
it's already on pull request to the

00:19:50,640 --> 00:19:55,919
sysadmin repository but it is not

00:19:52,880 --> 00:19:57,840
yet uh there uh

00:19:55,919 --> 00:19:59,760
it works but it still needs some a

00:19:57,840 --> 00:20:01,840
little bit of polishing and discussion

00:19:59,760 --> 00:20:02,799
i hope to get it merged or done during

00:20:01,840 --> 00:20:05,520
academy

00:20:02,799 --> 00:20:08,240
uh of course if you really really want

00:20:05,520 --> 00:20:08,799
to help out or try it out and help maybe

00:20:08,240 --> 00:20:11,520
do some

00:20:08,799 --> 00:20:12,159
better testing you can ping me on irc or

00:20:11,520 --> 00:20:14,559
or uh

00:20:12,159 --> 00:20:16,159
or matrix and i can point you to the

00:20:14,559 --> 00:20:17,919
right repositories where where this

00:20:16,159 --> 00:20:19,520
lives and which how you can include it

00:20:17,919 --> 00:20:20,400
into your repository for testing right

00:20:19,520 --> 00:20:23,120
now

00:20:20,400 --> 00:20:24,799
uh ultimately i realize this should be a

00:20:23,120 --> 00:20:29,280
default for frameworks and plasma

00:20:24,799 --> 00:20:32,320
uh definitely i would like to work on uh

00:20:29,280 --> 00:20:34,480
getting those uh at these basic classes

00:20:32,320 --> 00:20:36,480
and clank titles topic analysis

00:20:34,480 --> 00:20:38,320
enabled for by default for all

00:20:36,480 --> 00:20:41,039
frameworks repositories and

00:20:38,320 --> 00:20:41,760
uh plasma ability depends on if the

00:20:41,039 --> 00:20:43,919
plasma

00:20:41,760 --> 00:20:45,520
maintainers which wish to do so but i

00:20:43,919 --> 00:20:46,320
think at least four frameworks as a sort

00:20:45,520 --> 00:20:48,799
of one of the flex

00:20:46,320 --> 00:20:49,679
products we should definitely have that

00:20:48,799 --> 00:20:51,760
and

00:20:49,679 --> 00:20:53,360
that's all from me so some time for

00:20:51,760 --> 00:20:55,760
questions thank you

00:20:53,360 --> 00:20:58,559
all right let's start with the questions

00:20:55,760 --> 00:21:01,600
off with question number one

00:20:58,559 --> 00:21:07,280
can the content of kit lab

00:21:01,600 --> 00:21:07,280
ci dot yml file be run locally

00:21:08,000 --> 00:21:13,280
somewhat yes you can download the docker

00:21:11,760 --> 00:21:17,600
file

00:21:13,280 --> 00:21:19,760
that's used on gitlab ci

00:21:17,600 --> 00:21:20,960
and then you can take the commands that

00:21:19,760 --> 00:21:23,280
are specified

00:21:20,960 --> 00:21:24,320
in the gitlab ci there is a section in

00:21:23,280 --> 00:21:27,039
the gitlab ci

00:21:24,320 --> 00:21:28,080
file in the includes file there is a

00:21:27,039 --> 00:21:29,919
section script

00:21:28,080 --> 00:21:31,679
or script where it actually lists the

00:21:29,919 --> 00:21:35,120
commands that are executed

00:21:31,679 --> 00:21:36,480
during the test so if you enter the

00:21:35,120 --> 00:21:38,240
docker docker container

00:21:36,480 --> 00:21:39,840
and you copy paste those commands you

00:21:38,240 --> 00:21:42,960
basically are able to

00:21:39,840 --> 00:21:45,120
run uh run the the checks

00:21:42,960 --> 00:21:46,960
in the same environment as in which they

00:21:45,120 --> 00:21:49,039
will run on the

00:21:46,960 --> 00:21:50,960
on the gitlab ci it's not like that you

00:21:49,039 --> 00:21:52,880
could just say uh

00:21:50,960 --> 00:21:54,799
uh it's not like that you could just say

00:21:52,880 --> 00:21:56,320
you know push a button or run a command

00:21:54,799 --> 00:21:58,159
and it would sort of run your gitlab

00:21:56,320 --> 00:22:02,400
worker with everything in it that

00:21:58,159 --> 00:22:06,159
i haven't found a way to do that okay

00:22:02,400 --> 00:22:09,440
next question is it safe to run a yml

00:22:06,159 --> 00:22:10,960
with includes from the internet

00:22:09,440 --> 00:22:13,520
well if you know where they are coming

00:22:10,960 --> 00:22:17,440
from i don't see a reason why not

00:22:13,520 --> 00:22:19,440
okay next question is it a complete

00:22:17,440 --> 00:22:20,720
opt-in system or will there be a massive

00:22:19,440 --> 00:22:22,559
switch in the future

00:22:20,720 --> 00:22:24,320
where all projects get pipelines

00:22:22,559 --> 00:22:26,720
automatically

00:22:24,320 --> 00:22:27,840
um this is i think more of a question to

00:22:26,720 --> 00:22:30,799
the c70

00:22:27,840 --> 00:22:31,679
as far as i know the idea in long term

00:22:30,799 --> 00:22:35,360
is to

00:22:31,679 --> 00:22:37,600
move from jenkins to uh good luck ci but

00:22:35,360 --> 00:22:38,559
i think better some some systems have

00:22:37,600 --> 00:22:41,840
been uh

00:22:38,559 --> 00:22:43,440
answered this question okay

00:22:41,840 --> 00:22:46,880
next question then do you have

00:22:43,440 --> 00:22:50,880
experience with playing static analyzer

00:22:46,880 --> 00:22:53,679
i think clang titty tidy

00:22:50,880 --> 00:22:54,159
has some integration with it but i don't

00:22:53,679 --> 00:22:57,679
know

00:22:54,159 --> 00:23:00,880
if you can use tidy alone and get

00:22:57,679 --> 00:23:02,559
all the checks i believe clank tie day

00:23:00,880 --> 00:23:06,320
has

00:23:02,559 --> 00:23:08,320
uh uh i think planck tidy has

00:23:06,320 --> 00:23:09,760
one of the checks in clank tidy is

00:23:08,320 --> 00:23:12,080
static analyzer

00:23:09,760 --> 00:23:12,880
which runs the clang static analyzer

00:23:12,080 --> 00:23:14,720
stuff so

00:23:12,880 --> 00:23:16,720
and then it has all these additional

00:23:14,720 --> 00:23:18,000
checks on top of the clang static

00:23:16,720 --> 00:23:21,440
analyzer so

00:23:18,000 --> 00:23:23,840
yes you can run clank tidy uh

00:23:21,440 --> 00:23:24,559
individually and get the clan static

00:23:23,840 --> 00:23:28,480
analyzer

00:23:24,559 --> 00:23:32,000
plus all the rest all right

00:23:28,480 --> 00:23:35,600
next question can good lab ci run test

00:23:32,000 --> 00:23:40,240
yes if you configure it

00:23:35,600 --> 00:23:42,400
i think uh i think uh the yellow file

00:23:40,240 --> 00:23:43,440
i'm not sure this is enabled by default

00:23:42,400 --> 00:23:46,480
uh in the

00:23:43,440 --> 00:23:48,480
currently defined sets but actually yes

00:23:46,480 --> 00:23:50,799
i think it is because some of our

00:23:48,480 --> 00:23:51,279
projects have failing tests on github ci

00:23:50,799 --> 00:23:53,440
so

00:23:51,279 --> 00:23:55,200
yes you get tests run automatically even

00:23:53,440 --> 00:23:57,840
with if you just include

00:23:55,200 --> 00:23:58,240
the yellow file from from sysadmins all

00:23:57,840 --> 00:24:02,000
right

00:23:58,240 --> 00:24:05,760
two more questions uh next is

00:24:02,000 --> 00:24:08,960
well our infra explode doing other

00:24:05,760 --> 00:24:11,200
hacks uh it might

00:24:08,960 --> 00:24:12,159
but that's uh that's one of the reasons

00:24:11,200 --> 00:24:15,440
why i uh

00:24:12,159 --> 00:24:16,960
i think that uh or why i went for the

00:24:15,440 --> 00:24:18,640
approach of doing

00:24:16,960 --> 00:24:21,200
only checking the files that have

00:24:18,640 --> 00:24:24,240
actually changed in the pull request

00:24:21,200 --> 00:24:26,159
so usually i mean sure you can do a pull

00:24:24,240 --> 00:24:28,720
request which changes everything but

00:24:26,159 --> 00:24:29,279
usually in request in your change you

00:24:28,720 --> 00:24:31,279
only

00:24:29,279 --> 00:24:32,320
touch a few files so it's reasonably

00:24:31,279 --> 00:24:35,039
fast

00:24:32,320 --> 00:24:36,240
so it should not explode okay just

00:24:35,039 --> 00:24:37,600
crossed

00:24:36,240 --> 00:24:39,200
all right it looks like we have an

00:24:37,600 --> 00:24:40,000
eighth question coming in but question

00:24:39,200 --> 00:24:43,200
number seven

00:24:40,000 --> 00:24:46,400
is is there a template documentation to

00:24:43,200 --> 00:24:49,279
add to this project and not yet

00:24:46,400 --> 00:24:50,320
uh i think uh once this all settles and

00:24:49,279 --> 00:24:53,919
it's merged into

00:24:50,320 --> 00:24:55,919
uh marriage into the system repository

00:24:53,919 --> 00:24:58,080
i definitely write down some uh

00:24:55,919 --> 00:25:01,760
something on on a wiki

00:24:58,080 --> 00:25:03,360
so that uh uh

00:25:01,760 --> 00:25:06,320
everyone can just copy paste it into

00:25:03,360 --> 00:25:08,880
their own gitlab ci

00:25:06,320 --> 00:25:11,279
okay great all right last question is

00:25:08,880 --> 00:25:12,400
still being typed we only have like 30

00:25:11,279 --> 00:25:14,960
seconds

00:25:12,400 --> 00:25:16,320
let's see if we can do it does your

00:25:14,960 --> 00:25:20,320
thing properly detect

00:25:16,320 --> 00:25:29,039
changes in headers that rob propagate

00:25:20,320 --> 00:25:32,080
to many cpp files

00:25:29,039 --> 00:25:33,840
well if you if you change the oh i see

00:25:32,080 --> 00:25:36,159
what i mean uh

00:25:33,840 --> 00:25:38,400
i actually do not know i haven't tried

00:25:36,159 --> 00:25:40,400
just changing a header file

00:25:38,400 --> 00:25:41,840
and seeing if the static analyzer checks

00:25:40,400 --> 00:25:42,400
it that's a good question thank you i

00:25:41,840 --> 00:25:52,799
will

00:25:42,400 --> 00:25:52,799

YouTube URL: https://www.youtube.com/watch?v=SkMG4gwNKVI


