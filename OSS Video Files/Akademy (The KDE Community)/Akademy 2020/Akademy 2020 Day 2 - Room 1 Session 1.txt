Title: Akademy 2020 Day 2 - Room 1 Session 1
Publication date: 2020-09-08
Playlist: Akademy 2020
Description: 
	00:00:00 C++17 and 20 Goodies / Ivan Čukić

00:26:46 Rust from a KDE Perspective - What could this programming offer to the KDE developer community? / Méven Car

00:56:21 Test It! - Unit testing for lazy developers / Andreas Cord-Landwehr

01:27:02 KIO: A Story of Young and Old Jobs - How jobs get the job done / David Faure

01:57:43 Static Code Analysis with Gitlab CI / Daniel Vrátil

02:28:58 Virtual Sprints - New way of getting together / Bhushan Shah

02:38:03 FLA, FLA, FLA, FLA, FLA'ing Alive - Long-term licensing maintainence / Adriaan de Groot

02:47:12 Super Secret Plasma Features / Kai Uwe Broulik
Captions: 
	00:00:00,480 --> 00:00:05,600
so for people who have been to academies

00:00:04,080 --> 00:00:08,000
before

00:00:05,600 --> 00:00:09,360
or who have met me before i'm going to

00:00:08,000 --> 00:00:13,200
skip about me because

00:00:09,360 --> 00:00:15,519
there isn't really that much time uh

00:00:13,200 --> 00:00:17,279
usual disclaimer make your code readable

00:00:15,519 --> 00:00:17,920
pretend the next person who looks at

00:00:17,279 --> 00:00:20,480
your code

00:00:17,920 --> 00:00:21,600
is a psychopath and they know where you

00:00:20,480 --> 00:00:26,560
live

00:00:21,600 --> 00:00:29,920
very very important note i'm going to

00:00:26,560 --> 00:00:31,039
uh i'm not going to explain what the

00:00:29,920 --> 00:00:33,520
quote means

00:00:31,039 --> 00:00:34,480
you should all assign the meaning by

00:00:33,520 --> 00:00:37,360
yourselves

00:00:34,480 --> 00:00:38,320
now the question is why am i giving the

00:00:37,360 --> 00:00:42,480
same talk again

00:00:38,320 --> 00:00:45,200
because in academy 2017

00:00:42,480 --> 00:00:46,800
i already had a talk named suppose plus

00:00:45,200 --> 00:00:50,879
17 and 20.

00:00:46,800 --> 00:00:53,680
uh that stock was a little bit

00:00:50,879 --> 00:00:56,000
focused on uh let's say bigger features

00:00:53,680 --> 00:00:59,199
of c plus plus 20

00:00:56,000 --> 00:01:01,039
and some smaller features of cpu 17.

00:00:59,199 --> 00:01:02,879
now the things have changed a little bit

00:01:01,039 --> 00:01:06,960
from uh

00:01:02,879 --> 00:01:10,080
from 2017. uh we finally got

00:01:06,960 --> 00:01:13,119
simplest 20 ratified so this is a photo

00:01:10,080 --> 00:01:15,280
from the prize meeting of iso ccp

00:01:13,119 --> 00:01:16,720
uh where the c plus plus 20 was

00:01:15,280 --> 00:01:21,119
finalized

00:01:16,720 --> 00:01:24,240
and two days ago uh c plus plus

00:01:21,119 --> 00:01:27,280
20 was accepted by the iso so it's not

00:01:24,240 --> 00:01:28,560
an official proper standard and during

00:01:27,280 --> 00:01:31,280
those three years

00:01:28,560 --> 00:01:31,680
uh all the compilers that we care about

00:01:31,280 --> 00:01:34,799
uh

00:01:31,680 --> 00:01:37,840
now supports equals plus uh 17.

00:01:34,799 --> 00:01:41,040
so i'm going to focus mostly on

00:01:37,840 --> 00:01:44,000
little useful features that sql spot 17

00:01:41,040 --> 00:01:46,079
gives us with a couple of simples plus

00:01:44,000 --> 00:01:49,520
20 features i'm not going to cover

00:01:46,079 --> 00:01:52,240
any of the huge supers plus 20 things

00:01:49,520 --> 00:01:54,399
uh for those you can go and watch the

00:01:52,240 --> 00:01:58,719
video from academy 2017

00:01:54,399 --> 00:02:03,600
or you can just find dedicated talks on

00:01:58,719 --> 00:02:03,600
ranges scorings and stuff

00:02:04,240 --> 00:02:11,680
okay so let's begin

00:02:08,640 --> 00:02:12,239
this is a little bit slow uh so in

00:02:11,680 --> 00:02:15,280
simplest

00:02:12,239 --> 00:02:18,239
11 we got a function called stud

00:02:15,280 --> 00:02:18,879
to string and this function is a little

00:02:18,239 --> 00:02:21,120
bit

00:02:18,879 --> 00:02:22,400
tedious because you can't convert

00:02:21,120 --> 00:02:24,480
strings to string

00:02:22,400 --> 00:02:25,440
you can convert characters to string you

00:02:24,480 --> 00:02:27,760
can it's

00:02:25,440 --> 00:02:29,760
essentially you can just convert things

00:02:27,760 --> 00:02:33,440
like integers and

00:02:29,760 --> 00:02:36,959
floats etc so if you wanted to write

00:02:33,440 --> 00:02:40,000
a function that extends the standard

00:02:36,959 --> 00:02:41,519
to string we could do something like

00:02:40,000 --> 00:02:44,800
this so

00:02:41,519 --> 00:02:48,080
we can create a generic function that

00:02:44,800 --> 00:02:51,280
uh that obviously accepts any type t

00:02:48,080 --> 00:02:54,400
and if we if we got

00:02:51,280 --> 00:02:56,640
a proper std string inside as a t

00:02:54,400 --> 00:02:57,599
then we don't really have to call std to

00:02:56,640 --> 00:03:01,360
string

00:02:57,599 --> 00:03:03,200
now in new beautiful cpu 17

00:03:01,360 --> 00:03:05,599
we can check this at compile time

00:03:03,200 --> 00:03:06,640
whether type t is some specific type

00:03:05,599 --> 00:03:09,599
that we want

00:03:06,640 --> 00:03:10,000
so we can just write if const expert and

00:03:09,599 --> 00:03:14,319
then

00:03:10,000 --> 00:03:17,360
check is same t and sdb string

00:03:14,319 --> 00:03:19,920
now in this particular slide we have two

00:03:17,360 --> 00:03:21,440
features that didn't exist before

00:03:19,920 --> 00:03:24,959
sequels plus 17.

00:03:21,440 --> 00:03:28,000
the first one is that now we have

00:03:24,959 --> 00:03:28,560
prettier type traits so all the type

00:03:28,000 --> 00:03:30,319
traits

00:03:28,560 --> 00:03:31,599
in the standard library in the header

00:03:30,319 --> 00:03:34,799
type traits i

00:03:31,599 --> 00:03:37,200
have the suffix underscore v and

00:03:34,799 --> 00:03:38,159
underscore t so instead of having to

00:03:37,200 --> 00:03:40,239
write is same

00:03:38,159 --> 00:03:41,360
something something column column value

00:03:40,239 --> 00:03:44,000
you can just say

00:03:41,360 --> 00:03:44,560
is same underscore b and it shortens the

00:03:44,000 --> 00:03:47,599
code

00:03:44,560 --> 00:03:49,840
a little bit much more important is that

00:03:47,599 --> 00:03:52,640
now nowadays we don't need to write type

00:03:49,840 --> 00:03:53,280
name stdk column column type or anything

00:03:52,640 --> 00:03:56,720
like that

00:03:53,280 --> 00:04:00,560
we can just say stdk underscore d

00:03:56,720 --> 00:04:03,760
so these type names uh we had to sparkle

00:04:00,560 --> 00:04:06,000
over our code almost everywhere apart

00:04:03,760 --> 00:04:08,480
from having these suffixes

00:04:06,000 --> 00:04:10,319
in simplest plus twenty and expected in

00:04:08,480 --> 00:04:14,480
sql plus twenty three

00:04:10,319 --> 00:04:17,120
uh we will have uh this quite uh

00:04:14,480 --> 00:04:19,680
even in the cases where you still need

00:04:17,120 --> 00:04:20,400
to write type name in simple plus 17 and

00:04:19,680 --> 00:04:23,680
20.

00:04:20,400 --> 00:04:24,639
in simplesplash 23 it will all be just

00:04:23,680 --> 00:04:28,400
beautiful and

00:04:24,639 --> 00:04:31,680
you you would always be able to assume

00:04:28,400 --> 00:04:33,520
that the compiler knows that you forgot

00:04:31,680 --> 00:04:34,960
to write the type name so you won't need

00:04:33,520 --> 00:04:38,160
to actually write it

00:04:34,960 --> 00:04:41,120
now for people that know what sdk

00:04:38,160 --> 00:04:42,080
is i'd say that you can forget about it

00:04:41,120 --> 00:04:44,240
and that

00:04:42,080 --> 00:04:45,440
most of the time in sql spotlight you

00:04:44,240 --> 00:04:48,560
will be able to use

00:04:45,440 --> 00:04:49,360
uh at the remove cbref so if you have a

00:04:48,560 --> 00:04:51,759
type

00:04:49,360 --> 00:04:53,440
and that can be a const reference

00:04:51,759 --> 00:04:55,120
volatile reference or anything else and

00:04:53,440 --> 00:04:57,520
you want to strip out

00:04:55,120 --> 00:04:58,320
all the reference parts and consts and

00:04:57,520 --> 00:05:01,680
volatile

00:04:58,320 --> 00:05:02,800
you can just say sd remove cv ref

00:05:01,680 --> 00:05:05,120
underscore t

00:05:02,800 --> 00:05:06,160
and pass it to a certain type like const

00:05:05,120 --> 00:05:08,639
string

00:05:06,160 --> 00:05:10,479
constraint graph and this field this

00:05:08,639 --> 00:05:11,600
method function will return you a normal

00:05:10,479 --> 00:05:14,560
string

00:05:11,600 --> 00:05:15,039
so this is one of the things that is new

00:05:14,560 --> 00:05:17,199
small

00:05:15,039 --> 00:05:18,400
thing that will make up your code much

00:05:17,199 --> 00:05:22,240
better

00:05:18,400 --> 00:05:25,680
uh in sql plus 17. the second one is

00:05:22,240 --> 00:05:29,199
the compile time if or if constexpr

00:05:25,680 --> 00:05:32,800
uh if we try to call this same v

00:05:29,199 --> 00:05:35,360
uh with the normal if and then

00:05:32,800 --> 00:05:36,960
try to put it in a function that checks

00:05:35,360 --> 00:05:39,440
whether something is a string if it's a

00:05:36,960 --> 00:05:41,280
string then don't call to string

00:05:39,440 --> 00:05:42,720
and if it's not a string then call the

00:05:41,280 --> 00:05:44,800
string

00:05:42,720 --> 00:05:46,000
then you would have a compiler error

00:05:44,800 --> 00:05:49,360
because

00:05:46,000 --> 00:05:51,840
both branches of ef need to be valid

00:05:49,360 --> 00:05:52,720
in this case if you're using if const

00:05:51,840 --> 00:05:55,039
expert

00:05:52,720 --> 00:05:56,880
then only one of the branches will

00:05:55,039 --> 00:05:57,600
actually be compiled both of them need

00:05:56,880 --> 00:06:00,720
to be

00:05:57,600 --> 00:06:04,160
valid in syntax but uh

00:06:00,720 --> 00:06:04,479
the type t that we passed doesn't need

00:06:04,160 --> 00:06:08,720
to

00:06:04,479 --> 00:06:12,240
have a two string function to work on it

00:06:08,720 --> 00:06:14,160
if uh is same v returns true

00:06:12,240 --> 00:06:15,759
so if you go to the first branch the

00:06:14,160 --> 00:06:19,280
second branch will not really be

00:06:15,759 --> 00:06:19,280
checked for semantics

00:06:19,520 --> 00:06:25,440
uh also we can instead of just checking

00:06:22,800 --> 00:06:26,720
uh whether something is is the same we

00:06:25,440 --> 00:06:30,240
can also check

00:06:26,720 --> 00:06:33,039
as the derived from now sdd derived from

00:06:30,240 --> 00:06:34,080
doesn't have underscore t because it's

00:06:33,039 --> 00:06:37,120
not a type trade

00:06:34,080 --> 00:06:38,400
it's something that is uh available in

00:06:37,120 --> 00:06:41,120
silver plus empty

00:06:38,400 --> 00:06:42,639
and it's called the concept in essence

00:06:41,120 --> 00:06:43,360
for the time being just think of

00:06:42,639 --> 00:06:45,440
concepts

00:06:43,360 --> 00:06:47,039
as compile time functions that return

00:06:45,440 --> 00:06:50,639
true or false just like

00:06:47,039 --> 00:06:53,680
insane did you just

00:06:50,639 --> 00:06:57,280
define with a different syntax

00:06:53,680 --> 00:07:00,000
and if you want instead of supporting uh

00:06:57,280 --> 00:07:00,639
types that are not derived from from a

00:07:00,000 --> 00:07:04,160
string

00:07:00,639 --> 00:07:06,160
we can just call static assert

00:07:04,160 --> 00:07:07,280
in the as branch now this is going to

00:07:06,160 --> 00:07:09,759
lead to a problem

00:07:07,280 --> 00:07:10,560
because as i said both branches are

00:07:09,759 --> 00:07:13,680
going to be

00:07:10,560 --> 00:07:14,400
compiled but not checked semantically in

00:07:13,680 --> 00:07:17,120
this case

00:07:14,400 --> 00:07:18,479
static assert is going to make a

00:07:17,120 --> 00:07:21,120
compiler error

00:07:18,479 --> 00:07:22,400
because else branch even if it's not

00:07:21,120 --> 00:07:26,479
going to be executed

00:07:22,400 --> 00:07:29,680
the else branch is going to be compiled

00:07:26,479 --> 00:07:32,720
if you wanted to do something

00:07:29,680 --> 00:07:33,360
like a static assert of false uh what

00:07:32,720 --> 00:07:36,880
you should

00:07:33,360 --> 00:07:39,919
do instead is create a meta function

00:07:36,880 --> 00:07:41,599
like the function that that is in the

00:07:39,919 --> 00:07:43,919
slide called always holds

00:07:41,599 --> 00:07:45,919
so whatever type you pass to it it will

00:07:43,919 --> 00:07:48,000
return a false

00:07:45,919 --> 00:07:48,960
and then you can use it in the static

00:07:48,000 --> 00:07:52,800
assert so

00:07:48,960 --> 00:07:53,599
if the boolean value that you pass to

00:07:52,800 --> 00:07:56,960
static search

00:07:53,599 --> 00:07:58,800
depends on t then it's not going to be

00:07:56,960 --> 00:08:02,319
evaluated in the old branch

00:07:58,800 --> 00:08:05,520
if only the then branch is going to be

00:08:02,319 --> 00:08:05,520
executed and compiled

00:08:05,759 --> 00:08:11,840
uh static assert without an

00:08:08,879 --> 00:08:13,199
explanation for the assert so without a

00:08:11,840 --> 00:08:16,240
second argument of the string

00:08:13,199 --> 00:08:18,400
is also led in c plus plus 17. so if you

00:08:16,240 --> 00:08:20,720
are lazy and you don't want to write

00:08:18,400 --> 00:08:22,800
an explanation for your assets since the

00:08:20,720 --> 00:08:27,840
c plus plus 17 you can just

00:08:22,800 --> 00:08:27,840
omit it in the static assert

00:08:28,160 --> 00:08:32,399
now if we want to do it a little bit

00:08:30,960 --> 00:08:34,560
more modern

00:08:32,399 --> 00:08:35,760
we can just say okay we are creating a

00:08:34,560 --> 00:08:37,440
template function

00:08:35,760 --> 00:08:39,680
but we are going to restrict we don't

00:08:37,440 --> 00:08:42,159
want it to work for all keys

00:08:39,680 --> 00:08:43,120
we just want to want it to work on

00:08:42,159 --> 00:08:46,000
specific

00:08:43,120 --> 00:08:47,200
set of teams we can just say it's a

00:08:46,000 --> 00:08:50,320
template function

00:08:47,200 --> 00:08:53,600
templated on t and we require that t

00:08:50,320 --> 00:08:55,200
is derived from sdd string and this is

00:08:53,600 --> 00:08:58,640
the syntax that is available

00:08:55,200 --> 00:09:00,959
since concepts is since it was plus 20.

00:08:58,640 --> 00:09:02,560
if you want to provide several functions

00:09:00,959 --> 00:09:04,880
one function that would

00:09:02,560 --> 00:09:07,120
uh works on types derived from string

00:09:04,880 --> 00:09:08,160
and another function that works on other

00:09:07,120 --> 00:09:11,760
types

00:09:08,160 --> 00:09:14,640
you can use this trick to restrict

00:09:11,760 --> 00:09:15,839
one of those functions by default if the

00:09:14,640 --> 00:09:18,320
restriction

00:09:15,839 --> 00:09:19,360
is fulfilled for a certain type that

00:09:18,320 --> 00:09:21,120
function will be called

00:09:19,360 --> 00:09:23,360
otherwise it will fall back to the

00:09:21,120 --> 00:09:26,800
second function the generic version

00:09:23,360 --> 00:09:26,800
without any requires clause

00:09:28,000 --> 00:09:33,040
so this is concepts and constraints in c

00:09:31,040 --> 00:09:35,200
plus plus 20.

00:09:33,040 --> 00:09:36,320
als if you don't like the required

00:09:35,200 --> 00:09:38,240
clause you can

00:09:36,320 --> 00:09:40,160
always use the shortest syntax instead

00:09:38,240 --> 00:09:41,839
of saying template type name t

00:09:40,160 --> 00:09:43,200
and then requires you can just say

00:09:41,839 --> 00:09:46,320
template

00:09:43,200 --> 00:09:49,360
derive from string t and then

00:09:46,320 --> 00:09:52,240
implement your function and if this is

00:09:49,360 --> 00:09:53,440
also too much to to type for you you can

00:09:52,240 --> 00:09:57,040
just

00:09:53,440 --> 00:09:58,560
say uh stream to string not even

00:09:57,040 --> 00:10:00,160
it doesn't even look like a template

00:09:58,560 --> 00:10:02,720
function even if it is

00:10:00,160 --> 00:10:03,760
and then you can just say derive from

00:10:02,720 --> 00:10:06,079
string

00:10:03,760 --> 00:10:08,640
auto so automatically deduce the type

00:10:06,079 --> 00:10:11,920
that needs to be derived from sdd stream

00:10:08,640 --> 00:10:14,320
and you have the value of that type

00:10:11,920 --> 00:10:16,000
so this is the most third syntax for

00:10:14,320 --> 00:10:19,120
defining restrictions on

00:10:16,000 --> 00:10:22,720
generic or template functions

00:10:19,120 --> 00:10:23,760
so another example of a couple of new

00:10:22,720 --> 00:10:27,680
things that we have

00:10:23,760 --> 00:10:31,839
in uh modern versions of simplest plus

00:10:27,680 --> 00:10:33,760
is the is this one where we have an if

00:10:31,839 --> 00:10:36,560
we are locking a mutex

00:10:33,760 --> 00:10:37,920
and we are checking whether a certain

00:10:36,560 --> 00:10:41,440
map contains

00:10:37,920 --> 00:10:41,440
a key kde

00:10:41,839 --> 00:10:46,160
also we can do something like this we

00:10:43,920 --> 00:10:49,680
can write arrangement for loop again

00:10:46,160 --> 00:10:51,680
lock mutex and then iterate through all

00:10:49,680 --> 00:10:53,519
the items in a map

00:10:51,680 --> 00:10:55,040
since we all know that maps are

00:10:53,519 --> 00:10:57,120
collections of pairs

00:10:55,040 --> 00:10:59,680
this is going to iterate over all the

00:10:57,120 --> 00:11:02,399
key values in a pair

00:10:59,680 --> 00:11:03,120
so what new features do we have here the

00:11:02,399 --> 00:11:06,720
first one

00:11:03,120 --> 00:11:09,839
is that we can add initializers

00:11:06,720 --> 00:11:13,519
to if for and switch

00:11:09,839 --> 00:11:14,240
so the old four from dark edges from the

00:11:13,519 --> 00:11:17,680
sea

00:11:14,240 --> 00:11:18,480
uh it already had uh a couple of clauses

00:11:17,680 --> 00:11:20,079
inside so

00:11:18,480 --> 00:11:21,760
the initializer the condition and the

00:11:20,079 --> 00:11:24,640
increment and

00:11:21,760 --> 00:11:26,240
nowadays in simples 20 we have the same

00:11:24,640 --> 00:11:28,600
initializer for

00:11:26,240 --> 00:11:30,399
the range-based for loop and see in

00:11:28,600 --> 00:11:33,680
simpleplus17 we have

00:11:30,399 --> 00:11:36,240
the initializers for if and for switches

00:11:33,680 --> 00:11:37,279
so if you want to know the scope of a

00:11:36,240 --> 00:11:40,399
variable

00:11:37,279 --> 00:11:43,120
you don't need to declare it in the

00:11:40,399 --> 00:11:46,480
autoscope and then just put

00:11:43,120 --> 00:11:46,959
put it inside of a named block you can

00:11:46,480 --> 00:11:51,279
just

00:11:46,959 --> 00:11:54,399
put inside of the if or four or switch

00:11:51,279 --> 00:11:56,160
the second thing is that

00:11:54,399 --> 00:11:57,600
scope locks we didn't really have

00:11:56,160 --> 00:11:59,040
scotland before

00:11:57,600 --> 00:12:01,440
we had something that that was called

00:11:59,040 --> 00:12:04,160
the lock guard and it was able to lock

00:12:01,440 --> 00:12:06,160
a single mutex that you passed to it

00:12:04,160 --> 00:12:08,880
scope lock is a little bit more powerful

00:12:06,160 --> 00:12:11,360
you can lock several mutexes at once and

00:12:08,880 --> 00:12:14,560
it uses nice algorithms to

00:12:11,360 --> 00:12:17,839
avoid deadlocks etc so if you need

00:12:14,560 --> 00:12:18,480
to lock several mutexes which arguably

00:12:17,839 --> 00:12:21,279
you shouldn't

00:12:18,480 --> 00:12:22,240
ever have to do you can use scope lock

00:12:21,279 --> 00:12:24,720
without

00:12:22,240 --> 00:12:25,440
any consideration of what locks first

00:12:24,720 --> 00:12:28,480
like what

00:12:25,440 --> 00:12:28,480
second etc

00:12:29,120 --> 00:12:32,320
the second thing that is shown in in

00:12:31,200 --> 00:12:34,160
this example

00:12:32,320 --> 00:12:36,000
is something that is actually not shown

00:12:34,160 --> 00:12:39,519
because it's missing

00:12:36,000 --> 00:12:41,040
uh lock guard and scope lock are generic

00:12:39,519 --> 00:12:44,480
template classes

00:12:41,040 --> 00:12:47,440
so they need to have template arguments

00:12:44,480 --> 00:12:48,560
in simple spots before uh simple 17 we

00:12:47,440 --> 00:12:50,959
had

00:12:48,560 --> 00:12:51,760
an automatic type deduction for

00:12:50,959 --> 00:12:55,760
functions

00:12:51,760 --> 00:12:57,920
so if you call sdd make pair you would

00:12:55,760 --> 00:12:59,120
the compiler would automatically deduce

00:12:57,920 --> 00:13:02,160
the

00:12:59,120 --> 00:13:03,040
generic arguments so the template

00:13:02,160 --> 00:13:05,600
arguments for

00:13:03,040 --> 00:13:06,480
that function but it never worked for

00:13:05,600 --> 00:13:09,760
classes

00:13:06,480 --> 00:13:13,680
in this case since it was plus 17

00:13:09,760 --> 00:13:16,880
uh the compiler can deduce that since

00:13:13,680 --> 00:13:19,440
nmap mutex is an sdd mutex that

00:13:16,880 --> 00:13:20,000
this scope lock is actually a scope log

00:13:19,440 --> 00:13:24,160
of

00:13:20,000 --> 00:13:26,160
sdd mutex and this works for

00:13:24,160 --> 00:13:27,200
most of the generic classes that you see

00:13:26,160 --> 00:13:29,279
in

00:13:27,200 --> 00:13:30,320
in the standard library and it can work

00:13:29,279 --> 00:13:32,720
obviously on

00:13:30,320 --> 00:13:34,800
your types that you define so you don't

00:13:32,720 --> 00:13:37,519
really you don't need to write anymore

00:13:34,800 --> 00:13:38,160
as the vector of eat when you create a

00:13:37,519 --> 00:13:40,560
vector

00:13:38,160 --> 00:13:41,839
you can just say that the vector x's of

00:13:40,560 --> 00:13:44,880
one through three

00:13:41,839 --> 00:13:45,839
again this is still uh the types are

00:13:44,880 --> 00:13:48,800
still

00:13:45,839 --> 00:13:50,959
not dynamic this is not python it's just

00:13:48,800 --> 00:13:52,720
that the compiler can deduce

00:13:50,959 --> 00:13:54,240
from the one two three that this is

00:13:52,720 --> 00:13:56,480
going to be a vector of

00:13:54,240 --> 00:13:56,480
int

00:13:58,079 --> 00:14:01,279
in the cases where you want to implement

00:13:59,839 --> 00:14:03,199
your own types

00:14:01,279 --> 00:14:04,480
the way that the compiler produces the

00:14:03,199 --> 00:14:07,120
types for

00:14:04,480 --> 00:14:08,000
for the class is either through a

00:14:07,120 --> 00:14:09,519
constructor

00:14:08,000 --> 00:14:11,360
so if you have a constructor that

00:14:09,519 --> 00:14:14,160
accepts a type t

00:14:11,360 --> 00:14:15,040
and your class is parameterized on the

00:14:14,160 --> 00:14:16,720
type t

00:14:15,040 --> 00:14:18,639
it will automatically deduce from the

00:14:16,720 --> 00:14:19,279
constructor if you called it with an int

00:14:18,639 --> 00:14:22,320
it's going

00:14:19,279 --> 00:14:25,279
t is going to be in it but in some cases

00:14:22,320 --> 00:14:25,680
you would like to help the compiler to

00:14:25,279 --> 00:14:28,320
do

00:14:25,680 --> 00:14:30,240
something a little bit more advanced so

00:14:28,320 --> 00:14:31,839
if you don't have the constructors

00:14:30,240 --> 00:14:33,920
from which the compiler can deduce

00:14:31,839 --> 00:14:36,160
something you can write something that

00:14:33,920 --> 00:14:39,199
is called the deduction guide

00:14:36,160 --> 00:14:41,680
in this case we have defined some

00:14:39,199 --> 00:14:44,320
type that is called my type and which we

00:14:41,680 --> 00:14:47,519
are trying to tell the compiler if

00:14:44,320 --> 00:14:50,880
somebody calls a constructor with an

00:14:47,519 --> 00:14:53,680
integer and a float then what

00:14:50,880 --> 00:14:55,440
it what it should deduce it should

00:14:53,680 --> 00:14:58,320
deduce my type of

00:14:55,440 --> 00:14:58,959
vector of integer and upload and you can

00:14:58,320 --> 00:15:01,360
write

00:14:58,959 --> 00:15:02,800
arbitrary deduction guidelines for for

00:15:01,360 --> 00:15:05,199
your types

00:15:02,800 --> 00:15:06,399
sometimes the constructors are nicer

00:15:05,199 --> 00:15:09,600
sometimes

00:15:06,399 --> 00:15:10,480
uh the deduction guidelines will be

00:15:09,600 --> 00:15:13,839
prettier and

00:15:10,480 --> 00:15:13,839
they're usually more powerful

00:15:14,720 --> 00:15:18,880
and another thing that that was uh in

00:15:17,760 --> 00:15:22,079
the example

00:15:18,880 --> 00:15:25,199
that is from zippos 17 is the

00:15:22,079 --> 00:15:26,000
aforementioned structure bindings so we

00:15:25,199 --> 00:15:28,639
have a map

00:15:26,000 --> 00:15:30,320
map is a collection of pair key value

00:15:28,639 --> 00:15:34,240
pairs so sd pair

00:15:30,320 --> 00:15:37,040
of something something and

00:15:34,240 --> 00:15:38,959
usually before c plus plus 17 we would

00:15:37,040 --> 00:15:40,240
iterate through a map and then access

00:15:38,959 --> 00:15:42,480
the keys and values as

00:15:40,240 --> 00:15:43,680
dot first and dot second the first and

00:15:42,480 --> 00:15:46,160
dot second don't

00:15:43,680 --> 00:15:47,839
really convey any meaning as the names

00:15:46,160 --> 00:15:50,800
are really generic

00:15:47,839 --> 00:15:51,920
so if you want to assign the names to

00:15:50,800 --> 00:15:54,160
parts of a tuple

00:15:51,920 --> 00:15:56,079
or parts of a pair you can just use

00:15:54,160 --> 00:16:00,160
structure bindings with

00:15:56,079 --> 00:16:03,040
square braces and say key and value

00:16:00,160 --> 00:16:05,279
iterate take all the the pairs from the

00:16:03,040 --> 00:16:09,360
map and assign

00:16:05,279 --> 00:16:12,560
dot first to key and dot second to value

00:16:09,360 --> 00:16:15,839
now there is something a little bit

00:16:12,560 --> 00:16:19,040
annoying about the structure bindings uh

00:16:15,839 --> 00:16:19,680
if we try to capture the key and value

00:16:19,040 --> 00:16:22,639
by

00:16:19,680 --> 00:16:25,440
by value so not a constraint or anything

00:16:22,639 --> 00:16:28,079
else we just wrote auto key and value

00:16:25,440 --> 00:16:28,880
from from the map we would expect key

00:16:28,079 --> 00:16:32,639
and value to be

00:16:28,880 --> 00:16:34,839
proper values so to have an instance of

00:16:32,639 --> 00:16:36,160
let's say a string an instance of an

00:16:34,839 --> 00:16:39,440
integer

00:16:36,160 --> 00:16:42,480
internally if this is a little bit

00:16:39,440 --> 00:16:44,800
more complex so the pair

00:16:42,480 --> 00:16:46,000
from the map will be stored inside of a

00:16:44,800 --> 00:16:49,040
proper value with

00:16:46,000 --> 00:16:51,279
video type std pair of something

00:16:49,040 --> 00:16:53,680
and key and value from the structured

00:16:51,279 --> 00:16:57,839
binding are going actually to be

00:16:53,680 --> 00:16:59,920
a reference to uh to elements inside of

00:16:57,839 --> 00:17:02,880
the pair

00:16:59,920 --> 00:17:05,120
even if the compiler is going to try its

00:17:02,880 --> 00:17:05,439
hardest to lie to you and to tell you

00:17:05,120 --> 00:17:08,000
that

00:17:05,439 --> 00:17:08,480
it's a proper value even if you try to

00:17:08,000 --> 00:17:10,480
use

00:17:08,480 --> 00:17:12,400
decal type of key and decal type of

00:17:10,480 --> 00:17:14,959
value which will return

00:17:12,400 --> 00:17:15,760
that there are normal values that's not

00:17:14,959 --> 00:17:17,839
true they're

00:17:15,760 --> 00:17:20,240
actually internally they're going to be

00:17:17,839 --> 00:17:21,360
references to the elements inside of the

00:17:20,240 --> 00:17:23,839
std pair

00:17:21,360 --> 00:17:24,559
so they're not going to be proper values

00:17:23,839 --> 00:17:28,319
this has

00:17:24,559 --> 00:17:30,799
some unfortunate side effects that

00:17:28,319 --> 00:17:31,600
when you want to use more semantics on

00:17:30,799 --> 00:17:34,240
these things

00:17:31,600 --> 00:17:35,919
you can't really say return value and

00:17:34,240 --> 00:17:36,320
expect the compiler to optimize it for

00:17:35,919 --> 00:17:39,520
you

00:17:36,320 --> 00:17:42,320
you will have to do return std move of

00:17:39,520 --> 00:17:42,320
value etc

00:17:43,520 --> 00:17:47,440
and the last section i have two minutes

00:17:46,480 --> 00:17:50,559
before the

00:17:47,440 --> 00:17:54,000
the questions time this was really fast

00:17:50,559 --> 00:17:57,679
uh there are also some new things with

00:17:54,000 --> 00:17:59,760
uh standard audience so for example the

00:17:57,679 --> 00:18:02,000
algorithm has to be reduced which kind

00:17:59,760 --> 00:18:04,480
of behaves like accumulate but

00:18:02,000 --> 00:18:06,400
a little bit more generic now if you

00:18:04,480 --> 00:18:08,960
want to parallelize it

00:18:06,400 --> 00:18:10,320
you don't need to deal with threads to

00:18:08,960 --> 00:18:11,760
fire up threads or anything else

00:18:10,320 --> 00:18:14,480
synchronization

00:18:11,760 --> 00:18:15,360
etc you can just say has to be reduced i

00:18:14,480 --> 00:18:17,840
want it to be

00:18:15,360 --> 00:18:19,280
executed in parallel so sdp execution

00:18:17,840 --> 00:18:21,679
policy parallel

00:18:19,280 --> 00:18:22,960
and then just pass the same thing that

00:18:21,679 --> 00:18:26,240
you passed to

00:18:22,960 --> 00:18:29,120
normal std reduce now if you hate

00:18:26,240 --> 00:18:31,039
having to write dot begin dot and

00:18:29,120 --> 00:18:34,720
everywhere in your code

00:18:31,039 --> 00:18:38,240
you can use the second version

00:18:34,720 --> 00:18:42,000
if the slider switches uh

00:18:38,240 --> 00:18:45,520
you can sorry i have one thing uh

00:18:42,000 --> 00:18:48,960
before so again binary search

00:18:45,520 --> 00:18:51,360
uh the same thing as we used to have

00:18:48,960 --> 00:18:54,160
this binary search can be optimized

00:18:51,360 --> 00:18:56,640
really well if you have context for data

00:18:54,160 --> 00:18:57,440
so most of the algorithms in c plus plus

00:18:56,640 --> 00:19:00,720
time t

00:18:57,440 --> 00:19:02,960
have the contacts per added to them so

00:19:00,720 --> 00:19:04,880
if you have data that is known at

00:19:02,960 --> 00:19:08,160
compile time nothing will end up

00:19:04,880 --> 00:19:10,080
in uh executed dynamically

00:19:08,160 --> 00:19:11,360
the compiler will execute binary

00:19:10,080 --> 00:19:13,440
searches sorts

00:19:11,360 --> 00:19:16,240
accumulates and everything else during

00:19:13,440 --> 00:19:16,240
the compile time

00:19:18,000 --> 00:19:23,679
and to to get back to dot begin dot and

00:19:21,360 --> 00:19:25,120
if you hate writing those then you

00:19:23,679 --> 00:19:28,320
should just

00:19:25,120 --> 00:19:30,080
use sdd ranges namespace and then

00:19:28,320 --> 00:19:31,600
instead of having to write pairs of

00:19:30,080 --> 00:19:34,080
iterators you can just write the

00:19:31,600 --> 00:19:38,400
collection itself so binary search i'm

00:19:34,080 --> 00:19:41,919
trying to search 42 in the array of axes

00:19:38,400 --> 00:19:41,919
this is also c plus 20.

00:19:42,080 --> 00:19:45,360
and the last thing a little bit related

00:19:44,720 --> 00:19:47,919
to

00:19:45,360 --> 00:19:48,400
reduce and accumulate is something

00:19:47,919 --> 00:19:51,840
called

00:19:48,400 --> 00:19:53,120
fold expressions if you don't have a

00:19:51,840 --> 00:19:56,240
collection of values

00:19:53,120 --> 00:19:59,600
but you have a periodic template where

00:19:56,240 --> 00:20:03,360
you have a function that accepts

00:19:59,600 --> 00:20:06,159
numerous an arbitrary number of values

00:20:03,360 --> 00:20:07,120
you can use fold expressions to do

00:20:06,159 --> 00:20:10,640
accumulation

00:20:07,120 --> 00:20:11,520
or do reduce of all the values so you

00:20:10,640 --> 00:20:14,400
can write

00:20:11,520 --> 00:20:15,120
zero plus dotted dot plus values and

00:20:14,400 --> 00:20:18,400
when you call

00:20:15,120 --> 00:20:20,320
sum of one two three it will add zero

00:20:18,400 --> 00:20:23,600
plus one plus plus two plus

00:20:20,320 --> 00:20:26,559
three both expressions

00:20:23,600 --> 00:20:27,919
come in uh different forms so depending

00:20:26,559 --> 00:20:29,840
on whether you want to go

00:20:27,919 --> 00:20:33,679
from the left to right with your

00:20:29,840 --> 00:20:37,120
operator or from the right to left

00:20:33,679 --> 00:20:40,320
and they can be used for quite uh

00:20:37,120 --> 00:20:41,280
quite complex things like if you want to

00:20:40,320 --> 00:20:43,679
invoke

00:20:41,280 --> 00:20:45,440
a certain function on each of the values

00:20:43,679 --> 00:20:48,559
that you pass

00:20:45,440 --> 00:20:50,240
again this is not a collection just uh

00:20:48,559 --> 00:20:53,440
if you want to invoke it on all the

00:20:50,240 --> 00:20:56,640
arguments that the user passed to your

00:20:53,440 --> 00:20:59,360
uh function uh you can use

00:20:56,640 --> 00:21:00,480
the full expressions via the comma

00:20:59,360 --> 00:21:04,159
operator and say

00:21:00,480 --> 00:21:06,240
sdd invoke f on values and it will just

00:21:04,159 --> 00:21:07,360
unwrite into as did invoke f on the

00:21:06,240 --> 00:21:09,440
first value f

00:21:07,360 --> 00:21:12,159
on the second value f on the third value

00:21:09,440 --> 00:21:12,159
and so on

00:21:13,600 --> 00:21:17,679
another new thing in cpus 17 is the std

00:21:16,559 --> 00:21:20,880
invoke

00:21:17,679 --> 00:21:21,919
and this is a function that allows you

00:21:20,880 --> 00:21:24,559
to call not

00:21:21,919 --> 00:21:25,760
only lambdas ordinary functions on

00:21:24,559 --> 00:21:28,880
specific values

00:21:25,760 --> 00:21:30,640
but also to call pointers to member

00:21:28,880 --> 00:21:32,159
variables and pointers to member

00:21:30,640 --> 00:21:34,400
functions as

00:21:32,159 --> 00:21:36,159
if they were normal functions so you

00:21:34,400 --> 00:21:38,400
would be able to write something like

00:21:36,159 --> 00:21:40,640
for each call delete later from queue

00:21:38,400 --> 00:21:44,400
object on window 1 windows 2

00:21:40,640 --> 00:21:46,480
and windows 3.

00:21:44,400 --> 00:21:49,440
and the last thing that i want to

00:21:46,480 --> 00:21:52,640
mention because my time has run out

00:21:49,440 --> 00:21:55,360
in zippers plus 20 we also got a new

00:21:52,640 --> 00:21:55,840
library for string formatting which is

00:21:55,360 --> 00:21:58,960
meant

00:21:55,840 --> 00:22:01,760
to obsolete the year streams most of

00:21:58,960 --> 00:22:03,760
uh for the most part and we can write

00:22:01,760 --> 00:22:04,640
something like this to generate a really

00:22:03,760 --> 00:22:09,600
nice banner

00:22:04,640 --> 00:22:13,200
welcome to academy 22 2020 sorry

00:22:09,600 --> 00:22:14,720
and i think that's it if there are any

00:22:13,200 --> 00:22:16,480
questions

00:22:14,720 --> 00:22:18,960
thank you so much evan that was super

00:22:16,480 --> 00:22:21,520
interesting and a very beautiful banner

00:22:18,960 --> 00:22:23,600
uh we have three questions and i think

00:22:21,520 --> 00:22:26,400
we have time for the first one

00:22:23,600 --> 00:22:29,200
which is template functions or function

00:22:26,400 --> 00:22:31,120
template what's your stance

00:22:29,200 --> 00:22:32,240
uh the official name is a template

00:22:31,120 --> 00:22:35,600
function

00:22:32,240 --> 00:22:38,559
so sorry function template

00:22:35,600 --> 00:22:39,120
it's usual that we we call it template

00:22:38,559 --> 00:22:40,720
function

00:22:39,120 --> 00:22:42,240
but it's a function template it's a

00:22:40,720 --> 00:22:44,080
class template because they're not

00:22:42,240 --> 00:22:47,120
functions they're templates

00:22:44,080 --> 00:22:48,320
but in normal communication

00:22:47,120 --> 00:22:51,039
these two terms are quite

00:22:48,320 --> 00:22:51,039
interchangeable

00:22:51,360 --> 00:22:54,480
cool and then the last one uh do you

00:22:54,080 --> 00:22:57,200
have

00:22:54,480 --> 00:22:58,159
insight why while didn't gain an

00:22:57,200 --> 00:23:02,320
initializer

00:22:58,159 --> 00:23:04,799
seems inconsistent uh so

00:23:02,320 --> 00:23:06,080
that was my first impression as well but

00:23:04,799 --> 00:23:09,120
while

00:23:06,080 --> 00:23:12,400
the the initializer is the old c4

00:23:09,120 --> 00:23:14,480
just without the increment part so

00:23:12,400 --> 00:23:16,080
while with initializer would be the same

00:23:14,480 --> 00:23:19,760
as just writing four

00:23:16,080 --> 00:23:21,919
with the first two clauses filled in

00:23:19,760 --> 00:23:24,320
and then semicolon with an empty third

00:23:21,919 --> 00:23:24,320
clause

00:23:26,000 --> 00:23:30,559
so it is inconsistent but it's not

00:23:28,080 --> 00:23:30,559
useful

00:23:31,039 --> 00:23:36,480
all right thank you so much everyone

00:23:34,240 --> 00:23:38,080
else who had more questions please reach

00:23:36,480 --> 00:23:42,640
out to ivan on the chat

00:23:38,080 --> 00:23:42,640
and we will be back in five minutes with

00:23:48,840 --> 00:23:51,840
maven

00:24:06,810 --> 00:24:10,670
[Music]

00:24:26,600 --> 00:24:30,400
[Music]

00:28:56,559 --> 00:29:00,880
alright and we are back for the second

00:28:59,520 --> 00:29:03,440
session of the day

00:29:00,880 --> 00:29:05,679
uh by meghan who is gonna talk about

00:29:03,440 --> 00:29:08,640
rust from a kde perspective

00:29:05,679 --> 00:29:08,640
over to you women

00:29:09,279 --> 00:29:13,360
all right good morning everyone so i'll

00:29:11,760 --> 00:29:15,840
talk i'd like to talk to you about

00:29:13,360 --> 00:29:18,880
what's from a kde perspective why i

00:29:15,840 --> 00:29:21,600
as a kd developer i might want to

00:29:18,880 --> 00:29:22,159
contribute with rust and i'm gonna make

00:29:21,600 --> 00:29:25,600
my

00:29:22,159 --> 00:29:28,880
my point it's it's not it's just my

00:29:25,600 --> 00:29:32,000
own views over or

00:29:28,880 --> 00:29:32,799
obviously so i just would like to start

00:29:32,000 --> 00:29:35,600
with a poll

00:29:32,799 --> 00:29:36,399
just to make myself a better idea of who

00:29:35,600 --> 00:29:38,240
is

00:29:36,399 --> 00:29:39,679
how people are familiar with the rush

00:29:38,240 --> 00:29:42,480
programming language

00:29:39,679 --> 00:29:43,039
so uh i'd like to ask you whether or not

00:29:42,480 --> 00:29:46,080
you have

00:29:43,039 --> 00:29:46,399
already written any rust so if you i'll

00:29:46,080 --> 00:29:50,240
just

00:29:46,399 --> 00:29:53,600
look at it enough in a while anyway

00:29:50,240 --> 00:29:54,320
moving on uh my plan is simple and try

00:29:53,600 --> 00:29:56,320
to

00:29:54,320 --> 00:29:57,760
tell why rust in the first place is an

00:29:56,320 --> 00:30:01,279
interesting programming language

00:29:57,760 --> 00:30:05,039
and why it's why it i appeared

00:30:01,279 --> 00:30:06,720
what needed fulfilled

00:30:05,039 --> 00:30:09,279
where it could be a good match for kd

00:30:06,720 --> 00:30:12,399
what makes it align with our values and

00:30:09,279 --> 00:30:13,440
and uh and particularly of our

00:30:12,399 --> 00:30:16,000
communities

00:30:13,440 --> 00:30:18,720
and how it could be maybe possible in

00:30:16,000 --> 00:30:24,960
the future or in some experimental

00:30:18,720 --> 00:30:27,520
way to use it within the kd software

00:30:24,960 --> 00:30:29,120
so rust is a system programming language

00:30:27,520 --> 00:30:31,440
in the sense that you can write

00:30:29,120 --> 00:30:32,399
operating systems and not just system

00:30:31,440 --> 00:30:35,440
applications

00:30:32,399 --> 00:30:36,240
compared to other languages that use the

00:30:35,440 --> 00:30:38,799
same term

00:30:36,240 --> 00:30:39,679
so it's kind of uh shady but it's it's

00:30:38,799 --> 00:30:43,039
kind in

00:30:39,679 --> 00:30:45,760
the realm of chc plus plus uh

00:30:43,039 --> 00:30:46,799
programming language whether rather than

00:30:45,760 --> 00:30:49,840
java or

00:30:46,799 --> 00:30:53,039
go for instance uh

00:30:49,840 --> 00:30:55,200
it was originally created by a mozillian

00:30:53,039 --> 00:30:56,960
by that i mean a mozilla employee a

00:30:55,200 --> 00:30:57,760
brazilian corporation employee on his

00:30:56,960 --> 00:31:02,399
own

00:30:57,760 --> 00:31:02,399
on time and then after a while his uh

00:31:02,840 --> 00:31:08,480
his

00:31:04,320 --> 00:31:11,760
his his project gathered some more

00:31:08,480 --> 00:31:15,039
uh momentum from

00:31:11,760 --> 00:31:17,760
his colleagues in his company and

00:31:15,039 --> 00:31:19,440
mozilla decided to invest some time into

00:31:17,760 --> 00:31:21,200
the project to make it a full-fledged

00:31:19,440 --> 00:31:24,080
programming language

00:31:21,200 --> 00:31:25,840
and so it was released the first release

00:31:24,080 --> 00:31:28,880
was in 2015

00:31:25,840 --> 00:31:32,159
but more than five years ago now the

00:31:28,880 --> 00:31:33,159
fifth birthday just went through and the

00:31:32,159 --> 00:31:36,320
current version is

00:31:33,159 --> 00:31:37,600
1.46 there is a new release every six

00:31:36,320 --> 00:31:40,799
weeks

00:31:37,600 --> 00:31:44,880
um so just to

00:31:40,799 --> 00:31:46,720
well about 65 of people have already

00:31:44,880 --> 00:31:48,880
that responding to the poll i've said

00:31:46,720 --> 00:31:51,440
that i've used rust

00:31:48,880 --> 00:31:52,480
so that's quite uh impressive i would i

00:31:51,440 --> 00:31:56,720
didn't uh

00:31:52,480 --> 00:32:00,000
expect it that much and it's right uh

00:31:56,720 --> 00:32:02,399
so i'm just i'll try to skip faster

00:32:00,000 --> 00:32:03,200
on my introduction about the rest about

00:32:02,399 --> 00:32:05,600
the language

00:32:03,200 --> 00:32:06,880
anyway so you know that it's ross is a

00:32:05,600 --> 00:32:10,000
front-end to an lvm

00:32:06,880 --> 00:32:13,120
it uses llvm to optimize his code

00:32:10,000 --> 00:32:14,000
it's likely statically tight it has a

00:32:13,120 --> 00:32:17,279
member it

00:32:14,000 --> 00:32:21,120
has the memory theft attributes

00:32:17,279 --> 00:32:22,480
using what what one could call a static

00:32:21,120 --> 00:32:25,120
garbage collector

00:32:22,480 --> 00:32:28,399
uh and it's mostly imperative with some

00:32:25,120 --> 00:32:28,399
elements for functional pipe

00:32:28,960 --> 00:32:32,799
so in the lack of surplus plus for

00:32:31,519 --> 00:32:36,399
instance

00:32:32,799 --> 00:32:39,440
um so its features are plenty so

00:32:36,399 --> 00:32:40,720
maybe skip a few but the most important

00:32:39,440 --> 00:32:43,600
ones would be uh

00:32:40,720 --> 00:32:44,480
that prevents data race uh prevent that

00:32:43,600 --> 00:32:48,000
arises and

00:32:44,480 --> 00:32:48,720
memory thanks to its uh static garbage

00:32:48,000 --> 00:32:51,120
collector

00:32:48,720 --> 00:32:51,760
and so they have coined this uh promo

00:32:51,120 --> 00:32:54,720
term that

00:32:51,760 --> 00:32:56,720
you can use these kind of features to

00:32:54,720 --> 00:33:00,159
achieve fearless concurrency

00:32:56,720 --> 00:33:02,240
it was one of the appealing uh

00:33:00,159 --> 00:33:03,679
appealing features of the language for

00:33:02,240 --> 00:33:07,200
mozilla like

00:33:03,679 --> 00:33:10,320
originally it has a very small runtime

00:33:07,200 --> 00:33:13,440
it just adds some bug checking it has

00:33:10,320 --> 00:33:16,159
it has some uh kind of object

00:33:13,440 --> 00:33:19,440
orientation but without inheritance

00:33:16,159 --> 00:33:22,960
so it's mostly only traits and uh so

00:33:19,440 --> 00:33:25,640
kind of equivalent to abstract classes

00:33:22,960 --> 00:33:27,519
and it uses it as generosity and uses

00:33:25,640 --> 00:33:29,600
monomorphization to

00:33:27,519 --> 00:33:30,720
implement its generosity so you don't

00:33:29,600 --> 00:33:33,760
have to pay

00:33:30,720 --> 00:33:36,840
for it or very often just

00:33:33,760 --> 00:33:38,080
well only in the size of your code

00:33:36,840 --> 00:33:41,120
generated

00:33:38,080 --> 00:33:41,760
and the memory safety of the language

00:33:41,120 --> 00:33:44,480
comes from

00:33:41,760 --> 00:33:45,519
a set of rules that the compiler imposes

00:33:44,480 --> 00:33:48,640
on the

00:33:45,519 --> 00:33:52,159
writer of the code so in this rule

00:33:48,640 --> 00:33:54,640
those rules are some summed up at the

00:33:52,159 --> 00:33:58,559
ownerships rules

00:33:54,640 --> 00:34:02,480
each type t has in fact four other types

00:33:58,559 --> 00:34:04,840
it can be uh imitable by default

00:34:02,480 --> 00:34:06,559
or it can be a reference to an

00:34:04,840 --> 00:34:10,320
imaginable

00:34:06,559 --> 00:34:12,720
variable ampersand t or it can be

00:34:10,320 --> 00:34:13,760
mutable and and then it's kind of a

00:34:12,720 --> 00:34:17,200
different set of

00:34:13,760 --> 00:34:20,480
of of

00:34:17,200 --> 00:34:23,599
variable of type then and it allows

00:34:20,480 --> 00:34:26,560
the compiler to enforce a simple rule

00:34:23,599 --> 00:34:26,879
that a variable can be either multiple

00:34:26,560 --> 00:34:31,119
in

00:34:26,879 --> 00:34:34,480
here either mutable or have

00:34:31,119 --> 00:34:37,919
any number of

00:34:34,480 --> 00:34:40,000
immutable reference here

00:34:37,919 --> 00:34:40,000
and

00:34:42,389 --> 00:34:48,079
[Music]

00:34:44,879 --> 00:34:50,079
yeah and thanks to this the compiler can

00:34:48,079 --> 00:34:53,119
reduce the precise lifetime of the

00:34:50,079 --> 00:34:56,320
variable you can check that when

00:34:53,119 --> 00:35:00,240
the scopes scopes or threads

00:34:56,320 --> 00:35:02,320
go out of scope you can free memory

00:35:00,240 --> 00:35:03,599
or for threads specifically you have

00:35:02,320 --> 00:35:06,960
more mechanism to

00:35:03,599 --> 00:35:08,480
count to add some reference content or

00:35:06,960 --> 00:35:11,200
to have a proper shared pointer

00:35:08,480 --> 00:35:14,560
basically but

00:35:11,200 --> 00:35:16,560
the the the

00:35:14,560 --> 00:35:17,920
the compiler will enforce this kind of

00:35:16,560 --> 00:35:21,359
rules to

00:35:17,920 --> 00:35:24,480
translate the

00:35:21,359 --> 00:35:26,560
the the transists

00:35:24,480 --> 00:35:28,960
working or to have the lifetime

00:35:26,560 --> 00:35:31,119
guaranteed to be

00:35:28,960 --> 00:35:32,000
so that variables don't outlive the

00:35:31,119 --> 00:35:35,520
references

00:35:32,000 --> 00:35:36,400
there they so the references don't

00:35:35,520 --> 00:35:40,720
outlive

00:35:36,400 --> 00:35:40,720
the variables they are referencing too

00:35:40,960 --> 00:35:47,520
anyway so that's

00:35:44,400 --> 00:35:48,320
another very short very uh fast overview

00:35:47,520 --> 00:35:51,520
of the language

00:35:48,320 --> 00:35:52,400
and i'd like to focus on more more about

00:35:51,520 --> 00:35:56,000
my arguments

00:35:52,400 --> 00:35:57,440
then so it furthermore than the language

00:35:56,000 --> 00:36:00,560
it had a lot of features

00:35:57,440 --> 00:36:03,839
so a very modern enriched tooling

00:36:00,560 --> 00:36:07,200
ecosystem of mainly cargo which is the

00:36:03,839 --> 00:36:09,440
kgss blown tool of the west community

00:36:07,200 --> 00:36:09,440
but

00:36:10,839 --> 00:36:14,480
more

00:36:12,079 --> 00:36:16,560
but encompasses a lot more features it

00:36:14,480 --> 00:36:19,040
has a default formatter which is

00:36:16,560 --> 00:36:20,160
very nice for the community to have a

00:36:19,040 --> 00:36:23,359
standard way of

00:36:20,160 --> 00:36:25,440
writing of styling ras code it has a

00:36:23,359 --> 00:36:29,359
rust analyzer which is the current

00:36:25,440 --> 00:36:32,320
most popular

00:36:29,359 --> 00:36:33,200
lsp language server protocol which which

00:36:32,320 --> 00:36:36,240
allows to have

00:36:33,200 --> 00:36:39,680
rich ide integration

00:36:36,240 --> 00:36:42,160
it has a generation

00:36:39,680 --> 00:36:44,160
a documentation generation tool it has a

00:36:42,160 --> 00:36:47,839
linter which is called clippy

00:36:44,160 --> 00:36:51,359
uh very quite powerful

00:36:47,839 --> 00:36:55,280
very simple to install and and so on

00:36:51,359 --> 00:36:58,320
it has a huge library on credit io

00:36:55,280 --> 00:36:59,599
of 40 000 traits which are libraries in

00:36:58,320 --> 00:37:02,800
rust

00:36:59,599 --> 00:37:06,480
and it has really friendly developer

00:37:02,800 --> 00:37:09,440
compiler errors so that

00:37:06,480 --> 00:37:11,280
when the compiler can imagine the intent

00:37:09,440 --> 00:37:14,720
of the user it will point

00:37:11,280 --> 00:37:18,240
the the developer away why it's failing

00:37:14,720 --> 00:37:20,880
what would break what scientist

00:37:18,240 --> 00:37:22,320
is wrong and he tried to he tried to do

00:37:20,880 --> 00:37:25,599
it very

00:37:22,320 --> 00:37:26,560
friendly uh and it has a great

00:37:25,599 --> 00:37:29,160
documentation

00:37:26,560 --> 00:37:30,640
it has several books online docs are

00:37:29,160 --> 00:37:33,200
automatically uh

00:37:30,640 --> 00:37:33,920
generated from crest.io website for

00:37:33,200 --> 00:37:36,160
instance

00:37:33,920 --> 00:37:37,760
so all credits that are uploaded there

00:37:36,160 --> 00:37:41,680
have their documentation online

00:37:37,760 --> 00:37:45,359
with the same tool and really powerful

00:37:41,680 --> 00:37:47,599
uh so then i will try to make my point

00:37:45,359 --> 00:37:49,839
that

00:37:47,599 --> 00:37:51,119
the rush programming language align very

00:37:49,839 --> 00:37:55,520
well with kde

00:37:51,119 --> 00:37:57,440
particularly rust really

00:37:55,520 --> 00:37:59,200
increases the kind of safety we can

00:37:57,440 --> 00:38:01,920
expect for out of

00:37:59,200 --> 00:38:03,040
rush out of programming languages and

00:38:01,920 --> 00:38:05,040
with safety we can

00:38:03,040 --> 00:38:06,079
guarantee more stability and with

00:38:05,040 --> 00:38:09,040
stability we can

00:38:06,079 --> 00:38:09,760
get more security and then privacy in

00:38:09,040 --> 00:38:12,960
the end

00:38:09,760 --> 00:38:13,280
or at least the two are very important

00:38:12,960 --> 00:38:16,480
and

00:38:13,280 --> 00:38:20,400
dear to us and uh

00:38:16,480 --> 00:38:23,200
and and what really helps uh uplift

00:38:20,400 --> 00:38:26,079
this burden of maintaining the security

00:38:23,200 --> 00:38:30,160
and stability of software

00:38:26,079 --> 00:38:33,440
uh it saves a whole class of

00:38:30,160 --> 00:38:35,440
memory issue of of use after free of

00:38:33,440 --> 00:38:38,160
double free of buffer overflows

00:38:35,440 --> 00:38:40,240
and prevents other errors as well so

00:38:38,160 --> 00:38:42,480
with the

00:38:40,240 --> 00:38:44,000
for instance must use attributes you

00:38:42,480 --> 00:38:47,040
cannot

00:38:44,000 --> 00:38:47,760
ignore implicitly the result of a

00:38:47,040 --> 00:38:50,480
non-void

00:38:47,760 --> 00:38:52,320
function for instance and i know by

00:38:50,480 --> 00:38:54,800
experience that it prevents bugs

00:38:52,320 --> 00:38:56,640
because i have seen specifically

00:38:54,800 --> 00:38:58,839
specifically with the most used i've

00:38:56,640 --> 00:39:01,520
seen it in our

00:38:58,839 --> 00:39:04,240
codebase and

00:39:01,520 --> 00:39:05,040
uh and something to take in a into

00:39:04,240 --> 00:39:07,359
account

00:39:05,040 --> 00:39:08,079
well and something to highlight more is

00:39:07,359 --> 00:39:12,079
that uh

00:39:08,079 --> 00:39:12,079
a bunch of studies of uh rust

00:39:12,240 --> 00:39:18,240
are first companies of companies using

00:39:15,280 --> 00:39:18,880
rust they made some studies on their own

00:39:18,240 --> 00:39:20,720
project

00:39:18,880 --> 00:39:22,240
on on their own software and they

00:39:20,720 --> 00:39:24,720
evaluated

00:39:22,240 --> 00:39:26,400
google in chromium microsoft in all

00:39:24,720 --> 00:39:28,640
their projects and firefox

00:39:26,400 --> 00:39:31,599
they all came to the same conclusion

00:39:28,640 --> 00:39:35,119
that over 70 percent of their own bugs

00:39:31,599 --> 00:39:37,839
were due to memory safety issues and

00:39:35,119 --> 00:39:39,280
memory access bugs basically so they are

00:39:37,839 --> 00:39:42,800
still left 30

00:39:39,280 --> 00:39:46,160
of real errors but still

00:39:42,800 --> 00:39:49,200
uh rus could have helped over

00:39:46,160 --> 00:39:50,640
70 percent of bugs that that those

00:39:49,200 --> 00:39:54,079
software companies

00:39:50,640 --> 00:39:56,720
had to to face um

00:39:54,079 --> 00:39:58,720
and and so my point is what if we had

00:39:56,720 --> 00:40:00,960
the same scrutiny of the software

00:39:58,720 --> 00:40:01,839
as as those software and those companies

00:40:00,960 --> 00:40:05,040
because i mean

00:40:01,839 --> 00:40:06,640
we have a big base of c plus plus but we

00:40:05,040 --> 00:40:09,760
don't have the same scrutiny so

00:40:06,640 --> 00:40:11,839
maybe if we did more well

00:40:09,760 --> 00:40:13,119
we don't have the same resources to make

00:40:11,839 --> 00:40:16,800
this kind of study

00:40:13,119 --> 00:40:18,480
but can we expect to be much better than

00:40:16,800 --> 00:40:22,240
they do

00:40:18,480 --> 00:40:25,200
and uh than they do or at least

00:40:22,240 --> 00:40:26,960
ross is a way to prevent this kind of

00:40:25,200 --> 00:40:30,079
this kind of issues

00:40:26,960 --> 00:40:32,319
another point that i want to make is uh

00:40:30,079 --> 00:40:33,680
about the worst programming language is

00:40:32,319 --> 00:40:35,119
if you go to the website that's the

00:40:33,680 --> 00:40:37,440
screenshot of their website

00:40:35,119 --> 00:40:38,240
you see clearly performance reliability

00:40:37,440 --> 00:40:41,680
productivity

00:40:38,240 --> 00:40:43,680
that's the kind of core marketing that

00:40:41,680 --> 00:40:47,200
you have already heard

00:40:43,680 --> 00:40:50,319
a lot but what i want to highlight here

00:40:47,200 --> 00:40:51,040
is here it's a the phrase a language

00:40:50,319 --> 00:40:54,000
empowering

00:40:51,040 --> 00:40:55,440
empowering everyone to build reliable

00:40:54,000 --> 00:40:58,760
and efficient software

00:40:55,440 --> 00:41:00,000
and the the important word here is

00:40:58,760 --> 00:41:03,040
empowering

00:41:00,000 --> 00:41:06,720
everyone it's about

00:41:03,040 --> 00:41:09,440
making sure that most most people

00:41:06,720 --> 00:41:10,160
most developers are capable of of

00:41:09,440 --> 00:41:12,720
writing

00:41:10,160 --> 00:41:14,480
in a reasonable time or at least giving

00:41:12,720 --> 00:41:16,800
them the

00:41:14,480 --> 00:41:17,520
making us a program language that's

00:41:16,800 --> 00:41:21,280
easier

00:41:17,520 --> 00:41:24,720
easy to as easy to to get into

00:41:21,280 --> 00:41:29,119
with the safety incentives

00:41:24,720 --> 00:41:32,120
it imposes still on the on the

00:41:29,119 --> 00:41:33,520
on the developer

00:41:32,120 --> 00:41:37,200
[Music]

00:41:33,520 --> 00:41:39,680
and so while to have

00:41:37,200 --> 00:41:41,200
some comparison to surplus plus which is

00:41:39,680 --> 00:41:42,960
the elephant in the room

00:41:41,200 --> 00:41:44,640
so compared to surplus plus it adds a

00:41:42,960 --> 00:41:47,280
little uh

00:41:44,640 --> 00:41:48,640
safety it prevents a different behavior

00:41:47,280 --> 00:41:53,680
both overflows and

00:41:48,640 --> 00:41:55,520
and in in in has no inheritance from c

00:41:53,680 --> 00:41:57,359
so it doesn't need to have a head of

00:41:55,520 --> 00:42:00,560
eyes which personally

00:41:57,359 --> 00:42:02,640
i see as a way to

00:42:00,560 --> 00:42:05,119
put a tax on the developer to write more

00:42:02,640 --> 00:42:07,119
files we tend to have big files

00:42:05,119 --> 00:42:08,400
uh rather and and it's really a

00:42:07,119 --> 00:42:11,040
discipline to write

00:42:08,400 --> 00:42:12,319
a header file plus a surplus plus file

00:42:11,040 --> 00:42:15,119
plus a boilerplate

00:42:12,319 --> 00:42:16,480
you need to match the two together well

00:42:15,119 --> 00:42:18,850
at least it's a

00:42:16,480 --> 00:42:20,640
it's a pain to me um

00:42:18,850 --> 00:42:24,000
[Music]

00:42:20,640 --> 00:42:26,480
but so ross is is in my view arguably

00:42:24,000 --> 00:42:28,800
more beginner friendly it doesn't it

00:42:26,480 --> 00:42:31,839
feels most natural to

00:42:28,800 --> 00:42:31,839
compare to

00:42:32,040 --> 00:42:37,839
non-system programming languages like

00:42:34,640 --> 00:42:37,839
python or java

00:42:38,240 --> 00:42:45,599
and then we have the community aspects

00:42:42,400 --> 00:42:49,200
russ community has been from the start

00:42:45,599 --> 00:42:52,480
really uh targeting well trying to be a

00:42:49,200 --> 00:42:54,880
good citizen so they have uh rus

00:42:52,480 --> 00:42:56,319
the the reddit community for instance is

00:42:54,880 --> 00:42:59,920
quite welcoming

00:42:56,319 --> 00:43:01,920
they had a kind of conduct ever since

00:42:59,920 --> 00:43:03,359
the beginning of the project they have

00:43:01,920 --> 00:43:06,160
an oppar government

00:43:03,359 --> 00:43:07,839
uh really similar to our own with

00:43:06,160 --> 00:43:10,880
working groups uh

00:43:07,839 --> 00:43:12,480
on seams or permanent or temporary and

00:43:10,880 --> 00:43:16,160
and that's really

00:43:12,480 --> 00:43:18,400
shows in how they ha they managed to

00:43:16,160 --> 00:43:19,280
get people involved also on this working

00:43:18,400 --> 00:43:21,040
group

00:43:19,280 --> 00:43:22,960
and and they have been promoting

00:43:21,040 --> 00:43:27,599
diversity inclusiveness

00:43:22,960 --> 00:43:32,079
uh quite sex successfully

00:43:27,599 --> 00:43:35,280
i would say and then

00:43:32,079 --> 00:43:37,040
rust is also getting some momentum in

00:43:35,280 --> 00:43:38,400
other communities in free independent

00:43:37,040 --> 00:43:41,520
software communities

00:43:38,400 --> 00:43:44,640
firefox is obviously the first example

00:43:41,520 --> 00:43:46,560
about more than nine percent of firefox

00:43:44,640 --> 00:43:50,960
is written in russ nowadays

00:43:46,560 --> 00:43:52,800
and its percentage of

00:43:50,960 --> 00:43:54,160
ras code compared to surplus price

00:43:52,800 --> 00:43:56,240
increases over time

00:43:54,160 --> 00:43:59,440
so it's a vitality to replace c plus

00:43:56,240 --> 00:44:02,480
plus with rust in firefox

00:43:59,440 --> 00:44:05,839
there that ignore me they have some

00:44:02,480 --> 00:44:09,200
initiative to offer bindings

00:44:05,839 --> 00:44:11,440
and it's to their apis so that

00:44:09,200 --> 00:44:12,720
maybe in the future more application

00:44:11,440 --> 00:44:16,319
developers could write

00:44:12,720 --> 00:44:19,920
their gtk or nomi applications in the

00:44:16,319 --> 00:44:21,920
in rust so because they have uh

00:44:19,920 --> 00:44:23,599
they start from t so maybe they have

00:44:21,920 --> 00:44:26,560
more incentive to

00:44:23,599 --> 00:44:28,400
offer alternative languages and an

00:44:26,560 --> 00:44:31,440
alternative implementation language

00:44:28,400 --> 00:44:34,319
than we have but still it's

00:44:31,440 --> 00:44:36,160
it's quite interes interesting the linux

00:44:34,319 --> 00:44:40,240
kernel has

00:44:36,160 --> 00:44:43,280
recently opened a discussion about

00:44:40,240 --> 00:44:46,079
whether or not or how to

00:44:43,280 --> 00:44:47,520
accept rust as a language to ride

00:44:46,079 --> 00:44:50,880
drivers or

00:44:47,520 --> 00:44:55,359
or not core linux program

00:44:50,880 --> 00:44:58,640
not core linux components basically

00:44:55,359 --> 00:45:02,640
so like drivers or or similar

00:44:58,640 --> 00:45:05,440
and we have some nice

00:45:02,640 --> 00:45:06,160
projects also about rewriting some uh

00:45:05,440 --> 00:45:09,440
libraries

00:45:06,160 --> 00:45:11,839
in in rust in the sake of safety and

00:45:09,440 --> 00:45:13,040
maintained ownership for busy two

00:45:11,839 --> 00:45:14,960
business two was

00:45:13,040 --> 00:45:16,480
was pretty much not maintained or

00:45:14,960 --> 00:45:20,079
maintained by distros

00:45:16,480 --> 00:45:21,920
and uh and frederico

00:45:20,079 --> 00:45:23,119
i can't remember this last name

00:45:21,920 --> 00:45:26,240
unfortunately

00:45:23,119 --> 00:45:28,400
but a gloomy developer uh took over

00:45:26,240 --> 00:45:29,520
the project and we implemented it in in

00:45:28,400 --> 00:45:33,200
busy too

00:45:29,520 --> 00:45:33,760
and it's now uh spelling out the new

00:45:33,200 --> 00:45:36,880
version

00:45:33,760 --> 00:45:39,839
is now momentum available and and now

00:45:36,880 --> 00:45:40,880
uh version source well it's another

00:45:39,839 --> 00:45:44,000
story and

00:45:40,880 --> 00:45:44,560
liberals vg got the same is the same

00:45:44,000 --> 00:45:47,280
story

00:45:44,560 --> 00:45:48,319
they they re-implemented the uh the

00:45:47,280 --> 00:45:51,440
implementation

00:45:48,319 --> 00:45:55,119
thank you pino they re-implemented

00:45:51,440 --> 00:45:58,319
the uh the library in rus progressively

00:45:55,119 --> 00:46:01,440
so russell was to to

00:45:58,319 --> 00:46:04,640
reimplement especially in your c library

00:46:01,440 --> 00:46:08,480
progressively by replacing a function by

00:46:04,640 --> 00:46:08,480
function or strength by strike basically

00:46:08,880 --> 00:46:16,079
and and here is my more

00:46:12,400 --> 00:46:19,200
my last part of my presentation

00:46:16,079 --> 00:46:22,079
it's about us uh where under the

00:46:19,200 --> 00:46:23,119
do we stand uh about which program in

00:46:22,079 --> 00:46:26,319
language

00:46:23,119 --> 00:46:28,640
well first i would say we need to

00:46:26,319 --> 00:46:29,680
accept or at least decide collectively

00:46:28,640 --> 00:46:33,440
that maybe we

00:46:29,680 --> 00:46:34,640
we could consider using it so i mean my

00:46:33,440 --> 00:46:36,800
presentation

00:46:34,640 --> 00:46:39,040
my whole presentation is about this this

00:46:36,800 --> 00:46:42,800
point precisely

00:46:39,040 --> 00:46:46,560
but then maybe we would want but

00:46:42,800 --> 00:46:49,760
we have more things to consider uh

00:46:46,560 --> 00:46:52,319
in particular training by that i mean uh

00:46:49,760 --> 00:46:52,880
our developers are qml and c plus plus

00:46:52,319 --> 00:46:55,680
or

00:46:52,880 --> 00:46:56,640
cd bloppers and ross is a different

00:46:55,680 --> 00:46:58,319
beast

00:46:56,640 --> 00:47:00,480
especially it has been said that

00:46:58,319 --> 00:47:00,880
especially people with a strong surplus

00:47:00,480 --> 00:47:04,160
plus

00:47:00,880 --> 00:47:04,800
experience have a longer time getting

00:47:04,160 --> 00:47:08,839
interest

00:47:04,800 --> 00:47:12,319
because they have uh uh preconceived or

00:47:08,839 --> 00:47:14,319
are well uh

00:47:12,319 --> 00:47:16,400
the man said basically and unless

00:47:14,319 --> 00:47:20,000
imposes a different one

00:47:16,400 --> 00:47:23,599
so so that's definitely a point that's

00:47:20,000 --> 00:47:27,200
not uh to to not

00:47:23,599 --> 00:47:30,240
to to forget but i would argue that

00:47:27,200 --> 00:47:30,720
a lot of our more casual developers

00:47:30,240 --> 00:47:33,440
would

00:47:30,720 --> 00:47:34,319
would enjoy potentially and we could

00:47:33,440 --> 00:47:39,839
also

00:47:34,319 --> 00:47:43,119
uh increase our developer base basically

00:47:39,839 --> 00:47:45,040
and then we have the distribution issue

00:47:43,119 --> 00:47:46,880
ross has man has made this choice to

00:47:45,040 --> 00:47:49,200
have no stable adi

00:47:46,880 --> 00:47:49,920
so currently you don't have a way to

00:47:49,200 --> 00:47:53,520
distribute

00:47:49,920 --> 00:47:57,200
a dynamically linked libraries

00:47:53,520 --> 00:48:00,720
dynamic libraries i mean and uh and

00:47:57,200 --> 00:48:03,920
accepts except uh

00:48:00,720 --> 00:48:07,520
this uh pro

00:48:03,920 --> 00:48:11,200
except through c apis so rise can be

00:48:07,520 --> 00:48:13,440
made to look like a c api a perfect c

00:48:11,200 --> 00:48:16,960
api but still it's a c api

00:48:13,440 --> 00:48:20,079
and we we like richer apis in kde

00:48:16,960 --> 00:48:24,720
so maybe it's here it's

00:48:20,079 --> 00:48:24,720
it's it's a bit tricky um

00:48:25,440 --> 00:48:29,040
and then there's distribution issue

00:48:27,520 --> 00:48:31,040
since it's uh

00:48:29,040 --> 00:48:32,880
everything is linked together it's it's

00:48:31,040 --> 00:48:35,680
really a

00:48:32,880 --> 00:48:37,200
burden to destroys or being

00:48:35,680 --> 00:48:40,160
consideration for them

00:48:37,200 --> 00:48:41,200
you can see how debian is owning this

00:48:40,160 --> 00:48:44,319
for instance

00:48:41,200 --> 00:48:47,280
maybe you would want to have

00:48:44,319 --> 00:48:48,559
a different kind of well we have to ask

00:48:47,280 --> 00:48:51,760
ourselves how we want

00:48:48,559 --> 00:48:54,559
to distribute any ras code

00:48:51,760 --> 00:48:55,760
for applications maybe a flat pack or

00:48:54,559 --> 00:48:58,480
snaps or

00:48:55,760 --> 00:48:59,119
application packages could be a good way

00:48:58,480 --> 00:49:02,559
to

00:48:59,119 --> 00:49:04,480
get through there but for the rest of

00:49:02,559 --> 00:49:06,400
of our software it will be a different

00:49:04,480 --> 00:49:07,359
beast a different question not not

00:49:06,400 --> 00:49:10,559
really

00:49:07,359 --> 00:49:13,280
and and then we have uh obvious

00:49:10,559 --> 00:49:14,079
some technical difficulties in

00:49:13,280 --> 00:49:16,150
particular

00:49:14,079 --> 00:49:17,680
intel intelligently

00:49:16,150 --> 00:49:19,839
[Music]

00:49:17,680 --> 00:49:21,839
well interaction with c plus plus is

00:49:19,839 --> 00:49:24,400
currently complicated you have

00:49:21,839 --> 00:49:25,599
code generators but it's not perfect

00:49:24,400 --> 00:49:28,880
it's really

00:49:25,599 --> 00:49:31,760
it's not matured yet and and

00:49:28,880 --> 00:49:32,960
things are evolving with uh see the

00:49:31,760 --> 00:49:36,880
project see exists

00:49:32,960 --> 00:49:41,839
for instance but slowly

00:49:36,880 --> 00:49:41,839
but we we still need to see the fruits

00:49:42,240 --> 00:49:48,640
and then well that's more

00:49:45,440 --> 00:49:53,119
question what could we do with us today

00:49:48,640 --> 00:49:56,160
in in in kde if we want if we wanted

00:49:53,119 --> 00:50:00,480
we could write some qml applications you

00:49:56,160 --> 00:50:03,119
saw in 2017 a presentation maybe uh

00:50:00,480 --> 00:50:05,520
academy a presentation about the new

00:50:03,119 --> 00:50:08,160
rescued uh

00:50:05,520 --> 00:50:09,760
binding generator and there are all a

00:50:08,160 --> 00:50:13,680
few other ways to

00:50:09,760 --> 00:50:15,839
to bind rust and cute

00:50:13,680 --> 00:50:17,520
maybe we could imagine to write a chaos

00:50:15,839 --> 00:50:19,920
slave or a

00:50:17,520 --> 00:50:21,440
best demon that doesn't need any idea

00:50:19,920 --> 00:50:23,760
from us or any

00:50:21,440 --> 00:50:25,680
strong integration into the rest of our

00:50:23,760 --> 00:50:28,079
ecosystem

00:50:25,680 --> 00:50:29,760
or maybe you would want to be able to

00:50:28,079 --> 00:50:30,559
offer otherwise bindings to carrier

00:50:29,760 --> 00:50:35,359
frameworks

00:50:30,559 --> 00:50:37,710
for for future users but but maybe it's

00:50:35,359 --> 00:50:39,359
it's quite down the line and

00:50:37,710 --> 00:50:42,000
[Music]

00:50:39,359 --> 00:50:43,280
and my conclusion my conclusion is that

00:50:42,000 --> 00:50:45,760
trust is a

00:50:43,280 --> 00:50:47,440
promising programming language it's it's

00:50:45,760 --> 00:50:50,480
really advancing the state

00:50:47,440 --> 00:50:55,839
of the art in some regards in particular

00:50:50,480 --> 00:50:59,200
safety and memory safety uh enforcement

00:50:55,839 --> 00:51:01,440
and uh it's i would say that

00:50:59,200 --> 00:51:02,319
that's just a discussion and just for

00:51:01,440 --> 00:51:05,359
our argues

00:51:02,319 --> 00:51:08,480
arguments now that the kd community will

00:51:05,359 --> 00:51:11,599
use it ever or that's up

00:51:08,480 --> 00:51:14,720
for debate but but

00:51:11,599 --> 00:51:15,520
i would also say that it's it's already

00:51:14,720 --> 00:51:17,119
influencing

00:51:15,520 --> 00:51:18,800
or encouraging other programming

00:51:17,119 --> 00:51:20,839
languages communities

00:51:18,800 --> 00:51:22,400
towards more safety and developer

00:51:20,839 --> 00:51:26,000
friendliness uh

00:51:22,400 --> 00:51:28,720
that's that's uh an area where

00:51:26,000 --> 00:51:30,400
where other communities could make more

00:51:28,720 --> 00:51:32,800
progress

00:51:30,400 --> 00:51:34,000
and yeah that's about it if you want to

00:51:32,800 --> 00:51:38,790
learn more about rust

00:51:34,000 --> 00:51:39,839
well that's uh good links to to visit

00:51:38,790 --> 00:51:42,640
[Music]

00:51:39,839 --> 00:51:43,520
and i think it's a good timing for

00:51:42,640 --> 00:51:46,079
questions

00:51:43,520 --> 00:51:46,720
yes and there are a bunch of questions

00:51:46,079 --> 00:51:49,920
uh we

00:51:46,720 --> 00:51:50,960
have time for one um how well does cute

00:51:49,920 --> 00:51:52,800
work with rust

00:51:50,960 --> 00:51:55,359
how could cute be made to work better

00:51:52,800 --> 00:51:57,760
with rust and related to that

00:51:55,359 --> 00:51:58,480
do you foresee any migration parts for

00:51:57,760 --> 00:52:04,000
cute

00:51:58,480 --> 00:52:07,280
kitty elaborates towards rust

00:52:04,000 --> 00:52:10,079
uh how does cute work reversed uh

00:52:07,280 --> 00:52:10,960
well there are bindings basically so

00:52:10,079 --> 00:52:14,079
bindings and

00:52:10,960 --> 00:52:16,839
and and those can be a limitation

00:52:14,079 --> 00:52:19,040
uh as as far as i can tell they are not

00:52:16,839 --> 00:52:24,480
complete

00:52:19,040 --> 00:52:32,800
so i'm not choose

00:52:24,480 --> 00:52:37,040
and that's what i can say uh

00:52:32,800 --> 00:52:37,040
you you're muted uh for some reason

00:52:37,359 --> 00:52:43,520
all right yeah and

00:52:40,640 --> 00:52:46,160
uh how could we make q2 what better

00:52:43,520 --> 00:52:49,680
wizards why it's about bindings and

00:52:46,160 --> 00:52:52,559
basically by needs qml has

00:52:49,680 --> 00:52:54,720
is easier to grasp and there are already

00:52:52,559 --> 00:52:56,960
some bindings there

00:52:54,720 --> 00:53:00,400
do you foresee any migration paths for

00:52:56,960 --> 00:53:02,800
cute or kde library is towards rest

00:53:00,400 --> 00:53:03,599
my response is no because there is no

00:53:02,800 --> 00:53:06,960
point

00:53:03,599 --> 00:53:09,040
in your rewriting rewriting is

00:53:06,960 --> 00:53:10,880
essentially a waste of time especially

00:53:09,040 --> 00:53:14,960
for our first communities

00:53:10,880 --> 00:53:18,319
we any rewriting should be

00:53:14,960 --> 00:53:21,599
strongly motivated by real reasons like

00:53:18,319 --> 00:53:26,400
refactoring need security consideration

00:53:21,599 --> 00:53:28,240
or or really a strong

00:53:26,400 --> 00:53:29,520
will from the developers but if you

00:53:28,240 --> 00:53:32,240
don't have at least

00:53:29,520 --> 00:53:34,000
one one of one or two of those three

00:53:32,240 --> 00:53:35,359
reasons you don't have any reason to

00:53:34,000 --> 00:53:39,119
rewrite anything

00:53:35,359 --> 00:53:42,880
well ranting binding is way more uh

00:53:39,119 --> 00:53:45,040
clever in such uh

00:53:42,880 --> 00:53:46,960
all right that sounds great there seems

00:53:45,040 --> 00:53:48,240
to be interest in the buff later this

00:53:46,960 --> 00:53:50,400
week so maybe you can

00:53:48,240 --> 00:53:51,839
organize one and continue the discussion

00:53:50,400 --> 00:53:54,960
with people

00:53:51,839 --> 00:53:57,280
yeah thank you very much thank you

00:53:54,960 --> 00:53:59,520
uh we will take a short break and then

00:53:57,280 --> 00:54:00,720
be back with andreas talking about

00:53:59,520 --> 00:54:11,839
testing

00:54:00,720 --> 00:54:11,839
see you in a few

00:55:43,599 --> 00:55:52,480
hi everyone

00:55:49,359 --> 00:56:03,839
how are you on this fine day

00:55:52,480 --> 00:56:03,839
we'll be starting in three minutes

00:56:04,640 --> 00:56:08,799
thank you lydia for being the session

00:56:07,520 --> 00:56:11,359
chair for

00:56:08,799 --> 00:56:17,839
the past hour i'll be your host for the

00:56:11,359 --> 00:56:17,839
next one

00:57:21,280 --> 00:57:25,680
hey everyone what was your favorite

00:57:23,760 --> 00:57:41,839
session so far

00:57:25,680 --> 00:57:41,839
let me know in the chat

00:58:16,559 --> 00:58:20,000
it was told by andreas that there will

00:58:18,720 --> 00:58:24,960
be some time for

00:58:20,000 --> 00:58:29,359
q a so remember to use the shared notes

00:58:24,960 --> 00:58:29,359
functionality to post your best

00:58:34,839 --> 00:58:37,839
questions

00:58:52,559 --> 00:58:58,799
and ride on time we're having andreas

00:58:56,240 --> 00:58:59,760
telling us about unit testing take it

00:58:58,799 --> 00:59:03,119
away

00:58:59,760 --> 00:59:06,799
okay thank you good morning everybody

00:59:03,119 --> 00:59:10,000
um i want to talk about

00:59:06,799 --> 00:59:10,799
tests today um essentially i want to

00:59:10,000 --> 00:59:13,520
talk about

00:59:10,799 --> 00:59:15,359
three different parts starting with a

00:59:13,520 --> 00:59:16,880
little bit of background

00:59:15,359 --> 00:59:18,559
what is a unit test what is an

00:59:16,880 --> 00:59:19,760
integration test and all the theory

00:59:18,559 --> 00:59:23,040
behind

00:59:19,760 --> 00:59:26,000
then um how we write unit tests

00:59:23,040 --> 00:59:28,079
and integration tests in kde and then

00:59:26,000 --> 00:59:31,520
how to integrate it with a built system

00:59:28,079 --> 00:59:34,400
and with cci and i

00:59:31,520 --> 00:59:35,680
hope i'm fast enough for a lot of

00:59:34,400 --> 00:59:38,319
questions

00:59:35,680 --> 00:59:40,240
um okay let's start with the motivation

00:59:38,319 --> 00:59:42,720
um why do you want to write

00:59:40,240 --> 00:59:43,760
a test and i mean automatic test which

00:59:42,720 --> 00:59:47,119
is

00:59:43,760 --> 00:59:47,599
something the ci is executing and tells

00:59:47,119 --> 00:59:50,720
your

00:59:47,599 --> 00:59:54,240
result um if you ever

00:59:50,720 --> 00:59:54,640
wrote a manual test and you had to test

00:59:54,240 --> 00:59:56,799
it

00:59:54,640 --> 00:59:57,839
and run it again and again and after

00:59:56,799 --> 01:00:00,880
after each

00:59:57,839 --> 01:00:02,880
change um you'll see it's

01:00:00,880 --> 01:00:04,400
it's a time improvement if you um have

01:00:02,880 --> 01:00:07,359
something automatic that you

01:00:04,400 --> 01:00:08,000
simply automatically start and see that

01:00:07,359 --> 01:00:10,319
you did not

01:00:08,000 --> 01:00:11,680
break anything if you changed it and

01:00:10,319 --> 01:00:12,319
it's even better if you have a lot of

01:00:11,680 --> 01:00:15,440
tests that

01:00:12,319 --> 01:00:19,200
tests tiny assertions to

01:00:15,440 --> 01:00:22,559
ensure that well to to find

01:00:19,200 --> 01:00:25,920
errors easily and fast

01:00:22,559 --> 01:00:26,960
it's also important if you ever refactor

01:00:25,920 --> 01:00:28,720
your code

01:00:26,960 --> 01:00:30,240
you can see with your tests that you

01:00:28,720 --> 01:00:33,040
don't get regressions

01:00:30,240 --> 01:00:33,920
or you can you know where your code

01:00:33,040 --> 01:00:38,240
requests and

01:00:33,920 --> 01:00:41,839
you can directly adapt to it and some

01:00:38,240 --> 01:00:45,359
less commonly uh motivations but that

01:00:41,839 --> 01:00:48,559
both quite important to me is um

01:00:45,359 --> 01:00:51,760
often mostly if you write libraries

01:00:48,559 --> 01:00:54,079
uh you you can use tests to

01:00:51,760 --> 01:00:54,799
document behavior which is sometimes

01:00:54,079 --> 01:00:57,839
written down

01:00:54,799 --> 01:00:57,839
sometimes not

01:00:58,240 --> 01:01:04,640
and yeah it helps you to not break

01:01:01,520 --> 01:01:08,160
unwritten contracts with your users

01:01:04,640 --> 01:01:10,160
and another thing that in my opinion is

01:01:08,160 --> 01:01:12,319
extremely important in writing libraries

01:01:10,160 --> 01:01:13,040
um when you are writing a test to test

01:01:12,319 --> 01:01:14,559
your library

01:01:13,040 --> 01:01:17,119
so mostly integration test you are

01:01:14,559 --> 01:01:22,240
testing your api by yourself and you see

01:01:17,119 --> 01:01:22,240
uh well it's working it's usable or not

01:01:22,839 --> 01:01:30,160
um there are different kinds of tests um

01:01:27,040 --> 01:01:33,200
i will look at the image two view angles

01:01:30,160 --> 01:01:34,240
um one is the angle of a white box and

01:01:33,200 --> 01:01:37,520
black box that's

01:01:34,240 --> 01:01:39,920
like the lightest on the light is off um

01:01:37,520 --> 01:01:40,960
when you are writing some piece of code

01:01:39,920 --> 01:01:42,720
and you're really

01:01:40,960 --> 01:01:45,520
in the code you know there's something

01:01:42,720 --> 01:01:48,079
complicated going on and it can break

01:01:45,520 --> 01:01:49,920
then you're usually writing a white box

01:01:48,079 --> 01:01:52,799
test and writing a test that fixes

01:01:49,920 --> 01:01:54,000
exactly the situation to ensure that's

01:01:52,799 --> 01:01:55,920
correct

01:01:54,000 --> 01:01:57,200
in a black box test the um

01:01:55,920 --> 01:01:58,640
[Music]

01:01:57,200 --> 01:02:00,720
view is different you look from the

01:01:58,640 --> 01:02:04,079
outside you look from the features

01:02:00,720 --> 01:02:06,559
you have on your library or on the api

01:02:04,079 --> 01:02:08,240
side or the features of the user and you

01:02:06,559 --> 01:02:10,799
see that the core functionality

01:02:08,240 --> 01:02:11,920
is working as expected from the outside

01:02:10,799 --> 01:02:13,920
and it's always

01:02:11,920 --> 01:02:15,359
good to remember that there are really

01:02:13,920 --> 01:02:18,160
two different um

01:02:15,359 --> 01:02:21,839
view angles for that because you're

01:02:18,160 --> 01:02:21,839
testing different things

01:02:21,920 --> 01:02:27,359
another way to view it then is

01:02:24,960 --> 01:02:29,920
to look at what you are testing so so

01:02:27,359 --> 01:02:33,200
called system under test

01:02:29,920 --> 01:02:36,000
a unit test usually tests a class

01:02:33,200 --> 01:02:36,640
or maybe two at most three classes that

01:02:36,000 --> 01:02:39,039
are

01:02:36,640 --> 01:02:40,400
really tightly coupled to together so

01:02:39,039 --> 01:02:42,960
these are the

01:02:40,400 --> 01:02:44,640
red blocks here it can be a the

01:02:42,960 --> 01:02:45,440
application code it can be in library

01:02:44,640 --> 01:02:48,079
code

01:02:45,440 --> 01:02:48,640
and you test it singularly really small

01:02:48,079 --> 01:02:50,240
thing

01:02:48,640 --> 01:02:52,000
that you want where you want to ensure

01:02:50,240 --> 01:02:54,799
the functionality

01:02:52,000 --> 01:02:55,359
on integration test it's uh in my view

01:02:54,799 --> 01:02:57,440
mostly

01:02:55,359 --> 01:02:59,599
these black lines um so you're testing

01:02:57,440 --> 01:03:02,720
the api the uh

01:02:59,599 --> 01:03:04,720
the access of a black box thing

01:03:02,720 --> 01:03:07,200
like a library from the outside where

01:03:04,720 --> 01:03:09,839
you're only using the

01:03:07,200 --> 01:03:12,160
well the api of the library so usually

01:03:09,839 --> 01:03:14,319
in such a test you should never include

01:03:12,160 --> 01:03:15,680
any cpp file you only should link to a

01:03:14,319 --> 01:03:18,160
library and

01:03:15,680 --> 01:03:20,079
check that's working and then we have a

01:03:18,160 --> 01:03:22,240
subsystem test where you

01:03:20,079 --> 01:03:23,520
mostly look from the user perspective

01:03:22,240 --> 01:03:25,760
that well

01:03:23,520 --> 01:03:28,640
that what the user want to do is working

01:03:25,760 --> 01:03:28,640
as expected

01:03:28,839 --> 01:03:34,640
um

01:03:31,520 --> 01:03:35,280
a nice thing that should be named such a

01:03:34,640 --> 01:03:38,319
talk is

01:03:35,280 --> 01:03:40,640
um test driven development if you never

01:03:38,319 --> 01:03:43,440
heard about it you should google it

01:03:40,640 --> 01:03:44,000
um in a nutshell it's a way of

01:03:43,440 --> 01:03:47,359
developing

01:03:44,000 --> 01:03:49,280
code where you start with writing a test

01:03:47,359 --> 01:03:51,680
before writing any code

01:03:49,280 --> 01:03:52,640
and then you check that the test is

01:03:51,680 --> 01:03:54,880
really failing

01:03:52,640 --> 01:03:56,000
and then you implement the code to fix

01:03:54,880 --> 01:03:59,280
the test

01:03:56,000 --> 01:04:00,400
and well just the test and if the test

01:03:59,280 --> 01:04:02,799
is just

01:04:00,400 --> 01:04:04,160
barely passing then you write the next

01:04:02,799 --> 01:04:05,599
test that is failing again and you're

01:04:04,160 --> 01:04:08,960
writing again the

01:04:05,599 --> 01:04:09,280
implementation code to um implementation

01:04:08,960 --> 01:04:11,440
that

01:04:09,280 --> 01:04:12,960
fixes the next test and so over time

01:04:11,440 --> 01:04:15,920
you're creating more and more tests

01:04:12,960 --> 01:04:17,599
and you ensure that the code quality

01:04:15,920 --> 01:04:21,280
improves because you are testing it

01:04:17,599 --> 01:04:25,039
really deeply um usually you also have a

01:04:21,280 --> 01:04:25,039
better architecture because you are

01:04:25,200 --> 01:04:28,960
you have to design your code that's

01:04:26,960 --> 01:04:31,599
testable and often it's

01:04:28,960 --> 01:04:32,720
a better decoupling of different code

01:04:31,599 --> 01:04:35,760
units the

01:04:32,720 --> 01:04:38,400
introduction of reasonable interfaces um

01:04:35,760 --> 01:04:39,039
where you split code parts and structure

01:04:38,400 --> 01:04:41,280
it to

01:04:39,039 --> 01:04:42,720
to really have a good um good

01:04:41,280 --> 01:04:46,319
architecture

01:04:42,720 --> 01:04:46,960
and mostly with test driven development

01:04:46,319 --> 01:04:49,520
you have to

01:04:46,960 --> 01:04:50,720
uh refactoring during the whole kind of

01:04:49,520 --> 01:04:53,920
during the whole time of

01:04:50,720 --> 01:04:54,640
um writing your code so refactoring is

01:04:53,920 --> 01:04:57,039
part of your

01:04:54,640 --> 01:04:59,200
development and it so it works really

01:04:57,039 --> 01:05:03,119
nicely

01:04:59,200 --> 01:05:06,720
um coming to how to write a test

01:05:03,119 --> 01:05:09,920
um in kde

01:05:06,720 --> 01:05:13,039
i think nearly all if not all tests

01:05:09,920 --> 01:05:16,000
we are writing are using q-test

01:05:13,039 --> 01:05:19,680
it's a really lightweight framework

01:05:16,000 --> 01:05:23,359
which was provided by qt itself

01:05:19,680 --> 01:05:26,880
the idea is you have a queue object

01:05:23,359 --> 01:05:28,000
or q object derived class and every slot

01:05:26,880 --> 01:05:31,280
of that object

01:05:28,000 --> 01:05:34,559
is interpreted as a test case

01:05:31,280 --> 01:05:36,720
you have to add some magic behind so

01:05:34,559 --> 01:05:39,200
you have to add a main function that's

01:05:36,720 --> 01:05:42,160
automatically generated usually

01:05:39,200 --> 01:05:43,760
but you're writing the class you're

01:05:42,160 --> 01:05:46,880
defining some slots and

01:05:43,760 --> 01:05:48,000
they are executed um q test also

01:05:46,880 --> 01:05:49,920
provides you with

01:05:48,000 --> 01:05:51,680
several test macros for example

01:05:49,920 --> 01:05:52,480
something to verify that the expression

01:05:51,680 --> 01:05:56,640
is q

01:05:52,480 --> 01:06:00,240
is true to compare if two values are

01:05:56,640 --> 01:06:01,520
same and also um comparison methods for

01:06:00,240 --> 01:06:06,000
a lot of internal q

01:06:01,520 --> 01:06:07,920
types um you have a thickness pie to

01:06:06,000 --> 01:06:09,680
uh check that a signal is really

01:06:07,920 --> 01:06:12,480
triggered and received

01:06:09,680 --> 01:06:14,160
and there are a lot of more things um

01:06:12,480 --> 01:06:18,000
for those you should look at

01:06:14,160 --> 01:06:20,640
the qt this q test um list of all

01:06:18,000 --> 01:06:21,200
uh markers as functionality because

01:06:20,640 --> 01:06:23,280
there are

01:06:21,200 --> 01:06:25,039
some hidden games that really makes your

01:06:23,280 --> 01:06:26,640
life easier

01:06:25,039 --> 01:06:28,720
and there's a good introduction how to

01:06:26,640 --> 01:06:32,000
do it but let's

01:06:28,720 --> 01:06:35,200
look at some example how it q test

01:06:32,000 --> 01:06:38,559
looks like if you never wrote one before

01:06:35,200 --> 01:06:41,680
um we simply have to include q test

01:06:38,559 --> 01:06:42,480
then we create a class called a simple

01:06:41,680 --> 01:06:45,680
class derive

01:06:42,480 --> 01:06:49,280
from queue object and i defined

01:06:45,680 --> 01:06:49,760
two slots um one i called in a test case

01:06:49,280 --> 01:06:53,440
and one

01:06:49,760 --> 01:06:56,000
my test and in test case this is

01:06:53,440 --> 01:06:57,440
actually a special slot because it has a

01:06:56,000 --> 01:07:00,000
special slot name

01:06:57,440 --> 01:07:01,119
here i added a list of those special

01:07:00,000 --> 01:07:03,359
slot names there are

01:07:01,119 --> 01:07:04,480
a few more but these are important ones

01:07:03,359 --> 01:07:07,680
i think

01:07:04,480 --> 01:07:10,400
um in a test case is a

01:07:07,680 --> 01:07:12,000
test case that is always ensured to be

01:07:10,400 --> 01:07:15,280
um

01:07:12,000 --> 01:07:17,280
called before any other test case and

01:07:15,280 --> 01:07:18,880
similarly you have cleanup test case

01:07:17,280 --> 01:07:22,079
which is

01:07:18,880 --> 01:07:24,319
the case um triggered after the last one

01:07:22,079 --> 01:07:25,839
and that helps you to set up your code

01:07:24,319 --> 01:07:29,359
and um

01:07:25,839 --> 01:07:31,520
to to clean up f all also for the

01:07:29,359 --> 01:07:35,440
individual test case you can define

01:07:31,520 --> 01:07:36,880
init and clean up which set up any test

01:07:35,440 --> 01:07:39,680
case

01:07:36,880 --> 01:07:41,440
and in this test case i added two really

01:07:39,680 --> 01:07:44,400
trivial functions i

01:07:41,440 --> 01:07:45,359
verified that two is true and that one

01:07:44,400 --> 01:07:47,200
is one

01:07:45,359 --> 01:07:50,160
and so this test if you compile it

01:07:47,200 --> 01:07:54,079
should be probably true

01:07:50,160 --> 01:07:56,480
um going a little bit more

01:07:54,079 --> 01:07:57,680
difficult or more more advanced features

01:07:56,480 --> 01:08:01,280
you can do

01:07:57,680 --> 01:08:04,559
uh for example um if you want to check

01:08:01,280 --> 01:08:07,039
inside any of these test slots uh that

01:08:04,559 --> 01:08:08,160
that the signal is received i created a

01:08:07,039 --> 01:08:10,880
small code

01:08:08,160 --> 01:08:12,319
snippet where you have push button the

01:08:10,880 --> 01:08:14,799
push button has this

01:08:12,319 --> 01:08:15,520
clicked event that you want to see if

01:08:14,799 --> 01:08:19,279
it's really

01:08:15,520 --> 01:08:21,920
omitted and received

01:08:19,279 --> 01:08:22,319
then you can create a signal spy which

01:08:21,920 --> 01:08:25,920
is

01:08:22,319 --> 01:08:28,880
really similar to um well to a

01:08:25,920 --> 01:08:30,719
to an ordinary connection you should

01:08:28,880 --> 01:08:33,839
always check that the signal is pi

01:08:30,719 --> 01:08:36,480
is valid because it checks that um the

01:08:33,839 --> 01:08:38,000
emitting object is not null and if you

01:08:36,480 --> 01:08:41,759
have string based connections that

01:08:38,000 --> 01:08:45,040
you they did not make me typo

01:08:41,759 --> 01:08:48,239
then you emit the signal

01:08:45,040 --> 01:08:48,960
and you check is there a signal received

01:08:48,239 --> 01:08:51,279
so is

01:08:48,960 --> 01:08:53,520
count of the signals one or not and

01:08:51,279 --> 01:08:55,679
after that you can even take

01:08:53,520 --> 01:08:58,080
the signal and the parameters and check

01:08:55,679 --> 01:09:01,759
if they are what you expect

01:08:58,080 --> 01:09:03,679
um one important point here is um

01:09:01,759 --> 01:09:06,880
here it's good to remember the training

01:09:03,679 --> 01:09:09,279
from david if you have been there friday

01:09:06,880 --> 01:09:10,960
because the signal here we know it's a

01:09:09,279 --> 01:09:14,239
direct function call

01:09:10,960 --> 01:09:15,920
and so it's received before the spy dot

01:09:14,239 --> 01:09:18,319
count

01:09:15,920 --> 01:09:19,440
and you should be careful because

01:09:18,319 --> 01:09:21,839
sometimes you

01:09:19,440 --> 01:09:22,960
if you are testing some signals between

01:09:21,839 --> 01:09:26,480
different slides you

01:09:22,960 --> 01:09:28,000
um should or you need different methods

01:09:26,480 --> 01:09:30,640
for example there's a

01:09:28,000 --> 01:09:31,520
spy.rate function that waits for some

01:09:30,640 --> 01:09:35,040
time

01:09:31,520 --> 01:09:38,239
and um and spins its um on

01:09:35,040 --> 01:09:41,279
event loop to check if the events are

01:09:38,239 --> 01:09:44,159
received or not um and really

01:09:41,279 --> 01:09:45,679
it depends if it's a direct signal call

01:09:44,159 --> 01:09:50,080
or acute signal call

01:09:45,679 --> 01:09:52,400
and so a 95 percent of the cases it's uh

01:09:50,080 --> 01:09:54,000
totally valid to do this

01:09:52,400 --> 01:09:56,640
and then you have sweating and you have

01:09:54,000 --> 01:09:56,640
to be careful

01:09:57,920 --> 01:10:03,280
um what you can also do with q test is

01:10:00,480 --> 01:10:06,480
uh create data-driven tests

01:10:03,280 --> 01:10:08,880
if you never do it did it it's

01:10:06,480 --> 01:10:10,560
well the idea is you have a test case

01:10:08,880 --> 01:10:13,520
but you are starting it with

01:10:10,560 --> 01:10:14,480
a lot of different input data and for

01:10:13,520 --> 01:10:17,440
this test

01:10:14,480 --> 01:10:20,719
i have a slot that is called the same

01:10:17,440 --> 01:10:22,960
but with underlined data

01:10:20,719 --> 01:10:22,960
and

01:10:23,840 --> 01:10:29,920
you are defining columns and rows

01:10:27,280 --> 01:10:31,280
so it's really a table but what you

01:10:29,920 --> 01:10:33,760
could think about it

01:10:31,280 --> 01:10:35,360
and you are fetching the tables of the

01:10:33,760 --> 01:10:38,480
lines of the table several times

01:10:35,360 --> 01:10:41,360
and runs a test visit

01:10:38,480 --> 01:10:42,159
um not another nice thing i added here

01:10:41,360 --> 01:10:45,520
is a cue

01:10:42,159 --> 01:10:48,800
expect fail to show it once

01:10:45,520 --> 01:10:51,360
um that marks the next next test

01:10:48,800 --> 01:10:52,400
function to be failing which is

01:10:51,360 --> 01:10:54,480
sometimes

01:10:52,400 --> 01:10:55,440
what you want because you know it's not

01:10:54,480 --> 01:10:59,040
yet done

01:10:55,440 --> 01:11:01,199
and does not work yet and

01:10:59,040 --> 01:11:04,000
it's also nice because if you fix it in

01:11:01,199 --> 01:11:06,400
the future the test will fail because

01:11:04,000 --> 01:11:07,440
it does not fail anymore and you can

01:11:06,400 --> 01:11:10,239
remove

01:11:07,440 --> 01:11:10,239
that marker

01:11:10,880 --> 01:11:17,199
another thing i would want to show is

01:11:14,159 --> 01:11:20,560
um you can also to test cute click

01:11:17,199 --> 01:11:23,360
that's um not that come unfortunately

01:11:20,560 --> 01:11:26,239
that you really test acute quick binding

01:11:23,360 --> 01:11:28,239
or cute click class

01:11:26,239 --> 01:11:29,600
a nice way to do it and there are

01:11:28,239 --> 01:11:33,920
different ways

01:11:29,600 --> 01:11:33,920
so the way i prefer is um

01:11:34,000 --> 01:11:41,600
that you

01:11:37,040 --> 01:11:45,199
re start your own um component

01:11:41,600 --> 01:11:48,480
and you have your own qml engine so

01:11:45,199 --> 01:11:49,440
i have some test qma class and i don't

01:11:48,480 --> 01:11:51,760
show it here it's

01:11:49,440 --> 01:11:53,120
simply a really small cute object

01:11:51,760 --> 01:11:55,360
derived

01:11:53,120 --> 01:11:57,360
objects here and has property that i

01:11:55,360 --> 01:12:00,000
call test property

01:11:57,360 --> 01:12:00,800
and then i create an engine i create a

01:12:00,000 --> 01:12:04,080
component

01:12:00,800 --> 01:12:06,320
and i say it's

01:12:04,080 --> 01:12:07,600
about to be created synchronously

01:12:06,320 --> 01:12:10,640
because i'm in a test

01:12:07,600 --> 01:12:13,600
and there it's much better

01:12:10,640 --> 01:12:16,000
i created i see did it quite correctly

01:12:13,600 --> 01:12:19,040
so it's a any syntax probably

01:12:16,000 --> 01:12:21,760
in qml and

01:12:19,040 --> 01:12:23,679
i verify that i have an object i

01:12:21,760 --> 01:12:24,800
verified that it's loaded which should

01:12:23,679 --> 01:12:26,080
be already done because it's

01:12:24,800 --> 01:12:29,120
synchronously

01:12:26,080 --> 01:12:30,000
and then i can directly access the the

01:12:29,120 --> 01:12:32,239
root object

01:12:30,000 --> 01:12:33,360
of the scene that i created and test the

01:12:32,239 --> 01:12:36,560
functionality

01:12:33,360 --> 01:12:40,320
and it was that way um you

01:12:36,560 --> 01:12:43,679
can look at properties and do

01:12:40,320 --> 01:12:47,199
even more complex qml

01:12:43,679 --> 01:12:51,760
operations inside the test qml class

01:12:47,199 --> 01:12:55,040
and provided via properties back

01:12:51,760 --> 01:12:58,480
another way to do it is to use your

01:12:55,040 --> 01:13:00,270
quick test where you have

01:12:58,480 --> 01:13:02,080
acute click based testing

01:13:00,270 --> 01:13:05,120
[Music]

01:13:02,080 --> 01:13:08,159
way to um well

01:13:05,120 --> 01:13:10,640
where you define qml

01:13:08,159 --> 01:13:13,040
functions javascript functions with

01:13:10,640 --> 01:13:14,320
certain operations where you can um

01:13:13,040 --> 01:13:16,400
define that you want to click at

01:13:14,320 --> 01:13:19,440
something and you test if it's uh

01:13:16,400 --> 01:13:22,640
if it really worked um

01:13:19,440 --> 01:13:23,679
but it's tricky sometimes um especially

01:13:22,640 --> 01:13:26,080
if you change

01:13:23,679 --> 01:13:27,600
dimensions and not take care on creating

01:13:26,080 --> 01:13:30,400
tests but sometimes it's

01:13:27,600 --> 01:13:33,679
it's a real way to do it if you have a

01:13:30,400 --> 01:13:36,800
cute click

01:13:33,679 --> 01:13:37,760
um small lessons that i learned over the

01:13:36,800 --> 01:13:41,120
years

01:13:37,760 --> 01:13:44,960
when creating a test you should

01:13:41,120 --> 01:13:47,360
take care that a unit test

01:13:44,960 --> 01:13:48,400
so real test slot is not depending on

01:13:47,360 --> 01:13:51,760
another one

01:13:48,400 --> 01:13:54,480
because it's much easier to um

01:13:51,760 --> 01:13:57,040
well restructure your tests and it's

01:13:54,480 --> 01:14:00,320
never a good idea to have them depend on

01:13:57,040 --> 01:14:03,840
each other you should also not

01:14:00,320 --> 01:14:06,480
uh test production production code um

01:14:03,840 --> 01:14:07,520
there's usually a thing which you call a

01:14:06,480 --> 01:14:11,760
fake

01:14:07,520 --> 01:14:16,159
yeah also a stop and a mock um so it's

01:14:11,760 --> 01:14:18,480
test objects that you have um behind

01:14:16,159 --> 01:14:21,360
that you inject somehow into your scene

01:14:18,480 --> 01:14:21,360
with with uh

01:14:21,760 --> 01:14:26,560
with expected behavior and expected

01:14:25,040 --> 01:14:28,800
answers that make you

01:14:26,560 --> 01:14:31,120
that allow you to test something and

01:14:28,800 --> 01:14:34,320
that makes your test reproducible

01:14:31,120 --> 01:14:36,080
you should also ensure that it has not

01:14:34,320 --> 01:14:40,080
slow because nobody else will

01:14:36,080 --> 01:14:42,239
execute design um you also should not

01:14:40,080 --> 01:14:44,719
test subparty code because if the third

01:14:42,239 --> 01:14:47,199
party code the library is not

01:14:44,719 --> 01:14:47,920
doing doing correctly you should not use

01:14:47,199 --> 01:14:50,560
it

01:14:47,920 --> 01:14:51,840
or you should fix it and provide tests

01:14:50,560 --> 01:14:55,440
to that library because it's

01:14:51,840 --> 01:14:59,199
still open source you should not

01:14:55,440 --> 01:15:02,320
create a test that includes thousands of

01:14:59,199 --> 01:15:04,719
cpp files into the

01:15:02,320 --> 01:15:06,640
into the test case because then it's

01:15:04,719 --> 01:15:07,440
probably some architectural thing that

01:15:06,640 --> 01:15:11,040
you have to

01:15:07,440 --> 01:15:11,760
uh yeah that you have to fix first

01:15:11,040 --> 01:15:14,719
because it's

01:15:11,760 --> 01:15:16,239
uh will not be a substit not um a good

01:15:14,719 --> 01:15:19,760
test in the future

01:15:16,239 --> 01:15:23,120
due to any refactoring you have to do

01:15:19,760 --> 01:15:25,679
um also a good device when talking about

01:15:23,120 --> 01:15:27,199
tests you should also look into

01:15:25,679 --> 01:15:29,199
software patterns there are a lot of

01:15:27,199 --> 01:15:31,440
good books and

01:15:29,199 --> 01:15:33,199
they help you to to write better code

01:15:31,440 --> 01:15:35,600
and better testable code

01:15:33,199 --> 01:15:37,679
and that then allows you to add stubs

01:15:35,600 --> 01:15:40,000
and mocks and fakes

01:15:37,679 --> 01:15:43,280
mostly by introducing interfaces and

01:15:40,000 --> 01:15:43,280
doing other nice tricks

01:15:43,360 --> 01:15:50,400
um okay that was a really short well

01:15:46,800 --> 01:15:52,640
run over what q test is doing and

01:15:50,400 --> 01:15:53,440
well how to get the test now into the

01:15:52,640 --> 01:15:55,360
build system

01:15:53,440 --> 01:15:56,719
that you can uh really execute it on

01:15:55,360 --> 01:16:00,080
your system

01:15:56,719 --> 01:16:02,400
um we are using a cmake

01:16:00,080 --> 01:16:03,360
as a build system and cmake boring

01:16:02,400 --> 01:16:06,880
c-test

01:16:03,360 --> 01:16:10,560
which is mostly a tool to execute tests

01:16:06,880 --> 01:16:11,040
so um you can use c-test to execute all

01:16:10,560 --> 01:16:13,520
of the

01:16:11,040 --> 01:16:15,280
the your q tests and get meaningful

01:16:13,520 --> 01:16:18,400
results of it

01:16:15,280 --> 01:16:21,199
um the documentation is here i want

01:16:18,400 --> 01:16:23,280
will only show um a little bit about how

01:16:21,199 --> 01:16:26,320
to use it

01:16:23,280 --> 01:16:28,960
how to integrate everything into your

01:16:26,320 --> 01:16:29,520
application it's the easiest way is to

01:16:28,960 --> 01:16:32,840
include

01:16:29,520 --> 01:16:35,760
the extra cmake modules at test

01:16:32,840 --> 01:16:38,880
module and then just use this

01:16:35,760 --> 01:16:42,000
cmake macro ecm at test

01:16:38,880 --> 01:16:43,840
edit there that defines the sources of

01:16:42,000 --> 01:16:46,159
your test for example the simple test

01:16:43,840 --> 01:16:48,640
class cpp i had before

01:16:46,159 --> 01:16:50,880
the libraries you want to link to for

01:16:48,640 --> 01:16:54,719
example q test

01:16:50,880 --> 01:16:56,960
give it a name and maybe a prefix

01:16:54,719 --> 01:16:57,920
which we will see at the next slide why

01:16:56,960 --> 01:17:00,480
it's important

01:16:57,920 --> 01:17:02,880
and tell if it's a gui test or not and

01:17:00,480 --> 01:17:07,760
there is some um

01:17:02,880 --> 01:17:07,760
documentation how to use ecma tests

01:17:08,159 --> 01:17:11,440
and well if you did all of that and then

01:17:10,320 --> 01:17:13,360
you compile it

01:17:11,440 --> 01:17:15,120
then you can go to your build directory

01:17:13,360 --> 01:17:18,320
and run

01:17:15,120 --> 01:17:19,280
c test minus n and you see a list of all

01:17:18,320 --> 01:17:22,480
available tests

01:17:19,280 --> 01:17:23,360
and you can use c test minus r and you

01:17:22,480 --> 01:17:26,640
run all tests

01:17:23,360 --> 01:17:28,719
or minus r minus v and you get some um

01:17:26,640 --> 01:17:31,679
meaningful output at the point where

01:17:28,719 --> 01:17:34,880
there is some important test output

01:17:31,679 --> 01:17:37,840
you can also tell that you want to have

01:17:34,880 --> 01:17:40,400
output when a test fails because usually

01:17:37,840 --> 01:17:43,679
you only get a list of results

01:17:40,400 --> 01:17:47,840
and for the daily work the most

01:17:43,679 --> 01:17:47,840
meaningful in my opinion is um

01:17:48,320 --> 01:17:52,880
c test minus r and something

01:17:51,360 --> 01:17:55,040
and that runs just the tests that

01:17:52,880 --> 01:17:58,159
contain that word

01:17:55,040 --> 01:18:01,199
and that's a really really really

01:17:58,159 --> 01:18:03,280
important to to just run

01:18:01,199 --> 01:18:04,719
the test for for the codes that you're

01:18:03,280 --> 01:18:06,640
running at the moment

01:18:04,719 --> 01:18:07,760
and for convenience we also have make

01:18:06,640 --> 01:18:10,320
test and that is just

01:18:07,760 --> 01:18:13,679
running c test with all the tests and

01:18:10,320 --> 01:18:17,520
that's it

01:18:13,679 --> 01:18:20,640
okay um and well not only you

01:18:17,520 --> 01:18:23,600
are running tests uh also rci is running

01:18:20,640 --> 01:18:25,840
tests so at build.kde.org you can

01:18:23,600 --> 01:18:27,280
see for your project except for the

01:18:25,840 --> 01:18:29,840
playground projects

01:18:27,280 --> 01:18:31,679
uh test ones and they are run on

01:18:29,840 --> 01:18:34,239
different architectures

01:18:31,679 --> 01:18:35,360
so on the they are one on souza and on

01:18:34,239 --> 01:18:38,640
freebsd

01:18:35,360 --> 01:18:42,000
and against civil um

01:18:38,640 --> 01:18:45,040
several um future versions and that

01:18:42,000 --> 01:18:48,159
gives you a good coverage of systems

01:18:45,040 --> 01:18:49,679
um to see if everything works nicely and

01:18:48,159 --> 01:18:51,840
if it's possible

01:18:49,679 --> 01:18:52,960
possibly only one on your system because

01:18:51,840 --> 01:18:56,000
you have some

01:18:52,960 --> 01:18:58,560
oil test data lying around

01:18:56,000 --> 01:19:00,600
a good thing to do today is if you have

01:18:58,560 --> 01:19:02,640
a project to maintain just go to

01:19:00,600 --> 01:19:05,760
build.kde.org and check if all your

01:19:02,640 --> 01:19:05,760
tests are green there

01:19:06,080 --> 01:19:09,280
that's really important to to really

01:19:08,480 --> 01:19:11,920
have a look at

01:19:09,280 --> 01:19:12,640
at the system because we have it and as

01:19:11,920 --> 01:19:16,159
and now

01:19:12,640 --> 01:19:18,640
files are now in the future you can um

01:19:16,159 --> 01:19:22,159
uh you will have the possibility to get

01:19:18,640 --> 01:19:24,800
results even earlier directly in gitlab

01:19:22,159 --> 01:19:27,080
but that's an ongoing thing another nice

01:19:24,800 --> 01:19:29,600
thing you can use at

01:19:27,080 --> 01:19:32,400
build.kde.org is um

01:19:29,600 --> 01:19:34,000
to see the gcf coverage gcaf is a small

01:19:32,400 --> 01:19:37,120
tool that simply locks

01:19:34,000 --> 01:19:37,520
which line of code which um possible

01:19:37,120 --> 01:19:40,719
code

01:19:37,520 --> 01:19:42,239
path is executed by your test and if you

01:19:40,719 --> 01:19:45,520
go there you see uh

01:19:42,239 --> 01:19:47,760
for all your modules which

01:19:45,520 --> 01:19:49,199
has a good test coverage and which not

01:19:47,760 --> 01:19:50,480
and i think the most important point

01:19:49,199 --> 01:19:53,040
here is to see um

01:19:50,480 --> 01:19:54,400
where are the completely red corners the

01:19:53,040 --> 01:19:56,880
corners where you could

01:19:54,400 --> 01:19:58,480
forgot to to write any test maybe it's

01:19:56,880 --> 01:20:01,040
very old test

01:19:58,480 --> 01:20:01,840
however it got there but that's the

01:20:01,040 --> 01:20:06,080
point um

01:20:01,840 --> 01:20:09,280
where you can see at improving it

01:20:06,080 --> 01:20:12,400
okay and

01:20:09,280 --> 01:20:14,960
that's what i prepared for now and i

01:20:12,400 --> 01:20:17,840
think we have some minutes for questions

01:20:14,960 --> 01:20:19,520
are there questions yes indeed we have

01:20:17,840 --> 01:20:22,000
thank you very much for this

01:20:19,520 --> 01:20:23,199
session uploads in the chat please and

01:20:22,000 --> 01:20:26,560
we we have a few

01:20:23,199 --> 01:20:29,360
questions so starting with

01:20:26,560 --> 01:20:31,520
in in ubuntu we spend lots of energy

01:20:29,360 --> 01:20:33,520
running tests when we build packages

01:20:31,520 --> 01:20:35,199
but whenever something went wrong the

01:20:33,520 --> 01:20:37,760
developers would say

01:20:35,199 --> 01:20:42,000
those tests are more for me is it useful

01:20:37,760 --> 01:20:42,000
for these through packages to run tests

01:20:42,639 --> 01:20:49,280
in my opinion yes but we have to ensure

01:20:46,000 --> 01:20:52,639
in kde that tests are always green

01:20:49,280 --> 01:20:54,000
um and right now it's complicated

01:20:52,639 --> 01:20:57,760
because we have to split between

01:20:54,000 --> 01:21:00,719
um uh pull requests and ci

01:20:57,760 --> 01:21:02,000
and i think it will be much better in

01:21:00,719 --> 01:21:06,480
the future um

01:21:02,000 --> 01:21:08,880
when we have um um test reports directly

01:21:06,480 --> 01:21:09,600
in in gitlab before we complete the

01:21:08,880 --> 01:21:12,000
merge

01:21:09,600 --> 01:21:12,960
so we see everything is green and it

01:21:12,000 --> 01:21:15,440
should be green

01:21:12,960 --> 01:21:16,880
and at that point i think it's

01:21:15,440 --> 01:21:20,320
reasonable to tell

01:21:16,880 --> 01:21:22,239
um packages that tests are

01:21:20,320 --> 01:21:23,360
guaranteed to be green and they should

01:21:22,239 --> 01:21:26,320
run it again and

01:21:23,360 --> 01:21:27,120
um then it's it's still green at the

01:21:26,320 --> 01:21:31,360
moment it's

01:21:27,120 --> 01:21:33,520
it's hard to for some projects they

01:21:31,360 --> 01:21:35,199
they are already in for others not

01:21:33,520 --> 01:21:37,920
that's not good

01:21:35,199 --> 01:21:38,719
okay thanks um next question do you have

01:21:37,920 --> 01:21:40,400
experience with

01:21:38,719 --> 01:21:42,320
other popular c plus plus test

01:21:40,400 --> 01:21:44,560
frameworks q test sketch 2

01:21:42,320 --> 01:21:46,000
doc test and how do they compare to q

01:21:44,560 --> 01:21:48,320
test

01:21:46,000 --> 01:21:48,940
not much i looked a little bit in g test

01:21:48,320 --> 01:21:50,239
but

01:21:48,940 --> 01:21:52,560
[Music]

01:21:50,239 --> 01:21:53,760
i'm quite happy with the combination of

01:21:52,560 --> 01:21:56,239
c test and

01:21:53,760 --> 01:21:57,280
q test except one point and that's the

01:21:56,239 --> 01:21:59,120
acute creator

01:21:57,280 --> 01:22:00,560
integration in k develop we have a

01:21:59,120 --> 01:22:03,199
really nice integration

01:22:00,560 --> 01:22:04,960
where you can really run all the three

01:22:03,199 --> 01:22:08,159
tests

01:22:04,960 --> 01:22:10,560
differently in qt compute uh

01:22:08,159 --> 01:22:11,360
the develop acute creator it's really

01:22:10,560 --> 01:22:14,639
hard because

01:22:11,360 --> 01:22:17,280
um the c-test test

01:22:14,639 --> 01:22:18,400
properties that you can also define to

01:22:17,280 --> 01:22:20,239
adapt your tests

01:22:18,400 --> 01:22:21,840
uh behavior a little bit are completely

01:22:20,239 --> 01:22:24,159
ignored because they're only

01:22:21,840 --> 01:22:25,520
executables that you can execute and

01:22:24,159 --> 01:22:28,880
they have better

01:22:25,520 --> 01:22:32,719
support for other test finders

01:22:28,880 --> 01:22:34,639
okay thanks now someone from python and

01:22:32,719 --> 01:22:38,320
java background is asking for a good

01:22:34,639 --> 01:22:41,440
solution for mocking

01:22:38,320 --> 01:22:43,120
uh sorry i don't have experience with

01:22:41,440 --> 01:22:46,159
mocking frameworks usually i write

01:22:43,120 --> 01:22:49,520
my box my box by hand i know there's g

01:22:46,159 --> 01:22:52,080
mark that is used by several people um

01:22:49,520 --> 01:22:53,600
sorry for that yeah i think the person

01:22:52,080 --> 01:22:56,880
is asking for c plus plus

01:22:53,600 --> 01:22:59,600
uh yes it's the same for me i

01:22:56,880 --> 01:23:01,280
um i have not much experience with

01:22:59,600 --> 01:23:04,159
mocking frameworks uh

01:23:01,280 --> 01:23:05,760
writing works by hand okay and i think

01:23:04,159 --> 01:23:09,920
we have time for one more

01:23:05,760 --> 01:23:12,000
does it matter if a test is reproducible

01:23:09,920 --> 01:23:13,120
it's so important that the test is

01:23:12,000 --> 01:23:15,520
reproducible

01:23:13,120 --> 01:23:17,040
if it's not reproducible then it doesn't

01:23:15,520 --> 01:23:18,800
make sense because

01:23:17,040 --> 01:23:20,880
sometimes it behaves that way sometimes

01:23:18,800 --> 01:23:23,520
the other way so you should really

01:23:20,880 --> 01:23:24,239
assure that the test is reproducible

01:23:23,520 --> 01:23:27,040
mostly by

01:23:24,239 --> 01:23:27,760
ensuring that they are not dependencies

01:23:27,040 --> 01:23:30,880
to your

01:23:27,760 --> 01:23:34,000
to your um test system that

01:23:30,880 --> 01:23:35,440
you set everything up by hand that's not

01:23:34,000 --> 01:23:37,600
a good idea that you should

01:23:35,440 --> 01:23:39,280
set it up automatically you should clean

01:23:37,600 --> 01:23:39,840
the bilge directory where you run the

01:23:39,280 --> 01:23:43,360
test

01:23:39,840 --> 01:23:46,080
and so on okay

01:23:43,360 --> 01:23:47,600
thank you and i think we're just out of

01:23:46,080 --> 01:23:49,360
time

01:23:47,600 --> 01:23:51,520
thank you again very much for this

01:23:49,360 --> 01:23:55,120
session uploads in the chat please for

01:23:51,520 --> 01:24:03,840
andreas and we'll be back with david in

01:23:55,120 --> 01:24:03,840
a few

01:25:29,760 --> 01:25:35,760
okay we seem to have everything under

01:25:32,400 --> 01:25:35,760
control here david is

01:25:36,239 --> 01:25:41,840
ready to present in four minutes

01:25:51,840 --> 01:25:55,840
how are you everyone

01:25:57,520 --> 01:26:09,840
what's the session you're looking

01:25:58,960 --> 01:26:09,840
forward to most today

01:27:25,199 --> 01:27:32,639
david instead of preparing for

01:27:28,400 --> 01:27:37,280
his talk is just active in the chat

01:27:32,639 --> 01:27:39,920
answering questions asking questions

01:27:37,280 --> 01:27:39,920
is a machine

01:27:43,120 --> 01:27:47,840
you think now is the right time to

01:27:44,560 --> 01:27:47,840
prepare for my talk

01:27:49,120 --> 01:27:54,880
i mean to you know take a

01:27:52,719 --> 01:27:56,400
deep breath get a glass of water i don't

01:27:54,880 --> 01:28:00,000
know what's your

01:27:56,400 --> 01:28:03,760
process maybe your process is just being

01:28:00,000 --> 01:28:03,760
the most active person in the chat

01:28:11,760 --> 01:28:15,840
will be starting in one minute

01:28:19,280 --> 01:28:23,199
i was told there will be some time for q

01:28:21,760 --> 01:28:25,760
a

01:28:23,199 --> 01:28:27,280
so you know where to post your questions

01:28:25,760 --> 01:28:43,840
right

01:28:27,280 --> 01:28:43,840
in the third node section

01:28:53,440 --> 01:28:57,760
and we should be ready to start with

01:28:55,600 --> 01:29:00,159
david who will be telling us about

01:28:57,760 --> 01:29:00,159
jobs

01:29:04,400 --> 01:29:09,520
yep here i am hello everyone uh so this

01:29:07,280 --> 01:29:11,199
is going to be about kio

01:29:09,520 --> 01:29:13,520
i realized a few days ago that some

01:29:11,199 --> 01:29:16,960
people have no idea what kio is

01:29:13,520 --> 01:29:19,600
which is interesting to me but actually

01:29:16,960 --> 01:29:21,199
this talk is more about the old jobs and

01:29:19,600 --> 01:29:22,880
the new jobs and what

01:29:21,199 --> 01:29:25,040
is changing with the new jobs and sort

01:29:22,880 --> 01:29:26,880
of a bit of movement over there

01:29:25,040 --> 01:29:28,960
and you will get an opportunity to give

01:29:26,880 --> 01:29:30,000
me some design input at the end because

01:29:28,960 --> 01:29:33,199
there are some open

01:29:30,000 --> 01:29:34,960
questions um right somehow i should be

01:29:33,199 --> 01:29:37,040
able to get to the next slide

01:29:34,960 --> 01:29:38,239
there we are so the template has an

01:29:37,040 --> 01:29:40,080
about me

01:29:38,239 --> 01:29:41,679
slide so of course i have to you know

01:29:40,080 --> 01:29:44,159
put a dinosaur picture in there

01:29:41,679 --> 01:29:45,520
i've been around for a long time and kao

01:29:44,159 --> 01:29:48,000
actually comes from

01:29:45,520 --> 01:29:48,719
the original file manager in ke1 called

01:29:48,000 --> 01:29:50,880
kfm

01:29:48,719 --> 01:29:53,199
it was extracted from there and then

01:29:50,880 --> 01:29:54,800
reused so yeah very long

01:29:53,199 --> 01:29:56,639
history in there and this will explain a

01:29:54,800 --> 01:29:59,199
few things in this talk

01:29:56,639 --> 01:30:01,360
um so actually one of the things that is

01:29:59,199 --> 01:30:02,560
important to start with is asynchronous

01:30:01,360 --> 01:30:05,199
jobs

01:30:02,560 --> 01:30:07,040
the key coverance framework defines a

01:30:05,199 --> 01:30:08,480
class called k-job which allows you to

01:30:07,040 --> 01:30:11,520
do

01:30:08,480 --> 01:30:14,080
work asynchronously so as the user

01:30:11,520 --> 01:30:15,840
of the job you would create the job

01:30:14,080 --> 01:30:18,080
connect to the result signal

01:30:15,840 --> 01:30:19,679
and then start the job and the job can

01:30:18,080 --> 01:30:21,280
do whatever right it can

01:30:19,679 --> 01:30:22,719
the the whole point of that is to do

01:30:21,280 --> 01:30:24,800
things that um

01:30:22,719 --> 01:30:26,239
actually use signals and slots on the

01:30:24,800 --> 01:30:28,159
event loop and take time it could be

01:30:26,239 --> 01:30:29,120
timers and sockets and processes and

01:30:28,159 --> 01:30:30,880
whatever

01:30:29,120 --> 01:30:32,880
and at some point the job is done your

01:30:30,880 --> 01:30:34,560
slot is called and this is where you do

01:30:32,880 --> 01:30:36,239
the error handling

01:30:34,560 --> 01:30:38,239
the one thing i would like to draw your

01:30:36,239 --> 01:30:40,239
attention on is explicit start

01:30:38,239 --> 01:30:42,080
at the k job level you have to start the

01:30:40,239 --> 01:30:43,840
jobs explicitly

01:30:42,080 --> 01:30:45,440
uh just like you would you know you

01:30:43,840 --> 01:30:46,639
start threads explicitly you start jobs

01:30:45,440 --> 01:30:48,560
explicitly it's kind of

01:30:46,639 --> 01:30:50,320
consistent there but we'll see that for

01:30:48,560 --> 01:30:51,280
historical reasons this is not the case

01:30:50,320 --> 01:30:54,159
in

01:30:51,280 --> 01:30:55,840
the old kio jobs right so this is not

01:30:54,159 --> 01:30:56,960
about threading at all this is all about

01:30:55,840 --> 01:31:00,000
stuff that runs

01:30:56,960 --> 01:31:01,760
in the main thread let's say

01:31:00,000 --> 01:31:03,440
it's all about going back to the event

01:31:01,760 --> 01:31:05,840
loop waiting for things to happen and

01:31:03,440 --> 01:31:07,520
then signals get emitted

01:31:05,840 --> 01:31:08,880
uh it could be combined with threats but

01:31:07,520 --> 01:31:11,840
that's not the point right

01:31:08,880 --> 01:31:12,560
all of it is mostly used without threats

01:31:11,840 --> 01:31:15,199
um

01:31:12,560 --> 01:31:16,880
right so this is how we use a job it's

01:31:15,199 --> 01:31:19,600
used for many different things

01:31:16,880 --> 01:31:21,600
um in k cordons itself we have a list

01:31:19,600 --> 01:31:23,760
open files job this is the thing that

01:31:21,600 --> 01:31:24,719
tells you you cannot unmount this usb

01:31:23,760 --> 01:31:26,960
drive because

01:31:24,719 --> 01:31:28,239
you still have these processes running

01:31:26,960 --> 01:31:31,120
and using it

01:31:28,239 --> 01:31:33,360
this is a job around a key process which

01:31:31,120 --> 01:31:35,600
itself is asynchronous

01:31:33,360 --> 01:31:36,960
very often we have jobs around sockets

01:31:35,600 --> 01:31:38,800
um

01:31:36,960 --> 01:31:40,159
direct user sockets or key network

01:31:38,800 --> 01:31:41,679
access manager

01:31:40,159 --> 01:31:44,400
for instance you would find that in

01:31:41,679 --> 01:31:47,760
purpose the youtube job for instance

01:31:44,400 --> 01:31:48,960
plasma uses jobs for doing blocking

01:31:47,760 --> 01:31:51,360
operations in a thread

01:31:48,960 --> 01:31:53,199
and then the job itself does not block

01:31:51,360 --> 01:31:54,639
it tells you when the thread is actually

01:31:53,199 --> 01:31:57,440
done

01:31:54,639 --> 01:31:59,120
which is a nice way to solve the problem

01:31:57,440 --> 01:32:00,080
of how do you do blocking operations

01:31:59,120 --> 01:32:02,320
right

01:32:00,080 --> 01:32:04,320
without blocking the gui and of course

01:32:02,320 --> 01:32:06,320
the one that is closest to

01:32:04,320 --> 01:32:07,840
this presentation is the jobs that we

01:32:06,320 --> 01:32:10,639
have in kio

01:32:07,840 --> 01:32:12,159
where we want to list files on an ftp

01:32:10,639 --> 01:32:13,920
server how do we do that

01:32:12,159 --> 01:32:16,080
we dedicate that work to a separate

01:32:13,920 --> 01:32:18,400
process called an io slave

01:32:16,080 --> 01:32:19,840
and we talk to that process using a

01:32:18,400 --> 01:32:23,520
local socket

01:32:19,840 --> 01:32:24,719
so this is again a job around socket

01:32:23,520 --> 01:32:26,080
usage

01:32:24,719 --> 01:32:28,159
except that it's not the circuit to the

01:32:26,080 --> 01:32:30,159
ftp server this is the socket to the i o

01:32:28,159 --> 01:32:32,080
slave which itself has a socket to the

01:32:30,159 --> 01:32:33,280
ftp server because you know why make it

01:32:32,080 --> 01:32:35,679
simple

01:32:33,280 --> 01:32:35,679
all right

01:32:36,800 --> 01:32:40,800
so one of the things that is actually

01:32:39,520 --> 01:32:44,000
useful there is

01:32:40,800 --> 01:32:47,440
a job is very often a composition

01:32:44,000 --> 01:32:48,400
of other jobs so keiko adams also has a

01:32:47,440 --> 01:32:50,880
class called k

01:32:48,400 --> 01:32:52,239
composite job which is a job with child

01:32:50,880 --> 01:32:55,120
jobs

01:32:52,239 --> 01:32:56,000
it doesn't do very much all it does is

01:32:55,120 --> 01:32:58,239
keep a list of

01:32:56,000 --> 01:33:00,560
child jobs and you can add and remove

01:32:58,239 --> 01:33:02,800
and it can propagate errors

01:33:00,560 --> 01:33:03,760
um in your own job when you derive from

01:33:02,800 --> 01:33:05,920
this and you

01:33:03,760 --> 01:33:06,880
you create some jobs and and decide what

01:33:05,920 --> 01:33:08,960
to do with it

01:33:06,880 --> 01:33:11,040
it's your own choice whether you want to

01:33:08,960 --> 01:33:14,239
have child jobs one for the other

01:33:11,040 --> 01:33:14,960
what i call serial or parallel if you

01:33:14,239 --> 01:33:18,000
have to

01:33:14,960 --> 01:33:19,199
um if you can do multiple child jobs in

01:33:18,000 --> 01:33:20,560
parallel and then

01:33:19,199 --> 01:33:22,800
you're only done when all of them are

01:33:20,560 --> 01:33:24,960
done or it could even be a

01:33:22,800 --> 01:33:26,320
mix of both where you have you know one

01:33:24,960 --> 01:33:28,480
job and then when it's done you have

01:33:26,320 --> 01:33:30,639
three jobs in parallel and so on

01:33:28,480 --> 01:33:32,800
and this is completely up to you up to

01:33:30,639 --> 01:33:34,800
the subclass

01:33:32,800 --> 01:33:35,920
which can be a little bit confusing when

01:33:34,800 --> 01:33:36,800
you use this class because you might

01:33:35,920 --> 01:33:38,800
assume it does

01:33:36,800 --> 01:33:40,800
some things automatically like you know

01:33:38,800 --> 01:33:42,719
when all of the child jobs are done then

01:33:40,800 --> 01:33:44,239
surely we are done well not necessarily

01:33:42,719 --> 01:33:45,360
so it doesn't know so you have to do

01:33:44,239 --> 01:33:48,400
that

01:33:45,360 --> 01:33:48,960
um so the way it's it works right now is

01:33:48,400 --> 01:33:50,719
that it

01:33:48,960 --> 01:33:52,719
takes care of errors and it will stop

01:33:50,719 --> 01:33:54,800
the parent job in case of an error

01:33:52,719 --> 01:33:55,760
but you have to handle the non-error

01:33:54,800 --> 01:33:58,000
cases

01:33:55,760 --> 01:34:00,000
for some reason it also doesn't handle

01:33:58,000 --> 01:34:01,360
suspend and resume and kill

01:34:00,000 --> 01:34:03,280
this is the kind of thing that could

01:34:01,360 --> 01:34:04,960
actually be added there to make it more

01:34:03,280 --> 01:34:07,679
convenient to write

01:34:04,960 --> 01:34:08,239
composite jobs this is basically based

01:34:07,679 --> 01:34:10,400
on the

01:34:08,239 --> 01:34:11,760
composite pattern one of the well-known

01:34:10,400 --> 01:34:14,800
super space patterns

01:34:11,760 --> 01:34:17,199
where a composite job is a job itself

01:34:14,800 --> 01:34:19,360
which means we can nest them as much as

01:34:17,199 --> 01:34:21,760
we want

01:34:19,360 --> 01:34:21,760
right

01:34:23,440 --> 01:34:28,719
so back to kio now kio uses

01:34:26,800 --> 01:34:30,480
jobs for everything it's basically the

01:34:28,719 --> 01:34:33,600
api we have for

01:34:30,480 --> 01:34:35,679
delegating work to ios slaves one of the

01:34:33,600 --> 01:34:36,239
historical things is that the auto start

01:34:35,679 --> 01:34:39,440
unlike

01:34:36,239 --> 01:34:41,440
kjob um the k

01:34:39,440 --> 01:34:42,639
jobs came first and then k job was

01:34:41,440 --> 01:34:45,360
extracted from that

01:34:42,639 --> 01:34:46,480
by kevin and then he did the right thing

01:34:45,360 --> 01:34:47,600
in kjam it's

01:34:46,480 --> 01:34:49,440
you know what you would expect you have

01:34:47,600 --> 01:34:50,560
to start the job but in ko for

01:34:49,440 --> 01:34:53,280
historical reasons

01:34:50,560 --> 01:34:54,639
they just auto start magically which

01:34:53,280 --> 01:34:58,000
could be a little bit confusing

01:34:54,639 --> 01:35:00,719
if you're used to k job so there are

01:34:58,000 --> 01:35:03,840
many jobs in kio um

01:35:00,719 --> 01:35:05,119
what we call simple jobs like mkid where

01:35:03,840 --> 01:35:08,320
all that the job does

01:35:05,119 --> 01:35:08,960
is create a slave and or use an existing

01:35:08,320 --> 01:35:10,800
slave

01:35:08,960 --> 01:35:12,800
send one command to it wait for the

01:35:10,800 --> 01:35:14,320
command to be done and then the job is

01:35:12,800 --> 01:35:16,239
done right it's very simple

01:35:14,320 --> 01:35:17,600
same thing for file deletion it's really

01:35:16,239 --> 01:35:19,679
just one command

01:35:17,600 --> 01:35:21,360
but there are some more complex jobs if

01:35:19,679 --> 01:35:22,800
you think about carrier copy which can

01:35:21,360 --> 01:35:26,080
copy directories

01:35:22,800 --> 01:35:27,520
or even so it's one file or many files

01:35:26,080 --> 01:35:28,320
one directory or many directories

01:35:27,520 --> 01:35:30,480
anything you can

01:35:28,320 --> 01:35:32,000
drag and drop in dolphin then it has to

01:35:30,480 --> 01:35:34,000
do a whole lot of work

01:35:32,000 --> 01:35:35,679
uh figuring out you know listing the

01:35:34,000 --> 01:35:37,360
directories figure out what we have to

01:35:35,679 --> 01:35:38,320
copy and checking there is enough space

01:35:37,360 --> 01:35:40,480
at destination

01:35:38,320 --> 01:35:42,320
and and then it starts creating

01:35:40,480 --> 01:35:44,159
directories and

01:35:42,320 --> 01:35:45,679
the same job can also do moving so all

01:35:44,159 --> 01:35:47,679
of that has to be handled in there it's

01:35:45,679 --> 01:35:50,159
a rather complex state machine

01:35:47,679 --> 01:35:51,679
which is all based on sub-jobs same

01:35:50,159 --> 01:35:53,199
thing for deletion it can handle

01:35:51,679 --> 01:35:56,239
directories so it has to do a lot of

01:35:53,199 --> 01:35:58,080
work there

01:35:56,239 --> 01:35:59,360
but i think the whole design has proven

01:35:58,080 --> 01:36:02,400
to work rather well

01:35:59,360 --> 01:36:05,679
over the years now the

01:36:02,400 --> 01:36:08,000
the black beast in all of this was karen

01:36:05,679 --> 01:36:10,080
this is or this was because the whole

01:36:08,000 --> 01:36:11,520
point here is we are killing karen so

01:36:10,080 --> 01:36:14,480
karen used to be about

01:36:11,520 --> 01:36:15,119
many many things find what a url is

01:36:14,480 --> 01:36:16,880
right you

01:36:15,119 --> 01:36:18,800
click on the link or you type a url

01:36:16,880 --> 01:36:20,719
somewhere we have to figure out what it

01:36:18,800 --> 01:36:22,880
is what's the mime type is this a png

01:36:20,719 --> 01:36:26,000
file is this the directory or whatever

01:36:22,880 --> 01:36:28,800
once we know we can open that file

01:36:26,000 --> 01:36:30,560
in the associated application it also

01:36:28,800 --> 01:36:32,080
implements in there the security check

01:36:30,560 --> 01:36:35,119
that the desktop files have to be

01:36:32,080 --> 01:36:37,280
executable or they have to come from a

01:36:35,119 --> 01:36:40,320
one known directory like user share

01:36:37,280 --> 01:36:42,080
applications and so that's part of it it

01:36:40,320 --> 01:36:42,639
has to trigger a startup notification

01:36:42,080 --> 01:36:45,520
that's the

01:36:42,639 --> 01:36:46,800
bouncy stuff you get in your taskbar uh

01:36:45,520 --> 01:36:48,719
it has to handle

01:36:46,800 --> 01:36:49,840
special cases like scripts and

01:36:48,719 --> 01:36:53,119
executables

01:36:49,840 --> 01:36:55,280
when you click on an actual exit table

01:36:53,119 --> 01:36:57,119
and then karen had some more bloat in

01:36:55,280 --> 01:37:00,239
there because it was subclassed

01:36:57,119 --> 01:37:02,800
by html and conqueror and

01:37:00,239 --> 01:37:03,520
a bunch of other places to be able to

01:37:02,800 --> 01:37:06,560
say okay

01:37:03,520 --> 01:37:07,679
once we know what this url is instead of

01:37:06,560 --> 01:37:10,960
opening it in an

01:37:07,679 --> 01:37:12,400
external application let's just embed a

01:37:10,960 --> 01:37:15,199
k-part component instead

01:37:12,400 --> 01:37:17,679
basically what conqueror was doing so

01:37:15,199 --> 01:37:20,239
this is a useful feature but it was just

01:37:17,679 --> 01:37:21,760
too many things for one class on top of

01:37:20,239 --> 01:37:23,199
that because it wasn't enough we also

01:37:21,760 --> 01:37:26,400
had static methods

01:37:23,199 --> 01:37:28,800
in there to run any kind of

01:37:26,400 --> 01:37:30,320
shell command to launch an application

01:37:28,800 --> 01:37:32,080
once we know the mime type so

01:37:30,320 --> 01:37:34,239
which is really just the second part of

01:37:32,080 --> 01:37:35,199
cairn so if we know the mime type then

01:37:34,239 --> 01:37:39,199
we don't actually

01:37:35,199 --> 01:37:40,960
need to start a kirin job

01:37:39,199 --> 01:37:43,199
we could just say okay find the app and

01:37:40,960 --> 01:37:45,119
start it

01:37:43,199 --> 01:37:46,239
if we actually know the app then we we

01:37:45,119 --> 01:37:48,719
also had a method to say

01:37:46,239 --> 01:37:50,320
run this application and then if there

01:37:48,719 --> 01:37:52,880
is no associated application

01:37:50,320 --> 01:37:53,440
for a url then we had this open with

01:37:52,880 --> 01:37:57,199
dialogue

01:37:53,440 --> 01:37:58,400
so more methods there now that was a lot

01:37:57,199 --> 01:38:00,960
of things for one class

01:37:58,400 --> 01:38:01,440
and also this was all very tied to q

01:38:00,960 --> 01:38:04,560
widget

01:38:01,440 --> 01:38:06,880
and some among you who like qml said

01:38:04,560 --> 01:38:08,960
this is not so good so i've spent quite

01:38:06,880 --> 01:38:12,000
some time to rework all of this

01:38:08,960 --> 01:38:15,199
into separate jobs that also don't

01:38:12,000 --> 01:38:16,800
have any relationship with q widget and

01:38:15,199 --> 01:38:17,199
so let's have a look at how that was

01:38:16,800 --> 01:38:20,400
done

01:38:17,199 --> 01:38:23,040
the very first step was extracting the

01:38:20,400 --> 01:38:24,719
common launcher job which is this is the

01:38:23,040 --> 01:38:28,400
shell command as a q string

01:38:24,719 --> 01:38:31,440
please execute that sounds simple enough

01:38:28,400 --> 01:38:34,320
this is a k job so that you get um

01:38:31,440 --> 01:38:34,880
you basically the job finishes when once

01:38:34,320 --> 01:38:37,199
the

01:38:34,880 --> 01:38:38,400
command has been started not when the

01:38:37,199 --> 01:38:39,920
command finishes

01:38:38,400 --> 01:38:41,520
because maybe that command starts

01:38:39,920 --> 01:38:44,480
firefox and the user is going to use

01:38:41,520 --> 01:38:46,239
firefox for the next eight hours and the

01:38:44,480 --> 01:38:46,800
job doesn't run for that long the job

01:38:46,239 --> 01:38:49,280
simply

01:38:46,800 --> 01:38:51,119
makes sure that we managed to find

01:38:49,280 --> 01:38:52,880
whatever we wanted to start and it seems

01:38:51,119 --> 01:38:53,199
to have started without crashing and

01:38:52,880 --> 01:38:56,080
then

01:38:53,199 --> 01:38:56,960
okay my job's done so all we have to do

01:38:56,080 --> 01:38:59,280
in there is

01:38:56,960 --> 01:39:01,040
startup notification and error handling

01:38:59,280 --> 01:39:03,600
so this one is simple enough it's a good

01:39:01,040 --> 01:39:05,199
thing to have it separate

01:39:03,600 --> 01:39:07,199
and that that means we can use this

01:39:05,199 --> 01:39:09,600
asynchronously and without any queue

01:39:07,199 --> 01:39:09,600
widget

01:39:10,080 --> 01:39:13,199
how about we want to start applications

01:39:12,400 --> 01:39:15,840
uh so

01:39:13,199 --> 01:39:17,920
things with desktop files and that's

01:39:15,840 --> 01:39:21,440
where you use application launcher job

01:39:17,920 --> 01:39:24,080
you give it the desktop file to start

01:39:21,440 --> 01:39:25,199
actually desktop files are modeled in

01:39:24,080 --> 01:39:27,440
our code

01:39:25,199 --> 01:39:28,560
by the class k service so you would

01:39:27,440 --> 01:39:30,159
normally what you do is

01:39:28,560 --> 01:39:33,440
you look up the k service for that

01:39:30,159 --> 01:39:35,520
desktop file which uses a cache kc

01:39:33,440 --> 01:39:36,880
and then we pass that to application

01:39:35,520 --> 01:39:40,159
launcher job which can then

01:39:36,880 --> 01:39:42,159
start this application

01:39:40,159 --> 01:39:44,159
it has the code for the security checks

01:39:42,159 --> 01:39:45,920
it's able to pass urls to the

01:39:44,159 --> 01:39:48,639
application obviously that's one of the

01:39:45,920 --> 01:39:49,360
important things and just like karen

01:39:48,639 --> 01:39:51,600
used to do

01:39:49,360 --> 01:39:53,280
it has this logic where if the

01:39:51,600 --> 01:39:54,719
application supports only one file at a

01:39:53,280 --> 01:39:58,000
time and it says so

01:39:54,719 --> 01:40:00,719
with percent f or percent lowercase u

01:39:58,000 --> 01:40:02,560
in the exact line then we have to start

01:40:00,719 --> 01:40:04,159
multiple instances of that application

01:40:02,560 --> 01:40:07,600
if we want to open multiple

01:40:04,159 --> 01:40:10,000
urls so the code is in there to say okay

01:40:07,600 --> 01:40:10,480
it doesn't seem to support multiple urls

01:40:10,000 --> 01:40:12,639
then

01:40:10,480 --> 01:40:13,600
let's start multiple instances of it and

01:40:12,639 --> 01:40:15,440
then the user gets

01:40:13,600 --> 01:40:17,440
spammed with 20 windows but that's what

01:40:15,440 --> 01:40:18,880
you asked for

01:40:17,440 --> 01:40:20,960
but obviously if the application does

01:40:18,880 --> 01:40:22,000
support multiple files then it uses

01:40:20,960 --> 01:40:24,400
uppercase f or

01:40:22,000 --> 01:40:26,000
uppercase u and then we know that it

01:40:24,400 --> 01:40:27,679
supports that and we just give it all of

01:40:26,000 --> 01:40:29,600
the urls

01:40:27,679 --> 01:40:32,400
it has support for temporary files this

01:40:29,600 --> 01:40:34,880
is a less well-known feature

01:40:32,400 --> 01:40:37,040
if you set the well if you call the

01:40:34,880 --> 01:40:38,639
center that says these urls are actually

01:40:37,040 --> 01:40:41,119
temporary files

01:40:38,639 --> 01:40:43,119
then we can pass that to the application

01:40:41,119 --> 01:40:46,000
and if the application supports it which

01:40:43,119 --> 01:40:46,560
some of the kde apps do the app itself

01:40:46,000 --> 01:40:48,880
will get

01:40:46,560 --> 01:40:49,600
a command line argument that says 10

01:40:48,880 --> 01:40:51,280
files

01:40:49,600 --> 01:40:53,760
and it will delete the files once it's

01:40:51,280 --> 01:40:54,080
done with it if the app does not support

01:40:53,760 --> 01:40:56,080
it

01:40:54,080 --> 01:40:57,840
then we try to handle that in the job

01:40:56,080 --> 01:41:00,159
and do the digital ourselves

01:40:57,840 --> 01:41:01,360
after the app is done which has issues

01:41:00,159 --> 01:41:02,560
right the process could return

01:41:01,360 --> 01:41:04,719
immediately because it's

01:41:02,560 --> 01:41:06,880
live office and it's already running and

01:41:04,719 --> 01:41:10,000
then deleting the files is a problem

01:41:06,880 --> 01:41:13,360
but that's the idea um

01:41:10,000 --> 01:41:14,080
and also if you create an application

01:41:13,360 --> 01:41:17,199
launcher job

01:41:14,080 --> 01:41:18,639
without any desktop file or case service

01:41:17,199 --> 01:41:20,880
so basically you don't know what to

01:41:18,639 --> 01:41:21,360
launch then the open with dialog will

01:41:20,880 --> 01:41:23,040
come up

01:41:21,360 --> 01:41:25,199
and then go to 20 we will run the

01:41:23,040 --> 01:41:26,159
application and do all that logic once

01:41:25,199 --> 01:41:29,600
we know what to run

01:41:26,159 --> 01:41:31,360
right okay so that's the application

01:41:29,600 --> 01:41:33,199
launcher job i think it's a useful one

01:41:31,360 --> 01:41:35,679
to keep in mind that's when you know

01:41:33,199 --> 01:41:37,760
what application you want to run

01:41:35,679 --> 01:41:39,760
what about the general case of i click

01:41:37,760 --> 01:41:41,600
on a file in dolphin or i type a url

01:41:39,760 --> 01:41:44,000
somewhere or click on the link

01:41:41,600 --> 01:41:46,320
then we are in the more generic problem

01:41:44,000 --> 01:41:49,760
of how do i open this url

01:41:46,320 --> 01:41:52,080
and for this i wrote you open url job

01:41:49,760 --> 01:41:53,760
um which is basically what the krm

01:41:52,080 --> 01:41:57,119
constructor used to do right it's

01:41:53,760 --> 01:41:59,040
this is a url figure out what to do

01:41:57,119 --> 01:42:00,480
it has support for external browsers

01:41:59,040 --> 01:42:01,760
just like karen i didn't list all of

01:42:00,480 --> 01:42:04,159
that with karen but

01:42:01,760 --> 01:42:05,920
this is the case where the user says i

01:42:04,159 --> 01:42:08,159
hate this conqueror stuff or falcon or

01:42:05,920 --> 01:42:09,280
whatever i want firefox for all my http

01:42:08,159 --> 01:42:12,719
urls

01:42:09,280 --> 01:42:15,760
and then that's a global setting and if

01:42:12,719 --> 01:42:16,480
open url job is given an http url it

01:42:15,760 --> 01:42:18,159
won't even

01:42:16,480 --> 01:42:20,239
try to figure out what kind of file it

01:42:18,159 --> 01:42:23,520
is it will just pass it along to firefox

01:42:20,239 --> 01:42:26,159
done right otherwise we'll stop

01:42:23,520 --> 01:42:28,400
we start using kio to find out is this a

01:42:26,159 --> 01:42:30,400
file or a directory and then

01:42:28,400 --> 01:42:31,920
what is the mind type unless the

01:42:30,400 --> 01:42:33,360
application gave it to us you know if

01:42:31,920 --> 01:42:35,440
you have the information you can pass it

01:42:33,360 --> 01:42:37,520
along to open your little job

01:42:35,440 --> 01:42:38,880
and then we don't have to determine what

01:42:37,520 --> 01:42:40,320
it is

01:42:38,880 --> 01:42:42,719
but if we don't know the mime type this

01:42:40,320 --> 01:42:47,760
is where we figure it out using kao

01:42:42,719 --> 01:42:47,760
and kostat or get

01:42:48,000 --> 01:42:51,600
it has to have support for the special

01:42:50,159 --> 01:42:53,199
cases where you click on the desktop

01:42:51,600 --> 01:42:56,159
file you click on the shell script

01:42:53,199 --> 01:42:57,520
you run an executable all of that in the

01:42:56,159 --> 01:42:59,760
general case if it's

01:42:57,520 --> 01:43:02,000
open this file with ocular then we

01:42:59,760 --> 01:43:04,560
simply call application launcher job

01:43:02,000 --> 01:43:05,280
to actually start oculus right it builds

01:43:04,560 --> 01:43:08,000
upon

01:43:05,280 --> 01:43:10,080
the other job so that makes it a bit

01:43:08,000 --> 01:43:10,960
nicer more modular this job is only

01:43:10,080 --> 01:43:14,560
about

01:43:10,960 --> 01:43:14,560
figuring out how to open the url

01:43:15,040 --> 01:43:19,520
now this was the job side of things as a

01:43:17,679 --> 01:43:23,440
user we want to get some feedback

01:43:19,520 --> 01:43:26,000
a progress when we copy a lot of files

01:43:23,440 --> 01:43:26,719
support for showing error messages the

01:43:26,000 --> 01:43:28,880
way that

01:43:26,719 --> 01:43:30,639
we solve that problem the problem of you

01:43:28,880 --> 01:43:30,960
know i'm not going to show message boxes

01:43:30,639 --> 01:43:33,679
from

01:43:30,960 --> 01:43:34,800
a core only application uh same thing in

01:43:33,679 --> 01:43:36,800
k-core add-ons

01:43:34,800 --> 01:43:38,239
where k-job is core only the only thing

01:43:36,800 --> 01:43:42,000
it has is an error signal

01:43:38,239 --> 01:43:44,400
as we saw so it also supports delegates

01:43:42,000 --> 01:43:45,760
where you can create a delegate and

01:43:44,400 --> 01:43:47,760
assign it to the job

01:43:45,760 --> 01:43:50,159
and the delegate has virtual methods

01:43:47,760 --> 01:43:52,239
like show error message

01:43:50,159 --> 01:43:53,600
which can be re-implemented as widgets

01:43:52,239 --> 01:43:57,119
or qml or

01:43:53,600 --> 01:43:58,480
embedded in your um you know in dolphin

01:43:57,119 --> 01:43:59,760
it's not going to be a message box it's

01:43:58,480 --> 01:44:03,040
more like something

01:43:59,760 --> 01:44:04,960
um that is actually embedded into the

01:44:03,040 --> 01:44:07,119
eqe

01:44:04,960 --> 01:44:08,080
um and so that you don't have to connect

01:44:07,119 --> 01:44:09,840
to

01:44:08,080 --> 01:44:11,520
the result signal and call shower

01:44:09,840 --> 01:44:12,080
message there is this auto error

01:44:11,520 --> 01:44:14,480
handling

01:44:12,080 --> 01:44:15,360
where it just happens and there are sub

01:44:14,480 --> 01:44:18,480
classes of that

01:44:15,360 --> 01:44:21,520
for widgets the key dialog delegate

01:44:18,480 --> 01:44:23,679
and for non-widget apps what we like are

01:44:21,520 --> 01:44:25,360
in plasma itself for instance we use

01:44:23,679 --> 01:44:29,920
notifications as a way to show

01:44:25,360 --> 01:44:32,080
errors so this is how you use them

01:44:29,920 --> 01:44:33,040
trivial you just create it set it and

01:44:32,080 --> 01:44:35,679
you can enable

01:44:33,040 --> 01:44:36,080
auto handling here it's not auto error

01:44:35,679 --> 01:44:39,040
handling

01:44:36,080 --> 01:44:41,440
it's errors and warnings okay i'll just

01:44:39,040 --> 01:44:41,440
move on

01:44:41,600 --> 01:44:46,080
in addition to that in kio specifically

01:44:43,920 --> 01:44:46,960
we needed extensions how do you ask the

01:44:46,080 --> 01:44:48,880
user

01:44:46,960 --> 01:44:50,080
when you know this file already exists

01:44:48,880 --> 01:44:51,920
do you want to rename it

01:44:50,080 --> 01:44:53,360
um there was an error with this file do

01:44:51,920 --> 01:44:54,639
you want to skip it

01:44:53,360 --> 01:44:56,719
are you really sure you want to delete

01:44:54,639 --> 01:44:57,440
that and so on so that's what the

01:44:56,719 --> 01:44:59,840
delegate

01:44:57,440 --> 01:45:01,040
extension is for and that's for the old

01:44:59,840 --> 01:45:03,040
jobs right the

01:45:01,040 --> 01:45:04,080
copy job and things like that for the

01:45:03,040 --> 01:45:06,639
new jobs i

01:45:04,080 --> 01:45:08,159
had to add some more interfaces one for

01:45:06,639 --> 01:45:09,360
the open with dialog

01:45:08,159 --> 01:45:12,000
where we prompt the user for an

01:45:09,360 --> 01:45:14,080
application to use another one for the

01:45:12,000 --> 01:45:15,600
open or execute dialog where this is a

01:45:14,080 --> 01:45:17,040
script do you want to read it or you

01:45:15,600 --> 01:45:19,040
want to execute it

01:45:17,040 --> 01:45:20,880
and then the untrusted program handler

01:45:19,040 --> 01:45:22,080
for desktop files that are not

01:45:20,880 --> 01:45:24,080
executable

01:45:22,080 --> 01:45:25,119
so these are three more interfaces in

01:45:24,080 --> 01:45:27,600
the core library

01:45:25,119 --> 01:45:30,400
re-implemented in the widgets library to

01:45:27,600 --> 01:45:33,440
use widgets

01:45:30,400 --> 01:45:36,159
so to tie it all together what i did was

01:45:33,440 --> 01:45:37,119
the job ui delegate which is a widgets

01:45:36,159 --> 01:45:39,760
based

01:45:37,119 --> 01:45:41,199
i delegate in the widgets library it

01:45:39,760 --> 01:45:43,040
inherits from

01:45:41,199 --> 01:45:44,800
the dialogue ui delegate and it

01:45:43,040 --> 01:45:46,800
implements the extension the

01:45:44,800 --> 01:45:48,080
the old extension for copy job and all

01:45:46,800 --> 01:45:49,760
of that

01:45:48,080 --> 01:45:51,920
so that's that's what the situation was

01:45:49,760 --> 01:45:54,239
already and what i did was

01:45:51,920 --> 01:45:55,679
these three new interfaces ideally it

01:45:54,239 --> 01:45:57,920
should inherit from them but

01:45:55,679 --> 01:45:59,760
you can't do that in kf5 so instead of

01:45:57,920 --> 01:46:00,960
that there is a bit of a hack in kf5

01:45:59,760 --> 01:46:02,480
where

01:46:00,960 --> 01:46:05,520
when you create your first job ui

01:46:02,480 --> 01:46:07,600
delegate it will register all of these

01:46:05,520 --> 01:46:09,360
interface implementations in static

01:46:07,600 --> 01:46:12,000
pointers in the core library

01:46:09,360 --> 01:46:12,880
as a way to get to them internally later

01:46:12,000 --> 01:46:16,080
on

01:46:12,880 --> 01:46:18,480
and if if you link to k widgets you get

01:46:16,080 --> 01:46:19,360
a delegate factory for all of the old

01:46:18,480 --> 01:46:21,520
jobs

01:46:19,360 --> 01:46:23,280
um and if you which means if you don't

01:46:21,520 --> 01:46:25,119
do anything that's the whole point

01:46:23,280 --> 01:46:27,440
as an application developer you just

01:46:25,119 --> 01:46:29,280
create the job and you set the job ui

01:46:27,440 --> 01:46:30,960
delegate and that's it right

01:46:29,280 --> 01:46:32,480
it will provide the extension and the

01:46:30,960 --> 01:46:35,119
three interfaces

01:46:32,480 --> 01:46:37,440
um in there so that makes life easy for

01:46:35,119 --> 01:46:39,280
the widgets applications also for

01:46:37,440 --> 01:46:40,560
also for historical reasons so that

01:46:39,280 --> 01:46:43,520
things keep working

01:46:40,560 --> 01:46:44,320
but it's not that easy for qml-based

01:46:43,520 --> 01:46:47,199
applications

01:46:44,320 --> 01:46:48,080
where you need to you know how do you

01:46:47,199 --> 01:46:50,080
provide

01:46:48,080 --> 01:46:51,600
implementations for all of that and

01:46:50,080 --> 01:46:54,560
that's the kind of open

01:46:51,600 --> 01:46:56,480
question at the end so the conclusion is

01:46:54,560 --> 01:46:57,760
kevin is duplicated replaced with these

01:46:56,480 --> 01:46:59,520
three jobs

01:46:57,760 --> 01:47:01,119
but when you use them make sure you pick

01:46:59,520 --> 01:47:03,360
the right delegates

01:47:01,119 --> 01:47:04,480
in widgets applications you can use job

01:47:03,360 --> 01:47:06,960
ui delegates

01:47:04,480 --> 01:47:07,600
which does everything right errors and

01:47:06,960 --> 01:47:10,159
progress

01:47:07,600 --> 01:47:11,520
and open with dialogue and all of that

01:47:10,159 --> 01:47:13,520
if you don't like widgets

01:47:11,520 --> 01:47:14,960
then you can use the notification ui

01:47:13,520 --> 01:47:17,840
delegate for

01:47:14,960 --> 01:47:20,320
error handling but right now there isn't

01:47:17,840 --> 01:47:23,119
any open with dialogue for qml apps

01:47:20,320 --> 01:47:23,600
there isn't any uh desktop file security

01:47:23,119 --> 01:47:26,239
dialog

01:47:23,600 --> 01:47:27,199
for qml apps or the open or execute

01:47:26,239 --> 01:47:29,040
dialog

01:47:27,199 --> 01:47:30,480
so if you are simply using a command

01:47:29,040 --> 01:47:32,880
launcher that's fine

01:47:30,480 --> 01:47:34,000
but if you use application launcher or

01:47:32,880 --> 01:47:35,840
open url job

01:47:34,000 --> 01:47:38,480
then something is missing in there and

01:47:35,840 --> 01:47:38,960
i'm coding for people who care about qml

01:47:38,480 --> 01:47:41,679
to

01:47:38,960 --> 01:47:42,880
sort of finish that job the problem is

01:47:41,679 --> 01:47:46,560
how do you set

01:47:42,880 --> 01:47:48,480
all of those interface reimplementations

01:47:46,560 --> 01:47:49,600
you know do we want four different

01:47:48,480 --> 01:47:51,360
setters for

01:47:49,600 --> 01:47:53,040
every user of the job you would have to

01:47:51,360 --> 01:47:55,040
say oh if this happens use that

01:47:53,040 --> 01:47:57,600
implementation if this happens use that

01:47:55,040 --> 01:47:58,320
that sounds a little bit verbose but

01:47:57,600 --> 01:48:01,199
otherwise

01:47:58,320 --> 01:48:02,960
we get into the combination problem of i

01:48:01,199 --> 01:48:04,960
want notifications and i want widget

01:48:02,960 --> 01:48:06,719
space dialogues or i want

01:48:04,960 --> 01:48:08,080
notifications and i want to quit based

01:48:06,719 --> 01:48:10,880
dialogue so there is a

01:48:08,080 --> 01:48:11,280
little bit of yeah design to be finished

01:48:10,880 --> 01:48:13,600
here

01:48:11,280 --> 01:48:15,440
and how much of separate searches do we

01:48:13,600 --> 01:48:18,560
want or how much of

01:48:15,440 --> 01:48:20,400
all in one solution do we want so i'm

01:48:18,560 --> 01:48:23,040
open for ideas about that

01:48:20,400 --> 01:48:24,000
but that's it from me for now um i hope

01:48:23,040 --> 01:48:27,360
you learned something

01:48:24,000 --> 01:48:28,719
otherwise i'm sorry and i'll take a look

01:48:27,360 --> 01:48:31,440
at the question or actually adam will

01:48:28,719 --> 01:48:34,239
tell me the questions he said

01:48:31,440 --> 01:48:36,000
yes correct thank you david so we have a

01:48:34,239 --> 01:48:39,280
couple of questions and a few minutes

01:48:36,000 --> 01:48:42,800
to spare so um is there an

01:48:39,280 --> 01:48:46,239
overview at run time of running k jobs

01:48:42,800 --> 01:48:48,960
and kio jobs

01:48:46,239 --> 01:48:50,639
the jobs don't really register anywhere

01:48:48,960 --> 01:48:53,199
in the core library so you

01:48:50,639 --> 01:48:56,159
you can't have some sort of a you know

01:48:53,199 --> 01:48:57,360
give me the list of the running stuff

01:48:56,159 --> 01:48:59,199
i suppose the question is about

01:48:57,360 --> 01:49:01,199
debugging because

01:48:59,199 --> 01:49:02,480
if your application relies on this well

01:49:01,199 --> 01:49:03,920
um

01:49:02,480 --> 01:49:05,600
it sounds something that could be useful

01:49:03,920 --> 01:49:07,119
for debugging and also for unit tests

01:49:05,600 --> 01:49:08,480
possibly to make sure that all the

01:49:07,119 --> 01:49:10,639
all the jobs are actually finished

01:49:08,480 --> 01:49:11,280
before we move on uh we had something

01:49:10,639 --> 01:49:15,199
like that

01:49:11,280 --> 01:49:16,480
in zanchin it's

01:49:15,199 --> 01:49:18,480
it's something that doesn't exist and

01:49:16,480 --> 01:49:21,040
could be added for the users on the

01:49:18,480 --> 01:49:22,960
other hand that's where progress

01:49:21,040 --> 01:49:24,239
notification is important and that's

01:49:22,960 --> 01:49:26,800
something you get with

01:49:24,239 --> 01:49:27,280
the ui delegate i didn't talk about all

01:49:26,800 --> 01:49:29,840
of it

01:49:27,280 --> 01:49:31,920
there is a mechanism in there for the

01:49:29,840 --> 01:49:32,400
jobs to actually register to plasma and

01:49:31,920 --> 01:49:34,239
that's

01:49:32,400 --> 01:49:35,760
that's how you see you know when you

01:49:34,239 --> 01:49:38,080
copy a file and you can get the

01:49:35,760 --> 01:49:38,880
progress in the plasma notification

01:49:38,080 --> 01:49:40,719
things

01:49:38,880 --> 01:49:42,239
um because the job actually registered

01:49:40,719 --> 01:49:44,719
there there are some debuff scores to

01:49:42,239 --> 01:49:46,639
make that happen

01:49:44,719 --> 01:49:48,000
or of course the application itself can

01:49:46,639 --> 01:49:50,800
show progress

01:49:48,000 --> 01:49:52,560
so this isn't um there isn't an

01:49:50,800 --> 01:49:53,840
all-in-one solution for that because we

01:49:52,560 --> 01:49:55,520
want to leave it

01:49:53,840 --> 01:49:57,040
to the applications how they want to

01:49:55,520 --> 01:49:59,119
present that information

01:49:57,040 --> 01:50:00,159
some jobs are actually internal and

01:49:59,119 --> 01:50:02,400
there is a flag

01:50:00,159 --> 01:50:03,440
hide progress information so that you

01:50:02,400 --> 01:50:04,960
don't bother

01:50:03,440 --> 01:50:06,719
users with you know whatever is

01:50:04,960 --> 01:50:09,520
happening behind the scenes

01:50:06,719 --> 01:50:11,520
some auto save or internal things you

01:50:09,520 --> 01:50:13,360
have to download

01:50:11,520 --> 01:50:14,880
but vice versa if you do want to show

01:50:13,360 --> 01:50:17,679
progress to the to the user you can

01:50:14,880 --> 01:50:17,679
actually enable that

01:50:18,400 --> 01:50:26,639
okay should we get rid of

01:50:23,520 --> 01:50:28,080
should we get rid with kio job out of

01:50:26,639 --> 01:50:31,280
starting behavior for

01:50:28,080 --> 01:50:32,800
kf6 i knew this would come right i

01:50:31,280 --> 01:50:34,960
present something as inconsistent and

01:50:32,800 --> 01:50:36,880
historical when people want to fix it

01:50:34,960 --> 01:50:39,119
in my opinion this is a very dangerous

01:50:36,880 --> 01:50:41,520
one to tackle because

01:50:39,119 --> 01:50:43,440
we have no support from any tool to tell

01:50:41,520 --> 01:50:44,080
us this job isn't started so we just

01:50:43,440 --> 01:50:46,159
forget to

01:50:44,080 --> 01:50:49,199
add the start call everywhere and we'll

01:50:46,159 --> 01:50:51,119
end up with jobs that don't start

01:50:49,199 --> 01:50:52,320
and on the other hand what we could do

01:50:51,119 --> 01:50:54,800
at least is

01:50:52,320 --> 01:50:56,320
make sure that calling starts isn't is

01:50:54,800 --> 01:50:57,119
okay right we don't end up with the job

01:50:56,320 --> 01:50:59,599
starting twice

01:50:57,119 --> 01:51:00,719
uh i would have to check so that we can

01:50:59,599 --> 01:51:02,239
actually start

01:51:00,719 --> 01:51:04,560
calling start explicitly everywhere or

01:51:02,239 --> 01:51:06,719
at least allowing people to do that and

01:51:04,560 --> 01:51:08,880
and be consistent and then we still auto

01:51:06,719 --> 01:51:11,360
start for people who forget to do it

01:51:08,880 --> 01:51:12,320
um and yes we could of course have a

01:51:11,360 --> 01:51:15,440
crazy chat

01:51:12,320 --> 01:51:17,280
a crazy check for this kind of things

01:51:15,440 --> 01:51:19,040
but i'm not sure that someone is going

01:51:17,280 --> 01:51:22,800
to run crazy on

01:51:19,040 --> 01:51:24,159
all 200 repositories and make sure that

01:51:22,800 --> 01:51:25,440
it's all clean everywhere that sounds

01:51:24,159 --> 01:51:28,960
like a lot of

01:51:25,440 --> 01:51:31,199
a lot of work but you know um

01:51:28,960 --> 01:51:32,480
if someone wants to do that what what i

01:51:31,199 --> 01:51:33,920
can do at this is make sure that

01:51:32,480 --> 01:51:36,639
starters are know a know

01:51:33,920 --> 01:51:39,360
or more precisely that um it works in

01:51:36,639 --> 01:51:41,840
both cases and then we can

01:51:39,360 --> 01:51:42,639
we can allow people to do things clean

01:51:41,840 --> 01:51:45,040
even if

01:51:42,639 --> 01:51:46,480
it works if you don't right it's just

01:51:45,040 --> 01:51:48,560
like the emit

01:51:46,480 --> 01:51:50,159
keyword which does nothing right you can

01:51:48,560 --> 01:51:51,599
write your code without emit

01:51:50,159 --> 01:51:54,080
but everyone does it we could do the

01:51:51,599 --> 01:51:56,080
same here where yes you can write an

01:51:54,080 --> 01:51:57,280
old ko job without start but everyone

01:51:56,080 --> 01:52:00,480
does it let's

01:51:57,280 --> 01:52:05,040
let's go to that direction

01:52:00,480 --> 01:52:10,239
okay thanks and then someone asks if kf6

01:52:05,040 --> 01:52:10,239
is a good place to remove uh slaves

01:52:10,639 --> 01:52:15,360
is that because of political opinion

01:52:12,400 --> 01:52:18,000
against slavery i assume

01:52:15,360 --> 01:52:19,280
we had that in the past now i i assume

01:52:18,000 --> 01:52:21,760
the question is more about

01:52:19,280 --> 01:52:23,040
the use of xml processes versus the use

01:52:21,760 --> 01:52:25,760
of threads

01:52:23,040 --> 01:52:26,159
um one of the ideas we had was to at

01:52:25,760 --> 01:52:28,719
least

01:52:26,159 --> 01:52:29,520
experiment with running the slave code

01:52:28,719 --> 01:52:31,280
in a thread

01:52:29,520 --> 01:52:33,599
i have this to do laying around i didn't

01:52:31,280 --> 01:52:36,239
get around to it

01:52:33,599 --> 01:52:37,280
that's an idea one of the issues with

01:52:36,239 --> 01:52:38,880
threads is

01:52:37,280 --> 01:52:40,560
it's hard to kill them they have to

01:52:38,880 --> 01:52:44,000
agree to

01:52:40,560 --> 01:52:45,679
be killed right in my presentation about

01:52:44,000 --> 01:52:47,119
q thread i said yes there is a terminate

01:52:45,679 --> 01:52:49,040
method but forget it exists

01:52:47,119 --> 01:52:51,440
it's very unclean you can leak memory

01:52:49,040 --> 01:52:53,679
and leave mutex is locked and all that

01:52:51,440 --> 01:52:55,520
so the good thing about external

01:52:53,679 --> 01:52:57,599
processes is that they can be killed and

01:52:55,520 --> 01:52:58,080
that's convenient when for instance a

01:52:57,599 --> 01:53:00,800
socket

01:52:58,080 --> 01:53:02,480
is hanging because you switch networks

01:53:00,800 --> 01:53:03,520
or whatever and you just never get the

01:53:02,480 --> 01:53:07,280
socket back

01:53:03,520 --> 01:53:10,239
so i think that's one of the benefits of

01:53:07,280 --> 01:53:11,040
external processes on the other hand we

01:53:10,239 --> 01:53:14,719
could use

01:53:11,040 --> 01:53:17,119
uh threads for local

01:53:14,719 --> 01:53:18,159
you know those pseudo local slaves which

01:53:17,119 --> 01:53:21,040
simply

01:53:18,159 --> 01:53:22,320
um forward to the local file system and

01:53:21,040 --> 01:53:23,199
are just here to present things

01:53:22,320 --> 01:53:24,880
differently

01:53:23,199 --> 01:53:26,480
those are safe enough and there is no

01:53:24,880 --> 01:53:26,880
circuit that can hang so we could at

01:53:26,480 --> 01:53:30,000
least

01:53:26,880 --> 01:53:32,239
start with that okay

01:53:30,000 --> 01:53:34,480
thanks uh we don't have time for the

01:53:32,239 --> 01:53:37,840
last question but i'm sure

01:53:34,480 --> 01:53:39,599
you can stay in the chat and

01:53:37,840 --> 01:53:41,840
answer that thank you very much david

01:53:39,599 --> 01:53:45,679
uploads in the chat please

01:53:41,840 --> 01:53:48,880
and we'll be taking a short

01:53:45,679 --> 01:53:51,119
break after which daniel will

01:53:48,880 --> 01:53:52,960
tell us about static code analysis with

01:53:51,119 --> 01:53:55,840
gitlab ci

01:53:52,960 --> 01:53:56,800
and also please welcome alison as the

01:53:55,840 --> 01:54:09,840
session chair

01:53:56,800 --> 01:54:09,840
for the next hour

01:55:34,080 --> 01:55:38,000
hi there everyone we are going to get

01:55:36,719 --> 01:55:40,800
started in just

01:55:38,000 --> 01:55:42,880
a moment with danielle who will be

01:55:40,800 --> 01:55:47,840
speaking about

01:55:42,880 --> 01:55:47,840
static code analysis with github

01:55:58,840 --> 01:56:01,840
ci

01:57:06,880 --> 01:57:11,840
hey there

01:57:12,000 --> 01:57:16,960
oh great we'll get started in just a

01:57:16,400 --> 01:57:25,840
minute

01:57:16,960 --> 01:57:25,840
thanks for being here

01:57:25,920 --> 01:57:39,840
all right so

01:58:17,679 --> 01:58:21,040
all right well let's get started i'd

01:58:19,760 --> 01:58:25,520
like to present

01:58:21,040 --> 01:58:28,560
danielle speaking about static analysis

01:58:25,520 --> 01:58:31,679
hi thank you thank you everyone for

01:58:28,560 --> 01:58:33,119
tuning in to my talk i believe

01:58:31,679 --> 01:58:35,840
coincidentally this talk

01:58:33,119 --> 01:58:37,360
might be an answer to david's problem

01:58:35,840 --> 01:58:40,000
with how to

01:58:37,360 --> 01:58:41,920
uh make sure that all 200 projects in

01:58:40,000 --> 01:58:44,560
kde gets switched to

01:58:41,920 --> 01:58:45,280
not out of the starting key jobs but

01:58:44,560 --> 01:58:48,000
let's see

01:58:45,280 --> 01:58:49,199
let's see how it goes so recently i

01:58:48,000 --> 01:58:51,440
became a huge fan of

01:58:49,199 --> 01:58:53,520
static code analysis so i decided to

01:58:51,440 --> 01:58:56,880
talk about static code analysis

01:58:53,520 --> 01:58:57,280
and about gitlab ci and about what you

01:58:56,880 --> 01:58:59,679
get

01:58:57,280 --> 01:59:03,040
when you bring those two things together

01:58:59,679 --> 01:59:05,040
spoiler alert you get awesomeness

01:59:03,040 --> 01:59:06,800
i'm sure everyone here knows what static

01:59:05,040 --> 01:59:09,920
code analysis is but let me

01:59:06,800 --> 01:59:10,639
go quickly through it it's like a second

01:59:09,920 --> 01:59:12,480
pair of eyes

01:59:10,639 --> 01:59:13,679
that checks your code it's not just unit

01:59:12,480 --> 01:59:17,360
tests

01:59:13,679 --> 01:59:18,320
it's actually some tool looking at your

01:59:17,360 --> 01:59:19,520
source code

01:59:18,320 --> 01:59:21,840
which means you need something that

01:59:19,520 --> 01:59:23,760
understands c bus plus and understanding

01:59:21,840 --> 01:59:24,880
c plus bus is not the easiest thing in

01:59:23,760 --> 01:59:27,199
the world

01:59:24,880 --> 01:59:29,280
uh luckily we have these things that

01:59:27,199 --> 01:59:30,000
understand c bus bus code very well they

01:59:29,280 --> 01:59:32,960
are called

01:59:30,000 --> 01:59:33,679
the c-plus bus compilers so no surprise

01:59:32,960 --> 01:59:35,920
that the two

01:59:33,679 --> 01:59:36,719
major static analyzers that i'm going to

01:59:35,920 --> 01:59:38,560
mention

01:59:36,719 --> 01:59:41,040
throughout the talk are both based on

01:59:38,560 --> 01:59:43,199
the clank c-bus bus compiler

01:59:41,040 --> 01:59:45,440
the two static analyzers that i want to

01:59:43,199 --> 01:59:47,679
talk about are classy and blank tidy

01:59:45,440 --> 01:59:49,679
uh you might have heard about clasic uh

01:59:47,679 --> 01:59:52,320
clase is actually kde project

01:59:49,679 --> 01:59:52,960
it's a static analyzer with a wide range

01:59:52,320 --> 01:59:55,840
of cute

01:59:52,960 --> 01:59:58,320
specific checks like this one for

01:59:55,840 --> 02:00:00,960
instance if you use a non-static

01:59:58,320 --> 02:00:02,080
non-const key vector in a range based

02:00:00,960 --> 02:00:04,159
for loop

02:00:02,080 --> 02:00:06,080
it's perfectly valid c plus plus it

02:00:04,159 --> 02:00:10,000
compiles it works

02:00:06,080 --> 02:00:12,639
except it's not ideal right because

02:00:10,000 --> 02:00:13,920
using a non-const cute container in a

02:00:12,639 --> 02:00:16,880
range-based volume

02:00:13,920 --> 02:00:17,679
might detach the container and this can

02:00:16,880 --> 02:00:21,040
easily skip

02:00:17,679 --> 02:00:22,400
a pass through a review especially if

02:00:21,040 --> 02:00:25,040
instead of q vector in

02:00:22,400 --> 02:00:26,560
it would say it would just say auto and

02:00:25,040 --> 02:00:28,560
if you often mix

02:00:26,560 --> 02:00:30,719
uh standard containers where this is

02:00:28,560 --> 02:00:33,440
perfectly fine with cute containers

02:00:30,719 --> 02:00:35,280
it's easy to miss this right luckily

02:00:33,440 --> 02:00:38,480
placement will give you warning that

02:00:35,280 --> 02:00:40,560
eh this is not okay you should fix this

02:00:38,480 --> 02:00:41,920
it can also possibly fix this for you

02:00:40,560 --> 02:00:45,199
even but that's not the

02:00:41,920 --> 02:00:47,280
uh point of this talk uh another my

02:00:45,199 --> 02:00:49,520
favorite check i think in crazy is this

02:00:47,280 --> 02:00:50,880
one we have a little key object class

02:00:49,520 --> 02:00:52,880
with an enum and a

02:00:50,880 --> 02:00:55,119
q signal that has the enamel as a

02:00:52,880 --> 02:00:56,239
parameter this is again perfectly fine

02:00:55,119 --> 02:00:59,679
it compiles

02:00:56,239 --> 02:01:01,679
it works it's a valid c plus mass and in

02:00:59,679 --> 02:01:03,760
the new connect syntax it will work just

02:01:01,679 --> 02:01:06,639
fine but if you use the alt

02:01:03,760 --> 02:01:07,520
q4 connect syntax this will not work

02:01:06,639 --> 02:01:10,320
because

02:01:07,520 --> 02:01:10,719
the argument needs to be fully qualified

02:01:10,320 --> 02:01:14,400
as

02:01:10,719 --> 02:01:15,920
crazy will tell you again and

02:01:14,400 --> 02:01:17,760
again this is something that's easy to

02:01:15,920 --> 02:01:20,719
miss especially if you are new to queue

02:01:17,760 --> 02:01:22,480
or if you are using not if you are not

02:01:20,719 --> 02:01:24,960
using qt all the time

02:01:22,480 --> 02:01:26,719
because then you need to remember oh now

02:01:24,960 --> 02:01:28,800
i'm writing cued i need to remember to

02:01:26,719 --> 02:01:33,280
fully qualify my signal arguments

02:01:28,800 --> 02:01:36,719
uh it's really useful to have a tool

02:01:33,280 --> 02:01:38,639
that checks this for you um

02:01:36,719 --> 02:01:40,719
the other static analyzer that i talked

02:01:38,639 --> 02:01:43,840
about is clank tidying

02:01:40,719 --> 02:01:45,280
uh clank title is uh part of the llpm

02:01:43,840 --> 02:01:46,719
project so it's actually developed as

02:01:45,280 --> 02:01:49,280
part of the clank

02:01:46,719 --> 02:01:51,520
compiler you get it alongside a compiler

02:01:49,280 --> 02:01:54,800
with other client tools

02:01:51,520 --> 02:01:55,760
it has wide range of generic c plus plus

02:01:54,800 --> 02:01:58,800
checks

02:01:55,760 --> 02:02:00,719
right so it can check for uh bug prone

02:01:58,800 --> 02:02:03,199
statements like this one

02:02:00,719 --> 02:02:05,040
which is perfectly fine again it

02:02:03,199 --> 02:02:07,520
compiles it runs it works

02:02:05,040 --> 02:02:09,440
except when you compile with officers

02:02:07,520 --> 02:02:10,960
suddenly this decrement

02:02:09,440 --> 02:02:13,119
will not happen anymore because the

02:02:10,960 --> 02:02:16,639
compiler will remove the whole line

02:02:13,119 --> 02:02:18,880
because you wanted to remove assets

02:02:16,639 --> 02:02:20,080
so clank ty they will warn you that this

02:02:18,880 --> 02:02:23,599
is a backbone statement

02:02:20,080 --> 02:02:25,040
you should fix it uh it can also help

02:02:23,599 --> 02:02:28,800
you with code quality

02:02:25,040 --> 02:02:30,159
uh so i'm sure every single kdc project

02:02:28,800 --> 02:02:31,599
has

02:02:30,159 --> 02:02:34,159
something like this somewhere in the

02:02:31,599 --> 02:02:37,280
code so uh magical constants

02:02:34,159 --> 02:02:38,880
defined as uh as a macro uh

02:02:37,280 --> 02:02:41,199
flank tidy will tell you why don't you

02:02:38,880 --> 02:02:42,080
use console expert it's exactly the same

02:02:41,199 --> 02:02:44,960
as a macro

02:02:42,080 --> 02:02:44,960
and it's type safe

02:02:45,440 --> 02:02:53,040
so static code analysis is super useful

02:02:49,840 --> 02:02:54,960
it is very helpful uh especially if you

02:02:53,040 --> 02:02:55,679
can do it as part of a review process

02:02:54,960 --> 02:02:57,760
because

02:02:55,679 --> 02:02:59,520
then the reviewer can actually focus on

02:02:57,760 --> 02:03:03,119
the big things the ideas

02:02:59,520 --> 02:03:06,639
and on the actual what the code does

02:03:03,119 --> 02:03:08,320
rather than having to focus or

02:03:06,639 --> 02:03:10,880
pay attention to these small to these

02:03:08,320 --> 02:03:14,400
small things like

02:03:10,880 --> 02:03:15,760
like not fully qualified archipelago and

02:03:14,400 --> 02:03:19,040
silver

02:03:15,760 --> 02:03:21,599
so i guess it would be really nice

02:03:19,040 --> 02:03:23,119
to get this right to use this and the

02:03:21,599 --> 02:03:23,440
question is why are we not even using

02:03:23,119 --> 02:03:27,360
this

02:03:23,440 --> 02:03:29,599
for for all our projects i i ran this on

02:03:27,360 --> 02:03:30,560
on the yakunadi code base and i

02:03:29,599 --> 02:03:33,440
uncovered

02:03:30,560 --> 02:03:34,080
quite a few bugs or issues that both

02:03:33,440 --> 02:03:36,239
clank

02:03:34,080 --> 02:03:37,599
tidy and crazy warned me about and i i

02:03:36,239 --> 02:03:40,080
could fix them

02:03:37,599 --> 02:03:42,560
the problem is that i read it once i

02:03:40,080 --> 02:03:45,920
think after a very very long time

02:03:42,560 --> 02:03:46,880
and uh i got like lots of issues and

02:03:45,920 --> 02:03:49,119
i've spent

02:03:46,880 --> 02:03:51,040
several evenings just fixing them and it

02:03:49,119 --> 02:03:52,719
was not fun

02:03:51,040 --> 02:03:54,639
it must be much it would be much better

02:03:52,719 --> 02:03:56,480
if we were able to sort of do this

02:03:54,639 --> 02:03:58,320
incrementally right uh

02:03:56,480 --> 02:04:00,719
of course there's not no problem if you

02:03:58,320 --> 02:04:02,719
want to run it everything uh like

02:04:00,719 --> 02:04:04,880
you know you sit down before the release

02:04:02,719 --> 02:04:07,119
you run static analyzers on the whole

02:04:04,880 --> 02:04:09,199
code base you fix everything and then

02:04:07,119 --> 02:04:10,159
after three months you do it all again

02:04:09,199 --> 02:04:13,280
but then

02:04:10,159 --> 02:04:17,280
it's not really good comfortable

02:04:13,280 --> 02:04:21,119
and uh we have two links to do that

02:04:17,280 --> 02:04:22,719
for us uh so i thought like maybe we

02:04:21,119 --> 02:04:26,000
could do this

02:04:22,719 --> 02:04:28,079
maybe we could do this uh for each pull

02:04:26,000 --> 02:04:29,520
request right

02:04:28,079 --> 02:04:31,599
so this is where the second part of the

02:04:29,520 --> 02:04:35,920
talk comes in uh

02:04:31,599 --> 02:04:37,840
about gitlab cr uh

02:04:35,920 --> 02:04:39,679
here i want to pause here and say just

02:04:37,840 --> 02:04:41,040
big thank you and kudos to the susan

02:04:39,679 --> 02:04:43,920
team and everyone who was

02:04:41,040 --> 02:04:46,719
involved in switching over to gitlab i'm

02:04:43,920 --> 02:04:49,840
so happy we have that finally

02:04:46,719 --> 02:04:51,199
uh uh gitlab ci

02:04:49,840 --> 02:04:53,280
you may have heard about it i think it

02:04:51,199 --> 02:04:54,800
was a friday it was mentioned on a

02:04:53,280 --> 02:04:58,000
friday training about gitlab

02:04:54,800 --> 02:05:00,079
as well it's well it's a ci and it's

02:04:58,000 --> 02:05:02,159
built directly into gitlab

02:05:00,079 --> 02:05:03,360
it's basically like our own jenkins the

02:05:02,159 --> 02:05:05,360
build kd york

02:05:03,360 --> 02:05:06,560
except this is actually part of gitlab

02:05:05,360 --> 02:05:10,000
what that means

02:05:06,560 --> 02:05:13,440
is that it can execute the jobs

02:05:10,000 --> 02:05:15,679
on not just on each comment but also on

02:05:13,440 --> 02:05:18,840
particular events like for instance

02:05:15,679 --> 02:05:22,480
it can execute your ci job or ci

02:05:18,840 --> 02:05:24,480
pipeline on each pull request

02:05:22,480 --> 02:05:25,840
and i'm sure you know where i'm heading

02:05:24,480 --> 02:05:28,960
with this uh

02:05:25,840 --> 02:05:30,000
how how can i get this how can i get my

02:05:28,960 --> 02:05:32,719
own

02:05:30,000 --> 02:05:34,480
gitlab ci jobs for my kde project this

02:05:32,719 --> 02:05:37,679
is another advantage of

02:05:34,480 --> 02:05:39,440
gitlab ci with the old jenkins setup uh

02:05:37,679 --> 02:05:40,880
this is all managed by this designment

02:05:39,440 --> 02:05:43,280
team and basically

02:05:40,880 --> 02:05:43,920
we every project get the same treatment

02:05:43,280 --> 02:05:46,639
right

02:05:43,920 --> 02:05:47,440
we all uh all the projects are just

02:05:46,639 --> 02:05:49,280
compiled

02:05:47,440 --> 02:05:51,840
tests are executed and that's it there

02:05:49,280 --> 02:05:55,280
is no point where you can customize it

02:05:51,840 --> 02:05:58,320
at your own settings and whatnot

02:05:55,280 --> 02:06:01,840
so luckily in gitlab ci

02:05:58,320 --> 02:06:04,320
all you need to do to get

02:06:01,840 --> 02:06:05,920
your project to create a pipeline for

02:06:04,320 --> 02:06:08,960
your project is you need to create

02:06:05,920 --> 02:06:09,679
dot gitlab.hci the diablo file in the

02:06:08,960 --> 02:06:13,760
top level

02:06:09,679 --> 02:06:17,920
of your git repository

02:06:13,760 --> 02:06:21,199
and there you can define your pipelines

02:06:17,920 --> 02:06:23,599
uh what how to

02:06:21,199 --> 02:06:24,639
put it up well again our sysadmins are

02:06:23,599 --> 02:06:28,639
super awesome

02:06:24,639 --> 02:06:32,079
and they created uh existing definitions

02:06:28,639 --> 02:06:34,800
so you just put in these two you include

02:06:32,079 --> 02:06:36,000
these two jumbo files which contain

02:06:34,800 --> 02:06:39,040
contained definitions

02:06:36,000 --> 02:06:42,000
for the pipelines and the jobs in there

02:06:39,040 --> 02:06:43,520
so for instance this one ci before is

02:06:42,000 --> 02:06:45,280
just some templates and the ci

02:06:43,520 --> 02:06:46,320
applications linux this will create a

02:06:45,280 --> 02:06:49,520
job

02:06:46,320 --> 02:06:51,119
for a kde application project that's all

02:06:49,520 --> 02:06:53,119
the ci frameworks and ci

02:06:51,119 --> 02:06:54,719
extra gear and then this will create

02:06:53,119 --> 02:06:57,040
particular job for linux

02:06:54,719 --> 02:06:58,159
there's also free bsd and windows so if

02:06:57,040 --> 02:06:59,920
you just include

02:06:58,159 --> 02:07:01,920
whatever you need you'll get

02:06:59,920 --> 02:07:03,679
automatically created jobs

02:07:01,920 --> 02:07:06,000
right so if your project is not

02:07:03,679 --> 02:07:06,880
interested in windows or doesn't work on

02:07:06,000 --> 02:07:09,040
windows

02:07:06,880 --> 02:07:10,400
you just don't include that file that

02:07:09,040 --> 02:07:12,159
creates the job

02:07:10,400 --> 02:07:13,920
and if you want to define your own job

02:07:12,159 --> 02:07:16,560
that does

02:07:13,920 --> 02:07:17,840
magic well you just define it in your

02:07:16,560 --> 02:07:19,840
yaml file and you get it

02:07:17,840 --> 02:07:21,599
so you as a project developer you can

02:07:19,840 --> 02:07:24,639
really customize this

02:07:21,599 --> 02:07:27,040
which i think is really awesome and well

02:07:24,639 --> 02:07:30,400
as part of that uh

02:07:27,040 --> 02:07:30,800
i thought well maybe i could we could

02:07:30,400 --> 02:07:32,960
get

02:07:30,800 --> 02:07:33,840
uh static analysis as part of it as well

02:07:32,960 --> 02:07:36,639
right

02:07:33,840 --> 02:07:38,560
uh actually this all started when

02:07:36,639 --> 02:07:41,840
shortly after the migration ticket lab

02:07:38,560 --> 02:07:44,960
when uh laura montel went and he added

02:07:41,840 --> 02:07:48,880
some sort of initial static analyzer

02:07:44,960 --> 02:07:50,800
set up into all the kde uh repositories

02:07:48,880 --> 02:07:52,239
unfortunately it didn't work so i was

02:07:50,800 --> 02:07:54,000
first i started removing them

02:07:52,239 --> 02:07:56,159
from from the red repository i realized

02:07:54,000 --> 02:07:58,079
well this actually might be super useful

02:07:56,159 --> 02:07:59,520
uh let's try to figure out how to do it

02:07:58,079 --> 02:08:01,920
properly

02:07:59,520 --> 02:08:03,760
uh so that we can get proper green

02:08:01,920 --> 02:08:07,760
pipeline

02:08:03,760 --> 02:08:10,800
so this was the first attempt

02:08:07,760 --> 02:08:12,400
nasty i know it's complicated and really

02:08:10,800 --> 02:08:15,040
you don't want everyone to

02:08:12,400 --> 02:08:16,159
copy paste this into their kit labial

02:08:15,040 --> 02:08:18,079
it's hard to change it

02:08:16,159 --> 02:08:19,360
requires committing additional files

02:08:18,079 --> 02:08:22,880
into the repository

02:08:19,360 --> 02:08:26,880
it was it was bad so

02:08:22,880 --> 02:08:29,679
i it's i took some inspiration from the

02:08:26,880 --> 02:08:31,679
existing include files and just created

02:08:29,679 --> 02:08:35,199
the job and the pipeline

02:08:31,679 --> 02:08:37,199
in the uh

02:08:35,199 --> 02:08:38,320
in the sysadmin repo or well it's not

02:08:37,199 --> 02:08:41,440
there yet but

02:08:38,320 --> 02:08:42,000
uh later on that and all you need to do

02:08:41,440 --> 02:08:45,040
is

02:08:42,000 --> 02:08:47,119
you just include this file and you

02:08:45,040 --> 02:08:48,400
add this include into the gitlab ci

02:08:47,119 --> 02:08:50,880
level and then

02:08:48,400 --> 02:08:51,679
uh you also create a new job which you

02:08:50,880 --> 02:08:54,079
do by

02:08:51,679 --> 02:08:55,199
uh saying well this is the name of my

02:08:54,079 --> 02:08:58,400
job and it just

02:08:55,199 --> 02:08:58,400
extends this template

02:08:58,480 --> 02:09:02,079
it right now it cannot be auto-created

02:09:01,360 --> 02:09:04,320
like the

02:09:02,079 --> 02:09:06,400
uh for instance applications lyrics jobs

02:09:04,320 --> 02:09:08,560
which you don't need to define anywhere

02:09:06,400 --> 02:09:11,520
they just get automatically created

02:09:08,560 --> 02:09:13,119
it's because either i'm too bad with the

02:09:11,520 --> 02:09:15,599
gitlab ci

02:09:13,119 --> 02:09:16,159
stuff or because i because maybe cannot

02:09:15,599 --> 02:09:20,159
be done

02:09:16,159 --> 02:09:24,079
better anyway this is how you get it

02:09:20,159 --> 02:09:27,360
and magically suddenly what you get is a

02:09:24,079 --> 02:09:28,880
ci new ci job called static analysis

02:09:27,360 --> 02:09:31,920
that gets executed on

02:09:28,880 --> 02:09:33,679
every single every new request and again

02:09:31,920 --> 02:09:36,159
whenever you commit and you come into

02:09:33,679 --> 02:09:36,159
the branch

02:09:36,400 --> 02:09:41,599
so what exactly does this job do first

02:09:39,199 --> 02:09:45,040
it builds the entire project

02:09:41,599 --> 02:09:47,040
uh you have to do it because the static

02:09:45,040 --> 02:09:48,800
analyzer it needs for the codes to

02:09:47,040 --> 02:09:51,760
compile

02:09:48,800 --> 02:09:54,159
right and unfortunately with cued we

02:09:51,760 --> 02:09:56,000
have a lot of files that are generated

02:09:54,159 --> 02:09:57,920
as part of the compilation steps so we

02:09:56,000 --> 02:09:59,199
have the mock files the ui files the

02:09:57,920 --> 02:10:01,119
dbus editors

02:09:59,199 --> 02:10:02,400
and whatnot that all this all needs to

02:10:01,119 --> 02:10:05,440
get generated

02:10:02,400 --> 02:10:07,520
and so that uh so that it can

02:10:05,440 --> 02:10:09,679
when it's included from some other cpus

02:10:07,520 --> 02:10:11,199
file the compiler actually has access to

02:10:09,679 --> 02:10:13,920
these includes

02:10:11,199 --> 02:10:15,520
otherwise the the compiler says can't

02:10:13,920 --> 02:10:17,440
compile i will not do any static

02:10:15,520 --> 02:10:20,320
analysis on this

02:10:17,440 --> 02:10:20,880
so i did some really crazy stuff to get

02:10:20,320 --> 02:10:23,360
it com

02:10:20,880 --> 02:10:25,360
to try to get only the generated files

02:10:23,360 --> 02:10:28,719
without having to compile everything but

02:10:25,360 --> 02:10:31,360
uh it failed i was not able to force

02:10:28,719 --> 02:10:34,320
make or cmake to only do the generation

02:10:31,360 --> 02:10:36,639
if anyone knows how to do that how to

02:10:34,320 --> 02:10:38,719
force cmake or make to only generate

02:10:36,639 --> 02:10:40,400
all the files without that needs to be

02:10:38,719 --> 02:10:42,480
generated without having to

02:10:40,400 --> 02:10:43,520
compile everything that would be

02:10:42,480 --> 02:10:46,159
tremendous

02:10:43,520 --> 02:10:48,639
uh i even tried like crazy check create

02:10:46,159 --> 02:10:51,760
some crazy ideas like uh

02:10:48,639 --> 02:10:54,159
uh creating a script that defers to a

02:10:51,760 --> 02:10:54,800
real compeller at configure time but

02:10:54,159 --> 02:10:56,400
then does

02:10:54,800 --> 02:10:58,159
nothing at build time instead of

02:10:56,400 --> 02:11:00,880
creating empty files

02:10:58,159 --> 02:11:01,599
so it would be much faster uh but then

02:11:00,880 --> 02:11:04,239
it failed

02:11:01,599 --> 02:11:06,079
it's already in accounting because we

02:11:04,239 --> 02:11:09,199
have a custom

02:11:06,079 --> 02:11:11,679
utility that needs to be compiled first

02:11:09,199 --> 02:11:13,599
and then it is fed another an xml file

02:11:11,679 --> 02:11:14,719
and it generates some more c plus plus

02:11:13,599 --> 02:11:17,520
code from that

02:11:14,719 --> 02:11:18,960
that then gets included here from other

02:11:17,520 --> 02:11:22,079
places in aquanauti

02:11:18,960 --> 02:11:23,679
so uh when i so fake compile this

02:11:22,079 --> 02:11:25,280
generator it obviously didn't work and

02:11:23,679 --> 02:11:26,400
the compilation failed anyway you know

02:11:25,280 --> 02:11:29,440
the static analysis

02:11:26,400 --> 02:11:32,400
anyway so i ended up going with them

02:11:29,440 --> 02:11:34,639
let's just compile everything uh we had

02:11:32,400 --> 02:11:37,520
some discussion with ben about this on

02:11:34,639 --> 02:11:38,880
on the review maybe the solution to this

02:11:37,520 --> 02:11:42,000
would be to

02:11:38,880 --> 02:11:44,400
put the static analyzer as a test stage

02:11:42,000 --> 02:11:45,920
after the build under the regular main

02:11:44,400 --> 02:11:48,560
build so the linux build

02:11:45,920 --> 02:11:50,639
so that it can reuse the builder

02:11:48,560 --> 02:11:54,480
directory created in the

02:11:50,639 --> 02:11:57,679
in the regular build job

02:11:54,480 --> 02:12:00,400
the next step that uh this this

02:11:57,679 --> 02:12:01,280
job does is it finds changed c bus plus

02:12:00,400 --> 02:12:03,119
files

02:12:01,280 --> 02:12:04,960
uh first i just try to run it on

02:12:03,119 --> 02:12:06,320
everything the problem is there is a one

02:12:04,960 --> 02:12:09,599
hour timeout

02:12:06,320 --> 02:12:12,639
time limit for uh for the

02:12:09,599 --> 02:12:15,599
uh job and with ankunari uh

02:12:12,639 --> 02:12:17,280
it was around 59 minutes and then

02:12:15,599 --> 02:12:19,199
sometimes it turned out

02:12:17,280 --> 02:12:21,040
uh it's already like just pulling the

02:12:19,199 --> 02:12:22,960
dependencies and doing the initial build

02:12:21,040 --> 02:12:25,440
takes about 20 minutes so that you're

02:12:22,960 --> 02:12:26,880
left with only 40 minutes to do a static

02:12:25,440 --> 02:12:30,079
analysis of everything

02:12:26,880 --> 02:12:31,360
and i don't think icon is too big it's

02:12:30,079 --> 02:12:33,119
not the biggest project and they're

02:12:31,360 --> 02:12:34,880
definitely not

02:12:33,119 --> 02:12:36,880
uh static analyzers are slow because

02:12:34,880 --> 02:12:40,159
they do a lot of checking and thinking

02:12:36,880 --> 02:12:41,360
uh so uh i realized well i do not need

02:12:40,159 --> 02:12:45,199
to check the whole

02:12:41,360 --> 02:12:47,679
code base every time all i need to do

02:12:45,199 --> 02:12:49,760
is i need to figure out which files have

02:12:47,679 --> 02:12:52,639
changed on this branch

02:12:49,760 --> 02:12:54,000
and i only need to check those files so

02:12:52,639 --> 02:12:56,000
the static analyzer

02:12:54,000 --> 02:12:57,840
job is now much faster because it only

02:12:56,000 --> 02:13:00,159
checks the files that have actually

02:12:57,840 --> 02:13:03,679
changed

02:13:00,159 --> 02:13:06,159
for for errors uh

02:13:03,679 --> 02:13:08,639
then obviously it runs the crazy and

02:13:06,159 --> 02:13:11,360
tidy on those changed files

02:13:08,639 --> 02:13:13,119
and ultimately it generates a code

02:13:11,360 --> 02:13:14,159
quality record file initially i was

02:13:13,119 --> 02:13:16,960
using junit

02:13:14,159 --> 02:13:18,000
uh format but then i was pointed at the

02:13:16,960 --> 02:13:20,480
code quality

02:13:18,000 --> 02:13:22,560
uh format which actually integrated

02:13:20,480 --> 02:13:24,560
better into the gitlab ci

02:13:22,560 --> 02:13:27,599
the major advantage is that you get the

02:13:24,560 --> 02:13:29,520
report directly in the pull request

02:13:27,599 --> 02:13:30,960
view of gitlab this is what it looked

02:13:29,520 --> 02:13:33,119
like looks like so this is a pull

02:13:30,960 --> 02:13:35,599
request on my test repository

02:13:33,119 --> 02:13:36,719
and where i uh intentionally introduced

02:13:35,599 --> 02:13:39,280
some issues

02:13:36,719 --> 02:13:40,880
and you can see that i already got uh

02:13:39,280 --> 02:13:42,880
two crazy warnings there

02:13:40,880 --> 02:13:44,079
that uh i'm missing a reference on

02:13:42,880 --> 02:13:45,360
non-trivial type and

02:13:44,079 --> 02:13:47,760
that the signal argument needs to be

02:13:45,360 --> 02:13:49,440
fully qualified so

02:13:47,760 --> 02:13:51,040
this you get as part of your pull

02:13:49,440 --> 02:13:52,960
request

02:13:51,040 --> 02:13:54,159
you see it in the in the gitlab ci in

02:13:52,960 --> 02:13:56,800
the pull request window

02:13:54,159 --> 02:13:58,239
and that's that's uh awesome for it both

02:13:56,800 --> 02:13:59,760
for reviewers and for the developer

02:13:58,239 --> 02:14:03,119
because developer knows

02:13:59,760 --> 02:14:03,760
that uh this needs some uh some more

02:14:03,119 --> 02:14:05,440
work

02:14:03,760 --> 02:14:06,960
and and of course the pipeline has

02:14:05,440 --> 02:14:10,000
failed because of that so you can see

02:14:06,960 --> 02:14:10,000
that the pipeline is run

02:14:11,040 --> 02:14:17,199
uh unfortunately we can't really set

02:14:15,040 --> 02:14:19,040
at this point we we don't have it

02:14:17,199 --> 02:14:20,639
configured that you could not merge if

02:14:19,040 --> 02:14:21,760
the pipeline is right i would love to be

02:14:20,639 --> 02:14:24,000
able to say

02:14:21,760 --> 02:14:26,560
uh no you cannot merge until the

02:14:24,000 --> 02:14:30,000
pipeline is green but

02:14:26,560 --> 02:14:33,199
we'll see uh

02:14:30,000 --> 02:14:35,280
back to the yaml file just to show you

02:14:33,199 --> 02:14:37,119
how you what can be customized is

02:14:35,280 --> 02:14:39,040
uh so this for the first two lines you

02:14:37,119 --> 02:14:40,079
know that static analysis is the job

02:14:39,040 --> 02:14:43,199
definition

02:14:40,079 --> 02:14:45,119
the extent shows that

02:14:43,199 --> 02:14:47,360
the job should be based on a template

02:14:45,119 --> 02:14:49,599
called delta static analysis

02:14:47,360 --> 02:14:51,280
and you can add variables and then where

02:14:49,599 --> 02:14:54,079
you can customize some of the

02:14:51,280 --> 02:14:54,560
variables which has a default uh the

02:14:54,079 --> 02:14:56,800
first

02:14:54,560 --> 02:14:57,679
analyzer the first variable is called

02:14:56,800 --> 02:14:59,360
analyzers

02:14:57,679 --> 02:15:02,480
uh it's a comma separated list of

02:14:59,360 --> 02:15:04,239
analyzers so classic linked id here

02:15:02,480 --> 02:15:06,079
you can choose something classy or only

02:15:04,239 --> 02:15:06,639
clank tidy and in the future there might

02:15:06,079 --> 02:15:08,719
be more

02:15:06,639 --> 02:15:10,800
checks that you might wish to turn on or

02:15:08,719 --> 02:15:13,840
off uh

02:15:10,800 --> 02:15:15,199
cx6 flags uh you may want to disable

02:15:13,840 --> 02:15:18,079
deprecated

02:15:15,199 --> 02:15:21,119
warnings because very often you can't do

02:15:18,079 --> 02:15:23,280
anything about deprecation so

02:15:21,119 --> 02:15:24,480
deprecated uh deprecated warnings

02:15:23,280 --> 02:15:26,480
because they might be coming from a

02:15:24,480 --> 02:15:30,320
third party library right so you

02:15:26,480 --> 02:15:32,320
uh this would break your code analysis

02:15:30,320 --> 02:15:34,800
so you can just disable suppress them

02:15:32,320 --> 02:15:37,040
uh through cx65 argument which is that

02:15:34,800 --> 02:15:39,599
pass through the static analyzers

02:15:37,040 --> 02:15:40,719
uh then there are uh classic specific

02:15:39,599 --> 02:15:42,320
chat uh

02:15:40,719 --> 02:15:43,920
arguments which are for plays ignored

02:15:42,320 --> 02:15:45,599
here so if you should ignore

02:15:43,920 --> 02:15:47,360
anything coming from a particular

02:15:45,599 --> 02:15:48,719
directory or includes coming from a

02:15:47,360 --> 02:15:49,679
particular library so in this case

02:15:48,719 --> 02:15:52,000
usually include

02:15:49,679 --> 02:15:53,040
we don't want warnings about cube being

02:15:52,000 --> 02:15:55,920
wrong

02:15:53,040 --> 02:15:57,599
uh as well as uh for instance in akanavi

02:15:55,920 --> 02:16:00,560
i've put in there uh some

02:15:57,599 --> 02:16:01,119
third-party folders uh or a third-party

02:16:00,560 --> 02:16:03,520
folder

02:16:01,119 --> 02:16:05,520
because i don't want crazy to do checks

02:16:03,520 --> 02:16:09,280
on a third-party library

02:16:05,520 --> 02:16:11,040
that we have included or embedded

02:16:09,280 --> 02:16:12,320
uh and then place a check so you can of

02:16:11,040 --> 02:16:14,320
course customize which

02:16:12,320 --> 02:16:15,760
which checks you want clays to run so

02:16:14,320 --> 02:16:17,599
maybe you want all of them or maybe you

02:16:15,760 --> 02:16:19,599
just want the level zero level one

02:16:17,599 --> 02:16:21,599
this is up to you i believe this is the

02:16:19,599 --> 02:16:24,800
default that i just copy pasted from the

02:16:21,599 --> 02:16:27,040
uh from the definition

02:16:24,800 --> 02:16:29,199
for clank tidy to customize it you just

02:16:27,040 --> 02:16:31,199
create a dot clang dash tidy file in the

02:16:29,199 --> 02:16:33,519
root of your kids repository

02:16:31,199 --> 02:16:34,719
i will not go into details how to

02:16:33,519 --> 02:16:36,559
customize it here

02:16:34,719 --> 02:16:37,840
uh you can check the website the home

02:16:36,559 --> 02:16:41,280
page of client title it's

02:16:37,840 --> 02:16:42,080
very well documented uh on how it looks

02:16:41,280 --> 02:16:44,080
like and

02:16:42,080 --> 02:16:45,439
what it looks like and what you can put

02:16:44,080 --> 02:16:49,280
in there

02:16:45,439 --> 02:16:52,960
uh this needs some consideration

02:16:49,280 --> 02:16:55,519
and a lot of uh testing because

02:16:52,960 --> 02:16:56,000
uh if you enable just all the checks it

02:16:55,519 --> 02:16:57,920
will

02:16:56,000 --> 02:17:00,319
be crazy they even throw the checks are

02:16:57,920 --> 02:17:02,319
like sort of contradictory because

02:17:00,319 --> 02:17:04,000
they have there are some like defaults

02:17:02,319 --> 02:17:05,760
or cpp core guidelines

02:17:04,000 --> 02:17:07,359
back problem statements performance

02:17:05,760 --> 02:17:09,280
issues these are cool

02:17:07,359 --> 02:17:10,960
but then there are other google specific

02:17:09,280 --> 02:17:13,040
guidelines or llvm

02:17:10,960 --> 02:17:15,120
projects specific guidelines and then

02:17:13,040 --> 02:17:17,760
fuchsia specific guidelines

02:17:15,120 --> 02:17:19,599
and if those some of those checks they

02:17:17,760 --> 02:17:23,040
clash with each other so you fix it

02:17:19,599 --> 02:17:25,120
to to fix uh to be uh for google checks

02:17:23,040 --> 02:17:26,240
to not complain and suddenly llvm checks

02:17:25,120 --> 02:17:28,160
start complaining so

02:17:26,240 --> 02:17:30,479
uh you need to be really careful with

02:17:28,160 --> 02:17:33,679
which ones you want

02:17:30,479 --> 02:17:34,559
uh of course uh the feature that i would

02:17:33,679 --> 02:17:37,040
like to get to

02:17:34,559 --> 02:17:37,840
is to also include things like qmlint

02:17:37,040 --> 02:17:40,319
and pylint

02:17:37,840 --> 02:17:42,000
and run those on the changed qml files

02:17:40,319 --> 02:17:44,880
and python files and

02:17:42,000 --> 02:17:46,240
maybe more uh the code is written in a

02:17:44,880 --> 02:17:47,040
way that should allow for this rather

02:17:46,240 --> 02:17:49,840
easily

02:17:47,040 --> 02:17:50,240
so it's mostly about just introducing

02:17:49,840 --> 02:17:52,960
some

02:17:50,240 --> 02:17:54,960
way to convert from the output format of

02:17:52,960 --> 02:17:56,800
those tools into the code report

02:17:54,960 --> 02:17:58,719
or code quality format that gitlab

02:17:56,800 --> 02:18:00,960
understands

02:17:58,719 --> 02:18:02,319
the conclusion unfortunately i wasn't

02:18:00,960 --> 02:18:05,439
able to finish all of this

02:18:02,319 --> 02:18:07,040
before academy as i was hoping to uh

02:18:05,439 --> 02:18:09,359
it's already on pull request to the

02:18:07,040 --> 02:18:13,120
sysadmin repository but it is not

02:18:09,359 --> 02:18:14,719
yet uh there uh it works

02:18:13,120 --> 02:18:16,160
but it still needs some a little bit of

02:18:14,719 --> 02:18:18,160
polishing and discussion

02:18:16,160 --> 02:18:19,200
i hope to get it merged or done during

02:18:18,160 --> 02:18:21,840
academy

02:18:19,200 --> 02:18:22,240
uh of course if you really really want

02:18:21,840 --> 02:18:24,800
to

02:18:22,240 --> 02:18:26,240
help out or try it out and help maybe do

02:18:24,800 --> 02:18:29,599
some better testing

02:18:26,240 --> 02:18:31,120
you can ping me on irc or or matrix

02:18:29,599 --> 02:18:33,519
and i can point you to the right

02:18:31,120 --> 02:18:34,639
repositories where this lives and which

02:18:33,519 --> 02:18:37,760
how you can include it into your

02:18:34,639 --> 02:18:39,519
repository for testing right now

02:18:37,760 --> 02:18:41,200
ultimately i realized this should be a

02:18:39,519 --> 02:18:45,679
default for frameworks and plasma

02:18:41,200 --> 02:18:48,719
uh definitely i would like to work on uh

02:18:45,679 --> 02:18:50,639
getting those uh at this basic classic

02:18:48,719 --> 02:18:52,880
and clank timely static analysis

02:18:50,639 --> 02:18:54,719
uh enabled for by default for all

02:18:52,880 --> 02:18:57,439
frameworks repositories and

02:18:54,719 --> 02:18:58,160
uh plasma i believe depends on if the

02:18:57,439 --> 02:19:00,319
plasma

02:18:58,160 --> 02:19:01,920
maintainers which wish to do so but i

02:19:00,319 --> 02:19:03,599
think at least for frameworks as a sort

02:19:01,920 --> 02:19:05,200
of one of the flex products we should

02:19:03,599 --> 02:19:08,160
definitely have that

02:19:05,200 --> 02:19:09,040
and that's all from me so some time for

02:19:08,160 --> 02:19:11,439
questions

02:19:09,040 --> 02:19:12,240
thank you all right let's start with the

02:19:11,439 --> 02:19:15,439
questions

02:19:12,240 --> 02:19:16,080
off with question number one can the

02:19:15,439 --> 02:19:19,599
content

02:19:16,080 --> 02:19:23,679
of kit lab ci dot

02:19:19,599 --> 02:19:23,679
iml file be run locally

02:19:24,399 --> 02:19:29,679
somewhat yes you can download the docker

02:19:28,160 --> 02:19:34,000
file

02:19:29,679 --> 02:19:36,160
that's used on gitlab ci

02:19:34,000 --> 02:19:37,359
and then you can take the commands that

02:19:36,160 --> 02:19:39,599
are specified

02:19:37,359 --> 02:19:40,719
in the gitlab ci there is a section uh

02:19:39,599 --> 02:19:43,439
in the gitlab ci

02:19:40,719 --> 02:19:44,479
file uh in the includes file there is a

02:19:43,439 --> 02:19:46,319
section script

02:19:44,479 --> 02:19:48,080
or script where it actually lists the

02:19:46,319 --> 02:19:51,439
commands that are executed

02:19:48,080 --> 02:19:52,880
during the test so if you enter the

02:19:51,439 --> 02:19:54,640
docker docker container

02:19:52,880 --> 02:19:56,240
and you copy paste those commands you

02:19:54,640 --> 02:19:59,359
basically are able to

02:19:56,240 --> 02:20:01,520
run uh run the the checks

02:19:59,359 --> 02:20:03,359
in the same environment as in which they

02:20:01,520 --> 02:20:05,439
will run on the

02:20:03,359 --> 02:20:07,359
on the gitlab ci it's not like that you

02:20:05,439 --> 02:20:09,280
could just say uh

02:20:07,359 --> 02:20:11,200
uh it's not like that you could just say

02:20:09,280 --> 02:20:12,720
you know push a button or run a command

02:20:11,200 --> 02:20:14,560
and it would sort of run your gitlab

02:20:12,720 --> 02:20:18,720
worker with everything in it that

02:20:14,560 --> 02:20:22,640
i haven't found a way to do that okay

02:20:18,720 --> 02:20:25,840
next question is it safe to run a yml

02:20:22,640 --> 02:20:27,359
with includes from the internet

02:20:25,840 --> 02:20:31,359
well if you know where they are coming

02:20:27,359 --> 02:20:34,240
from i don't see a reason why not okay

02:20:31,359 --> 02:20:36,240
next question is it a complete opt-in

02:20:34,240 --> 02:20:37,120
system or will there be a massive switch

02:20:36,240 --> 02:20:38,960
in the future

02:20:37,120 --> 02:20:40,720
where all projects get pipelines

02:20:38,960 --> 02:20:43,120
automatically

02:20:40,720 --> 02:20:44,240
um this is i think more of a question to

02:20:43,120 --> 02:20:47,200
the c7 team

02:20:44,240 --> 02:20:48,080
as far as i know the idea in long term

02:20:47,200 --> 02:20:51,760
is to

02:20:48,080 --> 02:20:54,640
move from jenkins to uh good luck ci but

02:20:51,760 --> 02:20:54,960
i think better some some since i've been

02:20:54,640 --> 02:20:58,240
uh

02:20:54,960 --> 02:20:59,840
answered this question okay

02:20:58,240 --> 02:21:03,280
next question then do you have

02:20:59,840 --> 02:21:07,280
experience with playing static analyzer

02:21:03,280 --> 02:21:10,160
i think clang td tidy

02:21:07,280 --> 02:21:10,560
has some integration with it but i don't

02:21:10,160 --> 02:21:14,080
know

02:21:10,560 --> 02:21:18,960
if you can use tidy alone and get

02:21:14,080 --> 02:21:23,120
all the checks i believe clank tidy has

02:21:18,960 --> 02:21:24,720
uh uh i think planck tidy has one of the

02:21:23,120 --> 02:21:27,600
checks in clank tidy is

02:21:24,720 --> 02:21:29,280
static analyzer which runs the clang

02:21:27,600 --> 02:21:31,120
static analyzer stuff so

02:21:29,280 --> 02:21:33,200
and then it has all these additional

02:21:31,120 --> 02:21:34,399
checks on top of the clang static

02:21:33,200 --> 02:21:37,840
analyzer so

02:21:34,399 --> 02:21:40,240
yes you can run clank tidy uh

02:21:37,840 --> 02:21:40,960
individually and get the clan static

02:21:40,240 --> 02:21:44,880
analyzer

02:21:40,960 --> 02:21:48,399
plus all the rest all right

02:21:44,880 --> 02:21:52,000
next question can goodlab ci run test

02:21:48,399 --> 02:21:56,640
yes if you configure it

02:21:52,000 --> 02:21:58,800
i think uh i think uh the yellow file

02:21:56,640 --> 02:21:59,840
i'm not sure this is enabled by default

02:21:58,800 --> 02:22:02,800
uh in the

02:21:59,840 --> 02:22:04,560
currently defined sets but actually yes

02:22:02,800 --> 02:22:06,560
i think it is because some of

02:22:04,560 --> 02:22:07,680
our projects have failing tests on

02:22:06,560 --> 02:22:09,840
github ci so

02:22:07,680 --> 02:22:11,520
yes you get tests run automatically even

02:22:09,840 --> 02:22:14,240
with if you just include

02:22:11,520 --> 02:22:14,640
the yaml file from from sysadmins all

02:22:14,240 --> 02:22:18,399
right

02:22:14,640 --> 02:22:23,200
two more questions uh next is

02:22:18,399 --> 02:22:23,200
will our infra explode

02:22:23,600 --> 02:22:28,560
uh it might but that's uh that's one of

02:22:27,200 --> 02:22:31,840
the reasons why i uh

02:22:28,560 --> 02:22:33,359
i think that uh or why i went for the

02:22:31,840 --> 02:22:35,040
approach of doing

02:22:33,359 --> 02:22:37,680
only checking the files that have

02:22:35,040 --> 02:22:40,640
actually changed in the pull request

02:22:37,680 --> 02:22:42,560
so usually i mean sure you can do a pull

02:22:40,640 --> 02:22:45,120
request which changes everything but

02:22:42,560 --> 02:22:45,680
usually request you in your change you

02:22:45,120 --> 02:22:47,680
only

02:22:45,680 --> 02:22:48,720
touch a few files so it's reasonably

02:22:47,680 --> 02:22:52,640
fast

02:22:48,720 --> 02:22:54,000
so it should not explode okay

02:22:52,640 --> 02:22:55,600
all right it looks like we have an

02:22:54,000 --> 02:22:56,399
eighth question coming in but question

02:22:55,600 --> 02:22:58,560
number seven

02:22:56,399 --> 02:23:01,439
is is there a template slash

02:22:58,560 --> 02:23:05,120
documentation to add to this project

02:23:01,439 --> 02:23:06,720
and not yet uh i think uh once this all

02:23:05,120 --> 02:23:10,240
settles and it's merged into

02:23:06,720 --> 02:23:12,319
uh managing to this sysadmin repository

02:23:10,240 --> 02:23:14,479
i definitely write down some uh

02:23:12,319 --> 02:23:18,160
something on the on on a wiki

02:23:14,479 --> 02:23:19,760
so that uh

02:23:18,160 --> 02:23:22,720
everyone can just copy paste it into

02:23:19,760 --> 02:23:25,280
their own gitlab ci

02:23:22,720 --> 02:23:27,680
okay great all right last question is

02:23:25,280 --> 02:23:28,800
still being typed we only have like 30

02:23:27,680 --> 02:23:31,359
seconds

02:23:28,800 --> 02:23:32,720
let's see if we can do it does your

02:23:31,359 --> 02:23:36,720
thing properly detect

02:23:32,720 --> 02:23:40,800
changes in headers that rob propagate

02:23:36,720 --> 02:23:43,040
to many cpp files

02:23:40,800 --> 02:23:43,040
uh

02:23:45,359 --> 02:23:50,240
well if you if you change the oh i see

02:23:48,479 --> 02:23:52,560
what i mean uh

02:23:50,240 --> 02:23:54,800
i actually do not know i haven't tried

02:23:52,560 --> 02:23:56,800
just changing a header file

02:23:54,800 --> 02:23:58,800
and seeing if the static analyzer checks

02:23:56,800 --> 02:24:01,840
it that's a good question thank you i'll

02:23:58,800 --> 02:24:04,880
i'll make sure to check that

02:24:01,840 --> 02:24:07,359
all right great thank you so much

02:24:04,880 --> 02:24:08,960
and i hope you enjoyed presenting as

02:24:07,359 --> 02:24:12,560
much as everyone else enjoyed

02:24:08,960 --> 02:24:15,920
listening thank you

02:24:12,560 --> 02:24:18,880
bye bye all right everyone

02:24:15,920 --> 02:24:20,800
we are going to get ready for the next

02:24:18,880 --> 02:24:25,359
presentation

02:24:20,800 --> 02:24:25,359
pleasing tight we'll be back in five

02:24:26,840 --> 02:24:29,840
minutes

02:28:42,399 --> 02:28:49,120
hi and we are back

02:28:45,680 --> 02:28:49,920
with our fast tracks our last set of

02:28:49,120 --> 02:28:52,640
fast tracks

02:28:49,920 --> 02:28:54,080
for academy we are going to start off

02:28:52,640 --> 02:28:56,319
with bouchon who's

02:28:54,080 --> 02:28:57,680
talking about virtual sprints then we

02:28:56,319 --> 02:29:01,120
will go to

02:28:57,680 --> 02:29:04,240
aid and then

02:29:01,120 --> 02:29:08,319
so please

02:29:04,240 --> 02:29:11,520
the stage is yours

02:29:08,319 --> 02:29:15,439
thank you uh so uh

02:29:11,520 --> 02:29:19,760
my presentation is about virtual spreads

02:29:15,439 --> 02:29:19,760
um so

02:29:21,520 --> 02:29:29,680
first of all uh what are the strengths

02:29:25,680 --> 02:29:32,880
uh so the sprints are something

02:29:29,680 --> 02:29:37,520
we have named our in-person events

02:29:32,880 --> 02:29:40,560
and they are mostly in the euro

02:29:37,520 --> 02:29:44,240
and mostly in the europe because

02:29:40,560 --> 02:29:45,920
uh i'd say most of the split attendees

02:29:44,240 --> 02:29:48,960
come from europe and

02:29:45,920 --> 02:29:52,880
let's say it's not physical for them to

02:29:48,960 --> 02:29:55,280
like it's not physical for

02:29:52,880 --> 02:29:56,960
let's say 10 people to travel to india

02:29:55,280 --> 02:30:00,399
and

02:29:56,960 --> 02:30:04,000
it is much cheaper and economical

02:30:00,399 --> 02:30:07,120
uh for traveling one person from india

02:30:04,000 --> 02:30:08,319
to europe so i'd say like most of the

02:30:07,120 --> 02:30:11,120
sprints are

02:30:08,319 --> 02:30:12,000
happening in the euro uh they are

02:30:11,120 --> 02:30:15,760
important for

02:30:12,000 --> 02:30:19,200
community building and uh in specific

02:30:15,760 --> 02:30:22,800
uh general uh

02:30:19,200 --> 02:30:25,840
development and advancement and also

02:30:22,800 --> 02:30:28,960
they are quite fun because like

02:30:25,840 --> 02:30:32,080
uh when like 12 10 12

02:30:28,960 --> 02:30:33,900
or more developers meet together the

02:30:32,080 --> 02:30:37,059
furnace currently

02:30:33,900 --> 02:30:37,059
[Applause]

02:30:40,399 --> 02:30:47,359
okay this slide is not loading

02:30:44,240 --> 02:30:50,399
okay so uh this was

02:30:47,359 --> 02:30:53,600
various virtual screens i found

02:30:50,399 --> 02:30:56,240
some very old photos uh

02:30:53,600 --> 02:30:56,880
so there is beam spring there is rhonda

02:30:56,240 --> 02:31:00,080
spring

02:30:56,880 --> 02:31:01,520
there is super free frameworks that's my

02:31:00,080 --> 02:31:05,120
invisibility spring

02:31:01,520 --> 02:31:09,280
and uh one of the coolest things

02:31:05,120 --> 02:31:11,920
so we had just friends where

02:31:09,280 --> 02:31:12,960
people ranging from four to five to

02:31:11,920 --> 02:31:15,600
let's say

02:31:12,960 --> 02:31:16,240
40 people met together at one place

02:31:15,600 --> 02:31:20,000
stayed

02:31:16,240 --> 02:31:20,000
together for one weeks and

02:31:20,720 --> 02:31:24,479
and worked on improving various things

02:31:23,439 --> 02:31:28,880
specific to one

02:31:24,479 --> 02:31:32,080
project or even just general in kde

02:31:28,880 --> 02:31:35,600
so uh

02:31:32,080 --> 02:31:40,800
uh this sprint served us much better

02:31:35,600 --> 02:31:40,800
for on this many years

02:31:40,840 --> 02:31:43,840
but

02:31:44,160 --> 02:31:51,200
uh but this year the main

02:31:47,439 --> 02:31:54,560
problem which affected the whole

02:31:51,200 --> 02:31:55,680
sprints and in-person events is kuwait i

02:31:54,560 --> 02:31:58,640
think

02:31:55,680 --> 02:32:00,479
and due to that uh in-person meetings

02:31:58,640 --> 02:32:03,920
were no longer visible

02:32:00,479 --> 02:32:06,560
and it was no longer possible to have

02:32:03,920 --> 02:32:08,479
let's say five to ten people get

02:32:06,560 --> 02:32:10,800
together or like

02:32:08,479 --> 02:32:12,800
for people living outside of europe it

02:32:10,800 --> 02:32:14,160
was not even possible to travel to

02:32:12,800 --> 02:32:18,399
europe

02:32:14,160 --> 02:32:18,399
so uh

02:32:18,720 --> 02:32:22,560
the question which comes is

02:32:23,760 --> 02:32:27,680
we needed to adapt to the situation we

02:32:26,880 --> 02:32:30,160
needed to

02:32:27,680 --> 02:32:31,120
follow the social discussion rules we

02:32:30,160 --> 02:32:34,319
needed to follow

02:32:31,120 --> 02:32:34,960
the travel restrictions and in general

02:32:34,319 --> 02:32:38,160
the whole

02:32:34,960 --> 02:32:40,560
in-person scripts were impossible like

02:32:38,160 --> 02:32:42,960
lots of companies also had to switch to

02:32:40,560 --> 02:32:47,040
remote first for

02:32:42,960 --> 02:32:50,840
during the past six to seven months

02:32:47,040 --> 02:32:52,080
so we also had to end up to this

02:32:50,840 --> 02:32:55,200
situation

02:32:52,080 --> 02:32:58,160
so the question is is it a bad thing

02:32:55,200 --> 02:32:59,760
that this happened uh in terms of for

02:32:58,160 --> 02:33:03,520
our sprints

02:32:59,760 --> 02:33:06,319
uh in my opinion uh

02:33:03,520 --> 02:33:07,439
we also learned a totally new way of

02:33:06,319 --> 02:33:10,720
getting together

02:33:07,439 --> 02:33:11,520
and it's a virtual experience uh instead

02:33:10,720 --> 02:33:14,960
of

02:33:11,520 --> 02:33:18,319
being in-person events uh we this

02:33:14,960 --> 02:33:20,960
this would be fully online event

02:33:18,319 --> 02:33:21,840
and since it's so fully online we don't

02:33:20,960 --> 02:33:24,960
need to

02:33:21,840 --> 02:33:27,280
travel so it's a pretty much global

02:33:24,960 --> 02:33:30,160
like i don't really need visa to attend

02:33:27,280 --> 02:33:34,000
the online conference or online meeting

02:33:30,160 --> 02:33:37,200
uh and we also have it is travel first

02:33:34,000 --> 02:33:40,319
and by extension also produced

02:33:37,200 --> 02:33:44,319
carbon footprint on maple

02:33:40,319 --> 02:33:44,319
by traveling to the english springs

02:33:44,560 --> 02:33:51,200
uh so uh uh so far

02:33:48,319 --> 02:33:51,600
like three different sprints happen

02:33:51,200 --> 02:33:54,399
which

02:33:51,600 --> 02:33:55,760
they're fully virtual uh one of them is

02:33:54,399 --> 02:33:58,880
scaling beam spring

02:33:55,760 --> 02:34:01,600
another is plasma while municipaling

02:33:58,880 --> 02:34:02,479
and another and then there is plasma

02:34:01,600 --> 02:34:06,960
strain

02:34:02,479 --> 02:34:10,000
as well um so gdp sprain

02:34:06,960 --> 02:34:13,520
was for one weekend

02:34:10,000 --> 02:34:15,840
it was fully ios emitting and

02:34:13,520 --> 02:34:16,720
they had very specific topics decided

02:34:15,840 --> 02:34:19,920
before uh

02:34:16,720 --> 02:34:23,200
beforehand and it was a replacement for

02:34:19,920 --> 02:34:26,319
in person and annual sprints they have

02:34:23,200 --> 02:34:31,040
like every year uh

02:34:26,319 --> 02:34:31,040
another sprint which we decided out of

02:34:32,880 --> 02:34:36,880
virtual sprint so since like fully fully

02:34:36,080 --> 02:34:40,479
locked down

02:34:36,880 --> 02:34:44,319
was in place he decided that we should

02:34:40,479 --> 02:34:46,800
host this virtual spring uh we

02:34:44,319 --> 02:34:47,760
had to spend on one of the first test

02:34:46,800 --> 02:34:51,040
instruments for

02:34:47,760 --> 02:34:54,399
academy uh thanks to candy for that

02:34:51,040 --> 02:34:55,120
um it was uh it had single track of

02:34:54,399 --> 02:34:58,479
discussion

02:34:55,120 --> 02:34:59,680
uh we decided topics on first day and we

02:34:58,479 --> 02:35:04,479
also first day

02:34:59,680 --> 02:35:04,479
online workshops during that sprint

02:35:04,640 --> 02:35:08,479
another sprint was plasma virtual sprint

02:35:07,359 --> 02:35:11,359
uh

02:35:08,479 --> 02:35:11,760
it also happened on picnic button room

02:35:11,359 --> 02:35:14,000
um

02:35:11,760 --> 02:35:16,160
also had a single track but it was

02:35:14,000 --> 02:35:19,920
slightly more structured than the plasma

02:35:16,160 --> 02:35:23,200
was great plasma screen was more like

02:35:19,920 --> 02:35:24,000
the side topic as you go and work on

02:35:23,200 --> 02:35:26,080
those topics

02:35:24,000 --> 02:35:27,600
but the plasma sprain was much more

02:35:26,080 --> 02:35:30,720
structured we had

02:35:27,600 --> 02:35:34,240
like a schedule for the whole spring

02:35:30,720 --> 02:35:36,080
and it was much more structured

02:35:34,240 --> 02:35:40,160
compared to plasma mobile sprint because

02:35:36,080 --> 02:35:40,160
we learned how to do this better

02:35:41,200 --> 02:35:45,680
and so the question is like how to

02:35:43,359 --> 02:35:48,960
organize this virtual spring

02:35:45,680 --> 02:35:52,080
so from my experience i'd say

02:35:48,960 --> 02:35:54,080
you need to decide on sql and schedule

02:35:52,080 --> 02:35:55,520
and time slots which work for most of

02:35:54,080 --> 02:35:58,560
the team members

02:35:55,520 --> 02:36:00,080
like depending on their daily uh you

02:35:58,560 --> 02:36:03,200
need to reside on clear

02:36:00,080 --> 02:36:05,920
agenda for the discussion uh

02:36:03,200 --> 02:36:06,720
the on spot discussions does not really

02:36:05,920 --> 02:36:10,880
help

02:36:06,720 --> 02:36:13,760
with the in the virtual springs

02:36:10,880 --> 02:36:14,960
and also we need to allocate probably

02:36:13,760 --> 02:36:17,760
half an hour or

02:36:14,960 --> 02:36:18,560
however for social or off-topic chat

02:36:17,760 --> 02:36:21,600
because

02:36:18,560 --> 02:36:22,000
those areas were also part of in-person

02:36:21,600 --> 02:36:25,200
chat

02:36:22,000 --> 02:36:28,479
uh in-person events so

02:36:25,200 --> 02:36:29,040
it's good to have that uh as part of

02:36:28,479 --> 02:36:31,200
your

02:36:29,040 --> 02:36:33,120
event and also you need to announce

02:36:31,200 --> 02:36:34,880
event in advance like we announced plus

02:36:33,120 --> 02:36:37,840
always spend like two days in

02:36:34,880 --> 02:36:38,479
advance and that did not really actually

02:36:37,840 --> 02:36:40,960
work

02:36:38,479 --> 02:36:42,240
that well but yeah you also need to

02:36:40,960 --> 02:36:46,240
announce event in

02:36:42,240 --> 02:36:48,800
advance uh for technical side of

02:36:46,240 --> 02:36:51,439
the uh for this uh we have

02:36:48,800 --> 02:36:55,760
infrastructure in place for organizing

02:36:51,439 --> 02:36:59,439
large virtual events which is big.org

02:36:55,760 --> 02:37:01,280
we have good also to attend this unique

02:36:59,439 --> 02:37:03,760
good audio video equipment

02:37:01,280 --> 02:37:04,880
because that makes experience much

02:37:03,760 --> 02:37:07,040
smoother

02:37:04,880 --> 02:37:08,319
and also you need reasonable internet

02:37:07,040 --> 02:37:11,120
connections

02:37:08,319 --> 02:37:11,840
and if you are interested in organizing

02:37:11,120 --> 02:37:14,640
some

02:37:11,840 --> 02:37:16,160
kind of such virtual sprints or events

02:37:14,640 --> 02:37:19,359
feel free to contact to

02:37:16,160 --> 02:37:21,920
me or academic team

02:37:19,359 --> 02:37:23,520
about that and we would be happy to help

02:37:21,920 --> 02:37:26,240
help for that

02:37:23,520 --> 02:37:26,720
and that's it uh i thought i guess we

02:37:26,240 --> 02:37:28,800
don't have

02:37:26,720 --> 02:37:30,080
time for questions but if you have any

02:37:28,800 --> 02:37:32,800
questions feel free to

02:37:30,080 --> 02:37:35,200
send it to me and i will be happy to

02:37:32,800 --> 02:37:35,200
answer

02:37:42,000 --> 02:37:46,640
thank you so much uh i hope everyone

02:37:44,880 --> 02:37:51,920
enjoyed that

02:37:46,640 --> 02:37:51,920
and next we are going to aids

02:37:58,840 --> 02:38:01,840
presentation

02:38:08,000 --> 02:38:12,319
hi there and welcome to my academy talk

02:38:10,720 --> 02:38:15,439
the talk with the subtitle

02:38:12,319 --> 02:38:17,120
eventually you'll all be dead i'm adrian

02:38:15,439 --> 02:38:19,120
and i'm going to be talking about kde's

02:38:17,120 --> 02:38:21,840
fiduciary license agreement

02:38:19,120 --> 02:38:23,040
that means licensing copyright legal

02:38:21,840 --> 02:38:24,880
bits

02:38:23,040 --> 02:38:26,640
copyright is one of those things that

02:38:24,880 --> 02:38:29,439
just happens there's a

02:38:26,640 --> 02:38:30,160
plenty of laws around it but most of the

02:38:29,439 --> 02:38:32,160
time

02:38:30,160 --> 02:38:33,680
whenever you do something creative

02:38:32,160 --> 02:38:36,319
copyright happens

02:38:33,680 --> 02:38:37,600
so if you do something creative two

02:38:36,319 --> 02:38:40,880
kinds of copyright

02:38:37,600 --> 02:38:41,200
are created moral rights which identify

02:38:40,880 --> 02:38:44,319
you

02:38:41,200 --> 02:38:46,479
as the author or the creator of the work

02:38:44,319 --> 02:38:47,920
and economic rights writes the

02:38:46,479 --> 02:38:49,760
exploitation of the work

02:38:47,920 --> 02:38:52,240
so if i grab my ugly red guitar over

02:38:49,760 --> 02:38:56,800
here and play a little song

02:38:52,240 --> 02:39:00,319
you know like i like to work on kde

02:38:56,800 --> 02:39:03,760
it's written in plus plus c

02:39:00,319 --> 02:39:05,600
bam copyright happens i now have the

02:39:03,760 --> 02:39:07,359
moral rights to be identified

02:39:05,600 --> 02:39:08,960
as the author of that terrible little

02:39:07,359 --> 02:39:11,280
song and

02:39:08,960 --> 02:39:13,600
if we want to exploit it that's my right

02:39:11,280 --> 02:39:13,600
as well

02:39:14,160 --> 02:39:17,920
speaking of copyright the license on

02:39:16,240 --> 02:39:20,640
this talk is creative commons

02:39:17,920 --> 02:39:23,359
attribution sharealike 4.0

02:39:20,640 --> 02:39:25,359
as long as the copyright exists that's

02:39:23,359 --> 02:39:27,840
the license you'll need to abide by

02:39:25,359 --> 02:39:30,080
when you reuse or remix this particular

02:39:27,840 --> 02:39:32,960
talk

02:39:30,080 --> 02:39:34,319
so for the next 70 years or so those

02:39:32,960 --> 02:39:37,359
economic rights

02:39:34,319 --> 02:39:40,319
attached to this talk are dealt with

02:39:37,359 --> 02:39:42,399
that's a long time because copyright

02:39:40,319 --> 02:39:44,319
lasts a long time and it's longer than i

02:39:42,399 --> 02:39:47,120
personally am likely to care about the

02:39:44,319 --> 02:39:49,040
economic rights to this particular talk

02:39:47,120 --> 02:39:51,280
as a matter of fact it's probably longer

02:39:49,040 --> 02:39:56,000
than i myself will last

02:39:51,280 --> 02:39:58,640
that's a long time but during that time

02:39:56,000 --> 02:40:00,399
i can trade in those economic rights the

02:39:58,640 --> 02:40:02,560
economic rights to a talk

02:40:00,399 --> 02:40:04,640
or to any creative work can be bought

02:40:02,560 --> 02:40:06,399
sold traded on the market

02:40:04,640 --> 02:40:09,680
you can assign them through contracts

02:40:06,399 --> 02:40:09,680
you can even give them away

02:40:10,479 --> 02:40:14,319
when you license something you're not

02:40:12,880 --> 02:40:16,160
giving away the

02:40:14,319 --> 02:40:18,160
economic rights you're granting a

02:40:16,160 --> 02:40:20,560
license you're granting use

02:40:18,160 --> 02:40:22,720
and so open source licensing retains the

02:40:20,560 --> 02:40:24,800
original economic rights

02:40:22,720 --> 02:40:26,720
the author of the creative work the

02:40:24,800 --> 02:40:29,040
author of the source code

02:40:26,720 --> 02:40:30,720
still has those economic rights and of

02:40:29,040 --> 02:40:32,240
course the moral rights as well those

02:40:30,720 --> 02:40:34,240
never go away

02:40:32,240 --> 02:40:35,439
but those economic rights still vest in

02:40:34,240 --> 02:40:37,920
the original

02:40:35,439 --> 02:40:37,920
author

02:40:38,640 --> 02:40:42,080
there's a number of reasons you might

02:40:39,920 --> 02:40:43,680
want to contact

02:40:42,080 --> 02:40:45,520
a rights holder the holder of the

02:40:43,680 --> 02:40:46,160
economic rights to a particular creative

02:40:45,520 --> 02:40:48,399
work

02:40:46,160 --> 02:40:50,240
for instance if licensing needs to

02:40:48,399 --> 02:40:51,920
change licensing might need to change

02:40:50,240 --> 02:40:54,160
because it's unclear

02:40:51,920 --> 02:40:56,000
because it's incompatible for instance

02:40:54,160 --> 02:40:56,640
if you've got source code that combines

02:40:56,000 --> 02:40:58,240
two different

02:40:56,640 --> 02:41:00,720
open source licenses it may be

02:40:58,240 --> 02:41:02,160
incompatible and you may want to contact

02:41:00,720 --> 02:41:03,920
the original rights holder to find out

02:41:02,160 --> 02:41:05,520
what was actually intended

02:41:03,920 --> 02:41:07,439
you may want to ask the original rights

02:41:05,520 --> 02:41:09,520
holder to grant a different license so

02:41:07,439 --> 02:41:10,800
that it becomes compatible

02:41:09,520 --> 02:41:12,640
this is also one of the reasons that

02:41:10,800 --> 02:41:14,960
licenses get updated

02:41:12,640 --> 02:41:17,120
when laws change when interpretations

02:41:14,960 --> 02:41:19,040
change when technologies change

02:41:17,120 --> 02:41:20,800
licenses may need to change with them

02:41:19,040 --> 02:41:23,760
and at that point you need to contact

02:41:20,800 --> 02:41:24,399
the rights holder to ask them for a new

02:41:23,760 --> 02:41:28,399
license

02:41:24,399 --> 02:41:30,000
a new grant to use the copyrighted work

02:41:28,399 --> 02:41:31,520
another reason to talk to original

02:41:30,000 --> 02:41:32,399
rights holders is in case of

02:41:31,520 --> 02:41:34,399
infringement

02:41:32,399 --> 02:41:35,520
in general it is only the original

02:41:34,399 --> 02:41:39,279
rights holder

02:41:35,520 --> 02:41:41,920
who can deal with infringement

02:41:39,279 --> 02:41:44,319
violations of the license someone is

02:41:41,920 --> 02:41:46,720
making illegal copies

02:41:44,319 --> 02:41:47,680
well it's the original rights holder who

02:41:46,720 --> 02:41:50,800
has standing

02:41:47,680 --> 02:41:54,080
to deal with it basically that means

02:41:50,800 --> 02:41:54,080
has standing to sue

02:41:54,800 --> 02:41:58,960
as long as we're trading in the economic

02:41:57,359 --> 02:42:00,800
rights to a creative work

02:41:58,960 --> 02:42:03,120
there's a number of ways that the rights

02:42:00,800 --> 02:42:06,240
holder can be changed

02:42:03,120 --> 02:42:09,200
generally if you're working for hire

02:42:06,240 --> 02:42:10,160
your creative work is copyrighted by

02:42:09,200 --> 02:42:13,040
your employer

02:42:10,160 --> 02:42:14,880
not by yourself this isn't all that

02:42:13,040 --> 02:42:17,680
common in the open source world

02:42:14,880 --> 02:42:18,960
but in general work for hire situations

02:42:17,680 --> 02:42:22,000
it is

02:42:18,960 --> 02:42:23,520
you can assign or trade the economic

02:42:22,000 --> 02:42:24,720
rights to somebody else through some

02:42:23,520 --> 02:42:26,800
kind of an agreement

02:42:24,720 --> 02:42:28,479
a sales agreement for instance and you

02:42:26,800 --> 02:42:30,240
can also assign

02:42:28,479 --> 02:42:32,319
the economic rights through some other

02:42:30,240 --> 02:42:35,680
legal instrument and i'm going to return

02:42:32,319 --> 02:42:37,200
to the subtitle of this particular talk

02:42:35,680 --> 02:42:39,680
and remind you

02:42:37,200 --> 02:42:41,359
someday all of us will be dead and your

02:42:39,680 --> 02:42:44,960
will is a legal instrument

02:42:41,359 --> 02:42:49,760
that transfers economic rights

02:42:44,960 --> 02:42:49,760
to somebody else namely your next of kin

02:42:50,479 --> 02:42:54,560
so there's a number of reasons why you

02:42:52,160 --> 02:42:57,520
might want to change the rights holder

02:42:54,560 --> 02:42:57,920
whichever reason applies to you you can

02:42:57,520 --> 02:43:00,399
use

02:42:57,920 --> 02:43:01,439
any one of those instruments that i

02:43:00,399 --> 02:43:04,160
mentioned earlier

02:43:01,439 --> 02:43:06,720
to change the right holder you can sell

02:43:04,160 --> 02:43:09,359
trade or give away

02:43:06,720 --> 02:43:12,080
one of the instruments that exists is

02:43:09,359 --> 02:43:14,479
called a fiduciary license agreement

02:43:12,080 --> 02:43:15,200
the word fiduciary comes from fetus

02:43:14,479 --> 02:43:18,000
latin for

02:43:15,200 --> 02:43:18,399
trustworthy someone you trust to do the

02:43:18,000 --> 02:43:21,600
right

02:43:18,399 --> 02:43:22,800
thing and a fiduciary license agreement

02:43:21,600 --> 02:43:24,960
is generally something

02:43:22,800 --> 02:43:27,120
of the form i trust you to do the right

02:43:24,960 --> 02:43:30,000
thing and you trust me right back

02:43:27,120 --> 02:43:31,520
because your fiduciary is someone you

02:43:30,000 --> 02:43:33,600
trust with your life or at least your

02:43:31,520 --> 02:43:37,520
creative output

02:43:33,600 --> 02:43:38,160
so kdev has a fiduciary license

02:43:37,520 --> 02:43:39,920
agreement

02:43:38,160 --> 02:43:42,000
and you might want to change the rights

02:43:39,920 --> 02:43:45,760
holder in your creative work to

02:43:42,000 --> 02:43:48,560
kdev one reason to do that is because

02:43:45,760 --> 02:43:50,319
kdev has a charter and a social contract

02:43:48,560 --> 02:43:53,680
it's bound by its

02:43:50,319 --> 02:43:56,319
own statutes and so

02:43:53,680 --> 02:43:58,960
it can't change its mind all that easily

02:43:56,319 --> 02:44:00,479
you know now that it's going to

02:43:58,960 --> 02:44:02,160
abide by certain principles and it's

02:44:00,479 --> 02:44:04,720
going to continue to do so

02:44:02,160 --> 02:44:06,000
independently of the individual members

02:44:04,720 --> 02:44:08,640
of the ev

02:44:06,000 --> 02:44:09,760
and independently of short or long-term

02:44:08,640 --> 02:44:13,200
gain

02:44:09,760 --> 02:44:16,240
the ev exists as

02:44:13,200 --> 02:44:17,680
long as as it as an association exists

02:44:16,240 --> 02:44:20,160
and the united nations

02:44:17,680 --> 02:44:21,680
is actually the successor organization

02:44:20,160 --> 02:44:23,760
for kdev

02:44:21,680 --> 02:44:26,160
so you can rest assured that as long as

02:44:23,760 --> 02:44:29,120
the united nations exists

02:44:26,160 --> 02:44:30,399
someone can take care of the

02:44:29,120 --> 02:44:35,439
responsibilities

02:44:30,399 --> 02:44:38,319
of as a copyright holder

02:44:35,439 --> 02:44:40,800
and so the con the fla the fiduciary

02:44:38,319 --> 02:44:43,200
license agreement that tries to assign

02:44:40,800 --> 02:44:44,640
uh copyright to kdev was written in

02:44:43,200 --> 02:44:45,760
conjunction with the free software

02:44:44,640 --> 02:44:47,120
foundation europe

02:44:45,760 --> 02:44:48,880
and basically it takes all the

02:44:47,120 --> 02:44:51,520
assignable bits

02:44:48,880 --> 02:44:53,040
all the economic rights gives them to

02:44:51,520 --> 02:44:54,800
the kdev

02:44:53,040 --> 02:44:56,080
and right away gives everything right

02:44:54,800 --> 02:44:57,920
back to you

02:44:56,080 --> 02:44:59,439
here's the url to read the actual

02:44:57,920 --> 02:45:03,040
document

02:44:59,439 --> 02:45:06,160
here's a quote from the document

02:45:03,040 --> 02:45:08,640
which basically says what i just said

02:45:06,160 --> 02:45:09,200
here we'll give you this stuff and we

02:45:08,640 --> 02:45:12,840
give you

02:45:09,200 --> 02:45:15,200
a non-exclusive license right back at

02:45:12,840 --> 02:45:17,600
you

02:45:15,200 --> 02:45:19,359
the effect of this is that kdev has

02:45:17,600 --> 02:45:23,200
standing to deal with

02:45:19,359 --> 02:45:24,080
all those reasons to contact the rights

02:45:23,200 --> 02:45:26,720
holder

02:45:24,080 --> 02:45:29,600
the eevee has standing to sue has

02:45:26,720 --> 02:45:32,479
standing to re-license

02:45:29,600 --> 02:45:33,760
in re-licensing it's bound by an

02:45:32,479 --> 02:45:37,040
additional document

02:45:33,760 --> 02:45:40,160
the fiduciary re-licensing policy

02:45:37,040 --> 02:45:43,439
which says what kind of re-licensing kde

02:45:40,160 --> 02:45:43,920
ev can do but as a consequence also

02:45:43,439 --> 02:45:46,080
because

02:45:43,920 --> 02:45:47,920
you got everything back you can

02:45:46,080 --> 02:45:48,880
re-license and distribute your source

02:45:47,920 --> 02:45:52,160
code

02:45:48,880 --> 02:45:54,960
your which is your source code

02:45:52,160 --> 02:45:54,960
as usual

02:45:55,520 --> 02:45:59,279
so all in all if you're a contributor

02:45:57,920 --> 02:46:01,120
kde

02:45:59,279 --> 02:46:05,200
any part of kde under the entire

02:46:01,120 --> 02:46:07,200
umbrella and you trust the kdev

02:46:05,200 --> 02:46:10,080
and you've read the document and find it

02:46:07,200 --> 02:46:13,520
to be in order you could sign the fla

02:46:10,080 --> 02:46:16,560
the fla is entirely optional

02:46:13,520 --> 02:46:19,439
it's entirely optional to sign the fla

02:46:16,560 --> 02:46:23,040
but if you do you make kdev stronger

02:46:19,439 --> 02:46:24,800
and it can take some responsibilities

02:46:23,040 --> 02:46:26,720
off of your shoulders

02:46:24,800 --> 02:46:28,000
the responsibilities for those economic

02:46:26,720 --> 02:46:31,279
rights and

02:46:28,000 --> 02:46:32,160
place them on somebody else's this has

02:46:31,279 --> 02:46:39,840
been my talk

02:46:32,160 --> 02:46:39,840
remember someday all of us will be dead

02:46:45,680 --> 02:46:52,240
all right that was awesome we are

02:46:49,040 --> 02:46:56,080
going to go to our

02:46:52,240 --> 02:46:58,080
final presentation well final fast track

02:46:56,080 --> 02:47:07,840
now

02:46:58,080 --> 02:47:07,840
um so kai please take the stage

02:47:18,640 --> 02:47:23,520
all right everyone welcome to my talk

02:47:20,880 --> 02:47:26,880
about super secret plasma features

02:47:23,520 --> 02:47:28,800
um ocular didn't have a super secret svg

02:47:26,880 --> 02:47:29,760
badge so that's why it says top secret

02:47:28,800 --> 02:47:31,600
here

02:47:29,760 --> 02:47:33,600
this talk is about some of the features

02:47:31,600 --> 02:47:35,680
in plasma that you may not know

02:47:33,600 --> 02:47:37,520
that are completely non-discoverable you

02:47:35,680 --> 02:47:38,479
only know if you know the source code in

02:47:37,520 --> 02:47:41,760
and out like

02:47:38,479 --> 02:47:44,080
our plasma developers such as me do and

02:47:41,760 --> 02:47:44,800
it also um shows you a bunch of things

02:47:44,080 --> 02:47:47,120
that if you

02:47:44,800 --> 02:47:50,560
know them the question how you could use

02:47:47,120 --> 02:47:53,359
a computer or plasma without them

02:47:50,560 --> 02:47:53,920
so first of all if there's a talk i give

02:47:53,359 --> 02:47:55,520
about

02:47:53,920 --> 02:47:57,840
it has to include something about

02:47:55,520 --> 02:48:00,160
notifications and i talk about this

02:47:57,840 --> 02:48:01,439
feature a lot but if you take a

02:48:00,160 --> 02:48:03,279
screenshot in plasma

02:48:01,439 --> 02:48:04,880
you get this little notification and

02:48:03,279 --> 02:48:07,840
then you can actually drag and drop

02:48:04,880 --> 02:48:09,680
out the um resulting screenshot and drag

02:48:07,840 --> 02:48:12,080
it to your email composer your

02:48:09,680 --> 02:48:14,240
chat program your ticket system a github

02:48:12,080 --> 02:48:16,160
merge request or wherever you need it

02:48:14,240 --> 02:48:17,520
so you just do meta shift print screen

02:48:16,160 --> 02:48:19,359
select the region

02:48:17,520 --> 02:48:20,800
and done it and drag it over to wherever

02:48:19,359 --> 02:48:24,240
you need it that's my

02:48:20,800 --> 02:48:26,479
by far my favorite plasma feature it um

02:48:24,240 --> 02:48:27,760
yeah it makes me so much more productive

02:48:26,479 --> 02:48:29,200
and

02:48:27,760 --> 02:48:30,960
because i like the dragging things so

02:48:29,200 --> 02:48:33,600
much in 5

02:48:30,960 --> 02:48:34,960
18 or 19 i added a little proxy icon for

02:48:33,600 --> 02:48:37,359
those who know mac os

02:48:34,960 --> 02:48:38,720
if you download a file and you have

02:48:37,359 --> 02:48:40,080
plasma browse integration

02:48:38,720 --> 02:48:41,439
installed which you should then you get

02:48:40,080 --> 02:48:42,319
a little plasma notification when it

02:48:41,439 --> 02:48:44,640
finishes

02:48:42,319 --> 02:48:46,160
and on there you can then drag the file

02:48:44,640 --> 02:48:46,800
you just download it to wherever you

02:48:46,160 --> 02:48:48,720
need it

02:48:46,800 --> 02:48:50,479
for instance you downloaded some i don't

02:48:48,720 --> 02:48:51,120
know some log file you can drag it into

02:48:50,479 --> 02:48:54,240
emacs

02:48:51,120 --> 02:48:56,160
and then look at it um also the menu has

02:48:54,240 --> 02:48:58,240
some additional actions there

02:48:56,160 --> 02:49:01,279
like open containing folder or share to

02:48:58,240 --> 02:49:01,279
online service if you just

02:49:10,960 --> 02:49:14,560
but it's still a right download context

02:49:12,399 --> 02:49:16,800
menu and it's something you have to be

02:49:14,560 --> 02:49:19,760
aware of

02:49:16,800 --> 02:49:20,080
then the more commonly known things are

02:49:19,760 --> 02:49:24,000
that

02:49:20,080 --> 02:49:26,399
system tray has many many little

02:49:24,000 --> 02:49:28,080
mouse and special mouse buttons you can

02:49:26,399 --> 02:49:28,880
click so for instance i think the most

02:49:28,080 --> 02:49:30,560
common one is

02:49:28,880 --> 02:49:32,000
that people know that if you mouse wheel

02:49:30,560 --> 02:49:32,720
the volume icon you can change the

02:49:32,000 --> 02:49:34,720
volume

02:49:32,720 --> 02:49:37,279
and if you middle click you can toggle

02:49:34,720 --> 02:49:39,120
mute and also in the popup you can drag

02:49:37,279 --> 02:49:41,040
and drop applications to change output

02:49:39,120 --> 02:49:42,880
devices but because nobody understood

02:49:41,040 --> 02:49:43,520
that there's now a menu where you can

02:49:42,880 --> 02:49:46,240
click and

02:49:43,520 --> 02:49:47,680
reassign the output device also the

02:49:46,240 --> 02:49:48,720
microphone indicator has the same

02:49:47,680 --> 02:49:50,080
feature

02:49:48,720 --> 02:49:51,920
if you middle click it you can toggle

02:49:50,080 --> 02:49:53,600
your microphone on and off and it's

02:49:51,920 --> 02:49:55,520
interesting this microphone indicator

02:49:53,600 --> 02:49:55,840
was done as part of the plasma privacy

02:49:55,520 --> 02:49:58,160
go

02:49:55,840 --> 02:49:59,520
sprint and turned out really useful for

02:49:58,160 --> 02:50:01,040
like corona when you're at home and

02:49:59,520 --> 02:50:02,720
doing online conferencing you don't have

02:50:01,040 --> 02:50:04,560
to deal with like different

02:50:02,720 --> 02:50:06,160
conferencing solutions or you are now

02:50:04,560 --> 02:50:07,840
muted all the time in big blue button

02:50:06,160 --> 02:50:08,720
you just middle click the volume icon on

02:50:07,840 --> 02:50:10,319
your pedal

02:50:08,720 --> 02:50:12,240
the battery icon also has a bunch of

02:50:10,319 --> 02:50:13,439
features if you mouse wheel it you can

02:50:12,240 --> 02:50:15,040
change the brightness

02:50:13,439 --> 02:50:16,880
and that's actually one of those

02:50:15,040 --> 02:50:18,319
features that came from my laziness like

02:50:16,880 --> 02:50:19,840
all of those features are just for me

02:50:18,319 --> 02:50:21,120
being lazy

02:50:19,840 --> 02:50:22,880
for instance imagine you have your

02:50:21,120 --> 02:50:24,240
laptop on your sofa and you're just out

02:50:22,880 --> 02:50:25,520
of reach of your keyboard and if you

02:50:24,240 --> 02:50:26,399
want to change the brightness you would

02:50:25,520 --> 02:50:28,560
have to like

02:50:26,399 --> 02:50:29,680
press fn in some weird combination to

02:50:28,560 --> 02:50:31,600
change the brightness but

02:50:29,680 --> 02:50:32,800
your touch pad or your external mouse

02:50:31,600 --> 02:50:33,600
might be on your lap and then you can

02:50:32,800 --> 02:50:35,920
just

02:50:33,600 --> 02:50:38,240
mouse wheel the battery icon you can

02:50:35,920 --> 02:50:38,960
also configure it to show the percentage

02:50:38,240 --> 02:50:40,720
on the icon

02:50:38,960 --> 02:50:42,000
it's disabled by default because i think

02:50:40,720 --> 02:50:43,840
it doesn't look very pretty but it's

02:50:42,000 --> 02:50:45,840
there if you want it

02:50:43,840 --> 02:50:47,359
then also in plasma 520 and it's

02:50:45,840 --> 02:50:49,120
something i don't know why i didn't edit

02:50:47,359 --> 02:50:51,840
earlier but because at work i have

02:50:49,120 --> 02:50:53,200
19 and i wish i had that feature already

02:50:51,840 --> 02:50:54,880
because we're doing screen sharing i

02:50:53,200 --> 02:50:56,960
want to turn off notifications

02:50:54,880 --> 02:50:58,560
so in 520 you can also middle click the

02:50:56,960 --> 02:50:59,920
notification icon to toggle do not

02:50:58,560 --> 02:51:01,600
disturb mode and then you don't have to

02:50:59,920 --> 02:51:02,800
select like one hour four hours to just

02:51:01,600 --> 02:51:05,760
middle click it and off

02:51:02,800 --> 02:51:08,240
of your notifications go plus my network

02:51:05,760 --> 02:51:09,279
manager also allows you to create a qr

02:51:08,240 --> 02:51:11,359
code

02:51:09,279 --> 02:51:12,319
from um the wi-fi network so if your

02:51:11,359 --> 02:51:14,319
friends over

02:51:12,319 --> 02:51:16,399
i mean you shouldn't right now but once

02:51:14,319 --> 02:51:18,960
you're able to friends over again

02:51:16,399 --> 02:51:20,880
then you can just share the um wi-fi

02:51:18,960 --> 02:51:23,359
code via qr code have to scan it and

02:51:20,880 --> 02:51:25,120
then they're on your network

02:51:23,359 --> 02:51:27,120
so media controllers also another of my

02:51:25,120 --> 02:51:28,880
favorites it's the one icon that shows

02:51:27,120 --> 02:51:31,680
up in your panel when you play video

02:51:28,880 --> 02:51:32,080
and things like that it also has a

02:51:31,680 --> 02:51:34,160
million

02:51:32,080 --> 02:51:35,840
hidden features that i think nobody but

02:51:34,160 --> 02:51:36,640
me knows because i added them just

02:51:35,840 --> 02:51:38,960
randomly and

02:51:36,640 --> 02:51:40,080
you know so you can also middle click to

02:51:38,960 --> 02:51:42,479
play and pause the

02:51:40,080 --> 02:51:43,840
player use the wheel to adjust just the

02:51:42,479 --> 02:51:46,000
player volume

02:51:43,840 --> 02:51:47,840
and then also if your mouse has back and

02:51:46,000 --> 02:51:49,840
forward keys for like browser navigation

02:51:47,840 --> 02:51:51,600
you can use those to change tracks so

02:51:49,840 --> 02:51:53,200
you can just go to the next track by

02:51:51,600 --> 02:51:54,880
using the next button on the media

02:51:53,200 --> 02:51:56,800
controller in the panel and if you have

02:51:54,880 --> 02:51:58,319
the pop-up open then you can also use

02:51:56,800 --> 02:52:00,160
stuff like press the number three and

02:51:58,319 --> 02:52:01,439
then it seeks to like thirty percent of

02:52:00,160 --> 02:52:03,760
the track so you can like

02:52:01,439 --> 02:52:05,439
replay the same sequence all the time

02:52:03,760 --> 02:52:07,359
and of course there's global shortcuts

02:52:05,439 --> 02:52:08,399
if the players empress enabled like vlc

02:52:07,359 --> 02:52:10,880
player and also

02:52:08,399 --> 02:52:12,560
um all of the other players then your

02:52:10,880 --> 02:52:15,439
media keys on your keyboard they will

02:52:12,560 --> 02:52:17,120
magically just work

02:52:15,439 --> 02:52:18,880
and of course if you have plaster

02:52:17,120 --> 02:52:21,359
browser integration then it also works

02:52:18,880 --> 02:52:24,240
websites so if you have youtube or

02:52:21,359 --> 02:52:26,000
some other web-based player running you

02:52:24,240 --> 02:52:26,479
can use media controller to control the

02:52:26,000 --> 02:52:28,319
player

02:52:26,479 --> 02:52:30,800
pause seek forward and do things like

02:52:28,319 --> 02:52:32,479
that and then also one feature i

02:52:30,800 --> 02:52:34,640
implemented back when i built this thing

02:52:32,479 --> 02:52:35,200
is that you can bring the player to the

02:52:34,640 --> 02:52:37,040
front

02:52:35,200 --> 02:52:38,319
um i think for example vlc player

02:52:37,040 --> 02:52:39,920
doesn't do it but

02:52:38,319 --> 02:52:41,840
now i know this with big blue button

02:52:39,920 --> 02:52:43,600
because i often lose my big blue button

02:52:41,840 --> 02:52:44,640
conferencing tab in the million tabs i

02:52:43,600 --> 02:52:46,240
have open

02:52:44,640 --> 02:52:49,359
and because big blue button is just a

02:52:46,240 --> 02:52:50,880
html5 video stream from what i can tell

02:52:49,359 --> 02:52:52,560
you right click on the media controller

02:52:50,880 --> 02:52:54,160
you click on open and then it brings you

02:52:52,560 --> 02:52:55,760
right back to the active

02:52:54,160 --> 02:52:57,600
big blue button conferencing tab so

02:52:55,760 --> 02:52:58,479
that's also very unintended uh useful

02:52:57,600 --> 02:53:00,240
side effect

02:52:58,479 --> 02:53:01,920
and then of course if you have kdconnect

02:53:00,240 --> 02:53:04,000
um you can control your

02:53:01,920 --> 02:53:05,520
players from your phone and it even

02:53:04,000 --> 02:53:07,040
pauses when you get a phone call and

02:53:05,520 --> 02:53:08,960
it's super super handy

02:53:07,040 --> 02:53:10,800
still a bit freaking me out if you watch

02:53:08,960 --> 02:53:12,720
a youtube video full screen and then

02:53:10,800 --> 02:53:14,160
like a phone call comes in and then your

02:53:12,720 --> 02:53:15,600
video pauses magically and then your

02:53:14,160 --> 02:53:17,040
phone starts ringing it's like a bit

02:53:15,600 --> 02:53:19,040
eerie

02:53:17,040 --> 02:53:21,120
task manager it's the one that shows

02:53:19,040 --> 02:53:22,720
your windows on your panel so

02:53:21,120 --> 02:53:25,120
if you're a windows user you might find

02:53:22,720 --> 02:53:26,960
the naming confusing

02:53:25,120 --> 02:53:28,319
so for example middle clicking on

02:53:26,960 --> 02:53:30,240
windows in a taskbar

02:53:28,319 --> 02:53:32,560
you can configure it to do all kinds of

02:53:30,240 --> 02:53:34,000
things i personally use a close window

02:53:32,560 --> 02:53:35,520
so it's like in a browser a middle

02:53:34,000 --> 02:53:37,279
clicker window it goes away

02:53:35,520 --> 02:53:38,800
by default i think we now do open new

02:53:37,279 --> 02:53:40,000
instance for middle clicking and then

02:53:38,800 --> 02:53:41,359
you can also do like bring it to the

02:53:40,000 --> 02:53:43,040
current virtual desktops

02:53:41,359 --> 02:53:44,720
you can use the mouse wheel to change

02:53:43,040 --> 02:53:46,720
between windows and then

02:53:44,720 --> 02:53:48,960
also you can use back and forward

02:53:46,720 --> 02:53:49,840
browser buttons on a player window so if

02:53:48,960 --> 02:53:52,560
you have a vlc

02:53:49,840 --> 02:53:54,479
player window in your panel you can use

02:53:52,560 --> 02:53:56,000
browser back and forward mouse buttons

02:53:54,479 --> 02:53:58,240
on that window

02:53:56,000 --> 02:53:59,920
entry in your panel to change tracks

02:53:58,240 --> 02:54:02,319
because that is a much bigger hit

02:53:59,920 --> 02:54:05,040
target than the tiny media controller

02:54:02,319 --> 02:54:07,120
player in your tray so you can just

02:54:05,040 --> 02:54:09,040
target this bigger vlc player window in

02:54:07,120 --> 02:54:10,479
your panel and use the buttons there

02:54:09,040 --> 02:54:11,920
maybe i should also add a feature to

02:54:10,479 --> 02:54:12,560
middle click pause or something like it

02:54:11,920 --> 02:54:16,160
i don't know

02:54:12,560 --> 02:54:18,160
or mute um k right now i think most of

02:54:16,160 --> 02:54:20,399
you know but still

02:54:18,160 --> 02:54:22,880
you open it by alt space meta space alt

02:54:20,399 --> 02:54:24,720
f2 some weird macbook button combination

02:54:22,880 --> 02:54:26,800
it can convert units uh you can drag and

02:54:24,720 --> 02:54:27,439
drop results so most of these tips are

02:54:26,800 --> 02:54:29,760
like

02:54:27,439 --> 02:54:31,040
dragging things and obscure mouse button

02:54:29,760 --> 02:54:32,960
features um

02:54:31,040 --> 02:54:34,720
if you find a file in k runner you can

02:54:32,960 --> 02:54:36,720
drag it to your desktop or to whatever

02:54:34,720 --> 02:54:38,720
application you wanted to open it

02:54:36,720 --> 02:54:40,319
and then web shortcuts you can configure

02:54:38,720 --> 02:54:42,240
different web shortcuts they come from

02:54:40,319 --> 02:54:45,200
conqueror

02:54:42,240 --> 02:54:45,920
but you can like open boxilla and things

02:54:45,200 --> 02:54:49,359
like that

02:54:45,920 --> 02:54:51,520
so yeah you type i used to type like fab

02:54:49,359 --> 02:54:54,000
d1234 and then when we were still like

02:54:51,520 --> 02:54:57,120
heavy on fabricator we could uh

02:54:54,000 --> 02:54:59,120
then i could just jump to a fabricator

02:54:57,120 --> 02:55:01,520
ticket you can also change it to use a

02:54:59,120 --> 02:55:02,960
space instead of colon

02:55:01,520 --> 02:55:04,960
and then there's a bunch of other things

02:55:02,960 --> 02:55:06,640
there's clipper actions which

02:55:04,960 --> 02:55:08,479
i don't know what it does i believe you

02:55:06,640 --> 02:55:10,800
can configure clipper to offer

02:55:08,479 --> 02:55:12,640
certain actions based on what kind of

02:55:10,800 --> 02:55:13,120
regular expression the text you just

02:55:12,640 --> 02:55:15,200
copied

02:55:13,120 --> 02:55:16,800
matches in your clipboard or something

02:55:15,200 --> 02:55:18,560
there's middle click paste i think also

02:55:16,800 --> 02:55:20,000
most of you know but if you select text

02:55:18,560 --> 02:55:21,680
somewhere you can then paste it

02:55:20,000 --> 02:55:23,359
somewhere else by middle clicking

02:55:21,680 --> 02:55:24,800
and if you do that on a desktop it

02:55:23,359 --> 02:55:26,399
creates a sticky note for you

02:55:24,800 --> 02:55:27,760
and actually in the early days it would

02:55:26,399 --> 02:55:29,279
also do that on the panel and then

02:55:27,760 --> 02:55:30,640
people would like accidentally middle

02:55:29,279 --> 02:55:31,120
click the panel and get like sticky

02:55:30,640 --> 02:55:32,800
notes and

02:55:31,120 --> 02:55:34,560
didn't know how to get rid of them so

02:55:32,800 --> 02:55:36,160
nowadays it only adds sticky note on

02:55:34,560 --> 02:55:37,600
your desktop and you can disable that if

02:55:36,160 --> 02:55:38,880
you don't like that

02:55:37,600 --> 02:55:40,880
photos on a desktop are also

02:55:38,880 --> 02:55:41,600
spring-loaded if you drag a file over a

02:55:40,880 --> 02:55:43,520
folder

02:55:41,600 --> 02:55:44,800
wait for a bit then it opens the folder

02:55:43,520 --> 02:55:46,399
in a pop-up and then you can drag the

02:55:44,800 --> 02:55:48,160
file in it and then you can go like five

02:55:46,399 --> 02:55:49,040
folders down and open like a cascading

02:55:48,160 --> 02:55:51,279
pop-up

02:55:49,040 --> 02:55:52,080
list um if you drop an image on a

02:55:51,279 --> 02:55:53,680
desktop

02:55:52,080 --> 02:55:55,520
it creates an image frame like this

02:55:53,680 --> 02:55:57,439
lovely group photo down there or

02:55:55,520 --> 02:55:59,200
you can set it as a wallpaper and we

02:55:57,439 --> 02:56:01,120
also have night color support and plasma

02:55:59,200 --> 02:56:03,520
these days in quinn so that

02:56:01,120 --> 02:56:05,200
since 518 it can automatically reduce

02:56:03,520 --> 02:56:06,240
the amount of blue light in your screen

02:56:05,200 --> 02:56:09,279
for like

02:56:06,240 --> 02:56:09,279
better night hacking

02:56:11,279 --> 02:56:14,880
yeah i think that's it so that's uh

02:56:13,120 --> 02:56:16,960
those are a bunch of plasma features

02:56:14,880 --> 02:56:17,920
you now know exist and can make you more

02:56:16,960 --> 02:56:19,760
productive

02:56:17,920 --> 02:56:21,680
so thank you and i guess that was the

02:56:19,760 --> 02:56:24,479
last track for this morning and enjoy

02:56:21,680 --> 02:56:24,479
your lunch break

02:56:24,640 --> 02:56:28,160
oh and also if there's some idea you

02:56:26,880 --> 02:56:29,200
have to make those features more

02:56:28,160 --> 02:56:31,200
discoverable

02:56:29,200 --> 02:56:33,279
which don't include adding a first run

02:56:31,200 --> 02:56:35,040
wizard then hit me up and maybe we can

02:56:33,279 --> 02:56:36,399
make those features more accessible to

02:56:35,040 --> 02:56:39,040
everyone

02:56:36,399 --> 02:56:40,640
so we still have all three of our fast

02:56:39,040 --> 02:56:43,600
track speakers in the room

02:56:40,640 --> 02:56:44,160
um i would like to offer a couple

02:56:43,600 --> 02:56:48,800
minutes

02:56:44,160 --> 02:56:52,840
of q a if that's okay with our speakers

02:56:48,800 --> 02:56:56,240
all right fine with me okay well

02:56:52,840 --> 02:57:00,479
um audience if you have any

02:56:56,240 --> 02:57:00,479
questions let's put them in the shared

02:57:06,840 --> 02:57:09,840
notes

02:57:14,399 --> 02:57:20,399
i don't see any coming in maybe i'll

02:57:17,279 --> 02:57:20,399
check the public chat

02:57:21,760 --> 02:57:25,920
lots of claps all the way around

02:57:29,920 --> 02:57:34,080
there is a comment that says let's have

02:57:31,760 --> 02:57:37,600
a global what's this button

02:57:34,080 --> 02:57:39,760
for middle mouse button actions

02:57:37,600 --> 02:57:42,000
and yeah the good what's this feature

02:57:39,760 --> 02:57:42,000
here

02:57:42,640 --> 02:57:46,000
there's a comment let's add a tip of the

02:57:45,439 --> 02:57:48,840
day

02:57:46,000 --> 02:57:51,439
pop-up to tech users about these

02:57:48,840 --> 02:57:53,520
features speaking of tip of the day

02:57:51,439 --> 02:57:55,279
the most useful tip of the day i

02:57:53,520 --> 02:57:56,479
encountered when grabbing for like which

02:57:55,279 --> 02:57:59,359
apps still use this

02:57:56,479 --> 02:58:01,200
90s tip of the day feature okay my money

02:57:59,359 --> 02:58:03,120
has a tip which is did you know that

02:58:01,200 --> 02:58:04,720
okay my money team wishes you a nice day

02:58:03,120 --> 02:58:06,000
so that kind of shows how useful those

02:58:04,720 --> 02:58:09,840
tips can be so

02:58:06,000 --> 02:58:12,080
no we have some questions okay

02:58:09,840 --> 02:58:13,359
the battery icon is in the overflow

02:58:12,080 --> 02:58:17,760
pop-up wheeling

02:58:13,359 --> 02:58:19,120
doesn't work there i think you have to

02:58:17,760 --> 02:58:20,800
i think you have to wield the icon

02:58:19,120 --> 02:58:22,399
itself it could be that someone

02:58:20,800 --> 02:58:22,880
reflected system tray and broke that

02:58:22,399 --> 02:58:25,359
because

02:58:22,880 --> 02:58:26,800
um the thing is that by default the

02:58:25,359 --> 02:58:28,319
delegate in system tray

02:58:26,800 --> 02:58:30,080
if you click on it it brings the applet

02:58:28,319 --> 02:58:32,000
to the front and then only the icon

02:58:30,080 --> 02:58:33,520
itself has like special mouse area for

02:58:32,000 --> 02:58:35,200
doing real stuff and things like that so

02:58:33,520 --> 02:58:37,840
it's possible that this is broken

02:58:35,200 --> 02:58:40,640
or you would file a bug report right and

02:58:37,840 --> 02:58:44,080
then we can figure that out

02:58:40,640 --> 02:58:47,439
all right there is one

02:58:44,080 --> 02:58:50,560
coming in still i'll slowly read it

02:58:47,439 --> 02:58:52,560
um are the kde depths

02:58:50,560 --> 02:58:54,560
in particular the plasma depths

02:58:52,560 --> 02:58:58,880
interested in bringing

02:58:54,560 --> 02:58:58,880
tiling features to the next level

02:58:59,040 --> 02:59:04,640
um i mean quinn is not a tiling window

02:59:02,240 --> 02:59:06,399
manager there used to be a gsoc project

02:59:04,640 --> 02:59:07,920
or something for quinn for adding tiling

02:59:06,399 --> 02:59:09,520
window management support

02:59:07,920 --> 02:59:10,960
but it kind of fell into disrepair

02:59:09,520 --> 02:59:13,279
because i think none of the plasma

02:59:10,960 --> 02:59:15,279
developers are really like using

02:59:13,279 --> 02:59:17,040
tiling window managers so we don't know

02:59:15,279 --> 02:59:17,439
what the requirements are and we don't

02:59:17,040 --> 02:59:19,840
like

02:59:17,439 --> 02:59:22,479
care about testing those things so

02:59:19,840 --> 02:59:23,840
that's i think why we don't see it and

02:59:22,479 --> 02:59:25,600
i'm not i don't think we will see

02:59:23,840 --> 02:59:27,200
anything of that soon what i would

02:59:25,600 --> 02:59:28,800
personally really like and what i keep

02:59:27,200 --> 02:59:30,240
bugging queen people all the time is

02:59:28,800 --> 02:59:31,760
having like the ability to

02:59:30,240 --> 02:59:34,720
split the window left and right and then

02:59:31,760 --> 02:59:36,160
like drag the two windows simultaneously

02:59:34,720 --> 02:59:38,080
and i keep telling there's a script for

02:59:36,160 --> 02:59:39,520
that but i want to have that like as a

02:59:38,080 --> 02:59:43,600
first class citizen

02:59:39,520 --> 02:59:47,359
uh feature in quinn itself at some point

02:59:43,600 --> 02:59:50,000
all right so last comment or question

02:59:47,359 --> 02:59:50,880
just a request okay last request from

02:59:50,000 --> 02:59:52,800
adam

02:59:50,880 --> 02:59:54,800
the first time a user creates a note

02:59:52,800 --> 02:59:55,680
using middle click the note should also

02:59:54,800 --> 02:59:58,800
contain

02:59:55,680 --> 03:00:01,760
explanation that no the system is not

02:59:58,800 --> 03:00:04,240
haunted there is no need for a bug

03:00:01,760 --> 03:00:04,240
report

03:00:04,640 --> 03:00:09,680
yeah that could be interesting too yeah

03:00:07,680 --> 03:00:11,200
i think we should more embrace those

03:00:09,680 --> 03:00:13,359
first time features like

03:00:11,200 --> 03:00:15,279
for example if you go to notifications

03:00:13,359 --> 03:00:16,160
you enable do not disturb mode by using

03:00:15,279 --> 03:00:17,840
the menu

03:00:16,160 --> 03:00:19,439
and you do that a couple of times maybe

03:00:17,840 --> 03:00:20,479
or so it should say oh by the way you

03:00:19,439 --> 03:00:22,319
can also like

03:00:20,479 --> 03:00:24,080
use this shortcut to be quicker or

03:00:22,319 --> 03:00:27,120
something like that

03:00:24,080 --> 03:00:31,600
awesome well thank you

03:00:27,120 --> 03:00:36,080
um we are going to take a short break

03:00:31,600 --> 03:00:53,840
and we will be back at 4pm utc time

03:00:36,080 --> 03:00:53,840
1600 otc time we will see you then

03:02:59,840 --> 03:03:01,920

YouTube URL: https://www.youtube.com/watch?v=y59AOI4Vwvg


