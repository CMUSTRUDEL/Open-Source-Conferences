Title: CppCon 2015: Reid Kleckner "Clang on Windows: a status update"
Publication date: 2015-10-21
Playlist: CppCon 2015 Lightning Talks
Description: 
	http://www.Cppcon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,089 --> 00:00:04,770
yeah so I'm read I'm here I work on I

00:00:03,270 --> 00:00:06,029
work on clang and I make I basically

00:00:04,770 --> 00:00:08,550
work on making clang work well in

00:00:06,029 --> 00:00:10,800
Windows I work for Google and basically

00:00:08,550 --> 00:00:13,080
it's sort of this whole effort is really

00:00:10,800 --> 00:00:15,120
about getting getting clang working so

00:00:13,080 --> 00:00:16,770
we can sort of use it for all of our all

00:00:15,120 --> 00:00:18,990
of our projects that we ship on Windows

00:00:16,770 --> 00:00:20,580
as well as other platforms but you know

00:00:18,990 --> 00:00:22,100
everyone else gets to consume it all so

00:00:20,580 --> 00:00:24,930
that's that's pretty awesome

00:00:22,100 --> 00:00:27,180
and I I gave this talk I decided to give

00:00:24,930 --> 00:00:28,560
this talk because I'm here at this

00:00:27,180 --> 00:00:30,869
conference and I keep talking to people

00:00:28,560 --> 00:00:33,270
and they all want to know you know like

00:00:30,869 --> 00:00:34,920
what's the what's what's the deal with

00:00:33,270 --> 00:00:36,510
clang on Windows like when am I going to

00:00:34,920 --> 00:00:39,149
have it you know what are the what's

00:00:36,510 --> 00:00:41,790
done like what what's when will it be

00:00:39,149 --> 00:00:43,140
done and so I I felt it was important to

00:00:41,790 --> 00:00:46,260
come and basically answer this

00:00:43,140 --> 00:00:49,379
frequently asked question so the main

00:00:46,260 --> 00:00:51,180
thing is that we basically don't have

00:00:49,379 --> 00:00:52,860
exception handling done yet that's what

00:00:51,180 --> 00:00:56,489
I'm working on along with one of my

00:00:52,860 --> 00:00:58,370
colleagues pretty consistently that's

00:00:56,489 --> 00:01:00,750
what I've been doing for several months

00:00:58,370 --> 00:01:03,120
and will probably continue to do for a

00:01:00,750 --> 00:01:04,830
while the other the other missing piece

00:01:03,120 --> 00:01:07,470
for that I think a lot of people will

00:01:04,830 --> 00:01:09,510
need before they can actually get into

00:01:07,470 --> 00:01:11,850
using clang on Windows for their

00:01:09,510 --> 00:01:14,130
day-to-day you know developer experience

00:01:11,850 --> 00:01:17,340
on Windows is debug information this is

00:01:14,130 --> 00:01:20,070
a very important part of the MVC visual

00:01:17,340 --> 00:01:22,560
studio ecosystem that you know we have a

00:01:20,070 --> 00:01:26,700
long way to go with and know where we're

00:01:22,560 --> 00:01:28,920
going there yeah but what does work as

00:01:26,700 --> 00:01:30,780
we spent a lot of time working on MVC

00:01:28,920 --> 00:01:32,460
compatibility and getting ASA and

00:01:30,780 --> 00:01:36,630
working there and so I was gonna talk

00:01:32,460 --> 00:01:38,159
about that first so this is mostly just

00:01:36,630 --> 00:01:39,930
a laundry list of the stuff that we've

00:01:38,159 --> 00:01:42,210
already worked out right like we've

00:01:39,930 --> 00:01:44,280
already spent a very long time making

00:01:42,210 --> 00:01:47,340
sure that clang is you know 100%

00:01:44,280 --> 00:01:49,200
compatible with the way that visual C++

00:01:47,340 --> 00:01:50,659
does like record layout figures out how

00:01:49,200 --> 00:01:52,950
it's going to lay out its V tables

00:01:50,659 --> 00:01:54,420
exactly what order those you know funny

00:01:52,950 --> 00:01:57,740
overloaded virtual methods are going to

00:01:54,420 --> 00:02:02,880
be in you know turns out it's backwards

00:01:57,740 --> 00:02:06,810
that's fine whatever I don't care but it

00:02:02,880 --> 00:02:10,280
works now you know all this good stuff

00:02:06,810 --> 00:02:12,380
and if you know this

00:02:10,280 --> 00:02:13,880
turned out to be the easy part which is

00:02:12,380 --> 00:02:16,970
kind of surprising right like we got

00:02:13,880 --> 00:02:18,290
good at this you know and so if you if

00:02:16,970 --> 00:02:20,630
you encounter more bugs with

00:02:18,290 --> 00:02:21,710
compatibility like you can if you can

00:02:20,630 --> 00:02:23,810
file bugs about it with you know

00:02:21,710 --> 00:02:26,120
reproducers we were happy to look at it

00:02:23,810 --> 00:02:30,920
and I'm you know pretty confident that

00:02:26,120 --> 00:02:32,180
we can get through it pretty quickly the

00:02:30,920 --> 00:02:34,400
the thing that was not so easy was

00:02:32,180 --> 00:02:39,140
exception handling so what's up with

00:02:34,400 --> 00:02:41,980
that basically you know seh was designed

00:02:39,140 --> 00:02:47,300
probably that 30 years ago or something

00:02:41,980 --> 00:02:48,590
and it's you know what it seems like it

00:02:47,300 --> 00:02:50,000
was designed in a vacuum I don't know I

00:02:48,590 --> 00:02:53,650
don't know who the people were you know

00:02:50,000 --> 00:02:56,000
I don't I don't ask I don't need to but

00:02:53,650 --> 00:02:57,920
it's not you know it wasn't designed by

00:02:56,000 --> 00:02:59,960
multiple compiler vendors the same way

00:02:57,920 --> 00:03:03,890
that the exception handling mechanism

00:02:59,960 --> 00:03:07,430
that we use on system 5 platforms was

00:03:03,890 --> 00:03:11,030
you know it's yeah so it's it was you

00:03:07,430 --> 00:03:16,040
know much more of a challenge but you

00:03:11,030 --> 00:03:19,430
know we we understand everything now we

00:03:16,040 --> 00:03:22,160
tried one implementation approach and we

00:03:19,430 --> 00:03:24,380
basically got pretty far with it and we

00:03:22,160 --> 00:03:25,550
thought we were done with it and then we

00:03:24,380 --> 00:03:28,130
realized that there were a lot of

00:03:25,550 --> 00:03:30,230
problems around wreath Rowing exceptions

00:03:28,130 --> 00:03:32,390
and c++ the tables that we were

00:03:30,230 --> 00:03:36,410
generating were just you know not not

00:03:32,390 --> 00:03:38,150
right along with the code but we've you

00:03:36,410 --> 00:03:42,440
know gone back and come up with a new

00:03:38,150 --> 00:03:44,540
design and you know both c++ exceptions

00:03:42,440 --> 00:03:46,900
and structured exception handling which

00:03:44,540 --> 00:03:48,920
is you get to via double underscore try

00:03:46,900 --> 00:03:51,050
should be working you know sometime in

00:03:48,920 --> 00:03:53,810
the next few months I guess December's

00:03:51,050 --> 00:03:54,920
probably reasonable one thing I wanted

00:03:53,810 --> 00:03:56,330
to point out that's sort of out of out

00:03:54,920 --> 00:03:57,800
of scope for the work that you know

00:03:56,330 --> 00:04:01,580
we're doing towards making exceptions

00:03:57,800 --> 00:04:03,580
work is we're not really we're not

00:04:01,580 --> 00:04:06,350
tackling a problem with modeling

00:04:03,580 --> 00:04:09,830
non-call or asynchronous exceptions in

00:04:06,350 --> 00:04:11,570
LLVM so you know it you can catch these

00:04:09,830 --> 00:04:13,459
kinds of exceptions if you do it through

00:04:11,570 --> 00:04:15,290
a you know level of function call

00:04:13,459 --> 00:04:17,000
indirection you know just put your

00:04:15,290 --> 00:04:19,789
function that's doing the funky division

00:04:17,000 --> 00:04:22,560
into another separate function without

00:04:19,789 --> 00:04:25,590
side of the try scope and we can

00:04:22,560 --> 00:04:28,500
 but we weren't we're not really

00:04:25,590 --> 00:04:33,180
digging into this representational

00:04:28,500 --> 00:04:35,400
problem right now all right so the other

00:04:33,180 --> 00:04:38,790
thing that's sort of to do is basically

00:04:35,400 --> 00:04:40,980
debug info and it's pretty important to

00:04:38,790 --> 00:04:44,070
interoperate with the existing tools on

00:04:40,980 --> 00:04:46,950
the on the platform and there's sort of

00:04:44,070 --> 00:04:48,720
two ways we can go forward from here

00:04:46,950 --> 00:04:50,910
one is to pursue dwarf which is the

00:04:48,720 --> 00:04:53,180
standard format that we use on other

00:04:50,910 --> 00:04:57,120
platforms you know both Mac and Linux

00:04:53,180 --> 00:04:58,979
pretty much yeah it's what we coordinate

00:04:57,120 --> 00:05:01,490
with Apple on that kind of thing there's

00:04:58,979 --> 00:05:04,380
a Standards Committee and all that and

00:05:01,490 --> 00:05:06,750
or we could pursue pdbs and code view

00:05:04,380 --> 00:05:09,690
and this is this is what tools like

00:05:06,750 --> 00:05:11,639
events tracing for Windows expect to

00:05:09,690 --> 00:05:15,180
consume to be able to generate stack

00:05:11,639 --> 00:05:18,090
traces for your program and so for now

00:05:15,180 --> 00:05:22,410
we're kind of pursuing both in parallel

00:05:18,090 --> 00:05:23,580
and seeing seeing what works well yeah

00:05:22,410 --> 00:05:26,490
one of the interesting things here is

00:05:23,580 --> 00:05:31,800
that as Visual Studio starts to gain

00:05:26,490 --> 00:05:33,150
support for Android they also need to be

00:05:31,800 --> 00:05:34,530
able to imbibe Dwarfs so there's some

00:05:33,150 --> 00:05:37,050
hope that maybe that functionality could

00:05:34,530 --> 00:05:40,860
be used to debug Windows applications

00:05:37,050 --> 00:05:41,850
built that clang on Windows but anyway

00:05:40,860 --> 00:05:43,289
this is this is more of a long-term

00:05:41,850 --> 00:05:46,289
effort you know I can't promise this for

00:05:43,289 --> 00:05:48,330
something like December I just expect it

00:05:46,289 --> 00:05:49,830
to get better over time so you know

00:05:48,330 --> 00:05:55,410
should should be getting good over the

00:05:49,830 --> 00:05:57,570
next year though I'm out of five minute

00:05:55,410 --> 00:05:59,130
talks alone I'm done I was gonna I was

00:05:57,570 --> 00:06:00,840
gonna plug address sanitizer that's the

00:05:59,130 --> 00:06:02,490
that's basically the tool that you know

00:06:00,840 --> 00:06:03,810
we've spent most of our effort making

00:06:02,490 --> 00:06:05,340
sure that it works well on Windows so

00:06:03,810 --> 00:06:07,169
you know it's probably gonna have the

00:06:05,340 --> 00:06:10,169
best out of the box experience of all

00:06:07,169 --> 00:06:12,510
the things that we do we use it with

00:06:10,169 --> 00:06:14,160
chrome and we use it with Firefox so

00:06:12,510 --> 00:06:16,320
should give it a try

00:06:14,160 --> 00:06:17,789
like I said exception family is gonna be

00:06:16,320 --> 00:06:19,530
done soon and debug info should get

00:06:17,789 --> 00:06:23,030
better so you should go to elllo.org

00:06:19,530 --> 00:06:23,030

YouTube URL: https://www.youtube.com/watch?v=dr0eY9c23i8


