Title: CppCon 2015: Jens Weller "A different way to use boost serialization"
Publication date: 2015-10-21
Playlist: CppCon 2015 Lightning Talks
Description: 
	http://www.Cppcon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,000 --> 00:00:06,540
so this is like a short application

00:00:04,680 --> 00:00:10,920
overview I have a tree model and that

00:00:06,540 --> 00:00:15,480
tree model is a part of my cute layer

00:00:10,920 --> 00:00:17,760
and um inside this tree model as a tree

00:00:15,480 --> 00:00:21,140
and the tree notes are actually boost

00:00:17,760 --> 00:00:23,609
variants and this means that I have

00:00:21,140 --> 00:00:27,630
inside this boost variant kind of like a

00:00:23,609 --> 00:00:29,400
type list of concrete types so and i

00:00:27,630 --> 00:00:32,070
want to see realize these concrete types

00:00:29,400 --> 00:00:34,260
that this is my data model and when i do

00:00:32,070 --> 00:00:36,750
that then the following head for saie

00:00:34,260 --> 00:00:39,120
happens that each change to those

00:00:36,750 --> 00:00:42,649
variant types or to those data types

00:00:39,120 --> 00:00:46,050
which are like you know to be serialized

00:00:42,649 --> 00:00:47,610
any change actually will force me to

00:00:46,050 --> 00:00:51,090
recompile my application which kind of

00:00:47,610 --> 00:00:54,420
sucks as I also use things like boost

00:00:51,090 --> 00:00:56,370
signals to which links like forever so I

00:00:54,420 --> 00:00:58,770
want to avoid that that I have to

00:00:56,370 --> 00:01:03,589
recompile the the UI code when I

00:00:58,770 --> 00:01:08,159
actually write a civilization code and

00:01:03,589 --> 00:01:10,710
so as I said it's booster ization is

00:01:08,159 --> 00:01:12,680
something I would like to try and so

00:01:10,710 --> 00:01:15,420
there to offer sure ways it's documented

00:01:12,680 --> 00:01:17,759
the one way is an intrusive way where

00:01:15,420 --> 00:01:20,490
you make boost access the seer ization

00:01:17,759 --> 00:01:23,159
access class your front and then you

00:01:20,490 --> 00:01:30,829
have a template you have a normal method

00:01:23,159 --> 00:01:33,780
inside your class and then this X s the

00:01:30,829 --> 00:01:36,990
means to serialize things but that's

00:01:33,780 --> 00:01:39,630
intrusive so I have to put that in the

00:01:36,990 --> 00:01:41,040
header and it means each time I want to

00:01:39,630 --> 00:01:44,189
add or change something in this unit

00:01:41,040 --> 00:01:49,350
code of my class I I basically get a

00:01:44,189 --> 00:01:51,780
full recompile a surprise for it so the

00:01:49,350 --> 00:01:55,229
non intrusive way is also that you have

00:01:51,780 --> 00:01:59,340
like utilized as utilization a template

00:01:55,229 --> 00:02:01,500
function and then you just have to make

00:01:59,340 --> 00:02:03,420
your members public and so that's also

00:02:01,500 --> 00:02:07,290
one thing which I don't like us public

00:02:03,420 --> 00:02:09,810
members that's not an option for me so I

00:02:07,290 --> 00:02:11,610
was thinking about what maybe maybe I

00:02:09,810 --> 00:02:13,780
could find a way just to serve as my

00:02:11,610 --> 00:02:16,510
members so I thought well

00:02:13,780 --> 00:02:19,420
if i call this all members i want to

00:02:16,510 --> 00:02:21,370
sear last tie i get a 2 / which is

00:02:19,420 --> 00:02:24,040
actually you know containing all my

00:02:21,370 --> 00:02:27,790
members as references and if the FX

00:02:24,040 --> 00:02:30,190
posted somehow through a method then i

00:02:27,790 --> 00:02:32,140
have something which is better than

00:02:30,190 --> 00:02:36,040
public members it's something similar

00:02:32,140 --> 00:02:38,319
and yeah if if i do that i shouldn't

00:02:36,040 --> 00:02:42,370
forget the the reference and the actual

00:02:38,319 --> 00:02:43,810
in the return type and then I only need

00:02:42,370 --> 00:02:45,160
something to serialize the trooper which

00:02:43,810 --> 00:02:48,220
is actually pretty easy with boost

00:02:45,160 --> 00:02:51,220
fusion and boost fusion for each and so

00:02:48,220 --> 00:02:56,920
I just need a additional custom class to

00:02:51,220 --> 00:03:00,670
steal as each to provide on and yeah I i

00:02:56,920 --> 00:03:03,850
quickly learned that writing this tuple

00:03:00,670 --> 00:03:07,030
access method by hand or stupid so I

00:03:03,850 --> 00:03:10,870
made a little magic this boost

00:03:07,030 --> 00:03:13,110
preprocessor which then is simply in

00:03:10,870 --> 00:03:17,970
each class kind of like this defined and

00:03:13,110 --> 00:03:22,650
of course you know then the extra

00:03:17,970 --> 00:03:24,910
civilization code I have to define the

00:03:22,650 --> 00:03:28,390
interface for sterilizing things which

00:03:24,910 --> 00:03:31,510
is C just calling boost for each this

00:03:28,390 --> 00:03:34,959
fusion helper and the archives and the

00:03:31,510 --> 00:03:36,700
fusion hyper basically only just glue

00:03:34,959 --> 00:03:40,900
store archive and the type together and

00:03:36,700 --> 00:03:45,390
I am fully serialized now on this works

00:03:40,900 --> 00:03:48,010
and works actually really good but arm

00:03:45,390 --> 00:03:50,260
it has adventures at all my civilization

00:03:48,010 --> 00:03:51,579
code is in one place the classes don't

00:03:50,260 --> 00:03:52,870
know anything about civilization and

00:03:51,579 --> 00:03:57,190
this interface also could be used for

00:03:52,870 --> 00:03:59,829
other things the disadvantage it feels a

00:03:57,190 --> 00:04:03,840
little bit dirty you know what the

00:03:59,829 --> 00:04:06,850
and probably what and you know to play

00:04:03,840 --> 00:04:08,709
the the performance of this probably is

00:04:06,850 --> 00:04:11,530
not where we should be the sleepers

00:04:08,709 --> 00:04:15,430
class so maybe we can fix it so let's

00:04:11,530 --> 00:04:18,039
let's fix that and I I had some feedback

00:04:15,430 --> 00:04:20,320
from reddit and the feedback was well

00:04:18,039 --> 00:04:22,210
you also could make the freezer ization

00:04:20,320 --> 00:04:25,960
function a friend and then you could

00:04:22,210 --> 00:04:27,730
access the members there locally but

00:04:25,960 --> 00:04:30,790
usually you you

00:04:27,730 --> 00:04:34,410
fine your friend functions also with

00:04:30,790 --> 00:04:37,210
your classes then again I would be

00:04:34,410 --> 00:04:38,470
intrusive and would have to you know go

00:04:37,210 --> 00:04:41,200
through the whole recumbent

00:04:38,470 --> 00:04:43,540
recompilation and I would like to avoid

00:04:41,200 --> 00:04:45,940
that and as it turns out this is

00:04:43,540 --> 00:04:49,750
possible this is a booster ization coat

00:04:45,940 --> 00:04:52,780
which is now again and kind of a lot of

00:04:49,750 --> 00:04:55,090
macros I have a civilized industrialized

00:04:52,780 --> 00:04:56,650
implementation which the serialize has

00:04:55,090 --> 00:04:59,770
to be placed in the in the header in the

00:04:56,650 --> 00:05:03,790
actual class and the civilized

00:04:59,770 --> 00:05:05,710
implementation that can go in the CPP

00:05:03,790 --> 00:05:10,330
file whereas the actual civilization

00:05:05,710 --> 00:05:13,630
happens and then armed I'm suddenly

00:05:10,330 --> 00:05:15,790
having a the situation that I can

00:05:13,630 --> 00:05:18,670
sterilize my classes without having to

00:05:15,790 --> 00:05:21,190
recompile everything and yeah i also

00:05:18,670 --> 00:05:22,600
have a macro 4dr types because in

00:05:21,190 --> 00:05:25,240
booster ization you need to cause

00:05:22,600 --> 00:05:28,230
something for the rough types and that's

00:05:25,240 --> 00:05:28,230

YouTube URL: https://www.youtube.com/watch?v=ww1Wy07Uy_s


