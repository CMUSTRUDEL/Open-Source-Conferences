Title: CppCon 2015: Dmitri Nesteruk "CLion Tips & Tricks"
Publication date: 2015-10-21
Playlist: CppCon 2015 Lightning Talks
Description: 
	http://www.Cppcon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:04,799
hi everyone my name is Dmitry I with

00:00:03,149 --> 00:00:07,379
jetbrains some of you might have heard

00:00:04,799 --> 00:00:09,330
about us we make developer tools and

00:00:07,379 --> 00:00:12,380
I've been doing it for like 15 years or

00:00:09,330 --> 00:00:15,360
something so we recently came onto the

00:00:12,380 --> 00:00:17,130
c++ scene with a couple of tools and one

00:00:15,360 --> 00:00:19,369
of those is sea lion that's what you're

00:00:17,130 --> 00:00:24,510
looking at right now this is not Katie

00:00:19,369 --> 00:00:27,140
it's a cross-platform C++ ID for well

00:00:24,510 --> 00:00:31,470
currently supporting clang and GCC and

00:00:27,140 --> 00:00:33,840
using C mate as the the build system so

00:00:31,470 --> 00:00:35,760
I just wanted to show what it's like to

00:00:33,840 --> 00:00:38,579
work work in this kind of tool I I'm

00:00:35,760 --> 00:00:42,090
gonna start by making a just an ordinary

00:00:38,579 --> 00:00:44,370
class so C Line provides us all sorts of

00:00:42,090 --> 00:00:46,440
useful thingies for from manufacturing

00:00:44,370 --> 00:00:49,530
classes so in this case I'll call the

00:00:46,440 --> 00:00:51,870
class person so C line is asking us like

00:00:49,530 --> 00:00:53,460
what type of extensions we want and you

00:00:51,870 --> 00:00:56,360
can make groups of those you can make it

00:00:53,460 --> 00:00:58,980
header only and it also asks you what

00:00:56,360 --> 00:01:01,530
what C make targets you want to add this

00:00:58,980 --> 00:01:04,530
file to so you there are some options

00:01:01,530 --> 00:01:06,270
there once I press ok I get my header

00:01:04,530 --> 00:01:08,400
and the CPP and by the way these

00:01:06,270 --> 00:01:10,890
templates are customizable so if you do

00:01:08,400 --> 00:01:13,619
prefer include guards then you can have

00:01:10,890 --> 00:01:16,770
those as well in addition we have the

00:01:13,619 --> 00:01:18,570
appropriate entries in the C make list

00:01:16,770 --> 00:01:21,000
and we can sort of stop working with

00:01:18,570 --> 00:01:24,570
this class so for example I can add a

00:01:21,000 --> 00:01:27,600
couple of variables a weight and height

00:01:24,570 --> 00:01:29,430
and maybe I want to calculate the body

00:01:27,600 --> 00:01:32,790
mass index based on that so what I can

00:01:29,430 --> 00:01:35,670
do is I can just define a function

00:01:32,790 --> 00:01:37,140
signature here and see line is going to

00:01:35,670 --> 00:01:39,360
offer us options of actually

00:01:37,140 --> 00:01:41,189
implementing this function either in

00:01:39,360 --> 00:01:43,860
place meaning in the header file or you

00:01:41,189 --> 00:01:46,409
can generate it in the CPP file so once

00:01:43,860 --> 00:01:49,430
I do that I jump into the CVP here is my

00:01:46,409 --> 00:01:52,530
actual function and here I can return

00:01:49,430 --> 00:01:55,470
weight divided by let's say hi times

00:01:52,530 --> 00:01:57,810
height like so so this is a bit of a

00:01:55,470 --> 00:01:59,490
problem because I might return type is

00:01:57,810 --> 00:02:00,930
void so sealion could kind of pick that

00:01:59,490 --> 00:02:03,600
up and it can tell us that by the way

00:02:00,930 --> 00:02:05,340
you know do you want your return type to

00:02:03,600 --> 00:02:07,049
change to double and I press return and

00:02:05,340 --> 00:02:09,840
it gets changed here and obviously in

00:02:07,049 --> 00:02:11,879
the header file as well so sea lion else

00:02:09,840 --> 00:02:13,470
it comes with lots of refactoring so for

00:02:11,879 --> 00:02:15,150
example I can take this

00:02:13,470 --> 00:02:17,130
times height in fact we have a shortcut

00:02:15,150 --> 00:02:19,140
for it kind of expanding this election I

00:02:17,130 --> 00:02:21,600
can bring up a refactoring menu and in

00:02:19,140 --> 00:02:23,760
this case I can take it to a separate

00:02:21,600 --> 00:02:25,470
variable so I can extract this product

00:02:23,760 --> 00:02:27,570
into a separate variable kind of a

00:02:25,470 --> 00:02:29,730
couple of options here like I can make

00:02:27,570 --> 00:02:32,670
it auto for example I can declare this

00:02:29,730 --> 00:02:35,930
Const with a couple of key board short

00:02:32,670 --> 00:02:38,580
hand let's just call this height squared

00:02:35,930 --> 00:02:40,440
like so but let's suppose that I want to

00:02:38,580 --> 00:02:42,420
have a general purpose function for

00:02:40,440 --> 00:02:44,400
squaring variables multiplying a

00:02:42,420 --> 00:02:45,930
variable by itself and returning that so

00:02:44,400 --> 00:02:48,390
once again I can extend selection around

00:02:45,930 --> 00:02:50,340
high x height and I can bring up a

00:02:48,390 --> 00:02:52,860
refactoring here to extract an entire

00:02:50,340 --> 00:02:56,910
method so this method I'm gonna call

00:02:52,860 --> 00:02:59,040
this Square and just press the extract

00:02:56,910 --> 00:03:00,959
button what this does is it basically

00:02:59,040 --> 00:03:02,790
adds a new member function called square

00:03:00,959 --> 00:03:04,590
which is a constant you can see here and

00:03:02,790 --> 00:03:07,290
it returns height times height but maybe

00:03:04,590 --> 00:03:09,000
I want height to be a parameter maybe

00:03:07,290 --> 00:03:11,610
this is a general purpose squaring

00:03:09,000 --> 00:03:12,870
function for whatever you feed it so for

00:03:11,610 --> 00:03:15,510
this once again I can bring up the

00:03:12,870 --> 00:03:18,239
refactoring menu and here what I can do

00:03:15,510 --> 00:03:20,640
is I can extract a parameter so I can

00:03:18,239 --> 00:03:22,470
say that you know I have first of all

00:03:20,640 --> 00:03:24,690
see line is asking me what kind of

00:03:22,470 --> 00:03:27,420
expression I want to extract in this

00:03:24,690 --> 00:03:28,830
case it's just height afterwards see

00:03:27,420 --> 00:03:31,769
line is saying well by the way you have

00:03:28,830 --> 00:03:33,390
two of those in your in your function

00:03:31,769 --> 00:03:35,519
bodies that you want to extract just

00:03:33,390 --> 00:03:38,040
just one or both so I'll replace both

00:03:35,519 --> 00:03:40,800
occurrences and now I can give it a new

00:03:38,040 --> 00:03:43,769
name like value for example so I have my

00:03:40,800 --> 00:03:45,870
function for squaring a value and you

00:03:43,769 --> 00:03:47,430
also notice something interesting we

00:03:45,870 --> 00:03:49,230
didn't have any arguments here

00:03:47,430 --> 00:03:51,840
beforehand because it was just returning

00:03:49,230 --> 00:03:53,820
high x high but now we see line has

00:03:51,840 --> 00:03:55,530
effectively inferred that this was the

00:03:53,820 --> 00:03:57,209
value that was being fed into the

00:03:55,530 --> 00:04:00,360
function therefore after the refactoring

00:03:57,209 --> 00:04:02,880
it's actually changed the signature here

00:04:00,360 --> 00:04:05,340
so that it would be called with height

00:04:02,880 --> 00:04:07,560
and an additional thing we can do is we

00:04:05,340 --> 00:04:10,080
can now get this calculation of square

00:04:07,560 --> 00:04:11,970
of height and just get it to replace

00:04:10,080 --> 00:04:14,280
height squared so getting rid of height

00:04:11,970 --> 00:04:17,430
squared altogether once again you bring

00:04:14,280 --> 00:04:20,280
up the refactoring menu and in this case

00:04:17,430 --> 00:04:22,470
you can choose in line so we in line the

00:04:20,280 --> 00:04:24,900
use of height squared press ENTER and

00:04:22,470 --> 00:04:26,290
now we're just using square of height

00:04:24,900 --> 00:04:28,900
and that

00:04:26,290 --> 00:04:32,500
that temporary variable is no longer

00:04:28,900 --> 00:04:34,180
being used so let's jump back into the

00:04:32,500 --> 00:04:36,160
header file by the way we have shortcuts

00:04:34,180 --> 00:04:38,110
for kind of jumping between declarations

00:04:36,160 --> 00:04:39,790
and definitions and here let's suppose

00:04:38,110 --> 00:04:41,860
that I I'm not happy with the name

00:04:39,790 --> 00:04:43,390
person I want a different name for this

00:04:41,860 --> 00:04:46,360
class so I can bring up once again

00:04:43,390 --> 00:04:48,310
another refactoring code rename and here

00:04:46,360 --> 00:04:50,380
I can just type let's say human for

00:04:48,310 --> 00:04:52,380
example so this actually does a lot of

00:04:50,380 --> 00:04:55,240
changes because in addition to

00:04:52,380 --> 00:04:57,640
performing the change of the symbol so

00:04:55,240 --> 00:04:59,440
having human here and also having human

00:04:57,640 --> 00:05:01,390
here in addition to that the files got

00:04:59,440 --> 00:05:05,500
renamed you'll see human dot H here and

00:05:01,390 --> 00:05:07,660
human dot CPP here as well and of course

00:05:05,500 --> 00:05:10,450
in cmakelists we also have the

00:05:07,660 --> 00:05:12,190
appropriate renaming is done as well so

00:05:10,450 --> 00:05:13,930
I have my human clouds but some of the

00:05:12,190 --> 00:05:15,850
things are grayed out like why is it

00:05:13,930 --> 00:05:18,190
gray here why is the code gray here well

00:05:15,850 --> 00:05:21,250
this is because see line goes off and it

00:05:18,190 --> 00:05:22,990
actually looks at whether the things you

00:05:21,250 --> 00:05:24,430
wrote are being used somewhere and if

00:05:22,990 --> 00:05:26,830
they are no that's going to tell you

00:05:24,430 --> 00:05:28,840
about it so let's see if we can actually

00:05:26,830 --> 00:05:32,830
start using this human class somewhere

00:05:28,840 --> 00:05:35,560
so I'm in here say I type human okay so

00:05:32,830 --> 00:05:38,200
what happens is that see line obviously

00:05:35,560 --> 00:05:39,790
it figures out that there is no such

00:05:38,200 --> 00:05:41,980
type here yet but it's saying well do

00:05:39,790 --> 00:05:43,710
you want to include human dot age so I

00:05:41,980 --> 00:05:46,660
press alt enter and I now have my

00:05:43,710 --> 00:05:48,490
include statement up above and then as I

00:05:46,660 --> 00:05:50,110
start typing the variable name it's kind

00:05:48,490 --> 00:05:53,320
of suggesting that maybe I want human

00:05:50,110 --> 00:05:56,590
with a lowercase H so I can complete

00:05:53,320 --> 00:05:58,900
this and then I can start using via I

00:05:56,590 --> 00:06:02,560
can start using the class so for example

00:05:58,900 --> 00:06:04,720
I can get get the BMI we got code

00:06:02,560 --> 00:06:06,460
completion throughout the whole IDE so

00:06:04,720 --> 00:06:09,550
just press return for something like

00:06:06,460 --> 00:06:11,710
this and complete it but the problem is

00:06:09,550 --> 00:06:13,630
that we haven't really initialized human

00:06:11,710 --> 00:06:15,490
with any kind of value and let's

00:06:13,630 --> 00:06:18,220
actually do it in a more sophisticated

00:06:15,490 --> 00:06:20,410
way so I'm gonna go into human now let's

00:06:18,220 --> 00:06:22,540
suppose that I want another class up the

00:06:20,410 --> 00:06:24,640
hierarchy to make an entire sort of

00:06:22,540 --> 00:06:26,410
inheritance hierarchy so what I can do

00:06:24,640 --> 00:06:28,990
is I can go into the refactoring menu

00:06:26,410 --> 00:06:32,260
once again and this time I can try and

00:06:28,990 --> 00:06:33,820
extract a superclass so the idea here is

00:06:32,260 --> 00:06:36,340
that you can make a superclass and you

00:06:33,820 --> 00:06:37,870
can actually take some of the elements

00:06:36,340 --> 00:06:39,310
of the current class and sort of move

00:06:37,870 --> 00:06:41,890
them off the hierarchy so

00:06:39,310 --> 00:06:46,540
case I can go with weight and height and

00:06:41,890 --> 00:06:48,310
just extract them so what what oh yes of

00:06:46,540 --> 00:06:52,810
course let's let's give this a name like

00:06:48,310 --> 00:06:54,700
mammal for example all right so little

00:06:52,810 --> 00:06:56,380
and we have a bit of a problem here you

00:06:54,700 --> 00:06:58,930
see a sea lion is smart enough to figure

00:06:56,380 --> 00:07:01,150
out that a private variable that was

00:06:58,930 --> 00:07:03,160
being used can no longer be private

00:07:01,150 --> 00:07:05,290
because it's now you now need to use it

00:07:03,160 --> 00:07:06,760
in the inheriting class in that BMI

00:07:05,290 --> 00:07:08,110
method so it's saying do you want to

00:07:06,760 --> 00:07:10,150
escalate visibility do you want to

00:07:08,110 --> 00:07:12,220
change these variables from private

00:07:10,150 --> 00:07:13,900
visibility to protect it and of course I

00:07:12,220 --> 00:07:16,300
say yes because if I don't I'm gonna get

00:07:13,900 --> 00:07:18,040
some red code it's not going to work so

00:07:16,300 --> 00:07:21,280
now I have a base class called mammal

00:07:18,040 --> 00:07:23,200
and I have an inheriting class called

00:07:21,280 --> 00:07:25,270
human now you'll see that some of the

00:07:23,200 --> 00:07:27,310
files here are grayed out so mammal dot

00:07:25,270 --> 00:07:29,860
CPP and mammal - we just created them

00:07:27,310 --> 00:07:32,080
but they're not part of C make just yet

00:07:29,860 --> 00:07:33,760
so let's add them so I have my source

00:07:32,080 --> 00:07:36,040
files variable here and you'll notice

00:07:33,760 --> 00:07:37,660
that as I type things so I'm typing

00:07:36,040 --> 00:07:39,610
mammal dot CPP I'm getting code

00:07:37,660 --> 00:07:41,080
completion here and in addition to code

00:07:39,610 --> 00:07:44,650
completion you can also see that it's

00:07:41,080 --> 00:07:46,930
kind of highlighted a little bit so sea

00:07:44,650 --> 00:07:48,910
lion actually treats the sea make files

00:07:46,930 --> 00:07:50,440
very well so you get things like code

00:07:48,910 --> 00:07:53,140
completion so for example I can just go

00:07:50,440 --> 00:07:55,270
to mammal dot H with a single shortcut

00:07:53,140 --> 00:07:56,980
and Here I am so what can we do in

00:07:55,270 --> 00:07:58,900
mammal because we want to initialize

00:07:56,980 --> 00:08:00,700
this class somehow well one of the

00:07:58,900 --> 00:08:02,710
things we can do is we can actually go

00:08:00,700 --> 00:08:04,450
off and generate a constructor for

00:08:02,710 --> 00:08:05,770
examples so I can go into the generate

00:08:04,450 --> 00:08:07,480
menu and you'll see that we have a

00:08:05,770 --> 00:08:09,070
couple of things for the kind of stuff

00:08:07,480 --> 00:08:10,630
that you might want to generate like

00:08:09,070 --> 00:08:13,150
constructors destructors getters and

00:08:10,630 --> 00:08:14,860
setters and lots of other stuff so I

00:08:13,150 --> 00:08:17,050
want the constructor here it's asking me

00:08:14,860 --> 00:08:19,900
what fields I want to initialize I can

00:08:17,050 --> 00:08:22,570
just select everything press ok and here

00:08:19,900 --> 00:08:26,260
we go I have my constructor of course I

00:08:22,570 --> 00:08:28,630
now need a similar constructor in human

00:08:26,260 --> 00:08:30,970
so let's let's go into human you'll

00:08:28,630 --> 00:08:32,740
notice that because C Line does kind of

00:08:30,970 --> 00:08:34,270
continuous code analysis it's saying

00:08:32,740 --> 00:08:35,380
that well by the way your base class

00:08:34,270 --> 00:08:37,210
doesn't have a default constructor

00:08:35,380 --> 00:08:39,460
anymore so do you want to do something

00:08:37,210 --> 00:08:41,410
about it and indeed I do so I can press

00:08:39,460 --> 00:08:43,540
authentic here and one of the options is

00:08:41,410 --> 00:08:45,040
well there are two options here I can

00:08:43,540 --> 00:08:47,860
either make a default constructor in

00:08:45,040 --> 00:08:49,960
mammal or I can generate a matching

00:08:47,860 --> 00:08:52,370
constructor in human so I press return

00:08:49,960 --> 00:08:54,260
and here it is I get a construct

00:08:52,370 --> 00:08:56,480
which just calls the base class

00:08:54,260 --> 00:08:58,730
constructor so now that we know that

00:08:56,480 --> 00:09:01,400
we've got this we can finally navigate

00:08:58,730 --> 00:09:03,470
into main dot CPP and we have another

00:09:01,400 --> 00:09:05,750
issue here another code inspection

00:09:03,470 --> 00:09:08,000
because sealion is saying well there is

00:09:05,750 --> 00:09:11,180
no such constructor you basically have

00:09:08,000 --> 00:09:14,330
too few arguments so this is where we

00:09:11,180 --> 00:09:18,529
can actually provide the height and the

00:09:14,330 --> 00:09:20,510
width like this and that's it then we

00:09:18,529 --> 00:09:23,600
can now sort of start using this code

00:09:20,510 --> 00:09:26,779
I'll actually run this and get our value

00:09:23,600 --> 00:09:29,270
twenty four point five all right so in

00:09:26,779 --> 00:09:31,460
addition to being able to do all these

00:09:29,270 --> 00:09:33,500
wonderful refactorings also provide tons

00:09:31,460 --> 00:09:35,089
of stuff like navigation and different

00:09:33,500 --> 00:09:37,820
visualizations of your code so let's

00:09:35,089 --> 00:09:40,040
take a look at some of them now in order

00:09:37,820 --> 00:09:42,110
to make this a bit more interesting I'm

00:09:40,040 --> 00:09:43,700
going to go into mammal and by the way

00:09:42,110 --> 00:09:45,589
notice we have different kinds of

00:09:43,700 --> 00:09:48,170
navigation options so you can find

00:09:45,589 --> 00:09:50,570
something by class name or for example

00:09:48,170 --> 00:09:52,580
you can find something by filename and

00:09:50,570 --> 00:09:55,490
we also support this camel humps ideas

00:09:52,580 --> 00:09:57,740
so if I type CML sea lion basically what

00:09:55,490 --> 00:09:59,870
it does is it goes off into my code base

00:09:57,740 --> 00:10:03,860
and it looks at all the files which have

00:09:59,870 --> 00:10:06,050
the capital C M and L so it finds C make

00:10:03,860 --> 00:10:09,500
list this way very useful and yes we can

00:10:06,050 --> 00:10:11,930
also search for also search for symbols

00:10:09,500 --> 00:10:13,730
as well so if I want like height for

00:10:11,930 --> 00:10:16,010
example I can just add a few letters and

00:10:13,730 --> 00:10:18,529
if I press return I get to the

00:10:16,010 --> 00:10:20,420
appropriate location okay so I want

00:10:18,529 --> 00:10:23,150
another base class so in addition to

00:10:20,420 --> 00:10:26,120
mammal I'll have another superclass here

00:10:23,150 --> 00:10:28,010
let's call it animal I just extract it

00:10:26,120 --> 00:10:29,930
like this I'm not gonna put anything in

00:10:28,010 --> 00:10:32,029
it because I just want to demonstrate

00:10:29,930 --> 00:10:34,220
something else so once again one of the

00:10:32,029 --> 00:10:37,190
things we have to do is we have to get

00:10:34,220 --> 00:10:40,040
back into seem Eclipse and add this new

00:10:37,190 --> 00:10:43,040
file so that would be animal dot CPP and

00:10:40,040 --> 00:10:44,690
animal dot H all right so now that we

00:10:43,040 --> 00:10:46,459
have this one of the features that

00:10:44,690 --> 00:10:49,820
sealion offers is an ability to

00:10:46,459 --> 00:10:51,740
visualize inheritance hierarchies so

00:10:49,820 --> 00:10:53,810
essentially we have a separate window

00:10:51,740 --> 00:10:56,630
which does a kind of tree like rendering

00:10:53,810 --> 00:10:58,580
of who inherits from who so in this case

00:10:56,630 --> 00:11:00,290
I have a class called animal and I can

00:10:58,580 --> 00:11:02,120
see that it has one descent and called

00:11:00,290 --> 00:11:03,829
mammal and this has a descendant called

00:11:02,120 --> 00:11:05,350
human and I can obviously double click

00:11:03,829 --> 00:11:09,940
on any of them to

00:11:05,350 --> 00:11:12,250
she find out what who what the class

00:11:09,940 --> 00:11:13,630
looks like and before you ask yes we do

00:11:12,250 --> 00:11:16,120
support you know multiple inheritance

00:11:13,630 --> 00:11:18,160
and I meant inheritance and you know

00:11:16,120 --> 00:11:20,230
virtue and roots and all this all this

00:11:18,160 --> 00:11:22,300
other crazy stuff so the alternative is

00:11:20,230 --> 00:11:24,910
like for for human class you can also

00:11:22,300 --> 00:11:26,590
open up this this menu but it's a the

00:11:24,910 --> 00:11:28,630
human class doesn't have any subtypes

00:11:26,590 --> 00:11:30,310
what you can do is you can sort of

00:11:28,630 --> 00:11:32,260
invert the tree and instead of looking

00:11:30,310 --> 00:11:34,660
at the descendants you can look at the

00:11:32,260 --> 00:11:36,760
parents so in this case you have a view

00:11:34,660 --> 00:11:39,250
of who's the parent of human it's mammal

00:11:36,760 --> 00:11:41,380
and this has a parent called animals in

00:11:39,250 --> 00:11:43,570
addition to this kind of hierarchy we

00:11:41,380 --> 00:11:46,690
have yet another hierarchy view let's go

00:11:43,570 --> 00:11:49,270
into main dot CPP another hierarchy view

00:11:46,690 --> 00:11:51,520
shows you what you are including what

00:11:49,270 --> 00:11:53,290
kind of headers are you including and

00:11:51,520 --> 00:11:55,810
what do they actually contain so here I

00:11:53,290 --> 00:11:58,180
can see that main dot CPP includes human

00:11:55,810 --> 00:12:00,280
dot H and iostream and string and I can

00:11:58,180 --> 00:12:02,980
take iostream for example and I can sort

00:12:00,280 --> 00:12:05,950
of navigate and expand and expand and so

00:12:02,980 --> 00:12:08,440
on by the way another thing that we do

00:12:05,950 --> 00:12:11,170
to help you visualize your code is the

00:12:08,440 --> 00:12:13,630
file structure pane so this this little

00:12:11,170 --> 00:12:17,080
pane on the Left basically shows you a

00:12:13,630 --> 00:12:19,390
kind of a tree based view of your types

00:12:17,080 --> 00:12:21,190
as well as their members and you can

00:12:19,390 --> 00:12:23,110
also sort of select elements and notice

00:12:21,190 --> 00:12:26,290
that when you do the focus actually

00:12:23,110 --> 00:12:28,870
switches from one element to another so

00:12:26,290 --> 00:12:31,120
really convenient stuff and we can

00:12:28,870 --> 00:12:33,010
actually I think we can select some one

00:12:31,120 --> 00:12:35,500
of these yep

00:12:33,010 --> 00:12:37,240
so as I select something in the

00:12:35,500 --> 00:12:39,910
hierarchy that I'm exploring on the Left

00:12:37,240 --> 00:12:41,740
I can see that it has some defines and

00:12:39,910 --> 00:12:44,590
some members there as well and of course

00:12:41,740 --> 00:12:47,590
in these cases if I double click any of

00:12:44,590 --> 00:12:50,830
them I just open the appropriate file so

00:12:47,590 --> 00:12:52,870
this has been a rather small

00:12:50,830 --> 00:12:56,140
demonstration of CLI and essentially you

00:12:52,870 --> 00:12:58,510
can you can find you can grab a free

00:12:56,140 --> 00:13:00,690
one-month trial at jetpens.com slash c

00:12:58,510 --> 00:13:04,840
line and by the way if some of you are

00:13:00,690 --> 00:13:06,730
users of Visual Studio as opposed to you

00:13:04,840 --> 00:13:08,200
know GCC and all that them that we have

00:13:06,730 --> 00:13:09,400
a different product called we share PC

00:13:08,200 --> 00:13:10,780
plus plus which kind of plugs

00:13:09,400 --> 00:13:12,850
individuals today and it does pretty

00:13:10,780 --> 00:13:17,110
much the kind of things that I've shown

00:13:12,850 --> 00:13:20,250
here today so that's it if anyone has

00:13:17,110 --> 00:13:20,250
any questions feel free to

00:13:35,350 --> 00:13:38,709
at the moment I don't think we do so the

00:13:37,449 --> 00:13:42,389
question was whether we have any

00:13:38,709 --> 00:13:45,250
features for expanding macros or

00:13:42,389 --> 00:13:47,350
template definitions I know that in the

00:13:45,250 --> 00:13:50,050
in the resharper product that we have we

00:13:47,350 --> 00:13:51,459
do have a way of totally outlining the

00:13:50,050 --> 00:13:52,959
macro but my colleague is kind of

00:13:51,459 --> 00:14:24,040
raising the hand here maybe go correct

00:13:52,959 --> 00:14:26,319
me now yeah well I think I think we kind

00:14:24,040 --> 00:14:27,910
of have to more or less in the sense

00:14:26,319 --> 00:14:30,370
that if it's gonna be mainstream then

00:14:27,910 --> 00:14:32,290
then it makes sense for us to do that

00:14:30,370 --> 00:14:55,509
that's more once again a question to the

00:14:32,290 --> 00:14:57,430
developers but but I think that alt so

00:14:55,509 --> 00:15:00,129
yes if you have an existing Simek

00:14:57,430 --> 00:15:03,069
project with C make list you just open

00:15:00,129 --> 00:15:07,680
it and you get pretty much all that I

00:15:03,069 --> 00:15:07,680
shown here question over there

00:15:13,709 --> 00:15:19,510
well I would say that it's it's more or

00:15:17,589 --> 00:15:22,570
less complete in the sense that we do

00:15:19,510 --> 00:15:25,120
have everything that that you might need

00:15:22,570 --> 00:15:30,270
and also you know pop ups for helping

00:15:25,120 --> 00:15:30,270
you import stuff so one final question

00:15:31,050 --> 00:15:37,690
we there is a plugin for C Line which

00:15:34,360 --> 00:15:39,459
specifically supports them alright

00:15:37,690 --> 00:15:44,020
that's it we're out of time thank you

00:15:39,459 --> 00:15:46,600
very much everyone oh one last thing

00:15:44,020 --> 00:15:48,070
we JetBrains we have a stand on the

00:15:46,600 --> 00:15:50,050
fourth floor so if you have more

00:15:48,070 --> 00:15:50,529
questions just come around and I'll help

00:15:50,050 --> 00:15:53,130
you up

00:15:50,529 --> 00:15:53,130

YouTube URL: https://www.youtube.com/watch?v=DoPt_DUtCCk


