Title: CppCon 2015: Atila Neves "Emacs as a C++ IDE"
Publication date: 2015-10-21
Playlist: CppCon 2015 Lightning Talks
Description: 
	http://www.Cppcon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:04,589
so we have four brave volunteers today

00:00:02,460 --> 00:00:05,160
and I'm hoping that all for them will be

00:00:04,589 --> 00:00:12,570
with us soon

00:00:05,160 --> 00:00:15,949
but Attila is here and an X physicist

00:00:12,570 --> 00:00:21,420
okay a recovering physicist mean yeah

00:00:15,949 --> 00:00:23,310
I'm never denied who works for a Cisco

00:00:21,420 --> 00:00:24,900
and has been writing C++ for 16 years

00:00:23,310 --> 00:00:29,939
and he's going to show you how to use

00:00:24,900 --> 00:00:31,650
Emacs as a C++ IDE alright so there's my

00:00:29,939 --> 00:00:33,660
name and my handle on Twitter I also

00:00:31,650 --> 00:00:35,070
have a blog which I ramble about things

00:00:33,660 --> 00:00:36,450
she might be interested in reading that

00:00:35,070 --> 00:00:39,989
or not was a case may be

00:00:36,450 --> 00:00:42,000
okay um so a few years ago I was using

00:00:39,989 --> 00:00:44,280
Emacs and when I got my job at Cisco I

00:00:42,000 --> 00:00:44,700
ended up using Eclipse EDT for about two

00:00:44,280 --> 00:00:46,410
years

00:00:44,700 --> 00:00:47,940
I'm not entirely sure why now I don't

00:00:46,410 --> 00:00:49,289
remember I think it's because I was a

00:00:47,940 --> 00:00:51,870
new kid on the block and everybody else

00:00:49,289 --> 00:00:54,180
was using it I just wanted to say um and

00:00:51,870 --> 00:00:56,850
the experience is a bit you know bitter

00:00:54,180 --> 00:00:58,620
I left a sour taste in my mouth but I

00:00:56,850 --> 00:01:00,600
have to admit there were certain

00:00:58,620 --> 00:01:03,049
features that I enjoyed and that made me

00:01:00,600 --> 00:01:05,220
more productive as a C++ programmer and

00:01:03,049 --> 00:01:07,530
I've listed the ones that premiere

00:01:05,220 --> 00:01:09,960
important in actual descending order of

00:01:07,530 --> 00:01:12,119
importance at the top the most important

00:01:09,960 --> 00:01:13,830
thing for me what I use the most is jump

00:01:12,119 --> 00:01:15,689
to the definition can't live without to

00:01:13,830 --> 00:01:18,630
need to know where a struct is define a

00:01:15,689 --> 00:01:20,369
function a macro whatever got my cursor

00:01:18,630 --> 00:01:22,799
on top I want to go to it and I want to

00:01:20,369 --> 00:01:24,689
go to it fast auto completion saves a

00:01:22,799 --> 00:01:26,220
lot of time if you don't know the API

00:01:24,689 --> 00:01:28,140
that well you can hit dot and then

00:01:26,220 --> 00:01:30,810
things pop up and you can kind of fumble

00:01:28,140 --> 00:01:32,189
your way around on the fly syntax

00:01:30,810 --> 00:01:33,509
highlighting this means that when you're

00:01:32,189 --> 00:01:35,850
typing your code you don't wait for it

00:01:33,509 --> 00:01:37,380
to compile things are happening in the

00:01:35,850 --> 00:01:38,640
background you get squiggly line it'll

00:01:37,380 --> 00:01:41,820
tell you what you're doing wrong and

00:01:38,640 --> 00:01:42,509
maybe even some static analysis going on

00:01:41,820 --> 00:01:44,579
there

00:01:42,509 --> 00:01:45,990
fine felon project I don't care what

00:01:44,579 --> 00:01:47,520
directory things are that's for the

00:01:45,990 --> 00:01:49,649
computer to know and me to find out I

00:01:47,520 --> 00:01:51,180
just want to tell it here's my name

00:01:49,649 --> 00:01:53,130
here's the name of the fellow one go

00:01:51,180 --> 00:01:54,540
find it don't care

00:01:53,130 --> 00:01:56,159
I get funny looks at work when people

00:01:54,540 --> 00:02:00,210
keep telling me where things are I kind

00:01:56,159 --> 00:02:02,009
of what is it called compiled onkeypress

00:02:00,210 --> 00:02:04,469
not a big deal but important for some

00:02:02,009 --> 00:02:05,880
people and graphical debugger that's

00:02:04,469 --> 00:02:08,759
been in Emacs forever but I heard

00:02:05,880 --> 00:02:10,530
anybody uses it for some reason so I

00:02:08,759 --> 00:02:11,610
wanted to go back to you max but I don't

00:02:10,530 --> 00:02:13,830
know how because I didn't want to give

00:02:11,610 --> 00:02:14,240
up these features and I think for about

00:02:13,830 --> 00:02:16,820
a year

00:02:14,240 --> 00:02:18,260
I was mostly said to myself if I could

00:02:16,820 --> 00:02:21,940
only get this in Emacs I would switch

00:02:18,260 --> 00:02:25,400
but I I was lazy and didn't until I did

00:02:21,940 --> 00:02:27,770
so the whole thing is I'll show you how

00:02:25,400 --> 00:02:29,510
to get all of this in Emacs now why

00:02:27,770 --> 00:02:30,860
would you want to use Emacs well first

00:02:29,510 --> 00:02:33,230
of all it's lightweight it doesn't take

00:02:30,860 --> 00:02:35,480
that much RAM or CPU I once had the

00:02:33,230 --> 00:02:37,820
windows XP VM running Visual Studio and

00:02:35,480 --> 00:02:38,990
that took less Ram that eclipse which is

00:02:37,820 --> 00:02:42,380
ridiculous

00:02:38,990 --> 00:02:44,270
it's incredibly powerful and a lot of

00:02:42,380 --> 00:02:45,860
people don't know how or why and to be

00:02:44,270 --> 00:02:47,510
fair there aren't that many examples of

00:02:45,860 --> 00:02:50,120
the kind of things you can get done with

00:02:47,510 --> 00:02:52,400
it but if you start doing macros are

00:02:50,120 --> 00:02:53,960
compiling within Emacs and then using

00:02:52,400 --> 00:02:55,910
the error messages for the compiler to

00:02:53,960 --> 00:02:57,440
then generate new code this is a kind of

00:02:55,910 --> 00:02:59,030
thing I'm talking about tried in DES in

00:02:57,440 --> 00:03:01,790
Eclipse and let me know how that works

00:02:59,030 --> 00:03:03,410
out for you it doesn't require the mouse

00:03:01,790 --> 00:03:05,060
to be productive you can still use it

00:03:03,410 --> 00:03:06,440
so how's menus you can click on but you

00:03:05,060 --> 00:03:08,900
don't have to when that for me is very

00:03:06,440 --> 00:03:10,640
good because the mouse is slow its

00:03:08,900 --> 00:03:12,560
extensible you can make it do whatever

00:03:10,640 --> 00:03:16,010
you want because it's a programmable

00:03:12,560 --> 00:03:17,600
platform so the abotu changes are comedy

00:03:16,010 --> 00:03:20,150
your habits instead of you having to

00:03:17,600 --> 00:03:22,940
change to accommodate to somebody's idea

00:03:20,150 --> 00:03:24,530
of what ide should do and B there's a

00:03:22,940 --> 00:03:26,870
rich collection of packages which means

00:03:24,530 --> 00:03:28,430
that somebody out there's probably

00:03:26,870 --> 00:03:31,220
written code to do what you want it to

00:03:28,430 --> 00:03:32,930
do and if they haven't you can write

00:03:31,220 --> 00:03:35,990
that code yourself where code is that's

00:03:32,930 --> 00:03:37,010
what we're using the editor for and

00:03:35,990 --> 00:03:38,510
obviously if it's going to make you more

00:03:37,010 --> 00:03:42,320
productive that's a good investment of

00:03:38,510 --> 00:03:43,730
time and because the the extensible

00:03:42,320 --> 00:03:45,590
language is list we can just version

00:03:43,730 --> 00:03:47,900
control your editor configuration which

00:03:45,590 --> 00:03:50,330
I do that means I get it for free

00:03:47,900 --> 00:03:53,000
everywhere I go every computer I use has

00:03:50,330 --> 00:03:54,380
exact same Emacs configuration and also

00:03:53,000 --> 00:03:56,030
you know your power user when you have

00:03:54,380 --> 00:04:00,880
to do git bisect to figure out why you

00:03:56,030 --> 00:04:03,290
screwed up multiple times why not Emacs

00:04:00,880 --> 00:04:05,480
Emacs is for tinker's if you want

00:04:03,290 --> 00:04:07,460
something that just works that not the

00:04:05,480 --> 00:04:09,020
editor for you it's not gonna happen I

00:04:07,460 --> 00:04:11,180
told the co-worker just use eclipse if

00:04:09,020 --> 00:04:12,709
that's what you want you have to tinker

00:04:11,180 --> 00:04:13,940
with it you have to customize it or else

00:04:12,709 --> 00:04:16,640
you're not going to get the benefits

00:04:13,940 --> 00:04:18,260
that they provide to make things worse

00:04:16,640 --> 00:04:20,480
the out the box experience is dreadful

00:04:18,260 --> 00:04:22,760
if you just install your Max and run it

00:04:20,480 --> 00:04:24,950
it basically doesn't do anything or do

00:04:22,760 --> 00:04:26,160
it well nearly everything is optional

00:04:24,950 --> 00:04:27,750
you need to turn it on

00:04:26,160 --> 00:04:29,970
and of course if you're a beginner you

00:04:27,750 --> 00:04:31,440
don't know where to begin if you go look

00:04:29,970 --> 00:04:33,030
at somebody else's config it's going to

00:04:31,440 --> 00:04:34,940
be ginormous and you don't know which

00:04:33,030 --> 00:04:37,170
parts you're going to like or not

00:04:34,940 --> 00:04:38,940
there's too many options there's more

00:04:37,170 --> 00:04:40,830
than one way to do things and more than

00:04:38,940 --> 00:04:42,480
one package may be providing similar

00:04:40,830 --> 00:04:44,970
functionality so that can cause decision

00:04:42,480 --> 00:04:46,530
fatigue you have to go try out all these

00:04:44,970 --> 00:04:50,250
things and figure out which ones you

00:04:46,530 --> 00:04:50,760
like and which ones you don't don't use

00:04:50,250 --> 00:04:52,470
emacs

00:04:50,760 --> 00:04:54,720
if you just like typing five closing

00:04:52,470 --> 00:04:56,790
parenthesis in a row because there will

00:04:54,720 --> 00:04:57,840
be a lot of that an e Lisp and your

00:04:56,790 --> 00:05:00,120
colleagues will probably think you're

00:04:57,840 --> 00:05:05,400
weird might do but I don't think he

00:05:00,120 --> 00:05:07,410
works is the only reason why now there

00:05:05,400 --> 00:05:09,060
are several packages for an ID like

00:05:07,410 --> 00:05:11,130
experience the Emacs some of them have

00:05:09,060 --> 00:05:13,740
been there for a very long time you can

00:05:11,130 --> 00:05:15,330
get tagging with those three C scopes

00:05:13,740 --> 00:05:17,700
probably the best one out of those and

00:05:15,330 --> 00:05:19,140
it works by just tagging where things

00:05:17,700 --> 00:05:20,760
are in source code and then you can jump

00:05:19,140 --> 00:05:22,470
to them the problem is they don't work

00:05:20,760 --> 00:05:24,360
that well and for any project that

00:05:22,470 --> 00:05:25,830
you're likely to be paid to work on your

00:05:24,360 --> 00:05:27,480
projects too big for these things to

00:05:25,830 --> 00:05:28,680
work so you're going to get a lot of

00:05:27,480 --> 00:05:32,040
false positives you're going to jump to

00:05:28,680 --> 00:05:34,320
wrong parts of the code it can be

00:05:32,040 --> 00:05:35,790
annoying and I've tried all three for

00:05:34,320 --> 00:05:36,840
syntax checking needs to be the single

00:05:35,790 --> 00:05:38,070
fly make there's a new one called

00:05:36,840 --> 00:05:40,380
flightcheck that i recommend

00:05:38,070 --> 00:05:41,790
wholeheartedly and it will give you the

00:05:40,380 --> 00:05:43,200
squiggly lines we need typing and it

00:05:41,790 --> 00:05:45,540
works with several several different

00:05:43,200 --> 00:05:47,610
languages not just seen C++ with Python

00:05:45,540 --> 00:05:49,980
Perl you name it people keep adding

00:05:47,610 --> 00:05:52,440
things to that all the time

00:05:49,980 --> 00:05:54,630
Emacs actually ships now since I think

00:05:52,440 --> 00:05:56,460
version 23 but not sure a package called

00:05:54,630 --> 00:05:59,160
semantic it's not on by default you have

00:05:56,460 --> 00:06:00,810
to turn it on and it also supposed to

00:05:59,160 --> 00:06:02,790
understand the language you're working

00:06:00,810 --> 00:06:04,740
on so you can jump the definition all to

00:06:02,790 --> 00:06:05,850
complete that kind of thing but there's

00:06:04,740 --> 00:06:08,430
a problem with that which I'll come to

00:06:05,850 --> 00:06:09,930
shortly for auto-completion you have to

00:06:08,430 --> 00:06:12,000
made packages once called autocomplete

00:06:09,930 --> 00:06:16,140
and the other ones company mode for

00:06:12,000 --> 00:06:18,720
complete any they both also have

00:06:16,140 --> 00:06:20,310
backends so that you can have different

00:06:18,720 --> 00:06:23,010
sources of information for the

00:06:20,310 --> 00:06:25,320
autocompletion engine to work with both

00:06:23,010 --> 00:06:28,340
of them have engines for clang this is a

00:06:25,320 --> 00:06:30,420
good I think but doesn't always work

00:06:28,340 --> 00:06:32,940
I'll come back to that as well and

00:06:30,420 --> 00:06:34,710
miscellaneous are tags are tax is

00:06:32,940 --> 00:06:37,440
awesome I didn't write it something else

00:06:34,710 --> 00:06:39,450
did don't know the guy but I'm using it

00:06:37,440 --> 00:06:41,880
now foreseeable sports because

00:06:39,450 --> 00:06:43,710
work soil what it does is it leverages

00:06:41,880 --> 00:06:46,320
lib clang and there's a server and a

00:06:43,710 --> 00:06:48,330
client and the server will cache results

00:06:46,320 --> 00:06:49,530
a compilation with Lib clang and then it

00:06:48,330 --> 00:06:51,330
can give you information where things

00:06:49,530 --> 00:06:53,790
are defined and all sorts of other

00:06:51,330 --> 00:06:55,290
things now the good thing about so

00:06:53,790 --> 00:06:57,480
flightcheck has a thing for clang as

00:06:55,290 --> 00:06:58,410
well the good thing about that is it's

00:06:57,480 --> 00:06:59,910
using a compiler

00:06:58,410 --> 00:07:01,590
the problem with C scope and those

00:06:59,910 --> 00:07:02,910
things is they're not compilers so they

00:07:01,590 --> 00:07:04,410
don't understand the language that well

00:07:02,910 --> 00:07:07,020
when you have crazy if thefts and

00:07:04,410 --> 00:07:09,690
compiler directives and dash D flags and

00:07:07,020 --> 00:07:11,820
- includes none of these packages work

00:07:09,690 --> 00:07:14,190
because they can't if you're right in

00:07:11,820 --> 00:07:16,350
one file and you try semantic on it or

00:07:14,190 --> 00:07:17,820
if all the files on the same directory

00:07:16,350 --> 00:07:19,470
it will work or we'll know where to find

00:07:17,820 --> 00:07:21,690
things because we need to include it's

00:07:19,470 --> 00:07:23,940
from that directory but of course any

00:07:21,690 --> 00:07:28,020
non-trivial project has include paths

00:07:23,940 --> 00:07:29,850
has - DS maybe some configuration at

00:07:28,020 --> 00:07:31,410
Build time that will happen and things

00:07:29,850 --> 00:07:32,760
depend maybe you're building on Windows

00:07:31,410 --> 00:07:34,560
and Linux and you have if thefts and

00:07:32,760 --> 00:07:37,320
things don't work that way so that's the

00:07:34,560 --> 00:07:40,260
common problem - always packages so

00:07:37,320 --> 00:07:41,970
where the solutions a really bad one is

00:07:40,260 --> 00:07:43,740
using Mac's directory variables that's

00:07:41,970 --> 00:07:46,230
when you write a file - directory and

00:07:43,740 --> 00:07:48,000
when you open a file in Emacs and any of

00:07:46,230 --> 00:07:49,800
its sub directories it will apply those

00:07:48,000 --> 00:07:52,680
variables so you have to manually keep

00:07:49,800 --> 00:07:54,930
track of your compiler flags for every

00:07:52,680 --> 00:07:57,300
file in your project this doesn't sound

00:07:54,930 --> 00:07:58,710
like a good thing to do a better

00:07:57,300 --> 00:08:00,900
solution is to use a package like

00:07:58,710 --> 00:08:03,810
projectile that this project management

00:08:00,900 --> 00:08:07,350
for you so you don't have to handle this

00:08:03,810 --> 00:08:09,030
thing so you specify in this package you

00:08:07,350 --> 00:08:10,560
do some command in Emacs so you tell it

00:08:09,030 --> 00:08:12,270
what the project name is and what the

00:08:10,560 --> 00:08:15,270
directories are and all of these things

00:08:12,270 --> 00:08:16,950
compiler flags etc okay fine but the

00:08:15,270 --> 00:08:19,530
thing is if you're working on your own

00:08:16,950 --> 00:08:20,910
project then you can use projectile but

00:08:19,530 --> 00:08:22,340
if you're in a team of people and

00:08:20,910 --> 00:08:24,330
they're using eclipse or Visual Studio

00:08:22,340 --> 00:08:26,340
wherever and you just happen to be one

00:08:24,330 --> 00:08:29,670
to use Emacs you don't have that there

00:08:26,340 --> 00:08:31,500
is a build system in place and the most

00:08:29,670 --> 00:08:34,770
common one these days is probably Simic

00:08:31,500 --> 00:08:37,229
I use it for all of my C and C++ project

00:08:34,770 --> 00:08:39,240
and I don't want to be duplicating

00:08:37,229 --> 00:08:41,400
information that C make already knows C

00:08:39,240 --> 00:08:43,800
mix already building my project it knows

00:08:41,400 --> 00:08:45,030
what the compiler flags are so would it

00:08:43,800 --> 00:08:47,430
be great if I could just take that

00:08:45,030 --> 00:08:49,560
information from C make instead and pass

00:08:47,430 --> 00:08:50,400
it on to the packages that need of

00:08:49,560 --> 00:08:52,380
course they all have their own

00:08:50,400 --> 00:08:57,780
idiosyncratic ways

00:08:52,380 --> 00:09:00,150
doing this right so my contribution is

00:08:57,780 --> 00:09:02,460
to write a package called CMake ID it

00:09:00,150 --> 00:09:05,610
does what it says on the tin I try to

00:09:02,460 --> 00:09:08,310
make a zero config possible so what it

00:09:05,610 --> 00:09:10,290
does is when you open a file in Emacs it

00:09:08,310 --> 00:09:12,990
will search up that's and if it's a

00:09:10,290 --> 00:09:14,670
siient or C++ file it will look up the

00:09:12,990 --> 00:09:17,520
directory tree trying to find a see make

00:09:14,670 --> 00:09:18,960
lips txt now I can't stop with the first

00:09:17,520 --> 00:09:21,570
one because C make can use embedded

00:09:18,960 --> 00:09:22,950
stuff so it keeps going up the directory

00:09:21,570 --> 00:09:25,320
tree until I can't find another one and

00:09:22,950 --> 00:09:27,060
that one's the root now that it knows

00:09:25,320 --> 00:09:28,530
you're in a C make project because if

00:09:27,060 --> 00:09:30,750
you're not then it doesn't do anything

00:09:28,530 --> 00:09:33,330
because there's nothing to do it will

00:09:30,750 --> 00:09:34,830
run C make for you because this is

00:09:33,330 --> 00:09:36,540
another beauty of image you can just

00:09:34,830 --> 00:09:39,360
launch processes you can open a socket

00:09:36,540 --> 00:09:42,570
you can do whatever you want so it will

00:09:39,360 --> 00:09:45,660
run C make for you see Michael generate

00:09:42,570 --> 00:09:47,040
a compilation database in JSON with all

00:09:45,660 --> 00:09:50,130
the files in the system and all of the

00:09:47,040 --> 00:09:52,260
compiler flags and then this package

00:09:50,130 --> 00:09:55,790
that I wrote will set the variables used

00:09:52,260 --> 00:09:58,770
by autocomplete company flightcheck and

00:09:55,790 --> 00:10:00,570
we'll talk to the our tags demon until

00:09:58,770 --> 00:10:02,400
it oh by the way it's this directory

00:10:00,570 --> 00:10:05,160
over here go fetch the compilation

00:10:02,400 --> 00:10:06,780
database and do your magic and all of

00:10:05,160 --> 00:10:08,760
this all we have to do is install the

00:10:06,780 --> 00:10:11,040
packages all happens automatically all

00:10:08,760 --> 00:10:13,740
you do is open a file you open a file

00:10:11,040 --> 00:10:15,990
and then these things get set and now

00:10:13,740 --> 00:10:18,150
you have compiler assisted ID features

00:10:15,990 --> 00:10:20,520
compiler assisted by client using the

00:10:18,150 --> 00:10:22,890
exact same Flags you're actually using

00:10:20,520 --> 00:10:24,480
to build so this is no way you can get

00:10:22,890 --> 00:10:28,830
wrong definition because or else it

00:10:24,480 --> 00:10:30,450
wouldn't compile okay and that's how

00:10:28,830 --> 00:10:32,160
it's automatic so let's look at how this

00:10:30,450 --> 00:10:33,210
works now I've already got this open

00:10:32,160 --> 00:10:35,370
because it's a lightning talk and I

00:10:33,210 --> 00:10:37,650
don't have a lot of time but if if I

00:10:35,370 --> 00:10:39,060
just open a max in this file these

00:10:37,650 --> 00:10:41,190
things will work so there's already

00:10:39,060 --> 00:10:42,600
squiggly lines here because I have a CPP

00:10:41,190 --> 00:10:44,130
checker Clank is complaining about those

00:10:42,600 --> 00:10:46,290
headers I'm not sure what's going on

00:10:44,130 --> 00:10:47,850
there this project is ancient I would

00:10:46,290 --> 00:10:51,360
not write code like this anymore so

00:10:47,850 --> 00:10:52,860
there's that and I hope you believe if I

00:10:51,360 --> 00:10:54,390
just put the cursor over here no jump to

00:10:52,860 --> 00:10:55,860
the definition that thing just works I

00:10:54,390 --> 00:10:57,240
go straight to the where the micro wrist

00:10:55,860 --> 00:10:58,410
doesn't even take any time because it's

00:10:57,240 --> 00:11:00,630
cached

00:10:58,410 --> 00:11:02,370
if I put it here I'll see where this

00:11:00,630 --> 00:11:04,050
class is defined well actually that's

00:11:02,370 --> 00:11:04,510
the thing there it's a 4 declaration

00:11:04,050 --> 00:11:07,329
okay

00:11:04,510 --> 00:11:08,470
in this case the soil gets there's all

00:11:07,329 --> 00:11:11,709
sorts of things this is all being

00:11:08,470 --> 00:11:16,180
powered by our tech if I wanted to do I

00:11:11,709 --> 00:11:18,579
don't know here's the M weapon something

00:11:16,180 --> 00:11:19,660
right so if I try to do this and try to

00:11:18,579 --> 00:11:21,250
complete

00:11:19,660 --> 00:11:23,649
I get the demo effect and it's not

00:11:21,250 --> 00:11:25,930
working okay but normally the

00:11:23,649 --> 00:11:28,720
autocomplete believe me just just trust

00:11:25,930 --> 00:11:30,519
me with all right okay just took a while

00:11:28,720 --> 00:11:36,940
sometimes it does because they need to

00:11:30,519 --> 00:11:38,380
catch yourself yeah I don't know how

00:11:36,940 --> 00:11:40,990
it's taken so long it's got smooth yep

00:11:38,380 --> 00:11:42,490
so one of the back into ended ups reply

00:11:40,990 --> 00:11:46,209
and then you get all of these which are

00:11:42,490 --> 00:11:47,649
all methods define on that thing I'm

00:11:46,209 --> 00:11:50,620
kind of experiments in my configuration

00:11:47,649 --> 00:11:52,360
as well but it does some pretty cool

00:11:50,620 --> 00:11:55,570
stuff as well this is a different

00:11:52,360 --> 00:11:59,889
project here oh wait um so this is some

00:11:55,570 --> 00:12:04,329
some of the Google test source code I

00:11:59,889 --> 00:12:06,550
just picked it because it's it's open

00:12:04,329 --> 00:12:09,399
source and I won't get to trouble but

00:12:06,550 --> 00:12:11,829
maybe I'm gonna fall be better now this

00:12:09,399 --> 00:12:14,019
is the one I was trying to show I think

00:12:11,829 --> 00:12:15,699
this microwave yeah right so see how

00:12:14,019 --> 00:12:17,410
this thing to get grayed out that's

00:12:15,699 --> 00:12:19,660
because if the compiler definitions so

00:12:17,410 --> 00:12:23,110
it already knows 516 it's magic

00:12:19,660 --> 00:12:24,930
now our talks can do appear some pretty

00:12:23,110 --> 00:12:28,149
cool stuff as well here's a completely

00:12:24,930 --> 00:12:30,160
stupid project all I'm doing is with the

00:12:28,149 --> 00:12:31,600
macro defining a struct and the reason

00:12:30,160 --> 00:12:33,310
why I'm showing this is because I want

00:12:31,600 --> 00:12:35,620
to show the results of pre-processing

00:12:33,310 --> 00:12:37,149
that file and then on the other buffer

00:12:35,620 --> 00:12:38,500
on the Left you get the results of

00:12:37,149 --> 00:12:41,440
running the preprocessor on the entire

00:12:38,500 --> 00:12:45,550
file now of course that includes string

00:12:41,440 --> 00:12:47,050
there already gives me a lot of output

00:12:45,550 --> 00:12:48,910
because this is a standard library

00:12:47,050 --> 00:12:51,279
include so what if I just want to do

00:12:48,910 --> 00:12:56,319
this region here not a problem there you

00:12:51,279 --> 00:12:58,630
go boom pre-processed that's courtesy of

00:12:56,319 --> 00:13:00,160
our tags I'm just setting flags I'm just

00:12:58,630 --> 00:13:01,779
telling it where to get the stuff so you

00:13:00,160 --> 00:13:03,790
can know what to do

00:13:01,779 --> 00:13:05,370
the other kind of stuff that our tags

00:13:03,790 --> 00:13:09,160
does which is really cool as well is

00:13:05,370 --> 00:13:11,829
well let me jump to this header so these

00:13:09,160 --> 00:13:14,500
are all virtual functions right okay

00:13:11,829 --> 00:13:16,120
what if I ask the compiler to find every

00:13:14,500 --> 00:13:16,980
single virtue in plantation to that

00:13:16,120 --> 00:13:22,200
virtual function

00:13:16,980 --> 00:13:23,520
done and this is an eMac how many of you

00:13:22,200 --> 00:13:26,250
thought that Emacs could do that before

00:13:23,520 --> 00:13:30,150
getting into this room today that's what

00:13:26,250 --> 00:13:32,040
I thought but it can do anything so if

00:13:30,150 --> 00:13:33,960
it doesn't do what you need write some

00:13:32,040 --> 00:13:35,790
code than it will but chances are you

00:13:33,960 --> 00:13:37,140
don't have to because somebody else like

00:13:35,790 --> 00:13:40,290
me a package to do it

00:13:37,140 --> 00:13:41,790
so hopes I'll convince you that this is

00:13:40,290 --> 00:13:44,460
a good investment to make because you

00:13:41,790 --> 00:13:47,190
get all the part of Emacs with every

00:13:44,460 --> 00:13:49,650
idea feature you may want the

00:13:47,190 --> 00:13:51,240
autocomplete stuff I was showing here

00:13:49,650 --> 00:13:53,550
I've had problems with lots of complete

00:13:51,240 --> 00:13:54,630
recently so Strang company for a little

00:13:53,550 --> 00:13:57,090
while so I've changed my configure a

00:13:54,630 --> 00:13:59,160
little bit so and the reason why it

00:13:57,090 --> 00:14:00,390
wasn't because it wasn't working it was

00:13:59,160 --> 00:14:02,910
actually just because it was being slow

00:14:00,390 --> 00:14:04,470
because compiling C++ is slow and so

00:14:02,910 --> 00:14:06,690
when you're depending on clang to

00:14:04,470 --> 00:14:09,750
compile that structure to give you it

00:14:06,690 --> 00:14:11,850
takes a while um so I'm so you know

00:14:09,750 --> 00:14:13,200
mocking a part of it you can install

00:14:11,850 --> 00:14:14,640
this package from Mel but you don't have

00:14:13,200 --> 00:14:17,400
to clone it from github or anything like

00:14:14,640 --> 00:14:19,520
that and unless you have question with

00:14:17,400 --> 00:14:19,520
me

00:14:28,740 --> 00:14:32,760
it's that so there's actually a

00:14:30,750 --> 00:14:35,310
standalone server and a client that you

00:14:32,760 --> 00:14:37,290
need to compile I'm not running them so

00:14:35,310 --> 00:14:38,700
that that would be too much setup Emacs

00:14:37,290 --> 00:14:40,200
is running them for me the only thing I

00:14:38,700 --> 00:14:42,540
have to do is compile them and make sure

00:14:40,200 --> 00:14:44,340
they're in the path that's it but as

00:14:42,540 --> 00:14:45,960
soon as it recognizes as a seam a

00:14:44,340 --> 00:14:48,750
project it'll start our tags in the

00:14:45,960 --> 00:14:51,060
background for you and then tell the

00:14:48,750 --> 00:14:59,070
client to connect and say take the

00:14:51,060 --> 00:15:01,530
compiler flags from here so I I i use

00:14:59,070 --> 00:15:04,020
the the debugger inside Emacs as well

00:15:01,530 --> 00:15:05,310
with multiple windows actually shows you

00:15:04,020 --> 00:15:06,540
all the local variables and stuff like

00:15:05,310 --> 00:15:08,850
that I just didn't think I'd have time

00:15:06,540 --> 00:15:12,440
to put it up well so I'd have to pick up

00:15:08,850 --> 00:15:12,440
binary now so I'm definitely on time

00:15:13,720 --> 00:15:52,990
I had a lot of time on my hands two

00:15:50,079 --> 00:15:54,550
years ago and I changed everything about

00:15:52,990 --> 00:15:57,790
my development environment including

00:15:54,550 --> 00:16:00,100
operating system shell and ID I just

00:15:57,790 --> 00:16:01,480
went on a quest and I obsessed easily

00:16:00,100 --> 00:16:04,170
and I'm obsessed about my productivity

00:16:01,480 --> 00:16:06,639
and I did nothing else for six months I

00:16:04,170 --> 00:16:11,920
spent two hours once picking a

00:16:06,639 --> 00:16:14,759
programming foot thank you thank you

00:16:11,920 --> 00:16:14,759

YouTube URL: https://www.youtube.com/watch?v=5FQwQ0QWBTU


