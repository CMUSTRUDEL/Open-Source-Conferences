Title: CppCon 2015: Greg Law " Give me 15 minutes & I'll change your view of GDB"
Publication date: 2015-10-21
Playlist: CppCon 2015 Lightning Talks
Description: 
	http://www.Cppcon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,060 --> 00:00:05,690
all right so um so first of all

00:00:03,060 --> 00:00:09,240
apologies to any windows Debs

00:00:05,690 --> 00:00:10,410
because firstly this is kind of probably

00:00:09,240 --> 00:00:14,370
not going to be very interesting to you

00:00:10,410 --> 00:00:17,490
guys and secondly well just I'm I'm

00:00:14,370 --> 00:00:20,250
sorry for you and but maybe you'll maybe

00:00:17,490 --> 00:00:23,279
you'll come across so we're going to

00:00:20,250 --> 00:00:28,619
show a couple of things in in gdb that

00:00:23,279 --> 00:00:31,199
I've found over the years so we deal a

00:00:28,619 --> 00:00:33,840
lot with so we make this this tool

00:00:31,199 --> 00:00:35,760
called undo DB which is well the most

00:00:33,840 --> 00:00:37,170
common interface to it probably is gdb

00:00:35,760 --> 00:00:40,079
so a lot of our customers spend their

00:00:37,170 --> 00:00:42,030
time in gdb and we and we work with them

00:00:40,079 --> 00:00:43,500
and sometimes you're often it's more

00:00:42,030 --> 00:00:45,809
than looking at how to do something in

00:00:43,500 --> 00:00:48,840
gdb and I've kind of picked up some good

00:00:45,809 --> 00:00:54,170
stuff over the years then I thought it

00:00:48,840 --> 00:00:59,340
might be interesting to share so

00:00:54,170 --> 00:01:02,190
probably sorry so yeah I just want to

00:00:59,340 --> 00:01:03,930
start by by saying said it would be the

00:01:02,190 --> 00:01:08,010
first person in with the gdb is not

00:01:03,930 --> 00:01:09,030
intuitive right but it is very powerful

00:01:08,010 --> 00:01:11,549
and I think there's an important

00:01:09,030 --> 00:01:13,979
distinction to make between ease of use

00:01:11,549 --> 00:01:17,369
and ease of learning and it's not easy

00:01:13,979 --> 00:01:18,810
to learn but it is easy to use when you

00:01:17,369 --> 00:01:20,250
when you get to learn it and it's not

00:01:18,810 --> 00:01:22,080
that hard to learn right sometimes you

00:01:20,250 --> 00:01:29,729
just need to to know that these things

00:01:22,080 --> 00:01:31,170
exist so so here's a here's a pretty

00:01:29,729 --> 00:01:33,450
simple program not much more than hello

00:01:31,170 --> 00:01:36,150
world but it's get few lines so I can at

00:01:33,450 --> 00:01:40,680
least type next a few times and I

00:01:36,150 --> 00:01:43,020
compile just as normal and I run this in

00:01:40,680 --> 00:01:45,360
gdb right and and most of us many of us

00:01:43,020 --> 00:01:47,579
would have done this at some point and

00:01:45,360 --> 00:01:50,549
you can start which just saves you

00:01:47,579 --> 00:01:52,590
typing break at main and then run and

00:01:50,549 --> 00:01:55,320
it's okay I'm at line six of my program

00:01:52,590 --> 00:02:00,000
but I don't have any context right and

00:01:55,320 --> 00:02:03,180
well I can get a list so that's kind of

00:02:00,000 --> 00:02:04,640
okay but what I want to show you is

00:02:03,180 --> 00:02:07,290
probably the thing that I think is

00:02:04,640 --> 00:02:09,330
probably least known and most useful

00:02:07,290 --> 00:02:11,190
like the thing that schools best on both

00:02:09,330 --> 00:02:12,460
ranks which is think this thing called

00:02:11,190 --> 00:02:15,370
tu I mode which stands

00:02:12,460 --> 00:02:16,780
check text user interface and it's a

00:02:15,370 --> 00:02:20,290
really bad name because surely that is a

00:02:16,780 --> 00:02:20,650
text user interface right and and it's a

00:02:20,290 --> 00:02:24,820
bit

00:02:20,650 --> 00:02:26,980
well 1970s and and it's just kind of

00:02:24,820 --> 00:02:28,600
clunky but if you type and I don't know

00:02:26,980 --> 00:02:32,590
why you have to type this and why it's

00:02:28,600 --> 00:02:34,690
so obscure but if you type ctrl X a then

00:02:32,590 --> 00:02:37,180
you get the real T UI text user

00:02:34,690 --> 00:02:40,390
interface which is like screaming into

00:02:37,180 --> 00:02:43,990
the 1980s but it is still pretty useful

00:02:40,390 --> 00:02:46,090
right so now when I type next I get much

00:02:43,990 --> 00:02:51,160
more context of what my program is doing

00:02:46,090 --> 00:02:52,720
right it's not perfect right like all

00:02:51,160 --> 00:02:55,420
curses programs that sometimes goes a

00:02:52,720 --> 00:02:58,870
bit weird sometimes so if I type next

00:02:55,420 --> 00:03:00,310
again my programs printed out hello

00:02:58,870 --> 00:03:02,890
world and it's kind of screwed up my

00:03:00,310 --> 00:03:05,020
display and that's a reliable way to

00:03:02,890 --> 00:03:07,660
make it go wrong I couldn't I there are

00:03:05,020 --> 00:03:08,710
more interesting ways it goes wrong but

00:03:07,660 --> 00:03:11,500
none of them I could find that we're

00:03:08,710 --> 00:03:13,780
reliable but if it does you can just do

00:03:11,500 --> 00:03:16,900
ctrl L and it repaint your screen for

00:03:13,780 --> 00:03:20,620
use it's quite handy and you can

00:03:16,900 --> 00:03:22,930
actually do a bit more so you can if I

00:03:20,620 --> 00:03:27,730
go control X - I may not have enough

00:03:22,930 --> 00:03:30,390
characters for this but now let me let

00:03:27,730 --> 00:03:33,280
me make this slightly smaller so I can I

00:03:30,390 --> 00:03:37,690
was all perfectly set up for this before

00:03:33,280 --> 00:03:41,410
my system reset ah so we're way over

00:03:37,690 --> 00:03:45,190
here okay so and then you could control

00:03:41,410 --> 00:03:48,760
X 2 and row X 2 I get multiple windows

00:03:45,190 --> 00:03:51,760
and so here obviously I've got my my

00:03:48,760 --> 00:03:53,710
source code with my assembly and if I go

00:03:51,760 --> 00:03:55,510
control X 2 again it will cycle through

00:03:53,710 --> 00:03:58,510
and then I can get my registers as well

00:03:55,510 --> 00:04:02,740
and you can change what you're seeing so

00:03:58,510 --> 00:04:04,750
I can go tu I reg that's the general

00:04:02,740 --> 00:04:06,430
purpose registers but if I go to you I

00:04:04,750 --> 00:04:08,470
would float and it will show me the

00:04:06,430 --> 00:04:10,060
floating registers so you can sort of

00:04:08,470 --> 00:04:11,380
set things up so you just makes it much

00:04:10,060 --> 00:04:13,960
more convenient you don't have to spend

00:04:11,380 --> 00:04:16,450
all that time looking through and in

00:04:13,960 --> 00:04:22,960
flipping back and forth control X 1 I'll

00:04:16,450 --> 00:04:25,820
go back and let's go control X 1 and we

00:04:22,960 --> 00:04:27,050
go back to our source code

00:04:25,820 --> 00:04:30,230
and the other thing you'll find that you

00:04:27,050 --> 00:04:32,510
can do in this mode is by doing up doing

00:04:30,230 --> 00:04:34,700
up arrow here and it goes up and down

00:04:32,510 --> 00:04:37,910
which actually is really annoying

00:04:34,700 --> 00:04:41,150
because what certainly I do a lot of the

00:04:37,910 --> 00:04:43,610
time is you go up arrow in order to get

00:04:41,150 --> 00:04:45,080
the previous command right and and now

00:04:43,610 --> 00:04:46,760
you can't do that anymore but turns out

00:04:45,080 --> 00:04:49,610
I'm I'm you found this out really

00:04:46,760 --> 00:04:52,040
recently you can go ctrl P and then I

00:04:49,610 --> 00:04:54,080
can get my previous command so ctrl P

00:04:52,040 --> 00:04:55,640
and n into your I mode goes up and down

00:04:54,080 --> 00:05:01,310
my command history I think you can do

00:04:55,640 --> 00:05:03,560
ctrl P and n normally in CLI mode but

00:05:01,310 --> 00:05:16,520
but I certainly I would just normally

00:05:03,560 --> 00:05:18,290
use up and down there yeah oh yeah so

00:05:16,520 --> 00:05:20,180
you should just be able to press J and K

00:05:18,290 --> 00:05:23,840
and then it would be alright yeah I've

00:05:20,180 --> 00:05:24,710
been I don't know I don't know what's I

00:05:23,840 --> 00:05:30,170
don't know what's wrong with the world

00:05:24,710 --> 00:05:31,490
then so so there you go um so that's T

00:05:30,170 --> 00:05:33,470
UI how long do we have the kind of

00:05:31,490 --> 00:05:34,910
reaching through now the other thing I

00:05:33,470 --> 00:05:37,850
think this the second probably most

00:05:34,910 --> 00:05:38,960
useful thing to look I think a lot of

00:05:37,850 --> 00:05:41,090
people know about now but still not

00:05:38,960 --> 00:05:44,780
everybody is is there's a Python

00:05:41,090 --> 00:05:48,050
interpreter built into the gdb any

00:05:44,780 --> 00:05:50,600
anything since version seven and so this

00:05:48,050 --> 00:05:56,530
is very very powerful right so I can do

00:05:50,600 --> 00:06:01,400
just type Python and then I don't know

00:05:56,530 --> 00:06:06,560
so you can do print in a world Oh

00:06:01,400 --> 00:06:09,350
at least like a type and and the Python

00:06:06,560 --> 00:06:11,030
works alright now if I go I'm going to

00:06:09,350 --> 00:06:12,890
come out of to you I'm exists sometimes

00:06:11,030 --> 00:06:14,870
a bit clearer so I can and I can type

00:06:12,890 --> 00:06:17,570
multiple lines of Python and you can do

00:06:14,870 --> 00:06:19,670
it's pretty much a full Python

00:06:17,570 --> 00:06:21,680
interpreter at least as long as your gdb

00:06:19,670 --> 00:06:23,320
build isn't messed up which sometimes we

00:06:21,680 --> 00:06:32,170
encounter quite a lot actually but

00:06:23,320 --> 00:06:32,170
import OS and then I can print my pit is

00:06:32,750 --> 00:06:38,720
start get good right so you can do you

00:06:37,700 --> 00:06:40,550
know anything that you want to do in

00:06:38,720 --> 00:06:42,470
Python and actually you can you can

00:06:40,550 --> 00:06:44,540
define functions that you can then call

00:06:42,470 --> 00:06:46,730
from the command line and you can even

00:06:44,540 --> 00:06:49,520
define functions that then you can make

00:06:46,730 --> 00:06:52,520
become sort of first-class gdb commands

00:06:49,520 --> 00:06:55,430
which is kind of cool and it's not just

00:06:52,520 --> 00:06:57,260
that there's this Python interpreter

00:06:55,430 --> 00:06:59,630
sort of sitting there that you can just

00:06:57,260 --> 00:07:05,270
do stuff it's really tightly bound to

00:06:59,630 --> 00:07:08,660
gdb itself so for example let me let's

00:07:05,270 --> 00:07:12,200
put a couple of breakpoints in so switch

00:07:08,660 --> 00:07:15,230
back to there so if I break at main and

00:07:12,200 --> 00:07:21,230
I don't know a break at line nine as

00:07:15,230 --> 00:07:27,740
well so if I in Python I can go let's

00:07:21,230 --> 00:07:29,690
print gdb breakpoints and that gives me

00:07:27,740 --> 00:07:30,860
a list of these breakpoint objects right

00:07:29,690 --> 00:07:34,130
and they contain all the kind of things

00:07:30,860 --> 00:07:39,290
that you'd want so I could do

00:07:34,130 --> 00:07:45,320
breakpoints take the zeroth one and I

00:07:39,290 --> 00:07:46,669
don't necessarily okay and so you can

00:07:45,320 --> 00:07:48,530
find out information about those break

00:07:46,669 --> 00:07:50,300
points and you get all the normal things

00:07:48,530 --> 00:07:52,729
enable whether they're enabled and

00:07:50,300 --> 00:07:55,580
there's advanced things set and you can

00:07:52,729 --> 00:07:58,030
even set breakpoints from the Python so

00:07:55,580 --> 00:08:01,370
you can go let's try and get this right

00:07:58,030 --> 00:08:04,669
by I just need to create a breakpoint

00:08:01,370 --> 00:08:07,640
object and I give it a location

00:08:04,669 --> 00:08:14,450
specifier so let's put one on line seven

00:08:07,640 --> 00:08:15,710
and it looks and now that breakpoints

00:08:14,450 --> 00:08:17,690
appeared right and you can see the

00:08:15,710 --> 00:08:19,460
breakpoints on there on the left here so

00:08:17,690 --> 00:08:21,410
by using these kind of thing and you can

00:08:19,460 --> 00:08:23,240
do you can find out information about

00:08:21,410 --> 00:08:25,280
what this is what the source file is and

00:08:23,240 --> 00:08:28,280
you can look up all your local variables

00:08:25,280 --> 00:08:29,810
and one of the very cool things you can

00:08:28,280 --> 00:08:31,880
do that I don't have time to show now is

00:08:29,810 --> 00:08:33,589
that you can do python pretty printers

00:08:31,880 --> 00:08:34,640
right if you've got these structures

00:08:33,589 --> 00:08:36,140
that you've made me just when you type

00:08:34,640 --> 00:08:41,140
print my structure you want it to look

00:08:36,140 --> 00:08:44,360
nice you can do that and in whatever way

00:08:41,140 --> 00:08:48,790
that you want another

00:08:44,360 --> 00:08:50,649
really I think quite useful thing is

00:08:48,790 --> 00:08:52,910
well I'm a bit biased here but

00:08:50,649 --> 00:08:54,350
reversible debugging now gdb has inbuilt

00:08:52,910 --> 00:08:55,999
reversible debugging so you don't need

00:08:54,350 --> 00:08:58,489
to be a customer of ours to to take

00:08:55,999 --> 00:09:00,559
advantage of this our stuff is much much

00:08:58,489 --> 00:09:02,149
quicker and generally much more awesome

00:09:00,559 --> 00:09:03,879
but but still you have reversible

00:09:02,149 --> 00:09:10,899
debugging in gdb that works quite well

00:09:03,879 --> 00:09:12,499
so here I have a program that is just

00:09:10,899 --> 00:09:13,910
it's a bubble sort

00:09:12,499 --> 00:09:16,009
right very simple doesn't we do anything

00:09:13,910 --> 00:09:24,619
it just fills an array with randomized

00:09:16,009 --> 00:09:26,449
data and then it sorts it so doesn't

00:09:24,619 --> 00:09:31,610
even print anything out but I happen to

00:09:26,449 --> 00:09:35,269
know that there's there's a bug in there

00:09:31,610 --> 00:09:40,779
that doesn't quite go every time so if I

00:09:35,269 --> 00:09:40,779
run that in a loop it usually works and

00:09:41,049 --> 00:09:46,309
where this is the the peril of

00:09:44,709 --> 00:09:47,989
intermittent bugs when you're waiting

00:09:46,309 --> 00:09:51,619
for them but there we go right every so

00:09:47,989 --> 00:09:56,869
often it's eggsy's and ok it's made a

00:09:51,619 --> 00:09:59,509
core dump so that's useful so there it

00:09:56,869 --> 00:10:01,160
is so I can load that up so let's have a

00:09:59,509 --> 00:10:05,119
look I'm sort of usually do with a cool

00:10:01,160 --> 00:10:06,559
dump but we've got no stack information

00:10:05,119 --> 00:10:10,160
at all so clearly this is some kind of

00:10:06,559 --> 00:10:13,249
stack smashing bug and the core files of

00:10:10,160 --> 00:10:17,119
no use so in what I'm going to do

00:10:13,249 --> 00:10:18,819
instead and that runs no good now that

00:10:17,119 --> 00:10:25,220
informations all gone but if instead I

00:10:18,819 --> 00:10:27,559
it's not gdb like this and I'm going to

00:10:25,220 --> 00:10:29,089
actually this I'm going to put what I

00:10:27,559 --> 00:10:31,309
want to do is enable reversible

00:10:29,089 --> 00:10:34,009
debugging so that when it bolts I can

00:10:31,309 --> 00:10:35,720
step back a bit and then I can get the

00:10:34,009 --> 00:10:38,059
context right I don't need the back

00:10:35,720 --> 00:10:39,679
trace but I need to run it a bunch of

00:10:38,059 --> 00:10:41,959
times as well and obviously it's kind of

00:10:39,679 --> 00:10:43,579
tedious to do that by hand but you can

00:10:41,959 --> 00:10:45,410
set breakpoints and you can have

00:10:43,579 --> 00:10:48,319
commands that issue when those

00:10:45,410 --> 00:10:53,509
breakpoints are hit so if I set a

00:10:48,319 --> 00:10:56,130
breakpoint on main and I set another

00:10:53,509 --> 00:10:58,680
breakpoint on

00:10:56,130 --> 00:11:00,690
and I happen to know this is a bit of a

00:10:58,680 --> 00:11:04,710
hack but I happen to know that there's

00:11:00,690 --> 00:11:06,600
this act when it exits normally it goes

00:11:04,710 --> 00:11:07,980
through this line actually I probably

00:11:06,600 --> 00:11:11,070
could just do on the last line of main

00:11:07,980 --> 00:11:12,930
anyway that'll do and I'm going to apply

00:11:11,070 --> 00:11:13,710
commands to run when these breakpoints

00:11:12,930 --> 00:11:18,060
are hit

00:11:13,710 --> 00:11:22,350
so when breakpoint 3 is hit

00:11:18,060 --> 00:11:25,460
I just want to rerun and when breakpoint

00:11:22,350 --> 00:11:31,050
2 is hit which is the one main sorry

00:11:25,460 --> 00:11:35,730
command - I want to enable recording and

00:11:31,050 --> 00:11:38,460
continue now oh hang on before I do that

00:11:35,730 --> 00:11:39,270
I want to set pagination off because

00:11:38,460 --> 00:11:44,850
that will get annoying

00:11:39,270 --> 00:11:46,380
and now when I rerun what it's doing is

00:11:44,850 --> 00:11:47,880
every time it hits the top breakpoint at

00:11:46,380 --> 00:11:49,800
main it's going to turn on recording and

00:11:47,880 --> 00:11:51,780
run through and then when it gets to the

00:11:49,800 --> 00:11:55,980
end it's going to just start again right

00:11:51,780 --> 00:11:58,290
and once again we have this kind of

00:11:55,980 --> 00:11:59,610
indeterminate way because this is a an

00:11:58,290 --> 00:12:03,690
intermittent bug but if we're patient

00:11:59,610 --> 00:12:05,940
enough eventually it doesn't get to the

00:12:03,690 --> 00:12:08,070
end it's stopped in hyperspace and I can

00:12:05,940 --> 00:12:12,030
start to look around at what's going on

00:12:08,070 --> 00:12:16,860
so I can look at my program counter ok

00:12:12,030 --> 00:12:18,720
so I'm there if I do X to look at the

00:12:16,860 --> 00:12:20,520
memory there we can't access that memory

00:12:18,720 --> 00:12:23,730
I appeared to have to have jumped into

00:12:20,520 --> 00:12:26,970
hyperspace as we saw the fallback traces

00:12:23,730 --> 00:12:29,190
is kind of garbage but I can reverse

00:12:26,970 --> 00:12:30,920
step I which is like step I but just

00:12:29,190 --> 00:12:33,180
going to go back one instruction and

00:12:30,920 --> 00:12:36,930
suddenly tada

00:12:33,180 --> 00:12:39,510
we're back in sensible land now I have a

00:12:36,930 --> 00:12:42,840
stack that works and you can look here

00:12:39,510 --> 00:12:44,190
I'm at the end so what's going on well I

00:12:42,840 --> 00:12:45,660
can look at the disassembly of the code

00:12:44,190 --> 00:12:47,790
and I can see this little arrow at the

00:12:45,660 --> 00:12:50,820
bottom tells me that I'm trying to issue

00:12:47,790 --> 00:12:52,050
a return instruction so not that

00:12:50,820 --> 00:12:53,730
surprising if you think we've got some

00:12:52,050 --> 00:12:55,620
kind of stack corruption well let's have

00:12:53,730 --> 00:12:58,500
a look what's going on there so if I

00:12:55,620 --> 00:13:01,320
look at the stack pointer your stack

00:12:58,500 --> 00:13:07,350
point is that so return on x86 at least

00:13:01,320 --> 00:13:09,900
will will will return to the top of the

00:13:07,350 --> 00:13:11,610
stack and if I

00:13:09,900 --> 00:13:14,070
at the top of the stack sure enough that

00:13:11,610 --> 00:13:17,340
is the bogus address that was that we

00:13:14,070 --> 00:13:19,080
were jumping to so someone's clearly

00:13:17,340 --> 00:13:21,680
written rubbish on top of my stack so

00:13:19,080 --> 00:13:24,810
how do I know what that is well if I

00:13:21,680 --> 00:13:26,850
watch that right watch point said

00:13:24,810 --> 00:13:28,980
sometimes called a data breakpoint and

00:13:26,850 --> 00:13:30,660
the idea is you set though these watch

00:13:28,980 --> 00:13:32,640
points and usually what you do is you

00:13:30,660 --> 00:13:34,230
run forwards until the data is changed

00:13:32,640 --> 00:13:36,030
what this is going to do is run

00:13:34,230 --> 00:13:37,830
backwards until that location in memory

00:13:36,030 --> 00:13:39,030
changes which is going to be who's

00:13:37,830 --> 00:13:40,620
written to my snack which ought to have

00:13:39,030 --> 00:13:43,320
been when I entered the function but we

00:13:40,620 --> 00:13:46,560
suspect and what we've seen is not and

00:13:43,320 --> 00:13:50,130
I'm going to reverse continue and so now

00:13:46,560 --> 00:13:52,620
I've gone back in time to when that

00:13:50,130 --> 00:13:54,090
snack was modified and perhaps slightly

00:13:52,620 --> 00:13:57,270
unsurprisingly it's when I'm writing

00:13:54,090 --> 00:13:58,980
into my array and let's have a look

00:13:57,270 --> 00:14:02,190
what's I at that time to have full data

00:13:58,980 --> 00:14:06,180
at this point I can see is 35 and if I

00:14:02,190 --> 00:14:09,180
do my very anoying up arrow will see

00:14:06,180 --> 00:14:11,610
that the array is only 32 elements long

00:14:09,180 --> 00:14:13,770
and of course the bug is is that we've

00:14:11,610 --> 00:14:15,690
got this we're using percent size of

00:14:13,770 --> 00:14:16,860
array when we should have used you know

00:14:15,690 --> 00:14:19,920
that's the number of bytes in the array

00:14:16,860 --> 00:14:21,120
not the number of elements and so there

00:14:19,920 --> 00:14:23,670
was three very quick things

00:14:21,120 --> 00:14:27,390
there's loads and loads of other stuff I

00:14:23,670 --> 00:14:28,680
just ignored my slides but is there's

00:14:27,390 --> 00:14:30,540
there's loads of cool stuff I'm going to

00:14:28,680 --> 00:14:32,340
do a longer open content session

00:14:30,540 --> 00:14:33,870
tomorrow well I'm still won't have time

00:14:32,340 --> 00:14:36,570
to go into all of this but I'll go into

00:14:33,870 --> 00:14:38,370
more of it and and some and some other

00:14:36,570 --> 00:14:40,910
cool stuff as well so thank you for your

00:14:38,370 --> 00:14:40,910

YouTube URL: https://www.youtube.com/watch?v=PorfLSr3DDI


