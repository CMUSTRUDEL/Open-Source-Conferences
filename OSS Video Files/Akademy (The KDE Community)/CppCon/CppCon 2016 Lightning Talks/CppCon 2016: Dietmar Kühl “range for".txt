Title: CppCon 2016: Dietmar Kühl “range for"
Publication date: 2016-10-07
Playlist: CppCon 2016 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Captions: English, Russian.
Captions: 
	00:00:00,560 --> 00:00:07,380
OK. I just want to talk a little bit of "Range For." Everybody knows that, I guess,

00:00:07,380 --> 00:00:12,000
everybody's seen it, everybody loves it. So "Range For". And...

00:00:12,000 --> 00:00:14,820
Actually I see that code often.

00:00:14,820 --> 00:00:20,039
And actually all the objects, right? That's really bad. Don't do that.

00:00:20,040 --> 00:00:23,200
If you ever see that code, rather replace it by something like that.

00:00:23,200 --> 00:00:31,280
If you insist, by that. Fine. This is the way I would write it. It has `const` in the right place.

00:00:31,280 --> 00:00:37,020
If something actually changes things, you just put a reference on,

00:00:37,020 --> 00:00:42,120
that's fine as well. In theory, the range may

00:00:42,120 --> 00:00:46,880
produce rvalues, in which case you may want to have something like that.

00:00:46,880 --> 00:00:56,360
And then I've seen people, when they have come to that, to do that. This is really bad.

00:00:56,370 --> 00:01:00,300
What you do over here is you basically, again "accidentally all the objects".

00:01:00,300 --> 00:01:04,530
You basically destroy everything. This is like trampling on kittens, right?

00:01:04,530 --> 00:01:12,100
You don't do that. Don't trample on kittens. So basically auto&& never is an rvalue reference, pretty much.

00:01:12,140 --> 00:01:15,100
Well, it may be an rvalue reference but you don't know.

00:01:15,100 --> 00:01:18,840
It is actually something called a "forwarding reference".

00:01:18,840 --> 00:01:24,020
So people understand what that is; forwarding reference happens also not just with auto

00:01:24,020 --> 00:01:26,640
but also if you have a T&& and T is deduced,

00:01:26,640 --> 00:01:31,400
it's a forwarding reference. These guys behave kind of funny.

00:01:31,400 --> 00:01:38,000
If I've a mutable lvalue and I bind it to an rvalue reference, I could have written the declaration

00:01:38,000 --> 00:01:42,299
as well as "int&". So it may be actually an int&. And actuallly if you try to

00:01:42,300 --> 00:01:46,980
move these guys you destroy the guy you probably want to keep.

00:01:46,980 --> 00:01:50,540
For int it doesn't matter but if it had been a string it would be bad.

00:01:50,540 --> 00:01:57,340
Likewise if I have a constant and bind that to an auto&&,

00:01:57,340 --> 00:02:02,480
I could have as well have written int const&. So it's again an lvalue. And then the other case is...

00:02:02,480 --> 00:02:06,820
over here we actually have a temporary, so it deduces temporary and it's fine.

00:02:06,820 --> 00:02:12,420
So that's equivalent to kind of that. And this guy could have been moved.

00:02:12,420 --> 00:02:16,300
OK. Now a little bit... Something which

00:02:16,300 --> 00:02:21,420
people may not be aware of, there's actually an upcoming change in C++17,

00:02:21,420 --> 00:02:25,560
which I'm personally very excited about, and that is... This is how

00:02:25,560 --> 00:02:29,560
Range-Based-For is defined in the standard. Like these blue and white blobs are basically

00:02:29,560 --> 00:02:34,800
verbatim replaced in the code. And then there's a little bit of scaffolding put around.

00:02:34,800 --> 00:02:39,700
The thing which is kind of awkward in that is this yellow stuff over here.

00:02:39,700 --> 00:02:47,010
"auto _it = begin(_r)" and "_end = end(_r)". The thing which is bad is

00:02:47,010 --> 00:02:52,520
it makes begin and the end the same type. And C++17 will change that to basically

00:02:52,530 --> 00:02:57,260
do that instead. Is really small change, right? auto... Just adds an extra auto

00:02:57,269 --> 00:03:02,430
so the begin and the end can be different types, which effectively means

00:03:02,430 --> 00:03:05,680
the begin can be an iterator and the end could be a sentinel.

00:03:05,680 --> 00:03:10,680
So you can actually do sentinel stuff and you don't have to play around with something like,

00:03:10,680 --> 00:03:16,000
"Oh, am I at the end? Am I at the end? Are we both at the end?" kind of logic.

00:03:16,000 --> 00:03:24,440

YouTube URL: https://www.youtube.com/watch?v=hGu9XWsOgWQ


