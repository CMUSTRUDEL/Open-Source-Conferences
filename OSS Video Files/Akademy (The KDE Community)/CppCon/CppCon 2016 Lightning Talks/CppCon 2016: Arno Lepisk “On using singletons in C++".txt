Title: CppCon 2016: Arno Lepisk “On using singletons in C++"
Publication date: 2016-10-07
Playlist: CppCon 2016 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:09,900
okay how many of you are familiar with

00:00:02,429 --> 00:00:10,590
the single component then maybe a quick

00:00:09,900 --> 00:00:15,990
recap

00:00:10,590 --> 00:00:19,289
it's a pattern when you where you just

00:00:15,990 --> 00:00:21,900
have one instance of something in a

00:00:19,289 --> 00:00:24,119
system for example resource management

00:00:21,900 --> 00:00:27,390
logging or configurations

00:00:24,119 --> 00:00:29,970
my name is Ornella bisque I work at a

00:00:27,390 --> 00:00:33,360
firm called high q-- in Stockholm and

00:00:29,970 --> 00:00:36,020
I'm going to you to talk about my

00:00:33,360 --> 00:00:40,050
experience with Singleton's in C++

00:00:36,020 --> 00:00:44,129
because I worked almost 10 years with

00:00:40,050 --> 00:00:47,550
C++ and almost all projects using atoms

00:00:44,129 --> 00:00:50,309
in one way or another even if they maybe

00:00:47,550 --> 00:00:53,129
don't call it single tones because as

00:00:50,309 --> 00:00:56,460
you probably know seeing of those aren't

00:00:53,129 --> 00:00:59,670
universally loved okay how do we

00:00:56,460 --> 00:01:01,170
intimate this if we just do internet

00:00:59,670 --> 00:01:04,650
search for Singleton's in C++ you

00:01:01,170 --> 00:01:07,710
probably find something like this you

00:01:04,650 --> 00:01:09,810
have a class with private constructors

00:01:07,710 --> 00:01:11,820
and just see an instance method

00:01:09,810 --> 00:01:14,280
aesthetic that you use to get in it's

00:01:11,820 --> 00:01:18,360
the instance of the single tool so you

00:01:14,280 --> 00:01:24,409
can use either returns a pointer or

00:01:18,360 --> 00:01:27,540
reference and you use it like this a

00:01:24,409 --> 00:01:32,009
problem with this and all my examples

00:01:27,540 --> 00:01:36,270
are very strict so you have to imagine

00:01:32,009 --> 00:01:40,470
all the private copy constructors and so

00:01:36,270 --> 00:01:44,399
so on a problem with this approach is

00:01:40,470 --> 00:01:48,170
that you expose a lot and lot of your

00:01:44,399 --> 00:01:52,490
internal data structures and so and you

00:01:48,170 --> 00:01:52,490
probably don't want to do that because

00:01:53,390 --> 00:01:59,820
yeah you you leak a lot of information

00:01:57,350 --> 00:02:04,469
one way of getting around this is to use

00:01:59,820 --> 00:02:07,530
a pimple approach you have private Ferol

00:02:04,469 --> 00:02:10,410
class that you use to hide the

00:02:07,530 --> 00:02:13,560
implementation another way

00:02:10,410 --> 00:02:16,370
is to use this abstract base class for

00:02:13,560 --> 00:02:21,000
singleton it feels a little bit odd

00:02:16,370 --> 00:02:23,250
because you use absolute base classes to

00:02:21,000 --> 00:02:26,910
make several variants of your class and

00:02:23,250 --> 00:02:30,270
you have a singleton which around this

00:02:26,910 --> 00:02:36,060
one must be strange but I've seen this

00:02:30,270 --> 00:02:38,420
used a lot but if we want to have a

00:02:36,060 --> 00:02:43,260
single that's easy to use we can ditch

00:02:38,420 --> 00:02:50,100
in a way or hide or in the instance

00:02:43,260 --> 00:02:51,980
method and expose all our interface with

00:02:50,100 --> 00:02:55,920
static methods and so we can call it

00:02:51,980 --> 00:03:03,260
with Singleton's : : foo instead of

00:02:55,920 --> 00:03:06,390
singleton : : instance point there - and

00:03:03,260 --> 00:03:09,050
then we can we can use it like this I

00:03:06,390 --> 00:03:12,060
hope you can see the top bro

00:03:09,050 --> 00:03:18,060
but that syntax reminds us of something

00:03:12,060 --> 00:03:22,100
else we can teach the class all over put

00:03:18,060 --> 00:03:24,720
your implementation in a namespace and

00:03:22,100 --> 00:03:29,520
then it can hide all your internal data

00:03:24,720 --> 00:03:34,800
in an anonymous namespace in your

00:03:29,520 --> 00:03:39,150
implementation there is drawbacks with

00:03:34,800 --> 00:03:45,959
this because if you have if you try to

00:03:39,150 --> 00:03:49,950
call this method from constructor of a

00:03:45,959 --> 00:03:54,150
global object due to initialization

00:03:49,950 --> 00:03:56,880
order things might blow up it's you

00:03:54,150 --> 00:03:59,540
can't work around it finally I want to

00:03:56,880 --> 00:04:02,100
talk a little bit testing of these

00:03:59,540 --> 00:04:04,050
single terms it's always a bit hard

00:04:02,100 --> 00:04:09,420
because you try to encapsulate them so

00:04:04,050 --> 00:04:11,310
much things away so you don't have

00:04:09,420 --> 00:04:17,880
access to the data

00:04:11,310 --> 00:04:19,410
there are ways around it I've seen you

00:04:17,880 --> 00:04:21,539
add a method to you think that I just

00:04:19,410 --> 00:04:22,770
clears the state you don't implement it

00:04:21,539 --> 00:04:24,240
in your production code only your

00:04:22,770 --> 00:04:29,690
testing code but it's still there

00:04:24,240 --> 00:04:42,990
I think this is plain ugly other ways

00:04:29,690 --> 00:04:45,810
you just you just you want to scream but

00:04:42,990 --> 00:04:48,660
if you yeah and then the abstract base

00:04:45,810 --> 00:04:53,520
class you make another implementation as

00:04:48,660 --> 00:04:56,310
well but with the namespace the based

00:04:53,520 --> 00:04:58,470
solution you can instead of putting it

00:04:56,310 --> 00:05:02,280
in annum namespace you put it in a

00:04:58,470 --> 00:05:05,840
detail namespace put it in a separate

00:05:02,280 --> 00:05:10,849
include file so you can edit it or

00:05:05,840 --> 00:05:15,180
access the data from from your test code

00:05:10,849 --> 00:05:18,000
so my time is up so if you're going to

00:05:15,180 --> 00:05:19,770
do a singleton implementation please

00:05:18,000 --> 00:05:21,960
consider

00:05:19,770 --> 00:05:25,139
ditching the class altogether and just

00:05:21,960 --> 00:05:27,440
put it in the namespace alright if you

00:05:25,139 --> 00:05:27,440

YouTube URL: https://www.youtube.com/watch?v=23xDn3ReH7E


