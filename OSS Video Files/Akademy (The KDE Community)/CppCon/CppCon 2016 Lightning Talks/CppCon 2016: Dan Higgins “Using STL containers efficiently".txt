Title: CppCon 2016: Dan Higgins “Using STL containers efficiently"
Publication date: 2016-10-07
Playlist: CppCon 2016 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,089 --> 00:00:05,460
let's talk about SEL so um are you

00:00:02,850 --> 00:00:07,049
writing good okay cool so one of my

00:00:05,460 --> 00:00:09,349
background so I was in triple games and

00:00:07,049 --> 00:00:11,280
then I went to math works and did and

00:00:09,349 --> 00:00:12,780
brought a buncha game developers and

00:00:11,280 --> 00:00:14,549
math works we went to science and it was

00:00:12,780 --> 00:00:16,680
really cool because we're able to bring

00:00:14,549 --> 00:00:18,359
efficiency and speed and in games you

00:00:16,680 --> 00:00:21,990
have to do a lot of zine patterns and as

00:00:18,359 --> 00:00:23,910
it's pretty hardcore so doing I've seen

00:00:21,990 --> 00:00:26,039
a lot of performance mistakes in legacy

00:00:23,910 --> 00:00:27,060
code and in real time code and I'm just

00:00:26,039 --> 00:00:29,580
going to kind of go over some of the

00:00:27,060 --> 00:00:30,720
things that we can do every day so this

00:00:29,580 --> 00:00:32,730
isn't really like here's this high level

00:00:30,720 --> 00:00:34,590
optimization to do you know which is how

00:00:32,730 --> 00:00:36,059
we know all optimization really should

00:00:34,590 --> 00:00:38,030
be but there are things you can do every

00:00:36,059 --> 00:00:40,739
day and you're coding to make sure your

00:00:38,030 --> 00:00:43,160
code is fast you don't die by thousand

00:00:40,739 --> 00:00:45,629
cuts so again you know games as very

00:00:43,160 --> 00:00:47,219
performant industry if you're looking if

00:00:45,629 --> 00:00:49,590
you guys are looking for a really good

00:00:47,219 --> 00:00:51,300
plus loss game developers like go and

00:00:49,590 --> 00:00:53,250
check out games go recruit people from

00:00:51,300 --> 00:00:55,350
games because industry changes so much

00:00:53,250 --> 00:00:57,449
so you can find some super good des

00:00:55,350 --> 00:00:59,940
there so an example you know math works

00:00:57,449 --> 00:01:01,530
we had a graphical thing and moving a

00:00:59,940 --> 00:01:03,120
block across screen took a millisecond

00:01:01,530 --> 00:01:04,850
the guy's like this is really good it

00:01:03,120 --> 00:01:07,049
only takes millisecond lights you know

00:01:04,850 --> 00:01:08,610
millisecond gains it's an eternity like

00:01:07,049 --> 00:01:10,170
oh my gosh you know now you move a

00:01:08,610 --> 00:01:12,540
thousand blocks and a game the the

00:01:10,170 --> 00:01:14,729
application freezes for a second so like

00:01:12,540 --> 00:01:17,490
you have a lot of real time as a totally

00:01:14,729 --> 00:01:19,650
different mentality so every every line

00:01:17,490 --> 00:01:21,659
of code really does matter so common

00:01:19,650 --> 00:01:23,250
mistakes I see obviously copying objects

00:01:21,659 --> 00:01:24,930
there's a lot of things like this is

00:01:23,250 --> 00:01:26,670
small object now it doesn't matter this

00:01:24,930 --> 00:01:28,530
is a shared pointer I can just copy

00:01:26,670 --> 00:01:30,329
instead of pass by reference like like

00:01:28,530 --> 00:01:33,390
pass but do that do the easy stuff you

00:01:30,329 --> 00:01:35,220
know pass by reference don't don't have

00:01:33,390 --> 00:01:37,380
any extra work done unless you must

00:01:35,220 --> 00:01:39,090
actually gives you benefit and I find

00:01:37,380 --> 00:01:40,979
more often than not people kind of just

00:01:39,090 --> 00:01:43,049
feel like own today's age I don't need

00:01:40,979 --> 00:01:44,280
to obviously choosing the wrong data

00:01:43,049 --> 00:01:46,439
structure we all know that from like

00:01:44,280 --> 00:01:47,729
cs101 that you know you need to make one

00:01:46,439 --> 00:01:49,320
matches like if you're going to iterate

00:01:47,729 --> 00:01:50,939
or something a lot don't pick something

00:01:49,320 --> 00:01:52,170
that has memory scattered all over the

00:01:50,939 --> 00:01:53,970
place don't have a map or something like

00:01:52,170 --> 00:01:57,119
that you need memory that's you know

00:01:53,970 --> 00:01:59,399
next to each other a big one I found

00:01:57,119 --> 00:02:00,990
especially in legacy code bases is doing

00:01:59,399 --> 00:02:02,640
duplicate work right I look up a

00:02:00,990 --> 00:02:03,960
variable and I look it up and I look it

00:02:02,640 --> 00:02:05,009
up I look it up and the same one over

00:02:03,960 --> 00:02:06,479
and over and over and like maybe they do

00:02:05,009 --> 00:02:08,369
it in three different functions maybe

00:02:06,479 --> 00:02:09,899
the functions are you know spread out

00:02:08,369 --> 00:02:11,879
but maybe they're call from like the

00:02:09,899 --> 00:02:13,110
same type of area like there there's a

00:02:11,879 --> 00:02:16,170
lot of duplicate work

00:02:13,110 --> 00:02:17,610
that can happen in a code that that we

00:02:16,170 --> 00:02:19,860
can avoid that makes a big difference

00:02:17,610 --> 00:02:21,900
and you know optimizer does well I

00:02:19,860 --> 00:02:23,580
remember interviewing somewhere for an

00:02:21,900 --> 00:02:25,080
optimization position and every answer

00:02:23,580 --> 00:02:26,520
was like well the optimizer does that

00:02:25,080 --> 00:02:28,380
like well how do you how do you make

00:02:26,520 --> 00:02:30,150
this faster the optimizer takes care of

00:02:28,380 --> 00:02:31,620
it like optimizer doesn't isn't like

00:02:30,150 --> 00:02:33,360
this miracle worker right they do some

00:02:31,620 --> 00:02:36,480
really cool stuff but they don't solve

00:02:33,360 --> 00:02:38,130
everything like we can do a lot so

00:02:36,480 --> 00:02:39,570
simple thing on vectors

00:02:38,130 --> 00:02:42,090
you know ICL vectors like vector is like

00:02:39,570 --> 00:02:44,610
almost always best choice not saying I

00:02:42,090 --> 00:02:46,230
need a map right the other x word you

00:02:44,610 --> 00:02:48,360
need a map but like vector you can

00:02:46,230 --> 00:02:49,800
actually use you can do some tricks to

00:02:48,360 --> 00:02:51,270
make it acts sort of like a list when

00:02:49,800 --> 00:02:53,610
you need to list one of them is

00:02:51,270 --> 00:02:55,440
something eggs a lot which is how to

00:02:53,610 --> 00:02:56,610
race from the middle so like you know

00:02:55,440 --> 00:02:57,720
you don't want to like I have a million

00:02:56,610 --> 00:02:59,100
items and directs the middle and then I

00:02:57,720 --> 00:03:00,239
grab those things I move them together

00:02:59,100 --> 00:03:02,970
again like we don't want to do that

00:03:00,239 --> 00:03:04,350
right if it's unordered you can do

00:03:02,970 --> 00:03:05,970
something really simple which is just a

00:03:04,350 --> 00:03:07,560
copy last item on to where you're

00:03:05,970 --> 00:03:09,090
deleting it and then pop back right you

00:03:07,560 --> 00:03:11,970
don't have any reallocation it's really

00:03:09,090 --> 00:03:13,380
quick so I put a bunch of these types of

00:03:11,970 --> 00:03:15,510
template functions in there so I can

00:03:13,380 --> 00:03:19,530
just say hey I want to race I want to do

00:03:15,510 --> 00:03:20,910
a faster race or not and the other one I

00:03:19,530 --> 00:03:22,890
put one like we're going to if you're

00:03:20,910 --> 00:03:24,600
going to lock a mutex and do some like a

00:03:22,890 --> 00:03:26,250
copy of a vector just do a swap like

00:03:24,600 --> 00:03:27,600
have it have a dummy vector just just

00:03:26,250 --> 00:03:30,650
swap them right you don't need to do a

00:03:27,600 --> 00:03:33,060
full deep copy and keep the mutex lock

00:03:30,650 --> 00:03:35,549
now we're at one really big thing for

00:03:33,060 --> 00:03:36,690
legacy code so math works you know 100

00:03:35,549 --> 00:03:39,660
million lines of code think things like

00:03:36,690 --> 00:03:41,670
that was on in maps they have things

00:03:39,660 --> 00:03:43,290
that they would look up the same item

00:03:41,670 --> 00:03:45,120
millions and millions of times that the

00:03:43,290 --> 00:03:46,530
data would never change and the answer

00:03:45,120 --> 00:03:49,440
is always the same one they're looking

00:03:46,530 --> 00:03:51,510
up so you know I built an STD map that

00:03:49,440 --> 00:03:53,850
would track that usage so it just simply

00:03:51,510 --> 00:03:56,250
produced that so like you know why like

00:03:53,850 --> 00:03:59,760
let's just find the ones that produce

00:03:56,250 --> 00:04:01,230
the the problems and then you know then

00:03:59,760 --> 00:04:02,760
I can replace it with a last recently

00:04:01,230 --> 00:04:04,709
used map so then a little tiny cache

00:04:02,760 --> 00:04:06,600
which just says hey if nothing's changed

00:04:04,709 --> 00:04:08,519
in the map I just keep the last thing

00:04:06,600 --> 00:04:10,230
you looked up and the last key you used

00:04:08,519 --> 00:04:11,700
and if there's same then I'd only have

00:04:10,230 --> 00:04:13,650
to do a search so it's like it's not

00:04:11,700 --> 00:04:15,239
really a you know it doesn't make sense

00:04:13,650 --> 00:04:17,250
for things that are volatile or things

00:04:15,239 --> 00:04:18,510
that your cheat you're searching to all

00:04:17,250 --> 00:04:20,040
these other different things all times

00:04:18,510 --> 00:04:22,049
which is why I need to kind of do the

00:04:20,040 --> 00:04:24,110
statistics and see if it works but if it

00:04:22,049 --> 00:04:25,430
does it's a huge boost to

00:04:24,110 --> 00:04:26,449
like it's almost like a free beating

00:04:25,430 --> 00:04:27,110
right because you can be in the middle

00:04:26,449 --> 00:04:28,580
of a system

00:04:27,110 --> 00:04:30,080
you know when the arguments was like

00:04:28,580 --> 00:04:31,370
more scripting engine so who knows what

00:04:30,080 --> 00:04:34,310
data we're going to have like everything

00:04:31,370 --> 00:04:35,960
has a pattern so a lot of people don't

00:04:34,310 --> 00:04:38,210
don't make assumptions that just because

00:04:35,960 --> 00:04:40,310
it's kind of random things that you

00:04:38,210 --> 00:04:43,340
think that it will never have a type of

00:04:40,310 --> 00:04:44,780
pattern do the research and then this is

00:04:43,340 --> 00:04:46,430
a really fun thing everybody's got that

00:04:44,780 --> 00:04:47,990
one thing they wrote that they love in a

00:04:46,430 --> 00:04:50,180
copyright template I can't really talk

00:04:47,990 --> 00:04:52,639
too much about it except for because it

00:04:50,180 --> 00:04:54,349
suits so long but you know when people

00:04:52,639 --> 00:04:55,669
don't want to return by reference they

00:04:54,349 --> 00:04:57,050
don't they have I have a million item

00:04:55,669 --> 00:04:58,129
object I don't you know I don't want to

00:04:57,050 --> 00:05:00,259
return my reference because the state

00:04:58,129 --> 00:05:02,569
might be gone like this copyright

00:05:00,259 --> 00:05:05,479
template was great because I can return

00:05:02,569 --> 00:05:07,280
this it does a atomic reference counting

00:05:05,479 --> 00:05:09,289
and the moment someone needs a writable

00:05:07,280 --> 00:05:10,849
version of Forks so that way it's like a

00:05:09,289 --> 00:05:12,500
really great way to go into a legacy

00:05:10,849 --> 00:05:14,090
code base and start improving it without

00:05:12,500 --> 00:05:15,680
having to understand all the state and

00:05:14,090 --> 00:05:17,330
everything so I'm like hey if it changes

00:05:15,680 --> 00:05:19,759
great then you got your copy if it

00:05:17,330 --> 00:05:21,409
doesn't it's a freebie because it's just

00:05:19,759 --> 00:05:23,479
a reference count they got to return by

00:05:21,409 --> 00:05:26,449
and we don't have to do all this copying

00:05:23,479 --> 00:05:27,199
of big data structures around so I think

00:05:26,449 --> 00:05:29,860
that's all I have

00:05:27,199 --> 00:05:29,860

YouTube URL: https://www.youtube.com/watch?v=oBbGC-sUYVA


