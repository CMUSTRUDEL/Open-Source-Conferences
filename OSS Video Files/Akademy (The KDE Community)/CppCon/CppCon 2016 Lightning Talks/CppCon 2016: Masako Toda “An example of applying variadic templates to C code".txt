Title: CppCon 2016: Masako Toda “An example of applying variadic templates to C code"
Publication date: 2016-10-08
Playlist: CppCon 2016 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,770 --> 00:00:10,130
today I try to demonstrate example to

00:00:05,580 --> 00:00:11,250
apply variadic template to C style code

00:00:10,130 --> 00:00:16,410
okay

00:00:11,250 --> 00:00:18,869
and we could go so we're good to go so

00:00:16,410 --> 00:00:22,560
when I learned about body attack

00:00:18,869 --> 00:00:26,310
template my first impression was oh nice

00:00:22,560 --> 00:00:29,279
but when and where can I actually use it

00:00:26,310 --> 00:00:33,840
and I didn't have a good chance to use

00:00:29,279 --> 00:00:37,440
it for a while and but couple months ago

00:00:33,840 --> 00:00:40,559
when I was using cycle light library I

00:00:37,440 --> 00:00:43,469
realized it's very useful and I want I

00:00:40,559 --> 00:00:48,960
wanted to share my experience with

00:00:43,469 --> 00:00:52,649
everyone here actually later I found

00:00:48,960 --> 00:00:55,980
very good video called modern psycho

00:00:52,649 --> 00:00:59,940
light with modern C++ by mr. Kinney car

00:00:55,980 --> 00:01:03,359
and he'll be talked about a lot more

00:00:59,940 --> 00:01:06,330
than my talk but I think I can add one

00:01:03,359 --> 00:01:12,900
more trick and introduce one picture

00:01:06,330 --> 00:01:16,080
from C++ 17 okay this is a program to

00:01:12,900 --> 00:01:19,020
think about imagine there's a sequel

00:01:16,080 --> 00:01:22,979
like database with student tab student

00:01:19,020 --> 00:01:26,310
table and teachers table and I need to

00:01:22,979 --> 00:01:31,430
write functions to insert records into

00:01:26,310 --> 00:01:31,430
these tables by using C collate library

00:01:31,790 --> 00:01:40,290
so here is the C style solution just as

00:01:36,900 --> 00:01:43,079
just you to see Colette API directly let

00:01:40,290 --> 00:01:48,299
me go through and check if there a base

00:01:43,079 --> 00:01:51,420
is open and called prepare function and

00:01:48,299 --> 00:01:54,630
called bind function for the first

00:01:51,420 --> 00:01:58,350
argument and call another bind function

00:01:54,630 --> 00:02:00,570
for the second argument and finally

00:01:58,350 --> 00:02:03,990
kaustubh function it's super

00:02:00,570 --> 00:02:06,649
straightforward and pretty much the same

00:02:03,990 --> 00:02:10,470
for teachers function a teacher's table

00:02:06,649 --> 00:02:13,349
except teachers table had three columns

00:02:10,470 --> 00:02:18,030
so I had to call

00:02:13,349 --> 00:02:21,319
the functions three times Oh in this

00:02:18,030 --> 00:02:24,629
talk just to get to the point quickly I

00:02:21,319 --> 00:02:28,579
introduced open overloaded binder

00:02:24,629 --> 00:02:33,030
function here and also I forget about

00:02:28,579 --> 00:02:36,870
prepare part and prepare part and step

00:02:33,030 --> 00:02:43,290
part and focus on generalizing binding

00:02:36,870 --> 00:02:46,319
part so my goal is to write generic

00:02:43,290 --> 00:02:52,079
could bind all function that would

00:02:46,319 --> 00:02:56,669
replace binding section to something

00:02:52,079 --> 00:03:00,480
like this and it looks simple but before

00:02:56,669 --> 00:03:04,650
C++ 11 it wasn't so easy to implement

00:03:00,480 --> 00:03:08,040
because um the number of argument can be

00:03:04,650 --> 00:03:10,189
so many and data type of each Ahmed

00:03:08,040 --> 00:03:14,459
Mayberry

00:03:10,189 --> 00:03:19,229
so with biotics template here is the one

00:03:14,459 --> 00:03:22,139
way to implement this is for the

00:03:19,229 --> 00:03:25,049
correlation and this determination and

00:03:22,139 --> 00:03:27,540
this is the expansion part and inside

00:03:25,049 --> 00:03:30,599
they're called bind function for the

00:03:27,540 --> 00:03:33,720
first argument and expand template

00:03:30,599 --> 00:03:37,949
recursively for the rest of argument it

00:03:33,720 --> 00:03:42,859
works well and I was happy but my boss

00:03:37,949 --> 00:03:45,750
my boss told me there's a better way and

00:03:42,859 --> 00:03:49,079
he said I student I shouldn't read

00:03:45,750 --> 00:03:52,829
complicated to recursive expansion but I

00:03:49,079 --> 00:03:57,509
should be doing parameter park expansion

00:03:52,829 --> 00:04:02,009
like this just this one line and so let

00:03:57,509 --> 00:04:05,569
me explain what is one line does call

00:04:02,009 --> 00:04:10,049
find a function for each argument and

00:04:05,569 --> 00:04:13,530
returns a list of zero actually the list

00:04:10,049 --> 00:04:19,219
of the zero is a byproduct so we can

00:04:13,530 --> 00:04:19,219
ignore it that's what this boyd implies

00:04:20,120 --> 00:04:27,120
with hold expression in c++ 17 actually

00:04:25,979 --> 00:04:31,919
it gets even better

00:04:27,120 --> 00:04:36,000
we can't just write this and there is no

00:04:31,919 --> 00:04:40,889
by-product or nothing and it's really

00:04:36,000 --> 00:04:44,030
clear so I really like it that's it

00:04:40,889 --> 00:04:44,030

YouTube URL: https://www.youtube.com/watch?v=N1cWgqmWSio


