Title: CppCon 2018: Brian Ruth “std::basic_string: for more than just text”
Publication date: 2018-11-11
Playlist: CppCon 2018 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:03,659
okay since I had no bio my name is Brian

00:00:02,010 --> 00:00:07,080
Ruth died working embedded systems for

00:00:03,659 --> 00:00:09,990
Garmin so my talks about Stan our basic

00:00:07,080 --> 00:00:11,610
dream for more than just text so I want

00:00:09,990 --> 00:00:14,070
you to think about you know back when

00:00:11,610 --> 00:00:15,030
you first were introduced to C++ and

00:00:14,070 --> 00:00:16,920
just kind of how you thought about

00:00:15,030 --> 00:00:20,400
things and selected the containers that

00:00:16,920 --> 00:00:22,250
you use the other subtitle is how to

00:00:20,400 --> 00:00:24,869
write code and no one will understand

00:00:22,250 --> 00:00:26,939
given an arbitrary length list of bit

00:00:24,869 --> 00:00:28,890
States modify the list by toggling the

00:00:26,939 --> 00:00:31,170
state of each bit now if you just start

00:00:28,890 --> 00:00:32,820
out the basic choice is always gonna be

00:00:31,170 --> 00:00:34,260
vector because you don't know how long

00:00:32,820 --> 00:00:36,510
the list of bits is gonna be and always

00:00:34,260 --> 00:00:38,700
choose vector and a bit can either be on

00:00:36,510 --> 00:00:41,250
or off so bull was you know the obvious

00:00:38,700 --> 00:00:43,230
representation for X then that gives you

00:00:41,250 --> 00:00:46,140
something like this throw in a nice

00:00:43,230 --> 00:00:49,440
range for and yeah this this should work

00:00:46,140 --> 00:00:52,680
right well mmm this is where you find

00:00:49,440 --> 00:00:54,719
out about vector bool go to compile it

00:00:52,680 --> 00:00:56,340
and you get an error like this and it

00:00:54,719 --> 00:00:57,870
really doesn't tell you why vector of

00:00:56,340 --> 00:00:59,699
rule doesn't compile that it's not a

00:00:57,870 --> 00:01:01,859
container and that the things that it's

00:00:59,699 --> 00:01:03,680
returning aren't really bulls they're

00:01:01,859 --> 00:01:09,210
kind of things that pretend to be bulls

00:01:03,680 --> 00:01:11,430
but okay so vector table rule aside why

00:01:09,210 --> 00:01:13,650
do we choose vector why is that the

00:01:11,430 --> 00:01:15,659
default container container type well

00:01:13,650 --> 00:01:18,299
first of all it's contiguous memory so

00:01:15,659 --> 00:01:20,670
it's easy to allocate you can iterate

00:01:18,299 --> 00:01:23,580
through it easier you can pass it to see

00:01:20,670 --> 00:01:25,200
functions it also grows as needed so if

00:01:23,580 --> 00:01:27,030
you don't need much memory you can have

00:01:25,200 --> 00:01:28,439
it short if you need more you can make

00:01:27,030 --> 00:01:30,240
it longer and then it can make it short

00:01:28,439 --> 00:01:32,430
again once you don't need it and you

00:01:30,240 --> 00:01:33,930
also can get random access so it

00:01:32,430 --> 00:01:35,100
actually plays well will see as well by

00:01:33,930 --> 00:01:37,110
having pointers to little different

00:01:35,100 --> 00:01:38,479
parts and you know playing with the

00:01:37,110 --> 00:01:40,799
functions like that

00:01:38,479 --> 00:01:42,600
so what other container has these

00:01:40,799 --> 00:01:45,360
properties I think I kind of buried the

00:01:42,600 --> 00:01:48,960
lead with the title of it but standard

00:01:45,360 --> 00:01:51,540
basic string most people think of it

00:01:48,960 --> 00:01:54,630
just for character representation but

00:01:51,540 --> 00:01:56,700
really it is a templated container that

00:01:54,630 --> 00:01:59,100
has all those properties and it turns

00:01:56,700 --> 00:02:02,390
out just change the type does exactly

00:01:59,100 --> 00:02:02,390
what you expect it to do

00:02:03,290 --> 00:02:07,320
but what about real types

00:02:05,430 --> 00:02:09,090
I mean boolean that's not much different

00:02:07,320 --> 00:02:09,869
than a than a character right so let's

00:02:09,090 --> 00:02:11,490
have a direction

00:02:09,869 --> 00:02:14,250
they're usually names so you know what

00:02:11,490 --> 00:02:15,780
the bits do and let's just modify our

00:02:14,250 --> 00:02:17,970
task because it doesn't make much sense

00:02:15,780 --> 00:02:20,210
to toggle input bits so we just want to

00:02:17,970 --> 00:02:23,250
toggle output bits well that works too

00:02:20,210 --> 00:02:24,900
so you know in class bit Direction you

00:02:23,250 --> 00:02:27,540
got a string in there for a name a

00:02:24,900 --> 00:02:29,580
struct you can throw it in there and it

00:02:27,540 --> 00:02:32,430
works almost exactly the same as a

00:02:29,580 --> 00:02:34,710
vector but another thing that's kind of

00:02:32,430 --> 00:02:37,560
cool is when you use basic string you

00:02:34,710 --> 00:02:39,690
also get to use the string API so one of

00:02:37,560 --> 00:02:42,570
the things that done in the past is you

00:02:39,690 --> 00:02:44,580
I generate time stamps based on a packet

00:02:42,570 --> 00:02:46,260
index and then you want to aggregate

00:02:44,580 --> 00:02:48,750
those time stamps together and pass them

00:02:46,260 --> 00:02:51,870
to some see API to manipulate them in

00:02:48,750 --> 00:02:55,290
some way so vector has a very cumbersome

00:02:51,870 --> 00:02:58,890
append syntax so I couldn't find a way

00:02:55,290 --> 00:03:01,770
to make it not using ranges to not have

00:02:58,890 --> 00:03:04,140
a named temporary in order to append to

00:03:01,770 --> 00:03:06,570
a vector and the slide also demonstrates

00:03:04,140 --> 00:03:09,870
where I fall on the Const and auto side

00:03:06,570 --> 00:03:14,130
of things but as you go through do the

00:03:09,870 --> 00:03:16,290
inserts call the see it works changing a

00:03:14,130 --> 00:03:17,760
vector to a string allows a more

00:03:16,290 --> 00:03:20,519
straightforward syntax that other

00:03:17,760 --> 00:03:22,500
languages are used to so you can

00:03:20,519 --> 00:03:25,350
actually use the plus equals you can

00:03:22,500 --> 00:03:29,340
call it to data and it really performs

00:03:25,350 --> 00:03:31,530
just as well as the vector does but can

00:03:29,340 --> 00:03:38,760
basic string actually be more performant

00:03:31,530 --> 00:03:39,959
than a vector thank you vectors always

00:03:38,760 --> 00:03:41,820
need to call a new and delete if you

00:03:39,959 --> 00:03:44,040
want to do anything with them so you can

00:03:41,820 --> 00:03:46,680
see right here just creating a vector of

00:03:44,040 --> 00:03:48,120
points the size is obviously three but

00:03:46,680 --> 00:03:51,870
even with optimizations turned on you

00:03:48,120 --> 00:03:55,290
got calls to new and delete small string

00:03:51,870 --> 00:03:58,700
optimization happens even for types that

00:03:55,290 --> 00:03:58,700
aren't strings

00:03:58,709 --> 00:04:02,349
so here it sees right through the fact

00:04:00,849 --> 00:04:04,300
that there are three points your turns

00:04:02,349 --> 00:04:06,730
the sizes three compiles down to movies

00:04:04,300 --> 00:04:08,800
three so like lob em and boost who tried

00:04:06,730 --> 00:04:10,810
to come up with like you know small

00:04:08,800 --> 00:04:14,200
vector optimizations string you get it

00:04:10,810 --> 00:04:15,250
for free so it's only the beginning of

00:04:14,200 --> 00:04:17,470
the interesting things that you can do a

00:04:15,250 --> 00:04:20,109
string I didn't go into string views or

00:04:17,470 --> 00:04:22,840
sub strings or any of the fine and

00:04:20,109 --> 00:04:24,040
Replace type operations there's some

00:04:22,840 --> 00:04:26,680
really cool things you can do when you

00:04:24,040 --> 00:04:28,570
take basic string beyond text but I'm

00:04:26,680 --> 00:04:30,010
not advocating that we get rid of vector

00:04:28,570 --> 00:04:32,910
but strings a lot more powerful than

00:04:30,010 --> 00:04:32,910
people get a credit for

00:04:33,320 --> 00:04:36,620
[Applause]

00:04:34,220 --> 00:04:39,100
[Music]

00:04:36,620 --> 00:04:39,100

YouTube URL: https://www.youtube.com/watch?v=SDJImePyftY


