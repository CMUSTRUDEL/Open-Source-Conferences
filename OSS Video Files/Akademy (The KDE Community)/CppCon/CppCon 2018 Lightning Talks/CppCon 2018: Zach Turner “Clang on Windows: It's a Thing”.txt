Title: CppCon 2018: Zach Turner “Clang on Windows: It's a Thing”
Publication date: 2018-11-10
Playlist: CppCon 2018 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,030 --> 00:00:03,210
so how many people here can I get a show

00:00:01,589 --> 00:00:06,569
of hands like develop software that

00:00:03,210 --> 00:00:08,099
targets Windows all right like how many

00:00:06,569 --> 00:00:10,230
people that just raised their hand also

00:00:08,099 --> 00:00:13,259
develop software that does not target

00:00:10,230 --> 00:00:15,900
Windows good so hopefully that you'll

00:00:13,259 --> 00:00:17,699
find this interesting so on well first

00:00:15,900 --> 00:00:19,350
let's look at my direct can you can you

00:00:17,699 --> 00:00:22,350
read the text is it like a good size

00:00:19,350 --> 00:00:23,970
okay cool so you can see that I only

00:00:22,350 --> 00:00:25,920
have a CPP file here in a couple of

00:00:23,970 --> 00:00:28,769
shell scripts and I'm gonna look at this

00:00:25,920 --> 00:00:30,539
CPP file this is Windows code hopefully

00:00:28,769 --> 00:00:36,270
we can all agree that this is a Windows

00:00:30,539 --> 00:00:37,800
code and as you can see I'm not on a

00:00:36,270 --> 00:00:40,559
Windows machine I'm on you know it's

00:00:37,800 --> 00:00:45,120
Linux and so I have this shell script

00:00:40,559 --> 00:00:48,320
here which you can see runs clang CL and

00:00:45,120 --> 00:00:56,780
L LD link and I'm just gonna run this

00:00:48,320 --> 00:01:00,960
shell stroke see if I can do this

00:00:56,780 --> 00:01:02,820
okay you did something so ok you can see

00:01:00,960 --> 00:01:06,570
now there's an exe file and obj file in

00:01:02,820 --> 00:01:12,240
a PDB file which are usually Windows

00:01:06,570 --> 00:01:14,700
programs and if I run this command to

00:01:12,240 --> 00:01:16,140
see what they are it says that well

00:01:14,700 --> 00:01:18,060
first of all it says that clang Co and I

00:01:16,140 --> 00:01:19,680
will do link our elf executables so

00:01:18,060 --> 00:01:21,810
there's no wine involved here there's no

00:01:19,680 --> 00:01:23,670
like trickery like these are native

00:01:21,810 --> 00:01:27,270
Linux programs and the files that it

00:01:23,670 --> 00:01:30,540
produced a p32 executable a cough object

00:01:27,270 --> 00:01:34,110
file and an MS PC program database so

00:01:30,540 --> 00:01:37,799
let's see and I also conveniently print

00:01:34,110 --> 00:01:39,570
it out md5 sums of the files which we

00:01:37,799 --> 00:01:45,960
can try to remember I don't know 8 to F

00:01:39,570 --> 00:01:47,340
D F 0 F 3 so I'm gonna go over here to

00:01:45,960 --> 00:01:48,540
my Windows machine this is actually my

00:01:47,340 --> 00:01:51,149
home machine I'm connected through

00:01:48,540 --> 00:01:52,890
remote desktop and we can see code that

00:01:51,149 --> 00:01:54,600
looks pretty much the same but let's

00:01:52,890 --> 00:01:56,009
make sure that we're actually doing the

00:01:54,600 --> 00:02:02,189
same thing this one might be a little

00:01:56,009 --> 00:02:04,520
smaller hopefully we can still see this

00:02:02,189 --> 00:02:04,520
but

00:02:07,679 --> 00:02:12,160
so I don't know if you can see this or

00:02:09,640 --> 00:02:15,130
not but the md5 Simon Says 8 to f DB 8

00:02:12,160 --> 00:02:20,530
whatever it's the same md5 sum and we'll

00:02:15,130 --> 00:02:22,450
see the same thing if I if I if I do it

00:02:20,530 --> 00:02:24,700
on the PDB F 0 F 3 like that's what we

00:02:22,450 --> 00:02:26,650
just said so I kind of just cheated here

00:02:24,700 --> 00:02:29,140
because I built the program on Linux but

00:02:26,650 --> 00:02:30,310
I didn't copy the files over but I don't

00:02:29,140 --> 00:02:31,420
know if anybody notice that I kind of

00:02:30,310 --> 00:02:32,440
pulled a fast one here I just

00:02:31,420 --> 00:02:35,170
demonstrated that we have build

00:02:32,440 --> 00:02:36,850
determinism because these files were

00:02:35,170 --> 00:02:39,970
already here and I just built it and

00:02:36,850 --> 00:02:42,030
they have the same md5 sum so that's I

00:02:39,970 --> 00:02:45,100
don't know I think it's a good feature

00:02:42,030 --> 00:02:51,550
so I'm gonna hit f5 and see what happens

00:02:45,100 --> 00:02:56,860
well first let's see ok I have a break

00:02:51,550 --> 00:02:57,820
point so I'm gonna hit f5 or I don't

00:02:56,860 --> 00:03:00,640
know what that's doing all right let's

00:02:57,820 --> 00:03:14,410
let's try it differently start debugging

00:03:00,640 --> 00:03:16,780
oh nice ok here we go

00:03:14,410 --> 00:03:18,489
so I don't know if you can see this but

00:03:16,780 --> 00:03:20,110
we have like we have local variables we

00:03:18,489 --> 00:03:22,780
have watch window and stuff there's

00:03:20,110 --> 00:03:24,519
there's real stuff in here you know I

00:03:22,780 --> 00:03:26,560
can step over I can do everything so

00:03:24,519 --> 00:03:29,590
this is like it's a real Windows program

00:03:26,560 --> 00:03:32,080
it's got a real PDB file and I built

00:03:29,590 --> 00:03:33,910
this on Linux and I can debug it in

00:03:32,080 --> 00:03:35,970
Visual Studio and this is something that

00:03:33,910 --> 00:03:37,780
until recently has not been possible

00:03:35,970 --> 00:03:40,510
that's one of the things we've worked

00:03:37,780 --> 00:03:42,730
hard on is making clang work on Windows

00:03:40,510 --> 00:03:45,790
well work cross-platform we can do cross

00:03:42,730 --> 00:03:49,000
builds but there's other reasons that

00:03:45,790 --> 00:03:51,910
you might want to use clang we get

00:03:49,000 --> 00:03:53,769
faster link times if you use LD and when

00:03:51,910 --> 00:03:56,519
I mean faster I mean like a literal

00:03:53,769 --> 00:03:58,900
order of magnitude faster like I know

00:03:56,519 --> 00:04:01,329
when we built we built this for Chrome

00:03:58,900 --> 00:04:03,370
and chrome was originally taking up to

00:04:01,329 --> 00:04:06,489
five minutes to link like blink or

00:04:03,370 --> 00:04:10,269
yellow with LG it takes about 30 seconds

00:04:06,489 --> 00:04:14,110
using the same switches clang Co its

00:04:10,269 --> 00:04:15,819
drop-in compatible with CL DXE so if you

00:04:14,110 --> 00:04:20,160
look at my if you look at my build

00:04:15,819 --> 00:04:21,900
script you can see I'm running

00:04:20,160 --> 00:04:26,790
clang CL but these are M SVC

00:04:21,900 --> 00:04:28,140
commandlineoptions /z 7 / c my LD link

00:04:26,790 --> 00:04:30,240
command line looks exactly like a link

00:04:28,140 --> 00:04:33,300
dot exe command line slash debug full

00:04:30,240 --> 00:04:34,560
default live subsystem windows so this

00:04:33,300 --> 00:04:35,880
is literally you can just drop the

00:04:34,560 --> 00:04:40,050
executable on your machine and it just

00:04:35,880 --> 00:04:41,640
works so why did we do this like I

00:04:40,050 --> 00:04:43,560
mentioned faster link times it's nice to

00:04:41,640 --> 00:04:45,870
have one tool chain on all your

00:04:43,560 --> 00:04:48,210
platforms one build system simplifies

00:04:45,870 --> 00:04:49,620
configuration management and it's open

00:04:48,210 --> 00:04:51,960
source we can turn around and we can

00:04:49,620 --> 00:04:53,880
make changes to the compiler in a week

00:04:51,960 --> 00:04:55,320
where it used to take a year I mean

00:04:53,880 --> 00:04:57,480
obviously Microsoft has gotten better

00:04:55,320 --> 00:04:58,770
about releasing fixes more rapidly now

00:04:57,480 --> 00:05:00,480
but it used to take a year or two to get

00:04:58,770 --> 00:05:03,300
compiler fixes and now we can turn that

00:05:00,480 --> 00:05:05,400
around in like a week real-world users

00:05:03,300 --> 00:05:06,690
of clang and LD obviously chrome is

00:05:05,400 --> 00:05:08,130
shipping like if you're using Chrome

00:05:06,690 --> 00:05:11,430
today it's built with clang in its

00:05:08,130 --> 00:05:13,510
length with LD Firefox does shipping

00:05:11,430 --> 00:05:20,600
with

00:05:13,510 --> 00:05:20,600

YouTube URL: https://www.youtube.com/watch?v=WLdid9PvaPo


