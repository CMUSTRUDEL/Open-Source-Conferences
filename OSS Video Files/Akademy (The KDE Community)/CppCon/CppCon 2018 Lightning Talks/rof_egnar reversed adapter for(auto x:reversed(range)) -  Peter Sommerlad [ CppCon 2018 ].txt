Title: rof_egnar reversed adapter for(auto x:reversed(range)) -  Peter Sommerlad [ CppCon 2018 ]
Publication date: 2018-11-11
Playlist: CppCon 2018 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:00,060 --> 00:00:06,000
just a brief announcement some of you

00:00:03,000 --> 00:00:08,490
might be aware that we produce 90 E and

00:00:06,000 --> 00:00:11,309
there we have a plugin that actually

00:00:08,490 --> 00:00:13,230
adds Const to where it's applicable and

00:00:11,309 --> 00:00:15,750
that's the most important thing to get

00:00:13,230 --> 00:00:18,570
and if you actually care

00:00:15,750 --> 00:00:20,220
you can configure it to reflect reformat

00:00:18,570 --> 00:00:24,990
and refactor your code to either have

00:00:20,220 --> 00:00:28,230
east or west Kant's I'm still a sconce

00:00:24,990 --> 00:00:32,850
but you get the tooling for getting what

00:00:28,230 --> 00:00:36,090
you want so the big red button reversing

00:00:32,850 --> 00:00:38,610
range for let's stand the definition of

00:00:36,090 --> 00:00:40,920
range for and fortunately it's defined

00:00:38,610 --> 00:00:43,379
in a way that we have lifetime extension

00:00:40,920 --> 00:00:45,719
so we can actually iterate over a

00:00:43,379 --> 00:00:48,870
temporary on the right hand side of the

00:00:45,719 --> 00:00:55,530
colon of the range for which is a good

00:00:48,870 --> 00:00:58,140
thing to have but I started okay do a

00:00:55,530 --> 00:01:02,219
simple adapter for range for just

00:00:58,140 --> 00:01:10,020
calling our begin on begin and vice

00:01:02,219 --> 00:01:12,750
versa our end on end but temporaries mmm

00:01:10,020 --> 00:01:16,439
we need an hourly reference overload and

00:01:12,750 --> 00:01:20,490
we keep it as a reference in our adapter

00:01:16,439 --> 00:01:23,729
but just having a reference to temporary

00:01:20,490 --> 00:01:26,909
doesn't in an in a class as an extended

00:01:23,729 --> 00:01:28,799
lifetime so the trick that the standard

00:01:26,909 --> 00:01:33,360
does for the for statement is not

00:01:28,799 --> 00:01:36,450
working here and if you do something

00:01:33,360 --> 00:01:38,060
like that with initializer lists which

00:01:36,450 --> 00:01:43,200
are quite special

00:01:38,060 --> 00:01:45,869
it is doesn't even compile so C plus a

00:01:43,200 --> 00:01:49,799
17 the class template argument it action

00:01:45,869 --> 00:01:51,750
makes it happy we can cheat the compiler

00:01:49,799 --> 00:01:56,610
and say okay if we can initialize a list

00:01:51,750 --> 00:02:01,259
well just reverse the initializer list

00:01:56,610 --> 00:02:05,820
and don't take it as a reference or by

00:02:01,259 --> 00:02:08,720
our value reference is that okay

00:02:05,820 --> 00:02:12,050
[Music]

00:02:08,720 --> 00:02:14,330
temporaries just consider we make an

00:02:12,050 --> 00:02:16,940
array and return it by value with this

00:02:14,330 --> 00:02:21,190
which is happily happening with a suit

00:02:16,940 --> 00:02:24,500
array and then what you end up with oh

00:02:21,190 --> 00:02:26,990
we can return a temporary wrap it now

00:02:24,500 --> 00:02:29,510
reverse adapter and we have very

00:02:26,990 --> 00:02:32,600
interesting code because we now keep a

00:02:29,510 --> 00:02:35,120
reference to a temporary that might not

00:02:32,600 --> 00:02:38,420
know no longer be alive when we actually

00:02:35,120 --> 00:02:41,090
use it and call begin on that how can

00:02:38,420 --> 00:02:43,340
you test that actually I was able to use

00:02:41,090 --> 00:02:46,400
our grade REE to write a test case and

00:02:43,340 --> 00:02:48,140
this again in test case of generic code

00:02:46,400 --> 00:02:51,400
you write code you would never want to

00:02:48,140 --> 00:02:55,580
write in your real life

00:02:51,400 --> 00:02:58,040
so I actually count constructions and

00:02:55,580 --> 00:03:03,140
deletions and the assumption would be

00:02:58,040 --> 00:03:05,780
that within my reverse loop I always

00:03:03,140 --> 00:03:08,090
have more constructing going on than

00:03:05,780 --> 00:03:11,840
deletions happen so I have some object

00:03:08,090 --> 00:03:14,750
left it turns out no that's not the case

00:03:11,840 --> 00:03:17,000
why because while the loop is running my

00:03:14,750 --> 00:03:18,709
temporary already is extinct and I no

00:03:17,000 --> 00:03:21,320
longer have the objects I want to

00:03:18,709 --> 00:03:25,640
iterate over that I think can be fixed

00:03:21,320 --> 00:03:28,850
that I could I believe I'm not sure tell

00:03:25,640 --> 00:03:35,060
me my box so what I did is actually

00:03:28,850 --> 00:03:37,730
class template overload deduction ctat

00:03:35,060 --> 00:03:40,730
if I get a reference I keep that

00:03:37,730 --> 00:03:43,280
reference because I'm sure it lives they

00:03:40,730 --> 00:03:48,080
forgot a temporary I cheat because I

00:03:43,280 --> 00:03:50,390
instantiate my reversed adapter note the

00:03:48,080 --> 00:03:52,820
spelling something about that and keep

00:03:50,390 --> 00:03:56,330
the container by value by moving it in

00:03:52,820 --> 00:04:00,290
which is good I keep it now I own it so

00:03:56,330 --> 00:04:02,660
while the for loop range for extends the

00:04:00,290 --> 00:04:05,510
lifetime of the reverse temporary object

00:04:02,660 --> 00:04:10,610
and because it holds the container by

00:04:05,510 --> 00:04:12,110
value or it will live until the end of

00:04:10,610 --> 00:04:13,940
the for loop even if it comes from a

00:04:12,110 --> 00:04:18,169
temporary and again the special

00:04:13,940 --> 00:04:20,539
treatment of the initializer now the

00:04:18,169 --> 00:04:22,280
bonus slides so at the beginning by

00:04:20,539 --> 00:04:25,460
owners with the cons and the bone

00:04:22,280 --> 00:04:29,570
slide with the thing calling begin on

00:04:25,460 --> 00:04:32,660
temporary containers is very bad so I

00:04:29,570 --> 00:04:37,550
might write a proposal on actually

00:04:32,660 --> 00:04:40,330
banning begin on temporaries by deleting

00:04:37,550 --> 00:04:43,910
the corresponding overloading begin for

00:04:40,330 --> 00:04:47,450
having a draft qualified and overloading

00:04:43,910 --> 00:04:49,580
the r-value ref qualified things with

00:04:47,450 --> 00:04:53,270
the deleted version so it wouldn't

00:04:49,580 --> 00:04:55,100
actually be callable and we try to

00:04:53,270 --> 00:04:57,590
figure out over dinner if that will

00:04:55,100 --> 00:04:59,419
break existing code and I'm if anybody

00:04:57,590 --> 00:05:00,950
from google is here please crawl your

00:04:59,419 --> 00:05:04,970
codebase and figure out if it would

00:05:00,950 --> 00:05:07,160
break existing code there are they the

00:05:04,970 --> 00:05:09,400
ideas that I was told are bad by

00:05:07,160 --> 00:05:12,580
overloading the index operator also a

00:05:09,400 --> 00:05:12,580
little cover

00:05:13,030 --> 00:05:19,640

YouTube URL: https://www.youtube.com/watch?v=ALKpSBX2W-8


