Title: CppCon 2018: Matthew von Arx “Set it and forget it!”
Publication date: 2018-11-11
Playlist: CppCon 2018 Lightning Talks
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2018
—
Lightning Talk
— 
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:00,000 --> 00:00:04,529
all right I'm Matthew bun arcs and I'm

00:00:02,190 --> 00:00:09,330
presenting set it and forget it

00:00:04,529 --> 00:00:12,210
so congratulations when it goes so

00:00:09,330 --> 00:00:14,040
you've inherited about a four hundred

00:00:12,210 --> 00:00:15,990
thousand line codebase representing 40

00:00:14,040 --> 00:00:17,490
individually compiled see make projects

00:00:15,990 --> 00:00:18,869
but there's good news because you have

00:00:17,490 --> 00:00:21,029
an existing bug tracking system and

00:00:18,869 --> 00:00:22,800
redmine but the software has been

00:00:21,029 --> 00:00:24,689
managed by a single contract developer

00:00:22,800 --> 00:00:26,430
over the course of the past ten years he

00:00:24,689 --> 00:00:29,070
didn't use any consistent practices or

00:00:26,430 --> 00:00:30,960
organizes SBN branches and definitely

00:00:29,070 --> 00:00:34,309
didn't have a deployment strategy but

00:00:30,960 --> 00:00:37,079
don't worry it's only time for a release

00:00:34,309 --> 00:00:38,399
so you try and untangle what this

00:00:37,079 --> 00:00:40,440
deployment strategy might have been

00:00:38,399 --> 00:00:41,700
let's see what we've got the builds

00:00:40,440 --> 00:00:43,680
appear to be hand-stitched for each

00:00:41,700 --> 00:00:45,750
release cycle and furthermore that's

00:00:43,680 --> 00:00:47,460
only managed by a few thousand lines of

00:00:45,750 --> 00:00:49,829
bash and the more you look at it the

00:00:47,460 --> 00:00:51,420
more it begins to stink but don't worry

00:00:49,829 --> 00:00:54,829
we've got Jenkins here to clean it all

00:00:51,420 --> 00:00:57,629
up for us thanks buddy

00:00:54,829 --> 00:00:59,760
with Jenkins you can trigger your builds

00:00:57,629 --> 00:01:01,500
on VCS commits you can centralize your

00:00:59,760 --> 00:01:03,539
builds to a common server change your

00:01:01,500 --> 00:01:04,890
dependencies distribute to email into

00:01:03,539 --> 00:01:07,460
your corporate network and integrate

00:01:04,890 --> 00:01:09,659
with your existing bug tracking systems

00:01:07,460 --> 00:01:12,390
but what about that branch management

00:01:09,659 --> 00:01:14,330
strategy Oh what strategy branch is

00:01:12,390 --> 00:01:16,380
organic good luck organic food don't we

00:01:14,330 --> 00:01:17,820
don't worry we can get this mess

00:01:16,380 --> 00:01:19,830
straightened out introducing a

00:01:17,820 --> 00:01:24,060
conversion from SVN to get where we can

00:01:19,830 --> 00:01:26,100
visualize our mistakes how about a model

00:01:24,060 --> 00:01:27,600
for managing those branches no problem

00:01:26,100 --> 00:01:29,600
with the concept similar git flow that

00:01:27,600 --> 00:01:32,009
matches our business environment and

00:01:29,600 --> 00:01:34,110
what about hosting so we've got a good

00:01:32,009 --> 00:01:35,490
concept for using git well we could

00:01:34,110 --> 00:01:37,200
always call on our friend from github

00:01:35,490 --> 00:01:39,210
mr. octocat but our organization

00:01:37,200 --> 00:01:41,729
basically requires all services to be

00:01:39,210 --> 00:01:44,310
locally hosted sad octocat don't cry

00:01:41,729 --> 00:01:45,960
little buddy introducing gitlab where

00:01:44,310 --> 00:01:48,090
you can locally host your repositories

00:01:45,960 --> 00:01:49,710
with git lab not only do you get local

00:01:48,090 --> 00:01:51,630
hosting but it's also simple user

00:01:49,710 --> 00:01:54,439
management branch push protections and

00:01:51,630 --> 00:01:57,299
HTT push requests out-of-the-box

00:01:54,439 --> 00:01:59,219
so how about those pesky workspaces you

00:01:57,299 --> 00:02:01,649
know how this beautiful snowflake of a

00:01:59,219 --> 00:02:03,000
system works but your team has no clue

00:02:01,649 --> 00:02:03,930
what you've been doing for months and

00:02:03,000 --> 00:02:05,939
you definitely don't want to

00:02:03,930 --> 00:02:08,009
painstakingly update all of their work

00:02:05,939 --> 00:02:09,270
environments but that's okay because

00:02:08,009 --> 00:02:12,560
you've got docker

00:02:09,270 --> 00:02:14,489
so with docker

00:02:12,560 --> 00:02:15,569
you can centralize your workspace

00:02:14,489 --> 00:02:18,360
management there's a version control

00:02:15,569 --> 00:02:19,590
baked in you have reusable layers for

00:02:18,360 --> 00:02:22,230
your build system and you get a

00:02:19,590 --> 00:02:23,760
centralized distribution model so you

00:02:22,230 --> 00:02:25,560
now have this beautiful workflow where

00:02:23,760 --> 00:02:26,940
users write code and a docker and they

00:02:25,560 --> 00:02:28,200
leverage see make tile help locally

00:02:26,940 --> 00:02:29,519
build their code you've gotten the

00:02:28,200 --> 00:02:31,080
familiar with git so they can push to

00:02:29,519 --> 00:02:32,849
your gitlab server which triggers

00:02:31,080 --> 00:02:34,080
Jenkins to build a software who notifies

00:02:32,849 --> 00:02:37,050
your bug reporting system and

00:02:34,080 --> 00:02:38,640
subsequently your developers but what if

00:02:37,050 --> 00:02:40,980
you want more dye here you want to

00:02:38,640 --> 00:02:42,330
monitor your build warnings so in swoops

00:02:40,980 --> 00:02:43,890
the LLVM dragon with their client

00:02:42,330 --> 00:02:45,780
compiler and since it's never good to

00:02:43,890 --> 00:02:46,380
call your eggs in one basket no pun

00:02:45,780 --> 00:02:48,330
intended

00:02:46,380 --> 00:02:52,349
you lay a GCC egg and allow a baby bowl

00:02:48,330 --> 00:02:54,750
to be born that static analysis you say

00:02:52,349 --> 00:02:55,440
rescued by the LLVM dragon again with

00:02:54,750 --> 00:02:56,730
clang Toddie

00:02:55,440 --> 00:02:59,819
and this time has got a sidekick with

00:02:56,730 --> 00:03:01,470
cpp check along for the ride how about

00:02:59,819 --> 00:03:03,060
testing well there are lots of fun

00:03:01,470 --> 00:03:04,620
exciting test frameworks to use out

00:03:03,060 --> 00:03:06,390
there but you're already using boost

00:03:04,620 --> 00:03:09,450
libraries in your project so why not

00:03:06,390 --> 00:03:12,720
whose test to the scene and too much

00:03:09,450 --> 00:03:15,299
tooling no no let's get code coverage

00:03:12,720 --> 00:03:17,519
with cake of I'm get really nice HTML

00:03:15,299 --> 00:03:19,709
report outputs now that you have code

00:03:17,519 --> 00:03:21,930
that runs locally on your machines you

00:03:19,709 --> 00:03:24,060
can sanitize that code and don't worry

00:03:21,930 --> 00:03:25,590
ll VMs got you covered again and we

00:03:24,060 --> 00:03:27,090
can't forget about including sanitizers

00:03:25,590 --> 00:03:33,810
from our buddy baby bowl to keep us

00:03:27,090 --> 00:03:34,920
balanced well now you throw all this

00:03:33,810 --> 00:03:36,389
together with Jenkins in the middle

00:03:34,920 --> 00:03:38,459
stack analysis compiler warnings and

00:03:36,389 --> 00:03:40,769
client sanitizers from playing warnings

00:03:38,459 --> 00:03:42,480
to sanitizers from GCC stack analysis

00:03:40,769 --> 00:03:44,310
from cpp check unit tests from boost

00:03:42,480 --> 00:03:46,010
tests and covers reports from cake of

00:03:44,310 --> 00:03:48,120
all feeding into a centralized system oh

00:03:46,010 --> 00:03:49,319
and documentation you didn't think I'd

00:03:48,120 --> 00:03:51,030
forget about that did you

00:03:49,319 --> 00:03:54,720
well don't worry Jenkins can spit that

00:03:51,030 --> 00:03:56,160
right out for you Jenkins our handy

00:03:54,720 --> 00:03:58,139
little Butler would not only run all of

00:03:56,160 --> 00:04:00,900
this but also aggregate the results you

00:03:58,139 --> 00:04:02,519
want cpp checks rolls up results you've

00:04:00,900 --> 00:04:05,310
got it how about those clang toddy

00:04:02,519 --> 00:04:07,079
reports BAM feeling more like GCC

00:04:05,310 --> 00:04:08,489
compiler warnings anybody maybe you feel

00:04:07,079 --> 00:04:11,280
more like clang warnings today

00:04:08,489 --> 00:04:13,109
how are you test running oh I've got a

00:04:11,280 --> 00:04:15,150
good report right here and I'll recover

00:04:13,109 --> 00:04:17,250
in all of our bases yeah I get a summary

00:04:15,150 --> 00:04:19,470
every build so pulling it all together

00:04:17,250 --> 00:04:21,299
we start with a read mine and see make

00:04:19,470 --> 00:04:23,760
but then we added Jenkins and get and

00:04:21,299 --> 00:04:26,080
get lab and docker and cake hub and cpp

00:04:23,760 --> 00:04:27,909
check and oxygen and boost test and GC

00:04:26,080 --> 00:04:30,490
see and clang and covered all the some

00:04:27,909 --> 00:04:31,090
sanitizers well you shake it all up and

00:04:30,490 --> 00:04:32,830
what do you get

00:04:31,090 --> 00:04:34,330
Jenkins with us get lab necklace writing

00:04:32,830 --> 00:04:36,610
a docker whale named oxygen raining in

00:04:34,330 --> 00:04:38,919
his pet LLVM dragon all transport cpp

00:04:36,610 --> 00:04:42,210
check GCC get k come see make and boost

00:04:38,919 --> 00:04:42,210
test containers through redmond rainbow

00:04:42,800 --> 00:04:48,110
[Music]

00:04:43,360 --> 00:04:48,110

YouTube URL: https://www.youtube.com/watch?v=Dm0OMYUZ06A


