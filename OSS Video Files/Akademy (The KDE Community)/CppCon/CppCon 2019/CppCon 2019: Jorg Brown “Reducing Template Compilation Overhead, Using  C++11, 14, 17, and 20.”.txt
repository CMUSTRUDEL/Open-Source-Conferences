Title: CppCon 2019: Jorg Brown “Reducing Template Compilation Overhead, Using  C++11, 14, 17, and 20.”
Publication date: 2019-09-27
Playlist: CppCon 2019
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
At their best, new C++ standards offer simpler, clearer, and faster-to-compile ways to write your code. But many information sources, for example Andrei Alexandrescu’s Modern C++ Design, haven’t been updated.

More importantly, template metaprogramming is not something we generally seek to optimize because a good compiler handles it well, and problems generally only show up in the form of long compile times.

In this presentation, I'll describe techniques you can use to simplify, clarify, and improve the compile speed, of your code, including:
* Using C++17 "if constexpr"
* Using C++11 variadic function / template arguments (often without needing recursion!)
* Using decltype on auto-return functions in order to compute types in a more readable way.
* Using C++20 constraints rather than std::enable_if
— 
Jorg Brown
Google
Software Engineer
jorg.brown@gmail.com

Jorg Brown started coding in the days when getting a home computer often meant assembling it yourself, and while he appreciates high-level languages like C++, he also misses those early days, when computers were simple enough that a programmer could actually fully understand a machine, from a high-level API call all the way down to its bare-metal electrical signals.

If he had a programming motto, it would be that code should be as simple as possible... but not not simpler. If he had a second motto, it would be to imagine your kids having to maintain your code 20 years from now... and add comments accordingly.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
YouTube URL: https://www.youtube.com/watch?v=TyiiNVA1syk


