Title: CppCon 2019: Valentin Galea “Compiled C++ Coding Standards”
Publication date: 2019-09-27
Playlist: CppCon 2019
Description: 
	http://CppCon.org
—
Discussion & Comments: https://www.reddit.com/r/cpp/
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2019
—
Coding conventions, guidelines and standards are a perennial effort of software development. Lots of work goes into preparing and writing them but arguably less in following them - partly because these are documents usually maintained outside of main development, so they evolve separately and often retroactively.

We will show a novel model whereby the coding standard chosen by a team is a 'live' source code file integrated into a production repository so that it participates in compilation. This immediately brings a couple of advantages that we will explore in detail, as well as the implications it has in the context of a full team of developers.

As a practical example, the coding standard files of Splash Damage - a game development company - will be shown and discussed, detailing the various C++ aspects they deal with it and the techniques encouraged therein. Going further than the code, we'll talk about the human factor and how standards are written, evolved and championed across a large company in the face of different constraints between projects and teams.
— 
Valentin Galea
Splash Damage
Technical Lead
London, England

Valentin Galea is a professional video game developer based in London, UK. He assisted with or oversaw development of award-winning video game franchises like "Gears of War" and "Halo: The Master Chief Collection". C++ enthusiast and evangelist, focused on systems, graphics and engine programming. He has 12+ years worth of experience, with past work ranging from MMO projects to mobile and handheld games. When he's not geeking out on C++ or games, he collects vinyl records.
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
Captions: 
	00:00:09,090 --> 00:00:14,250
hi everybody my name is Valentin I've

00:00:12,150 --> 00:00:17,550
been working the video game industry for

00:00:14,250 --> 00:00:20,610
more than 12 years now out of the two

00:00:17,550 --> 00:00:24,000
which pours in Splash Damage in London

00:00:20,610 --> 00:00:26,099
UK and we're here to talk about coding

00:00:24,000 --> 00:00:27,960
standards so it can be a short focus

00:00:26,099 --> 00:00:29,849
talk but we're gonna cover some good

00:00:27,960 --> 00:00:32,400
ground we're gonna start by looking at

00:00:29,849 --> 00:00:33,810
background of coding standard this could

00:00:32,400 --> 00:00:35,760
be familiar but still work with

00:00:33,810 --> 00:00:38,010
everything then we gonna talk about this

00:00:35,760 --> 00:00:40,200
new approach and then we're gonna look

00:00:38,010 --> 00:00:42,750
at teams in in projects in the sense of

00:00:40,200 --> 00:00:46,470
adoption and enforcing standards in the

00:00:42,750 --> 00:00:49,470
dynamic step so first of all what are

00:00:46,470 --> 00:00:51,570
coding standards if we literally read

00:00:49,470 --> 00:00:54,270
out the Wikipedia definition it says

00:00:51,570 --> 00:00:56,580
that the set of guidelines for specific

00:00:54,270 --> 00:00:59,930
programming language that recommend the

00:00:56,580 --> 00:01:04,920
style practice and methods for every

00:00:59,930 --> 00:01:06,090
aspect of that programming language now

00:01:04,920 --> 00:01:08,460
a key difference is when these

00:01:06,090 --> 00:01:12,119
guidelines when they're formally adopted

00:01:08,460 --> 00:01:13,740
that's one when they become standard so

00:01:12,119 --> 00:01:16,140
let's look at a couple of examples in

00:01:13,740 --> 00:01:19,350
the in a while so let's start with the

00:01:16,140 --> 00:01:21,390
C++ ISO standard now it's a bit cheating

00:01:19,350 --> 00:01:23,429
calling it a standard because standard

00:01:21,390 --> 00:01:26,069
here means as part of the ISO

00:01:23,429 --> 00:01:27,960
standardization body which is in charge

00:01:26,069 --> 00:01:30,210
of actually defining aspect of the

00:01:27,960 --> 00:01:33,689
language but nevertheless it still gives

00:01:30,210 --> 00:01:35,969
some some styling especially with naming

00:01:33,689 --> 00:01:39,119
for example everything under STD should

00:01:35,969 --> 00:01:43,710
be should be called snake case rather

00:01:39,119 --> 00:01:47,729
than say camel case another well-known

00:01:43,710 --> 00:01:51,840
one is the core guidelines by started by

00:01:47,729 --> 00:01:55,319
being so and this tries to deal with a

00:01:51,840 --> 00:01:57,359
lot of recommendation and in guidelines

00:01:55,319 --> 00:02:00,270
and this is a snapshot of the table of

00:01:57,359 --> 00:02:03,119
contents and for each of those goes into

00:02:00,270 --> 00:02:06,779
into depth with some some rules so it

00:02:03,119 --> 00:02:09,030
just around an example another quite

00:02:06,779 --> 00:02:13,080
infamous one some might say is the

00:02:09,030 --> 00:02:14,400
Google C++ style guide which kind of

00:02:13,080 --> 00:02:15,870
follows the same structure you have a

00:02:14,400 --> 00:02:18,780
table of contents they try to cover a

00:02:15,870 --> 00:02:19,610
lot of things and then they go in depth

00:02:18,780 --> 00:02:22,430
with with

00:02:19,610 --> 00:02:24,500
rules industry enough here as you will

00:02:22,430 --> 00:02:26,540
see later the recommendation for four

00:02:24,500 --> 00:02:32,450
declarations are totally different than

00:02:26,540 --> 00:02:35,630
than others and because we are in game

00:02:32,450 --> 00:02:38,360
there a lot of people working there in

00:02:35,630 --> 00:02:40,190
game they've used the 3d engine called

00:02:38,360 --> 00:02:44,090
Annie L engine fourth from Epic Games

00:02:40,190 --> 00:02:46,130
and because it's written in C++ it comes

00:02:44,090 --> 00:02:50,120
with its own standards of coding

00:02:46,130 --> 00:02:52,700
standard and here's a random examples of

00:02:50,120 --> 00:02:55,780
some of the you know naming conventions

00:02:52,700 --> 00:02:58,760
and guidelines and so on and so forth

00:02:55,780 --> 00:03:02,300
okay so you kind of got a rough idea how

00:02:58,760 --> 00:03:05,030
standards work or at least they define

00:03:02,300 --> 00:03:08,750
how about actually adopting them and

00:03:05,030 --> 00:03:10,760
using them in in practice so first of

00:03:08,750 --> 00:03:14,420
all the they're generally laid out as

00:03:10,760 --> 00:03:16,489
documentation either PDF or wiki is

00:03:14,420 --> 00:03:18,650
internal wiki so on and so forth and the

00:03:16,489 --> 00:03:21,020
main idea is that people are supposed to

00:03:18,650 --> 00:03:24,799
read these standards ingest them and

00:03:21,020 --> 00:03:26,930
then use them in practice and they're

00:03:24,799 --> 00:03:28,940
not usually a machine readable the more

00:03:26,930 --> 00:03:31,430
for human consumption like I said with a

00:03:28,940 --> 00:03:33,940
couple of exceptions one being the core

00:03:31,430 --> 00:03:37,040
guidelines themselves they have like

00:03:33,940 --> 00:03:38,870
Visual Studio kind of plug-in the deals

00:03:37,040 --> 00:03:40,970
with static analysis and tries to

00:03:38,870 --> 00:03:45,049
compare the code against the guidelines

00:03:40,970 --> 00:03:46,940
and give you some some ideas there but

00:03:45,049 --> 00:03:49,010
as you go and use this a couple of

00:03:46,940 --> 00:03:52,790
obstacles and pitfalls become apparent

00:03:49,010 --> 00:03:55,970
quite quite soon chiefly is that they

00:03:52,790 --> 00:03:57,170
they grow big the standard they they

00:03:55,970 --> 00:03:59,320
grow quite big and they're they become

00:03:57,170 --> 00:04:02,720
hard to navigate a good example is the

00:03:59,320 --> 00:04:04,940
simplest task or guidelines itself it's

00:04:02,720 --> 00:04:06,890
quite large now it's almost impossible

00:04:04,940 --> 00:04:07,790
to kind of read it understanding in in

00:04:06,890 --> 00:04:10,910
one sitting

00:04:07,790 --> 00:04:13,220
and unless someone makes a dedicated

00:04:10,910 --> 00:04:14,920
effort to update them they tend to go

00:04:13,220 --> 00:04:16,700
out of date very quickly

00:04:14,920 --> 00:04:19,070
normally like I said they're in a

00:04:16,700 --> 00:04:21,890
separate location than the production

00:04:19,070 --> 00:04:25,070
code need to search and see where

00:04:21,890 --> 00:04:26,840
they're at and only you know the god of

00:04:25,070 --> 00:04:30,470
programming for that particular project

00:04:26,840 --> 00:04:31,340
get to defined and modify them and why

00:04:30,470 --> 00:04:32,810
are we kidding right

00:04:31,340 --> 00:04:34,490
nobody has time to read the coming

00:04:32,810 --> 00:04:37,970
and everybody just wants to code code

00:04:34,490 --> 00:04:39,770
code so with that in mind you kind of

00:04:37,970 --> 00:04:40,250
maybe already see where I'm going with

00:04:39,770 --> 00:04:42,590
this

00:04:40,250 --> 00:04:45,230
what's our new approach that were kind

00:04:42,590 --> 00:04:47,990
of trying to heal here that we pioneered

00:04:45,230 --> 00:04:49,850
in our company so the big idea that the

00:04:47,990 --> 00:04:52,700
standards are actually source code files

00:04:49,850 --> 00:04:55,430
that participate in compilation so I

00:04:52,700 --> 00:04:56,900
made here the job that if you go and

00:04:55,430 --> 00:04:59,030
what if I understand that you add a new

00:04:56,900 --> 00:05:01,070
rule and you're not careful you actually

00:04:59,030 --> 00:05:03,470
break the production bill right because

00:05:01,070 --> 00:05:06,979
it would compile as any other piece of

00:05:03,470 --> 00:05:08,630
code also cheaply because the pieces of

00:05:06,979 --> 00:05:10,790
code that means they are created and

00:05:08,630 --> 00:05:13,639
improved like any other code to code

00:05:10,790 --> 00:05:16,400
ADIZ which is quite powerful as we will

00:05:13,639 --> 00:05:18,620
see and they have a system for easy

00:05:16,400 --> 00:05:24,100
referencing and searching that I'll show

00:05:18,620 --> 00:05:26,300
you very soon so here's here's a snippet

00:05:24,100 --> 00:05:29,300
how they work in practice so here is

00:05:26,300 --> 00:05:31,490
everybody's favorite ID visual studio

00:05:29,300 --> 00:05:34,970
but this can be extended to any IDE so

00:05:31,490 --> 00:05:36,620
see without ever needing the IDE I just

00:05:34,970 --> 00:05:39,590
search for the coding standard and it

00:05:36,620 --> 00:05:42,260
immediately appears so the time to

00:05:39,590 --> 00:05:43,430
documentation is minimal I can just you

00:05:42,260 --> 00:05:44,720
know when I'm when I'm coding and I'm

00:05:43,430 --> 00:05:47,060
unsure about something how did the

00:05:44,720 --> 00:05:48,380
standard approach this I can just

00:05:47,060 --> 00:05:51,020
literally open it up and visual studio

00:05:48,380 --> 00:05:54,979
and look at it so I think this is quite

00:05:51,020 --> 00:05:57,560
powerful so go a bit more in in detail

00:05:54,979 --> 00:05:59,330
they essentially two files one age file

00:05:57,560 --> 00:06:02,120
which feel a little more can

00:05:59,330 --> 00:06:03,979
architectural bits and then CPP file

00:06:02,120 --> 00:06:06,530
which go it more in depth with like C++

00:06:03,979 --> 00:06:10,100
rules and so on and so forth and this is

00:06:06,530 --> 00:06:13,450
like an example of how they look in the

00:06:10,100 --> 00:06:18,740
in the source code in equivalent like

00:06:13,450 --> 00:06:20,419
sauce collocation and into Siena we open

00:06:18,740 --> 00:06:21,889
sourced them so you can go and get hub

00:06:20,419 --> 00:06:24,200
and check for yourself

00:06:21,889 --> 00:06:28,160
our approach to the standards for can

00:06:24,200 --> 00:06:29,620
use them for yourself kind of try to to

00:06:28,160 --> 00:06:34,880
find inspiration for your own maybe

00:06:29,620 --> 00:06:37,669
project here's a bird's-eye view of the

00:06:34,880 --> 00:06:41,840
of the H part hopefully everybody can

00:06:37,669 --> 00:06:44,090
read it from there if we go a bit in

00:06:41,840 --> 00:06:46,190
detail we can see that largely is like

00:06:44,090 --> 00:06:47,780
comprised of either large

00:06:46,190 --> 00:06:50,390
commented areas that are supposed to

00:06:47,780 --> 00:06:53,030
talk about a particular technique or

00:06:50,390 --> 00:06:54,680
actual C++ code that gives they tend

00:06:53,030 --> 00:06:58,100
give the example how you should how you

00:06:54,680 --> 00:07:00,910
should use something so here we we

00:06:58,100 --> 00:07:03,920
encourage for declarations quite a lot

00:07:00,910 --> 00:07:07,070
or the mix of either domain-specific

00:07:03,920 --> 00:07:11,090
things like in this case a real engine

00:07:07,070 --> 00:07:13,490
way of declaring classes as an example

00:07:11,090 --> 00:07:16,550
how you should structure your your code

00:07:13,490 --> 00:07:20,210
if you wonder what the uppercase Q class

00:07:16,550 --> 00:07:22,880
or generated bodies is the proprietary

00:07:20,210 --> 00:07:26,480
reflection system so even if

00:07:22,880 --> 00:07:28,460
domain-specific or just straight-up C++

00:07:26,480 --> 00:07:31,040
code is supposed to prove a point here

00:07:28,460 --> 00:07:35,660
we're kind of hinting at three five zero

00:07:31,040 --> 00:07:37,130
rule with a nice link to CPP ref and so

00:07:35,660 --> 00:07:40,130
on so for like for example this is our

00:07:37,130 --> 00:07:42,020
idea how to structure little

00:07:40,130 --> 00:07:45,260
declarations we kind of try to group

00:07:42,020 --> 00:07:49,730
them fair purpose or like 40 the right

00:07:45,260 --> 00:07:53,420
class that they you know make sense and

00:07:49,730 --> 00:07:55,820
it is me enough we actually recommend

00:07:53,420 --> 00:08:01,070
both visual and override the the

00:07:55,820 --> 00:08:03,940
keywords we also began readability we

00:08:01,070 --> 00:08:06,169
have a couple of things here kind of

00:08:03,940 --> 00:08:07,940
disallowing multiple arguments of the

00:08:06,169 --> 00:08:11,630
same type like functions with a lot of

00:08:07,940 --> 00:08:13,540
pools in a row or encourage extra

00:08:11,630 --> 00:08:19,370
minions strong enough for like better

00:08:13,540 --> 00:08:21,680
semantic readability game dev is really

00:08:19,370 --> 00:08:23,330
fond of Singleton's so we try to make

00:08:21,680 --> 00:08:25,850
the point here that we shouldn't use

00:08:23,330 --> 00:08:30,800
them and a couple of just paragraphs

00:08:25,850 --> 00:08:32,780
with ideas alternative ideas and so on

00:08:30,800 --> 00:08:38,090
so for to you you get the idea how these

00:08:32,780 --> 00:08:43,580
are supposed to work now if you take a

00:08:38,090 --> 00:08:47,720
step back and we kind of zoom out right

00:08:43,580 --> 00:08:51,350
you see that this is actually a full C++

00:08:47,720 --> 00:08:53,810
class that can be instantiated and you

00:08:51,350 --> 00:08:55,339
know but this base in actual an actual

00:08:53,810 --> 00:08:57,810
compilation and interestingly enough

00:08:55,339 --> 00:08:59,610
this was not intended at the time

00:08:57,810 --> 00:09:01,830
we are devising this system but because

00:08:59,610 --> 00:09:06,660
it can be instantiated that means it can

00:09:01,830 --> 00:09:08,820
be part of the 3d world so it turns out

00:09:06,660 --> 00:09:11,370
that you can actually create the

00:09:08,820 --> 00:09:13,950
standard actor example and give it a

00:09:11,370 --> 00:09:15,750
full 3d body and being the world he'll

00:09:13,950 --> 00:09:19,770
maybe he saw some bad code that's why

00:09:15,750 --> 00:09:21,990
he's trying to fly away yeah so going

00:09:19,770 --> 00:09:25,230
back to the standard itself you might

00:09:21,990 --> 00:09:28,589
have already noticed this Square tag

00:09:25,230 --> 00:09:30,510
things these are inspired by the c++ iso

00:09:28,589 --> 00:09:33,600
standard itself and they're a way to

00:09:30,510 --> 00:09:36,300
easily reference things or sections in

00:09:33,600 --> 00:09:38,370
code reviews or handing searches because

00:09:36,300 --> 00:09:40,140
you just remember this nipple and then

00:09:38,370 --> 00:09:44,310
you search for it in final files and you

00:09:40,140 --> 00:09:47,850
you find it easy what this works very

00:09:44,310 --> 00:09:49,890
well is code reviews so for example we

00:09:47,850 --> 00:09:52,410
use the perforce our source control and

00:09:49,890 --> 00:09:54,900
this is a screenshot from a tool called

00:09:52,410 --> 00:09:57,120
Swan which is which does code reviews

00:09:54,900 --> 00:09:59,420
and this is an actual screenshot when I

00:09:57,120 --> 00:10:02,339
say to somebody it's better to use

00:09:59,420 --> 00:10:04,950
brackets class dot member dot F which

00:10:02,339 --> 00:10:07,890
means that we encourage assignment at

00:10:04,950 --> 00:10:09,900
the point of declaration and I think

00:10:07,890 --> 00:10:11,550
it's quite powerful because it kind of

00:10:09,900 --> 00:10:14,190
takes the pressure something judgmental

00:10:11,550 --> 00:10:16,050
that person's not supposed to to do it

00:10:14,190 --> 00:10:18,390
just because I say so it's because we

00:10:16,050 --> 00:10:21,120
all kind of respect the standard and by

00:10:18,390 --> 00:10:23,760
modifying by referring to this snippets

00:10:21,120 --> 00:10:26,400
it takes it you know it makes it not

00:10:23,760 --> 00:10:27,600
personal and there are a couple of

00:10:26,400 --> 00:10:29,010
additional benefits here like for

00:10:27,600 --> 00:10:30,720
example using it in this way it's

00:10:29,010 --> 00:10:33,000
empowering for everybody like a junior

00:10:30,720 --> 00:10:36,750
could still hold accountable a senior to

00:10:33,000 --> 00:10:38,760
the third party the standard as well as

00:10:36,750 --> 00:10:41,040
you know learning by example a lot of us

00:10:38,760 --> 00:10:43,500
prefer to learn by example so having

00:10:41,040 --> 00:10:45,209
something already laid out there you can

00:10:43,500 --> 00:10:47,520
kind of get inspiration for you can

00:10:45,209 --> 00:10:49,800
maybe introduce something new first in

00:10:47,520 --> 00:10:51,930
the standards see how it gets kind of

00:10:49,800 --> 00:10:53,790
traction and then move it into

00:10:51,930 --> 00:10:58,410
production like people will kind of copy

00:10:53,790 --> 00:11:00,180
it so this is kind of the cycle the

00:10:58,410 --> 00:11:02,970
standard itself was created through two

00:11:00,180 --> 00:11:04,680
code reviews and then you proposed new

00:11:02,970 --> 00:11:06,959
changes like normally when you you know

00:11:04,680 --> 00:11:09,630
when you code something you send the

00:11:06,959 --> 00:11:10,889
code to do to your coding body with the

00:11:09,630 --> 00:11:14,100
coding standard you send it to the

00:11:10,889 --> 00:11:15,929
pooty so if you get enough of boats in a

00:11:14,100 --> 00:11:17,549
kind of democratic way that's a new

00:11:15,929 --> 00:11:20,730
version of the or the standard and

00:11:17,549 --> 00:11:25,100
that's how it grows organically you

00:11:20,730 --> 00:11:28,230
would say so let's take a bit of a

00:11:25,100 --> 00:11:30,600
deeper dive into the CPP file itself

00:11:28,230 --> 00:11:34,139
again this is a bit more architectural

00:11:30,600 --> 00:11:36,569
than rather strict rule sets it deals

00:11:34,139 --> 00:11:38,399
with our day to day work in a real

00:11:36,569 --> 00:11:42,540
engine for that they'll be focused in

00:11:38,399 --> 00:11:44,459
standard library and remember you wanna

00:11:42,540 --> 00:11:46,529
kind of cater to all experience levels

00:11:44,459 --> 00:11:48,299
you cannot be too expert friendly so you

00:11:46,529 --> 00:11:49,799
sometimes you mind it you might want to

00:11:48,299 --> 00:11:53,999
spell out some things that are common

00:11:49,799 --> 00:11:57,779
knowledge so we start with you know a

00:11:53,999 --> 00:12:00,419
bit of ground rules and layout so we we

00:11:57,779 --> 00:12:02,989
try to even in this modern age of like

00:12:00,419 --> 00:12:07,649
super wide monitors we try to encourage

00:12:02,989 --> 00:12:11,609
shorter Calem limits even 80 or 100

00:12:07,649 --> 00:12:13,769
interesting enough and they today is you

00:12:11,609 --> 00:12:18,179
know he also recommended 80 characters

00:12:13,769 --> 00:12:20,309
is the one true way to code then moving

00:12:18,179 --> 00:12:25,139
on to two more by shedding everyone's

00:12:20,309 --> 00:12:29,910
favorite places because we follow the

00:12:25,139 --> 00:12:31,139
epic game style we do almond and a

00:12:29,910 --> 00:12:34,829
couple of recommendations here I should

00:12:31,139 --> 00:12:37,589
structure the code were big fans of

00:12:34,829 --> 00:12:39,769
early returns rather than deeply nesting

00:12:37,589 --> 00:12:42,269
stuff and so on so forth

00:12:39,769 --> 00:12:44,699
now I know what you're thinking some of

00:12:42,269 --> 00:12:46,199
these things can be automated and you're

00:12:44,699 --> 00:12:48,629
right like some of these layout rules

00:12:46,199 --> 00:12:50,999
instead of having it under standard you

00:12:48,629 --> 00:12:55,410
can also enforce them with Minter's or

00:12:50,999 --> 00:12:57,449
like things and do we do indeed offer a

00:12:55,410 --> 00:12:59,939
client format for people to kind of just

00:12:57,449 --> 00:13:02,629
run their code and make sure it follows

00:12:59,939 --> 00:13:06,089
the standard but we don't necessarily

00:13:02,629 --> 00:13:08,249
enforce this we try to be just as a

00:13:06,089 --> 00:13:11,579
teaching material rather than hardly

00:13:08,249 --> 00:13:14,639
forcing moving to some more by shedding

00:13:11,579 --> 00:13:16,439
everyone's favorite subject Auto because

00:13:14,639 --> 00:13:17,699
especially in gaming even after all

00:13:16,439 --> 00:13:21,389
these years is the hotly contested

00:13:17,699 --> 00:13:23,000
subject so it's not easy with a couple

00:13:21,389 --> 00:13:27,980
of generic reduction

00:13:23,000 --> 00:13:29,680
rules then some some gotchas and because

00:13:27,980 --> 00:13:33,230
of these batches we have the so-called

00:13:29,680 --> 00:13:36,410
golden rule that we because see Venus is

00:13:33,230 --> 00:13:39,440
not produced we try to be explicitly

00:13:36,410 --> 00:13:43,280
encouraged to put the qualifiers at all

00:13:39,440 --> 00:13:46,880
times were also big fans of the self

00:13:43,280 --> 00:13:49,360
calling initialized lambda again to this

00:13:46,880 --> 00:13:51,380
point that like you should try to

00:13:49,360 --> 00:13:53,510
initialize at the point of declaration

00:13:51,380 --> 00:13:57,260
and also this kind of save you from like

00:13:53,510 --> 00:14:01,370
weird if statements or contorted tenure

00:13:57,260 --> 00:14:02,930
operator stuff but because we have huge

00:14:01,370 --> 00:14:05,150
code bases and some of them they're

00:14:02,930 --> 00:14:08,120
quite legacy we also have this like a

00:14:05,150 --> 00:14:10,190
disclaimer that sometimes maybe you

00:14:08,120 --> 00:14:12,620
shouldn't not go for auto and try to be

00:14:10,190 --> 00:14:15,620
consistent rather than create a mishmash

00:14:12,620 --> 00:14:19,180
and making it hard and readability so we

00:14:15,620 --> 00:14:22,970
have the north of style rule as well

00:14:19,180 --> 00:14:26,210
we're big fans of lambdas we have a

00:14:22,970 --> 00:14:28,130
couple of guidelines here like use them

00:14:26,210 --> 00:14:32,720
unless they become so complex that you

00:14:28,130 --> 00:14:35,570
know you should extract any functions we

00:14:32,720 --> 00:14:38,180
are not big fans of wholesale captures

00:14:35,570 --> 00:14:41,450
like this we try to encourage name

00:14:38,180 --> 00:14:43,010
captures the same goes for you know

00:14:41,450 --> 00:14:46,430
capturing you everything by reference

00:14:43,010 --> 00:14:48,290
and so on and so forth and again we give

00:14:46,430 --> 00:14:50,060
a small kind of cheat sheet of the

00:14:48,290 --> 00:14:54,980
various deduction rules for like

00:14:50,060 --> 00:14:59,300
captures for eleven and fourteen that's

00:14:54,980 --> 00:15:02,060
always handy to have as well as memory

00:14:59,300 --> 00:15:05,270
memory plays a big big part in and game

00:15:02,060 --> 00:15:06,589
they've even either through throughput

00:15:05,270 --> 00:15:10,040
or speed so we have a couple of

00:15:06,589 --> 00:15:13,130
recommendations here as well but they're

00:15:10,040 --> 00:15:14,570
largely again largely around uh Niall

00:15:13,130 --> 00:15:17,740
engine which comes with its own set of

00:15:14,570 --> 00:15:20,330
containers and for example here we

00:15:17,740 --> 00:15:24,140
encourage like the policy allocated

00:15:20,330 --> 00:15:27,640
techniques of their API points as well

00:15:24,140 --> 00:15:30,710
as a couple of like you know handy

00:15:27,640 --> 00:15:32,089
methods how to quickly and here vector

00:15:30,710 --> 00:15:35,100
stuff like that their equivalent of

00:15:32,089 --> 00:15:38,010
vector which is called the array without

00:15:35,100 --> 00:15:39,900
you know losing too much speed as well

00:15:38,010 --> 00:15:41,400
as a nice kind of small I got it from

00:15:39,900 --> 00:15:44,070
Twitter and I put it under standard a

00:15:41,400 --> 00:15:45,930
nice kinda reminded of the access times

00:15:44,070 --> 00:15:50,400
from like the CPU register which the

00:15:45,930 --> 00:15:52,380
past is to l1 l2 and then my main memory

00:15:50,400 --> 00:15:54,300
and you can see is quite a difference so

00:15:52,380 --> 00:15:58,280
we have a couple of guidelines here how

00:15:54,300 --> 00:16:01,080
you can improve your cash flow calendar

00:15:58,280 --> 00:16:03,510
okay so this is far in good right you

00:16:01,080 --> 00:16:06,630
have the standards you define them you

00:16:03,510 --> 00:16:08,040
work how do you actually go about using

00:16:06,630 --> 00:16:10,140
them and adopting them in in an

00:16:08,040 --> 00:16:11,790
organization and Splash Damage is

00:16:10,140 --> 00:16:13,860
interesting because we have multiple

00:16:11,790 --> 00:16:15,750
projects going on at the same time we

00:16:13,860 --> 00:16:18,060
have like I know three four projects and

00:16:15,750 --> 00:16:21,150
they can be various stages some can be

00:16:18,060 --> 00:16:24,600
full-blown production projects other can

00:16:21,150 --> 00:16:28,560
be more prototyping this idea with the

00:16:24,600 --> 00:16:30,900
standest was born in one project it

00:16:28,560 --> 00:16:33,420
really took off right people really

00:16:30,900 --> 00:16:35,160
embraced it the space of it they grew it

00:16:33,420 --> 00:16:37,980
through the reviews so the key question

00:16:35,160 --> 00:16:40,760
is how do you you know distribute

00:16:37,980 --> 00:16:43,110
through to the rest of a bigger company

00:16:40,760 --> 00:16:46,830
when you try to do this you'll you will

00:16:43,110 --> 00:16:48,330
find a couple of obstacles so projects

00:16:46,830 --> 00:16:50,750
like producing lead different each

00:16:48,330 --> 00:16:53,190
project is unique in its challenges

00:16:50,750 --> 00:16:56,850
there can be multiple differences across

00:16:53,190 --> 00:16:58,860
multiple points this ideal engine can be

00:16:56,850 --> 00:17:00,990
you know it comes with various versions

00:16:58,860 --> 00:17:01,920
you need to be careful what you put in

00:17:00,990 --> 00:17:06,209
the standard because it might not

00:17:01,920 --> 00:17:08,250
compile you another project different CI

00:17:06,209 --> 00:17:09,870
system servers stuff like that it's hard

00:17:08,250 --> 00:17:12,290
to kind of integrate some changes in a

00:17:09,870 --> 00:17:15,390
different project and sometimes even

00:17:12,290 --> 00:17:19,260
contractual legal things that kind of

00:17:15,390 --> 00:17:21,570
you know would make sharing harder so

00:17:19,260 --> 00:17:23,430
interesting enough the solution that I

00:17:21,570 --> 00:17:26,189
already kind of hinted before was to go

00:17:23,430 --> 00:17:29,400
outside the organization and go to

00:17:26,189 --> 00:17:31,620
github that's why we open sourced the

00:17:29,400 --> 00:17:34,530
the standard under under very permissive

00:17:31,620 --> 00:17:36,540
license so you could integrate like you

00:17:34,530 --> 00:17:40,800
would integrate any third-party library

00:17:36,540 --> 00:17:44,280
and we have a small team in charge of

00:17:40,800 --> 00:17:47,100
kind of overseeing this and we call this

00:17:44,280 --> 00:17:48,410
team the core team and it has a couple

00:17:47,100 --> 00:17:50,990
of theirs

00:17:48,410 --> 00:17:53,990
few people and have a couple of key

00:17:50,990 --> 00:17:56,030
responsibilities they discussed the

00:17:53,990 --> 00:17:58,480
major changes that they want to do in

00:17:56,030 --> 00:18:01,220
the standard across the full company

00:17:58,480 --> 00:18:02,900
they review and approve or create and

00:18:01,220 --> 00:18:05,900
self pull request in order to advance

00:18:02,900 --> 00:18:08,980
the standard and once the standard has a

00:18:05,900 --> 00:18:12,580
new version it's their responsibility to

00:18:08,980 --> 00:18:15,170
bring it back in their own project but

00:18:12,580 --> 00:18:16,970
that's not enough because this team is

00:18:15,170 --> 00:18:18,230
like I chose six seven people and they

00:18:16,970 --> 00:18:19,880
always be easy they're like in

00:18:18,230 --> 00:18:21,980
leadership they don't have time they

00:18:19,880 --> 00:18:24,050
lose connection with with the ground

00:18:21,980 --> 00:18:27,380
troops right so more supporters mirror

00:18:24,050 --> 00:18:29,900
so we have the so called ambassadors

00:18:27,380 --> 00:18:31,880
which these are people in the projects

00:18:29,900 --> 00:18:33,320
that are interested in the standard but

00:18:31,880 --> 00:18:38,270
maybe they don't care so much about

00:18:33,320 --> 00:18:39,920
minut C++ points so their job is to kind

00:18:38,270 --> 00:18:42,470
of spread awareness of the standard or

00:18:39,920 --> 00:18:45,770
apply it throughout reviews or like if

00:18:42,470 --> 00:18:47,180
they see someone coding and going too

00:18:45,770 --> 00:18:48,800
much against the standards they're like

00:18:47,180 --> 00:18:52,220
have you heard about the standard let's

00:18:48,800 --> 00:18:54,950
use it here and also they meet with with

00:18:52,220 --> 00:18:56,600
a core team once a month and they

00:18:54,950 --> 00:18:58,940
discuss challenges I try to integrate

00:18:56,600 --> 00:19:00,470
the standard in my team nobody wanted it

00:18:58,940 --> 00:19:03,500
what can I do about it stuff like that

00:19:00,470 --> 00:19:05,840
like create a healthy conversation and

00:19:03,500 --> 00:19:07,520
of course they can add pour request

00:19:05,840 --> 00:19:09,170
after they worked with a particular

00:19:07,520 --> 00:19:11,660
thing they're coding they they think

00:19:09,170 --> 00:19:14,900
this should be used more throughout the

00:19:11,660 --> 00:19:16,520
company so in conclusion this this kind

00:19:14,900 --> 00:19:18,710
of dynamic really worked for us when we

00:19:16,520 --> 00:19:21,980
have at the extremes the protein cells

00:19:18,710 --> 00:19:23,960
and then the open github and then you

00:19:21,980 --> 00:19:26,990
have the core team and and ambassadors

00:19:23,960 --> 00:19:29,630
kind of you know liaisoning and making

00:19:26,990 --> 00:19:35,090
everything kind of work this is quite

00:19:29,630 --> 00:19:36,620
beneficial and yeah it actually works so

00:19:35,090 --> 00:19:40,280
what does the future look like so

00:19:36,620 --> 00:19:42,410
there's always more avenues for teaching

00:19:40,280 --> 00:19:44,330
at work to see if you yourself try to

00:19:42,410 --> 00:19:45,890
adopt standard in your organization

00:19:44,330 --> 00:19:50,120
you'll see that there's always the need

00:19:45,890 --> 00:19:52,040
to teach and spread spread awareness but

00:19:50,120 --> 00:19:54,170
I would say roughly half of their or the

00:19:52,040 --> 00:19:55,310
stuff in the standard can be machine and

00:19:54,170 --> 00:19:57,230
force if necessary

00:19:55,310 --> 00:19:58,970
like I talked about thanks format and

00:19:57,230 --> 00:20:02,360
some other static analysis

00:19:58,970 --> 00:20:04,070
is always more more tools work it's

00:20:02,360 --> 00:20:05,630
harder with some of the other techniques

00:20:04,070 --> 00:20:07,610
the more architectural techniques but

00:20:05,630 --> 00:20:11,120
maybe some crazy idea like machine

00:20:07,610 --> 00:20:13,280
learning from you know quite big history

00:20:11,120 --> 00:20:14,750
of commits we can paint maybe extract

00:20:13,280 --> 00:20:16,820
some patterns and then you can say oh

00:20:14,750 --> 00:20:18,500
you're going against the standard so

00:20:16,820 --> 00:20:20,840
things like that that's some some

00:20:18,500 --> 00:20:25,830
interesting ideas to explore in the

00:20:20,840 --> 00:20:28,040
future and that's it thank you very much

00:20:25,830 --> 00:20:31,089
[Applause]

00:20:28,040 --> 00:20:31,089
[Music]

00:20:34,960 --> 00:20:48,140
for some questions hi my name is Chris

00:20:45,200 --> 00:20:50,299
Hagen born my question is what's the

00:20:48,140 --> 00:20:52,760
biggest advantage of having them compile

00:20:50,299 --> 00:20:55,309
a ball instead of like checking it in as

00:20:52,760 --> 00:20:56,750
a markdown foul well you can also do

00:20:55,309 --> 00:20:59,690
pool requests on so what's the biggest

00:20:56,750 --> 00:21:04,100
advantage I think the biggest comes to

00:20:59,690 --> 00:21:07,100
the quality right an ability for people

00:21:04,100 --> 00:21:10,610
to learn like what's the what's the

00:21:07,100 --> 00:21:13,070
benefit of afforded use you get a chance

00:21:10,610 --> 00:21:15,770
to to thick stuff but also you get a

00:21:13,070 --> 00:21:17,570
chance to learn right like someone can

00:21:15,770 --> 00:21:19,880
shadow someone into the cold if you land

00:21:17,570 --> 00:21:22,970
so I guess they really come into playing

00:21:19,880 --> 00:21:27,070
in code reviews because you can you can

00:21:22,970 --> 00:21:29,720
both referencing them in in your code or

00:21:27,070 --> 00:21:31,970
they're more easily expandable

00:21:29,720 --> 00:21:33,590
themselves right you can you can push a

00:21:31,970 --> 00:21:35,780
code agree immediately with this with

00:21:33,590 --> 00:21:37,669
the standard rather than going someone

00:21:35,780 --> 00:21:40,700
right thing in a corner whatever they

00:21:37,669 --> 00:21:43,220
standard and then trying to like put it

00:21:40,700 --> 00:21:45,289
back in production yeah but I'm saying

00:21:43,220 --> 00:21:47,179
like what if you write it down in a

00:21:45,289 --> 00:21:50,330
markdown file and put it also in Europe

00:21:47,179 --> 00:21:51,890
in your archive then it's not compatible

00:21:50,330 --> 00:21:53,630
but it's still you have all the benefits

00:21:51,890 --> 00:21:55,990
of having it in a code review and stuff

00:21:53,630 --> 00:21:55,990
like that

00:21:58,650 --> 00:22:03,570
character class it becomes they don't

00:22:02,070 --> 00:22:05,930
meet the city like when you declare

00:22:03,570 --> 00:22:08,040
stuffing game there you need to

00:22:05,930 --> 00:22:09,870
partition some things like this or like

00:22:08,040 --> 00:22:12,360
put some things like that right so it's

00:22:09,870 --> 00:22:13,530
a nice template to have like I didn't

00:22:12,360 --> 00:22:16,670
show that but there is actually a

00:22:13,530 --> 00:22:19,350
character class with it's all this like

00:22:16,670 --> 00:22:21,810
gameplay abilities and stuff and you can

00:22:19,350 --> 00:22:24,030
use that as a teaching mechanism or as a

00:22:21,810 --> 00:22:24,750
as a template and it's actual code right

00:22:24,030 --> 00:22:28,620
there okay

00:22:24,750 --> 00:22:30,870
so even you can go maybe copy pasting

00:22:28,620 --> 00:22:32,730
right you copy face that portion and

00:22:30,870 --> 00:22:34,170
then you extend it and you have good

00:22:32,730 --> 00:22:35,790
confidence that it came from a good

00:22:34,170 --> 00:22:39,300
place it was actually from the 20s and

00:22:35,790 --> 00:22:50,340
it was compatible its first citizen okay

00:22:39,300 --> 00:22:51,810
thank you so I have a question about the

00:22:50,340 --> 00:22:53,220
client format because they know you

00:22:51,810 --> 00:22:55,680
mentioned that you have it as an option

00:22:53,220 --> 00:22:58,650
but you don't enforce people to run that

00:22:55,680 --> 00:23:00,870
I was just curious why not and also why

00:22:58,650 --> 00:23:02,310
not just add it as a checker on commit

00:23:00,870 --> 00:23:05,220
so every time someone commits it just

00:23:02,310 --> 00:23:07,370
automatically runs that oh I think we

00:23:05,220 --> 00:23:09,480
should do that I company I already

00:23:07,370 --> 00:23:11,520
someone what it'd be kind of channeled

00:23:09,480 --> 00:23:14,460
your ideas I think that's would be a

00:23:11,520 --> 00:23:15,930
good idea for the future when we started

00:23:14,460 --> 00:23:17,280
it it kind of grew like I said

00:23:15,930 --> 00:23:19,440
organically we kind of just pieced it

00:23:17,280 --> 00:23:21,960
together but now it's in a good shape

00:23:19,440 --> 00:23:28,860
that yeah it can be better tool and

00:23:21,960 --> 00:23:30,030
forced I would say yeah thank you hi I

00:23:28,860 --> 00:23:31,770
just wanted to ask how do you loop

00:23:30,030 --> 00:23:33,630
handle large standard updates that you

00:23:31,770 --> 00:23:34,950
cannot automate do you have to make

00:23:33,630 --> 00:23:39,660
scope for those changes to do them

00:23:34,950 --> 00:23:40,680
manually like let's say you you all vote

00:23:39,660 --> 00:23:42,930
together and you decide we're gonna

00:23:40,680 --> 00:23:44,700
change some style thing clang format

00:23:42,930 --> 00:23:45,810
cling tight it cannot handle that if you

00:23:44,700 --> 00:23:47,250
have to make scope to do the work

00:23:45,810 --> 00:23:49,740
manually is that something that would

00:23:47,250 --> 00:23:51,780
dictate which styles and which standards

00:23:49,740 --> 00:23:53,940
you can apply I guess that's what that

00:23:51,780 --> 00:23:55,830
core team comes into play you discuss

00:23:53,940 --> 00:23:57,750
right because you have a representative

00:23:55,830 --> 00:23:59,820
or hopefully every project so you don't

00:23:57,750 --> 00:24:01,440
get too much tension and then they

00:23:59,820 --> 00:24:04,860
discussed okay it's time to completely

00:24:01,440 --> 00:24:07,250
factor some things so you push the new

00:24:04,860 --> 00:24:10,080
version and that's kind of gospel now

00:24:07,250 --> 00:24:13,750
okay thank you

00:24:10,080 --> 00:24:15,490
hi Dave Flemming do you have any

00:24:13,750 --> 00:24:17,919
recommendations on how to deal with

00:24:15,490 --> 00:24:20,020
legacy code it has various different

00:24:17,919 --> 00:24:23,370
kinds of coding standards and different

00:24:20,020 --> 00:24:26,490
styles deficits

00:24:23,370 --> 00:24:28,900
havi this standard is there is the first

00:24:26,490 --> 00:24:31,539
the first step like for example we have

00:24:28,900 --> 00:24:33,760
a project where we don't have that it's

00:24:31,539 --> 00:24:37,090
legacy quite a lot of it and we don't

00:24:33,760 --> 00:24:40,240
have so much control it'll be impossible

00:24:37,090 --> 00:24:42,730
now to go back right to retro actively

00:24:40,240 --> 00:24:45,450
change but we still put the standard

00:24:42,730 --> 00:24:48,159
there as an intent so now every new

00:24:45,450 --> 00:24:50,230
piece of code kind of carries the stance

00:24:48,159 --> 00:24:53,770
or at least going forward you have a

00:24:50,230 --> 00:24:58,150
chance to so you don't recommend going

00:24:53,770 --> 00:25:00,490
back and trying to fix obviously but

00:24:58,150 --> 00:25:03,450
nothing else we still introduce a

00:25:00,490 --> 00:25:05,169
standard as like a flag saying you know

00:25:03,450 --> 00:25:07,450
yep you should do it like that

00:25:05,169 --> 00:25:12,880
even if 90% of the thing doesn't follow

00:25:07,450 --> 00:25:15,010
it good thank you hi you mentioned that

00:25:12,880 --> 00:25:16,480
if you change the standard file the

00:25:15,010 --> 00:25:18,130
whole build will break how does that

00:25:16,480 --> 00:25:19,809
happen the compiler will still be happy

00:25:18,130 --> 00:25:22,450
is that some kind of proprietary system

00:25:19,809 --> 00:25:23,919
that you have well we do have to be

00:25:22,450 --> 00:25:25,539
committee chairs and stuff like that but

00:25:23,919 --> 00:25:28,750
I was kind of making the point that this

00:25:25,539 --> 00:25:31,390
is actual source code so yeah who knows

00:25:28,750 --> 00:25:35,230
maybe if you're not careful you do

00:25:31,390 --> 00:25:37,630
introduce a mistake but it is true that

00:25:35,230 --> 00:25:39,280
we have a couple of gates like code is

00:25:37,630 --> 00:25:42,010
you then pre-commit check so in

00:25:39,280 --> 00:25:44,110
realities it's quite hard to break the

00:25:42,010 --> 00:25:46,390
actual production code which changes to

00:25:44,110 --> 00:25:47,980
the standard I was kind of emphasizing

00:25:46,390 --> 00:25:57,100
the point that it's actual liveable

00:25:47,980 --> 00:25:58,790
source code thank you thank you very

00:25:57,100 --> 00:26:00,850
much

00:25:58,790 --> 00:26:00,850

YouTube URL: https://www.youtube.com/watch?v=j0CYkFPGjNg


