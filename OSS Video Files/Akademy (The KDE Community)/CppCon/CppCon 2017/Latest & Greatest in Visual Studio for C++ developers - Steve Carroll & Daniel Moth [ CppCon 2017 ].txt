Title: Latest & Greatest in Visual Studio for C++ developers - Steve Carroll & Daniel Moth [ CppCon 2017 ]
Publication date: 2017-10-03
Playlist: CppCon 2017
Description: 
	http://CppCon.org
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2017
—
Visual Studio 2017 was released this year and brings all sort of new functionality for C++ developers on any platform, not just Windows. In this talk, we'll cover many of the new features of the latest update of Visual Studio 2017 and give you a preview of new features coming in a major update later in 2017 that we've never shared before since you came to visit our hometown! We'll cover the ongoing evolution of our compiler and libraries, giving you an update on our conformance work as well as performance, and build throughput. We'll talk about the new enhancements to our Linux targeting. We'll talk about brand new unit testing capabilities for major test frameworks. We'll talk about improved support for CMake and our Open Folder experience for getting full Visual Studio IDE support for code that doesn't have a project or solution file. We'll also walk you through some cool new productivity and debugger features.
— 
Steve Carroll: Visual C++ Development Manager, Microsoft Corporation 

Steve Carroll is the dev manager for the Visual C++ team and previously the dev manager for the Visual Studio debuggers and profilers.

Daniel Moth: Group Program Manager, Microsoft
Visual Studio
—
Videos Filmed & Edited by Bash Films: http://www.BashFilms.com
—
Optimized And Managed by Digital Medium Ltd - events.digital-medium.co.uk
events@digital-medium.co.uk
Captions: 
	00:00:00,060 --> 00:00:06,120
so hello everyone and welcome to this

00:00:02,550 --> 00:00:07,649
visual studio for C++ developers session

00:00:06,120 --> 00:00:10,889
thank you for choosing to spend your

00:00:07,649 --> 00:00:13,710
time with us my name is Daniel moth and

00:00:10,889 --> 00:00:15,929
Steve Carrell is gonna be joining me for

00:00:13,710 --> 00:00:17,640
some cool demos later on and I want

00:00:15,929 --> 00:00:19,920
before I move on you guys should realize

00:00:17,640 --> 00:00:21,720
that this is the most important slide

00:00:19,920 --> 00:00:24,810
and that's because Steve and I manage

00:00:21,720 --> 00:00:26,430
the C++ product team so if you have any

00:00:24,810 --> 00:00:28,800
feedback on the direction we're going

00:00:26,430 --> 00:00:30,269
our emails are up there so even if it's

00:00:28,800 --> 00:00:31,560
just praise to say how well we're doing

00:00:30,269 --> 00:00:33,630
and that you loved everything that's

00:00:31,560 --> 00:00:35,130
going on you can email us at Daniel

00:00:33,630 --> 00:00:37,530
Bogdanoff with Microsoft it's calm if

00:00:35,130 --> 00:00:39,840
you have abuse criticism bugs you want

00:00:37,530 --> 00:00:41,760
to throw stuff email us at Steve Carroll

00:00:39,840 --> 00:00:43,500
at microsoft.com that's that's how we

00:00:41,760 --> 00:00:45,960
split the responsibilities I get the

00:00:43,500 --> 00:00:47,129
praise he gets the complaints but

00:00:45,960 --> 00:00:48,840
seriously this is the most important

00:00:47,129 --> 00:00:50,760
slide you should write down the URL

00:00:48,840 --> 00:00:54,149
that's on this slide so that's how blog

00:00:50,760 --> 00:00:56,129
address and everything that is gonna be

00:00:54,149 --> 00:00:58,590
in the rest of the of the talk URLs

00:00:56,129 --> 00:01:00,270
content and so on are in these slides

00:00:58,590 --> 00:01:02,399
that we're going to upload to that blog

00:01:00,270 --> 00:01:03,809
at the end of the day so you don't need

00:01:02,399 --> 00:01:06,000
to write down anything during the talk

00:01:03,809 --> 00:01:07,830
you just need that one URL and and

00:01:06,000 --> 00:01:10,740
you're set you got it so very important

00:01:07,830 --> 00:01:14,189
take that down now now over the weekend

00:01:10,740 --> 00:01:15,900
we added to our blog our annual C++

00:01:14,189 --> 00:01:20,570
developer survey and I wanted to repeat

00:01:15,900 --> 00:01:24,869
that here so please go to aka.ms/offweb

00:01:20,570 --> 00:01:26,700
ikonn and take the developer survey if

00:01:24,869 --> 00:01:28,350
you do that you'll have a chance to win

00:01:26,700 --> 00:01:31,140
this you know what's on the slides right

00:01:28,350 --> 00:01:32,520
now which is the Xbox one as bundle with

00:01:31,140 --> 00:01:34,350
games and we're going to actually

00:01:32,520 --> 00:01:36,420
physically give that out on Friday to

00:01:34,350 --> 00:01:38,130
the lucky winner over here

00:01:36,420 --> 00:01:39,390
even if you don't want the Xbox for

00:01:38,130 --> 00:01:41,670
whatever reason maybe you go to many

00:01:39,390 --> 00:01:43,409
home I don't know please do take the

00:01:41,670 --> 00:01:44,579
survey because it does help us influence

00:01:43,409 --> 00:01:46,259
the direction of where we're taking

00:01:44,579 --> 00:01:47,939
things which is better for you and even

00:01:46,259 --> 00:01:49,710
if you're not using our products help

00:01:47,939 --> 00:01:51,990
others by giving us your feedback it's

00:01:49,710 --> 00:01:53,189
it's worth it so please do that the

00:01:51,990 --> 00:01:55,770
other thing I wanted to do before we get

00:01:53,189 --> 00:01:58,140
into the talk is share a bit about our

00:01:55,770 --> 00:01:59,549
mission you know on our team so like I

00:01:58,140 --> 00:02:00,990
said we're the C++ product team at

00:01:59,549 --> 00:02:03,090
Microsoft we're in a group called the

00:02:00,990 --> 00:02:05,640
developer divisional Devdutt for short

00:02:03,090 --> 00:02:07,500
which is all about developers that's all

00:02:05,640 --> 00:02:09,599
this group does and specifically our

00:02:07,500 --> 00:02:10,920
goal is to improve the lives of every

00:02:09,599 --> 00:02:13,230
super smash developer out

00:02:10,920 --> 00:02:15,300
now not everything that we do is

00:02:13,230 --> 00:02:17,280
applicable to every C++ developer but a

00:02:15,300 --> 00:02:19,380
lot of it is so we stand by that broadly

00:02:17,280 --> 00:02:22,380
scoped goal and the way that we try to

00:02:19,380 --> 00:02:24,390
do that is via various ways one way is

00:02:22,380 --> 00:02:26,910
by enthusiastically participating with

00:02:24,390 --> 00:02:29,430
the C++ standard to improve the language

00:02:26,910 --> 00:02:31,709
itself for every developer in the world

00:02:29,430 --> 00:02:34,320
so that's one thing another thing we do

00:02:31,709 --> 00:02:37,320
of course is ship and improve as much as

00:02:34,320 --> 00:02:39,660
we can the visual C++ compiler and

00:02:37,320 --> 00:02:41,370
libraries toolset so as we see and we

00:02:39,660 --> 00:02:43,680
our goal with that is for it to be the

00:02:41,370 --> 00:02:46,200
best choice on Windows for targeting

00:02:43,680 --> 00:02:48,060
windows the other one that we'll be

00:02:46,200 --> 00:02:50,070
familiar with is the visual studio ide

00:02:48,060 --> 00:02:52,080
integrate development environments so

00:02:50,070 --> 00:02:54,060
our goal there is to have the best idea

00:02:52,080 --> 00:02:55,980
on Windows for targeting any platform

00:02:54,060 --> 00:02:58,500
and finally we continue to improve

00:02:55,980 --> 00:03:01,320
visual studio code and the Supersport

00:02:58,500 --> 00:03:02,970
extension to Visual Studio code which is

00:03:01,320 --> 00:03:05,519
applicable to all developers as it runs

00:03:02,970 --> 00:03:07,110
and all platforms so these are four of

00:03:05,519 --> 00:03:10,440
the areas where we invest a lot of our

00:03:07,110 --> 00:03:12,209
energy towards our mission now we're not

00:03:10,440 --> 00:03:14,640
going to talk in this talk about the

00:03:12,209 --> 00:03:16,440
first point any more about the C++

00:03:14,640 --> 00:03:18,510
standards I'm sure many of you know that

00:03:16,440 --> 00:03:20,579
we send around eight people at each one

00:03:18,510 --> 00:03:22,500
of the three meetings that happen every

00:03:20,579 --> 00:03:24,840
year as part of the standards we

00:03:22,500 --> 00:03:26,430
actually review proposals participate in

00:03:24,840 --> 00:03:28,910
proposals will lead proposals ourself

00:03:26,430 --> 00:03:31,860
and not to be underestimated we actually

00:03:28,910 --> 00:03:34,170
validate early versions of proposals

00:03:31,860 --> 00:03:36,510
with our compiler so the end result can

00:03:34,170 --> 00:03:38,160
be better for everyone both in the

00:03:36,510 --> 00:03:39,239
compiler and the library space in fact

00:03:38,160 --> 00:03:40,739
so we're not going to talk about that

00:03:39,239 --> 00:03:43,140
instead what we're going to focus on

00:03:40,739 --> 00:03:45,120
here are the middle two and before we go

00:03:43,140 --> 00:03:46,950
and focus on the middle two I wanted to

00:03:45,120 --> 00:03:48,750
just touch on the last one for those of

00:03:46,950 --> 00:03:51,180
you that don't know about it which is

00:03:48,750 --> 00:03:53,880
Visual Studio code so Visual Studio code

00:03:51,180 --> 00:03:55,380
is not an ID it's not an integrated

00:03:53,880 --> 00:03:58,680
development environment it's an editor

00:03:55,380 --> 00:04:00,510
it's a fully featured editor has source

00:03:58,680 --> 00:04:02,459
control integration is debugging support

00:04:00,510 --> 00:04:05,610
is extensibility and it's cross-platform

00:04:02,459 --> 00:04:07,530
it runs on Linux Mac OS and Windows so

00:04:05,610 --> 00:04:09,030
if for whatever reason you don't want to

00:04:07,530 --> 00:04:11,190
use Visual Studio can't use Visual

00:04:09,030 --> 00:04:13,859
Studio and your upbringing is more like

00:04:11,190 --> 00:04:14,280
them or sublime or Emacs something like

00:04:13,859 --> 00:04:15,690
that

00:04:14,280 --> 00:04:18,810
then this is the tool you want to check

00:04:15,690 --> 00:04:20,970
out and if you want to learn a lot more

00:04:18,810 --> 00:04:23,099
about this we have a talk here at CPP

00:04:20,970 --> 00:04:24,050
con so you should catch the recording of

00:04:23,099 --> 00:04:25,699
that when you go

00:04:24,050 --> 00:04:27,020
online and there isn't a say you should

00:04:25,699 --> 00:04:28,819
catch the recording is because it's

00:04:27,020 --> 00:04:30,710
taking place right now and you cannot be

00:04:28,819 --> 00:04:32,479
in two places at the same time so stay

00:04:30,710 --> 00:04:34,310
here you don't have to go there you can

00:04:32,479 --> 00:04:36,409
catch the recording when it goes online

00:04:34,310 --> 00:04:38,960
later that the wrong loo is given so

00:04:36,409 --> 00:04:40,190
that's Visual Studio a code alright so

00:04:38,960 --> 00:04:40,580
how are we going to spend our time in

00:04:40,190 --> 00:04:42,979
here

00:04:40,580 --> 00:04:44,870
well we've structured this talk into two

00:04:42,979 --> 00:04:46,849
parts in the first part we're going to

00:04:44,870 --> 00:04:48,530
focus our mm SVC and the compiler

00:04:46,849 --> 00:04:50,150
library's toolset because we kind of

00:04:48,530 --> 00:04:51,800
treat that as its own product because

00:04:50,150 --> 00:04:53,479
you could absolutely be using that on

00:04:51,800 --> 00:04:55,400
its own without ever going near Visual

00:04:53,479 --> 00:04:56,629
Studio and then the second part is going

00:04:55,400 --> 00:04:58,280
to be with this was about Visual Studio

00:04:56,629 --> 00:04:59,840
which many people use in conjunction

00:04:58,280 --> 00:05:01,940
with our compiler but you can actually

00:04:59,840 --> 00:05:04,430
use Visual Studio with any compiler that

00:05:01,940 --> 00:05:06,169
you like so it's a separate thing and in

00:05:04,430 --> 00:05:07,580
terms of what we're going to talk about

00:05:06,169 --> 00:05:08,870
you can see on the slide the kind of

00:05:07,580 --> 00:05:11,509
things that we're going to drill into

00:05:08,870 --> 00:05:13,879
but you should know that the first part

00:05:11,509 --> 00:05:15,650
is kind of short shorter as it says in

00:05:13,879 --> 00:05:17,509
the second part and it's all slight and

00:05:15,650 --> 00:05:19,669
then on the second part is going to be

00:05:17,509 --> 00:05:21,889
mostly demos so that's kind of like what

00:05:19,669 --> 00:05:23,360
we're going to go through so just a

00:05:21,889 --> 00:05:25,879
quick question as we dive into the first

00:05:23,360 --> 00:05:27,949
thing how many people here use for one

00:05:25,879 --> 00:05:29,330
of the C++ code bases the EMAs we see

00:05:27,949 --> 00:05:32,000
our own compiler can I see a show of

00:05:29,330 --> 00:05:33,500
hands is that everybody try and see

00:05:32,000 --> 00:05:35,229
maybe try the other way around who isn't

00:05:33,500 --> 00:05:37,880
using it there's no hands

00:05:35,229 --> 00:05:39,229
okay yeah so you guys are here to do

00:05:37,880 --> 00:05:41,750
competitive analysis I get it that's

00:05:39,229 --> 00:05:43,340
fine so we'll talk about it so for those

00:05:41,750 --> 00:05:45,590
of you that do use it I'm sure you want

00:05:43,340 --> 00:05:47,630
to know how we're doing against the top

00:05:45,590 --> 00:05:49,550
priority for the MSB C compiler team

00:05:47,630 --> 00:05:51,919
which is conformance with the C++

00:05:49,550 --> 00:05:53,479
standard so we're not going to go into

00:05:51,919 --> 00:05:55,069
any of the features on the slide all

00:05:53,479 --> 00:05:56,419
we're going to do is use it in order to

00:05:55,069 --> 00:05:58,729
report progress how we're tracking

00:05:56,419 --> 00:06:00,889
against it so all that white text that

00:05:58,729 --> 00:06:03,199
you see in the blue boxes are all things

00:06:00,889 --> 00:06:05,900
that we completed as of the Visual

00:06:03,199 --> 00:06:08,270
Studio 2017 RTM released in March or

00:06:05,900 --> 00:06:10,099
earlier and with that release in March

00:06:08,270 --> 00:06:11,560
we delivered on a promise to be a

00:06:10,099 --> 00:06:15,409
conformant with all the new features

00:06:11,560 --> 00:06:17,569
introduced by C + + 11 + C + + 14 as the

00:06:15,409 --> 00:06:20,719
track marks indicate up on the on the

00:06:17,569 --> 00:06:23,270
slide now since the RTM release of the

00:06:20,719 --> 00:06:26,389
compiler with Visual Studio in March we

00:06:23,270 --> 00:06:29,060
should 15.1 15.0 and in August we

00:06:26,389 --> 00:06:31,460
shipped 15.3 the version 15.3 of Visual

00:06:29,060 --> 00:06:33,469
Studio 2017 and with that even more

00:06:31,460 --> 00:06:36,199
conformance came out with ones that are

00:06:33,469 --> 00:06:37,639
in the in the yellow boxes so if some of

00:06:36,199 --> 00:06:39,289
you are on a Visual Studio 25th

00:06:37,639 --> 00:06:41,569
that's a whole bunch of conformance that

00:06:39,289 --> 00:06:43,310
you're missing out by not using our

00:06:41,569 --> 00:06:46,669
latest compilers that's to be incentive

00:06:43,310 --> 00:06:51,319
for you to to move now at the moment we

00:06:46,669 --> 00:06:53,150
have 15.4 preview is out and in November

00:06:51,319 --> 00:06:56,870
we're gonna have 15 5 so with that

00:06:53,150 --> 00:06:59,270
release 15 5 in in November we'll

00:06:56,870 --> 00:07:00,860
actually have even more conformance

00:06:59,270 --> 00:07:03,169
implemented as the purple boxes are

00:07:00,860 --> 00:07:06,080
showing and notice that on this slide I

00:07:03,169 --> 00:07:08,960
do not have a C++ 98 swimlane but there

00:07:06,080 --> 00:07:10,699
is one feature in there that many of you

00:07:08,960 --> 00:07:13,069
I know care about and I'm seeing nods

00:07:10,699 --> 00:07:14,870
about it already which is the two-phase

00:07:13,069 --> 00:07:16,819
name lookup and you know I'm delighted

00:07:14,870 --> 00:07:19,400
to share here that with that release

00:07:16,819 --> 00:07:21,650
were actually tackling that as well and

00:07:19,400 --> 00:07:23,569
this is part of our rejuvenation effort

00:07:21,650 --> 00:07:25,430
for our compiler code base which is very

00:07:23,569 --> 00:07:27,379
much your code base as so by introducing

00:07:25,430 --> 00:07:30,199
the SD based parser were able to tackle

00:07:27,379 --> 00:07:33,439
that finally and and get that out there

00:07:30,199 --> 00:07:34,849
now 15.5 isn't gonna be the last update

00:07:33,439 --> 00:07:37,550
to Visual Studio that there's going to

00:07:34,849 --> 00:07:39,770
be a 15.6 we're not imagined it with the

00:07:37,550 --> 00:07:43,339
name so it's 15 5 then it goes 15 6 and

00:07:39,770 --> 00:07:45,620
with that release I'm excited to confirm

00:07:43,339 --> 00:07:48,050
that at that point once we finished all

00:07:45,620 --> 00:07:49,430
the ground boxes across the compiler and

00:07:48,050 --> 00:07:51,379
the ID in intellisense

00:07:49,430 --> 00:07:53,479
we will actually be conforming with a

00:07:51,379 --> 00:07:56,569
C++ 17 stand that will be completely

00:07:53,479 --> 00:07:59,330
caught up so that is our goal there now

00:07:56,569 --> 00:08:01,400
beyond the actual blest standard is also

00:07:59,330 --> 00:08:02,839
the technical specifications so the

00:08:01,400 --> 00:08:04,669
slide has just enough room for that as

00:08:02,839 --> 00:08:06,469
well so you can see the color-coded

00:08:04,669 --> 00:08:08,389
boxes as to how we're doing against that

00:08:06,469 --> 00:08:10,069
behind the experimental flag since

00:08:08,389 --> 00:08:12,860
obviously we don't want you to not

00:08:10,069 --> 00:08:14,569
vertically take a dependency on on one

00:08:12,860 --> 00:08:16,879
of these since the spec is moving itself

00:08:14,569 --> 00:08:18,469
so please try the experimental stuff

00:08:16,879 --> 00:08:20,120
give us feedback both for our

00:08:18,469 --> 00:08:23,620
implementation but also for the for the

00:08:20,120 --> 00:08:25,370
spec itself so you can see there I

00:08:23,620 --> 00:08:27,259
mentioned on the slides a more

00:08:25,370 --> 00:08:28,669
permissive - and we talked about that

00:08:27,259 --> 00:08:29,960
last year but I wanted to touch on it

00:08:28,669 --> 00:08:32,990
again here for those that don't know

00:08:29,960 --> 00:08:34,640
basically permissive - is is a switch

00:08:32,990 --> 00:08:37,940
that puts the compiler in a mode where

00:08:34,640 --> 00:08:40,610
it will honor and enforce pre C++ 11

00:08:37,940 --> 00:08:42,890
standards it's off by default because we

00:08:40,610 --> 00:08:44,149
need to give the community the ecosystem

00:08:42,890 --> 00:08:46,699
and the open source libraries enough

00:08:44,149 --> 00:08:48,890
time to get used to the fact that our

00:08:46,699 --> 00:08:50,940
compiler without not actually by default

00:08:48,890 --> 00:08:53,250
enable Microsoft specific extent

00:08:50,940 --> 00:08:55,110
and Microsoft specific behaviors because

00:08:53,250 --> 00:08:57,240
all the templates code has a chance to

00:08:55,110 --> 00:08:59,250
break under this but whatever we

00:08:57,240 --> 00:09:01,950
encounter code bases but don't build

00:08:59,250 --> 00:09:04,260
with permissive - we go and fix that so

00:09:01,950 --> 00:09:07,080
the the biggest achievement recently I

00:09:04,260 --> 00:09:09,090
think was the actual Windows SDK headers

00:09:07,080 --> 00:09:10,410
so for our s3 this coming next month

00:09:09,090 --> 00:09:13,230
we've actually made that build

00:09:10,410 --> 00:09:15,210
completely cleaned with permissive - and

00:09:13,230 --> 00:09:17,100
also with a new projects that you create

00:09:15,210 --> 00:09:19,560
in Visual Studio because they're new new

00:09:17,100 --> 00:09:22,020
code we actually have permissive - on by

00:09:19,560 --> 00:09:23,880
default I'm not gonna go through all the

00:09:22,020 --> 00:09:25,910
other switches we talked about those

00:09:23,880 --> 00:09:28,680
last year but the point here is that you

00:09:25,910 --> 00:09:30,870
can adopt the conformance that you want

00:09:28,680 --> 00:09:32,280
at your own pace it's not like a big

00:09:30,870 --> 00:09:33,900
switch where you gotta go fix everything

00:09:32,280 --> 00:09:35,820
and make all of your codebase conformant

00:09:33,900 --> 00:09:37,170
if you want to do that you can but you

00:09:35,820 --> 00:09:39,630
can take chunks and move at your own

00:09:37,170 --> 00:09:41,850
pace towards that so this files without

00:09:39,630 --> 00:09:44,130
grades now we're talking about all these

00:09:41,850 --> 00:09:46,140
conformance and what's the easiest way

00:09:44,130 --> 00:09:49,050
for you to feel the benefits of that and

00:09:46,140 --> 00:09:50,580
that is by actually using open source

00:09:49,050 --> 00:09:53,010
libraries or libraries that previously

00:09:50,580 --> 00:09:55,140
wouldn't compiled without compiler that

00:09:53,010 --> 00:09:57,330
now do and some of these we're in that

00:09:55,140 --> 00:09:59,960
category now these libraries here is

00:09:57,330 --> 00:10:03,660
just the example of what we build live

00:09:59,960 --> 00:10:06,240
daily so we don't just go and test these

00:10:03,660 --> 00:10:08,970
libraries once we take the live branch

00:10:06,240 --> 00:10:10,860
with our life daily bits and we build

00:10:08,970 --> 00:10:13,380
them multiple times under various

00:10:10,860 --> 00:10:15,270
different modes and what we do is we

00:10:13,380 --> 00:10:16,830
clean them as we go along removes me

00:10:15,270 --> 00:10:18,450
removing if thefts and anything that's

00:10:16,830 --> 00:10:20,340
protecting against conformance gaps in

00:10:18,450 --> 00:10:22,170
our compiler as we plug those gaps we're

00:10:20,340 --> 00:10:25,020
gonna fix those code bases so they can

00:10:22,170 --> 00:10:27,090
be clean and portable and readable and

00:10:25,020 --> 00:10:29,790
so on and you'll notice to my point

00:10:27,090 --> 00:10:31,860
earlier that the permissive - is 55 out

00:10:29,790 --> 00:10:33,540
of the 58 so I asked you know like how

00:10:31,860 --> 00:10:35,250
about the other three as well we have

00:10:33,540 --> 00:10:36,780
pull requests out to those project

00:10:35,250 --> 00:10:38,130
owners that if they accept their code

00:10:36,780 --> 00:10:40,620
will be clean and it will build under

00:10:38,130 --> 00:10:43,230
permissive - so we're actively helping

00:10:40,620 --> 00:10:44,550
here the community come forward maybe in

00:10:43,230 --> 00:10:46,560
the past we weren't always the best

00:10:44,550 --> 00:10:47,910
citizens in the world but now I hope you

00:10:46,560 --> 00:10:49,590
can see that we're really trying real

00:10:47,910 --> 00:10:53,730
hard to make sure the right thing

00:10:49,590 --> 00:10:55,470
happens out there so that's about

00:10:53,730 --> 00:10:57,810
conformance sticking to the same theme

00:10:55,470 --> 00:11:00,150
of improving your code now that we have

00:10:57,810 --> 00:11:02,220
we're closing the gap on our conformance

00:11:00,150 --> 00:11:04,440
goals we can spend more time on other

00:11:02,220 --> 00:11:06,720
things such as code analysis

00:11:04,440 --> 00:11:08,339
or a compiler diagnostics so last year

00:11:06,720 --> 00:11:10,019
in this talk that we did we had this

00:11:08,339 --> 00:11:11,310
slide so I'm not gonna repeat it but it

00:11:10,019 --> 00:11:13,319
was the beginning of us starting to

00:11:11,310 --> 00:11:17,720
invest in the compiler diagnostic space

00:11:13,319 --> 00:11:21,089
since then we've released around 2000 in

00:11:17,720 --> 00:11:24,120
deliberate improvements to warnings and

00:11:21,089 --> 00:11:25,560
errors and I want to share a few of

00:11:24,120 --> 00:11:27,389
those so if you look here on the slide

00:11:25,560 --> 00:11:28,769
in the first column there's the code and

00:11:27,389 --> 00:11:30,480
in the second column you can see the

00:11:28,769 --> 00:11:32,310
error that you would get which was

00:11:30,480 --> 00:11:33,870
basically there's a syntax error where

00:11:32,310 --> 00:11:36,000
we just encountered something that we

00:11:33,870 --> 00:11:37,470
couldn't we weren't expecting and in the

00:11:36,000 --> 00:11:40,350
last column you can see the the

00:11:37,470 --> 00:11:43,050
improvement with a new diagnostic so you

00:11:40,350 --> 00:11:44,730
can see up there it says a use of

00:11:43,050 --> 00:11:46,319
dependent sample name requires template

00:11:44,730 --> 00:11:48,089
keywords so plain English and it really

00:11:46,319 --> 00:11:50,129
helps you actually know exactly what's

00:11:48,089 --> 00:11:52,829
what's going on also notice the little

00:11:50,129 --> 00:11:55,199
caret the upwards pointing arrow I'm

00:11:52,829 --> 00:11:56,670
told by our developers that we do

00:11:55,199 --> 00:11:58,680
they're better than other compilers in

00:11:56,670 --> 00:12:00,810
terms of pointing exactly where they

00:11:58,680 --> 00:12:03,209
shoe it so you can go verify that for

00:12:00,810 --> 00:12:05,459
yourselves and before I move over move

00:12:03,209 --> 00:12:07,079
on if we look at the last example there

00:12:05,459 --> 00:12:08,790
that's a case where of ambiguous

00:12:07,079 --> 00:12:10,740
initialization order where we wouldn't

00:12:08,790 --> 00:12:12,569
even give you an error and now we

00:12:10,740 --> 00:12:14,209
actually tell you again in plain English

00:12:12,569 --> 00:12:17,579
what's going on

00:12:14,209 --> 00:12:18,839
so beyond their warnings and other other

00:12:17,579 --> 00:12:23,130
things we're doing to improve your code

00:12:18,839 --> 00:12:25,139
is the C++ code check analysis tool so

00:12:23,130 --> 00:12:27,750
the C++ code guidelines were announced

00:12:25,139 --> 00:12:29,759
by IANA in this conference two years ago

00:12:27,750 --> 00:12:31,290
and we demonstrated then type and bounce

00:12:29,759 --> 00:12:33,899
checkers and also a preview of the

00:12:31,290 --> 00:12:35,490
lifetime checker and we've been shipping

00:12:33,899 --> 00:12:37,800
rules or checks whatever you want to

00:12:35,490 --> 00:12:39,839
call them every single time that we ship

00:12:37,800 --> 00:12:41,459
we ship more of that and on this slide

00:12:39,839 --> 00:12:44,310
I'm just summarizing under which

00:12:41,459 --> 00:12:46,949
sections or chapters we actually have

00:12:44,310 --> 00:12:49,949
made most investments recently so if you

00:12:46,949 --> 00:12:51,630
want your code to be you know conform

00:12:49,949 --> 00:12:53,639
unto the score guidelines you want to

00:12:51,630 --> 00:12:55,500
take advantage of that then please do go

00:12:53,639 --> 00:12:57,269
and turn this on because not on by

00:12:55,500 --> 00:12:59,009
default so go to the project properties

00:12:57,269 --> 00:13:01,769
like the screenshot shows and you can

00:12:59,009 --> 00:13:04,079
turn that on all right so now let's

00:13:01,769 --> 00:13:05,970
switch gears from things that we do in

00:13:04,079 --> 00:13:08,459
our compiler to help you with your

00:13:05,970 --> 00:13:10,680
source code to what our back-end

00:13:08,459 --> 00:13:12,720
compiler does in terms of executing your

00:13:10,680 --> 00:13:15,779
code faster in terms of the code they

00:13:12,720 --> 00:13:18,510
generate so last year we're here we

00:13:15,779 --> 00:13:20,400
talked about the new SSA base top team

00:13:18,510 --> 00:13:23,100
and we shed the time that we're seeing

00:13:20,400 --> 00:13:25,740
about 7% improvement over the eigen

00:13:23,100 --> 00:13:28,650
benchmarks and this year was sharing

00:13:25,740 --> 00:13:30,600
that against spectra case 17 when we

00:13:28,650 --> 00:13:33,600
look at comparing to our previous selves

00:13:30,600 --> 00:13:35,160
we've seen about 9% improvements and if

00:13:33,600 --> 00:13:36,510
you're wondering which specific areas

00:13:35,160 --> 00:13:38,310
that come in I'm not going to talk about

00:13:36,510 --> 00:13:40,440
that here but there on the slide for the

00:13:38,310 --> 00:13:42,030
low-level geeks among y'all say they're

00:13:40,440 --> 00:13:43,620
really interested in what we focused on

00:13:42,030 --> 00:13:45,390
these are some examples and there are

00:13:43,620 --> 00:13:47,400
folks at the booth that can tell you

00:13:45,390 --> 00:13:49,290
much more about that what I'll say

00:13:47,400 --> 00:13:51,300
before I move on from this is the reason

00:13:49,290 --> 00:13:52,590
we're sharing this benchmark numbers is

00:13:51,300 --> 00:13:55,740
because you can go validate it for

00:13:52,590 --> 00:13:56,970
yourselves right but really internally

00:13:55,740 --> 00:13:58,740
the way that we really move the

00:13:56,970 --> 00:13:59,970
performance needle is with a benefit

00:13:58,740 --> 00:14:03,030
that we have that we build all these

00:13:59,970 --> 00:14:05,190
really large code bases from internal

00:14:03,030 --> 00:14:09,000
mics of teams if you think about the

00:14:05,190 --> 00:14:11,310
office or Bing or Core CLR or chakra or

00:14:09,000 --> 00:14:13,110
Windows itself like all those teams have

00:14:11,310 --> 00:14:15,090
their own performance goals and they're

00:14:13,110 --> 00:14:16,590
driving us hard to improve the

00:14:15,090 --> 00:14:19,230
performance of the code that we generate

00:14:16,590 --> 00:14:21,660
and that has ripple effect benefits to

00:14:19,230 --> 00:14:23,490
all of you for your code bases that run

00:14:21,660 --> 00:14:25,200
on Windows but that's hard to share

00:14:23,490 --> 00:14:26,730
externally to kind of measure the

00:14:25,200 --> 00:14:28,440
progress which why we're also using

00:14:26,730 --> 00:14:30,240
benchmarks as a way to communicate that

00:14:28,440 --> 00:14:31,410
but we feel good about the investments

00:14:30,240 --> 00:14:31,980
that we're doing here and we'll do a lot

00:14:31,410 --> 00:14:34,260
more

00:14:31,980 --> 00:14:35,550
alright on the same thing on performance

00:14:34,260 --> 00:14:37,950
but switching from runtime performance

00:14:35,550 --> 00:14:40,500
to build throughput again if you look at

00:14:37,950 --> 00:14:42,090
the spec 2k 17 benchmark this time from

00:14:40,500 --> 00:14:45,000
a build triple perspective we have

00:14:42,090 --> 00:14:47,280
around 20% faster than the compiler

00:14:45,000 --> 00:14:48,960
ships with Visual Studio 2015 update 3

00:14:47,280 --> 00:14:51,960
so these are all very good reasons for

00:14:48,960 --> 00:14:53,610
you to want to move to the latest now

00:14:51,960 --> 00:14:55,110
last year we share this and I want to

00:14:53,610 --> 00:14:57,570
share it again since we're the topic of

00:14:55,110 --> 00:14:59,730
build throughput but the debug fast link

00:14:57,570 --> 00:15:02,130
linker option is now on by default

00:14:59,730 --> 00:15:04,260
and that gives you 2 to 4 times faster

00:15:02,130 --> 00:15:06,240
linking so that's definitely something

00:15:04,260 --> 00:15:08,310
that you you feel the performance of it

00:15:06,240 --> 00:15:10,980
as you move to the to the latest version

00:15:08,310 --> 00:15:12,660
also incredible have a product that you

00:15:10,980 --> 00:15:15,090
can go buy from them that paralyze your

00:15:12,660 --> 00:15:18,150
build across multiple cores and we've

00:15:15,090 --> 00:15:19,980
negotiated a free extension to Visual

00:15:18,150 --> 00:15:21,720
Studio so you can just go get that the

00:15:19,980 --> 00:15:23,160
only limitation is that if you have more

00:15:21,720 --> 00:15:25,110
than 8 cores on your develop machines

00:15:23,160 --> 00:15:27,360
it's not gonna use those as it goes and

00:15:25,110 --> 00:15:28,190
build so you should absolutely go check

00:15:27,360 --> 00:15:30,750
that out

00:15:28,190 --> 00:15:32,339
so at this point that's all I had to say

00:15:30,750 --> 00:15:34,439
about the MSB C

00:15:32,339 --> 00:15:35,519
by libraries tools and office kind of

00:15:34,439 --> 00:15:36,930
started cheating because I'm talking a

00:15:35,519 --> 00:15:38,509
bit about Visual Studio here and we

00:15:36,930 --> 00:15:41,129
touched on that when we talked about the

00:15:38,509 --> 00:15:43,259
score check analysis too so now we're

00:15:41,129 --> 00:15:46,019
going to really go and switch and talk

00:15:43,259 --> 00:15:49,439
about visual studio itself but before I

00:15:46,019 --> 00:15:52,459
do that does anyone have any pressing

00:15:49,439 --> 00:16:03,930
questions on what you've heard so far

00:15:52,459 --> 00:16:06,540
yes I can remember if it's owned by

00:16:03,930 --> 00:16:12,870
default this is yeah so you have to opt

00:16:06,540 --> 00:16:21,029
into the compiler diagnostic caret so

00:16:12,870 --> 00:16:22,680
turn that on yourself right but this

00:16:21,029 --> 00:16:23,790
already code basis remember that we're

00:16:22,680 --> 00:16:26,129
trying to make sure that the upgrade

00:16:23,790 --> 00:16:27,540
thing is smooth so this code base is out

00:16:26,129 --> 00:16:29,850
there that this could potentially have

00:16:27,540 --> 00:16:45,059
broken if we gave you that error just

00:16:29,850 --> 00:16:57,569
just out of the blue so eventually but

00:16:45,059 --> 00:16:58,679
we need to have all right so unless

00:16:57,569 --> 00:17:00,179
there's any other pressing questions

00:16:58,679 --> 00:17:04,079
we'll move into the visual studio

00:17:00,179 --> 00:17:07,049
portion so this is where I asked how

00:17:04,079 --> 00:17:11,490
many people here are not using Visual

00:17:07,049 --> 00:17:13,049
Studio 2017 don't be shy quite a few all

00:17:11,490 --> 00:17:14,669
right so now you're gonna see why you

00:17:13,049 --> 00:17:16,770
really really want to move to that and

00:17:14,669 --> 00:17:18,029
go convince whoever it takes to go do

00:17:16,770 --> 00:17:19,829
that and for those of you that are using

00:17:18,029 --> 00:17:22,289
it you might learn a thing or two as

00:17:19,829 --> 00:17:23,880
well so the first thing to talk about

00:17:22,289 --> 00:17:25,289
are the release cadence and I didn't

00:17:23,880 --> 00:17:26,939
even put all the releases up there at

00:17:25,289 --> 00:17:30,029
the top but attached on those I was

00:17:26,939 --> 00:17:31,169
talking about the DM SVC part we shipped

00:17:30,029 --> 00:17:32,880
very frequently in case you haven't

00:17:31,169 --> 00:17:34,260
noticed so it's a new world we should

00:17:32,880 --> 00:17:36,000
very frequently which gives us the

00:17:34,260 --> 00:17:37,380
opportunity to really small value and as

00:17:36,000 --> 00:17:38,909
you report issues is a smaller

00:17:37,380 --> 00:17:41,520
turnaround time because we'll ship soon

00:17:38,909 --> 00:17:42,990
after now the the first thing you'll

00:17:41,520 --> 00:17:45,250
encounter when you go and get visuals to

00:17:42,990 --> 00:17:47,680
2017 is the screenshot that I've got

00:17:45,250 --> 00:17:50,710
there now this is not just every design

00:17:47,680 --> 00:17:52,180
the UI layer for for our installer it is

00:17:50,710 --> 00:17:53,860
actually a big architectural change

00:17:52,180 --> 00:17:56,920
behind the scenes because this is what

00:17:53,860 --> 00:17:58,180
we call a work load based installer so

00:17:56,920 --> 00:18:00,190
that means you go and pick your work

00:17:58,180 --> 00:18:02,850
load which Maps one of these tiles for

00:18:00,190 --> 00:18:05,470
example here I've got selected the

00:18:02,850 --> 00:18:07,180
development with C++ and then you get

00:18:05,470 --> 00:18:10,060
and you get install only the things that

00:18:07,180 --> 00:18:12,370
you care about now why is this also well

00:18:10,060 --> 00:18:14,260
there are the three reasons one is they

00:18:12,370 --> 00:18:16,240
will put less stuff on your disk since

00:18:14,260 --> 00:18:17,680
you've actually selected specifically

00:18:16,240 --> 00:18:19,900
what you want it there isn't one big

00:18:17,680 --> 00:18:20,920
default so that's good because we're

00:18:19,900 --> 00:18:22,420
going to put less stuff on your disk

00:18:20,920 --> 00:18:24,880
it's going to be much faster to install

00:18:22,420 --> 00:18:26,410
so that's also good and because you've

00:18:24,880 --> 00:18:27,850
selected exactly what you wanted there's

00:18:26,410 --> 00:18:29,740
not gonna be any visual noise of things

00:18:27,850 --> 00:18:31,840
that you didn't want so for example if

00:18:29,740 --> 00:18:33,130
you select this workload in under 12

00:18:31,840 --> 00:18:35,500
minutes you'll have the visual studio

00:18:33,130 --> 00:18:37,120
installation you always wanted for C++

00:18:35,500 --> 00:18:38,890
if you didn't care about C sharp you're

00:18:37,120 --> 00:18:40,960
not gonna see any of that stuff and your

00:18:38,890 --> 00:18:43,210
this is gonna thank you for it as well

00:18:40,960 --> 00:18:45,340
now there is a fourth reason if you look

00:18:43,210 --> 00:18:46,720
on the side you can customize each one

00:18:45,340 --> 00:18:48,490
of these workloads you can customize the

00:18:46,720 --> 00:18:50,110
defaults and one of the options that I'm

00:18:48,490 --> 00:18:52,540
highlighting now with the Arab there is

00:18:50,110 --> 00:18:55,480
that now you can get the visual studio

00:18:52,540 --> 00:18:58,390
2015 toolset without getting the rest of

00:18:55,480 --> 00:19:00,190
the visual studio 2015 ID this is huge

00:18:58,390 --> 00:19:01,900
for the reason on the next slide which

00:19:00,190 --> 00:19:04,660
is we really wanted to make sure this is

00:19:01,900 --> 00:19:07,270
a very very easy upgrade if you go and

00:19:04,660 --> 00:19:09,280
select that option essentially when you

00:19:07,270 --> 00:19:10,660
then go with visual suit 2017 and open

00:19:09,280 --> 00:19:12,940
your existing projects

00:19:10,660 --> 00:19:14,350
you just don't upgrade them and now

00:19:12,940 --> 00:19:15,850
they're using the old compiler well

00:19:14,350 --> 00:19:18,100
you're taking advantage of everything

00:19:15,850 --> 00:19:20,020
that's new in the ID itself it cannot

00:19:18,100 --> 00:19:22,750
get easier than that in terms of moving

00:19:20,020 --> 00:19:24,730
to the latest ID so that is that it is

00:19:22,750 --> 00:19:26,020
huge now some of you may be thinking

00:19:24,730 --> 00:19:27,490
that's great but you've just been

00:19:26,020 --> 00:19:29,230
talking about all the value that you

00:19:27,490 --> 00:19:31,120
have in MSB I want to take advantage of

00:19:29,230 --> 00:19:32,890
that conformance performance and so on

00:19:31,120 --> 00:19:34,510
so I will want to do that and when you

00:19:32,890 --> 00:19:35,890
want to do that you go to the project

00:19:34,510 --> 00:19:37,450
properties and just like the screenshot

00:19:35,890 --> 00:19:39,040
shows you'll select the latest compiler

00:19:37,450 --> 00:19:41,740
and now you're in business using the

00:19:39,040 --> 00:19:43,270
latest bits now if someone heard this

00:19:41,740 --> 00:19:45,370
that was out on the street not you guys

00:19:43,270 --> 00:19:47,230
in this room they'll be thinking oh but

00:19:45,370 --> 00:19:48,940
now I've thrown the new compiler I have

00:19:47,230 --> 00:19:50,350
all these cleanup after doing my code

00:19:48,940 --> 00:19:51,820
because you're more conformal and so on

00:19:50,350 --> 00:19:53,470
but you guys are not thinking that

00:19:51,820 --> 00:19:55,720
because earlier we talked about compiler

00:19:53,470 --> 00:19:58,360
switches so you remember that you can

00:19:55,720 --> 00:19:58,990
actually go and take as much of a chunk

00:19:58,360 --> 00:20:00,370
of that

00:19:58,990 --> 00:20:03,490
you want with appropriate compiler

00:20:00,370 --> 00:20:04,870
switch and go at your own pace so now

00:20:03,490 --> 00:20:06,370
some of you may be thinking and I'm

00:20:04,870 --> 00:20:08,380
saying this because we've heard it from

00:20:06,370 --> 00:20:09,910
from customers it's I love this I love

00:20:08,380 --> 00:20:12,309
embracing all the new stuff and cleaning

00:20:09,910 --> 00:20:14,470
up my code and however I depend on

00:20:12,309 --> 00:20:15,040
third-party libraries they're not moving

00:20:14,470 --> 00:20:16,720
forward

00:20:15,040 --> 00:20:18,370
so I can't move forward essentially

00:20:16,720 --> 00:20:19,720
third-party libraries that are not built

00:20:18,370 --> 00:20:22,000
with the latest compiler that you want

00:20:19,720 --> 00:20:24,460
to use i holding you hostage to the old

00:20:22,000 --> 00:20:26,980
compiler and that is why for the for the

00:20:24,460 --> 00:20:28,450
first time ever that we've managed in

00:20:26,980 --> 00:20:30,610
this release to have binary

00:20:28,450 --> 00:20:32,110
compatibility between the two runtimes

00:20:30,610 --> 00:20:34,179
of the two tool sets and what that means

00:20:32,110 --> 00:20:36,460
to spell it out is that that third-party

00:20:34,179 --> 00:20:38,260
library can actually stay built the way

00:20:36,460 --> 00:20:40,420
it was with the old compiler while

00:20:38,260 --> 00:20:42,460
you're calling code that uses it can

00:20:40,420 --> 00:20:44,290
move forward to the latest and you that

00:20:42,460 --> 00:20:46,150
will all still work so you're no longer

00:20:44,290 --> 00:20:47,770
held hostage from that this is this is a

00:20:46,150 --> 00:20:48,940
huge thing that not everybody

00:20:47,770 --> 00:20:50,350
understands when they're thinking about

00:20:48,940 --> 00:20:52,179
a pain of upgrading and thinking of

00:20:50,350 --> 00:20:53,980
third-party components so that's time to

00:20:52,179 --> 00:20:57,130
take back to the decision makers of your

00:20:53,980 --> 00:20:58,570
companies now at this point someone may

00:20:57,130 --> 00:20:59,950
be thinking well I use some open-source

00:20:58,570 --> 00:21:01,270
libraries and I do want to get the

00:20:59,950 --> 00:21:02,559
latest there's all kinds of goodness in

00:21:01,270 --> 00:21:04,900
the latest versions of these libraries

00:21:02,559 --> 00:21:06,610
do I have to go and clean them up all on

00:21:04,900 --> 00:21:08,290
my own and I wouldn't be asking that

00:21:06,610 --> 00:21:10,900
question if I didn't have an answer so

00:21:08,290 --> 00:21:13,480
the answer is and no you don't there is

00:21:10,900 --> 00:21:15,250
VC package and if you're thinking what

00:21:13,480 --> 00:21:17,530
is this package or the whole slide on

00:21:15,250 --> 00:21:19,390
that so missus package something that we

00:21:17,530 --> 00:21:21,240
announced last year here it's one year

00:21:19,390 --> 00:21:23,260
old now and it's a free open-source

00:21:21,240 --> 00:21:25,300
project which is a repository of

00:21:23,260 --> 00:21:27,700
open-source libraries which are growing

00:21:25,300 --> 00:21:30,100
every day and you can go there and find

00:21:27,700 --> 00:21:31,390
the library that you depend on and it

00:21:30,100 --> 00:21:32,050
will already be built with our latest

00:21:31,390 --> 00:21:33,370
compiler

00:21:32,050 --> 00:21:34,840
and if you have a library that's not

00:21:33,370 --> 00:21:37,480
there that you'd like to be there email

00:21:34,840 --> 00:21:39,040
us and we'll we'll take care of that now

00:21:37,480 --> 00:21:41,410
if you want to learn a lot more about VC

00:21:39,040 --> 00:21:43,809
package then you'll want to go to

00:21:41,410 --> 00:21:46,530
tomorrow's open content talk at the

00:21:43,809 --> 00:21:48,880
friendly time of 8 a.m. and that's where

00:21:46,530 --> 00:21:50,410
Robert and Eric are gonna talk more

00:21:48,880 --> 00:21:52,600
about it you're also gonna see it in

00:21:50,410 --> 00:21:55,179
action now as Steve is going to

00:21:52,600 --> 00:21:56,950
demonstrate everything that I've talked

00:21:55,179 --> 00:22:00,880
to up until now for the visual studio

00:21:56,950 --> 00:22:03,640
parts including a bit on on VC package

00:22:00,880 --> 00:22:06,010
and then I'll come up and we'll talk

00:22:03,640 --> 00:22:07,690
more about other stuff are you ready

00:22:06,010 --> 00:22:09,490
Steve I I am I'm ready to push the

00:22:07,690 --> 00:22:12,640
button all right Steve over to you hey

00:22:09,490 --> 00:22:13,690
hey look code all right so

00:22:12,640 --> 00:22:15,340
I'm gonna just walk you through that

00:22:13,690 --> 00:22:16,870
process we were having a sort of

00:22:15,340 --> 00:22:18,460
pre-show here we were discussing the

00:22:16,870 --> 00:22:20,050
fact that there you know there's only so

00:22:18,460 --> 00:22:21,370
fast you can get people to understand

00:22:20,050 --> 00:22:22,450
that something has changed important in

00:22:21,370 --> 00:22:25,030
the world and so we really wanted to

00:22:22,450 --> 00:22:28,360
stress this point so I've got a 2015

00:22:25,030 --> 00:22:33,130
solution here and this project has a

00:22:28,360 --> 00:22:34,930
dependence on one third party 2015

00:22:33,130 --> 00:22:36,460
library so as you can see you this is me

00:22:34,930 --> 00:22:38,650
opening it for the very first time and

00:22:36,460 --> 00:22:41,500
I'm going to be given the retarget

00:22:38,650 --> 00:22:43,300
dialog and so you know we want you to go

00:22:41,500 --> 00:22:44,470
forward of course and so you know first

00:22:43,300 --> 00:22:46,990
thing we do is we give you the option to

00:22:44,470 --> 00:22:49,750
move to the latest Windows SDK and the

00:22:46,990 --> 00:22:53,410
latest platform toolset so 141 in this

00:22:49,750 --> 00:22:56,170
case represents the vs 2017 stream of

00:22:53,410 --> 00:22:57,550
compilers but to get started I want to

00:22:56,170 --> 00:22:59,830
show you that of course that's not

00:22:57,550 --> 00:23:01,720
necessary you can click no and click OK

00:22:59,830 --> 00:23:03,640
and again it's been like that for a long

00:23:01,720 --> 00:23:06,580
time and it's amazing how many people

00:23:03,640 --> 00:23:08,800
don't know so as you can see up here now

00:23:06,580 --> 00:23:12,130
it is a Visual Studio 2015 marked

00:23:08,800 --> 00:23:14,470
project but this is 2017 and everything

00:23:12,130 --> 00:23:17,320
just works so if I go here I get you

00:23:14,470 --> 00:23:19,420
know full intellisense I can go jump to

00:23:17,320 --> 00:23:22,060
definition all of these things work and

00:23:19,420 --> 00:23:24,550
if I I have this machine set up the way

00:23:22,060 --> 00:23:27,310
daniel that had in his slide where i

00:23:24,550 --> 00:23:29,650
have installed the vs 2015 update 3

00:23:27,310 --> 00:23:31,300
toolset from this rather than installing

00:23:29,650 --> 00:23:33,760
all of these rules to do 2015 on this

00:23:31,300 --> 00:23:36,490
application so what i'm going to do this

00:23:33,760 --> 00:23:37,510
is a basically a little graphics demo so

00:23:36,490 --> 00:23:39,220
i'm just going to show you that it

00:23:37,510 --> 00:23:43,000
actually will work it's going to build

00:23:39,220 --> 00:23:44,860
with the digital studio 2015 toolkit and

00:23:43,000 --> 00:23:46,870
then if i run it under the debugger and

00:23:44,860 --> 00:23:48,790
you look very carefully I want you stare

00:23:46,870 --> 00:23:51,040
very closely at this until you are all

00:23:48,790 --> 00:23:52,570
hypnotized upgrade to Visual Studio 2017

00:23:51,040 --> 00:23:54,850
I'll create divisions do all right so

00:23:52,570 --> 00:23:56,320
that works right but now what I want to

00:23:54,850 --> 00:23:59,020
do is I want to walk you through all of

00:23:56,320 --> 00:24:01,570
the steps to get yourself to sort of

00:23:59,020 --> 00:24:03,310
like modern happiness right so the first

00:24:01,570 --> 00:24:04,690
thing I want to do is hey I dismissed

00:24:03,310 --> 00:24:06,040
that dialogue before and I want to make

00:24:04,690 --> 00:24:07,720
sure in place you did dismiss that

00:24:06,040 --> 00:24:09,760
dialogue before that you know how to get

00:24:07,720 --> 00:24:11,890
it back so if you click on here and you

00:24:09,760 --> 00:24:13,660
go to retarget projects it will again

00:24:11,890 --> 00:24:15,040
give me that because the next time you

00:24:13,660 --> 00:24:16,030
open it after you've dismissed this one

00:24:15,040 --> 00:24:18,070
time and you're not gonna see it again

00:24:16,030 --> 00:24:19,450
until you just select it manually this

00:24:18,070 --> 00:24:21,430
time I'm going to accept the defaults

00:24:19,450 --> 00:24:22,660
I'm going to take the latest SDK and I'm

00:24:21,430 --> 00:24:25,180
going to take the latest version of the

00:24:22,660 --> 00:24:26,530
compiler you can see up here that the

00:24:25,180 --> 00:24:29,530
marking is gone because this is now

00:24:26,530 --> 00:24:31,930
a 2017 project I'm gonna go ahead I'm

00:24:29,530 --> 00:24:33,940
gonna build and amazingly this is

00:24:31,930 --> 00:24:36,070
actually gonna work even though I have

00:24:33,940 --> 00:24:37,660
that statically linked component in here

00:24:36,070 --> 00:24:39,640
and just to show you how that worked

00:24:37,660 --> 00:24:42,220
right I just want to make you know

00:24:39,640 --> 00:24:43,270
nothing up my sleeve magician style here

00:24:42,220 --> 00:24:45,670
I'm gonna go in here I'm going to show

00:24:43,270 --> 00:24:47,410
you inside the linker here's where s DL

00:24:45,670 --> 00:24:48,790
- which is the name of the static

00:24:47,410 --> 00:24:50,230
library that I've done in here so that

00:24:48,790 --> 00:24:54,160
is still getting picked up that is the

00:24:50,230 --> 00:24:56,800
2015 based static library and so I built

00:24:54,160 --> 00:24:58,990
it and now again if you do that you can

00:24:56,800 --> 00:25:02,170
get hypnotized again and more likely to

00:24:58,990 --> 00:25:03,790
do it great okay so that's great so the

00:25:02,170 --> 00:25:05,200
next thing I want to show in here and

00:25:03,790 --> 00:25:06,820
you're in your process of taking your

00:25:05,200 --> 00:25:09,550
old code forwards as you add you pick

00:25:06,820 --> 00:25:11,620
your time is coming here into the

00:25:09,550 --> 00:25:14,590
project learn how to use a mouse a

00:25:11,620 --> 00:25:16,900
trackpad in this case and then if you go

00:25:14,590 --> 00:25:19,390
into here on C C++ you go down to the

00:25:16,900 --> 00:25:20,770
language thing this is new in BS 2017

00:25:19,390 --> 00:25:22,960
it's the first time we've ever had

00:25:20,770 --> 00:25:26,020
language specifications like this and so

00:25:22,960 --> 00:25:28,420
if you click in here the default will be

00:25:26,020 --> 00:25:29,920
C++ 14 because that was the newest

00:25:28,420 --> 00:25:32,710
existing standard at the time that we

00:25:29,920 --> 00:25:35,470
released our TW but now you can select

00:25:32,710 --> 00:25:37,360
in here and choose the 17 spec so I'm

00:25:35,470 --> 00:25:40,390
gonna do that again I'm gonna go in here

00:25:37,360 --> 00:25:42,250
I'm gonna build it's gonna work there's

00:25:40,390 --> 00:25:44,260
not any breaking changes in this and now

00:25:42,250 --> 00:25:46,180
if I go in here and type you know

00:25:44,260 --> 00:25:49,210
include optional or whatever your

00:25:46,180 --> 00:25:52,780
favorite header is and build again that

00:25:49,210 --> 00:25:54,190
will work as well okay so great so what

00:25:52,780 --> 00:25:55,450
do I want to do next the next thing I

00:25:54,190 --> 00:25:57,520
think you want to do what your code is

00:25:55,450 --> 00:26:00,340
take advantage of the fact that we are

00:25:57,520 --> 00:26:04,600
locking your code into the non

00:26:00,340 --> 00:26:06,430
extensions version of pure C++ 17 what

00:26:04,600 --> 00:26:07,990
I'm showing you right here is these bits

00:26:06,430 --> 00:26:11,470
that you'll see for these first couple

00:26:07,990 --> 00:26:14,080
of demos are all 15.4 preview and in

00:26:11,470 --> 00:26:16,210
15.5 we will add an official thing for

00:26:14,080 --> 00:26:17,860
this but for now whenever you want to

00:26:16,210 --> 00:26:19,720
you can add a permissive - here in

00:26:17,860 --> 00:26:21,400
additional options and again this will

00:26:19,720 --> 00:26:23,560
lock you in so no one accidentally adds

00:26:21,400 --> 00:26:25,630
some sort of one phase lookup based code

00:26:23,560 --> 00:26:28,120
into your code base so you kind of get

00:26:25,630 --> 00:26:30,610
clean get the rs3 SDK and then go

00:26:28,120 --> 00:26:33,810
forward again it just works alright so

00:26:30,610 --> 00:26:33,810
I'm pretty close at this point

00:26:35,750 --> 00:26:38,960
not in this demo with the amount of time

00:26:37,760 --> 00:26:41,270
I have left in the top but come to the

00:26:38,960 --> 00:26:43,549
booth afterwards act please okay because

00:26:41,270 --> 00:26:46,130
I think I'm not cheating so the next

00:26:43,549 --> 00:26:47,450
thing I want to show you is VC package

00:26:46,130 --> 00:26:49,549
okay so we talked a little bit about

00:26:47,450 --> 00:26:51,350
this this is the VC package webpage it's

00:26:49,549 --> 00:26:53,210
as easy as go to github look for VC

00:26:51,350 --> 00:26:55,010
package and it's like basically a batch

00:26:53,210 --> 00:26:57,559
file clone this thing and bring it down

00:26:55,010 --> 00:26:59,690
but the magical directory in here is

00:26:57,559 --> 00:27:01,400
this ports directory this will tell you

00:26:59,690 --> 00:27:03,080
all of the things in here is Erica in

00:27:01,400 --> 00:27:04,280
the room is not but if you were in the

00:27:03,080 --> 00:27:06,020
room he would tell me that there are now

00:27:04,280 --> 00:27:08,780
I think three hundred fifty two

00:27:06,020 --> 00:27:11,120
different libraries in VC package like

00:27:08,780 --> 00:27:13,370
we went from zero or we've launched with

00:27:11,120 --> 00:27:15,410
19 or something two to three hundred

00:27:13,370 --> 00:27:17,450
actively maintained packages in like

00:27:15,410 --> 00:27:20,059
nine months it's been fantastic and as

00:27:17,450 --> 00:27:22,400
you can see here I have STL too so

00:27:20,059 --> 00:27:23,870
that's great I'm gonna go in here and I

00:27:22,400 --> 00:27:25,250
did it offhand because what will happen

00:27:23,870 --> 00:27:27,230
if you type this is it will actually

00:27:25,250 --> 00:27:29,870
pull it down apply some patches and

00:27:27,230 --> 00:27:32,210
build it and get it locally installed so

00:27:29,870 --> 00:27:34,100
I have STL - installed locally and then

00:27:32,210 --> 00:27:36,710
what I did was VC package integrate

00:27:34,100 --> 00:27:38,120
install what this will do it's what it

00:27:36,710 --> 00:27:40,700
says it will do is it will make it so

00:27:38,120 --> 00:27:43,250
that any NS build based project will be

00:27:40,700 --> 00:27:45,650
able to pound include anything inside of

00:27:43,250 --> 00:27:47,690
that as well as linking will just work

00:27:45,650 --> 00:27:48,799
and so let me demonstrate that of course

00:27:47,690 --> 00:27:50,809
in this particular case because I

00:27:48,799 --> 00:27:52,640
already had it in there the 2015 version

00:27:50,809 --> 00:27:54,620
I want to replace that one perhaps

00:27:52,640 --> 00:27:55,940
there's been a you know security thing

00:27:54,620 --> 00:27:57,679
perhaps you want the version with the

00:27:55,940 --> 00:28:01,730
latest performance so if I go back into

00:27:57,679 --> 00:28:03,799
the linker an input and delete out STL -

00:28:01,730 --> 00:28:07,100
and again with the learning to use them

00:28:03,799 --> 00:28:08,929
trackpad and hit enter and I rebuild it

00:28:07,100 --> 00:28:11,090
one more time now it will rebuild

00:28:08,929 --> 00:28:13,669
against that you see package version and

00:28:11,090 --> 00:28:15,559
now everything is 2017 everything's late

00:28:13,669 --> 00:28:27,590
aspect and everything is no extensions

00:28:15,559 --> 00:28:30,200
so yeah thanks Becky alright so we

00:28:27,590 --> 00:28:32,480
talked there a whole bunch about about

00:28:30,200 --> 00:28:33,770
upgrades so your existing projects but

00:28:32,480 --> 00:28:37,250
some of you said that you're not using

00:28:33,770 --> 00:28:39,830
Visual Studio at all so in fact let me

00:28:37,250 --> 00:28:43,690
test that how many have C++ code bases

00:28:39,830 --> 00:28:43,690
that you don't use Visual Studio at all

00:28:44,039 --> 00:28:48,090
I'm a really proud hands and someone's

00:28:46,350 --> 00:28:50,820
like more you know like can I say that

00:28:48,090 --> 00:28:53,669
yes you can't so we here here that's

00:28:50,820 --> 00:28:56,249
rarely it's shocking but it happens so

00:28:53,669 --> 00:28:58,590
so we found that one of the reasons is

00:28:56,249 --> 00:29:01,619
that folks use different build systems

00:28:58,590 --> 00:29:04,200
and Visual Studio is very much msbuild

00:29:01,619 --> 00:29:05,639
oriented or has been traditionally so

00:29:04,200 --> 00:29:07,320
that's been a blocker it's perceived

00:29:05,639 --> 00:29:09,299
there's a too much hassle to bring it

00:29:07,320 --> 00:29:11,340
into Visual Studio so for that reason we

00:29:09,299 --> 00:29:13,470
went and invested in what we call an

00:29:11,340 --> 00:29:14,249
open folder so open folders exactly what

00:29:13,470 --> 00:29:16,349
it sounds like

00:29:14,249 --> 00:29:18,239
you take Visual Studio and you point and

00:29:16,349 --> 00:29:20,039
you browse to your disk find your C++

00:29:18,239 --> 00:29:21,749
code base no matter what build system

00:29:20,039 --> 00:29:23,940
you're using you hit open and now the

00:29:21,749 --> 00:29:26,129
code base is in Visual Studio now you

00:29:23,940 --> 00:29:27,899
may want to get some richer intellisense

00:29:26,129 --> 00:29:29,129
maybe debug in maybe you want to build

00:29:27,899 --> 00:29:30,749
from Visual Studio rather than from the

00:29:29,129 --> 00:29:32,789
command line in those cases you just

00:29:30,749 --> 00:29:34,440
type a little bit of JSON to let us know

00:29:32,789 --> 00:29:35,820
some information that we need and then

00:29:34,440 --> 00:29:37,769
you can get the full visuals to the

00:29:35,820 --> 00:29:40,049
experience with your build system of

00:29:37,769 --> 00:29:41,489
choice and without having to go anywhere

00:29:40,049 --> 00:29:43,919
near Emma's build or Visual Studio

00:29:41,489 --> 00:29:46,710
projects or anything like that now a

00:29:43,919 --> 00:29:47,820
special case of that is C make so I say

00:29:46,710 --> 00:29:49,799
special case it literally the

00:29:47,820 --> 00:29:52,019
specialization you'll browse as I just

00:29:49,799 --> 00:29:54,330
described and if we detect that's a C

00:29:52,019 --> 00:29:56,279
make based code base you don't even have

00:29:54,330 --> 00:29:58,710
to give us a JSON little files we'll

00:29:56,279 --> 00:30:01,320
just do that automatically and you will

00:29:58,710 --> 00:30:02,429
get a native C make experience out of

00:30:01,320 --> 00:30:04,349
the box I want to stress that it's

00:30:02,429 --> 00:30:05,519
native it's not generating the project

00:30:04,349 --> 00:30:08,609
behind scene something is a native

00:30:05,519 --> 00:30:10,710
experience of C maker in there so Steve

00:30:08,609 --> 00:30:13,049
now is going to demonstrate both C make

00:30:10,710 --> 00:30:16,139
and the open folder so Steve over to you

00:30:13,049 --> 00:30:18,840
okay so back to this so rather than

00:30:16,139 --> 00:30:21,749
going in and collecting collect clicking

00:30:18,840 --> 00:30:23,849
collecting a product open project I'm

00:30:21,749 --> 00:30:25,499
gonna click open folder and so I'm gonna

00:30:23,849 --> 00:30:27,239
go on my disk and all I have done to

00:30:25,499 --> 00:30:31,440
prep this literally all I have done to

00:30:27,239 --> 00:30:33,929
prep this is do a git clone on bullet 3

00:30:31,440 --> 00:30:35,220
now this is for our Google friends in

00:30:33,929 --> 00:30:37,349
the front rows who are not using Visual

00:30:35,220 --> 00:30:38,879
Studio there's this is a code base from

00:30:37,349 --> 00:30:42,179
Google it's a sort of bullet physics

00:30:38,879 --> 00:30:42,539
thing and because they don't use Visual

00:30:42,179 --> 00:30:44,789
Studio

00:30:42,539 --> 00:30:46,409
there is no like Visual Studio solution

00:30:44,789 --> 00:30:48,359
or anything in here that we are using so

00:30:46,409 --> 00:30:51,479
all I have done is pointed it directly

00:30:48,359 --> 00:30:54,330
at that folder and because it does

00:30:51,479 --> 00:30:56,450
indeed have AC make list text file when

00:30:54,330 --> 00:30:58,640
we open the folder it will detect that

00:30:56,450 --> 00:31:00,530
it will light up the IDE and get all the

00:30:58,640 --> 00:31:02,150
configuration information it needs from

00:31:00,530 --> 00:31:03,860
the C make server now I want to be clear

00:31:02,150 --> 00:31:06,080
we're not like in the background doing

00:31:03,860 --> 00:31:07,970
the C make generation of a solution file

00:31:06,080 --> 00:31:10,160
and then opening that up this is like

00:31:07,970 --> 00:31:12,620
real it will go in it will detect C make

00:31:10,160 --> 00:31:14,810
switch into this mode and use the server

00:31:12,620 --> 00:31:16,340
thing so to get started let's take a

00:31:14,810 --> 00:31:18,950
look at the C make list out text file

00:31:16,340 --> 00:31:20,330
this is the main one for the project as

00:31:18,950 --> 00:31:22,700
you can see we get some colorization

00:31:20,330 --> 00:31:24,770
going on here and indeed if i come in to

00:31:22,700 --> 00:31:27,110
this fold the file and start typing i do

00:31:24,770 --> 00:31:30,020
get some helpful intellisense in there

00:31:27,110 --> 00:31:32,060
so that's nice I want to be clear that I

00:31:30,020 --> 00:31:34,760
didn't do any configuration for this at

00:31:32,060 --> 00:31:36,200
all and indeed if you wanted to do some

00:31:34,760 --> 00:31:38,600
what you would do is you would come to

00:31:36,200 --> 00:31:39,890
this C make settings JSON file and this

00:31:38,600 --> 00:31:41,480
sort of takes the place if you have ever

00:31:39,890 --> 00:31:43,340
used C make from the command line before

00:31:41,480 --> 00:31:44,960
of the place where you would kind of put

00:31:43,340 --> 00:31:46,400
on the command line stuff and if you

00:31:44,960 --> 00:31:48,710
look in here I've got a bunch of

00:31:46,400 --> 00:31:50,240
different configurations right you can

00:31:48,710 --> 00:31:52,040
see that by default we're using the

00:31:50,240 --> 00:31:54,820
ninja generator here that's the default

00:31:52,040 --> 00:31:57,110
one but if I come in here and I type

00:31:54,820 --> 00:31:58,970
this you can see I have the ability to

00:31:57,110 --> 00:32:01,670
use the Visual Studio generators for 14

00:31:58,970 --> 00:32:05,300
and 15 so I'm gonna get that back out of

00:32:01,670 --> 00:32:07,220
there again sort of to prove there's

00:32:05,300 --> 00:32:09,950
nothing up my sleeve I'm gonna show you

00:32:07,220 --> 00:32:11,480
that all of the UI features that you

00:32:09,950 --> 00:32:13,520
would expect in the open project or

00:32:11,480 --> 00:32:15,500
solution scenario still work here I can

00:32:13,520 --> 00:32:18,020
use the new cool find out references

00:32:15,500 --> 00:32:21,470
experience inside of Visual Studio 2017

00:32:18,020 --> 00:32:23,450
with this and it just works this

00:32:21,470 --> 00:32:25,880
particular project has a number of

00:32:23,450 --> 00:32:28,760
different targets and so I have selected

00:32:25,880 --> 00:32:30,530
the one called app basic example GUI and

00:32:28,760 --> 00:32:32,720
again for visual studio because it's an

00:32:30,530 --> 00:32:34,160
IDE I think to sort of prove that this

00:32:32,720 --> 00:32:35,810
is a full-fledged experience I'm gonna

00:32:34,160 --> 00:32:37,610
kick off the debugger here I'm gonna

00:32:35,810 --> 00:32:40,280
click that I'm gonna hit this breakpoint

00:32:37,610 --> 00:32:41,570
I get you know all the sorts of usual

00:32:40,280 --> 00:32:44,630
Visual Studio experience that you'd

00:32:41,570 --> 00:32:46,520
expect here and then if I kick it you'll

00:32:44,630 --> 00:32:50,630
see some some blocks break up in on your

00:32:46,520 --> 00:32:54,190
ball ok great so that is how C make

00:32:50,630 --> 00:32:57,560
works it's more or less it just works so

00:32:54,190 --> 00:32:59,090
the next thing I want to show you is C

00:32:57,560 --> 00:33:00,740
make is intended to be magic but not

00:32:59,090 --> 00:33:02,210
everything can be magic sometimes you

00:33:00,740 --> 00:33:04,280
have to tell us things and this is an

00:33:02,210 --> 00:33:06,530
audience of C++ developers who like to

00:33:04,280 --> 00:33:09,110
tweak things so let me show you how to

00:33:06,530 --> 00:33:10,220
do something a little nuttier I'm going

00:33:09,110 --> 00:33:13,429
to use Visual Studio

00:33:10,220 --> 00:33:18,140
to build in have intellisense build and

00:33:13,429 --> 00:33:21,710
debug using GCC with mingw and emesis

00:33:18,140 --> 00:33:22,370
from Visual Studio so I'm gonna go here

00:33:21,710 --> 00:33:25,370
samples

00:33:22,370 --> 00:33:26,990
I'm gonna go choose my mingw demo I will

00:33:25,370 --> 00:33:29,210
warn you that it is a very simple mingw

00:33:26,990 --> 00:33:31,610
demo okay so I'm gonna walk you through

00:33:29,210 --> 00:33:33,860
very quickly the three files that are

00:33:31,610 --> 00:33:36,380
necessary to unlock this behavior if you

00:33:33,860 --> 00:33:37,850
want to use Visual Studio with you know

00:33:36,380 --> 00:33:40,640
something a little bit more exciting

00:33:37,850 --> 00:33:44,120
like a mingw so the first one is cpp

00:33:40,640 --> 00:33:45,679
properties JSON I want to be clear we'll

00:33:44,120 --> 00:33:48,140
back in the back of the room here wrote

00:33:45,679 --> 00:33:51,289
a blog post if you go on your favorite

00:33:48,140 --> 00:33:53,990
web browser and search for visual studio

00:33:51,289 --> 00:33:55,820
and mingw you will find basically the

00:33:53,990 --> 00:33:57,919
template for how to splat some

00:33:55,820 --> 00:33:59,870
environment variables into here so I

00:33:57,919 --> 00:34:02,000
literally took that and put it in here

00:33:59,870 --> 00:34:03,110
there are two halves to this file one of

00:34:02,000 --> 00:34:04,820
them is just about setting up your

00:34:03,110 --> 00:34:07,280
environment obviously if we want to

00:34:04,820 --> 00:34:08,869
build with the MSS /m mingw environment

00:34:07,280 --> 00:34:10,429
I need some access to some of those

00:34:08,869 --> 00:34:12,440
environment variables you can either

00:34:10,429 --> 00:34:14,810
launch this visual studio so it will

00:34:12,440 --> 00:34:15,830
inherit them via the MCS shell but what

00:34:14,810 --> 00:34:17,300
I've done is I've copied those

00:34:15,830 --> 00:34:19,429
environment variables into here directly

00:34:17,300 --> 00:34:21,139
the only line in this I changed from the

00:34:19,429 --> 00:34:23,300
template I'm wills blog post is the GCC

00:34:21,139 --> 00:34:25,490
version I wanted a more modern one so I

00:34:23,300 --> 00:34:27,589
updated the version that was inside with

00:34:25,490 --> 00:34:28,909
pac-man fur for emphasis and the only

00:34:27,589 --> 00:34:30,859
other thing I did is down here in the

00:34:28,909 --> 00:34:33,889
configuration section where we create

00:34:30,859 --> 00:34:35,089
the mingw 32 version and I had to tell

00:34:33,889 --> 00:34:37,550
that of course we're on this guy had

00:34:35,089 --> 00:34:39,919
installed this okay so once you have CPP

00:34:37,550 --> 00:34:41,359
properties Jason installed then your got

00:34:39,919 --> 00:34:43,879
everything you need in order to be used

00:34:41,359 --> 00:34:46,339
full semantic visual studio intellisense

00:34:43,879 --> 00:34:48,560
so just to demonstrate that I'm going to

00:34:46,339 --> 00:34:50,570
again go to definition so I went to get

00:34:48,560 --> 00:34:52,730
definition on C out but the key thing to

00:34:50,570 --> 00:34:54,800
note here is that it brought me to the

00:34:52,730 --> 00:34:57,500
right bio stream you can see that this

00:34:54,800 --> 00:35:01,700
is the one the MCS 64 version of mingw

00:34:57,500 --> 00:35:03,890
32 for the version of GCC that I used

00:35:01,700 --> 00:35:05,119
and all that's unlocked just by sending

00:35:03,890 --> 00:35:06,440
a couple of environment variables and

00:35:05,119 --> 00:35:08,930
putting some boilerplate into that thing

00:35:06,440 --> 00:35:10,400
okay so that's wonderful so now we've

00:35:08,930 --> 00:35:13,010
got intellisense and so you can edit

00:35:10,400 --> 00:35:14,570
code if you've ever used vs code this

00:35:13,010 --> 00:35:16,910
next JSON file will look familiar

00:35:14,570 --> 00:35:19,700
because they're very similar tasks ajith

00:35:16,910 --> 00:35:21,020
vs JSON is how you specify any custom

00:35:19,700 --> 00:35:23,000
tasks that you want to run but the most

00:35:21,020 --> 00:35:23,720
common one of course is built and this

00:35:23,000 --> 00:35:26,150
context

00:35:23,720 --> 00:35:28,280
type : : Cohen built here is what tells

00:35:26,150 --> 00:35:29,869
you basically hey Visual Studio wired

00:35:28,280 --> 00:35:32,060
this up for all of the built commands

00:35:29,869 --> 00:35:34,490
and here you can see in this one because

00:35:32,060 --> 00:35:37,160
it's super simple I'm just doing a G G +

00:35:34,490 --> 00:35:38,660
+ command line directly but in other

00:35:37,160 --> 00:35:39,980
examples of this that I've done myself

00:35:38,660 --> 00:35:42,830
you would just basically put the word

00:35:39,980 --> 00:35:44,390
make here and then once you do that if

00:35:42,830 --> 00:35:49,400
you right click over here now we can

00:35:44,390 --> 00:35:51,290
build main.cpp and it will use mingw to

00:35:49,400 --> 00:35:53,720
build that and type back the error

00:35:51,290 --> 00:35:55,880
messages as you have again Visual Studio

00:35:53,720 --> 00:35:58,430
I mean Daniel our bias we both used to

00:35:55,880 --> 00:36:03,440
work on the debugger so the next thing I

00:35:58,430 --> 00:36:06,470
want to show you is actually full mingw

00:36:03,440 --> 00:36:07,970
debugging inside a visual studio so as

00:36:06,470 --> 00:36:09,380
you can see I right clicked on this I

00:36:07,970 --> 00:36:10,550
went to debug in launch settings if I

00:36:09,380 --> 00:36:12,230
did that a little too quickly for you

00:36:10,550 --> 00:36:14,480
the three on the bottom are the classics

00:36:12,230 --> 00:36:16,700
these are you know Microsoft's compiler

00:36:14,480 --> 00:36:19,369
and other things do you want managed

00:36:16,700 --> 00:36:20,359
mixed or native but we've got two new

00:36:19,369 --> 00:36:20,780
ones one of them I'm going to show you

00:36:20,359 --> 00:36:24,200
in a minute

00:36:20,780 --> 00:36:25,970
called the the gdb for Linux one but for

00:36:24,200 --> 00:36:29,810
right now I have selected the one that

00:36:25,970 --> 00:36:32,900
matches up to mingw and gdb and now when

00:36:29,810 --> 00:36:37,430
I go into the program and assuming I

00:36:32,900 --> 00:36:39,920
have this set up right there we are

00:36:37,430 --> 00:36:42,560
and so there's this is debugging with

00:36:39,920 --> 00:36:45,349
gdb inside the Visual Studio IDE on a

00:36:42,560 --> 00:37:02,660
mingw application built with GCC alright

00:36:45,349 --> 00:37:04,700
thanks ok ok so just orientation this is

00:37:02,660 --> 00:37:06,920
where we are we've done everything up to

00:37:04,700 --> 00:37:08,599
the green arrow and now what we're gonna

00:37:06,920 --> 00:37:10,430
do is very quickly and I do mean very

00:37:08,599 --> 00:37:12,140
very quickly as you can probably tell I

00:37:10,430 --> 00:37:13,880
can speak fast I can also turn it up and

00:37:12,140 --> 00:37:15,290
not so I'll try and do that now we're

00:37:13,880 --> 00:37:17,750
gonna go and look at the other workloads

00:37:15,290 --> 00:37:19,550
that are in that installer the visual

00:37:17,750 --> 00:37:22,820
studio 2017 installer I showed you

00:37:19,550 --> 00:37:24,380
earlier so one of them is the universal

00:37:22,820 --> 00:37:27,020
Windows platform development so those of

00:37:24,380 --> 00:37:29,060
you want to do uwp you need to go and

00:37:27,020 --> 00:37:33,020
check the c++ box it's not checked by

00:37:29,060 --> 00:37:34,700
default so that's my tip for you and in

00:37:33,020 --> 00:37:36,380
case you don't know we do have a unified

00:37:34,700 --> 00:37:37,550
Windows Store I think it's really cool

00:37:36,380 --> 00:37:40,270
because you can create a single

00:37:37,550 --> 00:37:43,700
binary and it will run on desktop mobile

00:37:40,270 --> 00:37:45,500
xbox hololens this runs everywhere and

00:37:43,700 --> 00:37:47,780
at runtime it actually adapts to the

00:37:45,500 --> 00:37:49,850
form factor and the input types of the

00:37:47,780 --> 00:37:51,500
platform they're very random also you

00:37:49,850 --> 00:37:53,000
see up there C++ 1 or T there's a

00:37:51,500 --> 00:37:54,830
session and that this we could simply

00:37:53,000 --> 00:37:56,840
pick on so you can check that out and

00:37:54,830 --> 00:37:58,760
the last thing I'm going to say on this

00:37:56,840 --> 00:38:00,560
slide is a bottom bullet we we've had

00:37:58,760 --> 00:38:02,660
from the previous release in fact a way

00:38:00,560 --> 00:38:04,880
for you to set up visual studio to share

00:38:02,660 --> 00:38:06,710
code and targets as many platforms as

00:38:04,880 --> 00:38:09,890
you want like a hundred iOS and Windows

00:38:06,710 --> 00:38:12,260
and now new this year is that we can

00:38:09,890 --> 00:38:13,910
also have Linux targeting from there and

00:38:12,260 --> 00:38:17,060
Steve is going to show you that in a

00:38:13,910 --> 00:38:19,670
minute so moving to the mobile

00:38:17,060 --> 00:38:21,170
development of C++ workloads and I have

00:38:19,670 --> 00:38:22,640
to say in case I haven't already you can

00:38:21,170 --> 00:38:23,990
combine these workloads right can check

00:38:22,640 --> 00:38:25,610
as many as you like to create the

00:38:23,990 --> 00:38:27,110
combination that's good for you so in

00:38:25,610 --> 00:38:31,160
this one is the one where you're gonna

00:38:27,110 --> 00:38:33,770
target Android and or iOS so this

00:38:31,160 --> 00:38:35,780
continues to work like it used to we can

00:38:33,770 --> 00:38:37,610
still round-trip with Xcode what you do

00:38:35,780 --> 00:38:39,530
in iOS development and on the Android

00:38:37,610 --> 00:38:41,540
side we give you full analysis and

00:38:39,530 --> 00:38:44,780
debugging not just for your C++ code but

00:38:41,540 --> 00:38:47,210
also Java code right there in the ID and

00:38:44,780 --> 00:38:48,650
we do updates to later API levels and

00:38:47,210 --> 00:38:49,880
any case so we're looking for your

00:38:48,650 --> 00:38:51,470
feedback for those of you that have

00:38:49,880 --> 00:38:54,680
tried this what else do you want us to

00:38:51,470 --> 00:38:56,120
do here we're just come to the booth or

00:38:54,680 --> 00:38:58,220
grab us if you see us and let us know

00:38:56,120 --> 00:39:01,520
what else do you want to see in this

00:38:58,220 --> 00:39:04,160
mobile development C++ space moving on

00:39:01,520 --> 00:39:05,720
to the Linux workload which is the

00:39:04,160 --> 00:39:08,210
latest one to join the family this is

00:39:05,720 --> 00:39:11,600
new in this Visual Studio 2017 release

00:39:08,210 --> 00:39:13,040
it was only an extension before and this

00:39:11,600 --> 00:39:16,010
particular workload if you select only

00:39:13,040 --> 00:39:17,240
this one in under six minutes you'll get

00:39:16,010 --> 00:39:18,500
a visual studio installation that will

00:39:17,240 --> 00:39:20,270
give you all the visuals to the goodness

00:39:18,500 --> 00:39:23,060
of debug and head in and so on but

00:39:20,270 --> 00:39:25,310
targeting Linux and last year we did a

00:39:23,060 --> 00:39:28,010
really cool demo of this and by we I

00:39:25,310 --> 00:39:31,490
mean Steve of the windows subsystem on

00:39:28,010 --> 00:39:32,540
Linux and since that time then it was

00:39:31,490 --> 00:39:34,220
like a bit kind of thing

00:39:32,540 --> 00:39:36,350
since that time with the Windows 10 for

00:39:34,220 --> 00:39:38,420
creators that's actually released it's

00:39:36,350 --> 00:39:40,310
fully out there now and on Windows

00:39:38,420 --> 00:39:42,380
server and that essentially allows you

00:39:40,310 --> 00:39:44,150
to have multiple districts running

00:39:42,380 --> 00:39:45,950
concurrently on your windows box you

00:39:44,150 --> 00:39:47,780
don't even need a separate Linux machine

00:39:45,950 --> 00:39:49,640
or a VM or anything like that so that's

00:39:47,780 --> 00:39:50,780
pretty awesome but we demonstrated that

00:39:49,640 --> 00:39:51,350
so we don't want to demonstrate that

00:39:50,780 --> 00:39:53,240
again

00:39:51,350 --> 00:39:55,040
so instead I Steve is going to show you

00:39:53,240 --> 00:39:56,960
that sharing of code with Linux and

00:39:55,040 --> 00:39:59,060
Windows and some other things that was

00:39:56,960 --> 00:40:01,400
recently done for Linux so Steve over

00:39:59,060 --> 00:40:04,010
the year okay great so as you can see

00:40:01,400 --> 00:40:06,500
this is room 216 I've got it running

00:40:04,010 --> 00:40:08,240
inside a VM on side of my machine so

00:40:06,500 --> 00:40:09,590
we're much further along than we were

00:40:08,240 --> 00:40:11,150
last year we showed you something so

00:40:09,590 --> 00:40:12,740
this year I want to show you shared

00:40:11,150 --> 00:40:13,520
projects and then I got a little

00:40:12,740 --> 00:40:16,310
something at the end

00:40:13,520 --> 00:40:17,750
so again if you missed last year how

00:40:16,310 --> 00:40:21,800
this works is you go into connection

00:40:17,750 --> 00:40:24,530
manager and we have you click the Add

00:40:21,800 --> 00:40:27,200
button all we need to know is the

00:40:24,530 --> 00:40:28,970
hostname the port the username and some

00:40:27,200 --> 00:40:30,920
sort of authentication methodology I

00:40:28,970 --> 00:40:32,540
have previously set this up so the

00:40:30,920 --> 00:40:34,670
default one is now pointing at that VM

00:40:32,540 --> 00:40:37,610
here I have it on an internal hyper-v

00:40:34,670 --> 00:40:39,170
switch on my box ok so the next thing

00:40:37,610 --> 00:40:42,080
that's different this year from last

00:40:39,170 --> 00:40:43,640
year is cross-platform cube here this is

00:40:42,080 --> 00:40:46,520
using shared projects you see this

00:40:43,640 --> 00:40:48,590
double diamond thing this is a shared

00:40:46,520 --> 00:40:51,620
project and then if you look inside of

00:40:48,590 --> 00:40:53,270
my - oops not that one and you look

00:40:51,620 --> 00:40:55,010
inside the references here you can see I

00:40:53,270 --> 00:40:57,290
have two other projects one called

00:40:55,010 --> 00:40:58,820
Windows cube that has a reference on

00:40:57,290 --> 00:41:01,280
that shared project and one called Linux

00:40:58,820 --> 00:41:04,130
cube which is a Linux project and has it

00:41:01,280 --> 00:41:05,750
on the same project so there's basically

00:41:04,130 --> 00:41:08,300
only single source file in here but that

00:41:05,750 --> 00:41:10,790
source file is shared between the two of

00:41:08,300 --> 00:41:12,440
them so I'm sure you can imagine what

00:41:10,790 --> 00:41:16,480
this looks like on Windows so just to

00:41:12,440 --> 00:41:19,160
sort of get it built and get going here

00:41:16,480 --> 00:41:21,770
this is a rotating cube it's not it's

00:41:19,160 --> 00:41:24,560
not a demo unless cube rotates so we got

00:41:21,770 --> 00:41:26,540
that going for us but the other thing

00:41:24,560 --> 00:41:29,060
that you can do here of course using

00:41:26,540 --> 00:41:33,290
that same technology I was just talking

00:41:29,060 --> 00:41:36,230
about in the last demo was if I go and I

00:41:33,290 --> 00:41:38,270
click and debug the Linux one and find

00:41:36,230 --> 00:41:40,520
the right place and wait a second you

00:41:38,270 --> 00:41:43,670
can see here's the cube debugged with

00:41:40,520 --> 00:41:47,810
gdb on this okay so the most important

00:41:43,670 --> 00:41:50,150
like productivity feature for this is of

00:41:47,810 --> 00:41:52,820
course the quality of the visualization

00:41:50,150 --> 00:41:54,800
of any debug thinks and so we do indeed

00:41:52,820 --> 00:41:56,900
have visualized views so when you're

00:41:54,800 --> 00:41:58,610
debugging from Digital Studio you'll get

00:41:56,900 --> 00:42:00,130
a nicely visualized version of that

00:41:58,610 --> 00:42:02,750
thing not necessarily what the raw

00:42:00,130 --> 00:42:04,700
implementation looks like so that's very

00:42:02,750 --> 00:42:05,990
useful okay so

00:42:04,700 --> 00:42:07,520
just saw at least on windows that was

00:42:05,990 --> 00:42:09,530
rotating pretty quickly so I'm gonna go

00:42:07,520 --> 00:42:11,839
in here and demonstrate for you very

00:42:09,530 --> 00:42:13,089
quickly what I think is a really cool

00:42:11,839 --> 00:42:15,680
intellisense feature for these

00:42:13,089 --> 00:42:17,210
cross-platform scenarios so I want to

00:42:15,680 --> 00:42:20,119
slow this down so I'm gonna type you

00:42:17,210 --> 00:42:21,410
sleep 1000 in order to slow down the

00:42:20,119 --> 00:42:23,420
thing okay so you see this purple

00:42:21,410 --> 00:42:24,890
squiggle okay so like red is bad

00:42:23,420 --> 00:42:26,420
squiggles right but purple squiggles are

00:42:24,890 --> 00:42:28,940
different purpose Wiggles are like

00:42:26,420 --> 00:42:30,740
moderately bad squiggles and if I hover

00:42:28,940 --> 00:42:32,510
here you can see exactly what's going on

00:42:30,740 --> 00:42:34,940
here which is yeah that's great Steve

00:42:32,510 --> 00:42:36,980
you can use a thousand microseconds and

00:42:34,940 --> 00:42:39,200
sleep for them but there's actually not

00:42:36,980 --> 00:42:40,910
an equivalent function inside of Windows

00:42:39,200 --> 00:42:43,099
you'd need to use the capital S sleep

00:42:40,910 --> 00:42:45,020
which noxious Li uses milliseconds

00:42:43,099 --> 00:42:47,119
instead of microseconds so this is

00:42:45,020 --> 00:42:50,599
telling you before you've even built

00:42:47,119 --> 00:42:52,460
that you have a non cross-platform clean

00:42:50,599 --> 00:42:53,780
thing inside your code and you can go in

00:42:52,460 --> 00:42:56,480
here and add the appropriate if deaths

00:42:53,780 --> 00:42:58,130
or whatever so that is the

00:42:56,480 --> 00:43:01,099
cross-platform cube and that's shared

00:42:58,130 --> 00:43:03,020
projects for Linux but I actually kind

00:43:01,099 --> 00:43:04,760
of dropped a little bit of a easter egg

00:43:03,020 --> 00:43:06,650
in an earlier demo so what I'm gonna do

00:43:04,760 --> 00:43:10,010
now is I'm gonna go back and I'm gonna

00:43:06,650 --> 00:43:11,990
reload the open folder on bullet three

00:43:10,010 --> 00:43:14,599
and again I want to stress that I did

00:43:11,990 --> 00:43:16,010
not change the settings on this but if

00:43:14,599 --> 00:43:17,450
you saw earlier as we were looking at

00:43:16,010 --> 00:43:19,310
the configuration there's actually two

00:43:17,450 --> 00:43:22,400
at the bottom here and this is new in

00:43:19,310 --> 00:43:24,050
15.4 for sure and so what happened there

00:43:22,400 --> 00:43:26,569
is I switched to the Linux debug

00:43:24,050 --> 00:43:28,400
configuration and now see make is is

00:43:26,569 --> 00:43:29,810
sort of switchings configurations you

00:43:28,400 --> 00:43:32,030
can see it's changing the intellisense

00:43:29,810 --> 00:43:35,750
to point to the linux based versions of

00:43:32,030 --> 00:43:42,170
things instead and now if i select the

00:43:35,750 --> 00:43:43,369
right and i click build you can see it

00:43:42,170 --> 00:43:46,520
does a build the build is happening

00:43:43,369 --> 00:43:50,740
remotely remember and now it's gonna hit

00:43:46,520 --> 00:43:55,369
a breakpoint because i set one and now

00:43:50,740 --> 00:43:57,440
you can see the slowly emulated cubes

00:43:55,369 --> 00:43:58,880
breaking apart inside linux with a no

00:43:57,440 --> 00:44:00,109
reconfiguration at all you're just

00:43:58,880 --> 00:44:02,210
switching back and forth that one

00:44:00,109 --> 00:44:04,130
switcher and you're getting from Windows

00:44:02,210 --> 00:44:06,109
mode to Linux mode this is super useful

00:44:04,130 --> 00:44:09,200
all right Thank You Daniel back to you

00:44:06,109 --> 00:44:10,580
cool thanks Steve you guys like that is

00:44:09,200 --> 00:44:13,010
that cool

00:44:10,580 --> 00:44:17,510
yeah that's what we were like see if you

00:44:13,010 --> 00:44:20,210
beg be shameless we are so something

00:44:17,510 --> 00:44:22,190
related the Internet of Things IOT when

00:44:20,210 --> 00:44:23,330
those things are running Linux

00:44:22,190 --> 00:44:25,130
obviously everything we showed you

00:44:23,330 --> 00:44:27,110
applies so if you're doing any embedded

00:44:25,130 --> 00:44:28,760
or IOT kind of development and you're

00:44:27,110 --> 00:44:29,990
and you've got Linux targets all of the

00:44:28,760 --> 00:44:31,880
stuff we showed you just works that's

00:44:29,990 --> 00:44:34,580
definitely scenario that we are

00:44:31,880 --> 00:44:36,350
prioritizing and we've got improvements

00:44:34,580 --> 00:44:38,180
in that like with the Yocto sticky

00:44:36,350 --> 00:44:40,040
allowing allowing to replace the

00:44:38,180 --> 00:44:42,410
compiler that you would want to use last

00:44:40,040 --> 00:44:44,870
year we said that we intend to also add

00:44:42,410 --> 00:44:48,230
support for a micro computer or SMC use

00:44:44,870 --> 00:44:50,420
and indeed in 15.5 you will start seeing

00:44:48,230 --> 00:44:53,420
some of that so good news here for

00:44:50,420 --> 00:44:55,220
embedded and IOT developers now IOT

00:44:53,420 --> 00:44:57,020
Internet of Things so these things are

00:44:55,220 --> 00:44:58,460
connected and if you're going to connect

00:44:57,020 --> 00:45:01,070
them to something then we encourage you

00:44:58,460 --> 00:45:04,700
to go and check out the azure IOT sdk

00:45:01,070 --> 00:45:06,740
which supports your iot and needs and

00:45:04,700 --> 00:45:09,620
now from here I'll switch to the last

00:45:06,740 --> 00:45:10,820
workload that our team kind of develops

00:45:09,620 --> 00:45:12,740
and we think it can be useful to you

00:45:10,820 --> 00:45:15,080
which is one on game development so

00:45:12,740 --> 00:45:18,350
notice how at the top there is the unity

00:45:15,080 --> 00:45:19,550
workload and then all the c++ related

00:45:18,350 --> 00:45:20,210
game development is in the other

00:45:19,550 --> 00:45:22,550
workload

00:45:20,210 --> 00:45:25,400
game development c++ and that includes

00:45:22,550 --> 00:45:28,160
DirectX and real caucus the game engines

00:45:25,400 --> 00:45:30,530
that we support out of the box so this

00:45:28,160 --> 00:45:32,360
is also an area where we really want

00:45:30,530 --> 00:45:34,160
your feedback what else do you want us

00:45:32,360 --> 00:45:35,810
to do here we'll be working on this for

00:45:34,160 --> 00:45:38,150
a while it's fairly mature is there

00:45:35,810 --> 00:45:40,010
anything missing so come and find us at

00:45:38,150 --> 00:45:41,510
the booth or stop us and let us know I

00:45:40,010 --> 00:45:42,920
will say before I move on from this

00:45:41,510 --> 00:45:44,840
slide that's more and more these days

00:45:42,920 --> 00:45:46,370
game development those games are powered

00:45:44,840 --> 00:45:49,010
by some kind of cloud service and

00:45:46,370 --> 00:45:50,450
there's a URL up there on the slide so

00:45:49,010 --> 00:45:54,620
you can find out what the Microsoft

00:45:50,450 --> 00:45:57,170
cloud can do for your games and with

00:45:54,620 --> 00:45:59,960
that orientation we've got two slides

00:45:57,170 --> 00:46:01,790
and a demo to go so we're going to go

00:45:59,960 --> 00:46:04,490
and dive straight into productivity and

00:46:01,790 --> 00:46:07,400
this is the bucket of all the things

00:46:04,490 --> 00:46:09,560
that make the quality of your everyday

00:46:07,400 --> 00:46:11,420
developer life better these are things

00:46:09,560 --> 00:46:14,660
that you do every day when you go and

00:46:11,420 --> 00:46:17,030
develop code last year we had a 15

00:46:14,660 --> 00:46:19,070
minute demo of just productivity

00:46:17,030 --> 00:46:21,140
features so we showed you a lot but

00:46:19,070 --> 00:46:22,900
since then we've done even more so Steve

00:46:21,140 --> 00:46:24,430
now is going to show you some of those

00:46:22,900 --> 00:46:27,910
Neera thinks and i think is gonna be

00:46:24,430 --> 00:46:29,740
using 15.5 yes yeah this is this is the

00:46:27,910 --> 00:46:31,329
fifteen point five bits these you can't

00:46:29,740 --> 00:46:33,069
get yet but i promise they're coming

00:46:31,329 --> 00:46:35,380
soon alright so the first thing I want

00:46:33,069 --> 00:46:37,539
to talk about I've got a cryptography

00:46:35,380 --> 00:46:39,640
thing again just some code we cloned off

00:46:37,539 --> 00:46:41,170
of github to do the demo with the first

00:46:39,640 --> 00:46:42,910
thing I want to talk about which is a

00:46:41,170 --> 00:46:44,529
sort of like power TV feature we don't

00:46:42,910 --> 00:46:45,700
talk about as much in these situations

00:46:44,529 --> 00:46:48,099
which is just your source code control

00:46:45,700 --> 00:46:50,440
so Visual Studio has a quite

00:46:48,099 --> 00:46:52,660
sophisticated set of bindings for git

00:46:50,440 --> 00:46:54,460
and so I'm demonstrating here I went in

00:46:52,660 --> 00:46:56,710
here and I click to view history got the

00:46:54,460 --> 00:46:59,230
full history a master in here a new

00:46:56,710 --> 00:47:02,710
feature in the 2017 line is if you

00:46:59,230 --> 00:47:04,180
select two different commits and you go

00:47:02,710 --> 00:47:06,250
you can right click in here and clicks

00:47:04,180 --> 00:47:07,869
compare the commits it will bring up the

00:47:06,250 --> 00:47:09,700
team Explorer with those two compared

00:47:07,869 --> 00:47:11,230
that'll tell you of course what the

00:47:09,700 --> 00:47:13,359
messages were for each of those commits

00:47:11,230 --> 00:47:14,770
but also it will give you just the files

00:47:13,359 --> 00:47:17,020
that were changed in between those two

00:47:14,770 --> 00:47:20,289
and now when I go in and I select one of

00:47:17,020 --> 00:47:22,089
these I can see the diff of that file

00:47:20,289 --> 00:47:23,410
between those two things and it doesn't

00:47:22,089 --> 00:47:24,760
matter which version I have checked out

00:47:23,410 --> 00:47:26,079
it will just give me the difference

00:47:24,760 --> 00:47:28,210
between those two commits I think this

00:47:26,079 --> 00:47:29,740
is pretty useful let's be honest most of

00:47:28,210 --> 00:47:31,089
the purpose of source code control

00:47:29,740 --> 00:47:34,349
things is blaming other people for

00:47:31,089 --> 00:47:38,490
problems okay I'm glad that you do too

00:47:34,349 --> 00:47:41,020
so we also have a very nice

00:47:38,490 --> 00:47:42,369
visualization for the get blame thing

00:47:41,020 --> 00:47:44,049
it's fun to go through other people

00:47:42,369 --> 00:47:46,029
source codes and do this on them so like

00:47:44,049 --> 00:47:47,770
in this one I noticed as I was going and

00:47:46,029 --> 00:47:49,480
prepping this demo that this person

00:47:47,770 --> 00:47:51,549
weighed I had gone in and wrote a bunch

00:47:49,480 --> 00:47:53,140
of code but this guy Geoffrey Walton had

00:47:51,549 --> 00:47:54,640
gone in and added a bunch of asserts and

00:47:53,140 --> 00:47:57,910
then I made me think I want to hire that

00:47:54,640 --> 00:47:59,079
guy alright so that was good I'm sorry

00:47:57,910 --> 00:48:00,760
if any of you are in the room I just

00:47:59,079 --> 00:48:01,779
picked this randomly github and now I'm

00:48:00,760 --> 00:48:06,180
making fun of you onstage

00:48:01,779 --> 00:48:08,799
okay but does that my tester code oh

00:48:06,180 --> 00:48:12,549
that that laughter was uncomfortable

00:48:08,799 --> 00:48:14,650
people all right so we've noticed

00:48:12,549 --> 00:48:17,319
actually that many of you don't use the

00:48:14,650 --> 00:48:19,299
built-in unit testing inside Visual

00:48:17,319 --> 00:48:22,119
Studio and we've done a lot of work in

00:48:19,299 --> 00:48:24,130
Visual Studio 2017 to try to make it

00:48:22,119 --> 00:48:26,829
much better for the average C++

00:48:24,130 --> 00:48:28,480
developer and so it's coming in 15.5

00:48:26,829 --> 00:48:30,369
we're gonna have support for Google

00:48:28,480 --> 00:48:32,680
tests that's like you guys set there on

00:48:30,369 --> 00:48:34,599
purpose Google test as well as boost

00:48:32,680 --> 00:48:35,440
tests are now going to be in box with

00:48:34,599 --> 00:48:37,390
things

00:48:35,440 --> 00:48:39,370
before you had to use our test adaptors

00:48:37,390 --> 00:48:41,230
and now we support others so the way

00:48:39,370 --> 00:48:43,330
that goes and works is if I go into the

00:48:41,230 --> 00:48:49,810
solution Explorer and you click on your

00:48:43,330 --> 00:48:51,430
solution and you go add new project one

00:48:49,810 --> 00:48:53,830
of your choices when your project

00:48:51,430 --> 00:48:55,870
template choices is google test if you

00:48:53,830 --> 00:48:58,390
select ok to add that to your solution

00:48:55,870 --> 00:49:00,760
you can then select which project inside

00:48:58,390 --> 00:49:02,110
that solution you want to test as well

00:49:00,760 --> 00:49:04,120
as decide whether you want to consume it

00:49:02,110 --> 00:49:06,280
as a static library and how you want to

00:49:04,120 --> 00:49:08,470
consume the runtime libraries so I've

00:49:06,280 --> 00:49:11,200
already gotten this set up and the

00:49:08,470 --> 00:49:13,090
interests of going fast I have so I you

00:49:11,200 --> 00:49:14,650
know I'm on I'm a solid programmer I

00:49:13,090 --> 00:49:17,470
wrote one test for this entire code base

00:49:14,650 --> 00:49:19,360
and as you can see what happens is this

00:49:17,470 --> 00:49:20,650
gets detected your your code base once

00:49:19,360 --> 00:49:23,290
you have this in there if you have G

00:49:20,650 --> 00:49:25,000
tests stuff in there it will scan your

00:49:23,290 --> 00:49:26,710
solution to find them the test Explorer

00:49:25,000 --> 00:49:29,650
will find them then you can click this

00:49:26,710 --> 00:49:31,540
it will run I believe you can see it's

00:49:29,650 --> 00:49:34,360
okay starts building first so it's all

00:49:31,540 --> 00:49:35,620
wait patiently for that to happen now

00:49:34,360 --> 00:49:38,350
the tests have kicked off you can see

00:49:35,620 --> 00:49:40,780
that the test is failed it cat creates

00:49:38,350 --> 00:49:42,370
gets all sorts of good information when

00:49:40,780 --> 00:49:43,870
it when a test fails so that you can see

00:49:42,370 --> 00:49:45,880
like for instance if it's thrown an

00:49:43,870 --> 00:49:48,400
exception there's a whole logging thing

00:49:45,880 --> 00:49:51,160
in here which is great you can click on

00:49:48,400 --> 00:49:52,240
here to debug it once it's failed but

00:49:51,160 --> 00:49:54,730
the thing I want to show you right now

00:49:52,240 --> 00:49:57,970
is a feature after my own heart

00:49:54,730 --> 00:49:59,410
analyze code coverage for all tests so

00:49:57,970 --> 00:50:02,170
you know I'm sure I'm doing quite well

00:49:59,410 --> 00:50:04,510
here because I wrote that one test so

00:50:02,170 --> 00:50:06,400
it's kicked off so it's gonna build it

00:50:04,510 --> 00:50:08,890
again what's gonna happen is and it's

00:50:06,400 --> 00:50:10,990
going to instrument the code all of the

00:50:08,890 --> 00:50:12,790
code and then run that unit test against

00:50:10,990 --> 00:50:15,430
it and then it will tell us how we did

00:50:12,790 --> 00:50:17,650
in terms of our code coverage running

00:50:15,430 --> 00:50:19,450
one test now I'll tell you that this is

00:50:17,650 --> 00:50:22,090
the first piece of code I ever wrote at

00:50:19,450 --> 00:50:24,730
Microsoft so I'm very okay okay fourteen

00:50:22,090 --> 00:50:25,510
years ago uh so you can see I'm doing a

00:50:24,730 --> 00:50:27,220
fantastic job

00:50:25,510 --> 00:50:30,490
I can see immediately across my entire

00:50:27,220 --> 00:50:32,590
project I have seven percent coverage so

00:50:30,490 --> 00:50:35,650
I think that's done let's ship it all

00:50:32,590 --> 00:50:37,740
right next up alright I want to show you

00:50:35,650 --> 00:50:41,950
just one or two more quick little things

00:50:37,740 --> 00:50:46,450
the first one is going to be where'd you

00:50:41,950 --> 00:50:48,800
go functions stepping before okay I've

00:50:46,450 --> 00:50:50,870
got two features left I want to show you

00:50:48,800 --> 00:50:52,400
them is editor config in case you don't

00:50:50,870 --> 00:50:53,600
know while that's loading I'll tell you

00:50:52,400 --> 00:50:56,240
that editor config is like an open

00:50:53,600 --> 00:50:59,320
standard for expressing what your

00:50:56,240 --> 00:51:02,900
desired editor formatting choices are

00:50:59,320 --> 00:51:04,190
and you can see I have it in here we

00:51:02,900 --> 00:51:06,320
talked a little bit about red squiggles

00:51:04,190 --> 00:51:08,120
and purple squiggles earlier this person

00:51:06,320 --> 00:51:10,940
who has written this source file has

00:51:08,120 --> 00:51:12,590
selected tabs and and so I'm surprised

00:51:10,940 --> 00:51:15,830
there isn't a red squiggle here because

00:51:12,590 --> 00:51:17,390
that's just not right so didn't I was

00:51:15,830 --> 00:51:20,350
hoping to get booed or something for

00:51:17,390 --> 00:51:22,730
that one so I go in here I'll save that

00:51:20,350 --> 00:51:25,400
thank you thank you for playing along at

00:51:22,730 --> 00:51:27,350
home and then it will quickly change the

00:51:25,400 --> 00:51:30,140
cone to match that other config so this

00:51:27,350 --> 00:51:32,960
is a good way nice cross editor way of

00:51:30,140 --> 00:51:34,040
setting up what your preferences are so

00:51:32,960 --> 00:51:36,460
the next I'm going to show you is a

00:51:34,040 --> 00:51:39,230
surprisingly highly voted feature on

00:51:36,460 --> 00:51:41,000
user voice and so we finally dealt with

00:51:39,230 --> 00:51:43,070
it so this is actually the before

00:51:41,000 --> 00:51:44,960
picture so I hope you can bear with me

00:51:43,070 --> 00:51:47,630
on this one so what we have here is

00:51:44,960 --> 00:51:50,480
three functions we have a plain function

00:51:47,630 --> 00:51:52,100
member function and a function object

00:51:50,480 --> 00:51:54,950
that returns a witty pop-culture

00:51:52,100 --> 00:51:57,380
reference and if we go here and we run

00:51:54,950 --> 00:52:04,550
into that yeah let's go ahead and build

00:51:57,380 --> 00:52:08,120
that so let's get to the that point in

00:52:04,550 --> 00:52:10,040
the break point okay so this is a stood

00:52:08,120 --> 00:52:12,320
function wrapper around point function

00:52:10,040 --> 00:52:14,180
right how many times do you think we

00:52:12,320 --> 00:52:16,700
have to step into before we reach

00:52:14,180 --> 00:52:18,400
playing function okay think of a number

00:52:16,700 --> 00:52:24,200
in your head

00:52:18,400 --> 00:52:33,050
okay one two hundred three four five six

00:52:24,200 --> 00:52:35,180
seven eight nine 10 22 is actually the

00:52:33,050 --> 00:52:36,590
correct answer who had 22 of course you

00:52:35,180 --> 00:52:40,820
all did I didn't make you write it down

00:52:36,590 --> 00:52:44,600
alright so and indeed the the climactic

00:52:40,820 --> 00:52:48,020
conclusion to this demo is coming in

00:52:44,600 --> 00:52:50,480
15.5 you will have the following

00:52:48,020 --> 00:52:53,740
experience as soon as your solution that

00:52:50,480 --> 00:52:53,740
woods she just one sec

00:52:54,650 --> 00:52:57,650
and this is killing the suspect there's

00:52:56,240 --> 00:52:59,509
this building cuz suspense or killing

00:52:57,650 --> 00:53:01,400
suspense I can't tell what's your guys's

00:52:59,509 --> 00:53:02,630
feeling all right so I got the

00:53:01,400 --> 00:53:06,999
breakpoint set let's go

00:53:02,630 --> 00:53:06,999
all right have five yeah build it sure

00:53:10,240 --> 00:53:14,269
all right that's it ah thanks so that's

00:53:13,009 --> 00:53:16,910
function stepping if you used to

00:53:14,269 --> 00:53:21,440
function it's gonna save your life think

00:53:16,910 --> 00:53:23,779
of the children all right if you if you

00:53:21,440 --> 00:53:25,309
have to debug the implementation of

00:53:23,779 --> 00:53:36,200
stood function you work for me and I pay

00:53:25,309 --> 00:53:38,180
you enough yes so I will say go to the

00:53:36,200 --> 00:53:39,859
visual studio booth afterwards and say

00:53:38,180 --> 00:53:42,019
these words and I swear to god it will

00:53:39,859 --> 00:53:46,309
work say can you tell me more about

00:53:42,019 --> 00:53:48,460
project Fifi fufu all right go I'll

00:53:46,309 --> 00:53:51,049
explain later

00:53:48,460 --> 00:53:52,849
thanks Steve and by the way we keep

00:53:51,049 --> 00:53:54,470
referring to our booth table it's

00:53:52,849 --> 00:53:56,180
literally around the corner from here so

00:53:54,470 --> 00:53:58,309
just go out and write and just find the

00:53:56,180 --> 00:53:59,720
purple shirts and we'll answer any

00:53:58,309 --> 00:54:01,130
questions that you have and also

00:53:59,720 --> 00:54:03,559
requests if you have requests you know

00:54:01,130 --> 00:54:04,880
Steve showed editor config which is like

00:54:03,559 --> 00:54:07,640
a standard maybe you want to see

00:54:04,880 --> 00:54:10,249
something else something else just let

00:54:07,640 --> 00:54:11,569
us know so you showed the Google test

00:54:10,249 --> 00:54:12,950
then boost and obviously we have a mess

00:54:11,569 --> 00:54:13,220
this is it something else you want to

00:54:12,950 --> 00:54:15,019
see

00:54:13,220 --> 00:54:17,539
I don't know catch like something so

00:54:15,019 --> 00:54:19,519
just let us know what else you want us

00:54:17,539 --> 00:54:20,720
to see do in all of these spaces we're

00:54:19,519 --> 00:54:22,759
just around the booth and you can also

00:54:20,720 --> 00:54:25,759
email us like I said earlier all right

00:54:22,759 --> 00:54:27,739
so we're talking about productivity and

00:54:25,759 --> 00:54:29,119
some could argue that performance is

00:54:27,739 --> 00:54:31,220
part of productivity especially

00:54:29,119 --> 00:54:32,809
performance of the ID as you interact

00:54:31,220 --> 00:54:35,029
with it like earlier when he was killing

00:54:32,809 --> 00:54:37,069
the suspense you want it to be to be

00:54:35,029 --> 00:54:38,720
fast so we talked about build

00:54:37,069 --> 00:54:40,609
throughputs earlier that's part of that

00:54:38,720 --> 00:54:42,140
as you do the Edit build debug you want

00:54:40,609 --> 00:54:43,670
to build stuff to be as squished as

00:54:42,140 --> 00:54:45,529
possible so you can be productive but

00:54:43,670 --> 00:54:47,630
we've also done other improvements and

00:54:45,529 --> 00:54:49,099
we shared these last year I'm curious

00:54:47,630 --> 00:54:51,440
actually how many people were in this

00:54:49,099 --> 00:54:52,819
talk last year or sort of like this is

00:54:51,440 --> 00:54:54,619
math yeah die hard

00:54:52,819 --> 00:54:56,269
that's not everybody could repeat the

00:54:54,619 --> 00:55:01,069
same demos they wouldn't I always save

00:54:56,269 --> 00:55:02,329
me a lot of time so so then actually I

00:55:01,069 --> 00:55:04,190
should stress look at these dramatic

00:55:02,329 --> 00:55:06,619
improvements I was gonna pass this by

00:55:04,190 --> 00:55:08,720
you know about this look at those

00:55:06,619 --> 00:55:11,780
numbers in terms of solution

00:55:08,720 --> 00:55:13,700
17 times faster that's crazy so we've

00:55:11,780 --> 00:55:16,700
actually invested a lot of energy here

00:55:13,700 --> 00:55:18,260
in the performance of the ID itself so

00:55:16,700 --> 00:55:20,750
like we'd like to say this performance

00:55:18,260 --> 00:55:24,650
you'll be able to feel now and we're not

00:55:20,750 --> 00:55:26,420
done so internally we're working now we

00:55:24,650 --> 00:55:28,700
don't have time so we have internally

00:55:26,420 --> 00:55:30,200
we've got bits where we're improving the

00:55:28,700 --> 00:55:32,600
design time experience think of go to

00:55:30,200 --> 00:55:34,340
definition final references refactoring

00:55:32,600 --> 00:55:36,530
so our goal is to go orders of

00:55:34,340 --> 00:55:38,180
magnitudes better than than where we are

00:55:36,530 --> 00:55:39,920
and I can say that easily because it's

00:55:38,180 --> 00:55:41,660
his team best to do it I was the program

00:55:39,920 --> 00:55:43,850
manager that's a specification make it

00:55:41,660 --> 00:55:45,820
two orders of magnitude faster Steve now

00:55:43,850 --> 00:55:49,250
so this is an area that we're really

00:55:45,820 --> 00:55:50,510
trying to improve so again we want your

00:55:49,250 --> 00:55:52,160
feedback what are the scenarios when you

00:55:50,510 --> 00:55:53,450
use Visual Studio and you're like I wish

00:55:52,160 --> 00:55:56,020
it was faster there just let us know

00:55:53,450 --> 00:55:58,190
because we're really prioritizing this

00:55:56,020 --> 00:56:00,190
all right so with that before we go to

00:55:58,190 --> 00:56:02,720
the summary there's only one more slide

00:56:00,190 --> 00:56:04,730
which is really to thank all of you

00:56:02,720 --> 00:56:06,560
folks because these are the two primary

00:56:04,730 --> 00:56:09,680
ways that we like it feedback and you've

00:56:06,560 --> 00:56:11,780
used that so on the user voice with your

00:56:09,680 --> 00:56:13,550
suggestions and votes and through

00:56:11,780 --> 00:56:14,810
reporting problems in the tool you've

00:56:13,550 --> 00:56:17,090
told us about issues and we have

00:56:14,810 --> 00:56:19,730
addressed them and this is the number of

00:56:17,090 --> 00:56:22,970
votes that we have closed and bugs we've

00:56:19,730 --> 00:56:24,080
fixed just coming from you into the - so

00:56:22,970 --> 00:56:26,330
give yourselves a round of applause

00:56:24,080 --> 00:56:28,810
really thank you very much for if you

00:56:26,330 --> 00:56:30,950
hadn't told us about it

00:56:28,810 --> 00:56:33,440
that's in addition to everything else

00:56:30,950 --> 00:56:38,270
they would do so with that this is the

00:56:33,440 --> 00:56:41,110
last slide so we talked about all of

00:56:38,270 --> 00:56:46,370
these things conformance performance

00:56:41,110 --> 00:56:48,740
Linux Android iOS IOT game development I

00:56:46,370 --> 00:56:50,780
just like throwing words out there see

00:56:48,740 --> 00:56:52,820
make basically like I said at the very

00:56:50,780 --> 00:56:54,740
beginning we want Visual Studio to be

00:56:52,820 --> 00:56:56,690
the best idea on Windows for targeting

00:56:54,740 --> 00:56:58,760
any platform any scenario that you have

00:56:56,690 --> 00:57:00,830
and our compiler to be the best compiler

00:56:58,760 --> 00:57:03,020
in Windows and library still said that

00:57:00,830 --> 00:57:04,910
it's on Windows for Windows and that's

00:57:03,020 --> 00:57:06,770
what we're doing and there's also Visual

00:57:04,910 --> 00:57:09,080
Studio code so catch that recording

00:57:06,770 --> 00:57:09,890
online the last thing I'll say is that I

00:57:09,080 --> 00:57:11,120
don't know how many of you been

00:57:09,890 --> 00:57:14,030
following kind of what max has been

00:57:11,120 --> 00:57:15,500
doing over the last few years but it's a

00:57:14,030 --> 00:57:17,000
different company from the from the

00:57:15,500 --> 00:57:18,620
inside we feel that and we're happy with

00:57:17,000 --> 00:57:20,930
it I hope you guys can sense it on the

00:57:18,620 --> 00:57:21,710
outside as well I don't know how many

00:57:20,930 --> 00:57:24,020
people

00:57:21,710 --> 00:57:25,910
would have expected that we would be

00:57:24,020 --> 00:57:27,830
shipping a cross-platform free open

00:57:25,910 --> 00:57:29,540
source editor I could've thought of the

00:57:27,830 --> 00:57:31,369
hats a few years ago and it's actually

00:57:29,540 --> 00:57:33,500
the number six project on github in

00:57:31,369 --> 00:57:36,170
terms of number of contributors I looked

00:57:33,500 --> 00:57:38,570
that up over the weekend also last year

00:57:36,170 --> 00:57:40,040
Microsoft was the number one contributor

00:57:38,570 --> 00:57:41,960
on github in terms of open source

00:57:40,040 --> 00:57:43,640
contributions it's a different company

00:57:41,960 --> 00:57:45,440
I hope you've seen some of it here but

00:57:43,640 --> 00:57:47,330
that we can always do more so please do

00:57:45,440 --> 00:57:48,740
come talk to us what else can we be

00:57:47,330 --> 00:57:50,330
doing to be better citizens in the

00:57:48,740 --> 00:57:53,660
community and to offer better products

00:57:50,330 --> 00:57:54,410
for you you can email us again any abuse

00:57:53,660 --> 00:57:59,330
stevecarroll

00:57:54,410 --> 00:58:07,190
any compliments daniel more enjoy thank

00:57:59,330 --> 00:58:09,230
you okay Wow we didn't we didn't screw

00:58:07,190 --> 00:58:10,550
up the time did we no all right so we

00:58:09,230 --> 00:58:11,960
forgot to say something important I'm

00:58:10,550 --> 00:58:13,490
sure yeah probably so we have two

00:58:11,960 --> 00:58:14,510
minutes for questions if you don't want

00:58:13,490 --> 00:58:16,820
to come to the booth and you want to ask

00:58:14,510 --> 00:58:19,670
them now coach Joe what's up they have

00:58:16,820 --> 00:58:23,420
funny and use any new features for

00:58:19,670 --> 00:58:25,700
memory safety new features for memory

00:58:23,420 --> 00:58:27,470
safety I don't think anything that we

00:58:25,700 --> 00:58:29,000
want to talk about short of the CBP core

00:58:27,470 --> 00:58:32,869
tech stuff which I guess you could look

00:58:29,000 --> 00:58:35,450
at as that for yeah how did this time

00:58:32,869 --> 00:58:37,070
sorry I hope I have a feature request

00:58:35,450 --> 00:58:39,560
okay this is probably gonna be like

00:58:37,070 --> 00:58:40,940
completely insane but like you know how

00:58:39,560 --> 00:58:43,040
you have the immediate window in Visual

00:58:40,940 --> 00:58:45,080
Studio yes I want to be able to type win

00:58:43,040 --> 00:58:47,180
debug commands into there that's not a

00:58:45,080 --> 00:58:49,369
crazy it's not a crazy thing at all okay

00:58:47,180 --> 00:58:55,160
No can you do it well we've heard you

00:58:49,369 --> 00:58:56,930
okay yeah fine McNellis okay and yeah

00:58:55,160 --> 00:58:58,940
there's also the window guys are here

00:58:56,930 --> 00:59:01,460
yeah so you can also ask them because it

00:58:58,940 --> 00:59:03,109
would be a collaboration yeah um the

00:59:01,460 --> 00:59:04,430
other thing I wanted to ask is the like

00:59:03,109 --> 00:59:06,440
you mentioned that Google test adapters

00:59:04,430 --> 00:59:07,910
and stuff does that work if you if you

00:59:06,440 --> 00:59:10,700
just open a folder that's like a C make

00:59:07,910 --> 00:59:13,910
project and then it discovers a G test

00:59:10,700 --> 00:59:20,270
project in your tree no yet not yet do

00:59:13,910 --> 00:59:23,960
you want to speak to that or in the

00:59:20,270 --> 00:59:25,580
microphone though yeah see he'll tell

00:59:23,960 --> 00:59:26,060
you why it doesn't work yet but it's not

00:59:25,580 --> 00:59:28,490
our plans

00:59:26,060 --> 00:59:32,720
I just wants to loose show reasons yeah

00:59:28,490 --> 00:59:34,250
so basically the the core test platform

00:59:32,720 --> 00:59:35,650
of Visual Studio currently doesn't

00:59:34,250 --> 00:59:37,269
support open folder

00:59:35,650 --> 00:59:39,460
we're hoping to change that in the

00:59:37,269 --> 00:59:40,779
future so that it is supported in any

00:59:39,460 --> 00:59:42,460
environment that you happen to be using

00:59:40,779 --> 00:59:43,779
and at that point wants the test

00:59:42,460 --> 00:59:45,609
platform supports it then we can make

00:59:43,779 --> 00:59:48,460
sure our test adapter is actually

00:59:45,609 --> 00:59:49,900
support open folder mode we're we're

00:59:48,460 --> 00:59:51,279
definitely gonna keep going on testing

00:59:49,900 --> 00:59:55,180
like we're we're just getting started

00:59:51,279 --> 00:59:57,880
yeah hi so I noticed that Unreal Engine

00:59:55,180 --> 01:00:02,339
was in the list of platforms that our

00:59:57,880 --> 01:00:05,650
projects are testing permissive on but

01:00:02,339 --> 01:00:07,150
they have their own build tool Yeti that

01:00:05,650 --> 01:00:08,470
doesn't let you pass in your own

01:00:07,150 --> 01:00:11,589
arbitrary parameters so how are you

01:00:08,470 --> 01:00:13,420
dealing with that so that is a very good

01:00:11,589 --> 01:00:16,059
question I do not know the direct answer

01:00:13,420 --> 01:00:17,499
to I can get if you grab me afterwards

01:00:16,059 --> 01:00:19,029
though I can find the developers who

01:00:17,499 --> 01:00:20,680
have that things set up and see how

01:00:19,029 --> 01:00:22,509
they're happy but it's true for a lot of

01:00:20,680 --> 01:00:24,549
a lot of the libraries and real world

01:00:22,509 --> 01:00:25,210
codes that we test internally it's not

01:00:24,549 --> 01:00:26,619
that publicly

01:00:25,210 --> 01:00:29,289
you can't go hit the button we have to

01:00:26,619 --> 01:00:31,029
do work yeah get them into there's like

01:00:29,289 --> 01:00:32,499
a decent number of people working like

01:00:31,029 --> 01:00:33,609
just to make sure that that keeps

01:00:32,499 --> 01:00:36,069
running because we just think it's so

01:00:33,609 --> 01:00:38,380
important especially with going fast

01:00:36,069 --> 01:00:40,480
with releasing updates that are in place

01:00:38,380 --> 01:00:43,239
it's critical that we not make mistakes

01:00:40,480 --> 01:00:44,859
and so that's why we invest in doing

01:00:43,239 --> 01:00:47,079
that more than we have in the past so

01:00:44,859 --> 01:00:51,970
then we're over time but we can take one

01:00:47,079 --> 01:00:54,160
more question yes I wanted to ask is

01:00:51,970 --> 01:00:57,130
there any plan to have the visual

01:00:54,160 --> 01:01:00,249
studios compiler run on a non Windows

01:00:57,130 --> 01:01:03,130
platform so you can build the build the

01:01:00,249 --> 01:01:05,109
windows toolset our create automated

01:01:03,130 --> 01:01:08,440
builds to build the windows tools that

01:01:05,109 --> 01:01:13,210
our Windows applications or run even the

01:01:08,440 --> 01:01:15,640
need event native unit tests without

01:01:13,210 --> 01:01:23,170
actually having the visual studios

01:01:15,640 --> 01:01:24,789
running no that's a sword answer yeah no

01:01:23,170 --> 01:01:26,259
one there's no plans for that at this

01:01:24,789 --> 01:01:28,089
point but if people keep asking you

01:01:26,259 --> 01:01:31,150
never know all right now people are not

01:01:28,089 --> 01:01:34,120
so we'll be around for as long as they

01:01:31,150 --> 01:01:39,690
let us and thank you for coming thanks

01:01:34,120 --> 01:01:39,690

YouTube URL: https://www.youtube.com/watch?v=jsdn3kXFVdA


